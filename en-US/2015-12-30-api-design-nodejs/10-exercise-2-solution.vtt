WEBVTT

1
00:00:00.016 --> 00:00:03.774
[MUSIC]

2
00:00:03.774 --> 00:00:06.538
&gt;&gt; Speaker 1: So
this stuff was already here for you.

3
00:00:06.538 --> 00:00:08.487
I talked a little bit about body parts and

4
00:00:08.487 --> 00:00:11.710
how we need it to be able to post
things and put things to our server.

5
00:00:13.170 --> 00:00:16.120
Lodash is just a utility library,
very similar to under score.

6
00:00:16.120 --> 00:00:17.720
Don't need it,
it's just nice to have this stuff.

7
00:00:18.760 --> 00:00:22.040
I also talked about this syntax share
the app.use we're gonna talk a little bit

8
00:00:22.040 --> 00:00:24.410
more about it after lunch
when we get into middleware.

9
00:00:24.410 --> 00:00:28.730
But it's just a way for us to register
middleware on an application level.

10
00:00:28.730 --> 00:00:33.710
Because this object right here,
app, is our web application.

11
00:00:33.710 --> 00:00:38.020
When we say .use, what's really
happening in the background is this.

12
00:00:38.020 --> 00:00:44.350
There's like an array somewhere,
appMiddleware.

13
00:00:46.480 --> 00:00:49.420
It's a stack and
every time we say app.use,

14
00:00:49.420 --> 00:00:54.710
it pushes in the function that
we're passing into this array.

15
00:00:54.710 --> 00:00:58.320
So express.static is a function that
actually returns another function.

16
00:00:59.330 --> 00:01:02.050
So it's returning a function
that looks like this.

17
00:01:02.050 --> 00:01:04.072
We're gonna get into middleware as well,
I just want to give you some context.

18
00:01:04.072 --> 00:01:07.860
It's just returning a function that
has a request, a response, and

19
00:01:07.860 --> 00:01:09.900
this next function right here.

20
00:01:09.900 --> 00:01:11.730
I'm not gonna talk about the next,
but that's all it's doing.

21
00:01:11.730 --> 00:01:14.220
And eventually there's just tons
of these functions inside of here.

22
00:01:15.470 --> 00:01:16.830
It's a stack of middleware and

23
00:01:16.830 --> 00:01:21.750
it runs them in order of registration
whenever a request comes in.

24
00:01:21.750 --> 00:01:25.580
So that means when we do a get request
like /Lions, the first thing that request

25
00:01:25.580 --> 00:01:28.206
does is it runs through this middleware,
then it runs through this middleware,

26
00:01:28.206 --> 00:01:33.670
then it runs through this middleware and
then finally it comes here.

27
00:01:35.940 --> 00:01:38.070
So that's what's happening
when I say app.use.

28
00:01:38.070 --> 00:01:42.540
So every request that comes to application
will run through all these functions first

29
00:01:42.540 --> 00:01:45.789
before they actually go to where
they ended up being registered.

30
00:01:46.790 --> 00:01:48.150
So that's global middleware.

31
00:01:48.150 --> 00:01:50.760
Again, I have a whole section that's
talking about this so we'll get into it.

32
00:01:50.760 --> 00:01:53.760
So you can save your questions until then,
but I just wanna give you some context.

33
00:01:55.570 --> 00:01:59.000
So and then we just have our database
here, which is just an array.

34
00:01:59.000 --> 00:02:00.700
And I put this ID right here.

35
00:02:00.700 --> 00:02:05.588
If you notice when you start creating
stuff you actually need an ID,

36
00:02:05.588 --> 00:02:10.666
because you looked at our notes for
our blueprint all lines have an id.

37
00:02:13.268 --> 00:02:14.275
&gt;&gt; Speaker 1: So I put that ID there so

38
00:02:14.275 --> 00:02:16.670
you can increment it every
time you create a new line.

39
00:02:16.670 --> 00:02:20.118
It starts off as zero every
time you make a new increment.

40
00:02:23.215 --> 00:02:27.050
&gt;&gt; Speaker 1: So as far as the get,
or the get all is what I like to say.

41
00:02:27.050 --> 00:02:28.300
Because we're getting all the lines.

42
00:02:28.300 --> 00:02:30.950
It's just simple as saying res.JSON lines.

43
00:02:30.950 --> 00:02:33.630
That one was pretty easy,
you just send back all the lines.

44
00:02:33.630 --> 00:02:34.270
Just send back the array.

45
00:02:35.540 --> 00:02:39.460
Again if you look at the blue print,
that's what it says.

46
00:02:39.460 --> 00:02:41.390
It says send back an array of objects.

47
00:02:43.440 --> 00:02:45.270
That's it those objects are the lines.

48
00:02:45.270 --> 00:02:47.190
That may or may not be in there,
when we call it.

49
00:02:48.590 --> 00:02:50.420
But it's definitely an array and
that's where the lines will be.

50
00:02:50.420 --> 00:02:53.380
So the next one is the get one by ID.

51
00:02:57.338 --> 00:02:58.050
So the way we did that,

52
00:02:58.050 --> 00:03:02.220
I'm just using low dash here it's
a quick utility method to find

53
00:03:03.470 --> 00:03:08.500
any object in the lions array that has
an ID property who's ID matches this ID.

54
00:03:08.500 --> 00:03:09.350
So req.params.

55
00:03:09.350 --> 00:03:14.640
Params is an object on the request
that I talked about earlier that

56
00:03:14.640 --> 00:03:19.600
gives us access to the actual parameters
on the URL by the name we define them as.

57
00:03:19.600 --> 00:03:21.610
Because I put ID here,

58
00:03:21.610 --> 00:03:24.180
the way I reference it on the request
object is with the same name.

59
00:03:24.180 --> 00:03:30.340
So if I change this from ID to like,
thing then it will be thing here, too.

60
00:03:32.040 --> 00:03:32.730
Yes?

61
00:03:32.730 --> 00:03:36.580
&gt;&gt; Speaker 2: So for mine,
ID came in as a string.

62
00:03:36.580 --> 00:03:37.080
&gt;&gt; Speaker 1: Yes.

63
00:03:37.080 --> 00:03:40.260
&gt;&gt; Speaker 2: With low dash,
does it automatically parse the int?

64
00:03:40.260 --> 00:03:41.650
Or.
&gt;&gt; Speaker 1: Nope, it does not.

65
00:03:41.650 --> 00:03:42.210
&gt;&gt; Speaker 2: Okay.

66
00:03:42.210 --> 00:03:43.520
&gt;&gt; Speaker 1: So
there's two ways around that.

67
00:03:43.520 --> 00:03:45.560
One, you have to parse int on find.

68
00:03:45.560 --> 00:03:47.550
So you'd have to put parse int right here.

69
00:03:47.550 --> 00:03:49.200
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Speaker 1: Or

70
00:03:49.200 --> 00:03:50.510
you would only set the ID as a string.

71
00:03:50.510 --> 00:03:54.570
You would increment it first and then
set it as a string, which is what I did.

72
00:03:54.570 --> 00:03:58.970
&gt;&gt; Speaker 2: You would increment it
first and then set it as a string.

73
00:03:58.970 --> 00:04:01.960
&gt;&gt; Speaker 1: So like right here,
so I first increment the ID

74
00:04:01.960 --> 00:04:05.370
which takes it from whatever
number it is to one more, right?

75
00:04:05.370 --> 00:04:09.590
And then I set lion.id equal
to ID plus the string.

76
00:04:09.590 --> 00:04:15.460
So I'm coercing the number to a string
by adding it to a different string.

77
00:04:15.460 --> 00:04:18.380
&gt;&gt; Speaker 2: So
how does that work in the route above?

78
00:04:19.990 --> 00:04:22.100
&gt;&gt; Speaker 1: This, so
this is a get request.

79
00:04:22.100 --> 00:04:23.490
So when this comes back in,

80
00:04:23.490 --> 00:04:26.379
this ID's already a string,
because I set it as a string on the post.

81
00:04:27.420 --> 00:04:30.320
All right so, let me walk you through it.

82
00:04:30.320 --> 00:04:33.930
&gt;&gt; Speaker 2: You're saving
all your lions as strings now.

83
00:04:33.930 --> 00:04:35.750
&gt;&gt; Speaker 1: Yes,
yeah they're all strings.

84
00:04:35.750 --> 00:04:36.390
&gt;&gt; Speaker 2: Gotcha.
&gt;&gt; Speaker 1: They're

85
00:04:36.390 --> 00:04:37.290
never saved as a number.

86
00:04:37.290 --> 00:04:38.450
&gt;&gt; Speaker 2: They're
never saved as a number.

87
00:04:38.450 --> 00:04:39.610
&gt;&gt; Speaker 1: I use a number for
the ID, but

88
00:04:39.610 --> 00:04:41.620
then I immediately coerce it to a string.

89
00:04:41.620 --> 00:04:42.820
&gt;&gt; Speaker 2: Okay, that makes sense.

90
00:04:45.780 --> 00:04:48.170
&gt;&gt; Speaker 1: So yeah, so then I just
say res.json lion, or an empty object.

91
00:04:48.170 --> 00:04:50.830
You don't have to put
the empty object here.

92
00:04:50.830 --> 00:04:51.704
Whatever you want for your API.

93
00:04:51.704 --> 00:04:53.451
You could just put undefined or whatever.

94
00:04:57.598 --> 00:04:59.300
&gt;&gt; Speaker 1: But, empty object is
probably not the best thing to put there.

95
00:04:59.300 --> 00:05:03.580
Because then you have to check to see if
the object is empty on the front end.

96
00:05:03.580 --> 00:05:06.698
So it's probably not the best thing.

97
00:05:06.698 --> 00:05:08.070
And then post.

98
00:05:11.290 --> 00:05:13.540
If you look at the blueprint that we made.

99
00:05:13.540 --> 00:05:14.220
Go back to it.

100
00:05:15.810 --> 00:05:19.020
It should create and return a new line,
using the posted object as a line.

101
00:05:20.410 --> 00:05:23.080
So first thing that we need to do
is get the reference to the new

102
00:05:23.080 --> 00:05:25.680
line that we're trying to
create that we posted.

103
00:05:25.680 --> 00:05:28.570
And that's going to be on req.body and
that's because

104
00:05:28.570 --> 00:05:31.630
I left some notes on the body part
that says anything that we post or

105
00:05:31.630 --> 00:05:36.990
put to the server will be available via
req.body and that's what the line is.

106
00:05:36.990 --> 00:05:40.160
It's whatever we post to
the server using AJAX.

107
00:05:41.540 --> 00:05:43.609
Whatever that object is that's req.body.

108
00:05:44.850 --> 00:05:45.576
Yes.

109
00:05:45.576 --> 00:05:47.900
&gt;&gt; Speaker 2: So
my req.body came in as JSON,

110
00:05:47.900 --> 00:05:50.880
is that some magic that
express is doing for me.

111
00:05:50.880 --> 00:05:53.980
&gt;&gt; Speaker 1: It's a couple things, so
one, I'm using on the front end I'm using

112
00:05:53.980 --> 00:05:58.000
the window.fetch polyfill which is
a new thing inside the browser.

113
00:05:58.000 --> 00:06:04.230
So the browser's are getting
rid of XHR requests or AJAX.

114
00:06:04.230 --> 00:06:09.121
They're get rid of or is it HX,
they're getting rid of that,

115
00:06:09.121 --> 00:06:13.086
XHTML HTTP requests and
are doing fetch instead.

116
00:06:13.086 --> 00:06:17.670
So window.fetch is the new HX.

117
00:06:17.670 --> 00:06:20.320
&gt;&gt; Speaker 2: So
it's just a different method name.

118
00:06:20.320 --> 00:06:24.000
&gt;&gt; Speaker 1: It actually uses HX on
the inside but it has a promise API.

119
00:06:25.209 --> 00:06:25.744
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Speaker 1: So

120
00:06:25.744 --> 00:06:29.020
you did like .fetch .then,
it is that stuff.

121
00:06:29.020 --> 00:06:30.320
So that's what I'm using and

122
00:06:30.320 --> 00:06:34.080
that one will take an object,
convert it to JSON and send it.

123
00:06:34.080 --> 00:06:37.250
And then request our
Express does the opposite.

124
00:06:37.250 --> 00:06:38.260
It will take the JSON and

125
00:06:38.260 --> 00:06:40.700
convert it back to an object by
the time it gets back to you.

126
00:06:40.700 --> 00:06:46.300
So by the time you access req.body,
it's a JavaScript object It

127
00:06:46.300 --> 00:06:51.548
was created as, actually I'll show you the
source code so you can see the full stuff.

128
00:06:51.548 --> 00:06:54.153
And app.js is just a crazy file.

129
00:06:54.153 --> 00:07:00.290
Look, where is it at?

130
00:07:00.290 --> 00:07:00.960
Where is it at?

131
00:07:00.960 --> 00:07:03.120
&gt;&gt; Speaker 2: So its sent is type JSON.

132
00:07:03.120 --> 00:07:04.310
&gt;&gt; Speaker 1: Yeah, here's the object.

133
00:07:04.310 --> 00:07:06.468
Yeah.
This is the object that gets sent.

134
00:07:06.468 --> 00:07:09.074
It's an object,
it's got a name, a prior age,

135
00:07:09.074 --> 00:07:12.778
a gender property on it that I got
from the form and then when I send it.

136
00:07:16.778 --> 00:07:20.596
&gt;&gt; Speaker 1: Right here I say object is
JSON and I'm like stringifying it just in

137
00:07:20.596 --> 00:07:24.780
case even though I think window.fetch
does it for you either way.

138
00:07:24.780 --> 00:07:29.463
It's a new standard so I didn't really
know how to stringified it anyway.

139
00:07:29.463 --> 00:07:34.117
Yeah, I stringified it, and then express
it the opposite, it parsed it, and

140
00:07:34.117 --> 00:07:36.710
attached it to req.body.

141
00:07:36.710 --> 00:07:40.310
&gt;&gt; Speaker 2: If we didn't have that
header, it would have been text.

142
00:07:40.310 --> 00:07:40.920
&gt;&gt; Speaker 1: This header?

143
00:07:40.920 --> 00:07:41.780
&gt;&gt; Speaker 2: Yeah.

144
00:07:41.780 --> 00:07:45.575
&gt;&gt; Speaker 1: I'm not too
sure how window.fetch works.

145
00:07:45.575 --> 00:07:46.869
It might assume that it's already JSON.

146
00:07:48.420 --> 00:07:50.880
It's probably smart enough to do that,
I imagine.

147
00:07:50.880 --> 00:07:52.460
But if not, it doesn't hurt.

148
00:07:52.460 --> 00:07:53.340
But, yeah.

149
00:07:55.911 --> 00:07:56.473
&gt;&gt; Speaker 1: Where was I?

150
00:07:56.473 --> 00:07:57.704
Yeah, here we go.

151
00:08:00.030 --> 00:08:02.181
&gt;&gt; Speaker 1: Yeah, so we did the line
on req.body because that's whatever

152
00:08:02.181 --> 00:08:02.960
we attach to the body.

153
00:08:04.230 --> 00:08:09.341
I increment the ID by one and then I
set the lions ID equal to that ID but

154
00:08:09.341 --> 00:08:14.188
of course it's a string as we
talked about earlier because as you

155
00:08:14.188 --> 00:08:16.810
could imagine you have a problem.

156
00:08:16.810 --> 00:08:21.670
If this was a number but
it's actually req.params.id would actually

157
00:08:21.670 --> 00:08:26.440
be a string even though we set
this as a number down here.

158
00:08:26.440 --> 00:08:30.710
Because we convert it to JSON and
take it back, it's still a number.

159
00:08:30.710 --> 00:08:34.480
And then lodash would fail because it's
like there is no thing with a ID of

160
00:08:34.480 --> 00:08:35.690
number one.

161
00:08:35.690 --> 00:08:39.150
There's something with the ID of
string one, so it would break.

162
00:08:39.150 --> 00:08:40.940
So that's why I coerce it to a string.

163
00:08:40.940 --> 00:08:46.900
And then I just add the lion to
our database, push it in there.

164
00:08:46.900 --> 00:08:50.396
And then I send the lion back because
we're expecting it to come back,

165
00:08:50.396 --> 00:08:53.908
right because if I don't get that back,
I'll show you what happens.

166
00:09:01.266 --> 00:09:04.350
&gt;&gt; Speaker 1: So if I don't get that
back we're going to have some problems.

167
00:09:05.400 --> 00:09:10.652
So say I come in here and
I make a lion, Simba,

168
00:09:10.652 --> 00:09:15.720
Lion King,

169
00:09:15.720 --> 00:09:19.180
I give him an age,
he's male, and I hit submit.

170
00:09:19.180 --> 00:09:21.050
You see how it posted on the page here.

171
00:09:21.050 --> 00:09:23.240
That's because the service
sent me that back.

172
00:09:23.240 --> 00:09:25.500
But if it didn't send me that back,
it's was like okay.

173
00:09:25.500 --> 00:09:26.680
Thanks.
I created it.

174
00:09:26.680 --> 00:09:29.110
Then I would have never have been able to
post this new thing on a page on create.

175
00:09:29.110 --> 00:09:30.630
Then I would have to ask for it.

176
00:09:30.630 --> 00:09:35.720
I would be like okay, dot then on side of
the client, then give me the lion back.

177
00:09:35.720 --> 00:09:37.910
It would be an additional request,
you see what I mean,

178
00:09:37.910 --> 00:09:39.760
I would have to do another
request just to get it back.

179
00:09:39.760 --> 00:09:41.240
I can just get it back
on the same request.

180
00:09:42.850 --> 00:09:47.560
That's why it's important to send back
the resources you created on post, right?

181
00:09:47.560 --> 00:09:49.070
So, to illustrate that again.

182
00:09:49.070 --> 00:09:51.180
If I go in, and I got.

183
00:09:51.180 --> 00:09:55.990
If I was just like, res.end.

184
00:09:55.990 --> 00:10:00.280
Which I think we can still do in Express.

185
00:10:00.280 --> 00:10:03.360
If I just did that,
which restarted the server.

186
00:10:03.360 --> 00:10:12.030
Now I come in here and I do this again,
&gt;&gt; Speaker 1: And I submit and, nothing.

187
00:10:12.030 --> 00:10:16.380
I actually got an error,
unexpected end of input.

188
00:10:16.380 --> 00:10:20.150
So it's important to send back that
resource, because if you created it,

189
00:10:20.150 --> 00:10:23.710
you're probably going to need it,
so just send it back.

