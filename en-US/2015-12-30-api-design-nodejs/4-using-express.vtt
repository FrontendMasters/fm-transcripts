WEBVTT

1
00:00:00.069 --> 00:00:04.566
[MUSIC]

2
00:00:04.566 --> 00:00:08.000
&gt;&gt; Scott Moss: So here's a little hello
world getting started with Express just to

3
00:00:08.000 --> 00:00:09.333
show you how simple it is.

4
00:00:09.333 --> 00:00:12.450
I should've showed you some code of how
this will look if you didn't use Express.

5
00:00:12.450 --> 00:00:15.190
You would've been like,
okay, Express makes sense.

6
00:00:15.190 --> 00:00:19.910
But yeah,
this is a simple server in Express.

7
00:00:19.910 --> 00:00:23.846
We require, well, first,
we NPM installed Express and

8
00:00:23.846 --> 00:00:28.446
then we require it, we make our app and
then we set up a get request.

9
00:00:28.446 --> 00:00:32.644
So every method we place on this app or
most of the methods are HTTP verb, so

10
00:00:32.644 --> 00:00:34.420
we're gonna use the get verb.

11
00:00:34.420 --> 00:00:40.120
So that means on any get request
to /sodos run this function.

12
00:00:40.120 --> 00:00:43.320
Any post request to
/todos run this function.

13
00:00:44.490 --> 00:00:46.420
And then, listen on port 3000.

14
00:00:46.420 --> 00:00:50.160
So now, we can go local host port 3000 and
our server will be there.

15
00:00:50.160 --> 00:00:51.900
That's it, just those few lines of code,

16
00:00:51.900 --> 00:00:56.440
we had a server with two routes,
pretty simple.

17
00:00:57.810 --> 00:01:01.600
So yeah, above an example of
a basic HTTP server using Express.

18
00:01:01.600 --> 00:01:05.504
The req and the res that you see in
this callback functions right here,

19
00:01:05.504 --> 00:01:07.840
they're short for request and response.

20
00:01:09.150 --> 00:01:12.483
And they're just objects in
the callback that we get access to, and

21
00:01:12.483 --> 00:01:16.210
the callback that gives us so
much flexibility and so much power.

22
00:01:16.210 --> 00:01:20.850
This is also the great
thing about Express.

23
00:01:20.850 --> 00:01:23.090
You'll see this pattern in a lot
server frameworks on node,

24
00:01:23.090 --> 00:01:25.070
this req response type thing.

25
00:01:25.070 --> 00:01:28.410
It's very, very common in
the middleware type of thing.

26
00:01:28.410 --> 00:01:29.770
And we'll talk about
middleware in a minute, but

27
00:01:29.770 --> 00:01:32.690
these two objects are very powerful, and
this is what you're gonna be working with

28
00:01:32.690 --> 00:01:36.390
pretty much the entirety of the course
is the request objects, and

29
00:01:36.390 --> 00:01:37.770
the response objects.

30
00:01:37.770 --> 00:01:41.977
Modifying and mutating them to get what
you want and to send back appropriate

31
00:01:41.977 --> 00:01:49.135
responses from the appropriate requests.
&gt;&gt; Scott Moss: So

32
00:01:49.135 --> 00:01:53.918
on the request, we have tons of
information about what is trying to access

33
00:01:53.918 --> 00:01:56.630
our server through that request object.

34
00:01:56.630 --> 00:02:01.990
And then using the response object we have
tons of ways to send back a response.

35
00:02:01.990 --> 00:02:04.800
So here's a little more
complicated example.

36
00:02:04.800 --> 00:02:08.720
Using like To-dos, all right,
everybody's made a todo app.

37
00:02:08.720 --> 00:02:13.062
So if we were to do a git request,
todo/todos if we wanted

38
00:02:13.062 --> 00:02:17.584
to send back the array of todos or
a database query of todos,

39
00:02:17.584 --> 00:02:22.016
all you would have to say is
just res.json(todos), and

40
00:02:22.016 --> 00:02:25.559
that's it, and
then the client gets it back.

41
00:02:26.620 --> 00:02:27.390
That's all we would have to do.

42
00:02:27.390 --> 00:02:32.220
We could also say response.send
which would send it back as well.

43
00:02:32.220 --> 00:02:33.470
It also converts it so json.

44
00:02:33.470 --> 00:02:40.640
But re.json converts undefined and null to
json which technically isn't valid json.

45
00:02:40.640 --> 00:02:42.220
But it will convert it.

46
00:02:42.220 --> 00:02:43.370
So that's why I use json here.

47
00:02:43.370 --> 00:02:45.070
You could also do res.send.

48
00:02:45.070 --> 00:02:46.950
But this is all you have to
do is to send back your json.

49
00:02:46.950 --> 00:02:47.949
It's like, okay.

50
00:02:47.949 --> 00:02:51.808
When somebody does a get request to todos,
take this array,

51
00:02:51.808 --> 00:02:54.088
convert it to JSON and send it back.

52
00:02:54.088 --> 00:02:54.970
That's what's happening.

53
00:02:56.910 --> 00:02:59.186
The next line,
little something else is going on here.

54
00:02:59.186 --> 00:03:02.938
So if we do a post request, which means
we're sending data to our server,

55
00:03:02.938 --> 00:03:06.267
we want to create something,
with the appropriate middleware,

56
00:03:06.267 --> 00:03:10.382
again we'll talk about middleware soon,
we get access to the actual object that

57
00:03:10.382 --> 00:03:14.039
the client is posting to our server
by just my saying req.body.todo.

58
00:03:14.039 --> 00:03:18.602
So the body property on the request and
get the todo object.

59
00:03:18.602 --> 00:03:21.945
Now we have the todo that was posted
to server, add it to our list and

60
00:03:21.945 --> 00:03:23.160
then just send it back.

61
00:03:25.060 --> 00:03:30.715
And I made a little note here about
how res.json and res.send are pretty

62
00:03:30.715 --> 00:03:36.942
much the same thing with some small
differences, with the undefined and null.

63
00:03:36.942 --> 00:03:41.045
And then if we have some parameters in our
URL, we can access the parameters by doing

64
00:03:41.045 --> 00:03:45.046
something like req.params, which is
an object of the parameters and the URLs.

65
00:03:45.046 --> 00:03:49.770
So in this case we have one parameter and
we have given it the name id.

66
00:03:49.770 --> 00:03:53.840
So if we wanted to access whatever
that was, so anything after todos,

67
00:03:53.840 --> 00:03:57.990
that's gonna be considered the id,
we can access it by saying req.params and

68
00:03:57.990 --> 00:04:01.610
using the name that we
specified up here which is id.

69
00:04:01.610 --> 00:04:05.840
So we can get the id that the person
passed in and we can find our todos and

70
00:04:05.840 --> 00:04:06.390
then send it back.

71
00:04:08.490 --> 00:04:10.080
So again, very, very simple.

72
00:04:10.080 --> 00:04:11.650
This is why I chose to use Express.

73
00:04:11.650 --> 00:04:15.190
As you can see, it's powerful,
but yet it's very simple.

74
00:04:15.190 --> 00:04:16.800
And you can also do this
yourself without Express.

75
00:04:16.800 --> 00:04:20.040
It's a lot more work, but
you can totally do it.

76
00:04:20.040 --> 00:04:22.689
Yeah, Mark?
&gt;&gt; Mark: Do you have to define one

77
00:04:22.689 --> 00:04:26.859
function for every request type?
&gt;&gt; Scott Moss: Do you have to define one,

78
00:04:26.859 --> 00:04:31.753
well, you definitely need at least one
function for each request type, but

79
00:04:31.753 --> 00:04:35.882
you can define more than one function for
each request type, and

80
00:04:35.882 --> 00:04:38.960
that's in middleware.
&gt;&gt; Mark: He kind of follows up,

81
00:04:38.960 --> 00:04:42.432
if he wants to do the same
thing on both a get and a post.

82
00:04:42.432 --> 00:04:43.130
&gt;&gt; Scott Moss: Hopefully,

83
00:04:43.130 --> 00:04:45.490
you're not doing the same
thing on a get and a post.

84
00:04:45.490 --> 00:04:49.070
But, if for
whatever reason you did do that,

85
00:04:49.070 --> 00:04:50.740
first of all you wouldn't
be following REST, but

86
00:04:50.740 --> 00:04:55.910
if you wanted to do that then you
would just abstract that thing out and

87
00:04:55.910 --> 00:04:59.030
either add it as a middleware or just
call it inside this callback function.

88
00:04:59.030 --> 00:05:03.050
But I think the person who's asking that
question is getting into middleware and

89
00:05:03.050 --> 00:05:03.950
we'll talk more about that.

90
00:05:03.950 --> 00:05:09.060
So yeah, there's this concept of
shared functionality that you want

91
00:05:09.060 --> 00:05:13.440
to run on specific routes or
an application or a stack of routes,

92
00:05:13.440 --> 00:05:16.510
before you actually respond back to
the client and that's called middleware.

93
00:05:16.510 --> 00:05:20.320
So we'll see what that looks like.

94
00:05:20.320 --> 00:05:21.540
Next thing says middleware, yeah.

95
00:05:21.540 --> 00:05:26.319
So, Express uses middleware to modify and
inspect the incoming request.

96
00:05:28.120 --> 00:05:30.110
So what I mean by that is,

97
00:05:30.110 --> 00:05:32.890
you can actually think of this
callback function as middleware.

98
00:05:32.890 --> 00:05:34.640
Technically, it kind of is.

99
00:05:34.640 --> 00:05:39.910
So really, middleware is just
a function that allows us to,

100
00:05:39.910 --> 00:05:43.140
that's going to be ran in the order
that we register with Express.

101
00:05:43.140 --> 00:05:45.580
And its job is to do
whatever we want it to do.

102
00:05:45.580 --> 00:05:47.750
It can use any code that it wants.

103
00:05:47.750 --> 00:05:51.724
But typically what middleware would do is
look at the request object, inspect it,

104
00:05:51.724 --> 00:05:55.528
depending on what we're looking for
in the request object, it will either pass

105
00:05:55.528 --> 00:05:59.161
the execution to the next middleware in
the stack or will stop the request and

106
00:05:59.161 --> 00:06:01.943
the response cycle right there and
either throw an error or

107
00:06:01.943 --> 00:06:06.100
respond back to the client and it'll be
like, we're done, don't even go forward.

108
00:06:06.100 --> 00:06:09.231
If you don't know meet these credentials,
stop.

109
00:06:09.231 --> 00:06:12.450
So, you don't even get to go to this
function and send a response back.

110
00:06:12.450 --> 00:06:16.980
So we'll see better examples about
that later today, but middleware is

111
00:06:16.980 --> 00:06:21.760
probably the most powerful feature in
Express other than the routing and

112
00:06:21.760 --> 00:06:23.070
that's really all Express is.

113
00:06:23.070 --> 00:06:26.696
It's the routing and
it's the middleware, that's all it is.

114
00:06:26.696 --> 00:06:28.880
It's very lightweight, if you look
at the sourcecode for the Express,

115
00:06:28.880 --> 00:06:31.820
it's like one page, it's small.

116
00:06:31.820 --> 00:06:35.560
It's really small, it's really easy.

117
00:06:35.560 --> 00:06:38.010
So yeah, there are,
because the middleware is so powerful,

118
00:06:38.010 --> 00:06:41.930
you could think of middleware as
like the plugins inside of Express,

119
00:06:41.930 --> 00:06:45.310
because of that there's such a big
community of third party middleware

120
00:06:45.310 --> 00:06:47.440
modules out there that
we're gonna be using.

121
00:06:47.440 --> 00:06:50.320
Express 3.0 had a lot of that
stuff baked in because they were

122
00:06:50.320 --> 00:06:52.340
using something called Connect.

123
00:06:52.340 --> 00:06:55.310
They had a big reliance on this
other framework called Connect and

124
00:06:55.310 --> 00:06:58.430
then they got away from Connect but
they wanted the same stuff, so

125
00:06:58.430 --> 00:07:02.710
they took out all that middleware and
now it's available third party side but

126
00:07:02.710 --> 00:07:04.130
you can still get the same stuff.

127
00:07:04.130 --> 00:07:06.650
So middleware from parsing, URLs,

128
00:07:06.650 --> 00:07:10.050
through handling authentication,
we'll be able to use that stuff.

129
00:07:10.050 --> 00:07:12.410
And it just makes building
with Express super easy.

130
00:07:13.510 --> 00:07:15.970
And Express can also be
a static web server.

131
00:07:15.970 --> 00:07:20.540
So we can serve static assets and
trust me, it makes it so

132
00:07:20.540 --> 00:07:21.940
much easier than if you did it yourself.

133
00:07:21.940 --> 00:07:24.630
If you ever had to just write a server
manually and serve static assets,

134
00:07:24.630 --> 00:07:28.500
if you don't have any experience with
that, it can be quite difficult.

135
00:07:28.500 --> 00:07:31.710
Setting the appropriate mine types,
reading files,

136
00:07:31.710 --> 00:07:34.600
dealing with buffers,
stuff like that you know, chunks.

137
00:07:34.600 --> 00:07:39.120
So it can be quite difficult if you don't
have a lot of experience with that.

138
00:07:39.120 --> 00:07:42.320
Express just makes it easy and one line,
it'll handle all that stuff for you.

