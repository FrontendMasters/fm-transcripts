WEBVTT

1
00:00:00.000 --> 00:00:03.930
[MUSIC]

2
00:00:03.930 --> 00:00:05.147
&gt;&gt; Speaker 1: All right,
so before we move on,

3
00:00:05.147 --> 00:00:07.410
I'm just going to make a small
optimization to show you guys.

4
00:00:07.410 --> 00:00:10.390
Now that we have these mini routers, and
we could have done this on the app but

5
00:00:10.390 --> 00:00:15.090
I think it makes more
sense to do this here,

6
00:00:15.090 --> 00:00:19.649
is in places where we have
the same URL like, /:id', /:id,

7
00:00:19.649 --> 00:00:24.530
/:id, we have that /:id three times and
then we have root root twice.

8
00:00:24.530 --> 00:00:29.508
I can clean this up a little
bit by using the .route method.

9
00:00:29.508 --> 00:00:35.210
And that exists on an application
instance and a router instance.

10
00:00:35.210 --> 00:00:37.500
So I can say tiger.

11
00:00:38.870 --> 00:00:40.200
Oops, sorry.

12
00:00:40.200 --> 00:00:42.220
Tigerrouter.route.

13
00:00:43.280 --> 00:00:46.130
That's a function that it takes in a path.

14
00:00:46.130 --> 00:00:51.116
So in this case, the route and
then like I say, on dot get just do this.

15
00:00:55.757 --> 00:00:58.476
&gt;&gt; Speaker 1: Do that on dot get.

16
00:00:58.476 --> 00:01:02.747
And now I can just get rid of that.

17
00:01:02.747 --> 00:01:04.367
And then on post, do this.

18
00:01:07.607 --> 00:01:08.580
&gt;&gt; Speaker 1: And
I can get rid of the post.

19
00:01:08.580 --> 00:01:15.006
So I'll come back and
say .post and put that in there.

20
00:01:19.736 --> 00:01:21.966
&gt;&gt; Speaker 1: I can do the same thing for
the other route which is ID.

21
00:01:21.966 --> 00:01:27.056
So tigerrouter.route/id which

22
00:01:27.056 --> 00:01:32.677
has got like three of them on it right?

23
00:01:32.677 --> 00:01:34.557
And that's got a get which is this one.

24
00:01:37.212 --> 00:01:38.311
&gt;&gt; Speaker 1: Get rid of that.

25
00:01:42.551 --> 00:01:46.991
&gt;&gt; Speaker 1: And it's got a delete,
which is this one.

26
00:01:46.991 --> 00:01:48.871
Get rid of that.

27
00:01:58.377 --> 00:02:00.390
&gt;&gt; Speaker 1: And
then one more which is the put.

28
00:02:03.260 --> 00:02:03.760
We can get rid of that.

29
00:02:07.250 --> 00:02:10.710
So just cleaning up some
code same functionality

30
00:02:10.710 --> 00:02:13.307
because they share the same route path.

31
00:02:15.080 --> 00:02:19.500
So I can just use the dot route method,
so it's only route the route wants.

32
00:02:19.500 --> 00:02:23.380
A little bit cleaner, so
you can also do this on app.

33
00:02:23.380 --> 00:02:26.490
So if I went to app,
I can also say app.route.

34
00:02:26.490 --> 00:02:29.790
It's the same thing,
they work the same way on routers.

35
00:02:29.790 --> 00:02:34.570
So again, I'm saying, so
if any request comes in for route, and

36
00:02:34.570 --> 00:02:36.080
it's get, run this.

37
00:02:36.080 --> 00:02:38.130
And if it's post, do this.

38
00:02:38.130 --> 00:02:41.270
If any request comes in for
route/id, and it's a get, do this.

39
00:02:41.270 --> 00:02:43.280
If it's a delete do this.

40
00:02:43.280 --> 00:02:44.420
If it's a put, do this.

41
00:02:44.420 --> 00:02:45.080
It's just a shortcut.

42
00:02:45.080 --> 00:02:46.970
So we saved a little bit
of keystrokes there.

43
00:02:49.470 --> 00:02:50.150
Any questions on that?

44
00:02:50.150 --> 00:02:53.850
I'll go ahead and
push this up to [INAUDIBLE] solutions.

45
00:02:53.850 --> 00:02:56.377
So if you want to pull it down.

46
00:03:14.112 --> 00:03:17.920
&gt;&gt; Speaker 2: There's a question I'm kind
of finding tracking down some errors.

47
00:03:17.920 --> 00:03:18.420
&gt;&gt; Speaker 1: Yes.

48
00:03:20.600 --> 00:03:23.290
&gt;&gt; Speaker 2: They're asking how do
you track down and report an error on

49
00:03:23.290 --> 00:03:29.730
an undefined method, for example if you
didn't require lodash in the lionRouter,

50
00:03:29.730 --> 00:03:34.910
you used get request lion will fail but
the console just indicates a 500 error?

51
00:03:34.910 --> 00:03:38.814
&gt;&gt; Speaker 1: Yeah, so to fix that you
have to come down, so I said in server.js.

52
00:03:40.070 --> 00:03:41.980
You need to make sure you
log your errors here.

53
00:03:41.980 --> 00:03:43.440
That's why that wasn't working.

54
00:03:43.440 --> 00:03:47.230
It would show the error like couldn't
find module load [INAUDIBLE] or

55
00:03:47.230 --> 00:03:48.350
something like that.

56
00:03:48.350 --> 00:03:51.310
So if you were to just log this
error.message that's gotta fix that.

57
00:03:51.310 --> 00:03:52.630
So by default, it will show that.

58
00:03:52.630 --> 00:03:55.170
That's Express taking those
synchronous errors and

59
00:03:55.170 --> 00:03:58.220
it's just not doing anything with it,
so yeah.

60
00:03:58.220 --> 00:03:59.900
Just log your message here.

61
00:03:59.900 --> 00:04:03.460
But if I had to find,
like track an error down,

62
00:04:03.460 --> 00:04:08.930
this is a good entry into like
debugging in general with node.

63
00:04:08.930 --> 00:04:10.850
So let's just talk about that for
a second, it's worth mentioning.

64
00:04:12.100 --> 00:04:20.007
There is a node debugger.

65
00:04:22.107 --> 00:04:22.640
&gt;&gt; Speaker 1: What?
What?

66
00:04:22.640 --> 00:04:24.180
Is it node?

67
00:04:24.180 --> 00:04:24.780
Debugger.
I forgot, I

68
00:04:26.500 --> 00:04:30.710
haven't used this this a while and
don't know what, I this is node, debugger.

69
00:04:30.710 --> 00:04:31.480
No, wait.

70
00:04:33.560 --> 00:04:34.550
No debug, debug.

71
00:04:36.850 --> 00:04:41.400
There it is.
Yes node, debug, server server.

72
00:04:41.400 --> 00:04:44.070
That's just going to run
your code in debug mode.

73
00:04:44.070 --> 00:04:46.090
It'll immediately stop at the first line.

74
00:04:46.090 --> 00:04:49.580
And this is kind of hard to use,

75
00:04:49.580 --> 00:04:53.200
like you can step, and
go to the next line, and stuff like that.

76
00:04:53.200 --> 00:04:54.560
And it's all through
this terminal interface.

77
00:04:54.560 --> 00:04:56.620
This is okay.

78
00:04:56.620 --> 00:04:58.649
I don't know anybody
professionally that uses this.

79
00:05:00.870 --> 00:05:05.440
I cannot recommend it but if you
wanted to, you can get busy with it.

80
00:05:05.440 --> 00:05:13.320
What most people use, if they use a
debugger at all, would be node-inspector.

81
00:05:13.320 --> 00:05:14.720
If you want to use this,

82
00:05:14.720 --> 00:05:17.910
then you need to npm install globally
node-inspector, it's a global thing.

83
00:05:20.670 --> 00:05:24.170
And a note inspector will
take the path to the file.

84
00:05:24.170 --> 00:05:27.090
And what happens is,

85
00:05:27.090 --> 00:05:30.220
if you run that command it'll give
you this URL to hit in your browser.

86
00:05:30.220 --> 00:05:31.900
So grab this.

87
00:05:31.900 --> 00:05:32.550
Go to Chrome.

88
00:05:33.600 --> 00:05:36.890
Paste that in.

89
00:05:36.890 --> 00:05:38.310
And what happens is it will load up.

90
00:05:38.310 --> 00:05:38.970
Or it's supposed to.

91
00:05:38.970 --> 00:05:40.239
It looks like it didn't really load it up.

92
00:05:41.400 --> 00:05:44.700
It's supposed to load up, so if you see it
looks like Chrome developments was here

93
00:05:44.700 --> 00:05:48.460
that will run your node GS through Chrome
development and have the same stuff.

94
00:05:48.460 --> 00:05:50.760
Not sure why it's not loading,
it loaded up the GUI but

95
00:05:50.760 --> 00:05:54.041
it's not actually loading up my files and
stuff.

96
00:05:54.041 --> 00:06:00.640
Let's see,
no this isn't loading up either.

97
00:06:00.640 --> 00:06:04.130
So yeah, if you do choose to use it,
then you would need to use Node Debugger.

98
00:06:04.130 --> 00:06:09.090
Me, personally, I'd just cancel out
everything, and I've been doing that for

99
00:06:09.090 --> 00:06:11.820
like two years node, and
I haven't had a problem with it.

100
00:06:11.820 --> 00:06:14.860
So, it's a smart thing.

101
00:06:14.860 --> 00:06:16.960
To me, it's just faster.

102
00:06:16.960 --> 00:06:21.580
But yeah, there do exist
Node Inspector that will do this.

103
00:06:21.580 --> 00:06:27.480
This is not part of node, it's a third
party module that's supported, so yeah.

104
00:06:27.480 --> 00:06:31.560
It's using web sockets to do debugging for
you, not sure why it's not working.

105
00:06:31.560 --> 00:06:33.950
I think it has something to do with the
fact that we're trying to debug an express

106
00:06:33.950 --> 00:06:35.370
server, not a static file.

107
00:06:35.370 --> 00:06:38.930
I'm sure there's a different
flag I need to pass in for that.

108
00:06:38.930 --> 00:06:40.366
But like I said, I don't use debugging.

109
00:06:40.366 --> 00:06:44.112
I just console.log everything.

