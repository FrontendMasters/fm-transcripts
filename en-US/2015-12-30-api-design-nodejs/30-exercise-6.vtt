WEBVTT

1
00:00:00.000 --> 00:00:03.808
[MUSIC]

2
00:00:03.808 --> 00:00:08.192
&gt;&gt; Speaker 1: So
if you will join me on step six.

3
00:00:13.447 --> 00:00:15.891
&gt;&gt; Speaker 1: Boom.

4
00:00:15.891 --> 00:00:17.796
[LAUGH] There's a lot of stuff
going on here so I'm just gonna,

5
00:00:17.796 --> 00:00:19.482
I'm gonna walk you through it
before I set you loose and

6
00:00:19.482 --> 00:00:20.890
explain to you what
you're really gonna do.

7
00:00:20.890 --> 00:00:22.420
Cuz there's a lot of stuff in here.

8
00:00:22.420 --> 00:00:25.830
If you want to look at some of this stuff,
I encourage you to.

9
00:00:25.830 --> 00:00:27.350
But, a lot of stuff in here,
we won't be touching.

10
00:00:27.350 --> 00:00:29.320
So notice that a lot of stuff has changed.

11
00:00:29.320 --> 00:00:32.700
We now have this, well we had this server
folder, but now inside this server folder

12
00:00:32.700 --> 00:00:37.880
we have an API folder, a config folder,
a middleware folder and a utility folder.

13
00:00:37.880 --> 00:00:39.890
A lot of stuff.

14
00:00:39.890 --> 00:00:42.700
So let's just walk through it.

15
00:00:42.700 --> 00:00:45.160
The first thing I'm gonna
do is look at server.js.

16
00:00:45.160 --> 00:00:47.038
Or actually let's look at index.js and
see what changed.

17
00:00:47.038 --> 00:00:50.330
So index.js has got some stuff in here.

18
00:00:50.330 --> 00:00:53.250
There's nothing you're gonna do in here,
but I got a lot of comments on what's

19
00:00:53.250 --> 00:00:56.160
going on and what's changed and
why I'm doing certain stuff.

20
00:00:57.430 --> 00:00:59.670
So really what's happening in here
is I'm just requiring this config.

21
00:00:59.670 --> 00:01:01.600
We'll talk about config later.

22
00:01:01.600 --> 00:01:03.920
We talked about this on the last
step why we exported the app.

23
00:01:03.920 --> 00:01:06.730
I'm doing the same thing just importing
the app like we did on the last step.

24
00:01:08.190 --> 00:01:09.810
This logger thing we'll talk
about that in a minute.

25
00:01:09.810 --> 00:01:11.800
And then I'm just listing on the server.

26
00:01:11.800 --> 00:01:15.030
The only difference is before
we hard-coded the port in here.

27
00:01:15.030 --> 00:01:18.400
This time we're getting a port from
whatever the config says the port is.

28
00:01:18.400 --> 00:01:21.000
So again this is why it's nice
to have this config object

29
00:01:21.000 --> 00:01:23.100
that we don't have to
guess what's going on.

30
00:01:23.100 --> 00:01:27.050
If we just put config.port there we'll
leave it up to config to determine what

31
00:01:27.050 --> 00:01:32.130
the port is and that can be dependent on
some hard coded value in the config or

32
00:01:32.130 --> 00:01:34.490
some process.environment.port or whatever.

33
00:01:37.320 --> 00:01:40.640
And then the logger we'll get to it in a
minute it's just a wrap around console.log

34
00:01:40.640 --> 00:01:43.220
that can be turned on or
off, that's all that is, and

35
00:01:43.220 --> 00:01:44.660
it like changes the colors and
stuff for you.

36
00:01:47.770 --> 00:01:49.330
So then we're going to server js and

37
00:01:49.330 --> 00:01:54.970
this is where it gets kind of confusing
cuz a lot of patterns we haven't seen,

38
00:01:54.970 --> 00:01:58.010
I'll tell you about this pattern before
but haven't really gotten into it.

39
00:01:58.010 --> 00:02:00.160
It's a very small file, but
it's actually doing quite a lot.

40
00:02:01.200 --> 00:02:06.580
So just like before, we have express,
we have our app, this is a router.

41
00:02:06.580 --> 00:02:10.070
I didn't call it API router cuz
it just seemed redundant but

42
00:02:10.070 --> 00:02:12.910
that's a router that we've made for
a line router or

43
00:02:12.910 --> 00:02:15.120
a tiger router, it's just the API,
that's a router.

44
00:02:16.810 --> 00:02:18.170
And then this part is
actually interesting.

45
00:02:19.400 --> 00:02:21.420
You notice I'm not setting
a variable over here.

46
00:02:21.420 --> 00:02:23.050
There's nothing to the left of this.

47
00:02:23.050 --> 00:02:24.380
That's because I don't really need to.

48
00:02:24.380 --> 00:02:25.840
It's not returning anything.

49
00:02:25.840 --> 00:02:28.290
It's just a function
that's doing something.

50
00:02:28.290 --> 00:02:29.160
So if you go look at it.

51
00:02:29.160 --> 00:02:30.680
Middleware app, middleware.

52
00:02:30.680 --> 00:02:31.670
It's doing what we already know.

53
00:02:31.670 --> 00:02:33.040
It's just setting up global middleware.

54
00:02:33.040 --> 00:02:34.610
That's all that it's doing.

55
00:02:34.610 --> 00:02:36.990
It just takes in an app and
sets up global middleware on it.

56
00:02:38.100 --> 00:02:39.330
That's it.
It doesn't return anything.

57
00:02:39.330 --> 00:02:41.050
That's why I have a variable
to the left of it.

58
00:02:42.130 --> 00:02:45.028
It's just like, if you give me an app,
I'll set up some middleware on it,

59
00:02:45.028 --> 00:02:50.280
that's it.
&gt;&gt; Speaker 1: So that's why that's there.

60
00:02:50.280 --> 00:02:57.960
So you can imagine all
this just being over here.

61
00:03:00.400 --> 00:03:01.060
It's the same thing.

62
00:03:02.560 --> 00:03:03.170
Nothing's changed.

63
00:03:03.170 --> 00:03:04.330
I just put it in another file.

64
00:03:04.330 --> 00:03:05.510
It's the same thing.

65
00:03:05.510 --> 00:03:07.970
If I left this here,
it would work exactly the same.

66
00:03:10.350 --> 00:03:13.539
But we only have three pieces
of global middleware in a row.

67
00:03:13.539 --> 00:03:16.435
Applications you probably have like 15.

68
00:03:16.435 --> 00:03:18.320
So that's why I took it out.

69
00:03:18.320 --> 00:03:22.360
Cuz maybe it's a premature optimization
but you will have more than just three,

70
00:03:22.360 --> 00:03:22.910
more or less.

71
00:03:25.040 --> 00:03:27.390
So I took it out and did that instead.

72
00:03:29.280 --> 00:03:34.210
So remember, this require is gonna
require whatever this file is.

73
00:03:34.210 --> 00:03:36.080
This file is a function right?

74
00:03:36.080 --> 00:03:38.530
This is a function right here.

75
00:03:38.530 --> 00:03:44.721
It's a function so I immediately invoking
the function and satisfying its argument,

76
00:03:44.721 --> 00:03:52.035
its signature, which is an app.
&gt;&gt; Speaker 1: Everybody follow me there,

77
00:03:52.035 --> 00:03:53.920
how it's just a function?

78
00:03:53.920 --> 00:04:01.365
It might be easier if I just did this,
if I said Var setupMiddleware

79
00:04:01.365 --> 00:04:04.560
= require and then not do that.

80
00:04:06.010 --> 00:04:10.697
And then down beneath I said setup,
&gt;&gt; Speaker 1: Oops, set-

81
00:04:10.697 --> 00:04:11.902
&gt;&gt; Speaker 2: [LAUGH]

82
00:04:11.902 --> 00:04:14.190
&gt;&gt; Speaker 1: [LAUGH] App.

83
00:04:14.190 --> 00:04:18.070
It's the same thing, I just didn't
feel like putting it on two lines.

84
00:04:20.530 --> 00:04:25.180
All right, so let's go back.
&gt;&gt; Speaker 2: There's

85
00:04:25.180 --> 00:04:26.730
a question on convention.

86
00:04:26.730 --> 00:04:31.360
When would you use relative path
versus absolute path in node,

87
00:04:31.360 --> 00:04:34.650
is there any kind of rules for it?
&gt;&gt; Speaker 1: Right, so relative path for

88
00:04:34.650 --> 00:04:36.800
all required statements.

89
00:04:36.800 --> 00:04:39.970
Absolute path for file systems.

90
00:04:41.050 --> 00:04:44.578
Anything related to the file system,
pretty sure it's absolute paths.

91
00:04:44.578 --> 00:04:52.010
And then I think that's about it,
from my experience.

92
00:04:53.280 --> 00:04:55.040
There might some more
other stuff out there, but

93
00:04:55.040 --> 00:04:59.350
mostly anything dealing with the file
systems It's probably apps to pass and

94
00:04:59.350 --> 00:05:02.060
it'll tell you, it'll like log
an error like that's not a real thing.

95
00:05:02.060 --> 00:05:07.030
And any piece of code that's
interacting with the file

96
00:05:07.030 --> 00:05:11.820
system wants absolute paths
too probably in my experience,

97
00:05:11.820 --> 00:05:14.220
unless the developer is nice
enough to like not require that.

98
00:05:16.450 --> 00:05:20.010
All right and then right underneath that
I'm just like all right let's set up our

99
00:05:20.010 --> 00:05:24.210
API so
just like before we don't need that.

100
00:05:24.210 --> 00:05:28.320
So just like before, where we had
we were mounting the tigers and

101
00:05:28.320 --> 00:05:31.540
the lions to the tiger router and
the lion router, I'm doing the same thing.

102
00:05:31.540 --> 00:05:36.650
I'm mounting any request to /api to use
the API router, that's what I'm doing,

103
00:05:36.650 --> 00:05:37.360
so same thing.

104
00:05:37.360 --> 00:05:41.460
So just like before, we had lions, so

105
00:05:41.460 --> 00:05:44.130
any request coming to lions
use the lions router.

106
00:05:45.680 --> 00:05:47.090
That's what we had.
That's the same thing.

107
00:05:48.120 --> 00:05:49.730
Anything that comes through API,
use the API router.

108
00:05:51.480 --> 00:05:52.290
I'm exporting the app.

109
00:05:56.080 --> 00:05:58.540
So your first task in here
is to set up error handling,

110
00:05:58.540 --> 00:05:59.470
some global error handling.

111
00:05:59.470 --> 00:06:01.720
So remember,
error handling goes after everything else.

112
00:06:01.720 --> 00:06:03.560
So I'll just come in here and
set up some error handling, so

113
00:06:03.560 --> 00:06:08.530
when we call next Inside of this router
somewhere, it'll happen in here.

114
00:06:08.530 --> 00:06:11.510
Or if you want, because everything's
encapsulated inside this router,

115
00:06:11.510 --> 00:06:15.300
you could also set up error handling
on this router's Middleware stack and

116
00:06:15.300 --> 00:06:16.390
it will still happen.

117
00:06:16.390 --> 00:06:16.940
So it's up to you.

118
00:06:18.830 --> 00:06:22.590
But the reason I say put it there
cuz if we add another API down here.

119
00:06:22.590 --> 00:06:25.130
You know it would be nice
to have it at one place.

120
00:06:25.130 --> 00:06:25.650
So it's up to you.

121
00:06:25.650 --> 00:06:26.880
You can put it here or
you can put it in API.

122
00:06:29.100 --> 00:06:30.740
Everybody following me so far?

123
00:06:30.740 --> 00:06:31.600
Okay.

124
00:06:31.600 --> 00:06:32.640
So now if you go into API.

125
00:06:33.850 --> 00:06:34.720
On the root there's an API.js.

126
00:06:34.720 --> 00:06:39.760
Again, I said I'm not using the index.js
pattern because it's kind of confusing.

127
00:06:39.760 --> 00:06:41.740
But I probably would in my application.

128
00:06:41.740 --> 00:06:45.730
I always put index.js inside of here,
that way I don't have to require API, API.

129
00:06:45.730 --> 00:06:49.190
I can just require API.

130
00:06:51.010 --> 00:06:53.590
But we're gonna stick with this
naming convention for now.

131
00:06:53.590 --> 00:06:56.510
So inside of here you're gonna
do a lot of work in here.

132
00:06:57.770 --> 00:07:00.430
So here's that router the API
router that I've made but

133
00:07:01.460 --> 00:07:03.799
all this router's doing is
setting up three other routers.

134
00:07:05.790 --> 00:07:09.290
So it's mounting slash
users slash categories and

135
00:07:09.290 --> 00:07:12.390
slash posts which are the resources
I said that we were gonna make, and

136
00:07:12.390 --> 00:07:15.720
it's expecting routers to be placed here.

137
00:07:19.320 --> 00:07:22.679
Just like with slash lions and
lions tiger or lions router,

138
00:07:22.679 --> 00:07:26.911
just like we have here where we're
saying slash API pass it to this router,

139
00:07:26.911 --> 00:07:32.090
it's doing the same thing, all right,
slash users, pass it to this router.

140
00:07:32.090 --> 00:07:34.370
Slash categories pass it to
whatever routers gonna go here,

141
00:07:34.370 --> 00:07:35.680
it's the same thing.

142
00:07:38.620 --> 00:07:43.180
So if you go look at the respective
folders, the resources.

143
00:07:43.180 --> 00:07:47.905
You'll notice there's a routes file for

144
00:07:47.905 --> 00:07:51.417
each one of them with a router.

145
00:08:02.574 --> 00:08:03.074
&gt;&gt; Speaker 1: All right.

146
00:08:04.440 --> 00:08:06.388
So there's only one thing, and
its already been exported, so

147
00:08:06.388 --> 00:08:07.880
you only gotta do one thing
to get it over there.

148
00:08:12.185 --> 00:08:13.600
Everybody follow me on there?

149
00:08:13.600 --> 00:08:16.964
The routers are already made, they already
have their initial GIF functions so

150
00:08:16.964 --> 00:08:25.710
they don't air out when you go to them.
&gt;&gt; Speaker 1: So you'll be doing that.

151
00:08:25.710 --> 00:08:28.750
And the last thing you'll be
doing is in the config folder.

152
00:08:29.770 --> 00:08:32.545
The config folder, there's a lot
of crazy stuff going on in here.

153
00:08:32.545 --> 00:08:35.920
Just gonna walk with you, so Config.js
is the root of the config folder.

154
00:08:35.920 --> 00:08:40.600
This is just like I was talking to you
about in the example as far as what

155
00:08:40.600 --> 00:08:42.150
they config object is gonna do, so

156
00:08:42.150 --> 00:08:45.240
we have our config object
with some properties on them.

157
00:08:45.240 --> 00:08:47.430
These properties are here,
dev, test, and production.

158
00:08:47.430 --> 00:08:51.070
This is just me storing the name
of the environment variables.

159
00:08:51.070 --> 00:08:52.310
So they're uniform.

160
00:08:52.310 --> 00:08:56.090
Cuz some people like to use test,
testing, dev,

161
00:08:56.090 --> 00:09:00.130
development, prod, production, like,
they like to use different terms.

162
00:09:00.130 --> 00:09:02.270
So I'm just like,
if I just call config.dev,

163
00:09:02.270 --> 00:09:03.780
it would be whatever this is gonna be.

164
00:09:03.780 --> 00:09:06.472
I don't even know what it is,
it's just gonna be this.

165
00:09:06.472 --> 00:09:08.400
All right, so this is just a way for
me to keep things uniform.

166
00:09:10.100 --> 00:09:12.760
So I've set up a basic config object.

167
00:09:12.760 --> 00:09:14.270
This port right here,
this is a convention.

168
00:09:14.270 --> 00:09:18.280
When you deploy this,
the port that you're gonna listen

169
00:09:18.280 --> 00:09:20.020
to is probably gonna be this
environmental variable.

170
00:09:20.020 --> 00:09:24.470
I know Heroku does this, I know AWS does
this, it's gonna be process.env.PORT.

171
00:09:24.470 --> 00:09:26.860
Or, if that doesn't exist, then it's 3000.

172
00:09:26.860 --> 00:09:30.610
If you don't believe me when you
start the server, just do an export

173
00:09:30.610 --> 00:09:34.510
before you start it, export PORT equals,
and then put some number.

174
00:09:34.510 --> 00:09:37.700
That will be the port that
you'll be listening to.

175
00:09:37.700 --> 00:09:39.410
And then we'll log it here.

176
00:09:39.410 --> 00:09:46.765
It will say on that port config.PORT.
&gt;&gt; Speaker 1: Okay,

177
00:09:46.765 --> 00:09:51.350
config.js, and then right here,
I'm setting up the default environment.

178
00:09:51.350 --> 00:09:55.730
I'm like process.env.NODE_ENV is
going to equal whatever it is,

179
00:09:55.730 --> 00:09:59.640
if i set it outside the context of this
application like through Heroku, AWS, or

180
00:09:59.640 --> 00:10:00.660
on the command line.

181
00:10:00.660 --> 00:10:04.570
Or it's gonna default to whatever
config.dev is which is development.

182
00:10:04.570 --> 00:10:07.140
So remember I said always default to
development, just assume you're always in

183
00:10:07.140 --> 00:10:11.320
development unless you explicitly say
you're not so that's what that is.

184
00:10:11.320 --> 00:10:14.440
That's why I have these strings
here cuz I could have just typed in

185
00:10:14.440 --> 00:10:17.830
yeah just type in the string development,
there's nothing wrong with that.

186
00:10:19.620 --> 00:10:23.960
But like I said sometimes these things,
people mix these names up so if we have

187
00:10:23.960 --> 00:10:28.220
to use development somewhere else,
I just didn't want it to be confused.

188
00:10:28.220 --> 00:10:31.580
So I'll just put config.development and
you don't need to know what it is.

189
00:10:31.580 --> 00:10:35.476
Just know it's config.dev.
&gt;&gt; Speaker 1: And

190
00:10:35.476 --> 00:10:37.060
then I just set up the env.

191
00:10:37.060 --> 00:10:41.420
So I put an env property on this config
object that's equal to whatever this is.

192
00:10:41.420 --> 00:10:44.500
Which if we don't set it
it'll be development, so

193
00:10:44.500 --> 00:10:46.190
this might be development as well.

194
00:10:46.190 --> 00:10:48.010
But it could also be production,
it could also be testing.

195
00:10:49.970 --> 00:10:53.050
It's just so I don't have to type in
process.env.NODE_ENV every time I

196
00:10:53.050 --> 00:10:54.660
wanna see what the environment is.

197
00:10:54.660 --> 00:11:00.375
I can just say config.environment.
&gt;&gt; Speaker 1: Cool,

198
00:11:00.375 --> 00:11:01.310
so all that's done for you.

199
00:11:01.310 --> 00:11:04.930
So what you're gonna do,
this is a big paragraph right here.

200
00:11:04.930 --> 00:11:06.120
EnvConfig is nothing right now.

201
00:11:06.120 --> 00:11:07.350
It's just a variable.

202
00:11:07.350 --> 00:11:08.878
But, if you look on line
26 you got some context.

203
00:11:08.878 --> 00:11:09.860
Here's what's happening.

204
00:11:09.860 --> 00:11:10.410
We're doing this merge.

205
00:11:10.410 --> 00:11:14.270
This is definitely an object
cuz we just set it up here.

206
00:11:14.270 --> 00:11:17.190
And we wanna merge this
object onto this object.

207
00:11:17.190 --> 00:11:18.660
But, the problem is this is not an object.

208
00:11:18.660 --> 00:11:19.840
It's nothing.

209
00:11:19.840 --> 00:11:25.010
So, what we need to do is depending
on whatever config.env is,

210
00:11:25.010 --> 00:11:30.110
or whatever process.env.NODE_ENV is,
load up the appropriate file and

211
00:11:30.110 --> 00:11:34.740
assign the the value to envConfig, so that
the merge at the bottom actually works.

212
00:11:35.740 --> 00:11:38.740
So again what's happening here that
we have a base config in this file.

213
00:11:38.740 --> 00:11:41.510
This is the base config, and

214
00:11:41.510 --> 00:11:46.810
depending on what ENV we are in,
we then merge those objects.

215
00:11:46.810 --> 00:11:51.780
I'm sorry, we're gonna conditionally load
up a file depending on what ENV we're in.

216
00:11:51.780 --> 00:11:55.426
If you look, there's a development.js,
there's a production.js,

217
00:11:55.426 --> 00:11:59.715
there's a testing.js, tight, and if you
notice, they're the same names as this,

218
00:11:59.715 --> 00:12:01.750
development, testing, production.

219
00:12:04.490 --> 00:12:07.760
So depending on what environment we're in,
which is gonna be development by default,

220
00:12:07.760 --> 00:12:10.700
it's gonna load up one of these files,
what's also is exporting an object.

221
00:12:11.930 --> 00:12:17.810
And this object is gonna be merged
in with this config object,

222
00:12:17.810 --> 00:12:20.120
and it's gonna override its properties.

223
00:12:20.120 --> 00:12:25.490
So if these same properties existed, or

224
00:12:25.490 --> 00:12:29.260
any one of those other files
objects like development.

225
00:12:29.260 --> 00:12:33.400
This object takes precedence, and
it will override what's over here.

226
00:12:33.400 --> 00:12:36.010
And that's only because we
placed it to the right.

227
00:12:36.010 --> 00:12:38.000
That's how merge works.

228
00:12:38.000 --> 00:12:43.440
If I put another object here
then all of its properties

229
00:12:43.440 --> 00:12:48.365
will be merged onto EMV config and all of
its properties will be merged onto config,

230
00:12:48.365 --> 00:12:51.720
that's how a merge works and
it will cursively go down and do that.

231
00:12:55.200 --> 00:12:57.350
So that's how this should work.

232
00:12:57.350 --> 00:13:00.950
So now if you go back to nx.js

233
00:13:00.950 --> 00:13:04.880
the very first thing our server
does is require this config.

234
00:13:04.880 --> 00:13:07.890
So the first thing it does is run
config and it sets all that up.

235
00:13:09.300 --> 00:13:12.140
It'll set up the environment, it'll set
up all the secrets, all the logging.

236
00:13:12.140 --> 00:13:13.130
All that stuff, good to go.

237
00:13:13.130 --> 00:13:14.380
So that's the first thing we do.

238
00:13:14.380 --> 00:13:17.890
So, that's why we have to do that
merge and have to export it.

239
00:13:20.660 --> 00:13:21.770
There's one more file in here.

240
00:13:21.770 --> 00:13:24.420
This is just something I
wanted to show you guys.

241
00:13:24.420 --> 00:13:28.385
This is a wrapper around console.log
that I made so you can do logging,

242
00:13:28.385 --> 00:13:31.158
this will show you why or
how cool a config file is so

243
00:13:31.158 --> 00:13:34.450
we can conditionally turn off logging or
not.

244
00:13:34.450 --> 00:13:39.980
So this file's just a logger that wraps
console.log, so, have a no op function,

245
00:13:39.980 --> 00:13:44.960
that is just short for no operation,
this is a function that does nothing.

246
00:13:44.960 --> 00:13:46.740
This is common pattern in JavaScript,

247
00:13:46.740 --> 00:13:50.470
sometimes you need a function that does
absolutely nothing, in this case we do.

248
00:13:50.470 --> 00:13:52.068
So, what I'm doing here,

249
00:13:52.068 --> 00:13:56.860
I'm saying this variable console
log if config.logging is true.

250
00:13:56.860 --> 00:14:00.930
Then set it's value equal to
console.log this is a trick that's

251
00:14:00.930 --> 00:14:05.890
just gonna return a function with
the same context, or it's gonna be no op.

252
00:14:05.890 --> 00:14:08.720
So this is either gonna be console.log or
it's gonna be a no op, but

253
00:14:08.720 --> 00:14:09.880
it's definitely gonna be a function.

254
00:14:11.570 --> 00:14:14.090
And then log all it does
is it does some trickery

255
00:14:14.090 --> 00:14:18.330
it'll take in all the arguments that's
passed into it iterate over all of them.

256
00:14:18.330 --> 00:14:23.610
If it's an object it'll convert it to JSON
and change it to purple, all the strings.

257
00:14:23.610 --> 00:14:26.650
If it's not an object it will just
still change it to a string and

258
00:14:26.650 --> 00:14:27.300
change it to purple.

259
00:14:28.340 --> 00:14:28.910
That's all it's doing.

260
00:14:28.910 --> 00:14:32.545
And then it will call console.log
with the arguments or no op,

261
00:14:32.545 --> 00:14:36.430
this is either console.log or
no op, you don't know all right.

262
00:14:36.430 --> 00:14:38.900
So there's some funky JavaScript
stuff happening here.

263
00:14:38.900 --> 00:14:41.600
This might look new to people who don't
have a lot of experience with JavaScript

264
00:14:41.600 --> 00:14:43.910
but that's all I'm doing.

265
00:14:43.910 --> 00:14:45.990
I'm just wrapping console.log,
adding some color to it,

266
00:14:45.990 --> 00:14:50.660
making everything look pretty,
making all the JSON indent right.

267
00:14:50.660 --> 00:14:52.840
Changing it to from an object.

268
00:14:52.840 --> 00:14:56.000
Cuz if you console log object in node
it'll just say like, eventually it'll get

269
00:14:56.000 --> 00:14:58.310
tired of logging everything and
just like this is an object.

270
00:14:58.310 --> 00:15:00.660
It'll just say object, right, it won't
even give you the properties on it.

271
00:15:00.660 --> 00:15:03.470
But if you turn it to JSON it will,
it'll go here's everything.

272
00:15:03.470 --> 00:15:05.810
But then it's just like one long string.

273
00:15:05.810 --> 00:15:09.190
So I indent it so
it looks like a regular object.

274
00:15:09.190 --> 00:15:10.716
And I make it purple so you can see it.

275
00:15:18.531 --> 00:15:19.565
&gt;&gt; Speaker 1: Cool, everybody got that.

276
00:15:19.565 --> 00:15:22.440
So if you run it right now, NPM start.

277
00:15:25.420 --> 00:15:27.390
Yeah, it's going to break
because this stuff isn't here.

278
00:15:27.390 --> 00:15:29.070
So it'll break because you
got to add that stuff.

279
00:15:29.070 --> 00:15:34.680
But once you add that stuff, you'll see
how the logging works and all that stuff.

280
00:15:34.680 --> 00:15:36.114
Actually I can just do it right here.

281
00:15:36.114 --> 00:15:40.719
If I go to index.js,
if I say, before the app, or

282
00:15:40.719 --> 00:15:47.202
I gotta come up here.
&gt;&gt; Speaker 1: Probably just say,

283
00:15:47.202 --> 00:15:55.926
logger.log('heeeyyyy')
&gt;&gt; Speaker 1: No,

284
00:15:55.926 --> 00:15:57.940
it's just breaking,
it's not even gonna let me do that.

285
00:15:57.940 --> 00:16:01.506
So, yeah, you got to fix that.

286
00:16:01.506 --> 00:16:03.449
Cool, any questions on what
you're supposed to be doing?

287
00:16:03.449 --> 00:16:07.060
If you're lost, for sure tell me, I wanna
make sure I explain it to you correctly.

288
00:16:07.060 --> 00:16:10.000
So, at the recap, you'll be messing
around with this config.js.

289
00:16:10.000 --> 00:16:13.170
Making sure you load the right file and
then inside of API.js.

290
00:16:13.170 --> 00:16:16.551
Getting these routers in there.

