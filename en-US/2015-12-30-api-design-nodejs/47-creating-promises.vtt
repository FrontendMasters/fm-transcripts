WEBVTT

1
00:00:00.000 --> 00:00:03.765
[MUSIC]

2
00:00:03.765 --> 00:00:05.528
&gt;&gt; Speaker 1: I could have written
a lot of notes on promises, but

3
00:00:05.528 --> 00:00:08.650
I think this is just one of those things
where you just have to show people.

4
00:00:08.650 --> 00:00:10.870
If you don't, that's just the way I learn.

5
00:00:10.870 --> 00:00:13.350
I've read on it, I have people,
I've read tutorials and stuff.

6
00:00:13.350 --> 00:00:15.820
And it was great, but I really didn't
understand it until I was like

7
00:00:15.820 --> 00:00:17.250
all right let me just start
working with this stuff.

8
00:00:17.250 --> 00:00:18.180
So that's what we're going to do.

9
00:00:18.180 --> 00:00:20.900
We're just going to work through
som examples of promises for

10
00:00:20.900 --> 00:00:25.200
a couple minutes until everyone feels
like they're up to speed on them.

11
00:00:25.200 --> 00:00:26.890
So we're just going to make a new file.

12
00:00:26.890 --> 00:00:28.550
And you can follow along if you want or
you can just look.

13
00:00:30.000 --> 00:00:31.750
We'll just call it promises.js.

14
00:00:31.750 --> 00:00:36.210
Luckily for us,
the native promise is built into node,

15
00:00:36.210 --> 00:00:38.110
at least the version I'm on.

16
00:00:38.110 --> 00:00:39.670
So we'll just use that but

17
00:00:39.670 --> 00:00:44.670
there are other third party libraries
out there that are pretty cool.

18
00:00:44.670 --> 00:00:49.020
So the thing about promises are, or
the thing that they are trying to solve,

19
00:00:49.020 --> 00:00:53.700
say that we have a function
called action and this is a,

20
00:00:53.700 --> 00:00:58.510
this is a very, very naive example but
this is gonna show you what they do.

21
00:00:59.630 --> 00:01:03.640
And actually takes a call back.

22
00:01:03.640 --> 00:01:08.114
And then on some time in the future,

23
00:01:08.114 --> 00:01:13.186
let's say five seconds, it's going to

24
00:01:13.186 --> 00:01:18.121
call that call back with like some art.

25
00:01:19.630 --> 00:01:21.180
And then we can just call action.

26
00:01:21.180 --> 00:01:27.697
Passing the call back.
&gt;&gt; Speaker 1: All right,

27
00:01:27.697 --> 00:01:30.330
so if I run this, I should see, hey oops.

28
00:01:30.330 --> 00:01:31.480
Get rid of that.

29
00:01:31.480 --> 00:01:33.541
I should see hey in five seconds, right.

30
00:01:33.541 --> 00:01:37.666
So if I run node promises.js,

31
00:01:37.666 --> 00:01:45.610
in five seconds.
&gt;&gt; Speaker 1: Hey, right.

32
00:01:45.610 --> 00:01:46.780
So we had to use the callback for that.

33
00:01:46.780 --> 00:01:47.680
That's nothing new.

34
00:01:47.680 --> 00:01:49.120
That's how JavaScript works.

35
00:01:49.120 --> 00:01:51.390
It uses callbacks versus a vending system.

36
00:01:53.090 --> 00:01:57.399
Promises pretty much give us the same
thing without have to use the callback.

37
00:01:58.700 --> 00:02:01.940
Instead of function control,
we take back control.

38
00:02:01.940 --> 00:02:05.120
And we're able to say now we want
to be notified about this or

39
00:02:05.120 --> 00:02:06.410
notify me when this does come back.

40
00:02:06.410 --> 00:02:07.780
So we jut get more control.

41
00:02:07.780 --> 00:02:10.830
And it's better for
when you have nested things.

42
00:02:10.830 --> 00:02:12.430
So if this call back
took another call back.

43
00:02:12.430 --> 00:02:14.690
And that call back to another call back.

44
00:02:14.690 --> 00:02:18.540
Eventually you'll have something that
looks like a upside down pyramid,

45
00:02:18.540 --> 00:02:20.120
those goes like this.

46
00:02:20.120 --> 00:02:21.487
And then they'll come back out like this.

47
00:02:21.487 --> 00:02:23.548
All these call backs and call backs and
call backs and call backs.

48
00:02:23.548 --> 00:02:25.833
Then you start running out of names for
your variables and

49
00:02:25.833 --> 00:02:28.470
then you got all these closers and
you're like, wait.

50
00:02:28.470 --> 00:02:29.620
Which error am I referencing?

51
00:02:29.620 --> 00:02:31.330
You don't even know anymore.

52
00:02:31.330 --> 00:02:33.830
So promises were made because of that.

53
00:02:33.830 --> 00:02:37.640
There are other alternatives to
promises that are coming out.

54
00:02:37.640 --> 00:02:42.600
Generators, we have a sync functions,
which are part of the ES7 spec,

55
00:02:42.600 --> 00:02:43.650
which are really awesome.

56
00:02:43.650 --> 00:02:46.100
There's a lot of stuff coming out, but
promises has been here for a while and

57
00:02:46.100 --> 00:02:48.960
they finally made it native
in our environments.

58
00:02:48.960 --> 00:02:53.840
So what we're going to do is we're going
to refractor, I guess I'll go back,

59
00:02:53.840 --> 00:02:56.500
we'll refractor this example using
a promise instead of a callback.

60
00:02:58.920 --> 00:03:01.220
So the first thing we'll do, we'll
just get rid of the callback argument.

61
00:03:02.260 --> 00:03:03.700
We'll get rid of the call
to the callback here.

62
00:03:03.700 --> 00:03:08.040
And then what we'll do
is make a new promise.

63
00:03:08.040 --> 00:03:12.360
So, a promise is all it is,
is just an object that has methods on it.

64
00:03:12.360 --> 00:03:16.165
And these methods notify us about
what's happening during this

65
00:03:16.165 --> 00:03:17.210
[INAUDIBLE] operation.

66
00:03:17.210 --> 00:03:20.180
These methods will either let us know that

67
00:03:20.180 --> 00:03:25.090
the value that we're interested in has
resolved or it errored along the way.

68
00:03:26.270 --> 00:03:28.130
That's gonna make more
sense as we right this.

69
00:03:28.130 --> 00:03:32.223
So a promise is just an object
with notification methods on it,

70
00:03:32.223 --> 00:03:38.246
that's it.
&gt;&gt; Speaker 1: So to get started making

71
00:03:38.246 --> 00:03:44.195
a new promise with new promise library.
&gt;&gt; Speaker 1: All we have

72
00:03:44.195 --> 00:03:47.650
to do is have a function that returns a
new promise using the promise constructor.

73
00:03:48.880 --> 00:03:50.230
So they say return a new promise.

74
00:03:52.620 --> 00:03:55.020
Then this promise actually
takes a call back.

75
00:03:56.490 --> 00:03:59.050
Every single thing that we want to be
wrapped inside this promise we just need

76
00:03:59.050 --> 00:04:00.720
to make sure we placing that call back.

77
00:04:00.720 --> 00:04:01.370
So that's step one.

78
00:04:02.740 --> 00:04:06.400
If you wanted to switch your function
over, have your function return a new

79
00:04:06.400 --> 00:04:11.380
promise and have the body of your function
be inside that promises callback.

80
00:04:11.380 --> 00:04:17.140
Step two is to use the built in methods
that I talked about, resolve and reject.

81
00:04:17.140 --> 00:04:21.806
So again, this is how we're gonna let
the promise object knows what values we;re

82
00:04:21.806 --> 00:04:25.810
interested in,
when the operation has been done.

83
00:04:25.810 --> 00:04:31.880
So for instance, if I call resolve
after five seconds has passed,

84
00:04:31.880 --> 00:04:35.130
I'll be able to get access to the data
that I told the promise I want.

85
00:04:35.130 --> 00:04:38.600
If I call reject,
what's going to happen is,

86
00:04:38.600 --> 00:04:41.070
the promise is going to tell
me that an error happened.

87
00:04:41.070 --> 00:04:42.650
I'll show you what that means.

88
00:04:42.650 --> 00:04:49.970
So inside this setTimeout, if I just say
resolve('hey', same thing we had before.

89
00:04:53.930 --> 00:04:55.160
To show you what that's
going to look like,

90
00:04:55.160 --> 00:04:58.730
now what I am going to do is to
refactor that function out here.

91
00:04:58.730 --> 00:05:00.836
All I would do is I would
get rid of this callback

92
00:05:00.836 --> 00:05:06.592
function.
&gt;&gt; Speaker 1: And

93
00:05:06.592 --> 00:05:07.710
now, what is action returning?

94
00:05:08.970 --> 00:05:10.840
It's returning your promise, right?

95
00:05:10.840 --> 00:05:14.150
So it's not doing what it did before.

96
00:05:14.150 --> 00:05:14.850
It doesn't take a callback.

97
00:05:14.850 --> 00:05:15.960
It's actually returning your promise.

98
00:05:15.960 --> 00:05:17.790
It takes no arguments.

99
00:05:17.790 --> 00:05:20.950
So what I could do is,
because it returns a promise,

100
00:05:20.950 --> 00:05:23.920
I get access to a few
methods I could use .then.

101
00:05:23.920 --> 00:05:25.260
So that's what you've been
seeing this whole time.

102
00:05:25.260 --> 00:05:30.350
When you see .then that's because
the function's returning a promise.

103
00:05:30.350 --> 00:05:34.420
And most libraries use this syntax
because there's a specification out there

104
00:05:34.420 --> 00:05:39.560
called the A+ promise specification that
specifies how promises should be built,

105
00:05:39.560 --> 00:05:42.350
and they should have these
methods that do certain things.

106
00:05:42.350 --> 00:05:43.930
You got a question Micheal?
&gt;&gt; Speaker 2: Yeah,

107
00:05:43.930 --> 00:05:47.490
just wondering generally, is the promise
a functional programming concept or

108
00:05:47.490 --> 00:05:48.900
is it something that was invented for

109
00:05:48.900 --> 00:05:51.720
JavaScript?
&gt;&gt; Speaker 1: It was definitely something

110
00:05:51.720 --> 00:05:56.097
that was invented for JavaScript for
single threaded environments,

111
00:05:56.097 --> 00:05:59.435
specifically in JavaScript but
I wouldn't say it's

112
00:05:59.435 --> 00:06:04.259
a functional thing.
&gt;&gt; Speaker 1: There are,

113
00:06:04.259 --> 00:06:06.504
if you wanna get hard core functional,

114
00:06:06.504 --> 00:06:10.937
there are better alternatives out there
like generators or stuff like that.

115
00:06:10.937 --> 00:06:14.807
But, you-
&gt;&gt; Speaker 2: Do we have observables,

116
00:06:14.807 --> 00:06:16.261
Chris?
&gt;&gt; Speaker 1: Yeah, observables,

117
00:06:16.261 --> 00:06:17.106
of course, yeah.
&gt;&gt; Speaker 2: Like

118
00:06:17.106 --> 00:06:17.775
Jaffer?
&gt;&gt; Speaker 1: How could I

119
00:06:17.775 --> 00:06:18.700
forget about that?

120
00:06:18.700 --> 00:06:23.332
Yeah, so I wouldn't say, it's definitely
something made for JavaScript and

121
00:06:23.332 --> 00:06:26.720
maybe other languages have
adopted it because it works for

122
00:06:26.720 --> 00:06:32.734
single threaded environments.
&gt;&gt; Speaker 1: So we can call .then which

123
00:06:32.734 --> 00:06:38.130
also takes a call back and this call back,
this is gonna take an argument.

124
00:06:38.130 --> 00:06:39.090
I'll just call it word.

125
00:06:40.620 --> 00:06:42.279
By the name of the argument
you already know what it is.

126
00:06:43.570 --> 00:06:46.170
So, what's happening here,
is let's just walk through it.

127
00:06:46.170 --> 00:06:47.730
I am calling action.

128
00:06:47.730 --> 00:06:51.420
Which is going to return this new promise,
which takes a callback.

129
00:06:51.420 --> 00:06:54.050
And is going to start
this setTimeout here.

130
00:06:54.050 --> 00:06:56.150
After five seconds,
we're going to resolve hey.

131
00:06:56.150 --> 00:07:00.550
So whatever I pass into resolve,
after five seconds,

132
00:07:00.550 --> 00:07:02.960
I have access to it inside
this then right here.

133
00:07:02.960 --> 00:07:09.810
So whatever is an argument inside this
resolve is now accessible right here.

134
00:07:09.810 --> 00:07:16.630
So if I cancel that log where,

135
00:07:16.630 --> 00:07:19.370
and you'll see the same thing will happen.

136
00:07:21.060 --> 00:07:24.260
It's hanging, it's hanging, I should
probably change it for five seconds.

137
00:07:24.260 --> 00:07:24.890
This is too long.

138
00:07:24.890 --> 00:07:31.118
Then hit.
&gt;&gt; Speaker 1: So,

139
00:07:31.118 --> 00:07:33.730
resolve allows us to ask our
promise about something.

140
00:07:33.730 --> 00:07:37.380
So, saying .then is like okay,
so I'm gonna call action and

141
00:07:37.380 --> 00:07:41.030
then when it's ready give me
the data that I'm interested in.

142
00:07:42.390 --> 00:07:43.450
So I can do what I want.

143
00:07:43.450 --> 00:07:45.600
So, because of that now we can
store this in the variable, right?

144
00:07:45.600 --> 00:07:52.700
We can say var promise,
&gt;&gt; Speaker 1: = action.

145
00:07:52.700 --> 00:07:56.320
And then some time in the future,
somewhere else in our code we can

146
00:07:56.320 --> 00:07:59.950
be like okay, now can you just
give me what I'm interested in?

147
00:08:02.480 --> 00:08:03.670
All right?

148
00:08:03.670 --> 00:08:04.760
That's the sweet thing about promises.

149
00:08:04.760 --> 00:08:05.280
So we can do that.

150
00:08:06.340 --> 00:08:12.300
The other thing is.
&gt;&gt; Speaker 1: Is the reject.

151
00:08:12.300 --> 00:08:19.410
So let's say that, we don't wanna resolve
something, we're just gonna reject.

152
00:08:19.410 --> 00:08:24.296
We'll just say, reject.

153
00:08:24.296 --> 00:08:33.211
I should just say new Error.
&gt;&gt; Speaker 1: So

154
00:08:33.211 --> 00:08:34.843
the way this is gonna work is, so

155
00:08:34.843 --> 00:08:38.840
that then is gonna give us the result
property of the resolve data that we want.

156
00:08:39.950 --> 00:08:45.160
Depending on the library that you're
using, this next method is different, but

157
00:08:45.160 --> 00:08:49.180
for the native promise one it's .catch.

158
00:08:49.180 --> 00:08:53.460
So if we do .catch, we get access
to error that might have happened.

159
00:08:53.460 --> 00:08:58.370
So the way this works is either .then
is called or .catch, but not both.

160
00:08:59.400 --> 00:09:00.710
It's gonna be either/or.

161
00:09:00.710 --> 00:09:01.515
So I can do.

162
00:09:01.515 --> 00:09:03.990
The way you can do it
is you would do .then.

163
00:09:07.571 --> 00:09:09.360
&gt;&gt; Speaker 1: And then you also do .catch.

164
00:09:09.360 --> 00:09:12.310
Because both these methods
return the promise itself.

165
00:09:12.310 --> 00:09:13.940
So if we can just chain them.

166
00:09:13.940 --> 00:09:20.689
So what's gonna happen is okay,
I want the word, I want a council.log,

167
00:09:20.689 --> 00:09:25.060
a word, this may or
may not happen we don't know and

168
00:09:25.060 --> 00:09:30.370
then if we have an error I
want to console.log the error.

169
00:09:30.370 --> 00:09:30.910
This may or

170
00:09:30.910 --> 00:09:33.790
may not happen I'm not sure it's
depending on what's happening up here.

171
00:09:33.790 --> 00:09:37.000
On line four, I'm rejecting it,
so we know for

172
00:09:37.000 --> 00:09:39.730
sure that .catch is gonna happen,
so let's just run it.

173
00:09:41.750 --> 00:09:47.320
So, after five seconds,
we get the error no.

174
00:09:47.320 --> 00:09:48.130
That's because .catch.

175
00:09:48.130 --> 00:09:51.068
That's what's logging right

176
00:09:51.068 --> 00:10:00.225
here.
&gt;&gt; Speaker 1: And

177
00:10:00.225 --> 00:10:01.160
I'm just gonna change that.

178
00:10:01.160 --> 00:10:02.250
That's just too long.

179
00:10:02.250 --> 00:10:07.756
Let's just do one second.
&gt;&gt; Speaker 1: All right,

180
00:10:07.756 --> 00:10:09.030
.catch is finding an error.

