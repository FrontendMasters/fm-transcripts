WEBVTT

1
00:00:00.000 --> 00:00:02.901
[MUSIC]

2
00:00:02.901 --> 00:00:04.061
&gt;&gt; Scott Moss: Everybody has the repo.

3
00:00:04.061 --> 00:00:07.541
If you want to check out on step dash 1.

4
00:00:07.541 --> 00:00:13.179
If you check that branch out,
you'll see a couple files in here.

5
00:00:13.179 --> 00:00:20.609
Let me get rid of this
&gt;&gt; Scott Moss: You'll

6
00:00:20.609 --> 00:00:21.361
see a couple files in here.

7
00:00:21.361 --> 00:00:23.581
So, you probably don't see Node modules,

8
00:00:23.581 --> 00:00:25.921
that's because you need
to do an npm install.

9
00:00:25.921 --> 00:00:29.563
So you should get in the habit of
whenever you get a new node repo,

10
00:00:29.563 --> 00:00:32.141
just run npm install
from your command line.

11
00:00:32.141 --> 00:00:34.021
Just start doing that immediately.

12
00:00:34.021 --> 00:00:39.820
Whenever you clone it,
whenever you pull it, just do npm install.

13
00:00:39.820 --> 00:00:42.510
So what happens is when you
run npm install it goes, and

14
00:00:42.510 --> 00:00:44.430
it looks at the package.json.

15
00:00:44.430 --> 00:00:48.190
It looks at the dependencies, and
then it starts installing these.

16
00:00:48.190 --> 00:00:49.970
All the dependencies with their
appropriate version numbers.

17
00:00:51.310 --> 00:00:53.840
That's what npm install does, so
that's how it knows what to install.

18
00:00:53.840 --> 00:00:55.780
And then it'll create
a node_modules folder for you.

19
00:00:56.890 --> 00:01:01.220
And depending on what version of NPM you
have, you might have all your Node modules

20
00:01:01.220 --> 00:01:03.950
installed flat like mine are,
because I'm using npm version three.

21
00:01:03.950 --> 00:01:08.170
Or if you're using the previous version
of npm, your Node modules will be nested.

22
00:01:08.170 --> 00:01:13.400
Because what happens is let's say npm goes
to install this Node module body parser.

23
00:01:13.400 --> 00:01:17.250
Body parser is a Node module itself and
has its own package.json,

24
00:01:17.250 --> 00:01:18.900
which also has Node modules.

25
00:01:18.900 --> 00:01:21.991
So npm will install those too, and
then those modules might have modules.

26
00:01:21.991 --> 00:01:24.124
So, we recursively install those modules,
so

27
00:01:24.124 --> 00:01:26.940
that's why you might have
nested folders in here.

28
00:01:26.940 --> 00:01:31.490
But if you're using npm version three, it
all installs flat, which is good news for

29
00:01:31.490 --> 00:01:32.180
Windows users.

30
00:01:32.180 --> 00:01:36.674
Because I know Windows, it won't chase
that forever, it'll start erring out,

31
00:01:36.674 --> 00:01:39.700
if It has to keep looking for
those files so they fixed that.

32
00:01:39.700 --> 00:01:42.570
It's just a bigger pain now having to
scroll through the Node modules foler

33
00:01:42.570 --> 00:01:47.030
them looking for stuff, which you rarely
have to do, but the rare case that you do,

34
00:01:47.030 --> 00:01:48.080
it's a little more painful now.

35
00:01:49.640 --> 00:01:53.386
So, that's what happens when you run
npm install, so run npm install and

36
00:01:53.386 --> 00:01:55.260
get the Node modules working.

37
00:01:55.260 --> 00:01:58.370
If that's not working for
you, let me know, but

38
00:01:58.370 --> 00:01:59.500
it should totally be working for you.

39
00:02:03.250 --> 00:02:05.695
So, what you're going to do,
if you look at the server.js,

40
00:02:05.695 --> 00:02:08.481
there's a bit to do in here, and
this is like an adjacent data object.

41
00:02:08.481 --> 00:02:13.211
So, what you're going to be doing
is you're going to be creating

42
00:02:13.211 --> 00:02:18.113
a basic server with express that
will send back the index.html file

43
00:02:18.113 --> 00:02:21.480
on this directory on a get
request to the root.

44
00:02:22.960 --> 00:02:27.791
It should then send back JsonData
on a get request to /data as well.

45
00:02:27.791 --> 00:02:31.726
So, what that means is,
one I should be able to come in here and

46
00:02:31.726 --> 00:02:34.400
start a server on whatever port you want.

47
00:02:34.400 --> 00:02:38.630
And when I start that server,
if I navigate to that port in the browser,

48
00:02:38.630 --> 00:02:41.200
I should see whatever
this index.html renders,

49
00:02:41.200 --> 00:02:42.900
which is just an h1 tag that says, hey.

50
00:02:45.180 --> 00:02:51.030
And then, I should also be able to go
to /data and see this JsonData output.

51
00:02:53.990 --> 00:02:56.190
So Now, I am going to show you
what it actually looks like.

52
00:02:56.190 --> 00:02:57.216
I am going to check out
the solution to show you.

53
00:03:05.936 --> 00:03:10.756
&gt;&gt; Scott Moss: Oops.

54
00:03:10.756 --> 00:03:15.256
I'm gonna run Node server.

55
00:03:15.256 --> 00:03:18.260
So, I'm running my server.

56
00:03:18.260 --> 00:03:20.786
I'm gonna go to localhost:3000.

57
00:03:20.786 --> 00:03:24.750
It's just the port that I'm running on,
and there's the HTML page.

58
00:03:24.750 --> 00:03:26.810
So' we should see that
if we go into the root.

59
00:03:26.810 --> 00:03:30.870
And then if I go to data,
I should see some JSON data there.

60
00:03:35.090 --> 00:03:38.702
So, I'm gonna use some hints on
how to actually get past this,

61
00:03:38.702 --> 00:03:41.851
cuz there's a little context,
let me check back out.

62
00:03:51.691 --> 00:03:56.531
&gt;&gt; Scott Moss: So in server.js

63
00:04:00.691 --> 00:04:01.447
&gt;&gt; Scott Moss: First of all,

64
00:04:01.447 --> 00:04:05.038
there's a module inside of Node called FS,
short for file system,

65
00:04:05.038 --> 00:04:06.750
and it allows you to read files.

66
00:04:08.400 --> 00:04:12.030
So, remember how I told you to
require built in node modules,

67
00:04:13.820 --> 00:04:15.530
literally using the require function.

68
00:04:15.530 --> 00:04:20.980
You can require a module called FS, and
it has a method on it called read file.

69
00:04:20.980 --> 00:04:21.821
That allows you to read files.

70
00:04:21.821 --> 00:04:24.981
So there's a file called index.html.

71
00:04:24.981 --> 00:04:28.597
What you want to do is we want to be able
to read.file on a request to the root,

72
00:04:28.597 --> 00:04:31.610
on a get request to the root, and
we want to send that file back.

73
00:04:33.460 --> 00:04:36.820
So if you go look at the examples in the
notes, it shows you how to set up a route.

74
00:04:36.820 --> 00:04:39.860
It also shows you how to send a response,

75
00:04:41.180 --> 00:04:43.010
It doesn't show you how
to read a file though.

76
00:04:43.010 --> 00:04:44.860
So, that's the part
you've gotta figure out.

77
00:04:44.860 --> 00:04:46.740
And then for the other thing,

78
00:04:46.740 --> 00:04:51.360
as far as sending data back
on a get request to /data.

79
00:04:51.360 --> 00:04:54.740
Again, if you look at the example it
shows you how to set up a get request to

80
00:04:54.740 --> 00:04:55.910
a specific route.

81
00:04:55.910 --> 00:04:58.440
It shows you how to send
back a json response.

82
00:04:58.440 --> 00:05:00.031
The only thing you got to
send back is just this data.

83
00:05:03.351 --> 00:05:04.691
&gt;&gt; Scott Moss: So,
those are the two things you're doing.

84
00:05:04.691 --> 00:05:10.220
And also remember you also have to have
to have your server listen on a port.

85
00:05:10.220 --> 00:05:13.700
So, by default ,if you didn't have
your server listening to anything,

86
00:05:13.700 --> 00:05:15.750
when I run this file,
it'll just execute and stop.

87
00:05:16.800 --> 00:05:19.070
So, I want it be hanging,
I want it stay on,

88
00:05:19.070 --> 00:05:21.900
I want it to be listening on
the port that I can navigate to.

89
00:05:21.900 --> 00:05:24.480
And also, in the examples of the notes,
it shows you how to do that, as well.

90
00:05:25.740 --> 00:05:28.470
So, if you have any questions on this,
I'll be walking around.

91
00:05:28.470 --> 00:05:30.620
Anybody online, totally let me know.

92
00:05:30.620 --> 00:05:33.240
So, you have 30 minutes to do this,
and then we'll come back.

93
00:05:33.240 --> 00:05:33.900
Mark?

94
00:05:33.900 --> 00:05:36.280
&gt;&gt; Mark: There's a question
on the flattened npm system,

95
00:05:36.280 --> 00:05:39.194
what happens if two libraries require
a different version of the same lib?

96
00:05:40.850 --> 00:05:44.570
&gt;&gt; Scott Moss: I haven't run into
that scenario with npm three yet, but

97
00:05:44.570 --> 00:05:48.870
I know with the previous versions of
npm a little prompt will come up, or

98
00:05:48.870 --> 00:05:51.980
actually I think they'll try
to resolve it themselves.

99
00:05:51.980 --> 00:05:53.010
I'm thinking of Bower actually.

100
00:05:53.010 --> 00:05:54.990
Bower will ask you if you want a prompt.

101
00:05:54.990 --> 00:05:57.670
I think npm does a good
job of resolving those,

102
00:05:57.670 --> 00:06:01.680
but If I had to guess what
the behavior was for the flat one,

103
00:06:01.680 --> 00:06:05.300
I think it might take the later one,
whichever one you installed latest.

104
00:06:05.300 --> 00:06:06.860
I'm not too sure though.

105
00:06:06.860 --> 00:06:08.680
I haven't ran into that situation before.

106
00:06:08.680 --> 00:06:11.251
I literally just updated
to npm a week ago.

107
00:06:11.251 --> 00:06:12.650
But that's a good question.

108
00:06:12.650 --> 00:06:13.890
I would really like to know what happens.

109
00:06:15.070 --> 00:06:17.230
But I sure they thought of it,
and they handled it pretty well.

110
00:06:18.280 --> 00:06:21.510
But I can see you having unexpected side
effects if that were to happen for sure

