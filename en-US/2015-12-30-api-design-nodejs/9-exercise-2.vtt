WEBVTT

1
00:00:00.000 --> 00:00:04.024
[MUSIC]

2
00:00:04.024 --> 00:00:06.254
&gt;&gt; Scott Moss: Now you notice there's
a couple other folders in here,

3
00:00:06.254 --> 00:00:09.110
we have this client folder, you will
not be working in a client folder.

4
00:00:09.110 --> 00:00:13.620
This is just like a static website
that is like doing some crud,

5
00:00:13.620 --> 00:00:19.060
it's doing some crud on the resource.

6
00:00:19.060 --> 00:00:22.660
But you will be working in the server
folder, mainly in server.js.

7
00:00:22.660 --> 00:00:27.402
There's a lot of stuff going on here.
&gt;&gt; Scott Moss: The first thing it says is,

8
00:00:27.402 --> 00:00:28.276
make this work.

9
00:00:28.276 --> 00:00:32.410
[LAUGH] But, as you can see, you're
gonna get a whole bunch of errors, and

10
00:00:32.410 --> 00:00:33.190
you gotta figure that stuff out.

11
00:00:33.190 --> 00:00:36.217
But I'm also doing some new things in
here, and I'm telling you what I'm doing.

12
00:00:36.217 --> 00:00:38.883
So before,
when we had the serve.image.html,

13
00:00:38.883 --> 00:00:42.317
we had to manually read the file already,
the rest.sendfile.

14
00:00:42.317 --> 00:00:45.820
Express is smart enough to know
that you already wanna do that.

15
00:00:45.820 --> 00:00:52.390
So it ships with this built in
middleware called express.static.

16
00:00:52.390 --> 00:00:57.360
Which takes in a path or directory,
and any request that comes to

17
00:00:57.360 --> 00:01:00.920
that directory it will automatically
serve it as a static asset and

18
00:01:00.920 --> 00:01:05.230
it knows what mime type to set it to
based on the extension in the file name.

19
00:01:05.230 --> 00:01:06.600
Not only will it do that.

20
00:01:06.600 --> 00:01:10.560
But it will also assume that, on the root
of the directory that you give it.

21
00:01:10.560 --> 00:01:12.840
There exists an index.html.

22
00:01:12.840 --> 00:01:14.450
And if it does exist,

23
00:01:14.450 --> 00:01:17.350
it will automatically serve that
on a git request of the root.

24
00:01:17.350 --> 00:01:21.900
So we don't have to set up a root route
anymore to send back an index.html file.

25
00:01:21.900 --> 00:01:23.239
It should automatically do it.

26
00:01:24.450 --> 00:01:25.420
Yes.
&gt;&gt; Speaker 2: So

27
00:01:25.420 --> 00:01:30.410
you're saying when we set that
up since we passed in client

28
00:01:30.410 --> 00:01:35.740
it then maps all of the client
HTML files to the same

29
00:01:35.740 --> 00:01:40.370
path that they are set up in that folder?
&gt;&gt; Scott Moss: Not all the HTML files.

30
00:01:40.370 --> 00:01:45.480
It specifically looks for
a file with a name called index.html.

31
00:01:45.480 --> 00:01:50.145
If it sees the request for that,
it will automatically serve that on

32
00:01:50.145 --> 00:01:51.110
a [INAUDIBLE].
&gt;&gt; Speaker 2: So

33
00:01:51.110 --> 00:01:52.757
it just sets up that one round.
&gt;&gt; Scott Moss: Yeah.

34
00:01:52.757 --> 00:01:53.597
In HTML.

35
00:01:53.597 --> 00:01:54.657
Yeah.
Just that one.

36
00:01:54.657 --> 00:01:56.240
Not all of them.
So if you have like multiple templates in

37
00:01:56.240 --> 00:01:57.590
there.
&gt;&gt; Speaker 2: It's only going to do

38
00:01:57.590 --> 00:01:59.030
the first one.
&gt;&gt; Scott Moss: Yeah.

39
00:01:59.030 --> 00:02:00.170
&gt;&gt; Speaker 2: And the index, right.

40
00:02:00.170 --> 00:02:00.710
&gt;&gt; Scott Moss: Yeah, yeah.

41
00:02:00.710 --> 00:02:01.486
It'll only do the index route.

42
00:02:01.486 --> 00:02:05.138
You still have to set up the other ones.
&gt;&gt; Scott Moss: So

43
00:02:05.138 --> 00:02:09.880
this is a quick introduction into
setting up global middleware.

44
00:02:09.880 --> 00:02:12.530
So if you use this method called app.use,

45
00:02:12.530 --> 00:02:14.290
it allows you pass into
middleware function.

46
00:02:14.290 --> 00:02:17.960
And then our function

47
00:02:17.960 --> 00:02:20.490
will just be executed in
the order that it was registered.

48
00:02:20.490 --> 00:02:24.490
So lets say this server gets a request,
lets say we do a request for the loop.

49
00:02:24.490 --> 00:02:30.082
What's gonna happen is that request gonna
run through these three functions first.

50
00:02:30.082 --> 00:02:32.222
And then to whatever functions
you define underneath it.

51
00:02:32.222 --> 00:02:35.555
Cuz this is middleware, so
this function was registered first.

52
00:02:35.555 --> 00:02:36.396
Express.static.

53
00:02:36.396 --> 00:02:40.070
So our request gets run through
this first and once that is done,

54
00:02:40.070 --> 00:02:42.580
it will run through this middleware next.

55
00:02:42.580 --> 00:02:45.230
Once that's done,
it'll run through this middleware next.

56
00:02:45.230 --> 00:02:47.890
And then it's gonna run through
the functions that you're

57
00:02:47.890 --> 00:02:48.480
gonna make down here.

58
00:02:50.130 --> 00:02:53.220
So express.static is gonna
serve our stuff for us.

59
00:02:53.220 --> 00:02:55.390
BodyParser, I left some comments there.

60
00:02:55.390 --> 00:02:59.290
It's just gonna make it possible for us
to serve, or to post JSON to its server.

61
00:02:59.290 --> 00:03:01.506
By default express doesn't
know how to handle JSON.

62
00:03:01.506 --> 00:03:04.089
So we need to figure it out ourselves or

63
00:03:04.089 --> 00:03:09.276
we can use this middleware called
bodyParser which will make it easy for us.

64
00:03:09.276 --> 00:03:14.152
And it's going to attach what ever
we post to the server is gonna

65
00:03:14.152 --> 00:03:16.760
be available on request.body.

66
00:03:16.760 --> 00:03:20.055
So inside of those callback functions on
the routes if you just canceled the log

67
00:03:20.055 --> 00:03:23.420
request.body, you'll get
the object that you posted or

68
00:03:23.420 --> 00:03:27.360
put to the server with this malware.

69
00:03:29.620 --> 00:03:32.170
And then down below you'll
see what you have to do so

70
00:03:32.170 --> 00:03:34.779
you need to make rest routes
to from crud on the lines.

71
00:03:36.050 --> 00:03:39.180
So you need to make all those routes in
the blueprint that we just defined here,

72
00:03:39.180 --> 00:03:41.630
so if you count,
there's five of them there.

73
00:03:41.630 --> 00:03:45.620
There's a route to get all the lions,
there's a route to get one lion,

74
00:03:45.620 --> 00:03:50.050
there's a route to create a lion,
update a lion and delete a lion.

75
00:03:50.050 --> 00:03:51.100
So you really have five routes.

76
00:03:53.252 --> 00:03:54.918
The servers already there,
it's already listening,

77
00:03:54.918 --> 00:03:58.750
it's already good to go.
&gt;&gt; Scott Moss: So

78
00:03:58.750 --> 00:04:02.347
let's go ahead and start it so
we can see what it looks like.

79
00:04:02.347 --> 00:04:04.746
Oops, I didn't set that up.

80
00:04:10.787 --> 00:04:13.287
&gt;&gt; [INAUDIBLE]

81
00:04:16.666 --> 00:04:17.464
&gt;&gt; Scott Moss: So if you just run it and

82
00:04:17.464 --> 00:04:19.270
you open it up,
you'll get this page right here.

83
00:04:19.270 --> 00:04:22.000
It just is a little form that says Lions.

84
00:04:22.000 --> 00:04:24.946
You could type in a name of lion,
a pride of a lion.

85
00:04:31.167 --> 00:04:32.667
&gt;&gt; Scott Moss: The homie.

86
00:04:32.667 --> 00:04:33.267
Can't type.

87
00:04:33.267 --> 00:04:36.406
And then the age of a lion and
then the gender of a lion.

88
00:04:36.406 --> 00:04:38.877
And if you hit submit,
let's look at the console so

89
00:04:38.877 --> 00:04:41.280
you can see this I want
you to see what happens.

90
00:04:41.280 --> 00:04:44.440
If I hit submit it's gonna error
out because you didn't define those

91
00:04:44.440 --> 00:04:45.210
routes yet.

92
00:04:45.210 --> 00:04:49.260
Like tried to post this but got a 404.

93
00:04:49.260 --> 00:04:52.710
It's also getting an error
right here token C.

94
00:04:52.710 --> 00:04:55.970
That's like a JSON error because it's
trying to parse in JSON that doesn't exist

95
00:04:55.970 --> 00:04:57.240
so that's why it's freaking out.

96
00:04:57.240 --> 00:05:00.700
Because when this page loads up it doesn't
git request for all the lions, and

97
00:05:00.700 --> 00:05:01.630
that doesn't exist either.

98
00:05:01.630 --> 00:05:02.360
So it's still breaking.

99
00:05:05.120 --> 00:05:06.560
So we need you to find those routes.

100
00:05:06.560 --> 00:05:08.590
Once you found all those routes working,

101
00:05:08.590 --> 00:05:11.140
when you come in here,
this is what you should see now.

102
00:05:11.140 --> 00:05:12.926
So I wanna checkout to the solution.

103
00:05:26.119 --> 00:05:27.039
&gt;&gt; Speaker 2: I think you had

104
00:05:27.039 --> 00:05:28.470
a distraction.
&gt;&gt; Scott Moss: Thank you.

105
00:05:28.470 --> 00:05:29.316
Yeah I didn't see that.

106
00:05:39.217 --> 00:05:41.980
&gt;&gt; Scott Moss: Cool so, the solution
should look something like this.

107
00:05:41.980 --> 00:05:48.409
So if I start typing in some names here,
classman, hey hey.

108
00:05:52.959 --> 00:05:57.302
&gt;&gt; Scott Moss: Age, female, submit.

109
00:05:57.302 --> 00:05:58.670
It submits it.

110
00:05:58.670 --> 00:06:02.391
And if I refresh the page it should still
be there because it's saved on the server,

111
00:06:02.391 --> 00:06:08.559
all right.
&gt;&gt; Speaker 2: And

112
00:06:08.559 --> 00:06:11.117
you could also test that by
going to the routes, right?

113
00:06:11.117 --> 00:06:12.552
[CROSSTALK]
&gt;&gt; Scott Moss: Yep, so

114
00:06:12.552 --> 00:06:16.556
if I went to /lines I should see
you've got one line in there.

115
00:06:16.556 --> 00:06:17.737
Right there.
&gt;&gt; Speaker 2: Wow.

116
00:06:21.917 --> 00:06:25.353
&gt;&gt; Speaker 2: Where's the data being

117
00:06:25.353 --> 00:06:27.490
stored?
&gt;&gt; Scott Moss: So

118
00:06:27.490 --> 00:06:31.330
there's an array called Lions,
right there.

119
00:06:31.330 --> 00:06:32.787
That's our database right there.

120
00:06:34.859 --> 00:06:39.234
&gt;&gt; Speaker 2: Gotcha.
&gt;&gt; Scott Moss: Yeah,

121
00:06:39.234 --> 00:06:40.380
if I restart the server it's gone.

