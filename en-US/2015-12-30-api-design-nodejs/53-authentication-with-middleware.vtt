WEBVTT

1
00:00:00.000 --> 00:00:04.131
[MUSIC]

2
00:00:04.131 --> 00:00:04.963
&gt;&gt; Speaker 1: So, there are so

3
00:00:04.963 --> 00:00:08.060
many ways to do this password
process with Express and Mongo.

4
00:00:09.360 --> 00:00:11.850
So many ways,
I don't think there is a right way.

5
00:00:11.850 --> 00:00:14.710
You can make a middle ware globally,
you can put one on the route.

6
00:00:14.710 --> 00:00:16.450
You can put one on the router,

7
00:00:16.450 --> 00:00:20.120
you can jut have a utility function
that you require and use everywhere.

8
00:00:20.120 --> 00:00:22.670
There's so
many ways you can do this one thing.

9
00:00:22.670 --> 00:00:25.600
But Mongoose allows us
to teach our models and

10
00:00:25.600 --> 00:00:28.310
our documents new tricks by
adding custom functions to them.

11
00:00:28.310 --> 00:00:29.810
And this is where we're gonna do it.

12
00:00:29.810 --> 00:00:34.200
Because it makes sense to do it,
to me at least, on the actual models.

13
00:00:34.200 --> 00:00:36.870
Because those are the things that
are gonna save the password.

14
00:00:36.870 --> 00:00:40.880
So instead of having express or
node know about hashing passwords.

15
00:00:40.880 --> 00:00:43.217
I should just tell all my models about it,
like,

16
00:00:43.217 --> 00:00:45.953
hey, you know how to hash a password,
hash yourself, or

17
00:00:45.953 --> 00:00:49.212
check yourself versus, node,
check this password on this model.

18
00:00:49.212 --> 00:00:51.537
All right, so just check yourself and
tell me if you're right.

19
00:00:51.537 --> 00:00:57.940
So, to teach Mongoose about new tricks
there's a couple ways we can do it.

20
00:00:58.970 --> 00:01:05.159
So, when we have our schema object
that we create we can use the .methods

21
00:01:05.159 --> 00:01:10.840
property and that's going to be an object,
and we can just make functions on it.

22
00:01:12.510 --> 00:01:16.590
This is like the equivalent of like
calling function.prototype.whatever.

23
00:01:16.590 --> 00:01:18.829
It's like adding stuff to
the prototype of the dog.

24
00:01:19.930 --> 00:01:24.150
That's what methods is, it's adding to the
prototype cuz these functions that we're

25
00:01:24.150 --> 00:01:27.080
making, these instances or
these methods, are gonna be only

26
00:01:27.080 --> 00:01:32.750
available to the instances, not the dog
itself but only the instance of a dog.

27
00:01:32.750 --> 00:01:38.110
So, just like .push on an array is not
available to the array constructor but

28
00:01:38.110 --> 00:01:39.760
it is available to array instances.

29
00:01:42.210 --> 00:01:49.071
So I can't say array.push.

30
00:01:55.792 --> 00:01:57.340
&gt;&gt; Speaker 1: Or, let me try to call it.

31
00:01:57.340 --> 00:01:58.830
That's not a function,

32
00:01:58.830 --> 00:02:02.810
because push is not part of the
constructor, it's part of the instance.

33
00:02:02.810 --> 00:02:07.132
So I can say give me an instance of an
array and call push, and that will work.

34
00:02:10.020 --> 00:02:10.995
&gt;&gt; Speaker 1: So it's the same thing.

35
00:02:12.923 --> 00:02:15.695
&gt;&gt; Speaker 1: That's what
the methods object does,

36
00:02:15.695 --> 00:02:19.200
the inverse is the statics object.

37
00:02:19.200 --> 00:02:22.288
And statics is like adding
it to the static property

38
00:02:24.368 --> 00:02:25.096
&gt;&gt; Speaker 1: So, again, for

39
00:02:25.096 --> 00:02:29.000
inside of methods and we come to the log
this, it will be the current document.

40
00:02:29.000 --> 00:02:30.420
If we're inside of a static method

41
00:02:32.010 --> 00:02:34.920
this is gonna be actually the constructor,
the dog.

42
00:02:34.920 --> 00:02:36.640
So that's the equivalent of doing this.

43
00:02:37.680 --> 00:02:39.190
So I just gave an example of like,

44
00:02:39.190 --> 00:02:44.350
you can't do array.push cuz that's
an instance method, or prototype method.

45
00:02:44.350 --> 00:02:51.670
But, what we could do, array has its
own methods, like Array.isArray.

46
00:02:51.670 --> 00:02:56.550
That belongs to the array constructor,
but it doesn't belong to the instance.

47
00:02:56.550 --> 00:02:58.464
So, if I said Array.isArray.

48
00:03:01.640 --> 00:03:02.660
That doesn't work.
Because

49
00:03:02.660 --> 00:03:04.370
it doesn't belong to
the instance of a raise.

50
00:03:04.370 --> 00:03:05.810
It only belongs to the constructor itself.

51
00:03:07.330 --> 00:03:08.010
It's the same thing.

52
00:03:11.090 --> 00:03:13.680
So statics belong to the dog model.

53
00:03:13.680 --> 00:03:16.510
Methods belong to the dog instances.

54
00:03:16.510 --> 00:03:19.550
So, if we wanted a dog to bark,
like, hey dog, bark.

55
00:03:19.550 --> 00:03:21.620
We'd put it on the instance,
like we'd put it on the methods,

56
00:03:21.620 --> 00:03:23.530
like, can you just go bark?

57
00:03:23.530 --> 00:03:27.170
If we wanted all dogs to be able to do
something, like, I want all dogs to

58
00:03:27.170 --> 00:03:32.130
be able to, or I want to be able
to find all dogs by their owner.

59
00:03:32.130 --> 00:03:33.580
Here, I have that here.

60
00:03:33.580 --> 00:03:35.280
So, I can make a new method on here.

61
00:03:35.280 --> 00:03:37.494
So I can say dog.findbyowner.

62
00:03:38.520 --> 00:03:40.580
I give it the owner's name and
it'll find it.

63
00:03:40.580 --> 00:03:41.080
So I could do that.

64
00:03:44.600 --> 00:03:45.595
Any questions on that?

65
00:03:49.526 --> 00:03:52.030
&gt;&gt; Speaker 1: Again,
this is with Mongoose, not Mongo.

66
00:03:52.030 --> 00:03:53.641
Mongoose is allowing us to do this.

67
00:03:56.703 --> 00:03:59.959
&gt;&gt; Speaker 1: So Mongoose, like Express,
also has support for middleware.

68
00:04:01.620 --> 00:04:06.200
And middleware is perfect for
validating, changing, notifying, etc.

69
00:04:06.200 --> 00:04:09.970
It's the same use cases that you
would use in middleware in Express.

70
00:04:09.970 --> 00:04:12.710
But just now we have
middleware on our models.

71
00:04:12.710 --> 00:04:18.850
And these middleware, they tie into the
life cycle events around our documents.

72
00:04:18.850 --> 00:04:22.520
So when I say life cycle events,
I mean things like I wanna be notified

73
00:04:23.880 --> 00:04:28.650
before something saves or after something
saves or before something is validated or

74
00:04:28.650 --> 00:04:31.970
after something's created or
after something was removed.

75
00:04:31.970 --> 00:04:35.270
We can create middle wear to
attach those life cycle events and

76
00:04:35.270 --> 00:04:36.660
will notify us about it.

77
00:04:36.660 --> 00:04:37.390
Okay.

78
00:04:37.390 --> 00:04:38.660
Hey something's about to save here.

79
00:04:38.660 --> 00:04:41.740
You can do something right quick if you
want to Or something just got removed.

80
00:04:41.740 --> 00:04:43.900
You wanna do something
that's what allows us to do.

81
00:04:45.960 --> 00:04:49.350
So we'll use middle way to hash
our passwords before users created

82
00:04:49.350 --> 00:04:50.820
these in appropriate place to do it.

83
00:04:50.820 --> 00:04:53.680
You can, like I said you can this in so
may places.

84
00:04:53.680 --> 00:04:55.550
You just have a function that
you just call throughout your,

85
00:04:55.550 --> 00:04:56.890
I mean you can do it
inside the controller,

86
00:04:56.890 --> 00:04:58.650
I don't think it'd be the best
place to do it but you could.

87
00:05:00.910 --> 00:05:02.990
But we're just going to do
it inside of our middleware.

88
00:05:02.990 --> 00:05:06.540
So the way middleware looks in mongoose,
so

89
00:05:06.540 --> 00:05:11.300
again on the schema you
either do a .post or .pre.

90
00:05:11.300 --> 00:05:15.400
Post means after this event, and
pre means before this event.

91
00:05:15.400 --> 00:05:18.710
You can go look at the docs they have
tons of Hooks you can hook into.

92
00:05:18.710 --> 00:05:25.100
So here's an example of me wanting to run
a call back after a dog has been saved.

93
00:05:26.270 --> 00:05:30.930
So, dog.post,
that means after dog has been saved.

94
00:05:30.930 --> 00:05:32.310
Run this function.

95
00:05:32.310 --> 00:05:36.690
So, anytime a dog has been save, and
I think save only runs on create.

96
00:05:36.690 --> 00:05:38.240
It doesn't run on update.

97
00:05:38.240 --> 00:05:43.220
So if you updated something I
don't think that counts as a save.

98
00:05:43.220 --> 00:05:47.500
So, what I can do is, okay, assume that
this socket is a web socket library.

99
00:05:47.500 --> 00:05:49.760
I can just send an event
to the client who's like,

100
00:05:49.760 --> 00:05:51.910
hey, I'm notifying you about a change so

101
00:05:51.910 --> 00:05:54.870
that way you're getting real time
updates whenever dog is being changed.

102
00:05:54.870 --> 00:05:58.180
Whenever somebody else in the world
adds a new dog to our database

103
00:05:58.180 --> 00:06:00.100
All the clients get updated about it.

104
00:06:00.100 --> 00:06:04.710
So, this is where you'd
do something about it.

105
00:06:04.710 --> 00:06:06.180
And then, of course, just like Express,

106
00:06:06.180 --> 00:06:08.740
you'd have to call next to
go onto the next middleware.

107
00:06:10.450 --> 00:06:12.520
And just like Express,
you pass in the error object here,

108
00:06:12.520 --> 00:06:14.895
it will pass in the error and log it out.

109
00:06:14.895 --> 00:06:18.704
&gt;&gt; [NOISE].

110
00:06:18.704 --> 00:06:23.395
&gt;&gt; Speaker 1: Here's an example of how we
can tie into a callback function before

111
00:06:23.395 --> 00:06:25.170
our model is validated.

112
00:06:25.170 --> 00:06:26.070
All right.

113
00:06:26.070 --> 00:06:29.560
So we, we set up all those validations
on our models, like required, unique.

114
00:06:30.690 --> 00:06:32.700
Min length, max length,

115
00:06:32.700 --> 00:06:36.220
this will happen before Mongoose
ties into those validations.

116
00:06:36.220 --> 00:06:39.680
So maybe you have a validation of,
like we were talking about yesterday,

117
00:06:39.680 --> 00:06:40.730
you were saying, RegExes.

118
00:06:40.730 --> 00:06:42.920
So you can do those RegExes right here.

119
00:06:42.920 --> 00:06:44.930
It's like, all right,
this is where I'm gonna test.

120
00:06:44.930 --> 00:06:46.660
I wanna make sure that it files this, or

121
00:06:46.660 --> 00:06:50.410
I wanna make sure that It's all
lower case or something like that.

122
00:06:50.410 --> 00:06:52.310
So you would do stuff like this.

123
00:06:52.310 --> 00:06:55.280
And you get access to the document
just by calling this.

124
00:06:55.280 --> 00:06:58.320
So when you say this,
they'll get the doggy.

125
00:06:58.320 --> 00:07:01.253
So then you like all right,
doggy.name.test, this regex,

126
00:07:01.253 --> 00:07:03.000
or.match this regex.

127
00:07:03.000 --> 00:07:07.460
And then of course
you've got to call next.

128
00:07:07.460 --> 00:07:13.500
If you don't call next it'll hang
&gt;&gt; Speaker 1: Any questions on that?

129
00:07:13.500 --> 00:07:15.810
It's like the same thing
as Express middleware.

130
00:07:15.810 --> 00:07:17.207
It just ties into hooks.

131
00:07:20.243 --> 00:07:23.510
&gt;&gt; Speaker 1: So, when you call next,
it just goes to the next hook.

132
00:07:23.510 --> 00:07:25.140
Not the next middleware that you made.

133
00:07:25.140 --> 00:07:26.870
It just goes to the next hook.

134
00:07:26.870 --> 00:07:30.399
So, for instance,
pre-validate runs before presave,

135
00:07:30.399 --> 00:07:35.151
so prevalidate you'll do your stuff,
call next, then it'll go to presave,

136
00:07:35.151 --> 00:07:39.543
you can do some stuff, then it'll call X,
then it might go to post save,

137
00:07:39.543 --> 00:07:44.315
you'll do some stuff, so all three of
those are one time a document will save.

138
00:07:50.105 --> 00:07:51.590
&gt;&gt; Speaker 1: Cool, any questions on this?

139
00:07:54.540 --> 00:07:55.990
Yeah?
&gt;&gt; Speaker 2: So, this is all

140
00:07:55.990 --> 00:07:58.940
still running in our Express environment,
right?

141
00:07:58.940 --> 00:07:59.800
&gt;&gt; Speaker 1: Yes.
&gt;&gt; Speaker 2: It's not like this

142
00:07:59.800 --> 00:08:01.630
is running in some separate thing, or.

143
00:08:01.630 --> 00:08:03.030
&gt;&gt; Speaker 1: Nope.

144
00:08:03.030 --> 00:08:04.330
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Speaker 1: Yeah, you should see it,

145
00:08:04.330 --> 00:08:05.220
like right now.

146
00:08:05.220 --> 00:08:10.130
&gt;&gt; Speaker 2: So, that omit,
we could tie some other code to that,

147
00:08:10.130 --> 00:08:11.400
and when that gets omitted, we.

148
00:08:11.400 --> 00:08:12.440
We subscribe, right?

149
00:08:12.440 --> 00:08:13.030
&gt;&gt; Speaker 1: Yep.

150
00:08:13.030 --> 00:08:13.530
It's all in.

151
00:08:16.280 --> 00:08:22.790
Great, so now that we know that,
we need to do a couple things.

152
00:08:22.790 --> 00:08:27.470
So first, let's check out to step ten?

153
00:08:27.470 --> 00:08:29.370
Yeah.

154
00:08:29.370 --> 00:08:30.400
Yeah, question.

155
00:08:30.400 --> 00:08:33.470
&gt;&gt; Speaker 2: Do we need to do
input senatization for mongoose?

156
00:08:33.470 --> 00:08:35.540
And would you do it in the .pre?

157
00:08:35.540 --> 00:08:36.990
&gt;&gt; Speaker 1: The way to do what?

158
00:08:36.990 --> 00:08:38.240
&gt;&gt; Speaker 2: Input sanitization.

159
00:08:39.290 --> 00:08:40.590
&gt;&gt; Speaker 1: Yeah.
So,

160
00:08:40.590 --> 00:08:44.550
again, that's something I
would totally do on a as well.

161
00:08:44.550 --> 00:08:49.020
So would totally sanitize stuff on the
front and the first but then as a back up,

162
00:08:49.020 --> 00:08:54.330
yes, you would totally do it And something
like, what are these middlewares exactly?

163
00:08:54.330 --> 00:09:00.930
Anytime you need to check or
alter or verify something on a model

164
00:09:00.930 --> 00:09:06.080
before it gets processed on a database,
this is the perfect place to do it.

165
00:09:06.080 --> 00:09:08.330
But again, you also could do it
in a mongoose, like express.

166
00:09:08.330 --> 00:09:10.140
There is nothing stopping
you from doing it there.

167
00:09:10.140 --> 00:09:11.160
It just.

168
00:09:11.160 --> 00:09:15.440
I just think this is not
the appropriate place to do it.

169
00:09:15.440 --> 00:09:17.180
&gt;&gt; Speaker 2: And then,
this was a little while back but

170
00:09:17.180 --> 00:09:23.080
is there a recommended NPM module for
handling auth rules and Passport js?

171
00:09:23.080 --> 00:09:24.280
Was brought up.

172
00:09:24.280 --> 00:09:26.340
&gt;&gt; Speaker 1: Yeah,
passport js is definitely the go to.

173
00:09:26.340 --> 00:09:27.490
That's like the think.

174
00:09:27.490 --> 00:09:30.050
We're not gonna use password today,
I use password all

175
00:09:30.050 --> 00:09:32.560
the time, but we're not gonna use it today
because I want you just make it yourself

176
00:09:32.560 --> 00:09:34.130
cause it's not that
hard to do it yourself.

177
00:09:34.130 --> 00:09:38.820
But yeah, if I were going to use
authorization rules in note,

178
00:09:38.820 --> 00:09:40.360
I would totally use passport js.

