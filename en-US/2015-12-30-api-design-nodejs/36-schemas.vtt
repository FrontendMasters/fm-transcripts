WEBVTT

1
00:00:00.000 --> 00:00:03.749
[MUSIC]

2
00:00:03.749 --> 00:00:05.110
&gt;&gt; Speaker 1: So, data modelling.

3
00:00:05.110 --> 00:00:07.250
Now that we have our scaffold built out,

4
00:00:07.250 --> 00:00:10.940
we build out the routes, we have the
router working, we got our config set up.

5
00:00:10.940 --> 00:00:14.150
We have some utilities with middleware,
the server is running.

6
00:00:14.150 --> 00:00:15.090
Everything's good.

7
00:00:15.090 --> 00:00:19.450
Now we need to plug in some actual
data and the controller to that data.

8
00:00:19.450 --> 00:00:20.695
Remember in the last step we set all that

9
00:00:20.695 --> 00:00:23.435
stuff up?
&gt;&gt; Speaker 1: So

10
00:00:23.435 --> 00:00:28.200
now we just need to replace
the stuff that we have in here.

11
00:00:28.200 --> 00:00:32.020
So if we go look in here, right we're
doing nothing but sending it back to okay.

12
00:00:32.020 --> 00:00:35.040
We need to add in some models and
some controllers in here.

13
00:00:35.040 --> 00:00:36.570
So the first thing we need
to do is before we do this,

14
00:00:36.570 --> 00:00:39.580
we need to figure out how
our data is gonna look like.

15
00:00:39.580 --> 00:00:41.800
But before we do that, we need to
figure out how to even model the idea.

16
00:00:41.800 --> 00:00:46.180
So we can use schemas in Mongoose to add
structure and validations to our data.

17
00:00:47.560 --> 00:00:50.420
So Mongo does not need schemas, though.

18
00:00:50.420 --> 00:00:53.670
Remember, again, Mongo,
the database itself, doesn't need schemas,

19
00:00:53.670 --> 00:00:55.110
we can just throw whatever we want at it.

20
00:00:55.110 --> 00:00:57.910
Mongoose gives us the ability
to define those schemas and

21
00:00:57.910 --> 00:01:02.020
those blueprints to rationalize about
our data and have certain guarantees and

22
00:01:02.020 --> 00:01:05.930
validations and lifecycle checks,
and stuff like that.

23
00:01:05.930 --> 00:01:06.980
That's Mongoose.

24
00:01:06.980 --> 00:01:11.234
It's not Mongo.
&gt;&gt; Speaker 1: We also need some sort of

25
00:01:11.234 --> 00:01:13.000
relationships with our data.

26
00:01:13.000 --> 00:01:18.260
So for instance, users can create posts,
and posts have categories.

27
00:01:18.260 --> 00:01:22.480
Right, so if a user can create posts,
that's a one to many relationship.

28
00:01:22.480 --> 00:01:25.240
One user can have many blog posts.

29
00:01:25.240 --> 00:01:30.280
Right, but a blog post only
belongs to one user and a blog

30
00:01:30.280 --> 00:01:35.760
post can have many categories, right,
and a category can belong to many posts.

31
00:01:35.760 --> 00:01:37.680
So that's a many to many relationship.

32
00:01:39.260 --> 00:01:41.340
So if you've ever dealt
with databases in SQL,

33
00:01:41.340 --> 00:01:42.690
then you kind of know
what I'm talking about.

34
00:01:42.690 --> 00:01:45.170
If not, it's not that important,
this is not a database class,

35
00:01:45.170 --> 00:01:48.140
this is not a class on Mongo,
it's a class on building a API.

36
00:01:48.140 --> 00:01:49.740
And this is just a small part.

37
00:01:49.740 --> 00:01:51.600
So, you can use whatever
database you want.

38
00:01:51.600 --> 00:01:54.340
I just want you to know that's how
you should think about the data.

39
00:01:54.340 --> 00:01:59.687
That's how we're gonna think about it.
&gt;&gt; Speaker 1: So,

40
00:01:59.687 --> 00:02:04.140
Mongoose makes that, the setting of
the relations is actually pretty easy.

41
00:02:04.140 --> 00:02:07.040
If you've ever dealt with
a relational database then

42
00:02:07.040 --> 00:02:08.750
eventually it's like whatever, it's cool,

43
00:02:08.750 --> 00:02:11.760
you normalize it then eventually
probably denormalize it later on.

44
00:02:11.760 --> 00:02:14.180
But, which, you probably break stuff, but

45
00:02:14.180 --> 00:02:15.930
what happens is Mongoose
actually makes it easy.

46
00:02:15.930 --> 00:02:20.250
There's no join tables, none of that
stuff like that, it's just references.

47
00:02:20.250 --> 00:02:23.120
So here's an example of
modeling a todo resource.

48
00:02:25.430 --> 00:02:29.750
Comment, so require Mongoose, the first
thing we do is we make an schema.

49
00:02:29.750 --> 00:02:35.420
And the way we do that is we can just call
new mongoose.Schema with a capital S.

50
00:02:35.420 --> 00:02:37.020
That's a function that takes on an object.

51
00:02:37.020 --> 00:02:38.190
This object is our blueprint.

52
00:02:40.760 --> 00:02:44.356
So whatever properties we've thrown this
object, those are the properties we're

53
00:02:44.356 --> 00:02:47.697
saying that we can use that's that
whatever property is pulling this object,

54
00:02:47.697 --> 00:02:52.870
it's the same thing we were saying.
&gt;&gt; Speaker 1: Up here.

55
00:02:52.870 --> 00:02:54.270
This is us modeling our data up here.

56
00:02:54.270 --> 00:02:56.210
These are the properties that can exist.

57
00:02:56.210 --> 00:03:00.767
That's what we're doing down here.
&gt;&gt; Speaker 1: So

58
00:03:00.767 --> 00:03:05.301
that means we want a completed
property on this resource and

59
00:03:05.301 --> 00:03:12.114
its value type is a boolean.
&gt;&gt; Speaker 1: All right,

60
00:03:12.114 --> 00:03:14.110
so it's either true or false.

61
00:03:14.110 --> 00:03:16.760
And that's not something,
all right, if you know JavaScript,

62
00:03:16.760 --> 00:03:21.570
boolean is not something that, that's
not something Mongoose or Mongo gave us,

63
00:03:21.570 --> 00:03:22.360
it's just a boolean.

64
00:03:23.880 --> 00:03:26.640
Everything in JavaScript's an object,
a boolean is no different.

65
00:03:28.300 --> 00:03:29.030
So that's the boolean.

66
00:03:31.200 --> 00:03:36.080
We can also add validations, there
should be a comma right here by the way,

67
00:03:36.080 --> 00:03:39.830
but we can also add validations
to an object or to a property.

68
00:03:39.830 --> 00:03:43.980
And the way we would do that is if you
wanted to just add more than just what

69
00:03:43.980 --> 00:03:47.140
type the property is, you have to
use object literal as the value,

70
00:03:47.140 --> 00:03:49.920
and then you can add
more properties on it.

71
00:03:49.920 --> 00:03:53.230
So, we also went a content
property on a to do.

72
00:03:53.230 --> 00:03:55.990
So, a to do says whether it's completed or
not, true or

73
00:03:55.990 --> 00:03:59.580
false and then an actual content of
to do of the message or whatever.

74
00:03:59.580 --> 00:04:04.380
It's type is string, so that's
exactly like saying completed boolean.

75
00:04:04.380 --> 00:04:08.310
When you put an object right here and you
say type: string it's the same thing, but

76
00:04:08.310 --> 00:04:11.440
we don't have to put type boolean up here
cuz that's the only thing we're doing.

77
00:04:11.440 --> 00:04:14.620
We're not doing anything else
with this property right here.

78
00:04:14.620 --> 00:04:15.590
So we can just say boolean.

79
00:04:15.590 --> 00:04:18.190
But we wanted to do something else
with this property down here, so

80
00:04:18.190 --> 00:04:19.300
we have to make this object literal.

81
00:04:19.300 --> 00:04:21.920
We had to say hey,
you're type is gonna be string.

82
00:04:23.410 --> 00:04:26.790
And then the validation that we
wanted was it has to be required.

83
00:04:26.790 --> 00:04:32.400
So we put required true that means you
can not save a new document a new to do

84
00:04:32.400 --> 00:04:36.440
without specifying this and
it has to be tied to the string.

85
00:04:36.440 --> 00:04:40.319
So if you don't pass in a string to
the property content as your trying to

86
00:04:40.319 --> 00:04:41.741
create a new one Mongo, or

87
00:04:41.741 --> 00:04:46.695
Mongoose would throw an error.
&gt;&gt; Speaker 1: It will throw

88
00:04:46.695 --> 00:04:47.330
a validation error.

89
00:04:47.330 --> 00:04:48.440
And it will tell you where too,

90
00:04:48.440 --> 00:04:53.621
it will point right to it.
&gt;&gt; Speaker 2: They're

91
00:04:53.621 --> 00:04:55.790
asking if there is a date type?
&gt;&gt; Speaker 1: Yeah,

92
00:04:55.790 --> 00:04:57.830
we're gonna get to all
the types right below this.

93
00:04:57.830 --> 00:05:04.254
Yes, there is a date type.
&gt;&gt; Speaker 1: So, the next thing we

94
00:05:04.254 --> 00:05:09.366
need to do is kind of what I talked about
in the last step is we made a new schema,

95
00:05:09.366 --> 00:05:14.580
now we need to register the schema with
Mongoose, so I can tell Mongo about it.

96
00:05:14.580 --> 00:05:18.050
And the only way we do that is we
use the mongoose.model method,

97
00:05:18.050 --> 00:05:19.850
which I told you is a getter and a setter.

98
00:05:19.850 --> 00:05:23.820
The first argument is the name of
the collection that we want to make, and

99
00:05:23.820 --> 00:05:26.199
the second one is the blueprint for
that, the schema object.

100
00:05:27.550 --> 00:05:29.180
So remember,
it's going to be lowercase and pluralized.

101
00:05:29.180 --> 00:05:31.970
It doesn't matter what you put here,
lowercase and pluralized.

102
00:05:34.900 --> 00:05:38.220
And then the actual thing that it returns

103
00:05:38.220 --> 00:05:42.540
is the actual model that we'll
be using inside of our API.

104
00:05:42.540 --> 00:05:44.840
So when want to query the todo model,

105
00:05:44.840 --> 00:05:46.629
we'll be using this thing
right here that got returned.

106
00:05:47.710 --> 00:05:51.046
So it makes sense to export it because
we'll be requiring it everywhere

107
00:05:51.046 --> 00:05:57.082
else.
&gt;&gt; Speaker 1: So usually

108
00:05:57.082 --> 00:06:01.626
you'll see a pattern where this thing's
just module.exports=mongoose.model.

109
00:06:01.626 --> 00:06:04.046
It'll just skip this line right here,
I just did it on two lines so

110
00:06:04.046 --> 00:06:09.951
it's easy to read.
&gt;&gt; Speaker 1: Any

111
00:06:09.951 --> 00:06:13.259
questions on that?
&gt;&gt; Speaker 1: That's like a basic

112
00:06:13.259 --> 00:06:14.170
blueprint.

113
00:06:14.170 --> 00:06:16.586
This is valid, except for
this comma missing here.

