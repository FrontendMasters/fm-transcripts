WEBVTT

1
00:00:00.000 --> 00:00:03.802
[MUSIC]

2
00:00:03.802 --> 00:00:07.085
&gt;&gt; Scott Moss: I had to cut some stuff,
I cut the real-time thing,

3
00:00:07.085 --> 00:00:09.760
cuz that actually takes a long time.

4
00:00:09.760 --> 00:00:12.650
But it will be in the repo, so if anyone
wants to look at that stuff, it'll be in

5
00:00:12.650 --> 00:00:17.540
there, as far as like the sockets,
having web sockets and be able to do like.

6
00:00:17.540 --> 00:00:20.330
Write a blog post in real-time with
somebody else, that's gonna be in there,

7
00:00:20.330 --> 00:00:21.170
you can look at the code for it.

8
00:00:22.510 --> 00:00:26.780
The thing that I thought was more
important was to get in was employment, so

9
00:00:26.780 --> 00:00:27.551
that's what we're gonna do now.

10
00:00:29.950 --> 00:00:33.740
So, we have some notes on deployment.

11
00:00:33.740 --> 00:00:35.310
I had some notes on
protecting your routes.

12
00:00:35.310 --> 00:00:35.930
I forgot I had that.

13
00:00:37.430 --> 00:00:38.530
We didn't need it, though.

14
00:00:38.530 --> 00:00:39.880
We talked about it already.

15
00:00:39.880 --> 00:00:40.520
So deployment.

16
00:00:41.520 --> 00:00:42.836
Deployment is actually really easy.

17
00:00:42.836 --> 00:00:46.072
You probably don't even need to
write notes on this, in my opinion.

18
00:00:46.072 --> 00:00:47.938
But what we are gonna do is,
I'm gonna talk about this stuff and

19
00:00:47.938 --> 00:00:49.860
then we're all just gonna
deploy the app together.

20
00:00:49.860 --> 00:00:52.360
You can follow along with me,
and just watch me, or

21
00:00:52.360 --> 00:00:54.990
you can do it in your computer, but
we're just gonna do it together and

22
00:00:54.990 --> 00:00:57.630
walk through the process as to
what it takes to deploy it.

23
00:00:57.630 --> 00:00:58.181
A node app.

24
00:00:58.181 --> 00:01:03.011
I don't know, let's use Heroku,
it's probably the easiest.

25
00:01:03.011 --> 00:01:05.490
AWS will be here forever [LAUGH].

26
00:01:05.490 --> 00:01:07.770
So deployment though is relatively easy.

27
00:01:09.492 --> 00:01:13.816
All major, this is the first typo I have
today I promise, this was the first typo.

28
00:01:13.816 --> 00:01:15.500
Or no I had one earlier.

29
00:01:15.500 --> 00:01:17.079
Only two typos today,
that's actually really good.

30
00:01:18.110 --> 00:01:20.890
So all major platforms
support it these days and

31
00:01:20.890 --> 00:01:24.040
adhere to conventions to
smooth the process even more.

32
00:01:24.040 --> 00:01:25.390
Some things to consider when deploying.

33
00:01:26.780 --> 00:01:29.530
Use envs for secrets,
don't check them into source control.

34
00:01:32.400 --> 00:01:36.000
Right, don't check your secret
stuff in the source control.

35
00:01:36.000 --> 00:01:38.140
Once it's there, it's there forever.

36
00:01:38.140 --> 00:01:40.048
I don't care if you like,
you checked it into GitHub,

37
00:01:40.048 --> 00:01:41.306
and you're like, wait hold on.

38
00:01:41.306 --> 00:01:42.650
When they get that out.

39
00:01:42.650 --> 00:01:43.590
Okay, you got it out.

40
00:01:43.590 --> 00:01:48.440
But there's this person
who has built this service

41
00:01:48.440 --> 00:01:50.530
that just listens to all
the hooks on GitHub.

42
00:01:50.530 --> 00:01:53.310
Every single thing that comes in GitHub,
and he listens for

43
00:01:53.310 --> 00:01:55.790
the stuff, and he logs it.

44
00:01:55.790 --> 00:01:56.970
He logs everything.

45
00:01:56.970 --> 00:02:01.100
So that event was already sent off,
so whoever's listening to that public

46
00:02:01.100 --> 00:02:03.900
API on GitHub already got it,
even though you already took it off.

47
00:02:03.900 --> 00:02:05.290
So it's still there.

48
00:02:05.290 --> 00:02:06.760
The chance of them using it, probably not.

49
00:02:06.760 --> 00:02:09.330
But I'm just saying, it's never gone.

50
00:02:09.330 --> 00:02:11.120
So another way to get around that
is just to change the secret.

51
00:02:11.120 --> 00:02:12.770
Then you gotta go like change your stuff.

52
00:02:12.770 --> 00:02:13.890
So just don't put it on GitHub.

53
00:02:15.720 --> 00:02:17.320
Make sure you're error handling.

54
00:02:17.320 --> 00:02:18.990
We talked about that.

55
00:02:18.990 --> 00:02:20.360
That's gonna keep the server running.

56
00:02:20.360 --> 00:02:25.130
So if you're being weary of errors,
try catching, setup middle-ware.

57
00:02:25.130 --> 00:02:29.082
Anywhere you think there might be
an error, you probably wanna handle it,

58
00:02:29.082 --> 00:02:32.360
otherwise your servers gonna see this and
it's gonna crash.

59
00:02:34.070 --> 00:02:37.500
And if your server crashes
with five people in

60
00:02:37.500 --> 00:02:41.910
here writing their blogs together,
it's not gonna be fun.

61
00:02:41.910 --> 00:02:49.268
So, handle those errors.
&gt;&gt; Scott Moss: Make

62
00:02:49.268 --> 00:02:52.480
sure all your dependencies
are being installed.

63
00:02:52.480 --> 00:02:56.970
A misconception is people they'll deploy,
and they think that the thing that they're

64
00:02:56.970 --> 00:03:00.400
deploying to installed all their
dependencies, but it really didn't.

65
00:03:00.400 --> 00:03:04.140
For instance, you might have a global
dependency that your app is relying on.

66
00:03:04.140 --> 00:03:06.130
I don't know what that might be.

67
00:03:06.130 --> 00:03:08.640
Or maybe you are using
Gulp to build your stuff.

68
00:03:08.640 --> 00:03:11.982
But you are using the global
version of Gulp on your computer.

69
00:03:11.982 --> 00:03:15.288
So when you deploy Heroku
doesn't npm install.

70
00:03:15.288 --> 00:03:16.812
Gulp is not in the package.json.

71
00:03:16.812 --> 00:03:18.246
Cuz you're using it globally.

72
00:03:18.246 --> 00:03:21.660
And then you tell Heroku to do a Gulp
build and it's like, what's Gulp?

73
00:03:21.660 --> 00:03:22.930
I don't know what that is.

74
00:03:22.930 --> 00:03:24.390
Cuz you never put it in your package.JSON.

75
00:03:24.390 --> 00:03:25.610
You were using the global version.

76
00:03:25.610 --> 00:03:27.740
So make sure all you stuff is installed.

77
00:03:27.740 --> 00:03:31.850
So, anything that you application needs,
make sure it's in the package.json.

78
00:03:31.850 --> 00:03:34.280
Speaking of which dev dependencies and
dependencies.

79
00:03:35.510 --> 00:03:40.210
So, by default, what Heroku will do, and
I think most other platforms do too,

80
00:03:40.210 --> 00:03:41.839
when they run npm install.

81
00:03:41.839 --> 00:03:46.220
They'll actually do something like this,
they'll say npm install -- production.

82
00:03:48.400 --> 00:03:52.712
And what that does it only npm installs
stuff in the dependency section,

83
00:03:52.712 --> 00:03:57.174
it's only on npm install this stuff,
it won't npm install this stuff,.

84
00:03:57.174 --> 00:04:01.906
The dev dependencies or
maybe I'm not sure if it does that.

85
00:04:01.906 --> 00:04:03.920
Peer dependencies are going away anyway.

86
00:04:03.920 --> 00:04:06.780
But if we're sure, only install that.

87
00:04:06.780 --> 00:04:09.690
So if you were relying on
something again like Gulp,

88
00:04:09.690 --> 00:04:14.020
if you we're gonna tell Heroku like once
you install everything, do a Gulp build.

89
00:04:14.020 --> 00:04:16.814
But Gulp was a dev dependency, it's gonna
be like, I don't know what Gulp is,

90
00:04:16.814 --> 00:04:18.330
I never installed it.

91
00:04:18.330 --> 00:04:21.890
So again make sure all the dependencies
that you need are installed.

92
00:04:21.890 --> 00:04:25.700
And now it comes down what you
need to happen before you deploy.

93
00:04:25.700 --> 00:04:28.050
Some people like to build
before they deploy.

94
00:04:28.050 --> 00:04:32.530
Some people like to have their
code built during deployment.

95
00:04:32.530 --> 00:04:34.890
So it all depends on what you're doing.

96
00:04:34.890 --> 00:04:37.837
If you have a CI, and
you're CI's testing and it's building.

97
00:04:37.837 --> 00:04:40.361
Or maybe you just give it to Heroku and
Heroku does the building,

98
00:04:40.361 --> 00:04:42.390
or maybe you build it locally and
give it to Heroku.

99
00:04:42.390 --> 00:04:44.176
I'm not sure.
It all depends on what you're doing.

100
00:04:50.989 --> 00:04:51.976
&gt;&gt; Scott Moss: But yeah, again,

101
00:04:51.976 --> 00:04:54.754
if you're gonna have your
platform build it for you,

102
00:04:54.754 --> 00:04:57.362
make sure it has access to
all of your build tools.

103
00:04:57.362 --> 00:05:01.408
Heroku and AWS don't have gulp
just hanging around waiting for

104
00:05:01.408 --> 00:05:04.250
you to use it or web pack or
whatever you use.

105
00:05:04.250 --> 00:05:06.210
It's not just there chilling.

106
00:05:06.210 --> 00:05:08.850
They got npm for sure,
they don't have the other stuff.

107
00:05:11.060 --> 00:05:13.600
You can also freeze node modules
by running npm shrinkwrap.

108
00:05:15.120 --> 00:05:17.477
Npm shrinkwrap will just freeze
the versions of the dependencies.

109
00:05:17.477 --> 00:05:21.420
So they don't, so every time you run npm
install, they don't go fetch the latest.

110
00:05:21.420 --> 00:05:24.410
It's like freeze everything to
be this version and that's it.

111
00:05:24.410 --> 00:05:29.948
And you could do that.
&gt;&gt; Scott Moss: And

112
00:05:29.948 --> 00:05:33.040
don't hard code things
like development URLs.

113
00:05:34.490 --> 00:05:40.940
Right, for instance if we,
like in our user controller.

114
00:05:41.980 --> 00:05:46.360
Let's say we made a call to Facebook
in here, we're like, yeah Facebook.

115
00:05:47.480 --> 00:05:51.681
Or like I don't know, otherServer.get,

116
00:05:51.681 --> 00:05:56.720
all right, and
there was like some URL here and

117
00:05:56.720 --> 00:05:59.640
this is a bad example or like it was
like it was almost another port.

118
00:05:59.640 --> 00:06:02.141
We had another server on another
port that was a local host.

119
00:06:05.912 --> 00:06:09.592
&gt;&gt; Scott Moss: And it was on port 5000.

120
00:06:09.592 --> 00:06:13.132
By hard coding that in, what happens
is now when we deploy this server,

121
00:06:13.132 --> 00:06:17.675
and when this route gets hit and it tries
to hit localhost:5000, it's gonna be like,

122
00:06:17.675 --> 00:06:18.446
what's that?

123
00:06:18.446 --> 00:06:20.770
And it's not gonna work.

124
00:06:20.770 --> 00:06:23.150
All right and then if you deploy
the server that's on 5000,

125
00:06:23.150 --> 00:06:24.930
it's got its own URL and they change too.

126
00:06:24.930 --> 00:06:29.873
So don't hard code these things.
&gt;&gt; Scott Moss: You

127
00:06:29.873 --> 00:06:31.570
can pass those in with
environment variables.

128
00:06:34.240 --> 00:06:37.310
Anything you need to change
on a per environment basis,

129
00:06:37.310 --> 00:06:38.430
it should be an environment variable.

130
00:06:41.580 --> 00:06:44.070
And then you can use the config
to change those things.

131
00:06:47.570 --> 00:06:50.410
Another thing you don't wanna hard code
is like database URLs, stuff like that.

132
00:06:52.280 --> 00:06:55.366
Right?
So we did like a hybrid approach of where

133
00:06:55.366 --> 00:06:58.817
we like hard coded the database URLs but
only for

134
00:06:58.817 --> 00:07:03.490
a specific environment, all right,
so if we go to hard config.

135
00:07:03.490 --> 00:07:06.310
Like development.js it
has this database url.

136
00:07:06.310 --> 00:07:12.630
Yes, it's hard-coded, this URL will
ever work in development environment.

137
00:07:12.630 --> 00:07:13.870
Which is fine, we don't really care.

138
00:07:13.870 --> 00:07:14.705
This is exactly what we want.

139
00:07:14.705 --> 00:07:16.560
Testing.js.

140
00:07:16.560 --> 00:07:18.400
This URL is hard-coded, but

141
00:07:18.400 --> 00:07:23.470
it will only ever be here during testing
environment, which is probably also fine.

142
00:07:23.470 --> 00:07:27.760
But maybe you run your
tests somewhere else and

143
00:07:27.760 --> 00:07:31.450
they have a different environment variable
for that, so you need to add that here.

144
00:07:31.450 --> 00:07:35.010
But for production,
you definitely don't wanna hard-code that.

145
00:07:35.010 --> 00:07:36.530
Production will be
an environmental variable,

146
00:07:36.530 --> 00:07:38.960
cuz you're gonna be binding
to some hosted database.

147
00:07:38.960 --> 00:07:42.100
So on Heroku they have like hosted Mongo
and things, but other servers it's Mongo

148
00:07:42.100 --> 00:07:45.910
sup, Mongo beta, whatever freaking
Mongo thing they have on there.

149
00:07:45.910 --> 00:07:49.160
You'll be binding to some environment
variable there for your URL.

150
00:07:49.160 --> 00:07:50.344
So that's why I didn't put anything here,

151
00:07:50.344 --> 00:07:57.540
we're gonna do that next
&gt;&gt; Scott Moss: And ports.

152
00:07:57.540 --> 00:08:00.360
Ports is another one,
so again development.

153
00:08:00.360 --> 00:08:01.802
I think we articulated this.

154
00:08:01.802 --> 00:08:03.522
Process.env.port.

155
00:08:03.522 --> 00:08:05.150
We don't know what port we're gonna be on,

156
00:08:05.150 --> 00:08:08.110
it's whatever the thing we deploy
on says what port we're on.

157
00:08:08.110 --> 00:08:09.730
And they always put it on this.

158
00:08:09.730 --> 00:08:13.199
It will, almost every platform uses that,

159
00:08:13.199 --> 00:08:19.216
it's on the P-O-R-T environment variable,
or default to 3,000.

160
00:08:19.216 --> 00:08:22.300
Which is why ours is on 3,000.

161
00:08:22.300 --> 00:08:23.850
Any questions on that?

162
00:08:26.270 --> 00:08:29.235
Another good thing is a good practice is
like put stuff like this in environment

163
00:08:29.235 --> 00:08:29.920
variable too.

164
00:08:29.920 --> 00:08:33.441
This time and days, all right,
what if we wanna go change this,

165
00:08:33.441 --> 00:08:36.590
now you got to go redeploy,
just to change this one line.

166
00:08:36.590 --> 00:08:39.199
If this was in an environment,
I could just change the environment.

167
00:08:39.199 --> 00:08:41.520
But in environment, we'll will just
restart and then it's still good.

168
00:08:42.520 --> 00:08:44.530
So stuff like this is great,
put in an environment variable.

