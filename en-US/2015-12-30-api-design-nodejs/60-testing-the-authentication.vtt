WEBVTT

1
00:00:00.025 --> 00:00:03.960
&gt;&gt; [MUSIC]

2
00:00:03.960 --> 00:00:05.420
&gt;&gt; Scott Moss: So, let's check and
see if that works.

3
00:00:05.420 --> 00:00:10.376
So, first we'll do let's just go get
a user from c, we'll use this person,

4
00:00:10.376 --> 00:00:14.140
we'll grab their user name,
all the passwords are test.

5
00:00:15.520 --> 00:00:20.396
So, I come over here and
say http and POST,

6
00:00:20.396 --> 00:00:26.690
to sign up, localhosts:3000/auth, right?

7
00:00:26.690 --> 00:00:31.949
/auth because if you go to server js,
/auth, right there, /auth.

8
00:00:31.949 --> 00:00:37.920
And then if you go to that,
/signin, so /auth, /signin.

9
00:00:41.700 --> 00:00:45.200
&gt;&gt; Scott Moss: /auth/signin, right?

10
00:00:45.200 --> 00:00:52.780
And then what you wanna do is
post your username= that and

11
00:00:52.780 --> 00:00:56.105
then password=test.

12
00:00:56.105 --> 00:00:59.502
There we go and then we get a token back.

13
00:01:07.120 --> 00:01:07.790
&gt;&gt; Scott Moss: See how that works?

14
00:01:09.220 --> 00:01:13.480
If you look at the logs in the server,
we got a successful 200.

15
00:01:13.480 --> 00:01:14.640
So, okay, yeah, yeah that worked.

16
00:01:14.640 --> 00:01:15.150
Everything works.

17
00:01:15.150 --> 00:01:16.240
We're good.

18
00:01:16.240 --> 00:01:18.130
All right.
Now if I change it, if i was like,

19
00:01:18.130 --> 00:01:21.820
okay let me try to sign in again but,
I'm gonna put the wrong password in.

20
00:01:23.254 --> 00:01:27.810
All right, so what I expect to see if I,
I've got so many things open,

21
00:01:27.810 --> 00:01:32.650
what I expect to see with
the wrong password, is this.

22
00:01:32.650 --> 00:01:34.150
I should see wrong password.

23
00:01:34.150 --> 00:01:35.730
That's what I should see.

24
00:01:35.730 --> 00:01:40.690
Because what would happen is,
the verify token would work or

25
00:01:40.690 --> 00:01:44.600
the decode token would work, so that, I'm
sorry we're not using tokens, never mind.

26
00:01:44.600 --> 00:01:45.410
Let's do it to iron.

27
00:01:45.410 --> 00:01:48.130
So, what will happen is there
is a username and password so

28
00:01:48.130 --> 00:01:51.530
to skip this,
it will find the user by the username

29
00:01:51.530 --> 00:01:54.230
which is correct cuz we
give it the right username.

30
00:01:54.230 --> 00:01:56.070
This will never happen
because there is a user, so

31
00:01:56.070 --> 00:01:58.870
it will come down here and
then this is where it fell.

32
00:01:58.870 --> 00:02:01.160
It like,
woah those two passwords don't match.

33
00:02:01.160 --> 00:02:03.090
So, because of that expect to see this.

34
00:02:03.090 --> 00:02:04.090
So let's check that.

35
00:02:04.090 --> 00:02:06.365
So wrong password, there it is,

36
00:02:06.365 --> 00:02:12.887
wrong password.
&gt;&gt; Scott Moss: And

37
00:02:12.887 --> 00:02:17.904
then if I also decided to do it
with no password and no user name,

38
00:02:17.904 --> 00:02:21.990
I expect to see,
you need a username and password.

39
00:02:21.990 --> 00:02:26.070
And that's exactly what I see.

40
00:02:30.030 --> 00:02:32.260
Is there another s case?

41
00:02:32.260 --> 00:02:34.660
Yeah.
Now if I give it the wrong username but

42
00:02:34.660 --> 00:02:36.490
the right password or any password.

43
00:02:36.490 --> 00:02:39.090
Let's just give it
a completely wrong username.

44
00:02:39.090 --> 00:02:42.400
I should see,
no user with the given username.

45
00:02:42.400 --> 00:02:44.950
So I see that,
no user with the given username.

46
00:02:47.320 --> 00:02:48.120
Everybody follow me there?

47
00:02:50.120 --> 00:02:51.930
Any questions on this stuff?

48
00:02:51.930 --> 00:02:53.130
Yes?
&gt;&gt; Speaker 2: What

49
00:02:53.130 --> 00:02:57.000
are benefits to using Passport
versus doing it manually this way?

50
00:02:57.000 --> 00:03:00.120
And then he's saying if,
he didn't know if you had time, but

51
00:03:00.120 --> 00:03:04.057
could you show how to switch out
the custom middleware with Passport js?

52
00:03:04.057 --> 00:03:04.750
&gt;&gt; Scott Moss: Yeah, Passports, so

53
00:03:04.750 --> 00:03:08.300
there's a little more overhead with
Passport, but for good reasoning.

54
00:03:08.300 --> 00:03:11.996
If I were to build my own,
I would probably use Passport,

55
00:03:11.996 --> 00:03:15.846
because these days,
most applications have third party Or

56
00:03:15.846 --> 00:03:20.719
with sign ins with third party
providers like Facebook or Twitter.

57
00:03:20.719 --> 00:03:24.689
Yourself is doable, but if you're
not familiar with how OF works and

58
00:03:24.689 --> 00:03:28.940
all the double handshake and all that
stuff works and all that good stuff.

59
00:03:28.940 --> 00:03:31.480
You probably would use
something like Passport.

60
00:03:31.480 --> 00:03:33.160
So, if you're only doing a local sign up,
like we're doing now,

61
00:03:33.160 --> 00:03:35.176
maybe Passport doesn't seem
like it's worth the overhead.

62
00:03:35.176 --> 00:03:38.980
But if you probably have more than one
strategy as far as authentication.

63
00:03:38.980 --> 00:03:42.440
So, Passport actually, it's like you write
it once and then it just has diminishing

64
00:03:42.440 --> 00:03:47.250
returns on how hard it is to add another
feature to it cause it's the same thing.

65
00:03:47.250 --> 00:03:50.244
As far as having time,
we if we have time at the end,

66
00:03:50.244 --> 00:03:53.446
I have some stuff I want to get to,
we could get to that,

67
00:03:53.446 --> 00:03:58.415
cause it's not too difficult, but the only
difference with Passport and this one.

68
00:03:58.415 --> 00:04:00.866
In my opinion there's gonna be a lot
more overhead with Passport but

69
00:04:00.866 --> 00:04:02.295
it's literally doing the same thing.

70
00:04:02.295 --> 00:04:06.895
You're still gonna do, in fact,
you probably will just copy this,

71
00:04:06.895 --> 00:04:10.545
this whole method right here,
and paste it in Passport.

72
00:04:10.545 --> 00:04:11.575
It'll do the exact same thing.

73
00:04:11.575 --> 00:04:14.525
The only thing you do differently
is instead of calling next,

74
00:04:14.525 --> 00:04:17.600
you just have to call you just have
to tell password that you're done.

75
00:04:17.600 --> 00:04:18.910
That's it.

76
00:04:18.910 --> 00:04:22.000
And then you had to we also had
to disable sessions cuz Passport

77
00:04:22.000 --> 00:04:23.580
use a sessions by default.

78
00:04:23.580 --> 00:04:26.300
And they don't work they don't
obviously we're not using sessions.

79
00:04:26.300 --> 00:04:27.180
So, whether to disable that.

80
00:04:27.180 --> 00:04:30.332
So, just little more overhead just for
one strategy, but for multiple strategies,

81
00:04:30.332 --> 00:04:31.859
it's out for the best and
if I had to do it,

82
00:04:31.859 --> 00:04:37.030
I would use Passport
&gt;&gt; Scott Moss: Any other questions?

83
00:04:37.030 --> 00:04:37.900
&gt;&gt; Speaker 2: He was asking about if you

84
00:04:37.900 --> 00:04:41.450
could show how to switch that out, but
if you don't have time for today maybe you

85
00:04:41.450 --> 00:04:43.260
could push it to the repo later?
&gt;&gt; Scott Moss: Yeah, if I don't have time

86
00:04:43.260 --> 00:04:46.580
to show it today, I will definitely
push it to the repo, and we'll have it.

87
00:04:46.580 --> 00:04:48.740
I'll probably even add
in another strategy, so

88
00:04:48.740 --> 00:04:50.970
that you can like click to log in
with Facebook or something like that.

89
00:04:50.970 --> 00:04:52.020
So, you can see how that works.

90
00:04:52.020 --> 00:04:54.890
Yes.
&gt;&gt; Speaker 3: If you grant another token,

91
00:04:54.890 --> 00:04:58.660
does that kill the old token?

92
00:04:58.660 --> 00:05:03.344
Or are they both still valid?
&gt;&gt; Speaker 3: So let's say you

93
00:05:03.344 --> 00:05:07.080
post a sign in, you get a token.
&gt;&gt; Scott Moss: Mm-hm.

94
00:05:07.080 --> 00:05:08.050
&gt;&gt; Speaker 3: Then you post a sign in

95
00:05:08.050 --> 00:05:09.920
again and you get another token.
&gt;&gt; Scott Moss: Right.

96
00:05:09.920 --> 00:05:10.970
&gt;&gt; Speaker 3: If you tried to access

97
00:05:10.970 --> 00:05:16.350
a resource with that other token that's
still valid right, it's not like

98
00:05:16.350 --> 00:05:18.590
there's only one valid token at a time?
&gt;&gt; Scott Moss: Right,

99
00:05:18.590 --> 00:05:20.760
because the service all it knows,

100
00:05:20.760 --> 00:05:23.100
it doesn't keep track of tokens.
&gt;&gt; Scott Moss: It just knows if

101
00:05:23.100 --> 00:05:26.120
you give me this token,
that was signed with this secret.

102
00:05:27.320 --> 00:05:30.370
I guarantee you I will give you what
it used to be before it was signed.

103
00:05:30.370 --> 00:05:31.440
That's it.

104
00:05:31.440 --> 00:05:34.780
And if it's not expired.
&gt;&gt; Speaker 3: Okay.

105
00:05:34.780 --> 00:05:35.540
&gt;&gt; Scott Moss: So yeah, you can have

106
00:05:35.540 --> 00:05:36.140
more than one token.

107
00:05:38.840 --> 00:05:39.820
So if I like, made this token,

108
00:05:39.820 --> 00:05:43.230
and then I made this token,
they're both valid tokens.

109
00:05:43.230 --> 00:05:46.500
I could use either one of these for
this user, so they'll get my stuff.

110
00:05:46.500 --> 00:05:47.300
And it would work.
&gt;&gt; Speaker 3: So

111
00:05:47.300 --> 00:05:51.060
if someone gets your secret, they could
extend the life of a token, right?

112
00:05:51.060 --> 00:05:52.610
&gt;&gt; Scott Moss: If somebody gets your

113
00:05:52.610 --> 00:05:55.810
token secret You have bigger problems
than extending the life of it, but

114
00:05:55.810 --> 00:05:56.830
yeah.
&gt;&gt; Speaker 3: Yeah,

115
00:05:56.830 --> 00:05:58.700
okay.
&gt;&gt; Scott Moss: That's why they expire,

116
00:05:58.700 --> 00:06:03.410
because what's stopping you from just
making a JSON web token and posting

117
00:06:03.410 --> 00:06:05.470
to my database, and acting like the user.
&gt;&gt; Speaker 3: I

118
00:06:05.470 --> 00:06:06.443
don't know.
&gt;&gt; Scott Moss: Yeah,

119
00:06:06.443 --> 00:06:08.640
there's nothing until you expire them.

120
00:06:08.640 --> 00:06:10.333
So you gotta have a secret and stuff,

121
00:06:10.333 --> 00:06:14.392
so have those things expire.
&gt;&gt; Speaker 2: So,

122
00:06:14.392 --> 00:06:17.920
people underneath use redis for
authentication?

123
00:06:17.920 --> 00:06:20.320
Restore sessions.
&gt;&gt; Scott Moss: No, I don't use sessions.

124
00:06:20.320 --> 00:06:22.100
But if you were to use sessions,
redis is a great choice.

125
00:06:22.100 --> 00:06:27.770
So, a simple key value store,
perfect for things like sessions.

126
00:06:27.770 --> 00:06:36.450
But I don't use sessions.
&gt;&gt; Scott Moss: Cool.

127
00:06:36.450 --> 00:06:37.290
Any other questions on that?

128
00:06:39.180 --> 00:06:40.580
It's kind of crazy how it
all works together, right?

129
00:06:40.580 --> 00:06:44.155
It almost feels like there's no way
that's gonna come together at the end and

130
00:06:44.155 --> 00:06:46.740
then somehow it just comes together.

131
00:06:46.740 --> 00:06:47.570
That's how I feel sometimes.

132
00:06:48.910 --> 00:06:49.850
But yeah, it just came together.

133
00:06:53.380 --> 00:06:54.050
But it makes sense.

134
00:06:54.050 --> 00:06:57.438
If you walk through it and you look
at the things that it's checking for,

135
00:06:57.438 --> 00:07:00.740
it makes sense,
it's not like there's something hidden,

136
00:07:00.740 --> 00:07:03.750
well except for this thing.
&gt;&gt; Speaker 3: [LAUGH]

137
00:07:03.750 --> 00:07:04.780
&gt;&gt; Scott Moss: That thing's kinda hidden.

138
00:07:04.780 --> 00:07:07.720
But, I told you what that's doing,

139
00:07:07.720 --> 00:07:09.669
everything else it's just like it's
in plain in sight what's happening.

140
00:07:12.130 --> 00:07:17.190
Course the next thing you had to do was,
&gt;&gt; Scott Moss: If you didn't do this,

141
00:07:17.190 --> 00:07:19.400
this is fine,
because we didn't use it in this example.

142
00:07:19.400 --> 00:07:22.070
So, if you didn't feel comfortable
writing this because there's no way to

143
00:07:22.070 --> 00:07:24.720
even test it, that's fine,
cuz we're gonna use it on step 12.

144
00:07:24.720 --> 00:07:27.980
But I wanted you to write it to
get ready to use in step 12, but

145
00:07:27.980 --> 00:07:29.550
if you didn't do it, that's fine.

146
00:07:29.550 --> 00:07:30.709
We're gonna use it on step 12.

147
00:07:31.860 --> 00:07:35.046
So this method,
get fresh user, like I said,

148
00:07:35.046 --> 00:07:40.031
it's job is to get a fresh user because
when we decode the token all we have

149
00:07:40.031 --> 00:07:44.722
is the ID, the auto-square ID,
we actually want the entire user.

150
00:07:44.722 --> 00:07:48.268
So, by the time our controllers
are called, they can just say,

151
00:07:48.268 --> 00:07:52.143
hey I want to know who the current
user is and if they look at rec.user,

152
00:07:52.143 --> 00:07:56.350
that'll be then the entire user object,
not just the ID property.

153
00:07:56.350 --> 00:07:59.270
That way they don't have to do another
database query on top of the query they're

154
00:07:59.270 --> 00:08:00.910
about to do in the first place, right?

155
00:08:00.910 --> 00:08:01.520
It's already done.

156
00:08:03.210 --> 00:08:05.720
So, that's all this is doing, is just like
querying the database for this thing.

157
00:08:10.320 --> 00:08:14.140
So here's the S case of like somebody
sending us a token that passes our

158
00:08:14.140 --> 00:08:17.720
validation because it was signed with
the same secret and everything, but

159
00:08:17.720 --> 00:08:20.990
for some reason there doesn't exist
a user with that ID in our database.

160
00:08:20.990 --> 00:08:22.080
So we're like nope, you're unauthorized.

161
00:08:23.340 --> 00:08:26.162
You did everything right except for
the IDs just don't match.

162
00:08:26.162 --> 00:08:31.230
Else, req.user is user, so it's almost
pretty simple and just calling next.

163
00:08:39.010 --> 00:08:39.910
&gt;&gt; Scott Moss: Any questions on that one?

164
00:08:39.910 --> 00:08:44.133
And we're not using it anywhere so if
you're like, where are we using the We're

165
00:08:44.133 --> 00:08:50.136
not using it yet
&gt;&gt; Scott Moss: Greats

166
00:08:50.136 --> 00:08:55.194
great great,
&gt;&gt; Scott Moss: I think

167
00:08:55.194 --> 00:09:04.514
that was all you had to do
&gt;&gt; Scott Moss: Yeah yeah,

168
00:09:04.514 --> 00:09:06.650
that was all you had to do.

169
00:09:06.650 --> 00:09:09.860
So, knowing that, is there any
questions around authentication?

170
00:09:12.040 --> 00:09:17.360
As far as JSON web tokens, as far as the
passwords, how we do that, as far as Mongo

171
00:09:17.360 --> 00:09:21.450
and Mongoose using these schema methods or
there prehooks, anything surrounding that?

172
00:09:21.450 --> 00:09:25.140
I want to make sure we answer that
stuff now before we start moving in,

173
00:09:25.140 --> 00:09:27.790
cuz we gonna start moving in
to a little more abstraction.

174
00:09:27.790 --> 00:09:30.710
So, I wanna make sure everybody is
on a good understanding of things

175
00:09:30.710 --> 00:09:31.470
that might be confusing.

