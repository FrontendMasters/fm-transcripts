WEBVTT

1
00:00:00.000 --> 00:00:04.178
[MUSIC]

2
00:00:04.178 --> 00:00:08.090
&gt;&gt; Speaker 1: For app.param,
again, this is going to, because,

3
00:00:08.090 --> 00:00:13.890
first we actually registered app.param,
before we registered these routes.

4
00:00:15.300 --> 00:00:16.460
Which is great.

5
00:00:16.460 --> 00:00:17.900
That's, adding it to the stack earlier.

6
00:00:17.900 --> 00:00:20.560
If we put this below the routes,
then it wouldn't work, regardless.

7
00:00:20.560 --> 00:00:21.650
So we add it before the routes.

8
00:00:24.520 --> 00:00:29.310
And then we have, it's looking for
the parameter of the name of id.

9
00:00:31.870 --> 00:00:34.180
And then it passed that value as
the fourth argument here, right.

10
00:00:34.180 --> 00:00:36.410
And then what we do is we
just do what we did before.

11
00:00:36.410 --> 00:00:38.910
We just find the line with that id.

12
00:00:38.910 --> 00:00:42.080
If it's the line,
attach it to direct.line then call next.

13
00:00:42.080 --> 00:00:44.240
If not then just nothing.

14
00:00:46.430 --> 00:00:50.480
Just send back to the client
like that's not a real id.

15
00:00:50.480 --> 00:00:55.209
So you set the status code
to something else, but yeah.

16
00:00:55.209 --> 00:00:57.449
Just respond back to
the client don't even go next.

17
00:01:03.709 --> 00:01:07.991
&gt;&gt; Speaker 1: The next one was
create an error handler, so

18
00:01:07.991 --> 00:01:12.992
this is actually wrong cuz
it needs to be down here.

19
00:01:12.992 --> 00:01:14.480
Boom.

20
00:01:14.480 --> 00:01:16.040
So error handlers just
like we did last time.

21
00:01:17.320 --> 00:01:20.660
It's a middleware function
that takes in that required

22
00:01:20.660 --> 00:01:22.760
four arguments with
the error of the first one.

23
00:01:22.760 --> 00:01:24.510
And then just sends back an error here.

24
00:01:25.900 --> 00:01:28.380
&gt;&gt; Speaker 2: Scott,
what is it sending back on line 71 there

25
00:01:28.380 --> 00:01:30.690
with the error logic?

26
00:01:30.690 --> 00:01:32.590
&gt;&gt; Speaker 1: That's actually misspelled.

27
00:01:32.590 --> 00:01:33.710
Thank you, I didn't notice that.

28
00:01:33.710 --> 00:01:36.595
THat would send back a syntax error.

29
00:01:36.595 --> 00:01:38.206
[LAUGH] Well actually that would
throw a syntax error on the server,

30
00:01:38.206 --> 00:01:39.490
it wouldn't send back anything.

31
00:01:39.490 --> 00:01:42.370
&gt;&gt; Speaker 2: I never get that either,
i didnt know how to.

32
00:01:42.370 --> 00:01:44.430
&gt;&gt; Speaker 1: Yeah I didnt hit
it because it was up here.

33
00:01:44.430 --> 00:01:47.510
I didnt move it down.

34
00:01:47.510 --> 00:01:48.450
I should hit it now.

35
00:01:48.450 --> 00:01:50.580
So if you move it down,
throw an error at one of your routes.

36
00:01:50.580 --> 00:01:52.200
Maybe throw an error at param.

37
00:01:53.500 --> 00:01:56.680
As long as you pass an error into next.

38
00:01:56.680 --> 00:01:57.659
It will hit this.

39
00:02:03.099 --> 00:02:04.610
&gt;&gt; Speaker 1: If you just throw
an error it won't hit it.

40
00:02:04.610 --> 00:02:06.550
It will just throw an error.

41
00:02:06.550 --> 00:02:10.320
&gt;&gt; Speaker 2: And can you explain again
why it matters if you move that down?

42
00:02:10.320 --> 00:02:12.970
&gt;&gt; Speaker 1: Yep.
So imagine this, let me show you this.

43
00:02:12.970 --> 00:02:14.250
So I'm gonna make an array of middleware.

44
00:02:14.250 --> 00:02:18.609
And I'm just gonna call it cbs,
for call backs.

45
00:02:19.940 --> 00:02:23.090
And what happens is,

46
00:02:24.280 --> 00:02:29.990
when we say app.use, we're registering
callbacks inside this array.

47
00:02:29.990 --> 00:02:35.360
So the first one we do is we put Morgan in
there, because that's the first app.use.

48
00:02:35.360 --> 00:02:39.990
The second one is express.static.

49
00:02:39.990 --> 00:02:42.220
The next one is the body parser,
I'm just gonna put bp,

50
00:02:42.220 --> 00:02:46.798
the next one is the other body parser,
I'm just gonna put bp,

51
00:02:46.798 --> 00:02:51.920
and then app.param, just gonna put param.

52
00:02:54.120 --> 00:02:57.180
And then after that we have all these
routes here which have specific

53
00:02:57.180 --> 00:02:57.728
verbs on them.

54
00:02:57.728 --> 00:03:02.679
So they're not on the same level,
they're more like siblings.

55
00:03:02.679 --> 00:03:09.178
So I'm just going to put routes here
because they're all inside of here.

56
00:03:09.178 --> 00:03:12.863
So the get, the post, the delete the put,
they're all inside another array,

57
00:03:12.863 --> 00:03:15.290
they're like siblings
they're on the same level.

58
00:03:16.780 --> 00:03:20.490
So Morgan's first, this is second, this
is third, this is fourth, this is fifth.

59
00:03:21.490 --> 00:03:23.060
Any one of these can be sixth.

60
00:03:24.310 --> 00:03:27.390
And then the error messaging is down here.

61
00:03:28.650 --> 00:03:33.960
That's the seventh one in the stack,
so then the error handling.

62
00:03:33.960 --> 00:03:38.430
Now, when we're inside of one of
these routes, or even inside a param

63
00:03:38.430 --> 00:03:42.130
if we called next on one of these
with error in it, it'll go here.

64
00:03:45.475 --> 00:03:47.840
&gt;&gt; Speaker 2: Whereas,
how was it before when it was up?

65
00:03:47.840 --> 00:03:53.200
&gt;&gt; Speaker 1: It was up like here,
so if we were to call next

66
00:03:53.200 --> 00:03:56.810
on one of these routes there's nothing
out there, it just wouldn't do anything.

67
00:03:58.990 --> 00:03:59.640
There is no next.

68
00:03:59.640 --> 00:04:04.370
It would just hang probably, I don't
know what express does in that scenario.

69
00:04:04.370 --> 00:04:08.270
&gt;&gt; Speaker 2: And that's because you're
using next to kind of funnel the error.

70
00:04:08.270 --> 00:04:08.890
&gt;&gt; Speaker 1: Yes.
&gt;&gt; Speaker 2: But

71
00:04:08.890 --> 00:04:13.310
if we did something like new error
it would get caught anywhere

72
00:04:14.410 --> 00:04:16.130
it showed up in that stack.

73
00:04:16.130 --> 00:04:20.420
&gt;&gt; Speaker 1: Anywhere,
if you just come in here and are like

74
00:04:20.420 --> 00:04:25.050
throw new error, this works the same way
it works in every java script scenario.

75
00:04:25.050 --> 00:04:27.670
It will stop the execution of
java script and throw an error.

76
00:04:27.670 --> 00:04:29.540
It will stop everything.

77
00:04:29.540 --> 00:04:31.600
But, we're not handling the error.

78
00:04:31.600 --> 00:04:32.690
We just don't want to throw an error,

79
00:04:32.690 --> 00:04:36.970
because now I mean this is bad on
a server, on the client this is okay, but

80
00:04:38.280 --> 00:04:42.360
on the server this is bad because now the
entire server is gonna stop and shut down.

81
00:04:42.360 --> 00:04:46.110
So now everybody that's connected to your
server is do ne, because one error threw.

82
00:04:46.110 --> 00:04:49.768
So you don't wanna just throw this
error out willy nilly like this,

83
00:04:49.768 --> 00:04:53.809
you wanna capture it in a place and then
maybe if you have a very well built API

84
00:04:53.809 --> 00:04:57.915
you are probably logging your errors or
sending them off to some error report

85
00:04:57.915 --> 00:05:00.699
service, and
having to do that every single time.

86
00:05:00.699 --> 00:05:03.876
If we were doing some long
calculation here like a DB query,

87
00:05:03.876 --> 00:05:07.310
we'll get into databases but
if we did like a DB query on all these

88
00:05:07.310 --> 00:05:10.891
functions here, every DB query has
a chance of throwing an error.

89
00:05:10.891 --> 00:05:13.686
We'd have to check for
the error, do our logging,

90
00:05:13.686 --> 00:05:17.131
do our error reporting in every
single one of these functions.

91
00:05:17.131 --> 00:05:19.311
Or we can say if an error go to next.

92
00:05:19.311 --> 00:05:21.471
And then do that one time here.

93
00:05:25.551 --> 00:05:26.811
&gt;&gt; Speaker 1: Let me
make a better example.

94
00:05:26.811 --> 00:05:31.671
So let's say we have var logg.

95
00:05:34.171 --> 00:05:35.011
&gt;&gt; Speaker 1: Error.

96
00:05:35.011 --> 00:05:35.811
It's a function.

97
00:05:40.741 --> 00:05:43.211
&gt;&gt; Speaker 1: My God, come here.

98
00:05:43.211 --> 00:05:44.350
So loggError's a function.

99
00:05:44.350 --> 00:05:45.310
It doesn't do anything,

100
00:05:45.310 --> 00:05:47.640
just assume that's it's some
function we use to log our errors.

101
00:05:49.810 --> 00:05:53.950
What I'm saying is right now this
is trivial we're not really doing

102
00:05:53.950 --> 00:05:57.260
anything in our calculations
that might throw errors, but

103
00:05:57.260 --> 00:05:59.390
just in case we do throw errors
like in database queries or

104
00:05:59.390 --> 00:06:03.515
whatever like I don't know let's say
db.query this is all hypothetical but

105
00:06:03.515 --> 00:06:09.380
db.query and it may give back an error,
it may give back the result.

106
00:06:11.390 --> 00:06:15.922
What I'm saying is, instead of
having to do something like this.

107
00:06:15.922 --> 00:06:20.390
If, you know error, you know,

108
00:06:20.390 --> 00:06:24.039
what was it, LoggError?

109
00:06:28.719 --> 00:06:30.310
&gt;&gt; Speaker 1: On every single one, right?

110
00:06:31.930 --> 00:06:35.390
Then we have to bring log error
into every single file, and

111
00:06:35.390 --> 00:06:38.810
every other single file cuz we're gonna
start making routes in other files.

112
00:06:38.810 --> 00:06:41.530
We have to make sure that we
bring this everywhere we go.

113
00:06:43.780 --> 00:06:46.116
Everywhere we're going to expect an error,
we have to bring this with us.

114
00:06:46.116 --> 00:06:47.510
So it's required everywhere we go.

115
00:06:48.910 --> 00:06:53.429
Instead of doing that,
we can just say, hit error,

116
00:06:53.429 --> 00:06:59.094
next error and then come down here and
say yeah, log the error.

117
00:07:03.994 --> 00:07:07.494
&gt;&gt; Speaker 1: And then now because we
were inside one of these routes, and

118
00:07:07.494 --> 00:07:10.934
we call it next with an error in it,
it's going to go here.

119
00:07:10.934 --> 00:07:13.994
&gt;&gt; Speaker 2: Okay, what if there was
something in-between line 27 and 28.

120
00:07:13.994 --> 00:07:16.585
&gt;&gt; Speaker 1: Good question, so
if there was something else here,

121
00:07:16.585 --> 00:07:20.630
as long as that something else is not an
error handler middleware, it will skip it.

122
00:07:21.860 --> 00:07:23.790
Right and we know it's a error handler
in the middleware cuz it's got these

123
00:07:23.790 --> 00:07:24.900
four args.

124
00:07:24.900 --> 00:07:28.320
So if I put like another error handler in
the middleware here what you can do as

125
00:07:28.320 --> 00:07:34.170
many error handling middlewares as
you want with error response or

126
00:07:34.170 --> 00:07:38.730
I'm sorry, request response next.

127
00:07:40.275 --> 00:07:41.520
It'll run this one first.

128
00:07:41.520 --> 00:07:43.139
And then inside of here I can do some,

129
00:07:43.139 --> 00:07:45.960
maybe you might have like one
error middleware that logs it, and

130
00:07:45.960 --> 00:07:49.617
then it'll call it next, then it will send
out to another middleware that will send

131
00:07:49.617 --> 00:07:52.125
it out to a server somewhere,
and then you call next, and

132
00:07:52.125 --> 00:07:56.310
you have another third error handling
middleware that responds to the client.

133
00:07:56.310 --> 00:07:58.857
So yeah, as many middleware as you want,
and just keep calling next,

134
00:07:58.857 --> 00:07:59.920
it will keep going.

135
00:07:59.920 --> 00:08:04.390
But you just have to make sure you
pass in an error object to the next

136
00:08:04.390 --> 00:08:06.430
to trigger the error middleware.

137
00:08:06.430 --> 00:08:09.600
For instance,
this one might do something and

138
00:08:09.600 --> 00:08:11.160
if i want it to go to the one below it.

139
00:08:11.160 --> 00:08:13.130
I just need to make sure I called next and

140
00:08:13.130 --> 00:08:16.030
pass in error and
then it'll go to the one below it.

141
00:08:16.030 --> 00:08:18.951
If I just called next without the error it
won't go to the one below, it just won't,

142
00:08:18.951 --> 00:08:20.120
here's nothing out there then.

143
00:08:22.550 --> 00:08:23.749
Yep.

144
00:08:23.749 --> 00:08:26.099
&gt;&gt; Speaker 3: I think they're
discussing like on line 40.

145
00:08:30.599 --> 00:08:35.143
&gt;&gt; Speaker 3: Let's see Rob was asking,
why is he using res.send

146
00:08:35.143 --> 00:08:39.279
instead of using next.error.req response?

147
00:08:39.279 --> 00:08:41.799
&gt;&gt; Speaker 1: Let me back track some,
make sure I'm on the right line, hold on.

148
00:08:41.799 --> 00:08:43.419
&gt;&gt; Speaker 3: Yeah,
that's the only thing I was.

149
00:08:50.559 --> 00:08:52.105
&gt;&gt; Speaker 1: Okay.
Line 40,

150
00:08:52.105 --> 00:08:55.839
yeah, my line numbers are messed up.

151
00:08:55.839 --> 00:08:56.839
Do you know?

152
00:08:56.839 --> 00:09:04.199
&gt;&gt; Speaker 3: So yeah, maybe it's now
if you were doing a response.send.

153
00:09:04.199 --> 00:09:05.935
&gt;&gt; Speaker 1: Over here?
&gt;&gt; Speaker 3: I think maybe on 30, yeah.

154
00:09:05.935 --> 00:09:08.919
&gt;&gt; Speaker 1: So why am I doing
a response.send instead of what?

155
00:09:08.919 --> 00:09:12.530
&gt;&gt; Speaker 3: Instead of
a next error request response.

156
00:09:14.030 --> 00:09:16.820
&gt;&gt; Speaker 1: Yeah, so
like I said you probably don't want to.

157
00:09:16.820 --> 00:09:19.360
I was saying, you'd probably want to
set a different status code here, or

158
00:09:19.360 --> 00:09:20.250
do an error.

159
00:09:20.250 --> 00:09:21.580
That's definitely more appropriate.

160
00:09:21.580 --> 00:09:24.650
I just did this just to end
the request response cycle.

161
00:09:24.650 --> 00:09:27.710
Just to be sure that
nothing's gonna happen.

162
00:09:27.710 --> 00:09:28.210
But yeah.

163
00:09:28.210 --> 00:09:31.870
In a real API, you definitely
want to either throw an error, or

164
00:09:31.870 --> 00:09:36.640
send the appropriate response header for
resource not available.

165
00:09:36.640 --> 00:09:38.760
Which is,
I forgot what status code that is.

166
00:09:38.760 --> 00:09:39.880
Four something.

167
00:09:39.880 --> 00:09:41.130
But yeah you want to do that instead.

168
00:09:41.130 --> 00:09:42.490
So yeah you could do
that in the next error.

169
00:09:42.490 --> 00:09:47.154
You could say, yeah you know, instead
of that I'm just gonna say next, and

170
00:09:47.154 --> 00:09:48.859
like you know, a new error.

171
00:09:51.679 --> 00:09:52.479
&gt;&gt; Speaker 1: Yeah, you could do that.

172
00:09:52.479 --> 00:09:55.429
The important thing to remember is that
you just need to make sure you end

173
00:09:55.429 --> 00:09:56.640
the cycle.

174
00:09:56.640 --> 00:10:01.148
But yeah in this situation I would either
just set the status to the appropriate

175
00:10:01.148 --> 00:10:04.972
header and send back a response or
I would call next with an error but

176
00:10:04.972 --> 00:10:06.900
I wouldn't just do rest.send.

177
00:10:09.680 --> 00:10:10.500
&gt;&gt; Speaker 1: Good question.

178
00:10:11.920 --> 00:10:14.112
&gt;&gt; Speaker 1: Okay so that's the param,
that's the error handler and

179
00:10:14.112 --> 00:10:17.560
then there was one more thing,
yeah that was this one the update id.

180
00:10:17.560 --> 00:10:22.510
So the update id, it's a middleware
function, all it does is it,

181
00:10:22.510 --> 00:10:25.610
first I'm checking to see if they didn't
already put an id property on there.

182
00:10:25.610 --> 00:10:30.930
If they didn't, I'll increment it and

183
00:10:30.930 --> 00:10:34.560
then I'll just attach it to the body and
then call next, that's it.

184
00:10:34.560 --> 00:10:37.250
I guess you didn't have
to do the if check,

185
00:10:37.250 --> 00:10:40.920
I guess if you just, yeah, guess you
really didn't have to do if check.

186
00:10:40.920 --> 00:10:42.780
This will override the check
that I had last time.

187
00:10:42.780 --> 00:10:45.860
So yeah, you could get rid of the if and
it'll be better, probably.

188
00:10:45.860 --> 00:10:46.880
But, the important thing is,

189
00:10:47.940 --> 00:10:53.780
I'm just adding an ID property to
req.body and then calling next.

190
00:10:53.780 --> 00:11:00.150
So, what happens is now when you do a,
where is that callback, right here.

191
00:11:00.150 --> 00:11:03.610
If you do a post request to lions,
first it's gonna call update ID

192
00:11:05.390 --> 00:11:10.310
which then will grab the req.body which
is the object that the client sent to us,

193
00:11:11.400 --> 00:11:14.010
attach an ID property to it,
and then call next.

194
00:11:14.010 --> 00:11:17.790
Which will come back down here and
then run this function and

195
00:11:17.790 --> 00:11:20.660
now this lion property has an ID
property on it which is is reg.body, so

196
00:11:20.660 --> 00:11:22.680
I can just push it in there and
send it back.

