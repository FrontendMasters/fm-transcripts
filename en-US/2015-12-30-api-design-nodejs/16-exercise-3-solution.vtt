WEBVTT

1
00:00:00.000 --> 00:00:04.178
[MUSIC]

2
00:00:04.178 --> 00:00:08.090
&gt;&gt; Speaker 1: For app.param,
again, this is going to, because,

3
00:00:08.090 --> 00:00:13.890
first we actually registered app.param,
before we registered these routes.

4
00:00:15.300 --> 00:00:16.460
Which is great.

5
00:00:16.460 --> 00:00:17.900
That's, adding it to the stack earlier.

6
00:00:17.900 --> 00:00:20.560
If we put this below the routes,
then it wouldn't work, regardless.

7
00:00:20.560 --> 00:00:21.650
So we add it before the routes.

8
00:00:24.520 --> 00:00:29.310
And then we have, it's looking for
the parameter of the name of id.

9
00:00:31.870 --> 00:00:34.180
And then it passed that value as
the fourth argument here, right.

10
00:00:34.180 --> 00:00:36.410
And then what we do is we
just do what we did before.

11
00:00:36.410 --> 00:00:38.910
We just find the line with that id.

12
00:00:38.910 --> 00:00:42.080
If it's the line,
attach it to direct.line then call next.

13
00:00:42.080 --> 00:00:44.240
If not then just nothing.

14
00:00:46.430 --> 00:00:50.480
Just send back to the client
like that's not a real id.

15
00:00:50.480 --> 00:00:55.209
So you set the status code
to something else, but yeah.

16
00:00:55.209 --> 00:00:57.449
Just respond back to
the client don't even go next.

17
00:01:03.709 --> 00:01:05.908
&gt;&gt; Speaker 1: The next one was create

18
00:01:05.908 --> 00:01:12.992
an error handler, so this is actually
wrong cuz it needs to be down here.

19
00:01:12.992 --> 00:01:14.480
Boom.

20
00:01:14.480 --> 00:01:16.040
So error handlers just
like we did last time.

21
00:01:17.320 --> 00:01:20.660
It's a middleware function
that takes in that required

22
00:01:20.660 --> 00:01:22.760
four arguments with
the error of the first one.

23
00:01:22.760 --> 00:01:26.290
And then just sends back an error here.
&gt;&gt; Speaker 2: Scott,

24
00:01:26.290 --> 00:01:30.690
what is it sending back on line
71 there with the error logic?

25
00:01:30.690 --> 00:01:32.590
&gt;&gt; Speaker 1: That's actually misspelled.

26
00:01:32.590 --> 00:01:33.710
Thank you, I didn't notice that.

27
00:01:33.710 --> 00:01:36.595
THat would send back a syntax error.

28
00:01:36.595 --> 00:01:38.206
[LAUGH] Well actually that would
throw a syntax error on the server,

29
00:01:38.206 --> 00:01:40.610
it wouldn't send back anything.
&gt;&gt; Speaker 2: I never get that either,

30
00:01:40.610 --> 00:01:43.340
i didnt know how to.
&gt;&gt; Speaker 1: Yeah I didnt hit it because

31
00:01:43.340 --> 00:01:44.430
it was up here.

32
00:01:44.430 --> 00:01:47.510
I didnt move it down.

33
00:01:47.510 --> 00:01:48.450
I should hit it now.

34
00:01:48.450 --> 00:01:50.580
So if you move it down,
throw an error at one of your routes.

35
00:01:50.580 --> 00:01:52.200
Maybe throw an error at param.

36
00:01:53.500 --> 00:01:56.680
As long as you pass an error into next.

37
00:01:56.680 --> 00:02:03.182
It will hit this.
&gt;&gt; Speaker 1: If

38
00:02:03.182 --> 00:02:04.610
you just throw an error it won't hit it.

39
00:02:04.610 --> 00:02:07.570
It will just throw an error.
&gt;&gt; Speaker 2: And can you explain again

40
00:02:07.570 --> 00:02:10.630
why it matters if you move that down?
&gt;&gt; Speaker 1: Yep.

41
00:02:10.630 --> 00:02:12.970
So imagine this, let me show you this.

42
00:02:12.970 --> 00:02:14.250
So I'm gonna make an array of middleware.

43
00:02:14.250 --> 00:02:18.609
And I'm just gonna call it cbs,
for call backs.

44
00:02:19.940 --> 00:02:23.090
And what happens is,

45
00:02:24.280 --> 00:02:29.990
when we say app.use, we're registering
callbacks inside this array.

46
00:02:29.990 --> 00:02:35.360
So the first one we do is we put Morgan in
there, because that's the first app.use.

47
00:02:35.360 --> 00:02:39.990
The second one is express.static.

48
00:02:39.990 --> 00:02:42.220
The next one is the body parser,
I'm just gonna put bp,

49
00:02:42.220 --> 00:02:46.798
the next one is the other body parser,
I'm just gonna put bp,

50
00:02:46.798 --> 00:02:51.920
and then app.param, just gonna put param.

51
00:02:54.120 --> 00:02:57.180
And then after that we have all these
routes here which have specific

52
00:02:57.180 --> 00:02:57.728
verbs on them.

53
00:02:57.728 --> 00:03:02.679
So they're not on the same level,
they're more like siblings.

54
00:03:02.679 --> 00:03:09.178
So I'm just going to put routes here
because they're all inside of here.

55
00:03:09.178 --> 00:03:12.863
So the get, the post, the delete the put,
they're all inside another array,

56
00:03:12.863 --> 00:03:15.290
they're like siblings
they're on the same level.

57
00:03:16.780 --> 00:03:20.490
So Morgan's first, this is second, this
is third, this is fourth, this is fifth.

58
00:03:21.490 --> 00:03:23.060
Any one of these can be sixth.

59
00:03:24.310 --> 00:03:27.390
And then the error messaging is down here.

60
00:03:28.650 --> 00:03:33.960
That's the seventh one in the stack,
so then the error handling.

61
00:03:33.960 --> 00:03:36.100
Now, when we're inside
of one of these routes,

62
00:03:36.100 --> 00:03:41.580
or even inside a param if we called
next on one of these with error in it,

63
00:03:41.580 --> 00:03:45.820
it'll go here.
&gt;&gt; Speaker 2: Whereas,

64
00:03:45.820 --> 00:03:50.690
how was it before when it was up?
&gt;&gt; Speaker 1: It was up like here,

65
00:03:51.980 --> 00:03:54.580
so if we were to call next on one of
these routes there's nothing out there,

66
00:03:54.580 --> 00:03:56.810
it just wouldn't do anything.

67
00:03:58.990 --> 00:03:59.640
There is no next.

68
00:03:59.640 --> 00:04:04.370
It would just hang probably, I don't
know what express does in that scenario.

69
00:04:04.370 --> 00:04:05.300
&gt;&gt; Speaker 2: And that's because you're

70
00:04:05.300 --> 00:04:08.750
using next to kind of funnel the error.
&gt;&gt; Speaker 1: Yes.

71
00:04:08.750 --> 00:04:10.460
&gt;&gt; Speaker 2: But if we did something like

72
00:04:10.460 --> 00:04:13.310
new error it would get caught anywhere

73
00:04:14.410 --> 00:04:16.450
it showed up in that stack.
&gt;&gt; Speaker 1: Anywhere,

74
00:04:16.450 --> 00:04:22.810
if you just come in here and
are like throw new error,

75
00:04:22.810 --> 00:04:25.050
this works the same way it works
in every java script scenario.

76
00:04:25.050 --> 00:04:27.670
It will stop the execution of
java script and throw an error.

77
00:04:27.670 --> 00:04:29.540
It will stop everything.

78
00:04:29.540 --> 00:04:31.600
But, we're not handling the error.

79
00:04:31.600 --> 00:04:32.690
We just don't want to throw an error,

80
00:04:32.690 --> 00:04:36.970
because now I mean this is bad on
a server, on the client this is okay, but

81
00:04:38.280 --> 00:04:42.360
on the server this is bad because now the
entire server is gonna stop and shut down.

82
00:04:42.360 --> 00:04:46.110
So now everybody that's connected to your
server is do ne, because one error threw.

83
00:04:46.110 --> 00:04:49.768
So you don't wanna just throw this
error out willy nilly like this,

84
00:04:49.768 --> 00:04:53.809
you wanna capture it in a place and then
maybe if you have a very well built API

85
00:04:53.809 --> 00:04:57.915
you are probably logging your errors or
sending them off to some error report

86
00:04:57.915 --> 00:05:00.699
service, and
having to do that every single time.

87
00:05:00.699 --> 00:05:03.876
If we were doing some long
calculation here like a DB query,

88
00:05:03.876 --> 00:05:07.310
we'll get into databases but
if we did like a DB query on all these

89
00:05:07.310 --> 00:05:10.891
functions here, every DB query has
a chance of throwing an error.

90
00:05:10.891 --> 00:05:13.686
We'd have to check for
the error, do our logging,

91
00:05:13.686 --> 00:05:17.131
do our error reporting in every
single one of these functions.

92
00:05:17.131 --> 00:05:19.311
Or we can say if an error go to next.

93
00:05:19.311 --> 00:05:25.702
And then do that one time here.
&gt;&gt; Speaker 1: Let

94
00:05:25.702 --> 00:05:26.811
me make a better example.

95
00:05:26.811 --> 00:05:35.011
So let's say we have var logg.
&gt;&gt; Speaker 1: Error.

96
00:05:35.011 --> 00:05:43.211
It's a function.
&gt;&gt; Speaker 1: My God, come here.

97
00:05:43.211 --> 00:05:44.350
So loggError's a function.

98
00:05:44.350 --> 00:05:45.310
It doesn't do anything,

99
00:05:45.310 --> 00:05:47.640
just assume that's it's some
function we use to log our errors.

100
00:05:49.810 --> 00:05:53.950
What I'm saying is right now this
is trivial we're not really doing

101
00:05:53.950 --> 00:05:57.260
anything in our calculations
that might throw errors, but

102
00:05:57.260 --> 00:05:59.390
just in case we do throw errors
like in database queries or

103
00:05:59.390 --> 00:06:03.515
whatever like I don't know let's say
db.query this is all hypothetical but

104
00:06:03.515 --> 00:06:09.380
db.query and it may give back an error,
it may give back the result.

105
00:06:11.390 --> 00:06:15.922
What I'm saying is, instead of
having to do something like this.

106
00:06:15.922 --> 00:06:22.210
If, you know error, you know, what was it,

107
00:06:22.210 --> 00:06:30.310
LoggError?
&gt;&gt; Speaker 1: On every single one, right?

108
00:06:31.930 --> 00:06:35.390
Then we have to bring log error
into every single file, and

109
00:06:35.390 --> 00:06:38.810
every other single file cuz we're gonna
start making routes in other files.

110
00:06:38.810 --> 00:06:41.530
We have to make sure that we
bring this everywhere we go.

111
00:06:43.780 --> 00:06:46.116
Everywhere we're going to expect an error,
we have to bring this with us.

112
00:06:46.116 --> 00:06:47.510
So it's required everywhere we go.

113
00:06:48.910 --> 00:06:53.429
Instead of doing that,
we can just say, hit error,

114
00:06:53.429 --> 00:06:57.743
next error and
then come down here and say yeah,

115
00:06:57.743 --> 00:07:04.204
log the error.
&gt;&gt; Speaker 1: And

116
00:07:04.204 --> 00:07:08.614
then now because we were inside one of
these routes, and we call it next with

117
00:07:08.614 --> 00:07:12.005
an error in it, it's going to go here.
&gt;&gt; Speaker 2: Okay, what if there was

118
00:07:12.005 --> 00:07:14.915
something in-between line 27 and 28.
&gt;&gt; Speaker 1: Good question, so

119
00:07:14.915 --> 00:07:16.585
if there was something else here,

120
00:07:16.585 --> 00:07:20.630
as long as that something else is not an
error handler middleware, it will skip it.

121
00:07:21.860 --> 00:07:23.790
Right and we know it's a error handler
in the middleware cuz it's got these

122
00:07:23.790 --> 00:07:24.900
four args.

123
00:07:24.900 --> 00:07:28.320
So if I put like another error handler in
the middleware here what you can do as

124
00:07:28.320 --> 00:07:34.170
many error handling middlewares as
you want with error response or

125
00:07:34.170 --> 00:07:38.730
I'm sorry, request response next.

126
00:07:40.275 --> 00:07:41.520
It'll run this one first.

127
00:07:41.520 --> 00:07:43.139
And then inside of here I can do some,

128
00:07:43.139 --> 00:07:45.960
maybe you might have like one
error middleware that logs it, and

129
00:07:45.960 --> 00:07:49.617
then it'll call it next, then it will send
out to another middleware that will send

130
00:07:49.617 --> 00:07:52.125
it out to a server somewhere,
and then you call next, and

131
00:07:52.125 --> 00:07:56.310
you have another third error handling
middleware that responds to the client.

132
00:07:56.310 --> 00:07:58.857
So yeah, as many middleware as you want,
and just keep calling next,

133
00:07:58.857 --> 00:07:59.920
it will keep going.

134
00:07:59.920 --> 00:08:04.390
But you just have to make sure you
pass in an error object to the next

135
00:08:04.390 --> 00:08:06.430
to trigger the error middleware.

136
00:08:06.430 --> 00:08:09.600
For instance,
this one might do something and

137
00:08:09.600 --> 00:08:11.160
if i want it to go to the one below it.

138
00:08:11.160 --> 00:08:13.130
I just need to make sure I called next and

139
00:08:13.130 --> 00:08:16.030
pass in error and
then it'll go to the one below it.

140
00:08:16.030 --> 00:08:18.951
If I just called next without the error it
won't go to the one below, it just won't,

141
00:08:18.951 --> 00:08:20.120
here's nothing out there then.

142
00:08:22.550 --> 00:08:25.157
Yep.
&gt;&gt; Speaker 3: I think they're discussing

143
00:08:25.157 --> 00:08:31.219
like on line 40.
&gt;&gt; Speaker 3: Let's

144
00:08:31.219 --> 00:08:35.866
see Rob was asking,
why is he using res.send instead

145
00:08:35.866 --> 00:08:40.179
of using next.error.req response?
&gt;&gt; Speaker 1: Let me back track some,

146
00:08:40.179 --> 00:08:42.112
make sure I'm on the right line, hold on.
&gt;&gt; Speaker 3: Yeah,

147
00:08:42.112 --> 00:08:50.940
that's the only thing I was.
&gt;&gt; Speaker 1: Okay.

148
00:08:50.940 --> 00:08:55.839
Line 40, yeah,
my line numbers are messed up.

149
00:08:55.839 --> 00:08:59.809
Do you know?
&gt;&gt; Speaker 3: So yeah, maybe it's now

150
00:08:59.809 --> 00:09:04.399
if you were doing a response.send.
&gt;&gt; Speaker 1: Over here?

151
00:09:04.399 --> 00:09:05.354
&gt;&gt; Speaker 3: I think maybe on 30,

152
00:09:05.354 --> 00:09:06.834
yeah.
&gt;&gt; Speaker 1: So why am I doing

153
00:09:06.834 --> 00:09:10.823
a response.send instead of what?
&gt;&gt; Speaker 3: Instead of a next error

154
00:09:10.823 --> 00:09:14.620
request response.
&gt;&gt; Speaker 1: Yeah, so

155
00:09:14.620 --> 00:09:16.820
like I said you probably don't want to.

156
00:09:16.820 --> 00:09:19.360
I was saying, you'd probably want to
set a different status code here, or

157
00:09:19.360 --> 00:09:20.250
do an error.

158
00:09:20.250 --> 00:09:21.580
That's definitely more appropriate.

159
00:09:21.580 --> 00:09:24.650
I just did this just to end
the request response cycle.

160
00:09:24.650 --> 00:09:27.710
Just to be sure that
nothing's gonna happen.

161
00:09:27.710 --> 00:09:28.210
But yeah.

162
00:09:28.210 --> 00:09:31.870
In a real API, you definitely
want to either throw an error, or

163
00:09:31.870 --> 00:09:36.640
send the appropriate response header for
resource not available.

164
00:09:36.640 --> 00:09:38.760
Which is,
I forgot what status code that is.

165
00:09:38.760 --> 00:09:39.880
Four something.

166
00:09:39.880 --> 00:09:41.130
But yeah you want to do that instead.

167
00:09:41.130 --> 00:09:42.490
So yeah you could do
that in the next error.

168
00:09:42.490 --> 00:09:47.154
You could say, yeah you know, instead
of that I'm just gonna say next, and

169
00:09:47.154 --> 00:09:52.479
like you know, a new error.
&gt;&gt; Speaker 1: Yeah, you could do that.

170
00:09:52.479 --> 00:09:55.429
The important thing to remember is that
you just need to make sure you end

171
00:09:55.429 --> 00:09:56.640
the cycle.

172
00:09:56.640 --> 00:10:01.148
But yeah in this situation I would either
just set the status to the appropriate

173
00:10:01.148 --> 00:10:04.972
header and send back a response or
I would call next with an error but

174
00:10:04.972 --> 00:10:10.500
I wouldn't just do rest.send.
&gt;&gt; Speaker 1: Good question.

175
00:10:11.920 --> 00:10:12.970
&gt;&gt; Speaker 1: Okay so that's the param,

176
00:10:12.970 --> 00:10:14.112
that's the error handler and

177
00:10:14.112 --> 00:10:17.560
then there was one more thing,
yeah that was this one the update id.

178
00:10:17.560 --> 00:10:22.510
So the update id, it's a middleware
function, all it does is it,

179
00:10:22.510 --> 00:10:25.610
first I'm checking to see if they didn't
already put an id property on there.

180
00:10:25.610 --> 00:10:30.930
If they didn't, I'll increment it and

181
00:10:30.930 --> 00:10:34.560
then I'll just attach it to the body and
then call next, that's it.

182
00:10:34.560 --> 00:10:37.250
I guess you didn't have
to do the if check,

183
00:10:37.250 --> 00:10:40.920
I guess if you just, yeah, guess you
really didn't have to do if check.

184
00:10:40.920 --> 00:10:42.780
This will override the check
that I had last time.

185
00:10:42.780 --> 00:10:45.860
So yeah, you could get rid of the if and
it'll be better, probably.

186
00:10:45.860 --> 00:10:46.880
But, the important thing is,

187
00:10:47.940 --> 00:10:53.780
I'm just adding an ID property to
req.body and then calling next.

188
00:10:53.780 --> 00:11:00.150
So, what happens is now when you do a,
where is that callback, right here.

189
00:11:00.150 --> 00:11:03.610
If you do a post request to lions,
first it's gonna call update ID

190
00:11:05.390 --> 00:11:10.310
which then will grab the req.body which
is the object that the client sent to us,

191
00:11:11.400 --> 00:11:14.010
attach an ID property to it,
and then call next.

192
00:11:14.010 --> 00:11:17.790
Which will come back down here and
then run this function and

193
00:11:17.790 --> 00:11:20.660
now this lion property has an ID
property on it which is is reg.body, so

194
00:11:20.660 --> 00:11:22.680
I can just push it in there and
send it back.

