WEBVTT

1
00:00:00.141 --> 00:00:10.141
&gt;&gt; [MUSIC]

2
00:00:39.264 --> 00:00:41.390
&gt;&gt; Speaker 1: So
let's just hop right into it then.

3
00:00:41.390 --> 00:00:43.660
Everybody should have the link for this.

4
00:00:44.880 --> 00:00:47.890
These are going to be our notes,
or our slides.

5
00:00:47.890 --> 00:00:51.542
I don't like to use actual slides,
I'm just worn out on slides, so

6
00:00:51.542 --> 00:00:55.897
I just made a website, with the notes on
it and that's what we're gonna use, and

7
00:00:55.897 --> 00:00:59.829
this will be here forever, probably
at the center README on the GitHub.

8
00:00:59.829 --> 00:01:01.886
README so you can look at it.

9
00:01:01.886 --> 00:01:05.916
So this is where we'll do our learnings
and then we'll have an app that we'll be

10
00:01:05.916 --> 00:01:09.180
building and then, as far as the app,
the repo is gonna be here.

11
00:01:09.180 --> 00:01:13.816
If you haven't got this go ahead and
fork it or clone it or

12
00:01:13.816 --> 00:01:17.971
whatever your process is for
getting your repos.

13
00:01:17.971 --> 00:01:23.780
Cool, so also I want to let you all know
to, if you have a question here on site,

14
00:01:23.780 --> 00:01:28.291
just ask me, don't feel like
you have to wait until the end.

15
00:01:28.291 --> 00:01:30.184
Just, I want to stay open.

16
00:01:30.184 --> 00:01:33.480
Ask me as many questions as you want,
don't feel like you are slowing me down

17
00:01:33.480 --> 00:01:37.880
and online, if you're joining us, just
hit up Mark with a K on the channel and

18
00:01:37.880 --> 00:01:40.380
just ask him and
he will either answer it himself or

19
00:01:40.380 --> 00:01:43.820
he'll ask me so just feel free to
ask as many questions as you can.

20
00:01:43.820 --> 00:01:48.136
If you think I made a mistake or if you
didn't quite understand what I said,

21
00:01:48.136 --> 00:01:50.548
don't let it go by, just totally ask me.

22
00:01:50.548 --> 00:01:55.707
Great, so what are we gonna be doing for
these next three days in this workshop?

23
00:01:55.707 --> 00:02:00.594
Well, like I said it's gonna be
around designing APIs with Node and

24
00:02:00.594 --> 00:02:03.060
Mongo, and how all that works.

25
00:02:03.060 --> 00:02:07.010
So, not only are we gonna be learning
how to design this stuff but

26
00:02:07.010 --> 00:02:08.570
we're also gonna be building it of course.

27
00:02:08.570 --> 00:02:12.430
We're gonna learn how to test it and we're
gonna be deploying it, which makes sense.

28
00:02:12.430 --> 00:02:15.130
It wouldn't really be fair if I
showed you how to design an API and

29
00:02:15.130 --> 00:02:17.135
not how to do the rest of that stuff.

30
00:02:17.135 --> 00:02:20.330
That wouldn't be fair, it wouldn't be
setting you up for anything practical.

31
00:02:20.330 --> 00:02:23.940
You should have some
experience with JavaScript.

32
00:02:23.940 --> 00:02:25.590
I hope everybody here knows JavaScript.

33
00:02:25.590 --> 00:02:28.390
If you don't know JavaScript
this might be painful for you.

34
00:02:29.466 --> 00:02:32.200
Unless you just, you have tons of
experience on the back end and

35
00:02:32.200 --> 00:02:35.440
you can get back end concepts and maybe
just work your way through JavaScript.

36
00:02:35.440 --> 00:02:37.510
But you should totally
know some JavaScript,

37
00:02:37.510 --> 00:02:39.500
a little Node experience
wouldn't hurt either.

38
00:02:39.500 --> 00:02:42.790
If you're brand new to Node and you have
no idea how Node works, that's fine,

39
00:02:42.790 --> 00:02:48.000
we can get through some of this stuff but
some Node experience would be great.

40
00:02:48.000 --> 00:02:50.870
But by the end of the workshop,
you will have built and

41
00:02:50.870 --> 00:02:55.010
deployed an API for
a blogging app that has authentication.

42
00:02:55.010 --> 00:02:58.900
So as far as the application itself,
you will not be building that.

43
00:02:58.900 --> 00:03:00.440
You actually built that
on another workshop.

44
00:03:00.440 --> 00:03:02.760
So that's built for you,
the front end, the client.

45
00:03:02.760 --> 00:03:04.860
You'll just be building
the server part for it.

46
00:03:04.860 --> 00:03:08.000
So don't worry about messing
around with the actual web app.

47
00:03:08.000 --> 00:03:08.669
We already built an app.

48
00:03:09.850 --> 00:03:10.860
Cool.
Any questions so far?

49
00:03:10.860 --> 00:03:13.510
All right.

50
00:03:14.680 --> 00:03:19.560
So, let's just do a quick
refresher on Node.

51
00:03:19.560 --> 00:03:20.950
Who in here has experience with Node?

52
00:03:20.950 --> 00:03:22.110
Let me see your hands.

53
00:03:24.490 --> 00:03:27.170
Okay.
A little bit, a little bit, none, okay.

54
00:03:27.170 --> 00:03:29.200
So we're gonna do a little
bit of a refresher on it.

55
00:03:29.200 --> 00:03:31.730
So I'm just gonna walk through
some examples, talk about

56
00:03:31.730 --> 00:03:35.240
some of the things that are different,
what it is and then move on from there.

57
00:03:35.240 --> 00:03:39.130
So, Nodejs is basically a way just to
run JavaScript outside the context of

58
00:03:39.130 --> 00:03:40.750
a browser, that's it.

59
00:03:40.750 --> 00:03:42.380
That's all it is.

60
00:03:42.380 --> 00:03:43.820
It's not a server framework,

61
00:03:43.820 --> 00:03:48.520
it's just, I want to be able to
run JavaScript outside of this.

62
00:03:48.520 --> 00:03:54.840
That's what Nodejs is, is using the same
V8 that Google Chrome is using.

63
00:03:55.870 --> 00:04:00.310
Or I mean, it's actually, Node is using
a different version of V8 but it is V8.

64
00:04:02.120 --> 00:04:03.840
So we can use Node for many things now,

65
00:04:03.840 --> 00:04:08.480
like tooling and servers, because we can
run it outside the context of the browser.

66
00:04:08.480 --> 00:04:12.170
Just like you would be able to with
something like Python or Ruby.

67
00:04:12.170 --> 00:04:14.210
So to get started,
if you have Node installed,

68
00:04:14.210 --> 00:04:17.670
you can just type in Node in your terminal
and you'll get a full JavaScript REPL.

69
00:04:17.670 --> 00:04:21.710
So what I mean by that is if you
go in your terminal with Node,

70
00:04:21.710 --> 00:04:25.480
if you just type in node here,
you now have a REPL here.

71
00:04:25.480 --> 00:04:29.511
This is JavaScript.
&gt;&gt; Speaker 1: All

72
00:04:29.511 --> 00:04:35.009
right.
&gt;&gt; Speaker 1: So

73
00:04:35.009 --> 00:04:36.570
you have a full JavaScript REPL here.

74
00:04:37.720 --> 00:04:42.030
So if you wanna be able to, it's the same
thing if you went into the Console inside

75
00:04:42.030 --> 00:04:47.479
of Chrome minus the browser API stuff,
the browser specific things.

76
00:04:50.120 --> 00:04:54.080
So that's how you know
you got Node working.

77
00:04:54.080 --> 00:04:57.340
Like I said, but
note this is just JavaScript but

78
00:04:57.340 --> 00:04:59.750
it's not in the context of the browser.

79
00:04:59.750 --> 00:05:01.740
By the way, if you see spelling errors and
stuff in here,

80
00:05:01.740 --> 00:05:03.961
I'm really bad at spelling so
just forgive me right now.

81
00:05:03.961 --> 00:05:10.170
[LAUGH] Like that, but yeah, so
it's just JavaScript but it is outside

82
00:05:10.170 --> 00:05:14.530
the contents of the browser so most of
the browser APIs do not exist in Node.

83
00:05:14.530 --> 00:05:19.750
I can't come into Node and start doing
things I would expect in a browser, yeah,

84
00:05:19.750 --> 00:05:25.350
let me just do a document.query selector.

85
00:05:25.350 --> 00:05:32.120
Right, that's not gonna work.
&gt;&gt; Speaker 1: Document is undefined.

86
00:05:32.120 --> 00:05:37.204
So this is not the browser, this is
just JavaScript outside the browser so

87
00:05:37.204 --> 00:05:39.098
those APIs aren't there.

88
00:05:39.098 --> 00:05:43.214
There are some that are there that
are very useful, like Console,

89
00:05:43.214 --> 00:05:47.847
that's still there, Console.log,
Console dot, all that good stuff,

90
00:05:47.847 --> 00:05:53.165
all that's still there, but a lot of the
other stuff isn't, so just remember that.

91
00:05:53.165 --> 00:05:55.461
Yes.
&gt;&gt; Speaker 2: A question came up, is there

92
00:05:55.461 --> 00:05:58.910
a way to add the browser APIs to Nodejs?
&gt;&gt; Speaker 1: There are polyfills out

93
00:05:58.910 --> 00:06:02.474
there that will mock some of the stuff and
in some cases, some libraries,

94
00:06:02.474 --> 00:06:07.570
because Node and because of this whole
universal JavaScript thing where people

95
00:06:07.570 --> 00:06:10.040
wanna run JavaScript on
both server side and

96
00:06:10.040 --> 00:06:13.340
client side, some code actually
needs those things mocked out.

97
00:06:13.340 --> 00:06:14.910
So yeah, there are mocks there,

98
00:06:14.910 --> 00:06:17.820
but realistically you wouldn't
even need that stuff.

99
00:06:17.820 --> 00:06:19.620
You wouldn't need it for execution.

100
00:06:19.620 --> 00:06:22.620
You might need it for a library to work.

101
00:06:22.620 --> 00:06:27.704
For instance, I had to tell somebody the
other day, there's this animation library

102
00:06:27.704 --> 00:06:32.310
that we use that's expecting these window,
or these browser APIs to exist.

103
00:06:32.310 --> 00:06:34.106
And if it don't it'll error out on Node.

104
00:06:34.106 --> 00:06:37.850
I would never use them in Node, but it
needs to be there in order for it to run.

105
00:06:37.850 --> 00:06:39.980
So, sometimes you have
to mock this stuff out.

106
00:06:39.980 --> 00:06:43.340
But people are getting to the point
where they're being more aware

107
00:06:43.340 --> 00:06:45.060
of where their code is gonna be ran.

108
00:06:45.060 --> 00:06:47.810
So they define their libraries
in something called a universal

109
00:06:47.810 --> 00:06:52.930
module definition, which will allow their
JavaScript to either run in the browser,

110
00:06:52.930 --> 00:06:58.160
in Node, and in any type of module format,
whether that's AMD or common JS.

111
00:06:58.160 --> 00:06:59.970
So that's the newer way
to build your libraries.

112
00:06:59.970 --> 00:07:02.910
So that's the thing that
people are starting to do now.

113
00:07:02.910 --> 00:07:05.850
If you download something that
isn't like that, something that's

114
00:07:05.850 --> 00:07:10.010
attached to the window, and you try to run
it in Node, probably gonna get an error.

115
00:07:10.010 --> 00:07:15.470
So you can chase the errors and
figure out the polyfill yourself or

116
00:07:15.470 --> 00:07:17.610
just convert it to Node yourself and
see what happens.

117
00:07:17.610 --> 00:07:21.391
But, yeah, there are some polyfills that
do exist, but people are moving away from

118
00:07:21.391 --> 00:07:26.982
that.
&gt;&gt; Speaker 1: So, if you were to install

119
00:07:26.982 --> 00:07:31.746
Node, you will also notice that you get
something called NPM which, if you look at

120
00:07:31.746 --> 00:07:36.960
it, you might think it stands for Node
Package Manager but it actually doesn't.

121
00:07:36.960 --> 00:07:38.060
It doesn't stand for Node Package Manager.

122
00:07:38.060 --> 00:07:40.330
I actually don't even
know what it stands for.

123
00:07:40.330 --> 00:07:43.940
So [LAUGH] it's not
Node Package Manager though.

124
00:07:43.940 --> 00:07:46.690
I think it's a pun that the NPM
people came up with, but

125
00:07:46.690 --> 00:07:51.160
it's not Node Package Manager,
which should be it.

126
00:07:51.160 --> 00:07:52.890
So, NPM is actually a really,

127
00:07:52.890 --> 00:07:56.370
really good package manager though,
as far as handling dependencies.

128
00:07:56.370 --> 00:07:58.240
In fact, it's probably one
of the best that I've seen,

129
00:07:58.240 --> 00:08:01.430
not even just related to JavaScript but
just in general.

130
00:08:01.430 --> 00:08:04.450
So, it's kind of like if you've ever
used Homebrew or something like that,

131
00:08:04.450 --> 00:08:08.140
it's very similar to that but just,
it might be a lot easier to use.

132
00:08:08.140 --> 00:08:10.190
So the way NPM works, like I said,

133
00:08:10.190 --> 00:08:13.550
it comes bundled with your
installation of Node.

134
00:08:13.550 --> 00:08:18.620
It uses this file called a package.json to
store meta data about your packages and

135
00:08:18.620 --> 00:08:21.350
what packages your package may need.

136
00:08:21.350 --> 00:08:24.780
So it just reads that file depending
on the command you give it.

137
00:08:24.780 --> 00:08:28.520
And that's how it knows what to install,
what do uninstall, what to update.

138
00:08:28.520 --> 00:08:30.350
It's just a file.

139
00:08:31.460 --> 00:08:33.820
So NPM is the standard.

140
00:08:33.820 --> 00:08:37.369
There really aren't any other package
managers you would use with Node.

141
00:08:37.369 --> 00:08:39.018
But they are two separate entities.

142
00:08:39.018 --> 00:08:41.790
NPM is its own entity,
Node is its own entity.

143
00:08:41.790 --> 00:08:45.010
They just happen to be working together
because they just work that way.

144
00:08:46.020 --> 00:08:47.530
So, yeah, you'll see a lot of,

145
00:08:47.530 --> 00:08:50.247
everything that we do as far as dependency
management will be through NPM.

146
00:08:51.330 --> 00:08:55.430
There are other package managers out
there like Bower and stuff like that.

147
00:08:55.430 --> 00:08:58.400
But Bower is a Node module that
you have to install with NPM.

148
00:08:58.400 --> 00:09:00.720
And that's more for
client site dependencies.

149
00:09:00.720 --> 00:09:01.830
So it's still all through NPM.

150
00:09:04.330 --> 00:09:07.310
So, all third party
modules when downloaded

151
00:09:07.310 --> 00:09:09.710
will be placed in a node
modules directory by default.

152
00:09:09.710 --> 00:09:13.130
So we use NPM to go download something.

153
00:09:13.130 --> 00:09:16.000
If there isn't already a node modules
directed at the root of our application,

154
00:09:16.000 --> 00:09:17.840
one will be created.

155
00:09:17.840 --> 00:09:21.970
And that's where all of our node
modules will be placed by default,

156
00:09:21.970 --> 00:09:22.960
in a node modules folder.

