WEBVTT

1
00:00:00.000 --> 00:00:03.970
[MUSIC]

2
00:00:03.970 --> 00:00:08.060
&gt;&gt; Speaker 1: So here's a basic
example of some arbitrary code.

3
00:00:08.060 --> 00:00:11.492
This is not the actual
code that you'll be doing.

4
00:00:11.492 --> 00:00:14.200
It's just how it may
look like in JavaScript.

5
00:00:14.200 --> 00:00:15.350
Say we have this user object.

6
00:00:15.350 --> 00:00:16.350
Let me bump the font up.

7
00:00:18.120 --> 00:00:19.350
There we go.

8
00:00:19.350 --> 00:00:20.640
Say we have this user.

9
00:00:20.640 --> 00:00:21.187
Whoa, where'd it go?

10
00:00:21.187 --> 00:00:22.010
There we go.

11
00:00:22.010 --> 00:00:24.890
Say we have these user objects, and
all it has is an ID, underscore ID.

12
00:00:24.890 --> 00:00:26.620
So it's like we have a Mongo.

13
00:00:26.620 --> 00:00:28.260
It's got an underscore ID,
that's it, nothing else on it.

14
00:00:29.360 --> 00:00:31.960
What we can do is, let's say we
have some library called JWT, and

15
00:00:31.960 --> 00:00:33.640
it has a sign method on it.

16
00:00:33.640 --> 00:00:38.260
What we can do is we can pass it the
object, and then we can pass it a secret.

17
00:00:38.260 --> 00:00:40.810
In this case,
the secret is just a string that I made.

18
00:00:40.810 --> 00:00:41.600
Shhhh, it's a secret.

19
00:00:43.470 --> 00:00:45.490
All right, and what that's going
to do is spit out a token.

20
00:00:45.490 --> 00:00:46.319
It's like, cool, here you go.

21
00:00:46.319 --> 00:00:47.161
Here's a token.

22
00:00:47.161 --> 00:00:53.329
It's just a hash, using,
I think it's a SHA-256, what is it?

23
00:00:53.329 --> 00:00:57.854
Yeah, using a SHA-256,
it's just gonna spit back that token,

24
00:00:57.854 --> 00:01:01.150
which is some long, crazy string, right?

25
00:01:01.150 --> 00:01:03.140
So, the bigger the payload,
the bigger the string.

26
00:01:03.140 --> 00:01:06.111
So, if there was more
than just an ID on here,

27
00:01:06.111 --> 00:01:09.650
let's say I wanted to sign
the entire user document.

28
00:01:09.650 --> 00:01:13.790
Let's say this was Facebook and we grabbed
the entire user object and we signed it.

29
00:01:13.790 --> 00:01:16.779
That string would be a couple kilobytes
and then you're passing that across

30
00:01:16.779 --> 00:01:19.970
the wire all the time, so you probably
don't wanna do that, all right?

31
00:01:19.970 --> 00:01:25.122
So, you wanna just sign
as little as you need.

32
00:01:25.122 --> 00:01:26.690
You don't need to sign the entire user.

33
00:01:28.250 --> 00:01:32.080
But just enough, I would say enough to
identify who the request is coming from,

34
00:01:32.080 --> 00:01:33.520
which ID is perfect for that.

35
00:01:33.520 --> 00:01:35.310
If you have an ID,
you can identify anybody.

36
00:01:36.490 --> 00:01:37.630
So that's why I put the ID.

37
00:01:37.630 --> 00:01:40.052
So that's gonna spit out a token.

38
00:01:42.787 --> 00:01:46.421
&gt;&gt; Speaker 1: And then later on in
the future, when that user who he gave

39
00:01:46.421 --> 00:01:50.480
the token to, was like okay now
can I update my profile now?

40
00:01:50.480 --> 00:01:54.275
Here's the update, I wanna update my
profile, and by the way, here's my token.

41
00:01:54.275 --> 00:01:57.429
So what that user would do is that client,
they have their token.

42
00:01:57.429 --> 00:01:58.700
They take it from local storage.

43
00:01:59.880 --> 00:02:00.728
They attach it to header.

44
00:02:00.728 --> 00:02:03.250
It's usually on authorization head,
the field.

45
00:02:03.250 --> 00:02:06.323
And then the server will put
the secret back in there

46
00:02:06.323 --> 00:02:09.122
with the token that this
the client gave them.

47
00:02:09.122 --> 00:02:11.350
And it'll spit back out the user object,
all right?

48
00:02:11.350 --> 00:02:18.716
It'll do the inverse
&gt;&gt; Speaker 1: So

49
00:02:18.716 --> 00:02:20.376
now we'll get that user object,

50
00:02:20.376 --> 00:02:22.930
which is just an object with
that ID property on it.

51
00:02:22.930 --> 00:02:25.722
Then we'll look in the database for
a user with that ID and

52
00:02:25.722 --> 00:02:28.920
we'll be like, okay, so yep,
the token this verified worked,

53
00:02:28.920 --> 00:02:33.010
because if this was a regular string, not
a real JSON Web Token, this would break.

54
00:02:33.010 --> 00:02:36.000
It would throw an error like,
this is not even a JSON Web Token, or

55
00:02:36.000 --> 00:02:38.548
the secret was wrong, or
it just didn't decode properly.

56
00:02:38.548 --> 00:02:39.455
Something's wrong.

57
00:02:39.455 --> 00:02:42.627
But if it passed and it went through
here now what we want to do is

58
00:02:42.627 --> 00:02:45.410
let's make sure that
this is an actual user.

59
00:02:45.410 --> 00:02:47.250
Right,cuz then again,
we have those edge cases, right?

60
00:02:47.250 --> 00:02:53.362
What if the user signed up a month ago and
our tokens don't expire for two months.

61
00:02:53.362 --> 00:02:57.900
And then during that month and
during that time between that month and

62
00:02:57.900 --> 00:03:01.970
this request here, we deleted the user or
something like that.

63
00:03:01.970 --> 00:03:05.880
So now if we don't do this check, we're
assuming that they're in the database, but

64
00:03:05.880 --> 00:03:06.930
they might not be in the database.

65
00:03:06.930 --> 00:03:08.630
So it's good to do this check to say,

66
00:03:08.630 --> 00:03:10.650
let's make sure this is
actually a real user.

67
00:03:10.650 --> 00:03:16.700
Or some person could have just got a JSON
Web Token from this website and was like,

68
00:03:16.700 --> 00:03:20.360
yeah I'm just gonna make a JSON Web Token
and I'm gonna send it to your server.

69
00:03:20.360 --> 00:03:24.745
And that would pass this check,
cuz it's a valid JSON Web Token,

70
00:03:24.745 --> 00:03:29.460
but it wouldn't have a valid user
ID on it that's in our database.

71
00:03:29.460 --> 00:03:30.242
All right, so it's another check.

72
00:03:36.179 --> 00:03:37.862
&gt;&gt; Speaker 1: Is everybody
following me there?

73
00:03:37.862 --> 00:03:41.920
So, if I just pass in a JSON Web Token,
the server knows the secret,

74
00:03:43.130 --> 00:03:47.850
this should work, but
that doesn't mean it's a valid user.

75
00:03:47.850 --> 00:03:49.210
Yep, Mark?

76
00:03:50.265 --> 00:03:51.270
&gt;&gt; Speaker 2: They're asking,

77
00:03:51.270 --> 00:03:54.000
what do you mean by the token
is probably on the off-header.

78
00:03:54.000 --> 00:03:56.260
Can you clarify probably?

79
00:03:56.260 --> 00:03:57.010
&gt;&gt; Speaker 1: Yeah, I will clarify.

80
00:03:57.010 --> 00:04:02.340
So usually what JSON Web Token,
let me go look at the spec for it.

81
00:04:03.440 --> 00:04:08.010
It's expecting the token to be
on the authorization header.

82
00:04:08.010 --> 00:04:11.410
So usually when you send it from the
client, whether that client is a iOS app,

83
00:04:11.410 --> 00:04:14.160
a web app, a TV, a smart watch.

84
00:04:14.160 --> 00:04:18.981
Right, if you're going to do HTTP request,
it's assuming that

85
00:04:18.981 --> 00:04:23.989
the token string is gonna be on
the authorization header property.

86
00:04:23.989 --> 00:04:28.929
You can also, I'm not sure if this is
part of the spec or not, but it might be,

87
00:04:28.929 --> 00:04:33.890
you can also put it on the query
string with the name of access_token.

88
00:04:33.890 --> 00:04:35.440
And that can also be the token as well.

89
00:04:35.440 --> 00:04:37.940
But usually it's looking for
the authorization header.

90
00:04:37.940 --> 00:04:38.490
Yes.

91
00:04:38.490 --> 00:04:44.142
&gt;&gt; Speaker 3: So when you do verifying
could user end up being undefined or

92
00:04:44.142 --> 00:04:51.731
will it always have some value if it's
a valid token or if it's a JSON Web Token?

93
00:04:51.731 --> 00:04:56.200
&gt;&gt; Speaker 1: Well now, so
this has to be a valid web token, right?

94
00:04:56.200 --> 00:05:00.120
And it has to have been signed
with the same secret, right?

95
00:05:00.120 --> 00:05:02.560
So let's say somehow some
person got hold of your secret.

96
00:05:02.560 --> 00:05:04.290
So they knew what your secret was.

97
00:05:04.290 --> 00:05:07.439
So they went on this
website with your secret,

98
00:05:07.439 --> 00:05:10.116
they typed it in down here, all right?

99
00:05:10.116 --> 00:05:10.616
&gt;&gt; Speaker 2: Yeah.

100
00:05:11.730 --> 00:05:12.250
&gt;&gt; Speaker 1: It's like, cool.

101
00:05:13.800 --> 00:05:15.121
I'm going to make a new secret here.

102
00:05:17.856 --> 00:05:19.110
&gt;&gt; Speaker 1: How do you
make a new secret here?

103
00:05:20.510 --> 00:05:22.278
Hey.

104
00:05:22.278 --> 00:05:26.820
And then I'm just gonna grab this token
and go to your database, do a request.

105
00:05:26.820 --> 00:05:29.960
What's gonna happen now is,
this will work.

106
00:05:29.960 --> 00:05:32.770
So, it's like, cool,
that's a valid JSON Web Token.

107
00:05:32.770 --> 00:05:36.585
And it decoded properly because it
was signed with the same secret.

108
00:05:36.585 --> 00:05:37.268
So it came back.

109
00:05:37.268 --> 00:05:38.360
It was great.

110
00:05:38.360 --> 00:05:40.478
If it was signed with a different secret,
it wouldn't work.

111
00:05:40.478 --> 00:05:43.841
Right, but it was signed with the same
secret, so it is the same, so

112
00:05:43.841 --> 00:05:47.990
then it'll spit back that object, which
in this case, is this object right here.

113
00:05:49.650 --> 00:05:51.900
For this object, first of all it
doesn't have an ID property on it,

114
00:05:51.900 --> 00:05:52.650
but let's say it did.

115
00:05:52.650 --> 00:05:53.737
Lets put a ID property on it.

116
00:05:57.440 --> 00:05:59.100
&gt;&gt; Speaker 1: Now we have an ID.

117
00:05:59.100 --> 00:06:01.575
We put a ID property on this thing.

118
00:06:01.575 --> 00:06:03.893
&gt;&gt; Speaker 2: Do you have
to put quotes around ID?

119
00:06:03.893 --> 00:06:04.911
&gt;&gt; Speaker 1: Yeah, probably, yep.

120
00:06:09.985 --> 00:06:11.187
&gt;&gt; Speaker 1: All right,
single quotes here.

121
00:06:13.469 --> 00:06:14.455
&gt;&gt; Speaker 1: There we go.

122
00:06:14.455 --> 00:06:16.880
So, now I put a ID property on it.

123
00:06:16.880 --> 00:06:20.070
But that's not a real ID in my database.

124
00:06:20.070 --> 00:06:22.587
Right, so that passed all this.

125
00:06:22.587 --> 00:06:27.320
Had the same secret, it's a valid token,
spit back an object.

126
00:06:27.320 --> 00:06:30.370
It even had an underscore ID property
on it that I can check here.

127
00:06:30.370 --> 00:06:32.692
But my database doesn't know what
that user is, so it's just like,

128
00:06:32.692 --> 00:06:34.170
nope, nevermind.

129
00:06:34.170 --> 00:06:38.483
It's like the equivalent of
trying to log into a website

130
00:06:38.483 --> 00:06:41.434
with a email that isn't registered.

131
00:06:41.434 --> 00:06:43.800
All right, it's just like,
we just don't have that email.

132
00:06:43.800 --> 00:06:46.670
There's no email that exists,
so, you can't even sign in.

133
00:06:46.670 --> 00:06:47.740
That's what you're trying to do here.

134
00:06:47.740 --> 00:06:50.679
It's like you're trying to sign
in with an ID that doesn't exist.

135
00:06:50.679 --> 00:06:51.580
It's like, you can't.

136
00:06:51.580 --> 00:06:52.390
We don't have that ID.

137
00:06:53.400 --> 00:06:55.800
Everything else was great except for
the ID.

138
00:06:55.800 --> 00:06:59.995
&gt;&gt; Speaker 2: So, in our code we would
wrap that JWT verify into tricatch or

139
00:06:59.995 --> 00:07:00.910
something?

140
00:07:02.090 --> 00:07:03.150
&gt;&gt; Speaker 1: Yeah-
&gt;&gt; Speaker 2: It wouldn't go

141
00:07:03.150 --> 00:07:05.040
down to the find by ID if it failed.

142
00:07:05.040 --> 00:07:06.490
&gt;&gt; Speaker 1: Exactly so
you would do a tricatch there.

143
00:07:06.490 --> 00:07:08.960
But we are going to use libraries
to abstract all that away so

144
00:07:08.960 --> 00:07:09.690
we don't have to.

145
00:07:09.690 --> 00:07:10.280
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Speaker 1: Yeah.

146
00:07:11.540 --> 00:07:12.380
Yep, Mark.

147
00:07:12.380 --> 00:07:13.530
&gt;&gt; Speaker 2: How do
you expire the tokens?

148
00:07:13.530 --> 00:07:16.080
Do you just include a timestamp
in the object you're assigning?

149
00:07:16.080 --> 00:07:16.830
&gt;&gt; Speaker 1: Good question.

150
00:07:16.830 --> 00:07:20.430
So tokens can be expired, and
that depends on the library you're using.

151
00:07:20.430 --> 00:07:23.879
We're gonna get into that,
because we're gonna do that in R Code,

152
00:07:23.879 --> 00:07:28.372
but depending on what lab we're using, in
this case, we'll be using JSON Web Tokens.

153
00:07:28.372 --> 00:07:31.919
You can just pass in an object that has
a property on it that says expires in

154
00:07:31.919 --> 00:07:37.080
minutes or expires in seconds, and pass in
a number, and that's when it'll expire.

155
00:07:37.080 --> 00:07:40.338
So, it's pretty simple just pass in
an options thing that tells you.

156
00:07:44.498 --> 00:07:47.902
&gt;&gt; Speaker 2: And then they're wondering
if JWT is included in Node, or

157
00:07:47.902 --> 00:07:50.350
do you have to-
&gt;&gt; Speaker 1: It is not included in Node.

158
00:07:50.350 --> 00:07:51.860
We have to npm install it.

159
00:07:51.860 --> 00:07:53.404
It is not a default thing.

160
00:07:53.404 --> 00:07:56.640
And there is like tons of
JSON Web Token libraries out there.

161
00:07:56.640 --> 00:07:58.930
Again, this website right here,
if you scroll down.

162
00:07:59.940 --> 00:08:04.712
For any language that you possibly might
use, it'll tell you the library that you

163
00:08:04.712 --> 00:08:08.536
should use and what security issues
that library may or may have.

164
00:08:08.536 --> 00:08:11.100
It'll go into the algorithm
specs on that library.

165
00:08:11.100 --> 00:08:14.770
If you're into that stuff,
it'll tell you all the stuff.

166
00:08:14.770 --> 00:08:17.450
So for the one,
that we'll be using is JSON Web Tokens.

167
00:08:17.450 --> 00:08:18.710
They'll tell you how to install it too.

168
00:08:18.710 --> 00:08:20.600
It's like, okay,
this is how you install it as well.

169
00:08:21.752 --> 00:08:23.460
This is a really good resource for
JSON Web Tokens.

170
00:08:24.520 --> 00:08:26.634
They've got like every single
library you can think of down here.

