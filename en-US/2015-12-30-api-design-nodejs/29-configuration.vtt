WEBVTT

1
00:00:00.000 --> 00:00:03.921
[MUSIC]

2
00:00:03.921 --> 00:00:06.130
&gt;&gt; Speaker 1: So
on to like configuration now.

3
00:00:06.130 --> 00:00:10.540
We can use process.env.NODE_ENV
like I was saying before,

4
00:00:10.540 --> 00:00:13.370
that variable to tell our application
what environment it's running in.

5
00:00:13.370 --> 00:00:16.450
And the possible options
that we use as a community

6
00:00:16.450 --> 00:00:19.540
is gonna be some variance of these three,
but usually these three.

7
00:00:19.540 --> 00:00:24.090
So it's either you're in testing,
development, or production.

8
00:00:24.090 --> 00:00:27.530
By default you're in nothing so
you have to set that default yourself.

9
00:00:27.530 --> 00:00:30.870
So it's a good practice,
or at least in my opinion,

10
00:00:30.870 --> 00:00:33.440
to just set it to development by default.

11
00:00:33.440 --> 00:00:36.787
So just assume you're always in
development until you specifically

12
00:00:36.787 --> 00:00:41.659
change it from production or testing.
&gt;&gt; Speaker 1: So,

13
00:00:41.659 --> 00:00:43.300
those are the common ones.

14
00:00:43.300 --> 00:00:46.710
Depending on the ENV,
we can change things in our app,

15
00:00:46.710 --> 00:00:50.720
like database URLs or
toggle logging on and off.

16
00:00:50.720 --> 00:00:53.730
That way we don't have to go in and erase
every single, where's that console log.

17
00:00:53.730 --> 00:00:55.390
I think I'll find it and erase it.

18
00:00:55.390 --> 00:00:56.730
You can just turn it off

19
00:00:56.730 --> 00:00:59.010
with an environment variable
like turn off all logging.

20
00:00:59.010 --> 00:01:00.350
All right.

21
00:01:00.350 --> 00:01:03.310
We can also set and
reference other environment variables.

22
00:01:03.310 --> 00:01:09.400
So if I wanted to get the secret token for
Facebook so I can have

23
00:01:09.400 --> 00:01:13.140
it work on my authentication scheme, you
can do that, right, environment variables.

24
00:01:13.140 --> 00:01:16.410
So instead of searching everywhere for
these values to change, so for instance,

25
00:01:16.410 --> 00:01:19.900
if I just sprinkled these values all
the way through our server, right,

26
00:01:19.900 --> 00:01:23.290
and then now I had to go change them
like if I was like all right, logging,

27
00:01:23.290 --> 00:01:27.470
you're going to be enabled if node E and
V is production.

28
00:01:27.470 --> 00:01:29.530
And then another file,
I did the same thing for logging.

29
00:01:29.530 --> 00:01:31.430
And another file,
I did the same thing for logging.

30
00:01:31.430 --> 00:01:35.550
And now, we're at testing, so right now
I got to go change all of this stuff.

31
00:01:35.550 --> 00:01:38.800
It'd be great if we could
just put this in one place.

32
00:01:38.800 --> 00:01:40.779
So what we're going to do
is have a config file.

33
00:01:42.030 --> 00:01:45.470
Just one file that sets up all these
variables inside of our application.

34
00:01:45.470 --> 00:01:47.960
Now files is gonna export an object.

35
00:01:47.960 --> 00:01:49.710
That will just pass an object
around our application.

36
00:01:49.710 --> 00:01:53.480
And that's gonna tell our application
about what it can and cannot do,

37
00:01:53.480 --> 00:01:56.100
and what certain values are,
and what they are not.

38
00:01:58.170 --> 00:02:02.450
So depending on the NODE_ENV,
we can require other config files in.

39
00:02:02.450 --> 00:02:04.470
And merge the two together so
our app can use it.

40
00:02:04.470 --> 00:02:08.290
So I'll show you what that looks like and
why that's important.

41
00:02:08.290 --> 00:02:09.570
So here's our config file.

42
00:02:09.570 --> 00:02:10.770
It might look something like this.

43
00:02:10.770 --> 00:02:12.730
Yeah, question.
&gt;&gt; Speaker 2: The question is why are we

44
00:02:12.730 --> 00:02:17.400
using service oriented instead of MVC?
&gt;&gt; Speaker 1: Good question.

45
00:02:17.400 --> 00:02:20.910
There really isn't a specific
reason other than,

46
00:02:20.910 --> 00:02:23.520
one I really like service
oriented approach.

47
00:02:23.520 --> 00:02:27.040
It's very familiar if you've
built on the front end for

48
00:02:27.040 --> 00:02:31.110
things like a components with like React
or Angular or anything like that web

49
00:02:31.110 --> 00:02:35.700
components it favors that and
the Node is actually moving towards that.

50
00:02:35.700 --> 00:02:40.310
So like there's big push for different
types like real time applications with

51
00:02:40.310 --> 00:02:43.460
Node so using things like Falcor or

52
00:02:43.460 --> 00:02:48.390
GraphQL or even using Flux architecture on
the back end, it just makes more sense for

53
00:02:48.390 --> 00:02:51.390
us to reason about our
application in this way.

54
00:02:51.390 --> 00:02:53.560
But there's definitely nothing
wrong with the traditional way,

55
00:02:53.560 --> 00:02:55.080
I still see that happening.

56
00:02:55.080 --> 00:02:58.266
So frameworks like JS still use that,
there's nothing wrong with it.

57
00:02:58.266 --> 00:03:00.796
Just like there is nothing wrong
if you're on the front end and

58
00:03:00.796 --> 00:03:03.766
you wanted to organize your code like
put all my JavaScript in this file,

59
00:03:03.766 --> 00:03:06.070
put all my CSS in this file,
put all my HTML in this file.

60
00:03:06.070 --> 00:03:08.390
There's nothing wrong with that,
it'll work.

61
00:03:08.390 --> 00:03:11.950
But, in my opinion it's a lot easier
to just have everything that belongs to

62
00:03:11.950 --> 00:03:13.060
something in one place.

63
00:03:13.060 --> 00:03:15.470
That way I don't have to go
look a million places for it.

64
00:03:15.470 --> 00:03:19.410
It also allows me to, if i just want
to not use that feature anymore I

65
00:03:19.410 --> 00:03:22.070
can just go to whatever is using it and
comment it out and

66
00:03:22.070 --> 00:03:25.800
it will still work, everything will
still work it just won't that feature.

67
00:03:25.800 --> 00:03:29.550
Versus if I wanted to turn it off in
the other approach I'd have to go in many

68
00:03:29.550 --> 00:03:33.690
different places to find where it's being
used and that could be kind of hard.

69
00:03:33.690 --> 00:03:36.450
So this is pros and cons for both
approaches but I think this is a better

70
00:03:36.450 --> 00:03:41.550
approach and because Express has those
mini routers it kind of like encourages

71
00:03:41.550 --> 00:03:48.390
you to set it up this way.
&gt;&gt; Speaker 1: Any other questions on that?

72
00:03:50.800 --> 00:03:52.990
Great so we have this config object so
it looks something like this.

73
00:03:52.990 --> 00:03:55.320
We'll have like a ENV which is
like what environment are we in.

74
00:03:55.320 --> 00:03:58.480
So remember I said by default
NODE_ENV is nothing so

75
00:03:58.480 --> 00:04:00.240
you should set it to something and
that's what I'm doing here.

76
00:04:02.040 --> 00:04:04.319
So ENV is either gonna be process ENV or
development.

77
00:04:08.150 --> 00:04:11.020
Logging I don't know maybe
turn it off by default,

78
00:04:11.020 --> 00:04:14.880
and then we have like some secrets
we'll have like a GitHub token or

79
00:04:14.880 --> 00:04:16.460
a JSON web token secret
something like that.

80
00:04:16.460 --> 00:04:19.130
So this is just an example of like
what a config file may look like.

81
00:04:19.130 --> 00:04:21.950
It's depending on what your app needs but
very important things that we use

82
00:04:21.950 --> 00:04:24.770
throughout applications we'd
store in like a specific file.

83
00:04:24.770 --> 00:04:28.880
Right notice I didn't hard code the actual
secret GITHUB_TOKEN in here, or

84
00:04:28.880 --> 00:04:32.460
the secret JSON web token in here, cuz
this file's gonna be in source control, so

85
00:04:32.460 --> 00:04:33.070
I didn't hard code it in.

86
00:04:33.070 --> 00:04:36.020
It's gonna be passing through
the environment, all right?

87
00:04:37.410 --> 00:04:40.650
But I also don't wanna go around every
single file and have to write this out.

88
00:04:40.650 --> 00:04:41.420
I need the GITHUB_TOKEN.

89
00:04:41.420 --> 00:04:43.070
Let me write process.env.GITHUB_TOKEN.

90
00:04:43.070 --> 00:04:44.440
I don't wanna write that out, right?

91
00:04:44.440 --> 00:04:48.224
So I could just say,
just give me config.secret.GITHUB_TOKEN.

92
00:04:49.790 --> 00:04:51.835
Which is actually just as long.

93
00:04:51.835 --> 00:04:53.661
[LAUGH] Right.

94
00:04:53.661 --> 00:05:00.661
But at least I know it's in one place.
&gt;&gt; Speaker 1: So

95
00:05:00.661 --> 00:05:03.896
the part that I was talking about as far
as like using the environment variable

96
00:05:03.896 --> 00:05:06.733
to load up different configurations,
this is really cool I think,

97
00:05:06.733 --> 00:05:09.916
this is a practice that I learned,
I can't remember where I learned it, but

98
00:05:09.916 --> 00:05:12.490
I adopted it and I went with it and
I really liked it.

99
00:05:12.490 --> 00:05:14.762
And I'm starting to see
a lot of people use it too.

100
00:05:14.762 --> 00:05:16.998
What we can use this approach,

101
00:05:16.998 --> 00:05:21.090
you can think of this config
object as the base config.

102
00:05:21.090 --> 00:05:25.055
This is the config that it starts off
with, but depending on the environment.

103
00:05:25.055 --> 00:05:28.720
We'll load in a different config object
that will override properties on

104
00:05:28.720 --> 00:05:30.630
here, right?

105
00:05:30.630 --> 00:05:34.130
So depending on what the no EMV is,
whether it's development, testing or

106
00:05:34.130 --> 00:05:36.270
production, we'll have an equivalent file.

107
00:05:36.270 --> 00:05:41.446
So this is config.js, and
then we'll have development.js and

108
00:05:41.446 --> 00:05:44.306
testing.js and production.js.

109
00:05:44.306 --> 00:05:46.990
And because those names of the files

110
00:05:46.990 --> 00:05:50.550
line up with the name of
the environments that we're in.

111
00:05:50.550 --> 00:05:54.050
We can just use the environment
to require the appropriate file.

112
00:05:54.050 --> 00:05:56.390
That way we don't have to
guess which file to require.

113
00:05:56.390 --> 00:06:01.240
So we can just say require the
process.NODE_ENV, which could be testing,

114
00:06:01.240 --> 00:06:02.730
development or production.

115
00:06:02.730 --> 00:06:05.497
And since we have that
testing.js development.js and

116
00:06:05.497 --> 00:06:08.498
production.js, it's gonna require one of
those files, depending on the environment.

117
00:06:08.498 --> 00:06:12.770
All right.
&gt;&gt; Speaker 1: Just like this.

118
00:06:12.770 --> 00:06:14.690
So you can put variables
inside of require statement.

119
00:06:17.130 --> 00:06:19.220
So it's like I wanna require
whatever the environment is.

120
00:06:19.220 --> 00:06:24.189
So this might be requiretesting.js,
or requireproduction.js, or

121
00:06:24.189 --> 00:06:26.289
requiredevelopment.js.

122
00:06:26.289 --> 00:06:29.530
And that itself is gonna be
another object just like this

123
00:06:29.530 --> 00:06:32.630
that has different properties on it,
and maybe some of the same properties.

124
00:06:32.630 --> 00:06:35.300
Maybe it will overwrite
logging to be true.

125
00:06:35.300 --> 00:06:37.090
So in development,
we definitely want logging to be true.

126
00:06:37.090 --> 00:06:39.970
We wanna, if we write a log,
we wanna see the development.

127
00:06:39.970 --> 00:06:43.030
So maybe in development.js,
it will say logging true.

128
00:06:43.030 --> 00:06:44.760
And that will override this.

129
00:06:44.760 --> 00:06:46.290
All right, so then we do that.

130
00:06:46.290 --> 00:06:47.690
And then what we do is we just merge them.

131
00:06:56.071 --> 00:06:56.631
&gt;&gt; Speaker 1: So actually,

132
00:06:56.631 --> 00:06:57.658
now that I think about it,

133
00:06:57.658 --> 00:07:00.710
assign probably wouldn't work here
because it doesn't go all the way deep.

134
00:07:00.710 --> 00:07:03.870
You probably use something like
underscore merge but, you get the point.

135
00:07:03.870 --> 00:07:05.270
We need to extend these objects together.

136
00:07:05.270 --> 00:07:10.050
So the way this, if you don't know what
assign or extend how that works is every,

137
00:07:10.050 --> 00:07:13.690
so what happens is every argument after
the first argument, every object, it'll

138
00:07:13.690 --> 00:07:17.970
take it and put, and it will merge the
properties onto the object on the left.

139
00:07:17.970 --> 00:07:20.330
So I can put as many objects
as I want over here and

140
00:07:20.330 --> 00:07:22.690
it will just keep putting
them on this object and

141
00:07:22.690 --> 00:07:32.276
then return it.
&gt;&gt; Speaker 1: So

142
00:07:32.276 --> 00:07:34.906
that's like ENV will take
precedent over this config and

143
00:07:34.906 --> 00:07:37.780
it will overwrite properties on it and
then we'll export it.

144
00:07:37.780 --> 00:07:42.454
So now our application now has this new
object with all these properties on it and

145
00:07:42.454 --> 00:07:47.013
we can use these flags or these values
in here to do things in our application.

146
00:07:47.013 --> 00:07:52.291
Any questions?
&gt;&gt; Speaker 1: You're gonna see this and

147
00:07:52.291 --> 00:08:00.454
you're gonna do this so.
&gt;&gt; Speaker 1: Okay.

148
00:08:00.454 --> 00:08:03.807
So.
&gt;&gt; Speaker 1: For

149
00:08:03.807 --> 00:08:07.530
our blog application which is
what we're going to be making.

150
00:08:07.530 --> 00:08:09.460
The server part at least,
not the front end.

151
00:08:09.460 --> 00:08:10.270
The front end's already made.

152
00:08:11.300 --> 00:08:12.410
We made it on Monday and Tuesday.

153
00:08:13.680 --> 00:08:19.070
We can start thinking about what
resources we would need, to make and

154
00:08:19.070 --> 00:08:20.650
start planning out the resources.

155
00:08:22.350 --> 00:08:25.410
So think about routes,
models, controllers, right?

156
00:08:25.410 --> 00:08:29.830
So we can plan out the routes so
that we can start organizing it.

157
00:08:29.830 --> 00:08:34.880
So for the resources we'll be
using just very minimal resources.

158
00:08:34.880 --> 00:08:36.860
We're not gonna get too
involved with this API so

159
00:08:36.860 --> 00:08:39.550
as far as resources goes we're
only gonna be using three.

160
00:08:39.550 --> 00:08:43.570
We're gonna have users we're gonna
have posts, which are the actual blog

161
00:08:43.570 --> 00:08:47.720
posts themselves, and then we'll
have categories, that way we can

162
00:08:47.720 --> 00:08:50.900
organize our posts like this post has
this category like a simple blog.

163
00:08:50.900 --> 00:08:52.300
So those are the only
resources we are going to use.

164
00:08:52.300 --> 00:08:53.060
We're not going to get too crazy.

165
00:08:53.060 --> 00:08:54.290
There are so many things.

166
00:08:54.290 --> 00:08:58.380
We can have tags, we can have all
different types of stuff in a blog.

167
00:08:58.380 --> 00:09:01.000
But we're gonna have users
who can create posts.

168
00:09:01.000 --> 00:09:04.430
We'll have posts that belong to users and
have many categories.

169
00:09:04.430 --> 00:09:05.770
Then we'll have categories that don't

170
00:09:05.770 --> 00:09:10.077
belong to anything.
&gt;&gt; Speaker 1: So

171
00:09:10.077 --> 00:09:14.844
knowing what we know about REST and
API design so far, we know that we will be

172
00:09:14.844 --> 00:09:19.760
creating CRUD routes for these
resources using middleware and routers.

173
00:09:19.760 --> 00:09:21.510
Just like we did with the lions and
tigers.

174
00:09:21.510 --> 00:09:23.120
So we have our resources.

175
00:09:23.120 --> 00:09:26.670
We know we will create CRUD routes, and we
know for sure that there are at least five

176
00:09:26.670 --> 00:09:28.580
CRUD routes we'll make for
each one of these resources.

177
00:09:29.970 --> 00:09:33.120
So if we just do the math,
that's 15 routes.

178
00:09:33.120 --> 00:09:34.269
We know that just by that.

179
00:09:36.280 --> 00:09:37.980
Will we ever use all those routes?

180
00:09:37.980 --> 00:09:38.780
No, but it's nice.

181
00:09:38.780 --> 00:09:41.500
We should probably start with them and
then we'll take back.

182
00:09:41.500 --> 00:09:44.680
So, for instance, we don't want
the ability to go in and create users.

183
00:09:44.680 --> 00:09:46.280
Right?
You'd be God.

184
00:09:46.280 --> 00:09:47.610
Right?
You don't want to go in and

185
00:09:47.610 --> 00:09:48.330
just start making users.

186
00:09:48.330 --> 00:09:49.710
You need some type of authentication for
that.

187
00:09:49.710 --> 00:09:50.900
You need to sign up.

188
00:09:50.900 --> 00:09:54.560
Or be invited or something like that
like you can't go to somebody's

189
00:09:54.560 --> 00:09:57.430
work place blog and be like I am a user
now I'm gonna start writing posts.

190
00:09:57.430 --> 00:10:01.510
You can't do that,
you've gotta be invited right, or

191
00:10:01.510 --> 00:10:03.840
you have to be the creator and
then there's different roles and stuff.

192
00:10:03.840 --> 00:10:07.530
So yeah but we'll start off just assuming
that we'll create all crud routes for

193
00:10:07.530 --> 00:10:08.070
these things.

194
00:10:10.900 --> 00:10:14.210
So yeah we'll use middleware and
routers to tweak and configure those and

195
00:10:14.210 --> 00:10:16.980
then we'll model the resources later,
so don't worry about modeling the data.

196
00:10:16.980 --> 00:10:20.420
All right,
we don't need to do that right now.

197
00:10:20.420 --> 00:10:24.010
All we need to know is that we have these
resources, they will have crud and they

198
00:10:24.010 --> 00:10:27.140
definitely need those routes so we can
actually start writing code for it now.

199
00:10:27.140 --> 00:10:29.280
But we'll model the resources
after we get done with this,

200
00:10:29.280 --> 00:10:31.410
then we'll talk about Mongo and stuff.

201
00:10:31.410 --> 00:10:33.810
So but now that's all we need
to have the resources so

202
00:10:33.810 --> 00:10:35.830
we can get started building
out the skeleton files.

203
00:10:35.830 --> 00:10:40.090
So knowing what we know
about organization and

204
00:10:40.090 --> 00:10:46.510
configuration and the resources we're
gonna use, that's enough information for

205
00:10:46.510 --> 00:10:50.720
us to go ahead and start building
out the scaffold version of our API.

206
00:10:50.720 --> 00:10:53.800
So we'll have all the files in place,

207
00:10:53.800 --> 00:10:58.170
they might not be doing anything yet,
but we'll have it all in there.

208
00:10:58.170 --> 00:11:04.585
Does that make sense?
&gt;&gt; Speaker 1: Okay,

209
00:11:04.585 --> 00:11:07.029
any questions on this, cuz I about
to tell you what you're about to do?

210
00:11:08.980 --> 00:11:09.880
Yes.
&gt;&gt; Speaker 2: They were

211
00:11:09.880 --> 00:11:12.250
kind of discussing the mock and
the fixture.

212
00:11:12.250 --> 00:11:17.030
And somebody mentioned that, when you were
talking about the lion that you created,

213
00:11:17.030 --> 00:11:21.500
in his opinion that that wasn't a mock,
that that was a fixture, where a mock is

214
00:11:21.500 --> 00:11:26.830
used more like an API call that,
rather than waiting for

215
00:11:26.830 --> 00:11:31.712
it to complete, you just mock the API.
&gt;&gt; Speaker 1: Yeah that's also true so

216
00:11:31.712 --> 00:11:33.701
yeah that's true.

217
00:11:33.701 --> 00:11:36.746
I think they're loosely used, I don't
really think there's a right answer and

218
00:11:36.746 --> 00:11:39.655
that's probably why I couldn't come up
with a good one because when I think of

219
00:11:39.655 --> 00:11:42.693
mocks, I guess I'm thinking more of on
a front end of using stuff like angular.

220
00:11:42.693 --> 00:11:46.760
I'm like mocking dependencies, but also
at the same time that does make sense.

221
00:11:46.760 --> 00:11:48.930
You're mocking API calls
you want to wait for them.

222
00:11:48.930 --> 00:11:51.300
So, yeah it's really hard to determine,

223
00:11:51.300 --> 00:11:56.360
those are some of the loosely used
terms in our profession so, but

224
00:11:56.360 --> 00:11:59.570
that, I like that explanation, so
that works very well in our context.

