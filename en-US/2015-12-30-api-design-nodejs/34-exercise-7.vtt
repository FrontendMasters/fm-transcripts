WEBVTT

1
00:00:00.000 --> 00:00:03.871
[MUSIC]

2
00:00:03.871 --> 00:00:05.426
&gt;&gt; Speaker 1: So we have a small exercise.

3
00:00:05.426 --> 00:00:09.750
If we checkout to step 7.

4
00:00:09.750 --> 00:00:10.501
It's another small one.

5
00:00:21.590 --> 00:00:22.329
&gt;&gt; Speaker 1: Let me open it up.

6
00:00:28.411 --> 00:00:29.977
&gt;&gt; Speaker 1: There we go okay, so

7
00:00:29.977 --> 00:00:35.240
in step 7 there's a new file in the root,
this is called ddtester.

8
00:00:36.650 --> 00:00:39.600
And with this file,
what we're going to do.

9
00:00:39.600 --> 00:00:46.077
Hold on, let me silence my phone.
&gt;&gt; Speaker 1: There we go.

10
00:00:46.077 --> 00:00:49.711
This file [COUGH] is completely outside of
the application we just been working on

11
00:00:49.711 --> 00:00:50.370
all morning.

12
00:00:50.370 --> 00:00:52.690
It's a separate file,
that's why I made it on the root.

13
00:00:52.690 --> 00:00:55.200
It's just a way for
us to play with mongoose and Mongo and

14
00:00:55.200 --> 00:00:55.910
get familiar with it.

15
00:00:57.960 --> 00:01:00.920
All you need to do in here is just
need to connect to a database so

16
00:01:00.920 --> 00:01:02.160
the below will work.

17
00:01:02.160 --> 00:01:05.710
So once you connect to a database, [COUGH]
the stuff that's happening out here,

18
00:01:05.710 --> 00:01:07.180
we'll be able to work and
we can verify it.

19
00:01:07.180 --> 00:01:11.941
So what's happening below is that
we're creating a new schema and making

20
00:01:11.941 --> 00:01:16.821
a to do's collection with a to do model.
&gt;&gt; Speaker 1: So

21
00:01:16.821 --> 00:01:18.680
they're saying
the collection in the model.

22
00:01:18.680 --> 00:01:22.200
The model is like the representation

23
00:01:22.200 --> 00:01:27.610
of the actual resource that we're going
to be creating or consuming in our API.

24
00:01:27.610 --> 00:01:31.900
The collection is where that
model is stored in the database.

25
00:01:33.720 --> 00:01:37.310
So we're making a to-dos
collection with a to do model.

26
00:01:37.310 --> 00:01:39.030
It's like if you use backbone,
it's the same stuff.

27
00:01:40.550 --> 00:01:44.598
We then create a new todo.
&gt;&gt; Speaker 1: So

28
00:01:44.598 --> 00:01:48.338
once you connect to the database, if you
go back in the Mongo shell, or terminal,

29
00:01:48.338 --> 00:01:51.280
or robo Mongo,
wherever you're looking at Mongo.

30
00:01:51.280 --> 00:01:56.346
Switch over to your database and
query it, query it there to see

31
00:01:56.346 --> 00:02:03.574
if you find the todo that's created below.
&gt;&gt; Speaker 1: And

32
00:02:03.574 --> 00:02:07.411
also make sure that Mongod is running, so
Mongo d is running inside of the terminal,

33
00:02:07.411 --> 00:02:09.220
otherwise none of this will work.

34
00:02:09.220 --> 00:02:12.360
So make sure you have Mongo running,
connect to the database up here,

35
00:02:12.360 --> 00:02:17.376
and then go look at it wherever, whether
that's in Robomongo or whether that's in

36
00:02:17.376 --> 00:02:22.700
the Mongo shell, connect to that same
database and your preferred method.

37
00:02:23.910 --> 00:02:28.280
And make sure that when you query

38
00:02:29.550 --> 00:02:32.500
the to dos collection, that's the name
of the collection, pluralize,

39
00:02:32.500 --> 00:02:35.350
lower case,
that you see this todo that we created.

