WEBVTT

1
00:00:00.000 --> 00:00:03.871
[MUSIC]

2
00:00:03.871 --> 00:00:05.426
&gt;&gt; Speaker 1: So we have a small exercise.

3
00:00:05.426 --> 00:00:09.750
If we checkout to step 7.

4
00:00:09.750 --> 00:00:10.501
It's another small one.

5
00:00:21.590 --> 00:00:22.329
&gt;&gt; Speaker 1: Let me open it up.

6
00:00:28.411 --> 00:00:33.202
&gt;&gt; Speaker 1: There we go okay, so
in step 7 there's a new file in the root,

7
00:00:33.202 --> 00:00:35.240
this is called ddtester.

8
00:00:36.650 --> 00:00:39.600
And with this file,
what we're going to do.

9
00:00:39.600 --> 00:00:41.056
Hold on, let me silence my phone.

10
00:00:44.657 --> 00:00:46.077
&gt;&gt; Speaker 1: There we go.

11
00:00:46.077 --> 00:00:49.711
This file [COUGH] is completely outside of
the application we just been working on

12
00:00:49.711 --> 00:00:50.370
all morning.

13
00:00:50.370 --> 00:00:52.690
It's a separate file,
that's why I made it on the root.

14
00:00:52.690 --> 00:00:55.200
It's just a way for
us to play with mongoose and Mongo and

15
00:00:55.200 --> 00:00:55.910
get familiar with it.

16
00:00:57.960 --> 00:01:00.920
All you need to do in here is just
need to connect to a database so

17
00:01:00.920 --> 00:01:02.160
the below will work.

18
00:01:02.160 --> 00:01:05.710
So once you connect to a database, [COUGH]
the stuff that's happening out here,

19
00:01:05.710 --> 00:01:07.180
we'll be able to work and
we can verify it.

20
00:01:07.180 --> 00:01:11.480
So what's happening below is that
we're creating a new schema and

21
00:01:11.480 --> 00:01:14.562
making a to do's collection
with a to do model.

22
00:01:16.741 --> 00:01:18.680
&gt;&gt; Speaker 1: So they're saying
the collection in the model.

23
00:01:18.680 --> 00:01:22.200
The model is like the representation

24
00:01:22.200 --> 00:01:27.610
of the actual resource that we're going
to be creating or consuming in our API.

25
00:01:27.610 --> 00:01:31.900
The collection is where that
model is stored in the database.

26
00:01:33.720 --> 00:01:37.310
So we're making a to-dos
collection with a to do model.

27
00:01:37.310 --> 00:01:39.030
It's like if you use backbone,
it's the same stuff.

28
00:01:40.550 --> 00:01:42.371
We then create a new todo.

29
00:01:44.490 --> 00:01:47.309
&gt;&gt; Speaker 1: So once you connect to
the database, if you go back in the Mongo

30
00:01:47.309 --> 00:01:51.280
shell, or terminal, or robo Mongo,
wherever you're looking at Mongo.

31
00:01:51.280 --> 00:01:54.721
Switch over to your database and query it,

32
00:01:54.721 --> 00:01:59.892
query it there to see if you find
the todo that's created below.

33
00:02:03.412 --> 00:02:05.465
&gt;&gt; Speaker 1: And
also make sure that Mongod is running, so

34
00:02:05.465 --> 00:02:09.220
Mongo d is running inside of the terminal,
otherwise none of this will work.

35
00:02:09.220 --> 00:02:12.360
So make sure you have Mongo running,
connect to the database up here,

36
00:02:12.360 --> 00:02:17.376
and then go look at it wherever, whether
that's in Robomongo or whether that's in

37
00:02:17.376 --> 00:02:22.700
the Mongo shell, connect to that same
database and your preferred method.

38
00:02:23.910 --> 00:02:28.280
And make sure that when you query

39
00:02:29.550 --> 00:02:32.500
the to dos collection, that's the name
of the collection, pluralize,

40
00:02:32.500 --> 00:02:35.350
lower case,
that you see this todo that we created.

