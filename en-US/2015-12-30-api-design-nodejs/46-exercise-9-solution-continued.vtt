WEBVTT

1
00:00:00.000 --> 00:00:03.382
[MUSIC]

2
00:00:03.382 --> 00:00:06.325
&gt;&gt; Speaker 1: So this is my solution for
the get inside the post controller.

3
00:00:06.325 --> 00:00:09.845
Because get is just going to get back
all the instances of the collection.

4
00:00:13.280 --> 00:00:16.261
&gt;&gt; Speaker 1: But there's a little
difference in how post works because it

5
00:00:16.261 --> 00:00:17.196
has relations, so

6
00:00:17.196 --> 00:00:21.359
we have to change it to slightly different
than what's going on with the other ones.

7
00:00:23.700 --> 00:00:25.500
So what we have to do is
we can just call .find.

8
00:00:25.500 --> 00:00:28.340
I'm just passing an empty object here but
if you just wanna return back

9
00:00:28.340 --> 00:00:30.440
every single one,
you don't really have to pass anything.

10
00:00:30.440 --> 00:00:32.660
I'm just doing this just to be safe.

11
00:00:32.660 --> 00:00:33.190
But you don't have to.

12
00:00:33.190 --> 00:00:35.400
You could just say just
find everything on post.

13
00:00:37.058 --> 00:00:41.640
&gt;&gt; Speaker 1: And then I call .populate.

14
00:00:42.959 --> 00:00:43.929
&gt;&gt; Speaker 1: And remember,

15
00:00:43.929 --> 00:00:48.190
what populate does is it's gonna
go to the fields on this document.

16
00:00:49.640 --> 00:00:50.670
Who has the type?

17
00:00:50.670 --> 00:00:51.940
Well, first, what it will do.

18
00:00:51.940 --> 00:00:54.250
It won't do anything unless you
tell it what fields to populate.

19
00:00:54.250 --> 00:00:55.250
So when you call .populate.

20
00:00:55.250 --> 00:00:57.600
And you give it the fields
that you want to populate,

21
00:00:57.600 --> 00:01:01.699
it will go to these respective
fields on the document.

22
00:01:02.840 --> 00:01:05.720
And it will grab their object IDs,
cuz that's their values.

23
00:01:07.100 --> 00:01:11.990
And then it will go to whatever the ref
says, and it will go to that collection

24
00:01:11.990 --> 00:01:17.600
with the object ID, find it, and
attach it to this field name right here.

25
00:01:17.600 --> 00:01:20.330
So what I mean by that,
if we wrote a post model and

26
00:01:20.330 --> 00:01:23.360
we look, I dunno why that's an array,
it should not be an array.

27
00:01:24.870 --> 00:01:26.011
And we look at the author.

28
00:01:30.278 --> 00:01:34.653
&gt;&gt; Speaker 1: And it's ref is user, so
inside of here, when we say populate

29
00:01:34.653 --> 00:01:40.713
author, what it's doing is, it's gonna
go here, it's gonna grab this object ID,

30
00:01:40.713 --> 00:01:44.990
and it's like,
okay what collection do you belong to?

31
00:01:44.990 --> 00:01:46.290
You belong to the user collection.

32
00:01:46.290 --> 00:01:48.080
Great.
Let me go there with that object ID,

33
00:01:49.170 --> 00:01:53.700
find the appropriate user, and
attach it to this author property.

34
00:01:53.700 --> 00:01:57.649
And it's doing the same thing for
categories.

35
00:02:01.552 --> 00:02:05.564
&gt;&gt; Speaker 1: And because categories is
an array, it'll go inside the array and

36
00:02:05.564 --> 00:02:08.940
get every single one of the categories and
populate it.

37
00:02:08.940 --> 00:02:12.060
I don't know why that was backwards.

38
00:02:12.060 --> 00:02:14.610
That should be an object,
that should've been an array.

39
00:02:22.188 --> 00:02:25.391
&gt;&gt; Speaker 1: And then I have to call
.exec on here, because populate doesn't

40
00:02:25.391 --> 00:02:29.250
return a promise, so I have to call .exec,
and then I just send them all back.

41
00:02:32.816 --> 00:02:34.180
&gt;&gt; Speaker 1: Any questions on this?

42
00:02:34.180 --> 00:02:35.940
The only difference between this and

43
00:02:35.940 --> 00:02:37.340
the rest of them is that
we need to call populate.

44
00:02:37.340 --> 00:02:38.529
The rest of them are just like this.

45
00:02:39.680 --> 00:02:41.490
It's like find them all,
send them all back.

46
00:02:42.990 --> 00:02:45.020
But because we have to populate,
we just wanna populate them.

47
00:02:47.140 --> 00:02:49.910
We don't have to populate,
it's just we probably want that data.

48
00:03:01.391 --> 00:03:02.015
&gt;&gt; Speaker 1: Any questions?

49
00:03:02.015 --> 00:03:07.170
&gt;&gt; Speaker 2: They're asking, so populate
is to hydrate the model's relationships?

50
00:03:07.170 --> 00:03:08.870
&gt;&gt; Speaker 1: Yes,
that's exactly what it is.

51
00:03:08.870 --> 00:03:12.200
That's a good way of
putting it at call time.

52
00:03:12.200 --> 00:03:14.540
But it won't persist in the database,
so remember that.

53
00:03:14.540 --> 00:03:18.690
It's not like creating a join table that's
gonna be atomic and save in the database.

54
00:03:18.690 --> 00:03:20.870
It's only doing that
when you make the query.

55
00:03:20.870 --> 00:03:22.348
It virtually gives it to you.

56
00:03:22.348 --> 00:03:24.690
It's not like I'm gonna make it and
save it for next time.

57
00:03:24.690 --> 00:03:26.949
It's not,
it's only gonna do that at call time.

58
00:03:28.950 --> 00:03:29.780
So yeah it does.

59
00:03:29.780 --> 00:03:31.110
It will hydrate the objects.

60
00:03:35.697 --> 00:03:39.232
&gt;&gt; Speaker 1: Also you might
wanna do a population in here,

61
00:03:39.232 --> 00:03:44.347
all this inside the params on post,
because this is gonna be fired

62
00:03:44.347 --> 00:03:49.640
when we want to update a post,
delete a post, or get one post.

63
00:03:49.640 --> 00:03:51.650
So, it might be nice to
just populate in here, too.

64
00:03:51.650 --> 00:03:54.970
So we probably can do that, so we can
just come in here and do the same thing.

65
00:03:54.970 --> 00:03:55.850
We can just copy that.

66
00:03:55.850 --> 00:03:59.120
And just be like yeah,
just populate here, too.

67
00:04:01.560 --> 00:04:02.060
Boom.

68
00:04:03.690 --> 00:04:07.172
So that by the time we get into
the delete or the getOne or

69
00:04:07.172 --> 00:04:09.995
the put, it's already populated as well.

70
00:04:14.603 --> 00:04:15.450
&gt;&gt; Speaker 1: Any questions on that?

71
00:04:18.590 --> 00:04:23.410
All right.
And then user controller you have to do

72
00:04:23.410 --> 00:04:25.210
the get one I think.

73
00:04:25.210 --> 00:04:27.310
Yeah, this one's pretty straight forward.

74
00:04:27.310 --> 00:04:28.600
You just have to send back the user.

75
00:04:29.820 --> 00:04:32.500
And the reason we can do this, wait,

76
00:04:32.500 --> 00:04:36.210
does anybody know why we can just say
var user or req.user and send that back?

77
00:04:36.210 --> 00:04:37.207
Why can we do that?

78
00:04:40.557 --> 00:04:41.150
&gt;&gt; Speaker 1: Anybody wanna guess?

79
00:04:42.260 --> 00:04:45.580
&gt;&gt; Speaker 2: Yeah, cuz we added
it in the params function of both.

80
00:04:45.580 --> 00:04:46.470
&gt;&gt; Speaker 1: Yeah, we added it up here.

81
00:04:47.780 --> 00:04:50.680
Because we know when you
make a call to get one,

82
00:04:50.680 --> 00:04:53.940
we know that you have to pass
it an ID as a parameter.

83
00:04:53.940 --> 00:04:56.510
And if you have to pass in a parameter
ID then we know it's going to hit

84
00:04:56.510 --> 00:04:57.160
this one first.

85
00:04:58.930 --> 00:05:02.180
And if it hits this one first then it's
going to attach to the rectile user and

86
00:05:02.180 --> 00:05:03.070
that's going to call next,

87
00:05:04.410 --> 00:05:09.210
which is going to come back down
to get one which has rectile user.

88
00:05:10.410 --> 00:05:13.430
The reason I had you do this first before
the routing is I wanted you to think about

89
00:05:13.430 --> 00:05:15.800
this without having the routing tell you.

90
00:05:15.800 --> 00:05:17.620
Because if you looked at routing it
would be easy to figure that stuff out.

91
00:05:17.620 --> 00:05:20.900
You're just like this has ID or
here's the middleware, it's all in order.

92
00:05:20.900 --> 00:05:23.410
I wanted you to just look
at these functions, and

93
00:05:23.410 --> 00:05:28.770
try to figure out what order they're
gonna happen by looking at the context.

94
00:05:28.770 --> 00:05:33.518
So, you could infer that by
saying req.user that something

95
00:05:33.518 --> 00:05:36.693
inside of here is attaching req.user.

96
00:05:36.693 --> 00:05:38.720
So I just did req.user.

97
00:05:41.188 --> 00:05:42.053
&gt;&gt; Speaker 1: There it is.

98
00:05:42.053 --> 00:05:43.100
Whatever is on the left hand side.

99
00:05:43.100 --> 00:05:44.479
So this is what's happening first.

