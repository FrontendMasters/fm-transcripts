WEBVTT

1
00:00:00.000 --> 00:00:05.118
[MUSIC]

2
00:00:05.118 --> 00:00:05.618
&gt;&gt; Scott Moss: Anyone want to explain to
me what this function is doing? Anyone

3
00:00:05.618 --> 00:00:07.480
want to take a guess and just tell me?

4
00:00:09.410 --> 00:00:11.930
I already told you, so
I'm not gonna tell you again.

5
00:00:11.930 --> 00:00:15.480
I just wanna know, if nobody has any
questions then that means everybody knows

6
00:00:15.480 --> 00:00:19.480
what this function is doing.
&gt;&gt; Speaker 2: [INAUDIBLE] Request.

7
00:00:19.480 --> 00:00:22.400
&gt;&gt; Scott Moss: Yeah so it will look for

8
00:00:22.400 --> 00:00:28.790
the token on rec.headers.authorization,
and then because we set it up, up here op

9
00:00:28.790 --> 00:00:32.100
top, we already set it up it already knows
the secret because, we told it up here.

10
00:00:33.940 --> 00:00:35.130
It told him the secret enclosure.

11
00:00:36.420 --> 00:00:41.887
And it's going to match It's
going try to JWT.verify this

12
00:00:41.887 --> 00:00:46.720
token with this secret and
if it finds it, it gonna grab

13
00:00:46.720 --> 00:00:52.030
whatever object is returned and attach
it to req.user and then call it next.

14
00:00:52.030 --> 00:00:55.540
If the verification process fails,
it'll call it next with an error.

15
00:00:57.090 --> 00:01:00.340
If it doesn't find the token,
it'll call it next with an error.

16
00:01:09.538 --> 00:01:10.147
&gt;&gt; Scott Moss: Cool, so

17
00:01:10.147 --> 00:01:14.571
let's just start with the one that
probably we're doing first, and

18
00:01:14.571 --> 00:01:16.030
that's verifyUser.

19
00:01:17.990 --> 00:01:19.900
So, anybody tell me what
verifyUser is doing?

20
00:01:22.380 --> 00:01:24.130
What were we supposed to do?

21
00:01:25.240 --> 00:01:26.440
What was verifyUser supposed to do?

22
00:01:26.440 --> 00:01:29.602
I hope everybody knew what it was supposed
to do, because you just tried to make it,

23
00:01:29.602 --> 00:01:32.238
so if you didn't know what it was
supposed to do it'd be really hard.

24
00:01:32.238 --> 00:01:34.088
Yes?
&gt;&gt; Speaker 3: It's supposed to say,

25
00:01:34.088 --> 00:01:35.940
is this user in the database?
&gt;&gt; Scott Moss: Right and

26
00:01:35.940 --> 00:01:38.130
what else?
&gt;&gt; Speaker 3: And

27
00:01:38.130 --> 00:01:39.980
were the credentials correct?
&gt;&gt; Scott Moss: Right.

28
00:01:39.980 --> 00:01:42.870
So, it'll check to see if this
user exists in the database, and

29
00:01:42.870 --> 00:01:45.810
if the password they supplied to me it
is the same password that they signed up

30
00:01:45.810 --> 00:01:49.610
with, that's what this is doing and
it attached

31
00:01:49.610 --> 00:01:52.900
the result of that to the inquiry.
&gt;&gt; Speaker 4: This kind of came up

32
00:01:52.900 --> 00:01:54.740
when you talked about decode token,

33
00:01:54.740 --> 00:01:58.090
where is it being used.
&gt;&gt; Scott Moss: We're not currently using

34
00:01:58.090 --> 00:02:03.180
that, we will be on step
12 That was the question

35
00:02:03.180 --> 00:02:05.850
I was hoping somebody would ask me like,
where were you using this thing?

36
00:02:05.850 --> 00:02:07.120
Because we aren't using it anywhere.

37
00:02:08.530 --> 00:02:09.520
We just made it.

38
00:02:09.520 --> 00:02:10.440
But yeah it's not being used.

39
00:02:11.480 --> 00:02:14.660
So, verify user has absolutely
nothing to do with tokens.

40
00:02:14.660 --> 00:02:16.250
This is just passwords right here.

41
00:02:16.250 --> 00:02:17.090
It has nothing to do with JWT.

42
00:02:19.850 --> 00:02:21.000
So this is my solution for it.

43
00:02:21.000 --> 00:02:25.660
So what I do, first I make sure that there
is a username and a password and if not,

44
00:02:25.660 --> 00:02:26.540
I just send back a 400.

45
00:02:26.540 --> 00:02:28.390
You need a username and password.

46
00:02:29.550 --> 00:02:31.540
Also you should be doing this
validation on a friend, as well.

47
00:02:31.540 --> 00:02:35.480
So you shouldn't even let the form
even submit without the username or

48
00:02:35.480 --> 00:02:37.560
password, but
this is just to catch it, anyway.

49
00:02:37.560 --> 00:02:40.080
So they got two types of validation.

50
00:02:40.080 --> 00:02:41.160
Saving those DV queries.

51
00:02:43.850 --> 00:02:49.830
And once the status quo for
400 is like resource,

52
00:02:49.830 --> 00:02:52.170
let me see, I have all the cheats
right here, let's see.

53
00:02:53.700 --> 00:02:54.500
Bad request,

54
00:02:54.500 --> 00:02:58.607
so I think that's appropriate.
&gt;&gt; Scott Moss: I don't know why

55
00:02:58.607 --> 00:03:03.238
I couldn't remember that.
&gt;&gt; Scott Moss: And then if that's true,

56
00:03:03.238 --> 00:03:05.310
and then I put this return key right here,
right?

57
00:03:05.310 --> 00:03:07.430
So it doesn't continue to go down here.

58
00:03:07.430 --> 00:03:09.450
You could also just put
a else if you want to.

59
00:03:09.450 --> 00:03:12.220
I just don't like that sometimes,
so I'll just put a return, so stop.

60
00:03:13.440 --> 00:03:15.600
You could also just put the return in
front of this, and it will still work.

61
00:03:17.370 --> 00:03:20.361
Whatever you want to do.
&gt;&gt; Scott Moss: And

62
00:03:20.361 --> 00:03:23.050
then I say User.findOne
with this username.

63
00:03:23.050 --> 00:03:25.820
because we all know usernames are unique,
we did that, right?

64
00:03:25.820 --> 00:03:27.230
We only want to query
things that are unique, so

65
00:03:27.230 --> 00:03:31.290
I'm gonna find the first user, or
the only user who's user name is username.

66
00:03:32.700 --> 00:03:37.940
And then, grab that user so
if it didn't error out,

67
00:03:37.940 --> 00:03:41.730
but there is no user because remember
.then is a promise resolution.

68
00:03:41.730 --> 00:03:45.060
So, this will resolve as
long as there was no error.

69
00:03:45.060 --> 00:03:47.450
But that doesn't mean that
there is also a user.

70
00:03:47.450 --> 00:03:49.210
The database could have went to.

71
00:03:49.210 --> 00:03:51.810
This mongoose could have went
to the database, search for

72
00:03:51.810 --> 00:03:55.940
a user, didn't have an error,
but came back with no user.

73
00:03:55.940 --> 00:03:57.620
That's not going to throw
an error if there is no user.

74
00:03:57.620 --> 00:04:00.550
So, we need to check to see if
there is actually a user there.

75
00:04:00.550 --> 00:04:02.700
So if it's not an error, sorry,

76
00:04:02.700 --> 00:04:07.810
if it's not a user, then I'm going to set
a 401, no user with that given user name.

77
00:04:10.980 --> 00:04:12.719
And, you can see I did an L statement.

78
00:04:14.730 --> 00:04:16.680
Returning a promise is just
kind of weird as we saw.

79
00:04:16.680 --> 00:04:20.850
So else, and then what I do is I
say user.authenticate password,

80
00:04:20.850 --> 00:04:26.830
which I told you about if you go look
in the user model authenticate is this.

81
00:04:26.830 --> 00:04:31.125
It takes in a plainTextPword,
and it will return this method

82
00:04:31.125 --> 00:04:35.755
bcrypt.compareSync, which will
take the plain text password and

83
00:04:35.755 --> 00:04:40.490
hash it and see if it matches
the password that's already saved.

84
00:04:40.490 --> 00:04:41.950
Then it'll return it true or false.

85
00:04:44.580 --> 00:04:45.440
That was already there for you.

86
00:04:46.480 --> 00:04:48.070
And remember,
I said this is on the methods.

87
00:04:49.310 --> 00:04:51.590
So, if you say user scheme.methods,
that's on the instance.

88
00:04:51.590 --> 00:04:56.260
We went over this, so that's how I
was able to say user.authenticate.

89
00:04:56.260 --> 00:04:59.420
So, I was saying, hey user,
authenticate yourself with this password.

90
00:05:01.850 --> 00:05:04.650
Because it's on the methods,
which means it's on the instance.

91
00:05:04.650 --> 00:05:05.850
Does everybody follow me there?

92
00:05:07.550 --> 00:05:10.765
Because these two methods authenticate
an encrypt password exists on

93
00:05:10.765 --> 00:05:17.190
userkeepers.methods every instance of
a user model can call these methods.

94
00:05:17.190 --> 00:05:21.750
And when I say the key work this I'm
referring to the actual instance.

95
00:05:21.750 --> 00:05:25.730
So in this case,
when we say user.authenticate,

96
00:05:25.730 --> 00:05:30.590
pass in is password text, and I would come
in here and password log this, this key

97
00:05:30.590 --> 00:05:38.179
word right here, it would be this user.
&gt;&gt; Scott Moss: So

98
00:05:38.179 --> 00:05:40.330
I'm saying hey, authenticate yourself.

99
00:05:40.330 --> 00:05:43.790
If you're not authenticated,
if the passwords don't match, 401,

100
00:05:43.790 --> 00:05:49.220
wrong password.
&gt;&gt; Scott Moss: or else, it did match.

101
00:05:49.220 --> 00:05:50.440
Cool, you're good to go.

102
00:05:50.440 --> 00:05:52.750
There was a user, the passwords did match.

103
00:05:53.810 --> 00:05:55.565
I guess you are who you say you are.

104
00:05:55.565 --> 00:06:02.440
Req.user = user;next();.
&gt;&gt; Scott Moss: And then error handling.

105
00:06:06.820 --> 00:06:09.990
So remember I said with promises,
you can either call a .catch or

106
00:06:09.990 --> 00:06:12.750
you can also pass in a second callback
to do optional error handling.

107
00:06:12.750 --> 00:06:15.230
That's what that is right here.

108
00:06:15.230 --> 00:06:19.090
Because this version of Mongo
is using m promises, and

109
00:06:19.090 --> 00:06:21.590
I don't thing they have a .catch or
a .fail.

110
00:06:21.590 --> 00:06:24.500
They probably do, I probably just don't
know it enough, but I know if you do this

111
00:06:24.500 --> 00:06:30.450
it'll catch the error.
&gt;&gt; Scott Moss: So what do we have on this?

112
00:06:30.450 --> 00:06:31.720
I need questions on this one.

113
00:06:31.720 --> 00:06:32.720
This one's kinda tough.

114
00:06:32.720 --> 00:06:34.690
I saw a lot of people like.

115
00:06:34.690 --> 00:06:36.490
I'm curious, what do other people do?

116
00:06:36.490 --> 00:06:39.220
What else did you guys do?

117
00:06:46.329 --> 00:06:47.800
&gt;&gt; Scott Moss: Everybody did it like this?

118
00:06:47.800 --> 00:06:50.380
No? Yeah. &gt;&gt; Speaker 5: I have a question.

119
00:06:50.380 --> 00:06:53.020
Is there a reason why you
don't use error middleware and

120
00:06:53.020 --> 00:06:58.730
set the status sending back a message?
&gt;&gt; Scott Moss: Is there any reason I don't

121
00:06:58.730 --> 00:07:04.157
use error!
&gt;&gt; Scott Moss: So,

122
00:07:04.157 --> 00:07:08.108
the reason I did it here, that's a good
question, so his question was could I just

123
00:07:08.108 --> 00:07:11.420
use error middleware like we did
before to just send a message back.

124
00:07:11.420 --> 00:07:12.940
Yeah, we could totally do that.

125
00:07:12.940 --> 00:07:17.540
But I guess the reason I did it here was,
one, I haven't registered this middleware

126
00:07:17.540 --> 00:07:22.250
verify user anywhere, so I have no idea
in what middleware stack it's gonna be.

127
00:07:22.250 --> 00:07:25.550
So depending on what router it's placed
in, or what route it's placed in

128
00:07:25.550 --> 00:07:28.250
I have no idea what error handling
is going to come after it.

129
00:07:28.250 --> 00:07:31.230
The only guarantee I do have is like,
if I set up on globally, and

130
00:07:31.230 --> 00:07:32.140
like serve it out JS.

131
00:07:32.140 --> 00:07:32.990
Like this one.

132
00:07:32.990 --> 00:07:34.920
This is the only one I'm guaranteed
to know that it will hit,

133
00:07:34.920 --> 00:07:37.340
cuz this is after everything.

134
00:07:37.340 --> 00:07:44.070
So, and I also wanted to do like
a specific error for these conditions.

135
00:07:44.070 --> 00:07:45.790
So, if I wanted to send
it to global air message,

136
00:07:45.790 --> 00:07:49.340
I would have to send along some
type of metadata along to let

137
00:07:49.340 --> 00:07:53.830
the airware know that this airware
is coming from a verified user.

138
00:07:53.830 --> 00:07:58.320
Maybe I'll put a different message on it,
or I'll put a different type on it, so

139
00:07:58.320 --> 00:08:02.650
I can check and be like if airware.type
equals from verified user,

140
00:08:02.650 --> 00:08:04.280
send back the status code of this.

141
00:08:04.280 --> 00:08:07.070
So you can totally do that and that
might be better, but it was just like,

142
00:08:07.070 --> 00:08:08.630
I would have to figure
out how to check for

143
00:08:08.630 --> 00:08:10.806
those different types of errors.
&gt;&gt; Scott Moss: Or

144
00:08:10.806 --> 00:08:16.207
the appropriate error messages.
&gt;&gt; Scott Moss: An even

145
00:08:16.207 --> 00:08:21.786
better approach is just to abstracts or,
what I would do, I would make a middleware

146
00:08:21.786 --> 00:08:27.240
that just mocks out error handling
forever, or just have something like req..

147
00:08:27.240 --> 00:08:31.530
You know, or I could like req[404] and
it'll just send back a 404 and

148
00:08:31.530 --> 00:08:34.309
give it a message, and
it will send that message.

149
00:08:34.309 --> 00:08:41.558
I would do something like that.
&gt;&gt; Scott Moss: So

150
00:08:41.558 --> 00:08:44.322
that looked kind of funny to you,
is because I'm using brackets in text,

151
00:08:44.322 --> 00:08:45.270
because it's a number.

152
00:08:46.290 --> 00:08:50.180
I can't say req.404, that won't work, so

153
00:08:50.180 --> 00:08:54.664
I have to say req[404].

154
00:09:00.553 --> 00:09:01.333
&gt;&gt; Scott Moss: All right, any other

155
00:09:01.333 --> 00:09:06.898
questions on this, on verified users?
&gt;&gt; Scott Moss: You

156
00:09:06.898 --> 00:09:07.790
look like you got some questions.

157
00:09:07.790 --> 00:09:08.530
You got some questions.

158
00:09:08.530 --> 00:09:09.590
How do you
&gt;&gt; Speaker 6: Okay, I have

159
00:09:09.590 --> 00:09:10.750
a question.
&gt;&gt; Scott Moss: Thank you.

160
00:09:10.750 --> 00:09:12.420
Yes, there we go.
&gt;&gt; Speaker 6: Line 75.

161
00:09:12.420 --> 00:09:15.090
It's calling next after it

162
00:09:15.090 --> 00:09:17.650
sets the user on the request.
&gt;&gt; Scott Moss: Yes.

163
00:09:17.650 --> 00:09:20.510
&gt;&gt; Speaker 6: Then server.js.

164
00:09:20.510 --> 00:09:21.810
&gt;&gt; Scott Moss: Yes.

165
00:09:21.810 --> 00:09:22.820
&gt;&gt; Speaker 6: I see auth as

166
00:09:22.820 --> 00:09:26.100
the last app.use.
&gt;&gt; Scott Moss: That's true.

167
00:09:26.100 --> 00:09:27.758
&gt;&gt; Speaker 6: So how does it

168
00:09:27.758 --> 00:09:28.602
&gt;&gt; Scott Moss: What's next?

169
00:09:28.602 --> 00:09:29.290
&gt;&gt; Speaker 6: [LAUGH]

170
00:09:29.290 --> 00:09:29.910
&gt;&gt; Scott Moss: Yeah, that's

171
00:09:29.910 --> 00:09:30.880
a good question.

172
00:09:30.880 --> 00:09:31.690
Let's follow it.

173
00:09:31.690 --> 00:09:33.710
So auth.
You start right here.

174
00:09:35.210 --> 00:09:40.930
And then let's go to where it's being
pulled from, which is auth, routes.js.

175
00:09:40.930 --> 00:09:41.820
So it's being pulled from here.

176
00:09:41.820 --> 00:09:44.690
This is the router right here, right?

177
00:09:44.690 --> 00:09:46.250
Are you following me there?

178
00:09:46.250 --> 00:09:48.900
Okay, here's verify user.

179
00:09:48.900 --> 00:09:50.720
That's the method that was calling next.

180
00:09:50.720 --> 00:09:56.590
So, when it calls next, it goes to
the next function, which is this one.

181
00:09:56.590 --> 00:09:58.240
So, that's where it's
going when it calls next.

182
00:09:58.240 --> 00:09:58.770
It's going here.

183
00:10:01.510 --> 00:10:03.470
Because remember, we can put
middleware in between these stuff too.

184
00:10:03.470 --> 00:10:05.344
Remember, we can put
an array of middleware here.

185
00:10:07.650 --> 00:10:08.460
Right?
We can put.

186
00:10:09.490 --> 00:10:11.910
We can put another middleware here.

187
00:10:11.910 --> 00:10:13.270
You could put unlimited middleware here.

188
00:10:13.270 --> 00:10:15.440
It doesn't matter and

189
00:10:15.440 --> 00:10:18.540
every time you call next this is gonna
go to the one to the right of it.

190
00:10:18.540 --> 00:10:20.608
So this is route specific middleware.

191
00:10:20.608 --> 00:10:27.073
Right?
&gt;&gt; Scott Moss: So,

192
00:10:27.073 --> 00:10:28.760
it does sounds like
middleware is very powerful.

193
00:10:28.760 --> 00:10:30.470
But yeah, so
only called next gonna go here.

194
00:10:31.900 --> 00:10:36.640
Good question.
&gt;&gt; Scott Moss: Any other questions on

195
00:10:36.640 --> 00:10:41.464
this guy?
&gt;&gt; Scott Moss: No, okay and

196
00:10:41.464 --> 00:10:43.090
then back to where I just showed you.

197
00:10:43.090 --> 00:10:45.340
So of course, and
this is where you would use verifyUser.

198
00:10:46.430 --> 00:10:51.210
You'd verify the user before
you'd sign them in, because

199
00:10:51.210 --> 00:10:53.960
when we get to controller.signin that's
where we're actually gonna sign the token.

200
00:10:53.960 --> 00:10:56.010
We don't want to sign the token for
somebody who hasn't

201
00:10:57.210 --> 00:11:00.390
even given us the appropriate username and
password combination.

202
00:11:00.390 --> 00:11:04.810
So, we want to verify that they
are who they say they are first,

203
00:11:04.810 --> 00:11:05.640
before we give them a token.

204
00:11:05.640 --> 00:11:10.300
Does that make sense why
we have verifyUser here?

205
00:11:10.300 --> 00:11:14.140
Let me check the passwords, first let me
see if they have a username and password.

206
00:11:16.340 --> 00:11:18.960
Right, make sure they have a user name and
a password.

207
00:11:20.770 --> 00:11:23.070
Then also make sure that their
is a user with that user name.

208
00:11:23.070 --> 00:11:28.820
And then check that the two passwords
the hash passwords match each other,

209
00:11:28.820 --> 00:11:33.880
and only if all those conditions meet
all they sign are who they say they are.

210
00:11:33.880 --> 00:11:38.740
Then I'll type to direct that user and
you can go for it.

211
00:11:38.740 --> 00:11:41.170
So, those are only conditions
that this will work.

212
00:11:41.170 --> 00:11:45.177
So that's how we able to say, all right,
somebody goes to /auth/signin.

213
00:11:45.177 --> 00:11:49.050
You must verify them first,
and then we can sign them.

214
00:11:49.050 --> 00:11:55.150
So, now if we go to the controller method,
this one, we have the exports.signin.

215
00:11:55.150 --> 00:11:58.910
It's the controller method for
the sign in, and

216
00:11:58.910 --> 00:12:04.012
because if you go to verify user
we notice we put rec.user here.

217
00:12:04.012 --> 00:12:06.100
We attached rec.user.

218
00:12:06.100 --> 00:12:07.650
We now have access to.

219
00:12:07.650 --> 00:12:11.710
So whatever comes next after this,
which is the controller.sign in as we saw

220
00:12:11.710 --> 00:12:15.390
can now call it rec.user,
which is what this is saying here.

221
00:12:15.390 --> 00:12:17.600
So, reg.user will be
here from the middleware.

222
00:12:17.600 --> 00:12:18.300
Verify user.

223
00:12:19.370 --> 00:12:22.940
Then we can just create a token and
send it back for the client to consume.

224
00:12:22.940 --> 00:12:27.590
So we can use the sign token method
that exists on the auth object.

225
00:12:27.590 --> 00:12:30.835
So if we just require auth,
that was already made for you,

226
00:12:30.835 --> 00:12:32.730
auth.js is the signed token right here.

227
00:12:33.950 --> 00:12:36.270
As it takes an ID and
it returns a token, that's it.

228
00:12:37.480 --> 00:12:41.010
Give it a Mongo ID, and it will sign
it and give you the token back.

229
00:12:41.010 --> 00:12:41.880
That was already there for you.

230
00:12:43.400 --> 00:12:46.001
So that's what I did, I just required it,

231
00:12:46.001 --> 00:12:50.514
I just did .signToken here.
&gt;&gt; Scott Moss: And

232
00:12:50.514 --> 00:12:54.775
then I'm saying, okay token equals
signToken pass and ID which is

233
00:12:54.775 --> 00:12:59.830
req.user_id cuz we got the req.user,
and then just send back the token.

234
00:12:59.830 --> 00:13:02.790
So I send back an object with
a token property with a token value.

