WEBVTT

1
00:00:04.060 --> 00:00:06.830
&gt;&gt; Speaker 1: So Node uses CommonJS for
its module loader.

2
00:00:06.830 --> 00:00:09.234
Anybody here knows what CommonJS is?

3
00:00:09.234 --> 00:00:11.144
&gt;&gt; Speaker 2: Module loader?

4
00:00:11.144 --> 00:00:13.645
&gt;&gt; Speaker 1: [LAUGH] How'd you know?

5
00:00:13.645 --> 00:00:16.220
[LAUGH] Yeah, it's a module loader.

6
00:00:16.220 --> 00:00:17.535
That's exactly what it is.

7
00:00:17.535 --> 00:00:22.070
It's kind of funny, because when
I first heard of CommonJS, and

8
00:00:22.070 --> 00:00:24.490
I looked at the syntax,
I was like it uses require.

9
00:00:24.490 --> 00:00:25.770
Wait, isn't that RequireJs?

10
00:00:25.770 --> 00:00:27.310
No, it's not.

11
00:00:27.310 --> 00:00:30.060
RequireJs is actually AMD.

12
00:00:30.060 --> 00:00:34.110
But CommonJS is what the Node folks
decided to use as their module loader

13
00:00:34.110 --> 00:00:34.970
because they had to.

14
00:00:34.970 --> 00:00:39.200
Because if you think about it,
when you run JavaScripts on the client,

15
00:00:39.200 --> 00:00:42.400
how do we tell other JavaScript
about other JavaScript?

16
00:00:42.400 --> 00:00:46.420
How do we associate JavaScript's
files together in the client?

17
00:00:47.670 --> 00:00:48.600
Script tags, right?

18
00:00:48.600 --> 00:00:51.960
So you have a html file,
you have script tags.

19
00:00:51.960 --> 00:00:54.760
There's no html file,
there's no DOM on Node.

20
00:00:54.760 --> 00:00:57.980
So there needs to be way of associating
these JavaScript files together,

21
00:00:57.980 --> 00:01:01.740
these modules, so they needed a module
loader, so they chose CommonJS.

22
00:01:01.740 --> 00:01:04.020
Which in my opinion was
a really good choice.

23
00:01:04.020 --> 00:01:07.310
There are some differences
between CommonJS and AMD.

24
00:01:07.310 --> 00:01:12.220
And now the new ES2015 module, which is
completely different than all of them.

25
00:01:12.220 --> 00:01:15.850
But CommonJs was the one that they chose a
couple years ago, when they made Node, and

26
00:01:15.850 --> 00:01:17.540
it's a really good choice.

27
00:01:17.540 --> 00:01:22.110
So using require ( ) we
get access to built in and

28
00:01:22.110 --> 00:01:26.160
third party npm modules and
of course the modules that we make.

29
00:01:26.160 --> 00:01:29.540
So here's a little code snippet
of how that actually works.

30
00:01:29.540 --> 00:01:32.390
So if we were inside of a Node file, and
I'll show you in a minute, just do it

31
00:01:32.390 --> 00:01:36.680
from the terminal, this is how we would
get access to a build in Node module.

32
00:01:37.790 --> 00:01:42.125
We would just say, var,
whatever you want to call it, = and

33
00:01:42.125 --> 00:01:46.896
you use the require function, and
pass in the name of that module.

34
00:01:46.896 --> 00:01:49.890
In this specific example, the path module
is a module that's built into Node.

35
00:01:49.890 --> 00:01:54.749
And if we get a little more fine detail,
we know that this is either a built in

36
00:01:54.749 --> 00:01:57.120
to Node module or
a module that we downloaded.

37
00:01:57.120 --> 00:02:02.570
And that is because we didn't
have to prefix it with a ./ and

38
00:02:02.570 --> 00:02:06.640
if you don't prefix your names in
the require, what happens is Node

39
00:02:06.640 --> 00:02:10.690
is automatically gonna assume that
it's either a built in Node module or

40
00:02:10.690 --> 00:02:13.420
it's belonging in
the Node module's folder.

41
00:02:13.420 --> 00:02:16.050
If you put a ./ in front of it,
it's going to like,

42
00:02:16.050 --> 00:02:19.540
this is a module that you made somewhere
in this directory let me go find it.

43
00:02:19.540 --> 00:02:21.050
And I'll show you what that
looks like in a minute.

44
00:02:22.660 --> 00:02:25.880
So this is an example of a built in Node
module that we did not have to download,

45
00:02:25.880 --> 00:02:28.020
it's already baked into Node, path.

46
00:02:28.020 --> 00:02:30.220
Here's an example of one
that we downloaded, so

47
00:02:30.220 --> 00:02:34.740
this is like we npm installed lodash,
which is an alternative to underscore.

48
00:02:34.740 --> 00:02:37.310
If you've ever used Underscore.js,
it's the same thing.

49
00:02:37.310 --> 00:02:39.220
All right, this is how we require it,
it's the same thing.

50
00:02:39.220 --> 00:02:42.090
We just require the name of the package,
which is lodash.

51
00:02:43.120 --> 00:02:45.860
And we don't have to put a ./
in front of it because it's

52
00:02:45.860 --> 00:02:48.270
installed in a Node module's folder.

53
00:02:48.270 --> 00:02:49.030
So we don't have to do that.

54
00:02:49.030 --> 00:02:53.840
Anything that's in a Node module's folder,
you don't have to put a ./ in front of it.

55
00:02:53.840 --> 00:02:58.756
But for this one, which is the module
that we created in a separate file,

56
00:02:58.756 --> 00:03:01.266
we have to put the ./ in front of it.

57
00:03:01.266 --> 00:03:05.996
Otherwise, Node is gonna assume that
it's in the Node module's folder, or

58
00:03:05.996 --> 00:03:09.455
that it's baked in internally,
which is not the case.

59
00:03:09.455 --> 00:03:11.811
Just won't be able to find
it if we didn't do this.

60
00:03:11.811 --> 00:03:15.001
And the path that you place in here
is relative to the file that you're

61
00:03:15.001 --> 00:03:15.835
acquiring from.

62
00:03:19.355 --> 00:03:21.192
&gt;&gt; Speaker 1: Also note that
I didn't have to put .js,

63
00:03:21.192 --> 00:03:23.980
I didn't have to put an extension
name on any of these files.

64
00:03:23.980 --> 00:03:26.300
It just assumes that it's
JavaScript by default.

65
00:03:26.300 --> 00:03:29.510
So you don't have to put .js,
it just knows.

66
00:03:29.510 --> 00:03:30.360
I mean, what else would it be?

67
00:03:30.360 --> 00:03:34.210
It might be JSON or something else,
but by default it's gonna be js, so

68
00:03:34.210 --> 00:03:35.170
you don't have to put the extension.

69
00:03:35.170 --> 00:03:37.130
If you do put the extension,
it's not gonna break.

70
00:03:37.130 --> 00:03:37.680
But you don't have to.

71
00:03:40.420 --> 00:03:41.316
Any questions on that stuff?

72
00:03:46.276 --> 00:03:47.718
&gt;&gt; Speaker 1: Okay, so
above are some examples,

73
00:03:47.718 --> 00:03:49.506
how to access Node modules using CommonJS.

74
00:03:49.506 --> 00:03:53.460
So this is how we would access them.

75
00:03:53.460 --> 00:03:58.340
Here are some examples of how we would
expose them, if we were to create them.

76
00:03:58.340 --> 00:04:02.380
So these are two different files,
but here's the one file.

77
00:04:02.380 --> 00:04:04.390
So we would use the, oops,

78
00:04:05.430 --> 00:04:10.340
should be exports not export,
forgot about the s there.

79
00:04:10.340 --> 00:04:15.390
So we would use the exports keyword here,
which would allow us to expose.

80
00:04:15.390 --> 00:04:16.220
Yes?

81
00:04:16.220 --> 00:04:19.368
&gt;&gt; Speaker 2: There's this question on how
does Node know where the Node module's

82
00:04:19.368 --> 00:04:19.910
folder is?

83
00:04:20.980 --> 00:04:25.177
&gt;&gt; Speaker 1: The Node module's
folder will always be on the root

84
00:04:25.177 --> 00:04:27.820
of the application next to npm.

85
00:04:27.820 --> 00:04:30.700
And if it's not there,
it'll recursively look for it.

86
00:04:30.700 --> 00:04:33.410
&gt;&gt; Speaker 2: And
I guess follow up to that is, yeah,

87
00:04:33.410 --> 00:04:35.629
how does Node know where
the project root is?

88
00:04:37.360 --> 00:04:42.412
&gt;&gt; Speaker 1: How does the Node
know where the, good question.

89
00:04:42.412 --> 00:04:45.873
So I'll get to that I have an example for
that, yeah.

90
00:04:49.772 --> 00:04:54.332
&gt;&gt; Speaker 1: So yeah, we'll use the
exports which just came out of nowhere.

91
00:04:54.332 --> 00:04:57.169
So in Node there does exist this
type of thing like globals,

92
00:04:57.169 --> 00:05:00.802
kind of like in the client where you have
everything attached to the window or

93
00:05:00.802 --> 00:05:03.020
everything's on top of global space.

94
00:05:03.020 --> 00:05:07.676
There does exist some concept
of that Node and that's because,

95
00:05:07.676 --> 00:05:12.675
in Node, actually what's happening
is when you make a file in Node,

96
00:05:12.675 --> 00:05:14.846
it actually wraps in an iffy.

97
00:05:14.846 --> 00:05:17.260
So it doesn't matter what file you do,

98
00:05:17.260 --> 00:05:21.130
this is what Node does when
it executes your file.

99
00:05:21.130 --> 00:05:24.708
So your actual code would
be in between here and

100
00:05:24.708 --> 00:05:30.236
then what Node does is it gives you
some globals something like module.

101
00:05:30.236 --> 00:05:34.306
It also gives you exports,
gives you dirname,

102
00:05:34.306 --> 00:05:40.230
which is the directory name that it's in,
all that stuff like that.

103
00:05:40.230 --> 00:05:45.620
So now you have access to those variables
inside your code which will be in here.

104
00:05:45.620 --> 00:05:49.530
So every file is wrapped in one of these,
it's held enclosure.

105
00:05:49.530 --> 00:05:53.322
So if you want to to see what that looks
like, it's literally in the Node source

106
00:05:53.322 --> 00:05:55.798
code you can go check it
out it's exactly how it is.

107
00:05:55.798 --> 00:05:58.718
There's a couple of other things in here.

108
00:05:58.718 --> 00:05:59.878
Yeah, there's a few other things in here.

109
00:05:59.878 --> 00:06:04.133
So that's how we get access to exports and
module.exports and

110
00:06:04.133 --> 00:06:09.660
dirname and all that global stuff
because it's attached that way.

111
00:06:09.660 --> 00:06:12.670
So, using the exports keyword,
we're able to export individual things,

112
00:06:12.670 --> 00:06:16.770
just attach it to the exports object and
then now we can require it.

113
00:06:16.770 --> 00:06:20.580
Should be exports, not export.

114
00:06:20.580 --> 00:06:24.980
And then, alternatively, we can also
do module.exports which is just like,

115
00:06:24.980 --> 00:06:27.100
I'm just gonna expose
this one module here.

116
00:06:30.550 --> 00:06:34.706
Exports is an object that we can attach
different pieces of our code to.

117
00:06:34.706 --> 00:06:39.560
Module.exports is the entire object,
and we're defining it differently.

118
00:06:39.560 --> 00:06:42.100
So it's kind of the same thing,
whereas exports we're like,

119
00:06:42.100 --> 00:06:46.840
let's put a setup function here and enable
function here, a ready function here.

120
00:06:46.840 --> 00:06:50.870
That's the same thing if we said
module.exports, which is an object and

121
00:06:50.870 --> 00:06:52.040
then putting all these methods on it.

122
00:06:53.430 --> 00:06:56.916
So you can use whichever syntax you want,
they're both trying to do the same thing.

123
00:07:01.636 --> 00:07:02.797
&gt;&gt; Speaker 1: Any questions on that?

124
00:07:07.516 --> 00:07:12.446
&gt;&gt; Speaker 1: Okay, so
using exports objects on a module,

125
00:07:12.446 --> 00:07:17.126
we can expose our code
to be require later.

126
00:07:17.126 --> 00:07:18.960
&gt;&gt; Speaker 2: Did pop a question here?

127
00:07:18.960 --> 00:07:22.360
Do you think Node will support
ES6 style modules in addition or

128
00:07:22.360 --> 00:07:25.780
replacing CommonJS style modules.

129
00:07:25.780 --> 00:07:26.690
&gt;&gt; Speaker 1: That's a good question.

130
00:07:26.690 --> 00:07:30.870
I don't know,
well I mean they're using V8 internally.

131
00:07:30.870 --> 00:07:33.390
So when V8 keeps getting updated, so

132
00:07:33.390 --> 00:07:36.818
it's actually a really debatable
question because Node and

133
00:07:36.818 --> 00:07:42.840
io.js is this big divergence between
Node and a different version of Node.

134
00:07:42.840 --> 00:07:47.130
A group of people Node and made something
called io.js because they were tired of

135
00:07:47.130 --> 00:07:51.092
Node not being updated readily and not
keeping up with security updates with V8.

136
00:07:51.092 --> 00:07:54.356
So io.js made it their practice
to keep everything new and

137
00:07:54.356 --> 00:07:56.832
start implementing ES2015 features.

138
00:07:56.832 --> 00:08:00.481
Then now, there's news of io.js
being merged back into Node,

139
00:08:00.481 --> 00:08:03.460
some of those features are coming along.

140
00:08:03.460 --> 00:08:06.640
Actually in Node version 12,
if you use strict,

141
00:08:06.640 --> 00:08:10.210
you actually get some ES2015 features,
but not all of them.

142
00:08:10.210 --> 00:08:13.790
So, because of that, I would say that
yeah, they probably will support

143
00:08:13.790 --> 00:08:16.490
the ES2015 modules because they're
already showing support for

144
00:08:16.490 --> 00:08:19.310
the ES2015 features that exist today.

145
00:08:19.310 --> 00:08:21.160
So when that's gonna happen?

146
00:08:21.160 --> 00:08:23.862
Not sure.
They might have a roadmap for it, but

147
00:08:23.862 --> 00:08:28.206
yeah, they definitely will get there
if they continue to rely on V8.

148
00:08:28.206 --> 00:08:30.360
&gt;&gt; Speaker 2: A couple
more popping in here.

149
00:08:30.360 --> 00:08:36.901
What are the pros and
cons of module.exports versus exports?

150
00:08:36.901 --> 00:08:37.414
&gt;&gt; Speaker 1: Yep, so

151
00:08:37.414 --> 00:08:41.570
module.exports, once you do that
you cannot export anything else.

152
00:08:41.570 --> 00:08:46.527
So once you do a module that exports, you
cannot in that same file do exports.this,

153
00:08:46.527 --> 00:08:47.365
that's it.

154
00:08:47.365 --> 00:08:50.320
Module.exports is the only thing
that's going to be exported.

155
00:08:50.320 --> 00:08:58.110
Using exports just means that you're,
when you require in the next file,

156
00:08:58.110 --> 00:09:03.920
let's say we exported a lot
of stuff on this module, then

157
00:09:03.920 --> 00:09:08.430
this variable in my module will always be
an object because exports is an object.

158
00:09:08.430 --> 00:09:13.030
So we said exports.setup,
exports.enable, exports.ready, and

159
00:09:13.030 --> 00:09:17.720
then we just require this file
config.js this my module would be

160
00:09:17.720 --> 00:09:22.730
an object that has a .setup property,
.enable property, .ready property.

161
00:09:22.730 --> 00:09:27.750
Whereas if we use like module.exports we
can set this file to be whatever we want.

162
00:09:27.750 --> 00:09:29.360
So we don't have to put
an object here we can just say,

163
00:09:29.360 --> 00:09:34.465
well let's just put the number 3, and then
when we require it this value will be 3.

164
00:09:36.760 --> 00:09:41.140
So using exports, there'll always
be an export when you require it.

165
00:09:41.140 --> 00:09:45.205
Using module.exports,
it'll be whatever you export on

166
00:09:45.205 --> 00:09:52.090
module.exports.

167
00:09:52.090 --> 00:09:56.543
&gt;&gt; Speaker 2: Can you assign
a single value to module.exports?

168
00:09:56.543 --> 00:10:02.303
&gt;&gt; Speaker 1: Yep,
you can put any value you want.

169
00:10:02.303 --> 00:10:07.183
Except you can't say,
module.exports = exports.

170
00:10:07.183 --> 00:10:13.743
Or you can't say module.exports = module.

171
00:10:13.743 --> 00:10:14.983
Well, I guess you could.

172
00:10:14.983 --> 00:10:15.783
You would probably have some side effects.

173
00:10:15.783 --> 00:10:17.040
But, yeah,
you could put whatever you want there.

