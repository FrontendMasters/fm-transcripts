WEBVTT

1
00:00:00.000 --> 00:00:04.413
[MUSIC]

2
00:00:04.413 --> 00:00:05.853
&gt;&gt; Speaker 1: User model like I said,
all it has is a username.

3
00:00:05.853 --> 00:00:08.073
This type is string,
it's unique, it's also required.

4
00:00:08.073 --> 00:00:15.523
Done, all right.

5
00:00:15.523 --> 00:00:20.659
So if we wanted username to be, or
actually let's just keep username.

6
00:00:20.659 --> 00:00:25.164
And let's say we wanted to
also have a first name or

7
00:00:25.164 --> 00:00:30.649
let's say we wanted to have an address for
the user, right?

8
00:00:30.649 --> 00:00:35.649
And we want it to be an object
because somebody brought this up.

9
00:00:35.649 --> 00:00:40.579
How do we know if it's a nested object or
how to we know just defining the type?

10
00:00:40.579 --> 00:00:42.099
So if I had an address,

11
00:00:42.099 --> 00:00:46.650
what I'm about to do now is gonna
different from what's up here.

12
00:00:46.650 --> 00:00:48.645
This is just saying I
only have a property,

13
00:00:48.645 --> 00:00:51.930
its value is a string and
it's validated by this.

14
00:00:51.930 --> 00:00:54.830
But by coming out here saying,
hey, I have an address and

15
00:00:54.830 --> 00:00:59.400
it also has a state property, just by
doing that or I'll just say string.

16
00:01:00.910 --> 00:01:05.200
I'm now telling Mongoose that,
address is actually an object, and

17
00:01:05.200 --> 00:01:06.922
it has a state property
whose type is string.

18
00:01:08.590 --> 00:01:10.340
Just by doing that.

19
00:01:10.340 --> 00:01:14.420
But if I did this, type: String,

20
00:01:14.420 --> 00:01:20.340
it now is like, address is not an object.

21
00:01:20.340 --> 00:01:20.990
It's actually a string.

22
00:01:23.230 --> 00:01:23.858
You see the difference?

23
00:01:23.858 --> 00:01:24.979
It's the keyword type.

24
00:01:24.979 --> 00:01:25.890
That's what I'm trying to say.

25
00:01:28.620 --> 00:01:32.660
The keyword type is saying, like okay,
actually address is a string.

26
00:01:32.660 --> 00:01:36.660
Whereas this is like, no, no,
address is an object and has a state.

27
00:01:36.660 --> 00:01:37.720
It was a string.

28
00:01:37.720 --> 00:01:43.939
And then for the state, we can do,
yep, it's a string, or I'm sorry.

29
00:01:48.059 --> 00:01:50.616
&gt;&gt; Speaker 1: And it's required and
you can do all that stuff too, but

30
00:01:50.616 --> 00:01:53.938
then you're like, now you're defining
like another schema almost and

31
00:01:53.938 --> 00:01:57.041
you can just have a state schema
somewhere else and bring it in here,

32
00:01:57.041 --> 00:01:59.515
which would probably be better,
nested documents.

33
00:01:59.515 --> 00:02:03.160
So you could do that.

34
00:02:03.160 --> 00:02:07.550
Also the other thing is what if you
wanted to use the type property for

35
00:02:07.550 --> 00:02:08.270
the property name?

36
00:02:08.270 --> 00:02:12.910
What if the user schema had a type name,
like it had a property called type.

37
00:02:12.910 --> 00:02:15.280
So I was like, yeah, it's type.

38
00:02:15.280 --> 00:02:16.250
And I'll put string.

39
00:02:16.250 --> 00:02:20.100
That's not gonna work because
that's the keywork type.

40
00:02:20.100 --> 00:02:24.930
So a way to get around that,
you'd have to use an object literal and

41
00:02:24.930 --> 00:02:29.840
then you have to put type again, just
like we did up top, and then say String.

42
00:02:31.690 --> 00:02:34.580
So that means I have a property
called type whose type is String,

43
00:02:34.580 --> 00:02:35.499
if you wanted that.

44
00:02:41.709 --> 00:02:45.760
&gt;&gt; Speaker 1: Or
just not use the word type for strings.

45
00:02:45.760 --> 00:02:46.610
You got a question, Mark?

46
00:02:46.610 --> 00:02:48.015
&gt;&gt; Speaker 2: There was
a question that came up.

47
00:02:48.015 --> 00:02:55.157
They're using nodeman and
they kept reasserting the server.

48
00:02:55.157 --> 00:02:58.340
Do they keep open ten
concurrent connections?

49
00:02:58.340 --> 00:03:00.992
&gt;&gt; Speaker 1: No, no, when it stops,
when the server stops,

50
00:03:00.992 --> 00:03:02.756
the database will stop, yeah.

51
00:03:07.476 --> 00:03:08.536
&gt;&gt; Speaker 2: And then the other one.

52
00:03:08.536 --> 00:03:14.016
Should Mongo fields never
reference Mongoose keywords?

53
00:03:14.016 --> 00:03:17.155
&gt;&gt; Speaker 1: That's a good way to live.

54
00:03:17.155 --> 00:03:19.410
I've always lived that way and
it worked out for me.

55
00:03:20.900 --> 00:03:25.510
So, yes, I would not have my fields
reference keywords, just to avoid that.

56
00:03:25.510 --> 00:03:26.910
Just come up with another name.

57
00:03:26.910 --> 00:03:29.990
But if you absolutely
have to use the keyword,

58
00:03:29.990 --> 00:03:32.310
then I think the go-to is
to do something like this.

59
00:03:32.310 --> 00:03:36.064
You give it the name, make sure you
create the object literal syntax, and

60
00:03:36.064 --> 00:03:41.250
then you specifically say its type and
that, I think that will escape

61
00:03:41.250 --> 00:03:45.830
any type of keyword
reservation in Mongoose.

62
00:03:45.830 --> 00:03:52.069
But to completely avoid it,
just don't use it.

63
00:03:52.069 --> 00:03:52.929
Any questions on this one?

64
00:03:52.929 --> 00:03:53.749
This is pretty straightforward.

65
00:03:53.749 --> 00:03:58.379
It's a user collection,
which will be users collection,

66
00:03:58.379 --> 00:04:00.625
get the schema, export it.

67
00:04:00.625 --> 00:04:06.480
Post-model, this is a little bit crazier,
so string.

68
00:04:08.000 --> 00:04:09.130
The title is a string.

69
00:04:09.130 --> 00:04:10.240
It's required and it's also unique.

70
00:04:11.700 --> 00:04:14.760
The text or the content of the blog,
I decided not to make it unique.

71
00:04:14.760 --> 00:04:16.580
If you made it unique, that's fine.

72
00:04:16.580 --> 00:04:17.930
Type string required true.

73
00:04:19.610 --> 00:04:23.600
And then for author,
that should not be an array.

74
00:04:23.600 --> 00:04:24.470
I don't why that's an array.

75
00:04:25.600 --> 00:04:30.266
Should just be an object and its type is,

76
00:04:30.266 --> 00:04:35.492
let me put this on another line,
there we go.

77
00:04:38.918 --> 00:04:41.720
&gt;&gt; Speaker 1: Cool, its type is
gonna be Schema.Types.ObjectID.

78
00:04:41.720 --> 00:04:46.580
The reason I put schema here cuz I already
set for our schema equals Mongoose.Schema.

79
00:04:46.580 --> 00:04:50.380
If you didn't do that then it'll
be mongoose.Schema.Types.ObjectID.

80
00:04:50.380 --> 00:04:52.130
I just aliased it up here as that.

81
00:04:53.710 --> 00:04:57.060
So Types.ObjectId is its type,
its reference

82
00:04:58.570 --> 00:05:03.090
is gonna be the user
collection that we made here.

83
00:05:10.465 --> 00:05:11.979
&gt;&gt; Speaker 1: I guess this
should also be required too.

84
00:05:20.050 --> 00:05:27.203
&gt;&gt; Speaker 1: And then categories
is gonna be an array of object

85
00:05:27.203 --> 00:05:33.658
IDs whose reference is
the category model or

86
00:05:33.658 --> 00:05:39.429
the category collection I should say.

87
00:05:39.429 --> 00:05:40.500
We don't have to put unique here.

88
00:05:41.980 --> 00:05:44.670
Just like we didn't have to put
unique here because the object id's

89
00:05:44.670 --> 00:05:45.529
are already unique.

90
00:05:45.529 --> 00:05:49.391
We don't have to specify that the things
must be unique because they're already

91
00:05:49.391 --> 00:05:53.450
guaranteed to be unique, cuz that's what
Mongo does, creates unique object IDs.

92
00:05:53.450 --> 00:05:56.929
So if it didn't do that very well,
I don't think we would be using it today.

93
00:06:00.769 --> 00:06:01.792
&gt;&gt; Speaker 1: It wouldn't exist.

94
00:06:01.792 --> 00:06:02.620
Nobody would use it.

95
00:06:02.620 --> 00:06:06.989
That's like one thing a database should
do very well, is make unique IDs.

96
00:06:09.790 --> 00:06:11.250
Cool, any questions on
what's going on in here?

97
00:06:13.859 --> 00:06:14.420
&gt;&gt; Speaker 1: Nope.

98
00:06:14.420 --> 00:06:18.006
Okay.
And then category model, pretty simple,

99
00:06:18.006 --> 00:06:24.960
it's got a name, String, required, true,
unique, and then register category.

100
00:06:24.960 --> 00:06:26.589
One thing I did want to talk about,
though,

101
00:06:26.589 --> 00:06:30.300
in the post model was the different types
of relationships that are going on.

102
00:06:30.300 --> 00:06:33.619
All right, so
I've mentioned it a little bit.

103
00:06:33.619 --> 00:06:37.790
So, alternatively we could have did the
inverse or we could've did both actually.

104
00:06:37.790 --> 00:06:43.300
So, right now the post schema knows
about the author who wrote it or

105
00:06:43.300 --> 00:06:48.860
the user who wrote it, but the user knows
nothing about the post that it created.

106
00:06:50.722 --> 00:06:54.990
All right, so how would I know
what post the user has written?

107
00:06:54.990 --> 00:06:57.448
If I wanted let, go,
look at the user's profile.

108
00:06:57.448 --> 00:06:59.510
Like, all right, here's all the block
post this user has written,

109
00:06:59.510 --> 00:07:00.070
how would I know that?

110
00:07:01.740 --> 00:07:02.360
Does anybody know?

111
00:07:02.360 --> 00:07:08.639
Anybody's ever used databases?

112
00:07:08.639 --> 00:07:10.779
&gt;&gt; Speaker 2: So the problem
has reference back to the user.

113
00:07:10.779 --> 00:07:12.220
&gt;&gt; Speaker 1: Exactly.

114
00:07:12.220 --> 00:07:14.860
Post model has a reference back to the
user, so I would just go to the post and

115
00:07:14.860 --> 00:07:20.100
be, give me all the post who has
an author, whose object ID is this.

116
00:07:20.100 --> 00:07:21.900
All right, and
it'll give you back all the posts.

117
00:07:21.900 --> 00:07:24.750
The user doesn't need to
know what post it made, but

118
00:07:24.750 --> 00:07:28.530
if I decided to do that, if I just came
in here and was like, you know what?

119
00:07:28.530 --> 00:07:33.981
You're also gonna have
an array of post IDs,

120
00:07:33.981 --> 00:07:38.714
right, and you're gonna be objects,

121
00:07:38.714 --> 00:07:42.024
ref, posts and objectID.

122
00:07:47.664 --> 00:07:51.322
&gt;&gt; Speaker 1: All right, so if I did that,
does anybody know what that's called,

123
00:07:51.322 --> 00:07:52.215
what I just did?

124
00:07:52.215 --> 00:07:53.195
&gt;&gt; Speaker 2: Inverse association?

125
00:07:53.195 --> 00:07:55.055
&gt;&gt; Speaker 1: Inverse association?

126
00:07:55.055 --> 00:07:59.255
Yeah, I wouldn't even think of that,
but yeah, that's true.

127
00:07:59.255 --> 00:08:01.675
There's another term that I'm looking for.

128
00:08:01.675 --> 00:08:03.034
So specifically relational databases.

129
00:08:03.034 --> 00:08:11.715
&gt;&gt; [INAUDIBLE]
[INAUDIBLE] [INAUDIBLE]

130
00:08:11.715 --> 00:08:14.400
&gt;&gt; Speaker 1: It's denormalization, right?

131
00:08:14.400 --> 00:08:15.570
I just denormalized the data.

132
00:08:16.660 --> 00:08:19.470
It was normalized before cuz
there was only one way for

133
00:08:19.470 --> 00:08:20.970
me to access a certain type of data.

134
00:08:20.970 --> 00:08:23.230
Now there's two ways for
me to access the same data.

135
00:08:23.230 --> 00:08:26.320
So now I can ask the users about,
where are your posts, and now I can ask

136
00:08:26.320 --> 00:08:29.360
the posts about where your users are,
so it's two ways to get the same data.

137
00:08:29.360 --> 00:08:33.760
All right, so that's a common thing,
people will set up their databases and

138
00:08:33.760 --> 00:08:35.230
then when things get crazy
they'll just come in and

139
00:08:35.230 --> 00:08:36.690
they'll just denormalize it, all right.

140
00:08:38.770 --> 00:08:43.890
So you could do that, but
I recommend not doing this because,

141
00:08:43.890 --> 00:08:44.860
let's just think about this.

142
00:08:44.860 --> 00:08:48.660
So if we just have one user
in here who made ten posts,

143
00:08:48.660 --> 00:08:49.960
let's just think about that.

144
00:08:49.960 --> 00:08:53.520
The user made ten posts, and I come and
create a UserSchema for that one user,

145
00:08:53.520 --> 00:08:56.820
and I also wanna populate all the posts.

146
00:08:56.820 --> 00:09:00.360
Populate means put all the posts,
get the references for these posts, and

147
00:09:00.360 --> 00:09:01.900
actually place them in this array.

148
00:09:01.900 --> 00:09:04.360
It'll actually go get the post objects,
and place them in here.

149
00:09:04.360 --> 00:09:09.318
And if I did that, and that's the only
stuff I had in my database, just by asking

150
00:09:09.318 --> 00:09:13.759
that one user for all its posts,
I now just pulled the entire database.

151
00:09:16.059 --> 00:09:18.909
&gt;&gt; Speaker 1: That's the entire database,
that one user and all its 30 posts,

152
00:09:18.909 --> 00:09:19.860
the entire database.

153
00:09:22.370 --> 00:09:24.490
The same thing could be
said if I did the inverse.

154
00:09:26.150 --> 00:09:32.180
So if I got rid of this and I was on the
post model and all I had on here, sorry.

155
00:09:32.180 --> 00:09:37.880
The same couldn't be said for this, is
because it's the one to many relationship.

156
00:09:37.880 --> 00:09:40.860
So because of the one to many
relationship, whereas post is the many

157
00:09:40.860 --> 00:09:44.950
side and user is the one side, it's
better to put the reference on this side.

158
00:09:44.950 --> 00:09:50.670
So that way now, let's say I
have 30 posts in my database and

159
00:09:50.670 --> 00:09:54.870
only one user, if I go to the post, I'm
like, all right, I wanna get this post,

160
00:09:54.870 --> 00:09:59.180
and I also wanna populate the user, and I
pull that down, I'm not pulling the entire

161
00:09:59.180 --> 00:10:02.190
database, cuz there's still 29 other
posts that don't belong to this user.

162
00:10:02.190 --> 00:10:05.119
Whereas the other side, if I did do that,
it would be the entire database.

163
00:10:07.019 --> 00:10:08.959
&gt;&gt; Speaker 1: Guys,
get what I'm saying there?

164
00:10:08.959 --> 00:10:13.620
Okay, so small things,
just databasing in general.

165
00:10:13.620 --> 00:10:15.040
I just wanna talk about that.

166
00:10:17.010 --> 00:10:18.630
Great.
So any questions on

167
00:10:18.630 --> 00:10:21.450
the schemas that we made and
the relationships between them?

168
00:10:22.680 --> 00:10:26.660
So again, we have a one to many
relationship with the authors.

169
00:10:26.660 --> 00:10:30.640
So a user can have many posts, but
a post can only belong to one user.

170
00:10:31.790 --> 00:10:35.210
&gt;&gt; Speaker 2: Wouldn't you want
a reference to category in the posts?

171
00:10:35.210 --> 00:10:36.930
&gt;&gt; Speaker 1: Would we want
a reference to category?

172
00:10:36.930 --> 00:10:38.100
Would we not, or would we?

173
00:10:38.100 --> 00:10:38.670
&gt;&gt; Speaker 2: You have one there?

174
00:10:38.670 --> 00:10:39.546
&gt;&gt; Speaker 1: Yeah.
&gt;&gt; Speaker 2: We have one there, yeah.

175
00:10:39.546 --> 00:10:40.305
[CROSSTALK] I'm sorry.

176
00:10:40.305 --> 00:10:41.070
&gt;&gt; Speaker 1: Yeah.

177
00:10:41.070 --> 00:10:41.770
&gt;&gt; Speaker 2: Nevermind.

178
00:10:41.770 --> 00:10:43.420
&gt;&gt; Speaker 1: Right, yeah.
So, we definitely wanna put the reference

179
00:10:43.420 --> 00:10:45.940
to the categories in the post and
not the other way around.

180
00:10:45.940 --> 00:10:47.090
We don't wanna put them here.

181
00:10:47.090 --> 00:10:49.038
Right?
Cuz then it would be like,

182
00:10:49.038 --> 00:10:50.799
that would just be tough.

183
00:10:53.759 --> 00:10:54.959
&gt;&gt; Speaker 1: Scott.
&gt;&gt; Speaker 2: Yeah.

184
00:10:54.959 --> 00:10:57.079
&gt;&gt; Speaker 1: Json example for posts.

185
00:10:57.079 --> 00:10:57.838
&gt;&gt; Speaker 2: Yes.

186
00:10:57.838 --> 00:11:02.253
You have an array of three object ids.

187
00:11:02.253 --> 00:11:06.500
How would you specify that in a schema
that you can only have three?

188
00:11:06.500 --> 00:11:07.130
&gt;&gt; Speaker 1: Good question.
So

189
00:11:07.130 --> 00:11:08.940
the syntax is very confusing there, right.

190
00:11:08.940 --> 00:11:10.930
And it's not only three,
I just put three in there.

191
00:11:10.930 --> 00:11:12.029
It's an arbitrary number.

192
00:11:12.029 --> 00:11:16.820
I just wanted to show you that
you can have- The requirements

193
00:11:16.820 --> 00:11:18.061
say- [CROSSTALK] That's very true,

194
00:11:18.061 --> 00:11:21.129
I just wanted to show you that it can be
multiple, but it definitely isn't three.

195
00:11:21.129 --> 00:11:24.744
So, when you have this array here,
and then you just place in this object

196
00:11:24.744 --> 00:11:29.270
describing the type, that means, it's
not saying you can only have one here.

197
00:11:29.270 --> 00:11:32.346
It's just saying that whatever
goes in here must look like this.

198
00:11:32.346 --> 00:11:33.120
This is the blueprint for

199
00:11:33.120 --> 00:11:35.330
what anything that comes in this array,
that's what that means.

200
00:11:35.330 --> 00:11:36.307
So, you can have as many as you want.

201
00:11:36.307 --> 00:11:38.207
Yeah, good question.

202
00:11:41.967 --> 00:11:43.610
&gt;&gt; Speaker 1: Any other questions?

203
00:11:43.610 --> 00:11:44.850
Yo.
&gt;&gt; Speaker 2: Can you do regular

204
00:11:44.850 --> 00:11:50.110
expressions and it has to match this
regular expression this string does?

205
00:11:50.110 --> 00:11:51.740
&gt;&gt; Speaker 1: Yes,
you can do regular expressions.

206
00:11:53.250 --> 00:11:56.220
I'm not exactly sure how you
do them on the schema but

207
00:11:56.220 --> 00:11:59.670
you can do them in what's
called a lifecycle.

208
00:11:59.670 --> 00:12:00.850
&gt;&gt; Speaker 2: This is
just JavaScript though.

209
00:12:00.850 --> 00:12:02.310
Can you write an expression?

210
00:12:03.800 --> 00:12:05.280
&gt;&gt; Speaker 1: Yeah, but
I don't know the keyword.

211
00:12:05.280 --> 00:12:09.777
I don't know if it's regex and
then you say some regex here?

212
00:12:09.777 --> 00:12:12.557
You know what I mean?
I don't know the actual keyword here that

213
00:12:12.557 --> 00:12:14.618
would allow you to write that regex.

214
00:12:14.618 --> 00:12:16.676
I'm sure it does exist.

215
00:12:16.676 --> 00:12:17.910
I just haven't used it.

216
00:12:19.700 --> 00:12:23.600
If I were to do it, I would've do
the regex like in a customer validator.

217
00:12:23.600 --> 00:12:27.050
So Mongoose actually has middleware
just like Express does and

218
00:12:27.050 --> 00:12:30.200
we can set up middleware to do
things before things get saved.

219
00:12:30.200 --> 00:12:32.690
After things get saved or
before they're creating or

220
00:12:32.690 --> 00:12:34.150
after they get created we could do things.

221
00:12:34.150 --> 00:12:36.100
So before something gets saved,

222
00:12:36.100 --> 00:12:39.770
I might run it through a regex, make sure
it does this and if not, don't save it.

223
00:12:40.890 --> 00:12:43.680
Yep?
&gt;&gt; Speaker 2: So if you had an iffy on

224
00:12:43.680 --> 00:12:47.390
true there, that would work, right?

225
00:12:47.390 --> 00:12:48.770
&gt;&gt; Speaker 1: If you had a iffy on true?

226
00:12:48.770 --> 00:12:52.200
&gt;&gt; Speaker 2: And you just returned true
because and you just write JavaScript.

227
00:12:53.320 --> 00:12:56.050
But can you reference the parent?

228
00:12:56.050 --> 00:12:58.860
Can you reference whatever
the value of title is?

229
00:12:58.860 --> 00:13:00.310
Did you follow all that?

230
00:13:00.310 --> 00:13:02.594
&gt;&gt; Speaker 1: No, I'm confused.

231
00:13:02.594 --> 00:13:09.430
So these are keywords in Mongoose, right?

232
00:13:09.430 --> 00:13:13.540
It's like these are cousin validators
that Mongoose has built into the schema.

233
00:13:13.540 --> 00:13:16.150
And by using that keyword and
putting true or

234
00:13:16.150 --> 00:13:18.130
false, it's enabling or just disabling it.

235
00:13:19.920 --> 00:13:20.449
&gt;&gt; Speaker 2: Yeah, I get that.

236
00:13:20.449 --> 00:13:21.469
I'll show it to you in a bit.

237
00:13:21.469 --> 00:13:22.009
&gt;&gt; Speaker 1: Okay.

238
00:13:22.009 --> 00:13:23.869
&gt;&gt; Speaker 2: And you can give
me your what your thoughts are.

239
00:13:23.869 --> 00:13:27.449
&gt;&gt; Speaker 1: I think exactly what you
want is exactly what I was saying.

240
00:13:27.449 --> 00:13:28.169
It's middleware.

241
00:13:28.169 --> 00:13:30.076
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Speaker 1: Because at this time,

242
00:13:30.076 --> 00:13:33.330
right now, there is no value,
it's just a type.

243
00:13:33.330 --> 00:13:35.770
You won't know the values until
somebody tries to save it.

244
00:13:35.770 --> 00:13:36.610
And at that time,

245
00:13:36.610 --> 00:13:41.190
we're going to check to make sure that
it follows this regex before it's saved.

246
00:13:41.190 --> 00:13:42.070
That's middleware.

247
00:13:42.070 --> 00:13:43.079
&gt;&gt; Speaker 2: Yeah, gotcha, okay.

248
00:13:43.079 --> 00:13:47.915
&gt;&gt; Speaker 1: Yeah,
that is- We'll get into that when we start

249
00:13:47.915 --> 00:13:50.731
doing authentication probably.

