WEBVTT

1
00:00:00.000 --> 00:00:03.736
[MUSIC]

2
00:00:03.736 --> 00:00:07.764
&gt;&gt; Scott Moss: So now if we go back and
look at those other methods,

3
00:00:07.764 --> 00:00:13.292
like an auth.js, like decodeToken and
verify user, or I'm sorry,

4
00:00:13.292 --> 00:00:19.770
decodeToken and getFreshUser,
we're actually about to use these now.

5
00:00:19.770 --> 00:00:23.220
But we gotta think about like
it's gonna go down to like what

6
00:00:23.220 --> 00:00:25.280
resources do we want to protect.

7
00:00:25.280 --> 00:00:26.950
So let's just go and look at them.

8
00:00:26.950 --> 00:00:31.050
Let's just go look at,
let's go look at categories.

9
00:00:31.050 --> 00:00:33.540
Let's look at the category routes.

10
00:00:34.850 --> 00:00:38.100
Are there any routes
in here that you think

11
00:00:38.100 --> 00:00:41.449
that you should be
authenticated to access.

12
00:00:41.449 --> 00:00:46.230
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Scott Moss: You should definitely

13
00:00:46.230 --> 00:00:49.000
authenticate bit recruiter category,
I agree.

14
00:00:49.000 --> 00:00:49.660
Anything else?

15
00:00:49.660 --> 00:00:50.630
&gt;&gt; Speaker 2: Delete?

16
00:00:50.630 --> 00:00:52.950
&gt;&gt; Scott Moss: Definitely should
be authenticated to delete, sure.

17
00:00:54.630 --> 00:00:55.310
&gt;&gt; Speaker 2: And probably put.

18
00:00:56.430 --> 00:00:57.630
&gt;&gt; Scott Moss: Put a delete category?

19
00:00:57.630 --> 00:00:58.130
For sure.

20
00:01:02.047 --> 00:01:02.667
&gt;&gt; Speaker 2: That's about it.

21
00:01:02.667 --> 00:01:05.394
&gt;&gt; Scott Moss: Everybody else should
be able get all the categories or

22
00:01:05.394 --> 00:01:06.346
get one category.

23
00:01:06.346 --> 00:01:07.410
Yeah, I agree.

24
00:01:07.410 --> 00:01:14.450
And then what about let's
go to the postRoute.

25
00:01:14.450 --> 00:01:15.810
And then for this one.

26
00:01:15.810 --> 00:01:21.884
Same favor something different
&gt;&gt; Scott Moss: About the same,

27
00:01:21.884 --> 00:01:22.990
yeah it's about the same.

28
00:01:22.990 --> 00:01:25.750
Everybody should know that get one,
and get all.

29
00:01:25.750 --> 00:01:29.790
But only all people should be able
to update, delete, and create.

30
00:01:32.380 --> 00:01:37.319
And for users,
there's some extra stuff going on here.

31
00:01:38.720 --> 00:01:39.991
So I'm gonna add it up.

32
00:01:43.858 --> 00:01:44.785
&gt;&gt; Scott Moss: Yeah.
By the way.

33
00:01:44.785 --> 00:01:47.211
&gt;&gt; [NOISE].

34
00:01:47.211 --> 00:01:49.680
&gt;&gt; Scott Moss: Yup, I did it.

35
00:01:49.680 --> 00:01:53.841
Right.
And then for users, pull out this one.

36
00:01:57.581 --> 00:01:59.541
&gt;&gt; Speaker 2: You probably don't
want to get all your user.

37
00:01:59.541 --> 00:02:00.981
&gt;&gt; Scott Moss: Probably don't
want to get all the users.

38
00:02:04.741 --> 00:02:05.850
&gt;&gt; Scott Moss: What about get one user?

39
00:02:05.850 --> 00:02:09.120
Like what if I want to see,
what if I go to the blog,

40
00:02:09.120 --> 00:02:13.560
and there was a link in there that
says look at all of our authors?

41
00:02:13.560 --> 00:02:16.030
All right, is that get all users?

42
00:02:17.230 --> 00:02:20.360
All right, so there may be a way,
maybe you want to get all users but

43
00:02:20.360 --> 00:02:24.210
you don't want to show off the information
User schema, like their passwords and

44
00:02:24.210 --> 00:02:25.990
stuff like that [LAUGH], right.

45
00:02:25.990 --> 00:02:27.300
Here's their password.

46
00:02:27.300 --> 00:02:28.637
What is this there?

47
00:02:33.396 --> 00:02:37.796
&gt;&gt; Scott Moss: So maybe, post.

48
00:02:37.796 --> 00:02:45.300
So we should be able to create a user
&gt;&gt; Speaker 3: Anyone

49
00:02:45.300 --> 00:02:46.857
can create in here right?

50
00:02:46.857 --> 00:02:51.270
&gt;&gt; Scott Moss: Yeah, in like, on a real
blog no way, you'd have to be invited.

51
00:02:51.270 --> 00:02:52.490
Right, I have to like
type in your email and

52
00:02:52.490 --> 00:02:55.360
be like you're invited to write
on the blog, like Wordpress.

53
00:02:55.360 --> 00:02:58.040
But in our scenario yes, anybody can
go to our website and sign up and

54
00:02:58.040 --> 00:02:59.580
start publishing.

55
00:02:59.580 --> 00:03:02.916
So yeah, anybody should be able to create.

56
00:03:02.916 --> 00:03:04.737
Whereas that was different with the post,

57
00:03:04.737 --> 00:03:06.716
only authenticator should
be able to create.

58
00:03:06.716 --> 00:03:08.233
So that's why I wanna talk about it.

59
00:03:08.233 --> 00:03:13.570
What about updated user,
who should be able to do that?

60
00:03:14.720 --> 00:03:15.830
&gt;&gt; Speaker 4: Only that user?

61
00:03:15.830 --> 00:03:16.950
&gt;&gt; Scott Moss: Only that user, so

62
00:03:16.950 --> 00:03:19.470
not only should you authenticate it,
but you can only update yourself.

63
00:03:19.470 --> 00:03:21.680
All right, so that's different.

64
00:03:21.680 --> 00:03:26.220
But what about if I'm like,
an admin and I wanna update your stuff.

65
00:03:26.220 --> 00:03:27.410
&gt;&gt; Speaker 4: You go on to the database.

66
00:03:27.410 --> 00:03:30.370
&gt;&gt; Scott Moss: [LAUGH] I got
to hear it from the critic.

67
00:03:30.370 --> 00:03:32.750
&gt;&gt; Speaker 4: We're not [INAUDIBLE]
&gt;&gt; Scott Moss: Okay.

68
00:03:32.750 --> 00:03:34.080
Okay.
Yeah, we're not there.

69
00:03:34.080 --> 00:03:37.890
We don't have a role-based authentication
schema anyway, so there is no admin.

70
00:03:37.890 --> 00:03:39.460
It's just we're both users anyway.

71
00:03:39.460 --> 00:03:41.750
So I don't have superpowers.

72
00:03:41.750 --> 00:03:42.252
But what about delete?

73
00:03:48.071 --> 00:03:48.891
&gt;&gt; Scott Moss: Yeah.

74
00:03:48.891 --> 00:03:50.250
Think about that.

75
00:03:50.250 --> 00:03:51.180
It's deep.

76
00:03:52.520 --> 00:03:53.220
How do you authenticate it?

77
00:03:53.220 --> 00:03:55.950
Cause you'll probably do it yourself,
for now.

78
00:03:55.950 --> 00:03:57.800
So I just want you to
think about that stuff.

79
00:03:57.800 --> 00:03:59.319
Cause now you're gonna have
to write the middleware.

80
00:04:00.520 --> 00:04:02.710
In the places that they need to be so
this stuff works.

81
00:04:03.870 --> 00:04:05.160
All right.

82
00:04:05.160 --> 00:04:09.560
So if you go back to off.js, we have,
the two middleware functions that we need

83
00:04:09.560 --> 00:04:12.510
are gonna be decode token and
get fresh user.

84
00:04:12.510 --> 00:04:14.820
But I want you to remember something.

85
00:04:14.820 --> 00:04:19.950
The first thing,
the order is very important here.

86
00:04:19.950 --> 00:04:23.770
There's decode token, it's simply
like the first line of defense.

87
00:04:23.770 --> 00:04:27.310
It's job is to decode the token and
it attached req.user or

88
00:04:27.310 --> 00:04:31.440
it'll attach whatever the object is at
a decoded to that user which in this case

89
00:04:31.440 --> 00:04:33.330
because of sign this is
an object with IDs on it.

90
00:04:33.330 --> 00:04:35.590
So that should be
the first thing that we do.

91
00:04:35.590 --> 00:04:38.820
And then right after that before
we get into the controller

92
00:04:38.820 --> 00:04:40.390
we should get the fresh user.

93
00:04:40.390 --> 00:04:43.330
And that's because if you
go look at our controllers.

94
00:04:43.330 --> 00:04:46.560
Let's just take an example
of user controller.

95
00:04:46.560 --> 00:04:51.790
It's expecting, but not get one.

96
00:04:51.790 --> 00:04:53.900
Because it's gonna ID from there.

97
00:04:53.900 --> 00:04:57.550
But let's see where is one [INAUDIBLE].

98
00:04:57.550 --> 00:04:59.246
Not this one.

99
00:04:59.246 --> 00:05:00.176
Yeah.

100
00:05:00.176 --> 00:05:00.816
No, not this one.

101
00:05:00.816 --> 00:05:01.556
This is a bad post.

102
00:05:11.096 --> 00:05:12.100
&gt;&gt; Scott Moss: Where?

103
00:05:12.100 --> 00:05:12.600
Yeah.
Right here.

104
00:05:13.710 --> 00:05:18.670
So this one right here,
because the posts has like an author feel.

105
00:05:18.670 --> 00:05:25.320
All right, it needs to know what
author is creating it so we didn't

106
00:05:25.320 --> 00:05:29.060
do that on the front end, put the author's
ID there we ought to do that here.

107
00:05:29.060 --> 00:05:32.155
And that would be fine because we
know who the author is because it's

108
00:05:32.155 --> 00:05:35.580
req.user.autosquare.id.

109
00:05:35.580 --> 00:05:38.477
Cuz they're the only ones to create this
post, so they create it and it's there.

110
00:05:42.575 --> 00:05:48.520
&gt;&gt; Scott Moss: So params is a way to get
the ID of the resource that's coming in.

111
00:05:48.520 --> 00:05:53.800
What I'm saying is GetFreshUser will just
attach the user of the incoming request.

112
00:05:53.800 --> 00:05:59.200
It doesn't matter what we hit,
if we use the GetFreshUser middleware,

113
00:05:59.200 --> 00:06:04.040
it will attach the decoded token, it will
search the database for that user and

114
00:06:04.040 --> 00:06:05.220
attach the token to that user.

115
00:06:05.220 --> 00:06:08.300
Which can be helpful in
most controller operations.

116
00:06:08.300 --> 00:06:10.800
Maybe you need access to
the entire user to do things.

117
00:06:10.800 --> 00:06:11.810
It's very helpful.

118
00:06:11.810 --> 00:06:12.830
One place that is very helpful.

119
00:06:12.830 --> 00:06:20.240
Now that we're using
JSON web tokens is that.

120
00:06:20.240 --> 00:06:23.000
Let me ask you this,
how would I get myself?

121
00:06:24.880 --> 00:06:28.790
If all I had was JSON web token on
the client how would I ask the server,

122
00:06:28.790 --> 00:06:31.020
hey give me my own user object.

123
00:06:31.020 --> 00:06:32.907
How would I do that?

124
00:06:32.907 --> 00:06:37.696
We know how to get one user object,
and that's /api/users/id.

125
00:06:37.696 --> 00:06:40.470
I don't have the ID,
all I have is the JSON web token.

126
00:06:41.500 --> 00:06:42.100
So how would I do it?

127
00:06:42.100 --> 00:06:42.680
Yes.

128
00:06:42.680 --> 00:06:44.490
&gt;&gt; Speaker 4: Well if you
decode the token it has an id.

129
00:06:44.490 --> 00:06:46.830
&gt;&gt; Scott Moss: Where would you
decode the token, on client?

130
00:06:46.830 --> 00:06:50.299
&gt;&gt; Speaker 4: On the server,
cuz that's where the secret is.

131
00:06:51.700 --> 00:06:55.460
&gt;&gt; Scott Moss: Right, so like what,
we don't have a request for that.

132
00:06:55.460 --> 00:06:57.390
Well I mean we don't have a controller for
that, so that's what I'm saying.

133
00:06:57.390 --> 00:06:58.190
Like, what would you hit?

134
00:06:58.190 --> 00:07:00.746
What route would you hit to do that?

135
00:07:02.446 --> 00:07:05.146
&gt;&gt; Scott Moss: Cuz if we do a get to that
user, it will give you all the users.

136
00:07:05.146 --> 00:07:11.082
If I do a get/id that will give me the
user with the id, but I don't have the id.

137
00:07:11.082 --> 00:07:12.522
So I can't do one of these.

138
00:07:12.522 --> 00:07:13.582
&gt;&gt; Speaker 4: You would
have to make a new route.

139
00:07:13.582 --> 00:07:14.342
&gt;&gt; Scott Moss: I would
have to make a new route.

140
00:07:14.342 --> 00:07:15.602
Exactly.
What would that route do?

141
00:07:15.602 --> 00:07:16.662
&gt;&gt; Speaker 4: Take the token.

142
00:07:16.662 --> 00:07:18.403
&gt;&gt; Scott Moss: Right.

143
00:07:18.403 --> 00:07:20.515
That route would-
&gt;&gt; Speaker 4: Be like me, and

144
00:07:20.515 --> 00:07:21.983
then it take the-
&gt;&gt; Scott Moss: Exactly.

145
00:07:21.983 --> 00:07:23.202
You would make a slash me.

146
00:07:23.202 --> 00:07:25.382
Which is a common thing
you'll see in my tokens.

147
00:07:25.382 --> 00:07:28.642
So they'll be like, api/user/me.

148
00:07:28.642 --> 00:07:31.580
And all that would do is
just send rec.user back.

149
00:07:31.580 --> 00:07:36.243
That's all it would do, because it would
already use this middleware, get fresh

150
00:07:36.243 --> 00:07:40.716
user, which already found the user
before they went to that /me controller.

151
00:07:40.716 --> 00:07:43.696
So all me would just be like rec.json,
rec.user.

152
00:07:43.696 --> 00:07:45.356
Or rec.json, rec.user.

