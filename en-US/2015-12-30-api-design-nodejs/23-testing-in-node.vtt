WEBVTT

1
00:00:00.000 --> 00:00:03.862
[MUSIC]

2
00:00:03.862 --> 00:00:08.160
&gt;&gt; Scott Moss: So if you want to check
out to Step five, yeah that's it.

3
00:00:10.020 --> 00:00:11.190
We'll hop into testing.

4
00:00:11.190 --> 00:00:16.800
But, before I set you loose and actually
start writing some tests for the lions and

5
00:00:16.800 --> 00:00:21.500
tigers API that we built, let's just walk
through what testing is and how it works.

6
00:00:21.500 --> 00:00:24.970
With Node and Mongo and
the different types of testing, and

7
00:00:24.970 --> 00:00:27.440
what we're actually gonna be testing,
and stuff like that.

8
00:00:29.560 --> 00:00:33.270
So testing is actually
pretty simple in a node.

9
00:00:33.270 --> 00:00:38.020
In my opinion, actually, from testing
other languages and other environments.

10
00:00:38.020 --> 00:00:42.300
And Node is pretty straightforward
compared to other things like for instance

11
00:00:42.300 --> 00:00:46.480
writing test for Android or something like
that, node is actually pretty simple.

12
00:00:46.480 --> 00:00:52.160
Unit tests are very similar to how you
would test in the browser minus the DOM.

13
00:00:52.160 --> 00:00:56.279
So if we were gonna unit test our
JavaScript here on node it would be pretty

14
00:00:56.279 --> 00:01:01.024
much the exact same thing if you were unit
testing in the browser, without the DOM.

15
00:01:01.024 --> 00:01:05.039
For instance, if you providing test for
browser code, four or

16
00:01:05.039 --> 00:01:09.962
five years ago, before Karma came along
and all the other stuff, you would,

17
00:01:09.962 --> 00:01:12.113
you know, use Mocha or Jasmine.

18
00:01:12.113 --> 00:01:15.768
Well probably not Mocha, but something
like Jasmine and it'll generate an HTML

19
00:01:15.768 --> 00:01:19.422
file for you where you loaded up all your
specs and loaded up all your source code,

20
00:01:19.422 --> 00:01:22.753
load up all your dependencies, and
you open that file in the browser, and

21
00:01:22.753 --> 00:01:26.006
then you run the test suite through
there and have a nice UI, right?

22
00:01:26.006 --> 00:01:29.050
And then Karma came along and was like we
can do it from the command line now and

23
00:01:29.050 --> 00:01:31.200
we'll just pipe it to a browser.

24
00:01:31.200 --> 00:01:34.950
But, as far as like the experiences like
writing the test itself it's pretty much

25
00:01:34.950 --> 00:01:39.270
the same and that's mainly due to
the fact that it's still just JavaScript.

26
00:01:39.270 --> 00:01:41.410
So, unit tests are somewhat
the same minus the dom,

27
00:01:41.410 --> 00:01:43.310
which probably makes it
easier cuz there's no dom.

28
00:01:43.310 --> 00:01:45.150
It's just pure function.

29
00:01:45.150 --> 00:01:50.200
Integration testing is what we
actually start testing the API and

30
00:01:50.200 --> 00:01:52.660
what it does when we hit those routes,
right?

31
00:01:52.660 --> 00:01:56.910
So unit testing is testing specific
units in our application like

32
00:01:56.910 --> 00:02:00.620
this function should do this, this object
should have this, stuff like that.

33
00:02:00.620 --> 00:02:04.090
Integration testing is like all right
we're just gonna test the API from

34
00:02:04.090 --> 00:02:08.700
actually hitting this route to see what
the database responds with, right?

35
00:02:08.700 --> 00:02:10.173
We're gonna do integration testing.

36
00:02:10.173 --> 00:02:12.254
We're going to do integration testing,

37
00:02:12.254 --> 00:02:16.237
mainly because the code we've written so
far we haven't written a lot of code,

38
00:02:16.237 --> 00:02:19.520
actually most of the code that we
have written is part of express.

39
00:02:19.520 --> 00:02:22.730
So we start unit testing we'll just
be unit testing what express is

40
00:02:22.730 --> 00:02:25.260
already doing, and
that's already well tested.

41
00:02:25.260 --> 00:02:30.540
We'll just be doing integration testing
to see what our api responds to when we

42
00:02:30.540 --> 00:02:35.360
throw different parameters at it,
and what we expect to come back to.

43
00:02:35.360 --> 00:02:37.270
Any questions so far on that?

44
00:02:41.610 --> 00:02:43.000
Yes.
&gt;&gt; Mark: Is

45
00:02:43.000 --> 00:02:45.900
integration testing a synonym for BDD?
&gt;&gt; Scott Moss: Behavior

46
00:02:45.900 --> 00:02:46.730
driven development?

47
00:02:46.730 --> 00:02:48.780
I wouldn't say it's a synonym.

48
00:02:48.780 --> 00:02:52.830
It's part of BDD, but
I definitely wouldn't say it's a synonym.

49
00:02:52.830 --> 00:02:57.630
BDD is more than just integration testing,
it's just BDD is like a style of testing,

50
00:02:57.630 --> 00:03:01.140
or actually TDD is like test driven
development where like you're gonna write

51
00:03:01.140 --> 00:03:02.070
some tests first.

52
00:03:02.070 --> 00:03:04.320
Like red, green refractor with TDD.

53
00:03:04.320 --> 00:03:06.240
Write a whole bunch of tests and

54
00:03:06.240 --> 00:03:09.030
then have the tests tell you what code
to write to get to get them to pass.

55
00:03:09.030 --> 00:03:14.010
BDD is more like,
we expect this thing to happen so

56
00:03:14.010 --> 00:03:18.830
we are going to write a test to
dictate this entire behavior.

57
00:03:18.830 --> 00:03:24.321
But, yeah, integration testing is part
of BDD but they are not the same thing.

58
00:03:24.321 --> 00:03:28.323
Integration testing is a type of test,
BDD is how you write

59
00:03:28.323 --> 00:03:34.174
tests.
&gt;&gt; Scott Moss: Great,

60
00:03:34.174 --> 00:03:39.263
so a good practice with node in
Express and integration testing

61
00:03:39.263 --> 00:03:45.660
from what I've witnessed is if you export
the app before you're starting it.

62
00:03:45.660 --> 00:03:50.560
So like in our application
that we wrote yesterday.

63
00:03:53.250 --> 00:03:55.010
We were at the bottom
of the file down here,

64
00:03:55.010 --> 00:03:59.970
we were like app.listen,
we're listening to some port or something.

65
00:04:01.880 --> 00:04:03.900
All right,
that's how you start the server.

66
00:04:03.900 --> 00:04:06.320
But when we're testing it,
a good practice is actually to,

67
00:04:06.320 --> 00:04:09.310
instead of listening to the server
right there on that same file.

68
00:04:09.310 --> 00:04:14.050
Let's just export the app so
it can be required somewhere else.

69
00:04:14.050 --> 00:04:18.440
I'll show you why that makes sense but
the big reason is really so

70
00:04:18.440 --> 00:04:21.650
that our tests can
actually use that app and

71
00:04:21.650 --> 00:04:27.200
all the routes on it to make assertions
and go ahead and start the server for us.

72
00:04:27.200 --> 00:04:29.180
So, if we just export
the app before starting it,

73
00:04:29.180 --> 00:04:32.460
we can actually just run the test without
having to start the server manually we can

74
00:04:32.460 --> 00:04:33.630
just have the test do it for us.

75
00:04:35.330 --> 00:04:37.870
So what I'm saying is we set
up our routes like this and

76
00:04:37.870 --> 00:04:39.630
then at the bottom we
would just export the app.

77
00:04:40.690 --> 00:04:44.090
So that also implies that we would have to
make another file that would import this

78
00:04:44.090 --> 00:04:49.690
and start the server, of course, which is
as you'll see is actually pretty good.

79
00:04:49.690 --> 00:04:52.440
Once you see we'll start making
a pretty sophisticated API

80
00:04:52.440 --> 00:04:53.420
that's a good practice as well.

81
00:04:55.690 --> 00:04:57.260
Any questions on that?

82
00:04:57.260 --> 00:05:00.380
Does that not make sense to anybody?

83
00:05:00.380 --> 00:05:02.650
Why I think exporting
the app is a good idea.

84
00:05:02.650 --> 00:05:07.660
We want to expose our entire server
application to like our testing framework.

85
00:05:07.660 --> 00:05:09.060
So if I export it I can do that.

86
00:05:09.060 --> 00:05:12.280
You can also just start the server too and
then export the app.

87
00:05:12.280 --> 00:05:14.123
There's nothing wrong with that but

88
00:05:14.123 --> 00:05:17.401
I would just leave it up to my test
to figure out what it wants to do.

89
00:05:17.401 --> 00:05:21.937
Maybe the test wants to start the server
with a different port or a different

90
00:05:21.937 --> 00:05:29.504
configuration, stuff like that.
&gt;&gt; Scott Moss: So,

91
00:05:29.504 --> 00:05:33.062
strategies for actually testing
our APR are pretty simple too.

92
00:05:33.062 --> 00:05:37.819
It's exactly how you were
testing yesterday, so

93
00:05:37.819 --> 00:05:43.821
we're using like post man or
httppi, you were coming in here,

94
00:05:43.821 --> 00:05:47.446
you were doing something like http and

95
00:05:47.446 --> 00:05:53.360
localhost to your port and
you put like slash tigers, right.

96
00:05:53.360 --> 00:05:54.640
And you do like a get request to that.

97
00:05:54.640 --> 00:05:56.230
And you want to see what comes back.

98
00:05:56.230 --> 00:05:59.020
You actually just, that's what
we're going to do for the test.

99
00:05:59.020 --> 00:06:00.970
But you visually looked at what came back.

100
00:06:00.970 --> 00:06:01.790
You're like, ha ha.

101
00:06:01.790 --> 00:06:03.500
That worked.
That's exactly what I expect it to be.

102
00:06:03.500 --> 00:06:05.660
You looked at the headers, all that stuff.

103
00:06:05.660 --> 00:06:07.513
That's exactly what we're
doing when we write the test.

104
00:06:07.513 --> 00:06:09.210
It just that we're visually
not gonna be looking at it.

105
00:06:09.210 --> 00:06:10.491
The test is gonna be
looking at this stuff.

106
00:06:14.440 --> 00:06:16.840
So we can use a combination
of frameworks like jasmine or

107
00:06:16.840 --> 00:06:19.640
mocha an assertion library
if we don't have one.

108
00:06:19.640 --> 00:06:22.530
So if we use jasmine with
an E that should be E there.

109
00:06:22.530 --> 00:06:24.400
Jasmine has an assertion
library built into it but

110
00:06:24.400 --> 00:06:27.702
if you use mocha you have to provide
your own assertion library, so

111
00:06:27.702 --> 00:06:29.660
we've been using
a combination of that stuff.

112
00:06:29.660 --> 00:06:33.240
And then we're gonna also use
something like supertest.

113
00:06:33.240 --> 00:06:36.560
This is a framework that's
built on top of a framework.

114
00:06:36.560 --> 00:06:41.400
So there's this request framework for
Node that's called superagent.

115
00:06:41.400 --> 00:06:44.390
You can think of it as like the AJAX for
your server.

116
00:06:44.390 --> 00:06:45.980
That's pretty much what it is.

117
00:06:45.980 --> 00:06:47.150
It's like the AJAX for your server.

118
00:06:47.150 --> 00:06:49.240
It's actually built by the same
person who made Express.

119
00:06:49.240 --> 00:06:52.990
So there is this thing called super agent
and then on top of that there's this thing

120
00:06:52.990 --> 00:06:56.140
called super test which allows
us to test our application

121
00:06:56.140 --> 00:06:59.370
also built by the same person who made
express, that's why these two work so

122
00:06:59.370 --> 00:07:02.250
well together, because super test
is made to work with express.

123
00:07:02.250 --> 00:07:07.443
So that's what we're going to use: Mocha,
Chai, and Supertest,

124
00:07:07.443 --> 00:07:12.650
to perform integration testing on
the code that we wrote yesterday.

125
00:07:14.990 --> 00:07:18.440
So here's an example of what
a test would look like.

126
00:07:20.750 --> 00:07:22.730
So, first thing we do
is reacquire our app.

127
00:07:22.730 --> 00:07:26.280
And the reason we can do that is
because we exported it up here.

128
00:07:26.280 --> 00:07:28.290
This is why we exported it.

129
00:07:28.290 --> 00:07:29.780
Because now we can reacquire it.

130
00:07:29.780 --> 00:07:30.996
So now, we have our application.

131
00:07:30.996 --> 00:07:35.520
Our server requires supertest.

132
00:07:35.520 --> 00:07:39.080
Mocha's already loaded up and then we're
just going to write our test suite.

133
00:07:40.440 --> 00:07:43.870
In this case, we're talking about todos so
we describe our todos.

134
00:07:43.870 --> 00:07:46.130
We make an insertion here.

135
00:07:46.130 --> 00:07:48.330
It should get all todos.

136
00:07:48.330 --> 00:07:52.680
So we make a request to our app,
it's a get request.

137
00:07:55.600 --> 00:07:59.910
So this URL,
we're going to set some headers here.

138
00:07:59.910 --> 00:08:02.780
And then we're going to make
some assertions right here.

139
00:08:02.780 --> 00:08:08.390
So we expect the content type to
pass this regex, which is a JSON.

140
00:08:08.390 --> 00:08:10.640
So we expect the content type to be JSON.

141
00:08:10.640 --> 00:08:12.430
We expect to get a 200
back from the server.

142
00:08:12.430 --> 00:08:17.020
And then done, we also get to inspect
this response object, right here.

143
00:08:19.630 --> 00:08:22.570
This response object is what the server
sends back so now we can go ahead and

144
00:08:22.570 --> 00:08:24.900
make assertions on that.

145
00:08:24.900 --> 00:08:29.630
Now I can say,
I expect the response.id to be defined.

146
00:08:32.570 --> 00:08:36.610
And then done, so this is a arbitrary
test, so you can do stuff like this.

147
00:08:36.610 --> 00:08:39.360
Yeah question Mark.
&gt;&gt; Mark: A couple came up here.

148
00:08:39.360 --> 00:08:42.660
If using a testing module should we put
that in our dev dependency instead of

149
00:08:42.660 --> 00:08:45.780
dependencies?
&gt;&gt; Scott Moss: If using a testing module

150
00:08:45.780 --> 00:08:49.390
like chai, and yeah, yeah.

151
00:08:49.390 --> 00:08:53.810
So if you're using anything related to
development or testing yes that should be

152
00:08:53.810 --> 00:08:57.330
in your dev dependencies, so the way you
would do that is when you MPM install.

153
00:08:59.070 --> 00:09:01.960
So if you were going to MPM install
something for testing you say MPM install,

154
00:09:01.960 --> 00:09:05.910
and you can do dash Uppercase D.

155
00:09:05.910 --> 00:09:12.890
Or you can do dash, dash save dash D, or
dev, and then the name of the package.

156
00:09:12.890 --> 00:09:15.460
And that will save in
your dev dependencies.

157
00:09:15.460 --> 00:09:16.520
So yeah, if it's for testing,

158
00:09:16.520 --> 00:09:20.070
it's definitely dev dependencies because
your app actually doesn't need it to run.

159
00:09:21.190 --> 00:09:22.130
It's only there for testing.

160
00:09:22.130 --> 00:09:24.740
But you don't need it to run, so
you see it in dev dependencies.

161
00:09:24.740 --> 00:09:25.860
Good question.
&gt;&gt; Mark: And

162
00:09:25.860 --> 00:09:30.850
the next one was, on testing frameworks,
could you comment on the benefits

163
00:09:30.850 --> 00:09:35.030
of using something like Mocha Jasmine
versus something that gives you less for

164
00:09:35.030 --> 00:09:38.290
free, like Tape?
&gt;&gt; Scott Moss: Tape is

165
00:09:38.290 --> 00:09:39.210
actually pretty awesome.

166
00:09:39.210 --> 00:09:42.240
I just started using tape a month ago, but

167
00:09:42.240 --> 00:09:45.450
I don't know it well
enough to recommend it.

168
00:09:45.450 --> 00:09:47.750
And I didn't really know its
benefits until I used Mocha and

169
00:09:47.750 --> 00:09:48.420
Jasmine for so long.

170
00:09:48.420 --> 00:09:52.220
But as far as Mocha and Jasmine,
Jasmine was the first one, and

171
00:09:52.220 --> 00:09:53.680
it's the full suite.

172
00:09:53.680 --> 00:09:56.960
Jasmine is the one, it was like we're
gonna use this to write tests like this.

173
00:09:56.960 --> 00:09:59.070
Describe it, all this cool stuff.

174
00:09:59.070 --> 00:10:01.120
We're going to supply you
with an insertion library.

175
00:10:01.120 --> 00:10:05.380
And then Mocha came along, written by
the same person who wrote Express.

176
00:10:05.380 --> 00:10:07.290
Or I think he's more than
one person to be honest.

177
00:10:07.290 --> 00:10:10.060
It's a group of people with the same name.

178
00:10:10.060 --> 00:10:14.000
But he came along and they were like,
we're going to write something just like

179
00:10:14.000 --> 00:10:17.320
Jasmine with the same syntax so
it's familiar for everybody.

180
00:10:17.320 --> 00:10:21.870
But then we're not going to require
them to use all the built in tools.

181
00:10:21.870 --> 00:10:25.560
We're gonna allow them to use whatever
they want, so Mocha is just like Jasmine,

182
00:10:25.560 --> 00:10:29.380
except it doesn't come with an insertion
library, a mocking library,

183
00:10:29.380 --> 00:10:30.430
and stuff like that.

184
00:10:30.430 --> 00:10:31.790
So you gotta go get your own.

185
00:10:31.790 --> 00:10:36.020
So if you want the full suite, use Jasmin,
if you wanna use your own third party

186
00:10:36.020 --> 00:10:41.820
stuff, use Mocha, and as far as Tape,
I prefer Tape these days,

187
00:10:41.820 --> 00:10:48.890
it's actually my go to now so.
&gt;&gt; Mark: Another

188
00:10:48.890 --> 00:10:51.010
one rolled in here right at the end too.

189
00:10:51.010 --> 00:10:53.600
When we're running
the server in the workshop

190
00:10:53.600 --> 00:10:58.600
the program will use all the modules
in both dev dependency and dependency.

191
00:10:58.600 --> 00:11:01.660
But in, when in production,
it only uses modules independency.

192
00:11:01.660 --> 00:11:06.130
Is that right?
&gt;&gt; Scott Moss: That's not entirely true.

193
00:11:06.130 --> 00:11:07.940
It depends on what
environment you deploy in.

194
00:11:07.940 --> 00:11:10.480
So for instance, let's say Heroku.

195
00:11:10.480 --> 00:11:15.970
If you deployed Heroku, by default,
Heroku will run NPM install production.

196
00:11:15.970 --> 00:11:21.210
So it'll only install, you're dependencies
inside dependencies, not dev dependencies.

197
00:11:21.210 --> 00:11:25.740
But if you're here and you run NPM install
it's going to install every single

198
00:11:25.740 --> 00:11:28.880
dependency whether it's dev dependency or
a real dependency,

199
00:11:28.880 --> 00:11:33.700
so it's and you can also tell it, you
can force it to install which ones too.

200
00:11:33.700 --> 00:11:36.600
So that's not entirely true, it depends
on what platform you're going to but

201
00:11:36.600 --> 00:11:40.560
you can always override those commands,
but that is the reason why those

202
00:11:40.560 --> 00:11:44.380
two differences exist so you can like
Figure out which ones you wanna install.

203
00:11:44.380 --> 00:11:49.330
So, I wouldn't say that that's guaranteed,
but by default yeah, that might be

204
00:11:49.330 --> 00:11:52.970
the behavior of some platforms like
Heroku, but again, you can override it.

205
00:11:52.970 --> 00:11:57.871
So yeah, we'll talk about environment
variables and how to trigger those things

206
00:11:57.871 --> 00:12:05.370
in a minute.
&gt;&gt; Scott Moss: Cool.

207
00:12:05.370 --> 00:12:08.080
So yeah, here's a basic test.

208
00:12:08.080 --> 00:12:09.780
It's doing exactly what we would do.

209
00:12:09.780 --> 00:12:11.990
We're gonna make a get
request to this url, and

210
00:12:11.990 --> 00:12:14.070
we expect all this stuff to be true.

211
00:12:15.910 --> 00:12:18.810
Or to be whatever we set here.

