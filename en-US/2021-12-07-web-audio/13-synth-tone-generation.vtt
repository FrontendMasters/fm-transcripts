WEBVTT

1
00:00:00.110 --> 00:00:02.422
So moving on to the next
part of this course,

2
00:00:02.422 --> 00:00:04.820
which is all about synthesising audio.

3
00:00:04.820 --> 00:00:09.408
And actually making audio just from code,
without using any mp3 files, or WAV files,

4
00:00:09.408 --> 00:00:12.830
or any sort of source files,
even like a microphone or anything.

5
00:00:12.830 --> 00:00:17.360
We're just gonna use code and math to
try and produce some audio effects.

6
00:00:19.040 --> 00:00:22.310
There's a couple demos I just
want to show that are on the web.

7
00:00:22.310 --> 00:00:26.430
Some really kind of fun and
quirky demos and projects.

8
00:00:26.430 --> 00:00:31.563
So a similar kind of technique
to this blog opera site

9
00:00:31.563 --> 00:00:36.238
that I was showing earlier,
is pink trombone.

10
00:00:36.238 --> 00:00:41.016
It's a very funny little

11
00:00:41.016 --> 00:00:46.480
kind of web toy [SOUND] [SOUND].

12
00:00:46.480 --> 00:00:48.715
And you can just kind of play
around with the synthesis.

13
00:00:48.715 --> 00:00:54.759
[SOUND] Pretty fun stuff.

14
00:00:59.677 --> 00:01:02.430
On another note is generative FM.

15
00:01:02.430 --> 00:01:06.564
So this is using sound synthesis
Web Audio, but to try and

16
00:01:06.564 --> 00:01:12.090
create this kind of generative and
calming and relaxing background music.

17
00:01:13.110 --> 00:01:17.560
Each of these is done with code and
done with sort of algorithmic processes.

18
00:01:17.560 --> 00:01:19.680
And so they're always very different.

19
00:01:19.680 --> 00:01:25.545
But they all have that kind of similar
type of calming and relaxing sound.

20
00:01:25.545 --> 00:01:28.637
This one's a little bit less
relaxing than usual but

21
00:01:28.637 --> 00:01:30.609
some of them have been very nice.

22
00:01:39.958 --> 00:01:44.113
And this will be using Web Audio to
actually synthesize this in real time.

23
00:01:49.184 --> 00:01:55.900
So a very basic example of synthesizing
is just using a sine wave.

24
00:01:55.900 --> 00:02:00.012
We're just gonna start with this, just
because it's like the most simple one and

25
00:02:00.012 --> 00:02:03.667
we kind of been looking at very similar
graphs through the whole course.

26
00:02:03.667 --> 00:02:07.087
We've been talking about this graph
of The wave that's going up and

27
00:02:07.087 --> 00:02:10.520
down at a constant rate and
that's basically just a sine wave here.

28
00:02:11.570 --> 00:02:16.914
A sine wave is the function
this sine function you pass in

29
00:02:16.914 --> 00:02:24.030
a value which is the angle theta or
theta, and it's in radians.

30
00:02:24.030 --> 00:02:28.858
And what you get is some value
between positive one and negative one.

31
00:02:28.858 --> 00:02:33.813
And as you can see on the left,
it's creating that graph that we now know

32
00:02:33.813 --> 00:02:38.766
of as a wave form and on the right,
what it's doing here is it just taking

33
00:02:38.766 --> 00:02:43.994
a point around the circle and determining
what the value of that should be.

34
00:02:43.994 --> 00:02:49.020
To create this waveform, and so
from that sine wave we can create sound.

35
00:02:49.020 --> 00:02:52.945
So a simple example here is
inside of one of the demos

36
00:02:52.945 --> 00:02:57.159
which I'll show the page with
all the demos in second.

37
00:02:57.159 --> 00:03:01.968
[SOUND] This tone dash example dash

38
00:03:01.968 --> 00:03:06.438
synth dash basic glitch.me.

39
00:03:06.438 --> 00:03:12.323
When you click and hold,
It produces a constant sine wave sound,

40
00:03:12.323 --> 00:03:18.110
a tone, and that is just
produced at a single frequency.

41
00:03:18.110 --> 00:03:21.414
But when you change the most
along the left and right axis,

42
00:03:21.414 --> 00:03:25.155
it will change the frequency of
the tone that's being produced.

43
00:03:25.155 --> 00:03:30.318
[SOUND] [SOUND] And
you can actually see in the background

44
00:03:30.318 --> 00:03:35.252
a sort of visualization of
how that graph might look

45
00:03:35.252 --> 00:03:39.152
this is not a perfectly accurate graph so

46
00:03:39.152 --> 00:03:45.369
I've fudged the numbers a little bit so
that you can get a sense.

47
00:03:45.369 --> 00:03:52.315
This is a low frequency sound and
it has a low frequency waveform,

48
00:03:52.315 --> 00:03:59.400
higher frequency sounds have
those higher frequency waveforms.

49
00:03:59.400 --> 00:04:05.525
So if you go into the workshop,
and we can go here.

50
00:04:05.525 --> 00:04:10.685
And this is the second sort of
page of demos, tone dash demos.

51
00:04:10.685 --> 00:04:16.636
And you can go in here and
see them all So,

52
00:04:16.636 --> 00:04:19.470
there's just like before,
there's a bunch of different demos.

53
00:04:19.470 --> 00:04:24.210
This is using what's called tone J S,
which I'll get into in just a second.

54
00:04:24.210 --> 00:04:29.870
But you can see already that there's
this one I was showing [SOUND].

55
00:04:29.870 --> 00:04:34.835
And then a few others like
this tapping sound [SOUND] And

56
00:04:34.835 --> 00:04:40.352
what it's doing is it's choosing
a random note [SOUND] every

57
00:04:40.352 --> 00:04:45.663
time you tap to create a bit of
a sorta fun little app here.

58
00:04:45.663 --> 00:04:48.266
[MUSIC]

59
00:04:48.266 --> 00:04:53.850
This is very similar and a little bit
inspired by pat atone or pat of tap.

60
00:04:53.850 --> 00:04:54.730
So I'm calling it pat atone.

61
00:04:54.730 --> 00:04:57.150
Tone because it's using tone.

62
00:04:57.150 --> 00:05:00.610
And every time you click it
chooses a different color.

63
00:05:00.610 --> 00:05:04.898
And it also plays a random note and
it's using some effects

64
00:05:04.898 --> 00:05:09.464
like a sort of delay to create
that kind of nice spatial sound.

65
00:05:09.464 --> 00:05:12.344
[MUSIC]

66
00:05:12.344 --> 00:05:17.990
As an example of using Effects,
turning them up turning them down.

67
00:05:19.470 --> 00:05:22.450
This one is more like a sequencer.

68
00:05:22.450 --> 00:05:24.486
So like creating algorithmic music.

69
00:05:24.486 --> 00:05:27.848
[MUSIC]

70
00:05:27.848 --> 00:05:32.268
And the way that works is that it's
just playing notes with a random sort of

71
00:05:32.268 --> 00:05:36.474
sequence of notes and then every time
it finishes Sort of bar of notes,

72
00:05:36.474 --> 00:05:40.550
it will just choose a different
sequence of random notes.

73
00:05:40.550 --> 00:05:42.340
And then there's a few other demos.

74
00:05:42.340 --> 00:05:46.030
Some of them are repeats of what
we've done already with web audio.

75
00:05:46.030 --> 00:05:50.159
So I'm not gonna really go into how to
play an mp3 file with this Tone.js library

76
00:05:50.159 --> 00:05:52.600
because we've already
done it with web audio.

77
00:05:52.600 --> 00:05:55.663
And this is more if you're
starting to use Tone.js and

78
00:05:55.663 --> 00:05:59.050
you might wanna start to
use their mp3 features.

79
00:05:59.050 --> 00:06:05.491
And even things like metering or waveform
FFT that's also possible with tone JS.

80
00:06:05.491 --> 00:06:11.900
I liked to show the pure web audio
version of these kinds of ideas because.

81
00:06:11.900 --> 00:06:15.834
Quite often you don't really need to pull
in an entire audio library just to do some

82
00:06:15.834 --> 00:06:17.640
simple visualizations.

83
00:06:17.640 --> 00:06:22.083
But if you are using this library tone
JS already or if you're using a library

84
00:06:22.083 --> 00:06:26.598
like it, then it's good to know just how
to use it in these different ways just

85
00:06:26.598 --> 00:06:30.920
in case you do wanna use some frequency
spectrum analysis type of things.

