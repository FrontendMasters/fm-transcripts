WEBVTT

1
00:00:00.179 --> 00:00:03.180
So, there's a few more demos here,
as I was saying,

2
00:00:03.180 --> 00:00:07.052
some of them are like mp3 related
which you won't really get into and

3
00:00:07.052 --> 00:00:09.955
even using your microphone or
visualising audio.

4
00:00:09.955 --> 00:00:15.498
But this last one here is kind of
fun as well, the sequencer demo.

5
00:00:15.498 --> 00:00:21.875
[MUSIC]

6
00:00:21.875 --> 00:00:30.553
And if we go into this sequencer demo
you'll see it's quite a bulky demo.

7
00:00:30.553 --> 00:00:35.266
So it's a little bit more than
I'll go through entirely.

8
00:00:35.266 --> 00:00:39.023
But there's just a few things that you
might want to pick out of here and

9
00:00:39.023 --> 00:00:40.560
maybe use in your own sense.

10
00:00:40.560 --> 00:00:44.811
One of the things that's kind of
interesting is the idea of a polysynth.

11
00:00:44.811 --> 00:00:50.289
So in tone JS you can layer up a synth
that has multiple oscillators and it

12
00:00:50.289 --> 00:00:56.429
ends up sounding a little bit richer kind
of like what I was explaining earlier.

13
00:00:56.429 --> 00:01:02.061
But this way you actually have multiple
scents that are overlapping in slightly

14
00:01:02.061 --> 00:01:07.872
different envelopes for each of them maybe
even different oscillators and so on.

15
00:01:07.872 --> 00:01:11.964
And so that's what you can use to create
some of the more richer sounds that you're

16
00:01:11.964 --> 00:01:17.145
hearing in this demo Another
thing that is starting

17
00:01:17.145 --> 00:01:22.218
to be explored in this demo, but
it's a very big topic within tone.js,

18
00:01:22.218 --> 00:01:26.389
but you can use tones transport and
sequencing functions.

19
00:01:26.389 --> 00:01:31.547
That allows you to do things like
automatically scheduling notes in

20
00:01:31.547 --> 00:01:36.620
a way that is corresponding with
the beats per minute of the track.

21
00:01:36.620 --> 00:01:41.763
So that you you don't have to use timers
like set timeout or requestAnimationFrame.

22
00:01:41.763 --> 00:01:44.713
Because those are not very
accurate with Web Audio.

23
00:01:44.713 --> 00:01:49.499
And so instead you want to use something
like tone js which has its own timers that

24
00:01:49.499 --> 00:01:53.225
are specific for Web Audio and
they are in sync with Web Audio.

25
00:01:53.225 --> 00:01:57.168
And they just give you some
sort of access for that so

26
00:01:57.168 --> 00:02:02.405
this tone transport is one way to
start to do these kinds of timings.

27
00:02:02.405 --> 00:02:07.243
And these kinds of controls and mechanisms
that happen where something repeats

28
00:02:07.243 --> 00:02:11.877
let's say or something happens over
the course of some track or something.

29
00:02:11.877 --> 00:02:13.518
So if we just go into transport,

30
00:02:19.917 --> 00:02:24.108
You can see here they have
an example where you repeat some

31
00:02:24.108 --> 00:02:28.399
event on a single sort of eighth
note on every eighth note.

32
00:02:28.399 --> 00:02:33.101
You first set up your tone.transport,
you schedule a repeat,

33
00:02:33.101 --> 00:02:37.639
you pass in the function which is
going to give you back a time.

34
00:02:37.639 --> 00:02:42.217
And this is a time in the audio
context not in real browser time.

35
00:02:42.217 --> 00:02:47.345
And then from there you can use a synth or
you can use an oscillator you can use

36
00:02:47.345 --> 00:02:52.653
some sort of output device, you could
even just be an mp3 file or something.

37
00:02:52.653 --> 00:02:58.458
And you can trigger that at the exact
time that this repeat has to happen.

38
00:02:58.458 --> 00:03:00.777
And then once you set up your repeats,

39
00:03:00.777 --> 00:03:05.286
you have to actually start the transport
to start the timing mechanisms.

40
00:03:05.286 --> 00:03:12.238
So here what we're doing is every 2m which
should be something to do with the bars.

41
00:03:12.238 --> 00:03:17.141
Every 2m we repeat this
function here which is

42
00:03:17.141 --> 00:03:21.045
the randomizer sequence function.

43
00:03:21.045 --> 00:03:26.022
And the idea is that when that happens,
we do some shuffling, and

44
00:03:26.022 --> 00:03:28.384
we do some sort of procedural.

45
00:03:28.384 --> 00:03:32.603
Try and create a sequence that has
a bit of randomness to it, but

46
00:03:32.603 --> 00:03:35.956
also doesn't have too
many predictable sounds.

47
00:03:35.956 --> 00:03:41.311
So I've just created a sort of structure
here that works well enough for this demo.

48
00:03:41.311 --> 00:03:44.971
But for something like Bellwoods where
I was really trying to create like

49
00:03:44.971 --> 00:03:46.894
procedural music that sounded nice.

50
00:03:46.894 --> 00:03:49.863
It took a little bit of
time to find some rules and

51
00:03:49.863 --> 00:03:54.630
some parameters that allowed me to
create these random sequences of notes.

52
00:03:54.630 --> 00:03:59.024
That didn't sound too repetitive,
didn't sound too qiotic.

53
00:03:59.024 --> 00:04:04.230
And a lot of that here is just trying
to see if there's anything that's

54
00:04:04.230 --> 00:04:09.451
two consecutive notes then maybe
fixing that in this set of code here.

55
00:04:09.451 --> 00:04:13.078
And instead of just using pure
randomness which is a uniform random

56
00:04:13.078 --> 00:04:17.105
distribution you can use something
like Gaussian random distribution.

57
00:04:17.105 --> 00:04:21.745
To just get some more interesting sort of
variation in the way the notes are being

58
00:04:21.745 --> 00:04:23.485
placed and things like that.

59
00:04:23.485 --> 00:04:27.517
And then here when the mouse
is actually pressed,

60
00:04:27.517 --> 00:04:30.977
this is where we start the transport here.

61
00:04:33.416 --> 00:04:36.796
And we also use another
feature of Tone JS called

62
00:04:36.796 --> 00:04:44.271
Sequence And

63
00:04:44.271 --> 00:04:49.289
we're just using this to try and
basically create

64
00:04:49.289 --> 00:04:56.825
these the actual sequence of notes
that is happening through this system.

65
00:04:56.825 --> 00:04:59.257
So this,
demo was a little bit more complex.

66
00:04:59.257 --> 00:05:01.142
It's got a lot more to it.

67
00:05:01.142 --> 00:05:06.619
It even has to get into
something else called tone.draw.

68
00:05:06.619 --> 00:05:11.794
I don't want to dive into all these things
because it is a bit of a can of worms.

69
00:05:11.794 --> 00:05:16.194
And I think it's better to just
start with the basics of just

70
00:05:16.194 --> 00:05:19.978
starting with using the synth
using the filters and

71
00:05:19.978 --> 00:05:24.032
just trying to create sort
of basic effects from that.

72
00:05:24.032 --> 00:05:27.339
And if you really wanna get into
creating your own like MIDI player or

73
00:05:27.339 --> 00:05:28.450
something like that.

74
00:05:28.450 --> 00:05:32.327
That's where you can start to dive
into some of these time based and

75
00:05:32.327 --> 00:05:36.149
transport based functions of tone,
which are really powerful.

76
00:05:36.149 --> 00:05:40.037
But also just a lot more complex in
terms of understanding how it all comes

77
00:05:40.037 --> 00:05:40.686
together.

78
00:05:40.686 --> 00:05:43.973
So just to come back
to this filter effect.

79
00:05:43.973 --> 00:05:49.377
Right now I'm using this filter effect
to filter out certain frequencies.

80
00:05:49.377 --> 00:05:52.895
And so we can use what's
called a low pass filter.

81
00:05:52.895 --> 00:05:57.663
And what that's gonna do is only
pass through filter frequencies

82
00:05:57.663 --> 00:06:01.574
that go below the threshold
that we're going to set.

83
00:06:01.574 --> 00:06:06.189
So to show how that's gonna work first
we make sure that that filter is

84
00:06:06.189 --> 00:06:09.547
connected to this graft
connected to the system.

85
00:06:09.547 --> 00:06:13.986
So in this case, now we have it so
that the synth connects with the effects,

86
00:06:13.986 --> 00:06:16.319
which is then connected to the reverb.

87
00:06:16.319 --> 00:06:19.265
And the reverb is finally
connected to the filter.

88
00:06:19.265 --> 00:06:24.325
So, the filter here is the last
step before hitting the speaker,

89
00:06:24.325 --> 00:06:25.892
the master output.

90
00:06:25.892 --> 00:06:30.788
And then we scroll down and
we see where filter is being adjusted.

91
00:06:30.788 --> 00:06:36.470
Here we're adjusting the frequency
of the filter and we're adjusting it

92
00:06:36.470 --> 00:06:41.794
between some minimum and maximum
range based on the most x position.

93
00:06:41.794 --> 00:06:46.923
When this most x position is at the left,
it's going to use the filterMin.

94
00:06:46.923 --> 00:06:50.158
When it's at the right of the screen,
it's gonna use filterMax.

95
00:06:50.158 --> 00:06:54.707
And any most position in between
there is just gonna blend

96
00:06:54.707 --> 00:06:57.275
those two filter frequencies.

97
00:06:57.275 --> 00:07:02.621
Just to show you, going up here
the filter min is 100 hertz and

98
00:07:02.621 --> 00:07:05.492
the filter Max is 5000 hertz.

99
00:07:05.492 --> 00:07:12.353
And so now when we play these effects and
these sounds and we slide our mouse.

100
00:07:12.353 --> 00:07:16.253
When we play these effects and when we
play these sounds and when we slide

101
00:07:16.253 --> 00:07:20.229
our mouse to the left, it's gonna
start to filter out some of the sound.

102
00:07:20.229 --> 00:07:28.119
[MUSIC]

103
00:07:28.119 --> 00:07:32.529
And what's happening is that we're
cutting off a lot of frequencies,

104
00:07:32.529 --> 00:07:36.218
we're only allowing the low
frequencies to pass through.

105
00:07:36.218 --> 00:07:38.073
[MUSIC]

106
00:07:38.073 --> 00:07:41.356
We're saying that only
frequencies that are lower

107
00:07:41.356 --> 00:07:45.796
than let's say whatever this
would be 100 hertz or 200 hertz.

108
00:07:45.796 --> 00:07:49.322
Those are the only things coming
through and then as it opens up,

109
00:07:49.322 --> 00:07:51.883
it's getting into the 1000 range Hertz.

110
00:07:51.883 --> 00:07:54.231
We start to hear higher and
higher frequencies.

111
00:07:54.231 --> 00:07:57.618
[MUSIC]

112
00:07:57.618 --> 00:08:02.807
And you can create some really nice
effects with that kind of a filter node.

113
00:08:02.807 --> 00:08:07.519
You can also try using other things like
high pass which is the opposite it only

114
00:08:07.519 --> 00:08:11.158
passes through frequencies
that are above the threshold.

115
00:08:11.158 --> 00:08:21.158
[MUSIC]

116
00:08:23.260 --> 00:08:28.097
Or some of the ones that we explored
earlier in the course like the bandpass,

117
00:08:28.097 --> 00:08:32.480
and this is just gonna pass through
only the feet the frequencies that

118
00:08:32.480 --> 00:08:35.068
are in the band that we're specifying.

119
00:08:35.068 --> 00:08:39.086
And maybe some sort of left and
right frequencies around it.

120
00:08:39.086 --> 00:08:43.678
[MUSIC]

121
00:08:43.678 --> 00:08:48.402
And what that means here
is that we're really only

122
00:08:48.402 --> 00:08:53.808
dedicating the signal to near
the frequency we specify.

123
00:08:53.808 --> 00:08:56.775
Which might be let's say 200 hertz and

124
00:08:56.775 --> 00:09:02.633
the only signals that are coming through
are kind of close to that frequency band.

125
00:09:02.633 --> 00:09:08.029
But low passes is quite a nice one for
these kinds of effects.

126
00:09:08.029 --> 00:09:13.314
And the other thing we're doing on the y
position, this is when the mouse is going

127
00:09:13.314 --> 00:09:18.540
up and down on the y position, we're
changing the wet value of our effect node.

128
00:09:18.540 --> 00:09:21.813
So the wet value remember,
the higher the wet value,

129
00:09:21.813 --> 00:09:26.468
the more we're using that effect in
the lower, the effect, the wet value,

130
00:09:26.468 --> 00:09:30.932
the less we're going to hear, and
that affects your as feedback delay.

131
00:09:30.932 --> 00:09:36.381
So, if we use fully wet,
then all we're gonna hear is the feedback.

132
00:09:36.381 --> 00:09:41.159
If it's fully dry or there's no wetness

133
00:09:41.159 --> 00:09:46.223
all we're gonna hear is the synth itself.

134
00:09:46.223 --> 00:09:53.278
So, up here, there's no feedback,
down here there's a lot of feedback.

135
00:09:53.278 --> 00:09:59.108
And we can start to create some
really interesting Soundscapes

136
00:09:59.108 --> 00:10:04.723
just by modulating and
by using different parameters here.

137
00:10:04.723 --> 00:10:14.723
[MUSIC]

138
00:10:16.583 --> 00:10:18.848
So I'm just tapping in different places.

139
00:10:18.848 --> 00:10:23.426
But you can imagine some sort of
algorithmic system that might be

140
00:10:23.426 --> 00:10:28.348
automatically triggering these notes,
with different parameters

141
00:10:28.348 --> 00:10:32.954
to create these really rich and
atmistrerio sounding outputs.

142
00:10:32.954 --> 00:10:35.500
So that's just a little
bit about the filtering

