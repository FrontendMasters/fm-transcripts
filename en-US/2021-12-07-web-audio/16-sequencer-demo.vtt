WEBVTT

1
00:00:00.330 --> 00:00:03.195
So there's a few more demos here,
as I was saying,

2
00:00:03.195 --> 00:00:07.063
some of them are like mp3 related
which you won't really get into and

3
00:00:07.063 --> 00:00:09.948
even using your microphone or
visualizing audio.

4
00:00:09.948 --> 00:00:15.645
But this last one here, it's kind
of fun as well, the sequencer demo.

5
00:00:15.645 --> 00:00:21.871
[MUSIC]

6
00:00:21.871 --> 00:00:25.550
And if we go into this sequencer demo.

7
00:00:28.420 --> 00:00:30.586
You'll see it's quite a bulky demo.

8
00:00:30.586 --> 00:00:35.289
So it's a little bit more than
I'll go through entirely.

9
00:00:35.289 --> 00:00:39.074
But there's just a few things that you
might want to pick out of here and

10
00:00:39.074 --> 00:00:40.626
maybe use in your own sense.

11
00:00:40.626 --> 00:00:44.706
One of the things that's kinda
interesting is the idea of a polysynth.

12
00:00:44.706 --> 00:00:50.353
So in Tone.js, you can layer up a synth
that has multiple oscillators, and

13
00:00:50.353 --> 00:00:56.548
it ends up sounding a little bit richer,
kind of like what I was exploring earlier.

14
00:00:56.548 --> 00:01:01.370
But this way you actually have multiple
synths that are overlapping in

15
00:01:01.370 --> 00:01:04.721
slightly different envelopes for
each of them,

16
00:01:04.721 --> 00:01:07.840
maybe even different oscillators and
so on.

17
00:01:07.840 --> 00:01:11.305
And so that's what you can use to
create some of the more richer sounds

18
00:01:11.305 --> 00:01:13.113
that you're hearing in this demo.

19
00:01:14.903 --> 00:01:19.379
Another thing that is starting
to be explored in this demo but

20
00:01:19.379 --> 00:01:24.908
it's a very big topic within Tone.js,
but you can use tones transport and

21
00:01:24.908 --> 00:01:30.969
sequencing functions that allows you to
do things like automatically scheduling

22
00:01:30.969 --> 00:01:36.544
notes in a way that is corresponding
with the beats per minute of the track.

23
00:01:36.544 --> 00:01:39.970
So that you don't have to use
timers like set timeout or

24
00:01:39.970 --> 00:01:44.827
request animation frame because those
are not very accurate with Web Audio.

25
00:01:44.827 --> 00:01:49.674
And so instead, you wanna use something
like Tone.js which has its own timers

26
00:01:49.674 --> 00:01:53.802
that are specific for Web Audio and
they are in sync with Web Audio.

27
00:01:53.802 --> 00:01:56.874
And they just give you some
sort of access for that.

28
00:01:56.874 --> 00:02:01.711
So this Tone.Transport is one way to
start to do these kinds of timings and

29
00:02:01.711 --> 00:02:06.781
these kind of controls and mechanisms
that happen where something repeats,

30
00:02:06.781 --> 00:02:11.943
let's say, or something happens over
the course of some track or something.

31
00:02:11.943 --> 00:02:13.969
So if we just go into Transport.

32
00:02:19.852 --> 00:02:23.852
You can see here they
have an example where you

33
00:02:23.852 --> 00:02:28.595
repeat some event on a single
sort of on every 8 note.

34
00:02:28.595 --> 00:02:33.264
You first set up your Tone.Transport,
you schedule a repeat,

35
00:02:33.264 --> 00:02:37.771
you pass in the function which is
going to give you back a time.

36
00:02:37.771 --> 00:02:42.380
And this is a time in the audio context,
not in real browser time.

37
00:02:42.380 --> 00:02:46.558
And then from there you can use a synth or
you can use an oscillator,

38
00:02:46.558 --> 00:02:49.031
you can use some sort of output device.

39
00:02:49.031 --> 00:02:53.031
It could even just be an MP3 file or
something, and

40
00:02:53.031 --> 00:02:58.440
you can trigger that at the exact
time that this repeat has to happen.

41
00:02:58.440 --> 00:03:00.712
And then once you set up your repeats,

42
00:03:00.712 --> 00:03:05.124
you have to actually start the transport
to start the timing mechanisms.

43
00:03:05.124 --> 00:03:08.985
So here what we're doing is every 2m,

44
00:03:08.985 --> 00:03:13.553
which should be something
to do with the bars.

45
00:03:13.553 --> 00:03:21.111
Every 2m, we repeat this function here,
which is the randomizer sequence function.

46
00:03:21.111 --> 00:03:25.642
And the idea is that when that happens,
we do some shuffling and

47
00:03:25.642 --> 00:03:30.770
we do some sort of procedural, try and
create a sequence that has a bit of

48
00:03:30.770 --> 00:03:36.006
randomness to it, but also doesn't
have too many predictable sounds.

49
00:03:36.006 --> 00:03:40.679
So I've just created a sort of structure
here that works well enough for this demo,

50
00:03:40.679 --> 00:03:44.753
but for something like Bellwoods where
I was really trying to create like

51
00:03:44.753 --> 00:03:46.914
procedural music that sounded nice.

52
00:03:46.914 --> 00:03:50.080
It took a little bit of
time to find some rules and

53
00:03:50.080 --> 00:03:54.991
some parameters that allowed me to
create these random sequences of notes

54
00:03:54.991 --> 00:03:59.366
that didn't sound too repetitive,
didn't sound too chaotic.

55
00:03:59.366 --> 00:04:04.366
And a lot of that here is just trying
to see if there's anything that's

56
00:04:04.366 --> 00:04:09.554
two consecutive notes, then maybe
fixing that in this set of code here.

57
00:04:09.554 --> 00:04:14.668
And instead of just using pure randomness,
which is a uniform random distribution,

58
00:04:14.668 --> 00:04:19.285
you can use something like Gaussian
random distribution to just get some more

59
00:04:19.285 --> 00:04:23.476
interesting sort of variation in
the way the notes are being placed and

60
00:04:23.476 --> 00:04:24.630
things like that.

61
00:04:24.630 --> 00:04:29.578
And then here,
when the mouse is actually pressed,

62
00:04:29.578 --> 00:04:33.634
this is where we start the transport here.

63
00:04:33.634 --> 00:04:38.903
We also use another feature of

64
00:04:38.903 --> 00:04:43.969
Tone.js called sequence.

65
00:04:43.969 --> 00:04:47.732
And we're just using this to try and

66
00:04:47.732 --> 00:04:52.626
basically create the actual
sequence of notes

67
00:04:52.626 --> 00:04:56.903
that is happening through this system.

68
00:04:56.903 --> 00:05:02.098
So this demo is a little bit more complex,
It's got a lot more to it,

69
00:05:02.098 --> 00:05:06.581
it even has to get into
something else called tone.draw.

70
00:05:06.581 --> 00:05:11.917
I don't wanna dive into all these things
because it is a bit of a can of worms.

71
00:05:11.917 --> 00:05:16.815
And I think it's better to just start
with the basics of just starting

72
00:05:16.815 --> 00:05:20.107
with using the synth,
using the filters, and

73
00:05:20.107 --> 00:05:24.004
just trying to create sort
of basic effects from that.

74
00:05:24.004 --> 00:05:27.957
And if you really want to get into
creating your own like MIDI player or

75
00:05:27.957 --> 00:05:31.912
something like that, that's where
you can start to dive into some of

76
00:05:31.912 --> 00:05:35.209
these time based and
transport based functions of tone.

77
00:05:35.209 --> 00:05:36.803
Which are really powerful, but

78
00:05:36.803 --> 00:05:40.829
also just a lot more complex in terms of
understanding how it all comes together.

