WEBVTT

1
00:00:00.124 --> 00:00:02.625
And the next is a similar concept.

2
00:00:02.625 --> 00:00:07.242
So I'll try and go through that
one a little bit more quickly now

3
00:00:07.242 --> 00:00:10.391
that some of the basics have been covered.

4
00:00:10.391 --> 00:00:15.463
But if we go to the next demo,
which in our little list here would

5
00:00:15.463 --> 00:00:21.523
be this one here, mp3 buffer, [SOUND] and
it plays a very loud chime noise.

6
00:00:21.523 --> 00:00:25.941
And it plays it on mousePressed
as this first demo.

7
00:00:25.941 --> 00:00:28.978
Something that's different with this demo,
though,

8
00:00:28.978 --> 00:00:32.660
is that instead of streaming the audio in,
which is great for long,

9
00:00:32.660 --> 00:00:37.012
sort of tracks background music,
this one is using what's called buffering.

10
00:00:37.012 --> 00:00:41.000
So we download the entire
audio file into memory first.

11
00:00:41.000 --> 00:00:45.316
We decode it, so that when we
actually press the Play button,

12
00:00:45.316 --> 00:00:47.392
is able to play immediately.

13
00:00:47.392 --> 00:00:49.059
It doesn't have to download anything.

14
00:00:49.059 --> 00:00:51.478
There's no data that needs
to be loaded anymore.

15
00:00:51.478 --> 00:00:54.567
And that's really good for
games, that's really good for

16
00:00:54.567 --> 00:00:58.150
sort of interactive experiences
where you don't want any latency,

17
00:00:58.150 --> 00:01:01.502
you don't want any lag between
clicking and hearing the audio.

18
00:01:01.502 --> 00:01:06.941
And it's also good if you just wanna
play a sound over and over again.

19
00:01:06.941 --> 00:01:09.558
You don't have to download
it each time you play it,

20
00:01:09.558 --> 00:01:11.163
you just download it one time and

21
00:01:11.163 --> 00:01:15.342
then you can can play it hundreds of times
without having to download any more data.

22
00:01:15.342 --> 00:01:18.267
And the way that's gonna
look is a bit like this.

23
00:01:18.267 --> 00:01:24.002
It's a little bit more complicated,
it requires some asynchronous code.

24
00:01:24.002 --> 00:01:29.158
Because we're just loading the sound
once and then having to reuse it.

25
00:01:29.158 --> 00:01:32.506
And I'll walk through this one,
I might not code it all just from scratch.

26
00:01:32.506 --> 00:01:37.898
But I'll walk through this, so
on mousePressed we play the sound,

27
00:01:37.898 --> 00:01:40.462
this function here playSound.

28
00:01:40.462 --> 00:01:43.130
And if I go down to
the playSound function, so

29
00:01:43.130 --> 00:01:47.428
in the playSound function,
we first ensure that everything is loaded.

30
00:01:47.428 --> 00:01:51.094
So we first have to say await,
loadSound, and

31
00:01:51.094 --> 00:01:56.274
that function here will do something
that we did in the last demo.

32
00:01:56.274 --> 00:01:59.246
Which is just to create a new
audio context if it doesn't yet

33
00:01:59.246 --> 00:02:02.527
exist just to make sure that we're
only using one audio context.

34
00:02:02.527 --> 00:02:07.007
It's generally a good idea to just
stick with one audio context for

35
00:02:07.007 --> 00:02:11.734
all of your sounds within an application
and just reuse that context.

36
00:02:11.734 --> 00:02:15.383
And then we're gonna actually
create the audio buffer.

37
00:02:15.383 --> 00:02:19.863
So this is the thing that holds the audio
data that we just need to load once and

38
00:02:19.863 --> 00:02:22.464
the way that we load
that is a little bit odd.

39
00:02:22.464 --> 00:02:29.099
We first have to fetch the mp3 or the wav
file just using fetch, just like this.

40
00:02:29.099 --> 00:02:34.032
So I'm fetching the chime,
we get a response and then we turn that

41
00:02:34.032 --> 00:02:38.977
response into an array buffer,
that's what we're doing here.

42
00:02:38.977 --> 00:02:43.723
And then finally we have an array buffer,
which is some binary data of an mp3 file.

43
00:02:43.723 --> 00:02:48.685
But we have to decode that mp3 file or
whatever the format is, OGG or

44
00:02:48.685 --> 00:02:50.174
WebM or something.

45
00:02:50.174 --> 00:02:54.767
We decode that into audio data that
can just be played immediately through

46
00:02:54.767 --> 00:02:55.961
the Web Audio API.

47
00:02:55.961 --> 00:03:01.881
And that's what we're gonna be doing here
with the audioContext.decodeAudioData.

48
00:03:01.881 --> 00:03:04.646
We pass in the array buffer there.

49
00:03:04.646 --> 00:03:07.890
And then we get back an audioBuffer.

50
00:03:07.890 --> 00:03:12.809
And I've declared that as
a global variable here as well.

51
00:03:12.809 --> 00:03:15.899
And so if we go back to our
little playSound function,

52
00:03:15.899 --> 00:03:17.762
we've now loaded up the sound.

53
00:03:17.762 --> 00:03:21.969
And so the next part is to just
make sure that we're resumed.

54
00:03:21.969 --> 00:03:24.882
This is something that you'll
see in some of my demos.

55
00:03:24.882 --> 00:03:26.350
It's not always needed.

56
00:03:26.350 --> 00:03:28.384
It's one of these situations where,

57
00:03:28.384 --> 00:03:32.650
during the course of me developing these
applications over the last few years.

58
00:03:32.650 --> 00:03:37.420
I sometimes run into some issues where,
especially with something like Safari,

59
00:03:37.420 --> 00:03:41.096
sometimes the audio context will
become in a suspended state.

60
00:03:41.096 --> 00:03:44.460
And it's one of these sort
of nebulous things where,

61
00:03:44.460 --> 00:03:49.020
[LAUGH] you just end up writing this
code here to make sure that it's always

62
00:03:49.020 --> 00:03:52.406
resumed, no matter whether
it's suspended or not.

63
00:03:52.406 --> 00:03:56.219
It suspends itself sometimes if,
for example,

64
00:03:56.219 --> 00:04:00.319
the user in some way rejects
a permission for audio.

65
00:04:00.319 --> 00:04:04.293
Or maybe if they haven't yet interacted
with the site or if they've interacted

66
00:04:04.293 --> 00:04:07.931
with the site, and then they somehow
go away from the site and come back.

67
00:04:07.931 --> 00:04:10.226
There's some very strange edge cases.

68
00:04:10.226 --> 00:04:15.007
And so a best practice maybe would just
be to make sure that the audio context is

69
00:04:15.007 --> 00:04:17.521
resumed before you try and play sounds.

70
00:04:17.521 --> 00:04:21.397
It's just something I
started to put into my code.

71
00:04:21.397 --> 00:04:25.951
And then the next thing here we're doing
is we're creating a new buffer source.

72
00:04:25.951 --> 00:04:32.220
So just like before, we had an mp3 source
node, it was a media element source node.

73
00:04:32.220 --> 00:04:34.146
Now we're using a buffer source.

74
00:04:34.146 --> 00:04:39.087
So, when they say source, it's the source
of the audio, whether it's coming

75
00:04:39.087 --> 00:04:43.677
from an audio tag or whether it's
coming from this decoded audioBuffer.

76
00:04:43.677 --> 00:04:46.791
And again, just like as I was
saying with the switchboard,

77
00:04:46.791 --> 00:04:51.043
we have to always make sure that any node
that we create is hooked up to something.

78
00:04:51.043 --> 00:04:55.392
Cuz if we don't connect the source nodes
to the destination or to some other node,

79
00:04:55.392 --> 00:04:57.232
then it's not gonna do anything.

80
00:04:57.232 --> 00:04:59.241
We're not gonna hear anything.

81
00:04:59.241 --> 00:05:04.177
The node will just be there on its own,
not sending the signal to anything else.

82
00:05:04.177 --> 00:05:09.323
And so we connect the source to
the speaker and then we assign the buffer.

83
00:05:09.323 --> 00:05:11.773
So we say, this is the buffer
that we've already loaded.

84
00:05:11.773 --> 00:05:13.508
We're just gonna use that one.

85
00:05:13.508 --> 00:05:15.728
And then we're gonna play the audio.

86
00:05:15.728 --> 00:05:19.435
We use 0 here, which just means
start the sound immediately.

87
00:05:19.435 --> 00:05:22.890
We could use a different variable here,
which would give us maybe a delay.

88
00:05:22.890 --> 00:05:28.679
So it'll start after
some sort of set time.

89
00:05:28.679 --> 00:05:31.620
And so that's that basically.

90
00:05:31.620 --> 00:05:32.813
[SOUND] There we go.

91
00:05:32.813 --> 00:05:33.313
[SOUND]

