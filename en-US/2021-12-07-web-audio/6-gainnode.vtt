WEBVTT

1
00:00:00.000 --> 00:00:05.316
So far in our demos I've shown the basics
of going from an mp3 file to a speaker.

2
00:00:05.316 --> 00:00:10.545
But now we wanna do something where we
go from an mp3 file to another node and

3
00:00:10.545 --> 00:00:13.211
then from that node on to the speaker.

4
00:00:13.211 --> 00:00:14.228
In this little image here,

5
00:00:14.228 --> 00:00:16.793
it's a delay note it's like an effect
an audio effect of some kind but

6
00:00:16.793 --> 00:00:19.731
we're gonna just start with something
even simpler which is just a gain node.

7
00:00:19.731 --> 00:00:25.173
Gain is like volume you can think
of it as volume of a signal and

8
00:00:25.173 --> 00:00:31.257
how powerful the signal is and
that will allow us to adjust the volume

9
00:00:31.257 --> 00:00:36.935
of the mp3 file very easily with
just a single node in between.

10
00:00:41.388 --> 00:00:48.772
So that's this third demo here and our
page and depending on the most interaction

11
00:00:48.772 --> 00:00:51.862
[MUSIC]

12
00:00:51.862 --> 00:00:52.656
We can change the volume.

13
00:00:52.656 --> 00:00:57.746
So just open that one up.

14
00:00:57.746 --> 00:01:05.358
So this demo here that we have is pretty
much the same as some of our other demos.

15
00:01:05.358 --> 00:01:08.779
There's one thing that's different here
and I'm just gonna recode it here.

16
00:01:08.779 --> 00:01:11.753
Just to give us a sense
of how it all works.

17
00:01:11.753 --> 00:01:17.622
So, imagine we have very
similar to the first mp3 demo,

18
00:01:17.622 --> 00:01:22.039
we create an audio tag, we set the source.

19
00:01:22.039 --> 00:01:28.081
One other thing I've added here in
this case is a cross origin setting.

20
00:01:28.081 --> 00:01:32.174
You don't really need to worry about this
if you're using local development but

21
00:01:32.174 --> 00:01:35.483
if you're working on glitch,
you might need to set this, just so

22
00:01:35.483 --> 00:01:37.311
that it works with the audio files.

23
00:01:37.311 --> 00:01:42.512
And then we loop the audio,
make sure it's looping and play it and

24
00:01:42.512 --> 00:01:46.971
feed that into our audio context,
our web audio, API.

25
00:01:46.971 --> 00:01:51.182
But again, this isn't gonna play anything
because we haven't got any code that's

26
00:01:51.182 --> 00:01:53.209
actually connecting it to the speaker.

27
00:01:53.209 --> 00:01:57.112
So the first thing we're gonna do
is connect this to another node but

28
00:01:57.112 --> 00:02:01.633
we don't wanna just connect it directly
to the speaker we want to first connect

29
00:02:01.633 --> 00:02:02.742
to that gain node.

30
00:02:02.742 --> 00:02:08.417
So before, we have to create a new
gain node it's gonna look like this.

31
00:02:11.593 --> 00:02:15.858
So audio contacts has all of these
different functions called create

32
00:02:15.858 --> 00:02:16.675
something.

33
00:02:16.675 --> 00:02:19.552
So create media elements source,
create gain,

34
00:02:19.552 --> 00:02:23.200
create buffer source,
create analyzer and those are all just

35
00:02:23.200 --> 00:02:27.149
functions that allow you to create
these little building blocks.

36
00:02:27.149 --> 00:02:31.340
And so
with this we're creating a gain node and

37
00:02:31.340 --> 00:02:36.712
by the way if you're lost at
all with these functions inside

38
00:02:36.712 --> 00:02:41.668
the repository I have links
to the API documentation.

39
00:02:41.668 --> 00:02:45.865
The Web Audio,
API documentation is pretty complete.

40
00:02:45.865 --> 00:02:50.464
You can see all of these functions within
the audio context and scroll down and

41
00:02:50.464 --> 00:02:52.811
find them and find details about them.

42
00:02:52.811 --> 00:02:56.566
So that's just something to keep in mind,
if you're doing this yourself and

43
00:02:56.566 --> 00:02:59.826
you're trying to figure out what
the name of those functions are.

44
00:03:04.642 --> 00:03:08.974
All right, so we've got our
media elements source node, and

45
00:03:08.974 --> 00:03:12.234
we've got a gain node for
volume adjustment.

46
00:03:12.234 --> 00:03:18.053
And now we're gonna connect
the source to the game.

47
00:03:18.053 --> 00:03:22.785
So we're wiring up the source
into the game node.

48
00:03:22.785 --> 00:03:29.416
And then we're gonna wire the gain
to the destination the speaker so

49
00:03:29.416 --> 00:03:33.955
gain connect audio
context dot destination,

50
00:03:33.955 --> 00:03:38.860
I've named it differently so
I call it gain node.

51
00:03:38.860 --> 00:03:45.763
And I should just rename this as well,
there we go.

52
00:03:45.763 --> 00:03:49.819
I've got a variable up here called gain
node, that's what it should be called.

53
00:03:53.737 --> 00:03:57.506
And so that is gonna allow us to play
the audio through the gain node.

54
00:03:57.506 --> 00:04:00.610
And then there's one other thing
that I'm doing in this demo,

55
00:04:00.610 --> 00:04:02.616
if you scroll down to the draw function.

56
00:04:02.616 --> 00:04:05.989
First we have to check if
the audio context exists,

57
00:04:05.989 --> 00:04:11.175
which means we've already set up our
audio so it's running, it's playing.

58
00:04:11.175 --> 00:04:16.326
And then I have something here
that determines the volume level

59
00:04:16.326 --> 00:04:21.181
between the left of the screen and
the right of the screen and

60
00:04:21.181 --> 00:04:26.736
this volume level is a value that
I'm going to get between 0 and 1.

61
00:04:26.736 --> 00:04:30.906
So, I'm using this sort of
math equation here I guess,

62
00:04:30.906 --> 00:04:36.055
you take the absolute distance from
the mouse of the mouse position,

63
00:04:36.055 --> 00:04:40.783
to the center of the screen and
divide that by half of the width.

64
00:04:40.783 --> 00:04:43.589
That's kind of what I'm doing there but.

65
00:04:43.589 --> 00:04:49.728
Basically, what you end up with is a value
that's gonna go somewhere between 0 and 1.

66
00:04:49.728 --> 00:04:51.667
So I can just set it to
0.5 just to show you.

67
00:04:51.667 --> 00:04:57.267
And this next line here
is going to use that

68
00:04:57.267 --> 00:05:03.347
value that goes between 0.5 and 0.1 and

69
00:05:03.347 --> 00:05:09.267
I'm putting that into this function here.

70
00:05:09.267 --> 00:05:13.547
So gain node has a property
on it called gain.

71
00:05:13.547 --> 00:05:16.832
It's kind of annoying that you're
always gonna end up writing gain.

72
00:05:16.832 --> 00:05:22.438
But the idea of the Web Audio API
is that all of these nodes,

73
00:05:22.438 --> 00:05:25.071
they have parameters and so

74
00:05:25.071 --> 00:05:30.458
let's say we go into the gain node,
and we scroll down.

75
00:05:30.458 --> 00:05:37.922
You'll see it has a property called gain,
and it's defined as an audio param.

76
00:05:37.922 --> 00:05:44.308
The audio param, is a building block
of anything that can be adjustable.

77
00:05:44.308 --> 00:05:48.862
And so in this case, it's to do with
the volume, but sometimes it's to do with

78
00:05:48.862 --> 00:05:52.315
some other feature like frequency or
something like that.

79
00:05:52.315 --> 00:05:55.450
And we can go in there and
it has its own functions,

80
00:05:55.450 --> 00:05:57.850
we can simply set the value like this.

81
00:05:57.850 --> 00:06:01.375
So this is how you might
change the volume just by

82
00:06:01.375 --> 00:06:05.617
doing gain node dot gain dot
value is equal to the volume.

83
00:06:05.617 --> 00:06:08.021
But if you were to do that let's see.

84
00:06:08.021 --> 00:06:13.760
If you were to do that in
an interactive way where it's

85
00:06:13.760 --> 00:06:19.754
changing every single frame,
60 frames per second,

86
00:06:19.754 --> 00:06:25.125
you end up with some popping and
clicking noises.

87
00:06:25.125 --> 00:06:30.543
And it's hard to hear on this computer but
if you're listening to headphones and

88
00:06:30.543 --> 00:06:33.661
you're playing your web audio application.

89
00:06:33.661 --> 00:06:38.175
And you're doing this you're
gonna hear a little clicks and

90
00:06:38.175 --> 00:06:42.954
pops and the reason is because
the waves that are being created by

91
00:06:42.954 --> 00:06:47.670
this audio context suddenly
you're changing the amplitude.

92
00:06:47.670 --> 00:06:51.890
And so one of the waves is a little
bit smaller than the other wave.

93
00:06:51.890 --> 00:06:54.764
And they don't exactly line up.

94
00:06:54.764 --> 00:06:57.665
And there's gonna be this disconnect.

95
00:06:57.665 --> 00:07:01.864
And whenever there's one of those
disconnects, it's gonna create a pop or

96
00:07:01.864 --> 00:07:03.314
a sort of clicking noise.

97
00:07:03.314 --> 00:07:05.156
And so in order to avoid that,

98
00:07:05.156 --> 00:07:08.857
we have to basically always
adjust values in a gradual way.

99
00:07:08.857 --> 00:07:14.098
We can't just adjust the value with a hard
stop because it'll produce a click.

100
00:07:14.098 --> 00:07:19.122
So what we're doing,
is we're using this function called

101
00:07:19.122 --> 00:07:24.254
set target at time and
then passing in the new volume we want.

102
00:07:24.254 --> 00:07:27.663
We pass in the current time
of the audio context and

103
00:07:27.663 --> 00:07:32.789
then we pass in some small time constant
which can just for sake of example.

104
00:07:32.789 --> 00:07:36.508
And for most cases I think
you can just put it at 0.01.

105
00:07:36.508 --> 00:07:43.415
And what this is gonna do is it's going to
schedule a change, a gradual shift from

106
00:07:43.415 --> 00:07:49.022
the current time to basically
the next microsecond or whatever.

107
00:07:49.022 --> 00:07:53.356
So that it gradually shifts
from one value to the other

108
00:07:53.356 --> 00:07:56.452
instead of just an immediate change.

109
00:07:56.452 --> 00:08:00.027
And one thing to note is that we're
using audio context dot current time.

110
00:08:00.027 --> 00:08:03.926
You'll see that quite a bit
in the audio contexts and

111
00:08:03.926 --> 00:08:07.836
with the web audio API,
we don't just use date dot.

112
00:08:07.836 --> 00:08:11.262
Now we don't just use the browser time or
anything like that.

113
00:08:11.262 --> 00:08:16.251
Because the Web Audio API has its own
scheduling system, it has its own timers

114
00:08:16.251 --> 00:08:21.114
and the time resolution is a little
bit different than the browser timing.

115
00:08:21.114 --> 00:08:26.369
And so you don't really try and mix the
two timings, the current time of the audio

116
00:08:26.369 --> 00:08:31.709
context might not match exactly what you
would expect in real life sort of timing.

117
00:08:31.709 --> 00:08:33.739
Because it has its own scheduling so

118
00:08:33.739 --> 00:08:37.670
you just use that instead of using
date dot now or anything like that.

119
00:08:37.670 --> 00:08:41.454
And what that will do It'll just
gradually change the volume but

120
00:08:41.454 --> 00:08:46.091
it'll be gradual but it'll still be
fast enough that it'll feel immediate.

121
00:08:46.091 --> 00:08:53.899
[SOUND].

122
00:08:53.899 --> 00:08:57.998
And that last, these last two lines
here simply draws the rectangle and

123
00:08:57.998 --> 00:09:01.345
scales it wide or
small depending on the mouse position and

124
00:09:01.345 --> 00:09:04.436
depending on that volume,
so that's the gain node.

125
00:09:04.436 --> 00:09:12.300
Now the next couple demos are a little
bit more into the visualization of things

