WEBVTT

1
00:00:00.050 --> 00:00:04.218
So we've talked a little bit about
playing audio just mp3 files and

2
00:00:04.218 --> 00:00:09.100
then buffering it decoding it and
then playing it with low latency.

3
00:00:09.100 --> 00:00:12.851
Now let's talk a little bit
about visualizing that audio,

4
00:00:12.851 --> 00:00:16.076
how do we take the audio data and
split the nodes up so

5
00:00:16.076 --> 00:00:20.665
that we have some nodes that are playing
the audio through the speakers.

6
00:00:20.665 --> 00:00:24.665
But then another node that's analyzing
the audio as it's playing and

7
00:00:24.665 --> 00:00:27.240
maybe then we can start
to do some interesting

8
00:00:27.240 --> 00:00:30.654
data visualization with it
some sort of generative piece.

9
00:00:30.654 --> 00:00:35.768
Maybe something just like music visualizer
whatever it is you really wanna do,

10
00:00:35.768 --> 00:00:37.842
so to understand how to do this.

11
00:00:37.842 --> 00:00:42.906
First we have to understand how do we
think of this waveform in a way that is

12
00:00:42.906 --> 00:00:48.480
more digital rather than just being this
graphing of the wave going up and down.

13
00:00:48.480 --> 00:00:51.980
How do we map this into a digital
space with arrays in JavaScript and

14
00:00:51.980 --> 00:00:53.890
things like that?

15
00:00:53.890 --> 00:00:58.642
So what we're gonna use is
a Web Audio API function called

16
00:00:58.642 --> 00:01:03.710
getfloatTimeDomainData very
long wordy function.

17
00:01:03.710 --> 00:01:08.785
And that's from the analyserNode which
I'll show you how to set up in a second.

18
00:01:08.785 --> 00:01:13.709
And what that does is it gets us back
the data of the waveform as it's playing

19
00:01:13.709 --> 00:01:18.255
based on whatever it is that's
playing through that analyserNode.

20
00:01:18.255 --> 00:01:23.223
So remember here how I was talking about
waveforms earlier what it's going to

21
00:01:23.223 --> 00:01:27.581
give us are these little sample
points where if you zoomed really far

22
00:01:27.581 --> 00:01:29.808
in those little dots on the graph.

23
00:01:29.808 --> 00:01:33.912
Are the values that are gonna
come through this function and

24
00:01:33.912 --> 00:01:38.671
be put into an array and so over time
if we were to store all of the little

25
00:01:38.671 --> 00:01:42.400
samples that it gives
us from this function.

26
00:01:42.400 --> 00:01:47.156
Eventually we'll be able to draw the same
graph that you see here zoomed out.

27
00:01:47.156 --> 00:01:49.468
But because we're
streaming this audio in and

28
00:01:49.468 --> 00:01:52.965
because we're playing the audio and
because we can't just save every

29
00:01:52.965 --> 00:01:57.200
single sample all at once into a big
array that would be this massive array.

30
00:01:57.200 --> 00:02:01.674
What we tend to do in audio sort of
programming is we tend to think about it

31
00:02:01.674 --> 00:02:06.468
in terms of a window so we have a playhead
which is where the audio is playing.

32
00:02:06.468 --> 00:02:10.306
And then there's a window which is
some slice of time that's ahead

33
00:02:10.306 --> 00:02:14.280
of the playhead, and it's already
loaded that audio into memory and

34
00:02:14.280 --> 00:02:16.148
it's getting ready to play it.

35
00:02:16.148 --> 00:02:20.285
And because it's already there in
memory we can start to analyze it so

36
00:02:20.285 --> 00:02:22.649
that's kind of how this works is that.

37
00:02:22.649 --> 00:02:27.446
It just takes a little window a slice of
the audio as is playing rather than trying

38
00:02:27.446 --> 00:02:30.540
to take all of the data from
the entire audio track.

39
00:02:30.540 --> 00:02:34.698
So just to see it in another way let's
imagine for example that we're going

40
00:02:34.698 --> 00:02:38.672
from the 35th millisecond to the 36
millisecond in an audio track.

41
00:02:38.672 --> 00:02:43.385
I mean those are arbitrary timestamps it
might actually be much smaller slices of

42
00:02:43.385 --> 00:02:45.960
time or bigger depending on your settings.

43
00:02:47.310 --> 00:02:51.905
But then what we're gonna get from this
API function we're just gonna get the data

44
00:02:51.905 --> 00:02:55.702
within this little window here
the little data points of the wave and

45
00:02:55.702 --> 00:02:56.720
of the waveform.

46
00:02:56.720 --> 00:03:01.669
So here's how it looks in an array
when we call this function we

47
00:03:01.669 --> 00:03:05.680
pass in the array that we
want to receive the data.

48
00:03:05.680 --> 00:03:10.945
So we're just reusing the same array every
time we would call this function and

49
00:03:10.945 --> 00:03:13.753
the array has the index of zero starting.

50
00:03:13.753 --> 00:03:16.533
This is the zero element of the array and

51
00:03:16.533 --> 00:03:21.430
then it goes all the way to whatever
the maximum index of the array is.

52
00:03:21.430 --> 00:03:25.479
We can set this to be a bigger array if we
wanna have a bigger window and we wanna

53
00:03:25.479 --> 00:03:29.550
have more data, or we can do a smaller
array if we don't need that much data.

54
00:03:30.660 --> 00:03:34.789
And inside each element of
the array is the actual signal so

55
00:03:34.789 --> 00:03:36.987
if I was just to go back to this.

56
00:03:36.987 --> 00:03:41.826
Remember I talked about how this graph
is always positive 1 to negative 1

57
00:03:41.826 --> 00:03:45.710
it's always normalized
between those two values.

58
00:03:45.710 --> 00:03:49.420
So these float values are always
between negative one and positive one.

59
00:03:50.880 --> 00:03:55.160
And here on the left, this first index
represents the start of the window.

60
00:03:55.160 --> 00:04:00.543
So this line here, and this last index,
whatever the value is here represents

61
00:04:00.543 --> 00:04:05.860
whatever the value point in the sample
point is at the end of the window there.

62
00:04:08.440 --> 00:04:11.892
So every time we call this function as
the audio is playing we're probably

63
00:04:11.892 --> 00:04:14.842
gonna get a different waveform
because it's always gonna just

64
00:04:14.842 --> 00:04:16.470
be a single little slice of audio.

