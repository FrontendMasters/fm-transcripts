WEBVTT

1
00:00:00.200 --> 00:00:03.711
Now one more thing I'll talk about with
waveforms before I move into frequency

2
00:00:03.711 --> 00:00:04.252
analysis.

3
00:00:04.252 --> 00:00:08.607
And splitting up a track into different
tones, and pitches and things like that.

4
00:00:08.607 --> 00:00:12.230
One more thing is metering and
sort of getting the level of a track.

5
00:00:12.230 --> 00:00:16.378
We can use the waveform data
to get the overall signal

6
00:00:16.378 --> 00:00:19.024
the loudness sort of the volume.

7
00:00:19.024 --> 00:00:22.660
And make some sort of
visualization based on that.

8
00:00:22.660 --> 00:00:28.016
So for example here, we can see
that the circle is just changing

9
00:00:28.016 --> 00:00:33.080
size based on the overall
signal of the entire track.

10
00:00:33.080 --> 00:00:37.289
As it's louder, the circle gets bigger,
as it's quieter, the circle gets smaller.

11
00:00:39.320 --> 00:00:40.200
So I'm gonna open that one up.

12
00:00:41.820 --> 00:00:46.346
And this is doing pretty much the same
sort of stuff as we've seen before,

13
00:00:46.346 --> 00:00:49.430
it's creating a new Analyzer node.

14
00:00:49.430 --> 00:00:53.420
It has another thing here called smoothing
time constant which is another property

15
00:00:53.420 --> 00:00:54.503
of the Analyzer node.

16
00:00:54.503 --> 00:00:58.480
Which allows us to just have a bit of
a smoother result from one frame to

17
00:00:58.480 --> 00:00:59.106
the next.

18
00:00:59.106 --> 00:01:03.115
It's a little bit like the interpolation
or the smoothing that I was

19
00:01:03.115 --> 00:01:07.842
talking about before except the web audio
API actually includes this built in.

20
00:01:07.842 --> 00:01:11.096
So that you can get a little bit
of time smoothing between frames.

21
00:01:11.096 --> 00:01:16.895
And then if we go down there's this
additional function that I've added here,

22
00:01:16.895 --> 00:01:22.250
which is in the snippets so
if you're going to the course repo.

23
00:01:22.250 --> 00:01:24.470
Here it is.

24
00:01:24.470 --> 00:01:30.572
Inside the code snippets, you'll find
this it's called the root mean squared.

25
00:01:30.572 --> 00:01:35.778
And this is basically just gonna give
us the strength of the signal and

26
00:01:35.778 --> 00:01:38.396
value that goes between 0 and 1.

27
00:01:38.396 --> 00:01:40.391
And so if we scroll down,

28
00:01:40.391 --> 00:01:46.960
to where we're doing our Analyzer
node.get float time domain data.

29
00:01:46.960 --> 00:01:50.694
Once we get the data, we pass that data
into the root mean squared signal.

30
00:01:50.694 --> 00:01:54.156
And that's going to give us
some value between 0 and 1.

31
00:01:54.156 --> 00:01:56.820
It's probably gonna be very
small the number that we get.

32
00:01:56.820 --> 00:02:00.677
Because if the value is 1,
it means it's blasting audio and

33
00:02:00.677 --> 00:02:03.490
our eardrums would be completely pierced.

34
00:02:03.490 --> 00:02:07.790
So you just probably are gonna
want to scale that by some value.

35
00:02:07.790 --> 00:02:12.351
And then maybe further scale it by some
pixel value to get an actual pixel size of

36
00:02:12.351 --> 00:02:15.268
how big the circle should
be based on that signal.

37
00:02:15.268 --> 00:02:19.326
[MUSIC]

38
00:02:19.326 --> 00:02:24.900
And so already we're starting to get into
this visualization of the audio aspect.

39
00:02:24.900 --> 00:02:31.400
So, based on this one,
we can just go one step further.

40
00:02:31.400 --> 00:02:34.747
And we can actually split
that into different bands.

41
00:02:34.747 --> 00:02:36.318
So we can say well,

42
00:02:36.318 --> 00:02:42.310
what's the strength of the audio at
these different frequency bands?

43
00:02:42.310 --> 00:02:47.373
So, when we talk about low and
high frequencies such as a treble,

44
00:02:47.373 --> 00:02:49.777
cymbal crashes and high hats.

45
00:02:49.777 --> 00:02:54.185
Versus a really low frequency sound
like a kick drum, or guitar pluck,

46
00:02:54.185 --> 00:02:57.250
those are the different frequency bands.

47
00:02:57.250 --> 00:02:59.990
And so we can start to split
the track up into those bands.

48
00:02:59.990 --> 00:03:03.526
Or we can start to visualize
the signal of those different bands and

49
00:03:03.526 --> 00:03:06.890
potentially create a more
interesting audio visualization.

50
00:03:08.060 --> 00:03:11.500
So now suddenly here we're
visualizing this piano sound.

51
00:03:12.660 --> 00:03:15.944
And we're seeing how the track is
actually changing its form in terms of

52
00:03:15.944 --> 00:03:16.719
its frequency.

53
00:03:16.719 --> 00:03:25.380
[MUSIC]

54
00:03:25.380 --> 00:03:29.800
So, just to skim this one,
it's a little bit more advanced as well.

55
00:03:29.800 --> 00:03:32.516
The next thing I'm gonna talk
about after this is frequency and

56
00:03:32.516 --> 00:03:35.610
all sort of distill what this
frequency stuff is all about.

57
00:03:35.610 --> 00:03:40.400
But just so you can see, this is one
way of splitting up the frequency.

58
00:03:40.400 --> 00:03:44.010
And it's using the Web Audio API itself.

59
00:03:44.010 --> 00:03:47.205
So instead of having to do
a bunch of frequency math and

60
00:03:47.205 --> 00:03:50.969
having to go into the frequency arrays and
figure them all out.

61
00:03:50.969 --> 00:03:55.300
We're just gonna use the same metering
that we used in the last demo.

62
00:03:55.300 --> 00:04:00.203
Just the root mean squared, except we're
gonna use several different audio nodes.

63
00:04:00.203 --> 00:04:04.395
Where the meter is on each of
those different audio nodes.

64
00:04:04.395 --> 00:04:09.673
And so we start with different bands of
frequency, with different colors assigned.

65
00:04:09.673 --> 00:04:13.942
And again I'll talk a little bit more
about what this frequency value means it's

66
00:04:13.942 --> 00:04:14.517
in hertz.

67
00:04:14.517 --> 00:04:18.672
But this will be to different
bands of tones sort of.

68
00:04:18.672 --> 00:04:21.884
So these lower numbers
represent lower frequency, and

69
00:04:21.884 --> 00:04:25.311
these higher numbers represent
higher frequency sounds.

70
00:04:25.311 --> 00:04:29.652
And then each of those bands,
we're gonna create a new Analyzer for

71
00:04:29.652 --> 00:04:31.032
that specific band.

72
00:04:31.032 --> 00:04:35.777
We're gonna create a new float array for
that specific band,

73
00:04:35.777 --> 00:04:40.835
and also what's called a filter
Node AN biquad filter.

74
00:04:40.835 --> 00:04:45.406
And what this can do, is that it's
an audio node where any signal that gets

75
00:04:45.406 --> 00:04:48.008
passed into it, we can shape the signal.

76
00:04:48.008 --> 00:04:53.955
So that we only end up taking let's say,
a certain range of frequencies.

77
00:04:53.955 --> 00:04:56.187
Let's say just the low end frequencies,
and

78
00:04:56.187 --> 00:04:58.895
all the others get cancelled out to zero.

79
00:04:58.895 --> 00:05:03.380
And what that means, is that we can then
pass that signal on to the Analyzer.

80
00:05:03.380 --> 00:05:07.232
And then use the analyzer just as we were,
the root mean squared,

81
00:05:07.232 --> 00:05:11.960
in order to actually get a strength
of just a single band of frequency.

82
00:05:11.960 --> 00:05:15.210
And so this is a great way
to do audio visualization.

83
00:05:15.210 --> 00:05:19.351
It's actually I would say the way that
might be preferred, at least by me,

84
00:05:19.351 --> 00:05:21.672
I really have started to prefer this way.

85
00:05:21.672 --> 00:05:27.402
One of the reasons is that it's very
adjustable, very easily adjustable,

86
00:05:27.402 --> 00:05:31.280
and it just works out of
the box with Web Audio API.

87
00:05:31.280 --> 00:05:35.602
It's a little bit more setup because
you have to create an analyzer for

88
00:05:35.602 --> 00:05:39.930
each band of frequency, and
you have to do a few extra things.

89
00:05:39.930 --> 00:05:43.883
But it supports this really nice sort of
smooth fall off because of these filters

90
00:05:43.883 --> 00:05:45.800
that we're using.

91
00:05:45.800 --> 00:05:49.941
But I'm not gonna go into this crazy depth
of the biquad filter because it's a whole

92
00:05:49.941 --> 00:05:50.950
wormhole.

93
00:05:50.950 --> 00:05:54.844
But I would highly recommend if you
wanted to continue along this path.

94
00:05:54.844 --> 00:06:00.076
And making these really smooth and
sort of polished audio visualizers,

95
00:06:00.076 --> 00:06:04.260
you might wanna look
into this biquad filter.

96
00:06:04.260 --> 00:06:08.338
And just to show you the API docs here for
a sec, there we go.

97
00:06:10.891 --> 00:06:14.324
It has a lot of these different
types of filtering mechanisms.

98
00:06:14.324 --> 00:06:18.170
So it allows us to cut off
low end frequencies or

99
00:06:18.170 --> 00:06:20.938
to cut off high end frequencies.

100
00:06:20.938 --> 00:06:25.476
Or the one we're using is just a bandpass
which means only allow a certain band of

101
00:06:25.476 --> 00:06:27.250
frequencies to pass through.

102
00:06:27.250 --> 00:06:30.187
Or others where it's a knotch filter,

103
00:06:30.187 --> 00:06:33.490
which is kind of
the opposite of a bandpass.

104
00:06:34.670 --> 00:06:38.195
It only allows everything except
the band that we specified.

105
00:06:38.195 --> 00:06:44.840
And then we can very easily with the the
audio params just like the gain node.

106
00:06:44.840 --> 00:06:48.008
We can adjust those values in
terms of the bandwidth, and

107
00:06:48.008 --> 00:06:52.390
how much of the frequency we wanna take,
or how much we wanna cut off.

108
00:06:52.390 --> 00:06:55.638
So this biquadfilter is really powerful,
something to look into for

109
00:06:55.638 --> 00:06:57.100
a little bit later.

110
00:06:57.100 --> 00:06:59.013
And for
just your own sort of exercises perhaps.

