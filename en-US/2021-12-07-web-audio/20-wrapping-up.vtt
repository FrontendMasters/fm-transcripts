WEBVTT

1
00:00:00.000 --> 00:00:03.890
Thanks for listening, thanks for
tuning in, happy to take any questions.

2
00:00:03.890 --> 00:00:08.516
And if you're on this repo and you see
any issues with the repo or you have any

3
00:00:08.516 --> 00:00:12.777
particular problems or questions,
feel free to pop an issue open and

4
00:00:12.777 --> 00:00:15.950
if I have some time,
I'll try and get to you there.

5
00:00:15.950 --> 00:00:19.420
&gt;&gt; What kind of limitations
have you met with Web Audio?

6
00:00:19.420 --> 00:00:21.110
&gt;&gt; So there's a lot of, I mean,

7
00:00:21.110 --> 00:00:24.372
it's been getting a lot better
in the last couple years.

8
00:00:24.372 --> 00:00:26.447
But when I started doing Web Audio,

9
00:00:26.447 --> 00:00:30.818
there was a lot of different browser
problems across different browsers.

10
00:00:30.818 --> 00:00:33.457
So Safari wouldn't support certain things,

11
00:00:33.457 --> 00:00:37.111
and mobile phones wouldn't support
certain things, and it was

12
00:00:37.111 --> 00:00:41.856
this nightmare to try and manage all these
different browser incompatibilities.

13
00:00:41.856 --> 00:00:44.829
It's gotten a lot better though and
recently,

14
00:00:44.829 --> 00:00:49.434
I'd say it's starting to get to a point
where you just are able to code it in

15
00:00:49.434 --> 00:00:51.987
the way that it shows on the MDN website.

16
00:00:51.987 --> 00:00:56.405
And you don't have to worry too
much about incompatibilities.

17
00:00:56.405 --> 00:01:01.115
So that's one thing just to be aware
of if you are trying to support,

18
00:01:01.115 --> 00:01:04.351
let's say older browsers, or older phones.

19
00:01:04.351 --> 00:01:09.359
Other problems sometimes have to do
with things like popping and clicking,

20
00:01:09.359 --> 00:01:14.445
that's always been a bit of a weird
thing where certain devices they're just

21
00:01:14.445 --> 00:01:19.315
not able to handle dozens of SINTs
overlapping with effects and reverbs.

22
00:01:19.315 --> 00:01:24.035
It starts to slowed down, especially
if you're doing that at the same

23
00:01:24.035 --> 00:01:28.844
time as really pushing the browser in
terms of maybe the GPU and the CPU.

24
00:01:28.844 --> 00:01:33.633
And you're just really maxing out
the capabilities of the browser and

25
00:01:33.633 --> 00:01:34.535
the device.

26
00:01:34.535 --> 00:01:40.048
Sometimes you might start to get
some issues in terms of lag or

27
00:01:40.048 --> 00:01:46.330
in terms of popping and clicking
that's happening in the Web Audio.

28
00:01:46.330 --> 00:01:51.374
And then also as much as it's,
there's a lot of resources and

29
00:01:51.374 --> 00:01:55.643
there's a lot of information,
a lot of libraries,

30
00:01:55.643 --> 00:01:58.662
it's still kind of a complex beast.

31
00:01:58.662 --> 00:02:03.635
There's still a lot to unpack,
because it's an API that's

32
00:02:03.635 --> 00:02:08.130
really powerful and
able to do a lot of amazing things.

33
00:02:08.130 --> 00:02:14.534
But it's also an API that is sometimes so
low level and requires you to do so

34
00:02:14.534 --> 00:02:19.509
much more on top of it in order
to achieve certain things.

35
00:02:19.509 --> 00:02:25.661
So I can't think of any really specific
examples, but in the past I've had to

36
00:02:25.661 --> 00:02:31.720
do some pretty wonky things with decoding
WAV files because Web Audio API for

37
00:02:31.720 --> 00:02:37.990
some reason didn't support a certain
type of WAV file or something like that.

38
00:02:37.990 --> 00:02:43.375
Or potentially having to do some
weird stuff where like timing,

39
00:02:43.375 --> 00:02:47.962
because the Web Audio API
doesn't always give you like

40
00:02:47.962 --> 00:02:51.750
a super easy set timeout type of function,
so

41
00:02:51.750 --> 00:02:57.956
you have to really build out these
complex schedule and things like that.

42
00:02:57.956 --> 00:03:02.669
So, yeah, that's one thing,
I guess, is that it's low level and

43
00:03:02.669 --> 00:03:05.644
it takes a bit of time to
build on top of it and

44
00:03:05.644 --> 00:03:09.632
that's why these libraries
like Tone.js are helpful.

45
00:03:09.632 --> 00:03:15.740
But they also have very specific goals in
mind that maybe won't apply very well for

46
00:03:15.740 --> 00:03:18.143
your application or your game.

47
00:03:18.143 --> 00:03:22.485
&gt;&gt; What about kick detection or
beat detection?

48
00:03:22.485 --> 00:03:27.401
&gt;&gt; Yeah, so there's some libraries
that do this kind of work very

49
00:03:27.401 --> 00:03:32.133
specifically and
they have some really smart algorithms for

50
00:03:32.133 --> 00:03:36.140
how to detect the kick drum
in any arbitrary track.

51
00:03:36.140 --> 00:03:40.063
So kind of like that problem
that came up earlier is like,

52
00:03:40.063 --> 00:03:44.642
how do you do visualization when
you wanna support any type of audio

53
00:03:44.642 --> 00:03:49.258
instead of just the audio that's
always within a specific range?

54
00:03:49.258 --> 00:03:52.633
And so these beat detection libraries,

55
00:03:52.633 --> 00:03:58.092
they tend to use these complex
algorithms that use a lot of math and

56
00:03:58.092 --> 00:04:02.754
it's beyond what I know how to
do kind of in this kind of,

57
00:04:02.754 --> 00:04:07.834
fast Fourier transform type of
math is a little bit above me.

58
00:04:07.834 --> 00:04:13.702
But it's pretty powerful and you can
use those to augment your visualizers.

59
00:04:13.702 --> 00:04:18.255
There are some libraries
that are really designed for

60
00:04:18.255 --> 00:04:22.811
specifically doing
visualization on something like

61
00:04:22.811 --> 00:04:27.771
an electronic track that
supports kick drum detection and

62
00:04:27.771 --> 00:04:34.372
things like that that are beyond what
I've been sort of talking about today.

63
00:04:34.372 --> 00:04:38.510
So yeah, it's a useful thing to look into.

64
00:04:39.920 --> 00:04:44.253
&gt;&gt; Are there any tools with helping
combining audio, visuals, and

65
00:04:44.253 --> 00:04:46.830
mobile device gyroscope?

66
00:04:46.830 --> 00:04:50.568
&gt;&gt; Well, if you have a mobile
device gyroscope APIs support,

67
00:04:50.568 --> 00:04:54.305
if it's enabled on the phone and
you can use the gyroscope,

68
00:04:54.305 --> 00:04:58.375
then you can kinda do what we've
been doing today in the course.

69
00:04:58.375 --> 00:05:02.297
Where you have maybe filters or effects
and the parameters of those filters

70
00:05:02.297 --> 00:05:04.923
are changing based on
the value of the gyroscope.

71
00:05:04.923 --> 00:05:09.379
So you could do something like that and it
could be quite fun where maybe depending

72
00:05:09.379 --> 00:05:12.992
on how the phone is being positioned,
it's changing the audio.

73
00:05:12.992 --> 00:05:16.130
So that wouldn't really
require its own library.

74
00:05:16.130 --> 00:05:19.670
You could do it already just with Tone.js,

75
00:05:19.670 --> 00:05:24.646
you might have to just google
search gyroscope JavaScript and

76
00:05:24.646 --> 00:05:29.060
find some of the details
around how do you access this.

77
00:05:29.060 --> 00:05:30.810
And it would be something like that.

78
00:05:32.970 --> 00:05:37.546
&gt;&gt; Have you experimented with
using WebSockets along with

79
00:05:37.546 --> 00:05:40.329
audio to sync users in real time?

80
00:05:40.329 --> 00:05:44.952
&gt;&gt; No, I haven't tried using
WebSockets to sync audio.

81
00:05:44.952 --> 00:05:48.769
I imagine, actually I might have,

82
00:05:48.769 --> 00:05:53.671
I wasn't really directly
part of this project.

83
00:05:53.671 --> 00:05:58.788
But there was a project many years ago
at an agency I was working at where

84
00:05:58.788 --> 00:06:03.732
there needed to be a sync where one
person would push a play button and

85
00:06:03.732 --> 00:06:06.368
many devices would play the audio.

86
00:06:06.368 --> 00:06:10.163
And I think for
the most part with WebSockets it was okay.

87
00:06:10.163 --> 00:06:15.139
But I think because audio is so
specific, that if it's a fraction of

88
00:06:15.139 --> 00:06:20.551
a second out of sync, your brain can
really, really detect the problem,

89
00:06:20.551 --> 00:06:26.170
your brain is really good at detecting
small flaws with these kinda things.

90
00:06:26.170 --> 00:06:30.925
And so I think there was some challenges
with getting that to work perfectly

91
00:06:30.925 --> 00:06:34.999
because if even one was out of sync
to the other just a little bit,

92
00:06:34.999 --> 00:06:36.751
it wouldn't sound great.

93
00:06:36.751 --> 00:06:42.580
And I think what they ended up doing was
having to sort of forge it a little bit by

94
00:06:42.580 --> 00:06:48.069
making it so that even though you say
play it at one millisecond from now.

95
00:06:48.069 --> 00:06:50.594
The phone would actually say okay,

96
00:06:50.594 --> 00:06:55.729
I'm gonna play it a little bit earlier
than that or something like that,

97
00:06:55.729 --> 00:06:59.950
just to make sure that it's
playing at the perfect moment.

98
00:06:59.950 --> 00:07:04.890
I think generally with the web,
one of the things that's lacking in not

99
00:07:04.890 --> 00:07:08.593
just audio but also visual,
video sort of playback,

100
00:07:08.593 --> 00:07:13.801
is really fine grained, very accurate
level controls of media playback.

101
00:07:13.801 --> 00:07:19.425
So for example, saying I want to play
this MP4 or MP3, whether it's video or

102
00:07:19.425 --> 00:07:24.283
audio or both, I wanna play it from
a specific timestamp that is down

103
00:07:24.283 --> 00:07:28.573
to the exact frame that I wanna play or
something like that.

104
00:07:28.573 --> 00:07:33.570
The web's not so good at those kind
of exact playbacks, unfortunately.

105
00:07:33.570 --> 00:07:37.220
But it probably is possible
at a basic level and

106
00:07:37.220 --> 00:07:42.659
you might be able to create some
really cool projects out of it still.

107
00:07:42.659 --> 00:07:45.604
&gt;&gt; Are there ways to route signals to and

108
00:07:45.604 --> 00:07:50.450
from outside of the browser for
external heavy processing?

109
00:07:50.450 --> 00:07:54.304
&gt;&gt; So that's something I
haven't explored too much of.

110
00:07:54.304 --> 00:08:00.061
I mean, typically what we would do if
we're doing some sort of installation or

111
00:08:00.061 --> 00:08:02.766
something that's using Web Audio,

112
00:08:02.766 --> 00:08:07.848
is it would just be using the output
device of the computer or laptop.

113
00:08:07.848 --> 00:08:12.379
I mean, basically from the browser
to the output device, and

114
00:08:12.379 --> 00:08:18.670
then sending that along to something that
might be totally unrelated to the browser.

115
00:08:18.670 --> 00:08:24.518
Maybe even it could be some sort of
visual output like sending the signal

116
00:08:24.518 --> 00:08:30.471
to a physical device, like a physical
RGB strip or something like that.

117
00:08:30.471 --> 00:08:33.184
So it's still coming from the browser and

118
00:08:33.184 --> 00:08:38.303
you're just using different physical
plugs and different sort of interfaces

119
00:08:38.303 --> 00:08:43.125
that are physical audio interfaces
to reroute that to different places.

120
00:08:43.125 --> 00:08:48.060
Where you might be able to explore as
well, and this is a different path

121
00:08:48.060 --> 00:08:53.260
that I haven't really looked into,
is WebRTC has been coming a long way.

122
00:08:53.260 --> 00:08:58.454
And there may be ways of
piping the signal directly

123
00:08:58.454 --> 00:09:03.895
from an audio node into
a WebRTC stream of some kind,

124
00:09:03.895 --> 00:09:08.469
which may allow you to
stream audio to appear

125
00:09:08.469 --> 00:09:12.691
in a peer-to-peer kind of situation.

126
00:09:12.691 --> 00:09:16.297
And one other thing, I guess,

127
00:09:16.297 --> 00:09:22.419
worth mentioning as well
is offline audio context.

128
00:09:22.419 --> 00:09:27.055
So, so far all the audio that we've
been exploring is real time playback of

129
00:09:27.055 --> 00:09:31.768
audio for the purpose of you're hearing
it, you're interacting with it,

130
00:09:31.768 --> 00:09:35.688
you're able to play with the audio and
hear it at the same time.

131
00:09:35.688 --> 00:09:38.251
But if you wanted to do something like,

132
00:09:38.251 --> 00:09:42.913
let's say you wanted to build a MP3
converter or something like that or

133
00:09:42.913 --> 00:09:46.662
you wanted to build a tool
like Audacity or like Ableton.

134
00:09:46.662 --> 00:09:50.596
Or some sort of audio tool,
a digital audio workstation, and

135
00:09:50.596 --> 00:09:55.211
you wanted to render out an MP3 file or
a WAV file with some audio nodes and

136
00:09:55.211 --> 00:09:58.710
using the same structure
that we've been exploring.

137
00:09:58.710 --> 00:10:02.570
And so you don't want it to be in
real time cuz you don't want it

138
00:10:02.570 --> 00:10:05.539
to just you have to wait for
a whole two minutes,

139
00:10:05.539 --> 00:10:09.790
you want it to run faster than real
time or as fast as it possibly can.

140
00:10:09.790 --> 00:10:14.523
And you don't really need it to go through
the speakers because it's just running

141
00:10:14.523 --> 00:10:17.953
internally to convert,
let's say one format to another or

142
00:10:17.953 --> 00:10:20.986
to add effects to something and
then produce a file.

143
00:10:20.986 --> 00:10:25.585
You can use this OfflineAudioContext,
which is only really in new browsers,

144
00:10:25.585 --> 00:10:29.010
like Chrome and things, but
it's quite useful for that.

145
00:10:30.010 --> 00:10:32.530
&gt;&gt; There's a more general
question from online,

146
00:10:32.530 --> 00:10:36.570
how do you go about finding inspiration
for creating the things that you do?

147
00:10:38.200 --> 00:10:42.072
&gt;&gt; Yeah, so a lot of the inspiration
that I find is actually through online,

148
00:10:42.072 --> 00:10:46.505
through Twitter, through Instagram,
following other artists and creators, and

149
00:10:46.505 --> 00:10:48.081
sometimes game developers.

150
00:10:48.081 --> 00:10:53.564
Or sometimes people that are just making
these kinds of audio visual experiences.

151
00:10:53.564 --> 00:10:58.375
It took me a while to sort of build up
this this group of people that I've

152
00:10:58.375 --> 00:11:03.202
been following that seem to always
be producing really amazing work.

153
00:11:03.202 --> 00:11:07.866
Or at least every time I look at
my Twitter and Instagram feeds,

154
00:11:07.866 --> 00:11:10.420
I'm just constantly blown away.

155
00:11:10.420 --> 00:11:15.062
And I guess that's because of many
years of searching and following and

156
00:11:15.062 --> 00:11:17.924
then looking at who
people are following and

157
00:11:17.924 --> 00:11:21.883
who they're resharing and
then finding more through them.

158
00:11:21.883 --> 00:11:26.943
So that's probably the main source of
most of my inspiration these days.

159
00:11:26.943 --> 00:11:32.401
But also especially as things
are beginning to open up a little bit,

160
00:11:32.401 --> 00:11:37.475
I kind of realized how much I missed
being at events in person and

161
00:11:37.475 --> 00:11:42.456
finding these kind of events that
are maybe art exhibitions or

162
00:11:42.456 --> 00:11:45.460
music shows or something like that.

163
00:11:45.460 --> 00:11:52.339
That's a little bit off the beat and
track, an example of that is Ryoji Ikeda,

164
00:11:52.339 --> 00:11:57.132
I'm not sure if he's still,
spell his name, Ryoji,

165
00:11:57.132 --> 00:12:02.574
there it is, not sure if he's
still doing his show in London.

166
00:12:02.574 --> 00:12:07.149
He might be, 180 The Strand,
but this is a good example,

167
00:12:07.149 --> 00:12:11.726
is I heard about this show in London and
it's really the kinda

168
00:12:11.726 --> 00:12:16.600
thing where you look at the site and
it looks kinda interesting.

169
00:12:16.600 --> 00:12:22.381
It seems like they might have changed
from his to a different exhibition,

170
00:12:22.381 --> 00:12:27.138
but you go to this and
suddenly you're kind of presented with

171
00:12:27.138 --> 00:12:30.516
an exhibition that really blows you away.

172
00:12:30.516 --> 00:12:33.764
And I think just being at
these kinds of events,

173
00:12:33.764 --> 00:12:38.477
you are really inspired more than you
really can be in some ways just by

174
00:12:38.477 --> 00:12:43.450
browsing your phone cuz it just
transports you to another world almost.

175
00:12:43.450 --> 00:12:48.571
And so, yeah, I guess going to actual
exhibitions and trying to actively seek

176
00:12:48.571 --> 00:12:54.450
these installations and trying to find
out how to actually visit them in person.

177
00:12:54.450 --> 00:12:57.336
That's been pretty transformative, and

178
00:12:57.336 --> 00:13:01.352
just being able to access that
lately has been really nice.

179
00:13:01.352 --> 00:13:07.517
So I managed to go see this one and
this was a couple months back.

180
00:13:07.517 --> 00:13:12.690
And you leave the exhibition with
your ears ringing in your eyes

181
00:13:12.690 --> 00:13:18.657
kind of a little blurry because it was
just so much raw visuals and noise.

182
00:13:18.657 --> 00:13:23.847
But you're kinda leaving as well inspired
to do more things and also to bring

183
00:13:23.847 --> 00:13:29.459
the work back into this physical space,
rather than just keep it purely digital.

184
00:13:29.459 --> 00:13:32.221
So, yeah, mix of Instagram, Twitter and

185
00:13:32.221 --> 00:13:37.080
then also going for art exhibitions and
galleries and museums and things.

