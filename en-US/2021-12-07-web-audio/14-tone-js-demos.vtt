WEBVTT

1
00:00:00.250 --> 00:00:04.024
So if you go back to the repository here,
and

2
00:00:04.024 --> 00:00:09.736
just scroll down until you see the tone
JS you can see the website for

3
00:00:09.736 --> 00:00:12.801
tone JS and the API documentation.

4
00:00:12.801 --> 00:00:15.057
So tone JS is a free library,

5
00:00:15.057 --> 00:00:19.950
it's open source and
once it's sort of set up and installed.

6
00:00:19.950 --> 00:00:22.218
Whether you install it with MPN and
no GES or

7
00:00:22.218 --> 00:00:26.910
whether you just put it in a script tag
which is what we are gonna to be doing.

8
00:00:26.910 --> 00:00:32.190
Once it's all set up, you have this global
access to a variable called tone and

9
00:00:32.190 --> 00:00:34.120
that's the API for tone JS.

10
00:00:35.700 --> 00:00:38.950
And you can use tone to create sounds.

11
00:00:38.950 --> 00:00:43.450
So for example,
this here just creates a new synth and

12
00:00:43.450 --> 00:00:46.157
then function to destination.

13
00:00:46.157 --> 00:00:47.028
What that does,

14
00:00:47.028 --> 00:00:51.800
is very similar to what I was talking
about with connecting wires and web audio.

15
00:00:51.800 --> 00:00:55.380
This connects the synth to
the audio context destination.

16
00:00:55.380 --> 00:00:58.310
So it's just a sort of handy function for

17
00:00:58.310 --> 00:01:04.150
us to not have to always type synth dot
connect audio context dot destination.

18
00:01:04.150 --> 00:01:06.340
This is just a simpler function.

19
00:01:06.340 --> 00:01:12.239
And then once the synth is created,
you can trigger an attack release so

20
00:01:12.239 --> 00:01:15.992
C4 that's the the note
that you wanna play.

21
00:01:15.992 --> 00:01:20.963
And that's depending on
the frequency you can use different

22
00:01:20.963 --> 00:01:25.920
notes here like D or
something else half A whatever.

23
00:01:25.920 --> 00:01:30.848
And then here is the length
the duration of the note,

24
00:01:30.848 --> 00:01:36.420
and this is they have their
own sort of syntax for this.

25
00:01:36.420 --> 00:01:42.073
It could be in seconds if you pass
a number or in some sort of time unit,

26
00:01:42.073 --> 00:01:47.638
but you can also pass this note very
variable sort of unit 4n or 8n.

27
00:01:47.638 --> 00:01:52.925
Which is the let's say eighth of
a note in terms of music timing and

28
00:01:52.925 --> 00:01:54.473
things like that.

29
00:01:54.473 --> 00:02:00.514
And when they say trigger attack release,
the idea of attack is that you're turning

30
00:02:00.514 --> 00:02:06.240
the note on and the idea of release
is that you're turning the node off.

31
00:02:06.240 --> 00:02:09.671
So this is both of those things
the note gets turned on and

32
00:02:09.671 --> 00:02:14.730
then right away after some set duration,
the node gets turned off.

33
00:02:14.730 --> 00:02:17.730
Whereas when we talk about trigger attack,
and

34
00:02:17.730 --> 00:02:22.085
trigger release separately,
you might wanna just turn the note on.

35
00:02:22.085 --> 00:02:26.401
Leave it on for however long you want it
to be on for, just producing sound and

36
00:02:26.401 --> 00:02:28.768
then at some point trigger that release.

37
00:02:28.768 --> 00:02:34.733
And that's what they're doing in this demo
here where they start with a C4 note,

38
00:02:34.733 --> 00:02:37.890
and they trigger it immediately.

39
00:02:37.890 --> 00:02:43.055
And then after some time duration like
a second, they trigger the release.

40
00:02:43.055 --> 00:02:49.349
[SOUND] And so when we use

41
00:02:49.349 --> 00:02:55.572
tone synth it just starts by creating
a sort of basic synthesiser for us.

42
00:02:55.572 --> 00:03:00.558
What we were hearing earlier,
what I was showing you earlier

43
00:03:00.558 --> 00:03:04.880
in terms of that these demos
this one here at the top.

44
00:03:06.830 --> 00:03:08.900
This is like a synthesis
using a sine wave.

45
00:03:10.270 --> 00:03:13.559
But there are different ways of
of changing these scents and

46
00:03:13.559 --> 00:03:18.520
using different scents within the tone JS
library to get different types of sounds.

47
00:03:18.520 --> 00:03:22.082
Maybe sounds this sounds more
like a guitar or like a piano or

48
00:03:22.082 --> 00:03:26.996
more like an electronic sort of bass, or
maybe more like a lead, different keys,

49
00:03:26.996 --> 00:03:28.700
things like that.

50
00:03:28.700 --> 00:03:31.803
And that's really a matter of just
started diving into their documentation,

51
00:03:31.803 --> 00:03:35.001
figuring out the different since they have
and figuring out some of the different

52
00:03:35.001 --> 00:03:37.180
options which we're going to
be doing a little bit of.

53
00:03:39.530 --> 00:03:43.763
Another reference point is just the API
Doc's themselves just to make sure that

54
00:03:43.763 --> 00:03:46.590
you have that sort of
open maybe in a new tab.

55
00:03:46.590 --> 00:03:49.618
Because there's lots of new things
all sort of being going through here.

56
00:03:54.213 --> 00:03:59.117
So if you go into the repo and if you've
been following along with the repo this

57
00:03:59.117 --> 00:04:01.990
whole time you might
need to just get pulled.

58
00:04:01.990 --> 00:04:05.981
Just to make sure that you are up to
date in case there is anything that's

59
00:04:05.981 --> 00:04:07.788
changed in the last little bit.

60
00:04:07.788 --> 00:04:13.342
And just you can see that there's
some demos here specifically for

61
00:04:13.342 --> 00:04:16.811
tone JS, so
these are the tone JS demos and

62
00:04:16.811 --> 00:04:21.940
the way that they work is
that in the HTML document.

63
00:04:21.940 --> 00:04:29.260
I've added an additional script tag and
it's using this script tag here.

64
00:04:30.840 --> 00:04:35.460
And I'm using an CDN called unpackage or
unpkg and

65
00:04:35.460 --> 00:04:39.530
that's pulling tonejs directly from NPM.

66
00:04:40.820 --> 00:04:44.947
And it's pulling it as this sort of built
file that we can just then drop into

67
00:04:44.947 --> 00:04:47.230
a script tag just like this.

68
00:04:47.230 --> 00:04:51.310
And once we do this,
then we can access tone JS and JavaScript.

69
00:04:52.460 --> 00:04:54.504
So I'm gonna just close these and

70
00:04:54.504 --> 00:04:59.340
I'm gonna just start with the little sine
wave demo I was showing you earlier.

71
00:05:01.380 --> 00:05:06.285
So I'm gonna pull this one up, [SOUND] and

72
00:05:06.285 --> 00:05:11.767
in this demo,
you can see it's just a regular

73
00:05:11.767 --> 00:05:17.411
P5 setup function here
to create our canvas.

74
00:05:17.411 --> 00:05:21.480
Maybe clear it with a black color,
some background color.

75
00:05:21.480 --> 00:05:25.150
And then here we're using
tone JS a little bit here.

76
00:05:25.150 --> 00:05:29.145
So the first thing we're doing is we're
setting the volume because these pure

77
00:05:29.145 --> 00:05:31.700
synths are sometimes a little bit loud.

78
00:05:31.700 --> 00:05:34.060
And it's just producing this
like really loud signal.

79
00:05:34.060 --> 00:05:38.002
So I'm using a volume that's negative
15,you can change that if you want, lower,

80
00:05:38.002 --> 00:05:39.630
higher, whatever.

81
00:05:39.630 --> 00:05:44.490
And I'm just setting the master volume
of tone to this variable there,

82
00:05:44.490 --> 00:05:48.300
and then I'm creating a synth and
that looks like this.

83
00:05:48.300 --> 00:05:53.228
And the options of a synth give us the
ability to change the type of wave that is

84
00:05:53.228 --> 00:05:54.390
being produced.

85
00:05:54.390 --> 00:05:58.967
So the type of oscillator, so if we just
check this again, we'll see that it's like

86
00:05:58.967 --> 00:06:03.910
a sine wave and that's kind of what
we've been dealing with this whole time.

87
00:06:03.910 --> 00:06:06.330
But there's different types
of waves that we can use.

88
00:06:06.330 --> 00:06:10.438
So sine waves are the one that
produced that kind of noise that we

89
00:06:10.438 --> 00:06:13.474
have been hearing when
we're clicking that.

90
00:06:13.474 --> 00:06:16.989
It's this kind of constant high
pitch whining noise, but we can

91
00:06:16.989 --> 00:06:21.950
also use different waves like square waves
or triangle waves or sawtooth waves.

92
00:06:21.950 --> 00:06:25.860
Or even others,
that will sound a little bit different.

93
00:06:25.860 --> 00:06:30.198
So here's this square oscillator, [SOUND]
the background is still looking like

94
00:06:30.198 --> 00:06:34.354
a sine wave and that's cuz I'm just
drawing a very simple sort of sine wave.

95
00:06:34.354 --> 00:06:39.030
Just to visualize the the idea of it, so

96
00:06:39.030 --> 00:06:44.008
just ignore the background wave for now.

97
00:06:44.008 --> 00:06:47.714
[SOUND] And
square waves are really good if

98
00:06:47.714 --> 00:06:51.966
you're taking the low
end of the square wave.

99
00:06:51.966 --> 00:06:55.590
And then adding some effects on
top distortions or reverbs or

100
00:06:55.590 --> 00:06:57.303
echoes or things like that.

101
00:06:57.303 --> 00:07:02.187
Because you can start to create these
really powerful sounding electronic leads

102
00:07:02.187 --> 00:07:05.605
for like a really like epic
sounding electronic track.

103
00:07:05.605 --> 00:07:09.908
[SOUND]

104
00:07:15.977 --> 00:07:19.422
[SOUND] Triangle sounds a little bit

105
00:07:19.422 --> 00:07:21.330
different [SOUND].

106
00:07:21.330 --> 00:07:27.521
And they all just sound a little bit
different in slightly different ways

107
00:07:27.521 --> 00:07:32.897
[SOUND] [SOUND] So

108
00:07:32.897 --> 00:07:38.345
sawtooth also sounds quite harsh

109
00:07:38.345 --> 00:07:43.213
almost like chiptune music.

110
00:07:43.213 --> 00:07:47.931
And one thing you'll notice with all these
synthesizers that I've been exploring so

111
00:07:47.931 --> 00:07:50.501
far is that they all
sound very very piercing.

112
00:07:50.501 --> 00:07:53.199
They don't sound like
these nice soft tones and

113
00:07:53.199 --> 00:07:57.240
the way we're gonna get those
kind of tones is through effects.

114
00:07:57.240 --> 00:08:01.907
Through layering these different scents
cuz you can build up a single synth

115
00:08:01.907 --> 00:08:06.872
that's layered from multiple different
oscillators, different tunings and

116
00:08:06.872 --> 00:08:08.900
different parameters.

117
00:08:08.900 --> 00:08:13.242
And it starts to create this kind of
softer sound that maybe is closer to

118
00:08:13.242 --> 00:08:16.185
a piano or
maybe it's closer to a guitar pluck or

119
00:08:16.185 --> 00:08:20.845
even something that's like more
electronic pads or something like that.

120
00:08:20.845 --> 00:08:21.352
But just for

121
00:08:21.352 --> 00:08:24.664
the sake of example we're probably gonna
stick with some simple since here.

122
00:08:24.664 --> 00:08:29.192
And later I'll show some resources on how
to build up those much more complex and

123
00:08:29.192 --> 00:08:30.416
much richer sounds.

124
00:08:30.416 --> 00:08:35.184
If you're really interested in taking this
a step further and going towards more like

125
00:08:35.184 --> 00:08:39.435
electronic music rather than just
experimentation with the these API's.

126
00:08:39.435 --> 00:08:43.683
And seeing what you can do, but if you
really want to do performance, you're not

127
00:08:43.683 --> 00:08:47.571
gonna want to just use a straight up
sine wave synth or anything like that.

128
00:08:47.571 --> 00:08:49.379
And so that the synth there and

129
00:08:49.379 --> 00:08:53.790
then the next aspect is disconnecting
the synth to the master.

130
00:08:53.790 --> 00:08:56.946
This is very similar to what
we're doing with Web Audio,

131
00:08:56.946 --> 00:09:00.680
the pure Web Audio where we just
connect one node to another.

132
00:09:00.680 --> 00:09:04.708
Except in this case, Tone.Master
represents the audio context destination.

133
00:09:08.349 --> 00:09:13.273
And then if we scroll down, there's only
one other thing that's audio related here,

134
00:09:13.273 --> 00:09:16.660
the rest is just drawing some
sort of graphics of some kind.

135
00:09:16.660 --> 00:09:21.952
And the audio related thing here
is figuring out a frequency,

136
00:09:21.952 --> 00:09:24.000
which is in hertz here.

137
00:09:24.000 --> 00:09:29.710
Some frequency between let's say 75 and
2500 hertz.

138
00:09:29.710 --> 00:09:34.310
And then changing the note of the synth so
changing the synth

139
00:09:34.310 --> 00:09:39.279
frequency output to whatever it
is based on the mouse position.

140
00:09:39.279 --> 00:09:43.349
And that's what's allowing
us to change the pitch or

141
00:09:43.349 --> 00:09:47.334
change the frequency of that note and
of that synth.

142
00:09:47.334 --> 00:09:49.713
So that's the basic demo there.

143
00:09:53.514 --> 00:09:59.853
[SOUND] The next demo here
is also fairly simple,

144
00:09:59.853 --> 00:10:04.931
nothing too different than the last.

145
00:10:04.931 --> 00:10:09.864
The only thing now is that we're using
the trigger attack release function that

146
00:10:09.864 --> 00:10:12.290
I mentioned briefly before.

147
00:10:12.290 --> 00:10:14.423
And we're taking a scale,

148
00:10:14.423 --> 00:10:19.243
this is just like a few notes from
the here j Joshi scale and C and

149
00:10:19.243 --> 00:10:24.623
we're using these notes directly in
the the most pressed function so

150
00:10:24.623 --> 00:10:30.050
that every time we push we're
getting a different note.

151
00:10:30.050 --> 00:10:32.985
We're also getting different octaves and

152
00:10:32.985 --> 00:10:37.153
the octaves represent how high or
low pitch those notes are.

153
00:10:37.153 --> 00:10:42.271
Basically taking it as several notes up or

154
00:10:42.271 --> 00:10:47.252
several notes down in terms of frequency

155
00:10:47.252 --> 00:10:48.576
[MUSIC]

156
00:10:48.576 --> 00:10:53.453
And from this you can start to
create these almost algorithmic and

157
00:10:53.453 --> 00:10:55.960
procedural soundtracks.

158
00:10:55.960 --> 00:11:01.471
So just to show an example of how
kind of powerful this technique is,

159
00:11:01.471 --> 00:11:05.540
a while back I created
a very small web game.

160
00:11:05.540 --> 00:11:09.638
And it was a 13 kilobyte
game that was designed for

161
00:11:09.638 --> 00:11:13.366
a game competition
called Gs 13 cake games.

162
00:11:13.366 --> 00:11:18.289
Where all the game contents everything has
to fit within 13 kilobytes after it's all

163
00:11:18.289 --> 00:11:19.851
minified and compressed.

164
00:11:19.851 --> 00:11:23.625
And so this whole game is
using procedural graphics and

165
00:11:23.625 --> 00:11:27.080
it's using procedural
audio with web Web Audio.

166
00:11:27.080 --> 00:11:31.923
And the technique is very similar so
the idea of the game is that you're a kite

167
00:11:31.923 --> 00:11:35.110
flying around and
hitting these little flowers.

168
00:11:35.110 --> 00:11:39.070
And I'll play the audio in a second but
the technique is very similar every time

169
00:11:39.070 --> 00:11:42.621
you hit one of these flowers,
it's playing a different random note.

170
00:11:42.621 --> 00:11:46.321
And these random notes
are within a sort of set scale.

171
00:11:46.321 --> 00:11:49.730
And then there's just some parameters
on top of that depending on the Okta or

172
00:11:49.730 --> 00:11:52.566
depending on you know which is
the scale you're working with.

173
00:11:52.566 --> 00:11:56.104
And things like that to create
these different ambient soundtracks

174
00:11:56.104 --> 00:12:06.104
[MUSIC]

175
00:12:12.954 --> 00:12:15.655
And it's quite relaxing just
to hear these random notes

176
00:12:15.655 --> 00:12:22.678
[MUSIC]

177
00:12:22.678 --> 00:12:24.570
So that's Bellwoods.

178
00:12:24.570 --> 00:12:29.140
So that's just to show that even though
it's a simple technique there's a lot that

179
00:12:29.140 --> 00:12:30.391
can be done with them.

180
00:12:30.391 --> 00:12:36.232
&gt;&gt; Somebody in chat says similar to flower
by that game, same company, so nice.

181
00:12:36.232 --> 00:12:40.300
&gt;&gt; Thanks, yeah it's very inspired
by flower and those kind of,

182
00:12:40.300 --> 00:12:45.536
I mean also journey and things like that
very inspiring games really wonderful.

