WEBVTT

1
00:00:00.150 --> 00:00:05.488
Let's start by coding some really basic
examples with just the Web Audio API.

2
00:00:05.488 --> 00:00:08.843
And I'm gonna be using a little
bit of p5.js as well just to sorta

3
00:00:08.843 --> 00:00:12.050
visualize just circles,
squares, things like that.

4
00:00:12.050 --> 00:00:15.550
But primarily, I'm gonna be focusing
on the audio side of things.

5
00:00:17.530 --> 00:00:22.294
Now, you can either go into
the Web Audio demos on Glitch, and

6
00:00:22.294 --> 00:00:28.130
then open that up and hit the link here,
maybe open it in a new tab.

7
00:00:28.130 --> 00:00:33.110
I've got it open here in one of them, and
it might take a little while to load.

8
00:00:33.110 --> 00:00:37.920
It might not even load right away
depending on how glitch is doing today.

9
00:00:37.920 --> 00:00:40.509
So because I've just been
having some issues there,

10
00:00:40.509 --> 00:00:43.000
I've also got it running locally.

11
00:00:43.000 --> 00:00:46.940
And so if you wanna run it locally,
you can clone the repository.

12
00:00:46.940 --> 00:00:51.092
So I've cloned it,
I've copied it onto my desktop or

13
00:00:51.092 --> 00:00:55.429
any folder you like,
you CD into it and your terminal and

14
00:00:55.429 --> 00:00:59.700
then you run npm install to
install the dependencies.

15
00:00:59.700 --> 00:01:01.062
This is using npm and

16
00:01:01.062 --> 00:01:07.007
node.js which I explained a little bit in
my other workshops with front-end masters.

17
00:01:07.007 --> 00:01:09.820
But I'm not gonna go into too
much detail on that here.

18
00:01:09.820 --> 00:01:14.857
And once you've installed it,
once you've hit npm install and

19
00:01:14.857 --> 00:01:20.361
hit Enter and run the installation,
then you can just run npm start and

20
00:01:20.361 --> 00:01:26.343
it should open a local listing here
with all of the different HTML sketches.

21
00:01:26.343 --> 00:01:31.937
And these correspond exactly to the
different sketches in the glitch demos,

22
00:01:31.937 --> 00:01:36.926
so you can follow along either way
whether you wanna go into glitch and

23
00:01:36.926 --> 00:01:41.743
follow along there and sort of remix
there or just run it locally and

24
00:01:41.743 --> 00:01:43.920
open them up in your browser.

25
00:01:43.920 --> 00:01:47.796
So this first one is a big play button and

26
00:01:47.796 --> 00:01:51.565
all it is is just playing an MP3 file.

27
00:01:51.565 --> 00:01:54.344
[MUSIC]

28
00:01:54.344 --> 00:01:56.710
And then pausing it or stopping it.

29
00:01:58.080 --> 00:02:02.217
The one thing that's a little bit
different about this is that we're

30
00:02:02.217 --> 00:02:06.782
playing a long background track so
when we're playing MP3 files, we kinda

31
00:02:06.782 --> 00:02:11.153
have to decide if the file is a long one
that we want to stream in over time.

32
00:02:11.153 --> 00:02:15.714
So imagine you had a very long 20 minute
composition and you wanted to play that

33
00:02:15.714 --> 00:02:20.548
through the browser, you wouldn't have to
wait for that entire thing to download,

34
00:02:20.548 --> 00:02:24.650
you just wanna play it and
as it's downloading, you play that audio.

35
00:02:24.650 --> 00:02:29.605
And so that's where we're gonna use
this demo here is using the audio tag,

36
00:02:29.605 --> 00:02:32.090
which is the HTML5 audio tag.

37
00:02:32.090 --> 00:02:36.120
And that's gonna allow us to stream
the MP3 file or WAV file or OGG file or

38
00:02:36.120 --> 00:02:40.089
whatever sorta sound-based file
you're using, it's gonna allow us

39
00:02:40.089 --> 00:02:44.408
to stream it through the browser so that
we don't have to load it all up front.

40
00:02:44.408 --> 00:02:48.223
And then the next thing after that, we're
gonna talk about how to buffer things for

41
00:02:48.223 --> 00:02:49.690
different purposes.

42
00:02:49.690 --> 00:02:52.573
But this is great for
like background music and long tracks and

43
00:02:52.573 --> 00:02:53.470
things like that.

44
00:02:55.070 --> 00:02:58.889
So I'm gonna go into the code editor and

45
00:02:58.889 --> 00:03:05.271
I'm just gonna open up this demo here and
close all my other tabs.

46
00:03:09.306 --> 00:03:11.748
And I'm gonna just shrink
this a little bit.

47
00:03:18.106 --> 00:03:21.984
So the basic structure of these demos is
we have some global variables up here

48
00:03:21.984 --> 00:03:23.160
at the top.

49
00:03:23.160 --> 00:03:27.845
So typically, we're gonna have
a variable called audio context, and

50
00:03:27.845 --> 00:03:32.763
that's gonna be the variable that holds
all of the details associated with

51
00:03:32.763 --> 00:03:36.950
the audio API itself,
that's kinda the starting point.

52
00:03:36.950 --> 00:03:42.390
Any kind of web audio API application
is using this audio context.

53
00:03:42.390 --> 00:03:46.816
And then we're gonna maybe some times have
some variables that will be specifically

54
00:03:46.816 --> 00:03:48.820
around the notes that we're using.

55
00:03:48.820 --> 00:03:53.147
So in this case, we just have one
audio note here that we're using.

56
00:03:53.147 --> 00:03:55.730
We're doing everything on mousePressed.

57
00:03:55.730 --> 00:03:59.744
So I'm using this function from
p5.js called mousePressed,

58
00:03:59.744 --> 00:04:04.600
which we'll get run every time
we click on the window anywhere.

59
00:04:04.600 --> 00:04:07.758
And the reason we're using those
press instead of just playing things

60
00:04:07.758 --> 00:04:11.719
automatically, it's because with Web Audio
and with audio in general in the browser,

61
00:04:11.719 --> 00:04:14.790
you can't just play audio
immediately upon the pageload.

62
00:04:14.790 --> 00:04:16.910
That's one of those things
that used to be possible.

63
00:04:16.910 --> 00:04:19.679
And then news websites kinda ruin it for
everyone.

64
00:04:19.679 --> 00:04:26.040
And now we can't really just play audio
right on the opening of a webpage.

65
00:04:26.040 --> 00:04:30.752
Browsers will force the webpage
to first interacted with so

66
00:04:30.752 --> 00:04:35.746
you have to only initiate audio for
the first time on a gesture,

67
00:04:35.746 --> 00:04:38.759
so maybe a keywords, press or click or

68
00:04:38.759 --> 00:04:44.800
some sorta forceful user gesture
that initiates the audio context.

69
00:04:44.800 --> 00:04:48.304
You can actually create the audio
context outside of this and

70
00:04:48.304 --> 00:04:52.015
create all your audio nodes and
only play things on most press but

71
00:04:52.015 --> 00:04:55.656
I like to just sometimes set
everything up within the gesture so

72
00:04:55.656 --> 00:05:00.259
that it doesn't even try to do any audio
related things until you've clicked,

73
00:05:00.259 --> 00:05:04.040
until you've tapped a key or
something like that.

74
00:05:04.040 --> 00:05:05.960
So that's why we're doing
it all in the mousePressed.

75
00:05:07.500 --> 00:05:12.666
And that's also why there's this condition
here which is to say, if we haven't yet

76
00:05:12.666 --> 00:05:17.642
set up our audio context, that's where
this set up sorta stuff is gonna happen.

77
00:05:17.642 --> 00:05:21.566
Cuz once we've set it up once, if we click
again, we don't wanna have to reset up

78
00:05:21.566 --> 00:05:25.470
the audio context, we wanna do something
else like pause the audio let's say.

79
00:05:29.300 --> 00:05:33.516
Just before I dive into this function,
I'll just scroll down a little bit just to

80
00:05:33.516 --> 00:05:37.080
show what a lot of these sketches
are gonna look like today.

81
00:05:37.080 --> 00:05:41.154
They're gonna typically have the sorta
standard p5 functions which is like

82
00:05:41.154 --> 00:05:45.427
a setup, which is gonna allow us to set
up a canvas, like this black canvas here.

83
00:05:45.427 --> 00:05:47.192
And then resize functionality.

84
00:05:47.192 --> 00:05:52.250
So if the browser's resized, the canvas
will resize, and then the draw function.

85
00:05:52.250 --> 00:05:56.267
This is where we can draw shapes and
graphics and start to visualize the audio

86
00:05:56.267 --> 00:06:00.390
and start to sorta output that in
a visual interesting graphic way.

87
00:06:00.390 --> 00:06:04.385
Right now I'm just using it to draw play
button which is this polygon utility,

88
00:06:04.385 --> 00:06:07.420
which you don't really need to
worry about how that works.

89
00:06:08.680 --> 00:06:11.191
But we'll get into the draw function
a little bit later as we start to

90
00:06:11.191 --> 00:06:11.950
visualize things.

91
00:06:12.990 --> 00:06:14.970
So just to focus on the mousePressed.

92
00:06:14.970 --> 00:06:19.680
So I'm actually gonna
start from a clean slate.

93
00:06:19.680 --> 00:06:20.441
Why don't I do that?

94
00:06:20.441 --> 00:06:25.191
And worst case scenario, I might have
to undo a little bit or maybe I'll

95
00:06:25.191 --> 00:06:29.783
just do this, keep it in another tab
just in case I forget anything but

96
00:06:29.783 --> 00:06:34.615
I'd like to start from a clean slate
rather than just talking about lines

97
00:06:34.615 --> 00:06:40.180
of code cuz I think it's a bit easier
to sorta work through this together.

98
00:06:40.180 --> 00:06:45.351
So what we want to do on mousePressed
is first check if we haven't yet

99
00:06:45.351 --> 00:06:48.542
assigned anything to the audio context.

100
00:06:48.542 --> 00:06:52.980
If we haven't yet set up our global
audio context, it's gonna be like this.

101
00:06:54.530 --> 00:06:58.550
Then in here is where we set up our audio.

102
00:06:58.550 --> 00:07:02.923
And the first step is to
create the audio context,

103
00:07:02.923 --> 00:07:10.360
just like this audio context is this
global variable that exists in browsers.

104
00:07:10.360 --> 00:07:11.645
On some older browsers,

105
00:07:11.645 --> 00:07:15.350
you might have to prefix this
with like WebKit audio context.

106
00:07:15.350 --> 00:07:18.810
But just going forward,
I think in the next few years and so on,

107
00:07:18.810 --> 00:07:22.290
we probably won't need to worry so
much about those prefixes.

108
00:07:22.290 --> 00:07:28.360
So I'm gonna just stick with this simple,
just a variable named AudioContext.

109
00:07:28.360 --> 00:07:31.890
And then what we're gonna wanna
do is create an audio tag.

110
00:07:31.890 --> 00:07:36.840
So as I was saying earlier, the HTML5
audio tag is used for streaming audio.

111
00:07:36.840 --> 00:07:38.680
That's what we wanna do in this case.

112
00:07:38.680 --> 00:07:45.875
So we're going to do audio is
equal to document.createElement,

113
00:07:45.875 --> 00:07:49.990
audio, this creates a new audio tag.

114
00:07:49.990 --> 00:07:53.026
You also could have defined
this in react or HTML or

115
00:07:53.026 --> 00:07:55.919
whatever and
then query that with a selector and

116
00:07:55.919 --> 00:07:59.990
then use this in the same way, but
you can just create it like this.

117
00:08:01.060 --> 00:08:06.000
And now what we're gonna do is
set a variable on it called loop.

118
00:08:06.000 --> 00:08:10.592
This is optional but
let's say you're doing a background track,

119
00:08:10.592 --> 00:08:14.283
as in this demo,
you just wanted to loop all the time.

120
00:08:14.283 --> 00:08:17.469
And so
whenever it hits the end of the track,

121
00:08:17.469 --> 00:08:20.670
it's just gonna play again from the start.

122
00:08:22.960 --> 00:08:27.910
Another thing we'll have to do is actually
set the URL for where the asset is.

123
00:08:27.910 --> 00:08:31.724
And this part is gonna be different
depending on whether you're doing this

124
00:08:31.724 --> 00:08:33.176
locally, just as I am here or

125
00:08:33.176 --> 00:08:37.240
whether you're sorta experimenting and
remixing the glitch demos.

126
00:08:37.240 --> 00:08:41.091
If you're working with the glitch demos,
you'll have to drag and

127
00:08:41.091 --> 00:08:46.280
drop your MP3 files onto their platform,
and then use the URLs that they have.

128
00:08:46.280 --> 00:08:51.437
But here in the actual GitHub
repository that I've got online,

129
00:08:51.437 --> 00:08:56.800
I've included an audio folder
with three different test audios.

130
00:08:56.800 --> 00:08:59.792
And so
we can just use a reference to those.

131
00:08:59.792 --> 00:09:04.750
Just for now, you can pull in your
own MP3 files, your own WAV files.

132
00:09:04.750 --> 00:09:08.860
Web Audio supports a variety
of different audio formats.

133
00:09:08.860 --> 00:09:12.640
I tend to stick with MP3
because it has a wide support.

134
00:09:12.640 --> 00:09:15.570
But for some other projects,
you might want to explore other

135
00:09:15.570 --> 00:09:18.559
formats that might be able to
compress a little bit better, or

136
00:09:18.559 --> 00:09:21.910
be able to play in different ways
like streaming a little bit better.

137
00:09:23.360 --> 00:09:28.748
So to set the URL,
we're gonna just do audio.source

138
00:09:28.748 --> 00:09:33.190
is equal to audio/ let's do piano.mp3.

139
00:09:38.211 --> 00:09:40.815
Again, just to comment there.

140
00:09:40.815 --> 00:09:44.885
And then the next thing we're
gonna do is play the audio.

141
00:09:46.425 --> 00:09:48.984
Because this is happening on
a mousePressed gesture, so

142
00:09:48.984 --> 00:09:50.165
it's fine to play audio.

143
00:09:52.365 --> 00:09:55.767
And if we try and save,
because we're using this local server,

144
00:09:55.767 --> 00:09:58.125
it should reload automatically.

145
00:09:58.125 --> 00:10:02.100
And when we click play,
we're gonna hear the audio.

146
00:10:02.100 --> 00:10:07.470
However, we're not using

147
00:10:07.470 --> 00:10:12.690
the Web Audio API yet.

148
00:10:12.690 --> 00:10:17.878
So this audio is playing just
using typical HTML5 Audio API,

149
00:10:17.878 --> 00:10:20.640
which is pretty old school.

150
00:10:20.640 --> 00:10:23.183
We can't do anything
like visualizing it or

151
00:10:23.183 --> 00:10:26.207
adjusting the game really
in a fine controlled way,

152
00:10:26.207 --> 00:10:31.242
we can't do any sorta synthesis with it or
anything like that, can't do any effects.

153
00:10:31.242 --> 00:10:35.358
And so what we wanna do is
take this HTML5 audio and

154
00:10:35.358 --> 00:10:40.273
pipe it into our audio context
that we've created up here.

155
00:10:40.273 --> 00:10:45.842
And so what we're gonna do
to do that is to create

156
00:10:45.842 --> 00:10:54.082
a new source node using
audioContext.createMediaElementSource.

157
00:10:54.082 --> 00:10:57.545
It's like the longest name,
I always forget it.

158
00:10:57.545 --> 00:11:01.635
So it's kinda one of these things that you
sometimes have to Google or something.

159
00:11:01.635 --> 00:11:05.214
But this is going to allow us
to create a source audio node,

160
00:11:05.214 --> 00:11:09.963
which is like one of these little Lego
building blocks that I was talking about

161
00:11:09.963 --> 00:11:12.959
before with wiring things
from one to the other,

162
00:11:12.959 --> 00:11:17.000
using our audio tag, so
we pass in our audio tag as the parameter.

163
00:11:18.500 --> 00:11:24.070
And now if we were to reload the page and
play, we don't hear anything.

164
00:11:24.070 --> 00:11:28.093
And that's because the audio is now
going through the audio context,

165
00:11:28.093 --> 00:11:29.193
the Web Audio API.

166
00:11:29.193 --> 00:11:33.670
And the Web Audio API has one more
step in order to actually hear things.

167
00:11:33.670 --> 00:11:36.910
We have to actually hook it
up to the speaker basically.

168
00:11:36.910 --> 00:11:45.280
So to do that, we're gonna do
source.connect,audioContext.destination.

169
00:11:45.280 --> 00:11:51.520
And this is the wiring up, so
wire the source to the speaker.

170
00:11:51.520 --> 00:11:52.709
Let's call it speaker.

171
00:11:52.709 --> 00:11:56.939
Just like I was saying with the wires
being a switchboard operator, and

172
00:11:56.939 --> 00:11:57.865
now if we play,

173
00:11:57.865 --> 00:11:58.973
[MUSIC]

174
00:11:58.973 --> 00:12:02.273
We should hear some audio.

175
00:12:02.273 --> 00:12:06.219
[MUSIC]

176
00:12:06.219 --> 00:12:11.203
One more thing we can do here is we
can turn all of this off with a pause

177
00:12:11.203 --> 00:12:15.208
button when we actually click
again the second time so

178
00:12:15.208 --> 00:12:18.720
that we can play in and stop the audio.

179
00:12:18.720 --> 00:12:20.056
So I'm just gonna do an else here.

180
00:12:20.056 --> 00:12:24.928
And then in here,
this is where we're gonna get if

181
00:12:24.928 --> 00:12:29.120
we press once it's already playing.

182
00:12:29.120 --> 00:12:35.528
So I'm gonna say audio.pause, I believe.

183
00:12:35.528 --> 00:12:40.483
And then audio context.close.

184
00:12:40.483 --> 00:12:44.345
And now I'm just gonna do this,
I'm gonna do audio context, and

185
00:12:44.345 --> 00:12:45.760
just set these to know.

186
00:12:47.760 --> 00:12:48.960
Let's just make sure that works.

187
00:12:50.800 --> 00:12:56.411
Yeah, so what I'm doing is I'm first
pausing the audio tag just to be sure that

188
00:12:56.411 --> 00:13:03.140
even if we remove the audio context, the
HTML5 audio is not trying to play anymore.

189
00:13:03.140 --> 00:13:06.200
And then we can actually
close the audio context.

190
00:13:06.200 --> 00:13:10.087
And then we can set them both to know so
that next time we do a mousePressed,

191
00:13:10.087 --> 00:13:12.360
it'll go back to this initial condition.

192
00:13:13.810 --> 00:13:17.070
And that's how we get back to that
state we're sorta starting with.

