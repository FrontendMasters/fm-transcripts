WEBVTT

1
00:00:00.140 --> 00:00:02.304
Now let's jump into some of the code and

2
00:00:02.304 --> 00:00:05.002
just see how we can use
this frequency analysis.

3
00:00:05.002 --> 00:00:09.586
And try to use it in a way that allows us
to visualize different parts of the track

4
00:00:09.586 --> 00:00:13.005
without having to rely on
something like a biquad filter.

5
00:00:22.913 --> 00:00:28.108
So in our demos, I have two here that
have to do with frequency analysis,

6
00:00:28.108 --> 00:00:31.357
specifically in a way
that is kind of manual.

7
00:00:31.357 --> 00:00:35.026
Just analyzing the frequency and
then acting on that data.

8
00:00:35.026 --> 00:00:41.540
The first one just isolates the signal and
gives us different ranges of frequency.

9
00:00:41.540 --> 00:00:46.572
So here we have an audio file
that is really strong in terms of

10
00:00:46.572 --> 00:00:51.718
the kick drums and
in terms of the low frequency bass sounds.

11
00:00:51.718 --> 00:00:57.389
And from that, we can start to visualize
a single circle, and then using the higher

12
00:00:57.389 --> 00:01:02.755
mid tones, the voice, we can use that
to map those signals to another circle.

13
00:01:02.755 --> 00:01:09.159
[MUSIC]

14
00:01:09.159 --> 00:01:10.803
And then the second demo,

15
00:01:10.803 --> 00:01:14.700
which is really just me sort of
trying to go further with this.

16
00:01:14.700 --> 00:01:17.565
It's not really something
I'm gonna dissect today, but

17
00:01:17.565 --> 00:01:21.716
it's something that you might want to look
into how it all works, is using frequency

18
00:01:21.716 --> 00:01:25.009
to sort of map that to something
like a generative artwork almost.

19
00:01:25.009 --> 00:01:29.200
This is based on Albers, so
Josef Albers artist, and

20
00:01:29.200 --> 00:01:35.364
who created this a lot of work around
color and around these primitive shapes.

21
00:01:35.364 --> 00:01:40.107
And basically, just taking those ideas and
seeing how do we reinterpret his

22
00:01:40.107 --> 00:01:43.973
work through the lens of an audio
visualization of some kind.

23
00:01:43.973 --> 00:01:50.690
[MUSIC]

24
00:01:50.690 --> 00:01:54.884
It's the kind of work actually
which in such a small window,

25
00:01:54.884 --> 00:01:56.869
it doesn't look like much.

26
00:01:56.869 --> 00:02:01.589
But if you were to open it up full
screen and play it through projector,

27
00:02:01.589 --> 00:02:07.195
it could be a potentially powerful audio
visualization in a physical experience.

28
00:02:07.195 --> 00:02:09.556
So that's kind of what
the end goal of this is,

29
00:02:09.556 --> 00:02:13.797
is not just to create something that looks
good in this little tiny thumbnail here or

30
00:02:13.797 --> 00:02:15.330
runs just on your local host.

31
00:02:15.330 --> 00:02:18.478
But maybe create something
that you can share and

32
00:02:18.478 --> 00:02:22.175
create a sort of emotional experience for
the audience.

33
00:02:22.175 --> 00:02:25.066
So let's dive into the frequency
example just to start.

34
00:02:30.049 --> 00:02:33.392
[MUSIC]

35
00:02:33.392 --> 00:02:38.630
So this frequency analysis demo is
very similar to some of the looping

36
00:02:38.630 --> 00:02:45.406
streaming audio demo that we started with,
except it's using a different audio files,

37
00:02:45.406 --> 00:02:50.674
using this blue jeans.mp3,
which is sort of an electronic track.

38
00:02:50.674 --> 00:02:55.820
And then down here, we're setting
a few parameters on the analyzer node,

39
00:02:55.820 --> 00:03:00.311
we're setting fftSize to be a little
bit higher because we want to

40
00:03:00.311 --> 00:03:02.202
capture more resolution.

41
00:03:02.202 --> 00:03:07.100
So a larger number here should give us
more data to work with, especially in

42
00:03:07.100 --> 00:03:12.262
the low end, where there's not a lot of
data compared to the rest of the graph.

43
00:03:12.262 --> 00:03:16.724
And because there's so much kick drums
here, we really wanna capture the detail.

44
00:03:16.724 --> 00:03:19.040
We're gonna just use a larger value.

45
00:03:19.040 --> 00:03:22.310
Just make sure whenever
you're setting the fftSize,

46
00:03:22.310 --> 00:03:24.525
you have to use a power of two number.

47
00:03:24.525 --> 00:03:30.716
So it has to be 1024, 2048, 4096, etc.

48
00:03:32.898 --> 00:03:36.356
And then here,
we're changing the minimum and

49
00:03:36.356 --> 00:03:40.688
maximum decibels that we're
expected to be working with.

50
00:03:40.688 --> 00:03:44.069
So actually, I've just set them
now to the default values,

51
00:03:44.069 --> 00:03:46.734
which is the same as what
Web Audio API gives us.

52
00:03:46.734 --> 00:03:51.442
But you might find if you're using a
different audio source, you might want to

53
00:03:51.442 --> 00:03:56.380
tweak these values, because maybe your
audio source is never getting this loud.

54
00:03:56.380 --> 00:04:01.042
And so you're losing some of that
information if you're just using

55
00:04:01.042 --> 00:04:02.527
the default values.

56
00:04:02.527 --> 00:04:04.630
And then we set up our
float array as normal.

57
00:04:07.565 --> 00:04:11.283
We have a couple functions
here that are new.

58
00:04:11.283 --> 00:04:16.633
And they're a little bit sort of
mathy in the sense that they have

59
00:04:16.633 --> 00:04:22.184
to use this nyquist value,
which as I mentioned briefly earlier,

60
00:04:22.184 --> 00:04:26.169
is half of the sample rate
of the audio context.

61
00:04:26.169 --> 00:04:30.489
The sample rate is how many
samples there are per second.

62
00:04:30.489 --> 00:04:34.210
So if you remember one of my slides
was zooming in on the waveform and

63
00:04:34.210 --> 00:04:35.748
seeing those little dots.

64
00:04:35.748 --> 00:04:42.864
Well, imagine in a single second of time,
there's gonna be 44,100 of those dots.

65
00:04:42.864 --> 00:04:44.176
That's the sample rate.

66
00:04:44.176 --> 00:04:48.501
And each of those dots represents
a different sample of, let's say,

67
00:04:48.501 --> 00:04:53.560
the waveform data, that we then gonna
convert into this frequency using the FFT,

68
00:04:53.560 --> 00:04:55.420
the Fast Fourier Transform.

69
00:04:55.420 --> 00:04:57.612
But again, this is usually set for us.

70
00:04:57.612 --> 00:05:00.212
We don't need to worry about
what the sample rate is.

71
00:05:00.212 --> 00:05:02.683
We just divide it by 2
to get this nyquist.

72
00:05:02.683 --> 00:05:07.623
And then we use this math here to
figure out the actual index based

73
00:05:07.623 --> 00:05:09.281
on a frequency band.

74
00:05:09.281 --> 00:05:13.239
You don't really need to memorize
the inside of this function or

75
00:05:13.239 --> 00:05:14.497
the math involved.

76
00:05:14.497 --> 00:05:18.214
All you really need to know is that this
function allows you to pass in hertz.

77
00:05:18.214 --> 00:05:23.961
So like we were saying in the spectrum
analysis, something like 200 hertz or

78
00:05:23.961 --> 00:05:29.810
maybe 440 hertz if you're trying to find
the index in the array of that C node.

79
00:05:29.810 --> 00:05:33.410
And then it returns the index
of the array between zero and

80
00:05:33.410 --> 00:05:36.560
whatever it is that the array
has been defined as.

81
00:05:36.560 --> 00:05:41.919
So like up here,
we're using fftSize as the array length.

82
00:05:41.919 --> 00:05:46.473
And then the other way around is also
possible, just taking an index somewhere

83
00:05:46.473 --> 00:05:50.753
in the array, and figuring out what
is the frequency band for that index.

84
00:05:53.546 --> 00:05:57.603
And this third function here, and again,
these functions are all in the snippets.

85
00:05:57.603 --> 00:06:01.732
So if you want to just copy and
paste, that's fine.

86
00:06:01.732 --> 00:06:06.087
Quite often what I do with this is I just
write it once, and I copy and paste it or

87
00:06:06.087 --> 00:06:08.648
I install it from NPM or
something like that.

88
00:06:08.648 --> 00:06:12.490
So I don't really always remember
what's inside this function, but

89
00:06:12.490 --> 00:06:14.908
inside this function here, audio signal.

90
00:06:14.908 --> 00:06:19.141
The idea is that it gives us
back the signal between 0 and 1,

91
00:06:19.141 --> 00:06:21.883
based on a specific band of frequency.

92
00:06:21.883 --> 00:06:25.416
So we pass in the analyzer node.

93
00:06:25.416 --> 00:06:31.367
We pass in the frequencies data
which is the float 32 array.

94
00:06:31.367 --> 00:06:36.251
Pass in the minimum and maximum hertz
that we want to get the signal between.

95
00:06:36.251 --> 00:06:40.871
So this is very similar to this slide
where we pass in the minimum which is

96
00:06:40.871 --> 00:06:45.889
the left end of the band, and the maximum,
which is the right end of the band.

97
00:06:45.889 --> 00:06:49.323
And then we're just gonna
compute the average

98
00:06:49.323 --> 00:06:53.293
signal of all of the data in
between those two points.

99
00:06:59.250 --> 00:07:02.402
And now, the way that works
is we take the frequency,

100
00:07:02.402 --> 00:07:04.515
convert it to an index in the array.

101
00:07:04.515 --> 00:07:10.051
And then we look through and
get the actual average from that.

102
00:07:10.051 --> 00:07:12.123
And this average is in decimals,

103
00:07:12.123 --> 00:07:16.859
there may be other ways of doing this
rather than just taking an average, but

104
00:07:16.859 --> 00:07:21.453
maybe some sort of root mean squared
type of thing that might be superior.

105
00:07:21.453 --> 00:07:25.271
This is just the way I've been
doing it and it seems to work okay,

106
00:07:25.271 --> 00:07:28.906
it's definitely worth maybe
exploring that a bit further.

107
00:07:28.906 --> 00:07:33.446
And it's one of the reasons I think that
using the biquad filter is actually maybe

108
00:07:33.446 --> 00:07:36.783
a little bit better,
because the math that they use in terms

109
00:07:36.783 --> 00:07:40.019
of the windowing isn't just
a hard start and a hard stop.

110
00:07:40.019 --> 00:07:43.186
It's something more of a fall off,
and so it's a bit smoother and

111
00:07:43.186 --> 00:07:44.232
a little bit better.

112
00:07:44.232 --> 00:07:48.517
But this is nice just to sorta get an idea
of what's going on under the hood.

113
00:07:48.517 --> 00:07:50.417
So we take the average, and

114
00:07:50.417 --> 00:07:55.054
then we map that average from
the minimum to the maximum decibels.

115
00:07:55.054 --> 00:07:57.506
So the frequency data that
we get is in decibels, but

116
00:07:57.506 --> 00:08:01.037
we wanna convert it to a 0 to 1 value,
and that's what we're doing here.

117
00:08:04.858 --> 00:08:07.784
And so from that,
you just put those things together.

118
00:08:07.784 --> 00:08:11.684
You have your analyzerNode.getfloat
frequency data,

119
00:08:11.684 --> 00:08:16.893
which is different than get float time
domain data, pass it into the array.

120
00:08:16.893 --> 00:08:20.763
And then we use this
function audio signal, and

121
00:08:20.763 --> 00:08:24.159
we pass in our minimum and maximum hertz.

122
00:08:24.159 --> 00:08:28.553
And it gives us back some signal
between 0 and 1 that we can then scale.

123
00:08:28.553 --> 00:08:36.865
[MUSIC]

124
00:08:36.865 --> 00:08:41.143
Just as a little example of how to
do this with a different track,

125
00:08:41.143 --> 00:08:45.662
let's say all of a sudden,
I wanted to visualize something that has

126
00:08:45.662 --> 00:08:48.926
much different shape,
much different signal.

127
00:08:48.926 --> 00:08:52.450
Let's say I wanted to visualize a piano.

128
00:08:52.450 --> 00:08:57.073
You'll see that the yellow circle
is no longer really changing.

129
00:08:57.073 --> 00:08:59.819
And that's because we're looking
at different frequencies.

130
00:08:59.819 --> 00:09:04.209
So, let's say we open up
our spectrum which is in

131
00:09:04.209 --> 00:09:07.218
the bottom of the repo by the way.

132
00:09:07.218 --> 00:09:12.529
Spectrum.sh, but you can also find
it if you scroll all the way down,

133
00:09:12.529 --> 00:09:14.700
Tool, Spectrum Analyzer.

134
00:09:14.700 --> 00:09:18.507
And so let's open this up and
we'll drag in our piano.

135
00:09:18.507 --> 00:09:24.540
Is FFT the only frequency analysis
supported by the Web Audio API?

136
00:09:24.540 --> 00:09:28.973
With the Web Audio API,
it gives you this FFT out of the box, but

137
00:09:28.973 --> 00:09:33.921
there's not really any other way to
analyze the frequency than that.

138
00:09:33.921 --> 00:09:37.651
But if you wanted to do something
based on the frequency,

139
00:09:37.651 --> 00:09:41.631
you could use the biquad filters
to sort of shape the signal.

140
00:09:41.631 --> 00:09:45.902
So that it's only giving you some signal
that's within a certain frequency band or

141
00:09:45.902 --> 00:09:50.126
that it's only giving you the top half of
the frequencies or something like that.

142
00:09:50.126 --> 00:09:53.397
So that's how you can
use frequency analysis

143
00:09:53.397 --> 00:09:58.131
without having to rely on actually
getting the frequency data and

144
00:09:58.131 --> 00:10:02.015
then doing things with
the data samples themselves.

145
00:10:02.015 --> 00:10:07.347
Okay, so
let's pop open this spectrum analyzer and

146
00:10:07.347 --> 00:10:14.264
just drag in your mp3 file or
your WAV file that you want to analyze.

147
00:10:14.264 --> 00:10:18.379
And we're gonna listen to it and
look at the graph as it's playing.

148
00:10:18.379 --> 00:10:20.895
[MUSIC]

149
00:10:20.895 --> 00:10:23.819
And again,
we'll see that if we use our mouse,

150
00:10:23.819 --> 00:10:26.464
we can see where the signal's happening.

151
00:10:26.464 --> 00:10:33.365
And it's happening between 120 hertz and
maybe 2.5k.

152
00:10:33.365 --> 00:10:36.672
And so let's just use that for

153
00:10:36.672 --> 00:10:42.251
now as, As the input here.

154
00:10:42.251 --> 00:10:47.917
So, I'm just gonna go
back to my demo here.

155
00:10:57.376 --> 00:11:03.712
And I'm gonna just use just one circle for
now.

156
00:11:03.712 --> 00:11:09.469
Let's just say 150 hertz to 2,500.

157
00:11:09.469 --> 00:11:14.912
And you can see that now it's very
clearly picking up only the piano nodes.

158
00:11:14.912 --> 00:11:18.694
[MUSIC]

159
00:11:18.694 --> 00:11:24.041
And we could try something else where
maybe we're only picking up let's say,

160
00:11:24.041 --> 00:11:25.832
the very low piano nodes.

161
00:11:25.832 --> 00:11:35.832
[MUSIC]

162
00:11:40.200 --> 00:11:45.326
So now, the yellow circle's
representing the low tones

163
00:11:45.326 --> 00:11:51.220
which are fairly constantly there
despite what node is playing.

164
00:11:51.220 --> 00:11:56.111
Because there's always this sort of low
vibration that's happening whenever

165
00:11:56.111 --> 00:11:58.018
the piano's getting struck.

166
00:11:58.018 --> 00:12:02.942
But when the piano's getting struck,
there's also a higher frequency sound

167
00:12:02.942 --> 00:12:06.161
that is specific to the node
that's being played.

168
00:12:06.161 --> 00:12:09.875
And so that's how we can start to create
these interesting visualizations based on

169
00:12:09.875 --> 00:12:12.964
these different audio sources and
different types of frequencies.

