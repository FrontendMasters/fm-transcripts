WEBVTT

1
00:00:00.210 --> 00:00:04.819
Something that I'm doing in this
more advanced frequency demo,

2
00:00:04.819 --> 00:00:08.436
which I'm just gonna pop
open here in the browser.

3
00:00:14.871 --> 00:00:16.242
So I'll just play it just to show.

4
00:00:16.242 --> 00:00:26.242
[MUSIC]

5
00:00:32.993 --> 00:00:37.325
So one thing I am doing is just splitting
up the frequency into these several

6
00:00:37.325 --> 00:00:42.390
different bands, each band representing
the size of these different boxes.

7
00:00:42.390 --> 00:00:47.110
And so certain notes or making
certain boxes get bigger and smaller.

8
00:00:47.110 --> 00:00:52.058
But another thing I'm doing is I'm cycling
the hue of the entire graphic based on

9
00:00:52.058 --> 00:00:53.378
the peak frequency.

10
00:00:53.378 --> 00:00:57.943
So in this track it works really well
because whoever it is that's playing

11
00:00:57.943 --> 00:01:01.328
the piano is going up,
the piano and down the piano, so

12
00:01:01.328 --> 00:01:03.997
the notes are going higher and then lower.

13
00:01:03.997 --> 00:01:08.600
And you can sort of see how that's
working here in the spectrum.

14
00:01:08.600 --> 00:01:11.957
The peak maybe over here, it's here but

15
00:01:11.957 --> 00:01:15.715
it's starts to move further and
further up.

16
00:01:15.715 --> 00:01:20.568
And so that's what is happening in this
demo as well is it's capturing what

17
00:01:20.568 --> 00:01:24.662
is the frequency, what is the band
that is currently highest?

18
00:01:24.662 --> 00:01:27.775
And so
right now it might be here now it's here.

19
00:01:27.775 --> 00:01:29.557
And now it's over here.

20
00:01:29.557 --> 00:01:34.975
And that value is changing depending
on notes that are being played.

21
00:01:34.975 --> 00:01:38.690
And so that function,
I'll show you how that looks,

22
00:01:48.259 --> 00:01:52.590
And this is a bit of an unusual function,
I haven't really used it too much.

23
00:01:52.590 --> 00:01:56.358
But it works really well with
this kind a audio track,

24
00:01:56.358 --> 00:01:59.644
where you just go through
the frequency data.

25
00:01:59.644 --> 00:02:05.615
And you find out what is the Mac signal
and what's the index of that Mac signal.

26
00:02:05.615 --> 00:02:09.612
And then at the end of that, you
convert that index back to a frequency.

27
00:02:09.612 --> 00:02:14.300
And then from there, you're gonna get back
a value that's gonna be shifting depending

28
00:02:14.300 --> 00:02:15.958
on the sound that's playing.

29
00:02:15.958 --> 00:02:20.390
It's gonna be shifting from somewhere
between 0 hertz and 22k hertz.

30
00:02:21.390 --> 00:02:24.930
And from that,
you'll see what I'm doing with the hue.

31
00:02:26.080 --> 00:02:31.699
As I'm mapping the hue from 0 hertz to
500 hertz, which is what I've decided, is

32
00:02:31.699 --> 00:02:37.261
a good value from where the piano's moving
from left to right in terms of frequency.

33
00:02:37.261 --> 00:02:42.168
And then I'm mapping that to a hue
between 0 degrees and 360 degrees, and

34
00:02:42.168 --> 00:02:45.370
that's what's changing this color.

35
00:02:45.370 --> 00:02:48.520
And it's kind of an interesting effect,

36
00:02:48.520 --> 00:02:54.740
I'm doing it in a way that is smoothly
interpolated from frame to frame.

37
00:02:54.740 --> 00:02:58.753
So that's using this damp function
which is damp and interpolation,

38
00:02:58.753 --> 00:03:02.170
I guess you can say using
linear interpolation.

39
00:03:02.170 --> 00:03:06.216
I tend to just copy and paste this
function all over the place now because

40
00:03:06.216 --> 00:03:10.751
it's quite helpful to smoothly interpolate
things from one frame to the next.

41
00:03:10.751 --> 00:03:15.613
You just pass in the current value, what
you want the value to be over time, and

42
00:03:15.613 --> 00:03:20.450
then some sort of smoothing constant,
which could be a small number.

43
00:03:20.450 --> 00:03:22.820
The smaller the number,
the slower it's gonna change.

44
00:03:22.820 --> 00:03:25.210
The higher the number,
the faster it'll get to that value.

45
00:03:25.210 --> 00:03:29.918
And then you pass in the delta time
that is the time that's elapsed

46
00:03:29.918 --> 00:03:31.554
since the last frame.

47
00:03:31.554 --> 00:03:34.444
And from that you can
get this nice sort of

48
00:03:34.444 --> 00:03:39.387
smooth change in the hue that looks
quite nice on a graphic like this.

49
00:03:39.387 --> 00:03:43.414
[MUSIC]

50
00:03:43.414 --> 00:03:49.187
&gt;&gt; How do you adjust the fixed parameters
for a live audio source like mic input?

51
00:03:49.187 --> 00:03:52.762
&gt;&gt; Yeah, so
I guess maybe one way of doing that would

52
00:03:52.762 --> 00:03:57.747
be to use something like what I'm
doing here in terms of smoothing.

53
00:03:57.747 --> 00:04:03.129
Where you have, let's say, you're finding
the peak signals, and you're over

54
00:04:03.129 --> 00:04:08.357
time over the course of a few seconds,
or maybe 10 seconds, or 20 seconds.

55
00:04:08.357 --> 00:04:14.105
You're having to adjust your parameters
basically based on where the signals are.

56
00:04:14.105 --> 00:04:18.772
So if you're playing a track that's
like just constantly kick drums,

57
00:04:18.772 --> 00:04:23.675
then the parameters might notice that
there's tons of activity happening

58
00:04:23.675 --> 00:04:25.170
in the low frequency.

59
00:04:25.170 --> 00:04:31.120
And so that window of where you're
looking might slowly drift over to there.

60
00:04:31.120 --> 00:04:32.775
And then the track will keep playing and

61
00:04:32.775 --> 00:04:35.800
you'll have this nice
visualization based on that.

62
00:04:35.800 --> 00:04:38.129
And then the next track might kick in and

63
00:04:38.129 --> 00:04:41.430
suddenly maybe it's
something piano related.

64
00:04:41.430 --> 00:04:45.651
And so you're sort of running averages
will have to slowly drift over

65
00:04:45.651 --> 00:04:49.870
to find the new window of which
frequencies to look at based on the fact

66
00:04:49.870 --> 00:04:53.798
that there's not a lot of activity
happening in the low end, and

67
00:04:53.798 --> 00:04:57.328
all the activities beginning
to happen in the upper end.

68
00:04:57.328 --> 00:05:03.832
And that's like an interesting problem,
I had to work at that level.

69
00:05:03.832 --> 00:05:08.483
I think that's something that, if you're
building a really, really professional

70
00:05:08.483 --> 00:05:12.952
grade visualization of something, that
has to work across any potential input.

71
00:05:12.952 --> 00:05:17.693
That sounds like it's maybe something
that's a little bit outside

72
00:05:17.693 --> 00:05:21.030
the scope of what I even
know how to do with this.

73
00:05:21.030 --> 00:05:25.791
So far, what I've been doing has been
more tuned based on specific inputs.

74
00:05:25.791 --> 00:05:29.811
So that's kind of the nice thing about,
if you're creating an installation,

75
00:05:29.811 --> 00:05:32.751
you're creating something
that has maybe let's say some

76
00:05:32.751 --> 00:05:34.863
specific tracks already assigned to it.

77
00:05:34.863 --> 00:05:38.359
Then you can create parameters for
each of those tracks.

78
00:05:38.359 --> 00:05:41.790
And you know it's kind of
predictable in that way.

79
00:05:41.790 --> 00:05:43.836
But yeah that's an interesting problem and

80
00:05:43.836 --> 00:05:46.054
one that would be interesting to try and
solve.

81
00:05:48.773 --> 00:05:50.951
&gt;&gt; I guess you're talking about dBFS?

82
00:05:50.951 --> 00:05:54.854
How can you treat files at
different bit depths for dBFS?

83
00:05:54.854 --> 00:06:00.240
Does the API internally convert
audio to a predefined bit depth?

84
00:06:00.240 --> 00:06:05.288
&gt;&gt; Yeah, so from what I understand,
when you're working with Web Audio,

85
00:06:05.288 --> 00:06:09.850
they give you back the data that's
in like a standard bit depth.

86
00:06:09.850 --> 00:06:15.110
So you don't have to worry about that
when you're just using the analyzer node.

87
00:06:15.110 --> 00:06:17.629
&gt;&gt; Now, if you're synthesizing audio,

88
00:06:17.629 --> 00:06:22.370
there might be situations where
you do have to worry about that.

89
00:06:22.370 --> 00:06:28.133
Or if you're doing manual sort of decoding
of the audio data into raw sort of PCM.

90
00:06:28.133 --> 00:06:33.740
And then going over that and maybe doing
some manual FFT work on top of that,

91
00:06:33.740 --> 00:06:37.033
instead of using the web
audio FFT library,

92
00:06:37.033 --> 00:06:40.953
you might have to start to
concern yourself with it.

93
00:06:40.953 --> 00:06:46.255
But, I think from what I understand
it's all fairly automatically

94
00:06:46.255 --> 00:06:51.193
converted from for
most of these user friendly API endpoints.

95
00:06:51.193 --> 00:06:56.088
&gt;&gt; Someone suggested for
the solution to the other question was,

96
00:06:56.088 --> 00:07:01.640
that's when you have to step in as
a live VJ and tweak those parameters.

97
00:07:01.640 --> 00:07:03.332
&gt;&gt; Yeah, definitely.

98
00:07:03.332 --> 00:07:05.081
I mean, the cool thing is you can hook all
of these parameters up to MIDI because

99
00:07:05.081 --> 00:07:05.861
there's actually a Web MIDI API.

100
00:07:05.861 --> 00:07:14.500
And so yeah, you can really start to do
some live VJ stuff, which is pretty crazy.

