WEBVTT

1
00:00:00.000 --> 00:00:04.268
So one more a little demo here
that's basically just building on

2
00:00:04.268 --> 00:00:08.072
the last demo and
showing how you can take that last demo.

3
00:00:08.072 --> 00:00:13.227
And then start to create something that's
a little bit more artful, I guess,

4
00:00:13.227 --> 00:00:18.004
or something that's a little bit more
a step further than just a circle.

5
00:00:18.004 --> 00:00:23.191
But you can take these random colors
from a dataset of risograph colors,

6
00:00:23.191 --> 00:00:28.990
from a risograph printer maybe, and they
have a little code with them and a name.

7
00:00:28.990 --> 00:00:33.709
And every time you click, chooses
a random color, plays a random node, and

8
00:00:33.709 --> 00:00:35.125
changes the visuals.

9
00:00:35.125 --> 00:00:40.478
And it's a very simple demo, it's not very
advanced, but you can see how it just

10
00:00:40.478 --> 00:00:45.944
creates a bit more of an emotional feeling
than just a single circle on the screen.

11
00:00:45.944 --> 00:00:50.770
This is also using one other little
thing that I'll go into here,

12
00:00:50.770 --> 00:00:52.269
which is an effect.

13
00:00:52.269 --> 00:00:56.938
And this demo is kind of inspired by
Patatap in a way of, kind of that's

14
00:00:56.938 --> 00:01:01.449
where it got this inspiration of
the shapes randomly in the sounds,

15
00:01:01.449 --> 00:01:04.949
cuz I really love Patatap,
such a nice whole thing.

16
00:01:04.949 --> 00:01:11.804
So this is an example of how we can
start to wire in effects with tone.js.

17
00:01:11.804 --> 00:01:16.544
So if we look at tone.js, we just
check their documentation, we go down,

18
00:01:16.544 --> 00:01:21.010
we'll see a whole bunch of different
effects that we can choose from.

19
00:01:21.010 --> 00:01:24.192
So there's a few that
I might explore today,

20
00:01:24.192 --> 00:01:28.057
but you might have to look at
them also in your own time.

21
00:01:28.057 --> 00:01:32.712
But the one I like to use just to start
off sometimes with these kinds of sounds

22
00:01:32.712 --> 00:01:34.041
is a FeedbackDelay.

23
00:01:34.041 --> 00:01:36.677
So if we go in here,
we'll see how to use it.

24
00:01:41.908 --> 00:01:46.205
So the FeedbackDelay is a delay that
sort of feeds back on itself and

25
00:01:46.205 --> 00:01:50.672
then slowly decays after some amount
of feedback that goes through.

26
00:01:50.672 --> 00:01:54.031
And it can get to the point
if you set it up incorrectly,

27
00:01:54.031 --> 00:01:58.413
where it's just continually feedbacking
and maybe getting louder and

28
00:01:58.413 --> 00:02:01.348
louder or something,
and creating a problem.

29
00:02:01.348 --> 00:02:06.042
But if you managed to tune the parameters
in a way that is nice and works,

30
00:02:06.042 --> 00:02:10.047
then you have this nice sort of
delay that's a bit of an echo.

31
00:02:10.047 --> 00:02:14.244
But this echo that builds on itself,
if you keep pushing it, and

32
00:02:14.244 --> 00:02:18.460
it creates this really nice kind
of warm tone that you hear here.

33
00:02:18.460 --> 00:02:21.265
[MUSIC]

34
00:02:21.265 --> 00:02:27.388
So to use this,
we're gonna set up the FeedbackDelay,

35
00:02:27.388 --> 00:02:32.730
the constructor here,
pass in the delay time and

36
00:02:32.730 --> 00:02:36.265
we're gonna use 8 nodes here.

37
00:02:36.265 --> 00:02:41.789
So this is the syntax
that tone.js supports.

38
00:02:41.789 --> 00:02:43.706
Like I was mentioning earlier,

39
00:02:43.706 --> 00:02:46.837
we could try just passing
in another value for time.

40
00:02:46.837 --> 00:02:49.548
So if we go into the documentation for
time,

41
00:02:49.548 --> 00:02:52.349
they show you a little
bit about how to use it.

42
00:02:52.349 --> 00:02:57.011
It could just be numbers, which is in
seconds, and then we could have a very

43
00:02:57.011 --> 00:03:02.267
exact second based delay, so let's say,
one second delay or something like that.

44
00:03:02.267 --> 00:03:06.706
Or we could use this notation,
like triplets or 8 nodes, or

45
00:03:06.706 --> 00:03:08.890
whatever for quarter nodes.

46
00:03:08.890 --> 00:03:13.628
They also have some other ways of
representing time as well, and

47
00:03:13.628 --> 00:03:17.504
there's even more details
there in this page here.

48
00:03:17.504 --> 00:03:20.314
But just for now, I like to just
stick with the 8n or 4n, and

49
00:03:20.314 --> 00:03:21.816
those are kind of nice and easy.

50
00:03:21.816 --> 00:03:25.863
And then the second parameter here is
the feedback, and so we can try and

51
00:03:25.863 --> 00:03:29.992
change these parameters just to see
how it sounds and hear how it sounds.

52
00:03:29.992 --> 00:03:36.392
So if I was to use a very low value for
that feedback,

53
00:03:36.392 --> 00:03:37.299
[MUSIC]

54
00:03:37.299 --> 00:03:41.887
There's not quite as much action going on,

55
00:03:41.887 --> 00:03:46.852
in fact,
it's really hard to hear any echoes.

56
00:03:46.852 --> 00:03:50.021
And that's because every
time it's doing a feedback,

57
00:03:50.021 --> 00:03:52.325
it's scaling the signal by this value.

58
00:03:52.325 --> 00:03:57.402
And if the value is too low, then the
feedback signal basically just disappears.

59
00:03:57.402 --> 00:04:03.441
And if it's too high, the feedback
is just gonna continually appear and

60
00:04:03.441 --> 00:04:09.489
create this endless looping,
because it's never reducing the value.

61
00:04:09.489 --> 00:04:13.638
So we wanna scale down the value by
some amount, so that eventually,

62
00:04:13.638 --> 00:04:15.074
that echo disappears.

63
00:04:15.074 --> 00:04:18.358
[MUSIC]

64
00:04:18.358 --> 00:04:21.333
So you just need to find a nice
value that you like, maybe 0.6, 0.8,

65
00:04:21.333 --> 00:04:22.240
something like that.

66
00:04:22.240 --> 00:04:26.720
And so that's the FeedbackDelay.

67
00:04:26.720 --> 00:04:31.936
And then just as with any other
node in tone js, it's quite simple,

68
00:04:31.936 --> 00:04:36.054
you just connect the synth
to the feedbackDelay, and

69
00:04:36.054 --> 00:04:40.282
then you can connect
the feedbackDelay to the master.

70
00:04:40.282 --> 00:04:46.754
What I've decided to do here is to also
connect the synth directly to the master.

71
00:04:46.754 --> 00:04:50.726
So what we have coming out
of the speaker is not just

72
00:04:50.726 --> 00:04:54.991
the FeedbackDelay sound,
but also the synth sound.

73
00:04:54.991 --> 00:05:00.344
Let's hear how it sounds without
connecting the synth to the master.

74
00:05:00.344 --> 00:05:00.902
[MUSIC]

75
00:05:00.902 --> 00:05:06.814
Now what we're hearing is just the echo,
so when I click, there's no sound and

76
00:05:06.814 --> 00:05:11.842
it's an only after an 8th nodes do
I hear any sound being produced,

77
00:05:11.842 --> 00:05:16.106
because the synth itself is
not connected to the master.

78
00:05:16.106 --> 00:05:19.190
And so that's why you wanna connect both.

79
00:05:19.190 --> 00:05:23.572
Okay, getting into
the next little demo here.

80
00:05:23.572 --> 00:05:29.087
So in our tone demos,
I've shown a few of these,

81
00:05:29.087 --> 00:05:32.052
this one here is effects.

82
00:05:32.052 --> 00:05:35.699
So this is just going into a few
more effects similar as what we

83
00:05:35.699 --> 00:05:37.281
were just talking about.

84
00:05:37.281 --> 00:05:39.022
[MUSIC]

85
00:05:39.022 --> 00:05:43.204
So in this effects demo,

86
00:05:43.204 --> 00:05:44.545
[MUSIC]

87
00:05:44.545 --> 00:05:50.484
We are using a few of them here,

88
00:05:50.484 --> 00:05:57.798
we're using what's called reverb.

89
00:05:57.798 --> 00:06:02.106
And the idea of reverb is that it
recreates the sound that happens when

90
00:06:02.106 --> 00:06:03.677
you're in a large room.

91
00:06:03.677 --> 00:06:08.528
So let's say you're in hall or
let's say you're in a concert hall even,

92
00:06:08.528 --> 00:06:10.185
and you start shouting.

93
00:06:10.185 --> 00:06:13.416
The waves that are coming
from your shouting and

94
00:06:13.416 --> 00:06:17.699
the noise that you're creating,
they're going outwards and

95
00:06:17.699 --> 00:06:22.973
hitting the walls of the room, eventually,
and bouncing back towards you.

96
00:06:22.973 --> 00:06:25.378
And creating these reflections and

97
00:06:25.378 --> 00:06:29.153
creating these sort of echoes
within the space itself.

98
00:06:29.153 --> 00:06:32.441
And depending on the size of the room,
depending on the shape of the room,

99
00:06:32.441 --> 00:06:34.405
depending on all these different factors,

100
00:06:34.405 --> 00:06:36.705
you can end up with very
different types of echoes.

101
00:06:36.705 --> 00:06:41.502
And these aren't echoes like when you're
in a cliff mountain and you're shouting,

102
00:06:41.502 --> 00:06:44.046
and there's these massive delayed echoes.

103
00:06:44.046 --> 00:06:47.254
It's more like more of a room
ambience that changes,

104
00:06:47.254 --> 00:06:51.531
depending on if you're in a large room or
a small room or room with really

105
00:06:51.531 --> 00:06:55.842
sort of like tight walls that will
not really reflect the audio as much.

106
00:06:55.842 --> 00:06:58.547
So let's say you're in a room
that has better soundproofing and

107
00:06:58.547 --> 00:07:00.160
a room that has worse soundproofing.

108
00:07:00.160 --> 00:07:02.241
That all has to do with reverb.

109
00:07:02.241 --> 00:07:07.290
And we can recreate those kinds of
effects by setting up a reverb node here,

110
00:07:07.290 --> 00:07:10.429
giving it a decay and
these other properties.

111
00:07:10.429 --> 00:07:16.071
And I'm gonna just pop open the API, just
so that we can double check what these do.

112
00:07:20.672 --> 00:07:25.269
There's actually a couple of different
reverbs, because reverb is this common

113
00:07:25.269 --> 00:07:29.944
thing that you get in audio but there's
a lot of different ways of exploring this.

114
00:07:29.944 --> 00:07:32.274
And a lot of different libraries
that have to do with it,

115
00:07:32.274 --> 00:07:35.112
a lot of different algorithms, and
a lot of different approaches.

116
00:07:35.112 --> 00:07:39.310
We're just gonna use whatever
their default reverb node is.

117
00:07:40.379 --> 00:07:44.051
And the decay option gives us, as it says,

118
00:07:44.051 --> 00:07:48.947
the amount of time that
the reverberation is happening,

119
00:07:48.947 --> 00:07:52.722
and there are some other options here, so.

120
00:07:54.908 --> 00:07:59.150
The preDelay has something to do with,
perhaps,

121
00:07:59.150 --> 00:08:05.414
the delay before the sound is supposed
to echo off or something like that.

122
00:08:05.414 --> 00:08:12.372
And then wetness, when you hear the terms
wet and dry, so this effect right now.

123
00:08:12.372 --> 00:08:16.891
When it says wet,
it means what's the percentage of

124
00:08:16.891 --> 00:08:21.421
strength that we want this
effect to be outputting?

125
00:08:21.421 --> 00:08:26.172
So if I was to say 1,
then the reverb will be at full strength.

126
00:08:26.172 --> 00:08:31.342
And if I was to say 0, the reverb
will be at no strength at all, and

127
00:08:31.342 --> 00:08:36.707
there won't be any really reverb
effect coming out of this output.

128
00:08:36.707 --> 00:08:42.699
So 0.5 is in between, and I can actually
just comment out a few things and

129
00:08:42.699 --> 00:08:46.328
set these up just to
show you how that sounds.

130
00:08:46.328 --> 00:08:49.932
So if we were to do something like this,

131
00:08:49.932 --> 00:08:54.307
where we do synth.connect(reverb);, and

132
00:08:54.307 --> 00:08:58.588
then reverb.connect(Tone.Master);.

133
00:08:58.588 --> 00:09:04.636
What we're doing is we're just listening

134
00:09:04.636 --> 00:09:09.515
to the synth but through a reverb.

135
00:09:09.515 --> 00:09:10.192
[MUSIC]
And

136
00:09:10.192 --> 00:09:14.621
now let's just see how that
sounds without any reverb at all.

137
00:09:14.621 --> 00:09:19.024
So we just connect the synth
directly to the master.

138
00:09:19.024 --> 00:09:24.067
And you'll notice it cuts off
really quickly because there's no

139
00:09:24.067 --> 00:09:29.488
sort of ambience, it doesn't feel
like we're in a big hall anymore.

140
00:09:29.488 --> 00:09:33.881
We still need to send this
synth through the reverb, but

141
00:09:33.881 --> 00:09:38.660
then we can change this wet
property here to 1, let's say.

142
00:09:38.660 --> 00:09:39.428
[MUSIC]

143
00:09:39.428 --> 00:09:45.254
And now the signal is fully
using this reverb and

144
00:09:45.254 --> 00:09:50.946
all we're really hearing
is that the reverb.

145
00:09:50.946 --> 00:09:56.833
Whereas if it was 0, probably all we
would really be hearing is the synth,

146
00:09:56.833 --> 00:09:59.923
this reverb would be effectively off.

147
00:09:59.923 --> 00:10:01.628
Yeah, exactly.

148
00:10:01.628 --> 00:10:03.921
So that's why I decided to
go somewhere in the middle.

149
00:10:03.921 --> 00:10:07.257
If you go too high,
all you hear is the reverb sound.

150
00:10:07.257 --> 00:10:12.431
If you go too low,
you don't hear the reverb at all.

151
00:10:12.431 --> 00:10:16.248
You have to use an asynchronous
generate to load the reverb effect.

152
00:10:16.248 --> 00:10:21.977
And then there's some other effects that
I've got here, so another FeedbackDelay.

153
00:10:21.977 --> 00:10:28.123
And then this one is a filter which allows
us to sweep a sort of frequency range and

154
00:10:28.123 --> 00:10:33.746
cut it off entirely, which you might
hear when I start moving the mouse.

155
00:10:33.746 --> 00:10:37.214
I'm just gonna go back to
the code that we had before here.

156
00:10:39.958 --> 00:10:43.798
And then, finally,
we have our synth itself.

157
00:10:43.798 --> 00:10:48.871
And the synth is a little bit more
complex than the previous synths,

158
00:10:48.871 --> 00:10:51.106
because I have this options.

159
00:10:51.106 --> 00:10:55.108
We can prefix a sine wave or
we can prefix a square wave or

160
00:10:55.108 --> 00:10:59.806
triangle with this sort of fat,
it's like a fat sort of prefix,

161
00:10:59.806 --> 00:11:03.733
which just makes the wave
sound really fat, I guess.

162
00:11:03.733 --> 00:11:10.225
But the idea is that you spread
basically multiple frequencies somehow,

163
00:11:10.225 --> 00:11:15.682
layering together to create this
kind of chorus of the synth.

164
00:11:15.682 --> 00:11:21.446
And by changing these values here, it's
almost like multiple voices from a synth,

165
00:11:21.446 --> 00:11:24.709
and allowing you to just
create a richer sound.

166
00:11:24.709 --> 00:11:28.970
That sounds a little bit more interesting
than just a single sine wave or

167
00:11:28.970 --> 00:11:30.402
single triangle wave.

168
00:11:30.402 --> 00:11:35.286
And then the other thing that is happening
with this synth that's a little different

169
00:11:35.286 --> 00:11:37.575
is that we're changing the envelope.

170
00:11:37.575 --> 00:11:42.025
So one of the nice things with tone
js is that they have these envelopes.

171
00:11:42.025 --> 00:11:46.440
And the envelopes have to do with
how the signal is being played, and

172
00:11:46.440 --> 00:11:50.169
how the signal is echoing off and
being released kind of.

173
00:11:50.169 --> 00:11:56.130
So it's always based on this idea
of attack, decay, sustain, release.

174
00:11:56.130 --> 00:12:00.930
So ADSR is a pretty common
sort of idea within this

175
00:12:00.930 --> 00:12:04.335
audio in digital audience space.

176
00:12:04.335 --> 00:12:10.042
The attack is how fast the signal
turns on, and so that's in seconds or

177
00:12:10.042 --> 00:12:14.612
milliseconds, perhaps,
in tone, it's in seconds.

178
00:12:14.612 --> 00:12:17.506
So how fast the audio is turning on?

179
00:12:17.506 --> 00:12:22.758
So when you hit the node, when you do
trigger attack, if you have an attack

180
00:12:22.758 --> 00:12:28.980
of 0, let's say, and you were to run that,
it'll just play the sound immediately.

181
00:12:31.824 --> 00:12:34.098
Or at least in this case,
it'll show graph, but

182
00:12:34.098 --> 00:12:36.321
it doesn't seem to play
the sound in this demo.

183
00:12:36.321 --> 00:12:40.165
But imagine it was playing a sound,
it would play the sound immediately.

184
00:12:40.165 --> 00:12:44.614
If you increase the attack to one second,

185
00:12:44.614 --> 00:12:49.446
it'll be a slow gradual
ramp up from silent to

186
00:12:49.446 --> 00:12:53.911
full volume over the course of 1 second.

187
00:12:53.911 --> 00:12:58.667
And then there's some other
properties like sustain,

188
00:12:58.667 --> 00:13:03.927
is how long the node will sustain
itself after you push the node

189
00:13:03.927 --> 00:13:09.000
down kind of, and
then releases once you let go of the node.

190
00:13:09.000 --> 00:13:11.900
How long does it take
to turn that node off?

191
00:13:11.900 --> 00:13:15.820
And the decay has to do with
between hitting the node on and

192
00:13:15.820 --> 00:13:19.342
going into the sort of
sustaining part of the node.

193
00:13:19.342 --> 00:13:23.051
And it's hard to explain with
this little tiny ADSR diagram.

194
00:13:23.051 --> 00:13:27.898
But I will have a resource that will
probably explain it a little bit better

195
00:13:27.898 --> 00:13:31.816
than I'm doing here,
which I'll show a little bit later.

196
00:13:31.816 --> 00:13:36.592
And that's just something you could
play with that allows you to create

197
00:13:36.592 --> 00:13:38.748
different shapes to the sound.

198
00:13:38.748 --> 00:13:42.892
And it allows it to be
a little bit softer, so

199
00:13:42.892 --> 00:13:47.602
that it's not just piercing
on off sort of sound.

200
00:13:47.602 --> 00:13:51.980
And we're wiring it all up, just as we are
in all the audio demos here, connecting

201
00:13:51.980 --> 00:13:55.799
the synth to the filter and then
connecting that filter to the effects.

202
00:13:55.799 --> 00:13:58.798
Then connecting the effects to the reverb,
and then finally,

203
00:13:58.798 --> 00:14:00.050
the reverb to the master.

204
00:14:00.050 --> 00:14:05.482
And so the one thing I haven't
really mentioned yet is this filter.

205
00:14:05.482 --> 00:14:08.429
And the filter will basically cut off or

206
00:14:08.429 --> 00:14:14.065
allow through different frequencies or
maybe some range of frequencies.

207
00:14:14.065 --> 00:14:19.267
So here based on the value fxu,
which is the x position of

208
00:14:19.267 --> 00:14:26.479
the mouse divided by the width of
the screen, so some value between 0 and 1.

209
00:14:26.479 --> 00:14:30.799
We're changing between the minimum,
which is 1,000 hertz, and

210
00:14:30.799 --> 00:14:35.051
the maximum, which is, sorry,
100 hertz and 8,000 hertz.

211
00:14:35.051 --> 00:14:38.009
And we're setting
the filter to that values.

212
00:14:38.009 --> 00:14:43.520
Right now, I'm using this filter effect
to filter out certain frequencies.

213
00:14:43.520 --> 00:14:47.310
And so we can use what's
called a low pass filter.

214
00:14:47.310 --> 00:14:52.251
And what that's going to do is only
pass through filter frequencies that

215
00:14:52.251 --> 00:14:55.579
go below the threshold
that we're going to set.

216
00:14:55.579 --> 00:14:58.264
So to show how that's gonna work, first,

217
00:14:58.264 --> 00:15:03.500
we make sure that that filter is connected
to this graft, connected to the system.

218
00:15:03.500 --> 00:15:08.522
So in this case now, we have it so
that the synth connects with the effects,

219
00:15:08.522 --> 00:15:11.168
which is then connected to the reverb.

220
00:15:11.168 --> 00:15:14.386
And the reverb is finally
connected to the filter.

221
00:15:14.386 --> 00:15:19.731
So the filter here is the last step before
hitting the speaker, the master output.

222
00:15:19.731 --> 00:15:24.897
And then we scroll down and
we see where filter is being adjusted.

223
00:15:24.897 --> 00:15:29.771
Here we're adjusting the frequency of
the filter, and we're adjusting it

224
00:15:29.771 --> 00:15:34.280
between some minimum and maximum
range based on the mouse x position.

225
00:15:34.280 --> 00:15:39.314
When this mouse x position is at the left,
it's going to use the filterMin.

226
00:15:39.314 --> 00:15:44.222
When it's at the right of the screen,
it's gonna use filterMax.

227
00:15:44.222 --> 00:15:49.218
And any mouse position in between
there is just going to blend those

228
00:15:49.218 --> 00:15:51.192
two filter frequencies.

229
00:15:51.192 --> 00:15:56.657
Just to show you, going up here,
the filterMin is 100 hertz and

230
00:15:56.657 --> 00:15:59.694
the filterMax is 5,000 hertz.

231
00:15:59.694 --> 00:16:04.790
And so, now, when we play these effects
and when we play these sounds, and when

232
00:16:04.790 --> 00:16:10.137
we slide our mouse to the left, it's going
to start to filter out some of the sound.

233
00:16:10.137 --> 00:16:10.805
[MUSIC]

234
00:16:10.805 --> 00:16:17.452
And what's happening is that we're
cutting off a lot of frequencies,

235
00:16:17.452 --> 00:16:23.006
we're only allowing the low
frequencies to pass through.

236
00:16:23.006 --> 00:16:25.860
[MUSIC]

237
00:16:25.860 --> 00:16:30.156
We're saying that only frequencies that
are lower than, let's say, whatever

238
00:16:30.156 --> 00:16:34.907
this would be, 100 hertz or 200 hertz,
those are the only things coming through.

239
00:16:34.907 --> 00:16:38.872
And then as it opens up,
it's getting into the 1,000 range hertz.

240
00:16:38.872 --> 00:16:41.354
We start to hear higher and
higher frequencies.

241
00:16:41.354 --> 00:16:45.810
[MUSIC]

242
00:16:45.810 --> 00:16:49.666
And you can create some really nice
effects with that kind of a filter node.

243
00:16:49.666 --> 00:16:55.574
You can also try using other things
like a highpass, which is the opposite,

244
00:16:55.574 --> 00:17:00.756
it only passes through frequencies
that are above the threshold.

245
00:17:00.756 --> 00:17:02.644
[MUSIC]

246
00:17:02.644 --> 00:17:10.109
Or some of the ones that we explored
earlier in the course, like the bandpass.

247
00:17:10.109 --> 00:17:16.370
And this is just going to pass
through only the frequencies

248
00:17:16.370 --> 00:17:21.353
that are in the band
that we're specifying and

249
00:17:21.353 --> 00:17:27.511
maybe some sort of left and
right frequencies around it.

250
00:17:27.511 --> 00:17:31.309
[MUSIC]
And what that means here is that,

251
00:17:31.309 --> 00:17:38.770
we're really only dedicating the signal
near the frequency we specify,

252
00:17:38.770 --> 00:17:43.119
which might be, let's say 200 hertz.

253
00:17:43.119 --> 00:17:47.975
And the only signals that are coming
through are kind of close to

254
00:17:47.975 --> 00:17:49.723
that frequency band.

255
00:17:49.723 --> 00:17:53.610
But low pass is quite a nice one for
these kinds of effects.

256
00:17:54.701 --> 00:18:00.026
And the other thing we're doing on the y
position, this is when the mouse is going

257
00:18:00.026 --> 00:18:05.297
up and down on the y position, we're
changing the wet value of our effect node.

258
00:18:05.297 --> 00:18:08.903
So the wet value, remember,
the higher the wet value,

259
00:18:08.903 --> 00:18:11.221
the more we're using that effect.

260
00:18:11.221 --> 00:18:16.199
And the lower the wet value,
the less we're gonna hear, and

261
00:18:16.199 --> 00:18:19.526
that affects your that FeedbackDelay.

262
00:18:19.526 --> 00:18:24.013
So if we use fully wet,
then all we're gonna hear is the feedback.

263
00:18:24.013 --> 00:18:29.877
If it's fully dry or there's no wetness,
all we're gonna hear is the synth itself.

264
00:18:29.877 --> 00:18:31.021
[MUSIC]

265
00:18:31.021 --> 00:18:35.978
So up here, there's no feedback,

266
00:18:35.978 --> 00:18:41.275
down here, there's a lot of feedback

267
00:18:41.275 --> 00:18:43.925
[MUSIC]

268
00:18:43.925 --> 00:18:49.304
And we can start to create some
really interesting soundscapes,

269
00:18:49.304 --> 00:18:54.800
just by modulating these and
by using different parameters here.

270
00:18:54.800 --> 00:18:57.343
[MUSIC]

271
00:18:57.343 --> 00:19:01.175
So I'm just tapping in different places.

272
00:19:01.175 --> 00:19:06.391
But you can imagine some
sort of algorithmic system

273
00:19:06.391 --> 00:19:11.120
that might be automatically
triggering these

274
00:19:11.120 --> 00:19:16.092
nodes with different
parameters to create these

275
00:19:16.092 --> 00:19:21.081
really rich and
atmospheric sounding outputs.

276
00:19:21.081 --> 00:19:23.720
So that's just a little
bit about the filtering.

