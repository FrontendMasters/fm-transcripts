WEBVTT

1
00:00:02.040 --> 00:00:05.287
Now that you can develop with Node js,
we built APIs,

2
00:00:05.287 --> 00:00:08.896
we built COIs,
we built things that interacted with file,

3
00:00:08.896 --> 00:00:12.451
which are arguably the top three
most use cases of Node js.

4
00:00:12.451 --> 00:00:16.435
You need to learn how to get your
apps off your local machine.

5
00:00:16.435 --> 00:00:20.693
If you're building a frontend app,
you deploy it to a CDN, you build it.

6
00:00:20.693 --> 00:00:25.382
If it's a server rendered thing, you throw
it on Heroku, reverse cell, or Netlify, or

7
00:00:25.382 --> 00:00:26.455
whatever.

8
00:00:26.455 --> 00:00:30.135
You get it off the machine, you deploy
it to some other machine somewhere else.

9
00:00:30.135 --> 00:00:34.356
Well, whatever you're doing with Node
is gonna determine how you deploy slash

10
00:00:34.356 --> 00:00:36.020
publish it.

11
00:00:36.020 --> 00:00:38.570
So, let's talk about,
let's say you're making a package.

12
00:00:38.570 --> 00:00:41.284
So, if we go back and look at some of
the things that we worked on today,

13
00:00:41.284 --> 00:00:43.500
some of the packages were the CLI,
that's the package.

14
00:00:46.430 --> 00:00:48.114
Maybe this file reading, that's a package.

15
00:00:48.114 --> 00:00:51.360
Everything here is a package except for
the API, that's a server.

16
00:00:51.360 --> 00:00:55.610
So you can't deploy a package,
it doesn't run.

17
00:00:55.610 --> 00:00:57.130
It gets executed on demand.

18
00:00:57.130 --> 00:00:59.620
There's a command you run and
it gets executed and it stops.

19
00:00:59.620 --> 00:01:02.030
It's expected to be executed by a human.

20
00:01:02.030 --> 00:01:03.010
That's why there's a CLI.

21
00:01:03.010 --> 00:01:06.058
There's no programmatic interface
with doing some stuff that we did,

22
00:01:06.058 --> 00:01:07.620
they're little scripts.

23
00:01:07.620 --> 00:01:10.036
So you can actually deploy that
to a server and have it hosted,

24
00:01:10.036 --> 00:01:11.880
that wouldn't make any sense.

25
00:01:11.880 --> 00:01:14.556
So instead,
you're probably published those.

26
00:01:14.556 --> 00:01:17.900
So that way,
someone can NPM install your thing, right?

27
00:01:17.900 --> 00:01:21.210
So, I'm gonna walk you through
how you can do that with NPM.

28
00:01:21.210 --> 00:01:22.644
And there's a lot of ways you can do it,

29
00:01:22.644 --> 00:01:24.920
but I'm just gonna walk you through
how you can do it with NPM.

30
00:01:24.920 --> 00:01:28.596
So, if you wanna publish something,
you want to be available to be downloaded,

31
00:01:28.596 --> 00:01:29.870
this is how you would do it.

32
00:01:29.870 --> 00:01:33.368
The first thing is, obviously, make sure
you have NPM installed, which at this

33
00:01:33.368 --> 00:01:36.722
point I hope you do, cuz I don't know
what you've been doing if you didn't.

34
00:01:36.722 --> 00:01:38.810
So I hope you have NPM installed.

35
00:01:38.810 --> 00:01:40.453
The next thing is you need an NPM account.

36
00:01:40.453 --> 00:01:49.543
So if you go to npmjs, And sign in.

37
00:01:49.543 --> 00:01:52.840
I don't even know what mine is, but
I know I got an account somewhere.

38
00:01:52.840 --> 00:01:54.330
So you need an account.

39
00:01:54.330 --> 00:01:58.992
And then, the next thing is you need to

40
00:01:58.992 --> 00:02:03.668
log into your account via the NPM CLI.

41
00:02:03.668 --> 00:02:07.370
So you can type in npm login.

42
00:02:07.370 --> 00:02:09.010
Hopefully, I'm already logged in.

43
00:02:09.010 --> 00:02:09.680
Of course, I'm not.

44
00:02:11.360 --> 00:02:17.167
Now, it's gonna ask me for
the password that I don't remember Okay,

45
00:02:17.167 --> 00:02:19.173
you want my email too?

46
00:02:22.492 --> 00:02:26.375
Okay, yeah, obviously,
I don't know my password is.

47
00:02:26.375 --> 00:02:28.688
Let's try this again.

48
00:02:37.238 --> 00:02:43.269
Okay, I don't want you guys watching
me try to get into NPM right quick.

49
00:02:44.380 --> 00:02:48.320
Let's see, I'm gonna try to
do this without the login.

50
00:02:48.320 --> 00:02:49.380
Let's see what happens.

51
00:02:49.380 --> 00:02:51.682
That way,
we can at least run through it, and

52
00:02:51.682 --> 00:02:54.030
then I can reset my password if I need to.

53
00:02:54.030 --> 00:02:58.535
But let's try to just do NPM
publish on one of the packages, and

54
00:02:58.535 --> 00:03:01.180
we can at least run through the reps.

55
00:03:01.180 --> 00:03:03.991
So, let's try to deploy this reddit-cli.

56
00:03:03.991 --> 00:03:06.340
So it's got everything we need.

57
00:03:06.340 --> 00:03:08.130
It's got the gitignore.

58
00:03:08.130 --> 00:03:10.031
It's got the package dot json.

59
00:03:10.031 --> 00:03:13.580
It's got this reddit-cli, but
that name is already taken.

60
00:03:13.580 --> 00:03:17.568
So, I'm gonna change
this to scott-reddit-cli.

61
00:03:17.568 --> 00:03:21.300
If someone has that name, they deserve it.

62
00:03:21.300 --> 00:03:23.240
I'm just gonna give it to him.

63
00:03:23.240 --> 00:03:26.064
The main is gonna be index dot mjs.

64
00:03:26.064 --> 00:03:31.550
And which obviously doesn't matter
because it's a CLI, but whatever.

65
00:03:32.710 --> 00:03:33.590
And we should be good there.

66
00:03:33.590 --> 00:03:38.794
So now, I'm going to CDN to reddit, and

67
00:03:38.794 --> 00:03:44.340
I'm going to say npm Publish.

68
00:03:46.320 --> 00:03:48.880
And just like that, it published it.

69
00:03:48.880 --> 00:03:52.520
So, it went ahead and
publish scott-reddit-cli.

70
00:03:52.520 --> 00:03:53.510
We are good to go.

71
00:03:53.510 --> 00:03:56.803
You should actually be able to
install that on your machine right now

72
00:03:56.803 --> 00:03:57.569
if you want to.

73
00:03:57.569 --> 00:04:00.960
Go ahead and npm install scott-reddit-cli,
and you can get access to it.

74
00:04:00.960 --> 00:04:02.140
In fact, I'm gonna do it right now.

75
00:04:03.310 --> 00:04:06.821
Npm install scott-reddit-cli.

76
00:04:09.433 --> 00:04:13.561
And it breaks out because I'm
already inside of a package called

77
00:04:13.561 --> 00:04:15.631
scott-reddit-cli, right?

78
00:04:15.631 --> 00:04:19.762
So, let's go into another one like intro,
I'll run that again.

79
00:04:19.762 --> 00:04:24.931
And boom, I just installed the CLI into
the intro file, and I can verify that.

80
00:04:24.931 --> 00:04:28.163
There should be a bin folder in here,
there is.

81
00:04:28.163 --> 00:04:30.310
And it should say reddit, it does.

82
00:04:30.310 --> 00:04:32.583
And it should be my code, and it is.

83
00:04:32.583 --> 00:04:35.030
So, I was able to install that.

84
00:04:35.030 --> 00:04:36.010
That's simple with NPM.

85
00:04:36.010 --> 00:04:37.980
The whole world has access to it now.

86
00:04:39.320 --> 00:04:42.300
So, that's how you published the MPM.

87
00:04:42.300 --> 00:04:44.798
And you should be, and the reason I
want to log in, so you can go and

88
00:04:44.798 --> 00:04:47.050
you kind of manage all
your different things.

89
00:04:47.050 --> 00:04:50.640
But apparently, I'm already logged in or
it doesn't really care.

90
00:04:51.780 --> 00:04:52.560
I don't know.

91
00:04:52.560 --> 00:04:54.960
But yes, that's how you publish on NPM.

92
00:04:54.960 --> 00:04:58.070
You can't take down versions
you already published.

93
00:04:58.070 --> 00:05:00.110
But you can just publish new versions.

94
00:05:00.110 --> 00:05:05.910
And I do recommend using
the NPM CLI to do your versioning.

95
00:05:05.910 --> 00:05:08.430
So you can do something like npm version.

96
00:05:08.430 --> 00:05:11.722
Let me go back to the reddit-cli.

97
00:05:11.722 --> 00:05:15.403
Then you could do npm, what is it?

98
00:05:15.403 --> 00:05:17.110
Is a version.

99
00:05:17.110 --> 00:05:21.790
No, it's npm Bump.

100
00:05:23.370 --> 00:05:24.680
No, what is it?

101
00:05:26.250 --> 00:05:26.911
Let's see.

102
00:05:29.393 --> 00:05:31.727
I don't use this one that much,

103
00:05:31.727 --> 00:05:36.752
I use a bunch of automations that make
this not as easy or a lot easier.

104
00:05:36.752 --> 00:05:38.040
I will just show you the one that I use.

105
00:05:38.040 --> 00:05:42.836
So I use something called semantic

106
00:05:44.988 --> 00:05:48.380
Cli, Semantic-release-cli.

107
00:05:48.380 --> 00:05:52.280
So, I use this tool to help me with
the versioning of my packages.

108
00:05:52.280 --> 00:05:57.260
It basically will look
at my commit messages.

109
00:05:58.390 --> 00:06:01.199
Whatever type of message I
wrote to determine what the new

110
00:06:01.199 --> 00:06:02.494
version of my package is.

111
00:06:02.494 --> 00:06:06.310
So, I do have to write my commit
messages in a very strict way.

112
00:06:06.310 --> 00:06:08.090
But I'm used to is I do
a lot of open source, and

113
00:06:08.090 --> 00:06:09.620
they make you write that stuff anyway.

114
00:06:09.620 --> 00:06:11.571
If you ever contributed Angular or React,

115
00:06:11.571 --> 00:06:14.714
they have a very specific commit
format that they want you to follow,

116
00:06:14.714 --> 00:06:18.680
what they're messaging and everything
because they use tooling as well.

117
00:06:18.680 --> 00:06:21.416
So, if you do write your commit
messages in certain way,

118
00:06:21.416 --> 00:06:23.589
you can have a tool like semantic-release.

119
00:06:24.640 --> 00:06:26.505
Look at those commit messages and

120
00:06:26.505 --> 00:06:30.042
determine do you need a minor
number upgrade or patch or major?

121
00:06:30.042 --> 00:06:32.800
It'll look at those things to determine.

122
00:06:32.800 --> 00:06:36.086
It'll generate the new version number for
you, change it in a package that JSON,

123
00:06:36.086 --> 00:06:37.990
and then you can just publish it.

124
00:06:37.990 --> 00:06:41.339
So that's pretty much what I use
to get my packages published.

125
00:06:41.339 --> 00:06:45.313
Although, I haven't really published
any packages in a couple months now.

126
00:06:45.313 --> 00:06:48.790
But when I was, that's what I did,
and it was amazing.

127
00:06:48.790 --> 00:06:52.410
And then, because all that's automatic,
you could put that into CLI.

128
00:06:52.410 --> 00:06:56.926
So you can just, if you merge something
into the published branch, then whenever

129
00:06:56.926 --> 00:07:00.860
it gets merged in there, the CLI or
the CI will take care of that for you.

130
00:07:00.860 --> 00:07:02.440
So you don't have to publish
on your own machine.

131
00:07:02.440 --> 00:07:05.390
So, automate all the things, why not?

132
00:07:05.390 --> 00:07:08.270
So yeah, I highly recommend looking
into some flow like that if you're

133
00:07:08.270 --> 00:07:09.670
serious about publishing on NPM.

