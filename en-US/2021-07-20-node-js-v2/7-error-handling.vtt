WEBVTT

1
00:00:00.340 --> 00:00:08.007
So, I have just been writing node.js code
JavaScript code pretty irresponsibly.

2
00:00:08.007 --> 00:00:11.831
Just now if we just look at the code
that I wrote, at any point,

3
00:00:11.831 --> 00:00:13.830
this code could throw an error.

4
00:00:13.830 --> 00:00:17.712
Like for instance,
if I decided to not put HTML and

5
00:00:17.712 --> 00:00:21.975
we tried to run this,
as you can see that I get an error.

6
00:00:21.975 --> 00:00:24.207
Maybe that is exactly what I want.

7
00:00:24.207 --> 00:00:28.706
In this case, I do want it to error out
if I didn't provide proper arguments to

8
00:00:28.706 --> 00:00:30.101
the methods and stuff.

9
00:00:30.101 --> 00:00:34.201
But in some cases, you probably don't
want your whole app to crash and burn,

10
00:00:34.201 --> 00:00:37.926
because there wasn't a known error
that you probably anticipated and

11
00:00:37.926 --> 00:00:39.458
it doesn't affect things.

12
00:00:39.458 --> 00:00:44.290
Something like, imagine if you
had an API that needs to be.

13
00:00:44.290 --> 00:00:48.090
If you wanted to make a request to the
API, you had to authenticate your request.

14
00:00:48.090 --> 00:00:53.650
And you had to pass like a token or some
type of, API key or something like that.

15
00:00:53.650 --> 00:00:58.578
Now, imagine your database throwing
an error, if that was an invalid token,

16
00:00:58.578 --> 00:01:01.040
or if that user wasn't found.

17
00:01:01.040 --> 00:01:04.960
If that ever did what this just did
as an app crashed my entire app.

18
00:01:04.960 --> 00:01:08.821
That means if someone doesn't provide
the correct credentials to your server,

19
00:01:08.821 --> 00:01:12.625
all your users will be punished your whole
app crash simply because someone just

20
00:01:12.625 --> 00:01:16.210
fat fingered API token or
they're trying to hack you or whatever.

21
00:01:16.210 --> 00:01:18.120
So, you don't wanna give them that power.

22
00:01:18.120 --> 00:01:22.680
So, sometimes you don't want the whole
app to crash, because there was an error.

23
00:01:22.680 --> 00:01:27.206
So, you need some type of way of
listening for errors, catching errors,

24
00:01:27.206 --> 00:01:31.450
handling errors, and node.js has
some pretty good ways to do that.

25
00:01:31.450 --> 00:01:35.652
So, I wanna walk through how you can do
that with node.js because I think it is

26
00:01:35.652 --> 00:01:36.990
very important.

27
00:01:36.990 --> 00:01:39.740
To understand that, so
that's what we'll do.

28
00:01:39.740 --> 00:01:44.316
So, the first thing that I wanted
to talk about when it comes to

29
00:01:44.316 --> 00:01:49.010
errors is really just understanding
the process of node.js.

30
00:01:49.010 --> 00:01:51.660
What that is and how that runs.

31
00:01:51.660 --> 00:01:54.883
So, when an exception is
thrown in node.js or an error,

32
00:01:54.883 --> 00:01:59.240
the current process will exit with a code
of one fact we might see that here.

33
00:01:59.240 --> 00:02:02.130
Let's see the say, exit one, somewhere.

34
00:02:03.180 --> 00:02:03.790
No it doesn't.

35
00:02:03.790 --> 00:02:08.594
But this actually errored out
an exception was thrown in a process

36
00:02:08.594 --> 00:02:10.700
exited literally with one.

37
00:02:10.700 --> 00:02:18.030
So, let's go into node I'm gonna type
in process.exit and I'm gonna say 1.

38
00:02:19.080 --> 00:02:23.514
And what this really does is when you exit
with the number of 1 it's telling node

39
00:02:23.514 --> 00:02:27.190
that it exited because something
bad happened and broke.

40
00:02:27.190 --> 00:02:31.170
If I exit with like a 0 or non 1.

41
00:02:33.590 --> 00:02:35.580
That means like, yeah, it was successful.

42
00:02:35.580 --> 00:02:37.920
Nothing happened, we're just done.

43
00:02:37.920 --> 00:02:40.790
And that's very useful for
when you're like looking at logs.

44
00:02:40.790 --> 00:02:44.570
You're trying to debug something
to see why your code stop running.

45
00:02:44.570 --> 00:02:47.995
What caused it, wasn't an error or
that it just completed a job and

46
00:02:47.995 --> 00:02:51.500
we just wrote back code like what
was it and that's what useful for.

47
00:02:51.500 --> 00:02:55.034
It's also useful for like piping that
information into another process or

48
00:02:55.034 --> 00:02:56.670
a log file or something like that.

49
00:02:56.670 --> 00:02:59.670
So, that's how the process
is gonna to work.

50
00:02:59.670 --> 00:03:02.340
And that's gonna to happen automatically.

51
00:03:02.340 --> 00:03:04.961
If you don't handle your errors
as you saw not through the error,

52
00:03:04.961 --> 00:03:06.020
it immediately crashed.

53
00:03:06.020 --> 00:03:08.400
Nothing else was executed, it broke.

54
00:03:08.400 --> 00:03:10.360
Kinda similar to what you
would get in the browser.

55
00:03:10.360 --> 00:03:14.350
I would imagine if you
threw an error here.

56
00:03:14.350 --> 00:03:18.793
It would also, break, but
it will continue to move forward depending

57
00:03:18.793 --> 00:03:23.480
on how you wrote your code, how you
code it, different things like that.

58
00:03:23.480 --> 00:03:25.630
So we kinda wanna do the same thing here.

59
00:03:25.630 --> 00:03:29.057
Whereas except on the browser,
if a JavaScript error happened and

60
00:03:29.057 --> 00:03:32.690
it didn't catch,
your whole screen is not gonna go blank.

61
00:03:32.690 --> 00:03:35.550
I guess the less that's what it was
trying to do in the first place.

62
00:03:35.550 --> 00:03:38.480
But chances are you'll just have
these errors in your console.

63
00:03:38.480 --> 00:03:40.981
And at least people can still
see your website or they can,

64
00:03:40.981 --> 00:03:44.060
still scroll through or maybe,
depending on what the interaction is.

65
00:03:44.060 --> 00:03:48.250
But in node.js, if your whole app crashes,
it crashes there's there's nothing left.

66
00:03:48.250 --> 00:03:49.700
There's no interaction with it.

67
00:03:49.700 --> 00:03:52.290
There's nothing other than
the fact that it should be on.

68
00:03:52.290 --> 00:03:55.165
There's no UI, so,
you don't get the benefit of like, well,

69
00:03:55.165 --> 00:03:57.810
I guess people could still at
least use it until we fix it.

70
00:03:57.810 --> 00:03:59.560
Nope, it's pretty much done.

71
00:03:59.560 --> 00:04:03.270
So, you want to get around that,
let's look at these docks here.

72
00:04:03.270 --> 00:04:04.300
Here we go.

73
00:04:04.300 --> 00:04:08.400
So, that's how the process exiting works.

74
00:04:08.400 --> 00:04:11.569
Now I showed you that not
because you should be using it,

75
00:04:11.569 --> 00:04:14.680
you should almost never be
using process.exit ever.

76
00:04:14.680 --> 00:04:18.811
And I'm gonna say the biggest reason why
you would not want to do that is because

77
00:04:18.811 --> 00:04:21.450
you just don't get the chance
to catch the error.

78
00:04:21.450 --> 00:04:24.569
If you're literally
exiting every single time,

79
00:04:24.569 --> 00:04:29.820
then you're not giving yourself the chance
to, well, what type of error is it?

80
00:04:29.820 --> 00:04:32.440
Well, I only wanna exit if it's this or
only wanna do that.

81
00:04:32.440 --> 00:04:33.200
You don't have to do it.

82
00:04:33.200 --> 00:04:35.110
Node.js is gonna exit for you.

83
00:04:35.110 --> 00:04:36.300
You just throw an exception.

84
00:04:36.300 --> 00:04:37.878
That's all you really have to do.

85
00:04:37.878 --> 00:04:41.785
You need to be responsible for
what exceptions you wanna throw and

86
00:04:41.785 --> 00:04:44.460
what exceptions you don't want to throw.

87
00:04:44.460 --> 00:04:47.249
So, that's the only
responsibility that you

88
00:04:47.249 --> 00:04:50.220
need to have when it comes
to errors in node.js.

89
00:04:50.220 --> 00:04:53.860
So, let's talk about how we used to handle
errors in node.js maybe now we probably

90
00:04:53.860 --> 00:04:57.084
still do depending on your code, and
then we'll kind of walk through like

91
00:04:57.084 --> 00:04:59.850
the different ways to do it
with different scenarios.

92
00:04:59.850 --> 00:05:01.660
So the first one is async errors.

93
00:05:01.660 --> 00:05:05.771
So let's go back to our file here,
I'm gonna stay in here or

94
00:05:05.771 --> 00:05:11.940
actually we can do file will call this
like errors.mjs and I'm gonna import.

95
00:05:11.940 --> 00:05:16.783
Let's import read file again, but
I'm not gonna be the promised one

96
00:05:16.783 --> 00:05:21.390
the read file from fs not from promise,
I'm gonna say read file.

97
00:05:22.560 --> 00:05:27.285
And I'm going to do the same thing I
have before so in the URL, in this case,

98
00:05:27.285 --> 00:05:28.940
I will just get a new file.

99
00:05:28.940 --> 00:05:32.330
This time I'm gonna read the app.mjs.

100
00:05:32.330 --> 00:05:39.450
Just a really toss it up and
imports.meta.url.

101
00:05:39.450 --> 00:05:43.869
I'm gonna do that and
then I'm going to do the UTF for

102
00:05:43.869 --> 00:05:46.983
the encoding to give us a string, and

103
00:05:46.983 --> 00:05:52.930
then I'm gonna pass a callback and
here's the error handling thing.

104
00:05:52.930 --> 00:05:55.588
So, as you can see here,
as I hover over this callback,

105
00:05:55.588 --> 00:06:00.220
you can see that it's saying here are the
two arguments that you might possibly get.

106
00:06:00.220 --> 00:06:02.803
You could possibly get an error,
as the first argument and

107
00:06:02.803 --> 00:06:05.870
then you could get the result
the data as a second argument.

108
00:06:05.870 --> 00:06:08.530
And this is how we handled errors
in the early days of node.

109
00:06:08.530 --> 00:06:10.770
And like I said,
we still do cuz it's still very popular.

110
00:06:10.770 --> 00:06:13.090
If you're not using promises or
async await.

111
00:06:13.090 --> 00:06:14.120
You would use callbacks.

112
00:06:14.120 --> 00:06:16.920
If you are using callbacks for
asynchronous code.

113
00:06:16.920 --> 00:06:18.865
Typically, the pattern is this,

114
00:06:18.865 --> 00:06:23.790
you have an error that is either going
to be there or it's going to be no.

115
00:06:23.790 --> 00:06:25.397
And then you have the result or

116
00:06:25.397 --> 00:06:29.670
the data which will be there if there
is no error or if there is data.

117
00:06:29.670 --> 00:06:30.660
And that's how you would handle it.

118
00:06:30.660 --> 00:06:34.692
So then in this callback, you would
say something like, well, if error,

119
00:06:34.692 --> 00:06:38.770
I want to do something, right, so
this is where you handle the error.

120
00:06:38.770 --> 00:06:40.931
And what I mean by handle, I mean,

121
00:06:40.931 --> 00:06:45.181
you decide on what you want to do
there like is this read file method so

122
00:06:45.181 --> 00:06:49.580
crucial to your app that if it
doesn't work, you need to stop.

123
00:06:49.580 --> 00:06:54.010
Or is there some type of fallback that
you can do or is this not that important?

124
00:06:54.010 --> 00:06:57.338
Or whatever, do you need to report this
error to some management app that you

125
00:06:57.338 --> 00:07:00.510
are paying for that like logs, your
errors that you can go tap into GitHub

126
00:07:00.510 --> 00:07:03.850
later look at them something like
century or something like that.

127
00:07:03.850 --> 00:07:05.640
Then this is where you would do that.

128
00:07:05.640 --> 00:07:09.870
Otherwise I don't have an error,
so, I got my data.

129
00:07:09.870 --> 00:07:12.340
So, I'm gonna do whatever I
want with my data here, right?

130
00:07:12.340 --> 00:07:14.250
So let's try to trigger
this to see what happens.

131
00:07:14.250 --> 00:07:15.308
So I'm gonna say error.

132
00:07:15.308 --> 00:07:19.080
We're gonna console.log the error here.

133
00:07:19.080 --> 00:07:22.300
Or actually I'm gonna say
console.error the error.

134
00:07:22.300 --> 00:07:25.130
Which doesn't really do
anything different visually but

135
00:07:25.130 --> 00:07:27.640
there's gonna be semantics here.

136
00:07:27.640 --> 00:07:31.156
So, now I'm going to actually make this
error outs by changing the file name.

137
00:07:31.156 --> 00:07:35.679
And then we're going to run
node against errors.mjs.

138
00:07:35.679 --> 00:07:40.184
And as you can see, we do get an error,
no such file name or directory, because

139
00:07:40.184 --> 00:07:45.850
that's not a real thing and I'm logging it
because that's literally what's happening.

140
00:07:45.850 --> 00:07:46.790
We have an error.

141
00:07:46.790 --> 00:07:50.050
But if I didn't want this to crash,
what I could do.

142
00:07:51.100 --> 00:07:52.470
Hold on.

143
00:07:52.470 --> 00:07:54.873
There we go.
Yeah, if I didn't want this to crash,

144
00:07:54.873 --> 00:07:56.230
I would.

145
00:07:56.230 --> 00:07:58.760
First of all, it's not crashing
right now it's just logging it.

146
00:07:58.760 --> 00:08:00.720
You can see that it's
not actually crashing.

147
00:08:00.720 --> 00:08:03.600
It's just logging the error but
looks like it's crashing.

148
00:08:03.600 --> 00:08:07.435
So, if I wanted to do something with this,
like let's say maybe I did want this to

149
00:08:07.435 --> 00:08:09.514
crash because this is
a crucial piece of code,

150
00:08:09.514 --> 00:08:11.300
then I would just re-throw the error.

151
00:08:11.300 --> 00:08:14.290
So like, okay, cool, actually,
yeah, this is the code.

152
00:08:14.290 --> 00:08:17.320
This is the error that if it happens,
I want it to crash, cool.

153
00:08:17.320 --> 00:08:20.290
Yeah, throw it and
now you can see that the error was thrown.

154
00:08:20.290 --> 00:08:23.680
The code won't go on, nothing's gonna
be completed we are good to go.

155
00:08:23.680 --> 00:08:27.620
So this is why it's really important to be
able to use the things is built into nodes

156
00:08:27.620 --> 00:08:31.521
to handle the errors versus just sticking
with a process dot exit on everything.

157
00:08:31.521 --> 00:08:32.774
Which is what I've seen before,

158
00:08:32.774 --> 00:08:35.460
which is just don't get
the opportunity to do anything.

159
00:08:35.460 --> 00:08:37.060
And then obviously, there was no error.

160
00:08:37.060 --> 00:08:38.880
We will do some stuff out here.

161
00:08:38.880 --> 00:08:43.530
So, this is how you would handle errors
,async errors that use callbacks.

162
00:08:43.530 --> 00:08:46.751
Now, if we wanted to
handle an error that was,

163
00:08:46.751 --> 00:08:50.480
promised based,
it's pretty similar to be honest.

164
00:08:50.480 --> 00:08:54.129
It depends if you wanna use
promises ,or async await,

165
00:08:54.129 --> 00:08:56.440
but it looks something like this.

166
00:08:56.440 --> 00:08:59.470
So, if I'm gonna change
this to fs promises.

167
00:09:01.650 --> 00:09:05.620
And we don't use a call back
anymore because we got a promise.

168
00:09:06.810 --> 00:09:09.750
So we'll do that and
now we can get the results.

169
00:09:12.330 --> 00:09:13.880
And we can await this like this.

170
00:09:13.880 --> 00:09:18.990
So now if we have this and we run it
it's gonna air out and it's gonna break.

171
00:09:18.990 --> 00:09:21.850
And you can see that we
do get this error here.

172
00:09:21.850 --> 00:09:23.214
But if we want it to catch this error,

173
00:09:23.214 --> 00:09:25.240
cuz we don't know what type
of error it's going to be.

174
00:09:25.240 --> 00:09:26.870
Maybe we wanna report it.

175
00:09:26.870 --> 00:09:31.300
We would have to wrap this in a try catch,
if we're gonna do await.

176
00:09:31.300 --> 00:09:35.920
So we'd say try, and then catch, okay.

177
00:09:35.920 --> 00:09:38.931
Just like you will don't synchronous
code because await is supposed to feel

178
00:09:38.931 --> 00:09:39.550
synchronous.

179
00:09:39.550 --> 00:09:42.769
So we treat it like synchronous code and
this is how you would catch an error for

180
00:09:42.769 --> 00:09:43.870
something synchronous.

181
00:09:43.870 --> 00:09:45.430
You'd wrap it in a truck catch.

182
00:09:45.430 --> 00:09:49.875
And now the error is gonna bubble up to
this catch right here without breaking

183
00:09:49.875 --> 00:09:50.510
the code.

184
00:09:50.510 --> 00:09:54.077
So, you just to show you I'll
say console.log error (e) and

185
00:09:54.077 --> 00:09:58.667
then you can see it will still move on to
this next line, which means it did break.

186
00:10:02.408 --> 00:10:05.972
So you can see we did catch the error, we
logged it and then we moved on to the next

187
00:10:05.972 --> 00:10:09.230
line because the code continued to
move on because we caught the error.

188
00:10:09.230 --> 00:10:10.830
We just happened to log it.

189
00:10:10.830 --> 00:10:14.700
And then just like before, it was like no,
actually this error is important.

190
00:10:14.700 --> 00:10:18.910
We do wanna throw this one we can throw
it, it won't move on to the next line.

191
00:10:18.910 --> 00:10:21.130
And the whole app actually crashed.

192
00:10:21.130 --> 00:10:25.260
So you get that choice, you get that power
of determining on how you want to do it.

193
00:10:25.260 --> 00:10:28.360
With promises, it's pretty much the same
thing, you just don't use await.

194
00:10:28.360 --> 00:10:31.880
I mean, it's pretty much the same thing
as a callbacks, not the try catch.

195
00:10:31.880 --> 00:10:33.360
You don't use the await.

196
00:10:34.770 --> 00:10:39.316
And you just use the native like
dot catch inside of a promise,

197
00:10:39.316 --> 00:10:42.760
which gives you an error like this.

198
00:10:42.760 --> 00:10:45.367
And then now you can put your doing
the exact same thing you did with

199
00:10:45.367 --> 00:10:49.250
the callbacks, if it's this type of error
throw and if it's not, don't do anything.

200
00:10:49.250 --> 00:10:50.410
It's already handled for you.

201
00:10:50.410 --> 00:10:53.128
So, that's how you you
would do that in a promise

202
00:10:53.128 --> 00:10:56.130
based workflow with error handling.

203
00:10:56.130 --> 00:11:00.831
So, that is how you would handle the
errors that you had control over as if you

204
00:11:00.831 --> 00:11:02.920
were writing the code.

205
00:11:02.920 --> 00:11:07.440
And you knew where errors were
going to potentially happen.

206
00:11:07.440 --> 00:11:10.512
But let's say you did not have
control of the code as if you

207
00:11:10.512 --> 00:11:12.790
were using some type of library.

208
00:11:12.790 --> 00:11:15.772
You download it,
that's internal somewhere and

209
00:11:15.772 --> 00:11:18.970
you just don't have the ability
to catch it somehow.

210
00:11:18.970 --> 00:11:21.180
Or maybe you don't want to, I don't know,
maybe there's just an arrow.

211
00:11:21.180 --> 00:11:24.650
You just don't know what's going on,
you can't really get this error.

212
00:11:24.650 --> 00:11:28.107
Then you do have this
catch all implementation,

213
00:11:28.107 --> 00:11:32.420
which is gonna be called
process.on uncaught exceptions.

214
00:11:32.420 --> 00:11:34.010
So let's talk about that.

215
00:11:34.010 --> 00:11:38.530
So, if you have an async error like
this one, so I'm gonna wait this.

216
00:11:38.530 --> 00:11:40.070
I'm not going to try catch it.

217
00:11:40.070 --> 00:11:45.435
But what I am gonna do is before
I actually call this function,

218
00:11:45.435 --> 00:11:52.470
which will cause the error, I'm gonna
register a process.at, that process.

219
00:11:52.470 --> 00:11:55.290
Okay, I don't know why it's doing that,
don't autocomplete, thank you.

220
00:11:55.290 --> 00:11:58.680
Sometimes, autocomplete is like,
way too aggressively helpful.

221
00:11:58.680 --> 00:12:00.974
I don't even know what that wasn't even
heard of that variable that it was kind

222
00:12:00.974 --> 00:12:02.040
of autocomplete.

223
00:12:02.040 --> 00:12:07.539
So, process.on uncaught
exception that was called,

224
00:12:07.539 --> 00:12:11.400
let me see, yeah on caught exception.

225
00:12:11.400 --> 00:12:12.650
There we go.

226
00:12:12.650 --> 00:12:15.370
I don't know why I couldn't spell there.

227
00:12:15.370 --> 00:12:18.980
Okay, processor on uncaught exception and
then we get a callback here.

228
00:12:20.710 --> 00:12:23.070
And you can see that we'll
have some type of error.

229
00:12:23.070 --> 00:12:24.127
Let's log that.

230
00:12:24.127 --> 00:12:27.455
And we'll run the code.

231
00:12:27.455 --> 00:12:30.670
And you can see that and just to show
you that we'll continue moving on.

232
00:12:30.670 --> 00:12:31.640
Let's see what happens.

233
00:12:31.640 --> 00:12:33.180
Let's see what happens if we move on here.

234
00:12:34.760 --> 00:12:38.644
So, what's happening here is
that the error was thrown, and

235
00:12:38.644 --> 00:12:41.850
there was nothing we can do about it.

236
00:12:41.850 --> 00:12:49.040
But, it did not actually get caught cuz
we didn't see line nine move forward.

237
00:12:49.040 --> 00:12:51.387
Actually, we were able to see
what error was thrown but

238
00:12:51.387 --> 00:12:53.080
it's too late arrows already thrown.

239
00:12:53.080 --> 00:12:53.790
We can't catch it.

240
00:12:53.790 --> 00:12:57.324
And this is why I said you don't
wanna use the process.exit and

241
00:12:57.324 --> 00:13:00.670
stuff because you don't get
the chance to catch the error.

242
00:13:00.670 --> 00:13:03.442
If this was an optional error
that a user did or something,

243
00:13:03.442 --> 00:13:05.150
there's nothing I can do about it.

244
00:13:05.150 --> 00:13:09.650
I'm just registering for
uncaught exception or process exit.

245
00:13:09.650 --> 00:13:10.560
You don't wanna do that.

246
00:13:10.560 --> 00:13:13.663
So you do wanna do the try catch,
you do wanna do the dot catch,

247
00:13:13.663 --> 00:13:16.440
you do wanna do callback
error data pattern.

248
00:13:16.440 --> 00:13:21.430
And only save this for like, okay,
someone didn't catch this error.

249
00:13:21.430 --> 00:13:23.080
What is going on?

250
00:13:23.080 --> 00:13:26.528
Maybe we need to log this somewhere,
but by the time you get here,

251
00:13:26.528 --> 00:13:27.670
you can't catch it.

252
00:13:27.670 --> 00:13:28.840
It's already been thrown.

253
00:13:28.840 --> 00:13:30.700
That's why it's called uncaught exception.

254
00:13:30.700 --> 00:13:32.060
No one caught it.

255
00:13:32.060 --> 00:13:36.362
So, this is just for
helping you figure it out what happened,

256
00:13:36.362 --> 00:13:41.411
why your thing crashed and maybe do
some cleanup logic some things like,

257
00:13:41.411 --> 00:13:44.740
it's about the crash
dude do this right quick.

258
00:13:44.740 --> 00:13:45.700
You're able to do that.

259
00:13:45.700 --> 00:13:48.060
And I'm pretty sure you can't
do async stuff in here.

260
00:13:48.060 --> 00:13:51.819
So, if you wanna like, I need to clean
the database before the server starts down

261
00:13:51.819 --> 00:13:53.940
because error was thrown, you can't do it.

262
00:13:53.940 --> 00:13:55.863
You can only really do synchronous things.

263
00:13:55.863 --> 00:14:00.226
Because the way the event loop works,
you're pretty much on the last tick of

264
00:14:00.226 --> 00:14:03.308
the event loop before this
application bottoms out.

265
00:14:03.308 --> 00:14:05.907
They're not gonna it's not going
to restart not gonna queue up any

266
00:14:05.907 --> 00:14:08.240
more tasks for you because it's
scheduled to be shut down.

267
00:14:08.240 --> 00:14:11.273
So, you can't do anything that
requires anything to be queued up so

268
00:14:11.273 --> 00:14:13.640
anything asynchronous can't happen here.

269
00:14:13.640 --> 00:14:14.580
So you got to keep it moving.

270
00:14:14.580 --> 00:14:17.793
So yeah, this is just for like, if you're
just lost and you can't figure out why

271
00:14:17.793 --> 00:14:20.830
something is happening, you would do
this at the top of your app somewhere.

