WEBVTT

1
00:00:00.050 --> 00:00:06.035
The first thing I wanna talk about is how
we can actually execute a Node program,

2
00:00:06.035 --> 00:00:08.805
because there's several ways, but

3
00:00:08.805 --> 00:00:13.110
we're really only gonna talk
about the important ones.

4
00:00:13.110 --> 00:00:15.366
So the first one is called the Node REPL.

5
00:00:15.366 --> 00:00:18.637
And REPL stands for
read evaluate, print, loop.

6
00:00:18.637 --> 00:00:23.624
It's basically an interactive shell
that's gonna be in the execution context

7
00:00:23.624 --> 00:00:25.569
of the runtime of your choice.

8
00:00:25.569 --> 00:00:27.185
In this case, it's gonna be Node.

9
00:00:27.185 --> 00:00:31.782
So we'll have an interactive shell inside
of our terminal where we can just write

10
00:00:31.782 --> 00:00:35.906
some JavaScript in the Node runtime,
very similar to where if you open up

11
00:00:35.906 --> 00:00:39.714
the console in a browser like this,
and you were able to interact.

12
00:00:39.714 --> 00:00:40.608
This is a REPL, right?

13
00:00:40.608 --> 00:00:44.546
So I can come in here and
I can do stuff like this, right?

14
00:00:44.546 --> 00:00:49.427
So we're gonna do the same thing, but
outside of the browser using Node.js.

15
00:00:49.427 --> 00:00:52.551
And the way that you can do that
is if you just go to your terminal

16
00:00:56.296 --> 00:00:58.356
Here we go, here is my terminal.

17
00:00:58.356 --> 00:01:05.058
I'm actually going to go over
to my folder, Am I here?

18
00:01:05.058 --> 00:01:05.632
I'm already in here.

19
00:01:05.632 --> 00:01:08.611
Okay, so I'll make this bigger.

20
00:01:08.611 --> 00:01:11.761
And what you can do is,
you can just run the Node.

21
00:01:11.761 --> 00:01:14.093
First of all, just to double
check you have Node installed,

22
00:01:14.093 --> 00:01:16.120
I recommend running which Node,
if you're on Mac.

23
00:01:16.120 --> 00:01:19.083
And it's gonna point to where
you have Node installed.

24
00:01:19.083 --> 00:01:22.838
You can see that I used nwm, so
it's installed in this nwm folder.

25
00:01:22.838 --> 00:01:26.330
If you installed it from the actual Node
source, you might see something like user

26
00:01:26.330 --> 00:01:28.873
bin if you're on Mac, and
you'll see it installed there.

27
00:01:28.873 --> 00:01:32.597
On Windows, I have no idea what it's
gonna say when you installed it, but

28
00:01:32.597 --> 00:01:34.232
just make sure that you have it.

29
00:01:34.232 --> 00:01:39.303
You can also just type in, node version,
and see what version of Node you have.

30
00:01:39.303 --> 00:01:40.340
Just to make sure it's there.

31
00:01:40.340 --> 00:01:42.455
If you're getting an error when
you type in the Node command,

32
00:01:42.455 --> 00:01:44.008
then it means it's not installed properly.

33
00:01:44.008 --> 00:01:46.625
So go back and follow those instructions.

34
00:01:46.625 --> 00:01:49.715
So once you do have it installed,
now we wanna execute on that REPL,

35
00:01:49.715 --> 00:01:52.879
we wanna turn it on, you can just type in,
node, with no arguments.

36
00:01:52.879 --> 00:01:55.794
And you should see something like this,
welcome to Node.js,

37
00:01:55.794 --> 00:01:57.719
followed by the version that you're on.

38
00:01:57.719 --> 00:02:00.507
And then you could do something I
call type "help" for information.

39
00:02:00.507 --> 00:02:02.539
But now we're in this prompt here,

40
00:02:02.539 --> 00:02:06.420
and it's pretty much console just
like I showed you in the browser.

41
00:02:06.420 --> 00:02:11.207
So if I wanted to make a variable
like this, you can see I have it,

42
00:02:11.207 --> 00:02:14.062
then I could actually just type it in.

43
00:02:14.062 --> 00:02:16.069
And before I even hit
Enter to execute this,

44
00:02:16.069 --> 00:02:20.044
it's giving me that auto-complete like,
there's the value of that variable.

45
00:02:20.044 --> 00:02:24.392
So as you can see, this is a great
place to prototype different things,

46
00:02:24.392 --> 00:02:27.085
try out different features in JavaScript.

47
00:02:27.085 --> 00:02:29.837
I like to use the REPL when
I'm doing something quick.

48
00:02:29.837 --> 00:02:32.484
I've even gotten to the point
where I'll use the REPL for

49
00:02:32.484 --> 00:02:35.575
a calculator versus opening up
the calculator app on my computer,

50
00:02:35.575 --> 00:02:39.106
because it's just faster to go into
terminal and type in, node and do math,

51
00:02:39.106 --> 00:02:41.621
than it is to like go on a calculator and
click things.

52
00:02:41.621 --> 00:02:45.044
So I use it for
a bunch of random stuff all the time.

53
00:02:45.044 --> 00:02:49.833
But you probably won't be using the Node
REPL to build any applications as you

54
00:02:49.833 --> 00:02:50.503
can tell.

55
00:02:50.503 --> 00:02:52.237
I mean, this isn't source code.

56
00:02:52.237 --> 00:02:54.373
This code isn't being
written to a file anywhere.

57
00:02:54.373 --> 00:02:56.636
You can check it in the Git or GitHub.

58
00:02:56.636 --> 00:03:00.947
So, yeah, you probably couldn't build an
application in a REPL, although I'm sure

59
00:03:00.947 --> 00:03:04.859
if you were to go search the internet,
someone's probably done this before.

60
00:03:04.859 --> 00:03:06.808
But that's probably not gonna be you, and

61
00:03:06.808 --> 00:03:09.204
I do not recommend trying to
build an app in the REPL.

62
00:03:09.204 --> 00:03:12.312
It's just a playground
to get some stuff going.

63
00:03:12.312 --> 00:03:18.423
And then to exit the REPL,
at least on the Mac, I can hit Control C.

64
00:03:18.423 --> 00:03:18.947
There we go.

65
00:03:18.947 --> 00:03:21.933
Press it again and it will exit for you.

66
00:03:21.933 --> 00:03:27.345
I think you can also just type in exit,
maybe, let's see if that works.

67
00:03:27.345 --> 00:03:28.397
Nope, exit does not work.

68
00:03:28.397 --> 00:03:29.694
That's some other REPL.

69
00:03:29.694 --> 00:03:31.046
I get all these REPLs mixed up.

70
00:03:31.046 --> 00:03:35.952
So yeah, I just hit control C to exit
that, and that way, I'm not inside of that

71
00:03:35.952 --> 00:03:40.517
REPL anymore, and now I'm back inside
of my terminal environment here.

72
00:03:40.517 --> 00:03:45.929
So, like I said, you don't wanna be
running a program inside the Node REPL for

73
00:03:45.929 --> 00:03:48.064
all the reasons that I stated.

74
00:03:48.064 --> 00:03:51.517
So the real way you wanna do it is,
you wanna put your code in a file,

75
00:03:51.517 --> 00:03:55.223
just like you've done your whole life,
your whole coding career, and

76
00:03:55.223 --> 00:03:58.024
we wanna execute that file
against the Node runtime.

77
00:03:58.024 --> 00:04:00.819
And this is where it
really gets interesting,

78
00:04:00.819 --> 00:04:05.981
because you're gonna find out that your VS
code or whatever text editor you're using

79
00:04:05.981 --> 00:04:10.870
doesn't really know what context your
JavaScript file is gonna be executed in.

80
00:04:10.870 --> 00:04:13.853
Is it gonna be executed in the browser?

81
00:04:13.853 --> 00:04:15.560
Is it gonna be executed on Node?

82
00:04:15.560 --> 00:04:20.351
Maybe it's executed on a mobile device,
because JavaScript is basically universal,

83
00:04:20.351 --> 00:04:22.951
it can be executed in
many different runtimes.

84
00:04:22.951 --> 00:04:27.888
So this is where it's very helpful for you
to understand when your JavaScript code is

85
00:04:27.888 --> 00:04:31.297
gonna be executed and
what environment it's gonna be in,

86
00:04:31.297 --> 00:04:35.469
because that's gonna determine what
features you have access to, and

87
00:04:35.469 --> 00:04:38.067
what you're able to do
inside of that code.

88
00:04:38.067 --> 00:04:41.347
So let's start with
actually creating a file.

89
00:04:41.347 --> 00:04:44.282
And then let's try to execute
that file with the Node runtime.

90
00:04:44.282 --> 00:04:47.420
So just make a new
folder on your computer.

91
00:04:47.420 --> 00:04:48.285
I already have one here.

92
00:04:48.285 --> 00:04:49.500
It's just a blank folder.

93
00:04:49.500 --> 00:04:51.377
I'm gonna open it in VS code.

94
00:04:51.377 --> 00:04:53.142
There's nothing in it.

95
00:04:53.142 --> 00:04:59.045
And I am actually just gonna make
a file here inside of this folder.

96
00:04:59.045 --> 00:05:01.300
I'm gonna call it index.js.

97
00:05:01.300 --> 00:05:02.991
And then what I'm gonna do is,

98
00:05:02.991 --> 00:05:06.452
let's try to do something we
would normally do in the browser.

99
00:05:06.452 --> 00:05:08.508
I'm actually just gonna do an alert here.

100
00:05:08.508 --> 00:05:10.685
And I'm gonna say, hello, right?

101
00:05:10.685 --> 00:05:12.100
This will totally work in the browser.

102
00:05:12.100 --> 00:05:16.664
We know if we went to the browser
right now, and we typed in, alert,

103
00:05:16.664 --> 00:05:18.357
this definitely works.

104
00:05:20.537 --> 00:05:21.452
Right?

105
00:05:21.452 --> 00:05:24.267
And like I said, Node.js is JavaScript.

106
00:05:24.267 --> 00:05:27.355
So if alert works in the browser,
and that's JavaScript,

107
00:05:27.355 --> 00:05:31.268
then alert should also work in Node.js,
because that too is JavaScript.

108
00:05:31.268 --> 00:05:32.172
So let's give it a try.

109
00:05:32.172 --> 00:05:38.154
So I'm gonna go back to my editor,
type in, alert, go back to my terminal.

110
00:05:38.154 --> 00:05:42.707
And then to execute this file in
the Node.js runtime, I just type in, node,

111
00:05:42.707 --> 00:05:46.580
just like we did with the REPL,
followed by the path to that file.

112
00:05:46.580 --> 00:05:49.359
So I'm already inside of
my files directory here, so

113
00:05:49.359 --> 00:05:52.276
it's gonna be relative and
this is gonna be index.js.

114
00:05:52.276 --> 00:05:54.271
And then I can type in, enter.

115
00:05:54.271 --> 00:05:57.093
And immediately, I get an error here.

116
00:05:57.093 --> 00:05:59.145
So you can see that I
get this thing called,

117
00:05:59.145 --> 00:06:01.140
ReferenceError: alert is not defined.

118
00:06:01.140 --> 00:06:03.908
And these are the differences
that I'm talking about.

119
00:06:03.908 --> 00:06:07.364
This is why it's very important to
understand where you're gonna be

120
00:06:07.364 --> 00:06:11.595
executing your JavaScript code because
the same JavaScript could work differently

121
00:06:11.595 --> 00:06:13.994
depending on the environment
that you're in.

122
00:06:13.994 --> 00:06:18.184
I could take this same file and add it
to a script tag in a browser app and

123
00:06:18.184 --> 00:06:19.927
it would work totally fine.

124
00:06:19.927 --> 00:06:23.451
You probably shouldn't have an alert on
your site, unless you want people to go

125
00:06:23.451 --> 00:06:26.938
running away screaming because it looks
like spam, but it will work, right?

126
00:06:26.938 --> 00:06:30.581
But it's not gonna work here in Node,
because there is no alert.

127
00:06:30.581 --> 00:06:32.800
Node doesn't have a user interface.

128
00:06:32.800 --> 00:06:34.565
There's something visual to Node.

129
00:06:34.565 --> 00:06:37.727
It's running on your operating
system in the background.

130
00:06:37.727 --> 00:06:38.807
There's no CSS.

131
00:06:38.807 --> 00:06:40.012
There's no DOM.

132
00:06:40.012 --> 00:06:42.672
There is nothing visual about Node.js.

133
00:06:42.672 --> 00:06:45.101
It's a OS level language.

134
00:06:45.101 --> 00:06:46.965
So we don't have access
to something like alert.

135
00:06:46.965 --> 00:06:48.970
And even if we did,
what would you expect it to do?

136
00:06:48.970 --> 00:06:53.018
Would you expect to see a notification
pop-up on your computer?

137
00:06:53.018 --> 00:06:55.755
Because actually, that would be pretty
dope and someone should make that,

138
00:06:55.755 --> 00:06:56.747
if they haven't already.

139
00:06:56.747 --> 00:06:58.991
But no, it doesn't do that.

140
00:06:58.991 --> 00:07:02.597
So, these are some of the differences
that we're going to discover.

141
00:07:02.597 --> 00:07:06.207
So let's actually do something that we
can do in Node that does also work in

142
00:07:06.207 --> 00:07:06.914
the browser.

143
00:07:06.914 --> 00:07:13.520
And it's gonna be our favorite friend,
console.log, right?

144
00:07:13.520 --> 00:07:15.021
I can't live without console.log.

145
00:07:15.021 --> 00:07:17.869
So I don't know how much y'all use
console.log, but I cannot live without it.

146
00:07:17.869 --> 00:07:19.807
It's basically how I debug everything.

147
00:07:19.807 --> 00:07:25.313
I have solved many
crises with console.log.

148
00:07:25.313 --> 00:07:30.053
So let's try to see if it
works here in Node.js.

149
00:07:30.053 --> 00:07:32.592
And you can see,
we do get that message, hello.

150
00:07:32.592 --> 00:07:35.105
So the console.log works just fine here.

151
00:07:35.105 --> 00:07:38.132
So this is where it gets tricky, it's
like, well, what works in the browser and

152
00:07:38.132 --> 00:07:39.476
what doesn't work in the browser?

153
00:07:39.476 --> 00:07:42.132
What works in Node and
what doesn't work in Node?

154
00:07:42.132 --> 00:07:44.437
The answer is, it depends.

155
00:07:44.437 --> 00:07:48.505
If it's usually something with UI facing,
anything with the DOM, anything like that,

156
00:07:48.505 --> 00:07:50.783
like querying a DOM elements,
things like that,

157
00:07:50.783 --> 00:07:53.624
it's not gonna work in Node
because there's nothing there.

158
00:07:53.624 --> 00:07:54.971
And then on the flip side,

159
00:07:54.971 --> 00:07:57.790
if there's usually something
to do with file system or

160
00:07:57.790 --> 00:08:02.164
any OS level things like networking, it's
probably not gonna work in the browser.

161
00:08:02.164 --> 00:08:03.484
So I can tell you right now,

162
00:08:03.484 --> 00:08:06.827
I don't think anyone remembers all
the different things that work.

163
00:08:06.827 --> 00:08:10.583
It's more about just, you do this enough,
you do a lot of trial and error,

164
00:08:10.583 --> 00:08:13.448
you understand what each
environment has access to, and

165
00:08:13.448 --> 00:08:15.135
you can figure it out from there.

166
00:08:15.135 --> 00:08:17.983
Besides, the computer will tell you when
you're wrong, so you don't have to guess.

167
00:08:17.983 --> 00:08:21.230
It'll literally just, as you saw, will
tell you if this doesn't work here and

168
00:08:21.230 --> 00:08:22.300
that's when you'll know

