WEBVTT

1
00:00:00.060 --> 00:00:02.199
Let's kind of talk about
the environment of Node.

2
00:00:02.199 --> 00:00:06.360
I scratched the surface about some of the
differences in the browser versus Node.js,

3
00:00:06.360 --> 00:00:08.587
but I really wanna dig
in a little deeper here.

4
00:00:08.587 --> 00:00:12.493
And talk about some of the globals
that we get access to.

5
00:00:12.493 --> 00:00:14.226
Which are gonna be super helpful for

6
00:00:14.226 --> 00:00:16.950
us when we're developing
our apps inside of Node.js.

7
00:00:16.950 --> 00:00:20.767
So like the browser, Node.js does
come with some practical globals for

8
00:00:20.767 --> 00:00:22.091
us in our applications.

9
00:00:22.091 --> 00:00:23.024
Not as many.

10
00:00:23.024 --> 00:00:27.747
If you go to the browser,
anyone ever did window,

11
00:00:27.747 --> 00:00:32.140
and then hit dot and
just go through this list?

12
00:00:32.140 --> 00:00:33.382
That scrollbar's barely moving.

13
00:00:33.382 --> 00:00:36.420
There's a lot of stuff on the window.

14
00:00:36.420 --> 00:00:39.377
So they're not gonna have this
much stuff on the global in Node.

15
00:00:39.377 --> 00:00:43.810
But yeah, there are some globals in
there that we will be talking about.

16
00:00:43.810 --> 00:00:48.553
So some of the ones that I wanted to
mention was literally this thing called

17
00:00:48.553 --> 00:00:49.172
global.

18
00:00:49.172 --> 00:00:53.872
So if I go to Node and
I say console.log(global), I mean,

19
00:00:53.872 --> 00:00:56.462
it's literally called global.

20
00:00:56.462 --> 00:00:59.243
And I execute this in the terminal,

21
00:00:59.243 --> 00:01:04.170
we get this strange looking object
with some crazy stuff on it.

22
00:01:04.170 --> 00:01:08.503
This is just what the terminal, or this is
what Node is representing it as we log it.

23
00:01:08.503 --> 00:01:09.477
But at the end of the day,

24
00:01:09.477 --> 00:01:11.860
it's just an object with some
familiar properties on them.

25
00:01:11.860 --> 00:01:16.481
You've probably heard of clearInterval and
clearTimeout, setTimeout, setInterval.

26
00:01:16.481 --> 00:01:19.433
Those exists in the browser.

27
00:01:19.433 --> 00:01:22.183
And they work pretty much
the same way here as well.

28
00:01:22.183 --> 00:01:26.713
Then you might see some other stuff like
queueMicrotask and setImmediate, and

29
00:01:26.713 --> 00:01:27.802
things like that.

30
00:01:27.802 --> 00:01:31.982
And that has to do with kinda how
the event loop works in Node.js.

31
00:01:31.982 --> 00:01:35.449
Which is something that we
will talk about a little bit.

32
00:01:35.449 --> 00:01:37.888
But we won't really go into
detail about the event loop.

33
00:01:37.888 --> 00:01:41.498
Because I don't think it's that
important when you're learning Node.js.

34
00:01:41.498 --> 00:01:44.233
I do think it is important when
you're trying to get the best out of

35
00:01:44.233 --> 00:01:45.146
Node.js, though.

36
00:01:45.146 --> 00:01:48.782
And you can actually look at other
courses we have on Frontend Masters where

37
00:01:48.782 --> 00:01:49.770
we talk about that.

38
00:01:49.770 --> 00:01:51.656
So, yeah,
you have something called global, here.

39
00:01:51.656 --> 00:01:53.464
That's got some really nice things.

40
00:01:53.464 --> 00:01:57.249
And then if we go back to
our documentation website,

41
00:01:57.249 --> 00:02:03.368
there's this other thing called __dirname,
and then the equivalent filename.

42
00:02:03.368 --> 00:02:07.448
And these two globals are very helpful
because they give you the current

43
00:02:07.448 --> 00:02:11.333
directory name or the current file
name that you're executing in.

44
00:02:11.333 --> 00:02:13.073
So what does that actually mean?

45
00:02:13.073 --> 00:02:18.220
Well, if I go back to my code here and
I console.log(__dirname,

46
00:02:18.220 --> 00:02:22.834
_filename), and I run these,
you can see for the dirname,

47
00:02:22.834 --> 00:02:26.770
it's literally the path to
the folder that I'm in.

48
00:02:26.770 --> 00:02:31.030
It's the directory name relative
to the file that got executed.

49
00:02:31.030 --> 00:02:35.450
And then a filename is the file
that you wrote that variable in.

50
00:02:35.450 --> 00:02:36.928
So this is very helpful.

51
00:02:36.928 --> 00:02:41.305
Because as you'll see, in Node.js,
or any OS level-based language,

52
00:02:41.305 --> 00:02:44.562
you're gonna be interacting
with files quite often.

53
00:02:44.562 --> 00:02:46.176
Whether it's you're uploading an image.

54
00:02:46.176 --> 00:02:48.928
Whether writing to a configuration file.

55
00:02:48.928 --> 00:02:52.058
Or reading a configuration file, or
environment variables, there's just so

56
00:02:52.058 --> 00:02:53.835
many times you're interacting with files,

57
00:02:53.835 --> 00:02:56.188
especially if you're building
a build tool like Webpack.

58
00:02:56.188 --> 00:02:58.010
You're literally only
interacting with files.

59
00:02:58.010 --> 00:03:02.774
So getting these paths right is gonna
be crucial to you being able to develop

60
00:03:02.774 --> 00:03:03.310
those.

61
00:03:03.310 --> 00:03:05.921
So these two globals
are extremely helpful.

62
00:03:08.937 --> 00:03:10.836
We have something called process,

63
00:03:10.836 --> 00:03:14.456
which I probably ague is the most
helpful thing inside of Node.js.

64
00:03:14.456 --> 00:03:18.830
And this is when you start to
understand the power of Node.js

65
00:03:18.830 --> 00:03:20.560
compared to a browser.

66
00:03:20.560 --> 00:03:22.550
Which is also powerful in it own right,
but

67
00:03:22.550 --> 00:03:24.438
you can see just how different they are.

68
00:03:24.438 --> 00:03:29.791
So we go to handy log over here and
we check out the process object and

69
00:03:29.791 --> 00:03:34.870
we log this, I hope I'm not going to wait,
do I wanna log this?

70
00:03:34.870 --> 00:03:37.650
I wonder if it's going to show
anything that I don't wanna show.

71
00:03:37.650 --> 00:03:38.848
I don't know.
Let's see,

72
00:03:38.848 --> 00:03:41.401
there's a lot of stuff on the process,
okay.

73
00:03:41.401 --> 00:03:42.538
So the process,

74
00:03:42.538 --> 00:03:47.261
it's the object where everything
about the environment is stored.

75
00:03:47.261 --> 00:03:51.991
So you'll see what platform,
you're on the version of Node,

76
00:03:51.991 --> 00:03:54.234
different internal things.

77
00:03:54.234 --> 00:03:57.519
One of the most important
things that you'll see is gonna

78
00:03:57.519 --> 00:04:01.148
be environment variables,
which is somewhere on here.

79
00:04:01.148 --> 00:04:01.990
Here we go.

80
00:04:01.990 --> 00:04:04.250
So that's what I didn't wanna show,
is those environment rebels.

81
00:04:04.250 --> 00:04:08.981
So you gonna see global environment
variables that are exposed on

82
00:04:08.981 --> 00:04:10.191
your computer.

83
00:04:10.191 --> 00:04:13.033
Which is super helpful when you're
deploying a server or something like that.

84
00:04:13.033 --> 00:04:16.762
Because you don't wanna have your
secrets out in your GitHub repo and

85
00:04:16.762 --> 00:04:19.023
really tick someone off at your company.

86
00:04:19.023 --> 00:04:22.583
You wanna put those somewhere in an
environment and have them be injected in.

87
00:04:22.583 --> 00:04:26.445
And you access those environment
variables through the process.

88
00:04:26.445 --> 00:04:30.193
So if you've ever like written some
React thing somewhere and they had you

89
00:04:30.193 --> 00:04:34.620
process.env.something, and you really
know what that was, that's what this is.

90
00:04:34.620 --> 00:04:39.530
You're reading the process from
the environment that the built tool that's

91
00:04:39.530 --> 00:04:41.957
processing your React is running in.

92
00:04:41.957 --> 00:04:43.660
So, yeah, that was pretty meta.

93
00:04:43.660 --> 00:04:45.904
But yes, your build tools run in Node and

94
00:04:45.904 --> 00:04:49.142
they process your frontend
before the browser sees them.

95
00:04:49.142 --> 00:04:52.113
And because they are in Node,
they have access to the process,

96
00:04:52.113 --> 00:04:54.762
which gives them access to
the environment variables.

97
00:04:54.762 --> 00:04:58.922
And that's how you're able to embed
different environment variables inside of

98
00:04:58.922 --> 00:05:01.625
a frontend app before it
gets deployed to a website.

99
00:05:01.625 --> 00:05:04.519
That's it, so
a lot of cool stuff here on the process.

100
00:05:04.519 --> 00:05:07.014
And we'll be talking a little
more about that later.

101
00:05:09.201 --> 00:05:12.402
And then you have these
things with modules.

102
00:05:12.402 --> 00:05:14.975
And we're gonna get some modules,

103
00:05:14.975 --> 00:05:19.538
because right now modules are in
a exciting phase in Node.js.

104
00:05:19.538 --> 00:05:23.480
And we're gonna be using
the latest version of the modules.

105
00:05:23.480 --> 00:05:26.659
But I do wanna talk about the few here.

106
00:05:26.659 --> 00:05:30.893
So we have exports, we have module,
and we have require.

107
00:05:30.893 --> 00:05:33.886
And these are globals
that are gonna used for,

108
00:05:33.886 --> 00:05:37.507
I would say,
the old module syntax inside of Node.js.

109
00:05:37.507 --> 00:05:39.165
And like I said,
we're gonna talk about it more.

110
00:05:39.165 --> 00:05:41.478
But it's nice to know what these are.

111
00:05:41.478 --> 00:05:42.950
And we're gonna dive in.

112
00:05:42.950 --> 00:05:45.482
But yeah,
you're gonna see this a lot in Node.js.

113
00:05:45.482 --> 00:05:48.980
They get injected into the environment for
you.

114
00:05:48.980 --> 00:05:51.359
You don't have to worry about
importing them or anything like that.

115
00:05:51.359 --> 00:05:52.820
They're just there available.

116
00:05:52.820 --> 00:05:57.087
And they're used so you can create
your own modules and expose them and

117
00:05:57.087 --> 00:05:57.892
share them.

118
00:05:57.892 --> 00:06:00.440
And deploy them, publish them,
whatever you want.

119
00:06:00.440 --> 00:06:03.133
So, yes,
we're gonna check those out as well.

120
00:06:03.133 --> 00:06:04.384
And then like I said,

121
00:06:04.384 --> 00:06:09.196
there's really just a lot of stuff in the
global space that we didn't talk about.

122
00:06:09.196 --> 00:06:13.001
I put a link here to the documentation
website that goes over all the stuff.

123
00:06:13.001 --> 00:06:14.660
Because, just like the browser,

124
00:06:14.660 --> 00:06:17.470
you don't need to know
everything that's on the window.

125
00:06:17.470 --> 00:06:19.610
Just like you don't need
to know all of this stuff.

126
00:06:19.610 --> 00:06:22.810
You're probably won't even
use half of it to be honest.

127
00:06:22.810 --> 00:06:24.813
Especially if you're using
the new module syntax,

128
00:06:24.813 --> 00:06:26.322
you won't even use a lot of this stuff.

129
00:06:26.322 --> 00:06:29.713
And you most likely will be
using packages that you install,

130
00:06:29.713 --> 00:06:31.585
which we also are going to cover.

131
00:06:33.250 --> 00:06:36.830
Any questions on globals and
global objects and

132
00:06:36.830 --> 00:06:40.148
variables inside of the Node.js runtime?

