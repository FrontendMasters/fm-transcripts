WEBVTT

1
00:00:00.000 --> 00:00:03.677
Let's move on to the file system where we
do have a couple exercises that you'll be

2
00:00:03.677 --> 00:00:04.440
going through.

3
00:00:04.440 --> 00:00:09.202
And this is where you're going to start
to see just how strong node JS is

4
00:00:09.202 --> 00:00:13.966
compared to or how strong an OS level
up OS level language is compared to

5
00:00:13.966 --> 00:00:18.526
like a browser based Language and
all the things you get access to.

6
00:00:18.526 --> 00:00:20.535
So, file system.

7
00:00:20.535 --> 00:00:25.246
Until node JS there really wasn't
a great way to access the file system in

8
00:00:25.246 --> 00:00:26.181
JavaScript.

9
00:00:26.181 --> 00:00:29.562
I'm sure there was, but it precedes me.

10
00:00:29.562 --> 00:00:32.370
A lot of time I started learning
to program there was no JS.

11
00:00:32.370 --> 00:00:34.413
It was early but it was around.

12
00:00:34.413 --> 00:00:37.980
So I don't know how you would have
access the file system with JavaScript

13
00:00:37.980 --> 00:00:41.738
before no GS because JavaScript didn't
really run outside of the browser.

14
00:00:41.738 --> 00:00:45.257
You can maybe click a button and upload
a file if the user selected it, but you

15
00:00:45.257 --> 00:00:49.329
couldn't go query someone's file system in
the browser that would be a security risk.

16
00:00:49.329 --> 00:00:53.403
So I don't think there was a really good
way to access someone's file system or

17
00:00:53.403 --> 00:00:56.323
a machines file system with
JavaScript before node JS.

18
00:00:56.323 --> 00:00:58.097
And that's really powerful.

19
00:00:58.097 --> 00:01:02.357
But now that no GS is here,
just like any other OS level language,

20
00:01:02.357 --> 00:01:04.686
we do get access to the file system.

21
00:01:04.686 --> 00:01:08.555
And it's crazy because like when I
first started learning about that I was

22
00:01:08.555 --> 00:01:11.064
like okay, cool, so
I can do stuff with a file.

23
00:01:11.064 --> 00:01:13.929
I don't have any interesting
files on my computer a lot.

24
00:01:13.929 --> 00:01:15.978
Honestly, why this is a big deal.

25
00:01:15.978 --> 00:01:18.653
But if you think about all
the tools that you use,

26
00:01:18.653 --> 00:01:21.402
especially anything as
far as front end tooling.

27
00:01:21.402 --> 00:01:27.015
It's all just, implementation or
an abstraction around the file system.

28
00:01:27.015 --> 00:01:30.291
And that's how you get like some
of those magical workflows.

29
00:01:30.291 --> 00:01:33.032
Some of those things you can't live
without, they just like, I'm so

30
00:01:33.032 --> 00:01:34.851
glad that that did that for
me to clean this up.

31
00:01:34.851 --> 00:01:38.175
It's shortened this and
concatenated that it joined this.

32
00:01:38.175 --> 00:01:42.964
Those are file system projects and
it's a very powerful tool to have.

33
00:01:42.964 --> 00:01:47.471
So what we're going to do is
we're going to create a simple

34
00:01:47.471 --> 00:01:50.886
templating solution with the file system.

35
00:01:50.886 --> 00:01:54.023
We're going to like render
some html on the page, but

36
00:01:54.023 --> 00:01:55.846
not until we process it first.

37
00:01:55.846 --> 00:01:59.908
Which is very similar to something you
would do on Webpack or Babel, or any other

38
00:01:59.908 --> 00:02:04.114
tool that you use to build your react or
whatever front end language that you have.

39
00:02:04.114 --> 00:02:05.818
Feel free to follow along.

40
00:02:05.818 --> 00:02:09.914
If you don't want follow along I do
have all the code we would be using you

41
00:02:09.914 --> 00:02:13.416
can copy and paste it to recon
from the cuorse tha I have here.

42
00:02:13.416 --> 00:02:17.481
So first we want to understand FS module.

43
00:02:17.481 --> 00:02:20.277
So I'm gonna go back to the project here.

44
00:02:20.277 --> 00:02:25.362
And am going to just going to
leave this staff outside here.

45
00:02:25.362 --> 00:02:28.355
And I`m gonna rename this
to MJS cuz like I said,

46
00:02:28.355 --> 00:02:30.622
I'm going to use MJS going forward.

47
00:02:30.622 --> 00:02:32.563
If you don't wanna use MJS that's fine.

48
00:02:32.563 --> 00:02:34.909
Just know that all my exercises
are going to use MJS.

49
00:02:34.909 --> 00:02:36.600
I'm gonna use the latest modules.

50
00:02:36.600 --> 00:02:39.155
If you like common JS, so
if you want to do it, go ahead and do it.

51
00:02:39.155 --> 00:02:42.275
I just won't be doing that going forward.

52
00:02:42.275 --> 00:02:46.226
So first thing I want to do is
understand the file system.

53
00:02:46.226 --> 00:02:50.972
So we import FS from FS,
which stands for file system.

54
00:02:50.972 --> 00:02:57.949
We get access to this super
awesome package here.

55
00:02:57.949 --> 00:02:59.289
Let's log this out right quick.

56
00:02:59.289 --> 00:03:00.132
Oops!.

57
00:03:00.132 --> 00:03:03.657
I can spell con after that log,
there we go.

58
00:03:03.657 --> 00:03:06.125
You can see, we get a bunch of stuff here.

59
00:03:06.125 --> 00:03:08.908
A bunch of really cool methods,
always like to log stuff.

60
00:03:08.908 --> 00:03:12.099
You can see,
we have things like a pin file,

61
00:03:12.099 --> 00:03:15.040
a pin file, sync access, access sync.

62
00:03:15.040 --> 00:03:18.921
As shown or I don't know how you
actually pronounce that, but

63
00:03:18.921 --> 00:03:22.667
always just always pronounce it like,
chown or whatever.

64
00:03:22.667 --> 00:03:26.022
But it's a file manipulation
permission handler thing.

65
00:03:26.022 --> 00:03:29.015
Close, copy, exists all this stuff.

66
00:03:29.015 --> 00:03:31.766
And you can see there's always
like a sync version of it.

67
00:03:31.766 --> 00:03:32.712
That's really interesting.

68
00:03:32.712 --> 00:03:35.876
And that really just comes
down to like how no MJS works.

69
00:03:35.876 --> 00:03:38.991
So If you don't use the sync
version of a file system method,

70
00:03:38.991 --> 00:03:40.709
it's going to be asynchronous.

71
00:03:40.709 --> 00:03:45.168
As in, it's going to be set aside in
the event loop to be processed on

72
00:03:45.168 --> 00:03:47.062
the next tick at some point.

73
00:03:47.062 --> 00:03:50.860
Because it's a synchronous, we're going
to continue to accept input throughout

74
00:03:50.860 --> 00:03:54.349
this node execution while this thing
is being processed in the background.

75
00:03:54.349 --> 00:03:57.677
And the node will notify us
via callback when it's done.

76
00:03:57.677 --> 00:03:59.873
So that's the asynchronous version.

77
00:03:59.873 --> 00:04:03.275
If you prefer to block
the process of node as in,

78
00:04:03.275 --> 00:04:07.881
hey, do not do not move forward,
do not process any other code.

79
00:04:07.881 --> 00:04:11.202
Do not accept any other
input until this is done,

80
00:04:11.202 --> 00:04:13.714
then you would use the sync version.

81
00:04:13.714 --> 00:04:17.312
And in most cases you probably would
never use the sink version of anything

82
00:04:17.312 --> 00:04:17.960
and node JS.

83
00:04:17.960 --> 00:04:22.175
There are some rare ones where you
literally don't want anything to happen.

84
00:04:22.175 --> 00:04:25.715
Typically like on a server startup,
or some initialization,

85
00:04:25.715 --> 00:04:29.654
where you just want everything to be
done before the next thing happens

86
00:04:29.654 --> 00:04:31.420
because it only happens once.

87
00:04:31.420 --> 00:04:32.326
That's when you would do it.

88
00:04:32.326 --> 00:04:35.758
But if you're already like executing
a server or something like that,

89
00:04:35.758 --> 00:04:39.660
you probably don't want one request coming
in and blocking your entire server.

90
00:04:39.660 --> 00:04:42.409
So no one else can actually
hit your server because

91
00:04:42.409 --> 00:04:44.383
you're trying to upload an image.

92
00:04:44.383 --> 00:04:45.840
So you probably don't wanna do that.

93
00:04:45.840 --> 00:04:49.584
So you typically will opt for
the async methods.

94
00:04:49.584 --> 00:04:52.197
Have these file systems,
these filesystem methods,

95
00:04:52.197 --> 00:04:55.111
which are the ones that don't
have the word sync after them.

96
00:04:55.111 --> 00:04:57.862
So like I said,
there's a lot of interesting ones here.

97
00:04:57.862 --> 00:05:01.541
The ones that we're going to be interested
in are going to be the read file and

98
00:05:01.541 --> 00:05:02.240
a write file.

99
00:05:02.240 --> 00:05:04.393
And we are going to use the async ones.

100
00:05:04.393 --> 00:05:08.857
And actually Fs was just updated
to include not only do they have

101
00:05:08.857 --> 00:05:13.911
the async ones, but they actually gave
us this nice path to the FS module

102
00:05:13.911 --> 00:05:18.481
that has the a sync ones that
are already wrapped with promises.

103
00:05:18.481 --> 00:05:20.561
Because before they were actually,

104
00:05:20.561 --> 00:05:23.524
you have to use them with callbacks,
which is cool.

105
00:05:23.524 --> 00:05:26.904
But promises are better because we can
a sync await them, which is amazing.

106
00:05:26.904 --> 00:05:29.590
So we're actually going to
import from Fs/promises.

107
00:05:29.590 --> 00:05:34.101
That way we get the permissive ide
versions of the methods that we want.

108
00:05:34.101 --> 00:05:35.421
So now that we got that,

109
00:05:35.421 --> 00:05:38.988
the next thing we need to do is
let's just get our template file.

110
00:05:38.988 --> 00:05:41.111
So we're gonna copy this html here.

111
00:05:41.111 --> 00:05:43.554
Looks like standard html,
but it's a little different.

112
00:05:43.554 --> 00:05:46.279
And I'm gonna tell you why
I will make a new file.

113
00:05:46.279 --> 00:05:49.194
And I'm gonna call it template.html.

114
00:05:49.194 --> 00:05:50.771
And I'm gonna paste it in here.

115
00:05:50.771 --> 00:05:55.475
So it looks like an HTML file, except
if you go look at, line 9 and Line 10.

116
00:05:55.475 --> 00:05:58.685
You can see if you use any
type of JavaScript framework,

117
00:05:58.685 --> 00:06:02.180
you notice that this looks like
some type of interpolation.

118
00:06:02.180 --> 00:06:04.838
This looks like what JSX
would have in the brackets.

119
00:06:04.838 --> 00:06:06.974
This is where you would
insert some JavaScript.

120
00:06:06.974 --> 00:06:09.402
That's exactly right, because that's
exactly what we're about to do.

121
00:06:09.402 --> 00:06:13.970
We're about to process this file,
and we're going to replace these

122
00:06:13.970 --> 00:06:18.641
placeholder variables with actual
JavaScript values using node JS.

123
00:06:18.641 --> 00:06:22.690
So very similar to what you would have in
JSX, or Angular, or view, or svelte, or

124
00:06:22.690 --> 00:06:24.244
whatever framework you want.

125
00:06:24.244 --> 00:06:27.819
We're gonna interpolate these
values via node.js without

126
00:06:27.819 --> 00:06:30.000
actually executing it in a browser.

127
00:06:30.000 --> 00:06:35.957
So in order to do that, we first
need to import that will not import.

128
00:06:35.957 --> 00:06:37.658
We need to read the file,

129
00:06:37.658 --> 00:06:41.714
we need to get the string
representation of that HTML file.

130
00:06:41.714 --> 00:06:45.984
That way we can find the variables that
we want to replace and replace them.

131
00:06:45.984 --> 00:06:47.247
So let's do that.

132
00:06:47.247 --> 00:06:51.372
We're going to use the read
file method from Fs.

133
00:06:51.372 --> 00:06:55.076
And I'm just going to go ahead and
destructor up here because it's a named

134
00:06:55.076 --> 00:06:57.730
import and
I'm going to call it Read file like that.

135
00:06:57.730 --> 00:06:59.570
So you can do that.

136
00:06:59.570 --> 00:07:02.870
And then what I'm gonna do is
I'm going to read the file.

137
00:07:02.870 --> 00:07:07.391
So I'm gonna say const file or
let's call it template equals.

138
00:07:07.391 --> 00:07:13.138
And I'm gonna await this because read
file is a promise returning function and

139
00:07:13.138 --> 00:07:17.507
the latest version of node we
do have access to async await.

140
00:07:17.507 --> 00:07:20.438
And I can actually use it on a route
like this without having to wrap it

141
00:07:20.438 --> 00:07:22.196
in a function which is also really cool.

142
00:07:22.196 --> 00:07:25.065
So I can say await, read file.

143
00:07:25.065 --> 00:07:27.417
And then read file takes in.

144
00:07:27.417 --> 00:07:29.885
In this case,
we're gonna pass in two arguments.

145
00:07:29.885 --> 00:07:35.155
The first one needs to be the absolute
path to the file that you want to read.

146
00:07:35.155 --> 00:07:40.114
Typically what you would see in
a common JS implementation is

147
00:07:40.114 --> 00:07:43.722
you will see someone
import path from path.

148
00:07:43.722 --> 00:07:48.622
And then they will do
something like path.join.

149
00:07:48.622 --> 00:07:53.157
And then they would say I wanna
join from this directory name over

150
00:07:53.157 --> 00:07:54.924
to the template.html.

151
00:07:54.924 --> 00:07:58.249
And this this will totally
work back in comma js.

152
00:07:58.249 --> 00:08:00.188
So we try to execute this now, you'll see.

153
00:08:01.780 --> 00:08:02.460
It's not gonna work.

154
00:08:02.460 --> 00:08:05.350
And that's because
__dirname is not defined.

155
00:08:05.350 --> 00:08:08.191
And I know it's said that
__dirname is a global, and it is.

156
00:08:08.191 --> 00:08:08.969
I didn't lie to you.

157
00:08:08.969 --> 00:08:10.120
It definitely is.

158
00:08:10.120 --> 00:08:14.098
But only when you use CommonJS, you
actually don't get access to __dirname or

159
00:08:14.098 --> 00:08:15.690
filename inside of model.js.

160
00:08:15.690 --> 00:08:20.040
I found this out a couple months ago, and
it's caused a really big bug in my app.

161
00:08:20.040 --> 00:08:22.872
This is why I said yeah,
just switching over to njs, and

162
00:08:22.872 --> 00:08:25.603
just think that it's gonna work,
it's not really.

163
00:08:25.603 --> 00:08:28.487
You gotta go in and fix all this
stuff on a case by case basis,

164
00:08:28.487 --> 00:08:32.550
because you get stuff like this, such
a big variable that doesn't exist anymore.

165
00:08:32.550 --> 00:08:34.720
Yeah, you're probably gonna
have to make some changes.

166
00:08:34.720 --> 00:08:39.667
And the change that we're gonna
make is we're going to use,

167
00:08:39.667 --> 00:08:45.010
fortunately for us,
readFile also takes in a URL object.

168
00:08:45.010 --> 00:08:50.010
And we could construct a absolute path
using the new URL implementation.

169
00:08:50.010 --> 00:08:53.594
So we can say a new URL like this.

170
00:08:53.594 --> 00:08:56.060
And what this is gonna
take is two arguments.

171
00:08:56.060 --> 00:09:02.615
The first one is gonna be the basic,
the relative.

172
00:09:02.615 --> 00:09:04.910
It's basically gonna be
the file name that we want.

173
00:09:04.910 --> 00:09:06.604
So it's gonna be what do we want?

174
00:09:06.604 --> 00:09:09.773
We want template.html,
so we wanna go there.

175
00:09:09.773 --> 00:09:11.735
But then we wanna set the base,

176
00:09:11.735 --> 00:09:15.673
which is going to be we're gonna
grab something from import.

177
00:09:15.673 --> 00:09:19.942
So it's gonna be import.meta.url.

178
00:09:19.942 --> 00:09:22.842
That's just basically if we log this,
I'll show you what this is.

179
00:09:25.504 --> 00:09:28.166
Little bit of that, so
let's say console.log.

180
00:09:29.684 --> 00:09:33.011
That, and then we might as well also just,
yeah, we'll just log that,

181
00:09:33.011 --> 00:09:34.276
so you can see what that is.

182
00:09:34.276 --> 00:09:37.390
And you can see it's literally
the path to this file.

183
00:09:37.390 --> 00:09:39.703
It's the absolute path to this file, so

184
00:09:39.703 --> 00:09:42.845
that's gonna be the base of
where we want to load from.

185
00:09:42.845 --> 00:09:45.121
And then we're gonna pass
in template.html here, so

186
00:09:45.121 --> 00:09:47.430
it's gonna be relative to that file.

187
00:09:47.430 --> 00:09:52.405
And now when we run this,
I'm going to get rid of that log, and

188
00:09:52.405 --> 00:09:55.490
I'm gonna console.log template.

189
00:09:55.490 --> 00:10:00.032
We should see some strange
output here probably, exactly.

190
00:10:00.032 --> 00:10:02.380
So we see this thing called a buffer.

191
00:10:02.380 --> 00:10:08.608
A buffer, it's like the little individual
bits of, in this case, a file.

192
00:10:08.608 --> 00:10:10.508
It's all the little bits
that make up a file.

193
00:10:10.508 --> 00:10:13.346
It's not a string, it's implementation.

194
00:10:13.346 --> 00:10:16.420
It's when you want to stream something.

195
00:10:16.420 --> 00:10:20.211
And in that case,
imagine that this file was a gigabyte.

196
00:10:20.211 --> 00:10:22.145
If we read this file in Node.js and

197
00:10:22.145 --> 00:10:25.515
loaded it up, we would have to
load up a gigabyte in memory.

198
00:10:25.515 --> 00:10:27.942
And I don't know if that's
something you wanna do,

199
00:10:27.942 --> 00:10:30.090
especially if you have multiple files.

200
00:10:30.090 --> 00:10:33.920
So it's better to just
stream them bit by bit.

201
00:10:33.920 --> 00:10:38.130
And that's what a buffer is,
it's literally streaming the file.

202
00:10:38.130 --> 00:10:40.409
But this isn't useful if we
need to do some processing,

203
00:10:40.409 --> 00:10:43.230
unless you wanna do a process on a buffer,
which I don't.

204
00:10:43.230 --> 00:10:44.966
So we need to convert this to a string.

205
00:10:44.966 --> 00:10:48.200
And then we can actually look at those
variables, those placeholders, and

206
00:10:48.200 --> 00:10:50.470
we can interpolate them
with actual values.

207
00:10:50.470 --> 00:10:51.519
So that's what we'll do.

208
00:10:51.519 --> 00:10:52.939
We got a couple ways to do this.

209
00:10:52.939 --> 00:10:55.506
We could just call toString on a template.

210
00:10:55.506 --> 00:10:57.850
And now that I actually just
converted it to a string,

211
00:10:57.850 --> 00:11:00.417
because buffers have a toString method,
and that works.

212
00:11:00.417 --> 00:11:03.624
And you can see we get
our HTML back just fine.

213
00:11:03.624 --> 00:11:06.732
The other way we can do it is we can
just go over to the second argument of

214
00:11:06.732 --> 00:11:07.277
readFile.

215
00:11:07.277 --> 00:11:10.580
And we can pass in the format
that we want here,

216
00:11:10.580 --> 00:11:13.903
and I'm just gonna pass
in utf-8 like this.

217
00:11:13.903 --> 00:11:17.152
I'm sorry, I said format,
the encoding that we wanna pass in here.

218
00:11:17.152 --> 00:11:20.206
And utf-8 just basically means
turning that into a string.

219
00:11:20.206 --> 00:11:22.679
And now I don't need the toString.

220
00:11:22.679 --> 00:11:25.420
And it still logs it, the HTML here.

221
00:11:26.610 --> 00:11:28.922
So step one, we read the file.

222
00:11:28.922 --> 00:11:30.600
We have it loaded up.

223
00:11:30.600 --> 00:11:31.915
It's a string now.

224
00:11:31.915 --> 00:11:35.820
It's inside of our Node.js file,
so it was an HTML file on disk.

225
00:11:35.820 --> 00:11:39.550
Now it's a string in memory,
and now we can process it.

226
00:11:39.550 --> 00:11:45.810
So the next strategy is to figure out how
to replace these with some actual values.

227
00:11:45.810 --> 00:11:47.082
In a real implementation,

228
00:11:47.082 --> 00:11:49.747
you would probably use some
other templating language.

229
00:11:49.747 --> 00:11:51.680
You would use some regex based thing.

230
00:11:51.680 --> 00:11:54.562
We're gonna do it the cheap way, and
we're just gonna loop over this and

231
00:11:54.562 --> 00:11:56.780
do a string.replace and keep it simple.

232
00:11:56.780 --> 00:12:01.547
So first thing is let's actually get the
data that we want to swap out with these

233
00:12:01.547 --> 00:12:02.350
variables.

234
00:12:02.350 --> 00:12:05.921
Let's make an object here, and we'll
call it data, and we'll have a title.

235
00:12:07.900 --> 00:12:10.897
And we'll call this learn Node.js.

236
00:12:10.897 --> 00:12:11.981
That's the title.

237
00:12:11.981 --> 00:12:14.592
And then I think the other one was a body.

238
00:12:14.592 --> 00:12:16.766
Yep, so we'll have a body.

239
00:12:16.766 --> 00:12:23.120
And a body is this is the final HTML.

240
00:12:25.297 --> 00:12:26.645
So we got our data now.

241
00:12:26.645 --> 00:12:29.841
And then the next thing we wanna do
is we can just loop over this data.

242
00:12:29.841 --> 00:12:34.224
And then we can just replace every
single instance of the placeholders

243
00:12:34.224 --> 00:12:38.382
that match the key inside this,
because the key is title and body,

244
00:12:38.382 --> 00:12:41.149
matched with the variables title and body.

245
00:12:41.149 --> 00:12:45.556
So we'll just match those
using the replace method.

246
00:12:45.556 --> 00:12:50.693
We could say for(const).

247
00:12:50.693 --> 00:12:58.060
Let's just say key value,
key value of Object.entries.

248
00:12:58.060 --> 00:13:03.501
If you've never heard of Object.entries,
when you call Object.entries and

249
00:13:03.501 --> 00:13:09.120
pass in an object to it, it's basically
gonna return an array of key value pairs.

250
00:13:09.120 --> 00:13:11.262
So tuples, so it'd be an array of arrays.

251
00:13:11.262 --> 00:13:15.052
And each array in the big array is
gonna have a key as its first value,

252
00:13:15.052 --> 00:13:17.000
and a value as its second value.

253
00:13:17.000 --> 00:13:21.438
So in this case, I'm getting the key and
the value of each key value pair, and

254
00:13:21.438 --> 00:13:23.120
I'm looping over them.

255
00:13:23.120 --> 00:13:29.009
So for each one of those, what I wanna do
is I just wanna replace the placeholder.

256
00:13:29.009 --> 00:13:33.103
So I'm actually just gonna
turn this into a let, and

257
00:13:33.103 --> 00:13:37.595
I'm gonna say template = template.replace.

258
00:13:37.595 --> 00:13:40.142
And if you look at the placeholders,
they start with this bracket, and

259
00:13:40.142 --> 00:13:43.055
they close with this bracket, and then
there's a variable name in the middle.

260
00:13:43.055 --> 00:13:44.129
So that's what we'll look for.

261
00:13:44.129 --> 00:13:49.225
So we'll say replace these brackets,
followed by the key here.

262
00:13:49.225 --> 00:13:53.372
And I wanna replace it with the value,
and that should be okay.

263
00:13:54.562 --> 00:13:59.780
So I'm replacing everywhere where there's
a key bracket with the actual value.

264
00:13:59.780 --> 00:14:00.674
So I'm gonna replace that.

265
00:14:00.674 --> 00:14:03.120
I'm updating the template all along.

266
00:14:03.120 --> 00:14:09.820
And then I'm just gonna log,
The template to see if it actually works.

267
00:14:09.820 --> 00:14:10.390
So let's do that.

268
00:14:11.410 --> 00:14:13.733
And you can see we actually
replaced those variables.

269
00:14:13.733 --> 00:14:17.765
We replaced where there was
a bracket title with Learn Node.js.

270
00:14:17.765 --> 00:14:21.175
And we replaced the paragraph
tag with this is the final HTML.

271
00:14:21.175 --> 00:14:22.568
Don't worry about these little arrows.

272
00:14:22.568 --> 00:14:23.436
That's just my terminal.

273
00:14:23.436 --> 00:14:24.941
It prints these arrows out.

274
00:14:24.941 --> 00:14:27.295
I think it's the font that I'm using,
I don't know.

275
00:14:27.295 --> 00:14:28.018
I kinda like it.

276
00:14:28.018 --> 00:14:29.415
But no,
it doesn't actually look like this.

277
00:14:29.415 --> 00:14:30.828
You won't have an arrow here.

278
00:14:30.828 --> 00:14:33.695
It's kinda confusing, but
yeah, this totally works.

279
00:14:33.695 --> 00:14:34.739
So we're almost done.

280
00:14:34.739 --> 00:14:39.160
The next thing we need to do is we need
to write this file back to the disk,

281
00:14:39.160 --> 00:14:42.637
because we do want this file
to be loaded in the browser.

282
00:14:42.637 --> 00:14:43.198
We wanna see it.

283
00:14:43.198 --> 00:14:44.612
We want it to be served by a server.

284
00:14:44.612 --> 00:14:46.173
We're gonna deploy this somewhere, right?

285
00:14:46.173 --> 00:14:48.115
So we have to write this
file back to the disk.

286
00:14:48.115 --> 00:14:50.080
Otherwise, what was the point of this?

287
00:14:50.080 --> 00:14:55.079
So the thing that we wanna do here is
we wanna import another file called

288
00:14:55.079 --> 00:14:59.414
writeFile, which is pretty
much the opposite of readFile.

289
00:14:59.414 --> 00:15:04.258
So we're gonna say await
writeFile like this, and

290
00:15:04.258 --> 00:15:10.240
then it pretty much takes the same
arguments as readFile does.

291
00:15:10.240 --> 00:15:12.387
So we're going to say new URL.

292
00:15:15.224 --> 00:15:17.650
Oops, nope, not that, this one.

293
00:15:17.650 --> 00:15:19.796
And we're gonna pass in the name
of the file that we want.

294
00:15:19.796 --> 00:15:24.111
In this case,
let's just call it index.html, like that.

295
00:15:24.111 --> 00:15:29.902
And then imports.meta.url, which, by the
way, I think there's a lot of different

296
00:15:29.902 --> 00:15:36.350
approaches to solve the fact that we don't
have __dirname and filename inside of MJS.

297
00:15:36.350 --> 00:15:38.419
This is just the way that I've settled on.

298
00:15:38.419 --> 00:15:40.645
This is the way that I've
seen other libraries and

299
00:15:40.645 --> 00:15:44.252
frameworks approach this problem, and
it's something that I've decided on.

300
00:15:44.252 --> 00:15:48.098
But if you were to Google well,
how do we get around no __dirname or

301
00:15:48.098 --> 00:15:49.458
filename in MJS files?

302
00:15:49.458 --> 00:15:51.410
You will probably find a lot
of different solutions.

303
00:15:51.410 --> 00:15:54.367
This is the one that has been
consistently great for me.

304
00:15:54.367 --> 00:15:55.805
So we're gonna write the file.

305
00:15:55.805 --> 00:15:59.273
And then we want to, as a second argument,
pass in the file that we wanna write.

306
00:15:59.273 --> 00:16:01.380
In this case, it's the template string.

307
00:16:01.380 --> 00:16:04.220
So we're gonna await and
we're gonna write that file.

308
00:16:04.220 --> 00:16:08.220
And we should see it pop up here on
the left when we execute this code.

309
00:16:08.220 --> 00:16:09.280
So let's give it a try.

310
00:16:09.280 --> 00:16:10.660
So I'm gonna do that.

311
00:16:10.660 --> 00:16:13.390
There was no output here
because I didn't log anything.

312
00:16:13.390 --> 00:16:18.430
Because the output was exactly this index
that HTML being written to the disk.

313
00:16:18.430 --> 00:16:21.050
So if I go check it out,
you can see we're all good here.

314
00:16:21.050 --> 00:16:25.232
And just to check to make
sure it's valid HTML,

315
00:16:25.232 --> 00:16:30.787
I can open with, not that,
we're gonna open, where is this?

316
00:16:30.787 --> 00:16:33.670
I wanna, you're revealing finder.

317
00:16:33.670 --> 00:16:35.298
Then I'mma a double click that.

318
00:16:35.298 --> 00:16:37.630
And you can see it's a real HTML website.

319
00:16:37.630 --> 00:16:41.565
We just process some HTML similar to
what a build tool that you've probably

320
00:16:41.565 --> 00:16:43.506
been using for quite some time does.

321
00:16:43.506 --> 00:16:45.280
So that's really powerful.

322
00:16:45.280 --> 00:16:48.182
Obviously web pack is more than this,
TypeScript is more than this,

323
00:16:48.182 --> 00:16:49.520
Babel is more than this.

324
00:16:49.520 --> 00:16:54.144
But at its foundation at its core, it's
reading your files as strings in memory

325
00:16:54.144 --> 00:16:58.770
and it's processing them, complicated
plug in systems and architectures and

326
00:16:58.770 --> 00:17:02.490
an edge case protections and
all types of crazy things.

327
00:17:02.490 --> 00:17:04.522
At the end of the day,
that's what it's doing to the file system,

328
00:17:04.522 --> 00:17:05.881
it's reading it and then it's writing it.

329
00:17:05.881 --> 00:17:08.795
Like you've ever use web pack or
babel or Typescript and

330
00:17:08.795 --> 00:17:12.520
use a seal line is like give us the input
file that you want to start with.

331
00:17:12.520 --> 00:17:15.662
Then give us an output directory to
output too, they're writing to it,

332
00:17:15.662 --> 00:17:18.969
they're reading from it, that's
exactly why they need those arguments.

333
00:17:20.530 --> 00:17:23.230
So that's a really powerful feeling.

334
00:17:23.230 --> 00:17:28.190
I know when I started reading or
writing files, one of the first things

335
00:17:28.190 --> 00:17:33.484
that I built was a like starter kit like
I always built at the time I built like

336
00:17:33.484 --> 00:17:38.720
everything in like mango express Angular
and node so like the mean stack.

337
00:17:38.720 --> 00:17:43.285
So I built a little system that would
basically scaffold out the start of how I

338
00:17:43.285 --> 00:17:44.580
like to build an app.

339
00:17:44.580 --> 00:17:45.870
So it's like a little scaffolding tool.

340
00:17:45.870 --> 00:17:48.493
And that was like the first thing
that I built with the file system and

341
00:17:48.493 --> 00:17:51.050
I thought that that was really powerful.

342
00:17:51.050 --> 00:17:55.700
So, any questions on the file system or
anything that I just covered?

343
00:17:55.700 --> 00:17:57.170
That's a good question.

344
00:17:57.170 --> 00:18:00.680
So, await, let's talk about that.

345
00:18:00.680 --> 00:18:01.830
Let me go back to the code.

346
00:18:01.830 --> 00:18:03.070
So what is await?

347
00:18:03.070 --> 00:18:04.620
And what is it doing here?

348
00:18:04.620 --> 00:18:05.190
Good question.

349
00:18:05.190 --> 00:18:10.130
So, we have to understand how
a synchronous code works in JavaScript.

350
00:18:10.130 --> 00:18:13.859
So I'm not gonna go deep into that because
there are so many amazing courses on front

351
00:18:13.859 --> 00:18:17.182
end masters that can talk about that
much better than I can in this course.

352
00:18:17.182 --> 00:18:23.776
But the short answer is read file and
write file are asynchronous tasks as in,

353
00:18:23.776 --> 00:18:27.440
they actually execute in the background.

354
00:18:27.440 --> 00:18:30.420
So what what I'm saying
is we'll get to await.

355
00:18:30.420 --> 00:18:32.210
Let's say I just remove this await.

356
00:18:32.210 --> 00:18:35.605
What's actually gonna happen is
when JavaScript looks at this file

357
00:18:35.605 --> 00:18:39.664
on line three of this line on line three,
it's going to initiate this function.

358
00:18:39.664 --> 00:18:42.410
But it's not going to wait around for
it to be finished.

359
00:18:42.410 --> 00:18:45.440
It's going to task it to happen
later on in the background.

360
00:18:45.440 --> 00:18:47.390
And it's gonna continue to move on.

361
00:18:47.390 --> 00:18:51.212
Now, that's gonna cause problems
because as you can see on line 11,

362
00:18:51.212 --> 00:18:54.850
I expect there to be something
called template available.

363
00:18:54.850 --> 00:18:58.132
But if I don't wait for it,
this will actually just be undefined and

364
00:18:58.132 --> 00:19:01.720
it's my code is not gonna behave
the way that I intended it to.

365
00:19:01.720 --> 00:19:04.968
So there are different ways to
get around that and node JS or

366
00:19:04.968 --> 00:19:08.550
JavaScript in general,
the standard way is to use a callback.

367
00:19:08.550 --> 00:19:12.823
So if we didn't use FS promises,
and we decided to use FS,

368
00:19:12.823 --> 00:19:17.460
I would actually pass in
a callback here like this.

369
00:19:17.460 --> 00:19:19.790
That would say, like error result.

370
00:19:21.640 --> 00:19:28.690
And this callback would be called
when the read file was done.

371
00:19:28.690 --> 00:19:33.064
And then I would have to move all of this
code into this callback because I don't

372
00:19:33.064 --> 00:19:36.320
want that code to be executed and
so refile is done.

373
00:19:36.320 --> 00:19:37.840
And as you can see,
that starts to get sloppy.

374
00:19:37.840 --> 00:19:40.760
You have callbacks inside of
callbacks inside of callbacks.

375
00:19:40.760 --> 00:19:43.670
So we solve that with
something called promises.

376
00:19:43.670 --> 00:19:48.033
So now if you have a promise, what you can
do, instead of doing a callback is you

377
00:19:48.033 --> 00:19:52.003
could, you can actually just do
a something called dot then right after

378
00:19:52.003 --> 00:19:55.336
this, which kind of looks like a callback,
but it's not.

379
00:19:55.336 --> 00:19:59.728
And then I would just move everything
inside of this dot then which it doesn't

380
00:19:59.728 --> 00:20:04.257
start, it doesn't expand out this way it
stays flat but it's still not the best

381
00:20:04.257 --> 00:20:08.716
looking way, it still doesn't read top
from bottom like when we look at code,

382
00:20:08.716 --> 00:20:10.427
we read it from top to bottom.

383
00:20:10.427 --> 00:20:13.744
And when it stops behaving that way,
it can get very confusing and

384
00:20:13.744 --> 00:20:16.440
that then keeps it closer
from top to bottom.

385
00:20:16.440 --> 00:20:17.700
But it's still not quite there.

386
00:20:17.700 --> 00:20:20.430
You still have these call
backs inside the dot then.

387
00:20:20.430 --> 00:20:25.760
So we built another abstraction on top
of that and that's called a sync await.

388
00:20:25.760 --> 00:20:28.743
So now if you have a function
that does return a promise,

389
00:20:28.743 --> 00:20:32.060
which these functions do,
they do return promises.

390
00:20:32.060 --> 00:20:36.460
You could prefix the promise
with a keyword called await.

391
00:20:36.460 --> 00:20:40.821
Which will stop JavaScript
from moving on until this

392
00:20:40.821 --> 00:20:44.100
asynchronous piece of code was done.

393
00:20:44.100 --> 00:20:47.143
It is the equivalent of moving all
the code into the call back like I just

394
00:20:47.143 --> 00:20:48.150
showed you.

395
00:20:48.150 --> 00:20:52.866
Instead, visit usually, we don't have
to do that and we could feel confident

396
00:20:52.866 --> 00:20:56.590
that this code won't execute
until this is done or aired out.

397
00:20:57.920 --> 00:21:02.130
&gt;&gt; Yeah, do we not have to provide
the async keyword or is it implicit?

398
00:21:02.130 --> 00:21:02.660
&gt;&gt; Gotcha.
Yeah.

399
00:21:02.660 --> 00:21:05.192
So that is a new feature in
the latest version of node,

400
00:21:05.192 --> 00:21:09.100
you do not have to apply the async
keyword anymore inside of a function.

401
00:21:09.100 --> 00:21:13.880
Is your good to use it flat
globally now it's pretty amazing.

402
00:21:13.880 --> 00:21:15.840
Yeah, if it's top level like I have here,

403
00:21:15.840 --> 00:21:18.680
you don't need an async because
there's nowhere to add it.

404
00:21:18.680 --> 00:21:22.568
But if you do have a function,
like for instance,

405
00:21:22.568 --> 00:21:27.578
if I have a function called,
get users like this oops, go away.

406
00:21:29.896 --> 00:21:32.900
I can't just say await,
something like this.

407
00:21:32.900 --> 00:21:40.764
I can't say await db.getusers.

408
00:21:40.764 --> 00:21:42.160
I can't do that, right?

409
00:21:42.160 --> 00:21:48.960
That's not gonna happen, because you have
to put async in front of this, like that.

410
00:21:51.870 --> 00:21:54.705
So yeah, it's only the top level,
which is something relatively new and

411
00:21:54.705 --> 00:21:55.650
extremely powerful.

412
00:21:55.650 --> 00:21:57.991
But yeah, if you're inside of a function,

413
00:21:57.991 --> 00:22:02.120
you do have to put the async keyword
before your parameters on that function.

