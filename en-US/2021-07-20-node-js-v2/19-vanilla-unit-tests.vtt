WEBVTT

1
00:00:00.333 --> 00:00:02.463
All right, so let's keep it moving.

2
00:00:02.463 --> 00:00:07.999
And we will go on to
everyone's favorite subject.

3
00:00:07.999 --> 00:00:09.412
Testing, right?

4
00:00:09.412 --> 00:00:13.051
Everyone here loves testing,
I would imagine.

5
00:00:13.051 --> 00:00:14.937
So we're gonna talk about that.

6
00:00:14.937 --> 00:00:20.197
And how, honestly, node JS is like
the perfect tool for testing.

7
00:00:20.197 --> 00:00:23.962
It's so good with testing that I was
trying to remember the last time

8
00:00:23.962 --> 00:00:26.868
I've written tests and
like ran tests in a browser,

9
00:00:26.868 --> 00:00:28.933
that wasn't like an end to end test.

10
00:00:28.933 --> 00:00:32.516
It was like a unit test and
I don't even remember.

11
00:00:32.516 --> 00:00:35.702
I know I did it, I won't play,
I just don't remember when it was, and

12
00:00:35.702 --> 00:00:39.161
that's how long ago it's been since
I've been using nodes to write tests.

13
00:00:39.161 --> 00:00:43.070
So yeah, like I said,
one of the most common use cases for

14
00:00:43.070 --> 00:00:46.578
node is writing tests for
node JS and front end app.

15
00:00:46.578 --> 00:00:52.345
So you can do kinda all of it,
it's really versatile.

16
00:00:52.345 --> 00:00:54.163
First, let's kinda talk
about what unit tests.

17
00:00:54.163 --> 00:00:57.518
So if you haven't written tests before,
the different types of tests,

18
00:00:57.518 --> 00:00:58.954
let's talk about unit tests.

19
00:00:58.954 --> 00:01:03.477
So unit test is basically it will test
like a little chunk of your code, a unit,

20
00:01:03.477 --> 00:01:08.024
it could be a little function, it could
be some constant variable somewhere.

21
00:01:08.024 --> 00:01:12.251
It can be pretty much whatever you
define as a unit, but it's basically

22
00:01:12.251 --> 00:01:16.628
testing it in isolation and not how
it works with something else, right?

23
00:01:16.628 --> 00:01:20.704
So you won't be testing like how this
system works together, how this API call

24
00:01:20.704 --> 00:01:24.872
handles everything in the middle-ware
stack all the way down to the response.

25
00:01:24.872 --> 00:01:27.882
That wouldn't be a unit test,
that would be like an end to end test.

26
00:01:27.882 --> 00:01:31.643
You're testing everything from end to end
and how they all relate to each other.

27
00:01:31.643 --> 00:01:35.025
You give us an input,
you run through a bunch of stuff, and

28
00:01:35.025 --> 00:01:38.561
you'll see the output is and
what will happen along the way.

29
00:01:38.561 --> 00:01:42.048
Whereas a unit test is like,
I just wanna see how this one thing works

30
00:01:42.048 --> 00:01:44.877
by itself without anything
else interacting with it.

31
00:01:44.877 --> 00:01:47.193
So node JS is really perfect for that.

32
00:01:47.193 --> 00:01:49.307
And I'm gonna show you how we can do that.

33
00:01:49.307 --> 00:01:51.715
And just like the HTTP and
the server section,

34
00:01:51.715 --> 00:01:53.951
I'm gonna walk you through how to do this.

35
00:01:53.951 --> 00:01:56.232
The manual way that's built into node,

36
00:01:56.232 --> 00:01:59.126
then I wanna show you how
you should actually do it.

37
00:01:59.126 --> 00:02:02.838
But by learning it this way,
you'll see how it's all working,

38
00:02:02.838 --> 00:02:05.610
but sometimes it could
kind of feel like magic.

39
00:02:05.610 --> 00:02:09.325
So this is really cool module
built into node called assert.

40
00:02:09.325 --> 00:02:13.756
And assert kinda sounds
exactly like what it is.

41
00:02:13.756 --> 00:02:18.278
It's gonna be used to do assertions
against different truthy statements,

42
00:02:18.278 --> 00:02:18.780
right?

43
00:02:18.780 --> 00:02:22.385
We can assert that this statement
must be true and if it's not,

44
00:02:22.385 --> 00:02:25.389
it's gonna throw an error,
that's basically it.

45
00:02:25.389 --> 00:02:28.282
And most of the testing frameworks
are built on top of the assert module.

46
00:02:28.282 --> 00:02:31.379
So we're gonna use that
to write some tests.

47
00:02:31.379 --> 00:02:33.149
So I'm gonna make a new folder here.

48
00:02:35.179 --> 00:02:40.257
I'm gonna call it my,
I'm just gonna call it lib.

49
00:02:40.257 --> 00:02:45.799
So we got lib here, and
make a new file and

50
00:02:45.799 --> 00:02:51.179
call it a Mylib.njs and I'll make a new

51
00:02:51.179 --> 00:02:57.225
file I'm gonna call this lib.spec.njs.

52
00:02:57.225 --> 00:02:58.147
So let's do that.

53
00:02:59.677 --> 00:03:04.444
So for the lib we can pretty much do
anything we just need to write some code

54
00:03:04.444 --> 00:03:05.629
that we can test.

55
00:03:05.629 --> 00:03:09.378
So I'm just gonna say cost add,
it's gonna take some numbers.

56
00:03:11.486 --> 00:03:18.481
And it's going to return num1 times num2,
right?

57
00:03:18.481 --> 00:03:21.364
I know it's add function and
multipliers I get it, but

58
00:03:21.364 --> 00:03:24.447
we're gonna see how the test fails and
we can try to fix it.

59
00:03:24.447 --> 00:03:28.118
So we got that, in order for
me to test this code,

60
00:03:28.118 --> 00:03:32.253
this unit, I have to export
otherwise I can import it.

61
00:03:32.253 --> 00:03:34.518
So I'm gonna export this.

62
00:03:34.518 --> 00:03:37.388
And now I can actually import
this into some other file,

63
00:03:37.388 --> 00:03:38.926
which then I can use and test.

64
00:03:38.926 --> 00:03:45.357
So in my other file,
which is gonna be the spec file,

65
00:03:45.357 --> 00:03:50.184
we're gonna import that method from,

66
00:03:50.184 --> 00:03:54.291
not this file, but myLib.njs.

67
00:03:54.291 --> 00:03:58.766
So one thing,
I don't know if I mentioned this, but

68
00:03:58.766 --> 00:04:05.711
when you're importing njs files, you do
have to explicitly put the extension.

69
00:04:05.711 --> 00:04:07.577
If you don't put the extension,
I don't think it'll work.

70
00:04:07.577 --> 00:04:11.550
Whereas .js files, you don't have to,
and/or if you went into

71
00:04:11.550 --> 00:04:16.335
the package,json and said hey, I wanna
use ECMA script modules type module.

72
00:04:16.335 --> 00:04:18.736
Then I don't think you
have to do the extension.

73
00:04:18.736 --> 00:04:21.830
But we do, I'm being explicit that
way people don't get confused.

74
00:04:21.830 --> 00:04:24.456
I've seen some people get
confused with this, so

75
00:04:24.456 --> 00:04:27.657
I just learned to just be explicit
about it that way it works.

76
00:04:27.657 --> 00:04:29.771
Maybe one day when no js file is like,
all right,

77
00:04:29.771 --> 00:04:33.503
everything is ECMA script modules and with
other details, then I'll figure it out.

78
00:04:33.503 --> 00:04:36.117
But for now,
I'm just gonna be explicit about it.

79
00:04:36.117 --> 00:04:39.906
Because you can't go wrong,
there's no confusion.

80
00:04:39.906 --> 00:04:41.760
So we got the add, and

81
00:04:41.760 --> 00:04:47.445
then we need to import assert from
assert because it's built in.

82
00:04:47.445 --> 00:04:51.427
And then we can assert to see if this add
function does what it's supposed to do.

83
00:04:51.427 --> 00:04:54.037
So the first thing I'm gonna
do is I'm a console.log,

84
00:04:54.037 --> 00:04:55.880
that we're running the add function.

85
00:04:55.880 --> 00:05:00.855
And I'm gonna say, make a little break
line here, I'm gonna say should,

86
00:05:03.379 --> 00:05:06.785
Add two numbers.

87
00:05:06.785 --> 00:05:08.798
So I'm gonna just log that.

88
00:05:08.798 --> 00:05:15.645
And then I'm going to assert, Actually,
I'm gonna try catch this one.

89
00:05:15.645 --> 00:05:20.969
Let's try catch the assert that add,
that takes 1 and

90
00:05:20.969 --> 00:05:25.842
2 should equal 3,
because 1 plus 2 equals 3.

91
00:05:25.842 --> 00:05:28.068
If that fails, I'm gonna catch the error.

92
00:05:30.464 --> 00:05:32.631
And I'm gonna console.log.

93
00:05:34.023 --> 00:05:34.898
Fail.

94
00:05:39.996 --> 00:05:44.662
And then I'm gonna console.error,
the error.

95
00:05:44.662 --> 00:05:48.701
But if it passes, we're gonna say success.

96
00:05:51.574 --> 00:05:55.126
So here's our little test
using the assert library.

97
00:05:55.126 --> 00:05:58.137
So let's give it a shot, see what happens.

98
00:05:58.137 --> 00:06:02.753
So I'm gonna go over to our terminal and
back out of this, go to lib.

99
00:06:02.753 --> 00:06:03.866
I'm gonna run node.

100
00:06:06.567 --> 00:06:07.722
What was it?

101
00:06:07.722 --> 00:06:08.897
Lib .spec.

102
00:06:10.179 --> 00:06:13.951
Run that, and for some reason,

103
00:06:13.951 --> 00:06:18.854
it says success, did I not do that right?

104
00:06:18.854 --> 00:06:20.390
I will not say success, hold on.

105
00:06:21.757 --> 00:06:28.774
MyLib at, [LAUGH] wait, why did I do that?

106
00:06:28.774 --> 00:06:31.041
Hold on,
I think I might use a certain wrong.

107
00:06:31.041 --> 00:06:38.539
I'll go back to my notes,
.strictEqual, okay, sorry.

108
00:06:38.539 --> 00:06:42.869
Okay, so let's go back into it and
do .strictEqual.

109
00:06:42.869 --> 00:06:45.952
I'm not used to that change,
because I don't really use a search,

110
00:06:45.952 --> 00:06:46.937
it's too low level.

111
00:06:46.937 --> 00:06:50.236
But yeah, strictEqual to see if
those two things equal each other.

112
00:06:52.183 --> 00:06:55.866
And as you can see,
we do get a FAIL here AssertionError.

113
00:06:55.866 --> 00:07:00.726
We say, expected value to be
strictly equal 2 does not equal 3.

114
00:07:00.726 --> 00:07:05.282
And then you can see it logs out the
assertion, which has the code, the actual,

115
00:07:05.282 --> 00:07:09.641
the expected, and then what operator
were used to perform the comparison.

116
00:07:09.641 --> 00:07:10.640
It's pretty detailed.

