WEBVTT

1
00:00:00.130 --> 00:00:04.630
So this is probably the best
feature of node js.

2
00:00:04.630 --> 00:00:06.522
And it's the community, right?

3
00:00:06.522 --> 00:00:10.935
Node js is a thriving community full
of individuals who contribute and

4
00:00:10.935 --> 00:00:15.794
build and create like some of the most
amazing things you can use inside of your

5
00:00:15.794 --> 00:00:17.620
JavaScript applications.

6
00:00:17.620 --> 00:00:20.025
So if you've been doing
front end development,

7
00:00:20.025 --> 00:00:23.311
you've probably heard of react or
any other framework like that,

8
00:00:23.311 --> 00:00:26.110
or a library like Lodash,
or something like that.

9
00:00:26.110 --> 00:00:30.450
All of those are packages that you
can consume inside your application.

10
00:00:30.450 --> 00:00:33.115
And even though those
are front end packages,

11
00:00:33.115 --> 00:00:38.810
they are still considered node packages,
cuz you're actually installing with node.

12
00:00:38.810 --> 00:00:40.890
They're being built with node,
things like that.

13
00:00:40.890 --> 00:00:45.064
They're being consumed by node even though
the end target is probably the browser,

14
00:00:45.064 --> 00:00:47.061
but how they got there was through node,

15
00:00:47.061 --> 00:00:50.120
the mechanism of how they
got into your application.

16
00:00:50.120 --> 00:00:53.846
So you could think of packages as
like a collection of modules or

17
00:00:53.846 --> 00:00:58.626
even just one module that is available
to you, like it's shared whether it's on

18
00:00:58.626 --> 00:01:02.494
a registry somewhere,
whether it's locally on your computer,

19
00:01:02.494 --> 00:01:06.992
it's just a bundle of modules or some type
of logic that you are able to use and

20
00:01:06.992 --> 00:01:11.390
you didn't write it, it's its own
application, it's its own entity.

21
00:01:11.390 --> 00:01:14.694
And you're bringing it in
almost like the internal model,

22
00:01:14.694 --> 00:01:18.855
the internal modules found in node js,
like the FS file system that we use,

23
00:01:18.855 --> 00:01:21.780
we talked about path,
different things like that.

24
00:01:21.780 --> 00:01:26.110
You can think of those as packages
built internally into node js.

25
00:01:26.110 --> 00:01:30.664
So when it comes to node, there is a very
special tool that we use to manage those

26
00:01:30.664 --> 00:01:34.460
packages because like I said,
there's hundreds, thousands,

27
00:01:34.460 --> 00:01:37.634
millions of packages out there and
you need to have some

28
00:01:37.634 --> 00:01:42.396
type of experience around that to be able
to get the packages you want, find them,

29
00:01:42.396 --> 00:01:47.390
make sure that they're right, different
versions, different stuff like that.

30
00:01:47.390 --> 00:01:51.448
So there's something out there that's
called node package manager, or

31
00:01:51.448 --> 00:01:52.305
NPM for short.

32
00:01:52.305 --> 00:01:55.527
NPM actually is already installed
on your machine if you have node,

33
00:01:55.527 --> 00:01:57.470
you didn't have to do anything.

34
00:01:57.470 --> 00:02:01.400
It comes bundled with node,
although they're two separate things.

35
00:02:01.400 --> 00:02:06.537
So NPM is amazing because it
allows us to search, install,

36
00:02:06.537 --> 00:02:12.718
build all different types of packages
in our application much faster.

37
00:02:12.718 --> 00:02:15.820
A lot of OS level
languages like Python and

38
00:02:15.820 --> 00:02:20.351
Ruby they also have package managers,
Python has like PIP.

39
00:02:20.351 --> 00:02:23.170
Ruby has like Ruby gems,
different things like that.

40
00:02:23.170 --> 00:02:27.000
This is just nodes version of that,
it's called NPM.

41
00:02:27.000 --> 00:02:28.990
There's also other package
managers out there as well.

42
00:02:28.990 --> 00:02:30.550
You might have heard of like Yarn and

43
00:02:30.550 --> 00:02:32.790
probably some other ads
that are out there as well.

44
00:02:32.790 --> 00:02:34.839
They pretty much all do the same thing and

45
00:02:34.839 --> 00:02:38.570
they're interchangeable with
small features here and there.

46
00:02:38.570 --> 00:02:40.722
Going forward,
we're just gonna use NPM for

47
00:02:40.722 --> 00:02:44.300
everything because that's the standard and
up to the point that it is now.

48
00:02:44.300 --> 00:02:45.830
It's actually pretty good.

49
00:02:45.830 --> 00:02:46.890
So we're just gonna use NPM.

50
00:02:48.300 --> 00:02:51.491
So what we're gonna do is we're
gonna create our first package, and

51
00:02:51.491 --> 00:02:53.870
we're gonna learn how to
consume other packages.

52
00:02:53.870 --> 00:02:54.960
So let's do that.

53
00:02:54.960 --> 00:02:58.876
So what we're gonna do is,
first we have to create,

54
00:02:58.876 --> 00:03:04.840
we have to turn an ordinary node code
base, an ordinary node app into a package.

55
00:03:04.840 --> 00:03:07.979
And you've probably seen this and
done this a bunch of times, but

56
00:03:07.979 --> 00:03:11.250
you probably didn't know what it was for
and the meaning behind it.

57
00:03:11.250 --> 00:03:15.115
So I'm gonna walk you through it,
we need to create a package JSON file.

58
00:03:15.115 --> 00:03:17.020
And we're gonna use NPM to do that for us.

59
00:03:17.020 --> 00:03:19.880
So let's head over to our app here.

60
00:03:19.880 --> 00:03:21.320
I already had all this stuff.

61
00:03:21.320 --> 00:03:24.646
I'm just gonna just make a new folder and
toss all this stuff in there and

62
00:03:24.646 --> 00:03:26.097
I'm gonna call it like intro.

63
00:03:26.097 --> 00:03:29.685
And I'm just gonna say,
let me just grab all of these things,

64
00:03:29.685 --> 00:03:32.038
drag them all, I guess, I don't know.

65
00:03:32.038 --> 00:03:34.417
I'm just gonna put all these
in the intro folder and

66
00:03:34.417 --> 00:03:36.251
then I'm gonna make a new folder here.

67
00:03:36.251 --> 00:03:39.926
Well, outside of this folder
I'm gonna make a new folder and

68
00:03:39.926 --> 00:03:42.980
I'm gonna call this package, like that.

69
00:03:42.980 --> 00:03:44.871
It's important that we
make a new folder here or

70
00:03:44.871 --> 00:03:47.720
you can treat your root folder as
the folder that you're gonna work on.

71
00:03:47.720 --> 00:03:49.680
Regardless, we need a folder
to put something in.

72
00:03:49.680 --> 00:03:52.701
So if you're following along,
just make a folder.

73
00:03:52.701 --> 00:03:55.821
And then what you need to do you need to
make sure that you change directories into

74
00:03:55.821 --> 00:03:57.140
that folder from your terminal.

75
00:03:57.140 --> 00:04:00.230
So I'm gonna change directories
into package like that.

76
00:04:00.230 --> 00:04:05.628
Now I'm inside of package and what we're
gonna do now is we're going to initialize

77
00:04:05.628 --> 00:04:11.000
a package JSON file which is basically
telling node that hey, this is a package.

78
00:04:11.000 --> 00:04:14.470
So, we're gonna say NPM run it.

79
00:04:14.470 --> 00:04:18.156
And once you run that you're gonna be
inside of this interactive prompt that's

80
00:04:18.156 --> 00:04:20.230
gonna be asking you questions.

81
00:04:20.230 --> 00:04:23.350
You can just hit Enter repeatedly
to go through the defaults, but

82
00:04:23.350 --> 00:04:27.153
we're gonna walk through so we kind of
understand what these field names are and

83
00:04:27.153 --> 00:04:30.440
why some of them are important and
why some of them aren't.

84
00:04:30.440 --> 00:04:33.540
So the first one, it's asking us like,
what's the name of this package?

85
00:04:33.540 --> 00:04:37.082
This is important, because if you ever
decide to publish this package to

86
00:04:37.082 --> 00:04:40.730
a registry, and we'll talk about that,
this name has to be unique.

87
00:04:40.730 --> 00:04:43.490
That way when someone NPM
installs your package name,

88
00:04:43.490 --> 00:04:46.560
it's guaranteed to be that package and
not something else.

89
00:04:46.560 --> 00:04:48.561
We don't want any conflicts on name.

90
00:04:48.561 --> 00:04:50.451
So there's no miscommunication or

91
00:04:50.451 --> 00:04:54.515
misunderstanding about which
package you're actually getting.

92
00:04:54.515 --> 00:04:57.205
So if you are gonna publish it,
it has to be a unique name.

93
00:04:57.205 --> 00:04:59.993
And as you would imagine like anything
else that's unique like URLs,

94
00:04:59.993 --> 00:05:01.865
all the good names are already taken.

95
00:05:01.865 --> 00:05:04.659
So you can namespace these if you pay for
like a private account,

96
00:05:04.659 --> 00:05:07.625
you can namespace them or
maybe it's free now, I don't remember.

97
00:05:07.625 --> 00:05:10.115
But if you get an account,
you can namespace them.

98
00:05:10.115 --> 00:05:12.425
And that's a whole another thing, but
yeah, you do wanna give it a name.

99
00:05:12.425 --> 00:05:17.058
I'm just gonna call mine App cuz we're
probably not gonna publish this,

100
00:05:17.058 --> 00:05:18.510
it's totally fine.

101
00:05:18.510 --> 00:05:20.487
And that's only if you publish it,
you're gonna keep it locally,

102
00:05:20.487 --> 00:05:21.800
you don't have to give it a unique name.

103
00:05:21.800 --> 00:05:23.950
In fact,
this name doesn't even really matter.

104
00:05:23.950 --> 00:05:25.230
So I'm just gonna say App.

105
00:05:25.230 --> 00:05:27.774
I'm gonna keep it on version 1.0.0.

106
00:05:27.774 --> 00:05:30.302
If you've never seen this
version syntax before,

107
00:05:30.302 --> 00:05:34.520
this version syntax is called semantic
versioning or SEMVAR for short.

108
00:05:34.520 --> 00:05:39.596
And basically it's just a three digit
system that like tells you what

109
00:05:39.596 --> 00:05:45.560
the major version is, what the minor
version is, and what the patch version is.

110
00:05:45.560 --> 00:05:48.955
Whereas major is, every time you
see a bump in the major version,

111
00:05:48.955 --> 00:05:50.820
that's a really big change.

112
00:05:50.820 --> 00:05:53.280
It's probably going to break
your app if you upgrade to that.

113
00:05:53.280 --> 00:05:57.112
A minor is like we fixed some bugs,
everything pretty much works the same.

114
00:05:57.112 --> 00:05:59.158
And we're just fixing some
stuff behind the scenes or

115
00:05:59.158 --> 00:06:01.481
maybe we added something new
that doesn't break anything.

116
00:06:01.481 --> 00:06:04.993
And then a patch is just like yeah,
we like changed some documentation or

117
00:06:04.993 --> 00:06:07.000
we changed how this thing works.

118
00:06:07.000 --> 00:06:08.920
But you use it exactly the same.

119
00:06:08.920 --> 00:06:11.700
So that's SEMVAR So
that's why you'll see those three digits.

120
00:06:11.700 --> 00:06:13.325
So I'm just gonna keep that at 1.0.

121
00:06:13.325 --> 00:06:15.440
The description is exactly
what it sounds like.

122
00:06:15.440 --> 00:06:20.036
Whatever you put here is gonna show up on
like a registries website like NPM website

123
00:06:20.036 --> 00:06:24.298
or if it's hosted on GitHub or if it's
hosted on Yarn or whatever registry,

124
00:06:24.298 --> 00:06:28.494
some internal registry, the description
field is here so it can be read and

125
00:06:28.494 --> 00:06:29.722
presented that way.

126
00:06:29.722 --> 00:06:34.693
And then an entry point is if I were
to require or import your module,

127
00:06:34.693 --> 00:06:37.060
what file would I be importing?

128
00:06:37.060 --> 00:06:37.990
What is that file?

129
00:06:37.990 --> 00:06:39.100
That's the entry point.

130
00:06:39.100 --> 00:06:43.429
The entry point is what is the door into
your module when someone imports it.

131
00:06:43.429 --> 00:06:47.866
So that's it, was gonna default to that
and then a test command is what command

132
00:06:47.866 --> 00:06:50.892
should we run when someone
tries to test this thing and

133
00:06:50.892 --> 00:06:53.520
I'm gonna keep that blank for now.

134
00:06:53.520 --> 00:06:56.240
The Git repository is
exactly what it sounds like,

135
00:06:56.240 --> 00:06:58.326
where on Git is it hosted if anywhere and

136
00:06:58.326 --> 00:07:03.290
keywords we don't need author we don't care
about right now, their license is okay.

137
00:07:03.290 --> 00:07:08.054
So as you see, I went through all of that
and it generated this JSON object here and

138
00:07:08.054 --> 00:07:11.120
it added it to a file called package.json.

139
00:07:11.120 --> 00:07:14.445
So I'm gonna say yes, that's okay.

140
00:07:14.445 --> 00:07:16.307
And then I'm gonna go check it out.

141
00:07:16.307 --> 00:07:18.910
So you can see I have a package.json here.

142
00:07:18.910 --> 00:07:21.210
And all the stuff that I
filled out is right here.

143
00:07:21.210 --> 00:07:22.110
Ready, good to go.

144
00:07:22.110 --> 00:07:26.390
So now we are officially a package.

145
00:07:26.390 --> 00:07:28.410
We are NPM package right now.

146
00:07:28.410 --> 00:07:32.320
And now we can use NPM and
we could do all different types of things.

147
00:07:32.320 --> 00:07:35.970
So let's go back over to our website here.

148
00:07:35.970 --> 00:07:39.590
We talked about some of these,
like the name and the version.

149
00:07:40.950 --> 00:07:42.800
We talked about the main here.

150
00:07:42.800 --> 00:07:44.760
One thing we didn't
talk about was scripts.

151
00:07:44.760 --> 00:07:46.725
So scripts is really powerful.

152
00:07:46.725 --> 00:07:48.505
We're gonna use them here in a little bit.

153
00:07:48.505 --> 00:07:53.308
But they basically just allow you to
teach NPM different commands to run,

154
00:07:53.308 --> 00:07:57.115
like little shortcuts that you
can do test was one of them.

155
00:07:57.115 --> 00:07:59.885
It acts as what was the test command,
that's a test script.

156
00:07:59.885 --> 00:08:03.405
But you can make a script, any name and
you can make it do whatever you want.

157
00:08:03.405 --> 00:08:04.645
So they be pretty powerful.

158
00:08:06.120 --> 00:08:13.860
Next, we're going to use NPM to actually
install some stuff and see how that works.

159
00:08:13.860 --> 00:08:15.487
And I just wanna walk you
through that process.

160
00:08:15.487 --> 00:08:18.870
So some of the commands that we
wanna use are gonna be NPM install.

161
00:08:18.870 --> 00:08:23.350
So if we go look at NPM install,
I'll type in NPM Install help.

162
00:08:24.390 --> 00:08:27.753
You can see that it pretty much says you
can run NPM install with no arcs and

163
00:08:27.753 --> 00:08:30.530
it's going to try to install
everything in the directory.

164
00:08:30.530 --> 00:08:34.629
We'll talk about that, or you can
run NPM install with like a name and

165
00:08:34.629 --> 00:08:38.654
a name could be like I said, a scope
thing if you have a paid account or

166
00:08:38.654 --> 00:08:43.034
something like that, or an alias to
something, a folder if it's local,

167
00:08:43.034 --> 00:08:45.748
even a Git URL, a username slash project,.

168
00:08:45.748 --> 00:08:46.294
Like it's,

169
00:08:46.294 --> 00:08:50.300
you can pretty much install anything at
this point with NPM is pretty impressive.

170
00:08:50.300 --> 00:08:53.240
There's just a couple flags here that
we're gonna talk about and how that works.

171
00:08:53.240 --> 00:08:57.272
So NPM Install is one, exactly what
it sounds like, it installs packages.

172
00:08:57.272 --> 00:09:00.290
And then we got NPM tests,
which is the test scripts.

173
00:09:00.290 --> 00:09:03.183
And then we got NPM uninstall,
which is the opposite of install,

174
00:09:03.183 --> 00:09:04.690
it uninstalls things.

175
00:09:04.690 --> 00:09:08.425
So those are the three main commands
that you're probably using NPM and

176
00:09:08.425 --> 00:09:12.535
until you run into like caching problems
and D duping and versions all messed up

177
00:09:12.535 --> 00:09:16.207
then you gotta start looking into
all these other crazy NPM commands,

178
00:09:16.207 --> 00:09:18.210
but we're not gonna do that today.

179
00:09:18.210 --> 00:09:19.790
We're just gonna focus on these three.

180
00:09:19.790 --> 00:09:21.970
So it is gonna be just fine.

