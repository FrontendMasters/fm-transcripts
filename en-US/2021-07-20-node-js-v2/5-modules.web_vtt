WEBVTT

1
00:00:00.000 --> 00:00:02.501
Now we're gonna move on to modules and

2
00:00:02.501 --> 00:00:06.812
why I think there's really exciting and
kinda how they got here.

3
00:00:06.812 --> 00:00:11.253
And really just how modules are just
consuming JavaScript in general and

4
00:00:11.253 --> 00:00:12.499
not just Node.js.

5
00:00:12.499 --> 00:00:13.822
So let's move on to that.

6
00:00:13.822 --> 00:00:15.191
So if you're following along,

7
00:00:15.191 --> 00:00:17.736
I'm on the modules page now
on the documentation website.

8
00:00:17.736 --> 00:00:23.080
And let's kinda think about if we
were making a website right now,

9
00:00:23.080 --> 00:00:26.993
JavaScript based website,
how would we share or

10
00:00:26.993 --> 00:00:32.070
how would we include JavaScript
in other JavaScript, right?

11
00:00:32.070 --> 00:00:34.546
So the obvious answer might be,
well, script tags.

12
00:00:34.546 --> 00:00:39.300
Well, if you have a script tag, you can
put one script tag before another and

13
00:00:39.300 --> 00:00:43.607
as long as there's something on
the global or something somewhere,

14
00:00:43.607 --> 00:00:48.376
the script tag after the previous one
has access to the code inside of there.

15
00:00:48.376 --> 00:00:51.747
And that's what we did for
a long time before modules came along.

16
00:00:51.747 --> 00:00:55.509
So you'll see something like,
if you're new to programming,

17
00:00:55.509 --> 00:00:59.064
you probably haven't seen this,
but if you've been around

18
00:00:59.064 --> 00:01:03.817
a long time you've probably seen some
window.App = window.App or an object.

19
00:01:03.817 --> 00:01:05.875
Because in every single file,

20
00:01:05.875 --> 00:01:10.862
you would put something like this to
declare your global app that you have to

21
00:01:10.862 --> 00:01:14.994
share across many JavaScript
files that you were including.

22
00:01:14.994 --> 00:01:19.305
And then we moved on to something like
bundling where we would take all the files

23
00:01:19.305 --> 00:01:23.765
and we use something like bowser or gulp,
and we will combine them into one file.

24
00:01:23.765 --> 00:01:25.949
So we didn't really need
to do this anymore,

25
00:01:25.949 --> 00:01:29.453
because everything was combined into
a single file at the end of the day,

26
00:01:29.453 --> 00:01:31.875
even though they were
written in separate files.

27
00:01:31.875 --> 00:01:34.999
And then something came
along from Node and

28
00:01:34.999 --> 00:01:39.698
that's when we had something
called universal module syntax.

29
00:01:39.698 --> 00:01:44.351
And basically what that did was,
it transformed all of

30
00:01:44.351 --> 00:01:48.815
your files to be encapsulated
in their own closure.

31
00:01:48.815 --> 00:01:54.082
So you can think of it like this,
it pretty much looks

32
00:01:54.082 --> 00:02:00.071
like some type of function that
was immediately invoked and

33
00:02:00.071 --> 00:02:04.520
all your code was
protected inside of here.

34
00:02:04.520 --> 00:02:08.630
So because it's inside of this function,
it doesn't leak out to the global space.

35
00:02:08.630 --> 00:02:11.019
And at the end of the day,
that's basically what a module was.

36
00:02:11.019 --> 00:02:15.010
It was this transportable piece of
code that was shared across other

37
00:02:15.010 --> 00:02:16.205
JavaScript files.

38
00:02:16.205 --> 00:02:19.847
And that way they don't conflict with
each other, there's no conflicting,

39
00:02:19.847 --> 00:02:22.605
there's no global space leaking,
nothing like that, and

40
00:02:22.605 --> 00:02:25.324
you're able to access different
things by returning it.

41
00:02:25.324 --> 00:02:30.105
So if I return something here,
I get access to it here.

42
00:02:30.105 --> 00:02:32.950
So that's basically what these tools did.

43
00:02:32.950 --> 00:02:36.963
So some of the first tools were
Browserify, if you ever heard of that.

44
00:02:36.963 --> 00:02:39.393
Then webpack came along,
and all this crazy stuff.

45
00:02:39.393 --> 00:02:41.774
These tools are what's called bundlers and

46
00:02:41.774 --> 00:02:46.284
these bundlers created modules out of your
code, they allowed you to use modules.

47
00:02:46.284 --> 00:02:50.599
So that's kind of how Node.js
got to where it is with modules.

48
00:02:50.599 --> 00:02:56.133
Where we are now with Node.js is that
we have two different types of modules.

49
00:02:56.133 --> 00:02:58.618
So we have the, for lack of better words,

50
00:02:58.618 --> 00:03:02.105
the common modules cuz it's
literally called CommonJS.

51
00:03:02.105 --> 00:03:07.284
But it's also very common to see
these modules where you'll see things

52
00:03:07.284 --> 00:03:13.254
like exports, require, and literally
the word module, you'll see that a lot.

53
00:03:13.254 --> 00:03:14.746
So what does that look like?

54
00:03:14.746 --> 00:03:16.530
Well, let's make some modules.

55
00:03:16.530 --> 00:03:20.589
So if we go back into our file here,
and we have a piece of code here,

56
00:03:20.589 --> 00:03:23.212
let's call it action, it's a function.

57
00:03:23.212 --> 00:03:26.436
Right now this is just a piece of code,
it's just a function,

58
00:03:26.436 --> 00:03:28.180
it doesn't really do anything.

59
00:03:28.180 --> 00:03:31.486
I'm just logging, hello, and
I could run this in the browser,

60
00:03:31.486 --> 00:03:34.314
I could also run this in Node and
it would work the same.

61
00:03:34.314 --> 00:03:36.606
It doesn't do anything,
I'm not even calling the function.

62
00:03:36.606 --> 00:03:41.386
But the difference is,
if I wanted to share this action function

63
00:03:41.386 --> 00:03:46.256
with another JavaScript file
somewhere else in my application,

64
00:03:46.256 --> 00:03:50.077
in the browser by having
this in the file right now.

65
00:03:50.077 --> 00:03:52.378
It's gonna be attached to the global so

66
00:03:52.378 --> 00:03:55.597
I can access it via window
in the next JavaScript file.

67
00:03:55.597 --> 00:03:57.763
But in Node.js, there is no window and

68
00:03:57.763 --> 00:04:00.793
nothing gets attached to
the global space by default.

69
00:04:00.793 --> 00:04:05.191
Because all your files inside of
Node.js actually get encapsulated in

70
00:04:05.191 --> 00:04:07.618
own little module so they don't leak.

71
00:04:07.618 --> 00:04:10.628
There its not gonna get attached
to the window by default.

72
00:04:10.628 --> 00:04:14.815
So what you have to do here to be
able to expose this piece of code,

73
00:04:14.815 --> 00:04:18.538
that way it can be used in another module,
another file,

74
00:04:18.538 --> 00:04:23.268
is that you have to explicitly say I
want this piece of code to be a module,

75
00:04:23.268 --> 00:04:27.019
I want it to be usable somewhere else,
I wanna export it.

76
00:04:27.019 --> 00:04:31.210
So with the CommonJS syntax you
will see something like this,

77
00:04:31.210 --> 00:04:36.142
you will see module.exports = and
then whatever you want it to export.

78
00:04:36.142 --> 00:04:39.068
So in this case,
I wanna export the action function.

79
00:04:39.068 --> 00:04:45.776
And what this allows me to do is in
another file, I can call it app.js,

80
00:04:45.776 --> 00:04:51.601
I can say const action = require,
which is another Global.

81
00:04:51.601 --> 00:04:56.477
It's a function and it takes a relative
path to another JavaScript file that you

82
00:04:56.477 --> 00:04:59.045
want to bring into this JavaScript file.

83
00:04:59.045 --> 00:05:02.735
So relative to the app.js,
I wanna include index and

84
00:05:02.735 --> 00:05:05.858
I don't have to put js
here if it's a js file.

85
00:05:05.858 --> 00:05:08.640
You're gonna find out we're probably gonna
use a different type of file that we do

86
00:05:08.640 --> 00:05:09.543
have to put an extension.

87
00:05:09.543 --> 00:05:13.925
But if it's for CommonJS and it's a js
file, you don't have to put the extension,

88
00:05:13.925 --> 00:05:16.061
you can just exclude it and it will work.

89
00:05:16.061 --> 00:05:20.571
So now inside of here, I'm able to have
access to that action function and

90
00:05:20.571 --> 00:05:23.723
I can call it,
I'm gonna save both of these files.

91
00:05:23.723 --> 00:05:28.097
I'm gonna go over to my node,
my terminal here.

92
00:05:28.097 --> 00:05:29.450
I'm gonna run node.

93
00:05:29.450 --> 00:05:32.815
Instead of running it
against the index.js file,

94
00:05:32.815 --> 00:05:37.744
which just creates the function and
exports it, I'm actually gonna run it

95
00:05:37.744 --> 00:05:42.930
against the app.js file which requires
the index file and executes it there.

96
00:05:42.930 --> 00:05:47.902
So it's kinda like creating a dependency
tree, like a graph almost dependency,

97
00:05:47.902 --> 00:05:49.933
so I'm gonna run it against app.

98
00:05:49.933 --> 00:05:55.392
As you can see, it does execute the action
function which calls the log there.

99
00:05:55.392 --> 00:05:59.865
So we were able to share
this action function here to

100
00:05:59.865 --> 00:06:03.933
this app.js by using this module.exports.

101
00:06:03.933 --> 00:06:06.860
So module.exports can pretty
much export whatever you want.

102
00:06:06.860 --> 00:06:10.523
I could have wrap this in a function of,
I'm sorry, an object if I wanted to.

103
00:06:10.523 --> 00:06:13.893
I could have done however
I want it to export this.

104
00:06:13.893 --> 00:06:20.355
You might also see not so common anymore,
you'll see some people do exports.action,

105
00:06:20.355 --> 00:06:25.421
which is the equivalent of doing
something like module.exports and

106
00:06:25.421 --> 00:06:27.358
wrapping it in an object.

107
00:06:27.358 --> 00:06:30.259
You don't really see this anymore,
so I don't recommend doing that.

108
00:06:30.259 --> 00:06:33.948
I recommend just always using
module.exports at the bottom of your file

109
00:06:33.948 --> 00:06:37.403
somewhere and then exporting
the things that you want to be export.

110
00:06:37.403 --> 00:06:39.833
And the things that you
don't want to be export,

111
00:06:39.833 --> 00:06:43.706
you just don't include them here and
that way they're private to this file.

112
00:06:43.706 --> 00:06:48.100
So like I said, this is called CommonJS
and this is what's been the standard for

113
00:06:48.100 --> 00:06:51.641
Node.js for quite some time,
it's what ships with Node.js,

114
00:06:51.641 --> 00:06:54.288
it's the default module syntax for
Node.js.

115
00:06:54.288 --> 00:06:57.612
But we're gonna use the newer one
because that's the future of Node.js,

116
00:06:57.612 --> 00:06:59.151
it's the future of the browsers.

117
00:06:59.151 --> 00:07:01.390
It's the attempt of all
the browser people and

118
00:07:01.390 --> 00:07:05.022
the Node.js people coming together and,
okay, how do we simplify this?

119
00:07:05.022 --> 00:07:09.839
How do we make it to where JavaScript
is truly universal across environments?

120
00:07:09.839 --> 00:07:10.959
How about we start with the modules?

121
00:07:10.959 --> 00:07:15.379
How about we get on board with the latest
module syntax that's been adopted by

122
00:07:15.379 --> 00:07:18.318
the JavaScript ecosystem for
quite some time now?

123
00:07:18.318 --> 00:07:22.385
And that's gonna be called the ES
modules or ECMAScript modules.

124
00:07:22.385 --> 00:07:25.005
So that's what we're gonna
be using in this course,

125
00:07:25.005 --> 00:07:27.228
because we have access
to it on version 14.

126
00:07:27.228 --> 00:07:28.560
So that's what we're gonna do.

127
00:07:28.560 --> 00:07:31.865
In fact, I think it was
introduced in maybe version 10,

128
00:07:31.865 --> 00:07:35.582
don't quote me on that, but
it's been here since version 14.

129
00:07:35.582 --> 00:07:38.866
So in order to do that,
a couple of things we have to do.

130
00:07:38.866 --> 00:07:43.259
First, we have to tell Node.js what
version of modules that we want and

131
00:07:43.259 --> 00:07:45.246
there's a few ways we can do it.

132
00:07:45.246 --> 00:07:50.021
We can be explicit by
using the .mjs extension.

133
00:07:50.021 --> 00:07:54.852
I know, another file extension, I get it,
I was kind of skeptical to .jsx, and

134
00:07:54.852 --> 00:07:59.555
then .tsx, and all this stuff, like why
can't I just use js for everything?

135
00:07:59.555 --> 00:08:04.103
But yes, mjs, which is module js
is an extension that you can use.

136
00:08:04.103 --> 00:08:07.756
And by doing that,
you're going to let Node know that,

137
00:08:07.756 --> 00:08:12.443
hey, I'm using ES modules in this file so
use that instead of the .js.

138
00:08:12.443 --> 00:08:15.582
Another way you can do it is you
can actually go into what's called

139
00:08:15.582 --> 00:08:17.760
a package.JSON, which we will talk about.

140
00:08:17.760 --> 00:08:22.856
And you can just say I wanna use
type ES modules or whatever in here,

141
00:08:22.856 --> 00:08:27.224
and it will still allow you
to use the .js extension, but

142
00:08:27.224 --> 00:08:29.603
also opt in for the ES modules.

143
00:08:29.603 --> 00:08:30.885
We're gonna keep it simple and

144
00:08:30.885 --> 00:08:33.215
just be explicit that way
we don't confuse ourselves.

145
00:08:33.215 --> 00:08:36.722
We're not in a place where we're not
really sure what modules are being loaded.

146
00:08:36.722 --> 00:08:42.062
We'll just use .mjs for all of our
files going forward in this course so

147
00:08:42.062 --> 00:08:45.632
we know what's being used
as far as modules go.

148
00:08:45.632 --> 00:08:48.651
So get back to our code.

149
00:08:48.651 --> 00:08:56.612
So we looked at what this looks like
if we were to export using CommonJS.

150
00:08:56.612 --> 00:09:01.137
Now let's look at what this will look like
if we were to export using ECMAScript

151
00:09:01.137 --> 00:09:02.106
modules or ESM.

152
00:09:02.106 --> 00:09:05.504
So we still have our function here,
we can get rid of this.

153
00:09:05.504 --> 00:09:10.467
And instead we could just put
the word export in front of it.

154
00:09:10.467 --> 00:09:15.228
Not to be confused with exports,
which is CommonJS.

155
00:09:15.228 --> 00:09:19.989
Exports is a CommonJS thing that
allows you to do exactly this.

156
00:09:19.989 --> 00:09:23.102
Exports and
you will get rid of this const, I'm sorry,

157
00:09:23.102 --> 00:09:24.968
you would say exports.action.

158
00:09:24.968 --> 00:09:28.331
But the word export without the s,
not plural,

159
00:09:28.331 --> 00:09:32.368
can be placed before a variable
declaration like this and

160
00:09:32.368 --> 00:09:38.106
it's now going to expose this variable to
be able to be imported in another file.

161
00:09:38.106 --> 00:09:43.840
So we're gonna save that, but this also
creates what's called a named export.

162
00:09:43.840 --> 00:09:47.840
And the reason it's called
a named export is because when

163
00:09:47.840 --> 00:09:52.583
you import it over here in this file,
I have to import it by the name of

164
00:09:52.583 --> 00:09:56.030
the variable that comes
after the exports word.

165
00:09:56.030 --> 00:10:01.523
So in this case it was called action
cuz I was the name of the variable,

166
00:10:01.523 --> 00:10:04.668
from index and this should still work.

167
00:10:04.668 --> 00:10:09.582
So we replaced the require function with
this import keyword because it's a named

168
00:10:09.582 --> 00:10:10.160
export.

169
00:10:10.160 --> 00:10:14.157
We have to wrap the brackets around
it to actually get the name.

170
00:10:14.157 --> 00:10:18.975
And then we use the from keyword followed
by the relative path to this file to

171
00:10:18.975 --> 00:10:21.129
the module that we wanna import.

172
00:10:21.129 --> 00:10:25.493
So now we'll do that and then lastly
we need to rename these to MJS.

173
00:10:25.493 --> 00:10:32.780
So we have to say mjs,
and this has to be mjs.

174
00:10:32.780 --> 00:10:36.005
So once we get that,
we can save them, we can save it.

175
00:10:36.005 --> 00:10:40.489
We can go back to our code and
now I can run node against mjs and

176
00:10:40.489 --> 00:10:43.823
we still get the same result,
we get hello.

177
00:10:43.823 --> 00:10:46.755
So this is the syntax that we're
gonna be having going forward.

178
00:10:46.755 --> 00:10:50.744
I think this is really helpful because
browsers are now adopting ECMAScript

179
00:10:50.744 --> 00:10:51.311
modules.

180
00:10:51.311 --> 00:10:55.253
You can actually write modules in the
browser now which are really cool without

181
00:10:55.253 --> 00:10:55.978
a build tool.

182
00:10:55.978 --> 00:11:00.348
So you don't need something like webpack
or Rollup to write JavaScript modules.

183
00:11:00.348 --> 00:11:03.951
Although you still need those tools
if you wanna make a PNG image or

184
00:11:03.951 --> 00:11:07.040
a CSS follow module for
sure you still need those tools.

185
00:11:07.040 --> 00:11:10.245
But if you just writing JavaScript and
you want to have some nice modules,

186
00:11:10.245 --> 00:11:12.374
you can just do that
natively in the browser now.

187
00:11:12.374 --> 00:11:16.203
And now that you can do it in node,
I mean the code is truly universal.

188
00:11:16.203 --> 00:11:20.237
If you wrote JavaScript that didn't really
depend on any environment specific thing

189
00:11:20.237 --> 00:11:23.934
that didn't need a polyfill, you could
theoretically just write one code and

190
00:11:23.934 --> 00:11:26.920
have it executed everywhere,
depending on what the code was.

191
00:11:26.920 --> 00:11:29.853
I don't know how useful that would be,
but you could totally do it.

192
00:11:29.853 --> 00:11:33.507
So yeah, very powerful stuff here.

193
00:11:33.507 --> 00:11:35.563
Any questions on these modules?

194
00:11:35.563 --> 00:11:39.957
So the question was,
if I'm using CommonJS in a project,

195
00:11:39.957 --> 00:11:43.289
could I gradually switch over to ModuleJS?

196
00:11:43.289 --> 00:11:51.094
The tough answer is, it's the graph
nature of how dependencies work, right?

197
00:11:51.094 --> 00:11:55.684
So if I have a MJS file that I just
created because we're switching over to

198
00:11:55.684 --> 00:12:00.500
ECMA modules, but it's being consumed
by a file that was already there that

199
00:12:00.500 --> 00:12:04.665
was CommonJS, well,
now they have to interact with each other.

200
00:12:04.665 --> 00:12:10.897
So what runtime is gonna be
executed when that happens?

201
00:12:10.897 --> 00:12:13.804
And then you also have
third party modules or

202
00:12:13.804 --> 00:12:18.911
packages that you have to install that
may or may not also have those modules,

203
00:12:18.911 --> 00:12:24.272
ECMA modules or CommonJS modules, so
it's really hard to determine which one.

204
00:12:24.272 --> 00:12:27.206
And it also depends on how
you opt into the ModuleJS.

205
00:12:27.206 --> 00:12:31.900
If you explicitly go into the package that
JSON and say I'm using this explicit type,

206
00:12:31.900 --> 00:12:33.335
I'm using ECMA modules,

207
00:12:33.335 --> 00:12:36.613
then no JSON is gonna assume
the entire project is that way.

208
00:12:36.613 --> 00:12:42.543
Whereas if you only use the MJS file,
then you're opting in just for that file.

209
00:12:42.543 --> 00:12:44.531
So to give you an example of
what that will look like, so

210
00:12:44.531 --> 00:12:45.890
let's say we change this back to js.

211
00:12:49.288 --> 00:12:55.147
And then instead of putting export here,
what I will do is const action and

212
00:12:55.147 --> 00:12:58.749
I'll go back to module.exports = action.

213
00:12:58.749 --> 00:13:01.230
In fact, I'm gonna keep it the same,
so I'll do that.

214
00:13:01.230 --> 00:13:03.250
I'll wrap it so it's named.

215
00:13:03.250 --> 00:13:05.962
We'll save that, and
then we'll go back and run it.

216
00:13:05.962 --> 00:13:10.642
And you can see I do get
the same result here because

217
00:13:10.642 --> 00:13:15.338
I'm entering the app from a MJS file,
here we go.

218
00:13:15.338 --> 00:13:19.995
I pointed it to an MJS file, so
that's the entry point to the file and

219
00:13:19.995 --> 00:13:24.343
then the MJS file was able to
interrupt with the CommonJS file.

220
00:13:24.343 --> 00:13:28.162
Specifically because I knew that
imitating a named import and

221
00:13:28.162 --> 00:13:33.240
CommonJS meant that I had to basically
export an object with the name properties.

222
00:13:33.240 --> 00:13:38.183
Whereas if I did it the other way,
this wouldn't work because now MJS would

223
00:13:38.183 --> 00:13:41.571
assume that this is like a default export,
right?

224
00:13:41.571 --> 00:13:42.231
So if I ran this,

225
00:13:42.231 --> 00:13:45.456
you can see I would get an error because
there's no such thing as action, right?

226
00:13:45.456 --> 00:13:50.258
So if I got rid of this and
executed it, I get the same thing.

227
00:13:50.258 --> 00:13:52.652
So the question is, can you do it?

228
00:13:52.652 --> 00:13:55.928
Yes, you can do it, but
it's not as simple as just going in and

229
00:13:55.928 --> 00:13:57.504
changing everything to mjs.

230
00:13:57.504 --> 00:14:02.387
You have to figure out the right
module syntax to interact between

231
00:14:02.387 --> 00:14:06.670
the different dependencies
that you have across files.

232
00:14:06.670 --> 00:14:09.601
And depending on how many files you have,
that can be very tedious.

233
00:14:09.601 --> 00:14:11.916
But there is a path there,
it's just not automatic.

234
00:14:16.013 --> 00:14:19.215
&gt;&gt; Is the MJS extension a requirement?

235
00:14:19.215 --> 00:14:26.268
I mean, can we use JS and
still make it work the ES modules?

236
00:14:26.268 --> 00:14:29.120
&gt;&gt; Yes, so
if you go into the package.json,

237
00:14:29.120 --> 00:14:31.822
there is a field you can add called type.

238
00:14:31.822 --> 00:14:36.181
And I believe you put type module,
it will give you the ECMAScript module, or

239
00:14:36.181 --> 00:14:39.198
there's a specific word that
you have to put there and

240
00:14:39.198 --> 00:14:42.437
I'll look that up on the break and
give you the exact one.

241
00:14:42.437 --> 00:14:44.534
I always just use MJS so
I like to be explicit.

242
00:14:44.534 --> 00:14:49.177
But yeah, if you don't like the MJS
extension, which kind of gross,

243
00:14:49.177 --> 00:14:53.899
yes, you could just opt in the entire
project via the package.json and

244
00:14:53.899 --> 00:14:58.089
say everything is MJS that way I
can use .js and it still is MJS.

245
00:14:58.089 --> 00:14:59.886
Any other questions on modules?

246
00:14:59.886 --> 00:15:04.291
So the question is if I'm using some
other modules, whether it's like NPM, or

247
00:15:04.291 --> 00:15:08.043
maybe it's internal something else and
they're using CommonJS,

248
00:15:08.043 --> 00:15:11.550
but I wanna use ECMAScript modules
is there gonna be conflict?

249
00:15:11.550 --> 00:15:18.265
The answer is, it depends on
how they export those modules.

250
00:15:18.265 --> 00:15:22.729
The real answer is, it doesn't matter what
the conflict is, you should be able to get

251
00:15:22.729 --> 00:15:26.575
around it if you can determine on how
they actually export their modules.

252
00:15:26.575 --> 00:15:30.850
You could look at the source code,
you can see what they're doing.

253
00:15:30.850 --> 00:15:32.942
With CommonJS,
are they doing a default export?

254
00:15:32.942 --> 00:15:35.413
Are they doing a named export?

255
00:15:35.413 --> 00:15:38.918
Are they doing something like exports.?

256
00:15:38.918 --> 00:15:41.855
When you use ECMA,
there's a way around all of this, right?

257
00:15:41.855 --> 00:15:45.078
So I showed you that this is
a default export if you don't

258
00:15:45.078 --> 00:15:47.683
put brackets around it,
this is a named X, or

259
00:15:47.683 --> 00:15:52.024
I'm sorry, this is a default import
if you don't put brackets around it.

260
00:15:52.024 --> 00:15:54.812
And this is a named import,
if you do put brackets around it.

261
00:15:54.812 --> 00:15:59.533
So it really just depends on how that
maintainer or the author of that package

262
00:15:59.533 --> 00:16:03.245
exported those modules and
how you can interact with them.

263
00:16:03.245 --> 00:16:05.968
But there is a path for
every scenario for you to do that.

264
00:16:05.968 --> 00:16:09.944
And then as far as the ones that ship
with know that we'll talk about,

265
00:16:09.944 --> 00:16:14.490
they're already supported by ECMASript
modules, so, they're good to go.

266
00:16:14.490 --> 00:16:18.460
We don't have to wait on then to update
anything we can just start using them

267
00:16:18.460 --> 00:16:20.238
right now without the CommonJS.

268
00:16:20.238 --> 00:16:24.489
All right, so far we've just
been talking theoretical stuff,

269
00:16:24.489 --> 00:16:26.229
not a lot of hands on work.

270
00:16:26.229 --> 00:16:29.965
But this is just some of the stuff
that I really wanted to explain and

271
00:16:29.965 --> 00:16:32.233
really want everyone to get the hold of,

272
00:16:32.233 --> 00:16:36.522
to get their hands around, that way we
can actually start doing some stuff.

273
00:16:36.522 --> 00:16:39.786
So the one thing I did
wanna talk about is some of

274
00:16:39.786 --> 00:16:42.899
the internal modules that ships with node.

275
00:16:42.899 --> 00:16:45.735
So it's kind of like the global's
that shipped with node,

276
00:16:45.735 --> 00:16:49.591
you can think of them as that, but just in
a module form things that we can import,

277
00:16:49.591 --> 00:16:52.732
that's already given to us without
having to install anything.

278
00:16:52.732 --> 00:16:56.996
So, few of the favorites you'll
see like File System which is FS,

279
00:16:56.996 --> 00:16:58.531
we're gonna use that.

280
00:16:58.531 --> 00:17:02.578
Path which is great for interacting
with file paths and transforming and

281
00:17:02.578 --> 00:17:05.309
manipulating them which
is extremely helpful.

282
00:17:05.309 --> 00:17:08.363
Child Process is a really great one,
it's used for

283
00:17:08.363 --> 00:17:13.124
spawning sub processes that happen in
the background that can communicate with

284
00:17:13.124 --> 00:17:17.688
a main process to do tedious tasks and
CPU intensive tasks things like that.

285
00:17:17.688 --> 00:17:22.713
And then HTTP, which is the foundation
of pretty much any server interaction,

286
00:17:22.713 --> 00:17:25.420
any Internet interaction with Node.js.

287
00:17:25.420 --> 00:17:29.426
It has access to the OS level,
sockets and connections and

288
00:17:29.426 --> 00:17:35.120
exposes them via a JavaScript API
that we can find useful in Node.js.

289
00:17:35.120 --> 00:17:37.627
So you could experiment
with these if you want, but

290
00:17:37.627 --> 00:17:40.560
we're gonna go through a lot
of them in the next exercises.

