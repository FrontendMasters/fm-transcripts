WEBVTT

1
00:00:00.740 --> 00:00:02.400
And yes, it's not bad.

2
00:00:02.400 --> 00:00:05.115
I mean, you could go ahead and
write a bunch of unit tests for

3
00:00:05.115 --> 00:00:07.040
a bunch of code with this.

4
00:00:07.040 --> 00:00:09.818
But I don't know if you
would want to because one,

5
00:00:09.818 --> 00:00:12.608
the reporting mechanism
is not that easy to read.

6
00:00:12.608 --> 00:00:15.318
Can you imagine if you had
like 20 tests fail, and

7
00:00:15.318 --> 00:00:19.287
this was just like what you pulled open
times 20 inside of a log file on your

8
00:00:19.287 --> 00:00:23.283
server somewhere like this would be
terrible, right and the CI or GitHub.

9
00:00:23.283 --> 00:00:25.850
You wouldn't want to see this
be really hard to parse through.

10
00:00:25.850 --> 00:00:27.160
So the reporting is bad.

11
00:00:28.400 --> 00:00:30.937
And it just really wasn't that flexible.

12
00:00:30.937 --> 00:00:36.224
What if we, like right now, I don't have
like any formatting up here about what I'm

13
00:00:36.224 --> 00:00:41.296
actually testing, what piece of unit and
then what I'm testing that unit four.

14
00:00:41.296 --> 00:00:44.114
I logged it here so you can see it,
but it doesn't really stand out so

15
00:00:44.114 --> 00:00:45.207
it's really hard to see.

16
00:00:45.207 --> 00:00:48.687
And I don't really get any indication
of like, how many tests I ran,

17
00:00:48.687 --> 00:00:51.087
how long the test took to ran,
how many failed,

18
00:00:51.087 --> 00:00:53.610
how many passed just like
the statistics on that.

19
00:00:54.800 --> 00:00:59.300
That's not saying we can't make it,
using the assert lib module.

20
00:00:59.300 --> 00:01:01.040
We could totally make all that stuff.

21
00:01:01.040 --> 00:01:03.260
But again, why would you reinvent
the wheel when there's already good

22
00:01:03.260 --> 00:01:04.570
stuff out there?

23
00:01:04.570 --> 00:01:09.998
So we're going to use one of those things,
and there's so many of them and they

24
00:01:09.998 --> 00:01:15.526
pretty much all have been piggybacking
on a really popular one called Jasmine.

25
00:01:15.526 --> 00:01:19.091
I think that was the first one
that really took this approach, so

26
00:01:19.091 --> 00:01:23.598
Jasmine came out long time ago, and then
Mocha came out and stood on top of that.

27
00:01:23.598 --> 00:01:25.663
And that was Mocha's choice for
quit a long time.

28
00:01:25.663 --> 00:01:28.936
But now year on Jest converging
on two called jest, and

29
00:01:28.936 --> 00:01:32.991
that what we gonna use, we gonna use
jest again it on our Facebook and

30
00:01:32.991 --> 00:01:38.220
see if it just gonna roll with this
open source JavaScript stuff, right?

31
00:01:38.220 --> 00:01:42.390
So let's do that, let's install some jest.

32
00:01:42.390 --> 00:01:49.500
So we'll say npn install jest but
we're gonna say save.dev and not save.

33
00:01:49.500 --> 00:01:51.900
That's because jest is
gonna be a dev dependency.

34
00:01:51.900 --> 00:01:55.240
So a dev dependency is
exactly like a dependency.

35
00:01:55.240 --> 00:01:59.242
But it's meant to be for
development as in.

36
00:01:59.242 --> 00:02:05.465
It is not your app does not depend on
jest being installed for it to operate.

37
00:02:05.465 --> 00:02:08.523
If jest was not installed in this
application, the ad function would still

38
00:02:08.523 --> 00:02:11.060
do what it's supposed to do
because it doesn't import jest.

39
00:02:11.060 --> 00:02:12.490
It doesn't use jest.

40
00:02:12.490 --> 00:02:16.400
Jest consumes our app so
therefore it's a dev dependency.

41
00:02:16.400 --> 00:02:21.347
When our app is executed by the node
interpreter, it's not gonna include jest,

42
00:02:21.347 --> 00:02:22.670
it doesn't need it.

43
00:02:22.670 --> 00:02:23.800
So it's a dev dependency.

44
00:02:23.800 --> 00:02:28.294
And the reason that's important is
because, when you deploy or you publish to

45
00:02:28.294 --> 00:02:33.213
NPM, and someone's pulling in your code,
they don't need your dev dependencies.

46
00:02:33.213 --> 00:02:34.447
Because they're never going to run tests.

47
00:02:34.447 --> 00:02:35.570
They're never gonna run the build script.

48
00:02:35.570 --> 00:02:38.510
It should already been built, and
you should have already tested it.

49
00:02:38.510 --> 00:02:41.470
So you don't want to ship those extra
dependencies on someone's machine.

50
00:02:41.470 --> 00:02:44.948
Same thing for deploying, if you already
built inside of a CI or something like

51
00:02:44.948 --> 00:02:48.230
that, you don't need a lot of those
dependencies to be sitting up there.

52
00:02:48.230 --> 00:02:50.143
So don't even install them.

53
00:02:50.143 --> 00:02:54.498
So dev dependencies just basically give
you another Boolean to install lines, so

54
00:02:54.498 --> 00:02:55.454
you can tell NPM.

55
00:02:55.454 --> 00:02:58.593
Install jest the dependencies or
install just the dev dependencies or

56
00:02:58.593 --> 00:03:00.450
install all the dependencies.

57
00:03:00.450 --> 00:03:02.978
So it really just depends
how you want to do it.

58
00:03:02.978 --> 00:03:07.787
It's just another flag that you
can basically Boolean off on when

59
00:03:07.787 --> 00:03:09.193
you do an install.

60
00:03:09.193 --> 00:03:13.980
All right, so now that we have jest,
we can switch this over.

61
00:03:13.980 --> 00:03:18.752
Actually, we'll leave this one and we'll
just write some better tests that we can

62
00:03:18.752 --> 00:03:21.899
kind of compare, so
we'll write some more code here.

63
00:03:21.899 --> 00:03:26.743
I'm going to open up a new file, and

64
00:03:26.743 --> 00:03:30.788
I want to call this one utils.

65
00:03:30.788 --> 00:03:32.570
And I'm actually going to do a js here.

66
00:03:32.570 --> 00:03:35.930
I know we said we're going to mjs this
whole time, so this might be confusing.

67
00:03:35.930 --> 00:03:37.155
But as of right now,

68
00:03:37.155 --> 00:03:41.702
the current version of jest does not
support mjs files out of the box without

69
00:03:41.702 --> 00:03:46.790
some type of configuration that I think is
a little out of scope of this exercise.

70
00:03:46.790 --> 00:03:48.330
So I don't want to cover that.

71
00:03:48.330 --> 00:03:51.150
But the next version of jest
that you can install but

72
00:03:51.150 --> 00:03:54.560
just beta does support it with
some small configuration, but

73
00:03:54.560 --> 00:03:58.710
also didn't want to inflate and
confuse anyone with that configuration.

74
00:03:58.710 --> 00:04:03.730
So we're just gonna just switch to js and
use common js, for the course of jest.

75
00:04:03.730 --> 00:04:06.819
But that's not going to determine
how you use jest is still gonna work

76
00:04:06.819 --> 00:04:07.720
exactly the same.

77
00:04:07.720 --> 00:04:10.630
It's just determining what
type of modules we can use.

78
00:04:10.630 --> 00:04:14.853
So we will be using common js here for
Jess, so bear with me.

79
00:04:14.853 --> 00:04:19.321
I do have some code though, that I want
to test so we're gonna go grab that code.

80
00:04:19.321 --> 00:04:26.220
It's really not doing anything and
it is this code right here.

81
00:04:26.220 --> 00:04:27.670
So here's the code that we're gonna test.

82
00:04:27.670 --> 00:04:31.170
I'm literally just gonna copy and paste it
because this is not the important part.

83
00:04:31.170 --> 00:04:33.380
The important part is
the test that we're writing.

84
00:04:33.380 --> 00:04:34.800
So I'm gonna paste that in here.

85
00:04:34.800 --> 00:04:37.500
And just to go through it, so
we kind of know what we're doing.

86
00:04:37.500 --> 00:04:40.014
I have a delay function up here
that I'm using just a simulate

87
00:04:40.014 --> 00:04:41.060
asynchronous program.

88
00:04:41.060 --> 00:04:45.390
We won't be testing that, have a users
array that's basically the database.

89
00:04:45.390 --> 00:04:49.581
And then the two functions that we will be
testing will be to get new user function,

90
00:04:49.581 --> 00:04:53.595
which is a synchronous or asynchronous
function that queries the database for

91
00:04:53.595 --> 00:04:54.840
a user that has this ID.

92
00:04:56.210 --> 00:05:00.504
And it tries to, if it doesn't see that
user or throw an error, if it does,

93
00:05:00.504 --> 00:05:01.883
it'll return to user.

94
00:05:01.883 --> 00:05:06.270
The other function that we will be
testing is gonna be map object to array.

95
00:05:06.270 --> 00:05:08.870
It takes an object and a callback.

96
00:05:08.870 --> 00:05:14.740
And it basically maps over that object and
puts all the results inside of an array.

97
00:05:14.740 --> 00:05:18.370
So those are two functions we
will be testing with jest.

98
00:05:18.370 --> 00:05:22.873
So now I'm gonna make
a new test file here and

99
00:05:22.873 --> 00:05:26.649
I'm gonna call this utils.tests or

100
00:05:26.649 --> 00:05:31.540
you can even say spec I
like spec.js like that.

101
00:05:31.540 --> 00:05:33.760
And started by writing some tests.

102
00:05:33.760 --> 00:05:38.239
So to sweet about writing test with
something like jest how we're going to

103
00:05:38.239 --> 00:05:42.865
execute this and that's really important
because it means we don't really

104
00:05:42.865 --> 00:05:45.380
have to import a lot of stuff.

105
00:05:45.380 --> 00:05:49.265
So what I'm saying is,
if we head over to the package JSON,

106
00:05:49.265 --> 00:05:52.950
which I don't have,
I need to actually create that.

107
00:05:52.950 --> 00:05:59.413
So I'm just gonna say npm init like that,
there we go.

108
00:05:59.413 --> 00:06:03.208
And what's crazy is that even though
I created the package JSON later,

109
00:06:03.208 --> 00:06:04.726
after I already installed,

110
00:06:04.726 --> 00:06:08.283
you can see NPM was smart enough to
add the dependencies that I had.

111
00:06:08.283 --> 00:06:11.910
Wasn't too smart to put just in the
dependencies and not the dev dependencies.

112
00:06:11.910 --> 00:06:14.701
But there's no way you could have known
that it was a dev dependency when it

113
00:06:14.701 --> 00:06:15.690
wasn't here already.

114
00:06:15.690 --> 00:06:18.510
So it kind of got there.

115
00:06:18.510 --> 00:06:22.910
I should have emitted before I
installed but, it is what it is.

116
00:06:22.910 --> 00:06:27.650
So the sweet thing is we can
just hijack this test command.

117
00:06:27.650 --> 00:06:29.950
That we just put just here like that.

118
00:06:31.280 --> 00:06:36.049
And because we're executing the jests
tests and the jests environment with

119
00:06:36.049 --> 00:06:40.830
the jest CLI we don't have to actually
import any of the stuff that jest has.

120
00:06:40.830 --> 00:06:44.479
It's just injected to us globally,
because it's executed in a jest context,

121
00:06:44.479 --> 00:06:46.090
which is really cool.

122
00:06:46.090 --> 00:06:48.090
So what does that actually mean?

123
00:06:48.090 --> 00:06:49.440
Well, let's write some tests.

124
00:06:49.440 --> 00:06:51.372
So typically what you do
when you write a test and

125
00:06:51.372 --> 00:06:53.800
something like jest is you import
the code you want to test.

126
00:06:55.090 --> 00:06:59.420
So in this example,
I want to import from utils.

127
00:07:00.510 --> 00:07:01.440
Sorry, I can't do that.

128
00:07:01.440 --> 00:07:02.360
We got to do this one.

129
00:07:02.360 --> 00:07:03.610
Got to do some require stuff.

130
00:07:04.780 --> 00:07:10.529
I'm gonna import from utils and
I want to get NewUser and

131
00:07:10.529 --> 00:07:14.820
then map object to array, so we got that.

132
00:07:16.650 --> 00:07:20.227
And then what you would normally do here
is you would do something called describe,

133
00:07:20.227 --> 00:07:22.440
and you can see I tried to
autocomplete from yards.

134
00:07:22.440 --> 00:07:25.450
I don't want the yards one,
I want the jest one.

135
00:07:25.450 --> 00:07:28.974
And typically the way described is is like
you're describing the piece of code that

136
00:07:28.974 --> 00:07:30.830
you're about to test in this case.

137
00:07:30.830 --> 00:07:33.041
Let's test the map object to array first.

138
00:07:33.041 --> 00:07:39.353
So 'mapObjectToArray.

139
00:07:39.353 --> 00:07:41.456
And I'm gonna do that to let
you know that it's a function.

140
00:07:41.456 --> 00:07:45.501
So we're gonna test that,
this is what we're describing.

141
00:07:45.501 --> 00:07:50.501
And then each thing that we want to test,
each assertion if I

142
00:07:50.501 --> 00:07:55.507
must rewrite a test function for
it not to be confused with.

143
00:07:55.507 --> 00:07:59.641
You see it tried to include the test
global from jest which is the same thing,

144
00:07:59.641 --> 00:08:02.887
but we don't need to do that
because it's injected for us.

145
00:08:02.887 --> 00:08:04.713
So now we can say test.

146
00:08:04.713 --> 00:08:06.730
And then I can actually write like,
what do I want to test?

147
00:08:06.730 --> 00:08:07.843
Well, let's look at the code.

148
00:08:07.843 --> 00:08:14.754
I want to make sure that this puts the,
I'm gonna make sure that it calls,

149
00:08:14.754 --> 00:08:21.450
now I want to make sure that it actually
just does what is supposed to do.

150
00:08:21.450 --> 00:08:23.930
It returns an array of all the map values.

151
00:08:23.930 --> 00:08:26.640
So I'm going to pass it something and
then I'm going to see what the output is.

152
00:08:26.640 --> 00:08:28.700
And if it doesn't match,
it didn't do its job.

153
00:08:28.700 --> 00:08:32.320
So either the code is wrong or my test
is wrong, and we had to figure it out.

154
00:08:32.320 --> 00:08:37.090
So I'm going to test that it maps

155
00:08:37.090 --> 00:08:42.043
values to array using callback.

156
00:08:42.043 --> 00:08:45.720
So that's what we're going to test, and

157
00:08:45.720 --> 00:08:51.088
now what we can do is we can
say results=mapObjectToArray.

158
00:08:51.088 --> 00:08:57.020
I'm going to pass in an object and
we'll call it, this is a food order.

159
00:08:57.020 --> 00:09:00.590
So, where's there a shake, yes.

160
00:09:00.590 --> 00:09:05.580
Did we have fries and were they good, no.

161
00:09:07.700 --> 00:09:11.770
And was it fast, yes.

162
00:09:11.770 --> 00:09:15.147
So we have these objects here,
we want to map them to an array.

163
00:09:15.147 --> 00:09:18.058
So if my code is doing what
I think it's doing well,

164
00:09:18.058 --> 00:09:21.050
I guess now I got to pass it
a callback equals to that.

165
00:09:21.050 --> 00:09:24.130
Let's do that was, so
a call back over here.

166
00:09:25.600 --> 00:09:31.117
So if we do a call back, I can take
each one of these should be like a k and

167
00:09:31.117 --> 00:09:33.130
a v here a key and a value.

168
00:09:34.750 --> 00:09:39.760
And I'll just basically,
actually, this is not a good one.

169
00:09:39.760 --> 00:09:41.150
Let's do some numbers here.

170
00:09:41.150 --> 00:09:45.013
Numbers will be better to test,

171
00:09:45.013 --> 00:09:51.610
let's say age:30, height:65 whatever.

172
00:09:51.610 --> 00:09:56.017
So we got that, so
now if I map over these and

173
00:09:56.017 --> 00:10:00.830
I say return V* or V+10, there we go.

174
00:10:00.830 --> 00:10:03.264
So I should get back
an array of two things.

175
00:10:03.264 --> 00:10:06.723
And it should say 40 and 75.

176
00:10:06.723 --> 00:10:07.640
So that's what I expect.

177
00:10:07.640 --> 00:10:11.620
So I'm going to say expect which
is another global from jest.

178
00:10:11.620 --> 00:10:14.440
You can see I try to auto
import I don't need it.

179
00:10:14.440 --> 00:10:17.509
So I can say expect(results).

180
00:10:19.310 --> 00:10:24.129
Then I can say toEqual and I want to do
equal because I'm about to compare two

181
00:10:24.129 --> 00:10:29.420
arrays that are two different arrays
in memory we have the same value.

182
00:10:29.420 --> 00:10:33.690
So toEqual is a deep equality check and
not a exact match.

183
00:10:33.690 --> 00:10:36.390
I want to do an exact
match I would say toBe.

184
00:10:36.390 --> 00:10:40.008
And that would say is this array exactly
this array and that's not what we want,

185
00:10:40.008 --> 00:10:42.335
we just want to make sure
they have the same values.

186
00:10:42.335 --> 00:10:50.000
So I'm going to say it should
be an array of ([40, 75]).

187
00:10:50.000 --> 00:10:55.112
So let's try that, so now what we can
do is we can run the npm tests, and

188
00:10:55.112 --> 00:11:00.590
I think we're gonna get an issue because
we have this other test file here.

189
00:11:00.590 --> 00:11:05.010
Let's get rid of this right quick so
it doesn't interfere.

190
00:11:05.010 --> 00:11:11.230
I'll just rename it and just not
put a speck in there, there we go.

191
00:11:11.230 --> 00:11:14.470
So now I can just say npm test.

192
00:11:16.170 --> 00:11:20.580
And you can see jest says
cool this pass this file.

193
00:11:20.580 --> 00:11:22.310
Here's what you were testing.

194
00:11:22.310 --> 00:11:24.130
Here's the actual test.

195
00:11:24.130 --> 00:11:28.904
Check mark means it passed, 1 passed
of the all the test suites, 1 total,

196
00:11:28.904 --> 00:11:31.970
total tests,
snapshots of already snapshots.

197
00:11:31.970 --> 00:11:34.460
What we're not doing, and
just how long it took in general.

198
00:11:34.460 --> 00:11:35.840
And then it ran all test suites.

199
00:11:35.840 --> 00:11:38.600
So as you can see,
the output is this a lot better.

200
00:11:38.600 --> 00:11:42.515
If you can imagine just a bunch of
these with green checkmarks on them, or

201
00:11:42.515 --> 00:11:43.940
red X if they failed.

202
00:11:43.940 --> 00:11:47.860
This is a lot easier to see and
visualize than anything else.

203
00:11:47.860 --> 00:11:49.590
So it's not that like is
doing anything different.

204
00:11:49.590 --> 00:11:52.120
It's just one it gives us a better output.

205
00:11:52.120 --> 00:11:55.770
And two, it's a little easier
to develop with in my opinion.

206
00:11:55.770 --> 00:11:58.140
Although asserts really
not that bad is just,

207
00:11:58.140 --> 00:12:00.400
there's a lot of setup
here that I had to do.

208
00:12:02.140 --> 00:12:06.030
Whereas jest, yeah, there's a lot of
ceremony with the describe in the test.

209
00:12:06.030 --> 00:12:09.520
I think it's necessary ceremony,
it kind of works.

210
00:12:09.520 --> 00:12:13.210
So that's how you would write
just a basic test here,

211
00:12:13.210 --> 00:12:16.570
we can move on to doing
something like a spy.

212
00:12:16.570 --> 00:12:19.565
So for instance, we know that we
have to pass in a callback here, but

213
00:12:19.565 --> 00:12:22.530
I want to test to make sure that
the callback actually gets called.

214
00:12:22.530 --> 00:12:28.840
I'm not sure that if it gets called
I want to make sure that it does,

215
00:12:28.840 --> 00:12:33.130
so callback gets called, so we'll do this.

216
00:12:35.070 --> 00:12:37.710
And we'll just copy this right here.

217
00:12:37.710 --> 00:12:40.200
But before, I'm not gonna
actually add this callback here.

218
00:12:40.200 --> 00:12:41.800
I don't really care
what the callback does.

219
00:12:41.800 --> 00:12:46.765
I'm just gonna call this a mock
callback and I'm gonna make that.

220
00:12:46.765 --> 00:12:54.800
So, const mockCb = jest.fn.

221
00:12:54.800 --> 00:12:57.250
So that's just gonna
create a mock callback.

222
00:12:57.250 --> 00:13:00.732
And as you see, I'm using this jest
keyword here, that's also injected into

223
00:13:00.732 --> 00:13:04.507
the global space because we're running
it into adjust runtimes, pretty amazing.

224
00:13:04.507 --> 00:13:08.063
So now I can say,

225
00:13:08.063 --> 00:13:14.171
expect(mockCb).to).

226
00:13:14.171 --> 00:13:17.025
It's like expect(mockCb).

227
00:13:19.153 --> 00:13:21.444
What is it, I can't remember,
I have it here.

228
00:13:21.444 --> 00:13:29.360
In my test, what we want to see,
yeah, mockCb.mock.calls, there we go.

229
00:13:29.360 --> 00:13:35.212
Sorry to keep up with, so
that (mock.calls.length).toBe,

230
00:13:35.212 --> 00:13:39.181
well, I know this callback
is going to run for

231
00:13:39.181 --> 00:13:43.680
as many key value pairs as
in this object right now.

232
00:13:43.680 --> 00:13:47.350
There's 2, so it should be 2,
should have been called twice.

233
00:13:47.350 --> 00:13:48.540
So, I'm gonna check that out.

234
00:13:48.540 --> 00:13:49.610
To see if that works.

235
00:13:49.610 --> 00:13:51.640
Let's make this fail so
we can see what happens.

236
00:13:51.640 --> 00:13:52.752
So let's make that fail.

237
00:13:55.017 --> 00:14:00.926
And you can see right there,
we got a fail on mapObjectsToArray,

238
00:14:00.926 --> 00:14:04.161
callback gets called that failed.

239
00:14:04.161 --> 00:14:10.284
Expected 2, I'm sorry,
expected 33, but received 2.

240
00:14:10.284 --> 00:14:12.987
And you can see where it colors out,
so here's the expected and

241
00:14:12.987 --> 00:14:15.140
here's what it actually got.

242
00:14:15.140 --> 00:14:17.416
And even points to like where
you wrote the code, and

243
00:14:17.416 --> 00:14:19.750
then you get all this really cool stuff.

244
00:14:19.750 --> 00:14:21.850
So it's really great how this works.

245
00:14:21.850 --> 00:14:23.851
So now you will go back like well, no,

246
00:14:23.851 --> 00:14:26.930
this test is right you should
have been caught 33 times.

247
00:14:26.930 --> 00:14:29.886
So now the code is wrong,
but more realistically,

248
00:14:29.886 --> 00:14:31.690
it looks like my test is wrong.

249
00:14:31.690 --> 00:14:36.720
So obviously I will change that to 2 and
now my test will work.

250
00:14:36.720 --> 00:14:40.510
So now we get all these green check marks,
which is like the best feeling.

251
00:14:40.510 --> 00:14:42.940
It's so
good when you do a pull request and

252
00:14:42.940 --> 00:14:46.492
the CI says you're good to go
to all those green check marks.

253
00:14:46.492 --> 00:14:49.024
It feels so good because then like,
you'll be out.

254
00:14:49.024 --> 00:14:51.547
You'll like, do a PR and
then you'll walk away and

255
00:14:51.547 --> 00:14:53.431
you'll go like fix a grilled cheese.

256
00:14:53.431 --> 00:14:56.596
Then you look at your slack from
the bot that messaged you and it says,

257
00:14:56.596 --> 00:14:57.850
your test failed.

258
00:14:57.850 --> 00:14:58.954
And you're just like dang,

259
00:14:58.954 --> 00:15:02.080
I can't even eat this grilled cheese
now cuz no one was gonna hit you up.

260
00:15:02.080 --> 00:15:03.770
You got to do a rollback or whatever.

261
00:15:03.770 --> 00:15:06.290
So it was really nice to
see those green checkmarks

