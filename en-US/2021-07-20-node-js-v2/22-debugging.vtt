WEBVTT

1
00:00:00.030 --> 00:00:05.550
We just finished talking about testing,
unit testing and node.js with jest and

2
00:00:05.550 --> 00:00:10.430
how amazing of a tool that is and
just how easy it could be to write tests.

3
00:00:10.430 --> 00:00:13.220
And also just to emphasize how
important it can be to write tests.

4
00:00:13.220 --> 00:00:16.175
So write your tests and use just.

5
00:00:16.175 --> 00:00:18.230
What I wanna get to now is,

6
00:00:18.230 --> 00:00:24.670
I wanna talk about two things I think
are important to really leave you with.

7
00:00:24.670 --> 00:00:27.690
One of them is going to be debugging,
and other one's going to be deployment.

8
00:00:27.690 --> 00:00:31.502
So, I want to tackle debugging first
because I wasn't sure what order I wanted

9
00:00:31.502 --> 00:00:34.330
to do this, but,
I want to do debugging first.

10
00:00:34.330 --> 00:00:36.160
Because, it's really important.

11
00:00:36.160 --> 00:00:41.568
I think it's really powerful and now so
if we actually go over to the site.

12
00:00:41.568 --> 00:00:45.110
I didn't put any information about
debugging because as I started digging

13
00:00:45.110 --> 00:00:48.929
about it, would have just been a bunch of
screenshots of how to do the debugging,

14
00:00:48.929 --> 00:00:50.466
which there's already other.

15
00:00:50.466 --> 00:00:53.650
So many great resources on how
to debug and chrome and stuff.

16
00:00:53.650 --> 00:00:54.730
So I was like, all right.

17
00:00:54.730 --> 00:00:57.570
I'm about to just compete with
Chrome's debugging documentation.

18
00:00:57.570 --> 00:01:01.270
So I'm going to show you how to debug or
at least, how I do it,

19
00:01:01.270 --> 00:01:04.930
and how other people do it and
how they recommend it.

20
00:01:04.930 --> 00:01:08.230
So the first one obviously,
is to just use console.log.

21
00:01:08.230 --> 00:01:12.190
Whenever you log to the console and
node, you see an output in the terminal.

22
00:01:12.190 --> 00:01:13.079
You can do that and

23
00:01:13.079 --> 00:01:16.940
that's going to get you far as bad as
far as console logging in the browser.

24
00:01:16.940 --> 00:01:20.320
It's, great for
figuring out common things.

25
00:01:20.320 --> 00:01:26.065
But for like really big bugs I do
recommend using the amazing dev tools,

26
00:01:26.065 --> 00:01:29.690
debugger that's built into like Chrome.

27
00:01:29.690 --> 00:01:32.620
It's an amazing tool and
you should be taking advantage of it.

28
00:01:32.620 --> 00:01:37.256
And although NOJS is not in Chrome,
because it uses the VA,

29
00:01:37.256 --> 00:01:42.170
it can be actually inspected
into the Chrome debugger.

30
00:01:42.170 --> 00:01:43.340
Which is really powerful.

31
00:01:44.350 --> 00:01:48.901
Also VS code, took it upon themselves
to have the same debugging

32
00:01:48.901 --> 00:01:53.959
experience in the editor built in
because VS code is built with some type

33
00:01:53.959 --> 00:01:58.790
of cross platform code that has
some similarities and everything.

34
00:01:58.790 --> 00:02:00.550
It's basically built with node right so
it has it.

35
00:02:00.550 --> 00:02:03.500
So I'm going to walk you through
how to do it in VS code.

36
00:02:03.500 --> 00:02:08.900
And then we're gonna see how to do it with
Google Chrome and how we can attach it.

37
00:02:08.900 --> 00:02:11.330
So let's pick something
that we want to debug.

38
00:02:11.330 --> 00:02:15.130
And I picked the Reddit COI,
or no, what I'm gonna pick.

39
00:02:16.610 --> 00:02:18.140
First of all, we're writing files.

40
00:02:18.140 --> 00:02:19.550
Here we go.
I'm gonna pick this one.

41
00:02:19.550 --> 00:02:22.310
So the one we were writing files with mjs.

42
00:02:22.310 --> 00:02:23.320
Let's try to debug this.

43
00:02:24.470 --> 00:02:29.370
So what we could do here is if you're in
VS code, and if you're not, don't worry,

44
00:02:29.370 --> 00:02:33.140
we'll get to the Chrome non
VS code when in a minute.

45
00:02:33.140 --> 00:02:36.560
If you hover over a line, you'll kind
of see like a dot that goes next to it.

46
00:02:36.560 --> 00:02:37.870
This is for debugging.

47
00:02:37.870 --> 00:02:39.462
Yeah.
So we'll set a breakpoint right here to

48
00:02:39.462 --> 00:02:40.700
just basically stop right here.

49
00:02:40.700 --> 00:02:46.694
And then all we got to do is if you
go over to this play debug thing or

50
00:02:46.694 --> 00:02:48.927
hit Command, shift D.

51
00:02:48.927 --> 00:02:52.030
You should have the opposite as run and
debug.

52
00:02:52.030 --> 00:02:52.760
So I'm gonna click that.

53
00:02:54.090 --> 00:02:57.800
I'm going to launch this in node JS.

54
00:02:57.800 --> 00:02:59.213
I'm gonna click that.

55
00:02:59.213 --> 00:03:04.340
And then boom, you can see that
the code actually stops right here.

56
00:03:04.340 --> 00:03:08.410
I get these controls up top that's
very similar to the Chrome tool.

57
00:03:08.410 --> 00:03:12.435
So I can continue on to execution,
I can step over a line of code,

58
00:03:12.435 --> 00:03:17.379
I can step into a function to see,
what's happening inside of this function.

59
00:03:17.379 --> 00:03:21.410
I can step out of a function
to zoom back out.

60
00:03:21.410 --> 00:03:25.550
And I can restart this whole execution
from scratch and then I can just say stop.

61
00:03:25.550 --> 00:03:28.393
So we get all access to that and
then obviously,

62
00:03:28.393 --> 00:03:30.750
over here we can look at the call stack.

63
00:03:30.750 --> 00:03:35.560
So if I get this up a little bit,
let me drop that down.

64
00:03:35.560 --> 00:03:38.260
So we can look at the call stack
of what's being called so far.

65
00:03:38.260 --> 00:03:41.603
You can see here's our file and
a bunch of internal stuff because we

66
00:03:41.603 --> 00:03:45.800
haven't really done anything other
than importing a module so far.

67
00:03:45.800 --> 00:03:50.067
And then you get to see a bunch of
whatever is injected into this file,

68
00:03:50.067 --> 00:03:54.870
so you can see a bunch of stuff here,
this actual read file function.

69
00:03:54.870 --> 00:03:56.310
So it's pretty helpful.

70
00:03:56.310 --> 00:04:00.477
You can come in here and let's see.

71
00:04:00.477 --> 00:04:01.889
Do you wanna like click on watch,

72
00:04:01.889 --> 00:04:05.280
you can watch the expressions
if I wanted to watch results.

73
00:04:05.280 --> 00:04:08.496
I say I wanna watch that to see what it is
right now it's nothing because we paused

74
00:04:08.496 --> 00:04:09.698
it right before it executed.

75
00:04:09.698 --> 00:04:15.004
But this next line,
it might be something so let's hit Play.

76
00:04:15.004 --> 00:04:19.920
And I guess I got to run a debugger
again because it didn't catch that one.

77
00:04:19.920 --> 00:04:24.710
So, let's try that again.

78
00:04:24.710 --> 00:04:29.280
Okay, I guess it just doesn't
like the fact that's easy.

79
00:04:29.280 --> 00:04:33.684
I would expect that to stop right there,
but I guess it doesn't want to wait just

80
00:04:33.684 --> 00:04:37.130
try to step over okay,
that didn't work, or go back, okay.

81
00:04:38.510 --> 00:04:40.640
I don't know what's going on with that,
that async thing.

82
00:04:40.640 --> 00:04:46.380
I would expect it to stop here so
I can see this but wait, let's try this.

83
00:04:46.380 --> 00:04:47.562
Let's see.

84
00:04:47.562 --> 00:04:50.740
It doesn't want to.

85
00:04:52.330 --> 00:04:55.061
So this is why I use console.log
a lot because it's like, okay,

86
00:04:55.061 --> 00:04:57.120
when this wants to work, it works.

87
00:04:57.120 --> 00:05:01.006
But as you see, it's pretty powerful if
you needed to check some really detailed

88
00:05:01.006 --> 00:05:05.121
intricate bug that you can't find it's,
I mean, it was literally just two clicks,

89
00:05:05.121 --> 00:05:06.110
I had to click here.

90
00:05:07.700 --> 00:05:11.858
And let's just stop this right click, and
then I had to click here and then no so

91
00:05:11.858 --> 00:05:13.460
three clicks, not so bad.

92
00:05:13.460 --> 00:05:15.530
Two clicks if you use
the keyboard shortcut.

93
00:05:15.530 --> 00:05:16.850
Super powerful.

94
00:05:16.850 --> 00:05:21.790
So what's actually happening
is VS code is tapping into

95
00:05:21.790 --> 00:05:26.500
a feature that node JS has
which is called inspect.

96
00:05:26.500 --> 00:05:33.680
So if I go into node JS, here back out,
and I want to inspect the intro.

97
00:05:33.680 --> 00:05:39.939
So I can say node and
I'm going to run the index.js so

98
00:05:39.939 --> 00:05:44.207
intro index.ngs, but not before I

99
00:05:44.207 --> 00:05:49.590
run-- inspect-brk which is for break.

100
00:05:49.590 --> 00:05:52.972
So this is going to run in specter like we
just saw, and then break immediately as

101
00:05:52.972 --> 00:05:56.470
soon as it opens otherwise it'll just like
run through it and execute and be done.

102
00:05:56.470 --> 00:05:58.160
So we want to stop immediately.

103
00:05:58.160 --> 00:05:59.120
So we're on break.

104
00:05:59.120 --> 00:06:00.356
So run that.

105
00:06:00.356 --> 00:06:05.110
You can see we get debugger
listening on this go here for help.

106
00:06:05.110 --> 00:06:05.970
That's really cool.

107
00:06:05.970 --> 00:06:07.180
So I'm gonna open up Google Chrome.

108
00:06:09.470 --> 00:06:17.560
Click on my face, and then we're gonna
go to like Chrome inspect there it is.

109
00:06:17.560 --> 00:06:20.543
So, we're going to Chrome inspect, and

110
00:06:20.543 --> 00:06:26.430
you should see that you have a target
here for that file that we're inspecting.

111
00:06:26.430 --> 00:06:30.527
So you can see it's node version 147o,
and I can click inspect, and

112
00:06:30.527 --> 00:06:35.470
it just opens up the debugger here
inside of Chrome, same experience.

113
00:06:35.470 --> 00:06:37.020
You may or may not see files here.

114
00:06:37.020 --> 00:06:38.010
If you don't see any files.

115
00:06:38.010 --> 00:06:40.360
Here, you can click Add
folder to workspace.

116
00:06:40.360 --> 00:06:43.000
And then you can go look up the folder
that's supposed to be here and

117
00:06:43.000 --> 00:06:44.760
you can just click Select and
it'll add it.

118
00:06:44.760 --> 00:06:46.850
I already did it which
is why mine is here.

119
00:06:46.850 --> 00:06:48.761
You can see the intro
folder is highlighted and

120
00:06:48.761 --> 00:06:51.900
you can see that the green file is
right here cuz that's what's paused.

121
00:06:51.900 --> 00:06:53.670
And here we are, we're right here.

122
00:06:53.670 --> 00:06:54.540
I can do the same thing.

123
00:06:54.540 --> 00:06:55.450
I can set break points.

124
00:06:56.840 --> 00:06:59.500
I can do all the same
stuff that we always did.

125
00:06:59.500 --> 00:07:03.820
And I could execute this and
continue to go on.

126
00:07:03.820 --> 00:07:08.280
So as you see, I get an error because we
left this code off in a broken state.

127
00:07:08.280 --> 00:07:11.530
So that's why the error is looking for
an HTM file, not HTML.

128
00:07:12.560 --> 00:07:14.240
So that's expected, but as you can see,

129
00:07:14.240 --> 00:07:16.310
the debugging experience
can be pretty cool.

130
00:07:16.310 --> 00:07:19.360
A lot of people don't really reach for
this tool and I really think they should.

131
00:07:19.360 --> 00:07:23.188
It's getting better every day especially
since when I started using it

132
00:07:23.188 --> 00:07:26.410
seven years ago, it's so much better now.

133
00:07:26.410 --> 00:07:30.936
So I highly recommend using the debugger
and saving accounts without logs for

134
00:07:30.936 --> 00:07:31.850
emergencies.

135
00:07:31.850 --> 00:07:34.010
Use a debugger to really flex on people.

136
00:07:34.010 --> 00:07:36.340
So, [LAUGH] use the debugger.

137
00:07:37.980 --> 00:07:41.142
Any questions about debugging and
note before we move on to deployment and

138
00:07:41.142 --> 00:07:41.760
publishing.

