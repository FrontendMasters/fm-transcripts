WEBVTT

1
00:00:00.310 --> 00:00:03.917
I have something on
the machine called HTTPie,

2
00:00:03.917 --> 00:00:08.166
I use this all the time,
I talk about a lot of my courses.

3
00:00:08.166 --> 00:00:12.967
HTTPie it's basically a theory ever heard

4
00:00:12.967 --> 00:00:17.508
of curl is like curl, but easier to use.

5
00:00:17.508 --> 00:00:20.437
You can install it if you want,
you don't have to use this,

6
00:00:20.437 --> 00:00:22.100
you can use whatever you want.

7
00:00:22.100 --> 00:00:22.906
You got postman,

8
00:00:22.906 --> 00:00:26.190
you got whatever API client you
want to interact with the API's.

9
00:00:26.190 --> 00:00:31.069
But I do recommend getting something
comfortable whether it's a GUI, postman,

10
00:00:31.069 --> 00:00:34.730
whether it's a terminal thing like HTTPie,
whatever.

11
00:00:34.730 --> 00:00:37.788
Finding your tool to interact with API's
is going to be helpful because if you're

12
00:00:37.788 --> 00:00:39.960
developing on the back end,
you're developing API's,

13
00:00:39.960 --> 00:00:41.470
you need to be able to test them.

14
00:00:41.470 --> 00:00:44.080
We'll just execute them real quick,
and see what's happening.

15
00:00:44.080 --> 00:00:46.020
Yeah, so highly recommend doing that.

16
00:00:46.020 --> 00:00:51.050
I'm gonna use HTTPie to do that and
show you how that works.

17
00:00:51.050 --> 00:00:53.220
So we're on localhost 8000.

18
00:00:53.220 --> 00:00:57.456
So I know what HTTPie, I can say
HTTP If I'm gonna be on localhost,

19
00:00:57.456 --> 00:01:01.481
I can just admit the hostname is for
the port which is 8000.

20
00:01:01.481 --> 00:01:06.520
And if I don't put anything else, it'll
just do a get request to the blank URL.

21
00:01:06.520 --> 00:01:08.740
So let's try that,
somebody will get requests.

22
00:01:08.740 --> 00:01:10.350
And you can see I get Hi.

23
00:01:10.350 --> 00:01:14.126
And that's exactly what I thought was
gonna happen because it wasn't a POST

24
00:01:14.126 --> 00:01:14.660
request.

25
00:01:14.660 --> 00:01:18.156
So went down here to this else,
it did a 200 and it said.

26
00:01:18.156 --> 00:01:21.620
Hi, so if I go back and
look, I get it, okay.

27
00:01:21.620 --> 00:01:23.570
200 means okay.

28
00:01:23.570 --> 00:01:26.000
And I get a hi.

29
00:01:26.000 --> 00:01:26.900
That's exactly what I thought.

30
00:01:26.900 --> 00:01:28.650
So let's try to do a post now.

31
00:01:28.650 --> 00:01:31.653
So I'm gonna say HTTP and
we'll say post 8000.

32
00:01:31.653 --> 00:01:34.610
And then I'm gonna post some JSON.

33
00:01:34.610 --> 00:01:40.658
So I'm gonna say color= red and

34
00:01:40.658 --> 00:01:44.780
then food=pizza.

35
00:01:44.780 --> 00:01:48.990
So this is basically creating an object
with a color field and a food fields.

36
00:01:48.990 --> 00:01:50.880
That's what's this is doing.

37
00:01:50.880 --> 00:01:53.309
We'll post that and
then I get okay, right?

38
00:01:53.309 --> 00:01:56.743
And I get this 200 it says it was created,
but if I go back and

39
00:01:56.743 --> 00:01:59.318
look at the logs,
I'm pretty sure I log this or

40
00:01:59.318 --> 00:02:02.517
go back over here you can see
there's an object we set up.

41
00:02:02.517 --> 00:02:05.700
And that was after we chunked
it all together right?

42
00:02:05.700 --> 00:02:10.404
Cuz if we go back and
look at our code, I had to chunk

43
00:02:10.404 --> 00:02:15.166
this together as in that
JSON object that was sent up

44
00:02:15.166 --> 00:02:20.380
from HTTPie was broken up
into little bits of data.

45
00:02:20.380 --> 00:02:25.160
And every time one of them came in,
I appended it to this body string.

46
00:02:25.160 --> 00:02:29.331
And then after it was all said and done, I
was able to log it which gave me that JSON

47
00:02:29.331 --> 00:02:33.379
object, right so if I wanna turn this back
into the actual object X to JSON dot

48
00:02:33.379 --> 00:02:36.950
parse this body, so
we can get some nice color output going.

49
00:02:36.950 --> 00:02:39.370
So let's stop this started again.

50
00:02:39.370 --> 00:02:40.740
Run that again.

51
00:02:40.740 --> 00:02:44.297
And then boom, you can see it's
an actual JSON object now, and

52
00:02:44.297 --> 00:02:45.800
not just a JSON string.

53
00:02:45.800 --> 00:02:46.438
It's an object.

54
00:02:46.438 --> 00:02:48.330
And that's the difference.

55
00:02:48.330 --> 00:02:51.610
So you can see that's, I mean,
yeah, that's pretty cool.

56
00:02:51.610 --> 00:02:53.540
But who wants to do this?

57
00:02:53.540 --> 00:02:54.850
I don't wanna do this.

58
00:02:54.850 --> 00:02:58.062
I don't wanna set all this stuff up and
sure this is cool if I'm just doing

59
00:02:58.062 --> 00:03:01.905
one little well, it's a post or not, what
if I have multiple routes, and sub routes,

60
00:03:01.905 --> 00:03:04.640
and dynamic paths, and
different things like that.

61
00:03:04.640 --> 00:03:05.710
It can get pretty complicated.

62
00:03:05.710 --> 00:03:09.821
I mean, you can imagine all the if
statements in here, I'm talking about,

63
00:03:09.821 --> 00:03:14.188
well, if it's a method post, and if the
URL contains this, and it has that would

64
00:03:14.188 --> 00:03:18.583
be crazy, especially if you're building
API based products I can't imagine.

65
00:03:18.583 --> 00:03:21.330
So there are tools for this.

66
00:03:21.330 --> 00:03:24.530
And I'm gonna walk you through how to
use those tools and those packages.

67
00:03:24.530 --> 00:03:29.880
But before I do that, any questions on
creating a low level server and Node JS?

68
00:03:29.880 --> 00:03:34.570
Do I have any COI frameworks that
I recommend the top of my head?

69
00:03:34.570 --> 00:03:39.340
I think I can think of two one is Caporal.

70
00:03:39.340 --> 00:03:41.610
Caporal, CLI and we'll type that in.

71
00:03:43.210 --> 00:03:45.574
Yep, this one is pretty good.

72
00:03:45.574 --> 00:03:51.480
I've used this one before, you can kind
of see the syntax, how different that is.

73
00:03:51.480 --> 00:03:53.890
So you literally get the program,
you give it a version.

74
00:03:55.300 --> 00:03:58.078
You make a command, you define
some arguments, some options, and

75
00:03:58.078 --> 00:04:00.680
then you run the callback when
someone calls that command.

76
00:04:00.680 --> 00:04:02.740
It's literally that simple.

77
00:04:02.740 --> 00:04:05.710
And it creates a nice help script for
you when someone calls help,

78
00:04:05.710 --> 00:04:09.020
it collects all your commands and
prints them out for you.

79
00:04:09.020 --> 00:04:09.740
It's really cool.

80
00:04:09.740 --> 00:04:10.895
So this one's really good.

81
00:04:10.895 --> 00:04:13.882
I think the standard that a lot
people use this commander.

82
00:04:17.303 --> 00:04:17.979
Yeah commander.

83
00:04:17.979 --> 00:04:20.500
A lot of people still use this one.

84
00:04:20.500 --> 00:04:23.970
I think this was the de facto one
back in the day it is still might be.

85
00:04:23.970 --> 00:04:27.000
I forgot why I stopped using it but
it is pretty good.

86
00:04:27.000 --> 00:04:28.590
You can see it's very similar.

87
00:04:28.590 --> 00:04:31.750
Everyone's pretty much got their
opinions based off this one.

88
00:04:31.750 --> 00:04:35.183
This is like one of the first ones created
by some guy named TJ Holloway Chuck that

89
00:04:35.183 --> 00:04:38.690
you probably will never hear up now but
it was pretty much a legend.

90
00:04:38.690 --> 00:04:42.286
In the node industry back in the day,
and still this dude's amazing, but

91
00:04:42.286 --> 00:04:43.737
pretty sure he created this.

92
00:04:43.737 --> 00:04:46.640
So yeah, that these two are pretty good.

93
00:04:46.640 --> 00:04:50.917
And I think there's
another one from Heroku,

94
00:04:50.917 --> 00:04:55.916
Heroku CLI framework, For the name of it.

95
00:04:55.916 --> 00:04:59.621
Its called oclif, yeah,
I've tried this before, but

96
00:04:59.621 --> 00:05:04.080
I don't have a lot of experience with it,
but I've heard good things.

97
00:05:04.080 --> 00:05:06.670
So ocliff is another one
that you can check out.

98
00:05:06.670 --> 00:05:07.180
But yeah,

99
00:05:07.180 --> 00:05:10.710
those are probably this is the one that
I can think of off the top of my head.

100
00:05:10.710 --> 00:05:12.370
So yeah.
Good question.

101
00:05:12.370 --> 00:05:13.650
Anything else?

102
00:05:13.650 --> 00:05:18.020
Yeah, so the question is,
do I still build servers with node JS?

103
00:05:18.020 --> 00:05:19.640
Yes, I do.

104
00:05:19.640 --> 00:05:26.550
Because, There's something not,
okay, how to describe this?

105
00:05:26.550 --> 00:05:29.575
It's not that there aren't
better tools there are.

106
00:05:29.575 --> 00:05:34.510
But sometimes you need a little more
flexibility on what you're doing.

107
00:05:34.510 --> 00:05:37.310
And just having a nice open
server is great for that.

108
00:05:37.310 --> 00:05:41.184
Sometimes I'll just go serverless and I'll
just use something functions and next as,

109
00:05:41.184 --> 00:05:44.290
but maybe I don't need a front
end I just need some API routes.

110
00:05:44.290 --> 00:05:48.105
And I need to keep it long running
because of the type of database that I'm

111
00:05:48.105 --> 00:05:49.010
connected to.

112
00:05:49.010 --> 00:05:53.171
If you ever tried to connect to a Mongo
database in the service environment,

113
00:05:53.171 --> 00:05:54.630
it's hair pulling.

114
00:05:54.630 --> 00:05:58.034
It's ridiculous cuz it's not
meant to be installed in

115
00:05:58.034 --> 00:06:01.810
an environment that's gonna be
shutting down all the time.

116
00:06:01.810 --> 00:06:04.976
It's meant to be open the whole time with
its pool, his connections being pulled and

117
00:06:04.976 --> 00:06:06.280
everything like that.

118
00:06:06.280 --> 00:06:07.865
So sometimes the servers is
a little more convenient.

119
00:06:07.865 --> 00:06:14.150
And then also, if I'm doing some
intensive stuff, I want a server.

120
00:06:14.150 --> 00:06:15.660
So it really just depends.

121
00:06:15.660 --> 00:06:20.789
But it's never at the point where it's
well, it's either this or it's that.

122
00:06:20.789 --> 00:06:25.730
It really just depends on what you're
making and what is gonna be best for

123
00:06:25.730 --> 00:06:31.564
your job, I wouldn't build a crawler index
JS, I would probably put that in node or,

124
00:06:31.564 --> 00:06:36.448
maybe a service function, but
I wouldn't added index JS along an app.

125
00:06:36.448 --> 00:06:40.329
And also, if my product was an API,
if I was a SAS company,

126
00:06:40.329 --> 00:06:43.833
a developer tools company and
my product was an API.

127
00:06:43.833 --> 00:06:50.167
I probably I wouldn't have that
product be sitting next to nextjs

128
00:06:50.167 --> 00:06:51.422
server functions.

129
00:06:51.422 --> 00:06:55.136
It would be its own thing behind
the gateway, behind a proxy,

130
00:06:55.136 --> 00:06:56.930
behind all this other stuff.

131
00:06:56.930 --> 00:06:59.766
And the only way you're gonna get there
is with an actual API and actual server.

132
00:06:59.766 --> 00:07:03.850
So yeah, cuz sometimes you
need access to those things.

133
00:07:03.850 --> 00:07:05.330
So it really just depends
on what you're doing.

134
00:07:05.330 --> 00:07:06.736
But I would say for most cases,

135
00:07:06.736 --> 00:07:09.990
if you're just,
I just need something to send back, JSON.

136
00:07:09.990 --> 00:07:13.650
Yeah, you can get away with that
without having to build a full server.

137
00:07:13.650 --> 00:07:16.125
But if you're asking that
because this seemed kinda scary,

138
00:07:16.125 --> 00:07:18.126
well wait till I show you
how to do it the easy way.

139
00:07:18.126 --> 00:07:21.840
And then maybe you won't see some scary.

140
00:07:21.840 --> 00:07:23.270
One more question, okay.

141
00:07:23.270 --> 00:07:27.938
&gt;&gt; Yeah, I don't know if you can
speak at a high level about node as

142
00:07:27.938 --> 00:07:30.680
a back end versus Java or Ruby.

143
00:07:30.680 --> 00:07:31.446
&gt;&gt; Yeah, I can.

144
00:07:31.446 --> 00:07:36.040
My current job we have a lot of backends
and a lot of different languages.

145
00:07:36.040 --> 00:07:38.530
So I've had some experience with that.

146
00:07:38.530 --> 00:07:39.038
And actually,

147
00:07:39.038 --> 00:07:41.353
the first language that I ever learned
was Ruby that I learned Python.

148
00:07:41.353 --> 00:07:44.685
And then I did learn Java, but
not for servers, but for android so

149
00:07:44.685 --> 00:07:48.927
I don't really have any server experience
there other than my current job now which

150
00:07:48.927 --> 00:07:50.090
does use a lot of Java.

151
00:07:52.270 --> 00:07:57.268
Yes, I would say,
I would always choose node high-level

152
00:07:57.268 --> 00:08:01.660
when I don't have any,
high CPU intensive tasks.

153
00:08:01.660 --> 00:08:06.280
So things like arithmetic,
A.I ,machine learning.

154
00:08:06.280 --> 00:08:07.690
Yes, you can do it a node absolutely.

155
00:08:07.690 --> 00:08:08.980
But it wasn't meant for that.

156
00:08:08.980 --> 00:08:12.977
And if you tried to do that it's like
trying to squeeze a size 15 shoe in a size

157
00:08:12.977 --> 00:08:15.762
15 foot in a size 10 shoe
is just it's gonna hurt.

158
00:08:15.762 --> 00:08:19.130
But you could probably do it.

159
00:08:19.130 --> 00:08:21.846
So you better off using node for
things like I need a JSON API,

160
00:08:21.846 --> 00:08:25.310
I need to query your database and
they send back some data, that's it.

161
00:08:25.310 --> 00:08:27.510
It's a crud API,
that's all that I'm doing.

162
00:08:27.510 --> 00:08:29.410
It's not doing crazy stuff.

163
00:08:29.410 --> 00:08:31.218
That's what you would use node for,

164
00:08:31.218 --> 00:08:35.100
cuz it's able to handle a lot of requests
out of the box without any tweaking.

165
00:08:35.100 --> 00:08:36.510
That's what it was built for.

166
00:08:36.510 --> 00:08:40.994
So if you're going for more request
per second, and you're going for

167
00:08:40.994 --> 00:08:46.010
the low CPU intensive tasks, and
JavaScript, node is a really good choice.

168
00:08:46.010 --> 00:08:50.660
In fact, the thing is you don't really
need to unless you're a billion dollar

169
00:08:50.660 --> 00:08:55.380
company where a fraction of performance
could cost you hundreds of thousands if

170
00:08:55.380 --> 00:08:56.941
not millions of dollars.

171
00:08:56.941 --> 00:08:58.954
Doesn't really matter
what language you pick,

172
00:08:58.954 --> 00:09:00.630
pick the one that works the best for you.

173
00:09:00.630 --> 00:09:01.810
It's gonna get the job done.

174
00:09:01.810 --> 00:09:05.630
No one's gonna not use your app
because you decide to use node.

175
00:09:05.630 --> 00:09:07.060
Mostly we don't even know what node is,

176
00:09:07.060 --> 00:09:09.830
especially your customers who
probably aren't technical.

177
00:09:09.830 --> 00:09:14.054
So pick the thing that allows you to get
done faster because at the end of the day,

178
00:09:14.054 --> 00:09:17.269
it's about being productive and
not about what framework or

179
00:09:17.269 --> 00:09:20.190
tools you use until it actually
does become a problem.

180
00:09:20.190 --> 00:09:23.738
If you're literally Dropbox, well, we
can't literally use this language because

181
00:09:23.738 --> 00:09:26.841
we need this one feature and it's
costing us money and, okay, then yeah,

182
00:09:26.841 --> 00:09:28.800
you should probably go figure that out.

183
00:09:28.800 --> 00:09:30.840
But most people aren't in that position.

184
00:09:30.840 --> 00:09:33.783
So high level for me,
it's always just come down to, well,

185
00:09:33.783 --> 00:09:36.910
I know JavaScript the best,
so I always choose node.

186
00:09:36.910 --> 00:09:37.640
That's it.

187
00:09:37.640 --> 00:09:41.361
It can do everything that anything else
can do up until I'm making a billion

188
00:09:41.361 --> 00:09:42.170
dollars.

189
00:09:42.170 --> 00:09:45.380
And I haven't made a billion dollars yet,
so I'm gonna keep using node probably

