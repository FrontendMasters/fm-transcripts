WEBVTT

1
00:00:00.230 --> 00:00:03.290
Now let's try to test some async code.

2
00:00:03.290 --> 00:00:04.512
This is all cool.

3
00:00:04.512 --> 00:00:07.249
You could imagine all the different
types of assertions you can do.

4
00:00:07.249 --> 00:00:08.927
You could look at the Jest documentation.

5
00:00:08.927 --> 00:00:10.143
Let's try some async code.

6
00:00:10.143 --> 00:00:13.750
So we'll say another describe here.

7
00:00:13.750 --> 00:00:17.086
And we're gonna say let's describe
this getNewUser like this.

8
00:00:21.370 --> 00:00:23.972
And we're gonna test that.

9
00:00:23.972 --> 00:00:26.050
Let's go look at the code.

10
00:00:26.050 --> 00:00:27.409
What does it do?

11
00:00:27.409 --> 00:00:31.252
Yeah, I wanna test that it finds a user.

12
00:00:31.252 --> 00:00:33.850
And then I also wanna test if it throws
an error if it doesn't find a user.

13
00:00:33.850 --> 00:00:35.169
I wanna test both cases.

14
00:00:35.169 --> 00:00:38.786
I think a lot of people, when they
write tests, they only write tests for

15
00:00:38.786 --> 00:00:39.629
the best cases.

16
00:00:39.629 --> 00:00:44.143
So in this case, they would only write
a test to see if it would get a user, and

17
00:00:44.143 --> 00:00:46.344
they would ignore everything else.

18
00:00:46.344 --> 00:00:49.110
But it's like, what you'd also wanna
test when it doesn't get user.

19
00:00:49.110 --> 00:00:51.939
Whenever there's a branch in your code,
as i an if statement, or a switch,

20
00:00:51.939 --> 00:00:54.300
there's a branch,
you should test that branch.

21
00:00:54.300 --> 00:00:58.287
In fact, there's a tool that you can
install in Jest, or any other testing

22
00:00:58.287 --> 00:01:02.024
program that will literally highlight
the code that you did test, and

23
00:01:02.024 --> 00:01:05.080
it'll highlight the code
that you didn't test.

24
00:01:05.080 --> 00:01:08.469
And it'll give you a percentage of
how much test coverage you have.

25
00:01:08.469 --> 00:01:12.431
And some companies won't even allow
you to merge a PRN unless you have

26
00:01:12.431 --> 00:01:14.530
a certain amount of test coverage.

27
00:01:14.530 --> 00:01:16.609
So if you don't know about that,
that's a thing.

28
00:01:16.609 --> 00:01:19.700
So yeah, there are tools that will
statically analyze that for you, and

29
00:01:19.700 --> 00:01:21.330
let you know how much code you tested.

30
00:01:21.330 --> 00:01:24.285
So test your branches,
not just a success pass.

31
00:01:24.285 --> 00:01:26.420
So we're gonna test both of them.

32
00:01:26.420 --> 00:01:29.606
So let's head over to our test here, and

33
00:01:29.606 --> 00:01:34.640
we're gonna write a test
to make sure it gets user.

34
00:01:34.640 --> 00:01:39.474
This is gonna be a async, so I'm gonna
prefix this with async, like this.

35
00:01:39.474 --> 00:01:43.074
And now what we're going to do
is because this is async, and

36
00:01:43.074 --> 00:01:46.890
I like to use async await,
I don't like promises or callback.

37
00:01:46.890 --> 00:01:48.273
There's a couple ways we can do this.

38
00:01:48.273 --> 00:01:50.665
I'm gonna do this the way
that I like to do it.

39
00:01:50.665 --> 00:01:57.287
And what I like to do is I
like to say expect.assertions.

40
00:01:57.287 --> 00:02:04.878
And then I can tell Jest how many
assertions I expect to happen.

41
00:02:04.878 --> 00:02:06.146
I'm sorry, no, this is get user.

42
00:02:06.146 --> 00:02:07.191
That's where the error is.

43
00:02:07.191 --> 00:02:08.086
Let's just do the get user.

44
00:02:08.086 --> 00:02:10.364
So let's see if this gets a user.

45
00:02:10.364 --> 00:02:15.964
I'm gonna say user= await
getNewUser with a ID of 1,

46
00:02:15.964 --> 00:02:20.851
cuz I think that's the only
one I have in there.

47
00:02:20.851 --> 00:02:24.700
Yeah, ID of 1, Goku.

48
00:02:24.700 --> 00:02:29.391
So we'll get the user,
and then I'll just say I

49
00:02:29.391 --> 00:02:34.093
just expect user toBeTruthy(), like that.

50
00:02:34.093 --> 00:02:35.590
So I'll say expect user toBeTruthy().

51
00:02:35.590 --> 00:02:39.230
Let me get rid of that import.

52
00:02:39.230 --> 00:02:41.012
It's not to stop you from doing multiple.

53
00:02:41.012 --> 00:02:43.800
I wish it would stop doing
that auto importing.

54
00:02:43.800 --> 00:02:50.147
There's nothing stopping
you from doing multiple

55
00:02:50.147 --> 00:02:55.320
expects inside of a test block like this.

56
00:02:55.320 --> 00:02:57.176
So we could do that.

57
00:02:57.176 --> 00:02:59.811
So I'm gonna say expect user toBeTruthy().

58
00:02:59.811 --> 00:03:05.720
I'm also gonna say
expect(user.id).toBe(1), like that.

59
00:03:05.720 --> 00:03:10.496
So we'll run this code, run the tests.

60
00:03:10.496 --> 00:03:13.118
And you could see I get a test pass,
getNewUser.

61
00:03:13.118 --> 00:03:16.898
We did get a user, and
it did get an ID of 1,

62
00:03:16.898 --> 00:03:21.875
just to make sure if I change
this to something else.

63
00:03:21.875 --> 00:03:23.520
What, did that work?

64
00:03:24.960 --> 00:03:27.819
I didn't save it, okay,
I was about to say.

65
00:03:27.819 --> 00:03:31.729
There we go.

66
00:03:31.729 --> 00:03:32.946
I put it here or there.

67
00:03:32.946 --> 00:03:33.677
Let's get rid of that.

68
00:03:33.677 --> 00:03:36.791
That was a different error.

69
00:03:36.791 --> 00:03:37.490
Okay, there we go.

70
00:03:37.490 --> 00:03:39.077
That's the proper failure.

71
00:03:39.077 --> 00:03:42.301
So received 1, expected 90.

72
00:03:42.301 --> 00:03:46.580
So obviously, my test is wrong, but
just to show you that works with async.

73
00:03:46.580 --> 00:03:50.468
But now, if I wanted to test
to see if an error was thrown,

74
00:03:50.468 --> 00:03:55.255
what I can do is I'm gonna copy this,
and I'm gonna test that should.

75
00:03:59.918 --> 00:04:02.892
I'm just gonna test no user found.

76
00:04:02.892 --> 00:04:04.045
There we go.

77
00:04:04.045 --> 00:04:12.570
So before that,
I need to say expect.assertions to be 1.

78
00:04:12.570 --> 00:04:17.326
So I do expect one expect to be called.

79
00:04:17.326 --> 00:04:20.408
And the reason I have to do that is
because I want to wrap this in a try

80
00:04:20.408 --> 00:04:23.565
catch, okay, cuz we talked about
error handling, async await.

81
00:04:23.565 --> 00:04:26.085
And the best way to do
it is have a try catch.

82
00:04:26.085 --> 00:04:33.359
And I have to tell Jest that I'm
expecting an expect to be called.

83
00:04:33.359 --> 00:04:35.961
Other than this one,
I expect another one to be called.

84
00:04:35.961 --> 00:04:39.177
And I have to say that,
because if this did not error out,

85
00:04:39.177 --> 00:04:42.734
this catch would never happen,
and then this test would pass.

86
00:04:42.734 --> 00:04:44.756
But that defeats the point of this test.

87
00:04:44.756 --> 00:04:46.459
It should error out.

88
00:04:46.459 --> 00:04:48.470
That's what I want to see.

89
00:04:48.470 --> 00:04:51.988
But because it may not error out
because the code could be wrong,

90
00:04:51.988 --> 00:04:53.957
it will never hit this catch block.

91
00:04:53.957 --> 00:04:56.687
And then according to Jest,
it's a passed test.

92
00:04:56.687 --> 00:04:59.942
But by adding this at the top,
I'm saying no,

93
00:04:59.942 --> 00:05:03.711
this fails unless at least
one expect actually runs.

94
00:05:03.711 --> 00:05:05.584
So that means this catch block has to run,
and

95
00:05:05.584 --> 00:05:08.014
this catch block is only gonna
run if this throws an error.

96
00:05:08.014 --> 00:05:11.905
And if it throws an error, then our tests
will pass, so that's how that works.

97
00:05:11.905 --> 00:05:16.511
So now we're gonna say
expect error toBeTruthy().

98
00:05:16.511 --> 00:05:21.097
We'll just start with that, and then
I'll pass in something that's definitely

99
00:05:21.097 --> 00:05:23.695
not gonna be there, and
we will run this code.

100
00:05:23.695 --> 00:05:26.039
And we'll see what happens.

101
00:05:26.039 --> 00:05:30.802
And obviously, that worked,
because this throws an error,

102
00:05:30.802 --> 00:05:34.470
and we expected the error toBeTruthy().

103
00:05:34.470 --> 00:05:35.139
So that works.

104
00:05:35.139 --> 00:05:40.940
So if we do this, now this is gonna fail,
because it doesn't throw an error, right?

105
00:05:40.940 --> 00:05:45.504
So now it failed, because hey,
we expected one assertion to be called.

106
00:05:45.504 --> 00:05:50.032
Well, the catch never triggered,
because this never threw an error,

107
00:05:50.032 --> 00:05:52.610
because there is a user with the ID of 1.

108
00:05:52.610 --> 00:05:55.352
So then that means, well, either my
code is wrong, or my test is wrong.

109
00:05:55.352 --> 00:05:56.993
Well, in this case, my test is wrong.

110
00:05:56.993 --> 00:05:59.970
I didn't pass it the right
input to trigger an error.

111
00:05:59.970 --> 00:06:00.728
So if I want an error,

112
00:06:00.728 --> 00:06:03.570
I need to pass in the right input
to actually get that error.

113
00:06:03.570 --> 00:06:07.223
And then we're back to business
with all green checkmarks.

114
00:06:07.223 --> 00:06:09.091
So this is how you would run tests.

115
00:06:09.091 --> 00:06:12.753
Typically, you would see per
every file has its own test,

116
00:06:12.753 --> 00:06:15.160
if that's how you're doing things.

117
00:06:16.380 --> 00:06:19.592
And you could hook this up to a CI,
pull request flow, deployment flow,

118
00:06:19.592 --> 00:06:21.289
different things like that, run it.

119
00:06:21.289 --> 00:06:24.634
Some people put them on hooks before they
push up to GitHub before they do a commit,

120
00:06:24.634 --> 00:06:25.849
different things like that.

121
00:06:25.849 --> 00:06:29.166
They're all really good scenarios,
and whatever works for your team.

122
00:06:29.166 --> 00:06:30.771
But yeah,
this is how you would write test.

123
00:06:30.771 --> 00:06:32.885
And this is really just the beginning.

124
00:06:32.885 --> 00:06:35.369
With Jest,
you can add different reporters.

125
00:06:35.369 --> 00:06:37.150
So right here, this is a reporter.

126
00:06:37.150 --> 00:06:39.438
This is something that
reports to our terminal, but

127
00:06:39.438 --> 00:06:42.040
you could have different things
that report to HTML files.

128
00:06:42.040 --> 00:06:44.936
So you can actually get a website
built for you of all the results,

129
00:06:44.936 --> 00:06:48.650
like code coverage, and things like that,
or you can change the output of this.

130
00:06:48.650 --> 00:06:50.980
I was building curriculum for

131
00:06:50.980 --> 00:06:56.209
some custom classroom that tracked
how many times you would fail.

132
00:06:56.209 --> 00:06:59.065
And then it would send you
answer some stack overflow.

133
00:06:59.065 --> 00:07:01.634
And then it would show the teachers
what you were struggling with, so

134
00:07:01.634 --> 00:07:04.680
they knew what you were struggling on cuz,
they saw you failing it a lot.

135
00:07:04.680 --> 00:07:07.086
They can get really crazy
with the reporters and

136
00:07:07.086 --> 00:07:09.710
do some really amazing stuff there.

137
00:07:09.710 --> 00:07:11.837
So yeah, this is Jest.

138
00:07:11.837 --> 00:07:15.890
And pretty much every other testing
framework works very similar to this,

139
00:07:15.890 --> 00:07:20.545
since Jest was heavily inspired by those
frameworks like Jasmine and Mocha.

140
00:07:20.545 --> 00:07:23.394
So yeah,
that's how you write test in Node.js.

141
00:07:23.394 --> 00:07:25.252
And again, this is unit tests.

142
00:07:25.252 --> 00:07:28.845
Jest also supports snapshot testing,
which is great for UIs.

143
00:07:28.845 --> 00:07:34.969
And basically, what that is, it'll take
the string representation of your UI,

144
00:07:34.969 --> 00:07:38.447
so the HTML, the classes,
all those things.

145
00:07:38.447 --> 00:07:41.373
And it'll just write that to a file
with the exact spaces and everything.

146
00:07:41.373 --> 00:07:43.793
Everything that's rendered out,
it'll write that to a file.

147
00:07:43.793 --> 00:07:47.920
And then when you run it again, or write
it to a file again, it'll compare the two.

148
00:07:47.920 --> 00:07:51.048
If those two strings don't match exactly,
then the snapshot failed.

149
00:07:51.048 --> 00:07:54.420
That means someone's changed something in
its dom that resulted in the HTML looking

150
00:07:54.420 --> 00:07:55.250
different.

151
00:07:55.250 --> 00:07:56.773
That's called a snapshot test.

152
00:07:56.773 --> 00:08:00.958
But if you purposely did make a change,
then you gotta tell Jest to update the new

153
00:08:00.958 --> 00:08:04.162
snapshots, because you actually
did want to make a change.

154
00:08:04.162 --> 00:08:06.247
So that's a really great way to test UIs.

155
00:08:06.247 --> 00:08:07.690
There's other ways you can do it.

156
00:08:07.690 --> 00:08:10.116
But those require browsers
like taking screenshots and

157
00:08:10.116 --> 00:08:13.450
putting it on top of each other,
or doing an end-to-end test.

158
00:08:13.450 --> 00:08:14.884
Those require a browser.

159
00:08:14.884 --> 00:08:18.000
But for the most part, you can get
away with snapshot testing with Jest.

160
00:08:19.320 --> 00:08:21.730
Okay, any questions on testing with Jest?

161
00:08:22.930 --> 00:08:29.942
So how do we test code that's internal to
a module that we don't have access to?

162
00:08:29.942 --> 00:08:35.650
Okay, first of all, you should not be
testing code that you did not write.

163
00:08:35.650 --> 00:08:36.485
You just shouldn't.

164
00:08:36.485 --> 00:08:37.834
I'm just gonna say that.

165
00:08:37.834 --> 00:08:41.360
There's just no reason why you should
test to see if something works.

166
00:08:41.360 --> 00:08:44.670
Whoever wrote that should have
already written test for it, so

167
00:08:44.670 --> 00:08:46.490
the test should live in that repo.

168
00:08:46.490 --> 00:08:47.580
If it's an internal module,

169
00:08:47.580 --> 00:08:50.180
then you can just trust that
the node team already tested it.

170
00:08:50.180 --> 00:08:52.897
If it's an NPM module that you installed,
then they should have tested it.

171
00:08:52.897 --> 00:08:54.480
You don't wanna write test.

172
00:08:54.480 --> 00:08:58.764
Now, if you're saying that your code
consumes those modules, and you want to,

173
00:08:58.764 --> 00:09:02.110
I don't know,
how do you mock those out or handle them?

174
00:09:02.110 --> 00:09:04.142
Well, yeah, you could do something
very similar to what I did here.

175
00:09:04.142 --> 00:09:08.512
But like mocking calls, Jest also

176
00:09:08.512 --> 00:09:13.485
supports mocking full blown modules,

177
00:09:13.485 --> 00:09:18.766
I think if you make a folder called mocks.

178
00:09:18.766 --> 00:09:21.900
And inside this folder,
you make another folder.

179
00:09:23.050 --> 00:09:25.220
That is the exact name of
the module that you wanna mock.

180
00:09:25.220 --> 00:09:28.125
For instance, if I wanted to mock lodash,
I could do that.

181
00:09:28.125 --> 00:09:31.995
And then inside of here, I put a file,
Jest will read this file,

182
00:09:31.995 --> 00:09:34.943
instead of reading
the lodash from node module.

183
00:09:34.943 --> 00:09:37.660
So you can mock out the entire
module if you want to.

184
00:09:37.660 --> 00:09:40.403
But again, that's not for
you to test it, obviously.

185
00:09:40.403 --> 00:09:44.942
That's just so you can get around
this code being in your code, and

186
00:09:44.942 --> 00:09:46.170
it being in a way.

187
00:09:46.170 --> 00:09:49.881
For example, if you've ever written it
back and had to use something like stripe,

188
00:09:49.881 --> 00:09:51.906
and there's all these stripe calls around.

189
00:09:51.906 --> 00:09:54.906
Or any API where it's like you don't
wanna hit the API during testing,

190
00:09:54.906 --> 00:09:57.814
especially if they're charging you for
it, and there's latency.

191
00:09:57.814 --> 00:10:01.352
You'd probably wanna mock out those API
calls to these third party services that

192
00:10:01.352 --> 00:10:02.977
you're using during your testing.

193
00:10:02.977 --> 00:10:04.279
There's no point.

194
00:10:04.279 --> 00:10:06.920
You don't need to test to
see if stripes API works.

195
00:10:06.920 --> 00:10:08.192
That's not your responsibility.

196
00:10:08.192 --> 00:10:09.147
They do enough of that.

197
00:10:09.147 --> 00:10:11.541
You just need to test everything
that interacts with that.

198
00:10:11.541 --> 00:10:12.849
You wanna make sure you pass and

199
00:10:12.849 --> 00:10:15.830
get the right parameters, and
you could do that with a mock function.

200
00:10:15.830 --> 00:10:18.799
And you wanna test that you
handled the output correctly, and

201
00:10:18.799 --> 00:10:20.923
you can do that with
another mock function.

202
00:10:20.923 --> 00:10:23.149
But you don't need to test
their code specifically,

203
00:10:23.149 --> 00:10:24.638
because they should be doing that.

