WEBVTT

1
00:00:00.172 --> 00:00:04.784
Any questions on errors and
error handling in Node js?

2
00:00:04.784 --> 00:00:05.435
Good question.

3
00:00:05.435 --> 00:00:08.430
How are we able to use
the process without importing it?

4
00:00:08.430 --> 00:00:13.723
Well, that's because process is an actual
global variable inside of node js.

5
00:00:13.723 --> 00:00:18.546
It's one of the globals that I talked
about here he goes to the global slide.

6
00:00:18.546 --> 00:00:20.090
I think I've talked about process here.

7
00:00:20.090 --> 00:00:23.508
Yep, so process is given to me for free.

8
00:00:23.508 --> 00:00:25.607
It's part of the global space,

9
00:00:25.607 --> 00:00:30.602
just like the keyword import is there
just like the keyword module is there.

10
00:00:30.602 --> 00:00:33.172
Process is one of those
things that you get for free.

11
00:00:33.172 --> 00:00:37.728
I don't know how node determines what
should be internal module that you have to

12
00:00:37.728 --> 00:00:41.264
import versus what should be
a global that's just there, but

13
00:00:41.264 --> 00:00:45.759
they decided that process was gonna be
a global that you don't have to import.

14
00:00:45.759 --> 00:00:49.077
Whereas fs has got to be something
that you do have to import.

15
00:00:49.077 --> 00:00:53.080
I think there's like a level of like
importance, process is very important.

16
00:00:53.080 --> 00:00:56.770
I would imagine there's really not too
many apps you can use without building,

17
00:00:56.770 --> 00:00:59.150
without interacting with
the process some point.

18
00:00:59.150 --> 00:01:02.238
So I think they felt that was so important
that it should have been a global and

19
00:01:02.238 --> 00:01:03.892
not something that should be imported.

20
00:01:03.892 --> 00:01:07.973
Whereas fs yeah, you could probably make
a bunch of apps without ever using fs.

21
00:01:07.973 --> 00:01:12.416
So we'll make that import
a module that you have to import.

22
00:01:12.416 --> 00:01:13.753
I'm guessing I don't know,

23
00:01:13.753 --> 00:01:16.838
the thought behind that
&gt;&gt; What's the difference between an error

24
00:01:16.838 --> 00:01:17.909
and an exception?.

25
00:01:17.909 --> 00:01:22.887
&gt;&gt; There is, the only differences is
that an error can cause an exception.

26
00:01:22.887 --> 00:01:26.300
So if you have an error,
as in some discrepancy,

27
00:01:26.300 --> 00:01:31.216
some miscommunication in your app,
if you throw the error that raises

28
00:01:31.216 --> 00:01:34.660
an exception so
an error alone is just an object.

29
00:01:34.660 --> 00:01:39.357
It's just an object about some metadata
like here's a line of code, here's where

30
00:01:39.357 --> 00:01:43.719
it broke, here's what happened,
the type of error, nothing happens until

31
00:01:43.719 --> 00:01:48.437
you actually throw that error, which
causes an exception built into JavaScript.

32
00:01:48.437 --> 00:01:50.040
That's just how JavaScript executes.

33
00:01:50.040 --> 00:01:54.109
So yeah, you can think of an exception is
like an error that was like escalated to

34
00:01:54.109 --> 00:01:55.159
the highest level.

35
00:01:55.159 --> 00:01:58.718
It's like getting a customer service and
like speaking to a manager, that's.

36
00:01:58.718 --> 00:02:00.168
[LAUGH] That's an exception.

37
00:02:00.168 --> 00:02:02.960
Where's the errors you just calling and
complaining in the first place.

38
00:02:02.960 --> 00:02:04.945
So that's the difference.

39
00:02:04.945 --> 00:02:05.879
This is gonna come in handy.

40
00:02:05.879 --> 00:02:07.717
So I want you to remember the error stuff.

41
00:02:07.717 --> 00:02:12.005
And the reason I wanted to talk about this
one is because this one really messed me

42
00:02:12.005 --> 00:02:14.501
up for a long time,
especially async errors.

43
00:02:14.501 --> 00:02:16.302
I just did not understand it.

44
00:02:16.302 --> 00:02:20.031
Like I went back and looked at some of
the code that I wrote in like 2014 and

45
00:02:20.031 --> 00:02:21.330
I was just laughing like.

46
00:02:21.330 --> 00:02:22.764
[LAUGH] I wasn't handling anything.

47
00:02:22.764 --> 00:02:25.900
I wasn't doing anything like if
anyone just mistype one word,

48
00:02:25.900 --> 00:02:29.699
my whole app will crash and I just didn't,
I didn't even know it back then.

49
00:02:29.699 --> 00:02:32.725
So, yeah, pay attention to the errors.

50
00:02:32.725 --> 00:02:35.428
Luckily for you,
most of the frameworks and

51
00:02:35.428 --> 00:02:40.321
abstractions at your use will have really
nice built in error support hooks that

52
00:02:40.321 --> 00:02:44.431
you can tie in to that makes it so
easy to format things and do stuff.

53
00:02:44.431 --> 00:02:45.777
But yeah, take advantage of that.

54
00:02:45.777 --> 00:02:48.628
Watch errors and be cautious.

55
00:02:48.628 --> 00:02:50.714
The question was,
is await blocking a thread?

56
00:02:50.714 --> 00:02:53.849
And if so, why are we using it
versus just using synchronous?

57
00:02:53.849 --> 00:02:55.109
That's a really great question.

58
00:02:55.109 --> 00:02:58.824
And the fact that you asked that question
tells me that await is doing its job.

59
00:02:58.824 --> 00:03:00.660
It gives you the illusion
that is blocking a thread.

60
00:03:00.660 --> 00:03:01.896
That's the whole point.

61
00:03:01.896 --> 00:03:05.207
The whole point is that it should
feel like synchronous code.

62
00:03:05.207 --> 00:03:09.306
It should feel like It is blocking and
nothing else is happening, but

63
00:03:09.306 --> 00:03:11.859
that's not actually what's happening.

64
00:03:11.859 --> 00:03:15.637
If you were to look at what
await gets transpiled into,

65
00:03:15.637 --> 00:03:20.520
it actually gets turned into what's
called a generator, which is like,

66
00:03:20.520 --> 00:03:25.426
you can think of a generator ,it's
like an async four loop, basically.

67
00:03:25.426 --> 00:03:30.064
So it's the equivalent as if
you basically put the code that

68
00:03:30.064 --> 00:03:32.397
comes after the async await.

69
00:03:32.397 --> 00:03:36.360
inside of a dot done callback, or inside
of a callback of asynchronous function.

70
00:03:36.360 --> 00:03:41.178
It's the same thing functionally, but
visually it looks like it's blocking

71
00:03:41.178 --> 00:03:45.412
because async await was really only
created to solve a visual problem

72
00:03:45.412 --> 00:03:50.522
promises, or in fact, callbacks already
solved the functional problem of like,

73
00:03:50.522 --> 00:03:54.320
well, I want this code to run
after some asynchronous thing.

74
00:03:54.320 --> 00:03:56.028
callbacks solved that years ago.

75
00:03:56.028 --> 00:03:59.828
Promises was an attempt to
make it visually better.

76
00:03:59.828 --> 00:04:02.076
Instead of having all
these nested callbacks.

77
00:04:02.076 --> 00:04:03.753
Thanks to node and databases.

78
00:04:03.753 --> 00:04:07.701
We had these you never see this pattern
on the front end you would never see 20

79
00:04:07.701 --> 00:04:12.137
nested callbacks on the front end never on
async because you didn't make 20 API calls

80
00:04:12.137 --> 00:04:15.684
on the front ended and 20 event
handler calls nested in each other.

81
00:04:15.684 --> 00:04:19.677
It wasn't until when time come people
started interacting with other APIs and

82
00:04:19.677 --> 00:04:23.789
databases where we saw this crazy async
patterns where promises were invented to

83
00:04:23.789 --> 00:04:25.134
keep them somewhat flat.

84
00:04:25.134 --> 00:04:28.499
You can do a dot den followed by
another dot den and another catch and

85
00:04:28.499 --> 00:04:30.617
it was somewhat flat just one level deep.

86
00:04:30.617 --> 00:04:34.937
But it was still wasn't top to bottom cuz
you can put something after the dot den

87
00:04:34.937 --> 00:04:38.342
and that was still execute first
before the previous dot den so

88
00:04:38.342 --> 00:04:41.509
it was still not really solving
that problem for people.

89
00:04:41.509 --> 00:04:45.346
Understanding to read from top to bottom,
like other languages that are blocking

90
00:04:45.346 --> 00:04:47.918
that have threads like Python or
something like that.

91
00:04:47.918 --> 00:04:51.207
So async await was created to
solve the visual problem of okay,

92
00:04:51.207 --> 00:04:53.813
you're just gonna read it
from top to bottom, but

93
00:04:53.813 --> 00:04:58.179
it's still gonna work like callbacks,
okay, it's still gonna work in the back.

94
00:04:58.179 --> 00:05:01.923
In event loop is just that this code
has been added to the callback.

95
00:05:01.923 --> 00:05:03.848
So yes, it does look that way.

96
00:05:03.848 --> 00:05:06.180
But no, it is not blocking.

97
00:05:06.180 --> 00:05:09.968
&gt;&gt; So along with that,
if you're awaiting something,

98
00:05:09.968 --> 00:05:13.007
can you continue to process other things?

99
00:05:13.007 --> 00:05:17.782
&gt;&gt; No, cuz if you put await
in front of something,

100
00:05:17.782 --> 00:05:22.561
the next line won't execute
until read file comes

101
00:05:22.561 --> 00:05:26.227
back with a result or throws an error.

102
00:05:26.227 --> 00:05:29.151
It won't even be read and
wanting to be seen.

103
00:05:29.151 --> 00:05:31.897
Because it's the equivalent
of putting it in a callback.

104
00:05:31.897 --> 00:05:33.113
It just won't happen.

105
00:05:33.113 --> 00:05:37.986
So no you cannot continue to process
something that defeats the purpose of

106
00:05:37.986 --> 00:05:38.780
the await.

107
00:05:38.780 --> 00:05:43.039
If you want to continue processing
something while something else

108
00:05:43.039 --> 00:05:45.169
is happening in the background,

109
00:05:45.169 --> 00:05:49.817
then you won't use async await you will
use a callback or you use dot den.

110
00:05:49.817 --> 00:05:52.594
And then now you can have code
that reads from top to bottom but

111
00:05:52.594 --> 00:05:54.843
then jumps back up when
it's done which is fine.

112
00:05:54.843 --> 00:05:57.483
Like it's not hard to follow
that code until it gets crazy.

113
00:05:57.483 --> 00:06:01.413
But async await tries to get rid
of that as much as possible.

114
00:06:01.413 --> 00:06:06.416
Me personally, I use async await for
everything because I think it's amazing.

115
00:06:06.416 --> 00:06:09.427
Like it really,
I write code in a lot of languages and

116
00:06:09.427 --> 00:06:12.851
this just makes it feel like
everything else in my opinion,

117
00:06:12.851 --> 00:06:16.419
but it also keeps Java scripts
asynchronous event loop base.

118
00:06:16.419 --> 00:06:18.612
The features that are like
it still has that part but

119
00:06:18.612 --> 00:06:20.303
it makes it look like everything else.

120
00:06:20.303 --> 00:06:21.966
So it's less confusing for me.

121
00:06:21.966 --> 00:06:26.830
So we last left off talking about
Error handling in Node.js and

122
00:06:26.830 --> 00:06:30.883
the different ways that you
can go about doing that.

123
00:06:30.883 --> 00:06:35.952
I emphasize just how important that is
when it comes to deciding on how and

124
00:06:35.952 --> 00:06:39.706
when you shut down your app
depending on what errors.

125
00:06:39.706 --> 00:06:44.378
And that's gonna be more obvious when you
get into building things like servers,

126
00:06:44.378 --> 00:06:47.359
especially servers and
other types of applications

127
00:06:47.359 --> 00:06:51.831
that require user input because sometimes
their input could cause an error but

128
00:06:51.831 --> 00:06:56.596
not a show stopping error game stopping
error that should crash your application.

129
00:06:56.596 --> 00:06:58.070
So that's why that was important.

