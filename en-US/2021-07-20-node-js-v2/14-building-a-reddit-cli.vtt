WEBVTT

1
00:00:00.000 --> 00:00:04.439
Owing to the part of making this actually
do something, we're gonna need some help.

2
00:00:04.439 --> 00:00:07.952
Because I said we wanna be
able to hit the Reddit API and

3
00:00:07.952 --> 00:00:11.465
then we want to be able to
process that information and

4
00:00:11.465 --> 00:00:15.701
then open up a random post from
the Reddit API into our browsers.

5
00:00:15.701 --> 00:00:18.898
That's a lot of work that I'll probably
not gonna reinvent from scratch.

6
00:00:18.898 --> 00:00:21.704
I'm definitely not gonna use
the natives HTTP module and

7
00:00:21.704 --> 00:00:25.751
open up like socket connections and manage
that and, no, I'm not gonna do that.

8
00:00:25.751 --> 00:00:28.062
I'm just gonna rely on some
people smarter than me,

9
00:00:28.062 --> 00:00:31.017
who already created some really
nice packages that I can install.

10
00:00:31.017 --> 00:00:35.187
And we're gonna do that, so
I have the packages listed here.

11
00:00:35.187 --> 00:00:39.234
And what we're gonna do is,
we're gonna install one code open,

12
00:00:39.234 --> 00:00:41.670
one code node fetch and one code yarks.

13
00:00:41.670 --> 00:00:43.235
So we talk about these very quick.

14
00:00:43.235 --> 00:00:44.889
So open literally takes a URL and

15
00:00:44.889 --> 00:00:47.777
it opens it up on your default
browser on your computer.

16
00:00:47.777 --> 00:00:49.224
So that's what's going to open it for us.

17
00:00:49.224 --> 00:00:50.203
Really cool.

18
00:00:50.203 --> 00:00:56.134
Node fetch is exactly like window dot
fetch, if you've ever used that before,

19
00:00:56.134 --> 00:01:01.544
it's just the nodes polyfill version
of that, so it works the same way.

20
00:01:01.544 --> 00:01:06.394
And then yargs is basically a function
that's going to interpret and

21
00:01:06.394 --> 00:01:10.672
in process, I don't use that word,
somebody use it twice.

22
00:01:10.672 --> 00:01:14.079
It's gonna interpret
the process objects for us.

23
00:01:14.079 --> 00:01:19.275
So we need to get access to things like
flags and arguments to a Reddit CLI.

24
00:01:19.275 --> 00:01:23.404
Because I do wanna pass an argument,
I'm sorry, I wanna pass a flag to it.

25
00:01:23.404 --> 00:01:26.852
That's gonna allow us to
bypass opening the browser and

26
00:01:26.852 --> 00:01:29.501
instead just print it out on the terminal.

27
00:01:29.501 --> 00:01:32.758
Maybe I don't want my browser to be
opened as my boss is over my shoulder.

28
00:01:32.758 --> 00:01:35.761
But I just wanna print it out on
the terminal, so I can see it.

29
00:01:35.761 --> 00:01:38.691
So we can just pass the flag that
says like print instead of open and

30
00:01:38.691 --> 00:01:39.878
that's what we wanna do.

31
00:01:39.878 --> 00:01:41.589
So we wanna be able to
interpret that a little easier.

32
00:01:41.589 --> 00:01:43.903
So we'll use yargs for that.

33
00:01:43.903 --> 00:01:47.914
So follow along with me, but I also have
all the code here that you can copy and

34
00:01:47.914 --> 00:01:50.922
paste, but I'm pretty much
just gonna go through this,

35
00:01:50.922 --> 00:01:52.564
and then we'll figure it out.

36
00:01:52.564 --> 00:01:55.569
So first thing is,
let's get our imports going.

37
00:01:55.569 --> 00:01:59.357
So we're gonna import,
we're gonna say fetch.

38
00:01:59.357 --> 00:02:02.405
Well actually, before we import,
let's actually do our install, right?

39
00:02:02.405 --> 00:02:07.522
So let's say npm install, and by the way,
you can do I for short for install.

40
00:02:07.522 --> 00:02:12.112
So you can say install or you can just
say in npm I, which is less characters.

41
00:02:12.112 --> 00:02:18.215
So npm I node fetch,
we have open and then we have yargs.

42
00:02:18.215 --> 00:02:20.413
I'm gonna save those.

43
00:02:20.413 --> 00:02:26.532
And remember, save puts it in our
dependencies, which we have here.

44
00:02:26.532 --> 00:02:28.950
Boom, we got our dependencies,
we're good to go.

45
00:02:28.950 --> 00:02:34.733
And now I'm gonna import them, so
I'm gonna say, fetch from, no fetch.

46
00:02:34.733 --> 00:02:39.414
I'm gonna say open from open,

47
00:02:39.414 --> 00:02:43.563
and then yargs from yargs.

48
00:02:43.563 --> 00:02:48.640
I think yargs, I did have a problem with
the interrupt between common j s and

49
00:02:48.640 --> 00:02:52.667
yes six, I'm just go look to
make sure I got that one right,

50
00:02:52.667 --> 00:02:55.913
I guess it was fine muslin
Southern I was doing.

51
00:02:55.913 --> 00:03:00.472
Okay, the next thing we wanna do is,
let's try to process any potential

52
00:03:00.472 --> 00:03:03.162
arguments we might pass on and
like I said,

53
00:03:03.162 --> 00:03:08.200
I did wanna pass in a print flag that's
gonna bypass the opening of the browser.

54
00:03:08.200 --> 00:03:10.307
And depending on what that,
whether that's passed or not,

55
00:03:10.307 --> 00:03:12.097
that's gonna determine
what other logic we have.

56
00:03:12.097 --> 00:03:15.242
So we should probably process that
first because we need that information.

57
00:03:15.242 --> 00:03:19.758
So I'm going to do something called,
say yargs.

58
00:03:19.758 --> 00:03:23.333
And that's a function and

59
00:03:23.333 --> 00:03:27.565
I can pass in process dot argv.

60
00:03:27.565 --> 00:03:31.958
And basically what this is,
just to I wonder if I can log this.

61
00:03:31.958 --> 00:03:32.559
Yeah, I can log this,

62
00:03:32.559 --> 00:03:34.406
I'll try to think if there's gonna
be anything sensitive on there.

63
00:03:34.406 --> 00:03:36.430
Yeah, I'm gonna just log this for
you so you can see what it is.

64
00:03:36.430 --> 00:03:41.024
So process.argv, and
then I think you'll get the idea.

65
00:03:41.024 --> 00:03:43.964
So we don't have to install a CLI again,
It's already linked.

66
00:03:43.964 --> 00:03:47.649
It's a live file so
we can just run the read command again.

67
00:03:47.649 --> 00:03:51.271
So you can see proces.argv,
it returns an array.

68
00:03:51.271 --> 00:03:55.166
The first two things are always gonna be
the path to the interpreter which is note,

69
00:03:55.166 --> 00:03:57.423
and then a path to the CLI,
which is Reddit, and

70
00:03:57.423 --> 00:04:00.717
everything else after that it's
gonna be like arguments and flags.

71
00:04:00.717 --> 00:04:06.673
So for instance, if I wanna say Reddit,
then I wanna say print, like that.

72
00:04:06.673 --> 00:04:12.367
You can see it's passing as a third index,
index number two into this array,

73
00:04:12.367 --> 00:04:15.869
or if I wanted to pass an argument like,
hello,

74
00:04:15.869 --> 00:04:21.063
you can see that it literally goes
in order from left to right, right?

75
00:04:21.063 --> 00:04:22.635
That's how it works.

76
00:04:22.635 --> 00:04:26.896
What yargs is gonna do, it's going to
process this and put it in an object for

77
00:04:26.896 --> 00:04:30.036
us in a key value way,
That way we can use it a lot easier.

78
00:04:30.036 --> 00:04:33.114
But there's nothing stopping us
from just doing RGV Bracket,

79
00:04:33.114 --> 00:04:36.539
split everything before,
split everything after these first two and

80
00:04:36.539 --> 00:04:39.285
just grabbed stuff here that
works just as fine as well.

81
00:04:39.285 --> 00:04:42.513
I just wanna show you a really nice
package that I use all the time.

82
00:04:42.513 --> 00:04:46.561
So we're going to process that,
we're gonna get the RGV here.

83
00:04:46.561 --> 00:04:51.505
Like I said, this is going to be an object
with whatever flags was passed in,

84
00:04:51.505 --> 00:04:52.527
so we got that.

85
00:04:52.527 --> 00:04:56.943
The next thing we wannna do is we
want to make a call to Reddit.

86
00:04:56.943 --> 00:05:02.758
So if you go to Reddit.com and
if you go to slash dot Jason,

87
00:05:02.758 --> 00:05:09.663
you actually get the Jason output
of the entire front page of Reddit.

88
00:05:09.663 --> 00:05:10.317
Like that.

89
00:05:10.317 --> 00:05:11.710
It's really cool.

90
00:05:11.710 --> 00:05:13.876
So we should look at this and
make this bigger.

91
00:05:13.876 --> 00:05:16.582
So look at this for a little bit because
we need to understand the data structure

92
00:05:16.582 --> 00:05:17.778
because we're gonna query this.

93
00:05:17.778 --> 00:05:21.884
So we get back an object with a data
property that has a children property,

94
00:05:21.884 --> 00:05:25.477
that's an array of children and
each child has a data property.

95
00:05:25.477 --> 00:05:30.574
And on that data property, there should be

96
00:05:30.574 --> 00:05:36.095
a URL that we want and
I wanna say it's called,

97
00:05:36.095 --> 00:05:40.926
have it somewhere, permalink, yeah.

98
00:05:40.926 --> 00:05:45.894
So I wanna get the permalink of
whatever child we're gonna open,

99
00:05:45.894 --> 00:05:50.681
and that's what I wanna get and
I'll pin that to reddit.com,

100
00:05:50.681 --> 00:05:53.860
slash that sub Reddit, slash whatever.

101
00:05:53.860 --> 00:05:56.062
So that's how we're going to
get our random thing there.

102
00:05:56.062 --> 00:05:59.414
So let's make a call to the Reddit API.

103
00:05:59.414 --> 00:06:03.122
And the way we're gonna
do that is using fetch.

104
00:06:03.122 --> 00:06:09.038
So I'm gonna say fetch,
or I'm gonna say rez for

105
00:06:09.038 --> 00:06:12.800
response equals await fetch.

106
00:06:12.800 --> 00:06:14.896
And fetch is gonna take that URL here.

107
00:06:14.896 --> 00:06:18.831
So reddit.com/.Json.

108
00:06:18.831 --> 00:06:23.012
And if you've never used fetch in
the browser before, it actually doesn't

109
00:06:23.012 --> 00:06:26.865
return the data, it returns a response
object that has status codes,

110
00:06:26.865 --> 00:06:29.496
error messages,
different things like that.

111
00:06:29.496 --> 00:06:34.378
And if we want the data from that
we have to resolve the promise

112
00:06:34.378 --> 00:06:38.590
of turning it into JSON,
which is permissified, so

113
00:06:38.590 --> 00:06:43.971
that we can get the data which will
be data equals await res.json.

114
00:06:43.971 --> 00:06:50.364
So we'll get that, and
just to make sure we are at closer,

115
00:06:50.364 --> 00:06:54.813
we will log this, so we do that and boom.

116
00:06:54.813 --> 00:06:55.744
What did I log?

117
00:06:55.744 --> 00:06:57.721
I logged res sorry, is log data.

118
00:07:00.463 --> 00:07:04.736
Okay, so you can see we got the same
data that we had in the browser.

119
00:07:04.736 --> 00:07:08.115
Obviously, it's not gonna print
all the objects here, but

120
00:07:08.115 --> 00:07:10.975
you can see it's hidden Reddit,
it's good to go.

121
00:07:10.975 --> 00:07:13.636
And just to show you just how
quickly we were able to do this,

122
00:07:13.636 --> 00:07:17.487
we imported three things and we're already
hitting the Reddit API and getting data.

123
00:07:17.487 --> 00:07:21.097
That's really impressive because we
were able to leverage the community and

124
00:07:21.097 --> 00:07:22.494
different things like that.

125
00:07:22.494 --> 00:07:26.536
We got to do all this ourselves, we'd be
like close to 100 lines of code right now,

126
00:07:26.536 --> 00:07:27.951
especially hitting the API.

127
00:07:27.951 --> 00:07:32.784
I'm exaggerating a little bit, not that
much, but still not as clean as this.

128
00:07:32.784 --> 00:07:34.876
Cool.
So now we got the data.

129
00:07:34.876 --> 00:07:38.291
The next thing that we wanna do
is we want to get a random posts.

130
00:07:38.291 --> 00:07:44.549
So we'll say posts,
let's get a random index.

131
00:07:44.549 --> 00:07:49.012
And a random index would be, so

132
00:07:49.012 --> 00:07:53.999
data.data.children bracket.

133
00:07:53.999 --> 00:08:00.959
Okay, let's do this first let's save this
in a variable, children equals that.

134
00:08:00.959 --> 00:08:05.883
And then now we can say
let's get children.

135
00:08:05.883 --> 00:08:14.189
Was that math.randomchosen.length?

136
00:08:14.189 --> 00:08:15.961
Width?

137
00:08:15.961 --> 00:08:20.205
No, it's math.random and then math.floor.

138
00:08:20.205 --> 00:08:24.999
Children.length times,
you know what, I already have this,

139
00:08:24.999 --> 00:08:28.035
why am I trying to do this math right now?

140
00:08:28.035 --> 00:08:29.298
Let's copy this.

141
00:08:29.298 --> 00:08:30.047
There we go.

142
00:08:30.047 --> 00:08:32.633
So this is what we wanna do.

143
00:08:32.633 --> 00:08:36.797
I do the random stuff all the time,
I think I remember this but I don't.

144
00:08:36.797 --> 00:08:39.974
Okay, so we're gonna say,
there it is, I was way wrong.

145
00:08:39.974 --> 00:08:47.847
We wanna, math.floor, math.random
times children.length, there we go.

146
00:08:47.847 --> 00:08:51.870
So this will give us a random child and
the child array.

147
00:08:51.870 --> 00:08:55.366
You could do ceiling if you want to,
but floor is fine.

148
00:08:55.366 --> 00:08:57.389
So now we got our random index.

149
00:08:57.389 --> 00:09:03.752
And now what you wanna do is just,
or actually this is a random post.

150
00:09:03.752 --> 00:09:08.092
Now what we wanna do is decide if we need
to open this post in the browser, or

151
00:09:08.092 --> 00:09:10.829
if we just wanna print
out something about it.

152
00:09:10.829 --> 00:09:16.325
So what we can do is we can say
if(argv.print), so if someone passes

153
00:09:16.325 --> 00:09:22.027
into print flag they will be one of
those who just wanna cancel that post.

154
00:09:22.027 --> 00:09:23.745
So we'll do something like this.

155
00:09:23.745 --> 00:09:29.293
We'll say, title is random posts.title,

156
00:09:29.293 --> 00:09:34.111
I'm assuming as a title there will look

157
00:09:34.111 --> 00:09:38.053
if it's not then link would be,

158
00:09:38.053 --> 00:09:42.287
let's make a link variable here.

159
00:09:42.287 --> 00:09:49.358
The link is gonna be
HTTPS reddit.com slash.

160
00:09:49.358 --> 00:09:53.274
We're actually i think the permalink
has a leading slash and

161
00:09:53.274 --> 00:09:58.134
I dont feel like cleaning all that up,
so we'll just trust it, so be that.

162
00:09:58.134 --> 00:10:04.285
That'd be the link and
then we'll just say, link like that.

163
00:10:04.285 --> 00:10:11.932
And then else,
we'll say open the link, like that.

164
00:10:11.932 --> 00:10:12.906
So let's try it out.

165
00:10:12.906 --> 00:10:15.574
Let's see if we can get this to
print with a random post and

166
00:10:15.574 --> 00:10:16.975
then we'll try to open it up.

167
00:10:16.975 --> 00:10:19.902
So we'll say hello,
we don't need that, get rid of that.

168
00:10:19.902 --> 00:10:22.595
But I'll say print and boom,

169
00:10:22.595 --> 00:10:28.428
titles I did guess on that so
that wasn't gonna work.

170
00:10:28.428 --> 00:10:33.412
And then obviously this needs
to be permalink or its data,

171
00:10:33.412 --> 00:10:38.001
that's why, permalink,
and this is data.title.

172
00:10:38.001 --> 00:10:41.231
So let's try that again.

173
00:10:41.231 --> 00:10:41.838
There we go.

174
00:10:41.838 --> 00:10:46.472
So we have title,
you see there's a title of a random posts

175
00:10:46.472 --> 00:10:51.296
from the front page of Reddit and
here is the URL that is messed

176
00:10:51.296 --> 00:10:56.636
up because it's not permalink,
it must be something else.

177
00:10:56.636 --> 00:10:59.769
It's not camel case, okay.

178
00:10:59.769 --> 00:11:00.377
There we go.

179
00:11:00.377 --> 00:11:01.763
Let's try that again.

180
00:11:01.763 --> 00:11:03.682
There we go.

181
00:11:03.682 --> 00:11:05.123
So we got our link here, and

182
00:11:05.123 --> 00:11:08.529
then we got something about the dot
lines pretending to be hurt.

183
00:11:08.529 --> 00:11:12.149
[LAUGH] Okay, that sounds pretty cute.

184
00:11:12.149 --> 00:11:15.822
And it's random every time, so
if we do it again, we get another one.

185
00:11:15.822 --> 00:11:17.937
Now let's try to open
this up in our browser.

186
00:11:17.937 --> 00:11:19.486
So, how do we do that?

187
00:11:19.486 --> 00:11:21.931
Just don't pass the print flag and
we should be able to do that.

188
00:11:21.931 --> 00:11:26.199
So I'm gonna exclude the print flag,
and I will do that, and bam,

189
00:11:26.199 --> 00:11:31.404
it just opened up in my default browser
which for me is Firefox, don't judge me.

190
00:11:31.404 --> 00:11:34.748
And I'm not gonna scroll down and
hit play on that but

191
00:11:34.748 --> 00:11:38.244
you get the point,
it opened it up to it, and it works.

192
00:11:38.244 --> 00:11:41.495
So really good CLI, feel like Reddit,
and you don't feel like gonna Reddit,

193
00:11:41.495 --> 00:11:42.882
you wanna see something random.

194
00:11:42.882 --> 00:11:46.987
There you go, you can just type in
Reddit and get a random thing today and

195
00:11:46.987 --> 00:11:47.819
check it out.

196
00:11:47.819 --> 00:11:50.775
So let's just go back and reflect on
the code that we wrote a little bit,

197
00:11:50.775 --> 00:11:52.567
just to try to understand
it a little more.

198
00:11:52.567 --> 00:11:57.199
So we have this hash bang here that
tells us to interpret this file in

199
00:11:57.199 --> 00:11:58.860
the node environment.

200
00:11:58.860 --> 00:12:02.602
We installed these three node modules.

201
00:12:02.602 --> 00:12:07.035
And then moving on we were able to
use yargs which was able to process

202
00:12:07.035 --> 00:12:11.786
the options and arguments passed
into whatever CLI has been executed,

203
00:12:11.786 --> 00:12:13.865
in this case, the Reddit CLI.

204
00:12:13.865 --> 00:12:17.938
We use the fetch function here to
communicate with the Reddit API and

205
00:12:17.938 --> 00:12:18.875
get some data.

206
00:12:18.875 --> 00:12:23.872
We process that data, did some random
indexing here that I struggled with,

207
00:12:23.872 --> 00:12:26.698
and we created a link
to that random posts.

208
00:12:26.698 --> 00:12:31.465
And then we just did a check to see if
someone passed in the print flag or not.

209
00:12:31.465 --> 00:12:35.683
If they did, just do a log,
if they didn't, open it up in the browser.

210
00:12:35.683 --> 00:12:38.152
And that's it, and
then the process was stopped,

211
00:12:38.152 --> 00:12:40.572
it exited down here with
a process of exit of zero.

212
00:12:40.572 --> 00:12:43.749
There was no other code to run,
there are no more background tasks,

213
00:12:43.749 --> 00:12:45.216
there's nothing scheduled.

214
00:12:45.216 --> 00:12:48.814
So it bottomed out and
there was no more text to be ticked.

215
00:12:48.814 --> 00:12:53.602
And it just stopped and our code was done
executing, even though the browser open.

216
00:12:53.602 --> 00:12:54.867
And that's basically what happened.

217
00:12:54.867 --> 00:12:58.576
So, as you can see, you can get
pretty powerful here with a CLI,

218
00:12:58.576 --> 00:13:01.258
knowing what you know about file systems,
and

219
00:13:01.258 --> 00:13:04.585
the fact that we did that
interpolation on the HTML file.

220
00:13:04.585 --> 00:13:08.901
Knowing what you know about CLI's now, you
can probably start putting together how

221
00:13:08.901 --> 00:13:11.843
some of the really good front
end tools that you use work.

222
00:13:11.843 --> 00:13:14.501
Webpack as CLI also use the file system.

223
00:13:14.501 --> 00:13:15.398
You just did both.

224
00:13:15.398 --> 00:13:19.130
So you're really starting to see how
these technologies work together,

225
00:13:19.130 --> 00:13:20.463
how powerful they can be.

226
00:13:20.463 --> 00:13:23.931
And this is just a glimpse,
if you really wanna make a good CLI,

227
00:13:23.931 --> 00:13:26.165
you probably wanna use a CLI framework.

228
00:13:26.165 --> 00:13:28.800
Just like there's front end frameworks,
there's like frameworks for

229
00:13:28.800 --> 00:13:30.018
everything else I'll know too.

230
00:13:30.018 --> 00:13:34.474
There's CLI frameworks, there's API
frameworks, there's testing frameworks,

231
00:13:34.474 --> 00:13:38.940
just like react as a front end framework,
there's frameworks for stuff here as well.

232
00:13:38.940 --> 00:13:41.972
So I would encourage you to see if there
is something out there before you try

233
00:13:41.972 --> 00:13:43.386
to build something from scratch.

234
00:13:43.386 --> 00:13:46.588
I personally wouldn't build an API or
a CLI like this.

235
00:13:46.588 --> 00:13:50.022
I would use a framework that
has like way better support and

236
00:13:50.022 --> 00:13:54.452
handling and help message and automations
all types of really nice stuff.

237
00:13:54.452 --> 00:13:57.980
But just let you know that even if
you did do it, it's not so bad.

238
00:13:57.980 --> 00:14:01.030
So any questions on the CLI?

239
00:14:01.030 --> 00:14:04.480
The question was, if you have
an object and it logs, object objects,

240
00:14:04.480 --> 00:14:05.482
how do you see that?

241
00:14:05.482 --> 00:14:08.653
Let's first talk about why it does
that and and how we can get around it.

242
00:14:08.653 --> 00:14:13.281
So, I'm just gonna make a new
file here called test a yes, and

243
00:14:13.281 --> 00:14:17.731
I'm gonna make an object and
we'll make another object and

244
00:14:17.731 --> 00:14:23.877
I'm gonna make another object like this,
and then we'll put something in here.

245
00:14:26.098 --> 00:14:28.690
Okay, and
then what we'll do is we'll log this.

246
00:14:28.690 --> 00:14:37.499
So, node Test a yes.

247
00:14:37.499 --> 00:14:38.152
Okay.

248
00:14:38.152 --> 00:14:39.500
Wait, that logged all of it.

249
00:14:39.500 --> 00:14:41.512
Of course it did.

250
00:14:41.512 --> 00:14:43.622
Let me make another one.

251
00:14:43.622 --> 00:14:45.037
Okay, let's try that.

252
00:14:45.037 --> 00:14:45.634
There we go.

253
00:14:45.634 --> 00:14:46.574
Okay, I know how to get deep.

254
00:14:46.574 --> 00:14:50.958
So as you saw, I tried to log it the first
time to get it to do the object object and

255
00:14:50.958 --> 00:14:54.097
it didn't, then I added one more layer and
then it did.

256
00:14:54.097 --> 00:14:57.419
So at some point, the logging
mechanism in node is like, okay,

257
00:14:57.419 --> 00:15:00.311
you're just going really deep
on all these objects, so

258
00:15:00.311 --> 00:15:04.207
we're just not gonna log all of them,
I'm just gonna paraphrase for you.

259
00:15:04.207 --> 00:15:07.560
That's basically what's happening
when you have like a certain level of

260
00:15:07.560 --> 00:15:08.485
hierarchy of data.

261
00:15:08.485 --> 00:15:12.343
No GS tries to simplify the output of
your logs by just paraphrasing the hey,

262
00:15:12.343 --> 00:15:14.897
there's an object here,
there's a sub object.

263
00:15:14.897 --> 00:15:17.077
And it's actually really helpful,
especially for

264
00:15:17.077 --> 00:15:18.820
like streaming these logs which you can.

265
00:15:18.820 --> 00:15:24.279
You can stream logs from node and to like
some provider that you're paying for,

266
00:15:24.279 --> 00:15:29.167
a lot of big companies pay millions of
dollars per year to have their logs

267
00:15:29.167 --> 00:15:33.588
stored, and some even per month
like big budgets to store logs.

268
00:15:33.588 --> 00:15:37.459
So the less logs there are, the less
things that are being logged, the less

269
00:15:37.459 --> 00:15:41.403
you're being charged and the faster
that they are and also just less noisy.

270
00:15:41.403 --> 00:15:45.357
When you're really building an application
and you have your development server up,

271
00:15:45.357 --> 00:15:47.590
you got a lot of stuff to streaming and
piping in.

272
00:15:47.590 --> 00:15:51.099
And you're really only concerned
about the thing that you logged and

273
00:15:51.099 --> 00:15:52.742
not all the sub things about it.

274
00:15:52.742 --> 00:15:55.473
So it's just a nice way
to clean that up as well.

275
00:15:55.473 --> 00:15:57.870
But like you said, sometimes you
do want to be able to see it, so

276
00:15:57.870 --> 00:15:58.838
how do you get around it?

277
00:15:58.838 --> 00:15:59.915
Well, there's two options.

278
00:15:59.915 --> 00:16:02.952
Well, you just log a little
closer to what you want.

279
00:16:02.952 --> 00:16:06.715
So instead of logging O,
I might log o dot u dot L, and

280
00:16:06.715 --> 00:16:12.722
then now I'm able to see that because I
logged a little closer, so that's one way.

281
00:16:12.722 --> 00:16:17.351
The other ways you can do
json.stringify and then pass in O, and

282
00:16:17.351 --> 00:16:22.769
then pass in no and then you can pass it
like how many indent spaces you want.

283
00:16:22.769 --> 00:16:26.655
I like to indent by two, so I can do that,
and then it'll print it out like that,

284
00:16:26.655 --> 00:16:27.538
the whole thing.

285
00:16:27.538 --> 00:16:31.288
It won't be nice and beautiful and
colored, like the rest of the output is

286
00:16:31.288 --> 00:16:35.404
because you're technically just logging
a string, but it'll be formatted and

287
00:16:35.404 --> 00:16:39.062
it'll show every single thing all
the way down to the, closest child.

288
00:16:39.062 --> 00:16:41.027
So those are the two ways
you can get around that.

289
00:16:41.027 --> 00:16:42.938
&gt;&gt; You were passing flags, right?

290
00:16:42.938 --> 00:16:47.299
Like reducing double hyphens
can be passed parameters

291
00:16:47.299 --> 00:16:52.046
choosing just one hyphen and
does recognize that?

292
00:16:52.046 --> 00:16:54.241
&gt;&gt; Absolutely.

293
00:16:54.241 --> 00:16:59.377
So we can do the same thing, so I can say,

294
00:16:59.377 --> 00:17:03.922
argv.prince, or argv.p right?

295
00:17:03.922 --> 00:17:05.182
So let's try that.

296
00:17:05.182 --> 00:17:07.419
So, if I say, do that.

297
00:17:10.102 --> 00:17:14.111
And I think maybe capital P.

298
00:17:14.111 --> 00:17:14.644
There we go.

299
00:17:14.644 --> 00:17:19.140
Yeah, so if it's a capital with
a shorthand, then it will Reddit for you.

