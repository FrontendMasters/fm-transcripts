WEBVTT

1
00:00:00.000 --> 00:00:04.671
Cool, let's hop back on to the next
thing that we're gonna talk about,

2
00:00:04.671 --> 00:00:08.127
which I think is the reason
why a lot of folks are here.

3
00:00:08.127 --> 00:00:12.648
Servers, APIs,
how do we do the thing in Node?

4
00:00:12.648 --> 00:00:13.957
Show us the promise land.

5
00:00:13.957 --> 00:00:17.684
Okay, this is it, I wanted to save this
one close to last because obviously

6
00:00:17.684 --> 00:00:21.189
there's a lot of stuff you need to
know before you can advantage of it.

7
00:00:21.189 --> 00:00:25.493
So we are gonna talk about servers and
how you could build servers in Node.

8
00:00:25.493 --> 00:00:28.662
And the many different ways you can do it,
and then pretty much my recommended way.

9
00:00:28.662 --> 00:00:32.903
But we won't be going into detail how to
build some ridiculously nice CRUD API that

10
00:00:32.903 --> 00:00:35.440
talks to databases and stuff like that.

11
00:00:35.440 --> 00:00:37.204
Because we already have courses for

12
00:00:37.204 --> 00:00:41.143
that on Frontend Masters that I highly
recommend you check out after this course

13
00:00:41.143 --> 00:00:44.928
if you're really interested in how to
build a modern API in Node.js today.

14
00:00:44.928 --> 00:00:46.534
So check those out if you're interested.

15
00:00:46.534 --> 00:00:49.839
But this course, in this section,
we will be talking about,

16
00:00:49.839 --> 00:00:51.875
at least the fundamentals behind it,

17
00:00:51.875 --> 00:00:55.772
how you could do it natively and
how you should do it with something else.

18
00:00:55.772 --> 00:01:00.655
So Node.js has access to OS-level
functionality like networking tools.

19
00:01:00.655 --> 00:01:05.554
So when you're starting a server on
a machine, whether it's your computer,

20
00:01:05.554 --> 00:01:11.049
whether it's Amazon somewhere, whatever
machine is on, it's accessing the network

21
00:01:11.049 --> 00:01:16.414
tools exposed from the operating system
to whatever language you're working with.

22
00:01:16.414 --> 00:01:21.327
So, in this case, it's exposing it to C++,
which is exposing it to JavaScript

23
00:01:21.327 --> 00:01:25.360
through, in this case,
something called the HTTP module.

24
00:01:25.360 --> 00:01:29.300
So we're actually interacting with
the operating system through Node.

25
00:01:29.300 --> 00:01:32.265
And I think that's just really
interesting if you think about it.

26
00:01:32.265 --> 00:01:35.980
You're literally talking to
the operating system through JavaScript.

27
00:01:35.980 --> 00:01:39.576
And if that's just not powerful,
I don't know what is, especially seeing

28
00:01:39.576 --> 00:01:43.472
where JavaScript started as changing
colors of hyperlinks and things like that.

29
00:01:43.472 --> 00:01:46.188
[LAUGH] I guess it's just crazy to
think that you can do that now.

30
00:01:46.188 --> 00:01:48.896
But yeah,
it has access to stuff like that.

31
00:01:48.896 --> 00:01:53.673
And that's why a lot of people use Node,
because it is JavaScript, right,

32
00:01:53.673 --> 00:01:56.746
but it does have access
to the OS-level things.

33
00:01:56.746 --> 00:02:00.750
But also because when it comes to APIs and
stuff, Node is, and

34
00:02:00.750 --> 00:02:04.530
I talked about this a little bit,
it's single threaded.

35
00:02:04.530 --> 00:02:09.161
And if you don't really know what a thread
is, you can think of a thread as a block.

36
00:02:09.161 --> 00:02:11.258
So if you have a CPU with eight cores,
right,

37
00:02:11.258 --> 00:02:13.535
you could think of one
thread taking up one core.

38
00:02:13.535 --> 00:02:17.385
So you can do eight different things
at once if you took up all eight cores,

39
00:02:17.385 --> 00:02:21.440
whereas JavaScript only ever take one
of those cores, one of those threads.

40
00:02:21.440 --> 00:02:26.446
And it basically uses an event loop,
which has a different

41
00:02:26.446 --> 00:02:32.383
worker thread separate from the thread
that your code is working on.

42
00:02:32.383 --> 00:02:34.823
And it will schedule different things.

43
00:02:34.823 --> 00:02:39.246
And it will just keep looping over and
over to see if some work needs to be done.

44
00:02:39.246 --> 00:02:40.435
And when that work is done,

45
00:02:40.435 --> 00:02:43.128
it'll basically notify you when
it's done with a callback,

46
00:02:43.128 --> 00:02:46.676
which can be translated to a promise,
which can be translated to async/await.

47
00:02:46.676 --> 00:02:48.066
And that's where all
that stuff comes from.

48
00:02:48.066 --> 00:02:52.538
So this basically allows us to continue
receiving requests from our users and

49
00:02:52.538 --> 00:02:56.664
our customers at the same time we're
scheduling more work to be done and

50
00:02:56.664 --> 00:02:58.337
process in the background.

51
00:02:58.337 --> 00:03:00.727
Whereas other languages, it's blocking.

52
00:03:00.727 --> 00:03:02.938
So you might have requests coming in and

53
00:03:02.938 --> 00:03:06.156
they're being processed in
kinda like a serial manner.

54
00:03:06.156 --> 00:03:07.103
That doesn't mean they're slow.

55
00:03:07.103 --> 00:03:09.307
They're not slow, they just are blocking,

56
00:03:09.307 --> 00:03:11.571
they have to have access
to multiple threads.

57
00:03:11.571 --> 00:03:14.375
The other thing is Node can have
access to multiple threads.

58
00:03:14.375 --> 00:03:19.675
Just by default, it doesn't, but you could
use the, I forgot the name of the module,

59
00:03:19.675 --> 00:03:23.465
I wanna say it's the OS module,
maybe it's the core module.

60
00:03:23.465 --> 00:03:25.564
I can't remember, they changed it,
I can look it up.

61
00:03:25.564 --> 00:03:27.452
But you can use that module, or

62
00:03:27.452 --> 00:03:31.953
even a third party module is probably
better than using the internal one,

63
00:03:31.953 --> 00:03:36.248
to actually spawn different amounts
of work into different threads.

64
00:03:36.248 --> 00:03:37.140
Which is perfect for

65
00:03:37.140 --> 00:03:40.508
something like load balancing when
you're deploying a server somewhere.

66
00:03:40.508 --> 00:03:43.738
So you can access multiple threads,
just by default it won't do that for you.

67
00:03:43.738 --> 00:03:47.318
It's a manual thing that you have to set
up, and you have to manage that yourself.

68
00:03:47.318 --> 00:03:52.526
It is not managed internally via
Node like other languages are,

69
00:03:52.526 --> 00:03:54.654
so just keep mind of that.

70
00:03:54.654 --> 00:03:57.552
That was a lot, but
I needed to get that out.

71
00:03:57.552 --> 00:04:02.405
So let's talk about servers, now that
we know why servers are good in Node.

72
00:04:02.405 --> 00:04:04.211
Node does ship with an http module.

73
00:04:04.211 --> 00:04:08.727
Like I said, it's an abstraction
around OS-level networking tools.

74
00:04:08.727 --> 00:04:13.907
But some people might laugh when they
hear this, but http module is low level.

75
00:04:13.907 --> 00:04:16.089
And the reason I say
some people might laugh,

76
00:04:16.089 --> 00:04:20.122
cuz it's like literally nothing in Node
is low level compared to other languages.

77
00:04:20.122 --> 00:04:24.914
But compared to other stuff in Node,
yes, the http module is very low level,

78
00:04:24.914 --> 00:04:27.299
and you should probably never use it.

79
00:04:27.299 --> 00:04:31.242
I can't think of any good example why
you would ever use the http module, but

80
00:04:31.242 --> 00:04:33.781
I'm gonna show you how to
make a server using it.

81
00:04:33.781 --> 00:04:37.918
Not because I want you to, it's because
I want you to see the difference between

82
00:04:37.918 --> 00:04:40.165
using this versus installing something.

83
00:04:40.165 --> 00:04:44.110
And how better it is to leverage
something from the community versus doing

84
00:04:44.110 --> 00:04:45.514
something from scratch.

85
00:04:45.514 --> 00:04:50.688
So what we're gonna do is we're going to
build this http server here from scratch.

86
00:04:50.688 --> 00:04:52.300
So let's do that.

87
00:04:52.300 --> 00:04:58.167
I'm gonna make a new,
Let me get rid of this thing.

88
00:05:00.187 --> 00:05:03.281
Go away, I'll make a new folder here.

89
00:05:03.281 --> 00:05:04.606
We're gonna call this server.

90
00:05:06.763 --> 00:05:11.815
And we'll make a index.mjs.

91
00:05:11.815 --> 00:05:15.876
And I want to import http from 'http'.

92
00:05:15.876 --> 00:05:17.466
This is included in Node.

93
00:05:17.466 --> 00:05:20.259
So I don't have to install anything,
we're good to go.

94
00:05:20.259 --> 00:05:22.500
And if you were to look at that,

95
00:05:22.500 --> 00:05:28.216
you'll see that there's just a bunch
of stuff on there, networking things.

96
00:05:28.216 --> 00:05:30.482
It's stuff you will pretty much never use,
but

97
00:05:30.482 --> 00:05:32.756
that's why I said it's
pretty much low level.

98
00:05:32.756 --> 00:05:37.547
So you can follow along with me or
you can copy and paste this code here, but

99
00:05:37.547 --> 00:05:41.277
I'm gonna walk through it so
we can kinda see how it goes.

100
00:05:41.277 --> 00:05:43.577
So the first thing is we need to
just make some variables here.

101
00:05:43.577 --> 00:05:49.413
I'm gonna make one for the host,
which is gonna be localhost.

102
00:05:49.413 --> 00:05:52.070
If you don't have a localhost is,
it's your machine.

103
00:05:52.070 --> 00:05:56.748
It's a reference to the IP
address of your machine,

104
00:05:56.748 --> 00:06:01.760
which is usually something like 127.0.0.1.

105
00:06:01.760 --> 00:06:04.775
That's pretty much the IP
to your local machine, but

106
00:06:04.775 --> 00:06:06.919
you could reference it as localhost.

107
00:06:06.919 --> 00:06:11.455
The local DNS lookup on your computer
understands that localhost points

108
00:06:11.455 --> 00:06:14.365
to that address that I
just put the IP address.

109
00:06:14.365 --> 00:06:15.987
So localhost is great.

110
00:06:15.987 --> 00:06:17.456
The next thing we want is a port.

111
00:06:17.456 --> 00:06:20.383
If you don't know what a port is,

112
00:06:20.383 --> 00:06:24.783
you can think of a port as
the doorway to your host.

113
00:06:24.783 --> 00:06:26.993
It's how you get to the host.

114
00:06:26.993 --> 00:06:31.597
Most websites that are deployed on
the Internet have a host of 8080 or

115
00:06:31.597 --> 00:06:34.026
8000, mostly 8080 or 80.

116
00:06:34.026 --> 00:06:37.097
It's just that the browsers don't
show them, but they're there.

117
00:06:37.097 --> 00:06:39.834
They're all there, you just don't see
them because they all have the same port.

118
00:06:39.834 --> 00:06:44.343
So why even show it, they just exclude it
from the URL, but it's definitely there.

119
00:06:44.343 --> 00:06:46.450
But locally, we have to specify a port.

120
00:06:46.450 --> 00:06:51.266
So you can think of it as every time you
make a server on your localhost on your

121
00:06:51.266 --> 00:06:54.476
machine, you need to put
each one on its own port,

122
00:06:54.476 --> 00:06:58.462
because a port can only be occupied
by one server and not many.

123
00:06:58.462 --> 00:07:01.865
So if you try to start another server on
the same port, you'll get an error saying,

124
00:07:01.865 --> 00:07:03.919
this is already being used,
try something else.

125
00:07:03.919 --> 00:07:07.306
And then sometimes you'll have different
programs on your computer that open up

126
00:07:07.306 --> 00:07:08.516
ports without you knowing.

127
00:07:08.516 --> 00:07:12.698
So if you download, I don't know, some
taskbar app up here, it's probably using

128
00:07:12.698 --> 00:07:16.964
a port on your computer you don't even
realize it, like Dropbox, Sync or Spotify.

129
00:07:16.964 --> 00:07:20.710
Who knows, it could be using a port and
you might not know until later.

130
00:07:20.710 --> 00:07:24.399
So most time ports are four numbers,
sometimes they're five, but

131
00:07:24.399 --> 00:07:26.351
we're gonna use 8000 for now.

132
00:07:26.351 --> 00:07:29.845
Sometimes you'll see 3000 and
things like that, we'll just use 8000.

133
00:07:29.845 --> 00:07:32.136
And then the next thing is
we're gonna create a server.

134
00:07:33.481 --> 00:07:39.310
And that is, we can say,
http.createServer, like this.

135
00:07:39.310 --> 00:07:44.671
And it takes in a callback function,
which is going to be the handler.

136
00:07:44.671 --> 00:07:48.514
How do you handle the incoming
request from the server?

137
00:07:48.514 --> 00:07:51.881
So we're gonna say, okay, and
then that callback receives two arguments.

138
00:07:51.881 --> 00:07:55.464
The first one is gonna be the incoming
request, I'm just gonna put req for short.

139
00:07:55.464 --> 00:08:00.528
And the next one is gonna be the outgoing
response, and I'm gonna put res for short.

140
00:08:00.528 --> 00:08:02.955
Because the way servers work is
that they handle requests and

141
00:08:02.955 --> 00:08:06.539
then they respond to them, and that's why
I guess that's why they're called servers.

142
00:08:06.539 --> 00:08:10.533
I don't know if they modeled the name
after restaurants, [LAUGH] or whatever,

143
00:08:10.533 --> 00:08:12.781
but it's a server, it serves the clients.

144
00:08:12.781 --> 00:08:17.894
So you receive a request and then you
respond to it in the fastest way you can.

145
00:08:17.894 --> 00:08:21.921
So we have our request and response here.

146
00:08:21.921 --> 00:08:24.561
And then the next thing you wanna do,
if you think about a server,

147
00:08:24.561 --> 00:08:26.159
there's typically different paths.

148
00:08:26.159 --> 00:08:29.608
So if you ever went to a URL,
like some website.com/something,

149
00:08:29.608 --> 00:08:33.319
and you go to slash somewhere else,
it shows you two different things.

150
00:08:33.319 --> 00:08:36.976
You get two different pieces of data,
whether it's a website or an API.

151
00:08:36.976 --> 00:08:40.134
Those are two different paths, but
you also have different verbs.

152
00:08:40.134 --> 00:08:44.676
So you might have the same path,
like /todo, but one might be a POST and

153
00:08:44.676 --> 00:08:45.906
one might be a GET.

154
00:08:45.906 --> 00:08:51.690
So either you have a route on the server
as a combination of a path and a verb.

155
00:08:51.690 --> 00:08:54.847
And that would be a route, so
you can have many routes on your server.

156
00:08:54.847 --> 00:08:58.084
So what we're gonna do is we're
gonna create some routes and

157
00:08:58.084 --> 00:09:01.767
do different functionality depending
on what those routes are, and

158
00:09:01.767 --> 00:09:03.874
we'll try to figure it out from there.

159
00:09:03.874 --> 00:09:07.963
So what we'll say is,

160
00:09:07.963 --> 00:09:13.350
if req., what is it, path?

161
00:09:13.350 --> 00:09:15.949
See, I don't remember,
now I gotta, method, there we go.

162
00:09:15.949 --> 00:09:20.678
So if req.method is a POST, So

163
00:09:20.678 --> 00:09:24.604
if someone's doing a POST request here,
that means they're trying to send some

164
00:09:24.604 --> 00:09:28.141
serer to the data, we wanna grab that
data and we wanna put it somewhere.

165
00:09:28.141 --> 00:09:28.991
So let's do that.

166
00:09:28.991 --> 00:09:33.570
First, let's create a little,
I don't know, database, I guess,

167
00:09:33.570 --> 00:09:38.011
of the things that, actually, no,
we'll do that on the next one.

168
00:09:38.011 --> 00:09:43.272
So we'll say POST, and then what we
need to do is, because this is very raw,

169
00:09:43.272 --> 00:09:47.814
and even if you send JSON up,
we're not gonna receive it as JSON.

170
00:09:47.814 --> 00:09:49.303
We're gonna receive it as a buffer.

171
00:09:49.303 --> 00:09:52.135
Like when we were reading the file and
it was all those little bits,

172
00:09:52.135 --> 00:09:54.017
that's how we're gonna receive the data.

173
00:09:54.017 --> 00:09:56.961
That's not very useful for us.

174
00:09:56.961 --> 00:09:58.979
And it's not gonna come at once, right?

175
00:09:58.979 --> 00:10:03.501
It's being streamed to us in little bits,
so we have to collect all of them and

176
00:10:03.501 --> 00:10:04.972
then put them together.

177
00:10:04.972 --> 00:10:09.537
And then we'll have the data that
the client intended to send us.

178
00:10:09.537 --> 00:10:11.160
So we need to do that,
we need to collect that.

179
00:10:11.160 --> 00:10:14.318
So I'm gonna say, body = ''.

180
00:10:14.318 --> 00:10:19.061
Then I need to register some
events on the request object that

181
00:10:19.061 --> 00:10:22.409
fire whenever a new
piece of data comes in.

182
00:10:22.409 --> 00:10:25.497
And then send that data over
to the body to be collected,

183
00:10:25.497 --> 00:10:27.085
which we could then look at.

184
00:10:27.085 --> 00:10:31.629
So I'm gonna say, req.on, ('data').

185
00:10:34.322 --> 00:10:39.479
And this is going to get what we call
a chunk, literally a chunk of data.

186
00:10:39.479 --> 00:10:44.550
And I'm gonna say, body += chunk.

187
00:10:44.550 --> 00:10:46.187
So we got that.

188
00:10:46.187 --> 00:10:50.080
The next thing I'm gonna do is say,
req.on('close').

189
00:10:50.080 --> 00:10:53.089
So when it's done,
there's no more data coming in.

190
00:10:53.089 --> 00:10:54.109
We should be good to go.

191
00:10:58.417 --> 00:11:01.498
This is where you would insert
into a database, right?

192
00:11:01.498 --> 00:11:02.952
We got the data, we're good to go.

193
00:11:02.952 --> 00:11:03.780
We can insert into the database.

194
00:11:03.780 --> 00:11:06.547
I'm just gonna log this so
we can see what it is.

195
00:11:06.547 --> 00:11:09.435
So we'll say body.

196
00:11:09.435 --> 00:11:11.045
So if it's a POST, we'll see that.

197
00:11:11.045 --> 00:11:15.484
And then else, if it's not a POST,
if it's just a GET request,

198
00:11:15.484 --> 00:11:18.524
then we will just do a res, or, I'm sorry,

199
00:11:18.524 --> 00:11:23.480
actually before the GET request,
we need to close this response.

200
00:11:23.480 --> 00:11:25.240
Yeah, I was about to
run into a big mistake.

201
00:11:25.240 --> 00:11:29.839
If you don't respond back to the client,
your server's gonna be hanging.

202
00:11:29.839 --> 00:11:33.792
As in, it's gonna be stuck in this
state of I received the request but

203
00:11:33.792 --> 00:11:35.645
I don't know what to do with it.

204
00:11:35.645 --> 00:11:37.644
And then the connection
is gonna be stuck open.

205
00:11:37.644 --> 00:11:40.979
And a client's gonna be like,
I'm waiting to hear back from you,

206
00:11:40.979 --> 00:11:42.779
you haven't gotten back to me yet.

207
00:11:42.779 --> 00:11:45.867
And depending on the client,
whether it's a browser or whatever,

208
00:11:45.867 --> 00:11:49.078
there's a certain timeout limit,
eventually it'll just timeout.

209
00:11:49.078 --> 00:11:51.049
So if you ever seen a timeout error,

210
00:11:51.049 --> 00:11:55.520
it could have been someone who forgot to
send back a response, or more probably,

211
00:11:55.520 --> 00:11:59.488
what actually really happened is
the response is just taking too long.

212
00:11:59.488 --> 00:12:02.361
But sometimes yeah,
somebody probably forgot to respond back.

213
00:12:02.361 --> 00:12:04.333
And that's what would happen
here if I would have moved on.

214
00:12:04.333 --> 00:12:07.513
So we do need to close off this
branch here by responding.

215
00:12:07.513 --> 00:12:11.013
So I'm just gonna say,
the quickest way is to do res.end, and

216
00:12:11.013 --> 00:12:13.470
then you can send back
something like that.

217
00:12:13.470 --> 00:12:18.195
But I'm also just gonna say,
res.setHeader, or no,

218
00:12:18.195 --> 00:12:22.327
I'm gonna say set, no,
which one do I wanna do?

219
00:12:22.327 --> 00:12:27.403
writeHead, I think it's writeHead,
yeah, I wanna do a writeHead.

220
00:12:27.403 --> 00:12:30.082
So this is writing the header,
the status code.

221
00:12:30.082 --> 00:12:34.152
So for a successful POST,
it's usually a 201 status code.

222
00:12:34.152 --> 00:12:37.028
If you don't know much about status codes,
it's totally fine,

223
00:12:37.028 --> 00:12:38.765
you can look them up whatever you want.

224
00:12:38.765 --> 00:12:40.863
But in today's world,
especially with GraphQL,

225
00:12:40.863 --> 00:12:42.978
status codes are becoming less and
less of a thing.

226
00:12:42.978 --> 00:12:45.415
But it is very helpful to understand
the different status codes,

227
00:12:45.415 --> 00:12:48.265
it'll probably take you 20 minutes
just to read them and figure them out.

228
00:12:48.265 --> 00:12:52.552
But a 200 status code
means successful GET.

229
00:12:52.552 --> 00:12:54.653
201 means successful POST.

230
00:12:54.653 --> 00:12:56.783
So we're gonna do a 201.

231
00:12:56.783 --> 00:12:59.761
And then else, if you didn't POST,
you just did a regular GET,

232
00:12:59.761 --> 00:13:01.043
we'll just say res.end.

233
00:13:01.043 --> 00:13:05.637
And then we'll say, hi, like that.

234
00:13:05.637 --> 00:13:13.051
And I'll also just say res.writeHead(200),
for a successful GET, like that.

235
00:13:13.051 --> 00:13:15.417
So now we have our server.

236
00:13:15.417 --> 00:13:20.114
The next thing we need to do is
we need to listen for the server.

237
00:13:20.114 --> 00:13:23.486
We have to turn it on to the actual
ports and stuff like that.

238
00:13:23.486 --> 00:13:27.074
So we'll say, server.listen.

239
00:13:27.074 --> 00:13:29.700
And you can see here,
it takes a port, we have a port.

240
00:13:29.700 --> 00:13:34.404
It takes a host, we have a host.

241
00:13:34.404 --> 00:13:39.795
And then the last thing we could do is we
could put a callback here to do something.

242
00:13:39.795 --> 00:13:43.782
And we'll say,
console.log('Server on'), and

243
00:13:43.782 --> 00:13:46.933
then let's do some template strings here.

244
00:13:50.886 --> 00:13:57.107
We'll say ${host}:, ${port}.

245
00:13:59.836 --> 00:14:01.614
There we go.

246
00:14:01.614 --> 00:14:04.701
So we'll try that, and
see if I didn't mess anything up,

247
00:14:04.701 --> 00:14:06.214
we will see this server run.

248
00:14:06.214 --> 00:14:07.904
So let's give it a try.

249
00:14:07.904 --> 00:14:11.297
So I can say, node, and
where did I put this, server/index.js.

250
00:14:11.297 --> 00:14:14.653
So I can say, node server.

251
00:14:14.653 --> 00:14:17.719
I gotta back out, there we go.

252
00:14:19.197 --> 00:14:21.132
Actually, I'm just gonna
go into that file.

253
00:14:21.132 --> 00:14:25.046
So that folder, there we go.

254
00:14:25.046 --> 00:14:27.595
And I can say, node index.js.

255
00:14:27.595 --> 00:14:30.555
And as you can see,
we are on localhost:8000.

256
00:14:30.555 --> 00:14:31.919
So that log works.

257
00:14:31.919 --> 00:14:36.106
It's logging server on localhost:8000.

258
00:14:36.106 --> 00:14:40.919
And notice my Node app is still running.

259
00:14:40.919 --> 00:14:43.499
Up to this point, we would run a command,
it would execute and

260
00:14:43.499 --> 00:14:46.045
then it would stop and exit and
we'd be back in the terminal.

261
00:14:46.045 --> 00:14:49.318
Right now, it's just sitting here,
it's just waiting.

262
00:14:49.318 --> 00:14:53.185
Because we're connected,
as far as Node's understanding is,

263
00:14:53.185 --> 00:14:57.912
there's still some work to be done,
there's still some work to be processed.

264
00:14:57.912 --> 00:15:00.438
So it's just continuing along and waiting.

265
00:15:00.438 --> 00:15:04.119
And that's the difference between a server
and a CLI, where we ran one command and

266
00:15:04.119 --> 00:15:04.716
it was done.

267
00:15:04.716 --> 00:15:07.973
Or we did the file reading,
we ran one command and it was done.

268
00:15:07.973 --> 00:15:10.407
The server just stays on,
that's the whole point.

269
00:15:10.407 --> 00:15:13.287
So unless you're doing
something like serverless,

270
00:15:13.287 --> 00:15:17.767
which is something that doesn't stay on
but still operates in the server context,

271
00:15:17.767 --> 00:15:20.524
you'd probably want your
servers on all the time.

272
00:15:20.524 --> 00:15:21.362
So that's what this is doing.

273
00:15:21.362 --> 00:15:24.847
It's just sitting here until it errors
out or when we stop it manually,

274
00:15:24.847 --> 00:15:26.486
which you could do with Ctrl+C.

275
00:15:26.486 --> 00:15:28.120
So I'm gonna keep that running.

276
00:15:28.120 --> 00:15:30.740
And then I'm gonna interact with
this API to see how it works.

