WEBVTT

1
00:00:00.000 --> 00:00:05.787
The question was Node.js was originally
created from Chrome's V8 runtime,

2
00:00:05.787 --> 00:00:07.871
and that's what it runs on.

3
00:00:07.871 --> 00:00:12.060
But if the Chrome team decides that, hey,
we're gonna make something called V9,

4
00:00:12.060 --> 00:00:13.602
what's gonna happen to Node?

5
00:00:13.602 --> 00:00:17.598
Is Node gonna stay up to date with
that new engine that Chrome is doing?

6
00:00:17.598 --> 00:00:22.484
So there's a whole board,
there's a working group of individuals who

7
00:00:22.484 --> 00:00:27.791
are responsible for what's coming to
Node and what's happening with Node.

8
00:00:27.791 --> 00:00:31.751
In fact, there's a lot of history there,
a lot of controversial history.

9
00:00:31.751 --> 00:00:34.345
At one point the community
split off from Node and

10
00:00:34.345 --> 00:00:37.451
made this other thing called IO.js and
then it came back.

11
00:00:37.451 --> 00:00:41.034
It's pretty crazy, it's a lot of drama
there, but it seems to have settled,

12
00:00:41.034 --> 00:00:42.554
it seems to have stabilized, and

13
00:00:42.554 --> 00:00:46.320
it seems that they're actually doing
really good by getting these versions out.

14
00:00:46.320 --> 00:00:49.636
Because for
a long time we were on version 0.12 for

15
00:00:49.636 --> 00:00:54.510
years, they didn't release version 1 and
it took them a long time to do that.

16
00:00:54.510 --> 00:00:59.301
So anyway, I think what they're gonna
do is that they have a process of

17
00:00:59.301 --> 00:01:03.051
what makes sense to bring into Node and
what doesn't.

18
00:01:03.051 --> 00:01:06.794
Because they can't bring everything
because a lot of the optimizations that

19
00:01:06.794 --> 00:01:09.905
happened in the browser are browser
specific optimizations and

20
00:01:09.905 --> 00:01:12.050
have nothing to do with Node and
vice versa.

21
00:01:12.050 --> 00:01:15.857
Node has probably a lot of more security
issues that they have to work around,

22
00:01:15.857 --> 00:01:19.511
the different things like that that
don't mean anything to the browser.

23
00:01:19.511 --> 00:01:23.930
So I think when it comes to stuff
like global JavaScript features that

24
00:01:23.930 --> 00:01:27.891
are independent of an environment
like modules, or syntax,

25
00:01:27.891 --> 00:01:31.335
you can expect those things
to come back to Node.js.

26
00:01:31.335 --> 00:01:34.821
Which is why I wanted us to download
version 14 because we do have some of

27
00:01:34.821 --> 00:01:36.202
those new syntax features.

28
00:01:36.202 --> 00:01:39.760
But when it comes to
environment specific features,

29
00:01:39.760 --> 00:01:43.720
do not expect those to be able
to be used inside of Node.js.

30
00:01:43.720 --> 00:01:47.255
The question was, well, what
are the differences between version one of

31
00:01:47.255 --> 00:01:49.374
this course and
version two of this course?

32
00:01:49.374 --> 00:01:54.107
Version two is gonna be using
the absolute latest version of Node.

33
00:01:54.107 --> 00:01:57.225
And compare that to the version
one of this course, so

34
00:01:57.225 --> 00:02:00.760
much has changed from the module,
syntax as you'll find out

35
00:02:00.760 --> 00:02:05.150
to how you even execute different files
and how you test different things.

36
00:02:05.150 --> 00:02:10.510
So new tools, new syntax, new execution
patterns, and really just, me I've grown

37
00:02:10.510 --> 00:02:15.760
as an engineer since I've taught this
course last and I have different opinions.

38
00:02:15.760 --> 00:02:20.289
I have different ways about building
things and I want to share those with you

39
00:02:20.289 --> 00:02:25.120
all, and hopefully they're valuable to
you, so a combination of all of those.

40
00:02:25.120 --> 00:02:27.470
The question was what's
my opinion on Deno?

41
00:02:27.470 --> 00:02:30.394
I feel like Deno has a lot of potential.

42
00:02:30.394 --> 00:02:33.330
I do see some of the shortcomings of Node.

43
00:02:33.330 --> 00:02:37.490
So if you don't know what Deno is,
Deno is a new runtime created.

44
00:02:37.490 --> 00:02:39.640
So it's a JavaScript runtime or

45
00:02:39.640 --> 00:02:44.750
technically it's a TypeScript runtime
that's very similar to Node.js.

46
00:02:44.750 --> 00:02:48.563
So it's an OS level language like Node.js
where you can build things like C allies,

47
00:02:48.563 --> 00:02:50.184
and servers, and stuff like that.

48
00:02:50.184 --> 00:02:54.248
But they do things differently
as far as how you import and

49
00:02:54.248 --> 00:02:56.880
use packages, how you bundle them.

50
00:02:56.880 --> 00:03:01.496
It basically takes some of the best
packages that you would have to find,

51
00:03:01.496 --> 00:03:06.113
research, and install yourself in
Node.js and makes them available by

52
00:03:06.113 --> 00:03:10.667
default natively inside of their
runtime so you don't have to do that.

53
00:03:10.667 --> 00:03:15.010
So things like testing, things like
bundling, you kind of get that for free.

54
00:03:15.010 --> 00:03:17.530
Whereas Node.js as you'll find out,
you gotta go shopping for that,

55
00:03:17.530 --> 00:03:19.850
you gotta figure out, well,
what's the best testing library?

56
00:03:19.850 --> 00:03:21.940
What's the best framework?

57
00:03:21.940 --> 00:03:23.490
What's the best server thing?

58
00:03:23.490 --> 00:03:26.631
Well, Deno kinda figures
all that stuff out for you.

59
00:03:26.631 --> 00:03:30.882
It has a more modern approach
about how to build applications.

60
00:03:30.882 --> 00:03:33.357
And it's benefiting off
of the community and

61
00:03:33.357 --> 00:03:37.276
all the patterns that have developed
over Node over the last ten years.

62
00:03:37.276 --> 00:03:41.152
So it's just like a combination of
everything that was great about Node that

63
00:03:41.152 --> 00:03:44.727
the community had to make and
then let's just put it into this thing and

64
00:03:44.727 --> 00:03:45.470
call it Deno.

65
00:03:45.470 --> 00:03:48.453
So I do think it has a lot of potential.

66
00:03:48.453 --> 00:03:53.479
I don't think it's gonna replace Node,
Node is everywhere.

67
00:03:53.479 --> 00:03:58.196
There's so much stuff built on Node that
I find it hard that something's gonna

68
00:03:58.196 --> 00:04:01.782
come and replace it, but
I do think there's room for Deno.

69
00:04:01.782 --> 00:04:05.961
If you're gonna go out there and build
something greenfield, something brand new,

70
00:04:05.961 --> 00:04:09.744
and you don't wanna go shopping for
all this stuff, yeah, Deno could be it.

71
00:04:09.744 --> 00:04:14.493
The only limitation there is,
what's available for you?

72
00:04:14.493 --> 00:04:17.229
I would say one of the biggest
features of Node.js is the fact that

73
00:04:17.229 --> 00:04:18.340
the communities is huge.

74
00:04:18.340 --> 00:04:21.978
It's like a double edged sword, it's like,
yeah, you got to go find everything, but

75
00:04:21.978 --> 00:04:24.950
there's a lot of stuff that you can
go through it, it's very helpful.

76
00:04:24.950 --> 00:04:29.156
So I think if a community can develop
around Deno and everything goes well,

77
00:04:29.156 --> 00:04:32.561
then there's probably potential,
but I would say for now,

78
00:04:32.561 --> 00:04:36.270
Node.js isn't going anywhere,
but Deno does seem promising.

79
00:04:36.270 --> 00:04:38.950
And I've actually used it, and
I tried all the time, and I like it.

80
00:04:38.950 --> 00:04:43.835
The question was testing in Node.js,
where sometimes we have

81
00:04:43.835 --> 00:04:48.360
to test browser specific things
like the DOM in Node.js.

82
00:04:48.360 --> 00:04:51.610
And can we do that in Node,
and the question is, yes.

83
00:04:51.610 --> 00:04:55.810
And I know that sounds confusing
because I just said there's no browser

84
00:04:55.810 --> 00:04:58.755
specific stuff in Node,
and that's still true.

85
00:04:58.755 --> 00:05:01.437
But because Node has a thriving community,

86
00:05:01.437 --> 00:05:04.925
people have developed mock
implementations of the DOM.

87
00:05:04.925 --> 00:05:08.641
They have developed virtual
implementations of the DOM to where

88
00:05:08.641 --> 00:05:11.341
your browser based code
knows no difference.

89
00:05:11.341 --> 00:05:13.951
It's the same to it,
so it can be executed.

90
00:05:13.951 --> 00:05:18.433
In some cases, it can be rendered if it's
like a JavaScript framework on the server.

91
00:05:18.433 --> 00:05:21.935
So yes, you are able to run a lot
of that stuff on the server and

92
00:05:21.935 --> 00:05:23.951
at least the functionality of it.

93
00:05:23.951 --> 00:05:27.714
You shouldn't expect to visually see
something because that still has to be

94
00:05:27.714 --> 00:05:31.768
processed by a browser even if Node is the
thing that's sending it to the browser,

95
00:05:31.768 --> 00:05:35.201
and processing it, and taking
a screenshot or something like that.

96
00:05:35.201 --> 00:05:38.410
But yes, you still have to go through a
browser if you wanna see a visual output.

97
00:05:38.410 --> 00:05:42.329
But as far as testing the logic,
testing the DOM, things like that, yeah,

98
00:05:42.329 --> 00:05:45.770
at the end of the day, the DOM when
it's rendered is just a string.

99
00:05:45.770 --> 00:05:49.015
So yeah, Node can handle strings, so yes,

100
00:05:49.015 --> 00:05:52.360
you can totally test
DOM things in Node.js.

