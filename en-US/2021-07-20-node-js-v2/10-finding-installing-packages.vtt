WEBVTT

1
00:00:00.170 --> 00:00:03.518
So what I want to do is before we get into
like installing things and using them,

2
00:00:03.518 --> 00:00:06.160
I want to show you how to
find them in the first place.

3
00:00:06.160 --> 00:00:10.448
And this is something that I think it's
actually a really important skill like I'm

4
00:00:10.448 --> 00:00:14.428
in a boat of a good developer is someone
that knows how to use their resources,

5
00:00:14.428 --> 00:00:17.121
they know where to look,
they know when to look, and

6
00:00:17.121 --> 00:00:20.395
they know how to try things to
determine value really quickly.

7
00:00:20.395 --> 00:00:23.279
They can look at something and
determine if this thing is valuable or

8
00:00:23.279 --> 00:00:24.755
not without wasting a lot of time.

9
00:00:24.755 --> 00:00:28.412
And I think that's a very important skill
to have that no one really talks about and

10
00:00:28.412 --> 00:00:30.075
you don't really train for.

11
00:00:30.075 --> 00:00:32.196
It is something that you
develop just along the way but

12
00:00:32.196 --> 00:00:35.401
if you don't have a lot of interaction
with this, if you're not responsible for

13
00:00:35.401 --> 00:00:38.250
installing things at your company,
you don't get this interaction.

14
00:00:38.250 --> 00:00:39.790
You don't get to build these reps.

15
00:00:39.790 --> 00:00:43.848
So I really pride myself being able to
like go on NPM and see what's good and

16
00:00:43.848 --> 00:00:48.250
what's not good and try it out and move on
with my day and try something else out.

17
00:00:48.250 --> 00:00:50.200
So I want to show you how I do that.

18
00:00:50.200 --> 00:00:55.412
So NPM registry is you could think of as
like a database of Published NPM packages,

19
00:00:55.412 --> 00:00:57.570
and like that's basically it.

20
00:00:57.570 --> 00:01:01.340
So we're gonna go look at
the NPM registry NPM js.com.

21
00:01:01.340 --> 00:01:06.110
It has a search bar up top and you can
type in pretty much whatever you want.

22
00:01:06.110 --> 00:01:11.590
So let's say you're working on an API and
you need to get a database.

23
00:01:11.590 --> 00:01:16.880
So if I type in database there's
literally something called databases.

24
00:01:16.880 --> 00:01:19.350
an exact match is probably not
what you were looking for.

25
00:01:19.350 --> 00:01:20.770
But there is something called database.

26
00:01:20.770 --> 00:01:22.458
And as you can imagine,

27
00:01:22.458 --> 00:01:28.100
there are over 500 pages worth of
hits that contain the word database.

28
00:01:28.100 --> 00:01:31.880
So it will take you a very long time to
go through and figure out what's what.

29
00:01:31.880 --> 00:01:33.950
So you probably want to come
up with a bigger question.

30
00:01:33.950 --> 00:01:37.198
So like, maybe not that type of database,
but maybe you're looking for

31
00:01:37.198 --> 00:01:38.220
a specific database.

32
00:01:38.220 --> 00:01:42.090
So let me go type in Mongo database, and
try to see what plugins they have there.

33
00:01:42.090 --> 00:01:44.180
Okay, a little less, not so many pages.

34
00:01:44.180 --> 00:01:45.630
We're getting closer.

35
00:01:45.630 --> 00:01:47.650
So let's say we check this out.

36
00:01:47.650 --> 00:01:51.200
We look at, hey,
I'm using Express checkout Mongo.

37
00:01:52.240 --> 00:01:55.460
So when you click on a package,
you'll notice a couple things.

38
00:01:55.460 --> 00:01:57.230
One, you'll see the README here.

39
00:01:57.230 --> 00:02:00.110
This is the same README that's
probably on the GitHub repository.

40
00:02:00.110 --> 00:02:01.230
It's the README.

41
00:02:01.230 --> 00:02:02.990
Dot md that's on the route.

42
00:02:02.990 --> 00:02:07.644
You can also see how many packages this
package has because packages can have

43
00:02:07.644 --> 00:02:10.770
packages and
that's where it gets pretty crazy.

44
00:02:10.770 --> 00:02:14.080
You can see what is
using this as a package.

45
00:02:14.080 --> 00:02:17.757
So what's dependent on this and how
many versions it has and when they were

46
00:02:17.757 --> 00:02:21.375
released, which is also really cool
because that tells you how active or

47
00:02:21.375 --> 00:02:24.815
inactive this project is you can
also see when it was last published,

48
00:02:24.815 --> 00:02:26.520
which is a good sign.

49
00:02:26.520 --> 00:02:29.800
So what I like to do is when I come here,
I try to find the thing that I like.

50
00:02:29.800 --> 00:02:32.781
I try to see that make sure
it was relatively updated,

51
00:02:32.781 --> 00:02:36.756
like if it says two years ago,
unless there's literally nothing else I

52
00:02:36.756 --> 00:02:40.460
probably won't use it if it
was updated two years ago.

53
00:02:40.460 --> 00:02:42.950
There's other things that this
probably the last thing I'll try,

54
00:02:42.950 --> 00:02:44.608
I'll go try something
a little more recent,

55
00:02:44.608 --> 00:02:47.170
the last couple months or
something like that the latest.

56
00:02:47.170 --> 00:02:50.808
You can also go check out the GitHub
to see the source code to see the open

57
00:02:50.808 --> 00:02:53.780
issues, open pull requests,
these are all good signs.

58
00:02:53.780 --> 00:02:58.010
If I look at an issue, and I see that,
okay, this issue was open 15 days ago.

59
00:02:58.010 --> 00:02:59.726
This is a pretty active project so

60
00:02:59.726 --> 00:03:03.524
you know this is very good sign that you
have some support here if you need it

61
00:03:03.524 --> 00:03:07.141
because at the end of the day this is
created by some developer just like

62
00:03:07.141 --> 00:03:10.550
you some engineer on their free
time who just happened to do this.

63
00:03:10.550 --> 00:03:12.796
They probably have a full time job and
a family and and

64
00:03:12.796 --> 00:03:14.440
they're not getting paid to do this.

65
00:03:14.440 --> 00:03:17.840
So like you but
you also need this to work.

66
00:03:17.840 --> 00:03:19.960
So like you You can't
demand that they fix it.

67
00:03:19.960 --> 00:03:21.540
You're not a paying customer.

68
00:03:21.540 --> 00:03:23.240
But at the same time
you do want it to work.

69
00:03:23.240 --> 00:03:24.280
So you got to work with them.

70
00:03:24.280 --> 00:03:27.280
It's open source, you can create issues,
you can fix them yourself.

71
00:03:27.280 --> 00:03:29.590
You can make pull requests and
things like that.

72
00:03:29.590 --> 00:03:32.638
But at the end of the day, you do want
a project that's at least maintained,

73
00:03:32.638 --> 00:03:34.779
it has some type of some type
of maintainer behind it,

74
00:03:34.779 --> 00:03:37.180
that's keeping keeping it up to date and
things like that.

75
00:03:37.180 --> 00:03:40.413
So that's what I would do once I
find the thing that I want, and

76
00:03:40.413 --> 00:03:41.830
then I would install it.

77
00:03:41.830 --> 00:03:44.851
So one, I know that it's really
good as lodash we go here,

78
00:03:44.851 --> 00:03:47.626
we see lodash is pretty good
updated four months ago,

79
00:03:47.626 --> 00:03:51.970
which is honestly pretty crazy cuz I don't
know what else they're adding to this.

80
00:03:51.970 --> 00:03:54.299
But yeah,
lodash is one they even have the copy and

81
00:03:54.299 --> 00:03:57.030
paste commands that you can
use here which is really cool.

82
00:03:58.120 --> 00:04:00.290
And that's what we are going to do.

83
00:04:00.290 --> 00:04:03.650
So that's pretty much my process
of how I figure out what I want.

84
00:04:03.650 --> 00:04:08.510
So if I'm going to use something like
lodash, this is how I would do it.

85
00:04:09.550 --> 00:04:11.690
I would go into my terminal.

86
00:04:11.690 --> 00:04:13.767
I would type in npm install,

87
00:04:13.767 --> 00:04:19.300
then I would type in the name of
the package that I want, which is lodash.

88
00:04:19.300 --> 00:04:21.872
And in fact,
actually before we install it,

89
00:04:21.872 --> 00:04:24.377
you can do this you can
say npm info lodash and

90
00:04:24.377 --> 00:04:28.390
it pretty much gives you the same
stuff that we just saw on the website.

91
00:04:28.390 --> 00:04:30.450
So that way you can see
it here in your terminal.

92
00:04:30.450 --> 00:04:34.693
You can see keywords, GitHub URLs
maintainers, when it was published last,

93
00:04:34.693 --> 00:04:37.280
all different types of stuff,
you can do that.

94
00:04:37.280 --> 00:04:38.851
I think there's also an NPM search,

95
00:04:38.851 --> 00:04:40.990
you can search through
here in your terminal too.

96
00:04:40.990 --> 00:04:44.380
But I don't know about that,
I don't think I would do that.

97
00:04:44.380 --> 00:04:46.650
So yeah, now let's go on to install it.

98
00:04:46.650 --> 00:04:48.080
So I'm gonna say npm install.

99
00:04:48.080 --> 00:04:50.770
I'm gonna say lodash.

100
00:04:50.770 --> 00:04:52.940
But instead of hitting Enter,
I'm actually gonna pass a flag.

101
00:04:52.940 --> 00:04:53.710
This is a flag.

102
00:04:53.710 --> 00:04:55.910
By the way, when you do dash,
dash like that, that's a flag.

103
00:04:55.910 --> 00:04:57.743
And you can think of flags as like,

104
00:04:57.743 --> 00:05:01.790
options that we pass into a command line
tool, what you will be making soon so

105
00:05:01.790 --> 00:05:05.090
you'll know exactly what
that means when you make it.

106
00:05:05.090 --> 00:05:09.810
We're gonna pass on SS, save and
I'm going to hit enter.

107
00:05:09.810 --> 00:05:10.915
So you can see it went and

108
00:05:10.915 --> 00:05:14.456
downloaded it you get a couple couple
things here you get some notices you get

109
00:05:14.456 --> 00:05:17.690
some warnings you can ignore
the warnings you can ignore all of this.

110
00:05:17.690 --> 00:05:20.760
This is not for
you is not some meet meaning thing.

111
00:05:20.760 --> 00:05:23.076
Sometimes you'll see errors here and
you should maybe look for

112
00:05:23.076 --> 00:05:25.300
those even sometimes it's
not that big of a deal.

113
00:05:25.300 --> 00:05:29.630
And then you can see we add at one
package, low dash version 14.17.21.

114
00:05:29.630 --> 00:05:33.572
So major version four,
minor version, 17 patch 21,

115
00:05:33.572 --> 00:05:36.709
we add at one package
from two contributors and

116
00:05:36.709 --> 00:05:41.390
that audited one package and
half a second, zero vulnerabilities.

117
00:05:41.390 --> 00:05:43.480
So like they're really checking for
everything.

118
00:05:43.480 --> 00:05:47.770
Now, if we go back to our code,
we have this, we have two new files.

119
00:05:47.770 --> 00:05:49.600
Now well, one new file in one folder.

120
00:05:49.600 --> 00:05:53.660
We have a package lock JSON,
and we'll talk about that.

121
00:05:53.660 --> 00:05:55.630
And then we have node modules.

122
00:05:55.630 --> 00:05:58.405
So this is what I want to
start with node modules.

123
00:05:58.405 --> 00:06:03.005
If you open it up,
there is a lot of code in here.

124
00:06:03.005 --> 00:06:04.255
We're like, what is all of this?

125
00:06:04.255 --> 00:06:06.175
Why is all this code in here?

126
00:06:06.175 --> 00:06:07.515
How did it get here?

127
00:06:07.515 --> 00:06:08.625
I didn't ask for any of this.

128
00:06:08.625 --> 00:06:09.825
I just installed lodash.

129
00:06:09.825 --> 00:06:11.655
But what is all of this?

130
00:06:11.655 --> 00:06:17.399
Well, these are probably the dependencies
on which lodash depends on,

131
00:06:17.399 --> 00:06:20.670
because packages have packages.

132
00:06:20.670 --> 00:06:24.121
I know lodash recently kind of like broke
everything up to be their own individual

133
00:06:24.121 --> 00:06:24.640
packages.

134
00:06:24.640 --> 00:06:27.401
And I would imagine if you
install lodash by itself,

135
00:06:27.401 --> 00:06:31.380
it just pulls in all the individual
packages and like bundles them for you.

136
00:06:31.380 --> 00:06:35.230
So these are all the dependencies
that lodash actually needs.

137
00:06:35.230 --> 00:06:37.080
So that's what's inside of here.

138
00:06:37.080 --> 00:06:40.766
And if you install something else
that has a similar dependency,

139
00:06:40.766 --> 00:06:44.987
there's a conflict npm tries to resolve
that conflict by like going to like

140
00:06:44.987 --> 00:06:48.891
the most common version and
it keeps everything flat and not nested.

141
00:06:48.891 --> 00:06:52.292
Different things like that so there's a
lot of work going on behind the scenes of

142
00:06:52.292 --> 00:06:55.540
NPM, to make sure that your modules
are like conflict free you have the right

143
00:06:55.540 --> 00:06:57.790
version and you don't have duplicates.

144
00:06:57.790 --> 00:07:01.280
Different things like that and
it's all inside this node modules folder.

145
00:07:01.280 --> 00:07:03.227
So you should never touch this folder,

146
00:07:03.227 --> 00:07:07.121
you should never be coming here an adding
files and trying different things and

147
00:07:07.121 --> 00:07:11.074
stuff like that because this is gonna get
wiped out every every time someone runs

148
00:07:11.074 --> 00:07:14.850
npm install this folder is also not
meant to be checked into source control.

149
00:07:14.850 --> 00:07:19.988
So what you would do is you would
make a gitignore Git.ignore, and

150
00:07:19.988 --> 00:07:24.852
you'd add node modules to that
because let's just be honest,

151
00:07:24.852 --> 00:07:27.580
you don't want to send up a bunch.

152
00:07:27.580 --> 00:07:32.582
You don't want to send a bunch of
third party code that's not yours

153
00:07:32.582 --> 00:07:37.850
into your source control to be
processed by whatever ci that you have,

154
00:07:37.850 --> 00:07:43.475
or code reviewed by some of you imagine
a pull request of all of these files,

155
00:07:43.475 --> 00:07:48.030
when all you did was install lodash and
use it on one line.

156
00:07:48.030 --> 00:07:49.770
But now your progress has
all of these in green.

157
00:07:49.770 --> 00:07:51.580
That would be crazy, right?

158
00:07:51.580 --> 00:07:53.840
So you don't check this
into source control.

159
00:07:53.840 --> 00:07:56.854
So how does someone like
someone on your team or

160
00:07:56.854 --> 00:07:59.340
another machine on a CI somewhere?.

161
00:07:59.340 --> 00:08:03.290
How do they know what
modules that this app needs?.

162
00:08:03.290 --> 00:08:05.550
If you don't check it in,
like how do they know to get that code?

163
00:08:05.550 --> 00:08:09.050
Well, that's where that save flag came in.

164
00:08:09.050 --> 00:08:11.135
So when we did the dash dash save,

165
00:08:11.135 --> 00:08:16.450
what we actually did was we told npm
to save the name of these dependencies.

166
00:08:16.450 --> 00:08:18.425
Into the dependencies
object in the package,

167
00:08:18.425 --> 00:08:20.600
that JSON with the current version.

168
00:08:20.600 --> 00:08:25.710
So, when anyone else pulls this out from
GitHub minus the node modules folder.

169
00:08:25.710 --> 00:08:29.715
All they would have to do is just run
npm install with no arguments and

170
00:08:29.715 --> 00:08:34.423
that's gonna look at the package that JSON
to determine what packages need to be

171
00:08:34.423 --> 00:08:37.540
installed, and
then they will be installed there.

172
00:08:38.590 --> 00:08:42.238
Now to make sure that they install
the exact same versions as that you

173
00:08:42.238 --> 00:08:44.940
have though what's supposed to be there.

174
00:08:44.940 --> 00:08:48.750
The package lock that the package
lock JSON was introduced.

175
00:08:48.750 --> 00:08:52.946
This does exactly what it sounds like,
it locks the packages and

176
00:08:52.946 --> 00:08:58.152
to the exact resolved or the exact result
version that npm decided was correct,

177
00:08:58.152 --> 00:09:00.130
so if there's any like.

178
00:09:00.130 --> 00:09:01.880
Conflicts between versions.

179
00:09:01.880 --> 00:09:05.804
If there's any duplicates that were
resolved, whatever they resolve to,

180
00:09:05.804 --> 00:09:08.009
will be saved in this package lock JSON,
so

181
00:09:08.009 --> 00:09:11.933
that everyone on your team guaranteed
to have the exact same dependencies,

182
00:09:11.933 --> 00:09:16.680
with the exact same versions, and there
should be no discrepancies between that.

183
00:09:16.680 --> 00:09:17.750
So that's where that comes in.

184
00:09:17.750 --> 00:09:19.810
So all these work together to do that.

185
00:09:22.510 --> 00:09:23.210
That was a lot.

186
00:09:23.210 --> 00:09:28.810
Any questions on packages
in npm before we move on.

187
00:09:28.810 --> 00:09:31.859
So yeah, the question was how do
we know if the code is malicious?

188
00:09:31.859 --> 00:09:37.050
Well I would say this you
literally don't know.

189
00:09:37.050 --> 00:09:38.500
There's no way of knowing.

190
00:09:38.500 --> 00:09:42.949
And so I'll tell you how we've gotten
to this point where like that's been,

191
00:09:42.949 --> 00:09:47.673
even though you don't know how that's been
almost entirely avoided is because of

192
00:09:47.673 --> 00:09:48.990
the community.

193
00:09:48.990 --> 00:09:50.922
So typically one just
because you make a package,

194
00:09:50.922 --> 00:09:53.880
that doesn't mean a lot of
people are going to install it.

195
00:09:53.880 --> 00:09:57.427
So that's why you should probably only
install packages that, like I said,

196
00:09:57.427 --> 00:10:00.646
are being used by a bunch of people
that kind of vet the fact that, hey,

197
00:10:00.646 --> 00:10:01.700
it's not malicious.

198
00:10:01.700 --> 00:10:02.340
It's on GitHub.

199
00:10:02.340 --> 00:10:04.420
You can see the code
people are making issues.

200
00:10:04.420 --> 00:10:06.070
There's multiple contributors.

201
00:10:06.070 --> 00:10:07.900
It's being sponsored by big names.

202
00:10:07.900 --> 00:10:11.770
So that's a good sign, though don't
just install something that no one else,

203
00:10:11.770 --> 00:10:12.960
didn't install.

204
00:10:12.960 --> 00:10:17.010
And if you have to go on GitHub and
look at the source code.

205
00:10:17.010 --> 00:10:20.550
If you cannot find the source code,
you can install it.

206
00:10:20.550 --> 00:10:24.020
Just don't run it and then go look at
the code in the node modules folder.

207
00:10:24.020 --> 00:10:25.530
Don't run it and just see what it's doing.

208
00:10:25.530 --> 00:10:28.698
You can see what it's doing, and
kind of figure out for yourself, but

209
00:10:28.698 --> 00:10:30.750
at that point, it's probably not worth it.

210
00:10:30.750 --> 00:10:32.862
You should just go find
a better alternative or

211
00:10:32.862 --> 00:10:34.820
just whatever you're trying to install.

212
00:10:34.820 --> 00:10:38.386
Just make it yourself cuz if you got to
go dig in an old models folder to see why

213
00:10:38.386 --> 00:10:42.690
this thing how this thing is safer not
it's probably not worth it in my opinion.

214
00:10:42.690 --> 00:10:46.970
But yeah, it's mostly the power of the
people that prevents that from happening.

215
00:10:46.970 --> 00:10:47.806
Whereas like,

216
00:10:47.806 --> 00:10:51.987
I can't think of like one big event
where there was something malicious, but

217
00:10:51.987 --> 00:10:56.361
I can't think of plenty events where like
someone changed something in a code and

218
00:10:56.361 --> 00:11:01.080
it broke everything downstream like
someone changed this parentheses to this.

219
00:11:01.080 --> 00:11:04.120
Now every package that
depends on this is broken.

220
00:11:04.120 --> 00:11:06.320
That has happened a lot.

221
00:11:06.320 --> 00:11:10.066
Yeah, so, the question is, what's
the difference between NPM and yarn and

222
00:11:10.066 --> 00:11:12.430
why do people choose one or the other?

223
00:11:12.430 --> 00:11:18.183
So, yarn was created by Facebook Some
time ago because at the current

224
00:11:18.183 --> 00:11:25.040
time when it was created npm was in this
state of just basically not being updated.

225
00:11:25.040 --> 00:11:26.620
It was really slow.

226
00:11:26.620 --> 00:11:31.092
It didn't have this feature of like D
duping it didn't have a package lock JSON

227
00:11:31.092 --> 00:11:32.070
at a time.

228
00:11:32.070 --> 00:11:35.300
So there was just so many issues around
npm and it was the only thing around.

229
00:11:35.300 --> 00:11:36.780
So people just dealt with it.

230
00:11:36.780 --> 00:11:38.400
I guess the folks at
Facebook got tired of it.

231
00:11:38.400 --> 00:11:42.357
So they made yarn,
which was exactly like npm, but

232
00:11:42.357 --> 00:11:45.590
it did caching and it resolved versions.

233
00:11:45.590 --> 00:11:47.940
It dedupe things, it stored them flat.

234
00:11:47.940 --> 00:11:49.878
And so
people started using yarn because of that,

235
00:11:49.878 --> 00:11:52.010
because it was literally the same thing,
but better.

236
00:11:52.010 --> 00:11:53.990
It was exactly what they wanted from npm.

237
00:11:53.990 --> 00:11:57.557
Then soon after, because of just how
competition works, npm was like, well,

238
00:11:57.557 --> 00:11:58.740
we're gonna do that too.

239
00:11:58.740 --> 00:12:02.720
So npm just does the same thing as well,
just as good as yarn if not better.

240
00:12:02.720 --> 00:12:06.119
And so now it's like, well, whatever one
you wanna use is probably the one that

241
00:12:06.119 --> 00:12:09.410
you're gonna use, because they all
kinda really do the same thing.

242
00:12:09.410 --> 00:12:11.670
And as far as like,
where they get the packages from,

243
00:12:11.670 --> 00:12:13.990
that's a sweet thing about these managers.

244
00:12:13.990 --> 00:12:18.930
Either yarn or npm allows you to basically
point to whatever registry you want.

245
00:12:18.930 --> 00:12:21.476
NPM is going to default
to the npm registry and

246
00:12:21.476 --> 00:12:25.670
I want to say yarn defaults to the yarn or
the npm registry as well.

247
00:12:25.670 --> 00:12:28.690
I've had to check on that depending on
what version of yarn you're using, but

248
00:12:28.690 --> 00:12:31.590
you can point to whatever register you
want, and even GitHub who owns npm.

249
00:12:31.590 --> 00:12:36.150
Now, I guess Microsoft owns them now
because Microsoft own GitHub owns GitHub.

250
00:12:36.150 --> 00:12:37.480
They have their own registry as well.

251
00:12:37.480 --> 00:12:41.020
So you could point to that and
download from a GitHub registry.

252
00:12:41.020 --> 00:12:44.792
It really just as long as the registry
follows the, the the way that the package

253
00:12:44.792 --> 00:12:48.337
manager is expecting to interact with
it or someone makes a plugin for it,

254
00:12:48.337 --> 00:12:51.713
then the package manager doesn't
really know what it's talking to or

255
00:12:51.713 --> 00:12:53.770
who it's talking to.

256
00:12:53.770 --> 00:12:56.420
And you can pretty much
pull from anywhere.

257
00:12:56.420 --> 00:12:59.390
Is the package folder named important?

258
00:12:59.390 --> 00:13:01.379
No.
I just called my package because

259
00:13:01.379 --> 00:13:03.130
I couldn't think of a better name.

260
00:13:03.130 --> 00:13:08.320
You can name this whatever you want it
has no it whatever your name is folder.

261
00:13:08.320 --> 00:13:12.500
Has nothing to do with anything other than
I guess the name of what's going to be in

262
00:13:12.500 --> 00:13:13.740
the import statement.

263
00:13:13.740 --> 00:13:16.139
If someone were to like drink, but

264
00:13:16.139 --> 00:13:20.290
the only thing that's really
important is the main field.

265
00:13:20.290 --> 00:13:24.652
This is what so like, what if I were
to import this package from inside of

266
00:13:24.652 --> 00:13:29.340
another app the way it would look
is because the name is called app.

267
00:13:29.340 --> 00:13:30.740
It would look something like this.

268
00:13:30.740 --> 00:13:35.146
It would be like I would
be importing you know

269
00:13:35.146 --> 00:13:39.950
Something from app,
it will look like that.

270
00:13:39.950 --> 00:13:41.120
That's exactly what it will look like.

271
00:13:41.120 --> 00:13:43.904
And you can see,
I'm only using the name of the package,

272
00:13:43.904 --> 00:13:46.290
not the name of the folder
that the package is in.

273
00:13:46.290 --> 00:13:47.870
It's just that name field.

274
00:13:47.870 --> 00:13:51.687
And if it's like scoped it
might be something like,

275
00:13:51.687 --> 00:13:54.980
my GitHub name or
my npm name slash my thing.

276
00:13:54.980 --> 00:13:58.291
That way it's scoped you know, you'll
see stuff like that companies use that

277
00:13:58.291 --> 00:14:01.352
a lot of companies will have something
like some company here slash app,

278
00:14:01.352 --> 00:14:02.950
or something like that.

279
00:14:02.950 --> 00:14:05.770
Or slash lib utils, whatever.

280
00:14:05.770 --> 00:14:09.344
You will see that so,
yeah it's a little different when you,

281
00:14:09.344 --> 00:14:13.265
it's a little different than like
what you would normally think but

282
00:14:13.265 --> 00:14:17.116
yeah it's just the name field that
determines how you import it and

283
00:14:17.116 --> 00:14:19.970
not the name of the folder
that the package is in.

