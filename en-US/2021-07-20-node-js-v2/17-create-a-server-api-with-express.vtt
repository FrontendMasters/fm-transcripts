WEBVTT

1
00:00:00.350 --> 00:00:04.503
We left off creating this manual
low level server which is, yeah,

2
00:00:04.503 --> 00:00:07.406
pretty good, pretty impressive, I like it.

3
00:00:07.406 --> 00:00:12.779
But you're not gonna
ship this to production.

4
00:00:12.779 --> 00:00:16.359
So what you wanna do instead
is use this amazing tool,

5
00:00:16.359 --> 00:00:21.056
probably one of my most favorite
packages in the whole npm ecosystem,

6
00:00:21.056 --> 00:00:24.335
a whole node ecosystem,
it's called express.

7
00:00:24.335 --> 00:00:29.494
It's such a fitting name because you
literally can create a server super fast,

8
00:00:29.494 --> 00:00:32.540
like you're on the expressway.

9
00:00:32.540 --> 00:00:35.239
So the way we're going to use
this is we're going to npm

10
00:00:35.239 --> 00:00:38.010
install express followed by
these two other packages.

11
00:00:38.010 --> 00:00:39.641
So let's talk about these for
a little bit.

12
00:00:39.641 --> 00:00:43.560
Express is a framework for
building servers, short and sweet.

13
00:00:43.560 --> 00:00:48.488
Body-parser is a middleware that
parses incoming requests, and

14
00:00:48.488 --> 00:00:52.628
morgan is a middleware for
logging incoming requests.

15
00:00:52.628 --> 00:00:55.660
So what is this word middleware?

16
00:00:55.660 --> 00:00:59.790
Well, middleware is basically, if you
think of a request coming in on a server,

17
00:00:59.790 --> 00:01:01.290
let's look at this.

18
00:01:01.290 --> 00:01:05.945
So requests coming in on the server,
here it is, that means this callback is

19
00:01:05.945 --> 00:01:09.240
gonna be called every single
time a request comes in.

20
00:01:09.240 --> 00:01:13.925
You can think of middleware as like
a little piece of functionality that sits

21
00:01:13.925 --> 00:01:18.626
in between what you eventually wanna do
with the request and when it came in.

22
00:01:18.626 --> 00:01:22.427
It's like a pipe of plugins that
can manipulate the request,

23
00:01:22.427 --> 00:01:27.251
it can inspect the request, it can do
whatever it wants to the request before it

24
00:01:27.251 --> 00:01:32.270
eventually sends it to another middleware
or, in this case the controller.

25
00:01:32.270 --> 00:01:36.340
It's like you have a sandwich,
one side of the bread would be the client,

26
00:01:36.340 --> 00:01:40.803
the other side of the bread would, no, one
side of the bread would be the incoming

27
00:01:40.803 --> 00:01:44.540
request and
other side of bread would be the response.

28
00:01:44.540 --> 00:01:46.924
And then somewhere in
the middle is the middleware.

29
00:01:46.924 --> 00:01:48.981
Like all the stuff that's in the middle,
and

30
00:01:48.981 --> 00:01:51.270
then the piece of meat is the controller,
right?

31
00:01:51.270 --> 00:01:54.697
So the middleware is like all the toppings
that just adds all the extra stuff to

32
00:01:54.697 --> 00:01:58.190
whatever meat or veggie patty you got
going on there, that's middleware.

33
00:01:58.190 --> 00:02:01.880
So body-parser and morgan are those two.

34
00:02:01.880 --> 00:02:06.619
We're gonna use body parser to basically
give us access to the incoming request,

35
00:02:06.619 --> 00:02:09.102
so we don't have to do the chunks anymore.

36
00:02:09.102 --> 00:02:11.640
We can just look at it like
a JavaScript object, would be great.

37
00:02:11.640 --> 00:02:15.333
And then we use morgan to just give us
some log, so we can see the request being

38
00:02:15.333 --> 00:02:18.537
logged on our server, that way we
know an actual request came in.

39
00:02:18.537 --> 00:02:21.699
It's great for debugging,
it's great for recognizing if and

40
00:02:21.699 --> 00:02:23.200
when someone requested you.

41
00:02:23.200 --> 00:02:26.602
You should never go to production without
having some type of request logging

42
00:02:26.602 --> 00:02:27.189
mechanism.

43
00:02:27.189 --> 00:02:31.077
Because one of the most common debugging
things you have to do as a back end

44
00:02:31.077 --> 00:02:35.092
engineer or a full stack engineer is
looking at the logs to see when or what or

45
00:02:35.092 --> 00:02:36.522
how something happened.

46
00:02:36.522 --> 00:02:40.358
And if you're not logging,
you're not winning, I don't know,

47
00:02:40.358 --> 00:02:44.010
you need to be logging,
so we're gonna log here.

48
00:02:44.010 --> 00:02:48.510
So let's get started, we're gonna make
like a simple little todos API that

49
00:02:48.510 --> 00:02:52.110
creates todos and
sends the todos back, very simple.

50
00:02:52.110 --> 00:02:55.138
So like always I have the code here,
you can copy and paste,

51
00:02:55.138 --> 00:02:58.510
but you can also just follow along
with me if you would like to.

52
00:02:58.510 --> 00:03:00.510
So we're gonna do just that.

53
00:03:00.510 --> 00:03:05.620
So I'm just gonna keep this
one here because why not?

54
00:03:05.620 --> 00:03:10.459
Let's make another file, and
I'm gonna call this one server.mjs,

55
00:03:10.459 --> 00:03:12.927
and I'll add it to our server file.

56
00:03:12.927 --> 00:03:19.664
And we need to do some installations,
so we're going to stop the server,

57
00:03:19.664 --> 00:03:25.241
we're gonna npm install express morgan And

58
00:03:25.241 --> 00:03:29.497
body-parser like that,
oops, I wanna save that.

59
00:03:31.439 --> 00:03:34.590
So I stopped the install by hitting
Ctrl + C, and then I came back and

60
00:03:34.590 --> 00:03:36.280
ran it again and saved it.

61
00:03:36.280 --> 00:03:41.027
So we got that,
looking good, looking good.

62
00:03:41.027 --> 00:03:43.857
And so I just noticed I clicked
on this node modules folder and

63
00:03:43.857 --> 00:03:46.670
you'll see that there's
a .bin folder here.

64
00:03:46.670 --> 00:03:51.720
That means that there's something that I
installed from node or from npm that has

65
00:03:51.720 --> 00:03:56.633
like a cli shipped with it, and if I go
look at it looks like there's a mime cli.

66
00:03:56.633 --> 00:03:59.594
But I didn't install mime,
I'm guessing express did or

67
00:03:59.594 --> 00:04:03.520
one of the tools that express uses
has a cli associated with it.

68
00:04:03.520 --> 00:04:06.685
Because that means this package somewhere,

69
00:04:06.685 --> 00:04:11.101
whatever is creating this mime
thing has a bin property on it's

70
00:04:11.101 --> 00:04:16.230
package.json whose key is called mime,
that's why that's there.

71
00:04:16.230 --> 00:04:20.006
So this is what it looks like when your
cli gets installed on someone's machine,

72
00:04:20.006 --> 00:04:20.950
it looks like this,

73
00:04:20.950 --> 00:04:24.522
it gets added to a .bin folder with the
name of that field that you put on bin.

74
00:04:24.522 --> 00:04:28.292
So that's why that's important and
it happens during installation of npm,

75
00:04:28.292 --> 00:04:29.920
when npm installs your package.

76
00:04:29.920 --> 00:04:36.136
Anyway, let's go back to our server and
let's import express from express and

77
00:04:36.136 --> 00:04:41.393
we'll import What was it?

78
00:04:41.393 --> 00:04:46.568
Yeah, body-parser,
was called a bp from body-parser and

79
00:04:46.568 --> 00:04:51.448
then imports morgan from morgan,
so we got all of those.

80
00:04:51.448 --> 00:04:54.689
Now, with express,
we need to create an app, so

81
00:04:54.689 --> 00:04:58.817
we'll say app = express,
like that, so now we have our app.

82
00:04:58.817 --> 00:05:02.383
And then we want to go ahead and
set up our middleware first, and

83
00:05:02.383 --> 00:05:06.486
then followed by our routes, and
then lastly, we will open the server,

84
00:05:06.486 --> 00:05:08.737
we'll listen and we'll be good to go.

85
00:05:08.737 --> 00:05:10.560
So let's set up our middleware.

86
00:05:10.560 --> 00:05:14.925
So the way we can do that is we can
say app.use, that's a method, and

87
00:05:14.925 --> 00:05:19.442
we can parse in an array of middleware,
we can parse in one middleware,

88
00:05:19.442 --> 00:05:24.250
we can make one in mime right
here with an anonymous function.

89
00:05:24.250 --> 00:05:28.039
We're gonna use body-parser,
I'm gonna say bp, and

90
00:05:28.039 --> 00:05:32.070
I'll actually want to use
something called URL encoded and

91
00:05:32.070 --> 00:05:35.466
I'll parse in an option
that says extended true.

92
00:05:35.466 --> 00:05:40.844
Basically what this is going to give us
is if someone parses some data on a query

93
00:05:40.844 --> 00:05:45.975
string, it's gonna parse that for
us and it basically just make sure that

94
00:05:45.975 --> 00:05:50.898
we can parse the query string and
whatever is in the URL pretty easily.

95
00:05:50.898 --> 00:05:55.106
We probably won't be using this in this
example, but it's useful, and then

96
00:05:55.106 --> 00:05:59.201
the other one we want to do is app.use
bp.json, this one we will be using.

97
00:05:59.201 --> 00:06:03.650
This one allows us to parse the json
body of a POST requests, so

98
00:06:03.650 --> 00:06:08.613
we can actually see it as json and
not like bits of chunks that we have to

99
00:06:08.613 --> 00:06:11.800
add together like we
did in the http server.

100
00:06:11.800 --> 00:06:16.495
And the last one we want to do is morgan.

101
00:06:16.495 --> 00:06:20.574
So we'll say morgan and will parse in dev,
is just the type of logging that you want,

102
00:06:20.574 --> 00:06:22.652
I think there's different options here.

103
00:06:22.652 --> 00:06:28.332
Let's see, so you can parse in, there's
like different formats you could do, we're

104
00:06:28.332 --> 00:06:33.879
just gonna parse in dev here, maybe if I
take this away, it'll show me, let's see.

105
00:06:37.490 --> 00:06:40.880
Yeah, there's combined some other options,
I always just use dev,

106
00:06:40.880 --> 00:06:45.470
cuz it's the shortest one, it's giving
me the simplest amount of information.

107
00:06:45.470 --> 00:06:48.277
So now that we got our middleware,
we need to set up some routes.

108
00:06:48.277 --> 00:06:51.630
Before we do that, let's create a little
database so we can store our todos.

109
00:06:51.630 --> 00:06:57.690
So I'm gonna say db = an array, and
now we're gonna set up some routes.

110
00:06:57.690 --> 00:07:01.868
So I wanna route to where if I POST to
slash todos, it'll create a new todo and

111
00:07:01.868 --> 00:07:04.720
add it to the database and
then send that back.

112
00:07:04.720 --> 00:07:08.390
And if I do a get request to slash todos,
it will just send me back all the todos.

113
00:07:08.390 --> 00:07:13.526
So I'm gonna say app dot
followed by the verb that I want,

114
00:07:13.526 --> 00:07:17.030
so in this case I want to do the POST.

115
00:07:17.030 --> 00:07:19.452
So app.post, that's a method,

116
00:07:19.452 --> 00:07:23.720
first argument is going to be
the path that I want to receive.

117
00:07:23.720 --> 00:07:26.516
I said I want todos, so
I'm gonna say todos, and

118
00:07:26.516 --> 00:07:30.005
then I'm gonna say todo actually,
keep it singular.

119
00:07:30.005 --> 00:07:32.955
And then whatever controller
you can think of it as like,

120
00:07:32.955 --> 00:07:37.405
what callback do you want to run when
someone does this POST requests, okay?

121
00:07:37.405 --> 00:07:42.059
And just like the http server because
guess what, express uses the HTTP

122
00:07:42.059 --> 00:07:46.417
server underneath it,
we get this request and response objects.

123
00:07:46.417 --> 00:07:50.869
And you'll see this pretty much in every
single node js server implementation,

124
00:07:50.869 --> 00:07:54.871
whether it's express or happy, or
whatever server framework you use.

125
00:07:54.871 --> 00:07:59.092
They pretty much all use request response
best cuz they're all using the http module

126
00:07:59.092 --> 00:08:02.907
which uses request and response, so
it's very common to see this pattern.

127
00:08:02.907 --> 00:08:08.829
So we're going to say, okay, cool,
we want to first grab this todo and

128
00:08:08.829 --> 00:08:12.396
add it to the database, so let's do that.

129
00:08:12.396 --> 00:08:18.963
So we'll say new todo and that's gonna
equal an object, we'll just say the ideas,

130
00:08:18.963 --> 00:08:24.143
I don't know, Date.now, so
I don't like incremented IDs, and

131
00:08:24.143 --> 00:08:29.530
then the text is gonna be whatever
is on the request.body.txt.

132
00:08:29.530 --> 00:08:32.663
So that means someone's gonna
POST an object to this server and

133
00:08:32.663 --> 00:08:36.739
that object is gonna have a text property
on it, and the value of that text property

134
00:08:36.739 --> 00:08:40.549
is gonna be whatever is gonna be saved
here and that is todo, and that's it.

135
00:08:40.549 --> 00:08:43.288
So now we got to need todo and

136
00:08:43.288 --> 00:08:48.532
I'm gonna say db.push
are new ToDo here like that,

137
00:08:48.532 --> 00:08:52.475
and I'm gonna say res.json newToDo.

138
00:08:52.475 --> 00:08:55.774
And that's simple I was
able to create it ToDo,

139
00:08:55.774 --> 00:08:59.989
push it in our database and
then respond back really simply.

140
00:08:59.989 --> 00:09:03.385
So we're gonna do the same
thing before get requests, so

141
00:09:03.385 --> 00:09:05.378
I'm gonna say app.get/to do.

142
00:09:05.378 --> 00:09:10.474
Remember, a route is a combination of a
verb and a path, the verb here is a POST,

143
00:09:10.474 --> 00:09:14.603
the path is todo, the verb pairs get,
but the path is also todo.

144
00:09:14.603 --> 00:09:16.321
So although they both the same routes,

145
00:09:16.321 --> 00:09:19.300
they're different paths cuz it says
a get verb associated with it.

146
00:09:19.300 --> 00:09:24.062
So it's gonna only be activated when
someone does a get request to this

147
00:09:24.062 --> 00:09:25.604
route or to this path.

148
00:09:25.604 --> 00:09:30.501
So request to response And

149
00:09:30.501 --> 00:09:33.383
then, for a get request,

150
00:09:33.383 --> 00:09:38.500
all you wanna do is just say res.json(db).

151
00:09:38.500 --> 00:09:40.725
Let's just show all the todos,
that's pretty much it.

152
00:09:40.725 --> 00:09:45.612
And the next thing is we want to start
our server so we can listen on it, so

153
00:09:45.612 --> 00:09:49.280
we'll say app.listen,
looks familiar, right?

154
00:09:49.280 --> 00:09:52.825
If we go back to here,
is that what we did here, server.listen?

155
00:09:52.825 --> 00:09:55.961
It's really, like I said
an abstraction around http module,

156
00:09:55.961 --> 00:09:57.270
which already does this.

157
00:09:57.270 --> 00:10:01.672
So we'll say app.listen, we don't have to
parse in a host here, it'll default to

158
00:10:01.672 --> 00:10:05.826
localhost for us or whatever host you're
on, and we just need to give it a port.

159
00:10:05.826 --> 00:10:08.754
So I'm gonna just give
it the same port 8000,

160
00:10:08.754 --> 00:10:11.132
and it does take a callback optionally.

161
00:10:11.132 --> 00:10:18.670
If you want to use that and
we'll just pretty much do the same thing,

162
00:10:18.670 --> 00:10:24.371
console.log server on http localhost 8000.

163
00:10:24.371 --> 00:10:28.531
So we'll do that, and
that's gonna be our server.

164
00:10:28.531 --> 00:10:31.950
So let's give it a try and
see what happens.

165
00:10:31.950 --> 00:10:36.953
So, we will come here,
we will run server in js,

166
00:10:36.953 --> 00:10:45.030
and you can see we still get the same
output server on http localhost 8000.

167
00:10:45.030 --> 00:10:49.118
So first I'm gonna do
a get request to 8000.

168
00:10:49.118 --> 00:10:53.754
No other route, no slash todo,
just a get request and

169
00:10:53.754 --> 00:10:58.404
I should get a, cannot get,
I get a 404 not found.

170
00:10:58.404 --> 00:10:59.860
Why is that?

171
00:10:59.860 --> 00:11:03.468
Pretty sure we just created a server,
it seems like it's working, so

172
00:11:03.468 --> 00:11:05.970
why is it saying it isn't found?

173
00:11:05.970 --> 00:11:09.522
Well, it's because I didn't register for

174
00:11:09.522 --> 00:11:14.323
a route of the verb get in the path slash,
so it just 404.

175
00:11:14.323 --> 00:11:18.486
So if I want to get rid of that I
would make a route for app.get/ and

176
00:11:18.486 --> 00:11:20.450
I would handle that.

177
00:11:20.450 --> 00:11:24.062
Or I could do like a catch all somewhere
down here that says, if someone tries to

178
00:11:24.062 --> 00:11:27.511
make a request to anything that's not
the stuff that I just put above here,

179
00:11:27.511 --> 00:11:28.314
then show that.

180
00:11:28.314 --> 00:11:31.754
And that's how you can handle errors
without your app crashing and

181
00:11:31.754 --> 00:11:33.360
stuff like that with express.

182
00:11:33.360 --> 00:11:36.477
So there's many ways to do that,
it depends on whatever logic you want, but

183
00:11:36.477 --> 00:11:37.770
that's why that's there.

184
00:11:37.770 --> 00:11:40.720
So that's actually a good sign that
we see that because that's what we

185
00:11:40.720 --> 00:11:43.670
intend to happen cuz we don't have
a route registered for that path and

186
00:11:43.670 --> 00:11:45.280
verb combination.

187
00:11:45.280 --> 00:11:49.840
So what we'll do, is we will actually hit
one that works, let's do a POST request.

188
00:11:49.840 --> 00:11:55.603
I'm gonna start the server again,
I'm gonna use my http pi and

189
00:11:55.603 --> 00:12:03.020
I'm gonna do a POST request to /todo,
and I'm going to post the text property.

190
00:12:03.020 --> 00:12:08.062
So this text says I need to eat more
food today, I don't eat enough,

191
00:12:08.062 --> 00:12:13.650
I should eat more than I actually I'm,
I got to be too busy, I don't know.

192
00:12:13.650 --> 00:12:19.366
So, we'll do that, and you can see, I get
a 200 and it sends back this json objects,

193
00:12:19.366 --> 00:12:23.250
says here's the ID which I put
date.now and then our text.

194
00:12:23.250 --> 00:12:30.697
So I'm gonna add some
more Clean up my closet.

195
00:12:30.697 --> 00:12:33.401
I just drop my clothes at the bottom
of the closet sometime so

196
00:12:33.401 --> 00:12:34.980
I need to clean it up, there we go.

197
00:12:34.980 --> 00:12:37.397
So we got two todos now,
the server is still running,

198
00:12:37.397 --> 00:12:40.690
if you look at these nice little
pretty logs we have, this is morgan.

199
00:12:40.690 --> 00:12:43.477
This is that middleware
that's logging this for us.

200
00:12:43.477 --> 00:12:48.499
You can see we got one request
coming in it was a POST /todo status

201
00:12:48.499 --> 00:12:53.260
code 200 and
it took 3.60 milliseconds to function.

202
00:12:53.260 --> 00:12:57.336
I have no idea what this number is with
morgan but I'm guessing some time or

203
00:12:57.336 --> 00:13:00.220
something, and
then the other one took even less.

204
00:13:00.220 --> 00:13:02.430
So super fast, as you can see,

205
00:13:02.430 --> 00:13:06.510
this is just a local machine
doing really good here.

206
00:13:06.510 --> 00:13:12.784
Now let's actually see if we can pull
those todos down with the get request.

207
00:13:12.784 --> 00:13:15.018
Before we do it,
the server hasn't stopped,

208
00:13:15.018 --> 00:13:16.807
it's been running this whole time.

209
00:13:16.807 --> 00:13:21.163
And I was putting those todos to an array,
so that means I'm anticipating that

210
00:13:21.163 --> 00:13:25.453
because this server is still running,
and because I pushed them to an array,

211
00:13:25.453 --> 00:13:29.098
that those objects should still
be floating in memory right now.

212
00:13:29.098 --> 00:13:32.280
It should still be sitting around
waiting for me to pull them down.

213
00:13:32.280 --> 00:13:34.595
And that would only happen if
the server was still running,

214
00:13:34.595 --> 00:13:36.790
it didn't stop like our
other node programs did.

215
00:13:36.790 --> 00:13:41.048
So let's prove that theory, and

216
00:13:41.048 --> 00:13:45.465
let's do a get request to /todo.

217
00:13:45.465 --> 00:13:48.123
And you can see here we get an array
of both of the todos that we have.

218
00:13:48.123 --> 00:13:52.572
Because we're still running the server,
they're still in memory and

219
00:13:52.572 --> 00:13:57.852
everything still works, and you can see
we do get a get to /todo 200, good to go.

220
00:13:57.852 --> 00:14:01.580
I think this number is like how much data
was sent back, that makes more sense.

221
00:14:01.580 --> 00:14:03.546
So maybe that's what that is.

222
00:14:03.546 --> 00:14:08.694
I am going to stop the server and start
it again, and then I'm going to do that,

223
00:14:08.694 --> 00:14:13.140
you'll see that nothing comes back
because I stopped the server and

224
00:14:13.140 --> 00:14:15.014
there was no data in memory.

225
00:14:15.014 --> 00:14:18.570
Yeah, so as you can see, let's just
kind of compare apples to apples here.

226
00:14:18.570 --> 00:14:23.492
So I'm gonna try to, I forgot the shortcut
to open this up in a new thing,

227
00:14:23.492 --> 00:14:29.530
it's like Command + K, I don't know
the shortcut anymore, how do we do this?

228
00:14:29.530 --> 00:14:31.444
There we go, split right, here we go.

229
00:14:31.444 --> 00:14:36.286
So let's close this,
I think this is like Command + B, okay, so

230
00:14:36.286 --> 00:14:39.720
we got the server here,
which is an express and

231
00:14:39.720 --> 00:14:44.600
then we got the http server,
which is just regular old http.

232
00:14:44.600 --> 00:14:50.540
So, if you look at the amount of code,
it's about the same to be honest.

233
00:14:50.540 --> 00:14:53.174
But in my opinion,
this is just a lot easier to understand,

234
00:14:53.174 --> 00:14:55.666
a lot more expressive, and
it's actually doing more.

235
00:14:55.666 --> 00:14:59.902
So although there's about the same amount
of code, this is way more efficient,

236
00:14:59.902 --> 00:15:01.163
it's doing a lot more.

237
00:15:01.163 --> 00:15:04.974
We need to be registering the routes
up here, we just had like a handler for

238
00:15:04.974 --> 00:15:06.410
a POST and that was it.

239
00:15:06.410 --> 00:15:08.868
This thing has a database,
a couple of routes,

240
00:15:08.868 --> 00:15:11.520
it's doing a lot more with
the same amount of code.

241
00:15:11.520 --> 00:15:15.580
So as you can see, it can get pretty
crazy, if you take advantage of something

242
00:15:15.580 --> 00:15:18.760
like express versus trying
to build this out yourself.

243
00:15:18.760 --> 00:15:22.686
It would be a lot more code to
get the same functionality.

244
00:15:22.686 --> 00:15:25.101
Any questions on express and the plugin,

245
00:15:25.101 --> 00:15:28.400
the middleware that I added
here to get this work?

246
00:15:28.400 --> 00:15:33.157
The question was, can we customize the
response codes in the express controllers,

247
00:15:33.157 --> 00:15:35.307
and the answer is, of course you can.

248
00:15:35.307 --> 00:15:38.451
So the POST we can say res.set header,

249
00:15:38.451 --> 00:15:44.560
which is pretty much the same thing,
but I think the one we want is status.

250
00:15:44.560 --> 00:15:49.384
So if you say rest.status,
I can say 201, save that,

251
00:15:49.384 --> 00:15:54.209
stop this, start that, and
let's do another POST here,

252
00:15:54.209 --> 00:15:57.370
and you can see I got a 201, right?

253
00:15:57.370 --> 00:15:59.105
So yeah,
you get the res.status to change it.

254
00:15:59.105 --> 00:16:02.591
I think you can also do like,
you can change this,

255
00:16:02.591 --> 00:16:07.690
you can see like res.status.json,
and then just do that.

256
00:16:07.690 --> 00:16:11.120
I think that works too,
we're about to find out.

257
00:16:11.120 --> 00:16:12.620
Yeah, that works too.

