WEBVTT

1
00:00:00.060 --> 00:00:05.006
Now I'm gonna talk about how to consume
those packages that you installed

2
00:00:05.006 --> 00:00:07.820
inside of your own modules.

3
00:00:07.820 --> 00:00:08.640
So let's do that.

4
00:00:08.640 --> 00:00:10.760
So I'm gonna head over
to my Package folder.

5
00:00:10.760 --> 00:00:11.700
I'm gonna make a new file.

6
00:00:12.720 --> 00:00:16.166
Not a new folder, a new file.

7
00:00:16.166 --> 00:00:18.848
I'll call it index.mjs, and

8
00:00:18.848 --> 00:00:24.790
I want to consume that lodash
package that I just installed.

9
00:00:24.790 --> 00:00:29.132
So what you would probably wanna do is
go look at the documentation on how to

10
00:00:29.132 --> 00:00:29.700
do that.

11
00:00:29.700 --> 00:00:33.590
So, in the sake of following my
own advice, I'm gonna do that.

12
00:00:33.590 --> 00:00:37.038
I'm gonna look at the documentation and
see if maybe they're up to date with es

13
00:00:37.038 --> 00:00:39.470
modules, and
they have a really great thing.

14
00:00:39.470 --> 00:00:40.924
Wow, that's so many files.

15
00:00:40.924 --> 00:00:41.550
My goodness!

16
00:00:43.530 --> 00:00:44.896
Here we go.
So the documentation is

17
00:00:44.896 --> 00:00:47.890
basically using common js,
it's using the require statement.

18
00:00:47.890 --> 00:00:51.810
So I'm going see if I can get lucky and
try out these es module imports instead.

19
00:00:51.810 --> 00:00:55.635
So I'm gonna say lodash is
usually used as an underscore,

20
00:00:55.635 --> 00:01:00.800
and that's a play on another library
called _js which lodash replaced.

21
00:01:00.800 --> 00:01:05.040
So usually people use
the _variable name for lodash.

22
00:01:05.040 --> 00:01:06.790
So I'm gonna do the same thing.

23
00:01:06.790 --> 00:01:09.730
Import from lodash.

24
00:01:09.730 --> 00:01:13.420
So let's try that and
let's see if this import actually works.

25
00:01:13.420 --> 00:01:14.590
Let's see what happens.

26
00:01:14.590 --> 00:01:17.748
So now I'm going to run that code.

27
00:01:17.748 --> 00:01:21.140
And it looks like it works just fine.

28
00:01:21.140 --> 00:01:22.850
So the interrupt here was just fine.

29
00:01:22.850 --> 00:01:25.105
The creators of lodash
must anticipated this and

30
00:01:25.105 --> 00:01:27.850
made sure I was able to
import it with no problems.

31
00:01:27.850 --> 00:01:30.830
So, a couple things to notice here.

32
00:01:30.830 --> 00:01:35.416
When we, let's go back to what we were
working on earlier, before when we were

33
00:01:35.416 --> 00:01:40.560
importing modules that we created,
notice that I put this ./ here, right?

34
00:01:40.560 --> 00:01:41.630
This is very important.

35
00:01:41.630 --> 00:01:43.200
This is not optional.

36
00:01:43.200 --> 00:01:47.920
When you put a ./ or if you got to go up
a couple levels or, whatever that is.

37
00:01:47.920 --> 00:01:51.844
Long as there's a dot there, this is
telling NPM, this is telling know that,

38
00:01:51.844 --> 00:01:54.830
hey, I want you to resolve
a module that I created locally.

39
00:01:54.830 --> 00:01:56.660
This is a local module that I created.

40
00:01:56.660 --> 00:01:58.040
It's on the file system.

41
00:01:58.040 --> 00:01:58.940
It's in this project.

42
00:01:58.940 --> 00:02:00.560
It's in this directory somewhere.

43
00:02:00.560 --> 00:02:02.310
Go get it, it's a file.

44
00:02:02.310 --> 00:02:06.297
But when you don't put the dot in
front of it or slash like that,

45
00:02:06.297 --> 00:02:11.339
it's telling NPM and know that hey,
this is either an internal module like Fs,

46
00:02:11.339 --> 00:02:16.820
or it's something that I installed via
NPM and it's in a node modules folder.

47
00:02:16.820 --> 00:02:18.262
So what node is gonna do and

48
00:02:18.262 --> 00:02:22.394
NPM is gonna do it's gonna first check
to see if this is internal It's not,

49
00:02:22.394 --> 00:02:26.397
then it's going to recursively start
walking up your directory tree and

50
00:02:26.397 --> 00:02:30.920
checking every node modules folder
until it finds the matching thing.

51
00:02:30.920 --> 00:02:33.520
If it can't find it in the current working
directory, then it will error out.

52
00:02:33.520 --> 00:02:36.812
I mean, it'll literally go all the way up
to like the global folder of your computer

53
00:02:36.812 --> 00:02:37.910
looking for it.

54
00:02:37.910 --> 00:02:40.497
So if it doesn't find it,
then you're like,

55
00:02:40.497 --> 00:02:44.414
I can't find this module like friends
if I change this to something else, and

56
00:02:44.414 --> 00:02:47.726
I tried to run this code,
it's gonna say MODULE_ NOT_ FOUND and

57
00:02:47.726 --> 00:02:50.970
can literally cannot find
that module right there.

58
00:02:50.970 --> 00:02:53.020
So it's gonna keep looking.

59
00:02:53.020 --> 00:02:56.754
So if you have multiple node modules
folders above this folder and something

60
00:02:56.754 --> 00:03:00.740
exists in there, it'll find it and use it
and that may or may not be what you want.

61
00:03:00.740 --> 00:03:03.615
So just be cautious of that,
that is gonna keep looking for

62
00:03:03.615 --> 00:03:05.971
the closest one until we
resolve this package.

63
00:03:05.971 --> 00:03:09.130
You can change that behavior if you want,
but it's not worth it.

64
00:03:11.160 --> 00:03:14.090
Cool, so,
that's how we use those packages.

65
00:03:14.090 --> 00:03:19.068
And then as far as like if we
wanted to uninstall this package,

66
00:03:19.068 --> 00:03:23.665
we could say NPM uninstall
followed by the name lodash and

67
00:03:23.665 --> 00:03:26.280
as you can see it'll remove it.

68
00:03:27.590 --> 00:03:30.170
If I checked the package lock,
it's no longer there.

69
00:03:30.170 --> 00:03:32.760
By tech I checked the package
JSON is no longer there.

70
00:03:32.760 --> 00:03:33.283
It's gone.

71
00:03:33.283 --> 00:03:37.132
So uninstall completely removes it
from the node modules folder as well,

72
00:03:37.132 --> 00:03:40.870
which as you can see was deleted
because I don't have any more modules.

73
00:03:40.870 --> 00:03:43.270
So NPM was smart enough
to just delete it for me.

74
00:03:43.270 --> 00:03:45.820
It seems like nothing was ever
there in the first place.

75
00:03:45.820 --> 00:03:47.733
So that's how you uninstall.

76
00:03:47.733 --> 00:03:50.750
Now we did have a question about NPX.

77
00:03:50.750 --> 00:03:51.860
So I wanna talk about NPX.

78
00:03:51.860 --> 00:03:57.460
But before we talk about NPX, I wanna
talk about global installs of packages.

79
00:03:57.460 --> 00:04:01.649
So far we've been installing packages
locally to a project as it's going to

80
00:04:01.649 --> 00:04:05.000
exists inside of this app that
I'm making and nowhere else.

81
00:04:05.000 --> 00:04:06.960
If you're not in this app,
you can't use it.

82
00:04:06.960 --> 00:04:11.304
But sometimes you want some packages
to exist globally on your machine and

83
00:04:11.304 --> 00:04:13.557
that's useful for things like a CLI.

84
00:04:13.557 --> 00:04:16.274
For instance NPM is a CLI.

85
00:04:16.274 --> 00:04:19.615
And did you know that you
can install NPM with NPM?

86
00:04:19.615 --> 00:04:21.335
Yeah, I know it sounds crazy but

87
00:04:21.335 --> 00:04:25.362
you can because NPM is a package itself
that can also be installed with NPM.

88
00:04:25.362 --> 00:04:28.440
So can yarn you can install
yarn with NPM if you wanted to.

89
00:04:28.440 --> 00:04:31.792
And both of those should be global because
we want to be able to use them from our

90
00:04:31.792 --> 00:04:32.730
terminal like this.

91
00:04:32.730 --> 00:04:35.550
If they were not global,
we couldn't use them.

92
00:04:35.550 --> 00:04:40.336
So if you want to install something
global, you would do NPM install,

93
00:04:40.336 --> 00:04:42.860
followed by the name.

94
00:04:42.860 --> 00:04:47.295
We try yarn this this time and
then you would say -g for global.

95
00:04:47.295 --> 00:04:49.790
And then you will try to install it.

96
00:04:49.790 --> 00:04:52.940
So you can see right now I
just installed yarn globally.

97
00:04:52.940 --> 00:04:56.911
So if I say which yarn,
you can see I have yarn now, and

98
00:04:56.911 --> 00:05:00.390
I use NPM to install that globally.

99
00:05:00.390 --> 00:05:03.567
Now, sometimes there are some global CLIs,

100
00:05:03.567 --> 00:05:07.790
some global tools that you
don't want to install.

101
00:05:07.790 --> 00:05:10.910
But you need some functionality out
of them for there is a one off thing.

102
00:05:10.910 --> 00:05:12.540
Maybe it's a scaffolding tool.

103
00:05:12.540 --> 00:05:15.568
Maybe it's a deployment tool, but
it's just something you don't really

104
00:05:15.568 --> 00:05:18.550
wanna keep around, but
you do need to run it right quick.

105
00:05:18.550 --> 00:05:20.180
That's where NPX comes from.

106
00:05:20.180 --> 00:05:23.470
So NPX was also installed
when you installed node.

107
00:05:23.470 --> 00:05:24.270
It's already here.

108
00:05:24.270 --> 00:05:29.090
If I type in which NPX, I should see that,
hey, I have this thing called NPX.

109
00:05:29.090 --> 00:05:32.602
NPX is basically like running
one off global install.

110
00:05:32.602 --> 00:05:36.988
So instead of installing yarn
I could have just said npx and

111
00:05:36.988 --> 00:05:41.205
then yarn, and
then whatever command that yarn can do.

112
00:05:41.205 --> 00:05:45.871
So in this case yarn has like a yarn add,
then I'm gonna say yarn add lodash, so

113
00:05:45.871 --> 00:05:51.150
I'm telling npx to tell yarn to install
lodash for me, so it's very meta.

114
00:05:51.150 --> 00:05:54.080
And this you can see it
executed pretty quick.

115
00:05:54.080 --> 00:05:56.424
So it basically just runs that tool for

116
00:05:56.424 --> 00:05:59.440
us whatever this tool is
in this case it's yarn.

117
00:05:59.440 --> 00:06:03.768
And whatever functionality that that
command has it runs that without actually

118
00:06:03.768 --> 00:06:04.810
installing yarn.

119
00:06:04.810 --> 00:06:06.780
Even though I haven't
installed it on my machine.

120
00:06:06.780 --> 00:06:08.740
If I didn't,
npx will still work the same way.

121
00:06:08.740 --> 00:06:12.550
So it's great for one off global
tasks that you don't wanna install.

122
00:06:12.550 --> 00:06:17.612
So, CI environments or CLI, as you just
know you're not gonna use other than for

123
00:06:17.612 --> 00:06:20.528
like this one thing,
it's perfect for that.

124
00:06:22.921 --> 00:06:24.559
And then to uninstaller globally,

125
00:06:24.559 --> 00:06:26.969
you will just literally do
the same thing as before.

126
00:06:28.370 --> 00:06:36.200
The uninstall but you would just say
that dash g and it will uninstall it.

127
00:06:36.200 --> 00:06:38.110
And it's that simple, it's gone.

128
00:06:38.110 --> 00:06:42.010
So npm is came up a long way it
didn't used to be this good, but

129
00:06:42.010 --> 00:06:43.640
now it's pretty good.

130
00:06:43.640 --> 00:06:45.082
I've used yarn pretty much.

131
00:06:45.082 --> 00:06:46.760
The whole time it's been out and

132
00:06:46.760 --> 00:06:49.940
I just recently switched back
to npm because it's amazing.

133
00:06:49.940 --> 00:06:51.610
But it doesn't really
matter which one you use.

134
00:06:51.610 --> 00:06:54.340
They're both really good.

135
00:06:54.340 --> 00:06:58.290
And questions on any of that so far?

136
00:06:58.290 --> 00:07:03.008
&gt;&gt; Does it make any difference if you
use dependencies versus using dev

137
00:07:03.008 --> 00:07:05.880
dependencies in package.json.

138
00:07:05.880 --> 00:07:06.620
&gt;&gt; Good question.

139
00:07:06.620 --> 00:07:10.160
Yes, I was going to talk
about dev dependencies.

140
00:07:10.160 --> 00:07:12.210
Yes, where's our talk
about dev dependencies.

141
00:07:12.210 --> 00:07:15.274
Yes, I was gonna talk about dev
dependencies in the testing section, but

142
00:07:15.274 --> 00:07:16.740
I'll hint at it just now.

143
00:07:16.740 --> 00:07:21.421
There is the only difference when
it comes to dependencies and

144
00:07:21.421 --> 00:07:25.890
dev dependencies is how and
when they're installed.

145
00:07:25.890 --> 00:07:28.820
But as far as functionality,
there's no difference.

146
00:07:28.820 --> 00:07:32.940
You can use a dev dependency the same
way you can use a regular dependency.

147
00:07:32.940 --> 00:07:36.200
It just comes down to how and
when they're installed.

148
00:07:36.200 --> 00:07:37.050
Yeah, good question.

149
00:07:37.050 --> 00:07:41.760
The question was, is there a problem if
we use npm and yarn in the same project?

150
00:07:41.760 --> 00:07:42.503
I would say yeah,

151
00:07:42.503 --> 00:07:45.590
that would be a problem because now
everyone else has to do the same thing.

152
00:07:46.630 --> 00:07:50.176
So, because okay,
now there's a yarn lock file that says,

153
00:07:50.176 --> 00:07:53.040
here's the package of
the version that we need.

154
00:07:53.040 --> 00:07:55.616
And now there's a package
lock file that says, well,

155
00:07:55.616 --> 00:07:58.090
here's a package of
the version that we need.

156
00:07:58.090 --> 00:07:59.880
So which one is the source of truth?

157
00:07:59.880 --> 00:08:00.400
I don't know.

158
00:08:00.400 --> 00:08:02.870
I guess it depends on which
one you installed with.

159
00:08:02.870 --> 00:08:05.205
Yes, they both will write to
the package.json file and

160
00:08:05.205 --> 00:08:07.000
least your dependencies will be in there.

161
00:08:07.000 --> 00:08:10.260
But if any of those dependencies
required a conflict.

162
00:08:10.260 --> 00:08:13.655
Like for instance, if you had a mono
repo that had like reacted and

163
00:08:13.655 --> 00:08:17.113
then there was another react app
living next to it that was meant for

164
00:08:17.113 --> 00:08:20.696
like storybook or I don't know,
whatever your configuration was,

165
00:08:20.696 --> 00:08:24.200
then how do you know what
version of react to resolve to?

166
00:08:24.200 --> 00:08:28.130
And how do you know which tool did
the resolution was a yarn or was an npm?

167
00:08:28.130 --> 00:08:29.510
Well, you don't.

168
00:08:29.510 --> 00:08:32.960
So, you'll just end up with probably the
wrong version compared to everyone else.

169
00:08:32.960 --> 00:08:36.900
So if you are working on an existing
project that's already using something,

170
00:08:36.900 --> 00:08:40.303
use that, I highly recommend using
that and if you made a mistake and

171
00:08:40.303 --> 00:08:44.650
use something else, delete it, did not
check it into git, and just get rid of it.

172
00:08:44.650 --> 00:08:48.511
One thing that I've done in the past
is I've always added like a script to

173
00:08:48.511 --> 00:08:50.160
the package.json.

174
00:08:50.160 --> 00:08:53.480
So if you go to package.json,
you can add whatever you want here.

175
00:08:53.480 --> 00:08:58.095
And sometimes it might make some sense
to like make a script here, that like,

176
00:08:58.095 --> 00:08:59.660
does something, right.

177
00:08:59.660 --> 00:09:00.570
So this is npm.

178
00:09:00.570 --> 00:09:05.190
So now if you just, if you run like that
now it doesn't really matter what you do.

179
00:09:05.190 --> 00:09:08.280
It can be very confusing,
if you try to put two in there.

180
00:09:08.280 --> 00:09:11.840
I highly recommend just use
whatever is in the project.

181
00:09:11.840 --> 00:09:16.240
And don't try to do anything else because
everyone else has to also change as well.

182
00:09:16.240 --> 00:09:17.930
So yeah, just delete it.

