WEBVTT

1
00:00:00.200 --> 00:00:03.984
Well, that's pretty much all I wanted to
cover today as far as the curriculum and

2
00:00:03.984 --> 00:00:05.107
walk you through Node.

3
00:00:05.107 --> 00:00:09.413
The stuff I wanna leave you with
is what I recommend doing next and

4
00:00:09.413 --> 00:00:14.385
how to take advantage of the community and
really how to get the best of it.

5
00:00:14.385 --> 00:00:21.579
So, we did talk about
Frontend Master's Node API design.

6
00:00:21.579 --> 00:00:23.926
I guess I should just look up my name,
that's what I should do.

7
00:00:27.000 --> 00:00:28.650
Frontend Masters, Scott, there we go.

8
00:00:28.650 --> 00:00:34.443
So I do have a course on here for
the API design a Node JS v3.

9
00:00:34.443 --> 00:00:36.488
If you want to really get into it,

10
00:00:36.488 --> 00:00:41.094
you can see I'm talking about a whole
bunch of APIs, databases, routes,

11
00:00:41.094 --> 00:00:45.941
caching, crud, automations,
authentication, pretty much everything.

12
00:00:45.941 --> 00:00:49.569
So this is a really good next step if
you want to just focus on building APIs.

13
00:00:49.569 --> 00:00:53.678
There's also a really nice course on here.

14
00:00:53.678 --> 00:00:57.089
I forgot what it's called exactly,
but I think it's by Jim Young.

15
00:00:57.089 --> 00:01:02.419
It's about like, DevOps or
back end for front end engineers.

16
00:01:02.419 --> 00:01:03.866
That one's really good,
I actually took that one.

17
00:01:03.866 --> 00:01:05.570
It was really nice.

18
00:01:05.570 --> 00:01:07.336
And then I also have
an introduction to MongoDB,

19
00:01:07.336 --> 00:01:09.973
if that's what you're interested in
if you wanna learn how to do Mongo.

20
00:01:09.973 --> 00:01:11.577
So check that one out as well.

21
00:01:11.577 --> 00:01:13.514
So I recommend doing one of those.

22
00:01:13.514 --> 00:01:17.190
There we go learn, learning paths, and

23
00:01:17.190 --> 00:01:21.199
then you go down to Node,
bam, here you go.

24
00:01:21.199 --> 00:01:23.652
Look at that, look at that guy,
who's that guy?

25
00:01:23.652 --> 00:01:26.062
Yeah, Will Siddons has a really good one.

26
00:01:26.062 --> 00:01:29.843
Look at this, this is a really great path
that's already, that's the one I was

27
00:01:29.843 --> 00:01:33.359
looking for a full stack for for
engineers, v2, the capstone project.

28
00:01:33.359 --> 00:01:38.089
So, I highly recommend going through this
if you're really interested in NodeJS.

29
00:01:38.089 --> 00:01:40.649
I've taken a lot of these courses myself.

30
00:01:40.649 --> 00:01:43.139
The instructors here are super talented.

31
00:01:43.139 --> 00:01:47.396
So, check those out if you want to know
more, and you wanna do a deep dive.

32
00:01:47.396 --> 00:01:48.648
But at this point,

33
00:01:48.648 --> 00:01:53.749
you pretty much know more than the basics
of what it takes to build something.

34
00:01:53.749 --> 00:01:58.097
Something that I like to do is I
like to take a small chunk of time,

35
00:01:58.097 --> 00:02:01.175
whether it's 60 minutes or 90 minutes.

36
00:02:01.175 --> 00:02:05.694
Especially in Node and like pick a
technology that I'm just not familiar with

37
00:02:05.694 --> 00:02:10.717
in Node, whether it's like streams,
WebSockets, HTTPS, a different database.

38
00:02:10.717 --> 00:02:14.400
And I'm like, all right, 60 minutes, build
the smallest thing you can make with this.

39
00:02:14.400 --> 00:02:18.214
Whether it's following a HelloWorld
tutorial on the documentation website, or

40
00:02:18.214 --> 00:02:19.107
watching a video.

41
00:02:19.107 --> 00:02:22.927
I try to build the smallest thing that I
can and I try to do that multiple times.

42
00:02:22.927 --> 00:02:26.196
And usually within a week, I really
understand that technology to the point

43
00:02:26.196 --> 00:02:29.530
where I'm comfortable talking about it,
and it's no longer foreign to me.

44
00:02:29.530 --> 00:02:32.107
And I might not be great at it,
but I'm no longer foreign.

45
00:02:32.107 --> 00:02:34.134
And that's kinda how I
develop my knowledge, and

46
00:02:34.134 --> 00:02:35.832
that's kinda how I move through things.

47
00:02:35.832 --> 00:02:38.910
And then when I come across it in
the real world, and I use it at work,

48
00:02:38.910 --> 00:02:41.080
that's when I develop a deep knowledge for
it.

49
00:02:41.080 --> 00:02:44.421
So that's just some of the tips
that I wanted to pass on to you and

50
00:02:44.421 --> 00:02:48.219
I don't know if that'll work or not,
but that's just how I do things.

51
00:02:48.219 --> 00:02:52.594
Other than that, I can leave you with
some really cool JavaScript projects or

52
00:02:52.594 --> 00:02:55.229
NodeJS projects that I
think are really cool.

53
00:02:55.229 --> 00:03:01.119
So we have like NestJS,
which is a progressive NodeJS framework.

54
00:03:01.119 --> 00:03:06.760
They have a cat, I mean, if that doesn't
sell for you, I don't know what will.

55
00:03:06.760 --> 00:03:07.620
There're more cats.

56
00:03:07.620 --> 00:03:09.830
So, try out NestJS.

57
00:03:09.830 --> 00:03:12.686
If you ever use Angular two
you'll feel at home with NestJS,

58
00:03:12.686 --> 00:03:14.204
it's a really good framework.

59
00:03:14.204 --> 00:03:19.529
And then you have something called,
we talked about Hapi, so Hapi with an i.

60
00:03:19.529 --> 00:03:24.233
This is another framework that
serves the same purposes Express but

61
00:03:24.233 --> 00:03:26.059
just built differently.

62
00:03:26.059 --> 00:03:28.581
So Hapi is a very good one.

63
00:03:28.581 --> 00:03:34.254
And I would say another good one would be
looking at just serverless functions and

64
00:03:34.254 --> 00:03:36.764
those are pretty much everywhere.

65
00:03:36.764 --> 00:03:41.223
You have those in Netify,
Vercel, AWS, Google Cloud.

66
00:03:41.223 --> 00:03:44.267
I mean, everyone has some type of
flavor of serverless functions.

67
00:03:44.267 --> 00:03:46.587
I highly recommend checking those out.

68
00:03:46.587 --> 00:03:49.568
I wouldn't say that they're great for
doing APIs, but

69
00:03:49.568 --> 00:03:53.829
they're really great for doing one off
things that someone isn't waiting on.

70
00:03:53.829 --> 00:03:56.449
So I would recommend it for that.

71
00:03:56.449 --> 00:04:01.664
Other than that,
one thing that helped me out a lot was

72
00:04:01.664 --> 00:04:06.774
I would go into the source code
of projects like Webpack or

73
00:04:06.774 --> 00:04:11.577
Parcel or RollUp just to see
how these things worked.

74
00:04:11.577 --> 00:04:14.566
Cuz they always seemed so magical to me,
I wanted to understand how they worked.

75
00:04:14.566 --> 00:04:17.822
They're just written in JavaScript and
they do so much with the file system.

76
00:04:17.822 --> 00:04:21.614
I would recommend just going through the
code and observing some of the patterns

77
00:04:21.614 --> 00:04:24.514
and see if you can make sense
of what's actually happening.

78
00:04:24.514 --> 00:04:27.898
And even if it's confusing,
you're gonna see something that I think,

79
00:04:27.898 --> 00:04:29.894
might enlighten you
onto how this works and

80
00:04:29.894 --> 00:04:33.852
might give you some inspiration on how you
can make some plugins or things like that.

81
00:04:33.852 --> 00:04:36.484
And that's usually how I like to
start when I want to contribute.

82
00:04:36.484 --> 00:04:40.465
And speaking of contributing, if you find
a package that you want to contribute to

83
00:04:40.465 --> 00:04:42.670
whether it's React or something like that.

84
00:04:42.670 --> 00:04:48.078
Did you know that if you go to GitHub, for
instance if I go to React, which obviously

85
00:04:48.078 --> 00:04:52.892
is not going to give me what I want
it because it's like Facebook, React.

86
00:04:52.892 --> 00:04:58.365
And you click on issues and
if you click on label and

87
00:04:58.365 --> 00:05:01.631
you type in good first issue,

88
00:05:02.756 --> 00:05:06.289
A lot of them really put
really good issues on here.

89
00:05:06.289 --> 00:05:09.196
And sometimes they'll even put like
the answer that you can copy and

90
00:05:09.196 --> 00:05:11.899
paste, I won't say answer,
the solution that you can copy and

91
00:05:11.899 --> 00:05:15.326
paste cuz they really want to invite more
people to come in here and contribute.

92
00:05:15.326 --> 00:05:18.741
So if you wanna get that nice
badge on your GitHub profile,

93
00:05:18.741 --> 00:05:23.423
go to some of these big projects, see if
you can find one with a good first issue.

94
00:05:23.423 --> 00:05:26.283
It might be something simple
as fixing a typo on a Readme,

95
00:05:26.283 --> 00:05:28.080
and it says you're a contributor.

96
00:05:28.080 --> 00:05:30.700
So it's a really good way to
get started in the community.

97
00:05:30.700 --> 00:05:33.445
It's something that I did a couple
of years ago, and I don't regret it.

98
00:05:33.445 --> 00:05:36.892
So, I highly recommend doing that
to contribute to the community, and

99
00:05:36.892 --> 00:05:39.084
give back, and
start making your own stuff.

100
00:05:39.084 --> 00:05:40.066
So, other than that,

101
00:05:40.066 --> 00:05:43.392
does anyone have any other questions
about anything that we covered today?

102
00:05:45.490 --> 00:05:50.546
&gt;&gt; A question about
upgrading NPM packages,

103
00:05:50.546 --> 00:05:54.343
what's the best path forward?

104
00:05:54.343 --> 00:05:58.111
&gt;&gt; [LAUGH] Every time I upgrade packages,
I'm always scared what's about to happen.

105
00:05:58.111 --> 00:06:04.808
So I would say, don't just upgrade
a package because there's a new version.

106
00:06:04.808 --> 00:06:08.899
Only upgrade the package if there's
something in the package that you need.

107
00:06:08.899 --> 00:06:11.339
So, if you identify the fact that like,

108
00:06:11.339 --> 00:06:15.518
this new version of this package that we
use came out and we need this feature,

109
00:06:15.518 --> 00:06:19.338
because you gotta think about it
depends on what type of upgrade it is.

110
00:06:19.338 --> 00:06:22.948
If it's a major upgrade, a major version
went from version 7 to version 8,

111
00:06:22.948 --> 00:06:24.849
that means there's a breaking change.

112
00:06:24.849 --> 00:06:27.958
So you need to identify what
that breaking change is and

113
00:06:27.958 --> 00:06:31.413
determine how bad is gonna be for
you to refactor in your app.

114
00:06:31.413 --> 00:06:33.503
Like for instance,
if React came out tomorrow and

115
00:06:33.503 --> 00:06:36.950
was like, we don't use we don't use
JSX anywhere, we use this other thing.

116
00:06:36.950 --> 00:06:40.803
Okay, imagine how many components you'd
have to refactor to use this other thing.

117
00:06:40.803 --> 00:06:42.669
So you probably wouldn't want to upgrade,
right?

118
00:06:42.669 --> 00:06:45.756
So you just don't want to upgrade
all the time simply because there's

119
00:06:45.756 --> 00:06:46.604
a better version.

120
00:06:46.604 --> 00:06:52.861
So, identify if you need it, and
then if you do wanna upgrade,

121
00:06:52.861 --> 00:07:01.380
you can actually just type in NPM updates
followed by the package, so using Express.

122
00:07:01.380 --> 00:07:03.922
So if you do like NPM update,
followed by the package,

123
00:07:03.922 --> 00:07:05.653
it'll update that package for you.

124
00:07:05.653 --> 00:07:08.892
And it'll save it and
do the config file and all that stuff.

125
00:07:08.892 --> 00:07:11.482
But again, that's only if you've
identified that you need to update.

126
00:07:11.482 --> 00:07:13.350
That's what the lock files are for,

127
00:07:13.350 --> 00:07:16.069
to make sure you're always
on the locked in version.

128
00:07:16.069 --> 00:07:18.282
And that way you guarantee
that there aren't any bugs.

129
00:07:18.282 --> 00:07:22.170
Because the last thing you want is an
update causing you a bug that you didn't

130
00:07:22.170 --> 00:07:25.288
find out until after your user
found it when you deployed it.

131
00:07:25.288 --> 00:07:27.469
So be cautious of that.

132
00:07:27.469 --> 00:07:30.679
&gt;&gt; I believe you covered this
earlier in the course so

133
00:07:30.679 --> 00:07:34.660
you don't need to repeat yourself,
but in case you didn't.

134
00:07:34.660 --> 00:07:41.552
What's the best way to import ES
module package into a common JS one?

135
00:07:41.552 --> 00:07:46.766
&gt;&gt; The best way to import an ES
module into a common JS one is,

136
00:07:46.766 --> 00:07:50.799
in that case it wouldn't be any different.

137
00:07:50.799 --> 00:07:52.867
You will still use require and

138
00:07:52.867 --> 00:07:56.764
you would have to determine
if was it a default exports.

139
00:07:56.764 --> 00:08:01.767
So, if they did,

140
00:08:01.767 --> 00:08:06.103
where am I doing

141
00:08:06.103 --> 00:08:11.774
[INAUDIBLE],
here,

142
00:08:11.774 --> 00:08:17.119
here, here we go.

143
00:08:17.119 --> 00:08:21.373
Inside of a non ES file, so
it'll look something like this right?

144
00:08:21.373 --> 00:08:23.252
It'll literally look the same.

145
00:08:23.252 --> 00:08:25.565
It'll be like this.

146
00:08:25.565 --> 00:08:28.131
Like that, except for it'll say = require.

147
00:08:28.131 --> 00:08:34.890
So this will work the same as the non ES
equivalent, cuz that's a named export.

148
00:08:34.890 --> 00:08:39.103
Now, if this wasn't names, and
this was a default one, as in, like,

149
00:08:39.103 --> 00:08:43.199
if we just did FS, which also works,
then this will also be the same.

150
00:08:43.199 --> 00:08:45.689
It would be FS.

151
00:08:45.689 --> 00:08:46.819
So it's pretty much the same.

152
00:08:46.819 --> 00:08:50.135
You just swap the import of a var,
a lit, or a const, and

153
00:08:50.135 --> 00:08:52.262
you swap the from with the require.

154
00:08:52.262 --> 00:08:56.589
Everything else should stay the same when
you're coming from ES modules to common.

155
00:08:56.589 --> 00:08:58.463
It's the other way around that
you have to watch out for.

156
00:08:58.463 --> 00:09:03.204
It's like, well, hold on now there's no

157
00:09:03.204 --> 00:09:07.360
concept of default exports or common JS.

158
00:09:07.360 --> 00:09:09.499
So if you tried to import a default,
it might not work.

159
00:09:09.499 --> 00:09:12.049
So you gotta figure that part out.

160
00:09:12.049 --> 00:09:14.196
But, yeah, that's how you do that.

161
00:09:14.196 --> 00:09:18.548
&gt;&gt; For this next question, I will say that
we do have a webassembly course by Gem, so

162
00:09:18.548 --> 00:09:20.020
you should check that out.

163
00:09:20.020 --> 00:09:25.289
But this person's asking if you
personally have experience with importing

164
00:09:25.289 --> 00:09:30.557
a webassembly module from a compiled
from a different language into Node and

165
00:09:30.557 --> 00:09:31.311
using it.

166
00:09:31.311 --> 00:09:33.670
And what's your thoughts on that?

167
00:09:33.670 --> 00:09:35.150
&gt;&gt; That's a really good question.

168
00:09:35.150 --> 00:09:39.953
Unfortunately, I have no experience
importing webassembly into Node and

169
00:09:39.953 --> 00:09:43.774
that's simply because I just
haven't had a reason to yet.

170
00:09:43.774 --> 00:09:46.360
Don't get me wrong,
it sounds interesting, and amazing.

171
00:09:46.360 --> 00:09:49.669
But I'm one of those people
where I'm very problem driven.

172
00:09:49.669 --> 00:09:54.689
And I just haven't ran into a problem yet
that webassembly is gonna help me solve.

173
00:09:54.689 --> 00:09:56.769
And it's mostly also because
I'm a product person.

174
00:09:56.769 --> 00:10:00.425
I like to just focus on building
products that people love and

175
00:10:00.425 --> 00:10:03.658
the technology behind it is
not that important to me.

176
00:10:03.658 --> 00:10:08.209
It's mostly just something that I can use
really fast to get things done really fast

177
00:10:08.209 --> 00:10:10.107
and really quick to test them out.

178
00:10:10.107 --> 00:10:12.141
So yeah, for
that reason I haven't tried webassembly.

179
00:10:12.141 --> 00:10:16.243
Although I am up to date on what it is and
how to use it and why it's here.

180
00:10:16.243 --> 00:10:19.354
But, I think Jim Young's course
will probably be better and

181
00:10:19.354 --> 00:10:22.831
I would imagine he would have a way
better answer to that question and

182
00:10:22.831 --> 00:10:25.591
give a better opinion than
what I currently just did.

183
00:10:25.591 --> 00:10:30.682
&gt;&gt; What's your opinion on TypeScript
in Node, have used TypeScript?

184
00:10:30.682 --> 00:10:35.149
&gt;&gt; Yeah.
&gt;&gt; You think there's a lot of value in it

185
00:10:35.149 --> 00:10:36.970
on the back end?

186
00:10:36.970 --> 00:10:39.080
&gt;&gt; I believe TypeScript is the future,
to be honest.

187
00:10:39.080 --> 00:10:41.499
I mean,
Dino is literally TypeScript native.

188
00:10:41.499 --> 00:10:44.879
So I literally write
everything in TypeScript.

189
00:10:44.879 --> 00:10:47.120
It actually feels weird right now
writing something in JavaScript.

190
00:10:47.120 --> 00:10:50.742
I haven't written non typed
files in a long time.

191
00:10:50.742 --> 00:10:55.096
So, I love TypeScript,
using it on Node is amazing.

192
00:10:55.096 --> 00:10:56.029
It's not native.

193
00:10:56.029 --> 00:10:59.795
So you would have to compile that
with like the TSC command line,

194
00:10:59.795 --> 00:11:04.052
which is the TypeScript compiler
command line instead of a config file,

195
00:11:04.052 --> 00:11:05.613
TS config file to do that.

196
00:11:05.613 --> 00:11:07.639
But other than that,
yeah, it's really cool.

197
00:11:07.639 --> 00:11:10.863
You can actually use Babel now,
Babel supports TypeScript, Babel 7.

198
00:11:10.863 --> 00:11:15.252
So you could do that as well, either
of which you would need to compile it.

199
00:11:15.252 --> 00:11:18.536
But, there is just as much value
on the back end with TypeScript as

200
00:11:18.536 --> 00:11:19.860
there is on the front end.

201
00:11:19.860 --> 00:11:21.107
And maybe even more,

202
00:11:21.107 --> 00:11:26.041
because there's no visual representation
of what you're getting on the back end.

203
00:11:26.041 --> 00:11:30.799
So at least on the front end,
you can go like, I'm using a React box.

204
00:11:30.799 --> 00:11:31.590
What does it look like?

205
00:11:31.590 --> 00:11:33.212
You can just use it and
see what it looks like.

206
00:11:33.212 --> 00:11:36.004
It's a box but you can't really see
what it looks like on the server.

207
00:11:36.004 --> 00:11:39.587
So having that TypeScript kind
of be your eyes about what

208
00:11:39.587 --> 00:11:43.489
is the IO between this method and
yours, it's really nice.

209
00:11:43.489 --> 00:11:47.738
So, I highly recommend using TypeScript
whenever you can, in my opinion.

210
00:11:47.738 --> 00:11:50.353
Because you could use TypeScript and
not use any types and

211
00:11:50.353 --> 00:11:52.489
it's still just like
the latest JavaScript.

212
00:11:52.489 --> 00:11:54.948
And also on that point I just remembered,
so

213
00:11:54.948 --> 00:11:58.474
I've talked about using like MJS files and
JavaScript files.

214
00:11:58.474 --> 00:12:02.524
But that's only if you want to use
ECMO script modules natively in Node.

215
00:12:02.524 --> 00:12:04.892
If you do something like Babel or
TypeScript,

216
00:12:04.892 --> 00:12:08.795
then you can use the ECMO script files
without the MJS and all that nonsense.

217
00:12:08.795 --> 00:12:13.186
Because those tools actually fix that for
you, right, they handle the modules and

218
00:12:13.186 --> 00:12:14.890
stuff for you in the interrupt.

219
00:12:14.890 --> 00:12:18.298
So this is just if you don't
want to build a compiler, but

220
00:12:18.298 --> 00:12:21.990
if you use a transpiler,
like Babel or TypeScript, then no,

221
00:12:21.990 --> 00:12:25.199
you don't have to worry about
oil MJS versus JS Node.

222
00:12:25.199 --> 00:12:26.713
No, you can just call it JS and

223
00:12:26.713 --> 00:12:30.727
you can use the module syntax because
it's not Node that's processing that.

224
00:12:30.727 --> 00:12:33.785
By the time Node reads it,
it's going to be the output of that,

225
00:12:33.785 --> 00:12:35.709
which will probably just be common JS.

226
00:12:35.709 --> 00:12:39.523
Awesome, I appreciate everyone
coming to this course.

227
00:12:39.523 --> 00:12:41.829
I'm glad I got the chance to come in and
update it.

228
00:12:41.829 --> 00:12:43.799
I hope you got some value from it.

229
00:12:43.799 --> 00:12:49.063
There's anything else I could do
hit me up on Twitter at Scottups,

230
00:12:49.063 --> 00:12:51.789
I respond on Twitter all the time.

231
00:12:51.789 --> 00:12:54.220
If I can spell my own thing.

232
00:12:54.220 --> 00:12:58.478
So hit me up on there if there's anything
I can do for you, or even on LinkedIn,

233
00:12:58.478 --> 00:13:00.749
I'm pretty responsive on there as well.

234
00:13:00.749 --> 00:13:03.520
And, yeah, I hope you continue
on with your Node stuff.

235
00:13:03.520 --> 00:13:06.495
Let me know if this was helpful for you,
if you got some value out of it and

236
00:13:06.495 --> 00:13:07.794
what you've done in your job.

237
00:13:07.794 --> 00:13:10.982
And how I could potentially make
this better for the next one, or

238
00:13:10.982 --> 00:13:13.119
maybe I'll do an advanced course on Node.

239
00:13:13.119 --> 00:13:16.070
Who knows, let me know,
any feedback will be great.

240
00:13:16.070 --> 00:13:17.760
And again, thanks for coming.

