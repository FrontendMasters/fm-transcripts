WEBVTT

1
00:00:00.129 --> 00:00:03.601
Well, I know everyone was excited
to get to the API's and stuff so

2
00:00:03.601 --> 00:00:07.911
I kind of wanna leave a little information
about how you can go further with this.

3
00:00:07.911 --> 00:00:11.101
Cuz I would imagine this is probably
what you want to take advantage of.

4
00:00:11.101 --> 00:00:14.293
As far as like databases go I purposely

5
00:00:14.293 --> 00:00:19.200
didn't want to connect a database and
do stuff like that.

6
00:00:19.200 --> 00:00:23.490
So I think it gets a little
complicated ,but it's not much.

7
00:00:23.490 --> 00:00:24.865
It really depends on the ORM or

8
00:00:24.865 --> 00:00:27.507
the implementation of
the database that you're using.

9
00:00:27.507 --> 00:00:31.741
That's going to determine how
you use it in Express but for

10
00:00:31.741 --> 00:00:35.380
the most part,
if you have an ORM that has models.

11
00:00:35.380 --> 00:00:38.733
Or whatever implementation that you have,
you would just use those same things

12
00:00:38.733 --> 00:00:42.690
exactly what I'm using my database,
some of these will just be async.

13
00:00:42.690 --> 00:00:46.337
And you can these handlers are async
you can base in front of them,

14
00:00:46.337 --> 00:00:49.680
you can await them, and
it works totally fine.

15
00:00:49.680 --> 00:00:51.590
So you can do all the things
in here that are async.

16
00:00:51.590 --> 00:00:53.750
So this is where you would
do your database stuff.

17
00:00:53.750 --> 00:00:55.611
Sometimes you will put
them in middleware to,

18
00:00:55.611 --> 00:00:58.520
you might make your own custom
middleware that checks the database.

19
00:00:58.520 --> 00:01:01.525
If the incoming requests API key
actually exists or if it's valid,

20
00:01:01.525 --> 00:01:05.610
if it's not expired, you make middleware
for that before it even gets here.

21
00:01:05.610 --> 00:01:10.337
So, you can pretty much do a lot of stuff
with Express when it comes to building

22
00:01:10.337 --> 00:01:10.930
API's.

23
00:01:10.930 --> 00:01:14.230
And I mean, just the combinations
have the routes here,

24
00:01:14.230 --> 00:01:17.944
just to give an example of another
one that is probably something

25
00:01:17.944 --> 00:01:20.650
that you would wanna see
is like a dynamic one.

26
00:01:20.650 --> 00:01:23.936
So for instance, if I wanted to be
able to get it to do by a specific ID,

27
00:01:23.936 --> 00:01:25.490
I could do something like this.

28
00:01:25.490 --> 00:01:31.946
I can say app.get/todo/some
parameter here called ID.

29
00:01:31.946 --> 00:01:38.780
And now I can say,
well give me the to do or

30
00:01:38.780 --> 00:01:43.805
todos.find the to do who is to

31
00:01:43.805 --> 00:01:50.845
do.id triple equals rec.params.id.

32
00:01:50.845 --> 00:01:53.979
This is gonna be a string where
I know this is a number, so

33
00:01:53.979 --> 00:01:55.466
I'm gonna convert this.

34
00:01:55.466 --> 00:02:01.630
To a number or
I'll cover this to a number like that.

35
00:02:01.630 --> 00:02:02.840
I think that converts to a number.

36
00:02:02.840 --> 00:02:04.090
We're gonna find out.

37
00:02:04.090 --> 00:02:10.050
So look at the to do and then I'll
just use them like this data todo.

38
00:02:10.050 --> 00:02:13.321
So now this is a dynamic
parameter that can be anything but

39
00:02:13.321 --> 00:02:17.080
it's referred to as the id because
that's what I called it here.

40
00:02:17.080 --> 00:02:20.510
If I called it something else, that's
what it will be called here as well.

41
00:02:20.510 --> 00:02:22.960
So, we call this id and
we'll close this one.

42
00:02:24.150 --> 00:02:29.057
And now if we go back here
we start the server I

43
00:02:29.057 --> 00:02:33.975
got a missing a parentheses or
am I missing?

44
00:02:37.077 --> 00:02:41.503
I don't know why that thing's
freaking out on expected token, okay,

45
00:02:41.503 --> 00:02:43.880
maybe the plus sign doesn't like it.

46
00:02:43.880 --> 00:02:44.505
Let's try this.

47
00:02:49.293 --> 00:02:53.080
Okay, there we go.

48
00:02:53.080 --> 00:02:56.793
So we got that and now I need to post some
to dues right quick so I can get some ids.

49
00:02:56.793 --> 00:03:02.609
Okay, cool, I got an id,
and then now I'm gonna say,

50
00:03:02.609 --> 00:03:06.540
let me do a get to do slash that thing.

51
00:03:08.130 --> 00:03:13.938
You can go away and
this thing freaks out because it says,

52
00:03:13.938 --> 00:03:19.028
I put to do so should be DB,
let's try that again.

53
00:03:20.996 --> 00:03:25.420
Posts, get that Id, try that again.

54
00:03:26.600 --> 00:03:27.320
There we go.

55
00:03:27.320 --> 00:03:32.040
I was able to get that to do back by
the ID with a dinette with a dynamic path.

56
00:03:32.040 --> 00:03:33.650
So you can see it gets really powerful.

57
00:03:33.650 --> 00:03:35.230
It just means that he's one in here.

58
00:03:35.230 --> 00:03:38.240
You can even do regex as in these passes
he wants to Express is ridiculous.

59
00:03:38.240 --> 00:03:41.470
You should check out the documentation
if you want to learn more about it.

60
00:03:41.470 --> 00:03:45.074
So there's no other questions
about Express, we will move on.

61
00:03:45.074 --> 00:03:47.045
Unless there are some questions.

62
00:03:47.045 --> 00:03:49.824
&gt;&gt; What might just use for
the body parser,

63
00:03:49.824 --> 00:03:53.880
well, what's happened if
we didn't include it?

64
00:03:53.880 --> 00:03:54.970
&gt;&gt; Yeah, that's a good question.

65
00:03:54.970 --> 00:03:58.920
So, I'm gonna get rid of this
one body parser json, and

66
00:03:58.920 --> 00:04:01.120
then I'm going to try to post.

67
00:04:01.120 --> 00:04:03.680
I'm gonna try to post and
see what happens.

68
00:04:03.680 --> 00:04:05.850
I think that will give us
the error that I'm looking for.

69
00:04:07.550 --> 00:04:10.970
So I got rid of the body parser and
I'm gonna try to do a post here.

70
00:04:10.970 --> 00:04:16.130
And you can see right now, instead of
it creating a todo that had an id and

71
00:04:16.130 --> 00:04:22.200
a text property, it only created an a todo
with an id like why did it do that?

72
00:04:22.200 --> 00:04:24.329
Well, let's think about it.

73
00:04:24.329 --> 00:04:29.760
Req.body.text is now undefined
,there's nothing there.

74
00:04:29.760 --> 00:04:33.772
So if you add an undefined field to
an object that basically just gets deleted

75
00:04:33.772 --> 00:04:37.680
when you turn it to json, so
this this was basically undefined.

76
00:04:37.680 --> 00:04:42.544
And this was undefined because the body
parser did this, the body parser takes

77
00:04:42.544 --> 00:04:47.700
whatever is posted on the body and
attaches it to an object's called body.

78
00:04:47.700 --> 00:04:51.509
On the request object as an object,
without the body parser,

79
00:04:51.509 --> 00:04:53.060
we wouldn't have this.

80
00:04:53.060 --> 00:04:57.450
And we would have to do the exact
same thing we did here.

81
00:04:57.450 --> 00:05:00.516
We'd have to say request.on data,
build the chunk,

82
00:05:00.516 --> 00:05:04.850
collect the chunk, and then we have it and
that's just really gross.

83
00:05:04.850 --> 00:05:05.700
So we don't wanna do that.

84
00:05:06.940 --> 00:05:10.810
The body parser at least
the body parser.json.that.

85
00:05:10.810 --> 00:05:12.940
URL encoded we're actually not using.

86
00:05:12.940 --> 00:05:15.080
But this does the exact same thing.

87
00:05:15.080 --> 00:05:16.560
But for query strings.

88
00:05:16.560 --> 00:05:19.068
So someone send up a URL with
a query string that had,

89
00:05:19.068 --> 00:05:22.730
I don't know an object on it or a couple
variables that are comma separated.

90
00:05:23.970 --> 00:05:28.206
The URL encoded will parse that and
give us access to it via,

91
00:05:28.206 --> 00:05:33.378
where is it req.query, so
it'd be something called req.query here,

92
00:05:33.378 --> 00:05:35.866
and it will give us access to that.

93
00:05:35.866 --> 00:05:38.870
So that's why we use the body parser.

94
00:05:38.870 --> 00:05:42.880
So, it's a very fundamental
piece of middleware.

95
00:05:42.880 --> 00:05:45.745
In fact, a lot of this stuff used to
be included in Express and then Express

96
00:05:45.745 --> 00:05:49.029
started to like decoupled was like there's
going to be a little more fundamental and

97
00:05:49.029 --> 00:05:50.250
you can add whatever you want.

98
00:05:50.250 --> 00:05:51.845
So, that's how it is.

99
00:05:51.845 --> 00:05:56.342
But there's frameworks that sit on top of
Express, because Express has become so

100
00:05:56.342 --> 00:06:00.595
universal that, pretty much every
framework is built on top of Express now.

101
00:06:00.595 --> 00:06:04.729
So you'll see things like Nest JS,
or I can't think of them,

102
00:06:04.729 --> 00:06:06.720
I don't really use them.

103
00:06:06.720 --> 00:06:09.103
But, most of the Graph QL
stuff like Apollo,

104
00:06:09.103 --> 00:06:13.120
Graph QL Apollo Express a lot of
stuff is built on top of Express.

105
00:06:13.120 --> 00:06:19.140
Because the pattern is so
such fundamental to node these days.

106
00:06:19.140 --> 00:06:21.000
So yeah,
you'll see a lot of stuff like that.

107
00:06:21.000 --> 00:06:22.030
Any questions?

108
00:06:22.030 --> 00:06:26.430
&gt;&gt; This person says in their VS code
it says body parser is deprecated.

109
00:06:26.430 --> 00:06:28.984
&gt;&gt; Body parser is deprecated.

110
00:06:28.984 --> 00:06:36.473
It's hard to say why someone's
VS code would say that I mean,

111
00:06:36.473 --> 00:06:43.111
the best way to confirm that
is to go to body parser NPM.

112
00:06:43.111 --> 00:06:49.170
We could look it up, published two years
ago, it very well may be deprecated.

113
00:06:49.170 --> 00:06:54.407
So we can go look at the GitHub,
I don't see any deprecation notice here

114
00:06:54.407 --> 00:07:00.310
in the Docs or anything like that,
but two years ago, it could have been.

115
00:07:00.310 --> 00:07:01.050
Who knows?

116
00:07:01.050 --> 00:07:03.000
I could look at some issues here.

117
00:07:04.410 --> 00:07:06.420
Yeah, it's hard to say
why that would say that.

118
00:07:06.420 --> 00:07:10.920
But, I mean VS code is VS code.

119
00:07:10.920 --> 00:07:14.520
So, [LAUGH] It's not actually running
your code is still a static analysis.

120
00:07:14.520 --> 00:07:19.381
So, if it works it works, VS code is just
trying to be helpful before you actually

121
00:07:19.381 --> 00:07:21.370
attempt to run the code.

122
00:07:21.370 --> 00:07:23.650
So remember that it's not
actually executing it.

123
00:07:23.650 --> 00:07:29.130
&gt;&gt; Yeah, on stack overflow, just saying
that the body parts are constructor is

124
00:07:29.130 --> 00:07:34.550
now deprecated and you needed to call
your own code and dot json separately.

125
00:07:35.830 --> 00:07:36.940
&gt;&gt; Yeah, yeah.

126
00:07:36.940 --> 00:07:38.960
Yeah, I remember that they did
that a couple of years ago.

127
00:07:38.960 --> 00:07:42.657
It used to be the fact that you
just had to use body parser and

128
00:07:42.657 --> 00:07:47.805
then you would pass in like json, true or
extended, but now they got rid of that.

129
00:07:47.805 --> 00:07:50.945
And you actually just use these
independently from each other.

130
00:07:50.945 --> 00:07:51.825
Good question.

131
00:07:51.825 --> 00:07:53.725
So is rest out and not mandatory.

132
00:07:53.725 --> 00:07:56.975
Well, actually we are doing req dot and
you just aren't explicitly doing it.

133
00:07:56.975 --> 00:07:59.715
Why don't we do something
like raise .json.

134
00:07:59.715 --> 00:08:01.495
That's actually ending it for us.

135
00:08:01.495 --> 00:08:05.345
It's basically saying, hey, I want to
end this response with this request.

136
00:08:05.345 --> 00:08:10.599
That's got to be json, it's the equivalent
of doing something like this,

137
00:08:10.599 --> 00:08:14.540
restaurant JSON is basically
saying like res.end, but

138
00:08:14.540 --> 00:08:18.259
not before you do something like res.,
right head.

139
00:08:18.259 --> 00:08:23.390
You say, writeHead and
then you put what is it

140
00:08:23.390 --> 00:08:28.393
content type, so it's like content type.

141
00:08:30.725 --> 00:08:35.675
Application, json, so
res.json is equivalent of doing that,

142
00:08:35.675 --> 00:08:39.910
passing in a Json string here and
then writing the head.

143
00:08:41.200 --> 00:08:44.440
So who wants to do all that from scratch,
when you get to do res.json?

144
00:08:44.440 --> 00:08:47.270
&gt;&gt; Could you compare Express and Hapi?

145
00:08:47.270 --> 00:08:51.770
&gt;&gt; I can try, and that's only because I've
only used Hapi once in my entire life.

146
00:08:51.770 --> 00:08:53.720
And what I can.

147
00:08:53.720 --> 00:08:56.697
So I'll give you the comparison that
I know I can speak with the most

148
00:08:56.697 --> 00:08:58.150
experience about.

149
00:08:58.150 --> 00:09:01.870
And that would be that the community for
Express is just much bigger.

150
00:09:01.870 --> 00:09:04.670
The support for
Express is just much bigger.

151
00:09:04.670 --> 00:09:08.411
I don't know if Hapi is better or
more performant or

152
00:09:08.411 --> 00:09:11.549
overall in general just you should use it.

153
00:09:11.549 --> 00:09:15.426
All I can say is that Express sis has
the most support the most plugins the most

154
00:09:15.426 --> 00:09:18.227
middleware, the most framework
sitting on top of it.

155
00:09:18.227 --> 00:09:22.810
Probably the most active community
of any server framework and node js.

156
00:09:22.810 --> 00:09:26.003
And I can't say that about any
other framework even Hapi,

157
00:09:26.003 --> 00:09:30.510
although Hapi is obviously very well
known and there's a big framework.

158
00:09:30.510 --> 00:09:33.150
It's just not as big as Express.

159
00:09:34.270 --> 00:09:36.328
It's like I guess the difference
between like Vue and

160
00:09:36.328 --> 00:09:38.620
react they're both amazing I love Vue.

161
00:09:38.620 --> 00:09:42.556
But reacts communities is overwhelmingly
huge compared to Vue even though Vues

162
00:09:42.556 --> 00:09:44.180
community is pretty big too.

163
00:09:44.180 --> 00:09:46.047
So, it really just depends.

164
00:09:46.047 --> 00:09:50.033
On what you're looking for, you can't go
wrong with either the support there for

165
00:09:50.033 --> 00:09:51.324
both it's pretty great.

166
00:09:51.324 --> 00:09:59.110
&gt;&gt; Then someone's saying a body parser
is actually built into Express with V5.

167
00:09:59.110 --> 00:10:02.198
And so
you can just do app.useexpress.json.

168
00:10:02.198 --> 00:10:04.820
&gt;&gt; Yeah, I have yet
to use Express version 5.

169
00:10:04.820 --> 00:10:06.100
I haven't even looked at it.

170
00:10:06.100 --> 00:10:08.280
Last time I checked it out
they were still working on it.

171
00:10:08.280 --> 00:10:11.464
So, it sounds like maybe they haven't
figured out I know that the final version

172
00:10:11.464 --> 00:10:13.902
or if you're looking at a beta,
but I have to check that out.

173
00:10:13.902 --> 00:10:17.253
That's pretty cool that they, cuz I
mean I would literally just said, hey,

174
00:10:17.253 --> 00:10:18.449
everyone uses body parts.

175
00:10:18.449 --> 00:10:20.300
I don't know why they
just don't include this.

176
00:10:20.300 --> 00:10:23.900
So, the fact that they did it, it's
pretty impressive, but yeah, I've been.

177
00:10:23.900 --> 00:10:26.622
I'm on the 4.x,
the 4.x train right now.

178
00:10:26.622 --> 00:10:30.995
Rocking that Express 4, so yeah, I would
check that out good to know thanks.

179
00:10:30.995 --> 00:10:34.207
&gt;&gt; I'd recommend that people
check out your API design

180
00:10:34.207 --> 00:10:37.380
in node course if they wanna go further.

181
00:10:37.380 --> 00:10:39.520
&gt;&gt; Yeah, definitely recommend
checking that one out.

182
00:10:39.520 --> 00:10:45.728
It's like up to V3 now, and I go pretty
deep on building API's with Express and

183
00:10:45.728 --> 00:10:50.030
node and
all those using the Express version 4.

184
00:10:50.030 --> 00:10:51.720
It's pretty much the same thing.

185
00:10:51.720 --> 00:10:53.773
So, highly recommend
checking that one out and

186
00:10:53.773 --> 00:10:55.890
if you like graph QL
that's what you're doing.

187
00:10:55.890 --> 00:11:00.001
I also have a back end graph QL course on
Friday masters as well if you wanna check

188
00:11:00.001 --> 00:11:02.242
that out, and that sits on top of Express,

189
00:11:02.242 --> 00:11:05.050
so, it's just express all
the way top to bottom.

190
00:11:05.050 --> 00:11:06.710
There's no way around it.

191
00:11:06.710 --> 00:11:08.740
I promise you,
they're not paying me to say this.

192
00:11:08.740 --> 00:11:10.540
Just like Express is a good tool.

193
00:11:10.540 --> 00:11:11.180
So, yeah.

