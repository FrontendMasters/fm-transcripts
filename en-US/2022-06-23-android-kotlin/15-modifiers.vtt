WEBVTT

1
00:00:00.717 --> 00:00:03.014
What if I wanna have two text?

2
00:00:03.014 --> 00:00:06.902
Well first me remove one
of the previews for now.

3
00:00:06.902 --> 00:00:12.142
And the second composable as well so
we can just stay with only one preview.

4
00:00:12.142 --> 00:00:14.694
So remember you can do this.

5
00:00:14.694 --> 00:00:18.705
What if I wanna add more
paddings to this text?

6
00:00:18.705 --> 00:00:23.348
So the padding is actually a modifier.

7
00:00:23.348 --> 00:00:26.948
So, this takes a while, but
we're going to do this so

8
00:00:26.948 --> 00:00:31.996
many times today that I promise you that
by the end of the day you will see it.

9
00:00:31.996 --> 00:00:39.242
So, every composable or every building
composable, let me be more accurate here,

10
00:00:39.242 --> 00:00:43.850
every building composable
has a modifier argument.

11
00:00:43.850 --> 00:00:48.213
So I can pass the argument with a name.

12
00:00:48.213 --> 00:00:55.370
The modifier is actually a chain
of functions of type modifier.

13
00:00:55.370 --> 00:00:59.346
So for example, if I want a padding,

14
00:00:59.346 --> 00:01:03.207
it's Modifier.padding, okay?

15
00:01:03.207 --> 00:01:09.525
So I'm adding a padding and
I need to specify the padding in the Dps.

16
00:01:09.525 --> 00:01:14.041
So you can see the type
there it says Dp is a type.

17
00:01:14.041 --> 00:01:15.660
How do you express a Dp?

18
00:01:15.660 --> 00:01:19.112
Look at this,

19
00:01:19.112 --> 00:01:24.874
I will say 16.dp..

20
00:01:24.874 --> 00:01:26.320
I'm seeing Dp in red.

21
00:01:26.320 --> 00:01:29.665
And we are going to see this
a lot in Android Studio.

22
00:01:29.665 --> 00:01:32.132
Red means there is a problem there.

23
00:01:32.132 --> 00:01:36.411
Most of the time,
when you're writing code like this,

24
00:01:36.411 --> 00:01:39.790
it's because there is a need for
an import.

25
00:01:39.790 --> 00:01:46.752
We need to import a class or a function or
someone from an external package.

26
00:01:46.752 --> 00:01:52.741
In Android Studio, you quickly import
will Option+Return on the Mac,

27
00:01:52.741 --> 00:01:55.500
Alt+Enter on Windows or Linux.

28
00:01:55.500 --> 00:01:58.960
So Option+Enter,
Alt+Enter solves the problem.

29
00:01:58.960 --> 00:02:01.836
And actually what it's
doing is at the top,

30
00:02:01.836 --> 00:02:06.445
there is a section that is minimized or
it's collapsed with imports.

31
00:02:06.445 --> 00:02:12.210
And here you can see it's
importing the Dp, okay?

32
00:02:12.210 --> 00:02:13.711
So what's going on here?

33
00:02:13.711 --> 00:02:15.662
16.dp, look at that.

34
00:02:15.662 --> 00:02:22.700
So Dp seems like a property of
integers from a Kotlin point of view.

35
00:02:22.700 --> 00:02:26.949
But the idea is to write
this similar to CSS.

36
00:02:26.949 --> 00:02:31.272
But actually this is using
Kotlin behind the scenes.

37
00:02:31.272 --> 00:02:35.160
So if I bill a refresh, I should see,

38
00:02:38.486 --> 00:02:41.732
The padding, okay?

39
00:02:41.732 --> 00:02:44.321
So what if I wanna change
the background color?

40
00:02:44.321 --> 00:02:45.932
It's another modifier.

41
00:02:45.932 --> 00:02:49.130
But I all ready said
the modifier property,

42
00:02:49.130 --> 00:02:53.631
there is only one modifier
property per text per composable.

43
00:02:53.631 --> 00:02:57.130
Something that I can do is
I can continue this chain.

44
00:02:57.130 --> 00:02:59.785
So after the padding,

45
00:02:59.785 --> 00:03:05.515
I can change the background and
define Color.,

46
00:03:05.515 --> 00:03:11.547
let's pick any one here like cyan or
maybe yellow.

47
00:03:12.812 --> 00:03:18.775
As you can see,
reading these lessons look really nice.

48
00:03:18.775 --> 00:03:24.128
So most of the time what we
do is we put the modifier,

49
00:03:24.128 --> 00:03:27.737
the declaration in a new line, and

50
00:03:27.737 --> 00:03:32.733
then each modifier also in a new line,
like so.

51
00:03:32.733 --> 00:03:38.556
So most of the time we are going
to see composable like this.

52
00:03:38.556 --> 00:03:41.580
And by the way,
if you're coming in from the web,

53
00:03:41.580 --> 00:03:44.250
there is something weird with the padding.

54
00:03:44.250 --> 00:03:47.452
What's going on with that padding?

55
00:03:47.452 --> 00:03:51.821
The yellow is not taking my padding, okay?

56
00:03:51.821 --> 00:03:57.980
That's because the order in which you
apply the modifiers is actually important.

57
00:03:57.980 --> 00:04:01.963
If I change the order,
it's going to change what it's doing,

58
00:04:01.963 --> 00:04:06.336
it's first applying the background and
then applying the padding.

59
00:04:06.336 --> 00:04:09.629
Because a modifier is a function that

60
00:04:09.629 --> 00:04:14.311
transforms a composable
into another composable.

61
00:04:14.311 --> 00:04:16.283
It's not the property.

62
00:04:16.283 --> 00:04:19.966
It's a set of input-output transformers.

63
00:04:19.966 --> 00:04:24.679
It receives something in a composable,
it transforms the composable into

64
00:04:24.679 --> 00:04:28.434
another composable, and
then it can apply another thing.

65
00:04:28.434 --> 00:04:33.353
In fact, I can apply the padding
more than one because

66
00:04:33.353 --> 00:04:36.862
padding is not a property like in CSS.

67
00:04:36.862 --> 00:04:39.788
With CSS, you can apply padding twice but

68
00:04:39.788 --> 00:04:43.558
only the last one with valid
values will be accepted.

69
00:04:43.558 --> 00:04:45.437
But here, both will work.

70
00:04:45.437 --> 00:04:50.087
In this case,
I will have both matching and padding.

71
00:04:50.087 --> 00:04:53.182
In fact, we don't have matching here.

72
00:04:53.182 --> 00:04:58.321
A matching here is a padding that
you apply before the background.

73
00:04:58.321 --> 00:05:00.280
And now I have matching and padding.

74
00:05:02.593 --> 00:05:05.211
My app is still not using this composable,

75
00:05:05.211 --> 00:05:09.298
this is like a composable that I'm
building separate from my app.

76
00:05:09.298 --> 00:05:14.556
But instead of a text Hello World,
I can just use my first composable and

77
00:05:14.556 --> 00:05:18.866
just call the function that
have you render a composable.

78
00:05:18.866 --> 00:05:24.989
So if I do this, and
I run this on the emulator,

79
00:05:24.989 --> 00:05:29.699
not in the preview, it should run my

80
00:05:29.699 --> 00:05:34.572
Hello Jetpack Compose composable.

81
00:05:34.572 --> 00:05:37.617
Does it make sense?

82
00:05:37.617 --> 00:05:41.697
So we are going to be building
composable functions like this.

83
00:05:41.697 --> 00:05:46.721
Inside the body of the function,
we are going to be publishing

84
00:05:46.721 --> 00:05:50.885
more composables with properties and
modifiers.

85
00:05:50.885 --> 00:05:54.985
And that's how we are going to
build the whole application, okay?

86
00:05:54.985 --> 00:05:58.666
So we have something for
now, okay, pretty simple.

87
00:05:58.666 --> 00:06:00.979
I'm going to add two more
things really quickly.

88
00:06:00.979 --> 00:06:02.764
So first, what if I add another text?

89
00:06:02.764 --> 00:06:04.411
How do I add another text?

90
00:06:04.411 --> 00:06:10.859
When the first text is finished,
I can put a new line and put another text.

91
00:06:12.848 --> 00:06:17.145
Let me minimize the emulator for
now, hide it like so.

92
00:06:17.145 --> 00:06:22.294
So if I do this,
can I have two text like this?

93
00:06:22.294 --> 00:06:27.904
I can, but if you look at the preview,
I'm not sure it is what I was expecting.

94
00:06:27.904 --> 00:06:34.591
By default, if I emit more than
one composable in my composable,

95
00:06:34.591 --> 00:06:38.614
they are one on top of the other, okay?

96
00:06:38.614 --> 00:06:42.747
So it says like,
I don't think that's what I want.

97
00:06:42.747 --> 00:06:48.609
Maybe what I want is to have
the other text below the first one.

98
00:06:48.609 --> 00:06:52.744
Well to do that, we need a container
that will mark the layout.

99
00:06:52.744 --> 00:06:55.427
The container is column.

100
00:06:55.427 --> 00:07:00.096
So I'm going to create a column and inside
the column, there is some kind of a code

101
00:07:00.096 --> 00:07:04.099
block that I will explain in a minute,
and I can emit two texts there.

102
00:07:07.614 --> 00:07:10.532
And now I have one text on the other text.

103
00:07:10.532 --> 00:07:15.927
And if I want a padding on the other text,
well I need to set another modifier.

104
00:07:15.927 --> 00:07:20.830
Modifier =, and
I can start typing Python here,

105
00:07:20.830 --> 00:07:24.814
and I have like that little thing there.

106
00:07:24.814 --> 00:07:28.841
So build and
refresh every time you wanna update this.

107
00:07:28.841 --> 00:07:32.607
So you don't need to build and
refresh on every change.

108
00:07:32.607 --> 00:07:39.272
There are some small changes that you can,
for example if you change the padding,

109
00:07:39.272 --> 00:07:44.594
like here instead of 16 I use 8,
you can see that immediately.

110
00:07:44.594 --> 00:07:51.170
So if you change numbers, or even some
text, there is no need for rebuild.

111
00:07:51.170 --> 00:07:54.637
But when you make other changes,
you need to rebuild, okay?

112
00:07:54.637 --> 00:07:59.601
So changing literally strings or
changing values for

113
00:07:59.601 --> 00:08:04.684
the units will let you see
the preview quicker, okay?

114
00:08:04.684 --> 00:08:08.085
So I have column and
because I have column, I also have row.

115
00:08:08.085 --> 00:08:10.568
So instead of column I can use row.

116
00:08:10.568 --> 00:08:14.610
And this is like flex books.

117
00:08:14.610 --> 00:08:16.521
By the way, I'm getting an error.

118
00:08:16.521 --> 00:08:18.269
Whoo, what's going on?

119
00:08:18.269 --> 00:08:21.995
Look at Row, it's red.

120
00:08:21.995 --> 00:08:28.612
So I need to import, option return,
probably, and that import.

121
00:08:28.612 --> 00:08:32.031
Why I didn't import column?

122
00:08:32.031 --> 00:08:36.495
Because actually there is
a difference between typing row, and

123
00:08:36.495 --> 00:08:38.404
picking row from the list.

124
00:08:38.404 --> 00:08:42.303
So, if I pick someone from the list and
press Return or

125
00:08:42.303 --> 00:08:46.736
Enter, it will add the import
automatically, make sense?

126
00:08:46.736 --> 00:08:52.216
If I type it completely,
there is no automatic import.

127
00:08:53.978 --> 00:08:54.997
Make sense?

128
00:08:54.997 --> 00:08:59.531
So that's why it's a good idea to pick it
from here if you get used to that because

129
00:08:59.531 --> 00:09:02.655
that will add the import
declaration automatically.

130
00:09:02.655 --> 00:09:04.982
So now I need to build again.

131
00:09:07.319 --> 00:09:09.676
And now there is a row.

132
00:09:09.676 --> 00:09:11.343
So it goes that way.

133
00:09:13.290 --> 00:09:17.408
And of course you can nest rows and
columns.

134
00:09:17.408 --> 00:09:22.445
This is like a D with flex box on the web,

135
00:09:22.445 --> 00:09:27.959
or this is like an Hstack or
a Vstack on iOS.

136
00:09:27.959 --> 00:09:30.213
Depends on the platform Swift UI.

137
00:09:30.213 --> 00:09:36.454
So we have row and we have columns
as the most common things here.

138
00:09:36.454 --> 00:09:39.195
But, what is this code
block that we have here?

139
00:09:39.195 --> 00:09:42.065
That's kind of weird,
this is a lambda expression.

140
00:09:42.065 --> 00:09:46.137
We don't see that here, but
it's a lambda expression.

141
00:09:46.137 --> 00:09:50.220
So column receives in
the constructor lambda expression,

142
00:09:50.220 --> 00:09:52.268
lambda is a function, okay?

143
00:09:52.268 --> 00:09:57.266
We don't see that function, it looks
like a code block, but that's why it has

144
00:09:57.266 --> 00:10:02.220
its own this, its own context here,
that it's saying that I'm in a column.

145
00:10:02.220 --> 00:10:08.622
Anyway for now, this is the kind
of how Jetpack Compose looks like?

146
00:10:08.622 --> 00:10:10.811
Any question on how it looks like.

147
00:10:10.811 --> 00:10:15.971
&gt;&gt; If you wanted to like have like a base
modifier and then have each one like

148
00:10:15.971 --> 00:10:21.232
add on to it, can you create like
an instance of modifier above and then.

149
00:10:21.232 --> 00:10:27.356
&gt;&gt; So the question is, if you wanna apply
like the same modifiers to many elements?

150
00:10:27.356 --> 00:10:31.353
Typically if you wanna do that,
you can create your own modifier, okay?

151
00:10:31.353 --> 00:10:35.645
So you can create your own modifier with
a name, padding and background, okay?

152
00:10:35.645 --> 00:10:37.481
That will apply the padding and
background inside.

153
00:10:37.481 --> 00:10:38.264
What's a modifier?

154
00:10:38.264 --> 00:10:40.177
A function.

155
00:10:40.177 --> 00:10:46.393
Okay, so the way to do that is to create
your own modifiers that's the simplest.

156
00:10:46.393 --> 00:10:51.076
There are many patterns to solve the
problems but probably what you wanna do,

157
00:10:51.076 --> 00:10:53.464
the simplest way is to create your own.

158
00:10:53.464 --> 00:10:55.280
How is it going to work that?

159
00:10:55.280 --> 00:10:56.433
Well what is Padding?

160
00:10:56.433 --> 00:11:01.436
I can command click on everything that
you have here because it's open source,

161
00:11:01.436 --> 00:11:03.760
the whole framework is open source.

162
00:11:03.760 --> 00:11:08.663
You can command click or control click on
windows on every element like ID column,

163
00:11:08.663 --> 00:11:10.590
and you can see the code, okay?

164
00:11:10.590 --> 00:11:14.781
So that means that I can also see
the padding or the background modifier.

165
00:11:14.781 --> 00:11:19.928
If I Control click or Command click here,
you will get and see what it is.

166
00:11:19.928 --> 00:11:21.866
So what is a modifier?

167
00:11:21.866 --> 00:11:27.307
If I ask you what's a modifier,
it's a function, but not any function.

168
00:11:27.307 --> 00:11:29.121
Its an extension function.

169
00:11:29.121 --> 00:11:34.019
It extending modifier which means if
you wanna create your own modifier you

170
00:11:34.019 --> 00:11:35.350
need to do the same.

171
00:11:35.350 --> 00:11:39.028
You add a function to modifier, okay?

172
00:11:39.028 --> 00:11:42.545
Well, then you need to add the code, but

173
00:11:42.545 --> 00:11:46.793
here you have all the code
how to add the padding.

174
00:11:46.793 --> 00:11:53.226
But that's how you compose elements here,
okay?

175
00:11:53.226 --> 00:11:56.565
Make sense?

176
00:11:56.565 --> 00:12:00.735
&gt;&gt; Do you do that outside of
this function just because it's,

177
00:12:00.735 --> 00:12:02.680
&gt;&gt; Yeah, you should do it outside,

178
00:12:02.680 --> 00:12:04.698
it can also be in a different file.

179
00:12:04.698 --> 00:12:07.849
So anywhere but yeah.

