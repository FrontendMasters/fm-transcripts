WEBVTT

1
00:00:00.700 --> 00:00:04.010
So we have our app running.

2
00:00:04.010 --> 00:00:11.450
It's still empty or just with one quick
composable that we have just created.

3
00:00:11.450 --> 00:00:13.470
Right now, the operation is on GitHub.

4
00:00:13.470 --> 00:00:16.081
So in case you wanna follow my code,

5
00:00:16.081 --> 00:00:21.317
it's available on github.com
firtman/coffeemasters-android.

6
00:00:21.317 --> 00:00:25.680
So I'm going to be pushing
all the changes here.

7
00:00:25.680 --> 00:00:30.486
Also, if you have the companion
website in the introduction,

8
00:00:30.486 --> 00:00:35.210
you have actually the link to
that repository, the last one.

9
00:00:36.930 --> 00:00:41.600
So let's quickly review the main
concepts that we have here.

10
00:00:41.600 --> 00:00:44.588
Of course, we have Kotlin.

11
00:00:44.588 --> 00:00:47.921
We've reviewed the basics of the language.

12
00:00:47.921 --> 00:00:54.300
But also we have a composable that has
to do with a chatbot compose framework.

13
00:00:54.300 --> 00:00:58.697
A composable, remember,
is a function that is annotated,

14
00:00:58.697 --> 00:01:01.930
it's decorated with @Composable.

15
00:01:01.930 --> 00:01:07.350
That makes actually a composable
in this framework just a function.

16
00:01:07.350 --> 00:01:11.155
Within the function, if you see,
the function is not returning anything.

17
00:01:11.155 --> 00:01:14.610
There is no return declaration here.

18
00:01:14.610 --> 00:01:19.770
So it's not returning a composable or
a view or a component, no.

19
00:01:19.770 --> 00:01:23.252
The composable inside, it's calling and

20
00:01:23.252 --> 00:01:27.321
meeting other composables
just by calling them.

21
00:01:27.321 --> 00:01:29.332
That's how the system works.

22
00:01:29.332 --> 00:01:34.340
Right now we have a column that
is a composable accepting other

23
00:01:34.340 --> 00:01:39.842
composables with two texts, in fact,
one Text and one TextField.

24
00:01:39.842 --> 00:01:44.578
And we have used this idea of
mutable state that we use this to

25
00:01:44.578 --> 00:01:49.791
change the state of this composable
based on a user interaction or

26
00:01:49.791 --> 00:01:54.080
any other thing that
might change over time.

27
00:01:54.080 --> 00:01:59.970
And that triggers within the composition
of our app the renderings that are needed.

28
00:01:59.970 --> 00:02:05.770
The framework is optimized to make
this in the best possible way.

29
00:02:05.770 --> 00:02:09.260
So we don't need to think about
performance initially, okay?

30
00:02:09.260 --> 00:02:12.176
So we are just working with functions and

31
00:02:12.176 --> 00:02:17.420
simple structures in memory that then
are being rendered on the screen.

32
00:02:18.510 --> 00:02:20.270
Do you have any question on this point?

33
00:02:20.270 --> 00:02:25.040
So the question is what about those
AndroidX import that we have?

34
00:02:25.040 --> 00:02:30.219
Sometimes we have something that are on
Android, Android dot or AndroidX.

35
00:02:31.520 --> 00:02:36.120
Everything that starts with Android,
it's actually part of the SDK.

36
00:02:36.120 --> 00:02:38.780
So that means it's part
of the operating system.

37
00:02:38.780 --> 00:02:42.470
Everything that says AndroidX
is part of shared pack.

38
00:02:43.660 --> 00:02:47.400
So it's part of the library created
by the same Android team, but

39
00:02:47.400 --> 00:02:49.390
it's not part of the OS.

40
00:02:49.390 --> 00:02:54.880
So everything that is on AndroidX, it's
actually going to be shipped with our app.

41
00:02:54.880 --> 00:02:57.070
So the binaries will ship with our app.

42
00:02:57.070 --> 00:02:59.064
So that's the main difference.

43
00:03:01.718 --> 00:03:06.593
So now you can follow along
with the GitHub repository, or

44
00:03:06.593 --> 00:03:10.983
if you want,
following the steps that we have here.

45
00:03:10.983 --> 00:03:17.803
We are right now on section 3,
lesson 1, creating the offers section.

46
00:03:17.803 --> 00:03:20.995
So I'm going to do this manually first,
but

47
00:03:20.995 --> 00:03:26.014
then if you want the final code,
you have the final code here, okay?

48
00:03:26.014 --> 00:03:31.372
So I'm going to leave main activity for
now for a minute.

49
00:03:31.372 --> 00:03:34.169
We're going to create a new file, where?

50
00:03:34.169 --> 00:03:38.630
In the same place where main
activity Kotlin file resides.

51
00:03:38.630 --> 00:03:43.210
So in this folder, right-click New.

52
00:03:43.210 --> 00:03:48.670
There are a lot of things we can create,
so many things that we will ignore.

53
00:03:48.670 --> 00:03:53.090
Because with chatbot compose, we just
need Kotlin functions, nothing else.

54
00:03:53.090 --> 00:03:57.662
So we're actually going to
create a Kotlin class file.

55
00:03:57.662 --> 00:04:01.997
99% of the time while doing
chatbot compose applications,

56
00:04:01.997 --> 00:04:04.377
we are going to use that template.

57
00:04:04.377 --> 00:04:09.820
And then we put the name, so
we're going to create an offers page.

58
00:04:09.820 --> 00:04:16.050
So our app will have a page section for
rendering offers like discounts and

59
00:04:16.050 --> 00:04:21.220
special promotions that we
have at our coffee store.

60
00:04:21.220 --> 00:04:23.130
So let's call that offers page.

61
00:04:23.130 --> 00:04:25.760
It's just a file, not a Kotlin class.

62
00:04:25.760 --> 00:04:31.350
But anyway, anything that you select here
will just change the basic template.

63
00:04:31.350 --> 00:04:36.075
If you don't like it, you just need
to delete the code that you have, and

64
00:04:36.075 --> 00:04:37.009
that's all.

65
00:04:37.009 --> 00:04:40.514
Because I'm now on Git,
I will just say that I don't

66
00:04:40.514 --> 00:04:44.671
want to be asked again about
adding these to my repositories.

67
00:04:44.671 --> 00:04:48.250
I will say add, and
I don't need this interface.

68
00:04:48.250 --> 00:04:49.470
So I was just playing with that.

69
00:04:49.470 --> 00:04:51.090
So it's just an empty file.

70
00:04:51.090 --> 00:04:52.930
So I'm going to create a composable.

71
00:04:52.930 --> 00:04:56.780
So we know a composable is a function
annotated with that composable.

72
00:04:56.780 --> 00:05:01.045
But I'm going to show you an even
faster way to create a composable.

73
00:05:01.045 --> 00:05:04.185
There is a shortcut or
a snippet available.

74
00:05:04.185 --> 00:05:09.045
You type comp and you press Tab,
not Enter, Tab, and

75
00:05:09.045 --> 00:05:13.270
it just creates a composable
with a function.

76
00:05:13.270 --> 00:05:16.820
And the cursor is on the right place,
you just write the name.

77
00:05:16.820 --> 00:05:18.330
So I will just create an offer.

78
00:05:19.780 --> 00:05:25.150
It's just that, not a big deal, okay, but
yeah, it will save a couple of seconds.

79
00:05:25.150 --> 00:05:28.372
Another shortcut that we
have instead of comp,

80
00:05:28.372 --> 00:05:32.569
it's prev that will create
a composable also with a preview.

81
00:05:34.724 --> 00:05:39.515
Again, if you forgot about that,
no worries, you go and add at preview,

82
00:05:39.515 --> 00:05:41.152
and that's all, okay?

83
00:05:41.152 --> 00:05:46.026
Well, the offer will actually be something
that we are going to put on the screen

84
00:05:46.026 --> 00:05:47.720
that will render an offer.

85
00:05:47.720 --> 00:05:50.664
So I'm going to start
with two pieces of text.

86
00:05:50.664 --> 00:05:52.341
So I will need two text.

87
00:05:52.341 --> 00:05:57.309
Now because I'm going to render
two elements, I need a container,

88
00:05:57.309 --> 00:05:59.425
as we did before.

89
00:05:59.425 --> 00:06:03.275
I want the title and
the description below.

90
00:06:03.275 --> 00:06:07.115
So I want to create a column-based design.

91
00:06:07.115 --> 00:06:12.065
So I'm going to add column and
then two text composables.

92
00:06:13.565 --> 00:06:18.850
The one was first my title,
and then a description.

93
00:06:18.850 --> 00:06:25.260
And we're going to now work
with the design of this offer.

94
00:06:25.260 --> 00:06:28.524
So I'm going to hide the operation for
a second so I have more space for

95
00:06:28.524 --> 00:06:29.890
the preview.

96
00:06:29.890 --> 00:06:34.651
So I can do something like this,
and then that.

97
00:06:34.651 --> 00:06:39.857
Remember that by default, mostly if
you're in dark theme in your computer,

98
00:06:39.857 --> 00:06:45.163
something looks wrong there, and that
is that the preview has no background.

99
00:06:45.163 --> 00:06:49.412
So it's transparent to
your canvas of your IDE.

100
00:06:49.412 --> 00:06:54.283
So if you wanna add that, you open
parenthesis in the preview declaration.

101
00:06:54.283 --> 00:06:58.535
And here, you see all
the possibilities that you have, and

102
00:06:58.535 --> 00:07:00.844
one is showBackground = true.

103
00:07:00.844 --> 00:07:03.488
And now you will have,
by default, a white background.

104
00:07:03.488 --> 00:07:06.975
At least we can see
the contrast of the content.

105
00:07:06.975 --> 00:07:12.581
What about font size, font styles?

106
00:07:12.581 --> 00:07:19.234
Remember that we mentioned that
every composable has modifier.

107
00:07:19.234 --> 00:07:24.280
However, modifiers are typically
applied to layout definitions,

108
00:07:24.280 --> 00:07:28.820
layout declarations, and
also event handling.

109
00:07:28.820 --> 00:07:34.260
So for example, text size,
font size are not typically modifiers.

110
00:07:34.260 --> 00:07:39.950
They are just properties that
I can call in the function.

111
00:07:39.950 --> 00:07:44.569
So actually, they're not properties, they
are technically arguments to the function.

112
00:07:44.569 --> 00:07:47.580
Remember, composables are just functions.

113
00:07:47.580 --> 00:07:51.334
So instead of text,
I can search for font, and

114
00:07:51.334 --> 00:07:56.260
we have fontSize, fontWeight,
fontFamily, fontStyle.

115
00:07:57.680 --> 00:08:02.899
So if I wanna change the size,
I can say fontSize =,

116
00:08:02.899 --> 00:08:06.470
and then the value such as 16 dot.

117
00:08:06.470 --> 00:08:08.802
And here we need to specify the unit.

118
00:08:08.802 --> 00:08:12.410
For font sizes, we use sp, not dp.

119
00:08:13.450 --> 00:08:19.660
If you see red there, Alt+Enter or
Option+Return to add the import.

120
00:08:19.660 --> 00:08:23.713
And by the way, if you go to
the preferences on Android Studio,

121
00:08:23.713 --> 00:08:27.000
you have a way where you
can actually in the editor,

122
00:08:27.000 --> 00:08:30.309
there are many things that you can change,
right?

123
00:08:30.309 --> 00:08:32.607
You can personalize the IDE.

124
00:08:32.607 --> 00:08:36.420
And one of the things that you
can do is work with autoimports.

125
00:08:36.420 --> 00:08:41.350
So if you search for import here,
you have autoimport in Kotlin.

126
00:08:41.350 --> 00:08:47.370
So go down and you can add or
you can even optimize imports on the fly.

127
00:08:48.490 --> 00:08:52.975
So in this case, when you add an import
and then you delete the object from that

128
00:08:52.975 --> 00:08:55.815
import, it will also delete the import,
okay?

129
00:08:55.815 --> 00:09:01.120
So if you wanna play with that and
be more efficient with imports,

130
00:09:01.120 --> 00:09:05.272
you can play with those
options in Android Studio.

131
00:09:05.272 --> 00:09:07.326
Okay, so what's sp?

132
00:09:07.326 --> 00:09:10.380
sp, the s is for scalable.

133
00:09:10.380 --> 00:09:14.925
Actually, on Android, the same on
other devices, you can increase or

134
00:09:14.925 --> 00:09:17.530
decrease the display font size.

135
00:09:17.530 --> 00:09:20.878
I mean, if the user needs bigger font,

136
00:09:20.878 --> 00:09:26.000
the user goes to settings and
increase the font size.

137
00:09:26.000 --> 00:09:31.480
When we use sp, we're actually
honoring that user decision.

138
00:09:31.480 --> 00:09:35.260
So actually, if the user needs a bigger
font, our font will also be bigger.

139
00:09:36.380 --> 00:09:44.050
When we use dp's, they're actually
being strict or fixed with our unit.

140
00:09:44.050 --> 00:09:47.999
If we say 16 dp, it's always 16.

141
00:09:47.999 --> 00:09:53.734
If we say sp, it's going to be multiplied
by a number defined by the user.

142
00:09:53.734 --> 00:09:59.372
On normal situations, it's 1, but
it can be 1/10, 1/25, or even it

143
00:09:59.372 --> 00:10:04.863
can be 0/9 if the user goes and decrease
or increase the default font size.

144
00:10:04.863 --> 00:10:07.619
There are many properties,
okay, that we can use.

145
00:10:07.619 --> 00:10:10.400
One of those is fontStyle, okay?

146
00:10:10.400 --> 00:10:15.030
That fontStyle will give you
some options like normal,

147
00:10:15.030 --> 00:10:18.589
italic, and we can create your own style.

148
00:10:18.589 --> 00:10:23.143
But instead of fontStyle, okay,
we're just going to play with style,

149
00:10:23.143 --> 00:10:25.840
that is, a TextStyle and not a FontStyle.

150
00:10:25.840 --> 00:10:28.921
So have in mind that it seems the same,
but it's not.

151
00:10:28.921 --> 00:10:32.744
The FontStyle,
if we want italic or normal, and

152
00:10:32.744 --> 00:10:36.485
the TextStyle is something
that we can define.

153
00:10:36.485 --> 00:10:41.864
And there are many text styles
available by default that

154
00:10:41.864 --> 00:10:47.138
you will see as something interesting,
such as body.

155
00:10:47.138 --> 00:10:51.258
We have H1, as well H2.

156
00:10:51.258 --> 00:10:55.540
So these are text styles that you
can define where in the theme.

157
00:10:56.870 --> 00:11:02.300
In fact, if we go to the UI.theme
subfolder, there is a section for type.

158
00:11:02.300 --> 00:11:04.240
This is for typography.

159
00:11:04.240 --> 00:11:09.320
And here you're going to see
a couple of styles already there.

160
00:11:09.320 --> 00:11:14.082
And even we can override,
we can uncomment this, oops.

161
00:11:15.841 --> 00:11:18.870
And create more styles or
override these styles.

162
00:11:20.750 --> 00:11:23.510
There is a missing comma here, like that.

163
00:11:23.510 --> 00:11:27.512
So the idea is that this is body1,
button, caption, but there are more.

164
00:11:27.512 --> 00:11:31.836
We have h1, h2, like HTML.

165
00:11:31.836 --> 00:11:34.846
So these are semantic styles
that we can define here.

166
00:11:34.846 --> 00:11:43.140
This is like or similar to CSS class,
if you want, but only for text styling.

167
00:11:43.140 --> 00:11:46.260
So how can I access these text styles?

168
00:11:46.260 --> 00:11:47.923
Of course, I can create my own text style.

169
00:11:47.923 --> 00:11:49.609
You can see this is a constructor, right?

170
00:11:49.609 --> 00:11:54.209
So I can create my own text style and
put it here.

171
00:11:54.209 --> 00:11:55.692
Can I create variables in my function?

172
00:11:55.692 --> 00:11:58.430
It's a function, so yes, I can.

173
00:11:58.430 --> 00:12:04.060
So I can create an immutable variable and
I can say that this is my style.

174
00:12:04.060 --> 00:12:07.357
So I can actually use that style.

175
00:12:07.357 --> 00:12:09.170
So I can create the style.

176
00:12:09.170 --> 00:12:14.318
Again, this is like a CSS class
declaration, but only for text.

