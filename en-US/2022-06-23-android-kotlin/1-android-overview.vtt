WEBVTT

1
00:00:00.430 --> 00:00:05.439
I don't wanna get too theoretical here but
something that is important for

2
00:00:05.439 --> 00:00:09.892
you to understand is that,
Android is an Open Source Project, and

3
00:00:09.892 --> 00:00:12.383
is an open source operating system.

4
00:00:12.383 --> 00:00:16.223
And actually,
when we are building apps for Android,

5
00:00:16.223 --> 00:00:19.770
sometimes we are building for the AOSP.

6
00:00:19.770 --> 00:00:22.520
AOSP stand for
Android Open Source Project.

7
00:00:23.880 --> 00:00:27.290
That's AOSP, Android Open Source Project.

8
00:00:27.290 --> 00:00:31.848
But on top of that, most of
the phones that we owned these days,

9
00:00:31.848 --> 00:00:37.102
they have another layer known as GMS,
that's Google Mobile Services.

10
00:00:37.102 --> 00:00:42.740
And not everything that we are used to as
Android users, it's actually open source.

11
00:00:42.740 --> 00:00:46.840
For example, Google Maps is
not in the open source layer.

12
00:00:48.030 --> 00:00:52.185
So the same with play services
such as the Play Store, but

13
00:00:52.185 --> 00:00:56.686
also some services that the OS
is offering to apps such as, for

14
00:00:56.686 --> 00:00:59.570
example, Geolocation using Wi-Fi.

15
00:00:59.570 --> 00:01:03.580
So those services are not available
in the open source project.

16
00:01:04.740 --> 00:01:07.495
And some vendors such as Samsung,

17
00:01:07.495 --> 00:01:13.030
some manufacturers are also adding
some layers on top of that.

18
00:01:13.030 --> 00:01:18.211
For example, if you wanna support
the Samsung Pen, or if you wanna support

19
00:01:18.211 --> 00:01:23.740
the Foldables at some points that are not
part of the other open source project.

20
00:01:23.740 --> 00:01:28.692
They have libraries, they're offering for
you libraries that you can use for

21
00:01:28.692 --> 00:01:31.040
those devices only.

22
00:01:31.040 --> 00:01:35.567
I'm mentioning this because there are some

23
00:01:35.567 --> 00:01:41.180
devices out there without the GMS layer,
okay?

24
00:01:41.180 --> 00:01:46.660
So in terms of market share is
probably 5% or less than 5%.

25
00:01:46.660 --> 00:01:49.810
But for example we have there.

26
00:01:49.810 --> 00:01:52.550
Some examples are FireOS.

27
00:01:52.550 --> 00:01:59.206
That's the OS actually available on Amazon
devices, that can be the Fire Tablet and

28
00:01:59.206 --> 00:02:04.941
also the Fire Stick that you can or
Fire TV that you can connect to your TV.

29
00:02:04.941 --> 00:02:09.089
Also Huawei devices, Huawei phones, so

30
00:02:09.089 --> 00:02:12.649
they don't have the Google layer.

31
00:02:12.649 --> 00:02:15.007
Meaning that when you're
building your app,

32
00:02:15.007 --> 00:02:18.090
you need to be very careful when
you're using some API's and

33
00:02:18.090 --> 00:02:22.420
libraries because those libraries might
not be available on all the phones.

34
00:02:22.420 --> 00:02:26.101
If you're using libraries from
the AOSP layer, you're good,

35
00:02:26.101 --> 00:02:28.560
you're good to go everywhere.

36
00:02:28.560 --> 00:02:29.577
But sometimes,

37
00:02:29.577 --> 00:02:34.309
you need to be very careful because
sometimes it won't be available, okay?

38
00:02:34.309 --> 00:02:37.444
For the all the topics that
we're going to cover today,

39
00:02:37.444 --> 00:02:40.290
we are going to be working with the AOSP.

40
00:02:40.290 --> 00:02:43.279
So our app will actually work
everywhere but have in mind,

41
00:02:43.279 --> 00:02:47.061
when you start adding more libraries,
and we are starting using services

42
00:02:47.061 --> 00:02:51.790
from the operating system that they might
not be available for all your users.

43
00:02:51.790 --> 00:02:55.867
In those cases, you need to find,
for example, Huawei,

44
00:02:55.867 --> 00:03:01.040
it has an alternative map provider
that is part of their vendor software.

45
00:03:01.040 --> 00:03:04.480
But yeah, then you need to start doing
some conditions in your app, okay?

46
00:03:04.480 --> 00:03:07.670
If it's a Huawei device,
I need to use the Huawei map, and

47
00:03:07.670 --> 00:03:10.930
if it's not,
I need to use the Google Map service.

48
00:03:10.930 --> 00:03:12.140
Okay, something like that.

49
00:03:12.140 --> 00:03:18.130
One of the problems of Android is that
diagram, it's device fragmentation.

50
00:03:18.130 --> 00:03:22.300
This is actually from a couple of
years ago, so today is even worse.

51
00:03:22.300 --> 00:03:25.673
Every rectangle that you see there
is actually a different phone.

52
00:03:25.673 --> 00:03:29.600
A different device that is
actually active in the market.

53
00:03:29.600 --> 00:03:34.317
So we have so many devices from so
many different vendors with so

54
00:03:34.317 --> 00:03:36.988
many different characteristics,

55
00:03:36.988 --> 00:03:42.605
that creating an Android application
seems a problem mostly for testing.

56
00:03:42.605 --> 00:03:46.393
And that's why using a UI
framework that is flexible and

57
00:03:46.393 --> 00:03:50.836
can adjust to different scenarios,
it's actually a good idea.

58
00:03:50.836 --> 00:03:55.424
Compare this with iOS app development,
this is much worse.

59
00:03:55.424 --> 00:03:59.688
When iOS, we have yeah three four or
five different iPhones and

60
00:03:59.688 --> 00:04:02.026
maybe some iPads and that's all.

61
00:04:02.026 --> 00:04:04.689
So if you wanna test our application,

62
00:04:04.689 --> 00:04:08.690
you just need to test on
a couple of screen sizes.

63
00:04:08.690 --> 00:04:12.890
But here, we have hundreds
of different possibilities.

64
00:04:12.890 --> 00:04:17.040
So under that app development
has these challenges.

65
00:04:18.200 --> 00:04:21.055
So talking about Android with Kotlin.

66
00:04:21.055 --> 00:04:23.524
We're going to be building APKs.

67
00:04:23.524 --> 00:04:27.999
So that's actually our output and
APKs an Android Package.

68
00:04:27.999 --> 00:04:33.528
The Android Package is just a ZIP file
that will include your compile VM code,

69
00:04:33.528 --> 00:04:36.860
we're going to talk about
that VM in a minute.

70
00:04:36.860 --> 00:04:42.514
So your compiled code from Kotlin,
Meta data in different formats,

71
00:04:42.514 --> 00:04:46.898
there are a couple of XML and
some other things there,

72
00:04:46.898 --> 00:04:52.720
assets mean PNG files and
other formats that we will see later.

73
00:04:52.720 --> 00:04:57.096
A signature because we
are going to sign an APK and

74
00:04:57.096 --> 00:05:03.839
it's going to be installable .apk via
the Play Store or other app stores.

75
00:05:03.839 --> 00:05:08.262
And today,
the Play Store since the beginning

76
00:05:08.262 --> 00:05:12.870
of 2022 doesn't support APKs anymore.

77
00:05:12.870 --> 00:05:18.043
So we have APK, that's the output
of our building solution but

78
00:05:18.043 --> 00:05:22.450
actually, the Play Store
will need another file.

79
00:05:22.450 --> 00:05:25.330
It's called AAB, Android App Bundle.

80
00:05:26.460 --> 00:05:31.070
At the end of today's workshop, we're
going to see how to build both, okay?

81
00:05:31.070 --> 00:05:36.743
So the APK is actually the actual format
that the phone is going to take but

82
00:05:36.743 --> 00:05:41.760
the Play Store needs another format,
it's called AAB.

83
00:05:41.760 --> 00:05:44.794
And then the Play Store will build
the final APK for your users,

84
00:05:44.794 --> 00:05:45.950
that's kind of thing.

85
00:05:48.000 --> 00:05:53.883
You can also publish or distribute
your app through enterprise solutions.

86
00:05:53.883 --> 00:05:58.610
So if you're working for a company and
the company has some portals or

87
00:05:58.610 --> 00:06:03.583
system like enterprise solutions,
where they can actually ship the app

88
00:06:03.583 --> 00:06:08.416
to their employees without actually
going into the public App Store.

89
00:06:08.416 --> 00:06:13.507
And also, you can install your
APK in your device through a USB.

90
00:06:13.507 --> 00:06:16.985
We're going to see how to connect
your phone in case you have one in

91
00:06:16.985 --> 00:06:21.285
Android Studio, or other method, I mean,
I can polish the APK on your website,

92
00:06:21.285 --> 00:06:24.283
I can create my own App Store or
things like that, okay?

93
00:06:24.283 --> 00:06:28.849
So to actually make that happen,
your users need to disable some

94
00:06:28.849 --> 00:06:33.840
security rules on the phone to
install an APK from untrusted sources,

95
00:06:33.840 --> 00:06:36.820
but it's technically possible, okay?

96
00:06:38.020 --> 00:06:39.790
So that's why we're going to build,

97
00:06:39.790 --> 00:06:42.999
that's the output of our project
when we are building Android apps,

98
00:06:42.999 --> 00:06:45.840
no matter the framework or
the language that you're using.

