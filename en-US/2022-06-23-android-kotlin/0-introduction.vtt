WEBVTT

1
00:00:00.060 --> 00:00:04.420
Welcome to Introduction to Kotlin and
Android App Development.

2
00:00:04.420 --> 00:00:07.730
My name is Maximiliano Firtman,
I can go by Max.

3
00:00:07.730 --> 00:00:09.820
I know it's a long name.

4
00:00:09.820 --> 00:00:14.080
And we have a full day
creating an app on Android.

5
00:00:14.080 --> 00:00:18.800
So we're going to learn Kotlin and also a
little bit about Android app development.

6
00:00:18.800 --> 00:00:21.460
So we're going to be
building an app today.

7
00:00:21.460 --> 00:00:23.534
Really, really quickly,
I'm a mobile web developer.

8
00:00:23.534 --> 00:00:28.142
So I have been doing websites and
web app with HTML, CSS,

9
00:00:28.142 --> 00:00:33.715
JavaScript, and all the other
technologies since end of 1995.

10
00:00:33.715 --> 00:00:37.383
And also I have started doing
mobile apps in around 2001.

11
00:00:37.383 --> 00:00:40.152
So that's of course before
the Android existed.

12
00:00:40.152 --> 00:00:43.741
So I did the Java on Nokia devices, CNBM,

13
00:00:43.741 --> 00:00:48.300
Blackberries and
many other of these old phones.

14
00:00:48.300 --> 00:00:51.143
And then I have started doing
iOS applications and of course,

15
00:00:51.143 --> 00:00:52.730
Android applications.

16
00:00:52.730 --> 00:00:54.500
So I've been doing that for a lot.

17
00:00:54.500 --> 00:00:56.940
I'm from Argentina,
I'm actually living there in Buenos Aires.

18
00:00:59.280 --> 00:01:04.257
In terms of my Android experience,
I have published around 20 apps mostly for

19
00:01:04.257 --> 00:01:06.730
customers, so not on my name.

20
00:01:06.730 --> 00:01:09.946
So I've been doing consulting and
creating apps for those companies.

21
00:01:09.946 --> 00:01:17.668
I have started doing Android specific Java
development in 2012, so ten years ago.

22
00:01:17.668 --> 00:01:22.458
So on Kotlin,
when actually first started in the market,

23
00:01:22.458 --> 00:01:25.990
maybe a few months after that in 2019.

24
00:01:25.990 --> 00:01:30.760
That's all that I have for
you at this point in terms of who I am,

25
00:01:30.760 --> 00:01:32.387
it's time to start.

26
00:01:32.387 --> 00:01:37.900
So we're going to cover today,
the basics of Kotlin.

27
00:01:37.900 --> 00:01:41.210
Kotlin by the way,
it's the language that we're going to use.

28
00:01:41.210 --> 00:01:45.124
It's kind of a new language compare
with other languages that we have in

29
00:01:45.124 --> 00:01:46.240
the market.

30
00:01:46.240 --> 00:01:51.000
It appear in the past five years,
and they go into the Android Studio.

31
00:01:51.000 --> 00:01:54.479
In fact, one of their requirements for
the workshop is for

32
00:01:54.479 --> 00:01:56.810
you to install Android Studio.

33
00:01:56.810 --> 00:01:58.490
So you can go and do that right now.

34
00:01:58.490 --> 00:02:02.340
It's a free tool available for
Windows, Mac, and Linux.

35
00:02:02.340 --> 00:02:06.240
So we're going to see how to test and
debug our Android applications.

36
00:02:06.240 --> 00:02:08.500
You don't need a phone or a tablet.

37
00:02:08.500 --> 00:02:11.140
So if you don't have an Android phone,
it's okay.

38
00:02:11.140 --> 00:02:13.679
We will be able to use
the emulators as well.

39
00:02:13.679 --> 00:02:18.319
We are going to design
our app with a framework,

40
00:02:18.319 --> 00:02:22.650
a library, known as JetPack Compose.

41
00:02:22.650 --> 00:02:28.870
It's actually a new UI framework and
new UI toolkit from the Android team.

42
00:02:28.870 --> 00:02:32.436
So it's actually one of the official
ways that we have to create

43
00:02:32.436 --> 00:02:34.530
Android applications.

44
00:02:34.530 --> 00:02:38.595
So we are going to see how to navigate
between screens using this framework,

45
00:02:38.595 --> 00:02:41.644
how to work with data,
cloud integrated data model, and

46
00:02:41.644 --> 00:02:43.620
how to connect with web services.

47
00:02:43.620 --> 00:02:47.810
So we have a website, we are going
to download some data from there.

48
00:02:47.810 --> 00:02:53.480
And then we will have also a way to
communicate that app with a web app.

49
00:02:53.480 --> 00:02:57.600
So if you have a website, or a web app,
you will be able to communicate your

50
00:02:57.600 --> 00:03:00.400
Android native application
with that web app.

51
00:03:00.400 --> 00:03:05.336
So there is a way to render web apps
within an Android application and

52
00:03:05.336 --> 00:03:08.680
also to bridge Kotlin with JavaScript.

53
00:03:08.680 --> 00:03:12.430
So you can execute Kotlin from
JavaScript and vice versa.

54
00:03:12.430 --> 00:03:14.829
So that's the idea for today.

55
00:03:14.829 --> 00:03:17.777
By the way, also there,
you have the slides,

56
00:03:17.777 --> 00:03:21.179
a copy of the slides and
also an assets.zipfile, but

57
00:03:21.179 --> 00:03:26.990
it's actually in the public folder in the
repository, I will show you that later.

58
00:03:26.990 --> 00:03:30.925
Where you have some,
let's say SVG files, PNG files, and

59
00:03:30.925 --> 00:03:35.188
some other files that we are going
to use later in our app, okay?

60
00:03:35.188 --> 00:03:37.467
So the assets folder.

61
00:03:37.467 --> 00:03:42.228
And in terms of your experience, if you
have experience with any OOP language, so

62
00:03:42.228 --> 00:03:45.640
object oriented programming language,
you're okay.

63
00:03:45.640 --> 00:03:48.704
I mean, if you you're a JavaScript
developer, a Java developer,

64
00:03:48.704 --> 00:03:50.110
that's good enough.

65
00:03:50.110 --> 00:03:54.910
With that, you're ready to start working
with Kotlin and Android app development.

66
00:03:54.910 --> 00:04:00.520
Let's try to understand where we
are today in the frontend map.

67
00:04:00.520 --> 00:04:05.240
So that is, we are here frontend masters,
so we are frontenders.

68
00:04:05.240 --> 00:04:11.120
And today when you're doing frontend,
you have two main universes.

69
00:04:11.120 --> 00:04:15.479
You can make a native clients or
you can make web apps, websites or

70
00:04:15.479 --> 00:04:17.640
PWA Progressive Web Apps.

71
00:04:17.640 --> 00:04:20.870
Today, we're going to
focus on native clients.

72
00:04:20.870 --> 00:04:23.650
So we are going to create
a native client for a platform.

73
00:04:25.730 --> 00:04:28.959
When you decide to go with
native clients today,

74
00:04:28.959 --> 00:04:34.021
you can pick using official SDKs from
each platform or cross platform SDKs.

75
00:04:34.021 --> 00:04:37.432
And today, we will focus on official SDKs.

76
00:04:37.432 --> 00:04:40.917
Here, there are many platforms,
there are more than three but

77
00:04:40.917 --> 00:04:44.970
just the main three ones, Android,
Apple, Platforms on Windows.

78
00:04:44.970 --> 00:04:47.380
Today we will focus on Android,
you know that.

79
00:04:48.770 --> 00:04:52.081
And then,
here on the Android official SDK world,

80
00:04:52.081 --> 00:04:55.780
you can pick today different
languages that you can use.

81
00:04:55.780 --> 00:05:00.490
You can use Java, Kotlin, or C and C++.

82
00:05:00.490 --> 00:05:03.270
And today, we will be focusing on Kotlin.

83
00:05:03.270 --> 00:05:07.372
Actually, most of the apps
that are leading today or

84
00:05:07.372 --> 00:05:10.644
starting today are using Kotlin, okay?

85
00:05:10.644 --> 00:05:15.744
So of course you can also mix,
within one particular project, you can

86
00:05:15.744 --> 00:05:21.199
have some parts in Java, some parts
in Kotlin, and some parts in Z, okay?

87
00:05:21.199 --> 00:05:25.075
So you can actually mix all these
technologies in the same project,

88
00:05:25.075 --> 00:05:27.570
but we will be focused in Kotlin.

89
00:05:27.570 --> 00:05:32.775
And in terms of the user interface,
even if you pick Kotlin, you have several

90
00:05:32.775 --> 00:05:37.999
ways to design your application in terms
of how you build the user interface.

91
00:05:37.999 --> 00:05:41.239
We have that something that has,
it's actually unnamed, so

92
00:05:41.239 --> 00:05:43.190
we don't have a name for that.

93
00:05:43.190 --> 00:05:46.910
But typically it's known as
a classic XML user interface.

94
00:05:46.910 --> 00:05:52.144
So Android development from the beginning
was actually heavily based in XML files,

95
00:05:52.144 --> 00:05:53.690
layout files.

96
00:05:53.690 --> 00:05:55.661
That's the classic XML system.

97
00:05:55.661 --> 00:06:00.751
We have XML with JetPack,
that's something that appeared in the past

98
00:06:00.751 --> 00:06:07.780
few years also because that classic XML
system was sometimes a little problematic.

99
00:06:07.780 --> 00:06:12.486
So the Android team created a set of
libraries on that JetPack to help

100
00:06:12.486 --> 00:06:14.040
with that.

101
00:06:14.040 --> 00:06:18.698
And then we have JetPack Compose that is
actually that under that JetPack umbrella,

102
00:06:18.698 --> 00:06:21.430
but it's something completely new.

103
00:06:21.430 --> 00:06:24.000
There are no XML files here.

104
00:06:24.000 --> 00:06:28.630
So today, we're going to be
focusing there on JetPack Compose.

105
00:06:28.630 --> 00:06:33.257
That is kind of the, I don't wanna say
the current way to do Android apps because

106
00:06:33.257 --> 00:06:36.140
it's up to you if you want to use them.

107
00:06:36.140 --> 00:06:38.860
It's still new,
it's still a new UI target.

108
00:06:38.860 --> 00:06:42.470
So not every app today
is actually using it.

109
00:06:42.470 --> 00:06:47.520
But it's becoming stable enough
to start working with it.

110
00:06:47.520 --> 00:06:51.612
And some companies are starting
using it to create their own apps.

111
00:06:51.612 --> 00:06:57.113
And fortunately for us, JetPack Compose
compared with the other UI toolkits,

112
00:06:57.113 --> 00:06:59.360
it's actually simpler.

113
00:06:59.360 --> 00:07:01.570
And let us make an app in one day.

114
00:07:02.600 --> 00:07:07.546
Before JetPack Compose, I will say that
it was kind of impossible to actually

115
00:07:07.546 --> 00:07:12.300
learn Kotlin and how to actually
build an app in just one day.

116
00:07:12.300 --> 00:07:16.409
So that's our route, that's our map, okay?

117
00:07:16.409 --> 00:07:19.209
So Kotlin, Android, JetPack Compose,

118
00:07:19.209 --> 00:07:23.530
those are the three main topics
that we are going to cover today.

119
00:07:24.590 --> 00:07:29.180
So we are going to be building one app,
it's called Coffee Masters.

120
00:07:29.180 --> 00:07:32.403
The idea of the app is that,
we have a coffee shop, okay?

121
00:07:32.403 --> 00:07:33.810
For frontend masters.

122
00:07:33.810 --> 00:07:37.097
And we are going to make the app so
you can actually see the menu, and

123
00:07:37.097 --> 00:07:38.690
you can order from there.

124
00:07:38.690 --> 00:07:41.786
That's kind of the main deal of the app,
okay?

125
00:07:41.786 --> 00:07:45.700
So we are going to build
this app from scratch.

126
00:07:45.700 --> 00:07:50.180
So in the repository,
you have the steps, step by step.

127
00:07:50.180 --> 00:07:54.620
But I'm going to be building that
manually directly in Android Studio.

128
00:07:54.620 --> 00:07:58.600
So we're going to learn also how to
use Android Studio and how that works.

129
00:07:58.600 --> 00:08:01.804
So it's for a coffee store,
we're going to use JetPack Compose.

130
00:08:01.804 --> 00:08:05.725
And another important decision
that we need to make, but

131
00:08:05.725 --> 00:08:08.509
actually I already made that decision.

132
00:08:08.509 --> 00:08:12.201
Is that in terms of
the user interface today,

133
00:08:12.201 --> 00:08:16.862
you can decide to create your own UI,
your own design, or

134
00:08:16.862 --> 00:08:20.960
you can use the design
pattern from the OS, okay?

135
00:08:20.960 --> 00:08:25.555
For example, if you take TikTok,
the TikTok application is

136
00:08:25.555 --> 00:08:30.580
actually the same on iOS,
on Android, and even on the web.

137
00:08:30.580 --> 00:08:32.314
So they have their own
TikTok user interface,

138
00:08:32.314 --> 00:08:33.609
their own custom user interface.

139
00:08:33.609 --> 00:08:42.120
They're not following directly
the guidelines from each OS.

140
00:08:42.120 --> 00:08:43.930
We're going to use Material Design.

141
00:08:43.930 --> 00:08:48.746
Material Design is a set of best
practices and even some controls,

142
00:08:48.746 --> 00:08:52.610
some UI components that
we can use on Android.

143
00:08:52.610 --> 00:08:57.232
It's open source and you can actually
use it on the web, material design, and

144
00:08:57.232 --> 00:08:58.643
also on iOS if you want.

145
00:08:58.643 --> 00:09:02.348
But we are going to be
using some of the ideas and

146
00:09:02.348 --> 00:09:06.067
guidelines from
the material design system.

147
00:09:06.067 --> 00:09:09.017
And as I mentioned before,
for the project,

148
00:09:09.017 --> 00:09:14.305
you will need to download the assets that
are actually in the repository, okay?

149
00:09:14.305 --> 00:09:19.365
Because we have the icons, some images,
some logos that we are going to use.

150
00:09:19.365 --> 00:09:23.788
So we have a question on the chat
regarding picking frameworks like this

151
00:09:23.788 --> 00:09:28.655
that are like official framework versus
cross-platform development such as

152
00:09:28.655 --> 00:09:30.290
Xamarin or React Native.

153
00:09:30.290 --> 00:09:32.755
So which one to use?

154
00:09:32.755 --> 00:09:35.571
I think that there is no single answer.

155
00:09:35.571 --> 00:09:37.860
I think that it depends on the project.

156
00:09:37.860 --> 00:09:41.684
So there are projects that are suitable
for cross platform solutions,

157
00:09:41.684 --> 00:09:45.582
such as Fluter, React Native,
Native Script, Microsoft, Xamarin.

158
00:09:45.582 --> 00:09:51.920
And for other projects, it's maybe
a better idea to use Native SDKS.

159
00:09:51.920 --> 00:09:55.692
Or let's say official
SDKs from the publisher,

160
00:09:55.692 --> 00:10:00.390
such as JetPack Compose on Android or
Swift UI on iOS.

161
00:10:00.390 --> 00:10:05.100
So there are advantages and
challenges on every decision you make.

162
00:10:05.100 --> 00:10:09.940
But I don't think there is a single
answer when someone asked me,

163
00:10:09.940 --> 00:10:13.550
are you using always these or always that?

164
00:10:13.550 --> 00:10:16.810
My answer,
it typically depends on the app.

165
00:10:16.810 --> 00:10:22.430
Because there are some apps that when
you get into the cross-platform idea,

166
00:10:22.430 --> 00:10:26.080
you are getting to trouble or
lot of effort.

167
00:10:26.080 --> 00:10:28.360
And for some app, it's pretty good.

168
00:10:28.360 --> 00:10:33.275
So I think it depends on the app and
there are so many variables in that

169
00:10:33.275 --> 00:10:38.294
decision that it's difficult to
give you a straight answer, okay?

170
00:10:38.294 --> 00:10:39.880
Which one is better.

171
00:10:39.880 --> 00:10:43.880
So it depends on the case, and
the good thing about learning

172
00:10:43.880 --> 00:10:48.680
these things is that okay, you can
see these yourself or by yourself and

173
00:10:48.680 --> 00:10:53.960
then make your decision on every project
on which one do you think fits better.

