WEBVTT

1
00:00:00.060 --> 00:00:04.420
Welcome to Introduction to Kotlin and
Android App Development.

2
00:00:04.420 --> 00:00:07.730
My name is Maximiliano Firtman,
I can go by Max.

3
00:00:07.730 --> 00:00:09.734
I know it's a long name.

4
00:00:09.734 --> 00:00:13.854
And we have a full day
creating an app on Android.

5
00:00:13.854 --> 00:00:18.573
So we're gonna learn Kotlin and also a
little bit about Android app development.

6
00:00:18.573 --> 00:00:21.261
So we're gonna be building an app today.

7
00:00:21.261 --> 00:00:23.036
Really, really quickly,
I'm a mobile web developer.

8
00:00:23.036 --> 00:00:28.436
So I have been doing websites and
web app with HTML, CSS, JavaScript,

9
00:00:28.436 --> 00:00:33.481
and all the other technologies since 1995,
end of 1995.

10
00:00:33.481 --> 00:00:36.614
And also I have started doing
mobile apps in around 2001.

11
00:00:36.614 --> 00:00:40.230
So that's, of course,
before the Android existence.

12
00:00:40.230 --> 00:00:45.082
So I did Java on Nokia devices,
Symbian, Blackberries,

13
00:00:45.082 --> 00:00:48.300
and many other of these old phones.

14
00:00:48.300 --> 00:00:51.176
And then I have started doing
iOS applications and, of course,

15
00:00:51.176 --> 00:00:52.730
Android applications.

16
00:00:52.730 --> 00:00:54.500
So I've been doing that for a lot.

17
00:00:54.500 --> 00:00:55.270
I'm from Argentina.

18
00:00:55.270 --> 00:00:59.007
I'm actually living there,
in Buenos Aires.

19
00:00:59.007 --> 00:01:03.841
In terms of my Android experience,
I have published around 20 apps,

20
00:01:03.841 --> 00:01:06.672
mostly for customers, so not on my name.

21
00:01:06.672 --> 00:01:10.223
So I've been doing consulting and
creating apps for those companies.

22
00:01:10.223 --> 00:01:17.511
I have started doing Android-specific Java
development in 2012, so ten years ago.

23
00:01:17.511 --> 00:01:22.676
So on Kotlin when actually
first started in the market

24
00:01:22.676 --> 00:01:26.821
maybe a few months after that in 2019.

25
00:01:26.821 --> 00:01:30.991
That's all that I have for
you at this point in terms of who I am,

26
00:01:30.991 --> 00:01:32.422
it's time to start.

27
00:01:32.422 --> 00:01:37.660
So we're going to cover
today the basics of Kotlin.

28
00:01:37.660 --> 00:01:41.210
Kotlin, by the way,
it's the language that we're going to use.

29
00:01:41.210 --> 00:01:44.602
It's kind of a new language
compared with other languages that

30
00:01:44.602 --> 00:01:46.240
we have in the market.

31
00:01:46.240 --> 00:01:48.812
It appeared in the past five years.

32
00:01:48.812 --> 00:01:51.000
And we're going to the Android Studio.

33
00:01:51.000 --> 00:01:54.456
In fact, one of the requirements for
this workshop is for

34
00:01:54.456 --> 00:01:56.810
you to install Android Studio.

35
00:01:56.810 --> 00:01:58.490
So you can go and do that right now.

36
00:01:58.490 --> 00:02:02.340
It's a free tool available for
Windows, Mac, and Linux.

37
00:02:02.340 --> 00:02:06.240
So we're going to see how to test and
debug our Android applications.

38
00:02:06.240 --> 00:02:08.500
You don't need a phone or a tablet.

39
00:02:08.500 --> 00:02:11.140
So if you don't have an Android phone,
it's okay.

40
00:02:11.140 --> 00:02:14.187
We will be able to use
the emulators as well.

41
00:02:14.187 --> 00:02:18.736
We are going to design
our app with a framework,

42
00:02:18.736 --> 00:02:22.503
a library, known as JetPack Compose.

43
00:02:22.503 --> 00:02:28.681
It's actually a new UI framework,
a new UI toolkit from the Android team.

44
00:02:28.681 --> 00:02:31.330
So it's actually one of the official ways

45
00:02:31.330 --> 00:02:34.290
that we have to create
Android applications.

46
00:02:34.290 --> 00:02:38.450
So we are going to see how to navigate
between screens using this framework,

47
00:02:38.450 --> 00:02:40.070
how to work with data.

48
00:02:40.070 --> 00:02:43.620
How to create a data model, and
how to connect with web services.

49
00:02:43.620 --> 00:02:47.737
So we have a web service, we are going
to download some data from there.

50
00:02:47.737 --> 00:02:53.306
And then we will have also a way to
communicate that app with a web app.

51
00:02:53.306 --> 00:02:57.500
So if you have a website, or a web app,
you will be able to communicate your

52
00:02:57.500 --> 00:03:00.219
Android native application
with that web app.

53
00:03:00.219 --> 00:03:05.376
So there is a way to render web apps
within an Android application and

54
00:03:05.376 --> 00:03:08.462
also to bridge Kotlin with JavaScript.

55
00:03:08.462 --> 00:03:12.221
So you can execute Kotlin from
JavaScript and vice versa.

56
00:03:12.221 --> 00:03:15.386
So that's the idea for today.

57
00:03:15.386 --> 00:03:18.883
So I have here a repository for you.

58
00:03:18.883 --> 00:03:23.404
So if you want, you can start
downloading or cloning data repository.

59
00:03:23.404 --> 00:03:25.250
I will explain how to use it later, but

60
00:03:25.250 --> 00:03:27.521
also we have some
instructions in the read me.

61
00:03:27.521 --> 00:03:32.420
It has a local web server, so
you just need to run actually NPM,

62
00:03:32.420 --> 00:03:34.556
run DAB from the terminal.

63
00:03:34.556 --> 00:03:39.429
And that will open the local
version of the guidelines that

64
00:03:39.429 --> 00:03:43.014
we will be using during
the rest of the day.

65
00:03:43.014 --> 00:03:47.092
We're going to start using
that URL probably in an hour.

66
00:03:47.092 --> 00:03:50.886
By the way, also there,
you have the slides, a copy of the slides.

67
00:03:50.886 --> 00:03:53.243
And also an assets.zip file, but

68
00:03:53.243 --> 00:03:57.065
it's actually in the public
folder in the repository,

69
00:03:57.065 --> 00:04:01.780
I will show you that later,
where you have some let's say SVG files,

70
00:04:01.780 --> 00:04:07.257
PNG files, and some other files that we
are going to use later in our app, okay?

71
00:04:07.257 --> 00:04:09.594
So the assets folder.

72
00:04:09.594 --> 00:04:14.103
And in terms of your experience, if you
have experience with any OOP language,

73
00:04:14.103 --> 00:04:17.625
so object-oriented programming language,
you're okay.

74
00:04:17.625 --> 00:04:22.065
I mean, if you're a JavaScript developer,
a Java developer, that's good enough.

75
00:04:22.065 --> 00:04:27.040
With that, you're ready to start working
with Kotlin and Android app development.

76
00:04:27.040 --> 00:04:32.650
Let's try to understand where we
are today in the frontend map.

77
00:04:32.650 --> 00:04:37.380
So that is, we are here,
Frontend Masters, so we are frontenders.

78
00:04:37.380 --> 00:04:43.260
And today, when you are doing frontend,
you have two main universes.

79
00:04:43.260 --> 00:04:47.925
You can make native clients, or
you can make web apps, websites or PWAs,

80
00:04:47.925 --> 00:04:49.770
progressive web apps.

81
00:04:49.770 --> 00:04:52.901
Today we're going to
focus on native clients.

82
00:04:52.901 --> 00:04:57.699
So we are going to create
a native client for a platform.

83
00:04:57.699 --> 00:05:00.390
When you decide to go with native clients,

84
00:05:00.390 --> 00:05:05.945
today you can pick using the official SDKs
from each platform or cross-platform SDKs.

85
00:05:05.945 --> 00:05:09.694
And today, we will focus on official SDKs.

86
00:05:09.694 --> 00:05:13.191
Here, there are many platforms,
there are more than three, but

87
00:05:13.191 --> 00:05:16.961
just the main three ones, Android,
Apple platforms, and Windows.

88
00:05:16.961 --> 00:05:20.663
Today we will focus on Android,
you knew that.

89
00:05:20.663 --> 00:05:23.996
And then here on the Android
official SDK world,

90
00:05:23.996 --> 00:05:27.910
you can pick today different
languages that you can use.

91
00:05:27.910 --> 00:05:32.620
You can use Java, Kotlin, or C and C++.

92
00:05:32.620 --> 00:05:35.400
And today, we will be focusing on Kotlin.

93
00:05:35.400 --> 00:05:39.272
Actually, most of the apps
that are written today or

94
00:05:39.272 --> 00:05:42.960
starting today are using Kotlin, okay?

95
00:05:42.960 --> 00:05:47.946
So, of course, you can also mix within
one particular project, you can

96
00:05:47.946 --> 00:05:53.118
have some parts in Java, some parts
in Kotlin, and some parts in Z, okay?

97
00:05:53.118 --> 00:05:57.623
So you can actually mix all these
technologies in the same project, but

98
00:05:57.623 --> 00:05:59.510
we will be focused in Kotlin.

99
00:05:59.510 --> 00:06:04.720
And in terms of the user interface,
even if you pick Kotlin, you have several

100
00:06:04.720 --> 00:06:10.490
ways to design your application in terms
of how you build the user interface.

101
00:06:10.490 --> 00:06:15.306
We have something that has, it's actually
unnamed, so we don't have a name for that,

102
00:06:15.306 --> 00:06:19.050
but typically it's known as
the classic XML user interface.

103
00:06:19.050 --> 00:06:24.432
So Android development from the beginning
was actually heavily based in XML files,

104
00:06:24.432 --> 00:06:25.427
layout files.

105
00:06:25.427 --> 00:06:27.970
That's the classic XML system.

106
00:06:27.970 --> 00:06:29.978
We have XML with JetPack.

107
00:06:29.978 --> 00:06:34.665
That's something that appear in
the past few years also because

108
00:06:34.665 --> 00:06:39.910
that classic XML system was
sometimes little problematic.

109
00:06:39.910 --> 00:06:46.170
So the Android team created a set of
libraries on a JetPack to help with that.

110
00:06:46.170 --> 00:06:48.770
And then we have JetPack Compose.

111
00:06:48.770 --> 00:06:51.719
That is actually under
that JetPack umbrella, but

112
00:06:51.719 --> 00:06:53.714
it's something completely new.

113
00:06:53.714 --> 00:06:55.957
There are no XML files here.

114
00:06:55.957 --> 00:07:00.760
So today, we're going to focus
in there on JetPack Compose.

115
00:07:00.760 --> 00:07:05.456
That is kinda of the, I don't wanna say
the current way to do Android apps because

116
00:07:05.456 --> 00:07:07.740
it's up to you if you wanna use them.

117
00:07:07.740 --> 00:07:10.990
It's still a new UI toolkit.

118
00:07:10.990 --> 00:07:14.500
So not every app today
is actually using it.

119
00:07:14.500 --> 00:07:19.650
But it's becoming stable enough
to start working with it.

120
00:07:19.650 --> 00:07:23.990
And some companies are starting
using it to create their own apps.

121
00:07:23.990 --> 00:07:30.131
And fortunately for us, JetPack Compose,
compared with the other UI toolkits,

122
00:07:30.131 --> 00:07:34.499
it's actually simpler, and
let us make an app in one day.

123
00:07:34.499 --> 00:07:39.217
Before JetPack Compose,
I will say that it was kinda impossible to

124
00:07:39.217 --> 00:07:44.204
actually learn Kotlin and how to
actually build an app in just one day.

125
00:07:44.204 --> 00:07:48.369
So that's our route, that's our map, okay?

126
00:07:48.369 --> 00:07:52.384
So Kotlin, Android, JetPack Compose.

127
00:07:52.384 --> 00:07:56.554
Those are the three main topics
that we're going to cover today.

128
00:07:56.554 --> 00:08:01.117
So we are going to be building one app,
it's called Coffee Masters.

129
00:08:01.117 --> 00:08:05.892
The idea of the app is that we have
a coffee shop, okay, for Frontend Masters.

130
00:08:05.892 --> 00:08:09.587
We're going to make the app so
you can actually see the menu and

131
00:08:09.587 --> 00:08:14.011
you can order from there, that's kind
of the main deal of the app, okay?

132
00:08:14.011 --> 00:08:17.689
So we are going to build
this app from scratch.

133
00:08:17.689 --> 00:08:22.060
So in the repository you
have the step by step.

134
00:08:22.060 --> 00:08:26.593
But I'm going to be building that
manually, directly in Android Studio.

135
00:08:26.593 --> 00:08:30.519
So we're going to learn also how to
use Android Studio and how that works.

136
00:08:30.519 --> 00:08:34.887
So it's for a Coffee Store,
we're going to use JetPack Compose.

137
00:08:34.887 --> 00:08:38.991
And another important decision
that we need to make, but

138
00:08:38.991 --> 00:08:45.148
actually I already made that decision, is
that in terms of the user interface today,

139
00:08:45.148 --> 00:08:49.250
you can decide to create your own UI,
your own design, or

140
00:08:49.250 --> 00:08:52.863
you can use the design
pattern from the OS, okay?

141
00:08:52.863 --> 00:08:57.548
For example, if you take TikTok,
the TikTok application

142
00:08:57.548 --> 00:09:02.526
is actually the same on iOS,
on Android, and even on the web.

143
00:09:02.526 --> 00:09:05.968
So they have their own
TikTok user interface,

144
00:09:05.968 --> 00:09:08.537
their own custom user interface.

145
00:09:08.537 --> 00:09:14.220
They are not following directly
the guidelines from each OS.

146
00:09:14.220 --> 00:09:16.105
We are going to use material design.

147
00:09:16.105 --> 00:09:20.057
Material design is a set
of best practices and

148
00:09:20.057 --> 00:09:24.532
even some UI components
that we can use on Android.

149
00:09:24.532 --> 00:09:28.124
It's open source and actually you
can actually use it on the web,

150
00:09:28.124 --> 00:09:30.680
material design, and
also in iOS if you want.

151
00:09:30.680 --> 00:09:34.412
But we are going to be
using some of the ideas and

152
00:09:34.412 --> 00:09:38.166
guidelines from
the material design system.

153
00:09:38.166 --> 00:09:41.043
And as I mentioned before,
for the project,

154
00:09:41.043 --> 00:09:46.209
you will need to download the assets that
are actually in the repository, okay?

155
00:09:46.209 --> 00:09:51.324
Because we have the icons, some images,
some logos that they're going to use.

156
00:09:51.324 --> 00:09:55.159
So we have a question on the chat
regarding picking frameworks like

157
00:09:55.159 --> 00:09:59.955
this that are official framework versus
cross-platform development, such as,

158
00:09:59.955 --> 00:10:02.500
I don't know, Submarine or ReactNative.

159
00:10:02.500 --> 00:10:05.033
So which one to use?

160
00:10:05.033 --> 00:10:07.688
I think that there is no single answer.

161
00:10:07.688 --> 00:10:09.806
I think that depends on the project.

162
00:10:09.806 --> 00:10:13.994
So there are projects that are suitable
for cross-platform solutions such as

163
00:10:13.994 --> 00:10:17.554
Flutter, ReactNative,
NativeScript, Microsoft Submarine.

164
00:10:17.554 --> 00:10:23.531
And for other projects, it's maybe
a better idea to use Native SDKs,

165
00:10:23.531 --> 00:10:28.495
or let's say your official SDKs
from the publisher such as

166
00:10:28.495 --> 00:10:32.472
JetPack Compose on Android or
SwiftUI on iOS.

167
00:10:32.472 --> 00:10:37.602
So there are advantages and
challenges on every decision you make,

168
00:10:37.602 --> 00:10:40.939
but I don't think there
is a single answer.

169
00:10:40.939 --> 00:10:45.551
When someone ask me,
are you using always this or always that?

170
00:10:45.551 --> 00:10:48.980
My answer it's, typically,
depends on the app.

171
00:10:48.980 --> 00:10:54.313
Because there are some apps that when
you get into the cross-platform idea,

172
00:10:54.313 --> 00:10:58.210
you are getting into trouble,
or a lot of effort.

173
00:10:58.210 --> 00:11:00.490
And for some apps, it's pretty good.

174
00:11:00.490 --> 00:11:05.564
So I think it depends on the app, and
there are so many variables in that

175
00:11:05.564 --> 00:11:12.010
decision that it's difficult to give you
a straight answer on which one is better.

176
00:11:12.010 --> 00:11:14.463
So it depends on the case.

177
00:11:14.463 --> 00:11:16.684
They will think about learning the things,
that's okay.

178
00:11:16.684 --> 00:11:20.063
You can see these yourself or
by yourself and

179
00:11:20.063 --> 00:11:26.100
then make your decision on every project
on which one do you think fits better.

