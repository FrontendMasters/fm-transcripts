WEBVTT

1
00:00:00.085 --> 00:00:04.281
So, that's up to the basics of
the Android operating system and

2
00:00:04.281 --> 00:00:06.313
the architecture of our apps.

3
00:00:06.313 --> 00:00:11.124
But let's jump directly into Kotlin code.

4
00:00:11.124 --> 00:00:15.341
So Kotlin,
it's a language created by JetBrains.

5
00:00:15.341 --> 00:00:17.562
I'm not sure if you have
heard about JetBrains.

6
00:00:17.562 --> 00:00:22.414
JetBrains is a company that
originally was building IDEs.

7
00:00:22.414 --> 00:00:25.730
They have a lot of IDEs available.

8
00:00:25.730 --> 00:00:29.205
Let's jump quickly into the JetBrains

9
00:00:29.205 --> 00:00:33.946
website where you can see
all the IDEs that they have.

10
00:00:33.946 --> 00:00:37.321
They have IDEs for JavaScript or .NET.

11
00:00:37.321 --> 00:00:41.333
That's IntelliJ, WebStorm,
pine charm, PhpStorm, ReSharper,

12
00:00:41.333 --> 00:00:43.788
writer blah, blah, blah, blah, blah.

13
00:00:43.788 --> 00:00:47.358
All these IDEs are actually by JetBrains.

14
00:00:47.358 --> 00:00:51.868
And by the way,
Android Studio is by JetBrains as well.

15
00:00:51.868 --> 00:00:55.044
It's an IDE built by JetBrains,

16
00:00:55.044 --> 00:01:00.608
that Google license to JetBrains so
we can use it for free.

17
00:01:00.608 --> 00:01:07.392
But actually Android Studio is
a JetBrains IDE that we can get for free.

18
00:01:07.392 --> 00:01:10.767
So Kotlin the language was
also created by JetBrains.

19
00:01:10.767 --> 00:01:14.601
It's open source and that's why Google or

20
00:01:14.601 --> 00:01:19.616
the Android team has decided
to use it on Android, why?

21
00:01:19.616 --> 00:01:23.928
Because originally the SDK
was only available with Java.

22
00:01:23.928 --> 00:01:31.406
And actually the SDK is stacked with
Java 6 and some things, some Java 8.

23
00:01:31.406 --> 00:01:33.704
Not even Java 8 completely.

24
00:01:33.704 --> 00:01:36.109
So it was an old version of Java.

25
00:01:36.109 --> 00:01:40.264
And it was actually complicate
to actually evolve Java for

26
00:01:40.264 --> 00:01:44.684
Android mostly with a legal
fight between Oracle and Google.

27
00:01:44.684 --> 00:01:50.340
So that's why the Android team
decided to have an alternative

28
00:01:50.340 --> 00:01:55.016
that is modern and faster,
that is compatible with

29
00:01:55.016 --> 00:01:59.929
Java virtual machine Android,
and that's Kotlin.

30
00:01:59.929 --> 00:02:02.410
It's an statically typed language.

31
00:02:02.410 --> 00:02:05.211
So every variable will have a type.

32
00:02:05.211 --> 00:02:08.654
But it also contains or
supports type inference.

33
00:02:08.654 --> 00:02:12.123
So every variable will have
a type declaration, like Java,

34
00:02:12.123 --> 00:02:14.648
but sometimes we don't need to declare it.

35
00:02:14.648 --> 00:02:20.313
And the compiler will just infer the type
from the value that we are assigning.

36
00:02:20.313 --> 00:02:26.345
So at some point, it looks like
JavaScript, most of the time, okay?

37
00:02:26.345 --> 00:02:28.250
It's multi-platform.

38
00:02:28.250 --> 00:02:32.474
We are going to support only
today Kotlin for Android.

39
00:02:32.474 --> 00:02:38.438
But actually Kotlin also compiled to
Java virtue machine for back end.

40
00:02:38.438 --> 00:02:40.167
So Java Enterprise.

41
00:02:40.167 --> 00:02:46.524
Or Kotlin, can also compile into
other platforms, even the web.

42
00:02:46.524 --> 00:02:48.408
I will get into that in a minute.

43
00:02:48.408 --> 00:02:50.305
It's easy to learn.

44
00:02:50.305 --> 00:02:56.037
We can learn most of
Kotlin in just half a day.

45
00:02:56.037 --> 00:02:57.457
Better go into today.

46
00:02:57.457 --> 00:03:00.599
Yeah, of course there are some
advanced topics and ideas and

47
00:03:00.599 --> 00:03:03.256
design patterns that we
won't have time to cover.

48
00:03:03.256 --> 00:03:08.508
But most of the language can be covered
easily in half a day if you have

49
00:03:08.508 --> 00:03:13.410
experience in other modern
languages including JavaScript.

50
00:03:13.410 --> 00:03:16.945
So it has less ceremonial
compared to Java.

51
00:03:16.945 --> 00:03:21.231
I mean on Java you need to create
listeners and for listeners, you need to

52
00:03:21.231 --> 00:03:26.233
create anonymous classes with the listener
new side, shot for an on click handler.

53
00:03:26.233 --> 00:03:31.244
With this the idea is to be less
ceremonial with less bureaucracy.

54
00:03:31.244 --> 00:03:36.808
Okay, let's go and
jump directly into code that looks nice.

55
00:03:36.808 --> 00:03:41.202
It has some modern ideas
in terms of what we can do.

56
00:03:41.202 --> 00:03:43.414
Here we have a big warning.

57
00:03:43.414 --> 00:03:48.109
Kotlin include a lot of
smart ideas that sometimes

58
00:03:48.109 --> 00:03:52.709
are not available for
Android app development.

59
00:03:52.709 --> 00:03:58.273
So you will find, not today but later when
we get with more Kotlin app development,

60
00:03:58.273 --> 00:04:01.214
you can get into some architectural ideas,

61
00:04:01.214 --> 00:04:04.729
some changes that are not
working on Android, why?

62
00:04:04.729 --> 00:04:06.656
Because on Android we have a constraint.

63
00:04:06.656 --> 00:04:11.888
That's the Java built on machine or
the executable built on machine.

64
00:04:11.888 --> 00:04:13.901
They call it Android run time.

65
00:04:13.901 --> 00:04:16.834
And yeah,
we are not changing that run time, okay?

66
00:04:16.834 --> 00:04:22.526
So there are some limitations on the run
time that when you're building Kotlin for

67
00:04:22.526 --> 00:04:24.931
other platforms you don't have.

68
00:04:24.931 --> 00:04:31.311
It includes null safety, the same as other
modern languages such as Dart or Swift.

69
00:04:31.311 --> 00:04:33.189
And we'll get into that in a minute.

70
00:04:33.189 --> 00:04:37.293
We have interpreted languages,
where we ship source code,

71
00:04:37.293 --> 00:04:41.803
intermediate language,
where we ship bytecode when we compile.

72
00:04:41.803 --> 00:04:45.283
And compiled languages that we're
going to ship machine code.

73
00:04:45.283 --> 00:04:51.069
You can see Kotlin, it's actually
compatible with Bytecode and Machine Code.

74
00:04:51.069 --> 00:04:56.015
So with Kotlin we can actually
build libraries of code or

75
00:04:56.015 --> 00:05:00.446
apps that are for instance,
a 64 bit or for ARM.

76
00:05:00.446 --> 00:05:02.475
So we can actually ship binary code.

77
00:05:02.475 --> 00:05:09.232
But for Android,
we will focus only here, on bytecode.

78
00:05:09.232 --> 00:05:15.183
Because we are going to create code
that will work in the Android SDK,

79
00:05:15.183 --> 00:05:17.965
in the Android run time, okay?

80
00:05:17.965 --> 00:05:21.388
But have in mind that coding is
available for other platforms.

81
00:05:21.388 --> 00:05:26.598
So Koltlin can compile to JVM version 6,
to JVM version 8,

82
00:05:26.598 --> 00:05:32.951
to Android Java DEX executable,
that's the one that we are going to use.

83
00:05:32.951 --> 00:05:35.289
To JavaScript, look at that.

84
00:05:35.289 --> 00:05:40.444
So we have some kind of a transpiler
available that we can write Kotlin and

85
00:05:40.444 --> 00:05:43.500
compile that into JavaScript for the web.

86
00:05:43.500 --> 00:05:48.303
Also we can combine native code for
IOS, Mac OS, Android,

87
00:05:48.303 --> 00:05:51.773
Windows, Linux, and even web assembly.

88
00:05:51.773 --> 00:05:55.462
Web assembly is for
then run this in JavaScript.

89
00:05:55.462 --> 00:05:58.523
In this case when we are talking
about Native in Android, so

90
00:05:58.523 --> 00:06:02.092
what's the difference between this
Android and the other Android?

91
00:06:02.092 --> 00:06:06.333
Is that, that's actually for libraries,
not for working with the user interface.

92
00:06:06.333 --> 00:06:10.379
I mean you have a cryptographic library or
a database library,

93
00:06:10.379 --> 00:06:15.109
you can build that in native Kotlin it
ships as a native library that is more

94
00:06:15.109 --> 00:06:19.026
performant than the intermediate
language that's the BM.

95
00:06:19.026 --> 00:06:23.464
And also multi platform, so
you can actually share the same

96
00:06:23.464 --> 00:06:28.358
database that you have just created
with iOS or Mac OS or Windows.

97
00:06:28.358 --> 00:06:33.247
And just to finish this introduction
to the Kotli idea, there is something

98
00:06:33.247 --> 00:06:38.301
that they want you to know that exists and
is not what we are going to use today.

99
00:06:38.301 --> 00:06:43.631
It's called,
Kotlin Multiplatform Mobile, KMM.

100
00:06:43.631 --> 00:06:48.814
Kotlin Multiplatform Mobile is
another framework that lets

101
00:06:48.814 --> 00:06:55.225
you use Kotlin to create libraries that
you can use them on Android and iOS.

102
00:06:55.225 --> 00:07:00.339
Not user interface,
not user interfaces, just libraries.

103
00:07:00.339 --> 00:07:06.266
So your business law shake,
you can be your models, your view models.

104
00:07:06.266 --> 00:07:11.083
You can build that in Kotlin and
then use that in a normal

105
00:07:11.083 --> 00:07:15.708
Kotlin Android project or
in a Swift project on iOS.

106
00:07:15.708 --> 00:07:18.763
That's known as
Kotlin Multiplatform Mobile.

107
00:07:18.763 --> 00:07:20.783
We are close to see some code but

108
00:07:20.783 --> 00:07:24.913
before doing that let me show
you this diagram really quickly.

109
00:07:24.913 --> 00:07:29.158
So this is the current Android
app development ecosystem.

110
00:07:29.158 --> 00:07:36.032
You have Kotlin Java code that can
use Android jetpack libraries and

111
00:07:36.032 --> 00:07:41.709
those libraries can actually
talk to your Android SDK.

112
00:07:41.709 --> 00:07:45.154
So we are going to write Kotlin code.

113
00:07:45.154 --> 00:07:49.310
So our Kotlin code can use Jetpack and

114
00:07:49.310 --> 00:07:54.547
also can use directly
the API's from the SDK.

115
00:07:54.547 --> 00:07:57.040
Also you can write your own C++ code and

116
00:07:57.040 --> 00:08:01.013
connect them through something
known a Java Native Interface.

117
00:08:01.013 --> 00:08:02.607
It doesn't matter.

118
00:08:02.607 --> 00:08:06.599
So, this is the ecosystem.

119
00:08:06.599 --> 00:08:11.384
What we're going to write is just
Kotlin and maybe C++, not today but

120
00:08:11.384 --> 00:08:14.438
on another project you can also write C++.

121
00:08:14.438 --> 00:08:17.155
Today we're going to just write Kotlin.

122
00:08:17.155 --> 00:08:20.053
The rest is just part of the build, or

123
00:08:20.053 --> 00:08:24.364
part of the operating system,
is not our code, okay?

124
00:08:24.364 --> 00:08:28.950
And our code will just be Kotlin
today from that ecosystem.

125
00:08:28.950 --> 00:08:33.101
Just have in mind that that code
can talk to C++, they can talk to

126
00:08:33.101 --> 00:08:37.258
Jetpack libraries and also they
can talk to the Android SDK APIs.

127
00:08:37.258 --> 00:08:39.703
So if you wanna use Bluetooth API,

128
00:08:39.703 --> 00:08:44.270
while that's part of the Android SDK,
you can talk to that API.

129
00:08:44.270 --> 00:08:49.028
And in the APK file, so
when you're building the app,

130
00:08:49.028 --> 00:08:53.176
it will go DEX code,
DEX is Dalvik executable.

131
00:08:53.176 --> 00:08:57.393
Oops, so DEX is Dalvik executable.

132
00:08:57.393 --> 00:09:01.797
And also Jetpack; because Jetpack is
not part of the operating system.

133
00:09:01.797 --> 00:09:06.228
Jetpack is a library that
we are deciding to use.

134
00:09:06.228 --> 00:09:09.290
Its from the Android team so
it's kind of an official library but

135
00:09:09.290 --> 00:09:10.434
it's still a library.

136
00:09:10.434 --> 00:09:15.387
So that means that in your APK,
the the compiled code

137
00:09:15.387 --> 00:09:19.903
of Jetpack will also be
shipped In the package.

138
00:09:19.903 --> 00:09:23.722
And if you have C++ code,
you will have the libraries combined.

139
00:09:23.722 --> 00:09:28.342
So we have a question on
installing Android Studio and

140
00:09:28.342 --> 00:09:33.487
problems with one of the utilities,
that's called HAXM.

141
00:09:33.487 --> 00:09:39.124
So that's actually an emulator,
let's say improver, so it's a tool that

142
00:09:39.124 --> 00:09:44.247
will improve the performance of
your innovator on Intel processor.

143
00:09:44.247 --> 00:09:49.283
If you have problems in styling, you
need to read the methods that you have,

144
00:09:49.283 --> 00:09:54.809
typically have to do or your computer is
not Intel compatible for VM acceleration.

145
00:09:54.809 --> 00:09:59.075
And sometimes you need to get into
the BIOs of your computer and

146
00:09:59.075 --> 00:10:01.054
enable a built on function.

147
00:10:01.054 --> 00:10:05.720
So if that tool is not working
it shouldn't be a big deal,

148
00:10:05.720 --> 00:10:10.195
the only problem is that your
emulator will work slower

149
00:10:10.195 --> 00:10:14.395
because it's not running
directly into your CPU.

150
00:10:14.395 --> 00:10:22.250
The emulator is IBM, so it's actually will
convert To Intel and it's actually slower.

