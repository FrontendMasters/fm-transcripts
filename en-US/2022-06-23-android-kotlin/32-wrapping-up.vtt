WEBVTT

1
00:00:00.000 --> 00:00:02.966
So, today we go over a lot.

2
00:00:02.966 --> 00:00:07.923
Okay, so think about what's your knowledge

3
00:00:07.923 --> 00:00:13.277
when we started and
what's your knowledge now?

4
00:00:13.277 --> 00:00:18.602
So you will learn Kotlin, how Kotlin
looks like and work, jetpack composable,

5
00:00:18.602 --> 00:00:23.949
you know everything is a function, and
it's composable function on a preview.

6
00:00:23.949 --> 00:00:28.897
We've seen modifiers and
how we use a syntax from

7
00:00:28.897 --> 00:00:34.206
Kotlin that looks weird
the first time you see that,

8
00:00:34.206 --> 00:00:37.720
but is like naming the arguments.

9
00:00:37.720 --> 00:00:42.034
But it is actually pretty useful for
jetpack compose naming the arguments.

10
00:00:42.034 --> 00:00:46.061
Because if not, you don't know what
argument you're actually setting, okay?

11
00:00:46.061 --> 00:00:51.754
We've seen how to work with a state
management, we've seen a state hosting.

12
00:00:51.754 --> 00:00:56.469
A state health is when you
have composable that receives

13
00:00:56.469 --> 00:01:01.285
a state from the outer element,
the our composable, and

14
00:01:01.285 --> 00:01:05.014
also it sends back
changes to that element.

15
00:01:05.014 --> 00:01:09.724
So in this case, the state,
we use that in different places.

16
00:01:09.724 --> 00:01:13.540
We use the data manager with view model,
so

17
00:01:13.540 --> 00:01:17.684
it's a little bit about
how view model works.

18
00:01:17.684 --> 00:01:23.304
And downloaded Json automagically
because we've never parsed the data or

19
00:01:23.304 --> 00:01:25.364
do anything with the Json.

20
00:01:25.364 --> 00:01:30.374
We just created an array of categories and
magically it worked, okay?

21
00:01:30.374 --> 00:01:34.724
It actually downloaded the data,
consumed the web service, and

22
00:01:34.724 --> 00:01:36.869
converted that into our model.

23
00:01:36.869 --> 00:01:40.885
Have in mind, that's not part of Android,

24
00:01:40.885 --> 00:01:45.671
we injected a couple of
libraries to do that, okay?

25
00:01:45.671 --> 00:01:47.343
Do we have any final question?

26
00:01:50.461 --> 00:01:55.646
&gt;&gt; I mean, it's just completed some
before we'll be talking about like,

27
00:01:55.646 --> 00:01:58.111
no, just is there is the, I mean,

28
00:01:58.111 --> 00:02:03.818
we do all this state management through
going through Android things, right?

29
00:02:03.818 --> 00:02:08.697
Is there a way to create your own class
and just have like a, we'll be able to

30
00:02:08.697 --> 00:02:13.275
manually tell it, okay, we have a changes,
is there a way to do that?

31
00:02:13.275 --> 00:02:14.475
&gt;&gt; Let me see if I
understand the question.

32
00:02:14.475 --> 00:02:19.270
So there is, let me go back to
one slide when we weren't telling

33
00:02:19.270 --> 00:02:21.632
everything that we have here.

34
00:02:21.632 --> 00:02:25.691
So there are a couple of things that we
haven't covered today in our example,

35
00:02:25.691 --> 00:02:27.136
one is composition local.

36
00:02:27.136 --> 00:02:30.560
Composition local lets you in
check through the composition,

37
00:02:30.560 --> 00:02:33.475
remember what's the composition,
the hierarchy.

38
00:02:33.475 --> 00:02:39.639
So we can check through the composition
elements that anyone in the composition

39
00:02:39.639 --> 00:02:45.254
can use, without actually passing
the objects by arguments one by one.

40
00:02:45.254 --> 00:02:49.678
So right now, we have our data manager at
the app level, and we are passing that to

41
00:02:49.678 --> 00:02:54.319
the and then maybe the is passing
down to another one, one by one.

42
00:02:54.319 --> 00:02:55.839
Instead of doing that,

43
00:02:55.839 --> 00:03:00.551
when you have a really big composition
like a large hierarchy, you can use

44
00:03:00.551 --> 00:03:06.032
composition local to some time in check
something that goes automatically through.

45
00:03:06.032 --> 00:03:09.925
And we can use a data manager
is one example to do that.

46
00:03:09.925 --> 00:03:14.442
And there are many other design patterns
that you can use, MBBM, pipe, there

47
00:03:14.442 --> 00:03:19.175
are many design patterns, architectural
design, patterns that you can apply.

48
00:03:19.175 --> 00:03:23.167
Once you understand the basics,
then you decide, okay,

49
00:03:23.167 --> 00:03:25.534
how can we going to organize this?

50
00:03:25.534 --> 00:03:28.936
And also there are more mutable states,
so not just mutable states.

51
00:03:28.936 --> 00:03:32.919
There are many other ways to
actually create a state and

52
00:03:32.919 --> 00:03:38.478
then you detect when something changes,
so you update composable, okay?

53
00:03:38.478 --> 00:03:41.786
&gt;&gt; I was wondering if there's,
I mean this was just a simple array.

54
00:03:41.786 --> 00:03:45.427
But well, is there just wait, okay,
we checked with changing the data,

55
00:03:45.427 --> 00:03:49.441
like we changed it instead of just
keeping, modifying it to just be able to,

56
00:03:49.441 --> 00:03:52.211
&gt;&gt; I mean the whole idea of using state

57
00:03:52.211 --> 00:03:56.613
patterns is that you will
always stay with basic data.

58
00:03:56.613 --> 00:04:00.481
So most of the time it's
going to be just an array.

59
00:04:00.481 --> 00:04:05.056
Even if you have a very complex
data model, at the end,

60
00:04:05.056 --> 00:04:08.349
you will listen for basic data, okay?

61
00:04:08.349 --> 00:04:12.675
Because if not you will have probably, how
do you detect that someone has something,

62
00:04:12.675 --> 00:04:14.597
[CROSSTALK]
&gt;&gt; I wasn't trying to detect,

63
00:04:14.597 --> 00:04:18.701
I was just thinking that there's a, mike
a hook dock and, okay, there's a weight,

64
00:04:18.701 --> 00:04:20.093
there's a [CROSSTALK]
&gt;&gt; I mean,

65
00:04:20.093 --> 00:04:22.070
there are many ways in many patterns,
yeah.

66
00:04:22.070 --> 00:04:24.219
And you can do it without the pattern, and

67
00:04:24.219 --> 00:04:28.470
you can just mess with the whole structure
and the wherever you want at some point.

68
00:04:28.470 --> 00:04:31.803
But what you do have are design patterns,
okay?

69
00:04:31.803 --> 00:04:34.209
Architectural design patterns,
and there are a couple.

70
00:04:34.209 --> 00:04:38.499
Also jetpack compose,
within Android It's kind of new.

71
00:04:38.499 --> 00:04:40.324
So it's still new, okay?

72
00:04:40.324 --> 00:04:43.269
In fact, it became stable, okay?

73
00:04:43.269 --> 00:04:45.955
Immediately before the pandemic.

74
00:04:45.955 --> 00:04:52.171
So, there are still work to do,
in terms of setting design patterns.

75
00:04:52.171 --> 00:04:57.356
There are alot of design patterns that are
actually coming from other libraries and

76
00:04:57.356 --> 00:04:59.293
other ideas including react.

77
00:04:59.293 --> 00:05:03.308
But there's still work to do on that side,
okay?

78
00:05:03.308 --> 00:05:08.191
So jetpack compose is still new, they're
not so many companies apart from Google,

79
00:05:08.191 --> 00:05:09.651
using it in production.

80
00:05:09.651 --> 00:05:14.041
Or they start a new app today and they say
let's go directly with jetpack compose,

81
00:05:14.041 --> 00:05:17.729
they're testing with some screens,
with some parts of the app, okay?

82
00:05:17.729 --> 00:05:19.324
[INAUDIBLE] A new framework.

83
00:05:19.324 --> 00:05:24.300
But actually, it's the only framework
that we can actually teach in a day.

84
00:05:24.300 --> 00:05:28.969
Because to get the same experience,
the same app with

85
00:05:28.969 --> 00:05:33.969
the classic XML,
we need at least three days, atleast.

86
00:05:33.969 --> 00:05:38.551
So its actually good news that we have
a modern framework that I can lead up to

87
00:05:38.551 --> 00:05:39.582
this in one day.

88
00:05:39.582 --> 00:05:42.899
Well, I hope that now you understand
a little bit about Kotlin.

89
00:05:42.899 --> 00:05:46.737
We will check back compose and how to
create an app on Android how to test

90
00:05:46.737 --> 00:05:50.981
the app how to use the emulator, briefly,
of course that much more to cover.

91
00:05:50.981 --> 00:05:55.869
It's a really a large ecosystem,
but at least that you have like,

92
00:05:55.869 --> 00:06:01.473
all the important parts to just start
growing your experience and your app.

93
00:06:01.473 --> 00:06:06.242
So, if you publish any app in
the Play Store let me know.

94
00:06:06.242 --> 00:06:09.178
Send me the link, and I will try it, okay?

95
00:06:09.178 --> 00:06:11.794
So, thank you and see you next time.

96
00:06:11.794 --> 00:06:16.720
&gt;&gt; [APPLAUSE]

