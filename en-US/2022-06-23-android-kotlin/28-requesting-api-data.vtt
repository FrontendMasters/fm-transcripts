WEBVTT

1
00:00:00.310 --> 00:00:04.870
So, the next step is to
somehow download the data,

2
00:00:04.870 --> 00:00:08.166
create the API, okay, make sense?

3
00:00:08.166 --> 00:00:13.046
So, to do that,
we are using our frameworks.

4
00:00:13.046 --> 00:00:18.133
So, going back to the companion website,

5
00:00:18.133 --> 00:00:23.373
here I have a Kotlin file for
the API, okay?

6
00:00:23.373 --> 00:00:28.022
So again, this has to do with how
the frameworks that I picked that I

7
00:00:28.022 --> 00:00:32.009
think were the simpler frameworks,
because there are so

8
00:00:32.009 --> 00:00:37.150
many frameworks to do networking and
also JSON automatic parsing.

9
00:00:37.150 --> 00:00:41.200
There are so many, I think this
one is the simplest one, okay?

10
00:00:41.200 --> 00:00:46.600
So I'm going to create
a new Kotlin class API.

11
00:00:48.390 --> 00:00:51.040
I'm going to paste this and
now we will analyze what's going on.

12
00:00:52.220 --> 00:00:57.510
So first, we have an interface,
CoffeeMastersAPIService.

13
00:00:57.510 --> 00:01:01.530
And this is how this library works.

14
00:01:01.530 --> 00:01:04.893
You create the function, okay, and

15
00:01:04.893 --> 00:01:10.862
we annotate the function saying
that I'm going to get the service

16
00:01:10.862 --> 00:01:16.170
using the GET method,
menu.json, on this base URL.

17
00:01:16.170 --> 00:01:19.260
This is actually the JSON
that we're going to simulate.

18
00:01:19.260 --> 00:01:27.990
Look at it, so let me open Chrome because
the JSON will look better here, menu.json.

19
00:01:27.990 --> 00:01:29.831
This is the JSON that we
are going to consume.

20
00:01:29.831 --> 00:01:34.823
It has categories,
each category has product.

21
00:01:34.823 --> 00:01:40.690
Okay, it's matching our
data classes in Kotlin.

22
00:01:40.690 --> 00:01:42.407
Makes sense?

23
00:01:42.407 --> 00:01:50.040
So, what about this weird thing suspend?

24
00:01:50.040 --> 00:01:52.399
This is an advanced Kotlin concept.

25
00:01:52.399 --> 00:01:55.580
This has to do with something
known as coroutines.

26
00:01:55.580 --> 00:01:59.313
So if you wanna learn something
more about Kotlin tomorrow, go and

27
00:01:59.313 --> 00:02:01.140
learn about coroutines.

28
00:02:01.140 --> 00:02:04.363
Coroutines is a new mechanism in Kotlin,

29
00:02:04.363 --> 00:02:09.898
to actually make some kind of aising
proming, some kind of threading.

30
00:02:09.898 --> 00:02:14.030
I don't wanna say that the coroutine is
a thread, but it's kind of that, okay.

31
00:02:14.030 --> 00:02:19.580
It's a modern way, it's a different way
to work with threading and multitasking.

32
00:02:19.580 --> 00:02:24.656
Anyway, that says that this fetch
menu will actually be asynchronous,

33
00:02:24.656 --> 00:02:26.990
okay, that's kind of the idea.

34
00:02:28.040 --> 00:02:31.453
So, okay, we have the API.

35
00:02:31.453 --> 00:02:39.459
[COUGH] The next step, is to convert
our DataManager into something new.

36
00:02:39.459 --> 00:02:44.240
We are going to convert this into
something known as AndroidViewModel, okay?

37
00:02:46.150 --> 00:02:50.924
AndroidViewModel is another
framework from jetpack,

38
00:02:50.924 --> 00:02:56.170
not jetpack compose,
jetpack the general library.

39
00:02:56.170 --> 00:03:00.495
AndroidViewModel needs, so we are going
to extend from AndroidViewModel,

40
00:03:00.495 --> 00:03:04.010
we are going to be a view model,
needs an app.

41
00:03:04.010 --> 00:03:05.630
What is an app?

42
00:03:05.630 --> 00:03:07.921
It's a reference to the current app.

43
00:03:07.921 --> 00:03:14.426
So one simple way to do this is to
receive this from somewhere else.

44
00:03:14.426 --> 00:03:16.590
I don't know where the app is coming from.

45
00:03:16.590 --> 00:03:19.460
We will need to receive
that object somehow, okay?

46
00:03:19.460 --> 00:03:23.150
And we are passing that object to
the superclass, to the AndroidViewModel.

47
00:03:24.340 --> 00:03:25.340
Does it make sense?

48
00:03:25.340 --> 00:03:26.984
Just that for now.

49
00:03:26.984 --> 00:03:31.066
So we're going to use
AndroidViewModel that will

50
00:03:31.066 --> 00:03:35.600
automatically make our
code work magically, okay?

51
00:03:35.600 --> 00:03:39.839
We convert this DataManager
into a view model.

52
00:03:39.839 --> 00:03:44.764
So now, I can create a new function
in my data manager that will

53
00:03:44.764 --> 00:03:49.320
fetch the data Okay,
how to fetch the data?

54
00:03:50.560 --> 00:03:55.440
We need to call
API.menuService.fetchMenu().

55
00:03:55.440 --> 00:03:56.307
What is that?

56
00:03:56.307 --> 00:03:59.244
The function that I have just created,
where?

57
00:03:59.244 --> 00:04:02.059
In the API Kotlin file, this one.

58
00:04:02.059 --> 00:04:04.650
But there is no code here.

59
00:04:04.650 --> 00:04:10.540
The code will be automatically
be created by the framework.

60
00:04:10.540 --> 00:04:12.702
So I don't see anything, okay?

61
00:04:12.702 --> 00:04:16.034
I'm just saying, call that menu.json and

62
00:04:16.034 --> 00:04:21.720
magically retrieve me something,
that's what I'm saying here, okay?

63
00:04:23.280 --> 00:04:28.160
So, what I'm going to
do here is fetch menu.

64
00:04:28.160 --> 00:04:31.730
You can see here that little icon,
that says it's a coroutine.

65
00:04:33.310 --> 00:04:38.459
So, here comes the part where
we are not covering coroutines,

66
00:04:38.459 --> 00:04:41.090
but I'm going to show you this.

67
00:04:42.290 --> 00:04:46.529
I'm going to call something
now viewModelScope.launch.

68
00:04:49.766 --> 00:04:55.950
And this one will go actually inside,
like so, I need to import this.

69
00:04:57.020 --> 00:05:01.570
Actually, what you put inside this
code block is in a coroutine.

70
00:05:01.570 --> 00:05:04.236
That is, it's a new thread, let's say.

71
00:05:04.236 --> 00:05:08.320
This is no 100% right, but
let's say it's in a new thread.

72
00:05:08.320 --> 00:05:11.233
So we're running this in a new thread.

73
00:05:11.233 --> 00:05:16.538
Actually, I'm receiving the menu and
storing the menu in my list of categories.

74
00:05:18.716 --> 00:05:21.197
Okay, like that.

75
00:05:21.197 --> 00:05:25.661
And the next thing that I can do is,
remember the initializer block in it,

76
00:05:25.661 --> 00:05:30.270
that will be executed automatically
when you create a DataManager, well,

77
00:05:30.270 --> 00:05:31.938
I can call fetchData().

78
00:05:31.938 --> 00:05:36.589
So when we initialize the DataManager,
we go and fetch the data from the API.

79
00:05:37.970 --> 00:05:40.454
Does it make sense?

80
00:05:40.454 --> 00:05:42.677
&gt;&gt; I'm just thinking if it's asynchronous,
we have to have another hook.

81
00:05:42.677 --> 00:05:46.130
I know what happens when zombie render or
things like that or anything.

82
00:05:46.130 --> 00:05:48.018
&gt;&gt; We don't need to do anything else, why?

83
00:05:48.018 --> 00:05:52.390
Because in a new thread, this is going and
fetching the data, when the data is ready,

84
00:05:52.390 --> 00:05:54.045
it's going to change the menu.

85
00:05:54.045 --> 00:05:59.260
Because the menu is a mutable state,

86
00:05:59.260 --> 00:06:05.664
it will trigger
the recomposition of my app.

87
00:06:07.920 --> 00:06:08.884
Make sense?

88
00:06:08.884 --> 00:06:10.650
Okay, there is still one missing point.

89
00:06:10.650 --> 00:06:13.900
No one is using DataManager,
okay, at this point.

90
00:06:13.900 --> 00:06:18.581
So we actually need to somehow
create the DataManager somewhere and

91
00:06:18.581 --> 00:06:20.233
connect it somewhere.

92
00:06:20.233 --> 00:06:23.093
So the only one that can actually
create the DataManager, so

93
00:06:23.093 --> 00:06:24.900
DataManager needs the application.

94
00:06:24.900 --> 00:06:28.358
That has nothing to do
with chatbot compose,

95
00:06:28.358 --> 00:06:33.810
has to do with standard Android
application, okay, is activity.

96
00:06:33.810 --> 00:06:37.791
Remember that we have here something,
let me,

97
00:06:37.791 --> 00:06:43.370
it is a function on creating activity and
we have an app.

98
00:06:43.370 --> 00:06:49.073
Well, actually, this is the one
that can actually create here,

99
00:06:49.073 --> 00:06:51.361
the DataManager, okay?

100
00:06:51.361 --> 00:06:58.502
And then we pass the DataManager through
our composition, through our composables.

101
00:06:58.502 --> 00:07:00.022
So how do you create that?

102
00:07:00.022 --> 00:07:02.440
With this, we don't create it manually.

103
00:07:02.440 --> 00:07:04.540
We talk to a view model provider.

104
00:07:04.540 --> 00:07:06.960
Again, this has to do with a framework.

105
00:07:06.960 --> 00:07:10.170
Another framework that will
let us make this work.

106
00:07:10.170 --> 00:07:13.620
We pass this,
this is the current activity.

107
00:07:13.620 --> 00:07:18.033
Is like a reference to the current app,
the current project.

108
00:07:18.033 --> 00:07:24.421
And we actually say that
we wanna get a DataManager,

109
00:07:26.535 --> 00:07:30.200
And we need to pass a class by argument.

110
00:07:30.200 --> 00:07:35.342
In Kotlin,
to pass a class by argument double colon,

111
00:07:35.342 --> 00:07:40.826
so when you pass the type as an argument,
it's .class,

112
00:07:40.826 --> 00:07:47.020
and there are two ways to pass this,
Kotlin class or Java class.

113
00:07:47.020 --> 00:07:48.558
Because two different things.

114
00:07:48.558 --> 00:07:51.636
If you aretalking to a Java API,
you need to pass a Java class.

115
00:07:51.636 --> 00:07:53.630
And ViewModelProvider is a Java class.

116
00:07:54.980 --> 00:07:57.243
Now, we have the DataManager, but

117
00:07:57.243 --> 00:08:01.020
we need to do with the DataManager
is to pass that to our app.

118
00:08:03.490 --> 00:08:06.643
And for that,
the app needs to receive the DataManager.

119
00:08:06.643 --> 00:08:07.781
Makes sense?

120
00:08:07.781 --> 00:08:16.335
So in our app, We're going to receive
a dataManager of type DataManager.

121
00:08:16.335 --> 00:08:17.757
Makes sense?

122
00:08:17.757 --> 00:08:20.412
Who needs the DataManager?

123
00:08:20.412 --> 00:08:27.612
Remember, the DataManager is the container
for our menu and for our cart.

124
00:08:27.612 --> 00:08:31.930
&gt;&gt; Order Page.
&gt;&gt; Order Page and menu page, right,

125
00:08:31.930 --> 00:08:38.621
because it needs the items
to render those items here.

126
00:08:38.621 --> 00:08:46.166
So we are going to receive DataManager and
also in Order Page, DataManager.

127
00:08:46.166 --> 00:08:47.263
&gt;&gt; Why are you passing the class?

128
00:08:47.263 --> 00:08:48.118
Again, I'm sorry there review the class.

129
00:08:48.118 --> 00:08:49.211
&gt;&gt; Why passing what?

130
00:08:49.211 --> 00:08:52.526
&gt;&gt; The class,
go back to the main activity.

131
00:08:52.526 --> 00:09:00.970
&gt;&gt; Main activity, here, because actually
we are not the ones creating the class.

132
00:09:00.970 --> 00:09:04.000
We're asking the framework,
the framework is ViewModel.

133
00:09:04.000 --> 00:09:08.400
Again, we are just viewing
the surface of ViewModel.

134
00:09:08.400 --> 00:09:13.068
And the ViewModel is the one
that will actually play with

135
00:09:13.068 --> 00:09:18.700
multi-threading and
making our state variables work.

136
00:09:18.700 --> 00:09:20.390
So it's the one that will make the magic.

137
00:09:20.390 --> 00:09:23.784
And in this case,
we're not creating the class dataManager,

138
00:09:23.784 --> 00:09:25.971
we're asking the ViewModel to do that.

139
00:09:25.971 --> 00:09:31.008
So it inject its magic,
and it's using internally

140
00:09:31.008 --> 00:09:35.813
reflection APIs to actually
create my instances

141
00:09:35.813 --> 00:09:40.513
of my class and
it pass the class as an argument.

142
00:09:40.513 --> 00:09:41.374
&gt;&gt; Okay.
&gt;&gt; Okay, does that make sense?

143
00:09:41.374 --> 00:09:43.669
&gt;&gt; Yes, thank you.

144
00:09:43.669 --> 00:09:47.570
&gt;&gt; Okay, so
now we need to pass the dataManager,

145
00:09:50.021 --> 00:09:52.717
Like so.

146
00:09:52.717 --> 00:09:58.660
There are other ways to do this instead of
passing an object through the composition,

147
00:09:58.660 --> 00:10:02.471
through the hierarchy, but
this is the simplest way.

148
00:10:02.471 --> 00:10:05.091
So, any question at this point?

149
00:10:11.033 --> 00:10:13.674
Nope, I think there is an arrow here.

150
00:10:13.674 --> 00:10:16.502
Well, now we have problems
with the previews,

151
00:10:16.502 --> 00:10:19.835
because they will need to
pass the DataManager, okay?

152
00:10:19.835 --> 00:10:25.724
So for now,
I can command those previews, yeah?

153
00:10:25.724 --> 00:10:28.093
&gt;&gt; The coroutine that you're
creating was that get.

154
00:10:28.093 --> 00:10:29.605
Is that gonna wait for

155
00:10:29.605 --> 00:10:33.725
that thread to finish before
moving on to the next thread?

156
00:10:33.725 --> 00:10:39.996
&gt;&gt; So coroutines are functions
that can execute simultaneously.

157
00:10:39.996 --> 00:10:43.774
That doesn't mean that there are threads,
so this is coroutines

158
00:10:43.774 --> 00:10:48.183
this is an enzyme from Kotlin, okay,
that will manage that individually.

159
00:10:48.183 --> 00:10:53.776
So if you open five coroutines, that
doesn't mean that you have five threads.

160
00:10:53.776 --> 00:10:57.494
Maybe they're all executed
in the same thread and

161
00:10:57.494 --> 00:11:02.285
it manages automatically
the execution of the content inside.

162
00:11:02.285 --> 00:11:07.421
So coroutine is a complex,
let's say concept.

163
00:11:07.421 --> 00:11:10.070
That doesn't mean that you won't
be able to understand that.

164
00:11:10.070 --> 00:11:14.140
I mean that you have just learned Kotlin
for the first time a few hours ago.

165
00:11:14.140 --> 00:11:20.579
And it needs your brain to process
first other things to get the idea,

166
00:11:20.579 --> 00:11:26.255
but it's kind of a mix between
threading and acing framing.

167
00:11:26.255 --> 00:11:27.930
It's mixing both, okay?

168
00:11:27.930 --> 00:11:30.044
It's actually really powerful.

169
00:11:30.044 --> 00:11:35.360
So what it's doing in here is that, it's
not like that coroutine will wait, okay?

170
00:11:35.360 --> 00:11:37.200
But it's not messing with my main thread.

171
00:11:39.530 --> 00:11:45.897
When the data comes from the network, it
will automatically, I believe, my state.

172
00:11:45.897 --> 00:11:50.050
And when that happens,
probably, my UI will elaborate.

173
00:11:50.050 --> 00:11:51.785
That's kind of the goal.

174
00:11:51.785 --> 00:11:57.873
&gt;&gt; I mean, in this case, the user has to,
I mean, because I'm thinking of something,

175
00:11:57.873 --> 00:12:01.530
the user can interact before things load,
right?

176
00:12:01.530 --> 00:12:04.770
&gt;&gt; Exactly, if you try to do
network on the main thread,

177
00:12:04.770 --> 00:12:06.920
you may have problems like that.

178
00:12:06.920 --> 00:12:11.784
The only good news about Android is
Android won't let you do networking

179
00:12:11.784 --> 00:12:13.720
on the main thread.

180
00:12:13.720 --> 00:12:14.970
It creates an exception.

181
00:12:14.970 --> 00:12:18.954
If you try to access the network in
the main thread, there is an exception,

182
00:12:18.954 --> 00:12:21.926
network main thread exception
to avoid that, okay, so

183
00:12:21.926 --> 00:12:24.920
you won't be able to
actually make it work.

184
00:12:24.920 --> 00:12:29.560
So we work my code, I mean,
I'm not doing anything yet.

185
00:12:29.560 --> 00:12:33.490
But just to see if some
data quickly appears.

186
00:12:33.490 --> 00:12:38.143
Well, I can use the console to print
something or in the menu, but of course,

187
00:12:38.143 --> 00:12:40.160
we are going to update this.

188
00:12:40.160 --> 00:12:42.980
I don't need the preview now,
that is giving me an error.

189
00:12:42.980 --> 00:12:46.347
In the menu, I can, for example,

190
00:12:46.347 --> 00:12:50.764
put a text with dataManager.menu.count,

191
00:12:50.764 --> 00:12:55.090
count is the length of a list, okay?

192
00:12:55.090 --> 00:12:56.420
But it's an integer.

193
00:12:57.470 --> 00:12:59.795
How can I quickly convert
this into a string?

194
00:12:59.795 --> 00:13:04.539
toString, or
I can put this into any a string with

195
00:13:04.539 --> 00:13:09.537
an expression, with a template,
okay, like so.

196
00:13:11.719 --> 00:13:15.431
Okay, I need to put this into an item,

197
00:13:15.431 --> 00:13:21.250
because the lazy column needs
things with an item or items.

198
00:13:23.160 --> 00:13:28.646
Okay, and here, what's the arrow here?

199
00:13:28.646 --> 00:13:31.334
Count, now, list.

200
00:13:33.458 --> 00:13:38.024
The menu is the list of categories.

201
00:13:38.024 --> 00:13:45.230
Cut, cool, just to see if it's doing
something, this is not the final goal.

202
00:13:45.230 --> 00:13:47.927
But this is not gonna work, why?

203
00:13:47.927 --> 00:13:51.269
Android applications,
by default, are offline.

204
00:13:52.861 --> 00:13:55.310
So you cannot actually access the network.

205
00:13:56.710 --> 00:14:00.060
If you try to do that,
you will get a security exception.

206
00:14:00.060 --> 00:14:02.952
So we need to ask permission, where?

207
00:14:02.952 --> 00:14:06.690
In the manifest file,
in the AndroidManifest file.

208
00:14:06.690 --> 00:14:09.760
Here at the top,
we go to AndroidManifest.xml.

209
00:14:10.860 --> 00:14:18.276
And this is an XML, it's really long, but
in an empty place within the root element,

210
00:14:18.276 --> 00:14:22.609
we open and
we need to add a tag uses-permission.

211
00:14:24.040 --> 00:14:25.998
Okay, the tag is uses-permission.

212
00:14:25.998 --> 00:14:31.163
And you will have a list of
permissions that we can request and

213
00:14:31.163 --> 00:14:35.123
the first one is INTERNET access,
like that.

214
00:14:36.725 --> 00:14:41.696
Okay, so
that will add permission to Internet.

