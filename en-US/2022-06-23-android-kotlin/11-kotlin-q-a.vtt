WEBVTT

1
00:00:00.460 --> 00:00:01.930
Do you have any question at this point?

2
00:00:03.150 --> 00:00:10.250
&gt;&gt; I'm kinda a little bit lost on SDKs and
compiling to Android.

3
00:00:10.250 --> 00:00:13.052
I can't remember what slide it was off of.

4
00:00:13.052 --> 00:00:16.372
&gt;&gt; Let's see, so we were here.

5
00:00:18.037 --> 00:00:20.039
This.

6
00:00:20.039 --> 00:00:25.470
So we are actually building for
Android Java DEX.

7
00:00:25.470 --> 00:00:27.365
So that means that this is our target,

8
00:00:27.365 --> 00:00:31.400
when we are going to create Android
applications, okay, with Kotlin.

9
00:00:31.400 --> 00:00:37.150
So we are kind of constrained
by that framework, that runtime.

10
00:00:39.530 --> 00:00:42.747
But if you do Kotlin for
any of the other targets,

11
00:00:42.747 --> 00:00:45.269
you don't have those restrictions.

12
00:00:46.751 --> 00:00:48.030
Does that make sense?

13
00:00:49.937 --> 00:00:55.050
So Kotlin is like a second layer
on top of Java for Android.

14
00:00:56.550 --> 00:01:00.071
It's not getting rid of Java,
it's sitting on top of Java.

15
00:01:00.071 --> 00:01:05.016
So actually everything we do in Kotlin
will actually need to be compiled into

16
00:01:05.016 --> 00:01:10.054
some kind of a Java intermediate language
that is called Dalvik Executable.

17
00:01:10.054 --> 00:01:14.160
So we are restricted by what
that platform can offer.

18
00:01:14.160 --> 00:01:16.960
&gt;&gt; And when we're compiling to
what you're saying native Android,

19
00:01:16.960 --> 00:01:18.160
can you clear that up for me?

20
00:01:18.160 --> 00:01:23.450
&gt;&gt; Yeah, if you compile to native Android,
actually you cannot talk to the SDK.

21
00:01:23.450 --> 00:01:24.750
Let me me show you.

22
00:01:24.750 --> 00:01:28.526
Going back to a previous slide,
when we were talking about the Android

23
00:01:28.526 --> 00:01:33.180
architecture, Where are you?

24
00:01:33.180 --> 00:01:36.771
Nope, it wasn't a previous slide,
it was here.

25
00:01:36.771 --> 00:01:41.695
So if you're compiling to Android native,

26
00:01:41.695 --> 00:01:46.220
you're actually compiling to the NDK,

27
00:01:46.220 --> 00:01:51.684
the pink one to the right,
not to the normal SDK.

28
00:01:51.684 --> 00:01:56.210
Which means that when you are doing that,
if you look at the arrows, the pink is

29
00:01:56.210 --> 00:02:00.818
talking directly to Native Libraries,
not to the Android SDK and UI toolkits.

30
00:02:00.818 --> 00:02:06.051
Which means you cannot make your UI,
unless you wanna render

31
00:02:06.051 --> 00:02:11.310
your UI manually with lines and
circles or on the screen.

32
00:02:11.310 --> 00:02:16.837
If you wanna use the button and
actually the components from the SDK,

33
00:02:16.837 --> 00:02:21.230
you must compile Kotlin code for
the Android Runtime.

34
00:02:22.300 --> 00:02:28.139
If you go Kotlin native with the NDK,
you can only talk to the native

35
00:02:28.139 --> 00:02:33.790
libraries of the OS, and
that's not including the UI toolkit.

36
00:02:33.790 --> 00:02:38.524
So meaning that, we will focus here,

37
00:02:40.233 --> 00:02:44.040
Okay, on the Android Java DEX,

38
00:02:44.040 --> 00:02:48.274
at least when we are working in app.

39
00:02:48.274 --> 00:02:55.740
You can still use Kotlin for native,
okay, but that means it's not the UI part.

40
00:02:55.740 --> 00:03:00.774
It's other parts of your app that
can be business logic libraries,

41
00:03:00.774 --> 00:03:04.230
again, talking about encoding, decoders.

42
00:03:04.230 --> 00:03:08.180
I mean, if you're doing a Netflix
application, you want the decoder,

43
00:03:08.180 --> 00:03:12.453
the video decoder, well, that can be done
in Kotlin with a native library that

44
00:03:12.453 --> 00:03:14.434
is faster and also multi platform.

45
00:03:14.434 --> 00:03:18.829
So you can actually compile to iOS
as well, and to Windows as well, and

46
00:03:18.829 --> 00:03:23.270
then you write once,
deliver that library everywhere.

47
00:03:23.270 --> 00:03:24.050
&gt;&gt; Thank you.

48
00:03:24.050 --> 00:03:29.210
&gt;&gt; Okay, but for the app, if you wanna
use the UI toolkit, we must use Java DEX.

49
00:03:29.210 --> 00:03:33.507
&gt;&gt; Someone in the chat wanted to know if
you could review what triple quotes helps

50
00:03:33.507 --> 00:03:34.910
you with.

51
00:03:34.910 --> 00:03:35.580
&gt;&gt; Simple quote?

52
00:03:37.120 --> 00:03:38.850
&gt;&gt; Triple double quotes, okay, sure.

53
00:03:40.220 --> 00:03:45.750
So triple double quotes, it's actually
being used for multi line strings.

54
00:03:45.750 --> 00:03:51.855
So that means that you can put new lines
here, okay, and everything is a string,

55
00:03:53.728 --> 00:03:58.856
Okay, you can still use dollar
sign to create an expression,

56
00:03:58.856 --> 00:04:03.107
so that's also possible,
but within multi line.

57
00:04:03.107 --> 00:04:10.308
Okay, you can write HTML like this in
Kotlin quickly in just multi lines.

58
00:04:10.308 --> 00:04:13.252
Without this technique you
need to use close the line,

59
00:04:13.252 --> 00:04:16.138
concatenate with another string,
another string.

60
00:04:16.138 --> 00:04:20.530
So triple double quotes will let
you make multi line strings.

61
00:04:20.530 --> 00:04:22.160
&gt;&gt; And quotes work within that?

62
00:04:22.160 --> 00:04:28.970
&gt;&gt; Yeah, and single, double quotes will
work without, I don't need to escape them.

63
00:04:30.040 --> 00:04:31.510
I don't need to do this.

64
00:04:31.510 --> 00:04:36.588
So that's why I will say that for
JSON or for HTML, it's actually useful

65
00:04:36.588 --> 00:04:42.950
if you wanna write HTML here, like I have
a paragraph with class, myparagraph.

66
00:04:42.950 --> 00:04:47.050
So it just works,
I don't need to escape quotes

67
00:04:47.050 --> 00:04:51.760
because it will wait for
the triple double quotes.

68
00:04:51.760 --> 00:04:56.880
This trimIndent will actually remove

69
00:04:56.880 --> 00:05:02.000
in the final string all these spaces.

70
00:05:06.055 --> 00:05:08.151
If you don't want it, you can just.

71
00:05:08.151 --> 00:05:11.060
This was created by the IDE by default,
I don't need that.

72
00:05:11.060 --> 00:05:15.581
But when you use triple quotes,
enter, it automatically adds that

73
00:05:15.581 --> 00:05:20.520
because typically we don't want those
initial tabs in the final string.

