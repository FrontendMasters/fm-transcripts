WEBVTT

1
00:00:00.050 --> 00:00:03.500
So, the last section that
we have here is Info.

2
00:00:03.500 --> 00:00:07.540
The idea of Info is to put here a Web app,
okay?

3
00:00:07.540 --> 00:00:09.790
Just to play a little bit with Web apps.

4
00:00:09.790 --> 00:00:14.767
In case you have a react application, a
bar Vanilla JS application, a website, and

5
00:00:14.767 --> 00:00:18.497
you wanna integrate this with your app,
you can use a WebView.

6
00:00:18.497 --> 00:00:22.608
A WebView is some kind of a browser
in this case it's chromium on

7
00:00:22.608 --> 00:00:24.638
most of the Android out there.

8
00:00:24.638 --> 00:00:28.362
It's a chromium engine that we
can embed in our app, okay?

9
00:00:28.362 --> 00:00:29.814
What's the problem?

10
00:00:29.814 --> 00:00:33.674
Jetpack Compose does
not support a WebView.

11
00:00:33.674 --> 00:00:38.513
So it's also an opportunity before
finishing the worship, to see how we can

12
00:00:38.513 --> 00:00:43.550
integrate, Android standard classic
views into Jetpack Compose.

13
00:00:43.550 --> 00:00:45.560
It's not complicated, okay?

14
00:00:45.560 --> 00:00:49.961
So if we go to Info page,
right now it's empty remember,

15
00:00:49.961 --> 00:00:53.090
this is a composable that we did before.

16
00:00:54.800 --> 00:01:00.210
So, it also in the companion website,
you have the code.

17
00:01:00.210 --> 00:01:03.080
I don't need to like
copy the whole section.

18
00:01:03.080 --> 00:01:04.817
It says using WebView.

19
00:01:04.817 --> 00:01:07.865
But here you have in case you want
to play with us really quickly.

20
00:01:07.865 --> 00:01:12.316
What we need to create
is our own composable,

21
00:01:12.316 --> 00:01:20.059
let's create a composer remember you
type comp tab then go in WebView, okay?

22
00:01:20.059 --> 00:01:25.081
Like so and here we are going to
declare the URL that we will load,

23
00:01:25.081 --> 00:01:30.196
that I will take it from firtman,
let me minimize the emulator for

24
00:01:30.196 --> 00:01:37.150
a minute, github.io coffee masters web
app, that's the URL that I will load.

25
00:01:37.150 --> 00:01:40.907
And here comes the part that creates
a bridge between two universes,

26
00:01:40.907 --> 00:01:45.118
between not yet the Web app, I'm talking
about the Jetpack compose universe

27
00:01:45.118 --> 00:01:48.240
with the classic Android view universe.

28
00:01:48.240 --> 00:01:50.484
And we're going to say is this,

29
00:01:50.484 --> 00:01:54.570
we're going to use a composer
well known as Android View.

30
00:01:56.390 --> 00:02:01.692
It's a composable that lets you
put an Android classic view here.

31
00:02:01.692 --> 00:02:05.976
And here there is a factory property with,

32
00:02:05.976 --> 00:02:14.720
let's say lambda expression where we
are going to render the WebView, okay?

33
00:02:14.720 --> 00:02:19.599
So the WebView is actually something
that we are going to import, okay?

34
00:02:19.599 --> 00:02:26.328
We need to be careful here because this is
called WebView and it might be a trick.

35
00:02:26.328 --> 00:02:30.960
So we can call this my
WebView if you want, so

36
00:02:30.960 --> 00:02:35.356
then we can import the WebView from here.

37
00:02:35.356 --> 00:02:39.400
The WebView will receive, a context.

38
00:02:39.400 --> 00:02:40.766
We know what the context is?

39
00:02:40.766 --> 00:02:44.687
But this is something from classic
Android development that we receive it as

40
00:02:44.687 --> 00:02:46.048
an argument here, okay?

41
00:02:46.048 --> 00:02:50.050
We just say we're going to construct
the WebView without context.

42
00:02:50.050 --> 00:02:53.990
Something that we are going to apply
a couple of functions over it.

43
00:02:53.990 --> 00:02:59.120
Here I'm going to write a little
bit of Android classic UI, okay?

44
00:02:59.120 --> 00:03:02.422
So it has nothing to do with Jetpack
Compose, we will look a little weird.

45
00:03:02.422 --> 00:03:06.170
We're going to define some
property known as layout params.

46
00:03:08.160 --> 00:03:09.610
That is actually this.

47
00:03:09.610 --> 00:03:13.381
I will explain this in a minute and
you will understand what's going on.

48
00:03:13.381 --> 00:03:17.435
ViewGroup, we're going
to take LayoutParams,

49
00:03:17.435 --> 00:03:20.915
MATCH_PARENT and MATCH_PARENT twice.

50
00:03:20.915 --> 00:03:27.465
So this is actually MATCH_PARENT is
a way to define Android classic UI.

51
00:03:27.465 --> 00:03:34.557
To say that we want my view, my width, and
my height, should match my parents, okay?

52
00:03:34.557 --> 00:03:35.771
Makes sense?

53
00:03:35.771 --> 00:03:41.748
This is like the fill max width
modifier that we have here.

54
00:03:41.748 --> 00:03:47.155
And then I'm going to create
a new WebView client,

55
00:03:47.155 --> 00:03:54.336
like so in case you use these to,
we don't actually need to do this.

56
00:03:54.336 --> 00:03:55.839
How to customize the WebView.

57
00:03:55.839 --> 00:03:59.853
For example, if you want to disable
JavaScript for security, you can do that.

58
00:03:59.853 --> 00:04:03.484
So in this case,
you use the WebView only for

59
00:04:03.484 --> 00:04:07.129
static content, HTML, or CSS animation.

60
00:04:07.129 --> 00:04:10.765
Maybe you have an animation that you like
in CSS, but you don't want JavaScript.

61
00:04:10.765 --> 00:04:13.293
So you don't want anyone to inject code.

62
00:04:13.293 --> 00:04:15.108
So you disable JavaScript.

63
00:04:15.108 --> 00:04:17.979
And then we load the URL.

64
00:04:17.979 --> 00:04:23.790
The URL that we have set before,
like so, okay?

65
00:04:23.790 --> 00:04:29.832
And also typically you also need to
define an update lambda expression.

66
00:04:29.832 --> 00:04:33.220
If you want to let me see if I have,

67
00:04:33.220 --> 00:04:37.466
I need to close another one, like there.

68
00:04:37.466 --> 00:04:40.670
So actually this is a factory.

69
00:04:40.670 --> 00:04:43.820
So the first time is going
to execute this code.

70
00:04:43.820 --> 00:04:48.991
But what happens if for
some reason Jetpack Compose, it's removing

71
00:04:48.991 --> 00:04:54.531
you from the screen and putting you later,
it's calling you the update.

72
00:04:54.531 --> 00:04:59.206
So typically what you want to do
here is the take the WebView that we

73
00:04:59.206 --> 00:05:04.140
receive as an argument, it, and
we're going to load the URL again.

74
00:05:05.240 --> 00:05:05.938
I mean, just in case.

75
00:05:08.320 --> 00:05:09.620
So this is my WebView.

76
00:05:09.620 --> 00:05:13.224
So now in my info page,
we can pull the WebView.

77
00:05:13.224 --> 00:05:17.996
So that means that if you have,
let's say that you have already

78
00:05:17.996 --> 00:05:22.962
an app created with Android
standard classic UI toolkit, okay?

79
00:05:22.962 --> 00:05:29.335
So, you can integrate everything that has
been done there, with Jetpack Compose.

80
00:05:29.335 --> 00:05:33.927
Instead of WebView here you're going
to create something different,

81
00:05:33.927 --> 00:05:35.539
the class that you want.

82
00:05:35.539 --> 00:05:41.177
So if I run this, and
I go to info, this is loading

83
00:05:41.177 --> 00:05:47.243
a web page with JavaScript
with everything inside.

84
00:05:47.243 --> 00:05:51.767
And you can bridge JavaScript
through Kotlin and

85
00:05:51.767 --> 00:05:56.297
Kotlin to JavaScript in case you want to,
okay?

86
00:05:56.297 --> 00:05:57.892
Any question, on the WebView?

87
00:06:01.747 --> 00:06:08.119
&gt;&gt; I mean for enterprise application
you're gonna have security on both sides.

88
00:06:08.119 --> 00:06:12.682
And so maybe you could do single
sign-on with something like this,

89
00:06:12.682 --> 00:06:17.100
you pass in some session cookies,
you can sign into your app you-

90
00:06:17.100 --> 00:06:18.832
&gt;&gt; So single sign-on, for

91
00:06:18.832 --> 00:06:24.600
example using URL 2.0 or something,
that is one use case for using a WebView.

92
00:06:24.600 --> 00:06:25.470
Yeah sure.

93
00:06:25.470 --> 00:06:30.504
Another use case is to for example, as I
mentioned before animations are Media,

94
00:06:30.504 --> 00:06:34.143
that are more complicated to
make directly with Android.

95
00:06:34.143 --> 00:06:38.445
And you already have some things
done in JavaScript or again,

96
00:06:38.445 --> 00:06:43.574
the little game that is already written
in JavaScript, and also that part

97
00:06:43.574 --> 00:06:49.070
of that little game or banners,
it's been used for ads a lot, WebView.

98
00:06:49.070 --> 00:06:51.059
You can share the same ad with IOS,

99
00:06:51.059 --> 00:06:54.730
with Android because the web
pad will work everywhere.

100
00:06:54.730 --> 00:06:59.110
And then use a WebView us that in fact,
when you see an app that has an ad at

101
00:06:59.110 --> 00:07:02.620
the bottom or at the top,
typically that ad is a WebView.

102
00:07:04.420 --> 00:07:09.248
Because it's simply a more multi
platform to create ads in HTML, CSS and

103
00:07:09.248 --> 00:07:12.583
JavaScript than making
something making a view,

104
00:07:12.583 --> 00:07:16.529
&gt;&gt; Okay, for Android or for iOS?

105
00:07:16.529 --> 00:07:21.470
&gt;&gt; The other use case is for
making a Hybrid.

106
00:07:21.470 --> 00:07:25.646
A Hybrid is an app that is half Native and
half Web.

107
00:07:25.646 --> 00:07:29.468
So some parts of the app is react based or
documentation.

108
00:07:29.468 --> 00:07:34.062
There are many apps when you open
the help, or the documentation,

109
00:07:34.062 --> 00:07:40.400
it's a web app or support a section chat
with us, where the chat is a WebView.

110
00:07:40.400 --> 00:07:44.540
So it opens a WebView with
a web chat application.

111
00:07:44.540 --> 00:07:49.027
So there are many use cases,
of course when you open a web browser,

112
00:07:49.027 --> 00:07:53.358
you have some security concerns,
some memory usage concerns so

113
00:07:53.358 --> 00:07:57.927
it's using more memory than before
because now there is an engine,

114
00:07:57.927 --> 00:08:02.925
like a chrome, a full chrome engine
running with your app as well, okay?

115
00:08:02.925 --> 00:08:06.846
So, you have some challenges,
everything is not an advantage,

116
00:08:06.846 --> 00:08:08.930
you have some challenges as well.

