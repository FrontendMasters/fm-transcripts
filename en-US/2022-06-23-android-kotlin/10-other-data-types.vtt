WEBVTT

1
00:00:00.150 --> 00:00:03.193
So classes don't have a static member.

2
00:00:03.193 --> 00:00:06.697
You know what a static member is of
a class in Java or other languages?

3
00:00:06.697 --> 00:00:11.212
Where you apply functions and
constants or variables,

4
00:00:11.212 --> 00:00:16.790
to the class itself like global members,
instead of two instances.

5
00:00:16.790 --> 00:00:21.412
But here in Kotlin,
what we do have is an object within

6
00:00:21.412 --> 00:00:25.634
the class known as the companion object,
okay?

7
00:00:25.634 --> 00:00:27.209
So we have a class and

8
00:00:27.209 --> 00:00:32.417
each class has a companion object
that goes with the class, okay?

9
00:00:32.417 --> 00:00:34.987
So we are together in this life, and

10
00:00:34.987 --> 00:00:39.703
the companion object is an object
with variables, constants and

11
00:00:39.703 --> 00:00:44.866
functions, that then you can apply
to the class and not to the options.

12
00:00:44.866 --> 00:00:48.164
For example,
we have the printAll in the user class.

13
00:00:48.164 --> 00:00:51.817
So the companion object
is the static of Java.

14
00:00:51.817 --> 00:00:56.377
Everything you put in the companion
object, it's available

15
00:00:56.377 --> 00:01:01.299
through the class name, and
not through instances of that class.

16
00:01:01.299 --> 00:01:03.339
Does it make sense?

17
00:01:03.339 --> 00:01:04.735
&gt;&gt; So it's not an inner class?

18
00:01:04.735 --> 00:01:05.792
&gt;&gt; It's not an inner class, no.

19
00:01:05.792 --> 00:01:08.032
It's an object so it's an instance,

20
00:01:08.032 --> 00:01:11.962
when you see the object keyword
it's an instance, not the class.

21
00:01:11.962 --> 00:01:16.230
So what we put inside is actually

22
00:01:16.230 --> 00:01:21.452
an object that is applied to the class.

23
00:01:21.452 --> 00:01:23.803
&gt;&gt; So its like an anonymous object?

24
00:01:23.803 --> 00:01:29.505
&gt;&gt; It's like an anonymous object, yeah,
but you can have only one over the class.

25
00:01:29.505 --> 00:01:35.658
And actually, there are ways to convert
Kotlin to Java and Java to Kotlin, okay?

26
00:01:35.658 --> 00:01:40.698
In fact, fun fact,
if you look for some Java code,

27
00:01:40.698 --> 00:01:46.220
Java code for, I don't know,
whatever, algorithm.

28
00:01:46.220 --> 00:01:49.641
Let me see if I can see some code quickly.

29
00:01:49.641 --> 00:01:51.588
These are Java, right?

30
00:01:51.588 --> 00:01:53.472
So if I copy Java code, and

31
00:01:53.472 --> 00:01:57.591
I am not sure if it's gonna
work in this file, let me try.

32
00:01:57.591 --> 00:01:58.490
Yeah, it works.

33
00:01:58.490 --> 00:02:02.699
So when you paste Java
code into a Kotlin file,

34
00:02:04.960 --> 00:02:09.165
And the studio is automatically
converting that Java code into Kotlin.

35
00:02:09.165 --> 00:02:14.352
Even we could see how that changes,
because it's interchangeable if you want.

36
00:02:14.352 --> 00:02:19.053
So, when you are moving
from Kotlin to Java,

37
00:02:19.053 --> 00:02:25.251
the companion object becomes
static members of the class.

38
00:02:25.251 --> 00:02:30.753
So collection, it's actually a property,

39
00:02:30.753 --> 00:02:34.090
a static property of user.

40
00:02:34.090 --> 00:02:38.228
I'm simplifying the explanation,
but it's kind of what's going on.

41
00:02:38.228 --> 00:02:41.921
&gt;&gt; So somewhere in there,
you can do user.collection operate on it?

42
00:02:41.921 --> 00:02:43.046
&gt;&gt; Yep.

43
00:02:43.046 --> 00:02:44.306
&gt;&gt; Within the class?

44
00:02:44.306 --> 00:02:46.537
&gt;&gt; Within the class or
outside of the class,

45
00:02:46.537 --> 00:02:49.227
because there is the companion
object is public.

46
00:02:49.227 --> 00:02:53.761
So unless you make something private,
implicitly you can.

47
00:02:53.761 --> 00:02:59.401
But outside, I can do this, or
here I can also access the collection.

48
00:02:59.401 --> 00:03:01.508
I don't need the prefix user, but

49
00:03:01.508 --> 00:03:06.313
having in mind that collection I will
actually be available for all the users.

50
00:03:06.313 --> 00:03:11.997
So all the users are sharing
the companion object is one object for

51
00:03:11.997 --> 00:03:13.968
all the users, okay.

52
00:03:13.968 --> 00:03:19.692
So, all the instances of that class will
have access to the same companion object.

53
00:03:19.692 --> 00:03:23.464
&gt;&gt; And that will be initialized
when the class is initialized?

54
00:03:23.464 --> 00:03:26.153
&gt;&gt; Yeah, the companion object
it's automatically created when

55
00:03:26.153 --> 00:03:27.326
the class is initialized.

56
00:03:27.326 --> 00:03:32.893
Actually, when you start the app,
because you don't need to use the class.

57
00:03:32.893 --> 00:03:37.020
You don't need to create
instances of the class, Okay?

58
00:03:37.020 --> 00:03:38.138
So, it's like a global.

59
00:03:38.138 --> 00:03:42.093
The same happens with static methods.

60
00:03:42.093 --> 00:03:45.102
In JavaScript, so if you're coming
from JavaScript, this is like,

61
00:03:45.102 --> 00:03:47.909
I don't know if you create a class,
this is JavaScript, right?

62
00:03:47.909 --> 00:03:53.209
So if you have a class in JavaScript,
no parenthesis, sorry,

63
00:03:53.209 --> 00:03:58.413
then you can apply methods
directly to the class, like this.

64
00:03:58.413 --> 00:04:00.672
So these are similar to static, and

65
00:04:00.672 --> 00:04:03.923
now JavaScript supports
also the static keyword.

66
00:04:03.923 --> 00:04:06.956
It's kind of new in ECMAScript, okay?

67
00:04:06.956 --> 00:04:10.813
So you can also implement
similar solutions in JavaScript,

68
00:04:10.813 --> 00:04:13.921
in case you're coming from JavaScript,
okay?

69
00:04:13.921 --> 00:04:15.983
We have seal classes.

70
00:04:15.983 --> 00:04:19.366
A seal class is a class
that can have no instances.

71
00:04:19.366 --> 00:04:22.578
So actually, and it's not abstract.

72
00:04:22.578 --> 00:04:28.640
Typically a seal class is
only with a companion object.

73
00:04:28.640 --> 00:04:32.837
Typically, it's been used for

74
00:04:32.837 --> 00:04:37.973
storing objects, global utilities.

75
00:04:37.973 --> 00:04:42.373
Okay, so it's like a place,
because its useful because in

76
00:04:42.373 --> 00:04:46.610
Android we cannot have global
functions drop anywhere.

77
00:04:46.610 --> 00:04:48.589
So we need a container.

78
00:04:48.589 --> 00:04:51.507
Well, a sealed class
it's kind of a container,

79
00:04:51.507 --> 00:04:55.073
and because it's sealed we
cannot create instances of it.

80
00:04:55.073 --> 00:04:58.311
So, I mean a compiler will say no,
this is a sealed class.

81
00:04:58.311 --> 00:05:00.407
Don't create an instance of utilities.

82
00:05:00.407 --> 00:05:04.881
Just use the members of it, okay?

83
00:05:04.881 --> 00:05:07.554
We have enum classes.

84
00:05:07.554 --> 00:05:11.061
Is weird that is called enum class and
not enum alone, okay?

85
00:05:11.061 --> 00:05:14.614
But it's an enum as you're
used to in other languages.

86
00:05:14.614 --> 00:05:18.461
The difference is that it's a class
because actually it's a class behind

87
00:05:18.461 --> 00:05:18.965
scenes.

88
00:05:18.965 --> 00:05:25.263
So we can create a direction and
then it accepts a set of values, and

89
00:05:25.263 --> 00:05:31.123
also each value can have an inner
value and a raw value assign.

90
00:05:31.123 --> 00:05:35.319
For example,
you can say class color of integer.

91
00:05:35.319 --> 00:05:38.216
And finally, data class.

92
00:05:38.216 --> 00:05:42.369
So what a data class is,
it includes basic behavior for

93
00:05:42.369 --> 00:05:47.714
classes using data, holding data,
they're going to use that data.

94
00:05:47.714 --> 00:05:50.877
So for example, it has a better toString.

95
00:05:50.877 --> 00:05:56.512
By default, toString of a class will
give you the name of the class.

96
00:05:56.512 --> 00:05:58.402
Completely useless.

97
00:05:58.402 --> 00:06:03.861
Well, a data class will re-implement
the toString method and

98
00:06:03.861 --> 00:06:08.297
it will show you all
the variables with its values.

99
00:06:08.297 --> 00:06:11.036
It also includes equals.

100
00:06:11.036 --> 00:06:15.407
So then you can use equals equals,
and it is going to match its property.

101
00:06:15.407 --> 00:06:20.205
So if you have two products, it will give
you true if they have the same values even

102
00:06:20.205 --> 00:06:21.913
if there are two instances.

103
00:06:21.913 --> 00:06:23.310
Okay, make sense?

104
00:06:23.310 --> 00:06:25.637
And also copy, copy to clone.

105
00:06:25.637 --> 00:06:28.467
So you can call copy automatically.

106
00:06:28.467 --> 00:06:32.349
So when you have classes
that are holding data,

107
00:06:32.349 --> 00:06:37.006
it's better to use data class in Kotlin,
because we have

108
00:06:37.006 --> 00:06:42.166
better built-in utilities and
solutions available for you.

109
00:06:42.166 --> 00:06:44.399
Okay, makes sense?

110
00:06:44.399 --> 00:06:45.273
Kind of?

111
00:06:47.228 --> 00:06:52.740
Actually, we have just over 70% of Kotlin.

112
00:06:52.740 --> 00:06:55.510
So you can see it's
pretty straightforward.

113
00:06:55.510 --> 00:06:58.424
There are more things,
more advanced topics, but

114
00:06:58.424 --> 00:07:02.570
actually with this we can start playing
on creating our user interface.

