WEBVTT

1
00:00:00.000 --> 00:00:01.494
It's time to write some code nickel.

2
00:00:01.494 --> 00:00:06.873
So in the repository,
there is a public folder.

3
00:00:06.873 --> 00:00:11.044
And in that folder, we have assets, okay?

4
00:00:11.044 --> 00:00:12.413
It's a zip file.

5
00:00:12.413 --> 00:00:14.231
If you unzip the file,

6
00:00:14.231 --> 00:00:19.036
you will get some PNG that we
will use in a couple of minutes.

7
00:00:19.036 --> 00:00:23.785
And also,
you will get into a kotlin 101 folder.

8
00:00:23.785 --> 00:00:28.456
Where we're going to do now, is to
open Android Studio into that folder.

9
00:00:28.456 --> 00:00:30.348
It's not actually an Android project.

10
00:00:30.348 --> 00:00:35.313
This is actually a couple of
files with extension, kts.

11
00:00:35.313 --> 00:00:38.042
By the way, Kotlin files are kt files.

12
00:00:38.042 --> 00:00:39.396
Kts, what's that?

13
00:00:39.396 --> 00:00:43.852
The SL from scratch,
it got a scratch file.

14
00:00:43.852 --> 00:00:45.278
What's an A scratch file?

15
00:00:45.278 --> 00:00:50.113
It's actually a file to play with Kotlin
without actually making an App, okay?

16
00:00:50.113 --> 00:00:50.998
That's kind of idea.

17
00:00:50.998 --> 00:00:54.018
You can open that by the way
if you want in VS code or

18
00:00:54.018 --> 00:00:57.046
any other IDE that you
want in this example only.

19
00:00:57.046 --> 00:00:59.721
For Android development,
we will actually need Android Studio.

20
00:00:59.721 --> 00:01:03.241
But for these files, you can open
this in Android Studio if you want,

21
00:01:03.241 --> 00:01:05.134
just to see and play with [INAUDIBLE].

22
00:01:05.134 --> 00:01:08.862
In Android Studio, you can open and

23
00:01:08.862 --> 00:01:12.844
then you go directly into the folder.

24
00:01:12.844 --> 00:01:18.694
This case I have it into assets,
and write Kotlin101.

25
00:01:23.523 --> 00:01:24.634
It will look like this.

26
00:01:24.634 --> 00:01:30.463
So you have a list of files, and then with
the tip of the day that I don't want,

27
00:01:30.463 --> 00:01:33.169
and then the code on the other side.

28
00:01:33.169 --> 00:01:36.855
So, here we are going to
just see some code and

29
00:01:36.855 --> 00:01:40.153
also if you want, you can run Kotlin go.

30
00:01:40.153 --> 00:01:44.474
That is like a playground.

31
00:01:44.474 --> 00:01:48.442
It's a place to play with Kotlin
without actually making an App, okay?

32
00:01:48.442 --> 00:01:53.651
So basic expressions,
Kotlin code looks like JavaScript or

33
00:01:53.651 --> 00:01:57.335
any modern language when you first see it.

34
00:01:57.335 --> 00:01:59.898
So, if I throw you some Kotlin code,

35
00:01:59.898 --> 00:02:04.632
you will understand most of it
without even doing any explanation.

36
00:02:04.632 --> 00:02:08.467
So, I will just sham directly into
the differences and really quickly

37
00:02:08.467 --> 00:02:12.634
over the things that are usual,
where all similarities to other language.

38
00:02:12.634 --> 00:02:15.261
So, Kotlin looks like any other language.

39
00:02:15.261 --> 00:02:20.178
For example, semi colons, semi colons
out they are, but they are optional.

40
00:02:20.178 --> 00:02:26.902
And I can say that 99% of the time,
you're not going to use semicolons.

41
00:02:26.902 --> 00:02:30.131
You use semicolons only when
you have two expressions,

42
00:02:30.131 --> 00:02:31.991
two sentences in the same line.

43
00:02:31.991 --> 00:02:35.472
And that's not something you
wanna do actually, okay?

44
00:02:35.472 --> 00:02:40.067
So, your grade variables as you can
see really quickly with bar, so

45
00:02:40.067 --> 00:02:44.435
that's actually pretty
straightforward as with JavaScript.

46
00:02:44.435 --> 00:02:48.131
But we'll get into data types and
all that stuff in a minute.

47
00:02:48.131 --> 00:02:50.548
Boolean conditions, they need parentheses.

48
00:02:50.548 --> 00:02:54.402
So for example,
if you're coming from other languages.

49
00:02:54.402 --> 00:02:59.351
Python, Ruby, Swift,
here have in mind that this is like

50
00:02:59.351 --> 00:03:04.009
JavaScript or C or other C based or
C syntax languages.

51
00:03:04.009 --> 00:03:09.037
You need parentheses on if,
on while, on for.

52
00:03:09.037 --> 00:03:12.925
Print and print line,
print will send a message to the console,

53
00:03:12.925 --> 00:03:16.167
print line will send a message and
grade the new line.

54
00:03:16.167 --> 00:03:21.935
One big important thing here, when we
are using print to talk to the console,

55
00:03:21.935 --> 00:03:24.701
the console is not the phone, okay?

56
00:03:24.701 --> 00:03:29.269
The console is an invisible part of
your App, of the operating system.

57
00:03:29.269 --> 00:03:35.382
And Android does not support
printing without a new line.

58
00:03:35.382 --> 00:03:38.425
So, actually when you do print,

59
00:03:38.425 --> 00:03:43.438
it goes to a buffer until you
do at least one print line.

60
00:03:43.438 --> 00:03:46.322
When you do a last print line,
you will see that on the screen.

61
00:03:46.322 --> 00:03:51.127
Meaning that if you're sending print
messages, you're not going to see those

62
00:03:51.127 --> 00:03:56.231
messages in the console, until you send
a newline character or a print line, okay?

63
00:03:56.231 --> 00:03:57.384
Have that in mind.

64
00:03:57.384 --> 00:04:01.047
When you're doing console Koltin
applications, you can use print and

65
00:04:01.047 --> 00:04:01.971
it works, okay?

66
00:04:01.971 --> 00:04:03.095
But on Android,

67
00:04:03.095 --> 00:04:07.523
we are running on different
operating system with its own rules.

68
00:04:07.523 --> 00:04:11.077
So, in terms of style guidelines,
variable function and

69
00:04:11.077 --> 00:04:13.331
package names are using camel case.

70
00:04:13.331 --> 00:04:14.655
What's a package?

71
00:04:14.655 --> 00:04:20.729
Similar to Java package or
similar to namespaces in dot net or

72
00:04:20.729 --> 00:04:25.864
PHP, it's a way to group co,
under a name, okay?

73
00:04:25.864 --> 00:04:28.520
All of them are using camel case.

74
00:04:28.520 --> 00:04:32.488
So, we start with lowercase and
then we go uppercase, you know the deal.

75
00:04:32.488 --> 00:04:34.319
Constant names, okay?

76
00:04:34.319 --> 00:04:36.532
They're using UPPER SNAKE CASE.

77
00:04:36.532 --> 00:04:39.568
That is, for example, this one Max bank.

78
00:04:39.568 --> 00:04:42.379
We will talk about this in a minute,
like conspire, what is that?

79
00:04:42.379 --> 00:04:43.944
No worry for that.

80
00:04:43.944 --> 00:04:48.730
And data types, they use title case,
as in JavaScript, Java and

81
00:04:48.730 --> 00:04:54.298
many other things like a class an object
that we don't know what that is yet,

82
00:04:54.298 --> 00:04:57.803
but let's say that,
it's a type interfaces.

83
00:04:57.803 --> 00:05:02.917
Also objects that are represented
in singleton's with 10,

84
00:05:02.917 --> 00:05:04.852
to use also title case.

85
00:05:04.852 --> 00:05:07.219
So we start with uppercase.

86
00:05:07.219 --> 00:05:09.083
These are just guidelines,

87
00:05:09.083 --> 00:05:12.817
of course no one is gonna
enforce you these ideas, okay?

88
00:05:12.817 --> 00:05:15.412
Just guidelines.

89
00:05:15.412 --> 00:05:20.281
Something interesting is that
conditionals are expressions.

90
00:05:20.281 --> 00:05:27.105
So, you can call a function and
put an if inside the function, okay?

91
00:05:27.105 --> 00:05:29.326
And this is different to other languages.

92
00:05:29.326 --> 00:05:34.358
Probably you are used to like I know,
less than 2,

93
00:05:34.358 --> 00:05:39.170
else more or equals to 2,
something like that.

94
00:05:39.170 --> 00:05:42.079
This is perfectly valid in Kotlin.

95
00:05:42.079 --> 00:05:47.196
So, this is actually replacing the ternary
operator that probably you're used to.

96
00:05:47.196 --> 00:05:52.936
The ternary operator is not available
here, you need to use if instead.

97
00:05:52.936 --> 00:05:57.395
It's just a ternary operator
with a different syntax, okay?

98
00:05:57.395 --> 00:05:58.569
Makes sense.

99
00:05:58.569 --> 00:06:01.593
We don't have a switch,
but we do have a when,

100
00:06:01.593 --> 00:06:04.400
that it's acting like the switch, okay?

101
00:06:04.400 --> 00:06:06.456
And it's even more powerful.

102
00:06:06.456 --> 00:06:09.305
We use when and then different cases.

103
00:06:09.305 --> 00:06:14.930
On each case we use this one known as
a thin arrow, dash and greater than.

104
00:06:14.930 --> 00:06:18.732
And we can have one line,
we can have a code block and

105
00:06:18.732 --> 00:06:21.394
there is no need for a break, okay?

106
00:06:21.394 --> 00:06:26.838
There is an automatic break here going on,
we can also use ranges,

107
00:06:26.838 --> 00:06:31.022
multiple values and
even we can use operators, for

108
00:06:31.022 --> 00:06:36.296
example in this case,
asking about the data type of something.

109
00:06:36.296 --> 00:06:41.950
else it's what we are used to as
default on other languages, okay?

110
00:06:41.950 --> 00:06:44.781
It's just that when you get
used to that not a big deal.

111
00:06:44.781 --> 00:06:47.279
Loops,
&gt;&gt; It goes through all of them, right?

112
00:06:47.279 --> 00:06:50.453
So, it can go through multiple cases,
right?

113
00:06:50.453 --> 00:06:53.335
Question so, what if you wanna
go with multiple multiple cases?

114
00:06:53.335 --> 00:06:56.537
By default it's not going
through multiple cases, okay?

115
00:06:56.537 --> 00:07:01.739
Because when you they realized when they
created code in the language that most of

116
00:07:01.739 --> 00:07:07.261
the time, we are using the switch or their
use case the when, for exclusive options.

117
00:07:07.261 --> 00:07:11.685
But if you want,
you can request a for through.

118
00:07:11.685 --> 00:07:15.551
So the for, so it's the other way around,
instead of breaking,

119
00:07:15.551 --> 00:07:19.509
you are going to say that you wanna
continue on the next one, okay?

120
00:07:19.509 --> 00:07:22.598
And in that case, you use for through, so

121
00:07:22.598 --> 00:07:27.911
you can request explicitly that you
wanna move to the next case, okay?

122
00:07:27.911 --> 00:07:33.026
Loops, we have the standard while, so
it's just while, as you know, okay?

123
00:07:33.026 --> 00:07:35.863
Don't do this at home, but well true.

124
00:07:35.863 --> 00:07:40.163
And the for, we only have for
in as an option.

125
00:07:40.163 --> 00:07:44.564
If you wanna use the all for
I equals zero, I less than,

126
00:07:44.564 --> 00:07:48.105
I++, you can use the ranges, like this,

127
00:07:48.105 --> 00:07:53.009
a range is some kind of a little
collection on the fly, okay?

128
00:07:53.009 --> 00:07:57.662
It's not exactly collection, but
it seems like that here, okay?

129
00:07:57.662 --> 00:08:00.940
So, in this case zero to 10 without 10,
okay?

130
00:08:00.940 --> 00:08:06.474
So, these will print 10,
0 to 10 ,sorry 0 to 9, okay?

131
00:08:06.474 --> 00:08:09.614
Simple, that simple.

