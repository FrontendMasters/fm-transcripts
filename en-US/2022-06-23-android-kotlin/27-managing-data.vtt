WEBVTT

1
00:00:00.270 --> 00:00:06.463
So now that we have the menu and
we have the dependencies,

2
00:00:06.463 --> 00:00:13.181
it's time to request the data
using these libraries, okay?

3
00:00:13.181 --> 00:00:18.925
I'm not going to get too deep into how
every of those libraries work, okay?

4
00:00:18.925 --> 00:00:21.907
But we need to do some things.

5
00:00:21.907 --> 00:00:27.904
So first, what we need to do is to
create first the container for our data.

6
00:00:27.904 --> 00:00:33.878
We need some kind of object that we're
going to call the DataManager, okay?

7
00:00:33.878 --> 00:00:40.459
So because we have data model, but this
is just playing a structure for the data.

8
00:00:40.459 --> 00:00:48.040
We need someone that will hold the data in
a list, so then we can render it, okay?

9
00:00:48.040 --> 00:00:51.000
So that is going to be our DataManager.

10
00:00:52.650 --> 00:00:57.767
So I'm going to right-click,
create a new Kotlin file.

11
00:00:57.767 --> 00:01:00.190
In this case, I'm going to create a class.

12
00:01:00.190 --> 00:01:04.940
So let's go out with our friend class,
okay?

13
00:01:04.940 --> 00:01:07.000
So it's a DataManager.

14
00:01:07.000 --> 00:01:10.030
And what we need is at least two things.

15
00:01:10.030 --> 00:01:13.784
The menu that is going to
be a list of categories.

16
00:01:13.784 --> 00:01:19.190
And we need the cart that is going
to be a list of item in cart, okay?

17
00:01:19.190 --> 00:01:23.008
That's what we need at this point.

18
00:01:23.008 --> 00:01:28.538
But instead, I can just create an empty,

19
00:01:28.538 --> 00:01:32.654
remember how to create a list?

20
00:01:32.654 --> 00:01:37.032
List of, and actually to create
an empty one, we can do this, list of.

21
00:01:37.032 --> 00:01:39.096
But I wanna show you something.

22
00:01:39.096 --> 00:01:42.290
I want us to think about something.

23
00:01:42.290 --> 00:01:46.976
Every time the menu changes or
every time the cart changes,

24
00:01:46.976 --> 00:01:49.890
we may need to update the UI, right?

25
00:01:51.100 --> 00:01:58.293
So so far, we know only one way to update
the UI, and that's immutable state.

26
00:01:58.293 --> 00:02:00.076
Does it make sense?

27
00:02:00.076 --> 00:02:07.403
So that's why we can actually convert this
into a mutable state with this index.

28
00:02:07.403 --> 00:02:14.890
We say by instead of equals
mutableStateOf, and then the empty list.

29
00:02:16.520 --> 00:02:18.590
We probably need to import mutable state.

30
00:02:20.390 --> 00:02:25.503
So using this, you're actually

31
00:02:25.503 --> 00:02:30.618
saying mutableStateOf listOf,

32
00:02:30.618 --> 00:02:34.370
I think it's fine.

33
00:02:34.370 --> 00:02:40.354
Okay, so the DataManager has the menu on
the cart as mutable state of empty list.

34
00:02:40.354 --> 00:02:41.990
We start with an empty list.

35
00:02:41.990 --> 00:02:46.758
And right now, what I wanna add is some
couple of functions to actually work with

36
00:02:46.758 --> 00:02:49.020
the cart such as remove item.

37
00:02:49.020 --> 00:02:51.530
So I'm gonna remove a product.

38
00:02:51.530 --> 00:02:57.204
I wanna add something to the cart,
cartAdd that also receives a product.

39
00:02:57.204 --> 00:03:01.606
And maybe a clear because I
wanna emphasize on something.

40
00:03:01.606 --> 00:03:04.378
This will be actually pretty
simple I know for add.

41
00:03:04.378 --> 00:03:06.419
We are going to add one by one.

42
00:03:06.419 --> 00:03:10.616
So first, we need to check if the product
is already in the cart, because if it's

43
00:03:10.616 --> 00:03:14.658
already in the cart, we need to increase
the quantity, okay, makes sense?

44
00:03:14.658 --> 00:03:18.104
And we shall remove it
completely from the cart.

45
00:03:18.104 --> 00:03:23.940
But I have just created list,
not mutable list, okay?

46
00:03:23.940 --> 00:03:26.463
Does it make sense?
So maybe you're saying, just go and

47
00:03:26.463 --> 00:03:28.410
change it with a mutable list.

48
00:03:28.410 --> 00:03:35.120
But that's not gonna work, because with
the state, everything should be immutable.

49
00:03:35.120 --> 00:03:37.949
What it means,
if I change this to mutable,

50
00:03:37.949 --> 00:03:42.536
actually the chatbot compose framework
will never detect, will never

51
00:03:42.536 --> 00:03:47.362
realize when you add something to
the list or remove something to the list.

52
00:03:47.362 --> 00:03:51.066
So what we need to do is every
time we change the list,

53
00:03:51.066 --> 00:03:55.459
we need to create a new list with
one more item or one less item.

54
00:03:55.459 --> 00:04:01.010
So for example, clear or cartClear,
call this cartClear, is actually

55
00:04:01.010 --> 00:04:06.470
the simplest one, should actually
take the cart and create a new list.

56
00:04:07.510 --> 00:04:11.740
So I'm not taking the current list and
clearing the contents.

57
00:04:11.740 --> 00:04:15.170
This is not gonna work, okay?

58
00:04:15.170 --> 00:04:17.940
I need to create a new one,
a new reference.

59
00:04:17.940 --> 00:04:21.501
And when we do that,
then the state mechanism,

60
00:04:21.501 --> 00:04:24.527
the state engine will detect a change and

61
00:04:24.527 --> 00:04:29.525
will trigger an update if it's
needed in part of the composition.

62
00:04:29.525 --> 00:04:31.130
Does it make sense?

63
00:04:31.130 --> 00:04:36.197
So then cartAdd will just, for example,
something that I can do is first chain,

64
00:04:36.197 --> 00:04:39.560
check if the current product
is already there or not.

65
00:04:39.560 --> 00:04:40.978
So it's a simple algorithm.

66
00:04:40.978 --> 00:04:45.917
I can also use functional programming
if you want like the product that

67
00:04:45.917 --> 00:04:48.170
I'm receiving.

68
00:04:48.170 --> 00:04:49.210
Let's do this.

69
00:04:49.210 --> 00:04:54.770
I can take the cart and
use forEach functional programming.

70
00:04:54.770 --> 00:05:01.573
So I will say if the id==it,
what is it here?

71
00:05:01.573 --> 00:05:06.773
The argument of the forEach,
that is, the item in the cart.

72
00:05:06.773 --> 00:05:10.631
I can get a little help here saying
that it's the item in the cart, okay,

73
00:05:10.631 --> 00:05:12.220
makes sense?

74
00:05:12.220 --> 00:05:19.790
So if it's this one, then I'm going
to increase from it the quantity.

75
00:05:19.790 --> 00:05:27.080
By the way, I think that we have in our
data model another var here and here.

76
00:05:27.080 --> 00:05:32.029
We need to have var and
var, okay, makes sense?

77
00:05:33.750 --> 00:05:39.047
So going back here, now I can increase
the quantity and say that it was found.

78
00:05:39.047 --> 00:05:44.796
And if it wasn't found, I need to create,

79
00:05:44.796 --> 00:05:51.783
I need to add one item, okay?

80
00:05:51.783 --> 00:05:58.840
But I cannot add it because it's a list,
not immutable list.

81
00:05:58.840 --> 00:06:00.310
So what I need to do is create a copy.

82
00:06:01.350 --> 00:06:04.060
We haven't seen how to create a copy yet
in Kotlin.

83
00:06:04.060 --> 00:06:05.940
So this is the first
time we are doing that.

84
00:06:05.940 --> 00:06:11.823
So I'm going to say there
is a new list of and

85
00:06:11.823 --> 00:06:20.001
I'm going to use a *cart.toTypeArray,
like so, okay?

86
00:06:20.001 --> 00:06:27.010
And actually, what I need to do here
is I need to add also a list of that.

87
00:06:27.010 --> 00:06:32.776
So a copy of the current cart
plus another item in the cart

88
00:06:32.776 --> 00:06:40.146
that has the product that you asked
me to add and one as quantity, okay?

89
00:06:40.146 --> 00:06:42.470
So this is how you clone a list.

90
00:06:43.500 --> 00:06:44.870
It creates a copy.

91
00:06:44.870 --> 00:06:50.470
So this is a new list, a mutable list
of the current list plus one more item.

92
00:06:50.470 --> 00:06:51.527
Does it make sense?

93
00:06:51.527 --> 00:06:52.958
&gt;&gt; Just the syntax is kinda weird,

94
00:06:52.958 --> 00:06:54.005
like [INAUDIBLE]
&gt;&gt; Yeah,

95
00:06:54.005 --> 00:06:56.470
it's weird because we haven't used a star.

96
00:06:56.470 --> 00:06:59.982
We don't use the star here, but
yeah, that's how you make a copy.

97
00:06:59.982 --> 00:07:05.874
And cartRemove, it's something similar,
but the problem is that here,

98
00:07:05.874 --> 00:07:11.689
we need to create a new, an auxiliary
list to remove it from there, okay?

99
00:07:11.689 --> 00:07:15.009
So we need to convert
this into a mutable list.

100
00:07:16.330 --> 00:07:19.603
We can convert a list into a mutable one.

101
00:07:19.603 --> 00:07:24.475
And then we are going to remove,
there are many ways to do this, but

102
00:07:24.475 --> 00:07:31.330
we can remove all the products whose id is
equal to the product id you wanna remove.

103
00:07:31.330 --> 00:07:36.690
So now I have created
another list that is mutable.

104
00:07:36.690 --> 00:07:41.752
And now what I need to do is on our cart,

105
00:07:41.752 --> 00:07:47.300
I need to take a copy of this one,
like so.

106
00:07:49.310 --> 00:07:50.030
Does it make sense?

107
00:07:50.030 --> 00:07:55.277
By the way, if you are used to state
in React or even the Redux mechanism,

108
00:07:55.277 --> 00:07:59.938
the Flux design pattern,
you typically need to do this as well.

109
00:07:59.938 --> 00:08:02.524
I mean, you cannot add items to the array.

110
00:08:02.524 --> 00:08:05.570
You need to create a new array every time.

111
00:08:05.570 --> 00:08:08.880
So something similar is here,
okay, makes sense?

112
00:08:08.880 --> 00:08:11.080
So that's our DataManager for now.

