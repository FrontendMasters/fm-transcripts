WEBVTT

1
00:00:00.080 --> 00:00:03.733
Before actually writing some Codes,
and creating an app,

2
00:00:03.733 --> 00:00:06.883
we need to discuss a little
bit about Android versioning.

3
00:00:06.883 --> 00:00:13.460
So today Android goes from version one,
the first one, to version 13.

4
00:00:13.460 --> 00:00:17.184
Of course, we might have the latest
version still in Beta or

5
00:00:17.184 --> 00:00:18.831
when developer preview.

6
00:00:18.831 --> 00:00:21.658
But that's roughly how it works.

7
00:00:21.658 --> 00:00:26.631
And today at least we tend
to have one major number

8
00:00:26.631 --> 00:00:30.157
per year of the operating system.

9
00:00:30.157 --> 00:00:32.406
We used to have code names.

10
00:00:32.406 --> 00:00:37.541
Probably you have heard about this, like
Froyo, Gingerbread Ice Cream Sandwich,

11
00:00:37.541 --> 00:00:40.808
like every Android version
used to have the surname.

12
00:00:40.808 --> 00:00:45.641
Then names were deprecated from
version ten to kind of 12,

13
00:00:45.641 --> 00:00:47.834
but they're still there.

14
00:00:47.834 --> 00:00:50.675
And even today,
it seems like they're coming back.

15
00:00:50.675 --> 00:00:54.406
So these names, but
this is just a codename, and

16
00:00:54.406 --> 00:00:57.506
it's actually not so important for us.

17
00:00:57.506 --> 00:01:02.574
Actually, the version number,
the one that says 12.1,

18
00:01:02.574 --> 00:01:06.775
It's also not important to us developers,
okay?

19
00:01:06.775 --> 00:01:13.135
We will care about something known as the
API number, also known as the SDK number.

20
00:01:13.135 --> 00:01:15.383
That's what we care about.

21
00:01:15.383 --> 00:01:20.708
This is actually an integer,
a consecutive integer

22
00:01:20.708 --> 00:01:25.315
that express the current
version of the API.

23
00:01:25.315 --> 00:01:28.914
Every time there is a new Android
version change in the API.

24
00:01:28.914 --> 00:01:31.189
So they have more things, less things.

25
00:01:31.189 --> 00:01:36.563
They have renamed some methods or
classes, they have a new number.

26
00:01:36.563 --> 00:01:40.766
Sometimes there really a new Android
version, but they don't change the API.

27
00:01:40.766 --> 00:01:44.144
So for now, for
us it's just the same in that case.

28
00:01:44.144 --> 00:01:49.278
It's just I'm building for API 32,
I don't care if it's 12 or

29
00:01:49.278 --> 00:01:53.615
12.1 or 12.1.3, it's just the same, okay?

30
00:01:53.615 --> 00:01:57.278
So we are going to care
about the API number.

31
00:01:57.278 --> 00:02:00.964
Just remember that we are going
to see the API number a couple

32
00:02:00.964 --> 00:02:03.114
of times during app development.

33
00:02:03.114 --> 00:02:05.195
So we won't see the code name.

34
00:02:05.195 --> 00:02:09.411
We won't see,
let's say the end-user version number.

35
00:02:09.411 --> 00:02:12.776
We will talk about the API number.

36
00:02:12.776 --> 00:02:16.794
And to make things more complicated for
us,

37
00:02:16.794 --> 00:02:23.643
every app contains three different
API definitions or API declarations.

38
00:02:23.643 --> 00:02:28.493
We have the minimum SDK version
that defines installability.

39
00:02:28.493 --> 00:02:32.817
That means when we are building
an APK an android application,

40
00:02:32.817 --> 00:02:37.313
we will pick the minimum API number
that we're going to support.

41
00:02:37.313 --> 00:02:41.775
So I can say my app is
compatible from API 15.

42
00:02:41.775 --> 00:02:47.983
So in that case, you're making yourself
responsible of using APIs only available

43
00:02:47.983 --> 00:02:54.189
in version 15 or if you're using an API
that is only available on later versions,

44
00:02:54.189 --> 00:02:59.882
you have a conditional that won't
execute those APIs on all other devices.

45
00:02:59.882 --> 00:03:01.840
Because if not, the app will crash.

46
00:03:01.840 --> 00:03:07.092
And if you try to use an API that is
not on the phone, the app will crash.

47
00:03:07.092 --> 00:03:09.534
We don't want that, okay?

48
00:03:09.534 --> 00:03:10.420
By the way,

49
00:03:10.420 --> 00:03:16.014
if your app crashes it will reduce some
kind of score within the Play Store.

50
00:03:16.014 --> 00:03:18.140
If your app is published
in the Play Store, okay?

51
00:03:18.140 --> 00:03:21.625
So it's important to reduce
the amount of crashes and

52
00:03:21.625 --> 00:03:27.443
bugs because that improves some kind of,
it's like SEO, search engine optimization.

53
00:03:27.443 --> 00:03:30.525
So it improves your
ranking in the Playstore.

54
00:03:30.525 --> 00:03:32.218
So we don't want crashes.

55
00:03:32.218 --> 00:03:37.323
Crashes happen, but
we need to monitor crashes and solve them.

56
00:03:37.323 --> 00:03:40.829
So that's the first definition
that we need to make, okay?

57
00:03:40.829 --> 00:03:42.521
The minimum SDK version.

58
00:03:42.521 --> 00:03:49.975
Then we have the target SDK version, that
at first, it's a little weird to follow.

59
00:03:49.975 --> 00:03:51.919
But let me tell you this.

60
00:03:51.919 --> 00:03:56.481
It's actually the version
of the of the API or

61
00:03:56.481 --> 00:04:00.092
the SDK that you tested your app on.

62
00:04:00.092 --> 00:04:02.372
So you're making sure that I mean,

63
00:04:02.372 --> 00:04:05.954
right now let's say that we
are building with API 30.

64
00:04:05.954 --> 00:04:11.532
That means that we we
are testing our app in API 30.

65
00:04:11.532 --> 00:04:17.070
And we are telling the OS that
with API 30, my app works okay.

66
00:04:17.070 --> 00:04:21.925
Because what happens in the future,
when we have API 40.

67
00:04:21.925 --> 00:04:24.987
Well I don't know what will
happen today in the future.

68
00:04:24.987 --> 00:04:30.961
So I wanna let the OS know that
this was working fine on 30.

69
00:04:30.961 --> 00:04:33.710
And if it chases behavior.

70
00:04:33.710 --> 00:04:39.549
For example,
let's say that foldable phones were

71
00:04:39.549 --> 00:04:45.268
not part of the Android SDK until API 30,
okay?

72
00:04:45.268 --> 00:04:48.604
So if we compile the app with a target 28,

73
00:04:48.604 --> 00:04:52.974
that means we didn't know
about foldables at the time.

74
00:04:52.974 --> 00:04:55.540
So we are not foldable compatible.

75
00:04:55.540 --> 00:05:00.180
So even if you run your app on a foldable
device, the phone will know that your app

76
00:05:00.180 --> 00:05:03.311
is not compatible with
the idea of a foldable, okay?

77
00:05:03.311 --> 00:05:07.534
With that in mind,
the OS will change behavior.

78
00:05:07.534 --> 00:05:12.108
For example, it won't offer
the app the ability to split

79
00:05:12.108 --> 00:05:16.597
the screen in two halves or
something like that, okay?

80
00:05:16.597 --> 00:05:22.433
If you are defining your target from
a minimum SDK that supports foldables,

81
00:05:22.433 --> 00:05:26.368
the OS will expect you to
know how to live with that.

82
00:05:26.368 --> 00:05:28.022
Think about the future.

83
00:05:28.022 --> 00:05:34.436
Let's say that in Android, in the SDK 40,
they will support holograms, okay?

84
00:05:34.436 --> 00:05:36.044
But we are building the app today.

85
00:05:36.044 --> 00:05:40.381
We don't know about holograms or
how to render holographics UIs.

86
00:05:40.381 --> 00:05:46.230
Well, because we are building on
set setting the target SDK as 32.

87
00:05:46.230 --> 00:05:52.012
The holographic OS will know that
we are not holographic compatible,

88
00:05:52.012 --> 00:05:57.114
so they will render or
app in some kind of 2D emulator, okay?

89
00:05:57.114 --> 00:05:58.123
Something like that.

90
00:05:58.123 --> 00:05:59.779
So that makes sense?

91
00:05:59.779 --> 00:06:02.279
And finally we have the compiler.

92
00:06:02.279 --> 00:06:06.745
So this is actually not
shipping with the app,

93
00:06:06.745 --> 00:06:11.450
that definition is just
a compiler we are using.

94
00:06:11.450 --> 00:06:14.987
The more modern compiler
typically the more efficient and

95
00:06:14.987 --> 00:06:16.941
the better output that we have.

96
00:06:16.941 --> 00:06:19.250
And typically,
we use the latest available.

97
00:06:19.250 --> 00:06:20.878
Unless there is a bug or

98
00:06:20.878 --> 00:06:26.129
something special that we need to where
we need to use an older compiler.

99
00:06:26.129 --> 00:06:28.202
We're going to use the latest available.

100
00:06:28.202 --> 00:06:32.867
Okay, so these are decisions that we need
to make every time we make an app, okay?

101
00:06:32.867 --> 00:06:38.193
And we will see in a minute where
we're going to make those definitions.

102
00:06:38.193 --> 00:06:43.452
Okay, typically,
this is a relationship between these SDK.

103
00:06:43.452 --> 00:06:47.733
So the compiler is the latest one,
the target SDK most of the time,

104
00:06:47.733 --> 00:06:50.113
you use the same one as the compiler.

105
00:06:50.113 --> 00:06:53.109
So most of the time, they are the same and

106
00:06:53.109 --> 00:06:56.912
the minimum SDK it typically
goes back to the past.

107
00:06:56.912 --> 00:07:01.857
And I will tell you why in a minute, okay?

108
00:07:01.857 --> 00:07:06.054
In fact, before moving on with somewhere,
I have a couple of more slides and

109
00:07:06.054 --> 00:07:08.229
then we will jump directly into lingo.

110
00:07:08.229 --> 00:07:09.772
I'm going to open Andrea Stewart.

111
00:07:09.772 --> 00:07:13.237
You don't need to follow me at this point.

112
00:07:13.237 --> 00:07:17.827
I'm going to create a new project,
just to show you something really quick.

113
00:07:17.827 --> 00:07:21.067
When you create a new project,
it doesn't matter what I'm picking here.

114
00:07:21.067 --> 00:07:22.775
It's not the important part.

115
00:07:22.775 --> 00:07:24.092
I wanna show you this.

116
00:07:24.092 --> 00:07:27.723
When we are building the app,
when we are creating the project,

117
00:07:27.723 --> 00:07:30.223
I can pick here the minimum best SDK,
okay?

118
00:07:30.223 --> 00:07:34.986
So it's actually suggesting
me to start with API 21.

119
00:07:34.986 --> 00:07:38.715
API 21 is Android 5.0.

120
00:07:38.715 --> 00:07:42.046
And why picking the minimum
SDK is important?

121
00:07:42.046 --> 00:07:44.737
Maybe you're saying, hey,
why are you going to start with API one?

122
00:07:44.737 --> 00:07:46.707
I wanna be compatible with everyone.

123
00:07:46.707 --> 00:07:50.823
The problem is that
the further you go back,

124
00:07:50.823 --> 00:07:54.727
the less APIs you have available, okay?

125
00:07:54.727 --> 00:07:58.436
And here we have a link
that says help me choose.

126
00:07:58.436 --> 00:08:02.910
If you click there,
you have this nice diagram that will

127
00:08:02.910 --> 00:08:06.431
tell you based on
the current active users,

128
00:08:06.431 --> 00:08:11.973
how many users are going to be covering,
if you set that as a minimum.

129
00:08:11.973 --> 00:08:17.863
So if I set API 21 as my minimum,
it's 98% of the android users out there.

130
00:08:17.863 --> 00:08:24.162
That means there are still
2% with android 4, okay?

131
00:08:24.162 --> 00:08:27.084
That's eight years ago.

132
00:08:27.084 --> 00:08:31.939
So there are still ADRO OLED
devices out there in the market.

133
00:08:31.939 --> 00:08:34.677
But if you peek 28, okay?

134
00:08:34.677 --> 00:08:38.577
You are losing 30% or
more than 30% of your user.

135
00:08:38.577 --> 00:08:43.905
So they won't be able to install your app
If you set that as your minimum, okay?

136
00:08:43.905 --> 00:08:46.862
So this is a decision
that you need to make.

137
00:08:46.862 --> 00:08:51.237
Of course, there are more
versions that you are covering.

138
00:08:51.237 --> 00:08:56.467
That means more testing, as well,
more UI testing, because you need to

139
00:08:56.467 --> 00:09:02.149
make sure that all the users in all those
versions are using your app properly.

140
00:09:02.149 --> 00:09:05.926
And the app is working
properly on their devices.

141
00:09:05.926 --> 00:09:08.772
Do you have any question at this point?

142
00:09:08.772 --> 00:09:09.293
Yeah.

143
00:09:09.293 --> 00:09:13.635
&gt;&gt; So are you making a prediction that
holograms will holographic UI will be

144
00:09:13.635 --> 00:09:14.854
available in 40?

145
00:09:14.854 --> 00:09:18.557
&gt;&gt; I don't know maybe yeah,
maybe or maybe AR mean,

146
00:09:18.557 --> 00:09:23.858
you put your glasses and the app will
pop up in 3D, in the environment.

147
00:09:23.858 --> 00:09:26.062
I mean, that can happen every time.

148
00:09:26.062 --> 00:09:28.647
I mean in the next few years, but yeah.

149
00:09:28.647 --> 00:09:31.340
The thing is that when we
are working with the app,

150
00:09:31.340 --> 00:09:34.304
we need to understand that
our app will be compatible.

151
00:09:34.304 --> 00:09:38.063
So Android tries to be
always future proof.

152
00:09:38.063 --> 00:09:43.636
And with that in mind, if you're building
your app today, and you're selecting

153
00:09:43.636 --> 00:09:49.373
the target with today's maximum target,
future Android devices will know that and

154
00:09:49.373 --> 00:09:54.890
they will do their best to actually make
your app work great even in future Hower.

155
00:09:54.890 --> 00:09:58.036
So, that's kind of the idea, right?

156
00:09:58.036 --> 00:10:03.048
That we are going to,
I mean there is no guarantee.

157
00:10:03.048 --> 00:10:07.651
But it's kind of they're trying to
push this idea of future proof.

158
00:10:07.651 --> 00:10:09.830
That if, I mean in the Play Store,

159
00:10:09.830 --> 00:10:14.802
there are still a lot of apps out in the
Play Store that were built ten years ago.

160
00:10:14.802 --> 00:10:17.595
And you're still downloading the same APK.

161
00:10:17.595 --> 00:10:22.055
And the idea is that even if you
run this in a high resolution,

162
00:10:22.055 --> 00:10:25.387
foldable device, the app should work fine.

163
00:10:25.387 --> 00:10:29.782
And Android will try to match
whatever expectation you had as

164
00:10:29.782 --> 00:10:31.773
a developer two years ago.

165
00:10:31.773 --> 00:10:33.601
That kind of idea, okay?

166
00:10:33.601 --> 00:10:36.943
Makes sense?

167
00:10:36.943 --> 00:10:42.742
Okay, so just have in mind that those
are decisions that we need to make, okay?

168
00:10:42.742 --> 00:10:46.281
So in terms of API is available,
as we mentioned before,

169
00:10:46.281 --> 00:10:50.578
every new version of the Android
operating system includes new API.

170
00:10:50.578 --> 00:10:56.628
API to Bluetooth to use wherever
new technology is available,

171
00:10:56.628 --> 00:11:01.309
it may have to do with
something software based,

172
00:11:01.309 --> 00:11:06.917
like a new background surveys in the OS or
hardware based.

173
00:11:06.917 --> 00:11:10.209
The latest big sample is foldable devices,
okay?

174
00:11:10.209 --> 00:11:15.605
The ability to support more than one
screen or a screen that can fold itself

175
00:11:15.605 --> 00:11:21.452
and detect the events while that's one
of the latest big additions on Android.

176
00:11:21.452 --> 00:11:23.571
If we target users on that new version,

177
00:11:23.571 --> 00:11:26.279
it will take years to get
to the majority of users.

178
00:11:26.279 --> 00:11:31.587
So if I'm building my
app using target API 32,

179
00:11:31.587 --> 00:11:36.258
the latest one is to
the a 0% of the users.

180
00:11:36.258 --> 00:11:38.201
0.5 probably..

181
00:11:38.201 --> 00:11:45.568
And it will take years to
actually get 50%, okay?

182
00:11:45.568 --> 00:11:51.538
So, because this is a problem, because
I wanna use the latest technologies,.

183
00:11:51.538 --> 00:11:55.171
But also I need to support
all my user folder, okay?

184
00:11:55.171 --> 00:11:56.790
So Google create the I mean,

185
00:11:56.790 --> 00:12:00.511
the Android team created something
known as Support Libraries.

186
00:12:00.511 --> 00:12:03.218
So Support Library is a framework, okay?

187
00:12:03.218 --> 00:12:08.419
So that we need to import an ad
in our code that will let

188
00:12:08.419 --> 00:12:13.741
us use latest abilities with
some kind of emulation or

189
00:12:13.741 --> 00:12:17.312
polyfill on older devices, okay?

190
00:12:17.312 --> 00:12:22.436
Because if not,
I'm always stuck with all APIs, okay?

191
00:12:22.436 --> 00:12:22.942
Does it make sense?

192
00:12:22.942 --> 00:12:27.305
So it's like on the web when you're using
polyfills to fill a gap in a browser

193
00:12:27.305 --> 00:12:30.386
that is not supporting an API or
something like that.

194
00:12:30.386 --> 00:12:35.031
Well, the Support Libraries today
were were renamed under the name

195
00:12:35.031 --> 00:12:36.750
under the JetPack name.

196
00:12:36.750 --> 00:12:41.407
So JetPack is actually a set
of libraries that are adding

197
00:12:41.407 --> 00:12:44.982
Support Libraries and many other things.

198
00:12:44.982 --> 00:12:50.476
So when we hear about Jetpack, it's just
these set of libraries is a backpack.

199
00:12:50.476 --> 00:12:54.619
In fact, the logo of Jetpack is
an Android little guy with a backpack.

200
00:12:54.619 --> 00:13:01.677
So it's the set of tools that we
actually need to create an app.

201
00:13:01.677 --> 00:13:06.785
And in terms of color architecture,
the official SDK, the one that

202
00:13:06.785 --> 00:13:12.350
we are using is based on a Java built
on machine and is pure written in Java.

203
00:13:12.350 --> 00:13:16.719
So I know,
let's say the official SDK means the baton

204
00:13:16.719 --> 00:13:22.071
the geolocation service,
the service that goes to the network.

205
00:13:22.071 --> 00:13:27.208
Every API that we're using from
the OS is written in Java and

206
00:13:27.208 --> 00:13:31.535
runs in your Java built
on machine Java VM, okay?

207
00:13:31.535 --> 00:13:37.910
But it's not the Oracle or
the Sun built on machine.

208
00:13:37.910 --> 00:13:42.404
It's own engines,
in fact they went to a legal fight,

209
00:13:42.404 --> 00:13:45.933
Oracle and Google because of this, okay?

210
00:13:45.933 --> 00:13:50.513
And so we write Java,
we compile Java but then,

211
00:13:50.513 --> 00:13:56.136
it's not actually going to
Java intermediate language.

212
00:13:56.136 --> 00:14:00.206
And there is no Java virtual machine
on the Android phone as we know

213
00:14:00.206 --> 00:14:02.135
it it's a different machine.

214
00:14:02.135 --> 00:14:06.461
And it's called Dalvik an ART,
that we have to run times their visual,

215
00:14:06.461 --> 00:14:08.563
the original word called Dalvik.

216
00:14:08.563 --> 00:14:09.462
It doesn't matter.

217
00:14:09.462 --> 00:14:11.044
And the other one is Android Runtime.

218
00:14:11.044 --> 00:14:18.055
Again, it doesn't matter about the names
but in case you heard about those names,

219
00:14:18.055 --> 00:14:22.777
these are the runtimes that
are executing Dalvik code.

220
00:14:22.777 --> 00:14:24.796
What's Dalvik code?

221
00:14:24.796 --> 00:14:28.529
So let's say if you write Java and
now we will talk about Kotlin as well.

222
00:14:28.529 --> 00:14:33.563
If you're writing Java, we compile
Java into Java, intermediate language.

223
00:14:33.563 --> 00:14:38.040
And that intermediate language is
compiling to Dalvik executable code.

224
00:14:38.040 --> 00:14:40.373
And that's like an Android format.

225
00:14:40.373 --> 00:14:45.432
And then there are the BM will
run that Dalvik executable code.

226
00:14:45.432 --> 00:14:52.201
So we don't compile native code on
Android, unless we are using C, okay?

227
00:14:52.201 --> 00:14:54.348
And that's known as the NDK.

228
00:14:54.348 --> 00:14:57.354
The Native Development kit,
but we are using the SDK.

229
00:14:57.354 --> 00:15:01.474
And with the SDK,
we don't use C we use Java or Kotlin.

230
00:15:01.474 --> 00:15:07.483
In that case, we don't write native code,
we actually write Dalbec executable code.

231
00:15:07.483 --> 00:15:10.217
This is transparent to us developers.

232
00:15:10.217 --> 00:15:13.464
But I want you to know how that works.

233
00:15:13.464 --> 00:15:16.383
Because someone who had a problem
he will talk about the dex file and

234
00:15:16.383 --> 00:15:17.908
you'll know what the dex file is.

235
00:15:17.908 --> 00:15:19.710
Dex is Dalvik executable.

236
00:15:21.694 --> 00:15:28.097
So we compiled to Java bytecode that
has garbage collector like Java.

237
00:15:28.097 --> 00:15:33.367
And here comes Kotlin,
Kotlin also compiles to Java bytecode.

238
00:15:33.367 --> 00:15:35.623
So we are going to write Kotlin.

239
00:15:35.623 --> 00:15:40.544
And the Kotlin code that we're going to
write is going to be compiled into Java

240
00:15:40.544 --> 00:15:42.522
into Dalvik executable code.

241
00:15:42.522 --> 00:15:45.351
That is the same as if
we're building Java.

242
00:15:45.351 --> 00:15:49.751
In fact probably that you
can on executables you can

243
00:15:49.751 --> 00:15:53.445
actually decompile executables, okay?

244
00:15:53.445 --> 00:15:58.218
We need to see if it's legal in your
country and in some situations but

245
00:15:58.218 --> 00:15:59.957
you can decompile code.

246
00:15:59.957 --> 00:16:05.166
When you decompile Kotlin applications,
you originally

247
00:16:05.166 --> 00:16:10.274
get Java because it's the same
intermediate language.

248
00:16:10.274 --> 00:16:14.963
It's like.net with T sharp
visual basic that they were

249
00:16:14.963 --> 00:16:18.960
both compiling to net
intermediate language.

250
00:16:18.960 --> 00:16:20.553
Well, this is the same.

251
00:16:20.553 --> 00:16:23.217
We have Java on Android,
we have Kotlin and

252
00:16:23.217 --> 00:16:27.145
Android both are combined into
the same built on machine code.

253
00:16:27.145 --> 00:16:30.030
So they are 100% interoperable
because it's just the same.

