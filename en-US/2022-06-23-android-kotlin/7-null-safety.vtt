WEBVTT

1
00:00:00.051 --> 00:00:06.687
Okay, so something that is probably
new to some of you, null safety.

2
00:00:06.687 --> 00:00:11.493
So, in Kotlin, when you express,
let me pull this for

3
00:00:11.493 --> 00:00:15.578
a minute so
I don't spoil what's happening.

4
00:00:15.578 --> 00:00:20.451
When you have a variable like this and
you say that my name is a string,

5
00:00:20.451 --> 00:00:22.309
it must contain a string.

6
00:00:22.309 --> 00:00:29.672
It cannot accept null, like in Java or
JavaScript or other languages.

7
00:00:29.672 --> 00:00:32.530
So if it's a string, it must be string.

8
00:00:32.530 --> 00:00:35.424
If not, it's not compiling.

9
00:00:35.424 --> 00:00:37.018
I need a value.

10
00:00:37.018 --> 00:00:41.777
But sometimes you know that sometimes,
hey, I don't have a value or

11
00:00:41.777 --> 00:00:43.345
maybe I accept nulls.

12
00:00:43.345 --> 00:00:48.631
Well, in that case,
if you accept a name with nulls,

13
00:00:48.631 --> 00:00:51.807
you use a string question mark.

14
00:00:51.807 --> 00:00:57.039
Question mark says that
the type that we have before,

15
00:00:57.039 --> 00:01:00.770
the character is actually optional.

16
00:01:00.770 --> 00:01:05.187
So it accepts nulls, okay?

17
00:01:05.187 --> 00:01:09.321
So that means that now we can assign a
null, by default, it will have that value.

18
00:01:11.339 --> 00:01:16.383
So the problem with this, so
it sounds, okay, simple to understand.

19
00:01:16.383 --> 00:01:22.192
So here I have an example with myLastname,
that it handle a null value, is operators.

20
00:01:22.192 --> 00:01:26.300
Because actually,
if you wanna get the length of the string,

21
00:01:26.300 --> 00:01:28.277
it's not working, like so.

22
00:01:28.277 --> 00:01:33.248
Because if you do this, I mean in Java or
in JavaScript, it works.

23
00:01:33.248 --> 00:01:38.131
But you might have the well known friend,
null pointer exception or

24
00:01:38.131 --> 00:01:41.652
null reference exception in C#,
for example.

25
00:01:41.652 --> 00:01:45.483
That is actually pretty annoying, right?

26
00:01:45.483 --> 00:01:49.184
Well, Kotlin will force you
to manage the situation,

27
00:01:49.184 --> 00:01:52.086
because now myLastName can accept nulls.

28
00:01:52.086 --> 00:01:58.107
I need to do something because maybe there
is no last name to ask for a length.

29
00:01:58.107 --> 00:01:59.457
So I need to operate.

30
00:01:59.457 --> 00:02:02.609
This is not gonna work, and
it's not going to compile.

31
00:02:02.609 --> 00:02:07.010
I need to make a decision,
okay, about the null situation.

32
00:02:07.010 --> 00:02:10.818
So the first possible decision
is to use an operator that has

33
00:02:10.818 --> 00:02:14.793
a weird name to remember,
that not null assertion operator.

34
00:02:14.793 --> 00:02:20.185
It's actually double exclamation mark.

35
00:02:20.185 --> 00:02:23.105
For those of you coming from Swift,
there we have

36
00:02:23.105 --> 00:02:28.037
a similar operator with one exclamation
mark, here it's two exclamation mark.

37
00:02:28.037 --> 00:02:32.962
In this case, we are saying
that we know or as developers,

38
00:02:32.962 --> 00:02:39.110
we are guaranteeing the developer that
it has a value and it's not null.

39
00:02:39.110 --> 00:02:42.098
And this is like on Java,
just asking for the length, and

40
00:02:42.098 --> 00:02:43.917
I don't care if it's null or not.

41
00:02:43.917 --> 00:02:48.451
Of course, if it's null,
your app will crash, okay?

42
00:02:48.451 --> 00:02:52.547
But it is a way to bypass the compiler,
and saying,

43
00:02:52.547 --> 00:02:57.513
compiler, I know you don't like this,
but trust me, okay?

44
00:02:57.513 --> 00:03:01.784
Go ahead and try to get the length, okay?

45
00:03:01.784 --> 00:03:08.311
So we try to avoid the usage of
this operator as much as possible.

46
00:03:08.311 --> 00:03:13.178
We use these will control exceptions,
okay?

47
00:03:13.178 --> 00:03:14.709
What other operators we have?

48
00:03:14.709 --> 00:03:20.584
We have another one called the safe call,
the safe call, it's actually like this.

49
00:03:20.584 --> 00:03:24.855
It's using question mark dot,
so in this case,

50
00:03:24.855 --> 00:03:30.390
the safe call will actually call
length only if it's not null.

51
00:03:30.390 --> 00:03:35.544
And if it's null, it's going to return
null to the color of the expression.

52
00:03:35.544 --> 00:03:42.551
So actually, the type of length, if I zoom
in a little bit, so you can see the type.

53
00:03:42.551 --> 00:03:45.834
It's Int?.

54
00:03:45.834 --> 00:03:49.986
So the length can be an integer or a null,

55
00:03:49.986 --> 00:03:56.597
because if the last name is null,
I don't have a length, okay?

56
00:03:56.597 --> 00:04:00.209
So that's the safe call,
similar to other languages.

57
00:04:00.209 --> 00:04:02.638
It's the same syntax.

58
00:04:02.638 --> 00:04:07.579
And finally, we have an operator for
default values.

59
00:04:07.579 --> 00:04:14.494
So for example, if we use a safe
operator but I actually want an integer.

60
00:04:14.494 --> 00:04:18.677
I want an integer,
I don't want an optional integer.

61
00:04:18.677 --> 00:04:23.901
I can set the default value,
and we set the default

62
00:04:23.901 --> 00:04:29.634
value with ?:, okay, so and
then the body from a 0.

63
00:04:29.634 --> 00:04:33.252
So if this expression is null,

64
00:04:33.252 --> 00:04:38.269
it will use 0, the default value, okay?

65
00:04:38.269 --> 00:04:39.389
Does it make sense?

66
00:04:39.389 --> 00:04:44.976
This is like in Swift or in JavaScript,
now we have this operator, the ??.

67
00:04:44.976 --> 00:04:48.983
Well, here, it's ?:, and
I have a question for you.

68
00:04:48.983 --> 00:04:52.263
Can you guess the name of this operator?

69
00:04:52.263 --> 00:04:56.517
You know it because you're laughing,
so you know the answer.

70
00:04:56.517 --> 00:05:01.271
This operator has a name in Kotlin,
what's the name?

71
00:05:01.271 --> 00:05:04.579
&gt;&gt; I had to look at the picture to figure
this out, but it's the Elvis operator.

72
00:05:04.579 --> 00:05:06.623
&gt;&gt; The Elvis operator.

73
00:05:06.623 --> 00:05:08.687
Why is called the Elvis operator?

74
00:05:08.687 --> 00:05:10.432
I'm talking about that one, okay?

75
00:05:10.432 --> 00:05:16.298
Because if you turn your
head anti-clockwise,

76
00:05:16.298 --> 00:05:19.594
it should be 90 degrees.

77
00:05:19.594 --> 00:05:24.533
It seemed for someone that it
looks like the Elvis hair, okay?

78
00:05:24.533 --> 00:05:27.691
Fortunately, it's not called
the Donald Trump operator, right,

79
00:05:27.691 --> 00:05:29.276
because it can be applied as well.

80
00:05:29.276 --> 00:05:32.147
We aren't talking about politics,
I'm talking about hair here.

81
00:05:32.147 --> 00:05:36.813
So it's called the Elvis operator because
it looks like Elvis Presley hair, okay,

82
00:05:36.813 --> 00:05:37.741
the curly hair.

83
00:05:37.741 --> 00:05:38.809
I don't know.

84
00:05:38.809 --> 00:05:41.837
Anyway, a funny fact about Kotlin.

85
00:05:41.837 --> 00:05:46.525
Okay, now you will see the hair when you
look at that operator, I promise you,

86
00:05:46.525 --> 00:05:49.881
because I'm seeing the hair,
every time I'm seeing.

87
00:05:49.881 --> 00:05:53.470
Okay, so those are the null safety
operators available in Kotlin.

