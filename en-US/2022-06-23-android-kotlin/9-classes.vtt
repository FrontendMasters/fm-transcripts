WEBVTT

1
00:00:00.000 --> 00:00:04.130
OOP, because we are working with classes,
we're working with OOP.

2
00:00:04.130 --> 00:00:06.899
Classes, we have full support for
OOP because remember,

3
00:00:06.899 --> 00:00:09.278
this compiles to Java as
I was mentioning before.

4
00:00:09.278 --> 00:00:16.032
So because we are actually compiling to
some kind of a Java VM, we are using OOP.

5
00:00:16.032 --> 00:00:21.118
So unfortunate, but on the same,
I don't wanna say unfortunate,

6
00:00:21.118 --> 00:00:25.771
we're are not going to use a lot
of OOP in JetPack Composable.

7
00:00:25.771 --> 00:00:32.148
So you will see that it's
not based on options, okay?

8
00:00:32.148 --> 00:00:37.492
So first, how to grade the class?

9
00:00:37.492 --> 00:00:42.350
It's not as straightforward when you
look at this for the first time, okay?

10
00:00:42.350 --> 00:00:45.527
I know what you're looking at this and
you're saying, hey, Max,

11
00:00:45.527 --> 00:00:47.551
you're lying to me, you're lying to us.

12
00:00:47.551 --> 00:00:50.525
Because it looks like I
understand what's going on there,

13
00:00:50.525 --> 00:00:53.629
I have a class with a name person and
then they have a property.

14
00:00:53.629 --> 00:00:57.058
It says public id integer
with a default value, and

15
00:00:57.058 --> 00:01:01.306
then they have a function or
a method, and we have this, okay?

16
00:01:01.306 --> 00:01:06.360
So that part is a straightforward,
I think you can get it,

17
00:01:06.360 --> 00:01:09.779
but it gets weird when we move one step.

18
00:01:09.779 --> 00:01:15.046
First, there is no new keywords, so
if you wanna create a new person,

19
00:01:15.046 --> 00:01:18.277
it's not new person, it's just person.

20
00:01:18.277 --> 00:01:22.407
The capital P let me
know as a reader of this

21
00:01:22.407 --> 00:01:26.425
code that this is not a function, okay?

22
00:01:26.425 --> 00:01:30.725
It's a constructor of something,
because it's title case.

23
00:01:30.725 --> 00:01:35.698
It starts with uppercase,
with the capital P, okay?

24
00:01:35.698 --> 00:01:41.914
So far so good, okay, but what if I create
a new class user extending from person?

25
00:01:41.914 --> 00:01:44.275
By the way, how do we say extends from?

26
00:01:44.275 --> 00:01:48.667
Colon, so no extends keyword, just colon.

27
00:01:48.667 --> 00:01:53.732
It doesn't work because by default,
classes are closed.

28
00:01:53.732 --> 00:01:57.456
So you cannot inherit from other class,
which is kind of weird, right?

29
00:01:57.456 --> 00:02:00.093
So when they created Kotlin,

30
00:02:00.093 --> 00:02:05.792
they did a research on open source
repositories with Java code.

31
00:02:05.792 --> 00:02:10.567
And they saw what's the normal situation,
what's the most common situation.

32
00:02:10.567 --> 00:02:14.726
The most common situation with classes,
we don't inherit classes.

33
00:02:14.726 --> 00:02:17.374
So they say, okay,
let's do that by default.

34
00:02:17.374 --> 00:02:22.558
So by default, you cannot inherit
from person, unless you open it.

35
00:02:24.057 --> 00:02:31.337
So you need to explicitly open a class if
you want inheriting from that class, okay?

36
00:02:31.337 --> 00:02:38.568
Also, you can open methods, so
you can override those methods.

37
00:02:38.568 --> 00:02:42.490
Again, I'm giving you the first site, but

38
00:02:42.490 --> 00:02:47.684
we are not going to use this
a lot because JetPack Compose,

39
00:02:47.684 --> 00:02:51.930
the UI frame that we will
use is not based on OOP.

40
00:02:51.930 --> 00:02:56.745
But we may use some of these
techniques anyway at some point.

41
00:02:56.745 --> 00:03:01.930
So we can open a class and
then we can extend from that class,

42
00:03:01.930 --> 00:03:07.869
for example, here I have DBRecord
that is extending from this one.

43
00:03:07.869 --> 00:03:11.911
And if you pay attention here,
when we extend,

44
00:03:11.911 --> 00:03:15.864
we don't just use the name
of the superclass.

45
00:03:15.864 --> 00:03:18.807
We are calling the constructor.

46
00:03:18.807 --> 00:03:24.258
So those parentheses there
are actually calling the constructor.

47
00:03:24.258 --> 00:03:28.358
We will see some examples
of this later anyway, okay?

48
00:03:28.358 --> 00:03:32.100
So constructors,
let's talk about constructors.

49
00:03:32.100 --> 00:03:33.588
This is interesting.

50
00:03:33.588 --> 00:03:35.300
So I'm creating a new class here.

51
00:03:35.300 --> 00:03:39.758
It's open, so I can subclass it,
call request.

52
00:03:39.758 --> 00:03:44.524
And look at this, first,
where is the code look for the class?

53
00:03:44.524 --> 00:03:47.892
Where is the curly braces,
where are the curly braces?

54
00:03:47.892 --> 00:03:53.042
I don't have any,
I'm creating an immutable

55
00:03:53.042 --> 00:03:58.464
variable here directly in
the name of the class.

56
00:03:58.464 --> 00:04:05.068
This is called the primary constructor,
so we don't just have constructors.

57
00:04:05.068 --> 00:04:09.375
We have primary constructors,
we have secondary constructors, and

58
00:04:09.375 --> 00:04:11.203
we have initializer blocks.

59
00:04:11.203 --> 00:04:17.328
So a primary constructor is the one that
you set directly in the name of the class,

60
00:04:17.328 --> 00:04:20.588
and you can receive one or more variables.

61
00:04:20.588 --> 00:04:24.711
Like Int, if you add the prefix val or

62
00:04:24.711 --> 00:04:28.967
var, it also creates a property, and

63
00:04:28.967 --> 00:04:33.357
auto sets the property from its value.

64
00:04:33.357 --> 00:04:34.786
Does it make sense?

65
00:04:34.786 --> 00:04:39.362
So when I'm here,
I'm setting an id and then a url.

66
00:04:39.362 --> 00:04:44.840
Look at these hints, remember those
hints are just hints, they're not there.

67
00:04:44.840 --> 00:04:50.272
Can I call these but
with passing the name?

68
00:04:50.272 --> 00:04:56.901
Yeah, even in the constructor,
I can also name the arguments, okay?

69
00:04:56.901 --> 00:05:03.422
So in this case id, it's being received
but I'm not doing anything with that.

70
00:05:03.422 --> 00:05:07.882
It's not creating a property, okay,
because it doesn't contain var or val.

71
00:05:07.882 --> 00:05:11.582
If I add a val var, val mutable,

72
00:05:11.582 --> 00:05:15.975
val immutable, now R will have an id.

73
00:05:15.975 --> 00:05:20.162
Okay, so I can print it's id and it's url.

74
00:05:20.162 --> 00:05:25.146
So it's creating a property, receiving
that property in the constructor,

75
00:05:25.146 --> 00:05:29.527
in the primary constructor and
saving it in a value for later usage.

76
00:05:29.527 --> 00:05:34.303
And if you don't have any more
properties or functions, that's all,

77
00:05:34.303 --> 00:05:37.337
you don't need to open curly braces, okay?

78
00:05:37.337 --> 00:05:39.873
Maybe you're thinking,
that doesn't seem so useful.

79
00:05:39.873 --> 00:05:46.218
But there are many cases where you just
need to create a little structure for

80
00:05:46.218 --> 00:05:50.558
some data and that's all,
well, simple, okay?

81
00:05:50.558 --> 00:05:53.135
And we have initializer blocks.

82
00:05:53.135 --> 00:05:55.779
An initializer block
is just an init block,

83
00:05:55.779 --> 00:05:58.429
there are no parentheses
in the init block.

84
00:05:58.429 --> 00:06:06.420
And it's just a code that is going to be
executed after the object is implemented.

85
00:06:06.420 --> 00:06:11.434
After you create an object, an instance
of this class, it will just call init.

86
00:06:11.434 --> 00:06:16.230
It doesn't matter if it's
coming from here or not.

87
00:06:16.230 --> 00:06:21.080
And by the way, look at constructors here
in the signature, this takes time, okay?

88
00:06:21.080 --> 00:06:23.198
When you're signing, you get used to this.

89
00:06:23.198 --> 00:06:27.344
So the superclass receives
a URL in the argument.

90
00:06:27.344 --> 00:06:31.263
Well, actually,
I can just change the primary constructor.

91
00:06:31.263 --> 00:06:33.225
So now we receive an id also.

92
00:06:33.225 --> 00:06:37.191
So here I'm extending
from this constructor.

93
00:06:37.191 --> 00:06:42.881
So my primary constructor is extending
from my superclass primary contractor,

94
00:06:42.881 --> 00:06:45.315
I'm executing its constructor.

95
00:06:45.315 --> 00:06:50.839
And right now, I'm passing a 0 as a first
argument on the URL that I have here,

96
00:06:50.839 --> 00:06:59.179
I'm passing that URL as
a second argument there, Okay?

97
00:06:59.179 --> 00:07:02.887
It feels weird, but you get used to that.

98
00:07:02.887 --> 00:07:04.437
And what about other constructors?

99
00:07:04.437 --> 00:07:09.458
Well, you can create secondary
constructor with the constructor key.

100
00:07:09.458 --> 00:07:12.783
So you have the constructor keyword and
different argument.

101
00:07:12.783 --> 00:07:19.015
So for example, here you can construct
this user class in three ways.

102
00:07:19.015 --> 00:07:23.993
The primary constructor, that is actually

103
00:07:23.993 --> 00:07:28.708
passing an id, the name, or id and name.

104
00:07:28.708 --> 00:07:32.098
Three ways to construct this.

105
00:07:32.098 --> 00:07:34.104
Does it make sense?

106
00:07:34.104 --> 00:07:39.529
Question for you,
how many properties do I have in user?

107
00:07:39.529 --> 00:07:40.711
&gt;&gt; Three.

108
00:07:40.711 --> 00:07:42.601
&gt;&gt; Three.

109
00:07:42.601 --> 00:07:43.238
&gt;&gt; One.

110
00:07:43.238 --> 00:07:50.125
&gt;&gt; One, we have two.

111
00:07:50.125 --> 00:07:54.609
I have name, that is actually clearly
defined here as a property, and

112
00:07:54.609 --> 00:07:57.889
id because it has a bow in
the primary constructor.

113
00:07:57.889 --> 00:07:59.277
So it's also property.

114
00:07:59.277 --> 00:08:05.177
Sometimes we write this like this, Or

115
00:08:05.177 --> 00:08:09.211
you can actually do this if you want.

116
00:08:09.211 --> 00:08:12.462
So typically, we put it like that.

117
00:08:12.462 --> 00:08:17.256
So if you receive properties here,
so you can see all the properties,

118
00:08:17.256 --> 00:08:22.310
the ones that in the primary constructor
and the other properties align.

119
00:08:22.310 --> 00:08:28.695
Let's remove the private, so
maybe we'll become clearer, like that.

120
00:08:28.695 --> 00:08:29.780
So how many properties?

121
00:08:29.780 --> 00:08:30.817
Well, I have two.

122
00:08:30.817 --> 00:08:37.203
One is coming from the constructor and
the other one is clear outside, okay?

123
00:08:37.203 --> 00:08:41.225
And that's all for
now in terms of classes, okay?

124
00:08:41.225 --> 00:08:42.711
It's not a big deal.

125
00:08:42.711 --> 00:08:46.966
And before jumping into JetPack Compose
and start creating our app,

126
00:08:46.966 --> 00:08:52.112
the final part I wanna show you quickly,
because we're not going to use this a lot.

127
00:08:52.112 --> 00:08:55.153
Is some other type that you
can use in copying that

128
00:08:55.153 --> 00:08:58.205
might not be available
on every other language.

129
00:08:58.205 --> 00:09:02.310
Interfaces, that's
actually straightforward,

130
00:09:02.310 --> 00:09:06.516
if you know any other OOP
language such as Java, C#.

131
00:09:06.516 --> 00:09:09.404
An interface is just
a list of functions or

132
00:09:09.404 --> 00:09:14.863
properties that then you can implement and
then you're forced to implement.

133
00:09:14.863 --> 00:09:19.600
For example, here I have an interface
called Listener that has one function,

134
00:09:19.600 --> 00:09:21.197
no code in the interface.

135
00:09:21.197 --> 00:09:25.382
And then I can have a class
implementing the interface.

136
00:09:25.382 --> 00:09:30.808
So it's actually forced to override
that function and put some code on it.

137
00:09:30.808 --> 00:09:34.251
So this is similar to Java,
nothing really fancy.

138
00:09:34.251 --> 00:09:42.669
Objects, so it's common in Java that
sometimes you need to create an object.

139
00:09:42.669 --> 00:09:45.925
But you don't wanna create more
instances of that class, but

140
00:09:45.925 --> 00:09:47.871
you need to create the class anyway.

141
00:09:47.871 --> 00:09:51.312
Or you create an anonymous class,
there's several ways to do that.

142
00:09:51.312 --> 00:09:55.188
In JavaScript, you create objects,
typically with JSON.

143
00:09:55.188 --> 00:10:01.385
So in JavaScript, you create an object,
okay, and you use JSON.

144
00:10:01.385 --> 00:10:05.876
My name, you don't need to create a class
and then construct an object of that

145
00:10:05.876 --> 00:10:09.208
class, you just create
an object of type object, okay?

146
00:10:09.208 --> 00:10:13.735
Well, in Kotlin, we can also do that,
with the keyword object.

147
00:10:13.735 --> 00:10:16.885
So objects are not classes.

148
00:10:16.885 --> 00:10:20.635
So you cannot construct
more objects of that class.

149
00:10:20.635 --> 00:10:28.809
It's just a real object without
actually a class definition, Okay?

150
00:10:28.809 --> 00:10:32.272
And it depends on the case,
but most of the time,

151
00:10:32.272 --> 00:10:35.325
objects also start with capital letters.

152
00:10:35.325 --> 00:10:42.679
Even if it's an instance, because it's
considered a type, more like a variable.

153
00:10:42.679 --> 00:10:46.000
We are going to use some of these options
later, so we will come back to that.

