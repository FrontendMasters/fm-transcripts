WEBVTT

1
00:00:00.254 --> 00:00:00.918
Variables &amp; Types.

2
00:00:00.918 --> 00:00:04.249
So I'm now I'm opening this
Lesson 2 that we have here, okay?

3
00:00:04.249 --> 00:00:11.078
Remember, kts is just this simple way
that we have to see some Kotlin codes.

4
00:00:11.078 --> 00:00:16.310
We can execute this code, but without
attaching this to an actual app, okay?

5
00:00:16.310 --> 00:00:20.096
That's kind of the idea, this is not
an app, we are not building an app.

6
00:00:20.096 --> 00:00:24.777
We're just playing with Kotlin and for
that we use this kts file format that

7
00:00:24.777 --> 00:00:29.476
we'll never see again, we will never
see this format again later, okay.

8
00:00:29.476 --> 00:00:33.828
All the files will be just kt,
that's the extension for Kotlin.

9
00:00:33.828 --> 00:00:38.048
So we mentioned that it's
an statically typed language.

10
00:00:38.048 --> 00:00:41.019
So actually every variable
will have a type.

11
00:00:41.019 --> 00:00:45.596
So in this case, data will have a type
even if I don't see explicitly any type.

12
00:00:45.596 --> 00:00:51.517
If you hover with your cursor,
you will see there that it says,

13
00:00:51.517 --> 00:00:54.659
integer is really small, okay?

14
00:00:54.659 --> 00:00:59.680
But let me see if I can zoom
in a little bit, like so.

15
00:00:59.680 --> 00:01:03.006
So you can see it says,
the data is an int.

16
00:01:03.006 --> 00:01:08.230
So it's actually using, It's actually

17
00:01:08.230 --> 00:01:13.603
inferring the type based on
the value that I'm setting.

18
00:01:13.603 --> 00:01:17.237
But if I want to,
I can use colon and the type,

19
00:01:17.237 --> 00:01:22.047
such as Int, capital I,
because it's a data type, okay?

20
00:01:22.047 --> 00:01:26.718
So be careful if you're coming from other

21
00:01:26.718 --> 00:01:31.395
languages where int is with lowercase i.

22
00:01:31.395 --> 00:01:36.214
So this is a mutable variable,
we use var for variable, okay?

23
00:01:36.214 --> 00:01:41.949
But we also have immutable variables with
the keyword val from value, val, not var.

24
00:01:41.949 --> 00:01:45.414
By the way, do you know the difference

25
00:01:45.414 --> 00:01:49.756
between an immutable variable and
a constant?

26
00:01:49.756 --> 00:01:51.954
Does anyone know the difference between?

27
00:01:51.954 --> 00:01:53.763
&gt;&gt; It's compiling time.

28
00:01:53.763 --> 00:01:56.207
&gt;&gt; Compiling time,
it has to do with that, exactly.

29
00:01:56.207 --> 00:02:00.861
A constant value is something that needs
to be defined at compilation time,

30
00:02:00.861 --> 00:02:05.602
when you're compiling the app,
the value must be set, that's a constant.

31
00:02:05.602 --> 00:02:08.201
An immutable variable, it's a variable, so

32
00:02:08.201 --> 00:02:12.067
it's actually a place in memory
when you're executing the app, but

33
00:02:12.067 --> 00:02:16.886
the idea is that once you set the value,
it's immutable, so you cannot change that.

34
00:02:16.886 --> 00:02:22.490
So for example, in Kotlin we have both,
constant and immutable variables.

35
00:02:22.490 --> 00:02:24.371
Typically we use immutable variables.

36
00:02:24.371 --> 00:02:29.213
Immutable variables can be set with values
coming from a database, from the network,

37
00:02:29.213 --> 00:02:30.885
from what the user is typing.

38
00:02:30.885 --> 00:02:35.791
A constant, no, a constant must
be set at compilation time.

39
00:02:35.791 --> 00:02:40.340
So a constant is actually const val,
that's how you set that.

40
00:02:40.340 --> 00:02:43.363
And we don't have global constants,

41
00:02:43.363 --> 00:02:48.187
they must be part of an structure
such as an object or a class.

42
00:02:48.187 --> 00:02:52.049
We don't know what an object is,
please give me a minute, okay?

43
00:02:52.049 --> 00:02:57.454
So have in mind that, so
if you're coming from other languages,

44
00:02:57.454 --> 00:03:02.881
val is like let in Swift,
it's like const in JavaScript, okay?

45
00:03:02.881 --> 00:03:05.106
But here it's val.

46
00:03:05.106 --> 00:03:09.447
Then types, as I mentioned before,
we use colon, okay, but if not,

47
00:03:09.447 --> 00:03:10.710
they are inferred.

48
00:03:10.710 --> 00:03:15.276
Similar to other languages with type
inference, we might have a problem.

49
00:03:15.276 --> 00:03:19.707
For example, we have a price that is
a double, other price, it's also double,

50
00:03:19.707 --> 00:03:23.833
because I'm setting a value,
even if I'm not explicitly saying double.

51
00:03:23.833 --> 00:03:28.263
But sometimes we want the double,
but we are getting an integer.

52
00:03:28.263 --> 00:03:31.515
That's because 23 is an integer.

53
00:03:31.515 --> 00:03:38.834
Well, we can solve the problem with .0,
in that case it's a double.

54
00:03:38.834 --> 00:03:40.835
So, .0 will force a double.

55
00:03:40.835 --> 00:03:45.842
Also you can force explicitly the type.

56
00:03:45.842 --> 00:03:48.565
In case you have this ambiguity,

57
00:03:48.565 --> 00:03:53.240
you can resolve those ambiguities
by defining the type.

58
00:03:53.240 --> 00:03:57.253
A double is by default
a double precision float.

59
00:03:57.253 --> 00:04:02.011
We also have the type float,
and there is an F that we can

60
00:04:02.011 --> 00:04:06.874
add here to explicitly say
that we don't want a double,

61
00:04:06.874 --> 00:04:10.400
we want a lower precision float, okay?

62
00:04:10.400 --> 00:04:12.907
We don't going to use this a lot actually,
okay?

63
00:04:12.907 --> 00:04:15.313
But have in mind it's there.

64
00:04:15.313 --> 00:04:18.284
We have a structural equality,
that's double equals, and

65
00:04:18.284 --> 00:04:20.332
triple equals is referential equality.

66
00:04:20.332 --> 00:04:24.892
So the first one is actually like
executing the equals method of that

67
00:04:24.892 --> 00:04:27.621
object to see if the contents are equal.

68
00:04:27.621 --> 00:04:31.853
For example, dual strings will give
me true, but will give me false on

69
00:04:31.853 --> 00:04:36.324
referential equality because I'm
actually making two objects, okay?

70
00:04:36.324 --> 00:04:39.588
So this is true because they
have the same value and

71
00:04:39.588 --> 00:04:43.016
this is false because there
are different objects.

72
00:04:43.016 --> 00:04:45.827
Every time we create a literal string,

73
00:04:45.827 --> 00:04:49.669
it's actually a different
object in memory, okay?

74
00:04:49.669 --> 00:04:53.626
Similar to what you have on other
languages, it's similar to JavaScript.

75
00:04:53.626 --> 00:04:58.301
It's not the same but
similar to the idea in JavaScript.

76
00:04:58.301 --> 00:05:02.018
Core data types, strings,
characters is char,

77
00:05:02.018 --> 00:05:05.210
int, double, Boolean, and we have Any.

78
00:05:05.210 --> 00:05:08.743
We don't typically use Any a lot,
but Any means, well,

79
00:05:08.743 --> 00:05:11.626
in this variable I can
hold any kind of option.

80
00:05:11.626 --> 00:05:17.149
And then you need to cast or ask for
a type before actually using it, okay?

81
00:05:17.149 --> 00:05:22.009
As I mentioned, we have float,
also for integers, we have bytes,

82
00:05:22.009 --> 00:05:23.560
shorts, and longs.

83
00:05:23.560 --> 00:05:28.082
So integers actually
goes between short and

84
00:05:28.082 --> 00:05:32.487
long in terms of how many bits it's using.

85
00:05:32.487 --> 00:05:35.250
We use double quotes for strings, okay?

86
00:05:35.250 --> 00:05:42.349
We also have a way to create a multiline
string using triple double quotes, okay?

87
00:05:42.349 --> 00:05:49.111
And this is multiline, and the multiline,
it's actually pretty good,

88
00:05:49.111 --> 00:05:53.910
for example, for
JSON because now you don't need to

89
00:05:53.910 --> 00:06:00.410
escape, The quotes, okay?

90
00:06:00.410 --> 00:06:02.000
So, something like that.

91
00:06:02.000 --> 00:06:05.308
On every string we have
template expressions.

92
00:06:05.308 --> 00:06:09.997
Template expressions are using
the dollar sign when it's just

93
00:06:09.997 --> 00:06:11.775
the name of a variable.

94
00:06:11.775 --> 00:06:18.392
Or we use the dollar sign and a code
block for a more complex expression.

95
00:06:18.392 --> 00:06:26.280
And it's going to make a replacement
automatically on that string.

96
00:06:26.280 --> 00:06:29.536
So that's pretty straightforward and
easy to use.

97
00:06:30.637 --> 00:06:32.830
Similar to JavaScript in that case.

