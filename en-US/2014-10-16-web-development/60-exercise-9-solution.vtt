WEBVTT

1
00:00:00.000 --> 00:00:03.845
[MUSIC]

2
00:00:03.845 --> 00:00:06.550
&gt;&gt; Brian Holt: All right, so
how we doing with the click listener part?

3
00:00:06.550 --> 00:00:08.371
Are we doing okay with that?

4
00:00:10.455 --> 00:00:13.688
&gt;&gt; Brian Holt: All right, so
because we're nice people and

5
00:00:13.688 --> 00:00:19.143
we like to let our users know, in fact
I'll just start going along with you.

6
00:00:21.853 --> 00:00:24.073
&gt;&gt; Brian Holt: We're gonna have,
what did I call that button?

7
00:00:26.208 --> 00:00:26.708
&gt;&gt; Speaker 2: BTN.

8
00:00:26.708 --> 00:00:27.648
&gt;&gt; Brian Holt: BTN.

9
00:00:30.522 --> 00:00:38.840
&gt;&gt; Brian Holt: So we are going to
have ('.btn').click(function(), okay.

10
00:00:38.840 --> 00:00:39.390
Voila!

11
00:00:39.390 --> 00:00:39.890
Click listener.

12
00:00:41.850 --> 00:00:43.890
Okay, and let's just like,

13
00:00:43.890 --> 00:00:46.490
we'll just throw up an alert real quick
just to make sure that actually works.

14
00:00:46.490 --> 00:00:49.860
Like you'll find that this is a common
practice like did this actually work?

15
00:00:49.860 --> 00:00:52.290
Does this actually do
what I think it does?

16
00:00:52.290 --> 00:00:57.040
So we click here hey if actually does
like listen for click events, okay.

17
00:00:57.040 --> 00:00:58.670
So awesome.

18
00:00:58.670 --> 00:01:01.570
Step one done, okay.

19
00:01:01.570 --> 00:01:06.416
Let's go ahead and throw up a little
loading thing to be nice to our users, so

20
00:01:06.416 --> 00:01:08.560
what did I comment a little text.

21
00:01:08.560 --> 00:01:11.390
I guess that's a misnomer
because it's not actually gonna

22
00:01:11.390 --> 00:01:14.418
be text after we're done with it but
we'll be okay.

23
00:01:14.418 --> 00:01:21.700
Text dot yeah, go ahead.

24
00:01:21.700 --> 00:01:25.060
&gt;&gt; Speaker 2: Somebody tried to declare
a function before the ajax call and

25
00:01:25.060 --> 00:01:31.210
then they wanted to call that function,
where the anonymous function was declared.

26
00:01:31.210 --> 00:01:33.050
&gt;&gt; Brian Holt: Sure you can do that.

27
00:01:33.050 --> 00:01:35.090
&gt;&gt; Speaker 2: But
he says it's not working I guess.

28
00:01:35.090 --> 00:01:36.921
&gt;&gt; Brian Holt: Okay, so
you'd have like function.

29
00:01:39.881 --> 00:01:43.460
&gt;&gt; Brian Holt: I guess it'd be
like var function = responder or

30
00:01:43.460 --> 00:01:45.650
something like that, okay.

31
00:01:47.000 --> 00:01:54.186
Or sorry, var responder = function, okay.

32
00:01:54.186 --> 00:01:57.258
And we'll just throw our alert in here,
right.

33
00:01:57.258 --> 00:02:00.020
Alert here and here you would,

34
00:02:00.020 --> 00:02:05.553
rather than putting in a function,
you would say responder.

35
00:02:05.553 --> 00:02:08.226
There should look somewhat familiar right,

36
00:02:08.226 --> 00:02:11.753
like you can pass functions
around like variables, okay.

37
00:02:11.753 --> 00:02:15.938
And then we should be able to click
there and assess here, right.

38
00:02:15.938 --> 00:02:20.337
That's also possible, I'm a big proponent
of doing anonymous function in listener

39
00:02:20.337 --> 00:02:23.573
because typically you only want
to call that from one place, so

40
00:02:23.573 --> 00:02:25.241
it makes sense to do it that way.

41
00:02:37.798 --> 00:02:44.746
&gt;&gt; Brian Holt: Okay, so
let's throw up a .text.text.

42
00:02:44.746 --> 00:02:49.840
Didn't actually mean to do it that way and
we're gonna say loading right like that.

43
00:02:51.640 --> 00:02:53.740
So now when we click it says loading.

44
00:02:53.740 --> 00:02:57.840
Okay, so now our user is informed,
it's like I have received your input.

45
00:02:57.840 --> 00:03:01.611
Hold tight, and I'm gonna give you
this thing that you're looking for.

46
00:03:06.404 --> 00:03:09.884
&gt;&gt; Brian Holt: Okay, so now this is
where we actually go out and like,

47
00:03:09.884 --> 00:03:11.480
reach out to the server.

48
00:03:12.560 --> 00:03:16.080
So, what jQuery functionality
am I gonna use?

49
00:03:18.220 --> 00:03:23.930
Ajax, awesome, so, I'll give you a sec to,
to give that a shot again if you,

50
00:03:23.930 --> 00:03:27.920
if you want to, if you want to
refer back to the one where we were

51
00:03:27.920 --> 00:03:31.600
reaching out to the Meetup API, probably
would be a pretty good thing to do.

52
00:03:38.680 --> 00:03:42.970
The one thing I will caution you that is
different from the previous one is that

53
00:03:42.970 --> 00:03:49.110
part where it says JSON for the Meetup API
just leave that entire line out for here.

54
00:03:49.110 --> 00:03:49.915
You don't wanna bring that over.

55
00:03:53.375 --> 00:03:55.725
&gt;&gt; Brian Holt: Reason being
that the Reddit API and

56
00:03:55.725 --> 00:03:58.550
the Meetup API work differently that way.

57
00:04:00.410 --> 00:04:03.556
Why don't we even go back for
just a sec and bring it up here.

58
00:04:06.572 --> 00:04:10.672
&gt;&gt; Brian Holt: Let's even
go back to the earlier one

59
00:04:10.672 --> 00:04:14.780
that's just really simple, okay.

60
00:04:16.490 --> 00:04:18.080
Again this is the meetup
one that you click and

61
00:04:18.080 --> 00:04:21.850
it just blahs all over your web page.

62
00:04:23.000 --> 00:04:25.720
You got text out loading
just like in our other one.

63
00:04:25.720 --> 00:04:28.390
We're going to do dollar
sign dot ajax right.

64
00:04:28.390 --> 00:04:29.629
Still doing a get request.

65
00:04:30.830 --> 00:04:32.700
We're going to a different URL.

66
00:04:32.700 --> 00:04:34.710
We're going to the read it
API not the meet up API, and

67
00:04:34.710 --> 00:04:38.500
then we're going to have
a success function in there.

68
00:04:38.500 --> 00:04:40.710
Should look somewhat like this.

69
00:04:40.710 --> 00:04:43.080
In fact, if you wanted to just test
it out to make sure it's working,

70
00:04:43.080 --> 00:04:47.022
just go ahead and throw literally
this exact line in there, right.

71
00:04:47.022 --> 00:04:50.276
Text.text json.stringified data and
you'll see it.

72
00:04:50.276 --> 00:04:56.545
It should just blah the entire
Reddit API response all over web page.

73
00:04:57.606 --> 00:05:02.608
&gt;&gt; Brian Holt: Honestly,
this is pretty much unchanged,

74
00:05:02.608 --> 00:05:07.609
other than leaving out datatype, JSONP and

75
00:05:07.609 --> 00:05:12.630
change the URL and then it should work.

76
00:05:12.630 --> 00:05:16.980
Again, just as an overarching
concept about learning to program.

77
00:05:16.980 --> 00:05:20.680
There is no shame, there is nothing wrong
from copying other people doing and

78
00:05:20.680 --> 00:05:23.310
modifying it to your own use case.

79
00:05:24.340 --> 00:05:25.540
My only caveat to that is,

80
00:05:25.540 --> 00:05:29.220
do your absolute best to understand
what's going on and why you're doing it.

81
00:05:29.220 --> 00:05:32.035
It's a really bad thing to pull code out,
throw it on a page and

82
00:05:32.035 --> 00:05:33.836
then not understand what's going on.

83
00:05:45.713 --> 00:05:51.336
&gt;&gt; Brian Holt: Okay, so let's go ahead and
work on this API call a little bit.

84
00:05:51.336 --> 00:05:55.450
So as you might imagine, $.ajax.

85
00:05:55.450 --> 00:06:03.002
Okay,
&gt;&gt; Brian Holt: Type: "GET".

86
00:06:03.002 --> 00:06:08.982
url,
&gt;&gt; Brian Holt: Sorry,

87
00:06:08.982 --> 00:06:14.670
not function rather we want just
literally copy and pasting this.

88
00:06:16.340 --> 00:06:20.400
I guess it's not literally I'm
not cutting it out of my monitor.

89
00:06:20.400 --> 00:06:22.666
But figuratively copying and pasting.

90
00:06:25.156 --> 00:06:28.020
&gt;&gt; Brian Holt: Okay, with me so far?

91
00:06:28.020 --> 00:06:29.836
And then we just need to
give it a success listener.

92
00:06:31.990 --> 00:06:35.054
&gt;&gt; Brian Holt: Which by the way,
we were talking about events,

93
00:06:35.054 --> 00:06:40.760
this success function is just an event
listener just like a click function is.

94
00:06:40.760 --> 00:06:44.300
The ajax goes out, it completes and
it fires off an event and it says hey.

95
00:06:44.300 --> 00:06:48.140
I finished the thing that I was doing.

96
00:06:48.140 --> 00:06:49.600
Okay, he finished.

97
00:06:49.600 --> 00:06:50.760
I was listening for that.

98
00:06:50.760 --> 00:06:51.910
Now I'm going to go do this.

99
00:06:53.310 --> 00:06:54.496
Same concept at play here.

100
00:06:57.536 --> 00:06:58.996
&gt;&gt; Brian Holt: Okay and
now we're gonna say.

101
00:07:03.026 --> 00:07:06.591
&gt;&gt; Brian Holt: Somebody might be wondering
where this data comes from like is it just

102
00:07:06.591 --> 00:07:07.150
magical?

103
00:07:07.150 --> 00:07:10.640
It's one of those things that you have

104
00:07:11.640 --> 00:07:17.180
just to know that the API documentation
will tell you that whenever a success

105
00:07:17.180 --> 00:07:19.890
function comes back from jQuery
it's just going to give you data.

106
00:07:19.890 --> 00:07:22.578
It is this way because they
programmed it that way,

107
00:07:22.578 --> 00:07:25.276
and you know that by looking
at the documentation.

108
00:07:27.956 --> 00:07:30.710
&gt;&gt; Brian Holt: So
there's not some secret handshake or

109
00:07:30.710 --> 00:07:35.732
something that you don't know about
that's going on behind the scenes,

110
00:07:35.732 --> 00:07:40.687
it's just you have to read the
documentation to figure that out, okay.

111
00:07:40.687 --> 00:07:45.730
$('.text').text then we

112
00:07:45.730 --> 00:07:51.316
do a JSON.stringify the data okay.

113
00:07:58.695 --> 00:08:02.015
&gt;&gt; Brian Holt: Lo and
behold, now when we click.

114
00:08:05.515 --> 00:08:09.673
&gt;&gt; Brian Holt: Here we're getting the
entire response just kind of vomited out

115
00:08:09.673 --> 00:08:11.682
on the page in all of its glory.

116
00:08:15.442 --> 00:08:16.970
&gt;&gt; Brian Holt: We follow this so far?

117
00:08:16.970 --> 00:08:17.970
This makes sense?

118
00:08:17.970 --> 00:08:24.124
This is just more or less reviewing what
exactly we did with the meet up one, okay?

119
00:08:24.124 --> 00:08:27.660
All right so,

120
00:08:27.660 --> 00:08:32.980
question now becomes, we want to
display them nicely as images, right?

121
00:08:32.980 --> 00:08:36.030
We don't want it to just throw up on the
page, we actually want it to do something.

122
00:08:37.250 --> 00:08:39.730
Okay, so the first thing we need
to do is we need to go back and

123
00:08:39.730 --> 00:08:41.210
look at what the data looks like.

124
00:08:41.210 --> 00:08:46.590
In this case,
we have a thing called data, right,

125
00:08:46.590 --> 00:08:52.050
and that's where all of our data is being
stored and it's inside of data.children.

126
00:08:52.050 --> 00:08:54.830
So let's get rid of that one.

127
00:08:56.200 --> 00:09:02.170
So let's just get rid of this, okay?

128
00:09:04.690 --> 00:09:09.980
So, we need to loop over data.children,
right, because there's many

129
00:09:09.980 --> 00:09:13.050
entries in data.children and we wanna get
all the images out of each one of them.

130
00:09:14.170 --> 00:09:15.630
So, we're gonna write a for loop.

131
00:09:15.630 --> 00:09:18.922
Right, that should sound like something
that you would use a for loop for, okay?

132
00:09:18.922 --> 00:09:25.662
So for var i = 0; i is less than what?

133
00:09:25.662 --> 00:09:27.830
So we have data which is the whole object.

134
00:09:27.830 --> 00:09:30.232
In fact I'm gonna change
the name of this to be response.

135
00:09:32.332 --> 00:09:34.380
&gt;&gt; Brian Holt: They might say
like you can't do that, right?

136
00:09:34.380 --> 00:09:35.210
It's called data.

137
00:09:35.210 --> 00:09:36.830
Well in reality,
you can call whatever you want.

138
00:09:36.830 --> 00:09:42.470
You can call this like, thisIsNotData or
whatever you want to call it, right?

139
00:09:42.470 --> 00:09:45.350
This is totally up to you to call it,

140
00:09:45.350 --> 00:09:48.470
you just have to know that the data's
always gonna come in that first parameter.

141
00:09:48.470 --> 00:09:50.170
So whatever you call that first parameter,

142
00:09:50.170 --> 00:09:53.020
that's just from there on out
you have to call it that.

143
00:09:53.020 --> 00:09:56.632
So I'm gonna call it response just for
a little bit of clarity's sake.

144
00:09:56.632 --> 00:10:03.623
So response,
&gt;&gt; Brian Holt: Okay,

145
00:10:03.623 --> 00:10:04.472
and I'll show you, right?

146
00:10:04.472 --> 00:10:07.412
So it's gonna be response.data.

147
00:10:07.412 --> 00:10:10.352
A lot of people, when they see data.data,
get really weirded out.

148
00:10:10.352 --> 00:10:15.490
So I just wanted to clarify where
each one is coming from, okay?

149
00:10:15.490 --> 00:10:20.710
So we're in response.data, which response
is now this entire object, right?

150
00:10:20.710 --> 00:10:23.920
And data is this object right here, right?

151
00:10:23.920 --> 00:10:27.121
So now we need to go into children, right?

152
00:10:27.121 --> 00:10:28.481
Which is right here.

153
00:10:28.481 --> 00:10:33.361
So .children.

154
00:10:33.361 --> 00:10:38.335
And then we wanna loop over all
of children's containing all

155
00:10:38.335 --> 00:10:41.440
the objects inside of it.

156
00:10:41.440 --> 00:10:44.940
So if you remember,
we can do that if we just say .length.

157
00:10:44.940 --> 00:10:49.930
That'll give us the number of
how long children is, okay?

158
00:10:49.930 --> 00:10:55.079
That's it, now we're just gonna say i++
which means at the end of every loop,

159
00:10:55.079 --> 00:10:56.832
increments your counter.

160
00:10:56.832 --> 00:11:03.692
And now we have a for loop that we're
going to loop over each one of them, okay?

161
00:11:03.692 --> 00:11:11.715
So let's,
&gt;&gt; Brian Holt: I

162
00:11:11.715 --> 00:11:16.784
don't want to do an alert cuz
that would be really bad, but

163
00:11:16.784 --> 00:11:23.517
let's just do a console.log of
response.data.children[i], right?

164
00:11:23.517 --> 00:11:28.478
Which is gonna give us each individual
child inside of that array.

165
00:11:28.478 --> 00:11:31.970
So let's just try that,
see what happens here.

166
00:11:33.780 --> 00:11:38.296
Look at our console and we should see a
lot of these objects just been logged out

167
00:11:38.296 --> 00:11:40.952
right, we can look at anyone of them and
see.

168
00:11:42.571 --> 00:11:45.740
&gt;&gt; Brian Holt: Hey look,
this one is called by author puppy, and

169
00:11:45.740 --> 00:11:47.480
it's from Imgur, right?

170
00:11:48.570 --> 00:11:52.260
So now we're just logging out each
individual object that's coming from

171
00:11:52.260 --> 00:11:53.102
the API, okay?

172
00:11:53.102 --> 00:11:55.763
So now we know that our
API call is working, and

173
00:11:55.763 --> 00:11:57.822
we're looping over it correctly.

174
00:11:57.822 --> 00:12:00.140
Are you okay with that so far?

175
00:12:02.870 --> 00:12:06.542
Okay, I'll take that as silent compliance.

176
00:12:09.781 --> 00:12:11.662
&gt;&gt; Brian Holt: So, awesome.

177
00:12:16.702 --> 00:12:18.150
&gt;&gt; Brian Holt: Now we have this data.

178
00:12:19.300 --> 00:12:23.310
We have each individual child
that we can address now, okay?

179
00:12:24.960 --> 00:12:26.880
What do we wanna get out
of each individual child?

180
00:12:26.880 --> 00:12:29.050
Well if you notice,
each child has a thumbnail, right?

181
00:12:29.050 --> 00:12:30.210
So this one has a thumbnail.

182
00:12:30.210 --> 00:12:33.810
We scroll down here,
this one has a thumbnail.

183
00:12:33.810 --> 00:12:35.452
Scroll down a little bit,
this one has a thumbnail.

184
00:12:35.452 --> 00:12:38.312
That's what actually we care about,
cuz that's what we're gonna be displaying.

185
00:12:40.832 --> 00:12:45.238
&gt;&gt; Brian Holt: Okay, so
what we're gonna do is

186
00:12:45.238 --> 00:12:50.464
we're gonna use our jQuery magics and

187
00:12:50.464 --> 00:12:54.080
we're gonna say .text.

188
00:12:54.080 --> 00:12:56.142
What method are we gonna use here?

189
00:12:56.142 --> 00:12:58.442
What happens if we use .HTML here?

190
00:12:58.442 --> 00:13:02.441
We're only gonna see the last one
cuz it's gonna replace all of them.

191
00:13:02.441 --> 00:13:08.450
And the last one will be
the last one displayed, yeah?

192
00:13:08.450 --> 00:13:11.030
&gt;&gt; Speaker 2: Somebody's asking about
they thought success was deprecated,

193
00:13:11.030 --> 00:13:13.670
and you should be using done and fail.

194
00:13:13.670 --> 00:13:17.380
&gt;&gt; Brian Holt: Yeah, so yes but no.

195
00:13:17.380 --> 00:13:22.110
[LAUGH]
So there's a thing in

196
00:13:22.110 --> 00:13:25.020
JavaScript called promises,
we're not talking about them today.

197
00:13:25.020 --> 00:13:28.251
It's kind of the newer way
of dealing with responses.

198
00:13:28.251 --> 00:13:30.939
This is the easier way for
people to get started into it and

199
00:13:30.939 --> 00:13:33.972
they accomplish the same thing so
we're gonna stick with this.

200
00:13:37.151 --> 00:13:39.012
&gt;&gt; Speaker 3: If you're
interesting in learning that one.

201
00:13:39.012 --> 00:13:42.232
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 3: Take the jQuery course.

202
00:13:42.232 --> 00:13:44.220
But deferreds.

203
00:13:45.300 --> 00:13:47.558
&gt;&gt; Brian Holt: Yeah,
I mean they're called deferreds,

204
00:13:47.558 --> 00:13:50.675
promises,
&gt;&gt; Brian Holt: But

205
00:13:50.675 --> 00:13:54.548
yeah, if you're really interested
in learning about that,

206
00:13:54.548 --> 00:13:59.772
go check it out on either Frontend Masters
or search for like JavaScript promises.

207
00:13:59.772 --> 00:14:04.592
Okay, so actually let's just
even build this before.

208
00:14:09.811 --> 00:14:12.220
&gt;&gt; Brian Holt: Oops,
I didn't want to delete that did I?

209
00:14:12.220 --> 00:14:13.062
There we go.
I want that.

210
00:14:19.342 --> 00:14:21.199
&gt;&gt; Brian Holt: So
we're gonna build an image tag now for

211
00:14:21.199 --> 00:14:22.460
each one of these, right?

212
00:14:22.460 --> 00:14:24.930
So we're gonna say this is like my image,
right?

213
00:14:26.010 --> 00:14:29.146
And we're just gonna say img src= and

214
00:14:29.146 --> 00:14:34.310
you just wanna stick its thumbnail there,
right?

215
00:14:34.310 --> 00:14:36.628
So we're gonna put something here but

216
00:14:36.628 --> 00:14:39.822
we're just gonna close
this out real quick, okay?

217
00:14:41.782 --> 00:14:45.917
&gt;&gt; Brian Holt: In the middle here, it's
gonna be this response.data.children[i],

218
00:14:45.917 --> 00:14:49.480
right, in which what do we actually
want to get out of each child?

219
00:14:50.560 --> 00:14:54.512
We want to get the thumbnail, right?

220
00:14:54.512 --> 00:14:59.972
So we're just gonna say .thumbnail.

221
00:14:59.972 --> 00:15:03.668
So this is gonna go into the response
object this is gonna go on the data

222
00:15:03.668 --> 00:15:04.192
object.

223
00:15:04.192 --> 00:15:07.472
Then we're gonna go through
the entire children array.

224
00:15:07.472 --> 00:15:10.250
For each one of them we're
gonna grab out the thumbnail.

225
00:15:11.500 --> 00:15:12.550
That's what that says.

226
00:15:15.460 --> 00:15:17.160
We now have an image tag, right?

227
00:15:18.390 --> 00:15:25.880
So you might be tempted to do
.text .html and then say image.

228
00:15:28.462 --> 00:15:29.201
&gt;&gt; Brian Holt: Let's try that.

229
00:15:33.081 --> 00:15:35.741
&gt;&gt; Brian Holt: Well we got nothing so
that's not good at all.

230
00:15:39.662 --> 00:15:41.160
&gt;&gt; Brian Holt: Unexpected token.

231
00:15:51.302 --> 00:15:54.162
&gt;&gt; Brian Holt: Let's see
var image = "img src".

232
00:15:57.885 --> 00:15:59.443
&gt;&gt; Brian Holt: All of that needs to be.

233
00:16:06.852 --> 00:16:15.092
&gt;&gt; Brian Holt: [INAUDIBLE] Okay, so like
this getting something there but no image.

234
00:16:16.732 --> 00:16:19.520
&gt;&gt; Brian Holt: Source equals undefined so?

235
00:16:19.520 --> 00:16:20.582
What's happening here?

236
00:16:23.242 --> 00:16:25.930
&gt;&gt; Speaker 3: You have a single quote and
a double quote next to each other?

237
00:16:27.530 --> 00:16:30.510
&gt;&gt; Brian Holt: So that's a good question,
why do we have that?

238
00:16:30.510 --> 00:16:33.090
So this is a string literal, so

239
00:16:33.090 --> 00:16:36.340
this is telling JavaScript I
literally want you to put this there.

240
00:16:36.340 --> 00:16:40.220
But if you remember,
when you're looking at source right?

241
00:16:40.220 --> 00:16:48.910
If I go up here and say, ing src= it
needs to have quotes in it, right?

242
00:16:49.950 --> 00:16:55.670
So you actually need to have JavaScript
to print out quotes in there.

243
00:16:58.105 --> 00:16:59.460
It's kind of weird, right?

244
00:16:59.460 --> 00:17:02.620
The other thing is, if you want it to do,
well and the reason why I don't do double

245
00:17:02.620 --> 00:17:05.870
quotes there, cuz otherwise,
JavaScript's gonna get confused.

246
00:17:05.870 --> 00:17:08.680
In fact, you can see my
syntax highly messed up here.

247
00:17:10.060 --> 00:17:12.410
So it doesn't care as long
as your matching quotes.

248
00:17:13.670 --> 00:17:15.200
In fact, now I'm having a hard time.

249
00:17:15.200 --> 00:17:16.310
There you go.

250
00:17:16.310 --> 00:17:22.740
So this is going to be inside the string,
and it's required because JavaScript or

251
00:17:22.740 --> 00:17:26.790
rather HTML needs that quote to
parse the image source correctly.

252
00:17:26.790 --> 00:17:29.863
Does that makes sense?

253
00:17:33.002 --> 00:17:37.300
&gt;&gt; Brian Holt: Response data children.

254
00:17:37.300 --> 00:17:40.070
&gt;&gt; Speaker 2: In check there, actually
do you need a data after the children?

255
00:17:41.870 --> 00:17:43.792
&gt;&gt; Brian Holt: Yep that's it, thank you.

256
00:17:47.992 --> 00:17:52.352
&gt;&gt; Brian Holt: So what they kindly pointed
out to me online is that each child has

257
00:17:52.352 --> 00:17:54.630
its own data attribute, right?

258
00:17:54.630 --> 00:17:57.660
So there's data right there,
there's also data right there.

259
00:17:59.700 --> 00:18:00.970
And notice, I was getting undefined.

260
00:18:00.970 --> 00:18:02.770
Why was I getting undefined?

261
00:18:02.770 --> 00:18:05.160
Because I was trying to access
a property that didn't actually,

262
00:18:05.160 --> 00:18:06.170
that undefined, right?

263
00:18:06.170 --> 00:18:09.130
So JavaScript says, you're trying to
get something that's not defined,

264
00:18:09.130 --> 00:18:11.130
so screw you, have it undefined.

265
00:18:12.170 --> 00:18:14.380
Or here, you asked for
it so you can have it.

266
00:18:14.380 --> 00:18:17.290
[LAUGH] That's probably more akin.

267
00:18:17.290 --> 00:18:19.389
I make JavaScript to be a cruel mistress.

268
00:18:21.060 --> 00:18:22.434
Okay.

269
00:18:22.434 --> 00:18:25.534
&gt;&gt; Brian Holt: Let's try that.

270
00:18:29.154 --> 00:18:32.188
&gt;&gt; Brian Holt: Can you check out
your little puppy right there?

271
00:18:32.188 --> 00:18:35.740
That's nice, okay so
now we have only one image why?

272
00:18:37.390 --> 00:18:41.490
Because we are using HTML when in reality
we should be using append, right?

273
00:18:41.490 --> 00:18:43.680
Cuz we wanna be
continuously adding things.

274
00:18:45.570 --> 00:18:48.710
Okay, so now, we try doing this.

275
00:18:48.710 --> 00:18:50.712
Now behold, many puppies.

276
00:18:53.432 --> 00:18:55.329
&gt;&gt; Brian Holt: Now we still have
this loading thing here, why?

277
00:18:56.490 --> 00:18:59.030
Well when it loops through the first time,
it's not gonna replace it,

278
00:18:59.030 --> 00:19:01.040
it's always going to append.

279
00:19:01.040 --> 00:19:01.980
And once you are done loading,

280
00:19:01.980 --> 00:19:04.520
you actually wanna get rid
of the loading thing right?

281
00:19:04.520 --> 00:19:09.100
So what we would do is, we would just
remove it as soon as it came back.

282
00:19:09.100 --> 00:19:13.966
So before the four loop,
we're just gonna say,

283
00:19:13.966 --> 00:19:19.610
$.text.HTML or text,
either one would be fine.

284
00:19:19.610 --> 00:19:21.250
And just say that.

285
00:19:21.250 --> 00:19:22.920
Please clear out everything you have.

286
00:19:22.920 --> 00:19:23.900
Make yourself an empty string.

287
00:19:23.900 --> 00:19:28.080
I'm about to give you a bunch more
stuff so you can have content.

288
00:19:28.080 --> 00:19:32.050
Now if we say click me,
now we actually have real puppies.

289
00:19:32.050 --> 00:19:33.400
And some of these thumbnails won't work.

290
00:19:34.890 --> 00:19:36.080
Not really sure why but

291
00:19:36.080 --> 00:19:40.970
that's the case and then you can do
all sorts of fun things now, right?

292
00:19:40.970 --> 00:19:45.430
I can say cat, and we'll get kitty's back.

293
00:19:47.050 --> 00:19:48.442
Or we can say duck.

294
00:19:51.042 --> 00:19:52.703
&gt;&gt; Brian Holt: And
we'll get cute ducks back.

295
00:19:54.341 --> 00:19:55.579
&gt;&gt; Brian Holt: Look, little ducks.

296
00:19:57.280 --> 00:19:58.800
Yeah, but kinda cool right?

297
00:19:58.800 --> 00:20:03.460
We've now built this app that will give
us a bunch of cute pictures from Reddit,

298
00:20:03.460 --> 00:20:05.360
really this is kind of
the first app we've built.

299
00:20:07.920 --> 00:20:08.850
Pretty entertaining right?.

300
00:20:11.885 --> 00:20:14.627
Now if you wanna take this a step
further what could you do right?

301
00:20:14.627 --> 00:20:19.238
You could actually have an input box
at the user or put in something and

302
00:20:19.238 --> 00:20:24.166
then you would change the URL here and
you would put whatever the user input

303
00:20:24.166 --> 00:20:28.299
was there and then you would
change what you were searching for

304
00:20:28.299 --> 00:20:30.485
based on what the user asks for.

305
00:20:30.485 --> 00:20:34.960
I hope you kinda start and see here I'm
giving you a bunch of puzzle pieces that

306
00:20:34.960 --> 00:20:38.430
fit together in a bunch of different
ways or like Legos is probably a better

307
00:20:38.430 --> 00:20:42.550
way of putting it and
you can build a spaceship or whatever.

308
00:20:42.550 --> 00:20:46.439
You can build whatever using these
tools whatever you can think of.

309
00:20:49.479 --> 00:20:51.319
&gt;&gt; Brian Holt: Does this make
sense what we've done here?

310
00:20:54.759 --> 00:20:57.379
&gt;&gt; Brian Holt: Now if I asked you to go
write something really similar to this do

311
00:20:57.379 --> 00:20:58.620
you think you could do it now?

312
00:21:02.779 --> 00:21:05.838
&gt;&gt; Brian Holt: The answer is,
probably with difficulty, but

313
00:21:05.838 --> 00:21:08.979
the answer is with difficulty
is better than no.

314
00:21:11.979 --> 00:21:17.484
&gt;&gt; Speaker 4: [CROSSTALK]
Some of the pictures

315
00:21:17.484 --> 00:21:21.319
are coming back as not found.

316
00:21:21.319 --> 00:21:23.738
Is there a way you could capture
that in your loop and say okay.

317
00:21:25.410 --> 00:21:26.305
Don't display those?

318
00:21:26.305 --> 00:21:27.930
[INAUDIBLE]
&gt;&gt; Brian Holt: So

319
00:21:27.930 --> 00:21:32.680
probably what you'd wanna do is you'd
wanna have some, is this a url?

320
00:21:32.680 --> 00:21:37.960
If this is a url, then display it,
if not, don't display it.

321
00:21:37.960 --> 00:21:39.630
So use an if statement, right?

322
00:21:39.630 --> 00:21:45.690
If it's displayable, then display it,
if it's not then don't.

323
00:21:45.690 --> 00:21:49.822
I'm not going to do that right now,
but that's what you would do.

324
00:21:52.862 --> 00:21:55.010
&gt;&gt; Brian Holt: You could also
change the subreddit here.

325
00:21:55.010 --> 00:21:57.610
I do not want to change the subreddit.

326
00:21:57.610 --> 00:21:59.890
I trust aww,
I do not trust the rest of Reddit.

327
00:21:59.890 --> 00:22:03.580
But you could also search for
other things on other subreddits as well.

328
00:22:03.580 --> 00:22:04.801
That's kind of something we could do.

329
00:22:11.462 --> 00:22:12.550
&gt;&gt; Brian Holt: How about this?

330
00:22:12.550 --> 00:22:16.570
Does this little line right here,
the response.data.children.data thumbnail,

331
00:22:16.570 --> 00:22:19.510
do that make sense to people?

332
00:22:19.510 --> 00:22:22.680
Have we talked about that like you're
accessing properties inside of

333
00:22:22.680 --> 00:22:24.640
an object that's just get's really,
really, really nested?

