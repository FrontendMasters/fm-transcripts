WEBVTT

1
00:00:00.000 --> 00:00:03.947
[MUSIC]

2
00:00:03.947 --> 00:00:08.910
&gt;&gt; Brian Holt: So AJAX, this is
a really powerful pattern, it's hard.

3
00:00:08.910 --> 00:00:11.690
So just for warning there.

4
00:00:13.670 --> 00:00:17.280
It stands for Asynchronous JavaScript and
XML which is a misnomer.

5
00:00:20.050 --> 00:00:22.480
It's really just a name that stuck,
everyone calls it AJAX,

6
00:00:22.480 --> 00:00:25.814
I would say most people don't even know
that that's actually what AJAX stands for.

7
00:00:25.814 --> 00:00:30.751
[COUGH] And so, it's just a buzz word that
stuck, and what it really means is like,

8
00:00:30.751 --> 00:00:35.188
so imagine when you load a page,
your computer reaches out to the server,

9
00:00:35.188 --> 00:00:40.340
the server gives you back HTML, CSS,
and JavaScript to load on your page.

10
00:00:40.340 --> 00:00:43.220
That's kind of the pattern
that we're used,

11
00:00:43.220 --> 00:00:48.027
there's another pattern that you
make an asynchronous call or

12
00:00:48.027 --> 00:00:51.150
in other words it's like you've
loaded your page and you

13
00:00:51.150 --> 00:00:54.639
want your JavaScript to reach out to your
server again without refreshing the page.

14
00:00:55.790 --> 00:00:58.080
That process is called AJAX.

15
00:00:58.080 --> 00:01:05.980
So I'm on a page, I say, imagine
an infinite scroll on a product pitch.

16
00:01:05.980 --> 00:01:09.243
In fact, let's just go ahead and
look at one.

17
00:01:09.243 --> 00:01:11.803
Going back to

18
00:01:11.803 --> 00:01:20.210
redditgifts/marketplace/feed.

19
00:01:20.210 --> 00:01:22.056
So here we have this feed of products.

20
00:01:22.056 --> 00:01:24.810
And if you scroll down, it loads more.

21
00:01:26.170 --> 00:01:32.020
So we're not refreshing the page
it's just, this particular

22
00:01:32.020 --> 00:01:35.350
page is reaching out to the server
again and getting more and more data.

23
00:01:35.350 --> 00:01:39.166
I mean, it teach you how to
do this technique right now.

24
00:01:41.825 --> 00:01:45.626
&gt;&gt; Brian Holt: So we're gonna look at two
different APIs over the course of this.

25
00:01:45.626 --> 00:01:47.865
We're gonna look at Meetups.

26
00:01:47.865 --> 00:01:50.334
If you're not familiar with Meetup,

27
00:01:50.334 --> 00:01:55.950
it's essentially that they plan meetups
and they help people make meetups.

28
00:01:55.950 --> 00:01:59.110
They have an API that's just a joy to use.

29
00:01:59.110 --> 00:02:00.690
So we're gonna use that one.

30
00:02:00.690 --> 00:02:04.290
And then of course, we work for Reddit so
we're gonna use the Reddit API.

31
00:02:04.290 --> 00:02:06.925
It's gonna be fun.

32
00:02:08.504 --> 00:02:09.265
&gt;&gt; Brian Holt: Let's keep going here.

33
00:02:12.246 --> 00:02:15.537
&gt;&gt; Brian Holt: AJAX is kind of a pain
in the butt to be totally honest, but

34
00:02:15.537 --> 00:02:19.736
AJAX with jQuery is really simple so
we're just gonna do it with jQuery.

35
00:02:25.836 --> 00:02:26.916
&gt;&gt; Brian Holt: Let's just
jump into an example.

36
00:02:33.696 --> 00:02:39.156
&gt;&gt; Brian Holt: So again, click me,
replace me, HTML is pretty simple here.

37
00:02:39.156 --> 00:02:40.775
Let's just go ahead and
expand this one out.

38
00:02:42.652 --> 00:02:48.010
&gt;&gt; Brian Holt: So
I'll show you first of all what it does.

39
00:02:48.010 --> 00:02:51.620
It just, you click it and it just like
barfs all over the page all of this data.

40
00:02:52.800 --> 00:02:54.200
That's what's happening here.

41
00:02:55.860 --> 00:02:57.660
Let's just refresh the page.

42
00:02:57.660 --> 00:03:00.066
So you can see why that's
happening the way it is.

43
00:03:02.056 --> 00:03:03.700
&gt;&gt; Brian Holt: So button click.

44
00:03:03.700 --> 00:03:06.394
The button refers to this
click new right here.

45
00:03:06.394 --> 00:03:11.130
The .text refers to this
replacement right here and announce

46
00:03:11.130 --> 00:03:15.500
that as soon as the button is clicked,
I indicated these are that we're loading.

47
00:03:15.500 --> 00:03:16.880
I just change the text to say loading.

48
00:03:19.510 --> 00:03:22.112
And then, I call this .ajax method.

49
00:03:22.112 --> 00:03:26.610
And .ajax takes this,
it's call a configuration object.

50
00:03:26.610 --> 00:03:28.470
Like we talk about objects
that have properties for

51
00:03:28.470 --> 00:03:31.080
just feeding in an object that
has a bunch of values on it.

52
00:03:32.790 --> 00:03:36.815
So we gonna do a GET,
which I'll explain here in just a second.

53
00:03:36.815 --> 00:03:40.716
We're gonna reach up this
url which is api,meetup.com.

54
00:03:40.716 --> 00:03:44.626
Like this is like, again I can just put
this up on my browser and it will work.

55
00:03:50.986 --> 00:03:52.366
&gt;&gt; Brian Holt: It's just
a bunch of raw data.

56
00:03:55.666 --> 00:04:00.040
&gt;&gt; Brian Holt: In fact, this is a great
time to go over what this actually is.

57
00:04:00.040 --> 00:04:05.240
This is called JSON JavaScript
object notation.

58
00:04:05.240 --> 00:04:07.350
It should actually look
pretty familiar to you.

59
00:04:07.350 --> 00:04:09.190
It looks a lot like JavaScript.

60
00:04:09.190 --> 00:04:12.840
So we have this like,
results which is an array.

61
00:04:14.490 --> 00:04:16.700
So that's what those two
square brackets mean.

62
00:04:18.250 --> 00:04:22.560
And so, it's an array of objects,
which you see these curly braces now, and

63
00:04:22.560 --> 00:04:27.920
it just, all these curly braces
have different properties of them.

64
00:04:27.920 --> 00:04:29.616
Each one of them is representing a city.

65
00:04:29.616 --> 00:04:33.679
In this particular case, so
we have Phoenix, Scottsdale, Mason,

66
00:04:33.679 --> 00:04:36.550
I bet you that's because
my VPN is connected.

67
00:04:36.550 --> 00:04:40.040
So my VPN actually thinks
I'm in Arizona right now.

68
00:04:40.040 --> 00:04:45.060
But if I disconnect my VPN,

69
00:04:45.060 --> 00:04:48.660
and I refresh this,
now it thinks I'm in Minneapolis.

70
00:04:48.660 --> 00:04:54.160
So Minneapolis, Saint Paul, Eden,
I just went to a close city.

71
00:04:54.160 --> 00:04:54.700
&gt;&gt; Male Student 1: One thing to note,

72
00:04:54.700 --> 00:04:57.450
I think you have a plugin that
makes it kinda pretty prints it.

73
00:04:57.450 --> 00:04:58.160
&gt;&gt; Brian Holt: It did, I do.

74
00:04:58.160 --> 00:05:00.530
&gt;&gt; Male Student 1: So-
&gt;&gt; Brian Holt: So if you go to this,

75
00:05:00.530 --> 00:05:02.630
I imagine a lot of you are seeing this.

76
00:05:02.630 --> 00:05:06.736
That's just like a blah throw up of data.

77
00:05:06.736 --> 00:05:08.390
I have a Chrome extension installed.

78
00:05:08.390 --> 00:05:09.710
I can't remember what it's called.

79
00:05:09.710 --> 00:05:13.400
But it's like JSON Prettify or something
like that, that makes it nice and

80
00:05:13.400 --> 00:05:14.230
easy to look at.

81
00:05:18.171 --> 00:05:18.671
&gt;&gt; Brian Holt: Great.

82
00:05:21.150 --> 00:05:24.540
So this is kinda make sense [INAUDIBLE]
JSON, it's just it's away for

83
00:05:24.540 --> 00:05:28.520
two desperate entities to
communicate with each other,

84
00:05:28.520 --> 00:05:29.920
it's essentially computer talk.

85
00:05:31.080 --> 00:05:34.060
That the client can reach
out to the server and

86
00:05:34.060 --> 00:05:37.630
say, I want this data from you and
then like the server says, okay,

87
00:05:37.630 --> 00:05:42.760
here's your data, it's a language that the
two computers can speak back and forth.

88
00:05:42.760 --> 00:05:45.680
And it looks like JavaScript,
it looks like normal JavaScript.

89
00:05:47.210 --> 00:05:49.990
So let's go back here to our jQuery.

90
00:05:52.360 --> 00:05:56.810
So we're calling .ajax and
it's doing what's called a get request.

91
00:05:56.810 --> 00:05:59.269
They're varying http verbs.

92
00:06:01.020 --> 00:06:05.980
So I reach out to the server, and
the server says like, what do you want?

93
00:06:05.980 --> 00:06:10.680
And if you say, I want to get this
from you, it gives you back something.

94
00:06:10.680 --> 00:06:14.637
If you say, I want to post to you,
it's like I'm giving you data to do

95
00:06:14.637 --> 00:06:18.006
something with,
which we're gonna do here in just a sec.

96
00:06:18.006 --> 00:06:21.546
And there's like five or six or
actually probably more other verbs but

97
00:06:21.546 --> 00:06:25.690
those are the two that we're gonna concern
with ourselves today, get and posts.

98
00:06:27.400 --> 00:06:31.586
So that get is just saying,
please give me data back.

99
00:06:31.586 --> 00:06:34.502
We have the URL, I think that makes sense,

100
00:06:34.502 --> 00:06:39.240
that's where we want to reach out to,
and then we have this success.

101
00:06:39.240 --> 00:06:43.520
So that's essentially saying once
this is successful, please run this.

102
00:06:45.410 --> 00:06:47.670
So this is called
asynchronous programming.

103
00:06:47.670 --> 00:06:51.160
Because, this, we'll call this.

104
00:06:51.160 --> 00:06:55.000
And reaching out to
a server is not instant.

105
00:06:55.000 --> 00:06:57.096
There's the round trip that has to happen.

106
00:06:57.096 --> 00:07:01.268
I have to say, hey, I want this, it has
to go across the great Interwebs and

107
00:07:01.268 --> 00:07:03.070
then it has to go to the servers.

108
00:07:03.070 --> 00:07:06.920
The server has to run its processing and
then it has to flow back to you.

109
00:07:06.920 --> 00:07:12.356
That is not instant, in fact often it can
take on the order of several seconds.

110
00:07:12.356 --> 00:07:15.139
We have now introduced
what's called a synchrony.

111
00:07:16.400 --> 00:07:21.446
This is calling but we don't want
our entire program to get blocked.

112
00:07:21.446 --> 00:07:23.080
We don't wanna just have
this user sit there and

113
00:07:23.080 --> 00:07:25.120
wait while this is trying to happen.

114
00:07:25.120 --> 00:07:28.700
We want to be able to execute more code,
we want more things to be able to happen.

115
00:07:28.700 --> 00:07:33.730
So essentially what we're saying is run
this and then whenever this happens,

116
00:07:33.730 --> 00:07:39.060
whenever like the Interwebs gods give
us back our data run this function.

117
00:07:40.520 --> 00:07:44.440
So we've kinda actually already
done asynchronous programming.

118
00:07:44.440 --> 00:07:46.840
In fact, right here,
is this click function.

119
00:07:46.840 --> 00:07:49.820
We have no idea when this
functions actually going to occur.

120
00:07:51.090 --> 00:07:54.030
It only happens once
the user does something.

121
00:07:54.030 --> 00:07:55.900
But it doesn't happen until then.

122
00:07:55.900 --> 00:07:58.420
That's exactly what this AJAX
function is doing as well.

123
00:07:59.550 --> 00:08:02.660
It's saying, I don't know when
the data is gonna come back, but

124
00:08:02.660 --> 00:08:06.782
once the data does come back, do this.

125
00:08:06.782 --> 00:08:08.610
Yeah?

126
00:08:08.610 --> 00:08:12.220
&gt;&gt; Male Student 1: What's the difference
between passing an object or

127
00:08:12.220 --> 00:08:16.030
a function to a method?

128
00:08:16.030 --> 00:08:19.320
&gt;&gt; Brian Holt: It depends on
what the function wants/needs.

129
00:08:19.320 --> 00:08:23.540
Some functions expect objects,
expect variables,

130
00:08:23.540 --> 00:08:25.160
it depends on what the function is.

131
00:08:28.230 --> 00:08:31.040
I think the AJAX function
can work multiple ways.

132
00:08:31.040 --> 00:08:33.920
I've just found this way to
be the most easy to explain.

133
00:08:33.920 --> 00:08:36.392
So we went with that.

134
00:08:37.852 --> 00:08:41.374
&gt;&gt; Brian Holt: On a high level, not
getting too nitty gritty in the details,

135
00:08:41.374 --> 00:08:44.710
does this make sense,
what's actually happening here.

136
00:08:46.740 --> 00:08:47.850
Yeah?

137
00:08:47.850 --> 00:08:50.805
&gt;&gt; Male Student 2: So can you have
a time out of fail as well as a success?

138
00:08:50.805 --> 00:08:52.420
&gt;&gt; Brian Holt: Absolutely.

139
00:08:52.420 --> 00:08:54.220
So there's an error function.

140
00:08:55.490 --> 00:08:58.640
There's also a possibility that you
can reach out to the server and, no,

141
00:08:58.640 --> 00:09:03.150
the Internet got destroyed and
now the state is not gonna come back and

142
00:09:03.150 --> 00:09:04.120
you need to do something.

143
00:09:04.120 --> 00:09:06.840
You can't just have your
whole program fail.

144
00:09:06.840 --> 00:09:10.384
You need to tell the user, crap,
I can't get your data for you.

145
00:09:10.384 --> 00:09:13.883
We're not gonna necessarily go
into error handling right now but

146
00:09:13.883 --> 00:09:18.570
that's something that does happen,
should happen and you should do.

147
00:09:18.570 --> 00:09:19.672
We're just not going to.

148
00:09:19.672 --> 00:09:20.851
[LAUGH] Sorry.

149
00:09:20.851 --> 00:09:28.190
[LAUGH] So
I believe that the value is called error.

150
00:09:28.190 --> 00:09:29.330
I think is just like and

151
00:09:29.330 --> 00:09:32.000
it's another function like it's
running case the error happens.

152
00:09:32.000 --> 00:09:33.391
Cuz you have you gonna
handler it differently.

153
00:09:36.971 --> 00:09:38.721
&gt;&gt; Brian Holt: And then,
this should look formal too,

154
00:09:38.721 --> 00:09:40.490
it's like I'm just taking the data.

155
00:09:40.490 --> 00:09:43.300
The data is whatever is
coming back from the server.

156
00:09:43.300 --> 00:09:45.130
And I'm just setting that to be text.

157
00:09:47.630 --> 00:09:52.920
So JSON, we were just talking about that,
JavaScript Object Notation.

158
00:09:52.920 --> 00:09:55.630
Basically I'm taking an object
the server has given back to me, and

159
00:09:55.630 --> 00:09:57.770
I'm saying I just actually
wanna dump it out.

160
00:09:57.770 --> 00:10:00.060
If I didn't do this it would
just say Object Object.

161
00:10:01.490 --> 00:10:03.066
So just so you know why I'm doing that.

162
00:10:08.496 --> 00:10:09.050
&gt;&gt; Brian Holt: Maybe.

163
00:10:11.740 --> 00:10:16.100
Yeah, it says Object Object because
I'm trying to print out an object.

164
00:10:16.100 --> 00:10:18.120
An object doesn't know
how to display itself.

165
00:10:19.280 --> 00:10:22.120
So in this particular case I
just put in JSON.stringfiy to

166
00:10:22.120 --> 00:10:24.840
make this into a string so
that I can display it on the page.

167
00:10:25.980 --> 00:10:26.690
That's all that's doing.

168
00:10:29.210 --> 00:10:31.040
&gt;&gt; Female Student 1: Sorry,
did you explain what JSON

169
00:10:31.040 --> 00:10:32.110
was in that datatype, or?

170
00:10:35.070 --> 00:10:37.756
&gt;&gt; Brian Holt: So JSON is like this.

171
00:10:37.756 --> 00:10:42.095
It's this information interchange format.

172
00:10:44.211 --> 00:10:47.920
&gt;&gt; Brian Holt: And
that's what it really looks like.

173
00:10:47.920 --> 00:10:49.435
It's just-
&gt;&gt; Male Student 2: It's just a bunch of

174
00:10:49.435 --> 00:10:49.980
data, right?

175
00:10:49.980 --> 00:10:51.570
&gt;&gt; Brian Holt: It's a bunch of raw data.

176
00:10:51.570 --> 00:10:53.300
It's not really meant for
human consumption.

177
00:10:53.300 --> 00:10:54.970
It's meant for a computer consumption.

178
00:10:56.160 --> 00:10:59.150
I have up here this thing that
lets me see all pretty and nice so

179
00:10:59.150 --> 00:11:01.750
that I actually can read it.

180
00:11:01.750 --> 00:11:04.866
&gt;&gt; Male Student 2: So really all
that capital JSON is doing is saying

181
00:11:04.866 --> 00:11:06.386
this is a JSON object And

182
00:11:06.386 --> 00:11:10.610
now you can have all these [INAUDIBLE]
you can actually use them.

183
00:11:10.610 --> 00:11:11.200
&gt;&gt; Brian Holt: Exactly.

184
00:11:11.200 --> 00:11:14.530
In this particular case,
it's saying please make this so

185
00:11:14.530 --> 00:11:16.360
I can print it out to my page.

186
00:11:16.360 --> 00:11:17.806
You actually would never
do this in real life.

187
00:11:17.806 --> 00:11:21.230
You don't wanna show people raw JASON
because they're [COUGH] probably gonna say

188
00:11:21.230 --> 00:11:24.434
the same things you're probably saying
right now, what the hell is this?

189
00:11:24.434 --> 00:11:27.550
[LAUGH]
So yeah, don't do that.

190
00:11:27.550 --> 00:11:30.950
This is just purely for debugging,
demonstrative practice.

191
00:11:33.110 --> 00:11:40.360
And then, just to touch on what jsonp is,
I don't wanna go into depth in it,

192
00:11:40.360 --> 00:11:44.680
but suffice to say that this
call won't work without jsonp.

193
00:11:44.680 --> 00:11:47.269
It's how the made up API works.

194
00:11:48.920 --> 00:11:52.340
And it has to do with how the data
is loaded back onto your computer.

195
00:11:53.400 --> 00:11:57.240
So don't worry too much about it.

196
00:11:57.240 --> 00:11:59.320
It's only useful when it's useful.

197
00:11:59.320 --> 00:12:01.220
And I'd say most the time
it's actually not useful.

198
00:12:01.220 --> 00:12:05.090
But if you're gonna mess with Meetup API,
you do have to use their jsonp.

199
00:12:07.771 --> 00:12:11.210
&gt;&gt; Brian Holt: And when we get into the
Reddit API, we will not be using it so.

200
00:12:13.350 --> 00:12:14.410
Cool.

201
00:12:14.410 --> 00:12:17.848
&gt;&gt; Male Student 2: And the API that you're
talking about those are just sources

202
00:12:17.848 --> 00:12:18.396
of data?

203
00:12:18.396 --> 00:12:20.930
&gt;&gt; Brian Holt: Yeah, that's a good point,
I should talk about that.

204
00:12:20.930 --> 00:12:25.420
API stands for
Application Programming Interface.

205
00:12:25.420 --> 00:12:26.410
That sounds right.

206
00:12:26.410 --> 00:12:29.131
That sounds smart let's go with that.

207
00:12:29.131 --> 00:12:33.512
[LAUGH] So essentially it's saying
like I've written this program for

208
00:12:33.512 --> 00:12:38.266
example Meetup has written this program
that they have all these cool things

209
00:12:38.266 --> 00:12:41.162
that there program can do but
they need a way for

210
00:12:41.162 --> 00:12:44.500
other computers to talk
to their computers.

211
00:12:44.500 --> 00:12:47.020
So essentially,
they've sent up like here's our interface.

212
00:12:47.020 --> 00:12:49.642
If you want to this with our program,

213
00:12:49.642 --> 00:12:53.715
like if you wanna create a new meetup,
send us this data.

214
00:12:53.715 --> 00:12:57.661
If you want to get all of our city data,
which is what we're doing right here,

215
00:12:57.661 --> 00:13:00.230
please call this URL
with these parameters.

216
00:13:00.230 --> 00:13:05.640
It's just kind of this interface for two
disparate services to talk to each other.

217
00:13:05.640 --> 00:13:08.150
That's what the word API refers to.

218
00:13:08.150 --> 00:13:13.281
So in this particular case,
we're calling this API which is the cities

219
00:13:13.281 --> 00:13:18.426
API on the Meetup server and saying,
please give me all of your cities.

220
00:13:18.426 --> 00:13:19.986
That's kind of the general gist of it.

221
00:13:22.906 --> 00:13:27.365
&gt;&gt; Brian Holt: And here, that's the data
that is gonna come back from the server.

