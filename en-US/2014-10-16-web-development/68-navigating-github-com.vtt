WEBVTT

1
00:00:00.000 --> 00:00:03.880
[MUSIC]

2
00:00:03.880 --> 00:00:06.295
&gt;&gt; Speaker 1: So
I'm gonna go back to my GitHub account and

3
00:00:06.295 --> 00:00:08.461
we're gonna poke around a little bit.

4
00:00:10.601 --> 00:00:12.961
&gt;&gt; Speaker 1: You can go ahead and
refresh the page.

5
00:00:15.921 --> 00:00:20.556
&gt;&gt; Speaker 1: Now you see my name would
go here which is what I typed when Git

6
00:00:20.556 --> 00:00:22.610
asked me what my name was.

7
00:00:23.855 --> 00:00:26.390
Says that I changed
this three minutes ago.

8
00:00:33.651 --> 00:00:38.329
&gt;&gt; Speaker 1: So, we can go ahead, it'll
give you a link to the latest commit,

9
00:00:38.329 --> 00:00:40.859
we can go ahead and click that.

10
00:00:40.859 --> 00:00:43.250
I messed up, here's another file.

11
00:00:43.250 --> 00:00:47.931
And GitHub is showing me
the exact changes that I made.

12
00:00:54.611 --> 00:00:59.109
&gt;&gt; Speaker 1: So if you don't
wanna fiddle with the command line

13
00:00:59.109 --> 00:01:02.643
which can kind of be little bit obtuse,

14
00:01:02.643 --> 00:01:07.371
you can do a lot of things
from the GitHub.com site.

15
00:01:07.371 --> 00:01:13.011
And there's also a UI client available for
both Mac and Windows.

16
00:01:16.371 --> 00:01:18.550
&gt;&gt; Speaker 1: Okay, yes?

17
00:01:18.550 --> 00:01:23.340
&gt;&gt; Speaker 2: There's a question on,
she's saying, every time that she modifies

18
00:01:23.340 --> 00:01:28.438
the file, should she use git add again or
just commit it directly?

19
00:01:28.438 --> 00:01:30.634
&gt;&gt; Speaker 1: Git add.

20
00:01:30.634 --> 00:01:32.910
So here's a funny thing.

21
00:01:32.910 --> 00:01:39.070
If you modify a file, and you do git
add on it, and then you change it.

22
00:01:40.480 --> 00:01:42.820
The first time you called git add,

23
00:01:42.820 --> 00:01:46.060
that was the version of the file
that's in your staging environment.

24
00:01:47.240 --> 00:01:53.750
If you do any more changes and you don't
do git add again, when you commit,

25
00:01:53.750 --> 00:01:59.582
git will commit the version of that file
from the last time that you ran git add.

26
00:02:03.190 --> 00:02:07.920
So a good git work flow
is lots of commits.

27
00:02:07.920 --> 00:02:12.810
Any time you do something there like,
I'm not sure about this, go ahead and

28
00:02:12.810 --> 00:02:16.280
add it and commit it, then you
always have a history of it later.

29
00:02:19.340 --> 00:02:20.600
&gt;&gt; Speaker 3: If you commit something and

30
00:02:20.600 --> 00:02:25.240
you decide you didn't want it,
how do you get back to?

31
00:02:25.240 --> 00:02:28.201
&gt;&gt; Speaker 1: It's kind of
outside the scope of this class.

32
00:02:28.201 --> 00:02:33.005
There is a few different ways,
but the thing that you're

33
00:02:33.005 --> 00:02:37.321
probably going to want to
do is create a new branch.

34
00:02:37.321 --> 00:02:41.625
So your master which is
like the base branch of

35
00:02:41.625 --> 00:02:46.280
any repository is gonna stay clean and
working.

36
00:02:46.280 --> 00:02:50.744
And then when you wanna work on a new
feature you would create a new branch,

37
00:02:50.744 --> 00:02:55.430
hack away on that branch but you always
have master exactly where you left it.

38
00:02:57.270 --> 00:02:57.951
Does that make sense?

39
00:02:57.951 --> 00:03:00.051
&gt;&gt; Speaker 3: What is the difference
between a branch and a fork then?

40
00:03:00.051 --> 00:03:01.771
I guess, I didn't quite understand that.

41
00:03:01.771 --> 00:03:02.810
&gt;&gt; Speaker 1: So a fork is,

42
00:03:02.810 --> 00:03:07.450
you can kinda think of it as
a copy of someone else's code.

43
00:03:08.450 --> 00:03:10.200
A branch is a copy of your own code.

44
00:03:13.520 --> 00:03:18.170
So forking is taking
a different repository and

45
00:03:18.170 --> 00:03:24.900
making a copy of it that has all
the history that that repository has had.

46
00:03:24.900 --> 00:03:28.480
So you can see the changes on it but
now you have your own copy.

47
00:03:28.480 --> 00:03:33.731
You would make a branch
of your own repository.

48
00:03:33.731 --> 00:03:35.051
Does that make sense?

49
00:03:35.051 --> 00:03:35.551
All right.

50
00:03:36.650 --> 00:03:44.551
&gt;&gt; Speaker 2: Fork is a branch, it's
just your branch of someone else's code.

51
00:03:44.551 --> 00:03:49.291
&gt;&gt; Speaker 1: So, we're gonna make
our own, our first pull request.

52
00:03:49.291 --> 00:03:52.917
So we're going to go back to
our copy of this pull request,

53
00:03:52.917 --> 00:03:55.370
our fork of this pull request project.

54
00:03:56.620 --> 00:04:01.201
We're gonna scroll over to the right,
click on Pull Requests.

55
00:04:06.061 --> 00:04:07.741
&gt;&gt; Speaker 1: And
we're gonna make a new one.

56
00:04:10.901 --> 00:04:14.612
&gt;&gt; Speaker 1: So
we can see that GitHub is being spar] and

57
00:04:14.612 --> 00:04:18.641
it's like, you forked this off btholt.

58
00:04:18.641 --> 00:04:22.461
So, I'm gonna make a pull request
that has all the changes that I made.

59
00:04:28.341 --> 00:04:30.800
&gt;&gt; Speaker 1: So you can go and review it.

60
00:04:30.800 --> 00:04:34.260
You'll see the changes that you're
going to be pushing back up.

61
00:04:34.260 --> 00:04:36.221
And click on Create pull request.

62
00:04:43.661 --> 00:04:46.554
&gt;&gt; Speaker 1: Fun fact about
GitHub comment fields,

63
00:04:46.554 --> 00:04:49.350
compiling all sorts of emoji.

64
00:04:49.350 --> 00:04:52.960
So, let's make this one colorful.

65
00:04:56.960 --> 00:04:59.340
&gt;&gt; Speaker 1: C,
let's put some cats in there.

66
00:05:06.061 --> 00:05:11.378
&gt;&gt; Speaker 1: Okay, once you've
created a tail and written a message,

67
00:05:11.378 --> 00:05:16.381
we're going to go ahead and
create this pull request.

68
00:05:16.381 --> 00:05:21.094
So GitHub is telling me that I
want to merge in two commits

69
00:05:21.094 --> 00:05:25.621
back into this original
project that we forked from.

70
00:05:25.621 --> 00:05:28.261
And those commits
are coming from my project.

71
00:05:33.301 --> 00:05:35.760
&gt;&gt; Speaker 1: Does anyone need
help getting to this point?

72
00:05:48.221 --> 00:05:49.530
&gt;&gt; Speaker 1: So-
&gt;&gt; Speaker 2: I think people

73
00:05:49.530 --> 00:05:51.400
are wondering how to get
to the pull request.

74
00:05:56.921 --> 00:06:02.040
&gt;&gt; Speaker 1: So, in order to do that,
I'm just gonna go through it again.

75
00:06:02.040 --> 00:06:08.720
I'm gonna go to my copy
of this repository.

76
00:06:08.720 --> 00:06:14.737
And, and this links up here,
this one will take me to my account and

77
00:06:14.737 --> 00:06:18.186
this one will take me to this project.

78
00:06:21.306 --> 00:06:25.181
&gt;&gt; Speaker 1: So,
I go to the root of this project,

79
00:06:25.181 --> 00:06:30.186
I scroll to the right,
click on Pull Requests.

80
00:06:30.186 --> 00:06:32.705
And then New pull request.

81
00:06:39.466 --> 00:06:42.406
&gt;&gt; Speaker 1: So,
because I've already done this.

82
00:06:47.245 --> 00:06:50.089
&gt;&gt; Speaker 1: And
I don't have any other changes,

83
00:06:50.089 --> 00:06:54.966
GitHub is smart enough to be like,
hey, you already did this.

84
00:06:54.966 --> 00:06:57.508
Do you want to look at the one
that you already created.

