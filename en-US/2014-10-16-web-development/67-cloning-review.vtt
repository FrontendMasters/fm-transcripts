WEBVTT

1
00:00:00.000 --> 00:00:03.860
[MUSIC]

2
00:00:03.860 --> 00:00:06.046
&gt;&gt; Brian Holt: I think online
I'm trying to check but

3
00:00:06.046 --> 00:00:08.859
I think everyone is kind
of has a clone book list.

4
00:00:08.859 --> 00:00:09.394
&gt;&gt; Nina Zakharenko: Okay.
&gt;&gt; Brian Holt: So

5
00:00:09.394 --> 00:00:12.439
at that point you're kind of maybe you
could start walk through that again.

6
00:00:12.439 --> 00:00:13.579
And if you could start
with the whole processes.

7
00:00:13.579 --> 00:00:17.779
And explain like once you clone,
how do you get into that directory.

8
00:00:17.779 --> 00:00:18.949
&gt;&gt; Nina Zakharenko: Absolutely,

9
00:00:18.949 --> 00:00:23.629
is it the Windows folks that
are having trouble because?

10
00:00:23.629 --> 00:00:26.379
&gt;&gt; Brian Holt: I think it's a little
bit of both I think they just didn't

11
00:00:26.379 --> 00:00:29.850
understand after cloning that you
had to get into that directory.

12
00:00:29.850 --> 00:00:31.510
&gt;&gt; Nina Zakharenko: Okay.
&gt;&gt; Brian Holt: I believe.

13
00:00:31.510 --> 00:00:34.860
&gt;&gt; Nina Zakharenko: So I'm gonna take
a stab at doing this on Windows,

14
00:00:34.860 --> 00:00:37.130
nobody is allowed to laugh at me.

15
00:00:38.910 --> 00:00:40.240
&gt;&gt; Brian Holt: And
then one quick question,

16
00:00:40.240 --> 00:00:43.380
can you explain difference between add,
admit and push?

17
00:00:43.380 --> 00:00:45.359
&gt;&gt; Nina Zakharenko: Yes, yeah.

18
00:00:45.359 --> 00:00:50.239
So I'm gonna open up my,
open up not the get GUI.

19
00:00:50.239 --> 00:00:51.740
I'm gonna open up my.

20
00:00:53.659 --> 00:01:00.179
&gt;&gt; Nina Zakharenko: My get bash.

21
00:01:03.520 --> 00:01:08.419
&gt;&gt; Nina Zakharenko: And
that is see, oop, boy.

22
00:01:08.419 --> 00:01:13.059
&gt;&gt; Speaker 3: So if we want to put
our name files into your project.

23
00:01:13.059 --> 00:01:15.000
&gt;&gt; Brian Holt: She'll go over that,
just a sec.

24
00:01:15.000 --> 00:01:17.299
What's the next step?

25
00:01:17.299 --> 00:01:22.313
&gt;&gt; Nina Zakharenko: Next step, all right
so here we got our git bash open and

26
00:01:22.313 --> 00:01:29.539
even though we doing Windows,
we can use all of our Linux commands here.

27
00:01:29.539 --> 00:01:35.711
&gt;&gt; Nina Zakharenko: Simple app

28
00:01:35.711 --> 00:01:41.200
though.

29
00:01:41.200 --> 00:01:42.225
&gt;&gt; Brian Holt: I'm on to you.

30
00:01:42.225 --> 00:01:45.910
&gt;&gt; Nina Zakharenko: [LAUGH]
&gt;&gt; Brian Holt: Which one of you was it?

31
00:01:45.910 --> 00:01:47.358
&gt;&gt; Speaker 3: Me on Windows ViewPoint.

32
00:01:47.358 --> 00:01:49.883
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Speaker 3: That's like 80% of

33
00:01:49.883 --> 00:01:50.745
the class.

34
00:01:50.745 --> 00:01:53.670
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Nina Zakharenko: I know.

35
00:01:53.670 --> 00:01:54.950
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Nina Zakharenko: We weren't even gonna

36
00:01:54.950 --> 00:01:56.400
cover Windows originally.

37
00:01:56.400 --> 00:01:57.920
And then we sent out the survey and

38
00:01:57.920 --> 00:02:01.730
we were like okay there's
still Windows users out there.

39
00:02:01.730 --> 00:02:03.120
You guys exist.

40
00:02:03.120 --> 00:02:04.210
You're not just a myth.

41
00:02:06.309 --> 00:02:11.923
&gt;&gt; Nina Zakharenko: So the very first
thing that we wanna do is type PWD,

42
00:02:11.923 --> 00:02:17.278
that's gonna tell us
what directory we're in,

43
00:02:17.278 --> 00:02:21.586
so when I type PWD I
can see that right now

44
00:02:21.586 --> 00:02:26.309
I'm in c/users/Brian Holt directory.

45
00:02:26.309 --> 00:02:30.221
Let's do a dir here and
see what folders we have.

46
00:02:30.221 --> 00:02:33.470
An OS here and see what folders we have.

47
00:02:39.500 --> 00:02:46.990
So we have some local settings.

48
00:02:46.990 --> 00:02:48.740
We have some links.

49
00:02:48.740 --> 00:02:51.110
But here we also have a desktop folder.

50
00:02:53.900 --> 00:02:58.390
So, I'm going to CD into my desktop

51
00:02:58.390 --> 00:03:03.590
folder, and say PWD again.

52
00:03:03.590 --> 00:03:06.716
And now I can see that I'm
in C/Users/Brian Holt,

53
00:03:06.716 --> 00:03:10.415
which is the username for
this Windows machine, and Desktop.

54
00:03:10.415 --> 00:03:15.850
&gt;&gt; [INAUDIBLE]
&gt;&gt; Nina Zakharenko: So now I'm going to

55
00:03:15.850 --> 00:03:22.820
grab, I forked Brian's repository,
I have my own copy here.

56
00:03:22.820 --> 00:03:29.170
Going to grab this clone
URL go back to my Windows

57
00:03:30.530 --> 00:03:35.480
and say git clone and
I don't know how to paste on Windows.

58
00:03:35.480 --> 00:03:37.430
Let's see.

59
00:03:38.720 --> 00:03:40.880
&gt;&gt; Speaker 3: Right click in there.

60
00:03:40.880 --> 00:03:42.869
&gt;&gt; Nina Zakharenko: Now it don't in the.

61
00:03:48.461 --> 00:03:49.189
&gt;&gt; Nina Zakharenko: You don't?

62
00:03:49.189 --> 00:03:56.650
Okay, all right so we got,
I'm just gonna type in this URL here.

63
00:04:02.409 --> 00:04:04.529
&gt;&gt; Nina Zakharenko: My
right click isn't working.

64
00:04:08.309 --> 00:04:18.029
&gt;&gt; Nina Zakharenko: So
github.com/nin-test/pull-requests1.git.

65
00:04:18.029 --> 00:04:20.849
&gt;&gt; Brian Holt: It's dash one
&gt;&gt; Nina Zakharenko: Oops,

66
00:04:20.849 --> 00:04:26.810
come on Windows magnifier thingy.

67
00:04:26.810 --> 00:04:33.885
-1.git and
like Brian said yours will just be named

68
00:04:33.885 --> 00:04:43.010
pull-request.git so

69
00:04:43.010 --> 00:04:49.228
now if I type is gere I have
a pull request one directory.

70
00:04:49.228 --> 00:04:54.520
So, I can c-d into pull request one.

71
00:04:54.520 --> 00:04:55.568
And do an l-s.

72
00:04:55.568 --> 00:04:56.247
&gt;&gt; Brian Holt: -1.

73
00:04:56.247 --> 00:04:58.688
&gt;&gt; Nina Zakharenko: -1.

74
00:04:58.688 --> 00:05:01.268
&gt;&gt; Brian Holt: dot dot cd dot dot.

75
00:05:01.268 --> 00:05:03.847
Okay there you go.

76
00:05:03.847 --> 00:05:05.027
&gt;&gt; Nina Zakharenko: There you go.

77
00:05:07.506 --> 00:05:12.210
&gt;&gt; Nina Zakharenko: And here because
I'm using the same account my ninaz.txt

78
00:05:12.210 --> 00:05:13.846
is just right here.

79
00:05:13.846 --> 00:05:14.860
&gt;&gt; Brian Holt: Create a new one.

80
00:05:14.860 --> 00:05:16.438
&gt;&gt; Nina Zakharenko: But
let's say that's gone.

81
00:05:16.438 --> 00:05:19.480
No more ninaz.txt.

82
00:05:19.480 --> 00:05:26.980
So I think with Windows what I can do
is open up this explorer thing here.

83
00:05:27.980 --> 00:05:31.379
Navigate to me, let's see.

84
00:05:35.379 --> 00:05:38.919
&gt;&gt; Nina Zakharenko: Navigate
to my desktop.

85
00:05:38.919 --> 00:05:44.699
Navigate to this pull-requests1 directory.

86
00:05:44.699 --> 00:05:46.640
And let's see, oops.

87
00:05:49.740 --> 00:05:54.380
&gt;&gt; Nina Zakharenko: Sorry you guys it's
hard to navigate with this magnification

88
00:05:54.380 --> 00:05:55.010
stuff.

89
00:05:55.010 --> 00:06:00.357
So I'm gonna find the text tool
which is probably Notepad.

90
00:06:00.357 --> 00:06:06.550
Nope, all right Windows people,
how do I make a text file on this thing?

91
00:06:06.550 --> 00:06:07.823
&gt;&gt; Brian Holt: Just type notepad.

92
00:06:07.823 --> 00:06:10.009
&gt;&gt; Speaker 3: Right there.

93
00:06:10.009 --> 00:06:16.075
&gt;&gt; Nina Zakharenko: [LAUGH] Boom, wow,
this is, fine work of technology.

94
00:06:16.075 --> 00:06:18.170
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Nina Zakharenko: We got our

95
00:06:18.170 --> 00:06:19.060
Windows Notepad.

96
00:06:22.100 --> 00:06:27.380
So, I'm going to type my fun fact, and

97
00:06:27.380 --> 00:06:33.460
I'm gonna save it,
save as go to my desktop.

98
00:06:33.460 --> 00:06:38.620
Go to my desktop, go to my

99
00:06:42.979 --> 00:06:46.391
&gt;&gt; Nina Zakharenko: pull-request-1

100
00:06:46.391 --> 00:06:53.819
directory and save this file as Nina.txt.

101
00:07:02.279 --> 00:07:04.260
&gt;&gt; Nina Zakharenko: So
now I'm gonna close this guy.

102
00:07:04.260 --> 00:07:06.660
I'm gonna close my.

103
00:07:06.660 --> 00:07:09.230
&gt;&gt; Speaker 4: Since that file
is the same name is the one that

104
00:07:09.230 --> 00:07:10.570
was originally in the master.

105
00:07:10.570 --> 00:07:12.712
Are you gonna get a conflict now?

106
00:07:12.712 --> 00:07:15.448
[CROSSTALK]
&gt;&gt; Brian Holt: It's Nina,

107
00:07:15.448 --> 00:07:19.880
it's just Nina, not Ninaz.

108
00:07:19.880 --> 00:07:24.021
&gt;&gt; Nina Zakharenko: So
okay, I drag this window.

109
00:07:24.021 --> 00:07:27.881
And decides to attach itself places,
that's fun.

110
00:07:32.501 --> 00:07:39.261
&gt;&gt; Nina Zakharenko: Okay, so now if I do
an LS, my nina.txt file is there now.

111
00:07:42.960 --> 00:07:46.101
&gt;&gt; Nina Zakharenko: Are people
online following along?

112
00:07:46.101 --> 00:07:47.701
Are there any more questions?

113
00:07:47.701 --> 00:07:49.461
&gt;&gt; Brian Holt: There haven't been any
more questions, so so far, so good.

114
00:07:49.461 --> 00:07:54.001
&gt;&gt; Nina Zakharenko: Okay,
I can Windows and so can you.

115
00:07:54.001 --> 00:07:59.256
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Nina Zakharenko: So let's run this git

116
00:07:59.256 --> 00:08:05.370
status command which we'll really be
running after any git action we take.

117
00:08:06.820 --> 00:08:08.100
Okay it's mad at me.

118
00:08:08.100 --> 00:08:11.230
It says that I've deleted ninaz dot txt.

119
00:08:12.580 --> 00:08:14.360
No changes staged for commit.

120
00:08:15.460 --> 00:08:16.428
And I have an untracked file.

121
00:08:19.469 --> 00:08:24.554
&gt;&gt; Nina Zakharenko: So,
&gt;&gt; Nina Zakharenko: I'm

122
00:08:24.554 --> 00:08:29.178
going to git add nina.txt, and

123
00:08:29.178 --> 00:08:33.390
do my git status again.

124
00:08:33.390 --> 00:08:35.380
Cool, I have a green one.

125
00:08:35.380 --> 00:08:37.669
These changes are going to be committed.

126
00:08:43.269 --> 00:08:49.832
&gt;&gt; Nina Zakharenko: So in order to
commit that file, we do a git commit -m,

127
00:08:49.832 --> 00:08:54.870
and we're gonna put a message in quotes.

128
00:08:54.870 --> 00:08:57.249
So I'm gonna say "I messed up".

129
00:08:58.270 --> 00:09:01.420
Here's another file.

130
00:09:01.420 --> 00:09:05.590
Once I commit this file it's
out of the staging area.

131
00:09:05.590 --> 00:09:10.300
Git's no longer telling me this is
what's going to happen with which files.

132
00:09:10.300 --> 00:09:12.450
It's like okay I did it.

133
00:09:12.450 --> 00:09:15.519
Right now your staging area is empty and

134
00:09:15.519 --> 00:09:19.239
this file has moved over
into being committed.

135
00:09:22.759 --> 00:09:29.004
&gt;&gt; Nina Zakharenko: Oops,
&gt;&gt; Nina Zakharenko: So

136
00:09:29.004 --> 00:09:33.285
if any of you guys got this message,

137
00:09:33.285 --> 00:09:40.150
I'm gonna go ahead and
do exactly what Git is telling me.

138
00:09:41.190 --> 00:09:43.629
And it's saying it doesn't know who I am.

139
00:09:43.629 --> 00:09:47.469
So I'm just going to copy the commands
that it printed out for me.

140
00:10:12.049 --> 00:10:14.980
&gt;&gt; Nina Zakharenko: So this is
saying Git doesn't know who you are.

141
00:10:14.980 --> 00:10:18.690
Once you run these commands
the email address and

142
00:10:18.690 --> 00:10:22.610
the name that you put in here are going
to be associated with your Git commands.

143
00:10:23.630 --> 00:10:25.850
So don't put Seamore Butt in here.

144
00:10:29.590 --> 00:10:34.260
I'm gonna do this commit again and
it went through just fine.

145
00:10:35.970 --> 00:10:38.440
If you want to see a history
of your commands we're not

146
00:10:39.920 --> 00:10:44.350
going to go too much in depth
into this on the command line.

147
00:10:44.350 --> 00:10:46.819
But you can type git and then log.

148
00:10:48.919 --> 00:10:51.279
&gt;&gt; Nina Zakharenko: And
git shows you all of your commits.

149
00:10:52.959 --> 00:10:57.118
&gt;&gt; Speaker 4: Does that commit then also
commit the deletion of the other file?

150
00:10:57.118 --> 00:11:00.039
&gt;&gt; Nina Zakharenko: No,
because it was not in my staging area.

151
00:11:02.779 --> 00:11:07.660
&gt;&gt; Nina Zakharenko: The deletion of that
file, let me do that again, git status.

152
00:11:07.660 --> 00:11:08.980
It's deleted but

153
00:11:08.980 --> 00:11:14.550
when I do my git status it's saying that
this change is not staged for commit.

154
00:11:17.150 --> 00:11:18.500
&gt;&gt; Brian Holt: You have to actually type.

155
00:11:18.500 --> 00:11:20.750
&gt;&gt; Speaker 3: You have to do git rm and

156
00:11:20.750 --> 00:11:25.960
then the file name and then that would
stage it to be removed from master.

157
00:11:25.960 --> 00:11:27.544
&gt;&gt; Nina Zakharenko: Yeah, not from master.

158
00:11:27.544 --> 00:11:32.248
But from your commit.

159
00:11:32.248 --> 00:11:35.238
Well, yes, you can say from master.

160
00:11:35.238 --> 00:11:38.083
But your changes wouldn't-
&gt;&gt; Speaker 3: So if you did git rm

161
00:11:38.083 --> 00:11:43.870
filename and then commit then it
would remove it from the master.

162
00:11:43.870 --> 00:11:46.709
&gt;&gt; Nina Zakharenko: Yes,
so I did a git rm.

163
00:11:49.510 --> 00:11:53.740
Until I commit my deletion,
changes to be committed.

164
00:11:53.740 --> 00:11:57.080
Until I commit that file is still, or

165
00:11:57.080 --> 00:12:01.690
it's not there but
git still knows about it, so.

166
00:12:01.690 --> 00:12:03.890
&gt;&gt; Speaker 4: But as soon as you
commit that then it actually is gone.

167
00:12:05.460 --> 00:12:08.910
&gt;&gt; Nina Zakharenko: And
the messages that you'll get

168
00:12:08.910 --> 00:12:11.110
using git status are actually super,

169
00:12:11.110 --> 00:12:16.480
super helpful as long as you can kind of
follow along with the git terminology.

170
00:12:16.480 --> 00:12:21.750
So under changes to be committed
you'll see this message use git reset

171
00:12:21.750 --> 00:12:24.030
HEAD which is all in capitals.

172
00:12:24.030 --> 00:12:27.020
And then the file to unstage so

173
00:12:27.020 --> 00:12:32.270
let's say I did this git rm and I'm like
shoot that file was really important.

174
00:12:32.270 --> 00:12:35.440
I don't actually want to delete it and
then commit it.

175
00:12:35.440 --> 00:12:40.479
I can just copy this exact command
that git is telling me to type.

176
00:12:46.739 --> 00:12:49.490
&gt;&gt; Nina Zakharenko: And it went ahead and
unstaged those changes.

177
00:12:49.490 --> 00:12:54.378
So if I do my git status now,
it knows that I deleted this file,

178
00:12:54.378 --> 00:12:58.149
but it's not going to
push that back upstream.

179
00:13:06.108 --> 00:13:08.360
&gt;&gt; Nina Zakharenko: Are all
the Windows people caught up?

180
00:13:09.960 --> 00:13:15.011
So I did my commit, but
the one step that I did not do yet

181
00:13:15.011 --> 00:13:17.939
is do a git push origin master.

182
00:13:20.839 --> 00:13:25.119
&gt;&gt; Nina Zakharenko: And this command
is gonna sync my changes with my

183
00:13:25.119 --> 00:13:27.259
github.com account.

