WEBVTT

1
00:00:00.000 --> 00:00:03.860
[MUSIC]

2
00:00:03.860 --> 00:00:07.548
&gt;&gt; Brian Holt: I think online I'm trying
to check but I think everyone is kind of

3
00:00:07.548 --> 00:00:09.299
has a clone book list.
&gt;&gt; Nina Zakharenko: Okay.

4
00:00:09.299 --> 00:00:10.249
&gt;&gt; Brian Holt: So at that point you're

5
00:00:10.249 --> 00:00:12.439
kind of maybe you could start
walk through that again.

6
00:00:12.439 --> 00:00:13.579
And if you could start
with the whole processes.

7
00:00:13.579 --> 00:00:17.779
And explain like once you clone,
how do you get into that directory.

8
00:00:17.779 --> 00:00:18.949
&gt;&gt; Nina Zakharenko: Absolutely,

9
00:00:18.949 --> 00:00:23.629
is it the Windows folks that
are having trouble because?

10
00:00:23.629 --> 00:00:24.833
&gt;&gt; Brian Holt: I think it's a little bit

11
00:00:24.833 --> 00:00:28.214
of both I think they just didn't
understand after cloning that you had

12
00:00:28.214 --> 00:00:30.330
to get into that directory.
&gt;&gt; Nina Zakharenko: Okay.

13
00:00:30.330 --> 00:00:31.510
&gt;&gt; Brian Holt: I believe.

14
00:00:31.510 --> 00:00:32.410
&gt;&gt; Nina Zakharenko: So I'm gonna take

15
00:00:32.410 --> 00:00:34.860
a stab at doing this on Windows,

16
00:00:34.860 --> 00:00:39.130
nobody is allowed to laugh at me.
&gt;&gt; Brian Holt: And

17
00:00:39.130 --> 00:00:43.380
then one quick question, can you explain
difference between add, admit and push?

18
00:00:43.380 --> 00:00:45.359
&gt;&gt; Nina Zakharenko: Yes, yeah.

19
00:00:45.359 --> 00:00:50.239
So I'm gonna open up my,
open up not the get GUI.

20
00:00:50.239 --> 00:00:56.622
I'm gonna open up my.
&gt;&gt; Nina Zakharenko: My get

21
00:00:56.622 --> 00:01:04.085
bash.
&gt;&gt; Nina Zakharenko: And

22
00:01:04.085 --> 00:01:09.470
that is see, oop, boy.
&gt;&gt; Speaker 3: So if we want

23
00:01:09.470 --> 00:01:14.327
to put our name files into your project.
&gt;&gt; Brian Holt: She'll go over that,

24
00:01:14.327 --> 00:01:15.000
just a sec.

25
00:01:15.000 --> 00:01:18.389
What's the next step?
&gt;&gt; Nina Zakharenko: Next step,

26
00:01:18.389 --> 00:01:22.313
all right so
here we got our git bash open and

27
00:01:22.313 --> 00:01:29.539
even though we doing Windows,
we can use all of our Linux commands here.

28
00:01:29.539 --> 00:01:35.711
&gt;&gt; Nina Zakharenko: Simple app

29
00:01:35.711 --> 00:01:42.225
though.
&gt;&gt; Brian Holt: I'm on to you.

30
00:01:42.225 --> 00:01:44.160
&gt;&gt; Nina Zakharenko: [LAUGH]

31
00:01:44.160 --> 00:01:45.910
&gt;&gt; Brian Holt: Which one of you was it?

32
00:01:45.910 --> 00:01:47.358
&gt;&gt; Speaker 3: Me on Windows ViewPoint.

33
00:01:47.358 --> 00:01:48.301
&gt;&gt; Brian Holt: [LAUGH]

34
00:01:48.301 --> 00:01:49.883
&gt;&gt; Speaker 3: That's like 80% of

35
00:01:49.883 --> 00:01:50.745
the class.

36
00:01:50.745 --> 00:01:51.910
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Nina Zakharenko: I

37
00:01:53.160 --> 00:01:53.790
know.
&gt;&gt; Brian Holt: Yeah.

38
00:01:53.790 --> 00:01:54.950
&gt;&gt; Nina Zakharenko: We weren't even gonna

39
00:01:54.950 --> 00:01:56.400
cover Windows originally.

40
00:01:56.400 --> 00:01:57.920
And then we sent out the survey and

41
00:01:57.920 --> 00:02:01.730
we were like okay there's
still Windows users out there.

42
00:02:01.730 --> 00:02:03.120
You guys exist.

43
00:02:03.120 --> 00:02:06.570
You're not just a myth.
&gt;&gt; Nina Zakharenko: So

44
00:02:06.570 --> 00:02:11.923
the very first thing that
we wanna do is type PWD,

45
00:02:11.923 --> 00:02:17.278
that's gonna tell us
what directory we're in,

46
00:02:17.278 --> 00:02:21.586
so when I type PWD I
can see that right now

47
00:02:21.586 --> 00:02:26.309
I'm in c/users/Brian Holt directory.

48
00:02:26.309 --> 00:02:30.221
Let's do a dir here and
see what folders we have.

49
00:02:30.221 --> 00:02:33.470
An OS here and see what folders we have.

50
00:02:39.500 --> 00:02:46.990
So we have some local settings.

51
00:02:46.990 --> 00:02:48.740
We have some links.

52
00:02:48.740 --> 00:02:51.110
But here we also have a desktop folder.

53
00:02:53.900 --> 00:02:58.390
So, I'm going to CD into my desktop

54
00:02:58.390 --> 00:03:03.590
folder, and say PWD again.

55
00:03:03.590 --> 00:03:08.310
And now I can see that I'm in
C/Users/Brian Holt, which is the username

56
00:03:08.310 --> 00:03:14.420
for this Windows machine, and Desktop.
&gt;&gt; [INAUDIBLE]

57
00:03:14.420 --> 00:03:15.850
&gt;&gt; Nina Zakharenko: So now I'm going to

58
00:03:15.850 --> 00:03:22.820
grab, I forked Brian's repository,
I have my own copy here.

59
00:03:22.820 --> 00:03:29.170
Going to grab this clone
URL go back to my Windows

60
00:03:30.530 --> 00:03:35.480
and say git clone and
I don't know how to paste on Windows.

61
00:03:35.480 --> 00:03:40.880
Let's see.
&gt;&gt; Speaker 3: Right click in there.

62
00:03:40.880 --> 00:03:42.869
&gt;&gt; Nina Zakharenko: Now it don't in the.

63
00:03:48.461 --> 00:03:49.189
&gt;&gt; Nina Zakharenko: You don't?

64
00:03:49.189 --> 00:03:55.828
Okay, all right so we got,
I'm just gonna type in this URL

65
00:03:55.828 --> 00:04:02.566
here.
&gt;&gt; Nina Zakharenko: My

66
00:04:02.566 --> 00:04:08.705
right click isn't working.
&gt;&gt; Nina Zakharenko: So

67
00:04:08.705 --> 00:04:18.029
github.com/nin-test/pull-requests1.git.

68
00:04:18.029 --> 00:04:19.669
&gt;&gt; Brian Holt: It's dash one

69
00:04:19.669 --> 00:04:20.849
&gt;&gt; Nina Zakharenko: Oops,

70
00:04:20.849 --> 00:04:26.810
come on Windows magnifier thingy.

71
00:04:26.810 --> 00:04:33.885
-1.git and
like Brian said yours will just be named

72
00:04:33.885 --> 00:04:43.010
pull-request.git so

73
00:04:43.010 --> 00:04:49.228
now if I type is gere I have
a pull request one directory.

74
00:04:49.228 --> 00:04:54.520
So, I can c-d into pull request one.

75
00:04:54.520 --> 00:04:56.247
And do an l-s.
&gt;&gt; Brian Holt: -1.

76
00:04:56.247 --> 00:04:58.688
&gt;&gt; Nina Zakharenko: -1.

77
00:04:58.688 --> 00:05:01.268
&gt;&gt; Brian Holt: dot dot cd dot dot.

78
00:05:01.268 --> 00:05:04.633
Okay there you go.
&gt;&gt; Nina Zakharenko: There you

79
00:05:04.633 --> 00:05:07.794
go.
&gt;&gt; Nina Zakharenko: And

80
00:05:07.794 --> 00:05:11.250
here because I'm using the same account my

81
00:05:11.250 --> 00:05:14.427
ninaz.txt is just right here.
&gt;&gt; Brian Holt: Create a new

82
00:05:14.427 --> 00:05:14.960
one.
&gt;&gt; Nina Zakharenko: But

83
00:05:14.960 --> 00:05:16.438
let's say that's gone.

84
00:05:16.438 --> 00:05:19.480
No more ninaz.txt.

85
00:05:19.480 --> 00:05:26.980
So I think with Windows what I can do
is open up this explorer thing here.

86
00:05:27.980 --> 00:05:29.880
Navigate to me,

87
00:05:29.880 --> 00:05:36.727
let's see.
&gt;&gt; Nina Zakharenko: Navigate

88
00:05:36.727 --> 00:05:38.919
to my desktop.

89
00:05:38.919 --> 00:05:44.699
Navigate to this pull-requests1 directory.

90
00:05:44.699 --> 00:05:50.186
And let's see, oops.
&gt;&gt; Nina Zakharenko: Sorry

91
00:05:50.186 --> 00:05:55.010
you guys it's hard to navigate
with this magnification stuff.

92
00:05:55.010 --> 00:06:00.357
So I'm gonna find the text tool
which is probably Notepad.

93
00:06:00.357 --> 00:06:03.217
Nope, all right Windows people,

94
00:06:03.217 --> 00:06:07.823
how do I make a text file on this thing?
&gt;&gt; Brian Holt: Just type notepad.

95
00:06:07.823 --> 00:06:10.009
&gt;&gt; Speaker 3: Right there.

96
00:06:10.009 --> 00:06:12.107
&gt;&gt; Nina Zakharenko: [LAUGH] Boom, wow,

97
00:06:12.107 --> 00:06:16.075
this is, fine work of technology.

98
00:06:16.075 --> 00:06:18.170
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Nina Zakharenko: We got our

99
00:06:18.170 --> 00:06:19.060
Windows Notepad.

100
00:06:22.100 --> 00:06:27.380
So, I'm going to type my fun fact, and

101
00:06:27.380 --> 00:06:33.460
I'm gonna save it,
save as go to my desktop.

102
00:06:33.460 --> 00:06:38.620
Go to my desktop, go to my

103
00:06:42.979 --> 00:06:48.799
&gt;&gt; Nina Zakharenko: pull-request-1
directory and

104
00:06:48.799 --> 00:06:53.819
save this file as Nina.txt.

105
00:07:02.279 --> 00:07:04.260
&gt;&gt; Nina Zakharenko: So
now I'm gonna close this guy.

106
00:07:04.260 --> 00:07:07.410
I'm gonna close my.
&gt;&gt; Speaker 4: Since that

107
00:07:07.410 --> 00:07:10.570
file is the same name is the one
that was originally in the master.

108
00:07:10.570 --> 00:07:12.712
Are you gonna get a conflict now?

109
00:07:12.712 --> 00:07:15.448
[CROSSTALK]
&gt;&gt; Brian Holt: It's Nina,

110
00:07:15.448 --> 00:07:20.211
it's just Nina, not Ninaz.
&gt;&gt; Nina Zakharenko: So

111
00:07:20.211 --> 00:07:24.021
okay, I drag this window.

112
00:07:24.021 --> 00:07:26.826
And decides to attach itself places,

113
00:07:26.826 --> 00:07:33.327
that's fun.
&gt;&gt; Nina Zakharenko: Okay,

114
00:07:33.327 --> 00:07:38.558
so now if I do an LS,
my nina.txt file is there

115
00:07:38.558 --> 00:07:43.870
now.
&gt;&gt; Nina Zakharenko: Are people

116
00:07:43.870 --> 00:07:46.101
online following along?

117
00:07:46.101 --> 00:07:48.376
Are there any more questions?
&gt;&gt; Brian Holt: There haven't been any

118
00:07:48.376 --> 00:07:52.032
more questions, so so far, so good.
&gt;&gt; Nina Zakharenko: Okay, I can Windows

119
00:07:52.032 --> 00:07:57.541
and so can you.
&gt;&gt; Brian Holt: [LAUGH]

120
00:07:57.541 --> 00:07:59.256
&gt;&gt; Nina Zakharenko: So let's run this git

121
00:07:59.256 --> 00:08:05.370
status command which we'll really be
running after any git action we take.

122
00:08:06.820 --> 00:08:08.100
Okay it's mad at me.

123
00:08:08.100 --> 00:08:11.230
It says that I've deleted ninaz dot txt.

124
00:08:12.580 --> 00:08:14.360
No changes staged for commit.

125
00:08:15.460 --> 00:08:21.569
And I have an untracked file.
&gt;&gt; Nina Zakharenko: So,

126
00:08:23.869 --> 00:08:26.780
&gt;&gt; Nina Zakharenko: I'm going to git add

127
00:08:26.780 --> 00:08:33.390
nina.txt, and do my git status again.

128
00:08:33.390 --> 00:08:35.380
Cool, I have a green one.

129
00:08:35.380 --> 00:08:43.554
These changes are going to be committed.
&gt;&gt; Nina Zakharenko: So

130
00:08:43.554 --> 00:08:49.832
in order to commit that file,
we do a git commit -m,

131
00:08:49.832 --> 00:08:54.870
and we're gonna put a message in quotes.

132
00:08:54.870 --> 00:08:57.249
So I'm gonna say "I messed up".

133
00:08:58.270 --> 00:09:01.420
Here's another file.

134
00:09:01.420 --> 00:09:05.590
Once I commit this file it's
out of the staging area.

135
00:09:05.590 --> 00:09:10.300
Git's no longer telling me this is
what's going to happen with which files.

136
00:09:10.300 --> 00:09:12.450
It's like okay I did it.

137
00:09:12.450 --> 00:09:18.216
Right now your staging area is empty and
this file has moved over into being

138
00:09:18.216 --> 00:09:23.918
committed.
&gt;&gt; Nina Zakharenko: Oops,

139
00:09:28.719 --> 00:09:31.001
&gt;&gt; Nina Zakharenko: So if any of you guys

140
00:09:31.001 --> 00:09:35.997
got this message, I'm gonna go ahead and

141
00:09:35.997 --> 00:09:40.150
do exactly what Git is telling me.

142
00:09:41.190 --> 00:09:43.629
And it's saying it doesn't know who I am.

143
00:09:43.629 --> 00:09:47.469
So I'm just going to copy the commands
that it printed out for me.

144
00:10:12.049 --> 00:10:13.230
&gt;&gt; Nina Zakharenko: So this is saying Git

145
00:10:13.230 --> 00:10:14.980
doesn't know who you are.

146
00:10:14.980 --> 00:10:18.690
Once you run these commands
the email address and

147
00:10:18.690 --> 00:10:22.610
the name that you put in here are going
to be associated with your Git commands.

148
00:10:23.630 --> 00:10:25.850
So don't put Seamore Butt in here.

149
00:10:29.590 --> 00:10:34.260
I'm gonna do this commit again and
it went through just fine.

150
00:10:35.970 --> 00:10:38.440
If you want to see a history
of your commands we're not

151
00:10:39.920 --> 00:10:44.350
going to go too much in depth
into this on the command line.

152
00:10:44.350 --> 00:10:49.140
But you can type git and then log.
&gt;&gt; Nina Zakharenko: And

153
00:10:49.140 --> 00:10:54.620
git shows you all of your commits.
&gt;&gt; Speaker 4: Does that commit then also

154
00:10:54.620 --> 00:10:58.657
commit the deletion of the other file?
&gt;&gt; Nina Zakharenko: No, because it was not

155
00:10:58.657 --> 00:11:03.696
in my staging area.
&gt;&gt; Nina Zakharenko: The deletion

156
00:11:03.696 --> 00:11:07.660
of that file,
let me do that again, git status.

157
00:11:07.660 --> 00:11:13.420
It's deleted but when I do my git
status it's saying that this change is

158
00:11:13.420 --> 00:11:18.500
not staged for commit.
&gt;&gt; Brian Holt: You have to actually type.

159
00:11:18.500 --> 00:11:20.750
&gt;&gt; Speaker 3: You have to do git rm and

160
00:11:20.750 --> 00:11:25.960
then the file name and then that would
stage it to be removed from master.

161
00:11:25.960 --> 00:11:27.544
&gt;&gt; Nina Zakharenko: Yeah, not from master.

162
00:11:27.544 --> 00:11:32.248
But from your commit.

163
00:11:32.248 --> 00:11:35.238
Well, yes, you can say from master.

164
00:11:35.238 --> 00:11:36.762
But your changes wouldn't-
&gt;&gt; Speaker 3: So

165
00:11:36.762 --> 00:11:40.627
if you did git rm filename and
then commit then

166
00:11:40.627 --> 00:11:45.520
it would remove it from the master.
&gt;&gt; Nina Zakharenko: Yes, so

167
00:11:45.520 --> 00:11:46.709
I did a git rm.

168
00:11:49.510 --> 00:11:53.740
Until I commit my deletion,
changes to be committed.

169
00:11:53.740 --> 00:11:58.180
Until I commit that file is still,
or it's not there but

170
00:11:58.180 --> 00:12:02.510
git still knows about it, so.
&gt;&gt; Speaker 4: But as soon as you commit

171
00:12:02.510 --> 00:12:05.690
that then it actually is gone.
&gt;&gt; Nina Zakharenko: And

172
00:12:07.130 --> 00:12:11.110
the messages that you'll get using
git status are actually super,

173
00:12:11.110 --> 00:12:16.480
super helpful as long as you can kind of
follow along with the git terminology.

174
00:12:16.480 --> 00:12:21.750
So under changes to be committed
you'll see this message use git reset

175
00:12:21.750 --> 00:12:24.030
HEAD which is all in capitals.

176
00:12:24.030 --> 00:12:27.020
And then the file to unstage so

177
00:12:27.020 --> 00:12:32.270
let's say I did this git rm and I'm like
shoot that file was really important.

178
00:12:32.270 --> 00:12:35.440
I don't actually want to delete it and
then commit it.

179
00:12:35.440 --> 00:12:40.479
I can just copy this exact command
that git is telling me to type.

180
00:12:46.739 --> 00:12:47.936
&gt;&gt; Nina Zakharenko: And it went ahead and

181
00:12:47.936 --> 00:12:49.490
unstaged those changes.

182
00:12:49.490 --> 00:12:54.660
So if I do my git status now,
it knows that I deleted this file, but

183
00:12:54.660 --> 00:12:58.149
it's not going to push that back upstream.

184
00:13:06.108 --> 00:13:08.360
&gt;&gt; Nina Zakharenko: Are all
the Windows people caught up?

185
00:13:09.960 --> 00:13:15.011
So I did my commit, but
the one step that I did not do yet

186
00:13:15.011 --> 00:13:21.160
is do a git push origin master.
&gt;&gt; Nina Zakharenko: And

187
00:13:21.160 --> 00:13:27.259
this command is gonna sync my
changes with my github.com account.

