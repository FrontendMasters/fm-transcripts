WEBVTT

1
00:00:00.000 --> 00:00:04.078
[MUSIC]

2
00:00:04.078 --> 00:00:06.318
&gt;&gt; Brian Holt: I have
an add function here.

3
00:00:06.318 --> 00:00:08.050
I have a subtract function.

4
00:00:08.050 --> 00:00:08.810
Pretty simple, right?

5
00:00:08.810 --> 00:00:10.861
One of them is just taking
some numbers and adding them.

6
00:00:12.920 --> 00:00:14.968
&gt;&gt; Brian Holt: We have
subtract function here.

7
00:00:14.968 --> 00:00:18.069
It's taking a function or
taking two numbers and

8
00:00:18.069 --> 00:00:20.344
subtracting them from each other.

9
00:00:20.344 --> 00:00:22.240
And then here's kind of
an interesting one here.

10
00:00:22.240 --> 00:00:24.230
We have this math function, right?

11
00:00:24.230 --> 00:00:28.010
That takes a number,
another number and then a function.

12
00:00:29.530 --> 00:00:34.253
So it's a function accepting
another function as a parameter or

13
00:00:34.253 --> 00:00:36.890
functionception.

14
00:00:36.890 --> 00:00:39.800
Just kidding.

15
00:00:39.800 --> 00:00:45.110
So, this operate function is then going
to be called within this function.

16
00:00:45.110 --> 00:00:47.160
Again this is kind of a contrived example,

17
00:00:47.160 --> 00:00:48.620
but
&gt;&gt; Speaker 2: How does it know

18
00:00:48.620 --> 00:00:50.690
that operate is a function?

19
00:00:50.690 --> 00:00:56.570
&gt;&gt; Brian Holt: It doesn't, so,
you have to know that, as the programmer.

20
00:00:58.490 --> 00:01:02.940
So, if this was not a function, it will
just throw an error and die essentially.

21
00:01:04.310 --> 00:01:08.930
Which is scary, but you just have to
make sure every time you call math,

22
00:01:08.930 --> 00:01:13.570
you have to give it two numbers and
you have to give it a function, okay?

23
00:01:13.570 --> 00:01:14.590
So, does that make sense here?

24
00:01:14.590 --> 00:01:17.150
This operate is a function
that is then being called.

25
00:01:17.150 --> 00:01:21.350
So, you can pass different functions
into here and they'll be called.

26
00:01:21.350 --> 00:01:24.170
So, let's just look this
very first line here.

27
00:01:25.370 --> 00:01:28.330
Math the name of the function up here.

28
00:01:28.330 --> 00:01:31.820
I'm giving it two arbitrary
numbers one and four for example.

29
00:01:31.820 --> 00:01:34.330
And then I give it the add function.

30
00:01:34.330 --> 00:01:36.850
Right, cuz add is function up here.

31
00:01:36.850 --> 00:01:39.060
So, what would you
expect these to be then?

32
00:01:39.060 --> 00:01:41.750
I'll give you a hint it's over here.

33
00:01:44.360 --> 00:01:45.460
It is five, right.

34
00:01:45.460 --> 00:01:51.089
Does that kinda make sense that this math
function is taking an add right here,

35
00:01:51.089 --> 00:01:54.060
or rather it takes it in right there.

36
00:01:54.060 --> 00:01:55.896
And then it's calling add.

37
00:01:55.896 --> 00:02:01.050
Right so this function is being passed
into the function and then called.

38
00:02:02.710 --> 00:02:05.730
Again, this is one of
the powerful parts of JavaScript.

39
00:02:05.730 --> 00:02:08.100
You can pass functions
around like variables.

40
00:02:09.240 --> 00:02:12.925
&gt;&gt; Speaker 3: I was just wondering the
slides have the links to the Code Pen, but

41
00:02:12.925 --> 00:02:15.210
I noticed they're under your account.

42
00:02:15.210 --> 00:02:20.200
Are they gonna stay available or
should we be trying to snag the code?

43
00:02:20.200 --> 00:02:21.780
&gt;&gt; Brian Holt: Yeah.
I won't delete them.

44
00:02:21.780 --> 00:02:28.282
So they should be there indefinitely.

45
00:02:28.282 --> 00:02:29.800
Yup.

46
00:02:29.800 --> 00:02:31.400
Okay.

47
00:02:31.400 --> 00:02:33.350
So add one and four, for example.

48
00:02:33.350 --> 00:02:33.850
Right.

49
00:02:34.850 --> 00:02:36.040
That makes sense.

50
00:02:36.040 --> 00:02:40.240
So now we're doing subtract five from
one right, that kind of makes sense?

51
00:02:42.710 --> 00:02:46.720
Okay, I'm seeing mostly
head nods which is awesome.

52
00:02:46.720 --> 00:02:49.250
Okay, I pulled this one out just to
make it a little bit more clear.

53
00:02:49.250 --> 00:02:52.650
So here I'm storing the answer of
this math function right here,

54
00:02:52.650 --> 00:02:55.240
I have four and five.

55
00:02:55.240 --> 00:02:58.520
And this is what we call
an anonymous function right.

56
00:02:58.520 --> 00:03:00.540
So this function does not have a name.

57
00:03:00.540 --> 00:03:04.250
It's only actually being used
right now in this moment, and

58
00:03:04.250 --> 00:03:07.710
then it just fizzles away
into the ether right.

59
00:03:09.060 --> 00:03:13.110
So essentially right here what I've done
is I've written my multiply function, but

60
00:03:13.110 --> 00:03:15.210
I wrote it just straight in there.

61
00:03:15.210 --> 00:03:17.850
Right.
Like I just through it straight in this

62
00:03:17.850 --> 00:03:18.480
math function.

63
00:03:20.430 --> 00:03:23.370
So in this particular case it's

64
00:03:23.370 --> 00:03:25.980
a function where it's returning
the multiplication of the two.

65
00:03:25.980 --> 00:03:28.490
It's storing here at answer and then it's
just writing the answer out right here.

66
00:03:29.550 --> 00:03:31.860
So looking at this knowing
how the other ones work,

67
00:03:31.860 --> 00:03:34.480
what would you expect the answer to be?

68
00:03:35.560 --> 00:03:36.870
Should be, 20 right?

69
00:03:36.870 --> 00:03:40.770
Are we kind of, does that make sense?

70
00:03:40.770 --> 00:03:41.480
Yeah?

71
00:03:41.480 --> 00:03:46.413
&gt;&gt; Speaker 4: Question here, can the
function be called inside another function

72
00:03:46.413 --> 00:03:49.537
without passing function as a parameter?

73
00:03:49.537 --> 00:03:55.150
&gt;&gt; Brian Holt: Yeah, the answer is it
depends on what context it's in, right?

74
00:03:55.150 --> 00:04:00.380
So for example subtract right here
actually is on the global scope.

75
00:04:00.380 --> 00:04:04.070
If you're writing your code right you put
very little into the global scope cuz

76
00:04:04.070 --> 00:04:04.650
it's really bad.

77
00:04:04.650 --> 00:04:06.040
It's really easy to overwrite stuff.

78
00:04:06.040 --> 00:04:09.980
So I actually could say add right here.

79
00:04:09.980 --> 00:04:15.740
And then everything would become add.

80
00:04:15.740 --> 00:04:19.570
But that makes this math
function loose its power, right?

81
00:04:19.570 --> 00:04:22.100
What was cool about this math
function is you could kind of

82
00:04:22.100 --> 00:04:25.360
define the behavior of the function
from outside the function.

83
00:04:26.550 --> 00:04:29.039
Which is kind of why we
use this operate pattern.

84
00:04:31.769 --> 00:04:32.816
&gt;&gt; Brian Holt: Make sense?

85
00:04:34.437 --> 00:04:39.186
&gt;&gt; Brian Holt: Cool, so I think one
of the questions you probably might

86
00:04:39.186 --> 00:04:43.237
wanna ask yourself is is
this a useful pattern.

87
00:04:43.237 --> 00:04:45.480
This seems kind of contrived.

88
00:04:47.240 --> 00:04:50.066
Usually being explicit is
better than being implicit.

89
00:04:50.066 --> 00:04:53.750
Because you wanna be able to
communicate with yourself and

90
00:04:53.750 --> 00:04:56.680
other developers like this was my
intention with this piece of code.

91
00:04:58.570 --> 00:05:03.050
So what I would say to that is, in
certain cases this makes a lot of sense.

92
00:05:03.050 --> 00:05:06.360
We're about to jump into jQuery where
we're gonna use anonymous functions

93
00:05:06.360 --> 00:05:07.270
all over the place.

94
00:05:08.490 --> 00:05:15.050
&gt;&gt; Speaker 4: So on line 17 then,
when it calls function(a, b),

95
00:05:15.050 --> 00:05:21.680
it's not really doing anything because
there's no operate defined, right?

96
00:05:22.710 --> 00:05:23.510
&gt;&gt; Brian Holt: Right.

97
00:05:23.510 --> 00:05:26.670
Right, so
this is just purely a function definition.

98
00:05:26.670 --> 00:05:28.660
So this function is not being called.

99
00:05:28.660 --> 00:05:32.390
Much like when we define this function
right here, it's not being called.

100
00:05:32.390 --> 00:05:33.550
We're just-
&gt;&gt; Speaker 4: It's just an empty

101
00:05:33.550 --> 00:05:34.350
definition, then?

102
00:05:34.350 --> 00:05:38.800
&gt;&gt; Brian Holt: It's a function
definition that is defined it's

103
00:05:38.800 --> 00:05:40.570
just simply not called yet.

104
00:05:40.570 --> 00:05:44.820
So I mean put that in like the context
of the subtract right here.

105
00:05:44.820 --> 00:05:46.701
&gt;&gt; Speaker 4: And
it's local to that function down there so.

106
00:05:46.701 --> 00:05:51.235
&gt;&gt; Brian Holt: Yes, so it's going to exist
in the scope of this function right here

107
00:05:51.235 --> 00:05:56.300
and then it's gonna fizzle away and
go away and never come back.

108
00:05:56.300 --> 00:05:57.960
&gt;&gt; Speaker 3: So it's like a one-time?

109
00:05:57.960 --> 00:05:59.140
&gt;&gt; Brian Holt: Exactly.

110
00:05:59.140 --> 00:06:02.340
So it gets called operate up here,
then operate is called, and

111
00:06:02.340 --> 00:06:05.530
then it just floats away,
never to be seen again.

112
00:06:07.390 --> 00:06:09.110
That kind of make sense?

113
00:06:09.110 --> 00:06:14.585
&gt;&gt; Speaker 4: So what's the point that
you're making by showing this example?

114
00:06:14.585 --> 00:06:17.156
&gt;&gt; Brian Holt: The point is
that one that it's possible and

115
00:06:17.156 --> 00:06:19.528
you're gonna see it all over the place.

116
00:06:19.528 --> 00:06:23.468
And two that these can be very useful.

117
00:06:23.468 --> 00:06:26.850
We're gonna get into click
listeners here and just a second.

118
00:06:26.850 --> 00:06:29.383
And if you had to define
the different function for

119
00:06:29.383 --> 00:06:33.590
every click listener that you ever
created it will be a huge pain.

120
00:06:33.590 --> 00:06:36.630
This is just shorthand essentially,
it's much shorter to write.

121
00:06:36.630 --> 00:06:38.714
And so
thus it's written all over the place.

122
00:06:40.634 --> 00:06:44.339
&gt;&gt; Speaker 2: In terms of execution speed
is there a difference between the inline

123
00:06:44.339 --> 00:06:47.730
function declaration versus
having a globally defined?

124
00:06:47.730 --> 00:06:49.310
&gt;&gt; Brian Holt: It's gonna
be positively trivial.

125
00:06:50.530 --> 00:06:53.026
The answer is I'm sure
there's some implication but

126
00:06:53.026 --> 00:06:55.195
we're not even talking
about a millisecond.

127
00:06:57.830 --> 00:07:01.240
&gt;&gt; Brian Holt: Or in other words,
don't worry about it.

128
00:07:01.240 --> 00:07:03.624
There might be, but
it's not worth ever worrying about.

129
00:07:05.986 --> 00:07:10.880
&gt;&gt; Speaker 2: Just wondering if you had
to iterate through a lot of the same.

130
00:07:10.880 --> 00:07:14.020
&gt;&gt; Brian Holt: I'm again I'm sure you
could do millions and tens of millions,

131
00:07:14.020 --> 00:07:20.270
and it would still make
trivial amounts of difference.

132
00:07:20.270 --> 00:07:22.152
My answer probably is the same.

133
00:07:26.215 --> 00:07:27.060
&gt;&gt; Brian Holt: Cool.

134
00:07:27.060 --> 00:07:28.070
Other questions on this?

135
00:07:28.070 --> 00:07:32.817
This is, again, kind of intermediate
type JavaScript stuff that we're talking

136
00:07:32.817 --> 00:07:35.519
about here so if this is hard,
it is hard, so.

137
00:07:37.653 --> 00:07:38.773
&gt;&gt; Brian Holt: Cool.

