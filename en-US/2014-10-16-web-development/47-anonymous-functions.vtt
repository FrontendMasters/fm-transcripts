WEBVTT

1
00:00:00.000 --> 00:00:04.078
[MUSIC]

2
00:00:04.078 --> 00:00:06.318
&gt;&gt; Brian Holt: I have
an add function here.

3
00:00:06.318 --> 00:00:08.050
I have a subtract function.

4
00:00:08.050 --> 00:00:08.810
Pretty simple, right?

5
00:00:08.810 --> 00:00:10.332
One of them is just
taking some numbers and

6
00:00:10.332 --> 00:00:13.943
adding them.
&gt;&gt; Brian Holt: We have subtract

7
00:00:13.943 --> 00:00:14.968
function here.

8
00:00:14.968 --> 00:00:18.069
It's taking a function or
taking two numbers and

9
00:00:18.069 --> 00:00:20.344
subtracting them from each other.

10
00:00:20.344 --> 00:00:22.240
And then here's kind of
an interesting one here.

11
00:00:22.240 --> 00:00:24.230
We have this math function, right?

12
00:00:24.230 --> 00:00:28.010
That takes a number,
another number and then a function.

13
00:00:29.530 --> 00:00:34.253
So it's a function accepting
another function as a parameter or

14
00:00:34.253 --> 00:00:36.890
functionception.

15
00:00:36.890 --> 00:00:39.800
Just kidding.

16
00:00:39.800 --> 00:00:45.110
So, this operate function is then going
to be called within this function.

17
00:00:45.110 --> 00:00:47.160
Again this is kind of a contrived example,

18
00:00:47.160 --> 00:00:48.620
but
&gt;&gt; Speaker 2: How does it know

19
00:00:48.620 --> 00:00:52.498
that operate is a function?
&gt;&gt; Brian Holt: It doesn't, so,

20
00:00:52.498 --> 00:00:56.570
you have to know that, as the programmer.

21
00:00:58.490 --> 00:01:02.940
So, if this was not a function, it will
just throw an error and die essentially.

22
00:01:04.310 --> 00:01:08.930
Which is scary, but you just have to
make sure every time you call math,

23
00:01:08.930 --> 00:01:13.570
you have to give it two numbers and
you have to give it a function, okay?

24
00:01:13.570 --> 00:01:14.590
So, does that make sense here?

25
00:01:14.590 --> 00:01:17.150
This operate is a function
that is then being called.

26
00:01:17.150 --> 00:01:21.350
So, you can pass different functions
into here and they'll be called.

27
00:01:21.350 --> 00:01:24.170
So, let's just look this
very first line here.

28
00:01:25.370 --> 00:01:28.330
Math the name of the function up here.

29
00:01:28.330 --> 00:01:31.820
I'm giving it two arbitrary
numbers one and four for example.

30
00:01:31.820 --> 00:01:34.330
And then I give it the add function.

31
00:01:34.330 --> 00:01:36.850
Right, cuz add is function up here.

32
00:01:36.850 --> 00:01:39.060
So, what would you
expect these to be then?

33
00:01:39.060 --> 00:01:41.750
I'll give you a hint it's over here.

34
00:01:44.360 --> 00:01:45.460
It is five, right.

35
00:01:45.460 --> 00:01:51.089
Does that kinda make sense that this math
function is taking an add right here,

36
00:01:51.089 --> 00:01:54.060
or rather it takes it in right there.

37
00:01:54.060 --> 00:01:55.896
And then it's calling add.

38
00:01:55.896 --> 00:02:01.050
Right so this function is being passed
into the function and then called.

39
00:02:02.710 --> 00:02:05.730
Again, this is one of
the powerful parts of JavaScript.

40
00:02:05.730 --> 00:02:08.100
You can pass functions
around like variables.

41
00:02:09.240 --> 00:02:10.379
&gt;&gt; Speaker 3: I was just wondering

42
00:02:10.379 --> 00:02:15.210
the slides have the links to the Code Pen,
but I noticed they're under your account.

43
00:02:15.210 --> 00:02:17.390
Are they gonna stay available or

44
00:02:17.390 --> 00:02:20.390
should we be trying to snag the code?
&gt;&gt; Brian Holt: Yeah.

45
00:02:20.390 --> 00:02:21.780
I won't delete them.

46
00:02:21.780 --> 00:02:28.282
So they should be there indefinitely.

47
00:02:28.282 --> 00:02:29.800
Yup.

48
00:02:29.800 --> 00:02:31.400
Okay.

49
00:02:31.400 --> 00:02:33.350
So add one and four, for example.

50
00:02:33.350 --> 00:02:33.850
Right.

51
00:02:34.850 --> 00:02:36.040
That makes sense.

52
00:02:36.040 --> 00:02:40.240
So now we're doing subtract five from
one right, that kind of makes sense?

53
00:02:42.710 --> 00:02:46.720
Okay, I'm seeing mostly
head nods which is awesome.

54
00:02:46.720 --> 00:02:49.250
Okay, I pulled this one out just to
make it a little bit more clear.

55
00:02:49.250 --> 00:02:52.650
So here I'm storing the answer of
this math function right here,

56
00:02:52.650 --> 00:02:55.240
I have four and five.

57
00:02:55.240 --> 00:02:58.520
And this is what we call
an anonymous function right.

58
00:02:58.520 --> 00:03:00.540
So this function does not have a name.

59
00:03:00.540 --> 00:03:04.250
It's only actually being used
right now in this moment, and

60
00:03:04.250 --> 00:03:07.710
then it just fizzles away
into the ether right.

61
00:03:09.060 --> 00:03:13.110
So essentially right here what I've done
is I've written my multiply function, but

62
00:03:13.110 --> 00:03:15.210
I wrote it just straight in there.

63
00:03:15.210 --> 00:03:17.850
Right.
Like I just through it straight in this

64
00:03:17.850 --> 00:03:18.480
math function.

65
00:03:20.430 --> 00:03:23.370
So in this particular case it's

66
00:03:23.370 --> 00:03:25.980
a function where it's returning
the multiplication of the two.

67
00:03:25.980 --> 00:03:28.490
It's storing here at answer and then it's
just writing the answer out right here.

68
00:03:29.550 --> 00:03:31.860
So looking at this knowing
how the other ones work,

69
00:03:31.860 --> 00:03:34.480
what would you expect the answer to be?

70
00:03:35.560 --> 00:03:36.870
Should be, 20 right?

71
00:03:36.870 --> 00:03:40.770
Are we kind of, does that make sense?

72
00:03:40.770 --> 00:03:42.692
Yeah?
&gt;&gt; Speaker 4: Question here,

73
00:03:42.692 --> 00:03:47.625
can the function be called inside
another function without passing

74
00:03:47.625 --> 00:03:50.101
function as a parameter?
&gt;&gt; Brian Holt: Yeah,

75
00:03:50.101 --> 00:03:55.150
the answer is it depends on
what context it's in, right?

76
00:03:55.150 --> 00:04:00.380
So for example subtract right here
actually is on the global scope.

77
00:04:00.380 --> 00:04:04.070
If you're writing your code right you put
very little into the global scope cuz

78
00:04:04.070 --> 00:04:04.650
it's really bad.

79
00:04:04.650 --> 00:04:06.040
It's really easy to overwrite stuff.

80
00:04:06.040 --> 00:04:09.980
So I actually could say add right here.

81
00:04:09.980 --> 00:04:15.740
And then everything would become add.

82
00:04:15.740 --> 00:04:19.570
But that makes this math
function loose its power, right?

83
00:04:19.570 --> 00:04:22.100
What was cool about this math
function is you could kind of

84
00:04:22.100 --> 00:04:25.360
define the behavior of the function
from outside the function.

85
00:04:26.550 --> 00:04:29.039
Which is kind of why we
use this operate pattern.

86
00:04:31.769 --> 00:04:32.816
&gt;&gt; Brian Holt: Make sense?

87
00:04:34.437 --> 00:04:35.245
&gt;&gt; Brian Holt: Cool, so

88
00:04:35.245 --> 00:04:39.994
I think one of the questions
you probably might wanna ask

89
00:04:39.994 --> 00:04:43.237
yourself is is this a useful pattern.

90
00:04:43.237 --> 00:04:45.480
This seems kind of contrived.

91
00:04:47.240 --> 00:04:50.066
Usually being explicit is
better than being implicit.

92
00:04:50.066 --> 00:04:53.750
Because you wanna be able to
communicate with yourself and

93
00:04:53.750 --> 00:04:56.680
other developers like this was my
intention with this piece of code.

94
00:04:58.570 --> 00:05:03.050
So what I would say to that is, in
certain cases this makes a lot of sense.

95
00:05:03.050 --> 00:05:06.360
We're about to jump into jQuery where
we're gonna use anonymous functions

96
00:05:06.360 --> 00:05:10.240
all over the place.
&gt;&gt; Speaker 4: So on line 17 then,

97
00:05:10.240 --> 00:05:14.405
when it calls function(a,

98
00:05:14.405 --> 00:05:19.180
b), it's not really doing
anything because there's no

99
00:05:20.380 --> 00:05:23.510
operate defined, right?
&gt;&gt; Brian Holt: Right.

100
00:05:23.510 --> 00:05:26.670
Right, so
this is just purely a function definition.

101
00:05:26.670 --> 00:05:28.660
So this function is not being called.

102
00:05:28.660 --> 00:05:32.390
Much like when we define this function
right here, it's not being called.

103
00:05:32.390 --> 00:05:33.550
We're just-
&gt;&gt; Speaker 4: It's just an empty

104
00:05:33.550 --> 00:05:34.560
definition, then?
&gt;&gt; Brian Holt: It's

105
00:05:36.330 --> 00:05:40.570
a function definition that is defined
it's just simply not called yet.

106
00:05:40.570 --> 00:05:43.430
So I mean put that in like
the context of the subtract

107
00:05:43.430 --> 00:05:44.961
right here.
&gt;&gt; Speaker 4: And

108
00:05:44.961 --> 00:05:48.610
it's local to that function down there so.
&gt;&gt; Brian Holt: Yes, so it's going to exist

109
00:05:48.610 --> 00:05:53.620
in the scope of this function right
here and then it's gonna fizzle away and

110
00:05:53.620 --> 00:05:56.373
go away and never come back.
&gt;&gt; Speaker 3: So

111
00:05:56.373 --> 00:05:59.140
it's like a one-time?
&gt;&gt; Brian Holt: Exactly.

112
00:05:59.140 --> 00:06:02.340
So it gets called operate up here,
then operate is called, and

113
00:06:02.340 --> 00:06:05.530
then it just floats away,
never to be seen again.

114
00:06:07.390 --> 00:06:11.161
That kind of make sense?
&gt;&gt; Speaker 4: So what's the point that

115
00:06:11.161 --> 00:06:16.044
you're making by showing this example?
&gt;&gt; Brian Holt: The point is that one that

116
00:06:16.044 --> 00:06:19.528
it's possible and
you're gonna see it all over the place.

117
00:06:19.528 --> 00:06:23.468
And two that these can be very useful.

118
00:06:23.468 --> 00:06:26.850
We're gonna get into click
listeners here and just a second.

119
00:06:26.850 --> 00:06:29.383
And if you had to define
the different function for

120
00:06:29.383 --> 00:06:33.590
every click listener that you ever
created it will be a huge pain.

121
00:06:33.590 --> 00:06:36.630
This is just shorthand essentially,
it's much shorter to write.

122
00:06:36.630 --> 00:06:38.714
And so
thus it's written all over the place.

123
00:06:40.634 --> 00:06:41.804
&gt;&gt; Speaker 2: In terms of execution

124
00:06:41.804 --> 00:06:46.354
speed is there a difference between the
inline function declaration versus having

125
00:06:46.354 --> 00:06:48.340
a globally defined?
&gt;&gt; Brian Holt: It's gonna be

126
00:06:48.340 --> 00:06:49.310
positively trivial.

127
00:06:50.530 --> 00:06:54.135
The answer is I'm sure there's some
implication but we're not even talking

128
00:06:54.135 --> 00:06:58.017
about a millisecond.
&gt;&gt; Brian Holt: Or

129
00:06:58.017 --> 00:07:01.240
in other words, don't worry about it.

130
00:07:01.240 --> 00:07:02.065
There might be, but

131
00:07:02.065 --> 00:07:07.679
it's not worth ever worrying about.
&gt;&gt; Speaker 2: Just wondering if you

132
00:07:07.679 --> 00:07:12.000
had to iterate through a lot of the same.
&gt;&gt; Brian Holt: I'm again I'm sure you

133
00:07:12.000 --> 00:07:15.420
could do millions and tens of millions,
and it would still make

134
00:07:15.420 --> 00:07:20.270
trivial amounts of difference.

135
00:07:20.270 --> 00:07:27.060
My answer probably is the same.
&gt;&gt; Brian Holt: Cool.

136
00:07:27.060 --> 00:07:28.070
Other questions on this?

137
00:07:28.070 --> 00:07:33.161
This is, again, kind of intermediate type
JavaScript stuff that we're talking about

138
00:07:33.161 --> 00:07:38.773
here so if this is hard, it is hard, so.
&gt;&gt; Brian Holt: Cool.

