WEBVTT

1
00:00:00.000 --> 00:00:03.839
[MUSIC]

2
00:00:03.839 --> 00:00:08.010
&gt;&gt; Nina Zakharenko: So the way that
we store values in JavaScript is with

3
00:00:08.010 --> 00:00:09.079
variables.

4
00:00:09.079 --> 00:00:13.450
And you can either declare it and
initialize it online,

5
00:00:13.450 --> 00:00:16.730
which is what you'll usually see.

6
00:00:16.730 --> 00:00:22.190
Or you can declare it first and then
initialize it somewhere down the line.

7
00:00:22.190 --> 00:00:25.588
Until that value is initialized,
that variable,

8
00:00:25.588 --> 00:00:29.943
it has no value.
&gt;&gt; Nina Zakharenko: And

9
00:00:29.943 --> 00:00:33.780
really important to consider,
don't forget the var.

10
00:00:34.960 --> 00:00:36.880
Like right here, this var y.

11
00:00:36.880 --> 00:00:42.230
Don't forget that keyword when you're
using a variable for the very first time.

12
00:00:42.230 --> 00:00:44.440
If you don't have it in there, and

13
00:00:44.440 --> 00:00:49.460
you use that same variable name again,
you might accidentally overwrite it.

14
00:00:49.460 --> 00:00:52.433
And we'll talk about scope
a little bit more in detail

15
00:00:52.433 --> 00:00:55.592
later.
&gt;&gt; Nina Zakharenko: So

16
00:00:55.592 --> 00:01:00.490
Brian mentioned some of this
before how to it applies to CSS.

17
00:01:00.490 --> 00:01:06.930
So for CSS, classes, for example,
you name them word dash word.

18
00:01:06.930 --> 00:01:10.940
In JavaScript,
we name our variables in camelCase.

19
00:01:10.940 --> 00:01:13.820
So that's lowercase word and then

20
00:01:15.890 --> 00:01:20.240
word with an uppercase first letter is
the next word, and so on and so on.

21
00:01:22.340 --> 00:01:27.310
Variables either start with a lowercase
letter, a dollar sign, or an underscore.

22
00:01:27.310 --> 00:01:33.430
But make sure they don't contain any
special symbols like exclamation point or

23
00:01:33.430 --> 00:01:36.280
pound, hashtag,
whatever you wanna call it.

24
00:01:36.280 --> 00:01:37.411
That's not supported, and

25
00:01:37.411 --> 00:01:41.192
you'll get an error.
&gt;&gt; Nina Zakharenko: So

26
00:01:41.192 --> 00:01:43.960
some words are reserved by
the JavaScript language.

27
00:01:43.960 --> 00:01:46.120
And they can't be used as
variable names either.

28
00:01:48.700 --> 00:01:52.630
For a beginner this is kind of a weird
error cuz you'll get an error and

29
00:01:52.630 --> 00:01:54.530
your code looks right.

30
00:01:54.530 --> 00:01:58.390
And you aren't really
sure what's going on.

31
00:01:58.390 --> 00:02:03.470
But these are some pretty common words
that you can't use as JavaScript variables

32
00:02:03.470 --> 00:02:07.700
like in or do, this, for.

33
00:02:07.700 --> 00:02:12.106
There's a pretty long list of them and
after class you can go through it there's

34
00:02:12.106 --> 00:02:17.034
a link on the bottom of the slide.
&gt;&gt; Nina Zakharenko: So,

35
00:02:17.034 --> 00:02:20.370
variables can be of different types.

36
00:02:20.370 --> 00:02:22.980
And JavaScript is cool
because it's dynamic.

37
00:02:22.980 --> 00:02:28.190
You don't have to let it know what type of
variable is gonna be before you use it.

38
00:02:28.190 --> 00:02:31.690
So, strings are contained in two quotes.

39
00:02:33.670 --> 00:02:39.010
It's any sort of characters, numbers
that you won't be using mathematically.

40
00:02:40.450 --> 00:02:45.910
Numbers don't have the quotes and
they can be with or without the decimal.

41
00:02:47.800 --> 00:02:52.614
So if we go
&gt;&gt; Nina Zakharenko: Back into

42
00:02:52.614 --> 00:02:56.012
our
&gt;&gt; Nina Zakharenko: Console

43
00:02:56.012 --> 00:03:01.731
here.
&gt;&gt; Nina Zakharenko: Sorry,

44
00:03:01.731 --> 00:03:08.305
I'm trying to make it bigger, it's.
&gt;&gt; Nina Zakharenko: There

45
00:03:08.305 --> 00:03:12.950
we go.
&gt;&gt; Nina Zakharenko: Can

46
00:03:12.950 --> 00:03:15.558
everyone see that font?

47
00:03:15.558 --> 00:03:22.223
So, let's try to declare some variables.
&gt;&gt; Nina Zakharenko: So

48
00:03:22.223 --> 00:03:27.590
this variable is called name and
it's a string because it's in quotes.

49
00:03:30.130 --> 00:03:35.190
If you press enter,
you'll see undefined which means that

50
00:03:35.190 --> 00:03:40.720
running this line of code,
didn't return anything.

51
00:03:40.720 --> 00:03:42.390
To make one more variable called age.

52
00:03:44.440 --> 00:03:45.330
This one's a number.

53
00:03:47.000 --> 00:03:51.870
So in JavaScript if you wanna
see the type of variable,

54
00:03:53.290 --> 00:03:55.320
you can use this typeof command.

55
00:03:55.320 --> 00:03:58.950
And it's a special function.

56
00:03:58.950 --> 00:04:03.160
You're not calling it with parenthesis,
which you'll see later one.

57
00:04:03.160 --> 00:04:06.100
So just note that this
one isn't gonna look

58
00:04:06.100 --> 00:04:08.220
like some of the other things
you're going to try today.

59
00:04:09.260 --> 00:04:17.680
So, if we do typeof name, we're gonna get
back a string, typeof age is a number.

60
00:04:17.680 --> 00:04:22.990
We'll talk about functions later on but
let's create an empty one let's call

61
00:04:22.990 --> 00:04:31.499
it myFunc.
&gt;&gt; Nina Zakharenko: So

62
00:04:31.499 --> 00:04:36.435
a totally empty function it takes
no arguments if we do typeof myFunc

63
00:04:36.435 --> 00:04:38.522
we'll get back a function.

64
00:04:54.140 --> 00:04:58.660
&gt;&gt; Nina Zakharenko: So another kind
of variable type is a Boolean.

65
00:04:58.660 --> 00:05:01.600
And Booleans can have two values.

66
00:05:01.600 --> 00:05:05.900
True which is yes or false which is no.

67
00:05:09.260 --> 00:05:14.530
There are also special types,
if you declare a variable and

68
00:05:14.530 --> 00:05:19.250
you don't set you don't put anything
in it the value of that is undefined.

69
00:05:21.170 --> 00:05:25.720
If you want to explicitly empty
a variable you can set it to null.

70
00:05:25.720 --> 00:05:26.840
And that'll clear out the value.

