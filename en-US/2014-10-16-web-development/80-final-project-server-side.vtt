WEBVTT

1
00:00:00.460 --> 00:00:03.696
[MUSIC]

2
00:00:03.696 --> 00:00:05.200
&gt;&gt; Nina Zakharenko: So we're back, and

3
00:00:05.200 --> 00:00:10.070
we're going to talk about the server
side component of this app.

4
00:00:11.280 --> 00:00:15.540
And right now it's kind of funny,
we're running the client and

5
00:00:15.540 --> 00:00:18.100
the server on our own computers.

6
00:00:18.100 --> 00:00:20.650
When you guys are gonna put
something out there you're

7
00:00:20.650 --> 00:00:22.090
probably not gonna wanted to do that.

8
00:00:22.090 --> 00:00:25.430
You're gonna want to find
some web hosting, for

9
00:00:25.430 --> 00:00:28.860
example Heroku does a great job with this.

10
00:00:28.860 --> 00:00:31.140
They make it really easy for beginners.

11
00:00:32.690 --> 00:00:37.214
So your server will be somewhere else and
you'll have lots of clients

12
00:00:37.214 --> 00:00:41.436
connecting to your server which
will be running code like this.

13
00:00:42.896 --> 00:00:45.488
&gt;&gt; Nina Zakharenko: So
this Var express and var app,

14
00:00:45.488 --> 00:00:48.850
is something that you've already seen.

15
00:00:50.310 --> 00:00:56.240
This var bodyParser is
something called middleware,

16
00:00:56.240 --> 00:01:00.340
for the sake of time,
I'm not going to talk about it.

17
00:01:00.340 --> 00:01:04.185
It's a little bit outside of
the scope of this class, but

18
00:01:04.185 --> 00:01:09.166
it kind of helps us parse some of
the input that we're going to be getting.

19
00:01:11.006 --> 00:01:15.440
&gt;&gt; Nina Zakharenko: So here are some
tweets that we've prepopulated.

20
00:01:15.440 --> 00:01:20.260
So if you kill your server and start it
back up, these guys will always be here,

21
00:01:20.260 --> 00:01:24.220
these tweets and
that's because they're actually in memory.

22
00:01:26.396 --> 00:01:29.701
&gt;&gt; Nina Zakharenko: If you create
new Tweets in your app and

23
00:01:29.701 --> 00:01:34.981
you kill your server,
those Tweets are gonna get wiped out.

24
00:01:37.036 --> 00:01:41.760
&gt;&gt; Nina Zakharenko: So let's go over the
anatomy of these Tweets for just a second.

25
00:01:43.280 --> 00:01:46.719
So we see our square brackets here,
that means it's a list of Tweets.

26
00:01:48.100 --> 00:01:53.730
These tweets are objects, but unlike
we've seen before they don't have names.

27
00:01:54.950 --> 00:01:58.110
We don't have to give them names,
they just live in this list.

28
00:02:00.166 --> 00:02:04.960
&gt;&gt; Nina Zakharenko: So we have
a text property and a time property.

29
00:02:04.960 --> 00:02:10.200
And this new keyword is a not
something that we've seen before, so

30
00:02:10.200 --> 00:02:12.760
I'm just going to quickly
cover what that does.

31
00:02:14.460 --> 00:02:18.960
By calling new Date, you're creating
a new instance of the date object.

32
00:02:20.750 --> 00:02:25.260
So what this will give back to you is
an object with a bunch of properties

33
00:02:25.260 --> 00:02:28.960
that knows the time in this
very instance right now.

34
00:02:31.530 --> 00:02:36.430
Calling getTime on this object
will give you back the number

35
00:02:36.430 --> 00:02:40.352
of milliseconds since January 1, 1970.

36
00:02:40.352 --> 00:02:45.910
And the reason we're subtracting
from this time is because

37
00:02:45.910 --> 00:02:51.478
if we go back to our tweets app,
we see this timestamp here.

38
00:02:51.478 --> 00:02:59.796
And we want people to think that we've had
some staggering in between our tweets.

39
00:02:59.796 --> 00:03:05.120
So here we see there's just a few
seconds difference in each one of these.

40
00:03:07.620 --> 00:03:08.536
Whoops.

41
00:03:13.076 --> 00:03:17.321
&gt;&gt; Nina Zakharenko: And this minus
time is what produces those different

42
00:03:17.321 --> 00:03:19.740
timestamps on the front end.

43
00:03:22.120 --> 00:03:27.859
So here,
we're telling express to use this static

44
00:03:27.859 --> 00:03:33.720
directory called public, and _ _dirname.

45
00:03:33.720 --> 00:03:38.800
It's something that is given to us for
free in every node file.

46
00:03:40.110 --> 00:03:44.900
Basically it's telling us what's the
directory that this file is running in.

47
00:03:45.930 --> 00:03:51.883
There is another, I don't know if
built-in is the right word for

48
00:03:51.883 --> 00:03:56.005
it but you get it for
free, is _ _ filename.

49
00:03:56.005 --> 00:04:00.634
So if you ever need to know what
the file is called, dynamically,

50
00:04:00.634 --> 00:04:04.856
you can just use that variable
anywhere in your node files.

51
00:04:04.856 --> 00:04:08.446
And node will be able to tell
you what that filename is.

52
00:04:13.016 --> 00:04:17.439
&gt;&gt; Nina Zakharenko: So
let's talk about this app.get method.

53
00:04:19.219 --> 00:04:22.278
&gt;&gt; Nina Zakharenko: Do you guys have
any questions about HTTP verbs?

54
00:04:26.119 --> 00:04:29.440
&gt;&gt; Nina Zakharenko: Does everyone get,
ha ha, get what get means?

55
00:04:33.279 --> 00:04:39.390
&gt;&gt; Nina Zakharenko: So we're just asking
the server, just give me what's here.

56
00:04:39.390 --> 00:04:43.785
I don't have any input for you,
I'm not trying to pass anything back.

57
00:04:43.785 --> 00:04:50.361
I have a URL and you have a file I want,
so just give it back here.

58
00:04:51.561 --> 00:04:54.613
&gt;&gt; Nina Zakharenko: Here, we're setting
the response type, we're telling

59
00:04:54.613 --> 00:04:58.620
the server, I'm sorry, the client
that the server is sending back json.

60
00:04:58.620 --> 00:05:05.386
And what we're gonna be sending back is
JSON.stringify of our list of tweets.

61
00:05:10.306 --> 00:05:13.740
&gt;&gt; Nina Zakharenko: So when this
page loads, we're calling that GET

62
00:05:13.740 --> 00:05:18.527
method we're getting back the data and
displaying it on this page.

63
00:05:18.527 --> 00:05:24.491
And we should be able to
go to localhost:8080/ajax,

64
00:05:24.491 --> 00:05:28.318
and there, we just get back our JSON.

65
00:05:33.581 --> 00:05:34.802
&gt;&gt; Nina Zakharenko: Does
anyone have questions?

66
00:05:44.586 --> 00:05:49.478
&gt;&gt; Nina Zakharenko: So this post
here is the most interesting part

67
00:05:49.478 --> 00:05:52.189
of our whole little app.

68
00:05:54.120 --> 00:05:59.249
And that's because as a browser,
when someone

69
00:05:59.249 --> 00:06:06.100
types in here we're hitting our server and
we're hitting that post endpoint.

70
00:06:07.550 --> 00:06:11.020
So we get some text,
we make a brand new tweet.

71
00:06:12.580 --> 00:06:15.796
And here in the text we
say request.body.tweet.

72
00:06:15.796 --> 00:06:21.519
And that's because what our browser's

73
00:06:21.519 --> 00:06:27.585
sending us is JSON looks
kind of like this.

74
00:06:37.286 --> 00:06:39.950
&gt;&gt; Nina Zakharenko: So that's what
the client is sending back to the server,

75
00:06:39.950 --> 00:06:41.906
that's what the server is working with.

76
00:06:46.425 --> 00:06:51.569
&gt;&gt; Nina Zakharenko: So we're saying
the text is request.body.tweet and

77
00:06:51.569 --> 00:06:53.926
the time just a new Date.

78
00:06:53.926 --> 00:06:58.149
So we want that tweet to be saved
in our system as getting created

79
00:06:58.149 --> 00:07:00.390
right now in this very instance.

80
00:07:04.660 --> 00:07:08.120
So we talked about array.push yesterday.

81
00:07:08.120 --> 00:07:15.976
So what this line of code right here
is doing, tweets.push(newTweet),

82
00:07:15.976 --> 00:07:21.266
is adding not tweet on to
the end of our tweets list.

83
00:07:23.346 --> 00:07:25.431
&gt;&gt; Nina Zakharenko: So,
this list is getting bigger and

84
00:07:25.431 --> 00:07:28.916
bigger every time someone inputs
some text on our webpage.

85
00:07:35.982 --> 00:07:41.332
&gt;&gt; Nina Zakharenko: So right here,
we're telling the client,

86
00:07:41.332 --> 00:07:45.236
hey, we got your information,

87
00:07:45.236 --> 00:07:50.016
I'm just gonna print out what I saved.

88
00:07:55.866 --> 00:07:58.696
&gt;&gt; Nina Zakharenko: Does anyone have
questions about what's going on here?

89
00:08:03.235 --> 00:08:06.808
&gt;&gt; Nina Zakharenko: So basically this list
of Tweets is getting bigger and bigger and

90
00:08:06.808 --> 00:08:07.346
bigger.

91
00:08:19.029 --> 00:08:22.790
&gt;&gt; Nina Zakharenko: And
that's the mechanics of our Tweeter.

92
00:08:22.790 --> 00:08:24.430
I think Brian and

93
00:08:24.430 --> 00:08:29.630
I have a million dollar idea here,
so you guys better not steal it.

94
00:08:31.610 --> 00:08:33.606
Come after you with lawyers.

95
00:08:40.066 --> 00:08:41.558
&gt;&gt; Nina Zakharenko: Anyone, questions,

96
00:08:41.558 --> 00:08:44.546
questions about how
this all fits together?

97
00:08:48.482 --> 00:08:49.742
&gt;&gt; Nina Zakharenko: You guys
all look hungry and tired.

98
00:08:56.006 --> 00:08:57.990
&gt;&gt; Nina Zakharenko: Hello,
Tweet about some food.

99
00:09:02.020 --> 00:09:08.289
So that's all that Brian and I have
unless, Brian, do you wanna add anything?

100
00:09:08.289 --> 00:09:13.289
So this is us.

101
00:09:13.289 --> 00:09:19.315
&gt;&gt; [INAUDIBLE]
&gt;&gt; Nina Zakharenko: We are on Twitter,

102
00:09:19.315 --> 00:09:24.406
I'm on Twitter @nnja,
Brian is @holtbt, and

103
00:09:24.406 --> 00:09:30.710
if you guys have any questions,
feel free to tweet at us.

104
00:09:30.710 --> 00:09:33.760
It's probably the fastest way
that you'll get back a response.

105
00:09:35.774 --> 00:09:37.980
It was really a pleasure
working with you all.

106
00:09:37.980 --> 00:09:39.660
So, thank you very much.

