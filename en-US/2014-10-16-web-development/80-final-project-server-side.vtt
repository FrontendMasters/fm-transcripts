WEBVTT

1
00:00:00.460 --> 00:00:03.696
[MUSIC]

2
00:00:03.696 --> 00:00:05.200
&gt;&gt; Nina Zakharenko: So we're back, and

3
00:00:05.200 --> 00:00:10.070
we're going to talk about the server
side component of this app.

4
00:00:11.280 --> 00:00:15.540
And right now it's kind of funny,
we're running the client and

5
00:00:15.540 --> 00:00:18.100
the server on our own computers.

6
00:00:18.100 --> 00:00:20.650
When you guys are gonna put
something out there you're

7
00:00:20.650 --> 00:00:22.090
probably not gonna wanted to do that.

8
00:00:22.090 --> 00:00:25.430
You're gonna want to find
some web hosting, for

9
00:00:25.430 --> 00:00:28.860
example Heroku does a great job with this.

10
00:00:28.860 --> 00:00:31.140
They make it really easy for beginners.

11
00:00:32.690 --> 00:00:35.342
So your server will be somewhere else and

12
00:00:35.342 --> 00:00:40.334
you'll have lots of clients connecting
to your server which will be running

13
00:00:40.334 --> 00:00:43.088
code like this.
&gt;&gt; Nina Zakharenko: So

14
00:00:43.088 --> 00:00:48.850
this Var express and var app,
is something that you've already seen.

15
00:00:50.310 --> 00:00:56.240
This var bodyParser is
something called middleware,

16
00:00:56.240 --> 00:01:00.340
for the sake of time,
I'm not going to talk about it.

17
00:01:00.340 --> 00:01:03.945
It's a little bit outside
of the scope of this class,

18
00:01:03.945 --> 00:01:08.430
but it kind of helps us parse some
of the input that we're going to be

19
00:01:08.430 --> 00:01:11.211
getting.
&gt;&gt; Nina Zakharenko: So

20
00:01:11.211 --> 00:01:15.440
here are some tweets
that we've prepopulated.

21
00:01:15.440 --> 00:01:20.260
So if you kill your server and start it
back up, these guys will always be here,

22
00:01:20.260 --> 00:01:21.283
these tweets and

23
00:01:21.283 --> 00:01:26.602
that's because they're actually in memory.
&gt;&gt; Nina Zakharenko: If

24
00:01:26.602 --> 00:01:31.663
you create new Tweets in your app and
you kill your server,

25
00:01:31.663 --> 00:01:37.214
those Tweets are gonna get wiped out.
&gt;&gt; Nina Zakharenko: So

26
00:01:37.214 --> 00:01:41.760
let's go over the anatomy of
these Tweets for just a second.

27
00:01:43.280 --> 00:01:46.719
So we see our square brackets here,
that means it's a list of Tweets.

28
00:01:48.100 --> 00:01:53.730
These tweets are objects, but unlike
we've seen before they don't have names.

29
00:01:54.950 --> 00:01:56.676
We don't have to give them names,

30
00:01:56.676 --> 00:02:00.377
they just live in this list.
&gt;&gt; Nina Zakharenko: So

31
00:02:00.377 --> 00:02:04.960
we have a text property and
a time property.

32
00:02:04.960 --> 00:02:10.200
And this new keyword is a not
something that we've seen before, so

33
00:02:10.200 --> 00:02:12.760
I'm just going to quickly
cover what that does.

34
00:02:14.460 --> 00:02:18.960
By calling new Date, you're creating
a new instance of the date object.

35
00:02:20.750 --> 00:02:25.260
So what this will give back to you is
an object with a bunch of properties

36
00:02:25.260 --> 00:02:28.960
that knows the time in this
very instance right now.

37
00:02:31.530 --> 00:02:36.430
Calling getTime on this object
will give you back the number

38
00:02:36.430 --> 00:02:40.352
of milliseconds since January 1, 1970.

39
00:02:40.352 --> 00:02:45.910
And the reason we're subtracting
from this time is because

40
00:02:45.910 --> 00:02:51.478
if we go back to our tweets app,
we see this timestamp here.

41
00:02:51.478 --> 00:02:59.796
And we want people to think that we've had
some staggering in between our tweets.

42
00:02:59.796 --> 00:03:05.120
So here we see there's just a few
seconds difference in each one of these.

43
00:03:07.620 --> 00:03:13.365
Whoops.
&gt;&gt; Nina Zakharenko: And

44
00:03:13.365 --> 00:03:19.740
this minus time is what produces those
different timestamps on the front end.

45
00:03:22.120 --> 00:03:27.859
So here,
we're telling express to use this static

46
00:03:27.859 --> 00:03:33.720
directory called public, and _ _dirname.

47
00:03:33.720 --> 00:03:38.800
It's something that is given to us for
free in every node file.

48
00:03:40.110 --> 00:03:44.900
Basically it's telling us what's the
directory that this file is running in.

49
00:03:45.930 --> 00:03:51.883
There is another, I don't know if
built-in is the right word for

50
00:03:51.883 --> 00:03:56.005
it but you get it for
free, is _ _ filename.

51
00:03:56.005 --> 00:04:00.634
So if you ever need to know what
the file is called, dynamically,

52
00:04:00.634 --> 00:04:04.856
you can just use that variable
anywhere in your node files.

53
00:04:04.856 --> 00:04:08.132
And node will be able to
tell you what that filename

54
00:04:08.132 --> 00:04:13.255
is.
&gt;&gt; Nina Zakharenko: So

55
00:04:13.255 --> 00:04:19.591
let's talk about this app.get method.
&gt;&gt; Nina Zakharenko: Do you

56
00:04:19.591 --> 00:04:27.530
guys have any questions about HTTP verbs?
&gt;&gt; Nina Zakharenko: Does everyone get,

57
00:04:27.530 --> 00:04:33.481
ha ha, get what get means?
&gt;&gt; Nina Zakharenko: So

58
00:04:33.481 --> 00:04:39.390
we're just asking the server,
just give me what's here.

59
00:04:39.390 --> 00:04:43.785
I don't have any input for you,
I'm not trying to pass anything back.

60
00:04:43.785 --> 00:04:47.877
I have a URL and
you have a file I want, so

61
00:04:47.877 --> 00:04:51.934
just give it back here.
&gt;&gt; Nina Zakharenko: Here,

62
00:04:51.934 --> 00:04:55.983
we're setting the response type,
we're telling the server, I'm sorry,

63
00:04:55.983 --> 00:04:58.620
the client that the server
is sending back json.

64
00:04:58.620 --> 00:05:03.660
And what we're gonna be sending
back is JSON.stringify of

65
00:05:03.660 --> 00:05:10.473
our list of tweets.
&gt;&gt; Nina Zakharenko: So

66
00:05:10.473 --> 00:05:16.505
when this page loads, we're calling that
GET method we're getting back the data and

67
00:05:16.505 --> 00:05:18.527
displaying it on this page.

68
00:05:18.527 --> 00:05:24.491
And we should be able to
go to localhost:8080/ajax,

69
00:05:24.491 --> 00:05:28.318
and there, we just get back our JSON.

70
00:05:33.581 --> 00:05:34.802
&gt;&gt; Nina Zakharenko: Does
anyone have questions?

71
00:05:44.586 --> 00:05:46.645
&gt;&gt; Nina Zakharenko: So this post here is

72
00:05:46.645 --> 00:05:52.189
the most interesting part
of our whole little app.

73
00:05:54.120 --> 00:05:59.249
And that's because as a browser,
when someone

74
00:05:59.249 --> 00:06:06.100
types in here we're hitting our server and
we're hitting that post endpoint.

75
00:06:07.550 --> 00:06:11.020
So we get some text,
we make a brand new tweet.

76
00:06:12.580 --> 00:06:15.796
And here in the text we
say request.body.tweet.

77
00:06:15.796 --> 00:06:22.697
And that's because what
our browser's sending

78
00:06:22.697 --> 00:06:27.585
us is JSON looks kind of like this.

79
00:06:37.286 --> 00:06:39.950
&gt;&gt; Nina Zakharenko: So that's what
the client is sending back to the server,

80
00:06:39.950 --> 00:06:46.648
that's what the server is working with.
&gt;&gt; Nina Zakharenko: So

81
00:06:46.648 --> 00:06:51.569
we're saying the text is
request.body.tweet and

82
00:06:51.569 --> 00:06:53.926
the time just a new Date.

83
00:06:53.926 --> 00:06:58.149
So we want that tweet to be saved
in our system as getting created

84
00:06:58.149 --> 00:07:00.390
right now in this very instance.

85
00:07:04.660 --> 00:07:08.120
So we talked about array.push yesterday.

86
00:07:08.120 --> 00:07:12.783
So what this line of
code right here is doing,

87
00:07:12.783 --> 00:07:18.430
tweets.push(newTweet), is
adding not tweet on to

88
00:07:18.430 --> 00:07:23.624
the end of our tweets list.
&gt;&gt; Nina Zakharenko: So,

89
00:07:23.624 --> 00:07:28.281
this list is getting bigger and bigger
every time someone inputs some text on our

90
00:07:28.281 --> 00:07:36.271
webpage.
&gt;&gt; Nina Zakharenko: So

91
00:07:36.271 --> 00:07:41.332
right here, we're telling the client,

92
00:07:41.332 --> 00:07:45.236
hey, we got your information,

93
00:07:45.236 --> 00:07:50.016
I'm just gonna print out what I saved.

94
00:07:55.866 --> 00:07:56.689
&gt;&gt; Nina Zakharenko: Does anyone have

95
00:07:56.689 --> 00:08:03.367
questions about what's going on here?
&gt;&gt; Nina Zakharenko: So

96
00:08:03.367 --> 00:08:07.346
basically this list of Tweets is
getting bigger and bigger and bigger.

97
00:08:19.029 --> 00:08:20.073
&gt;&gt; Nina Zakharenko: And that's

98
00:08:20.073 --> 00:08:22.790
the mechanics of our Tweeter.

99
00:08:22.790 --> 00:08:24.430
I think Brian and

100
00:08:24.430 --> 00:08:29.630
I have a million dollar idea here,
so you guys better not steal it.

101
00:08:31.610 --> 00:08:40.694
Come after you with lawyers.
&gt;&gt; Nina Zakharenko: Anyone,

102
00:08:40.694 --> 00:08:43.755
questions, questions
about how this all fits

103
00:08:43.755 --> 00:08:48.902
together?
&gt;&gt; Nina Zakharenko: You guys all

104
00:08:48.902 --> 00:08:56.519
look hungry and tired.
&gt;&gt; Nina Zakharenko: Hello,

105
00:08:56.519 --> 00:08:57.990
Tweet about some food.

106
00:09:02.020 --> 00:09:08.289
So that's all that Brian and I have
unless, Brian, do you wanna add anything?

107
00:09:08.289 --> 00:09:13.289
So this is us.

108
00:09:13.289 --> 00:09:17.329
&gt;&gt; [INAUDIBLE]

109
00:09:17.329 --> 00:09:19.315
&gt;&gt; Nina Zakharenko: We are on Twitter,

110
00:09:19.315 --> 00:09:24.406
I'm on Twitter @nnja,
Brian is @holtbt, and

111
00:09:24.406 --> 00:09:30.710
if you guys have any questions,
feel free to tweet at us.

112
00:09:30.710 --> 00:09:33.760
It's probably the fastest way
that you'll get back a response.

113
00:09:35.774 --> 00:09:37.980
It was really a pleasure
working with you all.

114
00:09:37.980 --> 00:09:39.660
So, thank you very much.

