WEBVTT

1
00:00:00.000 --> 00:00:04.701
[MUSIC]

2
00:00:04.701 --> 00:00:07.450
&gt;&gt; Speaker 1: This may or
may not be off topic, I'm not sure.

3
00:00:07.450 --> 00:00:12.190
But is there any connection to objects
like this and records like saying

4
00:00:12.190 --> 00:00:19.280
redefining a person as Nina or
Brian or myself and,

5
00:00:19.280 --> 00:00:25.230
or is it just person is very specific
one set of variables in this case.

6
00:00:25.230 --> 00:00:26.140
&gt;&gt; Brian Holt: Okay.
&gt;&gt; Speaker 1: And it could have

7
00:00:26.140 --> 00:00:28.980
been just named someone specific
because it's not generalized.

8
00:00:28.980 --> 00:00:30.440
Does that make any sense?

9
00:00:30.440 --> 00:00:31.510
&gt;&gt; Brian Holt: Yeah.
I think so.

10
00:00:31.510 --> 00:00:34.850
We're kind of talking
about strict schemas.

11
00:00:34.850 --> 00:00:39.050
We're talking kind of about inheritance.

12
00:00:41.970 --> 00:00:44.560
Cool, talking about that kind of stuff.

13
00:00:44.560 --> 00:00:48.710
That concepts doesn't really,
should I keep going?

14
00:00:48.710 --> 00:00:49.210
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Brian Holt: Okay.

15
00:00:49.210 --> 00:00:50.650
&gt;&gt; Speaker 3: I'm just gonna make

16
00:00:50.650 --> 00:00:53.340
sure that this doesn't go to sleep.

17
00:00:55.180 --> 00:00:55.730
&gt;&gt; Brian Holt: Okay, cool.

18
00:00:55.730 --> 00:01:00.550
&gt;&gt; Speaker 3: But you can keep talking
&gt;&gt; Brian Holt: So in JavaScript there's no

19
00:01:00.550 --> 00:01:05.738
such thing as schema,
at least not built in for language.

20
00:01:05.738 --> 00:01:09.110
So objects are kind of whatever
you define them to be.

21
00:01:09.110 --> 00:01:12.020
That being said, you can actually create
what are called constructor functions.

22
00:01:12.020 --> 00:01:15.190
There's such things like the new keyword.

23
00:01:15.190 --> 00:01:16.880
If [INAUDIBLE] those
ring a bell then great.

24
00:01:16.880 --> 00:01:18.290
If not, then don't worry about them.

25
00:01:18.290 --> 00:01:21.550
Cuz they're not actually really
used that much in JavaScript.

26
00:01:21.550 --> 00:01:25.380
People tend to just stick to
what's called object literal

27
00:01:25.380 --> 00:01:27.600
syntax which is what I
was showing you up here.

28
00:01:27.600 --> 00:01:29.280
With the two curly braces.

29
00:01:29.280 --> 00:01:32.690
Just because it is really short,
simple, succinct.

30
00:01:32.690 --> 00:01:34.940
But if you are actually talking about one,
two, and four.

31
00:01:34.940 --> 00:01:36.740
It's like every object must have a name.

32
00:01:36.740 --> 00:01:38.140
Every object must have an age.

33
00:01:38.140 --> 00:01:38.760
Or something like that.

34
00:01:39.820 --> 00:01:42.110
You essentially have to bring
in another library to do it.

35
00:01:42.110 --> 00:01:44.430
Or you have to write what
are called structured functions.

36
00:01:44.430 --> 00:01:45.027
Which is kinda like,

37
00:01:45.027 --> 00:01:47.260
I'm not gonna talk about them because I
don't think that they are that useful.

38
00:01:48.780 --> 00:01:51.668
Did I address your question, or
did I go in another direction?

39
00:01:51.668 --> 00:01:55.999
&gt;&gt; Speaker 1: [LAUGH] Yeah.

40
00:01:55.999 --> 00:02:00.510
Just okay, so
a person is a specific thing, and

41
00:02:00.510 --> 00:02:05.280
it's not like you have different people
who all have that variable structure then.

42
00:02:05.280 --> 00:02:06.020
&gt;&gt; Brian Holt: Exactly.

43
00:02:06.020 --> 00:02:07.130
&gt;&gt; Speaker 1: Okay.
&gt;&gt; Brian Holt: It's a single

44
00:02:07.130 --> 00:02:08.430
instance of an object.

45
00:02:08.430 --> 00:02:10.630
It's not a general purpose object.

46
00:02:10.630 --> 00:02:11.520
&gt;&gt; Speaker 1: Okay.
&gt;&gt; Brian Holt: Yeah, and

47
00:02:13.360 --> 00:02:16.990
if you wanted a general purpose
type object, you would write like

48
00:02:16.990 --> 00:02:21.420
a constructor function that would
return to something like that.

49
00:02:22.560 --> 00:02:23.770
Cool.

50
00:02:23.770 --> 00:02:26.530
&gt;&gt; Speaker 3: From the chat,
[COUGH] going back to this example.

51
00:02:26.530 --> 00:02:31.960
The question was, so it returns
the first var it sees after the loop,

52
00:02:33.060 --> 00:02:36.788
many kinda clarify why
does it pick favorite.

53
00:02:36.788 --> 00:02:39.410
You have two vars with global scope,
what would happen?

54
00:02:39.410 --> 00:02:44.332
&gt;&gt; Brian Holt: So if I head down here and
say var favorite = I

55
00:02:44.332 --> 00:02:48.862
don't know, another car of some sort.

56
00:02:48.862 --> 00:02:51.858
So it's gonna take the last one.

57
00:02:51.858 --> 00:02:52.790
Right?

58
00:02:52.790 --> 00:02:57.443
It's gonna take the last
time it was declared, right?

59
00:02:57.443 --> 00:02:59.725
It's kinda like var x = 5.

60
00:02:59.725 --> 00:03:02.710
And then var x = 7, right?

61
00:03:02.710 --> 00:03:03.890
Like, what is x right now?

62
00:03:06.060 --> 00:03:07.890
The answer is, first of all,
this is a really bad practice right?

63
00:03:07.890 --> 00:03:09.550
Because you don't wanna
declare your variables twice.

64
00:03:10.950 --> 00:03:12.830
Like cuz it's really confusing and
you're like,

65
00:03:12.830 --> 00:03:15.140
what is this person
actually intending to do?

66
00:03:15.140 --> 00:03:16.000
I don't know.

67
00:03:16.000 --> 00:03:17.100
So you would typically see that,

68
00:03:17.100 --> 00:03:19.860
and just say like,
if you were trying to change the values.

69
00:03:19.860 --> 00:03:24.160
But the simple answer to that question is
that it is going to take the last one that

70
00:03:24.160 --> 00:03:25.930
happened, the last thing that was run.

71
00:03:25.930 --> 00:03:28.340
Which I think kinda makes sense, right?

72
00:03:28.340 --> 00:03:28.920
It's kinda like math.

73
00:03:28.920 --> 00:03:34.370
Does that address the question?

74
00:03:34.370 --> 00:03:35.060
&gt;&gt; Speaker 3: One second.

75
00:03:35.060 --> 00:03:36.170
&gt;&gt; Brian Holt: Okay.

76
00:03:47.731 --> 00:03:50.140
&gt;&gt; Brian Holt: So
how do we feel about this.

77
00:03:51.640 --> 00:03:53.690
This is again, a contrived example.

78
00:03:53.690 --> 00:03:56.450
It's typically not going to be,
that difficult.

79
00:04:01.346 --> 00:04:04.180
Do we wanna go one step further and
kind of melt your mind real quick?

80
00:04:05.880 --> 00:04:07.030
All right let's do this.

81
00:04:07.030 --> 00:04:09.140
&gt;&gt; Speaker 3: Somebody mentioned
that this behaved differently

82
00:04:10.140 --> 00:04:11.220
in chrome in [INAUDIBLE].

83
00:04:11.220 --> 00:04:16.265
Or are you talking about the example?

84
00:04:16.265 --> 00:04:22.570
&gt;&gt; [INAUDIBLE]
&gt;&gt; Speaker 3: Sorry, sorry.

85
00:04:22.570 --> 00:04:23.690
&gt;&gt; Brian Holt: Okay.
Cool.

86
00:04:23.690 --> 00:04:31.810
So what happens if I want func
to get Nissan Leaf, right.

87
00:04:31.810 --> 00:04:35.970
Like I've ripped off this function,
I still want it to call the correct one.

88
00:04:35.970 --> 00:04:40.020
There's a kind of fun little thing here,
in JavaScript that's called bind.

89
00:04:41.520 --> 00:04:44.420
So I can say func.bind(person).

90
00:04:44.420 --> 00:04:48.810
This is kinda recent syntax here, so

91
00:04:48.810 --> 00:04:54.315
this is kind of new frontiers
we're exploring here, kind of.

92
00:04:54.315 --> 00:04:55.600
Okay?

93
00:04:55.600 --> 00:04:58.960
Now what happens if we call func again.

94
00:04:58.960 --> 00:05:02.810
&gt;&gt; Speaker 1: Are you typing?

95
00:05:02.810 --> 00:05:03.400
&gt;&gt; Brian Holt: I am typing.

96
00:05:03.400 --> 00:05:04.180
No.

97
00:05:04.180 --> 00:05:07.420
That's all I typed.

98
00:05:07.420 --> 00:05:08.055
Is it?

99
00:05:08.055 --> 00:05:08.900
Func.bind.
No.

100
00:05:08.900 --> 00:05:09.820
It's not there.

101
00:05:09.820 --> 00:05:10.500
I am typing.

102
00:05:10.500 --> 00:05:11.370
It's not updating.

103
00:05:12.740 --> 00:05:14.060
&gt;&gt; Speaker 3: Maybe while
they're doing that,

104
00:05:14.060 --> 00:05:17.120
there was a question that
this differently in IE9?

105
00:05:17.120 --> 00:05:20.330
I don't know if you have a [INAUDIBLE] but

106
00:05:20.330 --> 00:05:25.248
Chrome would give the same results, in IE,
it shows Nissan Leaf and then undefined.

107
00:05:25.248 --> 00:05:32.000
&gt;&gt; Brian Holt: Interesting,
IE9's an interesting beast.

108
00:05:32.000 --> 00:05:36.120
Without actually delving directly
into it I'm not exactly sure what's

109
00:05:37.440 --> 00:05:38.380
happening there.

110
00:05:38.380 --> 00:05:40.260
&gt;&gt; Speaker 3: Okay.
Their JavaScript engine, that's weird.

111
00:05:40.260 --> 00:05:40.760
Okay.

112
00:05:40.760 --> 00:05:41.830
&gt;&gt; Brian Holt: That's a good question.

113
00:05:41.830 --> 00:05:45.365
&gt;&gt; Speaker 3: So
the answer is, use Chrome.

114
00:05:45.365 --> 00:05:46.636
[LAUGH]
&gt;&gt; Brian Holt: [LAUGH] The answer is,

115
00:05:46.636 --> 00:05:50.359
I'm sorry if you have to support IE9,
that's the real answer.

116
00:05:53.421 --> 00:05:55.550
&gt;&gt; Speaker 4: You should be cool like me.

117
00:05:55.550 --> 00:05:56.500
&gt;&gt; Brian Holt: And use Linux.

118
00:05:56.500 --> 00:06:00.490
That's the answer, everyone use Linux.

119
00:06:00.490 --> 00:06:02.300
Just kidding, cool.

120
00:06:02.300 --> 00:06:05.050
&gt;&gt; Speaker 3: And
another question what's the difference

121
00:06:05.050 --> 00:06:06.566
between bind call and apply?

122
00:06:06.566 --> 00:06:11.810
&gt;&gt; Brian Holt: It's a good question,
sorry call and

123
00:06:11.810 --> 00:06:18.480
apply are very similar and
they have the only way they differ is,

124
00:06:18.480 --> 00:06:22.810
one takes an array of parameters
to pass to the function.

125
00:06:22.810 --> 00:06:27.220
And one takes just like
you just list all your

126
00:06:27.220 --> 00:06:29.870
parameters as if they
were normal parameters.

127
00:06:29.870 --> 00:06:34.370
I get them mixed up, I don't remember
which one is call which one is apply but

128
00:06:34.370 --> 00:06:38.220
one's one one's the other so
it's pretty easy to figure out.

129
00:06:38.220 --> 00:06:39.620
Bind is a little bit different.

130
00:06:40.890 --> 00:06:43.070
Bind is actually,
you take the function and

131
00:06:43.070 --> 00:06:47.640
you're permanently binding its context,
which is, when this comes back up,

132
00:06:47.640 --> 00:06:50.356
I will definitely show
you what that means.

133
00:06:50.356 --> 00:06:52.960
[COUGH] But essentially,
you call bind once and

134
00:06:52.960 --> 00:06:55.660
then every time from there on out,
it will always call with that context.

135
00:06:55.660 --> 00:06:58.820
Whereas call and apply both are like,
a one time thing.

136
00:06:58.820 --> 00:07:01.040
So it only changes the context one time.

137
00:07:04.230 --> 00:07:09.380
So, and actually I'm gonna jump straight
into talking about bind right now.

138
00:07:09.380 --> 00:07:11.730
So let's go back to our no smoking sign,

139
00:07:11.730 --> 00:07:15.194
because apparently I get stuck on
analogies and I can't get off them.

140
00:07:15.194 --> 00:07:17.900
&gt;&gt; Class: [LAUGH]
&gt;&gt; Brian Holt: [LAUGH] What was my

141
00:07:17.900 --> 00:07:18.540
analogy yesterday?

142
00:07:18.540 --> 00:07:20.070
I don't remember, it's okay.

143
00:07:20.070 --> 00:07:20.860
Tupperware.

144
00:07:20.860 --> 00:07:21.520
Yeah!

145
00:07:21.520 --> 00:07:22.280
You guys all remember.

146
00:07:22.280 --> 00:07:23.720
You're never gonna forget that.

147
00:07:25.274 --> 00:07:29.280
[COUGH] So, bind with talking
about our no smoking sign,

148
00:07:29.280 --> 00:07:32.330
no smoking in this building,
it's kind of like saying the no smoking

149
00:07:32.330 --> 00:07:35.140
sign is still in the middle of the field,
right?

150
00:07:35.140 --> 00:07:37.990
But we've setup a neon sign that says.

151
00:07:37.990 --> 00:07:38.810
We're in the middle of field.

152
00:07:38.810 --> 00:07:39.840
We know we're in the middle of field,

153
00:07:39.840 --> 00:07:43.054
but it actually refers to
that building way over there.

154
00:07:43.054 --> 00:07:44.257
Right?
It's just kind of,

155
00:07:44.257 --> 00:07:47.530
you can still kind of mess around
with it and pull it out, but

156
00:07:47.530 --> 00:07:51.790
it's just maybe a mail home to
send your address on the sign,

157
00:07:51.790 --> 00:07:56.080
so everyone knows what
this still refers to.

158
00:07:56.080 --> 00:07:56.990
So in this particular case,

159
00:07:56.990 --> 00:08:01.910
I said bind(person) which is the name
of this object up here, right?

160
00:08:01.910 --> 00:08:05.320
So now this function even though
it's ripped out of person

161
00:08:05.320 --> 00:08:07.260
still actually refers still to person.

162
00:08:08.480 --> 00:08:13.050
Or I mean you can even get a little
bit more fancy and say var man = and

163
00:08:13.050 --> 00:08:18.460
then you say he has a favorite and
it's like a BMW i7 or something like that.

164
00:08:18.460 --> 00:08:23.910
This is kind of a fun little thing.

165
00:08:23.910 --> 00:08:26.773
You can say, this refers to man.

166
00:08:26.773 --> 00:08:31.618
Okay?
Hopefully that now runs.

167
00:08:38.279 --> 00:08:39.159
&gt;&gt; Brian Holt: Whatever.

168
00:08:39.159 --> 00:08:40.418
It was just refreshing.

169
00:08:56.139 --> 00:08:59.419
&gt;&gt; Brian Holt: I'm apparently
having issues with this.

170
00:08:59.419 --> 00:09:00.978
&gt;&gt; Speaker 1: Is it supposed to say BMW?

171
00:09:00.978 --> 00:09:02.479
&gt;&gt; Brian Holt: It should say BMW.

172
00:09:09.159 --> 00:09:14.832
&gt;&gt; Brian Holt: I'm not sure, but
that's kind of the general idea that like,

173
00:09:14.832 --> 00:09:17.220
that it would say BMW i7.

174
00:09:17.220 --> 00:09:18.450
I don't know what happened there.

175
00:09:18.450 --> 00:09:21.769
Okay.

176
00:09:21.769 --> 00:09:24.009
Interesting.

177
00:09:29.729 --> 00:09:32.209
&gt;&gt; Brian Holt: Person.getFave

178
00:09:48.249 --> 00:09:49.649
&gt;&gt; Brian Holt: Not sure.

179
00:09:49.649 --> 00:09:53.980
&gt;&gt; Speaker 6: How does it
know that man is a person?

180
00:09:53.980 --> 00:09:56.340
&gt;&gt; Brian Holt: So it doesn't and
that's kind of the magic of it,

181
00:09:56.340 --> 00:10:01.290
is that you can take these functions,
you can rip them out of other objects and

182
00:10:01.290 --> 00:10:03.690
apply them to that different objects.

183
00:10:03.690 --> 00:10:06.690
It's kind of achieving
a level of versatility.

184
00:10:06.690 --> 00:10:08.790
&gt;&gt; Speaker 3: I think on your func bind.

185
00:10:08.790 --> 00:10:10.145
&gt;&gt; Brian Holt: Which line?

186
00:10:10.145 --> 00:10:16.464
&gt;&gt; Speaker 3: Somebody's saying maybe you
need parentheses, you have them, okay.

187
00:10:16.464 --> 00:10:19.090
&gt;&gt; [INAUDIBLE]
&gt;&gt; Speaker 6: So

188
00:10:19.090 --> 00:10:23.280
you're taking the getFave
function on a person.

189
00:10:23.280 --> 00:10:25.720
You're binding it to the man object.

190
00:10:27.480 --> 00:10:28.684
Is that correct?

191
00:10:28.684 --> 00:10:29.704
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 3: Yeah, but

192
00:10:29.704 --> 00:10:33.669
somebody mentioned that like func2
then you would need parentheses

193
00:10:33.669 --> 00:10:35.950
before you called .bind, is that?

194
00:10:35.950 --> 00:10:37.135
&gt;&gt; Brian Holt: That might be it.

195
00:10:37.135 --> 00:10:42.630
So.

196
00:10:42.630 --> 00:10:43.430
Yep, that's it.

197
00:10:59.367 --> 00:11:00.427
&gt;&gt; Brian Holt: Anyway.

198
00:11:00.427 --> 00:11:02.448
&gt;&gt; Speaker 6: So don't use bind [LAUGH].

199
00:11:02.448 --> 00:11:04.250
&gt;&gt; Brian Holt: Yeah no,
I mean bind is really powerful,

200
00:11:04.250 --> 00:11:07.441
I'm just kind of struggling with,
this is kind of a contrived example and

201
00:11:07.441 --> 00:11:09.740
I think I just kind of got messed up, so.

202
00:11:09.740 --> 00:11:13.820
Maybe we'll come back to this but
find this use for setting contexts.

203
00:11:16.740 --> 00:11:17.920
That's disappointing, anyway.

204
00:11:20.040 --> 00:11:21.890
So let's go ahead and move on to.

205
00:11:23.190 --> 00:11:25.866
&gt;&gt; Speaker 3: There's a lot of a bind
in that next JavaScript course.

206
00:11:25.866 --> 00:11:26.444
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 3: It's

207
00:11:26.444 --> 00:11:27.800
on site Frontend Masters.

208
00:11:27.800 --> 00:11:29.980
&gt;&gt; Brian Holt: Yeah,
take a look at Calsen's.

209
00:11:29.980 --> 00:11:31.200
&gt;&gt; Speaker 3: And
on a flat and all that stuff.

210
00:11:31.200 --> 00:11:31.700
&gt;&gt; Brian Holt: Yeah.

