WEBVTT

1
00:00:00.000 --> 00:00:03.696
[MUSIC]

2
00:00:03.696 --> 00:00:05.616
&gt;&gt; Brian Holt: Let's us talk
about chaining a little bit.

3
00:00:08.656 --> 00:00:12.300
&gt;&gt; Brian Holt: Again same text appears,
nothing to change in our HTML.

4
00:00:13.700 --> 00:00:15.350
So, let's take a look at this.

5
00:00:15.350 --> 00:00:18.210
So, we have text, magic, and

6
00:00:18.210 --> 00:00:22.770
CSS background color, and
we're setting that to be orange.

7
00:00:24.370 --> 00:00:31.191
This effect is called chaining and
you'll see it a lot in JavaScript.

8
00:00:31.191 --> 00:00:34.050
So I put new lines here.

9
00:00:34.050 --> 00:00:35.601
But really what's happening is this.

10
00:00:35.601 --> 00:00:39.320
All these periods are next to each other.

11
00:00:40.650 --> 00:00:41.950
So .text, and

12
00:00:41.950 --> 00:00:47.050
then after that it's returning
an object that then is calling .css on.

13
00:00:51.910 --> 00:00:56.268
And if we wanted to make this kind of more
verbose, what we could do is copy that,

14
00:00:56.268 --> 00:01:00.650
hit Enter there.

15
00:01:00.650 --> 00:01:02.830
This is equivalent to
what we started out with.

16
00:01:05.870 --> 00:01:07.930
So we have this caption
text right here and

17
00:01:07.930 --> 00:01:11.380
we're calling the text method on it and
saying magic which you see up here.

18
00:01:11.380 --> 00:01:13.441
Then we take the caption text again,

19
00:01:13.441 --> 00:01:18.104
we're using the CSS function which as you
can imagine lets you modify the CSS on it.

20
00:01:18.104 --> 00:01:22.201
And what changes our background
color to be orange, right.

21
00:01:22.201 --> 00:01:25.245
What people cannot [INAUDIBLE]
this is kind of a verbose,

22
00:01:25.245 --> 00:01:28.934
like I wanna make a bunch of changes or
I want still the same dominos,

23
00:01:28.934 --> 00:01:31.881
I eventually made it possible,
it's gonna blow up.

24
00:01:36.081 --> 00:01:38.510
&gt;&gt; Brian Holt: They made it
possible to do something like this.

25
00:01:38.510 --> 00:01:41.380
Whether you could say caption-text
right here, and say all right,

26
00:01:41.380 --> 00:01:43.570
change the text to 'Magic!' and
then after you're done doing that,

27
00:01:43.570 --> 00:01:46.420
change the CSS to be
background-color orange.

28
00:01:48.050 --> 00:01:51.401
That's kinda what's happening here.

29
00:01:51.401 --> 00:01:52.620
Does that make sense?

30
00:01:52.620 --> 00:01:53.850
Just chaining methods together.

31
00:01:55.520 --> 00:01:59.449
You can simulate this pattern yourself
because all they are doing is returning

32
00:01:59.449 --> 00:02:00.231
this, right?

33
00:02:00.231 --> 00:02:05.580
So like let's just write a bit of
pseudo code here for a second.

34
00:02:05.580 --> 00:02:07.841
Like function text, right?

35
00:02:07.841 --> 00:02:10.119
They say like magically change text here,

36
00:02:10.119 --> 00:02:13.420
I'm not gonna actually write
out how to change text, right.

37
00:02:13.420 --> 00:02:17.690
And then the last line of
it is return this, right.

38
00:02:17.690 --> 00:02:21.410
Because if you think about it, it's
returning the object that was called on,

39
00:02:21.410 --> 00:02:23.470
so as soon as you return that
object that you called on,

40
00:02:23.470 --> 00:02:25.470
then you're free to call
more methods on it.

41
00:02:27.390 --> 00:02:33.244
Or stated differently,

42
00:02:33.244 --> 00:02:40.777
caption-text.magic right.

43
00:02:40.777 --> 00:02:43.654
And if I said var x equals that,

44
00:02:43.654 --> 00:02:48.877
the answer is like what is x right here,
x is going to be?

45
00:02:48.877 --> 00:02:52.157
('.caption-text') right here, okay?

46
00:02:52.157 --> 00:02:56.549
And then after that we're gonna say,

47
00:02:56.549 --> 00:03:02.457
x.css('background-color','blue').

48
00:03:05.377 --> 00:03:06.497
&gt;&gt; Brian Holt: Okay?

49
00:03:09.277 --> 00:03:12.036
&gt;&gt; Brian Holt: So note we store
the variable right there, and

50
00:03:12.036 --> 00:03:15.060
then we turn around and we call it.

51
00:03:15.060 --> 00:03:17.490
We call CSS on that same thing.

52
00:03:17.490 --> 00:03:21.620
What this lineup here is doing is
cutting out that middleman x variable.

53
00:03:25.140 --> 00:03:26.300
I see some blank stares.

54
00:03:26.300 --> 00:03:29.141
How do we feel about that?

55
00:03:29.141 --> 00:03:31.850
Okay, questions?

56
00:03:31.850 --> 00:03:34.760
&gt;&gt; Speaker 2: So which way is the best
practice for the readability?

57
00:03:36.390 --> 00:03:38.290
I kind of like the top.

58
00:03:38.290 --> 00:03:39.630
The first way.

59
00:03:39.630 --> 00:03:42.581
&gt;&gt; Brian Holt: This is fine.

60
00:03:42.581 --> 00:03:46.797
As a general rule I tend to stray away
from chaining because I feel like what

61
00:03:46.797 --> 00:03:50.542
you're worried about,
that it becomes unreadable, happens.

62
00:03:50.542 --> 00:03:54.076
The exception I make to that is jQuery
because it is such a common practice in

63
00:03:54.076 --> 00:03:55.820
the jQuery community.

64
00:03:55.820 --> 00:03:58.840
Like this make sense, right,
like I have my caption text.

65
00:03:58.840 --> 00:04:02.750
Okay I'm gonna modify the text a bit
then I'm gonna modify the CSS a bit.

66
00:04:02.750 --> 00:04:08.660
That's a line of thought I can follow.

67
00:04:08.660 --> 00:04:10.560
&gt;&gt; Speaker 2: Can you drag
the middle bar and just drag it?

68
00:04:12.130 --> 00:04:17.170
&gt;&gt; Brian Holt: Yeah, sorry about that.

69
00:04:17.170 --> 00:04:18.760
&gt;&gt; Speaker 3: So
do you even need to call x?

70
00:04:18.760 --> 00:04:25.890
As soon as I put var space x in front of
it, it was like still doing the magic.

71
00:04:25.890 --> 00:04:30.006
Like, is it implementing it
just by creating a variable?

72
00:04:30.006 --> 00:04:31.970
&gt;&gt; Brian Holt: Right here?

73
00:04:31.970 --> 00:04:33.890
&gt;&gt; Speaker 3: Yeah,
if you took out the second one,

74
00:04:33.890 --> 00:04:36.030
should it just say magic without the blue?

75
00:04:36.030 --> 00:04:42.160
Or, would it say Lorem Ipsum because
you haven't actually called x yet?

76
00:04:42.160 --> 00:04:44.930
&gt;&gt; Brian Holt: So you're talking
about if I take this one, right?

77
00:04:44.930 --> 00:04:45.760
&gt;&gt; Speaker 3: The next one, no.

78
00:04:45.760 --> 00:04:49.750
And it's like if you define it but
don't call it, what should happen?

79
00:04:50.970 --> 00:04:54.270
&gt;&gt; Brian Holt: So you're saying if I don't
store it right here, it'll still work,

80
00:04:54.270 --> 00:04:56.370
is that it?

81
00:04:56.370 --> 00:04:59.051
&gt;&gt; Speaker 3: No, I was wondering.

82
00:05:03.352 --> 00:05:06.992
&gt;&gt; Speaker 3: Okay, so
I had deleted the first part in mine and

83
00:05:06.992 --> 00:05:10.640
I just had var x equals and
it's still doing it.

84
00:05:11.770 --> 00:05:13.330
&gt;&gt; Brian Holt: Right,
the magic still works.

85
00:05:13.330 --> 00:05:17.440
&gt;&gt; Speaker 3: Yeah so but you haven't
called it yet, you've only defined it so

86
00:05:17.440 --> 00:05:19.950
why is it putting magic in there
instead of the lorem ipsum?

87
00:05:19.950 --> 00:05:24.350
&gt;&gt; Brian Holt: Okay, I see what you're
getting at, and that's a good question.

88
00:05:24.350 --> 00:05:28.682
So, she's asking,
I'm calling this function here,

89
00:05:28.682 --> 00:05:33.990
it says text magic, and I'm storing it
in x, but the effect is still happening.

90
00:05:33.990 --> 00:05:36.270
So, like, how is it still happening,
if I'm storing it and

91
00:05:36.270 --> 00:05:38.150
never doing anything with it?

92
00:05:38.150 --> 00:05:44.168
So, it's kind of an interesting answer,
the fact, like, this .text function,

93
00:05:44.168 --> 00:05:49.500
whether or not you store anything, is
going to modify the text, no matter what.

94
00:05:49.500 --> 00:05:51.980
That's the point of the text
method is to modify it.

95
00:05:51.980 --> 00:05:59.071
So, even if you delete this right, it
doesn't care if it's been stored or not.

96
00:05:59.071 --> 00:06:01.712
So that function is still
happening either way.

97
00:06:03.691 --> 00:06:07.779
&gt;&gt; Brian Holt: So, or maybe stated in a
different way, that the returned value of

98
00:06:07.779 --> 00:06:12.100
this is actually not important to
the overall function of it, right?

99
00:06:12.100 --> 00:06:16.219
So it's returning itself,
but that doesn't matter.

100
00:06:16.219 --> 00:06:20.480
Does that kinda make sense a little bit?

101
00:06:20.480 --> 00:06:24.300
So this is only important if I wanted
to then operate it afterwards.

102
00:06:24.300 --> 00:06:31.819
x.css, color, red.

103
00:06:31.819 --> 00:06:34.439
Or something like that.

104
00:06:34.439 --> 00:06:37.023
&gt;&gt; Speaker 2: So,
because it's a call by reference,

105
00:06:37.023 --> 00:06:40.370
when it's called it's
actually updating the DOM.

106
00:06:41.620 --> 00:06:44.278
It has to be executed to
update the value of x.

107
00:06:44.278 --> 00:06:49.912
So on its execution,
it's updating the DOM.

108
00:06:49.912 --> 00:06:56.910
&gt;&gt; Brian Holt: Mm-hm,
so again here this and

109
00:06:56.910 --> 00:07:01.410
this are equivalent in terms of
what's actually happening to the DOM.

110
00:07:01.410 --> 00:07:04.220
Here, we're just like saying,
it's gonna return to you itself and

111
00:07:04.220 --> 00:07:07.920
you're just gonna like, I don't care
you're giving yourself back to me.

112
00:07:07.920 --> 00:07:10.310
You can just go flood away and
I don't care.

113
00:07:11.500 --> 00:07:15.212
Here, you're saying like, I do care
what you're returning back to me.

114
00:07:15.212 --> 00:07:18.080
I wanna keep whatever you're
returning back to me.

115
00:07:18.080 --> 00:07:20.870
&gt;&gt; Speaker 4: You're really keeping it
even if you don't assign it to another

116
00:07:20.870 --> 00:07:24.531
variable cuz it's stored in
that global context for chain.

117
00:07:24.531 --> 00:07:29.172
&gt;&gt; Brian Holt: Sure.

118
00:07:29.172 --> 00:07:31.710
Okay, so, you can still reference it.

119
00:07:31.710 --> 00:07:36.709
If I say later down in the function
like I save this again, and say .css.

120
00:07:36.709 --> 00:07:39.150
Color red, right?

121
00:07:41.640 --> 00:07:45.080
So it's still available to you
if you wanna call it again.

122
00:07:45.080 --> 00:07:47.370
But you still have to call this function.

123
00:07:47.370 --> 00:07:52.300
The reference to what this returns is
lost if you don't store it somewhere.

124
00:07:52.300 --> 00:07:58.480
&gt;&gt; Speaker 4: But if you take out the
semicolon after the first one, the effect

125
00:07:58.480 --> 00:08:03.430
is same because you're really doing
another call when you do the .css change.

126
00:08:03.430 --> 00:08:05.482
&gt;&gt; Brian Holt: Yes if I want
to chain them together I can.

127
00:08:05.482 --> 00:08:08.058
&gt;&gt; Speaker 4: So
somewhere in the global context,

128
00:08:08.058 --> 00:08:12.222
it is storing the return value
of that first function call.

129
00:08:12.222 --> 00:08:15.744
&gt;&gt; Brian Holt: I guess.

130
00:08:15.744 --> 00:08:19.248
The full answer to that is I'm not exactly
sure that the mechanics of how JavaScript

131
00:08:19.248 --> 00:08:20.430
is doing it.

132
00:08:20.430 --> 00:08:22.607
I don't know if they're
storing a reference to it or

133
00:08:22.607 --> 00:08:24.891
if they're instantly operating
on the return value.

134
00:08:24.891 --> 00:08:27.640
That would seem to make sense to me though
that there would be a variable storing

135
00:08:27.640 --> 00:08:28.190
it somewhere.

136
00:08:30.530 --> 00:08:34.770
But as soon as this, so
even though I don't have a semicolon here

137
00:08:34.770 --> 00:08:39.010
as soon as this line happens I can't
come down here and say .color.

138
00:08:39.010 --> 00:08:40.410
It's lost after that.

