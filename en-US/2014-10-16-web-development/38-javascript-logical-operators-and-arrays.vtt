WEBVTT

1
00:00:00.420 --> 00:00:04.414
[MUSIC]

2
00:00:04.414 --> 00:00:06.630
&gt;&gt; Nina Zakharenko: So
here are some thing that's kind of tricky.

3
00:00:06.630 --> 00:00:10.256
JavaScript supports logical operators.

4
00:00:10.256 --> 00:00:15.590
I'm not gonna do truth tables right now,
so I'll just show you guys how to

5
00:00:16.890 --> 00:00:21.499
use these logical
operators in the console.

6
00:00:23.210 --> 00:00:27.460
So, I'm just gonna put a comma here so
it doesn't execute.

7
00:00:27.460 --> 00:00:28.959
This symbol means AND.

8
00:00:28.959 --> 00:00:35.270
And AND means that you have two values,
an A and a B.

9
00:00:36.460 --> 00:00:42.170
For AND to return true,
both those values have to be true.

10
00:00:42.170 --> 00:00:44.740
So if I do true and true.

11
00:00:48.269 --> 00:00:49.410
&gt;&gt; Nina Zakharenko: We're
gonna get a true.

12
00:00:50.520 --> 00:00:54.906
I do a true and a false,
we're gonna get a false.

13
00:00:54.906 --> 00:00:59.647
&gt;&gt; Brian Holt: You need to [INAUDIBLE].

14
00:00:59.647 --> 00:01:00.240
&gt;&gt; Nina Zakharenko: Yes.

15
00:01:00.240 --> 00:01:01.670
False and false is false.

16
00:01:01.670 --> 00:01:03.460
True and false is false.

17
00:01:03.460 --> 00:01:11.710
False and true also false so there's only
one condition where AND will return true.

18
00:01:11.710 --> 00:01:16.850
The second guy we have here is
these two pipe-looking thingies,

19
00:01:16.850 --> 00:01:19.990
and that's an OR operation.

20
00:01:19.990 --> 00:01:26.990
So OR means that either one of the values
is true, and a fun thing about OR

21
00:01:26.990 --> 00:01:31.440
is if the first value is true,
JavaScript is like okay, cool I'm done.

22
00:01:31.440 --> 00:01:34.640
It doesn't matter what
the second value is.

23
00:01:34.640 --> 00:01:37.216
So you can do like true and
blah, blah, blah.

24
00:01:37.216 --> 00:01:43.513
Oops, true and-
&gt;&gt; Brian Holt: Two [INAUDIBLE].

25
00:01:43.513 --> 00:01:49.670
&gt;&gt; Nina Zakharenko: Thank you, sorry guys.

26
00:01:54.260 --> 00:02:01.650
Sorry, I'm using the wrong symbol and
that's why it's not working.

27
00:02:03.300 --> 00:02:07.980
So true or whatever,
doesn't matter if it's defined or

28
00:02:07.980 --> 00:02:10.050
not or like not even valid JavaScript.

29
00:02:11.270 --> 00:02:13.380
JavaScript is like,
I got a true, cool, I'm done.

30
00:02:13.380 --> 00:02:18.250
So true or false, true, false or true,

31
00:02:18.250 --> 00:02:25.003
also true
&gt;&gt; Nina Zakharenko: The only time OR

32
00:02:25.003 --> 00:02:29.240
returns false if is if
both values are false.

33
00:02:29.240 --> 00:02:31.143
So NOT is just a negation.

34
00:02:31.143 --> 00:02:35.303
Not true is false,

35
00:02:35.303 --> 00:02:39.470
not false is true.

36
00:02:39.470 --> 00:02:45.550
And we can combine these, the AND and the
OR and the NOT in different combinations.

37
00:02:47.360 --> 00:02:50.745
I won't go into anything too complicated,
but for an example.

38
00:02:50.745 --> 00:02:56.440
Let's do true and true.

39
00:02:56.440 --> 00:02:58.000
We're gonna use parenthesis here, and

40
00:02:58.000 --> 00:03:02.870
we're gonna negate the value of
what's inside those parenthesis.

41
00:03:04.110 --> 00:03:06.750
So true and true returns true.

42
00:03:06.750 --> 00:03:09.240
And then negating it returns false.

43
00:03:11.485 --> 00:03:13.410
&gt;&gt; Nina Zakharenko: Is anyone
have questions about this?

44
00:03:15.410 --> 00:03:18.320
&gt;&gt; Speaker 3: There's question
about the single logical operators.

45
00:03:18.320 --> 00:03:22.279
Do they perform bit-wise operations?

46
00:03:22.279 --> 00:03:22.820
&gt;&gt; Nina Zakharenko: Yeah,

47
00:03:22.820 --> 00:03:27.400
but not something you wanna mess with
in JavaScript unless you're crazy,

48
00:03:27.400 --> 00:03:28.430
pretty much.

49
00:03:28.430 --> 00:03:30.695
&gt;&gt; Brian Holt: Even if you're crazy.

50
00:03:30.695 --> 00:03:37.045
&gt;&gt; Nina Zakharenko: Yeah,
just don't do it.

51
00:03:37.045 --> 00:03:41.011
&gt;&gt; Nina Zakharenko: So, here's
a combination of a logical operator and

52
00:03:41.011 --> 00:03:42.190
a comparison.

53
00:03:43.620 --> 00:03:48.510
So we have x is 5 and y is 3.

54
00:03:48.510 --> 00:03:51.170
We check, is x less than 4?

55
00:03:51.170 --> 00:03:53.800
The value is false.

56
00:03:53.800 --> 00:03:55.920
Is y less than 3?

57
00:03:55.920 --> 00:03:58.995
Yeah it is, so false and true is false.

58
00:03:58.995 --> 00:04:04.080
&gt;&gt; Nina Zakharenko: Oops, same with
this operation here at the bottom.

59
00:04:04.080 --> 00:04:06.230
X is not less than 4.

60
00:04:06.230 --> 00:04:08.350
But y is less than 4.

61
00:04:08.350 --> 00:04:13.700
So if we do that expression and
we OR it we'll get back a true.

62
00:04:17.650 --> 00:04:23.200
So one of the most useful features
of JavaScript are arrays.

63
00:04:23.200 --> 00:04:25.100
So arrays are a list of variables.

64
00:04:26.930 --> 00:04:32.270
They're written with square brackets,
so here's a notation for an array.

65
00:04:33.940 --> 00:04:36.320
The values in it
are separated with a comma.

66
00:04:39.560 --> 00:04:42.570
Arrays have some useful
properties to them.

67
00:04:42.570 --> 00:04:44.080
One of them being length.

68
00:04:45.490 --> 00:04:51.180
So, oops, if we make an array here

69
00:05:00.595 --> 00:05:01.964
&gt;&gt; Nina Zakharenko: We use an open score

70
00:05:01.964 --> 00:05:07.710
bracket to start it we put in some
strings and they're common delimited.

71
00:05:07.710 --> 00:05:11.260
We use closing bracket to close it.

72
00:05:11.260 --> 00:05:13.400
So now we have our array.

73
00:05:13.400 --> 00:05:20.170
We use the name of our array,
we can call .link on it.

74
00:05:20.170 --> 00:05:25.170
It'll give back at 2.

75
00:05:25.170 --> 00:05:29.293
So if you're using
the Chrome JavaScript console,

76
00:05:29.293 --> 00:05:35.383
just a helpful thing to know is, it knows
what methods are available on this,

77
00:05:35.383 --> 00:05:40.370
so if you start typing,
you'll get some helpful hints there.

78
00:05:49.745 --> 00:05:52.489
&gt;&gt; Nina Zakharenko: So,
if we wanna access an item in our array,

79
00:05:52.489 --> 00:05:54.060
we use square brackets.

80
00:05:55.320 --> 00:06:01.470
So we call the name of our array,
open bracket, a number, close bracket.

81
00:06:01.470 --> 00:06:05.810
So an important thing to note is that
array access is actually zero based.

82
00:06:05.810 --> 00:06:08.250
So even though the length
of our array is two,

83
00:06:08.250 --> 00:06:13.510
we would access the first
item by callings fruits zero.

84
00:06:13.510 --> 00:06:17.684
And the second item by calling fruits one

