WEBVTT

1
00:00:00.000 --> 00:00:03.823
[MUSIC]

2
00:00:03.823 --> 00:00:08.987
&gt;&gt; Nina Zakharenko: So the last thing that
we're gonna talk about today is scope and

3
00:00:08.987 --> 00:00:15.360
scope means where and how you can
use the variables you've declared.

4
00:00:15.360 --> 00:00:20.520
So if you define a variable in a function,
it's only visible to that function.

5
00:00:22.120 --> 00:00:26.820
If you declare a variable outside of
the function, and that function is in that

6
00:00:26.820 --> 00:00:31.690
same file or space, then you can use
that variable in your functions.

7
00:00:33.020 --> 00:00:36.424
So let's talk about what
happens when you forget to use

8
00:00:36.424 --> 00:00:41.941
var.
&gt;&gt; Nina Zakharenko: So

9
00:00:44.544 --> 00:00:45.149
&gt;&gt; Nina Zakharenko: We have two

10
00:00:45.149 --> 00:00:46.160
functions here.

11
00:00:47.330 --> 00:00:49.560
Print fruit and a print veggie.

12
00:00:49.560 --> 00:00:51.600
Each declare is a variable inside of them.

13
00:00:53.480 --> 00:00:55.440
And then, writes that variable.

14
00:00:58.050 --> 00:01:01.916
If we do print fruit and print veggie,
everything is super happy,

15
00:01:01.916 --> 00:01:06.885
we get the results we expect.
&gt;&gt; Nina Zakharenko: Let's do

16
00:01:06.885 --> 00:01:09.140
this quick exercise.

17
00:01:09.140 --> 00:01:12.920
We're gonna copy
the document.write that's in fruit

18
00:01:14.430 --> 00:01:20.060
into the bottom of your veggie
function and just run the code as is.

19
00:01:20.060 --> 00:01:22.645
Can someone tell me what
the result of that is?

20
00:01:50.208 --> 00:01:53.088
&gt;&gt; Nina Zakharenko: So, nada.

21
00:01:53.088 --> 00:01:55.083
&gt;&gt; Speaker 2: Yeah.

22
00:01:55.083 --> 00:01:56.712
&gt;&gt; Nina Zakharenko: Veggie doesn't know

23
00:01:56.712 --> 00:01:57.979
what a fruit is.

24
00:02:01.020 --> 00:02:06.070
So we're gonna do something tricky and
remove this var in front of the fruit.

25
00:02:09.240 --> 00:02:10.120
So now it's popping up.

26
00:02:10.120 --> 00:02:14.990
And the reason is because if you
declare a variable in JavaScript

27
00:02:14.990 --> 00:02:18.900
without using var,
it plops it on the global scope.

28
00:02:18.900 --> 00:02:24.370
It's like, hey, anyone can use me,
read me, change me, do whatever.

29
00:02:25.640 --> 00:02:26.850
And that's a pretty bad thing.

30
00:02:29.010 --> 00:02:31.100
It can happen by mistake.

31
00:02:31.100 --> 00:02:35.083
If you accidentally forget the var and
then reuse the variable name.

32
00:02:35.083 --> 00:02:38.069
So don't do it.

33
00:02:38.069 --> 00:02:44.907
Try to be very careful about using var and
not really populating,

34
00:02:44.907 --> 00:02:51.730
or polluting the global scope
with different variables.

35
00:02:51.730 --> 00:02:54.300
So even if you have a good use case,

36
00:02:54.300 --> 00:02:58.330
you know maybe you do want a variable
used across all sorts of functions.

37
00:02:58.330 --> 00:02:59.500
Try not to do it.

38
00:02:59.500 --> 00:03:04.861
It's a really bad practice.
&gt;&gt; Nina Zakharenko: A good rule

39
00:03:04.861 --> 00:03:10.629
of thumb about scopes is this
little squiggly brackets.

40
00:03:10.629 --> 00:03:17.040
If things are nested, then it can
probably access the parent variables.

41
00:03:17.040 --> 00:03:22.260
But if things are kinda of the same
level like this printFruit and

42
00:03:22.260 --> 00:03:27.685
this printVeggie, then they
probably can't access each other.

43
00:03:27.685 --> 00:03:32.251
And that's functions and
classes but does not apply to if or

44
00:03:32.251 --> 00:03:34.725
for statements, for example.

45
00:03:43.685 --> 00:03:45.264
&gt;&gt; Nina Zakharenko: This
make sense to everyone?

46
00:03:45.264 --> 00:03:48.360
This is kind of something
that's kind of tricky, yeah.

