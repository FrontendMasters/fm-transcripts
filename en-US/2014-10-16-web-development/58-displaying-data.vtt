WEBVTT

1
00:00:00.000 --> 00:00:03.786
[MUSIC]

2
00:00:03.786 --> 00:00:06.146
&gt;&gt; Brian Holt: Here,
we're gonna use the same API.

3
00:00:14.686 --> 00:00:16.730
&gt;&gt; Brian Holt: Actually I'll just
show you what it does first.

4
00:00:16.730 --> 00:00:21.860
Okay, so you say click me and
like I took that same API and

5
00:00:21.860 --> 00:00:23.670
I displayed it's data all nicely.

6
00:00:23.670 --> 00:00:28.220
Like this is kind of showing you more real
world-ish type of application, right?

7
00:00:28.220 --> 00:00:31.890
Like I'm in the city and
I wanna see the cities around me, right?

8
00:00:31.890 --> 00:00:34.820
I could use their API to
figure that out like,

9
00:00:36.820 --> 00:00:39.540
Hopkins in the same cloud, I don't know
where the hell any of these are so.

10
00:00:41.750 --> 00:00:44.650
There's a city called Wyoming, Minnesota?

11
00:00:44.650 --> 00:00:46.380
That seems just really dumb to me.

12
00:00:46.380 --> 00:00:48.590
Anyway, sorry.

13
00:00:48.590 --> 00:00:50.680
I'm just going to rag on your
great state here, hold on.

14
00:00:51.900 --> 00:00:53.780
Hey, we can even get down into Wisconsin.

15
00:00:56.080 --> 00:00:58.480
Okay, so that's what's the going on here.

16
00:00:58.480 --> 00:01:00.900
Let's see how we accomplish that.

17
00:01:00.900 --> 00:01:02.960
First of all, I'll just show you it.

18
00:01:02.960 --> 00:01:04.410
This is not what we're
actually talking about, but

19
00:01:04.410 --> 00:01:07.030
I just threw on a little bit
of lip stick on it, right.

20
00:01:07.030 --> 00:01:08.460
I can put a little CSS on it.

21
00:01:09.510 --> 00:01:14.450
Give it some border, text align,
margins, colors it's better.

22
00:01:16.300 --> 00:01:21.120
And you're welcome to take a look
at that later if you want to, okay.

23
00:01:23.030 --> 00:01:27.440
The html literally has not changed from
the last page so don't worry about that.

24
00:01:28.910 --> 00:01:31.180
Let's look at what's
actually happening here, and

25
00:01:31.180 --> 00:01:32.450
it's really not that complicated.

26
00:01:34.730 --> 00:01:40.160
So we do that text loading business again,
we're doing an API call

27
00:01:40.160 --> 00:01:45.610
using ajax, doing a get, hitting
the same URL end point and then the only

28
00:01:45.610 --> 00:01:49.160
thing that's really changed here is what's
happening in the success function, right?

29
00:01:50.370 --> 00:01:53.650
So here we're going a four loop, Nina
talked a little bit about that yesterday

30
00:01:53.650 --> 00:01:58.420
and we're looping over
data.results.length.

31
00:01:58.420 --> 00:02:01.780
Now you might be wondering where
did that .results.length come from.

32
00:02:01.780 --> 00:02:03.950
So let's look back here.

33
00:02:03.950 --> 00:02:11.070
So results is this part of the data
that the API's giving back to me, right?

34
00:02:12.840 --> 00:02:16.730
So I can re-reference that
by data which is this.

35
00:02:16.730 --> 00:02:20.796
Right, data is the entire response and
I say .results so

36
00:02:20.796 --> 00:02:26.660
.results refers again to this array right
here which contains all of the cities.

37
00:02:28.100 --> 00:02:30.270
Does this magic connection make sense?

38
00:02:30.270 --> 00:02:31.751
Okay, cool.

39
00:02:31.751 --> 00:02:36.396
I think this is like, this is like the fun
part of programming with me, right.

40
00:02:36.396 --> 00:02:40.816
This is the way I actually get to
create and do really cool stuff.

41
00:02:40.816 --> 00:02:43.140
Okay, .length, Nina talked about that.

42
00:02:43.140 --> 00:02:46.470
Like, it's how many
elements are in the array.

43
00:02:46.470 --> 00:02:49.196
In this particular case,
I think we have 57.

44
00:02:49.196 --> 00:02:51.236
Nope, 184.

45
00:02:51.236 --> 00:02:53.216
Have 184 and
then we're just looping over it.

46
00:02:53.216 --> 00:02:57.656
So this is gonna get called 184 times,
right, right.

47
00:02:57.656 --> 00:03:00.840
I wanna see some head nodding.

48
00:03:00.840 --> 00:03:01.670
Okay, there we go.

49
00:03:03.590 --> 00:03:08.420
Starting at zero because arrays
always start at zero, right, always.

50
00:03:09.880 --> 00:03:15.180
So if you start at one you're
going to miss the first one, okay?

51
00:03:16.380 --> 00:03:21.860
So place, that's actually the name
of the town we're looking for or

52
00:03:21.860 --> 00:03:23.160
the blinks dot blink.

53
00:03:23.160 --> 00:03:26.750
We're going to grab the city.

54
00:03:26.750 --> 00:03:28.910
So data.results I, right?

55
00:03:28.910 --> 00:03:31.320
So we're gonna grab that I place,

56
00:03:31.320 --> 00:03:36.300
for example, on the 30th loop through,
this would actually be 29.

57
00:03:36.300 --> 00:03:39.020
Because it starts at zero.

58
00:03:39.020 --> 00:03:39.830
Result number 29.

59
00:03:39.830 --> 00:03:40.590
Grab the city.

60
00:03:42.480 --> 00:03:44.140
Okay let's go back here, oops.

61
00:03:45.590 --> 00:03:47.170
Let's look at one of these.

62
00:03:47.170 --> 00:03:50.060
So everyone has a city
which is right there and

63
00:03:50.060 --> 00:03:54.150
it has a state which is right there, okay?

64
00:03:55.710 --> 00:03:59.280
So we're grabbing the city and then I'm
just putting a comment space there for

65
00:03:59.280 --> 00:04:00.950
nice formatting.

66
00:04:00.950 --> 00:04:03.570
And then I'm doing a state
which is right there.

67
00:04:03.570 --> 00:04:06.150
So, we're just doing city comma state.

68
00:04:07.660 --> 00:04:09.920
Okay, and
then all I'm doing right here is for

69
00:04:09.920 --> 00:04:12.450
using the suspend function that
we were discussing before.

70
00:04:12.450 --> 00:04:15.380
Because I did text right,
it would just replace it every time.

71
00:04:15.380 --> 00:04:18.450
In fact, let's just do it to see exactly

72
00:04:18.450 --> 00:04:23.270
our actually it be the HTML and
it would just be the last one.

73
00:04:23.270 --> 00:04:26.090
It would be Cushing, Wisconsin.

74
00:04:26.090 --> 00:04:28.810
So that's why we need to
use append because we say

75
00:04:28.810 --> 00:04:32.535
please preserve what's already there and
please add on additional to that.

76
00:04:35.585 --> 00:04:36.625
That's it, right?

77
00:04:37.705 --> 00:04:39.305
That's pretty cool, isn't it?

78
00:04:39.305 --> 00:04:40.615
I think that's pretty cool.

79
00:04:43.565 --> 00:04:47.755
&gt;&gt; Male Student 1: There's more data
in the API call that you could display,

80
00:04:47.755 --> 00:04:50.005
like the number of members per city.

81
00:04:50.005 --> 00:04:51.500
&gt;&gt; Brian Holt: Sure, you could do like.

82
00:04:51.500 --> 00:04:52.700
You can show the zipcode.

83
00:04:52.700 --> 00:04:54.606
You could show the ID, the country.

84
00:04:54.606 --> 00:04:56.126
In this case it's not
particularly important.

85
00:04:56.126 --> 00:05:00.617
&gt;&gt; Male Student 2: Is there some mechanism
that once you get the results array back

86
00:05:00.617 --> 00:05:06.124
that you could figure out what the
different, iterate through the different

87
00:05:06.124 --> 00:05:11.136
objects that are in there without
knowing what they are ahead of time?

88
00:05:11.136 --> 00:05:12.956
To find out what members
there are in the object.

89
00:05:12.956 --> 00:05:14.196
&gt;&gt; Brian Holt: You certainly could.

90
00:05:14.196 --> 00:05:16.080
That would be difficult.

91
00:05:16.080 --> 00:05:20.040
I would say even borderline very,
very difficult.

92
00:05:20.040 --> 00:05:21.780
But I'm not gonna say no.

93
00:05:21.780 --> 00:05:26.990
The easiest way to code for something
like that is to just exactly what I

94
00:05:26.990 --> 00:05:30.480
did right here, just open it up, see what
it looks like and then just code for that.

95
00:05:30.480 --> 00:05:33.980
&gt;&gt; Male Student 2: Just wondering
if you had some data source where

96
00:05:33.980 --> 00:05:35.510
the API itself may be dynamic.

97
00:05:36.830 --> 00:05:40.320
&gt;&gt; Brian Holt: Which would be,
that'd be a,

98
00:05:40.320 --> 00:05:44.230
what's the word I'm looking for,
it'd be really difficult to deal with.

99
00:05:44.230 --> 00:05:47.310
So let's do a thought exercise.

100
00:05:47.310 --> 00:05:50.376
Why not?

101
00:05:50.376 --> 00:05:57.915
So we have, let's just say var
obj = data.results I right.

102
00:05:57.915 --> 00:06:00.456
So this is going to go ahead and
grab the ith object.

103
00:06:00.456 --> 00:06:02.277
Let's go ahead and comment these out.

104
00:06:05.636 --> 00:06:10.710
&gt;&gt; Brian Holt: Okay, I'm going to show
you something called a for in loop.

105
00:06:10.710 --> 00:06:17.590
So you're going to say for
var prop in obj,

106
00:06:17.590 --> 00:06:22.220
so obj this refers to, or maybe let's
just call it like cityObject, right?

107
00:06:22.220 --> 00:06:27.958
Let's be a little it more verbose,
cityObject, okay.

108
00:06:27.958 --> 00:06:31.215
And then you're gonna say.

109
00:06:36.636 --> 00:06:38.435
&gt;&gt; Brian Holt: Let's do this, actually.

110
00:06:48.136 --> 00:06:51.645
&gt;&gt; Brian Holt: Will place += and

111
00:06:51.645 --> 00:06:56.036
we're gonna say prop.

112
00:07:05.475 --> 00:07:10.567
&gt;&gt; Brian Holt: And
going to say city object,

113
00:07:10.567 --> 00:07:15.865
prop and then plus space.

114
00:07:15.865 --> 00:07:20.723
This should get really long and
really ugly really quick but

115
00:07:20.723 --> 00:07:22.966
let's see how this looks.

116
00:07:22.966 --> 00:07:26.686
And then we're gonna say here just
gonna say var place = empty string.

117
00:07:35.428 --> 00:07:41.340
&gt;&gt; Brian Holt: And then you have to
say if city object has own property.

118
00:07:41.340 --> 00:07:45.405
So, I mean this got a little big more
complicated than I was anticipating, but

119
00:07:45.405 --> 00:07:49.716
this is kind of how you would deal with an
object that you don't know what's going to

120
00:07:49.716 --> 00:07:50.416
be in there.

121
00:07:54.816 --> 00:07:55.696
&gt;&gt; Brian Holt: Geez, what happened there?

122
00:08:04.105 --> 00:08:06.691
&gt;&gt; Brian Holt: So, if this doesn't
make sense to you, it's cool, this,

123
00:08:06.691 --> 00:08:07.825
we got a little advanced.

124
00:08:11.816 --> 00:08:13.751
&gt;&gt; Brian Holt: Okay, but notice we
now have the ID, we have the zip,

125
00:08:13.751 --> 00:08:15.950
we have the distance,
we have everything that's in there.

126
00:08:17.460 --> 00:08:21.250
So what does for in loop does
is it loops over an object and

127
00:08:21.250 --> 00:08:24.410
it says give me all of
your properties right.

128
00:08:24.410 --> 00:08:30.710
So in this particular case, prop is ID
zip distance lawn member count, right?

129
00:08:31.780 --> 00:08:36.080
And then you have to,
because of JavaScript's weird inheritance,

130
00:08:36.080 --> 00:08:39.820
you have to ask is this actually yours,
or is this your parent's?

131
00:08:39.820 --> 00:08:42.530
[LAUGH] Sounds like a child, right?

132
00:08:42.530 --> 00:08:44.150
Is this really yours?

133
00:08:44.150 --> 00:08:44.680
Are you 18?

134
00:08:44.680 --> 00:08:52.230
So you have to say is this actually yours
or does this belong somewhere up higher?

135
00:08:52.230 --> 00:08:54.970
Again we're not talking about inheritance
so if that doesn't make sense, just,

136
00:08:54.970 --> 00:08:57.585
yeah, don't worry about
it too much about it.

137
00:08:57.585 --> 00:09:01.070
There here we're just putting
the prop first which is the ID, zip,

138
00:09:01.070 --> 00:09:02.485
then we are putting a dash.

139
00:09:02.485 --> 00:09:06.315
Then we are putting, we are asking for
what is the value of that prop.

140
00:09:06.315 --> 00:09:10.744
Cuz these are all key values right so
there's country which is the prop and

141
00:09:10.744 --> 00:09:14.477
then this is the city object
with the square braces property.

142
00:09:16.567 --> 00:09:20.167
Okay, did we just go off
the total defend right there or

143
00:09:20.167 --> 00:09:21.657
is that make some sense to most of you?

144
00:09:24.877 --> 00:09:25.377
Cool.

