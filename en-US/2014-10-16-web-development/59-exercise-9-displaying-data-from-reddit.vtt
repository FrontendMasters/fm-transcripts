WEBVTT

1
00:00:00.000 --> 00:00:04.038
[MUSIC]

2
00:00:04.038 --> 00:00:07.527
&gt;&gt; Brian Holt: All right, so, we've
been talking a little bit about Ajax,

3
00:00:07.527 --> 00:00:10.290
about doing some asynchronous
loading of data.

4
00:00:10.290 --> 00:00:12.470
We did that just now to meetup API.

5
00:00:12.470 --> 00:00:17.000
We're gonna do an exercise,
this is going to be difficult.

6
00:00:17.000 --> 00:00:21.412
Right, like I'm essentially throwing
you to the wolves here, sink or

7
00:00:21.412 --> 00:00:23.260
swim shit right here, okay.

8
00:00:24.410 --> 00:00:30.006
So first of all let's open this
Reddit API call right here.

9
00:00:30.006 --> 00:00:32.916
So first of all you can
look a little bit here.

10
00:00:32.916 --> 00:00:37.300
So we're doing a search on aw,
if you're not familiar with Reddit,

11
00:00:37.300 --> 00:00:40.170
aw is where they put
all the cute pictures.

12
00:00:40.170 --> 00:00:44.249
It's the cute picture part of Reddit and
we're all about cute pictures here, right?

13
00:00:46.100 --> 00:00:48.860
Okay, and then you're seeing
a question mark, q equals.

14
00:00:48.860 --> 00:00:51.640
So this is the query that we're
gonna send to Reddit, right?

15
00:00:51.640 --> 00:00:53.970
So in this cases,
we're only looking for puppies.

16
00:00:55.280 --> 00:00:58.880
And restrict_sr just means
look only in this subreddit,

17
00:00:58.880 --> 00:01:00.970
do not look in other subreddits.

18
00:01:00.970 --> 00:01:04.160
So first of all, full disclaimer,
I've chosen, I believe,

19
00:01:04.160 --> 00:01:07.190
the safest subreddit on Reddit,
but it is still on Reddit.

20
00:01:08.280 --> 00:01:12.500
Stuff happens on Reddit so
hopefully nothing is too bad here.

21
00:01:13.500 --> 00:01:20.150
But right now all it's doing is sending
us back a bunch of results from Reddit.

22
00:01:20.150 --> 00:01:23.140
Like for example let's just go ahead and
click on this thumbnail right here,

23
00:01:23.140 --> 00:01:26.790
a little puppy right there.

24
00:01:26.790 --> 00:01:28.030
It's really small.

25
00:01:28.030 --> 00:01:32.580
But puppy hugging,
what would be some other kitty or

26
00:01:32.580 --> 00:01:34.050
something like that, anyway.

27
00:01:37.250 --> 00:01:40.300
So what we're gonna do here is
we're gonna take these results.

28
00:01:40.300 --> 00:01:42.350
We're going to loop over them.

29
00:01:42.350 --> 00:01:45.780
And we're going to display all
the thumbnails from Reddit.

30
00:01:47.890 --> 00:01:51.800
It's gonna be fun, okay.

31
00:01:51.800 --> 00:01:55.810
If you want to see the API documentation,
which is a good practice to get into,

32
00:01:55.810 --> 00:01:57.270
I've posted those right there.

33
00:01:58.310 --> 00:01:59.860
Okay, so here's the search.

34
00:02:01.350 --> 00:02:04.620
We're just calling a get on the subreddit
and we're getting the JSON feed.

35
00:02:05.690 --> 00:02:10.170
Something I was going to mention before,
some of you might be familiar with XML.

36
00:02:10.170 --> 00:02:14.620
JSON is a replacement for
XML in my opinion superior for

37
00:02:14.620 --> 00:02:20.590
placement to XML but you could
request as an XML if you wanted to.

38
00:02:20.590 --> 00:02:24.190
This just shows you all
the parameters you can ask for

39
00:02:24.190 --> 00:02:27.250
in this particular case we
don't really care about them.

40
00:02:27.250 --> 00:02:29.360
The only one that we're
using is restrictsr,

41
00:02:29.360 --> 00:02:33.418
which is just restricting it just to aw,
and not to other subreddits.

42
00:02:33.418 --> 00:02:39.970
&gt;&gt; Speaker 2: Does JSON have any
kind of a hierarchy like XML does?

43
00:02:39.970 --> 00:02:41.280
&gt;&gt; Brian Holt: Yes, it does.

44
00:02:41.280 --> 00:02:42.860
So let's go look here for
just a sec, right?

45
00:02:42.860 --> 00:02:47.300
We have cant and data, data is nested,
has inside of it nested children.

46
00:02:47.300 --> 00:02:49.530
And children has inside of it nested data.

47
00:02:49.530 --> 00:02:51.230
Right, so there's this nesting effect.

48
00:02:52.370 --> 00:02:54.560
It's just in my opinion
much easier to visualize.

49
00:02:54.560 --> 00:02:59.486
That's something that JavaScript
deals with extremely well.

50
00:03:06.499 --> 00:03:08.466
&gt;&gt; Brian Holt: Okay, so here is
the CodePen that I'm going to give you.

51
00:03:15.706 --> 00:03:17.746
&gt;&gt; Brian Holt: Go ahead and
ignore the CSS.

52
00:03:17.746 --> 00:03:20.127
I just wrote a little bit of CSS for
that and

53
00:03:20.127 --> 00:03:23.520
then I gave you some notes
here using comments.

54
00:03:23.520 --> 00:03:28.130
So first thing you need to do is you need
to attach a button listener to here,

55
00:03:28.130 --> 00:03:30.590
the click me right?

56
00:03:30.590 --> 00:03:35.810
On the click you're gonna make a AJAX
request for the results of cute puppies.

57
00:03:37.540 --> 00:03:39.340
It's gonna go to this URL right here.

58
00:03:40.440 --> 00:03:42.050
It's probably super hard to see but

59
00:03:43.120 --> 00:03:44.940
hopefully you can all open it and
look at it.

60
00:03:46.460 --> 00:03:51.200
Okay, and then for each of the elements in
data.children append a new image element.

61
00:03:51.200 --> 00:03:59.180
Right, two text with the source
child.data.thumbnail, okay.

62
00:03:59.180 --> 00:04:02.798
I do have some hints here for you,
you're gonna need click, append and ajax.

63
00:04:02.798 --> 00:04:04.517
Oops.

64
00:04:07.297 --> 00:04:09.167
&gt;&gt; Brian Holt: You shouldn't
need to touch the HTML or

65
00:04:09.167 --> 00:04:11.670
CSS, this should be purely
a JavaScript exercise.

66
00:04:13.300 --> 00:04:16.680
And this data that you're looking
at here is really nested.

67
00:04:16.680 --> 00:04:20.060
So, you're gonna have to kind
of get into some interesting

68
00:04:21.230 --> 00:04:23.649
accessing of these properties.

69
00:04:25.230 --> 00:04:29.960
So the data that concerns you is
data.children like if we go back here.

70
00:04:29.960 --> 00:04:36.550
So we have data which is right here then
inside of data there's children, okay?

71
00:04:36.550 --> 00:04:39.880
And then children as you
notice right here is in array.

72
00:04:39.880 --> 00:04:44.795
So all of these different children
represent different results of the photos,

73
00:04:44.795 --> 00:04:45.317
right?

74
00:04:47.756 --> 00:04:52.502
&gt;&gt; Brian Holt: Inside of each child
is another data attribute and

75
00:04:52.502 --> 00:04:56.345
inside of there is a thumbnail, right?

76
00:04:58.625 --> 00:05:03.430
&gt;&gt; Brian Holt: Do we get
what we want here to happen?

77
00:05:03.430 --> 00:05:04.909
Is anyone confused by the instruction?

78
00:05:10.680 --> 00:05:11.780
It's hard, okay.

79
00:05:14.110 --> 00:05:17.120
So, like let's just walk
by step by step here.

80
00:05:19.660 --> 00:05:21.271
Just write a click
listener on the button so

81
00:05:21.271 --> 00:05:23.026
something happens when
you click the button.

82
00:05:32.236 --> 00:05:34.376
&gt;&gt; Brian Holt: That should be
something that hopefully we can do.

83
00:05:49.756 --> 00:05:53.036
&gt;&gt; Brian Holt: Let's see, I can also
probably show you what it looks like.

84
00:05:53.036 --> 00:05:59.339
So let's
&gt;&gt; Brian Holt: So

85
00:05:59.339 --> 00:06:02.460
after you're finished with it
I'll show you what it looks like.

86
00:06:02.460 --> 00:06:07.721
So you click me and
it should just like throw

87
00:06:07.721 --> 00:06:12.554
up a bunch of puppy pictures like that.

88
00:06:16.231 --> 00:06:17.719
&gt;&gt; Brian Holt: The CSS
is all taken care of, so

89
00:06:17.719 --> 00:06:21.231
you just have to worry about appending
each one of those image elements.

90
00:06:25.511 --> 00:06:27.915
&gt;&gt; Brian Holt: So again,
we'll walk through this together.

91
00:06:27.915 --> 00:06:29.495
I realize that this is quite difficult.

