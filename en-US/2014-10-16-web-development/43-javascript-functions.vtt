WEBVTT

1
00:00:00.000 --> 00:00:03.599
[MUSIC]

2
00:00:03.599 --> 00:00:07.229
&gt;&gt; Nina Zakharenko: Functions in
JavaScript are a way of kind of grouping

3
00:00:07.229 --> 00:00:10.611
a bunch of things together,
you wanna do over and

4
00:00:10.611 --> 00:00:14.159
over into a way where it's
easy of repeating them,

5
00:00:14.159 --> 00:00:19.214
like the same action that's contained
in the function multiple times.

6
00:00:19.214 --> 00:00:25.572
So, the anatomy of a function.
&gt;&gt; Nina Zakharenko: Here's

7
00:00:25.572 --> 00:00:28.005
the variable that we're assigning it to.

8
00:00:28.005 --> 00:00:32.081
You can also create a function
in different syntax, but

9
00:00:32.081 --> 00:00:37.833
we're not gonna cover it today.
&gt;&gt; Nina Zakharenko: We

10
00:00:37.833 --> 00:00:42.320
use the keyword function
along with parentheses.

11
00:00:42.320 --> 00:00:43.820
And inside those parentheses,

12
00:00:43.820 --> 00:00:47.600
you're gonna put what's called
arguments to your function.

13
00:00:47.600 --> 00:00:51.719
So it can be one thing, or
a list of things that are comma-separated.

14
00:00:53.360 --> 00:00:58.020
And what these variables are gonna do is
be accessible inside of your function.

15
00:00:59.080 --> 00:01:02.930
So you're passing something into the
function, the function does something to

16
00:01:02.930 --> 00:01:08.174
that thing.
&gt;&gt; Nina Zakharenko: We

17
00:01:08.174 --> 00:01:13.312
have an open curly brace and
close curly brace and a semicolon

18
00:01:13.312 --> 00:01:20.207
at the end to end the function.
&gt;&gt; Nina Zakharenko: And

19
00:01:20.207 --> 00:01:22.699
then we're at this arrow here at the left,

20
00:01:22.699 --> 00:01:27.685
everything inside those brackets is the
body of the function, that's what's gonna

21
00:01:27.685 --> 00:01:32.133
get run when it's called.
&gt;&gt; Nina Zakharenko: So

22
00:01:32.133 --> 00:01:35.430
when we declare a function,
it's different from a statement.

23
00:01:36.926 --> 00:01:42.770
So far we've had a bunch of lines of
code and they're executed one by one.

24
00:01:42.770 --> 00:01:46.910
If there's a if and the condition
is at met, for example, it skipped.

25
00:01:46.910 --> 00:01:53.090
But when we declare a function this way,
we have a variable called printList and

26
00:01:53.090 --> 00:01:56.960
this function is put in it so
we can use it later.

27
00:01:56.960 --> 00:01:59.770
But nothing inside that statement
is actually going to get run

28
00:02:00.810 --> 00:02:04.020
until we explicitly call the function.

29
00:02:04.020 --> 00:02:09.692
The way that we call a function is
by putting the function name and

30
00:02:09.692 --> 00:02:14.840
then open parenthesis if
the function has no parameters,

31
00:02:14.840 --> 00:02:20.301
so this up here is empty,
you don't have to pass anything in,

32
00:02:20.301 --> 00:02:26.499
otherwise you wanna pass in the number
of variables that this function

33
00:02:26.499 --> 00:02:33.212
is expecting.
&gt;&gt; Nina Zakharenko: So

34
00:02:33.212 --> 00:02:35.360
let's do an exercise here.

35
00:02:37.980 --> 00:02:43.481
We have our very familiar list of fruits,
[LAUGH] down here we

36
00:02:43.481 --> 00:02:48.551
have,
&gt;&gt; Nina Zakharenko: We

37
00:02:48.551 --> 00:02:50.519
have a function called printList.

38
00:02:52.430 --> 00:02:55.210
So this function takes the list.

39
00:02:55.210 --> 00:02:56.810
It loops over it in a four loop.

40
00:02:58.270 --> 00:03:02.466
And it'll output a list of

41
00:03:02.466 --> 00:03:07.628
values contained in that list.

42
00:03:07.628 --> 00:03:10.090
So let's do an exercise.

43
00:03:10.090 --> 00:03:11.270
Let's add two more lists.

44
00:03:11.270 --> 00:03:13.350
We're gonna do one of
your favorite cars and

45
00:03:13.350 --> 00:03:16.360
one of your favorite ice cream flavors.

46
00:03:16.360 --> 00:03:21.873
And let's call printList on your new list.
&gt;&gt; Nina Zakharenko: So

47
00:03:21.873 --> 00:03:23.598
I'm gonna give you guys a few minutes for

48
00:03:23.598 --> 00:03:28.764
that one.
&gt;&gt; Nina Zakharenko: So

49
00:03:28.764 --> 00:03:32.452
I'm gonna start working
along with you guys.

50
00:04:12.744 --> 00:04:14.091
&gt;&gt; Speaker 2: There is a question about if

51
00:04:14.091 --> 00:04:15.201
a, is there any way for

52
00:04:15.201 --> 00:04:20.470
a function to take a specific type only?
&gt;&gt; Nina Zakharenko: No, with JavaScript,

53
00:04:20.470 --> 00:04:26.040
but what you can do is, inside of
your function you can call type of,

54
00:04:26.040 --> 00:04:30.130
or do some other sort of check, make sure
that what's getting passed into your

55
00:04:30.130 --> 00:04:34.840
function is what you expect, if it's not,
you can just throw an error.

56
00:04:36.560 --> 00:04:41.792
And that's a good way to validate and
circumvent something worse going wrong.

57
00:05:16.895 --> 00:05:18.073
&gt;&gt; Nina Zakharenko: Does everyone see that

58
00:05:18.073 --> 00:05:26.488
same result?
&gt;&gt; Nina Zakharenko: So

59
00:05:26.488 --> 00:05:30.750
let's go ahead and modify our function.

60
00:05:31.810 --> 00:05:37.291
So, outside of this four loop, we don't
want it to happen over and over and

61
00:05:37.291 --> 00:05:42.948
over, let's add a new document.write,
let's say ('These are a few of my

62
00:05:42.948 --> 00:05:48.284
favorite things").
&gt;&gt; Nina Zakharenko: And

63
00:05:48.284 --> 00:05:52.340
add one more ("&lt;br&gt;") in there just so
we can break up our

64
00:05:52.340 --> 00:06:01.081
results.
&gt;&gt; Nina Zakharenko: So

65
00:06:01.081 --> 00:06:05.095
now after every list you should
see these are a few of my favorite

66
00:06:05.095 --> 00:06:11.552
things.
&gt;&gt; Nina Zakharenko: So everyone-

67
00:06:11.552 --> 00:06:13.383
&gt;&gt; Speaker 3: Write like a plus and

68
00:06:13.383 --> 00:06:18.122
then br, these are a few of
my favorite things plus br

69
00:06:18.122 --> 00:06:19.774
[INAUDIBLE].
&gt;&gt; Nina Zakharenko: Yeah,

70
00:06:19.774 --> 00:06:21.057
you can do that too.

71
00:06:36.922 --> 00:06:38.374
&gt;&gt; [INAUDIBLE].
&gt;&gt; Nina Zakharenko: Yeah.

72
00:06:43.963 --> 00:06:46.527
&gt;&gt; Nina Zakharenko: So everyone see these

73
00:06:46.527 --> 00:06:50.713
results?
&gt;&gt; Nina Zakharenko: So

74
00:06:50.713 --> 00:06:55.002
let's go up and
modify our function again, so, right now,

75
00:06:55.002 --> 00:07:01.500
am conveniently printing stuff out, which
is great cuz I get to see it right away.

76
00:07:01.500 --> 00:07:04.536
But, a lot of functions
are kind of functional, so

77
00:07:04.536 --> 00:07:07.007
we're not using them to print stuff out,

78
00:07:07.007 --> 00:07:12.482
you're using them to do something.
&gt;&gt; Nina Zakharenko: So,

79
00:07:12.482 --> 00:07:16.077
let's clear these things out.

80
00:07:21.880 --> 00:07:23.424
&gt;&gt; Nina Zakharenko: Let's do let's say,

81
00:07:23.424 --> 00:07:25.381
a little bit of validation.

82
00:07:25.381 --> 00:07:28.168
So let's use our handy if statement.

83
00:07:28.168 --> 00:07:33.584
And say if (list.length is &lt; 3),

84
00:07:33.584 --> 00:07:41.650
and here we're gonna introduce
the return statement.

85
00:07:41.650 --> 00:07:49.178
So we're gonna return not enough elements.
&gt;&gt; Nina Zakharenko: So,

86
00:07:49.178 --> 00:07:55.436
what returned us is it ends the execution
in that function and pops out of it and

87
00:07:55.436 --> 00:08:01.820
whoever called it is gonna get back what
your passing in the return statement.

88
00:08:03.750 --> 00:08:07.650
So we have our validation here.

89
00:08:07.650 --> 00:08:11.160
If a list is less than three,
nothing after this return will get run.

90
00:08:12.240 --> 00:08:16.996
But if our list is greater than three,
let's go ahead and

91
00:08:16.996 --> 00:08:23.572
return the very first element in it.
&gt;&gt; Nina Zakharenko: This

92
00:08:23.572 --> 00:08:25.502
example is kind of contrived.

93
00:08:25.502 --> 00:08:29.434
Probably wanna do a little bit more
to it than just return the first

94
00:08:29.434 --> 00:08:33.807
element.
&gt;&gt; Nina Zakharenko: So.

95
00:08:41.670 --> 00:08:43.212
&gt;&gt; Nina Zakharenko: So now we're storing

96
00:08:43.212 --> 00:08:48.447
the result of this function printList
into this variable return value.

97
00:08:48.447 --> 00:08:53.209
And after we've done all our calculations,

98
00:08:53.209 --> 00:08:57.225
now we can just say document.write.

99
00:09:02.805 --> 00:09:06.760
&gt;&gt; Nina Zakharenko: This will go ahead and
return that first element in the list.

100
00:09:14.193 --> 00:09:16.239
&gt;&gt; Nina Zakharenko: Another thing we can

101
00:09:16.239 --> 00:09:22.615
do is call the function inside
of document.write which is just

102
00:09:22.615 --> 00:09:27.909
another function so
in these parentheses we can just

103
00:09:27.909 --> 00:09:33.170
say printList.
&gt;&gt; Nina Zakharenko: Let's do cars.

104
00:09:39.140 --> 00:09:47.423
This kind of implicitly calls
the printList function on this cars value.

105
00:09:56.707 --> 00:09:58.350
&gt;&gt; Nina Zakharenko: Oops, sorry you guys.

106
00:09:58.350 --> 00:09:59.560
I messed up here.

107
00:09:59.560 --> 00:10:02.150
It should be return list of 0 and
not fruits of 0.

108
00:10:02.150 --> 00:10:05.850
Cuz then you're just always
gonna get the same fruit.

109
00:10:05.850 --> 00:10:09.557
So now this is the value that we expect

110
00:10:09.557 --> 00:10:11.980
to have.
&gt;&gt; Nina Zakharenko: So

111
00:10:11.980 --> 00:10:15.460
anyone have questions about
the different ways of calling functions?

112
00:10:16.790 --> 00:10:20.579
Why these two things return,
do the same thing?

113
00:10:27.675 --> 00:10:29.767
&gt;&gt; Speaker 4: We didn't go over,

114
00:10:29.767 --> 00:10:35.068
why printList is called
before document.write.

115
00:10:36.450 --> 00:10:38.210
&gt;&gt; Nina Zakharenko: It's a good point.

116
00:10:38.210 --> 00:10:45.160
So in lots of programming languages,
things are nested by a parentheses.

117
00:10:45.160 --> 00:10:48.380
And the thing that's in
the innermost parentheses

118
00:10:48.380 --> 00:10:50.099
is going to get executed first.

119
00:10:51.860 --> 00:10:54.350
So, cars gets executed,

120
00:10:54.350 --> 00:10:59.270
it doesn't really, nothing really
happens because it's just the list.

121
00:10:59.270 --> 00:11:03.269
Then printList gets executed and

122
00:11:03.269 --> 00:11:09.409
passed into document.write,
so let's say I have

123
00:11:09.409 --> 00:11:16.394
another function.
&gt;&gt; Nina Zakharenko: I'm

124
00:11:16.394 --> 00:11:19.382
gonna call it concatValues function.

125
00:11:26.870 --> 00:11:27.803
&gt;&gt; Nina Zakharenko: Actually,

126
00:11:27.803 --> 00:11:31.349
I'm gonna call it concatLists function, so

127
00:11:31.349 --> 00:11:36.032
I am gonna take a list1 and
a list2, and I am gonna return.

128
00:11:43.134 --> 00:11:45.777
&gt;&gt; Nina Zakharenko: Sorry, that's concat

129
00:11:45.777 --> 00:11:53.680
not contact.
&gt;&gt; Nina Zakharenko: Here we go.

130
00:11:54.830 --> 00:12:00.077
So I can nest this even deeper and
say, document.write,

131
00:12:00.077 --> 00:12:06.076
the result of printList,
printList gets called on the result of,

132
00:12:06.076 --> 00:12:11.216
can call this concatListFunc and
call it on our fruits and

133
00:12:11.216 --> 00:12:16.779
our cars.
&gt;&gt; Nina Zakharenko: And

134
00:12:16.779 --> 00:12:18.457
wait for CodePen to update.

135
00:12:36.620 --> 00:12:37.884
&gt;&gt; Nina Zakharenko: So.

136
00:12:40.680 --> 00:12:41.805
&gt;&gt; Nina Zakharenko: Yeah, so

137
00:12:41.805 --> 00:12:45.745
here are just returning the first

138
00:12:45.745 --> 00:12:51.382
item.
&gt;&gt; Nina Zakharenko: And we can

139
00:12:51.382 --> 00:12:58.321
go ahead and mix these up a little bit.
&gt;&gt; Nina Zakharenko: So

140
00:12:58.321 --> 00:13:04.130
now that returns subaru instead of peach.
&gt;&gt; Speaker 2: There's

141
00:13:04.130 --> 00:13:09.170
a question on real world
usage of anonymous functions.

142
00:13:09.170 --> 00:13:12.150
Would you recommend naming
all your functions or using

143
00:13:12.150 --> 00:13:15.060
anonymous functions in some of these?
&gt;&gt; Nina Zakharenko: I think naming

144
00:13:15.060 --> 00:13:20.450
functions and being explicit is
a lot better than having anonymous

145
00:13:20.450 --> 00:13:25.320
functions because JavaScript there's this
thing called hoisting, and if you're

146
00:13:25.320 --> 00:13:30.880
not setting your functions to a variable,
things can kind of happen out of order.

147
00:13:30.880 --> 00:13:33.340
So you can call a function
before it's declared.

148
00:13:35.080 --> 00:13:39.923
I consider it a source of mistakes.
&gt;&gt; Speaker 4: There are instances

149
00:13:39.923 --> 00:13:42.725
where it makes sense to use
anonymous functions and

150
00:13:42.725 --> 00:13:46.766
tomorrow morning we're gonna go over
one of them which is using jQuery and

151
00:13:46.766 --> 00:13:51.238
event listeners.
&gt;&gt; Nina Zakharenko: Yeah.

152
00:13:51.238 --> 00:13:51.823
&gt;&gt; Speaker 4: Yeah,

153
00:13:51.823 --> 00:13:57.830
typically this JavaScript code
would say in the body of the HTML?

154
00:13:57.830 --> 00:13:59.400
Is that where it would live?

155
00:13:59.400 --> 00:14:01.100
I mean.
&gt;&gt; Nina Zakharenko: Not necessarily.

156
00:14:01.100 --> 00:14:05.880
And we're gonna go over this when we go
about, when we talk about paths tomorrow.

157
00:14:05.880 --> 00:14:09.977
So your JavaScript would live
in a JavaScript file and

158
00:14:09.977 --> 00:14:14.082
your CSS would live in a CSS file or
multiples of them.

159
00:14:14.082 --> 00:14:17.575
And then in your HTML,
you would reference those files.

160
00:14:17.575 --> 00:14:21.078
And the browser is gonna take
care of smooshing it all

161
00:14:21.078 --> 00:14:22.426
together.
&gt;&gt; Speaker 4: So

162
00:14:22.426 --> 00:14:26.380
in add function is obviously you can call
functions from within the JavaScript.

163
00:14:26.380 --> 00:14:30.450
But how does the JavaScript
tie in with events on

164
00:14:30.450 --> 00:14:33.850
the page itself with button clicks or
mouse movement,

165
00:14:33.850 --> 00:14:38.172
things like that?
&gt;&gt; Nina Zakharenko: So it depends on

166
00:14:38.172 --> 00:14:43.437
the kind of event but tomorrow
we're gonna talk about jQuery, and

167
00:14:43.437 --> 00:14:49.752
in order to use jQuery, we need to include
the jQuery file at the top of our HTML.

168
00:14:49.752 --> 00:14:54.990
So what that actually kinda does
behind the scenes is takes that giant

169
00:14:54.990 --> 00:15:00.767
jQuery file and paste it into your HTML
file, which means that in your HTML,

170
00:15:00.767 --> 00:15:05.554
like or anything that really
comes after that jQuery include,

171
00:15:05.554 --> 00:15:08.849
you can reference things before it.
&gt;&gt; Speaker 4: And that

172
00:15:08.849 --> 00:15:12.415
has access then to the page [INAUDIBLE]?
&gt;&gt; Nina Zakharenko: Yeah.

