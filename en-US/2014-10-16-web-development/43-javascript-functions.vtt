WEBVTT

1
00:00:00.000 --> 00:00:03.599
[MUSIC]

2
00:00:03.599 --> 00:00:07.229
&gt;&gt; Nina Zakharenko: Functions in
JavaScript are a way of kind of grouping

3
00:00:07.229 --> 00:00:10.611
a bunch of things together,
you wanna do over and

4
00:00:10.611 --> 00:00:14.159
over into a way where it's
easy of repeating them,

5
00:00:14.159 --> 00:00:19.214
like the same action that's contained
in the function multiple times.

6
00:00:19.214 --> 00:00:21.992
So, the anatomy of a function.

7
00:00:25.100 --> 00:00:28.005
&gt;&gt; Nina Zakharenko: Here's the variable
that we're assigning it to.

8
00:00:28.005 --> 00:00:32.081
You can also create a function
in different syntax, but

9
00:00:32.081 --> 00:00:34.520
we're not gonna cover it today.

10
00:00:37.639 --> 00:00:42.320
&gt;&gt; Nina Zakharenko: We use the keyword
function along with parentheses.

11
00:00:42.320 --> 00:00:43.820
And inside those parentheses,

12
00:00:43.820 --> 00:00:47.600
you're gonna put what's called
arguments to your function.

13
00:00:47.600 --> 00:00:51.719
So it can be one thing, or
a list of things that are comma-separated.

14
00:00:53.360 --> 00:00:58.020
And what these variables are gonna do is
be accessible inside of your function.

15
00:00:59.080 --> 00:01:01.120
So you're passing something
into the function,

16
00:01:01.120 --> 00:01:03.510
the function does something to that thing.

17
00:01:07.973 --> 00:01:12.305
&gt;&gt; Nina Zakharenko: We have an open
curly brace and close curly brace and

18
00:01:12.305 --> 00:01:15.940
a semicolon at the end
to end the function.

19
00:01:19.999 --> 00:01:22.699
&gt;&gt; Nina Zakharenko: And
then we're at this arrow here at the left,

20
00:01:22.699 --> 00:01:26.369
everything inside those brackets
is the body of the function,

21
00:01:26.369 --> 00:01:29.290
that's what's gonna get
run when it's called.

22
00:01:32.011 --> 00:01:35.430
&gt;&gt; Nina Zakharenko: So when we declare a
function, it's different from a statement.

23
00:01:36.926 --> 00:01:42.770
So far we've had a bunch of lines of
code and they're executed one by one.

24
00:01:42.770 --> 00:01:46.910
If there's a if and the condition
is at met, for example, it skipped.

25
00:01:46.910 --> 00:01:53.090
But when we declare a function this way,
we have a variable called printList and

26
00:01:53.090 --> 00:01:56.960
this function is put in it so
we can use it later.

27
00:01:56.960 --> 00:01:59.770
But nothing inside that statement
is actually going to get run

28
00:02:00.810 --> 00:02:04.020
until we explicitly call the function.

29
00:02:04.020 --> 00:02:09.692
The way that we call a function is
by putting the function name and

30
00:02:09.692 --> 00:02:14.840
then open parenthesis if
the function has no parameters,

31
00:02:14.840 --> 00:02:20.301
so this up here is empty,
you don't have to pass anything in,

32
00:02:20.301 --> 00:02:27.885
otherwise you wanna pass in the number of
variables that this function is expecting.

33
00:02:33.033 --> 00:02:35.360
&gt;&gt; Nina Zakharenko: So
let's do an exercise here.

34
00:02:37.980 --> 00:02:43.481
We have our very familiar list of fruits,
[LAUGH] down here we

35
00:02:43.481 --> 00:02:48.551
have,
&gt;&gt; Nina Zakharenko: We

36
00:02:48.551 --> 00:02:50.519
have a function called printList.

37
00:02:52.430 --> 00:02:55.210
So this function takes the list.

38
00:02:55.210 --> 00:02:56.810
It loops over it in a four loop.

39
00:02:58.270 --> 00:03:02.466
And it'll output a list of

40
00:03:02.466 --> 00:03:07.628
values contained in that list.

41
00:03:07.628 --> 00:03:10.090
So let's do an exercise.

42
00:03:10.090 --> 00:03:11.270
Let's add two more lists.

43
00:03:11.270 --> 00:03:13.350
We're gonna do one of
your favorite cars and

44
00:03:13.350 --> 00:03:16.360
one of your favorite ice cream flavors.

45
00:03:16.360 --> 00:03:19.127
And let's call printList on your new list.

46
00:03:21.772 --> 00:03:24.061
&gt;&gt; Nina Zakharenko: So I'm gonna give
you guys a few minutes for that one.

47
00:03:28.575 --> 00:03:32.452
&gt;&gt; Nina Zakharenko: So I'm gonna
start working along with you guys.

48
00:04:12.744 --> 00:04:15.201
&gt;&gt; Speaker 2: There is a question
about if a, is there any way for

49
00:04:15.201 --> 00:04:17.200
a function to take a specific type only?

50
00:04:18.896 --> 00:04:23.100
&gt;&gt; Nina Zakharenko: No, with JavaScript,
but what you can do is,

51
00:04:23.100 --> 00:04:28.090
inside of your function you can call
type of, or do some other sort of check,

52
00:04:28.090 --> 00:04:31.640
make sure that what's getting passed
into your function is what you expect,

53
00:04:32.940 --> 00:04:34.840
if it's not, you can just throw an error.

54
00:04:36.560 --> 00:04:41.792
And that's a good way to validate and
circumvent something worse going wrong.

55
00:05:16.895 --> 00:05:18.820
&gt;&gt; Nina Zakharenko: Does
everyone see that same result?

56
00:05:26.245 --> 00:05:30.750
&gt;&gt; Nina Zakharenko: So
let's go ahead and modify our function.

57
00:05:31.810 --> 00:05:36.682
So, outside of this four loop,
we don't want it to happen over and

58
00:05:36.682 --> 00:05:40.424
over and over,
let's add a new document.write,

59
00:05:40.424 --> 00:05:44.705
let's say ('These are a few
of my favorite things").

60
00:05:48.050 --> 00:05:51.170
&gt;&gt; Nina Zakharenko: And
add one more ("&lt;br&gt;") in there just so

61
00:05:51.170 --> 00:05:53.043
we can break up our results.

62
00:06:00.930 --> 00:06:04.488
&gt;&gt; Nina Zakharenko: So now after every
list you should see these are a few of my

63
00:06:04.488 --> 00:06:05.713
favorite things.

64
00:06:11.502 --> 00:06:13.383
&gt;&gt; Nina Zakharenko: So everyone-
&gt;&gt; Speaker 3: Write like a plus and

65
00:06:13.383 --> 00:06:19.323
then br, these are a few of my
favorite things plus br [INAUDIBLE].

66
00:06:19.323 --> 00:06:21.057
&gt;&gt; Nina Zakharenko: Yeah,
you can do that too.

67
00:06:36.922 --> 00:06:38.374
&gt;&gt; [INAUDIBLE].
&gt;&gt; Nina Zakharenko: Yeah.

68
00:06:43.963 --> 00:06:47.812
&gt;&gt; Nina Zakharenko: So
everyone see these results?

69
00:06:50.545 --> 00:06:55.002
&gt;&gt; Nina Zakharenko: So let's go up and
modify our function again, so, right now,

70
00:06:55.002 --> 00:07:01.500
am conveniently printing stuff out, which
is great cuz I get to see it right away.

71
00:07:01.500 --> 00:07:04.536
But, a lot of functions
are kind of functional, so

72
00:07:04.536 --> 00:07:09.207
we're not using them to print stuff out,
you're using them to do something.

73
00:07:11.950 --> 00:07:16.077
&gt;&gt; Nina Zakharenko: So,
let's clear these things out.

74
00:07:21.880 --> 00:07:25.381
&gt;&gt; Nina Zakharenko: Let's do let's say,
a little bit of validation.

75
00:07:25.381 --> 00:07:28.168
So let's use our handy if statement.

76
00:07:28.168 --> 00:07:33.584
And say if (list.length is &lt; 3),

77
00:07:33.584 --> 00:07:41.650
and here we're gonna introduce
the return statement.

78
00:07:41.650 --> 00:07:46.043
So we're gonna return not enough elements.

79
00:07:48.794 --> 00:07:52.644
&gt;&gt; Nina Zakharenko: So, what returned
us is it ends the execution in

80
00:07:52.644 --> 00:07:57.073
that function and pops out of it and
whoever called it is

81
00:07:57.073 --> 00:08:01.820
gonna get back what your passing
in the return statement.

82
00:08:03.750 --> 00:08:07.650
So we have our validation here.

83
00:08:07.650 --> 00:08:11.160
If a list is less than three,
nothing after this return will get run.

84
00:08:12.240 --> 00:08:16.996
But if our list is greater than three,
let's go ahead and

85
00:08:16.996 --> 00:08:20.077
return the very first element in it.

86
00:08:23.278 --> 00:08:25.502
&gt;&gt; Nina Zakharenko: This
example is kind of contrived.

87
00:08:25.502 --> 00:08:30.085
Probably wanna do a little bit more to
it than just return the first element.

88
00:08:33.120 --> 00:08:33.807
&gt;&gt; Nina Zakharenko: So.

89
00:08:41.670 --> 00:08:46.298
&gt;&gt; Nina Zakharenko: So now we're storing
the result of this function printList into

90
00:08:46.298 --> 00:08:48.447
this variable return value.

91
00:08:48.447 --> 00:08:53.209
And after we've done all our calculations,

92
00:08:53.209 --> 00:08:57.225
now we can just say document.write.

93
00:09:02.805 --> 00:09:06.760
&gt;&gt; Nina Zakharenko: This will go ahead and
return that first element in the list.

94
00:09:14.193 --> 00:09:19.486
&gt;&gt; Nina Zakharenko: Another thing we
can do is call the function inside of

95
00:09:19.486 --> 00:09:24.661
document.write which is
just another function so

96
00:09:24.661 --> 00:09:29.609
in these parentheses we
can just say printList.

97
00:09:32.201 --> 00:09:33.170
&gt;&gt; Nina Zakharenko: Let's do cars.

98
00:09:39.140 --> 00:09:47.423
This kind of implicitly calls
the printList function on this cars value.

99
00:09:56.707 --> 00:09:58.350
&gt;&gt; Nina Zakharenko: Oops, sorry you guys.

100
00:09:58.350 --> 00:09:59.560
I messed up here.

101
00:09:59.560 --> 00:10:02.150
It should be return list of 0 and
not fruits of 0.

102
00:10:02.150 --> 00:10:05.850
Cuz then you're just always
gonna get the same fruit.

103
00:10:05.850 --> 00:10:10.520
So now this is the value
that we expect to have.

104
00:10:11.864 --> 00:10:14.416
&gt;&gt; Nina Zakharenko: So anyone have
questions about the different ways of

105
00:10:14.416 --> 00:10:15.460
calling functions?

106
00:10:16.790 --> 00:10:20.579
Why these two things return,
do the same thing?

107
00:10:27.675 --> 00:10:35.068
&gt;&gt; Speaker 4: We didn't go over, why
printList is called before document.write.

108
00:10:36.450 --> 00:10:38.210
&gt;&gt; Nina Zakharenko: It's a good point.

109
00:10:38.210 --> 00:10:45.160
So in lots of programming languages,
things are nested by a parentheses.

110
00:10:45.160 --> 00:10:48.380
And the thing that's in
the innermost parentheses

111
00:10:48.380 --> 00:10:50.099
is going to get executed first.

112
00:10:51.860 --> 00:10:54.350
So, cars gets executed,

113
00:10:54.350 --> 00:10:59.270
it doesn't really, nothing really
happens because it's just the list.

114
00:10:59.270 --> 00:11:03.269
Then printList gets executed and

115
00:11:03.269 --> 00:11:07.126
passed into document.write,

116
00:11:07.126 --> 00:11:11.849
so let's say I have another function.

117
00:11:16.032 --> 00:11:19.382
&gt;&gt; Nina Zakharenko: I'm gonna
call it concatValues function.

118
00:11:26.870 --> 00:11:31.349
&gt;&gt; Nina Zakharenko: Actually,
I'm gonna call it concatLists function, so

119
00:11:31.349 --> 00:11:36.032
I am gonna take a list1 and
a list2, and I am gonna return.

120
00:11:43.134 --> 00:11:47.365
&gt;&gt; Nina Zakharenko: Sorry,
that's concat not contact.

121
00:11:53.005 --> 00:11:53.680
&gt;&gt; Nina Zakharenko: Here we go.

122
00:11:54.830 --> 00:12:00.077
So I can nest this even deeper and
say, document.write,

123
00:12:00.077 --> 00:12:06.076
the result of printList,
printList gets called on the result of,

124
00:12:06.076 --> 00:12:12.204
can call this concatListFunc and
call it on our fruits and our cars.

125
00:12:16.570 --> 00:12:18.457
&gt;&gt; Nina Zakharenko: And
wait for CodePen to update.

126
00:12:36.620 --> 00:12:37.884
&gt;&gt; Nina Zakharenko: So.

127
00:12:40.680 --> 00:12:46.593
&gt;&gt; Nina Zakharenko: Yeah, so
here are just returning the first item.

128
00:12:50.870 --> 00:12:53.430
&gt;&gt; Nina Zakharenko: And we can go
ahead and mix these up a little bit.

129
00:12:58.170 --> 00:13:01.039
&gt;&gt; Nina Zakharenko: So
now that returns subaru instead of peach.

130
00:13:03.950 --> 00:13:09.170
&gt;&gt; Speaker 2: There's a question on
real world usage of anonymous functions.

131
00:13:09.170 --> 00:13:11.920
Would you recommend naming
all your functions or

132
00:13:11.920 --> 00:13:13.960
using anonymous functions
in some of these?

133
00:13:13.960 --> 00:13:16.270
&gt;&gt; Nina Zakharenko: I
think naming functions and

134
00:13:16.270 --> 00:13:21.000
being explicit is a lot better
than having anonymous functions

135
00:13:21.000 --> 00:13:25.710
because JavaScript there's this thing
called hoisting, and if you're not

136
00:13:25.710 --> 00:13:30.880
setting your functions to a variable,
things can kind of happen out of order.

137
00:13:30.880 --> 00:13:33.340
So you can call a function
before it's declared.

138
00:13:35.080 --> 00:13:38.815
I consider it a source of mistakes.

139
00:13:38.815 --> 00:13:42.725
&gt;&gt; Speaker 4: There are instances where it
makes sense to use anonymous functions and

140
00:13:42.725 --> 00:13:46.766
tomorrow morning we're gonna go over
one of them which is using jQuery and

141
00:13:46.766 --> 00:13:47.855
event listeners.

142
00:13:47.855 --> 00:13:51.238
&gt;&gt; Nina Zakharenko: Yeah.

143
00:13:51.238 --> 00:13:51.823
&gt;&gt; Speaker 4: Yeah,

144
00:13:51.823 --> 00:13:57.830
typically this JavaScript code
would say in the body of the HTML?

145
00:13:57.830 --> 00:13:59.400
Is that where it would live?

146
00:13:59.400 --> 00:14:01.100
I mean.
&gt;&gt; Nina Zakharenko: Not necessarily.

147
00:14:01.100 --> 00:14:05.880
And we're gonna go over this when we go
about, when we talk about paths tomorrow.

148
00:14:05.880 --> 00:14:09.977
So your JavaScript would live
in a JavaScript file and

149
00:14:09.977 --> 00:14:14.082
your CSS would live in a CSS file or
multiples of them.

150
00:14:14.082 --> 00:14:17.575
And then in your HTML,
you would reference those files.

151
00:14:17.575 --> 00:14:22.310
And the browser is gonna take care
of smooshing it all together.

152
00:14:22.310 --> 00:14:25.155
&gt;&gt; Speaker 4: So in add function is
obviously you can call functions from

153
00:14:25.155 --> 00:14:26.380
within the JavaScript.

154
00:14:26.380 --> 00:14:31.320
But how does the JavaScript tie
in with events on the page itself

155
00:14:31.320 --> 00:14:36.950
with button clicks or
mouse movement, things like that?

156
00:14:36.950 --> 00:14:39.770
&gt;&gt; Nina Zakharenko: So
it depends on the kind of event but

157
00:14:39.770 --> 00:14:45.317
tomorrow we're gonna talk about jQuery,
and in order to use jQuery,

158
00:14:45.317 --> 00:14:49.752
we need to include the jQuery
file at the top of our HTML.

159
00:14:49.752 --> 00:14:54.990
So what that actually kinda does
behind the scenes is takes that giant

160
00:14:54.990 --> 00:15:00.767
jQuery file and paste it into your HTML
file, which means that in your HTML,

161
00:15:00.767 --> 00:15:05.554
like or anything that really
comes after that jQuery include,

162
00:15:05.554 --> 00:15:08.390
you can reference things before it.

163
00:15:08.390 --> 00:15:11.018
&gt;&gt; Speaker 4: And that has access
then to the page [INAUDIBLE]?

164
00:15:11.018 --> 00:15:12.415
&gt;&gt; Nina Zakharenko: Yeah.

