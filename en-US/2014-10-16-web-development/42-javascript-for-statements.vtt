WEBVTT

1
00:00:00.000 --> 00:00:03.981
[MUSIC]

2
00:00:03.981 --> 00:00:04.781
&gt;&gt; Nina Zakharenko: In conjunction with

3
00:00:04.781 --> 00:00:07.090
the if statement there's
a different kind of statement.

4
00:00:07.090 --> 00:00:08.950
It's called a for statement.

5
00:00:10.370 --> 00:00:12.248
And the anatomy of this
one is kind of tricky.

6
00:00:12.248 --> 00:00:16.697
So, the counter,
which is the first expression,

7
00:00:16.697 --> 00:00:22.400
is going to be a variable that
keeps track of what step you're on.

8
00:00:22.400 --> 00:00:27.288
It's separated by a semicolon
from a second expression

9
00:00:27.288 --> 00:00:31.750
which is the counting to and
this is the goal.

10
00:00:31.750 --> 00:00:34.010
It's how many total steps
we're going to take

11
00:00:35.430 --> 00:00:38.210
on the statement that's inside of this for
loop.

12
00:00:38.210 --> 00:00:41.820
The increment counter is how we're
going to change our variable,

13
00:00:41.820 --> 00:00:43.810
our counter, to get to the goal.

14
00:00:45.380 --> 00:00:50.902
So we're gonna keep incrementing
a counter and keep running the expression

15
00:00:50.902 --> 00:00:55.920
inside of this for loop that many
times until we reach our stop point.

16
00:01:01.941 --> 00:01:03.680
&gt;&gt; Nina Zakharenko: So
here's a simple example.

17
00:01:08.290 --> 00:01:11.600
We have this variable called text,
it's a string.

18
00:01:11.600 --> 00:01:16.160
We have a for loop here, so
we start at the number 0.

19
00:01:16.160 --> 00:01:24.940
We continue until our
variable i goes over five.

20
00:01:24.940 --> 00:01:26.970
That's our stopping point.

21
00:01:26.970 --> 00:01:31.880
And then we increment our
variable i over and over.

22
00:01:31.880 --> 00:01:36.085
And so if we run this piece of code,

23
00:01:36.085 --> 00:01:42.175
what it's doing Is a pending,
a blank, a space,

24
00:01:42.175 --> 00:01:47.270
and the number i into this text variable.

25
00:01:47.270 --> 00:01:49.220
And then it's printing it out.

26
00:01:49.220 --> 00:01:53.840
When it prints it out we'll see that
number 0, 1, 2, 3, 4 were added on.

27
00:01:57.490 --> 00:02:03.080
So, let's do a really simple example.

28
00:02:04.720 --> 00:02:07.120
So here's the anatomy of a for.

29
00:02:07.120 --> 00:02:09.210
We start with our variable.

30
00:02:09.210 --> 00:02:11.990
You might see this a lot.

31
00:02:11.990 --> 00:02:16.880
The variable called i is generally
used for a counter in programming.

32
00:02:17.940 --> 00:02:23.470
We're going to go until i is less than or
equal to seven.

33
00:02:23.470 --> 00:02:28.690
And the way that we change
i to get to that point,

34
00:02:28.690 --> 00:02:30.790
is by adding one to it with each set.

35
00:02:33.780 --> 00:02:34.790
I'll just print out i.

36
00:02:34.790 --> 00:02:38.369
&gt;&gt; Speaker 2: You need to increment i,
not 7.

37
00:02:40.160 --> 00:02:40.916
&gt;&gt; Nina Zakharenko: Yes, sorry.

38
00:02:40.916 --> 00:02:44.096
Nice catch.

39
00:02:53.816 --> 00:02:57.140
&gt;&gt; Nina Zakharenko: So
that'll print out the number 0 through 7.

40
00:03:00.110 --> 00:03:01.370
When you're writing for loops,

41
00:03:01.370 --> 00:03:06.800
be careful that this middle condition
is something that can be met.

42
00:03:06.800 --> 00:03:11.100
For example, if I change this to i--,

43
00:03:11.100 --> 00:03:14.280
this loop would go on forever
because there's no stopping point.

44
00:03:14.280 --> 00:03:16.850
And there really is no
forever in computing,

45
00:03:16.850 --> 00:03:21.280
so it'd probably throw up at some
point and give you a big error.

46
00:03:21.280 --> 00:03:24.616
So, make sure that that middle condition
is something that's achievable and

47
00:03:24.616 --> 00:03:27.600
that your counter is going up or down or

48
00:03:27.600 --> 00:03:29.980
doing something that's gonna
help you reach your goal.

49
00:03:32.876 --> 00:03:38.160
The fun part about for loops is we can
use them to Iterate over an array so,

50
00:03:38.160 --> 00:03:42.750
by calling for exact length we know how
many items we have in our array and we can

51
00:03:42.750 --> 00:03:48.720
use a counter and go up to the end of
that list, and do something, stuff in it.

52
00:03:48.720 --> 00:03:52.750
It doesn't matter how long the array is
because we're using a dynamic variable.

53
00:03:58.671 --> 00:04:00.290
&gt;&gt; Nina Zakharenko: So
let's do this exercise.

54
00:04:04.851 --> 00:04:06.340
&gt;&gt; Nina Zakharenko: We got our fruits.

55
00:04:06.340 --> 00:04:07.810
We're iterating over them.

56
00:04:09.300 --> 00:04:12.610
We're outputting the value
to this HTML page here.

57
00:04:14.560 --> 00:04:21.080
We're writing &lt;br&gt; which is HTML for
a new line.

58
00:04:22.650 --> 00:04:28.080
And then, we're writing what the value of
the fruit is at that position in the list.

59
00:04:31.230 --> 00:04:31.730
Okay.

60
00:04:33.980 --> 00:04:35.950
So, let's do an exercise.

61
00:04:35.950 --> 00:04:39.800
Let's add some items to that array
at the top and run the code again.

62
00:04:43.570 --> 00:04:47.400
I'm sorry, let's add some items using
fruit.push and then write a for

63
00:04:47.400 --> 00:04:48.300
loop down here.

64
00:04:49.430 --> 00:04:50.850
And we'll just write that code again.

65
00:04:52.360 --> 00:04:55.450
So fruits.push whatever
you want to put in there.

66
00:04:57.530 --> 00:05:00.560
And let's do that a few times and
see how that changes our for loop.

67
00:05:28.881 --> 00:05:32.313
&gt;&gt; Speaker 3: Does push always
just add one thing or can you add,

68
00:05:32.313 --> 00:05:37.730
do you have to like repeat the whole push
command to get a second thing on there?

69
00:05:37.730 --> 00:05:42.086
&gt;&gt; Nina Zakharenko: You can use
append I believe to another list.

70
00:05:42.086 --> 00:05:43.170
&gt;&gt; Speaker 3: List, okay.

71
00:05:43.170 --> 00:05:43.910
&gt;&gt; Nina Zakharenko: So.

72
00:06:01.410 --> 00:06:05.386
&gt;&gt; Speaker 2: It's concat, not append.

73
00:06:05.386 --> 00:06:06.699
&gt;&gt; Nina Zakharenko: Concat.

74
00:06:06.699 --> 00:06:08.605
Thank you.

75
00:06:08.605 --> 00:06:10.885
The syntax for

76
00:06:10.885 --> 00:06:15.420
this is always slightly different in
whatever programming language you use.

77
00:06:15.420 --> 00:06:16.800
So it's easy to mix things up.

78
00:06:18.610 --> 00:06:23.432
Okay so, let's put in an extra
document dot right in here

79
00:06:23.432 --> 00:06:25.950
to see what's in our fruits.

80
00:06:27.811 --> 00:06:33.590
&gt;&gt; Nina Zakharenko: So we got five things
in it now, let's write a for loop.

81
00:06:59.691 --> 00:07:02.897
&gt;&gt; Nina Zakharenko: So does anyone have
questions about why we're using i in here?

82
00:07:05.170 --> 00:07:05.670
No.

83
00:07:08.230 --> 00:07:11.207
&gt;&gt; Nina Zakharenko: So if we run this,
we'll just get this list appended at

84
00:07:11.207 --> 00:07:14.719
the end of the one that we printed
out here, because we didn't.

85
00:07:16.430 --> 00:07:17.190
What's that?

86
00:07:17.190 --> 00:07:18.380
&gt;&gt; Speaker 3: What's happened to apricot?

87
00:07:24.530 --> 00:07:27.369
&gt;&gt; Speaker 2: So just say fruits equals.

88
00:07:27.369 --> 00:07:30.320
&gt;&gt; Nina Zakharenko: Good catch,
there we go.

89
00:07:30.320 --> 00:07:35.920
Snuck out of there.

90
00:07:43.620 --> 00:07:47.428
&gt;&gt; Nina Zakharenko: Right, and the reason
we're doing this is because fruits.concat

91
00:07:47.428 --> 00:07:50.420
does not actually modify our fruits list.

92
00:07:50.420 --> 00:07:53.410
It returns a new list
that contains both lists.

93
00:07:53.410 --> 00:07:57.111
So you have to remember to set it
back to your original variable here.

94
00:07:59.231 --> 00:08:02.660
&gt;&gt; Speaker 4: I couldn't hear that,
what was that?

95
00:08:02.660 --> 00:08:05.450
&gt;&gt; Nina Zakharenko: So
fruits.concat does not actually modify

96
00:08:05.450 --> 00:08:07.630
the original fruits list that we had.

97
00:08:07.630 --> 00:08:12.327
So we have to remember to set it back
here because fruits.concat returns

98
00:08:12.327 --> 00:08:16.030
a whole new array with the values
of both lists combined.

99
00:08:21.551 --> 00:08:25.852
&gt;&gt; Speaker 4: So the array is not
immutable but if you use concat,

100
00:08:25.852 --> 00:08:28.060
it almost acts like it is?

101
00:08:29.250 --> 00:08:29.820
&gt;&gt; Nina Zakharenko: Not really.

102
00:08:31.190 --> 00:08:35.840
So let me open up the console real quick.

103
00:08:35.840 --> 00:08:39.420
We have a list here of names.

104
00:08:45.500 --> 00:08:46.940
&gt;&gt; Nina Zakharenko: We have a list.

105
00:08:46.940 --> 00:08:47.650
Call it animals.

106
00:08:47.650 --> 00:08:54.460
We got kitty.

107
00:08:54.460 --> 00:08:59.710
So if we do names.concat(animals)

108
00:08:59.710 --> 00:09:04.310
It'll return a new list
with both things combined.

109
00:09:04.310 --> 00:09:06.730
But our original list is left intact.

110
00:09:10.770 --> 00:09:13.370
So we could say that names-
&gt;&gt; Speaker 4: There's no assignment

111
00:09:13.370 --> 00:09:14.320
in it then.

112
00:09:14.320 --> 00:09:14.966
&gt;&gt; Nina Zakharenko: Right.

113
00:09:14.966 --> 00:09:19.902
If I did names = names.concat we'll see

114
00:09:19.902 --> 00:09:24.420
that names now contains both things.

115
00:09:32.370 --> 00:09:35.660
Is everyone done with the iterate
over an array exercise?

116
00:09:36.830 --> 00:09:38.410
Did you guys all write your for loops?

