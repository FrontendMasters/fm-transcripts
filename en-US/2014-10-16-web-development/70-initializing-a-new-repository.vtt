WEBVTT

1
00:00:00.000 --> 00:00:03.937
[MUSIC]

2
00:00:03.937 --> 00:00:08.429
&gt;&gt; Nina Zakharenko: Now we're going
to talk about how to make our own git

3
00:00:08.429 --> 00:00:09.517
projects.

4
00:00:09.517 --> 00:00:11.725
The easiest way of doing this.

5
00:00:11.725 --> 00:00:16.839
Is, going back to your GitHub

6
00:00:16.839 --> 00:00:23.755
account
&gt;&gt; Nina Zakharenko: And

7
00:00:23.755 --> 00:00:25.776
clicking up in this little plus up here.

8
00:00:29.597 --> 00:00:31.680
&gt;&gt; Nina Zakharenko: We're gonna
say we want a new repository.

9
00:00:33.070 --> 00:00:38.300
So give it a name, GitHub suggest one.

10
00:00:38.300 --> 00:00:45.670
So it's like how about you call this
Harry hairy-ninja, thanks, GitHub.

11
00:00:45.670 --> 00:00:48.200
No spaces or funny characters in here.

12
00:00:48.200 --> 00:00:51.550
And we talked about naming conventions.

13
00:00:51.550 --> 00:00:57.060
So in HTML you name your
classes with dashes.

14
00:00:57.060 --> 00:01:01.280
And that same naming convention
is usually used for git branches.

15
00:01:01.280 --> 00:01:02.720
You can call them whatever you want.

16
00:01:02.720 --> 00:01:06.570
But this is the most recognizable way.

17
00:01:06.570 --> 00:01:14.985
So I'm gonna call this
one my-first-project.

18
00:01:17.845 --> 00:01:19.580
&gt;&gt; Nina Zakharenko: Description
is optional.

19
00:01:20.670 --> 00:01:21.750
This is important.

20
00:01:21.750 --> 00:01:22.750
Public or private.

21
00:01:22.750 --> 00:01:25.870
If your code is private,
public anyone can see it.

22
00:01:25.870 --> 00:01:28.780
If you want your code to be private,
you have to pay for it.

23
00:01:28.780 --> 00:01:32.110
It gets about five bucks a month.

24
00:01:32.110 --> 00:01:35.490
But here's the important part.

25
00:01:36.580 --> 00:01:39.979
You can have git initialize
this repository for you.

26
00:01:42.070 --> 00:01:47.360
A git, a .gitignore, is a file that
tells git which files to ignore.

27
00:01:47.360 --> 00:01:51.120
Let's say you have a text file and
you have a JavaScript file.

28
00:01:51.120 --> 00:01:53.420
And the text file has your notes in it,
and

29
00:01:53.420 --> 00:01:56.480
you don't want it cluttering
up the repository.

30
00:01:56.480 --> 00:02:00.739
You'd create a .gitignore file and
say, ignore all txt files.

31
00:02:01.890 --> 00:02:06.210
Now git has created a bunch of
.gitignores for you already.

32
00:02:07.950 --> 00:02:09.560
Here's a huge list of them.

33
00:02:12.270 --> 00:02:16.900
And this will, for example,
java generates a bunch of compiled files.

34
00:02:16.900 --> 00:02:19.600
You usually don't want
them in your directory.

35
00:02:19.600 --> 00:02:22.860
So you'll pick this java .gitignore and
GitHub will just put it there for you.

36
00:02:22.860 --> 00:02:28.460
&gt;&gt; Speaker 2: The None one's good too,
we're actually gonna use the None one.

37
00:02:28.460 --> 00:02:30.610
&gt;&gt; Nina Zakharenko: Yeah.
License is something you don't really need

38
00:02:30.610 --> 00:02:35.240
to worry about right now, but git provides
a whole bunch of licenses for you.

39
00:02:36.960 --> 00:02:40.390
That it will also add back in.

40
00:02:40.390 --> 00:02:44.860
So if you already have a git repository
locally, you don't wanna do this step.

41
00:02:44.860 --> 00:02:46.560
And we're gonna skip it.

42
00:02:48.430 --> 00:02:49.860
But I find it really helpful.

43
00:02:49.860 --> 00:02:54.420
If you check this, git will just tell you

44
00:02:54.420 --> 00:02:58.860
okay now git clone and
give you the address, of your new project.

45
00:03:01.440 --> 00:03:02.950
But we're gonna leave this unchecked.

46
00:03:02.950 --> 00:03:05.653
And we're right create repository,

47
00:03:05.653 --> 00:03:10.467
GitHub will tell you this is how you
either create a new repository on

48
00:03:10.467 --> 00:03:15.760
the command line that will be linked
to with this GitHub repository.

49
00:03:15.760 --> 00:03:18.660
Or if you already have one
which you probably don't.

50
00:03:18.660 --> 00:03:21.400
Here's how to sync it up with your GitHub.

51
00:03:21.400 --> 00:03:25.220
So we're just going to go ahead and
follow these steps.

52
00:03:29.720 --> 00:03:33.280
So we're gonna do this touch README.md.

53
00:03:33.280 --> 00:03:36.780
And if you Windows people are using.

54
00:03:36.780 --> 00:03:38.446
Git pass this should work.

55
00:03:42.166 --> 00:03:45.880
&gt;&gt; Nina Zakharenko: So,
I'm going to make a new directory.

56
00:03:47.290 --> 00:03:51.320
I'm just gonna do that in the finder,
so I'm gong to the desktop.

57
00:03:54.350 --> 00:03:56.930
Calling it awesome cuz it's awesome.

58
00:03:59.310 --> 00:04:01.850
So now I can change to
my directory awesome.

59
00:04:03.940 --> 00:04:05.470
We'll see it's totally empty.

60
00:04:06.560 --> 00:04:10.460
And I'm just going to copy
these commands from GitHub.

61
00:04:11.630 --> 00:04:12.130
So.

62
00:04:15.780 --> 00:04:18.710
I'm creating a new file now if I do an ls.

63
00:04:18.710 --> 00:04:20.010
It's in that directory.

64
00:04:22.070 --> 00:04:28.410
I'm running git init,
which will create a hidden .git directory.

65
00:04:28.410 --> 00:04:33.620
And tell you that all right, here you go,
you have an empty git repository.

66
00:04:33.620 --> 00:04:35.920
We do ls we won't see it.

67
00:04:35.920 --> 00:04:38.190
We won't see this .git
folder because it's hidden.

68
00:04:40.270 --> 00:04:46.296
Okay we're gonna add the README.md, and
then we're gonna do my first commit.

69
00:04:53.415 --> 00:04:56.819
&gt;&gt; Nina Zakharenko: Here we see
the changes to be committed are this read

70
00:04:56.819 --> 00:04:57.460
me file.

71
00:04:57.460 --> 00:04:59.960
We're gonna copy that in.

72
00:05:01.180 --> 00:05:03.480
Git is gonna tell us that
our commit has been done.

73
00:05:05.260 --> 00:05:07.150
And this step is the important one.

74
00:05:07.150 --> 00:05:09.710
It's kind of confusing.

75
00:05:09.710 --> 00:05:14.890
But this step,
is telling your local repository

76
00:05:14.890 --> 00:05:19.260
here's where the server lives, where
you're gonna push all your stuff back up.

77
00:05:19.260 --> 00:05:26.840
And the sever is hosted by GitHub.

78
00:05:26.840 --> 00:05:31.800
So, unless there's an error you won't
get any output from that command.

79
00:05:31.800 --> 00:05:35.336
And then the last step is
git push origin master.

80
00:05:35.336 --> 00:05:42.100
And the -u is because we have not
pushed from this repository before.

81
00:05:45.410 --> 00:05:49.927
So now if we go back to our GitHub.

82
00:05:54.306 --> 00:05:57.452
&gt;&gt; Nina Zakharenko: We'll see
that file that we pushed,

83
00:05:57.452 --> 00:05:59.897
from just a few minutes ago.

84
00:06:10.371 --> 00:06:13.255
&gt;&gt; Nina Zakharenko: So all this stuff
is definitely a lot to chew on.

85
00:06:13.255 --> 00:06:16.061
There's a really great
free git book out there.

86
00:06:16.061 --> 00:06:20.611
And it's at git-scm.com.

87
00:06:23.570 --> 00:06:28.276
Lots of really good documentation here.

88
00:06:28.276 --> 00:06:29.990
&gt;&gt; Speaker 2: Let's try git.

89
00:06:29.990 --> 00:06:30.896
&gt;&gt; Nina Zakharenko: Yep.
Let's try git.

90
00:06:38.276 --> 00:06:40.480
&gt;&gt; Nina Zakharenko: This is really good,
it's interactive.

91
00:06:42.540 --> 00:06:47.596
Won't go quite as in-depth as we just
went but definitely a good resource.

92
00:07:05.736 --> 00:07:09.960
&gt;&gt; Nina Zakharenko: So we're just
quickly going to brush over branches.

93
00:07:12.860 --> 00:07:17.390
So like I mentioned before, feature
branches are, when you want to work

94
00:07:17.390 --> 00:07:22.260
on something and not disturb this
pristine working copy that you have.

95
00:07:24.030 --> 00:07:27.970
They're really not that interesting
when it's just you working on a project.

96
00:07:27.970 --> 00:07:32.860
But they become really important when
multiple people are working on a project

97
00:07:32.860 --> 00:07:36.494
and committing to the same
repository of the same project.

98
00:07:37.590 --> 00:07:40.590
So at work I have my branch and

99
00:07:40.590 --> 00:07:45.390
Brian has his branch, and
we'll go through the pull-request process.

100
00:07:45.390 --> 00:07:47.560
So that we're not
interfering with each other.

101
00:07:47.560 --> 00:07:50.680
I don't know what his files are and
he doesn't know what my files are and

102
00:07:50.680 --> 00:07:52.400
it really doesn't matter.

103
00:07:54.470 --> 00:07:57.150
So if we go and

104
00:07:57.150 --> 00:08:01.730
make a new branch, and the terminology
here is a little bit un-intuitive.

105
00:08:02.780 --> 00:08:06.290
The command is git checkout, and then -b.

106
00:08:07.316 --> 00:08:13.180
-b is saying git make a new branch and
the name is my branch.

107
00:08:13.180 --> 00:08:16.750
Git will just create a new
one switch you right to it.

108
00:08:18.070 --> 00:08:22.850
And then if you type git branch you'll see
a listing of all your local branches and

109
00:08:24.380 --> 00:08:27.000
git will show a star next to
the one you're currently on.

