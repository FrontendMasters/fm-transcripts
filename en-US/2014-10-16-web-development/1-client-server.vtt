WEBVTT

1
00:00:00.000 --> 00:00:03.578
[MUSIC]

2
00:00:03.578 --> 00:00:07.279
&gt;&gt; Nina Zakharenko: Let's talk a little
bit about the client and server and

3
00:00:07.279 --> 00:00:10.028
what happens when you're on a web page.

4
00:00:10.028 --> 00:00:12.787
So you're on the web page and
you click a link.

5
00:00:13.800 --> 00:00:17.340
What happens behind the scenes
is the client is creating

6
00:00:17.340 --> 00:00:22.130
an http request and
it's sending it over to the server, so

7
00:00:22.130 --> 00:00:25.450
it's like knock, knock,
server, I want this.

8
00:00:25.450 --> 00:00:29.890
And the server is gonna come back and
say I have it or I don't.

9
00:00:29.890 --> 00:00:34.900
So the server finds the thing that
you asked for, bundles it up, and

10
00:00:34.900 --> 00:00:36.130
sends it back to the client.

11
00:00:37.170 --> 00:00:40.830
After this, the client decides
what it's going to do with it.

12
00:00:40.830 --> 00:00:45.500
If it's an image or an HTML page it's
going to go ahead and display it.

13
00:00:45.500 --> 00:00:51.080
So things that run on the client
side are HTML, JavaScript and Flash.

14
00:00:51.080 --> 00:00:55.637
Things that run on the server
side are things like PHP,

15
00:00:55.637 --> 00:00:59.118
MySQL, anything that does generation.

16
00:01:02.138 --> 00:01:07.158
&gt;&gt; Nina Zakharenko: So this is a really
brief example of an HTTP request.

17
00:01:07.158 --> 00:01:12.412
So GET is an HTTP verb, so
you're sending this instruction

18
00:01:12.412 --> 00:01:16.730
to the server,
you're saying get me this link.

19
00:01:16.730 --> 00:01:22.898
The version of HTTP I'm using is 1.1,
which is not important,

20
00:01:22.898 --> 00:01:27.966
the host is which server
these resources will live on,

21
00:01:27.966 --> 00:01:33.380
and the accept is what the client
is expecting to get back.

22
00:01:35.920 --> 00:01:38.528
So the server will handle the request and

23
00:01:38.528 --> 00:01:40.780
it's going to send back something
like this to the client.

24
00:01:41.910 --> 00:01:46.800
The number 200 and OK is important,
200 is an HTTP status code.

25
00:01:47.900 --> 00:01:53.660
So the client end server don't need to
know, they don't need that okay message,

26
00:01:53.660 --> 00:01:57.730
they know purely by that number that
everything went exactly as planned.

27
00:01:58.950 --> 00:02:04.200
And so you'll get back in
this example some html, and

28
00:02:04.200 --> 00:02:10.450
then your client, your browser knows
how to translate that into what we see.

29
00:02:10.450 --> 00:02:14.077
So colors, images, different font sizes.

30
00:02:16.338 --> 00:02:19.864
&gt;&gt; Nina Zakharenko: Now here's a page
that we've all seen a lot, and

31
00:02:19.864 --> 00:02:22.140
why does this happen?

32
00:02:22.140 --> 00:02:26.970
It means that the web server couldn't
find the file that you asked for.

33
00:02:26.970 --> 00:02:28.800
So you asked for
a file that doesn't exist.

34
00:02:30.610 --> 00:02:34.057
So some really common HTTP Status Codes,

35
00:02:34.057 --> 00:02:38.981
ones we probably see almost everyday,
200 means okay,

36
00:02:38.981 --> 00:02:45.098
404 means that that file wasn't found,
and 500 is a server error.

37
00:02:47.437 --> 00:02:51.760
&gt;&gt; Nina Zakharenko: So a good way of
figuring out what your status code means,

38
00:02:51.760 --> 00:02:57.460
if you see it, ones in the hundreds
are purely informational.

39
00:02:57.460 --> 00:03:02.330
Ones in the two hundreds
indicate success of some sort.

40
00:03:02.330 --> 00:03:06.650
Three hundreds are redirection, so
that means something has moved.

41
00:03:06.650 --> 00:03:10.950
Four hundreds are client errors, and
five hundreds are server errors.

