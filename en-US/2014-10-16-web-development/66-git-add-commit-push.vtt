WEBVTT

1
00:00:00.000 --> 00:00:04.056
[MUSIC]

2
00:00:04.056 --> 00:00:08.000
&gt;&gt; Nina Zakharenko: So git status is
saying that I have an untracked file.

3
00:00:09.480 --> 00:00:15.170
That means this is a file that git knows
nothing about, it's never seen it before

4
00:00:15.170 --> 00:00:19.950
and you can't do any sort of version
control if git doesn't know about it.

5
00:00:19.950 --> 00:00:27.670
So the command to add this file to your
git repository is pretty straightforward.

6
00:00:27.670 --> 00:00:28.570
Just called git add.

7
00:00:30.240 --> 00:00:32.370
So that's-
&gt;&gt; Speaker 2: There's a question.

8
00:00:32.370 --> 00:00:34.530
Did you actually just create that file?
&gt;&gt; Nina Zakharenko: I

9
00:00:34.530 --> 00:00:35.030
did.
&gt;&gt; Speaker 2: He was wondering.

10
00:00:35.030 --> 00:00:35.530
&gt;&gt; Nina Zakharenko: Yeah.

11
00:00:35.530 --> 00:00:36.030
&gt;&gt; Speaker 2: Okay.

12
00:00:36.030 --> 00:00:36.970
&gt;&gt; Nina Zakharenko: So you guys

13
00:00:36.970 --> 00:00:41.290
create one of your own.
&gt;&gt; Speaker 3: So, what was the command?

14
00:00:41.290 --> 00:00:44.350
Git add, and then the filename?
&gt;&gt; Nina Zakharenko: Do you have a file?

15
00:00:44.350 --> 00:00:45.770
&gt;&gt; Speaker 3: No, I don't have

16
00:00:45.770 --> 00:00:46.500
a file yet.
&gt;&gt; Nina Zakharenko: Okay.

17
00:00:46.500 --> 00:00:48.250
So go ahead and create that file

18
00:00:49.560 --> 00:00:54.340
in the directory called pull-requests.
&gt;&gt; Speaker 2: Open the folder, and then-

19
00:00:54.340 --> 00:00:55.955
&gt;&gt; Speaker 3: How do you create the file?

20
00:00:55.955 --> 00:00:57.790
&gt;&gt; Speaker 2: [CROSSTALK] Use a text

21
00:00:57.790 --> 00:00:59.331
editor.
&gt;&gt; Nina Zakharenko: Yeah.

22
00:00:59.331 --> 00:01:05.004
[CROSSTALK]
&gt;&gt; Speaker 2: Open

23
00:01:05.004 --> 00:01:09.329
notepad and then type in-
&gt;&gt; Speaker 3: How do you open Explorer?

24
00:01:15.132 --> 00:01:16.363
&gt;&gt; Speaker 2: He's helping him.

25
00:01:24.498 --> 00:01:25.588
&gt;&gt; Nina Zakharenko: So, again,

26
00:01:25.588 --> 00:01:30.358
git knows that ninaz.txt is
not part of the repository.

27
00:01:30.358 --> 00:01:34.258
So I'm gonna type git and
then add, and the name of the file.

28
00:01:44.098 --> 00:01:45.169
&gt;&gt; Nina Zakharenko: I'm in the matrix,

29
00:01:45.169 --> 00:01:48.636
you guys.
&gt;&gt; Nina Zakharenko: It's all black and

30
00:01:48.636 --> 00:01:56.415
green.
&gt;&gt; Speaker 3: [INAUDIBLE]

31
00:01:56.415 --> 00:01:57.566
&gt;&gt; Nina Zakharenko: Okay, so,

32
00:01:57.566 --> 00:02:02.760
have you guys added your
name file to the repository?

33
00:02:04.430 --> 00:02:08.720
So, again, we're gonna be running this
command after almost everything we do.

34
00:02:08.720 --> 00:02:11.119
We're gonna say, git, give me your status.

35
00:02:12.520 --> 00:02:13.140
And it's changed.

36
00:02:13.140 --> 00:02:17.740
It's like,
we have some changes to be committed, and

37
00:02:17.740 --> 00:02:20.320
now it knows that we have a new file.

38
00:02:20.320 --> 00:02:26.080
So there are two steps in making sure
that all your files are version control.

39
00:02:26.080 --> 00:02:30.320
The first one is doing this, this git add.

40
00:02:30.320 --> 00:02:34.970
And what this does is tells git that
there's a new file in the staging area.

41
00:02:34.970 --> 00:02:38.240
And the staging area is
kinda like a preview.

42
00:02:38.240 --> 00:02:42.930
So what's gonna happen
when I do the next step?

43
00:02:42.930 --> 00:02:45.630
And if I make a new file right now,

44
00:02:45.630 --> 00:02:53.280
let's just say
&gt;&gt; Nina Zakharenko: And I do a git status.

45
00:02:53.280 --> 00:02:58.430
Git will say, I have a new file,
but I also have an untracked file.

46
00:02:58.430 --> 00:03:03.850
So, when I do the next command, the next
action, it's only, it's called a commit.

47
00:03:03.850 --> 00:03:08.420
It's only going to be taken on
the files that git is aware of.

48
00:03:09.540 --> 00:03:16.508
So, not the untracked files.
&gt;&gt; Nina Zakharenko: So

49
00:03:16.508 --> 00:03:20.835
the next step is to do a git commit,
which goes ahead and

50
00:03:20.835 --> 00:03:25.915
actually puts it in a place where
git knows that it can pull it back

51
00:03:25.915 --> 00:03:31.082
if you want to look at it later.
&gt;&gt; Nina Zakharenko: And

52
00:03:31.082 --> 00:03:34.720
the way that we usually do a git
commit is by providing a message.

53
00:03:36.010 --> 00:03:40.470
So I'll be using the -m flag here and
two quotes.

54
00:03:40.470 --> 00:03:46.786
And we're gonna put our message inside.
&gt;&gt; Speaker 2: Is there

55
00:03:46.786 --> 00:03:48.943
a way you can move that up a little bit?
&gt;&gt; Nina Zakharenko: Sure.

56
00:04:12.145 --> 00:04:13.677
&gt;&gt; Nina Zakharenko: So when I commit this,

57
00:04:13.677 --> 00:04:15.860
git's gonna give me a message.

58
00:04:15.860 --> 00:04:19.830
It's gonna say one file has changed and
one insertion.

59
00:04:21.370 --> 00:04:27.530
Now, when I do my git status again,
I only see my untracked file.

60
00:04:27.530 --> 00:04:30.550
And for now, just for example,
I'm going to remove that file.

61
00:04:30.550 --> 00:04:35.815
I could just do that in the finder.

62
00:04:44.866 --> 00:04:46.965
&gt;&gt; Nina Zakharenko: Boom, that's gone.

63
00:04:46.965 --> 00:04:51.560
So if I run git status again,
that file is gone and git is happy.

64
00:04:52.620 --> 00:04:54.159
But we have a new message here.

65
00:04:56.710 --> 00:04:59.921
Git is saying that my branch is
ahead of master by one commit.

66
00:05:01.960 --> 00:05:03.402
&gt;&gt; Nina Zakharenko: So, in this case,

67
00:05:03.402 --> 00:05:05.840
origin master is GitHub.

68
00:05:05.840 --> 00:05:08.440
That's kind of our grand authority.

69
00:05:08.440 --> 00:05:14.560
And git is saying that we have local
changes that GitHub does not know about.

70
00:05:15.730 --> 00:05:19.780
So in order to push up
our changes to GitHub,

71
00:05:19.780 --> 00:05:26.790
we're gonna type one last command, and
that is git push origin and master.

72
00:05:36.330 --> 00:05:37.469
&gt;&gt; Nina Zakharenko: Does anyone have any

73
00:05:37.469 --> 00:05:42.354
questions?
&gt;&gt; Nina Zakharenko: I know this

74
00:05:42.354 --> 00:05:46.840
is a lot of information to chew on.
&gt;&gt; Speaker 2: I would make notice

75
00:05:46.840 --> 00:05:48.720
that yours is pull request dash one, and

76
00:05:48.720 --> 00:05:52.630
everyone else is going to be pull request.
&gt;&gt; Nina Zakharenko: Yes.

77
00:05:52.630 --> 00:05:53.600
Sorry about that, guys.

78
00:05:53.600 --> 00:05:58.182
I did a little bit of a test before.
&gt;&gt; Speaker 3: So it asks for

79
00:05:58.182 --> 00:05:59.513
user name
&gt;&gt; Nina Zakharenko: Yes,

80
00:05:59.513 --> 00:06:03.246
put in your GitHub user name,
and your GitHub password.

81
00:06:13.306 --> 00:06:13.893
&gt;&gt; Nina Zakharenko: Okay.

82
00:06:13.893 --> 00:06:15.897
&gt;&gt; Speaker 4: I hit Enter

83
00:06:15.897 --> 00:06:19.409
just get commit with no message.

84
00:06:19.409 --> 00:06:20.863
&gt;&gt; Nina Zakharenko: Okay.
&gt;&gt; Speaker 4: And

85
00:06:20.863 --> 00:06:22.432
it's-

86
00:06:22.432 --> 00:06:23.248
&gt;&gt; Speaker 2: Now.
&gt;&gt; Nina Zakharenko: Yeah.

87
00:06:23.248 --> 00:06:24.336
&gt;&gt; Speaker 4: [LAUGH]

88
00:06:24.336 --> 00:06:26.997
&gt;&gt; Speaker 2: [INAUDIBLE] escape.

89
00:06:26.997 --> 00:06:27.602
&gt;&gt; Speaker 4: Totally

90
00:06:27.602 --> 00:06:28.172
lost.
&gt;&gt; Speaker 2: Hit colon

91
00:06:30.312 --> 00:06:31.952
&gt;&gt; Speaker 2: And then the queue.

92
00:06:31.952 --> 00:06:35.232
Then hit Enter.
&gt;&gt; Speaker 4: No write since the last

93
00:06:35.232 --> 00:06:41.207
change.
&gt;&gt; Speaker 2: [CROSSTALK]

94
00:06:50.276 --> 00:06:52.838
&gt;&gt; Nina Zakharenko: Is anyone not at this

95
00:06:52.838 --> 00:06:53.896
point?

96
00:07:04.403 --> 00:07:04.923
&gt;&gt; Nina Zakharenko: Okay, so

97
00:07:04.923 --> 00:07:08.176
the next step, and
this one is super important as some of you

98
00:07:08.176 --> 00:07:12.230
guys have to pat yourselves on the back
cuz this is your first git command.

99
00:07:14.140 --> 00:07:14.865
Serious.

100
00:07:14.865 --> 00:07:18.570
Okay.
So, after we did our git push,

101
00:07:18.570 --> 00:07:23.657
our changes are now
synchronized with GitHub.

102
00:07:23.657 --> 00:07:26.061
Yeah?
&gt;&gt; Speaker 2: Do we want to wait and

103
00:07:26.061 --> 00:07:28.604
kinda let everyone catch up?
&gt;&gt; Nina Zakharenko: Yeah, yeah.

104
00:07:28.604 --> 00:07:30.091
&gt;&gt; Speaker 2: People online are kind of,

105
00:07:30.091 --> 00:07:32.350
I think, behind.
&gt;&gt; Nina Zakharenko: Definitely.

106
00:07:32.350 --> 00:07:34.270
I'll go ahead and wait a few minutes.

107
00:07:35.590 --> 00:07:37.407
Does anyone have questions
about any of this?

108
00:07:39.715 --> 00:07:40.335
&gt;&gt; Nina Zakharenko: Yes?

109
00:07:40.335 --> 00:07:43.680
&gt;&gt; Speaker 3: So we've just updated my

110
00:07:43.680 --> 00:07:45.340
branch.
&gt;&gt; Nina Zakharenko: Yeah.

111
00:07:45.340 --> 00:07:47.060
&gt;&gt; Speaker 3: That I forked on my GitHub.

112
00:07:47.060 --> 00:07:48.870
&gt;&gt; Nina Zakharenko: Yeah, and

113
00:07:48.870 --> 00:07:54.610
the reason this is happening is because
maybe Brian thinks your changes suck.

114
00:07:54.610 --> 00:07:57.720
And he doesn't want them to
be part of his repository.

115
00:07:57.720 --> 00:08:00.080
That means that he's in

116
00:08:00.080 --> 00:08:04.020
ultimate control of what could
goes into his own repository.

117
00:08:04.020 --> 00:08:08.280
You can do whatever you want with your
copy, but he doesn't have to accept it

118
00:08:08.280 --> 00:08:10.830
back in to his code.
&gt;&gt; Speaker 2: And

119
00:08:10.830 --> 00:08:13.350
you can go make your own projects.

120
00:08:13.350 --> 00:08:17.835
You can call, you can fork something and
make it into something new.

121
00:08:17.835 --> 00:08:19.550
&gt;&gt; Nina Zakharenko: Yeah.

122
00:08:19.550 --> 00:08:22.430
&gt;&gt; Speaker 2: Actually, one project that I

123
00:08:22.430 --> 00:08:27.190
created, which was a little jQuery plugin,
someone forked it and

124
00:08:27.190 --> 00:08:29.060
then made it super popular.

125
00:08:29.060 --> 00:08:33.250
So, the fork actually has 500 stars or

126
00:08:33.250 --> 00:08:35.100
whatever.
&gt;&gt; Nina Zakharenko: Yeah.

127
00:08:35.100 --> 00:08:38.650
&gt;&gt; Speaker 2: But my main repository that,

128
00:08:38.650 --> 00:08:44.214
his was forked from, his is actually
the more active and maintained.

129
00:08:44.214 --> 00:08:50.445
And so, you can fork something and
make it your own.

130
00:08:50.445 --> 00:08:53.645
And then it can get popular from there,

131
00:08:53.645 --> 00:08:54.262
too.
&gt;&gt; Nina Zakharenko: Yeah,

132
00:08:54.262 --> 00:08:58.318
it doesn't ever have to be put back
with the branch that it was forked

133
00:08:58.318 --> 00:08:59.193
from.
&gt;&gt; Speaker 2: Yeah.

134
00:08:59.193 --> 00:09:00.175
It kind of go its own way.

