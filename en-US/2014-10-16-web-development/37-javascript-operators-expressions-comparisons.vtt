WEBVTT

1
00:00:00.000 --> 00:00:03.482
[MUSIC]

2
00:00:03.482 --> 00:00:05.920
&gt;&gt; Nina Zakharenko: There
are several operators in JavaScript.

3
00:00:07.160 --> 00:00:11.820
Addition, Subtraction, Multiplication,
Division, and Modulus.

4
00:00:11.820 --> 00:00:15.420
Which is the leftovers of division.

5
00:00:18.520 --> 00:00:22.540
Some of the variables can be used
with multiple types of variables.

6
00:00:22.540 --> 00:00:28.020
Such as we just saw addition and we used
the plus to put together two strings.

7
00:00:28.020 --> 00:00:34.765
But if those two variables were numbers,
we'd actually just get back the result.

8
00:00:34.765 --> 00:00:35.960
Let's do that.

9
00:00:40.888 --> 00:00:44.924
&gt;&gt; Nina Zakharenko: I'm making
two variables that are numbers.

10
00:00:44.924 --> 00:00:46.548
And if we did x + y.

11
00:00:46.548 --> 00:00:48.096
We would get eight.

12
00:00:48.096 --> 00:00:52.070
But if I did var x is 5,

13
00:00:52.070 --> 00:00:59.610
with the quotes var y
is 3 with the quotes.

14
00:01:01.080 --> 00:01:03.310
If we did x + y, we'd get 53.

15
00:01:03.310 --> 00:01:07.840
So, something to watch out for.

16
00:01:09.890 --> 00:01:16.332
So, expressions, we can also store
the results of expressions in variables.

17
00:01:16.332 --> 00:01:21.400
Which is nice because that means
we can use them for later.

18
00:01:23.610 --> 00:01:27.615
There's two special kinds of operations.

19
00:01:27.615 --> 00:01:30.223
And that is a ++ and a --.

20
00:01:30.223 --> 00:01:35.680
So the ++ means increment
that variable by one.

21
00:01:35.680 --> 00:01:39.385
The -- is decremented by one, so.

22
00:01:45.828 --> 00:01:49.347
&gt;&gt; Nina Zakharenko: I can do x = x + 1.

23
00:01:49.347 --> 00:01:54.690
But a shorthand for that is x++.

24
00:01:54.690 --> 00:01:58.500
Same with minus, x = x- 1.

25
00:01:58.500 --> 00:02:00.370
The shorthand for that is x--.

26
00:02:02.100 --> 00:02:05.080
And adding and subtracting one
is such a common operation that

27
00:02:05.080 --> 00:02:06.950
you'll see those pretty
much all over the place.

28
00:02:10.450 --> 00:02:16.086
So sometimes we wanna compare two values
and JavaScript provides these comparisons.

29
00:02:16.086 --> 00:02:21.160
There's the ==, which is equal to, and

30
00:02:21.160 --> 00:02:24.535
the ===,
which means equal in value and type.

31
00:02:24.535 --> 00:02:27.282
!= is not equal to.

32
00:02:27.282 --> 00:02:33.320
!== is not equal in value or type.

33
00:02:33.320 --> 00:02:37.460
And let me go over that really
quick because it's important.

34
00:02:37.460 --> 00:02:42.500
You really won't see a triple
equals in any other language.

35
00:02:44.380 --> 00:02:51.890
So, let's do this, let's say we have
a variable called strX, just 5.

36
00:02:51.890 --> 00:02:58.200
We'll make another variable called numX,
which is number 5.

37
00:02:58.200 --> 00:03:06.740
If we do strX == numX.

38
00:03:06.740 --> 00:03:07.870
We'll get true.

39
00:03:07.870 --> 00:03:11.140
Which is like, hey weird, what's going on.

40
00:03:11.140 --> 00:03:12.480
They're not really equal.

41
00:03:13.860 --> 00:03:17.840
So JavaScript has this
triple equals which is like

42
00:03:19.650 --> 00:03:23.670
are the variables equal in both number and
type.

43
00:03:23.670 --> 00:03:30.010
So if they were both
strings would they match.

44
00:03:30.010 --> 00:03:31.439
Same with

45
00:03:40.591 --> 00:03:41.588
&gt;&gt; Nina Zakharenko: Sorry,

46
00:03:41.588 --> 00:03:44.297
same with not equals.

47
00:03:44.297 --> 00:03:49.650
So we can do x != y, which is true.

48
00:03:50.750 --> 00:03:57.510
They're not the same,
which is the inverse of x == y.

49
00:03:57.510 --> 00:04:01.620
There's also greater than, less than,
greater than or equal to, and less than or

50
00:04:01.620 --> 00:04:06.710
equal to, which is useful for
mathematical operations.

51
00:04:06.710 --> 00:04:09.440
So we can ask JavaScript is 3 &lt; 5.

52
00:04:09.440 --> 00:04:12.200
We'll say yeah, duh, of course, right?

53
00:04:14.390 --> 00:04:20.050
We can do greater &gt;=, etc etc.

54
00:04:20.050 --> 00:04:24.260
And the result of all these
operations are Boolean values.

55
00:04:24.260 --> 00:04:26.139
So it's either true or it's false.

56
00:04:28.580 --> 00:04:30.510
&gt;&gt; Student 1: This is a question
back on the operators.

57
00:04:30.510 --> 00:04:31.710
&gt;&gt; Nina Zakharenko: Yes.

58
00:04:31.710 --> 00:04:34.100
&gt;&gt; Student 1: Do they do anything
on other types besides numbers?

59
00:04:37.280 --> 00:04:40.550
So I think strings that
if you concatenate them.

60
00:04:43.430 --> 00:04:45.380
&gt;&gt; Nina Zakharenko: If
you concatenate strings?

61
00:04:45.380 --> 00:04:47.380
&gt;&gt; Student 1: Yeah,
can you use the plus operator?

62
00:04:47.380 --> 00:04:48.260
&gt;&gt; Nina Zakharenko: Yeah.

63
00:04:48.260 --> 00:04:49.160
&gt;&gt; Student 1: What if
they do another types?

64
00:04:49.160 --> 00:04:53.160
What's the question anyway?

65
00:04:54.390 --> 00:04:57.712
&gt;&gt; Nina Zakharenko: So what they do for
number is it's just adding them.

66
00:04:57.712 --> 00:05:02.870
What they do for functions I think is kind
of outside of this scope of this class.

67
00:05:04.355 --> 00:05:07.049
&gt;&gt; Nina Zakharenko: Yeah.

68
00:05:07.049 --> 00:05:11.730
Let's find out.

69
00:05:11.730 --> 00:05:14.273
&gt;&gt; Student 2: Actually,
I think it will call two string function.

70
00:05:19.073 --> 00:05:22.280
&gt;&gt; Nina Zakharenko: Actually, I'll do
this demo when we talk about functions.

71
00:05:22.280 --> 00:05:24.040
I'm getting a little bit ahead of myself.

72
00:05:25.720 --> 00:05:29.130
&gt;&gt; Student 2: Nothing useful,
I guess you answer that question.

73
00:05:29.130 --> 00:05:32.200
&gt;&gt; Nina Zakharenko: I'm not sure what
happens if you call less than on a string,

74
00:05:32.200 --> 00:05:36.080
am I error out or not.

75
00:05:36.080 --> 00:05:41.200
And guessing this might be alphabetical.

76
00:05:43.680 --> 00:05:46.800
Yeah, so that checks for order.

77
00:05:48.250 --> 00:05:51.090
Does that make sense?

78
00:05:51.090 --> 00:05:54.730
&gt;&gt; Student 2: So, the answer is that,
depending on what the types are, it may or

79
00:05:54.730 --> 00:05:56.220
may not do something useful.

80
00:05:56.220 --> 00:05:59.860
&gt;&gt; Nina Zakharenko: Yes, yeah.

81
00:05:59.860 --> 00:06:03.050
&gt;&gt; Student 2: So, for example,
multiplication of two strings

82
00:06:03.050 --> 00:06:06.390
probably doesn't do anything useful,
or is it a syntax error?

83
00:06:06.390 --> 00:06:07.130
I guess that was really.

84
00:06:07.130 --> 00:06:10.130
&gt;&gt; Student 1: I think it
returns not a number.

85
00:06:10.130 --> 00:06:12.660
&gt;&gt; Student 2: Okay, so it is an error.

86
00:06:14.880 --> 00:06:16.060
&gt;&gt; Student 3: That's not
gonna stop your program.

87
00:06:17.090 --> 00:06:20.238
NaN stands for not a number,
which is essentially just that,

88
00:06:20.238 --> 00:06:23.900
[INAUDIBLE] nothing useful.

89
00:06:23.900 --> 00:06:25.610
&gt;&gt; Nina Zakharenko: The fun
part about JavaScript is like,

90
00:06:25.610 --> 00:06:29.070
it does have this loose typing, so
you don't have to say if something

91
00:06:29.070 --> 00:06:32.250
is a number or a string,
which makes things easier.

92
00:06:32.250 --> 00:06:36.770
But then the downside is
sometimes when things are out,

93
00:06:36.770 --> 00:06:41.890
they can be hard to find because unlike a
compiled language, there's no complaining.

94
00:06:41.890 --> 00:06:47.530
JavaScript is just like yeah whatever
I'll do all this stuff you told me to do.

95
00:06:47.530 --> 00:06:52.780
So definitely something to be mindful of.

96
00:06:54.250 --> 00:06:59.610
So here we have quality comparison
we already went over this.

