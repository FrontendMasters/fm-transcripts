WEBVTT

1
00:00:00.330 --> 00:00:05.134
&gt;&gt; Kyle Simpson: Okay, let's add
a function that can start caching these.

2
00:00:15.203 --> 00:00:18.799
&gt;&gt; Kyle Simpson: We'll call
it cacheLoggedOutFiles.

3
00:00:19.870 --> 00:00:24.394
And for reasons that aren't clear now but
will be later,

4
00:00:24.394 --> 00:00:28.727
we're gonna want to be able
to tell it to force reload,

5
00:00:28.727 --> 00:00:31.476
but we'll default that to false.

6
00:00:41.093 --> 00:00:43.430
&gt;&gt; Kyle Simpson: And
then we need to open up our cache.

7
00:00:43.430 --> 00:00:48.109
And the way we're gonna do
that is to say cache = await

8
00:00:48.109 --> 00:00:55.780
caches.match(cacheName).

9
00:00:55.780 --> 00:00:58.440
CacheName is that string
that we created at the top,

10
00:00:58.440 --> 00:01:03.210
we're gonna say open up that cache entry,
that's an asynchronous operation,

11
00:01:03.210 --> 00:01:07.930
but open up that cache entry up so
that I can start pushing stuff into it.

12
00:01:07.930 --> 00:01:12.440
All right, we want for this cache

13
00:01:12.440 --> 00:01:17.434
logged out files function to wait for

14
00:01:17.434 --> 00:01:20.666
all of these to finish.

15
00:01:20.666 --> 00:01:22.287
So we're gonna do a Promise.all,

16
00:01:22.287 --> 00:01:24.669
similar to how we did before
in that other function.

17
00:01:24.669 --> 00:01:27.504
We're gonna do a Promise.all and

18
00:01:27.504 --> 00:01:32.404
what we're gonna do is take
the urlsToCache.loggedout.

19
00:01:32.404 --> 00:01:38.175
We're going to turn all of those URL into
promises by calling .map on that array.

20
00:02:00.554 --> 00:02:03.105
&gt;&gt; Kyle Simpson: Maybe I'll
rename that to requestFile.

21
00:02:05.215 --> 00:02:11.661
Okay, now we want to wrap
this code in a try catch.

22
00:02:11.661 --> 00:02:17.261
Because it is possible that we're gonna be
trying this while the network is down or

23
00:02:17.261 --> 00:02:22.386
there's some other kind of network
error and we don't want this to crash.

24
00:02:27.259 --> 00:02:31.439
&gt;&gt; Kyle Simpson: So,
if we have not asked to do a force reload,

25
00:02:31.439 --> 00:02:37.930
then we should not unnecessarily
cache these logged out files again.

26
00:02:39.100 --> 00:02:43.290
So in some cases we wanna forcibly ask for
all of them.

27
00:02:43.290 --> 00:02:48.730
In other cases, we only just want to check
if there are any that aren't cached, okay?

28
00:02:48.730 --> 00:02:53.490
It's at least theoretically possible
that our cache got emptied partially or

29
00:02:53.490 --> 00:02:56.810
it didn't finish because their
browser crashed or whatever.

30
00:02:56.810 --> 00:03:01.962
So in some cases we want to check so
we're gonna say if not forceReload,

31
00:03:01.962 --> 00:03:06.640
then we wanna first check the cache
to see if it's already there.

32
00:03:06.640 --> 00:03:10.420
So I'm gonna say res is
equal to await cache.

33
00:03:10.420 --> 00:03:12.475
Remember, cache is the thing
that we've opened.

34
00:03:12.475 --> 00:03:15.630
Cache.match.

35
00:03:15.630 --> 00:03:19.770
And the thing that I'm gonna
match against is the URL.

36
00:03:19.770 --> 00:03:23.680
So that's why those URLs matter because
that's the key in the cache that

37
00:03:23.680 --> 00:03:24.180
we're using.

38
00:03:26.520 --> 00:03:32.459
And if we were able to successfully
pull something from the cache,

39
00:03:32.459 --> 00:03:39.144
then let's just,
&gt;&gt; Kyle Simpson: Return.

40
00:03:43.857 --> 00:03:44.979
&gt;&gt; Kyle Simpson: So in other words,

41
00:03:44.979 --> 00:03:49.610
we're not gonna make a request here
unless we're either in a force reload, or

42
00:03:49.610 --> 00:03:53.770
we weren't in a force reload,
but it wasn't in the cache.

43
00:03:53.770 --> 00:03:57.500
In either of those cases,
we wouldn't make the request.

44
00:03:57.500 --> 00:04:01.392
But here we're going to make a request.

45
00:04:01.392 --> 00:04:03.646
Here's where we're gonna start doing Ajax.

46
00:04:03.646 --> 00:04:06.910
So we're gonna use the same method
that some of you are familiar with in

47
00:04:06.910 --> 00:04:08.170
the browser.

48
00:04:08.170 --> 00:04:10.539
Using the fetch method to do Ajax,

49
00:04:10.539 --> 00:04:16.228
I'm gonna set up an options object
&gt;&gt; Kyle Simpson: These

50
00:04:16.228 --> 00:04:19.598
are all going to be requested with "GET".

51
00:04:25.647 --> 00:04:28.877
&gt;&gt; Kyle Simpson: Credentials is the
cookies, and because these are all logged

52
00:04:28.877 --> 00:04:33.159
out resources they don't need the cookies,
so we want to make sure to strip off any

53
00:04:33.159 --> 00:04:36.784
credentials that might mess around or
give us a different response.

54
00:04:39.549 --> 00:04:40.771
&gt;&gt; Kyle Simpson: So we're gonna say omit.

55
00:04:43.585 --> 00:04:45.047
&gt;&gt; Kyle Simpson: And then in addition, and

56
00:04:45.047 --> 00:04:49.571
this is gonna sound a little bit strange
since our whole purpose is to do caching,

57
00:04:49.571 --> 00:04:53.310
but we actually want to send
the caching header that says no cache.

58
00:04:55.490 --> 00:04:58.310
The reason for that is that we
wanna tell the browser layer,

59
00:04:58.310 --> 00:05:01.730
remember we're in the service worker,
we wanna tell the browser layer,

60
00:05:01.730 --> 00:05:08.040
don't store this response in your
intermediary cache, we want fresh results.

61
00:05:08.040 --> 00:05:11.730
If we're making an Ajax request,
we really want it from the server.

62
00:05:11.730 --> 00:05:16.190
If you don’t do this, it may just start
feeding your service worker from that

63
00:05:16.190 --> 00:05:19.990
intermediary browser cache, which then
sort of defeats the whole purpose of

64
00:05:19.990 --> 00:05:23.660
trying to have control over your caching.

65
00:05:23.660 --> 00:05:26.048
I don’t know why they don’t
make that the default,

66
00:05:26.048 --> 00:05:29.533
it seems to me you’d almost always want
that to be the default, but anyway.

67
00:05:35.809 --> 00:05:37.756
&gt;&gt; Kyle Simpson: So
now we're gonna make our fetch request.

68
00:05:41.713 --> 00:05:48.090
&gt;&gt; Kyle Simpson: We're gonna use the URL
and we're going to use our fetchOptions.

69
00:05:50.430 --> 00:05:53.120
What we get back is a response object, and

70
00:05:53.120 --> 00:05:55.100
we need to just check
if it was successful.

71
00:05:55.100 --> 00:05:57.565
So we can just say if res.ok.

72
00:06:00.945 --> 00:06:05.047
&gt;&gt; Kyle Simpson: And if it was successful,
this is the most critical part

73
00:06:05.047 --> 00:06:09.237
of everything we're doing here,
if it was successful,

74
00:06:09.237 --> 00:06:14.889
we want to do await cache.put
&gt;&gt; Kyle Simpson: And

75
00:06:14.889 --> 00:06:17.377
we're going to use the URL.

76
00:06:17.377 --> 00:06:22.053
And this is a really critical
detail that's super easy to miss,

77
00:06:22.053 --> 00:06:26.310
you cannot simply put a response
normally into the cache.

78
00:06:27.460 --> 00:06:31.319
You normally need to put a clone
of the response into the cache.

79
00:06:33.916 --> 00:06:37.900
&gt;&gt; Kyle Simpson: In this particular case,
we don't need a clone.

80
00:06:37.900 --> 00:06:40.720
But let me explain why
we don't need a clone.

81
00:06:40.720 --> 00:06:45.070
There's a little nuance here that
a response can only ever be used for

82
00:06:45.070 --> 00:06:48.320
one purpose, like for a purpose once.

83
00:06:48.320 --> 00:06:52.940
So if you're gonna cache something,
and also return it to the browser

84
00:06:52.940 --> 00:06:56.740
at the same time, you have to clone
the thing you put in the cache and

85
00:06:56.740 --> 00:06:59.170
then return the original response.

86
00:06:59.170 --> 00:07:03.680
If you don't, you get these weird errors
about the headers already being closed, or

87
00:07:03.680 --> 00:07:05.080
something dumb like that.

88
00:07:05.080 --> 00:07:08.973
So it's usually a really good idea,
if you're sticking something in a cache,

89
00:07:08.973 --> 00:07:10.785
just stick the clone into the cache.

90
00:07:10.785 --> 00:07:14.260
In this particular case we're
making requests of our own.

91
00:07:14.260 --> 00:07:16.600
There was no request from the browser for
that.

92
00:07:16.600 --> 00:07:18.320
So we don't actually need to clone here.

93
00:07:18.320 --> 00:07:21.690
But just keep in mind when
you're doing cache.put,

94
00:07:21.690 --> 00:07:24.300
you're almost always gonna wanna
do a clone on that response.

95
00:07:28.280 --> 00:07:32.900
And if we weren't successful, then we just
sort of shrug our shoulders and say, well,

96
00:07:32.900 --> 00:07:35.850
I guess we weren't able
to cache that resource.

97
00:07:35.850 --> 00:07:39.277
So this is gonna end up sticking
stuff into our cache for us.

