WEBVTT

1
00:00:00.250 --> 00:00:04.755
&gt;&gt; Kyle Simpson: To restrict our requests,
to make sure we're only

2
00:00:04.755 --> 00:00:09.382
gonna deal routing with
requests to our own server.

3
00:00:09.382 --> 00:00:13.850
We're gonna look at the origin
property of these URLs.

4
00:00:13.850 --> 00:00:21.961
So we're gonna say if
url.origin = location.origin.

5
00:00:24.570 --> 00:00:29.324
Location, of course,
is the location of our web page.

6
00:00:29.324 --> 00:00:33.107
So we're basically saying if these
are at the same server, like HTTPS,

7
00:00:33.107 --> 00:00:35.229
whatever server, port, or whatever.

8
00:00:35.229 --> 00:00:38.420
If the origins are the same,
we're gonna handle the request.

9
00:00:38.420 --> 00:00:45.760
And I'm just gonna put down here
TODO: figure out CORS requests, okay?

10
00:00:45.760 --> 00:00:47.504
Cuz you might wanna make them, and

11
00:00:47.504 --> 00:00:51.670
then require that you are loading them
from places that have CORS headers.

12
00:00:51.670 --> 00:00:55.655
Or you might wanna not, so
that you're able to cache them, or

13
00:00:55.655 --> 00:00:59.348
you might wanna do them opaquely and
then not cache them.

14
00:00:59.348 --> 00:01:02.030
Or you might wanna have fallback strategy,
or somewhere in between.

15
00:01:03.360 --> 00:01:05.601
All right, so for our purposes then,

16
00:01:05.601 --> 00:01:09.818
we wanna start making decisions about
the kinds of things that come in.

17
00:01:09.818 --> 00:01:11.570
Now, to just start out,

18
00:01:11.570 --> 00:01:15.900
there are different strategies
that you wanna think about.

19
00:01:15.900 --> 00:01:18.925
And as we evolve this,
we're gonna have a different strategy for

20
00:01:18.925 --> 00:01:20.032
each kind of resource.

21
00:01:20.032 --> 00:01:25.628
But think about what you might want
to do with a an outbound request.

22
00:01:25.628 --> 00:01:30.360
You might want to first try
to load it from the server.

23
00:01:31.840 --> 00:01:37.110
And then if it comes back from the server
successfully, use that response.

24
00:01:37.110 --> 00:01:40.859
That's one strategy, and
then you're not using the cache at all.

25
00:01:40.859 --> 00:01:43.992
So there might be some resources that you
deliberately say I'm never gonna put them

26
00:01:43.992 --> 00:01:46.410
in cache,
I always wanna try from the server.

27
00:01:46.410 --> 00:01:48.830
You might wanna request
it from the server.

28
00:01:48.830 --> 00:01:52.030
If it succeeds,
you might wanna proactively cache it.

29
00:01:52.030 --> 00:01:57.500
So it might not have been one of the ones
that cache is a logged out file,

30
00:01:57.500 --> 00:01:58.870
like we did before.

31
00:01:58.870 --> 00:02:03.850
But it might be one of those
resources that you're requesting that

32
00:02:03.850 --> 00:02:07.640
you do want to cache, so
that you can provide.

33
00:02:07.640 --> 00:02:12.060
You might wanna check the cache first
before making the request to the server.

34
00:02:12.060 --> 00:02:15.640
So there's some resource requests,
which you would prefer to get

35
00:02:15.640 --> 00:02:20.960
the cached version of it, and only make
a request to the server if you don't.

36
00:02:20.960 --> 00:02:24.070
So here's an example where
those strategies differ.

37
00:02:25.420 --> 00:02:30.130
You may be wanting to use
a service worker, sort of as a way

38
00:02:30.130 --> 00:02:35.560
to reduce bandwidth load on your servers.

39
00:02:35.560 --> 00:02:40.409
You may be wanting to say we get
40 terabytes of traffic a week

40
00:02:40.409 --> 00:02:44.520
from people re-downloading
all these resources.

41
00:02:44.520 --> 00:02:47.056
And in part,
we don't change stuff very often.

42
00:02:47.056 --> 00:02:50.340
But in part, it's because there's so
much volatility in browser caches.

43
00:02:50.340 --> 00:02:54.460
And we might predict that we
could cut that down by 20%,

44
00:02:54.460 --> 00:02:59.680
just by having a more aggressive
service worker, caching strategy

45
00:02:59.680 --> 00:03:04.320
that forces this stuff to stay there until
we're really sure that it needs to update.

46
00:03:04.320 --> 00:03:07.670
That's an entirely valid usage for
a service worker.

47
00:03:09.700 --> 00:03:13.220
If that's the case, if you're trying to
avoid that sort of stuff, then you may

48
00:03:13.220 --> 00:03:18.860
want the strategy more to be check the
cache first, and if it's there, use it.

49
00:03:18.860 --> 00:03:23.860
And then allow an updated service
worker to clear out caches.

50
00:03:23.860 --> 00:03:28.050
There may be some kinds of resources
that you wanna check the cache, and

51
00:03:28.050 --> 00:03:29.720
serve it right away.

52
00:03:29.720 --> 00:03:32.850
And then also make a request
to the server, and

53
00:03:32.850 --> 00:03:37.480
then if it comes back, and it's different,
then tell the user now it's been updated.

54
00:03:37.480 --> 00:03:39.820
So you can see there's a lot
of different strategies for

55
00:03:39.820 --> 00:03:44.020
how we might wanna handle
live requests versus caching.

56
00:03:44.020 --> 00:03:48.510
You may want to try the server
only if you're online.

57
00:03:48.510 --> 00:03:51.528
Remember, we've now taken care
of we know if we're online.

58
00:03:51.528 --> 00:03:55.380
You might wanna try the server only if
you're online, because if you're offline,

59
00:03:55.380 --> 00:03:57.530
trying the server is gonna fail.

60
00:03:57.530 --> 00:04:01.890
But if you're offline,
you might wanna try the cache.

61
00:04:01.890 --> 00:04:06.355
And if the cache fails, and
you're offline, what do you do?

62
00:04:06.355 --> 00:04:08.800
Do you give them a 404?

63
00:04:10.280 --> 00:04:13.990
That particular question is the reason
why I included an offline page.

64
00:04:13.990 --> 00:04:19.880
If you open up, if you take a look at
the offline.html page that I provided,

65
00:04:19.880 --> 00:04:24.170
in our particular case, literally, all it
says is it looks like you're offline, and

66
00:04:24.170 --> 00:04:26.370
the page you requested couldn't be loaded.

67
00:04:26.370 --> 00:04:28.350
Please try again once you're back online.

68
00:04:28.350 --> 00:04:32.050
So I'm trying to provide a friendly notice
to the user that they tried to access

69
00:04:32.050 --> 00:04:36.160
something, which I didn't have in cache,
and I couldn't get from the server.

70
00:04:36.160 --> 00:04:40.430
But instead of giving them the browser
404 page, I tried to friendly say, hey,

71
00:04:40.430 --> 00:04:43.830
you're offline, and I don't know
whether that's available or not.

72
00:04:43.830 --> 00:04:47.546
If you're online, and it's not available,
I give you a friendly 404.

73
00:04:47.546 --> 00:04:50.753
But if you're offline and it's not
available, and it's not in the cache,

74
00:04:50.753 --> 00:04:51.920
we need a different thing.

75
00:04:51.920 --> 00:04:55.180
We only get 404, we wanna say I
don't know if it's available or not,

76
00:04:55.180 --> 00:04:56.920
I just can't access it now.

77
00:04:56.920 --> 00:05:00.766
There's a ton of nuance
variations to these strategies.

78
00:05:00.766 --> 00:05:04.290
And whatever one I've picked here is
not necessarily what you wanna do.

79
00:05:04.290 --> 00:05:08.150
So I'm really trying to teach
you to think like a fisherman,

80
00:05:08.150 --> 00:05:10.060
rather than just give you these fish,
okay?

