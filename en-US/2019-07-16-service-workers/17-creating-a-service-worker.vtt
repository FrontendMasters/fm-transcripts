WEBVTT

1
00:00:00.039 --> 00:00:04.385
&gt;&gt; Kyle Simpson: All right, so let's
actually take a look at a service worker,

2
00:00:04.385 --> 00:00:07.177
let's start to write a service worker.

3
00:00:07.177 --> 00:00:12.850
We need to understand a little bit
more about that life cycle thing,

4
00:00:12.850 --> 00:00:18.432
because we're gonna store some
variables in our service worker.

5
00:00:18.432 --> 00:00:22.681
But we need to understand,
when does this service worker live?

6
00:00:22.681 --> 00:00:26.964
Well, as soon as we called register and
it loaded up into the browser,

7
00:00:26.964 --> 00:00:29.009
it starts and runs this program.

8
00:00:29.009 --> 00:00:32.316
So it runs through it, but
it may not have, it definitely has not,

9
00:00:32.316 --> 00:00:36.490
finished all of its installation,
activation, all that other stuff.

10
00:00:36.490 --> 00:00:40.910
So it's gonna stay running for
the entirety of the time your page is up.

11
00:00:40.910 --> 00:00:44.980
I don't know of any scenario where
a browser kills the service worker

12
00:00:44.980 --> 00:00:46.950
while somebody's actually on the page.

13
00:00:46.950 --> 00:00:49.610
It keeps it alive while
they're on the page.

14
00:00:49.610 --> 00:00:54.200
If they go away from the page,
it still might be alive for up to 5 or 10,

15
00:00:54.200 --> 00:00:56.375
maybe 30 seconds at most.

16
00:00:56.375 --> 00:00:59.366
If it was doing something,
it may stay alive for a little while.

17
00:00:59.366 --> 00:01:02.517
This is very opaque, the browsers
don't let us control any of that.

18
00:01:02.517 --> 00:01:05.908
They manage the life cycle, but
it's gonna stay alive for awhile.

19
00:01:05.908 --> 00:01:09.896
But it's entirely possible that
somebody may have had your tab open and

20
00:01:09.896 --> 00:01:11.236
everything was alive.

21
00:01:11.236 --> 00:01:14.188
And then that went to a background tab,
and

22
00:01:14.188 --> 00:01:19.357
they haven't had your page open for
weeks, right, or days or even hours.

23
00:01:19.357 --> 00:01:23.779
It's entirely possible that the service
worker may have been killed over

24
00:01:23.779 --> 00:01:27.997
a prolonged period of inactivity
while the tab was in the background.

25
00:01:27.997 --> 00:01:30.530
The browser says,
I don't need any of that.

26
00:01:30.530 --> 00:01:35.671
And so when the browser detects that your
page has come back to life, it's now being

27
00:01:35.671 --> 00:01:40.680
used, if the service worker is not
currently running, it's gonna restart it.

28
00:01:42.130 --> 00:01:44.870
Now what's important to understand
here is, it restarts it, but

29
00:01:44.870 --> 00:01:48.850
it doesn't rerun it through
the installation and activation phase.

30
00:01:48.850 --> 00:01:54.831
It just restarts the code that we write in
the global scope of our service worker.

31
00:01:54.831 --> 00:01:58.160
That code runs at first installation, and

32
00:01:58.160 --> 00:02:03.345
it also runs at restart if the service
worker has ever been killed.

33
00:02:03.345 --> 00:02:06.482
And we'll see actually in the developer
tools how we can stop and

34
00:02:06.482 --> 00:02:07.829
start our service worker.

35
00:02:07.829 --> 00:02:12.519
But we need to be mindful of any stuff
that we put into our service worker in our

36
00:02:12.519 --> 00:02:14.460
state of our global scope.

37
00:02:14.460 --> 00:02:16.292
It's not really very permanent,

38
00:02:16.292 --> 00:02:19.270
it's there the whole time
the service worker is alive.

39
00:02:19.270 --> 00:02:22.806
But it's entirely possible our service
worker dies and comes back to life, and

40
00:02:22.806 --> 00:02:24.671
then all that stuff gets reinitialized.

41
00:02:24.671 --> 00:02:28.660
So be careful what you do in
the global scope, essentially.

42
00:02:33.642 --> 00:02:37.026
&gt;&gt; Kyle Simpson: So one thing that we
definitely want to store for now is,

43
00:02:37.026 --> 00:02:41.499
we wanna set up a version variable,
and I'm gonna start it at version 1.

44
00:02:44.888 --> 00:02:46.631
&gt;&gt; Kyle Simpson: Essentially,
this is a constant,

45
00:02:46.631 --> 00:02:49.544
this isn't gonna change
throughout the lifetime of this.

46
00:02:49.544 --> 00:02:52.239
So if you wanna make it a constant,
that's fine,

47
00:02:52.239 --> 00:02:55.010
we're not gonna reassign
this version variable.

48
00:02:55.010 --> 00:02:59.925
But from each time we make a major
change to our application, to the logic,

49
00:02:59.925 --> 00:03:03.592
to any routing stuff that
our service worker's doing,

50
00:03:03.592 --> 00:03:07.320
we wanna make sure the service
worker gets updated.

51
00:03:07.320 --> 00:03:11.913
And a nice convenient way of making sure
that the browser knows to update it is to

52
00:03:11.913 --> 00:03:13.733
just bump the version number.

53
00:03:13.733 --> 00:03:18.170
Okay, some people like to do that with
a code comment instead of an actual

54
00:03:18.170 --> 00:03:18.915
variable.

55
00:03:18.915 --> 00:03:22.590
All you have to do is change one
byte somewhere in the file, and

56
00:03:22.590 --> 00:03:25.005
it'll get seen as a new service worker.

57
00:03:25.005 --> 00:03:29.035
One reason why you might wanna use
a version, which doesn't totally apply to

58
00:03:29.035 --> 00:03:33.448
what we're doing with this website, it
applies a little bit more to applications.

59
00:03:33.448 --> 00:03:40.193
Is the idea of treating the entire set
of resources as one atomic package.

60
00:03:40.193 --> 00:03:47.788
Meaning we don't want some updated
HTML files but some old HTML files.

61
00:03:47.788 --> 00:03:51.330
That's generally how I think of things,
even with a website.

62
00:03:51.330 --> 00:03:56.515
If I've made a change, I want everybody
to see the entire change on every page.

63
00:03:56.515 --> 00:04:00.906
But sometimes you have so much stuff that
it's okay that it's rolling out sort of

64
00:04:00.906 --> 00:04:03.900
progressively as somebody navigates along.

65
00:04:03.900 --> 00:04:08.270
The idea of having a version number that
you bump is a little bit more like that

66
00:04:08.270 --> 00:04:10.129
app where you bump the version.

67
00:04:10.129 --> 00:04:12.972
And when we start messing around
with caches in a little bit,

68
00:04:12.972 --> 00:04:15.438
it'll be like basically,
blow away the old cache.

69
00:04:15.438 --> 00:04:18.840
And refresh the cache with all
the new version of the stuff.

70
00:04:18.840 --> 00:04:22.730
So it's like everything is version 1,
and then everything is version 2.

71
00:04:22.730 --> 00:04:25.738
If that doesn't work for you,
if you have too many resources and

72
00:04:25.738 --> 00:04:29.317
you don't wanna do that update,
you may not track your versions like this.

73
00:04:29.317 --> 00:04:33.192
You may not name your
caches version specific.

74
00:04:33.192 --> 00:04:36.399
But even for a website,
the way I think about it is,

75
00:04:36.399 --> 00:04:38.424
I want everything to be in sync.

76
00:04:38.424 --> 00:04:42.364
So I'm still gonna sort of approach
it more like the app mindset.

77
00:04:42.364 --> 00:04:46.718
And I'm okay that somebody may end
up then spending a little bit of

78
00:04:46.718 --> 00:04:51.980
extra bandwidth to reload my site
anytime I've made a big code change.

79
00:04:51.980 --> 00:04:55.040
Certainly I wouldn't want them to have to
reload everything just because I added

80
00:04:55.040 --> 00:04:56.510
a blog post.

81
00:04:56.510 --> 00:04:58.580
But if I've redone a bunch of code or

82
00:04:58.580 --> 00:05:02.060
a bunch of CSS or something,
I want everything in sync.

83
00:05:03.120 --> 00:05:09.051
So that depends on how you see that,
how you wanna update that stuff.

84
00:05:09.051 --> 00:05:13.855
You can do it incrementally or sort of
all together, or somewhere in between.

85
00:05:13.855 --> 00:05:17.510
You have full control, you get to
write whatever code works for you.

86
00:05:17.510 --> 00:05:19.852
Okay, so we're gonna approach
it from that perspective.

87
00:05:19.852 --> 00:05:26.004
Each time we update the version,
we're gonna re-prime the cache,

88
00:05:26.004 --> 00:05:30.682
instead of kinda incrementally
getting the cache.

89
00:05:30.682 --> 00:05:35.022
Okay, so let's listen for some events,

90
00:05:35.022 --> 00:05:39.242
we wanna say self.addEventListener.

91
00:05:39.242 --> 00:05:44.231
And the first event that we
wanna listen for is install.

92
00:05:48.338 --> 00:05:49.570
&gt;&gt; Kyle Simpson: And then we'll listen for

93
00:05:49.570 --> 00:05:54.772
another event called,
&gt;&gt; Kyle Simpson: Activate.

94
00:06:15.951 --> 00:06:18.749
&gt;&gt; Kyle Simpson: So obviously we're
gonna need to define those functions.

95
00:06:18.749 --> 00:06:23.430
Before we do that, though,
I am gonna define a place for

96
00:06:23.430 --> 00:06:27.529
my initialization that I
want to run every time.

97
00:06:27.529 --> 00:06:30.291
And we'll talk in a little bit
as we unfold the service worker,

98
00:06:30.291 --> 00:06:33.660
we'll talk about what kinds of things
do we wanna initialize or not.

99
00:06:33.660 --> 00:06:38.057
But I'm in the old school C tradition,
I'm gonna collect everything into a main

100
00:06:38.057 --> 00:06:41.108
function, that is the stuff
that I want to have happen.

101
00:06:41.108 --> 00:06:45.422
And remember, this runs every time
the service worker is started,

102
00:06:45.422 --> 00:06:47.926
even if it's already been installed.

103
00:06:47.926 --> 00:06:51.719
Any time you run an asynchronous function,

104
00:06:51.719 --> 00:06:56.342
make sure to remember to catch and
log out any errors.

105
00:06:56.342 --> 00:06:59.006
Because any mistakes you
make will be silent and

106
00:06:59.006 --> 00:07:03.545
you'll be pulling your hair out for
hours and I've done that many, many times.

107
00:07:03.545 --> 00:07:07.861
Okay, so let's first define,
we'll make this an async function.

108
00:07:07.861 --> 00:07:11.497
We don't need it to be async now, but we
will later, so I'm just gonna go ahead and

109
00:07:11.497 --> 00:07:13.200
make it an async function.

110
00:07:13.200 --> 00:07:18.864
All we wanna do right now is
say that my service worker.

111
00:07:18.864 --> 00:07:22.658
And to make things a little bit saner for
us in our logging,

112
00:07:22.658 --> 00:07:25.640
I'm gonna drop in our version number.

113
00:07:25.640 --> 00:07:29.178
So that when we start updating versions,

114
00:07:29.178 --> 00:07:34.752
it's clear which version the console
messages are coming from.

115
00:07:34.752 --> 00:07:38.835
We'll say has started,
or maybe is starting.

116
00:07:47.669 --> 00:07:49.465
&gt;&gt; Kyle Simpson: You can have your
messages say whatever you want,

117
00:07:49.465 --> 00:07:50.548
I'm just giving you an idea.

118
00:07:50.548 --> 00:07:55.257
We're gonna watch this
life cycle play out, okay?

119
00:07:55.257 --> 00:08:00.420
Then we're gonna want an async
function called onInstall.

120
00:08:10.315 --> 00:08:12.734
&gt;&gt; Kyle Simpson: And
another one called onActivate.

121
00:08:15.440 --> 00:08:17.149
&gt;&gt; Kyle Simpson: And essentially,

122
00:08:17.149 --> 00:08:22.176
I'm gonna do those same
messages in all three of these.

123
00:08:22.176 --> 00:08:24.931
So that we can kind of see
the life cycle play out.

124
00:08:35.289 --> 00:08:39.020
&gt;&gt; Kyle Simpson: Since these are event
handlers, they're both gonna receive

125
00:08:39.020 --> 00:08:42.469
an event object,
which we're going to want to receive.

126
00:08:42.469 --> 00:08:45.666
For onInstall, we're not gonna
be using that one right now.

127
00:08:45.666 --> 00:08:49.846
But in the installation phase, this is
where I was talking a little bit earlier

128
00:08:49.846 --> 00:08:53.598
about the idea of, I've installed,
but I'm in this waiting phase.

129
00:08:53.598 --> 00:08:57.693
That's the default, immediately
after I've finished installing, and

130
00:08:57.693 --> 00:09:01.398
I've fired that install handler,
I'm now in this waiting phase.

131
00:09:01.398 --> 00:09:04.537
And what we want in our
particular use case is,

132
00:09:04.537 --> 00:09:08.254
we want our new service worker
to take over right away.

133
00:09:08.254 --> 00:09:10.792
So it has a chance to load
up all the new resources and

134
00:09:10.792 --> 00:09:13.400
get them in front of the user
as quickly as possible.

135
00:09:14.830 --> 00:09:18.810
It still might be the case, if you were
doing an app, this would be more true.

136
00:09:18.810 --> 00:09:23.346
It still might be the case that
the user is physically seeing the old

137
00:09:23.346 --> 00:09:25.371
versions of all these files.

138
00:09:25.371 --> 00:09:28.375
Because this might be
a new service worker and

139
00:09:28.375 --> 00:09:31.703
it's all the old content
that's still showing.

140
00:09:31.703 --> 00:09:35.147
But that's when you then
have the option to, for

141
00:09:35.147 --> 00:09:39.349
example, either wait until
the next refresh or page load.

142
00:09:39.349 --> 00:09:43.484
Or you could proactively message to
the user, hey, things have updated,

143
00:09:43.484 --> 00:09:46.121
if you wanna get the new stuff,
click refresh.

144
00:09:46.121 --> 00:09:52.419
Or I guess if you really wanted to, you
could just forcibly refresh it for them.

145
00:09:52.419 --> 00:09:56.935
So it depends on your scenario,
what user experience works best for you.

146
00:09:56.935 --> 00:10:00.670
But to skip the waiting phase,
you're gonna call self.skipWaiting.

