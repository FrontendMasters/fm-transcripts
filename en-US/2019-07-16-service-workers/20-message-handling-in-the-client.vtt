WEBVTT

1
00:00:00.040 --> 00:00:02.960
&gt;&gt; Kyle Simpson: We now have
a working service worker, and

2
00:00:02.960 --> 00:00:04.720
we wanna start doing
something useful with it.

3
00:00:04.720 --> 00:00:08.836
And one of the things that we're gonna
need right off the bat is the ability to

4
00:00:08.836 --> 00:00:11.925
communicate with our service
worker through messages,

5
00:00:11.925 --> 00:00:15.352
similar to how we communicated
from the web worker to the page.

6
00:00:15.352 --> 00:00:18.669
Now, when we did web workers
in the earlier exercise,

7
00:00:18.669 --> 00:00:21.004
that was a dedicated web worker.

8
00:00:21.004 --> 00:00:24.590
And so
all we had to do was self.postMessage,

9
00:00:24.590 --> 00:00:28.380
because there's only one page that
that worker could be attached to.

10
00:00:28.380 --> 00:00:31.180
Because the service worker might
be controlling multiple pages,

11
00:00:31.180 --> 00:00:35.150
it's a little slightly more
complicated to do the messaging, and

12
00:00:35.150 --> 00:00:37.380
we're gonna walk through that.

13
00:00:37.380 --> 00:00:40.260
So the first thing that we're gonna do is

14
00:00:40.260 --> 00:00:44.280
write a function to send a message
to our service worker from the page.

15
00:00:44.280 --> 00:00:51.351
We're in blog JS, and we're gonna
write a function called sendSWMessage.

16
00:00:53.686 --> 00:00:56.100
And I'm gonna pass it a target,

17
00:00:56.100 --> 00:01:01.740
which is an optional thing, and we'll
see a little bit later why we have that.

18
00:01:01.740 --> 00:01:07.770
So if the target's been specified, then
we wanna say target.postMessage, sorry.

19
00:01:07.770 --> 00:01:13.582
We also need the message here,
message and target, postMessage(msg);.

20
00:01:16.549 --> 00:01:20.168
&gt;&gt; Kyle Simpson: Otherwise,
if the (svcworker) has been set,

21
00:01:20.168 --> 00:01:21.940
then we wanna use that.

22
00:01:34.138 --> 00:01:37.725
&gt;&gt; Kyle Simpson: And finally,
if neither one of those has been provided,

23
00:01:37.725 --> 00:01:39.903
which shouldn't really happen.

24
00:01:39.903 --> 00:01:45.639
But this is just sort of a fallback
in case, then we wanna call

25
00:01:45.639 --> 00:01:52.394
navigator.serviceWorker.controller.postMe-
ssage(msg);.

26
00:01:54.588 --> 00:01:57.505
&gt;&gt; Kyle Simpson: Okay,
now how do we listen for

27
00:01:57.505 --> 00:02:01.020
messages from the service worker?

28
00:02:01.020 --> 00:02:03.986
We know how to send to it, but
how do we listen to messages from it?

29
00:02:03.986 --> 00:02:05.971
We're gonna

30
00:02:05.971 --> 00:02:14.396
say
navigator.serviceWorker.controller.addEve-

31
00:02:14.396 --> 00:02:22.561
ntListener,
&gt;&gt; Kyle Simpson: ("message"),

32
00:02:22.561 --> 00:02:26.980
and onSWMessage,
is the function that we'll define.

33
00:02:29.400 --> 00:02:32.830
And actually,
it's take out the controller part.

34
00:02:32.830 --> 00:02:35.860
It's a
navigator.serviceWorker.AddEventListener.

35
00:02:39.200 --> 00:02:42.650
This one didn't end up needing to be
an async function, so I'll take that off.

36
00:02:42.650 --> 00:02:47.504
Let's define an onSWMessage function.

37
00:02:58.559 --> 00:03:03.249
&gt;&gt; Kyle Simpson: So I'm going to
de-structure the event object that's

38
00:03:03.249 --> 00:03:08.646
coming in, because I know it's
gonna have data property on it.

39
00:03:10.603 --> 00:03:13.047
&gt;&gt; Kyle Simpson: But I'm also gonna
need the event object itself, and

40
00:03:13.047 --> 00:03:14.580
you'll see why in just a moment.

41
00:03:15.750 --> 00:03:20.650
So if the data object that I've
been set has a property on it

42
00:03:20.650 --> 00:03:25.862
called requestStatusUpdate,
that's not a special thing.

43
00:03:25.862 --> 00:03:27.671
That's literally one that I'm making up.

44
00:03:27.671 --> 00:03:32.656
So we're gonna send a message from
the service worker to the page, and

45
00:03:32.656 --> 00:03:35.543
I wanna listen for that kind of message.

46
00:03:35.543 --> 00:03:39.979
So if that's what's been asked for,
so basically, the server is gonna ask

47
00:03:39.979 --> 00:03:43.809
the page hey page, can you please
give me an update on some stuff?

48
00:03:45.070 --> 00:03:47.880
What do we want for
the service worker to know about?

49
00:03:47.880 --> 00:03:50.650
Well, specifically,
when we say status update,

50
00:03:50.650 --> 00:03:54.370
we want the serviceWorker to know if
we're online, and if we're logged in.

51
00:03:55.590 --> 00:03:59.950
Now, the online part is actually
discoverable in the service worker,

52
00:03:59.950 --> 00:04:04.760
because navigator.online is
available in the service worker.

53
00:04:04.760 --> 00:04:10.400
But I have been unable to find any way
to get the events in the service worker,

54
00:04:10.400 --> 00:04:12.320
the online, offline events.

55
00:04:12.320 --> 00:04:18.130
So my solution is have the page monitor
it, and tell the service worker, okay?

56
00:04:18.130 --> 00:04:24.020
And then for isLoggedIn,
this requires accessing cookies,

57
00:04:24.020 --> 00:04:27.980
and the service worker definitely
does not have access to cookies.

58
00:04:27.980 --> 00:04:31.450
So because we know there's at least some
status that the page knows about that

59
00:04:31.450 --> 00:04:37.650
a service worker can't, then we need to
know that information and pass it in.

60
00:04:37.650 --> 00:04:40.684
So when we say status update,
we mean tell me if you're online, and

61
00:04:40.684 --> 00:04:42.030
tell me if you're logged in.

62
00:04:42.030 --> 00:04:45.090
And the reason for that will become
clearer later when we do our routing.

63
00:04:45.090 --> 00:04:48.280
But there are different
things that we wanna do if

64
00:04:49.680 --> 00:04:53.590
somebody is online, versus not online,
and that kinda thing.

65
00:04:53.590 --> 00:04:57.470
We wanna handle certain failure conditions
differently, depending on those things.

66
00:04:59.610 --> 00:05:05.193
So we need to write

67
00:05:05.193 --> 00:05:10.777
a function to send

68
00:05:10.777 --> 00:05:18.234
those status updates.

69
00:05:27.899 --> 00:05:31.990
&gt;&gt; Kyle Simpson: And
that's gonna call our sendSWMessage.

70
00:05:31.990 --> 00:05:33.370
We'll send a message, and

71
00:05:33.370 --> 00:05:38.130
then we'll just pass along whatever
target's been specified, if any.

72
00:05:38.130 --> 00:05:43.670
So our message needs to have isOnline,
and isLoggedIn.

73
00:05:47.530 --> 00:05:50.460
So in our on service worker message,

74
00:05:50.460 --> 00:05:54.730
we received a request from the service
worker to give us that data.

75
00:05:54.730 --> 00:05:56.950
Why does the service
worker need to request?

76
00:05:56.950 --> 00:05:59.670
Well, because the service
worker might have been revived.

77
00:05:59.670 --> 00:06:02.400
So one of the things that we're gonna
do whenever the service worker starts

78
00:06:02.400 --> 00:06:03.870
the first time is we're gonna say,

79
00:06:03.870 --> 00:06:07.160
hey page,
tell me the status of these two things.

80
00:06:07.160 --> 00:06:09.070
Cuz it might have died, and
we might be coming back.

81
00:06:10.590 --> 00:06:13.626
Alternately, we could have been
storing this stuff in, say,

82
00:06:13.626 --> 00:06:15.013
something like IndexedDB.

83
00:06:15.013 --> 00:06:18.215
But it seems like we're gonna need to
communicate with the page anyways, so

84
00:06:18.215 --> 00:06:20.720
might as well just ask the page for
the status.

85
00:06:20.720 --> 00:06:24.170
So we're gonna say sendStatusUpdate.

86
00:06:25.430 --> 00:06:26.300
Before we do that,

87
00:06:26.300 --> 00:06:30.370
just for our debugging purposes,
I'm gonna put a console message here.

88
00:06:30.370 --> 00:06:35.155
Received [INAUDIBLE] back to quote,

89
00:06:35.155 --> 00:06:39.825
we're gonna say Received,

90
00:06:39.825 --> 00:06:43.112
&gt;&gt; Kyle Simpson: Status update request

91
00:06:43.112 --> 00:06:48.480
from service worker, responding.

92
00:06:49.880 --> 00:06:52.100
That's just for sanity checking.

93
00:06:52.100 --> 00:06:56.200
Okay, so we wanna send the status update,
and who do we wanna send it to?

94
00:06:56.200 --> 00:07:02.280
Well you might think, well, we should
definitely send it to the SVC worker.

95
00:07:02.280 --> 00:07:06.930
Well, it turns out, because there's
gonna be multiple places that we're

96
00:07:06.930 --> 00:07:10.676
communicating with, the service worker's
communicating with multiple pages.

97
00:07:10.676 --> 00:07:12.827
We're actually gonna,
in the service worker,

98
00:07:12.827 --> 00:07:16.090
end up using what's called a message
channel to make these connections.

99
00:07:16.090 --> 00:07:20.989
So it ends up creating a unique set
of ports that those communications

100
00:07:20.989 --> 00:07:22.260
can happen over.

101
00:07:22.260 --> 00:07:24.230
And we're talking about
local ports on the machines,

102
00:07:24.230 --> 00:07:26.640
since it's from page to service worker.

103
00:07:26.640 --> 00:07:29.452
So the message channel comes up
with a unique set of ports for

104
00:07:29.452 --> 00:07:30.980
that communication to happen.

105
00:07:30.980 --> 00:07:33.533
Which means we need to
send ours to that port,

106
00:07:33.533 --> 00:07:38.130
cuz the message channel figured that out,
we didn't figure that out.

107
00:07:38.130 --> 00:07:44.132
So the way we know what port is,
is with the event object,

108
00:07:44.132 --> 00:07:50.652
if it has been specified,
it's going to be evt.ports[0]

109
00:08:00.828 --> 00:08:03.293
&gt;&gt; Kyle Simpson: So evt.ports[0] is going

110
00:08:03.293 --> 00:08:06.747
to be the target that
we post a message to.

111
00:08:06.747 --> 00:08:08.571
It's not the service worker object,

112
00:08:08.571 --> 00:08:12.400
it's a specific message channel port
that the service worker is listening on.

113
00:08:13.800 --> 00:08:19.963
Let's do one other thing, which is
that when we pass in this message,

114
00:08:19.963 --> 00:08:24.566
let's actually give it one
wrapping object names.

115
00:08:24.566 --> 00:08:27.904
So we're gonna call this a statusUpdate,
you asked for a status update, so

116
00:08:27.904 --> 00:08:29.380
let's give you a status update.

117
00:08:30.750 --> 00:08:34.310
That'll make it easier for us to determine
in the service worker that this thing is,

118
00:08:34.310 --> 00:08:35.520
in fact, a status update.

119
00:08:37.750 --> 00:08:40.402
Okay, we're sending the status
update when requested.

120
00:08:40.402 --> 00:08:43.223
But there are other times
that we should go ahead and

121
00:08:43.223 --> 00:08:48.320
proactively send that status update, so
that the service worker stays in sync.

122
00:08:48.320 --> 00:08:51.780
So one of those times might be when
there was a controller change.

123
00:08:53.210 --> 00:08:58.936
So we can say sendStatusUpdate, and
we wanna target the service worker.

124
00:09:01.131 --> 00:09:04.475
&gt;&gt; Kyle Simpson: For that message, we
probably wanna do that right after we get

125
00:09:04.475 --> 00:09:06.727
the first reference to a service worker,

126
00:09:06.727 --> 00:09:10.804
just in case that we're able to get
that information into it that quickly.

127
00:09:14.581 --> 00:09:19.527
&gt;&gt; Kyle Simpson: But maybe for
our purposes, the most important place for

128
00:09:19.527 --> 00:09:25.210
us to do that update is in the online and
offline messages in here.

129
00:09:25.210 --> 00:09:27.034
We're not passing in any targets, so

130
00:09:27.034 --> 00:09:31.142
it's just gonna automatically pick the
currently active service workers in there.

