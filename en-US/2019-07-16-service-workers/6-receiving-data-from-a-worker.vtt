WEBVTT

1
00:00:00.090 --> 00:00:02.260
&gt;&gt; Kyle Simpson: Let's
try to get our Fibonacci

2
00:00:03.260 --> 00:00:05.270
thing to actually do something useful.

3
00:00:05.270 --> 00:00:10.290
Let's go to our worker, and let's say that

4
00:00:10.290 --> 00:00:16.900
when we receive the onMessage is when we
wanna start up our Fibonacci generation.

5
00:00:16.900 --> 00:00:19.600
So it won't even really
matter what the message is.

6
00:00:19.600 --> 00:00:23.871
But if we send a message,
the worker won't start automatically.

7
00:00:23.871 --> 00:00:26.336
But once we send a message it'll say okay,

8
00:00:26.336 --> 00:00:28.948
I know that that means
you want me to start up.

9
00:00:28.948 --> 00:00:34.538
So I'm gonna have another
function that I'll

10
00:00:34.538 --> 00:00:41.875
call getNextFibonacci and,
&gt;&gt; Kyle Simpson: This

11
00:00:41.875 --> 00:00:46.536
variable here is gonna
be updated as we ask for

12
00:00:46.536 --> 00:00:50.102
Fibonacci, so we're gonna say,

13
00:01:03.838 --> 00:01:07.462
&gt;&gt; Kyle Simpson: I don't know what to call
this yet, but I'll call it fibIdx that's

14
00:01:07.462 --> 00:01:11.550
gonna tell us that we need to do the next
one of those and then update it.

15
00:01:11.550 --> 00:01:18.827
And then we're gonna call, so we'll say,
&gt;&gt; Kyle Simpson: I'll

16
00:01:18.827 --> 00:01:24.065
probably rename these variables in
just a moment as we sketch this out,

17
00:01:24.065 --> 00:01:27.096
but we're gonna do currFib.

18
00:01:27.096 --> 00:01:30.000
&gt;&gt; Kyle Simpson: So this is a statement
that's gonna be a long running thing

19
00:01:30.000 --> 00:01:31.050
potentially.

20
00:01:31.050 --> 00:01:33.281
Once we get into those bigger numbers,

21
00:01:33.281 --> 00:01:36.400
this line 14 is gonna spin
off this recursive thing.

22
00:01:36.400 --> 00:01:39.200
And it's gonna be running for
seconds and seconds at a time.

23
00:01:39.200 --> 00:01:43.408
But once we get that back,
we want to then post a message

24
00:01:43.408 --> 00:01:47.903
to the page with the information
of what we've just done.

25
00:01:47.903 --> 00:01:54.090
So we wanna basically say,
actually so let's use fibIdx here.

26
00:01:54.090 --> 00:01:59.720
We want to send to the page, so
we're gonna do self.postMessage.

27
00:01:59.720 --> 00:02:04.972
And here I'm gonna send two pieces
of data, so I'll use an object,

28
00:02:04.972 --> 00:02:12.454
and I wanna say,
&gt;&gt; Kyle Simpson: The number

29
00:02:12.454 --> 00:02:14.234
is gonna be fibNum.

30
00:02:15.746 --> 00:02:20.063
&gt;&gt; Kyle Simpson: And then we'll call it,
I guess, idx is fibIdx.

31
00:02:22.452 --> 00:02:28.380
&gt;&gt; Kyle Simpson: So
we wanna send that message to the webpage.

32
00:02:28.380 --> 00:02:31.550
And we'll receive that message and
render it.

33
00:02:31.550 --> 00:02:37.140
But after we've generated one, then we
want to start generating the next one.

34
00:02:37.140 --> 00:02:44.315
So we wanna say getNextFib,
and we want to,

35
00:02:47.471 --> 00:02:53.163
&gt;&gt; Kyle Simpson: Update with fibIdx + 1.

36
00:02:56.828 --> 00:03:00.168
&gt;&gt; Kyle Simpson: So we could do this a
couple of ways, we could use this fibIdx,

37
00:03:00.168 --> 00:03:01.728
or we could just use curFib.

38
00:03:01.728 --> 00:03:04.488
So I think that's what we'll do,
we'll skip the fibIdx, and

39
00:03:04.488 --> 00:03:05.798
we'll just use curFib here.

40
00:03:10.696 --> 00:03:16.058
&gt;&gt; Kyle Simpson: Once we have done that,
we will update curFib to the next number,

41
00:03:16.058 --> 00:03:19.375
and then we'll call getNextFib again.

42
00:03:23.124 --> 00:03:27.282
&gt;&gt; Kyle Simpson: So the way we spin this
off is that when we receive a message,

43
00:03:27.282 --> 00:03:30.373
we'll call, I guess we gotta do that here.

44
00:03:33.275 --> 00:03:39.603
&gt;&gt; Kyle Simpson: We'll call,
&gt;&gt; Kyle Simpson: getNextFib().

45
00:03:47.948 --> 00:03:50.368
&gt;&gt; Kyle Simpson: By the way,
since this is calling it immediately,

46
00:03:50.368 --> 00:03:53.873
we're basically gonna be in a tight
loop where nothing can interrupt it.

47
00:03:53.873 --> 00:03:59.648
If we wanted to yield to allow a message
to come in, we could do a very simple

48
00:03:59.648 --> 00:04:06.680
sort of a yield back to the event loop by
saying start it up on the next event loop.

49
00:04:06.680 --> 00:04:08.232
So maybe we'll leave it like that for now.

50
00:04:08.232 --> 00:04:11.710
But we're not gonna take advantage of
the ability to send in a message, so

51
00:04:11.710 --> 00:04:13.610
it probably doesn't matter.

52
00:04:13.610 --> 00:04:15.370
So let's just check to make
sure this is gonna work.

53
00:04:15.370 --> 00:04:19.587
We're gonna say when we receive
the first message, we call getNextFib,

54
00:04:19.587 --> 00:04:22.160
which starts calculating fib of zero.

55
00:04:22.160 --> 00:04:25.700
Once it's done that,
it sends 0 and the num off, and

56
00:04:25.700 --> 00:04:29.210
then it updates this and
then it says hey, do it again.

57
00:04:30.390 --> 00:04:33.280
So that logic seems valid.

58
00:04:33.280 --> 00:04:39.120
Now back in the client webpage,
we need to take this part out.

59
00:04:40.880 --> 00:04:45.601
And it's going to be right
here in startFibs that we're

60
00:04:45.601 --> 00:04:48.620
gonna call worker.postMessage.

61
00:04:48.620 --> 00:04:51.290
And it doesn't really matter what we send,
but we've gotta send some thing.

62
00:04:51.290 --> 00:04:54.730
So I'm just gonna send
an object that says start true.

63
00:04:54.730 --> 00:04:58.450
Since we're not looking at that object,
it doesn't really matter.

64
00:04:58.450 --> 00:05:01.710
But that tells it hey, go ahead and
start, and I'm listening for messages,

65
00:05:01.710 --> 00:05:03.990
so I'll start rendering those.

66
00:05:03.990 --> 00:05:06.643
And then while we're at it, the stopFibs,

67
00:05:06.643 --> 00:05:09.739
the way we kill a worker
is to say worker terminate.

68
00:05:16.105 --> 00:05:18.252
&gt;&gt; Kyle Simpson: So
all that should be left for

69
00:05:18.252 --> 00:05:23.005
us to do is to pull off messages
from the worker and render them.

70
00:05:23.005 --> 00:05:27.165
Remember, event.data is gonna be this
object that we send that's got idx and

71
00:05:27.165 --> 00:05:27.740
num in it.

72
00:05:27.740 --> 00:05:34.574
So let's,
&gt;&gt; Kyle Simpson: I

73
00:05:34.574 --> 00:05:38.830
think I got the word num and
fib backwards, but that's okay.

74
00:05:38.830 --> 00:05:42.013
We're going to call renderFib.

75
00:05:44.201 --> 00:05:50.202
&gt;&gt; Kyle Simpson: And
we're gonna be using event.data.idx and

76
00:05:50.202 --> 00:05:54.856
event.data dot, did I call it num?

77
00:05:54.856 --> 00:05:58.649
Yeah, I called it num,
actually let's change that.

78
00:05:58.649 --> 00:06:02.129
In our worker, I'm going to change that
back to fib so that's not so confusing.

79
00:06:06.629 --> 00:06:10.210
&gt;&gt; Kyle Simpson: The property that we
send back and the message will be fib.

80
00:06:10.210 --> 00:06:14.900
So we'll say event.data.fib,
that should render that.

81
00:06:14.900 --> 00:06:21.800
And the render just adds this message
of those two values to our page.

82
00:06:21.800 --> 00:06:23.730
&gt;&gt; Speaker 1: Which
variables did you change?

83
00:06:23.730 --> 00:06:27.428
&gt;&gt; Kyle Simpson: I went over to my
web worker and the property name,

84
00:06:27.428 --> 00:06:30.519
instead of calling it num, I call it fib.

85
00:06:30.519 --> 00:06:34.135
Just cuz I didn't wanna confuse
myself on the other screen.

86
00:06:39.199 --> 00:06:40.363
&gt;&gt; Kyle Simpson: So here we have idx and

87
00:06:40.363 --> 00:06:43.805
fib are the two properties on
that object that we're pulling.

88
00:06:45.080 --> 00:06:50.470
Okay, so we've cleared our console,
let's restart the page.

89
00:06:51.620 --> 00:06:54.132
And when I call the Start button,

90
00:06:54.132 --> 00:06:58.719
we should start seeing Fibonacci
numbers being generated.

91
00:06:58.719 --> 00:07:03.250
And there we go, so as we get higher and
higher, that web worker is taking longer.

92
00:07:03.250 --> 00:07:08.030
Notice that while it's generating those,
I'm still able to do stuff on the page.

93
00:07:08.030 --> 00:07:12.570
Able to scroll around, highlight things,
because my page is not being blocked.

94
00:07:12.570 --> 00:07:15.170
Even though all that work is
happening in the background,

95
00:07:15.170 --> 00:07:17.037
my page is still running independently.

96
00:07:19.259 --> 00:07:20.785
&gt;&gt; Kyle Simpson: We can
go look at our console,

97
00:07:20.785 --> 00:07:22.868
we don't see any error messages there.

98
00:07:27.529 --> 00:07:30.550
&gt;&gt; Kyle Simpson: Takes a little
while to get to Fibonacci of 45.

99
00:07:30.550 --> 00:07:35.470
Last night I let it run long enough to
get to 46, and I never saw it go past 46,

100
00:07:35.470 --> 00:07:38.150
it was taking much, much longer.

101
00:07:39.860 --> 00:07:44.930
Because it exponentially grows when
you do binary recursion like that.

102
00:07:44.930 --> 00:07:49.570
So if we click Stop,

103
00:07:49.570 --> 00:07:55.610
now the web worker has died and
we won't ever receive any other messages.

104
00:07:56.900 --> 00:08:03.510
But if we click Start again,
it'll start over from scratch.

105
00:08:03.510 --> 00:08:06.163
So it killed the worker and
then restarted it.

106
00:08:12.050 --> 00:08:15.131
&gt;&gt; Kyle Simpson: So what questions can
we answer about, and don't forget to

107
00:08:15.131 --> 00:08:18.710
click Stop on yours or kill so
that you're not killing your battery.

