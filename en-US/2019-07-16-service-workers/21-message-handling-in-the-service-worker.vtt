WEBVTT

1
00:00:00.000 --> 00:00:03.143
&gt;&gt; Kyle Simpson: All right, so
now we're in our Service Worker, and

2
00:00:03.143 --> 00:00:06.441
we need to hook up the other
end of that communication.

3
00:00:06.441 --> 00:00:09.247
The blog that's gonna be
sending status updates, but

4
00:00:09.247 --> 00:00:11.572
we're also gonna wanna be requesting them.

5
00:00:11.572 --> 00:00:15.566
Since we're making a pretty major
change to our Service Worker,

6
00:00:15.566 --> 00:00:18.324
I'm gonna go ahead and
bump the version, and

7
00:00:18.324 --> 00:00:22.854
then we're going to,
&gt;&gt; Kyle Simpson: Set

8
00:00:22.854 --> 00:00:25.886
up some other variables like isOnline.

9
00:00:27.246 --> 00:00:29.696
&gt;&gt; Kyle Simpson: We'll assume true for
that one.

10
00:00:29.696 --> 00:00:33.879
And then isLoggedIn,
we'll assume false for that one.

11
00:00:40.868 --> 00:00:43.659
&gt;&gt; Kyle Simpson: And
then we want to set up some event

12
00:00:43.659 --> 00:00:48.490
listeners,
&gt;&gt; Kyle Simpson: Actually, just one.

13
00:00:48.490 --> 00:00:50.447
We're gonna listen for the message event.

14
00:00:55.221 --> 00:00:57.945
&gt;&gt; Kyle Simpson: So the one place
that we want to ask for an update,

15
00:00:57.945 --> 00:01:00.142
we may receive updates at other times.

16
00:01:00.142 --> 00:01:04.388
But the one time we definitely wanna
ask for an update is right here.

17
00:01:04.388 --> 00:01:08.420
So I'm gonna take out this console log
message since it seems a bit redundant

18
00:01:08.420 --> 00:01:09.070
at this point.

19
00:01:09.070 --> 00:01:14.332
I'm gonna just say await sendMessage,
which we're gonna define.

20
00:01:14.332 --> 00:01:19.173
And you remember from the blog
that the thing that we're

21
00:01:19.173 --> 00:01:23.608
expecting to see is called
requestStatusUpdate.

22
00:01:23.608 --> 00:01:28.371
So let's actually pass
in requestStatusUpdate.

23
00:01:32.300 --> 00:01:37.025
&gt;&gt; Kyle Simpson: All right,
let's define our sendMessage.

24
00:01:37.025 --> 00:01:41.416
We'll make it an async
function sendMessage.

25
00:01:46.684 --> 00:01:50.118
&gt;&gt; Kyle Simpson: Now, this one is
a little bit more complex since, again,

26
00:01:50.118 --> 00:01:54.268
as I mentioned, we have multiple
clients that we might be talking to.

27
00:01:54.268 --> 00:01:56.766
So we need to first get
a list of all those clients.

28
00:02:03.629 --> 00:02:07.074
&gt;&gt; Kyle Simpson: You remember when
I was talking about clients.claim?

29
00:02:07.074 --> 00:02:12.362
Here we're gonna do another
call on that client API,

30
00:02:12.362 --> 00:02:15.895
it's called clients.matchAll.

31
00:02:15.895 --> 00:02:22.874
And we're gonna configure that matchAll
call to include uncontrolled clients.

32
00:02:33.684 --> 00:02:37.288
&gt;&gt; Kyle Simpson: A little
long line length there.

33
00:02:37.288 --> 00:02:42.480
Okay, so now we want to send
something to all of them.

34
00:02:42.480 --> 00:02:47.541
So I'm going to do a Promise.all,
because I'm gonna

35
00:02:47.541 --> 00:02:52.171
turn that list of clients
into a list of promises.

36
00:02:52.171 --> 00:02:56.822
These post messages in Service Workers
are promise returning APIs because

37
00:02:56.822 --> 00:02:59.010
they're synchronous.

38
00:02:59.010 --> 00:03:03.381
So we need to listen for
all those promises to finish so

39
00:03:03.381 --> 00:03:05.918
that we know that we're done.

40
00:03:05.918 --> 00:03:08.047
So I'm gonna take allClients and

41
00:03:08.047 --> 00:03:13.216
I'm gonna map it,
&gt;&gt; Kyle Simpson: With,

42
00:03:16.484 --> 00:03:18.229
&gt;&gt; Kyle Simpson: Send the client message.

43
00:03:27.771 --> 00:03:31.208
&gt;&gt; Kyle Simpson: Promise.all,
don't forget, takes an array.

44
00:03:31.208 --> 00:03:33.980
So I forgot to put that,
you gotta put the array in there.

45
00:03:38.578 --> 00:03:41.158
&gt;&gt; Kyle Simpson: All right,
we're gonna make a message channel.

46
00:03:41.158 --> 00:03:44.640
Remember I referred to that this
is a special kind of way of

47
00:03:44.640 --> 00:03:45.880
creating multiple things.

48
00:03:45.880 --> 00:03:48.991
Because we just have the one Service
Worker that lots of people are talking to,

49
00:03:48.991 --> 00:03:51.268
and we need to manage who
we're getting responses from.

50
00:03:51.268 --> 00:03:54.614
We're gonna make a new message channel for
each client that we're talking to.

51
00:03:54.614 --> 00:03:58.088
So I'll say, = new MessageChannel.

52
00:04:09.909 --> 00:04:13.650
&gt;&gt; Kyle Simpson: And I'm gonna listen for
messages from that MessageChannel, and

53
00:04:13.650 --> 00:04:16.136
route them to my single onMessage handler.

54
00:04:21.784 --> 00:04:24.158
&gt;&gt; Kyle Simpson: Sorry,
I can't listen directly on the channel,

55
00:04:24.158 --> 00:04:26.260
I have to listen on
the port that is created.

56
00:04:26.260 --> 00:04:30.081
So remember, it creates two ports,
one for me and one for the remote.

57
00:04:30.081 --> 00:04:36.597
So I'm gonna say, chan.port1.onMessage,
and then I'm gonna say

58
00:04:36.597 --> 00:04:43.829
client.postMessage,
&gt;&gt; Kyle Simpson: I'm

59
00:04:43.829 --> 00:04:45.176
gonna send the message.

60
00:04:50.734 --> 00:04:55.499
&gt;&gt; Kyle Simpson: And the place that
I'm gonna send it to specifically is

61
00:04:55.499 --> 00:04:57.267
channel.port2.

62
00:05:01.766 --> 00:05:04.992
&gt;&gt; Kyle Simpson: So in other words, port1
is me, that's how I receive messages,

63
00:05:04.992 --> 00:05:07.420
port2 is how you receive messages.

64
00:05:07.420 --> 00:05:09.842
And I'm gonna send two port2 and
listen on port1.

65
00:05:14.783 --> 00:05:19.779
&gt;&gt; Kyle Simpson: I'm gonna return
this because client.postMessage

66
00:05:19.779 --> 00:05:21.893
returns us a promise.

67
00:05:21.893 --> 00:05:25.892
So we'll listen for that promise,
that flows into the array,

68
00:05:25.892 --> 00:05:28.013
which flows into Promise.all.

69
00:05:31.776 --> 00:05:35.386
&gt;&gt; Kyle Simpson: I just realized I don't
need those square brackets after all,

70
00:05:35.386 --> 00:05:37.575
because that's what .map is doing.

71
00:05:37.575 --> 00:05:38.961
That would have created a problem.

72
00:05:38.961 --> 00:05:44.176
So this should be Promise.all with
parentheses, not square brackets.

73
00:05:46.904 --> 00:05:49.116
&gt;&gt; Kyle Simpson: So
let's review where we're at in our main.

74
00:05:49.116 --> 00:05:52.203
In other words, whenever we start up,
we're gonna call sendMessage.

75
00:05:52.203 --> 00:05:54.656
We're gonna request a status update,

76
00:05:54.656 --> 00:05:58.950
that status update's gonna
come from our various clients.

77
00:05:58.950 --> 00:06:03.880
Be aware that we're creating a single
state store of these two variables.

78
00:06:03.880 --> 00:06:08.090
And we are asking potentially
multiple clients to update that.

79
00:06:08.090 --> 00:06:12.532
If those clients were in different states
for some reason, we would want to be doing

80
00:06:12.532 --> 00:06:15.711
more than just updating a single
set of boolean variables.

81
00:06:15.711 --> 00:06:20.170
We'd wanna have some list of all
the different state sets that we're paying

82
00:06:20.170 --> 00:06:23.385
attention to, and
store the data in each one of those.

83
00:06:23.385 --> 00:06:28.203
For our purposes, the state's simple
enough that I can't imagine a scenario

84
00:06:28.203 --> 00:06:32.291
where you're gonna be online in one and
not online in the other, or

85
00:06:32.291 --> 00:06:33.680
something like that.

86
00:06:33.680 --> 00:06:36.968
But do be aware, if you're gonna be
keeping stuff in sync like this,

87
00:06:36.968 --> 00:06:40.710
if you have multiple clients open,
like the user's opened up multiple tabs,

88
00:06:40.710 --> 00:06:42.940
you might be getting
different information.

89
00:06:42.940 --> 00:06:46.462
Which would manifest itself in
a race condition in your app,

90
00:06:46.462 --> 00:06:47.922
so be careful with that.

91
00:06:50.159 --> 00:06:54.171
&gt;&gt; Kyle Simpson: Last thing we wanna do
here is write our onMessage function.

92
00:07:03.094 --> 00:07:10.163
&gt;&gt; Kyle Simpson: It's going to receive,
&gt;&gt; Kyle Simpson: Our onMessage function

93
00:07:10.163 --> 00:07:15.500
is going to receive an event object which
we will just destructure into the data.

94
00:07:18.280 --> 00:07:22.851
And we want to check to see if this is
a message that's given us a status update.

95
00:07:22.851 --> 00:07:28.172
So if,
&gt;&gt; Kyle Simpson: I

96
00:07:28.172 --> 00:07:31.385
guess we can say If{data.statusUpdate}.

97
00:07:37.111 --> 00:07:40.357
&gt;&gt; Kyle Simpson: So
we wanna update our two variables, and

98
00:07:40.357 --> 00:07:44.268
I'm gonna use destructuring
to save time there.

99
00:07:44.268 --> 00:07:49.148
So I'm gonna say that (isOnline,

100
00:07:49.148 --> 00:07:54.685
isLoggedIn) = data.statusUpdate.

101
00:07:57.290 --> 00:07:59.415
&gt;&gt; Kyle Simpson: I'm
destructuring that object and

102
00:07:59.415 --> 00:08:03.038
assigning it to the variables
of those same property names.

103
00:08:05.699 --> 00:08:09.269
&gt;&gt; Kyle Simpson: For good measure, let's
go ahead and do a console log statement,

104
00:08:09.269 --> 00:08:12.353
so that we can see our
Service Worker changing its state.

105
00:08:12.353 --> 00:08:16.169
So Service Worker,

106
00:08:16.169 --> 00:08:20.660
let's do v, version,

107
00:08:29.875 --> 00:08:33.868
&gt;&gt; Kyle Simpson: isOnline,

108
00:08:39.258 --> 00:08:41.500
&gt;&gt; Kyle Simpson: isLoggedIn.

109
00:08:43.461 --> 00:08:44.165
&gt;&gt; Kyle Simpson: That way,

110
00:08:44.165 --> 00:08:49.187
we can just verify that it is in fact
getting the status updates that we want.

111
00:08:58.274 --> 00:09:03.244
&gt;&gt; Kyle Simpson: Okay, I think we've made
all the changes we need both on the blog

112
00:09:03.244 --> 00:09:08.170
side and the Service Worker side,
so let's go test it out.

113
00:09:08.170 --> 00:09:15.510
Now before you do any kind of refreshing,
let's come over to our developer tools.

114
00:09:15.510 --> 00:09:16.949
Let's check on the status of things.

115
00:09:16.949 --> 00:09:19.922
You notice that this says, in my browser,

116
00:09:19.922 --> 00:09:25.293
it's 368 cuz I've had 367 previous
mistakes with my Service Worker,

117
00:09:25.293 --> 00:09:30.517
or previous versions of my service worker,
I guess, so mine says 368.

118
00:09:30.517 --> 00:09:35.038
We're just gonna wanna make sure that,
when we refresh, that that changes, and

119
00:09:35.038 --> 00:09:38.132
it should, but
we just wanna make sure that it changes.

120
00:09:38.132 --> 00:09:41.092
So I'm going to do a simple
refresh of the page,

121
00:09:41.092 --> 00:09:45.320
or I could do a navigation,
I guess you can just click a navigation.

122
00:09:45.320 --> 00:09:51.506
And if we come over here,
you'll notice now it has moved to 369.

123
00:09:51.506 --> 00:09:56.514
Let's look at our console, and I'll just
temporarily zoom this so you can read.

124
00:09:56.514 --> 00:10:02.970
We see that Service Worker 2 is installed,
version 2.

125
00:10:02.970 --> 00:10:08.315
statusUpdate true, isOnline true,
but not logged in.

126
00:10:12.504 --> 00:10:17.202
&gt;&gt; Kyle Simpson: If I clear this
console and then, in my network,

127
00:10:17.202 --> 00:10:20.409
I'm gonna have to zoom out here,

128
00:10:20.409 --> 00:10:25.125
I toggle offline, and
we go back to our console.

129
00:10:25.125 --> 00:10:31.514
You notice that the Service Worker has
now been notified that we are offline.

130
00:10:31.514 --> 00:10:36.061
Still not logged in,
but now we are offline.

131
00:10:36.061 --> 00:10:40.773
When we come back online,
&gt;&gt; Kyle Simpson: Now

132
00:10:40.773 --> 00:10:43.186
our Service Worker knows
that we're back online.

133
00:10:45.058 --> 00:10:48.494
&gt;&gt; Kyle Simpson: Let's
check the isLoggedIn part,

134
00:10:48.494 --> 00:10:53.838
if I actually go log in,
&gt;&gt; Kyle Simpson: I'm not yet

135
00:10:53.838 --> 00:10:57.175
logged in, which is why it says false,

136
00:10:57.175 --> 00:11:02.133
I'll clear that,
&gt;&gt; Kyle Simpson: But once I log

137
00:11:02.133 --> 00:11:07.172
in,
&gt;&gt; Kyle Simpson: Now

138
00:11:07.172 --> 00:11:09.239
it says isLoggedIn true.

139
00:11:09.239 --> 00:11:14.087
So our Service Worker's being notified
of our various state changes,

140
00:11:14.087 --> 00:11:16.608
our online and our logged in status.

141
00:11:16.608 --> 00:11:21.307
If we log back out, now the Service Worker
knows that we're logged out.

