WEBVTT

1
00:00:00.070 --> 00:00:01.620
&gt;&gt; Kyle Simpson: Now that
we have a cache in place,

2
00:00:01.620 --> 00:00:03.860
it's time that we start doing
something useful with it.

3
00:00:03.860 --> 00:00:07.650
And that involves finally
trying to start intercepting

4
00:00:07.650 --> 00:00:12.450
the requests that come from the browser
through our service worker.

5
00:00:12.450 --> 00:00:13.430
Fair warning,

6
00:00:13.430 --> 00:00:18.980
from here on out until we actually
have a fully working fetch handler.

7
00:00:18.980 --> 00:00:22.030
Stuff is gonna be very easy
to break on our webpage.

8
00:00:22.030 --> 00:00:25.590
Up to this, the service worker has just
been sort of sitting there kind of

9
00:00:25.590 --> 00:00:26.940
passively doing its thing.

10
00:00:26.940 --> 00:00:31.420
But the web page has been working,
it's been loading up our files correctly,

11
00:00:31.420 --> 00:00:33.250
it hasn't been using the cache.

12
00:00:33.250 --> 00:00:36.920
At this point, things get more
difficult when you start developing, so

13
00:00:36.920 --> 00:00:40.159
before we even jump into that,
I just wanna give you the tip that says,

14
00:00:41.650 --> 00:00:47.620
be careful about at what point
in your project's history,

15
00:00:47.620 --> 00:00:51.850
you decide to install an aggressively
cashing service worker.

16
00:00:51.850 --> 00:00:56.470
Because if you do that on day one of
your project, you're gonna have 999 more

17
00:00:56.470 --> 00:01:01.010
days on your project that you
are juggling service worker frustrations.

18
00:01:01.010 --> 00:01:05.460
I typically would recommend that
a service worker is kind of later in

19
00:01:05.460 --> 00:01:08.070
the process of getting ready to deploy.

20
00:01:08.070 --> 00:01:10.070
Certainly it's an important part of it and

21
00:01:10.070 --> 00:01:14.830
it may end up impacting the way you need
to do routing on your server or whatever,

22
00:01:14.830 --> 00:01:18.480
so you don't wannna wait to the very end,
but just be aware of that,

23
00:01:18.480 --> 00:01:21.970
because as soon as there's a service
worker in place, you're gonna for example,

24
00:01:21.970 --> 00:01:25.710
gonna have to go in and
make sure to bypass the service worker for

25
00:01:25.710 --> 00:01:28.720
the network while you're working
on regular JavaScript files.

26
00:01:28.720 --> 00:01:32.300
Otherwise you'll change your JavaScript
file, refresh, even a shift refresh, and

27
00:01:32.300 --> 00:01:33.420
it's not gonna end up loading.

28
00:01:33.420 --> 00:01:37.710
And it's gonna drive you nuts until you
remember I have a caching service worker.

29
00:01:37.710 --> 00:01:40.410
I gotta go disable that or
delete every time.

30
00:01:40.410 --> 00:01:42.300
It just creates more overhead.

31
00:01:42.300 --> 00:01:45.820
So be aware of that when you're
planning out your project work with

32
00:01:45.820 --> 00:01:46.660
service workers.

33
00:01:47.920 --> 00:01:52.090
What I did, this may or may not work for
you, but what I did was I wrote,

34
00:01:52.090 --> 00:01:56.140
when I was building that app I was talking
about, I wrote out my service worker,

35
00:01:56.140 --> 00:02:00.700
tested it all out, got it to basically
do what I wanted it to do, but

36
00:02:00.700 --> 00:02:06.100
I had a disable flag at
the top of the service worker.

37
00:02:06.100 --> 00:02:08.660
And I set it to true and pushed that out.

38
00:02:08.660 --> 00:02:10.830
So I knew that my service
worker was great, but

39
00:02:10.830 --> 00:02:14.120
I had this kill flag that
killed everything throughout.

40
00:02:14.120 --> 00:02:18.470
I set it to true and then I went on about
all the rest of my app development and

41
00:02:18.470 --> 00:02:20.860
did shift reloads and all other stuffs.

42
00:02:20.860 --> 00:02:22.340
And then when I was ready to deploy,

43
00:02:22.340 --> 00:02:24.880
just have to remember to
go flip that back fall.

44
00:02:24.880 --> 00:02:26.630
So that was not killing
my service worker file.

45
00:02:28.620 --> 00:02:31.080
So, just think about
those various strategies.

46
00:02:31.080 --> 00:02:38.528
All right, let's start building
out our fetch handler,

47
00:02:38.528 --> 00:02:43.240
actually, before we write it here,

48
00:02:43.240 --> 00:02:46.738
we need to actually use it.

49
00:02:46.738 --> 00:02:51.430
So we'll say self.addEventListener.

50
00:02:51.430 --> 00:02:53.512
And the name of it is called fetch.

51
00:03:11.155 --> 00:03:13.370
&gt;&gt; Kyle Simpson: So I'll have onFetch.

52
00:03:13.370 --> 00:03:15.540
It's going to receive the request.

53
00:03:15.540 --> 00:03:18.230
And remember this request
is inbound coming

54
00:03:18.230 --> 00:03:20.590
from the page through our service worker.

55
00:03:21.620 --> 00:03:26.910
And what we want to do is essentially
write a router to handle that.

56
00:03:26.910 --> 00:03:35.560
But we need this thing to wait until
we have finished all of our work,

57
00:03:35.560 --> 00:03:39.980
so I said that it's gonna have the
request, it's gonna be the event object.

58
00:03:39.980 --> 00:03:45.550
We're gonna need for our event to
tell the fetch handler to wait.

59
00:03:45.550 --> 00:03:50.124
So remember the event.waituntil and
then we're gonna call,

60
00:03:50.124 --> 00:03:56.077
we're gonna define another function,
which will be an asynchronous function,

61
00:03:56.077 --> 00:03:59.201
a router that we pass
the request along to.

62
00:04:03.978 --> 00:04:07.498
&gt;&gt; Kyle Simpson: And the way we get
the request is, it is an object on,

63
00:04:07.498 --> 00:04:10.229
or it's a property on the event object.

64
00:04:26.805 --> 00:04:29.495
&gt;&gt; Kyle Simpson: Same thing is happening
here that I did with activation,

65
00:04:29.495 --> 00:04:31.848
I did an on activate and
then an event wait until and

66
00:04:31.848 --> 00:04:34.490
divert it to another
asynchronous function.

67
00:04:34.490 --> 00:04:35.730
Same principles going on here.

68
00:04:38.130 --> 00:04:40.310
Okay, let's set up some
variables to use in our router.

69
00:04:40.310 --> 00:04:47.430
We're going to get the URL.

70
00:04:47.430 --> 00:04:51.380
We're gonna use a function that's built
under the web platform called URL.

71
00:04:53.400 --> 00:04:57.790
It handles basically passing
of URL strings for us, so

72
00:04:57.790 --> 00:05:00.020
we don't wanna do our own
passing of URL strings.

73
00:05:06.189 --> 00:05:09.501
&gt;&gt; Kyle Simpson: So by doing dot pathname,
what I'm basically saying is,

74
00:05:09.501 --> 00:05:14.029
I just want that slash part of the URL,
which matches the way you end up doing it,

75
00:05:14.029 --> 00:05:15.470
for example, in nodes.

76
00:05:15.470 --> 00:05:19.940
So if you worked in node and
you getting a request.URL,

77
00:05:19.940 --> 00:05:24.810
that's basically the same thing that I'm
getting here from that URL parameter.

78
00:05:24.810 --> 00:05:30.200
And then I need to get my cache open, so

79
00:05:30.200 --> 00:05:32.160
I'm not gonna make the same
mistake this time.

80
00:05:32.160 --> 00:05:36.124
I'm gonna say caches.open
instead of caches.nash, and

81
00:05:36.124 --> 00:05:38.270
then I'm gonna use cache name.

82
00:05:40.540 --> 00:05:43.410
So at this point we need
to decide some things and

83
00:05:43.410 --> 00:05:45.054
we're gonna evolve this for a while.

84
00:05:45.054 --> 00:05:47.720
We're gonna be coding at this for
quite a while.

85
00:05:47.720 --> 00:05:51.650
We need to decide how we're gonna
handle these inbound requests.

86
00:05:51.650 --> 00:05:55.849
And one thing that we might wanna ask is,

87
00:05:55.849 --> 00:06:02.220
are we going to handle any requests for
outside sources.

88
00:06:02.220 --> 00:06:05.880
In other words, if our blog was
loading an image from some other CDN,

89
00:06:05.880 --> 00:06:07.650
what are we gonna do with that?

90
00:06:07.650 --> 00:06:09.800
You might recall at
the outset of the workshop,

91
00:06:09.800 --> 00:06:14.710
I talked about doing opaque requests for
outside resources, and

92
00:06:14.710 --> 00:06:17.990
so there's different strategies,
there's trade-offs there as to whether or

93
00:06:17.990 --> 00:06:23.540
not you want to cash the thing, because if
you're relying upon some other resource

94
00:06:23.540 --> 00:06:27.810
critically, like you're loading
a framework from some CDN for example.

95
00:06:27.810 --> 00:06:31.140
If you're loading that from a CDN and.

96
00:06:31.140 --> 00:06:34.280
And that's critical for your page to load.

97
00:06:34.280 --> 00:06:41.460
And you do an opaque request so you don't
need to worry about the course problem.

98
00:06:41.460 --> 00:06:44.450
While now all of a sudden is a critical
resource of your site that you're not

99
00:06:44.450 --> 00:06:44.970
offlining.

100
00:06:46.100 --> 00:06:50.910
So you might want to ignore
those sorts of requests,

101
00:06:50.910 --> 00:06:54.830
it may end up forcing you to think,
maybe we should self-host those,

102
00:06:54.830 --> 00:06:57.330
instead of sticking those
on other locations.

103
00:06:57.330 --> 00:06:59.950
So because there's a lot
of tricky decisions there,

104
00:06:59.950 --> 00:07:01.800
we're just gonna simply
skip over that issue.

105
00:07:01.800 --> 00:07:06.710
In our workshop example here, our exercise
doesn't link to any other resources.

106
00:07:06.710 --> 00:07:09.710
But just be aware,
that's a whole topic in and of itself.

107
00:07:09.710 --> 00:07:10.930
You need to figure out,

108
00:07:10.930 --> 00:07:15.020
if I'm dealing with external resources,
what's my caching strategy for that?

109
00:07:15.020 --> 00:07:18.110
Do I have any strategy whatsoever for
the offline ability of that.

110
00:07:19.290 --> 00:07:26.188
That may end up including that you try
to load it from some other location, but

111
00:07:26.188 --> 00:07:31.168
if the page fails to do so, then it has to
tell the service worker, I need a backup

112
00:07:31.168 --> 00:07:35.658
and now you have some other locally hosted
backup of the framework or whatever.

113
00:07:35.658 --> 00:07:37.988
So there's a variety of different
ways that you may go about that.

