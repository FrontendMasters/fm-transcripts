WEBVTT

1
00:00:00.070 --> 00:00:03.450
&gt;&gt; Kyle Simpson: For a while, this was
okay, and then people started saying,

2
00:00:03.450 --> 00:00:07.930
well, web workers aren't useful, because
not only is that inefficient from a memory

3
00:00:07.930 --> 00:00:12.490
perspective, but that also is very
inefficient from a processing perspective.

4
00:00:12.490 --> 00:00:15.473
The whole point of the web
worker is to be off thread and

5
00:00:15.473 --> 00:00:20.202
better, and if I have to make a copy of
my 100 megabytes of data, that's no good.

6
00:00:20.202 --> 00:00:24.259
So they had for a while,
a thing called transferables,

7
00:00:24.259 --> 00:00:28.316
which was a way of basically
creating a special kind of,

8
00:00:28.316 --> 00:00:32.458
like a ray data structure that
you put some data into it and

9
00:00:32.458 --> 00:00:37.587
as soon as you posted it to a web worker,
it went away from the web page.

10
00:00:37.587 --> 00:00:40.040
They literally deleted
it from the web page.

11
00:00:40.040 --> 00:00:43.880
And put it without copying,
into the worker thread.

12
00:00:43.880 --> 00:00:48.400
And then vice versa, as soon as you posted
it from a worker thread back to a page,

13
00:00:48.400 --> 00:00:50.360
it went away from the worker and
put it back.

14
00:00:50.360 --> 00:00:56.060
So there's only ever one copy of
that thing in any given place,

15
00:00:56.060 --> 00:00:58.460
but it's never in both places at once.

16
00:00:58.460 --> 00:01:02.750
That seemed like an interesting and
cool idea, as far as I'm aware,

17
00:01:02.750 --> 00:01:05.560
I mean, they shipped that, but
that's been kinda deprecated.

18
00:01:05.560 --> 00:01:07.840
It seems like they went
away from transferables,

19
00:01:07.840 --> 00:01:10.850
so that doesn't seem like something
that's got much of a future.

20
00:01:12.030 --> 00:01:19.950
About two years ago or so, they shipped
a feature called shared array buffers.

21
00:01:19.950 --> 00:01:22.880
And by they,
I mean the web platform java script.

22
00:01:22.880 --> 00:01:26.820
They shipped a feature
called shared array buffers.

23
00:01:26.820 --> 00:01:30.424
And it was basically like
the V2 of transferables.

24
00:01:30.424 --> 00:01:36.830
So it was a literal shared memory segment
that could be accessed at the same

25
00:01:36.830 --> 00:01:42.880
time from two different threads of java
script, which is a recipe for chaos.

26
00:01:42.880 --> 00:01:46.040
But they also shipped another API
on top of it, called atomics,

27
00:01:46.040 --> 00:01:50.740
which would allow you to do new Texas or
semi fours or some other kind of

28
00:01:50.740 --> 00:01:56.110
blocking remotely so that only one of
the threads was accessing the data,

29
00:01:56.110 --> 00:02:00.250
memory, the shared memory data at that
point, but that was the idea was okay,

30
00:02:00.250 --> 00:02:02.790
we're just gonna stuff stuff
in a shared memory segment.

31
00:02:02.790 --> 00:02:05.870
Ship it off to a worker and
then let it work on it and

32
00:02:05.870 --> 00:02:08.710
then let it tell us when it's done.

33
00:02:08.710 --> 00:02:11.780
So we'll just pull it back out
of the same shared array memory.

34
00:02:11.780 --> 00:02:15.240
That sounds all well and
good until about a year and a half ago.

35
00:02:15.240 --> 00:02:19.990
You might remember the CPU craziness that

36
00:02:19.990 --> 00:02:25.040
happened with the chips,
I think it was called Specter or

37
00:02:25.040 --> 00:02:30.000
something like that, that came out and
it was like being able to read people's

38
00:02:30.000 --> 00:02:34.710
private information out of memory or
out of the process of RAM or something.

39
00:02:34.710 --> 00:02:37.760
I forget all the technical details but
it was essentially something like

40
00:02:37.760 --> 00:02:39.900
a vulnerability in the way
processors worked and

41
00:02:39.900 --> 00:02:41.430
they were able to read this memory.

42
00:02:41.430 --> 00:02:47.170
Well it turns out That that was in
part being exploited on web pages.

43
00:02:47.170 --> 00:02:52.050
Because the way that bug was exploited
requires what's called a high resolution

44
00:02:52.050 --> 00:02:57.140
timer, meaning a timer that has down
to the like nanosecond precision.

45
00:02:57.140 --> 00:03:00.570
That's how those attack
vectors generally work.

46
00:03:00.570 --> 00:03:01.420
And so

47
00:03:01.420 --> 00:03:06.530
we are actually always very careful about
don't ship anything in the web platform

48
00:03:06.530 --> 00:03:11.090
that can give a high resolution timer,
because then people are gonna exploit it.

49
00:03:11.090 --> 00:03:13.660
Well, it turns out shared array memory,

50
00:03:13.660 --> 00:03:18.110
shared array buffers are a perfect way
of implementing high precision timing.

51
00:03:18.110 --> 00:03:20.820
And that's exactly what they did,
is they exploited that feature.

52
00:03:20.820 --> 00:03:23.440
So, very quickly, back like a year and
a half, or whatever,

53
00:03:23.440 --> 00:03:28.740
very quickly, not even six months after
that feature shipped, they shut those off.

54
00:03:28.740 --> 00:03:30.380
So we don't have shared array buffers.

55
00:03:30.380 --> 00:03:33.450
I think maybe one browser
re-shipped it with

56
00:03:33.450 --> 00:03:36.230
the fix in place to prevent timers,
or whatever.

57
00:03:36.230 --> 00:03:41.270
But as far as I know at the moment,
that's still kind of an influx problem.

58
00:03:41.270 --> 00:03:45.620
Every time they give us something cool,
some jerk goes and abuses it and

59
00:03:45.620 --> 00:03:47.080
that's why we can't have nice things.

60
00:03:47.080 --> 00:03:49.910
So, the point is right
now what you can rely

61
00:03:49.910 --> 00:03:53.350
upon cross browser is that you can
send stuff copying strings and

62
00:03:53.350 --> 00:03:56.210
things, so do be aware of that if
you're going to send a bunch of data.

