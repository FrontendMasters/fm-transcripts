WEBVTT

1
00:00:00.190 --> 00:00:03.320
&gt;&gt; Jem Young: So let's write a quick
shell script, this one is pretty fun.

2
00:00:03.320 --> 00:00:06.740
So on your home machine,
so create a new file,

3
00:00:06.740 --> 00:00:11.351
vi load.sh.
&gt;&gt; Jem Young: You can call it actually

4
00:00:11.351 --> 00:00:11.929
whatever you want.

5
00:00:11.929 --> 00:00:15.249
I'm just gonna call it load,
cuz that's the name I'm gonna use for

6
00:00:15.249 --> 00:00:21.900
the rest of the course.
&gt;&gt; Jem Young: And

7
00:00:21.900 --> 00:00:27.736
put your shebang for /bin/sh.
&gt;&gt; Speaker 2: And could we run bash

8
00:00:27.736 --> 00:00:31.803
instead of sh as our way to execute it?
&gt;&gt; Jem Young: Yeah,

9
00:00:31.803 --> 00:00:36.054
sh is pretty standard, cuz bash is
kind of a higher form of sh, but yeah,

10
00:00:36.054 --> 00:00:41.644
you could run bash just fine.
&gt;&gt; Speaker 3: If we don't specify,

11
00:00:41.644 --> 00:00:44.572
it will run the default?
&gt;&gt; Jem Young: It won't run at all,

12
00:00:44.572 --> 00:00:46.362
cuz it won't know what to do.

13
00:00:46.362 --> 00:00:49.284
If you don't put that in the top,
it's just gonna, it's a text file,

14
00:00:49.284 --> 00:00:50.476
how do I execute a text file?

15
00:00:50.476 --> 00:00:53.005
By putting this, it's saying,
all the code underneath,

16
00:00:53.005 --> 00:00:54.980
I'm gonna run it with this shell.

17
00:00:54.980 --> 00:00:59.494
Great question though.
&gt;&gt; Jem Young: And what are we doing here?

18
00:00:59.494 --> 00:01:01.751
I tried to break down
a more complicated command.

19
00:01:01.751 --> 00:01:05.511
So we're gonna cat, we're gonna
split the output of /proc/loadavg,

20
00:01:05.511 --> 00:01:09.290
which is just kind of a running tally
of what's happening in your system.

21
00:01:09.290 --> 00:01:12.192
If you ls/proc,
you'll see a lot of interesting files,

22
00:01:12.192 --> 00:01:14.452
loadavg is something
that it keeps track of.

23
00:01:14.452 --> 00:01:16.990
It's saying,
what's the load on my computer?

24
00:01:16.990 --> 00:01:19.663
And then were gonna pipe all of that, so

25
00:01:19.663 --> 00:01:23.713
we're gonna pipe the standard
out into awk, A-W-K, and

26
00:01:23.713 --> 00:01:28.503
we're gonna extract the first,
second, and third columns of data.

27
00:01:28.503 --> 00:01:30.843
And you're saying awk, what is awk?

28
00:01:30.843 --> 00:01:34.622
I spent, in college, I probably spent two,

29
00:01:34.622 --> 00:01:39.892
three weeks on just awk, and
then the other parts were on said,

30
00:01:39.892 --> 00:01:43.789
but awk is a way of
extracting data from a file.

31
00:01:43.789 --> 00:01:48.543
If you master awk,
you can do amazing things.

32
00:01:48.543 --> 00:01:53.110
You can parse through any sorts of
data you want very, very quickly,

33
00:01:53.110 --> 00:01:55.019
and it's really easy to do.

34
00:01:55.019 --> 00:01:56.737
I wont go on a long rant about awk, but

35
00:01:56.737 --> 00:01:59.461
it's probably one of the more
powerful tools in your kit.

36
00:01:59.461 --> 00:02:03.759
If you would ask someone who's like a
DevOps person, been doing it for years and

37
00:02:03.759 --> 00:02:08.786
years and years, if you asked them about
awk, they'd be like, yeah, it's amazing.

38
00:02:08.786 --> 00:02:10.335
It does exactly what you want very simply.

39
00:02:10.335 --> 00:02:13.210
It just, it's a way of reading files
very quickly and extracting data.

40
00:02:13.210 --> 00:02:17.213
So for now we're just gonna
extract the first, second, and

41
00:02:17.213 --> 00:02:19.657
third columns of data, that's it.

42
00:02:19.657 --> 00:02:23.017
So I'm gonna go ahead and
do this on my machine.

43
00:02:23.017 --> 00:02:27.341
So vi,
make sure we're in the right directory,

44
00:02:27.341 --> 00:02:31.989
print working directory,
clear, so vi load.sh.

45
00:02:36.497 --> 00:02:41.742
&gt;&gt; Jem Young: /bin/sh, and just doing cat

46
00:02:41.742 --> 00:02:46.918
/proc.
&gt;&gt; Jem Young: Type

47
00:02:46.918 --> 00:02:54.289
that into awk.
&gt;&gt; Jem Young: One,

48
00:02:54.289 --> 00:02:56.273
I don't remember, yeah, I'll print.

49
00:03:21.123 --> 00:03:22.219
&gt;&gt; Jem Young: Does that look right,

50
00:03:22.219 --> 00:03:26.489
yeah.
&gt;&gt; Jem Young: And so

51
00:03:26.489 --> 00:03:32.906
write quit on that.
&gt;&gt; Jem Young: And as always, if you're

52
00:03:32.906 --> 00:03:37.262
ever confused about these long commands
we're running, run them individually.

53
00:03:37.262 --> 00:03:38.197
See if they output,

54
00:03:38.197 --> 00:03:41.970
and then just do that one by one, and
you kinda see how long commands get built.

55
00:03:41.970 --> 00:03:47.428
It's pretty useful to do.
&gt;&gt; Jem Young: So

56
00:03:47.428 --> 00:03:50.870
if you try to run your command,
you're probably gonna get an error.

57
00:03:50.870 --> 00:03:55.477
So I'm gonna say load.sh.

58
00:03:55.477 --> 00:03:57.496
In fact, it won't even auto complete.

59
00:03:57.496 --> 00:04:01.482
I'm hitting Tab, it won't auto complete,
cuz it knows it's not an executable

60
00:04:01.482 --> 00:04:05.014
command, but even if I try to force it,
it'll say load.sh not found.

61
00:04:05.014 --> 00:04:06.934
Let's try it with this syntax.

62
00:04:06.934 --> 00:04:09.671
Permission denied, why is that?

63
00:04:09.671 --> 00:04:11.920
Because it's not an executable file.

64
00:04:11.920 --> 00:04:14.460
Like you asked earlier how we
make shell scripts executable,

65
00:04:14.460 --> 00:04:16.890
we're gonna use our old friend chmod.

66
00:04:16.890 --> 00:04:21.849
Let's jump there, so if you sudo chmod 755

67
00:04:21.849 --> 00:04:26.690
./load.sh, it'll become executable.

68
00:04:26.690 --> 00:04:32.482
So,
&gt;&gt; Jem Young: sudo chmod,

69
00:04:32.482 --> 00:04:39.236
change mod, and 755 ./load.sh,

70
00:04:39.236 --> 00:04:45.180
and now,
&gt;&gt; Jem Young: Oops, I did something wrong,

71
00:04:45.180 --> 00:04:54.093
that happens.
&gt;&gt; Jem Young: Maybe I missed something.

72
00:05:05.586 --> 00:05:07.079
&gt;&gt; Speaker 4: Trailing quote.

73
00:05:07.079 --> 00:05:07.750
&gt;&gt; Jem Young: Trailing quote?

74
00:05:07.750 --> 00:05:10.582
&gt;&gt; Speaker 4: The last after three.

75
00:05:10.582 --> 00:05:11.349
&gt;&gt; Jem Young: Did I miss one?

76
00:05:11.349 --> 00:05:12.325
&gt;&gt; Speaker 4: No, it shouldn't be there.

77
00:05:12.325 --> 00:05:13.010
&gt;&gt; Jem Young: You're right.

78
00:05:13.010 --> 00:05:18.344
Good catch, thank you.
&gt;&gt; Jem Young: Awesome, I have no load cuz

79
00:05:18.344 --> 00:05:24.051
I'm not really doing anything right now.
&gt;&gt; Jem Young: So

80
00:05:24.051 --> 00:05:29.075
if we jump back to what the load
will look like in the future,

81
00:05:29.075 --> 00:05:31.600
remember our old friend top?

82
00:05:31.600 --> 00:05:34.735
top, tells you what's
happening on our system.

83
00:05:34.735 --> 00:05:39.470
Right now, we're not doing anything, it's
just an idle system sitting, spinning, so

84
00:05:39.470 --> 00:05:43.172
we don't have any loads, but
if you look, do we have htop installed?

85
00:05:43.172 --> 00:05:44.825
I'm gonna install htop
cause it's prettier.

86
00:05:44.825 --> 00:05:49.072
So apt, you don't have,
to but it's nice, htop.

87
00:05:56.981 --> 00:05:57.685
&gt;&gt; Jem Young: htop is a kind of

88
00:05:57.685 --> 00:06:01.339
a prettier version of top, it just tells
you what's happening in your system.

89
00:06:01.339 --> 00:06:04.308
And we see our load average is 0,
because frankly, we're not running Nginx,

90
00:06:04.308 --> 00:06:07.694
we're not running Node, we're not actually
doing anything other than running a shell.

91
00:06:07.694 --> 00:06:09.620
So our load average is nothing.

92
00:06:09.620 --> 00:06:12.247
That's htop, if you wanna install it, but

93
00:06:12.247 --> 00:06:15.987
you don't have to.
&gt;&gt; Jem Young: But

94
00:06:15.987 --> 00:06:19.456
when we do have a load, eventually,
we'll come back and look at this script,

95
00:06:19.456 --> 00:06:23.207
cuz we're actually gonna use it later in
our node process, it's gonna be awesome.

96
00:06:23.207 --> 00:06:27.057
But loads, they come in,
they're always in three parts,

97
00:06:27.057 --> 00:06:31.140
they're 1 minute, 5 minute,
and 15 minute increments.

98
00:06:32.210 --> 00:06:33.260
Why is that?

99
00:06:33.260 --> 00:06:36.450
Why would we care about 1 minute,
5 minute, 15 minute, anybody?

100
00:06:40.690 --> 00:06:44.509
Think about servers, think about what
your server is doing, but why would we

101
00:06:44.509 --> 00:06:48.386
want insight into what happened 1 minute
ago, what happened 5 minutes ago,

102
00:06:48.386 --> 00:06:54.198
what's happened in 15 minutes?
&gt;&gt; Jem Young: So

103
00:06:54.198 --> 00:07:00.510
nobody, hazard a guess?
&gt;&gt; Jem Young: Okay.

104
00:07:00.510 --> 00:07:01.846
&gt;&gt; Speaker 5: You wanna know if it's

105
00:07:01.846 --> 00:07:04.939
a blip in time or if it's ongoing problem.
&gt;&gt; Jem Young: Exactly,

106
00:07:04.939 --> 00:07:06.357
that's precisely right.

107
00:07:06.357 --> 00:07:08.690
You wanna know what's happening now.

108
00:07:08.690 --> 00:07:10.780
Has it been happening for a long time?

109
00:07:10.780 --> 00:07:14.940
Is it just, are we just handling
an unexpected load of traffic temporarily?

110
00:07:14.940 --> 00:07:16.690
Or has this been going on for
a long time and

111
00:07:16.690 --> 00:07:18.650
it's something we need
to actually address?

112
00:07:19.850 --> 00:07:22.180
That's why we have 1 minute,
5 minutes, and 15 minutes increments.

113
00:07:22.180 --> 00:07:25.880
I can go a bit more into
loads if you want, but

114
00:07:25.880 --> 00:07:31.586
we'll cover that later,
cuz we're gonna actually use this data.

115
00:07:31.586 --> 00:07:35.161
And we're gonna spit it out to our webpage
to make a nice, cool graph thing that

116
00:07:35.161 --> 00:07:39.995
shows you our load average.
&gt;&gt; Jem Young: So word on chmod,

117
00:07:39.995 --> 00:07:45.294
if we haven't done chmod yet, because chon
is actually a little bit easier to use,

118
00:07:45.294 --> 00:07:48.340
cuz it's just chon our user,
what we wanna do.

119
00:07:48.340 --> 00:07:50.488
chmod is much more fine grain.

120
00:07:50.488 --> 00:07:53.295
You're saying what is 755,
what do all these things mean?

121
00:07:53.295 --> 00:07:57.890
There's a very weird formula about
reading, writing, executing for

122
00:07:57.890 --> 00:08:01.500
the owner, the users,
the admins, things like that.

123
00:08:01.500 --> 00:08:03.127
I don't actually know
the formula off the top of head.

124
00:08:03.127 --> 00:08:07.869
I don't know of any people that do, cuz
there's a calculation you do with math,

125
00:08:07.869 --> 00:08:09.214
I don't know, math.

126
00:08:09.214 --> 00:08:13.312
But things you should know at the top of
your head, 777, if you see something with

127
00:08:13.312 --> 00:08:17.030
chmod 777, it means, let anybody do
whatever they want to this file.

128
00:08:17.030 --> 00:08:20.570
Let them read to it, let them write to it,
let them execute it.

129
00:08:20.570 --> 00:08:24.162
You generally don't wanna do 777,
it's kind of the lazy man, it's just like,

130
00:08:24.162 --> 00:08:24.680
whatever.

131
00:08:24.680 --> 00:08:28.490
755 is the owner can read and

132
00:08:28.490 --> 00:08:30.570
write and execute,
everybody else can read and execute.

133
00:08:30.570 --> 00:08:31.650
So they can't write to it.

134
00:08:31.650 --> 00:08:35.823
If you're saying, this is so
nuance Jem, why do I care about that?

135
00:08:35.823 --> 00:08:39.275
Because permissions, like we covered
earlier, are pretty important.

136
00:08:39.275 --> 00:08:42.711
Someday, if you do all right,
you'll be running your own server.

137
00:08:42.711 --> 00:08:44.840
You're gonna want people to
log in to your server, but

138
00:08:44.840 --> 00:08:48.200
you don't wanna give them permission
to do things that they shouldn't do.

139
00:08:48.200 --> 00:08:49.690
Cuz it's easy, as we know,

140
00:08:49.690 --> 00:08:52.470
to shoot yourself in the foot,
to make easy mistakes.

141
00:08:52.470 --> 00:08:56.660
So we locked down permissions so
that only you, the owner, can do things.

142
00:08:56.660 --> 00:08:59.880
And we want everybody else to just like,
I want everybody to be able to read and

143
00:08:59.880 --> 00:09:03.140
execute this shell script, but
I don't want them to be able to change it.

144
00:09:03.140 --> 00:09:05.040
That's what chmod is for.

145
00:09:05.040 --> 00:09:09.490
We can go a long, long way on chmod and
the flags, things like that, but

146
00:09:09.490 --> 00:09:12.360
I put a link at the bottom of someone
much smarter than me talking about it.

147
00:09:12.360 --> 00:09:15.720
But know that chmod, the basics are 777,
lets you do anything, 755,

148
00:09:15.720 --> 00:09:21.450
kind of let you do anything, but
let everybody else just execute and read.

149
00:09:21.450 --> 00:09:26.000
These are the basics, but we won't chmod
too many things because we're the owner of

150
00:09:26.000 --> 00:09:30.320
most of the things we're gonna do, but in
the future, it's something good to know.

151
00:09:30.320 --> 00:09:32.540
I know, it's not sexy,
but I guarantee you,

152
00:09:32.540 --> 00:09:35.970
if you haven't seen chmod, in the future
you will, on some part of your machine.

