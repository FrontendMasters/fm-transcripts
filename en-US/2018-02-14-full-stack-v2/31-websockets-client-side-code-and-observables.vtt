WEBVTT

1
00:00:00.240 --> 00:00:03.160
&gt;&gt; Jem Young: This is,
i am using a library called smoothie,

2
00:00:03.160 --> 00:00:07.140
to display real time values
of any data we want to send.

3
00:00:07.140 --> 00:00:10.710
So, I want to send the server load data,
remember that script we made way many

4
00:00:10.710 --> 00:00:16.530
hours ago, i want to use that
to send the server load live to the website.

5
00:00:16.530 --> 00:00:20.434
So let us look at all that, but first
let us take a look at the code, just so

6
00:00:20.434 --> 00:00:23.001
you know that I am not
a mad man making things up.

7
00:00:26.060 --> 00:00:29.992
&gt;&gt; Jem Young: So I am using, and this is
the code that's running on your server,

8
00:00:29.992 --> 00:00:34.974
this is AppJS, I am using a library called
WS, which is kind of a bare bones, a very,

9
00:00:34.974 --> 00:00:37.532
very fast version of Web Sockets for Node.

10
00:00:39.640 --> 00:00:42.701
&gt;&gt; Jem Young: So here's where I'm
requiring in, Web Socket Server, blah,

11
00:00:42.701 --> 00:00:43.389
blah, blah.

12
00:00:43.389 --> 00:00:45.765
So web socket is a space.

13
00:00:45.765 --> 00:00:48.088
So it's saying,
when a new connection happens,

14
00:00:48.088 --> 00:00:49.814
here's the things that I want to do.

15
00:00:49.814 --> 00:00:52.925
So first, I'm gonna output how
many clients are connected.

16
00:00:52.925 --> 00:00:59.492
This is just going through my log files,
just my own knowledge.

17
00:00:59.492 --> 00:01:01.411
We'll talk about this in a second.

18
00:01:01.411 --> 00:01:04.358
But just saying, if the web socket
is open for this web client,

19
00:01:04.358 --> 00:01:05.970
I am going to see back welcome, and

20
00:01:05.970 --> 00:01:09.975
that's the best we got here because on the
client side, we are passing that message,

21
00:01:09.975 --> 00:01:13.170
saying like server saying welcome and
then cancel the log welcome.

22
00:01:15.300 --> 00:01:17.727
Saying we are close,
we gonna include because right now,

23
00:01:17.727 --> 00:01:19.340
I was just sending data over and
over again.

24
00:01:20.340 --> 00:01:25.045
And here is the fun part, that script
we read earlier, whatever you want to

25
00:01:25.045 --> 00:01:30.047
call it cracker, loader, we are gonna
execute that script every two seconds,

26
00:01:30.047 --> 00:01:34.602
and we are gonna push that data to all
the clients that are connected, and

27
00:01:34.602 --> 00:01:39.551
the client knows how to handle that,
because it's in the client server code.

28
00:01:39.551 --> 00:01:42.056
Questions, if you have never
seen Web Sockets before,

29
00:01:42.056 --> 00:01:43.452
you are probably like, what?

30
00:01:43.452 --> 00:01:47.737
But, questions, surely you have
questions about what is about to happen.

31
00:01:47.737 --> 00:01:52.297
So we need to hook all this up still.

32
00:01:52.297 --> 00:01:56.804
And in the client side,
sure the client code.

33
00:01:56.804 --> 00:02:03.526
That is in static, index.jx.

34
00:02:03.526 --> 00:02:07.306
So that's a chart that's running,
this fancy chart,

35
00:02:07.306 --> 00:02:11.296
it's already running for you, and
because our web socket things,

36
00:02:11.296 --> 00:02:15.077
this is picking the web socket
protocol automatically for you,

37
00:02:15.077 --> 00:02:19.767
I did it as a courtesy you need to do it
yourself, but it's just saying for HPPS,

38
00:02:19.767 --> 00:02:24.066
we want to use secure web sockets
which is WSS, otherwise it's just WS.

39
00:02:24.066 --> 00:02:27.675
So web sockets in action
looks something like that.

40
00:02:27.675 --> 00:02:33.414
So 137.0.1, It is kind of like,
an FTP connection of HTP you see

41
00:02:33.414 --> 00:02:39.165
a bit more how the internet works on
protocols and how to make requests.

42
00:02:39.165 --> 00:02:40.562
So websockets are just ws. ws?

43
00:02:40.562 --> 00:02:42.454
That's pretty cool.

44
00:02:42.454 --> 00:02:45.868
Now, I'm using observables,
don't get too confused,

45
00:02:45.868 --> 00:02:49.351
now I know observables are tricky,
there are two courses,

46
00:02:49.351 --> 00:02:54.070
I think on front of masters by
Jaffar Hussain, who also works for Netflix.

47
00:02:54.070 --> 00:02:56.760
Who is the king of observables.

48
00:02:56.760 --> 00:03:00.300
He will talk to you so much about them,
because he loves them.

49
00:03:00.300 --> 00:03:03.140
And they're actually getting pushed
in the JavaScript hopefully.

50
00:03:03.140 --> 00:03:06.010
Everybody know what observables are?

51
00:03:06.010 --> 00:03:08.150
Just high level summary,

52
00:03:08.150 --> 00:03:12.030
observables are a faster way of
responding to streaming data.

53
00:03:12.030 --> 00:03:13.980
Websocket is a perfect
example of a observable.

54
00:03:13.980 --> 00:03:16.960
Because it's streaming data,
it's a connection that's always open.

55
00:03:16.960 --> 00:03:18.610
We don't know when the data
is going to come in,

56
00:03:18.610 --> 00:03:21.090
but we know it will at some point.

57
00:03:21.090 --> 00:03:25.470
And using r accept intervals, so rxjs,
we can handle that data as it comes in.

58
00:03:26.550 --> 00:03:29.726
The old school way of doing it,
is to make a promise, and

59
00:03:29.726 --> 00:03:33.724
then when that promise happens you then,
then, then, then, then.

60
00:03:33.724 --> 00:03:37.897
Versus observables we can say when this
happens, do this, do this, do this,

61
00:03:37.897 --> 00:03:40.694
do this,
rather than all these problems changing.

62
00:03:40.694 --> 00:03:42.654
That's a better observables.

63
00:03:42.654 --> 00:03:45.877
I won't go to much, because again,
that's like a four day course, so

64
00:03:45.877 --> 00:03:48.565
they get pretty complicated,
but, it's gotta go back and

65
00:03:48.565 --> 00:03:51.500
take a look at that because that's
what we're using right now.

66
00:03:51.500 --> 00:03:55.010
But I just want to make sure so
nobody's like what's rx observable?

67
00:03:55.010 --> 00:03:59.570
So, what we're doing is the server
is sending a message periodically.

68
00:03:59.570 --> 00:04:02.100
So, when that message happens
it has a payload in it.

69
00:04:02.100 --> 00:04:06.620
The payload has a uniform structure,
that I defined as it has a name.

70
00:04:06.620 --> 00:04:08.230
It has a JSON payload.

71
00:04:08.230 --> 00:04:08.790
IT has a name.

72
00:04:08.790 --> 00:04:09.870
It has data.

73
00:04:09.870 --> 00:04:12.586
And now, it's just a switch
statement handling that name, so

74
00:04:12.586 --> 00:04:13.875
when I'm sending down load.

75
00:04:13.875 --> 00:04:14.954
I'm parsing that data.

76
00:04:14.954 --> 00:04:19.456
I'm converting it to an array, and
then I'm gonna use that data down here.

77
00:04:19.456 --> 00:04:21.837
If it says ping, I just send back a pong.

78
00:04:21.837 --> 00:04:24.420
So ping pong and it will do that all day.

79
00:04:24.420 --> 00:04:26.064
And that's about it.

80
00:04:26.064 --> 00:04:27.342
Question?

81
00:04:27.342 --> 00:04:28.914
No questions.

82
00:04:28.914 --> 00:04:30.401
Yes?

83
00:04:30.401 --> 00:04:34.330
&gt;&gt; Speaker 2: Is this how you remember
where we left on the streaming?

84
00:04:34.330 --> 00:04:38.010
For example Netflix or Hulu?

85
00:04:39.660 --> 00:04:43.349
&gt;&gt; Jem Young: Sort of, that's a bit more
complex, but what happens in Netflix

86
00:04:43.349 --> 00:04:48.244
is you're streaming movie data, they do
your observables for audio players things,

87
00:04:48.244 --> 00:04:52.868
like that, you shoot movie data every so
often it makes a token that's says here is

88
00:04:52.868 --> 00:04:55.867
where you are, And then the server
keeps track of that for your username.

89
00:04:55.867 --> 00:04:59.571
So the next time you come back, it
automatically knows where you are again.

90
00:04:59.571 --> 00:05:02.438
It's really fascinating if we go into,
maybe later after the class,

91
00:05:02.438 --> 00:05:04.927
we'll look at Netflix and
we'll look at the network stack.

92
00:05:04.927 --> 00:05:08.231
And you just see the requests coming
in and how we're handling it,

93
00:05:08.231 --> 00:05:11.015
how we're parsing things,
it's fascinating I know.

94
00:05:11.015 --> 00:05:13.780
But [LAUGH] Back to WebSockets.

95
00:05:13.780 --> 00:05:15.393
The beginning.
If you want to make you a Netflix,

96
00:05:15.393 --> 00:05:17.040
let's use some WebSockets.

97
00:05:17.040 --> 00:05:20.650
So I am saying, when I parse my data,
I am going to split it in to an array.

98
00:05:20.650 --> 00:05:24.418
That's why that's,
if we look back at the load data,

99
00:05:24.418 --> 00:05:30.940
way back here,
why I put dashes in there, for that AWK.

100
00:05:30.940 --> 00:05:32.941
Remember, because I didn't have
to put the dashes in there.

101
00:05:32.941 --> 00:05:36.306
I put it in there, so I am making
a standard way of parsing data,

102
00:05:36.306 --> 00:05:40.261
delineating like this is load one,
this is load two, this is load three.

103
00:05:40.261 --> 00:05:42.822
You could use commas, you can use
semicolons, it doesn't really matter.

104
00:05:42.822 --> 00:05:46.279
But, because it's standardized,
I know how to parse that data,

105
00:05:46.279 --> 00:05:50.185
and I know that every time I see a minus
sign it's a different chunk of data.

106
00:05:50.185 --> 00:05:52.813
So I can just parse that into an array.

107
00:05:52.813 --> 00:05:53.841
So I filter that.

108
00:05:53.841 --> 00:05:57.102
So, I'm just saying,
I want to make sure that it's an array,

109
00:05:57.102 --> 00:05:58.713
and it has a length, not zero.

110
00:05:58.713 --> 00:06:05.019
And then, I just append this
all to the chart, in real-time.

111
00:06:05.019 --> 00:06:06.990
That's observables for you, right there.

112
00:06:06.990 --> 00:06:10.820
Like really useful for
handling data just like this.

113
00:06:10.820 --> 00:06:14.211
Not good for every use case, but
this particular case, it's quite good.

