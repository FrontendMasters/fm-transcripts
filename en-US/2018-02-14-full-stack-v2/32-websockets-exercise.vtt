WEBVTT

1
00:00:00.012 --> 00:00:02.883
&gt;&gt; Jem Young: If you notice,
there's nothing coming through, darn it,

2
00:00:02.883 --> 00:00:03.513
why is that?

3
00:00:03.513 --> 00:00:05.440
We need to modify this
node file a little bit,

4
00:00:05.440 --> 00:00:07.794
because I don't know where
you put that shell script.

5
00:00:07.794 --> 00:00:09.837
Remember that one we created earlier for
getting loads?

6
00:00:09.837 --> 00:00:14.328
Let's just point to that, so

7
00:00:14.328 --> 00:00:20.085
let's go to /var/www/fsfw2/.

8
00:00:20.085 --> 00:00:24.828
And let's modify app.js,
everybody with me?

9
00:00:24.828 --> 00:00:28.347
So we're gonna vi app.js and

10
00:00:28.347 --> 00:00:32.999
let's find out where we put that file.

11
00:00:32.999 --> 00:00:35.511
Where did we put it?

12
00:00:35.511 --> 00:00:40.966
That's at home, all right.
&gt;&gt; Jem Young: So

13
00:00:40.966 --> 00:00:44.167
whatever you call that bash script,
you can give it whatever name you want.

14
00:00:44.167 --> 00:00:47.800
I believe I called it load.

15
00:00:47.800 --> 00:00:53.823
Let's call it load.sh and I wanna point
to that file, it's in my home directory.

16
00:00:53.823 --> 00:00:56.351
So the tilde, of course, is short for

17
00:00:56.351 --> 00:01:02.919
/home/your username.
&gt;&gt; Jem Young: Yeah,

18
00:01:02.919 --> 00:01:08.710
let's give that a whirl.
&gt;&gt; Jem Young: Everybody with me so far?

19
00:01:08.710 --> 00:01:10.254
This is where it gets a little tricky,

20
00:01:10.254 --> 00:01:12.729
cuz we're building on the work
we did much earlier in class.

21
00:01:12.729 --> 00:01:16.537
That you thought was just idle work,
but it was real work,

22
00:01:16.537 --> 00:01:23.701
useful work.
&gt;&gt; Jem Young: And

23
00:01:23.701 --> 00:01:27.047
you're saying, why are we using the shell
scripts and not the node scripts?

24
00:01:27.047 --> 00:01:31.187
Dealer's choice,
I kind of like the shell scripts.

25
00:01:31.187 --> 00:01:35.240
It's a little bit simpler to read
if you need to fix it later.

26
00:01:35.240 --> 00:01:40.483
So I'm gonna go ahead and save this,
but I need to restart my server.

27
00:01:40.483 --> 00:01:43.798
So forever and we're just gonna say,

28
00:01:43.798 --> 00:01:49.606
restartall cuz we only have one
job running, so it's not too bad.

29
00:01:49.606 --> 00:01:51.870
All right, it should be up and running.

30
00:01:51.870 --> 00:01:56.217
Let's see if that worked,
should be getting some data

31
00:01:56.217 --> 00:02:01.712
hopefully
&gt;&gt; Jem Young: If not,

32
00:02:01.712 --> 00:02:03.267
we will debug together.

33
00:02:10.096 --> 00:02:12.190
&gt;&gt; Jem Young: It's still not sending data,

34
00:02:12.190 --> 00:02:13.806
so let me dig into this.

35
00:02:13.806 --> 00:02:19.106
If I want to just make sure this works.

36
00:02:27.360 --> 00:02:28.161
&gt;&gt; Jem Young: Check home,

37
00:02:31.312 --> 00:02:32.749
&gt;&gt; Jem Young: That's probably why.

38
00:02:44.332 --> 00:02:45.587
&gt;&gt; Jem Young: There we go,

39
00:02:45.587 --> 00:02:53.078
I mistyped.
&gt;&gt; Jem Young: Just

40
00:02:53.078 --> 00:02:54.978
take out that period there and

41
00:02:54.978 --> 00:03:00.029
whatever the filename is.
&gt;&gt; Jem Young: And

42
00:03:00.029 --> 00:03:07.550
it's gonna restart,
&gt;&gt; Jem Young: Feel a little better?

43
00:03:17.113 --> 00:03:17.625
&gt;&gt; Jem Young: Right,

44
00:03:17.625 --> 00:03:21.510
now we have low data,
there is nothing happening on my server.

45
00:03:21.510 --> 00:03:25.038
So it's not terribly useful at this point.

46
00:03:25.038 --> 00:03:30.277
Let's see if I can make it do something,
heat up some resources.

47
00:03:30.277 --> 00:03:35.591
Let's say, /ma, I'm just

48
00:03:35.591 --> 00:03:41.246
gonna make a node script real quick for.

49
00:04:00.033 --> 00:04:04.651
&gt;&gt; Jem Young: Just make it a long running
loop to hopefully eat up some CPU

50
00:04:04.651 --> 00:04:08.906
cycles so we can see some load data and
just kill this.

51
00:04:08.906 --> 00:04:15.390
So did htp and
I'm still not generating any load, hm.

52
00:04:15.390 --> 00:04:19.039
What can we do to add load to our server,
more for

53
00:04:19.039 --> 00:04:25.977
loops maybe?
&gt;&gt; Jem Young: Maybe I'll

54
00:04:25.977 --> 00:04:27.909
make a console log.

55
00:04:27.909 --> 00:04:29.574
So if you are following at home,
you don't have to do this.

56
00:04:29.574 --> 00:04:31.714
This is just so
you can see data on your graph.

57
00:04:31.714 --> 00:04:38.433
So you'll see some shininess, but 10000.

58
00:04:38.433 --> 00:04:44.083
We'll say i++, we'll make it console.log
cuz that will eat up memory.

59
00:05:01.237 --> 00:05:02.401
&gt;&gt; Jem Young: Was that enough to move

60
00:05:02.401 --> 00:05:06.893
the needle?
&gt;&gt; Jem Young: No, yeah, it did,

61
00:05:06.893 --> 00:05:10.994
barely, our load average
went up just slightly.

62
00:05:10.994 --> 00:05:14.570
And there we go, cool.

63
00:05:14.570 --> 00:05:17.623
Sorry, that was totally a useless demo,
but the graph does work.

64
00:05:17.623 --> 00:05:21.064
I just wanna make sure
[LAUGH] we all knew that.

65
00:05:21.064 --> 00:05:26.241
And now we have a live streaming graph
of what's happening on our server,

66
00:05:26.241 --> 00:05:27.421
our load times.

67
00:05:27.421 --> 00:05:31.052
You can make an entire dashboard of
every server you have, the load,

68
00:05:31.052 --> 00:05:32.059
things like that.

69
00:05:32.059 --> 00:05:37.140
And we do it all in real time with
web sockets, that's pretty cool.

70
00:05:37.140 --> 00:05:40.107
All right, questions on web sockets,
things like that?

71
00:05:40.107 --> 00:05:43.594
Streaming data,
anybody have any trouble still?

72
00:05:43.594 --> 00:05:46.498
It's okay if you are.

73
00:05:46.498 --> 00:05:48.030
All right, cool, no questions?

74
00:05:48.030 --> 00:05:51.631
Nobody, it works for everybody, yes?
&gt;&gt; Speaker 2: What happens if the IP

75
00:05:51.631 --> 00:05:55.843
address of the client changed,
to the WebSocket?

76
00:05:55.843 --> 00:05:56.858
&gt;&gt; Jem Young: It will disconnect, so

77
00:05:56.858 --> 00:05:59.154
you'd have to make a new
connection automatically.

78
00:05:59.154 --> 00:06:02.252
Cuz it's not smart enough to know that,
hey I should stay connected.

79
00:06:02.252 --> 00:06:05.147
It's just gonna drop the connections and
then that's the end of it.

80
00:06:05.147 --> 00:06:10.002
Now if you use a library, the library
people usually use is socket.io,

81
00:06:10.002 --> 00:06:13.037
which is a much more
powerful library in AWS.

82
00:06:13.037 --> 00:06:15.743
Socket.IO you may have heard of
because it does things like,

83
00:06:15.743 --> 00:06:17.730
if the client doesn't support web sockets.

84
00:06:17.730 --> 00:06:21.498
It'll switch to long polling,
which is just a very long

85
00:06:21.498 --> 00:06:25.756
HP request that just stays open
a long time, not as efficient.

86
00:06:25.756 --> 00:06:27.804
It does things like caching for you and

87
00:06:27.804 --> 00:06:31.972
making sure keep alive to make sure
the socket stays open, things like that.

88
00:06:31.972 --> 00:06:36.839
But we're just using ws cuz it's
bare bones, it's middle, it works.

89
00:06:36.839 --> 00:06:40.619
And overtime,
we see that because of our load averages,

90
00:06:40.619 --> 00:06:46.476
it averages out to 1 minute, 5 minute,
15 minute, it's just dropping over time.

91
00:06:46.476 --> 00:06:50.776
All right, WebSockets are cool, we could
build way cooler demos with WebSockets.

92
00:06:50.776 --> 00:06:54.778
And I can talk to you in real time and
things like that, but that's for

93
00:06:54.778 --> 00:06:55.752
another class.

