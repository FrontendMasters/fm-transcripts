WEBVTT

1
00:00:00.180 --> 00:00:03.820
&gt;&gt; Jem Young: Now we're
moving onto databases and

2
00:00:03.820 --> 00:00:05.490
this is the final portion of the course.

3
00:00:05.490 --> 00:00:09.780
Last two sections, so you're all good,
you made it, you've got a modern website

4
00:00:11.310 --> 00:00:15.460
running like a fine tuned website.

5
00:00:15.460 --> 00:00:17.150
Yeah, it's doing well right now.

6
00:00:17.150 --> 00:00:18.950
So let's talk about databases.

7
00:00:18.950 --> 00:00:23.339
As one of my favorite professors
in college once said, as your job,

8
00:00:23.339 --> 00:00:27.728
mostly what it boils down to is
writing something into a database and

9
00:00:27.728 --> 00:00:29.429
getting something back.

10
00:00:29.429 --> 00:00:31.538
And when you think about web applications,

11
00:00:31.538 --> 00:00:33.960
that's almost all exactly
what you're doing.

12
00:00:33.960 --> 00:00:36.719
You're putting stuff in and
you're taking stuff out, that's it.

13
00:00:36.719 --> 00:00:41.083
You may do some data lunging on the side
like parse it, do whatever you want.

14
00:00:41.083 --> 00:00:43.218
But at the core you're putting
something in the database,

15
00:00:43.218 --> 00:00:44.892
you're getting something out, that's it.

16
00:00:44.892 --> 00:00:48.580
That's why I'm putting this section about
databases as part of full stack because at

17
00:00:48.580 --> 00:00:51.303
some point you're gonna have to
run a database for something.

18
00:00:51.303 --> 00:00:56.201
So the two types of databases that we
mainly need to concern ourselves about

19
00:00:56.201 --> 00:00:59.481
are relational and
non-relational databases.

20
00:00:59.481 --> 00:01:03.262
Now, someone tell me the difference
between a relational and non-relational.

21
00:01:05.052 --> 00:01:07.699
&gt;&gt; Speaker 2: Schemeless versus documents,
or table versus documents.

22
00:01:07.699 --> 00:01:09.053
&gt;&gt; Jem Young: That's exactly right.

23
00:01:09.053 --> 00:01:12.005
Schemeless versus documents,
or table versus documents.

24
00:01:12.005 --> 00:01:15.833
Essentially a relational database
means the data relates to

25
00:01:15.833 --> 00:01:17.340
other data in some way.

26
00:01:17.340 --> 00:01:23.290
So you can index these things much easier,
you run SQL on relational databases.

27
00:01:23.290 --> 00:01:24.674
Non-relational database,

28
00:01:24.674 --> 00:01:27.613
it's better to think of it as
a document store key value store.

29
00:01:27.613 --> 00:01:30.945
You can put in any sort of data you want,
you don't have to format it,

30
00:01:30.945 --> 00:01:33.774
you can just dump it into
the database as fast as possible.

31
00:01:33.774 --> 00:01:38.076
Some examples of non-relational database
Redis which is a key value store,

32
00:01:38.076 --> 00:01:39.340
it's very very fast.

33
00:01:39.340 --> 00:01:42.596
Cassandra, Mongo DB is
a very popular one for

34
00:01:42.596 --> 00:01:47.149
document store they just had an IPO
doing pretty well so I hear.

35
00:01:47.149 --> 00:01:50.668
Relational database you probably
heard cuz that's the one running SQL,

36
00:01:50.668 --> 00:01:52.096
Structured Query Language.

37
00:01:52.096 --> 00:01:57.797
MySQL, Postgre, SQL Server very
popular servers, very popular language

38
00:01:57.797 --> 00:02:03.240
because before, if you think about
the days before SQL, you have data.

39
00:02:04.710 --> 00:02:07.020
How do you get it back out?

40
00:02:07.020 --> 00:02:09.050
And it's a hard problem,
it's a hard problem.

41
00:02:09.050 --> 00:02:12.940
Yes, where I have data that I wanna
store,, what format do I put it in?

42
00:02:12.940 --> 00:02:16.518
I can't just dump it in there, I have
to have some sort of structure to it.

43
00:02:16.518 --> 00:02:19.440
And that's where the structure
query language comes in.

44
00:02:19.440 --> 00:02:20.640
The down side of that is,

45
00:02:20.640 --> 00:02:26.620
that I have to formulate my data in a very
specific way to fit into my database.

46
00:02:26.620 --> 00:02:29.300
So you have SQL and
you have to process all these things

47
00:02:29.300 --> 00:02:32.580
versus something like Redis
which is just a key value store.

48
00:02:32.580 --> 00:02:35.960
Doesn't care about the structure,
you've put it in with the key and

49
00:02:35.960 --> 00:02:40.610
you've put it in with the value, whatever
you want to be, and it's just fast.

50
00:02:40.610 --> 00:02:44.130
The difference is SQL tends to be a little
bit faster if you querying thing.

51
00:02:44.130 --> 00:02:49.170
So if I wanna say, how many users are
logged into frondendmasters.comm right now,

52
00:02:49.170 --> 00:02:50.050
I use SQL for that.

53
00:02:50.050 --> 00:02:53.983
Because I can make a query that give me
that exact data versus a non-relational

54
00:02:53.983 --> 00:02:54.590
database.

55
00:02:54.590 --> 00:02:58.276
I'd have to parse all this data,
extract it out, modify that,

56
00:02:58.276 --> 00:03:00.475
I'd essentially have to map reduce.

57
00:03:00.475 --> 00:03:04.071
I'd have to map that data reduce
it down to the value that I want.

58
00:03:04.071 --> 00:03:06.607
That's the difference between
a relational and non-relational database.

59
00:03:06.607 --> 00:03:11.158
So before everybody wants to be like, I
wanNA use couch DB or I wanna use Mongo or

60
00:03:11.158 --> 00:03:14.213
I wanna use all of these things
which are heap and cool and

61
00:03:14.213 --> 00:03:17.290
fast understand what kind
of data you're gonna store.

62
00:03:17.290 --> 00:03:19.833
How's the data gonna look in the future?

63
00:03:19.833 --> 00:03:21.773
And how fast do you want it to be?

64
00:03:21.773 --> 00:03:24.041
Non-relational data tends to
be much faster for inserting,

65
00:03:24.041 --> 00:03:26.489
because there's no schema,
you don't have to process any data.

66
00:03:26.489 --> 00:03:31.076
You just throw it in there, essentially
get a bucket and throw it in there.

67
00:03:31.076 --> 00:03:33.988
It's a bit more complicated than that, but
that's a good way of thinking about it.

68
00:03:33.988 --> 00:03:36.090
And then getting data
out is very fast too.

69
00:03:36.090 --> 00:03:39.767
And everyone's like use Mongo,
use Redis, but if you wanna

70
00:03:39.767 --> 00:03:44.755
actually run analytics of some sort,
eventually you wanna infer user behavior.

71
00:03:44.755 --> 00:03:48.109
You wanna understand what's happening
at the core structural query

72
00:03:48.109 --> 00:03:49.967
language is probably the way they go.

73
00:03:49.967 --> 00:03:51.607
Make sense, any questions on database?

74
00:03:51.607 --> 00:03:57.224
That was a lot, I got,
been very generous on it.

75
00:03:57.224 --> 00:03:57.883
Yes.

76
00:03:57.883 --> 00:04:01.000
&gt;&gt; Speaker 3: Is Firebase
considered database?

77
00:04:01.000 --> 00:04:06.560
&gt;&gt; Jem Young: Firebase is,
I believe it is an API, API as a service.

78
00:04:06.560 --> 00:04:10.506
I'm not that familiar with it, but
I believe it's a way of setting up API's

79
00:04:10.506 --> 00:04:12.863
on their server and
having it return things.

80
00:04:12.863 --> 00:04:14.432
Does that help?

81
00:04:14.432 --> 00:04:15.515
Yeah.

82
00:04:15.515 --> 00:04:19.110
&gt;&gt; Speaker 4: It has a NoSQL
database part of it.

83
00:04:19.110 --> 00:04:20.450
&gt;&gt; Jem Young: Okay.
&gt;&gt; Speaker 4: It's like proprietary.

84
00:04:20.450 --> 00:04:23.234
&gt;&gt; Jem Young: Okay so
it does have a database built into it.

85
00:04:23.234 --> 00:04:26.431
That's pretty cool,
they got bought by Facebook, right?

86
00:04:26.431 --> 00:04:29.029
I don't actually remember, Google?

87
00:04:29.029 --> 00:04:34.210
Okay, yeah I've seen some Firebase
examples on Google sites.

88
00:04:34.210 --> 00:04:37.830
But that at a very, very,
very high level is databases.

89
00:04:37.830 --> 00:04:41.638
Now I say very high level because there
are entire fields of computer science that

90
00:04:41.638 --> 00:04:42.991
just have their databases.

91
00:04:42.991 --> 00:04:45.984
Their entire career is that
all you do is database

92
00:04:45.984 --> 00:04:48.904
administration because
it's very very hard.

93
00:04:48.904 --> 00:04:51.510
If you're at that level,
you probably wouldn't be in this class.

94
00:04:51.510 --> 00:04:53.237
Or maybe it's forgetting,
so congratulations,

95
00:04:53.237 --> 00:04:54.950
you're off on a wonderful journey.

96
00:04:54.950 --> 00:04:59.000
But essentially when you're trying to pick
is you're starting a brand new server,

97
00:04:59.000 --> 00:05:00.740
you're trying to pick
the type of database,

98
00:05:00.740 --> 00:05:03.920
keep these things in mind about
relational versus non-relational.

99
00:05:03.920 --> 00:05:07.090
Cuz it's really tempting to use
a non-relational database cuz

100
00:05:07.090 --> 00:05:11.810
it takes less work, less queries to get
it in, but you may pay for that later on.

