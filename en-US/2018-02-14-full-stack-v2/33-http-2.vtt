WEBVTT

1
00:00:00.000 --> 00:00:03.520
&gt;&gt; Jem Young: And we implemented a web
socket and let's talk about http/2 for

2
00:00:03.520 --> 00:00:04.096
a minute.

3
00:00:04.096 --> 00:00:05.522
Http/2 is the new standard.

4
00:00:05.522 --> 00:00:09.796
If you look in the browser you'll
see protocol, it's running http/1.1,

5
00:00:09.796 --> 00:00:13.175
which is just a way that all
the browser renders got together and

6
00:00:13.175 --> 00:00:17.286
all the standard body said this is
the way we're gonna make an HTTP request.

7
00:00:17.286 --> 00:00:19.352
The problem is, HTTP, it's kind of old.

8
00:00:19.352 --> 00:00:24.555
It's been around for a long,
long time, so they came up with HTTP2.

9
00:00:24.555 --> 00:00:29.069
Well actually, first Google came up
with a protocol called SPDY, S-P-D-Y.

10
00:00:29.069 --> 00:00:32.755
That was like, hey, this is secure,
it's fast, it compresses things,

11
00:00:32.755 --> 00:00:33.757
all this good jazz.

12
00:00:33.757 --> 00:00:35.879
But people were like,
I don't know about that Google.

13
00:00:35.879 --> 00:00:38.525
We don't really trust you and
your weird, one off, protocol.

14
00:00:38.525 --> 00:00:41.690
But they rolled the best
parts of SPDY into HTTP2.

15
00:00:41.690 --> 00:00:44.340
And that's now the new standard for
the internet.

16
00:00:44.340 --> 00:00:46.140
Not a lot of people have
implemented it yet, but

17
00:00:46.140 --> 00:00:49.550
we're gonna do it today because
we wanna run the next gen.

18
00:00:49.550 --> 00:00:53.480
So by the end of this you'll have
a website running running a web socket,

19
00:00:53.480 --> 00:00:57.370
running http/2, you got your caching, you
got your headers, that's as modern as I

20
00:00:57.370 --> 00:01:00.370
can get for you, sort of a service
worker which I excluded for

21
00:01:00.370 --> 00:01:02.636
this class cuz it's
a little bit more advanced.

22
00:01:02.636 --> 00:01:04.828
So talk http/2.

23
00:01:04.828 --> 00:01:06.850
How do we set it up?

24
00:01:06.850 --> 00:01:09.640
Nginx, super super easy.

25
00:01:09.640 --> 00:01:13.990
In our listen block,
we just add http/2 into it.

26
00:01:13.990 --> 00:01:15.020
Did it again.

27
00:01:19.877 --> 00:01:20.510
&gt;&gt; Jem Young: There we go.

28
00:01:22.960 --> 00:01:27.220
So if you wanna make your connection run
http/2, you just throw that in there.

29
00:01:27.220 --> 00:01:30.284
It couldn't get any easier in that,
it's beautiful.

30
00:01:30.284 --> 00:01:31.960
[LAUGH] And how simple it is.

31
00:01:33.060 --> 00:01:34.900
So why http/2?

32
00:01:34.900 --> 00:01:37.052
It is faster than a normal connection.

33
00:01:37.052 --> 00:01:42.695
And for as JavaScript developers from our
perspective HTTP2 is kind of a game changer.

34
00:01:42.695 --> 00:01:46.987
In that HTTP2 is one persisting connection,

35
00:01:46.987 --> 00:01:50.585
rather than a bunch of connections.

36
00:01:50.585 --> 00:01:52.073
And it's kind of hard to reason about.

37
00:01:52.073 --> 00:01:56.706
But what's the benefit of one
persistent connection where it can make

38
00:01:56.706 --> 00:02:00.248
multiple requests,
versus a bunch of connections?

39
00:02:02.185 --> 00:02:07.940
&gt;&gt; Speaker 2: Reliability,
more reliable connection.

40
00:02:07.940 --> 00:02:10.990
&gt;&gt; Jem Young: Yeah yeah that's true.

41
00:02:10.990 --> 00:02:15.395
Yeah you'll have less packets dropped
cuz you're using less connections.

42
00:02:15.395 --> 00:02:19.023
But in general and this is one of my
favorite interview questions that I ask UI

43
00:02:19.023 --> 00:02:22.273
engineers, what's the slowest
part of processing a web request?

44
00:02:22.273 --> 00:02:23.295
&gt;&gt; Speaker 2: It's probably the handshake.

45
00:02:23.295 --> 00:02:26.256
&gt;&gt; Jem Young: It's the handshake,
exactly so all those connections,

46
00:02:26.256 --> 00:02:27.772
exactly right great answer.

47
00:02:27.772 --> 00:02:31.948
It's the handshakes so it's I have to read
all the headers for every single request,

48
00:02:31.948 --> 00:02:34.563
I have to parse those,
the server has to patch those.

49
00:02:34.563 --> 00:02:35.516
That's expensive.

50
00:02:35.516 --> 00:02:39.200
Why can't we just do that all in one
request and save the hand shaking?

51
00:02:39.200 --> 00:02:40.328
That's what HTTP2 does.

52
00:02:40.328 --> 00:02:45.360
It can make request or one connection but
multiple file requests in the same one.

53
00:02:45.360 --> 00:02:49.166
The benefit of that is we no longer have
to midify our job description in one file

54
00:02:49.166 --> 00:02:50.852
it's actually slower to do that.

55
00:02:50.852 --> 00:02:53.612
So instead of one massive
10 megabyte file.

56
00:02:53.612 --> 00:02:57.846
Please don't send down 10 megabytes of
JavaScript, but if you have one massive 10

57
00:02:57.846 --> 00:03:01.733
megabyte file, instead of doing that,
let's just break it into tiny chunks.

58
00:03:01.733 --> 00:03:03.865
How about 10, 1 megabyte files?

59
00:03:03.865 --> 00:03:08.835
Cuz they can make all those requests
at the same time versus before it made

60
00:03:08.835 --> 00:03:10.067
those in serial.

61
00:03:10.067 --> 00:03:11.050
See the difference?

62
00:03:11.050 --> 00:03:15.135
That's why it's a little bit faster to use
HTTP2 if you can and it does require a bit

63
00:03:15.135 --> 00:03:19.420
of thinking on our end because we don't
have to compress all things in one file.

64
00:03:19.420 --> 00:03:21.820
It's better to do it in multiple files.

65
00:03:21.820 --> 00:03:25.100
Akamai is a good demo,
cuz it's better o show and not tell.

66
00:03:26.190 --> 00:03:28.747
So that's HP1 and HTTP2.

67
00:03:28.747 --> 00:03:33.289
And what's happening is it's making,
I will refresh again.

68
00:03:33.289 --> 00:03:37.248
So, this is making all the requests
kind of at the same time, or

69
00:03:37.248 --> 00:03:42.105
making them one by one by one by one,
that is going really fast, with HTTP/2

70
00:03:42.105 --> 00:03:46.634
it makes them all at the same time,
which is why it loads the way it does.

71
00:03:46.634 --> 00:03:48.628
All right?
So that's HTTP2.

72
00:03:48.628 --> 00:03:50.626
&gt;&gt; Speaker 3: Any drawbacks for HTTP2?

73
00:03:50.626 --> 00:03:52.010
Any drawbacks?

74
00:03:52.010 --> 00:03:53.322
&gt;&gt; Jem Young: Drawbacks?

75
00:03:53.322 --> 00:03:55.930
Not all browsers support it currently.

76
00:03:55.930 --> 00:03:59.578
You can get into overhead because
you're making one connection but

77
00:03:59.578 --> 00:04:00.673
a bunch of request.

78
00:04:00.673 --> 00:04:04.853
So you're gonna actually overload that
one connection if that makes sense.

79
00:04:04.853 --> 00:04:08.230
So yeah, if you don't wanna cross 30
files at the same time cuz that will just

80
00:04:08.230 --> 00:04:10.000
overwhelm your browser.

81
00:04:10.000 --> 00:04:12.520
You wanna do them maybe ten at a time,
20 at a time.

82
00:04:12.520 --> 00:04:14.450
But lucky for
us the browsers take care of that.

83
00:04:14.450 --> 00:04:16.100
You don't have to worry about that then.

84
00:04:16.100 --> 00:04:19.380
Downsides, don't really know of any,
honestly.

85
00:04:19.380 --> 00:04:22.980
There probably are some, but for
our use case it's better to use HTTP2.

86
00:04:24.320 --> 00:04:25.380
So, let's go to implement that.

87
00:04:25.380 --> 00:04:28.260
And I will show you
hopefully the benefits.

88
00:04:28.260 --> 00:04:30.490
We get a benefit right now from using it.

