WEBVTT

1
00:00:00.000 --> 00:00:03.052
&gt;&gt; Jem Young: Let's do expires headers.

2
00:00:03.052 --> 00:00:04.084
So remember,

3
00:00:04.084 --> 00:00:10.111
we said the headers are the instructions
on how to handle this particular request?

4
00:00:10.111 --> 00:00:11.727
What does an expire header do, or

5
00:00:11.727 --> 00:00:18.616
what do you think it does?
&gt;&gt; Jem Young: Anybody?

6
00:00:18.616 --> 00:00:19.840
&gt;&gt; Speaker 2: Expire the cache.

7
00:00:19.840 --> 00:00:21.024
&gt;&gt; Jem Young: Yes.

8
00:00:21.024 --> 00:00:21.982
On which side, though?

9
00:00:21.982 --> 00:00:23.752
Client-side or server-side?
&gt;&gt; Speaker 2: Client.

10
00:00:23.752 --> 00:00:24.999
&gt;&gt; Jem Young: Yes, excellent.

11
00:00:26.030 --> 00:00:28.070
Because our content
doesn't change that much,

12
00:00:28.070 --> 00:00:30.480
unless we have a lot of dynamic content.

13
00:00:30.480 --> 00:00:33.400
For the most part, you're just
serving back some sort of static file.

14
00:00:34.430 --> 00:00:35.620
So why request that every time?

15
00:00:35.620 --> 00:00:38.970
If it hasn't changed,
why should we have to do that every time?

16
00:00:38.970 --> 00:00:42.672
We can set expire headers to say hey,
instead of making this request,

17
00:00:42.672 --> 00:00:46.309
I'm telling you this content is so
fresh, so fresh for a month or so,

18
00:00:46.309 --> 00:00:48.032
don't even make that request.

19
00:00:48.032 --> 00:00:50.544
So we cut down on bandwidth
on the client side.

20
00:00:50.544 --> 00:00:52.788
Your page loads much
faster cuz it's pulled.

21
00:00:52.788 --> 00:00:56.171
We cut down on bandwidth on the server
side cuz I don't have to handle those type

22
00:00:56.171 --> 00:00:56.797
of requests.

23
00:00:56.797 --> 00:00:58.455
Make sense?

24
00:00:58.455 --> 00:01:00.412
Expires headers are really powerful.

25
00:01:00.412 --> 00:01:04.654
But as we see involving anything with
cacheing [LAUGH] you can get yourself into

26
00:01:04.654 --> 00:01:06.684
a whole, in a bad spot very quickly.

27
00:01:06.684 --> 00:01:08.860
Cuz it's a hard problem.

28
00:01:08.860 --> 00:01:14.713
So let's talk about expires headers a bit.
&gt;&gt; Jem Young: And

29
00:01:14.713 --> 00:01:17.502
if you look in the files
that it's requesting,

30
00:01:17.502 --> 00:01:21.870
you'll see that it's sending down three or
four not modified.

31
00:01:21.870 --> 00:01:24.560
That's because we're
using the ETag header.

32
00:01:24.560 --> 00:01:27.320
Which I won't get into too much,
cuz Nginx does that for you.

33
00:01:27.320 --> 00:01:30.920
But ETag is just a quick hash
of the file that says hey,

34
00:01:30.920 --> 00:01:34.390
it hasn't changed,
don't even process this request.

35
00:01:34.390 --> 00:01:35.720
The difference is it's still,

36
00:01:35.720 --> 00:01:37.900
even with the ETag header,
it's still hitting the server.

37
00:01:37.900 --> 00:01:42.160
And Nginx is still saying here's the ETag,
nothing's changed.

38
00:01:42.160 --> 00:01:46.477
That's why it returns a 304,
which is a not-modified response.

39
00:01:46.477 --> 00:01:48.808
But what's the difference between that and

40
00:01:48.808 --> 00:01:52.672
expires headers?
&gt;&gt; Speaker 3: You wouldn't even have to

41
00:01:52.672 --> 00:01:54.030
hit the server.
&gt;&gt; Jem Young: Exactly.

42
00:01:54.030 --> 00:01:54.980
Exactly right.

43
00:01:54.980 --> 00:01:56.144
So ETags are good.

44
00:01:56.144 --> 00:01:58.170
By default, Nginx has them,
they're running.

45
00:01:58.170 --> 00:02:01.128
It saves you a lot of processing power
cuz it's just gonna return the ETag very

46
00:02:01.128 --> 00:02:02.686
quickly instead of the whole file back.

47
00:02:02.686 --> 00:02:05.126
With expires headers,
we don't even have to make that request.

48
00:02:05.126 --> 00:02:08.718
So let's add some expires headers, and see
if we can make our site just a little bit

49
00:02:08.718 --> 00:02:13.666
faster.
&gt;&gt; Jem Young: I don't know why I put

50
00:02:13.666 --> 00:02:14.434
var for all these.

51
00:02:14.434 --> 00:02:18.357
It must have been a late
night coding session.

52
00:02:18.357 --> 00:02:20.621
But it's not var, it's just etc,

53
00:02:20.621 --> 00:02:27.653
I apologize.
&gt;&gt; Jem Young: So,

54
00:02:27.653 --> 00:02:31.872
in etc/nginxsites-available.

55
00:02:31.872 --> 00:02:34.911
Don't know why I did that too.

56
00:02:34.911 --> 00:02:36.850
That's right, there we go.

57
00:02:36.850 --> 00:02:40.320
etc/nginx/sites-available/default,
the file you all know and love.

58
00:02:40.320 --> 00:02:49.859
Add a location block for static files.
&gt;&gt; Jem Young: So

59
00:02:49.859 --> 00:02:54.545
what we're doing is for every request that
comes into our server, for your domain,

60
00:02:54.545 --> 00:02:58.769
in this case gen.party, every request
that's looking for slash static,

61
00:02:58.769 --> 00:03:02.087
slash something else,
we're gonna add expires headers.

62
00:03:02.087 --> 00:03:05.332
And we're gonna say this content
is static, it expires in 30 days,

63
00:03:05.332 --> 00:03:07.270
don't even bother making that request.

64
00:03:08.450 --> 00:03:11.893
But we have to add
proxy_pass to static again.

65
00:03:11.893 --> 00:03:14.268
Otherwise, we're just gonna a header, but

66
00:03:14.268 --> 00:03:17.024
it won't actually make the request
in the node at that point.

67
00:03:17.024 --> 00:03:20.250
So that's where we add
the proxy_pass to node/static.

68
00:03:20.250 --> 00:03:25.110
[BLANK AUDIO]
&gt;&gt; Speaker 4: And does this is need to

69
00:03:25.110 --> 00:03:30.366
precede location within default, does it-
&gt;&gt; Jem Young: Doesn't have to be,

70
00:03:30.366 --> 00:03:34.564
but I found it good, it's good habit to
have location slash at the very bottom.

71
00:03:34.564 --> 00:03:37.821
That's like, if everything else falls
through, that's what it's gonna hit.

72
00:03:37.821 --> 00:03:46.577
But good question.
&gt;&gt; Jem Young: All right,

73
00:03:46.577 --> 00:03:51.870
so let me just add this sudo vi etc nginx,

74
00:03:51.870 --> 00:03:55.773
sites available, default.

75
00:03:57.833 --> 00:04:01.217
&gt;&gt; Jem Young: And
&gt;&gt; Jem Young: Yeah,

76
00:04:01.217 --> 00:04:01.812
put them here.

77
00:04:45.900 --> 00:04:48.495
&gt;&gt; Jem Young: Right?
Everybody have something that looks around

78
00:04:48.495 --> 00:04:49.669
something like this?

79
00:04:49.669 --> 00:04:58.180
Well, it should look exactly like this.
&gt;&gt; Jem Young: And just gonna write quits.

80
00:04:58.180 --> 00:04:59.634
Sanity check myself.

81
00:04:59.634 --> 00:05:00.537
Looks good.

82
00:05:00.537 --> 00:05:04.310
And we're just gonna reload nginx.

83
00:05:04.310 --> 00:05:08.323
Alex is asking for a website with
about 10,000 requests per hour,

84
00:05:08.323 --> 00:05:12.090
what would be a good number
process instead of auto?

85
00:05:12.090 --> 00:05:14.610
So that largely depends.

86
00:05:14.610 --> 00:05:17.990
On the machine we're using,
you're probably using the default

87
00:05:17.990 --> 00:05:22.790
lowest end nginx blox, or digital ocean
box, which I am, which only has one core.

88
00:05:22.790 --> 00:05:26.780
And in general, you don't want more
processes than you have cores.

89
00:05:26.780 --> 00:05:30.484
So if you had a 32 core machine,
you could have 32 processes.

90
00:05:30.484 --> 00:05:34.090
If you're a one core machine but
you say I can have five process, well,

91
00:05:34.090 --> 00:05:36.120
at that point you're gonna have lock.

92
00:05:36.120 --> 00:05:38.980
So Nginx is gonna be running,
and then node's gonna be running,

93
00:05:38.980 --> 00:05:41.790
then MySQL's gonna berunning,
things like that.

94
00:05:41.790 --> 00:05:44.000
So the general rule is, yeah,

95
00:05:44.000 --> 00:05:46.890
don't have more processes running
than you have processors.

96
00:05:46.890 --> 00:05:51.433
But if you're doing 10,000 requests per
hour, which is a decent amount of traffic,

97
00:05:51.433 --> 00:05:52.794
you would have web server.

98
00:05:52.794 --> 00:05:56.271
You have your own stand-alone web
server that only does Nginx, and

99
00:05:56.271 --> 00:05:58.167
it handles HPS and things like that.

100
00:05:58.167 --> 00:06:01.073
And that points to another server,
which is just running node.

101
00:06:01.073 --> 00:06:04.508
That way, you just let Nginx
scale as much as you want.

102
00:06:04.508 --> 00:06:07.241
And that's a general breakdown of most
server configurations, is you have web

103
00:06:07.241 --> 00:06:10.760
servers, then you have database servers,
and you have servers that do everything.

104
00:06:10.760 --> 00:06:13.330
In our case, we're running it all in
one because I don't want you to rack up

105
00:06:13.330 --> 00:06:15.388
a giant bill cuz we're running
five different servers.

106
00:06:15.388 --> 00:06:19.711
But in general, put Nginx on it's
own server as a web server, and

107
00:06:19.711 --> 00:06:24.678
then let it scale infinitely.
&gt;&gt; Jem Young: Good question, though.

108
00:06:24.678 --> 00:06:29.956
So now, let us request something

109
00:06:29.956 --> 00:06:33.780
interesting.
&gt;&gt; Jem Young: Not

110
00:06:33.780 --> 00:06:37.561
modified.
&gt;&gt; Jem Young: And if we take a look at

111
00:06:37.561 --> 00:06:41.970
the request, it should be from memory,
if I did things correctly.

112
00:06:41.970 --> 00:06:47.275
Yes, it's from disk cache.
&gt;&gt; Jem Young: So

113
00:06:47.275 --> 00:06:49.783
you'll note your headers are,
the first request,

114
00:06:49.783 --> 00:06:53.210
you won't get that because we
haven't sent out the headers yet.

115
00:06:53.210 --> 00:06:57.955
The second request, it will not go out the
server because our [INAUDIBLE] control is

116
00:06:57.955 --> 00:07:00.010
saying max age is 30 days.

117
00:07:00.010 --> 00:07:03.204
So it won't make this request anymore.
&gt;&gt; Jem Young: So

118
00:07:03.204 --> 00:07:07.135
what's something dangerous
with setting your cache very,

119
00:07:07.135 --> 00:07:10.428
very long?
&gt;&gt; Speaker 5: You update your website and

120
00:07:10.428 --> 00:07:12.920
no one can see the changes
until I hard refresh.

121
00:07:12.920 --> 00:07:13.780
&gt;&gt; Jem Young: Exactly.

122
00:07:13.780 --> 00:07:14.458
That's exactly right.

123
00:07:14.458 --> 00:07:17.970
That's why cacheing is a hard
problem in computer science.

124
00:07:17.970 --> 00:07:21.850
Cuz you want to serve
the fast experience possible.

125
00:07:21.850 --> 00:07:27.110
In this instance, this is pretty slow.
&gt;&gt; Jem Young: This

126
00:07:27.110 --> 00:07:29.159
is pretty fast cuz pretty
much an empty file.

127
00:07:29.159 --> 00:07:32.168
This file's pretty fast, but
it returns in about a few milliseconds,

128
00:07:32.168 --> 00:07:35.042
two milliseconds, cuz that request
doesn't even have to got out.

129
00:07:35.042 --> 00:07:36.383
It reads in disk cache.

130
00:07:36.383 --> 00:07:39.747
That's cool, it's a better experience for
my users, which is what we want.

131
00:07:39.747 --> 00:07:44.349
But if I update this file, but
my caching headers are way too expired,

132
00:07:44.349 --> 00:07:47.083
well, you're gonna be in some trouble.

133
00:07:47.083 --> 00:07:51.638
And then try and explain to my dear
sweet mom how to hard refresh the page,

134
00:07:51.638 --> 00:07:53.100
to clear the caches.

135
00:07:53.100 --> 00:07:54.780
It's not a good experience.

136
00:07:54.780 --> 00:07:58.790
So expires headers are not the cure-all,
it's not gonna solve all your problems.

137
00:07:58.790 --> 00:08:02.660
In general, you wouldn't set something for
30 days, that's a long cache.

138
00:08:02.660 --> 00:08:04.450
You'd set on the order of minutes.

139
00:08:04.450 --> 00:08:08.976
Cuz most people aren't coming back to your
site over and over again within 30 days.

140
00:08:08.976 --> 00:08:12.075
And your content has changed.
&gt;&gt; Jem Young: Yes?

141
00:08:12.075 --> 00:08:13.816
&gt;&gt; Speaker 6: Another question in chat.

142
00:08:15.328 --> 00:08:16.787
&gt;&gt; Jem Young: Alex is asking if I modify

143
00:08:16.787 --> 00:08:21.245
something in the app, how can I force
the browser to request the file again?

144
00:08:21.245 --> 00:08:25.600
Yes, we're gonna get to a bit more on
cache control, cuz caching is hard.

145
00:08:25.600 --> 00:08:29.722
But if you want to, you can just,
with developer tools open in Chrome,

146
00:08:29.722 --> 00:08:31.730
you hold down on the Refresh icon.

147
00:08:31.730 --> 00:08:34.070
We can say empty cache hard reload.

148
00:08:34.070 --> 00:08:35.692
It's gonna refresh a new file.

149
00:08:35.692 --> 00:08:37.712
As we see,
it made the full round trip here.

150
00:08:42.194 --> 00:08:43.725
&gt;&gt; Speaker 6: I think in his case, though,

151
00:08:43.725 --> 00:08:46.990
he's asking about the user on
the other end, not for testing.

152
00:08:46.990 --> 00:08:48.222
So if he's updating the CSS,

153
00:08:48.222 --> 00:08:51.538
how can he make sure that they're always
getting the latest, version of that.

154
00:08:51.538 --> 00:08:55.077
So if you're gonna go into that later,
then that's fine.

155
00:08:55.077 --> 00:08:55.578
&gt;&gt; Jem Young: I'll touch on

156
00:08:55.578 --> 00:08:56.206
that a bit later.

157
00:08:56.206 --> 00:08:59.927
But that more comes on you as the
developer not setting your expires headers

158
00:08:59.927 --> 00:09:00.466
too long.

159
00:09:00.466 --> 00:09:03.543
You want it just long enough so
they're getting the freshest version.

160
00:09:03.543 --> 00:09:08.511
Now, there's different ways of
making your responses much faster.

161
00:09:08.511 --> 00:09:10.736
I like the Service Worker route.

162
00:09:10.736 --> 00:09:13.411
There's a whole course on it, which I'll
ink to at the end, about Service Workers.

163
00:09:13.411 --> 00:09:15.642
It's a two-day course that's pretty solid.

164
00:09:15.642 --> 00:09:19.810
But a Service Worker essentially can
ask a cache sitting on the client.

165
00:09:19.810 --> 00:09:21.468
And that does all the handshaking for you.

166
00:09:21.468 --> 00:09:24.158
And you can send out expires
headers to the service worker.

167
00:09:24.158 --> 00:09:25.311
It gets all fun and complicated.

168
00:09:25.311 --> 00:09:27.850
But again, that's a whole nother course.

169
00:09:27.850 --> 00:09:30.381
Expires headers are probably
the fastest and simplest way.

170
00:09:30.381 --> 00:09:32.921
It was just one line in
our nginx configuration.

171
00:09:32.921 --> 00:09:35.558
But in general,
don't overdo it with expires headers.

172
00:09:35.558 --> 00:09:40.075
It may seem faster now, but as a user,
for instance, I don't have dev tool open,

173
00:09:40.075 --> 00:09:43.502
how would I know I'm not getting
the freshest thing anymore?

174
00:09:43.502 --> 00:09:47.116
You wouldn't know.
&gt;&gt; Jem Young: And

175
00:09:47.116 --> 00:09:50.215
I will tell you more fun stories about
dumb things I've done with the cache.

176
00:09:50.215 --> 00:09:53.543
Cuz we're gonna get a bit more in to
caching, cuz it is a way of serving things

177
00:09:53.543 --> 00:09:57.553
very, very quickly if you do it right.
&gt;&gt; Jem Young: I'm excited.

178
00:09:58.940 --> 00:10:00.499
&gt;&gt; Jem Young: So now, you should see,

179
00:10:00.499 --> 00:10:02.356
when you request something,

180
00:10:02.356 --> 00:10:07.420
let's try a longer URL.
&gt;&gt; Jem Young: This

181
00:10:07.420 --> 00:10:11.203
cat's behind
&gt;&gt; Jem Young: Yeah,

182
00:10:11.203 --> 00:10:12.188
this is another example.

183
00:10:12.188 --> 00:10:14.521
Cats should be a bit faster now.

184
00:10:14.521 --> 00:10:16.673
There we go.

185
00:10:16.673 --> 00:10:21.023
Now, so as the demonstration of
the power of headers, and this is a,

186
00:10:21.023 --> 00:10:23.800
I don't know, maybe a 10 megabyte file.

187
00:10:23.800 --> 00:10:28.784
Actually, it's probably like 20.
&gt;&gt; Jem Young: It's pretty fast,

188
00:10:28.784 --> 00:10:30.262
but not fast enough.

189
00:10:30.262 --> 00:10:34.620
That's eight, about eight
milliseconds to load everything.

190
00:10:34.620 --> 00:10:35.240
It's pretty fast.

191
00:10:35.240 --> 00:10:38.360
But if we do it that,
it's 200 milliseconds.

192
00:10:38.360 --> 00:10:42.440
Now, if you told me as an engineer,
I can make your request cut down by 75%,

193
00:10:42.440 --> 00:10:46.300
I can make your site 75% faster,
I'm all ears.

194
00:10:46.300 --> 00:10:47.432
That's great.

195
00:10:47.432 --> 00:10:49.320
That's the power of the expires headers.

196
00:10:49.320 --> 00:10:53.350
We're gonna talk a bit more cuz
we're gonna make an nginx cache.

197
00:10:53.350 --> 00:10:57.190
So rather than caching on the client side,
we're gonna cache it on the server

198
00:10:57.190 --> 00:11:02.241
side.
&gt;&gt; Jem Young: You should be excited.

199
00:11:02.241 --> 00:11:05.400
This is practical stuff that you can
take home to your website today.

200
00:11:05.400 --> 00:11:09.247
And just by tweaking your headers just
a little bit, you can make your site much

201
00:11:09.247 --> 00:11:14.427
more responsive to users.
&gt;&gt; Jem Young: All right,

202
00:11:14.427 --> 00:11:16.518
so you should see requests
coming from memory cache,

203
00:11:16.518 --> 00:11:19.590
if you set your headers correctly, for
all files that are under slash static.

204
00:11:20.950 --> 00:11:24.200
So we cached essentially
on the client side.

205
00:11:24.200 --> 00:11:25.640
Well, we cached in a way.

206
00:11:25.640 --> 00:11:28.360
We just said hey, browser,
use whatever you have already,

207
00:11:28.360 --> 00:11:30.360
don't make any new requests.

208
00:11:30.360 --> 00:11:31.420
But what if that's not good enough?

209
00:11:31.420 --> 00:11:34.030
What if we want the browser
to check every single time?

210
00:11:34.030 --> 00:11:37.410
But on the server side, we know that
this request is particularly slow.

211
00:11:37.410 --> 00:11:39.110
We can cache it on that end, too.

212
00:11:39.110 --> 00:11:42.890
So we can make our slow file request much,
much faster now.

213
00:11:42.890 --> 00:11:44.936
Cuz right now, it takes about six seconds.

214
00:11:44.936 --> 00:11:47.030
That's how I configured it,
it probably is.

215
00:11:48.520 --> 00:11:49.779
Let's take a look.

216
00:11:49.779 --> 00:11:52.313
Whoops.
&gt;&gt; Jem Young: Up.

217
00:12:03.871 --> 00:12:04.754
&gt;&gt; Jem Young: And this is the repo that

218
00:12:04.754 --> 00:12:05.700
we're working in.

219
00:12:05.700 --> 00:12:08.110
So let's take a look at app js.

220
00:12:08.110 --> 00:12:08.995
Let's look in the server

221
00:12:08.995 --> 00:12:12.195
configuration a bit.
&gt;&gt; Jem Young: And

222
00:12:12.195 --> 00:12:15.242
I'm using Express 3001.
&gt;&gt; Jem Young: Static,

223
00:12:15.242 --> 00:12:16.926
I'm just serving a static index.

224
00:12:16.926 --> 00:12:17.724
Send file.

225
00:12:17.724 --> 00:12:18.686
It's pretty static.

226
00:12:18.686 --> 00:12:21.327
Again, just sending
the directory back down.

227
00:12:21.327 --> 00:12:23.377
Load, we're gonna play with in a minutes.

228
00:12:23.377 --> 00:12:25.409
Cats, we saw that.

229
00:12:25.409 --> 00:12:29.252
And slow file just says I'm putting
a timeout around the response.

230
00:12:29.252 --> 00:12:30.912
So it's artificially slow.

231
00:12:30.912 --> 00:12:33.672
But let's just pretend it's a really
long running database query,

232
00:12:33.672 --> 00:12:36.588
something like that, something
that's computationally expensive.

233
00:12:36.588 --> 00:12:42.664
So that's slow file.
&gt;&gt; Jem Young: Actually,

234
00:12:42.664 --> 00:12:43.406
just give it a shot.

235
00:12:43.406 --> 00:12:46.961
So setting the expires header on slow file

236
00:12:46.961 --> 00:12:51.746
doesn't help because it still
has to do some checking.

237
00:12:51.746 --> 00:12:53.021
At the root directory,

238
00:12:53.021 --> 00:12:56.222
it still has to check the server
to say are you still around.

239
00:12:56.222 --> 00:12:59.644
Expires headers aren't the cure-all for
everything.

240
00:12:59.644 --> 00:13:02.034
It's still slow,
even with our expires headers.

241
00:13:02.034 --> 00:13:06.188
So we're gonna implement caching on nginx
side, so we can make even a slow query

242
00:13:06.188 --> 00:13:11.373
much, much faster.
&gt;&gt; Jem Young: Everybody with me so far?

243
00:13:11.373 --> 00:13:12.929
Any question about caching?

244
00:13:12.929 --> 00:13:16.725
All right, let's make this fly.
&gt;&gt; Speaker 3: I was just gonna ask is

245
00:13:16.725 --> 00:13:21.211
there anything I need to do, or I might
have missed a step, to refresh the,

246
00:13:21.211 --> 00:13:23.653
to make it, the cached headers change?

247
00:13:23.653 --> 00:13:26.744
I'm still getting max age zero for
the cache control.

248
00:13:26.744 --> 00:13:28.400
&gt;&gt; Jem Young: Did you restart nginx?

249
00:13:28.400 --> 00:13:29.180
&gt;&gt; Speaker 3: Probably didn't.

250
00:13:30.320 --> 00:13:31.150
&gt;&gt; Jem Young: I do that all the time.

251
00:13:31.150 --> 00:13:33.040
Like why aren't you working,
I know this is right.

252
00:13:33.040 --> 00:13:35.586
And it's just restarting nginx.
&gt;&gt; Speaker 3: Is that the command,

253
00:13:35.586 --> 00:13:39.380
restart nginx?
&gt;&gt; Jem Young: Sudo service nginx restart.

