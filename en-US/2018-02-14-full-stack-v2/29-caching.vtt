WEBVTT

1
00:00:00.063 --> 00:00:03.850
&gt;&gt; Jem Young: We covered HBS, we covered
Nginx tuning on the client side so

2
00:00:03.850 --> 00:00:08.845
now let's talk about caching, aka,
making it a bit faster on the server side.

3
00:00:11.908 --> 00:00:13.758
&gt;&gt; Jem Young: So nginx has the ability,

4
00:00:13.758 --> 00:00:18.566
one of the unique things is it can setup,
we can cache on nginx side.

5
00:00:18.566 --> 00:00:22.674
Normally we'd have to do that on the node
side or things like that With Nginx.

6
00:00:22.674 --> 00:00:25.892
You know I think I did
this with of all my paths.

7
00:00:25.892 --> 00:00:29.172
I don't know why I put [INAUDIBLE].

8
00:00:29.172 --> 00:00:32.011
Just in case you're confused.

9
00:00:32.011 --> 00:00:33.499
Okay, much better.

10
00:00:33.499 --> 00:00:36.459
Nginx has the ability to cache things for
us.

11
00:00:36.459 --> 00:00:39.265
So really long requests,
things that are slow.

12
00:00:39.265 --> 00:00:41.057
We can edit our sites available.

13
00:00:41.057 --> 00:00:43.166
And we can put a cache in there.

14
00:00:43.166 --> 00:00:47.174
So to start with,
this is all actually one long block.

15
00:00:47.174 --> 00:00:50.037
This whole area here, is one long block.

16
00:00:50.037 --> 00:00:51.957
You see it terminates with the semicolon?

17
00:00:51.957 --> 00:00:55.970
So I'm just gonna kind of walk
through what we're doing.

18
00:00:55.970 --> 00:00:59.835
Proxy cache path is just saying
where do we want the cache to live,

19
00:00:59.835 --> 00:01:03.151
because the cache is a physical
file on your hard drive.

20
00:01:03.151 --> 00:01:04.871
Where should that exist?

21
00:01:04.871 --> 00:01:08.371
And we're saying we want it in /tmp/rginx.

22
00:01:08.371 --> 00:01:08.923
It's a good spot.

23
00:01:08.923 --> 00:01:09.620
It's a cache.

24
00:01:09.620 --> 00:01:11.730
We don't have to worry
about maintaining it.

25
00:01:11.730 --> 00:01:16.288
Temp is a good location because temp
periodically gets cleaned by the file

26
00:01:16.288 --> 00:01:16.882
system.

27
00:01:16.882 --> 00:01:19.313
So you don't have to worry about
it kind of existing too long.

28
00:01:19.313 --> 00:01:22.147
Temp will clean itself up for you.

29
00:01:22.147 --> 00:01:24.959
But if you wanted to put your cache
somewhere else, you can do that too.

30
00:01:24.959 --> 00:01:27.735
I don't know why you would,
but, you could.

31
00:01:27.735 --> 00:01:29.951
The levels equal one and two.

32
00:01:29.951 --> 00:01:32.344
We're just saying, how far and

33
00:01:32.344 --> 00:01:36.782
how specific should the caches
be within that file system.

34
00:01:36.782 --> 00:01:41.368
So if I request slash cuts and
I have more requests there, slash cuts,

35
00:01:41.368 --> 00:01:45.739
slash Queue cuts, fuzzy cuts,
how deep do we want the cache to go?

36
00:01:45.739 --> 00:01:48.487
We're just gonna do one and two for
now, but we can get four, five, six.

37
00:01:48.487 --> 00:01:50.875
We can get really,
really specific on our cache.

38
00:01:50.875 --> 00:01:55.148
And with that we have the ability to
invalidate like very specific portions of

39
00:01:55.148 --> 00:01:55.815
our cache.

40
00:01:55.815 --> 00:01:57.895
But we don't have to worry about that for
now.

41
00:01:57.895 --> 00:02:02.060
This is just throwing it out there so
you know it exist.

42
00:02:02.060 --> 00:02:06.471
Our key zone is saying,
what do we want our cache to be called and

43
00:02:06.471 --> 00:02:07.979
how big should it be?

44
00:02:07.979 --> 00:02:13.619
This is a little confusing,
because I'm calling it slowfile_cache,

45
00:02:13.619 --> 00:02:17.322
cuz that's the cache we
wanna make a cache for.

46
00:02:17.322 --> 00:02:19.850
And we want it to only be 10 megabytes.

47
00:02:19.850 --> 00:02:23.439
It may look like 10 minutes,
but it's 10 Megabytes.

48
00:02:23.439 --> 00:02:27.292
Again, you can go crazy with your
cache and make it infinitely large,

49
00:02:27.292 --> 00:02:31.145
you generally don't want to do that
because you can eat-up all of your

50
00:02:31.145 --> 00:02:32.732
disk space with your cache.

51
00:02:32.732 --> 00:02:35.747
And you generally don't need
to cache that much stuff.

52
00:02:35.747 --> 00:02:39.990
In act of saying,
how long should this cache be enacted for?

53
00:02:39.990 --> 00:02:42.605
And let's call it 60 minutes.

54
00:02:42.605 --> 00:02:43.477
Done.

55
00:02:43.477 --> 00:02:45.928
So we want to invalidate our cache
after a certain amount of time.

56
00:02:45.928 --> 00:02:49.509
And then it's gonna refresh itself
with a new request coming in.

57
00:02:49.509 --> 00:02:52.281
Use temp path is something new to
the version of nginx that we're using.

58
00:02:52.281 --> 00:02:56.570
It's just saying, instead of writing to a
temporary file then writing to the cache,

59
00:02:56.570 --> 00:02:59.625
we're just gonna keep it in memory and
write it to the cache.

60
00:02:59.625 --> 00:03:02.822
Now you wouldn't necessarily want to do
this if you had a lot of requests coming

61
00:03:02.822 --> 00:03:05.740
in, because you can eat up a lot of
memory as Nginx is writing the cache.

62
00:03:05.740 --> 00:03:09.139
But in our instance we'll
just use_temp_path=off.

63
00:03:09.139 --> 00:03:10.083
So go ahead and

64
00:03:10.083 --> 00:03:18.801
add that into your sites-available.
&gt;&gt; Jem Young: And

65
00:03:18.801 --> 00:03:22.378
I believe
&gt;&gt; Jem Young: I wonder if you

66
00:03:22.378 --> 00:03:27.198
can?
&gt;&gt; Jem Young: I'll fix it later.

67
00:03:27.198 --> 00:03:31.618
I will put all this into the comments so
that you can just copy and paste it in.

68
00:03:31.618 --> 00:03:34.203
I don't want you to work too hard.

69
00:03:34.203 --> 00:03:36.127
But I do believe that
if you write something,

70
00:03:36.127 --> 00:03:39.293
you're more likely to remember it.
&gt;&gt; Speaker 2: Does this go under location

71
00:03:39.293 --> 00:03:40.093
or?
&gt;&gt; Jem Young: No,

72
00:03:40.093 --> 00:03:42.600
that goes outside of your server block,
so.

73
00:03:42.600 --> 00:03:43.378
&gt;&gt; Speaker 2: Outside the server block.

74
00:03:43.378 --> 00:03:44.320
&gt;&gt; Jem Young: Yes.

75
00:03:44.320 --> 00:03:45.984
Let me just do it now.

76
00:04:02.175 --> 00:04:04.856
&gt;&gt; Jem Young: And let's just put
it up here at the top of the file.

77
00:04:04.856 --> 00:04:07.984
We can put a width in a service block,
but proxy cache,

78
00:04:07.984 --> 00:04:10.098
I think it's okay to put it outside.

79
00:04:10.098 --> 00:04:12.474
So we're saying proxy

80
00:04:32.686 --> 00:04:36.093
&gt;&gt; Jem Young: That's the key zone.

81
00:04:36.093 --> 00:04:41.350
Key zone equals so

82
00:04:41.350 --> 00:04:46.257
file_cache and

83
00:04:46.257 --> 00:04:51.164
that will be 10

84
00:05:01.400 --> 00:05:03.069
&gt;&gt; Jem Young: That what it got me,

85
00:05:03.069 --> 00:05:07.731
keys_zone,
&gt;&gt; Jem Young: And

86
00:05:07.731 --> 00:05:15.068
we're gonna say use_tmp_path=off

87
00:05:17.820 --> 00:05:18.480
&gt;&gt; Jem Young: Look good so

88
00:05:18.480 --> 00:05:22.732
far.
&gt;&gt; Jem Young: Right,

89
00:05:22.732 --> 00:05:27.051
everybody there just one long
statement terminated by a semicolon.

90
00:05:30.649 --> 00:05:32.129
&gt;&gt; Jem Young: All right.

91
00:05:32.129 --> 00:05:34.746
Next, we're our proxy_cache_key, so

92
00:05:34.746 --> 00:05:38.609
how do we wanna differentiate
things that we're gonna cache?

93
00:05:38.609 --> 00:05:43.462
We can get very fine grains, so
we can say a request coming to

94
00:05:43.462 --> 00:05:48.431
HTTP use a different cache
then something at HTTPS.

95
00:05:48.431 --> 00:05:51.784
You can get actually very,
very nuanced on how fun For

96
00:05:51.784 --> 00:05:53.990
now we're just gonna say request URIs.

97
00:05:53.990 --> 00:05:58.882
So, the URL that you're requesting,
we're gonna use that as a cache too,

98
00:05:58.882 --> 00:06:01.337
that's it nothing too complicated.

99
00:06:01.337 --> 00:06:05.554
But again if you wanna get nuanced,
you can, I wouldn't recommend it.

100
00:06:05.554 --> 00:06:08.058
But hey that's what I say.

101
00:06:08.058 --> 00:06:13.531
So, let's add in the proxy cache key.
&gt;&gt; Jem Young: And

102
00:06:13.531 --> 00:06:19.961
we're gonna say that was say, request_uri,

103
00:06:19.961 --> 00:06:25.598
one word or two, underscore, awesome.

104
00:06:32.811 --> 00:06:35.937
&gt;&gt; Jem Young: Okay, okay, looking good so

105
00:06:35.937 --> 00:06:36.566
far.

106
00:06:36.566 --> 00:06:41.475
I'll give everybody a minute.
&gt;&gt; Speaker 3: Does it

107
00:06:41.475 --> 00:06:45.796
use tmp or temp for template?

108
00:06:45.796 --> 00:06:52.408
&gt;&gt; Jem Young: Temp.
&gt;&gt; Jem Young: Does

109
00:06:52.408 --> 00:06:53.042
that answer the question?

110
00:06:53.042 --> 00:06:57.242
Sorry.
&gt;&gt; Speaker 3: Yeah I think you have tmp on

111
00:06:57.242 --> 00:07:01.928
the /tmpnginx.
&gt;&gt; Jem Young: On the last part of

112
00:07:01.928 --> 00:07:06.427
it where it says use_tmp.
&gt;&gt; Speaker 3: Yeah.

113
00:07:06.427 --> 00:07:09.523
&gt;&gt; Jem Young: Good catch, thank you.

114
00:07:09.523 --> 00:07:12.243
That would have been one of
those things that I'm like, why?

115
00:07:12.243 --> 00:07:14.843
I copied everything correctly.

116
00:07:14.843 --> 00:07:16.211
Thank you.

117
00:07:16.211 --> 00:07:24.996
And save.

118
00:07:34.875 --> 00:07:35.622
&gt;&gt; Jem Young: All right,

119
00:07:35.622 --> 00:07:39.882
so right now we've told the Nginx
kind of where the cache should be,

120
00:07:39.882 --> 00:07:41.392
what the key should be.

121
00:07:41.392 --> 00:07:45.364
Now let's tell it how to cache things and
which path we want it to cache for.

122
00:07:57.354 --> 00:07:59.258
&gt;&gt; Jem Young: So we only want the cash to

123
00:07:59.258 --> 00:08:04.473
run on slowfile because that's
the file that's really slow.

124
00:08:04.473 --> 00:08:10.268
Adding expires headers to it
won't really help at all.

125
00:08:10.268 --> 00:08:13.841
But we can solve that
problem with nginx caching.

126
00:08:13.841 --> 00:08:17.222
So what we're doing is we're
saying proxy_cache_valid.

127
00:08:17.222 --> 00:08:20.117
How long is this cache gonna
be valid before the expiry?

128
00:08:20.117 --> 00:08:23.179
I'm gonna say one minute, which is fine.

129
00:08:23.179 --> 00:08:26.352
Beware of over caching and
setting your time to expire too long.

130
00:08:26.352 --> 00:08:31.264
Because at this point, once I'm caching
on the server, there's nothing I can

131
00:08:31.264 --> 00:08:35.463
do on the client side to get a fresh
copy if I set my cache way too long.

132
00:08:35.463 --> 00:08:37.646
I've done this before so I'm telling you.

133
00:08:37.646 --> 00:08:41.106
I set my cache like, yeah,
set it for a couple days.

134
00:08:41.106 --> 00:08:43.775
Don't worry about it,
then I was like, crap,

135
00:08:43.775 --> 00:08:46.205
I need to change some
JavaScript real quick.

136
00:08:46.205 --> 00:08:49.739
I reload the page, I harder load,
empty the cache it doesn't do anything,

137
00:08:49.739 --> 00:08:51.837
cuz the cache is on
a server at this point, and

138
00:08:51.837 --> 00:08:54.563
as the client there is nothing
you can do about that at all.

139
00:08:54.563 --> 00:08:58.911
So, don't make your cache too long,
just long enough.

140
00:08:58.911 --> 00:09:03.644
So we're saying proxy_cache_valid 1m fine.
&gt;&gt; Jem Young: We're adding

141
00:09:03.644 --> 00:09:07.588
ignore headers in here and
I'll talk about that in a minute.

142
00:09:07.588 --> 00:09:11.946
But for now we're saying cache control
which is normally something honored by

143
00:09:11.946 --> 00:09:14.862
nginx saying, hey,
I've had some cache control.

144
00:09:14.862 --> 00:09:15.958
Don't cache it.

145
00:09:15.958 --> 00:09:18.100
It won't read a cache.

146
00:09:18.100 --> 00:09:20.656
It will respect that and
get a fresh copy every single time.

147
00:09:20.656 --> 00:09:25.429
In this instance, we don't because
browsers, Chrome by default when you first

148
00:09:25.429 --> 00:09:30.009
hit a page, will always send cache control
no cache, try to get a fresh copy.

149
00:09:30.009 --> 00:09:32.142
In this particular instance,
we don't wanna do that.

150
00:09:32.142 --> 00:09:38.904
We wanna cache copy every single time.
&gt;&gt; Jem Young: So

151
00:09:38.904 --> 00:09:41.549
then we can add our header.

152
00:09:41.549 --> 00:09:45.539
So if you want to add any header
to nginx just add _header.

153
00:09:45.539 --> 00:09:47.160
And remember how we said the x status,

154
00:09:47.160 --> 00:09:49.946
x whatever is a way of just sending
out information to the client,

155
00:09:49.946 --> 00:09:52.798
it's not necessarily relevant to
the processing of the request?

156
00:09:52.798 --> 00:09:56.616
In this case we want to send a header
that says are we hitting the cache or

157
00:09:56.616 --> 00:09:58.254
are we not hitting the cache?

158
00:09:58.254 --> 00:10:00.972
We do that with the X-Proxy-Cache header.

159
00:10:00.972 --> 00:10:05.155
And we're just gonna say _cache_status.

160
00:10:05.155 --> 00:10:09.051
So it's gonna say either,
hit, miss, or expired.

161
00:10:09.051 --> 00:10:11.547
In the first case it's gonna be
missed because nothing is cached.

162
00:10:11.547 --> 00:10:13.413
The second time it should be a hit.

163
00:10:13.413 --> 00:10:17.038
Really useful for debugging if you have
an issue with, is it hitting a cache?

164
00:10:17.038 --> 00:10:17.854
Is it not hitting a cache?

165
00:10:17.854 --> 00:10:22.169
Cuz otherwise it's very difficult to tell
other than the speed of the request.

166
00:10:22.169 --> 00:10:24.242
Next, what's the cache we're gonna use?

167
00:10:24.242 --> 00:10:27.234
Remember in key zone,
we called it slow file cache,

168
00:10:27.234 --> 00:10:30.090
we're just saying this is
the cache we wanna use.

169
00:10:30.090 --> 00:10:32.707
And as always, we proxy_pass to node, and

170
00:10:32.707 --> 00:10:35.624
if we don't do this it will
just try to hit slash.

171
00:10:35.624 --> 00:10:39.260
So when you try it in slow file,
that's gonna redirect the slash, so

172
00:10:39.260 --> 00:10:41.140
we make sure we pass it to slow file,

173
00:10:41.140 --> 00:10:44.969
the actual place where it should be going.
&gt;&gt; Speaker 4: Is there any reason

174
00:10:44.969 --> 00:10:47.861
we're not using HTTPS there?
&gt;&gt; Jem Young: Yes,

175
00:10:47.861 --> 00:10:52.153
because at that point we'd have to
add HTTPS to node to decrypt that.

176
00:10:52.153 --> 00:10:55.203
And so we'd have to add
certificate to be able to do that.

177
00:10:55.203 --> 00:10:55.857
We could do it.

178
00:10:55.857 --> 00:10:58.476
It's just kind of excess work that-
&gt;&gt; Speaker 4: That's what you were talking

179
00:10:58.476 --> 00:11:01.019
about with like tunnelling to-
&gt;&gt; Jem Young: Yeah, so we could do it, but

180
00:11:01.019 --> 00:11:02.251
since we own the server and

181
00:11:02.251 --> 00:11:06.116
I'm not too worried about someone who's
on my server reading traffic coming in.

182
00:11:06.116 --> 00:11:08.915
Because if they're on my server at
this point I have bigger problems.

183
00:11:08.915 --> 00:11:13.078
But if we wanted to or if we wanted to
redirect to a complete different server we

184
00:11:13.078 --> 00:11:15.010
can add HTTPS to keep it encrypted.

185
00:11:15.010 --> 00:11:19.623
But in general I think most
organizations do not tunnel HTTPS

186
00:11:19.623 --> 00:11:24.519
traffic around because it adds
load on the application server.

187
00:11:24.519 --> 00:11:27.090
So when I say server server, I mean node,

188
00:11:27.090 --> 00:11:32.016
like a node server return something
versus that's an application server which

189
00:11:32.016 --> 00:11:35.561
is nginx which is just your
server server reverse proxy.

190
00:11:35.561 --> 00:11:40.105
Again if you do it in node it's gotta
decrypt those, it's gonna add loads to

191
00:11:40.105 --> 00:11:44.872
your pipeline that you probably don't
need to be, but great question though.

192
00:11:44.872 --> 00:11:46.625
I like questions.

193
00:11:46.625 --> 00:11:53.120
Okay, everybody done editing their
slow file block, location block?

194
00:11:53.120 --> 00:11:57.326
Okay, so I am gonna go ahead and
do that now.

195
00:11:57.326 --> 00:11:59.014
And I'll just put it above here

196
00:12:11.196 --> 00:12:12.370
&gt;&gt; Jem Young: What was
the first thing I said?

197
00:12:12.370 --> 00:12:15.752
Proxy cache valid.

198
00:12:15.752 --> 00:12:17.355
Wait, did I cheat?

199
00:12:17.355 --> 00:12:17.966
Did I put this in?

200
00:12:17.966 --> 00:12:18.964
Darn it.

201
00:12:18.964 --> 00:12:21.641
[LAUGH] I thought I put it in the speaker
notes so I could copy and paste.

202
00:12:21.641 --> 00:12:27.135
Now we're gonna do it the hard way,
it's okay,

203
00:12:27.135 --> 00:12:33.032
proxy_cache_valid let's
say one minute what's

204
00:12:33.032 --> 00:12:37.999
my next slide, proxy_ignore_headers.

205
00:12:48.234 --> 00:12:50.171
&gt;&gt; Jem Young: Then we're gonna add

206
00:12:50.171 --> 00:12:55.232
the downstream header,
it's called X-Proxy cache.

207
00:13:15.242 --> 00:13:17.318
&gt;&gt; Jem Young: Proxy cache.

208
00:13:24.246 --> 00:13:26.565
&gt;&gt; Jem Young: And proxy-pass it all in two

209
00:13:26.565 --> 00:13:27.146
node.

210
00:13:44.073 --> 00:13:48.669
&gt;&gt; Jem Young: Awesome, well we'll see if
it's awesome if I did this correctly.

211
00:13:48.669 --> 00:13:54.590
And let's go ahead and
write save and let's run our tester,

212
00:13:54.590 --> 00:13:59.709
invalid param, so
I typed something incorrectly.

213
00:13:59.709 --> 00:14:01.997
Let's see what I mistyped, levels.

214
00:14:01.997 --> 00:14:04.794
Darn it, I knew something was gonna get me

215
00:14:11.449 --> 00:14:12.582
&gt;&gt; Jem Young: Actually,

216
00:14:12.582 --> 00:14:15.078
I'll leave that for now.

217
00:14:15.078 --> 00:14:20.917
So if I said sudo service nginx restart,

218
00:14:20.917 --> 00:14:26.249
it just gives me this generic error.

219
00:14:26.249 --> 00:14:28.701
Because there's something error but
it's not telling me what.

220
00:14:28.701 --> 00:14:32.073
That's why again, it's always been
officially run in nginx -t just to

221
00:14:32.073 --> 00:14:33.620
validate your configuration file.

222
00:14:33.620 --> 00:14:35.782
And it tells me about I
misspelled something.

223
00:14:35.782 --> 00:14:40.215
So now let's just fix

224
00:14:40.215 --> 00:14:44.899
that levels and nope.

225
00:14:44.899 --> 00:14:47.616
Still did something wrong again.

226
00:14:47.616 --> 00:14:48.704
Inactive.

227
00:14:53.868 --> 00:14:58.921
&gt;&gt; Jem Young: It's an equal sign,

228
00:14:58.921 --> 00:15:02.012
not a colon.

229
00:15:02.012 --> 00:15:06.976
Yes, apologies if you copied exactly
what I just did because It was wrong.

230
00:15:10.504 --> 00:15:14.477
&gt;&gt; Jem Young: Equals, all right.

231
00:15:14.477 --> 00:15:15.839
Darn it.

232
00:15:15.839 --> 00:15:22.010
proxy_ignore_header.
&gt;&gt; Jem Young: Headers,

233
00:15:22.010 --> 00:15:31.902
it's so pedantic.
&gt;&gt; Jem Young: Okay I'm feeling good.

234
00:15:31.902 --> 00:15:33.051
Feeling good about this one.

235
00:15:33.051 --> 00:15:34.665
Think I got it.

236
00:15:34.665 --> 00:15:38.473
Anybody over under, $10 got it right, no.
&gt;&gt; Speaker 2: Well I

237
00:15:38.473 --> 00:15:39.776
had-
&gt;&gt; Speaker 2: You got it.

238
00:15:39.776 --> 00:15:40.601
&gt;&gt; Jem Young: Yeah.

239
00:15:40.601 --> 00:15:41.243
&gt;&gt; Speaker 2: So-

240
00:15:41.243 --> 00:15:44.510
&gt;&gt; Jem Young: [LAUGH] Nobody's perfect.

241
00:15:44.510 --> 00:15:48.968
I make mistakes the same as everybody even
though when I'm copying from a slide.

242
00:15:48.968 --> 00:15:51.673
All right, so we should be good now.

243
00:15:51.673 --> 00:15:55.005
If you have any errors ngnx
should tell you where they're at.

244
00:15:55.005 --> 00:15:56.875
But let's make sure the cache is working.

245
00:15:56.875 --> 00:15:58.924
So now let's reload Nginx.

246
00:15:58.924 --> 00:16:02.721
sudo service nginx.

247
00:16:02.721 --> 00:16:05.694
Restart or reload.
&gt;&gt; Speaker 2: Did anyone else get

248
00:16:05.694 --> 00:16:10.512
invalid number of arguments and
proxy_cache_directive?

249
00:16:10.512 --> 00:16:13.047
&gt;&gt; Jem Young: Proxy_cache_directive.

250
00:16:13.047 --> 00:16:14.566
&gt;&gt; Speaker 2: Yeah, it was from actually

251
00:16:14.566 --> 00:16:17.087
from the set of changes
we made after I got it.

252
00:16:17.087 --> 00:16:22.015
And it looks like I
have the stuff correct.

253
00:16:22.015 --> 00:16:23.762
&gt;&gt; Jem Young: Proxy_cache_directive, so

254
00:16:23.762 --> 00:16:28.865
you have proxy_cache_path,
&gt;&gt; Jem Young: Then you

255
00:16:28.865 --> 00:16:34.480
have your cache key.
&gt;&gt; Speaker 2: No underscore between path.

256
00:16:34.480 --> 00:16:35.239
&gt;&gt; Jem Young: It's very,

257
00:16:35.239 --> 00:16:37.663
very temperamental, but that's okay.

258
00:16:37.663 --> 00:16:41.084
I'd rather it fail loudly than fail
quietly and I'll just be like,

259
00:16:41.084 --> 00:16:48.031
what's happening?
&gt;&gt; Jem Young: So now let's give it a shot,

260
00:16:48.031 --> 00:16:52.322
let's see if if I did things correctly.

261
00:16:52.322 --> 00:16:56.274
First load file,
it's still gonna take about six seconds.

262
00:16:56.274 --> 00:16:59.482
Hopefully, the second time
it's gonna be faster.

263
00:16:59.482 --> 00:17:02.523
So we see in the, now the response header,

264
00:17:02.523 --> 00:17:07.564
we're setting down it's a cache miss,
so let's see if I can't.

265
00:17:07.564 --> 00:17:09.045
Look how fast that was.

266
00:17:09.045 --> 00:17:12.140
Remember this used to take six seconds,
now it's 200 milliseconds?

267
00:17:12.140 --> 00:17:14.718
And so it's a cache hit every single time.

268
00:17:14.718 --> 00:17:18.422
So this is the power of
caching on the client side and

269
00:17:18.422 --> 00:17:20.502
we cache on the server side.

270
00:17:20.502 --> 00:17:24.542
But the tricky part, as stated before,
if you cache on the server side.

271
00:17:24.542 --> 00:17:27.352
Yeah it's fast,
yeah it may seem magical, but

272
00:17:27.352 --> 00:17:30.105
if you set your cache too long,
incorrectly.

273
00:17:30.105 --> 00:17:33.836
The client's always gonna be getting
a cache copy, a stale copy of your site.

274
00:17:33.836 --> 00:17:37.322
And there's nothing you can do about it
other than you'd have to reload nginx,

275
00:17:37.322 --> 00:17:38.947
clear the cache, things like that.

276
00:17:38.947 --> 00:17:42.413
That's why you don't get too
overzealous with caching,

277
00:17:42.413 --> 00:17:46.812
only cache the things that you know
you're gonna turn instantaneously.

278
00:17:46.812 --> 00:17:47.708
Everybody with me?

279
00:17:47.708 --> 00:17:49.009
We learned that caching is,

280
00:17:49.009 --> 00:17:54.607
it's a hard problem in computer science.
&gt;&gt; Jem Young: Excellent, so if I

281
00:17:54.607 --> 00:17:58.372
come back to this page in a minute because
the cache is only valid for a minute.

282
00:17:58.372 --> 00:18:03.055
We're gonna get a cache miss
again because the cache expired,

283
00:18:03.055 --> 00:18:05.182
it has to rebake that cache.

284
00:18:05.182 --> 00:18:07.901
Ever heard the term warming the cache?

285
00:18:07.901 --> 00:18:09.681
Anybody ever heard that term?

286
00:18:09.681 --> 00:18:11.748
So the process of warming
cache is the saying,

287
00:18:11.748 --> 00:18:15.366
I'm gonna make a bunch of requests to make
sure that cache is populated by Nginx.

288
00:18:15.366 --> 00:18:18.930
That way the next person that comes to
the site is gonna have a cache hit every

289
00:18:18.930 --> 00:18:19.617
single time.

290
00:18:19.617 --> 00:18:23.336
So at this point I'm paying the cost of
warming the cache for everybody else.

291
00:18:23.336 --> 00:18:26.524
Whereas if you go to jem.party right now,
you're gonna get a cache hit,

292
00:18:26.524 --> 00:18:27.717
because the cache is warm.

293
00:18:27.717 --> 00:18:30.542
So warm cache versus cold cache,
make sense?

294
00:18:30.542 --> 00:18:34.058
Like the cache is hot, it's being used.

295
00:18:34.058 --> 00:18:37.614
Sort of part of your build process
often is warming the cache.

296
00:18:37.614 --> 00:18:41.392
So it'll just make automatic, it'll
make query requests to your page just so

297
00:18:41.392 --> 00:18:43.408
nginx knows how to cache those requests.

298
00:18:43.408 --> 00:18:48.058
And then later it'll be hot for
for everybody else.

299
00:18:48.058 --> 00:18:50.087
So if you ever hear
the phrase warming the cache,

300
00:18:50.087 --> 00:18:51.882
now you know what they're talking about.

301
00:18:51.882 --> 00:18:52.602
It been a minute yet?

302
00:18:52.602 --> 00:18:54.568
Let's give it a shot, it's been a minute.

303
00:18:54.568 --> 00:18:59.257
So the cache is already expired,
this why slow file is gonna be slow again.

304
00:18:59.257 --> 00:19:02.582
But once I hit it again,
yep, it's expired.

305
00:19:02.582 --> 00:19:08.903
So if I hit it again, cache hit, yes?
&gt;&gt; Speaker 5: Is there a general rule

306
00:19:08.903 --> 00:19:14.817
of thumb along the assets to be cached,
stay away from caching?

307
00:19:14.817 --> 00:19:18.506
Again, it sounds like it's a hard problem.
&gt;&gt; Jem Young: It's a hard problem,

308
00:19:18.506 --> 00:19:23.038
I think easy things like favorite icons,
which aren't gonna change that often.

309
00:19:23.038 --> 00:19:28.136
If you have some base styles you wanna
cache, but again, you're caching it and

310
00:19:28.136 --> 00:19:33.254
then there'll be that one time you need
to fix something and the cache is stale.

311
00:19:33.254 --> 00:19:35.174
Then you have to clear your cache and

312
00:19:35.174 --> 00:19:39.466
restart nginx, which in our case is
trivial, because it's one nginx server.

313
00:19:39.466 --> 00:19:43.912
But imagine thousands and restarting that
and cleaning a cache across 1,000 servers.

314
00:19:43.912 --> 00:19:46.955
That's the kinda scale you have to think
about why we do things that hard way

315
00:19:46.955 --> 00:19:47.494
sometimes.

316
00:19:47.494 --> 00:19:52.408
But the pay off is because,
at scale, things get pretty gnarly.

317
00:19:52.408 --> 00:19:55.828
But great question, and if I knew the flat
answer, I would be a very rich man.

318
00:19:55.828 --> 00:20:01.538
There is no one strategy for
cache invalidation, things like that.

