WEBVTT

1
00:00:00.120 --> 00:00:01.060
&gt;&gt; Jem Young: Let's talk
about shell scripting.

2
00:00:01.060 --> 00:00:04.800
So we can write scripts that only
run on our shell, they don't

3
00:00:04.800 --> 00:00:07.380
open up to any external programmes,
they don't do anything like that.

4
00:00:07.380 --> 00:00:11.080
Shell scripting very useful, why?

5
00:00:11.080 --> 00:00:15.306
Only two reason,
they're simple, and affordable.

6
00:00:15.306 --> 00:00:18.111
Simple being, I don't know,
we can run that fine command,

7
00:00:18.111 --> 00:00:21.136
we can run through all these things,
I'll put that to a log file,

8
00:00:21.136 --> 00:00:23.233
we can do all sort of
things in a Shell script.

9
00:00:23.233 --> 00:00:26.298
And it's just simple cause you start to
know these commands like the back of your

10
00:00:26.298 --> 00:00:28.551
hand Like, you know fine,
you know grep, you know Nmap.

11
00:00:28.551 --> 00:00:32.754
You can do lots of things with just
shell scripting, so it's simple,

12
00:00:32.754 --> 00:00:35.686
it's portable in that
we're all running bash.

13
00:00:35.686 --> 00:00:37.505
Everybody here is running bash right now,
hopefully.

14
00:00:37.505 --> 00:00:39.067
So if I read a bash script,

15
00:00:39.067 --> 00:00:44.122
it's gonna run on your machine just fine
cause bash is a pretty standardized shell.

16
00:00:44.122 --> 00:00:47.593
So you're saying why shell scripting and
not, I don't know,

17
00:00:47.593 --> 00:00:50.881
writing a Python script or
a PHP script, things like that?

18
00:00:50.881 --> 00:00:53.713
The benefit is when you write a shell
script it doesn't have to open any

19
00:00:53.713 --> 00:00:54.629
external processes.

20
00:00:54.629 --> 00:00:58.116
It doesn't have to open up a compiler,
an interpreter, things like that,

21
00:00:58.116 --> 00:01:01.170
it just runs by default cuz
they're portable, they're simple.

22
00:01:01.170 --> 00:01:06.318
A word of warning, shell scripting is not
the fast way to do things a lot of times.

23
00:01:06.318 --> 00:01:09.943
If you wanna run something repeatedly
like, I don't know, appending to a log,

24
00:01:09.943 --> 00:01:12.038
you're doing that thousand
of time a second.

25
00:01:12.038 --> 00:01:13.229
It's partly barely you see or

26
00:01:13.229 --> 00:01:16.288
even a better scripting language
because that's what they're built for.

27
00:01:16.288 --> 00:01:20.244
Shell scripting is for writing simple
repeatable task that you are just like,

28
00:01:20.244 --> 00:01:22.747
I know how to do that because
I know my Unix commands.

29
00:01:22.747 --> 00:01:25.093
That's the benefit of shell scripting.

30
00:01:25.093 --> 00:01:27.699
Any questions on shell scripting?

31
00:01:27.699 --> 00:01:29.539
Nobody?

32
00:01:29.539 --> 00:01:34.042
&gt;&gt; Speaker 2: How do you make a shell
script excludable almost every time?

33
00:01:34.042 --> 00:01:36.903
&gt;&gt; Jem Young: Great question, you got that
money I sent you, in the red envelope.

34
00:01:36.903 --> 00:01:38.472
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Jem Young: We will cover that in one

35
00:01:38.472 --> 00:01:40.297
second because that is a great question.

36
00:01:40.297 --> 00:01:44.485
So, let's cover just kinda
the anatomy of the Bash shell.

37
00:01:44.485 --> 00:01:47.753
I'm not gonna ask you to write
anything that's complicated, but

38
00:01:47.753 --> 00:01:50.858
if you see a shell script,
you'll say, I know what that is.

39
00:01:54.939 --> 00:01:58.263
&gt;&gt; Jem Young: First one is, we have
to start our command we have to start

40
00:01:58.263 --> 00:02:02.628
our file, a shell script with this it's
just saying like here's how I want

41
00:02:02.628 --> 00:02:06.183
to execute this, I want to
execute using this type of shell.

42
00:02:06.183 --> 00:02:11.273
That the hashbang is actually called
a shebang you can Google that right now.

43
00:02:11.273 --> 00:02:13.781
Shebang it's a real thing
it has an actual phrase and

44
00:02:13.781 --> 00:02:17.040
when we write note scripts we'll
see that instead of bin slash ssh.

45
00:02:17.040 --> 00:02:20.407
We're going to write bin slash
node usr bin slash node.

46
00:02:20.407 --> 00:02:23.329
This is just saying I wanna run
this file as a shell script.

47
00:02:25.820 --> 00:02:30.270
&gt;&gt; Jem Young: You can ignore the trap for
now, trap is just saying, well,

48
00:02:30.270 --> 00:02:31.938
how deep do I wanna go.

49
00:02:31.938 --> 00:02:36.328
Does everybody know about
interrupts on a system?

50
00:02:36.328 --> 00:02:39.097
Okay [LAUGH] I'll talk about it briefly.

51
00:02:39.097 --> 00:02:41.104
In any given you have a program running.

52
00:02:41.104 --> 00:02:43.041
That program has to handle interruptions.

53
00:02:43.041 --> 00:02:47.289
So the user hitting Control-C,
is an example of an interrupt.

54
00:02:47.289 --> 00:02:50.276
You have to handle that at some point or
otherwise, your system can just crash,

55
00:02:50.276 --> 00:02:52.727
you'll be in a weird state where
you're writing some memories,

56
00:02:52.727 --> 00:02:53.726
reading through memory.

57
00:02:53.726 --> 00:02:56.420
This traffic is saying I'm
gonna handle interrupts and

58
00:02:56.420 --> 00:02:57.975
I'm not gonna let people exit.

59
00:02:57.975 --> 00:03:03.134
In general, you trap shell scripting
because you can get trapped in your shell.

60
00:03:03.134 --> 00:03:05.597
Cuz again, it's a trap, so
you hit Control C, Control D, Control Q,

61
00:03:05.597 --> 00:03:06.427
it won't do anything.

62
00:03:06.427 --> 00:03:09.704
Cuz it's saying I know you're trying
to quit, but I'm not gonna let you.

63
00:03:09.704 --> 00:03:11.100
So in general don't do that.

64
00:03:11.100 --> 00:03:13.510
But it's good to be aware
of what trapped is.

65
00:03:13.510 --> 00:03:19.747
If you wanna execute standard commands
we just put it in the grave marker,

66
00:03:19.747 --> 00:03:23.691
that's the slash, I think right?

67
00:03:23.691 --> 00:03:27.826
G-A-R-V-E with a little fanciness on it.

68
00:03:27.826 --> 00:03:31.514
But, [LAUGH] it's on here to the key,
that's a [INAUDIBLE] marker.

69
00:03:31.514 --> 00:03:35.433
So that's just saying I
wanna execute this command.

70
00:03:35.433 --> 00:03:38.171
So I'm gonna find all
log files an search for

71
00:03:38.171 --> 00:03:42.020
a log that has been modified in
the past day, that's in time.

72
00:03:42.020 --> 00:03:47.112
I'm just going to put that, and hold
that centered out in my files variable.

73
00:03:47.112 --> 00:03:51.460
Echo, of course,
is just putting stuff on screen, and

74
00:03:51.460 --> 00:03:55.544
our wild loop that says we
want to ask the questions.

75
00:03:55.544 --> 00:03:59.466
We want to read from the input, or
we want to read from the console,

76
00:03:59.466 --> 00:04:00.671
save that as input.

77
00:04:00.671 --> 00:04:04.980
And we're going to hold the program there,
and we're going to say, for

78
00:04:04.980 --> 00:04:07.395
every input we want to say why, whoops.

79
00:04:07.395 --> 00:04:09.698
If we want to say yes,
delete all the files,

80
00:04:09.698 --> 00:04:13.082
delete all the old files that have
been modified in the last day.

81
00:04:13.082 --> 00:04:16.774
I don't know why you would do that,
but it's an example, and

82
00:04:16.774 --> 00:04:19.625
to get the variables that
we declared up above.

83
00:04:19.625 --> 00:04:23.457
So here we just put a dollar sign on it.

84
00:04:23.457 --> 00:04:24.257
And that's it.

85
00:04:24.257 --> 00:04:27.829
And yeah,
maybe not the most elegant example, but

86
00:04:27.829 --> 00:04:30.583
this is actually pretty easy to write.

87
00:04:30.583 --> 00:04:33.930
You don't have to think about node,
how do I open FS?

88
00:04:33.930 --> 00:04:34.859
How do I read from a file?

89
00:04:34.859 --> 00:04:36.266
How do I do that asynchronously?

90
00:04:36.266 --> 00:04:40.256
With a shell script you just do it, you
can just run any Unix commands you want.

91
00:04:40.256 --> 00:04:42.382
Handle the standard out,
handle the standard in.

92
00:04:44.562 --> 00:04:46.704
&gt;&gt; Jem Young: Okay,
no one looks that confused.

93
00:04:46.704 --> 00:04:51.608
It's one of these things that once you do
it over and over again you're like, yeah.

94
00:04:51.608 --> 00:04:54.962
It's your default go to just to write
a quick shell script to do something.

