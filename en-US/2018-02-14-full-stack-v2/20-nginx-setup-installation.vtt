WEBVTT

1
00:00:00.180 --> 00:00:02.570
&gt;&gt; Jem Young: Yes,
part four where it gets interesting.

2
00:00:02.570 --> 00:00:06.140
So we're gonna go over nginx we're gonna
install that, we're gonna set it up.

3
00:00:06.140 --> 00:00:09.860
Talk about a little bit why on HTTPS
we covered it at the tail end of

4
00:00:09.860 --> 00:00:13.280
the last course, but
let's talk about it a little bit more.

5
00:00:13.280 --> 00:00:16.010
We're gonna talk about how to get
a certificate aka how to get that cool

6
00:00:16.010 --> 00:00:20.360
lock icon then we're gonna
talk about Cron, Cron jobs.

7
00:00:20.360 --> 00:00:23.415
Yes, Cron doesn't stand for
anything as far as I know,

8
00:00:23.415 --> 00:00:25.824
maybe it does we'll talk about that later.

9
00:00:25.824 --> 00:00:30.265
So let's install nginx on our
box then we're gonna proxy

10
00:00:30.265 --> 00:00:32.959
traffic through our node server.

11
00:00:32.959 --> 00:00:35.858
Then we're gonna add
a domain name to nginx,

12
00:00:35.858 --> 00:00:40.780
then we're gonna open up port 443,
that's our secure port.

13
00:00:40.780 --> 00:00:43.960
Then we are going to reload nginx,
so I will give you a minute or

14
00:00:43.960 --> 00:00:46.170
two, actually give you
a few minutes to catch up.

15
00:00:46.170 --> 00:00:48.930
And then I'll go ahead and
do that with you, and

16
00:00:48.930 --> 00:00:51.083
make sure we are all on the same page.

17
00:00:51.083 --> 00:00:52.470
All right, cool.

18
00:00:54.470 --> 00:00:58.574
So everybody remembers how to
install nginx, app sole nginx,

19
00:00:58.574 --> 00:01:00.131
kind of getting it now?

20
00:01:04.395 --> 00:01:06.487
&gt;&gt; Speaker 2: But
we don't wanna install it as root?

21
00:01:06.487 --> 00:01:07.866
&gt;&gt; Jem Young: Do not install it as root.

22
00:01:07.866 --> 00:01:09.871
Well, you generally have to install it,
anyways.

23
00:01:09.871 --> 00:01:14.658
You have say sudo app install nginx,
but we're not gonna run it as root.

24
00:01:14.658 --> 00:01:15.353
&gt;&gt; Speaker 2: Gotcha.

25
00:01:15.353 --> 00:01:17.324
&gt;&gt; [BLANK AUDIO]
&gt;&gt; Jem Young: And

26
00:01:17.324 --> 00:01:19.103
inside a proxy thinks a node.

27
00:01:26.032 --> 00:01:27.202
&gt;&gt; Jem Young: And important note,

28
00:01:27.202 --> 00:01:31.687
if you haven't set up your domain name to
point to your new server, pretty much all

29
00:01:31.687 --> 00:01:35.534
the HTTPS part is gonna be lost on
you because you didn't do that part.

30
00:01:35.534 --> 00:01:39.809
You just have to sit and
admire my shiny new icon.

31
00:01:41.520 --> 00:01:42.300
But if not, there's some.

32
00:01:42.300 --> 00:01:44.530
If you're having trouble with it,
just let me know.

33
00:01:44.530 --> 00:01:50.530
We can do a quick recap of part one on
A records or C names, that exciting stuff.

34
00:01:53.160 --> 00:01:56.879
So while you all working,
let's talk about Nginx,

35
00:01:56.879 --> 00:01:59.928
the difference between Nginx and Apache.

36
00:02:02.434 --> 00:02:03.210
&gt;&gt; Jem Young: Everybody is still working.

37
00:02:03.210 --> 00:02:04.320
All right, everybody wanna know.

38
00:02:06.170 --> 00:02:08.400
I got tired.
I'm full of delicious lunch.

39
00:02:08.400 --> 00:02:09.020
Thank you Tiana.

40
00:02:09.020 --> 00:02:10.830
See now, I have a lot of energy now.

41
00:02:10.830 --> 00:02:12.990
I'll just drink another soda.

42
00:02:12.990 --> 00:02:15.830
&gt;&gt; Speaker 3: I'm wondering why Nginx?

43
00:02:15.830 --> 00:02:17.207
Why not Apache?

44
00:02:17.207 --> 00:02:20.506
&gt;&gt; Jem Young: I'm glad you
asked that question [LAUGH].

45
00:02:20.506 --> 00:02:26.930
So Nginx as we talked about in
the last class is a reverse proxy.

46
00:02:26.930 --> 00:02:32.573
I'll just show you a slide it's a sweet
diagram that I made from the last class,

47
00:02:32.573 --> 00:02:36.460
but a reverse proxy is let's
pull this diagram, yes.

48
00:02:38.430 --> 00:02:41.070
So a normal proxy is a bunch
of things come out or

49
00:02:41.070 --> 00:02:45.130
they go out through a machine
to the Internet, that's a proxy.

50
00:02:45.130 --> 00:02:47.410
So when you use a VPN
that's a form of a proxy.

51
00:02:48.550 --> 00:02:49.770
Everybody know what a VPN is?

52
00:02:50.890 --> 00:02:51.550
All right.
A VPN

53
00:02:51.550 --> 00:02:54.160
is just a way of masking your
address on the Internet.

54
00:02:54.160 --> 00:02:57.780
Just saying instead of me
being 192.168.whatever,

55
00:02:57.780 --> 00:03:01.650
it won't be that address but
it's just a shared address.

56
00:03:01.650 --> 00:03:03.380
It's a good way of
bouncing your IP around.

57
00:03:03.380 --> 00:03:06.750
So if you wanna say, I don't know,
stream the olympics illegally on BBC,

58
00:03:06.750 --> 00:03:11.300
you can just use a VPN and
exit in London, things like that.

59
00:03:11.300 --> 00:03:12.750
That's a proxy.

60
00:03:12.750 --> 00:03:16.310
A reverse proxy is what Nginx is.

61
00:03:16.310 --> 00:03:19.377
So it's reverse, it's taking all that
traffic from the Internet to a specific

62
00:03:19.377 --> 00:03:21.407
machine and
then proxying it to some sort of server.

63
00:03:21.407 --> 00:03:25.594
So it could be a node, could be MySQL,
could just serve back an html page,

64
00:03:25.594 --> 00:03:27.670
that's reverse proxy.

65
00:03:27.670 --> 00:03:29.300
That's why Nginx is really really fast.

66
00:03:29.300 --> 00:03:31.920
Apache is more of a full fledged server.

67
00:03:31.920 --> 00:03:38.721
So it's a server that can handle requests,
it can process PHP, it can run programs.

68
00:03:38.721 --> 00:03:41.639
Whereas, Nginx is much simpler.

69
00:03:41.639 --> 00:03:44.538
I say simpler,
like in a very high-level simpler, but

70
00:03:44.538 --> 00:03:46.214
it's not as complex as Apache.

71
00:03:46.214 --> 00:03:50.200
It's generally a bit faster as well,
but it's not as full-featured.

72
00:03:50.200 --> 00:03:54.034
So because we're running node, we're
running Nginx because we don't need Apache

73
00:03:54.034 --> 00:03:56.093
to run node for us,
node runs fine on its own.

74
00:03:56.093 --> 00:03:59.834
But if we're running say PHP I would
use apache every time cuz it's really

75
00:03:59.834 --> 00:04:00.592
good at that.

76
00:04:00.592 --> 00:04:02.320
That help?

77
00:04:02.320 --> 00:04:03.562
Yes?

78
00:04:03.562 --> 00:04:06.490
&gt;&gt; Speaker 4: I'm a little bit confused
when you say it's proxy into node or

79
00:04:06.490 --> 00:04:09.643
whatever, what are the yellow arrows
on the right what does the big

80
00:04:09.643 --> 00:04:11.402
yellow arrow on the left represent?

81
00:04:11.402 --> 00:04:15.633
&gt;&gt; Jem Young: So the little yellow
arrows are requests just you, me,

82
00:04:15.633 --> 00:04:20.148
anybody trying to get to my
domain which is jammed up party.

83
00:04:20.148 --> 00:04:22.258
That's just all the requests coming in and

84
00:04:22.258 --> 00:04:24.953
they're all hitting your
machine your Nginx proxy and

85
00:04:24.953 --> 00:04:28.714
that's just taking all those requests and
then channeling them into node.

86
00:04:28.714 --> 00:04:31.098
Does that kind of clear
it up a little bit?

87
00:04:31.098 --> 00:04:33.772
&gt;&gt; Speaker 4: So
what happens if you didn't have proxy.

88
00:04:33.772 --> 00:04:35.181
&gt;&gt; Jem Young: It would just terminate.

89
00:04:35.181 --> 00:04:43.114
It would serve the default page
which looks like, find it.

90
00:04:43.114 --> 00:04:47.427
It looks like that,
serves the default welcome to Nginx page.

91
00:04:47.427 --> 00:04:50.290
Just kind of you're here, you're running.

92
00:04:50.290 --> 00:04:53.030
If you wanted to if you didn't wanna
run anything complicated you could

93
00:04:53.030 --> 00:04:56.480
have Nginx server just static files,
which we're gonna talk about a little bit.

94
00:04:56.480 --> 00:04:59.690
So it doesn't have to serve node if
you're just doing static HTTP, or

95
00:04:59.690 --> 00:05:04.900
a static website, you can just serve that
right out and it's really really fast.

96
00:05:04.900 --> 00:05:09.271
The benefit of this versus Apache is that,
Nginx scales to I don't know,

97
00:05:09.271 --> 00:05:11.471
everybody has their own benchmark.

98
00:05:11.471 --> 00:05:14.569
But it's something like they can
do 500,000 requests a second or

99
00:05:14.569 --> 00:05:16.360
something like that in one Nginx server.

100
00:05:16.360 --> 00:05:20.410
So Nginx is very very capable,
but it's kind of no frills.

101
00:05:20.410 --> 00:05:24.915
It doesn't do that much for you, and we're
gonna talk a bit more about how to scale

102
00:05:24.915 --> 00:05:28.130
Nginx if you wanted to,
if you had just a massive website.

103
00:05:36.499 --> 00:05:40.225
&gt;&gt; Jem Young: All right, so hopefully
we are all at least at step four,

104
00:05:40.225 --> 00:05:41.476
opening the port.

105
00:05:41.476 --> 00:05:44.666
So I'm gonna install Nginx.

106
00:05:44.666 --> 00:05:46.675
Save it, okay.

107
00:05:55.058 --> 00:05:55.810
&gt;&gt; Jem Young: Yes.

108
00:06:02.203 --> 00:06:06.374
&gt;&gt; Jem Young: Random tip, if you're doing
apt install and you're like, I'm tired of

109
00:06:06.374 --> 00:06:11.373
hitting yes, if you do apt install, that's
why it'll automatically hit yes for you.

110
00:06:11.373 --> 00:06:13.790
But you know just a random tip.

111
00:06:13.790 --> 00:06:15.869
There's also a command
I think it's on here.

112
00:06:15.869 --> 00:06:18.997
Yes this is an actual command.

113
00:06:18.997 --> 00:06:20.870
Yes just types y y y y y.

114
00:06:20.870 --> 00:06:24.269
It's for piping into programs your
just like yes yes yes yes yes.

115
00:06:24.269 --> 00:06:28.040
Instead of doing that there is literally
a Unix command to do that for you.

116
00:06:28.040 --> 00:06:29.120
That's all it does.

117
00:06:29.120 --> 00:06:34.783
If you type yes, you're gonna get lots
of y's, unrelated to most things.

