WEBVTT

1
00:00:00.230 --> 00:00:01.860
&gt;&gt; Jem Young: All right.
So we do all the fun things.

2
00:00:01.860 --> 00:00:03.510
We know how to search for things.

3
00:00:03.510 --> 00:00:05.170
We know how to search
the side file contents.

4
00:00:06.190 --> 00:00:10.080
Let's talk about redirection just briefly.

5
00:00:10.080 --> 00:00:13.530
Redirection is a thing that you've already
done at least probably once today.

6
00:00:13.530 --> 00:00:17.394
If you just ran this ps aux commanding
greps, you redirect it with a pipe.

7
00:00:17.394 --> 00:00:22.460
You redirected the standard
output into another program and

8
00:00:22.460 --> 00:00:24.210
we just ran through it.

9
00:00:24.210 --> 00:00:27.910
So, there's a few redirection operators.

10
00:00:27.910 --> 00:00:32.950
The ones we use all the time are PIPE, and

11
00:00:32.950 --> 00:00:36.870
this to me is one of the coolest
things about Unix in general and

12
00:00:36.870 --> 00:00:40.860
Linux, is that they have these operators.

13
00:00:40.860 --> 00:00:47.580
They're so powerful because it's a very
simple mindset on how to design systems.

14
00:00:47.580 --> 00:00:52.300
You have standard out, you have
standard in, you have standard error.

15
00:00:52.300 --> 00:00:57.530
So, most commands on Linux
do something with this.

16
00:00:57.530 --> 00:01:01.070
And it's so simple in its elegance
in that there's only three things.

17
00:01:01.070 --> 00:01:02.440
Standard out, what are we outputting?

18
00:01:02.440 --> 00:01:04.870
Standard in,
what are we reading from the file?

19
00:01:04.870 --> 00:01:06.841
If there's an error,
here's what we do with it.

20
00:01:06.841 --> 00:01:09.330
That's it.
That's all the things you have to handle.

21
00:01:09.330 --> 00:01:11.535
So knowing this, how to design systems,

22
00:01:11.535 --> 00:01:15.063
you can write commands that just
read standard out, standard in,

23
00:01:15.063 --> 00:01:18.670
and they're all uniform because
they all follow the same pattern.

24
00:01:18.670 --> 00:01:21.212
Redirection operators,
just a way of changing that.

25
00:01:21.212 --> 00:01:23.000
So we're saying find.

26
00:01:23.000 --> 00:01:26.508
Okay, I have all those files to put out,
I can pipe that into grep,

27
00:01:26.508 --> 00:01:28.397
I can look through all those files.

28
00:01:28.397 --> 00:01:31.381
And then I could just spit that out to
the console, I can write it to a file.

29
00:01:31.381 --> 00:01:34.029
That's the power of redirection operators.

30
00:01:34.029 --> 00:01:38.949
I know, as front-end developers, you're
probably like, yeah, that's pretty cool.

31
00:01:40.490 --> 00:01:41.820
Knowing this and
knowing what you know now,

32
00:01:41.820 --> 00:01:46.390
you can build really complex scripts
you can build really complex things

33
00:01:46.390 --> 00:01:49.990
that are so powerful,
just using standard operators.

34
00:01:49.990 --> 00:01:52.642
Because you're reading to a file, you're
writing to a file, you're handling errors.

35
00:01:52.642 --> 00:01:54.300
That's it.

36
00:01:54.300 --> 00:01:58.735
So, let's do some quick redirection, but
you'll see some a bit later in the course

37
00:01:58.735 --> 00:02:00.933
but these are just so
you know how to do it.

38
00:02:00.933 --> 00:02:03.629
How we write to a file.

39
00:02:03.629 --> 00:02:08.875
Knowing this, we just point to it,
right, send it out to a file.

40
00:02:08.875 --> 00:02:13.530
So, say ps aux foo, go ahead and
give that a shot if you want.

41
00:02:13.530 --> 00:02:15.608
You can just follow along at home.

42
00:02:18.442 --> 00:02:21.636
&gt;&gt; Jem Young: Nothing here,
nothing on my sleeve.

43
00:02:21.636 --> 00:02:28.127
And let's say ps aux and
I'm gonna write to a file called foo.

44
00:02:28.127 --> 00:02:29.856
What's that do?

45
00:02:29.856 --> 00:02:35.303
We can cat foo which exists now and all we
did was write the output into this file.

46
00:02:35.303 --> 00:02:37.913
You say, that's not that useful.

47
00:02:37.913 --> 00:02:41.468
Well it is, because with finding grep
we can actually do file filtering.

48
00:02:41.468 --> 00:02:45.020
We can find all directories,
let's just do it right now.

49
00:02:45.020 --> 00:02:48.280
What was that fancy thing
we did with the logs, yeah.

50
00:02:48.280 --> 00:02:52.700
Let's find all the logs and
lets write this to foolog.

51
00:02:55.670 --> 00:02:56.580
And for cat foolog.

52
00:03:00.430 --> 00:03:02.440
There, we just wrote all
these things to this file.

53
00:03:03.470 --> 00:03:05.380
And if you think, that's trivial,

54
00:03:05.380 --> 00:03:09.010
when am I ever use this,
what do we do most of the time?

55
00:03:09.010 --> 00:03:11.150
We're writing to a file or
we're reading to a file.

56
00:03:11.150 --> 00:03:12.640
Writing to this, reading from this.

57
00:03:12.640 --> 00:03:16.253
That's not the say computer in a nutshell,
but at its core, that's what we do.

58
00:03:16.253 --> 00:03:21.044
So if you know how to master these things,
you can chain a whole bunch of commands

59
00:03:21.044 --> 00:03:24.064
together and
I'll talk about it a bit more later.

60
00:03:24.064 --> 00:03:26.758
How to get more information
on redirection and shells.

61
00:03:26.758 --> 00:03:28.583
Because it gets good.

62
00:03:28.583 --> 00:03:32.909
So can anybody tell me what this does?

63
00:03:32.909 --> 00:03:35.664
I'll go back.

64
00:03:35.664 --> 00:03:40.029
We'd learned what these operators do, read
from standard in, write to standard out.

65
00:03:40.029 --> 00:03:41.061
What does this do?

66
00:03:45.255 --> 00:03:48.274
&gt;&gt; Jem Young: Anyway, take a guess,
there are no wrong answers.

67
00:03:48.274 --> 00:03:48.889
Wrong.

68
00:03:48.889 --> 00:03:50.689
[LAUGH] Yeah.

69
00:03:50.689 --> 00:03:54.439
&gt;&gt; Speaker 2: Reads from
foo in to bar then-

70
00:03:54.439 --> 00:03:55.367
&gt;&gt; Jem Young: Other way around.

71
00:03:55.367 --> 00:03:56.842
You have it.

72
00:03:56.842 --> 00:04:00.180
It reads from bar and
it writes, it reads from bar,

73
00:04:00.180 --> 00:04:03.610
puts it in the foo, and
then it spits it out into baz.

74
00:04:04.610 --> 00:04:05.750
That's pretty cool.

75
00:04:05.750 --> 00:04:10.370
So essentially, let's say you
have a configuration file and

76
00:04:10.370 --> 00:04:12.180
you have a script that reads
that configuration file.

77
00:04:12.180 --> 00:04:15.310
And you want to output the logs of foo.

78
00:04:15.310 --> 00:04:17.930
foo just reads configurations and
it takes it from bar.

79
00:04:17.930 --> 00:04:19.150
That's how you do it.

80
00:04:19.150 --> 00:04:22.650
It looks weird, the syntax kinda
just blows your mind a little bit,

81
00:04:22.650 --> 00:04:24.290
but that's really powerful.

82
00:04:24.290 --> 00:04:26.070
That's really cool.

83
00:04:26.070 --> 00:04:27.900
Yes.
&gt;&gt; Speaker 3: Is is the same as bar,

84
00:04:29.140 --> 00:04:31.470
two bars and then two foo?

85
00:04:31.470 --> 00:04:31.970
&gt;&gt; Jem Young: Bar to foo.

86
00:04:34.910 --> 00:04:37.636
&gt;&gt; Speaker 3: So bar greater than bar and
then greater than foo.

87
00:04:37.636 --> 00:04:39.689
Is it the same as this one?

88
00:04:39.689 --> 00:04:43.824
&gt;&gt; Jem Young: Not necessarily,
because if you do it the other way around.

89
00:04:43.824 --> 00:04:47.810
So, what you're asking
is correct the wrong,

90
00:04:47.810 --> 00:04:51.208
this to foo, then type that to baz that.

91
00:04:51.208 --> 00:04:52.871
Not necessarily the same way.

92
00:04:52.871 --> 00:04:55.418
Wait, which
&gt;&gt; Speaker 3: Can I see this slide?

93
00:04:55.418 --> 00:04:55.918
&gt;&gt; Jem Young: Yeah.

94
00:04:59.580 --> 00:05:01.044
&gt;&gt; Speaker 3: Foo would be the last one.

95
00:05:01.044 --> 00:05:02.262
&gt;&gt; Jem Young: Foo would be the last one.

96
00:05:02.262 --> 00:05:06.060
&gt;&gt; Speaker 3: Or this one,
yeah, that's the same, yeah.

97
00:05:06.060 --> 00:05:10.950
&gt;&gt; Jem Young: So no, this is saying,
I'm gonna execute bar.

98
00:05:10.950 --> 00:05:14.610
So bar is our configuration file,
we'll gonna execute bar.

99
00:05:14.610 --> 00:05:18.250
All the output there,
we're gonna send it to foo.

100
00:05:18.250 --> 00:05:19.570
And then we're gonna write it to baz,

101
00:05:19.570 --> 00:05:22.570
it's not the same thing as
reading the input from bar.

102
00:05:22.570 --> 00:05:23.230
&gt;&gt; Speaker 3: Yeah, I got it.

103
00:05:23.230 --> 00:05:27.550
&gt;&gt; Jem Young: So
if we wanna say, cat bar, maybe.

104
00:05:27.550 --> 00:05:29.120
Actually, that would work, too.

105
00:05:29.120 --> 00:05:33.117
But this avoids running cat, which is
another process you'd have to run.

106
00:05:33.117 --> 00:05:36.457
It's pretty small, pretty fast, but in
general you try not to run processes you

107
00:05:36.457 --> 00:05:39.226
don't have to, especially when
the shell will handle it for you.

108
00:05:39.226 --> 00:05:43.340
But that's an excellent question because
yes, they will do the same thing.

109
00:05:44.870 --> 00:05:47.040
But tell me this doesn't look cooler.

110
00:05:47.040 --> 00:05:48.130
Because you guys it's just like,

111
00:05:48.130 --> 00:05:50.480
you show someone this and
they don't know what's going on.

112
00:05:50.480 --> 00:05:53.430
To you it's simple, but if you've never
seen this before, this weird syntax,

113
00:05:53.430 --> 00:05:56.660
you'll feel like, whoa,
this person is like a computer genius.

114
00:05:56.660 --> 00:05:58.130
You're like yeah.

115
00:05:58.130 --> 00:05:58.630
Yeah, I know.

116
00:05:59.990 --> 00:06:04.320
So let's talk a bit about shells and
just, I'll jump ahead a little bit

117
00:06:05.980 --> 00:06:09.745
because I want to give a shoutout
to cuz while we're here.

118
00:06:09.745 --> 00:06:12.890
Dah-dah.

119
00:06:12.890 --> 00:06:14.250
All right.
James.

120
00:06:14.250 --> 00:06:14.930
Subsect.

121
00:06:14.930 --> 00:06:20.130
He has a course entirely on bash,
Vim, regX shells.

122
00:06:20.130 --> 00:06:22.910
He goes into so
much more detail than I would.

123
00:06:22.910 --> 00:06:25.430
We're just getting the high level,
just the good parts.

124
00:06:25.430 --> 00:06:26.810
He's gonna go into the nasty part too.

125
00:06:26.810 --> 00:06:30.280
It's a course on Frontend Masters, so
if you're here, you get it for free.

126
00:06:30.280 --> 00:06:32.040
I recommend checking that out.

127
00:06:32.040 --> 00:06:36.230
I bet he answers questions like that,
on how to pipe things properly, and

128
00:06:36.230 --> 00:06:37.510
he's a super nice guy.

129
00:06:37.510 --> 00:06:38.170
So I recommend that.

130
00:06:39.280 --> 00:06:40.850
Yes.
&gt;&gt; Speaker 4: We did have a question about

131
00:06:40.850 --> 00:06:45.040
the difference between the pipe and
the lesson, I think.

132
00:06:45.040 --> 00:06:47.710
Or, well, you're calling it.

133
00:06:47.710 --> 00:06:48.730
&gt;&gt; Jem Young: The pipe and the lesson?

134
00:06:48.730 --> 00:06:50.895
&gt;&gt; Speaker 4: Well, yes,
if you wanna check the chat.

135
00:06:50.895 --> 00:06:55.277
&gt;&gt; Jem Young: I don't understand
the difference between pipe and input.

136
00:06:55.277 --> 00:07:00.873
Yes, so pipe takes standard out from
one file and pipes it to the next file.

137
00:07:00.873 --> 00:07:02.175
So it reads it.

138
00:07:02.175 --> 00:07:05.084
The other way,
it's taking inputs from one file,

139
00:07:05.084 --> 00:07:08.816
as in it's reading some of the file
contents and putting that in.

140
00:07:08.816 --> 00:07:11.494
They're two different things,
because when a program writes,

141
00:07:11.494 --> 00:07:13.402
it writes the standard out or
standard error.

142
00:07:13.402 --> 00:07:17.415
So it's saying, I don't know whether
we wanna console log hello world on

143
00:07:17.415 --> 00:07:21.670
those scripts,
that's gonna be piped to the standard out.

144
00:07:21.670 --> 00:07:23.860
Versus reading from a file it
just reads the file directly.

145
00:07:26.000 --> 00:07:27.024
That make sense, hopefully?

146
00:07:27.024 --> 00:07:28.881
Yes.

147
00:07:28.881 --> 00:07:30.333
Okay.
&gt;&gt; Speaker 5: It's not evaluated.

148
00:07:30.333 --> 00:07:32.328
&gt;&gt; Jem Young: It's not, excellent,
yeah it's not evaluated.

149
00:07:32.328 --> 00:07:36.085
Yeah it doesn't run that file, versus if
you pipe something, it runs the file,

150
00:07:36.085 --> 00:07:36.983
pipes it back out.

151
00:07:36.983 --> 00:07:39.154
Wish I had a whiteboard.

152
00:07:39.154 --> 00:07:41.709
No, that wouldn't work here but
I would show standard out, standard in.

153
00:07:41.709 --> 00:07:46.030
But if you understand those concepts of
has an output, has an input, has an error,

154
00:07:46.030 --> 00:07:47.966
that's all you really need to know.

155
00:07:47.966 --> 00:07:51.229
I'm saying that like trivially but
that's all you really need to

156
00:07:51.229 --> 00:07:54.986
know about how to run pipe commands and
how to run even write shell scripts.

