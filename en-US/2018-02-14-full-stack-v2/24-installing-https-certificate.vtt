WEBVTT

1
00:00:00.255 --> 00:00:03.018
&gt;&gt; Jem Young: This is how I did it for
my server.

2
00:00:03.018 --> 00:00:08.053
Acme-tiny, which is actually
a shorter way of doing it manually.

3
00:00:08.053 --> 00:00:14.490
But if we go to acme-tiny you will see
the steps that we used to have to do.

4
00:00:14.490 --> 00:00:18.687
So we have to go through here,
create a public key using rsay,

5
00:00:18.687 --> 00:00:20.950
we have to do all these things.

6
00:00:20.950 --> 00:00:22.570
Put this here, put it in the back.

7
00:00:22.570 --> 00:00:25.180
So you have to do all this,
install your certificates.

8
00:00:25.180 --> 00:00:25.810
So if you look at it,

9
00:00:25.810 --> 00:00:28.628
if my EngineX config on jemyoung.com,
it looks something like this.

10
00:00:28.628 --> 00:00:30.510
It's pretty complicated.

11
00:00:30.510 --> 00:00:33.756
We don't have to do that
anymore because smarter people,

12
00:00:33.756 --> 00:00:37.347
good people of the Internet
created something called certbot.

13
00:00:37.347 --> 00:00:38.580
Certbot does all this for

14
00:00:38.580 --> 00:00:42.169
you and it's amazing and I wish it was
around when I was setting up HTTPS.

15
00:00:42.169 --> 00:00:45.080
But you get the benefit of doing
things a little bit later.

16
00:00:45.080 --> 00:00:46.983
So we're gonna use Let's Encrypt.

17
00:00:46.983 --> 00:00:54.436
Let's Encrypt is an open standard, and
it's free for getting HTTP certificates.

18
00:00:54.436 --> 00:00:57.246
What they are is they're an authority.

19
00:00:57.246 --> 00:01:02.015
They say, when I registered gem.party,
gem.party is who he says he is and

20
00:01:02.015 --> 00:01:03.142
we vouch for him.

21
00:01:03.142 --> 00:01:05.372
That's essentially what an authority does.

22
00:01:05.372 --> 00:01:09.642
We hear a lot of errors in the news
these days with bad authorities,

23
00:01:09.642 --> 00:01:10.871
people like that.

24
00:01:10.871 --> 00:01:15.733
Essentially people that don't follow
protocols so that I can register HBS,

25
00:01:15.733 --> 00:01:16.795
Netflix.com.

26
00:01:16.795 --> 00:01:21.265
And we'll be like, yeah, you're
Netflix.com, cool, which is dangerous

27
00:01:21.265 --> 00:01:25.395
because we trust these authorities to
say you are who you say you are, and

28
00:01:25.395 --> 00:01:29.278
if an authority can't be trusted
then the whole system's broken.

29
00:01:29.278 --> 00:01:31.808
Yeah, anybody wanna know Let's Encrypt?

30
00:01:31.808 --> 00:01:33.183
You've heard of it.

31
00:01:33.183 --> 00:01:37.791
Cool, yeah, good organization, if you have
time, a little bit of money to donate to

32
00:01:37.791 --> 00:01:41.567
them, it's a great cause and
it makes the web just a little bit safer,

33
00:01:41.567 --> 00:01:44.712
let's people not eavesdrop
on your connections as much.

34
00:01:44.712 --> 00:01:50.930
So if we go to the certbot homepage real
quick, see that it's very, very friendly.

35
00:01:50.930 --> 00:01:53.388
In fact, they make it as easy as possible.

36
00:01:53.388 --> 00:01:59.893
You can pick,
say we're using Apache on say, Ubuntu.

37
00:01:59.893 --> 00:02:04.901
It gives you instruction on how to do that
for most of the modern operating systems.

38
00:02:04.901 --> 00:02:06.565
That is really, really cool.

39
00:02:06.565 --> 00:02:09.158
Advanced, yeah.

40
00:02:09.158 --> 00:02:13.957
So there's kind of no reason
now not to have HTTPS now.

41
00:02:13.957 --> 00:02:16.366
And if you still have trouble,
you should do it cuz you have to.

42
00:02:16.366 --> 00:02:19.341
If you wanna use service
workers which are awesome.

43
00:02:19.341 --> 00:02:23.901
So let's certbot to add
an HTTPS certificate.

44
00:02:23.901 --> 00:02:27.734
So we get the sweet lock icon.

45
00:02:27.734 --> 00:02:33.648
So first let's add the certbot repository.
&gt;&gt; Jem Young: So

46
00:02:33.648 --> 00:02:36.150
what we're doing is we're
giving apt to the repo.

47
00:02:36.150 --> 00:02:38.810
Just a new address to look at.

48
00:02:38.810 --> 00:02:40.660
So we say like, who's certbot?

49
00:02:40.660 --> 00:02:41.480
We don't know.
So when we add

50
00:02:41.480 --> 00:02:42.720
this in it just gives it a link to it.

51
00:02:42.720 --> 00:02:46.940
Then when we update, we're gonna pull
in all the new repository information.

52
00:02:46.940 --> 00:02:50.680
And for long things, feel free to copy and
paste for something very long.

53
00:02:51.750 --> 00:02:55.290
Most of the time,
most studies that I've seen show that

54
00:02:55.290 --> 00:02:58.225
if you write something yourself,
you're more likely to memorize it.

55
00:02:58.225 --> 00:03:02.100
So I don't generally encourage copy paste,
but if you're adding a repo it's okay.

56
00:03:03.200 --> 00:03:04.150
So once you add the repo,

57
00:03:04.150 --> 00:03:07.310
if you run apt update just to
pull on that repo information.

58
00:03:08.740 --> 00:03:13.414
And then run apt install
python-certbot-nginx to solve

59
00:03:13.414 --> 00:03:15.040
the whole package.

60
00:03:17.000 --> 00:03:20.718
In the meantime,
any questions about HTTPS?

61
00:03:20.718 --> 00:03:24.197
Kinda harped on it pretty long
time in the last course, but

62
00:03:24.197 --> 00:03:30.905
any extra questions?
&gt;&gt; Jem Young: Great question, nobody.

63
00:03:30.905 --> 00:03:34.835
[LAUGH] You're thinking,
why doesn't everybody just go HTTPS,

64
00:03:34.835 --> 00:03:37.128
why is it a big deal if it's this easy?

65
00:03:37.128 --> 00:03:42.636
The thing is, HTTPS requires encrypting
and decrypting all those connections.

66
00:03:42.636 --> 00:03:44.139
You have to do that on the fly.

67
00:03:44.139 --> 00:03:45.273
That's not trivial.

68
00:03:45.273 --> 00:03:49.935
For someone like Netflix that
does 34% of the world's traffic,

69
00:03:49.935 --> 00:03:52.481
that extra CPU time is a lot of money.

70
00:03:52.481 --> 00:03:53.584
It's a lot, a lot of money.

71
00:03:53.584 --> 00:03:56.370
And sometimes you have to add
more servers just to handle that.

72
00:03:56.370 --> 00:04:00.230
So it's not as trivial as you might think
to be like, why isn't every site on HTTPS?

73
00:04:00.230 --> 00:04:03.320
It takes work and
it takes forethought to do these things.

74
00:04:03.320 --> 00:04:06.040
So if that's why you're thinking,
it's that easy.

75
00:04:07.212 --> 00:04:08.749
Server admin should just do this.

76
00:04:08.749 --> 00:04:11.962
It's something to keep in mind
when you go into HTTPS, but

77
00:04:11.962 --> 00:04:13.863
it's just a cost you have to pay for

78
00:04:13.863 --> 00:04:16.011
being part of the modern Internet.
&gt;&gt; Speaker 2: So

79
00:04:16.011 --> 00:04:18.913
you'll still need to buy certificate?

80
00:04:18.913 --> 00:04:21.523
Even if you use certbot?
&gt;&gt; Jem Young: No, it's free.

81
00:04:21.523 --> 00:04:25.017
That's the great thing about
Let's Encrypt, is it's free.

82
00:04:25.017 --> 00:04:26.730
No cost.

83
00:04:26.730 --> 00:04:30.482
Historically, you've had to purchase them
from authorities, cuz they're like, we're

84
00:04:30.482 --> 00:04:33.849
an authority, Verisign is an authority,
and you had to buy a certificate from them

85
00:04:33.849 --> 00:04:36.475
and then you had to renew that every year,
and things like that.

86
00:04:36.475 --> 00:04:41.709
Let's Encrypt was the game changer for
HTPS because it's free.

87
00:04:41.709 --> 00:04:46.562
It's all backed by probably all the big
tech companies cuz they all agree a safer

88
00:04:46.562 --> 00:04:48.097
web is a more secure web.

89
00:04:48.097 --> 00:04:50.529
All right, so I'm gonna add this in.

90
00:04:50.529 --> 00:04:56.581
I'm gonna copy and paste, don't judge me.

91
00:05:03.887 --> 00:05:07.214
&gt;&gt; Jem Young: Nice, next step, apt update.

92
00:05:20.179 --> 00:05:20.843
&gt;&gt; Jem Young: Awesome, and

93
00:05:20.843 --> 00:05:23.564
let's apt install,
sudo apt install python-certbot.

94
00:05:23.564 --> 00:05:28.699
So installing the Python

95
00:05:28.699 --> 00:05:33.834
that we need with certbot

96
00:05:33.834 --> 00:05:38.733
with the nginx plugin.

97
00:05:38.733 --> 00:05:43.203
If you just install certbot, it won't have
the nginx plugin which is the one we want,

98
00:05:43.203 --> 00:05:46.516
makes it much easier.
&gt;&gt; Speaker 3: What's in the docs from

99
00:05:46.516 --> 00:05:48.216
the certbot site?

100
00:05:48.216 --> 00:05:51.484
It has you install software
properties common?

101
00:05:51.484 --> 00:05:54.111
What is that we don't need about that?
&gt;&gt; Jem Young: That comes

102
00:05:54.111 --> 00:05:56.723
with DigitalOcean.
&gt;&gt; Jem Young: There

103
00:05:56.723 --> 00:06:00.766
is a lot of shared binary, so
let's say a lower level like C libraries.

104
00:06:00.766 --> 00:06:02.757
Things that a lot of software depends on.

105
00:06:02.757 --> 00:06:05.070
It's installed by default on DigitalOcean.

106
00:06:05.070 --> 00:06:09.160
But they always assume, and it's a good
assumption, that you're on a fresh server,

107
00:06:09.160 --> 00:06:11.790
you're not on Amazon, or DigitalOcean,
or Linode or things like that.

108
00:06:13.450 --> 00:06:17.930
Great question though.
&gt;&gt; Jem Young: All right,

109
00:06:17.930 --> 00:06:20.570
everybody here with me so far?

110
00:06:20.570 --> 00:06:21.870
About to get fun.

111
00:06:21.870 --> 00:06:24.080
Well, fun for me.

112
00:06:24.080 --> 00:06:25.730
So let's install certbot.

113
00:06:25.730 --> 00:06:28.675
So sudo certbot --nginx.

114
00:06:28.675 --> 00:06:32.665
So we're gonna install certbot
with the nginx plugin.

115
00:06:32.665 --> 00:06:36.747
So here, sudo

116
00:06:36.747 --> 00:06:42.874
certbot --nginx.

117
00:06:42.874 --> 00:06:46.593
And it's probably gonna
ask you some questions.

118
00:06:46.593 --> 00:06:50.295
Enter email address, whatever.

119
00:06:50.295 --> 00:06:53.929
It makes you do it,

120
00:06:53.929 --> 00:06:58.253
jem@netflix.com.

121
00:06:58.253 --> 00:07:01.532
Agree?

122
00:07:01.532 --> 00:07:04.946
No, I am not willing to
share my email address.

123
00:07:04.946 --> 00:07:08.868
And because that earlier stuff where
we added the server name into the nginx

124
00:07:08.868 --> 00:07:12.241
config, it just pulls it in there for
us, which is really nice.

125
00:07:12.241 --> 00:07:16.491
Cuz we'd have to do that anyways
eventually, so might as well do it early.

126
00:07:16.491 --> 00:07:17.772
And let's leave it blank.

127
00:07:17.772 --> 00:07:24.987
So I want a certificate on jem.party and
www.jem.party.

128
00:07:33.991 --> 00:07:35.448
&gt;&gt; Jem Young: So for this it's asking,

129
00:07:35.448 --> 00:07:39.289
if you hit HTTP, your server,
do we wanna redirect automatically or

130
00:07:39.289 --> 00:07:41.091
do we wanna just let it through?

131
00:07:41.091 --> 00:07:44.174
We're gonna say redirect
because we wanna make sure all

132
00:07:44.174 --> 00:07:46.607
traffic coming to our
server is HTTPS only.

133
00:07:46.607 --> 00:07:51.150
So hit 2.
&gt;&gt; Jem Young: Nice,

134
00:07:51.150 --> 00:07:53.345
this use to be an hour.

135
00:07:53.345 --> 00:07:54.582
Originally for this block,

136
00:07:54.582 --> 00:07:57.218
I had an hour scheduled to do
HTTPS 'cuz it's complicated.

137
00:07:57.218 --> 00:08:01.139
Now, what is that, 3 minutes?
&gt;&gt; Speaker 4: Wow.

138
00:08:01.139 --> 00:08:02.820
&gt;&gt; Jem Young: But as we should always do,

139
00:08:02.820 --> 00:08:07.002
let's just go through and
let's talk about what certbot is doing.

140
00:08:07.002 --> 00:08:11.156
So first it asked for your email,
unrelated to the certificate,

141
00:08:11.156 --> 00:08:13.580
agree to terms, blah, blah, blah.

142
00:08:13.580 --> 00:08:16.281
So it's saying, again,
what do we want HBS on?

143
00:08:16.281 --> 00:08:18.627
jem.party, www.jem.party.

144
00:08:18.627 --> 00:08:21.040
Fun fact,
there are actually two different domains.

145
00:08:21.040 --> 00:08:23.360
People don't really realize that
www is something different.

146
00:08:23.360 --> 00:08:26.990
But for the most part, for most of
the Internet you treat them as one domain.

147
00:08:26.990 --> 00:08:30.892
So we went on both.
&gt;&gt; Jem Young: And it's creating

148
00:08:30.892 --> 00:08:34.890
a challenge, so what that is,
is it's writing through nginx temporarily.

149
00:08:34.890 --> 00:08:39.640
It creates some unique URL and
it responds with a file, a challenge file.

150
00:08:39.640 --> 00:08:43.300
So essentially it's like a key and what
it's doing is, let's encrypt a saying,

151
00:08:43.300 --> 00:08:48.270
all right, I'll hit your box,
I wanna make sure you have the challenge.

152
00:08:48.270 --> 00:08:49.750
And if you have the challenge and
it's accepted,

153
00:08:49.750 --> 00:08:52.630
the handshake is good,
you're actually who you say you are.

154
00:08:52.630 --> 00:08:57.005
So this what prevents me from making
a certificate for, I don't know,

155
00:08:57.005 --> 00:08:58.760
Netflix.com or something like that.

156
00:08:58.760 --> 00:09:01.770
Because I don't control of that box,
I can't make a certificate for it.

157
00:09:03.160 --> 00:09:03.750
That simple.

158
00:09:03.750 --> 00:09:04.859
Does that make sense?

159
00:09:04.859 --> 00:09:07.383
Because it's a little complicated.

160
00:09:07.383 --> 00:09:09.621
So what it did is it
temporarily made a URL.

161
00:09:09.621 --> 00:09:13.646
So jem.party/, I don't know,
we'll just call it foo for now.

162
00:09:13.646 --> 00:09:14.837
Foo validation.

163
00:09:14.837 --> 00:09:17.897
It wrote that into my nginx temporarily,
restart the nginx for me.

164
00:09:17.897 --> 00:09:23.839
That way when Let's Encrypt calls
jem.com or jem.party/foovalidation,

165
00:09:23.839 --> 00:09:28.078
it returns a file automatically for
me, this key file.

166
00:09:28.078 --> 00:09:30.058
And then once that's done it's saying,
okay,

167
00:09:30.058 --> 00:09:32.438
you have control of your serve
you are what you say you are.

168
00:09:32.438 --> 00:09:35.666
We're gonna install a certificate for you,
and then it cleans all that up for you.

169
00:09:35.666 --> 00:09:37.386
We used to have to do this by hand.

170
00:09:37.386 --> 00:09:40.950
You used to have to write these and
have the correct challenge and

171
00:09:40.950 --> 00:09:43.798
then clean that up,
now certbot does that for you.

172
00:09:43.798 --> 00:09:47.535
If that makes sense, any questions at all?

173
00:09:47.535 --> 00:09:49.728
Now do you understand why does
this take a long time to do,

174
00:09:49.728 --> 00:09:53.420
cuz you had to try to get a key and
a validation, now we don't do it anymore.

175
00:09:53.420 --> 00:10:02.094
Then we're saying we wanna redirect our
HTTPS traffic to HTTP, and that's it.

176
00:10:02.094 --> 00:10:04.051
And if we wanna do SSL Labs,

177
00:10:04.051 --> 00:10:08.152
I know it's probably gonna give
me like a B for my rating.

178
00:10:20.021 --> 00:10:22.166
&gt;&gt; Jem Young: Nice, what did I get?

179
00:10:22.166 --> 00:10:24.658
Come on B, come on B, B+?

180
00:10:24.658 --> 00:10:28.692
[LAUGH]
&gt;&gt; Speaker 5: What does

181
00:10:28.692 --> 00:10:31.261
the score mean?
&gt;&gt; Jem Young: It's just saying how secure

182
00:10:31.261 --> 00:10:34.966
you are according to their metrics,
like what kind of ciphers you are using,

183
00:10:34.966 --> 00:10:38.394
arey ou using the correct encryption and
things like that for your key.

184
00:10:38.394 --> 00:10:41.900
Because again,
there's different levels of encryption.

185
00:10:41.900 --> 00:10:45.482
It's easy to think of HTTPS
as this broad one and done.

186
00:10:45.482 --> 00:10:48.653
But depending on how secure you want your
data to be, how easy it is to break in,

187
00:10:48.653 --> 00:10:51.075
how easy it's not,
you use certain levels of encryption.

188
00:10:51.075 --> 00:10:54.023
So we can make it really, really simple,

189
00:10:54.023 --> 00:10:57.992
as in it's just a basic
encoding that's easy to break.

190
00:10:57.992 --> 00:11:00.009
It'll be fast, but
it won't be that secure.

191
00:11:00.009 --> 00:11:04.819
That's pretty much what they're
gonna rank me on right now.

192
00:11:04.819 --> 00:11:06.062
&gt;&gt; Speaker 5: Which might be good if you

193
00:11:06.062 --> 00:11:08.676
don't care that much about
having it super secure.

194
00:11:08.676 --> 00:11:09.692
&gt;&gt; Jem Young: Yeah.

195
00:11:09.692 --> 00:11:10.532
&gt;&gt; Speaker 5: And don't wanna

196
00:11:10.532 --> 00:11:13.662
spend the extra processing power.
&gt;&gt; Jem Young: Yeah, exactly.

197
00:11:13.662 --> 00:11:17.815
And it's like SSH key,
you can generate a, I don't know,

198
00:11:17.815 --> 00:11:22.551
like an 8098 massive,
it takes for ever to hand shake,

199
00:11:22.551 --> 00:11:27.960
it's super encrypted but
there's diminishing returns on encryption.

200
00:11:27.960 --> 00:11:30.770
Like there's only so
much that's gonna do you any good.

201
00:11:30.770 --> 00:11:33.771
I don't think the NSA is trying
to break into jem.party,

202
00:11:33.771 --> 00:11:37.707
[LAUGH] but if they are they're probably
already in, like what am I gonna do?

203
00:11:37.707 --> 00:11:39.815
[LAUGH] And I'll just let this run.

204
00:11:39.815 --> 00:11:41.790
A B, that's not bad.

205
00:11:41.790 --> 00:11:46.805
And we got a B because the default cypher
suites we're running are not that strong.

206
00:11:46.805 --> 00:11:47.460
They're okay.

207
00:11:47.460 --> 00:11:51.661
I'm gonna leave it alone for
now because we can get into key

208
00:11:51.661 --> 00:11:56.132
cryptometry a little bit later
if we really want to at the end.

209
00:11:56.132 --> 00:11:59.326
But for now B's okay,
I'm not running credit cards,

210
00:11:59.326 --> 00:12:02.736
I'm not serving anything important,
B's good enough.

211
00:12:02.736 --> 00:12:09.912
And hopefully, why is it so slow?

212
00:12:09.912 --> 00:12:12.480
That's not good, that is so
slow, it should be done already.

213
00:12:15.110 --> 00:12:17.730
Connection timed out, something happened.

214
00:12:19.710 --> 00:12:22.344
Maybe it didn't redirect properly.

215
00:12:22.344 --> 00:12:24.662
But we will find out.

216
00:12:24.662 --> 00:12:27.757
And now I've got this sweet, sweet icon.

217
00:12:27.757 --> 00:12:32.893
If we go into Chrome dev tools,
I believe it's press

218
00:12:32.893 --> 00:12:37.815
Security, we can take
a look at the certificate.

219
00:12:37.815 --> 00:12:40.415
I can't make that bigger, I'm sorry.

220
00:12:40.415 --> 00:12:42.771
But pretty much,
we have Let's Encrypt authority.

221
00:12:42.771 --> 00:12:46.945
They're the ones who say,
jem.party is who they say they are,

222
00:12:46.945 --> 00:12:53.423
yeah.
&gt;&gt; Jem Young: It's

223
00:12:53.423 --> 00:12:59.988
frozen,
&gt;&gt; Jem Young: [LAUGH] That is frozen,

224
00:12:59.988 --> 00:13:04.625
I don't know why.
&gt;&gt; Jem Young: There we go.

225
00:13:04.625 --> 00:13:09.823
Okay, is everybody here?

226
00:13:09.823 --> 00:13:12.870
&gt;&gt; Speaker 5: Question, maybe I missed it.

227
00:13:12.870 --> 00:13:18.370
Do we do anything to have any sort
of redirect from HTTPS to our party,

228
00:13:18.370 --> 00:13:20.510
or is that just from the Internet itself?

229
00:13:20.510 --> 00:13:24.148
Sorry, to our website.
&gt;&gt; Jem Young: Just from the Internet to

230
00:13:24.148 --> 00:13:25.155
our website.

231
00:13:25.155 --> 00:13:26.763
That is a excellent point.

232
00:13:26.763 --> 00:13:31.378
So remember when we did the proxy pass for
proxying traffic to our Node server?

233
00:13:31.378 --> 00:13:34.702
We could tunnel that as HTTPS.

234
00:13:34.702 --> 00:13:38.023
As in we just let that traffic
pass through, we don't decrypt it.

235
00:13:38.023 --> 00:13:38.974
You could do that.

236
00:13:38.974 --> 00:13:42.610
It's a bit complicated if we want
to handle HVS within Node itself.

237
00:13:42.610 --> 00:13:45.573
It's better to let all the traffic
terminate at nginx and

238
00:13:45.573 --> 00:13:48.238
then just pass through all
the traffic encrypted.

239
00:13:48.238 --> 00:13:52.324
But let's say you had, I don't know,
you want to run a TOR server, or

240
00:13:52.324 --> 00:13:56.770
you wanna run a secure server that you
don't want people eavesdropping on.

241
00:13:56.770 --> 00:14:00.648
You can tunnel all your traffic to your
database to wherever you want as HTTPS,

242
00:14:00.648 --> 00:14:02.704
but in general it's kind of a headache and

243
00:14:02.704 --> 00:14:06.383
it's better to let it terminate nginx
cuz it's pretty fast to be coding.

244
00:14:06.383 --> 00:14:08.589
But great question, though.

245
00:14:08.589 --> 00:14:10.356
So everybody is here so far, right?

246
00:14:10.356 --> 00:14:13.206
HTTPS, we're good?

247
00:14:13.206 --> 00:14:14.205
If you're not, let me know.

248
00:14:14.205 --> 00:14:16.804
We have time-
&gt;&gt; Speaker 5: I'm doing endless spinnings

249
00:14:16.804 --> 00:14:20.372
like you were, but no.
&gt;&gt; Jem Young: Have you started doing HTTPS

250
00:14:20.372 --> 00:14:22.852
manually?
&gt;&gt; Speaker 5: No.

251
00:14:22.852 --> 00:14:24.328
&gt;&gt; Jem Young: Yeah, I noticed that, too,

252
00:14:24.328 --> 00:14:27.411
it wasn't redirecting,
which we will look into in a second.

253
00:14:27.411 --> 00:14:29.267
Now it is.
&gt;&gt; Speaker 5: That's great.

254
00:14:29.267 --> 00:14:29.942
&gt;&gt; Jem Young: I think it just had

255
00:14:29.942 --> 00:14:30.755
a cache, it cached.

256
00:14:30.755 --> 00:14:36.343
It doesn't know to redirect, but
once you do it once it should be okay.

257
00:14:36.343 --> 00:14:39.357
Okay, we're here, HTTPS,

258
00:14:39.357 --> 00:14:45.600
we have to lock.
&gt;&gt; Speaker 6: So in trying

259
00:14:45.600 --> 00:14:50.370
to set up the certbot, if it says cannot
find the virtual host matching domain,

260
00:14:50.370 --> 00:14:55.320
blah, blah, blah, does that indicate
problem with linking the domain to the IP?

261
00:14:55.320 --> 00:14:56.556
&gt;&gt; Jem Young: Yeah, generally,

262
00:14:56.556 --> 00:14:59.538
it's saying it can't,
well you set up nginx and

263
00:14:59.538 --> 00:15:02.604
you add the server name to
your sever named block.

264
00:15:02.604 --> 00:15:06.213
And you save that and it's all good.
&gt;&gt; Speaker 6: I don't think it's all good.

265
00:15:06.213 --> 00:15:07.725
&gt;&gt; Jem Young: Okay.

266
00:15:07.725 --> 00:15:08.640
&gt;&gt; Speaker 6: It should be

267
00:15:08.640 --> 00:15:12.303
showing a generic nginx
thing if you go to that.

268
00:15:12.303 --> 00:15:16.906
Like if you type in the domain,
it should show you a generic nginx thing,

269
00:15:16.906 --> 00:15:17.539
right?
&gt;&gt; Jem Young: So

270
00:15:17.539 --> 00:15:20.463
if you started the Node server,
it should be hitting, you should see,

271
00:15:20.463 --> 00:15:22.576
I'm a blank slate from the notes already.
&gt;&gt; Speaker 6: Okay,

272
00:15:22.576 --> 00:15:25.258
and that's not a time thing,
like any time to catch up,

273
00:15:25.258 --> 00:15:27.899
it's an issue?
&gt;&gt; Jem Young: [CROSSTALK] I will walk

274
00:15:27.899 --> 00:15:32.659
though it during the break.
&gt;&gt; Speaker 7: Marius had a question

275
00:15:32.659 --> 00:15:35.217
in chat.
&gt;&gt; Jem Young: Is redirect working for

276
00:15:35.217 --> 00:15:35.907
you guys?

277
00:15:35.907 --> 00:15:37.577
Marius, he's asking is
the redirect working?

278
00:15:37.577 --> 00:15:39.659
HTTPS is manually working.

279
00:15:39.659 --> 00:15:42.311
Yeah, I think when we hit
the site manually before,

280
00:15:42.311 --> 00:15:46.486
it just cached that response in our local
DNS cache rather than taking a redirect.

281
00:15:46.486 --> 00:15:52.007
So if you type in HTTPS manually and
then now you try to go to jem.party,

282
00:15:52.007 --> 00:15:57.290
it's going to serve out the correct
version, it's just cached.

283
00:15:57.290 --> 00:16:00.100
If you wanna try the incognito window
that's probably a better way to make sure

284
00:16:00.100 --> 00:16:01.946
it's working actually.

285
00:16:01.946 --> 00:16:06.080
jem.party, yeah, there we go.

286
00:16:06.080 --> 00:16:11.680
And we will talk about
caching in the next instance.

287
00:16:11.680 --> 00:16:14.850
And if anybody's groaning because
they know caching is a hard problem,

288
00:16:15.920 --> 00:16:18.212
one of the hard problems of computer
science is cache and validation.

289
00:16:20.750 --> 00:16:24.598
All right, high five yourselves because,
like I said,

290
00:16:24.598 --> 00:16:27.491
that used to be a very, very tedious task.

291
00:16:27.491 --> 00:16:29.469
Now it's nice and easy.

292
00:16:29.469 --> 00:16:31.795
But we have to make sure our
certificate stays up to date,

293
00:16:31.795 --> 00:16:34.030
because you don't have
a certificate of perpetuity.

294
00:16:34.030 --> 00:16:37.045
It's gotta be able to renew itself,
which certbot will do for you.

295
00:16:37.045 --> 00:16:39.480
So let's do a dry run just to
make sure it's working correctly.

296
00:16:43.216 --> 00:16:50.134
&gt;&gt; Jem Young: sudo certbot renew

297
00:16:50.134 --> 00:16:56.190
--dry-run.

298
00:16:56.190 --> 00:16:58.207
And about every,
I wanna say three months or

299
00:16:58.207 --> 00:17:01.873
so, you have to renew your certificate
just to make you are what you say you are.

300
00:17:01.873 --> 00:17:02.958
You're the owner of the website.

301
00:17:15.718 --> 00:17:17.861
&gt;&gt; Jem Young: Awesome, and certbot set up,

302
00:17:17.861 --> 00:17:22.406
it's gonna renew correctly once we
set it up with a job to do that.

303
00:17:22.406 --> 00:17:23.446
That's pretty nice.

304
00:17:23.446 --> 00:17:27.318
And again, it did the same thing,
it created an authentication URL.

305
00:17:27.318 --> 00:17:29.549
It does that for you,
it creates a key file.

306
00:17:29.549 --> 00:17:32.216
Let's encrypt handshakes with that,
and then it deletes that for you.

307
00:17:32.216 --> 00:17:36.092
So you don't see any of that
mess in your nginx config,

308
00:17:36.092 --> 00:17:43.460
which is really nice.
&gt;&gt; Speaker 8: Does it use the e-mail

309
00:17:43.460 --> 00:17:46.780
to remind you that that's due, or?
&gt;&gt; Jem Young: I don't know.

310
00:17:46.780 --> 00:17:49.570
I haven't used cerbot,
maybe like a month from now.

311
00:17:49.570 --> 00:17:53.560
So my certificates aren't due for
renewal for another two months.

312
00:17:53.560 --> 00:17:55.035
That would be nice if it does.

313
00:17:55.035 --> 00:17:56.096
That would be really useful.

314
00:17:56.096 --> 00:17:57.936
I don't know if it does, for now.

315
00:17:57.936 --> 00:17:59.496
Great question, though.

316
00:17:59.496 --> 00:18:02.088
Okay, Internet high-five.

317
00:18:02.088 --> 00:18:03.304
You did it.

318
00:18:03.304 --> 00:18:06.625
What used to take people a long,
hard road to do,

319
00:18:06.625 --> 00:18:11.745
now all the traffic is jammed up already
secure, just the way it should be.

320
00:18:11.745 --> 00:18:12.550
We can party on.

