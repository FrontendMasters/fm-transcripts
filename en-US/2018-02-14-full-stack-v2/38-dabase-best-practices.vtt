WEBVTT

1
00:00:00.108 --> 00:00:01.321
&gt;&gt; Jem Young: I have some
database tips for you.

2
00:00:01.321 --> 00:00:04.134
First one, back up your database.

3
00:00:04.134 --> 00:00:07.169
You'd be surprised the number of
businesses that have lost money, gone

4
00:00:07.169 --> 00:00:10.618
under, just made really silly mistakes
cuz they didn't backup their database.

5
00:00:10.618 --> 00:00:14.321
It's kind of simple, but yeah, anyways.

6
00:00:14.321 --> 00:00:15.829
Use a strong root password.

7
00:00:15.829 --> 00:00:21.892
Root is all powerful,
just like on your computer, same thing.

8
00:00:21.892 --> 00:00:24.248
Someone who logs in with root,
they can just delete all your data.

9
00:00:24.248 --> 00:00:27.553
They can change it as they want and
they can add $10 million to their account.

10
00:00:27.553 --> 00:00:29.868
Doesn't matter,
use a strong root password.

11
00:00:29.868 --> 00:00:32.489
Generally add users, but
give them fine grained permissions.

12
00:00:32.489 --> 00:00:35.274
So most users don't
need the write ability,

13
00:00:35.274 --> 00:00:38.509
they don't need the ability
to write to a database.

14
00:00:38.509 --> 00:00:41.705
So throw that in there,
you create users that have permissions,

15
00:00:41.705 --> 00:00:44.274
just like we did with chmod,
we can do that with SQL.

16
00:00:44.274 --> 00:00:47.178
The syntax is different,
but the idea is the same.

17
00:00:47.178 --> 00:00:52.586
Limit isolation of users' powers is always
a good idea, especially with databases.

18
00:00:52.586 --> 00:00:55.551
I read a story on Reddit.

19
00:00:55.551 --> 00:01:00.392
It was a couple months ago, but
it was some guy, he just started a job and

20
00:01:00.392 --> 00:01:03.079
he deleted the production databases.

21
00:01:03.079 --> 00:01:04.588
Some people remember that story.

22
00:01:04.588 --> 00:01:06.874
And I felt bad because it's not his fault.

23
00:01:06.874 --> 00:01:09.659
It's not his fault that the permissions
weren't set up correctly,

24
00:01:09.659 --> 00:01:11.058
that he had the ability to do that.

25
00:01:11.058 --> 00:01:14.888
Again, just like chmod, just like running
things in sudo, if you give people power,

26
00:01:14.888 --> 00:01:17.625
they will probably shoot
themselves in the foot eventually.

27
00:01:17.625 --> 00:01:19.975
So we wanna limit that
as much as possible.

28
00:01:19.975 --> 00:01:24.277
So, don't give people power to,
A, delete anything.

29
00:01:24.277 --> 00:01:25.736
That should always be root.

30
00:01:25.736 --> 00:01:30.169
Don't let them have the ability to
overwrite data, the same thing.

31
00:01:30.169 --> 00:01:34.172
Yeah, I feel bad for that guy,
poor guy, cuz it wasn't his fault.

32
00:01:34.172 --> 00:01:35.015
How would he know?

33
00:01:35.015 --> 00:01:41.104
Also use a dev database, and
use production database.

34
00:01:41.104 --> 00:01:46.044
Do not, if you have a dev environment,
do not use a production database.

35
00:01:46.044 --> 00:01:48.672
These things are common sense, and people
in the real world are shaking their heads.

36
00:01:48.672 --> 00:01:52.150
But yeah, people do it,
you'd be surprised.

37
00:01:52.150 --> 00:01:54.614
Databases will put you under very quickly,

38
00:01:54.614 --> 00:01:57.150
if you're not just very
cautious with them.

39
00:01:57.150 --> 00:01:59.553
Don't expose your database
outside the network.

40
00:01:59.553 --> 00:02:03.744
There's not many reasons why I would be
need to be able to log into my database

41
00:02:03.744 --> 00:02:04.670
from a browser.

42
00:02:04.670 --> 00:02:06.190
So in general just don't do that.

43
00:02:06.190 --> 00:02:09.690
Only within your network of computers
should you be able to log into a database.

44
00:02:09.690 --> 00:02:11.596
That's an easy one.

45
00:02:11.596 --> 00:02:12.913
Again, people don't do it.

46
00:02:12.913 --> 00:02:16.661
They expose their database to the world,
people are gonna try to hack it.

47
00:02:16.661 --> 00:02:20.589
Even if it's an empty database,
people just wanna know what's inside.

48
00:02:20.589 --> 00:02:23.342
Fourth one, sanitize your SQL.

49
00:02:23.342 --> 00:02:28.526
So what that means is, if I can run
random commands from my web app,

50
00:02:28.526 --> 00:02:30.575
as in it's unsanitized.

51
00:02:30.575 --> 00:02:34.661
So I can say, drop tables dot, and
I have that ability from my web app,

52
00:02:34.661 --> 00:02:39.537
because you didn't do permissions
correctly, you're not sanitizing your SQL.

53
00:02:39.537 --> 00:02:42.681
That's a very, very,
very common vulnerability.

54
00:02:42.681 --> 00:02:46.801
If you're talking about any sort of
website penetration testing, application

55
00:02:46.801 --> 00:02:50.508
testing, the first thing they're
gonna do is SQL sanitation attacks.

56
00:02:50.508 --> 00:02:52.068
Wait, I think there's a about it.

57
00:02:52.068 --> 00:02:52.885
&gt;&gt; Speaker 2: Bobby, drop tables.

58
00:02:52.885 --> 00:02:54.263
&gt;&gt; Jem Young: Bobby, drop tables.

59
00:02:54.263 --> 00:02:59.924
Xkcd SQL,
&gt;&gt; Jem Young: Little Bobby tables

60
00:03:03.117 --> 00:03:05.684
&gt;&gt; Jem Young: [LAUGH]

61
00:03:08.602 --> 00:03:10.209
&gt;&gt; Jem Young: [LAUGH] Love this one.

62
00:03:10.209 --> 00:03:14.286
And now we understand a little bit
more about what this joke means.

63
00:03:14.286 --> 00:03:18.633
You have to sanitize your SQL so
one, people don't have this ability.

64
00:03:18.633 --> 00:03:21.811
Two, they shouldn't have this ability
anyways, as a random user, to drop tables.

65
00:03:21.811 --> 00:03:27.863
Drop tables just means delete the whole
table, people do that all the time.

66
00:03:27.863 --> 00:03:30.616
It's like basics,
which you're not gonna do.

67
00:03:30.616 --> 00:03:34.671
Cuz you now learned, that I just harped
on that for the past three minutes.

68
00:03:34.671 --> 00:03:37.661
The way to get around sanitize
your SQL is almost every library.

69
00:03:37.661 --> 00:03:41.385
So we can use node SQL,
node by SQL miss time

70
00:03:41.385 --> 00:03:46.254
has a way of sanitizing database or
SQL queries for you.

71
00:03:46.254 --> 00:03:47.783
People try to do it by hand.

72
00:03:47.783 --> 00:03:51.944
They say, I'm just gonna pipe whatever
the user sends directly into the database.

73
00:03:51.944 --> 00:03:54.481
That's where you run in trouble
because there's always something you

74
00:03:54.481 --> 00:03:55.416
haven't accounted for.

75
00:03:55.416 --> 00:04:01.316
So in general, don't put a pass
raw SQL into your database.

76
00:04:01.316 --> 00:04:03.360
And if I'm saying things
that are kind of nuanced and

77
00:04:03.360 --> 00:04:06.288
kind of fine-grained, if you've ever
worked with any sort of database,

78
00:04:06.288 --> 00:04:08.014
you probably know what I'm talking about.

79
00:04:08.014 --> 00:04:11.756
If you will, remember my face at
this moment, sanitize your SQL.

80
00:04:11.756 --> 00:04:14.301
And the fifth tip is backup your database.

81
00:04:14.301 --> 00:04:17.223
Yes it's in there twice,
because people don't do it.

82
00:04:17.223 --> 00:04:19.396
At some point someone
might drop your database,

83
00:04:19.396 --> 00:04:21.046
your database might get corrupted.

84
00:04:21.046 --> 00:04:24.741
Someone did a mass update and
they just rewrote all that data.

85
00:04:24.741 --> 00:04:25.706
It happens all the time.

86
00:04:25.706 --> 00:04:28.164
You need to have the ability to roll back.

87
00:04:28.164 --> 00:04:29.340
This is important.

88
00:04:29.340 --> 00:04:33.244
These are more production tips,
which you wouldn't run into locally, but

89
00:04:33.244 --> 00:04:34.469
backup your database.

90
00:04:34.469 --> 00:04:35.832
I actually had another one in there but

91
00:04:35.832 --> 00:04:37.371
I took it out cuz I
thought it was a bit much.

92
00:04:37.371 --> 00:04:40.687
But I just want to make sure
everybody understands my point.

93
00:04:40.687 --> 00:04:43.631
So if we wanted to,
we can hook MySQL into Node.

94
00:04:43.631 --> 00:04:46.081
We're just going to use
the library of MySQL JS.

95
00:04:46.081 --> 00:04:49.675
We're not gonna do it because,
it's a bit late in the day and

96
00:04:49.675 --> 00:04:52.156
we don't really have anything to query.

97
00:04:52.156 --> 00:04:55.693
But if you wanted to,
it's just MPMI, MyAQL JS.

98
00:04:55.693 --> 00:04:59.020
Goes through everything on how to
set it up, how to use the user,

99
00:04:59.020 --> 00:05:02.545
using a correct database,
how to make queries, things like that.

100
00:05:02.545 --> 00:05:04.659
If that's what you're interested in, cool.

101
00:05:04.659 --> 00:05:08.557
I think there might be a frontend Masters
course which goes into a bit more detail

102
00:05:08.557 --> 00:05:09.319
on databases.

103
00:05:09.319 --> 00:05:12.860
And if so, I'll try to link it at
the end of the talk, if I figure it out.

104
00:05:12.860 --> 00:05:13.361
But anyways, that's MySQL.

105
00:05:13.361 --> 00:05:14.772
That's node.

106
00:05:14.772 --> 00:05:16.358
That's setting up a database in general.

107
00:05:16.358 --> 00:05:19.737
That's database at a very,
very, very high level.

108
00:05:19.737 --> 00:05:21.908
Again, it gets so nuanced.

109
00:05:21.908 --> 00:05:25.915
You have like things like Redshift or
Cassandra.

110
00:05:25.915 --> 00:05:31.039
You have different types of database for
querying at different speeds.

111
00:05:31.039 --> 00:05:34.086
Different pros and cons, but
I won't go into that today.

112
00:05:34.086 --> 00:05:35.875
This is just full sets.

113
00:05:35.875 --> 00:05:36.940
That's all you need now, for now.

