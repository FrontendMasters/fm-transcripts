WEBVTT

1
00:00:00.230 --> 00:00:00.992
&gt;&gt; Jem Young: All right,
so that was part six.

2
00:00:00.992 --> 00:00:02.130
That wasn't that bad.

3
00:00:02.130 --> 00:00:05.570
It's just pure lecture,
we installed the database.

4
00:00:05.570 --> 00:00:10.100
Last part, talking about containers,
orchestration, and

5
00:00:10.100 --> 00:00:12.260
automating our deployments.

6
00:00:12.260 --> 00:00:14.436
So what's a container?

7
00:00:14.436 --> 00:00:15.620
Anybody?

8
00:00:15.620 --> 00:00:18.250
You've probably heard the phrase,
it's kind of hip.

9
00:00:18.250 --> 00:00:20.572
Like cloud computing was using
that phrase a couple years ago.

10
00:00:20.572 --> 00:00:22.076
Containers.

11
00:00:22.076 --> 00:00:24.449
&gt;&gt; Speaker 2: It's kind
of like a hypervisor, but

12
00:00:24.449 --> 00:00:28.747
it loves at a different level I think,
for like a virtual machine.

13
00:00:28.747 --> 00:00:32.343
&gt;&gt; Jem Young: Yeah, hypervisor,
virtual machines, big words, I like it.

14
00:00:32.343 --> 00:00:36.231
You're right,
a container is just the application,

15
00:00:36.231 --> 00:00:39.198
rather than an entire operating system.

16
00:00:39.198 --> 00:00:43.049
So let's talk a little bit more, because
it's important you leave the room, and you

17
00:00:43.049 --> 00:00:47.011
might not implement it, but you understand
when someone says containers or hypervisor

18
00:00:47.011 --> 00:00:50.730
that you know what they are talking about,
cuz you're a full stack engineer now.

19
00:00:50.730 --> 00:00:54.180
You made it through part two,
just about, it's the last part.

20
00:00:55.240 --> 00:00:59.140
So from the first section, we remember
that a VPS, virtual private server,

21
00:00:59.140 --> 00:01:02.204
is just one dedicated server and
we just have little chunks.

22
00:01:02.204 --> 00:01:06.859
So my digital server, it's just,
it's a little chunk of a larger server.

23
00:01:06.859 --> 00:01:09.670
It's not a little box running
somewhere in the room.

24
00:01:09.670 --> 00:01:11.320
It's just part of a larger server.

25
00:01:11.320 --> 00:01:14.850
That's what a VPS does,
it breaks it into little chunks, and

26
00:01:14.850 --> 00:01:19.360
remember that VPS, you put them
all together equals the cloud.

27
00:01:19.360 --> 00:01:22.950
I still see people like airport ads,
I think targeted people that don't know,

28
00:01:22.950 --> 00:01:24.730
they're like, do you know the cloud?

29
00:01:24.730 --> 00:01:27.010
I'm like, yeah, I know the cloud.

30
00:01:27.010 --> 00:01:30.660
I know a few [INAUDIBLE],
jeez, I'm insulted really.

31
00:01:30.660 --> 00:01:31.349
But that's a VPS.

32
00:01:31.349 --> 00:01:37.041
A container is,
it's just the application run on VPS.

33
00:01:37.041 --> 00:01:41.871
So take your VPS, segment it even more for
just the applications that are running,

34
00:01:41.871 --> 00:01:44.564
that's a container, just one application.

35
00:01:44.564 --> 00:01:47.764
So right now our server
that's running right now,

36
00:01:47.764 --> 00:01:52.610
we have nginx which is an application,
we have mysql, we have node running.

37
00:01:52.610 --> 00:01:55.670
These are all separate
applications of one large server.

38
00:01:55.670 --> 00:01:58.592
With the container I would just
run node in some container,

39
00:01:58.592 --> 00:02:02.164
I'd run mysql in some container,
I'd run nginx in the some container.

40
00:02:02.164 --> 00:02:04.532
Why would I do that?

41
00:02:04.532 --> 00:02:07.510
What's kind of the efficiency
you think we'd get out of that?

42
00:02:07.510 --> 00:02:13.328
Anybody, I mean,
I have bullet points ready.

43
00:02:13.328 --> 00:02:14.292
[LAUGH]
&gt;&gt; Speaker 3: That you're only

44
00:02:14.292 --> 00:02:15.032
paying for what you're using?

45
00:02:15.032 --> 00:02:19.556
&gt;&gt; Jem Young: No, not really,
but that's a good guess.

46
00:02:19.556 --> 00:02:22.696
The benefit of a container
versus a virtual machine,

47
00:02:22.696 --> 00:02:26.478
which is what we are running on now,
which is just a fake server.

48
00:02:26.478 --> 00:02:29.421
It looks like it's own machine, but
it's really a part of a larger machine,

49
00:02:29.421 --> 00:02:31.520
is that we don't have to
install an operating system.

50
00:02:31.520 --> 00:02:33.740
There is no overhead for things like that.

51
00:02:33.740 --> 00:02:38.724
We can share all of our resources, but
only the ones that need to be shared.

52
00:02:38.724 --> 00:02:42.666
So, if my notes ever goes haywire,
it starts writing log files everywhere,

53
00:02:42.666 --> 00:02:45.941
it won't affect the other operations
on the server versus now,

54
00:02:45.941 --> 00:02:49.278
if my node server goes haywire and
starts messing up the caches for

55
00:02:49.278 --> 00:02:52.850
everybody else,
it's gonna take down the entire server.

56
00:02:52.850 --> 00:02:56.510
That's some of the benefits of
a container versus an entire vps,

57
00:02:56.510 --> 00:02:58.620
which is what we're running now.

58
00:02:58.620 --> 00:03:00.440
The second benefit is fast deployment.

59
00:03:00.440 --> 00:03:03.990
So rather than reinstantiating an entire
new server every single time we wanna

60
00:03:03.990 --> 00:03:06.360
make a new node app,
we just pick container for that, and

61
00:03:06.360 --> 00:03:08.360
deploy that out to a server
that's already running.

62
00:03:08.360 --> 00:03:11.370
When we wanna update that,
we just deploy that out too the same way.

63
00:03:13.610 --> 00:03:17.754
Containers, it's nuance that I don't
think before this course you would

64
00:03:17.754 --> 00:03:21.448
have understood the nuance of it,
but now you do a little bit more.

65
00:03:21.448 --> 00:03:25.978
&gt;&gt; Speaker 4: So is it the concept,
or just the concept, or it's-

66
00:03:25.978 --> 00:03:26.948
&gt;&gt; Jem Young: No, it's a real thing.

67
00:03:26.948 --> 00:03:30.338
No it's not a, that's a good question.

68
00:03:30.338 --> 00:03:34.870
There are things that are concepts
of how we do server deployments.

69
00:03:34.870 --> 00:03:37.268
Things like that,
like containerization, but

70
00:03:37.268 --> 00:03:39.670
these are actual different
processes that run.

71
00:03:39.670 --> 00:03:43.390
So you mentioned hypervisor.

72
00:03:43.390 --> 00:03:46.747
A hypervisor is essentially
virtual machine that access,

73
00:03:46.747 --> 00:03:50.437
I'm gonna run I'm gonna run
one instance of the Ubuntu,

74
00:03:50.437 --> 00:03:55.153
I'm gonna run a instance all in one
server, but hypervisor manages that.

75
00:03:55.153 --> 00:03:58.468
So it manages the scheduling of the CPU,
so it's saying, you get a chunk,

76
00:03:58.468 --> 00:03:59.956
you get a chunk, you get a chunk.

77
00:03:59.956 --> 00:04:03.720
That's what a hypervisor does,
and it runs a virtual machine.

78
00:04:03.720 --> 00:04:08.440
Instead of that, we just have one machine
and the container manages that for you.

79
00:04:10.008 --> 00:04:10.723
It's nuance, but

80
00:04:10.723 --> 00:04:13.459
I have some diagrams that'll hopefully
make it a little bit more clear.

81
00:04:13.459 --> 00:04:17.060
So, why, again, why do we wanna container?

82
00:04:17.060 --> 00:04:19.840
Because this is an example of
the Netflix infrastructure.

83
00:04:19.840 --> 00:04:22.004
The names are different obviously, but

84
00:04:22.004 --> 00:04:24.487
this is a real tool we
use called Visceral, and

85
00:04:24.487 --> 00:04:28.702
it's a real time traffic map about
what's happening on the Netflix cluster.

86
00:04:28.702 --> 00:04:32.331
We have thousands, and thousands,
and thousands, and thousands,

87
00:04:32.331 --> 00:04:33.757
and thousands of servers.

88
00:04:33.757 --> 00:04:35.373
It's unimaginable.

89
00:04:35.373 --> 00:04:37.288
I forget the exact count,
but there's a lot.

90
00:04:37.288 --> 00:04:43.739
I forget how many, so I work in, would
be probably this, something like this.

91
00:04:43.739 --> 00:04:47.503
I work on the node app which is where
all the request eventually hit.

92
00:04:47.503 --> 00:04:51.207
There are some layers before that,
but I work on one small section.

93
00:04:51.207 --> 00:04:56.070
There's all these other
microservices running at Netflix.

94
00:04:56.070 --> 00:05:01.470
So why is it that we use containers
over a bunch of virtual machines?

95
00:05:01.470 --> 00:05:05.429
Well, because it's faster, because we have
all these things that we need to update,

96
00:05:05.429 --> 00:05:06.417
we need to take down.

97
00:05:06.417 --> 00:05:10.018
We don't want it to impact
other people's' workload, but

98
00:05:10.018 --> 00:05:14.042
we also don't wanna bring up new servers,
cuz as we've all known,

99
00:05:14.042 --> 00:05:17.660
bringing up a new server,
it's not necessarily that fast.

100
00:05:17.660 --> 00:05:20.470
It can be slow, there can be issues,
especially when you bring it up,

101
00:05:20.470 --> 00:05:23.778
10,000 of them at the same time, or
something like that to process videos.

102
00:05:23.778 --> 00:05:25.550
Why would we do that?

103
00:05:25.550 --> 00:05:28.800
We can have servers running and then
swap out the containers as needed, and

104
00:05:28.800 --> 00:05:30.580
they handle the resource management for
us.

105
00:05:31.860 --> 00:05:33.120
I have another diagram.

106
00:05:33.120 --> 00:05:35.585
Even better, cuz I have many diagrams,
cuz containers are a little bit tricky.

107
00:05:35.585 --> 00:05:38.635
So this is a virtual machine.

108
00:05:38.635 --> 00:05:41.867
This is what we're running
right now on our web server.

109
00:05:41.867 --> 00:05:46.033
We have our apps, so we have Node, we have
NGINX, MySQL, Postgres, things like that.

110
00:05:46.033 --> 00:05:48.079
We have all these apps running.

111
00:05:48.079 --> 00:05:51.416
They interact with the libraries,
the applications,

112
00:05:51.416 --> 00:05:53.335
that interact with the kernel.

113
00:05:53.335 --> 00:05:57.140
So instead of that,
we have a container on this side.

114
00:05:57.140 --> 00:05:59.110
Container has its own
libraries that it needs.

115
00:05:59.110 --> 00:06:03.995
So NGINX needs to know about like our
socket library, things like that.

116
00:06:03.995 --> 00:06:06.475
That's all self-contained
in its own container, and

117
00:06:06.475 --> 00:06:09.483
then that all interacts with
the kernel instead of going through all

118
00:06:09.483 --> 00:06:12.032
these separate libraries that
are shared by everybody.

119
00:06:12.032 --> 00:06:15.656
How to make sense of it, these are the
things that only make sense at scale.

120
00:06:15.656 --> 00:06:19.140
You wouldn't have to do it for,
I don't know, ten servers.

121
00:06:19.140 --> 00:06:20.710
You'd probably get ahead of yourself.

122
00:06:20.710 --> 00:06:22.251
But when you talk about scaling,

123
00:06:22.251 --> 00:06:25.509
containers are definitely the way
that most companies are going now.

124
00:06:25.509 --> 00:06:27.610
It's just more efficient.

125
00:06:27.610 --> 00:06:30.893
So, the big word you hear
in containers is Docker.

126
00:06:30.893 --> 00:06:33.127
Everybody heard of Docker at some point?

127
00:06:33.127 --> 00:06:37.300
Yeah, Docker is a container
management tool essentially.

128
00:06:37.300 --> 00:06:41.327
You can create containers to ploy
them out, it helps manage the memory,

129
00:06:41.327 --> 00:06:46.149
the bandwidth, things like that, make
sure the libraries are self-incapsulated,

130
00:06:46.149 --> 00:06:47.690
that's what Docker does.

131
00:06:47.690 --> 00:06:50.750
We're not gonna go through that today,
cuz that's a whole other course.

132
00:06:50.750 --> 00:06:54.182
But, just so you know when someone's like,
yeah, use Docker, and things like that,

133
00:06:54.182 --> 00:06:56.450
you know exactly what they're
talking about at this point.

134
00:06:56.450 --> 00:07:01.055
A Docker setup looks something like this,
and there's a link at the bottom if you

135
00:07:01.055 --> 00:07:04.389
wanted to create a Docker container,
install Postgres.

136
00:07:04.389 --> 00:07:08.842
It's a bit tedious, it's a bit kind of
nuanced, but look, it's just running,

137
00:07:08.842 --> 00:07:12.605
I won't say shell commands, but
it looks kind of like shell commands,

138
00:07:12.605 --> 00:07:15.266
we're just running a bunch
of scripts like that.

139
00:07:15.266 --> 00:07:19.626
That's what a Docker setup does, but
the benefit is, once you make a container

140
00:07:19.626 --> 00:07:22.815
once, so you make the script
to create a Docker instance,

141
00:07:22.815 --> 00:07:25.046
you can just create 20 of them at once.

142
00:07:25.046 --> 00:07:28.593
So rather than us going through the same
steps we did over and over and over again,

143
00:07:28.593 --> 00:07:32.160
we can just do it once, and it's always
gonna run the same way every single time.

144
00:07:33.440 --> 00:07:34.420
That's pretty cool.

145
00:07:36.380 --> 00:07:37.630
All right?

146
00:07:37.630 --> 00:07:38.810
Good so far, yes?

147
00:07:40.050 --> 00:07:45.187
&gt;&gt; Speaker 5: So it's not that Docker
is a language analagous to Bash,

148
00:07:45.187 --> 00:07:48.504
right, it's that it's a program or

149
00:07:48.504 --> 00:07:53.213
something like a kernel
almost that takes in Bash and

150
00:07:53.213 --> 00:07:57.404
then processes that or
takes in a shell right?

151
00:07:57.404 --> 00:07:59.900
&gt;&gt; Jem Young: Not
necessarily shell language.

152
00:07:59.900 --> 00:08:06.054
This is just one instance of
how to create Docker commands.

153
00:08:07.240 --> 00:08:10.270
It's his own,
dockers are container manager.

154
00:08:10.270 --> 00:08:12.720
So it's a way of bringing up containers.

155
00:08:12.720 --> 00:08:15.270
Let me step back.

156
00:08:15.270 --> 00:08:16.680
So we have virtual machine.

157
00:08:16.680 --> 00:08:18.070
We all know what a virtual machine is now,

158
00:08:18.070 --> 00:08:20.000
it's that little chunk of
a server that we're running.

159
00:08:20.000 --> 00:08:22.148
Docker is essentially a virtual machine,

160
00:08:22.148 --> 00:08:26.145
nobody's assuming it's not a virtual
machine, but think of it like that, but

161
00:08:26.145 --> 00:08:28.651
instead of machines it
brings up containers, and

162
00:08:28.651 --> 00:08:31.893
it manages all the containers
just like a virtual machine does.

163
00:08:31.893 --> 00:08:36.599
Yeah, it's yeah, like I said, it's a
little tricky, but I just wanted everybody

164
00:08:36.599 --> 00:08:40.869
to get a look at it so we understand what
a container are, what a Docker does.

