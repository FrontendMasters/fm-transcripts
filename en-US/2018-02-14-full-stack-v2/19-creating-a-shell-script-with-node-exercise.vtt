WEBVTT

1
00:00:00.000 --> 00:00:02.141
&gt;&gt; Jem Young: Cuz we do
the JavaScripts here.

2
00:00:02.141 --> 00:00:04.480
Let's create a shell script with Node,
cuz we can do that too.

3
00:00:04.480 --> 00:00:06.373
What's gonna happen with
the shell script in Node?

4
00:00:06.373 --> 00:00:10.425
It's gonna open up Node and it's gonna
run through the scripts, pretty simple.

5
00:00:10.425 --> 00:00:14.611
You're saying, why not just write
a standard JavaScript application and

6
00:00:14.611 --> 00:00:15.612
run it with Node?

7
00:00:15.612 --> 00:00:18.196
You can do that too but
this is kind of a lazier way of doing it,

8
00:00:18.196 --> 00:00:21.672
because it's just gonna execute without
having to do Node name for your script.

9
00:00:23.681 --> 00:00:26.701
&gt;&gt; Jem Young: But we have a bonus in
here and I'll tell you about the bonus.

10
00:00:26.701 --> 00:00:29.831
What makes writing on node
shell scripts so much fun.

11
00:00:29.831 --> 00:00:33.791
So let's just make a directory called
workspace, call it whatever you want,

12
00:00:33.791 --> 00:00:35.120
make it your home folder.

13
00:00:35.120 --> 00:00:38.369
Just cuz the things we're gonna do,
we don't wanna install,

14
00:00:38.369 --> 00:00:41.206
I won't give it away and
you have access to the slides.

15
00:00:41.206 --> 00:00:42.734
But I won't give it away.

16
00:00:42.734 --> 00:00:44.335
But you wanna make your own folder for
this.

17
00:00:44.335 --> 00:00:45.894
Cuz we're gonna make an untamed script.

18
00:00:45.894 --> 00:00:47.120
Yes?
&gt;&gt; Speaker 2: On our server?

19
00:00:47.120 --> 00:00:48.245
&gt;&gt; Jem Young: Yes, on your server.

20
00:00:48.245 --> 00:00:49.021
Sorry.

21
00:00:53.683 --> 00:00:57.400
&gt;&gt; Jem Young: So make a workspace
folder and just move in to that and

22
00:00:57.400 --> 00:01:02.350
then touch index.js
&gt;&gt; Jem Young: Touch is

23
00:01:02.350 --> 00:01:07.172
a fun command because all it does is it
change the modification time on a file.

24
00:01:07.172 --> 00:01:10.370
If that file doesn't exist than it makes
it for you, that's what touch does.

25
00:01:10.370 --> 00:01:14.260
We can all say vi index.js,
putting it to vi, open it, close it.

26
00:01:14.260 --> 00:01:16.553
It's just faster if you want
to just create an empty file.

27
00:01:16.553 --> 00:01:19.143
Create it with touch.

28
00:01:19.143 --> 00:01:20.725
It's one of those final ones, right?

29
00:01:20.725 --> 00:01:27.416
Let's do it man touch, so
many options, so many options.

30
00:01:27.416 --> 00:01:30.659
Remember I said we only do
the basics everything has a man file

31
00:01:30.659 --> 00:01:33.470
everything has way more
flags than we'll ever use.

32
00:01:33.470 --> 00:01:37.113
Wait 1fn man man, yes.

33
00:01:37.113 --> 00:01:39.570
The manual has a manual
on how to use manual.

34
00:01:39.570 --> 00:01:42.981
Yes, Phoenix, but all right,
I'm gonna make a directory.

35
00:01:42.981 --> 00:01:45.315
Sorry, I got a little distracted there.

36
00:01:45.315 --> 00:01:49.515
Make a directory, and
call it workspace, and

37
00:01:49.515 --> 00:01:52.973
I'm just gonna move into workspace.

38
00:01:52.973 --> 00:01:59.724
Awesome, I'm gonna touch index.js, cool.

39
00:01:59.724 --> 00:02:03.308
Ls index.js, right?

40
00:02:03.308 --> 00:02:04.252
Everybody with me?

41
00:02:04.252 --> 00:02:05.514
Nothing complicated.

42
00:02:05.514 --> 00:02:06.992
Let's create a new project.

43
00:02:06.992 --> 00:02:10.429
I don't know if you've ever used npm init,
but it's a pretty useful command,

44
00:02:10.429 --> 00:02:11.779
it sets up everything for you.

45
00:02:11.779 --> 00:02:16.971
So let's say, npm init, we're actually
making an npm module as a node script.

46
00:02:16.971 --> 00:02:19.139
That's awesome.

47
00:02:19.139 --> 00:02:22.667
And call workspace,
that's fine, that's fine.

48
00:02:22.667 --> 00:02:24.110
Defaults, defaults.

49
00:02:27.033 --> 00:02:28.387
&gt;&gt; Jem Young: Cool.

50
00:02:28.387 --> 00:02:32.443
And if we look,
it created a package.json for us.

51
00:02:32.443 --> 00:02:39.804
So cat, and it just creates
a pretty basic npm package.json.

52
00:02:39.804 --> 00:02:42.978
It's kind useful,
like npm init, or like npm.

53
00:02:44.794 --> 00:02:47.786
&gt;&gt; Jem Young: So let's edit
the package.json real fast because

54
00:02:47.786 --> 00:02:49.462
we want a link to the binary.

55
00:02:49.462 --> 00:02:52.905
The scripts were gonna execute that,
executing is binary so

56
00:02:52.905 --> 00:02:56.287
it's like I don't need to
actually run it as a node script.

57
00:02:56.287 --> 00:02:59.292
I'm gonna run it as a binary,
as an executive log.

58
00:02:59.292 --> 00:03:03.086
So in package.json just add
the line bin for binary and

59
00:03:03.086 --> 00:03:07.291
you can call it my script,
you can call it whatever you want,

60
00:03:07.291 --> 00:03:11.355
you can call it load scripts,
it doesn't really matter.

61
00:03:11.355 --> 00:03:15.989
So I'm just gonna do that
here vi package.json and

62
00:03:15.989 --> 00:03:18.695
it scripts doesn't matter.

63
00:03:18.695 --> 00:03:23.129
Say,
&gt;&gt; Jem Young: Bin.

64
00:03:26.419 --> 00:03:29.010
&gt;&gt; Jem Young: And
have it always create the closing bracket.

65
00:03:31.551 --> 00:03:35.757
&gt;&gt; Jem Young: And what do I wanna call it?

66
00:03:35.757 --> 00:03:40.492
I'm gonna call it my script, so,
actually I'll call it loadscripts.

67
00:03:40.492 --> 00:03:42.018
That's how I remember what it is.

68
00:03:42.018 --> 00:03:46.971
And we're just gonna point to
index.js as our scripts that

69
00:03:46.971 --> 00:03:49.654
we're gonna run, index.js.

70
00:03:49.654 --> 00:03:51.151
Is everybody a little bit happier now?

71
00:03:51.151 --> 00:03:53.717
Back in JavaScript land, for now.

72
00:03:56.319 --> 00:04:00.351
&gt;&gt; Jem Young: So I added the reference
to the binary, just index.js and

73
00:04:00.351 --> 00:04:03.161
we are just gonna write quit on that one.

74
00:04:03.161 --> 00:04:04.400
Everybody good?

75
00:04:04.400 --> 00:04:05.448
Cool.

76
00:04:08.158 --> 00:04:11.489
&gt;&gt; Jem Young: Next, we're gonna do the
same thing we just wrote with that shell

77
00:04:11.489 --> 00:04:13.378
script but we are gonna do it in node.

78
00:04:13.378 --> 00:04:16.677
And you'll note all the extra
work we have to do the same work.

79
00:04:16.677 --> 00:04:20.724
Now, we're starting to see the benefit
of writing in shell, writing in batch,

80
00:04:20.724 --> 00:04:21.983
versus writing in node.

81
00:04:21.983 --> 00:04:24.121
Because we have to
execute these processes,

82
00:04:24.121 --> 00:04:27.230
we have to open all these other things,
but let's go and do that.

83
00:04:27.230 --> 00:04:29.755
If you wanna cheat, because I know
it's getting close to lunch, and

84
00:04:29.755 --> 00:04:30.588
I'm as hungry as you.

85
00:04:30.588 --> 00:04:35.163
In the comments I put all these codes and
you just copy-paste it because I

86
00:04:35.163 --> 00:04:38.613
respect you, and
I figure you know how to do this part,

87
00:04:38.613 --> 00:04:42.147
because I'm gonna do the same thing,
don't judge me.

88
00:04:42.147 --> 00:04:43.745
Copy, paste.

89
00:04:51.111 --> 00:04:52.140
&gt;&gt; Jem Young: Make you prettier.

90
00:04:56.489 --> 00:04:59.931
&gt;&gt; Jem Young: So what does the scripts do?

91
00:04:59.931 --> 00:05:04.438
It does the same thing we did,
it gets the load average from proc and

92
00:05:04.438 --> 00:05:05.738
it executes that.

93
00:05:05.738 --> 00:05:09.176
But now we have to worry about standard
out, standard in, standard error.

94
00:05:09.176 --> 00:05:12.641
We're not gonna enable any standard error,
standard in because we're not reading

95
00:05:12.641 --> 00:05:15.141
anything in this file, and
it shouldn't throw any errors.

96
00:05:15.141 --> 00:05:17.428
Generally, you wanna
handle standard error,

97
00:05:17.428 --> 00:05:20.755
otherwise you'll be running errors and
nothing will be outputted.

98
00:05:20.755 --> 00:05:24.189
But because we don't know when this is
gonna execute, it's gonna execute when it

99
00:05:24.189 --> 00:05:27.287
has free CPU cycles, we'd have to
create an on function with a callback.

100
00:05:27.287 --> 00:05:29.041
Everybody knows what call backs are?

101
00:05:29.041 --> 00:05:33.788
Yes, Frontend Masters, you're masters
of the call back, and/or promises.

102
00:05:33.788 --> 00:05:36.104
We could do this with probably async, but

103
00:05:36.104 --> 00:05:40.219
I don't wanna get too complicated with
the promises and thing like that.

104
00:05:40.219 --> 00:05:45.466
But we're just saying on standard out,
&gt;&gt; Jem Young: It's gonna get some data and

105
00:05:45.466 --> 00:05:48.276
we're just gonna split out that data,
nothing to it.

106
00:05:50.590 --> 00:05:54.317
&gt;&gt; Jem Young: Now, if you wanna
handle standard in or standard error,

107
00:05:54.317 --> 00:05:58.291
it's vstat.standarderror,
stat.standardin, yeah.

108
00:05:58.291 --> 00:06:01.282
So let's go ahead and
write and close that.

109
00:06:12.192 --> 00:06:14.634
&gt;&gt; Jem Young: I didn't put the good
part in here, I must have left it out.

110
00:06:14.634 --> 00:06:18.767
Now, the good part, this is the fun part.

111
00:06:18.767 --> 00:06:24.171
So if we npm i -g, nothing attended to it.

112
00:06:24.171 --> 00:06:27.824
We're gonna create a script that will run
globally without us having it called node

113
00:06:27.824 --> 00:06:30.503
and we can run it from anywhere
because it's a shell script.

114
00:06:30.503 --> 00:06:34.992
So if we npm i -g, all right?

115
00:06:34.992 --> 00:06:36.595
What did I call that script?

116
00:06:36.595 --> 00:06:38.720
Loadscript.

117
00:06:40.094 --> 00:06:43.642
&gt;&gt; Jem Young: Yeah, so they'll load,
it's all zeroes, we won't be for long.

118
00:06:43.642 --> 00:06:47.068
But now, we created an npm module that
we can just run the shell script from

119
00:06:47.068 --> 00:06:48.235
anywhere in the system.

120
00:06:48.235 --> 00:06:51.794
That's the cool thing about
why we're doing it in npm and

121
00:06:51.794 --> 00:06:53.733
not just a standalone system.

122
00:06:55.219 --> 00:06:58.330
&gt;&gt; Jem Young: Important note,
if you make changes to the file because

123
00:06:58.330 --> 00:07:02.909
npm is blinking a reference to the file,
you have to npmg every time you update it.

124
00:07:02.909 --> 00:07:07.210
We can do it a different way, just so you
know if you're making changes that shell

125
00:07:07.210 --> 00:07:10.076
script and it's not updating,
just npm i -g again.

126
00:07:10.076 --> 00:07:13.372
But that's pretty cool, so
now I can create shell scripts

127
00:07:13.372 --> 00:07:17.147
in a programming language that
I'm familiar with, JavaScript.

128
00:07:17.147 --> 00:07:19.370
And I can run them anywhere on the system.

129
00:07:19.370 --> 00:07:20.545
That's pretty cool.

130
00:07:20.545 --> 00:07:21.731
That's really useful.

131
00:07:23.724 --> 00:07:26.970
&gt;&gt; Jem Young: And again, there is
a course on Shell Scripting and VIM and

132
00:07:26.970 --> 00:07:31.542
Regex that I highly recommend you take if
you wanna get more on your shell scripting

133
00:07:31.542 --> 00:07:32.614
and your nuances.

134
00:07:32.614 --> 00:07:36.876
Way more commands like calendar and date,
time, things like that, if you want.

135
00:07:36.876 --> 00:07:38.930
This is enough knowledge for us for now.

