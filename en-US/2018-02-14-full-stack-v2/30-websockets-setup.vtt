WEBVTT

1
00:00:00.000 --> 00:00:03.086
&gt;&gt; Jem Young: All right, so
now our site should be flying along.

2
00:00:03.086 --> 00:00:05.964
We're caching on the client side,
we're caching on the server side.

3
00:00:05.964 --> 00:00:09.570
These are, I wouldn't say easy
optimizations cuz you still have to think

4
00:00:09.570 --> 00:00:12.844
about it, but the actual code to
do it is pretty straightforward.

5
00:00:12.844 --> 00:00:16.217
And at this point you should be able
to take this home to your company or

6
00:00:16.217 --> 00:00:18.555
whatever you do, and
implement some of these.

7
00:00:18.555 --> 00:00:21.685
And I guarantee you, the speed of
your side just a little bit faster.

8
00:00:21.685 --> 00:00:25.260
So now let's talk about WebSockets.

9
00:00:25.260 --> 00:00:27.936
We've finished caching,
we're pretty optimized at this point.

10
00:00:27.936 --> 00:00:30.943
Let's talk about how we run
a WebSocket through our Nginx server,

11
00:00:30.943 --> 00:00:32.296
cuz websockets are awesome.

12
00:00:32.296 --> 00:00:34.335
Anyone tell me what WebSocket is?

13
00:00:34.335 --> 00:00:35.563
Somebody?

14
00:00:35.563 --> 00:00:36.493
Nobody at all.

15
00:00:36.493 --> 00:00:39.129
Yes?
&gt;&gt; Speaker 2: Allows two

16
00:00:39.129 --> 00:00:43.742
sites,
&gt;&gt; Speaker 2: [LAUGH] To,

17
00:00:43.742 --> 00:00:46.909
like, yeah, runs simultaneously basically.

18
00:00:46.909 --> 00:00:51.392
So if someone makes a change on,
let's say you have a card game happening,

19
00:00:51.392 --> 00:00:54.752
if one person, or whatever,
I've seen that example.

20
00:00:54.752 --> 00:00:59.651
If someone moves a card one browser, like
on the other person's browser they will

21
00:00:59.651 --> 00:01:01.499
instantly see the card.
&gt;&gt; Jem Young: Yeah.

22
00:01:01.499 --> 00:01:03.170
&gt;&gt; Speaker 2: That was a roundabout way.

23
00:01:03.170 --> 00:01:04.135
&gt;&gt; Jem Young: That's right.

24
00:01:04.135 --> 00:01:10.808
That's more what WebSockets are used for,
kind of like their utility.

25
00:01:10.808 --> 00:01:15.706
But anybody else, WebSockets, you use
them all the time, most sites use them or

26
00:01:15.706 --> 00:01:17.158
some sort, all right?

27
00:01:17.158 --> 00:01:21.529
So from first course,
you remember how an HTTP connection works.

28
00:01:21.529 --> 00:01:24.406
You make request a server,
it comes back, it does some stuff and

29
00:01:24.406 --> 00:01:25.433
it sends it back down.

30
00:01:25.433 --> 00:01:27.521
The problem is that's all client driven.

31
00:01:27.521 --> 00:01:29.526
The client has to do that for you, but

32
00:01:29.526 --> 00:01:31.875
what if we can just push
data to the client?

33
00:01:31.875 --> 00:01:35.325
So we just have a persistent connection,
and we just pipe stuff into the client cuz

34
00:01:35.325 --> 00:01:38.428
he's listening for that, and
that's at the core of what a WebSocket is.

35
00:01:38.428 --> 00:01:41.995
It's just a long running connection
that's open, and I just send data down,

36
00:01:41.995 --> 00:01:45.308
you can send data to me and we don't
have to handshake every single time.

37
00:01:45.308 --> 00:01:49.519
That's the beauty of WebSocket, is that's
why things are in real time cuz you don't

38
00:01:49.519 --> 00:01:52.147
need to do that constant pulling for
change.

39
00:01:52.147 --> 00:01:56.508
Did I a question, just stretch them, yeah.

40
00:01:56.508 --> 00:02:00.212
So if you're talking about
how to have fast data, so

41
00:02:00.212 --> 00:02:02.410
how do you things in real time?

42
00:02:02.410 --> 00:02:06.436
Let's say real time cuz it's always some
latency, WebSockets are the way to go.

43
00:02:06.436 --> 00:02:10.442
There's also such things as Server Push
which is a bit more advanced and

44
00:02:10.442 --> 00:02:14.868
that's pushing data to the client using
a service worker which is fantastic.

45
00:02:14.868 --> 00:02:19.519
But WebSockets have been around for
a long time whereas server push is just

46
00:02:19.519 --> 00:02:24.411
a bit newer, but let's see if we can find
an example of a WebSocket right now.

47
00:02:24.411 --> 00:02:31.412
I bet GitHub is probably running one.

48
00:02:31.412 --> 00:02:35.181
Let's see if we can open up our,

49
00:02:36.437 --> 00:02:40.786
console, nothing happened here.

50
00:02:40.786 --> 00:02:46.124
See from memory cache beautiful,
do they have a WebSocket open?

51
00:02:46.124 --> 00:02:47.669
They do have a web socket open.

52
00:02:47.669 --> 00:02:52.454
So if you want to see the web socket
connection in particular in Chrome,

53
00:02:52.454 --> 00:02:57.818
you can just go to WS, and it's gonna
show you the web socket that it's making.

54
00:02:57.818 --> 00:03:02.450
And if we can look.

55
00:03:02.450 --> 00:03:05.067
Don't think it's really sending that much.

56
00:03:05.067 --> 00:03:07.966
But in GitHub I've noticed over the past
couple of years things seem to happen

57
00:03:07.966 --> 00:03:08.509
much faster.

58
00:03:08.509 --> 00:03:11.759
Like your pull requests are approved
that's what makes the change and

59
00:03:11.759 --> 00:03:14.030
that's instantly that's WebSockets for
you.

60
00:03:14.030 --> 00:03:15.815
It's just the data is
pushed automatically,

61
00:03:15.815 --> 00:03:17.566
you don't have to refresh
the page anymore.

62
00:03:17.566 --> 00:03:21.518
So I like to think of it as
Ajax on steroids, it's not.

63
00:03:21.518 --> 00:03:23.436
They're completely
different technologies but

64
00:03:23.436 --> 00:03:27.145
It's a good way of thinking about things.
&gt;&gt; Speaker 3: Supported by all browsers?

65
00:03:27.145 --> 00:03:28.702
&gt;&gt; Jem Young: Yes, great question.

66
00:03:28.702 --> 00:03:30.308
It is supported by all browsers now.

67
00:03:30.308 --> 00:03:33.032
WebSockets are a pretty old
technology at this point.

68
00:03:33.032 --> 00:03:35.597
By old, I mean five or six years.

69
00:03:35.597 --> 00:03:37.891
That's old in Internet land.

70
00:03:37.891 --> 00:03:39.228
But the problem is,

71
00:03:39.228 --> 00:03:43.247
how do we want to tunnel a WebSocket
to our node application?

72
00:03:43.247 --> 00:03:45.007
We can do that with Nginx.

73
00:03:45.007 --> 00:03:48.229
And if you're thinking why do we have
tunnel three Nginx at this point,

74
00:03:48.229 --> 00:03:49.690
why not just hit node directly?

75
00:03:49.690 --> 00:03:51.220
Like open up a port and hit it,

76
00:03:51.220 --> 00:03:54.774
Nginx does all these powerful things
like caching certain headers,

77
00:03:54.774 --> 00:03:58.714
we can do that node but it'd be a lot
more work, and it'd be a lot more set up.

78
00:03:58.714 --> 00:04:02.686
Letting Nginx handle it, we just let it
handle it cuz that's what it's good at.

79
00:04:02.686 --> 00:04:06.261
But if you wanted to, you can tunnel
directly to your node application.

80
00:04:06.261 --> 00:04:07.299
But that's not a best practice.

81
00:04:07.299 --> 00:04:12.588
So let's suit it in Nginx.
&gt;&gt; Jem Young: I did it again.

82
00:04:12.588 --> 00:04:16.152
I just need to find all of these.

83
00:04:16.152 --> 00:04:20.390
You are all learning where
the Nginx configuration is not.

84
00:04:20.390 --> 00:04:25.254
So in our location block,
which we already set our proxy to node,

85
00:04:25.254 --> 00:04:28.172
just add in two new directors in there,

86
00:04:28.172 --> 00:04:32.964
we'll say proxy_set_header and
proxy Connection upgrade.

87
00:04:32.964 --> 00:04:37.183
So a WebSocket connects on,
I forget the exact protocols, but

88
00:04:37.183 --> 00:04:38.861
it requires an upgrade.

89
00:04:38.861 --> 00:04:40.348
It's like 101 or something like that.

90
00:04:40.348 --> 00:04:45.055
So we have to upgrade that connection
if it's a WebSocket request.

91
00:04:45.055 --> 00:04:47.744
And it's just gonna upgrade it and
send it straight to Node.

92
00:04:47.744 --> 00:04:51.751
And then now we have a real-time
pipe into Node itself.

93
00:04:51.751 --> 00:04:56.017
So if you add those directives in there,
all right.

94
00:05:16.408 --> 00:05:19.023
&gt;&gt; Jem Young: set_header.

95
00:05:19.023 --> 00:05:25.881
Set, upgrade request,
&gt;&gt; Jem Young: To,

96
00:05:42.858 --> 00:05:43.966
&gt;&gt; Jem Young: Web connection.

97
00:05:50.578 --> 00:05:52.360
&gt;&gt; Speaker 4: Quotes around that grid.

98
00:05:52.360 --> 00:05:52.971
&gt;&gt; Jem Young: Which one?

99
00:05:52.971 --> 00:05:53.573
&gt;&gt; Speaker 4: Quotes around that

100
00:05:53.573 --> 00:05:54.134
grid.
&gt;&gt; Jem Young: Thank you.

101
00:05:54.134 --> 00:05:56.182
&gt;&gt; Speaker 4: On the other side.

102
00:05:56.182 --> 00:05:57.153
&gt;&gt; Jem Young: That would have got me.

103
00:05:59.730 --> 00:06:03.671
&gt;&gt; Jem Young: Perfect, yeah.

104
00:06:03.671 --> 00:06:05.735
&gt;&gt; Speaker 4: No dollar sign, too.

105
00:06:05.735 --> 00:06:06.742
&gt;&gt; Jem Young: Thank you,

106
00:06:06.742 --> 00:06:11.282
where did I probably use
these connected variables?

107
00:06:11.282 --> 00:06:15.683
All right, so your coach looks something
like this, at this point, very good,

108
00:06:15.683 --> 00:06:19.048
making sense what we're doing,
all we're just tunneling,

109
00:06:19.048 --> 00:06:22.173
a website connection through Nginx,
directly to node.

110
00:06:22.173 --> 00:06:28.314
And that's right, quit, sanity check it,
cool, let's restart Nginx.

111
00:06:28.314 --> 00:06:32.896
All right,
&gt;&gt; Jem Young: But

112
00:06:32.896 --> 00:06:34.912
your saying, where is the payoff, Joe?

113
00:06:34.912 --> 00:06:36.555
That was a lot of work.

114
00:06:36.555 --> 00:06:41.247
Well, if we go to slash load,
probably nothing happening,

115
00:06:41.247 --> 00:06:43.551
we need to make some changes.

116
00:06:43.551 --> 00:06:48.677
But we see that our WebSocket
connection is live and well.

117
00:06:48.677 --> 00:06:51.209
The server just sent me
a message saying welcome, and

118
00:06:51.209 --> 00:06:53.918
I'll show you the code that
is handling this in a second.

119
00:06:53.918 --> 00:06:57.291
But essentially,
we have a live stream from the server.

120
00:06:57.291 --> 00:06:59.562
So, I can send data as much as I want.

121
00:06:59.562 --> 00:07:03.092
I can send data back to the server and
it's just gonna to handle it in real time

122
00:07:03.092 --> 00:07:05.365
without the user having
to do all that much work.

