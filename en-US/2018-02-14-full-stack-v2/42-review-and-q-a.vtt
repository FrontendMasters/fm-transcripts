WEBVTT

1
00:00:00.119 --> 00:00:02.667
&gt;&gt; Jem Young: That is the end,
we have learned automated deployments,

2
00:00:02.667 --> 00:00:05.328
we learned about databases,
we learned about containers.

3
00:00:05.328 --> 00:00:08.199
This link slide is empty cuz I will
fill with whatever questions or

4
00:00:08.199 --> 00:00:09.774
things you want more resources to.

5
00:00:09.774 --> 00:00:12.796
I'll look them up,
try to find some quality ones.

6
00:00:12.796 --> 00:00:15.121
&gt;&gt; Speaker 2: If you're gonna
talk about maintainability.

7
00:00:15.121 --> 00:00:16.416
&gt;&gt; Jem Young: I can talk
about maintainability.

8
00:00:16.416 --> 00:00:20.177
Not related to this course, but
I'm very passionate about it.

9
00:00:20.177 --> 00:00:23.581
I was in Brazil JS maybe
about a month ago, and

10
00:00:23.581 --> 00:00:28.280
I was speaking and
I have a whole talk on maintainability.

11
00:00:28.280 --> 00:00:29.845
Well, it's called Zen and
the Art of Code Maintenance,

12
00:00:29.845 --> 00:00:33.810
cuz at the end of the day, all I care
about it is running maintainable code.

13
00:00:33.810 --> 00:00:36.618
People say I want to be fast, I want to be
sexy, I wanted to use the newest things.

14
00:00:36.618 --> 00:00:39.836
I just care about it being maintainable
because I'm gonna be the one that

15
00:00:39.836 --> 00:00:40.479
has to fix it.

16
00:00:40.479 --> 00:00:42.250
So one of the most heated things,

17
00:00:42.250 --> 00:00:46.256
most contentious things that I said was
that you need to comment your code.

18
00:00:46.256 --> 00:00:48.972
And so many people came out to
me afterwards and they're like,

19
00:00:48.972 --> 00:00:49.748
what do you mean?

20
00:00:49.748 --> 00:00:53.479
I don't have to comment my code, I read
this book by some person and they said,

21
00:00:53.479 --> 00:00:55.018
good code is self documenting.

22
00:00:55.018 --> 00:00:58.640
I've heard that so many times.

23
00:00:58.640 --> 00:01:00.242
And I disagree.

24
00:01:00.242 --> 00:01:03.950
You don't have to comment on every line
on your code, but it's a general rule.

25
00:01:03.950 --> 00:01:06.781
Comment your code,
always comment your code.

26
00:01:06.781 --> 00:01:09.922
Yeah, a lot of people disagreed
with that very strongly.

27
00:01:09.922 --> 00:01:12.115
I don't comment my code.

28
00:01:12.115 --> 00:01:15.634
I don't know if it's laziness or
huberous or what it is, but

29
00:01:15.634 --> 00:01:19.570
I'm not that smart to remember where
my brain was at six months ago.

30
00:01:19.570 --> 00:01:23.499
So I wrote a comment just
saying here's why I did this.

31
00:01:23.499 --> 00:01:24.506
That's it.

32
00:01:24.506 --> 00:01:25.774
But.

33
00:01:25.774 --> 00:01:29.622
&gt;&gt; Speaker 3: Are you mostly thinking
about commenting on certain parts

34
00:01:29.622 --> 00:01:33.234
of your code that somebody
else might not understand,

35
00:01:33.234 --> 00:01:37.245
or is it just like,
&gt;&gt; Speaker 3: Like a bookmark,

36
00:01:37.245 --> 00:01:39.918
just a reminder kind of thing?

37
00:01:39.918 --> 00:01:44.453
&gt;&gt; Jem Young: Yeah, it's things that if it
took me probably more then a few seconds

38
00:01:44.453 --> 00:01:48.847
to reason about, it's probably
worth commenting for future me.

39
00:01:48.847 --> 00:01:52.666
I mean forget everybody else,
I care about future me, my laziness and

40
00:01:52.666 --> 00:01:54.557
my ability to go back and fix that.

41
00:01:54.557 --> 00:01:56.908
Things that should always be common,
regular expressions.

42
00:01:56.908 --> 00:01:58.502
Always comment your regular expressions.

43
00:01:58.502 --> 00:02:02.307
Not everyone has the same skill level on
quickly partitioning regular expression.

44
00:02:02.307 --> 00:02:06.063
But if you said, hey this is an email
validation regular expression, that's so

45
00:02:06.063 --> 00:02:09.379
much faster than let me copy and
paste this into some regular expression

46
00:02:09.379 --> 00:02:12.664
break down which may or may not tell
me what it's doing in the long run.

47
00:02:12.664 --> 00:02:15.232
That's an easy one.

48
00:02:15.232 --> 00:02:16.196
What else should be commented?

49
00:02:16.196 --> 00:02:19.912
Don't comment your variable names all
the time, but that's like overboard.

50
00:02:19.912 --> 00:02:21.746
Not every line but in general.

51
00:02:21.746 --> 00:02:25.821
If it took you time then reason about,
it's worth putting a comment in there,

52
00:02:25.821 --> 00:02:27.814
helps just about what's happening.

53
00:02:27.814 --> 00:02:29.207
So that's our answer for maintainability.

54
00:02:29.207 --> 00:02:33.031
[LAUGH] It's comment your code,
it's like the easiest one, yes.

55
00:02:33.031 --> 00:02:38.715
&gt;&gt; Speaker 4: What's your recommendation
on the tools that will enable developer

56
00:02:38.715 --> 00:02:44.010
develop something for the mobile apps,
like Ionic framework.

57
00:02:44.010 --> 00:02:47.480
&gt;&gt; Jem Young: Or Cordova for
jobs, things like that.

58
00:02:47.480 --> 00:02:49.370
I don't really have recommendations.

59
00:02:49.370 --> 00:02:51.130
That's not my strong suit.

60
00:02:51.130 --> 00:02:55.909
We recently had a very long debates,
at least on my team about,

61
00:02:55.909 --> 00:02:59.439
do we go React Native or
do we go Native Native.

62
00:02:59.439 --> 00:03:00.701
And it's still up in the air.

63
00:03:00.701 --> 00:03:03.840
The thing is writing JavaScript,
it's a very friendly language.

64
00:03:03.840 --> 00:03:07.544
Lots of JavaScript developers out
there versus Android developers.

65
00:03:07.544 --> 00:03:12.282
It's much harder,
I think to find a good Android developer.

66
00:03:12.282 --> 00:03:16.507
So React Native is really appealing
as far as writing a native app today.

67
00:03:16.507 --> 00:03:20.355
And I know a lot of people
are using React Native today.

68
00:03:20.355 --> 00:03:24.364
But I do lean slightly
towards Native Native.

69
00:03:24.364 --> 00:03:25.540
Because at the end of the day,

70
00:03:25.540 --> 00:03:29.370
there is functionality in React Native
that you're just not going to get.

71
00:03:29.370 --> 00:03:31.860
But here's what I always say for
everything.

72
00:03:31.860 --> 00:03:33.400
Do whatever's best for you.

73
00:03:33.400 --> 00:03:38.713
If you don't want to use Vim and
you want to use emax, do that too.

74
00:03:38.713 --> 00:03:41.553
I'd never tell you what to do, I'd just
tell you how to think about it and

75
00:03:41.553 --> 00:03:42.965
are you solving the right problem.

76
00:03:42.965 --> 00:03:47.709
Let's say, do I want to use Ubuntu or
Fedora instead of Ubuntu?

77
00:03:47.709 --> 00:03:48.609
Do that too.

78
00:03:48.609 --> 00:03:50.555
Like, we're just using Ubuntu.

79
00:03:50.555 --> 00:03:54.320
So as far as what tool to use as for
building a mobile app,

80
00:03:54.320 --> 00:03:56.336
do whatever's fast for you.

81
00:03:56.336 --> 00:03:58.008
Like I said,
I don't have much recommendations.

82
00:03:58.008 --> 00:04:00.910
But I do know that React Native
is very popular, and

83
00:04:00.910 --> 00:04:04.895
it's doing quite well because it's
half React and half actual code,

84
00:04:04.895 --> 00:04:09.304
like Native code, which makes it load
faster than some of the alternatives.

85
00:04:09.304 --> 00:04:10.945
Yes, any other questions?

86
00:04:10.945 --> 00:04:11.695
Throw it up there.

87
00:04:11.695 --> 00:04:15.877
&gt;&gt; Speaker 5: Yeah, could you talk
about services workers a little bit cuz

88
00:04:15.877 --> 00:04:18.757
you kept, I mean I have looked into them.

89
00:04:18.757 --> 00:04:24.048
Actually saw Steve and
I can't remember the other guys name.

90
00:04:24.048 --> 00:04:25.604
Took a Master's course on it.

91
00:04:25.604 --> 00:04:26.327
&gt;&gt; Jem Young: Yeah.

92
00:04:26.327 --> 00:04:27.596
&gt;&gt; Speaker 5: And it was awesome.

93
00:04:27.596 --> 00:04:30.443
What resources do you use to.

94
00:04:30.443 --> 00:04:31.074
&gt;&gt; Jem Young: For service workers?

95
00:04:31.074 --> 00:04:33.484
&gt;&gt; Speaker 5: Yeah, I mean can you
just talk a little bit about it for

96
00:04:33.484 --> 00:04:34.402
people who don't.

97
00:04:34.402 --> 00:04:38.075
&gt;&gt; Jem Young: Yeah, so everybody kind
of know service worker, heard of it?

98
00:04:38.075 --> 00:04:40.170
So have you heard of a web worker?

99
00:04:42.540 --> 00:04:46.060
Okay, just quick high level recap.

100
00:04:46.060 --> 00:04:49.110
Web worker is it's
the best we have currently

101
00:04:49.110 --> 00:04:50.890
to do multithreading in JavaScript.

102
00:04:50.890 --> 00:04:54.800
It's not multithreading, but
we can run a computational expense of work

103
00:04:54.800 --> 00:04:59.060
in a totally separate thread on CPU
that won't block the rendering.

104
00:04:59.060 --> 00:05:03.050
I have a whole presentation on this but
okay, JavaScript.

105
00:05:03.050 --> 00:05:03.630
Single threaded.

106
00:05:03.630 --> 00:05:04.360
It has one thread.

107
00:05:04.360 --> 00:05:07.070
That's how we have to know about async and
callbacks and things like that because

108
00:05:07.070 --> 00:05:09.470
it's just one thread running over and
over and over again.

109
00:05:09.470 --> 00:05:12.360
Included in that thread is the ability
to render the user interface.

110
00:05:12.360 --> 00:05:15.140
So when someone clicks
that has to get rendered.

111
00:05:15.140 --> 00:05:18.472
But that's all in the same thread that's
happening that's processing your CSS,

112
00:05:18.472 --> 00:05:20.766
processing your JavaScript,
processing everything.

113
00:05:20.766 --> 00:05:24.408
A web worker is way to offload some very
expensive work that will lock the thread

114
00:05:24.408 --> 00:05:28.011
into a separate thread and then when
it's done working it just sends it back.

115
00:05:28.011 --> 00:05:29.973
That's what a web worker is.

116
00:05:29.973 --> 00:05:32.605
So the difference between a web worker and
a service worker is,

117
00:05:32.605 --> 00:05:35.999
the service worker is, once you install
it, the service worker is still there.

118
00:05:35.999 --> 00:05:39.360
It's persistent, it doesn't go away
unless you manually delete it.

119
00:05:39.360 --> 00:05:41.930
Whereas the web worker, once you close
the browser, the web worker is gone.

120
00:05:41.930 --> 00:05:44.130
The whole process shutdown.

121
00:05:44.130 --> 00:05:48.754
The powerful thing about service worker
being there persistent, it can read and

122
00:05:48.754 --> 00:05:53.319
write through a cache and it can intercept
request story off from your browser.

123
00:05:53.319 --> 00:05:55.859
So all the thing we did
with different caching,

124
00:05:55.859 --> 00:05:57.902
I could do that with a service worker.

125
00:05:57.902 --> 00:05:59.833
It's a bit, I won't say easier.

126
00:05:59.833 --> 00:06:01.879
There's different mechanisms for caching.

127
00:06:01.879 --> 00:06:05.249
That's a powerful thing about service
worker because I can create an entire

128
00:06:05.249 --> 00:06:06.314
offline application.

129
00:06:06.314 --> 00:06:10.320
It doesn't have to make any calls
to the server, it just works.

130
00:06:10.320 --> 00:06:13.839
&gt;&gt; Speaker 5: And in your eyes, does that
kind of replace some of the stuff you're

131
00:06:13.839 --> 00:06:15.582
doing with caching and headers?

132
00:06:15.582 --> 00:06:18.196
Or is there a place for them to coexist?

133
00:06:18.196 --> 00:06:20.837
&gt;&gt; Jem Young: I think there is a place for
them to coexist.

134
00:06:20.837 --> 00:06:22.936
Like we did with the expire centers,
you don't always want to do that.

135
00:06:22.936 --> 00:06:25.201
Sometimes you want your
data to always be fresh.

136
00:06:25.201 --> 00:06:27.625
You don't always want to cache
all your work on the server.

137
00:06:27.625 --> 00:06:31.423
The service worker is a good way of
saying I want to build our application we

138
00:06:31.423 --> 00:06:33.886
just built, but
I want to make it work offline.

139
00:06:33.886 --> 00:06:35.677
Then the service worker is
a great way to do that,

140
00:06:35.677 --> 00:06:37.470
because there are no server calls.

141
00:06:37.470 --> 00:06:39.420
That need to be done if you load
up your resources correctly.

142
00:06:40.430 --> 00:06:46.170
But to do that you need to use you
have to have HPS enabled which we do.

143
00:06:46.170 --> 00:06:50.000
And the one powerful thing about servers
which we haven't really talked about is

144
00:06:50.000 --> 00:06:51.630
server push.

145
00:06:51.630 --> 00:06:55.387
It's fairly complex but it's
the ability to push data to the client.

146
00:06:55.387 --> 00:06:57.655
I can update your cache
even if the browser,

147
00:06:57.655 --> 00:07:00.057
isn't open even if you're
not on my website.

148
00:07:00.057 --> 00:07:04.214
Just I'm on my phone chilling next
time you come to Jem.party I can have

149
00:07:04.214 --> 00:07:07.469
a fresh copy of that data and
you don't have to do that for

150
00:07:07.469 --> 00:07:09.989
you it does that in the background for
you.

151
00:07:09.989 --> 00:07:14.135
That's a nit more complex because as you
can imaging the ability to push arbitrary

152
00:07:14.135 --> 00:07:16.787
data to the client is very,
very, very dangerous.

153
00:07:16.787 --> 00:07:19.593
If someone got a hold of that
you can do some nasty work, but

154
00:07:19.593 --> 00:07:22.994
that's one of the strongest things
about service workers right now.

155
00:07:22.994 --> 00:07:25.925
That's why I'm a big fan of them.

156
00:07:25.925 --> 00:07:29.035
You can also do things because it
intercepts all of your requests going

157
00:07:29.035 --> 00:07:29.885
out and coming in.

158
00:07:29.885 --> 00:07:31.270
You can parse data for them.

159
00:07:31.270 --> 00:07:34.830
I can return data arbitrarily, if I want.

160
00:07:34.830 --> 00:07:36.270
I can kinda do whatever I want.

161
00:07:36.270 --> 00:07:42.044
It's like the last bit
of control you have.

162
00:07:42.044 --> 00:07:44.455
If we control the file,
we control the server, and

163
00:07:44.455 --> 00:07:47.721
now we control the browser a bit that
was coming in and out of the page.

164
00:07:47.721 --> 00:07:50.919
So I was talking for
like a year in 2015 or so,

165
00:07:50.919 --> 00:07:54.900
2016, on service worker, so
I can go on all day though.

166
00:07:54.900 --> 00:07:57.554
&gt;&gt; Speaker 5: What'd you
use to learn about that?

167
00:07:57.554 --> 00:07:58.971
&gt;&gt; Jem Young: Trial and error.

168
00:07:58.971 --> 00:07:59.733
A lot of trial and error.

169
00:07:59.733 --> 00:08:02.470
When I was doing it there wasn't
all the resources there are now.

170
00:08:02.470 --> 00:08:04.313
Now Google's pretty solid.

171
00:08:04.313 --> 00:08:06.338
&gt;&gt; Speaker 5: Just like their articles and
docs.

172
00:08:06.338 --> 00:08:07.940
&gt;&gt; Jem Young: There's lots of articles and
docs but

173
00:08:07.940 --> 00:08:10.001
when I was doing a lot of
stuff was undocumented.

174
00:08:10.001 --> 00:08:13.789
It's just trying it, failing,
trying it, failing and then learning.

175
00:08:13.789 --> 00:08:20.025
Mozilla has serviceworkers, so service
workers, as a cookbook of useful recipes.

176
00:08:20.025 --> 00:08:22.358
Now if you're talking
about serviceworke.rs,

177
00:08:22.358 --> 00:08:24.641
the stuff they have in
there is pretty advanced.

178
00:08:24.641 --> 00:08:28.261
But now that you have HTTPS you can
run a service worker just fine, and

179
00:08:28.261 --> 00:08:30.707
you can start implementing
things like that.

180
00:08:30.707 --> 00:08:33.993
But I encourage you to look at service
workers, I think they're very powerful,

181
00:08:33.993 --> 00:08:36.138
probably one of the more
powerful tools to come out.

182
00:08:36.138 --> 00:08:39.280
Since Ajax every Ajax,
the thing that lets you

183
00:08:39.280 --> 00:08:42.775
load data in without refreshing the page,
its pretty cool.

184
00:08:42.775 --> 00:08:47.869
But yeah, that's what service worker ran.

185
00:08:47.869 --> 00:08:49.820
&gt;&gt; Speaker 6: Another kind
of rule of thumb question.

186
00:08:49.820 --> 00:08:50.409
&gt;&gt; Jem Young: Yeah.

187
00:08:50.409 --> 00:08:52.317
&gt;&gt; Speaker 6: Pertaining to containers,

188
00:08:52.317 --> 00:08:57.569
I'm guessing your average brochure
website or whatever, not super useful.

189
00:08:57.569 --> 00:09:02.457
In your experience is there a tipping
point in terms of features at which point

190
00:09:02.457 --> 00:09:06.159
it makes sense to begin looking
at containers [INAUDIBLE].

191
00:09:06.159 --> 00:09:10.511
&gt;&gt; Jem Young: Yeah, for one I'd say if
your company architecture is structured in

192
00:09:10.511 --> 00:09:13.137
a way that you're using micro services,

193
00:09:13.137 --> 00:09:16.076
that tends to lend itself
well to containers.

194
00:09:16.076 --> 00:09:20.361
Micro services are of course
just individual time services

195
00:09:20.361 --> 00:09:23.281
running instead of a model with a stack.

196
00:09:23.281 --> 00:09:23.839
Make sense?

197
00:09:23.839 --> 00:09:25.917
Everybody, micro services, yeah.

198
00:09:25.917 --> 00:09:28.356
So instead of like one
massive Django stack,

199
00:09:28.356 --> 00:09:30.923
I could run a bunch of
little node application,

200
00:09:30.923 --> 00:09:35.631
a bunch of flask applications that only do
one thing, that's micro services for you.

201
00:09:35.631 --> 00:09:39.831
I'd say if you use a lot of micro
services and you need to scale broadly,

202
00:09:39.831 --> 00:09:41.166
it's a good way to go.

203
00:09:41.166 --> 00:09:45.503
The downside of containers are the more
complex you make your deployments,

204
00:09:45.503 --> 00:09:47.480
the more things that can go wrong.

205
00:09:47.480 --> 00:09:51.072
Because you're just adding more and
more complexity to your entire stack.

206
00:09:51.072 --> 00:09:55.728
Some people don't like containers for that
reason cuz it's just easier to bring up,

207
00:09:55.728 --> 00:09:57.357
just Ubuntu server.

208
00:09:57.357 --> 00:09:59.480
With everything you need for
the vagrant script or nacipal script and

209
00:09:59.480 --> 00:10:00.217
everything like that.

210
00:10:00.217 --> 00:10:02.411
It's just as easy.

211
00:10:02.411 --> 00:10:06.674
And if you don't have a lot of high, like
down time is not a big deal for you or

212
00:10:06.674 --> 00:10:08.300
you just have good deploys or

213
00:10:08.300 --> 00:10:12.134
good fail overs, then containers
are probably a better way to go.

214
00:10:12.134 --> 00:10:16.915
But again, the deeper you go,
the more complex you go.

215
00:10:16.915 --> 00:10:18.420
So we're running Ubuntu.

216
00:10:18.420 --> 00:10:20.210
It's not necessarily the fastest
version of Linux but

217
00:10:20.210 --> 00:10:22.490
it's probably the most user friendly.

218
00:10:22.490 --> 00:10:24.122
We could run something like RedHat,

219
00:10:24.122 --> 00:10:26.501
which is Enterprise Linux
which is much much faster.

220
00:10:26.501 --> 00:10:29.108
It's optimized for these things but
it's not as friendly.

221
00:10:29.108 --> 00:10:32.940
And that's kind of the trade off
you always make is you want speed,

222
00:10:32.940 --> 00:10:36.157
you want efficiency but
you also want full tolerance and

223
00:10:36.157 --> 00:10:38.500
things not to go wrong horribly for you.

224
00:10:39.610 --> 00:10:42.232
But, good question.

225
00:10:42.232 --> 00:10:47.651
&gt;&gt; Speaker 7: The front end put a lot
of thought into how to manage state.

226
00:10:47.651 --> 00:10:51.629
Is there an equivalent
to that on the backend?

227
00:10:51.629 --> 00:10:53.293
&gt;&gt; Jem Young: Can you explain it like,
what sort of state?

228
00:10:53.293 --> 00:10:58.461
&gt;&gt; Speaker 7: So as you, you always want
to have either, you stayed isolated when

229
00:10:58.461 --> 00:11:04.280
you mutate it or it's shared across
different aspects of the application.

230
00:11:04.280 --> 00:11:07.654
I just don't know if there's
an equivalent in the backend.

231
00:11:07.654 --> 00:11:13.050
Or if state is something that's
kind of just for frontend people.

232
00:11:13.050 --> 00:11:15.956
Do you know what I mean?

233
00:11:15.956 --> 00:11:19.889
Yeah it seems like, it seems like if you
had your server you could just restart

234
00:11:19.889 --> 00:11:23.884
your server and then kind of always
control where, if everything's clean and

235
00:11:23.884 --> 00:11:27.334
if there's not gonna be any sort
of unexpected errors occurring but

236
00:11:27.334 --> 00:11:28.753
I just wanted to make sure.

237
00:11:28.753 --> 00:11:30.236
&gt;&gt; Jem Young: That's essentially true.

238
00:11:30.236 --> 00:11:31.196
&gt;&gt; Speaker 7: Okay.

239
00:11:31.196 --> 00:11:34.123
&gt;&gt; Jem Young: One of the hardest parts
when I first started learning about

240
00:11:34.123 --> 00:11:36.532
the web a long time ago
was that it's stateless.

241
00:11:36.532 --> 00:11:41.467
Because for me coming from Java and C #
that's a weird concept of being stateless

242
00:11:41.467 --> 00:11:44.891
what I do now doesn't
necessarily hold on the browser.

243
00:11:44.891 --> 00:11:48.471
The back end is fairly stateful,
as in what you do is gonna persist and

244
00:11:48.471 --> 00:11:52.322
persist and persist unless you take
down the server and start over again.

245
00:11:52.322 --> 00:11:57.074
There is not really an equivalent of that
for thinking about state management.

246
00:11:57.074 --> 00:12:00.307
But now you're talking about
the difference between micro services and

247
00:12:00.307 --> 00:12:00.897
a monolith.

248
00:12:00.897 --> 00:12:04.133
In a monolith it's much easier to keep
track of state because everybody knows

249
00:12:04.133 --> 00:12:04.891
about the state.

250
00:12:04.891 --> 00:12:08.941
It's shared across all of the services
you're gonna use versus micro

251
00:12:08.941 --> 00:12:11.832
services you have to think
much carefully about.

252
00:12:11.832 --> 00:12:16.107
What's the API that's on for my node
servers talking to my logging servers,

253
00:12:16.107 --> 00:12:21.040
things like that, where the logging server
could lose state very, very easily versus,

254
00:12:21.040 --> 00:12:23.450
in the nodes it was like, what happened?

255
00:12:23.450 --> 00:12:26.108
I sent you all these logs just drop them.

256
00:12:26.108 --> 00:12:30.600
That's pretty nuanced,
but does that help at all?

257
00:12:30.600 --> 00:12:35.218
&gt;&gt; Speaker 7: Yeah, you still have to
very carefully design certain things so

258
00:12:35.218 --> 00:12:38.393
that you're not fucking things up I guess.

259
00:12:38.393 --> 00:12:42.379
&gt;&gt; Jem Young: Yeah, and that's why like
you see the trends in the Internet.

260
00:12:42.379 --> 00:12:45.032
It was like micro services,
that was probably two years ago.

261
00:12:45.032 --> 00:12:47.006
It's like we are going to micro services.

262
00:12:47.006 --> 00:12:50.252
They didn't need to necessarily,
like a javastack works just fine.

263
00:12:50.252 --> 00:12:52.862
Running rails or jenga works just fine.

264
00:12:52.862 --> 00:12:57.102
Not everybody needs to do micro services,
because again, it's that introduces

265
00:12:57.102 --> 00:13:01.078
complexity of state, how you design
APIs for all these services.

266
00:13:01.078 --> 00:13:06.319
Whereas, a monolith, not as sexy, a bit
harder to maintain over the long period

267
00:13:06.319 --> 00:13:11.270
of time, but it all works, you don't
have to worry about things like that.

268
00:13:11.270 --> 00:13:13.734
Great questions!

269
00:13:13.734 --> 00:13:14.570
Anything else?

270
00:13:14.570 --> 00:13:16.218
Anything about computers?

271
00:13:16.218 --> 00:13:16.900
NetFlix?

272
00:13:16.900 --> 00:13:20.255
I'll tell you everything I know,
things I don't know.

273
00:13:20.255 --> 00:13:21.632
&gt;&gt; Speaker 8: Heard that they
only hire senior engineers.

274
00:13:21.632 --> 00:13:24.090
Is that true?

275
00:13:24.090 --> 00:13:24.945
&gt;&gt; Jem Young: In a way.

276
00:13:24.945 --> 00:13:27.876
So everybody at Netflix that's
an engineer is a senior engineer.

277
00:13:27.876 --> 00:13:29.742
Like we only have one role.

278
00:13:29.742 --> 00:13:30.808
It's a very flat structure.

279
00:13:30.808 --> 00:13:34.237
So it's basically, I can tell you the
whole structure, that's how easy it is.

280
00:13:34.237 --> 00:13:40.826
It's [INAUDIBLE], manager,
director, VP, probably another VP.

281
00:13:40.826 --> 00:13:44.103
There's like senior VP and then
there's like c levels, this like that.

282
00:13:44.103 --> 00:13:46.761
And that's it,
that's the entire Netflix structure there.

283
00:13:46.761 --> 00:13:51.307
So if you're hired at Netflix,
you are a senior engineer.

284
00:13:51.307 --> 00:13:53.427
Just graduated college,
that's pretty unusual for

285
00:13:53.427 --> 00:13:54.988
us to hire someone with no experience.

286
00:13:54.988 --> 00:13:59.618
But you're senior and the benefit
of this I prefer over things like

287
00:13:59.618 --> 00:14:04.404
he's a tech lead, she's a senior
architect things like that is that when

288
00:14:04.404 --> 00:14:08.513
everybody's the same level,
I have to listen to what you say.

289
00:14:08.513 --> 00:14:11.910
I would do that anyways, but you have
to acknowledge what you say versus

290
00:14:11.910 --> 00:14:14.979
if someone say a junior engineer,
I'll be who are you?

291
00:14:14.979 --> 00:14:17.845
A junior engineer, I'm not gonna listen
to your suggestion, what do you know?

292
00:14:17.845 --> 00:14:20.326
And that's an attitude
a lot of people have.

293
00:14:20.326 --> 00:14:23.841
So when everybody is the same, it makes
everybody's opinion equally valued,

294
00:14:23.841 --> 00:14:25.160
which I really really enjoy.

295
00:14:25.160 --> 00:14:26.481
So it doesn't matter if
you been there five years,

296
00:14:26.481 --> 00:14:28.460
it doesn't matter if
you've been there a day.

297
00:14:28.460 --> 00:14:29.469
You're all senior engineers.

298
00:14:30.820 --> 00:14:34.718
Yeah, yeah, all right, yes.

299
00:14:34.718 --> 00:14:39.193
&gt;&gt; Speaker 9: So I was gonna ask what kind
of, you mentioned like there're trade-offs

300
00:14:39.193 --> 00:14:44.173
and more monolithic structure versus my
micro services, what would you look at to

301
00:14:44.173 --> 00:14:48.454
sort of determine what architecture
makes sense for a given company?

302
00:14:48.454 --> 00:14:50.435
&gt;&gt; Jem Young: Yeah, great question.

303
00:14:50.435 --> 00:14:54.400
So how would I determine if I wanna
use a monolith versus microservices?

304
00:14:54.400 --> 00:14:57.377
I would look at the programming
skills of the team.

305
00:14:57.377 --> 00:15:01.523
That's kind of an unusual question,
but what are they good at?

306
00:15:01.523 --> 00:15:05.176
Facebook saw that, when they started,
they had a bunch of PHP developers.

307
00:15:05.176 --> 00:15:08.490
PHP was much more popular back then,
and it's still pretty popular.

308
00:15:08.490 --> 00:15:12.576
But they're saying well PHP's maybe not
most efficient thing we want to use.

309
00:15:12.576 --> 00:15:16.986
So they wrote a compiler that compiles
PHP to C or C++, I forget which one.

310
00:15:16.986 --> 00:15:18.667
The compiler.

311
00:15:18.667 --> 00:15:21.267
And that's an instance of knowing
the seals of your team and

312
00:15:21.267 --> 00:15:22.832
knowing what they're showing at.

313
00:15:22.832 --> 00:15:27.482
Nowadays a lot people do JavaScripts,
and some people are really good at it.

314
00:15:27.482 --> 00:15:31.772
And if you're doing that you can be like
hey I can write an entire monolith in node

315
00:15:31.772 --> 00:15:34.089
or I can make a bunch
of tiny node services.

316
00:15:34.089 --> 00:15:36.976
It's kind of the strength of your team.

317
00:15:36.976 --> 00:15:39.054
Where is the business
gonna go in the future?

318
00:15:39.054 --> 00:15:40.695
Do you want something
that's easily maintainable?

319
00:15:40.695 --> 00:15:44.233
So if we all know node let's just make
a monolith out of node because we all

320
00:15:44.233 --> 00:15:45.634
understand how that works.

321
00:15:45.634 --> 00:15:49.527
Or if we're gonna grow in the future so
we say, the part that logs transactions,

322
00:15:49.527 --> 00:15:53.326
we're gonna make a lot of money really
processing credit card transactions.

323
00:15:53.326 --> 00:15:57.246
Maybe that's for your micro servers cuz we
can scale that out as opposed to having to

324
00:15:57.246 --> 00:15:58.590
scale the entire monolith,

325
00:15:58.590 --> 00:16:01.395
even though it's only one
portion that needs to be scaled.

326
00:16:01.395 --> 00:16:04.814
So it's a hard question,
it's really dependent on your business.

327
00:16:04.814 --> 00:16:07.243
But hopefully that helps and guidance.

328
00:16:07.243 --> 00:16:11.122
But as with all things, don't jump
on things because people say so and

329
00:16:11.122 --> 00:16:13.837
cuz it's popular,
make an informed decision.

330
00:16:13.837 --> 00:16:17.870
And then that's as good as we can do for
most things.

331
00:16:17.870 --> 00:16:18.617
Think about it.

332
00:16:21.156 --> 00:16:24.750
&gt;&gt; Jem Young: All right, if there's no
more questions, I will wrap this up,

333
00:16:24.750 --> 00:16:29.346
let me know, I'll throw in some links at
the end to other Frontend Masters courses

334
00:16:29.346 --> 00:16:33.300
about service workers and
bash and things like that.

335
00:16:33.300 --> 00:16:34.347
Send me an email.

336
00:16:34.347 --> 00:16:38.712
Gem@Netflix.com, if you have any trouble,
some people do.

337
00:16:38.712 --> 00:16:42.751
You can Tweet at me, send me a message
on Twitter @JemYoung if you like,

338
00:16:42.751 --> 00:16:44.370
just say hello.

339
00:16:44.370 --> 00:16:46.690
I always appreciate good feedback.

340
00:16:46.690 --> 00:16:50.650
People that say you could have done
this better or I really like this.

341
00:16:50.650 --> 00:16:52.270
My favorite at the people
that finish the course and

342
00:16:52.270 --> 00:16:55.390
now have jobs because of maybe
some portion they learnt.

343
00:16:55.390 --> 00:16:58.280
Or they brought website or
sever because of something they learnt.

344
00:16:58.280 --> 00:17:01.820
That always makes me happy cuz it takes
a long time to put these together so

345
00:17:01.820 --> 00:17:03.100
it's good to know that it's worthwhile.

346
00:17:03.100 --> 00:17:05.585
And if you have any courses
you wanna hear about,

347
00:17:05.585 --> 00:17:08.430
like full stack three
if you wanna do that,

348
00:17:08.430 --> 00:17:10.950
just anything at all something that you
wanna go more in detail, sum it up.

349
00:17:10.950 --> 00:17:15.743
I am here, I'm pretty slow to respond,
but I will respond eventually.

350
00:17:15.743 --> 00:17:20.307
If there are no more

351
00:17:20.307 --> 00:17:26.306
questions, thank you!

