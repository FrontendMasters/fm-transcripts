WEBVTT

1
00:00:00.430 --> 00:00:02.700
So the last thing I wanna talk
about before we jump in and

2
00:00:02.700 --> 00:00:07.900
start writing some code is the difference
between app and library concerns.

3
00:00:07.900 --> 00:00:09.510
So we're on section
three of the notes now.

4
00:00:10.690 --> 00:00:14.800
First, I wanna dispel a couple myths here.

5
00:00:16.370 --> 00:00:21.330
They may seem true at first, but
it is my experience that When TypeScript

6
00:00:21.330 --> 00:00:26.680
is used for a non trivial app,
these things do not really hold up.

7
00:00:26.680 --> 00:00:32.460
So, first is the idea that TypeScript
is a cure all for runtime errors.

8
00:00:32.460 --> 00:00:35.770
Like you will not have errors at runtime
anymore because you use TypeScript.

9
00:00:36.900 --> 00:00:38.110
False.

10
00:00:38.110 --> 00:00:41.980
So all TypeScript does is
it catches a subset of

11
00:00:41.980 --> 00:00:46.788
errors that have to do with type checking,
and it surfaces them to you earlier.

12
00:00:46.788 --> 00:00:52.960
Particularly because you can
get unexpected API responses.

13
00:00:55.420 --> 00:00:58.350
Maybe a user's attempting to run your app

14
00:00:58.350 --> 00:01:01.050
in a browser that you didn't
officially aim to support.

15
00:01:01.050 --> 00:01:06.080
Maybe they're trying to use IE11 and
you built for chrome, right?

16
00:01:06.080 --> 00:01:09.980
These are the kinds of things that will
absolutely cause runtime errors and

17
00:01:11.020 --> 00:01:12.600
TypeScript can't do a thing about them.

18
00:01:12.600 --> 00:01:17.520
In fact, TypeScript has no role
whatsoever in your app at runtime.

19
00:01:17.520 --> 00:01:20.000
It disappears after you built.

20
00:01:20.000 --> 00:01:22.630
So I want to dispel that,

21
00:01:22.630 --> 00:01:25.690
because it's important to understand
what TypeScript can't do.

22
00:01:26.920 --> 00:01:29.470
Just as you wanna
understand what it can do.

23
00:01:30.740 --> 00:01:35.550
The second myth I wanted to dispel is
the idea that TypeScript makes your code

24
00:01:35.550 --> 00:01:36.790
much faster.

25
00:01:36.790 --> 00:01:42.234
Now, it does encourage
practices that will reduce

26
00:01:42.234 --> 00:01:48.950
the likelihood of modern browsers,
deoptimizing your code.

27
00:01:50.340 --> 00:01:55.720
But I want you to listen to how many
qualifiers I added to that statement.

28
00:01:55.720 --> 00:01:59.360
So a modern browser,
when it takes your app

29
00:02:00.390 --> 00:02:05.460
might pick 12 functions and optimize
the most common functions that are used.

30
00:02:05.460 --> 00:02:10.090
So if you're using something like React,
almost all of those are going to be things

31
00:02:10.090 --> 00:02:15.056
in the React library, not your app
code that get optimized, right,

32
00:02:15.056 --> 00:02:19.340
React create class, right?

33
00:02:19.340 --> 00:02:23.420
Invoke that all the time or
create element.

34
00:02:23.420 --> 00:02:25.710
Those are what get optimized.

35
00:02:25.710 --> 00:02:32.790
Now, TypeScript will encourage you
to write code that is less likely to

36
00:02:32.790 --> 00:02:38.270
ruin that, but it's not going to make the
rest of your code, the vast majority of it

37
00:02:38.270 --> 00:02:42.900
that is not effectively converted
to assembly and reused.

38
00:02:44.780 --> 00:02:51.740
It's not going to get your
whole app into that hot state.

39
00:02:51.740 --> 00:02:55.690
And I do see that this is a common
misconception that people have.

40
00:02:55.690 --> 00:03:00.120
They basically think that, if I convert
my code from JavaScript to TypeScript,

41
00:03:00.120 --> 00:03:03.030
we're gonna get rid of all of our errors.

42
00:03:03.030 --> 00:03:06.300
Will never ever again and
we're gonna be lightning fast.

43
00:03:06.300 --> 00:03:11.020
That is a great way to set
expectations way too high, and

44
00:03:11.020 --> 00:03:16.050
particularly the business side
of your engineering company,

45
00:03:17.270 --> 00:03:21.000
that's a great way to promise too much
something you can't possibly deliver on.

46
00:03:22.260 --> 00:03:26.730
Alright, so now that we get that out of
the way, let's talk about things that

47
00:03:26.730 --> 00:03:32.233
are commonly concerns that you
might look for common benefits.

48
00:03:33.720 --> 00:03:35.700
Regardless of whether you're
building a library or

49
00:03:35.700 --> 00:03:38.370
an app, you probably have these.

50
00:03:38.370 --> 00:03:40.950
So you want an improved
developer experience sorry.

51
00:03:41.980 --> 00:03:45.950
You want an improved developer experience,
tooltips,

52
00:03:45.950 --> 00:03:50.920
autocompletes things like that
TypeScript does a great job with this.

53
00:03:52.120 --> 00:03:55.020
TypeScript reduces the need
to context switch.

54
00:03:55.020 --> 00:03:59.332
So the fact that information
is surface to you inlined

55
00:03:59.332 --> 00:04:01.720
into your authoring process, right?

56
00:04:02.760 --> 00:04:07.150
The autocomplete,
the misuse of certain functions,

57
00:04:07.150 --> 00:04:09.540
right where you're not passing
in the right arguments.

58
00:04:09.540 --> 00:04:13.670
That saves you from having to sort of
drill into all these other files and

59
00:04:13.670 --> 00:04:16.450
figure out how things work
by reading the source code.

60
00:04:16.450 --> 00:04:21.480
And it allows you to maintain your
focus on what you're working on.

61
00:04:21.480 --> 00:04:24.600
This is probably the most
important one for me.

62
00:04:24.600 --> 00:04:25.930
It's a little subtle, but

63
00:04:25.930 --> 00:04:31.410
it's extremely powerful micro rigor
that adds up to macro benefits.

64
00:04:31.410 --> 00:04:36.080
What that means is at a large scale,

65
00:04:36.080 --> 00:04:42.940
there's just way too much code for
any person to keep in their mind and

66
00:04:42.940 --> 00:04:47.228
to keep track of and to deeply
understand all the little caveats,

67
00:04:47.228 --> 00:04:53.140
you cannot possibly master
all of that at once.

68
00:04:53.140 --> 00:04:57.080
The fact that TypeScript lets you encode
more information into your source

69
00:04:57.080 --> 00:04:58.920
files, right?

70
00:04:58.920 --> 00:05:05.550
The guarantees that you're providing,
the usage that you wish to support.

71
00:05:05.550 --> 00:05:08.120
I only wanna accept these
kinds of arguments.

72
00:05:08.120 --> 00:05:10.070
The fact that that makes
it into your source code.

73
00:05:10.070 --> 00:05:12.240
We're in the JavaScript
world that does not.

74
00:05:12.240 --> 00:05:15.750
It allows you to sort of make sure
that all of the building blocks

75
00:05:15.750 --> 00:05:17.680
work well individually.

76
00:05:17.680 --> 00:05:21.860
And you see benefits across
an extremely large code base,

77
00:05:21.860 --> 00:05:26.960
where all of that adds up
to a lot of assurance you

78
00:05:26.960 --> 00:05:30.510
have that these things fit together the
way that they're meant to fit together.

79
00:05:30.510 --> 00:05:33.950
I think that this would be
flat out impossible without

80
00:05:33.950 --> 00:05:35.040
this type of information.

81
00:05:36.100 --> 00:05:41.550
Eventually, you're gonna lose track
of how all these blocks work.

82
00:05:44.340 --> 00:05:49.500
So, the idea of having more formalized and
stable contracts between things.

83
00:05:49.500 --> 00:05:55.290
This is important for libraries where
you know when things are changing and

84
00:05:55.290 --> 00:06:00.010
you can have discussions about
the shape that change should take

85
00:06:01.110 --> 00:06:04.070
as opposed to just tacking on one
more function one more method.

86
00:06:04.070 --> 00:06:06.380
And that's how you end up with

87
00:06:06.380 --> 00:06:09.272
libraries that feel like they were half
written by one person and half another.

88
00:06:09.272 --> 00:06:15.410
All right, I have some points here
about coloring inside the lines and

89
00:06:15.410 --> 00:06:19.450
this effectively is different
flavors of things that

90
00:06:20.550 --> 00:06:24.540
type checking helps to make easier, right?

91
00:06:24.540 --> 00:06:29.880
Incomplete refactorings if everyone
here hasn't experienced TypeScript,

92
00:06:29.880 --> 00:06:34.740
catching an incomplete refactor,
thought I updated all the places where I

93
00:06:34.740 --> 00:06:37.429
use this function, but
there are two things that I forgot about.

94
00:06:38.640 --> 00:06:43.390
I think that's one of the first benefits
that teams realize that they start

95
00:06:43.390 --> 00:06:44.760
to ramp up and tetrick.

96
00:06:44.760 --> 00:06:47.000
If you don't experience that often,

97
00:06:47.000 --> 00:06:49.440
you must use TypeScript in
a very different way than I do.

98
00:06:51.450 --> 00:06:54.750
So let's talk about app specific concerns.

99
00:06:54.750 --> 00:06:58.660
And when we talk about an app.

100
00:06:58.660 --> 00:07:03.690
I mean,
something that is a leaf level dependency.

101
00:07:03.690 --> 00:07:06.020
No one depends on it.

102
00:07:06.020 --> 00:07:11.490
No one is including an app in
some other package JSON, right?

103
00:07:11.490 --> 00:07:18.300
So apps are usually where data happens,
right?

104
00:07:18.300 --> 00:07:19.040
You're fetching.

105
00:07:19.040 --> 00:07:22.150
You're getting back in a JSON response.

106
00:07:22.150 --> 00:07:22.990
You're working with that.

107
00:07:22.990 --> 00:07:27.570
So, this is where you feel
TypeScript benefits in this area.

108
00:07:27.570 --> 00:07:32.390
You get better encapsulation tools
like the idea of private protected and

109
00:07:32.390 --> 00:07:35.630
public or abstract classes, right?

110
00:07:35.630 --> 00:07:41.750
And you get the ability to use the type
of imports that we just talked about.

111
00:07:41.750 --> 00:07:46.534
So you make sure that your lazy loading
boundaries aren't accidentally crossed,

112
00:07:46.534 --> 00:07:50.019
and you're not accidentally
slowing your app down by just,

113
00:07:50.019 --> 00:07:54.011
effectively having one big, single,
giant bundle of JavaScript.

114
00:07:55.391 --> 00:08:01.150
You get a better story around upgrading
to accommodate braking changes.

115
00:08:01.150 --> 00:08:06.020
So if you go from lodash 3.to lodash
4.you can install that dependency,

116
00:08:06.020 --> 00:08:07.470
update your types.

117
00:08:07.470 --> 00:08:15.050
And immediately you have a to do list
of what needs to change in order to

118
00:08:15.050 --> 00:08:20.420
accommodate that upgrade, you know where
the incompatibilities had been introduced.

119
00:08:20.420 --> 00:08:23.130
For the most part,
those that are type based.

120
00:08:24.480 --> 00:08:27.560
This is something that's felt
in the library use case too, but

121
00:08:27.560 --> 00:08:32.990
just far less often,
given that apps often have a tremendously

122
00:08:32.990 --> 00:08:35.660
larger number of dependencies
compared to libraries.

123
00:08:38.420 --> 00:08:41.050
So let's talk about
library specific concerns.

124
00:08:41.050 --> 00:08:43.380
Libraries have a public API surface and

125
00:08:43.380 --> 00:08:47.680
particularly if you're trying
to practice semantic versioning,

126
00:08:47.680 --> 00:08:53.270
TypeScript lets you make sure
you're honoring your guarantees.

127
00:08:53.270 --> 00:09:00.670
Meaning you can set up tests that
represent usage of your library.

128
00:09:00.670 --> 00:09:04.940
And it's a lot easier when
that type information is there

129
00:09:04.940 --> 00:09:08.470
to make sure that things continue to work
the way you intended for them to work.

130
00:09:10.080 --> 00:09:13.160
You can communicate a public API surface.

131
00:09:13.160 --> 00:09:17.590
You can use things like
string literal types and

132
00:09:17.590 --> 00:09:22.620
numeric literal types and
enums to keep your users on track, right?

133
00:09:22.620 --> 00:09:26.480
So if you're talking about the layout
library and you have different corners,

134
00:09:26.480 --> 00:09:28.960
you can say top left, top right,
bottom left, bottom right,

135
00:09:28.960 --> 00:09:31.080
you don't take an arbitrary string.

136
00:09:31.080 --> 00:09:34.340
It's only one of those four
strings that is allowed.

137
00:09:34.340 --> 00:09:39.090
So you can really express what you
want to allow your users to do.

138
00:09:39.090 --> 00:09:42.270
And that's encoded into
the type information.

139
00:09:42.270 --> 00:09:44.342
API documentation is a big deal.

140
00:09:44.342 --> 00:09:49.310
We're gonna see this today using some
tools that you probably haven't used

141
00:09:49.310 --> 00:09:56.740
before, but TypeScript sort of
incentivizes, great API docs.

142
00:09:56.740 --> 00:10:02.010
Because the information to
generate API docs is the same

143
00:10:02.010 --> 00:10:07.330
as what you're already interested in for
a great developer experience.

144
00:10:07.330 --> 00:10:08.870
What are my arguments?

145
00:10:08.870 --> 00:10:10.770
How do these tooltips look, right?

146
00:10:10.770 --> 00:10:14.300
You want VS code to feel great as
you're working with your code.

147
00:10:14.300 --> 00:10:17.809
That same information can make
its way into API documentation.

