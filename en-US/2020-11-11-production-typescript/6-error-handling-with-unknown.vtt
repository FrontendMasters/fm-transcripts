WEBVTT

1
00:00:00.840 --> 00:00:07.880
So speaking of errors, catching,
that involves errors, right?

2
00:00:07.880 --> 00:00:14.330
So I could do here, somethingRisky and
we'll define that up here.

3
00:00:16.750 --> 00:00:24.130
It might throw, so
you're used to doing something like this.

4
00:00:24.130 --> 00:00:25.990
Now, here's the challenge,

5
00:00:25.990 --> 00:00:29.740
especially if somethingRisky it's
calling into other functions, right?

6
00:00:29.740 --> 00:00:31.840
They might throw an error.

7
00:00:31.840 --> 00:00:33.710
They might also throw a string.

8
00:00:33.710 --> 00:00:38.570
I don't like when strings
are thrown because in some

9
00:00:38.570 --> 00:00:42.610
JavaScript runtimes, you won't get
a stack trace with that string.

10
00:00:42.610 --> 00:00:47.340
And an error can have some
metadata on it like a stack, and

11
00:00:47.340 --> 00:00:49.660
you can use that to render
it nicely somewhere.

12
00:00:49.660 --> 00:00:53.730
So, but you could anything here, right?

13
00:00:53.730 --> 00:00:58.841
Like the whole point of
catching is something

14
00:00:58.841 --> 00:01:02.600
unplanned happened.

15
00:01:02.600 --> 00:01:05.120
It's an exception, it's exceptional.

16
00:01:05.120 --> 00:01:07.940
We didn't think this would happen, right?

17
00:01:07.940 --> 00:01:11.980
So you shouldn't be using try catch
as like a control flow mechanism,

18
00:01:11.980 --> 00:01:14.100
it should be for exceptional things.

19
00:01:14.100 --> 00:01:17.750
Now, here an error is of type any.

20
00:01:17.750 --> 00:01:24.644
So I could go in here and
I could say, Right,

21
00:01:24.644 --> 00:01:29.326
if this is an instance of an error
object like capital E error,

22
00:01:29.326 --> 00:01:33.300
there should be a property
on it called stack.

23
00:01:33.300 --> 00:01:35.300
And TypeScript is not yelling at me here.

24
00:01:35.300 --> 00:01:36.620
So this could work fine and

25
00:01:36.620 --> 00:01:41.780
then somewhere deep in what somethingRisky
calls, someone could throw a string.

26
00:01:41.780 --> 00:01:43.840
Stack is not there anymore and

27
00:01:43.840 --> 00:01:49.570
now in the code that is supposed to
gracefully handle an unexpected failure,

28
00:01:49.570 --> 00:01:54.690
I'm gonna blow up and another unexpected
error is going to happen, so this is bad.

29
00:01:54.690 --> 00:01:59.920
TypeScript 4.0 allows us to do this and
I would advise you always do this.

30
00:02:03.190 --> 00:02:07.670
You can type this argument as an unknown,
so

31
00:02:07.670 --> 00:02:13.650
like any, unknown is a top type,
it can hold any value.

32
00:02:13.650 --> 00:02:20.590
But the difference between unknown and
any, is that with unknown it's on us

33
00:02:20.590 --> 00:02:26.480
to perform some sort of check on it,
right, to narrow that down and to validate

34
00:02:26.480 --> 00:02:31.490
that it is of a specific type before we
can go ahead and reach into it and use it.

35
00:02:31.490 --> 00:02:33.098
So here we could do something like this.

36
00:02:33.098 --> 00:02:36.945
If (err instanceof

37
00:02:36.945 --> 00:02:43.160
Error), we can go ahead and
do this, which is fine.

38
00:02:43.160 --> 00:02:46.170
Right in here it's gonna be this error.

39
00:02:46.170 --> 00:02:50.200
Then we could just like
log the whole thing out.

40
00:02:50.200 --> 00:02:53.390
I mean, I would advise you don't just
like console.log your errors here,

41
00:02:53.390 --> 00:02:57.080
but now we can handle like.

42
00:02:57.080 --> 00:02:59.870
It encourages us to do
the responsible thing here and

43
00:02:59.870 --> 00:03:04.710
at runtime, we have to make sure
this is what we think it is, and

44
00:03:04.710 --> 00:03:08.290
then handle the case where it's something
other than what we thought it would be.

45
00:03:09.420 --> 00:03:13.780
This is really nice and I think it will
help set up some nice guardrails for

46
00:03:13.780 --> 00:03:19.800
many teams for proper error handling,
because mistakes in this area of your

47
00:03:19.800 --> 00:03:25.870
code can lead to loss of information that
makes troubleshooting much much harder.

48
00:03:25.870 --> 00:03:31.110
This is where if you've got Google
Analytics or Bugsnag, something like that

49
00:03:32.250 --> 00:03:37.900
and you just get garbage data or you just
see like people have crashed, but we need

50
00:03:37.900 --> 00:03:40.660
more information like we're not getting
a stack, we don't know what's happening.

51
00:03:42.100 --> 00:03:46.260
A lot of those kinds of problems
can be tied back to making

52
00:03:46.260 --> 00:03:49.330
overly optimistic assumptions
about what was thrown.

53
00:03:49.330 --> 00:03:53.955
And this forces you to sort of deal
with validating that this is what we

54
00:03:53.955 --> 00:03:55.244
expected it to be.

55
00:03:55.244 --> 00:03:59.658
And then even handling the case
where it's something strange,

56
00:03:59.658 --> 00:04:02.370
nice little addition there.

57
00:04:02.370 --> 00:04:08.360
While we're talking about this here,
which is a type guard,

58
00:04:08.360 --> 00:04:12.870
something was added in TypeScript 3.7,
which I feel like is also a big deal,

59
00:04:13.920 --> 00:04:20.180
and it is a way to type
assertions more effectively.

60
00:04:20.180 --> 00:04:28.980
So, before TypeScript 3.7,
We could do something like this.

61
00:04:30.110 --> 00:04:36.113
And let's move this thing that we
just checked, we can return it here.

62
00:04:38.939 --> 00:04:42.250
And we can call this,
and it'll be equivalent.

63
00:04:44.880 --> 00:04:50.390
So we're just simply, we're making
this little user defined type guard,

64
00:04:50.390 --> 00:04:53.620
we've replaced our explicit check
with a call into this function.

65
00:04:53.620 --> 00:04:55.630
But it behaves exactly the same way,

66
00:04:55.630 --> 00:04:59.340
meaning if that condition
is evaluated to be true.

67
00:04:59.340 --> 00:05:05.530
Because we've described the return type of
this function as not just a Boolean but

68
00:05:05.530 --> 00:05:11.620
an indication of whether
the value is of type error.

69
00:05:11.620 --> 00:05:16.690
It's kind of this little place where
compile time type checking and

70
00:05:16.690 --> 00:05:23.060
runtime code execution align, it gives
us the ability to implement this check.

71
00:05:23.060 --> 00:05:28.740
And it can be used to narrow down this
type from an unknown to an error.

72
00:05:30.170 --> 00:05:35.766
So this was our only tool in the toolbox
and as of TypeScript 3.7, we can do this.

73
00:05:44.754 --> 00:05:49.250
Instead of just saying,
I'm returning true or false.

74
00:05:49.250 --> 00:05:51.729
Gotta get my parens.

75
00:06:03.475 --> 00:06:07.902
We're not proud of all the code rewrite,

76
00:06:07.902 --> 00:06:12.456
but this is a good way
to demonstrate this,

77
00:06:12.456 --> 00:06:19.180
I don't advise that you use
this specific code in your app.

78
00:06:19.180 --> 00:06:24.500
But what I do want you to see is
instead of relying on an if/else,

79
00:06:24.500 --> 00:06:27.700
combined with this type guard
that returns a Boolean,

80
00:06:27.700 --> 00:06:32.900
now we're defining a different
kind of type guard where

81
00:06:34.350 --> 00:06:39.100
the thing that the compiler interprets,
right?

82
00:06:39.100 --> 00:06:41.310
Which is these instructions here,

83
00:06:41.310 --> 00:06:45.330
it's not like whatever I return should
be the signal that we listen to,

84
00:06:45.330 --> 00:06:51.030
it's whether I return or
throw that should be observed, right?

85
00:06:51.030 --> 00:06:54.750
So if I throw,
I'm not an instanceof Error,

86
00:06:56.400 --> 00:07:00.950
if I return, you can assume that we
have found an error, which is why we

87
00:07:00.950 --> 00:07:05.660
see this kind of narrowing down here,
just as if I had a conditional, right?

88
00:07:07.540 --> 00:07:11.690
Now I might have this kind of code here
in my test suite, that's where assertions

89
00:07:11.690 --> 00:07:16.530
kind of belong to be honest and, yeah,

90
00:07:16.530 --> 00:07:18.300
I might put this kind of
code in my test suite.

91
00:07:19.560 --> 00:07:23.538
I might have something like, this would
probably be a negative test case.

92
00:07:23.538 --> 00:07:30.130
Because obviously,
you'll either throw here or

93
00:07:30.130 --> 00:07:33.550
you'll log this out, like depending
on what error turns out to be.

94
00:07:33.550 --> 00:07:37.780
But the ability to type assertions
properly is really important, and

95
00:07:37.780 --> 00:07:42.470
the fact that the narrowing actually
works here without a conditional.

96
00:07:42.470 --> 00:07:48.640
The biggest benefit this adds to your
test suite is you no longer have to

97
00:07:49.650 --> 00:07:55.120
cast things or
use that the shibang like the,

98
00:07:57.530 --> 00:08:01.970
forget what it's called,
the non-null assertion operator, right,

99
00:08:01.970 --> 00:08:05.080
where it's kind of like that optional
chaining, but it's an exclamation mark.

100
00:08:06.410 --> 00:08:08.380
So you no longer have to do that, right?

101
00:08:08.380 --> 00:08:11.920
The assertions that you would
have written in your tests,

102
00:08:11.920 --> 00:08:15.600
they can now be typed, such that
the code that you wanted to write

103
00:08:15.600 --> 00:08:17.880
is also the code that
makes the compiler happy.

104
00:08:17.880 --> 00:08:20.663
And this was not the case
until this was added.

105
00:08:23.502 --> 00:08:29.160
Before I move on,
any questions about assertions and errors?

106
00:08:29.160 --> 00:08:33.034
Right, so just to recap,
we got PS expect error,

107
00:08:33.034 --> 00:08:38.771
we have the ability to treat arguments
passed to a catch block as unknown.

108
00:08:40.632 --> 00:08:43.410
Which we have, that's this here, right?

109
00:08:43.410 --> 00:08:47.600
And then we have the ability to
properly type assertion functions.

110
00:08:47.600 --> 00:08:50.090
Those have all been added since
we recorded the last course.

111
00:08:51.100 --> 00:08:55.530
So the question is, with this specific
code I wrote, would this be a good idea?

112
00:08:55.530 --> 00:09:00.690
Wouldn't we simply just rethrow from
this assertIsError if things blew up.

113
00:09:00.690 --> 00:09:01.470
Yes, we would.

114
00:09:01.470 --> 00:09:04.680
And honestly, I would probably be
okay with this in my test suite,

115
00:09:04.680 --> 00:09:07.440
because I like test runners and

116
00:09:07.440 --> 00:09:13.870
assertion libraries that treat
a throne error as a failed assertion.

117
00:09:13.870 --> 00:09:18.160
So, if this is in my test suite and
I get a throw on line 53,

118
00:09:18.160 --> 00:09:20.230
I know something's wrong.

119
00:09:20.230 --> 00:09:22.220
That is a test fail.

120
00:09:22.220 --> 00:09:23.460
I've caught a problem.

121
00:09:25.140 --> 00:09:26.070
Does that make sense?

122
00:09:26.070 --> 00:09:28.470
So, like that's exactly what
I want in my test suite.

123
00:09:30.090 --> 00:09:33.110
But not in my app code for sure.

124
00:09:33.110 --> 00:09:37.170
If this were in app code,
we would be trading one error for another.

125
00:09:37.170 --> 00:09:39.190
So this is more test suite kind of code,

126
00:09:39.190 --> 00:09:43.390
where I just like, I'm not
swallowing any errors here for sure.

127
00:09:45.180 --> 00:09:50.160
If it's the error other than the one
I expected, I get a different error,

128
00:09:50.160 --> 00:09:51.410
that's nice.

129
00:09:51.410 --> 00:09:53.060
I've got like some extra signal there.

