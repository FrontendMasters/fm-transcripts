WEBVTT

1
00:00:00.470 --> 00:00:04.340
The next thing we're gonna add to
this small library is linting, so

2
00:00:04.340 --> 00:00:06.680
this is static analysis to make sure that

3
00:00:08.060 --> 00:00:12.870
we're using good patterns and
enforcing code style.

4
00:00:12.870 --> 00:00:17.260
So we already have es lint installed as a
dev dependency, but you could install that

5
00:00:17.260 --> 00:00:22.860
now if you have not done so already and
let me close out all these files.

6
00:00:24.380 --> 00:00:30.080
So, what we need is an es lint
setup to who here is configured,

7
00:00:30.080 --> 00:00:32.290
who in the class has
configured es lint before for

8
00:00:32.290 --> 00:00:37.180
a project, couple people,
but half the class.

9
00:00:37.180 --> 00:00:42.510
So those of you who haven't done this yet

10
00:00:42.510 --> 00:00:46.080
yes lint has some great
functionality out of the box.

11
00:00:46.080 --> 00:00:48.830
But particularly if you're
working with react or

12
00:00:48.830 --> 00:00:52.230
if you're working with TypeScript,
or if you're working with view,

13
00:00:52.230 --> 00:00:56.130
you need to add a bunch of plugins and
it's not just simply just install this one

14
00:00:56.130 --> 00:01:01.570
package I don't advise that you use
this specific code in your app.

15
00:01:01.570 --> 00:01:05.390
But what I do want you to see is
instead of relying on an if else,

16
00:01:05.390 --> 00:01:09.460
combined with this type guard
that returns a Boolean,

17
00:01:09.460 --> 00:01:14.850
now where we're defining a different type,
a different kind of type guard where and

18
00:01:14.850 --> 00:01:18.790
in the notes of the way I would
like you to answer these questions.

19
00:01:18.790 --> 00:01:23.790
And I'll go through just as
I've written down there, so

20
00:01:23.790 --> 00:01:27.748
we want to check syntax and find problems.

21
00:01:27.748 --> 00:01:31.360
I don't wanna enforce code style because
I typically rely on something like

22
00:01:31.360 --> 00:01:32.550
prettier for that.

23
00:01:32.550 --> 00:01:36.680
I feel like prettier is a good,
nice, dedicated tool that does

24
00:01:36.680 --> 00:01:40.000
a great job at solving that problem and
that problem alone.

25
00:01:40.000 --> 00:01:45.660
So I want es lint out of get out of
the business of semi colons and tabs and

26
00:01:45.660 --> 00:01:51.760
things like that let prettier handle that
but that's my personal opinion, all right.

27
00:01:51.760 --> 00:01:55.960
What types of modules does your project
use, well, really none of these

28
00:01:55.960 --> 00:01:59.470
We're certainly writing TypeScript, so
it doesn't seem like JavaScript, right?

29
00:01:59.470 --> 00:02:04.150
And we're not writing common
jass although we're compiling,

30
00:02:04.150 --> 00:02:06.140
that's our output, but
it's not we're not writing.

31
00:02:07.380 --> 00:02:12.020
So none of these and
which framework does your project use, so

32
00:02:12.020 --> 00:02:13.919
we've got react and view but
I would say none of these.

33
00:02:15.460 --> 00:02:21.730
Do we use TypeScript surprised
the answer's yes, try not to be shocked

34
00:02:22.970 --> 00:02:28.130
and we'll say we're using that, so
we're using node, not a browser.

35
00:02:29.800 --> 00:02:33.280
And I would like my config file to be in

36
00:02:34.700 --> 00:02:39.000
JSON And

37
00:02:39.000 --> 00:02:42.580
then this is not ideal,
I wish it had better support for yarn.

38
00:02:43.640 --> 00:02:46.530
But it's gonna install them via NPM and

39
00:02:46.530 --> 00:02:50.560
we're gonna have to like, do a little work
around here, it's not a big deal, but

40
00:02:50.560 --> 00:02:52.178
it would be great if it
could handle yard as well.

41
00:02:52.178 --> 00:03:00.280
So I'm gonna say yes to this question and
here's npm doing its thing.

42
00:03:00.280 --> 00:03:07.610
So if I had answered no,
I would have had to copy this line and

43
00:03:07.610 --> 00:03:11.830
make the appropriate modification to
my package JSON, and then run yarn.

44
00:03:13.170 --> 00:03:15.370
I'm kind of letting it do its thing here,

45
00:03:15.370 --> 00:03:18.820
because I want the package JSON
handled for me automatically.

46
00:03:18.820 --> 00:03:24.540
And I'm just gonna rerun yarn,
so it updates its lock file.

47
00:03:24.540 --> 00:03:30.520
So let's check our package JSON,
we see these two things have been added

48
00:03:31.640 --> 00:03:37.810
which is great, TypeScript ESLint seems
like TypeScript support for ESLint, right?

49
00:03:37.810 --> 00:03:39.920
Unfortunately, we have
this package lock thing,

50
00:03:39.920 --> 00:03:44.620
I'm just going to delete this cuz
having to lock files is a bad idea.

51
00:03:45.750 --> 00:03:48.320
They use totally different methods for

52
00:03:48.320 --> 00:03:53.170
resolving the right exact
dependency version.

53
00:03:53.170 --> 00:03:57.340
So even if you do have both of
those now NPM lock file and

54
00:03:57.340 --> 00:03:59.650
yarn lock file,
they won't agree with each other.

55
00:04:01.980 --> 00:04:07.320
Especially for a big project, they will
definitely not agree with each other, so

56
00:04:07.320 --> 00:04:08.830
you don't want to have those two things.

57
00:04:08.830 --> 00:04:12.240
They are not equal to each other,
all right now I just need to run yarn.

58
00:04:13.280 --> 00:04:15.227
So that this lock file thing is updated,

59
00:04:15.227 --> 00:04:17.475
it should turn green in
a moment once it's done

60
00:04:24.421 --> 00:04:30.644
A little bit of a workaround, but not
certainly not the worst tech all right,

61
00:04:30.644 --> 00:04:36.890
so now we have ESLint installed, so
let's look at our EsLintRC.json file.

62
00:04:39.000 --> 00:04:42.020
So this is sort of set up in a basic way,

63
00:04:42.020 --> 00:04:47.648
we're using ECMA version 12 which is this,

64
00:04:47.648 --> 00:04:52.700
yes 2021, that seems a little
bit too modern for my taste.

65
00:04:53.720 --> 00:04:55.520
It's like next year's JavaScript,

66
00:04:57.120 --> 00:04:59.980
I'm going to go with 2018
because that's the same.

67
00:05:01.490 --> 00:05:06.710
That gives us async and await what
the hell I'll leave it modern and

68
00:05:06.710 --> 00:05:07.960
we'll see if we run into problems.

69
00:05:09.320 --> 00:05:13.950
But you certainly something you wanna
think about, especially as we start,

70
00:05:13.950 --> 00:05:17.060
I don't think we're touching on
any really modern features here.

71
00:05:17.060 --> 00:05:19.100
I probably will make
a difference in our case, but

72
00:05:19.100 --> 00:05:21.100
give this some consideration, right?

73
00:05:21.100 --> 00:05:28.180
Because we've got multiple places
where we're stating the version of

74
00:05:28.180 --> 00:05:32.480
things that we're expecting to use, right,
we're saying I want to develop on node 12.

75
00:05:32.480 --> 00:05:34.320
You could have had an engines

76
00:05:36.290 --> 00:05:40.620
object in your package JSON that
says I support node greater than 10.

77
00:05:40.620 --> 00:05:45.160
And then your TS config,
potentially you could have this lib thing,

78
00:05:45.160 --> 00:05:49.070
this lib option where you'd say,
I wanna support es 2018.

79
00:05:49.070 --> 00:05:54.550
But don't like bust me if
I try to use as 2019, so

80
00:05:54.550 --> 00:06:01.230
you have many places where you're stating
the language level that you wanna allow.

81
00:06:01.230 --> 00:06:05.836
You just got to make sure that you're
not permitting things you don't

82
00:06:05.836 --> 00:06:07.094
intend to permit.

83
00:06:10.893 --> 00:06:14.313
We talk about this, so yes,

84
00:06:14.313 --> 00:06:20.600
lint recommended that's
a very basic set of rules.

85
00:06:20.600 --> 00:06:25.730
And then this rule TypeScript ESLint,
recommended is some

86
00:06:25.730 --> 00:06:30.800
TypeScript specific basics that
are very cheap to evaluate.

87
00:06:32.080 --> 00:06:37.238
There is an additional one that
I wanna add which is recommended

88
00:06:37.238 --> 00:06:43.285
requiring Type checking, I hope I
spelled that right, let me make sure.

89
00:06:45.432 --> 00:06:49.156
Looks right, so
what I'm doing here is by default,

90
00:06:49.156 --> 00:06:53.983
we're sort of lending our typescript
in a way that doesn't require

91
00:06:53.983 --> 00:06:58.320
that we make sure everything
lines up with everything else.

92
00:06:58.320 --> 00:07:00.150
That's what you get out of the box and

93
00:07:00.150 --> 00:07:05.720
I'm opting into additional linting rules
that require more type information.

94
00:07:05.720 --> 00:07:09.508
They're more expensive and
I'm opting in and for a small library,

95
00:07:09.508 --> 00:07:11.445
it totally makes sense to do this.

96
00:07:14.052 --> 00:07:17.313
We're gonna add some rules here,

97
00:07:17.313 --> 00:07:22.610
really I'm gonna enable one prefer const,
all right.

98
00:07:22.610 --> 00:07:26.310
And this I know their
opinions about constant let

99
00:07:28.490 --> 00:07:34.047
me give you my reasoning for
why I prefer const.

100
00:07:34.047 --> 00:07:42.100
TypeScript will make the safest possible

101
00:07:42.100 --> 00:07:47.120
assumption sorry the strictest possible
assumption that it can make safely.

102
00:07:47.120 --> 00:07:51.294
So if you say const x equals Mike,

103
00:07:51.294 --> 00:07:56.610
it will say well, you can never reassign
this, this is an immutable value type.

104
00:07:56.610 --> 00:07:59.050
So it's gonna say,
the type of x is actually Mike,

105
00:07:59.050 --> 00:08:02.850
it's not just an arbitrary string,
it's this string literal.

106
00:08:02.850 --> 00:08:07.080
It's exactly the string Mike
no other strings allowed, so

107
00:08:07.080 --> 00:08:12.120
const behaves differently
in terms of type inference.

108
00:08:12.120 --> 00:08:16.970
And it's also more convenient when
working with type cards because

109
00:08:16.970 --> 00:08:19.620
once you give const of value.

110
00:08:20.700 --> 00:08:25.960
You can do things like make assertions
on it and use type guards and

111
00:08:25.960 --> 00:08:30.140
narrow it down and
the compiler understands that you can't

112
00:08:30.140 --> 00:08:34.020
switch things around,
like once you validated a const.

113
00:08:34.020 --> 00:08:37.580
If you're unable to change, it can

114
00:08:37.580 --> 00:08:42.400
assume that you're getting more and
more specific and more focused down.

115
00:08:42.400 --> 00:08:46.360
If that were a let variable declaration,
well other code that you write,

116
00:08:46.360 --> 00:08:49.080
like if you pass this value
into other functions or

117
00:08:51.920 --> 00:08:55.050
like there's the potential to mutate it,
and so on.

118
00:08:56.260 --> 00:08:58.900
There are fewer assumptions
that can be made,

119
00:08:58.900 --> 00:09:01.090
because more is possible with a lead.

120
00:09:01.090 --> 00:09:05.350
So that's why I like using const
whenever possible with TypeScript, so

121
00:09:05.350 --> 00:09:06.690
I'm going to turn that on.

122
00:09:06.690 --> 00:09:12.066
And I'll say, look, if I'm in a case
where it's possible to use const,

123
00:09:12.066 --> 00:09:16.576
let's use it and I will turn off
some things that are enabled by

124
00:09:16.576 --> 00:09:20.434
default because our compiler
is handling it for us.

125
00:09:25.052 --> 00:09:32.100
So no one used veirs is off as is no
unused params let the compiler do that

126
00:09:32.100 --> 00:09:37.980
job, I don't need yes lint
to also be doing that job.

127
00:09:37.980 --> 00:09:41.890
It's literally gonna give me errors
where I already have errors and

128
00:09:41.890 --> 00:09:49.050
I only need one, okay.

129
00:09:51.110 --> 00:09:55.576
This next step is going to feel
slightly convoluted, but I promise,

130
00:09:55.576 --> 00:10:00.668
there is method to my madness, we're
going to create another tsconfig file.

131
00:10:03.782 --> 00:10:08.278
And it's called tsconfigEs Lint.JSON,
here's why,

132
00:10:08.278 --> 00:10:12.212
I the way I'm setting this
library up the tests and

133
00:10:12.212 --> 00:10:15.690
the code being tested, are very separate.

134
00:10:17.810 --> 00:10:22.550
Like just is allowed for
use in the tests only,

135
00:10:22.550 --> 00:10:26.250
not in the source folder,
we have to have that separation.

136
00:10:26.250 --> 00:10:30.910
But es lint wants one TypeScript
configuration that includes all of

137
00:10:30.910 --> 00:10:36.120
the code that I want lint it so I have
to give it one that will make it happy.

138
00:10:37.230 --> 00:10:42.080
This is a Ts config for
ESLint specifically.

139
00:10:43.130 --> 00:10:48.320
Now I wanna make sure that I'm not taking
on additional maintenance burden here.

140
00:10:48.320 --> 00:10:55.112
So I'm gonna say just extend
from my normal tsconfig and

141
00:10:55.112 --> 00:11:00.035
the only thing that I wanna say is allowed

142
00:11:03.421 --> 00:11:09.135
Is, we're gonna say types
jest is allowed and

143
00:11:09.135 --> 00:11:13.686
I can include both my source folder.

144
00:11:15.806 --> 00:11:18.867
And tests, so the benefit we get here is,

145
00:11:18.867 --> 00:11:24.287
I can kinda forget about this file now
cuz it's inheriting a lot from the,

146
00:11:24.287 --> 00:11:27.891
the real test config let's
call it the real one.

147
00:11:32.780 --> 00:11:37.260
Going back to my es lint
config here real quick,

148
00:11:37.260 --> 00:11:43.645
which is on the bottom, one little
thing I have to add I have to tell.

149
00:11:45.560 --> 00:11:48.346
Yes, lint that it's to use this Ts config.

150
00:11:50.801 --> 00:11:55.790
The only reason I need
this here it's because of

151
00:11:55.790 --> 00:11:59.290
the rules I opted into on line 9.

152
00:11:59.290 --> 00:12:05.420
We want those rules that use
type checking information and

153
00:12:05.420 --> 00:12:13.170
we have to tell es lint what
it is to use when considering.

154
00:12:13.170 --> 00:12:16.922
Like, which file defines
the project to be limited and

155
00:12:16.922 --> 00:12:20.358
in this case it's that
specialty is configured.

156
00:12:28.371 --> 00:12:32.529
All right now, the code for
our tests which we have yet

157
00:12:32.529 --> 00:12:37.160
to create but I'll tell you
where they're going to end up.

158
00:12:39.140 --> 00:12:44.150
You can say files and
here we can say there'll be

159
00:12:44.150 --> 00:12:49.726
in tests.starts,

160
00:12:49.726 --> 00:12:54.750
so all the TypeScript folder,
TypeScript files in tests

161
00:12:56.680 --> 00:13:02.420
and then end jest just true.

162
00:13:02.420 --> 00:13:07.080
And we can also say no true,
which would be useful if we were like

163
00:13:07.080 --> 00:13:10.870
reading fixture data from a file or
something, then we can use the FS module.

164
00:13:13.120 --> 00:13:18.021
No harm allowing node stuff
to happen in our test suite,

165
00:13:18.021 --> 00:13:22.106
make sure you look at
this path carefully tests

166
00:13:26.148 --> 00:13:31.011
All right, the time has come for
us to see if this works,

167
00:13:31.011 --> 00:13:35.978
so the easiest way I know of to
see if my linter works is to do

168
00:13:35.978 --> 00:13:40.660
something that my linter is
going to bark at me about.

169
00:13:41.810 --> 00:13:47.690
And in this case,
let's take advantage of the throw

170
00:13:47.690 --> 00:13:51.680
away enabled, let's see if we get that.

171
00:13:52.690 --> 00:13:57.360
There we go, so prefer const,
this is evidence that yes,

172
00:13:57.360 --> 00:14:02.720
lint is working and it's is using
a rule that I had to turn on.

173
00:14:03.980 --> 00:14:09.206
So I believe that our linter
is working at this point and

174
00:14:09.206 --> 00:14:13.305
let's actually try to run it, yarn lint.

175
00:14:18.933 --> 00:14:26.132
One problem And
that's the problem we hoped we'd find,

176
00:14:26.132 --> 00:14:32.830
linting works I'm gonna
change it back real quick

