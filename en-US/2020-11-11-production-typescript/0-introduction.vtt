WEBVTT

1
00:00:00.050 --> 00:00:02.520
Welcome, everybody to
Professional TypeScript.

2
00:00:02.520 --> 00:00:05.767
I'm Mike North,
I'm a senior staff engineer at LinkedIn,

3
00:00:05.767 --> 00:00:08.258
where I lead infrastructure
product design.

4
00:00:08.258 --> 00:00:10.620
And I'm the company's
TypeScript language expert.

5
00:00:11.720 --> 00:00:15.165
So today, we're going to be talking about

6
00:00:15.165 --> 00:00:19.194
the use of TypeScript in
non-trivial projects.

7
00:00:19.194 --> 00:00:22.372
So we're calling this
Professional TypeScript.

8
00:00:22.372 --> 00:00:26.831
And the idea here is we take you
from knowing a little bit about

9
00:00:26.831 --> 00:00:28.936
the programming language.

10
00:00:28.936 --> 00:00:32.409
Such as having completed one of
the earlier TypeScript courses in

11
00:00:32.409 --> 00:00:34.060
the Frontend Master catalog.

12
00:00:34.060 --> 00:00:39.906
To being able to be proficient with
this language for your everyday use.

13
00:00:39.906 --> 00:00:43.607
One of the most important things I hope to
leave you with at the end of this course

14
00:00:43.607 --> 00:00:47.367
is being able to speak about TypeScript in
terms of the benefits it brings to your

15
00:00:47.367 --> 00:00:48.750
project.

16
00:00:48.750 --> 00:00:51.770
In addition to being aware
of the limitations, and

17
00:00:51.770 --> 00:00:57.250
knowing how to de-risk some of
those limitations, so to speak.

18
00:00:59.310 --> 00:01:04.720
So TypeScript is obviously a programming
language, it's a compiler, right?

19
00:01:04.720 --> 00:01:09.390
We we run the TSC command in our command
line, and it's also a language server.

20
00:01:09.390 --> 00:01:12.840
This is part of the magic
behind Visual Studio Code,

21
00:01:12.840 --> 00:01:15.660
the thing that gives you
those great autocompletes.

22
00:01:15.660 --> 00:01:19.540
The things that lets you control click,
and

23
00:01:19.540 --> 00:01:22.880
go from file to file, and navigate
through your code really effectively.

24
00:01:24.480 --> 00:01:27.810
It is a syntactic superset of JavaScript.

25
00:01:27.810 --> 00:01:31.350
So this does not mean that
every piece of JavaScript

26
00:01:31.350 --> 00:01:33.990
is going to make
the TypeScript compiler happy.

27
00:01:33.990 --> 00:01:39.122
In fact, the point is to encourage
you to do certain things, right?

28
00:01:39.122 --> 00:01:41.878
To make sure you're keeping
your types consistent,

29
00:01:41.878 --> 00:01:44.094
it's gonna object to a lot of JavaScript.

30
00:01:44.094 --> 00:01:48.722
It's a syntactic superset in
that it builds upon the existing

31
00:01:48.722 --> 00:01:51.310
JavaScript syntax that you know.

32
00:01:51.310 --> 00:01:57.340
TypeScript provides the core of the best
authoring environment available today for

33
00:01:57.340 --> 00:02:00.270
web development, and for
no Node.js development.

34
00:02:00.270 --> 00:02:03.783
But I think of it almost
as a fancy linter, right?

35
00:02:03.783 --> 00:02:08.450
In a modern tool chain TypeScript
is just doing the type checking.

36
00:02:08.450 --> 00:02:13.630
And often we rely on tools like Babel
to actually admit JavaScript modules.

37
00:02:13.630 --> 00:02:18.571
So really TypeScript role in the asset
pipeline is to make sure that

38
00:02:18.571 --> 00:02:23.435
you're following through on
the guarantees you intend to make.

39
00:02:23.435 --> 00:02:27.031
Like a function returns
this kind of value,

40
00:02:27.031 --> 00:02:31.315
it'll make sure that you're
actually doing them.

41
00:02:31.315 --> 00:02:35.889
As a product design person, so
I like to think about these kinds

42
00:02:35.889 --> 00:02:40.650
of things as the types of problems
that they aim to solve, right?

43
00:02:40.650 --> 00:02:42.540
What does TypeScript aim to solve?

44
00:02:42.540 --> 00:02:46.720
Well, first,
in a JavaScript Code base without types.

45
00:02:46.720 --> 00:02:50.770
As you get more and more code as more
contributors during the project,

46
00:02:50.770 --> 00:02:53.370
things become more difficult to manage,
right?

47
00:02:53.370 --> 00:02:59.985
It starts to become harder to keep these
contracts between modules under control.

48
00:02:59.985 --> 00:03:03.332
And when I say that informal
contracts grow organically,

49
00:03:03.332 --> 00:03:07.210
I'm not talking about organic groceries or
organic food.

50
00:03:07.210 --> 00:03:12.490
And we're talking about
organic mold that's growing in

51
00:03:12.490 --> 00:03:14.430
someplace you don't want it, right?

52
00:03:14.430 --> 00:03:19.120
This is the idea of things
just keep getting added, and

53
00:03:19.120 --> 00:03:22.900
added, and
added as people tack on more features.

54
00:03:22.900 --> 00:03:27.990
And you want things to sort of,
at any given state,

55
00:03:27.990 --> 00:03:31.450
you want them to look like they
were designed, with intent, right?

56
00:03:31.450 --> 00:03:34.390
They were designed,
like there was a purpose in mind,

57
00:03:34.390 --> 00:03:37.320
and we're keeping organized
types make that much easier.

58
00:03:39.510 --> 00:03:43.670
TypeScript solves
the problem of JavaScript

59
00:03:43.670 --> 00:03:48.320
editing environments being way behind
some other programming languages, right?

60
00:03:48.320 --> 00:03:53.265
So if you look at a Java IDE,
like IntelliJ, right?

61
00:03:53.265 --> 00:03:55.542
They have right click to refactor, and

62
00:03:55.542 --> 00:04:00.695
they can click to go in from an instance
of a class to where that class is defined.

63
00:04:00.695 --> 00:04:04.517
The JavaScript ecosystem has
largely been missing out on this.

64
00:04:04.517 --> 00:04:09.787
And TypeScript kind of allows
this this ecosystem to catch up.

65
00:04:11.327 --> 00:04:13.377
And then finally,
there's this issue of safety.

66
00:04:13.377 --> 00:04:17.727
Too many JavaScript errors
are discovered at runtime by users.

67
00:04:17.727 --> 00:04:23.327
And TypeScript takes some subset of those,
and brings them into compile time.

68
00:04:23.327 --> 00:04:27.970
So that they're caught as you're compiling
your code before you even open a pull

69
00:04:27.970 --> 00:04:32.970
request, as opposed to being something
that a user will report as a bug, right?

70
00:04:32.970 --> 00:04:34.850
Catching these things earlier
is always a good thing.

71
00:04:36.264 --> 00:04:40.670
We're gonna learn about TypeScript
today in the context of building

72
00:04:40.670 --> 00:04:44.070
a real world app, or
a simplified version of one.

73
00:04:44.070 --> 00:04:46.530
And this of course, is Slack, right?

74
00:04:46.530 --> 00:04:50.970
Where you have several teams,
each team has a channel or one or

75
00:04:50.970 --> 00:04:54.220
more channels, and
the channel has messages here.

76
00:04:54.220 --> 00:04:57.350
So this is designed to be
a non-trivial project.

77
00:04:57.350 --> 00:05:01.504
It's still small enough
that we can get a feel for

78
00:05:01.504 --> 00:05:06.671
some of the real world challenges
you're likely to face when

79
00:05:06.671 --> 00:05:12.262
using TypeScript every day as
a professional and in production.

80
00:05:12.262 --> 00:05:16.171
The topics that we're going to talk about,
begin with a little

81
00:05:16.171 --> 00:05:20.690
recap of recent advancements in
the TypeScript programming language.

82
00:05:20.690 --> 00:05:24.078
So we're gonna talk about new language
features that have been added.

83
00:05:24.078 --> 00:05:27.693
We'll touch a little bit on
library versus app concerns,

84
00:05:27.693 --> 00:05:31.320
there are certain things that
only libraries care about.

85
00:05:31.320 --> 00:05:37.020
We're going to go from an empty
folder to my preferred set up for

86
00:05:37.020 --> 00:05:38.800
a TypeScript project.

87
00:05:38.800 --> 00:05:41.770
And this will include API documentation,

88
00:05:41.770 --> 00:05:46.230
it'll even help us understand for
a given pull request.

89
00:05:46.230 --> 00:05:52.875
What are the ramifications on the API
surface of my little library?

90
00:05:52.875 --> 00:05:57.713
So a lot of automation there with minimal
tooling, just to keep things nice and

91
00:05:57.713 --> 00:05:58.311
simple.

92
00:05:58.311 --> 00:06:02.627
We're going to have a deep understanding
by the end of this course around,

93
00:06:02.627 --> 00:06:06.412
how things build, how things are limited,
and how to test them?

94
00:06:06.412 --> 00:06:10.763
And we're gonna really understand each one
of these little config files that are in

95
00:06:10.763 --> 00:06:14.200
the project, so
that you can take this back to your team.

96
00:06:14.200 --> 00:06:15.660
And you can apply what
we've learned today.

97
00:06:16.670 --> 00:06:22.510
If you've looked at the previous course,
TypeScript, three fundamentals, v2.

98
00:06:22.510 --> 00:06:24.340
I presented there a strategy for

99
00:06:24.340 --> 00:06:28.020
converting a code base from
JavaScript to TypeScript.

100
00:06:28.020 --> 00:06:34.810
Now, if you tried to apply this on a large
scale project, you probably found that

101
00:06:34.810 --> 00:06:39.750
step three, the third of the three steps,
that entails 80% of the work, right?

102
00:06:39.750 --> 00:06:44.280
It's a lot of work, so we're gonna spend
some time today breaking that down, and

103
00:06:44.280 --> 00:06:49.660
helping define a path for
a larger project with a bigger team.

104
00:06:49.660 --> 00:06:54.260
How do we get from JavaScript to
TypeScript successfully without it

105
00:06:54.260 --> 00:06:58.670
feeling like you're trying to
scale a cliff on that third step?

106
00:06:58.670 --> 00:07:00.910
We'll talk about definitely typed,

107
00:07:00.910 --> 00:07:05.790
which is a community repository for
ambient type information.

108
00:07:05.790 --> 00:07:10.240
This is where you would get types for
something like react, or lodash.

109
00:07:10.240 --> 00:07:15.740
And dealing with these ambient type files,
these declaration files is a bit tricky.

110
00:07:15.740 --> 00:07:18.830
There are things that you need to
know about, how these work and

111
00:07:18.830 --> 00:07:20.480
what the limitations are?

112
00:07:20.480 --> 00:07:26.160
And I'll show you, how I debug these,
and how I work with these?

113
00:07:26.160 --> 00:07:28.170
And set you up for

114
00:07:28.170 --> 00:07:34.040
success in the likely event that you find
something wrong with one of these things.

115
00:07:34.040 --> 00:07:38.580
You will be able to go to GitHub and
fix it, and keep your app moving.

116
00:07:39.740 --> 00:07:44.388
One of the biggest problems that
we deal with in in the TypeScript

117
00:07:44.388 --> 00:07:46.895
world is runtime values, right?

118
00:07:46.895 --> 00:07:50.730
These are API responses
we get from a JSON API.

119
00:07:50.730 --> 00:07:53.970
How do we deal with those when
the TypeScript piece of your app,

120
00:07:53.970 --> 00:07:58.400
the type information it
disappears after build time?

121
00:07:58.400 --> 00:08:02.000
How do we make sure that
we're treating API responses

122
00:08:02.000 --> 00:08:06.000
in a way that keeps our type
base guarantees strong?

123
00:08:07.090 --> 00:08:12.760
We'll talk about tests for types,
tests for that pure type information, not

124
00:08:12.760 --> 00:08:17.878
just the test that you're writing for your
JavaScript Code but in TypeScript, right?

125
00:08:17.878 --> 00:08:23.710
So we'll look at two tools, and
I use both of these together that

126
00:08:23.710 --> 00:08:28.620
allow you to test your type information
just like you test everything else.

127
00:08:28.620 --> 00:08:30.100
And then finally,

128
00:08:30.100 --> 00:08:36.120
towards the end of the day we'll talk
about automated API change detection.

129
00:08:36.120 --> 00:08:41.065
Meaning, if you have a component and it
makes certain, like functions available,

130
00:08:41.065 --> 00:08:45.430
how do you know when your contracts
between things are changing?

131
00:08:45.430 --> 00:08:48.170
I'll introduce you to
a tool called API Extractor

132
00:08:48.170 --> 00:08:51.080
that makes this process easier
than you ever thought possible.

133
00:08:51.080 --> 00:08:54.610
And then finally, I'm gonna share some
of the knowledge I have from LinkedIn

134
00:08:54.610 --> 00:08:57.490
about using TypeScript at scale, right?

135
00:08:57.490 --> 00:09:00.010
This is teams with 200 contributors and

136
00:09:00.010 --> 00:09:03.050
hundreds of code changes
being merged every day.

137
00:09:03.050 --> 00:09:05.730
How does a project like that stay fast?

138
00:09:05.730 --> 00:09:10.130
And you can take some of these tips, and
you can bring them into your own app.

139
00:09:10.130 --> 00:09:13.860
And if it makes a huge codebase fast,
it'll make your app fast too.

140
00:09:15.680 --> 00:09:21.553
So with that, please click this link
should be pretty easy to remember.

141
00:09:21.553 --> 00:09:24.220
Click this link, and
it'll take you to a Git repo.

142
00:09:24.220 --> 00:09:28.648
And the next thing we're going to do is
follow the instructions in the README.

143
00:09:28.648 --> 00:09:30.881
And be careful to read the README,

144
00:09:30.881 --> 00:09:34.665
there are some steps in there
you may not have seen before.

145
00:09:34.665 --> 00:09:38.623
And we're gonna get set up with this
workshop project, the Slack app.

