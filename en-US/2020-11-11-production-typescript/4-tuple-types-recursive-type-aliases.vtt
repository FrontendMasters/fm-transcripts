WEBVTT

1
00:00:00.590 --> 00:00:04.460
Okay, so the next set of TypeScript
language features we're going to talk

2
00:00:04.460 --> 00:00:08.560
about is a set of improvements
around what are called tuple types.

3
00:00:08.560 --> 00:00:13.760
So the first of these improvements
came in TypeScript 4.0,

4
00:00:13.760 --> 00:00:16.070
and it's called variadic tuple types.

5
00:00:16.070 --> 00:00:21.419
So let's say that I had a type like this,
and we'll say that it's

6
00:00:21.419 --> 00:00:27.265
an array starting and ending with
a Boolean with something in between.

7
00:00:31.252 --> 00:00:35.655
So there's our something we're gonna
make this generic like, should work for

8
00:00:35.655 --> 00:00:36.810
anything.

9
00:00:36.810 --> 00:00:41.464
And now we can do Boolean, ...T,

10
00:00:41.464 --> 00:00:44.476
oops and then Boolean.

11
00:00:44.476 --> 00:00:47.941
So before TypeScript
4.0 you would have been

12
00:00:47.941 --> 00:00:52.640
forced to put this ...T as
the last element of the array.

13
00:00:52.640 --> 00:00:56.880
But now we have the ability to say
there's some stuff, could be strings,

14
00:00:56.880 --> 00:01:01.310
could be numbers and there is a Boolean at
the beginning and a Boolean at the end.

15
00:01:01.310 --> 00:01:06.408
This may not seem like a big deal but some
libraries that you use, like if you use

16
00:01:06.408 --> 00:01:13.120
lodash-es, functional programming,
collection of utilities or RxJS.

17
00:01:13.120 --> 00:01:15.190
This is a pretty huge deal.

18
00:01:15.190 --> 00:01:20.630
It makes it much simpler to type
certain kinds of functions where,

19
00:01:20.630 --> 00:01:22.680
maybe you're piping a bunch
of things together.

20
00:01:23.980 --> 00:01:28.780
Or even something like function bind and
function apply, where you have this

21
00:01:28.780 --> 00:01:34.030
concept of like a partial application or
currying, right?

22
00:01:35.240 --> 00:01:40.240
This makes typing that kind of thing
where you have some arguments and

23
00:01:40.240 --> 00:01:42.040
then maybe begin and end stuff.

24
00:01:42.040 --> 00:01:42.770
It's much easier.

25
00:01:44.430 --> 00:01:47.010
Next we have labeled tuple types.

26
00:01:47.010 --> 00:01:54.030
So let's say that,
we want a street address again, right?

27
00:01:54.030 --> 00:01:56.250
So we have a type, address.

28
00:01:57.430 --> 00:02:00.870
And we can define this as
let's say a house number.

29
00:02:01.970 --> 00:02:03.170
I know that we can have letters and

30
00:02:03.170 --> 00:02:06.500
house numbers, but
I'm trying to make this interesting.

31
00:02:06.500 --> 00:02:09.137
And then, we have a city and

32
00:02:09.137 --> 00:02:14.944
a state, And a postal code.

33
00:02:14.944 --> 00:02:16.450
Let's pretend that's a number as well.

34
00:02:18.350 --> 00:02:24.190
Now, we might have a function
here called print address.

35
00:02:25.340 --> 00:02:27.937
And you might want to say hey,
the arguments I take,

36
00:02:30.840 --> 00:02:36.788
It's just all of the things that
are in an address, in order, right?

37
00:02:36.788 --> 00:02:43.100
So, but the problem here is we have a
pretty miserable autocomplete experience.

38
00:02:43.100 --> 00:02:46.855
Look at this, we've got address0,
address1, address2.

39
00:02:46.855 --> 00:02:48.589
If I'm consuming this,

40
00:02:48.589 --> 00:02:53.720
I'm gonna have to jump into this file
wherever print address is defined.

41
00:02:53.720 --> 00:02:58.245
And I'm gonna have to kinda go on
a little detective story to try to

42
00:02:58.245 --> 00:03:02.610
investigate what the heck is
this thing actually consuming?

43
00:03:02.610 --> 00:03:03.630
It's not great.

44
00:03:03.630 --> 00:03:06.890
So, labelled tuple types
are what let us do this.

45
00:03:09.910 --> 00:03:12.462
And as soon as we start labelling
each of these elements,

46
00:03:12.462 --> 00:03:14.016
we must continue labelling them.

47
00:03:16.300 --> 00:03:18.195
So you have to have it for all of them.

48
00:03:21.391 --> 00:03:23.542
So something like this are still an array,

49
00:03:23.542 --> 00:03:28.070
although it kinda looks like the key value
pairs we're used to seeing in an object.

50
00:03:28.070 --> 00:03:31.510
And look how much nicer
the autocomplete is now, right?

51
00:03:31.510 --> 00:03:34.220
We get that street number,
city, state, postal.

52
00:03:35.240 --> 00:03:37.790
So I'm a big fan of tuples.

53
00:03:37.790 --> 00:03:41.660
I think that for one,
especially if you're serializing data,

54
00:03:41.660 --> 00:03:45.700
if you're getting an API response,
this saves a lot of space.

55
00:03:45.700 --> 00:03:50.020
May seem like a small
deal in this example, but

56
00:03:50.020 --> 00:03:54.660
imagine that you're getting,
potentially 50 kiloBytes of JSON.

57
00:03:55.750 --> 00:04:01.580
For a big app, this is not
beyond the realm of possibility.

58
00:04:02.740 --> 00:04:05.410
So you can save a lot of space and

59
00:04:05.410 --> 00:04:08.310
save a lot of data,
which matters to your users as well,

60
00:04:08.310 --> 00:04:11.260
particularly in places in the world
where you have metered connections and

61
00:04:12.270 --> 00:04:17.120
people pay per byte,
per kilobyte, per gigabyte.

62
00:04:17.120 --> 00:04:19.630
This is a more compact way
to represent the same data.

63
00:04:19.630 --> 00:04:23.980
And in your app, you get the same great
experience as if this were an object with

64
00:04:25.930 --> 00:04:27.360
property names and values,
property names and values, right?

65
00:04:27.360 --> 00:04:31.195
You still can have that nice
autocomplete regardless.

66
00:04:34.311 --> 00:04:39.057
The next category of advancements in
the TypeScript language have to do

67
00:04:39.057 --> 00:04:41.440
with type aliases and interfaces.

68
00:04:41.440 --> 00:04:46.269
So if you watched
TypeScript 3 Fundamentals,

69
00:04:46.269 --> 00:04:51.470
v2 we talked a little bit about
how we would type JSON, right?

70
00:04:51.470 --> 00:04:53.690
Only certain kinds of
values are allowed in JSON.

71
00:04:53.690 --> 00:04:56.200
You can't have functions, for example.

72
00:04:56.200 --> 00:05:01.210
So we worked, combined the type and
an interface,

73
00:05:01.210 --> 00:05:05.040
a type alias and an interface, which
at the time was the only way to do it.

74
00:05:05.040 --> 00:05:10.990
In order to create something that
describes any allowed JSON value.

75
00:05:10.990 --> 00:05:15.370
So I wanna really quickly
write out that solution.

76
00:05:15.370 --> 00:05:21.490
So we had something like this,
type JSON array,

77
00:05:23.390 --> 00:05:28.639
Which was, sorry, we did this interface,
JSON array extends.

78
00:05:31.009 --> 00:05:37.969
It's an array of JSON values,
Where JSON value,

79
00:05:40.289 --> 00:05:44.743
Was a string or number or

80
00:05:44.743 --> 00:05:51.600
Boolean, or no, or JSON array.

81
00:05:51.600 --> 00:05:55.548
Or I think we had a JSON object
that might have looked like this.

82
00:05:57.975 --> 00:06:04.850
No, we had one more interface JSON
object which had an index signature.

83
00:06:07.762 --> 00:06:13.470
And this was our old way of typing JSON.

84
00:06:13.470 --> 00:06:19.432
Now, it is convoluted,
like crazy and it uses a hack.

85
00:06:19.432 --> 00:06:21.020
It, so

86
00:06:21.020 --> 00:06:26.690
the only reason this works is because
this type alias is evaluated eagerly.

87
00:06:26.690 --> 00:06:30.260
And as it's parsed,

88
00:06:30.260 --> 00:06:35.330
we kinda take note that, we're referring
to a JSON array at some point.

89
00:06:35.330 --> 00:06:39.060
I expect this to be defined as a thing.

90
00:06:39.060 --> 00:06:42.970
Same thing with object and then down
here we can kind of define these.

91
00:06:42.970 --> 00:06:46.610
So we already, JSON value is already
understood, we already know what it is.

92
00:06:46.610 --> 00:06:50.640
So we're taking advantage of the fact
that we can get through this,

93
00:06:51.860 --> 00:06:55.920
and sort of put a pin in the task of

94
00:06:55.920 --> 00:07:00.200
fleshing out what exactly does it mean
to be a JSON array in a JSON object?

95
00:07:00.200 --> 00:07:03.000
These combination of these
two things that allow us

96
00:07:03.000 --> 00:07:06.010
to create effectively a recursive type.

97
00:07:06.010 --> 00:07:12.802
That would permit us to do
something like val is a,

98
00:07:12.802 --> 00:07:18.480
we could do like nike, and then address.

99
00:07:19.640 --> 00:07:21.200
Oops, sorry, I need a comma there.

100
00:07:22.830 --> 00:07:28.940
Address is a Spear Street, right?

101
00:07:28.940 --> 00:07:33.780
But if we did, we said wave to Mike.

102
00:07:33.780 --> 00:07:38.060
We're gonna say it's gonna object and
it'll say, I'm sorry.

103
00:07:38.060 --> 00:07:40.460
This function that you
added there is not allowed.

104
00:07:40.460 --> 00:07:41.220
That's not JSON.

105
00:07:41.220 --> 00:07:44.669
So I'm just simply showing
you nothing up my sleeve.

106
00:07:44.669 --> 00:07:46.894
This works.

107
00:07:46.894 --> 00:07:52.470
Now, what was added in
TypeScript 4.0 was the ability

108
00:07:52.470 --> 00:07:56.480
to have recursive type aliases.

109
00:07:56.480 --> 00:08:01.617
And what that would let me do here
it's only possible in TypeScript 4.0.

110
00:08:01.617 --> 00:08:06.152
And later soon you continues
to work continues to

111
00:08:06.152 --> 00:08:10.251
work I can refer to my
JSON value array here.

112
00:08:10.251 --> 00:08:15.062
And then this JSON object thing I
can just peel this thing out, boom.

113
00:08:17.952 --> 00:08:22.090
Get rid of my wave thing which is not
allowed, and it continues to work.

114
00:08:22.090 --> 00:08:27.084
So we can have a recursive
type alias meaning this type,

115
00:08:27.084 --> 00:08:31.121
JSONValue, in the definition
of what it is,

116
00:08:31.121 --> 00:08:34.860
it refers to itself, in this case twice.

117
00:08:34.860 --> 00:08:38.910
This makes it, I mean, we just deleted
a bunch of code, which is a good sign.

118
00:08:38.910 --> 00:08:41.105
This usually means things
are made much simpler.

119
00:08:42.931 --> 00:08:45.480
So that is recursive type aliases.

120
00:08:45.480 --> 00:08:47.538
We also have recursive conditional types.

121
00:08:47.538 --> 00:08:52.932
I'm not gonna get into those too much
because it's a very advanced feature and

122
00:08:52.932 --> 00:08:57.834
you're unlikely to use it in your app
until you get really into the weeds

123
00:08:57.834 --> 00:08:58.990
with generics.

124
00:08:58.990 --> 00:09:02.650
Just wanna make note of that
lending in TypeScript 4.1.

125
00:09:02.650 --> 00:09:08.340
And it would allow you effectively to do
something similar to what we have here,

126
00:09:08.340 --> 00:09:10.890
which is in a conditional type, which is

127
00:09:10.890 --> 00:09:15.760
the kind of looks like a ternary operator
with the question mark and the colon.

128
00:09:15.760 --> 00:09:20.630
That type can refer to itself
in its own definition.

129
00:09:20.630 --> 00:09:24.462
I will leave it as an exercise
to you to look more into that.

130
00:09:24.462 --> 00:09:28.450
If it is relevant to your app,
I suspect it, for most of you,

131
00:09:28.450 --> 00:09:31.190
it's not something you'll encounter.

132
00:09:31.190 --> 00:09:33.389
But you may encounter this.

133
00:09:33.389 --> 00:09:35.674
So, template type literals.

134
00:09:35.674 --> 00:09:39.718
So you may be familiar with the idea
of tagged template literals,

135
00:09:39.718 --> 00:09:42.450
which are these backtick strings, right?

136
00:09:42.450 --> 00:09:44.501
Where we can have this dollar signs,

137
00:09:44.501 --> 00:09:48.020
this is how we interpolate values
into strings in JavaScript.

138
00:09:48.020 --> 00:09:50.419
We can do that when
defining type literals.

139
00:09:50.419 --> 00:09:54.840
So if I had something like this,
corner equals,

140
00:09:57.620 --> 00:10:01.913
Top or bottom and

141
00:10:01.913 --> 00:10:05.900
left or right.

142
00:10:11.393 --> 00:10:19.810
Let's see Swinging chair I'm
following my example here properly.

143
00:10:34.105 --> 00:10:40.284
Let me restart VS code here real quick.

144
00:10:40.284 --> 00:10:46.158
Just to make sure I'm not like
lagging behind in TypeScript version,

145
00:10:46.158 --> 00:10:52.245
and I'm gonna comment the rest of
the stuff out in case it's interfering

146
00:10:58.723 --> 00:10:59.765
It should work.

147
00:10:59.765 --> 00:11:01.453
I know why this is not working.

148
00:11:01.453 --> 00:11:03.693
It only works in TypeScript, [LAUGH] 4.1.

149
00:11:03.693 --> 00:11:05.553
I have a note to myself here.

150
00:11:09.357 --> 00:11:12.337
So I'm gonna install that real quick.

151
00:11:12.337 --> 00:11:14.804
And we should see as soon
as this installs, and

152
00:11:14.804 --> 00:11:17.984
as soon as I can switch over to it and
I'm gonna switch back.

153
00:11:17.984 --> 00:11:22.268
We're not gonna be using the beta here,
just because I wanna keep things nice and

154
00:11:22.268 --> 00:11:22.782
stable.

155
00:11:22.782 --> 00:11:28.088
But here we can see,
that corner combines these two.

156
00:11:28.088 --> 00:11:31.496
So we've got top left, top right,
bottom left, bottom right.

157
00:11:31.496 --> 00:11:36.547
So anytime that you have sort of a,
you have a set of values and

158
00:11:36.547 --> 00:11:40.806
you want a type that represents
all of the different

159
00:11:40.806 --> 00:11:46.177
permutations of x crossed with y,
this is a great way to do this.

160
00:11:46.177 --> 00:11:51.500
There are even words you can
add here like capitalize.

161
00:11:51.500 --> 00:11:52.961
I think that's one of them.

162
00:11:52.961 --> 00:11:54.461
Let's see.

163
00:11:54.461 --> 00:12:01.131
Maybe a, Retry with parentheses here.

164
00:12:01.131 --> 00:12:04.351
Yeah, that looks like it's parsing it
is a different kind of syntax here.

165
00:12:07.001 --> 00:12:12.317
To be honest, I haven't used this one
much but apparently you can do this.

166
00:12:12.317 --> 00:12:14.017
So I'm just gonna leave it at that.

167
00:12:14.017 --> 00:12:19.377
Unlike where you can capitalize this.

168
00:12:19.377 --> 00:12:25.271
You could say, I want the first part of
it to be an all caps, like capital TOP,

169
00:12:25.271 --> 00:12:30.560
as opposed to it just literally
trying all the interpolations here.

170
00:12:32.180 --> 00:12:37.340
Again, this is in a beta so it may be
that they're still iterating on this.

171
00:12:37.340 --> 00:12:43.460
But the idea is that you could even modify
these string literals like these top and

172
00:12:43.460 --> 00:12:49.490
bottom and incorporate that modification
into your your permutations there.

173
00:12:53.670 --> 00:12:55.660
I'm gonna go back to
the regular TypeScript.

174
00:12:55.660 --> 00:12:57.827
All right, before I move on,

175
00:12:57.827 --> 00:13:02.782
any questions about these changes
to type aliases and interfaces?

176
00:13:02.782 --> 00:13:08.529
And in this case, the literal type here,
although this is a very new thing.

177
00:13:08.529 --> 00:13:15.216
Although I can see how especially
if you're doing like CSS and JS, or

178
00:13:15.216 --> 00:13:20.995
if you're building react and
you need on click, on hover.

179
00:13:20.995 --> 00:13:25.770
You could easily kind of create a nice
type that was added on to the beginning of

180
00:13:25.770 --> 00:13:26.955
all these things.

181
00:13:26.955 --> 00:13:29.355
That's where I can see
this being most useful.

