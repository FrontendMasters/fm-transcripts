WEBVTT

1
00:00:00.049 --> 00:00:06.710
The next thing we're going to do is
we're gonna start with an empty folder.

2
00:00:06.710 --> 00:00:11.535
And we're going to take the steps
I usually take when making

3
00:00:11.535 --> 00:00:14.249
a brand new TypeScript library.

4
00:00:14.249 --> 00:00:17.678
So I'm doing this because
after we set this up,

5
00:00:17.678 --> 00:00:21.811
we're gonna switch over to
our slack workshop project.

6
00:00:21.811 --> 00:00:24.113
But I want you to know there's
nothing up my sleeves.

7
00:00:24.113 --> 00:00:27.832
I want you to understand
how it all fits together.

8
00:00:27.832 --> 00:00:33.567
And this is an opportunity for
us to do it in a simple way so

9
00:00:33.567 --> 00:00:40.899
that you're not left feeling like I
have only shown you the happy path.

10
00:00:40.899 --> 00:00:43.296
So I want you to create
a brand new folder.

11
00:00:43.296 --> 00:00:45.580
We're gonna do this from start to finish,
right?

12
00:00:45.580 --> 00:00:50.617
So I'm gonna create a folder and
let's just call it my lib.

13
00:00:50.617 --> 00:00:55.524
By the way, if you're following along in
the notes, which I highly suggest you

14
00:00:55.524 --> 00:00:59.625
do in this case, given that I have
all of the steps are all the little

15
00:00:59.625 --> 00:01:03.966
changes you have to make to makes it
much easier to copy paste, right?

16
00:01:03.966 --> 00:01:07.907
So this is notes Section 4.

17
00:01:07.907 --> 00:01:12.729
So we're gonna make a directory,
And call it my lib.

18
00:01:12.729 --> 00:01:17.340
You can call it whatever you want and
we're going to enter it.

19
00:01:17.340 --> 00:01:25.354
And then the next thing I'm going to
do is use NPX, NPXGit ignore node.

20
00:01:25.354 --> 00:01:29.857
Raise your hand in the class if
you've used NPX before for something,

21
00:01:29.857 --> 00:01:33.764
even if you don't know what it means,
have you ever used it?

22
00:01:33.764 --> 00:01:34.876
About half a class.

23
00:01:34.876 --> 00:01:39.694
So, what this effectively
does it's a shorthand for

24
00:01:39.694 --> 00:01:44.085
download a package from
NPM called Git ignore and

25
00:01:44.085 --> 00:01:47.202
treat it like it's a CLI package.

26
00:01:47.202 --> 00:01:49.727
This is really most useful with CLI,
right?

27
00:01:49.727 --> 00:01:54.113
NPX, X is for execute.

28
00:01:54.113 --> 00:01:57.942
So that's not what execute starts with but
it works.

29
00:01:57.942 --> 00:02:03.641
And then we're gonna pass
an argument to it the word node.

30
00:02:03.641 --> 00:02:08.394
So if we were to do this with TypeScript,
we could do NPX,

31
00:02:08.394 --> 00:02:11.377
TSC that would invoke TypeScript.

32
00:02:11.377 --> 00:02:15.001
So if it doesn't exist on your system yet,
it will be downloaded on the fly.

33
00:02:15.001 --> 00:02:16.932
And we should see evidence of that.

34
00:02:16.932 --> 00:02:21.079
There it is, we saw that little
progress bar real quick.

35
00:02:21.079 --> 00:02:23.569
Right and it keeps it cached.

36
00:02:23.569 --> 00:02:27.610
So you might see something a little
different than what you're seeing for

37
00:02:27.610 --> 00:02:28.142
me here.

38
00:02:28.142 --> 00:02:31.934
And then it tells me it created
a git ignore file for type node.

39
00:02:31.934 --> 00:02:32.775
Let's see what it looks like.

40
00:02:36.074 --> 00:02:37.197
There's my gitignore.

41
00:02:37.197 --> 00:02:42.388
So this particular library,
it's a great way to create a starting

42
00:02:42.388 --> 00:02:47.406
point gitignore for
a variety of different environment types.

43
00:02:47.406 --> 00:02:50.563
So this has stuff in here for
at some point,

44
00:02:50.563 --> 00:02:53.648
it's got like there's grunt and bower.

45
00:02:53.648 --> 00:02:55.339
And this is obviously for
JavaScript stuff.

46
00:02:55.339 --> 00:02:56.665
There's a Ts build info.

47
00:02:56.665 --> 00:02:59.242
That's something TypeScript spits out.

48
00:02:59.242 --> 00:03:02.024
There's some view stuff in here.

49
00:03:02.024 --> 00:03:05.834
Next, js, the next and nuxt.

50
00:03:05.834 --> 00:03:06.984
There your view things.

51
00:03:06.984 --> 00:03:10.644
So this is just designed to make it so
it works well.

52
00:03:10.644 --> 00:03:13.676
For a bunch of different
JavaScript things,

53
00:03:13.676 --> 00:03:17.918
that you don't really care about
committing to your gitrepo.

54
00:03:17.918 --> 00:03:22.067
Next thing we're gonna do is create
a starting point package JSON.

55
00:03:22.067 --> 00:03:25.244
We can do that with this yarn in it, yes.

56
00:03:25.244 --> 00:03:30.292
So if we didn't do --yes,
it would ask us a bunch of questions and

57
00:03:30.292 --> 00:03:35.537
we're just saying YOLO like go with
whatever you're gonna go with.

58
00:03:35.537 --> 00:03:40.798
And let me open this in a new VS code.

59
00:03:40.798 --> 00:03:44.118
So now I'm out of my slack workshop.

60
00:03:44.118 --> 00:03:46.449
I'm in this new folder I've created.

61
00:03:46.449 --> 00:03:48.469
I've got my package JSON here.

62
00:03:48.469 --> 00:03:51.187
This is what we got by saying --yes.

63
00:03:51.187 --> 00:03:53.339
So Version 1 is the default.

64
00:03:53.339 --> 00:03:57.567
This is the default value here where
MIT of licensing is by default,

65
00:03:57.567 --> 00:04:00.992
it's grabbing my -lib from
the folder name, right?

66
00:04:00.992 --> 00:04:04.222
So it's kinda done all the stuff.

67
00:04:04.222 --> 00:04:06.024
It's inferred as much as it can.

68
00:04:06.024 --> 00:04:09.757
Now we're gonna make a few
changes to this file first.

69
00:04:09.757 --> 00:04:11.959
I expect the entry point for

70
00:04:11.959 --> 00:04:16.956
this library to be in a folder
I'll create later called dist.

71
00:04:16.956 --> 00:04:22.652
So we'll do this and I'm gonna
include some type information as well.

72
00:04:22.652 --> 00:04:29.836
So we'll tell we'll encode this
information into our package, JSON, right?

73
00:04:29.836 --> 00:04:31.974
So we've got the main entry point.

74
00:04:31.974 --> 00:04:33.508
And then this is, for

75
00:04:33.508 --> 00:04:38.471
consumers of this library where
they can find the type information.

76
00:04:38.471 --> 00:04:42.527
So like VS code will look at
the package JSON for this package,

77
00:04:42.527 --> 00:04:45.026
and it will follow the instructions.

78
00:04:45.026 --> 00:04:51.537
This is like saying here's the map
where you can find my types.

79
00:04:51.537 --> 00:04:56.211
We're going to then add
a couple scripts here and

80
00:04:56.211 --> 00:05:03.054
we'll install the dependencies needed for
these scripts in a moment.

81
00:05:03.054 --> 00:05:08.478
So this is what's necessary
in order to be able to run

82
00:05:08.478 --> 00:05:13.672
things like yarn, build,
yarn, test and so on.

83
00:05:13.672 --> 00:05:18.184
So build, I'm just gonna want it
to run the TypeScript compiler.

84
00:05:18.184 --> 00:05:20.332
That's all we need there.

85
00:05:20.332 --> 00:05:26.770
Dev, which is a live development
environment where a server spins up and

86
00:05:26.770 --> 00:05:30.579
whenever things change, it's rebuilt.

87
00:05:30.579 --> 00:05:36.655
I can look at, like, maybe localhost
1,2,3,4, if I'm building a web app.

88
00:05:36.655 --> 00:05:40.094
So, in this case, because it's
not gonna be a web application,

89
00:05:40.094 --> 00:05:41.730
it'll be just a tiny library.

90
00:05:41.730 --> 00:05:45.655
I'm just gonna say,
I want TypeScript to run, but

91
00:05:45.655 --> 00:05:50.878
I want it to sort of watch for
changes and rebuild whatever I change.

92
00:05:50.878 --> 00:05:53.460
And here's how we can do that.

93
00:05:53.460 --> 00:05:57.813
So I'm gonna say do the stuff
you would do for build, but

94
00:05:57.813 --> 00:06:00.324
I want to run this in watch mode.

95
00:06:00.324 --> 00:06:04.993
So this is now passing additional
arguments to TSC beyond

96
00:06:04.993 --> 00:06:08.892
what would be passed to it for
the build script.

97
00:06:08.892 --> 00:06:10.510
And then finally, this one's important.

98
00:06:13.810 --> 00:06:15.069
Preserve watch output.

99
00:06:15.069 --> 00:06:20.381
So TSC --watch by default will clear

100
00:06:20.381 --> 00:06:25.697
the console whenever you save a file.

101
00:06:25.697 --> 00:06:27.736
And I feel like that is not so

102
00:06:27.736 --> 00:06:32.970
valuable in cases where it maybe you
saw a few errors and you fix a few and

103
00:06:32.970 --> 00:06:38.422
you save and you kind of wanna see
the history of what was spit out before.

104
00:06:38.422 --> 00:06:41.520
Preserved watch output just
means nothing is cleared.

105
00:06:41.520 --> 00:06:43.559
Like just let my terminal
do what it's gonna do.

106
00:06:43.559 --> 00:06:46.745
I don't want my tools to erase
information from my console.

107
00:06:51.632 --> 00:06:57.093
So this is a good time for
us to make sure we install

108
00:06:57.093 --> 00:07:02.170
all of those dependencies
that we will need.

109
00:07:06.414 --> 00:07:11.581
And this I just noticed this not in
the instructions, but it's fine.

110
00:07:11.581 --> 00:07:13.384
We can make it work.

111
00:07:13.384 --> 00:07:15.771
So here's what we're gonna do.

112
00:07:15.771 --> 00:07:20.496
All I need actually let's finish
the script here real quick and then we'll

113
00:07:20.496 --> 00:07:25.446
install those dependencies because it's
gonna let us do that all in one step.

114
00:07:25.446 --> 00:07:27.268
So we have a lint task.

115
00:07:27.268 --> 00:07:31.672
When I run yarn lint,
I want eslint to run.

116
00:07:31.672 --> 00:07:35.701
And I want it to look just lint
whatever's in the source folder.

117
00:07:35.701 --> 00:07:42.901
And I have to tell it that it's to look
at not just js files, but also ts.

118
00:07:42.901 --> 00:07:45.212
By default,
it's just gonna look at JavaScript.

119
00:07:45.212 --> 00:07:48.975
And, obviously,
we're writing TypeScript today.

120
00:07:48.975 --> 00:07:56.449
And then, one last command here test,
and we're gonna use jest for testing.

121
00:07:56.449 --> 00:07:58.249
So I'll save my package JSON.

122
00:07:58.249 --> 00:08:00.689
And now I wanna install some dependencies.

123
00:08:00.689 --> 00:08:04.312
This is not in the notes right now.

124
00:08:04.312 --> 00:08:07.447
So this is where you wanna look
at what I'm doing real quick.

125
00:08:07.447 --> 00:08:14.244
So I'm gonna say yarn, add -D for
development dependency, right.

126
00:08:14.244 --> 00:08:17.325
This is just stuff we need for
our built environment.

127
00:08:17.325 --> 00:08:20.185
We want to install TypeScript.

128
00:08:20.185 --> 00:08:25.550
Eslint and jest.

129
00:08:25.550 --> 00:08:29.262
And it's TypeScript, eslint and jest.

130
00:08:29.262 --> 00:08:38.396
So it's really just those things that
we state that we need, All right.

131
00:08:38.396 --> 00:08:43.919
Last thing, this is for those of you that
have been able to use volta successfully.

132
00:08:43.919 --> 00:08:51.303
I want to pin the version of node and
yarn to the current stable releases.

133
00:08:51.303 --> 00:08:56.503
So that if a new release is cut tomorrow,
I am not sort of taking

134
00:08:56.503 --> 00:09:01.603
that in by accident for
this project and nobody in my team is.

135
00:09:01.603 --> 00:09:04.695
Someone's working with
the beta of no jazz.

136
00:09:04.695 --> 00:09:11.443
I don't want them to be
suffering from weird bugs.

137
00:09:11.443 --> 00:09:14.511
That relate to people
using different nodes.

138
00:09:14.511 --> 00:09:18.572
So here's how we do that
volta pin node yarn.

139
00:09:18.572 --> 00:09:24.571
That's it, and running this, we can see
that this little bit here was added.

140
00:09:24.571 --> 00:09:27.843
So when people check this project out,

141
00:09:27.843 --> 00:09:31.810
if they have Volta
installed on their machine,

142
00:09:31.810 --> 00:09:36.481
they're gonna get node 12,19 and
yarn 1, 22.

143
00:09:36.481 --> 00:09:38.206
By the way,
this isn't the latest stable release.

144
00:09:38.206 --> 00:09:41.167
I think this is the latest LTS.

145
00:09:41.167 --> 00:09:43.060
Which is perfectly fine.

146
00:09:43.060 --> 00:09:47.725
In fact, if you go and look at the node
documentation around versions,

147
00:09:47.725 --> 00:09:52.547
they pretty much say that you should
unless you have a compelling reason,

148
00:09:52.547 --> 00:09:55.378
you should be using the LTS in production.

149
00:09:55.378 --> 00:09:56.573
It's a very good idea to do that.

150
00:10:00.005 --> 00:10:00.586
All right.

151
00:10:00.586 --> 00:10:02.364
We don't really have a Git repo yet.

152
00:10:02.364 --> 00:10:04.839
So this is a good time to
make our first commit.

153
00:10:04.839 --> 00:10:10.719
Well, first we have to do Git init and
then I'll add all this you can

154
00:10:10.719 --> 00:10:17.233
see our node modules is ignored on
the left sidebar here, which is great.

155
00:10:17.233 --> 00:10:22.065
And I'm just gonna call
this initial commit.

156
00:10:22.065 --> 00:10:24.170
And now we have a Git repo and one commit.

