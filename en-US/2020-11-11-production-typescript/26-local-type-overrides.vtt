WEBVTT

1
00:00:00.060 --> 00:00:05.650
There's also this concept of types
that go along with libraries written

2
00:00:05.650 --> 00:00:11.030
in JavaScript or libraries that do not
provide their own types out of the box.

3
00:00:11.030 --> 00:00:13.880
And that's where we see things like this,

4
00:00:13.880 --> 00:00:17.870
all of these packages
that begin with @types.

5
00:00:17.870 --> 00:00:22.581
So these are packages
from definitely-typed.

6
00:00:25.529 --> 00:00:31.870
And we'll talk a little bit more
about these declaration files here.

7
00:00:33.420 --> 00:00:38.450
But just know that if I
were to follow these, just

8
00:00:38.450 --> 00:00:43.590
the standard way that you would track down
something in your node modules folder.

9
00:00:43.590 --> 00:00:49.458
So if we go into types,
and then we go into,

10
00:00:49.458 --> 00:00:54.530
let's say, node &gt; fs &gt; promises.

11
00:00:54.530 --> 00:00:58.976
So we can see that these
look like those declaration

12
00:00:58.976 --> 00:01:03.370
files that we were seeing when we
were making our small library.

13
00:01:03.370 --> 00:01:08.460
Now, you're going to find bugs
in these declaration files.

14
00:01:08.460 --> 00:01:12.100
And part of the reason
you'll find bugs here is

15
00:01:12.100 --> 00:01:15.390
because of how definitely-typed works.

16
00:01:15.390 --> 00:01:19.780
So it's a community maintained
repository where there's sort of

17
00:01:23.040 --> 00:01:27.590
some semblance of ownership,
but not control.

18
00:01:27.590 --> 00:01:32.770
So I maintain several packages
indefinitely-typed, and all one needs to

19
00:01:32.770 --> 00:01:38.100
do in order to become an owner is, I can
take you back to one of these files here.

20
00:01:38.100 --> 00:01:44.640
You just need to list yourself up
at the top of one of these files.

21
00:01:44.640 --> 00:01:45.902
So here you go.

22
00:01:45.902 --> 00:01:50.120
This is the file as it
is checked into to get.

23
00:01:51.160 --> 00:01:54.065
And you can see there are bunch of
different people who have just put their

24
00:01:54.065 --> 00:01:54.593
names on it.

25
00:01:54.593 --> 00:01:55.980
So these are the owners.

26
00:01:55.980 --> 00:02:03.980
Now when somebody opens up a change to
one of these definitely-typed packages.

27
00:02:03.980 --> 00:02:07.050
It'll sit there, that poll request
will sit there for seven days.

28
00:02:08.585 --> 00:02:15.754
And if nobody acts to approve it,
it'll automatically get merged.

29
00:02:15.754 --> 00:02:18.921
And if one of these people gives it
a code review, and says this looks good,

30
00:02:18.921 --> 00:02:20.344
it'll get merged very quickly.

31
00:02:20.344 --> 00:02:24.904
And if somebody says this needs to
be changed, then they'll be stopped.

32
00:02:24.904 --> 00:02:29.626
But what's tricky here is by default,
things sail through.

33
00:02:29.626 --> 00:02:34.513
A decent percentage of
code changes enter this

34
00:02:34.513 --> 00:02:39.282
type information, not node specifically.

35
00:02:39.282 --> 00:02:44.400
I mean, you see how many of these packages
there are in this relatively simple app.

36
00:02:44.400 --> 00:02:49.780
Look at all of these that I'm taking on
through transitive dependencies, right?

37
00:02:49.780 --> 00:02:51.440
Dependencies of dependencies.

38
00:02:53.060 --> 00:02:58.620
So you're gonna be getting a lot
of mystery code in your app.

39
00:02:58.620 --> 00:03:05.690
You will find bugs and you will be
blocked, which is really bad, right?

40
00:03:05.690 --> 00:03:08.090
This is the last thing
you want to block you.

41
00:03:08.090 --> 00:03:12.260
You're hoping TypeScript is gonna be
a productivity boon for your team.

42
00:03:12.260 --> 00:03:13.860
And this can really throw
a wrench in the work.

43
00:03:13.860 --> 00:03:16.796
So I wanna show you how to
make some local overrides.

44
00:03:16.796 --> 00:03:21.545
Because what I want you to be able
to do as a viewer of this course.

45
00:03:21.545 --> 00:03:26.939
Is find a way to fix the problem,
apply that change immediately in your app,

46
00:03:26.939 --> 00:03:31.238
and then open up a poll request,
and have that discussion and

47
00:03:31.238 --> 00:03:34.296
maybe it gets merged, maybe it doesn't.

48
00:03:34.296 --> 00:03:37.251
But I don't want you to be
blocked while you wait for

49
00:03:37.251 --> 00:03:40.780
someone in open source to get
around to reviewing your code.

50
00:03:41.940 --> 00:03:43.560
So here's how you do this.

51
00:03:45.500 --> 00:03:51.086
We're going to create a folder in the top
level of our project called types.

52
00:03:51.086 --> 00:03:56.900
And this is going to be a place where
you can apply local overrides and

53
00:03:56.900 --> 00:04:03.645
changes to type information that sort of,
remember this is a global concept.

54
00:04:03.645 --> 00:04:08.070
But this is a place where you can
sort of patch things if you need to.

55
00:04:08.070 --> 00:04:13.025
So we have this types folder, and
then we're gonna go into our tsconfig, and

56
00:04:13.025 --> 00:04:17.920
we're gonna add a new compiler option
here and it's gonna be this, paths.

57
00:04:26.414 --> 00:04:28.815
Okay, so what does this mean?

58
00:04:28.815 --> 00:04:30.847
Oop, I need one more thing, baseUrl.

59
00:04:38.330 --> 00:04:41.346
And it'll catch up in a sec, or it should.

60
00:04:47.629 --> 00:04:48.450
There it goes.

61
00:04:48.450 --> 00:04:51.440
All right, so paths.

62
00:04:52.460 --> 00:04:56.537
Paths allow us to specify
a path mapping to be

63
00:04:56.537 --> 00:05:00.518
computed relative to the baseURL option.

64
00:05:00.518 --> 00:05:04.614
So what that means is
when your editor says,

65
00:05:04.614 --> 00:05:09.494
all right,
you appear to be using types from React.

66
00:05:11.496 --> 00:05:17.470
I need to go and find that declaration
file that matches React, right?

67
00:05:17.470 --> 00:05:18.970
Where do I get that information?

68
00:05:20.140 --> 00:05:24.390
And there's a way,
there's another flag here, by the way,

69
00:05:24.390 --> 00:05:25.920
this is a debugging pro tip.

70
00:05:28.110 --> 00:05:32.440
Trace resolution, if you turn this on,
and then run tsc,

71
00:05:32.440 --> 00:05:35.660
you're gonna get a ton of extra output.

72
00:05:35.660 --> 00:05:41.375
And this will help you track down
exactly what's going on and from where.

73
00:05:41.375 --> 00:05:46.583
So I would advise not trying to
read this in your terminal but

74
00:05:46.583 --> 00:05:48.569
type it to a text file.

75
00:05:48.569 --> 00:05:53.994
And then we can look for
the module of interest.

76
00:05:53.994 --> 00:05:57.399
Like say you were having a problem, your
editor said, I can't find the types for

77
00:05:57.399 --> 00:05:58.330
this thing.

78
00:05:58.330 --> 00:06:00.300
And you look in your package JSON,
you say,

79
00:06:00.300 --> 00:06:04.460
I swear, we've included this package,
it should be there.

80
00:06:04.460 --> 00:06:05.220
What's going on?

81
00:06:05.220 --> 00:06:06.988
Why can't it be found?

82
00:06:06.988 --> 00:06:12.984
So let me follow my own advice and
say pipe to out.txt.

83
00:06:16.484 --> 00:06:18.800
And here's our big output file.

84
00:06:18.800 --> 00:06:20.289
It's huge.

85
00:06:20.289 --> 00:06:21.449
See how many lines it is.

86
00:06:23.892 --> 00:06:27.083
Thousands, 6,000 lines.

87
00:06:27.083 --> 00:06:28.669
So here's what I wanna look for.

88
00:06:31.441 --> 00:06:37.097
Resolving module, React.

89
00:06:37.097 --> 00:06:39.324
So what's happening here?

90
00:06:39.324 --> 00:06:44.200
Notice that my scroll bar position which
is right up here, it's near the top.

91
00:06:45.690 --> 00:06:50.470
So resolving module react,
this will be printed the first time we

92
00:06:50.470 --> 00:06:55.280
encounter a need to find
type information for react.

93
00:06:55.280 --> 00:06:57.626
Every subsequent time,
you're gonna see things like,

94
00:07:04.940 --> 00:07:08.942
I can't seem to locate it,
so I'm not grapping for

95
00:07:08.942 --> 00:07:14.166
the right thing, but you'll see
an indication that it is cached.

96
00:07:14.166 --> 00:07:18.007
And you only resolve that type information
the first time it's needed, and

97
00:07:18.007 --> 00:07:19.455
then you kind of reserve it.

98
00:07:21.976 --> 00:07:25.010
You keep referring back to the same thing.

99
00:07:25.010 --> 00:07:30.930
So if we look at the output
here carefully, we can see,

100
00:07:30.930 --> 00:07:33.780
although it's not the most human
readable thing in the world,

101
00:07:33.780 --> 00:07:36.110
it's a hell of a lot
better than a stack trace.

102
00:07:36.110 --> 00:07:44.960
So we can see basically TypeScript,
how it's representing its lookup process.

103
00:07:44.960 --> 00:07:49.580
So right away,
we can see that react-dom was used.

104
00:07:50.710 --> 00:07:57.560
So we imported react-dom, which is
probably the step immediately before.

105
00:07:57.560 --> 00:07:58.110
Let's see.

106
00:07:59.540 --> 00:08:02.640
There's prop types, CSS type.

107
00:08:04.890 --> 00:08:06.230
There's react-dom.

108
00:08:06.230 --> 00:08:10.500
So first, we import react-dom and
it goes through some of the other imports.

109
00:08:10.500 --> 00:08:13.690
And then eventually it says, okay, I got
to figure out what this react thing is.

110
00:08:13.690 --> 00:08:18.870
So it knows that we said we're using
Node JS module resolution type.

111
00:08:20.055 --> 00:08:24.190
BaseURL option was set,
paths option was specified looking for

112
00:08:24.190 --> 00:08:27.290
a pattern to match module name react.

113
00:08:27.290 --> 00:08:30.320
So we were just messing with paths.

114
00:08:30.320 --> 00:08:33.420
And I want you to see that down here

115
00:08:33.420 --> 00:08:36.490
is where it's starting
to look in other places.

116
00:08:36.490 --> 00:08:37.970
It looks for a TypeScript file.

117
00:08:37.970 --> 00:08:41.180
Oops, a TSX file, a DTS file.

118
00:08:41.180 --> 00:08:44.540
Down here,
it's starting to look in at types, right?

119
00:08:44.540 --> 00:08:48.584
So the important thing to understand,
if we provide that paths parameter,

120
00:08:48.584 --> 00:08:51.253
it'll be the first place
that TypeScript looks.

121
00:08:51.253 --> 00:08:53.839
It's a perfect opportunity for
an override,

122
00:08:53.839 --> 00:08:57.694
because it's the first place that
TypeScript will attempt to look.

123
00:08:57.694 --> 00:09:03.721
And that means that if we were
to go into our types folder and

124
00:09:03.721 --> 00:09:08.881
have a reactindex.dts, And

125
00:09:08.881 --> 00:09:17.775
here, Something like this.

126
00:09:20.398 --> 00:09:21.309
Why is it unhappy?

127
00:09:24.640 --> 00:09:29.466
I need to ignore this, ESLint ignore this.

128
00:09:29.466 --> 00:09:33.297
ESLint is not great
with declaration files.

129
00:09:44.481 --> 00:09:45.540
I think it'll be fine though.

130
00:09:45.540 --> 00:09:47.850
I don't care if ESLint complains,
to be honest.

131
00:09:47.850 --> 00:09:50.164
I care about what TypeScript is gonna do.

132
00:09:50.164 --> 00:09:56.213
So let's go and look at our source folder
and go look at one of our components.

133
00:09:59.200 --> 00:10:03.330
So now note that some things
appear to be a little funky.

134
00:10:05.180 --> 00:10:08.090
Okay, it's saying that
this file is not a module.

135
00:10:08.090 --> 00:10:09.294
That's the error message.

136
00:10:09.294 --> 00:10:10.163
I'm gonna move it down here.

137
00:10:12.658 --> 00:10:15.490
So it's pointing to that file
we were just working on and

138
00:10:15.490 --> 00:10:17.720
it's saying it's not a module.

139
00:10:17.720 --> 00:10:20.800
Well, this is actually promising.

140
00:10:20.800 --> 00:10:25.268
It means that the compiler understands for

141
00:10:25.268 --> 00:10:31.234
that local file of mine to be
where React types are found.

142
00:10:31.234 --> 00:10:36.078
And that allows me, if I go and
fix it, if I say export function foo,

143
00:10:40.000 --> 00:10:43.730
Get rid of this out.txt,
doesn't really serve our purpose anymore.

144
00:10:44.850 --> 00:10:46.080
Go back into app.

145
00:10:46.080 --> 00:10:48.110
All right, so now it's happy.

146
00:10:48.110 --> 00:10:52.761
But it's gonna be really unhappy
about this other stuff because all

147
00:10:52.761 --> 00:10:55.460
React has on it now is the function foo.

148
00:10:55.460 --> 00:11:00.630
So I've kinda intercepted this type
lookup, and I've provided my own types.

149
00:11:00.630 --> 00:11:03.770
And this is where you
could create a local copy,

150
00:11:03.770 --> 00:11:08.920
make the tweaks you need to make,
types are found here.

151
00:11:08.920 --> 00:11:14.140
So the compiler will never look in your
node modules folder, doesn't need to,

152
00:11:14.140 --> 00:11:20.102
it's already discover something
that should work, and there you go.

153
00:11:20.102 --> 00:11:25.573
So you could create a copy,
make a local patch, then get unblocked and

154
00:11:25.573 --> 00:11:29.578
now open up your poll
request on the outside world.

155
00:11:29.578 --> 00:11:31.932
You could even relax the types, right?

156
00:11:31.932 --> 00:11:35.235
If you feel like, look,
I don't know how to solve this problem.

157
00:11:35.235 --> 00:11:38.292
But I do know if I put a few
any's here and just temporarily,

158
00:11:38.292 --> 00:11:41.978
let's just loosen things up a little
just to get moving again, right?

159
00:11:41.978 --> 00:11:45.450
To get the team unblocked cuz
we shouldn't be stopped by this.

160
00:11:45.450 --> 00:11:48.780
The whole point of TypeScript
is to improve your productivity.

161
00:11:48.780 --> 00:11:52.614
So it's not working if
it's slowing you down.

162
00:11:52.614 --> 00:11:56.212
This is how you could apply those
little tweaks and overrides.

163
00:11:56.212 --> 00:12:01.124
A local folder, I refer

164
00:12:01.124 --> 00:12:05.939
to this in a way that conflicts
with a misleading concept here.

165
00:12:05.939 --> 00:12:09.161
So I think if it as a local type of route,
but

166
00:12:09.161 --> 00:12:13.557
that is unrelated to the type
root option in the tsconfig.

167
00:12:13.557 --> 00:12:19.450
This is a local definitely-typed
scope to your project.

168
00:12:19.450 --> 00:12:22.698
This stuff will not be included
in your compiled output.

169
00:12:22.698 --> 00:12:26.237
You can think of it almost as
just like the little fixes and

170
00:12:26.237 --> 00:12:29.575
adjustments necessary to
get your project working.

171
00:12:31.939 --> 00:12:37.890
Another use case for this kind of
thing is something like this, global.

172
00:12:37.890 --> 00:12:45.962
And, You could do something in here,
like electron.

173
00:12:57.473 --> 00:13:00.720
So you can modify the global scope here.

174
00:13:02.240 --> 00:13:04.230
When might you wanna do this?

175
00:13:04.230 --> 00:13:09.590
You might use a Chrome-specific or
a Safari-specific API.

176
00:13:09.590 --> 00:13:13.600
I had to do this for a while with service
workers when it was still so experimental.

177
00:13:13.600 --> 00:13:17.220
It wasn't part of the declaration
files that come with TypeScript.

178
00:13:17.220 --> 00:13:19.167
But this is a place where
you can patch things up.

179
00:13:19.167 --> 00:13:21.829
You will need to do this, for example,

180
00:13:21.829 --> 00:13:27.647
if certain global's are made available to
code that runs inside a Node.JS sandbox.

181
00:13:27.647 --> 00:13:31.728
So if you're using sometimes like
Function as a Service type apps,

182
00:13:31.728 --> 00:13:35.394
they have a special environment
that's set up around them.

183
00:13:35.394 --> 00:13:39.924
And you might need to apply some types
that will accurately represent the things

184
00:13:39.924 --> 00:13:41.487
that you need to call into.

185
00:13:41.487 --> 00:13:45.004
So these are the kinds of tweaks
that you might have here.

186
00:13:45.004 --> 00:13:47.646
The key thing I want you
to take away from this is,

187
00:13:47.646 --> 00:13:50.040
don't get blocked by definitely-typed.

188
00:13:50.040 --> 00:13:54.940
And be aware that this is sort
of the rip chord you can pull if

189
00:13:54.940 --> 00:13:57.449
things aren't working out.

190
00:13:57.449 --> 00:14:01.626
You just don't want this to be a snag
that keeps you from being productive.

191
00:14:01.626 --> 00:14:06.741
And you can see that if this weren't
working, I could just delete this.

192
00:14:06.741 --> 00:14:10.724
And really quickly,
the compiler is gonna figure out,

193
00:14:10.724 --> 00:14:14.910
I should probably look at this
other thing, and here we go.

194
00:14:14.910 --> 00:14:17.000
Like you state, it's back.

195
00:14:17.000 --> 00:14:18.230
It's looked it up again.

196
00:14:18.230 --> 00:14:22.050
And now, it's found the node
modules version of the React types.

197
00:14:22.050 --> 00:14:22.550
There you go.

198
00:14:23.750 --> 00:14:26.550
So that's how I deal with pure
type information in my app.

