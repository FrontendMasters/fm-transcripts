WEBVTT

1
00:00:00.290 --> 00:00:04.970
So, the last little thing
I want to talk about

2
00:00:04.970 --> 00:00:10.460
in this retrospective of what we've
just done in this little library setup

3
00:00:10.460 --> 00:00:14.950
is the things that I referred
to as viral options.

4
00:00:14.950 --> 00:00:18.180
And those are, they're disabled.

5
00:00:18.180 --> 00:00:22.420
So it was sort of scanning for them.

6
00:00:22.420 --> 00:00:27.920
They're these two and this skipLibCheck.

7
00:00:27.920 --> 00:00:32.790
So let me move these cuz,
so they're all together.

8
00:00:32.790 --> 00:00:34.860
These three, I do not like.

9
00:00:37.430 --> 00:00:41.463
So let me explain what they do and
why I feel you don't need them.

10
00:00:43.092 --> 00:00:48.127
AllowSyntheticDefaultImports is all

11
00:00:48.127 --> 00:00:53.470
about CommonJS and ES module interrupt.

12
00:00:55.230 --> 00:01:04.457
So if we had something like this, Let's
say it's a JS file, are we allowing JS?

13
00:01:06.454 --> 00:01:11.338
We're gonna have to turn this on, oops.

14
00:01:13.778 --> 00:01:15.270
So I'm saying, allowJs.

15
00:01:15.270 --> 00:01:21.070
So here if I said function product a and

16
00:01:21.070 --> 00:01:26.570
b, return a*b.

17
00:01:26.570 --> 00:01:28.130
Let's document this nicely.

18
00:01:40.934 --> 00:01:47.659
All right, so
if this were Node, you do this.

19
00:01:49.572 --> 00:01:58.230
And it's not liking this because we'll
tell ES led to Jump in a lake here.

20
00:01:59.320 --> 00:02:02.140
All right, so
we have a CommonJS module here.

21
00:02:02.140 --> 00:02:04.760
Now if we wanted to use this elsewhere

22
00:02:06.250 --> 00:02:10.170
like in our subtract module,
we can go up here.

23
00:02:10.170 --> 00:02:13.250
If we had ES module interrupt
turned on we could do import.

24
00:02:14.980 --> 00:02:17.142
Actually this will work in both cases

25
00:02:23.131 --> 00:02:26.222
So this will be fine, and
there's our method, right?

26
00:02:26.222 --> 00:02:33.840
The type information is coming through,
we're not using it, okay, now we are.

27
00:02:33.840 --> 00:02:38.780
So this is fine, because this is like
a named export, this is where CommonJS and

28
00:02:38.780 --> 00:02:40.870
ES modules agree.

29
00:02:40.870 --> 00:02:42.970
I've got a collection of things and

30
00:02:42.970 --> 00:02:45.170
I'm making them available
to the outside world.

31
00:02:45.170 --> 00:02:47.564
Now, what if we had
a bunch of functions here?

32
00:02:47.564 --> 00:02:53.894
Like, has anyone here, show of hands,
who's used the FS module in Node.js,

33
00:02:53.894 --> 00:02:58.923
like for reading, writing to a file,
a lot of people, great.

34
00:02:58.923 --> 00:03:03.820
So, I might wanna use like
10 things from that module.

35
00:03:03.820 --> 00:03:05.770
I don't wanna import each
of those independently.

36
00:03:05.770 --> 00:03:06.460
Maybe, I don't.

37
00:03:06.460 --> 00:03:07.010
Let's say, I don't.

38
00:03:10.130 --> 00:03:12.864
So, I could grab the whole thing.

39
00:03:16.147 --> 00:03:19.217
As a namespace,
this is called a namespace import.

40
00:03:20.330 --> 00:03:23.920
Now, what ES module interrupt
would have let me do is this,

41
00:03:26.010 --> 00:03:31.560
it would convert this kind of export
as if it were sort of export default.

42
00:03:33.260 --> 00:03:37.760
I would rather not,

43
00:03:37.760 --> 00:03:42.420
in fact consumers of my library, cuz I
have a workaround, it's not that bad.

44
00:03:42.420 --> 00:03:44.760
It's a namespace import, no big deal.

45
00:03:44.760 --> 00:03:47.304
Where things get more interesting is this,

46
00:03:52.779 --> 00:03:55.012
All right, this is really nasty.

47
00:03:55.012 --> 00:03:59.720
My CommonJS module is
exporting one thing but

48
00:03:59.720 --> 00:04:05.210
it's clearly not a namespace,
and you can even see here like

49
00:04:07.230 --> 00:04:11.700
this error message unfortunately is
telling me I must turn this flag on,

50
00:04:12.830 --> 00:04:15.650
or else I must turn it on.

51
00:04:15.650 --> 00:04:20.690
But being a stubborn developer, I'm gonna
ignore that cuz in fact you can do this.

52
00:04:25.545 --> 00:04:28.018
Note that it is not a const declaration.

53
00:04:33.066 --> 00:04:35.532
Actually, I should rename
this at this point,

54
00:04:35.532 --> 00:04:38.340
[LAUGH] Cuz it's not a namespace anymore.

55
00:04:38.340 --> 00:04:43.020
So it's not a const declaration
it's import product = require.

56
00:04:44.220 --> 00:04:46.270
Good luck finding this
in the documentation.

57
00:04:46.270 --> 00:04:48.170
It works, it totally works.

58
00:04:48.170 --> 00:04:52.360
And it's a solution to this
problem that does not require

59
00:04:52.360 --> 00:04:56.390
that I leak this type information
out into consuming apps.

60
00:04:56.390 --> 00:05:00.930
I can insulate them from
this interrupt challenge.

61
00:05:00.930 --> 00:05:06.990
And at least in Node and
most run times this should work just fine.

62
00:05:08.980 --> 00:05:12.110
A little ugliness but
a small price to pay for

63
00:05:12.110 --> 00:05:16.760
making sure you don't expose
other people to these types.

64
00:05:18.200 --> 00:05:20.690
You don't want them having
to turn this flag on.

65
00:05:20.690 --> 00:05:25.647
And an important realization you have
to arrive at in order to understand why

66
00:05:25.647 --> 00:05:28.820
this is important is a type checking.

67
00:05:28.820 --> 00:05:32.790
It is a holistic and global operation.

68
00:05:32.790 --> 00:05:38.010
So your apps types are analyzed along
with all the dependency types and

69
00:05:38.010 --> 00:05:41.690
their dependency types,
everything's all solved at once.

70
00:05:41.690 --> 00:05:47.300
It's almost like a big linear algebra
problem where we're trying to like solve

71
00:05:47.300 --> 00:05:51.730
like a system of equations with
like matrix inversion, right.

72
00:05:51.730 --> 00:05:53.210
Everything is done at once.

73
00:05:54.560 --> 00:05:58.950
So if your library needs to do
weird stuff in order to compile,

74
00:05:58.950 --> 00:06:03.980
it's likely that consumers of the library
will need to do that same weird stuff.

75
00:06:03.980 --> 00:06:05.860
You want to protect them from that.

76
00:06:05.860 --> 00:06:07.530
You do not want to turn this flag on.

77
00:06:08.690 --> 00:06:12.540
If your types only compile when that
flag ES module interrupt is turned on,

78
00:06:13.740 --> 00:06:16.380
everyone who uses your library
will have to do the same and

79
00:06:16.380 --> 00:06:20.420
it just sort of seeps out,
but this is fine.

80
00:06:20.420 --> 00:06:26.460
And yes, I am telling you to take on tech
debt, before anyone asks that question.

81
00:06:26.460 --> 00:06:33.430
This is not something that has
a very clear path forward.

82
00:06:33.430 --> 00:06:38.080
However, I balanced that with the need for

83
00:06:38.080 --> 00:06:43.650
libraries to focus more on compatibility
compared to AppCode, right?

84
00:06:43.650 --> 00:06:47.227
If your library says, I support
all stable versions of Node, well,

85
00:06:47.227 --> 00:06:49.705
you'd better be testing
it against Node 10.

86
00:06:49.705 --> 00:06:53.938
At the time of recording this course,
that's the LTS, the oldest version,

87
00:06:53.938 --> 00:06:56.170
it has to keep working there.

88
00:06:56.170 --> 00:06:59.790
In fact, we'd probably better
build with that version of Node.

89
00:06:59.790 --> 00:07:05.260
That's our most challenging runtime
to maintain compatibility with.

90
00:07:05.260 --> 00:07:09.852
So libraries have to be a bit more
conservative about how eager they

91
00:07:09.852 --> 00:07:13.542
are to adopt new things like
whatever replaces this,

92
00:07:13.542 --> 00:07:17.314
which frankly is gonna be
modules that look like this.

93
00:07:21.771 --> 00:07:26.145
The solution to this is we just
don't use CommonJS anymore,

94
00:07:26.145 --> 00:07:28.040
we use ES modules in Node.

95
00:07:29.310 --> 00:07:31.030
But we're a long way off from that.

96
00:07:31.030 --> 00:07:33.590
There's a lot of CommonJS code out there.

97
00:07:33.590 --> 00:07:36.840
So, what's important is that
you understand how this works.

98
00:07:36.840 --> 00:07:39.110
Now, let me show you
the other side of this.

99
00:07:39.110 --> 00:07:41.820
If we were writing this
in a more modern way,

100
00:07:41.820 --> 00:07:44.230
let's say that this legacy
thing was a TypeScript file.

101
00:07:46.300 --> 00:07:48.320
This will really throw you for a loop.

102
00:07:48.320 --> 00:07:53.890
So, and I'm not showing you this
just like for weird trivia.

103
00:07:53.890 --> 00:07:58.470
This is stuff that hangs up,
cuz it's hang ups is a lot of people like,

104
00:07:58.470 --> 00:08:00.400
how do I deal with this?

105
00:08:00.400 --> 00:08:02.600
How do I type this correctly?

106
00:08:02.600 --> 00:08:07.380
I've answered this question countless
times with helping people at LinkedIn.

107
00:08:07.380 --> 00:08:09.270
So now I've just added types here.

108
00:08:09.270 --> 00:08:14.340
So we've converted this
legacy.js to legacy.ts and

109
00:08:14.340 --> 00:08:17.160
I'm getting like Unsafe member access.

110
00:08:17.160 --> 00:08:23.510
It really just does not like module
here but we can just do this.

111
00:08:25.470 --> 00:08:31.021
Another weird thing that you won't
find in the documentation Export =,

112
00:08:31.021 --> 00:08:36.060
that is the equivalent
of module.exports =.

113
00:08:36.060 --> 00:08:41.161
So I've just taught you
a way to make CommonJS work.

114
00:08:41.161 --> 00:08:47.821
Either exploiting a namespace like you'd
find with FS, in which case this here,

115
00:08:47.821 --> 00:08:52.760
oops, sorry, I'm modifying
the same file in two buffers.

116
00:08:54.560 --> 00:08:55.600
For fs, this is fine.

117
00:08:59.540 --> 00:09:08.420
This is fine, Because it's
a namespace that you're consuming.

118
00:09:08.420 --> 00:09:10.590
It's not just a function in and
of itself, but

119
00:09:10.590 --> 00:09:16.950
occasionally you will end up having to
consume something that is not a namespace.

120
00:09:16.950 --> 00:09:19.920
This is how you type it
in terms of the export.

121
00:09:19.920 --> 00:09:22.760
This is how you consume
it on the other side.

122
00:09:22.760 --> 00:09:25.732
And if, just to come full circle,

123
00:09:25.732 --> 00:09:29.842
if we just done this,
now we can go back to this.

124
00:09:34.991 --> 00:09:37.690
Actually in this case, it's even easier.

125
00:09:37.690 --> 00:09:38.700
Now you can go back to this.

126
00:09:39.720 --> 00:09:41.160
There is my product.

127
00:09:41.160 --> 00:09:45.768
So the only time you get to
that serious weirdness here,

128
00:09:45.768 --> 00:09:49.775
the thing you never seen before,
that is certainly not JavaScript.

129
00:09:49.775 --> 00:09:55.420
It is if you have a CommonJS
module whose single export

130
00:09:55.420 --> 00:10:00.008
is a non-namespace value
like a callable value,

131
00:10:00.008 --> 00:10:03.340
that is the weird, edgy,

132
00:10:03.340 --> 00:10:08.320
it's like a quarter of an edge where
you have to use this weirdness.

133
00:10:08.320 --> 00:10:11.070
Not often, but man, this throws people for

134
00:10:11.070 --> 00:10:16.500
some serious loops if they can't
identify the way to type this properly.

