WEBVTT

1
00:00:00.400 --> 00:00:03.880
The next thing we're gonna
do is set up TypeScript.

2
00:00:03.880 --> 00:00:10.710
So we've already installed TypeScript,
and I need a tsconfig.

3
00:00:10.710 --> 00:00:12.753
That's the next thing I need to do.

4
00:00:12.753 --> 00:00:16.364
TypeScript allows us to
set one up pretty easily.

5
00:00:16.364 --> 00:00:20.651
So we can do tsc or yarn tsc.

6
00:00:20.651 --> 00:00:24.660
This is only necessary if
you don't have volta, right?

7
00:00:24.660 --> 00:00:28.840
Cuz earlier we showed that tsc
it's sort of the right version

8
00:00:29.860 --> 00:00:33.760
with volta even without using that yarn,
but this will always work.

9
00:00:33.760 --> 00:00:37.353
So tsc -- init.

10
00:00:37.353 --> 00:00:45.042
This will create a boilerplate standard
tsconfig with some nice comments in here.

11
00:00:45.042 --> 00:00:49.710
Now, pro-tip, if you see a bunch
of red squiggles in this file for

12
00:00:49.710 --> 00:00:54.480
some reason, that's because comments
are not strictly allowed in JSON.

13
00:00:54.480 --> 00:00:58.590
So that's why if you look at
your different language modes

14
00:00:59.810 --> 00:01:05.990
in Visual Studio code, you have JSON and
then JSON C, C is for comment.

15
00:01:05.990 --> 00:01:07.554
So that's how you would fix that.

16
00:01:07.554 --> 00:01:13.219
You'd VS code,
please regard this file as a JSON C file.

17
00:01:13.219 --> 00:01:19.499
We're gonna have to make a few
changes here because frankly,

18
00:01:19.499 --> 00:01:26.760
this is a little bit too permissive
of a tsconfig for professional use.

19
00:01:26.760 --> 00:01:27.876
Especially for

20
00:01:27.876 --> 00:01:33.289
creating something where we're writing
TypeScript code from the start.

21
00:01:33.289 --> 00:01:36.013
So there's no advantage in
a sort of starting out loose and

22
00:01:36.013 --> 00:01:38.030
then cranking things up incrementally.

23
00:01:38.030 --> 00:01:40.490
If we were converting from
JavaScript to TypeScript,

24
00:01:40.490 --> 00:01:42.240
that's exactly what we wanna do.

25
00:01:42.240 --> 00:01:47.160
But I wanna start by setting the bar high.

26
00:01:47.160 --> 00:01:50.390
So target, this property here is

27
00:01:50.390 --> 00:01:55.060
the language level that we
wish to support, right?

28
00:01:56.320 --> 00:02:00.370
So this is what we're compiling out to

29
00:02:01.900 --> 00:02:06.260
is not necessarily the language
level that is allowed in your code.

30
00:02:06.260 --> 00:02:09.562
This is what is your output, right?

31
00:02:09.562 --> 00:02:14.010
So ES2018, for example,
will include a sync and await.

32
00:02:14.010 --> 00:02:19.730
It won't try to collapse that down and
make it so it runs even in IE11.

33
00:02:19.730 --> 00:02:21.230
That's what target is all about.

34
00:02:21.230 --> 00:02:26.520
Module, this is the output module type.

35
00:02:26.520 --> 00:02:28.310
We wanna change a couple
other things here.

36
00:02:28.310 --> 00:02:33.170
So our output directory, we're gonna
look for out for outDir, here it is.

37
00:02:33.170 --> 00:02:36.020
And I want this to be my dist folder.

38
00:02:36.020 --> 00:02:36.770
Why?

39
00:02:36.770 --> 00:02:43.130
Because by default, TypeScript will
put the compiled output JavaScript and

40
00:02:43.130 --> 00:02:47.720
the declaration file,
as siblings of the TypeScript input file.

41
00:02:47.720 --> 00:02:53.320
This makes it more complicated than
I like if I wanna build output away,

42
00:02:53.320 --> 00:02:55.972
get rid of it, and sort of start clean.

43
00:02:55.972 --> 00:02:58.560
It's kinda all mixed together
in my source folder.

44
00:02:58.560 --> 00:03:03.360
So I like having a folder that I
can just rm, rf, get rid of it.

45
00:03:03.360 --> 00:03:06.840
We've got our source and
we better build output separate.

46
00:03:06.840 --> 00:03:09.540
So it's all gonna end up
in the dist folder here.

47
00:03:09.540 --> 00:03:12.870
rootDir, so this is important.

48
00:03:14.090 --> 00:03:16.760
We're gonna set this to source.

49
00:03:16.760 --> 00:03:23.430
This controls the output, the sorry, the
folder structure within the dist folder.

50
00:03:23.430 --> 00:03:27.815
So it means that if I
have source index.ts,

51
00:03:27.815 --> 00:03:31.570
I'm gonna have dist index.js.

52
00:03:31.570 --> 00:03:36.320
I don't want a source folder
as a sub folder of dist.

53
00:03:36.320 --> 00:03:39.720
And this is how I would address that.

54
00:03:39.720 --> 00:03:42.080
At the bottom here, I'm gonna add include.

55
00:03:43.350 --> 00:03:49.970
So this is where we're saying, I want to
include all files within my source folder.

56
00:03:49.970 --> 00:03:54.790
Now is a good time by the way to, oops,

57
00:03:54.790 --> 00:03:59.782
to make that folder, make dir source.

58
00:04:01.920 --> 00:04:07.710
[COUGH] So just

59
00:04:07.710 --> 00:04:12.730
follow the notes here, we've got the right
target, we've got the right module type.

60
00:04:15.680 --> 00:04:18.510
Okay, two things I wanna disable here.

61
00:04:19.660 --> 00:04:21.310
We've got esModuleInterrupt.

62
00:04:22.350 --> 00:04:26.940
So I'll talk a bit more about this later.

63
00:04:28.470 --> 00:04:32.468
But we wanna disable this,
it's disabled by default.

64
00:04:32.468 --> 00:04:36.790
But we wanna opt out of this, and
there's a skipLibCheck down here.

65
00:04:36.790 --> 00:04:39.730
So these two things,
I'll tell you what they do.

66
00:04:39.730 --> 00:04:45.144
esModuleInterrupt, this
allows you to treat

67
00:04:45.144 --> 00:04:50.279
common.js modules as
if they have a default

68
00:04:50.279 --> 00:04:55.153
esModuleExport, like export default.

69
00:04:55.153 --> 00:04:59.442
Common.js modules,
where you're using like module.exports,

70
00:04:59.442 --> 00:05:02.040
they don't have export default.

71
00:05:02.040 --> 00:05:04.905
So this enables support for that.

72
00:05:04.905 --> 00:05:10.486
Unfortunately, if your types only
work when this flag is turned on, and

73
00:05:10.486 --> 00:05:16.840
you have a library, anyone who consumes
this library must also turn this on.

74
00:05:16.840 --> 00:05:22.030
And I don't like to force this
decision on consumers of my libraries,

75
00:05:22.030 --> 00:05:23.860
there are workarounds.

76
00:05:23.860 --> 00:05:26.320
So we can still leave choices for

77
00:05:26.320 --> 00:05:31.065
people who use this library as
long as we leave this disabled.

78
00:05:31.065 --> 00:05:34.859
skipLibCheck this is, [COUGH] so

79
00:05:34.859 --> 00:05:39.360
it does not check declaration files.

80
00:05:40.460 --> 00:05:41.560
Let me say this a different way.

81
00:05:43.580 --> 00:05:48.240
If things are broken in
the types you consume

82
00:05:48.240 --> 00:05:52.420
to build this library,
those errors will be ignored.

83
00:05:54.630 --> 00:05:58.386
Now, this might be appropriate
to enable for an app,

84
00:05:58.386 --> 00:06:01.150
I would argue probably not even there.

85
00:06:01.150 --> 00:06:05.050
But certainly don't wanna enable it for
a library, I would think.

86
00:06:05.050 --> 00:06:09.320
Given that if you hit errors here and
you're forced to flip this on and

87
00:06:09.320 --> 00:06:13.205
say, don't type check
my node modules types.

88
00:06:13.205 --> 00:06:16.560
Look, any types you find in node modules,
don't worry about type checking those.

89
00:06:16.560 --> 00:06:19.364
If you have to turn this on in
order to get things to work,

90
00:06:19.364 --> 00:06:23.079
anyone who consumes your library is
likely to have to turn this on as well.

91
00:06:23.079 --> 00:06:28.903
So I call these like viral options in
that if you flip these switches for

92
00:06:28.903 --> 00:06:35.430
your library, you're kind of infecting
any app that consumes this library.

93
00:06:35.430 --> 00:06:41.510
They have to turn this on now, and there
are good reasons to wanna leave them off.

94
00:06:41.510 --> 00:06:43.110
So I would prefer to leave them off and

95
00:06:43.110 --> 00:06:46.050
see how far we can get,
turns out nothing's really in our way.

96
00:06:47.720 --> 00:06:52.010
Next thing I wanna do is,
I'm looking for declaration.

97
00:06:52.010 --> 00:06:52.990
Here it is.

98
00:06:52.990 --> 00:06:55.850
So because we're building a library,
I wanna make sure that

99
00:06:55.850 --> 00:07:00.720
we're generating those DTS files,
these type information files.

100
00:07:00.720 --> 00:07:02.803
So we'll turn that on.

101
00:07:02.803 --> 00:07:07.770
And then finally, let's talk about
the the sort of strictness settings.

102
00:07:07.770 --> 00:07:10.260
So we've got this strict to true.

103
00:07:10.260 --> 00:07:13.690
Now here's an interesting question for
the class.

104
00:07:13.690 --> 00:07:18.610
Who here feels they have
a very good handle on what

105
00:07:18.610 --> 00:07:21.732
exactly strict mode entails?

106
00:07:21.732 --> 00:07:23.706
When you say strict to,

107
00:07:23.706 --> 00:07:29.449
hands up if you feel like you could
name every option that it affects?

108
00:07:29.449 --> 00:07:31.450
I see zero hands.

109
00:07:31.450 --> 00:07:33.860
And I'm not putting my hand up either,

110
00:07:33.860 --> 00:07:36.780
because this changes
from release to release.

111
00:07:36.780 --> 00:07:42.630
And it turns out that like one
reasonable assumption you can make is,

112
00:07:42.630 --> 00:07:47.380
it's all the options that
begin with the word strict.

113
00:07:47.380 --> 00:07:51.280
But it turns out, noImplicitAny,
nImplicitThis, and

114
00:07:51.280 --> 00:07:55.120
alwaysStrict, they're also turned
on when you say strict to true.

115
00:07:55.120 --> 00:07:59.270
So if you go look in the notes,
and actually,

116
00:07:59.270 --> 00:08:04.080
when we dive into this a little bit
deeper, there's a link later on when we

117
00:08:04.080 --> 00:08:08.130
start talking about migrating
from JavaScript to TypeScript.

118
00:08:08.130 --> 00:08:14.260
I'd like you to the actual place in the
source code where you can see exactly for

119
00:08:14.260 --> 00:08:18.880
a given version of the compiler,
what strict actually means.

120
00:08:18.880 --> 00:08:22.490
So I'll tell you what this means
right now, and it's in the notes.

121
00:08:22.490 --> 00:08:25.575
This is for TypeScript 4.0,
at least this is what strict mode means.

122
00:08:25.575 --> 00:08:29.355
But if you're using a newer version,
it could mean something different.

123
00:08:29.355 --> 00:08:34.077
So this is noImplicitAny,
noImplicitThis, strictNullChecks,

124
00:08:34.077 --> 00:08:38.811
FunctionTypes, BindCallApply,
and PropertyInitialization.

125
00:08:38.811 --> 00:08:43.792
And then alwaysStrict, that's not really
an enforcement mechanism in terms

126
00:08:43.792 --> 00:08:46.290
of like cranking up the type checking.

127
00:08:47.370 --> 00:08:51.980
It's a use strict in the JavaScript sense,

128
00:08:51.980 --> 00:08:57.840
meaning certain language features are only
available in strict mode JavaScript.

129
00:08:57.840 --> 00:09:02.530
And so
we're saying we're always using that mode,

130
00:09:02.530 --> 00:09:06.670
like everything is gonna be in
a use strict JavaScript context.

131
00:09:07.850 --> 00:09:09.770
So we'll start with strict true.

132
00:09:09.770 --> 00:09:14.020
And then I like some of these these
things that have been added recently,

133
00:09:14.020 --> 00:09:16.770
like noUnusedLocals and Parameters.

134
00:09:16.770 --> 00:09:19.230
So I could have my linter
pick up on these, right?

135
00:09:19.230 --> 00:09:22.970
There certainly es lint rules
that pick these things up,

136
00:09:22.970 --> 00:09:26.530
in particular this
noUnusedParameters option.

137
00:09:26.530 --> 00:09:33.290
I feel like TypeScript support is
a bit better at default configuration.

138
00:09:33.290 --> 00:09:38.540
In that you can use underscores for
unused function arguments, and

139
00:09:38.540 --> 00:09:42.660
that's taken as like this is not unused,

140
00:09:42.660 --> 00:09:47.050
it's necessary, cuz I want the third
argument of the function, right?

141
00:09:47.050 --> 00:09:51.690
So you can use patterns found in other
languages like a leading underscore

142
00:09:51.690 --> 00:09:54.820
to suppress these warnings.

143
00:09:54.820 --> 00:09:58.230
Whereas with es lint requires a little
bit more of a tricky configuration to get

144
00:09:58.230 --> 00:09:59.470
that kind of thing.

145
00:09:59.470 --> 00:10:06.210
So I let TypeScript do all of
this unused detection stuff.

146
00:10:06.210 --> 00:10:09.221
And so we'll enable those three.

147
00:10:11.984 --> 00:10:18.570
And then let's see,
is this even in the files?

148
00:10:18.570 --> 00:10:21.860
So there's a secret,
this is like in and out burger here.

149
00:10:21.860 --> 00:10:24.967
We have the super secret menu,
stripInternal.

150
00:10:28.624 --> 00:10:31.215
This is not part of their template.

151
00:10:31.215 --> 00:10:36.316
So what stripInternal does is
if we use a js doc annotation

152
00:10:36.316 --> 00:10:41.754
at internal on a function or
something or anything, right?

153
00:10:41.754 --> 00:10:46.380
That type information will be
carved out of the declaration file.

154
00:10:46.380 --> 00:10:50.060
So maybe there's a function
that we export for type, sorry,

155
00:10:50.060 --> 00:10:54.590
for testing purposes, like an internal
function, but we still wanna unit test it.

156
00:10:54.590 --> 00:10:57.530
So we have to export it, so
our types can import it.

157
00:10:57.530 --> 00:11:02.930
But this one sure that no consumers
of the library even see that.

158
00:11:02.930 --> 00:11:07.481
It's stripped out,
if we mark it as internal, stripInternal.

159
00:11:10.329 --> 00:11:13.960
This is a new option
forceConsistentCasingInFileNames.

160
00:11:13.960 --> 00:11:19.637
This is important if you're
working on Windows where

161
00:11:19.637 --> 00:11:26.702
the case of different cases in your
file system like capital A App,

162
00:11:26.702 --> 00:11:32.550
or lowercase app is all
pointing to the same place.

163
00:11:32.550 --> 00:11:36.239
So having this flag
enabled is a good idea.

164
00:11:36.239 --> 00:11:40.995
So that you don't end up creating
things on a Mac that just will

165
00:11:40.995 --> 00:11:42.830
never work on Windows.

166
00:11:42.830 --> 00:11:47.920
Because Windows thinks that it
ignores case when dealing with files.

167
00:11:49.780 --> 00:11:54.260
One last check here, one last
modification, and it's this, types.

168
00:11:54.260 --> 00:11:56.740
So this is important.

169
00:11:58.160 --> 00:12:02.570
This is, and I wish it was a little
more powerful than it is right now.

170
00:12:02.570 --> 00:12:05.950
But here's what I'm trying
to accomplish by doing this.

171
00:12:08.050 --> 00:12:15.770
By default, anything found in
node modules/at types, right?

172
00:12:15.770 --> 00:12:21.010
All of that is available for auto import
when I'm writing my TypeScript code.

173
00:12:21.010 --> 00:12:27.340
And if any of that type information makes
modification to the global scope, right?

174
00:12:27.340 --> 00:12:31.530
And I'm talking about like
window in a browser or

175
00:12:31.530 --> 00:12:36.740
process in a node application,
all of that will be applied.

176
00:12:36.740 --> 00:12:42.940
So if I have just installed here,
I have just types and

177
00:12:42.940 --> 00:12:48.020
modifications to the global scope in my
source code, not just in my test code.

178
00:12:49.300 --> 00:12:51.940
I wanna have pretty strict control

179
00:12:51.940 --> 00:12:55.310
over what I'm allowed to
use in my source folder.

180
00:12:55.310 --> 00:12:58.130
And I wish that I had some
more powerful ways of

181
00:12:59.410 --> 00:13:03.710
banning the use of certain kinds
of things in my source folder.

182
00:13:03.710 --> 00:13:08.119
Ideally, it should be,
if it's dev dependency,

183
00:13:08.119 --> 00:13:12.127
it's probably not gonna
be there at runtime.

184
00:13:12.127 --> 00:13:15.806
Just cuz I have some things that are
needed for the builds, that are needed for

185
00:13:15.806 --> 00:13:17.240
running my tests.

186
00:13:17.240 --> 00:13:20.550
That's not part of my library.

187
00:13:20.550 --> 00:13:22.540
So I shouldn't have access to those types.

188
00:13:22.540 --> 00:13:24.370
So I'd like to start
with a clean slate here.

189
00:13:24.370 --> 00:13:27.740
Now, I can still explicitly import them,
but

190
00:13:27.740 --> 00:13:30.090
they will be available in autocomplete.

191
00:13:30.090 --> 00:13:35.060
And they won't touch the global scope,
if I leave this as an empty array.

192
00:13:37.640 --> 00:13:43.320
Last thing I wanna do here is,
Make a source file.

193
00:13:43.320 --> 00:13:45.235
So I'm just gonna make index.ts.

194
00:13:47.297 --> 00:13:50.393
If you're following along in the notes,

195
00:13:50.393 --> 00:13:54.470
there is some content that
you can just copy and paste.

196
00:13:54.470 --> 00:13:58.827
So I'm just gonna grab that
from the notes themselves.

197
00:14:02.596 --> 00:14:03.470
And here they are.

198
00:14:06.150 --> 00:14:10.210
It's just a couple functions
like some calculator functions.

199
00:14:11.290 --> 00:14:13.716
We're ready to kinda kick the tires.

200
00:14:15.598 --> 00:14:16.849
And let's see if this works.

201
00:14:18.210 --> 00:14:20.035
Let's try yarn build.

202
00:14:22.167 --> 00:14:26.812
Before I run this command,
note that I have no dist folder.

203
00:14:26.812 --> 00:14:27.757
Not yet.

204
00:14:35.838 --> 00:14:38.819
All right, so now I do have a dist folder.

205
00:14:38.819 --> 00:14:43.760
And as promised,
there's no source sub folder in here.

206
00:14:43.760 --> 00:14:46.740
So I'll show you what this
would have looked like

207
00:14:46.740 --> 00:14:49.720
if I did not use this rootDir option.

208
00:14:49.720 --> 00:14:53.445
If I comment this out and rebuild,

209
00:15:02.252 --> 00:15:05.780
Maybe things are a bit smarter
than I thought these days.

210
00:15:05.780 --> 00:15:07.720
Let's set it to the home directory.

211
00:15:11.399 --> 00:15:12.410
There we go.

212
00:15:12.410 --> 00:15:17.080
So at least for some versions of the
compiler, the default root directory is

213
00:15:17.080 --> 00:15:22.230
your Git repos top level folder.

214
00:15:22.230 --> 00:15:24.260
And you see the shape
of your dist directory.

215
00:15:24.260 --> 00:15:26.410
So these are here from
the previous builds.

216
00:15:26.410 --> 00:15:28.102
We can delete those.

217
00:15:28.102 --> 00:15:31.640
But now, this is not an ideal
structure of your output,

218
00:15:31.640 --> 00:15:35.890
like that source folder is
not doing anything for users.

219
00:15:35.890 --> 00:15:38.600
So that's why we had this option here.

220
00:15:38.600 --> 00:15:40.273
Just so you understand what that does.

221
00:15:46.898 --> 00:15:49.000
All right, and let's look at our output.

222
00:15:49.000 --> 00:15:51.260
So we've got our JavaScript.

223
00:15:51.260 --> 00:15:56.317
And we can see that this has obviously

224
00:15:56.317 --> 00:16:03.016
been converted to a common.js module,
right?

225
00:16:03.016 --> 00:16:05.780
Cuz we've got exports dot something.

226
00:16:07.500 --> 00:16:11.540
Everything else is maintained, and

227
00:16:11.540 --> 00:16:14.780
if we look at our declaration file,
the documentation is in there,

228
00:16:14.780 --> 00:16:18.150
but we just have the function
types without the bodies.

229
00:16:19.270 --> 00:16:22.965
And I want you to note, we've got average.

230
00:16:22.965 --> 00:16:26.301
I can show you this outline here,
average in sum3.

231
00:16:26.301 --> 00:16:30.930
But if we look at our JavaScript folder,
sum2 is still in there.

232
00:16:30.930 --> 00:16:34.940
So what you're seeing is
that internal function,

233
00:16:34.940 --> 00:16:38.560
which I may have needed to export so
that I can test it.

234
00:16:38.560 --> 00:16:40.480
It's not part of the type information now.

235
00:16:41.880 --> 00:16:47.370
So in theory, someone could import it, but
I'm not suggesting that they import it.

236
00:16:47.370 --> 00:16:48.860
I'm not giving them an autocomplete.

237
00:16:50.140 --> 00:16:51.150
So it's kind of on them.

238
00:16:52.450 --> 00:16:55.481
I can lead with an underscore or
something to make it even more clear.

