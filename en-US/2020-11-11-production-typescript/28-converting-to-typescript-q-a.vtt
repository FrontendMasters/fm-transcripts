WEBVTT

1
00:00:00.130 --> 00:00:04.620
You said that you use capital I
in front of our interfaces name.

2
00:00:04.620 --> 00:00:08.960
I remember that the TypeScript team
decided to walk away from this.

3
00:00:08.960 --> 00:00:13.730
&gt;&gt; Yep, so they decided to do that for
their own codebase.

4
00:00:15.240 --> 00:00:21.430
Personally, I find value in having

5
00:00:21.430 --> 00:00:27.650
more explicit visibility into
the various things that I'm using.

6
00:00:27.650 --> 00:00:31.040
Like the minute that the VS code team

7
00:00:31.040 --> 00:00:33.790
allows this kind of thing to
be highlighted differently,

8
00:00:33.790 --> 00:00:38.850
like visibly an interface on the screen,
then I don't need my capital I anymore.

9
00:00:38.850 --> 00:00:44.528
But I do see a lot of value in being able
to differentiate between a class, and

10
00:00:44.528 --> 00:00:50.412
an interface, and a type alias, all of
which could be used interchangeably.

11
00:00:50.412 --> 00:00:54.150
But in one case, I'm crossing a lazy
loading boundary, if I bring a class in,

12
00:00:54.150 --> 00:00:55.560
and if I import that.

13
00:00:55.560 --> 00:01:01.580
And in another I'm not I just see
enough value in being able to spot that

14
00:01:01.580 --> 00:01:06.990
in my code that I personally
continue this pattern.

15
00:01:06.990 --> 00:01:13.080
Although this is like semi-colons, they're
not semi-colons, maybe not that trivial.

16
00:01:13.080 --> 00:01:17.340
But there are many valid opinions

17
00:01:17.340 --> 00:01:19.760
on this topic I'm just here
to say that this is mine.

18
00:01:20.840 --> 00:01:27.030
&gt;&gt; What if I add tons of types, I get
some giant file, is that's the approach?

19
00:01:27.030 --> 00:01:31.460
&gt;&gt; So the question we got in the class
was, what if we have lots and

20
00:01:31.460 --> 00:01:32.600
lots of types?

21
00:01:32.600 --> 00:01:39.056
Do we just have one big type.ts file,
and did we let this get to be 5,000,

22
00:01:39.056 --> 00:01:44.600
6,000 lines long and if not,
how do we organize things?

23
00:01:44.600 --> 00:01:50.800
The important takeaway here is,
you should have four commonly used types.

24
00:01:50.800 --> 00:01:54.440
One or more files which could be
organized into folders, however,

25
00:01:54.440 --> 00:01:55.550
it makes the most sense to you.

26
00:01:55.550 --> 00:02:04.870
But those files are dedicated
to strictly type information.

27
00:02:04.870 --> 00:02:09.130
And the reason that you wanna keep
things that way is there is zero

28
00:02:10.250 --> 00:02:14.650
asset size ramification or
close to zero, right?

29
00:02:14.650 --> 00:02:18.740
For importing this type information,
as soon as you add other stuff to these

30
00:02:18.740 --> 00:02:24.630
files, like if I were to move
the guards here, like is I team.

31
00:02:24.630 --> 00:02:29.350
If that lived in types.ts, well,
somebody that just needed IMessage,

32
00:02:29.350 --> 00:02:33.320
they're they're now paying the price
of having several of these functions

33
00:02:33.320 --> 00:02:37.800
bundled together just cuz they needed
to refer to a particular type.

34
00:02:37.800 --> 00:02:41.930
I mean, potentially,
a lot of these bundling tools are not so

35
00:02:41.930 --> 00:02:47.100
sophisticated that they can
shake away portions of modules

36
00:02:47.100 --> 00:02:52.420
that are unused it's generally like
an entire module is included or it's not.

37
00:02:52.420 --> 00:02:57.140
And when you have modules that
are exclusively designated as places for

38
00:02:57.140 --> 00:03:02.020
type information, you can feel very
comfortable reaching in there,

39
00:03:02.020 --> 00:03:03.970
grabbing this interface out.

40
00:03:03.970 --> 00:03:09.700
And at worst, you get the cost of an empty
module, included with your bundle,

41
00:03:09.700 --> 00:03:14.280
which will just sort of be a module
with no exports at runtime.

42
00:03:14.280 --> 00:03:18.710
And that can even be stripped away if you
bother to configure your tooling to do so,

43
00:03:18.710 --> 00:03:20.920
does that make sense?

44
00:03:20.920 --> 00:03:26.590
So the thing to optimize for
is keeping almost zero overhead

45
00:03:26.590 --> 00:03:31.420
of nearly everything referencing

46
00:03:31.420 --> 00:03:35.329
these types.ts file and
other files like it, right?

47
00:03:36.540 --> 00:03:39.500
No asset has ramifications and

48
00:03:39.500 --> 00:03:44.190
the way to do that, there should be no
values in these modules, only types.

49
00:03:44.190 --> 00:03:48.260
A question from the class was,
we have all these config files, right?

50
00:03:48.260 --> 00:03:53.235
We've got eslint,
I even have .postcss and .prettierrc,

51
00:03:53.235 --> 00:03:57.810
and babel.config,
all this in the root directory.

52
00:03:57.810 --> 00:04:01.540
Can we make a folder and
start hiding some of this stuff away,

53
00:04:02.860 --> 00:04:07.500
the answer is some of it can be
hidden away, a lot of it can't.

54
00:04:07.500 --> 00:04:08.980
And the reason is,

55
00:04:08.980 --> 00:04:13.340
editors look to discover these kinds
of files in particular places.

56
00:04:13.340 --> 00:04:19.100
And the the benefit you get from sort
of hiding them away like that is not

57
00:04:19.100 --> 00:04:25.280
extremely high compared to
the work required to sort of

58
00:04:25.280 --> 00:04:30.980
teach these tools where to look other than
the default location for their configs.

59
00:04:30.980 --> 00:04:35.840
And I'll tell you, even if you bothered
to go and straighten that out,

60
00:04:35.840 --> 00:04:41.400
you would put yourself in a very
small subset of users of these tools.

61
00:04:41.400 --> 00:04:46.740
Where these are options and setups that
are just way more likely to break,

62
00:04:46.740 --> 00:04:52.300
than the simple mainstream use case and
so you're exposing yourself to more risk.

63
00:04:52.300 --> 00:04:55.802
Here's what I would do instead,

64
00:04:55.802 --> 00:05:00.428
I would create a workspace
VS code config and

65
00:05:00.428 --> 00:05:07.119
I would say you wanna ignore files See?

66
00:05:09.513 --> 00:05:11.827
So let me see if I can make this work.

67
00:05:22.383 --> 00:05:27.360
I'm actually pretty sure we do this
at least in my VS code course,

68
00:05:27.360 --> 00:05:32.660
I'm not sure if Burke does it in his,
well, more up to date one.

69
00:05:32.660 --> 00:05:37.190
But there's a way that you can tell
VS code in your settings here to just

70
00:05:37.190 --> 00:05:40.560
don't show you the babel.rc,
don't show you this, don't show you that.

71
00:05:40.560 --> 00:05:43.490
Or you could even map them into another

72
00:05:43.490 --> 00:05:46.092
folder in your workspace to just
sort of get them out of the way.

73
00:05:46.092 --> 00:05:49.100
You have the TLDR here is,

74
00:05:52.960 --> 00:05:56.010
I would never want to move these
away from their default location,

75
00:05:56.010 --> 00:05:58.620
I think it's more risk,
more trouble than it's worth.

76
00:05:58.620 --> 00:06:03.220
And if you're working on a big
project like a TypeScript project,

77
00:06:03.220 --> 00:06:06.160
you're charging money for,
that has a lot of people working on it.

78
00:06:06.160 --> 00:06:07.860
You're gonna have a lot
of this stuff anyway,

79
00:06:07.860 --> 00:06:10.310
there's just no running from that problem.

80
00:06:10.310 --> 00:06:15.270
So the question was, how do we make sure

81
00:06:15.270 --> 00:06:21.220
that our as our interfaces evolve,
the guards evolve to match them?

82
00:06:21.220 --> 00:06:24.090
Which is a good question to ask because

83
00:06:24.090 --> 00:06:27.910
I pointed out that this is
a high-risk part of your codebase.

84
00:06:27.910 --> 00:06:32.670
If you bake lies into
your type information,

85
00:06:32.670 --> 00:06:37.420
TypeScript will believe your lies,
and you will suffer because of that.

86
00:06:37.420 --> 00:06:42.880
So I'm gonna answer that in a moment,
actually in the next section,

87
00:06:42.880 --> 00:06:46.420
it's a great segue with tests for types.

88
00:06:46.420 --> 00:06:49.850
So the way we're gonna solve
that is with a test suite for

89
00:06:49.850 --> 00:06:51.810
this type information that we just made.

90
00:06:53.120 --> 00:06:59.930
So all I'm gonna do here is export them
and then we'll carry this forward.

91
00:06:59.930 --> 00:07:07.150
So the question is, if I encounter
a problem with types of my dependencies,

92
00:07:07.150 --> 00:07:12.010
I have fixes in my local types folder and
then I published my library.

93
00:07:12.010 --> 00:07:13.560
Won't that be a problem for

94
00:07:13.560 --> 00:07:18.460
consumers of my library and the answer is,
absolutely yes, it will be.

95
00:07:18.460 --> 00:07:23.370
However, this would allow you to keep
working on master, to keep merging

96
00:07:23.370 --> 00:07:28.320
pull requests, to keep moving forward
without cutting a release, right?

97
00:07:28.320 --> 00:07:31.350
And generally this is just
to get you unblocked,

98
00:07:31.350 --> 00:07:34.920
you definitely wanna
pay attention to this.

99
00:07:34.920 --> 00:07:38.310
And you wanna make sure that you're
not inflicting pain on your customers.

100
00:07:38.310 --> 00:07:44.070
Cuz as I said before,
this types.ts, this is included,

101
00:07:44.070 --> 00:07:48.330
this would be included with your library,
right, it's a module just like any other.

102
00:07:49.890 --> 00:07:54.930
This stuff here you can think of this
this little place for local overrides,

103
00:07:54.930 --> 00:08:00.560
this is just hacks and adjustments needed
in order to make your library compile.

104
00:08:00.560 --> 00:08:04.120
So actually, let me walk back
my answer slightly cuz I said

105
00:08:04.120 --> 00:08:06.480
absolutely it'll break off your users.

106
00:08:06.480 --> 00:08:11.080
It will absolutely break
your users if the types that

107
00:08:11.080 --> 00:08:15.690
are exported,
your public facing API surface

108
00:08:15.690 --> 00:08:21.050
include stuff that relies on
those overrides in order to work.

109
00:08:21.050 --> 00:08:24.830
Then you'll have a problem, but if it's
something that's just sort of the private

110
00:08:24.830 --> 00:08:30.100
implementation details like you need to
use this new feature on service worker,

111
00:08:30.100 --> 00:08:32.840
an t's not something that's typed yet.

112
00:08:32.840 --> 00:08:34.070
But as long as it's hidden and

113
00:08:34.070 --> 00:08:37.890
it doesn't come out in your declaration
files, no one's gonna feel that pain.

114
00:08:37.890 --> 00:08:42.800
You do need to pay attention to it,
sometimes you can get away with it.

115
00:08:42.800 --> 00:08:45.300
And the way I would try to make it work

116
00:08:47.530 --> 00:08:51.830
I only have bad hacks to
offer you in this space.

117
00:08:51.830 --> 00:08:56.340
I would say, see if you can get
your fixes merged for real and

118
00:08:56.340 --> 00:09:00.940
then remove your hacks, make sure
everything works, then cut a release.

119
00:09:00.940 --> 00:09:02.950
And if it's breaking for you,
it's probably breaking for

120
00:09:02.950 --> 00:09:04.160
a lot of other people.

121
00:09:04.160 --> 00:09:06.953
Usually a lot of motivation
to get this stuff fixed, but

122
00:09:06.953 --> 00:09:09.754
the problems are extremely
tricky to solve sometimes.

