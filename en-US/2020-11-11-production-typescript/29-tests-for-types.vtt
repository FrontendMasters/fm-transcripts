WEBVTT

1
00:00:00.000 --> 00:00:03.804
It's important to realize that type
information, these interfaces.

2
00:00:03.804 --> 00:00:09.087
This assertIsTypedArray thing that we

3
00:00:09.087 --> 00:00:14.055
just made in the teams file, right?

4
00:00:14.055 --> 00:00:20.200
Assert is typed array, this needs tests
just like anything else needs tests.

5
00:00:21.390 --> 00:00:26.550
And it's a different kind of test to
write because the type information

6
00:00:26.550 --> 00:00:31.455
is not imperative code that's executed
line by line by line by line.

7
00:00:31.455 --> 00:00:36.110
[LAUGH] The way I think about it,
it's like a balloon animal

8
00:00:36.110 --> 00:00:38.955
where if you squeeze one side,
the other side puffs up and

9
00:00:38.955 --> 00:00:42.232
you squeeze the other side, so
there's no sense of ordering.

10
00:00:42.232 --> 00:00:46.530
It's more, we check to make sure
everything is lined up in one step.

11
00:00:46.530 --> 00:00:49.100
There's no time aspect to it in terms of

12
00:00:49.100 --> 00:00:51.490
some things are executed
before other things.

13
00:00:51.490 --> 00:00:53.910
It's just a set of constraints.

14
00:00:53.910 --> 00:00:57.550
And in one big step,
we see if everything lines up.

15
00:00:57.550 --> 00:01:02.290
So it's a little counterintuitive
to debug things just

16
00:01:02.290 --> 00:01:05.090
because we're not used to
thinking about code in this way.

17
00:01:05.090 --> 00:01:07.764
However, tests are a great tool,

18
00:01:07.764 --> 00:01:12.200
both in terms of protecting
your code from regressions.

19
00:01:12.200 --> 00:01:17.623
And in terms of getting to
the bottom of mysterious problems

20
00:01:17.623 --> 00:01:23.153
by sort of taking a big chunk of
things that are not working and

21
00:01:23.153 --> 00:01:30.201
sort of doing a bisection search where
you write some tests because you know,

22
00:01:30.201 --> 00:01:34.769
okay, this works, or
this case here has to work.

23
00:01:34.769 --> 00:01:38.551
Write a bunch of tests and then you can
sort of narrow down where the cause of

24
00:01:38.551 --> 00:01:41.122
the problem is,
as you attempt different fixes.

25
00:01:41.122 --> 00:01:44.072
So tests are really, really,

26
00:01:44.072 --> 00:01:49.753
really important aspect of
a healthy TypeScript project.

27
00:01:49.753 --> 00:01:57.690
Of course,
you can write tests in TypeScript.

28
00:01:57.690 --> 00:02:04.090
Like we have these tests written with Jest
but these are only positive test cases.

29
00:02:04.090 --> 00:02:07.400
They're things that should work and
do work.

30
00:02:08.960 --> 00:02:14.130
It's really hard with this existing tool
to write things that shouldn't work and

31
00:02:14.130 --> 00:02:15.540
must not work.

32
00:02:15.540 --> 00:02:18.750
These kinds of tests are important too,
the negative test cases.

33
00:02:18.750 --> 00:02:23.530
And if we were to just throw those
in to Jest, into the test suite for

34
00:02:23.530 --> 00:02:28.920
values like react components,
the compiler would break,

35
00:02:28.920 --> 00:02:30.520
it would say, I can't run your tests.

36
00:02:30.520 --> 00:02:32.660
There's a compiler error, right?

37
00:02:32.660 --> 00:02:36.040
Doesn't really give us
a great way of doing that.

38
00:02:36.040 --> 00:02:38.330
I reach for two tools, and

39
00:02:38.330 --> 00:02:43.080
I'm not, in some ways they're two choices,
you could use one or the other.

40
00:02:43.080 --> 00:02:47.180
I use both because one is
better at some things and

41
00:02:47.180 --> 00:02:48.790
the other is better at other things.

42
00:02:48.790 --> 00:02:54.110
And I think that both together give
me the confidence I need to make sure

43
00:02:54.110 --> 00:02:58.620
that my really complicated types, when
they're unnecessary, they keep working.

44
00:02:58.620 --> 00:03:02.760
And I'm alerted as early as
possible when things break.

45
00:03:03.760 --> 00:03:05.850
And here's something you need
to know about TypeScript.

46
00:03:06.890 --> 00:03:08.840
It doesn't follow semantic versioning.

47
00:03:09.870 --> 00:03:13.700
Every middle digit release of the
TypeScript compiler which happens about

48
00:03:13.700 --> 00:03:15.940
every six weeks, these days.

49
00:03:15.940 --> 00:03:21.020
That introduces breaking changes and
the TypeScript team,

50
00:03:21.020 --> 00:03:26.979
their position on semantic
versioning is they believe

51
00:03:26.979 --> 00:03:32.655
that there's no such thing as
a truly non breaking change.

52
00:03:32.655 --> 00:03:38.650
And oftentimes they will fix bugs that
cause other people's code to break.

53
00:03:38.650 --> 00:03:42.673
Now, this is not to say that
they're acting irresponsibly or

54
00:03:42.673 --> 00:03:47.420
they're bad, but it's just the reality
of the way this project is managed.

55
00:03:47.420 --> 00:03:50.260
And I've never built a competing
thing to TypeScript.

56
00:03:50.260 --> 00:03:54.600
So I am not saying that there's
definitely a better way and

57
00:03:54.600 --> 00:03:56.600
they should do this the better way.

58
00:03:56.600 --> 00:04:01.450
I'm just saying there's risk,
every compiler version, every

59
00:04:01.450 --> 00:04:06.590
middle digit release comes with breaking
changes and they publish a list of them.

60
00:04:06.590 --> 00:04:08.730
And some of these are really
hard to figure out.

61
00:04:08.730 --> 00:04:11.230
So what we're gonna do here is
we'll set up this test suite and

62
00:04:11.230 --> 00:04:16.650
part of this is gonna let us run our
code against nightly TypeScript builds.

63
00:04:16.650 --> 00:04:22.070
So if you look at the workshop project
itself, and go to this Actions tab.

64
00:04:22.070 --> 00:04:25.400
You'll see that I have a couple
different jobs here, right,

65
00:04:25.400 --> 00:04:30.220
I've got code, security issues,
image minification.

66
00:04:30.220 --> 00:04:35.490
This one second from the bottom,
this is TypeScript at next tests.

67
00:04:35.490 --> 00:04:39.710
And you can see every 24 hours I'm
pulling down the latest nightly build

68
00:04:39.710 --> 00:04:40.920
of the compiler.

69
00:04:40.920 --> 00:04:44.000
And I'm making sure that it
continues to work with this project.

70
00:04:44.000 --> 00:04:48.800
Because I wanna know about whether
something's gonna break when it lands in

71
00:04:48.800 --> 00:04:54.782
master, on the TypeScript project,
because I can then try to see,

72
00:04:54.782 --> 00:04:59.070
was this, did they introduce a bug
that I need to tell them about?

73
00:04:59.070 --> 00:05:03.290
Or was I depending on
the existence of a bug, right?

74
00:05:03.290 --> 00:05:09.460
So you can use GitHub actions to set up a
cron job effectively, which every 24 hours

75
00:05:09.460 --> 00:05:15.600
will make sure that the latest nightly
build still works with your project.

76
00:05:15.600 --> 00:05:20.260
Super, super valuable as an early warning
system, so you don't find out when

77
00:05:20.260 --> 00:05:25.970
everybody else is taking an NES release,
like greenkeeper or dependabot, it's

78
00:05:25.970 --> 00:05:29.780
going around upgrading all the open source
libraries and your stuff is breaking.

79
00:05:29.780 --> 00:05:32.440
It's a really urgent
problem at that point.

80
00:05:32.440 --> 00:05:35.980
It's very valuable to know
about this well in advance.

