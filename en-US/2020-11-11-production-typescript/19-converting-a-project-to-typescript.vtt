WEBVTT

1
00:00:00.000 --> 00:00:05.124
So we're going to put this
small project to bed and

2
00:00:05.124 --> 00:00:10.258
it's time to refocus or
to focus on the slack app.

3
00:00:10.258 --> 00:00:17.405
So, now that we know that we've learned
about how I typically do linting and

4
00:00:17.405 --> 00:00:21.436
API documentation and build and testing.

5
00:00:21.436 --> 00:00:25.818
You may now look at this,
the main workshop project, and

6
00:00:25.818 --> 00:00:28.663
you'll see a lot of the same things.

7
00:00:28.663 --> 00:00:32.798
So the point of taking you through
this exercise was, you should now,

8
00:00:32.798 --> 00:00:36.163
be able to understand where to look for
certain things and

9
00:00:36.163 --> 00:00:38.427
what you see here is effectively the.

10
00:00:40.023 --> 00:00:44.600
The react part of the app added
in extending on this same

11
00:00:44.600 --> 00:00:47.398
concept of what we went through.

12
00:00:47.398 --> 00:00:54.493
So, I hope you take as a given that our
starting point here is just different and

13
00:00:54.493 --> 00:00:59.547
very uninteresting ways from
what we've built so far,

14
00:00:59.547 --> 00:01:05.480
so you can think of it sort of as
a continuation of our layering up.

15
00:01:05.480 --> 00:01:11.134
So, what I'm gonna talk
about now is our process for

16
00:01:11.134 --> 00:01:16.028
converting from JavaScript to TypeScript.

17
00:01:16.028 --> 00:01:20.227
And if you took the previous course,

18
00:01:20.227 --> 00:01:24.697
the TypeScript three essentials V2,

19
00:01:24.697 --> 00:01:30.520
you may remember that we had
a three step process for

20
00:01:30.520 --> 00:01:33.510
this conversion effort.

21
00:01:33.510 --> 00:01:38.010
And the idea here is you do not wanna
have a long running branch where you've

22
00:01:38.010 --> 00:01:40.654
converted a bunch of things to TypeScript,

23
00:01:40.654 --> 00:01:44.451
but everyone else is still
committing code to the repository.

24
00:01:44.451 --> 00:01:48.799
That's is a recipe for
just an awful merge conflict situation,

25
00:01:48.799 --> 00:01:53.470
you're gonna spend half your time
keeping upstream stuff in sync and

26
00:01:53.470 --> 00:01:56.623
pulling your commits and
you do not want that.

27
00:01:56.623 --> 00:02:01.012
What you want is to sort
of make focused efforts,

28
00:02:01.012 --> 00:02:05.293
lend those in master or
main and you want them for

29
00:02:05.293 --> 00:02:09.808
new code to be in TypeScript if possible,
right?

30
00:02:09.808 --> 00:02:16.110
You wanna kinda make progress and
then get back into your default branch.

31
00:02:16.110 --> 00:02:19.160
So, some guidance around what not to do,

32
00:02:19.160 --> 00:02:24.754
these are from my previous course,
I just wanna put those back in your mind.

33
00:02:24.754 --> 00:02:27.196
Don't attempt functional
changes at the same time,

34
00:02:27.196 --> 00:02:28.939
make sure your test coverage is good.

35
00:02:28.939 --> 00:02:33.744
That is how you're going to make sure
that as this conversion happens,

36
00:02:33.744 --> 00:02:38.311
you're not unintentionally changing
as you make the types happy,

37
00:02:38.311 --> 00:02:42.816
you're not changing the nature of
the code and causing breakage.

38
00:02:42.816 --> 00:02:46.286
Don't forget about adding tests for
your types,

39
00:02:46.286 --> 00:02:49.672
we're gonna talk about how
to do that shortly and

40
00:02:49.672 --> 00:02:54.892
don't get too excited about publishing
type information for consumers.

41
00:02:54.892 --> 00:03:00.238
So, if this is a library, your last
step is publishing declaration files,

42
00:03:00.238 --> 00:03:02.826
don't get too excited about that and

43
00:03:02.826 --> 00:03:06.767
do it too early because it's
just gonna be full of anys.

44
00:03:06.767 --> 00:03:12.167
And you're effectively gonna be
giving consumers suggestions

45
00:03:12.167 --> 00:03:16.667
about how to use your API that
are just way too loose and

46
00:03:16.667 --> 00:03:21.074
broad, you don't want that,
they don't either.

47
00:03:21.074 --> 00:03:25.791
So, step one, we're gonna compile in
loose mode, we're gonna make sure our

48
00:03:25.791 --> 00:03:30.165
tests work and the goal here is we just
want to get everything in TS files.

49
00:03:30.165 --> 00:03:35.417
And we wanna just have the compiler
back off as much as it can and

50
00:03:35.417 --> 00:03:41.989
then we're gonna end with the test
passing again, we're gonna merge it in.

51
00:03:41.989 --> 00:03:46.776
Step two,
we want to go from allowing implicit

52
00:03:46.776 --> 00:03:51.089
anys to requiring that anys be explicit.

53
00:03:51.089 --> 00:03:55.364
So, in order to make that work,
we're gonna have to download some type

54
00:03:55.364 --> 00:04:00.376
information, install reacts types, for
example, I think those are already in.

55
00:04:00.376 --> 00:04:03.054
In places where things
are a bit more complicated,

56
00:04:03.054 --> 00:04:05.741
we're not gonna wait until
the types are perfect.

57
00:04:05.741 --> 00:04:10.727
We're just gonna say, explicit any,
right, it's fine, cuz the goal

58
00:04:10.727 --> 00:04:15.715
is get your test passing again get
that merged in and you've ratcheted up

59
00:04:15.715 --> 00:04:20.980
the compilers strictness a little bit
because anys is must be explicit now.

60
00:04:20.980 --> 00:04:28.183
And then finally you're gonna wanna enable
strict mode and my even more strict stuff.

61
00:04:28.183 --> 00:04:33.619
Even more strict mode that we talked
about earlier like no unused locals,

62
00:04:33.619 --> 00:04:35.821
no unused parameters, etc.

63
00:04:35.821 --> 00:04:36.695
The need for

64
00:04:36.695 --> 00:04:42.393
explicit function return types that
would come with this this level as well.

65
00:04:42.393 --> 00:04:45.978
Now, I made a mistake in
my previous course, so

66
00:04:45.978 --> 00:04:52.184
I have to issue a correction here and it
only reinforces what I've told you today.

67
00:04:52.184 --> 00:04:56.223
Apparently, when I
recorded this last year,

68
00:04:56.223 --> 00:05:01.935
I did not have a very solid idea
of exactly what strict true meant.

69
00:05:01.935 --> 00:05:07.169
Which is okay because in the class I saw
no hands go up, nobody else knew either.

70
00:05:07.169 --> 00:05:12.171
So, it turns out these other options
I didn't need to set them to true cuz

71
00:05:12.171 --> 00:05:18.240
strict was already gonna set them to true,
at least by today's version of TypeScript.

