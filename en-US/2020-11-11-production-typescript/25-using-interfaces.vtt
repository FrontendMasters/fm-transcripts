WEBVTT

1
00:00:00.510 --> 00:00:03.990
So we have a couple more
things to talk about today.

2
00:00:03.990 --> 00:00:10.040
And in these next couple
sections are some of the most

3
00:00:10.040 --> 00:00:15.550
important things I can offer you, some of
the most important pieces of knowledge

4
00:00:15.550 --> 00:00:21.420
that I see underappreciated and
underused in the TypeScript ecosystem.

5
00:00:21.420 --> 00:00:27.300
So, I wanna make sure that
we get to these things.

6
00:00:27.300 --> 00:00:31.250
First, let's talk about dealing
with pure type information.

7
00:00:32.290 --> 00:00:36.810
And this can appear in our app
in a couple different places.

8
00:00:36.810 --> 00:00:42.070
First, we have this concept of,
maybe we have models, right?

9
00:00:42.070 --> 00:00:47.780
So this slack app potentially could
have a team, a channel, a message.

10
00:00:47.780 --> 00:00:51.200
These are sort of data entities
that relate to my app.

11
00:00:52.270 --> 00:00:56.840
And I may use those types in
various different places.

12
00:00:56.840 --> 00:01:01.058
So I'll show you where I would put
those and that is in a TypeScript file,

13
00:01:01.058 --> 00:01:03.628
side by side with all of
the rest of my stuff.

14
00:01:03.628 --> 00:01:06.781
types.ts and in here, I could and

15
00:01:06.781 --> 00:01:12.329
if you're following along in
the notes from section seven,

16
00:01:12.329 --> 00:01:17.029
so I'm gonna go and
grab the contents of this file.

17
00:01:17.029 --> 00:01:20.220
You can read through the stuff which
I'll be talking about in a moment.

18
00:01:21.730 --> 00:01:25.240
But this is this big section,
a bunch of different interfaces.

19
00:01:25.240 --> 00:01:30.200
So I'm gonna bring those into this
newly created file, and there we go.

20
00:01:30.200 --> 00:01:36.471
So, this is gonna be a JavaScript module
like any other and if we build it,

21
00:01:38.791 --> 00:01:42.990
We'll see that the JavaScript piece
test disappears to almost nothing.

22
00:01:42.990 --> 00:01:47.580
Because interfaces, of course, are just
type information, there's nothing else.

23
00:01:47.580 --> 00:01:51.430
In fact,
I don't think I'm even going to touch,

24
00:01:51.430 --> 00:01:57.220
I'm not even going to see this file yet
because I have not imported it anywhere.

25
00:01:57.220 --> 00:01:59.230
So let's import it in one place.

26
00:02:00.580 --> 00:02:05.160
So I wanna go to this data folder,
which is sort of a data layer.

27
00:02:05.160 --> 00:02:09.320
And we've got some functions
here that pretty clearly

28
00:02:09.320 --> 00:02:12.950
are intended to make some API calls.

29
00:02:12.950 --> 00:02:20.087
So get all teams is gonna return an array
of teams and I've called this an ITeam.

30
00:02:21.520 --> 00:02:25.625
Now, this is a convention if anyone
here has worked with C-Sharp,

31
00:02:25.625 --> 00:02:29.731
this is a convention borrowed from
that ecosystem where the capital

32
00:02:29.731 --> 00:02:34.356
I leaving the interface name indicates
that something's in an interface.

33
00:02:34.356 --> 00:02:39.270
And the reason is if I see something like
this, without having some sort of naming

34
00:02:39.270 --> 00:02:44.416
convention, it's not immediately clear to
me that this is just type information.

35
00:02:44.416 --> 00:02:49.256
And by the way I could do,
I could use the new type

36
00:02:49.256 --> 00:02:53.976
only import here, and
it will work just fine.

37
00:02:53.976 --> 00:02:59.215
So we're getting a list of teams,
this returns a promise that

38
00:02:59.215 --> 00:03:04.694
resolves, To list of teams,

39
00:03:11.884 --> 00:03:18.219
Get team by ID this returns
a promise that resolves to a team.

40
00:03:20.025 --> 00:03:26.120
And these cached lists here,
let's see making this API call,

41
00:03:26.120 --> 00:03:33.020
I'm returning this, so
that looks like it's the right type.

42
00:03:33.020 --> 00:03:38.750
And just taking a look at this real quick,
I expect that this is also going to be

43
00:03:38.750 --> 00:03:44.440
a promise that resolves to an ITeam.

44
00:03:44.440 --> 00:03:48.452
Okay, so now we're using our type
information in at least one spot.

45
00:03:48.452 --> 00:03:53.050
I'm gonna build once more, and I just
want us to look at the build output, so

46
00:03:53.050 --> 00:03:55.680
we can see what all happens here.

47
00:03:57.360 --> 00:04:03.080
So if I were to look in here and search
for like ITeam, it's just not in here,

48
00:04:03.080 --> 00:04:08.140
no results, no concept of this
symbol being available in here.

49
00:04:09.310 --> 00:04:10.480
So it just disappears.

50
00:04:11.690 --> 00:04:15.830
So that's what I would do with type
information that has to do with my app.

51
00:04:15.830 --> 00:04:18.610
But that's not the only kind of type
information we need to worry about.

