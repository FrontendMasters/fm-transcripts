WEBVTT

1
00:00:00.280 --> 00:00:03.170
So now I'm gonna talk about some
additional flags that we've turned on,

2
00:00:04.840 --> 00:00:09.160
beyond the regular strictmode stuff,

3
00:00:09.160 --> 00:00:14.010
so unused locals and
parameters and implicit returns.

4
00:00:14.010 --> 00:00:17.840
So this just makes sure that I'm not
leaving any unused code around, or

5
00:00:17.840 --> 00:00:22.735
at least brought to my attention, implicit
returns, would be if I were to say,

6
00:00:22.735 --> 00:00:32.280
look, I'm returning a number here,
A minus B, I'm returning a number.

7
00:00:32.280 --> 00:00:34.180
So this doesn't seem that harmful,
all right?

8
00:00:34.180 --> 00:00:36.110
Like we know we're
returning a number here.

9
00:00:36.110 --> 00:00:37.320
TypeScript can understand it.

10
00:00:38.800 --> 00:00:39.760
Here's where it gets tricky.

11
00:00:46.400 --> 00:00:48.320
You can make a change like this.

12
00:00:49.570 --> 00:00:56.830
And it's just way too easy,
To change the nature of the function.

13
00:00:57.840 --> 00:01:02.140
I love explicit specification
of return types,

14
00:01:02.140 --> 00:01:07.500
because when I'm designing a function,
I make it a guarantee.

15
00:01:07.500 --> 00:01:10.630
You give me two numbers,
I will return you the difference.

16
00:01:11.880 --> 00:01:17.060
It's just way too easy to sort of
change the nature of a method here,

17
00:01:17.060 --> 00:01:21.210
and to fundamentally change
what it's gonna return.

18
00:01:21.210 --> 00:01:23.830
So I'm either gonna run
into this problem here, or

19
00:01:23.830 --> 00:01:28.380
I'm gonna run into it wherever
subtract is being used, and

20
00:01:28.380 --> 00:01:32.600
I want my errors to pop up closest
to the side of the defect.

21
00:01:33.780 --> 00:01:36.130
So here, I want to say number.

22
00:01:37.670 --> 00:01:39.510
I am returning a number.

23
00:01:39.510 --> 00:01:46.610
And now it's gonna tell me all right, like
you're returning, it's some path in here,

24
00:01:46.610 --> 00:01:50.650
is returning undefined, or
not returning at all explicitly.

25
00:01:50.650 --> 00:01:52.270
And then I have to resolve this.

26
00:01:52.270 --> 00:01:54.950
I would rather deal with it
at the site of the function,

27
00:01:54.950 --> 00:01:57.020
then where are the functions being used.

28
00:01:57.020 --> 00:01:59.520
Where someone's consuming subtract,
and they said,

29
00:01:59.520 --> 00:02:04.020
I thought I would get a number, but now it
says I'm getting a number or undefined.

30
00:02:04.020 --> 00:02:09.000
That might be much more cryptic problems
attract down, falter cases and switch.

31
00:02:09.000 --> 00:02:10.460
So some people enable this,

32
00:02:10.460 --> 00:02:13.430
this makes sure that you have
a break in every case clause.

33
00:02:13.430 --> 00:02:18.550
I still have habits from my c++ days.

34
00:02:18.550 --> 00:02:23.150
I have no problem with
falling through case clauses.

35
00:02:23.150 --> 00:02:27.220
I leave this,
I'm willing to allow those falters.

36
00:02:27.220 --> 00:02:31.290
But this is how you would have
TypeScript responsible for

37
00:02:31.290 --> 00:02:32.875
making sure you can't do that.

38
00:02:32.875 --> 00:02:36.480
Personally, this I would say is
like more of a matter of taste.

39
00:02:36.480 --> 00:02:41.040
We already talked about types,
this is what we use to

40
00:02:41.040 --> 00:02:45.470
make sure that just couldn't be used in
our source folder, only the test folder.

41
00:02:45.470 --> 00:02:48.640
And then finally strip internal
we talked about as well.

42
00:02:48.640 --> 00:02:52.440
This is something that's not part
of the standard boilerplate here.

43
00:02:52.440 --> 00:02:54.310
This takes export and

44
00:02:54.310 --> 00:02:59.330
private functions, they may be exploited
strictly for the purpose of testing them.

45
00:03:00.770 --> 00:03:03.290
And it makes sure they never appear and
type information.

46
00:03:03.290 --> 00:03:05.770
So that your users will
not get that autocomplete,

47
00:03:05.770 --> 00:03:09.690
with a bunch of underscore stuff
that says please, don't use this.

48
00:03:09.690 --> 00:03:12.650
Like let's just make it, so
never as in the autocomplete to begin with

