WEBVTT

1
00:00:00.540 --> 00:00:04.240
The next thing we're gonna talk
about is modern advancements,

2
00:00:04.240 --> 00:00:10.150
the latest advancements in the TypeScript
language that have taken place since

3
00:00:10.150 --> 00:00:16.670
the TypeScript fundamentals V2
course on Frontend Masters.

4
00:00:16.670 --> 00:00:22.400
So what I'm gonna do here is in order to
show you on my screen how all of this

5
00:00:22.400 --> 00:00:29.160
works, I'm just gonna create a new file
in my Source folder called scratch.ts.

6
00:00:29.160 --> 00:00:35.800
And this is just for us to sort of goof
around, and to write little code snippets.

7
00:00:35.800 --> 00:00:38.570
So feel free to follow along with me,
but this is just for

8
00:00:38.570 --> 00:00:41.460
me to use this kind of like a whiteboard

9
00:00:42.820 --> 00:00:47.280
as we discuss these latest advancements,
so this file is not that important.

10
00:00:47.280 --> 00:00:49.970
It's just convenient for us.

11
00:00:51.510 --> 00:00:57.610
So the first category of things that have
been added to TypeScript is support for

12
00:00:57.610 --> 00:01:00.140
modern JavaScript language features.

13
00:01:00.140 --> 00:01:02.540
One of these is optional chaining.

14
00:01:02.540 --> 00:01:07.986
So if I have something like this,

15
00:01:07.986 --> 00:01:14.217
a value that looks like, let's say,

16
00:01:19.041 --> 00:01:26.440
Well, the type that's where it's user,
and we've got name is a string.

17
00:01:26.440 --> 00:01:29.990
And then it might have an address.

18
00:01:31.920 --> 00:01:35.150
And I'm getting yelled at because yes,

19
00:01:35.150 --> 00:01:39.910
lint doesn't like that I'm
failing to use this variable.

20
00:01:39.910 --> 00:01:43.460
Well, you can be quiet about that for
this entire file.

21
00:01:43.460 --> 00:01:46.670
So user might have an address.

22
00:01:46.670 --> 00:01:48.700
In fact,
let's make this even more interesting.

23
00:01:52.250 --> 00:01:57.610
So let's say that we have an object in
here, an object that might be present.

24
00:01:58.950 --> 00:02:03.800
So what we can do here is to access

25
00:02:03.800 --> 00:02:08.660
this if we wanted to log it out.

26
00:02:08.660 --> 00:02:13.670
We could say x.user.address.city.

27
00:02:13.670 --> 00:02:17.120
And in this state,
TypeScript is gonna yell at us.

28
00:02:19.150 --> 00:02:23.260
It's gonna yell at us because
the object is possibly undefined.

29
00:02:24.950 --> 00:02:28.100
Right, address might be there,
and it might not be there.

30
00:02:28.100 --> 00:02:32.120
And so we would have to make
this a bit more complicated, and

31
00:02:32.120 --> 00:02:37.620
we might say, if the address is present,
log this out.

32
00:02:37.620 --> 00:02:41.767
Alternatively, we can use
this optional chaining.

33
00:02:41.767 --> 00:02:44.710
In fact, here,
I can even do an optional chain.

34
00:02:47.410 --> 00:02:50.560
Now I'm being yelled at, cuz it's
not initialized, so we can do this.

35
00:02:54.750 --> 00:02:55.780
Just wanna make sure the,

36
00:03:03.891 --> 00:03:06.350
There we go,
finally made everything happy.

37
00:03:06.350 --> 00:03:09.860
So x, because I've done this,

38
00:03:09.860 --> 00:03:15.890
I'm saying I'm gonna force you to feel
like you have a value for x, right?

39
00:03:15.890 --> 00:03:17.630
That's what this thing here is for.

40
00:03:17.630 --> 00:03:21.730
If we did not have this question mark,
we'd have this problem, or

41
00:03:21.730 --> 00:03:23.330
address might not be there.

42
00:03:23.330 --> 00:03:28.443
And we can add this question
mark here to effectively insert

43
00:03:28.443 --> 00:03:35.510
early termination of this expression if
a null, or an undefined is encountered.

44
00:03:35.510 --> 00:03:41.050
So if an address is undefined,
this expression will be terminated early.

45
00:03:41.050 --> 00:03:48.870
Now, keep in mind,
this adds a condition to your code,

46
00:03:48.870 --> 00:03:53.995
meaning your cyclomatic complexity,
if you're keeping track of that,

47
00:03:53.995 --> 00:03:57.205
that just went up, because you
have a question mark here, right?

48
00:03:57.205 --> 00:03:58.785
If address is present, you do one thing.

49
00:03:58.785 --> 00:04:01.095
Otherwise, you do another thing.

50
00:04:01.095 --> 00:04:06.365
So the other thing I want you to be aware
of is it's not like this whole statement

51
00:04:07.825 --> 00:04:12.140
will end up being terminated, right?

52
00:04:12.140 --> 00:04:15.680
All that happens is you're either
gonna log out the city, or

53
00:04:15.680 --> 00:04:17.550
you'll log out undefined.

54
00:04:17.550 --> 00:04:21.743
We don't skip the console.log entirely.

55
00:04:21.743 --> 00:04:24.690
We just kinda log out.

56
00:04:24.690 --> 00:04:27.960
We basically evaluate to
undefined if address is absent, or

57
00:04:27.960 --> 00:04:32.180
we get to the city if it's present,
one or the other.

58
00:04:32.180 --> 00:04:37.920
So it's not something you wanna use just
to sort of power through the potential for

59
00:04:37.920 --> 00:04:41.310
something to be missing, because
you're still gonna get a value, and

60
00:04:41.310 --> 00:04:42.520
that value will be undefined.

61
00:04:44.110 --> 00:04:48.630
That is probably the best tip I can
give you around optional chaining.

62
00:04:48.630 --> 00:04:52.030
So the next thing I wanna talk to
you about is knowledge coalescing.

63
00:04:52.030 --> 00:04:57.206
The best place I found for nullish

64
00:04:57.206 --> 00:05:03.150
coalescing is defaults for class fields.

65
00:05:05.450 --> 00:05:08.580
So if I have something like this,

66
00:05:13.130 --> 00:05:16.206
Something like this, which,
if you've taken the first course,

67
00:05:20.850 --> 00:05:24.400
Actually, yeah, we can do it this way.

68
00:05:24.400 --> 00:05:28.940
So if you've taken the first course,
you know that this is a shorthand for

69
00:05:28.940 --> 00:05:33.774
having a class field called name,

70
00:05:33.774 --> 00:05:37.570
in addition to a constructor argument.

71
00:05:38.600 --> 00:05:44.570
So if I had a method here,
I could do console/log this name,

72
00:05:44.570 --> 00:05:47.250
and the field is there, right?

73
00:05:47.250 --> 00:05:49.380
But it could possibly be undefined.

74
00:05:49.380 --> 00:05:53.362
So nullish coalescing would let us do
something like this, name, Do this.

75
00:06:20.105 --> 00:06:24.885
So the double question mark is
this nullish coalescing operator.

76
00:06:24.885 --> 00:06:29.375
And if rawName comes in as undefined or
a null,

77
00:06:29.375 --> 00:06:33.910
we'll fall back to this default value.

78
00:06:33.910 --> 00:06:41.912
Now, the thing to be careful of here is
if you think of this as this operator,

79
00:06:41.912 --> 00:06:47.300
you will run into surprises
around empty strings and zeros,

80
00:06:47.300 --> 00:06:53.000
because those evaluate as falsi,
but they are not nullish.

81
00:06:53.000 --> 00:06:54.725
So that's where you gotta be careful here.

82
00:06:54.725 --> 00:07:02.050
In TypeScript 3.8, we got class fields,
which effectively is this.

83
00:07:07.820 --> 00:07:12.550
So this hashtag at
the beginning of a field name

84
00:07:12.550 --> 00:07:15.360
gives us something called hard privacy.

85
00:07:15.360 --> 00:07:18.710
So this is different than
simply the underscore, or

86
00:07:18.710 --> 00:07:21.660
simply having the word private.

87
00:07:23.810 --> 00:07:28.615
So if you've ever consumed, if you've ever
written a library in TypeScript and use

88
00:07:28.615 --> 00:07:33.230
private, you know that if somebody sets
a break point, they can still see name.

89
00:07:33.230 --> 00:07:34.370
It's still there.

90
00:07:34.370 --> 00:07:34.870
And particularly, if someone's consuming
this code, and they don't use the type

91
00:07:34.870 --> 00:07:35.911
information, there is no indication
that this is private. Now,

92
00:07:35.911 --> 00:07:40.837
if we have this hashtag
at the beginning of

93
00:07:40.837 --> 00:07:46.330
the field name,
it's it's actually private.

94
00:07:46.330 --> 00:07:50.150
If you set a breakpoint, and
have an instance of foo, and

95
00:07:50.150 --> 00:07:54.010
you try to access this at runtime,
it won't be there anymore.

96
00:07:55.120 --> 00:08:02.430
So this is true privacy, meaning only
this class can have access to this.

97
00:08:02.430 --> 00:08:05.620
It's also useful because you can
override it in subclasses safely.

98
00:08:05.620 --> 00:08:09.910
So if I had another class extending from
foo, it could have its own hashtag name.

99
00:08:09.910 --> 00:08:14.340
It doesn't know thing about the fact
that the base class has a hashtag name.

100
00:08:15.430 --> 00:08:20.650
It's private data, and
it doesn't inherit because it's private.

101
00:08:23.890 --> 00:08:28.800
We also got namespace exports, which is
just this syntax here, export star as

102
00:08:30.300 --> 00:08:33.960
foo from some module like this.

103
00:08:33.960 --> 00:08:36.820
Now, this is useful.

104
00:08:36.820 --> 00:08:40.640
We'll use it later as we sort
of define a public API surface.

105
00:08:40.640 --> 00:08:43.490
This is great if you wanna make
a library with a single entry point,

106
00:08:43.490 --> 00:08:46.210
and you have a bunch of other modules.

107
00:08:46.210 --> 00:08:48.940
And you could sort of
just have one place where

108
00:08:48.940 --> 00:08:51.900
everything from all of
your modules feeds out.

109
00:08:51.900 --> 00:08:52.790
We'll use that later.

110
00:08:52.790 --> 00:08:55.040
But that's another
JavaScript language feature.

111
00:08:55.040 --> 00:08:59.109
And that's basically it,
that represents from 3.7

112
00:08:59.109 --> 00:09:03.220
through 4.0 a modern JS language features.

