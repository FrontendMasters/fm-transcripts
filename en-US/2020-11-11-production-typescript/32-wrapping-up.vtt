WEBVTT

1
00:00:00.360 --> 00:00:05.613
So as part of testing, there was that
question someone asked in the class.

2
00:00:05.613 --> 00:00:11.740
About whether it's possible to create an
extension of a declaration file and name

3
00:00:11.740 --> 00:00:17.618
it something else so it doesn't interfere
with other foxy declaration file?

4
00:00:17.618 --> 00:00:22.144
Now, there's a little bit of
a flood premise to this question.

5
00:00:22.144 --> 00:00:27.221
And I just wanna emphasize again,
that type checking is a global operation.

6
00:00:27.221 --> 00:00:30.802
So there's no sense of like,
in some of these files,

7
00:00:30.802 --> 00:00:35.130
I use this one declaration file, and
these other files I use another.

8
00:00:35.130 --> 00:00:39.858
It's one thing, it's a holistic process
that happens to your entire App.

9
00:00:39.858 --> 00:00:46.678
So if you want an override to happen,
that override applies everywhere.

10
00:00:46.678 --> 00:00:52.184
What you can do is import types from
one place and export them as something

11
00:00:52.184 --> 00:00:57.789
different, but that is not the same
thing as sort of like patching React.

12
00:00:57.789 --> 00:01:01.500
If you patch React,
that patch happens everywhere, right, so

13
00:01:01.500 --> 00:01:04.945
think of it almost like you're
programming with globals.

14
00:01:04.945 --> 00:01:06.575
There's one React and

15
00:01:06.575 --> 00:01:11.049
its types are represented once
many places may refer to them.

16
00:01:11.049 --> 00:01:16.186
But any little adjustments that you make
to those, they happen for your whole App.

17
00:01:16.186 --> 00:01:21.098
The question is, why is it that we
have to use these tools and not Juxt,

18
00:01:21.098 --> 00:01:25.861
Juxt, or the standard tools we're
used to when writing our tests?

19
00:01:25.861 --> 00:01:30.064
So there are many ways I could answer
this, but I really only need one,

20
00:01:30.064 --> 00:01:33.993
I think there's one compelling
answer I can give that is enough.

21
00:01:33.993 --> 00:01:39.083
And that is the following,
You can have bugs

22
00:01:39.083 --> 00:01:44.660
in your types that allow
too many things to happen,

23
00:01:44.660 --> 00:01:50.378
bugs where your type
information becomes too wide.

24
00:01:50.378 --> 00:01:52.036
Let me introduce a bug.

25
00:02:04.645 --> 00:02:07.414
Does anyone wanna argue
that this is not a bug,

26
00:02:07.414 --> 00:02:09.911
this is not a problem that I just created?

27
00:02:09.911 --> 00:02:15.554
I took this interface and
I made it in any, what will this break?

28
00:02:15.554 --> 00:02:20.398
Nothing, it won't break anything and
that's a problem.

29
00:02:20.398 --> 00:02:24.689
It should break lots of things,
it's too general,

30
00:02:24.689 --> 00:02:28.305
it allows things that it shouldn't allow.

31
00:02:28.305 --> 00:02:33.225
Juxt can't catch this,
Juxt we'll be perfectly happy

32
00:02:33.225 --> 00:02:37.945
to let you pass in team as
an argument to return a team.

33
00:02:37.945 --> 00:02:42.946
And there will be any, any, any,
any, any suggests can't catch this.

34
00:02:42.946 --> 00:02:47.592
It's really all about those negative test
cases, which are really hard to write and

35
00:02:47.592 --> 00:02:49.767
something like, you're just types.

36
00:02:49.767 --> 00:02:54.006
Where you wanna make sure
certain things are not allowed,

37
00:02:54.006 --> 00:02:59.641
certain things should raise errors,
certain things should be impossible.

38
00:02:59.641 --> 00:03:03.406
It is as important to
maintain those conditions,

39
00:03:03.406 --> 00:03:08.158
as it is to maintain things that
should work, should work, and

40
00:03:08.158 --> 00:03:12.476
things that shouldn't work
must not be allowed to work.

41
00:03:12.476 --> 00:03:16.223
And this is a kind of error that your
regular test suite is just not gonna

42
00:03:16.223 --> 00:03:17.187
be able to catch.

43
00:03:17.187 --> 00:03:24.494
Whereas over here, I'll tell you,
this one will catch it, right?

44
00:03:24.494 --> 00:03:30.689
So even if I fix this file, I introduced
the problem here deliberately, right?

45
00:03:30.689 --> 00:03:33.436
So one should be a Team and
one shouldn't, but

46
00:03:33.436 --> 00:03:37.886
the bug I just introduced will have both
of these to be regarded as an ITeam.

47
00:03:37.886 --> 00:03:39.255
Uhuh, what happened here?

48
00:03:42.475 --> 00:03:46.815
Expect non assignable, no,

49
00:03:46.815 --> 00:03:50.986
I would expect this to fail,

50
00:03:56.790 --> 00:03:57.532
There it goes.

51
00:03:57.532 --> 00:04:04.717
I must not have saved something, so it's
telling me a no is assignable to an any.

52
00:04:04.717 --> 00:04:08.525
And I was supposed to check and make
sure this was not allowed to happen and

53
00:04:08.525 --> 00:04:10.532
it could happen, that's a problem.

54
00:04:10.532 --> 00:04:13.358
I can't really write the same
kind of test in Juxt,

55
00:04:13.358 --> 00:04:16.666
not in a way that produces good
assertion errors like this.

56
00:04:16.666 --> 00:04:20.732
So that's the answer, you need this
mostly from negative test cases.

57
00:04:20.732 --> 00:04:25.168
And this is so
often overlooked in TypeScript code and

58
00:04:25.168 --> 00:04:28.132
his kinda bug happens all the time.

59
00:04:28.132 --> 00:04:31.337
It'll just be like a patched version
of some definitely typed package,

60
00:04:31.337 --> 00:04:33.240
that'll introduce something like this.

61
00:04:33.240 --> 00:04:36.217
And you'll just wonder, it just takes,

62
00:04:36.217 --> 00:04:41.078
I've spent weeks tracking down bugs,
this would make easy to fix.

63
00:04:41.078 --> 00:04:43.867
And, instead,
I was just this big chase to try and

64
00:04:43.867 --> 00:04:45.937
figure out what the heck is going on.

65
00:04:45.937 --> 00:04:48.191
And, I ended up having to
write these tests, anyway,

66
00:04:48.191 --> 00:04:50.450
because that's how you track
this kind of thing down.

67
00:04:50.450 --> 00:04:54.511
You start saying, okay, well, this should
be possible and this should be impossible.

68
00:04:54.511 --> 00:04:58.141
And you just keep adding these cases
as you try to find like, okay.

69
00:04:58.141 --> 00:05:00.845
So here's the thing that
shouldn't be allowed to happen and

70
00:05:00.845 --> 00:05:02.814
it's happening, now I know where to look.

71
00:05:02.814 --> 00:05:08.643
But it's just really, really tricky to
find these problems, every failure of

72
00:05:08.643 --> 00:05:14.299
this nature will be mysterious and
time consuming without a good test suite.

73
00:05:14.299 --> 00:05:15.623
So, thanks so much for

74
00:05:15.623 --> 00:05:19.544
spending the day with me talking
about professional TypeScript.

75
00:05:19.544 --> 00:05:24.365
I hope that you feel that you're not only
able to use the programming language now.

76
00:05:24.365 --> 00:05:29.547
You're familiar with some of the best
in class tools that when put together,

77
00:05:29.547 --> 00:05:30.830
make life easier.

78
00:05:30.830 --> 00:05:35.411
I hope you automate things like
your various types of tests.

79
00:05:35.411 --> 00:05:40.299
And I hope that this will be
the beginning of your exploration deeper

80
00:05:40.299 --> 00:05:41.940
into this ecosystem.

81
00:05:41.940 --> 00:05:45.812
As this language continues
to gain in popularity and

82
00:05:45.812 --> 00:05:51.187
become one of the most exciting parts
of the web development ecosystem.

