WEBVTT

1
00:00:00.273 --> 00:00:04.331
And in our dtslint, we can say, all right,

2
00:00:04.331 --> 00:00:09.502
when I look for my lib,
we can call it whatever you like.

3
00:00:09.502 --> 00:00:13.847
I wanna go to that dist, sorry,
this will get me back to the root.

4
00:00:17.190 --> 00:00:23.740
This types, so we'll say my lib/*,
reach into that disk types folder.

5
00:00:26.377 --> 00:00:31.371
All right, next,
we're in this index DTS file.

6
00:00:31.371 --> 00:00:35.211
The thing we wanna add to the top
of this is a special header.

7
00:00:37.404 --> 00:00:42.752
And this is a minimum TypeScript version.

8
00:00:42.752 --> 00:00:47.232
So one of the big value adds of this
tool is it will download a bunch of

9
00:00:47.232 --> 00:00:51.954
different types of diversions for
us and test them all sequentially.

10
00:00:51.954 --> 00:00:54.743
For a library this is super important,

11
00:00:54.743 --> 00:00:59.643
because this is how you make sure that
you can maybe adopt new things or

12
00:00:59.643 --> 00:01:04.546
make fixes without breaking
compatibility with the trailing edge of

13
00:01:04.546 --> 00:01:09.640
the the range of compiler versions
you're aiming to support, right?

14
00:01:09.640 --> 00:01:13.476
If I wanna keep supporting 3.8 but
we've got 4.0 and

15
00:01:13.476 --> 00:01:15.990
4.1 someone opens a pull request.

16
00:01:15.990 --> 00:01:20.595
You don't want maintainers to have
to think about all of the different

17
00:01:20.595 --> 00:01:25.449
features and when exactly did they
land and what still works with 3.8.

18
00:01:25.449 --> 00:01:29.145
So this will check everything,
all of the releases in sequence.

19
00:01:39.513 --> 00:01:42.373
And this is where you would, so

20
00:01:42.373 --> 00:01:47.554
this index DTS file needs to
expose your types, right?

21
00:01:47.554 --> 00:01:53.491
You need to export stuff from this,
that will then be available for testing.

22
00:01:53.491 --> 00:01:56.108
So I'm just gonna go to data and

23
00:01:56.108 --> 00:02:00.949
teams because this is where
our interesting type lives.

24
00:02:00.949 --> 00:02:03.748
And here's the last thing we
create here test.ts you can

25
00:02:03.748 --> 00:02:05.213
name this whatever you want.

26
00:02:08.138 --> 00:02:12.104
And this is where we
could say import from.

27
00:02:14.207 --> 00:02:21.251
So we're gonna import our
assertIsTypedArray and isIteam.

28
00:02:21.251 --> 00:02:28.505
So here we could say,
In fact we could even do better than this.

29
00:02:28.505 --> 00:02:30.945
Let's not only get that team thing,
let's get our types.

30
00:02:37.142 --> 00:02:39.587
So there we've got our
ITeam coming through so

31
00:02:39.587 --> 00:02:42.166
you could see how we can
expose whatever we need.

32
00:02:42.166 --> 00:02:47.033
And now we'll say const team which is

33
00:02:47.033 --> 00:02:51.120
an ITeam equals null, right?

34
00:02:51.120 --> 00:02:54.615
So this should break for
TS config is set up properly.

35
00:03:06.950 --> 00:03:09.527
Let's restart a TypeScript server,
I would expect this to break.

36
00:03:11.860 --> 00:03:14.110
There it is broken, perfect.

37
00:03:14.110 --> 00:03:20.443
So this is a unused variable.

38
00:03:22.226 --> 00:03:24.522
No, it's not assignable to type it.

39
00:03:24.522 --> 00:03:27.124
That's the important one, right?

40
00:03:27.124 --> 00:03:30.587
We can get rid of some of these other
roles just to simplify this down.

41
00:03:30.587 --> 00:03:34.785
Like forget unused stuff.

42
00:03:34.785 --> 00:03:36.112
I guess it's already disabled.

43
00:03:40.532 --> 00:03:42.676
Just give it a fake usage, there we go.

44
00:03:42.676 --> 00:03:45.172
Okay, now we done to the key error.

45
00:03:45.172 --> 00:03:48.303
So what we wanna do here
is add a special comment.

46
00:03:51.204 --> 00:03:55.436
ExpectError, so
we're saying this better error.

47
00:03:55.436 --> 00:03:57.830
If this doesn't error, we're in trouble.

48
00:03:59.277 --> 00:04:00.186
It should be a bug.

49
00:04:01.653 --> 00:04:02.684
And let's see if this works.

50
00:04:11.463 --> 00:04:15.092
Let's see DTS lead is present,
what's going on here?.

51
00:04:27.685 --> 00:04:30.288
Something in here is not making it happy.

52
00:04:41.955 --> 00:04:44.631
Maybe I need a black line there, nope.

53
00:04:56.451 --> 00:05:01.423
Let me just check the dtslint or
sorry, the dtslint.json thing here.

54
00:05:04.128 --> 00:05:04.927
That looks right.

55
00:05:07.436 --> 00:05:08.376
And that is what I have.

56
00:05:15.428 --> 00:05:16.723
Maybe I just need my yarn.

57
00:05:19.969 --> 00:05:20.767
There we go.

58
00:05:23.084 --> 00:05:27.476
The difference between invoking
something locally versus globally and

59
00:05:27.476 --> 00:05:32.228
volto took care of the correct version,
but it might have been like the working

60
00:05:32.228 --> 00:05:35.905
directory or something that was
that not playing real nice.

61
00:05:35.905 --> 00:05:37.717
So right now, behind the scenes,

62
00:05:37.717 --> 00:05:41.541
what's happening is I'm downloading
a bunch of TypeScript versions.

63
00:05:41.541 --> 00:05:43.561
Let's see what's happening here.

64
00:05:43.561 --> 00:05:45.864
Test file should not use
a relative import okay?

65
00:05:45.864 --> 00:05:48.482
I can get rid of this real easy.

66
00:05:48.482 --> 00:05:49.610
This is just,

67
00:05:57.165 --> 00:05:58.531
Or false is all you have to say.

68
00:06:02.117 --> 00:06:05.951
So normally you would
shift things around so

69
00:06:05.951 --> 00:06:10.104
that you can consume these
as if you're a user.

70
00:06:10.104 --> 00:06:12.055
This is just a simpler like quick and

71
00:06:12.055 --> 00:06:14.534
dirty way to demonstrate
how the tool works.

72
00:06:20.129 --> 00:06:24.215
There we go, we're done, and then let's
let's see if we can break our tests, so

73
00:06:24.215 --> 00:06:25.593
we see what happens there.

74
00:06:30.025 --> 00:06:34.111
So I expect an error but
I want channels empty.

75
00:06:36.456 --> 00:06:40.402
I wanna make a valid one that
should fail but in fact doesn't.

76
00:06:44.829 --> 00:06:46.927
This is an entirely valid team.

77
00:06:55.121 --> 00:06:59.094
All right, I've got my channels icon URL.

78
00:06:59.094 --> 00:07:03.808
Only ES LINT is complaining,
only getting warnings.

79
00:07:03.808 --> 00:07:05.605
So let's see if it yells at us about this.

80
00:07:16.976 --> 00:07:17.737
&gt;&gt; Level six.

81
00:07:20.145 --> 00:07:22.178
&gt;&gt; Yeah, this might be a problem,
we'll see.

82
00:07:24.153 --> 00:07:24.873
Thanks for the catch.

83
00:07:28.476 --> 00:07:30.262
We're already seeing the feedback though.

84
00:07:30.262 --> 00:07:33.487
And this is one advantage of
having it based around the linter.

85
00:07:33.487 --> 00:07:36.393
Like, even though something
broke later in the file,

86
00:07:36.393 --> 00:07:39.499
linters are designed to pick
up all the problems in a file.

87
00:07:39.499 --> 00:07:43.335
So they're not strictly going to
sort of stop at the first error and

88
00:07:43.335 --> 00:07:44.714
then kick out, right?

89
00:07:47.278 --> 00:07:51.004
So there we go,
we have an error on line 4, and

90
00:07:51.004 --> 00:07:56.085
it's an error that occurred
when testing TypeScript 4.1.

91
00:07:56.085 --> 00:07:58.813
It expected an error on this line and
it found none.

92
00:07:58.813 --> 00:08:04.622
So this is great in terms of maintaining
a compatibility range instead of

93
00:08:04.622 --> 00:08:09.780
just focusing on the version of
TypeScript that you're using.

94
00:08:09.780 --> 00:08:14.005
So, obviously,
this is a very convoluted setup process.

95
00:08:14.005 --> 00:08:17.925
And it's because this is
a tool designed mostly for

96
00:08:17.925 --> 00:08:21.306
definitely typed, you can use it locally.

97
00:08:21.306 --> 00:08:23.552
There's a much easier to set up tool and

98
00:08:23.552 --> 00:08:27.566
it's gonna be like obviously what
you're going to want to go for, but

99
00:08:27.566 --> 00:08:32.125
I wanna make sure you also have something
that will protect you against that that

100
00:08:32.125 --> 00:08:36.373
nightly build which was included in
the set of versions that were tested.

101
00:08:36.373 --> 00:08:38.187
So this is called tsd.

102
00:08:40.214 --> 00:08:41.889
Much, much, much more straightforward.

103
00:08:44.161 --> 00:08:52.388
Because it benefits from what we
all learned about using DTS lint.

104
00:08:52.388 --> 00:09:00.002
So the idea here is you have real types
that you can use to assert against.

105
00:09:00.002 --> 00:09:02.520
You're not using a special
commenting language.

106
00:09:02.520 --> 00:09:05.925
You have real assertions.

107
00:09:05.925 --> 00:09:09.006
And the setup process is
like dramatically easier.

108
00:09:09.006 --> 00:09:11.360
So we already have tsd installed.

109
00:09:11.360 --> 00:09:16.785
And we just need to create a file

110
00:09:16.785 --> 00:09:23.678
like believe like index.testd.ts.

111
00:09:23.678 --> 00:09:25.263
And let's see if we can do the same thing.

112
00:09:35.297 --> 00:09:37.712
So we'll get an ITeam.

113
00:09:37.712 --> 00:09:42.136
I'm just going to bring in like some very
similar tests from what we already had

114
00:09:42.136 --> 00:09:43.085
these two here.

115
00:09:45.053 --> 00:09:47.820
And we'll just worry about like
the bad one and the good one.

116
00:09:47.820 --> 00:09:50.455
So get rid of these funky comments.

117
00:09:53.100 --> 00:10:03.048
And from, This tsd library,
we can have, expect.

118
00:10:05.085 --> 00:10:08.490
NotAssignable and expectAssignable.

119
00:10:08.490 --> 00:10:10.721
So here's how we would use each.

120
00:10:10.721 --> 00:10:19.149
You'd say expect,
NotAssignable to ITeam null.

121
00:10:21.547 --> 00:10:27.999
And expectAssignable to ITeam and

122
00:10:27.999 --> 00:10:33.788
then pass that whole thing in.

123
00:10:33.788 --> 00:10:38.131
So obviously this is like
much more friendly to read.

124
00:10:47.198 --> 00:10:48.555
Much more friendly to read.

125
00:10:48.555 --> 00:10:54.278
The only downside is, oops,
I still need an index DTS here.

126
00:10:54.278 --> 00:10:55.305
I'm pretty sure this will work.

127
00:10:56.696 --> 00:10:57.911
The same one more or less.

128
00:11:00.662 --> 00:11:02.139
But without this top thing.

129
00:11:02.139 --> 00:11:05.293
We don't have the ability to
test against multiple versions,

130
00:11:05.293 --> 00:11:11.630
that's all We should get
some good feedback here.

131
00:11:11.630 --> 00:11:15.472
So that's supposedly our test just passed.

132
00:11:15.472 --> 00:11:17.888
Let's make sure they fail the way
they're supposed to fail.

133
00:11:24.869 --> 00:11:25.971
There we go two errors.

134
00:11:29.224 --> 00:11:35.019
We're getting one error that we had
an import that we didn't use and

135
00:11:35.019 --> 00:11:38.080
another that this was assignable.

136
00:11:38.080 --> 00:11:40.077
And the assertion said it shouldn't be,

137
00:11:40.077 --> 00:11:43.792
we're supposed to make sure this is
not assignable, but it's assignable.

138
00:11:46.231 --> 00:11:48.021
Because we broke that test on purpose.

139
00:11:48.021 --> 00:11:50.240
So two different tools for testing.

140
00:11:50.240 --> 00:11:54.122
TSD has better assertions,
it's easier to write your tests.

141
00:11:54.122 --> 00:11:55.749
They have a wider range of assertions.

142
00:11:55.749 --> 00:12:01.037
They have things in here like
expect deprecated expect not not

143
00:12:01.037 --> 00:12:06.224
deprecated that use
the js.@deprecated annotation, and

144
00:12:06.224 --> 00:12:12.341
you can make sure that nobody on
deprecates things, parts of your API.

145
00:12:14.906 --> 00:12:20.564
Some really cool stuff,
some deeper ways to assert and

146
00:12:20.564 --> 00:12:24.623
to describe the things you wanna test.

147
00:12:24.623 --> 00:12:29.558
The only thing it's missing is testing
a range of TypeScript versions.

148
00:12:29.558 --> 00:12:32.989
But I think this is the path forward,
it's just not quite there yet,

149
00:12:32.989 --> 00:12:34.835
which is why I still need both tools.

