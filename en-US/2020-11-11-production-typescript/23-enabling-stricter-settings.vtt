WEBVTT

1
00:00:00.610 --> 00:00:04.710
Let's start making our
way to step three and

2
00:00:04.710 --> 00:00:08.686
this is gonna get a little
bit more interesting.

3
00:00:08.686 --> 00:00:10.830
So I want to close off my source files and

4
00:00:10.830 --> 00:00:16.382
the way we begin step 3 is
changing our compiler settings.

5
00:00:16.382 --> 00:00:21.920
So in the revised process,
we're going to call

6
00:00:21.920 --> 00:00:27.300
this step 3.1, all we're doing is
we're opting into strict mode.

7
00:00:27.300 --> 00:00:31.046
So we're gonna find strict,
we commented it out,

8
00:00:31.046 --> 00:00:35.150
now we're uncommenting it and
let's see where we are.

9
00:00:40.780 --> 00:00:45.419
We're gonna see if parcel
surfaces errors to us.

10
00:00:45.419 --> 00:00:46.265
Maybe not.

11
00:00:46.265 --> 00:00:49.279
Let's see if TSC does the same thing.

12
00:00:55.571 --> 00:01:04.660
All right, it actually turns out we
already work with strict mode enabled.

13
00:01:04.660 --> 00:01:10.215
And that means, we're not using
any weird function bind stuff,

14
00:01:10.215 --> 00:01:13.246
that this is not that big of a shock.

15
00:01:16.409 --> 00:01:18.670
So we can proceed to Step 3.2, right?

16
00:01:18.670 --> 00:01:24.715
And this is where we start turning
on the even more strict mode.

17
00:01:24.715 --> 00:01:29.240
Where we will do things like

18
00:01:29.240 --> 00:01:33.570
noUnusedLocals, true,

19
00:01:33.570 --> 00:01:38.698
noUnusedParameters, true.

20
00:01:38.698 --> 00:01:43.293
So that one wasn't even in the notes,

21
00:01:43.293 --> 00:01:48.032
but it's worth adding, noUnused, or

22
00:01:48.032 --> 00:01:51.635
noImplicitReturns, true.

23
00:01:51.635 --> 00:01:56.157
And if you find that this is too much you
could even do individual passes with these

24
00:01:56.157 --> 00:01:56.700
things.

25
00:01:56.700 --> 00:02:01.113
And I would say it's necessary, so

26
00:02:01.113 --> 00:02:06.711
I'm thinking about
the big app at LinkedIn.

27
00:02:06.711 --> 00:02:10.225
The one that you know of as linkedin.com,

28
00:02:10.225 --> 00:02:14.823
it's about 115,000 lines
of JavaScript code.

29
00:02:14.823 --> 00:02:19.958
We would definitely wanna do this one at
a time, and they would be big changes.

30
00:02:24.108 --> 00:02:27.985
But the whole point is you
can use some discretion here,

31
00:02:27.985 --> 00:02:31.958
you have the ability to decide
what's best for your app.

32
00:02:35.720 --> 00:02:37.320
What's this one?

33
00:02:37.320 --> 00:02:41.957
forceConsistent, I don't need to
worry about this one because I

34
00:02:41.957 --> 00:02:45.170
don't have any file names that collide,
but

35
00:02:51.365 --> 00:02:53.268
Gosh, who came up with that name?

36
00:02:53.268 --> 00:02:58.156
[LAUGH] okay, so
this is what I've stated as 3.2 even

37
00:02:58.156 --> 00:03:01.568
more strict, let's see if we pass now

38
00:03:06.532 --> 00:03:10.836
[LAUGH] I give up on that one.

39
00:03:18.230 --> 00:03:23.955
It's already true, I must have misspelled
stuff, it's file names, not file name.

40
00:03:27.149 --> 00:03:31.402
All right, but I think that
TypeScript gave up because my config

41
00:03:31.402 --> 00:03:35.519
file was invalid, so
I don't believe that it's error free.

42
00:03:35.519 --> 00:03:38.114
Now I do, cool.

43
00:03:38.114 --> 00:03:42.880
Okay, so
actually we're in a good spot now, but

44
00:03:42.880 --> 00:03:50.690
you could imagine how I could still have
some implicit returns hanging around.

45
00:03:50.690 --> 00:03:54.250
This would be telling me
about this kind of thing.

