WEBVTT

1
00:00:00.015 --> 00:00:05.373
Now let's begin step two of converting
this app from JavaScript to TypeScript.

2
00:00:05.373 --> 00:00:10.486
So we mostly allow implicit entities so
far,

3
00:00:10.486 --> 00:00:16.143
so I'm going to forbid
them making any explicit.

4
00:00:16.143 --> 00:00:19.443
This is going to require a change
in our compiler settings,

5
00:00:19.443 --> 00:00:21.495
it's just one line in our TSConfig.

6
00:00:25.923 --> 00:00:34.238
So we're gonna say noImplicitAny true,
And we can run TSC.

7
00:00:34.238 --> 00:00:40.169
The only reason I've been running TSC
instead of yarn build is there are other

8
00:00:40.169 --> 00:00:46.299
aspects of the build like the styles and
I don't wanna worry about that so much.

9
00:00:46.299 --> 00:00:48.897
I want us to have a nice
little quick iteration here.

10
00:00:48.897 --> 00:00:54.512
In fact, I think I could do
--watch --preserveWatchOutput,

11
00:01:00.063 --> 00:01:01.576
And let's see, great.

12
00:01:01.576 --> 00:01:06.608
So now we should be able to see
automatic refreshes as we go around and

13
00:01:06.608 --> 00:01:09.271
kind of play whack-a-mole here.

14
00:01:09.271 --> 00:01:14.433
So now there are these things where
implicit entities were flying and

15
00:01:14.433 --> 00:01:16.839
it's our job to get rid of them.

16
00:01:16.839 --> 00:01:21.298
So this is more bringing
things in from JSDoc

17
00:01:21.298 --> 00:01:26.006
typings into the function
signature itself.

18
00:01:31.046 --> 00:01:38.672
And we'll bring that return string here
since it was in that comment, Cool.

19
00:01:38.672 --> 00:01:47.303
So that's done App.tsx,
let's see what's needed here, Match.

20
00:01:47.303 --> 00:01:48.294
Where's that?

21
00:01:50.317 --> 00:01:52.789
It's here, but I'm not seeing a squiggly.

22
00:01:57.933 --> 00:02:01.300
I mean, it's on line 40, so
I'm pretty sure that this works.

23
00:02:01.300 --> 00:02:05.909
If you've used React Router before,
we need to just

24
00:02:05.909 --> 00:02:10.842
specify that this match is
where we find our URL params.

25
00:02:10.842 --> 00:02:17.701
So we've got /teamId, right,
that's like a dynamic portion of the URL.

26
00:02:17.701 --> 00:02:20.459
And we just need to state it as such.

27
00:02:20.459 --> 00:02:27.489
So, Something like this and
this type here,

28
00:02:27.489 --> 00:02:33.034
right, so I'm saying here's an object,
I'm destructuring, right?

29
00:02:33.034 --> 00:02:38.522
I'm gonna get an object,
it has this property on it called match or

30
00:02:38.522 --> 00:02:41.763
match is this thing from React Router.

31
00:02:41.763 --> 00:02:47.179
And for my URL,
the placeholder I have is called teamId.

32
00:02:47.179 --> 00:02:50.617
So it's coming from here,
react-router-dom.

33
00:02:50.617 --> 00:02:55.709
So react-router-dom it's exposing some
type information to me, which is great.

34
00:03:00.480 --> 00:03:03.435
All right, what's going on here?

35
00:03:03.435 --> 00:03:07.927
So I've got this useAsyncDataEffect,
I can tell you what this does.

36
00:03:07.927 --> 00:03:11.380
And we don't need to worry
about how it works too much.

37
00:03:11.380 --> 00:03:18.437
But this through the use of the effect
hook fires off an API call and

38
00:03:18.437 --> 00:03:26.536
effectively it updates a piece of state
when that API response comes back.

39
00:03:26.536 --> 00:03:30.966
Again, I'm simply just taking
things out of the JS.comments and

40
00:03:30.966 --> 00:03:33.902
putting them into the function signature.

41
00:03:35.686 --> 00:03:39.616
So there's number on and
here's number two,

42
00:03:39.616 --> 00:03:44.867
this is like my little options object and
then we return void.

43
00:03:44.867 --> 00:03:50.047
So options, paste, and then return void.

44
00:03:52.013 --> 00:03:56.044
Now promise is gonna want some
type information here, right,

45
00:03:56.044 --> 00:04:00.623
it needs to be a promise any,
which is still fine at this point, right?

46
00:04:00.623 --> 00:04:07.062
We're at explicit anys, interesting so
this was a typo and my JSdoc.

47
00:04:07.062 --> 00:04:13.340
Now, this shows you that I didn't really
get validation in my JS.comment, right?

48
00:04:13.340 --> 00:04:16.946
So this is not a valid type x,
is not a valid type here, but

49
00:04:16.946 --> 00:04:19.590
I did not get red squiggles in my comment.

50
00:04:19.590 --> 00:04:24.952
Because sort of a best effort
to use that type of information.

51
00:04:24.952 --> 00:04:28.751
So here, I'll say,

52
00:04:28.751 --> 00:04:33.133
I take it any and I return a void,
cuz that's my setter.

53
00:04:33.133 --> 00:04:37.207
This would be the setter
that comes with us state,

54
00:04:37.207 --> 00:04:40.614
if you're familiar with that react API.

55
00:04:42.202 --> 00:04:47.815
So down here, this is an any,
I'm just gonna make it explicit, right?

56
00:04:47.815 --> 00:04:51.135
This is one of the bullet points
in my slide for step two,

57
00:04:51.135 --> 00:04:56.025
explicit entities are fine, we're not
trying to make this perfect or anything.

58
00:04:56.025 --> 00:05:01.582
So I'm just gonna catch up with my console
here and just keep clicking on files and

59
00:05:01.582 --> 00:05:05.519
keep, basically,
here I can be a little more specific.

60
00:05:05.519 --> 00:05:10.748
Since, I already have a pretty
strong signal that this is an error,

61
00:05:10.748 --> 00:05:13.239
like an error object coming in.

62
00:05:13.239 --> 00:05:15.699
This is gonna return a string,

63
00:05:15.699 --> 00:05:20.443
other things in this file,
this one's interesting.

64
00:05:20.443 --> 00:05:25.076
So, This in

65
00:05:25.076 --> 00:05:29.455
many cases will work,
in fact, it will always work.

66
00:05:29.455 --> 00:05:34.908
It's not always gonna be useful,
when I say it will always work,

67
00:05:34.908 --> 00:05:42.070
I mean sometimes you'll get square bracket
object not the most interesting string.

68
00:05:42.070 --> 00:05:44.654
So I'm just gonna need to,

69
00:05:48.099 --> 00:05:52.740
I'm just gonna disable this cuz the whole
point here is I'm trying to print

70
00:05:52.740 --> 00:05:55.035
an error message out to the console.

71
00:05:55.035 --> 00:05:58.121
And normally,
I wouldn't wanna do it but, normally,

72
00:05:58.121 --> 00:06:00.824
I would wanna do something
more sophisticated.

73
00:06:00.824 --> 00:06:06.229
But it's sort of a last result
of last resort at this place.

74
00:06:06.229 --> 00:06:11.266
What I mean, in a little more detail is,
I'm checking to see if this value,

75
00:06:11.266 --> 00:06:14.601
this error thing,
it's an instance of an error.

76
00:06:14.601 --> 00:06:19.356
And if it is,
I'm printing it out in a in a nicer way.

77
00:06:19.356 --> 00:06:24.963
I have a method, all right, so I have
a function here to Stringify that Error.

78
00:06:24.963 --> 00:06:27.332
In the case where it's not,

79
00:06:27.332 --> 00:06:31.971
if it's a truthy value,
that is not an error instance,

80
00:06:31.971 --> 00:06:37.518
the best I can really do is Stringify it,
attempt to Stringify it.

81
00:06:37.518 --> 00:06:41.099
So we're already in last resort territory,
so

82
00:06:41.099 --> 00:06:45.856
I feel like it's fair to just try
to coerce it to a string there.

83
00:06:45.856 --> 00:06:50.322
All right, we have a deferred here, raise
your hand if you know to deferred is?

84
00:06:53.058 --> 00:06:56.954
Nobody, Mark knows what a deferred is.

85
00:06:56.954 --> 00:07:01.002
He knows what a deferred is because
he did a lot of work with J Query.

86
00:07:01.002 --> 00:07:05.997
This was part of a lot of
early JavaScript libraries,

87
00:07:05.997 --> 00:07:08.776
I used it in Dojo all the time.

88
00:07:08.776 --> 00:07:12.416
I want you to think of a deferred
as an inverted promise.

89
00:07:12.416 --> 00:07:18.332
Meaning I can hand you a deferred and
I might listen to a promise,

90
00:07:18.332 --> 00:07:23.274
and then pass you the ability
to resolve or reject it.

91
00:07:23.274 --> 00:07:28.529
So imagine if you're spinning up,
if you're opening a modal and

92
00:07:28.529 --> 00:07:32.827
you want to give someone else
the ability to close it or

93
00:07:32.827 --> 00:07:35.708
to do something when it's closed.

94
00:07:35.708 --> 00:07:41.307
So, there maybe some one side needs
the ability to resolve reject,

95
00:07:41.307 --> 00:07:46.333
one side needs the ability to monitor for
when that happens.

96
00:07:46.333 --> 00:07:52.167
So this is sort of an inversion of control
and I need to type this stuff now.

97
00:07:52.167 --> 00:07:55.791
Because these are entities at the moment,
actually,

98
00:07:55.791 --> 00:08:00.135
I wanna follow my role and
we're not going to get too clever here.

99
00:08:00.135 --> 00:08:02.976
We're just gonna make
these anys right now.

100
00:08:05.458 --> 00:08:09.649
Who's seen this hash tag at
the beginning of the field before?

101
00:08:09.649 --> 00:08:16.411
Show hands, Couple of people,
Landry and Peter have seen this before.

102
00:08:16.411 --> 00:08:22.380
So private class fields, this is that hard
privacy we were talking about earlier.

103
00:08:22.380 --> 00:08:27.099
Meaning even if you set a breakpoint like
a debugger, and you looked at one of

104
00:08:27.099 --> 00:08:32.068
these deferreds, you wouldn't be able
to directly access these properties.

105
00:08:32.068 --> 00:08:34.552
You'd be able to get at these down here,

106
00:08:34.552 --> 00:08:37.268
cuz these are exposed
to the outside world.

107
00:08:37.268 --> 00:08:40.463
But I wouldn't, for example,

108
00:08:40.463 --> 00:08:46.154
be able to grab a deferred and
shove a new promise onto it.

109
00:08:46.154 --> 00:08:49.728
Cuz it's a private,
the source of truth is that private field.

110
00:08:52.253 --> 00:08:55.241
All right, still playing
whack-a-mole with errors, okay,

111
00:08:55.241 --> 00:08:57.079
we're almost at the finish line here.

112
00:08:57.079 --> 00:09:01.571
There's our string,
there's our date, delete,

113
00:09:01.571 --> 00:09:06.383
delete, save, one error,
what error at the last one.

114
00:09:09.904 --> 00:09:13.693
But where is it, we're moving so
fast that our editor can't even keep up.

115
00:09:13.693 --> 00:09:17.872
So there's line 22 of Team.tsx,
so there's match.

116
00:09:17.872 --> 00:09:22.725
So this hasn't picked up yet, but I
believe, I bet if I restart my TS server,

117
00:09:27.715 --> 00:09:29.933
If I restarted out there it is see.

118
00:09:29.933 --> 00:09:34.142
So on a larger project,
this isn't even that big of a project, but

119
00:09:34.142 --> 00:09:37.828
as you're refactoring this
as you're changing things,

120
00:09:37.828 --> 00:09:41.908
sometimes you just need to kick
the server to get it back in gear.

121
00:09:43.971 --> 00:09:47.845
Okay, so this is our React Router type and

122
00:09:47.845 --> 00:09:52.948
channelId is the dynamic
portion of the URL this time.

123
00:09:52.948 --> 00:10:00.133
And let's use our auto import magic
match from React Router seems good.

124
00:10:00.133 --> 00:10:05.011
Save Found 0 errors, so
we're done with step two.

125
00:10:05.011 --> 00:10:07.528
Seems like a lot, but let me recap.

126
00:10:07.528 --> 00:10:11.388
It was a lot of code changes, but
a lot of the same code changes.

127
00:10:11.388 --> 00:10:16.711
So in many places, we added this, we had
to in order to get JSX happy with us,

128
00:10:16.711 --> 00:10:22.477
we had to say this is not just a function
that takes an object with the team, right?

129
00:10:22.477 --> 00:10:26.477
This is a React function component,
there are other aspects to

130
00:10:26.477 --> 00:10:30.110
a function component beyond
the props that you receive.

131
00:10:30.110 --> 00:10:37.019
For example, it returns a JSX element,
it takes as an argument, children.

132
00:10:37.019 --> 00:10:40.147
These are not things that
show up in your code, but

133
00:10:40.147 --> 00:10:42.768
they're definitely parts of that type.

134
00:10:42.768 --> 00:10:48.623
And so TypeScript is not gonna be happy
with you until you put that there.

135
00:10:48.623 --> 00:10:51.954
And the reason you don't
see them in your code,

136
00:10:51.954 --> 00:10:56.880
they're part of what you were really
writing when you're using JSX.

137
00:10:56.880 --> 00:11:01.929
They would be explicit parts of
your code if you used react in a TS

138
00:11:01.929 --> 00:11:07.188
file without JSX, you would have
to be passing children around.

139
00:11:07.188 --> 00:11:12.655
You'd have to be explicitly calling
these functions as functions, this

140
00:11:12.655 --> 00:11:18.749
kind of brings to the surface what is JSX
actually doing for you behind the scenes.

141
00:11:18.749 --> 00:11:23.752
It gives you a nice familiar syntax,
but all these little,

142
00:11:23.752 --> 00:11:27.954
like, the reason we had to
apply this little tweak

143
00:11:27.954 --> 00:11:32.273
is because of what JSX
really means under the hood.

144
00:11:32.273 --> 00:11:36.262
The other things that we had
to do were for our routing,

145
00:11:36.262 --> 00:11:39.316
we had to deal with React Router, right?

146
00:11:39.316 --> 00:11:44.403
We had to say, look this match thing,
I have to thread that through,

147
00:11:44.403 --> 00:11:47.399
I have to state what is this match thing.

148
00:11:47.399 --> 00:11:52.231
And that's an important aspect
of us being able to get that

149
00:11:52.231 --> 00:11:55.198
dynamic information from the URL.

150
00:11:55.198 --> 00:12:00.762
By the way, let's see how the apps doing,
let's make sure it actually works.

151
00:12:00.762 --> 00:12:06.106
Look, I'm happy that builds,
oops, just sec,

152
00:12:10.512 --> 00:12:12.575
I may have something
that's already running.

153
00:12:12.575 --> 00:12:21.193
In fact, I'm quite sure I do,
Where might it be?

154
00:12:21.193 --> 00:12:26.684
All right lesson in
trying to find processes,

155
00:12:29.705 --> 00:12:34.841
So I use htop, filter and

156
00:12:34.841 --> 00:12:42.071
it looks like,
I've got a lot of note here.

157
00:12:44.995 --> 00:12:49.654
Just go to check my other terminal
real quick, yep, there it is,

158
00:12:49.654 --> 00:12:53.068
I'd my Parcel Bundler
working in my other tab.

159
00:12:53.068 --> 00:12:54.886
Now, it should work, so

160
00:12:54.886 --> 00:12:59.569
the error I was getting is like
the port is already in use, oops.

161
00:12:59.569 --> 00:13:01.988
All right, time for
the nuclear weapon, [LAUGH]

162
00:13:07.506 --> 00:13:12.111
You don't wanna do that a whole lot,
by the way, oops, what's going on here?

163
00:13:12.111 --> 00:13:14.835
No such directory App.jsx,

164
00:13:24.428 --> 00:13:28.357
I'm gonna chalk this up, well,
let me finish my previous thought,

165
00:13:28.357 --> 00:13:31.430
I feel I don't wanna get too
many tangents deep here.

166
00:13:31.430 --> 00:13:36.279
So you don't wanna do this too often,
this stops things like language servers,

167
00:13:36.279 --> 00:13:40.363
which maintain incremental build
information in the background.

168
00:13:40.363 --> 00:13:46.007
So if you do this all the time,
you're defeating

169
00:13:46.007 --> 00:13:52.349
some of the development tools
that are storing state.

170
00:13:52.349 --> 00:13:56.199
And trying to do as little work as
possible in order to make your offering

171
00:13:56.199 --> 00:13:58.137
environment nice and responsive.

172
00:13:58.137 --> 00:14:02.835
So I would only do it if you find that
you're sort of trying to hunt down

173
00:14:02.835 --> 00:14:07.462
a process doing weird things like,
it's a rare and extreme thing.

174
00:14:07.462 --> 00:14:09.571
All right, now, let me talk to
you about this error message.

175
00:14:09.571 --> 00:14:16.969
So it's App.jsx, obviously, my file
is no longer App.jsx it's a App.tsx.

176
00:14:16.969 --> 00:14:22.299
I suspect that there is some
cached information at some level,

177
00:14:22.299 --> 00:14:27.630
from the old version of this app
that is still hanging around and

178
00:14:27.630 --> 00:14:29.757
causing some problems.

179
00:14:29.757 --> 00:14:35.346
I'm guessing it for two reasons, one,
I don't have a file by this name anymore,

180
00:14:35.346 --> 00:14:39.235
I used to, I don't anymore,
so it's old information.

181
00:14:39.235 --> 00:14:44.860
Number two, I just stopped
a development build that was happening

182
00:14:44.860 --> 00:14:50.184
in another terminal that all
while we were editing this thing,

183
00:14:50.184 --> 00:14:54.116
it's been doing its
thing in the background.

184
00:14:54.116 --> 00:14:58.423
So it may have gone roke, this is where
it's time to blow away your cache,

185
00:14:58.423 --> 00:15:00.512
that's the first thing I would do.

186
00:15:00.512 --> 00:15:05.632
So let's see if we can find
where our cache is, all right,

187
00:15:05.632 --> 00:15:11.605
so ls -a, so that you see all
these .files, here's a candidate.

188
00:15:11.605 --> 00:15:16.581
There's cache .cache,
let's try that and dist,

189
00:15:21.352 --> 00:15:23.489
And then let's try building again.

190
00:15:29.554 --> 00:15:32.378
Already things looking better,

191
00:15:35.895 --> 00:15:40.177
There we go, another thing you
don't have to learn the hard way.

192
00:15:45.344 --> 00:15:49.805
Okay, let's check it out,
seems like slack,

193
00:15:49.805 --> 00:15:53.605
seems like the App works at a high level.

194
00:15:53.605 --> 00:15:55.772
And have a test suite too, but

195
00:15:55.772 --> 00:16:01.166
it's also good to just make sure the App
is actually an App and it fires up.

196
00:16:01.166 --> 00:16:03.870
So that's great, I think it's time for
a second commit.

197
00:16:08.905 --> 00:16:13.805
So we're saying Convert to TS,
and then we're

198
00:16:13.805 --> 00:16:19.079
gonna call this step,
no implicit any, and push.

