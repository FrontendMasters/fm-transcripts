WEBVTT

1
00:00:00.340 --> 00:00:02.180
Let's dig in.

2
00:00:02.180 --> 00:00:09.119
So, our task here is we want
to convert this library,

3
00:00:09.119 --> 00:00:15.470
that's gonna be our bigger effort here.

4
00:00:15.470 --> 00:00:20.900
Now, I received some feedback from
people that tried to apply this

5
00:00:20.900 --> 00:00:27.350
technique to a bigger app and they just
they told me that, step one was easy.

6
00:00:27.350 --> 00:00:29.370
Step two was relatively easy.

7
00:00:29.370 --> 00:00:33.733
Step three was like eight
plus percent of the work and

8
00:00:33.733 --> 00:00:39.287
it didn't provide this idea of,
I just wanna make some progress,

9
00:00:39.287 --> 00:00:42.900
get some ground get it merged in, right?

10
00:00:42.900 --> 00:00:47.540
So step three took a long time weeks
in some cases which is not good.

11
00:00:47.540 --> 00:00:51.480
So I have broken this up further and

12
00:00:51.480 --> 00:00:54.760
this is what's needed at
the professional TypeScript level.

13
00:00:56.420 --> 00:00:59.920
And here's my correction about
these these strict mode things.

14
00:00:59.920 --> 00:01:05.640
So, step one, I would say,
enable strict mode

15
00:01:07.540 --> 00:01:13.526
like 3.1 is enabled strict mode 3.2
this even more strict stuff and

16
00:01:13.526 --> 00:01:18.050
then 3.3 is where you start to apply

17
00:01:18.050 --> 00:01:23.100
some of this additional PS specific
linting that requires type checking.

18
00:01:25.210 --> 00:01:30.302
This is gonna detect even more things and

19
00:01:30.302 --> 00:01:34.644
then this is actually typo here but

20
00:01:34.644 --> 00:01:39.595
we should be turning these on, right?

21
00:01:39.595 --> 00:01:46.240
So this will catch a lot of
things even native browser API's.

22
00:01:46.240 --> 00:01:48.320
That returning any.

23
00:01:48.320 --> 00:01:51.160
So we'll want to make those
in unknown instead of in

24
00:01:51.160 --> 00:01:53.310
any this is where we're getting.

25
00:01:53.310 --> 00:01:56.610
We're approaching like a level of sadness.

26
00:01:56.610 --> 00:02:02.200
That's it's at the upper bound
of what TypeScript supports and

27
00:02:02.200 --> 00:02:03.600
to go further in that direction.

28
00:02:03.600 --> 00:02:06.720
You'd find yourself sort of
getting close to Haskell.

29
00:02:06.720 --> 00:02:07.421
Where.

30
00:02:09.208 --> 00:02:12.970
And there are other programming languages
like this like rust, for example,

31
00:02:12.970 --> 00:02:17.870
where you start to feel like basically if
it compiles, it's very likely to work.

32
00:02:17.870 --> 00:02:20.640
Like the compiler is just it's pushing so

33
00:02:20.640 --> 00:02:26.710
many errors into the compile phase and
it's able to detect so much.

34
00:02:26.710 --> 00:02:30.200
Usually this these compilation
processes are very slow,

35
00:02:30.200 --> 00:02:32.560
because there's a lot more work.

36
00:02:32.560 --> 00:02:36.670
But we're starting to
not approach that level,

37
00:02:36.670 --> 00:02:40.530
but we're as close as TypeScript will
allow us to get when we get to 3.4.

38
00:02:40.530 --> 00:02:45.630
So our challenge here is we're
gonna follow steps one and

39
00:02:45.630 --> 00:02:47.900
two and convert this workshop app.

40
00:02:49.150 --> 00:02:51.020
And I'm gonna do this
we're not gonna break and

41
00:02:51.020 --> 00:02:52.592
then I'll work on this individually.

42
00:02:52.592 --> 00:02:58.840
I'm gonna do it with you here but
that's what we're setting out to do.

43
00:02:58.840 --> 00:03:02.490
I've given you because renaming
is a lot of the work here,

44
00:03:02.490 --> 00:03:06.450
given you some copy paste commands
that will change your JS files,

45
00:03:06.450 --> 00:03:11.450
JSTX files to sorry JSX files to TSX, etc.

46
00:03:11.450 --> 00:03:14.550
So if you invoke all of these in order

47
00:03:16.780 --> 00:03:22.210
you should end up with everything being
the TypeScript version of these files.

48
00:03:22.210 --> 00:03:27.650
And then like this is a big part
of the mundane annoying work.

49
00:03:27.650 --> 00:03:31.210
So you don't have to get in
rename each file individually.

50
00:03:31.210 --> 00:03:35.083
So I will be running each of
those commands in sequence and

51
00:03:35.083 --> 00:03:36.706
we'll see what we get.

52
00:03:40.643 --> 00:03:44.696
So this one is everything
in my source folder.

53
00:03:50.080 --> 00:03:54.621
Going from JSX to TSX,
let's see if that worked.

54
00:03:58.120 --> 00:04:03.209
Looks good, that's a TSX file in our
four renamed seems about right and then

55
00:04:03.209 --> 00:04:08.871
anything that's left over that's just a
regular JSX file like that index JSX here.

56
00:04:08.871 --> 00:04:13.724
That should take care of that and

57
00:04:13.724 --> 00:04:18.397
it does and then the tests start

58
00:04:18.397 --> 00:04:22.720
as JSX tests, another TSX.

59
00:04:26.371 --> 00:04:30.933
Looks like my comments
in the file are bad but

60
00:04:30.933 --> 00:04:35.630
the commands are good and
then this last one.

61
00:04:36.900 --> 00:04:44.260
So if we look at our GIT or staged,
GIT stuff see all these RS for rename.

62
00:04:44.260 --> 00:04:47.085
We've just renamed these files and

63
00:04:47.085 --> 00:04:51.930
I wanna make a commit right now and
here's why.

64
00:04:53.050 --> 00:05:02.030
GIT is pretty particular
about what a rename means.

65
00:05:02.030 --> 00:05:04.860
And if I were to start

66
00:05:04.860 --> 00:05:08.200
modifying these files too much
more before making a commit.

67
00:05:08.200 --> 00:05:11.990
It will start to view this as
the deletion of the old file and

68
00:05:11.990 --> 00:05:13.910
creation of an entirely new file.

69
00:05:15.330 --> 00:05:16.150
What's wrong with that?

70
00:05:17.210 --> 00:05:18.120
I lose my history.

71
00:05:19.390 --> 00:05:23.180
I don't get to track this TypeScript file
back to when it used to be a JavaScript in

72
00:05:23.180 --> 00:05:25.190
a single history.

73
00:05:25.190 --> 00:05:29.250
I like having that on a single file,
it's good to preserve.

74
00:05:29.250 --> 00:05:32.240
So if I make a commit now, even though
some things here might not work

75
00:05:34.190 --> 00:05:36.750
then it'll be a rename
followed by an edit.

76
00:05:38.020 --> 00:05:41.600
As opposed to the deletion of the old
file and a creation of a new,

77
00:05:41.600 --> 00:05:43.940
completely unrelated file.

78
00:05:43.940 --> 00:05:47.112
I don't want that because that's
like one history ending and

79
00:05:47.112 --> 00:05:49.127
then the other beginning that's bad.

80
00:05:53.068 --> 00:05:59.188
And I wanna make, I'm gonna make a branch
called FEM, for Front End Masters,

81
00:05:59.188 --> 00:06:05.280
and I'll be making all my commits to
these and I'll push them straight up.

82
00:06:05.280 --> 00:06:09.916
This one will not work, because there's
other things that must be done to this

83
00:06:09.916 --> 00:06:11.895
file but the commits important.

84
00:06:14.271 --> 00:06:14.771
Oops.

85
00:06:16.815 --> 00:06:20.967
Rename JSTS, git push,

86
00:06:20.967 --> 00:06:25.760
origin not origin master.

87
00:06:25.760 --> 00:06:27.860
Nope, not today.

88
00:06:27.860 --> 00:06:34.396
[LAUGH] Okay,

89
00:06:34.396 --> 00:06:38.860
now we have to get things compiling again.

90
00:06:40.360 --> 00:06:42.368
So I'm gonna run tsc and

91
00:06:42.368 --> 00:06:48.301
let's see where things are bad should
have a bunch of compile errors.

92
00:06:52.643 --> 00:06:54.966
Interesting my scratch .ts is a problem,

93
00:06:54.966 --> 00:06:58.713
I'm gonna just comment this out
because this was sort of just notes.

94
00:07:05.074 --> 00:07:07.591
Okay, 64 errors.

95
00:07:10.804 --> 00:07:11.887
So.

96
00:07:13.180 --> 00:07:17.660
This is we've forgot to do one thing here,
which is important, and

97
00:07:17.660 --> 00:07:20.920
that is, telling the compiler to back off.

98
00:07:20.920 --> 00:07:23.890
So I'm just following
the readme instructions here.

99
00:07:23.890 --> 00:07:28.010
So we've run our little scripts, and then
I'm saying I have a note that says don't

100
00:07:28.010 --> 00:07:32.580
forget to make a small change to
the index.HTML, which is the entry point.

101
00:07:32.580 --> 00:07:35.680
That the bundler here is looking at.

102
00:07:35.680 --> 00:07:39.760
So we were loading index js and

103
00:07:39.760 --> 00:07:42.920
I want to load index ts now
make that small little change.

104
00:07:44.610 --> 00:07:47.971
That's all put that index HTML away,
you'll never need to touch it again.

105
00:07:51.486 --> 00:07:56.420
And then I wanna comment out this

106
00:07:56.420 --> 00:08:02.278
"strict" true and I want to enable.

107
00:08:04.476 --> 00:08:06.870
ImplicitAnys, that's
a double negative there.

108
00:08:06.870 --> 00:08:13.689
"noImplicitAny", the thing that
forbids ImplicitAny, disable it.

109
00:08:18.059 --> 00:08:22.481
I hate double negatives but
no implicitAny, turn it off.

110
00:08:22.481 --> 00:08:29.412
So here we go strict true coming out and
then no implicitAny.

111
00:08:32.855 --> 00:08:39.350
False, all right, so we had 64 errors,
let's see how many we have now.

112
00:08:44.773 --> 00:08:49.400
Ten, lot better already, okay, so

113
00:08:49.400 --> 00:08:54.639
let's start checking some of these out.

114
00:09:00.981 --> 00:09:05.302
I'm just gonna open all of the files
that that these errors relate to,

115
00:09:05.302 --> 00:09:07.511
I can just come in and click on them.

116
00:09:13.370 --> 00:09:18.796
Since there are only 10 of them, okay so.

117
00:09:21.467 --> 00:09:27.640
Here let's take a look we have a missing
return type but that's just a warning.

118
00:09:28.650 --> 00:09:33.420
And implicitly has an any type
because the expression of

119
00:09:33.420 --> 00:09:35.958
type Edie can't be used to index this.

120
00:09:35.958 --> 00:09:41.390
All right, so
here we've got an empty interface, so

121
00:09:41.390 --> 00:09:43.670
we can fix this by doing string.

122
00:09:44.710 --> 00:09:48.430
So now it's just using
a string to index this and

123
00:09:48.430 --> 00:09:51.840
it's still unhappy because this thing,

124
00:09:51.840 --> 00:09:57.290
this cache channel records, the intent
here is for this to be a dictionary.

125
00:09:57.290 --> 00:10:00.730
So we should type it as such,
we can say this is a record.

126
00:10:02.440 --> 00:10:05.990
And this is a utility type
that comes with TypeScript.

127
00:10:05.990 --> 00:10:11.400
It's almost like there's a little
standard library of types, and so

128
00:10:11.400 --> 00:10:16.970
this lets you specify an object whose keys
are of some type in this case strings.

129
00:10:18.220 --> 00:10:21.189
And values are of another type, and is.

130
00:10:23.914 --> 00:10:28.150
And now, so now we got rid
of a lot of the errors here.

131
00:10:28.150 --> 00:10:29.860
What is this?

132
00:10:29.860 --> 00:10:33.950
So we're saying argument for
a git was not provided.

133
00:10:34.950 --> 00:10:38.370
Okay, so look,
let's learn more about this,

134
00:10:38.370 --> 00:10:41.010
I'm gonna just jump into
this API call thing.

135
00:10:41.010 --> 00:10:43.590
All right, so I take two arguments here.

136
00:10:43.590 --> 00:10:45.190
This square bracket thing.

137
00:10:45.190 --> 00:10:48.609
Maybe it's this, yeah I think this
this might have been a little

138
00:10:50.910 --> 00:10:54.800
js doc mistake on my part, but we would,
still have had a similar problem.

139
00:10:56.430 --> 00:11:03.070
These are ways of indicating that,
you know, params might be optional.

140
00:11:03.070 --> 00:11:04.800
TypeScript has a different
way of doing this, so

141
00:11:04.800 --> 00:11:08.140
let's just move this type
information out of the comment.

142
00:11:08.140 --> 00:11:15.197
And into the function signature itself,
so we're just kinda converting these.

143
00:11:19.211 --> 00:11:24.797
All right, and let's go back to think
we were here we were in channels and

144
00:11:24.797 --> 00:11:27.660
look okay, now we're okay.

145
00:11:27.660 --> 00:11:32.270
Right that second argument is optional,
so channels looking at my gutter.

146
00:11:32.270 --> 00:11:36.720
I don't see any red, so
I'm okay with warnings we're, not trying,

147
00:11:36.720 --> 00:11:42.290
like a major risk here is going too far.

148
00:11:42.290 --> 00:11:45.140
Letting the perfect be
the enemy of the good.

149
00:11:45.140 --> 00:11:48.890
You want to get in make some progress,

150
00:11:48.890 --> 00:11:54.000
get that merged and you don't wanna
try to bite off extra pieces.

151
00:11:54.000 --> 00:11:57.210
Beyond this, you can always
make another poll request, but

152
00:11:57.210 --> 00:12:01.560
what the longer you drift away
from trunk from the sorry,

153
00:12:01.560 --> 00:12:05.660
the longer you drift away
from your default branch.

154
00:12:05.660 --> 00:12:11.120
Like main or master, the more trouble
it's gonna be to get this merged in.

155
00:12:11.120 --> 00:12:15.790
And all the while, potentially the rest
of the team contributing to the project.

156
00:12:15.790 --> 00:12:17.910
They're still writing more JavaScript,

157
00:12:17.910 --> 00:12:20.500
they don't get the benefit of
you having converted this.

158
00:12:20.500 --> 00:12:23.860
So you wanna make progress and
then land it.

159
00:12:25.770 --> 00:12:30.180
Same change here that we
made to the the API method,

160
00:12:31.560 --> 00:12:33.980
making sure that in it remains optional.

161
00:12:35.230 --> 00:12:38.410
Get rid of these two, and
we don't need this anymore.

162
00:12:40.170 --> 00:12:44.623
All right, we're down to 17 problems,
it see this includes warnings

163
00:12:44.623 --> 00:12:48.427
to it wasn't 34 but
a large portion of these are not errors.

164
00:12:51.056 --> 00:12:54.780
So here we've got get channel messages,
I know both of these are strings.

165
00:12:56.530 --> 00:13:00.550
You would be able to see that they're
strings If you looked in that DB.JSON file

166
00:13:00.550 --> 00:13:07.310
and you're in the root of your project
right there, just string ideas.

167
00:13:07.310 --> 00:13:12.150
Here we need another record where the key
is a string, the value is in any.

168
00:13:14.050 --> 00:13:16.090
And now we're back down to warnings,
right?

169
00:13:16.090 --> 00:13:17.429
Making great progress.

170
00:13:21.116 --> 00:13:25.084
This let's see,
we have a cached all team's list.

171
00:13:27.268 --> 00:13:29.769
And I believe this is a promise.

172
00:13:32.710 --> 00:13:33.970
That resolves to an array.

173
00:13:36.000 --> 00:13:41.400
And that was enough to fix this,
because API call returns a promise any.

174
00:13:43.050 --> 00:13:46.390
And in this case, I know I'm getting
an array of records back that's why.

175
00:13:47.510 --> 00:13:50.440
But we can already see that it's
a little wishy washy here, right?

176
00:13:50.440 --> 00:13:56.210
Promise any and now I'm saying yeah store
that in my promise array of entities.

177
00:13:56.210 --> 00:14:00.490
Well, we this will start to be
something we'll have to deal with as we

178
00:14:00.490 --> 00:14:02.210
crank up our strictness.

179
00:14:04.840 --> 00:14:09.452
And then,
here we need a record of string to any.

180
00:14:09.452 --> 00:14:16.490
And string,

181
00:14:16.490 --> 00:14:20.280
and looking down here,
all I see are warnings.

182
00:14:20.280 --> 00:14:22.907
So I'm going to try to compile once more.

183
00:14:31.925 --> 00:14:35.480
Still got errors, maybe I forgot
to open one of these files up.

184
00:14:35.480 --> 00:14:36.600
Yep, so

185
00:14:36.600 --> 00:14:40.890
that wasn't show VS code is only gonna
show me problems in files I have open.

186
00:14:41.980 --> 00:14:47.846
Okay, so here, the problem that I
have is I have a couple problems.

187
00:14:50.447 --> 00:14:52.391
So status here is a number.

188
00:14:55.888 --> 00:14:59.992
In a return an HTTPE error, kind right,

189
00:14:59.992 --> 00:15:04.589
I have it right here, so
I can get rid of this.

190
00:15:06.617 --> 00:15:10.860
Now, for some reason,
this isn't being recognized as a type.

191
00:15:10.860 --> 00:15:18.270
Well, here's why, I have it sort of
as close to an a new as I can get.

192
00:15:18.270 --> 00:15:21.105
It's really should be in the new right but

193
00:15:21.105 --> 00:15:24.350
it's though it can be used
kind of like in a new.

194
00:15:26.753 --> 00:15:27.602
Let's make it a real one.

195
00:15:27.602 --> 00:15:35.150
Delete this,

196
00:15:35.150 --> 00:15:41.770
change every colon,
to an equal sign, save.

197
00:15:43.640 --> 00:15:46.780
Now I can return a value of that type,
right?

198
00:15:46.780 --> 00:15:51.230
So it's a pretty, very just a mechanical
transformation, It's not too complicated.

199
00:15:53.660 --> 00:15:59.568
And then here, I just need to pull
things down from my js doc comments and

200
00:15:59.568 --> 00:16:01.442
make them real types.

201
00:16:07.722 --> 00:16:12.945
And then when they're left, kind,
right, I have to state that this

202
00:16:12.945 --> 00:16:19.930
class field exists now coming up in
TypeScript 4.1 the data as of this moment.

203
00:16:19.930 --> 00:16:23.214
I would be able to just do kind,
and it would be fine.

204
00:16:24.776 --> 00:16:28.005
Who actually looks like this
may have already landed.

205
00:16:28.005 --> 00:16:34.910
So until recently, I didn't even
expect this to work to be honest.

206
00:16:34.910 --> 00:16:38.150
Until recently,
I would have had to specify this type, but

207
00:16:38.150 --> 00:16:42.880
because I'm initializing it here we can
kinda figure out what that type would be.

208
00:16:42.880 --> 00:16:51.940
So it removes that extra level of needing
to specify things in two or three places.

209
00:16:51.940 --> 00:16:56.715
Let's check to see if compile works now,
surely we are close.

210
00:16:58.968 --> 00:17:01.140
It's taken a while,
It's a good sign five errors.

211
00:17:02.650 --> 00:17:05.198
Okay, still chasing some things down.

