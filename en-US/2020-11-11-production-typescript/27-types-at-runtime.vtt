WEBVTT

1
00:00:00.080 --> 00:00:03.290
I wanna talk a little bit
about types at runtime.

2
00:00:03.290 --> 00:00:05.840
This is one of the big challenges and

3
00:00:05.840 --> 00:00:10.349
one of the places where people do
a great job getting started and

4
00:00:13.785 --> 00:00:19.598
They feel a little bit let down by
Information, by handling information

5
00:00:19.598 --> 00:00:26.600
that is not available to your app at the
time it compiles, like an API response.

6
00:00:26.600 --> 00:00:30.100
And really it all boils down to this.

7
00:00:30.100 --> 00:00:36.480
It's the fact that when we make our API
calls, and I have my little function here,

8
00:00:36.480 --> 00:00:42.660
like get JSON,
it's just gonna provide, here it is.

9
00:00:43.870 --> 00:00:48.120
It's a promise that resolves to an any,
could be anything.

10
00:00:48.120 --> 00:00:52.278
How do we get from a promise that
resolves to an any, which by the way,

11
00:00:52.278 --> 00:00:54.878
this is not casting or anything like that.

12
00:00:54.878 --> 00:01:01.717
It's literally Fetches API,
that's where it all comes from, right?

13
00:01:01.717 --> 00:01:05.880
A promise that resolves to a response,
that's what fetch returns.

14
00:01:05.880 --> 00:01:09.040
So this is the first byte,
that's when we get this.

15
00:01:09.040 --> 00:01:13.830
And then this is what has us wait until
we get the last byte of the body.

16
00:01:13.830 --> 00:01:15.600
It's a promise that resolves to any.

17
00:01:15.600 --> 00:01:19.510
So, how do we get from
there to well-typed data?

18
00:01:19.510 --> 00:01:22.760
This is what I'm referring
to as types at runtime.

19
00:01:22.760 --> 00:01:28.350
And we're gonna reach for
our trusty concept of a type guard.

20
00:01:28.350 --> 00:01:34.520
And we're gonna check some values on
the API response that we get back,

21
00:01:34.520 --> 00:01:38.910
so that we can get confidence around
this thing being what we hope it is,

22
00:01:38.910 --> 00:01:40.050
what we think it should be.

23
00:01:41.190 --> 00:01:44.370
And then we can give it
a more specific type

24
00:01:44.370 --> 00:01:47.580
that will hold up as we move downstream.

25
00:01:47.580 --> 00:01:51.970
And I'm gonna build on the work that
we've already done in this team's file,

26
00:01:51.970 --> 00:01:56.120
right, because I wanna return a promise
that resolves to an array of teams.

27
00:01:56.120 --> 00:02:01.970
And right now, and kinda right here,
I'm playing it real fast and loose.

28
00:02:01.970 --> 00:02:07.660
Because this is a promise that resolves
to an any, and just saying, a promise

29
00:02:07.660 --> 00:02:11.255
that resolves to an array of teams,
just shove that in, that's fine, right?

30
00:02:11.255 --> 00:02:15.870
An any can be used wherever,
but a lot can go wrong here,

31
00:02:15.870 --> 00:02:19.110
just right on line 7, and on line 17.

32
00:02:19.110 --> 00:02:22.808
So, I'm gonna do this one exercise here.

33
00:02:22.808 --> 00:02:26.723
Now you could do it, maybe leave as
an exercise for you to do on your own,

34
00:02:26.723 --> 00:02:30.269
to these other two files where
you'll apply a similar concept.

35
00:02:30.269 --> 00:02:35.340
But just for, cuz I don't wanna be
repetitive here, I'll just apply it once.

36
00:02:35.340 --> 00:02:40.670
So here's what we want to do,
we get an API response back, and

37
00:02:40.670 --> 00:02:46.342
what we want to do is say,
I want to say .then,

38
00:02:46.342 --> 00:02:49.660
or you could use the async
await equivalent.

39
00:02:49.660 --> 00:02:52.470
But I like the way this
feels a bit better.

40
00:02:52.470 --> 00:02:54.405
So .then and we get this rawData.

41
00:02:57.476 --> 00:03:02.409
And here we could say,
assertDataIsWhatWeWant.

42
00:03:09.400 --> 00:03:11.710
This is approximately what
we wanna do conceptually.

43
00:03:13.070 --> 00:03:18.140
So this assert should throw
if things don't look right.

44
00:03:19.200 --> 00:03:24.093
And if things do look right,
we should end up with the type we want.

45
00:03:24.093 --> 00:03:29.973
So we'll either get well typed data
coming out of this promise chain,

46
00:03:29.973 --> 00:03:34.567
or we'll basically be hitting,
we'll be throwing.

47
00:03:34.567 --> 00:03:39.369
And then whoever's handling this promise,
they'll have a catch, and

48
00:03:39.369 --> 00:03:43.880
they'll handle that,
that will become a runtime error.

49
00:03:43.880 --> 00:03:47.564
So it's either we have the data
we were looking for or

50
00:03:47.564 --> 00:03:49.757
we have an informative error.

51
00:03:49.757 --> 00:03:54.236
So let's work on fleshing this out, and

52
00:03:54.236 --> 00:03:59.638
really what I want here
is assertIsTypedArray,

53
00:03:59.638 --> 00:04:08.220
pass in the raw data and then I'm gonna
pass in an iTeam, or sorry, isITeam.

54
00:04:10.307 --> 00:04:15.355
I want a function that will let me
assert that something is an array,

55
00:04:15.355 --> 00:04:20.424
and assert that each member of that
array passes a particular test.

56
00:04:21.882 --> 00:04:24.537
So I'm gonna actually
implement this right up here.

57
00:04:24.537 --> 00:04:28.143
So we're all in the same file,
it makes it really easy.

58
00:04:28.143 --> 00:04:32.282
So, first isITeam.

59
00:04:38.377 --> 00:04:40.273
We're gonna take an arg,
which could be anything.

60
00:04:40.273 --> 00:04:46.761
And the return value of this
is gonna be arg is ITeam.

61
00:04:46.761 --> 00:04:53.104
So we're returning a Boolean, but
this Boolean should be regarded

62
00:04:53.104 --> 00:04:58.690
as a signal to the compiler of
whether arg is an Iteam or not.

63
00:04:58.690 --> 00:05:01.400
And what is an ITeam?

64
00:05:01.400 --> 00:05:02.780
Well, it's got all these things here.

65
00:05:08.763 --> 00:05:11.412
So let's see if we can just check for
these conditions.

66
00:05:14.158 --> 00:05:20.763
Return type of arg.iconUrl equals string,

67
00:05:20.763 --> 00:05:26.324
and type of arg.name equals string,

68
00:05:26.324 --> 00:05:31.535
and type of arg.ID is a string, and

69
00:05:31.535 --> 00:05:37.291
well, we'll relax a little bit here.

70
00:05:37.291 --> 00:05:41.088
Array.isArray channels.

71
00:05:46.455 --> 00:05:51.315
So it's important to get these
right because I'm creating a piece

72
00:05:51.315 --> 00:05:56.346
of code here that's supposed to be
a matchup of a concept to be honored

73
00:05:56.346 --> 00:06:01.380
at compile time, and
a condition that is evaluated at runtime.

74
00:06:01.380 --> 00:06:06.410
If these are misaligned, I have
effectively baked a lie into my system,

75
00:06:06.410 --> 00:06:09.490
and the type checking will
be weaker because of my lie.

76
00:06:09.490 --> 00:06:12.720
So it's really important
to get these right.

77
00:06:12.720 --> 00:06:19.040
If these are not good, these type guards,
if they're not good, they dramatically

78
00:06:19.040 --> 00:06:23.640
weakened the kinds of guarantees you
get from from the broader system.

79
00:06:23.640 --> 00:06:26.190
So there's your isITeam,
and then we're gonna

80
00:06:26.190 --> 00:06:31.090
build something a little more complicated,
and that is this assertIsTypedArray.

81
00:06:31.090 --> 00:06:33.200
We're gonna use generic here.

82
00:06:34.450 --> 00:06:37.351
So this will be generic over type T.

83
00:06:41.896 --> 00:06:46.729
And it's gonna return So

84
00:06:46.729 --> 00:06:51.886
it'll take in, sorry,
it'll take you in any case that

85
00:06:51.886 --> 00:06:57.156
isn't necessarily even an array,
gotta be prepared for

86
00:06:57.156 --> 00:07:03.667
that, and we'll say arg is, sorry,
asserts arg is an array of T's.

87
00:07:06.386 --> 00:07:07.990
That's what my return value means.

88
00:07:09.490 --> 00:07:11.000
Or whether I return or

89
00:07:11.000 --> 00:07:15.218
throw, because this is the new kind
of type guard, the assert based one.

90
00:07:15.218 --> 00:07:21.720
So I'm gonna take in my, potentially
an array, it's my job to check for that.

91
00:07:21.720 --> 00:07:24.020
And then I'll take in a type
guard as an argument, and

92
00:07:24.020 --> 00:07:29.130
I can actually,
I'll just call this my check, right?

93
00:07:29.130 --> 00:07:34.723
I can say that I'm taking a function

94
00:07:34.723 --> 00:07:40.317
that accepts an any as an argument,

95
00:07:40.317 --> 00:07:44.055
and it returns val is T.

96
00:07:48.361 --> 00:07:49.540
We're getting very meta here.

97
00:07:49.540 --> 00:07:53.189
I have,
it's like a higher order type guard.

98
00:07:54.280 --> 00:07:55.920
This checks for an array, but

99
00:07:55.920 --> 00:08:01.590
I give it a type guard that it uses
to evaluate each member of the array.

100
00:08:01.590 --> 00:08:08.780
So we can say return, so we'll write
this the easiest way I can manage here.

101
00:08:08.780 --> 00:08:16.119
So if, The value itself is
just not an array of any kind

102
00:08:21.777 --> 00:08:22.808
And why, sorry.

103
00:08:22.808 --> 00:08:27.142
We're calling arg,
it's the value passed in here.

104
00:08:27.142 --> 00:08:31.750
Throw new error, not an array.

105
00:08:35.600 --> 00:08:39.162
And I might even,
cuz I know where this is coming from,

106
00:08:41.331 --> 00:08:46.734
I might JSON stringify it cuz I
know this came in a HTTP response,

107
00:08:46.734 --> 00:08:51.954
there's just no way that this
is a non-serializable value.

108
00:08:51.954 --> 00:08:57.017
Non-serializable value would be if
child holds a reference to parent,

109
00:08:57.017 --> 00:09:02.080
you could just sort of go all the way
down and recursively print forever,

110
00:09:02.080 --> 00:09:05.240
if you're trying to
serialize that to JSON.

111
00:09:06.250 --> 00:09:11.895
So if it's not an array throw,
okay, so now, we know that,

112
00:09:11.895 --> 00:09:16.820
TypeScript's smart enough to
figure out if that check failed,

113
00:09:16.820 --> 00:09:21.350
is array, that's not true, we must be
dealing with an array at this point.

114
00:09:21.350 --> 00:09:27.864
So now, I'll say const violators

115
00:09:27.864 --> 00:09:33.035
equals arg.filter(Item

116
00:09:35.880 --> 00:09:39.622
Check(item)).

117
00:09:39.622 --> 00:09:44.486
So what we're saying here is, give me
a list of violations, where violations

118
00:09:44.486 --> 00:09:48.626
are defined as those members in
the collection who fail the check.

119
00:09:51.028 --> 00:09:54.252
There's a more interesting way to do this,
and more efficient.

120
00:10:14.723 --> 00:10:17.775
So when I was designing
this example I was torn.

121
00:10:17.775 --> 00:10:25.270
This is clearly more efficient, array.some
is faster because it will give up after

122
00:10:25.270 --> 00:10:29.140
it finds its first violation, doesn't need
to make it all the way through the array.

123
00:10:30.380 --> 00:10:35.060
So in theory, like some of
the best case scenarios do better,

124
00:10:35.060 --> 00:10:37.130
it's just a little bit
more annoying to debug.

125
00:10:38.970 --> 00:10:40.060
This goes wrong,

126
00:10:40.060 --> 00:10:43.820
you don't have a list of things that
were found to be objectionable.

127
00:10:43.820 --> 00:10:46.900
And I can't print out any
information about violators,

128
00:10:46.900 --> 00:10:50.630
because those are not available
outside of the method.

129
00:10:50.630 --> 00:10:52.791
It could print out the whole thing,
but yeah,

130
00:10:52.791 --> 00:10:54.630
maybe I'll print out the whole thing.

131
00:10:54.630 --> 00:10:55.877
I was willing to do it up here.

132
00:10:59.904 --> 00:11:02.831
So there you go,
we've got assertIsTypedArray, and look,

133
00:11:02.831 --> 00:11:04.740
it kind of just works.

134
00:11:04.740 --> 00:11:06.265
Look at the type of raw data.

135
00:11:06.265 --> 00:11:10.120
Now it's an ITeam,
it's an array of ITeams.

136
00:11:10.120 --> 00:11:15.057
And look at what we return now, we can
actually, even if we got rid of this type,

137
00:11:15.057 --> 00:11:19.360
we're still returning a promise
that resolves to an array of teams.

138
00:11:20.460 --> 00:11:24.450
This is how you handle runtime data,
you want ta type guard and

139
00:11:24.450 --> 00:11:30.040
you just got to balance performance and
safety, right?

140
00:11:30.040 --> 00:11:34.590
So these are not exceedingly expensive
checks to perform on each member of

141
00:11:34.590 --> 00:11:40.410
a collection until you're dealing with
thousands of items, not such a big deal.

142
00:11:42.250 --> 00:11:46.060
And then this will either throw and
let you have meaningful error,

143
00:11:47.910 --> 00:11:52.360
or if you make it past this assertion and
make it down here,

144
00:11:52.360 --> 00:11:55.050
now we're ready to return the type
that we were after the whole time.

145
00:11:56.720 --> 00:11:57.800
Go with this approach.

146
00:11:57.800 --> 00:12:01.910
Do not attempt to get
TypeScript into the browser.

147
00:12:01.910 --> 00:12:06.690
And this will be considerably faster
than something like React prop types,

148
00:12:06.690 --> 00:12:12.720
which is just an even more involved
runtime type checking thing that

149
00:12:12.720 --> 00:12:18.660
many teams don't use anymore because it's
generally understood to be high overhead.

