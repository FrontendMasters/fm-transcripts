WEBVTT

1
00:00:00.430 --> 00:00:03.020
So the last category of things, and

2
00:00:03.020 --> 00:00:05.690
there's some details I'm skipping
over here, some things that I feel

3
00:00:05.690 --> 00:00:10.020
are potentially less relevant
to the everyday TypeScript user.

4
00:00:10.020 --> 00:00:13.270
But the last category of things
that have been added to TypeScript

5
00:00:13.270 --> 00:00:18.170
since the last course was
recorded are really two things.

6
00:00:18.170 --> 00:00:20.930
Number one, as of TypeScript 3.7,

7
00:00:20.930 --> 00:00:24.400
declaration files can be
generated from JavaScript.

8
00:00:24.400 --> 00:00:30.285
So in your tsconfig,
you can have allowJs and

9
00:00:30.285 --> 00:00:33.895
you can even have checkJs.

10
00:00:33.895 --> 00:00:38.699
So this will allow you to
type-check well-documented

11
00:00:38.699 --> 00:00:43.306
JavaScript as if it were
kind of TypeScript, right?

12
00:00:43.306 --> 00:00:48.021
So you use JSDoc comments and
you say, here's my parameter

13
00:00:48.021 --> 00:00:52.936
coming into this function,
it is of type string, etc, etc.

14
00:00:52.936 --> 00:00:59.488
So now you could conceivably have
set your code base up that way.

15
00:00:59.488 --> 00:01:03.625
And if it were a library,
as of TypeScript 3.7,

16
00:01:03.625 --> 00:01:08.160
you can generate declaration files,
those DTS files.

17
00:01:08.160 --> 00:01:12.361
So consumers of your library
will be able to get all

18
00:01:12.361 --> 00:01:17.510
the benefits as if you wrote
your library in TypeScript.

19
00:01:17.510 --> 00:01:24.394
This was not the case until recently, and
it's a bigger deal than one would think.

20
00:01:24.394 --> 00:01:29.405
Because many documentation tools, in fact,
the one I'm going to talk about today,

21
00:01:29.405 --> 00:01:32.274
they consume declaration
files as their input.

22
00:01:32.274 --> 00:01:38.323
So more than simply making that file
available for autocomplete purposes,

23
00:01:38.323 --> 00:01:42.672
this allows well-documented
JavaScript to be more of

24
00:01:42.672 --> 00:01:47.694
a first-class citizen in
the TypeScript ecosystem, right?

25
00:01:47.694 --> 00:01:51.001
There are just fewer and
fewer things where,

26
00:01:51.001 --> 00:01:54.959
you don't get that benefit
unless you're using a TS file.

27
00:01:54.959 --> 00:01:59.047
Finally, last thing I wanna mention
is the concept of type-only imports.

28
00:01:59.047 --> 00:02:02.574
I will show you how this works when
we get into the code base, but

29
00:02:02.574 --> 00:02:05.388
it's really just something
like the following.

30
00:02:05.388 --> 00:02:11.201
import type, and then we find the file.

31
00:02:19.628 --> 00:02:21.184
So we do it like this.

32
00:02:21.184 --> 00:02:25.513
I've got a module here,
and I can just say,

33
00:02:25.513 --> 00:02:30.779
I simply want the type
information from this module,

34
00:02:30.779 --> 00:02:33.831
I'm not importing the value.

35
00:02:33.831 --> 00:02:39.503
So if I were here to try to invoke this,
I think I should get an error.

36
00:02:43.996 --> 00:02:49.740
There we go, it cannot be used as a value
because it was imported using import type.

37
00:02:49.740 --> 00:02:51.110
Why is this important?

38
00:02:51.110 --> 00:02:56.740
Well, raise your hand if you
use something like Parcel or

39
00:02:56.740 --> 00:03:01.093
Webpack as your module
bundler in your app.

40
00:03:01.093 --> 00:03:04.364
import type allows us to
consume type information only.

41
00:03:04.364 --> 00:03:06.807
We took a show of hands in the class,

42
00:03:06.807 --> 00:03:11.625
and turns out a lot of people use
Webpack or Parcel, things like this.

43
00:03:11.625 --> 00:03:16.855
So these module bundlers,
they rely on basically analyzing

44
00:03:16.855 --> 00:03:22.300
the code that you import as
a mechanism of splitting things up.

45
00:03:22.300 --> 00:03:24.520
So you don't need to send
more code to your users,

46
00:03:24.520 --> 00:03:26.462
especially for browser-based apps.

47
00:03:26.462 --> 00:03:29.707
Don't wanna send more code to them than
they need for maybe that first page load.

48
00:03:29.707 --> 00:03:34.746
Import type is a way that we can refer
to type information in another module,

49
00:03:34.746 --> 00:03:37.830
without saying,
I actually need that value.

50
00:03:37.830 --> 00:03:42.150
I need that function because I plan
to invoke that function, right?

51
00:03:42.150 --> 00:03:49.657
So this won't sort of trigger additional
code being included in your bundle.

52
00:03:49.657 --> 00:03:52.211
Type information's just
a build-time construct,

53
00:03:52.211 --> 00:03:55.910
so this is a nice way of making sure
that everything remains loosely coupled.

