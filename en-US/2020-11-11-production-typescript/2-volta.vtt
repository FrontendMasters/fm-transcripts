WEBVTT

1
00:00:00.220 --> 00:00:02.160
So we got a question in the class.

2
00:00:02.160 --> 00:00:04.690
What is Volta and
how does it relate to NVM?

3
00:00:04.690 --> 00:00:10.730
So both of these tools aim
to allow a team to define,

4
00:00:10.730 --> 00:00:14.100
we're using this version
of node in our project.

5
00:00:14.100 --> 00:00:18.490
And this is useful if you have, some
things that may be legacy projects and

6
00:00:18.490 --> 00:00:21.080
they're using an end of
life version of node.

7
00:00:21.080 --> 00:00:24.752
Another project is using,
the latest stable release.

8
00:00:24.752 --> 00:00:27.570
You wanna make sure that you
have the right tools for

9
00:00:27.570 --> 00:00:31.130
the job in each of these projects and
you're not simply trying to find

10
00:00:31.130 --> 00:00:34.540
one global version that you use
across everything you work on.

11
00:00:34.540 --> 00:00:36.920
So both tools try to solve that problem.

12
00:00:36.920 --> 00:00:41.790
The way NVM solves this problem is
by managing a set of environment

13
00:00:41.790 --> 00:00:43.550
variables, right?

14
00:00:43.550 --> 00:00:47.042
And that will tell you that will alter
your path effectively as you change from

15
00:00:47.042 --> 00:00:49.850
folder to folder,
go from project to project.

16
00:00:49.850 --> 00:00:51.420
Volta does things a bit differently.

17
00:00:52.820 --> 00:00:57.400
With Volta it actually
will replace node your

18
00:00:57.400 --> 00:01:02.461
global node command with
a shim that allows it to,

19
00:01:02.461 --> 00:01:07.777
when invoked download
the right version on the fly.

20
00:01:07.777 --> 00:01:09.586
So there are no setup commands and

21
00:01:09.586 --> 00:01:13.082
there's no overhead cuz this thing
is volt has written in rust.

22
00:01:13.082 --> 00:01:17.690
So there's maybe like a single digit
number of milliseconds added overhead

23
00:01:17.690 --> 00:01:22.874
instead of, running some JavaScript code
or running other things as more overhead.

24
00:01:22.874 --> 00:01:25.300
So effectively,
it's like it's really lightweight.

25
00:01:25.300 --> 00:01:29.430
It stays out of the way there
GitHub actions written for it so

26
00:01:29.430 --> 00:01:31.850
it makes it really easy to use in CI.

27
00:01:31.850 --> 00:01:35.610
And it works with yarn as well
it's not just about node.

28
00:01:35.610 --> 00:01:37.850
So different versions of yarn matters,

29
00:01:37.850 --> 00:01:42.310
especially if you get into things
like yarn workspaces and monorepos.

30
00:01:42.310 --> 00:01:46.645
So it's just as important to solve
this problem in other tools as well,

31
00:01:46.645 --> 00:01:50.808
and, this makes it really easy.

32
00:01:50.808 --> 00:01:55.137
So, One way I can

33
00:01:55.137 --> 00:02:00.028
demonstrate that this is
this is a different animal

34
00:02:00.028 --> 00:02:05.280
than NVM is invoking command
as if it were global.

35
00:02:05.280 --> 00:02:10.730
And I think what we'll see is volta
will choose the correct version to run

36
00:02:10.730 --> 00:02:16.238
based on a global invocation that
is performed within a project.

37
00:02:16.238 --> 00:02:21.020
So I'm gonna go out of my project
folder and I'm gonna run TSC and

38
00:02:21.020 --> 00:02:24.250
let's see what version we have.

39
00:02:24.250 --> 00:02:25.250
All right now,

40
00:02:25.250 --> 00:02:30.720
just temporarily I'm going to downgrade
my version of the TypeScript compiler.

41
00:02:31.910 --> 00:02:35.066
Let's do the figure 3.8 release.

42
00:02:40.095 --> 00:02:41.423
Then we're gonna install that.

43
00:02:46.109 --> 00:02:48.377
And what we should see
is if I go back here and

44
00:02:48.377 --> 00:02:52.475
I see the version of the TypeScript
compiler I'm using, there's 403 and

45
00:02:52.475 --> 00:02:55.264
if I go within my project,
let's see if this works.

46
00:02:57.704 --> 00:02:59.310
There we go.

47
00:02:59.310 --> 00:03:04.440
So what, we see here is I can just
run TSC I can forget volta is even

48
00:03:04.440 --> 00:03:10.070
installed on my system and
it's choosing the latest 3.x release,

49
00:03:10.070 --> 00:03:13.820
right, that little carret
means I flip forward to 3.9.

50
00:03:13.820 --> 00:03:17.800
If you're using NVM, it wouldn't have
solved the problem in this way would only

51
00:03:17.800 --> 00:03:20.510
be worried about node and nodes version.

52
00:03:20.510 --> 00:03:25.330
But here I can have a global installation,
I can run it as if it's global.

53
00:03:26.850 --> 00:03:30.990
But because I'm in
the context of a project and

54
00:03:30.990 --> 00:03:35.520
that project has a specified
version of the typescript compiler,

55
00:03:35.520 --> 00:03:41.280
has a specified version of node and yarn,
things are gonna just kinda wire up.

56
00:03:41.280 --> 00:03:45.355
And, my intent is,
I wanna run this in this workspace,

57
00:03:45.355 --> 00:03:49.713
and it should be this version
even though I'm running TSC.

58
00:03:49.713 --> 00:03:53.750
I don't have to run yarn TSC, for
example, that's a big difference.

59
00:04:00.690 --> 00:04:02.270
I'm gonna undo this change real quick.

60
00:04:03.580 --> 00:04:10.720
&gt;&gt; And in chat people are asking if
you can use NVM instead of yarn.

61
00:04:10.720 --> 00:04:14.990
&gt;&gt; All right, so
I would highly recommend using yarn you're

62
00:04:14.990 --> 00:04:19.630
welcome to try NVM if you have issues,

63
00:04:19.630 --> 00:04:23.430
then my first the first thing I'm gonna
ask you to do is try to use yarn.

64
00:04:23.430 --> 00:04:23.940
Here's why.

65
00:04:23.940 --> 00:04:26.800
I have a yarn.lock file here.

66
00:04:26.800 --> 00:04:30.520
So I've specified some versions of
dependencies, particularly if you're

67
00:04:30.520 --> 00:04:34.530
watching a recorded version of this
course, there may be newer versions of

68
00:04:34.530 --> 00:04:38.860
these dependencies available, if you
were to just install all of them fresh.

69
00:04:38.860 --> 00:04:44.232
This lock file is very important, because
what works for me is the exact versions

70
00:04:44.232 --> 00:04:49.607
in that lock file and only if you're using
yarn, will that lock file be honored.

71
00:04:49.607 --> 00:04:53.460
If you use NVM, you're just gonna
get the latest of everything.

72
00:04:53.460 --> 00:04:57.095
So I would really recommend
that you use yarn.

73
00:04:57.095 --> 00:05:00.585
If you have a strong preference, the good
news is yarn is not really an important

74
00:05:00.585 --> 00:05:02.840
aspect of what we're gonna
be working with today.

75
00:05:03.890 --> 00:05:09.386
&gt;&gt; Yeah, I think the question was more
around yarn and volta or sorry NVM and

76
00:05:09.386 --> 00:05:13.660
volta, if you're wanting
to use volta with NVM.

77
00:05:13.660 --> 00:05:17.227
&gt;&gt; Understood, all right,
so the question is,

78
00:05:17.227 --> 00:05:21.622
does volta do the same thing for
NVM that it does for yarn?

79
00:05:21.622 --> 00:05:22.310
The answer's yes.

