WEBVTT

1
00:00:00.940 --> 00:00:04.780
So now we're finished with
my like standard boilerplate

2
00:00:04.780 --> 00:00:07.520
TypeScript Project Setup.

3
00:00:07.520 --> 00:00:12.120
And I want to spend a moment
looking at the notes section five.

4
00:00:12.120 --> 00:00:13.510
I want to spend a moment

5
00:00:15.650 --> 00:00:19.640
talking about what we've just
done in a little bit more detail.

6
00:00:20.680 --> 00:00:28.510
So, also note that I the latest code
has been pushed to this little repo.

7
00:00:28.510 --> 00:00:33.820
And so, you can take a look at that
as we discuss a few things and

8
00:00:33.820 --> 00:00:37.400
I want you to understand
what we're looking at here.

9
00:00:37.400 --> 00:00:40.100
My hope is that this is
a simple enough setup

10
00:00:40.100 --> 00:00:43.500
that you can really have
a grasp around what's going on.

11
00:00:45.200 --> 00:00:52.550
So we talked already about our tsconfig,
and what exactly strict means.

12
00:00:52.550 --> 00:00:55.560
In the notes, I have a link here.

13
00:00:57.200 --> 00:01:01.730
To the source of truth in the TypeScript
project itself, where you can look and

14
00:01:01.730 --> 00:01:07.030
see which of the various compiler
options are included with strict mode.

15
00:01:07.030 --> 00:01:10.180
So you can see for yourself there,
don't take my word for it.

16
00:01:10.180 --> 00:01:14.000
That's where that information is located
and as the project evolves unless they

17
00:01:14.000 --> 00:01:18.420
move that somewhere else, I will
update the link if we if we have to.

18
00:01:18.420 --> 00:01:21.020
But that's where you can see

19
00:01:21.020 --> 00:01:24.960
exactly what strict means because it's
not just things that begin with strict.

20
00:01:26.440 --> 00:01:27.930
No implicit any.

21
00:01:27.930 --> 00:01:32.780
So that's one of the things that's
included with strict, this effectively

22
00:01:32.780 --> 00:01:38.086
means In the absence of the ability
to infer the type of something,

23
00:01:38.086 --> 00:01:42.638
we default to

24
00:01:42.638 --> 00:01:48.760
asking the code author to
tell us something, right.

25
00:01:48.760 --> 00:01:51.230
So if we have like a function
that takes an argument,

26
00:01:51.230 --> 00:01:52.749
subtract is a great example here.

27
00:01:54.230 --> 00:01:55.713
I don't say what b is.

28
00:01:58.893 --> 00:02:00.490
It implicitly has an any type.

29
00:02:00.490 --> 00:02:02.850
There's no way to know what b is.

30
00:02:02.850 --> 00:02:03.350
No way.

31
00:02:04.480 --> 00:02:08.520
I mean, if in some languages you
could go down to line 10 and

32
00:02:08.520 --> 00:02:13.460
see this is minus operator, and
so we could reverse flow up

33
00:02:13.460 --> 00:02:17.360
into the function signature and
understand that this is the spin number.

34
00:02:17.360 --> 00:02:18.690
TypeScript doesn't work that way.

35
00:02:20.020 --> 00:02:24.060
Typed information only flows in
one direction and if for example,

36
00:02:24.060 --> 00:02:26.590
I did this could be string concatenation,
right?

37
00:02:26.590 --> 00:02:30.980
Not every operator it's like
a smoking gun in terms of

38
00:02:30.980 --> 00:02:33.500
a clue to what type something is.

39
00:02:33.500 --> 00:02:36.870
So if implicit anywhere allowed,
this would be fun, but

40
00:02:36.870 --> 00:02:41.890
here if I really wanted any,
I have to be explicit about it.

41
00:02:41.890 --> 00:02:44.290
And then now we're back to a warning,
not an error.

42
00:02:44.290 --> 00:02:48.820
So that's no implicit and
it's defaulting to

43
00:02:48.820 --> 00:02:53.850
the author must tell us something as
opposed to just defaulting to loose mode.

44
00:02:53.850 --> 00:02:58.090
Loose mode being the way let
works in regular JavaScript.

45
00:02:59.600 --> 00:03:03.800
No implicit this, so
that's part of strict mode.

46
00:03:03.800 --> 00:03:05.679
So let's look at this.

47
00:03:10.541 --> 00:03:20.330
So let's say we have a button
Actually I can just do this.

48
00:03:25.423 --> 00:03:28.962
So, we'll talk about what
declare beans later snow for

49
00:03:28.962 --> 00:03:32.000
now it gets rid of that error message.

50
00:03:32.000 --> 00:03:36.629
So if I did lm add event listener,
click and

51
00:03:36.629 --> 00:03:39.982
then I follow up with a function

52
00:03:43.256 --> 00:03:48.676
So, can somebody in the class
tell me if I if I do this,

53
00:03:48.676 --> 00:03:53.960
what might I see when
this button is clicked?

54
00:03:53.960 --> 00:03:56.840
What is this on line 16?

55
00:03:56.840 --> 00:03:58.470
What am I gonna see there?

56
00:03:58.470 --> 00:04:00.830
Anyone have an idea?

57
00:04:00.830 --> 00:04:02.218
I'll give you a clue.

58
00:04:02.218 --> 00:04:04.280
&gt;&gt; I've-
&gt;&gt; I've seen the elements.

59
00:04:04.280 --> 00:04:05.166
&gt;&gt; It is the element.

60
00:04:05.166 --> 00:04:07.430
Yeah, I've chosen this example for
a reason, right?

61
00:04:07.430 --> 00:04:11.710
It's a very specific example,
so it's relevant here.

62
00:04:11.710 --> 00:04:12.750
Yeah, it's the element.

63
00:04:12.750 --> 00:04:15.402
So I could do like this class name.

64
00:04:15.402 --> 00:04:17.180
Hey, there it is.

65
00:04:17.180 --> 00:04:18.730
And in fact, TypeScript knows about it.

66
00:04:20.240 --> 00:04:23.280
It knows that this is
an HTML button element.

67
00:04:23.280 --> 00:04:29.100
So, when defining this callback here,

68
00:04:30.100 --> 00:04:37.600
it has to say, you must pass me
a function whose this is the right thing.

69
00:04:38.680 --> 00:04:42.900
Because if I were in here, say it was
a method I pulled off of something,

70
00:04:42.900 --> 00:04:48.130
something that's already bound,
this will no longer be that element.

71
00:04:48.130 --> 00:04:53.710
So that is what strict or
no implicit this is all about.

72
00:04:53.710 --> 00:04:59.920
It means that if you rely on
this being something special for

73
00:04:59.920 --> 00:05:03.860
a free standing function,
you must state so.

74
00:05:05.710 --> 00:05:11.870
You can't just get away with using this,
like anything goes.

75
00:05:11.870 --> 00:05:13.220
So good to have that enabled.

76
00:05:15.220 --> 00:05:19.900
Always strict we talked about that,
that's JavaScript like use strict.

77
00:05:21.030 --> 00:05:22.110
Bind, call apply.

78
00:05:22.110 --> 00:05:23.774
That's just literally

79
00:05:29.317 --> 00:05:32.580
It's this function that bind signature.

80
00:05:32.580 --> 00:05:37.071
So they're historically because
like TypeScript itself did not have

81
00:05:37.071 --> 00:05:39.821
features to support proper typings here.

82
00:05:41.992 --> 00:05:46.852
There was sort of a much looser mode
that this was allowed to operate on and

83
00:05:46.852 --> 00:05:51.711
like so, enabling strict bind called ply,
sets the types of those three

84
00:05:51.711 --> 00:05:57.050
methods on the function prototype to
exactly what you would hope they would be,

85
00:05:57.050 --> 00:06:01.690
where the arguments passed to
the function are validated.

86
00:06:01.690 --> 00:06:06.630
Right.
So here if I were to say, subtract bind,

87
00:06:06.630 --> 00:06:09.502
so we'll say, undefined.

88
00:06:09.502 --> 00:06:14.590
And now, you can see that I'm being asked
for a number, our zero has to be a number.

89
00:06:15.810 --> 00:06:17.210
Or I could pass in two numbers.

90
00:06:18.290 --> 00:06:21.020
Well, now I'm seeing the generic
implementations here, but

91
00:06:21.020 --> 00:06:23.550
I could do three and
four and it would be fine.

92
00:06:23.550 --> 00:06:28.250
But if I did this Interesting,
it's still letting me do it.

93
00:06:30.696 --> 00:06:32.600
Because I have an error here.

94
00:06:32.600 --> 00:06:35.820
It's letting me do it
because I've been bad.

95
00:06:35.820 --> 00:06:38.800
Yeah, so
this is exactly what you'd want, right?

96
00:06:38.800 --> 00:06:43.360
You want that validation, you want
the signature of subtract to be taken into

97
00:06:43.360 --> 00:06:48.200
account with bind,
because this would be nonsense

98
00:06:48.200 --> 00:06:52.020
to pass the string four like you're
just asking for trouble there.

99
00:06:52.020 --> 00:06:55.810
So that's fine call plays
strict null checks.

100
00:06:55.810 --> 00:07:03.860
So this option is all about making sure
that no values are their own type.

101
00:07:05.170 --> 00:07:10.380
With strict null checks, disabled, you

102
00:07:10.380 --> 00:07:17.850
know isn't allowed value in any type,
numbers can be a number or null.

103
00:07:17.850 --> 00:07:20.840
Strings can be a string or null.

104
00:07:20.840 --> 00:07:27.510
And this is a big problem because we often
rely on type narrowing like we had declare

105
00:07:28.510 --> 00:07:34.940
const as string or null.

106
00:07:34.940 --> 00:07:36.565
So if this were our string

107
00:07:43.771 --> 00:07:47.283
We want to be able to narrow
things down this way,

108
00:07:47.283 --> 00:07:51.150
and of course you have an empty
string to worry about.

109
00:07:51.150 --> 00:07:53.630
But if Knowles can be found anywhere,

110
00:07:53.630 --> 00:07:57.320
you're really gonna find
yourself in trouble.

111
00:07:57.320 --> 00:07:59.961
Like, what's gonna happen here?

112
00:07:59.961 --> 00:08:07.019
So strict null checks would would like
it would allow something like this.

113
00:08:08.560 --> 00:08:11.940
This could be null, so
you're asking for runtime errors here.

114
00:08:11.940 --> 00:08:17.615
If anything has the possibility of null,
if anything has the possibility

115
00:08:17.615 --> 00:08:22.360
of being null, you're exposing yourself
to a whole class of problems where

116
00:08:22.360 --> 00:08:27.242
you're just gonna see like, cannot call
function blah, blah, blah, unknown.

117
00:08:27.242 --> 00:08:32.190
You don't that, you want like that
is easily solvable at compile time,

118
00:08:32.190 --> 00:08:33.210
so you want that to happen.

119
00:08:34.570 --> 00:08:35.560
Strict function types.

120
00:08:35.560 --> 00:08:38.780
I'll let you look mostly at
the example in the docs because it's

121
00:08:38.780 --> 00:08:43.220
a little bit nuanced, but
just understand at a high level,

122
00:08:43.220 --> 00:08:47.030
that when if you're holding,
let's say you have a callback,

123
00:08:47.030 --> 00:08:50.630
you store that in a variable like
a function stored on a variable.

124
00:08:50.630 --> 00:08:55.390
You wanna make sure that the types of
the arguments that can be passed to

125
00:08:55.390 --> 00:09:00.233
the function are validated as part of
comparing the type of function one

126
00:09:00.233 --> 00:09:01.456
to function two.

127
00:09:04.503 --> 00:09:08.200
And then strict property initialization,
we've already dealt with that today,

128
00:09:08.200 --> 00:09:10.469
that's making sure that
if you have class fields,

129
00:09:10.469 --> 00:09:14.730
they have to be initialized either with
field initializers or in the constructor.

130
00:09:14.730 --> 00:09:15.230
That's, that.

