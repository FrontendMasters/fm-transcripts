WEBVTT

1
00:00:00.290 --> 00:00:01.460
So that's one thing that happened.

2
00:00:01.460 --> 00:00:04.280
We have these three roll ups and

3
00:00:04.280 --> 00:00:08.370
let me make it a little bit more
clear why I call these roll ups.

4
00:00:09.932 --> 00:00:15.270
I wanna create a new folder,
a new file here.

5
00:00:15.270 --> 00:00:20.685
You don't have to do this and
it's not in the notes,

6
00:00:20.685 --> 00:00:27.223
but, I just wanna give you
something that will help this land.

7
00:00:36.022 --> 00:00:40.818
All right, so
I have a function here called subtract.

8
00:00:40.818 --> 00:00:46.432
And I could go into my index Ts,
and at the bottom,

9
00:00:46.432 --> 00:00:51.806
it could say export,
subtract from subtract.

10
00:00:51.806 --> 00:00:56.368
And I'm gonna run this report again.

11
00:00:59.627 --> 00:01:02.340
I know I forgot to step here, all right?

12
00:01:02.340 --> 00:01:05.530
I said this out loud, but
I'm forgetting my own advice here.

13
00:01:05.530 --> 00:01:10.750
The input for
API extractor is declaration files.

14
00:01:10.750 --> 00:01:16.100
I'm reading that index DTS for
my dist folder.

15
00:01:16.100 --> 00:01:20.690
And then API extractors taking that in and
making new DTS files.

16
00:01:20.690 --> 00:01:22.380
So I missed the build step, right?

17
00:01:22.380 --> 00:01:25.010
I don't have in my dist folder,

18
00:01:25.010 --> 00:01:29.960
I don't have anything in here that looks
like my subtract file that I just created.

19
00:01:29.960 --> 00:01:34.547
So I could do yarn build,
I should see subtract pop up, and

20
00:01:34.547 --> 00:01:36.806
I do and now let`s run this.

21
00:01:42.519 --> 00:01:45.430
Okay, so there we go.

22
00:01:45.430 --> 00:01:50.710
We see this subtract function,
it appears in these files directly,

23
00:01:50.710 --> 00:01:52.790
there's subtract up here, right?

24
00:01:52.790 --> 00:01:56.450
It appears in these files directly as if
everything is coming from this one module.

25
00:01:56.450 --> 00:02:00.970
So now it's kinda like react where
we're importing, create element.

26
00:02:02.000 --> 00:02:07.940
We're importing the react types,
like react.function component.

27
00:02:07.940 --> 00:02:10.730
All of that's coming from one module,

28
00:02:10.730 --> 00:02:14.170
even though my source code
is organized differently.

29
00:02:14.170 --> 00:02:18.820
There's no trace of this subtract
being a separate module of some sort.

30
00:02:18.820 --> 00:02:21.640
That's what makes this a roll up, right,

31
00:02:21.640 --> 00:02:24.180
we're not seeing references
to other files here.

32
00:02:24.180 --> 00:02:26.770
We're seeing everything in one file,
all together,

33
00:02:26.770 --> 00:02:28.080
that's why this is called a roll up.

34
00:02:29.230 --> 00:02:30.390
I got a warning here as well.

35
00:02:30.390 --> 00:02:35.620
And this is saying,
I am missing a release tag.

36
00:02:35.620 --> 00:02:40.660
And what it's telling me is actually,
this is a great error message.

37
00:02:40.660 --> 00:02:44.720
Subtract is exported by the package,
but it's missing a release tag.

38
00:02:44.720 --> 00:02:46.720
It's encouraging me to say, look,

39
00:02:46.720 --> 00:02:51.030
is this an alpha test,
a beta test, public, or internal?

40
00:02:51.030 --> 00:02:51.969
Let's make it beta.

41
00:02:59.831 --> 00:03:03.685
One little tricky thing here, you're gonna
wanna have these dashes between the name

42
00:03:03.685 --> 00:03:05.412
of the argument and the description.

43
00:03:05.412 --> 00:03:08.960
This tool is particular about that.

44
00:03:10.070 --> 00:03:13.780
So we'll say calculate the difference

45
00:03:16.020 --> 00:03:20.580
between two numbers, and
then we'll mark it as beta.

46
00:03:23.900 --> 00:03:28.530
If we run this again, we should see,
it may complain about other things, but

47
00:03:28.530 --> 00:03:31.250
it shouldn't complain about that anymore.

48
00:03:31.250 --> 00:03:33.232
Sorry, once again, I forgot my build step.

49
00:03:39.276 --> 00:03:44.240
Okay, so now I'm seeing something
different and this is super cool.

50
00:03:44.240 --> 00:03:48.420
I am seeing a notification that
I've changed my public API surface.

51
00:03:49.480 --> 00:03:51.380
Something I did in this code change.

52
00:03:51.380 --> 00:03:56.030
It wasn't just a trivial bug fix, I have
changed what I'm exporting in some way.

53
00:03:58.750 --> 00:04:01.710
So now it's time for me to show you

54
00:04:01.710 --> 00:04:05.570
another thing that gets created by
this and it's in that etc folder.

55
00:04:05.570 --> 00:04:09.170
This is a markdown file and
it's called an API report.

56
00:04:09.170 --> 00:04:11.750
I'll show you the rendered version cuz

57
00:04:11.750 --> 00:04:15.460
this is what you would see if you're
browsing GitHub or something.

58
00:04:15.460 --> 00:04:21.350
So it's effectively showing you what
your public API surface looks like.

59
00:04:21.350 --> 00:04:24.800
Now in my TypeScript libraries,
I have this built automatically, so

60
00:04:24.800 --> 00:04:30.870
every pull request comes
with a change to this file.

61
00:04:30.870 --> 00:04:35.100
So that when you're reviewing your code,
you can have a discussion around

62
00:04:35.100 --> 00:04:39.930
maybe we decide we're gonna make b
like the second argument, subtract,

63
00:04:39.930 --> 00:04:41.210
maybe it becomes optional.

64
00:04:41.210 --> 00:04:42.220
Let's see what that would look like.

65
00:04:43.400 --> 00:04:48.300
We're gonna make a commit, API extractor,

66
00:04:48.300 --> 00:04:53.480
basic setup and pushing it.

67
00:04:55.630 --> 00:04:59.330
So let's make that second thing
optional and let's say, actually,

68
00:04:59.330 --> 00:05:01.740
we can make it default to 0.

69
00:05:01.740 --> 00:05:06.990
And I don't need to specify that it's
a number now that it has an initializer.

70
00:05:06.990 --> 00:05:08.460
So that's the change I made.

71
00:05:11.280 --> 00:05:16.990
And let's say I build and
maybe through a Git hook of some sort.

72
00:05:16.990 --> 00:05:22.230
We run this API extractor,
we generate this new API report.

73
00:05:22.230 --> 00:05:25.390
Here's what you would
see in a code review.

74
00:05:29.250 --> 00:05:30.280
You'd see this.

75
00:05:31.540 --> 00:05:35.170
Well, look at that,
like this makes it super clear

76
00:05:35.170 --> 00:05:38.500
in ways that might not be evident just
looking at the source code itself.

77
00:05:38.500 --> 00:05:40.980
I mean here it's a bit obvious, but

78
00:05:40.980 --> 00:05:47.250
I'm sure you can imagine that at scale,
small little changes.

79
00:05:47.250 --> 00:05:50.740
It's sometimes unclear as to
what the bottom line is for

80
00:05:50.740 --> 00:05:57.020
your API surface, is this a backwards
compatible change to make?

81
00:05:57.020 --> 00:05:58.280
Raise your hand if you think it is?

82
00:06:00.400 --> 00:06:02.940
I'm raising my hand,
it's pretty good hint.

83
00:06:02.940 --> 00:06:03.955
Look, all the hands went up.

84
00:06:03.955 --> 00:06:09.760
[LAUGH] Say it's amazing I as the teacher,
I can sort of make everything true.

85
00:06:09.760 --> 00:06:14.230
So, this is a backwards compatible change,
because if I was passing

86
00:06:14.230 --> 00:06:19.460
two numbers before,
I can still do that, and it's fine.

87
00:06:19.460 --> 00:06:24.380
I am opening up a new pointless use case,
where I'll take your number and

88
00:06:24.380 --> 00:06:30.560
subtract zero from it, like not the best
improvement to make to this library.

89
00:06:30.560 --> 00:06:33.810
But everything that used to work
continues to work as it did.

90
00:06:33.810 --> 00:06:37.190
So I would say all right,
we can call this a minor release.

91
00:06:37.190 --> 00:06:41.840
But if it were in the other direction,
if it were optional and

92
00:06:41.840 --> 00:06:44.790
is now required, that's a major version.

93
00:06:46.610 --> 00:06:50.510
It's very easy to see that when
you have this like single report

94
00:06:50.510 --> 00:06:52.920
on what your exploited API looks like.

95
00:06:52.920 --> 00:06:56.440
This is a tool that I didn't
even know I needed this much.

96
00:06:56.440 --> 00:07:00.390
But I it makes it a lot
easier to open source things,

97
00:07:00.390 --> 00:07:05.380
because I can trust the community
to make contributions.

98
00:07:05.380 --> 00:07:09.420
And it's very clear to me when
something's not gonna affect the public

99
00:07:09.420 --> 00:07:14.370
API all that much, and so
we can take a little more of a risk there.

100
00:07:14.370 --> 00:07:19.960
As opposed to setting a new precedent,
like whatever change we make,

101
00:07:19.960 --> 00:07:24.020
we must forever ensure that
that continues to work.

102
00:07:24.020 --> 00:07:25.330
That's a big challenge, right?

103
00:07:25.330 --> 00:07:29.440
So this makes it super clear what
kind of things going on there.

104
00:07:29.440 --> 00:07:32.490
So, one last thing,
there's this temp folder.

105
00:07:33.960 --> 00:07:36.010
So it contains two files.

106
00:07:36.010 --> 00:07:40.900
First, we have a mark down file that
looks just like the API report.

107
00:07:40.900 --> 00:07:43.690
This is an identical file right now.

108
00:07:43.690 --> 00:07:46.770
And then we have a JSON file.

109
00:07:46.770 --> 00:07:48.030
This is the input.

110
00:07:48.030 --> 00:07:50.860
This JSON file is what we're
gonna use to make documentation.

111
00:07:53.920 --> 00:07:57.250
You're gonna wanna Git
ignore this temp folder.

112
00:07:57.250 --> 00:08:00.980
And the reason is,
it is more of a staging area.

113
00:08:00.980 --> 00:08:07.143
That is only important
in a transient sense,

114
00:08:07.143 --> 00:08:14.117
sort of a midpoint in a more
meaningful workflow and

115
00:08:14.117 --> 00:08:18.020
we don't wanna check it in.

116
00:08:19.408 --> 00:08:22.290
So I'm gonna add this to
the bottom of my Git ignore temp.

117
00:08:24.890 --> 00:08:32.710
And then I can do git rm temp,
get rid of it.

118
00:08:35.320 --> 00:08:39.430
Part of the problem is I already made
a little commit with that stuff, so and

119
00:08:39.430 --> 00:08:43.820
I'm gonna rerun the extractor
just to get those files back.

120
00:08:45.090 --> 00:08:46.532
But Git ignored this time.

121
00:08:51.473 --> 00:08:56.980
I believe I have to do this, okay?

122
00:08:56.980 --> 00:08:59.980
So let me explain how this normally works.

123
00:09:01.110 --> 00:09:05.880
dash dash local, that's something
you're gonna wanna do rarely,

124
00:09:05.880 --> 00:09:09.450
not rarely, but
you're gonna wanna do it with intent.

125
00:09:09.450 --> 00:09:14.780
Normally you'll run this without
the dash dash local thing.

126
00:09:14.780 --> 00:09:18.700
So let's say I went back to
the original implementation here.

127
00:09:20.910 --> 00:09:24.380
I believe this command
is going to exit zero.

128
00:09:24.380 --> 00:09:26.180
Nope, it didn't.

129
00:09:26.180 --> 00:09:27.050
Why didn't it?

130
00:09:28.085 --> 00:09:30.010
Cuz I didn't build,
I keep forgetting this step.

131
00:09:31.140 --> 00:09:35.940
Yarn builds cuz we've gotta make
our declaration file, run again,

132
00:09:35.940 --> 00:09:37.270
should exit zero.

133
00:09:39.330 --> 00:09:44.060
Commit, exit one, sorry,
I meant it should exit unsuccessfully.

134
00:09:44.060 --> 00:09:49.720
It's exiting unsuccessfully
because the API surface it found

135
00:09:49.720 --> 00:09:56.010
through analyzing my code Is different
than what exists in that etc folder.

136
00:09:57.280 --> 00:10:01.730
So this is something you could run
in continuous integration, where

137
00:10:01.730 --> 00:10:07.230
you'd be able to detect that this is
a change that users are gonna feel.

138
00:10:07.230 --> 00:10:11.160
This is a change in how this library
presents itself to the outside world.

139
00:10:11.160 --> 00:10:14.060
You could run this almost
like you'd run your tests.

140
00:10:15.420 --> 00:10:20.989
Dash dash local effectively means well,
let's see how they documented.

141
00:10:20.989 --> 00:10:28.150
But it means I have intentionally
made a change to the API.

142
00:10:28.150 --> 00:10:34.770
And I wish to set that as the new sort of
standard, the new human approved thing.

143
00:10:34.770 --> 00:10:36.640
So let's see how they describe this.

144
00:10:36.640 --> 00:10:41.830
It indicates that it's running as part of
a local build on the developers machine.

145
00:10:41.830 --> 00:10:46.042
And it disables validation that
would normally be performed for

146
00:10:46.042 --> 00:10:47.447
a production build.

147
00:10:47.447 --> 00:10:52.060
For example, it automatically copies

148
00:10:52.060 --> 00:10:56.532
the API report into that etc folder and

149
00:10:56.532 --> 00:11:00.888
sets it as the new approved version.

150
00:11:00.888 --> 00:11:05.450
That's why we ran it first, right?

151
00:11:05.450 --> 00:11:08.800
But normally you don't wanna
make a change to this and

152
00:11:08.800 --> 00:11:11.160
you wanna check it in with your code.

153
00:11:11.160 --> 00:11:15.370
And then in CI, you'd run this task
without the dash, dash local flag.

154
00:11:15.370 --> 00:11:20.760
And that would give you the assurance that
the code change that you're looking and

155
00:11:20.760 --> 00:11:22.690
the API report that came with it

156
00:11:24.500 --> 00:11:29.140
are the total extent of
the changes that user should see.

157
00:11:29.140 --> 00:11:31.430
Otherwise this will fail and it should.

158
00:11:33.820 --> 00:11:35.080
Pretty cool stuff and

159
00:11:35.080 --> 00:11:39.770
it really helps you find out what's
going on with your API surface.

