WEBVTT

1
00:00:00.440 --> 00:00:05.480
The next concern we're going to
focus our attention on is testing.

2
00:00:05.480 --> 00:00:07.110
So, at this point,

3
00:00:07.110 --> 00:00:11.160
we wanna ensure that we've installed
all the things necessary for testing.

4
00:00:11.160 --> 00:00:17.300
You may have already installed jest as I
did earlier, in one of the early steps.

5
00:00:17.300 --> 00:00:21.901
There's some additional stuff that
we need to allow jest to work

6
00:00:21.901 --> 00:00:26.681
nicely with TypeScript, and
we're going to add those right now.

7
00:00:26.681 --> 00:00:28.910
So it's not harmful.

8
00:00:28.910 --> 00:00:32.850
I already have this I know I do, but in
case you don't, this will get it for you.

9
00:00:32.850 --> 00:00:34.155
We're gonna get jest itself.

10
00:00:37.387 --> 00:00:39.672
The type information for jest so at types,

11
00:00:39.672 --> 00:00:42.410
this is stuff coming
from definitely typed.

12
00:00:42.410 --> 00:00:44.795
We'll talk more about that later.

13
00:00:44.795 --> 00:00:45.802
And then some Babel plugins,

14
00:00:54.298 --> 00:00:57.660
Preset ends and preset TypeScript.

15
00:00:57.660 --> 00:01:02.370
So jest is probably the best

16
00:01:02.370 --> 00:01:08.040
test runner to use with TypeScript, as of
the time this course is being recorded.

17
00:01:08.040 --> 00:01:12.236
In that, if you have the right
Babble plugins in your project,

18
00:01:12.236 --> 00:01:13.671
it kinda just works.

19
00:01:19.266 --> 00:01:22.442
So now that we have that installed,
we can check our package JSON,

20
00:01:22.442 --> 00:01:24.930
make sure it happened,
there, I see these here.

21
00:01:24.930 --> 00:01:27.660
It's a good sign.

22
00:01:27.660 --> 00:01:30.262
Time to create our first test file.

23
00:01:30.262 --> 00:01:36.130
We're gonna make a directory tests, and

24
00:01:36.130 --> 00:01:42.240
I'm going to create our first test file
in there, we'll call it index.test.ts.

25
00:01:42.240 --> 00:01:47.240
So I've just grabbed the test
content from the workshop notes.

26
00:01:49.100 --> 00:01:55.030
And I'm going to paste it into this index
test ts folder that I just created.

27
00:01:55.030 --> 00:02:00.160
Now, I'm being yelled at,
about a bunch of things.

28
00:02:00.160 --> 00:02:03.630
It's an unsafe call of an any type value,
right?

29
00:02:03.630 --> 00:02:04.900
We're not quite done yet.

30
00:02:06.380 --> 00:02:11.517
And part of this is saying the use

31
00:02:11.517 --> 00:02:16.272
of jest in terms of this global

32
00:02:16.272 --> 00:02:22.178
described variable being allowed.

33
00:02:22.178 --> 00:02:26.306
It's like you told me that
you can't use any types and

34
00:02:26.306 --> 00:02:30.365
so we're gonna have to get into this and
resolve it.

35
00:02:30.365 --> 00:02:36.285
Like I didn't import described from
anywhere, and it is objecting to that.

36
00:02:36.285 --> 00:02:39.681
So our tests need their own ts config.

37
00:02:43.208 --> 00:02:46.338
And, once again, we're gonna extend.

38
00:02:46.338 --> 00:02:49.454
This is all in the notes by the way,
so you can copy paste.

39
00:02:52.373 --> 00:02:55.458
We're gonna extend from
our base level ts config.

40
00:02:57.240 --> 00:03:00.170
We're going to use something
called references.

41
00:03:00.170 --> 00:03:06.210
So this is what allows us to have
sort of two disconnected sub projects

42
00:03:06.210 --> 00:03:13.560
within this repo, and
it allows us to refer to the already built

43
00:03:13.560 --> 00:03:18.980
source folder in our test folder without
having to compile everything all together.

44
00:03:18.980 --> 00:03:23.140
So we'll say name,it's my lib, and

45
00:03:23.140 --> 00:03:26.860
the path is the home
folder of this project.

46
00:03:29.670 --> 00:03:35.260
Compiler options we're gonna say,
I allow jest, and

47
00:03:35.260 --> 00:03:38.550
my root dir is the home folder.

48
00:03:38.550 --> 00:03:42.777
So your root directory needs to
contain all of the source code needed

49
00:03:42.777 --> 00:03:46.869
to make things work and in this case,
the tests also need source.

50
00:03:46.869 --> 00:03:49.930
And so we have to consider that
to be the root directory here.

51
00:03:52.470 --> 00:03:54.990
There's one two more things we can add.

52
00:03:54.990 --> 00:03:57.765
One is include, and we're gonna include,

53
00:03:57.765 --> 00:04:03.960
we're going to say everything in the test
folder is what this tsconfig pertains to.

54
00:04:03.960 --> 00:04:09.220
And then finally, no omit true.

55
00:04:09.220 --> 00:04:11.920
Jest is not going to require
that we actually build

56
00:04:11.920 --> 00:04:14.060
JavaScript files from our TypeScript.

57
00:04:14.060 --> 00:04:16.529
It just needs this tsconfig to exist.

58
00:04:16.529 --> 00:04:21.480
So no emit true is safe
to do in this case.

59
00:04:24.999 --> 00:04:27.853
TypeScript is helpfully
telling me I forgot something.

60
00:04:27.853 --> 00:04:34.872
So I must turn on composite true,
when I'm using a reference like this.

61
00:04:41.592 --> 00:04:45.306
So if I turn that on,
this should quiet down.

62
00:04:48.032 --> 00:04:48.825
We perturb it and see what happens.

63
00:04:48.825 --> 00:04:52.380
Let me try restarting my language server.

64
00:04:55.828 --> 00:04:59.793
It's giving it a fresh
look at my codebase.

65
00:04:59.793 --> 00:05:05.590
And That's long

66
00:05:05.590 --> 00:05:10.940
enough that I feel like it's type check
this and it's no longer barking at me.

67
00:05:10.940 --> 00:05:14.186
So we have this project reference thing.

68
00:05:14.186 --> 00:05:18.247
We have our dedicated tsconfig,
man we're getting so close.

69
00:05:18.247 --> 00:05:21.160
One last thing and
it has to do with Babel.

70
00:05:21.160 --> 00:05:29.471
So we have to create a dot Babel RC And

71
00:05:29.471 --> 00:05:34.584
this is what just uses,
uses this Babel RC file to understand

72
00:05:34.584 --> 00:05:38.710
how to transform our test code,
and consume it.

73
00:05:40.586 --> 00:05:47.541
So our presets, our Babel preset,

74
00:05:50.628 --> 00:05:53.706
And it's we use this
like nested array syntax.

75
00:05:53.706 --> 00:05:56.683
And we're gonna say targets

76
00:06:00.608 --> 00:06:05.778
Node 10.

77
00:06:05.778 --> 00:06:07.739
And then the second preset we're
using is Babel/preset TypeScript.

78
00:06:12.959 --> 00:06:14.313
There we go.

79
00:06:14.313 --> 00:06:19.501
And, if I've done my job right here,

80
00:06:19.501 --> 00:06:26.470
so these two is a sign that
the compiler is happy.

81
00:06:26.470 --> 00:06:28.086
It found type information.

82
00:06:28.086 --> 00:06:35.302
Yes, lint is saying I am trying to
call an any as if it's a function.

83
00:06:35.302 --> 00:06:40.015
So what this is telling
me is that eslint is not

84
00:06:40.015 --> 00:06:44.490
quite clued in to the TypeScript project.

85
00:06:44.490 --> 00:06:49.240
So I'm just gonna look and
make sure that everything seems right.

86
00:06:50.390 --> 00:06:52.000
Okay, that seems right.

87
00:06:53.310 --> 00:06:55.993
What I want to do is I
want to restart VS code,

88
00:06:55.993 --> 00:06:59.190
because while I did restart
the TypeScript server,

89
00:06:59.190 --> 00:07:03.785
I have not restarted eslint, and
sometimes that's what needs to happen.

90
00:07:07.128 --> 00:07:10.474
So I'm gonna look down here in
the status bar for a little eslint icon.

91
00:07:10.474 --> 00:07:17.480
All right, I see two checks, the servers
running, and no more red squiggles.

92
00:07:17.480 --> 00:07:21.970
So that like, this is a good [LAUGH]
example of something I've learned from

93
00:07:21.970 --> 00:07:24.782
experience and I'm passing to you so
you don't have to learn it the hard way.

94
00:07:24.782 --> 00:07:28.587
Bounce eslint as an early
step of debugging,

95
00:07:28.587 --> 00:07:33.691
because we could have gone down
a whole rabbit hole here, and

96
00:07:33.691 --> 00:07:39.716
tried to figure out what was wrong,
it just needed to stop and restart.

97
00:07:39.716 --> 00:07:43.809
This is often what's gonna have to happen
as you change config files, not something

98
00:07:43.809 --> 00:07:48.018
you do every day, but definitely something
you're doing while you're trying to kick

99
00:07:48.018 --> 00:07:51.730
the tires and make sure that your
project is working as expected.

100
00:07:51.730 --> 00:07:55.570
So let's just double check yarn lint.

101
00:07:55.570 --> 00:07:57.021
Oops, that is not how you spell it.

102
00:07:59.655 --> 00:08:01.153
Zero errors yarn build.

103
00:08:05.060 --> 00:08:07.201
Zero errors yarn test.

104
00:08:07.201 --> 00:08:10.844
I expect some errors here, because my
code being tested is pretty shoddy.

105
00:08:10.844 --> 00:08:17.001
Maybe this isn't the shoddy code.

106
00:08:19.562 --> 00:08:21.587
Nope, this is the good code.

107
00:08:21.587 --> 00:08:26.810
We're gonna be dealing with some
obviously broken things later on.

108
00:08:26.810 --> 00:08:30.530
So we've got our test cases, and
we can see this nice little like.

109
00:08:30.530 --> 00:08:31.700
Output here.

110
00:08:31.700 --> 00:08:35.920
Note that my dist folder still
just contains my library.

111
00:08:35.920 --> 00:08:40.180
I didn't need to explicitly say,
my tests are in TypeScript.

112
00:08:40.180 --> 00:08:43.780
I'm going to compile them into JavaScript
so that Jes can understand them.

113
00:08:43.780 --> 00:08:45.140
Just understands it.

114
00:08:45.140 --> 00:08:47.750
Just because I have this Babel RC.

115
00:08:47.750 --> 00:08:49.430
I have the right plugins there.

116
00:08:49.430 --> 00:08:50.711
So here's what we have.

117
00:08:50.711 --> 00:08:55.530
We didn't have to reach for Webpack,
we're just using TypeScript as not only

118
00:08:55.530 --> 00:09:00.511
the type checker, but the thing that's
emitting the types and the JavaScript.

119
00:09:00.511 --> 00:09:03.636
We can write our tests in TypeScript.

120
00:09:03.636 --> 00:09:07.330
We can write our source
code in TypeScript here.

121
00:09:07.330 --> 00:09:10.066
Let me make sure that this condition
holds true as I hoped it would.

122
00:09:10.066 --> 00:09:16.648
Can I do Right,

123
00:09:16.648 --> 00:09:20.326
I'm not allowed to use
this jest specific thing.

124
00:09:20.326 --> 00:09:24.505
Let me put them side by side so
we can see what I'm talking about here.

125
00:09:27.895 --> 00:09:32.290
Right, so I have this describe I can
only use that in my test folder.

126
00:09:32.290 --> 00:09:33.250
This is great.

127
00:09:33.250 --> 00:09:34.860
It's a dev dependency.

128
00:09:34.860 --> 00:09:36.246
You don't want this in your app code.

129
00:09:36.246 --> 00:09:41.538
You don't [LAUGH] wanna accidentally
bundle jest or your assertion library

130
00:09:41.538 --> 00:09:46.756
in with your app and here, you won't,
you'll be yelled at for doing it.

131
00:09:46.756 --> 00:09:49.426
So we got that nice division of concerns.

132
00:09:49.426 --> 00:09:55.406
Minimal toolchain linting testing,
a pretty simple build,

133
00:09:55.406 --> 00:09:59.551
and what you see is what
you get here folks.

