WEBVTT

1
00:00:00.000 --> 00:00:02.694
Just to recap,
we basically created that middleware.

2
00:00:02.694 --> 00:00:07.781
Which is super awesome on the edge to
protect any routes, any page that we want

3
00:00:07.781 --> 00:00:12.967
it to be protected from being accessed
from anyone that doesn't have a token.

4
00:00:12.967 --> 00:00:17.815
And yeah, it's very powerful,
very good use of a new feature that

5
00:00:17.815 --> 00:00:22.162
the next thing [INAUDIBLE] team
universal team came up with.

6
00:00:22.162 --> 00:00:24.935
So super thankful for that, because
it's actually really hard to set up.

7
00:00:24.935 --> 00:00:29.773
And now what we'll do is, we got most of
our authentication stuffs set in place.

8
00:00:29.773 --> 00:00:34.533
We got an API setup, we created that
route to get the user called slash me.

9
00:00:34.533 --> 00:00:40.154
Next thing is we can go ahead and
create the homepage

10
00:00:40.154 --> 00:00:44.859
that will use that API
call to get the user,

11
00:00:44.859 --> 00:00:49.711
and fill out the homepage
to look like this.

12
00:00:49.711 --> 00:00:52.924
So we'll make this page now, so we'll get
on to the part of actually making the app.

13
00:00:52.924 --> 00:00:55.695
Now that we got all the foundational
stuff out of the way,

14
00:00:55.695 --> 00:00:57.213
we can get on to the cool stuff.

15
00:00:57.213 --> 00:01:01.100
So we'll start working on this homepage
where it has information about the user

16
00:01:01.100 --> 00:01:01.688
at the top.

17
00:01:01.688 --> 00:01:05.073
And it looks like it just has
the top artists this month,

18
00:01:05.073 --> 00:01:10.117
which obviously we do not have an analysis
to determine the top artists this month,

19
00:01:10.117 --> 00:01:12.731
seeing how our app only has three artists.

20
00:01:12.731 --> 00:01:15.705
Anyway, we'll just put all the artists
there, but yeah, it'll look like this, and

21
00:01:15.705 --> 00:01:17.391
we'll make some API calls,
and it'll be cool.

22
00:01:17.391 --> 00:01:22.043
So in order to do that,
we need to make some helper functions

23
00:01:22.043 --> 00:01:25.404
first to assist in making these API calls.

24
00:01:25.404 --> 00:01:30.132
And this is just the way that I like to do
it that i've learned along the way, so,

25
00:01:30.132 --> 00:01:34.882
again, this is just my thought process,
and how i've done things in the past.

26
00:01:34.882 --> 00:01:38.761
Doesn't mean this the right way, or the
only way or anything, is just my opinion.

27
00:01:38.761 --> 00:01:41.666
So I'm gonna walk you through
how I do some of that.

28
00:01:41.666 --> 00:01:46.579
So, first thing we're gonna do is, go to
this lib folder, and i'm gonna to make

29
00:01:46.579 --> 00:01:50.654
a new folder called Hooks,
we're gonna write some custom hooks.

30
00:01:50.654 --> 00:01:54.610
If you never written a custom hook before,
it's not that hard.

31
00:01:54.610 --> 00:01:56.770
It can be [LAUGH].

32
00:01:56.770 --> 00:01:58.403
But yeah, it depends on what it is.

33
00:01:58.403 --> 00:02:01.583
So we're gonna make some custom hooks and
using SWR.

34
00:02:01.583 --> 00:02:06.991
So we're gonna import use swr from swr.

35
00:02:06.991 --> 00:02:10.167
And I'll talk again more
about what that is.

36
00:02:10.167 --> 00:02:13.475
And then we're gonna import
our fetcher from fetcher.

37
00:02:16.148 --> 00:02:21.609
The first hook that we're gonna make
is going to be hook to get the user,

38
00:02:21.609 --> 00:02:26.799
and then we're going to make another
hook to get all the playlists,

39
00:02:26.799 --> 00:02:29.280
so we can populate the sidebar.

40
00:02:29.280 --> 00:02:31.560
Because right now on the sidebar,
we have those fake playlists right?

41
00:02:31.560 --> 00:02:33.457
If we go back and
look at our sidebar, there we go.

42
00:02:33.457 --> 00:02:36.620
I have these fake playlists,
we're gonna use the real playlist that we

43
00:02:36.620 --> 00:02:39.268
seated in the database, and
we're gonna pull those down.

44
00:02:39.268 --> 00:02:44.120
And we got to do all that client side,
so we need some hooks for that.

45
00:02:44.120 --> 00:02:47.192
We don't need hooks, it's just the way
that I like to do it, so you'll see why.

46
00:02:47.192 --> 00:02:49.354
Because it makes it so
much easier with swr.

47
00:02:49.354 --> 00:02:53.740
So the first thing is we're
gonna make one called useMe, and

48
00:02:53.740 --> 00:02:57.449
I just said that out loud and
it sounded really bad.

49
00:02:57.449 --> 00:03:01.854
But [LAUGH] I'm also starting
with the use word, and

50
00:03:01.854 --> 00:03:04.938
the API call is me, so it's useMe.

51
00:03:04.938 --> 00:03:08.786
Yeah useMe, and the way this is
gonna work is first we are gonna

52
00:03:08.786 --> 00:03:11.454
use the swr hook inside
of our custom hook.

53
00:03:11.454 --> 00:03:15.278
This is actually really intuitive,
so you can say use swr.

54
00:03:15.278 --> 00:03:19.085
And the first argument to swr,

55
00:03:19.085 --> 00:03:24.217
is the cache key of where you wanna store.

56
00:03:24.217 --> 00:03:27.314
So let me describe SDR
before I even get into that.

57
00:03:27.314 --> 00:03:33.232
SDR, the way that works is it's meant
as a library to do data fetching.

58
00:03:33.232 --> 00:03:38.037
So it fetches some data, and and
it stores it locally like Redux would,

59
00:03:38.037 --> 00:03:40.534
it stores it on your machine, okay?

60
00:03:40.534 --> 00:03:42.418
And then it works with you, and

61
00:03:42.418 --> 00:03:46.415
it's really cool API to figure
out when to revalidate that data.

62
00:03:46.415 --> 00:03:49.685
Like I said, when you focus in and
out of a browser,

63
00:03:49.685 --> 00:03:53.048
when you open up multiple
tabs it'll sync the data.

64
00:03:53.048 --> 00:03:56.870
When you do a mutation, you wanna
come back and update it manually,

65
00:03:56.870 --> 00:03:59.631
which we'll go back and
do on one of these pages.

66
00:03:59.631 --> 00:04:02.325
It's basically that,
some abstraction around that.

67
00:04:02.325 --> 00:04:07.269
So, the data doesn't have to come from
an API, you just need to get the data

68
00:04:07.269 --> 00:04:11.682
from somewhere, and you need to
give it a data fetching function.

69
00:04:11.682 --> 00:04:14.841
In our case, we have a fetcher function
that we're gonna use to fetch the data.

70
00:04:14.841 --> 00:04:17.438
And the cache key, and
the convention that we use for

71
00:04:17.438 --> 00:04:19.452
the cache keys usually just use a route.

72
00:04:19.452 --> 00:04:23.876
So for use of routes, API routes as
the cache key, then we as users know that

73
00:04:23.876 --> 00:04:27.858
this was for the slash me route,
this was for the slash playlist route.

74
00:04:27.858 --> 00:04:31.289
That's where this is stored, and

75
00:04:31.289 --> 00:04:36.271
it'll pass whatever is in
here into our fetcher.

76
00:04:36.271 --> 00:04:38.100
Here's a second argument.

77
00:04:38.100 --> 00:04:41.081
So in this case, we'll just say slash me.

78
00:04:41.081 --> 00:04:44.605
So we wanna use STVR to go to slash me.

79
00:04:44.605 --> 00:04:47.357
It's gonna take this argument slash me,
pass it to fetcher, and

80
00:04:47.357 --> 00:04:50.223
if we go look at fetcher,
that's the first argument that it takes.

81
00:04:50.223 --> 00:04:52.719
It takes a URL, so
it works out pretty well.

82
00:04:52.719 --> 00:04:54.760
And then the second argument is data.

83
00:04:54.760 --> 00:04:57.739
And we don't have any data here cuz
we're just doing a get request,

84
00:04:57.739 --> 00:05:00.992
and then this is just gonna return
an object that we're gonna structure.

85
00:05:00.992 --> 00:05:03.516
Here, we're gonna get the data,
or we're gonna get an error.

86
00:05:03.516 --> 00:05:05.615
So it's either gonna be data,
or it's either gonna be error,

87
00:05:05.615 --> 00:05:06.978
it's gonna be one of the two, not both.

88
00:05:06.978 --> 00:05:12.467
And then all we're gonna do is just
return an object that has the user on it,

89
00:05:12.467 --> 00:05:15.970
I'm gonna call that data,
not data transfer.

90
00:05:15.970 --> 00:05:20.656
It is loading, so
i'm gonna get a loading state here, and

91
00:05:20.656 --> 00:05:23.909
i'm gonna say if there's not data, and

92
00:05:23.909 --> 00:05:28.996
there's not an error,
then that means we're still loading.

93
00:05:28.996 --> 00:05:31.660
It either came back with data or
it came back with error,

94
00:05:31.660 --> 00:05:35.071
if it didn't come back with either
one of those, it's still loading.

95
00:05:35.071 --> 00:05:37.767
So loading is true,
both of those are false.

96
00:05:37.767 --> 00:05:40.298
And then the last one,
it just wanna see if there's an error.

97
00:05:40.298 --> 00:05:43.239
So, and also that's error, and that's it.

98
00:05:43.239 --> 00:05:44.373
That's a custom hook.

99
00:05:44.373 --> 00:05:46.700
Just an abstraction around useSWR.

100
00:05:46.700 --> 00:05:51.110
So now, anywhere in our app where we need
to make an API call to get the user to

101
00:05:51.110 --> 00:05:53.423
slash me, we've got to use this hook.

102
00:05:53.423 --> 00:05:54.827
We don't have to do anything else.

103
00:05:54.827 --> 00:05:59.814
And whenever the user gets updated,
we'll update this cache at slash me,

104
00:05:59.814 --> 00:06:04.722
and every component in the app will
automatically get that update without

105
00:06:04.722 --> 00:06:06.560
having to make an API call.

106
00:06:06.560 --> 00:06:10.314
It will just get it immediately,
which is really cool, that's STVR does.

107
00:06:10.314 --> 00:06:15.029
We could force it to make API calls when
we revalidate, but we probably won't.

108
00:06:15.029 --> 00:06:18.367
The casting strategies are hard,
there's no right or wrong, it depends.

109
00:06:18.367 --> 00:06:19.546
Got a question?

110
00:06:19.546 --> 00:06:22.385
&gt;&gt; [INAUDIBLE] At the beginning
of creating this circle,

111
00:06:22.385 --> 00:06:25.159
we talked about how it is
just comments and text, but

112
00:06:25.159 --> 00:06:28.264
I think you actually have to use it or
[INAUDIBLE] get angry.

113
00:06:28.264 --> 00:06:32.422
&gt;&gt; Yeah, you actually have to use
the keyword use, otherwise reacts like,

114
00:06:32.422 --> 00:06:34.044
nope, it is not gonna work.

115
00:06:34.044 --> 00:06:35.565
So yea, it does get angry.

116
00:06:35.565 --> 00:06:39.551
I do not know if that is development
mode thing, like key and props, and

117
00:06:39.551 --> 00:06:43.014
that's why it's get angry and
it still works in production.

118
00:06:43.014 --> 00:06:45.829
Or if that's the actual you have
to do this all the time, or

119
00:06:45.829 --> 00:06:47.444
otherwise it's not gonna work.

120
00:06:47.444 --> 00:06:52.103
But yeah, you will get screamed at by
react in the console if you don't put use

121
00:06:52.103 --> 00:06:53.260
in front of a hook.

122
00:06:53.260 --> 00:06:57.109
They are really crazy about that.

123
00:06:57.109 --> 00:06:59.800
The next one we wanna make is for
the playlist,

124
00:06:59.800 --> 00:07:01.735
this is going to be very similar.

125
00:07:01.735 --> 00:07:05.130
We haven't made an API route for
the playlist inside the API folders, but

126
00:07:05.130 --> 00:07:06.511
obviously we'll get there.

127
00:07:06.511 --> 00:07:08.751
But we're gonna go ahead and
make the hook for it anyway.

128
00:07:08.751 --> 00:07:12.392
Assuming that the route will
be called slash playlist,

129
00:07:12.392 --> 00:07:16.666
we're gonna make a hook for
these playlists, so use playlists.

130
00:07:21.947 --> 00:07:25.578
And the way that that's gonna work
is pretty much the same thing,

131
00:07:25.578 --> 00:07:29.953
we're gonna have data, we're gonna
have error, we're gonna have UseSWR.

132
00:07:29.953 --> 00:07:35.385
That's gonna be slash playlists to a route
that we haven't created yet on the API.

133
00:07:35.385 --> 00:07:36.838
And we're gonna pass in the fetcher.

134
00:07:39.878 --> 00:07:41.522
That's it, and
then we're gonna do the same thing.

135
00:07:41.522 --> 00:07:46.497
We're gonna return playlists,
which will be the data or

136
00:07:46.497 --> 00:07:50.446
the data then come back
we'll make an array.

137
00:07:50.446 --> 00:07:52.318
So nothing breaks if we do a map.

138
00:07:52.318 --> 00:07:56.043
And then is loading, same thing,

139
00:07:56.043 --> 00:08:00.160
that'll be not data, and not error.

140
00:08:00.160 --> 00:08:05.680
And the last thing is error
if there is an error,

141
00:08:05.680 --> 00:08:09.273
so we'll export this as well.

142
00:08:09.273 --> 00:08:11.256
So now, we have a hook for playlists.

143
00:08:11.256 --> 00:08:14.253
So anywhere we need to pull down
playlists, which I can tell you right now,

144
00:08:14.253 --> 00:08:15.598
it's going to be in the sidebar.

145
00:08:15.598 --> 00:08:17.358
It's also gonna be around library,

146
00:08:17.358 --> 00:08:20.595
somewhere that shows you that
there's multiple pages in this app,

147
00:08:20.595 --> 00:08:23.848
that shows you all your playlists or
a certain amount of playlists.

148
00:08:23.848 --> 00:08:27.950
We can just use this hook, and
STVR guarantee that we only make one call,

149
00:08:27.950 --> 00:08:32.054
even though we might be using in
multiple places that only made one call,

150
00:08:32.054 --> 00:08:33.352
which is really cool.

151
00:08:33.352 --> 00:08:35.196
So like D dupe, it'll do all this stuff.

152
00:08:35.196 --> 00:08:40.128
It really does a lot of stuff, you should
take a look at the docs, is pretty cool.

153
00:08:40.128 --> 00:08:45.888
I would never make a client side react
app without using something like swr,

154
00:08:45.888 --> 00:08:48.318
or react query, one of the two.

155
00:08:48.318 --> 00:08:52.445
I just can't go back to whatever I
was doing before that which was,

156
00:08:54.183 --> 00:08:58.986
Redux, bunks, sagas, things like that.

157
00:08:58.986 --> 00:09:01.607
So to me, this is much better.

158
00:09:01.607 --> 00:09:04.020
And this works with Graph QL as
well because it doesn't care what

159
00:09:04.020 --> 00:09:04.698
this fetcher is.

160
00:09:04.698 --> 00:09:09.201
This fetcher can literally do anything,
it could make a Graph QL call,

161
00:09:09.201 --> 00:09:11.764
it could not even make an API call at all.

162
00:09:11.764 --> 00:09:14.796
As long as it's some function that
returns some data, it doesn't care.

163
00:09:14.796 --> 00:09:19.292
So, it doesn't even know that you're
talking to an API, it has no idea.

164
00:09:19.292 --> 00:09:22.958
It just says hey, i'm gonna pass this
argument to here, wherever this returns

165
00:09:22.958 --> 00:09:26.094
that's where i'm catching it,
that's it, that's all it does.

166
00:09:26.094 --> 00:09:30.470
But it is designed for API calls in mind,
and asynchronous fetchers, so

167
00:09:30.470 --> 00:09:32.420
as long as it's asynchronous.

