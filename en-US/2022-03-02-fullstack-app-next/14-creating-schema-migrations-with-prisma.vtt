WEBVTT

1
00:00:00.090 --> 00:00:07.330
Sorry, I had to debug this Prisma foul,
foul watching service for VS code.

2
00:00:07.330 --> 00:00:10.895
So if it's not working for you in VS code,
it's not gonna be a deal breaker,

3
00:00:10.895 --> 00:00:13.348
you'll just have to type
out the code yourself, but

4
00:00:13.348 --> 00:00:15.490
it's really nice to
have this thing loaded.

5
00:00:16.730 --> 00:00:20.932
I think it really just depends on if you
have some of the VS code setting set up to

6
00:00:20.932 --> 00:00:22.690
where it saves automatically.

7
00:00:24.240 --> 00:00:26.675
And I've tried to debug something that
seems a lot of people are still having

8
00:00:26.675 --> 00:00:28.260
problems with that.

9
00:00:28.260 --> 00:00:28.900
VS code.

10
00:00:28.900 --> 00:00:31.870
Automatic saving stuff is
a wormhole to deal with.

11
00:00:31.870 --> 00:00:33.030
But again, it's not needed.

12
00:00:33.030 --> 00:00:34.860
You'll just have to type
out the code yourself.

13
00:00:34.860 --> 00:00:38.250
It's not a lot of code real only
autocompletes one extra line.

14
00:00:38.250 --> 00:00:41.030
So it shouldn't be that big of a deal.

15
00:00:41.030 --> 00:00:46.720
Okay, so for right now we have
an artist that is type artists.

16
00:00:46.720 --> 00:00:51.190
And we added this relationship,
the fields that belongs to artist ID.

17
00:00:51.190 --> 00:00:55.289
The reason this isn't an array because
you can have multi filled relations, and

18
00:00:55.289 --> 00:00:57.470
then it references the ID on the artist.

19
00:00:57.470 --> 00:01:00.530
And then we need to add an artist
ID field that's a type integer.

20
00:01:03.030 --> 00:01:07.630
And then for the artists it's the same
three fields that we have on everything

21
00:01:07.630 --> 00:01:10.906
else plus now we have a songs
field that is a song array.

22
00:01:10.906 --> 00:01:12.420
So it's an array of songs.

23
00:01:12.420 --> 00:01:16.434
It's probably not the best place to
put all the songs on an artist but

24
00:01:16.434 --> 00:01:20.750
depends on your View, it really depends
on how you need to query things.

25
00:01:20.750 --> 00:01:23.661
Like I'm totally into
denormalizing schemas and

26
00:01:23.661 --> 00:01:26.720
data if the UI needs it,
like I'm totally for that.

27
00:01:28.080 --> 00:01:29.790
But again, I'm not some database expert.

28
00:01:29.790 --> 00:01:31.908
I'm more of a product person
that's thinking like,

29
00:01:31.908 --> 00:01:33.750
how can I make one API call and
get everything?

30
00:01:34.750 --> 00:01:38.730
I'm not thinking like,
how can I save money on AWS?

31
00:01:38.730 --> 00:01:40.900
So it's not now but I'm doing.

32
00:01:41.960 --> 00:01:46.665
Okay, so we have an artist here
artists also has a name, so

33
00:01:46.665 --> 00:01:49.960
we'll do that, make it a string.

34
00:01:49.960 --> 00:01:52.683
We'll make it unique, we'll make it,

35
00:01:52.683 --> 00:01:57.339
I think it's gonna help us create
stuff a lot easier if it's unique.

36
00:01:57.339 --> 00:02:00.010
Artists also, we'll come back to that.

37
00:02:00.010 --> 00:02:02.333
The next thing we need is a model for
a playlist.

38
00:02:06.475 --> 00:02:09.700
And same thing, all three of these things.

39
00:02:11.170 --> 00:02:15.058
And then a playlist also has a name,
which is a type of string, and

40
00:02:15.058 --> 00:02:17.370
then a playlist also has songs.

41
00:02:17.370 --> 00:02:21.734
So what I can do is this will actually be
like a many to many relationship where

42
00:02:21.734 --> 00:02:26.580
a song could belong to many playlists and
playlists gonna have many songs.

43
00:02:26.580 --> 00:02:31.485
So what I could do is I can
go to the song here, and

44
00:02:31.485 --> 00:02:37.649
I could say, playlists like so
and make it a type play list.

45
00:02:39.580 --> 00:02:46.430
Like that, so it's part of many playlists.

46
00:02:46.430 --> 00:02:51.331
And then if your Autocomplete is working,
what it would have done is it

47
00:02:51.331 --> 00:02:56.150
would have came down to the playlist
model and added a song filled with

48
00:02:56.150 --> 00:03:01.640
a capital S I don't want that
actually wants to be called Songs.

49
00:03:01.640 --> 00:03:04.040
I want it to be an array of
songs on one to many to many.

50
00:03:04.040 --> 00:03:05.130
I'm gonna get rid of that.

51
00:03:06.220 --> 00:03:12.040
And I don't think I need
this whole thing here.

52
00:03:12.040 --> 00:03:13.520
I just need that.

53
00:03:13.520 --> 00:03:17.200
So I have playlists,
which is an array of playlist.

54
00:03:17.200 --> 00:03:19.980
And then I have songs which is
an array of songs that was it.

55
00:03:19.980 --> 00:03:24.899
I don't need the whole relation
thing just but things in there.

56
00:03:24.899 --> 00:03:26.016
So we got that.

57
00:03:30.667 --> 00:03:34.700
And then a user can have playlist.

58
00:03:34.700 --> 00:03:37.782
So we want the user to be
able to have a playlist, and

59
00:03:37.782 --> 00:03:39.880
a playlist can belong to one user.

60
00:03:39.880 --> 00:03:42.480
So we have a one to
many relationship here.

61
00:03:42.480 --> 00:03:47.280
So I can go back to the user and
I can say you have playlists, plural.

62
00:03:47.280 --> 00:03:50.420
And it's gonna be typed Playlist.

63
00:03:50.420 --> 00:03:51.090
Somehow like that.

64
00:03:51.090 --> 00:03:52.520
So I'm gonna save that.

65
00:03:53.520 --> 00:03:57.030
And what that's gonna do is it's gonna
generate a filter on a playlist.

66
00:03:57.030 --> 00:04:04.320
I'm just gonna type this out called user,
Its type it's User with a capital U.

67
00:04:06.210 --> 00:04:09.310
And then we're gonna add a user ID filled.

68
00:04:09.310 --> 00:04:10.395
Whose type is integer.

69
00:04:10.395 --> 00:04:13.102
Oops, forgot the r.

70
00:04:16.014 --> 00:04:20.750
And we do need the relations
decorator thing here

71
00:04:20.750 --> 00:04:23.991
because it's not a many to many.

72
00:04:26.780 --> 00:04:30.400
So for this we're gonna say at relation
fields or points of the user ID.

73
00:04:30.400 --> 00:04:32.340
So we're referencing this field.

74
00:04:32.340 --> 00:04:38.440
And that user ID is referencing
the ID of the user model up here.

75
00:04:39.610 --> 00:04:41.683
So the sweet thing about
databases is that,

76
00:04:41.683 --> 00:04:44.630
you're probably never going to
get it right the first time.

77
00:04:44.630 --> 00:04:48.904
So you got to run tons of migration until
you finally get it right especially if

78
00:04:48.904 --> 00:04:52.479
you add a required field and
you already have data in a database.

79
00:04:52.479 --> 00:04:55.281
What do you do with the data
that was already there?

80
00:04:55.281 --> 00:04:59.732
Typically you got to run a migration to go
through all that data and add the field or

81
00:04:59.732 --> 00:05:03.021
you set a default, so
the defaults get applied at runtime.

82
00:05:03.021 --> 00:05:07.525
So to get around having to do that all the
time Prisma has this thing called database

83
00:05:07.525 --> 00:05:11.782
push which is almost the same as a
migration but it doesn't create a history.

84
00:05:11.782 --> 00:05:15.992
So it's basically meant for prototyping
the schema without fully committing to,

85
00:05:15.992 --> 00:05:17.360
I'm done now.

86
00:05:17.360 --> 00:05:22.945
So what we can do when we're ready
it's kinda doing a git commit but

87
00:05:22.945 --> 00:05:24.750
you didn't push it.

88
00:05:24.750 --> 00:05:28.165
I'm gonna commit these changes but
I'm not gonna push them up yet

89
00:05:28.165 --> 00:05:30.220
because I'm not quite ready.

90
00:05:30.220 --> 00:05:31.920
When I push that means I'm ready.

91
00:05:31.920 --> 00:05:35.140
So what we can do is we can say npx
prisma, you can do this at any time.

92
00:05:35.140 --> 00:05:40.150
You don't have to get to the point
where I'm at npx prisma db push.

93
00:05:42.140 --> 00:05:45.111
Once you push up,
you'll get some confirmation that

94
00:05:45.111 --> 00:05:49.080
Prisma is in sync with your database
that you have deployed somewhere.

95
00:05:49.080 --> 00:05:52.390
And then it'll say
generated a Prisma client.

96
00:05:52.390 --> 00:05:54.440
What that basically means is like, hey,

97
00:05:54.440 --> 00:05:57.380
we've notified the database
about these schema changes.

98
00:05:57.380 --> 00:06:01.020
So now the schema are on your database,
so they understand it, and

99
00:06:01.020 --> 00:06:05.375
we generated a client that client is gonna
be used for us to query the database and

100
00:06:05.375 --> 00:06:08.840
it's gonna come with types
generated based off our schema.

101
00:06:08.840 --> 00:06:11.664
So we'll have literally
an SDK created just for

102
00:06:11.664 --> 00:06:14.489
our schema that knows about
all of our fields and

103
00:06:14.489 --> 00:06:18.100
the types of those fields which
is really cool and we can use.

104
00:06:18.100 --> 00:06:21.908
And because it's next to yes we can use
that on the front end and the back end, so

105
00:06:21.908 --> 00:06:22.622
pretty dope.

106
00:06:31.208 --> 00:06:35.510
So I would say, for now,
this seems like a good first draft.

107
00:06:35.510 --> 00:06:38.740
I know we still need albums,
but we can come back to albums.

108
00:06:38.740 --> 00:06:39.850
If we need to make albums.

109
00:06:39.850 --> 00:06:41.695
We might not get to albums,

110
00:06:41.695 --> 00:06:47.280
which is fine because it's really not
that an exciting feature to work on.

111
00:06:47.280 --> 00:06:50.070
But these are the main core things.

112
00:06:50.070 --> 00:06:52.254
This is gonna enable us to play
some music and have playlists,

113
00:06:52.254 --> 00:06:54.510
which I think is probably
the most important part.

114
00:06:54.510 --> 00:06:58.544
We did a lot of database stuff just now
I know there's a lot coming at you,

115
00:06:58.544 --> 00:07:02.910
especially if you've never done any
database work, a lot of these new terms,

116
00:07:02.910 --> 00:07:04.380
or this crazy stuff.

117
00:07:04.380 --> 00:07:09.190
But I promise you, it's never been
easier to get started with a database.

118
00:07:09.190 --> 00:07:15.950
And today I'm ever trying to learn about
databases ten years ago, I was like what?

119
00:07:15.950 --> 00:07:17.620
This sounds like rocket science.

120
00:07:17.620 --> 00:07:19.520
I don't understand what's going on.

121
00:07:19.520 --> 00:07:23.020
You had to understand index strategies and
all this stuff.

122
00:07:23.020 --> 00:07:26.038
Now there's so many tools that just
abstracted away from you where we

123
00:07:26.038 --> 00:07:28.550
know as an industry that this
is the best way to do things.

124
00:07:28.550 --> 00:07:30.520
So we're just gonna do it this way.

125
00:07:30.520 --> 00:07:34.659
And it usually works for that 90% of the
time until you get to scale you're serving

126
00:07:34.659 --> 00:07:38.447
hundreds of millions of users and you got
to go custom but for most of the time,

127
00:07:38.447 --> 00:07:41.329
a lot of this stuff just kind of works for
you out of the box.

128
00:07:43.320 --> 00:07:47.039
And again Prisma has really
good documentation so,

129
00:07:47.039 --> 00:07:52.616
a lot of this stuff is actually on here,
it kind of walks you through a lot of this

130
00:07:52.616 --> 00:07:58.049
stuff when I talked about those relations
if you wanna know more about that.

131
00:07:58.049 --> 00:08:03.725
I'm totally down to talk more about that
if anyone wants me to talk about that so

132
00:08:03.725 --> 00:08:08.112
like crazy to be talking many too
many it literally goes in and

133
00:08:08.112 --> 00:08:12.671
talks about like how you do those
many to many relationships and

134
00:08:12.671 --> 00:08:16.995
what they're for and
why you have them and stuff like that.

135
00:08:16.995 --> 00:08:18.891
So it's it's pretty cool.

136
00:08:18.891 --> 00:08:24.090
Okay, now that we have that, I'm actually
gonna go ahead and do our initial

137
00:08:24.090 --> 00:08:29.310
migration which will basically confirm
the database changes that we made.

138
00:08:29.310 --> 00:08:30.983
Like here are the changes that we want.

139
00:08:30.983 --> 00:08:33.901
I think we're good, so this is like
a push, there's like a git push,

140
00:08:33.901 --> 00:08:37.420
I'm gonna push these migrations up to the
database and be like, I'm totally good.

141
00:08:37.420 --> 00:08:45.700
So now I can say npx prisma migrate dev.

142
00:08:45.700 --> 00:08:49.170
The reason I want to do dev is because
I'm not ready to go to production yet,

143
00:08:49.170 --> 00:08:52.421
which will be like a different database,
which we haven't made yet,

144
00:08:52.421 --> 00:08:53.740
cuz we haven't deployed.

145
00:08:53.740 --> 00:08:57.060
So I'm just gonna put dev I'm
gonna run this migration.

146
00:08:57.060 --> 00:09:01.206
If it doesn't break, it'll say cool,
we migrated your database,

147
00:09:01.206 --> 00:09:03.962
it's probably gonna ask for a name.

148
00:09:03.962 --> 00:09:06.940
Here we go, saying, hey,
you're going to lose all the data.

149
00:09:06.940 --> 00:09:08.380
Here's all the changes that you made.

150
00:09:08.380 --> 00:09:12.470
So it's basically giving me like
a diff of all my schemas, right?

151
00:09:12.470 --> 00:09:14.330
Literally just like a git push.

152
00:09:14.330 --> 00:09:16.709
I'm gonna say yes,
I'm totally fine with that.

153
00:09:17.800 --> 00:09:21.710
Please do that is asking for
a name for the migration.

154
00:09:21.710 --> 00:09:24.943
Typically you give your migrations name,
just like you would a git

155
00:09:24.943 --> 00:09:27.780
commit to describe what you
did on this database change.

156
00:09:27.780 --> 00:09:31.330
I'm just gonna call this init is the first
time I actually did a migration.

157
00:09:31.330 --> 00:09:32.990
So we'll call this the init migration.

158
00:09:34.020 --> 00:09:38.540
Just like I would call my first
commit init and there we go.

159
00:09:38.540 --> 00:09:42.227
You can see we made a new migration, it
created a file for that migration thing,

160
00:09:42.227 --> 00:09:43.860
go check it out in a minute.

161
00:09:43.860 --> 00:09:47.790
And then it also generated the Prisma
Client again to generate those types for

162
00:09:47.790 --> 00:09:49.664
TypeScript based off of our schema,

163
00:09:49.664 --> 00:09:53.440
which is gonna come in handy when
we start creating the database.

164
00:09:53.440 --> 00:09:56.270
So now if we go look, you can see there's
a migrations folder inside of PRISMA.

165
00:09:57.580 --> 00:09:59.270
It's got a migration file.

166
00:09:59.270 --> 00:10:04.236
Right here based off this date And you
can see here all the changes I had to do

167
00:10:04.236 --> 00:10:07.070
it wrote the SQL for
us which is really cool.

168
00:10:07.070 --> 00:10:11.318
I've had to write these by hand before and
they're not fun I've literally

169
00:10:11.318 --> 00:10:15.870
broken in APA production so
many times just getting this wrong.

170
00:10:15.870 --> 00:10:20.431
So yeah, this is not fun at all and
the fact that they did it for

171
00:10:20.431 --> 00:10:23.128
us is just amazing, in my opinion.

172
00:10:23.128 --> 00:10:25.570
So really a big fan of that.

173
00:10:25.570 --> 00:10:28.614
One of the best database
tools I've used in a while.

174
00:10:28.614 --> 00:10:31.096
Cool, any questions on
the migrations there?

175
00:10:34.440 --> 00:10:37.170
Now as we go forward,
we can make changes to the schema.

176
00:10:37.170 --> 00:10:39.168
And we can just keep running db.push, and

177
00:10:39.168 --> 00:10:42.150
it'll tell us if we need
to run a migration or not.

178
00:10:42.150 --> 00:10:43.817
It'll detect a breaking change,

179
00:10:43.817 --> 00:10:47.810
like, You added a field that was
required that requires a migration.

180
00:10:47.810 --> 00:10:50.818
You deleted a field that was required
that requires a migration, or

181
00:10:50.818 --> 00:10:53.370
we might do something that
doesn't require migration.

182
00:10:53.370 --> 00:10:55.243
Just like cool,
you don't need a migration for this,

183
00:10:55.243 --> 00:10:56.710
you just added a field
that wasn't required.

184
00:10:56.710 --> 00:10:58.900
You don't need a migration for
that you're totally fine.

185
00:10:58.900 --> 00:11:02.490
So it'll detect the breaking change,
which is extremely hard to do.

186
00:11:02.490 --> 00:11:06.141
Trust me, the company that I started,
we literally had to do that on everyone's

187
00:11:06.141 --> 00:11:08.680
schema that they created for
us and it was not easy to do.

188
00:11:08.680 --> 00:11:10.730
It took me like seven months
to figure out how to do that.

189
00:11:11.840 --> 00:11:13.780
So really hard stuff to do [LAUGH].

190
00:11:13.780 --> 00:11:16.130
So I'm really liking the fact
that they have that for us.

