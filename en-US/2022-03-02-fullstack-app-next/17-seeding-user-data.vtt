WEBVTT

1
00:00:00.000 --> 00:00:01.050
Go back to our C-scripts here.

2
00:00:01.050 --> 00:00:02.840
So we have our artists and our songs.

3
00:00:02.840 --> 00:00:04.870
The next thing is I want to create a user.

4
00:00:04.870 --> 00:00:07.640
And then I want the user
to have some playlists.

5
00:00:07.640 --> 00:00:09.100
So we'll do that.

6
00:00:09.100 --> 00:00:12.541
The first thing is to create a user,
we need the password, but we're not gonna

7
00:00:12.541 --> 00:00:16.580
save the password as plain text because
come on now, that's not what we do.

8
00:00:16.580 --> 00:00:18.909
We're gonna hash the password before
we do that, in order to do that,

9
00:00:18.909 --> 00:00:20.440
we're gonna generate a salt.

10
00:00:20.440 --> 00:00:25.756
So I'm gonna say const salt =

11
00:00:25.756 --> 00:00:32.780
bcrypts.genSaltsSync, like that.

12
00:00:32.780 --> 00:00:33.920
That's gonna give us a salt.

13
00:00:33.920 --> 00:00:36.680
If you don't know anything about
encryption, don't worry about this.

14
00:00:36.680 --> 00:00:40.539
This is just, you could think
of it as like a, I don't know,

15
00:00:40.539 --> 00:00:45.950
encryption is like a reversible, it's like
if you could make food but also undo it.

16
00:00:47.040 --> 00:00:52.400
But the only way you could do it is if
you knew the special key to the oven.

17
00:00:52.400 --> 00:00:53.790
That's basically what this encryption is.

18
00:00:53.790 --> 00:00:57.582
And salt is a specific ingredient that
makes the food taste a certain way and

19
00:00:57.582 --> 00:01:01.950
you need that ingredient in there or
otherwise, it won't taste a certain way.

20
00:01:01.950 --> 00:01:05.584
That's the best way I can describe
it without getting into a bunch

21
00:01:05.584 --> 00:01:06.580
of crypto stuff.

22
00:01:07.950 --> 00:01:09.460
So we got a salt here.

23
00:01:09.460 --> 00:01:10.800
And the next one is you
need to make a user.

24
00:01:10.800 --> 00:01:15.840
So that's just gonna be a wait,
prisma.user.upsert.

25
00:01:19.550 --> 00:01:21.660
And for this,
pretty much is gonna be the same thing.

26
00:01:21.660 --> 00:01:27.020
So I'm gonna say find a user
where we'll go by email.

27
00:01:27.020 --> 00:01:32.580
And I'll say email is user@test.com,
that'd be our c user's email.

28
00:01:32.580 --> 00:01:35.991
If you find that user, I want you to do an
update of nothing because I don't actually

29
00:01:35.991 --> 00:01:38.420
want to update this user if you find them.

30
00:01:38.420 --> 00:01:40.780
But I do want to create
them if they don't exist.

31
00:01:40.780 --> 00:01:45.458
And what I want you to do when you
create them is I just want you to give

32
00:01:45.458 --> 00:01:49.868
them email of the same
email here user@test.com.

33
00:01:49.868 --> 00:01:56.039
And I want to give them
a password of bcrypt.hashSync,

34
00:01:56.039 --> 00:02:02.620
and you're just gonna type in
whatever password you want.

35
00:02:02.620 --> 00:02:05.760
I am just gonna type in password as my
password so I can log in super easy.

36
00:02:05.760 --> 00:02:07.036
And then the salt.

37
00:02:08.424 --> 00:02:10.674
So that should create a user.

38
00:02:10.674 --> 00:02:13.440
And we'll be doing the same thing when
we actually do the authentication.

39
00:02:13.440 --> 00:02:17.580
We'll be literally doing the same
strategy of making a user and sign up.

40
00:02:17.580 --> 00:02:18.950
I think this is pretty intuitive.

41
00:02:18.950 --> 00:02:21.380
I know I'm like hyping Prisma up,
I promise you I don't work for them.

42
00:02:22.430 --> 00:02:24.750
I've only met them once ever.

43
00:02:24.750 --> 00:02:26.830
I just think they created
a really good tool.

44
00:02:26.830 --> 00:02:27.330
Yeah, Mark.

45
00:02:28.670 --> 00:02:31.530
&gt;&gt; So does the Prisma code
get shipped to the client?

46
00:02:31.530 --> 00:02:33.230
Just to be clear?

47
00:02:33.230 --> 00:02:34.940
&gt;&gt; Does the Prisma code
get shipped to the client?

48
00:02:34.940 --> 00:02:36.530
Good question.

49
00:02:36.530 --> 00:02:41.070
That all actually depends on where you
write the code because Next.js does

50
00:02:41.070 --> 00:02:43.260
optimizations on imports.

51
00:02:43.260 --> 00:02:47.610
Thus far we have not written
any Prisma code on the client.

52
00:02:47.610 --> 00:02:49.280
So as of right now, no.

53
00:02:49.280 --> 00:02:51.762
And actually going forward for
this whole project, no,

54
00:02:51.762 --> 00:02:54.720
we will not be shipping any
Prisma code on the client.

55
00:02:54.720 --> 00:03:00.800
Although we will be writing Prisma code
in a component that is on the client.

56
00:03:00.800 --> 00:03:05.150
But the way Next.js behaves it actually
strips all that out for the client build.

57
00:03:05.150 --> 00:03:07.697
So although it does look like
it's been written on the client,

58
00:03:07.697 --> 00:03:10.340
it actually will be stripped
out before it gets built.

59
00:03:10.340 --> 00:03:14.140
And that's the power of Next.js,
so to answer your question, no.

60
00:03:14.140 --> 00:03:17.160
But yes, it will feel like that
when we get to the next step.

61
00:03:17.160 --> 00:03:20.010
But this whole C-scripting is
actually there's no client stuff.

62
00:03:20.010 --> 00:03:23.520
This is ran in node,
it only interacts with the database.

63
00:03:23.520 --> 00:03:28.256
So no, you probably wouldn't get a lot
of benefit out of the Prisma client on

64
00:03:28.256 --> 00:03:31.670
the front end because that
would be dangerous so yeah.

