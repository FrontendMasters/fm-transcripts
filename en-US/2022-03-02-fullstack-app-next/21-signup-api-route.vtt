WEBVTT

1
00:00:00.000 --> 00:00:04.059
Can Prisma generate and
validate CRSF tokens?

2
00:00:04.059 --> 00:00:06.770
No, Prisma cannot do that.

3
00:00:06.770 --> 00:00:09.353
Although, yeah, Prisma can't do that,

4
00:00:09.353 --> 00:00:13.946
it doesn't really know anything about
that as far, cuz that's more of like

5
00:00:13.946 --> 00:00:18.072
a front end issue when it comes to
hijacking things on the front end.

6
00:00:18.072 --> 00:00:22.890
No, typically, the way you get around that
with the strategy that we're doing is that

7
00:00:22.890 --> 00:00:26.724
you would create a refresh token
that is literally just another JWT.

8
00:00:26.724 --> 00:00:31.892
So you have your JWT expire, let's say
it expires, I don't know, 24 hours.

9
00:00:31.892 --> 00:00:35.535
And then after 24 hours, you would
basically have a refresh token, and

10
00:00:35.535 --> 00:00:38.910
then somewhere in your React app,
you would have a use effect hook.

11
00:00:38.910 --> 00:00:42.607
That's unlike a set interval that checks
every ten minutes to see if your JWT

12
00:00:42.607 --> 00:00:43.137
expired.

13
00:00:43.137 --> 00:00:47.914
And if it did, in the background,
it'll automatically exchange that JWT with

14
00:00:47.914 --> 00:00:51.922
the refresh token and get a new JWT,
so that user doesn't have to.

15
00:00:51.922 --> 00:00:55.506
That would be the best user experience
where no one has to do anything,

16
00:00:55.506 --> 00:00:57.350
it just logs you in automatically.

17
00:00:57.350 --> 00:01:01.769
The other way you would do it is you would
just tell the user, your JWT expired,

18
00:01:01.769 --> 00:01:02.603
sign in again.

19
00:01:02.603 --> 00:01:07.593
And you'll see that too, but typically,
you would make the JWT expire a lot later.

20
00:01:07.593 --> 00:01:12.049
&gt;&gt; In production, how does
serverless functions get executed?

21
00:01:12.049 --> 00:01:14.550
Like if we don't have
an active server running,

22
00:01:14.550 --> 00:01:17.179
how will I still get access
to these API endpoints?

23
00:01:17.179 --> 00:01:18.648
&gt;&gt; Good question.

24
00:01:18.648 --> 00:01:22.238
In production,
how do serverless functions execute?

25
00:01:22.238 --> 00:01:23.983
It's a different concept to think about.

26
00:01:23.983 --> 00:01:26.600
So it's called serverless
because there is no server.

27
00:01:26.600 --> 00:01:30.061
The way they get executed is
actually like a callback.

28
00:01:30.061 --> 00:01:33.992
So if you wrote a callback in JavaScript,
that function, okay,

29
00:01:33.992 --> 00:01:36.213
imagine you had a callback on click.

30
00:01:36.213 --> 00:01:39.831
That function actually doesn't do
anything until the click event fires.

31
00:01:39.831 --> 00:01:41.203
The serverless function's the same way.

32
00:01:41.203 --> 00:01:44.626
It actually doesn't do anything
until an event come in.

33
00:01:44.626 --> 00:01:48.609
And depending on what platform you're on,
there's many different types of events.

34
00:01:48.609 --> 00:01:50.929
The most common one is a route.

35
00:01:50.929 --> 00:01:55.453
So whenever this route across the Internet
is activated, that's an event.

36
00:01:55.453 --> 00:01:58.949
And then once that event happens,
your function is executed.

37
00:01:58.949 --> 00:02:02.520
So there's no server, it's literally
just like a callback waiting for

38
00:02:02.520 --> 00:02:03.640
some incoming event.

39
00:02:03.640 --> 00:02:07.336
In this case, the events are the routes,
so it feels and looks like an API, but

40
00:02:07.336 --> 00:02:10.545
in reality, these serverless
functions can respond to anything.

41
00:02:10.545 --> 00:02:13.961
They can respond to things
being added to AWSS3.

42
00:02:13.961 --> 00:02:15.359
They can respond to logs.

43
00:02:15.359 --> 00:02:19.791
They can respond to someone
updating the users on the database.

44
00:02:19.791 --> 00:02:23.274
They literally can respond to anything
depending on what platform you go to.

45
00:02:23.274 --> 00:02:28.049
But in this case of Next.js,
they respond to a route and a verb.

46
00:02:28.049 --> 00:02:30.109
So someone doing a GET
request to this route,

47
00:02:30.109 --> 00:02:33.375
someone doing a POST request to this
route, that's how they respond.

48
00:02:33.375 --> 00:02:37.452
So yeah, the whole concept of
a server running, there isn't one.

49
00:02:37.452 --> 00:02:39.672
It's just callbacks waiting on events.

50
00:02:39.672 --> 00:02:44.397
And as far as the technical details of how
that happens, it's basically like a VM

51
00:02:44.397 --> 00:02:49.344
that gets spinned up, your code is zipped
up in a file somewhere, an s3 somewhere.

52
00:02:49.344 --> 00:02:51.825
It gets unzipped and
then it gets executed.

53
00:02:51.825 --> 00:02:55.767
It waits around for a little bit, and
then eventually, that VM shuts down and

54
00:02:55.767 --> 00:02:58.204
then it spins back up and
someone hits it again.

55
00:02:58.204 --> 00:03:00.577
All right, let's do this.

56
00:03:00.577 --> 00:03:05.085
So first, we gotta get salty
just like we did in the seed.

57
00:03:05.085 --> 00:03:11.418
So we'll create a salt here and
we'll just say bcrypt,

58
00:03:11.418 --> 00:03:16.792
oops, = bcrypt.genSaltSync, Like that.

59
00:03:16.792 --> 00:03:18.340
So we've got our salts.

60
00:03:20.328 --> 00:03:23.849
And then we need to get the email and
password.

61
00:03:23.849 --> 00:03:26.950
So I'm the backend,
I'm making the function.

62
00:03:26.950 --> 00:03:32.147
So I'm saying if you want to sign in,
you must pass the email and password up.

63
00:03:32.147 --> 00:03:35.105
And I'm gonna get that on req.body,
very much like Express.

64
00:03:35.105 --> 00:03:38.264
If you ever use Express,
you're gonna feel very comfortable here,

65
00:03:38.264 --> 00:03:41.817
because most of the serverless functions
are pretty much based off Express.

66
00:03:41.817 --> 00:03:45.060
So we'll get the req.body here.

67
00:03:45.060 --> 00:03:48.056
And then now what we need to
do is a tip to make this user.

68
00:03:48.056 --> 00:03:52.828
So we're doing async await, so
we'll do some try catches in here.

69
00:03:52.828 --> 00:03:57.392
So I'll say I wanna try, and
I'm gonna catch an error just in case.

70
00:03:57.392 --> 00:04:01.532
So what I'm going to attempt to try is
I'm gonna try to create a new user.

71
00:04:01.532 --> 00:04:04.074
The reason I'm putting this in a try
catch because this might fail,

72
00:04:04.074 --> 00:04:06.304
if you give me an email that
already exists in the database,

73
00:04:06.304 --> 00:04:08.914
the person is gonna throw an error and
say this email already exists.

74
00:04:08.914 --> 00:04:13.450
And that's it,
that gonna cause an application error.

75
00:04:13.450 --> 00:04:16.645
But we don't want our process to
error out simply because someone,

76
00:04:16.645 --> 00:04:20.456
like imagine you had a server that crashed
every time someone tried to sign up with

77
00:04:20.456 --> 00:04:21.256
the same email.

78
00:04:21.256 --> 00:04:22.929
That would be terrible, right?

79
00:04:22.929 --> 00:04:26.682
[LAUGH] You don't want that, so that's
why I'm wrapping this in a try catch.

80
00:04:26.682 --> 00:04:30.450
I don't want that to happen,
that's not our fault, that's a user error.

81
00:04:30.450 --> 00:04:36.381
So I'm gonna say user =
await prisma.user.create.

82
00:04:36.381 --> 00:04:40.163
We're gonna attempt to
create this user here.

83
00:04:40.163 --> 00:04:45.496
So we got the data, and then we're gonna
say this email and this password, right?

84
00:04:45.496 --> 00:04:52.260
And then as far as password goes,
obviously we want to hash this.

85
00:04:52.260 --> 00:04:57.939
So we'll say bcrypt.hashSync,
and this takes in the password

86
00:04:57.939 --> 00:05:03.842
that they sent up plus the salt
that we created, so we'll do that.

87
00:05:04.973 --> 00:05:09.618
And then if we do get an error here,
and it's either the database crashed or

88
00:05:09.618 --> 00:05:11.020
something wrong, but

89
00:05:11.020 --> 00:05:15.918
more realistically is that you just sent
up an email that someone already has.

90
00:05:15.918 --> 00:05:21.001
So I'm gonna set the status to a 401,
as in sorry, you're not getting it here.

91
00:05:21.001 --> 00:05:23.966
And then I'm going to send back,
and this is just optional.

92
00:05:23.966 --> 00:05:26.674
I always like to just send
back JSON regardless.

93
00:05:26.674 --> 00:05:31.886
And I'm gonna send back an error
property that says user already exists.

94
00:05:31.886 --> 00:05:36.626
This way, when I'm on my frontend,
I can always just check .error and

95
00:05:36.626 --> 00:05:38.132
get an error message.

96
00:05:38.132 --> 00:05:40.444
So that's just a standard
that I've been doing.

97
00:05:40.444 --> 00:05:43.378
There's so many ways to handle
errors on our frontend, but for me,

98
00:05:43.378 --> 00:05:44.826
I always just send back .error.

99
00:05:44.826 --> 00:05:49.909
And that's there, okay, whatever
the service said, that's pretty obvious.

100
00:05:49.909 --> 00:05:53.729
Then we pull a return here because we
are gonna go outside of this catch.

101
00:05:53.729 --> 00:05:57.889
And then assuming that the user was
created, we need to make a token now, so

102
00:05:57.889 --> 00:05:58.892
a JSON web token.

103
00:05:58.892 --> 00:06:03.784
And the way we can do that is I'm
gonna say token = jwt.sign, so

104
00:06:03.784 --> 00:06:05.331
we can sign a token.

105
00:06:05.331 --> 00:06:08.136
And it's really only needs two things.

106
00:06:08.136 --> 00:06:10.850
The requirements are one,
the payload that you wanna sign.

107
00:06:10.850 --> 00:06:14.350
So what object do you
wanna hash basically?

108
00:06:14.350 --> 00:06:17.650
In this case, I want to hash
an object that has an email,

109
00:06:17.650 --> 00:06:20.547
which is gonna be the email
that the user gave me.

110
00:06:20.547 --> 00:06:22.166
Now, we're gonna say user.email.

111
00:06:24.473 --> 00:06:28.618
And then I want to pass the ID of
the user, which will be user.id.

112
00:06:28.618 --> 00:06:34.320
And then I want to just put a time of when
this was created, which will be Date.now.

113
00:06:34.320 --> 00:06:36.825
It's just nice to know when
this thing was created.

114
00:06:36.825 --> 00:06:40.788
And then the next thing
is you need a secret.

115
00:06:40.788 --> 00:06:44.070
This is how I know that my
server created this thing.

116
00:06:44.070 --> 00:06:47.791
So typically, we put this in
an environment variable somewhere and

117
00:06:47.791 --> 00:06:48.843
you'll store it.

118
00:06:48.843 --> 00:06:50.959
We'll probably do that when
we go to production but for

119
00:06:50.959 --> 00:06:52.203
now we're gonna type in Hello.

120
00:06:52.203 --> 00:06:53.925
It doesn't really matter
what it is right now.

121
00:06:53.925 --> 00:06:54.847
So that will be my secret.

122
00:06:54.847 --> 00:06:58.404
And then the third
argument is some options.

123
00:06:58.404 --> 00:07:02.616
The first one I wanna say is expiresIn.

124
00:07:02.616 --> 00:07:07.323
And I'm just gonna say this expires in,
I don't know, eight hours.

125
00:07:07.323 --> 00:07:10.470
So I could put 8h like that, and
it'll expire in eight hours.

126
00:07:12.266 --> 00:07:13.190
I'll put anything short,

127
00:07:13.190 --> 00:07:15.370
this is gonna get really annoying
when I'm developing up here.

128
00:07:15.370 --> 00:07:17.548
I don't want to keep signing in,
I don't wanna keep doing that.

129
00:07:17.548 --> 00:07:21.922
So I'll just put eight hours, and
if it gets us, it gets us, we deserve it.

130
00:07:21.922 --> 00:07:26.012
Okay, Cool, so there's our token.

131
00:07:26.012 --> 00:07:27.738
This token is gonna be a string.

132
00:07:27.738 --> 00:07:32.256
So it's gonna be this really long,
unique string that looks insane.

133
00:07:32.256 --> 00:07:37.452
And on subsequent requests that we
wanna protect, we can take a look

134
00:07:37.452 --> 00:07:42.388
at the string and reverse this process and
get back this object.

135
00:07:42.388 --> 00:07:46.484
And then that's how we identify and
authorize who is who.

136
00:07:46.484 --> 00:07:50.060
So yeah, that's how JWTs work.

137
00:07:50.060 --> 00:07:52.769
And then the last thing is
to set this JWT in a cookie,

138
00:07:52.769 --> 00:07:56.651
which if you don't know how cookies work,
if you set a cookie while you're

139
00:07:56.651 --> 00:08:00.679
on a request, before you send it back,
it's gonna get added to the browser.

140
00:08:00.679 --> 00:08:04.705
So if we set the cookie here and we send
a response back, this cookie that we're

141
00:08:04.705 --> 00:08:08.189
setting will get set into the person's
browser that requested us.

142
00:08:08.189 --> 00:08:11.858
So we're doing that, other times you'll
see people just send back the JWT and

143
00:08:11.858 --> 00:08:14.872
JSON and it'll save it in local storage or
something like that.

144
00:08:14.872 --> 00:08:19.513
The local storage is fine, but
it can be accessed by JavaScript.

145
00:08:19.513 --> 00:08:21.972
We set it as a cookie and do HTTP only.

146
00:08:21.972 --> 00:08:23.510
It cannot be accessed by JavaScript.

147
00:08:23.510 --> 00:08:25.514
It can only be accessed by HTTP.

148
00:08:25.514 --> 00:08:27.307
So it's probably a better method.

149
00:08:27.307 --> 00:08:30.032
And then you don't have to write any code
on the frontend to send it up because

150
00:08:30.032 --> 00:08:31.621
cookies are sent up automatically anyway.

151
00:08:31.621 --> 00:08:36.442
So it saves us a lot of time and it gives
us a lot more security against CSRF.

152
00:08:36.442 --> 00:08:41.486
So we're gonna say rest.setHeader,
like this.

153
00:08:41.486 --> 00:08:45.442
And the header that we want is
called the Set-Cookie header.

154
00:08:45.442 --> 00:08:50.945
So we'll say Set-Cookie, and
then we're gonna use this cookie package.

155
00:08:50.945 --> 00:08:53.039
So we say cookie.serialize.

156
00:08:55.275 --> 00:08:58.381
And then the name of the cookie,
you can call it whatever you want.

157
00:08:58.381 --> 00:09:04.852
I'm just gonna call mine
TRAX_ACCESS_TOKEN, like that.

158
00:09:04.852 --> 00:09:07.755
Again, you'd probably put this in
an environment variable somewhere too.

159
00:09:07.755 --> 00:09:10.464
We might do that, or at least make
a constant file cuz we're probably gonna

160
00:09:10.464 --> 00:09:11.549
write this three more files.

161
00:09:11.549 --> 00:09:13.959
So this is annoying to write
it multiple times, but

162
00:09:13.959 --> 00:09:15.650
we'll get there when we get there.

163
00:09:15.650 --> 00:09:19.556
The next argument is the token
that we just created.

164
00:09:19.556 --> 00:09:23.647
And then the last argument is an options
objects that we want to pass in.

165
00:09:23.647 --> 00:09:25.317
So there's a couple
things we wanna do here.

166
00:09:25.317 --> 00:09:29.696
The first thing is we wanna
make sure this is httpOnly.

167
00:09:29.696 --> 00:09:35.472
So that means it can only be accessed
in HTTP requests and not by JavaScript.

168
00:09:35.472 --> 00:09:40.426
MaxAge, I think

169
00:09:40.426 --> 00:09:44.713
we wanna make this six hour for whales,
the same as a JWT, that'll be six.

170
00:09:44.713 --> 00:09:49.248
I wish we could just do 6h, this library
doesn't support that, or 8 hours.

171
00:09:49.248 --> 00:09:56.465
So I think this will be 8,
it'll be 8 times 60 times 60.

172
00:09:56.465 --> 00:09:59.712
Yeah, yeah, so that would be 8 hours.

173
00:09:59.712 --> 00:10:01.247
Cuz I think it goes by milliseconds.

174
00:10:01.247 --> 00:10:06.061
And then path, this is the whole website,

175
00:10:06.061 --> 00:10:09.152
so the root of the website.

176
00:10:09.152 --> 00:10:11.485
And then sameSite: 'lax',

177
00:10:11.485 --> 00:10:15.810
I actually forgot what this means,
but I always do this.

178
00:10:15.810 --> 00:10:18.653
So anybody knows what that means,
let me know.

179
00:10:18.653 --> 00:10:23.763
I don't know what that means anymore,
I've lost track, but I do it now.

180
00:10:23.763 --> 00:10:28.737
And then secure,
this is if you want it to be HTTPS or not.

181
00:10:28.737 --> 00:10:31.008
We'll base this on whether the fact
that we're in production or not.

182
00:10:31.008 --> 00:10:35.618
So we'll say process.env.NODE_ENV
=== production.

183
00:10:35.618 --> 00:10:39.769
So if we're in production, then yeah,
this needs to be httpsOnly, but

184
00:10:39.769 --> 00:10:42.641
obviously we're not gonna
do that on localhost.

185
00:10:42.641 --> 00:10:48.849
And then lastly, we'll say
res.json(user) to send the user back.

