WEBVTT

1
00:00:00.150 --> 00:00:03.228
So if you're making say
a server with node and express,

2
00:00:03.228 --> 00:00:07.550
there's the concept of middleware a lot,
at least which is used.

3
00:00:07.550 --> 00:00:11.357
And that you could just deploy on Heroku,
right, cuz that's running node.

4
00:00:11.357 --> 00:00:14.425
But for this idea of middleware,
we're talking about edge,

5
00:00:14.425 --> 00:00:18.567
which I'm assuming it will deployed in
a very specific way if it's in production.

6
00:00:18.567 --> 00:00:20.940
So is there limited options for
deploying in next js applications?

7
00:00:20.940 --> 00:00:22.470
&gt;&gt; So very good question.

8
00:00:22.470 --> 00:00:26.768
Yeah, so next js is created by
the people who make Vercel,

9
00:00:26.768 --> 00:00:29.590
which is their own hosting provider.

10
00:00:29.590 --> 00:00:31.500
They have their own architecture.

11
00:00:31.500 --> 00:00:35.476
So yeah, I think that's their play, right,
is to create all these awesome tools that

12
00:00:35.476 --> 00:00:39.820
integrate with their framework, that
their platform supports out of the box.

13
00:00:39.820 --> 00:00:44.403
But they've also done a really good job of
making sure that that architecture works

14
00:00:44.403 --> 00:00:46.610
outside their platform, too.

15
00:00:46.610 --> 00:00:51.063
So I haven't investigated how you
might go about getting their edge

16
00:00:51.063 --> 00:00:53.573
functions to work outside of Vercel.

17
00:00:53.573 --> 00:00:55.015
But I would imagine, one,

18
00:00:55.015 --> 00:00:59.210
it would require you to deploy to a place
that even had it in the first place.

19
00:00:59.210 --> 00:01:00.360
Heroku doesn't have it.

20
00:01:00.360 --> 00:01:04.460
Even though they use AWS, which does
have it, Heroku just hasn't done it yet.

21
00:01:04.460 --> 00:01:07.803
I know they're in talks of doing x
functions and lambda functions, but

22
00:01:07.803 --> 00:01:09.800
they just haven't done it yet.

23
00:01:09.800 --> 00:01:11.490
So you probably couldn't do it there.

24
00:01:11.490 --> 00:01:15.681
But I would pretty sure that if
you deploy this to AWS yourself,

25
00:01:15.681 --> 00:01:17.669
you should have access to it.

26
00:01:17.669 --> 00:01:21.650
Because I know if you deploy just
a regular next js without the middleware,

27
00:01:21.650 --> 00:01:25.629
you have access to the edge functions
that next js has in AWS without going to

28
00:01:25.629 --> 00:01:26.590
Vercel.

29
00:01:26.590 --> 00:01:31.947
So I would imagine you do have that, but
you want just the best compatibility,

30
00:01:31.947 --> 00:01:36.590
just deploy to Vercel and yeah,
they have really good deployment.

31
00:01:36.590 --> 00:01:39.255
So it's not that big of a deal,
but yeah, very great question.

32
00:01:39.255 --> 00:01:42.535
&gt;&gt; If you see that the 404
pages don't redirect,

33
00:01:42.535 --> 00:01:45.870
is there a way to redirect that as well?

34
00:01:45.870 --> 00:01:48.480
&gt;&gt; Yeah, 404 pages don't redirect.

35
00:01:48.480 --> 00:01:50.078
Is there a way to redirect for 404?

36
00:01:50.078 --> 00:01:53.170
There are so many ways to redirect.

37
00:01:53.170 --> 00:01:56.070
It depends on when and
where you wanna redirect.

38
00:01:56.070 --> 00:01:58.640
Do you wanna redirect
before your app runs?

39
00:01:58.640 --> 00:02:03.678
Do you wanna redirect during server time?

40
00:02:03.678 --> 00:02:06.670
Do you wanna redirect during client time?

41
00:02:06.670 --> 00:02:08.530
I just made those two things up.

42
00:02:08.530 --> 00:02:11.420
But yeah, so if you wanna redirect
before your app is executed,

43
00:02:11.420 --> 00:02:13.950
then you would just write
another middleware, right?

44
00:02:13.950 --> 00:02:17.530
You would write another
middleware based off some rules.

45
00:02:17.530 --> 00:02:18.279
Who knows what it is?

46
00:02:18.279 --> 00:02:20.724
Maybe you have an array just like
I have here with all your routes.

47
00:02:20.724 --> 00:02:25.827
And if none of the incoming request
matches those routes, you can redirect

48
00:02:25.827 --> 00:02:31.013
to wherever you want or set the response
to 404, however you wanna do it.

49
00:02:31.013 --> 00:02:34.830
If you wanna redirect on the server, we
haven't gotten into server side functions

50
00:02:34.830 --> 00:02:38.590
yet, inside of the components,
we will soon you can redirect in there.

51
00:02:38.590 --> 00:02:42.831
The third option is you can wait till your
component loads up on the client, and

52
00:02:42.831 --> 00:02:46.250
you can use the use router to
redirect from there as well, yes.

53
00:02:48.800 --> 00:02:54.828
&gt;&gt; Is there any relation of middleware
functions to angular interceptors?

54
00:02:54.828 --> 00:02:58.853
&gt;&gt; That's a really, damn,
some geez, in there, okay.

55
00:02:58.853 --> 00:03:02.927
Angular interceptors, I haven't
heard that in a long time [LAUGH].

56
00:03:02.927 --> 00:03:04.284
Okay, question, yeah,

57
00:03:04.284 --> 00:03:08.060
is there relationship to these
middleware functions to interceptors?

58
00:03:08.060 --> 00:03:11.462
In concept, they're very similar.

59
00:03:11.462 --> 00:03:16.254
They both intercept a request, and
they manipulate that request or they check

60
00:03:16.254 --> 00:03:20.988
something, and they either continue on
to another middleware or they stop.

61
00:03:20.988 --> 00:03:24.367
The only difference is for
the angular interceptors,

62
00:03:24.367 --> 00:03:29.225
those happen during runtime in a
JavaScript context on your browser, right.

63
00:03:29.225 --> 00:03:31.234
So they're intercepting
typically JSON requests.

64
00:03:31.234 --> 00:03:35.347
If you're making an API call, you can
make an interception on the way out and

65
00:03:35.347 --> 00:03:38.577
you can intercept it on the way
coming back from the server.

66
00:03:38.577 --> 00:03:43.431
Whereas this is actually
happening on the network layer.

67
00:03:43.431 --> 00:03:47.421
So this is not happening in the browser
like an angular interceptor would,

68
00:03:47.421 --> 00:03:49.462
this is happening on a CDN somewhere.

69
00:03:49.462 --> 00:03:52.832
So it's already left the browser,
the request is headed to the server.

70
00:03:52.832 --> 00:03:54.638
Before it gets to the server,

71
00:03:54.638 --> 00:03:58.622
it stops on the edge of the CDN
which is whatever is closest to you.

72
00:03:58.622 --> 00:04:04.062
So if you're in San Francisco, then the
closest one might be in Oregon somewhere.

73
00:04:04.062 --> 00:04:08.745
It'll stop there and be like, actually,
I gotta check your token before I send you

74
00:04:08.745 --> 00:04:11.552
over to this server to render
this homepage for you.

75
00:04:11.552 --> 00:04:12.732
Let me see what you got.

76
00:04:12.732 --> 00:04:16.174
So it's a little different because
it happened somewhere else, but

77
00:04:16.174 --> 00:04:17.432
the concept is the same.

78
00:04:17.432 --> 00:04:21.549
And the benefit of that is that because
it's happening on the network layer,

79
00:04:21.549 --> 00:04:24.161
you get the benefit of
still being SEO friendly.

80
00:04:24.161 --> 00:04:29.608
So think about making a middleware on the
network that checks someone's IP address,

81
00:04:29.608 --> 00:04:33.541
looks that up in the table to
see that this is Coca-Cola or

82
00:04:33.541 --> 00:04:35.223
this is some big company.

83
00:04:35.223 --> 00:04:40.351
And then, getting the html document
from the source, changing out some

84
00:04:40.351 --> 00:04:45.163
headers on the page to say,
hi Coca-Cola and then sending it back.

85
00:04:45.163 --> 00:04:48.869
So now Coca-Cola sees a custom page just
for them based off their IP address and

86
00:04:48.869 --> 00:04:50.564
it's still SEO friendly, right.

87
00:04:50.564 --> 00:04:52.796
So you can do that on the edge,
where if you did that on the server,

88
00:04:52.796 --> 00:04:53.859
it wouldn't be SEO friendly.

89
00:04:53.859 --> 00:04:57.399
If you did that on the client,
it obviously would not be SEO friendly, so

90
00:04:57.399 --> 00:04:58.860
different things like that.

