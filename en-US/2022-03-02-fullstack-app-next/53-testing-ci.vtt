WEBVTT

1
00:00:00.110 --> 00:00:03.676
I did at least want to talk about
testing I said I was gonna do that and

2
00:00:03.676 --> 00:00:05.342
then I wanna talk about the CI.

3
00:00:05.342 --> 00:00:09.048
So I'll talk about those things don't
have time to actually do them but

4
00:00:09.048 --> 00:00:13.740
I'll talk about them for testing we all
know the different types of testing.

5
00:00:13.740 --> 00:00:17.760
There's unit testing, nothing changes
here with next JS and unit testing.

6
00:00:17.760 --> 00:00:22.136
So you could use just to do your unit
testing with your components on a small

7
00:00:22.136 --> 00:00:23.630
level that still works.

8
00:00:23.630 --> 00:00:25.850
It literally has nothing to do with RxJS.

9
00:00:25.850 --> 00:00:29.340
And if you want to in testing, there's so
many different solutions out there.

10
00:00:29.340 --> 00:00:35.250
I've actually just been using Cypress,
Cypress is so good.

11
00:00:35.250 --> 00:00:38.570
So I've just been using them,
really legit.

12
00:00:38.570 --> 00:00:41.386
If you just want to test out
the API endpoints as well,

13
00:00:41.386 --> 00:00:42.770
you can do the same thing.

14
00:00:42.770 --> 00:00:44.690
You can unit test these things.

15
00:00:44.690 --> 00:00:49.510
I mean, you can mark out these objects
quite I mean, there's only two arguments.

16
00:00:49.510 --> 00:00:52.280
In this case three,
you can mark those out so easily.

17
00:00:52.280 --> 00:00:57.520
Prisma works just like any other ORM
give it a test database to connect to.

18
00:00:57.520 --> 00:00:59.310
You're good to go.
You don't have to do anything else.

19
00:01:00.520 --> 00:01:01.790
That also works in jest.

20
00:01:01.790 --> 00:01:04.740
And then if you want to do like, you
actually want to test out the endpoints.

21
00:01:06.370 --> 00:01:09.361
Just like you would test any other API.

22
00:01:09.361 --> 00:01:12.910
You can use something like super test or
super agent things.

23
00:01:12.910 --> 00:01:16.690
That's another one that will just
test out the API endpoints for you.

24
00:01:16.690 --> 00:01:20.918
That also works It basically the end of
the day, there's nothing unique about

25
00:01:20.918 --> 00:01:25.730
testing a next as app versus testing any
other react app, or any other Express app.

26
00:01:25.730 --> 00:01:26.718
It's basically the same thing.

27
00:01:26.718 --> 00:01:31.449
I don't think there's even like a custom
next JS testing suite because it's

28
00:01:31.449 --> 00:01:32.480
the same thing.

29
00:01:33.890 --> 00:01:38.340
Not that I heard of, if it is it's new and
we both want to find out, like right now.

30
00:01:38.340 --> 00:01:41.570
I'll update and
say use your Cypress and then use jest.

31
00:01:41.570 --> 00:01:46.586
So yeah it's exactly what I recommend
it there's really nothing to it if

32
00:01:46.586 --> 00:01:51.534
you've already tested react before
you already know how to test this.

33
00:01:51.534 --> 00:01:55.686
It's pretty simple so and
then as far as CI goes there's so

34
00:01:55.686 --> 00:01:58.500
many things to come that goes with CI.

35
00:01:58.500 --> 00:02:03.339
I recommend using GitHub actions for the
CI, and that's crazy that I'm saying that,

36
00:02:03.339 --> 00:02:06.983
coz I'm here, when this came out
like two years ago, I was like,

37
00:02:06.983 --> 00:02:08.530
I'm never gonna use this.

38
00:02:09.670 --> 00:02:10.840
It's never gonna happen.

39
00:02:10.840 --> 00:02:14.301
I'm just gonna use Travis CI,
but it's actually really cool,

40
00:02:14.301 --> 00:02:16.980
just have all your stuff
built in the GitHub.

41
00:02:16.980 --> 00:02:20.590
And the community and the projects
around it are also really nice.

42
00:02:20.590 --> 00:02:22.730
So, if you wanted to get started,
you can go to your repo.

43
00:02:22.730 --> 00:02:26.700
Some of them are repositories,
we're gonna click on my repo.

44
00:02:28.470 --> 00:02:32.370
And you can see right here it says
actions, you can click on Actions.

45
00:02:32.370 --> 00:02:33.450
And you can go through here.

46
00:02:33.450 --> 00:02:38.605
And you can find a workflow that you want,
I'm gonna type in.

47
00:02:38.605 --> 00:02:42.430
They have a search here,
I don't think they have a search here.

48
00:02:42.430 --> 00:02:47.542
If I want to find one for like
testing Express or no it used to be at

49
00:02:47.542 --> 00:02:52.760
the top now it's not not like
you're not gonna do it, alright.

50
00:02:54.810 --> 00:02:55.370
Okay, here we go.

51
00:02:55.370 --> 00:02:56.790
We got some more.

52
00:02:56.790 --> 00:02:59.972
There's a no JS when we start here and
acid test scripts ourself.

53
00:02:59.972 --> 00:03:02.604
So you could like click here,
set this workflow up, and

54
00:03:02.604 --> 00:03:05.010
basically you'll get this file.

55
00:03:05.010 --> 00:03:09.783
You're gonna have to read their docs
on how to actually navigate this

56
00:03:09.783 --> 00:03:14.804
Yamo file to understand how to use
like their whole jobs architecture and

57
00:03:14.804 --> 00:03:17.700
things like that like what steps to take.

58
00:03:17.700 --> 00:03:22.610
But he's ever seen Docker before,
a Docker compose is very much like that.

59
00:03:22.610 --> 00:03:26.925
You check out some action,
you set some very binary variables, and

60
00:03:26.925 --> 00:03:29.120
then you can run some commands, so

61
00:03:29.120 --> 00:03:33.540
you can see where this thing actually
Test it runs NPM test, right?

62
00:03:33.540 --> 00:03:38.560
And then you can you can set this up
into your your project, what it'll do is

63
00:03:38.560 --> 00:03:43.990
it'll commit a file into a dot GitHub
folder slash workflows and put that there.

64
00:03:43.990 --> 00:03:46.509
Then on every pull request
it'll pick that up.

65
00:03:46.509 --> 00:03:49.584
All you got to do is in your settings for

66
00:03:49.584 --> 00:03:54.789
your repo as you can go down to,
where is it, that's branches.

67
00:03:54.789 --> 00:03:57.573
You go to branches you
can select a branch.

68
00:03:57.573 --> 00:03:58.866
You click add a rule.

69
00:03:58.866 --> 00:04:03.007
And then you can do is you can set
up a rule for like requiring status

70
00:04:03.007 --> 00:04:08.370
status checks to pass In this will,
if your GitHub action exits with an error.

71
00:04:08.370 --> 00:04:10.880
That's a failing status code,
so then it won't pass.

72
00:04:10.880 --> 00:04:15.134
So you would say, yeah, I require all
those to pass and then therefore, yeah,

73
00:04:15.134 --> 00:04:17.370
it won't do anything until that passes.

74
00:04:17.370 --> 00:04:18.845
And that's how you can set up CI so

75
00:04:18.845 --> 00:04:22.530
you can write whatever script that you
want in there to do whatever you want.

76
00:04:22.530 --> 00:04:24.260
It's pretty powerful
just like any other car.

77
00:04:25.480 --> 00:04:28.863
I think the only thing that's different
about this is if you wanna set environment

78
00:04:28.863 --> 00:04:29.410
variables.

79
00:04:29.410 --> 00:04:30.470
That one's a little weird.

80
00:04:30.470 --> 00:04:34.949
You have to do it inside of
your own personal settings.

81
00:04:34.949 --> 00:04:39.426
You got to go to settings and
you got to go to where's that?

82
00:04:39.426 --> 00:04:42.460
Developer settings and now it's not here.

83
00:04:42.460 --> 00:04:47.335
There's somewhere you got to add
environment variables that's kind

84
00:04:47.335 --> 00:04:48.083
of weird.

85
00:04:48.083 --> 00:04:52.769
Typically you'll do it on your
your organization's settings, so

86
00:04:52.769 --> 00:04:55.818
he's not attached to your personal thing.

87
00:04:55.818 --> 00:05:00.973
And that's it the other way is just
to use something like Travis CI or

88
00:05:00.973 --> 00:05:04.510
circle CI Or Jenkins or
even slack now I guess.

89
00:05:06.510 --> 00:05:08.360
This one's pretty simple,
It's kind of like Verso.

90
00:05:08.360 --> 00:05:09.670
You just sign in with GitHub.

91
00:05:09.670 --> 00:05:12.910
You point it to a repo and
you tell it what script to run.

92
00:05:12.910 --> 00:05:16.978
That's it, and you just got to make
sure you set up the script that says,

93
00:05:16.978 --> 00:05:21.690
I'm using node I need you to do an NPM
install, I need to do to do an NPM test.

94
00:05:21.690 --> 00:05:23.477
Here's my database URL.

95
00:05:23.477 --> 00:05:25.860
It's literally like
deploying is the same thing.

96
00:05:25.860 --> 00:05:27.140
It's gonna need environment variables.

97
00:05:27.140 --> 00:05:31.592
It's gonna need a repo, and then it'll
run and it will report back to GIThub for

98
00:05:31.592 --> 00:05:34.440
you whether the test failed or not.

99
00:05:34.440 --> 00:05:37.370
It's free for open source,
it costs money for private repos.

100
00:05:37.370 --> 00:05:41.053
GitHub actions are free for
up until a certain point but for

101
00:05:41.053 --> 00:05:46.030
what you mostly need will be free so
that's why he's gonna have actions cool.

102
00:05:47.880 --> 00:05:52.558
Any questions on any of that stuff that
I just talked about deployment, CI,

103
00:05:52.558 --> 00:05:54.200
testing, yes.

104
00:05:54.200 --> 00:05:57.808
&gt;&gt; When we did the deployment and
it builds out a project it built looks

105
00:05:57.808 --> 00:06:00.457
like a built set of pages for
sign in and sign out.

106
00:06:00.457 --> 00:06:01.554
&gt;&gt; Yes.

107
00:06:01.554 --> 00:06:03.034
&gt;&gt; Like a configuration in next door.

108
00:06:03.034 --> 00:06:06.599
It's figuring that out because like
if you're just using create reactive

109
00:06:06.599 --> 00:06:09.328
by default,
it just creates like an index page, right?

110
00:06:09.328 --> 00:06:14.491
&gt;&gt; Yeah, so by default,
next JS will do a static build for

111
00:06:14.491 --> 00:06:20.014
all your pages unless you put
a Git server side props on it.

112
00:06:20.014 --> 00:06:22.571
So that playlist page had
to Git server side props so

113
00:06:22.571 --> 00:06:26.267
it did not do a static build of that
because it just wouldn't have worked.

114
00:06:26.267 --> 00:06:30.934
But it realized like you don't have a good
server side props on here this needs to be

115
00:06:30.934 --> 00:06:31.479
static.

116
00:06:31.479 --> 00:06:35.348
And then when that renders is now client
will use client side information to submit

117
00:06:35.348 --> 00:06:39.049
the form and everything but yeah, by
default everything will be static unless

118
00:06:39.049 --> 00:06:41.370
you opt out of it with
Git server side props.

119
00:06:41.370 --> 00:06:43.220
Next year's runs in three modes, right?

120
00:06:43.220 --> 00:06:46.370
It runs in client side mode,
it runs in server side mode.

121
00:06:46.370 --> 00:06:50.661
And then foremost or
runs in a fully static mode and

122
00:06:50.661 --> 00:06:55.156
then it runs in a hybrid
mode of either fully static,

123
00:06:55.156 --> 00:06:59.370
plus client or server side plus client.

124
00:06:59.370 --> 00:07:03.754
So and it'll do that depending on
the functions you write in your pages.

125
00:07:03.754 --> 00:07:05.233
That's it.

126
00:07:05.233 --> 00:07:06.398
Yeah, it's very cool.

127
00:07:06.398 --> 00:07:09.271
Highly recommend, if you go look up.

128
00:07:09.271 --> 00:07:15.339
They have a very specific thing in
their docs that talk about that.

129
00:07:15.339 --> 00:07:17.140
I wanna say it's here on pages.

130
00:07:17.140 --> 00:07:18.809
Let's see pages.

131
00:07:18.809 --> 00:07:21.034
Pre rendering, here we go.

132
00:07:21.034 --> 00:07:25.018
So they talked about that they pre made
are two different ways static generation

133
00:07:25.018 --> 00:07:27.010
or server side rendering, yeah.

134
00:07:27.010 --> 00:07:30.429
So server side rendering is with each
request with a server side prop static

135
00:07:30.429 --> 00:07:32.890
generation is what we
did at the build time.

136
00:07:32.890 --> 00:07:36.360
It'll just generate a page and
it'll cache it on a CDN.

137
00:07:36.360 --> 00:07:40.652
But then you also own both of those can
opt into client side rendering as well, so

138
00:07:40.652 --> 00:07:41.885
it gets pretty crazy.

139
00:07:41.885 --> 00:07:47.257
They have a lot of examples here
mostly what CMS is a use case.

140
00:07:47.257 --> 00:07:51.546
But yeah, you can of course
you're in front of masters

141
00:07:51.546 --> 00:07:55.285
because there's a lot
of nuances about these.

142
00:07:55.285 --> 00:07:59.685
And how they'll more about next
day is just take those courses and

143
00:07:59.685 --> 00:08:04.770
yeah if you need help obviously just
tweet me let me know 10 questions.

144
00:08:04.770 --> 00:08:08.240
&gt;&gt; Did you use react testing library for
integration testing?

145
00:08:08.240 --> 00:08:12.927
&gt;&gt; I personally never used React testing
library I know Kent C DODDS made that live

146
00:08:12.927 --> 00:08:17.400
and it's pretty legit But I'm like
it's funny saying that but I'm like so

147
00:08:17.400 --> 00:08:18.418
old school now.

148
00:08:18.418 --> 00:08:23.602
[LAUGH] I just got used to like my own
testing situation so I've never used React

149
00:08:23.602 --> 00:08:28.990
testing library but I heard people talk
good things about it so it looks legit.

150
00:08:28.990 --> 00:08:32.262
I think if I were to pick something
up new today I will use it.

151
00:08:32.262 --> 00:08:36.708
But I literally have like my own testing
suite that I built myself that I like

152
00:08:36.708 --> 00:08:39.110
never published and I just use that.

153
00:08:39.110 --> 00:08:40.750
But yeah, looks cool.

154
00:08:40.750 --> 00:08:42.976
&gt;&gt; Can we use user details or

155
00:08:42.976 --> 00:08:47.960
can we make user details
server side rendered with SWR?

156
00:08:49.050 --> 00:08:50.814
It is client only now.

157
00:08:50.814 --> 00:08:53.940
&gt;&gt; How can we make user details with STVR?

158
00:08:53.940 --> 00:08:54.670
His client only,

159
00:08:54.670 --> 00:08:58.640
I think they're talking about the use me
hook that we're calling on the homepage.

160
00:08:58.640 --> 00:09:01.250
So STVR only works client side.

161
00:09:01.250 --> 00:09:04.420
So you can't use STVR on
the server side props.

162
00:09:04.420 --> 00:09:09.325
But you could make a database query with
get server side props in the homepage to

163
00:09:09.325 --> 00:09:11.830
get the user data and pass that in.

164
00:09:11.830 --> 00:09:13.320
Yes, you could totally do that.

165
00:09:13.320 --> 00:09:15.150
You don't have to do that client side.

166
00:09:15.150 --> 00:09:17.005
I think when we wrote that
code I mentioned I was like,

167
00:09:17.005 --> 00:09:18.170
there's no wrong way to do this.

168
00:09:18.170 --> 00:09:20.270
You can do it either way that you want.

169
00:09:20.270 --> 00:09:23.410
I decided to do a client side
just to show how STVR works.

170
00:09:23.410 --> 00:09:24.860
Now custom hooks work.

171
00:09:24.860 --> 00:09:29.990
But yeah, you could totally get the user
information server side and do it there.

172
00:09:29.990 --> 00:09:35.778
I think the benefit of doing it client
side there, if you look at the design,

173
00:09:35.778 --> 00:09:41.838
I think intentionally, or initially
there was this hovers getting my nerves,

174
00:09:41.838 --> 00:09:46.140
but there's a dropdown
up here with the user.

175
00:09:46.140 --> 00:09:49.352
Okay, so that's why I did a client side
because eventually you'd be able to

176
00:09:49.352 --> 00:09:52.280
edit the user and there'll be a lot
of client side things happening.

177
00:09:52.280 --> 00:09:56.480
So it's this is get the user client
side that way, cuz that's gonna change.

178
00:09:56.480 --> 00:10:00.310
But we didn't do that so yeah you could
totally render that server side just like

179
00:10:00.310 --> 00:10:02.550
we rented the artists
server side it's fine.

