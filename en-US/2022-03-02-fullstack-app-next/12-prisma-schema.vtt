WEBVTT

1
00:00:00.100 --> 00:00:05.130
So Prisma syntax looks like this,
it's actually really cool.

2
00:00:05.130 --> 00:00:09.710
So they have this schema syntax that
where you can define your schemas and

3
00:00:09.710 --> 00:00:14.607
something that looks like this and
I think it's actually pretty intuitive.

4
00:00:14.607 --> 00:00:16.945
It's not really difficult at all and

5
00:00:16.945 --> 00:00:20.724
it abstracts away the type of
database that you're using.

6
00:00:20.724 --> 00:00:23.391
So it doesn't matter if using Mongo or
Postgres or SQL,

7
00:00:23.391 --> 00:00:24.936
this is all gonna look the same.

8
00:00:24.936 --> 00:00:29.390
It's pretty cool, I think they were
heavily influenced by Graph QLs,

9
00:00:29.390 --> 00:00:33.920
language because I know Prisma did
Graph QL stuff Prisma version 1 out of

10
00:00:33.920 --> 00:00:36.530
version 2 which is just an Oreo.

11
00:00:36.530 --> 00:00:40.090
So it's heavily influenced by that
which was heavily influenced by JSON.

12
00:00:40.090 --> 00:00:43.510
So to me this kind of just looks
like JSON with decorators.

13
00:00:43.510 --> 00:00:48.020
Now we need to define some models for
our app.

14
00:00:48.020 --> 00:00:51.250
So we can get some real data in here,
and we'll go from there.

15
00:00:51.250 --> 00:00:52.070
Let's make some models.

16
00:00:52.070 --> 00:00:56.098
So inside of our Prisma schema, we're
gonna do is we can type in the word model,

17
00:00:56.098 --> 00:00:57.790
like this, followed by a name.

18
00:00:57.790 --> 00:01:02.070
So the first thing I'll do is I'll
make a User model, like this.

19
00:01:02.070 --> 00:01:04.146
And then I want to say id.

20
00:01:04.146 --> 00:01:08.765
And then for id is, there's gonna be this,
typically it's a number and

21
00:01:08.765 --> 00:01:12.038
then you can do this default
auto increment thing.

22
00:01:12.038 --> 00:01:16.269
So basically what this is saying is,
I want an id field,

23
00:01:16.269 --> 00:01:20.290
its type is integer, so it'll be a number.

24
00:01:20.290 --> 00:01:24.280
I'm literally saying this is
the id field of this model.

25
00:01:24.280 --> 00:01:25.550
So it's going to make it unique.

26
00:01:25.550 --> 00:01:30.765
I'm pretty sure what this does is set,
gives it an index like a foreign key and

27
00:01:30.765 --> 00:01:33.910
then default, I want to (autoincrement).

28
00:01:33.910 --> 00:01:37.150
So every time a new user
is saved go up by 1.

29
00:01:37.150 --> 00:01:39.690
So in Postgres, you have to
increment your ids yourself, right?

30
00:01:39.690 --> 00:01:42.550
But something like Mongo,
it just generates random ids for you.

31
00:01:42.550 --> 00:01:44.712
So that's what this does.

32
00:01:44.712 --> 00:01:48.013
The next thing is, I want a created at so

33
00:01:48.013 --> 00:01:53.416
we can do that createdAt so that,
createdAt will be a DateTime,

34
00:01:53.416 --> 00:01:58.333
and then we can give it a default of,
think it's like now.

35
00:01:58.333 --> 00:02:00.564
Yeah, there we go, so
we can say default(now) and

36
00:02:00.564 --> 00:02:02.845
then when I hit save you can
see that it formatted it for

37
00:02:02.845 --> 00:02:06.150
me like cleaned up the indents and
line everything up really nice.

38
00:02:06.150 --> 00:02:10.825
This is what I was talking about
that plugin that I highly recommend

39
00:02:10.825 --> 00:02:15.930
downloading, also one and updatedAt,
was also be a DayTime like that.

40
00:02:16.980 --> 00:02:20.129
No default on that.

41
00:02:20.129 --> 00:02:23.997
And I think there is like a, Yeah,

42
00:02:23.997 --> 00:02:29.470
there's an @updatedAt, so it does that for
this because @updatedAt like that.

43
00:02:29.470 --> 00:02:31.234
So that'll auto set that fill for

44
00:02:31.234 --> 00:02:34.956
you every time you update an instance
of a user, which is really cool.

45
00:02:37.491 --> 00:02:39.300
And then now we can get
to the actual user stuff.

46
00:02:39.300 --> 00:02:43.330
So in this example, we'll just have
an email, and that'll be a type String.

47
00:02:44.640 --> 00:02:48.180
And then we'll say this
needs to be unique.

48
00:02:48.180 --> 00:02:51.240
So that means not two users
is gonna have the same email.

49
00:02:51.240 --> 00:02:52.410
This will put an index on it.

50
00:02:52.410 --> 00:02:55.053
This allows to query it.

51
00:02:55.053 --> 00:02:56.624
Super easy to do.

52
00:02:56.624 --> 00:02:59.283
And the next thing is
we'll have a password.

53
00:02:59.283 --> 00:03:01.272
Which is also a String like that.

54
00:03:04.163 --> 00:03:07.510
And we'll pretty much, that's pretty
much all we'll have for the user for

55
00:03:07.510 --> 00:03:10.868
now until we start adding relationships
to the different data that we have.

56
00:03:10.868 --> 00:03:14.284
I really like Prisma, not even for
the schema stuff, but when we get into

57
00:03:14.284 --> 00:03:17.982
the querying and the writing like they
have nested rights and like filtering.

58
00:03:17.982 --> 00:03:23.116
And it just makes it so easy to do
really complicated stuff in my opinion,

59
00:03:23.116 --> 00:03:25.557
especially the types of GraphQL,

60
00:03:25.557 --> 00:03:29.108
is actually really quite powerful,
so I like it.

