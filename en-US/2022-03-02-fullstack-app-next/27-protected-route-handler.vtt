WEBVTT

1
00:00:00.400 --> 00:00:06.270
All right, so the next thing we'll do then
is, we need to start protecting things.

2
00:00:06.270 --> 00:00:10.958
So one, we need to create some
mechanism to protect some of the API

3
00:00:10.958 --> 00:00:13.270
routes that we're gonna make.

4
00:00:13.270 --> 00:00:15.461
We're gonna make API
route to give the user,

5
00:00:15.461 --> 00:00:17.430
an API route to interact with playlist.

6
00:00:17.430 --> 00:00:20.895
We have to find a way to protect that
to make sure that you are who you

7
00:00:20.895 --> 00:00:21.590
say you are.

8
00:00:21.590 --> 00:00:23.676
You're identified, you're authorized.

9
00:00:23.676 --> 00:00:25.681
So we need to make some stuff for that.

10
00:00:25.681 --> 00:00:27.850
And then we also need
to protect the pages.

11
00:00:27.850 --> 00:00:30.062
So the pages as in the index page,

12
00:00:30.062 --> 00:00:33.380
eventually the playlist plays,
a library page.

13
00:00:33.380 --> 00:00:36.960
We wanna make sure that you cannot go
there unless you're signed in as well.

14
00:00:36.960 --> 00:00:41.370
So those are some of the things
that we need to protect basically.

15
00:00:41.370 --> 00:00:46.087
So we'll do that, the first place we'll do
this is probably gonna be on the API site,

16
00:00:46.087 --> 00:00:48.790
because we need to make
API route to get the user.

17
00:00:48.790 --> 00:00:52.430
So we can actually go to the homepage and
see the user and build out the homepage.

18
00:00:52.430 --> 00:00:54.032
But we got to protect that route.

19
00:00:54.032 --> 00:00:55.237
And then we got to protect the page.

20
00:00:55.237 --> 00:01:00.441
So what we'll do is we'll go back to our

21
00:01:00.441 --> 00:01:05.187
files and we will go to pages, api.

22
00:01:05.187 --> 00:01:09.679
Or actually what we'll do is we'll go to,
we'll go to library because we can put all

23
00:01:09.679 --> 00:01:12.488
this stuff in the library,
and it'll be reusable.

24
00:01:12.488 --> 00:01:15.061
So inside a lib,
I'm gonna make a new file.

25
00:01:15.061 --> 00:01:19.300
I'm going to call it off, that's yes.

26
00:01:19.300 --> 00:01:23.744
And here is just going to be like all of
our helpers that we use to help us with

27
00:01:23.744 --> 00:01:27.273
authorization, authentication,
all that good stuff.

28
00:01:27.273 --> 00:01:32.247
So I'm gonna import jwt
from jsonwebtokens or

29
00:01:32.247 --> 00:01:36.972
imports Prisma from our personal library.

30
00:01:44.070 --> 00:01:48.314
So the first function I'm gonna make
is kinda gonna be like a higher order

31
00:01:48.314 --> 00:01:53.220
function that we're gonna use this
middleware to protect our API routes.

32
00:01:53.220 --> 00:01:57.981
So whatever API route that we want to be
protected we'll wrap it in this higher

33
00:01:57.981 --> 00:01:59.154
order function and

34
00:01:59.154 --> 00:02:03.200
we can use this function like
a gatekeeper to access an API route.

35
00:02:04.230 --> 00:02:05.290
So that's what we'll do.

36
00:02:05.290 --> 00:02:10.860
So I'll export a new function here,
and I'll call it validateRoute.

37
00:02:10.860 --> 00:02:14.070
And it's going to be a function
that takes in a handler.

38
00:02:14.070 --> 00:02:18.314
Remember handler is something that
looks like, if you go to pages, api,

39
00:02:18.314 --> 00:02:21.280
any one of these functions
here's a handler.

40
00:02:21.280 --> 00:02:22.910
It's a function that takes a request and
a response.

41
00:02:24.170 --> 00:02:26.360
So we're going to wrap this function.

42
00:02:26.360 --> 00:02:28.500
So that means you got to pass
that function as an argument.

43
00:02:29.510 --> 00:02:33.470
And then what we're going to do is we're
going to return our own version of that.

44
00:02:33.470 --> 00:02:36.870
So we'll return our own handler
that has a request and a response.

45
00:02:39.460 --> 00:02:42.330
And but not before we check the token.

46
00:02:42.330 --> 00:02:46.440
So this function is basically going to
check to make sure that you have a token

47
00:02:46.440 --> 00:02:47.720
in your cookie.

48
00:02:47.720 --> 00:02:48.990
It is a valid token.

49
00:02:48.990 --> 00:02:53.908
It's a valid user and if all that is true,
then we'll call the handler.

50
00:02:53.908 --> 00:02:57.796
If none of that, one of those
things aren't true, then we'll 401,

51
00:02:57.796 --> 00:02:59.151
like you're not valid.

52
00:02:59.151 --> 00:03:01.350
And that's how we're protect our routes.

53
00:03:01.350 --> 00:03:07.510
So there's many ways to do authentication
verification on API routes.

54
00:03:07.510 --> 00:03:09.754
And next js, this is the way that I do it,

55
00:03:09.754 --> 00:03:13.519
I feel like you're in more control
when you can choose what route you

56
00:03:13.519 --> 00:03:18.480
want to wrap with this versus just doing
it everywhere and trying to opt out.

57
00:03:18.480 --> 00:03:20.603
So we'll do it this way.

58
00:03:20.603 --> 00:03:25.582
First thing is get access to
that token via the cookie, so

59
00:03:25.582 --> 00:03:28.292
we can just say req.cookies.

60
00:03:28.292 --> 00:03:33.628
And if you want to get some
autocomplete here, the types for

61
00:03:33.628 --> 00:03:38.751
this is going to be I think
it's like NextApiRequests and

62
00:03:38.751 --> 00:03:44.958
then NextApiResponse if you want
those types, so we get the cookie.

63
00:03:44.958 --> 00:03:46.685
And the name of our cookie is,

64
00:03:46.685 --> 00:03:50.830
that we have it here somewhere
,there we go TRAX_ACCESS_TOKEN.

65
00:03:50.830 --> 00:03:53.787
So probably want to put this in
a constant, or an environment variable or

66
00:03:53.787 --> 00:03:54.930
something like that.

67
00:03:54.930 --> 00:03:58.300
So we'll get the cookie
called TRAX_ACCESS_TOKEN.

68
00:03:58.300 --> 00:04:00.250
Or if you call this something else,
whatever you call it your cookie.

69
00:04:01.710 --> 00:04:04.934
So long names, I'm just gonna rename
it to token because I don't feel

70
00:04:04.934 --> 00:04:07.559
like typing that out many
times that's just super long,

71
00:04:07.559 --> 00:04:10.860
so I'm gonna rename it there so
I restructured it and then I renamed it.

72
00:04:12.490 --> 00:04:16.558
That's what this statement is saying,
so destructuring it so

73
00:04:16.558 --> 00:04:22.176
that's literally like saying const
token=req.cookies.TRAX_ACCESS_TOKEN.

74
00:04:24.082 --> 00:04:27.000
And I would even say this is a better
way because they're both on one line.

75
00:04:27.000 --> 00:04:31.451
So I, [LAUGH] think the extraction really
only matters when you have to do like more

76
00:04:31.451 --> 00:04:34.530
than one thing,
then it's like, that's cool.

77
00:04:34.530 --> 00:04:38.982
But if it's just one thing I mean,
I could honestly just say token.

78
00:04:42.487 --> 00:04:47.559
Equals this is the same thing,
so it's just only helpful

79
00:04:47.559 --> 00:04:52.643
to do it on the next line or
multiple lines of properties.

80
00:04:52.643 --> 00:04:56.669
So we got that and then now we're
gonna say if you have a token,

81
00:04:56.669 --> 00:04:59.076
cool, first check you have a token.

82
00:04:59.076 --> 00:05:03.173
Now let's try to get a user from that
token so we're gonna do some scoping

83
00:05:03.173 --> 00:05:07.203
here because we have to do a try catch
because the last thing we want is for

84
00:05:07.203 --> 00:05:10.252
our whole API to crash because
you sent up a bad token.

85
00:05:10.252 --> 00:05:17.168
We don't want that so we got to wrap this
in a try catch and if you know what?

86
00:05:17.168 --> 00:05:22.059
We're gonna do is try to verify this token
so we'll say, let's try to get the id

87
00:05:22.059 --> 00:05:26.899
back because remember a token when we
signed it with an email, an id and a time.

88
00:05:26.899 --> 00:05:30.601
I'm just interested in id so
I want to get the ID back.

89
00:05:30.601 --> 00:05:38.209
So I'm going to say given
the id if jwt.verify[token] and

90
00:05:38.209 --> 00:05:41.948
we got to pass in the same key.

91
00:05:41.948 --> 00:05:44.648
The same secret that we use
when we signed it was for me,

92
00:05:44.648 --> 00:05:48.012
I think it was just hello,
you can verify by going back and looking.

93
00:05:50.000 --> 00:05:55.893
Here, you see that was my secret,
was hello or whatever you passed it.

94
00:05:55.893 --> 00:05:57.230
So we're gonna get that.

95
00:05:57.230 --> 00:05:58.978
We're gonna get the id here, and

96
00:05:58.978 --> 00:06:02.900
then I'm gonna attempt to find it
using your database with that id.

97
00:06:02.900 --> 00:06:04.761
And this will tell me if you are real or
not.

98
00:06:04.761 --> 00:06:13.898
So, prisma.user.findunique
where {id} is id.

99
00:06:16.954 --> 00:06:20.190
So that'll give me your user or it won't.

100
00:06:20.190 --> 00:06:24.699
If it does not, if not a user then
I'm just gonna throw an error so

101
00:06:24.699 --> 00:06:26.293
I can land on my catch.

102
00:06:26.293 --> 00:06:28.664
So I was gonna throw_new_Error,

103
00:06:28.664 --> 00:06:33.489
doesn't really matter what you put in
here but this is gonna get caught.

104
00:06:38.897 --> 00:06:42.206
And then if there is an error for

105
00:06:42.206 --> 00:06:46.789
whatever reason then I'm just going to say

106
00:06:46.789 --> 00:06:52.139
res.status[401], you are not allowed and

107
00:06:52.139 --> 00:06:57.380
then res.Json(error) 'Not Authorized'.

108
00:06:57.380 --> 00:07:01.378
Or whatever message you want to put,
I need to put a return because we're going

109
00:07:01.378 --> 00:07:05.374
to continue on and linters getting rid of
it when I hit save because I have no code

110
00:07:05.374 --> 00:07:11.003
after this try catch And

111
00:07:11.003 --> 00:07:16.458
then outside this if statement,
Then we wanna return handler,

112
00:07:18.429 --> 00:07:21.681
With the request, the response, and
then we'll just pass on to user.

113
00:07:25.704 --> 00:07:29.409
Oops, I'm sorry, not outside this
statement, like writing a statement,

114
00:07:29.409 --> 00:07:31.185
there we go, outside the try catch.

115
00:07:31.185 --> 00:07:35.750
And then outside the if statement,
if you don't have a token to begin with.

116
00:07:37.050 --> 00:07:38.460
That's when we'll just say, okay.

117
00:07:40.930 --> 00:07:42.540
We're just gonna do this, right?

118
00:07:42.540 --> 00:07:45.600
We're just gonna for one, Not Authorized.

119
00:07:45.600 --> 00:07:46.690
If you don't even have a token.

120
00:07:46.690 --> 00:07:48.444
Okay, we're not getting
into any of this stuff.

121
00:07:54.076 --> 00:07:58.408
So again, just to walk through this, this
is a higher order function that's going to

122
00:07:58.408 --> 00:08:01.690
wrap our handlers,
is basically making its own handler.

123
00:08:01.690 --> 00:08:04.730
It's checking the token from
the cookie that's always sent up.

124
00:08:04.730 --> 00:08:09.896
Or we're assuming it's sent up where
mandating that you send it up and we're

125
00:08:09.896 --> 00:08:15.552
going to decode that jwt, turn it back to
an object, grab the id property from that.

126
00:08:15.552 --> 00:08:18.560
Go to the database,
find a user with that id,

127
00:08:18.560 --> 00:08:22.920
if all that works out then we'll
call the original handler.

128
00:08:22.920 --> 00:08:27.568
If any one of those things fell at
any point as if there is no token,

129
00:08:27.568 --> 00:08:32.302
there is no valid user, even if our
database broke while we tried to

130
00:08:32.302 --> 00:08:37.203
get the user and it wasn't your fault,
we're still about a 401,

131
00:08:37.203 --> 00:08:45.243
Not Authorized And

132
00:08:45.243 --> 00:08:49.905
then the cool thing we're doing is,
once we get that user we're passing it

133
00:08:49.905 --> 00:08:54.800
along to the next handler so inside of
our routes that use this validate route.

134
00:08:54.800 --> 00:08:57.240
They'll have a third
argument after the response.

135
00:08:57.240 --> 00:08:58.360
And I'll be the user.

136
00:08:58.360 --> 00:08:59.336
So that'd be really cool.

137
00:09:04.020 --> 00:09:07.567
So now what we'll do is we'll go to pages,
api.

138
00:09:07.567 --> 00:09:10.537
We'll make a new Api route for me.

139
00:09:10.537 --> 00:09:15.433
Call me.ts and this is just to
get the user, it'll just get me.

140
00:09:15.433 --> 00:09:19.499
So then I'll import the validateRoute
middleware we just made and

141
00:09:19.499 --> 00:09:24.001
it's gonna be a super short function
because the validateRoute function

142
00:09:24.001 --> 00:09:25.465
already gets the user.

143
00:09:25.465 --> 00:09:29.133
All we have to do is just send it
back here, after rewrap it of course.

144
00:09:29.133 --> 00:09:32.275
So we'll say export default,
validateRoute.

145
00:09:32.275 --> 00:09:34.128
We'll pass it our handler.

146
00:09:34.128 --> 00:09:40.599
And we'll just say req, res, user.

147
00:09:40.599 --> 00:09:45.025
And just res.json (user), that's it.

148
00:09:45.025 --> 00:09:47.609
So again,
this validateRoute wraps our handler.

149
00:09:48.830 --> 00:09:52.050
And it won't call this handler
unless you're authenticated.

150
00:09:52.050 --> 00:09:53.900
And then it gives you the user if it does.

151
00:09:53.900 --> 00:09:56.370
&gt;&gt; Why have the user for
the handler argument?

152
00:09:57.780 --> 00:10:01.360
&gt;&gt; Why have the user for
the handler argument?

153
00:10:01.360 --> 00:10:04.270
Great question, so
it's just a design choice.

154
00:10:04.270 --> 00:10:09.582
If we go back to the auth.ts,
the whole point of validating a token,

155
00:10:09.582 --> 00:10:14.618
at least the way that I think about it is,
going that extra step and

156
00:10:14.618 --> 00:10:19.930
making sure that the ID that you
got is actually still a valid user.

157
00:10:19.930 --> 00:10:23.130
You can end up in a scenario where like,
yes, this is a valid jwt.

158
00:10:23.130 --> 00:10:25.406
Yes, we did sign this jwt.

159
00:10:25.406 --> 00:10:29.736
Three days ago but within those three
days this user deleted their profile, so

160
00:10:29.736 --> 00:10:31.849
they no longer exist in our database.

161
00:10:31.849 --> 00:10:36.482
So by doing this extra check of, does
this id even exist in our database and

162
00:10:36.482 --> 00:10:40.741
getting the user we go extra layer of yes,
also this user is valid and

163
00:10:40.741 --> 00:10:42.706
since we already got the user.

164
00:10:42.706 --> 00:10:47.645
Chances are that if there's a route that
needs to be protected, it's probably going

165
00:10:47.645 --> 00:10:52.103
to use that user data for something,
it's probably gonna use that user ID for

166
00:10:52.103 --> 00:10:56.260
something like in the case of getting
the user object, we needed it.

167
00:10:56.260 --> 00:11:00.060
In a case of getting a playlist, we'll
need to only get playlists by the user ID.

168
00:11:00.060 --> 00:11:05.018
In the case of liking a song, we need to
get the user ID to make sure that we're

169
00:11:05.018 --> 00:11:07.880
saving it to that user's favorite.

170
00:11:07.880 --> 00:11:10.167
So chances are if you're
protecting a route,

171
00:11:10.167 --> 00:11:13.250
you probably need some
information about that user.

172
00:11:13.250 --> 00:11:15.590
So why not just pass the user alone.

173
00:11:15.590 --> 00:11:18.224
Therefore, I don't have
to make another query for

174
00:11:18.224 --> 00:11:20.800
the user in the database
when I get to my route.

175
00:11:20.800 --> 00:11:24.484
So if I didn't pass this users
a third argument, when I went into me,

176
00:11:24.484 --> 00:11:28.362
I would have to use Prisma here and
query the database to get the user when I

177
00:11:28.362 --> 00:11:31.630
literally already just did
that inside the validateRoute.

178
00:11:31.630 --> 00:11:33.177
So why do it again, and

179
00:11:33.177 --> 00:11:38.810
this function never runs unless I'm
guaranteed to know that you're validated.

180
00:11:38.810 --> 00:11:40.790
So it's not like I don't
think you're validated.

181
00:11:40.790 --> 00:11:43.470
I need to check your for sure validate it.

182
00:11:43.470 --> 00:11:46.380
And you already asked for
the user, why ask for it again.

183
00:11:46.380 --> 00:11:49.673
So that's why I pass it along
to save some database queries.

184
00:11:49.673 --> 00:11:52.290
Okay, now to protect the pages.

185
00:11:52.290 --> 00:11:54.789
It's got to be a little different.

186
00:11:55.870 --> 00:12:00.200
So many ways you can do this next
is it's like, almost overwhelming.

187
00:12:00.200 --> 00:12:01.600
There's no wrong way.

188
00:12:01.600 --> 00:12:03.660
There's no right way to do this.

189
00:12:03.660 --> 00:12:07.386
But they did just come up
with a really cool feature,

190
00:12:07.386 --> 00:12:10.620
taking advantage of their edge functions.

191
00:12:10.620 --> 00:12:13.621
So if you don't know what
an edge function is I'm gonna

192
00:12:13.621 --> 00:12:15.840
describe it the best way that I can.

193
00:12:15.840 --> 00:12:18.040
An edge function is basically.

194
00:12:20.190 --> 00:12:22.820
So it's you can think of it
as one is a service function.

195
00:12:22.820 --> 00:12:24.640
So we talked about service functions.

196
00:12:24.640 --> 00:12:27.120
All of our API routes
are service functions.

197
00:12:27.120 --> 00:12:29.070
Instead of a server that's
constantly running.

198
00:12:29.070 --> 00:12:29.597
Waiting for

199
00:12:29.597 --> 00:12:33.000
requests to come into service function
is like a call back in that's cloud.

200
00:12:33.000 --> 00:12:36.520
It only gets executed on an event,
which in this case is a route and

201
00:12:36.520 --> 00:12:37.680
a file combination.

202
00:12:39.290 --> 00:12:43.800
Edge function is,
you can think of it as a service

203
00:12:43.800 --> 00:12:48.540
function that sits in
between your origin server.

204
00:12:48.540 --> 00:12:52.065
So in this case, it'll sit in between
the service functions that we have our API

205
00:12:52.065 --> 00:12:53.860
route, and then our client.

206
00:12:53.860 --> 00:12:56.240
It'll sit right on the edge of a CDN.

207
00:12:56.240 --> 00:12:59.060
&gt;&gt; Is there a reason for
not using next.auth for this project.

208
00:12:59.060 --> 00:13:01.630
&gt;&gt; Yeah, the question was, is there
a reason why we're not using next.auth?

209
00:13:01.630 --> 00:13:02.650
Yeah, two reasons.

210
00:13:02.650 --> 00:13:07.228
One, I think next.auth is an overkill for
email password.

211
00:13:07.228 --> 00:13:11.237
I would 100% use next.auth if
I was doing any social auth,

212
00:13:11.237 --> 00:13:14.790
any of that type of jazz,
I would totally use it.

213
00:13:14.790 --> 00:13:18.010
I think I even use it in one of the other
next year's courses that are taught.

214
00:13:18.010 --> 00:13:19.360
So I really love next.auth.

215
00:13:19.360 --> 00:13:23.267
It really got lib I think it's an overkill
for this project and adds a little

216
00:13:23.267 --> 00:13:28.030
complexity to understand just to get
an email password, so that's one reason.

217
00:13:28.030 --> 00:13:33.210
And then two, those others,
yeah, we're not doing social.

218
00:13:33.210 --> 00:13:35.720
So [LAUGH], yeah,
we're just doing email password.

219
00:13:35.720 --> 00:13:38.480
But yeah, next up is really cool.

220
00:13:38.480 --> 00:13:42.002
It abstracts a lot of the stuff
away when it comes to how

221
00:13:42.002 --> 00:13:44.360
often different things like that.

222
00:13:46.410 --> 00:13:47.720
But, yeah, back to edge functions.

223
00:13:47.720 --> 00:13:52.277
So edge functions are, like I said service
functions that sit on the edge of a CDN,

224
00:13:52.277 --> 00:13:54.380
and they act as like middleware.

225
00:13:54.380 --> 00:13:58.280
And this is relatively new technology that
a lot of companies have been creating.

226
00:13:58.280 --> 00:14:02.600
So CloudFlare workers,
lambda edge functions.

227
00:14:04.410 --> 00:14:08.400
There's so many different other
ones Fly IO is another one.

228
00:14:08.400 --> 00:14:10.913
And it's a different environment as well.

229
00:14:10.913 --> 00:14:14.927
So it's not quite, Node js.

230
00:14:14.927 --> 00:14:18.227
So you can't really do like all this.

231
00:14:18.227 --> 00:14:22.400
You can't import Node modules and
do all this other stuff like that.

232
00:14:22.400 --> 00:14:24.279
So it's a little different.

233
00:14:24.279 --> 00:14:28.847
About how it works because it has to be
fast so it can't spin up a whole runtime.

234
00:14:28.847 --> 00:14:32.921
But the really cool thing about it is
that you can do computation on a CDN now

235
00:14:32.921 --> 00:14:36.866
without having to go to your origin
server which just makes your thing so

236
00:14:36.866 --> 00:14:39.647
much faster and
you can do things like AV testing.

237
00:14:39.647 --> 00:14:42.363
Preview mode for content, transfer images,

238
00:14:42.363 --> 00:14:46.541
you can do all different types of
ridiculous things where else before,

239
00:14:46.541 --> 00:14:50.595
five years ago, ten years ago you
can have computation on our heads.

240
00:14:50.595 --> 00:14:52.883
The best thing you can do is
set a header and say that,

241
00:14:52.883 --> 00:14:56.159
this is how long I want this to catch and
then, boom, now you gonna origin.

242
00:14:56.159 --> 00:15:00.703
So, its actually really powerful,
you can build a full app on the edge now,

243
00:15:00.703 --> 00:15:03.049
you don't even need a server anymore.

244
00:15:03.049 --> 00:15:07.239
You just put everything on an edge
function and have a completely functional

245
00:15:07.239 --> 00:15:11.493
app like I've literally built Graph QL
servers on an edge before never talked

246
00:15:11.493 --> 00:15:14.848
to a real server because even
databases work on the edge now.

247
00:15:14.848 --> 00:15:16.060
So depending on what platform you're on

