WEBVTT

1
00:00:00.683 --> 00:00:05.378
All right, so now that we got signin
working, we need to actually make

2
00:00:05.378 --> 00:00:09.849
the pages on the front end the forms
to actually signin and signup.

3
00:00:09.849 --> 00:00:14.169
And then we need to restrict access
to the actual music player for

4
00:00:14.169 --> 00:00:16.098
people who have an account.

5
00:00:16.098 --> 00:00:21.696
And then all the things that go with
that detecting if the cookie is still or

6
00:00:21.696 --> 00:00:23.426
the WJT is still good.

7
00:00:23.426 --> 00:00:27.972
Blocking access to the pages,
blocking access to the API routes.

8
00:00:27.972 --> 00:00:31.638
There's a lot of different moving
pieces when it comes to access and

9
00:00:31.638 --> 00:00:32.612
an application.

10
00:00:32.612 --> 00:00:36.373
And you gotta make sure you try your best
to defend all those different points

11
00:00:36.373 --> 00:00:36.974
of access.

12
00:00:36.974 --> 00:00:39.745
So that's what we're gonna
try to do in the XJS way.

13
00:00:39.745 --> 00:00:43.389
And there's honestly so
many different ways to do this in XJS and

14
00:00:43.389 --> 00:00:45.287
I remember just contemplating.

15
00:00:45.287 --> 00:00:46.619
How would I actually do this?

16
00:00:46.619 --> 00:00:50.192
And then they released
a new version of Next.js,

17
00:00:50.192 --> 00:00:55.052
even newer way to do it, I was,
okay, this is actually kinda cool.

18
00:00:55.052 --> 00:00:57.720
So we'll be talking about a lot
of different ways to do and

19
00:00:57.720 --> 00:01:01.065
I'll talk about why we're approaching
it this way for this scenario.

20
00:01:01.065 --> 00:01:03.239
And another way for different scenarios.

21
00:01:03.239 --> 00:01:08.799
So ask a lot of questions if you're
trying to figure out what's going on.

22
00:01:08.799 --> 00:01:11.247
Okay, so what we'll do next, like I said,

23
00:01:11.247 --> 00:01:14.238
is we'll make these pages for
the signin and signup.

24
00:01:14.238 --> 00:01:15.720
And they're mostly the same pages.

25
00:01:15.720 --> 00:01:18.482
And if you think about it, if you
have a signin form and a signup form,

26
00:01:18.482 --> 00:01:19.735
they're both the same thing.

27
00:01:19.735 --> 00:01:24.694
There's email field,
the password field and a submit button.

28
00:01:24.694 --> 00:01:28.062
And the only thing different about
them is what route they submit to and

29
00:01:28.062 --> 00:01:29.672
the label on the button, right?

30
00:01:29.672 --> 00:01:32.122
It'll either say signin or
it'll say signup that's it,

31
00:01:32.122 --> 00:01:33.329
maybe some text on the page.

32
00:01:33.329 --> 00:01:34.647
So because of that,

33
00:01:34.647 --> 00:01:39.768
we're just gonna create one component
that is basically all of that, right?

34
00:01:39.768 --> 00:01:43.619
And then we have to figure out, where or

35
00:01:43.619 --> 00:01:48.769
how we're going to actually
interact with the API.

36
00:01:48.769 --> 00:01:50.787
So far we've made these API routes but

37
00:01:50.787 --> 00:01:54.897
we haven't done anything on the client
side to actually interact with them.

38
00:01:54.897 --> 00:01:58.917
So we should be using HTTPy or whatever,
client you have to interact with API.

39
00:01:58.917 --> 00:02:02.382
So we actually have to
start thinking about, well,

40
00:02:02.382 --> 00:02:05.469
how are we gonna make
calls on the client side?

41
00:02:05.469 --> 00:02:06.648
And what does that look like?

42
00:02:06.648 --> 00:02:10.317
So I think what we'll do first is,
we'll create some wrappers and

43
00:02:10.317 --> 00:02:12.426
a little lip to interact with the API.

44
00:02:12.426 --> 00:02:17.553
And then we'll create the pages that
will use that wrapper to make the calls.

45
00:02:17.553 --> 00:02:18.688
So that's what we'll do and

46
00:02:18.688 --> 00:02:21.586
this little live that we're gonna
make is actually gonna come in handy.

47
00:02:21.586 --> 00:02:27.230
Only get into doing some more client
side fetching as far as the playlist and

48
00:02:27.230 --> 00:02:28.675
things like that.

49
00:02:28.675 --> 00:02:33.108
All right, so what we'll do is
we'll head over to this lib folder.

50
00:02:33.108 --> 00:02:36.266
And then inside of this lib folder,

51
00:02:36.266 --> 00:02:41.333
I'm gonna create a file called fetcher,
fetcher.ts.

52
00:02:41.333 --> 00:02:45.011
And the purpose of the fetcher
is just abstracted

53
00:02:45.011 --> 00:02:47.709
away our HCTP fetching mechanism.

54
00:02:47.709 --> 00:02:52.459
Because we're gonna be using some
hook later on that needs this.

55
00:02:52.459 --> 00:02:57.295
And it needs to be abstracted
away otherwise we're gonna do

56
00:02:57.295 --> 00:02:59.042
a lot of manual work.

57
00:02:59.042 --> 00:03:02.682
So, we're just gonna go ahead and
create this right now, and

58
00:03:02.682 --> 00:03:06.060
we're just gonna export a function here.

59
00:03:06.060 --> 00:03:10.715
And I'm just gonna call it fetcher,
and basically all this function is

60
00:03:10.715 --> 00:03:15.070
gonna do is just do a fetch call for
us, but super abstracted away.

61
00:03:15.070 --> 00:03:19.443
So the first argument is gonna be a URL,
that's gonna be a string.

62
00:03:19.443 --> 00:03:22.400
The second argument is gonna be data and

63
00:03:22.400 --> 00:03:27.427
that could be undefined if you
don't pass it, you don't need it.

64
00:03:27.427 --> 00:03:31.050
And the reason I'm putting
undefined here is just to help me

65
00:03:31.050 --> 00:03:33.884
out later on if you JSON
stringify undefined.

66
00:03:33.884 --> 00:03:38.547
It just doesn't get set whereas if it was
null, it tries to do something else, so

67
00:03:38.547 --> 00:03:40.684
I'm setting it equal to undefined.

68
00:03:40.684 --> 00:03:45.057
So now we're just gonna return fetch if
you're not familiar with fetch this is,

69
00:03:45.057 --> 00:03:46.230
its window.fetch.

70
00:03:46.230 --> 00:03:48.739
It's the new mechanism
to interact with APIs.

71
00:03:48.739 --> 00:03:54.170
It's kinda like Ajax, it is a different
mechanism to interact with HTTP calls.

72
00:03:54.170 --> 00:03:55.518
It's built into the browser.

73
00:03:55.518 --> 00:04:00.046
I was actually looking at other day,
and I didn't even notice this but

74
00:04:00.046 --> 00:04:02.592
they now if you go into the network tab.

75
00:04:02.592 --> 00:04:07.115
They now include fetch here on XHR,
they didn't have that before.

76
00:04:07.115 --> 00:04:09.996
You had to figure out the fetch somewhere.

77
00:04:09.996 --> 00:04:13.623
You have to filter it out yourself
because it only included XHR,

78
00:04:13.623 --> 00:04:17.131
you had to click on all and
then type in a route to figure it out.

79
00:04:17.131 --> 00:04:20.277
It was really annoying, but now they're,
all right, okay, it's the same thing.

80
00:04:20.277 --> 00:04:24.803
So I don't know when they did that,
but that's super helpful.

81
00:04:24.803 --> 00:04:30.230
Okay, so now we're back in fetch, we need
to basically just make this super generic.

82
00:04:30.230 --> 00:04:33.537
So when you deploy your next JS app,

83
00:04:33.537 --> 00:04:39.399
your API it's mounted on the same
domain as your front end app.

84
00:04:39.399 --> 00:04:43.940
So we can get that by just
using the Window object,

85
00:04:43.940 --> 00:04:49.037
right, so
we can just say window.location.origin.

86
00:04:49.037 --> 00:04:53.764
So basically wherever the domain is that
you're on cuz when you deploy this to some

87
00:04:53.764 --> 00:04:54.461
platform.

88
00:04:54.461 --> 00:04:58.668
You don't buy a custom domain who knows
what the URL is gonna be you could go set

89
00:04:58.668 --> 00:05:01.350
that environment variable and
then set it here.

90
00:05:01.350 --> 00:05:05.468
And instead of local host on your local,
that totally works too, but

91
00:05:05.468 --> 00:05:09.520
we could just use window.location.origin
and get the URL/API.

92
00:05:09.520 --> 00:05:14.987
And then whatever URL that you pass us,
so that'd be the URL there.

93
00:05:14.987 --> 00:05:17.436
And then just a bunch of options here.

94
00:05:17.436 --> 00:05:18.909
So the first option is the method.

95
00:05:18.909 --> 00:05:20.415
So if you pass us some data,

96
00:05:20.415 --> 00:05:23.567
that means you're probably
trying to do a post request.

97
00:05:23.567 --> 00:05:27.997
Otherwise, you're just doing a get request
and we'll just do get and post for now.

98
00:05:27.997 --> 00:05:32.216
So that would be the method and then from
here, we're gonna do credentials include.

99
00:05:32.216 --> 00:05:36.322
This ensures that we send the cookies
up for the JSON Web Token and

100
00:05:36.322 --> 00:05:37.547
things like that.

101
00:05:37.547 --> 00:05:39.505
So we got that.

102
00:05:39.505 --> 00:05:46.525
And then last thing is just the headers
and fetch is not JSON first.

103
00:05:46.525 --> 00:05:51.104
So you have to instruct fetch to, hey,
we're gonna be doing some JSON things.

104
00:05:51.104 --> 00:05:52.520
I don't know why they just didn't make it.

105
00:05:52.520 --> 00:05:56.198
Always just assume that you're doing JSON
because that's what we're doing these

106
00:05:56.198 --> 00:05:57.362
days, but they're not.

107
00:05:57.362 --> 00:06:01.516
So you have to be very explicit about that
sorta it's a content type application.

108
00:06:01.516 --> 00:06:03.602
JSON like that.

109
00:06:03.602 --> 00:06:08.418
And then the last thing is the body.

110
00:06:08.418 --> 00:06:12.998
We're just gonna JSON dot stringify data.

111
00:06:12.998 --> 00:06:16.194
And that's why I've made data undefined
because if you do that if it won't break

112
00:06:16.194 --> 00:06:17.045
if it's undefined.

113
00:06:17.045 --> 00:06:19.310
But if it's something else
that would totally break.

114
00:06:19.310 --> 00:06:20.841
So we have our fetcher.

115
00:06:20.841 --> 00:06:25.668
And then the next thing we wanna do is
we wanna create a function that will

116
00:06:25.668 --> 00:06:29.787
make a API call to either signin or
signup using the fetcher.

117
00:06:29.787 --> 00:06:33.413
So what I'll do now is inside the look
folder get I gonna make a new file,

118
00:06:33.413 --> 00:06:36.994
I'm just gonna call this,
I don't know let's call this mutations.

119
00:06:36.994 --> 00:06:40.074
So I'll put another file
here called mutations and

120
00:06:40.074 --> 00:06:42.660
basically I'm gonna import the fetcher.

121
00:06:42.660 --> 00:06:46.755
And then what I'm gonna do
is make a auth function, so

122
00:06:46.755 --> 00:06:52.034
I'm gonna say, const_authl this
is gonna be a function like this.

123
00:06:52.034 --> 00:06:59.027
And all this is gonna do is it's gonna
take in two things it's gonna take in.

124
00:06:59.027 --> 00:07:06.077
I'm gonna call it a mode, so the modal
either be signin or it'll be signup.

125
00:07:06.077 --> 00:07:11.260
So one of those because they're
literally the same payload and

126
00:07:11.260 --> 00:07:13.324
then it'll take a body.

127
00:07:13.324 --> 00:07:17.967
And then a body is of type object and
email which is a string and

128
00:07:17.967 --> 00:07:21.714
then oops,
I'll need to put string and string.

129
00:07:21.714 --> 00:07:25.114
And then password, which is also a string.

130
00:07:25.114 --> 00:07:26.576
So look at that.

131
00:07:26.576 --> 00:07:27.865
So that's some type script stuff for you.

132
00:07:27.865 --> 00:07:29.993
If you wanna type check that.

133
00:07:29.993 --> 00:07:32.429
You don't have to put
this TypeScript in here.

134
00:07:32.429 --> 00:07:35.487
You could just put a comma,
like you would normally do in JavaScript.

135
00:07:35.487 --> 00:07:37.660
I'm just doing that because it
seems there's an appetite for

136
00:07:37.660 --> 00:07:38.756
some TypeScript stuff there.

137
00:07:38.756 --> 00:07:40.862
So I did that.

138
00:07:40.862 --> 00:07:42.908
So we got those two things
are strongly typed.

139
00:07:42.908 --> 00:07:47.432
And then because this fetcher is so
cool, all we have to do is just say.

140
00:07:47.432 --> 00:07:53.065
To return the fetcher the URL that we want
will just be slash whatever the mode is.

141
00:07:53.065 --> 00:07:55.977
And then we just pass in the body,
that's it,

142
00:07:55.977 --> 00:08:00.770
very simple because again the fetcher
already knows the prefix for the URL.

143
00:08:00.770 --> 00:08:06.314
It's already doing slash API, whatever and
then it'll be the slash signin, signup.

144
00:08:06.314 --> 00:08:09.843
And then we just pass the body which
will be an email and a password,

145
00:08:09.843 --> 00:08:12.504
which we do know if you
look at our API signatures.

146
00:08:12.504 --> 00:08:16.187
That we're looking for email and
password on this body for signup.

147
00:08:16.187 --> 00:08:19.174
We're also looking for
an email password on this body for signin.

148
00:08:19.174 --> 00:08:22.083
So that satisfies those requirements.

149
00:08:22.083 --> 00:08:28.738
We should be good to use this
mutation inside of our forums.

150
00:08:28.738 --> 00:08:32.453
Any questions on the fetcher and
in this auth mutation that I just made?

151
00:08:32.453 --> 00:08:33.989
Yes.

152
00:08:33.989 --> 00:08:37.900
&gt;&gt; So is the plan going forward that more
functions might land in this mutations

153
00:08:37.900 --> 00:08:39.622
file or is this only for fetcher?

154
00:08:39.622 --> 00:08:42.077
&gt;&gt; Yeah, a plan going forward is yeah,

155
00:08:42.077 --> 00:08:47.160
every time I have to mutate the database,
I probably put a function in here.

156
00:08:47.160 --> 00:08:52.026
That way I'm not creating it in
components somewhere right I'll prefer

157
00:08:52.026 --> 00:08:53.471
to put them all here.

158
00:08:53.471 --> 00:08:55.858
Yeah, so I can see them in one place.

