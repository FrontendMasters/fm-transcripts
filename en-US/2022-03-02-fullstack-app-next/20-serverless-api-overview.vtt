WEBVTT

1
00:00:00.000 --> 00:00:04.498
We're gonna start the off
process slash API process.

2
00:00:04.498 --> 00:00:10.781
So we're gonna be locking down
our half UI half layout app.

3
00:00:10.781 --> 00:00:15.552
So I'm switching focus from UI
to move more to database stuff

4
00:00:15.552 --> 00:00:20.240
because I'm getting ready to
build out the pages, right?

5
00:00:20.240 --> 00:00:25.820
So if we go back to the design, we're
getting ready to build out these pages.

6
00:00:25.820 --> 00:00:30.817
And I would prefer that we have
access to the current signed in user,

7
00:00:30.817 --> 00:00:33.120
so we can build out this page.

8
00:00:33.120 --> 00:00:35.403
In order to do that,
we need authentication,

9
00:00:35.403 --> 00:00:38.280
in order to have authentication
we need a database setup.

10
00:00:38.280 --> 00:00:39.690
So that's why I did all that.

11
00:00:39.690 --> 00:00:43.170
That's why I started with the layouts,
and then I was like, what's next?

12
00:00:43.170 --> 00:00:46.680
This homepage is next, we need a user,
and we need a database,

13
00:00:46.680 --> 00:00:48.018
now we need the routes.

14
00:00:48.018 --> 00:00:49.177
So that's why we're doing this.

15
00:00:49.177 --> 00:00:53.168
So for me, I'm always driven by
the feature and not like, let me do all

16
00:00:53.168 --> 00:00:57.433
frontend verses all back end or
all backend, then all frontend, I'm like

17
00:00:57.433 --> 00:01:02.401
feature by feature, left to right, that's
kind of how I think, it makes more sense.

18
00:01:02.401 --> 00:01:06.871
I've tried all the ways, and to me this
just makes more sense about the feature by

19
00:01:06.871 --> 00:01:10.109
feature versus just doing one
thing at a time completely.

20
00:01:10.109 --> 00:01:11.796
And then go on to the next thing,

21
00:01:11.796 --> 00:01:16.365
because I found doing multiple passes
like that usually results in two things.

22
00:01:16.365 --> 00:01:20.802
One, you have to do multiple passes, you
have to go back and sweep over your code

23
00:01:20.802 --> 00:01:25.175
over and over and over, replacing mock
data with real data, fake servers with

24
00:01:25.175 --> 00:01:29.378
real servers, fake databases with real
databases over and over and over.

25
00:01:29.378 --> 00:01:34.478
And then two, you start to get
lazy because what happens is like,

26
00:01:34.478 --> 00:01:38.530
imagine if you wrote your front end first.

27
00:01:38.530 --> 00:01:41.676
And it was expecting the data
to come back a certain way.

28
00:01:41.676 --> 00:01:44.097
And then you want to
go write your backend.

29
00:01:44.097 --> 00:01:47.420
You might just make your backend
bad because the front end is

30
00:01:47.420 --> 00:01:52.620
expecting a data a certain way, so you
model your backend to match that frontend.

31
00:01:52.620 --> 00:01:55.509
But if you did it the other way around,
your database probably would have been

32
00:01:55.509 --> 00:01:57.922
a lot more optimized, and
we're gonna do things differently.

33
00:01:57.922 --> 00:02:01.347
But then your front end is gonna have to,
but let's say you did do the database in

34
00:02:01.347 --> 00:02:04.030
the backend first, and
then you want to go make the frontend.

35
00:02:04.030 --> 00:02:06.712
Now the front ends, like,
I got to do whatever the database says,

36
00:02:06.712 --> 00:02:09.920
it has like these really bad routes,
so now I got these really bad routes.

37
00:02:09.920 --> 00:02:11.821
And typically, a lot of people
don't go back and just like,

38
00:02:11.821 --> 00:02:14.890
I'll just make these routes better cuz
they don't want to do a second pass.

39
00:02:14.890 --> 00:02:17.343
Then even then, again,
you're doing multiple passes,

40
00:02:17.343 --> 00:02:20.446
where if I just do feature by feature,
I do them together at the same time,

41
00:02:20.446 --> 00:02:22.720
the frontend and the backend for
a specific feature.

42
00:02:24.030 --> 00:02:26.700
I typically don't have to
do those other passes.

43
00:02:26.700 --> 00:02:29.631
But I guess the downside of that is if
you're doing feature by feature you're not

44
00:02:29.631 --> 00:02:32.010
really thinking about
the whole architecture.

45
00:02:32.010 --> 00:02:34.362
And typically I see a lot
of performance problems and

46
00:02:34.362 --> 00:02:36.670
things like that with feature by feature.

47
00:02:36.670 --> 00:02:39.907
But I guess I would rather go back and
tweak performance and

48
00:02:39.907 --> 00:02:42.882
bigger architecture things
than having to go back and

49
00:02:42.882 --> 00:02:45.870
rewrite a whole route
because it's better that way.

50
00:02:45.870 --> 00:02:49.590
I don't know, there's always trade offs,
there's no perfect way,

51
00:02:49.590 --> 00:02:53.250
this is works better for my brain,
so figure out what works for you.

52
00:02:53.250 --> 00:02:58.806
Okay, so now that we got that done, we're
seated, we got that going, we're going

53
00:02:58.806 --> 00:03:04.490
to create a signup route that allows us to
sign up, and yeah, we'll go from there.

54
00:03:04.490 --> 00:03:10.310
So what we'll do is go to our code here.

55
00:03:10.310 --> 00:03:14.799
And if you join me
inside of the pages API,

56
00:03:14.799 --> 00:03:19.429
you'll see a file here called hello.js.

57
00:03:20.490 --> 00:03:24.459
So any file that's inside
a page/API folder is actually

58
00:03:24.459 --> 00:03:26.680
going to be a API route.

59
00:03:26.680 --> 00:03:34.740
So in this case, we have an API
route to /API/hello, any verb.

60
00:03:34.740 --> 00:03:38.080
So post, put, get, delete,
it's gonna go to here.

61
00:03:38.080 --> 00:03:39.420
So we can actually test this out.

62
00:03:39.420 --> 00:03:44.798
So what I'm gonna do is I'm
gonna go to my terminal,

63
00:03:44.798 --> 00:03:47.991
I use this thing called httpi.

64
00:03:47.991 --> 00:03:50.610
And my terminal is
basically like better curl.

65
00:03:50.610 --> 00:03:52.350
You can use curl if you want to.

66
00:03:52.350 --> 00:03:57.110
You can download some GUI like insomnia or
postman if you'd like to,

67
00:03:57.110 --> 00:04:01.310
you could just do a get request
in your browser if you want to.

68
00:04:01.310 --> 00:04:07.290
It localhost 3000/API/hello, and hit
Enter, and you'll get back the same thing.

69
00:04:07.290 --> 00:04:08.910
I'm just gonna do an HTTP pi.

70
00:04:08.910 --> 00:04:15.310
If you wanna use HTTP pi in your Mac,
you can just brew install httpi like that.

71
00:04:15.310 --> 00:04:19.350
If you're on Windows, you gotta go
look it up on their instructions, but

72
00:04:19.350 --> 00:04:23.170
it does support windows I believe,
but I'm just gonna say http.

73
00:04:23.170 --> 00:04:24.460
I can just do the port.

74
00:04:24.460 --> 00:04:30.572
It already knows I'm a local host if
I don't type in a host /api/hello.

75
00:04:30.572 --> 00:04:34.050
There we go, and
you can see I get back name, John Doe.

76
00:04:34.050 --> 00:04:38.965
And that's exactly what it responds
back here in the code, name, John Doe.

77
00:04:38.965 --> 00:04:42.130
So again,
you could do that in the browser.

78
00:04:42.130 --> 00:04:46.975
So people who don't have any API
client installed, you can just type in

79
00:04:46.975 --> 00:04:51.763
localhost 3000/api/hello, and
you should see name John Doe.

80
00:04:51.763 --> 00:04:54.041
If you've never created
a serverless function before,

81
00:04:54.041 --> 00:04:55.278
you're about to create some.

82
00:04:55.278 --> 00:04:59.020
Serverless functions are awesome, there's
literally exactly what they sound like.

83
00:04:59.020 --> 00:05:02.706
So instead of creating a server that's
constantly running, and it's constantly on

84
00:05:02.706 --> 00:05:05.740
and you're maintaining all this stuff,
you just create a function.

85
00:05:05.740 --> 00:05:07.810
You can think of it as like
a callback in the cloud.

86
00:05:07.810 --> 00:05:08.880
That's the way I think about it.

87
00:05:08.880 --> 00:05:12.160
It's a function that gets
executed off of some event.

88
00:05:12.160 --> 00:05:14.610
Usually that event is tied into a URL.

89
00:05:14.610 --> 00:05:20.207
So in this case, the URLs is whatever the
folder is, so /api/hello, that is the URL.

90
00:05:20.207 --> 00:05:24.947
When that URL gets executed,
this function runs, that's it.

91
00:05:24.947 --> 00:05:29.737
It starts up and then it shuts down and
you get charged half of a half of a half

92
00:05:29.737 --> 00:05:34.604
of a half a penny to run that function,
and then you can run as many as you want

93
00:05:34.604 --> 00:05:38.191
in parallel, so
it scales to infinity, and it works.

94
00:05:38.191 --> 00:05:42.934
There are downsides obviously with like,
yeah there are downsides.

95
00:05:42.934 --> 00:05:46.781
We can talk about that later, but so
far that's what we're gonna be using.

96
00:05:46.781 --> 00:05:49.953
That's what next JS has built in
support for on their platform,

97
00:05:49.953 --> 00:05:54.460
for so, so we don't have to worry about a
server, we can just write some code here.

98
00:05:54.460 --> 00:05:58.872
So, we need to make a route
to be able to sign up.

99
00:05:58.872 --> 00:06:01.458
We're gonna have a forum on the frontend
that somebody can type an email and

100
00:06:01.458 --> 00:06:03.580
a password and sign up and
create an account.

101
00:06:03.580 --> 00:06:05.515
Where is that gonna go to,
or is that gonna post, so

102
00:06:05.515 --> 00:06:07.510
we want to be able to make
a route that does that.

103
00:06:07.510 --> 00:06:10.800
So if you ever made a backend before,
it's literally the same thing.

104
00:06:10.800 --> 00:06:12.891
This is all just gonna be in
this function, that's it,

105
00:06:12.891 --> 00:06:14.780
that's all we're gonna do.

106
00:06:14.780 --> 00:06:15.980
So let's do that.

107
00:06:15.980 --> 00:06:18.920
We're gonna make a new
file in the api folder.

108
00:06:18.920 --> 00:06:21.446
We're gonna call it signup.ts.

109
00:06:21.446 --> 00:06:24.458
And the reason we're gonna call
it that is because we want

110
00:06:24.458 --> 00:06:26.810
the route to be /api/signup.

111
00:06:26.810 --> 00:06:28.600
That's why we're calling it signup.

112
00:06:28.600 --> 00:06:31.360
It's whatever the file name is,
that's what the route is gonna be.

113
00:06:31.360 --> 00:06:35.060
So /api/signup, that's gonna be the route.

114
00:06:35.060 --> 00:06:38.089
And what we can do is we can just exports,
default,

115
00:06:38.089 --> 00:06:40.210
this is gonna be an async function.

116
00:06:40.210 --> 00:06:42.480
We're gonna do some crazy stuff in here.

117
00:06:42.480 --> 00:06:48.480
And we're just going to do that,
make an arrow function.

118
00:06:48.480 --> 00:06:49.969
A couple things we need to import here.

119
00:06:49.969 --> 00:06:54.820
I just need to import bcrypt because we're
gonna be hashing some passwords in here.

120
00:06:54.820 --> 00:06:56.789
When someone signs up you
gotta hash their password.

121
00:06:59.050 --> 00:07:02.850
We also need to import something
called a JSON Web Token,

122
00:07:02.850 --> 00:07:07.140
or JWT from JSON Web Token,
you should have that installed too.

123
00:07:07.140 --> 00:07:09.843
If you don't know what a JSON Web Token
is, don't worry about it,

124
00:07:09.843 --> 00:07:13.330
we'll get there, but this is just
how we're going to authenticate you.

125
00:07:13.330 --> 00:07:16.918
You need to also install something or

126
00:07:16.918 --> 00:07:21.905
import something called
cookie from from cookie.

127
00:07:21.905 --> 00:07:26.565
If you don't know what a cookie is,
it's a dessert that you can bake to taste.

128
00:07:26.565 --> 00:07:31.071
[LAUGH] A cookie is something in the
browser that follows you everywhere and

129
00:07:31.071 --> 00:07:33.843
helps you see ads you
don't want to click on.

130
00:07:33.843 --> 00:07:38.200
So we're gonna use that
to help with the JWT and

131
00:07:38.200 --> 00:07:41.664
track you as far as authentication,

132
00:07:41.664 --> 00:07:46.320
and then we're going to
import a Prisma Client.

133
00:07:46.320 --> 00:07:51.050
So we're gonna be using the Prisma Client
in many different places.

134
00:07:51.050 --> 00:07:55.390
So far we've only used it in
the seed file where we made it.

135
00:07:55.390 --> 00:07:57.899
But the seed file is not actually
part of the app, like I said,

136
00:07:57.899 --> 00:07:59.200
it's a one-off script.

137
00:07:59.200 --> 00:08:03.854
So typically like one-off scripts, you
want to avoid importing other files from

138
00:08:03.854 --> 00:08:07.900
your app because your scripts might
have a different configuration and

139
00:08:07.900 --> 00:08:09.663
runtime that your apps might.

140
00:08:09.663 --> 00:08:13.126
Like for instance, let's say you
created a script in JavaScript, and

141
00:08:13.126 --> 00:08:14.580
it was just pure node, okay?

142
00:08:14.580 --> 00:08:18.402
So it used common JS modules, it used
require, it did all this stuff, but

143
00:08:18.402 --> 00:08:22.412
then your app that your script is actually
next to is written in typescript and

144
00:08:22.412 --> 00:08:24.220
is being built by something else.

145
00:08:24.220 --> 00:08:27.950
And then it also has webpack that
handles file imports differently.

146
00:08:27.950 --> 00:08:31.142
If in your script, you try to import
one of the files from your app,

147
00:08:31.142 --> 00:08:32.630
it probably wouldn't work.

148
00:08:32.630 --> 00:08:35.577
Because if you're running your script
just against node and not wet pack,

149
00:08:35.577 --> 00:08:37.740
it wouldn't know what to do
with those image imports.

150
00:08:37.740 --> 00:08:40.310
It wouldn't know what to do
with those TypeScript things.

151
00:08:40.310 --> 00:08:43.320
So typically in these one off scripts,
you don't import things.

152
00:08:43.320 --> 00:08:46.280
So it's totally okay that we
created a new Prisma Client here.

153
00:08:46.280 --> 00:08:48.773
But while in the app and
this signup function and

154
00:08:48.773 --> 00:08:52.450
other pages that we're gonna do,
I probably just wanna reuse the same

155
00:08:52.450 --> 00:08:55.210
Prisma Clients over and
over and over again.

156
00:08:55.210 --> 00:08:58.189
So I'm not gonna make it here because
I'm actually gonna use it somewhere

157
00:08:58.189 --> 00:08:59.540
else in our app later on.

158
00:08:59.540 --> 00:09:03.082
So what I'm going to do is I'm going to
make a new folder on the route of our

159
00:09:03.082 --> 00:09:05.070
project, and I'm gonna call this lib.

160
00:09:05.070 --> 00:09:11.870
And inside of lib, I'm going to
make a new file called prisma.ts.

161
00:09:11.870 --> 00:09:16.969
And really all it's going to do is,
it's just going to make a Prisma Client,

162
00:09:16.969 --> 00:09:20.430
it's just going to do what
the C thing is doing here.

163
00:09:20.430 --> 00:09:21.610
So I'm gonna copy that.

164
00:09:22.720 --> 00:09:26.968
And I'm gonna paste this in here and
I'm just gonna say exports,

165
00:09:26.968 --> 00:09:30.070
default new Prisma Client, that's it.

166
00:09:30.070 --> 00:09:33.080
That way I just have one
Prisma Clients in my app, so

167
00:09:33.080 --> 00:09:37.280
I don't have to import the @prisma/client
every time I wanna use it.

168
00:09:37.280 --> 00:09:39.879
I can just import from this file and it
always gives me the same one pretty much.

169
00:09:39.879 --> 00:09:41.111
So I'm just gonna do that.

170
00:09:44.057 --> 00:09:48.340
And then back into our sign up,
I'm gonna import that Prisma instance.

171
00:09:48.340 --> 00:09:51.600
Next thing is every servierless
function takes two arguments.

172
00:09:51.600 --> 00:09:54.410
It takes a request object and
a response object.

173
00:09:54.410 --> 00:09:56.390
You can type check these,
which is really helpful.

174
00:09:56.390 --> 00:10:01.075
The request is gonna be NextApiRequest and

175
00:10:01.075 --> 00:10:06.090
the response is gonna be NextApiResponse.

176
00:10:06.090 --> 00:10:08.400
It's very helpful to type
check those in TypeScript.

177
00:10:08.400 --> 00:10:11.186
I know I said, if you don't need to
know TypeScript to do this course,

178
00:10:11.186 --> 00:10:12.660
you don't have to type check these.

179
00:10:12.660 --> 00:10:14.908
These are TypeScript types if
you've never seen this before.

180
00:10:14.908 --> 00:10:18.736
The reason I'm putting these here is
because it's really nice to get some

181
00:10:18.736 --> 00:10:20.413
autocomplete on these things.

182
00:10:20.413 --> 00:10:24.379
Otherwise you probably would just come in
here and console.logres to see what it is,

183
00:10:24.379 --> 00:10:26.376
or you got to go look
at the documentation.

184
00:10:26.376 --> 00:10:31.380
It's really cool just to get some
nice editor type ahead stuff here.

185
00:10:31.380 --> 00:10:36.520
So I'm just gonna put some types next to
those, and then we should be good to go.

186
00:10:36.520 --> 00:10:38.885
So what's the strategy for signup?

187
00:10:38.885 --> 00:10:42.421
Well, just like any other app,
you send us some credentials,

188
00:10:42.421 --> 00:10:45.033
in this case is gonna be an email and
password.

189
00:10:45.033 --> 00:10:50.238
We're going to attempt to create
a new user with that email and

190
00:10:50.238 --> 00:10:51.949
a hashed password.

191
00:10:51.949 --> 00:10:55.404
Because emails are unique it's either
gonna create you because you don't exist

192
00:10:55.404 --> 00:10:58.907
or it's gonna say sorry this email already
exists and it's gonna throw an error,

193
00:10:58.907 --> 00:10:59.486
that's it.

194
00:10:59.486 --> 00:11:04.758
That's all sign up is gonna do, and
then if that is successful, we'll generate

195
00:11:04.758 --> 00:11:10.390
a JSON Web Token and we'll save it as
a cookie, so it'll be set in your browser.

196
00:11:10.390 --> 00:11:14.092
And then that cookie will be sent on every
other requests that we can use to verify

197
00:11:14.092 --> 00:11:14.877
that it's you.

198
00:11:14.877 --> 00:11:16.480
That's how we're gonna sign you up.

199
00:11:16.480 --> 00:11:20.821
And then as far as a JSON Web Token,
a JSON Web Token is just a,

200
00:11:20.821 --> 00:11:25.163
the best way I can describe it is,
imagine an object that gets

201
00:11:25.163 --> 00:11:29.609
turned into some generic string,
but it's deterministic.

202
00:11:29.609 --> 00:11:33.611
We can undo that string and
get back the same object, and typically,

203
00:11:33.611 --> 00:11:36.770
what we do is we put the ID
of the user on that object.

204
00:11:36.770 --> 00:11:40.552
What roles they might have or
access, when that object expires,

205
00:11:40.552 --> 00:11:42.282
different things like that.

206
00:11:42.282 --> 00:11:45.087
And we'll put that in a cookie so
it can be saved in a browser,

207
00:11:45.087 --> 00:11:47.464
and then every request will
have that cookie on it.

208
00:11:47.464 --> 00:11:52.129
And we can check to see one, is this
server the issuer of this token because

209
00:11:52.129 --> 00:11:55.831
I'll know because we're using
a different passphrase.

210
00:11:55.831 --> 00:11:59.522
Or two, even if this is a right token,
is it expired.

211
00:11:59.522 --> 00:12:03.686
Or three, even if it's not expired,
is this a valid user ID?

212
00:12:03.686 --> 00:12:05.130
So it's like three different
ways we can check.

