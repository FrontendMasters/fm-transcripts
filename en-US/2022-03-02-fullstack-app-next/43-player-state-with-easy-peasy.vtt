WEBVTT

1
00:00:00.207 --> 00:00:03.204
In order to start working on
the controls and everything.

2
00:00:03.204 --> 00:00:07.769
So we don't have to backtrack, and
come back, and double take, and

3
00:00:07.769 --> 00:00:09.909
do all these like refactoring.

4
00:00:09.909 --> 00:00:14.110
I wanna get the state situation figured
out before we start working on the UI.

5
00:00:14.110 --> 00:00:18.177
And the whole situation with the state
is I mean because go look at the app,

6
00:00:18.177 --> 00:00:20.550
I wanna come in here and
I wanna click play.

7
00:00:20.550 --> 00:00:23.842
So play this entire playlist, or I wanna
come in and I want to click a song and

8
00:00:23.842 --> 00:00:27.010
I want it to play, but
how does this player board know that?

9
00:00:27.010 --> 00:00:30.539
Right now, we don't have any state
situation set up to where we can

10
00:00:30.539 --> 00:00:34.660
understand what is actively playing,
what is the active playlist?

11
00:00:34.660 --> 00:00:35.884
That's not something that we have set up,

12
00:00:35.884 --> 00:00:37.950
we've just been using local state and
hooks for now.

13
00:00:37.950 --> 00:00:41.636
So we need to set up some type of
global state that we need to use so

14
00:00:41.636 --> 00:00:45.770
that these two components can
communicate with each other.

15
00:00:45.770 --> 00:00:46.790
And there's a million ways to do that.

16
00:00:46.790 --> 00:00:49.599
You can can use Redux,
that's what Redux was created for.

17
00:00:49.599 --> 00:00:53.353
In the world of hooks,
you can use hooks plus context API.

18
00:00:53.353 --> 00:00:57.141
There's performance trade off to that,
unless you use it correctly.

19
00:00:57.141 --> 00:01:00.577
Basically, you have every component
re-rendering all the time,

20
00:01:00.577 --> 00:01:04.735
which is a very common thing that I see
when people will hooks and context.

21
00:01:04.735 --> 00:01:08.199
But I'm actually just gonna
use this super easy drop in

22
00:01:08.199 --> 00:01:11.710
state library that works
very well with hooks.

23
00:01:11.710 --> 00:01:14.754
It's almost like Redux but
it's just way more lightweight and

24
00:01:14.754 --> 00:01:16.820
not a lot of ceremony and setup.

25
00:01:16.820 --> 00:01:19.290
And we'll use that to get our state.

26
00:01:19.290 --> 00:01:23.168
And again, we need to keep track
of the active playlist, and

27
00:01:23.168 --> 00:01:25.613
the active song, and what those are.

28
00:01:25.613 --> 00:01:27.565
And we need to be able
to change that state so

29
00:01:27.565 --> 00:01:29.422
that way this component knows about it.

30
00:01:29.422 --> 00:01:31.242
So that's what we'll be doing.

31
00:01:31.242 --> 00:01:32.613
So in order to do that,

32
00:01:32.613 --> 00:01:36.676
you should already have something
installed to help us with that.

33
00:01:36.676 --> 00:01:40.579
So what we're gonna do is
we're gonna go to the lib,

34
00:01:40.579 --> 00:01:45.295
we're gonna make a new file,
we're gonna call it store.ts.

35
00:01:45.295 --> 00:01:49.736
And inside the store,
we're gonna import something from

36
00:01:49.736 --> 00:01:53.823
Easy Peasy [LAUGH] I said it is easy,
it's in the name.

37
00:01:53.823 --> 00:01:55.447
It's literally called Easy Peasy.

38
00:01:55.447 --> 00:02:01.176
I like the fact that the creator's called
it this because it is really easy.

39
00:02:01.176 --> 00:02:05.270
It won a bunch of awards for
how easy it is with React.

40
00:02:05.270 --> 00:02:09.450
So we're gonna import createStore and
then we're gonna import action.

41
00:02:09.450 --> 00:02:12.292
So if you ever use Redux, you probably
already familiar with those two things.

42
00:02:12.292 --> 00:02:15.438
We're making a store,
there's action but it's not the same.

43
00:02:15.438 --> 00:02:17.183
I think internally it does use Redux,

44
00:02:17.183 --> 00:02:19.589
I'm pretty sure Easy Peasy
uses Redux internally.

45
00:02:19.589 --> 00:02:21.604
But it just abstracted away so

46
00:02:21.604 --> 00:02:25.885
well that you just don't even
know where you don't even care.

47
00:02:25.885 --> 00:02:30.865
So we wanna create a store, so
we're gonna export cons store.

48
00:02:30.865 --> 00:02:35.661
And that's gonna be createStore, and
basically the way the store works

49
00:02:35.661 --> 00:02:40.150
is you can put some state on it and
then you can put some actions on it.

50
00:02:40.150 --> 00:02:42.507
And you can also put computer
properties but we don't need that.

51
00:02:42.507 --> 00:02:45.925
So as far as the state,
I wanna keep track of the active songs and

52
00:02:45.925 --> 00:02:47.548
that's going to be an array.

53
00:02:47.548 --> 00:02:50.708
I wanna keep track of
active song singular, and

54
00:02:50.708 --> 00:02:53.240
that's just gonna start off as null.

55
00:02:53.240 --> 00:02:56.085
So those are really only two
things I wanna keep track of.

56
00:02:56.085 --> 00:03:00.074
And then I need actions to change
those things, to modify those things.

57
00:03:00.074 --> 00:03:04.183
So I'm gonna make an action for
changeActiveSongs.

58
00:03:04.183 --> 00:03:08.980
And the way you can do that is you just
set that to the action import that

59
00:03:08.980 --> 00:03:13.143
we have, which is a function,
that just takes a callback.

60
00:03:13.143 --> 00:03:17.647
So it'll take the state and
then it'll take the payload.

61
00:03:17.647 --> 00:03:21.639
And then you can do
a mutable operation here.

62
00:03:21.639 --> 00:03:28.468
So I could say state.activesongs
= whatever the payload is.

63
00:03:28.468 --> 00:03:34.628
So that means when you call this function,
you have to send up the new active songs.

64
00:03:34.628 --> 00:03:35.192
And right now,

65
00:03:35.192 --> 00:03:38.072
it's freaking out because a TypeScript so
I'm just going to need that thing.

66
00:03:38.072 --> 00:03:42.728
Underneath that is using
something called Immer.

67
00:03:42.728 --> 00:03:47.117
Which I think a lot of people use Redux
now, and Immer what it does is it allows

68
00:03:47.117 --> 00:03:51.851
you to do mutable operations like this
using an equal sign, but underneath that,

69
00:03:51.851 --> 00:03:55.540
it'll transform it to immutable operation.

70
00:03:55.540 --> 00:03:56.970
That way, you get the best of both worlds.

71
00:03:56.970 --> 00:04:00.254
You don't have to do all,
if you've ever had to write a reducer or

72
00:04:00.254 --> 00:04:03.602
Redux you know what I'm talking about,
what spread operators and

73
00:04:03.602 --> 00:04:06.640
it gets crazy when you're
trying to be immutable.

74
00:04:06.640 --> 00:04:10.864
And no one wants to use the immutable
libraries cuz that's just not the way that

75
00:04:10.864 --> 00:04:11.703
we write code.

76
00:04:11.703 --> 00:04:14.743
No one wants to do get and
set everywhere to change an object.

77
00:04:14.743 --> 00:04:18.501
So Immer allows you to just write
code like it normally is and

78
00:04:18.501 --> 00:04:22.871
then underneath it transforms it
to an immutable operation for you.

79
00:04:22.871 --> 00:04:26.165
So I'm pretty sure that's
what Easy Peasy is using,

80
00:04:26.165 --> 00:04:28.150
I think even says it in our docs.

81
00:04:28.150 --> 00:04:32.167
And then the next one is just another
action to change the act of song,

82
00:04:32.167 --> 00:04:34.253
so changeActiveSong, singular.

83
00:04:34.253 --> 00:04:35.962
And it's pretty much the same thing.

84
00:04:35.962 --> 00:04:40.003
I was actually just gonna copy
this cuz it really is, except for

85
00:04:40.003 --> 00:04:43.138
changing state.activesong
in our active songs

86
00:04:47.522 --> 00:04:49.043
And that's it,
that's our store and we're done.

87
00:04:49.043 --> 00:04:52.187
[LAUGH] It's really easy.

88
00:04:52.187 --> 00:04:56.487
And then using it is also very easy,
it works with hooks, so

89
00:04:56.487 --> 00:04:58.473
we'll be good to go there.

90
00:04:58.473 --> 00:05:03.377
The last thing we gotta do before we start
using it in the hooks is that we just need

91
00:05:03.377 --> 00:05:07.696
to, in order for everything to have
access to this store in the state,

92
00:05:07.696 --> 00:05:11.210
obviously, I think context
is going to be applied here,

93
00:05:11.210 --> 00:05:14.105
just like any other thing
would have context.

94
00:05:14.105 --> 00:05:19.019
So we're gonna have to wrap our
app in a provider which has gonna

95
00:05:19.019 --> 00:05:21.068
have access to the store.

96
00:05:21.068 --> 00:05:24.794
So what we'll do as we'll go to the _app,
we need to go up top and

97
00:05:24.794 --> 00:05:30.189
we have to import, From Easy Peasy,

98
00:05:30.189 --> 00:05:33.117
and that's gonna be the store
provider store provider.

99
00:05:33.117 --> 00:05:37.489
There we go, and we just need to

100
00:05:37.489 --> 00:05:42.040
wrap the whole thing in a store.

101
00:05:42.040 --> 00:05:45.301
So pretty much everything after
ChakraProvider is just gonna get wrapped

102
00:05:45.301 --> 00:05:47.140
at the StoreProvider.

103
00:05:47.140 --> 00:05:54.100
So we'll say StoreProvider, that's and all
the way down here to the StoreProvider.

104
00:05:54.100 --> 00:05:59.529
And then as its only prop, it's gonna
take the store that we just created,

105
00:05:59.529 --> 00:06:03.421
so it will say store and
then store that we can import.

106
00:06:03.421 --> 00:06:08.043
And the next thing we wanna
do is we want to pull in our

107
00:06:08.043 --> 00:06:12.680
state into the components
that are gonna use them.

108
00:06:12.680 --> 00:06:17.087
So the only component that's
gonna use the state is gonna be,

109
00:06:17.087 --> 00:06:20.780
probably the actual controls for
the player.

110
00:06:20.780 --> 00:06:22.328
So that component that
we haven't made yet, so

111
00:06:22.328 --> 00:06:24.640
what we'll do is we'll make
the component for that.

112
00:06:24.640 --> 00:06:28.668
And then we'll just pull in the state and
we'll start building out the UI for that.

113
00:06:28.668 --> 00:06:31.853
And this components gonna be a little
bigger than most of the other components

114
00:06:31.853 --> 00:06:34.555
because, like I said,
there's a lot of things to keep track of.

115
00:06:34.555 --> 00:06:37.558
There are a lot of DOM events
that were responding to.

116
00:06:37.558 --> 00:06:40.588
There's animations,
there's the state thing now, so

117
00:06:40.588 --> 00:06:43.500
it's gonna get pretty crazy but
that's the fun part.

