WEBVTT

1
00:00:00.480 --> 00:00:07.245
Good question, the question was, when does
the run function actually get executed?

2
00:00:07.245 --> 00:00:10.215
Instead of just telling
you when it gets executed,

3
00:00:10.215 --> 00:00:12.990
I'm gonna show you how
you can figure that out.

4
00:00:12.990 --> 00:00:14.602
So if you look at the package.json,

5
00:00:14.602 --> 00:00:17.723
there's something you should have
added at the bottom called prisma.

6
00:00:17.723 --> 00:00:23.791
And it has a seed property whose value
points to something called ts-node.

7
00:00:23.791 --> 00:00:27.998
ts-node is just the node executable
that understands TypeScript, so

8
00:00:27.998 --> 00:00:30.042
it can execute TypeScript files.

9
00:00:30.042 --> 00:00:32.743
Here's a flag that you can pass into
the TypeScript compiler to tell it to

10
00:00:32.743 --> 00:00:33.639
use CommonJS modules.

11
00:00:33.639 --> 00:00:36.391
Because by default,
TypeScript now uses ES6 modules.

12
00:00:36.391 --> 00:00:41.369
But Next.js uses TypeScript or
CommonJS modules with Babel on top of it,

13
00:00:41.369 --> 00:00:44.030
so technically it's still CommonJS.

14
00:00:44.030 --> 00:00:48.295
And then the important part is that it's
pointing to this file, prisma/seed.ts.

15
00:00:48.295 --> 00:00:49.762
So it's gonna execute this file.

16
00:00:49.762 --> 00:00:54.508
If we go to that file prisma/seed.ts,
that's where the run function is.

17
00:00:54.508 --> 00:00:55.673
It's here.

18
00:00:55.673 --> 00:00:57.781
We wrote it there, and
we executed it here.

19
00:00:57.781 --> 00:00:59.593
So the answer to your question is,

20
00:00:59.593 --> 00:01:03.102
this run function only gets executed
when we run the seed command.

21
00:01:03.102 --> 00:01:06.670
That's it, it's a script that you run and
then it stops.

22
00:01:06.670 --> 00:01:08.617
It's not an app that stays on.

23
00:01:08.617 --> 00:01:10.565
It has nothing to do with the front end.

24
00:01:10.565 --> 00:01:12.114
It has actually nothing to
do with the back end either.

25
00:01:12.114 --> 00:01:14.145
It's just a script.

26
00:01:14.145 --> 00:01:16.334
Most apps have four
different things going on.

27
00:01:16.334 --> 00:01:21.072
They have build time, so you have some
process that's building your app.

28
00:01:21.072 --> 00:01:22.286
Think of Babel.

29
00:01:22.286 --> 00:01:24.653
Think of Parcel, think of Webpack.

30
00:01:24.653 --> 00:01:25.817
That's build time.

31
00:01:25.817 --> 00:01:26.866
You got runtime.

32
00:01:26.866 --> 00:01:30.360
That would be your app actually running
in a browser or it running on a server.

33
00:01:30.360 --> 00:01:34.130
You have what I call dev time,
that's you writing the code.

34
00:01:34.130 --> 00:01:36.824
So if you got TypeScript errors,
you got ESLint errors.

35
00:01:36.824 --> 00:01:38.568
And then you have
something called scripts.

36
00:01:38.568 --> 00:01:42.591
Scripts are just one-off
things that don't actually,

37
00:01:42.591 --> 00:01:45.867
they're not meant to be
running all the time.

38
00:01:45.867 --> 00:01:50.681
They might do some type of automation
like copy this file here, or

39
00:01:50.681 --> 00:01:54.721
process this CSS, post CSS,
or optimize these SVGs.

40
00:01:54.721 --> 00:01:58.675
It's kind of like the build system,
but not exactly.

41
00:01:58.675 --> 00:02:01.337
It doesn't really build the app.

42
00:02:01.337 --> 00:02:02.527
It just does one little task and
that's it.

43
00:02:02.527 --> 00:02:06.664
In this case, this one little task adds
data to our database that we have on

44
00:02:06.664 --> 00:02:07.884
a Roku, that's it.

45
00:02:07.884 --> 00:02:11.761
So when our app actually starts up,
there'll be data there for it to consume.

46
00:02:11.761 --> 00:02:15.110
Without that, we would have to
go make some fake data in React.

47
00:02:15.110 --> 00:02:17.210
And which works, it's totally fine.

48
00:02:17.210 --> 00:02:21.212
But we won't get the benefit of being
able to write code that accounts for

49
00:02:21.212 --> 00:02:23.257
error handling and loading states.

50
00:02:23.257 --> 00:02:25.400
Because we're not pulling
the data from an API,

51
00:02:25.400 --> 00:02:27.712
we're just reading it from
memory on the front end.

52
00:02:27.712 --> 00:02:31.174
Which as a UI engineer,
as a product engineer,

53
00:02:31.174 --> 00:02:34.211
half of your job is writing, is loading.

54
00:02:34.211 --> 00:02:35.599
You gotta get used to that.

55
00:02:35.599 --> 00:02:37.146
So I want to make sure
that we all have that.

56
00:02:37.146 --> 00:02:38.901
And the best way to do that
is to put data in a database.

57
00:02:38.901 --> 00:02:43.782
On a real job, typically what might
happen is someone on your team might give

58
00:02:43.782 --> 00:02:48.815
you a zip file that says here's a copy of
staging, or a clean copy of production

59
00:02:48.815 --> 00:02:53.266
with all the stuff obfuscated, so
you don't see the private stuff.

60
00:02:53.266 --> 00:02:54.477
Seed your database with this.

61
00:02:54.477 --> 00:02:57.259
That way your local database has
a bunch of fake data in it, so

62
00:02:57.259 --> 00:02:58.687
you can test your applicants.

63
00:02:58.687 --> 00:03:02.027
You might have that in staging,
you might have that in local.

64
00:03:02.027 --> 00:03:03.203
This is just our version of it.

65
00:03:03.203 --> 00:03:05.271
It's a script that generates that data,

66
00:03:05.271 --> 00:03:09.242
versus someone on our team giving us a zip
file and inserting into our database.

67
00:03:09.242 --> 00:03:13.920
Because seed data is actually useful,
so you can actually run your applicants.

68
00:03:13.920 --> 00:03:19.256
Imagine trying to build Facebook
feed without any data in the feed.

69
00:03:19.256 --> 00:03:22.386
You wouldn't know what to make,
nothing would show up.

70
00:03:22.386 --> 00:03:25.151
You would need some data there, so
you can actually build the UI for it.

71
00:03:25.151 --> 00:03:27.356
It's the same thing, so we need that.

72
00:03:27.356 --> 00:03:30.044
We can't actually play any music
until there's music in the database.

73
00:03:30.044 --> 00:03:32.051
&gt;&gt; So each time you run that seed script,

74
00:03:32.051 --> 00:03:34.702
does it wipe out the data
that's in the database?

75
00:03:34.702 --> 00:03:35.693
&gt;&gt; Good question,

76
00:03:35.693 --> 00:03:39.952
the seed script doesn't do anything
other than the code that we write.

77
00:03:39.952 --> 00:03:44.535
And based off the code that we wrote,
because we're doing upsert which either

78
00:03:44.535 --> 00:03:48.993
updates or creates, no, it's not
wiping everything out in the database.

79
00:03:48.993 --> 00:03:54.685
What's actually happening is, so for this
upsert, so I already did this scenario.

80
00:03:54.685 --> 00:03:56.081
Let's say there's nothing in the database.

81
00:03:56.081 --> 00:03:57.455
We run the seed script the first time.

82
00:03:57.455 --> 00:04:01.359
All of these would go to create, because
it would never find an artist with this

83
00:04:01.359 --> 00:04:03.381
name cuz it wasn't in the database yet.

84
00:04:03.381 --> 00:04:05.314
It's the first time we ran it.

85
00:04:05.314 --> 00:04:07.748
So these artists and
these songs would get created.

86
00:04:07.748 --> 00:04:11.344
This user would get created, and
these playlists would get created.

87
00:04:11.344 --> 00:04:12.538
That would be the first time.

88
00:04:12.538 --> 00:04:16.459
The second time you run it,
assuming you didn't drop the database,

89
00:04:16.459 --> 00:04:19.443
it would come up here and
it'll do the upsert again.

90
00:04:19.443 --> 00:04:23.795
It will see that there is an artist with
this name, who I need to update with this,

91
00:04:23.795 --> 00:04:24.381
nothing.

92
00:04:24.381 --> 00:04:26.787
So it won't actually
update it with anything.

93
00:04:26.787 --> 00:04:28.566
But it also won't create it,
because it found it.

94
00:04:28.566 --> 00:04:30.887
So then it'll go to the next one,
same thing here.

95
00:04:30.887 --> 00:04:33.626
And then you get down to this create here,

96
00:04:33.626 --> 00:04:38.736
which looks like it always creates
a playlist, cuz we're not doing upsert.

97
00:04:38.736 --> 00:04:41.062
This would probably create
another ten playlists, probably,

98
00:04:41.062 --> 00:04:42.232
cuz we're not doing an upsert.

99
00:04:42.232 --> 00:04:45.407
Or maybe prisma is smart enough to
know that we're trying to seed it,

100
00:04:45.407 --> 00:04:46.620
and it'll write over it.

101
00:04:46.620 --> 00:04:49.938
But we're not doing the upsert here
because we didn't know what the IDs

102
00:04:49.938 --> 00:04:50.720
were, so yeah.

103
00:04:50.720 --> 00:04:52.526
So to answer your question, no.

104
00:04:52.526 --> 00:04:57.438
But if you did wanna do that,
what you could do

105
00:04:57.438 --> 00:05:02.497
is you could type in npx
prisma migrate reset.

106
00:05:02.497 --> 00:05:06.063
And what that will do, well,
basically is just drop the whole database.

107
00:05:06.063 --> 00:05:09.600
It'll literally drop the whole database,
and then run the migrations against it.

108
00:05:09.600 --> 00:05:11.252
That's basically what it will do.

109
00:05:11.252 --> 00:05:12.504
But before you do that,

110
00:05:12.504 --> 00:05:15.769
you wanna make sure that you
have all your latest migrations.

111
00:05:15.769 --> 00:05:17.306
I've been doing db push this whole time,
so

112
00:05:17.306 --> 00:05:19.102
I need to run another
migration before I do a reset.

113
00:05:19.102 --> 00:05:22.462
So what I'll do is I'll say
npx prisma migrate dev.

114
00:05:22.462 --> 00:05:29.135
So this is me doing a git
push of my database.

115
00:05:29.135 --> 00:05:31.758
I'm like, cool,
I committed all my schema changes.

116
00:05:31.758 --> 00:05:33.137
I'm good to go.

117
00:05:33.137 --> 00:05:36.835
Let me push this up to database GitHub,
basically, right?

118
00:05:36.835 --> 00:05:38.741
So I'm gonna do that.

119
00:05:38.741 --> 00:05:42.676
And of course, it's not --dev,
it's just dev.

120
00:05:42.676 --> 00:05:46.591
There we go, so
it's going to attempt to do that.

121
00:05:46.591 --> 00:05:49.546
Let's see what happens.

122
00:05:49.546 --> 00:05:52.266
It's basically saying here's
all the changes that you did.

123
00:05:52.266 --> 00:05:55.427
You changed the Playlist table,
you removed the userId.

124
00:05:55.427 --> 00:06:00.087
And you changed it to made it required,
and you added another foreign key.

125
00:06:00.087 --> 00:06:04.251
You changed the Song table,
you added a duration, you added a url.

126
00:06:04.251 --> 00:06:05.989
You sure that's what you wanna do?

127
00:06:05.989 --> 00:06:07.529
I'm like, yes, that's what I wanna do.

128
00:06:07.529 --> 00:06:08.962
And it's like, cool.

129
00:06:08.962 --> 00:06:12.594
I'm gonna go apply the previous migrations
that you had before, that was successful.

130
00:06:12.594 --> 00:06:16.870
Name this new migration,
I'm gonna call it song-stuff.

131
00:06:22.395 --> 00:06:23.698
Call it song-stuff.

132
00:06:23.698 --> 00:06:24.640
Looks like it was able
to run the migration.

133
00:06:24.640 --> 00:06:26.630
It then generated a Prisma client.

134
00:06:26.630 --> 00:06:30.489
And then because we had that seed
command in the package.json,

135
00:06:30.489 --> 00:06:34.071
it ran the seed script again to
make sure you were good to go.

136
00:06:34.071 --> 00:06:37.498
So Prisma's pretty smart about
keeping your database in sync.

137
00:06:37.498 --> 00:06:39.486
I really like that about them.

138
00:06:39.486 --> 00:06:43.261
It really makes it easy to
keep everything in sync.

139
00:06:43.261 --> 00:06:48.480
I remember there was always one person on
the team that has SSH into the database,

140
00:06:48.480 --> 00:06:51.806
and only they could run migrations and
no one else.

141
00:06:51.806 --> 00:06:54.879
I was that person, it was terrible.

142
00:06:54.879 --> 00:06:56.391
I could never get time off.

143
00:06:56.391 --> 00:06:59.325
I'm chilling on the weekend, and
someone needs to run a migration,

144
00:06:59.325 --> 00:07:00.395
cuz they work weekends.

145
00:07:00.395 --> 00:07:03.096
But only I can do it.

146
00:07:03.096 --> 00:07:04.349
I'm like, God, why did I sign up for this?

147
00:07:04.349 --> 00:07:06.741
Prisma makes that easy, so
anyone can run migrations.

148
00:07:06.741 --> 00:07:10.825
Although, everyone should not be able
to run migrations, only select a few.

149
00:07:10.825 --> 00:07:13.810
So yeah, good question.

