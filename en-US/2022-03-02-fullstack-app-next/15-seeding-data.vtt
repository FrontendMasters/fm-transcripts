WEBVTT

1
00:00:00.020 --> 00:00:02.703
All right, so now that we got that,

2
00:00:02.703 --> 00:00:06.630
what we can do now is we can
work on our seed scripts.

3
00:00:06.630 --> 00:00:10.465
Let's get some data in the database,
specifically some playlists and stuff, and

4
00:00:10.465 --> 00:00:14.245
we can populate our sidebar with some
playlists, we can do some authentication,

5
00:00:14.245 --> 00:00:16.220
and we can get these pages going.

6
00:00:16.220 --> 00:00:19.500
So authentication is probably
the biggest part of the whole app.

7
00:00:19.500 --> 00:00:23.989
There's so many moving pieces when it
comes to authentication because all

8
00:00:23.989 --> 00:00:27.206
the places you have to lock
down inside of an xjs apps.

9
00:00:27.206 --> 00:00:29.032
But I think it's really cool.

10
00:00:29.032 --> 00:00:32.160
I think it's really fascinating
how all of it works.

11
00:00:32.160 --> 00:00:34.430
So I'm really excited about
the authentication part.

12
00:00:34.430 --> 00:00:37.610
So let's do that.

13
00:00:37.610 --> 00:00:42.030
So the first thing is let's create our
seed, I'm over at the Prisma folder.

14
00:00:42.030 --> 00:00:44.514
We'll make a new file and
we'll call it seed.ts.

15
00:00:46.250 --> 00:00:49.470
And this is where we're going
to write our seed script.

16
00:00:49.470 --> 00:00:56.420
So the first thing is I'm gonna
import from the Prisma client.

17
00:00:56.420 --> 00:00:59.720
So I'm gonna say import
from @prisma/client, and

18
00:00:59.720 --> 00:01:03.700
I'm gonna import Prisma
client just like that.

19
00:01:03.700 --> 00:01:06.495
The next thing I'm going to
is I'm gonna import bcrypt,

20
00:01:06.495 --> 00:01:10.780
if you had to download bcryptjs you'll
just import bcrypt from bcryptjs.

21
00:01:10.780 --> 00:01:14.122
It should have the same API but
for me it's bcrypt,

22
00:01:14.122 --> 00:01:17.636
I'm gonna import that,
let me just fix my spelling.

23
00:01:17.636 --> 00:01:20.511
There we go.

24
00:01:20.511 --> 00:01:24.417
And the next thing we
wanna do is we want to,

25
00:01:24.417 --> 00:01:29.960
I have some seed data that we're
gonna use to help with that.

26
00:01:29.960 --> 00:01:34.494
Like all the songs that I have hosted
on some CDN somewhere like I have all

27
00:01:34.494 --> 00:01:36.620
that inside of the Notion links.

28
00:01:36.620 --> 00:01:40.620
So if we go here,
it should be, where's that?

29
00:01:42.750 --> 00:01:45.896
Here we go, if you scroll down to
where it says Data and then Seed,

30
00:01:45.896 --> 00:01:48.427
there's this whole file
where this is artistData.

31
00:01:48.427 --> 00:01:52.260
So copy that, you're gonna need that,
there's no point of writing this by hand.

32
00:01:52.260 --> 00:01:53.784
It's just a bunch of random data.

33
00:01:53.784 --> 00:01:55.920
It will take forever
to write this by hand.

34
00:01:55.920 --> 00:01:59.437
So copy all that seed data
there inside that link,

35
00:01:59.437 --> 00:02:02.887
is literally just an array of artists and
songs.

36
00:02:06.691 --> 00:02:11.460
Then you're gonna go back and
then I'm gonna inside the Prisma folder,

37
00:02:11.460 --> 00:02:16.245
I'm going to make a new file called
songsData, songs plural Data.ts.

38
00:02:16.245 --> 00:02:18.123
I'm gonna paste that in there.

39
00:02:20.043 --> 00:02:23.824
And again,
this is just a bunch of artists and songs,

40
00:02:23.824 --> 00:02:29.300
because if you think about Spotify,
there's two sides of Spotify, right?

41
00:02:29.300 --> 00:02:31.880
There's the consumer side where
you're listening to music, and

42
00:02:31.880 --> 00:02:34.540
then there's the artists side
where you're adding music.

43
00:02:34.540 --> 00:02:36.144
We're not working on the artist side.

44
00:02:36.144 --> 00:02:37.682
We're working on the consumer side.

45
00:02:37.682 --> 00:02:40.950
The consumer side assumes that
their song was already there.

46
00:02:40.950 --> 00:02:44.410
So we're gonna see the database with those
songs that should have already been there.

47
00:02:44.410 --> 00:02:47.285
As a consumer Spotify you won't
go in there and make music,

48
00:02:47.285 --> 00:02:50.806
you'll go in there listen to music
that was already created by artists.

49
00:02:50.806 --> 00:02:54.750
So this is not the Spotify admin app
this is the Spotify consumer app.

50
00:02:54.750 --> 00:02:56.438
So the music should already be there,

51
00:02:56.438 --> 00:02:59.677
the seed script is the music already
being there, this is us doing that.

52
00:03:03.960 --> 00:03:06.789
Okay, and
then we're gonna import that here.

53
00:03:06.789 --> 00:03:10.235
So import artistsData from songsData.

54
00:03:10.235 --> 00:03:14.935
So we got that, and then I'm gonna
make a new Prisma instance, so

55
00:03:14.935 --> 00:03:18.637
I'm gonna say Prisma = new PrismaClient.

56
00:03:18.637 --> 00:03:20.246
And what this does is,

57
00:03:20.246 --> 00:03:26.105
what's really cool about this is that it
handles the database connection for us.

58
00:03:26.105 --> 00:03:28.987
We never have to connect to a database,
Prisma just handles that for us,

59
00:03:28.987 --> 00:03:29.898
which is really cool.

60
00:03:29.898 --> 00:03:32.469
Like maintaining database connections
with pooling and stuff is,

61
00:03:32.469 --> 00:03:34.805
especially in the service environment.

62
00:03:34.805 --> 00:03:38.328
I think when I started using serverless
stuff when it first came out, you

63
00:03:38.328 --> 00:03:42.690
couldn't, actually couldn't use, most of
the database is in a service environment.

64
00:03:42.690 --> 00:03:45.954
Because most databases were built with
the understanding that they were gonna be

65
00:03:45.954 --> 00:03:49.411
on some server that's running for a long
time with a connection that's always open.

66
00:03:49.411 --> 00:03:52.125
But a service environment
doesn't happen that way.

67
00:03:52.125 --> 00:03:55.173
So eventually you reach this point
where you have too many connections and

68
00:03:55.173 --> 00:03:57.642
you have these cold starts and
everything's really slow.

69
00:03:57.642 --> 00:04:02.046
Now you have all these service
databases like Aurora, AWS PlanetScale,

70
00:04:02.046 --> 00:04:06.105
FaunaDB, got all these crazy things,
even Mongo serverless now.

71
00:04:06.105 --> 00:04:10.176
So it's really nice to see that people are
starting to understand how that works and

72
00:04:10.176 --> 00:04:14.420
Prisma just kind of stress a lot of
that stuff away which is really cool.

73
00:04:14.420 --> 00:04:19.043
So cool and then the next thing is
we're gonna make a function called run.

74
00:04:19.043 --> 00:04:24.378
I was gonna make an a sync function, and
then it's not doing anything right now but

75
00:04:24.378 --> 00:04:28.105
I'm gonna go ahead and
call it and I'm gonna say .then.

76
00:04:28.105 --> 00:04:31.520
And then I'm gonna say .finally.

77
00:04:31.520 --> 00:04:35.993
And what I wanna do in this .finally
block is I just wanna disconnect.

78
00:04:35.993 --> 00:04:40.680
So I'm gonna say
prisma.disconnect like so.

79
00:04:41.740 --> 00:04:43.250
And I want to await it.

80
00:04:43.250 --> 00:04:49.140
So I'm gonna say async awaits
prisma.disconnects, like that.

81
00:04:49.140 --> 00:04:51.052
And instead of doing a dot,
then I'm gonna do a .catch.

82
00:04:51.052 --> 00:04:55.352
And if there is an error,
I'm just gonna say process.exit1.

83
00:04:55.352 --> 00:04:56.037
Just exit this process,
it'll probably exit anyway, and

84
00:04:56.037 --> 00:04:56.608
I'll just log the error
just to see what happen.

85
00:04:56.608 --> 00:05:03.410
But I'm just trying to make sure I
don't keep the database running and

86
00:05:03.410 --> 00:05:10.338
have like a memory leak or I wanna
catch the error or something happens.

87
00:05:10.338 --> 00:05:12.000
This is just my way of doing that.

88
00:05:15.537 --> 00:05:20.584
I typically do this on every one off
script that I write, like if there's

89
00:05:20.584 --> 00:05:25.489
an error exit 1, which means error
in terminal, 0 means non error.

90
00:05:26.630 --> 00:05:27.730
And then disconnect the database.

91
00:05:27.730 --> 00:05:31.614
So it's not just some lingering
database connection going around.

92
00:05:31.614 --> 00:05:34.323
One issue we are gonna have
with Heroku is that, and

93
00:05:34.323 --> 00:05:38.356
I think this just happens because, and
this is just not something you need to

94
00:05:38.356 --> 00:05:41.507
Next.js is with any environment
that reloads off of save,

95
00:05:41.507 --> 00:05:46.130
every time you save and the files reload,
that's gonna create a new connection.

96
00:05:46.130 --> 00:05:48.442
Eventually we're gonna hit
a connection limit and

97
00:05:48.442 --> 00:05:52.217
we're gonna get an error in the terminal,
we got to stop the app and start it again.

98
00:05:52.217 --> 00:05:56.367
So that'll probably happen, I don't know,
every 30 saves, every 40 saves.

99
00:05:56.367 --> 00:05:59.727
I found out when I was building this
app out, it's not an issue just stop

100
00:05:59.727 --> 00:06:03.152
the server start it again, it'll start
a new pool and we should be good.

101
00:06:03.152 --> 00:06:05.160
It's only in development.

102
00:06:05.160 --> 00:06:09.537
Now, Let's see some things.

103
00:06:09.537 --> 00:06:14.184
So the first thing, I wanna seed is,
I wanna insert the artist and

104
00:06:14.184 --> 00:06:17.818
the songs into the database,
followed by a user and

105
00:06:17.818 --> 00:06:24.430
then followed by some playlists that have
all those songs that belong to the user.

106
00:06:24.430 --> 00:06:26.882
So I wanna insert all those in a database,

107
00:06:26.882 --> 00:06:30.454
that way we can log in with a user
that already has playlists,

108
00:06:30.454 --> 00:06:34.256
that already has songs in it,
that already belong to an artist.

109
00:06:34.256 --> 00:06:35.825
So we'll have all those things.

110
00:06:35.825 --> 00:06:39.386
So that's my goal, so
we'll write a cscript for that.

111
00:06:39.386 --> 00:06:42.467
So the way we can do that
is there's no right way, so

112
00:06:42.467 --> 00:06:45.421
I'm just gonna do it the way
that I think is cool.

113
00:06:45.421 --> 00:06:47.799
So I'm gonna do a promise that all and

114
00:06:47.799 --> 00:06:51.880
inside this promise all I'm
just gonna say artistData.map.

115
00:06:54.524 --> 00:06:58.947
And then what I wanna do for
each one of these artists, Artists,

116
00:06:58.947 --> 00:07:06.310
artists or async artists.

117
00:07:06.310 --> 00:07:12.550
For each one of these artists what I
wanna do is I wanna return, Prisma.

118
00:07:13.710 --> 00:07:15.530
And you can see right now
I'm getting autocomplete.

119
00:07:15.530 --> 00:07:17.779
Prisma knows that I have an artist entity,

120
00:07:17.779 --> 00:07:20.910
because it's type checked
based off our schema.

121
00:07:20.910 --> 00:07:23.680
So I get this nice autocomplete for
prisma.artist.

122
00:07:23.680 --> 00:07:27.084
And you see there's playlists,
there's song, there's user,

123
00:07:27.084 --> 00:07:28.800
we already knows all this stuff.

124
00:07:28.800 --> 00:07:29.800
It's pretty cool.

125
00:07:29.800 --> 00:07:35.500
So I'm gonna say prisma.artist,
and I'm gonna say upsert.

126
00:07:35.500 --> 00:07:38.760
Upsert just means create or update.

127
00:07:38.760 --> 00:07:42.250
That's what it means, is like,
if it exists, just update it to this.

128
00:07:42.250 --> 00:07:44.480
If it doesn't exist, create it with this.

129
00:07:44.480 --> 00:07:46.510
It's literally create or update.

130
00:07:46.510 --> 00:07:50.448
This is gonna allow our cscript to be
ran even though we might have data in it

131
00:07:50.448 --> 00:07:51.710
already.

132
00:07:51.710 --> 00:07:54.070
It won't modify it if it already exists.

133
00:07:54.070 --> 00:07:57.152
Maybe you want your cscript to
always add new things to it.

134
00:07:57.152 --> 00:08:00.614
If that's the case, you could have your
cscript, delete everything first and

135
00:08:00.614 --> 00:08:01.270
then add it.

136
00:08:01.270 --> 00:08:04.150
You can also just reset the database
before you run your cscript.

137
00:08:04.150 --> 00:08:05.075
I prefer to do it that way.

138
00:08:05.075 --> 00:08:09.743
I just reset my database, then run the
seed scripts versus having a seed script

139
00:08:09.743 --> 00:08:12.440
delete everything out of the database.

140
00:08:12.440 --> 00:08:14.350
There's no right way or wrong way.

141
00:08:14.350 --> 00:08:16.660
So we're gonna use upsert here.

142
00:08:17.930 --> 00:08:20.989
And then for the upsert, basically
first you gotta do your query and

143
00:08:20.989 --> 00:08:22.770
the way you do that is you type in where.

144
00:08:22.770 --> 00:08:28.170
So you will say I wanna upsert,
so find any artists

145
00:08:28.170 --> 00:08:32.935
whose name equals artist.name like that.

146
00:08:34.208 --> 00:08:36.620
And then update, so
if you find the artists,

147
00:08:36.620 --> 00:08:38.830
I want you to update it with nothing.

148
00:08:38.830 --> 00:08:40.215
I actually don't want
to do an update here.

149
00:08:40.215 --> 00:08:42.366
There is a cscript I'm not
trying to update anything,

150
00:08:42.366 --> 00:08:43.650
I really only wanna create.

151
00:08:43.650 --> 00:08:46.480
So, if you find an artist that
already exists with his name,

152
00:08:46.480 --> 00:08:48.440
then there's nothing to do.

153
00:08:48.440 --> 00:08:52.790
But, if you don't,
I want you to create this artist.

154
00:08:52.790 --> 00:08:55.893
This artist gonna have a name,
you can see I'm getting autocomplete here,

155
00:08:55.893 --> 00:08:59.030
you can see it says name string,
it knows artist has names.

156
00:08:59.030 --> 00:09:04.781
So I can type in a name,
that's gonna be artists.name,

157
00:09:04.781 --> 00:09:09.523
I also know that an artist must have a,
what do they have?

158
00:09:09.523 --> 00:09:12.430
Yeah they have songs, right?

159
00:09:12.430 --> 00:09:13.940
So I could insert some songs here.

160
00:09:13.940 --> 00:09:20.030
And this is where I think Prisma is really
cool, cuz you can do nested inserts.

161
00:09:21.070 --> 00:09:25.580
Every other ORM that I use,
you can't create nested things.

162
00:09:25.580 --> 00:09:27.960
You have to create them separately and
then link them together.

163
00:09:27.960 --> 00:09:29.590
So you have to do like
multiple database calls.

164
00:09:29.590 --> 00:09:36.629
But in this one instance,
I could also say, I also want to create,

165
00:09:36.629 --> 00:09:41.805
and I can go down here,
and I can say, let me see.

166
00:09:42.903 --> 00:09:49.670
I'm sorry, not create,
I can say songs, like this.

167
00:09:49.670 --> 00:09:52.840
And then I want to create songs like that.

168
00:09:52.840 --> 00:09:58.573
And then now when I wanna create these
songs, all I need to do is basically,

169
00:09:58.573 --> 00:10:03.910
if we go look at this data,
every artist has a songs array.

170
00:10:03.910 --> 00:10:06.890
So I can just insert those songs for
every artist.

171
00:10:06.890 --> 00:10:09.230
So really all I got to do is
say I wanna create these songs.

172
00:10:09.230 --> 00:10:13.736
All I have to do is say artists.songs.map.

173
00:10:13.736 --> 00:10:16.010
We're gonna grab a song like that.

174
00:10:17.280 --> 00:10:20.640
And for each one of these songs, I just
need to add the fields for every song.

175
00:10:20.640 --> 00:10:24.046
So a song has a name, we get
the autocomplete there, that song.name.

176
00:10:25.838 --> 00:10:30.655
A song also has a duration,
did I add that?

177
00:10:33.238 --> 00:10:35.320
No, I didn't add that, so
we'll go back and add that.

178
00:10:35.320 --> 00:10:36.430
Actually I'll do that right now.

179
00:10:36.430 --> 00:10:41.470
So we're gonna go back to our song schema,
gonna add a duration.

180
00:10:43.570 --> 00:10:46.038
I'm gonna say type Int, then hit Save.

181
00:10:46.038 --> 00:10:50.783
&gt;&gt; Someone had a question about
the user ID being Int question mark,

182
00:10:50.783 --> 00:10:52.085
is that correct?

183
00:10:52.085 --> 00:10:53.592
&gt;&gt; This one right here?

184
00:10:53.592 --> 00:10:57.690
Why is this here,
there's a good reason this is here.

185
00:10:57.690 --> 00:11:00.436
One sec, I think this is here, let me see.

186
00:11:00.436 --> 00:11:03.225
Actually I think I might
be ahead of myself.

187
00:11:03.225 --> 00:11:04.965
Let me see.

188
00:11:04.965 --> 00:11:06.245
No, this shouldn't be there.

189
00:11:06.245 --> 00:11:10.352
I think I just let the autocomplete
just do it and I didn't fix it.

190
00:11:10.352 --> 00:11:12.741
But I think for a one to one relationship,

191
00:11:12.741 --> 00:11:16.730
you have to put a question mark
there because which one comes first?

192
00:11:16.730 --> 00:11:20.980
So one of them has to be like,
not required, but this isn't a one to one.

193
00:11:20.980 --> 00:11:23.850
So no,
you don't need a question mark there.

194
00:11:23.850 --> 00:11:28.070
So great catch whoever you are, thank you.

195
00:11:28.070 --> 00:11:32.340
Awesome, I will push
after I run this db push.

196
00:11:32.340 --> 00:11:33.674
So let me do a db push.

197
00:11:33.674 --> 00:11:35.949
So the change I did was
a duration integer on the song.

198
00:11:37.250 --> 00:11:41.429
Now I'm going to say mpx prisma db push,
cool.

199
00:11:41.429 --> 00:11:44.828
Sync the database with that new field,

200
00:11:44.828 --> 00:11:50.287
it generated the Prisma client,
so if I go back to seed we should

201
00:11:50.287 --> 00:11:55.460
see this should autocomplete for
me now with duration.

202
00:11:55.460 --> 00:11:58.715
There it is, duration shows up now.

203
00:11:58.715 --> 00:12:01.311
So I can just say song.duration.

204
00:12:02.318 --> 00:12:07.260
&gt;&gt; I had a question on client
side versus server side.

205
00:12:07.260 --> 00:12:11.329
Is it best practice to create Prisma
models within the next js app,

206
00:12:11.329 --> 00:12:13.665
are we doing it just for this project?

207
00:12:13.665 --> 00:12:18.216
Should we separate server side and
create the models and API using nodejs and

208
00:12:18.216 --> 00:12:22.450
express to keep distinction
between client and server?

209
00:12:22.450 --> 00:12:23.450
&gt;&gt; So, very great question.

210
00:12:23.450 --> 00:12:26.740
The question was, should we separate the
back end stuff from the front end stuff?

211
00:12:26.740 --> 00:12:33.180
I would say, well, first of all,
let's talk about Next.js.

212
00:12:33.180 --> 00:12:35.258
But next JS,
there really is no separation.

213
00:12:35.258 --> 00:12:36.826
We haven't gotten to the part yet

214
00:12:36.826 --> 00:12:40.421
where you can actually write back end
code inside the front end components.

215
00:12:40.421 --> 00:12:41.983
Next JS allows you to do that,

216
00:12:41.983 --> 00:12:45.556
it encourages you to do that that
was a whole point of the framework.

217
00:12:45.556 --> 00:12:47.841
So it's a full stack
framework that does both.

218
00:12:47.841 --> 00:12:50.084
And we're using next JS so
the answer is no,

219
00:12:50.084 --> 00:12:53.630
this is not just me doing it in
the courses I think it's great.

220
00:12:53.630 --> 00:12:57.811
Now this is exactly how you would do in
a production if you're using next JS.

221
00:12:57.811 --> 00:13:01.624
You will put Prisma right here because
next JS is a full stack framework,

222
00:13:01.624 --> 00:13:02.999
it's not just front end,

223
00:13:02.999 --> 00:13:06.826
it's also back end as you see in
the Pages folder there's an API folder.

224
00:13:06.826 --> 00:13:10.836
And when we get to this you'll realize
every one of these files in here

225
00:13:10.836 --> 00:13:14.568
is a serverless function that we can
use as a URL that we can hit and

226
00:13:14.568 --> 00:13:18.258
they can access the database and
the front end can talk to that.

227
00:13:18.258 --> 00:13:22.287
We can also use the database directly
aside the components as well without even

228
00:13:22.287 --> 00:13:23.516
going through the API.

229
00:13:23.516 --> 00:13:25.595
So there's different ways we can do that.

230
00:13:25.595 --> 00:13:27.156
On a traditional app, yeah,

231
00:13:27.156 --> 00:13:30.902
you probably might want to separate
out the back end from the front end so

232
00:13:30.902 --> 00:13:35.024
there's clear concerns, but you might
also have your own mono repo as well and

233
00:13:35.024 --> 00:13:39.050
have everything there and
then just deploy them separately.

234
00:13:39.050 --> 00:13:42.482
But initially when I was making
this course, I did do that,

235
00:13:42.482 --> 00:13:45.433
I was gonna just have
a regular react front end, and

236
00:13:45.433 --> 00:13:49.670
then have like a node express or
pacify back in with Prisma or something.

237
00:13:49.670 --> 00:13:53.090
But then I realized that that's actually
not how I would build the app today.

238
00:13:53.090 --> 00:13:57.647
I actually would use something like
next JS and just build a full stack app.

239
00:13:57.647 --> 00:14:01.879
Because for me, there's just less overhead
I can deploy to one platform versus two

240
00:14:01.879 --> 00:14:04.729
different platforms, and
all my code lives together.

241
00:14:04.729 --> 00:14:08.642
And the sweet thing with Prisma is
that you get those type checks.

242
00:14:08.642 --> 00:14:11.401
So I really wanna be able to
use that inside of Next.js.

243
00:14:11.401 --> 00:14:13.782
So if it had a different repo,
I don't get that.

244
00:14:13.782 --> 00:14:17.146
So, yeah this is actually the way
you would do with next JS, so

245
00:14:17.146 --> 00:14:21.353
if you go read the guides with next JS and
Prisma or either one of the websites,

246
00:14:21.353 --> 00:14:24.239
this is exactly how they
would teach you how to do it.

247
00:14:24.239 --> 00:14:28.630
All right, there we go, duration and
then, what else does a song need?

248
00:14:28.630 --> 00:14:31.670
I think we forgot one
important thing on a song.

249
00:14:31.670 --> 00:14:32.945
Song needs a URL.

250
00:14:32.945 --> 00:14:33.890
How are we gonna play it?

251
00:14:33.890 --> 00:14:35.159
So song needs a URL.

252
00:14:35.159 --> 00:14:36.835
We're gonna add a string to that.

253
00:14:39.732 --> 00:14:41.793
I'm also gonna do a db push again.

254
00:14:41.793 --> 00:14:46.861
Every time I change the schema I'm doing
a push until I feel pretty confident

255
00:14:46.861 --> 00:14:51.620
with it, until I do a migrate, so
I'll do a push again cuz I added a URL.

256
00:14:51.620 --> 00:14:56.515
That'll generate the schema again, and
then now I'm gonna go back to my seed.

257
00:14:56.515 --> 00:15:01.461
And you can see this thing is freaking
out, it's like, you need a URL here,

258
00:15:01.461 --> 00:15:03.430
which I think is so cool.

259
00:15:03.430 --> 00:15:05.750
So we need that.

260
00:15:05.750 --> 00:15:09.680
So I'm gonna say song.URL.

261
00:15:10.880 --> 00:15:11.750
There we go.

262
00:15:11.750 --> 00:15:12.930
So now we got a URL here.

263
00:15:14.270 --> 00:15:15.010
And I think that's pretty dope.

