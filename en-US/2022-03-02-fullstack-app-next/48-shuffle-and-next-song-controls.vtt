WEBVTT

1
00:00:00.150 --> 00:00:04.109
Now we need to sync up that music with
all the UI that we had previously

2
00:00:04.109 --> 00:00:05.021
in the player.

3
00:00:05.021 --> 00:00:09.324
We're talking about the seeking, and
the playing and the pausing, the duration,

4
00:00:09.324 --> 00:00:10.180
all that stuff.

5
00:00:10.180 --> 00:00:13.790
So it's gonna be a lot of intricate
details that go into this.

6
00:00:13.790 --> 00:00:17.660
And by no means this is not the only way
to do this, there's probably better ways.

7
00:00:17.660 --> 00:00:21.584
If you see some better ways, you all know
how I am, let me know, I'm human, and

8
00:00:21.584 --> 00:00:25.760
we can have a conversation, and we might
be able to learn something together today.

9
00:00:25.760 --> 00:00:30.492
So with that being said,
let's hop in to the player.

10
00:00:33.459 --> 00:00:38.576
So a couple things we wanna do is one,
we need to grab

11
00:00:38.576 --> 00:00:44.290
a reference to the native
JavaScript Howler instance.

12
00:00:44.290 --> 00:00:50.410
And we can do that by attaching
a reference to the ReactHowler component.

13
00:00:50.410 --> 00:00:54.350
In order to do that we
need to make a reference

14
00:00:54.350 --> 00:00:58.510
object using the use ref
hook inside of React.

15
00:00:58.510 --> 00:01:00.116
So that's what we're gonna do, so

16
00:01:00.116 --> 00:01:03.608
we're gonna go in React at the top right
here where all of our other hooks are.

17
00:01:03.608 --> 00:01:07.197
And we're gonna make another,
I guess you could say hook, but

18
00:01:07.197 --> 00:01:09.036
it's gonna be for a reference.

19
00:01:09.036 --> 00:01:13.722
And I'm just gonna call this the soundRef,
and this is gonna equals useRef.

20
00:01:13.722 --> 00:01:16.665
I'm just gonna set the default to null,
instead of starting value,

21
00:01:16.665 --> 00:01:17.537
the initial value.

22
00:01:19.732 --> 00:01:24.295
And then all we got to go do
is attach that reference to

23
00:01:24.295 --> 00:01:27.527
the ReactHowler using the ref prop.

24
00:01:27.527 --> 00:01:33.036
So we gof to ReactHowler, we can say ref,
and then we can say soundRef.

25
00:01:33.036 --> 00:01:35.613
So now we can access the native

26
00:01:35.613 --> 00:01:40.155
ReactHowler instance using
the soundRef objects.

27
00:01:40.155 --> 00:01:44.093
But yeah, let's work on
getting everything to sync up,

28
00:01:44.093 --> 00:01:47.795
the playing and the stopping,
and things like that.

29
00:01:47.795 --> 00:01:50.676
In fact, actually, I think the playing and
stopping probably already works,

30
00:01:50.676 --> 00:01:53.514
if you you click the Play and Pause,
because we already have it synced here, so

31
00:01:53.514 --> 00:01:54.735
that probably works.

32
00:01:54.735 --> 00:01:57.792
But yeah, we're gonna hook up the Next
buttons, the Previous buttons,

33
00:01:57.792 --> 00:01:58.495
all that stuff.

34
00:01:58.495 --> 00:02:02.489
So I would say the first one I would
wanna tackle would probably be the,

35
00:02:02.489 --> 00:02:07.755
let's do the Next buttons, the Previous
buttons, and then we'll handle the OnEnd.

36
00:02:07.755 --> 00:02:11.005
So when a song ends,
it goes to the next song automatically.

37
00:02:11.005 --> 00:02:15.451
So I say, let's do that, and then we can
talk about duration and the seeking, and

38
00:02:15.451 --> 00:02:19.460
stuff like that, cuz I think
that's a little more difficult.

39
00:02:19.460 --> 00:02:22.890
So for the buttons,
let's look at the previous button.

40
00:02:22.890 --> 00:02:27.776
So for here we're gonna do an onClick,
and we need it to basically go

41
00:02:27.776 --> 00:02:32.730
back to a previous song based off
the list of songs that we had.

42
00:02:32.730 --> 00:02:35.860
So in order to do that, what we're gonna
do is we're gonna make a call back for

43
00:02:35.860 --> 00:02:37.340
a couple of things.

44
00:02:37.340 --> 00:02:40.980
We're gonna make one for next song,
we're gonna make one for previous song.

45
00:02:40.980 --> 00:02:45.837
So we're gonna come in here, we're gonna
say const, I'm just gonna say prevSong,

46
00:02:45.837 --> 00:02:46.380
like so.

47
00:02:47.920 --> 00:02:51.384
And then I'm gonna say
const nextSong like this.

48
00:02:53.672 --> 00:02:56.573
And if for the previous song, all we're
really gonna do is set the index because

49
00:02:56.573 --> 00:02:58.880
that's how we're keeping track
of what song is being played.

50
00:02:58.880 --> 00:03:02.820
We're gonna say setIndex, and
because we need the current index to set

51
00:03:02.820 --> 00:03:06.670
the next index we're gonna do
a call back in this set call.

52
00:03:06.670 --> 00:03:13.208
And we're just gonna say, hey, is the
current index greater than 0 basically?

53
00:03:13.208 --> 00:03:16.825
If it is, then just subtract 1 from it.

54
00:03:16.825 --> 00:03:20.486
If it is 0, then go back to
the end of the playlist and

55
00:03:20.486 --> 00:03:23.834
play the song at the end,
so it loops back over.

56
00:03:23.834 --> 00:03:28.263
So that way you're always playing that,
so we'll say songs.length- 1.

57
00:03:32.937 --> 00:03:35.100
So this state would be a number,
it'll be an index.

58
00:03:35.100 --> 00:03:38.181
So we're saying hey, if the index is,
cuz 0 is a falsie value,

59
00:03:38.181 --> 00:03:42.440
so if this is greater than 0 then subtract
1, that'll give us the previous song.

60
00:03:42.440 --> 00:03:46.191
So if it is 0,
then we wanna loop back over basically,

61
00:03:46.191 --> 00:03:48.569
go back to the end of the playlist.

62
00:03:48.569 --> 00:03:49.949
And then for the next song,

63
00:03:49.949 --> 00:03:53.910
it's gonna be a little more difficult
because we have to account for shuffle.

64
00:03:55.000 --> 00:03:56.808
I don't think people account for,

65
00:03:56.808 --> 00:04:00.491
I've never used a music player that
accounted for shuffle on previous.

66
00:04:00.491 --> 00:04:01.950
Usually, even if it's shuffle,

67
00:04:01.950 --> 00:04:04.325
if you hit back it goes back
to the song that just played.

68
00:04:04.325 --> 00:04:08.007
So we didn't have to account for shuffle,
although, I mean, it's your music player,

69
00:04:08.007 --> 00:04:10.087
you could also shuffle on
previous if you want to.

70
00:04:10.087 --> 00:04:15.004
I wouldn't expect that to happen, so
we don't account for shuffle on Previous,

71
00:04:15.004 --> 00:04:19.083
but on Next if I hit Next and
Shuffle is on, I do expect it to shuffle.

72
00:04:19.083 --> 00:04:23.460
So we can't just increase the index by 1,
we actually have to account for

73
00:04:23.460 --> 00:04:25.520
that shuffle and figure that out.

74
00:04:25.520 --> 00:04:29.580
So what I'm gonna do here
is almost the same thing.

75
00:04:29.580 --> 00:04:31.447
We're gonna say setIndex,

76
00:04:31.447 --> 00:04:36.668
we need to call back because we need the
current index to make sure that's good.

77
00:04:36.668 --> 00:04:41.158
And this is very important because when
we get into animating the SeekBar,

78
00:04:41.158 --> 00:04:46.004
we're gonna be using animation frames
that run whatever speed your monitor is,

79
00:04:46.004 --> 00:04:48.660
likely 60 hertz, or 60 times a second.

80
00:04:48.660 --> 00:04:53.735
So we do wanna make sure we get the
current state, so this callback is very

81
00:04:53.735 --> 00:04:59.000
important, and we want to check for
if you are in a shuffling state or not.

82
00:04:59.000 --> 00:05:01.349
So we are keeping track of
the shuffle with the state, right?

83
00:05:01.349 --> 00:05:04.532
We have that use state up here for
shuffle.

84
00:05:04.532 --> 00:05:10.648
So we could just check that, and
hopefully that'll work, wink, wink.

85
00:05:10.648 --> 00:05:14.417
So we'll say, if shuffle and we can say,

86
00:05:14.417 --> 00:05:19.080
if shuffle then we need
to do some shuffle logic.

87
00:05:19.080 --> 00:05:19.900
We'll come back to that.

88
00:05:21.570 --> 00:05:25.670
And then, else, we'll do something else.

89
00:05:25.670 --> 00:05:30.409
So if not a shuffle, then really all
we gotta do is just return states.

90
00:05:31.480 --> 00:05:36.727
If state equals the last thing in
the array, which'll be songs.length- 1,

91
00:05:36.727 --> 00:05:41.370
so if it's the last thing in the array,
then we wanna reset back to 0.

92
00:05:41.370 --> 00:05:44.329
So that means if you go Next and
you're at the last thing in the playlist,

93
00:05:44.329 --> 00:05:47.670
go back to the first thing, so
that'll be the zeroth index.

94
00:05:47.670 --> 00:05:51.059
If not, then just return that index + 1,
so just go up by 1.

95
00:05:58.575 --> 00:06:00.225
And then for the shuffle logic,

96
00:06:00.225 --> 00:06:03.210
we basically want to do
the same thing we're doing now.

97
00:06:03.210 --> 00:06:05.467
So if you ever learned recursion,
you're like, wow,

98
00:06:05.467 --> 00:06:07.100
I've never had to use it before.

99
00:06:07.100 --> 00:06:12.270
This is the first time in your life you're
ever gonna use recursion is shuffling.

100
00:06:12.270 --> 00:06:15.942
So what we're gonna do here is
we're gonna say next is gonna be,

101
00:06:15.942 --> 00:06:19.140
we gotta get a random,
shuffling is literally random.

102
00:06:19.140 --> 00:06:24.026
So we'll just say Math.floor, Math.random,

103
00:06:24.026 --> 00:06:29.390
and we want to multiply
that times songd.length.

104
00:06:29.390 --> 00:06:32.401
So that'll give us a random
number between zero and

105
00:06:32.401 --> 00:06:34.990
whatever the length of the array is.

106
00:06:34.990 --> 00:06:39.531
But if we get back an index
that's already the current index,

107
00:06:39.531 --> 00:06:42.250
then it'll just play the same song.

108
00:06:42.250 --> 00:06:43.840
So we have to account for that.

109
00:06:43.840 --> 00:06:49.715
So now we have to say, well,
if the next index equals the current one,

110
00:06:49.715 --> 00:06:54.209
then you need to do this again,
call next song again.

111
00:06:54.209 --> 00:06:57.808
And then at the end just return next.

112
00:07:01.255 --> 00:07:04.192
The TypeScript is complaining because,
what is it saying?

113
00:07:04.192 --> 00:07:06.934
Argument type number,
number void is not assignable.

114
00:07:06.934 --> 00:07:11.664
Yeah, we can just ignore that TypeScript
situation there, we should be good to go.

115
00:07:11.664 --> 00:07:14.520
We have our return statement there so
it's not a big deal.

