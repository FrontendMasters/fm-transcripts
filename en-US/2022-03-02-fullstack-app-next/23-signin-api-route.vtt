WEBVTT

1
00:00:00.130 --> 00:00:06.733
So we'll ramp up and pick up where we left
off which was I believe I was on step 4,

2
00:00:06.733 --> 00:00:11.183
and I pushed up the signup
off API function to step 4.

3
00:00:11.183 --> 00:00:16.302
So we'll continue with that, and move into
making the sign in API function which

4
00:00:16.302 --> 00:00:21.194
is pretty similar to sign up, except
we're not creating a user, we're just

5
00:00:21.194 --> 00:00:26.550
checking to see if the user exists, and
then issuing the same token as a cookie.

6
00:00:26.550 --> 00:00:28.420
So very, very similar.

7
00:00:28.420 --> 00:00:32.567
So if you wanna head over
to our code as a refresher,

8
00:00:32.567 --> 00:00:37.677
all of our API routes are gonna
be in the pages slash API folder,

9
00:00:37.677 --> 00:00:41.590
and we should already
have a sign up TS here.

10
00:00:41.590 --> 00:00:45.765
This hello js that got generated, you
could totally delete it, we don't need it,

11
00:00:45.765 --> 00:00:46.690
it's up to you.

12
00:00:46.690 --> 00:00:51.513
That's just what got generated with
the create next app thing that we did

13
00:00:51.513 --> 00:00:55.245
the beginning of the course so
we don't really need it.

14
00:00:55.245 --> 00:01:01.905
I am gonna make a new file here for
sign in, I'm gonna call that signin,ts.

15
00:01:01.905 --> 00:01:06.558
And again like I said the strategy for
this one is we're gonna expect an email

16
00:01:06.558 --> 00:01:11.209
and a password to be sent up to the API,
we're gonna check that email to see if

17
00:01:11.209 --> 00:01:14.843
there's a user in the database
by that email, if there is,

18
00:01:14.843 --> 00:01:19.382
then we're gonna compare the hash
passwords and see if they are the same.

19
00:01:19.382 --> 00:01:22.982
If they are, this person is who they
say they are, they are a valid user,

20
00:01:22.982 --> 00:01:26.677
generate them a token,
set it in the cookie, go on with our day.

21
00:01:26.677 --> 00:01:30.161
If they are not, we're gonna for a while,
like, obviously you gave us the wrong

22
00:01:30.161 --> 00:01:32.957
email password combination so
you cannot sign in.

23
00:01:32.957 --> 00:01:34.617
And that's pretty much
what we're gonna do.

24
00:01:34.617 --> 00:01:37.350
So again, it's very similar to sign up but
not quite.

25
00:01:38.390 --> 00:01:42.719
So let's go ahead and get started with
this, we're gonna import bcrypts and

26
00:01:42.719 --> 00:01:45.720
the ccrypt and
just like we did in the sign up.

27
00:01:45.720 --> 00:01:49.310
Again, if you're using bcrypt JS,
it should be the same API.

28
00:01:49.310 --> 00:01:52.771
So should be able to follow
here pretty similar.

29
00:01:52.771 --> 00:01:57.976
And then we're gonna import the JSON
web token from JSON Web Token or

30
00:01:57.976 --> 00:02:03.010
people pronounce it jot,
I don't know how JWT sounds out to jot.

31
00:02:04.430 --> 00:02:08.010
But, [LAUGH] when you here someone say it
jot, that's what they're talking about.

32
00:02:08.010 --> 00:02:09.130
They're talking about a JSON Web Token.

33
00:02:10.370 --> 00:02:14.660
A couple years ago, someone said
that to me, I was like, a what?

34
00:02:14.660 --> 00:02:16.835
A JWT, and I was like,
no, jot, I'm like, okay,

35
00:02:16.835 --> 00:02:19.170
I guess that's what we're calling it.

36
00:02:19.170 --> 00:02:21.850
So yeah, that's the thing.

37
00:02:21.850 --> 00:02:26.551
And then we're gonna import our Prisma
clients that we created inside of our lib,

38
00:02:26.551 --> 00:02:27.790
so we'll have that.

39
00:02:29.330 --> 00:02:31.670
And then we're just
gonna export a function.

40
00:02:31.670 --> 00:02:35.555
So export default async function,

41
00:02:35.555 --> 00:02:40.481
actually see export defaults, there we go.

42
00:02:40.481 --> 00:02:43.570
We don't really need a name like that,
we'll just do error function.

43
00:02:48.040 --> 00:02:54.370
There we go and just like every other API,
we get requests, we get a response.

44
00:02:54.370 --> 00:02:58.040
I'm going to type check them so
I'm gonna say Next API requests.

45
00:02:58.040 --> 00:03:02.711
That way we can get some
nice autocomplete and code,

46
00:03:02.711 --> 00:03:07.920
code intelligence,
whatever you wanna call it.

47
00:03:07.920 --> 00:03:12.301
And then the next API response here.

48
00:03:12.301 --> 00:03:13.340
Cool.

49
00:03:13.340 --> 00:03:15.499
So because I'm making an API,

50
00:03:15.499 --> 00:03:19.898
I get to set the rules on what I
expect to be posted to this route so

51
00:03:19.898 --> 00:03:25.045
because I am making the sign in,
I'm saying you must send me an email, and

52
00:03:25.045 --> 00:03:31.350
you must send me a password on the body so
I'm gonna say given that wrecked up body.

53
00:03:31.350 --> 00:03:33.668
So we got the email and password here, and

54
00:03:33.668 --> 00:03:37.700
then the next thing is let's try
to find a user with this email.

55
00:03:37.700 --> 00:03:40.629
And if we look at our
schema just as a refresher,

56
00:03:40.629 --> 00:03:43.060
we know that users have a unique email.

57
00:03:43.060 --> 00:03:46.800
So it's safe to look up the user by
email because they don't share that.

58
00:03:46.800 --> 00:03:48.440
So we should be pretty good here.

59
00:03:48.440 --> 00:03:54.396
So now I'm gonna do that, I'm gonna say
const user equals await prisma.user,

60
00:03:54.396 --> 00:03:58.951
get that nice autocomplete dot,
and we wanna do find unique,

61
00:03:58.951 --> 00:04:04.030
find unique is like fine one if
you've ever used any other ORM that's

62
00:04:04.030 --> 00:04:09.198
basically what that is, except
the only query parameters that you can

63
00:04:09.198 --> 00:04:14.640
pass to find unique have to be fields
that are also unique on the schema.

64
00:04:14.640 --> 00:04:17.217
So in this case, for the user,

65
00:04:17.217 --> 00:04:23.320
the user only has two unique fields
that's in ID and that's email.

66
00:04:23.320 --> 00:04:28.403
So we couldn't search for a user using
the find unique by I don't know,

67
00:04:28.403 --> 00:04:31.977
playlists, for
some reason we could not do that.

68
00:04:31.977 --> 00:04:35.420
We would have to use a fine mini and
do it that way.

69
00:04:35.420 --> 00:04:40.610
Because it's not indexed and running an
index queries can be really, really slow.

70
00:04:40.610 --> 00:04:44.740
You just scan the whole database looking
for one thing, so you don't want that.

71
00:04:44.740 --> 00:04:48.571
That is where like indexing strategies and
that's where it gets complicated.

72
00:04:48.571 --> 00:04:51.993
So if your full stack are fine and
you probably won't have to deal with that,

73
00:04:51.993 --> 00:04:54.400
usually some back end person
will probably do that but

74
00:04:54.400 --> 00:04:56.714
if you're wondering that's
where that happens.

75
00:04:56.714 --> 00:04:59.645
And then we're gonna use
the where property here and

76
00:04:59.645 --> 00:05:02.119
then we're gonna say where email is email.

77
00:05:02.119 --> 00:05:05.371
So find this user where email is email.

78
00:05:05.371 --> 00:05:07.250
And then we're gonna do a check.

79
00:05:07.250 --> 00:05:12.567
So if we get a user, and
we're gonna check that user's password

80
00:05:12.567 --> 00:05:18.477
versus the password hash, so
we'll say, and bcrypt.compareSync,

81
00:05:18.477 --> 00:05:24.187
and the first argument is gonna be
the the password that they sent up so

82
00:05:24.187 --> 00:05:28.913
the un-hash password and
then the next argument is gonna

83
00:05:28.913 --> 00:05:33.444
be the hashed password which
will be user.password,

84
00:05:33.444 --> 00:05:38.217
so look at that If that is the case and
we do get that,

85
00:05:38.217 --> 00:05:41.336
we're pretty much gonna do
the same thing we did in signup.

86
00:05:41.336 --> 00:05:48.319
We're gonna create a job, set it to the
cookie, and then send that cookie back.

87
00:05:48.319 --> 00:05:52.815
Well, I guess cookies always sent
back we set them on the header and

88
00:05:52.815 --> 00:05:56.931
then we're just gonna send the user
back to us on a front end.

89
00:05:56.931 --> 00:06:01.493
So let's do that, so
we'll say const token equals jwt.sign,

90
00:06:01.493 --> 00:06:06.224
there we go, so jwt.sign and
that takes in of a couple arguments,

91
00:06:06.224 --> 00:06:10.531
the first one is gonna be
the payload that we wanna create, so

92
00:06:10.531 --> 00:06:13.910
in this case it's gonna
be an object with an ID,

93
00:06:13.910 --> 00:06:18.670
that'll be the user's ID cuz we
wanna be able to verify that user.

94
00:06:18.670 --> 00:06:21.912
Might as well throw the email
in there that's unique, and

95
00:06:21.912 --> 00:06:26.230
then we'll put a time property on here
as date dot now as when we created this.

96
00:06:26.230 --> 00:06:29.400
Then the next one is gonna
be the secret for your JWT.

97
00:06:29.400 --> 00:06:32.700
Again, you probably wanna put this
in an environment variable so

98
00:06:32.700 --> 00:06:35.660
you can not have it exposed
in plain text and reuse it.

99
00:06:35.660 --> 00:06:40.140
I wanna make sure I'm using the same one,
I just used the word hello here, so

100
00:06:40.140 --> 00:06:41.751
you have to do the same one.

101
00:06:41.751 --> 00:06:43.690
So I'm gonna do that, hello.

102
00:06:43.690 --> 00:06:48.612
And then the next one is just some
options and I could say, expiresIn,

103
00:06:48.612 --> 00:06:53.543
I think we did eight hours to the last
one, pretty sure, let me check.

104
00:06:53.543 --> 00:06:55.420
Yeah, we did eight hours.

105
00:06:55.420 --> 00:06:57.730
So I'm gonna do the same thing,
keep it consistent.

106
00:06:58.880 --> 00:07:00.777
So there we go, we got our token and

107
00:07:00.777 --> 00:07:03.570
the next thing is to set
that token on the header.

108
00:07:03.570 --> 00:07:06.000
So we say res.setheader, and

109
00:07:06.000 --> 00:07:11.047
the header that we wanna use is
called Set-Cookie like that, so

110
00:07:11.047 --> 00:07:16.841
we can set the cookie, and
then we're gonna use the cookie.serialize,

111
00:07:16.841 --> 00:07:20.780
which is a function that
takes in a bunch of stuff.

112
00:07:20.780 --> 00:07:25.349
So the first thing is we wanna pass
in the name of the cookie, and

113
00:07:25.349 --> 00:07:29.870
I believe we called it,
there we go, TRAX_ACCESS_TOKEN.

114
00:07:29.870 --> 00:07:33.798
So like that, in fact, actually I'm just
gonna copy this whole config here cuz it's

115
00:07:33.798 --> 00:07:35.920
literally the same thing.

116
00:07:35.920 --> 00:07:36.939
So we're gonna go back.

117
00:07:38.825 --> 00:07:39.430
Here we go.
So

118
00:07:39.430 --> 00:07:41.751
we're gonna pass in
the name of the cookie,

119
00:07:41.751 --> 00:07:45.722
followed by the token as the value of
the cookie underneath these options.

120
00:07:45.722 --> 00:07:48.374
And then to go over the options over time,
so

121
00:07:48.374 --> 00:07:52.112
HTTP only just means you can only
access this cookie via HTTP.

122
00:07:52.112 --> 00:07:56.030
So basically you won't be able to access
it on the front end through JavaScript.

123
00:07:56.030 --> 00:07:57.330
So that makes it a little more secure.

124
00:07:58.970 --> 00:08:01.241
Max age is how long
the cookie is valid for,

125
00:08:01.241 --> 00:08:04.035
I made it eight hours the same
as the JWT is valid for.

126
00:08:04.035 --> 00:08:08.650
Path is like, where or what site like
what routes have access to this cookie,

127
00:08:08.650 --> 00:08:10.287
just means the whole site.

128
00:08:10.287 --> 00:08:13.505
Same site, still don't know what that is,
need to look that up, but

129
00:08:13.505 --> 00:08:14.953
I've always been doing that.

130
00:08:14.953 --> 00:08:16.820
If anyone knows what that is let me know.

131
00:08:16.820 --> 00:08:18.173
You know what that is?

132
00:08:18.173 --> 00:08:21.871
&gt;&gt; [INAUDIBLE] Do it like when you
click on a link and whether or

133
00:08:21.871 --> 00:08:25.184
not it should share the cookie
to that third party,

134
00:08:25.184 --> 00:08:29.653
lax is like the base default and
then the other parameter is strict and

135
00:08:29.653 --> 00:08:34.847
strict is like it will only go to a first
party site, we will not pass the cookie.

136
00:08:34.847 --> 00:08:38.913
&gt;&gt; I think that's funny that it's called
lax, [LAUGH] cuz it's like relax,

137
00:08:38.913 --> 00:08:40.180
it's just lax.

138
00:08:40.180 --> 00:08:43.281
&gt;&gt; Cuz I was confused as well,
I was like what does is stand for?

139
00:08:43.281 --> 00:08:45.120
I mean, like, I'm super lax.

140
00:08:45.120 --> 00:08:48.820
&gt;&gt; Yeah, I'm lax, so
lax cookie, I like it.

141
00:08:48.820 --> 00:08:50.560
Okay, I learned something today.

142
00:08:50.560 --> 00:08:55.485
And then secure should be
encrypted only in production cuz

143
00:08:55.485 --> 00:08:59.310
we're not using HTTPS on localhost.

144
00:08:59.310 --> 00:09:02.830
So once we do that,
then we can just send the user back.

145
00:09:02.830 --> 00:09:05.350
So just be rest JSON and then user.

146
00:09:06.460 --> 00:09:12.307
So we did all that if these conditions are
true, if these conditions are not true,

147
00:09:12.307 --> 00:09:17.930
well, we just wanna send back a 401 and
then typically I send back an error.

148
00:09:17.930 --> 00:09:24.033
So I'll say, set status, or
I think it's just status, there we go,

149
00:09:24.033 --> 00:09:29.825
401, and then I'll say res.json error,
and I'll say like,

150
00:09:29.825 --> 00:09:35.631
I don't know, email or
password is wrong, something like that.

151
00:09:35.631 --> 00:09:37.370
Whatever you want it back, it's your app.

152
00:09:37.370 --> 00:09:40.390
And that's it, that's sign in.

153
00:09:40.390 --> 00:09:42.837
So with this,
we should be able to sign in and

154
00:09:42.837 --> 00:09:45.460
get a cookie after we've
already signed up.

155
00:09:45.460 --> 00:09:49.243
We can test this by
signing up obviously and

156
00:09:49.243 --> 00:09:54.601
then trying to sign in, or
we get this used is the credentials

157
00:09:54.601 --> 00:09:59.014
of the seated user that we
created which was like,

158
00:09:59.014 --> 00:10:04.191
here we go, so we can use these
credentials to test it out.

159
00:10:04.191 --> 00:10:10.415
I'm gonna use http post to localhost
3000 slash API slash sign in,

160
00:10:10.415 --> 00:10:15.510
and then for my email I'm gonna
use the one that we seed it.

161
00:10:15.510 --> 00:10:20.202
I think I still have that in my database,
I can verify drop my database yesterday or

162
00:10:20.202 --> 00:10:22.252
not, but we're about to find out.

163
00:10:22.252 --> 00:10:26.546
So usertest.com, and
then password was just password, so

164
00:10:26.546 --> 00:10:29.672
we'll try to sign in here,
and there we go.

165
00:10:29.672 --> 00:10:33.480
We were able to sign in,
we got back password, and

166
00:10:33.480 --> 00:10:39.935
you can see the cookie was set here, track
access token, so sign in looks to be good.

167
00:10:39.935 --> 00:10:43.161
We can test this by just goofing
up the password, right click and

168
00:10:43.161 --> 00:10:44.200
see what happens.

169
00:10:44.200 --> 00:10:48.100
So we goof that up, you can see we
got email or password is wrong.

170
00:10:48.100 --> 00:10:53.633
And then if I goof up the email,
We can see we get the same thing,

171
00:10:53.633 --> 00:10:55.560
email or password is wrong.

172
00:10:55.560 --> 00:10:58.237
Like I said,
it's pretty similar to sign up,

173
00:10:58.237 --> 00:11:01.440
it's not that difficult
as far as a new concepts.

174
00:11:01.440 --> 00:11:03.830
Literally, the same thing it
was just not creating a user.

