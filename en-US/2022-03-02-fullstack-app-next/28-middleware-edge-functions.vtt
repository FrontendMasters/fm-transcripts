WEBVTT

1
00:00:00.070 --> 00:00:06.437
So anyway, Next.js 12, introduce
their middleware edge functions which

2
00:00:06.437 --> 00:00:12.231
again sit in between the actual API
service functions and your client.

3
00:00:12.231 --> 00:00:15.367
So that way, they can intercept
any API call and do something.

4
00:00:15.367 --> 00:00:20.158
In this case, we're gonna make an edge
function that checks the cookie to

5
00:00:20.158 --> 00:00:22.260
see if you have an access token.

6
00:00:22.260 --> 00:00:25.450
If you don't, we're not even going to
go to the server to render the page,

7
00:00:25.450 --> 00:00:27.489
we're just going to say,
no, get out of here.

8
00:00:27.489 --> 00:00:31.990
We're going to redirect you, so we don't
even waste resources going to our server

9
00:00:31.990 --> 00:00:34.510
or anything like that,
which is really cool.

10
00:00:35.720 --> 00:00:41.768
And if you go to next AS's website
they have really good examples,

11
00:00:41.768 --> 00:00:45.764
actually, I can just
show you some of them.

12
00:00:45.764 --> 00:00:47.449
Because I think it's really cool,

13
00:00:47.449 --> 00:00:51.540
they have really good examples on what
you can do with some of the middleware.

14
00:00:51.540 --> 00:00:55.497
So authentication, which is what we're
doing, bot protection, redirects,

15
00:00:55.497 --> 00:00:58.595
rewrites, handling unsupported browsers,
feature flags.

16
00:00:58.595 --> 00:01:01.723
AV tests, analytics,
eye teen, logging, there's so

17
00:01:01.723 --> 00:01:06.370
many different things you can do on
the edge that I think is really cool.

18
00:01:06.370 --> 00:01:07.458
So take a look at that, and

19
00:01:07.458 --> 00:01:10.640
we'll be using that cuz I think it's
a great use case to do authentication.

20
00:01:12.500 --> 00:01:17.609
So to get started with that,
it's actually quite simple,

21
00:01:17.609 --> 00:01:23.240
all we have to do is make a middleware
file in our pages directory.

22
00:01:23.240 --> 00:01:28.478
So what we'll do is we'll go
to our pages directory, and

23
00:01:28.478 --> 00:01:33.948
we'll make a new file,
we'll call it _middleware.ts.

24
00:01:33.948 --> 00:01:36.584
And again, we put an underscore
in front of it, otherwise,

25
00:01:36.584 --> 00:01:40.010
it would literally make a route
called middleware, we don't want.

26
00:01:40.010 --> 00:01:43.196
So Next.js has a convention where you put
an underscore on some of these things and

27
00:01:43.196 --> 00:01:44.530
knows what to do.

28
00:01:44.530 --> 00:01:46.006
The way the middleware works is,

29
00:01:46.006 --> 00:01:48.438
you can put a middleware on
any level inside the pages.

30
00:01:48.438 --> 00:01:51.572
You can even put one here in the API, if
you want, and make a middleware for that.

31
00:01:51.572 --> 00:01:53.971
If I put it right on the route,
it's going to,

32
00:01:53.971 --> 00:01:58.630
this middleware is going to get executed
before any one of these requests happen.

33
00:01:58.630 --> 00:02:01.812
So before any one of these requests
actually get activated or targeted,

34
00:02:01.812 --> 00:02:04.160
this middleware is going to fire first.

35
00:02:04.160 --> 00:02:06.990
So it's going to handle every
single request coming in.

36
00:02:06.990 --> 00:02:11.778
So we need to write some code to only
protect the pages that we want to protect,

37
00:02:11.778 --> 00:02:13.850
and we'll kind of go from there.

38
00:02:16.120 --> 00:02:20.604
So what we'll do is we'll say, actually,
we don't really need to import anything

39
00:02:20.604 --> 00:02:23.400
right now,
let's see what some TypeScript stuff.

40
00:02:23.400 --> 00:02:24.248
So we'll say,

41
00:02:24.248 --> 00:02:28.112
first thing is we need to create a list
of pages that we want to protect.

42
00:02:28.112 --> 00:02:30.931
Because remember, this middleware is
going to run on every single route.

43
00:02:30.931 --> 00:02:35.594
And we don't want to block every
single route, like sign in, sign up,

44
00:02:35.594 --> 00:02:37.237
we don't need to block.

45
00:02:37.237 --> 00:02:40.277
I guess we could block the API stuff but
we don't need to cuz they're all,

46
00:02:40.277 --> 00:02:43.140
they all they have their own handler
built into one that we just made.

47
00:02:43.140 --> 00:02:46.776
But I guess you could block it even
before that if you really wanted to,

48
00:02:46.776 --> 00:02:49.377
save half of a penny half
of a penny half of a penny.

49
00:02:49.377 --> 00:02:51.277
You could block it here on the edge,
I guess,

50
00:02:51.277 --> 00:02:54.340
maybe the edge is more expensive there,
I don't know.

51
00:02:54.340 --> 00:02:57.843
I know the cost analysis of that is but
you could if you wanted to.

52
00:02:57.843 --> 00:03:02.736
But I'm just gonna make
something called signed or

53
00:03:02.736 --> 00:03:07.643
signed and signed in pages or
something like that.

54
00:03:07.643 --> 00:03:11.917
It'll just be an array of all the pages
I want to protect on the edge, so

55
00:03:11.917 --> 00:03:13.810
I wanna protect the homepage.

56
00:03:13.810 --> 00:03:18.159
I wanna protect anything
that has playlist in it,

57
00:03:18.159 --> 00:03:23.030
anything that has library in it,
anything like that.

58
00:03:23.030 --> 00:03:28.476
So I'll do that, and
then all I'm gonna do is just export

59
00:03:28.476 --> 00:03:33.591
default a function,
I'm gonna call it middleware.

60
00:03:33.591 --> 00:03:37.692
And this thing, all it does is
taken takes in a request like this,

61
00:03:37.692 --> 00:03:39.718
it doesn't take any response.

62
00:03:39.718 --> 00:03:42.404
Because if you,
like I said this isn't actually so

63
00:03:42.404 --> 00:03:46.910
confusing cuz it's all in the same app,
this actually isn't in a node environment.

64
00:03:46.910 --> 00:03:50.240
Like the API functions are in
a node environment, and

65
00:03:50.240 --> 00:03:55.340
it's not in a front end environment,
like these components will be in.

66
00:03:55.340 --> 00:04:02.574
And it's also not in a node environment
like our seed script will be in,

67
00:04:02.574 --> 00:04:07.550
it's more like a,
what's the word I look for?

68
00:04:07.550 --> 00:04:10.705
If you ever made a web worker before,
it's in a web worker environment,

69
00:04:10.705 --> 00:04:14.840
that's the environment that, that's the
environment that edge functions run in.

70
00:04:14.840 --> 00:04:16.953
So if you've ever had
to make a web worker,

71
00:04:16.953 --> 00:04:19.848
you don't have access to a window or
something like that.

72
00:04:19.848 --> 00:04:23.276
You got access to these very low level
primitives, like a response object and

73
00:04:23.276 --> 00:04:26.351
a request object, and there's not
really a lot of things you can do.

74
00:04:26.351 --> 00:04:29.531
And that's intentional, so
those things can operate very fast,

75
00:04:29.531 --> 00:04:32.160
they don't load up a whole VM and
all this other stuff.

76
00:04:32.160 --> 00:04:37.155
So yeah, it's also a different
environment, so right now, we're Next.js.

77
00:04:37.155 --> 00:04:39.885
And we have all this code
living in one repo, but

78
00:04:39.885 --> 00:04:43.380
there's four different
environments that they all run in.

79
00:04:43.380 --> 00:04:46.411
And it's sometimes it's hard to tell,
but I think that's the feature

80
00:04:46.411 --> 00:04:49.250
of Next.js is that a lot of that
stuff is abstracted away from you.

81
00:04:49.250 --> 00:04:51.570
Because trying to do some
of that stuff your own and

82
00:04:51.570 --> 00:04:55.280
trying to connect it together,
you would just be building Next.js.

83
00:04:55.280 --> 00:04:58.794
So [LAUGH] just use this, okay, so

84
00:04:58.794 --> 00:05:04.702
now we wanna do is we wanna
say if signedinpages.find.

85
00:05:04.702 --> 00:05:09.652
And we'll get the page and

86
00:05:09.652 --> 00:05:16.408
if that page triple equals recdot.

87
00:05:16.408 --> 00:05:20.095
There's a property on our called next
URL that Next.js puts on there, and

88
00:05:20.095 --> 00:05:21.450
then there's a path name.

89
00:05:22.780 --> 00:05:24.114
So we get the path name, so

90
00:05:24.114 --> 00:05:27.715
that equals anything that's an RA
that means it should be protected.

91
00:05:27.715 --> 00:05:34.123
And then what we'll do is we'll say,
token equals rec.ookies.,

92
00:05:34.123 --> 00:05:39.990
and then the name of our cookie,
which was track access token.

93
00:05:42.430 --> 00:05:48.992
And then we'll say, if you don't have
a token, not it as a scary movie.

94
00:05:48.992 --> 00:05:54.999
[LAUGH] If you don't have a token, then
we're just gonna return next response,

95
00:05:54.999 --> 00:05:58.040
which I guess we do have to import that.

96
00:05:58.040 --> 00:06:01.725
So let's import that, next,

97
00:06:01.725 --> 00:06:05.977
give me some autocomplete, next,

98
00:06:05.977 --> 00:06:10.938
okay, imports, next, response from,

99
00:06:10.938 --> 00:06:16.340
I think it's next /server, there we go.

100
00:06:16.340 --> 00:06:19.176
So import, next response.redirect, so

101
00:06:19.176 --> 00:06:22.180
we're going to redirect
you back to sign in.

102
00:06:24.030 --> 00:06:26.205
If you try to go one of these pages and
you're not authorized.

103
00:06:32.214 --> 00:06:35.528
So all this happens on an edge locally,
it's just emulated,

104
00:06:35.528 --> 00:06:39.960
cuz obviously you don't have edge
functions on your computer locally.

105
00:06:39.960 --> 00:06:42.512
So locally,
it doesn't make a difference, but

106
00:06:42.512 --> 00:06:45.950
once you deploy it, this function
does get executed on the edge.

107
00:06:45.950 --> 00:06:49.275
I don't know exactly what versal
uses if they use Google or AWS or

108
00:06:49.275 --> 00:06:53.110
they made their own thing, but
this is actually really cool.

109
00:06:53.110 --> 00:06:56.859
I've used to use hash functions before,
all these distractions just came out and

110
00:06:56.859 --> 00:06:58.010
it was really hard to do.

111
00:06:58.010 --> 00:07:01.434
You would deploy something to
AWS at lambda at edge, and then

112
00:07:01.434 --> 00:07:05.883
wait 30 minutes for the propagate across
the world and then you could try it.

113
00:07:05.883 --> 00:07:09.891
It was terrible, you got to unzip
the file to go see the logs,

114
00:07:09.891 --> 00:07:14.698
it was terrible, this is just so
much cleaner, so it's come a long way.

115
00:07:14.698 --> 00:07:18.584
So you might have noticed that we're
not really checking for a user here,

116
00:07:18.584 --> 00:07:20.412
we're just checking for a token.

117
00:07:20.412 --> 00:07:23.426
That's because, again, we're not in node,
I can't use Prisma in here,

118
00:07:23.426 --> 00:07:25.512
I can't just import Prisma and
try to use it in here.

119
00:07:25.512 --> 00:07:30.776
Because this is not an old environment
of prisms not even available,

120
00:07:30.776 --> 00:07:34.830
there are storage options for
edge functions.

121
00:07:34.830 --> 00:07:37.121
What to do that that's
a whole another thing,

122
00:07:37.121 --> 00:07:39.782
I would take us a whole another
day to figure that out.

123
00:07:39.782 --> 00:07:44.318
Because we would find a way to take some
user information out of the postgres

124
00:07:44.318 --> 00:07:46.990
database and stored in this edge database.

125
00:07:46.990 --> 00:07:50.046
Or we're headed to use a serverless
database that works in both environments,

126
00:07:50.046 --> 00:07:53.180
which right now,
we're not using a service database.

127
00:07:53.180 --> 00:07:56.541
I don't think Prisma even works with
a lot of service databases right now.

128
00:07:56.541 --> 00:07:58.622
I don't know which ones they do,
which ones they don't even,

129
00:07:58.622 --> 00:08:00.000
that's a whole another discussion.

130
00:08:00.000 --> 00:08:02.971
That's actually why edge
functions are just now coming to

131
00:08:02.971 --> 00:08:05.710
primetime because it's like,
okay, this is cool.

132
00:08:05.710 --> 00:08:10.084
I can do all this stuff on the edge, but
how do I store things globally, right,

133
00:08:10.084 --> 00:08:12.357
and have them accessible immediately?

134
00:08:12.357 --> 00:08:15.017
And I was like, okay,
we're not there yet, so

135
00:08:15.017 --> 00:08:17.873
a lot of companies have key
value storage is on the edge.

136
00:08:17.873 --> 00:08:22.414
I know Cloudflare does, I think Next.js
has some options now, Redis and

137
00:08:22.414 --> 00:08:26.161
all these places are coming out
to make this thing possible.

138
00:08:26.161 --> 00:08:29.114
But yeah,
you can kind of do some of that stuff now,

139
00:08:29.114 --> 00:08:32.912
which is basically just like
a database with the HTTP interface.

140
00:08:32.912 --> 00:08:36.802
So imagine a server that had a REST API
just to interact with the database,

141
00:08:36.802 --> 00:08:39.399
that's what a lot of
service databases are now.

142
00:08:39.399 --> 00:08:42.789
That's what stitch was, MongoDB
stitch was like, we took Mongo, and

143
00:08:42.789 --> 00:08:44.156
we threw rest in front of it.

144
00:08:44.156 --> 00:08:48.446
Here's a rest, here's it, here's a service
database phase, when it's like, well,

145
00:08:48.446 --> 00:08:49.978
technically, it's a server.

146
00:08:49.978 --> 00:08:54.554
[LAUGH] So it's kind of weird, but
I could talk about that all day, so

147
00:08:54.554 --> 00:08:58.210
yeah, now we have middleware,
let's test it out.

148
00:08:58.210 --> 00:09:00.249
So what we can do is,
we don't have to add this anywhere,

149
00:09:00.249 --> 00:09:02.630
I don't have to do anything,
it's just gonna run.

150
00:09:02.630 --> 00:09:06.324
So what we can do is, first,
let me clear out my cookie,

151
00:09:06.324 --> 00:09:08.970
cuz I do have a cookie in there.

152
00:09:08.970 --> 00:09:13.715
And you can go there, you click on
a cookie, is click this button right here,

153
00:09:13.715 --> 00:09:16.140
says, click on all cookies.

154
00:09:16.140 --> 00:09:19.630
And then I'm gonna try to refresh and
if that goes right,

155
00:09:19.630 --> 00:09:21.820
I should get redirected to sign up.

156
00:09:21.820 --> 00:09:26.629
I will, I guess I gotta start this
over first before I'll do anything.

157
00:09:29.884 --> 00:09:33.994
Okay, you can see it says, compiling
middleware, so looks like it picked up.

158
00:09:35.991 --> 00:09:39.132
It already did, so fast, so
let me try it again, so I'm gonna home and

159
00:09:39.132 --> 00:09:40.484
it's not letting me go home.

160
00:09:40.484 --> 00:09:45.131
It's automatically redirecting to sign in,
no matter where I try to go to,

161
00:09:45.131 --> 00:09:48.848
if I try to go to slash, playlist,
it's gonna go to sign in.

162
00:09:48.848 --> 00:09:53.372
So pretty cool, yeah, Mark.

163
00:09:53.372 --> 00:09:57.813
&gt;&gt; How to end it in test
edge function [INAUDIBLE]

164
00:09:57.813 --> 00:10:00.424
&gt;&gt; How to end it in test edge functions,

165
00:10:00.424 --> 00:10:05.070
you will be the first one to do it,
[LAUGH] that's a good question.

166
00:10:05.070 --> 00:10:09.887
I don't think there is a common
standard on how people into in

167
00:10:09.887 --> 00:10:12.158
test their edge functions.

168
00:10:12.158 --> 00:10:16.010
I would imagine it would be
like testing any other API,

169
00:10:16.010 --> 00:10:18.951
if you're going full on WebDriver mode.

170
00:10:18.951 --> 00:10:23.130
And you're just testing to the browser,
then nothing changes for you,

171
00:10:23.130 --> 00:10:25.059
how do you test any other routes?

172
00:10:25.059 --> 00:10:31.134
But then obviously, I think we're, yeah,
it'd be like a combination of that plus

173
00:10:31.134 --> 00:10:36.458
unit testing this function in
the environments that you came in Webpack.

174
00:10:36.458 --> 00:10:40.433
I know Webpack allows you to change
your bill to web workers mode, so

175
00:10:40.433 --> 00:10:43.098
you have that that web
workers environment.

176
00:10:43.098 --> 00:10:46.893
With all the globals and things that come
with that, so you could test it that way,

177
00:10:46.893 --> 00:10:48.277
if you wanted to unit test it.

178
00:10:48.277 --> 00:10:51.247
But in unit testing, it would
literally be the same thing, right,

179
00:10:51.247 --> 00:10:53.605
like if I was testing whether
I got redirected or not.

180
00:10:53.605 --> 00:10:55.578
It doesn't matter if
it's an edge function or

181
00:10:55.578 --> 00:10:57.411
not I'm just testing if I got redirected.

182
00:10:57.411 --> 00:11:02.942
&gt;&gt; Does app dot TSX run for
middleware.tsx?

183
00:11:02.942 --> 00:11:06.944
&gt;&gt; Does app.tsx run before middle, no,

184
00:11:06.944 --> 00:11:13.375
because middleware happens before
your app actually is even,

185
00:11:13.375 --> 00:11:17.030
so you got to get out of middleware.

186
00:11:17.030 --> 00:11:22.306
It literally sits in the middle, if your
app is the origin, it's the destination.

187
00:11:22.306 --> 00:11:25.860
The middleware is the thing that
intercepts the request before it goes to

188
00:11:25.860 --> 00:11:26.830
the destination.

189
00:11:26.830 --> 00:11:31.767
So know the app will not execute
before the middleware, because the app

190
00:11:31.767 --> 00:11:37.390
is runtime, whereas the middleware
is happening on the network layer.

191
00:11:37.390 --> 00:11:41.030
It's literally happening
on the way to you, so yeah,

192
00:11:41.030 --> 00:11:43.971
the middleware what happened first, yes.

193
00:11:43.971 --> 00:11:48.506
&gt;&gt; So instead of rest this next response,
right?

194
00:11:48.506 --> 00:11:54.628
&gt;&gt; Yes, we have next response, and that's
because there actually isn't a rest here.

195
00:11:54.628 --> 00:11:58.486
Because again,
this is like a web worker environment, and

196
00:11:58.486 --> 00:12:03.360
you don't have access to, so that,
I could talk about that a little more.

197
00:12:03.360 --> 00:12:07.190
Let's see them talk about it here,
here we go edge runtime.

198
00:12:07.190 --> 00:12:10.513
So basically you have access to,
literally, like I said,

199
00:12:10.513 --> 00:12:14.000
there's really not a lot you
have access to, but this is it.

200
00:12:14.000 --> 00:12:18.047
This is all you get in this environment,
you get this big request object,

201
00:12:18.047 --> 00:12:21.195
you get this response object,
that looks pretty crazy.

202
00:12:21.195 --> 00:12:25.103
Like if you want to make a response, but
yeah, you don't have access to that.

203
00:12:25.103 --> 00:12:27.572
But you do have access to the request
because most of the time,

204
00:12:27.572 --> 00:12:28.772
that's what you're doing.

205
00:12:28.772 --> 00:12:33.146
But you can also do something
that looks like this,

206
00:12:33.146 --> 00:12:40.386
you don't have these next response, you
could just do new response here like this.

207
00:12:40.386 --> 00:12:43.700
You can make a new response but I've never
done that before, it can be pretty crazy.

