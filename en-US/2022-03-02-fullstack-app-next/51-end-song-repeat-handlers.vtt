WEBVTT

1
00:00:00.120 --> 00:00:03.780
So now let's finish off this playing,
and we can get this thing deployed.

2
00:00:03.780 --> 00:00:06.102
So let's take note of
the current issues that we have.

3
00:00:06.102 --> 00:00:08.457
So let's go through this app,
and we can see what that is and

4
00:00:08.457 --> 00:00:09.693
then we'll fix those issues.

5
00:00:09.693 --> 00:00:14.845
So, if I hit play, I'm gonna turn this
down, and then I seek to the end,

6
00:00:14.845 --> 00:00:19.570
or actually, let's just hit next and
see what happens.

7
00:00:19.570 --> 00:00:22.839
First of all, that doesn't do anything so
we got it we're not there yet,

8
00:00:22.839 --> 00:00:24.600
next is literally not doing anything.

9
00:00:25.840 --> 00:00:28.038
And previous is literally
not doing anything, so

10
00:00:28.038 --> 00:00:31.980
although we do have handlers for that
those handlers are just setting an index.

11
00:00:31.980 --> 00:00:37.490
We're not doing anything with that index,
so we need to do something with that.

12
00:00:37.490 --> 00:00:42.190
If we go to the end of the track and
just let it in naturally by itself,

13
00:00:42.190 --> 00:00:47.880
it should go back to the next it should go
to the next songs I don't have repeat set,

14
00:00:47.880 --> 00:00:52.970
but as you can see, it didn't it
just stayed on the current song.

15
00:00:52.970 --> 00:00:56.154
So we got to fix that,
the other thing we need to fix is,

16
00:00:56.154 --> 00:01:00.865
is if I have repeat on well, you're not
gonna be able to observe this book because

17
00:01:00.865 --> 00:01:04.435
it is actually going to repeat
because it's not going next.

18
00:01:04.435 --> 00:01:08.311
But I promise you that doesn't work either
and the same thing with shuffle if I hit

19
00:01:08.311 --> 00:01:12.191
shuffle, and then I hit next which doesn't
work that's not gonna work either.

20
00:01:12.191 --> 00:01:14.970
So we got to fix all of those things.

21
00:01:14.970 --> 00:01:20.610
So let's do it let's head back to
the code the first thing is we

22
00:01:20.610 --> 00:01:27.993
need to Iddress one issue is that when you
click on one of these songs to load it up.

23
00:01:27.993 --> 00:01:32.538
Right now we are setting
the whereas as we're setting

24
00:01:32.538 --> 00:01:36.520
the index that's being played to zero.

25
00:01:36.520 --> 00:01:40.302
So to always be the first thing we need to
set it to whatever the index of the active

26
00:01:40.302 --> 00:01:42.270
song that that got passed in.

27
00:01:42.270 --> 00:01:47.784
We need to set it to that, so
Instead of putting zero on this use state,

28
00:01:47.784 --> 00:01:52.922
we're instead going to say the initial
state is gonna be songs dot

29
00:01:52.922 --> 00:01:58.910
find index of whatever some song ID
that triple equals some active song.

30
00:01:58.910 --> 00:02:03.730
ID, so, whatever that index is start
there so that's the first change.

31
00:02:03.730 --> 00:02:07.247
Making sure we set the initial index to be
whatever the index of the active song is

32
00:02:07.247 --> 00:02:08.454
and the current playlist so

33
00:02:08.454 --> 00:02:10.990
it doesn't reset to zero no
matter what song we click on.

34
00:02:12.550 --> 00:02:17.227
And then the next thing is we need
to actually use this index to

35
00:02:17.227 --> 00:02:19.970
play the current song.

36
00:02:19.970 --> 00:02:21.692
So in order to do that,

37
00:02:21.692 --> 00:02:26.450
we know that the player is bound
to whatever the act of song is.

38
00:02:26.450 --> 00:02:30.774
This so how do we actually take advantage
of using the index well if we use

39
00:02:30.774 --> 00:02:35.461
the index to set the active song that
would trigger a state change through easy

40
00:02:35.461 --> 00:02:35.981
peasy.

41
00:02:35.981 --> 00:02:41.007
Which will then rerender the component
with the correct active song so

42
00:02:41.007 --> 00:02:45.518
that's all we need to do is to use
R actions from easy peasy to set

43
00:02:45.518 --> 00:02:48.089
an active song based off the index.

44
00:02:48.089 --> 00:02:50.680
And now we got to think about,
well, when does the song change.

45
00:02:50.680 --> 00:02:55.150
The song changes on end,
it changes on previous, changes on next.

46
00:02:55.150 --> 00:02:57.475
So we have to put in all
three of those places or

47
00:02:57.475 --> 00:03:01.090
we can just make a use effect that
watches when the index changes.

48
00:03:01.090 --> 00:03:05.260
And when the index changes, then we can
set it active song, so let's do that.

49
00:03:05.260 --> 00:03:11.024
So let's make a new use effects I
don't need this one, this is fine and

50
00:03:11.024 --> 00:03:16.595
we'll say use effec, and
what this one's gonna do is it's going to

51
00:03:16.595 --> 00:03:22.578
watch the current index it's also
going to need reference to an action.

52
00:03:22.578 --> 00:03:26.658
Called, like the action that we have from
our stored actions which we need to pull

53
00:03:26.658 --> 00:03:29.493
in so I'm actually just gonna
pull that in right quick.

54
00:03:29.493 --> 00:03:34.741
Gotta say, let's call it set,
active, song,

55
00:03:34.741 --> 00:03:39.738
singular = useStore, or what's it called?

56
00:03:39.738 --> 00:03:41.904
UseStoreActions.

57
00:03:45.167 --> 00:03:49.359
That takes a state, that's gonna be any,
and just like before,

58
00:03:49.359 --> 00:03:51.813
it's just gonna return state.set.

59
00:03:51.813 --> 00:03:55.860
Active song singular, so
it's gonna take that.

60
00:03:57.000 --> 00:04:00.730
This use effect is also gonna watch
that as a value, cuz we'll be using it.

61
00:04:00.730 --> 00:04:02.724
And then it's also gonna
watch all the songs, so

62
00:04:02.724 --> 00:04:04.680
those are the dependencies
of this use effect.

63
00:04:04.680 --> 00:04:09.828
And then aside this use effect,
what we're gonna do

64
00:04:09.828 --> 00:04:15.100
is we're gonna say set active
song to be songs index.

65
00:04:16.980 --> 00:04:20.080
That's it, lemme go to my store real
quick and make sure I got the right name.

66
00:04:20.080 --> 00:04:24.359
It's change active song I call it set, so

67
00:04:24.359 --> 00:04:28.287
change active song go back to our layer

68
00:04:31.606 --> 00:04:36.401
And Natalie's change active
song there there we go.

69
00:04:36.401 --> 00:04:39.116
Okay cool so
we got the active song set there so

70
00:04:39.116 --> 00:04:42.696
let's try to call next on one of these and
see what happens.

71
00:04:42.696 --> 00:04:48.664
So I'm gonna hit next and you can see it
moves to the next song now if I go next

72
00:04:48.664 --> 00:04:54.659
again to the next song if I go previous
and moves back to the previous song.

73
00:04:54.659 --> 00:04:58.771
Pretty good so all we're doing is watching
that index and we're just saying cool

74
00:04:58.771 --> 00:05:02.472
update the active song to be whatever
songs of this new index that's it.

75
00:05:02.472 --> 00:05:08.046
So works pretty good, And

76
00:05:08.046 --> 00:05:13.438
then some of the other issues
are going to be around when the song

77
00:05:13.438 --> 00:05:18.853
attempts to end but
let's check out the shuffling and repeat.

78
00:05:18.853 --> 00:05:22.087
So, if I put repeat on and

79
00:05:22.087 --> 00:05:27.580
I go all the way to the end, let this in.

80
00:05:27.580 --> 00:05:30.730
If it works, it should say the same song,
let's see what happens.

81
00:05:32.430 --> 00:05:36.650
It didn't, It didn't say the same song so
that's an issue we have to fix.

82
00:05:36.650 --> 00:05:40.930
And then also with shuffle,
if I hit shuffle on that I hit next.

83
00:05:40.930 --> 00:05:44.900
The next song after the Elevator
Bossa Nova is Is eternal springtime.

84
00:05:44.900 --> 00:05:48.902
So unless it randomly picks that song,
which I hope it doesn't, when I hit next,

85
00:05:48.902 --> 00:05:52.850
I should not see turtle springtime,
I should see something else.

86
00:05:52.850 --> 00:05:56.420
Again unless it randomly picks a song that
we just don't know and I'll try it again.

87
00:05:56.420 --> 00:06:00.680
So if I hit next,
it went to Fermi paradox.

88
00:06:00.680 --> 00:06:06.231
So it looks like the shuffling might
be working there, so we hit next again,

89
00:06:06.231 --> 00:06:12.740
I would expect it to go to something other
than elevator, something hidden there.

90
00:06:12.740 --> 00:06:15.178
It goes to astronauts if we go here, so

91
00:06:15.178 --> 00:06:18.779
it looks like the shuffle is
working there pretty well.

92
00:06:20.690 --> 00:06:22.201
But the repeat is definitely not working.

93
00:06:22.201 --> 00:06:27.011
So if we try that again, just to be sure,

94
00:06:27.011 --> 00:06:31.900
this should stay here and It's not.

95
00:06:31.900 --> 00:06:34.751
Okay, so before we try to fix the repeat,

96
00:06:34.751 --> 00:06:38.090
I wanna just walk through
what we have a repeat and

97
00:06:38.090 --> 00:06:43.230
see why it's not working to see if anyone
can take a guess of why it might be.

98
00:06:44.570 --> 00:06:48.780
So for the repeat,
we have a set repeat call here.

99
00:06:48.780 --> 00:06:51.680
It's bounced, it's gonna be set
inside the on repeat handler.

100
00:06:53.310 --> 00:06:57.999
On repeat handler is
going to be set when you

101
00:06:57.999 --> 00:07:03.030
click this button here, the repeat icon.

102
00:07:03.030 --> 00:07:07.680
And then what happens is on end
we check and repeat is true.

103
00:07:07.680 --> 00:07:11.650
If repeat is true, we just say hey,
seek to zero, go back to zero.

104
00:07:11.650 --> 00:07:14.700
But for some reason it's not doing that,
and in fact, we can throw a log in here.

105
00:07:14.700 --> 00:07:20.315
We can say console log, should repeat and

106
00:07:20.315 --> 00:07:24.967
we can throw another log in here and

107
00:07:24.967 --> 00:07:29.469
say is how or why did you get here.

108
00:07:29.469 --> 00:07:34.185
Okay so I'm gonna go back I'm
going to have repeat on or

109
00:07:34.185 --> 00:07:41.273
just refreshes to make sure we're good to
go I'll pick a song on my turn repeat on.

110
00:07:41.273 --> 00:07:46.118
I'm gonna to go all the way to the end of
this console and let's see what we get

111
00:07:46.118 --> 00:07:50.611
good because we know repeat is true
because this thing is lit up white.

112
00:07:50.611 --> 00:07:54.950
But as you can see,
it logged why did you get here?

113
00:07:54.950 --> 00:07:57.238
So even though we know
that repeat is true,

114
00:07:57.238 --> 00:08:01.600
it's here because that wouldn't
be lit of white if it wasn't.

115
00:08:01.600 --> 00:08:05.900
But for some reason inside of the on
end function repeat is false.

116
00:08:05.900 --> 00:08:10.140
So how can a state be two
different values at the same time

117
00:08:10.140 --> 00:08:11.180
&gt;&gt; Is like a race condition.

118
00:08:11.180 --> 00:08:12.200
&gt;&gt; A race condition?

119
00:08:12.200 --> 00:08:16.836
Close It's like a race condition
It's not asynchronous problem, but

120
00:08:16.836 --> 00:08:19.240
is a classical JavaScript problem.

121
00:08:20.460 --> 00:08:24.180
&gt;&gt; Did we accidentally
create like a closure of it?

122
00:08:24.180 --> 00:08:25.990
&gt;&gt; Yes, there's a closure.

123
00:08:25.990 --> 00:08:28.990
Yes, there's definitely
a closure happening here.

124
00:08:28.990 --> 00:08:33.368
And what's really happening is
because we have to pass that on in

125
00:08:33.368 --> 00:08:35.720
callback to react taller.

126
00:08:35.720 --> 00:08:40.703
So when this component loads up,
when we pass the on into it at that time,

127
00:08:40.703 --> 00:08:43.460
the on end the repeat is false.

128
00:08:43.460 --> 00:08:45.547
So by time it actually
calls the on end function.

129
00:08:45.547 --> 00:08:49.170
It's calling the one that was passed
to it which had a falsie value.

130
00:08:49.170 --> 00:08:52.315
But since then the opponent had re
rendered so many times because of

131
00:08:52.315 --> 00:08:55.990
the request animation frame from
you clicking the repeat button.

132
00:08:55.990 --> 00:08:59.190
That repeat actually changed
as far as the latest value.

133
00:08:59.190 --> 00:09:04.160
But the callback that react Howler had
had on in where the repeat was falsi.

134
00:09:04.160 --> 00:09:08.290
So it's stuck in a closure, and
therefore it's outdated value.

135
00:09:08.290 --> 00:09:13.075
So that's a problem, so
this actually happens a lot If you

136
00:09:13.075 --> 00:09:16.900
are using hooks that have event callbacks.

137
00:09:16.900 --> 00:09:20.072
Anytime you got to pass in an event
callback into something with the hook,

138
00:09:20.072 --> 00:09:22.510
you will run into this closure problem.

139
00:09:22.510 --> 00:09:25.503
And there's a lot of ways to get around
it, I think react even has a guide on

140
00:09:25.503 --> 00:09:28.610
their website that talks about this
is the ways you get around it.

141
00:09:28.610 --> 00:09:29.550
Here's how I get around it.

142
00:09:31.130 --> 00:09:34.508
So what we're gonna do is
we're going to use a ref.

143
00:09:34.508 --> 00:09:37.458
So we're gonna come up here and
we're going to make a new ref, just for

144
00:09:37.458 --> 00:09:38.014
the repeat.

145
00:09:38.014 --> 00:09:42.555
So we're gonna say,
repeat or if I can spell,

146
00:09:42.555 --> 00:09:49.010
repeat ref,
that's gonna equals use ref, like that.

147
00:09:49.010 --> 00:09:51.499
And it's initial values gonna
be whatever the repeat state is.

148
00:09:52.760 --> 00:09:57.010
So we're just gonna make a ref and
keep it in sync with the repeat state.

149
00:09:57.010 --> 00:10:01.308
A reference won't fall victim
to the closure because of how it

150
00:10:01.308 --> 00:10:05.000
basically opts out of
the react rendering cycle.

151
00:10:05.000 --> 00:10:07.847
You could think of references like,
just like some global

152
00:10:07.847 --> 00:10:12.070
variable that acts the same way you think
a regular global variable will act.

153
00:10:12.070 --> 00:10:15.527
Whereas a state variable is being tracked
by reacts and it's like using it for

154
00:10:15.527 --> 00:10:19.410
rendering, because that's how it renders,
whereas you could change a reference and

155
00:10:19.410 --> 00:10:21.080
it will never rerender a component.

156
00:10:21.080 --> 00:10:22.719
That's the whole point of it, so

157
00:10:22.719 --> 00:10:26.590
it's not gonna fall victim to
the closure that the state would.

158
00:10:26.590 --> 00:10:31.180
But we do need the repeat state for
the initial so we'll have that.

159
00:10:31.180 --> 00:10:35.536
And then the next thing we'll do is we'll
set up a another use effects that just

160
00:10:35.536 --> 00:10:38.860
keeps the repeat ref and
the repeat state in sync.

161
00:10:38.860 --> 00:10:42.947
So that way we never have to mess that up
so we'll make another use effects here,

162
00:10:42.947 --> 00:10:45.640
it's only dependency is
gonna be the repeat state.

163
00:10:47.480 --> 00:10:52.352
All we're gonna do is to say the repeat
ref dot current equals repeat date that's

164
00:10:52.352 --> 00:10:54.940
it we're just keeping those two in track,

165
00:11:02.059 --> 00:11:06.955
And now that we have that Instead
of checking if repeat is true

166
00:11:06.955 --> 00:11:12.235
inside of our own and we can check
if repeat ref.current is true,

167
00:11:12.235 --> 00:11:15.598
and that'll always be the latest value.

168
00:11:22.027 --> 00:11:25.900
So now if we go back and I toggle repeats.

169
00:11:25.900 --> 00:11:31.927
I should be refreshed just to make
sure click a song toggle repeats

170
00:11:31.927 --> 00:11:38.612
get to the end looks like room Elevator
Basa let that play until the end and

171
00:11:38.612 --> 00:11:42.909
hopefully [LAUGH] hit
the power of JavaScript.

172
00:11:44.920 --> 00:11:48.070
We don't have any Gremlins and
it repeats just like that

