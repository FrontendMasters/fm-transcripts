WEBVTT

1
00:00:00.099 --> 00:00:03.382
Yeah, let's keep moving, so
now we'll work on the onEnd.

2
00:00:03.382 --> 00:00:08.193
So the onEnd is gonna be a handler for
when a song ends, what do you wanna do?

3
00:00:08.193 --> 00:00:10.641
We'll typically in a music
player if a song ends,

4
00:00:10.641 --> 00:00:12.930
I wanted to go to the next
song automatically.

5
00:00:12.930 --> 00:00:20.012
So we have to handle that so I'm gonna say
OnEnd and that's gonna be a function and

6
00:00:20.012 --> 00:00:25.964
what I wanna do here is basically we
have to check for repeat in here.

7
00:00:25.964 --> 00:00:30.864
So typically, in the music player, if you
hit Next, it does account for shuffle,

8
00:00:30.864 --> 00:00:33.527
but it doesn't usually account for repeat.

9
00:00:33.527 --> 00:00:37.113
If I hit Next when repeat is on,
does it just play the same song, or

10
00:00:37.113 --> 00:00:40.005
does it go to the next song and
then repeat that song?

11
00:00:40.005 --> 00:00:44.193
I think they'd goes to the next song it
repeats the next song, maybe you would,

12
00:00:44.193 --> 00:00:48.191
if you hit next but repeat is on I think
you'd expected it to go to the next song

13
00:00:48.191 --> 00:00:49.710
why else would you hit next?

14
00:00:49.710 --> 00:00:53.772
So that's why we don't account for
repeat on next but we will account for

15
00:00:53.772 --> 00:00:54.910
repeat on song end.

16
00:00:54.910 --> 00:01:00.257
So therefore it just loops back and plays
that song again, so we'll do that and

17
00:01:00.257 --> 00:01:05.685
what we'll say is, we'll say if and
we're keeping track of the repeat state so

18
00:01:05.685 --> 00:01:09.598
this should work so
we'll say if repeat, is activated.

19
00:01:09.598 --> 00:01:15.340
What we'll do is we basically
have to set the seek manually,

20
00:01:15.340 --> 00:01:22.788
so we have to tell react holler to seek
back to zero so reset the song basically.

21
00:01:22.788 --> 00:01:27.076
And we can do that using our sound ref, so
we can say sound ref being at the current

22
00:01:27.076 --> 00:01:30.161
which means give me the current
value of this reference.

23
00:01:30.161 --> 00:01:35.054
This will be the react instance or direct
Howler instance and that has a method on

24
00:01:35.054 --> 00:01:39.816
it called seek and we can give it a number
of zero so just saying seek back to zero

25
00:01:43.461 --> 00:01:47.137
And that's all if the repeat is activated,
if repeat is not activated,

26
00:01:47.137 --> 00:01:50.102
then just go to next song, so
call the next song function.

27
00:01:55.975 --> 00:01:59.137
We're also keeping track of
seek ourself in our state, and

28
00:01:59.137 --> 00:02:01.552
we're gonna use that
to move the animation.

29
00:02:01.552 --> 00:02:07.018
So this is setting the react hours,
so the actual song to restart, but

30
00:02:07.018 --> 00:02:12.114
to update the UI to restart we also
have to keep track of our seek and

31
00:02:12.114 --> 00:02:14.908
let's say setSeek to zero as well.

32
00:02:14.908 --> 00:02:19.371
So we're gonna use that seat state to keep
track of the UI, but the second one is to

33
00:02:19.371 --> 00:02:22.867
actually move the song back to zero,
so two different things.

34
00:02:33.294 --> 00:02:37.054
Okay, the other one we wanna take
care of is the onLoad event, so

35
00:02:37.054 --> 00:02:38.318
when a song loads up.

36
00:02:38.318 --> 00:02:41.975
We need to grab the duration from it and
set the duration, so

37
00:02:41.975 --> 00:02:45.503
we can actually show it in
the player at the bottom right.

38
00:02:45.503 --> 00:02:50.215
So we'll say const onLoad
that's gonna equals

39
00:02:50.215 --> 00:02:55.515
something here and
we're just gonna say const song,

40
00:02:55.515 --> 00:03:01.893
duration that's gonna equals
the soundRef.current.seek.

41
00:03:01.893 --> 00:03:06.117
However, has a method on it
called duration, if you call it,

42
00:03:06.117 --> 00:03:11.173
it'll give you back the current duration
of the song that just loaded up.

43
00:03:11.173 --> 00:03:13.774
So we'll get that duration back, and

44
00:03:13.774 --> 00:03:18.505
then we'll just say set duration
to whatever the song duration was.

45
00:03:18.505 --> 00:03:22.418
That way we can update the duration on
the bottom right of the Seek bar, again,

46
00:03:22.418 --> 00:03:25.265
all the songs have durations
now saved in a database, but

47
00:03:25.265 --> 00:03:27.299
they're like, in a different format.

48
00:03:27.299 --> 00:03:31.977
So this is, I'm just grabbing the state
from whatever react holler says,

49
00:03:31.977 --> 00:03:34.723
that way, it's guaranteed to be the same,

50
00:03:34.723 --> 00:03:39.277
I don't want any like millisecond
differences or second differences.

51
00:03:39.277 --> 00:03:43.476
So I'm just like whatever that thing says
the duration is, that's what it is and

52
00:03:43.476 --> 00:03:46.033
hopefully the database matches with that,
so.

53
00:03:51.003 --> 00:03:53.923
Okay, any questions so far on some
of these callbacks that we did?

54
00:03:53.923 --> 00:03:56.348
We just did a bunch of callbacks here.

55
00:04:00.507 --> 00:04:03.614
Okay so now we want to hook
these up into the DOM or

56
00:04:03.614 --> 00:04:06.271
actually there's one more we wanna do.

57
00:04:06.271 --> 00:04:10.278
We wanna handle what happens when you do
the seeking, so if you click the seek bar,

58
00:04:10.278 --> 00:04:12.965
if you drag the seek bar,
we wanna do some stuff there.

59
00:04:12.965 --> 00:04:19.076
So we'll say const onSeek we wanna do
that that's going to take an event and

60
00:04:19.076 --> 00:04:24.217
we wanna just set the seek value to,
We got a parse float because

61
00:04:24.217 --> 00:04:30.919
we're doing decimals on the seek value
because they step by point one every time.

62
00:04:30.919 --> 00:04:35.532
So we got to parse float, not parse
int and the range components spits out

63
00:04:35.532 --> 00:04:39.551
an array of values,
because we had like a minimum and maximum.

64
00:04:39.551 --> 00:04:42.453
So it'll spit back an array of values for
some reason and

65
00:04:42.453 --> 00:04:43.950
not just one value, I know.

66
00:04:43.950 --> 00:04:48.525
So we have to do is just get E and
get the first value out of there.

67
00:04:52.198 --> 00:04:56.106
That's only unique to this range component
from chakra if you use like the range

68
00:04:56.106 --> 00:04:58.730
component from html5,
it just spits out one value,

69
00:04:58.730 --> 00:05:00.733
it doesn't spit out an array of values.

70
00:05:00.733 --> 00:05:04.290
But this one does have something
to do with the min and the max and

71
00:05:04.290 --> 00:05:07.533
the fact that I get multiple thumbs and
things like that.

72
00:05:07.533 --> 00:05:13.312
So we got that, so
that's gonna update the visual UI seeking,

73
00:05:13.312 --> 00:05:19.103
but then now we have to also update
the song to seek to it as well.

74
00:05:19.103 --> 00:05:22.835
And the way we do that is using
the sound ref dot current,

75
00:05:22.835 --> 00:05:25.864
it also has a seek method
that we seen before.

76
00:05:25.864 --> 00:05:29.546
And you can pass whatever you want,
we set it to 0 up here to reset the song,

77
00:05:29.546 --> 00:05:32.829
he's got to pass it to whatever this
value is to seek to that value.

78
00:05:40.246 --> 00:05:44.342
Cool, okay, so
now let's attach these handlers to

79
00:05:44.342 --> 00:05:47.890
all the elements that
need to they need them.

80
00:05:47.890 --> 00:05:54.168
So for react taller we're going
to add the onLoad and the onEnd,

81
00:05:54.168 --> 00:06:00.446
so we'll say onLoad we're going
to say they on load like that and

82
00:06:00.446 --> 00:06:05.000
then onEnd we're gonna do that on and
like that

83
00:06:10.636 --> 00:06:14.978
And then for the other ones that we have,
what do we have,

84
00:06:14.978 --> 00:06:18.874
we had onSeek, we had next song and
previous song.

85
00:06:18.874 --> 00:06:22.487
And I think those are the only two
that we need so, the next song and

86
00:06:22.487 --> 00:06:25.642
previous song are exactly where
you think they would go so

87
00:06:25.642 --> 00:06:29.734
previous song is gonna go here on click,
we're gonna say previous song.

88
00:06:36.483 --> 00:06:39.764
Then the next song is gonna go exactly
where you think it's gonna go on

89
00:06:39.764 --> 00:06:40.621
the next button.

90
00:06:40.621 --> 00:06:43.977
So we'll say on click next song.

91
00:06:48.389 --> 00:06:51.982
And then the last one is gonna be for the
seeking so we got to handle the onSeek.

92
00:06:51.982 --> 00:06:56.632
The way we're going to do that is
if we go down to the rain slider,

93
00:06:56.632 --> 00:07:00.608
the main one here,
we're going to do a couple things.

94
00:07:00.608 --> 00:07:04.518
First, we need to give it a max value,
so it knows how big it should be, so

95
00:07:04.518 --> 00:07:05.751
we're gonna say max.

96
00:07:05.751 --> 00:07:08.691
And then here's where we're gonna use
the duration that we've been setting.

97
00:07:08.691 --> 00:07:12.376
So we're gonna say, hey,
if there is a duration,

98
00:07:12.376 --> 00:07:15.734
then we're gonna say, duration.toFixed.

99
00:07:15.734 --> 00:07:17.371
And we're gonna say, 2.

100
00:07:17.371 --> 00:07:19.894
This just is gonna just
fix the decimal places, so

101
00:07:19.894 --> 00:07:22.850
we get the right amount of
decimal places for this number.

102
00:07:22.850 --> 00:07:27.422
So it looks like the way it's supposed
to look, if not then just zero,

103
00:07:27.422 --> 00:07:29.370
we don't have anything yet.

104
00:07:32.605 --> 00:07:35.633
And this thing is freaking out
because no duplicate prompts,

105
00:07:35.633 --> 00:07:38.454
I already have one there and
let me get rid of, am I there we go?

106
00:07:40.748 --> 00:07:41.772
Why else are you freaking out?

107
00:07:44.666 --> 00:07:48.489
Okay, I don't know what that type
varies but it's totally fine.

108
00:07:48.489 --> 00:07:50.820
And then we need to do an onChange.

109
00:07:50.820 --> 00:07:53.357
So onChange we'll do the onSeek,

110
00:07:53.357 --> 00:07:57.826
so we'll say onSeek like that,
that'll be for the onChange

111
00:08:03.618 --> 00:08:08.975
And this will handle when someone
clicks the sick bar and it tracks.

112
00:08:16.107 --> 00:08:21.092
And then what we wanna do now is we wanna
handle when someone is dragging it, so

113
00:08:21.092 --> 00:08:25.098
we got to keep track of if someone
is currently seeking or not.

114
00:08:25.098 --> 00:08:30.333
And those gonna be two call backs for that
before we get there we'll add the value

115
00:08:30.333 --> 00:08:35.271
of whatever it currently is, and
that's just gonna be an array with seek.

116
00:08:35.271 --> 00:08:38.086
The reason I'm putting an array is because
that's literally what range slider wants.

117
00:08:38.086 --> 00:08:42.536
It wants an array because this range
slider can accept multiple values, and I

118
00:08:42.536 --> 00:08:47.276
guess they just didn't feel like figuring
out if you pass in a single value or not.

119
00:08:47.276 --> 00:08:50.462
Which is easy for them to do, so they just
like you always got to pass an array no

120
00:08:50.462 --> 00:08:53.325
matter what, so we have to pass
an array with the current seek value.

121
00:08:57.480 --> 00:09:00.813
And the next thing we got to do is,
again, we need to listen for

122
00:09:00.813 --> 00:09:05.263
when someone is currently seeking as
they're dragging the thumb left and right.

123
00:09:05.263 --> 00:09:09.823
Because we're gonna do certain things when
that's true, so there's two events for

124
00:09:09.823 --> 00:09:17.110
that, we'll say onChange start, Like this,

125
00:09:17.110 --> 00:09:20.801
and I'm gonna copy that and
there's another onChange end.

126
00:09:20.801 --> 00:09:25.093
So we basically like I said, we're just
going to keep track of whether you

127
00:09:25.093 --> 00:09:28.851
are seeking or not, we don't have
any state for that right now.

128
00:09:28.851 --> 00:09:33.524
So we got to come back up here and
make a new states and

129
00:09:33.524 --> 00:09:39.614
that's just going to be called,
is seeking will say is seeking and

130
00:09:39.614 --> 00:09:48.589
set is seeking And they'll start to false.

131
00:09:59.774 --> 00:10:04.756
Okay, so now that we have that,
we can go back down, and

132
00:10:04.756 --> 00:10:10.709
on chain start, all we have to do
is just say set is seeking is true.

133
00:10:10.709 --> 00:10:14.159
Cuz you're starting to do
the change onChange and

134
00:10:14.159 --> 00:10:17.947
we can say set seeking is false,
you are done seeking.

135
00:10:17.947 --> 00:10:23.450
Okay, we got all of that hooked up,
there's still some more work to do with,

136
00:10:23.450 --> 00:10:28.711
some things we need to handle, but so
far everything seems to be working.

137
00:10:28.711 --> 00:10:33.579
The last thing we wanna do, is let's see,
we wanna make sure that we're playing

138
00:10:33.579 --> 00:10:37.102
the right song,
actually I think we're good there, so.

139
00:10:37.102 --> 00:10:39.803
&gt;&gt; Can we control the volume
levels also with this?

140
00:10:39.803 --> 00:10:43.059
&gt;&gt; Yeah, you can a hundred percent control
the volume levels of, with holler,

141
00:10:43.059 --> 00:10:46.283
there's a prompt that you can pass in
that allows you to control the volume.

142
00:10:46.283 --> 00:10:51.959
So for the UI that we have, there is a
volume on the bottom right, about a volume

143
00:10:51.959 --> 00:10:58.167
slider, you can literally control that
with react collar, so that's how it works.

144
00:10:58.167 --> 00:11:02.438
&gt;&gt; With this player be a good
candidate for X state?

145
00:11:02.438 --> 00:11:06.560
&gt;&gt; Put this player be a good candidate for
X state, so

146
00:11:06.560 --> 00:11:12.056
if you don't know what x state is,
X state is a finite state machine

147
00:11:12.056 --> 00:11:17.274
that turns your UI logic into
a state tree kind of like a router.

148
00:11:17.274 --> 00:11:22.720
Yeah, I think it would, I mean, you would
have to build a really nice interpreter,

149
00:11:22.720 --> 00:11:26.194
well I think X date has
a really good interpreter now.

150
00:11:26.194 --> 00:11:30.482
Because you have to tie in react Aller to
it some lot somehow, but once you figure

151
00:11:30.482 --> 00:11:34.773
that out you had a really good interpreter
yeah I think X date will be a great one.

152
00:11:34.773 --> 00:11:38.371
Because you can only be in a certain
state at a time, so I mean,

153
00:11:38.371 --> 00:11:40.391
I think x state is great for all UI.

154
00:11:40.391 --> 00:11:42.453
So yeah, totally,
this is a great candidate,

155
00:11:42.453 --> 00:11:44.877
I think a lot of people don't
like using X state though,

156
00:11:44.877 --> 00:11:47.834
because of all the setup that you
have to do, but I'm a big fan of it.

157
00:11:47.834 --> 00:11:51.803
I rather do the setup on X state and
have like a predictable guaranteed UI

158
00:11:51.803 --> 00:11:54.459
that's like bug free
versus not setting it up.

159
00:11:54.459 --> 00:11:58.089
And just being like going through
all these conditionals and

160
00:11:58.089 --> 00:12:00.801
if statements inside of
JSX yeah rather not.

161
00:12:00.801 --> 00:12:03.648
So, yeah,
I think it's a great candidate for state.

162
00:12:03.648 --> 00:12:07.197
So let's see where we are now,
we're gonna try to click a button.

163
00:12:07.197 --> 00:12:11.960
I click the button, I can see that the
seek, like resettled, like some something

164
00:12:11.960 --> 00:12:16.738
happened here, it's not quite there yet
the duration thing still isn't there.

165
00:12:16.738 --> 00:12:21.040
So we need to go back, we need to make
sure that the seek is being uploaded

166
00:12:21.040 --> 00:12:26.023
every single tick, so for nice, smooth
animation, so we got to figure that out.

167
00:12:26.023 --> 00:12:29.264
We need to go back and fix this duration
that's not showing the right thing.

168
00:12:29.264 --> 00:12:32.912
Once we fix that, we can test whether or
not the repeat is working and

169
00:12:32.912 --> 00:12:34.259
things like that onEnd.

170
00:12:34.259 --> 00:12:38.624
Because right now like, you can see
the seek is like getting there but

171
00:12:38.624 --> 00:12:43.077
it's not moving, so we don't actually
know where the song is, but.

172
00:12:43.077 --> 00:12:45.137
[MUSIC]

173
00:12:45.137 --> 00:12:49.472
If you listen right quick,
I'm gonna just play my a little bit,

174
00:12:49.472 --> 00:12:52.843
when I seek,
you can hear it actually seeking, so

175
00:12:52.843 --> 00:12:57.848
it does seek from the songs perspective,
but the UI is not being updated.

176
00:12:57.848 --> 00:13:01.072
So we need to update the UI so
that that bar actually moves in and

177
00:13:01.072 --> 00:13:04.675
then we need to fix this description or
here, this hard coded thing.

178
00:13:06.634 --> 00:13:08.407
Okay, and let's do that.

179
00:13:08.407 --> 00:13:12.578
So to fix that duration,
let's go down to where that actually is,

180
00:13:12.578 --> 00:13:16.829
I believe it's at the bottom here,
I just have a hard coded number.

181
00:13:16.829 --> 00:13:20.654
Instead, what we're gonna do is we're
gonna use one of our formatters,

182
00:13:20.654 --> 00:13:23.875
the format time helper that we
have we're gonna pull that in.

183
00:13:23.875 --> 00:13:26.805
So we're gonna say formatTime
from lib/formatters,

184
00:13:26.805 --> 00:13:30.615
that's just gonna take in a time here,
which is just got to be duration.

185
00:13:30.615 --> 00:13:34.424
So once we pass that in,
we should have the proper duration for

186
00:13:34.424 --> 00:13:36.126
a song that gets loaded up.

187
00:13:36.126 --> 00:13:41.204
So if we go check that you can see right
now I do have the proper duration for

188
00:13:41.204 --> 00:13:44.548
this song, it's 4 minutes and 14 seconds.

189
00:13:44.548 --> 00:13:49.428
Apparently even though the database says
three minutes and 58 seconds so this is

190
00:13:49.428 --> 00:13:54.180
why I'm trusting react taller and not all
the fake data that I put in a database.

