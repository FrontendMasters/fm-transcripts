WEBVTT

1
00:00:00.000 --> 00:00:01.840
So, next is the fun part.

2
00:00:01.840 --> 00:00:06.056
I start doing back end stuff using
some pretty cool tools, in my opinion,

3
00:00:06.056 --> 00:00:09.950
that I think are really awesome,
and make things a lot simpler.

4
00:00:09.950 --> 00:00:14.586
So what we're gonna do is we need to,
one, figure out how we're gonna do

5
00:00:14.586 --> 00:00:18.619
the database stuff, and
talk about where we're gonna use it.

6
00:00:18.619 --> 00:00:22.381
Because the next is there's
many places to use database,

7
00:00:22.381 --> 00:00:26.980
you can actually use it through
an API like you typically do.

8
00:00:26.980 --> 00:00:30.564
But you can also use it
directly in a component,

9
00:00:30.564 --> 00:00:33.526
which is kind of weird at the same time.

10
00:00:33.526 --> 00:00:36.160
So it depends on how you want to get
that data and what you're doing.

11
00:00:36.160 --> 00:00:38.140
So we're gonna talk about that.

12
00:00:38.140 --> 00:00:41.747
We also need to talk about the schema,
what is going to go into the schema and

13
00:00:41.747 --> 00:00:44.667
then what I typically do is I like
to write like a seed script to

14
00:00:44.667 --> 00:00:46.990
actually see the database
with some mock data.

15
00:00:48.490 --> 00:00:51.010
And I like to do that versus
like hard coding data.

16
00:00:51.010 --> 00:00:53.929
Because if you just hard code data,
yeah, you can go on and

17
00:00:53.929 --> 00:00:56.010
you can build things faster.

18
00:00:56.010 --> 00:01:00.520
But because you're not going over the
network, to get that data you kind of miss

19
00:01:00.520 --> 00:01:04.911
out on like the error handling and the
loading handling of making an API call.

20
00:01:04.911 --> 00:01:08.660
Because you're just reading from
memory directly hard coded.

21
00:01:08.660 --> 00:01:12.799
So you're always writing a UI
that's 100% guaranteed to work.

22
00:01:12.799 --> 00:01:16.296
And I think that's where a lot of
bugs come in where you're like,

23
00:01:16.296 --> 00:01:18.215
we didn't show a loading spinner.

24
00:01:18.215 --> 00:01:22.131
Or we didn't handle that error because you
forgot to do it because you marked all

25
00:01:22.131 --> 00:01:25.830
the data out, and then you went
back to replace it with an API.

26
00:01:25.830 --> 00:01:28.695
But you never had an error handling or
the loading state handling in there and

27
00:01:28.695 --> 00:01:30.270
initially because you never needed it.

28
00:01:30.270 --> 00:01:35.063
So I typically just like to mock
the database out with C data and

29
00:01:35.063 --> 00:01:37.933
that way I can I can pull from the API.

30
00:01:37.933 --> 00:01:39.504
And that way I can get
the best of both worlds.

31
00:01:39.504 --> 00:01:42.389
I don't need to worry about having
real data in the database, but

32
00:01:42.389 --> 00:01:45.745
I also get the benefit of actually coming
over the wire and handling all the,

33
00:01:45.745 --> 00:01:47.730
asynchronous things like error handling.

34
00:01:47.730 --> 00:01:49.960
In loading, handling and things like that.

35
00:01:51.640 --> 00:01:56.150
So for database, what we're going
to be using is Postgres or PSQL.

36
00:01:56.150 --> 00:01:57.848
If you've never heard that before,

37
00:01:57.848 --> 00:02:01.320
it's just a version of SQL
that's really popular right now.

38
00:02:01.320 --> 00:02:03.480
I'm by no means a database expert.

39
00:02:03.480 --> 00:02:07.628
So I'm not gonna be able to tell you the
big differences with between Postgres and

40
00:02:07.628 --> 00:02:09.763
SQL, it's just that they both use SQL and

41
00:02:09.763 --> 00:02:14.240
Postgres has some different features on
top of them, we'll be using Postgres.

42
00:02:14.240 --> 00:02:18.084
If you never use Postgres, that's totally
fine because the ORM that we're going to

43
00:02:18.084 --> 00:02:20.968
use is going to abstract away
the database almost completely.

44
00:02:20.968 --> 00:02:24.574
Like you're literally never even gonna
interact with the database won't even

45
00:02:24.574 --> 00:02:28.017
matter what database are using because
ORM actually works the same no matter

46
00:02:28.017 --> 00:02:29.115
what database you use.

47
00:02:29.115 --> 00:02:32.048
So it's a complete abstraction
around the database entirely.

48
00:02:32.048 --> 00:02:34.646
You only really need to know
Postgres enough to set it up.

49
00:02:34.646 --> 00:02:38.102
And we're doing that on a remote hosted
platform that you don't even have to

50
00:02:38.102 --> 00:02:38.650
download.

51
00:02:38.650 --> 00:02:44.180
So really don't need to know much
about Postgres at all to follow along.

52
00:02:44.180 --> 00:02:49.664
And we're gonna be using
something called Prisma,

53
00:02:49.664 --> 00:02:54.772
so Prisma it's an ORM plus
a app that allows you to

54
00:02:54.772 --> 00:03:01.759
explore your database plus
autocomplete types for all your data.

55
00:03:01.759 --> 00:03:06.400
It kinda literally serves everything
that you need for a database.

56
00:03:06.400 --> 00:03:10.504
It comes with great like querying
functionality, searching functionality,

57
00:03:10.504 --> 00:03:14.190
all this stuff built into
an ORM that you wish you had.

58
00:03:14.190 --> 00:03:18.717
And then it also generates a client that
you can use anywhere in your app that has

59
00:03:18.717 --> 00:03:21.060
types generated based off your schema.

60
00:03:21.060 --> 00:03:23.190
So you get autocomplete for all your data.

61
00:03:23.190 --> 00:03:24.055
Which is really cool.

62
00:03:24.055 --> 00:03:28.720
And then it also handles
migrations on the database.

63
00:03:28.720 --> 00:03:31.357
So you don't have to write those
sequel migration files, which can be,

64
00:03:31.357 --> 00:03:33.400
if you've ever had to write
those before it's not fun.

65
00:03:34.500 --> 00:03:38.341
It's so much easier with, Prisma they'll
even detect if you need a migration or

66
00:03:38.341 --> 00:03:39.650
not, and write it for you.

67
00:03:39.650 --> 00:03:44.012
He was pretty amazing so we're gonna use
that and it's free it's open source and

68
00:03:44.012 --> 00:03:45.884
it works pretty well with next JS.

69
00:03:45.884 --> 00:03:49.112
They have like some paid thing
I've never used it before but

70
00:03:49.112 --> 00:03:52.226
the open source ones pretty cool so
we'll be using that.

71
00:03:52.226 --> 00:03:56.973
If you haven't used it before don't worry
it's actually really intuitive really

72
00:03:56.973 --> 00:04:00.880
easy to use I know everyone says
that like, they says everything.

73
00:04:00.880 --> 00:04:05.500
They say Graph QL is easy like no, this is
actually really easy and simple to use.

74
00:04:05.500 --> 00:04:06.590
Yes Mark.

75
00:04:06.590 --> 00:04:10.153
&gt;&gt; Does Prisma work for SQL and
no SQL databases at the same time.

76
00:04:10.153 --> 00:04:14.327
&gt;&gt; I do know Prisma supports both
of those types of databases.

77
00:04:14.327 --> 00:04:17.145
They have support for
Mongodb for SQL and for Prisma.

78
00:04:17.145 --> 00:04:19.929
We're gonna be using it in
a serverless environment.

79
00:04:19.929 --> 00:04:24.261
Because for sells API's servers and
Prisma is not always running so

80
00:04:24.261 --> 00:04:29.657
it's slightly different so you're really
not using both at the same time anyway but

81
00:04:29.657 --> 00:04:32.018
on a Redis server yeah I don't know.

82
00:04:32.018 --> 00:04:37.516
Will we have to look into that but I
don't see why you couldn't unless there's

83
00:04:37.516 --> 00:04:43.036
some limitation maybe that's a paid
feature I don't know but good question.

84
00:04:46.914 --> 00:04:50.579
Okay, so let's get started with Prisma so
the first thing we need to do is need to

85
00:04:50.579 --> 00:04:54.481
create some databases if you have Postgres
locally and you know how to use Postgres.

86
00:04:54.481 --> 00:04:58.434
Then you can just not worry about what I'm
about to show you now you can just start

87
00:04:58.434 --> 00:05:00.975
with Postgres database and
get some URLs that way.

88
00:05:00.975 --> 00:05:03.702
I didn't want anyone to have
to download all of that and

89
00:05:03.702 --> 00:05:05.790
do that because it can be pretty tedious.

90
00:05:05.790 --> 00:05:07.794
And then you got to like
know how to use Postgres and

91
00:05:07.794 --> 00:05:09.910
I just didn't feel like doing all that.

92
00:05:09.910 --> 00:05:12.260
So what we're gonna do
instead is use a hosted one,

93
00:05:12.260 --> 00:05:14.460
the quickest one that I
found to use was Heroku.

94
00:05:14.460 --> 00:05:17.856
If you've never been to Heroku
make an account right quick.

95
00:05:17.856 --> 00:05:19.320
It's free you don't need a credit card.

96
00:05:19.320 --> 00:05:20.705
You don't need anything
to make an account.

97
00:05:20.705 --> 00:05:25.679
Should be good to go and then once you get
there you can just make your first app.

98
00:05:25.679 --> 00:05:30.526
So we need to make an app even though
we're not gonna be deploying to Heroku we

99
00:05:30.526 --> 00:05:33.504
still got to make an app
to add a database to it.

100
00:05:33.504 --> 00:05:35.832
So once you go to Heroku you log in and

101
00:05:35.832 --> 00:05:40.418
you make an account you can go here
says new and you can create a new app.

102
00:05:40.418 --> 00:05:45.300
And click create a new app give your app
a name this is a globally unique name.

103
00:05:45.300 --> 00:05:49.506
So it has to be unique just like a domain
will have to be unique so you can't just

104
00:05:49.506 --> 00:05:54.690
type in like some random name it has to be
globally unique which is kind of weird.

105
00:05:54.690 --> 00:06:01.681
But, yeah, give it a name,
I'm gonna call this scott-trax-dev.

106
00:06:01.681 --> 00:06:04.866
I guess someone already has that,
probably me.

107
00:06:04.866 --> 00:06:08.750
&gt;&gt; [LAUGH]
&gt;&gt; I'm gonna say Front End Masters.

108
00:06:08.750 --> 00:06:10.720
There we go Scott tracks
front end masters.

109
00:06:11.890 --> 00:06:14.810
And then he's gonna create app make
sure it's on the United States region.

110
00:06:16.660 --> 00:06:20.620
Once you do that,
you can go over to resources,

111
00:06:20.620 --> 00:06:25.870
click on resources tab, and
you can type in resources add ons.

112
00:06:25.870 --> 00:06:29.450
There's a search box,
you can just type in PSQL.

113
00:06:29.450 --> 00:06:34.178
Or Postgres and
it says Heroku Postgres right there with

114
00:06:34.178 --> 00:06:37.498
a purple elephant you can click that and

115
00:06:37.498 --> 00:06:42.740
you're gonna do the hobby dev
free all other ones cost money.

116
00:06:44.250 --> 00:06:45.770
So, you don't need
the ones that cost money.

117
00:06:45.770 --> 00:06:46.910
You just need the free one.

118
00:06:48.210 --> 00:06:49.470
Click submit order form.

119
00:06:51.340 --> 00:06:53.980
And you gonna make that and
then you're gonna do the same thing again,

120
00:06:53.980 --> 00:06:56.993
we gonna make two of them, and I'm gonna
tell you why you gonna make two of them.

121
00:06:56.993 --> 00:07:01.793
So you literally go back to the search
box, you gonna make Postgres again and

122
00:07:01.793 --> 00:07:03.446
you can do the same thing.

123
00:07:03.446 --> 00:07:04.870
So in order for
me to make this two of them.

124
00:07:07.414 --> 00:07:11.780
Okay, so you should have two of them here.

125
00:07:11.780 --> 00:07:13.811
You'll see that they
both say attached as and

126
00:07:13.811 --> 00:07:16.470
then they'll have
the environment variable name.

127
00:07:16.470 --> 00:07:18.600
That's not that important what
you need to know that but

128
00:07:18.600 --> 00:07:20.774
we do need to have the databases
only because of Heroku and

129
00:07:20.774 --> 00:07:22.560
I'll walk through that
when we set up Prisma.

130
00:07:24.510 --> 00:07:27.124
Okay, again, if you have Postgres
on your machine already running,

131
00:07:27.124 --> 00:07:30.020
this doesn't matter, you'll use
those URLs when we need to connect.

132
00:07:30.020 --> 00:07:33.179
But everyone else this,
I looked at all the hosting providers,

133
00:07:33.179 --> 00:07:36.512
this was the simplest one to set up
all the other ones were just like,

134
00:07:36.512 --> 00:07:37.830
way too much involved.

135
00:07:37.830 --> 00:07:39.750
This was like click done.

136
00:07:39.750 --> 00:07:41.280
So simplest one.

137
00:07:41.280 --> 00:07:44.039
As far as Postgres goes, I think it's
the one that Prisma recommends in their

138
00:07:44.039 --> 00:07:46.260
documentation as well to just get started.

139
00:07:46.260 --> 00:07:47.010
So it's pretty simple.

140
00:07:48.320 --> 00:07:54.602
Okay so next we're gonna do is we're going
to go to our terminal make sure you're in

141
00:07:54.602 --> 00:08:00.555
the directory of your project which I am
you're gonna type in MPX Prisma in it.

142
00:08:03.864 --> 00:08:08.985
And you can see when you run that,
it's gonna do a couple things,

143
00:08:08.985 --> 00:08:15.805
it's gonna say your Prisma schema was
created at prisma/schema.prisma.prisma.

144
00:08:15.805 --> 00:08:20.827
You can now open it in your favorite
editor and then it says next steps set

145
00:08:20.827 --> 00:08:26.018
your database URL the .env file set
the provider the data source block and

146
00:08:26.018 --> 00:08:30.470
schema prison to match your
database Postgres MySQL SQL lite.

147
00:08:30.470 --> 00:08:33.945
Run prisma DB pool to turn your
database schema into a prisma schema.

148
00:08:33.945 --> 00:08:36.445
We don't have a database schema,
we just made a new one.

149
00:08:36.445 --> 00:08:37.975
And then Prisma generate the client.

150
00:08:37.975 --> 00:08:38.938
So there's a lot of stuff here.

151
00:08:38.938 --> 00:08:42.095
We're not gonna do all these things in
this step because we don't need to.

152
00:08:42.095 --> 00:08:44.244
So just follow along, but
everyone should have this.

153
00:08:47.004 --> 00:08:49.165
So let's check out what was actually
happening underneath the hood.

154
00:08:49.165 --> 00:08:53.030
So the first thing is you'll notice that
we've got this new folder called Prisma.

155
00:08:53.030 --> 00:08:55.843
Inside of it, there's a schema dot Prisma.

156
00:08:55.843 --> 00:09:01.011
If you're using VS code, there should be
a plug in you can download to get the nice

157
00:09:01.011 --> 00:09:05.728
colors and it actually does a lot of
formatting and autocomplete for you.

158
00:09:05.728 --> 00:09:09.476
I highly recommend downloading the Prisma
extension in the marketplace if you're

159
00:09:09.476 --> 00:09:10.021
on VS code.

160
00:09:10.021 --> 00:09:11.501
It does so much.

161
00:09:11.501 --> 00:09:12.525
It's actually really cool.

162
00:09:12.525 --> 00:09:14.322
The team behind it did a really good job.

163
00:09:14.322 --> 00:09:16.519
Literally one of the best language
tools I've seen in VS code.

164
00:09:16.519 --> 00:09:21.008
So, highly recommend downloading that if
you're looking at addition like wow I

165
00:09:21.008 --> 00:09:25.562
don't know this language it's fine is
literally just like filling out JSON it's

166
00:09:25.562 --> 00:09:26.501
not hard at all.

167
00:09:26.501 --> 00:09:31.542
It's not like some new crazy DSL you'll be
able to do this no problem I promise you.

168
00:09:31.542 --> 00:09:36.754
The next thing is if you go look
at the .env file you can see

169
00:09:36.754 --> 00:09:41.747
that we have a database URL,
that we need to fill out and

170
00:09:41.747 --> 00:09:48.497
this is where we're going to add our
database URL that we set up on Heroku.

171
00:09:48.497 --> 00:09:50.280
So in order to get that,

172
00:09:50.280 --> 00:09:56.180
what you need to do is actually go to
the Heroku dashboard that we just created.

173
00:09:56.180 --> 00:09:59.350
So let's go back there,
we'll go to the Heroku dashboard.

174
00:09:59.350 --> 00:10:01.030
Let's click on either one of them.

175
00:10:01.030 --> 00:10:03.780
It doesn't really matter which one you
can click right here, the name of it.

176
00:10:03.780 --> 00:10:06.040
So I'm gonna click on for
me and click on the second one.

177
00:10:07.950 --> 00:10:13.645
It's gonna say not found for a minute,
then it'll load If you go to settings and

178
00:10:13.645 --> 00:10:18.150
you go to database credentials
you click on view credentials.

179
00:10:18.150 --> 00:10:23.613
And then down here where it says URI
you want to copy that whole thing.

180
00:10:28.026 --> 00:10:32.998
So we're gonna copy that whole thing
there, you're gonna go back to your

181
00:10:32.998 --> 00:10:37.664
code and you're going to end your
.env file where it says database.

182
00:10:37.664 --> 00:10:42.589
URL you're gonna replace that one with
the one that you just copied the next

183
00:10:42.589 --> 00:10:46.590
thing we need to do is we got to
add a another database to this.

184
00:10:46.590 --> 00:10:50.375
And that's because when Prisma does its
migrations it does something called shadow

185
00:10:50.375 --> 00:10:53.260
databases where like
makes another database.

186
00:10:53.260 --> 00:10:56.786
But on Heroku, for
the free Postgres that they give you,

187
00:10:56.786 --> 00:11:02.560
the user that's assigned to that does not
have the permissions to create a database.

188
00:11:02.560 --> 00:11:06.498
So the workaround is to make a another
database until Prisma to use this database

189
00:11:06.498 --> 00:11:07.908
of the shadow database, and

190
00:11:07.908 --> 00:11:11.940
this database is the real database to get
around the permission issue on Heroku.

191
00:11:11.940 --> 00:11:14.033
So that's the only drawback
of using Heroku but

192
00:11:14.033 --> 00:11:16.030
I still think it's much simpler.

193
00:11:16.030 --> 00:11:21.138
To click then to like, get some Docker
thing and deploy to like elastic or

194
00:11:21.138 --> 00:11:24.750
EC to or wherever Digital Ocean is so
much easier.

195
00:11:24.750 --> 00:11:29.330
So what we're looking for is going to be
called shadow database URL like that.

196
00:11:29.330 --> 00:11:34.411
And you're going to set that equal
to env and then whatever env

197
00:11:34.411 --> 00:11:40.773
you set in your env file, so go back to
the Heroku grab the other database URL.

198
00:11:44.117 --> 00:11:48.750
Click on settings, click on view
credentials, grab the second URL.

199
00:11:48.750 --> 00:11:53.540
Once you copy that, go back to your code,
go back to your env file.

200
00:11:53.540 --> 00:11:54.240
Make another env.

201
00:11:54.240 --> 00:11:57.883
I'm just gonna call this SHADOW_DATABASE.

202
00:12:02.562 --> 00:12:06.070
_URL and
I'm gonna set that equal to that URL.

203
00:12:06.070 --> 00:12:10.910
I'm gonna copy this EMV variable
name SHADOW_DATABASE_URL.

204
00:12:10.910 --> 00:12:17.290
We're gonna go back to the schema
Prisma and paste it here.

205
00:12:17.290 --> 00:12:22.789
Look, they ignored .env.local,
.env.development, .env test but

206
00:12:22.789 --> 00:12:28.199
not .env I guess no one uses .env
anymore because that's some old school

207
00:12:28.199 --> 00:12:33.109
thing if you've got the scope DMV
files now that's that's cool.

208
00:12:33.109 --> 00:12:37.323
Walk through the database setup
again once you run Prisma net,

209
00:12:37.323 --> 00:12:41.392
you should have a schema file
here inside the Prisma folder.

210
00:12:41.392 --> 00:12:45.986
And you should have an .nv file
on the root what you need to

211
00:12:45.986 --> 00:12:49.350
do is go to Heroku make
a new app on Heroku.

212
00:12:53.200 --> 00:12:56.570
Once you make that app you
need to go to add ons and

213
00:12:56.570 --> 00:13:01.729
add a Postgres database twice,
two Postgres database get the free one.

214
00:13:04.270 --> 00:13:09.189
And then for each one of those
databases we're gonna add them

215
00:13:09.189 --> 00:13:12.961
as environment variables
to this .env file.

216
00:13:12.961 --> 00:13:14.020
You can name these environment tables,
whatever you want.

217
00:13:14.020 --> 00:13:16.452
I recommend just keeping
the first one DATABASE_URL and

218
00:13:16.452 --> 00:13:19.160
then naming the second
one SHADOW_DATABASE_URL.

219
00:13:19.160 --> 00:13:22.229
So make sure these are the two
URLs that you got from Heroku.

220
00:13:22.229 --> 00:13:25.607
&gt;&gt; And then what is the need for
that shadow one?

221
00:13:25.607 --> 00:13:28.369
&gt;&gt; The need for the shadow one is.

222
00:13:28.369 --> 00:13:33.437
Without looking it up exactly
because there was an issue for

223
00:13:33.437 --> 00:13:37.093
this is Heroku is free Postgres database.

224
00:13:37.093 --> 00:13:41.966
The user that Heroku creates for
that database does not have

225
00:13:41.966 --> 00:13:48.500
a permission to create another
database on that Postgres instance.

226
00:13:48.500 --> 00:13:52.316
Prisma needs the ability to create
a database on the fly when it runs

227
00:13:52.316 --> 00:13:55.325
a migration because it uses that for
transactions.

228
00:13:55.325 --> 00:13:59.314
But because Heroku doesn't give you
permission based off this URL here,

229
00:13:59.314 --> 00:14:00.670
Prisma fells.

230
00:14:00.670 --> 00:14:04.324
So in order to get around that Prisma
allows us to have one database for where

231
00:14:04.324 --> 00:14:08.328
we store the data and another database for
when they make those shadow databases.

232
00:14:08.328 --> 00:14:12.290
So that way they don't have to make
a new one which Heroku will not allow.

233
00:14:12.290 --> 00:14:14.720
So we went ahead and
made the new one for them.

234
00:14:14.720 --> 00:14:17.550
And then we say use this for
the shadow uses for the regular.

235
00:14:17.550 --> 00:14:20.320
Therefore you never need
the permission to make one yourself.

236
00:14:20.320 --> 00:14:21.276
So that's the workaround.

237
00:14:21.276 --> 00:14:24.795
That's only because we're using
Heroku that doesn't have permissions.

238
00:14:24.795 --> 00:14:26.763
If you go use it locally on your computer,

239
00:14:26.763 --> 00:14:30.320
just make sure your user on Postgres
has permissions to create a database.

240
00:14:30.320 --> 00:14:32.589
So admin permission or
if you deploy it somewhere else,

241
00:14:32.589 --> 00:14:34.980
make sure that database
has admin permissions.

242
00:14:34.980 --> 00:14:36.270
And you only need one URL.

243
00:14:36.270 --> 00:14:39.322
But I tried to make this as simple
as possible by not having to log

244
00:14:39.322 --> 00:14:41.971
into a Postgres shell and
try to create an admin user and

245
00:14:41.971 --> 00:14:45.310
do all that stuff,
which is tricky if you've never done it.

246
00:14:45.310 --> 00:14:50.940
So just clicking two buttons on
a Heroku seem to be a lot simpler.

247
00:14:50.940 --> 00:14:55.747
And then the relationship between
Prisma and Heroku is really there's

248
00:14:55.747 --> 00:15:00.243
no relation Prisma doesn't even
know you're talking to Heroku.

249
00:15:00.243 --> 00:15:02.896
Prisma just needs
a database to connect to.

250
00:15:02.896 --> 00:15:06.798
All Prisma is asking is like hey,
you wanna.

251
00:15:06.798 --> 00:15:09.931
Connect to a Postgres database,
because we say providers Postgres, well,

252
00:15:09.931 --> 00:15:11.340
what's the URL to that database?

253
00:15:11.340 --> 00:15:12.970
Well, it's this environment variable.

254
00:15:12.970 --> 00:15:15.640
Okay, you have an optional
shadow database URL.

255
00:15:15.640 --> 00:15:17.280
Yep, it's this environment variable.

256
00:15:17.280 --> 00:15:21.248
It just needs a database to connect to
if you're running Postgres locally,

257
00:15:21.248 --> 00:15:24.536
these would be your local
Postgres URLs and not URLs on Heroku.

258
00:15:24.536 --> 00:15:26.997
Or anywhere you deploy
the Postgres database.

259
00:15:26.997 --> 00:15:30.709
So there actually is no relationship
between the two is that's just where our

260
00:15:30.709 --> 00:15:31.288
database.

261
00:15:31.288 --> 00:15:35.951
It's on Heroku that's the URL that we
have Prisma, just like any other ORM,

262
00:15:35.951 --> 00:15:39.486
like sequel lights, sequel lies,
bookshelf mongoose.

263
00:15:39.486 --> 00:15:41.135
They all need to know the URL for
the database.

264
00:15:41.135 --> 00:15:42.120
This is how Prisma asks for it.

