WEBVTT

1
00:00:00.230 --> 00:00:03.363
The next thing I wanna do is get
the playlist page working, so

2
00:00:03.363 --> 00:00:07.296
when you click on a playlist, we can
actually navigate to a playlist page and

3
00:00:07.296 --> 00:00:09.910
see playlists, and
then eventually see songs.

4
00:00:09.910 --> 00:00:13.611
And it could eventually click play,
and then play a song, and

5
00:00:13.611 --> 00:00:15.900
then we'll have a fully working app.

6
00:00:15.900 --> 00:00:20.874
Cool, so got everything here, well,
actually, before we do that, I just

7
00:00:20.874 --> 00:00:26.116
realized we had a bunch of fake content
in here, I forgot we marked all this out.

8
00:00:26.116 --> 00:00:28.405
So it's actually replaces with
real data from the user and

9
00:00:28.405 --> 00:00:30.324
then we'll go on to do all
the things that I said.

10
00:00:30.324 --> 00:00:31.738
I totally forgot this was fake.

11
00:00:31.738 --> 00:00:35.001
Let's replace that fake data
with some real data, so

12
00:00:35.001 --> 00:00:38.699
we'll head back into the home,
which is pages indexed, and

13
00:00:38.699 --> 00:00:41.612
we'll get rid of all this
hard coded fake data.

14
00:00:41.612 --> 00:00:45.266
And instead we'll do our useMe hook,
right?

15
00:00:45.266 --> 00:00:49.950
So we'll say const (user),
which is what I called it,

16
00:00:49.950 --> 00:00:53.767
I'm pretty sure, equals useMe, like that.

17
00:00:53.767 --> 00:00:59.166
We'll do a useMe hook, and now we actually
have the user, but this is where I said.

18
00:00:59.166 --> 00:01:03.929
I remember in our schema, we didn't
actually put a name for the user,

19
00:01:03.929 --> 00:01:08.148
so let's go back, add a first name and
a last name to the user.

20
00:01:08.148 --> 00:01:10.655
And then we'll update our seat scripts, so

21
00:01:10.655 --> 00:01:13.720
have our test user to have
a first name and a last name.

22
00:01:13.720 --> 00:01:16.973
And then we'll do a db.push
to update our database and

23
00:01:16.973 --> 00:01:20.520
then we'll get a first name and
last name that will be good.

24
00:01:20.520 --> 00:01:25.364
So go back to your schema,
go to your user model, add a first name,

25
00:01:25.364 --> 00:01:29.788
some I'm gonna say first name as a string,
it's required.

26
00:01:29.788 --> 00:01:35.554
Then last name, that's a string,
it's also required.

27
00:01:39.412 --> 00:01:44.676
So we got that, and then now,
I'm just gonna stop my server,

28
00:01:44.676 --> 00:01:49.152
I'm gonna do npx prisma db push and
see what it says.

29
00:01:49.152 --> 00:01:53.335
If it thinks we're gonna have breaking
changes like it says right here,

30
00:01:53.335 --> 00:01:54.501
you can see it says,

31
00:01:54.501 --> 00:01:59.114
added the required column first name to
the user table without a default value.

32
00:01:59.114 --> 00:02:04.835
There are four rows in this table that is
not possible to execute this step at it.

33
00:02:04.835 --> 00:02:07.755
So it's basically said, hey, do you
wanna supply the change to the database?

34
00:02:07.755 --> 00:02:11.313
You're gonna have some corrupted data,
you're gonna have some data loss,

35
00:02:11.313 --> 00:02:13.292
or no, and
do you wanna go run a migration?

36
00:02:13.292 --> 00:02:19.240
So this is where you would say no,
[LAUGH] all right, so you don't get fired.

37
00:02:19.240 --> 00:02:22.773
[LAUGH] But because I don't really care
about those tests using the database,

38
00:02:22.773 --> 00:02:23.867
I'm gonna hit, yeah.

39
00:02:23.867 --> 00:02:28.598
But typically, you would say no here and
then you will go run a migration instead.

40
00:02:28.598 --> 00:02:32.209
You wouldn't do this db.push thing,
you would go run a migration that will, in

41
00:02:32.209 --> 00:02:36.050
the case of first name, last name, I don't
know what you would do in that migration.

42
00:02:36.050 --> 00:02:38.339
It's like how do you know their first
name and last name, I don't know.

43
00:02:38.339 --> 00:02:39.919
I guess you wouldn't make it required,

44
00:02:39.919 --> 00:02:42.484
until you figured out all the other
people in the database first.

45
00:02:42.484 --> 00:02:44.606
And then going forward,
everything will be required, so

46
00:02:44.606 --> 00:02:46.260
you have to figure that part out.

47
00:02:46.260 --> 00:02:48.007
It's a tricky part, but yeah,

48
00:02:48.007 --> 00:02:51.710
I don't really care about the fake
people in my database right now.

49
00:02:51.710 --> 00:02:53.949
So I'm gonna hit, yeah,
please, I don't care.

50
00:02:53.949 --> 00:02:56.080
So now, it's like, cool, you're in sync.

51
00:02:56.080 --> 00:03:03.196
I hit, yes, we're good to go, and
I'm probably just gonna do a reset,

52
00:03:03.196 --> 00:03:07.162
anyway, that's why I didn't care, so

53
00:03:07.162 --> 00:03:12.210
I'm just going to do a,
npx prisma migrate reset.

54
00:03:12.210 --> 00:03:15.290
So this is gonna basically run
through all the migrations again and

55
00:03:15.290 --> 00:03:17.162
delete everything out of the database.

56
00:03:17.162 --> 00:03:21.110
Which is fine cuz we have a seed script
that's gonna put it back in, yes.

57
00:03:21.110 --> 00:03:23.569
&gt;&gt; Before we run this migrate,
should we add the first and last name for

58
00:03:23.569 --> 00:03:24.790
the test user to the seed script?

59
00:03:24.790 --> 00:03:30.446
&gt;&gt; To the seed script, yes, so I'm so glad
you're thinking of that, yes, exactly.

60
00:03:30.446 --> 00:03:36.509
So let's go to the seed scripts
which is in prisma, where's my,

61
00:03:36.509 --> 00:03:41.802
there we go, prisma seed,
right, to where we're doing

62
00:03:41.802 --> 00:03:47.792
the user stuff, Right here, and we're
gonna add a first name and last name.

63
00:03:47.792 --> 00:03:50.528
Add your name, if you want to.

64
00:03:50.528 --> 00:03:56.987
First name, that's gonna be,
That's gonna be me,

65
00:03:56.987 --> 00:04:00.986
and then last name,
that's also gonna be me.

66
00:04:00.986 --> 00:04:06.374
There we go, so we got a first name and
last name to the seed scripts.

67
00:04:09.991 --> 00:04:12.983
And then now I can prisma migrate reset,

68
00:04:12.983 --> 00:04:16.591
which will literally get
rid of everything, and

69
00:04:16.591 --> 00:04:22.148
run the seed script again, and
the client again, and all the stuff again.

70
00:04:26.014 --> 00:04:29.710
So right now, it failed because it's
saying the first name does not exist in

71
00:04:29.710 --> 00:04:30.883
the current database.

72
00:04:30.883 --> 00:04:33.955
That's because I did a db.push,
I didn't do a migrate, so

73
00:04:33.955 --> 00:04:35.354
I forgot about that stuff.

74
00:04:35.354 --> 00:04:39.273
We actually had to run a migration because
I'm trying to delete the database.

75
00:04:39.273 --> 00:04:43.480
Somebody deletes the database, it tries
to replay all the migrations in history.

76
00:04:43.480 --> 00:04:46.278
But because db.push doesn't add
a history to the migration,

77
00:04:46.278 --> 00:04:49.939
it didn't know about that change, so
there's really only two ways around that.

78
00:04:49.939 --> 00:04:53.774
I could just delete all the migrations and
completely drop the database, and

79
00:04:53.774 --> 00:04:55.316
just start over from scratch.

80
00:04:55.316 --> 00:05:00.259
Or I could just do what it wants me to
do and do a migrate, so I'll just do it.

81
00:05:00.259 --> 00:05:07.027
Migrates, Dev, and it's gonna ask me for,

82
00:05:07.027 --> 00:05:11.953
what do you wanna call this,
what do you wanna do?

83
00:05:11.953 --> 00:05:17.746
So it's gonna go through that,
so I'll name this migration,

84
00:05:17.746 --> 00:05:21.917
I'm gonna call it user-names, like that.

85
00:05:25.706 --> 00:05:29.110
Okay, cool, so now we got
the migration called usernames or

86
00:05:29.110 --> 00:05:30.522
whatever you called it.

87
00:05:30.522 --> 00:05:36.012
The SQL files is created, so now I
should be able to reset this database,

88
00:05:36.012 --> 00:05:39.170
and yes, I do wanna reset this database.

89
00:05:39.170 --> 00:05:43.573
And once you run that, you should have
your migrations, you should have your new

90
00:05:43.573 --> 00:05:46.832
seed, which is your user first name and
last name in there.

91
00:05:46.832 --> 00:05:51.817
So now, obviously,
if I run this server, technically,

92
00:05:51.817 --> 00:05:56.419
my jtt should not be good and
it should just be broken.

93
00:05:56.419 --> 00:05:59.353
But it's actually still gonna work,
because I know for

94
00:05:59.353 --> 00:06:01.862
a fact that even though
I dropped the database.

95
00:06:01.862 --> 00:06:05.308
Previously my user had an id of 1,
and now because I see it again,

96
00:06:05.308 --> 00:06:07.266
that user still has the same id of 1.

97
00:06:07.266 --> 00:06:10.786
So technically, it's a different user,
but it's the same user id of 1, so

98
00:06:10.786 --> 00:06:13.620
I don't actually have to sign in again,
it should just work.

99
00:06:15.420 --> 00:06:19.872
Because the ids are enumerated from
1 till whatever, this is mongo,

100
00:06:19.872 --> 00:06:24.180
you have to sign in again,
because they don't start at 1 and go up.

101
00:06:24.180 --> 00:06:27.888
They're just random every time,
but not this case.

102
00:06:27.888 --> 00:06:29.703
Okay, so we're back here.

103
00:06:29.703 --> 00:06:34.269
Now, we can actually get me in
the index file, so we have our user and

104
00:06:34.269 --> 00:06:37.735
I'm just gonna start
replacing some of these out.

105
00:06:37.735 --> 00:06:45.058
So title would be, User.first

106
00:06:45.058 --> 00:06:49.768
name space user.last name.

107
00:06:55.538 --> 00:06:57.729
Like that, there we go.

108
00:06:57.729 --> 00:07:02.601
And it should still say the same
thing cuz it's the same thing.

109
00:07:02.601 --> 00:07:07.044
Right now, it's freaking out because I'm
assuming that the user is always here.

110
00:07:07.044 --> 00:07:09.161
But remember, this is asynchronous, so

111
00:07:09.161 --> 00:07:12.067
there's a isLoading state
here that I'm not handling.

112
00:07:12.067 --> 00:07:17.461
So this is kind of where, I think this
comes down to a design aesthetic of,

113
00:07:17.461 --> 00:07:20.506
do you just not wanna show the whole page?

114
00:07:20.506 --> 00:07:22.760
And that could show what that looks like,
they'll be like a flash,

115
00:07:22.760 --> 00:07:24.210
it'll look pretty gross.

116
00:07:24.210 --> 00:07:28.270
Do you wanna show what people
are doing now with skeleton loaders,

117
00:07:28.270 --> 00:07:30.878
chakra has the skeleton things we can use,

118
00:07:30.878 --> 00:07:34.374
which is pretty cool, or
somewhere in between, right?

119
00:07:34.374 --> 00:07:37.340
So basically, the problem is the user
is not here yet because we're loading.

120
00:07:37.340 --> 00:07:40.030
So if I were to,
I'll show you what this looks like.

121
00:07:40.030 --> 00:07:44.757
So if I said, if is loading and
I just return no,

122
00:07:44.757 --> 00:07:48.787
you're gonna see a huge flash, right?

123
00:07:48.787 --> 00:07:56.330
It's gonna be, can be pretty jarring if I
do this, that flash right there, right?

124
00:07:56.330 --> 00:08:00.560
You don't want that, right, so
probably don't want that flash.

125
00:08:00.560 --> 00:08:03.882
So returning those probably
not the best case here,

126
00:08:03.882 --> 00:08:06.080
something a little more optimal.

127
00:08:06.080 --> 00:08:10.780
So I think a good thing here might
just be you can just, for now,

128
00:08:10.780 --> 00:08:15.928
you can just put a question mark here
cuz we're using type scripts and

129
00:08:15.928 --> 00:08:18.167
it'll kind of just note out.

130
00:08:18.167 --> 00:08:21.421
And then it'll just load, it'll never
once, but you still get that undefined,

131
00:08:21.421 --> 00:08:22.753
undefined there, you see that?

132
00:08:22.753 --> 00:08:25.447
It's really quick but
you still see right there,

133
00:08:25.447 --> 00:08:30.440
you saw that undefined, undefined right
there because it's not there yet.

134
00:08:30.440 --> 00:08:33.862
So really what you probably
wanna do is have like,

135
00:08:33.862 --> 00:08:38.423
you can bake it into the gradient
layout where there's a spinner or

136
00:08:38.423 --> 00:08:40.879
something like that or a skeleton.

137
00:08:40.879 --> 00:08:41.811
We could probably do that.

138
00:08:41.811 --> 00:08:46.176
I think that's gonna take a little longer
or maybe not, you can add a skeleton here,

139
00:08:46.176 --> 00:08:47.780
chakra has one.

140
00:08:47.780 --> 00:08:50.615
But yeah, I think that just
comes down to what you and

141
00:08:50.615 --> 00:08:53.740
your company wants to do
with the loading state.

142
00:08:53.740 --> 00:08:55.844
For me, I'm just gonna just
question mark it for now.

143
00:08:55.844 --> 00:08:58.637
If we get some time, we can come back and
make it look super dope, but

144
00:08:58.637 --> 00:09:00.600
I wanna get to actually playing the music.

145
00:09:00.600 --> 00:09:06.169
So we'll just do that and
just have a sub-optimal first pass,

146
00:09:06.169 --> 00:09:11.900
I guess, but regardless,
you do have an error here.

147
00:09:11.900 --> 00:09:14.700
If you do have an error here, then you
gotta think of how you wanna handle that.

148
00:09:14.700 --> 00:09:18.696
So is, are you gonna show an error
message to the user via pop up or

149
00:09:18.696 --> 00:09:22.473
something like that or
navigate to an error page somewhere?

150
00:09:22.473 --> 00:09:25.130
But we're just optimizing for
it to be there for now.

151
00:09:26.780 --> 00:09:27.589
And as far as image,

152
00:09:27.589 --> 00:09:30.170
users don't have images right now,
we could do the same thing.

153
00:09:30.170 --> 00:09:32.200
We just did add avatar for images there.

154
00:09:32.200 --> 00:09:35.391
But because we don't have an image,
uploading functionality,

155
00:09:35.391 --> 00:09:38.650
it would still just be one of these,
like images you found online.

156
00:09:38.650 --> 00:09:43.206
So there's no point of
doing that right now.

157
00:09:46.954 --> 00:09:50.811
We could get the information for the
playlist here, if we wanted to do that,

158
00:09:50.811 --> 00:09:52.089
that'd be really cool.

159
00:09:52.089 --> 00:09:56.742
So we could go back and
change the me functionality to also get

160
00:09:56.742 --> 00:10:00.857
the user's playlist count and
we can send that back.

161
00:10:00.857 --> 00:10:04.304
So that's actually something that might be
useful, so we're not just making this up.

162
00:10:04.304 --> 00:10:06.185
So let's do that.

163
00:10:06.185 --> 00:10:09.776
We could go back to the API, go to me, and

164
00:10:09.776 --> 00:10:14.019
right now,
we're just sending back the user.

165
00:10:14.019 --> 00:10:18.571
But instead of just sending back the user,
we can import prisma here.

166
00:10:19.922 --> 00:10:24.160
And we can say, let's get the playlist
count, so we can say playlists.

167
00:10:26.548 --> 00:10:30.778
And I'm pretty sure we can just say,

168
00:10:30.778 --> 00:10:36.101
playlistsCount =, and you make this async,

169
00:10:36.101 --> 00:10:40.206
await prisma dot, let's do user.

170
00:10:40.206 --> 00:10:44.830
User dot, no, no, no,
we need to do playlist, playlists dot.

171
00:10:44.830 --> 00:10:47.829
And you can see there's a count method,
so you could say count, and

172
00:10:47.829 --> 00:10:50.310
this will just return a number,
so we could say counts.

173
00:10:50.310 --> 00:10:53.721
And then where userId is user.id, so

174
00:10:53.721 --> 00:10:59.110
let's give us a playlist count,
which is really cool.

175
00:10:59.110 --> 00:11:07.059
We can just verify that by
logging this playlistsCount.

176
00:11:07.059 --> 00:11:10.610
So do that,
I'll leave it here for a minute.

177
00:11:11.710 --> 00:11:13.570
We're just using the count method,

178
00:11:13.570 --> 00:11:16.840
which literally does like
the same thing as find many.

179
00:11:16.840 --> 00:11:19.841
But instead of returning the things
that are found in return the count,

180
00:11:19.841 --> 00:11:22.403
which I mean, you could just
do yourself by doing .length.

181
00:11:22.403 --> 00:11:25.169
But if you had 100,000
things in the database,

182
00:11:25.169 --> 00:11:28.190
you don't wanna load that up in memory,
things like that.

183
00:11:28.190 --> 00:11:29.735
So you're saving on that,

184
00:11:29.735 --> 00:11:34.180
but as far as the database is concerned,
it's still looking up for the query.

185
00:11:35.340 --> 00:11:37.974
It's just not returning all the payload.

186
00:11:39.130 --> 00:11:42.591
So we got that,
this thing is freaking out.

187
00:11:42.591 --> 00:11:47.590
I'm sure I reached maximum, here we go,
connection, so I gotta restart.

188
00:11:50.699 --> 00:11:51.752
There we go.

189
00:11:54.844 --> 00:11:57.920
And now if we go back to the terminal,

190
00:11:57.920 --> 00:12:03.492
get past this key error that no one
wants to look at, where is it at?

191
00:12:03.492 --> 00:12:08.390
Let me refresh this, there we go,
there it is, I didn't see it.

192
00:12:08.390 --> 00:12:10.170
10, so I have 10 playlist.

193
00:12:10.170 --> 00:12:16.551
So that totally works, now we're just
gonna send that back with the user,

194
00:12:16.551 --> 00:12:21.232
so I'll say,
let me get the user plus playlistCount.

195
00:12:21.232 --> 00:12:26.908
So we can go to index, and we can get
rid of this 15 public playlists and

196
00:12:26.908 --> 00:12:29.660
we can replace this with a string,

197
00:12:33.627 --> 00:12:36.794
That says,

198
00:12:36.794 --> 00:12:45.988
user.playlistCount like that.

199
00:12:52.230 --> 00:12:55.641
It's not called playlistCount,
what is it called?

200
00:12:55.641 --> 00:12:57.361
That is what it is called.

201
00:13:00.779 --> 00:13:03.474
PlaylistsCount, plural.

202
00:13:06.504 --> 00:13:09.411
There we go, so 10 public playlists.

