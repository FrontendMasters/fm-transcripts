WEBVTT

1
00:00:00.150 --> 00:00:03.029
So far all we've done is with
some front end stuff, and

2
00:00:03.029 --> 00:00:07.360
now we're working on database stuff, and
then eventually we'll get to the API.

3
00:00:07.360 --> 00:00:11.030
So, haven't touched that part yet,
I'll let you know.

4
00:00:11.030 --> 00:00:16.305
And then as far as some of the errors
people were having with the C-script,

5
00:00:16.305 --> 00:00:20.757
just make sure you have your C TS
file inside the Prisma folder.

6
00:00:20.757 --> 00:00:26.218
And that you successfully created this
Prisma command in your package JSON,

7
00:00:26.218 --> 00:00:31.861
which should be in your notes file, and
that you run the MPX Prisma dBc command.

8
00:00:31.861 --> 00:00:34.490
And you should be good
to go as far as seeding.

9
00:00:34.490 --> 00:00:37.460
And yeah, so
what I'll do is I'll continue on and

10
00:00:37.460 --> 00:00:39.950
I'll continue to push this up to GitHub.

11
00:00:39.950 --> 00:00:44.742
So if you ever fall back and you just feel
you can't catch up, no worries, you can

12
00:00:44.742 --> 00:00:49.693
pull down the steps from GitHub that I'm
putting up every single time and catch up.

13
00:00:49.693 --> 00:00:52.080
If there's any questions,
as always just ask.

14
00:00:53.300 --> 00:00:56.688
Before I start anyone here have any
questions on either side that we've

15
00:00:56.688 --> 00:00:57.312
been doing?

16
00:01:00.181 --> 00:01:05.239
Okay, all right, and the last thing I want
to do now that we have this user is I

17
00:01:05.239 --> 00:01:11.090
want to give this user some playlists and
I want those playlists to have songs.

18
00:01:11.090 --> 00:01:14.610
So let's do that, so the first thing
is I need to get all the songs.

19
00:01:14.610 --> 00:01:21.470
So I'll do that by saying const, let me,
I hate writing at the bottom of a file.

20
00:01:21.470 --> 00:01:26.110
So, let me bring this up,
here we go, const songs.

21
00:01:26.110 --> 00:01:34.850
That's gonna equals prisma.song.findmany.

22
00:01:34.850 --> 00:01:37.290
And I just want all the songs,
so I'm gonna get all the songs.

23
00:01:37.290 --> 00:01:39.880
So, my filter is just
gonna be an empty object.

24
00:01:39.880 --> 00:01:42.490
So give me all the songs in the database.

25
00:01:42.490 --> 00:01:46.452
And basically it's gonna add all the songs
in a database, which I think is seven or

26
00:01:46.452 --> 00:01:47.500
eight at this point.

27
00:01:47.500 --> 00:01:49.099
I don't know how many
songs I put in there,

28
00:01:49.099 --> 00:01:52.290
actually took me a long time to go
find those songs and download them.

29
00:01:52.290 --> 00:01:55.679
I wish I would add it more [LAUGH] it
actually took me a long time just to get

30
00:01:55.679 --> 00:01:59.130
those eight royalty free songs
that didn't sound really bad.

31
00:01:59.130 --> 00:02:03.953
Okay, so we got songs and
now I want to await promise.all, and

32
00:02:03.953 --> 00:02:10.414
the reason I'm doing promise.all because,
I don't know if anyone caught this but

33
00:02:10.414 --> 00:02:14.967
you can actually do
prisma.some.entity.create many.

34
00:02:14.967 --> 00:02:18.543
So I could just create many and create
all the playlists at once versus doing

35
00:02:18.543 --> 00:02:21.640
promise.all and
creating them one at a time.

36
00:02:21.640 --> 00:02:22.520
But if you do that,

37
00:02:22.520 --> 00:02:25.830
you don't get it from my experience and
I just couldn't get past this.

38
00:02:25.830 --> 00:02:30.520
You can't do a nested create whereas
you're creating more than one

39
00:02:30.520 --> 00:02:35.041
thing at a time, so in the case of
an artist we created an artist and

40
00:02:35.041 --> 00:02:37.440
each artist created songs.

41
00:02:37.440 --> 00:02:41.718
We couldn't do that if we did a create
many, so we couldn't create many artists,

42
00:02:41.718 --> 00:02:43.715
that also created many songs.

43
00:02:43.715 --> 00:02:46.595
That didn't work for me,
every time I tried to do that will break.

44
00:02:46.595 --> 00:02:48.915
So I had to create each
artist individually, so

45
00:02:48.915 --> 00:02:51.555
they can also create
songs at the same time.

46
00:02:51.555 --> 00:02:54.505
So if you wanna do nested rights I
don't think you can do create many.

47
00:02:54.505 --> 00:02:58.810
So that's why I'm doing promise.all or
I'm creating one at a time and

48
00:02:58.810 --> 00:03:00.830
then they all do a nested create.

49
00:03:02.590 --> 00:03:07.347
So, promise.all, and
what we wanna do on this is I

50
00:03:07.347 --> 00:03:11.552
don't know we can create
any places we want,

51
00:03:11.552 --> 00:03:15.220
let's create ten playlists, right?

52
00:03:15.220 --> 00:03:20.148
So we'll say we'll create a new array,
we'll put 10 in here,

53
00:03:20.148 --> 00:03:25.974
we'll say .fill again,
doesn't matter where you put in fill one,

54
00:03:25.974 --> 00:03:28.142
we're gonna map over that.

55
00:03:28.142 --> 00:03:32.708
I don't care about the first
argument because that's literally

56
00:03:32.708 --> 00:03:36.858
always gonna be the number one,
only care about the index,

57
00:03:36.858 --> 00:03:40.610
I guess I need some parentheses in here,
there we go.

58
00:03:40.610 --> 00:03:43.230
This is gonna be an async
function in the map callback.

59
00:03:43.230 --> 00:03:48.063
And then what I'm gonna do is for

60
00:03:48.063 --> 00:03:53.612
each one of these, I'm gonna return

61
00:03:53.612 --> 00:04:00.424
a prisma.playlists.create, like that.

62
00:04:00.424 --> 00:04:03.745
So I create a playlist, and for create,

63
00:04:03.745 --> 00:04:09.230
we don't have to put the where clause,
we just put the data.

64
00:04:09.230 --> 00:04:14.714
And the reason I'm doing create
an up cert this time is because

65
00:04:14.714 --> 00:04:20.097
you can only do up cert if you
can query for something unique.

66
00:04:20.097 --> 00:04:24.898
But if you go back and
look at the playlist schema

67
00:04:24.898 --> 00:04:29.950
only thing unique about it is the id,
that's it.

68
00:04:29.950 --> 00:04:32.000
And I don't have the ids because
they haven't been created yet.

69
00:04:32.000 --> 00:04:34.720
So I actually can't search for anything.

70
00:04:34.720 --> 00:04:36.963
So because of that,
I might as well just create, so

71
00:04:36.963 --> 00:04:38.540
that's why I'm not doing up cert.

72
00:04:38.540 --> 00:04:42.118
Whereas with the artists I was able
to use the names for the where, and

73
00:04:42.118 --> 00:04:46.374
then for the user, I was able to use the
email for the where, but for the playlist,

74
00:04:46.374 --> 00:04:50.040
there is nothing unique about it
except for the id which I don't have.

75
00:04:50.040 --> 00:04:54.020
So therefore I cannot do a query to
up cert it, it won't find anything.

76
00:04:54.020 --> 00:04:57.400
So what's the point of doing up cert, it's
always gonna create the model just create.

77
00:04:57.400 --> 00:05:01.730
So, that's what I'm doing,
I'm gonna change this back to create here.

78
00:05:01.730 --> 00:05:05.462
So for each playlist I wanna create,
when you do a create in Prisma,

79
00:05:05.462 --> 00:05:09.128
you always put the data, so
this is what you're passing and the for

80
00:05:09.128 --> 00:05:13.750
this, this is where the autocomplete
comes in, it's pretty cool.

81
00:05:13.750 --> 00:05:17.850
You can see that,
we'll first of all, it's fixed that.

82
00:05:17.850 --> 00:05:21.531
And then if I go here, it's got all
these types that were generated for me,

83
00:05:21.531 --> 00:05:22.650
which is really cool.

84
00:05:22.650 --> 00:05:25.590
But if you start typing then you'll see,
so we know a playlist has a name.

85
00:05:25.590 --> 00:05:31.093
So you can see it says name string,
so I'm gonna say that's gonna be,

86
00:05:31.093 --> 00:05:35.477
the name is gonna be,
let's call it playlist number and

87
00:05:35.477 --> 00:05:38.960
then i+1, so it's not starting with 0.

88
00:05:40.160 --> 00:05:41.420
So that'd be the playlist's name.

89
00:05:42.520 --> 00:05:47.274
And then what else does a playlist have,
a playlist has songs and

90
00:05:47.274 --> 00:05:49.760
it has a user and a user id.

91
00:05:49.760 --> 00:05:53.660
So, what we'll do is we'll say user id.

92
00:05:53.660 --> 00:06:00.450
And that's gonna be this user,
that id, like that.

93
00:06:00.450 --> 00:06:05.472
So, we got that, but it actually,
I think if you do it this way,

94
00:06:05.472 --> 00:06:10.681
I'm not sure if Prisma will make
the connection between the user or

95
00:06:10.681 --> 00:06:13.350
it'll just store the id.

96
00:06:13.350 --> 00:06:17.242
So what I've been doing, this is what I've
always done is I use this other thing

97
00:06:17.242 --> 00:06:20.160
well, I'll say, so
I'm saying user id, I'll say user.

98
00:06:20.160 --> 00:06:25.143
And then I'll come down here and
I'll say connect that I

99
00:06:25.143 --> 00:06:29.210
wanna connect the user
whose id is user.id.

100
00:06:29.210 --> 00:06:33.749
So I've been doing that to
make sure that Prisma connects

101
00:06:33.749 --> 00:06:38.310
the user with this id to
the user on this playlist.

102
00:06:38.310 --> 00:06:42.300
The inverse might also work, but
I've always done it this way.

103
00:06:42.300 --> 00:06:45.920
That's what their Doc's recommend,
so I've always done it this way.

104
00:06:45.920 --> 00:06:51.580
But if someone wants to run user id equals
user.id and see that works, let me know.

105
00:06:51.580 --> 00:06:54.637
But I've always done it this way,
I've always done the connect,

106
00:06:54.637 --> 00:06:58.200
there also this other one is called
connect or create, which is really cool.

107
00:06:58.200 --> 00:07:01.670
So, you can make a user,
you can connect the user with this id but

108
00:07:01.670 --> 00:07:05.470
if it didn't exist, also make a user and
put the user stuff here too.

109
00:07:05.470 --> 00:07:08.350
It gets really crazy with Prisma,
I'm like, wow, this is really,

110
00:07:08.350 --> 00:07:10.340
you know how had this is
to do without Prismas?

111
00:07:10.340 --> 00:07:17.060
It's incredibly difficult to do this,
so yeah, really cool.

112
00:07:17.060 --> 00:07:19.940
So we got the user there,
and then we got the songs.

113
00:07:19.940 --> 00:07:21.680
We're also gonna do the same
thing with the songs.

114
00:07:21.680 --> 00:07:25.617
Because we all ready created the songs,
so we actually do have to do connect,

115
00:07:25.617 --> 00:07:27.140
not connect or create.

116
00:07:27.140 --> 00:07:32.640
We'll say connect, and we want to connect
all these songs, so I'll say songs.map.

117
00:07:32.640 --> 00:07:37.580
And for each song,
I'm gonna just put their ids, so

118
00:07:37.580 --> 00:07:40.739
I'll just say, id is song.id.

119
00:07:44.379 --> 00:07:49.272
So this is saying, create ten playlists
whose names are playlist whatever

120
00:07:49.272 --> 00:07:54.570
number that have a user whose id is
this one, connect those two together.

121
00:07:54.570 --> 00:07:58.853
And then it has an array of songs whose
values are an array of the song ids,

122
00:07:58.853 --> 00:07:59.849
connect those.

123
00:07:59.849 --> 00:08:04.752
So now they're all connected, they have
a relationship in the database now

124
00:08:04.752 --> 00:08:09.819
which is really cool, I'm trying to think
what the SQL query for this will be?

125
00:08:09.819 --> 00:08:14.860
It would be insane, it would probably take
someone a day to write the SQL query for

126
00:08:14.860 --> 00:08:18.581
this, I think that would pretty
much all we need to do this.

127
00:08:18.581 --> 00:08:23.318
So, I'm gonna save it and
I'm going to run this C-script again, and

128
00:08:23.318 --> 00:08:28.159
we'll stop the studio, run the C-script
to see if we broke anything.

129
00:08:32.195 --> 00:08:35.350
Everything looks good,
I'm gonna run the studio one more time.

130
00:08:35.350 --> 00:08:42.570
I'm gonna go into our playlist,
looks like we have ten playlists.

131
00:08:42.570 --> 00:08:45.720
That's really cool, so that seem to work.

132
00:08:45.720 --> 00:08:47.630
And then you can see that
they're connected to this user.

133
00:08:49.160 --> 00:08:53.877
And yeah, seems to work, let's connects
to the user, then I should be able to

134
00:08:53.877 --> 00:08:58.250
go the other way around and go to a user
and see if they have any playlists.

135
00:08:58.250 --> 00:09:02.480
Yeah, it looks they have ten playlists,
so that also works, pretty cool.

