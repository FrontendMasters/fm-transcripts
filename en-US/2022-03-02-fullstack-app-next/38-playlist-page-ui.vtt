WEBVTT

1
00:00:00.020 --> 00:00:02.360
We're gonna continue working
on the playlist page,

2
00:00:02.360 --> 00:00:04.236
by using the gradient layout that we have.

3
00:00:04.236 --> 00:00:07.840
And then creating a songs table,
where we have all of our songs and,

4
00:00:07.840 --> 00:00:11.780
hopefully it looks amazing, and
then we can get the songs playing later.

5
00:00:11.780 --> 00:00:15.212
So what we'll do is we'll
head over to our code, and

6
00:00:15.212 --> 00:00:18.180
we'll start working on this playlist page.

7
00:00:18.180 --> 00:00:21.584
So I'm gonna get rid of this
div which is super gross and

8
00:00:21.584 --> 00:00:26.255
I'm gonna use this gradient layout
that we made, which is super awesome.

9
00:00:26.255 --> 00:00:28.793
And we can start filling out
all the things that have to go

10
00:00:28.793 --> 00:00:30.098
into this gradient layout.

11
00:00:30.098 --> 00:00:35.065
So we know that there's a color
that needs to go in here,

12
00:00:35.065 --> 00:00:41.419
I kind of want the playlist to be
different colors for different pages.

13
00:00:41.419 --> 00:00:45.401
So I'm gonna create like a little
generic random color generator, so

14
00:00:45.401 --> 00:00:48.042
I'm going to do the outside
of the component.

15
00:00:48.042 --> 00:00:52.377
So, I'm just gonna call it get
background color like that, and

16
00:00:52.377 --> 00:00:56.329
it's just gonna be a function
that takes in a playlist ID.

17
00:00:56.329 --> 00:00:59.534
So I can be like deterministic or
somewhat deterministic,

18
00:00:59.534 --> 00:01:02.429
I'm not gonna write some
deterministic algorithm.

19
00:01:02.429 --> 00:01:06.013
To generate an index for an array
to get a color that's too much so,

20
00:01:06.013 --> 00:01:09.795
we'll just say colors, and
that's just gonna be an array of colors.

21
00:01:09.795 --> 00:01:13.420
And I'll put all the colors that I know
that Chakra has which is red, green,

22
00:01:13.420 --> 00:01:14.224
blue, orange.

23
00:01:23.161 --> 00:01:28.242
Purple, gray, what else do they have?

24
00:01:28.242 --> 00:01:34.569
I feel I'm missing something, other ones
they have teal, yellow, that's fine.

25
00:01:34.569 --> 00:01:38.648
So we have all those, and then what I'm
gonna do is I'm just gonna return colors.

26
00:01:38.648 --> 00:01:42.358
Whatever the ID that you passed me,
minus 1,

27
00:01:42.358 --> 00:01:46.940
because no ID starts with 0 but
the array starts with 0.

28
00:01:46.940 --> 00:01:50.992
So we'll never see red in this
case unless I do minus 1, or

29
00:01:50.992 --> 00:01:53.992
if the ID is greater
than anything in here.

30
00:01:53.992 --> 00:01:57.020
And this is where the randomness comes in,

31
00:01:57.020 --> 00:02:01.992
we'll just say colors,
we'll do you math.floor, math.random,

32
00:02:05.414 --> 00:02:08.150
Times color.length.

33
00:02:08.150 --> 00:02:12.108
So just give us a random color
if the ID doesn't exist, so

34
00:02:12.108 --> 00:02:17.070
this way we can have a somewhat
deterministic color for our playlists.

35
00:02:17.070 --> 00:02:20.086
And they'll all be different enough
to what we switch between them,

36
00:02:20.086 --> 00:02:21.386
we won't see the same color.

37
00:02:27.062 --> 00:02:30.815
So that'll be our get background color,
so then for

38
00:02:30.815 --> 00:02:33.813
our GradientLayout, go back down here.

39
00:02:35.841 --> 00:02:42.734
I can just say const color
= getGBColor(playlist.id),

40
00:02:42.734 --> 00:02:46.525
that could pass this in as a prop.

41
00:02:46.525 --> 00:02:51.877
So now I can to say color, it's going to
be 'color' like that, and I'll just put

42
00:02:51.877 --> 00:02:57.168
it in a div right here, so it just stays
there for a minute, oops, not like that.

43
00:02:57.168 --> 00:03:01.502
Like that there we go, and
I think the imports no I already imported

44
00:03:01.502 --> 00:03:06.212
GradientLayout it's just freaking out
cuz I didn't put all the props in,

45
00:03:06.212 --> 00:03:07.954
but that's totally fine.

46
00:03:09.935 --> 00:03:12.716
So once we have that I'm just gonna
to go see what it looks like,

47
00:03:12.716 --> 00:03:16.032
once I go through all the playlists and
make sure the colors are switching.

48
00:03:16.032 --> 00:03:17.360
So let's check it out, npm run dev,

49
00:03:23.248 --> 00:03:27.797
Refresh this thing, and there we go,

50
00:03:27.797 --> 00:03:31.067
that's Playlist ID of 8,

51
00:03:31.067 --> 00:03:35.629
and playlist ID of 10, there we go.

52
00:03:35.629 --> 00:03:42.302
So now it's switching colors, depending on
what playlists you click on, pretty cool.

53
00:03:46.456 --> 00:03:50.375
Okay, so now we got to color switching
our playlists, we got the GradientLayout.

54
00:03:50.375 --> 00:03:54.664
Now we need to fill out the top section
just like we did with the homepage, and

55
00:03:54.664 --> 00:03:57.692
then we can worry about the song table,
afterwards.

56
00:03:57.692 --> 00:04:01.184
So let's do that, so the other prompts for

57
00:04:01.184 --> 00:04:06.329
this GradientLayout included,
if it was a round image or not.

58
00:04:06.329 --> 00:04:10.342
So I mean by default it's false,
but we'll just be explicit,

59
00:04:10.342 --> 00:04:13.081
false on the round image cuz it's square.

60
00:04:13.081 --> 00:04:18.231
We need a title,
that's gotta be the playlist.name,

61
00:04:18.231 --> 00:04:23.942
we need a subtitle,
that's just gonna be called playlists.

62
00:04:23.942 --> 00:04:28.946
Literally the word playlist,
we need a description,

63
00:04:28.946 --> 00:04:32.329
so we'll put a description in here.

64
00:04:32.329 --> 00:04:36.694
And for the description, we'll say,

65
00:04:36.694 --> 00:04:43.570
how many songs there are, so
we'll say description will be,

66
00:04:43.570 --> 00:04:48.344
{playlist.songs.length}, songs.

67
00:04:48.344 --> 00:04:52.398
So that'll sum number of songs,
and that'll be the description, so

68
00:04:52.398 --> 00:04:54.129
I'll save that, format it.

69
00:04:57.398 --> 00:05:00.671
And then for the image,
cuz playlists don't have images right now,

70
00:05:00.671 --> 00:05:03.501
cuz we just don't upload images and
things like like that.

71
00:05:03.501 --> 00:05:07.540
And because this is the client
side Spotify experience,

72
00:05:07.540 --> 00:05:11.674
which assumes that the songs and
stuff was already there.

73
00:05:11.674 --> 00:05:18.010
We'll just hard code some placeholder
image I have we can use https://,

74
00:05:18.010 --> 00:05:24.455
there's this thing called picsum.photos,
and we'll just say /400.

75
00:05:24.455 --> 00:05:27.815
And then you can do a query
string of random, and

76
00:05:27.815 --> 00:05:31.511
then to make sure it's
deterministically random,

77
00:05:31.511 --> 00:05:37.439
we can use the playlist,
.id, so we'll do that.

78
00:05:37.439 --> 00:05:40.650
Now, it'll just give us like a random
image for every single playlist.

79
00:05:40.650 --> 00:05:42.833
But the same playlist will always have
the same image, until you refresh.

80
00:05:49.821 --> 00:05:54.413
So once we have that, we can go back
to our playlists and there we go,

81
00:05:54.413 --> 00:05:57.890
we got our nice playlists,
we have our image here.

82
00:05:57.890 --> 00:06:01.233
We got the name of the playlist, we
have our title, we have our description.

83
00:06:01.233 --> 00:06:03.652
And if we click on a different one, and

84
00:06:03.652 --> 00:06:06.911
go to different playlists
with a different image.

85
00:06:11.420 --> 00:06:14.631
And if you look at the design, that's
pretty close, I mean there's a lot more

86
00:06:14.631 --> 00:06:17.127
description going on here
information that we don't have.

87
00:06:17.127 --> 00:06:21.531
But we got our square image,
we have our title, we have the subtitle,

88
00:06:21.531 --> 00:06:22.960
we got our gradients.

89
00:06:22.960 --> 00:06:25.398
And next thing we need is our sound, or

90
00:06:25.398 --> 00:06:28.380
our songs table is what
I've been calling it.

