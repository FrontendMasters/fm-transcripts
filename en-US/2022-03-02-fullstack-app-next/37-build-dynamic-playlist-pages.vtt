WEBVTT

1
00:00:00.724 --> 00:00:02.726
Now, we're gonna make
these playlist pages.

2
00:00:02.726 --> 00:00:08.188
So in order to do that, first we need
to make a route for the playlist pages.

3
00:00:08.188 --> 00:00:10.690
And luckily for us,
Next.js makes that easy.

4
00:00:10.690 --> 00:00:13.665
But the route,
because we have multiple playlist pages,

5
00:00:13.665 --> 00:00:16.532
we're not gonna make one page,
we need a dynamic page.

6
00:00:16.532 --> 00:00:18.286
Like a route with a parameter in it,

7
00:00:18.286 --> 00:00:21.101
where it'd be like /playlist/the
id of the playlist.

8
00:00:21.101 --> 00:00:22.250
We can do that.

9
00:00:22.250 --> 00:00:24.561
So the way we do that in
Next.js is we make a folder.

10
00:00:24.561 --> 00:00:26.719
So on the page's folder,

11
00:00:26.719 --> 00:00:32.023
we'll make a new folder called playlist,
so that'd be a path.

12
00:00:32.023 --> 00:00:37.520
So now, it'd be /playlist,
and then inside of there,

13
00:00:37.520 --> 00:00:43.460
we're gonna make one file of
a route that has an index in it.

14
00:00:43.460 --> 00:00:46.160
The way you make a dynamic
query parameter for

15
00:00:46.160 --> 00:00:51.004
Next.js is you use these square brackets
and you can put whatever name you want.

16
00:00:51.004 --> 00:00:54.697
In this case, I'm gonna call it [id],
and I'm gonna say .tsx.

17
00:00:54.697 --> 00:01:01.556
So what this is saying is I wanna
create a new route for a /playlist/id.

18
00:01:01.556 --> 00:01:03.020
And I could put whatever I want in here.

19
00:01:03.020 --> 00:01:06.358
I don't have to call it id,
I can call it playlist id,

20
00:01:06.358 --> 00:01:09.192
I can call it whatever, it doesn't matter.

21
00:01:09.192 --> 00:01:11.276
But I'm gonna call it id
because that's what it is.

22
00:01:11.276 --> 00:01:14.231
So now,
we have a route called /playlist/id.

23
00:01:14.231 --> 00:01:18.432
And I'm just going to just make a function
right now, a component, that just shows

24
00:01:18.432 --> 00:01:22.107
up, so we can actually route to it so
you can see what I'm talking about.

25
00:01:22.107 --> 00:01:26.333
So Playlist = a component,

26
00:01:26.333 --> 00:01:33.376
that's gonna render a div
that says playlist,

27
00:01:33.376 --> 00:01:37.436
export default Playlist.

28
00:01:37.436 --> 00:01:42.622
So now, when I go to /Playlist/subid,
it should render this page.

29
00:01:42.622 --> 00:01:44.100
So let's try that out.

30
00:01:44.100 --> 00:01:47.678
So I'm gonna go to /Playlist/4,
and obviously,

31
00:01:47.678 --> 00:01:51.024
my server needs to be started,
so let's do that.

32
00:01:56.009 --> 00:02:02.563
And you can see we're on
the playlist page, Playlist.

33
00:02:02.563 --> 00:02:06.681
I can go to any /playlist whatever,
and it'll go there.

34
00:02:09.763 --> 00:02:11.100
Cuz it's a dynamic variable.

35
00:02:14.345 --> 00:02:18.593
Okay, so let's build up the playlist page,
and then we'll go back to our sidebar and

36
00:02:18.593 --> 00:02:21.839
make these linked to their
appropriate /playlist/whatever,

37
00:02:21.839 --> 00:02:25.330
the id of that playlist is, and
then we'll have playlist with songs.

38
00:02:27.090 --> 00:02:32.274
So if we look at our data,
what does a playlist page have?

39
00:02:32.274 --> 00:02:37.413
Well, it has all the information in
the playlist, which has the name here,

40
00:02:37.413 --> 00:02:41.769
how many songs it has,
how much time all the songs are combined.

41
00:02:41.769 --> 00:02:43.029
We could actually run that analysis.

42
00:02:43.029 --> 00:02:47.550
I have the duration of every song in
seconds saved in database, I think.

43
00:02:47.550 --> 00:02:50.493
I can't remember if it's seconds or
minutes, but we could do the math.

44
00:02:50.493 --> 00:02:55.883
A description, playlist don't have
description, so maybe we'll skip that one.

45
00:02:55.883 --> 00:03:00.875
We can use a placeholder image for that.

46
00:03:00.875 --> 00:03:06.216
And then it has the song list,
which all playlists does have songs.

47
00:03:06.216 --> 00:03:10.607
So yeah, we should be able to make
this look pretty close to this, so

48
00:03:10.607 --> 00:03:11.696
let's do that.

49
00:03:11.696 --> 00:03:15.790
What we'll do now is start
working on the layout of it.

50
00:03:15.790 --> 00:03:20.320
And luckily for us, we have this gradient
layout that looks exactly like this.

51
00:03:20.320 --> 00:03:22.015
So we could just start with that.

52
00:03:22.015 --> 00:03:24.940
And then we can pull down a playlist and
we can kinda go from there.

53
00:03:26.120 --> 00:03:29.627
So we gotta kinda think about how
do we wanna get the playlist.

54
00:03:29.627 --> 00:03:34.301
We know that we can use client side
data using a hook to get a playlist.

55
00:03:34.301 --> 00:03:38.001
In fact,
we do have the usePlaylist hook here,

56
00:03:38.001 --> 00:03:42.727
although this gets a list of playlists and
not one playlist.

57
00:03:42.727 --> 00:03:46.896
But we also learned on the index page
that we can do server side fetching for

58
00:03:46.896 --> 00:03:50.170
data that won't change once
the user's looking at it.

59
00:03:50.170 --> 00:03:54.856
So I'll ask you all, what do you think is
the appropriate way to get the data for

60
00:03:54.856 --> 00:03:56.138
this playlist page?

61
00:03:56.138 --> 00:03:59.287
Should we fetch it on the client
after the page is loaded up?

62
00:03:59.287 --> 00:04:02.428
Or should we fetch it on a server so
when it does load up, it's already there?

63
00:04:04.722 --> 00:04:05.584
Number two?

64
00:04:05.584 --> 00:04:09.349
Okay, anybody else got any opinions on it?

65
00:04:14.108 --> 00:04:16.180
No, okay, there's no wrong answers here.

66
00:04:16.180 --> 00:04:19.780
They both work, it's just what experience
do you wanna deliver to your users.

67
00:04:19.780 --> 00:04:21.238
I'm definitely gonna go with number two.

68
00:04:21.238 --> 00:04:27.092
I'm just gonna have everything there
when it loads up every single time.

69
00:04:27.092 --> 00:04:31.815
And then if you had the ability to add
songs to the playlist while you were

70
00:04:31.815 --> 00:04:36.083
still looking at this page then
you can use client side for that.

71
00:04:36.083 --> 00:04:38.073
So you can actually do both
if you want to, right?

72
00:04:38.073 --> 00:04:40.027
You can render it on the server initially,

73
00:04:40.027 --> 00:04:43.670
and then use client side data fetching
to update it while you're looking at it.

74
00:04:43.670 --> 00:04:46.559
I don't know, let's say someone's on
their phone on Spotify, and they add

75
00:04:46.559 --> 00:04:49.323
them to the playlist and you wanna see
a pop up on the desktop immediately.

76
00:04:49.323 --> 00:04:51.955
I mean, obviously, that'd be like
a WebSocket or service event.

77
00:04:51.955 --> 00:04:55.987
But still, you can still do client side
things even though you're rendered

78
00:04:55.987 --> 00:04:57.377
initially on the server.

79
00:04:57.377 --> 00:04:58.706
And that's the whole point,

80
00:04:58.706 --> 00:05:01.629
is initially render on the server
to get that first quick render,

81
00:05:01.629 --> 00:05:05.426
which should be quicker than a client side
render cuz it's not parsing JavaScript.

82
00:05:05.426 --> 00:05:08.108
But once you're on the client,
only use client side stuff,

83
00:05:08.108 --> 00:05:11.011
because that's actually quicker
than going back to the server.

84
00:05:11.011 --> 00:05:13.264
So you get the best of both worlds.

85
00:05:13.264 --> 00:05:16.647
And that's the power of Next.js.

86
00:05:16.647 --> 00:05:19.170
All right, so in order to do that,

87
00:05:19.170 --> 00:05:24.050
let's go back to our sidebar where
we're going to fix our routes.

88
00:05:24.050 --> 00:05:26.637
For the playlist right now,
it's just linking to home.

89
00:05:26.637 --> 00:05:31.566
Instead, we want to link to the playlist.

90
00:05:31.566 --> 00:05:34.702
The way we can do that is we can
pass an object to this href and

91
00:05:34.702 --> 00:05:38.489
this NextLink where we're looping
over the playlist on the sidebar.

92
00:05:38.489 --> 00:05:42.886
So if you wanna meet me there where
we're doing playlist.map in the sidebar,

93
00:05:42.886 --> 00:05:45.430
there's href for this NextLink component.

94
00:05:45.430 --> 00:05:48.122
And we could pass an object
instead of just a string, and

95
00:05:48.122 --> 00:05:49.968
the first part would be the path name.

96
00:05:49.968 --> 00:05:54.999
And the path name is the name of the path.

97
00:05:54.999 --> 00:06:01.747
So in this case,
the path would be /playlist/id.

98
00:06:01.747 --> 00:06:08.535
I think you have to pass it in exactly
the way that you see it, like that.

99
00:06:08.535 --> 00:06:11.540
I'm pretty sure it has to be like that,
literally the same way.

100
00:06:11.540 --> 00:06:13.090
So we'll do that.

101
00:06:13.090 --> 00:06:16.976
And then the next one is gonna be query,
so what are the values for that?

102
00:06:16.976 --> 00:06:22.266
So for the query object, we have an id,
that's gonna be playlist.id

103
00:06:25.980 --> 00:06:31.481
So now, when someone clicks on a playlist,
it's going to go to this route and

104
00:06:31.481 --> 00:06:36.068
it's gonna substitute this id
placeholder with this id value.

105
00:06:36.068 --> 00:06:37.571
So we go back.

106
00:06:39.785 --> 00:06:44.650
And if you hover over these, you can see
that it indeed changes the playlist id,

107
00:06:44.650 --> 00:06:47.784
when I hover over these,
that seems to be working.

108
00:06:47.784 --> 00:06:49.502
At the bottom left,
you can see the id is changing.

109
00:06:52.917 --> 00:06:55.087
So we should we get there,
so we got that set up.

110
00:06:55.087 --> 00:07:02.525
And now, that we have that, when we
go server side, On the playlist page,

111
00:07:02.525 --> 00:07:09.020
we can access that query and
get the playlist id from the query string.

112
00:07:09.020 --> 00:07:12.806
And then use Prisma to make a database
query to get the actual playlist and

113
00:07:12.806 --> 00:07:16.010
get the songs and
get the artist and get everything.

114
00:07:16.010 --> 00:07:19.710
All we really need is the id,
so that's what we'll do.

115
00:07:19.710 --> 00:07:24.509
So if we head over to
the pages/playlist [id].tsx,

116
00:07:24.509 --> 00:07:29.895
we'll export const, getServersideProps,

117
00:07:36.763 --> 00:07:42.979
Like this, and we're gonna get the query.

118
00:07:42.979 --> 00:07:44.981
You're gonna destructure the query,

119
00:07:44.981 --> 00:07:47.596
property of the context
object that comes in here.

120
00:07:47.596 --> 00:07:52.925
We're also gonna import prisma from there.

121
00:07:52.925 --> 00:07:58.144
And we gotta think about the query here,
cuz we're not just gonna get the playlist,

122
00:07:58.144 --> 00:08:00.731
we have to get the songs for the playlist.

123
00:08:00.731 --> 00:08:05.163
And then I'm pretty sure we have to get
the artist name for the playlist, too.

124
00:08:05.163 --> 00:08:10.449
Because on that table, I think it
shows what is the name of that artist.

125
00:08:10.449 --> 00:08:14.577
So it's gonna be a pretty decent query for
Prisma,

126
00:08:14.577 --> 00:08:18.808
something a little bigger
than we've done before.

127
00:08:18.808 --> 00:08:21.814
So we could do that.

128
00:08:21.814 --> 00:08:24.056
The other thing we can do is, like I said,

129
00:08:24.056 --> 00:08:27.480
we could also validate
the token here if we wanted to.

130
00:08:27.480 --> 00:08:29.390
We don't need to, but
we could totally do it.

131
00:08:29.390 --> 00:08:33.564
But we will at least need to get the token
and get the id from that token, so

132
00:08:33.564 --> 00:08:36.796
we're making sure we're
getting the right playlist.

133
00:08:36.796 --> 00:08:41.695
Because how do we know that the playlist
that we're getting belongs to the current

134
00:08:41.695 --> 00:08:43.410
signed in and user, right?

135
00:08:43.410 --> 00:08:45.381
So we need to be able to do that.

136
00:08:45.381 --> 00:08:48.951
So what we'll do is we'll also
get the request here as well,

137
00:08:48.951 --> 00:08:50.564
so we'll get the request.

138
00:08:50.564 --> 00:08:53.590
And then we need to find some way
of getting the ID from the cookie.

139
00:08:53.590 --> 00:08:55.544
So we need to be able to validate that.

140
00:08:55.544 --> 00:09:00.391
So what I'm gonna do is I'm actually
gonna head back over to the auth file and

141
00:09:00.391 --> 00:09:05.422
we'll make another helper function here
that will basically just validate.

142
00:09:05.422 --> 00:09:07.934
It'll just do this right here,
it'll literally just do this.

143
00:09:07.934 --> 00:09:12.933
It'll just verify a token and give us
back an id, that's all it's gotta do.

144
00:09:12.933 --> 00:09:15.993
We could actually literally just do
it in the homepage, or I'm sorry,

145
00:09:15.993 --> 00:09:18.398
in the playlist page here and
the getServerSide props.

146
00:09:18.398 --> 00:09:20.657
I just feel like it's
gross if we do it there.

147
00:09:20.657 --> 00:09:21.800
I don't want to do it there.

148
00:09:21.800 --> 00:09:23.770
So we're gonna do it in auth.

149
00:09:23.770 --> 00:09:25.228
I'm just gonna make another
function down here.

150
00:09:25.228 --> 00:09:30.057
I'm just gonna call it
export const validateToken,

151
00:09:30.057 --> 00:09:32.642
and it just takes in a token.

152
00:09:32.642 --> 00:09:40.614
And all it does is it will get
a user back from jwt.verify,

153
00:09:40.614 --> 00:09:44.682
and verify takes a token, and

154
00:09:44.682 --> 00:09:50.230
then the passphrase was for me is Hello.

155
00:09:50.230 --> 00:09:53.724
And it's just going to return it,
that's it.

156
00:09:53.724 --> 00:09:55.723
That's that's all it does,
it doesn't do anything special.

157
00:10:01.316 --> 00:10:04.250
Literally just called verify and
returns that, so it's a one liner.

158
00:10:09.187 --> 00:10:14.464
Now that we have that,
we can go back to our playlistID page,

159
00:10:14.464 --> 00:10:20.264
and we could use that, so
I can say const {id} = validateToken.

160
00:10:20.264 --> 00:10:26.683
And for the actual token,
I can pass in req.cookies.,

161
00:10:26.683 --> 00:10:33.238
the name of our cookie,
which was TRAX_ACCESS_TOKEN,

162
00:10:33.238 --> 00:10:37.272
like that, that'll give me an id.

163
00:10:37.272 --> 00:10:41.324
And now that I have the id,
I know how to ask Prisma for

164
00:10:41.324 --> 00:10:44.010
what playlists based off this id.

165
00:10:44.010 --> 00:10:46.550
And I know this id is
valid because we have

166
00:10:46.550 --> 00:10:49.258
a bunch of authentication stuff all over.

167
00:10:49.258 --> 00:10:52.897
So now I can just say,
let me get the playlist here.

168
00:10:52.897 --> 00:10:57.615
In fact, it's gonna return an array
because we're not creating

169
00:10:57.615 --> 00:10:59.942
the playlist by unique fields.

170
00:10:59.942 --> 00:11:00.818
Because, again,

171
00:11:00.818 --> 00:11:04.227
I don't think a playlist even has
anything unique about it other than id.

172
00:11:04.227 --> 00:11:06.690
I have to go look at Playlist.

173
00:11:07.850 --> 00:11:09.467
Yeah, it only has an id that's unique.

174
00:11:09.467 --> 00:11:13.352
So because of that we can't do
a findUnique, we had to do a findMany.

175
00:11:13.352 --> 00:11:19.011
Because obviously, we're gonna get back an
array of playlists, but we only want one.

176
00:11:19.011 --> 00:11:23.039
But like I said,
it only has one unique field, that's id,

177
00:11:23.039 --> 00:11:25.626
and we're trying to query by user id.

178
00:11:25.626 --> 00:11:27.455
We're trying to query by
all these other things.

179
00:11:27.455 --> 00:11:28.721
We can't do a findUnique.

180
00:11:28.721 --> 00:11:31.663
So we're gonna have to do a findMany and
just get the first one that matches it,

181
00:11:31.663 --> 00:11:32.652
which should only be one.

182
00:11:32.652 --> 00:11:35.270
So yeah, again, Playlist doesn't
have anything unique about it.

183
00:11:35.270 --> 00:11:37.660
So we have to do a findMany,
even though we're only finding one.

184
00:11:37.660 --> 00:11:38.835
So don't get confused by that.

185
00:11:38.835 --> 00:11:44.284
It's only because there's nothing
unique about Playlist other than id,

186
00:11:44.284 --> 00:11:47.741
which we could just search for
the id there, but

187
00:11:47.741 --> 00:11:52.427
we wanna also make sure that this
playlists belongs to the user.

188
00:11:52.427 --> 00:11:56.979
So yeah, I guess, the playlist id is
enough for that, but just to make sure,

189
00:11:56.979 --> 00:11:59.923
let's say I wanted to search
by the playlist id and

190
00:11:59.923 --> 00:12:02.252
this user id just to double check that.

191
00:12:02.252 --> 00:12:06.381
Cuz what's stopping someone from, I know
your playlists id, let me just ask for

192
00:12:06.381 --> 00:12:07.121
it on the API.

193
00:12:07.121 --> 00:12:08.398
And now I got your playlist.

194
00:12:08.398 --> 00:12:10.899
But if I also say,
it has to be the right id and

195
00:12:10.899 --> 00:12:14.257
you have to be signed in with this id,
okay, now I can't do that.

196
00:12:14.257 --> 00:12:17.079
So this is helping you with multi-tenancy,

197
00:12:17.079 --> 00:12:21.695
where you have multiple people on
the same database with different data.

198
00:12:21.695 --> 00:12:24.120
How do you prevent them from
accessing each other's data?

199
00:12:24.120 --> 00:12:27.663
Most of your queries also have to include
the user's id, that's how you do it.

200
00:12:27.663 --> 00:12:30.467
So it's not enough just to say,
well, obviously,

201
00:12:30.467 --> 00:12:34.121
this play this with this id belongs
to this user, it's a unique id.

202
00:12:34.121 --> 00:12:36.695
Yeah, but how do you know that
that's the user asking for it?

203
00:12:36.695 --> 00:12:41.500
So that's why you have to also include the
user id when it comes to multi tenancy.

204
00:12:41.500 --> 00:12:43.789
So we'll do that here.

205
00:12:43.789 --> 00:12:46.568
So now we'll say, like I said,
its gonna return an array, but

206
00:12:46.568 --> 00:12:49.994
I really only care about the first thing
in it and only thing that'll be in it.

207
00:12:49.994 --> 00:12:53.167
And this is gonna be an async function.

208
00:12:53.167 --> 00:12:58.342
And what we wanna do here is we
want to await prisma.playlist.,

209
00:12:58.342 --> 00:13:00.327
like I said, findMany.

210
00:13:02.871 --> 00:13:06.608
And I guess we could also do find first,
which is literally the same

211
00:13:06.608 --> 00:13:11.238
thing as findMany, it just returns the
first one, so it doesn't really matter.

212
00:13:11.238 --> 00:13:14.341
I guess it just saves you a destructuring.

213
00:13:14.341 --> 00:13:15.441
So we'll say that.

214
00:13:15.441 --> 00:13:21.138
And then we're gonna say where id is gonna
be query.id, that'll be the playlist id,

215
00:13:21.138 --> 00:13:26.134
that's gonna be in the query because
that's the parameter for this route,

216
00:13:26.134 --> 00:13:28.023
it's gonna come from here.

217
00:13:28.023 --> 00:13:30.647
And I know it's called id because
that's what I call it in a file name.

218
00:13:30.647 --> 00:13:33.298
If I call this something else
in between these brackets,

219
00:13:33.298 --> 00:13:35.298
that's what it will be called here, too.

220
00:13:35.298 --> 00:13:39.016
If I call this abc, it'd be query.abc.

221
00:13:39.016 --> 00:13:40.245
That's where that name comes from.

222
00:13:40.245 --> 00:13:42.010
So this is the playlist id.

223
00:13:42.010 --> 00:13:46.711
And then I also wanna say it too needs
to have the same userId as that,

224
00:13:46.711 --> 00:13:49.034
this right here, as the userId.

225
00:13:54.960 --> 00:13:55.940
So that's the first part.

226
00:13:55.940 --> 00:13:57.224
And this is where it gets pretty cool.

227
00:13:57.224 --> 00:13:59.171
I can use this include field.

228
00:13:59.171 --> 00:14:03.668
Include is basically, hey,
Playlist has a relation, right?

229
00:14:03.668 --> 00:14:06.718
Playlist has a relation for Songs.

230
00:14:06.718 --> 00:14:08.758
I wanna include the songs
on the playlist query,

231
00:14:08.758 --> 00:14:11.665
cuz we're about to populate the Songs
table on this playlists page.

232
00:14:11.665 --> 00:14:15.312
So instead of making another database
query to get the songs after I

233
00:14:15.312 --> 00:14:18.109
get the playlist,
I can do the all in one by saying,

234
00:14:18.109 --> 00:14:20.669
hey, I also want to
include a bunch of things.

235
00:14:20.669 --> 00:14:25.524
The first thing I want to include is,
actually, let's look at the designs here.

236
00:14:25.524 --> 00:14:30.888
So yeah, I guess, really only we
wanna include here's the songs,

237
00:14:30.888 --> 00:14:33.711
and then the artist of those songs,

238
00:14:33.711 --> 00:14:37.868
cuz it looks like a list
of artists underneath them.

239
00:14:37.868 --> 00:14:38.463
We don't have albums.

240
00:14:38.463 --> 00:14:42.088
We don't have that, so
yeah, we need to do that.

241
00:14:42.088 --> 00:14:43.720
And yeah, let's do it.

242
00:14:43.720 --> 00:14:46.713
So we'll go back, we'll say include songs.

243
00:14:46.713 --> 00:14:50.498
You see to get that typo hit there,
which is really cool.

244
00:14:50.498 --> 00:14:53.755
And then for songs,
we also want to include,

245
00:14:53.755 --> 00:14:58.902
because songs have artists,
we wanna do another nested include here,

246
00:14:58.902 --> 00:15:03.549
is that we wanna include the artist for
those songs, like that.

247
00:15:03.549 --> 00:15:07.908
And then for the artists,
the only thing that we want to select,

248
00:15:07.908 --> 00:15:12.024
we can use the select keyword here,
is gonna be the name, and

249
00:15:12.024 --> 00:15:15.603
we'll say true, and the id,
then we'll say true.

250
00:15:20.485 --> 00:15:25.009
So just to go through what this is saying,
this is saying I want to find

251
00:15:25.009 --> 00:15:28.990
playlists where the playlist id
is the id that's on the URL.

252
00:15:30.170 --> 00:15:35.183
And it has a user id that's the same
thing as the signed in user.

253
00:15:38.892 --> 00:15:42.632
And then I want you to include the songs,
and then from the songs,

254
00:15:42.632 --> 00:15:45.428
I want you to include the artist for
those songs.

255
00:15:45.428 --> 00:15:48.781
And then for the artists, I only want
you to select the name and id field.

256
00:15:48.781 --> 00:15:49.948
Yeah, question?

257
00:15:49.948 --> 00:15:51.579
&gt;&gt; So is an include a join?

258
00:15:51.579 --> 00:15:55.268
&gt;&gt; Include is a join, yeah.

259
00:15:55.268 --> 00:15:56.300
If you use SQL, it's a join.

260
00:15:56.300 --> 00:15:57.946
If you use Mongo, it's a populate
&gt;&gt; So

261
00:15:57.946 --> 00:16:01.885
the ORM just uses the verb
include instead just to, okay.

262
00:16:01.885 --> 00:16:05.850
&gt;&gt; Use the word include,
you can use select, as well,

263
00:16:05.850 --> 00:16:10.645
in place of include, but
you can't use them on the same level.

264
00:16:10.645 --> 00:16:13.669
I couldn't use select right
next to this include.

265
00:16:13.669 --> 00:16:15.075
You can't use them both together.

266
00:16:15.075 --> 00:16:20.019
You can see it'll freak out, like no,
you can't do that, you only use either or

267
00:16:20.019 --> 00:16:21.201
on the same level.

268
00:16:21.201 --> 00:16:22.810
All right, so, yes?

269
00:16:22.810 --> 00:16:24.940
&gt;&gt; The way you have that
currently structured,

270
00:16:24.940 --> 00:16:28.594
is it gonna include everything about
songs and the artist, just name and id?

271
00:16:28.594 --> 00:16:32.059
&gt;&gt; Correct, yep, if you aren't specific
about what you want to select,

272
00:16:32.059 --> 00:16:33.806
it will select everything, yeah.

273
00:16:36.847 --> 00:16:41.833
So one bug we'll have here is that the
query string is always gonna be a value

274
00:16:41.833 --> 00:16:44.618
type of string where all ids are numbers.

275
00:16:44.618 --> 00:16:48.117
So we got to convert this to a number, I
just put the plus sign in front of it and

276
00:16:48.117 --> 00:16:49.674
that'll convert it to a number.

277
00:16:49.674 --> 00:16:54.061
Otherwise this will be a string
with the playlist id in it.

278
00:16:54.061 --> 00:16:57.614
And it will never find it in the database
cuz all ids are numbers in the database.

279
00:16:57.614 --> 00:17:01.393
So just convert that to string,
you will run into that.

280
00:17:01.393 --> 00:17:07.401
You ran into that, okay, all right,
[LAUGH] yeah, that happens a lot.

281
00:17:07.401 --> 00:17:12.507
Okay, so now we have our playlists and
if all goes well, we should be

282
00:17:12.507 --> 00:17:18.350
able to return an object with some props,
that's our playlist, like that.

283
00:17:30.048 --> 00:17:31.555
And then, lastly,

284
00:17:31.555 --> 00:17:36.352
is we can use our playlists that
gets injected up here, like so.

285
00:17:36.352 --> 00:17:42.420
So now we have playlists, and I'm just
going to put the playlists.name here.

286
00:17:51.430 --> 00:17:56.865
Okay, so let's go back to our page.

287
00:17:56.865 --> 00:18:03.395
Obviously, this is just gonna freak
out because it's got an invalid id,

288
00:18:03.395 --> 00:18:07.834
cuz that's not a real id,
so let's go back here.

289
00:18:07.834 --> 00:18:14.090
And if I click on playlist, whatever
that is, you can see I'm on Playlist #1,

290
00:18:14.090 --> 00:18:18.142
Playlist #10, Playlist #2, Playlist #4.

291
00:18:18.142 --> 00:18:19.673
So so far it's working.

292
00:18:19.673 --> 00:18:24.578
Don't get confused with the playlist ids
and the number on the playlist name,

293
00:18:24.578 --> 00:18:29.276
the seed script didn't coordinate that,
so don't let that confuse you.

294
00:18:29.276 --> 00:18:32.260
The name and id have no association,
they just both use numbers.

