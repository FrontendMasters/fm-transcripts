WEBVTT

1
00:00:00.006 --> 00:00:01.326
So that's our sign up,

2
00:00:01.326 --> 00:00:05.352
so let's run through it one more time
just to walk through this process.

3
00:00:05.352 --> 00:00:11.138
First, a user makes
a request to /api/signup.

4
00:00:11.138 --> 00:00:14.388
And remember, this will be any verb.

5
00:00:14.388 --> 00:00:18.802
So the way that Next.js works, I don't
know if you've ever used Express, you can

6
00:00:18.802 --> 00:00:22.916
do app.post, app., you can describe
the verb and the route combination.

7
00:00:22.916 --> 00:00:27.359
With just vanilla Next.js,
you don't get that ability.

8
00:00:27.359 --> 00:00:29.115
You would have to do it yourself
with some other mechanism.

9
00:00:29.115 --> 00:00:34.022
You can actually use an Express-like
routing package that actually

10
00:00:34.022 --> 00:00:37.328
works with this handler,
and you can do that.

11
00:00:37.328 --> 00:00:40.740
For me, I feel like you don't
really need to do that.

12
00:00:40.740 --> 00:00:43.772
If you really wanted to do it,
and we will on some other things,

13
00:00:43.772 --> 00:00:45.848
just use a switch statement in my opinion.

14
00:00:45.848 --> 00:00:50.213
You just switch on req.method, and is
a GET, is it a POST, is it a whatever, and

15
00:00:50.213 --> 00:00:52.796
then run a different function for
one of those.

16
00:00:52.796 --> 00:00:53.610
That's typically how I do it.

17
00:00:53.610 --> 00:00:58.311
But in this case, I'm not even gonna
do it with signup because one,

18
00:00:58.311 --> 00:01:00.630
you can't POST anything on GET.

19
00:01:00.630 --> 00:01:03.808
And I don't really care if you do a DELETE
request, just send me the things.

20
00:01:03.808 --> 00:01:04.840
I don't really care what the method is.

21
00:01:04.840 --> 00:01:08.484
I'm kind of like in the GraphQL boat,
POST request for everything.

22
00:01:08.484 --> 00:01:14.679
I don't even really care about
status codes and verbs anymore.

23
00:01:14.679 --> 00:01:18.350
I only care about JSON,
just send me the JSON, that's it.

24
00:01:18.350 --> 00:01:20.111
So I'm in that boat.

25
00:01:20.111 --> 00:01:24.237
But if you want to, you could do an,
if req.method equals post,

26
00:01:24.237 --> 00:01:28.755
then run all this code,
everything else 404, it's totally fine.

27
00:01:28.755 --> 00:01:29.312
You could totally do that.

28
00:01:29.312 --> 00:01:30.455
There's nothing wrong with that.

29
00:01:30.455 --> 00:01:34.760
That'll make sure this only runs
on a POST request to /api/signup.

30
00:01:34.760 --> 00:01:36.753
So yeah, we got that.

31
00:01:36.753 --> 00:01:41.777
We then attempt to make a user with Prisma
with the email and a hashed password.

32
00:01:41.777 --> 00:01:45.765
If that fails, we send back a 401 and
a error message, and we stop.

33
00:01:45.765 --> 00:01:49.928
If that succeeds, we create a JSON web
token with the email, the user ID,

34
00:01:49.928 --> 00:01:54.378
the time that we created it, with this
secret, and it expires in eight hours.

35
00:01:54.378 --> 00:01:58.661
We then take that token and we serialize
it in a cookie called TRAX_ACCESS_TOKEN.

36
00:01:58.661 --> 00:01:59.981
And we give it these properties.

37
00:01:59.981 --> 00:02:01.772
It's only accessible at HTTP.

38
00:02:01.772 --> 00:02:03.591
It also expires in eight hours.

39
00:02:03.591 --> 00:02:09.244
It works on this website,
the root of it, sameSite, I don't know.

40
00:02:09.244 --> 00:02:13.327
And then it's secure only in production,
as it'll be HTTPS.

41
00:02:13.327 --> 00:02:17.795
And then we send back that user object
that we got from the database and

42
00:02:17.795 --> 00:02:19.346
we should be good to go.

43
00:02:19.346 --> 00:02:22.129
So let's attempt to sign up.

44
00:02:22.129 --> 00:02:28.486
So what I'll do now is I'll go to HTTPie.

45
00:02:28.486 --> 00:02:36.164
I'm gonna say, http, I'm gonna say I wanna
do a POST request to 3000/api/signup.

46
00:02:36.164 --> 00:02:42.346
I'm going to give it a email of h@h.com,

47
00:02:42.346 --> 00:02:46.138
and a password of abcabc.

48
00:02:46.138 --> 00:02:51.032
So we run that, boom, we created a user.

49
00:02:51.032 --> 00:02:55.861
You can see right here on the cookie, the
cookie got set, there's the cookie value.

50
00:02:55.861 --> 00:02:56.814
And then there's the JSON web token.

51
00:02:56.814 --> 00:02:58.654
It's this long thing right here.

52
00:02:58.654 --> 00:03:02.593
You see the Max-Age was set,
HttpOnly all these things.

53
00:03:02.593 --> 00:03:05.244
And then here's a JSON object that got
some back, it was created at this time.

54
00:03:05.244 --> 00:03:07.646
Here's the user's email, user ID of 2,

55
00:03:07.646 --> 00:03:11.601
cuz we already have a user in there
that we seeded, user@test.com.

56
00:03:11.601 --> 00:03:12.850
Here's the hashed password.

57
00:03:12.850 --> 00:03:14.764
Maybe we should exclude that.

58
00:03:14.764 --> 00:03:17.152
And then updatedAt.

59
00:03:17.152 --> 00:03:20.335
So we got everything there.

60
00:03:20.335 --> 00:03:28.647
And then we can verify this
by running npx prisma studio.

61
00:03:28.647 --> 00:03:31.171
And we should have two
users in the database.

62
00:03:31.171 --> 00:03:33.089
And we do, there's h@h.com.

63
00:03:33.089 --> 00:03:35.154
And then there's user@test.com.

64
00:03:35.154 --> 00:03:40.750
So if I try to sign up again with
the same email, I should get an error.

65
00:03:40.750 --> 00:03:41.796
So let's try that.

66
00:03:41.796 --> 00:03:43.338
As you can see, user already exists.

67
00:03:43.338 --> 00:03:45.873
I tried to sign up with that email,
so that's a no.

68
00:03:45.873 --> 00:03:49.172
The other email that we had,
which was user@test.com,

69
00:03:49.172 --> 00:03:51.912
that should also give us an error.

70
00:03:51.912 --> 00:03:54.875
Like that, so we can try that.

71
00:03:54.875 --> 00:03:56.492
And that also gives us an error.

