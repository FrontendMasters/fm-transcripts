WEBVTT

1
00:00:00.360 --> 00:00:02.025
&gt;&gt; Lukas Ruebbelke: And so
if we hop into the slides,

2
00:00:02.025 --> 00:00:05.851
I'll show you in the slides and
I'll actually show you in the code, and so

3
00:00:05.851 --> 00:00:09.367
we have a notification service,
&gt;&gt; Lukas Ruebbelke: And

4
00:00:09.367 --> 00:00:13.677
we are declaring a subject, so
just think of the subject is,

5
00:00:13.677 --> 00:00:18.935
it's an observer, or it actually can
broadcast and it can also consume.

6
00:00:18.935 --> 00:00:26.100
So subject = new Subject, and
then we're creating an observable stream.

7
00:00:27.440 --> 00:00:31.170
And so we're saying notifications,
we're using the dollar sign, so

8
00:00:31.170 --> 00:00:32.250
this is kind of idiomatic.

9
00:00:32.250 --> 00:00:35.170
When you have something that
it's not a notification,

10
00:00:35.170 --> 00:00:40.530
it's actually an observable wrapped, this
notification's wrapped in an observable.

11
00:00:40.530 --> 00:00:44.840
A lot of times you'll see that dollar sign
to indicate, this is an observable stream.

12
00:00:44.840 --> 00:00:48.630
And so we're saying,
take the subject but give me just, or

13
00:00:48.630 --> 00:00:52.120
give me the subject but
operate as an observable.

14
00:00:52.120 --> 00:00:56.839
So just think of, we have subject and
we're exposing it as an observable.

15
00:00:58.300 --> 00:01:01.130
Then we have an emit method.

16
00:01:01.130 --> 00:01:08.590
A notification comes in and
we are saying this.subject.next.

17
00:01:08.590 --> 00:01:15.700
So if you remember, an observable has
three methods, next, error, and complete.

18
00:01:15.700 --> 00:01:21.705
So we are able to actually control
what happens in the observable

19
00:01:21.705 --> 00:01:28.056
portion of the subject, and
this is the entirety of this event bus.

20
00:01:33.380 --> 00:01:35.534
&gt;&gt; Lukas Ruebbelke: I feel like
there is a question coming,

21
00:01:35.534 --> 00:01:39.464
it's almost like a sneeze, you're
like [SOUND] why are you doing this?

22
00:01:39.464 --> 00:01:41.732
&gt;&gt; Speaker 2: So
you can subscribe to this event bus, and

23
00:01:41.732 --> 00:01:44.477
anyone can push notifications
to the syllabus?

24
00:01:44.477 --> 00:01:45.897
&gt;&gt; Lukas Ruebbelke: Yeah.
&gt;&gt; Speaker 2: Okay, this event bus is

25
00:01:45.897 --> 00:01:50.361
global, as long as the notification
service classes are in that [INAUDIBLE]?

26
00:01:50.361 --> 00:01:53.285
&gt;&gt; Lukas Ruebbelke: Well it's in the
notifications, so it's global in the sense

27
00:01:53.285 --> 00:01:56.620
if you can consume the notification
service as a dependency.

28
00:01:56.620 --> 00:01:58.890
So this right here,
the subject is stateless.

29
00:01:58.890 --> 00:02:02.050
In other words, it takes something in and
it broadcasts it.

30
00:02:02.050 --> 00:02:06.660
But you have a few variations of this,
most notably the behavior subject.

31
00:02:06.660 --> 00:02:09.580
And what that does is it's
actually maintains state.

32
00:02:10.640 --> 00:02:15.880
So as you put something in, it will
actually store that last value, and

33
00:02:15.880 --> 00:02:19.440
so when somebody subscribes,
they get it, okay.

34
00:02:21.260 --> 00:02:21.980
Here's the kicker.

35
00:02:24.170 --> 00:02:27.021
If you go and
look at the NGRX source code,

36
00:02:27.021 --> 00:02:29.638
how do you think the store is working?

37
00:02:32.582 --> 00:02:36.326
&gt;&gt; Lukas Ruebbelke: So you have this
global where the single state tree in your

38
00:02:36.326 --> 00:02:41.020
application, and whenever it changes
your application is notified.

39
00:02:41.020 --> 00:02:42.060
State is flowing down.

40
00:02:43.130 --> 00:02:46.212
So what makes NGRX so
awesome is under the hood they have

41
00:02:46.212 --> 00:02:50.503
a behavior subject that's storing
the state for your entire application.

42
00:02:50.503 --> 00:02:57.638
And whenever it changes, it's simply
calling subject.next and sending it down.

43
00:03:00.370 --> 00:03:05.128
&gt;&gt; Lukas Ruebbelke: And so now we inject
the notification service, this.ns, and

44
00:03:05.128 --> 00:03:09.710
we're grabbing the notifications stream or
observable and

45
00:03:09.710 --> 00:03:13.170
we're simply saying, hey, .subscribe.

46
00:03:13.170 --> 00:03:16.610
If something comes in, g ahead and
pass it on to the snack bar.

47
00:03:16.610 --> 00:03:20.490
So snack bar is just
an angular material component.

48
00:03:20.490 --> 00:03:21.781
That's what you're seeing at the bottom.

49
00:03:24.877 --> 00:03:26.380
&gt;&gt; Lukas Ruebbelke: And
that's how that's working.

50
00:03:26.380 --> 00:03:27.760
&gt;&gt; Speaker 2: This is the consumer?

51
00:03:27.760 --> 00:03:29.490
&gt;&gt; Lukas Ruebbelke: Yes, so
this is in the app component.

52
00:03:29.490 --> 00:03:31.903
So now let me show you in the code, so

53
00:03:31.903 --> 00:03:37.866
I'll prove to you that there's nothing up
my sleeves, that this is indeed happening.

54
00:03:39.742 --> 00:03:46.231
&gt;&gt; Lukas Ruebbelke: So if we go to
the notification service, this is it.

55
00:03:48.178 --> 00:03:49.434
&gt;&gt; Lukas Ruebbelke: Something comes in.

56
00:03:51.089 --> 00:03:55.310
&gt;&gt; Lukas Ruebbelke: We're broadcasting it
on the notification stream via subject.

57
00:03:57.000 --> 00:04:01.891
&gt;&gt; Speaker 3: So if you wanted
an error notice you'd just [COUGH]

58
00:04:01.891 --> 00:04:05.842
have a different method that you call?

59
00:04:08.509 --> 00:04:10.839
&gt;&gt; Lukas Ruebbelke: You just call error.

60
00:04:10.839 --> 00:04:15.060
Or let's say we're totally done with this,
we never need it complete.

61
00:04:15.060 --> 00:04:20.612
So an observable has three main methods,
next, error, and complete.

62
00:04:23.532 --> 00:04:26.815
&gt;&gt; Lukas Ruebbelke: And so if something
goes wrong, you would then just call,

63
00:04:26.815 --> 00:04:29.498
this.subject.error, and pass that along.

64
00:04:32.404 --> 00:04:36.293
&gt;&gt; Lukas Ruebbelke: And we're exposing
the subject as an observable to the rest

65
00:04:36.293 --> 00:04:38.720
of the application to subscribe to.

66
00:04:40.770 --> 00:04:44.710
Inject it in, here we're just
saying subscribe to the stream.

67
00:04:46.090 --> 00:04:51.569
Whenever something happens,
pass it on to the snack bar to show.

68
00:04:54.414 --> 00:04:57.225
&gt;&gt; Lukas Ruebbelke: So this is very good
for showing application wide messaging,

69
00:04:57.225 --> 00:04:59.939
like, hey, this notification,
this thing, happened.

70
00:05:01.730 --> 00:05:07.030
It's also good, I've seen this and I've
used this frequently, for when you need

71
00:05:08.710 --> 00:05:13.200
a modal that sits in front on top of your
application if something is loading.

72
00:05:13.200 --> 00:05:15.660
So if you've ever done a remote
server call and you're like, hey,

73
00:05:15.660 --> 00:05:20.330
I need this thing to basically turn on,
like a loading indicator or whatever.

74
00:05:21.480 --> 00:05:24.790
This would be another example of this.

75
00:05:24.790 --> 00:05:28.243
Is what you could do is,

76
00:05:28.243 --> 00:05:34.130
in our code if we go to, let's say here.

77
00:05:34.130 --> 00:05:39.296
Hypothetically you could
have something like,

78
00:05:39.296 --> 00:05:43.837
(app.) loading, like app.loading.

79
00:05:43.837 --> 00:05:48.814
And then what you would simply

80
00:05:48.814 --> 00:05:53.600
say is ngIf= "loading".

81
00:05:53.600 --> 00:05:59.683
And so under the hood this would be
some spinner, whatever the template is,

82
00:05:59.683 --> 00:06:05.879
but then what you would do here is
loading, again with some more pseudo code.

83
00:06:05.879 --> 00:06:09.462
We can do something like,
this.ls, for loading service,

84
00:06:09.462 --> 00:06:12.216
I'm just making this up
off the top of my head.

85
00:06:15.295 --> 00:06:19.926
&gt;&gt; Lukas Ruebbelke: loading.subscribe,

86
00:06:26.322 --> 00:06:30.008
&gt;&gt; Lukas Ruebbelke: = this.loading =

87
00:06:30.008 --> 00:06:31.963
loading.

88
00:06:34.422 --> 00:06:36.420
&gt;&gt; Lukas Ruebbelke: And obviously it's
throwing out this cuz I haven't done this.

89
00:06:36.420 --> 00:06:40.242
But then now you would just have a loading
service that would look just like this.

90
00:06:43.849 --> 00:06:47.328
&gt;&gt; Lukas Ruebbelke: You would just say
loading, or is loading, or toggle, or

91
00:06:47.328 --> 00:06:51.710
whatever, and you would say,
this.subject.next, true.

92
00:06:51.710 --> 00:06:56.680
And so in this case I've done is just true
or false, just toggling, true or false.

93
00:06:56.680 --> 00:07:01.584
And the minute you set it in the service,
it broadcast it, picks it up here,

94
00:07:01.584 --> 00:07:04.202
and you're bound to it in the template.

95
00:07:11.033 --> 00:07:18.130
&gt;&gt; Lukas Ruebbelke: So with that said,
&gt;&gt; Lukas Ruebbelke: Just

96
00:07:18.130 --> 00:07:20.720
keep this in mind, what's happening here.

97
00:07:22.930 --> 00:07:30.509
And if you are subscribed to the stream,
&gt;&gt; Lukas Ruebbelke: Does

98
00:07:30.509 --> 00:07:32.820
it matter where it's coming from?

99
00:07:32.820 --> 00:07:33.470
I mean, do you know?

100
00:07:33.470 --> 00:07:36.500
All you know it that it's coming in,
it doesn't matter.

101
00:07:36.500 --> 00:07:40.122
So just put your thinking caps on,
cuz this is where we're going, eventually.

102
00:07:42.282 --> 00:07:47.526
&gt;&gt; Lukas Ruebbelke: What would happen
if we had a fire based stream in here,

103
00:07:47.526 --> 00:07:52.656
that instead of doing it
here by calling it manually,

104
00:07:52.656 --> 00:08:00.307
we were actually just tapping into a fire
based stream and broadcasting it out?

105
00:08:03.956 --> 00:08:05.890
&gt;&gt; Lukas Ruebbelke: So
I mean the stream is going to come.

106
00:08:06.920 --> 00:08:08.780
Just feed it into
the notification service.

107
00:08:10.110 --> 00:08:11.830
And the rest of
the application doesn't care,

108
00:08:11.830 --> 00:08:13.728
it just knows that I'm on
the notification stream.

109
00:08:16.954 --> 00:08:18.120
&gt;&gt; Lukas Ruebbelke: Something
to think about.

110
00:08:18.120 --> 00:08:18.620
We'll see it.

111
00:08:20.330 --> 00:08:24.756
&gt;&gt; Speaker 3: Can we see where it is
actually sending out a notification?

112
00:08:24.756 --> 00:08:26.382
&gt;&gt; Lukas Ruebbelke: What do you mean?

113
00:08:26.382 --> 00:08:27.410
Sure.

114
00:08:27.410 --> 00:08:32.190
So this is gonna be pretty anticlimactic,
but I will oblige.

115
00:08:32.190 --> 00:08:34.057
Let's go to newsletter component.

116
00:08:43.518 --> 00:08:46.725
&gt;&gt; Lukas Ruebbelke: So it's just this,
I'm just calling it NS cuz I think

117
00:08:46.725 --> 00:08:51.360
Form Builder was there, I'm like,
I don't feel like typing this all out.

118
00:08:51.360 --> 00:08:55.180
.omit and you just for whatever is in
there, just a normal function call.

119
00:08:56.280 --> 00:08:57.410
It just takes that parameter and

120
00:08:57.410 --> 00:09:01.000
just drops it into the stream, which then
gets consumed by the rest of the app.

121
00:09:01.000 --> 00:09:06.670
So one, this is a very efficient way to
write this, I mean a few lines of code.

122
00:09:07.850 --> 00:09:13.190
So we have a full fledged event bus here,
and

123
00:09:13.190 --> 00:09:16.870
we've done it in, I don't know.

124
00:09:16.870 --> 00:09:22.777
If I wanted to get concise about this,
it's about 12 lines of code.

125
00:09:25.527 --> 00:09:28.772
&gt;&gt; Lukas Ruebbelke: And it very
efficiently communicates something to

126
00:09:28.772 --> 00:09:31.720
the rest of the application and
pushes it out.

127
00:09:33.490 --> 00:09:38.970
Control flow, and this is in fact for
the most part, how Redux works.

128
00:09:40.630 --> 00:09:46.030
So the beauty of Redux is that somebody
could write it in about ten minutes

129
00:09:46.030 --> 00:09:46.730
if you can believe it.

130
00:09:46.730 --> 00:09:50.165
I can sit down and
write a version of Redux in ten minutes.

131
00:09:51.806 --> 00:09:55.729
&gt;&gt; Lukas Ruebbelke: The reason being,
and so I know for a fact Rob Bermalt,

132
00:09:55.729 --> 00:09:59.141
he wrote the first version
of NGRX in a weekend,

133
00:09:59.141 --> 00:10:04.455
because all it's doing under the hood
is basically something like this.

134
00:10:04.455 --> 00:10:06.330
Really interesting.

135
00:10:06.330 --> 00:10:07.540
Uh-huh.

136
00:10:07.540 --> 00:10:09.809
&gt;&gt; Speaker 2: So
say you were, I don't know,

137
00:10:09.809 --> 00:10:13.520
say it couldn't save your
email in the newsletter.

138
00:10:13.520 --> 00:10:20.450
Would you have your error notification in
a different component that's accessible

139
00:10:20.450 --> 00:10:24.370
to the rest of the app, or would you
put it in here like as an if else?

140
00:10:25.440 --> 00:10:27.520
&gt;&gt; Lukas Ruebbelke: No, I mean so
let's say there was an error.

141
00:10:27.520 --> 00:10:31.520
&gt;&gt; Speaker 3: Dev calling emits,
it would call error.

142
00:10:31.520 --> 00:10:35.120
Where you went ns.emit,
here you would say-

143
00:10:35.120 --> 00:10:35.870
&gt;&gt; Lukas Ruebbelke: I mean I wouldn't

144
00:10:35.870 --> 00:10:38.490
even, at which point I would
just work on the styling.

145
00:10:38.490 --> 00:10:39.160
&gt;&gt; Speaker 3: Yeah.

146
00:10:39.160 --> 00:10:44.176
&gt;&gt; Lukas Ruebbelke: But
let's say it went totally wrong,

147
00:10:44.176 --> 00:10:49.362
and where's this coming from, here?

148
00:10:49.362 --> 00:10:54.377
Could say something went wrong, and
we know about it in this method.

149
00:11:07.238 --> 00:11:08.741
&gt;&gt; Lukas Ruebbelke: Same thing.

150
00:11:08.741 --> 00:11:09.420
&gt;&gt; Speaker 2: Okay.

151
00:11:09.420 --> 00:11:11.037
&gt;&gt; Lukas Ruebbelke: And
there's things, we can flush this out.

152
00:11:11.037 --> 00:11:16.682
So you can do custom styling, maybe
you wanna be, severity or alert level,

153
00:11:16.682 --> 00:11:21.550
info or air or whatever, and
then you would visually display it.

154
00:11:24.500 --> 00:11:26.730
But I would still just use
that same notification bus,

155
00:11:27.920 --> 00:11:30.280
use the same component to display it.

156
00:11:30.280 --> 00:11:35.200
In then, seriously,
now in just a couple lines of code we now

157
00:11:35.200 --> 00:11:40.100
have this global notification thing that's
well encapsulated and really stable.

158
00:11:40.100 --> 00:11:42.280
&gt;&gt; Speaker 2: Yeah,
just the same thing over again.

159
00:11:42.280 --> 00:11:42.780
&gt;&gt; Lukas Ruebbelke: Yep.

