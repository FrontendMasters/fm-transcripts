WEBVTT

1
00:00:00.240 --> 00:00:04.670
&gt;&gt; Lukas Ruebbelke: Jumping into the code
what we have here is a couple of things.

2
00:00:04.670 --> 00:00:08.580
In the Items Search component,
I have an input and

3
00:00:08.580 --> 00:00:12.450
I have this local template variable,
so it's itemSearch.

4
00:00:12.450 --> 00:00:17.309
And then using ViewChild,
I'm able to create or

5
00:00:17.309 --> 00:00:21.587
actually get a reference in my component.

6
00:00:23.273 --> 00:00:26.760
&gt;&gt; Lukas Ruebbelke: So
now what I can do is,

7
00:00:26.760 --> 00:00:32.085
I can basically use this reference

8
00:00:32.085 --> 00:00:37.050
to attach an initial output to.

9
00:00:37.050 --> 00:00:40.690
So we'll go const, and
I'll just call this search.

10
00:00:40.690 --> 00:00:43.530
And so I'm putting a dollar sign on
the end to indicate that this is

11
00:00:43.530 --> 00:00:45.070
an observable string.

12
00:00:45.070 --> 00:00:50.847
And from here,
we'll go Observable.fromEvent,

13
00:00:50.847 --> 00:00:54.795
and I'm just going to unwrap this.

14
00:00:54.795 --> 00:00:59.013
All I'm doing is I'm just grabbing
the native element off of it, so

15
00:00:59.013 --> 00:01:01.626
that I can attach the clickHandler to it.

16
00:01:01.626 --> 00:01:07.930
So this.itemSearch, and in this case,

17
00:01:09.000 --> 00:01:14.280
we're gonna go with key up,
because it's an actual input.

18
00:01:14.280 --> 00:01:16.150
So I could button in here,
we could capture it and

19
00:01:16.150 --> 00:01:17.550
we could actually go with a click.

20
00:01:17.550 --> 00:01:26.720
But we're going with a key up event,
so it's gonna be key down, whatever.

21
00:01:27.830 --> 00:01:30.410
Blur, focus, whatever you want to do.

22
00:01:30.410 --> 00:01:36.036
And let's go source, or
rather subscription, or subscribe.

23
00:01:36.036 --> 00:01:42.960
And then let's just go event, and
let's just log it out to the console.

24
00:01:47.718 --> 00:01:50.613
&gt;&gt; Lukas Ruebbelke: And
what you'll notice here as well.

25
00:01:52.127 --> 00:01:57.150
&gt;&gt; Lukas Ruebbelke: Is that up here,
I've went ahead and done this for you.

26
00:01:57.150 --> 00:01:59.422
But you will import observable and

27
00:01:59.422 --> 00:02:04.052
you will import as well the additional
operators that you want to use.

28
00:02:04.052 --> 00:02:05.570
Because there's so many of them.

29
00:02:05.570 --> 00:02:10.890
But you do not want to do is import
the entire observable like everything,

30
00:02:10.890 --> 00:02:14.140
cuz it's like megs and megs of stuff.

31
00:02:14.140 --> 00:02:17.066
So this is why we 're doing this,
piece by piece.

32
00:02:17.066 --> 00:02:22.425
And so, let us see if this

33
00:02:22.425 --> 00:02:28.560
compiles, hopefully yes.

34
00:02:30.010 --> 00:02:34.330
And as you'll see now, as I start to type,

35
00:02:35.370 --> 00:02:39.590
every time I type something,
this is going in.

36
00:02:39.590 --> 00:02:45.410
Like, it's capturing this event and
is performing some operation at the end.

37
00:02:45.410 --> 00:02:49.256
In this case it's just
passing it straight to the,

38
00:02:50.792 --> 00:02:52.150
&gt;&gt; Lukas Ruebbelke: Subscribe lock.

39
00:02:52.150 --> 00:02:53.010
Now let's look at this.

40
00:02:53.010 --> 00:02:54.480
This is an actual Dom event.

41
00:02:55.590 --> 00:02:57.590
And there is some stuff in here.

42
00:02:59.620 --> 00:03:02.252
And kind of what I'm interested in

43
00:03:02.252 --> 00:03:07.146
is,
&gt;&gt; Lukas Ruebbelke: Let's

44
00:03:07.146 --> 00:03:07.800
click through here.

45
00:03:07.800 --> 00:03:11.068
I think it's target that value.

46
00:03:14.828 --> 00:03:16.710
&gt;&gt; Lukas Ruebbelke: What are they doing?

47
00:03:16.710 --> 00:03:17.530
No, it is the value.

48
00:03:17.530 --> 00:03:20.670
So we have an event.

49
00:03:20.670 --> 00:03:22.270
We're dumping it out.

50
00:03:22.270 --> 00:03:24.573
But not super helpful.

51
00:03:26.569 --> 00:03:29.178
&gt;&gt; Lukas Ruebbelke: What I
would really like to do

52
00:03:29.178 --> 00:03:33.069
is,
&gt;&gt; Lukas Ruebbelke: Make this

53
00:03:33.069 --> 00:03:33.747
a little better.

54
00:03:36.131 --> 00:03:43.242
&gt;&gt; Lukas Ruebbelke: And,
&gt;&gt; Lukas Ruebbelke: We'll go here.

55
00:03:46.698 --> 00:03:47.500
&gt;&gt; Lukas Ruebbelke: And sometimes,

56
00:03:47.500 --> 00:03:51.000
just cuz I don't like this yelling at
me I'm just gonna type this to any.

57
00:03:54.497 --> 00:03:59.498
&gt;&gt; Lukas Ruebbelke: And now, what I
will do as well is I transform something

58
00:03:59.498 --> 00:04:04.175
I will,
kind of update my parameters downstream so

59
00:04:04.175 --> 00:04:07.900
that I have an idea of what's coming in.

60
00:04:09.360 --> 00:04:13.030
So now we're taking this event,

61
00:04:13.030 --> 00:04:15.580
we're simply saying I don't
want the event object itself.

62
00:04:15.580 --> 00:04:18.244
What I wanna do is actually want to
reach in and describe one thing.

63
00:04:21.394 --> 00:04:22.539
&gt;&gt; Lukas Ruebbelke: And so we'll go here.

64
00:04:25.628 --> 00:04:29.480
&gt;&gt; Lukas Ruebbelke: You
can see that as I type,

65
00:04:29.480 --> 00:04:36.143
we're capturing it in the subscribe block.

66
00:04:44.281 --> 00:04:46.083
&gt;&gt; Lukas Ruebbelke: Let's also do,

67
00:04:46.083 --> 00:04:51.308
just so,
&gt;&gt; Lukas Ruebbelke: We

68
00:04:51.308 --> 00:04:55.440
have something that we can see
without doing it in the console.

69
00:04:55.440 --> 00:04:58.360
I'm going to create a message property.

70
00:04:59.830 --> 00:05:01.370
And I'll just go over here.

71
00:05:01.370 --> 00:05:05.610
We'll go h1, or hR rather,
we're just on a roll.

72
00:05:05.610 --> 00:05:10.479
And,
&gt;&gt; Lukas Ruebbelke: Let's just

73
00:05:10.479 --> 00:05:13.080
put this out here.

74
00:05:20.974 --> 00:05:22.514
&gt;&gt; Lukas Ruebbelke: I need you
to hold on for one second.

75
00:05:24.078 --> 00:05:27.769
&gt;&gt; Lukas Ruebbelke: So
instead of logging it out,

76
00:05:27.769 --> 00:05:32.792
what we're gonna do is we're gonna go,

77
00:05:32.792 --> 00:05:36.054
this.message = query.

78
00:05:42.894 --> 00:05:46.464
&gt;&gt; Lukas Ruebbelke: That's all we're
doing is we're just pulling this in, and

79
00:05:46.464 --> 00:05:48.010
putting it on the screen.

80
00:05:48.010 --> 00:05:51.820
So we're just capturing it and so
we're changing this, it's in the string.

81
00:05:51.820 --> 00:05:55.211
Now,
&gt;&gt; Lukas Ruebbelke: This is where,

82
00:05:55.211 --> 00:05:58.966
so pretty basic,
does everybody have a sense of like,

83
00:05:58.966 --> 00:06:02.680
we have this initial output
of some stream of data.

84
00:06:02.680 --> 00:06:06.300
In this case, it's every time I type
that's where the data is coming from,

85
00:06:06.300 --> 00:06:08.190
so from event, key up.

86
00:06:10.110 --> 00:06:13.771
And then we're figuring out
where we want to put it.

87
00:06:13.771 --> 00:06:17.614
In this case, we're simply saying,
at the end of this,

88
00:06:17.614 --> 00:06:22.029
whatever comes through here,
let's just assign it to message.

89
00:06:23.976 --> 00:06:26.135
&gt;&gt; Lukas Ruebbelke: So
what we can also do, for instance, so

90
00:06:26.135 --> 00:06:28.250
we did the filter one.

91
00:06:28.250 --> 00:06:32.910
So filter works, they've actually modelled
this off of pretty much like the higher

92
00:06:32.910 --> 00:06:38.170
order, like array functions in JavaScript,
and so they're pretty similar.

93
00:06:38.170 --> 00:06:41.751
So we'll go event, any, and

94
00:06:41.751 --> 00:06:45.773
we're just going to filter out,

95
00:06:53.219 --> 00:06:57.800
&gt;&gt; Lukas Ruebbelke: Any event that
does not have the shift key held down.

96
00:06:57.800 --> 00:07:03.770
So we're just simply saying if
event.shiftkey is true, let it through.

97
00:07:03.770 --> 00:07:06.170
If not, just ignore it.

98
00:07:08.720 --> 00:07:09.350
So we'll go here.

99
00:07:11.980 --> 00:07:15.270
I'm typing all day and
nothing is happening.

100
00:07:16.840 --> 00:07:21.280
The minute I hold shift and I keep typing.

101
00:07:21.280 --> 00:07:25.370
Now, because my shift key is down you
can't really see it, but trust me, it is.

102
00:07:26.980 --> 00:07:28.300
Add some seeds here,

103
00:07:28.300 --> 00:07:33.170
like it's now going through the stream,
hold the shift key down and it catches up.

104
00:07:35.120 --> 00:07:42.375
So I'm filtering out anything that is not,
&gt;&gt; Lukas Ruebbelke: Like

105
00:07:42.375 --> 00:07:43.394
any event that would shift key.

106
00:07:43.394 --> 00:07:47.741
So you're gonna attach any
kind of parameter here to say,

107
00:07:47.741 --> 00:07:50.768
if this thing isn't true filter it out.

108
00:07:53.014 --> 00:07:53.922
&gt;&gt; Lukas Ruebbelke: A step further.

109
00:07:55.466 --> 00:07:57.201
&gt;&gt; Lukas Ruebbelke: So
I'm gonna take the filter out.

110
00:07:58.511 --> 00:07:59.160
&gt;&gt; Lukas Ruebbelke: But.

111
00:08:07.679 --> 00:08:08.520
&gt;&gt; Lukas Ruebbelke: We'll go query.

112
00:08:13.829 --> 00:08:16.732
&gt;&gt; Lukas Ruebbelke: So remember, with map
you're just simply saying I'm gonna take

113
00:08:16.732 --> 00:08:19.082
this thing, and
I'm going to do something with it.

114
00:08:19.082 --> 00:08:22.964
So we'll go and
just transform it to uppercase,

115
00:08:29.100 --> 00:08:32.140
&gt;&gt; Lukas Ruebbelke: Super easy, right?

116
00:08:32.140 --> 00:08:36.295
So notice it's really handy, think of this
is like I have this stream of data, and

117
00:08:36.295 --> 00:08:38.684
it's going through, essentially, my map.

118
00:08:38.684 --> 00:08:41.997
Kind of custom factory on
the side of the highway and

119
00:08:41.997 --> 00:08:45.704
we're saying it comes in one way,
goes out another way.

120
00:08:45.704 --> 00:08:50.875
&gt;&gt; Speaker 2: So it's sending
the capital version to the server?

121
00:08:50.875 --> 00:08:56.125
&gt;&gt; Lukas Ruebbelke: Well in this case,
all that's happening is it's

122
00:08:56.125 --> 00:09:02.132
transforming it here and
it's sending it to subscribe.

123
00:09:02.132 --> 00:09:06.036
And all we're doing is we're
taking this final input and

124
00:09:06.036 --> 00:09:09.810
assigning it to this local
property right here.

125
00:09:09.810 --> 00:09:14.110
But eventually, by the time we're finished
with this, we will do something with this.

126
00:09:15.885 --> 00:09:17.000
&gt;&gt; Lukas Ruebbelke: So
let's see what else we have.

127
00:09:21.652 --> 00:09:23.960
&gt;&gt; Lukas Ruebbelke: Actually I wanna see,
what order should I do this in?

128
00:09:23.960 --> 00:09:28.060
So we've done map filter,
let's do debounce time.

129
00:09:28.060 --> 00:09:30.726
So what we're doing is obviously
making kind of this search component.

130
00:09:30.726 --> 00:09:35.717
And you're gonna kinda want to control
how fast you're hitting the server,

131
00:09:35.717 --> 00:09:38.799
what frequency are you
going to hit the server?

132
00:09:41.589 --> 00:09:45.880
&gt;&gt; Lukas Ruebbelke: And so this case
let's go with, I don't know, 200.

133
00:09:45.880 --> 00:09:50.593
Yeah, so this is 200 milliseconds.

134
00:09:53.983 --> 00:09:56.081
&gt;&gt; Lukas Ruebbelke: And
what I'm actually going to do, so

135
00:09:56.081 --> 00:09:58.650
the order in which these
are in matter as well.

136
00:09:58.650 --> 00:10:02.600
So for instance,
you would wanna put, for instance,

137
00:10:02.600 --> 00:10:05.290
your debounce in front of all
of your transformation things.

138
00:10:05.290 --> 00:10:07.500
So there's no need to run
it if you don't need to.

139
00:10:09.370 --> 00:10:10.840
And so we'll go here, and

140
00:10:10.840 --> 00:10:15.229
actually let's set this at,
&gt;&gt; Lukas Ruebbelke: Okay, two seconds.

141
00:10:22.415 --> 00:10:22.915
&gt;&gt; Lukas Ruebbelke: Hello?

142
00:10:27.419 --> 00:10:28.255
&gt;&gt; Lukas Ruebbelke: I wonder
if I did this too long.

143
00:10:32.184 --> 00:10:34.099
&gt;&gt; Lukas Ruebbelke: Let's see
what happens if I do this.

144
00:10:40.315 --> 00:10:46.697
&gt;&gt; Lukas Ruebbelke: So
there's a little bit, let's do 200.

145
00:10:46.697 --> 00:10:48.420
I would need to ask you
probably the documentation,

146
00:10:48.420 --> 00:10:49.594
I thought it was milliseconds, but

147
00:10:49.594 --> 00:10:52.414
that seemed like-
&gt;&gt; Speaker 3: Mine's working.

148
00:10:52.414 --> 00:10:56.513
&gt;&gt; Lukas Ruebbelke: Really?
&gt;&gt; Speaker 3: 2000, yeah, a few seconds.

149
00:10:58.818 --> 00:11:01.718
&gt;&gt; Lukas Ruebbelke: Sorry,
actually once I stop then it's like, okay.

150
00:11:01.718 --> 00:11:05.616
So debounce time, what it does is
it takes a bunch of input and,

151
00:11:05.616 --> 00:11:09.532
within an allotted time,
it just takes the last value from it.

152
00:11:09.532 --> 00:11:11.322
So once I kind of let off and said, okay,

153
00:11:11.322 --> 00:11:14.174
I'm gonna take the last thing
that happened within this thing.

154
00:11:20.763 --> 00:11:27.821
&gt;&gt; Lukas Ruebbelke: And let's also do,
&gt;&gt; Lukas Ruebbelke: There's another one,

155
00:11:27.821 --> 00:11:30.403
distinctUntilUnchanged.

156
00:11:30.403 --> 00:11:34.473
And so what this simply does is,
for instance you start typing and

157
00:11:34.473 --> 00:11:39.061
you go back and it's the same value,
in other words nothing has changed,

158
00:11:39.061 --> 00:11:41.141
then it's just going to ignore.

159
00:11:41.141 --> 00:11:47.155
So this is just another way to kind of
filter out that nothing has changed,

160
00:11:47.155 --> 00:11:50.850
so therefore there's no
need to act upon it.

161
00:11:50.850 --> 00:11:53.353
And so I'm trying to, I don't know,
let's see what happens here.

162
00:11:57.334 --> 00:11:59.853
&gt;&gt; Lukas Ruebbelke: Yeah, this may be
hard to kind of a timing thing here, but

163
00:11:59.853 --> 00:12:02.529
basically if you go A,
type some stuff, and you went back and

164
00:12:02.529 --> 00:12:04.278
write that the last value was A as well.

165
00:12:04.278 --> 00:12:08.230
You would say, it's the same thing,
we're just gonna stop it there.

166
00:12:08.230 --> 00:12:11.226
So we're basically just
checking has anything changed?

167
00:12:11.226 --> 00:12:13.369
If it's distinct,
then it will allow it through.

168
00:12:17.186 --> 00:12:21.293
&gt;&gt; Lukas Ruebbelke: All right, so,
&gt;&gt; Lukas Ruebbelke: Let's kinda of get to

169
00:12:21.293 --> 00:12:22.480
the punchline here.

170
00:12:24.400 --> 00:12:27.470
The last one that I have and
then we will call it a day.

171
00:12:27.470 --> 00:12:29.380
I'm going to leave, yes?

172
00:12:29.380 --> 00:12:30.837
&gt;&gt; Speaker 4: ViewChild.

173
00:12:30.837 --> 00:12:31.575
&gt;&gt; Lukas Ruebbelke: What's that?

174
00:12:31.575 --> 00:12:33.306
&gt;&gt; Speaker 4: What is ViewChild?

175
00:12:33.306 --> 00:12:35.810
&gt;&gt; Lukas Ruebbelke: So
all ViewChild is is it looks for

176
00:12:35.810 --> 00:12:38.650
a local template variable
on your template.

177
00:12:38.650 --> 00:12:43.731
So in this case, item search right here.

178
00:12:43.731 --> 00:12:47.614
And so it looks in the view and
it looks for a child of that name,

179
00:12:47.614 --> 00:12:50.550
and it basically creates a reference for
you.

180
00:12:52.179 --> 00:12:55.780
&gt;&gt; Lukas Ruebbelke: In this imperative
context that you can then program against.

181
00:12:55.780 --> 00:12:58.264
&gt;&gt; Speaker 4: Okay, so
can I bring in gform,

182
00:12:58.264 --> 00:13:02.054
any direct image that was used there that-
&gt;&gt; Lukas Ruebbelke: No,

183
00:13:02.054 --> 00:13:06.310
one of the big things with
Angular.js is keeping your DOM,

184
00:13:06.310 --> 00:13:10.440
your declarative context and
your context separate.

185
00:13:10.440 --> 00:13:11.110
&gt;&gt; Speaker 4: Yeah.
&gt;&gt; Lukas Ruebbelke: So

186
00:13:11.110 --> 00:13:14.871
because I'm only using
this as my starting point,

187
00:13:14.871 --> 00:13:19.730
I'm actually not manipulating DOM,
per se, directly.

188
00:13:19.730 --> 00:13:24.308
I'm simply using a DOM element in
an event to do additional things.

189
00:13:24.308 --> 00:13:27.942
And so they've kind of since
loosened up on the separation

190
00:13:27.942 --> 00:13:30.770
of declarative versus imperative.

191
00:13:30.770 --> 00:13:33.909
But at the same time,
really try to keep that separated.

192
00:13:33.909 --> 00:13:37.672
And allow the template
to be the template and

193
00:13:37.672 --> 00:13:42.180
the component class to hold
your imperative logic.

194
00:13:42.180 --> 00:13:46.139
In this case,
the only thing that I'm really using

195
00:13:46.139 --> 00:13:49.925
here is I'm just using
a reference to the input.

196
00:13:49.925 --> 00:13:54.140
To capture this event and
then process that.

197
00:13:54.140 --> 00:13:55.729
The other way that I've seen this, and

198
00:13:55.729 --> 00:13:58.393
they're working on a new update
that'll actually change this.

199
00:13:58.393 --> 00:14:01.038
Is you can actually create a subject,

200
00:14:01.038 --> 00:14:06.166
which then you have to put into your
template and then call subject.nxt,

201
00:14:06.166 --> 00:14:10.230
which I think is like six of one,
half a dozen of the other.

202
00:14:10.230 --> 00:14:14.203
I prefer to have it nice and clean,
this is my observable sequence.

203
00:14:14.203 --> 00:14:19.300
&gt;&gt; Speaker 4: So we could not have
used simple binding here, right?

204
00:14:19.300 --> 00:14:23.319
I mean do the binding here, or a single-
&gt;&gt; Lukas Ruebbelke: No,

205
00:14:23.319 --> 00:14:26.490
because it would not create an observable.

206
00:14:26.490 --> 00:14:30.010
That's why we're saying
when this thing happens,

207
00:14:30.010 --> 00:14:32.975
create an observable and
continue to do it.

208
00:14:32.975 --> 00:14:36.820
So using reactive forms, you can
actually use value changes and get that.

209
00:14:36.820 --> 00:14:40.420
But in this case,
we're capturing an event and

210
00:14:40.420 --> 00:14:45.197
converting that event into
an observable and that's the key.

211
00:14:45.197 --> 00:14:50.130
&gt;&gt; Speaker 4: So do you think from event
now that when we have an event binding.

212
00:14:50.130 --> 00:14:54.183
If I bond to an event,
like an enter event on an input.

213
00:14:54.183 --> 00:14:54.890
&gt;&gt; Lukas Ruebbelke: Mm-hm.

214
00:14:54.890 --> 00:14:58.018
&gt;&gt; Speaker 4: Right,
would a key appear on an input?

215
00:14:58.018 --> 00:15:01.301
&gt;&gt; Lukas Ruebbelke: So
it's basically going to call a method and

216
00:15:01.301 --> 00:15:06.400
pass that event object in,
but it's not an observable.

217
00:15:06.400 --> 00:15:11.380
Therefore, I don't have access
to any of this or this.

218
00:15:11.380 --> 00:15:14.840
That's the point is that you
are essentially capturing an event and

219
00:15:14.840 --> 00:15:18.300
using it for
your initial output for the string.

220
00:15:18.300 --> 00:15:22.204
As a result, you now have
access to all of the operators.

221
00:15:22.204 --> 00:15:29.780
And so I'm gonna show you one more,
and this is switchMap.

222
00:15:29.780 --> 00:15:33.746
And so how this works is,
we'll take the query and

223
00:15:33.746 --> 00:15:36.963
we're going to call this ItemService.

224
00:15:36.963 --> 00:15:38.795
And so this one is a bit of a jump, so

225
00:15:38.795 --> 00:15:41.083
we're gonna take just
a bit of a leap here.

226
00:15:44.024 --> 00:15:46.233
&gt;&gt; Lukas Ruebbelke: Search query.

227
00:15:53.030 --> 00:15:53.782
&gt;&gt; Lukas Ruebbelke: Why does it not?

228
00:15:53.782 --> 00:15:55.620
&gt;&gt; Speaker 4: [INAUDIBLE] operator.

229
00:15:58.228 --> 00:15:59.391
&gt;&gt; Lukas Ruebbelke: I
don't think that it likes

230
00:15:59.391 --> 00:16:02.030
query because I think it's confusing with.

231
00:16:02.030 --> 00:16:04.080
&gt;&gt; Speaker 4: No, the equal to sign.

232
00:16:04.080 --> 00:16:04.580
&gt;&gt; Lukas Ruebbelke: Yeah.

233
00:16:07.290 --> 00:16:08.520
What's going to work.

234
00:16:08.520 --> 00:16:09.510
Teamwork.

235
00:16:11.743 --> 00:16:12.752
&gt;&gt; Lukas Ruebbelke: Ok so now.

236
00:16:26.538 --> 00:16:28.432
&gt;&gt; Lukas Ruebbelke: I'm just
gonna update this a little bit.

237
00:16:47.774 --> 00:16:49.904
&gt;&gt; Lukas Ruebbelke: So,
what we're doing in here, actually,

238
00:16:49.904 --> 00:16:53.426
let me make sure this works first,
because that would be embarrassing.

239
00:17:02.413 --> 00:17:06.150
&gt;&gt; Lukas Ruebbelke: All right, hooray!

240
00:17:06.150 --> 00:17:07.419
So what's happening here?

241
00:17:09.044 --> 00:17:13.050
&gt;&gt; Lukas Ruebbelke: Based on our previous
module, of server side communication.

242
00:17:13.050 --> 00:17:16.578
When you make an ACTP call,
what does it return?

243
00:17:18.792 --> 00:17:20.190
&gt;&gt; Lukas Ruebbelke: An observable, right?

244
00:17:20.190 --> 00:17:24.150
So when you say, hey server,
go do this thing.

245
00:17:24.150 --> 00:17:25.860
We get an observable.

246
00:17:25.860 --> 00:17:28.490
So using that and keeping that in mind.

247
00:17:28.490 --> 00:17:32.900
And I'll obviously just show this to you
so we can see exactly what's happening.

248
00:17:35.920 --> 00:17:41.090
I'm sending in a term, and
I am in a sense making http get.

249
00:17:41.090 --> 00:17:44.640
And sending in a parameter
which allows me to search.

250
00:17:45.730 --> 00:17:51.097
So in the item search component,
&gt;&gt; Lukas Ruebbelke: That I'm

251
00:17:51.097 --> 00:17:54.800
calling this right here.

252
00:17:54.800 --> 00:17:57.480
Item search search query.

253
00:17:57.480 --> 00:17:59.142
What is that returning?

254
00:17:59.142 --> 00:18:00.700
An observable.

255
00:18:00.700 --> 00:18:07.520
Now with that in mind when you
call map what does that do?

256
00:18:07.520 --> 00:18:09.780
It takes one value and
returns a new value.

257
00:18:12.290 --> 00:18:19.950
So, switchMap, what that does,
is it takes one observable string and

258
00:18:19.950 --> 00:18:24.430
maps it or
switches it to a new observable string.

259
00:18:26.040 --> 00:18:30.930
So what we're doing here is we're saying
we're gonna throttle this a bit so

260
00:18:30.930 --> 00:18:32.020
we don't hammer our server.

261
00:18:33.410 --> 00:18:40.760
We're also going to grab the target value,
so the actual text that's being inputted.

262
00:18:40.760 --> 00:18:46.010
And then we're going to call itemService
and when that returns an observable,

263
00:18:46.010 --> 00:18:52.186
that's what we're going to
return into our final input.

264
00:18:53.570 --> 00:18:59.580
And so now we're basically doing this
live search in about six lines of code.

265
00:19:01.310 --> 00:19:06.469
And from here what I can do,
&gt;&gt; Lukas Ruebbelke: Is,

266
00:19:06.469 --> 00:19:09.684
let's go.

267
00:19:12.915 --> 00:19:16.614
&gt;&gt; Lukas Ruebbelke: I'm
going to create an output.

268
00:19:19.653 --> 00:19:25.584
&gt;&gt; Lukas Ruebbelke: And, I don't
think it knows it's there, hold on.

269
00:19:29.584 --> 00:19:31.254
&gt;&gt; Lukas Ruebbelke: Wait for it.

270
00:19:36.285 --> 00:19:39.720
&gt;&gt; Lukas Ruebbelke: I'll go results,
people's new eventemitter.

271
00:19:44.190 --> 00:19:46.700
Do I have this inner eventemitter out?

272
00:19:46.700 --> 00:19:47.440
There we go.

273
00:19:47.440 --> 00:19:47.940
All right.

274
00:19:48.960 --> 00:19:51.630
And then from here.

275
00:19:51.630 --> 00:19:55.779
We're going to build results and
then items.

276
00:20:07.849 --> 00:20:09.777
&gt;&gt; Lukas Ruebbelke: And from here.

277
00:20:09.777 --> 00:20:13.068
Does we have an output.

278
00:20:13.068 --> 00:20:14.824
Lets go to our home component.

279
00:20:18.472 --> 00:20:25.035
&gt;&gt; Lukas Ruebbelke: results, and let's do.

280
00:20:26.339 --> 00:20:28.861
&gt;&gt; Lukas Ruebbelke: We'll
do handle results, and

281
00:20:28.861 --> 00:20:33.751
we'll pass in the event
&gt;&gt; Lukas Ruebbelke: This obviously does

282
00:20:33.751 --> 00:20:42.131
not exist yet, so let's go into-
&gt;&gt; Lukas Ruebbelke: Home component.

283
00:20:42.131 --> 00:20:47.687
And-
&gt;&gt; Lukas Ruebbelke: Handleresults

284
00:20:47.687 --> 00:20:52.699
items stat.Items = items.

285
00:20:57.012 --> 00:20:58.642
&gt;&gt; Lukas Ruebbelke: Refresh page.

286
00:21:05.160 --> 00:21:06.910
&gt;&gt; Lukas Ruebbelke: This are what
we are doing just to summarize.

287
00:21:09.117 --> 00:21:11.873
&gt;&gt; Lukas Ruebbelke: In our
item search component,

288
00:21:11.873 --> 00:21:16.220
we're capturing the output
of this form field.

289
00:21:18.370 --> 00:21:22.650
We're throttling it by debouncing it, also
making sure that it has indeed changed.

290
00:21:22.650 --> 00:21:24.770
So step one is we're just
putting up some guards so

291
00:21:24.770 --> 00:21:28.470
we don't do 50 billion
calls to the server.

292
00:21:28.470 --> 00:21:31.780
We're grabbing the actual value,
the text value from the event.

293
00:21:32.870 --> 00:21:35.520
We're using that to call item service.

294
00:21:36.670 --> 00:21:40.170
Returning the result
into our subscribe block.

295
00:21:40.170 --> 00:21:43.070
And then from here,
we're saying let's just omit this up.

296
00:21:44.180 --> 00:21:49.750
And so the search component is
actually not even storing the results.

297
00:21:49.750 --> 00:21:51.860
It's simply in the observable stream.

298
00:21:51.860 --> 00:21:54.190
Saying grabbing the input,
doing its transformation.

299
00:21:55.630 --> 00:21:56.940
Call in service.

300
00:21:56.940 --> 00:22:00.070
Taking the results and
saying I have it, I don't need it.

301
00:22:00.070 --> 00:22:00.850
And submitting it up.

302
00:22:00.850 --> 00:22:04.200
So now we have an output
into our home component.

303
00:22:05.250 --> 00:22:06.980
It's calling HandleResults.

304
00:22:06.980 --> 00:22:08.079
It's taking the results.

305
00:22:09.390 --> 00:22:12.005
And so attaching it to the items.

306
00:22:13.850 --> 00:22:17.180
&gt;&gt; Lukas Ruebbelke: And
they don't know anything about each other.

307
00:22:17.180 --> 00:22:19.770
So we have a component
that all it is doing

308
00:22:19.770 --> 00:22:22.870
is searching against this endpoint and
returning its results.

309
00:22:24.040 --> 00:22:25.550
I'm not doing anything with it.

310
00:22:25.550 --> 00:22:28.110
In this case,
I'm using it to overwrite the question.

311
00:22:28.110 --> 00:22:30.480
So I'm calling it once to hydrate it.

312
00:22:30.480 --> 00:22:35.350
But then from here I can
use this to type and

313
00:22:35.350 --> 00:22:38.699
search and filter this out.

314
00:22:38.699 --> 00:22:43.165
So I have completely encapsulated
the search component.

315
00:22:43.165 --> 00:22:47.653
And the only thing that it's doing is just
kicking out its results Into the parent

316
00:22:47.653 --> 00:22:50.161
component that I can
then consume down here.

317
00:22:53.193 --> 00:22:55.390
&gt;&gt; Lukas Ruebbelke: And
this is how I type it.

318
00:22:57.190 --> 00:22:58.660
Done.

319
00:22:58.660 --> 00:23:05.599
So this right here,
is the observable sequence.

320
00:23:06.830 --> 00:23:10.370
Our initial output-
&gt;&gt; Lukas Ruebbelke: Final

321
00:23:10.370 --> 00:23:12.687
input,
&gt;&gt; Lukas Ruebbelke: And

322
00:23:12.687 --> 00:23:15.240
all of the operators in between.

323
00:23:16.890 --> 00:23:21.769
But in four lines of code we've
actually done a whole lot of stuff.

