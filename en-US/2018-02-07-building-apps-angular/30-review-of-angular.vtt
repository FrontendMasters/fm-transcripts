WEBVTT

1
00:00:00.220 --> 00:00:03.240
&gt;&gt; Lukas Ruebbelke: So I'm going to
skip the getting started session,

2
00:00:03.240 --> 00:00:06.720
because I think everybody
is up to speed on that.

3
00:00:06.720 --> 00:00:08.950
And so, let's do a review.

4
00:00:08.950 --> 00:00:13.470
So let's start out with
just have a conversation.

5
00:00:13.470 --> 00:00:20.451
So this is the Angular Big Picture.

6
00:00:20.451 --> 00:00:24.220
Who can tell what is
the purpose of NG module?

7
00:00:25.330 --> 00:00:27.490
You looked like you had an answer,
so let's go with you.

8
00:00:28.630 --> 00:00:31.220
&gt;&gt; Speaker 2: It's encapsulating
the whole obligation and

9
00:00:31.220 --> 00:00:35.096
it's getting a way to,
an entry point for you into the app.

10
00:00:35.096 --> 00:00:40.840
&gt;&gt; Lukas Ruebbelke: Keep going,
you're on the right track.

11
00:00:40.840 --> 00:00:44.910
&gt;&gt; Speaker 2: You have an app,
you have a base module to it and

12
00:00:44.910 --> 00:00:46.020
you could have some modules.

13
00:00:46.020 --> 00:00:50.110
And each module may be something like for
a big banking app.

14
00:00:50.110 --> 00:00:54.962
Say, for example, we're one module and
saving functions in other modules.

15
00:00:54.962 --> 00:00:57.518
You could have multiple modules in an app.

16
00:00:57.518 --> 00:01:00.080
I know we could have components and
services in it,

17
00:01:00.080 --> 00:01:03.910
and these all modules can be all
boosted up using once in a module.

18
00:01:03.910 --> 00:01:08.190
&gt;&gt; Lukas Ruebbelke: Right,
so that is correct.

19
00:01:08.190 --> 00:01:13.090
So the idea is that you have module that
can have other modules and other things.

20
00:01:13.090 --> 00:01:14.240
Specifically.

21
00:01:14.240 --> 00:01:16.519
&gt;&gt; Speaker 3: Kind of like a house for
all your dependencies.

22
00:01:17.890 --> 00:01:19.070
&gt;&gt; Lukas Ruebbelke: Also good, yes.

23
00:01:20.090 --> 00:01:25.373
So it's a way to essentially, so
it has dependencies components modules.

24
00:01:25.373 --> 00:01:30.233
What other modules, etc.,
is it's really this container,

25
00:01:30.233 --> 00:01:35.380
more so kind of a manifest,
it tells Angular how to wire itself up.

26
00:01:36.660 --> 00:01:38.790
And so,
you're communicating to Angular itself,

27
00:01:38.790 --> 00:01:42.286
saying, I want to build this application
and this is what I want in it.

28
00:01:42.286 --> 00:01:45.830
I want these components,
I want these sub-modules,

29
00:01:45.830 --> 00:01:48.300
I'm going to use these services.

30
00:01:48.300 --> 00:01:54.030
And I want to bootstrap, if it's the top
level module, using this component.

31
00:01:54.030 --> 00:01:57.020
And so, I think of it really
as just kind of a blueprint of

32
00:01:57.020 --> 00:01:59.230
Angular this is how I want
you to put yourself together.

33
00:02:00.420 --> 00:02:03.980
Now, that is at the framework level.

34
00:02:05.660 --> 00:02:08.590
What is the purpose of just an ES6 module?

35
00:02:10.390 --> 00:02:16.299
&gt;&gt; Speaker 2: You can,
you can export the ES6 more of your but

36
00:02:16.299 --> 00:02:21.466
it's a construct of defining an entity,
NESX?

37
00:02:21.466 --> 00:02:26.420
&gt;&gt; Lukas Ruebbelke: Yeah,
so that's good, same thing.

38
00:02:26.420 --> 00:02:28.000
It's a container, but

39
00:02:28.000 --> 00:02:31.890
it's an organizational mechanism
at the language level.

40
00:02:31.890 --> 00:02:36.830
So it allows you to organize your
application into these kind of blocks.

41
00:02:36.830 --> 00:02:40.420
That then using for instance like Web PEC,
you can go through and

42
00:02:40.420 --> 00:02:44.040
say okay, I need to put these things back
together, and they know how to do that.

43
00:02:44.040 --> 00:02:48.950
So unlike ES6, where you just
kind of had to put everything

44
00:02:50.260 --> 00:02:53.370
originally kind of pre-gulp and
grunt is because you know,

45
00:02:53.370 --> 00:02:57.080
I think we've all seen this where
you have an index file of like 20.

46
00:02:57.080 --> 00:02:58.717
Your script tag's in there.

47
00:02:58.717 --> 00:03:01.772
You're basically, inserting all these
scripts and if you get it in the wrong

48
00:03:01.772 --> 00:03:05.403
order, I've been there when I've been like
I don't understand why this isn't working.

49
00:03:05.403 --> 00:03:08.044
And then you have to start
swapping things up the chain and

50
00:03:08.044 --> 00:03:09.980
just the order till you get it just right.

51
00:03:11.390 --> 00:03:15.540
So modules kind of solve that problem, cuz
it allows us to define just what we need

52
00:03:15.540 --> 00:03:18.364
and it puts it together in
a way that's going to work.

53
00:03:18.364 --> 00:03:23.970
So, ES6 Modules are organizational
mechanisms at the language level.

54
00:03:23.970 --> 00:03:27.790
So this allows us to organize our code and
actually put it back together.

55
00:03:27.790 --> 00:03:31.406
NgModules is an organizational
mechanism at the framework level.

56
00:03:31.406 --> 00:03:36.989
So what about routes?

57
00:03:38.700 --> 00:03:41.230
You have already answered
like 17 questions.

58
00:03:41.230 --> 00:03:45.890
So you're on pause until I get it from,
you know what I'm gonna just go random, so

59
00:03:45.890 --> 00:03:47.490
what are routes for?

60
00:03:48.790 --> 00:03:52.853
&gt;&gt; Speaker 4: Routes are a ways
to switch to different views or

61
00:03:52.853 --> 00:03:56.340
pages and
just lets you control that switch.

62
00:03:56.340 --> 00:04:00.560
&gt;&gt; Lukas Ruebbelke: Yeah, so
it's a way to switch to views or pages.

63
00:04:00.560 --> 00:04:05.700
I think specifically it's a way to define
a specific state in your application,

64
00:04:05.700 --> 00:04:09.262
which is oftentimes by pages
which you would consider.

65
00:04:09.262 --> 00:04:12.915
So a lot of times I would do my
routes on a per feature basis,

66
00:04:12.915 --> 00:04:14.490
which we've seen here.

67
00:04:14.490 --> 00:04:17.190
We have an items route which is route.

68
00:04:17.190 --> 00:04:18.410
Home and so

69
00:04:18.410 --> 00:04:23.020
it just allows you to say, I want to match
this URL to this state in the application.

70
00:04:26.630 --> 00:04:31.130
Okay, so this is like
a softball question right here.

71
00:04:31.130 --> 00:04:33.080
What role does components play?

72
00:04:36.230 --> 00:04:43.848
For my silent friend in the striped shirt
&gt;&gt; Speaker 5: Components

73
00:04:47.111 --> 00:04:52.650
&gt;&gt; Speaker 5: Is like a section.

74
00:04:52.650 --> 00:04:58.847
Section is up your views and
stuff like that how to describe.

75
00:04:58.847 --> 00:05:05.647
The properties and
behaviors of that certain component and

76
00:05:05.647 --> 00:05:10.543
also, I guess you can also with components

77
00:05:10.543 --> 00:05:15.575
you can also localize your, specify your,

78
00:05:15.575 --> 00:05:21.832
I guess style stuff like that for
easier batchment so.

79
00:05:24.799 --> 00:05:28.591
&gt;&gt; Speaker 5: And
it's a little more easier to, I guess,

80
00:05:28.591 --> 00:05:32.842
maintain,
&gt;&gt; Speaker 5: Your,

81
00:05:32.842 --> 00:05:38.210
I guess, structure up here over Hawk-
&gt;&gt; Lukas Ruebbelke: Yeah.

82
00:05:38.210 --> 00:05:40.635
&gt;&gt; Speaker 5: Application, so-
&gt;&gt; Lukas Ruebbelke: That's it, so

83
00:05:40.635 --> 00:05:46.787
I think in so many words they're trying to
say like they're Legos for application.

84
00:05:46.787 --> 00:05:48.237
It's a, and so that's it.

85
00:05:48.237 --> 00:05:51.697
I think of components as kind of
the fundamental building block for

86
00:05:51.697 --> 00:05:52.910
the application.

87
00:05:52.910 --> 00:05:57.080
And so, what it allows you to do
is self-contain, self-incapsulated

88
00:05:57.080 --> 00:06:00.780
units that has your template,
your styles, and your functionality.

89
00:06:00.780 --> 00:06:04.276
And you can pick it up and
move it somewhere else, so ideally,

90
00:06:04.276 --> 00:06:07.184
if you do it right,
your components are portable.

91
00:06:07.184 --> 00:06:11.282
Just as some of you pick up a Lego,
put it over here, put it over here,

92
00:06:11.282 --> 00:06:12.694
put it on the stairs, so

93
00:06:12.694 --> 00:06:17.020
I step on it in the middle of the night
as my six year old is so fond of doing.

94
00:06:17.020 --> 00:06:21.530
But the point is that we encapsulate
a bit of functionality, so

95
00:06:21.530 --> 00:06:23.820
that we can use it wherever we want.

96
00:06:23.820 --> 00:06:26.465
So just random new components,
they're building blocks.

97
00:06:28.639 --> 00:06:29.642
&gt;&gt; Lukas Ruebbelke: What about services?

98
00:06:32.862 --> 00:06:34.040
&gt;&gt; Lukas Ruebbelke: Yes?

99
00:06:34.040 --> 00:06:35.310
&gt;&gt; Speaker 6: Kind of, the business logic.

100
00:06:35.310 --> 00:06:36.477
&gt;&gt; Lukas Ruebbelke: Yeah.

101
00:06:36.477 --> 00:06:40.815
&gt;&gt; Speaker 6: Where you can call APIs and
stuff.

102
00:06:40.815 --> 00:06:43.385
&gt;&gt; Lukas Ruebbelke: Mm-hm,
yeah, so that's exactly it.

103
00:06:43.385 --> 00:06:49.151
Is any kind of business logic,
domain models, like shared logic,

104
00:06:49.151 --> 00:06:55.221
they go in the services and you want
your services as rich as possible and

105
00:06:55.221 --> 00:07:00.114
to that end,
a component should do one of two things.

106
00:07:00.114 --> 00:07:05.970
One, is consume just enough data
to satisfy the template and

107
00:07:05.970 --> 00:07:12.550
capture user events, and then route
that event to the appropriate service.

108
00:07:12.550 --> 00:07:15.380
And so, what you want, is you want your
components to be very, very thin and

109
00:07:15.380 --> 00:07:15.990
specific.

110
00:07:17.880 --> 00:07:22.310
I say this because in Angular JS,
and I did Fletch for

111
00:07:22.310 --> 00:07:25.860
many years, you would have this
problem of having this component,

112
00:07:25.860 --> 00:07:28.930
that tons of business logic and
it just did way too much.

113
00:07:28.930 --> 00:07:32.713
Well, now, it's like I need to test this,
I need to move it somewhere else,

114
00:07:32.713 --> 00:07:36.167
because it's so tightly coupled
that it's really hard to work with.

115
00:07:36.167 --> 00:07:38.430
So I have a really small components,

116
00:07:38.430 --> 00:07:41.720
really rich models solves
that problem very nicely.

117
00:07:43.840 --> 00:07:47.920
All right, so
what kind of mechanism is in play here?

118
00:07:47.920 --> 00:07:51.735
We've already talked about
it just a little bit, but

119
00:07:51.735 --> 00:07:56.480
what is this line right here?

120
00:07:56.480 --> 00:07:57.140
What are we doing?

121
00:07:59.210 --> 00:08:03.070
&gt;&gt; Speaker 7: Making the component
available to the rest of the app.

122
00:08:03.070 --> 00:08:06.165
&gt;&gt; Lukas Ruebbelke: Yep, so
essentially, it's ES6 modules again.

123
00:08:06.165 --> 00:08:08.902
We're importing stuff, so we can use it.

124
00:08:08.902 --> 00:08:14.190
And we're exporting it, so that it
is available to the rest of the app.

125
00:08:14.190 --> 00:08:17.215
So let's talk about these
properties on NgModule.

126
00:08:19.680 --> 00:08:22.537
Declarations are for what?

127
00:08:24.626 --> 00:08:26.380
&gt;&gt; Speaker 8: Components that we build.

128
00:08:26.380 --> 00:08:29.060
&gt;&gt; Lukas Ruebbelke: Yep, and
so generally it's components.

129
00:08:29.060 --> 00:08:33.704
But anything that goes into the view
pretty much will go into a declaration.

130
00:08:33.704 --> 00:08:39.887
So this one's a softball,
what goes here in imports?

131
00:08:39.887 --> 00:08:44.005
&gt;&gt; Speaker 9: [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: Uh-huh, all right, and

132
00:08:44.005 --> 00:08:45.020
providers?

133
00:08:46.830 --> 00:08:47.800
&gt;&gt; Speaker 8: Services.

134
00:08:47.800 --> 00:08:49.560
&gt;&gt; Lukas Ruebbelke: Yeah, and bootstrap?

135
00:08:49.560 --> 00:08:50.680
Somebody who hasn't answered yet.

136
00:08:53.270 --> 00:08:54.509
&gt;&gt; Speaker 10: The entry
point into the app.

137
00:08:54.509 --> 00:08:59.717
&gt;&gt; Lukas Ruebbelke: Good, very good.

138
00:08:59.717 --> 00:09:00.853
And so I think we just kinda covered this.

139
00:09:00.853 --> 00:09:02.630
This is self-explanatory.

140
00:09:02.630 --> 00:09:06.440
The entry point is at module, which then,
according to the previous example,

141
00:09:06.440 --> 00:09:08.630
is going to bootstrap app component.

142
00:09:11.100 --> 00:09:14.230
So what is the basic structure of a route?

143
00:09:14.230 --> 00:09:17.150
A route consists of kind of two things.

144
00:09:18.730 --> 00:09:23.260
What are those two kind of
elements in the recipe?

145
00:09:23.260 --> 00:09:24.492
Yes?
&gt;&gt; Speaker 11: Path.

146
00:09:24.492 --> 00:09:26.008
&gt;&gt; Lukas Ruebbelke: Path.

147
00:09:26.008 --> 00:09:27.373
&gt;&gt; Speaker 11: Component.

148
00:09:27.373 --> 00:09:32.373
&gt;&gt; Lukas Ruebbelke: Yes, ding-ding, so
it's essentially taking a path, a URL path

149
00:09:32.373 --> 00:09:38.193
and matching it to a component, which
then gets loaded into a router outlet.

150
00:09:38.193 --> 00:09:41.434
Now, I don't think we talked
about this yesterday.

151
00:09:41.434 --> 00:09:45.645
But I would wager if somebody
put their thinking cap on,

152
00:09:45.645 --> 00:09:49.596
we could figure out what
this double asterisk does.

153
00:09:52.543 --> 00:09:54.150
&gt;&gt; Speaker 7: It's a wild card?

154
00:09:54.150 --> 00:09:55.182
&gt;&gt; Lukas Ruebbelke: Wild card.

155
00:09:55.182 --> 00:09:58.634
&gt;&gt; Speaker 7: So-
&gt;&gt; Speaker 12: It's like,

156
00:09:58.634 --> 00:10:00.180
any pages that may not exist?

157
00:10:00.180 --> 00:10:06.025
&gt;&gt; Lukas Ruebbelke: Yes, so
if I went to, for instance,

158
00:10:06.025 --> 00:10:10.928
the app, and I typed in I wanted

159
00:10:10.928 --> 00:10:15.463
to go to Mark is a beast page.

160
00:10:19.346 --> 00:10:21.512
&gt;&gt; Lukas Ruebbelke: You have
the wild card in there saying, hey,

161
00:10:21.512 --> 00:10:23.287
we don't know what to match this to.

162
00:10:23.287 --> 00:10:27.120
Just basically reroute it or
load this component.

163
00:10:27.120 --> 00:10:30.883
So you could do, for instance,
if you had a 404 component,

164
00:10:30.883 --> 00:10:35.498
you wanted to just say not found, like
you're trying to do something abort or

165
00:10:35.498 --> 00:10:39.345
revoking your IP address and
the authorities will be notified.

166
00:10:39.345 --> 00:10:43.807
And you can have a specific
component you wanna load or

167
00:10:43.807 --> 00:10:47.177
you can just reroute it back to your GUI,

168
00:10:47.177 --> 00:10:52.053
which I recommend everybody have,
they implement this.

169
00:10:52.053 --> 00:10:57.700
So, all right,
what are two main pieces of a component?

170
00:10:57.700 --> 00:10:59.040
&gt;&gt; Speaker 13: Class and a template.

171
00:10:59.040 --> 00:11:01.618
&gt;&gt; Lukas Ruebbelke: Class and
a template, boom.

172
00:11:01.618 --> 00:11:03.874
And how do they communicate?

173
00:11:03.874 --> 00:11:07.392
How does Angular know about this thing?

174
00:11:07.392 --> 00:11:09.802
How do we kinda bind
these things together?

175
00:11:09.802 --> 00:11:12.354
&gt;&gt; Speaker 13: [INAUDIBLE] databinding.

176
00:11:12.354 --> 00:11:13.846
&gt;&gt; Speaker 2: Metadata.

177
00:11:13.846 --> 00:11:16.768
&gt;&gt; Lukas Ruebbelke: Metadata, yes, good.

178
00:11:16.768 --> 00:11:21.260
So what does implements OnInit mean?

179
00:11:22.770 --> 00:11:24.056
&gt;&gt; Speaker 2: Implementing the interface.

180
00:11:24.056 --> 00:11:27.480
&gt;&gt; Lukas Ruebbelke: Yep, and so
when we implement an interface,

181
00:11:27.480 --> 00:11:32.110
we are essentially required to satisfy
that contract of the interface.

182
00:11:34.450 --> 00:11:36.080
So this is a fun one.

183
00:11:37.350 --> 00:11:40.940
So how does NG on an network,
what is the point of this?

184
00:11:42.680 --> 00:11:43.410
&gt;&gt; Speaker 14: The initial state.

185
00:11:44.940 --> 00:11:45.840
&gt;&gt; Lukas Ruebbelke: Kind of.

186
00:11:47.190 --> 00:11:48.370
So I'll give you a hint.

187
00:11:48.370 --> 00:11:51.009
It's an event,
it's something that happens.

188
00:11:52.010 --> 00:11:54.190
And so you had the first part right.

189
00:11:54.190 --> 00:11:56.890
Convert that into a moment in time.

190
00:11:58.714 --> 00:12:02.530
&gt;&gt; Speaker 2: The lifecycle hook
starts after the constructor is done.

191
00:12:02.530 --> 00:12:04.060
&gt;&gt; Lukas Ruebbelke: So
not the constructor.

192
00:12:04.060 --> 00:12:06.024
&gt;&gt; Speaker 2: Starts after
the constructor is done.

193
00:12:06.024 --> 00:12:08.757
&gt;&gt; Speaker 15: It starts after there's
an action that takes place, and if it's-

194
00:12:08.757 --> 00:12:10.550
&gt;&gt; Lukas Ruebbelke: Yes, which is?

195
00:12:10.550 --> 00:12:11.544
Say what you just said.

196
00:12:11.544 --> 00:12:12.101
&gt;&gt; Speaker 15: Initials.

197
00:12:12.101 --> 00:12:13.270
Initial state.

198
00:12:13.270 --> 00:12:16.078
&gt;&gt; Lukas Ruebbelke: Yes, so
essentially, it's a lifecycle, so

199
00:12:16.078 --> 00:12:18.040
it's an event in time.

200
00:12:18.040 --> 00:12:23.595
It does happen after the constructor, but
it fires when your initial state is ready.

201
00:12:23.595 --> 00:12:27.203
And how do we know that is because
ngOnInit changes has fired at least once.

202
00:12:27.203 --> 00:12:31.930
So basically, all the bindings
have been triggered at least once.

203
00:12:31.930 --> 00:12:37.054
And so this is where any kind
of binding depending logic that

204
00:12:37.054 --> 00:12:43.112
you want to initialize with should
go in here and not the constructor.

205
00:12:45.914 --> 00:12:48.651
&gt;&gt; Lukas Ruebbelke: So how do we inject
a dependency into our component?

206
00:12:53.133 --> 00:12:55.060
&gt;&gt; Lukas Ruebbelke: I
think you know the answer.

207
00:12:55.060 --> 00:12:56.210
&gt;&gt; Speaker 16: With a constructor.

208
00:12:56.210 --> 00:13:00.310
&gt;&gt; Lukas Ruebbelke: Yes, boom, nailed it!

209
00:13:00.310 --> 00:13:01.430
So what about private?

210
00:13:01.430 --> 00:13:04.240
Why do we use the private keyword here?

211
00:13:06.580 --> 00:13:07.840
I think you know this answer too.

212
00:13:09.880 --> 00:13:11.785
&gt;&gt; Speaker 16: That is a little confusing,
but

213
00:13:11.785 --> 00:13:16.890
it's to do with making
a field in the class.

214
00:13:16.890 --> 00:13:19.160
&gt;&gt; Lukas Ruebbelke: Mm-hm.
&gt;&gt; Speaker 16: So the ItemsService.

215
00:13:19.160 --> 00:13:20.680
&gt;&gt; Lukas Ruebbelke: That's exactly it.

216
00:13:20.680 --> 00:13:21.450
&gt;&gt; Speaker 16: Okay.

217
00:13:21.450 --> 00:13:24.546
&gt;&gt; Lukas Ruebbelke: So essentially,
I call it constructor assignment.

218
00:13:24.546 --> 00:13:29.390
But what it's doing is, under the hood,
it's saying, we're going to need

219
00:13:29.390 --> 00:13:33.693
this itemsService, in this case,
somewhere else in the application.

220
00:13:33.693 --> 00:13:35.830
Let's go ahead and
assign it to a local property.

221
00:13:37.070 --> 00:13:41.962
So this is, if I did not have private on
there, I would not be able to reference

222
00:13:41.962 --> 00:13:45.950
itemsService cuz it would just be
a parameter in the constructor.

223
00:13:47.150 --> 00:13:49.820
And so I think a good way, and
I showed this yesterday, but

224
00:13:49.820 --> 00:13:56.040
kind of an easy way to see this is and
this is just kind of a side note.

225
00:13:56.040 --> 00:14:01.220
But if you're ever doing something in
TypeScript, what is happening here?

226
00:14:01.220 --> 00:14:03.580
What does this actually
look like under the hood?

227
00:14:03.580 --> 00:14:08.950
I highly recommend just jump in
the playground, and check it out.

228
00:14:08.950 --> 00:14:10.953
So let me just kinda back this up.

229
00:14:10.953 --> 00:14:15.993
They must be using local storage
to keep track of my stuff.

230
00:14:19.038 --> 00:14:22.318
&gt;&gt; Lukas Ruebbelke: So
I'm gonna dial this in.

231
00:14:22.318 --> 00:14:28.518
Let's go,
&gt;&gt; Lukas Ruebbelke: Here.

232
00:14:32.466 --> 00:14:35.463
&gt;&gt; Lukas Ruebbelke: And so
you can see now, it's saying, hey,

233
00:14:35.463 --> 00:14:40.890
we don't know what this is because this
is just a parameter to the function.

234
00:14:40.890 --> 00:14:42.570
And that's basically what it's scoped to.

235
00:14:42.570 --> 00:14:45.000
It cannot live outside of the function.

236
00:14:45.000 --> 00:14:49.207
But now look at the constructor or

237
00:14:49.207 --> 00:14:54.315
this is the ES5 equivalent when we go and

238
00:14:54.315 --> 00:14:57.177
we add this modifier.

239
00:14:57.177 --> 00:15:01.152
And under the hood,
it's just saying take this parameter and

240
00:15:01.152 --> 00:15:04.140
assign it to a local
property of the same name.

241
00:15:04.140 --> 00:15:05.840
So now we can use this outsider.

242
00:15:05.840 --> 00:15:09.437
So this is, in a nutshell,
what is happening.

243
00:15:09.437 --> 00:15:15.429
But it is helpful to sometimes
jump into TypeScript and

244
00:15:15.429 --> 00:15:20.776
see what it's actually
being compiled down to.

245
00:15:20.776 --> 00:15:22.540
All right, by the way, excellent answers.

246
00:15:22.540 --> 00:15:24.480
Your silence, I'm not fooled anymore.

247
00:15:24.480 --> 00:15:26.070
You know way more than you're letting on.

248
00:15:26.070 --> 00:15:28.994
So air five, [SOUND] this is metadata.

249
00:15:34.043 --> 00:15:35.975
&gt;&gt; Lukas Ruebbelke: There
is an exception to this, so

250
00:15:35.975 --> 00:15:38.460
I'm not gonna get too pinned down on this.

251
00:15:38.460 --> 00:15:40.280
I think they loosened up a bit.

252
00:15:40.280 --> 00:15:46.390
But for the most part, what are two
things that a component must have?

253
00:15:49.601 --> 00:15:51.990
&gt;&gt; Speaker 17: A selector and a template.

254
00:15:51.990 --> 00:15:54.450
&gt;&gt; Lukas Ruebbelke: Yes,
a selector and a template.

255
00:15:54.450 --> 00:15:56.930
I believe that you can

256
00:15:56.930 --> 00:16:00.929
now have a component without a selector
if you only ever loaded a route.

257
00:16:01.930 --> 00:16:07.070
But for the most part, well, I think, one,
if you did a component without a selector,

258
00:16:07.070 --> 00:16:09.790
then you are severely
limiting your options.

259
00:16:10.820 --> 00:16:16.170
That for the most part, every component
must have a selector and a template.

260
00:16:18.300 --> 00:16:23.360
So right now,
we have an external component template.

261
00:16:23.360 --> 00:16:26.370
What is another way that we could do this?

262
00:16:26.370 --> 00:16:28.330
&gt;&gt; Speaker 17: Instead
of saying template URL,

263
00:16:28.330 --> 00:16:32.540
you could just say template and
put the template right there.

264
00:16:32.540 --> 00:16:33.970
&gt;&gt; Lukas Ruebbelke: Right.
&gt;&gt; Speaker 17: Put the HTML right there.

265
00:16:33.970 --> 00:16:35.240
&gt;&gt; Lukas Ruebbelke: Yep,
so you can do it inline.

266
00:16:37.020 --> 00:16:41.689
Now, what would be a reason
why you may want to do this

267
00:16:41.689 --> 00:16:45.735
instead of using it as
an external template?

268
00:16:48.713 --> 00:16:51.463
&gt;&gt; Speaker 18: You have a check on making
sure your component doesn't get too big

269
00:16:51.463 --> 00:16:52.520
and tries to do too much.

270
00:16:52.520 --> 00:16:57.380
&gt;&gt; Lukas Ruebbelke: Yep, so
I think there's pros and cons of each.

271
00:16:57.380 --> 00:16:59.802
And I think there's people who
feel strongly about either way.

272
00:17:02.319 --> 00:17:05.798
&gt;&gt; Lukas Ruebbelke: For me, I think if
you are a developer, in other words,

273
00:17:05.798 --> 00:17:10.920
like you're a JavaScript developer and
you happen to just be doing templates.

274
00:17:10.920 --> 00:17:13.140
Like I'm writing JavaScript but

275
00:17:13.140 --> 00:17:15.470
what I'm writing has this
template that I just have to do.

276
00:17:15.470 --> 00:17:17.980
So it's very common for
somebody to do them both.

277
00:17:19.350 --> 00:17:23.040
Then I think doing inline
templates is okay.

278
00:17:23.040 --> 00:17:25.347
In fact, I know a bunch of React
developers that would prefer that.

279
00:17:25.347 --> 00:17:29.003
Because they're JavaScript developers
who just write basically templates for

280
00:17:29.003 --> 00:17:30.880
their components.

281
00:17:30.880 --> 00:17:31.760
On the other hand,

282
00:17:31.760 --> 00:17:37.000
I've been in an organizations where
you have a dedicated UX, UI person,

283
00:17:37.000 --> 00:17:41.510
they just do everything pixel perfect,
and they do all the layouts, and then

284
00:17:41.510 --> 00:17:45.740
they hand them off to the developers and
we then work them into the application.

285
00:17:47.740 --> 00:17:50.700
To that end,
doing them inline would be very,

286
00:17:50.700 --> 00:17:54.890
I think it would be a really
inefficient workflow.

287
00:17:54.890 --> 00:17:59.640
Because what you would have to do
is then basically hoist all of

288
00:17:59.640 --> 00:18:04.210
the additional knowledge of how do you run
app, how do you do these things and force

289
00:18:04.210 --> 00:18:08.105
them into your development environment,
when really, they're just doing layout.

290
00:18:08.105 --> 00:18:11.798
So when you have somebody who's
doing specifically layout,

291
00:18:11.798 --> 00:18:14.922
I think it makes sense to
just to have them do external

292
00:18:14.922 --> 00:18:17.775
templates that you can just pull in and
wire up.

293
00:18:17.775 --> 00:18:19.440
So it could go either way.

294
00:18:19.440 --> 00:18:22.510
I think if you're primarily a JavaScript
developer who's doing templates,

295
00:18:22.510 --> 00:18:24.610
this way may be okay.

296
00:18:24.610 --> 00:18:29.080
But if you have a dedicated team that
does the layouts and different things,

297
00:18:29.080 --> 00:18:32.620
I think doing external templates is
going to work better in that case,

298
00:18:32.620 --> 00:18:33.700
from a workflow standpoint.

299
00:18:35.100 --> 00:18:37.030
All right, let's talk about binding.

300
00:18:37.030 --> 00:18:41.790
What is the easiest way to bind

301
00:18:43.580 --> 00:18:45.942
a simple text value into a template?

302
00:18:47.230 --> 00:18:50.530
And this is pretty much in every
templating language for the most part.

303
00:18:50.530 --> 00:18:55.460
Off the top of my head,
I think that everything

304
00:18:55.460 --> 00:18:57.955
that I know of uses this kind of binding?

305
00:18:57.955 --> 00:19:05.878
&gt;&gt; [CROSSTALK]
&gt;&gt; Lukas Ruebbelke: So now,

306
00:19:05.878 --> 00:19:11.040
if you wanna send data to the template,
say what you just said, brackets, yes.

307
00:19:11.040 --> 00:19:13.880
So this is property binding.

308
00:19:13.880 --> 00:19:18.520
By the way, for some odd reason, yesterday
these graphics did not have arrows in

309
00:19:18.520 --> 00:19:21.920
them, and it kinda bothered me,
but the show must go on.

310
00:19:21.920 --> 00:19:24.680
I got to the hotel, fired up Keynote,
and they were there again.

311
00:19:25.990 --> 00:19:28.070
It was some weird random bug,
it's just like,

312
00:19:28.070 --> 00:19:30.320
we're not showing you these arrows today.

313
00:19:30.320 --> 00:19:33.310
And then I looked at the PDF I generated,
they're not in there.

314
00:19:33.310 --> 00:19:34.751
But they were in the Keynote.

315
00:19:36.528 --> 00:19:37.440
&gt;&gt; Lukas Ruebbelke: I
just gave the answer.

316
00:19:37.440 --> 00:19:41.658
So vice versa, event handler.

317
00:19:41.658 --> 00:19:43.605
Now, if we wanna do two-way data binding?

318
00:19:43.605 --> 00:19:48.500
&gt;&gt; Speaker 19: [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: Banana in a box.

319
00:19:48.500 --> 00:19:51.092
Angular hug.

320
00:19:51.092 --> 00:19:56.370
All right, this is a really,
really important graphic.

321
00:19:56.370 --> 00:19:57.528
Notice the arrows are back?

322
00:19:57.528 --> 00:20:01.947
Yay, so
&gt;&gt; Lukas Ruebbelke: What

323
00:20:01.947 --> 00:20:06.960
binding would we use on this
side of the template over here?

324
00:20:06.960 --> 00:20:09.622
So class to template.

325
00:20:14.152 --> 00:20:15.970
&gt;&gt; Lukas Ruebbelke: Square,
property binding.

326
00:20:15.970 --> 00:20:18.012
Now, from the template back to the class?

327
00:20:18.012 --> 00:20:20.500
&gt;&gt; Speaker 19: [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: Event.

328
00:20:20.500 --> 00:20:26.350
Okay, so it may seem I'm kind of a broken
record here talking about if it's one way,

329
00:20:26.350 --> 00:20:26.920
it's this.

330
00:20:26.920 --> 00:20:28.810
If it's this way, it's this.

331
00:20:28.810 --> 00:20:30.980
So property and event binding.

332
00:20:30.980 --> 00:20:34.690
But when we get into component driven
architecture, it'll make a lot more sense

333
00:20:34.690 --> 00:20:40.820
why I keep talking about kind of this
circle, this unidirectional circle of

334
00:20:40.820 --> 00:20:45.930
data goes in via properties,
events come out via event bindings.

335
00:20:47.490 --> 00:20:49.350
So properties and events.

336
00:20:49.350 --> 00:20:51.974
All right, so this is what over here?

337
00:20:53.895 --> 00:20:54.889
&gt;&gt; Lukas Ruebbelke: There we go.

338
00:20:57.838 --> 00:21:01.842
&gt;&gt; Lukas Ruebbelke: We just call this,
I don't know, string binding,

339
00:21:01.842 --> 00:21:06.210
curly brace binding,
easily the least sophisticated.

340
00:21:07.890 --> 00:21:13.338
So this over here is
&gt;&gt; Lukas Ruebbelke: What?

341
00:21:15.633 --> 00:21:16.860
&gt;&gt; Speaker 19: Property binding.

342
00:21:16.860 --> 00:21:18.000
&gt;&gt; Lukas Ruebbelke: Property binding.

343
00:21:18.000 --> 00:21:22.604
And what are we sending into this element?

344
00:21:26.664 --> 00:21:30.688
&gt;&gt; Lukas Ruebbelke: Experiment which
we're getting off of this NG4 over here.

345
00:21:30.688 --> 00:21:35.190
So we're doing this, we're looping
over this experiment component, and

346
00:21:35.190 --> 00:21:40.280
saying that for
each experiment in this array,

347
00:21:40.280 --> 00:21:43.630
go ahead and instantiate this component
and pass this experiment object into it.

348
00:21:45.320 --> 00:21:49.389
So I'm already starting to hint at what
we're gonna get into with architecture.

349
00:21:49.389 --> 00:21:51.353
Because last I checked,

350
00:21:51.353 --> 00:21:56.415
the experiment wasn't a known
standards based HML attribute.

351
00:21:56.415 --> 00:22:00.240
So something to kind of
start thinking ahead.

352
00:22:01.750 --> 00:22:04.495
I see you are getting [CROSSTALK]
&gt;&gt; Speaker 20: Yeah, no,

353
00:22:04.495 --> 00:22:06.859
I am just having a little trouble.

354
00:22:06.859 --> 00:22:09.818
The difference between
the double curly brackets and

355
00:22:09.818 --> 00:22:13.180
the square brackets, the property vending.

356
00:22:13.180 --> 00:22:17.734
Here, you're binding an object which

357
00:22:17.734 --> 00:22:21.447
could have various like-
&gt;&gt; Lukas Ruebbelke: Anything.

358
00:22:21.447 --> 00:22:24.558
&gt;&gt; Speaker 20: Experiment dot name,
dot ID, dot whatever.

359
00:22:24.558 --> 00:22:27.292
So you're binding that entire object.

360
00:22:27.292 --> 00:22:29.293
Whereas with the curly brackets,

361
00:22:29.293 --> 00:22:34.686
you're just saying
&gt;&gt; Speaker 20: That

362
00:22:34.686 --> 00:22:39.395
one particular name value of that.

363
00:22:39.395 --> 00:22:44.103
&gt;&gt; Lukas Ruebbelke: Yeah, so curly braces
will always result in whatever you

364
00:22:44.103 --> 00:22:47.053
pass in being rendered as a string.

365
00:22:48.766 --> 00:22:51.055
&gt;&gt; Lukas Ruebbelke: And so,
this is appropriate for certain things,

366
00:22:51.055 --> 00:22:55.010
like if I just had this object and
I just wanted to do a simple layout.

367
00:22:55.010 --> 00:23:00.018
So in the case of
&gt;&gt; Lukas Ruebbelke: If we hop in here,

368
00:23:00.018 --> 00:23:04.542
let's go to, I think the item
list is a pretty easy one.

369
00:23:07.394 --> 00:23:10.500
&gt;&gt; Lukas Ruebbelke: We want to render the
name, we want to render the description.

370
00:23:12.212 --> 00:23:13.846
&gt;&gt; Lukas Ruebbelke: Just
simple strings on the page.

371
00:23:15.062 --> 00:23:16.120
&gt;&gt; Lukas Ruebbelke: This
is where this would go.

372
00:23:17.580 --> 00:23:23.901
But in other cases,
we want to actually send in an object or

373
00:23:23.901 --> 00:23:28.803
communicate something to another element,

374
00:23:28.803 --> 00:23:33.840
as well as,
this will be rendered as a string.

375
00:23:33.840 --> 00:23:39.912
Where other times, we want to actually
bind to a property on the element itself,

376
00:23:39.912 --> 00:23:43.110
or an attribute, or whatever.

377
00:23:43.110 --> 00:23:44.942
And so, that's where you
would use property bindings.

378
00:23:44.942 --> 00:23:48.380
So just really, curly braces is just
strings that you're rendering on a pace.

379
00:23:48.380 --> 00:23:53.980
So it's a very limited albeit
useful binding that you will use.

380
00:23:55.400 --> 00:23:56.480
Does that make sense?

381
00:23:56.480 --> 00:23:57.990
&gt;&gt; Speaker 20: But with property binding,

382
00:23:57.990 --> 00:24:01.031
are you in essence
passing the whole object?

383
00:24:01.031 --> 00:24:04.337
[INAUDIBLE]
&gt;&gt; Speaker 20: Okay.

384
00:24:04.337 --> 00:24:05.522
&gt;&gt; Lukas Ruebbelke: Yep.

385
00:24:05.522 --> 00:24:10.130
So, man, like I am so
tempted to just like,

386
00:24:10.130 --> 00:24:14.517
get to the punchline but
that is exactly it.

387
00:24:14.517 --> 00:24:20.522
Your passing an object from one
element to another, the entire object.

388
00:24:20.522 --> 00:24:24.990
Which is really handy, if we have one
Lego, what do we do if we have two?

389
00:24:24.990 --> 00:24:28.741
We start stacking things up and
need to pass it down to a child object.

390
00:24:33.513 --> 00:24:34.084
&gt;&gt; Lukas Ruebbelke: And so,

391
00:24:34.084 --> 00:24:40.061
you'll start to see this come into play in
just a little bit, hopefully before lunch.

392
00:24:43.670 --> 00:24:44.551
&gt;&gt; Lukas Ruebbelke: What is this?

393
00:24:48.872 --> 00:24:51.299
&gt;&gt; Lukas Ruebbelke: A vent, okay?

394
00:24:51.299 --> 00:24:53.597
And, what are we doing here?

395
00:24:53.597 --> 00:24:56.918
So I know it's two-way data binding,
but what's actually happening?

396
00:25:00.807 --> 00:25:02.630
&gt;&gt; Speaker 21: Just create an input field.

397
00:25:02.630 --> 00:25:08.214
&gt;&gt; Lukas Ruebbelke: Mm-hm, and
then binding to the message property.

398
00:25:08.214 --> 00:25:11.698
And so when you type in the text box, if
we were binding to message somewhere else,

399
00:25:11.698 --> 00:25:13.327
then it would automatically update.

400
00:25:13.327 --> 00:25:18.059
So it's just the two way data binding, of
its rendering the value in the field, but,

401
00:25:18.059 --> 00:25:22.034
as you change it, it's communicating
it back to the component class.

402
00:25:22.034 --> 00:25:26.656
So how do components and
directives differ?

403
00:25:26.656 --> 00:25:28.896
This is kind of a softball one, too.

404
00:25:28.896 --> 00:25:35.236
Components have, this is just
a variation of the one you answered.

405
00:25:38.592 --> 00:25:39.510
&gt;&gt; Lukas Ruebbelke: What's that?

406
00:25:39.510 --> 00:25:40.311
&gt;&gt; Speaker 22: Template.

407
00:25:40.311 --> 00:25:42.865
&gt;&gt; Lukas Ruebbelke: Yes, that's it,
components have templates.

408
00:25:42.865 --> 00:25:47.578
Directives modify an existing
element essentially.

409
00:25:47.578 --> 00:25:51.328
So, NgFor, NgIf,
they don't actually look like anything,

410
00:25:51.328 --> 00:25:55.452
they're just applying behavior
to an existing element, awesome.

411
00:25:58.308 --> 00:26:00.189
&gt;&gt; Lukas Ruebbelke: No template.

412
00:26:00.189 --> 00:26:07.375
So how is the service like a component,
but how do they differ?

413
00:26:07.375 --> 00:26:10.800
Cuz their shape is actually very similar.

414
00:26:14.803 --> 00:26:17.711
&gt;&gt; Speaker 2: Meta data
&gt;&gt; Lukas Ruebbelke: So we have meta data,

415
00:26:17.711 --> 00:26:19.762
what else do we have?

416
00:26:23.801 --> 00:26:27.020
&gt;&gt; Lukas Ruebbelke: So they've
constructors, they have, I mean they're

417
00:26:27.020 --> 00:26:31.823
basically ES6 classes, and so properties,
methods are there, constructors.

418
00:26:35.110 --> 00:26:40.259
&gt;&gt; Lukas Ruebbelke: The difference is so,
&gt;&gt; Lukas Ruebbelke: Obviously

419
00:26:40.259 --> 00:26:43.714
what goes into the metadata, so
a service will never have a template.

420
00:26:43.714 --> 00:26:48.501
Is that more often than not
the only meta data that you will

421
00:26:48.501 --> 00:26:53.199
have to just make it available
to Angular is ejectable.

422
00:26:53.199 --> 00:26:55.881
So it's literally just a class.

423
00:26:55.881 --> 00:26:58.752
And so obviously, life cycle hooks,

424
00:26:58.752 --> 00:27:03.696
I think I accidentally put a life
cycle hook on a service one time.

425
00:27:03.696 --> 00:27:08.201
Not happening, but for
the most part they're just classes.

426
00:27:08.201 --> 00:27:10.819
In terms of how they're different is that,

427
00:27:10.819 --> 00:27:15.512
obviously they live in different places
in the application or abstractions.

428
00:27:15.512 --> 00:27:19.925
But a component is a service with a class,
or

429
00:27:19.925 --> 00:27:23.872
a component is a class with a template.

430
00:27:23.872 --> 00:27:31.818
A service is just a class that does strict
business logic functionality of that sort.

