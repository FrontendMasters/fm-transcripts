WEBVTT

1
00:00:00.240 --> 00:00:02.863
&gt;&gt; Lucas Ruebbelke: Server communication.

2
00:00:02.863 --> 00:00:07.500
If we go back to our app real quick,
just kind of observe where we are.

3
00:00:09.410 --> 00:00:14.075
And this will kinda give us insight
to what we're going to accomplish in

4
00:00:14.075 --> 00:00:15.252
the next module.

5
00:00:15.252 --> 00:00:19.347
When I want to save this,
you can see we're just logging it out, so

6
00:00:19.347 --> 00:00:21.700
we're not persisting it.

7
00:00:21.700 --> 00:00:23.881
So the minute we refresh it,
nothing's happening,

8
00:00:23.881 --> 00:00:25.729
and we're actually not updating anything.

9
00:00:25.729 --> 00:00:32.640
So let's complete the loop, make it full
circle, circle of life, if you will.

10
00:00:32.640 --> 00:00:36.510
And we'll do that via
server communication.

11
00:00:36.510 --> 00:00:41.070
So we're going to use the HTTP module.

12
00:00:41.070 --> 00:00:45.229
And we're gonna talk about
the methods that are available.

13
00:00:45.229 --> 00:00:49.225
We'll talk about promises
versus observables, and

14
00:00:49.225 --> 00:00:53.720
the header object,
as well as some error handling.

15
00:00:53.720 --> 00:01:00.528
Now they just recently came out with
an HTTP client module in four three.

16
00:01:00.528 --> 00:01:02.780
We're not going to talk about it here.

17
00:01:02.780 --> 00:01:05.909
But if you understand how this works,
the API is almost identical.

18
00:01:05.909 --> 00:01:08.650
They just added some additional
more advanced features.

19
00:01:08.650 --> 00:01:12.851
But this, the HTTP module,
is gonna be supported for some time.

20
00:01:12.851 --> 00:01:18.750
So this just came out with HTTP client,
but it's almost identical.

21
00:01:18.750 --> 00:01:21.690
So you can kind of just flip from one to
the other, it's not gonna be too hard.

22
00:01:23.410 --> 00:01:28.152
So HTTP module, quite simply it

23
00:01:28.152 --> 00:01:34.125
simplifies the use of XML HTTP request or

24
00:01:34.125 --> 00:01:39.765
JSONP.
&gt;&gt; Lucas Ruebbelke: And conveniently,

25
00:01:39.765 --> 00:01:46.920
the API for
the HTTP service matches RESTful verbs.

26
00:01:46.920 --> 00:01:51.026
So if you understand REST,
then understanding how HTTP works,

27
00:01:51.026 --> 00:01:55.371
the module or the service,
is going to be pretty straightforward.

28
00:01:55.371 --> 00:01:56.990
And it returns an observable.

29
00:01:56.990 --> 00:02:00.197
So we'll see what that means in a moment.

30
00:02:00.197 --> 00:02:05.860
So first and foremost, you import the
module, that happens via the angular.cli.

31
00:02:05.860 --> 00:02:11.332
And then it provides these methods.

32
00:02:11.332 --> 00:02:15.460
So how many people here are fairly
comfortable working with REST?

33
00:02:17.210 --> 00:02:19.508
Good, so
I think it's one of these things where,

34
00:02:19.508 --> 00:02:23.140
once you've kind of wrapped your mind
around the convention, it just works.

35
00:02:23.140 --> 00:02:25.747
No matter what server technology
you're on, or whatever,

36
00:02:25.747 --> 00:02:28.980
it's just really easy to just know
it's the same thing every single time.

37
00:02:28.980 --> 00:02:34.150
So you have request, which is kind
of a generic, any kind of a request.

38
00:02:34.150 --> 00:02:39.231
But then on top of that we have get,
post, put, delete, patch and head.

39
00:02:39.231 --> 00:02:41.170
Which I rarely every use.

40
00:02:41.170 --> 00:02:45.041
But get, post, put and delete,
those are basically your CRUD

41
00:02:45.041 --> 00:02:49.952
operations.
&gt;&gt; Lucas Ruebbelke: And so

42
00:02:49.952 --> 00:02:55.080
what we have here is,
&gt;&gt; Lucas Ruebbelke: The item

43
00:02:55.080 --> 00:02:59.593
service and,
&gt;&gt; Lucas Ruebbelke: Let's see if

44
00:02:59.593 --> 00:03:03.174
this will connect here, there we go.

45
00:03:03.174 --> 00:03:06.996
So get, post,

46
00:03:06.996 --> 00:03:11.120
put and delete.

47
00:03:11.120 --> 00:03:16.890
Now I tried to find, if there is any
real advantage of using post over put,

48
00:03:16.890 --> 00:03:21.373
and I think for
the most part they're pretty identical.

49
00:03:21.373 --> 00:03:24.640
Somebody, if they want to sound off,
I'd totally love to hear about it.

50
00:03:24.640 --> 00:03:27.175
But I think for the most part,
they're about the same.

51
00:03:27.175 --> 00:03:29.380
So I use post for create.

52
00:03:29.380 --> 00:03:34.095
And I just use put because it
seems to be more kind of in the,

53
00:03:34.095 --> 00:03:38.636
I don't know,
like the spiritual animal of updating.

54
00:03:38.636 --> 00:03:42.180
So it's like I'm putting something up
here, just go ahead and update it.

55
00:03:42.180 --> 00:03:46.494
So I just use post for create, put for
update, and then obviously get and

56
00:03:46.494 --> 00:03:53.322
delete are pretty self explanatory.
&gt;&gt; Lucas Ruebbelke: What's

57
00:03:53.322 --> 00:03:59.313
interesting about is one,
if you have some REST endpoints,

58
00:03:59.313 --> 00:04:06.606
your service is going to look pretty
much like this almost all of the time.

59
00:04:06.606 --> 00:04:09.605
More often than not, you're simply
going to update the endpoint,

60
00:04:09.605 --> 00:04:12.010
maybe the parameters to
be more self-descriptive.

61
00:04:12.010 --> 00:04:17.081
And these things are, I almost didn't so
REST is very conventional.

62
00:04:17.081 --> 00:04:21.264
Therefore, your services that communicate
to the server generally are going to be

63
00:04:21.264 --> 00:04:23.450
equally conventional.

64
00:04:23.450 --> 00:04:27.469
This is, I think,
the one time that I've seen

65
00:04:27.469 --> 00:04:32.222
inheritance happen that I
think somewhat made sense.

66
00:04:32.222 --> 00:04:37.535
Is that I think actually Jeff Whelpley
from GetHuman, other Angular GDE.

67
00:04:37.535 --> 00:04:38.920
They had a ton of REST end points.

68
00:04:38.920 --> 00:04:42.730
And so he created a base class
that did all of this, and

69
00:04:42.730 --> 00:04:46.387
then extended it with kind
of specific end points.

70
00:04:46.387 --> 00:04:48.765
So you would just set the end point and

71
00:04:48.765 --> 00:04:53.535
then your load create update delete
was just available via inheritance.

72
00:04:53.535 --> 00:04:55.928
I think that may make sense.

73
00:04:55.928 --> 00:04:57.720
Somebody did that,
probably would not offend me.

