WEBVTT

1
00:00:00.180 --> 00:00:03.044
&gt;&gt; Lucas Ruebbelke: This is
my all time favorite module.

2
00:00:03.044 --> 00:00:09.014
So, the goal of today, obviously is to
find out how features can fit together.

3
00:00:09.014 --> 00:00:12.500
This is the crux of it.

4
00:00:12.500 --> 00:00:18.290
So with AngularJS, a real aha moment for
me was I've been using the framework for

5
00:00:18.290 --> 00:00:21.201
while, and I saw things like ngRepeat.

6
00:00:21.201 --> 00:00:25.677
NgIf and these different kind of
directives that ship with AngularJS, and

7
00:00:25.677 --> 00:00:28.305
then once I started to
look at directives and

8
00:00:28.305 --> 00:00:32.724
how they work creating my own custom
tags and elements, it kind of hit me.

9
00:00:32.724 --> 00:00:34.628
They're using Angular to write Angular.

10
00:00:36.041 --> 00:00:37.607
&gt;&gt; Lucas Ruebbelke: Or
AngularJS to write AngularJS so

11
00:00:37.607 --> 00:00:39.395
let's not get confused on semantics.

12
00:00:39.395 --> 00:00:44.757
But the ngIf, the ngClick,
a lot of these things you saw,

13
00:00:44.757 --> 00:00:50.229
once you understand how to build
directives, you can go and

14
00:00:50.229 --> 00:00:55.832
recreate the built in directives
that ship with AngularJS.

15
00:00:55.832 --> 00:00:59.505
This is kind of a similar moment,

16
00:00:59.505 --> 00:01:04.490
is that this allows you
to move from just using

17
00:01:04.490 --> 00:01:10.405
the framework to actually
creating your own pieces.

18
00:01:10.405 --> 00:01:14.205
Essentially extending the framework
to kind of be your own DSL.

19
00:01:14.205 --> 00:01:19.094
And this is the ability to actually create
custom tags elements and properties.

20
00:01:19.094 --> 00:01:23.131
You don't hear people talk
a lot about this, but

21
00:01:23.131 --> 00:01:26.985
essentially, we are turning
HTML into a DSL.

22
00:01:26.985 --> 00:01:31.939
We are treating our markup as
a domain specific language.

23
00:01:31.939 --> 00:01:33.651
And so somebody may look at
a bunch of markups and say,

24
00:01:33.651 --> 00:01:34.609
I don't know what this does.

25
00:01:34.609 --> 00:01:37.757
So if you show it to a business analyst.

26
00:01:37.757 --> 00:01:40.762
Classic HTML, they're like, I don't what
this div this, or I don't know whatever.

27
00:01:40.762 --> 00:01:44.326
But if they look at some markup,
and you're dealing with,

28
00:01:44.326 --> 00:01:48.962
let's say customers and there's
a customer tag on the page, they're gonna

29
00:01:48.962 --> 00:01:53.836
understand what that is, cuz you're
using semantics specific to that domain.

30
00:01:53.836 --> 00:01:58.003
And so this is where component
driven architecture comes in,

31
00:01:58.003 --> 00:02:01.687
is it allows us to take what
we know about components and

32
00:02:01.687 --> 00:02:06.735
elevate it to create our own really
custom properties and custom events and

33
00:02:06.735 --> 00:02:11.570
wire them together in a way that truly
models the domain that we're in.

34
00:02:14.294 --> 00:02:19.505
&gt;&gt; Lucas Ruebbelke: So we're gonna talk
about component driven architecture, and

35
00:02:19.505 --> 00:02:25.296
just the contract that we create
with component driven architecture,

36
00:02:25.296 --> 00:02:27.141
via input and output.

37
00:02:27.141 --> 00:02:30.559
We'll talk about inputs and outputs and
then we'll take it a step further and

38
00:02:30.559 --> 00:02:34.242
talk about container and presentational
components, formally known as smart and

39
00:02:34.242 --> 00:02:35.094
dumb components.

40
00:02:36.582 --> 00:02:41.105
&gt;&gt; Lucas Ruebbelke: But first,
&gt;&gt; Lucas Ruebbelke: Story time.

41
00:02:41.105 --> 00:02:44.606
Everybody sit back, grab a hot cup of tea,

42
00:02:44.606 --> 00:02:49.967
put your feet up by the fire,
we're going to talk about Angular.

43
00:02:49.967 --> 00:02:53.716
More specifically, we're gonna
talk about AngularJS into Angular.

44
00:02:53.716 --> 00:03:02.069
So the first time that I started
using AngularJS, it looked like this.

45
00:03:02.069 --> 00:03:07.762
It a very, very small controller and a
very, very tiny app with a tiny template.

46
00:03:07.762 --> 00:03:14.258
In fact, if you go to the Natural Museum
of AngularJS History, aka the website for

47
00:03:14.258 --> 00:03:19.265
AngularJS, you will see a bunch
of these tiny apps on the page.

48
00:03:19.265 --> 00:03:23.226
Very, very small,
tiny view + tiny controller.

49
00:03:23.226 --> 00:03:27.738
And so for me, the big hook was,
coming from Adobe Flex,

50
00:03:27.738 --> 00:03:33.472
is that I really liked being able to
have a property in my action script and

51
00:03:33.472 --> 00:03:39.216
being able to bind to it in my MXML,
which is basically a markup variant.

52
00:03:39.216 --> 00:03:42.784
I started doing JavaScript jQuery,
it was actually really hard to do,

53
00:03:42.784 --> 00:03:43.980
actually templating.

54
00:03:43.980 --> 00:03:48.321
Same templating, there was things
to do it, but it wasn't great.

55
00:03:48.321 --> 00:03:52.925
Backbone was a little harder,
I tried SJS with no luck.

56
00:03:52.925 --> 00:03:56.363
And then somebody showed me AngularJS,
and I was like, this is easy.

57
00:03:56.363 --> 00:03:59.872
I can bind, two way data binding, hooray!

58
00:03:59.872 --> 00:04:02.845
And everything was amazing.

59
00:04:02.845 --> 00:04:06.325
This was a total honeymoon fit.

60
00:04:06.325 --> 00:04:09.281
Well, then I decided I
wanted to do this for money.

61
00:04:09.281 --> 00:04:14.104
So I went to a team with developers and
said hey, we should give this a shot.

62
00:04:14.104 --> 00:04:19.297
And, so,
naturally our applications began to grow.

63
00:04:19.297 --> 00:04:23.757
And how they did that was
the view just got bigger and

64
00:04:23.757 --> 00:04:26.680
the controller just got bigger.

65
00:04:26.680 --> 00:04:32.139
And for those of us who are new to Angular
this is kind of a foreign concept but

66
00:04:32.139 --> 00:04:37.336
trust me, 0.9 up to 1.x this was
a problem, is reality sinks in and

67
00:04:37.336 --> 00:04:41.258
now you are trying to put
something into production.

68
00:04:41.258 --> 00:04:46.027
There's no real guidance on
how a large scale AngularJS

69
00:04:46.027 --> 00:04:51.722
application should be put together and
this is the problem we had.

70
00:04:51.722 --> 00:04:57.146
Our application just toppled
over it was too big.

71
00:04:57.146 --> 00:05:01.975
I think at one point we had our
main controller was, I don't know,

72
00:05:01.975 --> 00:05:04.402
thousands of lines of code long.

73
00:05:04.402 --> 00:05:07.332
And so it's like,
I need to work on this thing.

74
00:05:07.332 --> 00:05:11.119
Do not touch anything after line 800.

75
00:05:11.119 --> 00:05:12.407
And that's just crazy.

76
00:05:12.407 --> 00:05:18.405
But because we had no real sense of
structure, this is what happened.

77
00:05:18.405 --> 00:05:22.375
And it was just kind of prolonging
the project with jQuery, so if you've

78
00:05:22.375 --> 00:05:26.738
never done a jQuery application, the
problem is you're taking something that

79
00:05:26.738 --> 00:05:31.250
really was designed for DOM querying and
trying to wrap an application around it.

80
00:05:31.250 --> 00:05:34.967
It's super bloncky.

81
00:05:34.967 --> 00:05:39.444
1.x this was,
unfortunately something that happened.

82
00:05:39.444 --> 00:05:43.501
And through tears, and
pain, and suffering,

83
00:05:43.501 --> 00:05:46.957
we realized there has to be a better way.

84
00:05:46.957 --> 00:05:53.103
And there were two main ways, or two kind
of, sane approaches that began to emerge.

85
00:05:53.103 --> 00:05:57.313
One is by the use of Named Routes,
via UI router.

86
00:05:57.313 --> 00:06:00.274
So, ngRoute, very limited.

87
00:06:00.274 --> 00:06:04.443
But we had the ability to break
our application up into smaller

88
00:06:04.443 --> 00:06:06.376
template control repairs.

89
00:06:06.376 --> 00:06:11.278
And so we might have on the left side,
maybe nav, and then content,

90
00:06:11.278 --> 00:06:12.573
and then footer.

91
00:06:12.573 --> 00:06:17.596
But you were able to say, okay,
let's break this up into smaller parts and

92
00:06:17.596 --> 00:06:20.168
target these parts via a Named Route.

93
00:06:20.168 --> 00:06:24.619
The next approach is by using directives.

94
00:06:24.619 --> 00:06:28.962
So you would still break your application
up into kind of template controller pairs,

95
00:06:28.962 --> 00:06:30.962
but you would wrap them in a directive.

96
00:06:30.962 --> 00:06:37.607
So instead of targeting a named route,
you would have a nav directive.

97
00:06:37.607 --> 00:06:41.825
And you would have a content directive and
a photo directive.

98
00:06:41.825 --> 00:06:45.844
But what you're doing is you're
taking this large controller,

99
00:06:45.844 --> 00:06:50.167
large template, and breaking up
into smaller more specific pieces.

100
00:06:50.167 --> 00:06:56.429
Well, this was kind of the way of
the world, where everything was going,

101
00:06:56.429 --> 00:07:01.277
so with web components being a real and
viable standard,

102
00:07:01.277 --> 00:07:05.822
and with a large portion of
developers kind of jumping

103
00:07:05.822 --> 00:07:10.585
on this directive as
a architecture pattern approach.

104
00:07:10.585 --> 00:07:14.449
And then I think when React came in,
it was components all the way,

105
00:07:14.449 --> 00:07:17.831
I think that was really where
we kind of like, this works.

106
00:07:17.831 --> 00:07:21.734
And so the Angular team just said we
are going to take this directive idea, and

107
00:07:21.734 --> 00:07:23.250
it's going to be component.

108
00:07:23.250 --> 00:07:26.676
So we're gonna create better semantics and
better mechanisms.

109
00:07:26.676 --> 00:07:30.750
But we're still going to break our
application up into small single purpose

110
00:07:30.750 --> 00:07:32.861
components that we then put together.

111
00:07:35.576 --> 00:07:38.107
&gt;&gt; Lucas Ruebbelke: And so,
this solved the structure problem.

112
00:07:38.107 --> 00:07:42.280
So no longer did we have
this 4,000 line controller,

113
00:07:42.280 --> 00:07:48.339
this 4,000 line template cuz we were able
to break things up into small pieces.

114
00:07:48.339 --> 00:07:53.872
But we still have a communication problem.

115
00:07:53.872 --> 00:07:59.440
How do our components talk?

116
00:07:59.440 --> 00:08:03.012
And so this is kind of the next
piece that we're gonna talk about.

117
00:08:03.012 --> 00:08:05.851
So we're gonna talk about, one, breaking
up your things in to small pieces.

118
00:08:05.851 --> 00:08:07.963
So we've kind of seen that, but now,

119
00:08:07.963 --> 00:08:12.848
the communication between these components
is really what we're going with inputs and

120
00:08:12.848 --> 00:08:16.558
outputs in the contrast, and
I think it's really, really neat.

121
00:08:16.558 --> 00:08:21.115
So, components of an architecture,
it's just this concept of breaking your

122
00:08:21.115 --> 00:08:24.577
application into small
encapsulated pieces of software.

123
00:08:24.577 --> 00:08:28.820
And that can be used in
many different context, so

124
00:08:28.820 --> 00:08:34.385
in our sample application we have
an items list in the items page.

125
00:08:34.385 --> 00:08:35.709
Makes sense, right?

126
00:08:35.709 --> 00:08:39.256
But we also have it in the home page.

127
00:08:39.256 --> 00:08:40.829
And so if you jump into mastery,

128
00:08:40.829 --> 00:08:43.989
you'll notice that there's some
components on the home page.

129
00:08:43.989 --> 00:08:48.400
Well we can also put those
anywhere else in the application.

130
00:08:48.400 --> 00:08:53.063
And so this allows us to take one thing
and use it over and over and over.

131
00:08:53.063 --> 00:08:55.404
Even to the point we're
using angular material and

132
00:08:55.404 --> 00:08:57.100
we're passing around components.

133
00:08:57.100 --> 00:09:01.308
So these are very general components but
they're very reusable.

134
00:09:01.308 --> 00:09:05.711
I can have an Angular material
button over here, and over here, and

135
00:09:05.711 --> 00:09:07.495
over here, and over here.

136
00:09:07.495 --> 00:09:11.357
So this idea of having these
encapsulated portable pieces

137
00:09:11.357 --> 00:09:15.452
of functionality that we can move around,
believe it or not,

138
00:09:15.452 --> 00:09:20.052
this was not really a thing a few
years ago in front end applications.

139
00:09:20.052 --> 00:09:21.700
Certainly not in jQuery.

140
00:09:21.700 --> 00:09:26.352
No Backbone, AngularJS, they started to
work on that, and I think we've finally

141
00:09:26.352 --> 00:09:30.748
arrived at the golden standard, and
this is component driven architecture.

142
00:09:33.432 --> 00:09:36.499
&gt;&gt; Lucas Ruebbelke: So as we've seen and
you answered very well,

143
00:09:36.499 --> 00:09:42.247
is this morning is it's templates,
styles and logic, encapsulates everything.

144
00:09:42.247 --> 00:09:45.447
Actually let me go back and
make one point real quick.

145
00:09:48.229 --> 00:09:51.366
&gt;&gt; Lucas Ruebbelke: So when AngularJS was
created, there was no real sense of how

146
00:09:51.366 --> 00:09:55.135
things were supposed to go together and
we kind of learned along the way.

147
00:09:55.135 --> 00:09:59.569
With Angular 2 and above is they kind
of just encouraged by just the nature

148
00:09:59.569 --> 00:10:02.940
of the framework to do
component driven architecture.

149
00:10:02.940 --> 00:10:05.295
It just is the easiest way to do it so

150
00:10:05.295 --> 00:10:10.110
just imagine you're on top of a mountain
and you got a path going down.

151
00:10:10.110 --> 00:10:11.942
It's like, okay,
you're going down the mountain this way.

152
00:10:11.942 --> 00:10:14.927
It's guiding me down the mountain, or

153
00:10:14.927 --> 00:10:20.817
I can just roll down the mountain over
here on my side in a barrel or something.

154
00:10:20.817 --> 00:10:23.192
That's kind of the equivalent is like,
here's the path.

155
00:10:23.192 --> 00:10:24.320
Let's just walk down the mountain.

