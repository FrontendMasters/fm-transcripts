WEBVTT

1
00:00:00.190 --> 00:00:02.120
&gt;&gt; Lukas Ruebbelke: I think these
are gonna be pretty fine from.

2
00:00:02.120 --> 00:00:05.020
So these are kind of cool fun
things that I like talking about.

3
00:00:05.020 --> 00:00:09.548
So, who here has never made
a mistake in their code ever?

4
00:00:09.548 --> 00:00:15.270
Like who perfect code from day one,
nobody, right?

5
00:00:16.410 --> 00:00:19.290
More importantly, how many of us have
actually made a mistake in our code and

6
00:00:19.290 --> 00:00:20.860
we genuinely realise it much later.

7
00:00:22.210 --> 00:00:24.050
Yeah, this happens all the time.

8
00:00:25.080 --> 00:00:28.990
And so, having feedback loops,

9
00:00:28.990 --> 00:00:34.790
to help us catch what we're doing and
surfeits it so we can fix it,

10
00:00:34.790 --> 00:00:38.320
as well as giving us insights to
where things may be going wrong.

11
00:00:38.320 --> 00:00:42.280
It's critical for
us making the best possible code we can.

12
00:00:42.280 --> 00:00:45.330
So this is where static analysis comes in,
in a big way.

13
00:00:46.370 --> 00:00:50.080
And so
we've seen this already in the background,

14
00:00:50.080 --> 00:00:52.450
is we're working within the IDE.

15
00:00:52.450 --> 00:00:57.120
And so there's this angular development
kit that the team has produced.

16
00:00:57.120 --> 00:01:01.150
That is essentially an SDK
about how angular works.

17
00:01:01.150 --> 00:01:05.050
And so this is for you notices I'm typing.

18
00:01:05.050 --> 00:01:07.010
And if I messed something up,
angular is telling me like,

19
00:01:07.010 --> 00:01:11.050
hey, you got this thrilling light space
all the time it's telling me that.

20
00:01:11.050 --> 00:01:15.760
But, it's letting me know like this could
be better, you could make this right.

21
00:01:15.760 --> 00:01:21.530
And so this is essentially what's
happening cuz it's linting my code,

22
00:01:21.530 --> 00:01:25.960
is I'm typing it's saying, does this
match the rules that you've set up.

23
00:01:27.370 --> 00:01:32.630
So there is this thing called
the Angular Development kit that

24
00:01:32.630 --> 00:01:38.620
allows IDE and different things to
know things about the language and

25
00:01:38.620 --> 00:01:41.360
communicate with kind of the framework.

26
00:01:41.360 --> 00:01:44.390
And so as you're typing, you're getting
feedback of like, this is right or

27
00:01:44.390 --> 00:01:45.500
this is wrong.

28
00:01:45.500 --> 00:01:50.420
And as well as IDEs are running TSLint and

29
00:01:50.420 --> 00:01:58.170
as well with codelyzer is written by
Mingko is, and it's not only doing

30
00:01:58.170 --> 00:02:03.371
TSLint but it's also running it against
the actual style guide for angular.

31
00:02:04.950 --> 00:02:08.450
And so
we can manually force this with NGLint.

32
00:02:09.500 --> 00:02:14.200
And so if we go to our command line,
and I would just clear this up.

33
00:02:14.200 --> 00:02:19.810
And so this actually may be in
a pretty good space right now.

34
00:02:19.810 --> 00:02:21.998
But let's just kind of mess this up.

35
00:02:25.061 --> 00:02:27.350
&gt;&gt; Lukas Ruebbelke: So
we will go with, I dunno.

36
00:02:29.880 --> 00:02:30.928
Here why not.

37
00:02:35.636 --> 00:02:37.260
&gt;&gt; Lukas Ruebbelke: We'll
just kinda do some stuff.

38
00:02:37.260 --> 00:02:43.520
This might actually not do anything but,
I know what will get this really upset.

39
00:02:43.520 --> 00:02:50.140
We'll go var foo = var.

40
00:02:50.140 --> 00:02:53.640
So one you'll see it's
running in the browser, but

41
00:02:53.640 --> 00:02:56.050
occasionally you'll still miss it.

42
00:02:56.050 --> 00:02:57.920
So I'm gonna save this.

43
00:02:57.920 --> 00:03:02.220
I'm gonna go back here, and
I'm gonna run this again.

44
00:03:02.220 --> 00:03:08.420
What we'll see is, it telling me like,
hey, you've got a trailing white space.

45
00:03:08.420 --> 00:03:10.300
You are using var instead of let.

46
00:03:10.300 --> 00:03:11.910
A let that's forbidden.

47
00:03:11.910 --> 00:03:17.480
And more so,
foo is never reassigned: use 'const'.

48
00:03:17.480 --> 00:03:18.560
And it's a missing whitespace.

49
00:03:18.560 --> 00:03:21.000
So it's letting you know, hey,
there is stuff that's broken here.

50
00:03:22.330 --> 00:03:27.868
Now what you can do is, I think you
can go entry lint fix, let's try this.

51
00:03:33.686 --> 00:03:37.290
&gt;&gt; Lukas Ruebbelke: And so
we'll actually try to fix them.

52
00:03:37.290 --> 00:03:41.477
I don't think it did other than,
I think it did actually most of it.

53
00:03:44.074 --> 00:03:47.720
&gt;&gt; Lukas Ruebbelke: Which is interesting,
so I would probably manually do most of

54
00:03:47.720 --> 00:03:52.610
this just cuz it's kind of weird
saying I'm trusting my code base you.

55
00:03:52.610 --> 00:03:57.471
But running ng lint,
it gives you good feedback.

56
00:03:57.471 --> 00:04:02.470
Because of the angular development kit
we're getting this in the ID as well.

57
00:04:02.470 --> 00:04:08.100
But, if you are on a team,
this should be part of your build process,

58
00:04:08.100 --> 00:04:12.830
is you should run lint on all
your code before you check it in.

59
00:04:12.830 --> 00:04:17.670
Because that's just an easy first level
of sanity to make sure that things

60
00:04:17.670 --> 00:04:20.210
are of sufficient quality.

61
00:04:20.210 --> 00:04:23.643
So this is, the first piece of
static analysis, it's very easy and

62
00:04:23.643 --> 00:04:25.222
it's running in the browser.

63
00:04:26.879 --> 00:04:29.763
&gt;&gt; Lukas Ruebbelke: So let me just double
check to make sure that I'm back on

64
00:04:29.763 --> 00:04:30.710
the golden path.

65
00:04:32.010 --> 00:04:35.560
All right, so
the next thing is code coverage.

66
00:04:35.560 --> 00:04:39.740
Now this ships with angular CLI,
right out of the box.

67
00:04:39.740 --> 00:04:45.229
If I go ngtest-cc,
&gt;&gt; Lukas Ruebbelke: It's

68
00:04:45.229 --> 00:04:53.087
gonna run,
&gt;&gt; Lukas Ruebbelke: And

69
00:04:53.087 --> 00:04:57.027
so what it's gonna do is it's
gonna go ahead, run the test.

70
00:04:57.027 --> 00:05:01.807
And then what we're gonna get
using Instable is this really nice

71
00:05:01.807 --> 00:05:05.893
report of how well you've
done on your code coverage.

72
00:05:08.961 --> 00:05:12.100
&gt;&gt; Lukas Ruebbelke: Everything passed and
we're good.

73
00:05:12.100 --> 00:05:16.490
Let me hop into the browser and
if we go up here,

74
00:05:16.490 --> 00:05:21.539
you'll see there's this coverage folder,
that has been generated.

75
00:05:23.170 --> 00:05:29.800
And from here you can just open this,
and I'll just open this from WebStorm.

76
00:05:29.800 --> 00:05:33.120
And I was telling you like, okay,

77
00:05:33.120 --> 00:05:37.140
like App Home this can probably use some
work and you kind of click through and

78
00:05:37.140 --> 00:05:41.190
see like, hey, there's some
stuff that does not have test.

79
00:05:41.190 --> 00:05:43.754
So you can start to visually see like,
okay, we need to clean this up,

80
00:05:43.754 --> 00:05:45.718
we actually need to write some tests for
some of this.

81
00:05:47.963 --> 00:05:51.513
&gt;&gt; Lukas Ruebbelke: And so this is
a really nice way to get insight as to how

82
00:05:51.513 --> 00:05:55.110
well you're doing on your code coverage.

83
00:05:55.110 --> 00:05:57.250
How long did it take me to do that?

84
00:05:57.250 --> 00:05:59.340
All of five seconds.

85
00:05:59.340 --> 00:06:01.880
Well okay, if you add in the time it
actually took me to open up this browser.

86
00:06:01.880 --> 00:06:04.736
You know, maybe 60 seconds.

87
00:06:04.736 --> 00:06:08.816
So now, it's really easy and convenient
for us to get this feedback loop and

88
00:06:08.816 --> 00:06:10.361
this insight into our code.

89
00:06:13.742 --> 00:06:16.081
&gt;&gt; Lukas Ruebbelke: Let me show you
one more cool trick that I use,

90
00:06:16.081 --> 00:06:18.840
that I just actually learned about.

91
00:06:18.840 --> 00:06:21.528
And I have to pull up this slide for this.

92
00:06:21.528 --> 00:06:25.171
So ng test you see, there is a way,

93
00:06:25.171 --> 00:06:30.970
there is this cool plug in
called Source Map Explorer.

94
00:06:32.210 --> 00:06:36.690
That allows you to see a relationship or

95
00:06:36.690 --> 00:06:40.020
some incite into how your
application kind of fits together.

96
00:06:41.270 --> 00:06:47.610
So what I'm going to do,
&gt;&gt; Lukas Ruebbelke: Is this.

97
00:06:47.610 --> 00:06:52.178
We'll go back into our command line.

98
00:06:54.264 --> 00:06:57.154
&gt;&gt; Lukas Ruebbelke: And it's already
been installed, so I'm just going to

99
00:06:57.154 --> 00:07:01.223
do ng build, and so this is just going
to create a standard development build.

100
00:07:03.209 --> 00:07:07.268
&gt;&gt; Lukas Ruebbelke: And so this is going
to generate a development build and it's

101
00:07:07.268 --> 00:07:12.610
going to include the source mats, which
is what we're going to use to analyze.

102
00:07:15.873 --> 00:07:18.543
&gt;&gt; Lukas Ruebbelke: Okay, so you can see
here we've got the vendor bundle and

103
00:07:18.543 --> 00:07:19.775
these different things.

104
00:07:19.775 --> 00:07:24.322
So then you go, source-map-explore and

105
00:07:24.322 --> 00:07:29.373
then this is a ./dist/ and
then let's go with

106
00:07:29.373 --> 00:07:37.129
the vendor.bundle.js
&gt;&gt; Lukas Ruebbelke: Wait for it.

107
00:07:40.657 --> 00:07:44.060
&gt;&gt; Lukas Ruebbelke: As now you
can look and see that, okay.

108
00:07:44.060 --> 00:07:50.089
In development mode my
application is 4.22 megabytes.

109
00:07:50.089 --> 00:07:55.283
You start to follow this down you realize,
my compiler is taking up a meg.

110
00:07:57.171 --> 00:08:02.094
&gt;&gt; Lukas Ruebbelke: And
you know material also about a meg.

111
00:08:02.094 --> 00:08:03.745
But you can see like, okay.

112
00:08:03.745 --> 00:08:06.740
Where are the big pieces coming from?

113
00:08:06.740 --> 00:08:09.810
And so for instance,

114
00:08:09.810 --> 00:08:15.030
I have about 100k in RHJS operators.

115
00:08:15.030 --> 00:08:16.630
And so you can start to see,

116
00:08:16.630 --> 00:08:20.860
where this will come in handy is if
you actually import all of our xjs.

117
00:08:20.860 --> 00:08:22.770
And also just like,
where did this 300 megs come from?

118
00:08:25.950 --> 00:08:29.600
And so what I'll show you here,
let's do ng build.

119
00:08:29.600 --> 00:08:32.160
And so this is where I was
talking about like deploying.

120
00:08:32.160 --> 00:08:34.684
You know,
we're kind of getting on top of that.

121
00:08:34.684 --> 00:08:42.531
So we'll ng build --prod,
&gt;&gt; Lukas Ruebbelke: Was source map,

122
00:08:42.531 --> 00:08:43.321
let me see here.

123
00:08:43.321 --> 00:08:47.363
I'm trying to do this all by memory.

124
00:08:50.422 --> 00:08:51.547
&gt;&gt; Lukas Ruebbelke: Okay, Iet's close.

125
00:08:55.654 --> 00:08:57.793
&gt;&gt; Lukas Ruebbelke: So
I'm gonna do a production build,

126
00:08:57.793 --> 00:08:59.590
which is slightly different.

127
00:09:02.100 --> 00:09:05.133
Actually quite a bit different, so
it's much, much more optimized.

128
00:09:05.133 --> 00:09:09.650
But I'm using the -sm tag
to generate source acts.

129
00:09:09.650 --> 00:09:15.440
Cuz generally with a you don't
want to do that, it's unnecessary.

130
00:09:15.440 --> 00:09:19.049
But in the case of actually running this,
I'll be dutied to generate source maps.

131
00:09:22.491 --> 00:09:25.888
&gt;&gt; Lukas Ruebbelke: We just may get
dark by the time this finishes.

132
00:09:25.888 --> 00:09:34.490
All right, so
now let's go source-map-explorer.

133
00:09:37.478 --> 00:09:39.086
&gt;&gt; Lukas Ruebbelke: We'll
run with this vendor build,

134
00:09:39.086 --> 00:09:44.453
so,
&gt;&gt; Lukas Ruebbelke: Now notice,

135
00:09:44.453 --> 00:09:47.929
this is pretty highly optimized actually.

136
00:09:47.929 --> 00:09:50.901
So now we're at 1.25.

137
00:09:55.146 --> 00:09:57.652
&gt;&gt; Lukas Ruebbelke: So here, 4.2 megs.

138
00:09:59.430 --> 00:10:04.490
We've chopped off at least 3 megs by doing
this, so that's actually pretty fantastic.

139
00:10:04.490 --> 00:10:09.090
There's probably some other
things that we can do to

140
00:10:10.840 --> 00:10:12.580
break this out, and make it even faster.

141
00:10:13.730 --> 00:10:17.690
Yeah, you can see the difference.

142
00:10:17.690 --> 00:10:22.120
Now the question is, what's the difference
between a production build or

143
00:10:22.120 --> 00:10:24.720
dev build, staging or dev or whatever?

144
00:10:24.720 --> 00:10:28.594
Well, now you know,
because we're analyzing the code,

145
00:10:28.594 --> 00:10:32.954
we're giving this hard numbers
that you can then use to analyze.

146
00:10:32.954 --> 00:10:36.546
And so I have been in calls where,
for political reasons,

147
00:10:36.546 --> 00:10:41.720
some other team had some agenda,
they wanted to use some other technology.

148
00:10:41.720 --> 00:10:46.453
And so what they were using to
drive their agenda is actually

149
00:10:46.453 --> 00:10:49.578
coming against in this case angular and

150
00:10:49.578 --> 00:10:54.324
saying this is inefficient and
[SOUND] it's not gonna do it.

151
00:10:54.324 --> 00:11:00.655
And when you can show up at those kinds
of meetings with hard numbers and

152
00:11:00.655 --> 00:11:08.513
say no, your corporate website it actually
pulling in jQuery, which is almost a meg.

153
00:11:08.513 --> 00:11:15.392
And our application is running angular and
the compressed G subversion is like 50K.

154
00:11:15.392 --> 00:11:16.780
Let's talk about who is
running inefficiently.

155
00:11:16.780 --> 00:11:17.870
And all the sudden,

156
00:11:17.870 --> 00:11:21.860
you start to invert those conversations
because you have hard numbers.

157
00:11:21.860 --> 00:11:27.368
And so here's three easy tools to get
those feedback loops in your app.

158
00:11:27.368 --> 00:11:34.020
Ng lent using co-coverage,
so that's ngtest-cc.

159
00:11:34.020 --> 00:11:40.380
So we can see where we are on our test,
and then using source-map-explorer.

160
00:11:40.380 --> 00:11:42.300
This just goes a long way to saying,

161
00:11:42.300 --> 00:11:45.290
I don't know what's going on with app
to saying here's some very clear actual

162
00:11:45.290 --> 00:11:49.810
things that we can do in our
application to make it better.

