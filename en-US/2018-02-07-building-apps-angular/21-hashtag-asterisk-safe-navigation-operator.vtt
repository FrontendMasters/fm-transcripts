WEBVTT

1
00:00:00.450 --> 00:00:03.176
&gt;&gt; Lukas Ruebbelke: That's really
the four main bindings that you have,

2
00:00:03.176 --> 00:00:05.668
string interpolation,
which is super common.

3
00:00:05.668 --> 00:00:09.106
I'm gonna think pretty much every
templating language has those double

4
00:00:09.106 --> 00:00:09.845
curly braces.

5
00:00:09.845 --> 00:00:15.491
Properties, brackets,
methods or events, parentheses,

6
00:00:15.491 --> 00:00:20.494
put them together,
banana in a box, AKA angular hug.

7
00:00:20.494 --> 00:00:26.350
Now, what happens when you
have an element on the page

8
00:00:26.350 --> 00:00:31.956
that you want to reference
via some other element?

9
00:00:31.956 --> 00:00:35.455
You can do what's called
a local template variable.

10
00:00:35.455 --> 00:00:41.709
And so there's a few use cases that
this becomes very very Interesting,

11
00:00:41.709 --> 00:00:46.849
one is if you're doing user
interfaces with observables.

12
00:00:46.849 --> 00:00:50.848
And so in other words,
I have a mouse move and I wanna actually

13
00:00:50.848 --> 00:00:55.409
create a new observable based off of
this or I want to drag something.

14
00:00:55.409 --> 00:01:01.301
And so you would need a reference
to that element on the stage.

15
00:01:01.301 --> 00:01:04.245
This is where you would use
a local template variable.

16
00:01:04.245 --> 00:01:11.637
For our purposes what we will use is for
is two reference a form.

17
00:01:11.637 --> 00:01:15.582
So when you are working with a form
there's kinda of two winners

18
00:01:15.582 --> 00:01:16.931
in pieces with that.

19
00:01:16.931 --> 00:01:22.560
I'm getting slightly ahead of myself, but
you have the underlying data of the form,

20
00:01:22.560 --> 00:01:27.505
what is actually in the fields, and
then the state or validity of the form.

21
00:01:27.505 --> 00:01:33.580
And so, you need a way to say, if this
form is not valid, disable this button.

22
00:01:33.580 --> 00:01:37.779
And so, this is where you will see
this kinda pattern quite a bit.

23
00:01:37.779 --> 00:01:43.240
So if you look down here, we're saying

24
00:01:43.240 --> 00:01:50.198
if the formRef is not valid,
disable the button.

25
00:01:50.198 --> 00:01:51.810
Well, what is formRef?

26
00:01:51.810 --> 00:01:55.609
Well,
&gt;&gt; Lukas Ruebbelke: Use

27
00:01:55.609 --> 00:02:00.053
the number sign if you will, hashtag.

28
00:02:00.053 --> 00:02:04.444
And whatever you call it that is available
for the entirety of the template.

29
00:02:04.444 --> 00:02:07.684
So in this case we're saying formRefm,
this could be anything.

30
00:02:07.684 --> 00:02:11.942
And in this case we're
passing in the actual form,

31
00:02:11.942 --> 00:02:16.112
underlying form instance
to check its validity.

32
00:02:16.112 --> 00:02:19.894
So we'll talk a little bit
more about it later but

33
00:02:19.894 --> 00:02:25.151
what I want to connect here is that
we're creating a variable here,

34
00:02:25.151 --> 00:02:27.932
formRef, as noted by the hashtag.

35
00:02:27.932 --> 00:02:31.352
That we can then reference down here and
say,

36
00:02:31.352 --> 00:02:36.574
we want to disable this button if
this form is not valid, make sense?

37
00:02:36.574 --> 00:02:43.461
One other example,
I thought I added it here, maybe I do.

38
00:02:43.461 --> 00:02:48.629
Hold on, wait for it, I guess I did not,

39
00:02:48.629 --> 00:02:53.041
you'll see it in the code though.

40
00:02:53.041 --> 00:02:58.485
You'll also see this in, with endsheet_if,
I thought I had a slide for this.

41
00:02:58.485 --> 00:03:02.907
But if you have ng if else, you can say if
this is not true, then show this, and so

42
00:03:02.907 --> 00:03:04.430
you'll see that in there.

43
00:03:04.430 --> 00:03:08.584
So we'll show that in the code
in just a moment, yes?

44
00:03:08.584 --> 00:03:10.104
&gt;&gt; Speaker 2: When it is triggered,

45
00:03:10.104 --> 00:03:15.144
when is the disable triggered, or
when is the form referred by triggered?

46
00:03:15.144 --> 00:03:18.144
If that is a function,
when is that triggered?

47
00:03:18.144 --> 00:03:19.513
&gt;&gt; Lukas Ruebbelke: So essentially,

48
00:03:19.513 --> 00:03:21.884
every kind of digest cycle, so

49
00:03:21.884 --> 00:03:26.917
if there's some event that happens,
like somebody touches it.

50
00:03:26.917 --> 00:03:30.649
If you will like there's some kind
of key stroke some change event,

51
00:03:30.649 --> 00:03:32.226
then the form is evaluated.

52
00:03:32.226 --> 00:03:35.632
And so, that's something really
interesting about forms in itself,

53
00:03:35.632 --> 00:03:38.765
that Anglers did a really good job of,
even with Angler one dot x.

54
00:03:38.765 --> 00:03:42.742
Is to keep a form valid, and
keep track of everything,

55
00:03:42.742 --> 00:03:47.768
there's kind of this, there's a lot
of things that need to happen.

56
00:03:47.768 --> 00:03:52.570
And so angular's kind of doing this for
us, and we're able to just reference this

57
00:03:52.570 --> 00:03:57.390
ng form, and just know if it's valid, and
they're kind of handling that for us.

58
00:03:57.390 --> 00:04:01.216
But it's a busy, every change
event it's now being evaluated.

59
00:04:02.897 --> 00:04:03.802
&gt;&gt; Lukas Ruebbelke: All right,

60
00:04:03.802 --> 00:04:07.014
so,
&gt;&gt; Lukas Ruebbelke: Local template

61
00:04:07.014 --> 00:04:09.097
variable, hashtag,
you put it on an element,

62
00:04:09.097 --> 00:04:11.403
you can reference it anywhere
else in the template.

63
00:04:11.403 --> 00:04:14.969
Using view child you can actually
pull it into the component.

64
00:04:17.070 --> 00:04:18.580
&gt;&gt; Lukas Ruebbelke: Occasionally, and

65
00:04:18.580 --> 00:04:23.829
by that quite often, you will want
to affect the structure of the DOM.

66
00:04:23.829 --> 00:04:28.702
For instance, if this is true show this,
if not hide it.

67
00:04:28.702 --> 00:04:31.550
Or, I have this collection of things,
iterate over it.

68
00:04:31.550 --> 00:04:36.692
So NG4 is a really good example
of a structural directive.

69
00:04:36.692 --> 00:04:43.181
That it changes the DOM layout by adding
and removing DOM elements, pretty simple.

70
00:04:43.181 --> 00:04:47.968
You will see an asterisk on
these directives to essentially

71
00:04:47.968 --> 00:04:53.246
indicate that it is modifying the HTML,
that is the nature of it.

72
00:04:53.246 --> 00:04:57.602
And the reason why this happens is that
Angular's is doing some things under

73
00:04:57.602 --> 00:04:59.519
the hood with the template tags.

74
00:04:59.519 --> 00:05:04.304
And so, the asterisk is just
syntactic sugar that they're taking,

75
00:05:04.304 --> 00:05:07.368
it's kind of a TypeScript
move if you will.

76
00:05:07.368 --> 00:05:11.817
They're taking the asterisk and
they're using it to expand out and

77
00:05:11.817 --> 00:05:15.964
do a lot more things under the hood
that I'm just too lazy to do.

78
00:05:15.964 --> 00:05:20.655
For example, ngIF,
if hero is true then show it,

79
00:05:20.655 --> 00:05:24.914
if not, hide it, that is DOM manipulation.

80
00:05:24.914 --> 00:05:31.698
NgFor, so looping over the heros
collection and stamping it out.

81
00:05:31.698 --> 00:05:36.240
Ngswitch, and you can see here,
we're actually

82
00:05:36.240 --> 00:05:40.906
binding to the property or
the value of toeChoice.

83
00:05:40.906 --> 00:05:46.046
But underneath the hood you have
the SwitchCase, and depending on

84
00:05:46.046 --> 00:05:51.293
which one is true, it's turning
that one on and the other ones off.

85
00:05:51.293 --> 00:05:57.580
Now let me show you what I mean
by the asterisk, syntax show.

86
00:05:57.580 --> 00:06:02.102
So with switch case or
with the asterisks, we're just saying,

87
00:06:02.102 --> 00:06:06.217
hey it's modifying the dom,
but we could do this by hand.

88
00:06:06.217 --> 00:06:08.273
And what is happening is, A,

89
00:06:08.273 --> 00:06:12.800
there's wrapping this element in template,
in a template tag,

90
00:06:12.800 --> 00:06:17.683
which is kind of a web component thing and
then turning that on and off.

91
00:06:17.683 --> 00:06:22.067
And so you could do this long hand but
I'm lazy.

92
00:06:22.067 --> 00:06:24.661
So thank goodness for syntactic sugar.

93
00:06:24.661 --> 00:06:30.476
So that is the idea is if you wanna do
it long hand you can do it this way.

94
00:06:30.476 --> 00:06:37.290
But I think way is just so much easier,
and that's where that comes in.

95
00:06:37.290 --> 00:06:42.310
Last but not least, you will run into
this occasionally, is sometimes you

96
00:06:42.310 --> 00:06:47.498
need to reference a property that just
does not exist yet, it's undefined.

97
00:06:47.498 --> 00:06:51.476
So it's in Ruby and
a bunch of different things.

98
00:06:51.476 --> 00:06:57.516
The safe navigation operator is denote by
a question mark, followed by a period.

99
00:06:57.516 --> 00:07:01.223
So for instance if you wanted
to check an ID on an object and

100
00:07:01.223 --> 00:07:03.001
the object was undefined or

101
00:07:03.001 --> 00:07:07.964
null it would normally a tablet would
throw an error or just not do anything.

102
00:07:07.964 --> 00:07:10.813
Using the safe navigation
operator you can say check it.

103
00:07:10.813 --> 00:07:15.252
If it's not there, don't do anything and
just kind of absorb it.

104
00:07:15.252 --> 00:07:20.838
So what is happening is angular js
they would just kinda swallow it.

105
00:07:20.838 --> 00:07:24.641
And so it allowed for
a little bit kind of more loose code.

106
00:07:24.641 --> 00:07:28.555
With angular they're a lot more
specific and a lot more strict.

107
00:07:28.555 --> 00:07:33.845
But this allows us to simply
say this may not exist yet,

108
00:07:33.845 --> 00:07:37.077
if so, just don't do anything.

109
00:07:37.077 --> 00:07:42.312
So for instance,
&gt;&gt; Lukas Ruebbelke: If first they

110
00:07:42.312 --> 00:07:48.412
did not exist on null hero, and
we still need to bind to it,

111
00:07:48.412 --> 00:07:52.311
we just put a question mark here.
&gt;&gt; Speaker 2: What if

112
00:07:52.311 --> 00:07:56.661
null hero is undefined?
&gt;&gt; Lukas Ruebbelke: Then you've got

113
00:07:56.661 --> 00:07:58.075
bigger problems.
&gt;&gt; Speaker 2: No,

114
00:07:58.075 --> 00:08:01.868
so, I mean,
do you do that nullHero question mark, and

115
00:08:01.868 --> 00:08:03.892
then something else, or?
&gt;&gt; Lukas Ruebbelke: So

116
00:08:03.892 --> 00:08:08.200
I don't think you can do it on
the overarching object, so it's more so

117
00:08:08.200 --> 00:08:10.090
properties on objects.
&gt;&gt; Speaker 2: Okay.

