WEBVTT

1
00:00:00.470 --> 00:00:05.410
&gt;&gt; Lucas: So when I did my first
Angular GS workshop I did a variation of

2
00:00:05.410 --> 00:00:10.180
this graphic because, if you can believe
it, Angular GS was super confusing.

3
00:00:10.180 --> 00:00:15.046
And so I just scaled it down to this
graphic of like here's the big picture.

4
00:00:15.046 --> 00:00:18.667
It's only eight pieces.

5
00:00:18.667 --> 00:00:21.088
This is what you have to know,
eight pieces,

6
00:00:21.088 --> 00:00:23.273
which at the time was only eight pieces.

7
00:00:23.273 --> 00:00:27.223
This is way easier than I thought, but

8
00:00:27.223 --> 00:00:32.660
fortunately for
us that it's gotten even simpler.

9
00:00:33.790 --> 00:00:40.050
That there is really four
main pieces in angular.

10
00:00:42.040 --> 00:00:46.132
There are some kind of little edge cases
here but for the most of your work,

11
00:00:46.132 --> 00:00:49.903
I would say 90% of the time you
would do this 100% of the time.

12
00:00:49.903 --> 00:00:56.830
It's your modules, your routes,
components, and services, four pieces.

13
00:00:56.830 --> 00:00:59.330
And today we're really gonna
focus on the component.

14
00:00:59.330 --> 00:01:01.710
But we'll also touch on routes and
services.

15
00:01:06.017 --> 00:01:07.180
&gt;&gt; Lucas: So let's talk about the module.

16
00:01:09.642 --> 00:01:12.860
&gt;&gt; Lucas: So
this is a slightly overloaded term.

17
00:01:12.860 --> 00:01:18.230
Because Angular provides module
support at the language level and

18
00:01:18.230 --> 00:01:19.300
the framework level.

19
00:01:19.300 --> 00:01:24.390
So this happened in RC5 that
they introduced module.

20
00:01:24.390 --> 00:01:27.460
And this is so
we could do ahead of time compilation and

21
00:01:27.460 --> 00:01:29.680
lazy loading some different things.

22
00:01:29.680 --> 00:01:35.010
But first and
foremost that we use ES6 module

23
00:01:35.010 --> 00:01:38.140
to provide organization
at a language level.

24
00:01:38.140 --> 00:01:43.200
So all this really does is it creates
a container that says I need these things

25
00:01:43.200 --> 00:01:45.970
and I'm making available this
thing to the rest of the world.

26
00:01:47.870 --> 00:01:52.448
So pretty simple, we are exporting

27
00:01:52.448 --> 00:01:58.570
Items Component but,
we're also importing these pieces here.

28
00:01:58.570 --> 00:02:02.730
So I just think of it as a box that says,
this thing is going out, but

29
00:02:02.730 --> 00:02:04.400
I also need these things to work.

30
00:02:06.847 --> 00:02:13.030
&gt;&gt; Lucas: Now, Angular uses @NgModule to
provide organization at a framework level.

31
00:02:14.150 --> 00:02:19.151
And so at a language level,
we use that to compile our application in

32
00:02:19.151 --> 00:02:24.152
a way that makes sense, but
we use NgModule to tell angular itself,

33
00:02:24.152 --> 00:02:27.514
this is how this
application fits together.

34
00:02:27.514 --> 00:02:30.776
So this allows us to
communicate certain things,

35
00:02:30.776 --> 00:02:34.320
such as what view classes are we using.

36
00:02:34.320 --> 00:02:36.870
What other modules do we need?

37
00:02:36.870 --> 00:02:41.160
Do we have additional services, so
providers just think this is services?

38
00:02:41.160 --> 00:02:45.385
And if it's a top-level module,
what is the entry point.

39
00:02:45.385 --> 00:02:49.651
And so bootstrap will tell it
start with this module and

40
00:02:49.651 --> 00:02:55.320
bootstrap your application and so
here is a pretty standard NgModules.

41
00:02:55.320 --> 00:03:01.840
So first and foremost we're
saying here's our components or

42
00:03:01.840 --> 00:03:05.550
something that's going to show up in
the View so our view declarations.

43
00:03:05.550 --> 00:03:07.430
Our imports, so these are submodules.

44
00:03:08.730 --> 00:03:10.420
At this moment have an ItemsService.

45
00:03:10.420 --> 00:03:14.050
And we're going to bootstrap
with the AppComponent.

46
00:03:14.050 --> 00:03:16.490
And so
this is just a manifest if you will,

47
00:03:16.490 --> 00:03:21.970
that's saying this is how this
Angular app is going to be

48
00:03:21.970 --> 00:03:26.520
put together, but, it's just really,

49
00:03:26.520 --> 00:03:29.770
I would say a map or a manifest saying
this is how this thing is organized.

50
00:03:32.870 --> 00:03:39.210
Now one other thing to
point out is that before

51
00:03:39.210 --> 00:03:43.880
you actually bootstrap to a component,
but now you bootstrap to a module.

52
00:03:43.880 --> 00:03:47.710
So we're saying over here
bootstrapModule(AppModule) and

53
00:03:49.200 --> 00:03:51.299
then from there when
AppModule gets bootstrapped.

54
00:03:52.480 --> 00:03:58.050
Then, it'll look and say okay, well,
what component do we start at?

55
00:03:58.050 --> 00:04:01.429
And that's where over here,
we're saying start with the app component.

56
00:04:01.429 --> 00:04:06.153
One other thing worth pointing out
is you'll notice that we're using

57
00:04:06.153 --> 00:04:10.750
platform browser dynamic to
bootstrap the application.

58
00:04:10.750 --> 00:04:13.140
Well, angular being a platform.

59
00:04:13.140 --> 00:04:19.970
You can target a lot of different
build destinations if you will.

60
00:04:19.970 --> 00:04:22.520
So for instance, it can be electron.

61
00:04:22.520 --> 00:04:24.270
It can be server side.

62
00:04:24.270 --> 00:04:26.210
It can be with web workers.

63
00:04:26.210 --> 00:04:27.070
Ahead of time compilation.

64
00:04:27.070 --> 00:04:30.030
There's a bunch of different ways to
actually compile the application.

65
00:04:30.030 --> 00:04:33.280
This is the most basic one in other
words just run it in the browser and

66
00:04:33.280 --> 00:04:35.090
run as a dynamic web application.

67
00:04:35.090 --> 00:04:39.880
But we have the ability to control
how the application is even span up,

68
00:04:39.880 --> 00:04:41.630
which is really really interesting.

69
00:04:44.770 --> 00:04:48.420
So if modules are kind
of the big container.

70
00:04:48.420 --> 00:04:52.530
So think of that as if somebody
asked Mark Mark, where do you live?

71
00:04:52.530 --> 00:04:55.090
He might say, well,
I live in the Twin Cities.

72
00:04:55.090 --> 00:04:57.800
And so that might be a module, so

73
00:04:57.800 --> 00:05:03.480
it's a very large container that
houses a single cohesive thing.

74
00:05:04.580 --> 00:05:09.060
But within that we have major highways,
and this is where routes come in.

75
00:05:09.060 --> 00:05:11.970
This is pretty much just a way

76
00:05:11.970 --> 00:05:15.530
to navigate to a specific
component within your application.

77
00:05:15.530 --> 00:05:18.800
So generally what in it's simplest form,

78
00:05:18.800 --> 00:05:22.900
it just contains a path,
reference and a component reference.

79
00:05:22.900 --> 00:05:28.130
And then in the URL, when there is
a match, then Angular would say,

80
00:05:28.130 --> 00:05:32.530
okay, here's the path, we've matched
it up Let's take this component and

81
00:05:32.530 --> 00:05:34.380
let's just load it into the router outlet.

82
00:05:35.710 --> 00:05:39.670
And so this is a way to have a single
page that's loading multiple components

83
00:05:39.670 --> 00:05:42.450
into the page, depending on the url.

84
00:05:42.450 --> 00:05:47.230
So you can think of the url as kind of
a serialized state of the applications.

85
00:05:47.230 --> 00:05:52.660
So, for instance, if you're /users, well
you're wanting to see that state or if you

86
00:05:52.660 --> 00:05:56.430
have four slash items or widgets, well you
want to see that state of the application.

87
00:05:57.560 --> 00:06:02.430
Even if you wanted to do route params,
you could be like users forward slash one.

88
00:06:02.430 --> 00:06:06.640
Well then, the router is going to
serialize that and say, we need to

89
00:06:06.640 --> 00:06:12.206
actually see the user with the ID of one
and load and handle that accordingly.

90
00:06:12.206 --> 00:06:16.750
And so it's loaded into
the router outlet component.

91
00:06:16.750 --> 00:06:19.790
And then we navigate using
the rod of interactive.

92
00:06:19.790 --> 00:06:26.250
So this is just a convenient directive
that saves us a lot of typing in terms of,

93
00:06:26.250 --> 00:06:30.350
we don't have to hand build
like our anchor tags.

94
00:06:31.520 --> 00:06:33.700
Router link built to the users.

95
00:06:33.700 --> 00:06:35.400
And just so it knows,
it'll load it up for you.

96
00:06:35.400 --> 00:06:37.360
So just a really handy thing.

97
00:06:38.520 --> 00:06:45.140
Now, one thing worth pointing out is
that Router uses history-pushState.

98
00:06:45.140 --> 00:06:50.719
So you don't have these hash tag
users hash tag, item hash tag widget.

99
00:06:50.719 --> 00:06:52.880
It's that it's used in history-pushState.

100
00:06:52.880 --> 00:06:57.320
And so you have to set a base-ref
tag in your index.html.

101
00:06:57.320 --> 00:07:00.430
So the Angular sail light does this for
you.

102
00:07:00.430 --> 00:07:04.969
Where I've had to modify this is
if I'm running in an electron app.

103
00:07:06.080 --> 00:07:10.580
Then the paradigm of being in a browser,
it shifts a little bit.

104
00:07:10.580 --> 00:07:13.910
As well as I've seen
applications that need to run

105
00:07:13.910 --> 00:07:15.880
on a subdirectory of the root domain.

106
00:07:15.880 --> 00:07:21.220
So it might be something.com/demo and
then you actually have the apps.

107
00:07:21.220 --> 00:07:27.230
So you will need to adjust your base
ref so that it doesn't basically

108
00:07:27.230 --> 00:07:31.930
just wash that out, it ruined kind
of your URL kind of references.

109
00:07:34.470 --> 00:07:39.094
And so here path component,
really simple here.

110
00:07:39.094 --> 00:07:45.080
Path items, component, ItemsComponent.

111
00:07:45.080 --> 00:07:49.850
So it's just simply saying when you
go to for slash path take or for

112
00:07:49.850 --> 00:07:52.190
slash items, that's the path.

113
00:07:52.190 --> 00:07:55.080
Load the ItemsComponent
into the router outlet.

114
00:07:55.080 --> 00:07:56.130
So pretty simple.

115
00:07:56.130 --> 00:07:58.229
Yes?
&gt;&gt; Speaker 2: A question about injecting

116
00:07:58.229 --> 00:08:05.453
dependencies like Bootstrap and stuff
to a route or Add an application layer.

117
00:08:05.453 --> 00:08:10.479
So, the bootstrap JavaScript library,
where would you, cuz I'm

118
00:08:10.479 --> 00:08:17.480
assuming we're using it later in the-
&gt;&gt; Lucas: Yeah, so the question is,

119
00:08:17.480 --> 00:08:22.550
would we be using Bootstrap 3 or
4 in the sample application?

120
00:08:22.550 --> 00:08:27.420
The answer is no,
because we are using Angular Material.

121
00:08:27.420 --> 00:08:31.590
The difference is that,
because we're using Angular Material,

122
00:08:31.590 --> 00:08:38.250
we have actual Angular components
that adhere to the standard.

123
00:08:38.250 --> 00:08:42.550
Now there are Bootstrap components, so

124
00:08:42.550 --> 00:08:45.900
there's libraries where they've
actually taken the Bootstrap styling,

125
00:08:45.900 --> 00:08:48.770
the different things, and
wrap those in Angular components.

126
00:08:48.770 --> 00:08:52.620
And you would simply import
that as a submodule.

127
00:08:52.620 --> 00:08:56.650
So let me ask you to pull it up in the app
and I'll show you where that would go.

128
00:08:57.840 --> 00:09:02.482
But if you're just using the CSS, then you
would just actually just put that into

129
00:09:02.482 --> 00:09:04.885
your index.html or you could bundle it.

130
00:09:04.885 --> 00:09:07.980
But that would just be
purely a styling thing.

131
00:09:07.980 --> 00:09:10.760
We're using any material,
because we actually get

132
00:09:10.760 --> 00:09:14.620
fully functional components with it, but-
&gt;&gt; Speaker 2: If you has

133
00:09:14.620 --> 00:09:16.095
JavaScript with it.

134
00:09:16.095 --> 00:09:20.786
&gt;&gt; Lucas: Yeah, it's functioning you know
JavaScript living breathing things that

135
00:09:20.786 --> 00:09:23.141
we're actually finding to our page.

136
00:09:23.141 --> 00:09:27.860
With that said the segues
into kind of a nice sub topic

137
00:09:27.860 --> 00:09:30.550
that I think is interesting.

138
00:09:30.550 --> 00:09:36.541
So, remember I said a module is basically
a container that consumes things and

139
00:09:36.541 --> 00:09:37.918
exports things.

140
00:09:37.918 --> 00:09:41.181
Well, what they've done
with Angular Material

141
00:09:41.181 --> 00:09:45.571
is they want you to be able to
consume these components al a carte.

142
00:09:46.590 --> 00:09:50.920
So if you have a 50 component library and

143
00:09:50.920 --> 00:09:53.970
you need two of them, well,
then it wouldn't make sense,

144
00:09:53.970 --> 00:09:58.960
from a performance standpoint, to have
to import everything, consume it all.

145
00:09:58.960 --> 00:10:02.410
So they let you consume just
the thing that you want.

146
00:10:02.410 --> 00:10:06.030
What I've done is I've created
an app material module.

147
00:10:07.650 --> 00:10:12.921
All this is is just a container
where I import all of the separate

148
00:10:12.921 --> 00:10:19.499
modules that I'm using and then I'm
exporting it into a kind of single place.

149
00:10:19.499 --> 00:10:24.173
And what this allows me to do
is now because I'm exporting,

150
00:10:24.173 --> 00:10:29.230
it's available to ever consumes
this top level rapper module.

151
00:10:30.300 --> 00:10:36.105
Down here, I'm just importing
the app material module.

152
00:10:36.105 --> 00:10:41.825
And because I'm exporting all of these
modules I'm not having to go and

153
00:10:41.825 --> 00:10:44.600
import these one by one over here.

154
00:10:45.840 --> 00:10:50.290
Is I've just created a top level
module that can pull them all in.

155
00:10:50.290 --> 00:10:53.830
And then I'm exporting them
as a single collection.

156
00:10:53.830 --> 00:10:55.200
That I can import here.

157
00:10:55.200 --> 00:10:56.200
So the question is.

158
00:10:57.220 --> 00:11:01.180
If there was a bootstrap library, and

159
00:11:01.180 --> 00:11:06.860
I'm certain there is,
we would import that module.

160
00:11:06.860 --> 00:11:11.007
So it would look something like,
and this is completely sudo code.

161
00:11:11.007 --> 00:11:16.447
With import { BootstrapModule } from,

162
00:11:22.741 --> 00:11:24.974
&gt;&gt; Lucas: I'm totally making this up, and

163
00:11:24.974 --> 00:11:26.980
so we'd import it.

164
00:11:26.980 --> 00:11:31.210
And so
this is modules at the language level.

165
00:11:31.210 --> 00:11:35.400
So we're simply saying, we need to pull
this in as we compile it altogether and

166
00:11:35.400 --> 00:11:41.540
bundle it, but then we also need to
make this available to the application.

167
00:11:41.540 --> 00:11:46.710
And so you would put it in here and
import it, at which point if this

168
00:11:46.710 --> 00:11:51.790
quasi Bootstrap library that I
just imported if it truly existed,

169
00:11:51.790 --> 00:11:54.360
I would then be able to use that
in the rest of the application.

170
00:11:54.360 --> 00:11:57.720
So the shape is the same,
we're just using a new material.

171
00:11:58.900 --> 00:12:03.470
Routes, we're trying to ask
specific questions instead of like,

172
00:12:03.470 --> 00:12:04.140
does this make sense?

173
00:12:04.140 --> 00:12:05.960
Does anybody have any questions?

174
00:12:05.960 --> 00:12:12.170
Does the shape of, I want to go to
a specific state in the application,

175
00:12:12.170 --> 00:12:17.350
so mapping a url to a component
being loaded into a page.

176
00:12:17.350 --> 00:12:18.390
Does that make sense?

177
00:12:21.020 --> 00:12:28.766
So now, the atomic building
block of Angular is components.

178
00:12:28.766 --> 00:12:34.530
Now the component

179
00:12:34.530 --> 00:12:40.130
under the hood consists of two things,
template and a class.

180
00:12:42.290 --> 00:12:47.970
So a component class and I will try to
refer to it as a component class but

181
00:12:47.970 --> 00:12:49.588
if for some reason, I say controller,

182
00:12:49.588 --> 00:12:55.690
that's my 1.x habits shining through,
surfacing.

183
00:12:55.690 --> 00:12:56.720
I mean the same thing,

184
00:12:56.720 --> 00:13:01.290
because it essentially controls
the component as a whole.

185
00:13:01.290 --> 00:13:04.070
But components, Component Classes.

186
00:13:04.070 --> 00:13:06.320
They're just ES6 classes.

187
00:13:07.350 --> 00:13:08.140
And then properties and

188
00:13:08.140 --> 00:13:12.306
methods Of the component class
are available to the template.

189
00:13:12.306 --> 00:13:17.429
And providers, services, dependencies,

190
00:13:17.429 --> 00:13:22.000
they are injected in the constructor.

191
00:13:22.000 --> 00:13:26.420
So I am a huge fan of
dependency injection.

192
00:13:28.250 --> 00:13:33.570
Because what this allows you to do
is when you have a dependency and

193
00:13:33.570 --> 00:13:35.213
you need to test it,

194
00:13:35.213 --> 00:13:40.554
instead of injecting the real thing
you can simply inject a mock.

195
00:13:40.554 --> 00:13:45.513
And so being able to decouple your
application and then wire it back together

196
00:13:45.513 --> 00:13:51.650
with a pendency injection, I think is
really, really, really, really important.

197
00:13:51.650 --> 00:13:57.790
We use dependency injection in as
parameters into the construction.

198
00:13:57.790 --> 00:14:00.080
So I'll talk about that
a bit more in a moment.

199
00:14:00.080 --> 00:14:04.860
But just know if you have an items
component that needs an items service.

200
00:14:04.860 --> 00:14:07.670
That's going to be a parameter
in the constructor.

201
00:14:10.250 --> 00:14:16.340
Also, especially in JavaScript, in
the browser, that things are asynchronous.

202
00:14:16.340 --> 00:14:21.090
Things happen, components get added to the
stage, they get taken off, things change.

203
00:14:21.090 --> 00:14:27.930
And so, internally, there's this
secret lifecycle of components.

204
00:14:27.930 --> 00:14:32.290
My friend Leo did a really good talk
riffing on the Secret Life of Pets

205
00:14:32.290 --> 00:14:36.480
is that things are happening
whether we know it or not.

206
00:14:36.480 --> 00:14:38.900
We have on a knit.

207
00:14:38.900 --> 00:14:39.870
Something's taking off the stage.

208
00:14:39.870 --> 00:14:41.150
You have on destroy.

209
00:14:41.150 --> 00:14:44.930
The Angular team exposes
those lifecycle hooks.

210
00:14:44.930 --> 00:14:49.050
So that we can tap into them and
do some really powerful things.

211
00:14:49.050 --> 00:14:52.600
Namely, clean up after ourselves as
a component is being taken off the stage.

212
00:14:54.780 --> 00:14:56.509
Huge high-five to them,

213
00:14:56.509 --> 00:15:00.686
because they actually push that
back to Angular 1.5 and up.

214
00:15:00.686 --> 00:15:03.794
So you can actually use component
life cycle hooks in 1.x and

215
00:15:03.794 --> 00:15:05.060
I recommend doing that.

216
00:15:08.940 --> 00:15:13.566
&gt;&gt; Lucas: So this is a component class.

217
00:15:13.566 --> 00:15:16.326
Who here has done C# and/or Java?

218
00:15:20.854 --> 00:15:24.014
&gt;&gt; Lucas: So some of this should look
pretty familiar if you come from

219
00:15:24.014 --> 00:15:26.280
a classical language.

220
00:15:26.280 --> 00:15:33.080
That we have a class and
it's called Item Component.

221
00:15:33.080 --> 00:15:35.634
And we're just implementing an interface.

222
00:15:35.634 --> 00:15:40.748
And so what we're saying is this is
a contract that we have to honor,

223
00:15:40.748 --> 00:15:45.440
which in this case is a life cycle hook,
which is ngOnInit.

224
00:15:45.440 --> 00:15:49.750
So we do not explicitly called the method.

225
00:15:49.750 --> 00:15:54.455
It implicitly gets called for us when the
component has been added to the stage and

226
00:15:54.455 --> 00:15:55.920
its bindings have been satisfied.

227
00:15:57.400 --> 00:16:01.780
And then you can see here,
items, selected item.

228
00:16:01.780 --> 00:16:03.560
Property on our class.

229
00:16:03.560 --> 00:16:05.430
We can now bind to it.

230
00:16:05.430 --> 00:16:08.880
And if we add another method down here,
we could technically call ngOnInit.

231
00:16:08.880 --> 00:16:13.073
I don't recommend it but if we had another
method in here, we could bind to it and

232
00:16:13.073 --> 00:16:14.544
call it from our template.

233
00:16:14.544 --> 00:16:19.140
And they can see here we have
a dependency of item service.

234
00:16:19.140 --> 00:16:21.460
Well, we're injecting it
into the constructor.

235
00:16:22.720 --> 00:16:30.651
So, if for some reason everybody
here forgot how to program.

236
00:16:30.651 --> 00:16:34.860
And I was starting with a blank slate,
just programming in general.

237
00:16:34.860 --> 00:16:37.780
A class is a container,
you have properties and methods.

238
00:16:37.780 --> 00:16:44.570
Like, if I just grossly simplified what I
do every day, is properties and methods.

239
00:16:44.570 --> 00:16:46.620
If you have a property on your class,
you can bind to it.

240
00:16:46.620 --> 00:16:49.540
If you have a method on your class,
you can bind to it as well.

241
00:16:54.529 --> 00:16:59.803
&gt;&gt; Lucas: And so, on the flip side,
if the component class is the brains,

242
00:16:59.803 --> 00:17:03.070
then the template is the beauty.

243
00:17:03.070 --> 00:17:03.900
So maybe Beauty and

244
00:17:03.900 --> 00:17:06.470
the Beast would have been a better joke
had I thought about that a little harder.

245
00:17:07.770 --> 00:17:10.100
Templates, they're just HTML.

246
00:17:10.100 --> 00:17:13.820
And they tell Angular how
to render a component.

247
00:17:13.820 --> 00:17:18.057
Now, if you've done 1.x and
you go to the documentation or

248
00:17:18.057 --> 00:17:23.193
if you've never done 1.x and
you still wanna go to the documentation.

249
00:17:23.193 --> 00:17:28.170
They have all these built
in tags essentially, and

250
00:17:28.170 --> 00:17:31.460
attributes that you can
put into your HTML.

251
00:17:31.460 --> 00:17:36.120
For every event, it's click, submit,
mouse over, swipe left, swipe right.

252
00:17:36.120 --> 00:17:37.430
I mean, it's just on and on and on and on.

253
00:17:39.370 --> 00:17:43.960
Angular, going back to this standards
approach, they decided, look,

254
00:17:43.960 --> 00:17:47.160
we're not gonna create one for
every single DOM event.

255
00:17:47.160 --> 00:17:50.900
Like, we're just going to leverage
the native DOM events and properties.

256
00:17:50.900 --> 00:17:56.410
And so our binding syntax
is expanded slightly, but

257
00:17:56.410 --> 00:18:00.820
now we're just leveraging the DOM to fire
our events, which is really, really nice.

258
00:18:00.820 --> 00:18:02.950
So there's a click event.

259
00:18:02.950 --> 00:18:04.380
You combine to it.

260
00:18:04.380 --> 00:18:07.660
And so, if you go for instance to the MDN,
I haven't tested all of these.

261
00:18:07.660 --> 00:18:10.050
So, there may be these weird edge cases.

262
00:18:10.050 --> 00:18:13.870
But pretty much, if it's a DOM event,
you can just bind to it.

263
00:18:13.870 --> 00:18:18.720
Just pick that event, wrap it in
the syntax, and you can capture.

264
00:18:19.970 --> 00:18:20.470
Pretty awesome.

265
00:18:22.030 --> 00:18:29.800
One other thing, I'm not gonna get really
into this, but what does CSS stand for?

266
00:18:31.470 --> 00:18:32.852
I'm looking at.

267
00:18:32.852 --> 00:18:33.950
&gt;&gt; Speaker 2: Cascading style sheet.

268
00:18:33.950 --> 00:18:40.334
&gt;&gt; Lucas: Yes, and
the problem with CSS is that it cascades.

269
00:18:40.334 --> 00:18:44.777
And that's a real problem, especially if
you've done a general purpose component

270
00:18:44.777 --> 00:18:48.250
that you're passing
around your organization.

271
00:18:48.250 --> 00:18:51.930
You know blood, sweat and
tears into this component and

272
00:18:51.930 --> 00:18:57.320
some savage over in accounting
decides that you know an h one

273
00:18:57.320 --> 00:19:02.455
should be 144 pixels well also
know just blew your component out.

274
00:19:02.455 --> 00:19:05.340
With angular, under the hood,
it leverages shadow DOM.

275
00:19:05.340 --> 00:19:08.140
So by default, it is emulated shadow DOM.

276
00:19:08.140 --> 00:19:12.922
Now CSS is no longer cascading style
sheets, but it's components style sheets.

277
00:19:12.922 --> 00:19:17.163
And so essentially what you're doing
is you're putting a perimeter around

278
00:19:17.163 --> 00:19:18.960
the styling of your component.

279
00:19:20.130 --> 00:19:26.230
And if you've ever had somebody just
trample over a component and he's like

280
00:19:26.230 --> 00:19:29.320
this thing isn't working or you see down
the one your like "What just happened".

281
00:19:30.350 --> 00:19:33.120
This is I would say a hedge around that.

282
00:19:33.120 --> 00:19:34.950
So this is super awesome.

283
00:19:34.950 --> 00:19:37.570
A lot of my designer friends
component developers like they just,

284
00:19:37.570 --> 00:19:40.329
every time they do this, they just
push champagne out on the ground.

285
00:19:40.329 --> 00:19:41.710
It's a really big feature.

286
00:19:45.090 --> 00:19:48.937
&gt;&gt; Lucas: And so
here we are simply saying, so

287
00:19:48.937 --> 00:19:54.464
just under here we still
have our component class.

288
00:19:54.464 --> 00:19:59.121
But on top of it we're saying we just want
to attach this template, this style sheet,

289
00:19:59.121 --> 00:20:01.870
and we're going to use this selector.

290
00:20:01.870 --> 00:20:06.034
Now we're doing this and
calling an external template.

291
00:20:06.034 --> 00:20:10.860
There's another school of thought and I'm
not going to say which one I fall into.

292
00:20:10.860 --> 00:20:15.600
The style guide recommends
using external templates but

293
00:20:15.600 --> 00:20:20.490
react the pretty abolish on
doing your templates in line.

294
00:20:21.490 --> 00:20:24.260
The reason being, and I agree with this,

295
00:20:24.260 --> 00:20:27.835
is that it serves as a canary
in a coal mine if you will.

296
00:20:27.835 --> 00:20:30.004
That if your template is too big,

297
00:20:30.004 --> 00:20:33.340
to comfortably sit inline
within your component.

298
00:20:33.340 --> 00:20:36.483
In other words, you're like,
I'm at line 400.

299
00:20:36.483 --> 00:20:40.160
Like, this is really hard to understand,
it's really messing everything up.

300
00:20:40.160 --> 00:20:41.760
Your component is probably doing too much.

301
00:20:43.180 --> 00:20:48.420
And so this is a way to ensure fine grain
components, is by doing them inline.

302
00:20:48.420 --> 00:20:53.020
Now if I saw external or inline,
it's not going to offend me either way.

303
00:20:54.550 --> 00:20:58.610
The point is your components should
be single purpose, fine grained.

304
00:20:58.610 --> 00:21:04.570
And if your template is 1,200 lines of
markup, you're probably doing too much.

305
00:21:04.570 --> 00:21:09.430
So favor fine grain specific units
of code and functionality over these

306
00:21:09.430 --> 00:21:14.460
monolithic things that are doing, well,
really anything more than one thing.

307
00:21:15.530 --> 00:21:19.110
Start thinking of a way to start
abstracting that out, this is basic.

308
00:21:19.110 --> 00:21:21.440
Software Engineering architecture.

309
00:21:21.440 --> 00:21:26.560
Class just a Java script class,
template is just html.

310
00:21:26.560 --> 00:21:30.670
So, if you know Java script you know
html you're well in you're way.

311
00:21:33.480 --> 00:21:37.260
But, there is an assume back this up,
up to this point.

312
00:21:39.030 --> 00:21:43.145
This really nothing to do
with java are really angular.

313
00:21:43.145 --> 00:21:45.580
And so the question is how do we
make angular aware of these things.

314
00:21:46.860 --> 00:21:49.810
This is where meta data comes in, so

315
00:21:49.810 --> 00:21:55.140
meta data allows angular
to process a class and

316
00:21:55.140 --> 00:22:00.000
turn it or basic insert it into kind
of the angular application life cycle.

317
00:22:00.000 --> 00:22:03.780
We attach metadata with
TypeScript using decorators.

318
00:22:03.780 --> 00:22:10.600
So even this, I believe it's already in
a proposal, is that one of the things

319
00:22:10.600 --> 00:22:15.790
I love about TypeScript is that they're
really pushing JavaScript ahead fast.

320
00:22:15.790 --> 00:22:18.282
But then the things that really work and
they're evolving,

321
00:22:18.282 --> 00:22:22.210
they basic,
submitting that back to become standard.

322
00:22:23.330 --> 00:22:25.990
So decorators are one of these things.

323
00:22:25.990 --> 00:22:29.750
They're just functions, so
you can actual write your own decorators.

324
00:22:29.750 --> 00:22:32.610
And the most common is
the component decorator,

325
00:22:32.610 --> 00:22:34.990
which then takes essentially an object

326
00:22:34.990 --> 00:22:38.839
that has properties that tells Angular
how the component is supposed to work.

327
00:22:40.390 --> 00:22:43.004
So, in this case we have a component.

328
00:22:43.004 --> 00:22:47.150
We're say take this class,
attach this template, this CSS.

329
00:22:47.150 --> 00:22:54.520
And when we attach it to the DOM,
do so using this selector.

330
00:22:54.520 --> 00:22:58.950
So think of a selector as just an HTML tag
that you can then insert into the DOM.

331
00:23:03.163 --> 00:23:06.446
&gt;&gt; Lucas: Now one thing, and
we'll talk about this more tomorrow,

332
00:23:06.446 --> 00:23:09.261
is that even though component
is the most common,

333
00:23:09.261 --> 00:23:12.280
is you can also decorate properties and
methods.

334
00:23:12.280 --> 00:23:15.460
And so, input and
output are kind of two big ones.

335
00:23:15.460 --> 00:23:18.320
So we have a component,
we're saying this is an input property and

336
00:23:18.320 --> 00:23:21.160
it's also going to have
an output event of this.

337
00:23:21.160 --> 00:23:22.720
And so, we'll explain this more.

338
00:23:22.720 --> 00:23:27.519
They're just, so you can see that
sometimes it does indeed exist

339
00:23:27.519 --> 00:23:30.843
inside the class and
this is totally normal.

