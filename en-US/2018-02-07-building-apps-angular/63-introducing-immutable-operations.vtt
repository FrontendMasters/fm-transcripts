WEBVTT

1
00:00:00.395 --> 00:00:04.550
&gt;&gt; Lucas Ruebbelke: Now that I've set the
stage of let's think about these things.

2
00:00:04.550 --> 00:00:06.630
It's like everything I talked about for
the rest of the day.

3
00:00:07.920 --> 00:00:13.990
Think about how does it help
me improve state management,

4
00:00:13.990 --> 00:00:17.740
control flow or communication,
or help me reduce my code?

5
00:00:18.840 --> 00:00:19.610
Okay?
So

6
00:00:19.610 --> 00:00:21.540
as we go forward, let’s think about that.

7
00:00:21.540 --> 00:00:24.630
So, I have kind of
a bonus mini-module here.

8
00:00:24.630 --> 00:00:27.860
It’s kind of a game changer for me.

9
00:00:27.860 --> 00:00:33.110
We’ve kind of talked about it internally
a few times, as I made some suggestions.

10
00:00:33.110 --> 00:00:38.350
But I just wanna surface this, because
one of the biggest things with managing

11
00:00:38.350 --> 00:00:43.460
state is moving from
this mutable mindset of,

12
00:00:43.460 --> 00:00:48.050
I have this thing I want to change and
I'm going to mutate this object directly.

13
00:00:48.050 --> 00:00:52.315
And instead,
doing it in a mutable fashion of,

14
00:00:52.315 --> 00:00:57.220
I need to make this change,
give me a brand new object or

15
00:00:57.220 --> 00:01:01.292
thing with these changes
already done to it.

16
00:01:01.292 --> 00:01:04.930
And what that does is,
if somebody is watching something,

17
00:01:04.930 --> 00:01:10.630
you're not directly changing it, but
you're actually just returning a new one.

18
00:01:10.630 --> 00:01:13.535
So one, you're not passing around this
reference to point to everything.

19
00:01:13.535 --> 00:01:18.943
But also, when you change let's
say a property on an object,

20
00:01:18.943 --> 00:01:23.210
and you wanna undo it,
well, how do you do that?

21
00:01:24.430 --> 00:01:28.290
Like, that's hard.
How do you undo a single property change?

22
00:01:28.290 --> 00:01:32.780
Or let's say you do five property changes,
and you wanna undo change one, two,

23
00:01:32.780 --> 00:01:33.384
and five.

24
00:01:33.384 --> 00:01:37.458
How do you wrap your mind around like
okay I need to back out five skip four,

25
00:01:37.458 --> 00:01:38.923
three, two and then one.

26
00:01:38.923 --> 00:01:40.223
Like, it just becomes very complicated.

27
00:01:40.223 --> 00:01:43.372
As opposed to if you had
five distinct objects,

28
00:01:43.372 --> 00:01:45.980
then you just start replacing it back.

29
00:01:47.640 --> 00:01:50.320
Yes?
&gt;&gt; Speaker 2: In the first three items

30
00:01:50.320 --> 00:01:52.848
where it say management control,
in-flow, and call-walling.

31
00:01:52.848 --> 00:01:57.072
So to manage all of that is there
a specific style-guide we should refer to?

32
00:01:57.072 --> 00:02:01.009
Or you should just keep that in mind and
go from there?

33
00:02:01.009 --> 00:02:07.711
Or are we saying that these are the three
or four application complexity types,

34
00:02:07.711 --> 00:02:14.320
and we should be able to address it
when we are defining the application.

35
00:02:14.320 --> 00:02:19.076
But there is no style guide for
it, there is no clear.

36
00:02:19.076 --> 00:02:20.364
&gt;&gt; Lucas Ruebbelke: So I think this is, so

37
00:02:20.364 --> 00:02:26.370
the question is, is there a style guide,
is there this canonical thing, to do it?

38
00:02:26.370 --> 00:02:30.229
And,
&gt;&gt; Lucas Ruebbelke: I don't think there's

39
00:02:30.229 --> 00:02:33.998
a certification that you go get,
I'm certified,

40
00:02:33.998 --> 00:02:36.960
complexity-free, at the same time.

41
00:02:36.960 --> 00:02:41.330
And so
this is a question that we had previously.

42
00:02:41.330 --> 00:02:43.291
And I'm just going to blend
them together real quick.

43
00:02:43.291 --> 00:02:46.941
So Mohammad why don't you just ask
the question we had this morning as we're

44
00:02:46.941 --> 00:02:48.115
talking before class.

45
00:02:48.115 --> 00:02:51.700
Cuz I think this will blend in to exactly
how I want to address that question.

46
00:02:51.700 --> 00:02:54.750
Speak loud and let's hear it.
&gt;&gt; Mohammad: I was just asking as

47
00:02:54.750 --> 00:02:57.820
a new developer looking at
the landscape of languages,

48
00:02:57.820 --> 00:03:01.880
what would you recommend to
focus on as far as Angular,

49
00:03:01.880 --> 00:03:06.970
React and short term and long term?
&gt;&gt; Lucas Ruebbelke: Yup, so

50
00:03:06.970 --> 00:03:09.580
what's interesting is we spent the last
two days talking about Angular.

51
00:03:10.920 --> 00:03:14.871
Now, I'm not actually
talking about Angular at all.

52
00:03:14.871 --> 00:03:18.510
I'm talking about how do
we build good applications.

53
00:03:19.760 --> 00:03:22.850
And so I think it's a blended approach.

54
00:03:22.850 --> 00:03:24.360
So, first and foremost,

55
00:03:24.360 --> 00:03:28.600
I think there's a lot to be said
about the different framers.

56
00:03:28.600 --> 00:03:30.130
Really for me kind of the two big players.

57
00:03:30.130 --> 00:03:35.734
I would say the three big players
is Angular, React, and View.

58
00:03:35.734 --> 00:03:38.986
And I guess I'll say Amber I don't want to
offend anybody if that's the framework you

59
00:03:38.986 --> 00:03:40.040
use and I'm not trying to.

60
00:03:40.040 --> 00:03:41.590
I'm just saying for me personally.

61
00:03:41.590 --> 00:03:47.590
When I think of Frameworks, you know it's
really kind of angular, react and view.

62
00:03:47.590 --> 00:03:50.395
There is opportunities for
everyone of those Frameworks.

63
00:03:50.395 --> 00:03:54.730
And so what I would recommend
to provide maximum value to

64
00:03:54.730 --> 00:03:59.260
a client is become as good as
you can on a single Framework.

65
00:03:59.260 --> 00:04:01.553
So being a really good angler developer,

66
00:04:01.553 --> 00:04:05.287
because there are opportunities
that are abound, when you go in and

67
00:04:05.287 --> 00:04:10.100
you are effective with angular at solving
a problem, you're providing value.

68
00:04:10.100 --> 00:04:11.120
Same way with React.

69
00:04:11.120 --> 00:04:14.180
Some of my friends are amazing
react developers, and they go,

70
00:04:14.180 --> 00:04:19.470
and that's the mechanism which they
provide maximum value to their client.

71
00:04:19.470 --> 00:04:22.690
So first and foremost,
pick something and be very,

72
00:04:22.690 --> 00:04:26.270
very good at it, be the best you can be.

73
00:04:26.270 --> 00:04:31.830
This is street level stuff, like how do I
build real things really, really, well?

74
00:04:32.840 --> 00:04:37.480
At the same time,
the things that make someone a great

75
00:04:37.480 --> 00:04:41.820
Angular developer really are not
Angular specific at all.

76
00:04:42.970 --> 00:04:45.980
Angular, React,
we did not invent programming.

77
00:04:45.980 --> 00:04:48.520
JavaScript did not invent programming.

78
00:04:48.520 --> 00:04:52.360
All of our best ideas that
we're doing right now,

79
00:04:52.360 --> 00:04:56.910
even like Redux is actually
a composite of two design patterns.

80
00:04:56.910 --> 00:04:58.070
What is in observable?

81
00:04:58.070 --> 00:05:02.230
It's a composite of two design patterns
that have been around for years.

82
00:05:02.230 --> 00:05:07.714
So to that end, and for, I would say, if
you want to have a kind of quote unquote,

83
00:05:07.714 --> 00:05:11.608
style guide,
is go read the classic programming books.

84
00:05:11.608 --> 00:05:14.240
For people that have been doing it for
30 years.

85
00:05:14.240 --> 00:05:19.194
So my all time favorite book for
this is Clean Code by Uncle Bob Martin.

86
00:05:19.194 --> 00:05:23.400
And as the whole thing is about Java I'm
reading this as a front end developer.

87
00:05:23.400 --> 00:05:24.200
I'm just like, my God.

88
00:05:24.200 --> 00:05:28.340
If I would have had this five years
ago it would have saved me four years.

89
00:05:29.630 --> 00:05:34.725
And so go and read the classic books,
like Pragmatic Programmer, Clean Code.

90
00:05:34.725 --> 00:05:37.190
I would ask you to read
anything from Bob Martin.

91
00:05:37.190 --> 00:05:39.880
Martin Fowler, Enterprise Design Patterns.

92
00:05:39.880 --> 00:05:44.852
And so go and start to become
a student of not a framework,

93
00:05:44.852 --> 00:05:49.213
but is being a craftsman and
a software engineer.

94
00:05:49.213 --> 00:05:53.782
And so what I'm saying this applies
to any application that you're doing.

95
00:05:53.782 --> 00:05:58.767
In fact like my cornerstones of how
I program are not angular specific at

96
00:05:58.767 --> 00:06:03.421
all like self documenting codes
single purpose methods You know,

97
00:06:03.421 --> 00:06:07.800
separation of insurance,
like these different things.

98
00:06:07.800 --> 00:06:08.999
Is you apply that to all of your code.

99
00:06:08.999 --> 00:06:10.580
So this is kinda what
we're talking about here.

