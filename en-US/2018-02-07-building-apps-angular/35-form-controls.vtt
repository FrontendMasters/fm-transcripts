WEBVTT

1
00:00:00.570 --> 00:00:03.810
&gt;&gt; Lukas Ruebbelke: So we're tracking
the value and the validation status.

2
00:00:03.810 --> 00:00:07.510
So FormControl, so this is ngModel,
basically it's doing this under the hood,

3
00:00:07.510 --> 00:00:13.450
implicitly, is creating value validation.

4
00:00:14.900 --> 00:00:18.080
Now we can group these
together in FormControl.

5
00:00:18.080 --> 00:00:22.280
So let's say, it's possible you could
have a form with one field, but

6
00:00:22.280 --> 00:00:26.820
more often than not you're going to
have multiple fields, aka FormControls.

7
00:00:26.820 --> 00:00:30.134
You can group them
together with FormGroup.

8
00:00:30.134 --> 00:00:34.201
So FormControl, FormGroup,
and so I will just say this.

9
00:00:34.201 --> 00:00:39.288
When I started to try to wrap my
mind around forms in Angular is that

10
00:00:39.288 --> 00:00:45.550
it's this kind of ascending kind of
level of things stacking on each other.

11
00:00:45.550 --> 00:00:47.210
FormControl is at the very bottom.

12
00:00:48.230 --> 00:00:50.520
And then FormGroup sits on top of that.

13
00:00:50.520 --> 00:00:51.670
You can also have FormErase.

14
00:00:51.670 --> 00:00:54.450
You can actually have
an array of FormControls.

15
00:00:54.450 --> 00:00:57.250
And then you have a top
level FormGroup for

16
00:00:57.250 --> 00:00:59.130
the entire form which is what
we're going to look at now.

17
00:01:00.770 --> 00:01:07.840
So, ngForm, so we have ngModel is for
a single control.

18
00:01:07.840 --> 00:01:13.980
ngForm is essentially the FormGroup, so
then it's just a group of FormControls.

19
00:01:13.980 --> 00:01:19.420
It's basically tracking the value in
the validation state of the entire form.

20
00:01:19.420 --> 00:01:22.516
So you just start to search FormControl,
FormGroup.

21
00:01:22.516 --> 00:01:25.030
And so
you can actually have sub-groups, but

22
00:01:25.030 --> 00:01:28.771
the big thing is every form has a top
level FormGroup that's tracking

23
00:01:28.771 --> 00:01:32.124
the state of the entire form.
&gt;&gt; Lukas Ruebbelke: So

24
00:01:32.124 --> 00:01:37.913
let's see what this looks like.
&gt;&gt; Lukas Ruebbelke: So we have formRef,

25
00:01:37.913 --> 00:01:42.691
so I'm trading a local
variable named formRef and

26
00:01:42.691 --> 00:01:46.000
I'm passing the value of ngForm.

27
00:01:47.920 --> 00:01:49.900
And so just like FormControl,

28
00:01:49.900 --> 00:01:55.500
it allows us to track the value of
the form and the validity of the form.

29
00:01:55.500 --> 00:02:02.246
So let's see what this looks like.
&gt;&gt; Lukas Ruebbelke: So

30
00:02:02.246 --> 00:02:09.482
in this case, our form, if I go,
&gt;&gt; Lukas Ruebbelke: myForm,

31
00:02:09.482 --> 00:02:16.195
so this is arbitrary, and we'll go ngForm.
&gt;&gt; Lukas Ruebbelke: Then

32
00:02:16.195 --> 00:02:18.319
we'll track.
&gt;&gt; Lukas Ruebbelke: And

33
00:02:18.319 --> 00:02:23.268
let me put require back on this.
&gt;&gt; Lukas Ruebbelke: I will say one

34
00:02:23.268 --> 00:02:26.664
thing real quick is that for formControls,

35
00:02:26.664 --> 00:02:32.100
if you're using ngModel, you need
to put the name property on there.

36
00:02:32.100 --> 00:02:37.830
So there needs to be a name property
on the element for that to work.

37
00:02:37.830 --> 00:02:39.980
So I've done ngModel model
without the name, and it's like,

38
00:02:39.980 --> 00:02:40.770
I don't know what to do.

39
00:02:40.770 --> 00:02:44.618
And so if that happens, make sure
that you have given your element or

40
00:02:44.618 --> 00:02:46.250
your input a name property.

41
00:02:46.250 --> 00:02:50.184
All right, so
now let's hop back into the browser and

42
00:02:50.184 --> 00:02:56.001
see what has happened.
&gt;&gt; Lukas Ruebbelke: So

43
00:02:56.001 --> 00:03:00.030
if I undo this,
this should be false, over here.

44
00:03:02.060 --> 00:03:05.650
But you'll notice that it's
just dumping the object out.

45
00:03:05.650 --> 00:03:10.500
So what I need to do here is do a json,
and

46
00:03:12.780 --> 00:03:19.630
let's just wrap this in some pretext here.

47
00:03:19.630 --> 00:03:25.426
So now you can see that it's actually
taking the form, the elements in it,

48
00:03:25.426 --> 00:03:32.280
the controls, it's actually parsing it
into a JSON object, which is interesting.

49
00:03:32.280 --> 00:03:33.690
Think about that.

50
00:03:33.690 --> 00:03:37.070
And when you get into Reactive forms
this becomes a little bit more important

51
00:03:37.070 --> 00:03:40.437
cuz a lot of times what you'll do
is you'll actually with ngModel,

52
00:03:40.437 --> 00:03:44.320
is you're affecting or
mutating a property on a single object.

53
00:03:45.340 --> 00:03:48.340
But what if you can
isolate that mutation and

54
00:03:48.340 --> 00:03:50.450
then just grab that object
whenever you need it?

55
00:03:50.450 --> 00:03:54.360
Well, it exists on the top
level FormControl.

56
00:03:54.360 --> 00:03:59.220
So right now, using template driven forms,
it mutates the model.

57
00:03:59.220 --> 00:04:00.280
Every time you change something,

58
00:04:00.280 --> 00:04:03.320
it is essentially mutating
the underlying data model.

59
00:04:04.440 --> 00:04:10.440
But you can still see that it does
indeed exist on the FormGroup as well.

60
00:04:12.120 --> 00:04:14.940
And so when we get into Reactive forms,
what we're doing is we're saying,

61
00:04:14.940 --> 00:04:17.730
we're just doing a clean separation.

62
00:04:17.730 --> 00:04:20.600
Saying, we're adjusting this form, but
we're not actually going to write it back

63
00:04:20.600 --> 00:04:23.610
to the model until some
predetermined event.

64
00:04:23.610 --> 00:04:28.940
But you're very explicit, so
this is really handy for data mutability.

65
00:04:28.940 --> 00:04:31.189
So if I delete this,
you can see that this is false.

66
00:04:32.330 --> 00:04:32.980
It is required.

67
00:04:32.980 --> 00:04:34.030
Put it back in.

68
00:04:34.030 --> 00:04:34.530
It's true.

69
00:04:36.325 --> 00:04:41.760
So FormControl, FormGroup using ngForm,
we get reference to the top

70
00:04:41.760 --> 00:04:46.700
level FormGroup control
that gives us access to

71
00:04:48.480 --> 00:04:52.970
the entire one, the data model for
it as well as if it's valid or not.

72
00:04:54.040 --> 00:04:57.010
Then what I can do,
I'll just take this one step further.

73
00:04:58.620 --> 00:05:04.147
Is if we go here, on the Submit button,

74
00:05:04.147 --> 00:05:06.995
disable, my form,

75
00:05:06.995 --> 00:05:11.874
we'll say,
&gt;&gt; Lukas Ruebbelke: That's

76
00:05:11.874 --> 00:05:16.684
not valid.
&gt;&gt; Lukas Ruebbelke: Oops,

77
00:05:16.684 --> 00:05:21.598
then disable this.
&gt;&gt; Lukas Ruebbelke: You

78
00:05:21.598 --> 00:05:25.820
can see now it's false and
I can't save it.

79
00:05:27.030 --> 00:05:31.767
That's good
&gt;&gt; Lukas Ruebbelke: True,

80
00:05:31.767 --> 00:05:39.430
I can click this button.
&gt;&gt; Lukas Ruebbelke: Does that make sense?

81
00:05:39.430 --> 00:05:45.740
So now, just when you think of forms,
value, valid.

82
00:05:45.740 --> 00:05:46.870
Is it valid?

83
00:05:46.870 --> 00:05:47.770
What is the underlying values?

84
00:05:48.930 --> 00:05:51.920
We do that with FormControls and
FormGroups.

85
00:05:51.920 --> 00:05:54.585
Or specifically, you would generally
work just directly with the top level

86
00:05:54.585 --> 00:05:58.600
FormGroup.
&gt;&gt; Lukas Ruebbelke: But

87
00:05:58.600 --> 00:06:03.472
I think the fact that Angular is
actually keeping track of all this for

88
00:06:03.472 --> 00:06:06.080
us under the hood is sweet, thanks.

89
00:06:06.080 --> 00:06:09.850
If you've ever done a similar thing
with like jQuery back in the day,

90
00:06:09.850 --> 00:06:11.696
they're essentially the same.

91
00:06:11.696 --> 00:06:14.671
Any time somebody submitted something or
did something, you'd have to actually go

92
00:06:14.671 --> 00:06:20.120
and parse the dom, pull the data
out of it, and really tricky.

93
00:06:20.120 --> 00:06:24.140
I mean, one of the big things with
Angular One is that you can actually

94
00:06:24.140 --> 00:06:26.750
bind an object directly to the form and

95
00:06:26.750 --> 00:06:29.040
you didn't have to actually go and
pull this data out of the dom,

96
00:06:29.040 --> 00:06:32.750
which is a horrible place to actually
have application status in the dom.

97
00:06:32.750 --> 00:06:33.620
It's the worst.

98
00:06:35.100 --> 00:06:39.400
So with that said, I think,
I've been kind of doing

99
00:06:39.400 --> 00:06:43.108
the demonstration as I've went along.
&gt;&gt; Lukas Ruebbelke: Yeah, so

100
00:06:43.108 --> 00:06:48.595
formRef.value valid, and
this whole pre-curly braces JSON just,

101
00:06:48.595 --> 00:06:54.120
if anybody got a tattoo on their forearms,
you just remember that.

102
00:06:54.120 --> 00:06:57.060
I use it all the time, super valuable.

103
00:06:57.060 --> 00:07:00.520
And I'll mention this again when
we talk about debugging is,

104
00:07:00.520 --> 00:07:03.050
this is just the easiest way to
dump something out to the stage.

105
00:07:03.050 --> 00:07:07.480
I just use the pretext, so just leave
it in as pre-existing formatting.

106
00:07:07.480 --> 00:07:10.960
And then just turn it into
a JSON structure that I

107
00:07:10.960 --> 00:07:15.610
can dump out.
&gt;&gt; Lukas Ruebbelke: So

108
00:07:15.610 --> 00:07:21.512
then what you can also do is group
elements together using ngModelGroup,

109
00:07:21.512 --> 00:07:26.169
and so you can see here,
let's say you had cuz you saw how to

110
00:07:26.169 --> 00:07:31.540
automatically turn that into an object,
using form rev.value.

111
00:07:31.540 --> 00:07:36.510
Well, if you wanted to kind of massage
that object to match something in your

112
00:07:36.510 --> 00:07:42.255
actual domain, in other words,
you have another user and I want the name

113
00:07:42.255 --> 00:07:46.560
to be name and then first and
last address or whatever.

114
00:07:46.560 --> 00:07:50.520
So you want it to actually create a little
bit of a hierarchy to maybe match the data

115
00:07:50.520 --> 00:07:52.620
structure at the back end.

116
00:07:52.620 --> 00:07:56.030
So using things like ModelGroup and
FormGroup,

117
00:07:56.030 --> 00:07:59.750
you can actually nest these things
in there to have the form exactly

118
00:07:59.750 --> 00:08:03.250
produce the object that you're working
with in the rest of your application.

119
00:08:05.290 --> 00:08:08.920
So you can see here that it's
actually creating a user property and

120
00:08:08.920 --> 00:08:10.710
then attaching the object to that.

