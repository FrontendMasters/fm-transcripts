WEBVTT

1
00:00:00.230 --> 00:00:04.803
&gt;&gt; Lukas Ruebbelke: We're going to talk
about the Basic Observable Sequence,

2
00:00:04.803 --> 00:00:09.210
Observable.map, Observable.filter and
etcetera.

3
00:00:09.210 --> 00:00:11.220
So I'll explain what that means.

4
00:00:11.220 --> 00:00:14.940
So when people think of Observables,
most people,

5
00:00:14.940 --> 00:00:18.810
generally the reaction is like,
yeah I hear about those, those are hard.

6
00:00:18.810 --> 00:00:20.800
Or I try to do them they're hard.

7
00:00:20.800 --> 00:00:26.355
The problem is that most
people fail to distinguish

8
00:00:26.355 --> 00:00:30.875
all of the operators that are provided via

9
00:00:30.875 --> 00:00:36.370
RxJS from the observable stream itself.

10
00:00:36.370 --> 00:00:41.441
And so we're going to first talk about
the observable stream and from there,

11
00:00:41.441 --> 00:00:46.044
we're gonna start with some very
simple operators that map filter and

12
00:00:46.044 --> 00:00:49.164
then we'll kinda get into
the few other ones but

13
00:00:49.164 --> 00:00:54.810
let's just see how things pan out, the big
thing is that we understand the sequence.

14
00:00:56.710 --> 00:01:00.950
And map which we've already seen, I think
we have intuitively kind of a sense what

15
00:01:00.950 --> 00:01:04.340
that does and then we'll kind of go
filter and we'll build on top of that.

16
00:01:04.340 --> 00:01:05.990
I think this will be kind
of the last module for

17
00:01:05.990 --> 00:01:09.450
the day but this to me is a game changer.

18
00:01:10.720 --> 00:01:15.190
So, when I say observables,
I'll use this kind of interchangeably.

19
00:01:15.190 --> 00:01:20.660
Is, talking about the observable pattern,
but also at the same

20
00:01:20.660 --> 00:01:26.590
time talking about reactive extensions and
more so, more specifically RxJS.

21
00:01:27.730 --> 00:01:31.952
And so you have the reactive extensions
that pretty much are in like Java,

22
00:01:31.952 --> 00:01:33.909
C#, Python, all these different things.

23
00:01:35.180 --> 00:01:38.750
We are interested in
the JavaScript version.

24
00:01:38.750 --> 00:01:41.320
So when I say observables,
for all intents and purposes,

25
00:01:41.320 --> 00:01:47.280
I'm talking about the actual object, but
also the operators that comes with it and

26
00:01:47.280 --> 00:01:49.620
those are at this URL if
you want to check it out.

27
00:01:49.620 --> 00:01:54.170
There's just a ton of them,
but I'm referring to RxJS.

28
00:01:54.170 --> 00:01:59.910
Now, observable

29
00:01:59.910 --> 00:02:04.170
is actually the combination of
two classic design patterns.

30
00:02:05.350 --> 00:02:10.340
And the two patterns are the Iterator
Pattern, and the Observer Pattern.

31
00:02:11.520 --> 00:02:15.410
And they were created to do two things.

32
00:02:16.860 --> 00:02:22.484
So the iterator pattern is
designed to communicate state.

33
00:02:22.484 --> 00:02:24.509
So if you have something and

34
00:02:24.509 --> 00:02:30.233
its in iterator you would say give me
the next value, give me the next value and

35
00:02:30.233 --> 00:02:34.750
so essentially you can pull
state off of an iterator Object.

36
00:02:34.750 --> 00:02:38.380
Now you have the observer pattern,
and what that is good for

37
00:02:38.380 --> 00:02:42.540
is communicating that something has
happened in the distant future.

38
00:02:44.360 --> 00:02:48.100
And, what they realized, and
Jeff [INAUDIBLE] talks about this

39
00:02:48.100 --> 00:02:53.160
quite eloquently, is that we can
actually take these two patterns,

40
00:02:53.160 --> 00:02:58.840
combine them together and
use them to communicate state

41
00:02:58.840 --> 00:03:03.790
over time, which is, in the context
of an asynchronous environment,

42
00:03:03.790 --> 00:03:06.620
that is, JavaScript, this is really handy.

43
00:03:07.660 --> 00:03:12.620
For instance, with Firebase and in the web
saga and in kinds of these streams,

44
00:03:12.620 --> 00:03:16.340
the ability to communicate like hey this
thing has changed, this thing has changed,

45
00:03:16.340 --> 00:03:20.320
this thing has changed,
as time progresses is really valuable.

46
00:03:21.850 --> 00:03:23.370
And so by communicating or

47
00:03:23.370 --> 00:03:28.260
combining these two patterns, we have
what is called the observable stream.

48
00:03:28.260 --> 00:03:33.960
And so as time progresses, we have these
events that we can then capture and

49
00:03:33.960 --> 00:03:37.682
communicate them to our consumers.

50
00:03:37.682 --> 00:03:43.250
And so communicating kinda
values over time is not

51
00:03:43.250 --> 00:03:49.230
necessarily a new concept
in terms of a promise.

52
00:03:49.230 --> 00:03:50.960
So if you've ever used a promise,

53
00:03:50.960 --> 00:03:54.760
you are familiar with this idea
that at some point in the future,

54
00:03:54.760 --> 00:03:59.480
something is going to happen, I'm going
to communicate that value to you.

55
00:04:01.310 --> 00:04:02.640
And so this is asynchronous.

56
00:04:02.640 --> 00:04:03.620
So synchronously,

57
00:04:03.620 --> 00:04:08.420
we have a function that basically call
the function, immediately get the return.

58
00:04:08.420 --> 00:04:11.190
Or you can get multiple
values using an enumerable.

59
00:04:12.190 --> 00:04:16.188
But in our case, asynchronously,
which most things in JavaScript are,

60
00:04:16.188 --> 00:04:22.560
we're really used to the single
value asynchronously over time.

61
00:04:22.560 --> 00:04:25.380
The difference is,
that with an observable,

62
00:04:25.380 --> 00:04:29.196
we get multiple values over time.

63
00:04:29.196 --> 00:04:36.630
Also, and this is pretty interesting,
that with a promise being resolved,

64
00:04:37.840 --> 00:04:42.530
that that promise actually pushes
the value to the consumer.

65
00:04:42.530 --> 00:04:45.610
So in other words instead of doing a call
back and saying I'm relinquishing control

66
00:04:45.610 --> 00:04:49.740
by sending in this function that you
are then going to call when you're done,

67
00:04:50.740 --> 00:04:52.520
is that we're actually going
to perform this operation and

68
00:04:52.520 --> 00:04:55.770
give you the result of the operation that
you can then handle however you see fit.

69
00:04:56.940 --> 00:05:01.840
And so what that does is it's actually
pushing the value to the consumer.

70
00:05:01.840 --> 00:05:06.150
Now, observables are the exact same way.

71
00:05:06.150 --> 00:05:09.680
Then instead of waiting for something to
happen, we're pulling, like did it happen?

72
00:05:09.680 --> 00:05:10.660
Did it happen?

73
00:05:10.660 --> 00:05:15.310
When something happens, the observable
stream will then push it too you.

74
00:05:16.420 --> 00:05:21.680
And so being able to be notified, no muss,
no fuss that something has changed

75
00:05:21.680 --> 00:05:26.630
is really, really convenient, especially
when you're trying to communicate for

76
00:05:26.630 --> 00:05:29.500
instance state change
through an application.

77
00:05:29.500 --> 00:05:32.760
So one of the questions that kind of comes
up when you start looking at kind of

78
00:05:32.760 --> 00:05:37.710
architecture is if I have state that
is consumed in multiple places,

79
00:05:39.140 --> 00:05:41.340
and it changes in one place or

80
00:05:41.340 --> 00:05:45.100
it needs to change, how do I communicate
that to the rest of the app?

81
00:05:46.280 --> 00:05:51.480
Well, if they're consuming that data via
an observable stream, you don't have to.

82
00:05:51.480 --> 00:05:53.740
Like it'll tell you,
the observable will say, hey,

83
00:05:53.740 --> 00:05:59.630
this thing updated, go ahead and take
the new value and do something with it.

84
00:05:59.630 --> 00:06:05.370
So the idea of multiple values
being pushed to you over time,

85
00:06:05.370 --> 00:06:09.030
this is quite frankly,
kind of is a game changer.

86
00:06:10.250 --> 00:06:13.890
Because we're used to pulling values via
callback and we're also used to getting

87
00:06:13.890 --> 00:06:19.900
a single value push to us but
to get many values over time?

88
00:06:19.900 --> 00:06:21.320
That's kind of a big deal.

