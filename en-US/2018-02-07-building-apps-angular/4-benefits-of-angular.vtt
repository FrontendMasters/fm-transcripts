WEBVTT

1
00:00:00.450 --> 00:00:03.310
&gt;&gt; Lukas Ruebbelke: So
let's talk about the big picture.

2
00:00:03.310 --> 00:00:05.530
Think of this as the cheat sheet module.

3
00:00:05.530 --> 00:00:08.870
I think before we get into the what,
I'm gonna just take a few slides,

4
00:00:08.870 --> 00:00:11.080
I'm gonna talk about the why.

5
00:00:11.080 --> 00:00:13.870
And this is why Angular,
according to Lucas.

6
00:00:13.870 --> 00:00:17.009
I've been doing it for over five years.

7
00:00:17.009 --> 00:00:23.924
And with Angular 2+ and above, here are
the things that really kind of stand out.

8
00:00:23.924 --> 00:00:29.080
When I talk about why I love angular,
why I use it, here's some of the reasons.

9
00:00:29.080 --> 00:00:35.030
So one is that we have well
defined best practices.

10
00:00:35.030 --> 00:00:42.810
So if you've done angular 1.x and
this is like 0.9, 1, 1.1.

11
00:00:42.810 --> 00:00:49.080
The beginning stages of Angular,
and the Angular team will admit

12
00:00:49.080 --> 00:00:54.120
that they didn't really understand how to
build JavaScript applications at scale.

13
00:00:54.120 --> 00:00:57.820
And so, some of the ideas that they had
even from the official documentation

14
00:00:57.820 --> 00:00:59.280
was just wrong.

15
00:00:59.280 --> 00:01:02.740
And they'll admit it like,
if we could do the way back machine,

16
00:01:02.740 --> 00:01:05.230
one of the things they said is put
all your controllers in a folder,

17
00:01:05.230 --> 00:01:08.790
put all your services in a folder, and
there was no concept of component driven

18
00:01:08.790 --> 00:01:11.840
architecture which create
a lot of problems.

19
00:01:13.080 --> 00:01:18.470
Over the course of people starting to
build things and learning from pain,

20
00:01:18.470 --> 00:01:23.750
and solving these problems,
some best practices started to emerge.

21
00:01:23.750 --> 00:01:26.085
And so,
this is when you saw the style guide.

22
00:01:26.085 --> 00:01:29.550
John Papa's style guide,
Todd Model style guide.

23
00:01:29.550 --> 00:01:31.230
Then the Angular team kind
of conversed and said,

24
00:01:31.230 --> 00:01:33.150
we're gonna make this an official thing.

25
00:01:33.150 --> 00:01:37.070
And then with Angular 2 and above,
there's also a style guide for that.

26
00:01:37.070 --> 00:01:42.557
But it's community driven and
a bunch of really smart people are saying,

27
00:01:42.557 --> 00:01:45.487
this is the way to build an Angular app.

28
00:01:45.487 --> 00:01:49.847
And because we have Angular CLI
that as best practices emerge,

29
00:01:49.847 --> 00:01:52.491
that they just get baked into the CLI.

30
00:01:52.491 --> 00:01:56.682
So if you've ever done one CLI project and
you come into another one,

31
00:01:56.682 --> 00:01:59.920
the shape is immediately recognizable.

32
00:01:59.920 --> 00:02:04.050
And so, on one end it's not like,
what do you want it to be?

33
00:02:04.050 --> 00:02:07.178
Whatever, so this was I think one
of the challenges with Backbone

34
00:02:07.178 --> 00:02:11.650
initially is like,
are you an NVC or what are you?

35
00:02:11.650 --> 00:02:14.240
And Backbone was just like,
whatever you want, we don't care.

36
00:02:14.240 --> 00:02:16.130
You define the structure.

37
00:02:16.130 --> 00:02:21.340
At the same time, some other
frameworks they were super restrictive.

38
00:02:21.340 --> 00:02:24.380
Like, you have to do it this way or
it's the highway.

39
00:02:24.380 --> 00:02:27.380
And so, what I like about Angular is
they have well-defined best practices,

40
00:02:27.380 --> 00:02:30.340
but if you just say,
I don't agree with this.

41
00:02:30.340 --> 00:02:32.390
This doesn't make sense for our situation.

42
00:02:32.390 --> 00:02:35.670
You can move on, you can kind of
work around that to suit your needs.

43
00:02:35.670 --> 00:02:39.100
But the fact that there are opinions from
a large group of people that are very

44
00:02:39.100 --> 00:02:43.270
smart, and they kind of agreed this is
the way to build large scale applications.

45
00:02:45.060 --> 00:02:49.030
If you're coming in,
be happy that this exists.

46
00:02:49.030 --> 00:02:50.560
When it didn't,
it was just the wild west and

47
00:02:50.560 --> 00:02:51.970
people just did all sorts of crazy things.

48
00:02:54.540 --> 00:02:58.560
Secondly, is if anybody's ever tried
to set up a development workflow,

49
00:02:58.560 --> 00:03:00.570
especially in JavaScript.

50
00:03:00.570 --> 00:03:03.050
And so, we have some of
these things here like .NET.

51
00:03:03.050 --> 00:03:07.100
And in Java with like Maven and Jenkins,
and you'll continue this integration.

52
00:03:07.100 --> 00:03:10.969
And so, there's kind of this mature
ecosystem around how you set up and

53
00:03:10.969 --> 00:03:14.080
build a Java project or
a C# project, or .NET project.

54
00:03:15.730 --> 00:03:20.728
Every major framework is kind of suffering
from, I would thing JavaScript fatigue.

55
00:03:20.728 --> 00:03:25.530
It's like there's so many moving pieces,
and getting them all to know the secret

56
00:03:25.530 --> 00:03:28.325
handshake in working
together is quite a task.

57
00:03:28.325 --> 00:03:35.530
I mean, we could do a entire two day
workshop just on development workflows.

58
00:03:35.530 --> 00:03:39.711
Thankfully, the Angular
team has invested tons and

59
00:03:39.711 --> 00:03:42.656
tons of times into the Angular CLI and

60
00:03:42.656 --> 00:03:48.466
just streamlined a lot of those really
messy pieces, and ng new, boom.

61
00:03:48.466 --> 00:03:52.180
You have a totally working
front-end project.

62
00:03:52.180 --> 00:03:54.764
I can just say, for me,
if I have to set that up by hand,

63
00:03:54.764 --> 00:03:56.830
it would take me two days.

64
00:03:56.830 --> 00:03:58.200
It is very tedious.

65
00:03:58.200 --> 00:04:00.810
They streamlined a lot of that for you.

66
00:04:00.810 --> 00:04:04.150
When you do a production build,
ng build, done.

67
00:04:04.150 --> 00:04:07.699
You wanna do static analysis?

68
00:04:07.699 --> 00:04:11.970
NGtest or /CC, or -CC, done.

69
00:04:11.970 --> 00:04:15.913
And so, these streamlined pieces where
we can focus on writing code and

70
00:04:15.913 --> 00:04:17.096
building features,

71
00:04:17.096 --> 00:04:21.318
and not having to worry about the moving
pieces is really really important.

72
00:04:21.318 --> 00:04:24.419
The last thing you wanna do is get bogged
down by things that actually have nothing

73
00:04:24.419 --> 00:04:25.238
to do with your code,

74
00:04:25.238 --> 00:04:27.813
it's just you're trying to get
your environment up and running.

75
00:04:29.304 --> 00:04:33.523
&gt;&gt; Lukas Ruebbelke: And there is a rich
ecosystem, so starting with Angular

76
00:04:33.523 --> 00:04:39.910
material and the fact that we have
material design, which I'm a huge fan of.

77
00:04:39.910 --> 00:04:45.281
That we have Angular officially
supported components

78
00:04:45.281 --> 00:04:50.422
that inherited material
design is a real value add.

79
00:04:50.422 --> 00:04:55.222
Not only that, it's that they're doing
a component kit where you can have all of

80
00:04:55.222 --> 00:04:59.336
the guts of the components without
the material design and styling.

81
00:04:59.336 --> 00:05:03.376
If you for some reason you don't wanna
go in that direction, the Angular team

82
00:05:03.376 --> 00:05:07.810
has invested a lot of time into building
even just a, the material components.

83
00:05:07.810 --> 00:05:10.320
And then just components
without the material piece.

84
00:05:10.320 --> 00:05:12.530
So the fact that you can get up and
running and

85
00:05:12.530 --> 00:05:15.230
you're not having to
spin up a date picker.

86
00:05:15.230 --> 00:05:17.400
I think, Mark actually wrote on one time.

87
00:05:17.400 --> 00:05:19.090
And it really made him famous.

88
00:05:19.090 --> 00:05:20.730
Something I would
definitely not wanna write.

89
00:05:20.730 --> 00:05:23.100
And more importantly, it's not
something that I would wanna support.

90
00:05:23.100 --> 00:05:28.821
So the fact that you get that right
out of the box saves me a lot of time,

91
00:05:28.821 --> 00:05:30.112
and I'm lazy.

92
00:05:30.112 --> 00:05:35.123
And with Angular 1,
I think there is 50 or 80,

93
00:05:35.123 --> 00:05:39.680
there's just a ton of
directives in Angular.

94
00:05:39.680 --> 00:05:42.817
It's kind of inserting itself
into the DOM at every point,

95
00:05:42.817 --> 00:05:46.790
like there's a custom handler for
a click or a mouse-over, or whatever.

96
00:05:46.790 --> 00:05:52.190
With Angular 2 and
above is they really focused on standards,

97
00:05:52.190 --> 00:05:55.560
and letting JavaScript,
TypeScript do the work.

98
00:05:55.560 --> 00:05:59.014
And so we'll see this, and
I'll point this out through

99
00:05:59.014 --> 00:06:03.293
the workshop that the majority of
what you write is just JavaScript.

100
00:06:03.293 --> 00:06:06.111
And so once we see components and
compare them to services, and

101
00:06:06.111 --> 00:06:07.292
these different things.

102
00:06:07.292 --> 00:06:11.290
You'll see like, it's just an ES6 class or
it's a TypeScript class.

103
00:06:11.290 --> 00:06:13.190
And I'll use those kind
of interchangeably.

104
00:06:13.190 --> 00:06:18.180
But because they let standards do
the work, we have half the framework but

105
00:06:18.180 --> 00:06:19.060
with twice the power.

106
00:06:20.120 --> 00:06:25.370
And that is, again,
you can pick something up that is

107
00:06:25.370 --> 00:06:30.990
Angular and just pull the Angular piece
out, and you can use it as a standalone.

108
00:06:30.990 --> 00:06:34.475
It's a very, very small footprint in your
application, which I think is critical.

109
00:06:36.263 --> 00:06:39.290
&gt;&gt; Lukas Ruebbelke: Yes, so
this gets the googly eyes.

110
00:06:39.290 --> 00:06:43.520
They built the entire framework
to be reactive, and so

111
00:06:43.520 --> 00:06:46.470
this is first class support for
observables.

112
00:06:46.470 --> 00:06:48.760
We'll talk about that a bit tomorrow, but

113
00:06:48.760 --> 00:06:53.520
the point is when something changes, how
do you know about it in your application?

114
00:06:53.520 --> 00:06:57.180
More importantly, is if you have two
things that are looking at a single piece

115
00:06:57.180 --> 00:07:00.890
of data, how do you communicate
state change into your application?

116
00:07:00.890 --> 00:07:07.670
That's a really tricky thing that a lot of
people including myself have gotten wrong.

117
00:07:07.670 --> 00:07:11.610
Usually what happens is you end up
resulting to shared beautible state,

118
00:07:11.610 --> 00:07:16.410
which is then just a powder keg waiting
to happen, like that is the devil.

119
00:07:16.410 --> 00:07:18.810
But by using observables,

120
00:07:18.810 --> 00:07:23.720
you can communicate state change
throughout your application effortlessly.

121
00:07:23.720 --> 00:07:27.590
And so, we'll see some of that
a little bit later, probably tomorrow.

122
00:07:27.590 --> 00:07:33.010
But that it's just baked right in,
again using observables to do the work.

123
00:07:33.010 --> 00:07:35.980
And you can just like, we don't need to
do this, let's let observables do it.

124
00:07:37.400 --> 00:07:42.797
And last but not least,
this also gets a big googly eyes,

125
00:07:42.797 --> 00:07:47.644
is you may remember it like three,
four years ago.

126
00:07:47.644 --> 00:07:54.051
The conversation around
frameworks was really really,

127
00:07:54.051 --> 00:07:57.525
I think caustic and negative.

128
00:07:57.525 --> 00:08:01.003
There was a lot of like, this framework
could beat up your framework, and

129
00:08:01.003 --> 00:08:03.950
this framework works better
than this framework.

130
00:08:03.950 --> 00:08:09.520
And I think most people realize that
this is not the right question.

131
00:08:09.520 --> 00:08:14.840
It's about building things that
ultimately, we can use better.

132
00:08:14.840 --> 00:08:19.080
For instance, Angular, we don't need to
create our own version of JavaScript.

133
00:08:19.080 --> 00:08:21.380
Let's work with the TypeScript team.

134
00:08:21.380 --> 00:08:22.560
All the better, and

135
00:08:22.560 --> 00:08:26.744
I think the entire web community is
one because of that collaboration.

136
00:08:26.744 --> 00:08:31.563
So Dojo, which is a framework,
I think people sometimes forget exist,

137
00:08:31.563 --> 00:08:33.148
a very good framework.

138
00:08:33.148 --> 00:08:38.089
Dylan Schiemann actually lives in Phoenix,
and they're doing their entire framework

139
00:08:38.089 --> 00:08:43.720
the next version of Dojo in TypeScript,
because it's just such a great technology.

140
00:08:43.720 --> 00:08:48.470
And so, being able to pull TypeScript into
kind of the forefront is a good thing.

141
00:08:48.470 --> 00:08:50.370
The Angular CLI, where did that come from?

142
00:08:50.370 --> 00:08:52.830
Well, from the Ember CLI.

143
00:08:52.830 --> 00:08:56.341
And so instead of Ember fighting
Angular they got together and said,

144
00:08:56.341 --> 00:08:59.610
look how do we build something
that can benefit everybody?

145
00:08:59.610 --> 00:09:03.700
Even component-driven architecture, it
would be, I mean, obviously hats goes off

146
00:09:03.700 --> 00:09:07.840
to React for really driving
component-driven architecture.

147
00:09:07.840 --> 00:09:10.270
And then the Angular team wisely
kind of said that and said,

148
00:09:10.270 --> 00:09:11.940
well this is where it's going.

149
00:09:11.940 --> 00:09:14.940
Let's take some of those ideas and
work it into our framework.

150
00:09:14.940 --> 00:09:17.800
And a lot of the people on the React team,

151
00:09:17.800 --> 00:09:21.000
the Ember team, Angular team,
they talk they collaborate.

152
00:09:21.000 --> 00:09:24.410
I think it's just a much
better place to be.

153
00:09:24.410 --> 00:09:25.730
And you know to that end,

154
00:09:25.730 --> 00:09:29.604
I don't think you'll ever hear me say
something bad about another framework.

155
00:09:29.604 --> 00:09:35.760
And so a lot of I get this a lot of
Angular versus React question a lot,

156
00:09:35.760 --> 00:09:38.890
and ultimately I think they're
both great frameworks.

157
00:09:38.890 --> 00:09:41.970
And it comes down to how do
you want to solve the problem?

158
00:09:41.970 --> 00:09:44.170
What makes the most sense for
you and your team?

159
00:09:44.170 --> 00:09:47.247
Because they're philosophically
a little different, but

160
00:09:47.247 --> 00:09:49.305
I think they do the same thing very well.

161
00:09:49.305 --> 00:09:54.263
So that is a big, huge plus one for me.

162
00:09:54.263 --> 00:09:57.400
This is seeing everybody moving in
the same direction and not fighting.

