WEBVTT

1
00:00:00.190 --> 00:00:03.464
&gt;&gt; Lukas Ruebbelke: So an input allows
data to flow from a parent component to

2
00:00:03.464 --> 00:00:04.657
a child component.

3
00:00:04.657 --> 00:00:09.190
And we use the input directive or
decorator to do this.

4
00:00:09.190 --> 00:00:11.434
So we'll see this in the child component.

5
00:00:11.434 --> 00:00:16.236
So in the child component,
we're defining input [someValue].

6
00:00:16.236 --> 00:00:19.487
Then on the parent template,

7
00:00:19.487 --> 00:00:24.956
we then expose that as a property and
we bind to it.

8
00:00:24.956 --> 00:00:28.388
Now, if you wanted to bind to
it as one name in the parent and

9
00:00:28.388 --> 00:00:33.096
then have it reference internally as
something else, you can create an alias.

10
00:00:33.096 --> 00:00:38.048
This is actually not recommended, but if
you needed to for some reason, you could.

11
00:00:38.048 --> 00:00:42.901
The point is on the child you say,
here's my input using the input decorator.

12
00:00:42.901 --> 00:00:48.820
And then now that is a property that's
available to the parent to bind to.

13
00:00:48.820 --> 00:00:51.632
So, let's look at this code here.

14
00:00:51.632 --> 00:00:58.456
We have MyComponent, and
I'm trading an Input of greeting.

15
00:00:58.456 --> 00:01:00.309
So it's even being defined as a property.

16
00:01:00.309 --> 00:01:02.858
I'm defining a property
called greeting and

17
00:01:02.858 --> 00:01:05.212
I'm exposing it via the input metadata.

18
00:01:08.667 --> 00:01:12.685
&gt;&gt; Lukas Ruebbelke: And then you notice
this property is also available internally

19
00:01:12.685 --> 00:01:14.442
to the child to be bound to.

20
00:01:14.442 --> 00:01:19.246
So tnhe rules of binding,
internally they still work.

21
00:01:19.246 --> 00:01:22.164
But, now on the parent component,

22
00:01:22.164 --> 00:01:27.611
because we created a greeting input
in the parent template we say,

23
00:01:27.611 --> 00:01:33.659
I wanna bind to this property or this
input and I'm going to set it to this.

24
00:01:33.659 --> 00:01:38.282
So you can see here they're setting it,
and so when this gets rendered the child

25
00:01:38.282 --> 00:01:43.458
component's gonna say what property do you
have for me, it's like well, Hello child.

26
00:01:43.458 --> 00:01:46.849
We'll take that and that's what
it'll bind to in the child template.

27
00:01:46.849 --> 00:01:52.078
So it's taking the value from the parent
and binding to it in the child.

28
00:01:53.794 --> 00:01:58.054
&gt;&gt; Lukas Ruebbelke: So
output does the reverse, it exposes

29
00:01:58.054 --> 00:02:03.870
an EventEmitter property so
that it can emit events.

30
00:02:03.870 --> 00:02:08.643
So just like when you click,
the DOM is emitting a click event.

31
00:02:08.643 --> 00:02:13.443
By using EventEmitter we can
create our own custom events.

32
00:02:13.443 --> 00:02:18.519
So inside a child component,
using the output decorator,

33
00:02:18.519 --> 00:02:23.392
we're going to create an event
called showValue, and so

34
00:02:23.392 --> 00:02:26.861
we instantiate it to New EventEmitter.

35
00:02:26.861 --> 00:02:31.793
And so now, essentially we've got
this EventEmitter in place that

36
00:02:31.793 --> 00:02:35.872
when we're ready to fire it off,
then we'll admit it.

37
00:02:35.872 --> 00:02:39.204
But on the parent, all we know is
that we have an output of some value.

38
00:02:39.204 --> 00:02:43.124
And when this thing emits its event or
it fires,

39
00:02:43.124 --> 00:02:47.831
we're gonna call handle value
on the parent component.

40
00:02:47.831 --> 00:02:53.210
So here you can see that I have greeter,

41
00:02:53.210 --> 00:02:55.987
new EventEmitter.

42
00:02:55.987 --> 00:03:00.673
And then when somebody clicks on
the template we're calling greet,

43
00:03:00.673 --> 00:03:05.291
which then calls this.greeter.emit,
and it emits this string.

44
00:03:05.291 --> 00:03:08.025
And then on the parent component,

45
00:03:08.025 --> 00:03:13.398
it's saying whenever greeter fires
call greet and pass the event,

46
00:03:13.398 --> 00:03:18.506
or whatever you pass up into
the parent component for handling.

47
00:03:18.506 --> 00:03:21.840
Now I will say this has
kind of bit me a few times.

48
00:03:21.840 --> 00:03:26.509
Is that when you're using
an output the parameter for

49
00:03:26.509 --> 00:03:30.462
the method that you called,
has to be event.

50
00:03:30.462 --> 00:03:32.167
So that's just kinda the way it works.

51
00:03:32.167 --> 00:03:35.480
So it's event on the template but then in,

52
00:03:35.480 --> 00:03:41.016
you can pass whatever you want when
you call emit but this has to be here.

53
00:03:41.016 --> 00:03:44.880
For whatever reasons, I just had
to go honking on it like give up,

54
00:03:44.880 --> 00:03:47.007
I'm just going back dollar event.

55
00:03:47.007 --> 00:03:49.531
And because you are in
a sense passing an event,

56
00:03:49.531 --> 00:03:53.140
a custom event that then once it
gets into your parent totally fine.

