WEBVTT

1
00:00:00.300 --> 00:00:02.030
&gt;&gt; Lucas Ruebbelke: Let's look
at the challenge first and

2
00:00:02.030 --> 00:00:06.730
then, I will fill in the blanks
of anything that I need to do.

3
00:00:09.540 --> 00:00:15.345
So one thing we are going to do, because
I do not want anybody into the wids and

4
00:00:15.345 --> 00:00:18.724
having to build up a bunch
of layout in HTML.

5
00:00:18.724 --> 00:00:22.598
So I created this bitly link

6
00:00:22.598 --> 00:00:29.161
here.
&gt;&gt; Lucas Ruebbelke: And

7
00:00:29.161 --> 00:00:34.349
if you go into the browser, paste that in.
&gt;&gt; Lucas Ruebbelke: I

8
00:00:34.349 --> 00:00:38.190
kind of pre-populated the layout for you.

9
00:00:38.190 --> 00:00:45.480
And so you can just copy this,
pasted into your widgets component.

10
00:00:45.480 --> 00:00:48.980
I am just going to go ahead and do that.

11
00:00:50.480 --> 00:00:54.260
Sorry folks, but
that beautiful demo is no more.

12
00:00:56.180 --> 00:00:57.920
And so let's go over here.

13
00:00:57.920 --> 00:00:58.920
Let's just refresh and

14
00:00:58.920 --> 00:01:03.454
see if this even rendered.
&gt;&gt; Lucas Ruebbelke: Right, so

15
00:01:03.454 --> 00:01:05.260
this is just kind of a boiler play.

16
00:01:05.260 --> 00:01:07.780
I just didn't want anybody having to
go figure out how to type a cell.

17
00:01:08.810 --> 00:01:13.580
The next thing that I would
do is in the same thing.

18
00:01:13.580 --> 00:01:19.420
If you go down here,
there's an array of widgets.

19
00:01:19.420 --> 00:01:25.722
Just copy this into your
WidgetsComponent class,

20
00:01:25.722 --> 00:01:31.641
and you can just paste this in.
&gt;&gt; Lucas Ruebbelke: And

21
00:01:31.641 --> 00:01:36.022
what this will allow you to do,
I'll just delete this as well,

22
00:01:36.022 --> 00:01:41.200
just clean it up, is now we have
a collection that we can bind to.

23
00:01:41.200 --> 00:01:43.250
So let me show you one more trick,

24
00:01:43.250 --> 00:01:45.930
and this is quite possibly
one of my favorite tricks.

25
00:01:46.970 --> 00:01:49.878
Is that if I go over here,

26
00:01:49.878 --> 00:01:55.279
we had a question about
actually debugging and

27
00:01:55.279 --> 00:02:02.910
generally where I start when I
debug is in the developer console.

28
00:02:02.910 --> 00:02:03.932
But occasionally,

29
00:02:03.932 --> 00:02:07.657
you are making assumptions about your
data structure that is not true, or

30
00:02:07.657 --> 00:02:11.770
simply in your mind, you think
something is one thing and it is not.

31
00:02:11.770 --> 00:02:17.667
So what you can do is using the pre-tag,

32
00:02:17.667 --> 00:02:20.797
you can bind to this.

33
00:02:20.797 --> 00:02:23.586
And this is just going to probably be,

34
00:02:23.586 --> 00:02:27.430
I haven't done this in a while,
not super helpful.

35
00:02:27.430 --> 00:02:28.980
It's like, it's an array of objects.

36
00:02:31.690 --> 00:02:37.022
Not doing a lot for me, but
if you use the JSON pipe,

37
00:02:37.022 --> 00:02:42.904
and you go here,
&gt;&gt; Lucas Ruebbelke: Now,

38
00:02:42.904 --> 00:02:47.794
low and behold, you actually have this
nice serialized JSON structure for

39
00:02:47.794 --> 00:02:51.970
you to look at and see like,
this is what I'm working with.

40
00:02:51.970 --> 00:02:54.610
And from there, it's a little
easier to build your templates out

41
00:02:54.610 --> 00:02:55.420
and go from there.

42
00:02:55.420 --> 00:02:59.049
So, this is what I would use.

43
00:03:00.190 --> 00:03:04.871
For this, you'll use this in

44
00:03:04.871 --> 00:03:09.740
the challenge in the sense of,

45
00:03:09.740 --> 00:03:14.234
one pull the stipend in, but

46
00:03:14.234 --> 00:03:20.268
where do I do this?
&gt;&gt; Lucas Ruebbelke: When

47
00:03:20.268 --> 00:03:26.580
you have the selectedWidget, how do
you know what is the selectedWidget?

48
00:03:26.580 --> 00:03:31.300
What I would do is just bind to the
selectedWidget property and do a /JSON.

49
00:03:33.170 --> 00:03:37.286
And so just kind of a hint,
I feel like I'm making this too easy.

50
00:03:40.206 --> 00:03:42.188
&gt;&gt; Lucas Ruebbelke: Is probably something

51
00:03:42.188 --> 00:03:47.496
like I don't know.
&gt;&gt; Lucas Ruebbelke: And

52
00:03:47.496 --> 00:03:51.088
this way when you select it,
you know what's happening.

53
00:03:58.037 --> 00:03:59.870
&gt;&gt; Lucas Ruebbelke: This probably is going

54
00:03:59.870 --> 00:04:01.417
to break, or not.

55
00:04:01.417 --> 00:04:02.073
Did it break?

56
00:04:02.073 --> 00:04:02.610
It did not.

57
00:04:02.610 --> 00:04:06.090
All right, so
let's talk about this real quick and

58
00:04:06.090 --> 00:04:08.370
then I can answer any
questions that we may have.

59
00:04:09.970 --> 00:04:15.120
So create a widgets collection in
the widgetComponent with mock objects.

60
00:04:15.120 --> 00:04:21.360
That is in the gist that
is in the bottom here.

61
00:04:21.360 --> 00:04:26.380
Create a selectedWidget property
in the widgetComponent.

62
00:04:26.380 --> 00:04:32.550
Then using ngFor, display the widget's
collection in the template.

63
00:04:32.550 --> 00:04:35.510
Then using event binding,
set the selectedWidget.

64
00:04:37.220 --> 00:04:41.050
And then display widget properties
using property binding and

65
00:04:41.050 --> 00:04:41.969
interpolation binding.

66
00:04:44.110 --> 00:04:48.770
And then at the bottom,
use ngIf to show an alternate message,

67
00:04:48.770 --> 00:04:50.870
if no widget is selected.

68
00:04:52.390 --> 00:04:56.280
Now two things, one,
everything you need to complete this,

69
00:04:57.650 --> 00:05:03.719
feel free to check out the dear
cousin to this feature, the items.

70
00:05:05.100 --> 00:05:09.006
Feature here, in the list, in the detail,

71
00:05:09.006 --> 00:05:14.389
quite a bit of good stuff there,
but i will show you real quick

72
00:05:14.389 --> 00:05:19.577
because i feel like I glossed
over ngFor kind of slightly.

73
00:05:19.577 --> 00:05:26.005
If we go to widgets component,

74
00:05:26.005 --> 00:05:30.208
let's do list, and

75
00:05:30.208 --> 00:05:34.423
I'm gonna just go.

76
00:05:34.423 --> 00:05:36.600
So I'm just creating just a simple array.

77
00:05:37.870 --> 00:05:40.639
And then from here,
let's just loop over this.

78
00:05:45.500 --> 00:05:49.463
So, I'm going to put them in a p tag.

79
00:05:49.463 --> 00:05:55.605
We'll go ngFor,

80
00:05:55.605 --> 00:06:00.521
let L of list,

81
00:06:08.209 --> 00:06:08.959
&gt;&gt; Lucas Ruebbelke: So I think again,

82
00:06:08.959 --> 00:06:12.280
this comes a little bit down
to kinda the secret handshake.

83
00:06:12.280 --> 00:06:15.453
But remember the asterisks ngFor let.

84
00:06:15.453 --> 00:06:19.910
So we're basic creating this
local variable via JavaScript.

85
00:06:19.910 --> 00:06:22.096
That is now available here for binding, so

86
00:06:22.096 --> 00:06:27.463
we can call this anything.
&gt;&gt; Lucas Ruebbelke: I don't

87
00:06:27.463 --> 00:06:33.005
know something that's soda, totally
arbitrary, we just happen to look and

88
00:06:33.005 --> 00:06:38.297
see a soda can.
&gt;&gt; Lucas Ruebbelke: It's

89
00:06:38.297 --> 00:06:41.972
just essentially inside of the loop
creating a local variable,

90
00:06:41.972 --> 00:06:46.606
the JavaScript that you can then line to.
&gt;&gt; Lucas Ruebbelke: So

91
00:06:46.606 --> 00:06:49.190
you can see here,
it is just looping over and doing that.

92
00:06:49.190 --> 00:06:55.406
So that is if you have any questions
about how ngFor works is ngFor,

93
00:06:55.406 --> 00:07:02.399
you choose your collection and say let
some local variable of this list, or

94
00:07:02.399 --> 00:07:08.615
this collection, be available for
binding inside the template.

