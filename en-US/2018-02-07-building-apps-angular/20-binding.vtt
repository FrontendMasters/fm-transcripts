WEBVTT

1
00:00:00.460 --> 00:00:02.968
&gt;&gt; Lucas Ruebbelke: So
template fundamentals,

2
00:00:02.968 --> 00:00:07.982
if a component is just an ES6 class,
then a template is,

3
00:00:07.982 --> 00:00:13.110
for the most part, all intents and
purposes, just HTML.

4
00:00:14.995 --> 00:00:19.002
&gt;&gt; Lucas Ruebbelke: And
we're gonna spend most of our time just

5
00:00:19.002 --> 00:00:23.380
discussing the different
types of bindings.

6
00:00:23.380 --> 00:00:27.727
And then a few little other things
to help us lay out the best

7
00:00:27.727 --> 00:00:29.876
templates we possibly can.

8
00:00:29.876 --> 00:00:36.530
Namely, structural directives, attribute
directives, and kind of go from there.

9
00:00:36.530 --> 00:00:39.716
So this is going to be the high
level tour of templates.

10
00:00:41.860 --> 00:00:47.341
&gt;&gt; Lucas Ruebbelke: So we have seen this
graphic a few times, I hate to break it to

11
00:00:47.341 --> 00:00:53.279
you, we will see it a few more
times over the next couple of days.

12
00:00:53.279 --> 00:00:56.063
The one thing I'm missing,
I'll put this back in,

13
00:00:56.063 --> 00:01:00.590
is that there's some arrows that kind
of indicate the circular structure.

14
00:01:00.590 --> 00:01:04.132
But template, metadata,
class, so this is just,

15
00:01:04.132 --> 00:01:07.765
I just think it like a kind of a sandwich,
if you will.

16
00:01:07.765 --> 00:01:09.164
You've got two pieces of bread, and

17
00:01:09.164 --> 00:01:11.210
then the metadata just kind
of sticks them together.

18
00:01:12.500 --> 00:01:18.129
But what's important is to understand
event binding and property binding.

19
00:01:20.739 --> 00:01:24.495
&gt;&gt; Lucas Ruebbelke: And so
between our template and our class,

20
00:01:24.495 --> 00:01:27.460
we have string interpolation.

21
00:01:27.460 --> 00:01:31.590
It's pretty simple, you have a string and
you just want to render it.

22
00:01:31.590 --> 00:01:32.930
Property binding,

23
00:01:32.930 --> 00:01:36.380
which you have a value in your class
you wanna put on your template.

24
00:01:36.380 --> 00:01:40.390
And then you have an event in
your template you wanna capture,

25
00:01:41.900 --> 00:01:44.150
communicate it back to your class.

26
00:01:44.150 --> 00:01:47.258
And then you have, or
you wanna actually do it both ways.

27
00:01:51.628 --> 00:01:54.994
&gt;&gt; Lucas Ruebbelke: So
before we go any farther, let me,

28
00:01:54.994 --> 00:02:00.111
just wondering,
&gt;&gt; Lucas Ruebbelke: Let's

29
00:02:00.111 --> 00:02:05.448
just do a quick live demonstration,
I feel like freestyling a bit.

30
00:02:07.662 --> 00:02:12.156
&gt;&gt; Lucas Ruebbelke: Let me get my
chair back and we'll just see these.

31
00:02:12.156 --> 00:02:17.112
It'll take maybe five minutes and
just kinda walk through some of these, so.

32
00:02:23.200 --> 00:02:31.008
&gt;&gt; Lucas Ruebbelke: Let's go and,
&gt;&gt; Lucas Ruebbelke: I'm

33
00:02:31.008 --> 00:02:32.153
going to create a color property.

34
00:02:34.450 --> 00:02:38.338
&gt;&gt; Lucas Ruebbelke: And I'm going to
give it a color or a value of blue.

35
00:02:40.460 --> 00:02:41.184
&gt;&gt; Lucas Ruebbelke: So now if I go

36
00:02:41.184 --> 00:02:45.996
in here,
&gt;&gt; Lucas Ruebbelke: If we just wanna

37
00:02:45.996 --> 00:02:50.206
render this as a string,
all right, so color.

38
00:02:50.206 --> 00:02:59.545
You know what, let's do,
&gt;&gt; Lucas Ruebbelke: Like so,

39
00:03:05.440 --> 00:03:06.821
&gt;&gt; Lucas Ruebbelke: I think everybody

40
00:03:06.821 --> 00:03:12.904
probably expected this, just a string,
put in the template, curly braces.

41
00:03:15.957 --> 00:03:20.741
&gt;&gt; Lucas Ruebbelke: Now,
what we can do is,

42
00:03:29.140 --> 00:03:31.375
&gt;&gt; Lucas Ruebbelke: And I am doing this

43
00:03:31.375 --> 00:03:34.504
off the top of my head, so

44
00:03:34.504 --> 00:03:40.166
hopefully this doesn't explode in my face,

45
00:03:40.166 --> 00:03:44.936
if not, I'll fall back on my slides.

46
00:03:44.936 --> 00:03:47.132
Let's change this to something
a little bit more prominent.

47
00:03:51.943 --> 00:03:56.508
&gt;&gt; Lucas Ruebbelke: So now what we're
doing, I'm actually surprised that worked,

48
00:03:56.508 --> 00:04:00.658
but I'm just going to pretend
like I knew it was gonna work,

49
00:04:00.658 --> 00:04:03.730
is that we're binding to this color style.

50
00:04:03.730 --> 00:04:07.480
And we're saying, whatever this value is,

51
00:04:08.580 --> 00:04:12.700
render it and assign it to this property.

52
00:04:12.700 --> 00:04:14.590
This is why this is
called property binding.

53
00:04:15.990 --> 00:04:17.910
So here we're just
rendering it as a string.

54
00:04:17.910 --> 00:04:22.498
But in this case, the value is
being assigned to the property.

55
00:04:25.960 --> 00:04:31.414
&gt;&gt; Lucas Ruebbelke: Now what we can do is,
&gt;&gt; Lucas Ruebbelke: Let

56
00:04:31.414 --> 00:04:33.230
me just borrow a button from somewhere.

57
00:04:37.944 --> 00:04:39.605
&gt;&gt; Lucas Ruebbelke: I think it's in here.

58
00:04:49.070 --> 00:04:50.375
&gt;&gt; Lucas Ruebbelke: And
we already have a click in here

59
00:05:03.060 --> 00:05:04.384
&gt;&gt; Lucas Ruebbelke: And I have a method

60
00:05:04.384 --> 00:05:07.036
called echo, doesn't exist yet.

61
00:05:09.770 --> 00:05:14.229
&gt;&gt; Lucas Ruebbelke: And let's just pass
in color, so then within our component,

62
00:05:14.229 --> 00:05:20.595
remember, methods and properties, if they
exist, they're available for binding.

63
00:05:20.595 --> 00:05:26.837
So we'll go echo, and
we'll just say message,

64
00:05:26.837 --> 00:05:30.654
and we'll just log this out.

65
00:05:36.762 --> 00:05:38.678
&gt;&gt; Lucas Ruebbelke: Pretty
straightforward,

66
00:05:38.678 --> 00:05:43.339
I think the complexity of this
class is kind of JavaScript 101,

67
00:05:43.339 --> 00:05:46.600
intro to JavaScript properties and
methods.

68
00:05:47.910 --> 00:05:50.842
And so now we're saying,

69
00:05:50.842 --> 00:05:56.583
when this button is clicked,
we want to call echo.

70
00:05:56.583 --> 00:06:00.810
And we wanna pass in color,
which is the property on the class.

71
00:06:03.160 --> 00:06:04.152
&gt;&gt; Lucas Ruebbelke: So
we'll flip back here.

72
00:06:07.962 --> 00:06:11.420
&gt;&gt; Lucas Ruebbelke: And
you can see here that it is rendering.

73
00:06:12.780 --> 00:06:17.301
It's calling echo and it's just
tracing it out, okay, so far so good?

74
00:06:17.301 --> 00:06:22.631
I've put a property on my class,
bound to it in the template.

75
00:06:22.631 --> 00:06:28.650
I created a method on my class and
I'm calling it from the class.

76
00:06:28.650 --> 00:06:30.970
So what we're doing is, we're just
capturing that user event and saying,

77
00:06:30.970 --> 00:06:35.870
when this happens,
we're going to trade it for this action,

78
00:06:35.870 --> 00:06:37.870
and we're gonna use it
to call this method.

79
00:06:37.870 --> 00:06:43.132
So this is event binding,
this is property binding.

80
00:06:47.140 --> 00:06:50.186
&gt;&gt; Lucas Ruebbelke: Let me
borrow one more component,

81
00:06:52.787 --> 00:06:53.824
&gt;&gt; Lucas Ruebbelke: And,

82
00:06:56.744 --> 00:06:57.601
&gt;&gt; Lucas Ruebbelke: We'll go here.

83
00:07:02.350 --> 00:07:08.179
&gt;&gt; Lucas Ruebbelke: And this is where
I think things get interesting.

84
00:07:08.179 --> 00:07:12.705
So I don't need the placeholder,
but what I wanna bind to is color.

85
00:07:23.090 --> 00:07:24.623
&gt;&gt; Lucas Ruebbelke: So
now you can see that,

86
00:07:28.240 --> 00:07:29.751
&gt;&gt; Lucas Ruebbelke: Because color is,

87
00:07:29.751 --> 00:07:35.234
the value is blue, It's showing up here,
it's turning this blue.

88
00:07:35.234 --> 00:07:42.783
But then it's also rendering here as blue,
but what if we type in red?

89
00:07:45.500 --> 00:07:52.402
&gt;&gt; Lucas Ruebbelke: Or,
I'm guessing here, violet, maybe?

90
00:07:52.402 --> 00:07:57.016
So as I change this,
you can see the two-way

91
00:07:57.016 --> 00:08:01.524
data binding entry model is rendering it.

92
00:08:01.524 --> 00:08:05.996
It's writing it back to the class,
but let's go,

93
00:08:05.996 --> 00:08:10.475
anybody know of any other colors,
grey is boring.

94
00:08:10.475 --> 00:08:11.534
&gt;&gt; Speaker 2: Green.

95
00:08:11.534 --> 00:08:12.393
&gt;&gt; Lucas Ruebbelke: Green.

96
00:08:12.393 --> 00:08:13.652
&gt;&gt; Speaker 2: Aqua.

97
00:08:13.652 --> 00:08:15.227
&gt;&gt; Lucas Ruebbelke: Aqua.

98
00:08:17.090 --> 00:08:21.022
&gt;&gt; Lucas Ruebbelke: And so as I type
this in, it's updating over here.

99
00:08:21.022 --> 00:08:25.372
But because we're also binding
that value to a property,

100
00:08:25.372 --> 00:08:30.630
it's actually changing the color
of that h3 tag, or whatever I had.

101
00:08:30.630 --> 00:08:35.750
So just think of properties into
the template, events come out.

102
00:08:35.750 --> 00:08:36.740
And this is, for

103
00:08:36.740 --> 00:08:41.980
the most part, the majority of
what we'll do in our templates.

104
00:08:41.980 --> 00:08:46.853
So I've kind of just circumvented
all my slides for the demo, so

105
00:08:46.853 --> 00:08:53.278
let's just kind of walk through these, and
then we'll see where the wind takes us.

106
00:08:53.278 --> 00:08:56.307
So flows from component to element,

107
00:08:56.307 --> 00:09:01.200
so an image tag would be a good example,
binding to source.

108
00:09:01.200 --> 00:09:03.467
And so this is essentially, just think of,

109
00:09:03.467 --> 00:09:06.303
if I want to write a value to
a property in the template.

110
00:09:09.923 --> 00:09:13.250
&gt;&gt; Lucas Ruebbelke: There's a canonical
way to do this using bind-property.

111
00:09:13.250 --> 00:09:16.870
If, for some reason,
you have some standard or something that

112
00:09:16.870 --> 00:09:19.775
you don't wanna do the brackets in there,
there's a way to do this long hand.

113
00:09:19.775 --> 00:09:23.666
I'm lazy, I recommend not,
if you can get away with it.

114
00:09:23.666 --> 00:09:28.080
What you saw here was attribute.property.

115
00:09:28.080 --> 00:09:32.920
So that's when I was doing style.color,
or actually no,

116
00:09:32.920 --> 00:09:35.100
no, I was doing style.stylename.

117
00:09:35.100 --> 00:09:39.727
And so you can actually bind some kind of
some interesting kind of subproperties of

118
00:09:39.727 --> 00:09:42.422
things, such as classes, attributes, etc.

119
00:09:45.081 --> 00:09:48.285
&gt;&gt; Lucas Ruebbelke: And so we saw here,
style.color, the cat's out of the bag,

120
00:09:48.285 --> 00:09:50.750
this is kind of anti-climatic.

121
00:09:50.750 --> 00:09:56.536
So event binding, same thing,
a button click is the event, yes?

122
00:09:56.536 --> 00:09:59.922
&gt;&gt; Speaker 2: So
if you wanted to do multiple styles,

123
00:09:59.922 --> 00:10:02.904
would you do style.otherstyle.

124
00:10:04.732 --> 00:10:07.630
&gt;&gt; Speaker 2: That's I
think how you would do it.

125
00:10:07.630 --> 00:10:09.962
&gt;&gt; Lucas Ruebbelke: But
if I was doing multiple styles,

126
00:10:09.962 --> 00:10:12.459
it kind of depends on the nature of it.

127
00:10:12.459 --> 00:10:16.209
The next thing I would say,
could this be encapsulated in a class?

128
00:10:16.209 --> 00:10:18.640
And then possibly just binding
to the overarching class.

129
00:10:18.640 --> 00:10:23.124
So I mean, it really kind of depends,
but I think that's how you would

130
00:10:23.124 --> 00:10:27.456
do it is style.whatever,
style.stylename, and do it that way.

131
00:10:27.456 --> 00:10:31.982
Cuz you may actually wanna manipulate
that element on two dimensions of,

132
00:10:31.982 --> 00:10:36.220
let's say, size and color or
whatever, and that's totally fine.

133
00:10:38.449 --> 00:10:43.687
&gt;&gt; Lucas Ruebbelke: So again, canonical
form is on event, and the one thing with

134
00:10:43.687 --> 00:10:49.861
an event handler is that you can
actually pass the event using $event.

135
00:10:49.861 --> 00:10:52.803
So let's say you're actually
doing a mouse click, and

136
00:10:52.803 --> 00:10:56.250
you care about the xy position
of the mouse on the page.

137
00:10:56.250 --> 00:11:01.160
Well, you pass that event object in,
and you can actually introspect it.

138
00:11:01.160 --> 00:11:04.043
And so it's just a data DOM event that's
passing out, which is pretty neat.

139
00:11:06.940 --> 00:11:09.024
&gt;&gt; Lucas Ruebbelke: So
you can see here, alertTheWorld,

140
00:11:09.024 --> 00:11:10.987
just passing in the data DOM event.

141
00:11:14.154 --> 00:11:17.321
&gt;&gt; Lucas Ruebbelke: Two-way data binding,
no surprise here, boom, you're taking

142
00:11:17.321 --> 00:11:21.123
the two bindings, you're putting them
together, and now you have two-way.

143
00:11:22.637 --> 00:11:26.100
&gt;&gt; Lucas Ruebbelke: There are a few
advanced cases I recommend looking up.

144
00:11:26.100 --> 00:11:28.552
Once we get into
component-driven architecture,

145
00:11:28.552 --> 00:11:30.450
I'll talk a little bit more about this.

146
00:11:30.450 --> 00:11:35.984
So ngModel is one such
directive that is enabled for

147
00:11:35.984 --> 00:11:38.696
two-way data binding.

148
00:11:38.696 --> 00:11:43.714
You can create your own custom properties,

149
00:11:43.714 --> 00:11:47.650
if you will, have it be two-way.

150
00:11:47.650 --> 00:11:51.201
We may talk about it tomorrow, but
there are ways to stem this even further.

151
00:11:52.851 --> 00:11:57.243
&gt;&gt; Lucas Ruebbelke: You'll see
this mostly with ngModel, but

152
00:11:57.243 --> 00:12:04.199
you can create your own custom to
a data binding properties as well.

