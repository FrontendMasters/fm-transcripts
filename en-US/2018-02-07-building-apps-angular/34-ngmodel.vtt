WEBVTT

1
00:00:00.520 --> 00:00:04.250
&gt;&gt; Lukas Ruebbelke: I forgot, how many
people here have done One.X development?

2
00:00:04.250 --> 00:00:07.130
And so
we're pretty familiar with like ngModel.

3
00:00:07.130 --> 00:00:11.770
So same thing here, we've seen it already,
the two-way data binding.

4
00:00:11.770 --> 00:00:14.740
Now, what's interesting,

5
00:00:14.740 --> 00:00:18.940
with One.X is there was this
thing called Form Controller.

6
00:00:18.940 --> 00:00:21.010
That when you created a form,
whether you do it or

7
00:00:21.010 --> 00:00:25.440
not that Angular was creating
this FormController.

8
00:00:25.440 --> 00:00:28.630
So it's just like any other
controller in Angular JS,

9
00:00:28.630 --> 00:00:30.970
it was creating a FormController
under the hood.

10
00:00:32.120 --> 00:00:36.190
The reason why that was
happening is because

11
00:00:36.190 --> 00:00:40.910
with every form there's kinda two
things that you need to track,

12
00:00:40.910 --> 00:00:44.800
the state of the form, and
then the data of the form.

13
00:00:44.800 --> 00:00:47.370
By state I mean is invalid, is not valid?

14
00:00:47.370 --> 00:00:48.720
How is it invalid?

15
00:00:48.720 --> 00:00:54.480
What's the data in the form, and
how is that making it invalid?

16
00:00:54.480 --> 00:00:57.870
So, there's kind of these two things that
you need to track, because obviously

17
00:01:00.640 --> 00:01:03.920
you want to assert requirements,
on your form.

18
00:01:03.920 --> 00:01:08.820
Like is minimum length, maximum length,
is this an actual valid email,

19
00:01:08.820 --> 00:01:11.760
is this required, etc.

20
00:01:11.760 --> 00:01:17.800
So under the hood, with ngModel, Angular
is creating what is called a FormControl.

21
00:01:19.010 --> 00:01:22.710
And so essentially it takes
the domain model, whatever it is, and

22
00:01:22.710 --> 00:01:25.430
binds it to a form element.

23
00:01:26.550 --> 00:01:31.380
We can actually have access to that
by creating a local variable, and

24
00:01:31.380 --> 00:01:33.880
referencing ngModel.

25
00:01:33.880 --> 00:01:39.089
And so what this looks like,
at a very kind of microscopic level,

26
00:01:39.089 --> 00:01:44.964
I wouldn't actually do this specifically,
but at a FormControl level,

27
00:01:44.964 --> 00:01:49.600
you can say I have an ngModel,
&gt;&gt; Lukas Ruebbelke: And

28
00:01:49.600 --> 00:01:53.080
I want to reference it.

29
00:01:53.080 --> 00:01:58.740
And what this allows you to do is,
well, I'll just actually show you.

30
00:01:59.870 --> 00:02:05.031
So if we hop into our code,
just close this

31
00:02:05.031 --> 00:02:09.902
all down, and let's do this in items.

32
00:02:16.228 --> 00:02:19.186
&gt;&gt; Lukas Ruebbelke: So we have this input
here, so I'm just kind of breaking this

33
00:02:19.186 --> 00:02:26.647
onto a couple different lines
&gt;&gt; Lukas Ruebbelke: Let's

34
00:02:26.647 --> 00:02:30.670
go local reference nameInput = ngModel.

35
00:02:32.490 --> 00:02:37.680
So I'm creating a local variable called
nameInput and I'm passing in ngModel.

36
00:02:37.680 --> 00:02:40.000
So I'm saying, create this variable,
here's the value for it.

37
00:02:41.010 --> 00:02:46.090
And from here I'll do
another horizontal rule, and

38
00:02:46.090 --> 00:02:52.280
let's go nameInput, and we'll go value.

39
00:02:54.470 --> 00:02:57.478
And while we're at it,
we'll do another horizontal rule and

40
00:02:57.478 --> 00:03:03.019
we'll go valid.

41
00:03:04.850 --> 00:03:05.968
Hopefully this works, we'll see.

42
00:03:09.221 --> 00:03:12.621
&gt;&gt; Lukas Ruebbelke: And
since we did this in items, so

43
00:03:12.621 --> 00:03:16.390
there's no value, but it is valid.

44
00:03:18.120 --> 00:03:21.200
So you can see once I start typing it,
this fills it in.

45
00:03:21.200 --> 00:03:25.390
So I am able to basically
track the data on the element,

46
00:03:27.130 --> 00:03:34.720
but if I went back into the code here and

47
00:03:34.720 --> 00:03:39.970
I added in, let's do required,
so now it is required.

48
00:03:39.970 --> 00:03:45.643
And we go back
&gt;&gt; Lukas Ruebbelke: Is it valid?

49
00:03:45.643 --> 00:03:48.412
No, now it is.

50
00:03:54.617 --> 00:03:56.820
&gt;&gt; Lukas Ruebbelke: So
we're doing this at a FormControl level.

51
00:03:56.820 --> 00:03:59.830
So we're saying we have this
element that we want to control.

52
00:04:02.270 --> 00:04:06.940
And really, there's some additional
methods, but the two ones that you need to

53
00:04:06.940 --> 00:04:09.820
know is that there's a value property,
and a valid property.

54
00:04:13.000 --> 00:04:17.335
Before I forget, I'm actually,
I'm going to actually take this off,

55
00:04:17.335 --> 00:04:20.261
cuz we're going to expand
this in just a moment.

