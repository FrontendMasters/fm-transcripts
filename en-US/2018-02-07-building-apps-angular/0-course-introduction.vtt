WEBVTT

1
00:00:00.220 --> 00:00:03.056
&gt;&gt; Lukas Ruebbelke: I've had
the opportunity to meet everyone here, but

2
00:00:03.056 --> 00:00:06.332
I just wanted to formally just
welcome everybody in the room,

3
00:00:06.332 --> 00:00:10.000
but also online, to Learn to
Build Awesome[r] Apps with Angular.

4
00:00:10.000 --> 00:00:15.279
So this is a refresh of the previous
course, so essentially this is,

5
00:00:15.279 --> 00:00:19.930
kind of the intro to Angular,
the introduction to Angular.

6
00:00:20.930 --> 00:00:26.700
What's interesting is that,
a few days ago, I sat down to review

7
00:00:26.700 --> 00:00:31.030
the sample app, and I was just like,
no, no, no, no, this isn't gonna work.

8
00:00:31.030 --> 00:00:35.717
Tore it all down, and so to that end,
is we're going to cover a lot of

9
00:00:35.717 --> 00:00:40.185
the same material, but
the sample app is completely brand new.

10
00:00:40.185 --> 00:00:41.687
It's using Angular material,

11
00:00:41.687 --> 00:00:44.643
which is actually one of the reasons
why I burn it to the ground.

12
00:00:44.643 --> 00:00:49.704
I don't think Angular material is quite
ready when we did this previously but,

13
00:00:49.704 --> 00:00:50.920
so new sample app.

14
00:00:51.950 --> 00:00:57.984
And instead of two days, we're going
to have this as a three-day workshop.

15
00:00:59.510 --> 00:01:06.200
And so, how I see this kind of,
the narrative arc for this course,

16
00:01:06.200 --> 00:01:11.120
is we're going to introduce Angular but in
the context of building a single feature.

17
00:01:12.460 --> 00:01:18.702
Then tomorrow, we are going to talk about
how these features actually fit together.

18
00:01:18.702 --> 00:01:23.639
So single feature, then tomorrow,
we'll talk about actually the features,

19
00:01:23.639 --> 00:01:27.029
so we'll get into
component-driven architecture,

20
00:01:27.029 --> 00:01:32.186
little bit of polish towards the end in
terms of taking our template-driven form,

21
00:01:32.186 --> 00:01:36.760
making it reactive,
as well as introducing some animations.

22
00:01:36.760 --> 00:01:41.910
And then, completely new
material is going to focus on,

23
00:01:41.910 --> 00:01:45.150
when you build your application,
well then what?

24
00:01:45.150 --> 00:01:48.850
And so moving our focus from features and

25
00:01:48.850 --> 00:01:52.420
building this working application
that consist of features,

26
00:01:52.420 --> 00:01:56.850
to focusing on your application and
what you kind of do from there.

27
00:01:56.850 --> 00:02:01.750
So what this comes down to is,
how do you build an application at scale?

28
00:02:01.750 --> 00:02:06.808
So we'll talk about routes, lazy modules,
lazy loaded modules, we'll talk about

29
00:02:06.808 --> 00:02:11.446
actually deploying the app, optimizing
the app for performance, doing some

30
00:02:11.446 --> 00:02:16.293
static analysis in some of these different
things that once you have an app built,

31
00:02:16.293 --> 00:02:20.296
like you put it into the wild,
like how do you keep it up and running,

32
00:02:20.296 --> 00:02:25.110
how do you keep it stable, and performing
at the best possible level that it can.

33
00:02:25.110 --> 00:02:29.740
So we're going to start very broad,
very kind of general, and

34
00:02:29.740 --> 00:02:34.740
start to build up so that by the end of
the three days, we have a pretty good idea

35
00:02:34.740 --> 00:02:38.790
how to not only build an application,
but to release it into the wild.

36
00:02:38.790 --> 00:02:40.890
And if something goes wrong or
something is slow,

37
00:02:40.890 --> 00:02:42.580
we kind of know how to address that.

38
00:02:42.580 --> 00:02:47.260
So the first two days are going to be
kind of applied theory, if you will, and

39
00:02:47.260 --> 00:02:50.540
then that third day is,
into the wild, what do we do?

40
00:02:52.150 --> 00:02:56.784
Now, with that said, my absolute
favorite part of doing workshops is

41
00:02:56.784 --> 00:03:01.104
getting feedback and
having the conversations with students and

42
00:03:01.104 --> 00:03:05.030
finding out what are the things
they're struggling with,

43
00:03:05.030 --> 00:03:09.291
and then modulating my content
to kind of address those things.

44
00:03:09.291 --> 00:03:13.694
And so kind of that moment, it's like i'm
struggling with this thing, I got it, and

45
00:03:13.694 --> 00:03:18.630
kind of that moment, that ah-ha moment,
like vicariously, I live for that.

46
00:03:18.630 --> 00:03:24.410
So there is kind of some leeway
towards the end of day three,

47
00:03:24.410 --> 00:03:27.490
I have a general idea of
how it's going to go.

48
00:03:27.490 --> 00:03:32.038
I have actually more content than
I can fit into a single day,

49
00:03:32.038 --> 00:03:35.170
just some very kind of practical things.

50
00:03:35.170 --> 00:03:38.544
But if you will go to use bit.ly link,

51
00:03:38.544 --> 00:03:43.817
there's just a real easy survey and
just fill this out, and

52
00:03:43.817 --> 00:03:49.827
if I get enough responses that's
kind of keying on a certain thing,

53
00:03:49.827 --> 00:03:53.850
then I will adjust
the content accordingly.

54
00:03:53.850 --> 00:03:57.460
So for some reason, let's say,
we get 50 responses and

55
00:03:57.460 --> 00:04:02.856
it's really heavy on testing, then I
will allocate more time towards that.

56
00:04:02.856 --> 00:04:06.850
So I mean, ultimately,
we kind of have a bit of a blank canvas.

57
00:04:06.850 --> 00:04:10.610
Or if anything, we have the lines on
the canvas, and I'm giving everybody

58
00:04:10.610 --> 00:04:16.400
the opportunity to kind of tell me
how they want to color that in.

59
00:04:16.400 --> 00:04:19.570
So if you go to the survey,
please fill it out.

60
00:04:19.570 --> 00:04:25.390
I will keep an eye on it, and this will
kind of affect how I prioritize what we

61
00:04:25.390 --> 00:04:31.550
talk about on day three, and possibly even
work some stuff in on day two as well.

62
00:04:31.550 --> 00:04:37.550
But the point is that,
I'm here to kind of address pin points,

63
00:04:37.550 --> 00:04:40.080
and if I know what they are,
then it makes my job easier.

64
00:04:40.080 --> 00:04:47.360
So also just a bit of housekeeping,
that we're all friends here.

65
00:04:47.360 --> 00:04:51.530
And so I would imagine,
a lot of people have not met each other.

66
00:04:51.530 --> 00:04:55.640
By the end of three the days, I think you
have an incredible set of resources here,

67
00:04:55.640 --> 00:04:57.369
in terms of fellow developers.

68
00:04:58.420 --> 00:05:01.150
I highly,
highly encourage communication and

69
00:05:01.150 --> 00:05:04.760
collaboration among your fellow students.

70
00:05:04.760 --> 00:05:10.070
So on the co-challenges,
if you finish your co-challenge, what I

71
00:05:10.070 --> 00:05:13.880
would like you to do is just turn to your
neighbor and say, hey, how are you doing?

72
00:05:13.880 --> 00:05:16.350
Are you stuck, are you finished?

73
00:05:16.350 --> 00:05:19.730
And kind of have those,
that conversation to make sure that

74
00:05:19.730 --> 00:05:22.430
everybody kinda crosses
that finish line together.

75
00:05:22.430 --> 00:05:24.110
So no developer left behind.

76
00:05:24.110 --> 00:05:26.350
Because this is,
when you are in an organization,

77
00:05:26.350 --> 00:05:30.510
this is kind of how this works,
is one developer is having a problem and

78
00:05:30.510 --> 00:05:32.990
if you are in a good
team with a good culture,

79
00:05:32.990 --> 00:05:35.350
then somebody is gonna pick up on that and
they're going to help you.

80
00:05:35.350 --> 00:05:39.784
So for all intents and purposes, let us
assume that we work on an awesome team

81
00:05:39.784 --> 00:05:42.765
together in a company with
an awesome culture, and

82
00:05:42.765 --> 00:05:44.656
we're here to help each other.

83
00:05:44.656 --> 00:05:48.983
As well as if I say something that doesn't
make sense or you want me to clarify,

84
00:05:48.983 --> 00:05:52.210
by all means, just raise your hand and
ask the questions.

85
00:05:52.210 --> 00:05:57.260
So I love conversation, and
do not be afraid to speak up or

86
00:05:57.260 --> 00:06:01.816
add some input.
&gt;&gt; Lukas Ruebbelke: So

87
00:06:01.816 --> 00:06:06.574
day one is focusing on,
have a strong grasp on how to

88
00:06:06.574 --> 00:06:10.350
construct a single feature in Angular.

89
00:06:11.560 --> 00:06:15.040
And so, what I mean by
feature is kind of a single,

90
00:06:15.040 --> 00:06:17.180
encapsulated piece of functionality.

91
00:06:17.180 --> 00:06:20.320
So for instance,
if you had like a user's form,

92
00:06:20.320 --> 00:06:24.720
where you could do, put in user
information, that would be a user feature.

93
00:06:24.720 --> 00:06:27.600
And so
the idea is how do we build that up?

94
00:06:27.600 --> 00:06:31.635
And so for the most part, we're gonna
be focusing around the component today.

95
00:06:31.635 --> 00:06:34.550
And then tomorrow, we'll get into kind
of component-driven architecture.

