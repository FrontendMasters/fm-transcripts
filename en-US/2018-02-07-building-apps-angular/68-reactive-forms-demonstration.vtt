WEBVTT

1
00:00:00.270 --> 00:00:04.915
&gt;&gt; Lukas Ruebbelke: Just like the forms
module, when you're moving two Reactive

2
00:00:04.915 --> 00:00:09.036
forms you need to import
the Reactive forms' module.

3
00:00:11.589 --> 00:00:14.887
&gt;&gt; Lukas Ruebbelke: So pretty easy,
if you have Angular forms you just go in,

4
00:00:14.887 --> 00:00:16.458
you import it.

5
00:00:16.458 --> 00:00:21.930
With that said is you will need to
also add it to your imports in your

6
00:00:21.930 --> 00:00:26.395
Angie module but, I think we're pretty
solid on how to solve that dependency.

7
00:00:29.460 --> 00:00:32.990
&gt;&gt; Lukas Ruebbelke: And,
this is what a FormGroup looks like.

8
00:00:35.985 --> 00:00:40.330
&gt;&gt; Lukas Ruebbelke: So, form = new
FormGroup, so form could be anything.

9
00:00:40.330 --> 00:00:42.930
And you're simply saying
create this new FormGroup and

10
00:00:42.930 --> 00:00:47.522
I'm sending you an object that represents
the form that I want to create.

11
00:00:47.522 --> 00:00:53.260
And so here's a group that
essentially represents this form, and

12
00:00:53.260 --> 00:01:00.240
then I wanna have the FormControl that is
of name first and a FormControl of last.

13
00:01:00.240 --> 00:01:03.550
So you can imagine,
like first name last name, so

14
00:01:03.550 --> 00:01:05.730
pretty much every field gets one of these.

15
00:01:05.730 --> 00:01:09.660
And then from here you can add in
the validators and some different things.

16
00:01:09.660 --> 00:01:12.297
So if you have more than one that
kinda goes into an array, and

17
00:01:12.297 --> 00:01:14.150
you can kinda stack it up.

18
00:01:14.150 --> 00:01:18.820
And do some pretty sophisticated things
in the JavaScript context that's not

19
00:01:18.820 --> 00:01:23.319
available from just the template base,
working with it from the template.

20
00:01:26.550 --> 00:01:31.126
&gt;&gt; Lukas Ruebbelke: And so now, remember,
we talked about the FormGroup directive,

21
00:01:31.126 --> 00:01:35.638
where we created the form now we
just attach it here, FormGroup.

22
00:01:39.232 --> 00:01:42.364
&gt;&gt; Lukas Ruebbelke: So we define the
FormGroup object and then we hook it to

23
00:01:42.364 --> 00:01:48.472
the form using the FormGroup directive
&gt;&gt; Lukas Ruebbelke: And

24
00:01:48.472 --> 00:01:56.220
then from there, we have access to
the form in a programmatic context.

25
00:01:56.220 --> 00:02:01.120
So, for instance,
let's start with onSubmit.

26
00:02:02.650 --> 00:02:07.790
And so we already have without having to
send it back, we actually have access

27
00:02:07.790 --> 00:02:11.830
to the value of the entire form,
right here.

28
00:02:11.830 --> 00:02:15.895
So we just say this.form.value,
and here it is.

29
00:02:15.895 --> 00:02:20.510
Now at the same time,
we can actually set the value.

30
00:02:20.510 --> 00:02:27.710
So this.form.setValue and we can set in
an object, so, pretty straight forward.

31
00:02:29.060 --> 00:02:33.670
What we can also do is we
can get a single element

32
00:02:35.540 --> 00:02:38.200
out of the FormGroup.

33
00:02:38.200 --> 00:02:42.320
So in this case, this is kind of
an interesting thing, is we have a getter,

34
00:02:43.820 --> 00:02:50.010
we're calling it first, and from here
we're just returning this.form.get first.

35
00:02:50.010 --> 00:02:51.220
So you can see here that,

36
00:02:52.660 --> 00:02:57.220
first over here is the key in which
we're using to return that form element.

37
00:02:59.150 --> 00:03:04.700
But, because we have first,
or do I do this?

38
00:03:06.490 --> 00:03:07.796
&gt;&gt; Lukas Ruebbelke: Let's see here,

39
00:03:07.796 --> 00:03:11.111
I don't think this got
wired up in my slides.

40
00:03:13.110 --> 00:03:19.343
&gt;&gt; Lukas Ruebbelke: Yeah, it did not, but
what you can do, is in your template,

41
00:03:19.343 --> 00:03:24.604
you can now actually go and
display first.value,

42
00:03:24.604 --> 00:03:30.020
cuz you're exposing the form
control via a getter.

43
00:03:30.020 --> 00:03:30.900
And so, I'll show

44
00:03:30.900 --> 00:03:33.100
that maybe when we get into
the demonstration what that looks like.

45
00:03:33.100 --> 00:03:36.893
So the point is,
form group contains FormControls, and

46
00:03:36.893 --> 00:03:39.350
we're just wiring it up to the form.

47
00:03:39.350 --> 00:03:42.610
And from there,
we can start to manipulate and

48
00:03:42.610 --> 00:03:47.550
interact with the form in a reactive
way from a programmatic context.

49
00:03:49.610 --> 00:03:52.046
&gt;&gt; Lukas Ruebbelke: So,
let's expand this a bit, and

50
00:03:52.046 --> 00:03:57.404
this is going to be a little bit more
to where we are in terms of the login.

51
00:03:57.404 --> 00:04:01.590
&gt;&gt; Lukas Ruebbelke: But
we'll do this with FormBuilder.

52
00:04:01.590 --> 00:04:04.460
So the only difference is,
is that form builder just kind of

53
00:04:04.460 --> 00:04:08.470
puts everything together, but
the syntax is pretty much the same.

54
00:04:08.470 --> 00:04:13.890
So we are going to define a FormGroup,
in this case, it's subscriber,

55
00:04:15.700 --> 00:04:19.601
and we are injecting
FormBuilder right here.

56
00:04:21.040 --> 00:04:26.956
So this is kind of the start,
so previously we defined

57
00:04:26.956 --> 00:04:32.513
our FormGroup,
&gt;&gt; Lukas Ruebbelke: Explicitly,

58
00:04:32.513 --> 00:04:34.418
so form = new FormGroup, in this case,

59
00:04:34.418 --> 00:04:38.181
we are going to use FormBuilder to do
this and so you'll see, it's very close.

60
00:04:40.880 --> 00:04:47.133
&gt;&gt; Lukas Ruebbelke: And from here, we're
just saying this.subscriber = this.fb for

61
00:04:47.133 --> 00:04:55.020
FormBuilder.group and you're passing in
essentially the same exact thing, name.

62
00:04:55.020 --> 00:04:57.960
We'll give it an initial value of nothing,

63
00:04:57.960 --> 00:05:02.420
empty strings, and we want to make
each of these fields required.

64
00:05:03.830 --> 00:05:07.620
And so, in our JavaScript we're saying
this is how we want this thing to work.

65
00:05:07.620 --> 00:05:13.678
And then what you do, is you go in and
you just have to wide up.

66
00:05:13.678 --> 00:05:17.625
So we're gonna start with FormGroup, so

67
00:05:17.625 --> 00:05:23.280
using the FormGroup directive
we attach it to subscriber.

68
00:05:23.280 --> 00:05:27.495
And then to attach the FormControl,
&gt;&gt; Lukas Ruebbelke: Well,

69
00:05:27.495 --> 00:05:31.840
here we are, right over here,
formControlName.

70
00:05:34.760 --> 00:05:36.272
&gt;&gt; Lukas Ruebbelke: Yes.

71
00:05:36.272 --> 00:05:39.594
&gt;&gt; Speaker 2: The FormGroup
looks like a property on a form,

72
00:05:39.594 --> 00:05:44.627
whereas a formControlName is like
an attribute, which is not bound?

73
00:05:44.627 --> 00:05:48.200
I mean, it's not following any syntax,
I mean,

74
00:05:48.200 --> 00:05:52.310
shouldn't it be a property or
should it be, what is it?

75
00:05:52.310 --> 00:05:54.460
I mean it's not a standard.

76
00:05:54.460 --> 00:05:58.541
&gt;&gt; Lukas Ruebbelke: So, how this works,
and this is one of the things we're gonna

77
00:05:58.541 --> 00:06:02.090
file under you either know it,
or you kind of don't.

78
00:06:02.090 --> 00:06:04.780
It's just something that's
related with this kind of like,

79
00:06:04.780 --> 00:06:06.030
you just have to it this way.

80
00:06:10.340 --> 00:06:14.175
You can see in this case name and
email, that when this get generated,

81
00:06:14.175 --> 00:06:15.995
it becomes essentially the key.

82
00:06:15.995 --> 00:06:19.839
So if you're doing template driven forms,
you actually have to

83
00:06:19.839 --> 00:06:24.440
have a name property on there,
it's how it's just matching it up.

84
00:06:24.440 --> 00:06:29.740
And so, by binding this top level
FormGroup, it goes through and

85
00:06:29.740 --> 00:06:34.644
it matches, the actual key,
&gt;&gt; Lukas Ruebbelke: To

86
00:06:34.644 --> 00:06:36.510
the foformControlName.

87
00:06:36.510 --> 00:06:37.540
But essentially what it's doing,

88
00:06:37.540 --> 00:06:41.580
it's matching in a way,
like the name attribute to it.

89
00:06:41.580 --> 00:06:44.150
But, the reason why you
are not having to bind

90
00:06:44.150 --> 00:06:47.581
this,
&gt;&gt; Lukas Ruebbelke: Is because the whole

91
00:06:47.581 --> 00:06:49.879
entire thing, is already bound to this.

92
00:06:51.280 --> 00:06:55.690
&gt;&gt; Speaker 2: Then why don't we just write
name = name instead of formControlName

93
00:06:55.690 --> 00:07:01.310
because formControlName is not even
a standard input attribute for input?

94
00:07:02.470 --> 00:07:04.430
&gt;&gt; Lukas Ruebbelke: I mean so

95
00:07:04.430 --> 00:07:06.710
that is a question I'd probably
have to service to the team.

96
00:07:06.710 --> 00:07:09.640
I mean,
obviously they have some reasons for that.

97
00:07:09.640 --> 00:07:10.460
&gt;&gt; Speaker 2: Yeah, sure.

98
00:07:10.460 --> 00:07:15.180
&gt;&gt; Lukas Ruebbelke: But I think,
if I were to make a guess that

99
00:07:16.290 --> 00:07:21.761
when we look at this,
&gt;&gt; Lukas Ruebbelke: Does anybody,

100
00:07:21.761 --> 00:07:25.090
like if you didn't know
anything about anything.

101
00:07:25.090 --> 00:07:28.250
So if we just took this slide and
we walked downstairs on the street,

102
00:07:28.250 --> 00:07:30.349
and we said, what do you think this is?

103
00:07:31.410 --> 00:07:34.570
It's like well, it's probably
the name of some FormControl.

104
00:07:35.650 --> 00:07:37.840
And I'd say bingo, that's it.

105
00:07:37.840 --> 00:07:42.500
So if anything, I think they did
this because it's self-documenting.

106
00:07:42.500 --> 00:07:45.942
It's saying like this is, like we
are attaching a FormControl to this.

107
00:07:47.050 --> 00:07:49.201
And so,
I mean there is always a balance of like,

108
00:07:49.201 --> 00:07:53.276
do we do something conventional or
do we do something that self-documenting?

109
00:07:53.276 --> 00:07:57.060
I think formControlName,
by using that name convention,

110
00:07:57.060 --> 00:08:00.570
it's a little bit more intuitive of
what's actually happening in the form.

111
00:08:00.570 --> 00:08:02.960
But, I mean that's a valid question.

112
00:08:04.350 --> 00:08:08.280
I think even one of the hardship of
programming is what do you name things?

113
00:08:08.280 --> 00:08:11.830
Managing state or
cash I believe in naming things.

114
00:08:11.830 --> 00:08:13.670
So there's something that's
called along those lines.

115
00:08:16.386 --> 00:08:22.107
&gt;&gt; Lukas Ruebbelke: So,
formGroup, formControlName.

116
00:08:25.053 --> 00:08:28.170
&gt;&gt; Lukas Ruebbelke: And now,
we back this up little quick.

117
00:08:28.170 --> 00:08:32.376
So,
&gt;&gt; Lukas Ruebbelke: When we want to

118
00:08:32.376 --> 00:08:37.830
actually do something with this or
submit it, how does that work?

119
00:08:37.830 --> 00:08:44.230
So we know that with FormGroup,
we have value invalid.

120
00:08:46.180 --> 00:08:52.970
Now, so we can call subscribe,
we can pass in the subscriber,

121
00:08:52.970 --> 00:08:58.215
so you could reference it from
within the subscribe method.

122
00:08:58.215 --> 00:09:03.116
But,
&gt;&gt; Lukas Ruebbelke: What we're doing

123
00:09:03.116 --> 00:09:07.042
here is a little bit of
trickery with TypeScript,

124
00:09:07.042 --> 00:09:10.319
is we're destructuring the parameter.

125
00:09:10.319 --> 00:09:12.839
We're saying, take this object and

126
00:09:12.839 --> 00:09:17.270
create a two new properties,
&gt;&gt; Lukas Ruebbelke: A value, and

127
00:09:17.270 --> 00:09:19.480
valid, and put them in here.

128
00:09:19.480 --> 00:09:22.180
So what we're doing is we're taking
this object and we're breaking it out

129
00:09:23.550 --> 00:09:27.760
into two essentially parameters,
value and valid.

130
00:09:27.760 --> 00:09:31.380
And is pulling them up off
of the subscriber object.

131
00:09:33.480 --> 00:09:37.125
&gt;&gt; Lukas Ruebbelke: I won't get too much
in the weeds on this, because I very easy

132
00:09:37.125 --> 00:09:42.420
could have just said subscriber, passed it
in, and then just pulled it off of that.

133
00:09:42.420 --> 00:09:44.610
This is just a really convenient
way using TypeScript,

134
00:09:44.610 --> 00:09:47.510
to say take this object and
pull off just the parameters I want.

135
00:09:48.560 --> 00:09:51.260
And from here, we're just logging it out.

136
00:09:52.350 --> 00:09:54.730
So we're just saying, value, or valid.

137
00:09:54.730 --> 00:09:57.760
So we can do whatever we want
if we were to extend this, but

138
00:09:57.760 --> 00:10:01.880
the next thing is like, well, how do you
reset the form, like what do you do?

139
00:10:03.130 --> 00:10:07.520
Well, this .subscriber.reset,
then you just set the properties you want.

140
00:10:08.570 --> 00:10:13.490
So now we're able to control
this programmatically instead of

141
00:10:13.490 --> 00:10:14.700
from the template.

142
00:10:16.360 --> 00:10:22.460
So, we could do subscriber.value,
subscriber.valid and get those.

143
00:10:22.460 --> 00:10:30.350
As well as we can call dot reset and
different things on the FormGroup.

144
00:10:30.350 --> 00:10:35.120
One thing I wanna point out here is that,
and

145
00:10:35.120 --> 00:10:38.720
I'll even do this,
this may explode but we'll see.

146
00:10:40.030 --> 00:10:41.390
Occasionally, I try to get brave and

147
00:10:41.390 --> 00:10:46.320
I try to actually augment the code in
my slides and it never goes well like,

148
00:10:48.130 --> 00:10:52.720
Keynote is a horrible ID
&gt;&gt; Lukas Ruebbelke: Don't judge me.

149
00:10:52.720 --> 00:10:53.220
No.

150
00:10:56.627 --> 00:10:57.980
&gt;&gt; Lukas Ruebbelke: And
this is just gonna bother me too.

151
00:10:57.980 --> 00:10:59.710
All right, I think I did.

152
00:11:00.940 --> 00:11:07.130
&gt;&gt; Lukas Ruebbelke: What you
could do is not pass this in,

153
00:11:07.130 --> 00:11:15.500
and we have,
&gt;&gt; Lukas Ruebbelke: And we could do this.

154
00:11:16.690 --> 00:11:23.720
I mean cuz it's in the class,
it's there, but

155
00:11:23.720 --> 00:11:28.760
based on our conversation earlier,
what is the problem with this method?

156
00:11:34.120 --> 00:11:37.050
&gt;&gt; Speaker 2: State-
&gt;&gt; Lukas Ruebbelke: There's hidden state.

157
00:11:37.050 --> 00:11:38.440
&gt;&gt; Speaker 2: Hidden state, yeah.

158
00:11:38.440 --> 00:11:43.390
&gt;&gt; Lukas Ruebbelke: So,
we could call this 1,000 times and

159
00:11:43.390 --> 00:11:48.490
never know what's gonna happen
without knowing the state

160
00:11:48.490 --> 00:11:53.400
of the value and
the validity of the FormGroup.

161
00:11:53.400 --> 00:11:57.811
So there are gonna be cases where
you're going to have to reference

162
00:11:57.811 --> 00:12:00.190
internal properties and methods.

163
00:12:00.190 --> 00:12:06.722
But, just like you have container
components, presentational components,

164
00:12:06.722 --> 00:12:13.120
is try to isolate as much as possible
your methods so they are pure.

165
00:12:13.120 --> 00:12:14.590
Meaning there are no side effects.

166
00:12:14.590 --> 00:12:20.210
And so in this case, when this gets
called whatever we're doing it's actually

167
00:12:20.210 --> 00:12:24.610
doing something that effect
outside of the thing.

168
00:12:25.660 --> 00:12:29.640
In this case if we put it back,
I know that

169
00:12:31.740 --> 00:12:37.230
if I call this 1,000 times and I pass in

170
00:12:37.230 --> 00:12:42.580
the same object 1,000 times, I'm going to
get the same result every single time.

171
00:12:44.240 --> 00:12:45.960
So this is called
referential transparency.

172
00:12:47.750 --> 00:12:51.490
And so we know now that if I pass this
in because there's no hidden state,

173
00:12:51.490 --> 00:12:54.140
it's a pure method,
I'm always going to get the same result.

174
00:12:55.963 --> 00:13:00.962
&gt;&gt; Lukas Ruebbelke: And so this is one
of the ways you reduce complexity is

175
00:13:00.962 --> 00:13:03.780
by reducing state.

176
00:13:03.780 --> 00:13:05.960
And so, as much as possible,

177
00:13:05.960 --> 00:13:11.390
I tried to do these pure functions that
there's no side effects, no hidden state.

178
00:13:11.390 --> 00:13:14.750
Everything that I need gets
passed in via perimeter.

179
00:13:16.230 --> 00:13:17.850
Which means,
I can now also pick this up and

180
00:13:17.850 --> 00:13:20.840
move it into utility class
which is I've done this before,

181
00:13:20.840 --> 00:13:24.420
where I write a bunch of small functions
and I'm like, I knew this somewhere else.

182
00:13:24.420 --> 00:13:25.880
I just pick it up and move it.

183
00:13:25.880 --> 00:13:28.891
And because I'm not referencing
anything else outside of those methods,

184
00:13:28.891 --> 00:13:29.759
it doesn't matter.

185
00:13:29.759 --> 00:13:31.780
I just keep passing what I need in,
and getting what I need out.

186
00:13:32.900 --> 00:13:38.970
So this is, again, reducing state,
&gt;&gt; Lukas Ruebbelke: In code really,

187
00:13:38.970 --> 00:13:41.290
reduces complexity.

