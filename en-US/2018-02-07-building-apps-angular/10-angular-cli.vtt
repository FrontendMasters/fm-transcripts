WEBVTT

1
00:00:00.420 --> 00:00:04.410
&gt;&gt; Lukas Ruebbelke: Let's get into the
Angular CLI, this is going to be a very,

2
00:00:04.410 --> 00:00:06.050
very, very quick module.

3
00:00:06.050 --> 00:00:10.130
This could be a theoretical topology for
in any application as you kind of have

4
00:00:10.130 --> 00:00:12.720
this division of these things and
these pieces.

5
00:00:14.070 --> 00:00:20.830
Well, if you've ever tried to put together
a workflow, it could also look like this.

6
00:00:21.830 --> 00:00:29.600
And even to a point is, who's using
Yeoman anymore, or Grunt or Bower?

7
00:00:29.600 --> 00:00:34.138
Like at one point,
they were incredibly prevalent, now,

8
00:00:34.138 --> 00:00:39.970
the entire ecosystem is shifted,
with npm and web had being major players.

9
00:00:39.970 --> 00:00:42.070
I mean, there are other things, but

10
00:00:42.070 --> 00:00:47.356
as a whole you have to really have
a deep understanding of your tool chain.

11
00:00:47.356 --> 00:00:52.160
And there is just tons of permutations,
and tools cropping up that,

12
00:00:52.160 --> 00:00:56.680
I think JavaScript as a language and
as a platform

13
00:00:56.680 --> 00:01:01.290
is not as mature as something like Java or
C# and use different things.

14
00:01:01.290 --> 00:01:06.210
And so you have a lot of I
think volatility around kind of

15
00:01:06.210 --> 00:01:11.430
what tools do you use, like npm,
well, who's heard of Yarn?

16
00:01:11.430 --> 00:01:13.670
That's the big hot thing,
should you be using Yarn?

17
00:01:13.670 --> 00:01:17.540
I don't know, these are kind of these
questions, do I use this tool or not?

18
00:01:17.540 --> 00:01:20.070
I'm so, I'm tired, it's fatigue.

19
00:01:20.070 --> 00:01:25.720
And so, this is kind of how I just
kind of feel about this sometimes.

20
00:01:25.720 --> 00:01:29.475
When I had to reason
about like what do I use?

21
00:01:29.475 --> 00:01:33.026
All right, well, so this is, I think,

22
00:01:33.026 --> 00:01:38.145
one of the best things around
Angular is that they provided

23
00:01:38.145 --> 00:01:43.437
CLI to streamline a lot of this.
&gt;&gt; Lukas Ruebbelke: And

24
00:01:43.437 --> 00:01:47.220
it quite simply is this.

25
00:01:47.220 --> 00:01:50.860
Before, if you did any of the Angular Beta
stuff, before they introduced the CLI,

26
00:01:50.860 --> 00:01:51.780
it was a mess.

27
00:01:51.780 --> 00:01:55.640
We couldn't decide, are we doing SystemJS,
are we doing WebPack,

28
00:01:55.640 --> 00:01:57.420
on and on and on and on.

29
00:01:57.420 --> 00:02:03.450
Now, install Angular CLI, and once
you've done that it really comes down to

30
00:02:03.450 --> 00:02:08.520
three lines: ng new, step into it,
ng serve, and that's it.

31
00:02:09.740 --> 00:02:14.596
This right here is reduced hours and
hours of time, frustration, and

32
00:02:14.596 --> 00:02:17.489
at least three buckets of tears on my end.

33
00:02:17.489 --> 00:02:24.754
Let me say this.
&gt;&gt; Lukas Ruebbelke: There is, I've run

34
00:02:24.754 --> 00:02:29.748
into some individuals, that it's like, I'm
a programmer, like, well what do you do?

35
00:02:29.748 --> 00:02:32.830
It's like, I build WordPress websites.

36
00:02:32.830 --> 00:02:35.806
And I'm not disparaging WordPress,
I think it's amazing.

37
00:02:35.806 --> 00:02:41.250
But because somebody can do a website and
they're using WordPress,

38
00:02:41.250 --> 00:02:45.980
is often times at least to a very shallow
understanding of actually how to program.

39
00:02:47.050 --> 00:02:51.990
And so using the Angular CLI,
especially the generators,

40
00:02:51.990 --> 00:02:55.540
can lead to a superficial understanding
of what's happening under the hood.

41
00:02:56.800 --> 00:03:01.110
And so initially, I recommend
do not use the CLI as a crutch.

42
00:03:02.530 --> 00:03:07.940
And so we're going to do a small
sample exercise in this module.

43
00:03:07.940 --> 00:03:10.360
When we get into components,
I'd like you to do it by hand.

44
00:03:11.820 --> 00:03:13.610
Take the time to build the muscle memory.

45
00:03:13.610 --> 00:03:18.850
And so for me, now I will use
the CLI because I know how it works,

46
00:03:18.850 --> 00:03:20.720
I know how the pieces work.

47
00:03:20.720 --> 00:03:25.500
But just doing it by hand is
the equivalent of playing piano scales,

48
00:03:25.500 --> 00:03:30.350
not super fun, but you basically
need to get that muscle memory so

49
00:03:30.350 --> 00:03:35.390
you know how things work and
then you can start to use the CLI.

50
00:03:35.390 --> 00:03:39.480
So I'm just encouraging everybody, don't
be like, why do I have to understand how

51
00:03:39.480 --> 00:03:42.200
to write a component,
like the CLI's gonna do it for me.

52
00:03:42.200 --> 00:03:45.260
Don't let it be a crutch,
really understand what's happening and

53
00:03:45.260 --> 00:03:46.284
build the muscle memory up.

54
00:03:46.284 --> 00:03:50.630
All right, so

55
00:03:50.630 --> 00:03:56.400
this is what you get, and I could stop at
the first line, mic drop, and walk off.

56
00:03:56.400 --> 00:03:59.608
So a fully functional
product that just works, yay.

57
00:03:59.608 --> 00:04:04.440
Code generators, build generation,
unit test runner, end-to-end test runner,

58
00:04:04.440 --> 00:04:07.812
you can deploy to GitHub pages,
linting, this is a big one,

59
00:04:07.812 --> 00:04:12.730
CSS preprocessor support,
ahead-of-time compilation, lazy routes.

60
00:04:12.730 --> 00:04:19.200
And I leave this on here, like I've talked
about this probably for two years and

61
00:04:19.200 --> 00:04:22.330
they keep promising me it's gonna
happen so I'm just leaving it on there.

62
00:04:23.500 --> 00:04:25.790
They keep saying that extensible
blueprints are coming soon,

63
00:04:25.790 --> 00:04:28.830
cuz what I would love to say is,
I need to create or

64
00:04:28.830 --> 00:04:32.540
generate this very specific thing,
let's say I had a fire-based service.

65
00:04:32.540 --> 00:04:37.370
I would love to just do a blueprint,
plug it in to my CLI, and

66
00:04:37.370 --> 00:04:41.140
be able to generate fire-based
specific things or whatever.

67
00:04:41.140 --> 00:04:44.826
More importantly is I would love for you
to do the blueprint and I downloaded it

68
00:04:44.826 --> 00:04:48.640
and benefit from your hard work, I mean,
so that's the point of an ecosystem.

69
00:04:50.030 --> 00:04:56.420
Hopefully that'll happen, my broker, he
said it, he promised it, so we will see.

70
00:04:58.090 --> 00:05:02.820
So, real simple commands, npm install, -g,

71
00:05:02.820 --> 00:05:06.430
angular/cli, so
this just installs it as a global package.

72
00:05:08.760 --> 00:05:15.227
ng new, step into it, ng serve.
&gt;&gt; Lukas Ruebbelke: Now,

73
00:05:15.227 --> 00:05:20.350
I will say this,
the time between ng new and ng serve is,

74
00:05:20.350 --> 00:05:26.018
it will vary but probably a good
time to take a bathroom break or

75
00:05:26.018 --> 00:05:32.140
at least get some coffee,
it takes a couple of minutes sometimes.

76
00:05:33.280 --> 00:05:40.670
From here we wanna generate a component,
ng generate component my-new component.

77
00:05:40.670 --> 00:05:42.590
The beauty of this is, that

78
00:05:44.480 --> 00:05:48.880
when you use this it's going to
automatically adhere to best practices.

79
00:05:50.950 --> 00:05:55.280
You can shortcut this ng
g c my-new-component, so

80
00:05:55.280 --> 00:05:57.190
these are the aliases.

81
00:05:57.190 --> 00:06:02.580
And in the case of this project, because
you have multiple modules especially in

82
00:06:02.580 --> 00:06:08.010
the route, you have to tell it
where to put the component.

83
00:06:08.010 --> 00:06:09.750
What module does this get attached to?

84
00:06:09.750 --> 00:06:14.070
And so, -m app.module.ts, in this case.

85
00:06:16.240 --> 00:06:19.390
Services, same thing, ng g s my-service.

86
00:06:21.690 --> 00:06:24.140
Want to do a production build, ng build.

87
00:06:25.610 --> 00:06:31.192
What about, you want to test,
ng test, end to end testing, ng e2e.

88
00:06:31.192 --> 00:06:35.816
And I'm pretty sure that these two and
a few other ones are actually,

89
00:06:35.816 --> 00:06:39.323
if you look at your
package.json it's npm test, so

90
00:06:39.323 --> 00:06:44.346
they actually just created that alias
to be a little bit more idiomatic with

91
00:06:44.346 --> 00:06:50.321
kind of the rest of the universe.
&gt;&gt; Lukas Ruebbelke: Want

92
00:06:50.321 --> 00:06:52.200
to check your code quality?

93
00:06:52.200 --> 00:06:54.610
Ng lint, I use this quite a bit.

94
00:06:57.730 --> 00:07:02.690
And if you wanted to deploy to GitHub
pages, pretty straightforward,

95
00:07:02.690 --> 00:07:06.860
I haven't done this but
I could see where somebody would want to.

