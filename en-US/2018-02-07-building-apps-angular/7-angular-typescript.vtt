WEBVTT

1
00:00:00.300 --> 00:00:01.690
&gt;&gt; Lucas: So properties.

2
00:00:01.690 --> 00:00:04.930
So this is a few TypeScript
things that I wanna point out.

3
00:00:04.930 --> 00:00:07.890
I've just gotten so
used to them I forget they're not in ES6.

4
00:00:09.270 --> 00:00:13.370
And now that I've gotten used to it,
I yearn for

5
00:00:13.370 --> 00:00:14.980
the day that this just
becomes the standard.

6
00:00:14.980 --> 00:00:20.248
So what we have here is
called field assignment.

7
00:00:21.832 --> 00:00:22.924
&gt;&gt; Lucas: Is that we're just saying,

8
00:00:22.924 --> 00:00:25.220
here's these properties,
attach them to the class.

9
00:00:25.220 --> 00:00:29.140
You cannot do this in ES6,
this has to go in the constructor.

10
00:00:29.140 --> 00:00:32.078
Well TypeScript just says, look,
you put it here, and we know enough.

11
00:00:32.078 --> 00:00:35.350
When you generate this,
we just wire it up for you.

12
00:00:35.350 --> 00:00:39.770
So being able to define your properties
outside of a constructor, really nice.

13
00:00:40.790 --> 00:00:45.400
As well as, we have obviously type typing.

14
00:00:45.400 --> 00:00:49.930
So we can say Item, or
selectedItem, it's an item.

15
00:00:49.930 --> 00:00:51.200
And we can know things about that.

16
00:00:52.480 --> 00:00:54.190
As well as we can say we have items,

17
00:00:54.190 --> 00:00:59.800
we can say this is an array of items,
or an array of item objects.

18
00:00:59.800 --> 00:01:01.770
We can know things about that.

19
00:01:01.770 --> 00:01:05.100
So what this does is it allows us
to communicate intent not only to

20
00:01:05.100 --> 00:01:06.300
other developers.

21
00:01:06.300 --> 00:01:08.234
So it's really handy when you get to say,
what does this thing do?

22
00:01:08.234 --> 00:01:09.350
What's coming down the pipeline?

23
00:01:10.600 --> 00:01:14.330
I can infer that this is an item object.

24
00:01:14.330 --> 00:01:16.880
But also, and this is really,
really, important,

25
00:01:16.880 --> 00:01:23.270
is that it communicates intent
to your IDE and your compilers.

26
00:01:23.270 --> 00:01:26.525
Because now they know this
is exactly what it is and

27
00:01:26.525 --> 00:01:30.490
they can optimize not only your
workflow but your end build.

28
00:01:32.642 --> 00:01:35.200
&gt;&gt; Lucas: Last but
not least, well, two things.

29
00:01:35.200 --> 00:01:36.865
So one, we have the interface.

30
00:01:36.865 --> 00:01:42.791
So by saying implements, we're basically
saying this has to behave a certain way.

31
00:01:42.791 --> 00:01:46.473
And so
if you get into design patterns that, say,

32
00:01:46.473 --> 00:01:51.383
favor composition over inheritance,
and so being able to program

33
00:01:51.383 --> 00:01:56.140
to an interface instead of
a concrete instance is really power.

34
00:01:56.140 --> 00:02:00.220
Because as long as something adheres
to an interface or honors a contract,

35
00:02:01.280 --> 00:02:05.620
that we really don't care what it
actually is in the concrete sense.

36
00:02:05.620 --> 00:02:11.109
You just know that I'm getting this thing,
and it basically honors this contract,

37
00:02:11.109 --> 00:02:14.917
and therefore,
I know there's this expected behavior.

38
00:02:14.917 --> 00:02:17.706
So let's take for instance Uber.

39
00:02:17.706 --> 00:02:19.170
We have Uber drivers.

40
00:02:19.170 --> 00:02:26.110
So every Uber driver, in a way, adheres
to this Uber interface or contract.

41
00:02:26.110 --> 00:02:29.430
So I know that when
an Uber driver pulls up,

42
00:02:29.430 --> 00:02:32.260
I have expectations about how that
interaction is going to work.

43
00:02:33.330 --> 00:02:39.600
Now it doesn't matter if I'm in a Hyundai,
a Honda, an Escalade, or whatever it is.

44
00:02:39.600 --> 00:02:44.869
I know, because they essentially are
adhering to this contract, that, though

45
00:02:44.869 --> 00:02:50.302
the actual implementation's different
every time, the experience is the same.

46
00:02:50.302 --> 00:02:55.290
So this is kind of a high software
engineering, architecture discussion.

47
00:02:55.290 --> 00:03:00.020
But being able to program to
an interface is super, super important.

48
00:03:00.020 --> 00:03:04.291
And it allows you to do some very
interesting things with composition.

49
00:03:04.291 --> 00:03:10.110
And then finally, we are doing what
is called constructor assignment.

50
00:03:10.110 --> 00:03:17.540
And so, in JavaScript, your parameters on
a function is scoped to that function.

51
00:03:17.540 --> 00:03:22.850
So you can see here, I have ItemsService
being is a parameter to the constructor.

52
00:03:22.850 --> 00:03:28.415
But down here, outside of the function,
and in an another one, I'm able to use it.

53
00:03:28.415 --> 00:03:29.310
How is that happening?

54
00:03:30.770 --> 00:03:35.060
Well, by adding in an access
modifier such as private or

55
00:03:35.060 --> 00:03:39.470
public TypeScript goes ahead and
says, okay.

56
00:03:39.470 --> 00:03:42.140
We know that, because this is private or

57
00:03:42.140 --> 00:03:47.170
public, this is an instance on the class,
let's go ahead and add it for you.

58
00:03:48.320 --> 00:03:54.412
So under the hood, it's basically saying
this.itemsService equals ItemsService,

59
00:03:54.412 --> 00:03:59.330
the parameter, which then allows you
to use it outside of the method.

60
00:03:59.330 --> 00:04:03.350
Super, super convenient.

61
00:04:03.350 --> 00:04:09.785
If I were to do AngularJS now, it would
be with ES6, using the architecture.

62
00:04:09.785 --> 00:04:13.550
Because it is ES6, it gets really tedious.

63
00:04:13.550 --> 00:04:16.349
Seeing I have these four dependencies,
and you're basically

64
00:04:16.349 --> 00:04:20.620
this.service equals service,
this.another service equals service.

65
00:04:20.620 --> 00:04:24.780
But that's what you have to do to get
it to work outside of the constructor.

66
00:04:24.780 --> 00:04:27.960
In this case,
TypeScript does it for us, yes?

67
00:04:27.960 --> 00:04:31.760
&gt;&gt; Speaker 2: If you do public, will it
create a single instance of ItemsService?

68
00:04:31.760 --> 00:04:32.593
&gt;&gt; Lucas: I do not believe so.

69
00:04:36.720 --> 00:04:37.742
&gt;&gt; Lucas: Boom.

70
00:04:39.652 --> 00:04:41.814
&gt;&gt; Lucas: So this is types,
so this is an interface.

71
00:04:44.740 --> 00:04:50.220
&gt;&gt; Lucas: Field assignment,
dependency injection, interfaces.

