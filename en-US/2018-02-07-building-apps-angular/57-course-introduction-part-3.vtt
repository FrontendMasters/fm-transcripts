WEBVTT

1
00:00:00.210 --> 00:00:05.080
&gt;&gt; Lukas Ruebbelke: The goal today is to
have a strong grasp on how to launch and

2
00:00:05.080 --> 00:00:07.716
support an Angular application.

3
00:00:07.716 --> 00:00:12.790
So, we,
in the course description says we reserve

4
00:00:12.790 --> 00:00:17.038
the right to change things, as we see fit.

5
00:00:17.038 --> 00:00:19.453
And so this is still the goal.

6
00:00:19.453 --> 00:00:25.380
So we're gonna talk about building and
testing and deploying.

7
00:00:25.380 --> 00:00:31.390
And some static analysis in some of these
things, which I think are super important.

8
00:00:31.390 --> 00:00:36.448
But because I am responsive and
my favorite part of doing what I do and

9
00:00:36.448 --> 00:00:41.594
having the honor of being an instructor,
is being able to go and ask,

10
00:00:41.594 --> 00:00:46.832
like what problems are you having,
what challenges are you facing and

11
00:00:46.832 --> 00:00:51.321
then kind of adjust accordingly and
address some of those.

12
00:00:51.321 --> 00:00:56.234
So, this morning,
we are going to do a review.

13
00:00:56.234 --> 00:01:00.420
And then we're just going to have
a high level conversation about

14
00:01:00.420 --> 00:01:02.180
applications in general.

15
00:01:03.340 --> 00:01:08.030
And specifically
application complexity and

16
00:01:08.030 --> 00:01:13.020
just set the stage for some very practical
things that we can do within our Angular

17
00:01:13.020 --> 00:01:17.570
application to alleviate those problems.

18
00:01:17.570 --> 00:01:21.370
So, for instance, one of the conversations
we had was I have this wire frame,

19
00:01:21.370 --> 00:01:23.950
how do I actually break it
down in two components?

20
00:01:23.950 --> 00:01:25.520
So where does it go?

21
00:01:25.520 --> 00:01:29.542
So, maybe later this afternoon or maybe
this morning, when I get to wire frames,

22
00:01:29.542 --> 00:01:32.340
we may even just sit down and
take and opportunity to say,

23
00:01:32.340 --> 00:01:35.630
well this is how this would
kind of fit together.

24
00:01:35.630 --> 00:01:39.027
But talking about application complexity,

25
00:01:39.027 --> 00:01:43.048
then we're gonna talk about
immutable operations,

26
00:01:43.048 --> 00:01:47.801
reactive forms, event communication and
route parameters.

27
00:01:47.801 --> 00:01:51.211
And as a bonus, there is an Angular,

28
00:01:51.211 --> 00:01:55.729
a firebased example that
I cooked up last night.

29
00:01:55.729 --> 00:02:00.610
And so, I'm not for
sure where we will work that in and but

30
00:02:00.610 --> 00:02:06.126
it's definitely there and
there is a specific branch for that.

31
00:02:06.126 --> 00:02:10.344
So these are kind of a list this morning,
we're gonna have fun and

32
00:02:10.344 --> 00:02:15.960
we're talk about some very specific things
around solving application complexity.

33
00:02:15.960 --> 00:02:21.483
And then, I think later this afternoon,
we're going to talk about testing and

34
00:02:21.483 --> 00:02:26.358
debugging, static analysis,
angular performance and deploying.

35
00:02:26.358 --> 00:02:31.120
Which I'm a little on the fence with
the deploying portion because by the time

36
00:02:31.120 --> 00:02:34.635
we get there,
everything that I would have said is we've

37
00:02:34.635 --> 00:02:37.790
already talked about in
the other three modules.

38
00:02:37.790 --> 00:02:43.540
But it's there and so,
we'll just see how that works but

39
00:02:43.540 --> 00:02:46.720
that would be you know something that
once you start to see these commands,

40
00:02:46.720 --> 00:02:49.280
you're like like the angular
sale like does this?

41
00:02:49.280 --> 00:02:51.470
Not a lot to talk about there,
it's taken care of.

