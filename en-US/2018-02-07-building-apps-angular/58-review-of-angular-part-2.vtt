WEBVTT

1
00:00:00.230 --> 00:00:02.310
&gt;&gt; Lucas Ruebbelke: Let's
do a little bit of review.

2
00:00:02.310 --> 00:00:06.420
I know everybody is sick of this
graphic but it's so important.

3
00:00:06.420 --> 00:00:10.840
What kind of bindings go on each side?

4
00:00:10.840 --> 00:00:15.610
So on stage right?

5
00:00:15.610 --> 00:00:18.933
So class detemplate what kind of binding

6
00:00:18.933 --> 00:00:19.719
is that?

7
00:00:19.719 --> 00:00:21.390
&gt;&gt; Speaker 2: Event.
&gt;&gt; Speaker 3: Or

8
00:00:21.390 --> 00:00:22.322
property.
&gt;&gt; Speaker 4: Property.

9
00:00:22.322 --> 00:00:24.110
&gt;&gt; Lucas Ruebbelke: Property.

10
00:00:24.110 --> 00:00:28.250
So we're sending a property
on the class to the template.

11
00:00:28.250 --> 00:00:29.680
Now what goes on the other side?

12
00:00:29.680 --> 00:00:30.830
Say it.
&gt;&gt; Speaker 2: Event.

13
00:00:30.830 --> 00:00:32.330
&gt;&gt; Lucas Ruebbelke: Yeah, all right.

14
00:00:34.620 --> 00:00:40.926
So with that in mind, how would we
define this as custom bindings?

15
00:00:40.926 --> 00:00:45.641
Class to template, is?

16
00:00:45.641 --> 00:00:48.742
If we're sending something
into the template?

17
00:00:48.742 --> 00:00:50.398
&gt;&gt; Speaker 5: Output.

18
00:00:50.398 --> 00:00:50.927
&gt;&gt; Lucas Ruebbelke: We're sending

19
00:00:50.927 --> 00:00:54.000
something into the template?
&gt;&gt; Speaker 6: Input.

20
00:00:54.000 --> 00:00:55.730
&gt;&gt; Lucas Ruebbelke: Input, yes.

21
00:00:55.730 --> 00:00:58.220
Now, if something is coming out

22
00:00:58.220 --> 00:01:00.540
of the template that we wanna capture?

23
00:01:00.540 --> 00:01:01.480
&gt;&gt; Speaker 6: Output.
&gt;&gt; Lucas Ruebbelke: Output.

24
00:01:01.480 --> 00:01:03.050
&gt;&gt; Speaker 6: New chart.

25
00:01:03.050 --> 00:01:04.060
&gt;&gt; Lucas Ruebbelke: So input is

26
00:01:04.060 --> 00:01:04.680
into the template.

27
00:01:04.680 --> 00:01:07.370
Output is something that's coming out,
and we need to handle it.

28
00:01:09.690 --> 00:01:12.390
So let's fill in the blanks here.

29
00:01:12.390 --> 00:01:19.190
So in the parent, class the template
is corner pocket over here.

30
00:01:20.610 --> 00:01:24.420
Just say what you said the last time.
&gt;&gt; Speaker 2: Property.

31
00:01:24.420 --> 00:01:25.760
&gt;&gt; Lucas Ruebbelke: Yes, p is for

32
00:01:25.760 --> 00:01:27.130
property.

33
00:01:27.130 --> 00:01:30.580
Okay, so
from template back into the class.

34
00:01:33.220 --> 00:01:36.270
Say what you said last time [LAUGH]
&gt;&gt; Speaker 3: Event.

35
00:01:36.270 --> 00:01:37.460
&gt;&gt; Lucas Ruebbelke: There we go.

36
00:01:37.460 --> 00:01:41.550
Okay, so that is just from the parent
component to a child component,

37
00:01:41.550 --> 00:01:46.680
those bindings are pretty
much standard modus operandi.

38
00:01:46.680 --> 00:01:52.220
Now, from a parent
template into the class,

39
00:01:52.220 --> 00:01:55.128
so we're sending something from
the template into the class.

40
00:01:55.128 --> 00:01:58.910
That is what?

41
00:01:58.910 --> 00:02:00.200
What's that?
&gt;&gt; Speaker 3: Output.

42
00:02:00.200 --> 00:02:01.610
&gt;&gt; Lucas Ruebbelke: Input, input, so

43
00:02:01.610 --> 00:02:03.299
we're sending it into the class.

44
00:02:04.740 --> 00:02:10.053
Now, from the class back
to the parent template.

45
00:02:10.053 --> 00:02:10.941
&gt;&gt; Speaker 4: Output.

46
00:02:10.941 --> 00:02:11.829
&gt;&gt; Lucas Ruebbelke: Yes.

47
00:02:15.336 --> 00:02:16.073
&gt;&gt; Lucas Ruebbelke: So parent and

48
00:02:16.073 --> 00:02:18.668
child
&gt;&gt; Lucas Ruebbelke: And

49
00:02:18.668 --> 00:02:21.749
from the child back to the parent.

50
00:02:23.050 --> 00:02:28.260
What's interesting is we were going to
talk about you need the rational data flow

51
00:02:28.260 --> 00:02:34.060
and touch on Redux and ngrx,
this kind of pattern here

52
00:02:34.060 --> 00:02:40.210
of state flowing down and events
flowing up is the same exact approach.

53
00:02:40.210 --> 00:02:45.220
And so, but I think it's pretty awesome
with this component driven architecture.

54
00:02:45.220 --> 00:02:50.610
Redux fits so nicely on top of
it because it's the same flow.

55
00:02:50.610 --> 00:02:54.010
It's that when you have a parent
component and a child component,

56
00:02:54.010 --> 00:02:57.350
you are sending state for
the parent component, the child component.

57
00:02:57.350 --> 00:02:59.370
So everything essentially flows down.

58
00:02:59.370 --> 00:03:01.786
Parent to child do the tree.

59
00:03:01.786 --> 00:03:07.375
Now when something happens those
events flow back up with the Redux.

60
00:03:07.375 --> 00:03:12.271
And so, it's somehow intention to get into
this but I wanna start setting kind of

61
00:03:12.271 --> 00:03:16.807
this stage, so that if you were going
to go beyond this workshop, I will say

62
00:03:16.807 --> 00:03:22.700
the next steps would be learn how to build
reactive angular applications with ngrx.

63
00:03:22.700 --> 00:03:26.590
And to that end,
that pattern is data flows down or

64
00:03:26.590 --> 00:03:30.610
state flows down from the store,
into your components.

65
00:03:30.610 --> 00:03:37.790
And when something happens, events or
actions flow back up to be processed.

66
00:03:37.790 --> 00:03:42.600
And so, I think kind of
the analogy I would make is,

67
00:03:42.600 --> 00:03:46.720
because it drastically reduces
the complexity in your app.

68
00:03:46.720 --> 00:03:52.340
Would you rather cross a one way street or
an eight lane super highway?

69
00:03:53.960 --> 00:03:57.470
Well, it's much easier to reason
how do I get across the street and

70
00:03:57.470 --> 00:04:01.590
what's happening than when you
are in kind of this mish mash

71
00:04:01.590 --> 00:04:05.560
application thing of where is everything
coming, where is everything going.

72
00:04:05.560 --> 00:04:09.210
And so, once you simplify
kind of that dataflow and

73
00:04:09.210 --> 00:04:12.780
event flow,
things start to make quite a bit of sense.

74
00:04:12.780 --> 00:04:15.290
It's like, what's changing this thing?

75
00:04:15.290 --> 00:04:18.380
Then you just keep going
up until you find it.

76
00:04:18.380 --> 00:04:24.610
So just kind of setting that little kind
of future kind of, go check this out.

77
00:04:24.610 --> 00:04:28.994
Because we're just taking this idea and
it expands perfectly in the Redux,

78
00:04:28.994 --> 00:04:32.555
which solves state management and
control flow really really

79
00:04:32.555 --> 00:04:37.158
well.
&gt;&gt; Lucas Ruebbelke: So

80
00:04:37.158 --> 00:04:42.980
how does observables change this diagram?

81
00:04:42.980 --> 00:04:47.440
So we used to provide some input,
we get some output.

82
00:04:49.260 --> 00:04:51.470
What is happening at the bottom?

83
00:04:51.470 --> 00:04:56.499
With an observable,
what is the relationship now that these

84
00:04:56.499 --> 00:05:05.049
two boxes have with each other?
&gt;&gt; Speaker 7: Flipped basically,

85
00:05:05.049 --> 00:05:08.390
so the outputs driving the input.
&gt;&gt; Lucas Ruebbelke: Exactly,

86
00:05:08.390 --> 00:05:13.550
so you take the output and
the input, and you flip them.

87
00:05:13.550 --> 00:05:16.630
So generally, we are just very conditioned
to, I'm going to give you some input,

88
00:05:16.630 --> 00:05:18.690
you're going to give me some output.

89
00:05:18.690 --> 00:05:21.550
So it's kind of this pull,
you're pulling things to you.

90
00:05:21.550 --> 00:05:26.000
So if you do not initiate that actual
function call with that input,

91
00:05:26.000 --> 00:05:28.440
you're not going to get the output.

92
00:05:28.440 --> 00:05:30.750
So it's very much a pull relationship.

93
00:05:31.920 --> 00:05:36.510
With observables, that's flip-flop and
there's output happening.

94
00:05:37.920 --> 00:05:41.550
You simply need to decide where you
initially want to hook into it, so

95
00:05:41.550 --> 00:05:42.803
that initial output and

96
00:05:42.803 --> 00:05:48.685
then just figure where you wanna put it.
&gt;&gt; Lucas Ruebbelke: And so just for me,

97
00:05:48.685 --> 00:05:53.882
just kinda that paradigm shift of there is
actually an excellent talk by Bob Limart

98
00:05:53.882 --> 00:05:59.231
who is I think instrumental in me wrapping
my mind around observables and Redux these

99
00:05:59.231 --> 00:06:05.330
different things is that he has a really
good talk called everything is a stream.

100
00:06:05.330 --> 00:06:10.070
And think about that,
we're always receiving data over time.

101
00:06:10.070 --> 00:06:14.630
Whether it's mouse events,
it's new user interactions or whatever.

102
00:06:14.630 --> 00:06:16.760
This data is constantly updating.

103
00:06:16.760 --> 00:06:20.330
We live in this very dynamic,
ever changing world.

104
00:06:20.330 --> 00:06:24.650
Well, when you start to see the world
as a stream, you simply need to say,

105
00:06:24.650 --> 00:06:28.720
what do I wanna hook into and
what do I wanna do with it.

106
00:06:28.720 --> 00:06:33.599
Where do I wanna put it in my application?
&gt;&gt; Lucas Ruebbelke: So

107
00:06:33.599 --> 00:06:40.305
with that in mind,
&gt;&gt; Lucas Ruebbelke: What is missing,

108
00:06:40.305 --> 00:06:42.320
and kinda how does this diagram work?

109
00:06:42.320 --> 00:06:46.650
So this is just a really kind of
extension from the previous slide.

110
00:06:46.650 --> 00:06:49.460
Initial.
&gt;&gt; Speaker 8: Initial output, final input.

111
00:06:49.460 --> 00:06:50.220
&gt;&gt; Lucas Ruebbelke: Right, so

112
00:06:50.220 --> 00:06:54.110
how does this look like in real life?

113
00:06:55.660 --> 00:07:02.413
An initial output would be?
&gt;&gt; Speaker 9: Observable.

114
00:07:02.413 --> 00:07:03.420
&gt;&gt; Speaker 7: Event.

115
00:07:03.420 --> 00:07:03.960
&gt;&gt; Lucas Ruebbelke: Yep, so it's

116
00:07:03.960 --> 00:07:05.320
an event.
&gt;&gt; Speaker 7: Event.

117
00:07:05.320 --> 00:07:05.990
&gt;&gt; Lucas Ruebbelke: So something is

118
00:07:05.990 --> 00:07:10.040
happening, that we want to capture.

119
00:07:10.040 --> 00:07:15.210
So whether it's a click, or
something, typing in a text box or

120
00:07:15.210 --> 00:07:17.520
you're getting some kind
of response from a server.

121
00:07:17.520 --> 00:07:21.980
Something is happening,
there's some event that we are capturing.

122
00:07:21.980 --> 00:07:27.528
And so at the bottom,
what is your final input

123
00:07:27.528 --> 00:07:33.027
practically speaking.
&gt;&gt; Lucas Ruebbelke: Like,

124
00:07:33.027 --> 00:07:37.388
how do you consume an observable string?
&gt;&gt; Speaker 7: Subscribe.

125
00:07:37.388 --> 00:07:41.640
&gt;&gt; Lucas Ruebbelke: That's it, subscribe.

126
00:07:41.640 --> 00:07:45.990
So when you have an obseravable string and

127
00:07:45.990 --> 00:07:47.970
you are ready to consume it and
kind of finalize this.

128
00:07:47.970 --> 00:07:50.940
I think of it as kind of this final
function called the end of it,

129
00:07:50.940 --> 00:07:52.670
it's .subscribe.

130
00:07:52.670 --> 00:07:57.220
At which point you are essentially taking
control back from the stream and saying,

131
00:07:57.220 --> 00:07:59.390
okay, give me what you have
I'll take it from here.

132
00:08:00.470 --> 00:08:03.400
And then, what is in the middle,

133
00:08:03.400 --> 00:08:07.360
what is kinda the magic sauce here?
&gt;&gt; Speaker 7: All the operators

134
00:08:07.360 --> 00:08:10.290
to for millions of that.
&gt;&gt; Lucas Ruebbelke: I

135
00:08:10.290 --> 00:08:11.730
actually wonder how many there are.

136
00:08:11.730 --> 00:08:14.640
It's somewhere between a hundred and
a million, it feels like.

137
00:08:14.640 --> 00:08:19.634
But the idea is that you can just stack
them on top of each other to do whatever

138
00:08:19.634 --> 00:08:24.357
you need.
&gt;&gt; Lucas Ruebbelke: So

139
00:08:24.357 --> 00:08:29.193
with that in mind, so initial output,

140
00:08:29.193 --> 00:08:35.498
final input, and
the transformation operators,

141
00:08:35.498 --> 00:08:41.150
let's kind of look at this piece of code.

142
00:08:41.150 --> 00:08:45.784
And who can tell me
where the initial output

143
00:08:45.784 --> 00:08:50.459
is?
&gt;&gt; Lucas Ruebbelke: I'm just gonna call on

144
00:08:50.459 --> 00:08:52.520
you, you're just so intently.

145
00:08:52.520 --> 00:08:54.660
Like, where is the stream
originating from?

146
00:08:59.977 --> 00:09:01.681
&gt;&gt; Lucas Ruebbelke: Do, do, do, do,

147
00:09:01.681 --> 00:09:02.546
do, do.

148
00:09:02.546 --> 00:09:08.242
Like, where's the genesis of it?
&gt;&gt; Speaker 5: [CROSSTALK]

149
00:09:08.242 --> 00:09:10.386
Observable.fromEvent, yeah.
&gt;&gt; Lucas Ruebbelke: Yep.

150
00:09:12.062 --> 00:09:12.617
&gt;&gt; Lucas Ruebbelke: And so

151
00:09:12.617 --> 00:09:16.200
this is the Observable.fromEvent.

152
00:09:16.200 --> 00:09:19.170
It's capturing this event from the DOM and

153
00:09:19.170 --> 00:09:24.994
it's converting it into an observable.

154
00:09:26.490 --> 00:09:28.570
Okay, so that's the initial output.

155
00:09:28.570 --> 00:09:32.980
But this could be,
I mean all sort of things.

156
00:09:32.980 --> 00:09:39.250
Mouse move, dragon drop is really
quite simple to do this with.

157
00:09:39.250 --> 00:09:43.230
So if you've ever tried a new dragon
drop that can get very complicated.

158
00:09:43.230 --> 00:09:50.067
Well, you can do it in about five
lines of code with observables.

159
00:09:50.067 --> 00:09:54.645
Okay, so final input.

160
00:09:54.645 --> 00:09:57.901
This one should be pretty easy.

161
00:09:57.901 --> 00:10:02.340
I want one of you four,
throw me a bone here.

162
00:10:02.340 --> 00:10:04.920
What do we got?

163
00:10:04.920 --> 00:10:09.850
Where is the stream ending?
&gt;&gt; Speaker 8: The subscribe block.

164
00:10:09.850 --> 00:10:10.730
&gt;&gt; Lucas Ruebbelke: The subscribe

165
00:10:10.730 --> 00:10:11.520
block, yes.

166
00:10:12.630 --> 00:10:14.960
Very good.
And so, this is where you're saying, okay,

167
00:10:16.630 --> 00:10:21.050
we're ready to take control of
the stream and do something with it.

168
00:10:22.870 --> 00:10:25.680
In our application,
specifically in our component.

169
00:10:25.680 --> 00:10:30.560
And so then, right in between this,
we have all of our operators.

170
00:10:30.560 --> 00:10:36.525
So debounce, distincUntilChanged,
switchMap, on and on and on.

171
00:10:36.525 --> 00:10:42.640
And so, there's just infinite
permutations that you can do with these.

172
00:10:44.550 --> 00:10:50.750
But again, initial output, final input.

173
00:10:50.750 --> 00:10:52.130
So output to input.

174
00:10:53.390 --> 00:10:55.500
So something is happening,
you're capturing it.

175
00:10:55.500 --> 00:10:58.830
It's being pushed and shared application,
you figured out where you wanna put it.

176
00:11:01.030 --> 00:11:04.244
And then you use the operators to

177
00:11:04.244 --> 00:11:08.767
determine the shape that
you wanted to be in,

178
00:11:08.767 --> 00:11:14.489
when it gets there.
&gt;&gt; Lucas Ruebbelke: So

179
00:11:14.489 --> 00:11:19.174
for instance
&gt;&gt; Lucas Ruebbelke: And

180
00:11:19.174 --> 00:11:20.620
I should put these in the slides.

181
00:11:20.620 --> 00:11:22.250
I will actually add this to it.

182
00:11:22.250 --> 00:11:26.638
There is a website that I created,

183
00:11:26.638 --> 00:11:31.639
RXJS for the win, so it's rxftw.in.

184
00:11:38.423 --> 00:11:39.221
&gt;&gt; Lucas Ruebbelke: Right here,

185
00:11:39.221 --> 00:11:45.348
I think it'll actually take me here.
&gt;&gt; Lucas Ruebbelke: And

186
00:11:45.348 --> 00:11:48.213
so, when you have some spare time,

187
00:11:48.213 --> 00:11:53.370
there's some screen cast here And
some different things is that

188
00:11:53.370 --> 00:11:59.420
you can start to compose these
strings in really interesting ways.

189
00:11:59.420 --> 00:12:03.440
But one of the first
things that I do here is

190
00:12:04.960 --> 00:12:09.810
if you were going to do a clicker.

191
00:12:09.810 --> 00:12:12.260
So I'll take this off,
I'm just gonna move back to the slides,

192
00:12:12.260 --> 00:12:14.710
that's the one,
let's gonna think about this.

193
00:12:14.710 --> 00:12:18.400
If you are going to have a button
that every time you click it,

194
00:12:18.400 --> 00:12:23.690
it would basically like
increment something by one.

195
00:12:23.690 --> 00:12:27.240
So imagine like a standard,
you're playing kind of any sport and

196
00:12:27.240 --> 00:12:30.910
your measuring shots, reps, whatever.

197
00:12:30.910 --> 00:12:33.950
I did a version of this a long
time ago with Firebase and

198
00:12:33.950 --> 00:12:36.192
it was just this real time scoreboard.

199
00:12:36.192 --> 00:12:39.315
And some guy could be like
basically send me an email, hey,

200
00:12:39.315 --> 00:12:44.510
I do Crossfit games in Florida and I'll
pay you $1,000 to make one little change.

201
00:12:44.510 --> 00:12:45.960
It's like perfect.

202
00:12:45.960 --> 00:12:48.780
So this idea of like you just,
in other words was,

203
00:12:48.780 --> 00:12:52.170
here is your athlete,
a plus and minus button.

204
00:12:52.170 --> 00:12:53.450
Increment, decrement.

205
00:12:53.450 --> 00:12:58.811
So you are doing 20 push ups,
click, click, click, click.

206
00:12:58.811 --> 00:13:04.306
So now imagine every time that plus button

207
00:13:04.306 --> 00:13:08.860
is clicked, is generating what?

208
00:13:10.310 --> 00:13:13.740
A DOM event but
we don't care about the DOM event.

209
00:13:13.740 --> 00:13:17.740
What ultimately we want is to know
that when we click this button

210
00:13:17.740 --> 00:13:19.060
it's going to increment by one.

211
00:13:20.180 --> 00:13:25.850
So what you can simply do is
say map event return one.

212
00:13:28.160 --> 00:13:33.600
Because what happens if you had, for
instance, you were playing basketball

213
00:13:33.600 --> 00:13:37.440
and you have free throw, free throw.

214
00:13:37.440 --> 00:13:41.460
So that's one point,
standard shot two and a three pointer.

215
00:13:41.460 --> 00:13:43.990
So now you wanna a plus one,
plus two and a plus three button.

216
00:13:45.140 --> 00:13:46.105
What would you do there?

217
00:13:46.105 --> 00:13:49.557
Well, map event return one,

218
00:13:49.557 --> 00:13:55.090
map event return two,
map event return three.

219
00:13:55.090 --> 00:13:57.584
And then it just get
sent down the stream and

220
00:13:57.584 --> 00:14:00.817
add it to the total.
&gt;&gt; Lucas Ruebbelke: And

221
00:14:00.817 --> 00:14:03.352
so, this is where you
can say this event or

222
00:14:03.352 --> 00:14:07.950
this button click actually
represents this in this domain.

223
00:14:07.950 --> 00:14:09.100
So that is the idea.

224
00:14:09.100 --> 00:14:12.228
Using these apparatus,
you can one capture events and

225
00:14:12.228 --> 00:14:14.744
then make them represent
anything you would

226
00:14:14.744 --> 00:14:21.180
like.
&gt;&gt; Lucas Ruebbelke: Any

227
00:14:21.180 --> 00:14:23.490
questions about that?

228
00:14:23.490 --> 00:14:28.110
How do we as a whole,
like observable, are they cool?

229
00:14:28.110 --> 00:14:34.790
It kinda makes sense or they seem hard.
&gt;&gt; Speaker 5: In the current

230
00:14:34.790 --> 00:14:39.390
example of when you do the math and return
one, where are you doing the accumulation?

231
00:14:39.390 --> 00:14:42.860
Is it happening by default or
is it happening through a function?

232
00:14:42.860 --> 00:14:46.370
Or?
&gt;&gt; Lucas Ruebbelke: So good question.

233
00:14:46.370 --> 00:14:49.290
So how do you actually preserve state?

234
00:14:49.290 --> 00:14:49.990
Is you're incrementing.

235
00:14:53.780 --> 00:14:55.160
So I'm just gonna go
here because I have it.

236
00:14:58.680 --> 00:14:59.920
And I'll just zoom this up a bit.

237
00:14:59.920 --> 00:15:07.496
And so, in this case I am just
moving something across the screen.

238
00:15:07.496 --> 00:15:13.090
But I'm saying take this button on click,
map the event to a ten,

239
00:15:13.090 --> 00:15:18.607
so that every time I click then I
wanna move this ball ten pixels.

240
00:15:18.607 --> 00:15:24.786
And I'm saying start with an x,y
coordinate of 100 and 100.

241
00:15:24.786 --> 00:15:29.936
And then using the scan operator,
so this is kind of like reduce

242
00:15:29.936 --> 00:15:35.600
what it does is it basic
maintains state within the string.

243
00:15:35.600 --> 00:15:36.640
So it'll go through.

244
00:15:37.710 --> 00:15:40.110
And essentially, what it kind of does,
is it loops itself.

245
00:15:41.770 --> 00:15:45.430
And so it's saying, take your previous or
the current value and

246
00:15:45.430 --> 00:15:47.770
add this new value to it.

247
00:15:47.770 --> 00:15:51.800
So the accumulated value take this new
current value that's coming in and

248
00:15:51.800 --> 00:15:52.630
do some operations.

249
00:15:52.630 --> 00:15:57.410
So in this case, we'll go ahead and

250
00:15:57.410 --> 00:15:59.630
do this one more down so
it'll stay on one line.

251
00:15:59.630 --> 00:16:04.830
You can see over here, we're just creating
a new xy object, but we're saying

252
00:16:04.830 --> 00:16:08.030
take your current x value or accumulated
x value and just add current to it.

253
00:16:09.840 --> 00:16:14.700
But now you can see kind of I'm just
transforming the 10 starting with

254
00:16:17.630 --> 00:16:21.430
core net value, and
then I'm just adding to the x property.

255
00:16:21.430 --> 00:16:24.210
But skin is how you maintain
state with industry.

256
00:16:26.200 --> 00:16:27.428
But then you'll notice here and

257
00:16:27.428 --> 00:16:30.851
everyone at this examples
&gt;&gt; Lucas Ruebbelke: And

258
00:16:30.851 --> 00:16:34.681
now getting exactly what I need,
I'm just doing straight assignment,

259
00:16:34.681 --> 00:16:37.210
cuz it's perfectly
tailored to my situation.

260
00:16:38.250 --> 00:16:38.750
Make sense?

261
00:16:41.070 --> 00:16:42.710
Now, just as a side context,

262
00:16:42.710 --> 00:16:46.080
this took me by three months
to kinda wrap my mind around.

263
00:16:46.080 --> 00:16:48.111
So ever this [SOUND].

264
00:16:48.111 --> 00:16:54.115
My world is changing totally normal, but
one inverting the flow of control to where

265
00:16:54.115 --> 00:16:59.601
we would just push values to you and you
can do whatever you want with them is so

266
00:16:59.601 --> 00:17:05.830
much more convenient than wondering like,
where is my data coming from?

267
00:17:05.830 --> 00:17:06.670
Did something happen?

268
00:17:07.960 --> 00:17:09.220
How do I know?

269
00:17:09.220 --> 00:17:13.120
Well, with an observable,
they'll tell you every time it happens.

270
00:17:13.120 --> 00:17:18.530
And so, being able to have data pushed
to you is fantastic, thank you promises.

271
00:17:18.530 --> 00:17:22.790
But being able to have a stream of
data constantly pushed to you and

272
00:17:22.790 --> 00:17:26.610
then being able to transform it into
whatever you want, is the game changer for

273
00:17:26.610 --> 00:17:28.060
me.
&gt;&gt; Speaker 3: Questions.

274
00:17:28.060 --> 00:17:28.599
&gt;&gt; Lucas Ruebbelke: Yes?

275
00:17:28.599 --> 00:17:30.309
&gt;&gt; Speaker 3: This might be jumping ahead

276
00:17:30.309 --> 00:17:34.250
to the immutable argument but
are you recording that machine so

277
00:17:34.250 --> 00:17:38.184
that in any time you can go back in
a time position to see at when or

278
00:17:38.184 --> 00:17:40.443
what that was or how that flow came.

279
00:17:40.443 --> 00:17:43.437
Especially as the one, two,
three, you could go back and

280
00:17:43.437 --> 00:17:46.983
count when one was added, when two
was added, when three was added or

281
00:17:46.983 --> 00:17:50.300
do you have to record that separately?
&gt;&gt; Lucas Ruebbelke: So in this case,

282
00:17:50.300 --> 00:17:51.870
I'm not recording it.
&gt;&gt; Speaker 3: Yeah.

283
00:17:51.870 --> 00:17:53.660
&gt;&gt; Lucas Ruebbelke: But you could just use

284
00:17:53.660 --> 00:17:55.090
a history pattern.
&gt;&gt; Speaker 3: Okay.

285
00:17:55.090 --> 00:17:56.420
&gt;&gt; Lucas Ruebbelke: Or, for instance,

286
00:17:56.420 --> 00:18:01.140
if you've ever seen Redux tools, it's like
this momento of like, for every tick,

287
00:18:01.140 --> 00:18:04.000
you're pushing that state into the stack.
&gt;&gt; Speaker 3: Okay.

288
00:18:04.000 --> 00:18:04.590
&gt;&gt; Lucas Ruebbelke: And then, when you're

289
00:18:04.590 --> 00:18:07.400
to just replay, you just pop it back off.
&gt;&gt; Speaker 3: Okay.

290
00:18:07.400 --> 00:18:08.190
&gt;&gt; Lucas Ruebbelke: And so, you really

291
00:18:08.190 --> 00:18:09.050
could do it.
&gt;&gt; Speaker 3: Yeah, and

292
00:18:09.050 --> 00:18:11.145
you store it like an array.
&gt;&gt; Lucas Ruebbelke: You just have to store

293
00:18:11.145 --> 00:18:12.843
it kind of a classic history momentum

294
00:18:12.843 --> 00:18:13.771
pattern.
&gt;&gt; Speaker 3: Okay.

295
00:18:13.771 --> 00:18:14.275
&gt;&gt; Lucas Ruebbelke: It just go into

296
00:18:14.275 --> 00:18:15.460
a stock and then it just pops off.

