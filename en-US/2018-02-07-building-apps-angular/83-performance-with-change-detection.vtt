WEBVTT

1
00:00:00.140 --> 00:00:01.589
&gt;&gt; Lukas Ruebbelke: So in this module,

2
00:00:01.589 --> 00:00:06.763
we're going to continue on this
make it everything narrative arc.

3
00:00:06.763 --> 00:00:11.130
So we saw how to make it work
through unit testing, and

4
00:00:11.130 --> 00:00:17.259
how to make it right through static
analysis, which I particularly love.

5
00:00:17.259 --> 00:00:20.020
Because you can get a lot of insight,

6
00:00:20.020 --> 00:00:23.955
with very little effort on our part,
which is nice.

7
00:00:23.955 --> 00:00:28.610
Now we're going to talk about
making your application fast.

8
00:00:28.610 --> 00:00:33.410
And so, obviously, there's tons of things
you can do to accomplish that, but

9
00:00:33.410 --> 00:00:38.980
I want to give you two concrete
things that you can do,

10
00:00:38.980 --> 00:00:40.859
to make your application faster.

11
00:00:41.970 --> 00:00:48.140
And so one of these is something that
is slightly on the advanced spectrum,

12
00:00:48.140 --> 00:00:49.580
but I wanted to service it.

13
00:00:49.580 --> 00:00:53.080
Because being able to

14
00:00:53.080 --> 00:00:56.730
do this first technique is something
that you could not do in angular js.

15
00:00:56.730 --> 00:01:03.340
And it's pretty crazy,
let's talk about change detection.

16
00:01:05.420 --> 00:01:09.772
In Angular JS, one of the valid
criticisms is that if you did

17
00:01:09.772 --> 00:01:13.492
not use,
&gt;&gt; Lukas Ruebbelke: Change detection

18
00:01:13.492 --> 00:01:17.964
properly or you didn't understand
how the digest cycle was working,

19
00:01:17.964 --> 00:01:22.535
it was really easy to get the applications
kind of a bad sluggish state.

20
00:01:22.535 --> 00:01:25.708
So, for instance,
I had one of my friends come to me.

21
00:01:25.708 --> 00:01:27.509
He owns a company, he's a developer.

22
00:01:27.509 --> 00:01:30.878
He said, hey, I need you to
look at my Angular application,

23
00:01:30.878 --> 00:01:32.345
AngularJS application.

24
00:01:32.345 --> 00:01:37.867
I'll pay you, it just crashes, after
five minutes, we can't use it anymore.

25
00:01:37.867 --> 00:01:44.140
And so I show up, and he's showing me and
I'm just like, wait a second.

26
00:01:44.140 --> 00:01:49.131
You are literally looping over
a thousand records, using repeat and

27
00:01:49.131 --> 00:01:53.079
putting them on the page.
&gt;&gt; Lukas Ruebbelke: And

28
00:01:53.079 --> 00:01:55.001
every one of these records
is fairly complex.

29
00:01:55.001 --> 00:01:59.682
So now you're binding to a thousand
objects, complex objects,

30
00:01:59.682 --> 00:02:03.268
on the page so
it was basically these car records.

31
00:02:03.268 --> 00:02:06.332
And you're wondering why if you
are having to go through and

32
00:02:06.332 --> 00:02:09.157
compare every one of these,
when something changes.

33
00:02:09.157 --> 00:02:12.968
[INAUDIBLE] it's starting to run slow.

34
00:02:12.968 --> 00:02:18.644
I found my experiences that generally
when you have a performance problem,

35
00:02:18.644 --> 00:02:21.759
more than likely, you have a UX problem.

36
00:02:22.970 --> 00:02:27.040
That is actually the performance
problem is a trailing indicator

37
00:02:27.040 --> 00:02:29.040
that your experience is not optimal.

38
00:02:30.340 --> 00:02:35.060
So one of the first things that I
would to a situation like that is,

39
00:02:35.060 --> 00:02:38.520
yes, putting a thousand
records on the page and

40
00:02:38.520 --> 00:02:42.650
binding to them,
that's going to cause some problems.

41
00:02:42.650 --> 00:02:43.530
More importantly,

42
00:02:45.250 --> 00:02:50.420
I don't know anybody who could possibly
process all 1000 of those records.

43
00:02:50.420 --> 00:02:54.928
How many of them could you even
see at a single time, maybe 20?

44
00:02:54.928 --> 00:02:58.090
There's a reason why I would
wager if we did a Google search,

45
00:02:58.090 --> 00:03:00.881
they could give us hundreds
of thousands of records.

46
00:03:00.881 --> 00:03:07.263
But they gave us 20 at a time, because
that is a level in which we can process.

47
00:03:07.263 --> 00:03:12.690
So to say, first of all, with performance,
this is kind of a freebie,

48
00:03:12.690 --> 00:03:17.572
but I run into it a lot,
is if you run into a performance problem,

49
00:03:17.572 --> 00:03:21.560
first stop and
look at the user experience.

50
00:03:21.560 --> 00:03:24.940
For instance, you may not need
a thousand records on the page, or

51
00:03:24.940 --> 00:03:28.790
there may be a way to
simplify the experience.

52
00:03:28.790 --> 00:03:33.040
The one, improve your performance but
also improve it for the user.

53
00:03:33.040 --> 00:03:38.090
So with that said, in Angular two or
above you had the ability, well, first and

54
00:03:38.090 --> 00:03:44.030
foremost, that they redid change
detection from the beginning.

55
00:03:44.030 --> 00:03:46.800
So it's much more performant.

56
00:03:46.800 --> 00:03:51.860
But they also gave us the ability to
control where and when it happens.

57
00:03:51.860 --> 00:03:55.244
And so
they introduced this thing called zone.js.

58
00:03:55.244 --> 00:03:57.457
And it's pretty ridiculous.

59
00:03:57.457 --> 00:04:02.399
And so Brian Ford, who used to be on
the Angular team, I remember one night

60
00:04:02.399 --> 00:04:07.103
we were in San Francisco and
he's telling me, I had this crazy idea and

61
00:04:07.103 --> 00:04:12.606
I think probably like had or whatever
is like this crazy idea of like what if

62
00:04:12.606 --> 00:04:17.396
you monkey patched everything on the DOM,
&gt;&gt; Lukas Ruebbelke: And

63
00:04:17.396 --> 00:04:18.383
you could listen for it.

64
00:04:18.383 --> 00:04:20.860
So change notation on the entire thing.

65
00:04:20.860 --> 00:04:23.630
Not just angular but everything.

66
00:04:23.630 --> 00:04:28.280
And you could do it in an efficient way,
how cool would that be?

67
00:04:28.280 --> 00:04:31.100
I'm thinking that sounds crazy.

68
00:04:31.100 --> 00:04:35.504
Well, anyways, what ended up being really
cool and what ended it up being was JS.

69
00:04:35.504 --> 00:04:37.664
And this is why I kinda had this monkey,

70
00:04:37.664 --> 00:04:41.474
because it's monkey patching
the entire DOM that your app lives in.

71
00:04:41.474 --> 00:04:46.037
More importantly,
is it's creating these very efficient

72
00:04:46.037 --> 00:04:49.505
change detection classes under the hood,
so

73
00:04:49.505 --> 00:04:55.179
it's this optimized thing that has
a current state and a previous state.

74
00:04:55.179 --> 00:04:59.940
And then when something changes,
instead of looping over the component.

75
00:04:59.940 --> 00:05:04.320
It loops over the change detection
class it says, has it change or not?

76
00:05:04.320 --> 00:05:08.170
Do I need to update it or
perform some action.

77
00:05:08.170 --> 00:05:11.990
And as a result change detection
just right at the box,

78
00:05:11.990 --> 00:05:13.340
three to ten times faster.

79
00:05:14.590 --> 00:05:19.350
Amazing, so we're already getting
this huge performance boost

80
00:05:19.350 --> 00:05:20.159
right at under the gates.

81
00:05:21.230 --> 00:05:27.580
But it's even faster than change
detection not needing it at all.

82
00:05:29.420 --> 00:05:33.020
And this is, I think, really interesting,
and do you know what?

83
00:05:34.610 --> 00:05:37.010
We have to start over,
you forgot to unfreeze me.

84
00:05:41.700 --> 00:05:43.230
Well, you know what?

85
00:05:43.230 --> 00:05:45.250
You guys get to hear this
material all over again.

86
00:05:47.440 --> 00:05:51.146
Live stream people, love you.

87
00:05:51.146 --> 00:05:55.550
We didn't catch any of the slide.

88
00:05:55.550 --> 00:06:00.095
Now I'll just get excited
about being excited, again.

89
00:06:00.095 --> 00:06:01.636
Now I've got to think of new jokes.

90
00:06:01.636 --> 00:06:04.814
So anything I said that was
funny in the last three minutes,

91
00:06:04.814 --> 00:06:07.558
I've got to think of
something else that is funny.

92
00:06:07.558 --> 00:06:13.108
So bear with me,
this will take sixty seconds.

93
00:06:13.108 --> 00:06:17.307
So in this module, we're going to
talk making our application fast.

94
00:06:17.307 --> 00:06:22.230
We saw how to make it, right, or
make it work, rather, through testing.

95
00:06:22.230 --> 00:06:26.925
And how to make it bright
through static analysis.

96
00:06:26.925 --> 00:06:32.545
In this module, we're going to
talk about how to make it fast.

97
00:06:32.545 --> 00:06:36.620
And we're going to show two very concrete
things that you can start to do within

98
00:06:36.620 --> 00:06:38.422
your application to enable that.

99
00:06:38.422 --> 00:06:41.870
The first one is change detection.

100
00:06:43.950 --> 00:06:49.580
And so change detection in
AngularJS 1.x was understandably,

101
00:06:49.580 --> 00:06:51.540
you can't get it into a bad state.

102
00:06:51.540 --> 00:06:56.350
If you do not know what you're doing and
you were not cognizant of the digest

103
00:06:56.350 --> 00:07:01.300
cycle, certain things would happen that
would create a bad user experience or

104
00:07:01.300 --> 00:07:07.440
poor user experience such as binding to
A thousand records on the page, not good.

105
00:07:07.440 --> 00:07:11.910
And all of a sudden will start to
creep and crawl and break down.

106
00:07:13.090 --> 00:07:18.201
In Angular 2 and above,
they introduced an entirely

107
00:07:18.201 --> 00:07:22.526
new change detection by virtue of Zone.js.

108
00:07:22.526 --> 00:07:27.329
And how this works is, instead of
looking at the the Angular application,

109
00:07:27.329 --> 00:07:32.756
they are essentially monkey patching the
entire dom structure in the application.

110
00:07:32.756 --> 00:07:36.989
So they are watching every
single dom element, and

111
00:07:36.989 --> 00:07:42.130
monkey patching it with these
change detection classes.

112
00:07:42.130 --> 00:07:44.640
And so it is going through,
analyzing the application.

113
00:07:44.640 --> 00:07:48.560
And it's creating essentially this
optimize class, with a current and

114
00:07:48.560 --> 00:07:49.532
previous state.

115
00:07:49.532 --> 00:07:50.926
And so if something changes,

116
00:07:50.926 --> 00:07:53.670
it just compares the current
state to the previous state.

117
00:07:53.670 --> 00:07:58.870
And if they're different, then it knows
it needs to do something about it.

118
00:08:00.030 --> 00:08:04.600
And so this change or
changing how we do change detection,

119
00:08:06.980 --> 00:08:09.670
resulted in a 3 to 10x improvement.

120
00:08:09.670 --> 00:08:14.850
So already just imagine that your app
is now three to ten times faster,

121
00:08:14.850 --> 00:08:16.520
huge win right out of the gate.

122
00:08:17.710 --> 00:08:19.880
More importantly, faster than that,

123
00:08:19.880 --> 00:08:24.530
is if you simply did not have
to do change detection at all.

124
00:08:24.530 --> 00:08:31.340
So, in Angular,
we can control how an angular,

125
00:08:31.340 --> 00:08:36.530
let's say like a node, in the node tree,
how it responds to change detection.

126
00:08:37.580 --> 00:08:41.620
In fact, by default, it's just how
it's going to respond to every change.

127
00:08:41.620 --> 00:08:42.910
It's going to be much faster, but

128
00:08:42.910 --> 00:08:46.120
it's still going to respond
to every single change.

129
00:08:46.120 --> 00:08:51.090
But we can set change detection to onPush,
and

130
00:08:51.090 --> 00:08:56.300
what that means is it will only check for
changes once, and then it's done.

131
00:08:56.300 --> 00:09:02.040
Any changes that happens,
is going to be pushed down the node,

132
00:09:02.040 --> 00:09:04.650
and Angular is not going
to worry about it.

133
00:09:06.190 --> 00:09:09.570
And so essentially,
we're turning off components detection for

134
00:09:09.570 --> 00:09:10.500
a component branch.

135
00:09:11.860 --> 00:09:15.130
Now, I see kind of some looks here,
like what.

136
00:09:16.720 --> 00:09:21.500
So let's see how this works,
this is a component tree

137
00:09:22.500 --> 00:09:26.790
and this is default change detection.

138
00:09:26.790 --> 00:09:29.510
Something happens,
everything lights up and checks.

139
00:09:31.370 --> 00:09:36.170
Now, with OnPush change detection,

140
00:09:36.170 --> 00:09:44.210
what we can do with this node right here,
we can say we're turning this off.

141
00:09:45.890 --> 00:09:48.980
And we're going to set it to OnPush,
so it's going to evaluate one time,

142
00:09:48.980 --> 00:09:50.950
and then it's done.

143
00:09:50.950 --> 00:09:52.425
No more Change Detection, for

144
00:09:52.425 --> 00:09:56.799
this node and its children.
&gt;&gt; Lukas Ruebbelke: So

145
00:09:56.799 --> 00:10:02.336
now when something happens down here
&gt;&gt; Lukas Ruebbelke: So

146
00:10:02.336 --> 00:10:04.855
let's say we got this thing coming down
here, and we'll talk about this thing,

147
00:10:04.855 --> 00:10:09.618
what that might be.
&gt;&gt; Lukas Ruebbelke: That

148
00:10:09.618 --> 00:10:16.194
essentially,
&gt;&gt; Lukas Ruebbelke: Well, let

149
00:10:16.194 --> 00:10:19.876
me back this up, so something could have
happened on here, and it may not light up.

150
00:10:19.876 --> 00:10:24.515
So it may not need to detect it,
or if you need to force it,

151
00:10:24.515 --> 00:10:28.020
then you could simply at the child branch.

152
00:10:30.410 --> 00:10:34.270
Then you could force it to
run change detection here.

153
00:10:34.270 --> 00:10:35.650
And it goes up through the parent.

154
00:10:35.650 --> 00:10:40.779
But the main thing that generally
will happen, in most cases is this.

155
00:10:42.170 --> 00:10:45.737
Something will happen, and it'll fly
completely under the change detection

156
00:10:45.737 --> 00:10:49.734
radar.
&gt;&gt; Lukas Ruebbelke: So let's think of

157
00:10:49.734 --> 00:10:53.976
a mechanism,
&gt;&gt; Lukas Ruebbelke: That

158
00:10:53.976 --> 00:10:57.985
we used to communicate changes
across our application,

159
00:10:57.985 --> 00:11:03.067
a few modules back.
&gt;&gt; Lukas Ruebbelke: It

160
00:11:03.067 --> 00:11:05.854
does it very, very well.
&gt;&gt; Lukas Ruebbelke: Completely

161
00:11:05.854 --> 00:11:11.376
encapsulated.
&gt;&gt; Lukas Ruebbelke: Observables,

162
00:11:11.376 --> 00:11:17.076
observables are totally capable of
handling their own change detection.

163
00:11:17.076 --> 00:11:21.116
That's what that next tic is for,
something happened.

164
00:11:21.116 --> 00:11:21.630
We're gonna take it and
we're gonna run with it ourselves.

165
00:11:21.630 --> 00:11:27.132
So you can have, you say everything
that is coming to this thing,

166
00:11:27.132 --> 00:11:31.547
into this particular node
branch is an observable.

167
00:11:31.547 --> 00:11:36.423
Therefore, we do not need
Angular change detection,

168
00:11:36.423 --> 00:11:40.770
because it's in the context
of the observable.

169
00:11:42.090 --> 00:11:48.390
So again, if you remember way back to
day one, I said that Angular is simply

170
00:11:48.390 --> 00:11:52.150
letting other technology, other standard
based technologies to do the work.

171
00:11:52.150 --> 00:11:54.930
And they're leveraging it so

172
00:11:54.930 --> 00:11:57.170
that you get twice the framework,
with half a foot print.

173
00:11:59.500 --> 00:12:05.680
And so in our component,
we simply say ChangeDetection and

174
00:12:05.680 --> 00:12:12.542
we turn it to
ChangeDetectionStrategy OnPush, that's it.

175
00:12:12.542 --> 00:12:17.800
Now, one caveat to this
is that if you have,

176
00:12:17.800 --> 00:12:22.930
for instance, an observable string and
you set it to something.

177
00:12:24.740 --> 00:12:28.720
This will not update your template,
why not?

178
00:12:29.760 --> 00:12:32.110
Well, we turned off change detection.

179
00:12:32.110 --> 00:12:36.503
So what you need to do is this

180
00:12:40.527 --> 00:12:41.704
&gt;&gt; Lukas Ruebbelke: this.cd so

181
00:12:41.704 --> 00:12:46.534
this is changeDectectorRef.detectChanges.

182
00:12:46.534 --> 00:12:51.494
So I guarantee, this is a lot easier
to do this on a very specific basis,

183
00:12:51.494 --> 00:12:56.040
on a specific tic,
than having it run all the time.

184
00:12:56.040 --> 00:12:57.952
So to me this is a no
brainer in terms of tradeoff.

185
00:13:00.857 --> 00:13:02.551
&gt;&gt; Lukas Ruebbelke: So, in a nutshell,

186
00:13:02.551 --> 00:13:08.437
we have the ability to turn off change
detection at a component level,

187
00:13:08.437 --> 00:13:10.448
if it's appropriate.

188
00:13:10.448 --> 00:13:14.388
And allow the observables to handle,

189
00:13:14.388 --> 00:13:18.583
the essentially eventing within this.

190
00:13:18.583 --> 00:13:22.701
Remember, Code volume,
control flow, state management.

191
00:13:22.701 --> 00:13:29.379
Well, they're doing all of these
within the observable string.

192
00:13:29.379 --> 00:13:34.823
It's very common to see an observable
string that is doing all of that or

193
00:13:34.823 --> 00:13:38.452
addressing all of that
very elegant precise and

194
00:13:38.452 --> 00:13:42.847
concise matter.
&gt;&gt; Lukas Ruebbelke: And

195
00:13:42.847 --> 00:13:46.710
then if we actually do need to
update a template or whatever,

196
00:13:46.710 --> 00:13:51.274
we just call the typed changes and
we just force that on a protect basis.

197
00:13:51.274 --> 00:13:54.341
But we are controlling it, so

198
00:13:54.341 --> 00:13:59.310
very much like detect
changes in our testing.

199
00:13:59.310 --> 00:14:01.790
We're doing just the same thing here,
we have the ability to do that.

200
00:14:05.630 --> 00:14:08.226
Any questions about that?

201
00:14:08.226 --> 00:14:11.792
It makes sense, you just turn it off,
Observables are doing it for us.

202
00:14:11.792 --> 00:14:15.710
And if we need to update it,
we can just force that change to happen.

203
00:14:17.020 --> 00:14:20.615
Use different,
I think that with his first app, and

204
00:14:20.615 --> 00:14:23.239
somebody did a game and optimized it.

205
00:14:23.239 --> 00:14:27.627
It just went through the roof, in terms
of actually speed and responsiveness,

206
00:14:27.627 --> 00:14:30.190
because we're just
turning it off entirely.

