WEBVTT

1
00:00:00.370 --> 00:00:02.350
&gt;&gt; Lukas Ruebbelke: We've talked
about the observable stream,

2
00:00:02.350 --> 00:00:06.520
the only difference is in
our observable is real time.

3
00:00:06.520 --> 00:00:09.168
Whereas we are catching
events from the user,

4
00:00:09.168 --> 00:00:14.920
where there is some initial output that
generally is local to the application.

5
00:00:15.980 --> 00:00:18.540
Well, what happens when you take and

6
00:00:18.540 --> 00:00:22.550
you put your initial output, into a
database that everybody's connected with.

7
00:00:23.630 --> 00:00:25.590
Well then it becomes real time.

8
00:00:26.800 --> 00:00:33.250
So first thing's first,
start with a real time database, Firebase,

9
00:00:33.250 --> 00:00:38.830
problem solved.

10
00:00:38.830 --> 00:00:42.260
And so what you do here,

11
00:00:42.260 --> 00:00:46.120
if you're going to do this, first things
first, create a Firebase account.

12
00:00:46.120 --> 00:00:50.130
They have a very generous free tier,
and then you create a project.

13
00:00:50.130 --> 00:00:57.880
And that's going to generate some of this
stuff down here like an API key domain.

14
00:00:57.880 --> 00:01:02.320
This is actually all generated,
and I just basically copied it in.

15
00:01:02.320 --> 00:01:05.510
So it gives you the key,
all these different stuff.

16
00:01:06.570 --> 00:01:09.527
Take it up and put this in your

17
00:01:09.527 --> 00:01:16.489
environment.ts.
&gt;&gt; Lukas Ruebbelke: And

18
00:01:16.489 --> 00:01:20.200
once you have this in, now.

19
00:01:20.200 --> 00:01:24.880
We need to initialize our

20
00:01:26.190 --> 00:01:29.090
modules, or input the, so the first
thing we need to do before anything

21
00:01:30.740 --> 00:01:34.350
is we need to import the Angular
Fire Module, initialize the app.

22
00:01:35.350 --> 00:01:39.850
And so what this does, this has to exist
for every single Angular Fire app,

23
00:01:39.850 --> 00:01:43.540
is we're initializing the app and
passing in our config.

24
00:01:43.540 --> 00:01:49.520
What that does is it actually
connects us to our remote Firebase.

25
00:01:49.520 --> 00:01:54.100
I'm also using the Angular Fire
database module, so

26
00:01:54.100 --> 00:01:57.570
if you just want to do the real
time stuff then you can do this.

27
00:01:57.570 --> 00:02:02.200
But Qngular actually has a really
nice authentication functionally, for

28
00:02:02.200 --> 00:02:06.530
instance like log in with
any third party provider,

29
00:02:06.530 --> 00:02:09.940
like a social provider or email,
and password different things.

30
00:02:09.940 --> 00:02:13.040
You can also do authorization as well,
and pull that in, but in our case,

31
00:02:13.040 --> 00:02:15.930
we just care about the real time database.

32
00:02:17.420 --> 00:02:23.308
So two modules here,
then we need to consume it.

33
00:02:26.426 --> 00:02:29.049
&gt;&gt; Lukas Ruebbelke: So in our notification

34
00:02:29.049 --> 00:02:34.103
service,
&gt;&gt; Lukas Ruebbelke: What we are doing is

35
00:02:34.103 --> 00:02:40.910
essentially creating a reference
to our remote endpoint.

36
00:02:42.480 --> 00:02:46.704
So I think I actually
stepped through this,

37
00:02:46.704 --> 00:02:51.304
how far do I go?
&gt;&gt; Lukas Ruebbelke: Actually, so

38
00:02:51.304 --> 00:02:53.774
here's the entire code that I'm using, but

39
00:02:53.774 --> 00:02:56.440
the first thing we need to
do is consume the data.

40
00:02:56.440 --> 00:02:59.890
And this happens in two parts,
or a couple parts, actually.

41
00:03:01.050 --> 00:03:04.260
First and foremost,
we define our notification string

42
00:03:04.260 --> 00:03:08.960
which now instead of coming from a subject

43
00:03:10.980 --> 00:03:15.900
or rather instead of the subject,
we are setting this

44
00:03:15.900 --> 00:03:18.940
as FirebaseObjectObservable and
it's a Notification.

45
00:03:18.940 --> 00:03:24.550
So, this is just another
service that maps our

46
00:03:24.550 --> 00:03:29.780
observable to an endpoint as an object,
and then we're pointing it to

47
00:03:31.480 --> 00:03:38.190
the remote endpoint, so
db.object('/notifications') and

48
00:03:38.190 --> 00:03:43.010
so now we're connected, and
then from here, we subscribe to it.

49
00:03:43.010 --> 00:03:49.070
So this point with these two lines
here the finding the notification and

50
00:03:49.070 --> 00:03:52.607
then connecting app using db.object.

51
00:03:52.607 --> 00:03:56.040
We are ready to go, we have this string.

52
00:03:56.040 --> 00:03:57.950
Now we need to figure out
what we gonna do with it.

53
00:03:57.950 --> 00:04:02.594
So in this case we are subscribing and
we are pointing the notification.

54
00:04:02.594 --> 00:04:07.765
Whatever they come in,
it would just passing it to the rest

55
00:04:07.765 --> 00:04:14.638
of the application via this.subject.net so
still even the subject there.

56
00:04:14.638 --> 00:04:17.770
But I'm saying whenever something
happens on the real-time stream,

57
00:04:17.770 --> 00:04:19.700
just take that and
kick it in the subject, so

58
00:04:19.700 --> 00:04:22.260
we can broadcast it to
the rest of the application.

59
00:04:22.260 --> 00:04:24.640
So, the new this one stream coming in, and

60
00:04:24.640 --> 00:04:26.840
then we're kind of doing
a multi cast down.

61
00:04:26.840 --> 00:04:29.770
Because anybody who's subscribed
to it can now listen.

62
00:04:31.190 --> 00:04:34.940
The reason why I'm using dot skip one,

63
00:04:34.940 --> 00:04:40.520
is because whenever it connects,
it always fires one time.

64
00:04:40.520 --> 00:04:43.880
So there's always this one initial
like hey, we're connected and

65
00:04:43.880 --> 00:04:45.529
that registers as a tick.

66
00:04:46.930 --> 00:04:50.811
And so I'm just saying throw the first one
away, cuz that's basically your connection

67
00:04:50.811 --> 00:04:54.183
event.
&gt;&gt; Lukas Ruebbelke: And so

68
00:04:54.183 --> 00:04:55.210
you can assume it.

69
00:04:55.210 --> 00:04:58.260
You simply say I want to
create a real time or

70
00:04:58.260 --> 00:05:01.810
basically an observable,
that's pointed to this remote end point.

71
00:05:04.030 --> 00:05:06.150
Well so we're consuming it.

72
00:05:06.150 --> 00:05:09.550
How do we go the other direction?

73
00:05:09.550 --> 00:05:10.291
How do we update it?

74
00:05:10.291 --> 00:05:15.273
Well now, we just say this
notification stream, dot set and

75
00:05:15.273 --> 00:05:20.450
we just pass it in so
whereas before we had the subject.next and

76
00:05:20.450 --> 00:05:25.627
passed it in, we're now just
kind of inserting AngularFire,

77
00:05:25.627 --> 00:05:29.070
or Firebase right into that spot.

78
00:05:29.070 --> 00:05:34.252
We're saying it comes in,
let's update the database first,

79
00:05:34.252 --> 00:05:39.140
and then it'll come back down and
we can subscribe there and

80
00:05:39.140 --> 00:05:42.561
then kick it back into the observable, so

81
00:05:42.561 --> 00:05:47.646
it's just this really small
insertion that we have between,

82
00:05:47.646 --> 00:05:53.114
so we've just essentially introduced,
&gt;&gt; Lukas Ruebbelke: 1, 2,

83
00:05:53.114 --> 00:06:00.188
3, 4, 5, five lines of code,
&gt;&gt; Lukas Ruebbelke: To

84
00:06:00.188 --> 00:06:06.299
modify our notification service and
now it's real time,

85
00:06:06.299 --> 00:06:11.920
that's what I love about observables and
Firebase.

86
00:06:17.680 --> 00:06:21.220
What do you guys think about that?
&gt;&gt; Speaker 2: That's awesome.

87
00:06:21.220 --> 00:06:24.110
Pretty legit.
&gt;&gt; Lukas Ruebbelke: Sometimes it's

88
00:06:24.110 --> 00:06:27.280
almost so easy, it's almost anticlimactic.

89
00:06:27.280 --> 00:06:29.310
Like, is that for real?
&gt;&gt; Speaker 2: You could just make a real

90
00:06:29.310 --> 00:06:31.970
time chat pretty quickly.
&gt;&gt; Lukas Ruebbelke: Very quickly.

91
00:06:33.650 --> 00:06:38.800
I gave a talk last year in London,
in England about this.

92
00:06:38.800 --> 00:06:42.840
It's called, Go Beast Mode,
with Real Time Observables and

93
00:06:42.840 --> 00:06:47.070
Angular, and I talk about one
of the observable scripts.

94
00:06:47.070 --> 00:06:49.100
So some of the slides even
you'll see in that talk.

95
00:06:50.380 --> 00:06:54.420
And I build out these
really simple kind of like,

96
00:06:54.420 --> 00:06:56.490
here's a ball,
here's some different things.

97
00:06:56.490 --> 00:07:01.140
Like really basic like demos, and

98
00:07:01.140 --> 00:07:06.630
then what I do it's like okay,
let's turn these into real things.

99
00:07:06.630 --> 00:07:08.960
Where you saw where you're dragging
this thing across the screen, well,

100
00:07:08.960 --> 00:07:10.670
that's like actually, where are you?

101
00:07:10.670 --> 00:07:12.360
Well, I'm going to put
this pin on this map.

102
00:07:14.460 --> 00:07:18.000
Or I'm drawing these lines on the screen,
well if you've ever used Map My Run or

103
00:07:18.000 --> 00:07:20.170
something it's like, I ran here,
then I ran here, then I ran here, and

104
00:07:20.170 --> 00:07:21.310
then I ran here.

105
00:07:21.310 --> 00:07:26.230
In just a few lines of code, you can
actually split that observable stream,

106
00:07:26.230 --> 00:07:29.420
put Firebase into it,
and now it's real time.

107
00:07:31.340 --> 00:07:35.580
I mean, you saw it, I had five
lines of code, and I took a local,

108
00:07:35.580 --> 00:07:39.901
observable stream, and
I expanded it into a real time observable

109
00:07:39.901 --> 00:07:44.683
stream.
&gt;&gt; Lukas Ruebbelke: [SOUND]

110
00:07:44.683 --> 00:07:48.530
It's pretty neat technology.

