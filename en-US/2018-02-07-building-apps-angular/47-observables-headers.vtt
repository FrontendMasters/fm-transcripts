WEBVTT

1
00:00:00.320 --> 00:00:03.490
&gt;&gt; Lukas Ruebbelke: You'll notice
here we have this two premise.

2
00:00:03.490 --> 00:00:08.220
And so this was a big deal when
people were switching to angular two.

3
00:00:08.220 --> 00:00:10.240
Now, not so much I don't think.

4
00:00:10.240 --> 00:00:17.199
But coming from one dot ex,
&gt;&gt; Lukas Ruebbelke: In working

5
00:00:17.199 --> 00:00:21.270
with premises going to observables,
that can be a little overwhelming.

6
00:00:21.270 --> 00:00:24.600
So I know initially there was
quite a bit of resistance of

7
00:00:24.600 --> 00:00:28.220
why would I even use
an observable over a promise?

8
00:00:28.220 --> 00:00:30.470
They do almost the same
thing in this context.

9
00:00:32.020 --> 00:00:34.410
So if that's the case, no problem.

10
00:00:34.410 --> 00:00:38.146
You just converse your
observable to a promise.

11
00:00:38.146 --> 00:00:42.920
I think and a reason why you would
use this is if you were doing

12
00:00:42.920 --> 00:00:47.890
a hybrid app of angular JS and
Angular, and

13
00:00:47.890 --> 00:00:53.180
for consistency sake you want it to
deal with a promise exclusively.

14
00:00:53.180 --> 00:00:57.520
So I think to maintain consistency
across an app that's being upgraded or

15
00:00:57.520 --> 00:01:00.980
running in hybrid mode may make sense.

16
00:01:00.980 --> 00:01:03.710
So there's always, you think,
why would anybody do this?

17
00:01:03.710 --> 00:01:06.750
And somebody invariably comes
up with maybe a good reason.

18
00:01:06.750 --> 00:01:11.910
But diving into observables,
they can be intimidating.

19
00:01:11.910 --> 00:01:15.350
And we'll talk about this
actually in the next module, but

20
00:01:16.580 --> 00:01:22.000
promises kind of do one thing,
observables do a ton of things.

21
00:01:22.000 --> 00:01:24.390
And so, kind of making that switch,
it can be intimidating.

22
00:01:24.390 --> 00:01:29.030
So What you can do is you can just turn
your observable into a promise using

23
00:01:29.030 --> 00:01:32.310
toPromise and from there .then and .catch.

24
00:01:32.310 --> 00:01:36.980
It works just like pretty
much how you would use in in

25
00:01:36.980 --> 00:01:40.942
your JS.
&gt;&gt; Lukas Ruebbelke: So,

26
00:01:40.942 --> 00:01:42.647
we're just doing a .get.

27
00:01:42.647 --> 00:01:49.540
We're using .map so what we're doing is
we're converting the response to json.

28
00:01:49.540 --> 00:01:52.510
And then we're just
converting that to a promise

29
00:01:52.510 --> 00:01:54.972
in returning it.
&gt;&gt; Lukas Ruebbelke: So

30
00:01:54.972 --> 00:01:59.400
http in angular versus AngularJS,
it's actually doing a little bit less.

31
00:01:59.400 --> 00:02:03.580
So Angular as a whole, they say we're
going to focus on the things that matter.

32
00:02:03.580 --> 00:02:06.050
And we're actually gonna pull back and

33
00:02:06.050 --> 00:02:11.770
not get involved in some of the things
that maybe do not matter or

34
00:02:11.770 --> 00:02:14.080
we wanna let developers have
the option to do it themselves.

35
00:02:14.080 --> 00:02:21.460
So http is one of those things where under
the hood they, at least in this module,

36
00:02:21.460 --> 00:02:24.230
they're going ahead and letting you
convert that to whatever you want.

37
00:02:24.230 --> 00:02:25.515
So you could say I don't
want it to be json.

38
00:02:25.515 --> 00:02:29.250
I want it to just be raw or
want to handle this on our end.

39
00:02:29.250 --> 00:02:29.820
I want to.

40
00:02:29.820 --> 00:02:35.629
In this case we're converting it to json.
&gt;&gt; Lukas Ruebbelke: And

41
00:02:35.629 --> 00:02:38.830
so you can see here, we're calling it,
we're taking the response.

42
00:02:38.830 --> 00:02:40.450
And then we are just converting it to

43
00:02:40.450 --> 00:02:46.153
a promise.
&gt;&gt; Lukas Ruebbelke: Now,

44
00:02:46.153 --> 00:02:49.917
what's interesting is if
you've done AngularJS,

45
00:02:49.917 --> 00:02:54.541
it's just then, just take the payload and
assign it to a local,

46
00:02:58.366 --> 00:03:00.724
&gt;&gt; Lukas Ruebbelke: Property.

47
00:03:00.724 --> 00:03:02.290
Now, that's enough about promises.

48
00:03:02.290 --> 00:03:07.278
Let's talk about observables,
so simply Observable.subscribe.

49
00:03:07.278 --> 00:03:12.398
So Observable.subscribe is kind of
the equivalent of promise.then.

50
00:03:12.398 --> 00:03:17.910
In other words you finalize an observable
stream by calling .subscribe.

51
00:03:17.910 --> 00:03:22.799
Now, within .subscribe you have
three methods that you can use.

52
00:03:22.799 --> 00:03:27.500
So onNext, so
this is anytime a new value is available.

53
00:03:27.500 --> 00:03:31.280
This gets called onError,
so if something goes wrong,

54
00:03:31.280 --> 00:03:34.640
this is where you would capture it,
and onComplete.

55
00:03:34.640 --> 00:03:38.650
So this is kind of like .next,
.error, .finally.

56
00:03:38.650 --> 00:03:42.864
So this is kind of the equivalent or,
orThen, error, and

57
00:03:42.864 --> 00:03:46.480
finally is next, error,
and aren't complete.

58
00:03:46.480 --> 00:03:50.160
But these all get stacked together
within the subscribed block.

59
00:03:50.160 --> 00:03:51.140
So it takes perimeters.

60
00:03:51.140 --> 00:03:53.690
So it's next error and complete.

61
00:03:55.440 --> 00:04:02.213
So in this case we're still dealing
with the observables, so it's .map.

62
00:04:02.213 --> 00:04:07.633
And in the,
&gt;&gt; Lukas Ruebbelke: Consuming component,

63
00:04:07.633 --> 00:04:11.601
let's say it's just .subscribe.

64
00:04:11.601 --> 00:04:16.053
So .promise, or .then, .subscribe,

65
00:04:16.053 --> 00:04:21.238
nothing changes.
&gt;&gt; Lukas Ruebbelke: The difference is,

66
00:04:21.238 --> 00:04:22.318
in this case,

67
00:04:22.318 --> 00:04:28.170
I would say it's actually less work to
not have to convert it to a promise.

68
00:04:28.170 --> 00:04:31.656
If all you're doing is pulling in some
data structure from a breast API,

69
00:04:31.656 --> 00:04:35.102
.map here and

70
00:04:35.102 --> 00:04:42.911
subscribe.
&gt;&gt; Speaker 2: So

71
00:04:42.911 --> 00:04:46.450
what is the catch for that?
&gt;&gt; Lukas Ruebbelke: So none in here,

72
00:04:46.450 --> 00:04:48.280
I'll show it you in just a second.
&gt;&gt; Speaker 2: Okay.

73
00:04:48.280 --> 00:04:48.980
&gt;&gt; Lukas Ruebbelke: But if you're going to

74
00:04:48.980 --> 00:04:54.123
put it in, it would be,
&gt;&gt; Lukas Ruebbelke: So

75
00:04:54.123 --> 00:04:56.050
this is your first function,
it would be comma.

76
00:04:56.050 --> 00:05:00.308
Or what you need to do is actually turn
this into brackets and it would be

77
00:05:00.308 --> 00:05:05.310
comma and then the catch would go, and
actually it's not the catch it's the air.

78
00:05:05.310 --> 00:05:07.678
So the air method would go as
the second parameter in that.

79
00:05:07.678 --> 00:05:08.208
&gt;&gt; Speaker 2: [INAUDIBLE]

80
00:05:08.208 --> 00:05:08.764
&gt;&gt; Lukas Ruebbelke: Yep, and so

81
00:05:08.764 --> 00:05:14.412
we'll see that in just a moment.
&gt;&gt; Lukas Ruebbelke: So

82
00:05:14.412 --> 00:05:20.490
we have a RequestOptions object and
this has a headers property.

83
00:05:20.490 --> 00:05:24.690
So occasionally you need to adjust

84
00:05:24.690 --> 00:05:27.850
the header of a request is
you're sending it to the server.

85
00:05:27.850 --> 00:05:31.598
So one, a good example is
if you're handling JWT or

86
00:05:31.598 --> 00:05:36.230
JWT web token authorization you
need to put that in the header.

87
00:05:37.400 --> 00:05:42.760
So you can do it in
the request options object.

88
00:05:42.760 --> 00:05:47.280
Another use case for this that I
ran into is setting content type.

89
00:05:47.280 --> 00:05:50.020
So is some cases actually writing
back to the server you can say, hey,

90
00:05:50.020 --> 00:05:52.660
this is what I'm giving you, so heads up.

91
00:05:52.660 --> 00:05:55.910
It is something like application JSON's.

92
00:05:55.910 --> 00:05:59.440
So being able to communicate
what's happening in the headers

93
00:05:59.440 --> 00:06:02.630
is a pretty common thing
that you'll need to do.

94
00:06:02.630 --> 00:06:05.330
I'm gonna show you two examples of this.

95
00:06:05.330 --> 00:06:08.260
The first one is kind of easy mode.

96
00:06:08.260 --> 00:06:10.490
And I'm just creating
this generic object over

97
00:06:10.490 --> 00:06:13.025
here.
&gt;&gt; Lukas Ruebbelke: And

98
00:06:13.025 --> 00:06:17.580
it's an object literal and
I'm just assigning a header as a property.

99
00:06:17.580 --> 00:06:22.710
And then I'm just doing new headers and
I'm just putting in the object.

100
00:06:22.710 --> 00:06:29.660
And then from there, when I call host I'm
just adding this in as a third parameter.

101
00:06:29.660 --> 00:06:32.522
Pretty simple,
I could have actually done this in line.

102
00:06:32.522 --> 00:06:35.540
I extracted it out so
it's available for additional calls.

103
00:06:37.740 --> 00:06:43.550
You can take the fancy way and
you can create a new header object.

104
00:06:43.550 --> 00:06:48.870
And then you can just pass it
in to the request options.

105
00:06:48.870 --> 00:06:50.670
So you basically knew that as well.

106
00:06:50.670 --> 00:06:55.091
I've that both ways.
&gt;&gt; Lukas Ruebbelke: Again,

107
00:06:55.091 --> 00:06:57.480
I don't know if there's an advantage for
one or the other.

108
00:06:58.480 --> 00:07:00.000
I probably would just go with these one.

109
00:07:00.000 --> 00:07:02.630
I think even in the docks,
this is kind of what they have.

110
00:07:02.630 --> 00:07:07.140
But if for some reason you maybe
needed some additional options for

111
00:07:07.140 --> 00:07:08.880
the request you might
be able to do it there.

112
00:07:08.880 --> 00:07:14.893
So outside of the headers, possibly.
&gt;&gt; Lukas Ruebbelke: All right,

113
00:07:14.893 --> 00:07:15.860
error handling.

114
00:07:16.950 --> 00:07:19.520
So this is pretty interesting.

115
00:07:19.520 --> 00:07:24.808
So,
&gt;&gt; Lukas Ruebbelke: Unlike promises

116
00:07:24.808 --> 00:07:29.927
when something went wrong it would
basically just call that error and

117
00:07:29.927 --> 00:07:32.144
you would handle it in there.

118
00:07:32.144 --> 00:07:36.280
In this case you need to catch
the error at the service level.

119
00:07:36.280 --> 00:07:42.320
So within the stream you need to say
something went wrong, Observable.catch.

120
00:07:42.320 --> 00:07:43.860
So you're saying if
something goes wrong .catch.

121
00:07:43.860 --> 00:07:51.100
It will capture that and then from there
you can figure out what you wanna do.

122
00:07:51.100 --> 00:07:58.890
If you want to surface that error,
then you call Observable.throw.

123
00:07:58.890 --> 00:08:02.490
And then that will fire the error handler.

124
00:08:02.490 --> 00:08:06.630
What this allows you to do is for
instance, using promises,

125
00:08:08.040 --> 00:08:12.590
if you made a call to a server and
it failed and you wanted to retry,

126
00:08:12.590 --> 00:08:16.292
how would you do that using promises?

127
00:08:16.292 --> 00:08:17.860
You can't.

128
00:08:17.860 --> 00:08:23.997
You just simply have to redo the call.
&gt;&gt; Lukas Ruebbelke: With

129
00:08:23.997 --> 00:08:27.400
observables it's easy.

130
00:08:27.400 --> 00:08:30.100
So you can simply say hey,
this thing happened, let's go ahead and

131
00:08:30.100 --> 00:08:33.260
just retry it three times or whatever.

132
00:08:33.260 --> 00:08:35.810
And so
now you can say this error happened but

133
00:08:35.810 --> 00:08:40.742
I wanna handle it within the stream.
&gt;&gt; Lukas Ruebbelke: For

134
00:08:40.742 --> 00:08:43.850
maybe a certain, there's some protocol.

135
00:08:43.850 --> 00:08:47.840
Okay, let's try this five times.

136
00:08:47.840 --> 00:08:51.210
Then if it fails on the fifth try then
we'll go ahead and let the user know.

137
00:08:51.210 --> 00:08:52.380
So you may be dealing with

138
00:08:53.520 --> 00:08:57.500
kind of a volatile connection that you
would actually like to try it a few times.

139
00:08:58.870 --> 00:09:02.940
So from there you catch the error,
something went wrong.

140
00:09:02.940 --> 00:09:04.070
You can handle it however you want, but

141
00:09:04.070 --> 00:09:08.380
if you want to service it,
then you use Observable.throw.

142
00:09:08.380 --> 00:09:10.640
And then then that will
show up in their handler.

143
00:09:10.640 --> 00:09:14.890
So what this looks like
is we're making the call.

144
00:09:16.780 --> 00:09:18.560
And there's an error.

145
00:09:18.560 --> 00:09:19.190
Something goes wrong.

146
00:09:20.580 --> 00:09:23.130
And so we're saying .catch.

147
00:09:23.130 --> 00:09:25.880
So when I say Observable.catch,
catch is an operator.

148
00:09:27.240 --> 00:09:32.280
And in this case we're saying immediately
when it happens let's just let's throw it.

149
00:09:32.280 --> 00:09:34.520
So we're using Observable.throw.

150
00:09:34.520 --> 00:09:40.417
And this over here is,
&gt;&gt; Lukas Ruebbelke: Going

151
00:09:40.417 --> 00:09:43.191
to vary depending on your server.

152
00:09:43.191 --> 00:09:46.000
So, I mean it depends on what error
object you're getting from your server.

153
00:09:46.000 --> 00:09:49.890
So if you're on Ruby or .net., so
you may get something that could vary.

154
00:09:49.890 --> 00:09:52.010
So dial into taste.

155
00:09:52.010 --> 00:09:53.790
Whatever you want to hear.

156
00:09:53.790 --> 00:09:57.900
So in this case we're assuming that
you can convert the error to json and

157
00:09:57.900 --> 00:09:59.580
that there is an error property on that.

158
00:10:01.160 --> 00:10:04.140
If not then we're just
returning the server error.

159
00:10:04.140 --> 00:10:06.140
So, I'm saying do this or return this.

160
00:10:07.520 --> 00:10:12.940
I saw the hand.
&gt;&gt; Speaker 3: So the catch isn't,

161
00:10:12.940 --> 00:10:15.496
I guess why are you having to say

162
00:10:15.496 --> 00:10:20.254
Observable.throw?
&gt;&gt; Lukas Ruebbelke: Because you can

163
00:10:20.254 --> 00:10:26.590
essentially keep that error in the string.

164
00:10:26.590 --> 00:10:28.860
In other words,
you may choose to not surface it.

165
00:10:30.170 --> 00:10:34.590
So for instance,
I could say catch the error and

166
00:10:34.590 --> 00:10:38.120
instead I'm going to just
return like an empty object.

167
00:10:38.120 --> 00:10:41.290
It gives you the ability to
say this has happened and

168
00:10:41.290 --> 00:10:43.670
I'm not immediately going to surface it.

169
00:10:43.670 --> 00:10:45.780
I'm going to perform some
unit of logic in here.

170
00:10:45.780 --> 00:10:50.460
And so you just may say,
hey if this doesn't work go ahead and

171
00:10:50.460 --> 00:10:54.980
just return this other thing in
the meantime or do something else.

172
00:10:56.080 --> 00:10:59.358
And so for here, or
you may say go try and update this and

173
00:10:59.358 --> 00:11:02.439
if it doesn't work just
return the cache version.

174
00:11:02.439 --> 00:11:07.296
But in other cases you may say this
happened, we need to surface it.

175
00:11:07.296 --> 00:11:08.508
And so this is what's happening here.

176
00:11:08.508 --> 00:11:12.813
So we're catching it, having a mini of,
okay, what do we wanna do,

177
00:11:12.813 --> 00:11:15.020
we just broke the lamp on the end table.

178
00:11:16.270 --> 00:11:18.370
Do we try to fix it
before my mom finds it?

179
00:11:18.370 --> 00:11:20.830
Or do we actually go tell her?

180
00:11:20.830 --> 00:11:24.590
Which would be the equivalent
of Observable.throw.

181
00:11:24.590 --> 00:11:27.040
That was actually a pretty good
analogy for off the top of my head.

182
00:11:27.040 --> 00:11:30.090
I'm going to use that more.

183
00:11:30.090 --> 00:11:30.660
I mean that's it.

184
00:11:30.660 --> 00:11:31.920
What do we want to do here?

185
00:11:31.920 --> 00:11:33.325
This thing happened.

186
00:11:33.325 --> 00:11:35.063
Do we handle it here or try to fix it?

187
00:11:35.063 --> 00:11:36.580
Or do we let somebody know?

188
00:11:38.030 --> 00:11:39.790
Make sense?
&gt;&gt; Speaker 3: Yeah.

189
00:11:39.790 --> 00:11:40.540
&gt;&gt; Lukas Ruebbelke: And so this is where

190
00:11:40.540 --> 00:11:43.240
we have next and error.

191
00:11:44.340 --> 00:11:48.040
So the first parameter, so
we're just doing this and

192
00:11:48.040 --> 00:11:49.090
basically calling it back out.

193
00:11:50.140 --> 00:11:53.609
We're saying when this
comes in go ahead and

194
00:11:53.609 --> 00:11:56.901
call this next function as the first one.

195
00:11:56.901 --> 00:11:59.986
So we're using bind because
of less little scope.

196
00:11:59.986 --> 00:12:01.099
Don't worry about that,

197
00:12:01.099 --> 00:12:04.330
just know that when next happens
It's calling the first function.

198
00:12:04.330 --> 00:12:07.020
If there's an error,
then it calls the second function.

199
00:12:07.020 --> 00:12:13.352
Does that make sense?
&gt;&gt; Lukas Ruebbelke: How

200
00:12:13.352 --> 00:12:17.779
do you feel about this?
&gt;&gt; Speaker 4: I think so,

201
00:12:17.779 --> 00:12:19.303
I don't know.
&gt;&gt; Lukas Ruebbelke: There was like four,

202
00:12:19.303 --> 00:12:21.205
you just had, [CROSSTALK]
&gt;&gt; Speaker 4: Yeah, yeah.

203
00:12:21.205 --> 00:12:22.321
&gt;&gt; Lukas Ruebbelke: A gamut of emotions on

204
00:12:22.321 --> 00:12:22.975
your face.

205
00:12:22.975 --> 00:12:26.070
[LAUGH]
&gt;&gt; Speaker 4: One more time.

206
00:12:26.070 --> 00:12:27.282
&gt;&gt; Lukas Ruebbelke: One more time,

207
00:12:27.282 --> 00:12:31.434
okay.
&gt;&gt; Lukas Ruebbelke: So catch, [CROSSTALK]

208
00:12:31.434 --> 00:12:32.162
&gt;&gt; Speaker 4: Mm-hm.

209
00:12:32.162 --> 00:12:33.422
&gt;&gt; Lukas Ruebbelke: This happens basically

210
00:12:33.422 --> 00:12:34.560
at the stream level.

211
00:12:34.560 --> 00:12:35.620
So I'm using service here but

212
00:12:35.620 --> 00:12:39.830
really what's happening in this stream
somethings went wrong, we wanna catch it.

213
00:12:42.040 --> 00:12:43.900
So you can think of this
even as an assembly line.

214
00:12:43.900 --> 00:12:49.142
You have your,
if something is not right, catch it.

215
00:12:49.142 --> 00:12:53.644
From there we then determine
do we let somebody know.

216
00:12:53.644 --> 00:12:56.385
That's what Observable.throw is.

217
00:12:56.385 --> 00:12:57.150
&gt;&gt; Speaker 4: Right.
&gt;&gt; Lukas Ruebbelke: Makes sense?

218
00:12:57.150 --> 00:12:58.030
&gt;&gt; Speaker 4: Yes.

219
00:12:58.030 --> 00:12:59.820
&gt;&gt; Lukas Ruebbelke: Okay, this is,

220
00:12:59.820 --> 00:13:04.570
as far as I know,
not possible with observable or promises.

221
00:13:04.570 --> 00:13:08.680
But the level of control that we can exert
on this and how we can handle this with

222
00:13:08.680 --> 00:13:14.870
retrying these different things, it's
incredibly powerful to do it this way.

223
00:13:14.870 --> 00:13:20.060
In fact, one of my favorite Frontend
Masters Course is by Jafar Hussein talking

224
00:13:20.060 --> 00:13:27.610
about programming, and he is core
contributor to Your Reactive extensions.

225
00:13:27.610 --> 00:13:31.970
And one of the things they've
tried to solve at Netflix is,

226
00:13:31.970 --> 00:13:36.580
what do you do when you make a call
to the server and it doesn't work?

227
00:13:36.580 --> 00:13:37.230
How do you retry?

228
00:13:38.810 --> 00:13:40.715
With observables it's
really easy to do that.

229
00:13:40.715 --> 00:13:45.616
So,
&gt;&gt; Lukas Ruebbelke: That's

230
00:13:45.616 --> 00:13:46.220
why I love them.

