WEBVTT

1
00:00:00.290 --> 00:00:01.500
&gt;&gt; Lukas Ruebbelke: All right,
so what I'm gonna do,

2
00:00:01.500 --> 00:00:03.570
we're going to get into
component fundamentals.

3
00:00:03.570 --> 00:00:06.670
I'm gonna talk for 10, 15 minutes.

4
00:00:06.670 --> 00:00:09.290
I'm going to issue a challenge.

5
00:00:09.290 --> 00:00:11.960
And then, we are going to break for lunch.

6
00:00:11.960 --> 00:00:16.044
We'll eat lunch, and then we'll get into,
from there, you can pick up the challenge.

7
00:00:19.832 --> 00:00:21.965
&gt;&gt; Lukas Ruebbelke: So
in component fundamentals,

8
00:00:21.965 --> 00:00:25.050
we'll talk about
the anatomy of a component.

9
00:00:26.110 --> 00:00:28.640
I'm going to mention
just briefly a mnemonic

10
00:00:28.640 --> 00:00:32.180
that I use when developing a component.

11
00:00:32.180 --> 00:00:34.920
I just notice, I'm doing the same
thing over and over and over.

12
00:00:34.920 --> 00:00:37.470
And so, I just came up with
a pretty simple mnemonic.

13
00:00:37.470 --> 00:00:39.093
If it doesn't make sense, then scratch it.

14
00:00:39.093 --> 00:00:44.126
But I personally like having small
little catchy things like I'm

15
00:00:44.126 --> 00:00:49.264
doing something and I just have kind
of this check list I walk down.

16
00:00:49.264 --> 00:00:53.425
And then we'll talk about how you just can
take a class, enhance with properties and

17
00:00:53.425 --> 00:00:57.602
methods, injectables, and then we'll
just briefly talk about Lifecycle Hooks.

18
00:00:59.508 --> 00:01:03.645
&gt;&gt; Lukas Ruebbelke: So the anatomy of
the component, remember template, class,

19
00:01:03.645 --> 00:01:05.330
metadata.

20
00:01:05.330 --> 00:01:09.972
And then from here, we have event
binding and property binding.

21
00:01:09.972 --> 00:01:14.922
And that's quite simply, really I
think the core of, I mean I would be,

22
00:01:14.922 --> 00:01:20.540
if I were to guess, I would say this
actually makes up 80% of your application.

23
00:01:21.750 --> 00:01:25.789
I think as you start to
get expand in complexity,

24
00:01:25.789 --> 00:01:31.119
it may shift a bit more to the classes,
but you will do this a lot.

25
00:01:34.221 --> 00:01:35.610
&gt;&gt; Lukas Ruebbelke: Little
bit of a show box here.

26
00:01:36.970 --> 00:01:41.720
I come from, or rather, I think,

27
00:01:41.720 --> 00:01:46.840
philosophically, I aspire to, or I really
like functional dynamic programming.

28
00:01:47.920 --> 00:01:49.440
And so
one of my favorite JavaScript books is,

29
00:01:49.440 --> 00:01:51.880
Functional JavaScript, by Michael Fogus.

30
00:01:51.880 --> 00:01:56.910
I love observables for this reason,
I just love functional programming.

31
00:01:56.910 --> 00:02:02.854
And so, when I saw the we are moving into
this classical kind of system of classes,

32
00:02:02.854 --> 00:02:06.838
I was just like I don't
know how I feel about this.

33
00:02:06.838 --> 00:02:10.220
Like, we're moving into the wrong
direction, cuz under the hood,

34
00:02:10.220 --> 00:02:12.250
JavaScript is a LISP.

35
00:02:12.250 --> 00:02:15.890
And it's a LISP really
in sheep's clothing and

36
00:02:15.890 --> 00:02:21.430
you can do some really crazy
things with functional JavaScript.

37
00:02:22.460 --> 00:02:24.800
And so as I saw these classes come up,

38
00:02:24.800 --> 00:02:27.560
I really had a hard time
reconciling where it was going.

39
00:02:27.560 --> 00:02:28.430
It kinda bummed me out.

40
00:02:30.046 --> 00:02:34.692
And I kind of stopped, and
I thought, why do like,

41
00:02:34.692 --> 00:02:38.266
what do I not like about classes in OOP?

42
00:02:38.266 --> 00:02:41.921
And I realized,
I don't actually care about classes,

43
00:02:41.921 --> 00:02:46.042
what I don't like is inheritance,
and when you have classes,

44
00:02:46.042 --> 00:02:49.824
you now have the potential for
inheritance.

45
00:02:49.824 --> 00:02:54.040
And so, especially in Java, this is
just kind of the way that you do it.

46
00:02:54.040 --> 00:02:56.470
You have a class that inherits from
a class and inherits from a class and

47
00:02:56.470 --> 00:02:58.110
on and on and on.

48
00:02:58.110 --> 00:03:02.940
But I realize classes,
like it does not explicitly, or

49
00:03:02.940 --> 00:03:08.200
it's not intrinsically a quality
that you must use inheritance.

50
00:03:08.200 --> 00:03:13.650
And when I started thinking of classes
as simply organizational objects or

51
00:03:13.650 --> 00:03:18.060
containers to put properties and methods
and not as a mechanism for inheritance.

52
00:03:18.060 --> 00:03:20.690
It became a lot easier for
me to reconcile.

53
00:03:20.690 --> 00:03:23.000
So I started thinking,
just as basic objects or

54
00:03:23.000 --> 00:03:26.090
containers, and I never use inheritance.

55
00:03:27.792 --> 00:03:30.100
There are maybe,
I'm not saying never, ever, ever.

56
00:03:30.100 --> 00:03:33.560
I've never ran into
a case that made sense or

57
00:03:33.560 --> 00:03:37.869
a composition via dependency
injection did not work.

58
00:03:40.205 --> 00:03:44.610
&gt;&gt; Lukas Ruebbelke: If you did it, or you
are using inheritance, be very careful.

59
00:03:44.610 --> 00:03:45.620
Now on one end of the spectrum,

60
00:03:45.620 --> 00:03:49.010
you have someone like Eric Elliot
who pretty much just like,

61
00:03:49.010 --> 00:03:54.600
if you use inheritance, you're sub-human,
and I don't use that strong of language.

62
00:03:54.600 --> 00:03:59.490
But on the other hand, you have somebody
like Dan Abramov, who created Redux, and

63
00:03:59.490 --> 00:04:04.060
he wrote a fairly
thoughtful where he says,

64
00:04:04.060 --> 00:04:08.960
when you control it and contain it,
he will use it up to a single level.

65
00:04:08.960 --> 00:04:12.750
So just know that inheritance
is a slippery slope.

66
00:04:12.750 --> 00:04:13.850
I never use it,

67
00:04:13.850 --> 00:04:18.688
it's simply an organizational
mechanism very much like a module.

68
00:04:18.688 --> 00:04:22.630
All right, so
let's talk about CIDER real quick.

69
00:04:22.630 --> 00:04:27.500
And what that is is class definition,
imports your dependencies,

70
00:04:27.500 --> 00:04:31.900
decorates your class then you enhance
it with properties and methods, and

71
00:04:31.900 --> 00:04:33.490
then you just repeat this.

72
00:04:33.490 --> 00:04:37.380
So this is where this
concept of just CIDER.

73
00:04:37.380 --> 00:04:39.470
And as I was doing it by hand,

74
00:04:39.470 --> 00:04:42.810
the first thing I would do is
I'd create my component class.

75
00:04:45.110 --> 00:04:47.630
And so the first thing I'm gonna do
is like I need an items component.

76
00:04:47.630 --> 00:04:50.000
Export class ItemsComponent.

77
00:04:51.240 --> 00:04:55.060
The next thing I would do, is,
I would import my basic dependencies.

78
00:04:56.290 --> 00:05:00.130
So import, this is where I'd import
my core angular dependencies.

79
00:05:00.130 --> 00:05:02.010
If I knew there was any
third party dependencies or

80
00:05:02.010 --> 00:05:05.100
custom dependencies, I would import them.

81
00:05:06.440 --> 00:05:08.961
And so, what this does as opposed to ES5.

82
00:05:08.961 --> 00:05:13.627
So if you've ever done ES5, well,
unless you're using requireJS or

83
00:05:13.627 --> 00:05:16.930
something, where does
all your script tags go?

84
00:05:16.930 --> 00:05:19.700
Where does all your resources go?

85
00:05:19.700 --> 00:05:23.400
In the bottom of your index.html,
there's just tons of them,

86
00:05:23.400 --> 00:05:24.690
unless you're bundling it.

87
00:05:24.690 --> 00:05:29.240
But it's pretty much like
you just get everything.

88
00:05:29.240 --> 00:05:33.320
With this approach,
it allows you to import and

89
00:05:33.320 --> 00:05:35.150
just pull in just
the things that you need.

90
00:05:36.540 --> 00:05:40.079
And so the next step is, we import.

91
00:05:40.079 --> 00:05:46.430
So here, we're importing component,
and then we decorate.

92
00:05:48.120 --> 00:05:50.750
So we turn into something
that Angular can use.

93
00:05:50.750 --> 00:05:53.210
So in this case,
we're using the component decorator.

94
00:05:55.120 --> 00:05:58.550
And as I mentioned, you can decorate
properties and methods as well,

95
00:05:58.550 --> 00:05:59.432
input, output.

96
00:06:02.408 --> 00:06:07.680
&gt;&gt; Lukas Ruebbelke: And so here,
now we're decorating the class.

97
00:06:07.680 --> 00:06:13.546
So, we create the component class, import
the dependencies, decorate the class,

98
00:06:13.546 --> 00:06:18.448
and then from there we say well,
now what do we want this to actually do?

99
00:06:18.448 --> 00:06:20.804
And then we start to add in methods and

100
00:06:20.804 --> 00:06:26.860
properties that define the functionality,
and the data that we want to expose.

101
00:06:26.860 --> 00:06:31.250
And so if you're using the Angular CLI,
a lot of this just happens for you.

102
00:06:31.250 --> 00:06:37.348
But as you're building up your muscle
memory, class, import, decorate, enhance.

103
00:06:39.171 --> 00:06:43.895
&gt;&gt; Lukas Ruebbelke: And so from here,
we got some properties, item,

104
00:06:43.895 --> 00:06:47.949
selectedItem, and we have some methods.

105
00:06:49.330 --> 00:06:54.460
And this is just straight JavaScript,
nothing fancy here.

106
00:06:54.460 --> 00:06:55.565
Properties and methods.

107
00:07:02.648 --> 00:07:05.280
&gt;&gt; Lukas Ruebbelke: And
you can also enhance with dependencies.

108
00:07:05.280 --> 00:07:09.740
So we've talked about this,
but let's say your class or

109
00:07:09.740 --> 00:07:12.350
your component needs a service.

110
00:07:12.350 --> 00:07:17.880
Well, you just pass it in using
typically a private modifier.

111
00:07:17.880 --> 00:07:21.000
Generally, you do not need to
expose your class to the template.

112
00:07:22.080 --> 00:07:25.117
But now, it's available for
you to consume data, or

113
00:07:25.117 --> 00:07:27.898
allow that service to do
whatever it needs to do.

114
00:07:29.905 --> 00:07:32.750
&gt;&gt; Lukas Ruebbelke: And then,
from here, I skipped a step.

115
00:07:32.750 --> 00:07:33.790
Is that, and

116
00:07:33.790 --> 00:07:37.840
you'll see this from day one to day two
as we start to build up the components.

117
00:07:38.870 --> 00:07:40.430
Generally, I will start very broad.

118
00:07:41.680 --> 00:07:43.790
I'll start to build something out.

119
00:07:43.790 --> 00:07:48.030
And then I realize,
this is starting to get too big.

120
00:07:49.330 --> 00:07:50.240
And so then I repeat.

121
00:07:50.240 --> 00:07:54.320
And that's where the 'R' in CIDER
comes from, is I'll take something and

122
00:07:54.320 --> 00:07:58.460
I'll abstract it out and turn it into
a child component, and you start all over.

123
00:07:58.460 --> 00:08:04.645
So class, import,
decorate, enhance, repeat.

124
00:08:06.277 --> 00:08:07.556
&gt;&gt; Lukas Ruebbelke: So
you can take it or leave it,

125
00:08:07.556 --> 00:08:10.543
but that is just kind of in
my mind as I'm doing this.

126
00:08:10.543 --> 00:08:12.763
That's what is happening.

