WEBVTT

1
00:00:00.104 --> 00:00:02.518
&gt;&gt; Lukas Ruebbelke: So
this actually shouldn't be too bad.

2
00:00:02.518 --> 00:00:07.363
I'm gonna do a quick demonstration and
I'm gonna wire up one call, and

3
00:00:07.363 --> 00:00:10.478
then I'm going to turn over the challenge.

4
00:00:10.478 --> 00:00:15.063
And I'm gonna let everyone kind of
play around with the end point and

5
00:00:15.063 --> 00:00:20.307
the goal is to actually hook up widgets
to communicate with your REST server.

6
00:00:20.307 --> 00:00:25.616
So just to reiterate,
our endpoint is if you go

7
00:00:25.616 --> 00:00:33.112
to local host 3000.
&gt;&gt; Lukas Ruebbelke: We

8
00:00:33.112 --> 00:00:36.625
have this widgets endpoint here
that we're going to be consuming.

9
00:00:36.625 --> 00:00:39.530
And so for instance, if you wanted
to get a, I'm in standard REST.

10
00:00:39.530 --> 00:00:43.708
So the entire collection, if you
wanted to get a single collection or

11
00:00:43.708 --> 00:00:46.380
a single item from the collection and
so on.

12
00:00:46.380 --> 00:00:49.751
So this is what we're going to be
communicating with and wiring up.

13
00:00:49.751 --> 00:00:54.679
So hopping into the code,

14
00:00:54.679 --> 00:01:00.958
let's go to our widget service.

15
00:01:13.546 --> 00:01:15.004
&gt;&gt; Lukas Ruebbelke: I'm gonna do one thing

16
00:01:15.004 --> 00:01:20.132
real quick.
&gt;&gt; Lukas Ruebbelke: I'm just gonna

17
00:01:20.132 --> 00:01:26.147
copy this,
cuz I'm not gonna remember that.

18
00:01:26.147 --> 00:01:27.273
So let's set our base URL.

19
00:01:27.273 --> 00:01:31.373
In this case, its widgets and

20
00:01:31.373 --> 00:01:36.300
then I created a header that we use.

21
00:01:37.760 --> 00:01:47.280
So now let's create a method called,
well, actually I'm forgetting something.

22
00:01:47.280 --> 00:01:49.884
So if I'm going to make an HTTP call,

23
00:01:49.884 --> 00:01:54.338
I have a dependency obviously
on that module and that service.

24
00:01:54.338 --> 00:01:57.055
So let's do our constructor,

25
00:01:57.055 --> 00:02:06.338
private_http.
&gt;&gt; Lukas Ruebbelke: So

26
00:02:06.338 --> 00:02:08.303
now it is available to us.

27
00:02:08.303 --> 00:02:12.244
From here, let's do.

28
00:02:17.033 --> 00:02:19.140
&gt;&gt; Lukas Ruebbelke: We'll load widgets and

29
00:02:19.140 --> 00:02:22.510
see if I can do this from memory.

30
00:02:22.510 --> 00:02:26.829
So return this.http.get.

31
00:02:31.235 --> 00:02:32.287
&gt;&gt; Lukas Ruebbelke: Paste URL.

32
00:02:32.287 --> 00:02:36.839
So this is using a string literal and

33
00:02:36.839 --> 00:02:43.390
this is gonna come back,
and we need to convert it.

34
00:02:43.390 --> 00:02:45.037
So we're gonna go response.

35
00:02:45.037 --> 00:02:49.988
We're gonna convert this into json.

36
00:02:49.988 --> 00:02:51.660
And we're going to leave it at this, so

37
00:02:51.660 --> 00:02:56.669
I think I did this right.
&gt;&gt; Lukas Ruebbelke: What I'm

38
00:02:56.669 --> 00:03:01.544
also going to do.
&gt;&gt; Lukas Ruebbelke: Is I'm

39
00:03:01.544 --> 00:03:04.270
going to delete this.

40
00:03:04.270 --> 00:03:06.523
And apparently,
I already have a constructor in there.

41
00:03:13.733 --> 00:03:14.590
&gt;&gt; Lukas Ruebbelke: LoadWidgets, so

42
00:03:14.590 --> 00:03:15.335
we get base ur.

43
00:03:15.335 --> 00:03:20.580
[SOUND] Let's go into

44
00:03:20.580 --> 00:03:26.877
our.
&gt;&gt; Lukas Ruebbelke: Widgets

45
00:03:26.877 --> 00:03:27.510
component here.

46
00:03:29.010 --> 00:03:29.862
You can see already,

47
00:03:29.862 --> 00:03:34.495
it's saying like like what happened here?
&gt;&gt; Lukas Ruebbelke: So

48
00:03:34.495 --> 00:03:39.131
we're going to delete this,
cuz we're no longer referencing

49
00:03:39.131 --> 00:03:44.316
a static collection and.
&gt;&gt; Lukas Ruebbelke: We're

50
00:03:44.316 --> 00:03:45.910
going to create a method
called loadWidgets.

51
00:03:45.910 --> 00:03:50.616
This is slightly arbitrary, you could
call it, could be something, anything.

52
00:03:50.616 --> 00:03:51.701
Let's try something here.

53
00:04:02.531 --> 00:04:03.771
&gt;&gt; Lukas Ruebbelke: I don't like
to put it all the way down here.

54
00:04:03.771 --> 00:04:11.681
Sometimes, the widget's.
&gt;&gt; Lukas Ruebbelke: And

55
00:04:11.681 --> 00:04:18.714
from here, we're going to go
this.widgetsService.loadwidgets and

56
00:04:18.714 --> 00:04:23.557
how do we consume an observable string?
&gt;&gt; Speaker 2: Subscribe.

57
00:04:23.557 --> 00:04:25.373
&gt;&gt; Lukas Ruebbelke: Subscribe, good.

58
00:04:25.373 --> 00:04:28.886
We're going to subscribe.

59
00:04:28.886 --> 00:04:31.723
And from here, we'll go widgets equals

60
00:04:41.730 --> 00:04:46.119
&gt;&gt; Lukas Ruebbelke: And
I think this is everything.

61
00:04:46.119 --> 00:04:46.916
Well, let's find out.

62
00:05:03.740 --> 00:05:05.239
&gt;&gt; Lukas Ruebbelke: So
it appeared to be working.

63
00:05:05.239 --> 00:05:08.456
Let's double check this.

64
00:05:08.456 --> 00:05:14.535
So I'm gonna go into server,

65
00:05:14.535 --> 00:05:21.586
go into our JSON file and remote red

66
00:05:21.586 --> 00:05:27.455
widget.
&gt;&gt; Lukas Ruebbelke: Let's

67
00:05:27.455 --> 00:05:29.891
refresh the page.

68
00:05:29.891 --> 00:05:34.027
There we go.
&gt;&gt; Lukas Ruebbelke: So

69
00:05:34.027 --> 00:05:35.869
this is pretty straight forward.

70
00:05:35.869 --> 00:05:41.010
We'll call it http.git, putting in
the end point and then we're basically

71
00:05:41.010 --> 00:05:46.008
just returning the results and
you've seen that subscribe to consume it.

72
00:05:46.008 --> 00:05:50.265
So let me go just a step further and

73
00:05:50.265 --> 00:05:54.682
let's look at the items service.

74
00:06:05.030 --> 00:06:05.715
&gt;&gt; Lukas Ruebbelke: So I have these names

75
00:06:05.715 --> 00:06:07.580
a little messed up, but
I wouldn't worry about that.

76
00:06:07.580 --> 00:06:10.580
So we just basically did this one here,
all.

77
00:06:10.580 --> 00:06:13.787
So I'm actually going to just for

78
00:06:13.787 --> 00:06:18.822
consistency.
&gt;&gt; Lukas Ruebbelke: We'll call this

79
00:06:18.822 --> 00:06:24.530
all.
&gt;&gt; Lukas Ruebbelke: Now

80
00:06:24.530 --> 00:06:29.125
this is the one I just did, all.

81
00:06:29.125 --> 00:06:30.110
You can see here, load.

82
00:06:31.420 --> 00:06:34.090
Pretty straightforward,
we're getting a single one.

83
00:06:34.090 --> 00:06:36.080
We're just updating the endpoint.

84
00:06:38.270 --> 00:06:44.143
Create actually takes a new item.
&gt;&gt; Lukas Ruebbelke: And

85
00:06:44.143 --> 00:06:48.618
instead of get, we're doing post.

86
00:06:48.618 --> 00:06:53.654
We're returning our payload into a string
or basically back into a string,

87
00:06:53.654 --> 00:06:57.251
or passing in the header.
&gt;&gt; Lukas Ruebbelke: And

88
00:06:57.251 --> 00:07:00.223
now this is kind of,
I had to fiddle with this a bit and

89
00:07:00.223 --> 00:07:05.230
kind of search around on the internet
to figure out how to get this working.

90
00:07:05.230 --> 00:07:10.185
But this was the secret handshake for
in this case.

91
00:07:10.185 --> 00:07:14.520
Now update,
pretty much the same exact thing.

92
00:07:14.520 --> 00:07:19.249
The difference is you're
updating an existing item, so

93
00:07:19.249 --> 00:07:22.211
you just add the ID to the endpoint.

94
00:07:22.211 --> 00:07:25.436
So this renders out as widgets,
forward slash,

95
00:07:25.436 --> 00:07:27.960
whatever this ID is and it updates it.

96
00:07:29.050 --> 00:07:36.740
Delete, pretty much the same thing,
except we're passing in an item, updating.

97
00:07:37.890 --> 00:07:42.231
The endpoint would then
be widget four slash,

98
00:07:42.231 --> 00:07:47.476
whatever ID of the item you
wanna delete and there we go.

99
00:07:47.476 --> 00:07:52.302
Now, we'll actually talk about
this a little bit later.

100
00:07:52.302 --> 00:07:56.833
Actually, I think in two
more modules from now.

101
00:07:56.833 --> 00:08:02.503
I will show you one other thing and
then we'll go to our challenge

102
00:08:02.503 --> 00:08:08.954
is that in the item's component.
&gt;&gt; Lukas Ruebbelke: Notice I'm

103
00:08:08.954 --> 00:08:14.069
calling getItems, which is doing pretty
much what I just did for widgets.

104
00:08:15.790 --> 00:08:17.180
Now, I have save item.

105
00:08:18.340 --> 00:08:20.370
What I'm doing here,
is I'm checking, is there an ID?

106
00:08:22.030 --> 00:08:24.558
If there is an ID, I call update.

107
00:08:24.558 --> 00:08:27.003
If not, I call create.

108
00:08:27.003 --> 00:08:34.050
And what's happening in here and
in production, I would not do this.

109
00:08:34.050 --> 00:08:37.628
But for here, for the sake of kind
of a coherent user experience,

110
00:08:37.628 --> 00:08:44.010
when we get a response from the server,

111
00:08:44.010 --> 00:08:47.750
I'm simply just rehydrating the items.

112
00:08:48.870 --> 00:08:53.912
And the reason why I'm doing this is, so
I'm saying create this item at the server.

113
00:08:53.912 --> 00:08:57.291
And once I know that it's done,
go ahead and give me all of them and

114
00:08:57.291 --> 00:08:58.710
just rehydrate.

115
00:08:58.710 --> 00:09:02.277
Or if you delete, you say,
I've deleted this item from the server.

116
00:09:02.277 --> 00:09:03.710
Go ahead and
just get me a fresh collection.

117
00:09:04.810 --> 00:09:08.171
What this will allow you to do is
especially if you have more than one

118
00:09:08.171 --> 00:09:11.356
person working on an endpoint,
you may create something, but

119
00:09:11.356 --> 00:09:12.816
they may delete something.

120
00:09:12.816 --> 00:09:18.210
And so you're data model may be stale and
there's situations where that can happen.

121
00:09:18.210 --> 00:09:22.281
So for me, I think one of the easiest
defaults is like can I just refresh

122
00:09:22.281 --> 00:09:26.422
the collection or rehydrate it every
time I make a change at the server?

123
00:09:26.422 --> 00:09:28.015
This is what I'm doing.

124
00:09:28.015 --> 00:09:31.930
What you can also do is
change it in memory.

125
00:09:31.930 --> 00:09:35.914
So if you need it to be really
fast like we've added this,

126
00:09:35.914 --> 00:09:38.741
add it in memory, go do the server call.

127
00:09:38.741 --> 00:09:40.440
And if it succeeds, then just let it ride.

128
00:09:41.490 --> 00:09:43.072
If not, then you just roll it back.

129
00:09:43.072 --> 00:09:46.000
And so this is for instance,
like things like Firebase and

130
00:09:46.000 --> 00:09:49.604
I have some really sophisticated
technology of like we did this thing.

131
00:09:49.604 --> 00:09:53.140
And behind the scenes, it failed
like we just have to rule it back.

132
00:09:53.140 --> 00:09:57.320
And so this is in this case, I'm doing
kind of the easiest thing possible and

133
00:09:57.320 --> 00:10:00.860
that's like go do this thing and then just
refresh everything, just clear the desk.

134
00:10:02.480 --> 00:10:05.308
And somebody could say, well, like
you're doing the same thing like twice.

135
00:10:05.308 --> 00:10:06.510
Like couldn't you extract this out?

136
00:10:07.750 --> 00:10:09.500
I could and

137
00:10:09.500 --> 00:10:13.150
if I were going to take another
iteration on this, I probably would.

138
00:10:13.150 --> 00:10:17.790
This is merely a placeholder for,
if I were going to actually do this,

139
00:10:17.790 --> 00:10:21.570
I would extend it into like NGRX and
this is where this would happen.

140
00:10:21.570 --> 00:10:26.170
And so this is actually, would not be
a final input for me in the application.

141
00:10:27.310 --> 00:10:31.140
But you can see here create,
update, delete.

142
00:10:31.140 --> 00:10:34.410
What's interesting is the only
logic I have in this container.

143
00:10:35.540 --> 00:10:40.237
Component is right here.
&gt;&gt; Lukas Ruebbelke: Everything

144
00:10:40.237 --> 00:10:44.752
else is actually delegating
out to a service.

145
00:10:44.752 --> 00:10:50.299
I suppose maybe whether loose sense of
what this might be consider it, what?

146
00:10:50.299 --> 00:10:55.234
It's an expression, but the only thing
that is actually saying if this or that or

147
00:10:55.234 --> 00:10:59.720
doing some kind of thinking,
it's this method right here.

148
00:10:59.720 --> 00:11:02.230
The reason being is I'm just capturing
things and delegating it out.

149
00:11:04.190 --> 00:11:09.920
So even as a container component,
this is very thin and efficient.

150
00:11:09.920 --> 00:11:13.188
Because it's just pulling in data.

151
00:11:13.188 --> 00:11:15.477
Hydrating its child components.

152
00:11:15.477 --> 00:11:18.896
And when something happens, it's capturing
that event and delegating it back out.

