WEBVTT

1
00:00:00.380 --> 00:00:02.920
&gt;&gt; Lucas Ruebbelke: So
let's get into this challenge.

2
00:00:02.920 --> 00:00:07.030
So this was, in terms of complexity,

3
00:00:07.030 --> 00:00:11.070
this is kind of where we're kinda
leaving the foundational things and

4
00:00:11.070 --> 00:00:15.480
starting to get into some
more complex concepts.

5
00:00:17.040 --> 00:00:19.980
And so I wanna just go
through this step by step and

6
00:00:19.980 --> 00:00:23.369
make sure that everybody has
an understanding of what we're doing.

7
00:00:25.080 --> 00:00:31.090
Now what I have done is
in the widgets.component,

8
00:00:31.090 --> 00:00:34.050
or rather,
let me just show in the browser.

9
00:00:34.050 --> 00:00:37.586
I've went ahead and
generated the list and the details,

10
00:00:37.586 --> 00:00:40.836
so they're just sitting there,
and CLI commands.

11
00:00:40.836 --> 00:00:44.150
I haven't done anything else.

12
00:00:44.150 --> 00:00:48.770
And the idea is to take this Widgets list,
put it in the widgets-list component.

13
00:00:48.770 --> 00:00:54.620
The widget-details layout, and
put into the widget-details component.

14
00:00:54.620 --> 00:00:56.528
So all we're doing is we're
taking this thing that exists,

15
00:00:56.528 --> 00:00:59.500
picking it up and
separating it into two components.

16
00:00:59.500 --> 00:01:03.220
And then wiring up how things
are going to communicate.

17
00:01:03.220 --> 00:01:09.110
So if we go into our code, the first thing
I'm going to do is I'm just going to take

18
00:01:09.110 --> 00:01:14.458
this card,
&gt;&gt; Lucas Ruebbelke: Pick it up, and

19
00:01:14.458 --> 00:01:20.410
let's just paste it into the list.

20
00:01:20.410 --> 00:01:24.630
Then what I'll do is I'll go
back to the template, and

21
00:01:24.630 --> 00:01:30.389
I'm going to copy this card.
&gt;&gt; Lucas Ruebbelke: And

22
00:01:30.389 --> 00:01:34.458
I'll paste this into the widget-details

23
00:01:34.458 --> 00:01:40.421
component.
&gt;&gt; Lucas Ruebbelke: Okay,

24
00:01:40.421 --> 00:01:44.964
and then from here, let's go ahead and

25
00:01:44.964 --> 00:01:51.650
delete these two columns,
and let's see what happens.

26
00:01:51.650 --> 00:01:56.250
I think when this renders,
what I expect to happen

27
00:01:56.250 --> 00:02:00.170
is that it's gonna kinda work,
but not really.

28
00:02:01.290 --> 00:02:05.580
So this is kinda what I expected, kind of
broad strokes but there's no data yet.

29
00:02:06.740 --> 00:02:10.420
So let's start with the list,
it's kind of the easier of the two.

30
00:02:11.640 --> 00:02:17.610
So the first thing we need to do is we
need to get widgets into this list.

31
00:02:17.610 --> 00:02:23.120
So let's go to the widgets list and
we'll just go ahead,

32
00:02:23.120 --> 00:02:28.246
and I'm gonna just delete all this.
&gt;&gt; Lucas Ruebbelke: In fact, I'm not

33
00:02:28.246 --> 00:02:34.790
even in this case going to use OnInit.
&gt;&gt; Lucas Ruebbelke: And

34
00:02:34.790 --> 00:02:37.774
I'm just going to define an input, so

35
00:02:37.774 --> 00:02:42.025
@Input.
&gt;&gt; Lucas Ruebbelke: We'll

36
00:02:42.025 --> 00:02:46.869
go widgets.
&gt;&gt; Lucas Ruebbelke: And

37
00:02:46.869 --> 00:02:53.220
it is an array of Widget objects, okay?

38
00:02:53.220 --> 00:02:57.823
So we're just simply saying I want
to expose a property of widgets to

39
00:02:57.823 --> 00:03:02.210
the outside world so
that the parent component can populate it.

40
00:03:02.210 --> 00:03:05.990
Okay, so let's go back into

41
00:03:05.990 --> 00:03:12.671
the widgets.component and,
&gt;&gt; Lucas Ruebbelke: Let's go, because

42
00:03:12.671 --> 00:03:17.712
it's an Input, it's a property binding,
&gt;&gt; Lucas Ruebbelke: Which

43
00:03:17.712 --> 00:03:20.272
is pretty amazing that WebStorm
just picked that right up, and

44
00:03:20.272 --> 00:03:25.233
we'll just go widgets.
&gt;&gt; Lucas Ruebbelke: And

45
00:03:25.233 --> 00:03:28.460
let's,
&gt;&gt; Lucas Ruebbelke: Check it out.

46
00:03:28.460 --> 00:03:31.420
So far so good, pretty easy.

47
00:03:32.700 --> 00:03:39.680
Let's add in, because we're here,
&gt;&gt; Lucas Ruebbelke: The,

48
00:03:42.941 --> 00:03:44.415
&gt;&gt; Lucas Ruebbelke: Let's actually do it,

49
00:03:44.415 --> 00:03:46.560
I wanna try something real quick.

50
00:03:55.430 --> 00:03:57.400
&gt;&gt; Lucas Ruebbelke: Actually
this has to be event.

51
00:03:57.400 --> 00:03:59.090
This is kinda one of these
things that gets me.

52
00:04:05.740 --> 00:04:07.194
&gt;&gt; Lucas Ruebbelke: Method expression,

53
00:04:07.194 --> 00:04:09.810
this is actually selectWidget.

54
00:04:09.810 --> 00:04:14.130
So neither of these exist, I was going to
see if it would try to create this for

55
00:04:14.130 --> 00:04:20.150
me.
&gt;&gt; Lucas Ruebbelke: And

56
00:04:20.150 --> 00:04:25.523
let's call this actually, yeah.
&gt;&gt; Lucas Ruebbelke: So

57
00:04:25.523 --> 00:04:30.470
in widgets-component,
&gt;&gt; Lucas Ruebbelke: We'll

58
00:04:30.470 --> 00:04:33.840
go selectWidget.
&gt;&gt; Lucas Ruebbelke: I'm just trying to

59
00:04:33.840 --> 00:04:39.920
make this a little bit
more self-documenting.

60
00:04:39.920 --> 00:04:46.422
Let's just go saveWidget and cancel.
&gt;&gt; Lucas Ruebbelke: And

61
00:04:46.422 --> 00:04:48.097
I know we're going to need one more,

62
00:04:48.097 --> 00:04:57.485
let's just go deleteWidget.
&gt;&gt; Lucas Ruebbelke: And

63
00:04:57.485 --> 00:04:58.660
I'll just copy this out here.

64
00:04:58.660 --> 00:05:02.966
We're just basically gonna log it out and
then reset the form, or

65
00:05:02.966 --> 00:05:08.193
actually not even reset.
&gt;&gt; Lucas Ruebbelke: But

66
00:05:08.193 --> 00:05:11.560
we are going to delete, okay?

67
00:05:11.560 --> 00:05:17.732
So now let's go into our component and
let's create some outputs,

68
00:05:17.732 --> 00:05:24.179
@Output,
&gt;&gt; Lucas Ruebbelke: selected

69
00:05:24.179 --> 00:05:28.975
= new Event.
&gt;&gt; Lucas Ruebbelke: Emitter, and

70
00:05:28.975 --> 00:05:34.141
this is from the Angular Core.
&gt;&gt; Lucas Ruebbelke: And

71
00:05:34.141 --> 00:05:37.534
we'll do the same for
output, for delete, rather.

72
00:05:37.534 --> 00:05:42.080
&gt;&gt; Lucas Ruebbelke: And I'm gonna do one

73
00:05:42.080 --> 00:05:47.970
more input for read only.

74
00:05:54.520 --> 00:05:56.740
&gt;&gt; Lucas Ruebbelke: We're
just gonna set this to false.

75
00:05:58.010 --> 00:06:01.530
So two inputs, two outputs.

76
00:06:01.530 --> 00:06:06.945
Now let's go into our template

77
00:06:06.945 --> 00:06:11.080
here.
&gt;&gt; Lucas Ruebbelke: And,

78
00:06:14.020 --> 00:06:16.283
&gt;&gt; Lucas Ruebbelke: I'm in the details, so

79
00:06:16.283 --> 00:06:20.606
let's go into the list, rather.
&gt;&gt; Lucas Ruebbelke: So

80
00:06:20.606 --> 00:06:24.178
instead of actually calling the method, so

81
00:06:24.178 --> 00:06:28.909
instead of saying selected,
we need to actually emit, so

82
00:06:28.909 --> 00:06:32.205
we'll go selected,
&gt;&gt; Lucas Ruebbelke: .emit.

83
00:06:35.784 --> 00:06:37.395
&gt;&gt; Lucas Ruebbelke: And then for

84
00:06:37.395 --> 00:06:42.720
the button, we're going to go click,

85
00:06:44.909 --> 00:06:47.114
&gt;&gt; Lucas Ruebbelke: deleted.emit and

86
00:06:47.114 --> 00:06:51.440
we're going to send in the widget.

87
00:06:51.440 --> 00:06:54.645
Now,
&gt;&gt; Lucas Ruebbelke: What we're also going

88
00:06:54.645 --> 00:07:00.283
to do, you may have noticed this,
&gt;&gt; Lucas Ruebbelke: Is because DOM events

89
00:07:00.283 --> 00:07:05.681
bubble, so the delete button
is a child of the list item,

90
00:07:05.681 --> 00:07:10.516
that when you click on
the delete button it's going

91
00:07:10.516 --> 00:07:14.810
to capture that click
event at that element.

92
00:07:14.810 --> 00:07:17.180
But it's also going to bubble up, and

93
00:07:17.180 --> 00:07:21.480
it's going to fire this one,
this event handler.

94
00:07:21.480 --> 00:07:25.980
And so what we have to say is,
&gt;&gt; Lucas Ruebbelke: After we've clicked

95
00:07:25.980 --> 00:07:30.070
this button,
we actually want to stop the event.

96
00:07:30.070 --> 00:07:33.660
So event.stopImmediatePropagation.

97
00:07:33.660 --> 00:07:36.490
So what this does is it
prevents it from deleting and

98
00:07:36.490 --> 00:07:38.620
then selecting it at the same time,

99
00:07:38.620 --> 00:07:43.794
that will cause unpredictable behavior.
&gt;&gt; Lucas Ruebbelke: And so

100
00:07:43.794 --> 00:07:49.458
now that we have this selected and
deleted event firing,

101
00:07:49.458 --> 00:07:53.120
let's see what happens in our code.

102
00:07:53.120 --> 00:07:54.730
So I'll just pull up the Chrome Console.

103
00:07:56.350 --> 00:07:58.342
And,
&gt;&gt; Lucas Ruebbelke: In the details

104
00:07:58.342 --> 00:08:01.870
component, it's throwing up a little bit.

105
00:08:06.703 --> 00:08:08.985
So I don't think it,
yeah we're trying to populate this and

106
00:08:08.985 --> 00:08:10.250
we haven't gotten that far yet.

107
00:08:10.250 --> 00:08:12.360
So let's press pause on this.

108
00:08:12.360 --> 00:08:15.830
Let's go over to the detail component,
yes?

109
00:08:15.830 --> 00:08:17.419
&gt;&gt; Speaker 2: In the [INAUDIBLE] can you

110
00:08:17.419 --> 00:08:20.666
parse iwo parameters or just one?
&gt;&gt; Lucas Ruebbelke: Just

111
00:08:20.666 --> 00:08:22.320
one.
&gt;&gt; Speaker 2: Okay.

112
00:08:22.320 --> 00:08:23.500
&gt;&gt; Lucas Ruebbelke: I tried to do this one

113
00:08:23.500 --> 00:08:30.030
time, what I had to do is actually
combine it into like a custom object.

114
00:08:30.030 --> 00:08:33.673
And so you can, what you need to do just,
there's actually a pattern for

115
00:08:33.673 --> 00:08:35.884
this where you take
a bunch of parameters and

116
00:08:35.884 --> 00:08:38.845
you just combine into a single,
like a parameter object.

117
00:08:38.845 --> 00:08:41.380
So that's what I had to do with that.

118
00:08:41.380 --> 00:08:46.100
So just the event parameter is
just kind of like the thing,

119
00:08:46.100 --> 00:08:47.180
you just have to respect that.

120
00:08:49.390 --> 00:08:52.840
I think this actually happened like at
the last workshop somebody asked me,

121
00:08:52.840 --> 00:08:53.640
can you do two?

122
00:08:53.640 --> 00:08:56.120
And it ended up in the weeds.

123
00:08:56.120 --> 00:08:59.080
I was just kind of like nope,
it has to be an event object.

124
00:08:59.080 --> 00:09:00.440
So single parameter.

125
00:09:00.440 --> 00:09:03.248
All right, so,

126
00:09:03.248 --> 00:09:08.670
back to our template over here.

127
00:09:10.310 --> 00:09:14.735
So now in our details component
we want to send in a single

128
00:09:14.735 --> 00:09:20.850
widget.
&gt;&gt; Lucas Ruebbelke: And

129
00:09:20.850 --> 00:09:24.520
I believe this is selectedWidget.

130
00:09:28.270 --> 00:09:34.490
So let's go into our detail component and
define the input.

131
00:09:34.490 --> 00:09:35.880
So what would that look like?

132
00:09:40.740 --> 00:09:45.275
First and foremost, we need to do what?
&gt;&gt; Speaker 2: [INAUDIBLE]

133
00:09:45.275 --> 00:09:48.300
&gt;&gt; Lucas Ruebbelke: What's that?

134
00:09:48.300 --> 00:09:49.370
&gt;&gt; Speaker 2: Pass through the widget data

135
00:09:49.370 --> 00:09:50.371
model?
&gt;&gt; Lucas Ruebbelke: So

136
00:09:50.371 --> 00:09:52.565
you need to pass it the widget, but

137
00:09:52.565 --> 00:09:58.495
how do we indicate that we can do that?
&gt;&gt; Speaker 2: Button?

138
00:09:58.495 --> 00:09:59.180
&gt;&gt; Lucas Ruebbelke: Yes, so

139
00:09:59.180 --> 00:10:03.650
this is we're kind of putting a stake
in the ground, we're saying okay, now

140
00:10:03.650 --> 00:10:08.960
we are Going to accept this
property from the parent and

141
00:10:08.960 --> 00:10:12.690
it is going to be available to
the entirety of the component.

142
00:10:12.690 --> 00:10:17.189
So we will go widget and this is of type

143
00:10:17.189 --> 00:10:23.245
widget
&gt;&gt; Lucas Ruebbelke: Like so

144
00:10:35.538 --> 00:10:37.260
&gt;&gt; Lucas Ruebbelke: Let's see if.

145
00:10:37.260 --> 00:10:38.824
&gt;&gt; Speaker 3: I kept getting stuck on that

146
00:10:38.824 --> 00:10:47.335
too.
&gt;&gt; Lucas Ruebbelke: Select a name.

147
00:11:00.298 --> 00:11:00.945
&gt;&gt; Lucas Ruebbelke: And here,

148
00:11:08.914 --> 00:11:09.508
&gt;&gt; Lucas Ruebbelke: So I think for

149
00:11:09.508 --> 00:11:11.240
right now we can do an Elvis operator.

150
00:11:12.370 --> 00:11:14.250
Or safe navigation operator.

151
00:11:15.570 --> 00:11:16.156
It's still doing it.

152
00:11:16.156 --> 00:11:23.360
And here and here.

153
00:11:23.360 --> 00:11:25.105
Actually I would wager that's
where that's happening.

154
00:11:31.598 --> 00:11:32.480
&gt;&gt; Lucas Ruebbelke: No!

155
00:11:34.560 --> 00:11:39.069
Things are going from good to awesome!
&gt;&gt; Lucas Ruebbelke: Ha, ha,

156
00:11:39.069 --> 00:11:47.747
ha.
&gt;&gt; Lucas Ruebbelke: Since I'm here.

157
00:11:49.017 --> 00:11:54.755
&gt;&gt; Lucas Ruebbelke: I'm gonna have to undo

158
00:11:54.755 --> 00:11:59.290
this in a moment.

159
00:12:00.810 --> 00:12:06.510
What's happening is the isolating
that's is binding to select widget,

160
00:12:06.510 --> 00:12:09.246
which we haven't actually set up yet.

161
00:12:18.064 --> 00:12:19.676
&gt;&gt; Lucas Ruebbelke: One thing
before we go any further

162
00:12:40.400 --> 00:12:41.701
&gt;&gt; Lucas Ruebbelke: So And we were talking

163
00:12:41.701 --> 00:12:44.967
about shared mutable state and
why it's a bad thing.

164
00:12:49.718 --> 00:12:50.876
&gt;&gt; Lucas Ruebbelke: I change it here,

165
00:12:50.876 --> 00:12:55.210
it changes up here on the title,
and also over here.

166
00:12:55.210 --> 00:12:57.860
And this is simply because
we're passing by reference.

167
00:12:57.860 --> 00:13:01.450
And so they're sharing basically
their pointers to the same object.

168
00:13:01.450 --> 00:13:05.240
You change it in one place,
It changes in another place.

169
00:13:05.240 --> 00:13:09.799
And so this is,
&gt;&gt; Lucas Ruebbelke: Kinda represents one,

170
00:13:09.799 --> 00:13:12.593
there's no way to back out of this and
undo it.

171
00:13:12.593 --> 00:13:14.810
The ship has sailed.

172
00:13:14.810 --> 00:13:19.420
But more importantly is that you're
having an action here create

173
00:13:21.260 --> 00:13:23.810
or change something over here.

174
00:13:23.810 --> 00:13:28.180
And what you need to do for
the sake of stability and

175
00:13:28.180 --> 00:13:30.800
avoiding unpredictable side effects.

176
00:13:30.800 --> 00:13:32.000
You need to isolate those.

177
00:13:32.000 --> 00:13:35.140
So let's go back and fix that.

178
00:13:36.410 --> 00:13:43.230
I'm just going to do some of this here,

179
00:13:55.954 --> 00:13:58.780
&gt;&gt; Lucas Ruebbelke: Into our
which detailed component.

180
00:13:58.780 --> 00:14:01.311
So now the difference is
we're going to change this to

181
00:14:01.311 --> 00:14:10.932
a setter
&gt;&gt; Lucas Ruebbelke: And

182
00:14:10.932 --> 00:14:12.115
it's going to become a function.

183
00:14:17.520 --> 00:14:20.907
&gt;&gt; Lucas Ruebbelke: Stick's value is gonna

184
00:14:20.907 --> 00:14:23.450
be a type widget.

185
00:14:23.450 --> 00:14:27.370
Then what we're going to
do is create a selected

186
00:14:27.370 --> 00:14:31.790
widget property that we're
going to do internally.

187
00:14:33.160 --> 00:14:38.300
That we will assign this to, so
this.Selectedwidget equals a value.

188
00:14:41.700 --> 00:14:44.730
And let's go,
let's do a ritual name as well.

189
00:14:57.320 --> 00:15:00.869
Now bare with me, I know I had a condition
in here that I don't quite remember.

190
00:15:07.369 --> 00:15:08.513
&gt;&gt; Lucas Ruebbelke: Also.

191
00:15:15.852 --> 00:15:16.399
&gt;&gt; Lucas Ruebbelke: Right now,

192
00:15:16.399 --> 00:15:19.910
I'm actually not solving any problems so
I'm still passing by reference.

193
00:15:19.910 --> 00:15:24.010
I'm just saying create a new pointer and
assign in to a selected widget.

194
00:15:24.010 --> 00:15:28.850
What we have to do is use object.assign.

195
00:15:28.850 --> 00:15:33.670
And we're basically saying
create a new object by combining

196
00:15:33.670 --> 00:15:38.260
essentially this blank object and value.

197
00:15:38.260 --> 00:15:43.625
And so what this does is this returns
&gt;&gt; Lucas Ruebbelke: A new

198
00:15:43.625 --> 00:15:48.033
object that basically clones, like it
basically takes everything together and

199
00:15:48.033 --> 00:15:51.930
basically does a shallow copy
which in most cases will work.

200
00:15:51.930 --> 00:15:58.430
But now we have a copy of the widget
here using object of the sign.

201
00:15:58.430 --> 00:16:01.210
And I talk more about kind of some
immutable operations tomorrow

202
00:16:01.210 --> 00:16:02.089
if everybody would like.

203
00:16:03.413 --> 00:16:09.757
Okay, let's just double check this.
&gt;&gt; Lucas Ruebbelke: Still

204
00:16:09.757 --> 00:16:12.364
need to bind to originalName
in my template.

205
00:16:22.709 --> 00:16:25.263
&gt;&gt; Lucas Ruebbelke: originalName.

206
00:16:32.670 --> 00:16:34.496
&gt;&gt; Lucas Ruebbelke: Perfect, all right,

207
00:16:34.496 --> 00:16:37.569
the last thing that we need to do here is

208
00:16:37.569 --> 00:16:38.637
create our.

209
00:16:40.262 --> 00:16:41.713
&gt;&gt; Lucas Ruebbelke: Outputs.

210
00:16:41.713 --> 00:16:42.990
&gt;&gt; Speaker 2: Hello?
&gt;&gt; Lucas Ruebbelke: Yes?

211
00:16:42.990 --> 00:16:44.865
&gt;&gt; Speaker 2: In this country for

212
00:16:44.865 --> 00:16:46.172
selector widget?

213
00:16:46.172 --> 00:16:50.414
I mean input setWidget and
getWidget so that way,

214
00:16:50.414 --> 00:16:56.586
when widget is patched by the view,
it will use a getter and not a setter.

215
00:16:56.586 --> 00:17:00.800
I mean, you already have a setter
property for the widget, right?

216
00:17:00.800 --> 00:17:05.646
And I can have a getter property which
will be used by the view when it is time

217
00:17:05.646 --> 00:17:11.972
to use the widget.
&gt;&gt; Lucas Ruebbelke: Yes,

218
00:17:11.972 --> 00:17:15.004
but if you use a getter,

219
00:17:15.004 --> 00:17:21.037
where would you put this logic at?
&gt;&gt; Speaker 2: You keep the set as it is,

220
00:17:21.037 --> 00:17:24.754
and in the get,
you say that there is no selected widget,

221
00:17:24.754 --> 00:17:27.008
returned is our selected widget.

222
00:17:27.008 --> 00:17:32.123
So, what you do is that you use the widget

223
00:17:32.123 --> 00:17:36.961
name in the view actually.
&gt;&gt; Lucas Ruebbelke: So you're saying,

224
00:17:36.961 --> 00:17:42.311
like, get widget.
&gt;&gt; Speaker 2: Hit

225
00:17:42.311 --> 00:17:44.307
on widget.
&gt;&gt; Lucas Ruebbelke: Like this?

226
00:17:44.307 --> 00:17:45.828
&gt;&gt; Speaker 2: Yeah, there go.

227
00:17:45.828 --> 00:17:50.465
Because [INAUDIBLE] simulator,
input to be defined for

228
00:17:50.465 --> 00:17:55.590
that right, get.
&gt;&gt; Lucas Ruebbelke: Maybe,

229
00:17:55.590 --> 00:17:57.020
let's try it, let's see what happens.

230
00:18:17.430 --> 00:18:18.707
&gt;&gt; Lucas Ruebbelke: So it hasn't exploded.

231
00:18:21.877 --> 00:18:24.263
&gt;&gt; Lucas Ruebbelke: So I think you could,

232
00:18:24.263 --> 00:18:27.447
I know you can use getters and

233
00:18:27.447 --> 00:18:32.630
then bind to a getter,
definitely possible.

234
00:18:32.630 --> 00:18:36.287
I would need to think about like the
utility of that, and how I feel about it.

235
00:18:43.740 --> 00:18:44.243
&gt;&gt; Lucas Ruebbelke: I don't know,

236
00:18:44.243 --> 00:18:45.636
maybe six of one, half a dozen of another,

237
00:18:45.636 --> 00:18:47.130
let me let that sit in that brain for
a minute.

238
00:18:47.130 --> 00:18:49.935
So, it is an interesting technique,
and we'll get to reactive forms and

239
00:18:49.935 --> 00:18:51.698
we'll kind of see an example
of this again, so

240
00:18:51.698 --> 00:18:55.937
thanks for bringing that up.
&gt;&gt; Lucas Ruebbelke: And

241
00:18:55.937 --> 00:19:00.944
there actually may be a case to do this,
but there won't have to be a gitter.

242
00:19:00.944 --> 00:19:02.994
For me, if you're gonna use a getter,

243
00:19:02.994 --> 00:19:05.804
like there needs to be some
kind of like logic in here.

244
00:19:05.804 --> 00:19:09.316
Like, there maybe a reason like,
when somebody request this,

245
00:19:09.316 --> 00:19:11.799
we actually do this
additional thing first.

246
00:19:11.799 --> 00:19:14.416
And I think,
that's where that might come in handy.

247
00:19:14.416 --> 00:19:19.095
All right let's wrap this up.
&gt;&gt; Lucas Ruebbelke: Output

248
00:19:25.167 --> 00:19:29.246
&gt;&gt; Lucas Ruebbelke: We'll go saved = new

249
00:19:29.246 --> 00:19:32.423
EventEmitter.

250
00:19:40.538 --> 00:19:44.360
&gt;&gt; Lucas Ruebbelke: Just gonna
duplicate this, and we'll go,

251
00:19:44.360 --> 00:19:49.438
cancel.
&gt;&gt; Lucas Ruebbelke: Okay,

252
00:19:49.438 --> 00:19:52.253
so now let's hop back into
our widget details component.

253
00:19:57.245 --> 00:20:01.256
&gt;&gt; Lucas Ruebbelke: And on the form semit,

254
00:20:01.256 --> 00:20:09.458
it's going to be save.emit.
&gt;&gt; Lucas Ruebbelke: And

255
00:20:09.458 --> 00:20:16.040
on cancelled.
&gt;&gt; Lucas Ruebbelke: We'll

256
00:20:16.040 --> 00:20:19.011
just go like this, and I'm just gonna go
ahead and pass in the selected widget.

257
00:20:19.011 --> 00:20:23.051
There may be a time where you may
actually capture it, just in case.

258
00:20:23.051 --> 00:20:27.053
So I've seen where if you go back out And
you need to go back forward so

259
00:20:27.053 --> 00:20:28.470
on a multi-step form.

260
00:20:28.470 --> 00:20:33.105
You may actually wanna just save that for
reference if they ever come back,

261
00:20:33.105 --> 00:20:36.270
you might able to basically,
restore that state,

262
00:20:36.270 --> 00:20:41.336
cancelled.emit.
&gt;&gt; Lucas Ruebbelke: And

263
00:20:41.336 --> 00:20:45.957
yes Sebastian, I will go over what
set is doing in just a minute.

264
00:20:45.957 --> 00:20:48.464
And why we're doing that.

265
00:20:48.464 --> 00:20:54.163
Okay, so now, in our widget component

266
00:20:54.163 --> 00:20:59.010
template, we have two outputs.

267
00:20:59.010 --> 00:21:05.094
Saved, and we'll go save widget.

268
00:21:05.094 --> 00:21:07.878
Capture the event, pass it through,

269
00:21:07.878 --> 00:21:15.187
Cancelled.
&gt;&gt; Lucas Ruebbelke: Just pass this

270
00:21:15.187 --> 00:21:18.464
through as well, we're here, let's go into

271
00:21:26.305 --> 00:21:27.676
&gt;&gt; Lucas Ruebbelke: Just in case
we wanted to capture itself.

272
00:21:27.676 --> 00:21:31.437
So, let's see if this renders,
hopefully it does,

273
00:21:31.437 --> 00:21:37.456
yes.
&gt;&gt; Lucas Ruebbelke: Saving,

274
00:21:40.010 --> 00:21:41.009
&gt;&gt; Lucas Ruebbelke: Cancelling,

275
00:21:44.050 --> 00:21:45.351
&gt;&gt; Lucas Ruebbelke: I don't think it's

276
00:21:45.351 --> 00:21:48.265
deleting, let's see, if I messed that up.

277
00:21:48.265 --> 00:21:52.797
Maybe I'm not tracing it out,
delete widget,

278
00:21:52.797 --> 00:21:59.910
let me see here.
&gt;&gt; Lucas Ruebbelke: I didn't hook that up.

279
00:21:59.910 --> 00:22:05.420
Deleted, delete widget, pass in the event.

280
00:22:05.420 --> 00:22:10.568
And I think, this is everything.
&gt;&gt; Lucas Ruebbelke: There we go,

281
00:22:10.568 --> 00:22:12.715
so you can see it's tracing
down here in the console.

282
00:22:14.921 --> 00:22:16.361
&gt;&gt; Lucas Ruebbelke: So let me just talk

283
00:22:16.361 --> 00:22:21.748
about what the setter function is doing,
and why we're using it.

284
00:22:21.748 --> 00:22:27.095
So in the form,
what we want to avoid is having our state

285
00:22:27.095 --> 00:22:33.623
mutation kind of seep out of
the component, we want to contain it.

286
00:22:33.623 --> 00:22:38.378
So, by using the set method,
every time we set the widget,

287
00:22:38.378 --> 00:22:43.422
this method gets called and
we're creating a copy of the widget

288
00:22:43.422 --> 00:22:48.103
using object.assign and
assigning it to a local number.

289
00:22:48.103 --> 00:22:52.313
So now we're saying, create a copy of
this, and assign it to a selected widget.

290
00:22:52.313 --> 00:22:58.091
And this is what we
are mutating in the form.

291
00:22:58.091 --> 00:23:02.857
So it's just simply a way to capture
what's coming in, create a copy, and then,

292
00:23:02.857 --> 00:23:04.388
binding that to the form.

293
00:23:04.388 --> 00:23:05.712
So hopefully, that makes sense.

294
00:23:05.712 --> 00:23:10.399
It's just the way to do it,
in a somewhat immutable fashion by

295
00:23:10.399 --> 00:23:15.459
isolating the mutation until we're
ready to propagate a back up.

296
00:23:15.459 --> 00:23:17.189
Any questions about that?

297
00:23:17.189 --> 00:23:20.763
So it's interesting is, it was actually
pretty easy to create the components.

298
00:23:20.763 --> 00:23:23.135
The majority of what you'll do,

299
00:23:23.135 --> 00:23:27.213
is just kinda spend generating
your inputs and outputs.

300
00:23:27.213 --> 00:23:29.396
And then kinda re-wiring it back up.

301
00:23:29.396 --> 00:23:33.819
But, the main thing with
component driven architecture,

302
00:23:33.819 --> 00:23:39.400
is that you're creating these small
components that do a specific thing.

303
00:23:39.400 --> 00:23:42.172
And then you're using inputs and
outputs, or

304
00:23:42.172 --> 00:23:45.023
these contracts to
communicate between them.

305
00:23:45.023 --> 00:23:48.439
And so, what you'll have is this kinda
this hierarchy tree structure of

306
00:23:48.439 --> 00:23:50.623
components, from your top level component.

307
00:23:50.623 --> 00:23:53.938
That goes down very broad, and
gets more and more specific,

308
00:23:53.938 --> 00:23:58.425
until you get to a very specific piece of
functionality within your application.

309
00:23:58.425 --> 00:24:02.739
The goal is to have components like this,
that are,

310
00:24:02.739 --> 00:24:06.383
for the most part, completely stateless.

311
00:24:06.383 --> 00:24:08.928
We're actually not storing internal state,

312
00:24:08.928 --> 00:24:11.350
other than what is
defined by the bindings.

313
00:24:11.350 --> 00:24:14.929
And so this is a very stable component,
unless angular breaks or

314
00:24:14.929 --> 00:24:16.983
we pass something we don't expect,

315
00:24:16.983 --> 00:24:21.050
this thing is going to work the same
way all the time, which I quite like.

