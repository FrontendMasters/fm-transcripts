WEBVTT

1
00:00:00.330 --> 00:00:04.520
&gt;&gt; Lukas Ruebbelke: Imagine you have
a component, with a child component, and

2
00:00:04.520 --> 00:00:09.680
you have this very clear line of
communication of inputs and outputs.

3
00:00:09.680 --> 00:00:12.250
Now let's expand this mental model out.

4
00:00:13.510 --> 00:00:16.150
So, you could have a parent component

5
00:00:17.940 --> 00:00:22.900
that has multiple child
components within it

6
00:00:22.900 --> 00:00:27.120
that communicates to the children
components via inputs and outputs.

7
00:00:27.120 --> 00:00:31.000
So based on what I'm saying,
I think this model right here,

8
00:00:31.000 --> 00:00:35.270
this kind of simple diagram,
is pretty easy to wrap our minds around.

9
00:00:35.270 --> 00:00:39.506
Of course, we have a parent component like
home and we start dropping things into it

10
00:00:39.506 --> 00:00:43.805
and from there, we can start communicating
to those children components via inputs

11
00:00:43.805 --> 00:00:48.398
and outputs.
&gt;&gt; Lukas Ruebbelke: Well,

12
00:00:48.398 --> 00:00:52.070
this is called Container and
Presentational Components.

13
00:00:54.170 --> 00:00:56.350
And so how this works is

14
00:00:58.330 --> 00:01:02.940
you have a container component
that serves as well a container.

15
00:01:04.180 --> 00:01:06.670
So what it does is it's responsible for

16
00:01:06.670 --> 00:01:13.390
consuming the data that that feature,
if you will, needs.

17
00:01:13.390 --> 00:01:16.031
And so it does very little layout,

18
00:01:16.031 --> 00:01:20.767
it's simply concerned with
essentially getting the data and

19
00:01:20.767 --> 00:01:25.517
satisfying the dependencies
of it's children components.

20
00:01:25.517 --> 00:01:26.820
So I think of, really,

21
00:01:26.820 --> 00:01:30.420
a container component as the kind
of the air traffic controller.

22
00:01:32.290 --> 00:01:37.270
So they know how to load the data,
they know how to persist changes, and

23
00:01:37.270 --> 00:01:41.837
when an event happens within
a component from a child component,

24
00:01:41.837 --> 00:01:46.156
it gets delegated up and
they know how to actually communicate

25
00:01:46.156 --> 00:01:50.923
outside to the services.
&gt;&gt; Lukas Ruebbelke: Presentational

26
00:01:50.923 --> 00:01:54.959
components, on the other hand,
they're generally stateless and

27
00:01:54.959 --> 00:01:58.840
fully defined by their bindings,
and this is amazing.

28
00:01:58.840 --> 00:02:04.640
So all data goes in as inputs, gets
immediately rendered in the template, and

29
00:02:04.640 --> 00:02:06.810
every change comes out is an output.

30
00:02:09.840 --> 00:02:14.597
And so the idea is create as few
container components as possible, and

31
00:02:14.597 --> 00:02:17.670
as many presentation
components as you can.

32
00:02:19.260 --> 00:02:24.127
So what I would usually do,
I would usually organize my application by

33
00:02:24.127 --> 00:02:28.841
feature, and I would do a feature,
or a route, for every feature.

34
00:02:28.841 --> 00:02:34.158
So if you go into widgets, then you're
gonna load a top level widgets component,

35
00:02:34.158 --> 00:02:36.325
which is a container component.

36
00:02:36.325 --> 00:02:39.312
So if you actually look at the items,
and how I've done that,

37
00:02:39.312 --> 00:02:43.292
this is how this works, you have an items
route that routes to an items component.

38
00:02:44.430 --> 00:02:48.052
The items component being a container
component is responsible for

39
00:02:48.052 --> 00:02:52.244
basically pulling in the data from
the service, and when something happens,

40
00:02:52.244 --> 00:02:56.819
communicating back to the service that
something, like, hey this thing happened,

41
00:02:56.819 --> 00:02:58.500
go do this thing, persist it.

42
00:03:00.200 --> 00:03:03.450
It then communicates state and

43
00:03:03.450 --> 00:03:07.929
events to the children components.
&gt;&gt; Lukas Ruebbelke: So,

44
00:03:07.929 --> 00:03:14.450
this is a completely valid
presentational component.

45
00:03:16.750 --> 00:03:18.557
Totally functional, and

46
00:03:18.557 --> 00:03:22.830
this component class is completely
defined by its bindings,

47
00:03:22.830 --> 00:03:29.005
there is zero logic in this component.
&gt;&gt; Lukas Ruebbelke: This is very,

48
00:03:29.005 --> 00:03:33.948
very stable.
&gt;&gt; Lukas Ruebbelke: Even to the point,

49
00:03:33.948 --> 00:03:38.926
the question is how would
your unit test this?

50
00:03:44.503 --> 00:03:46.033
&gt;&gt; Lukas Ruebbelke: I mean, unit testing,

51
00:03:46.033 --> 00:03:49.100
by nature,
is you're testing a unit of logic.

52
00:03:51.430 --> 00:03:55.070
What do you do with a component
that doesn't have any logic?

53
00:03:55.070 --> 00:03:58.050
It's just going to work
the same every single time,

54
00:03:58.050 --> 00:03:59.400
because there's no moving parts.

55
00:04:02.250 --> 00:04:05.960
And unless angular is broken, or

56
00:04:05.960 --> 00:04:11.020
you're passing in some bad data, there's
a bad assumption further up the stream,

57
00:04:11.020 --> 00:04:15.850
this will work the same way every single
time, complete referential transparency.

58
00:04:17.060 --> 00:04:21.992
So now, having components that are so
simple that you do not need,

59
00:04:21.992 --> 00:04:27.188
it's actually hard to test at a unit
level, I would not even try to unit

60
00:04:27.188 --> 00:04:32.591
test this, I would do end-to-end testing,
or integration testing.

61
00:04:32.591 --> 00:04:40.480
This reduces the possibility, or
the footprint, for something going wrong.

62
00:04:40.480 --> 00:04:43.550
So I mean this is kind of the equivalent
of, I have a real bad habit of

63
00:04:43.550 --> 00:04:47.960
I love delicious food, and so if there's
junk food in the house, I'm gonna eat it.

64
00:04:47.960 --> 00:04:49.880
So how do I keep myself
from eating junk food?

65
00:04:49.880 --> 00:04:52.600
I don't buy it,
I don't bring it in the house.

66
00:04:52.600 --> 00:04:56.220
Same thing is,
if there's logic that's gonna go wrong,

67
00:04:56.220 --> 00:04:58.770
the best way to fix that
problem it's get rid of it.

68
00:05:00.300 --> 00:05:04.540
That's some one of the best test you can
write, is the test you don't have try,

69
00:05:04.540 --> 00:05:05.850
because its logic doesn't exist.

70
00:05:08.100 --> 00:05:13.964
And a
&gt;&gt; Lukas Ruebbelke: Container component,

71
00:05:13.964 --> 00:05:16.750
so the items component is kinda
the poster child for this.

72
00:05:16.750 --> 00:05:20.844
This is responsible for
pulling in the item's service, and

73
00:05:20.844 --> 00:05:25.596
communicating to that service to
persist the changes to the backend.

74
00:05:25.596 --> 00:05:31.876
Let me see here,
&gt;&gt; Lukas Ruebbelke: So, the question is,

75
00:05:31.876 --> 00:05:35.973
if you want to get data from a child
component to another child component,

76
00:05:35.973 --> 00:05:37.760
how does that work?

77
00:05:37.760 --> 00:05:43.940
Well, one child component emits it up to
the parent component, then the parent

78
00:05:43.940 --> 00:05:48.430
component is responsible for sending that
back down to the other child component.

79
00:05:48.430 --> 00:05:52.100
So, the container component serves
as the air traffic controller, or

80
00:05:52.100 --> 00:05:57.290
the communication control center,
for communicating state to children.

