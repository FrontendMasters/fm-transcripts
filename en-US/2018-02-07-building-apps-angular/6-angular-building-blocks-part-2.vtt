WEBVTT

1
00:00:00.240 --> 00:00:01.300
&gt;&gt; Lukas Ruebbelke: Data binding.

2
00:00:01.300 --> 00:00:05.070
How do we actually communicate
between the class and the template?

3
00:00:05.070 --> 00:00:06.790
There's really kinda four ways.

4
00:00:06.790 --> 00:00:11.850
Before, I'd say there was kinda one main
way, and then you have like entry model,

5
00:00:12.940 --> 00:00:18.990
but as a whole, most people
are familiar with the curly braces.

6
00:00:18.990 --> 00:00:23.870
But if you have a value, on a component
class that you want to send in to your

7
00:00:23.870 --> 00:00:26.770
template, you communicate
that via property binding.

8
00:00:28.630 --> 00:00:30.790
But then if something
happens in your template, and

9
00:00:30.790 --> 00:00:35.130
you want to communicate it back to the
component, you do that via event binding.

10
00:00:36.230 --> 00:00:39.680
And so
these are essentially one way streets.

11
00:00:39.680 --> 00:00:40.634
Let me see what my next slide is here.

12
00:00:45.361 --> 00:00:48.290
&gt;&gt; Lukas Ruebbelke: I guess I thought
I had, it might be in another one.

13
00:00:48.290 --> 00:00:51.912
But, so template, or

14
00:00:51.912 --> 00:00:56.690
class over here to template.

15
00:00:56.690 --> 00:00:59.280
We're basically passing
properties into the template.

16
00:00:59.280 --> 00:01:03.660
If something happens in the template,
we pass the event back into the class for

17
00:01:03.660 --> 00:01:04.990
processing.

18
00:01:04.990 --> 00:01:06.720
So these are one way streets.

19
00:01:07.930 --> 00:01:11.170
Class to template, template to class.

20
00:01:11.170 --> 00:01:15.540
Now the question is, brain bender,
what happens when you combine?

21
00:01:15.540 --> 00:01:19.704
If you take two one way streets and
you put them together, what do you have?

22
00:01:19.704 --> 00:01:22.909
&gt;&gt; [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: Yeah, and so

23
00:01:22.909 --> 00:01:24.890
you'll see here.

24
00:01:24.890 --> 00:01:27.570
Entry model is one of
the most common ones.

25
00:01:27.570 --> 00:01:30.690
Initially, there was not going to be two
way data binding, and enough people,

26
00:01:30.690 --> 00:01:32.860
let their voices be heard.

27
00:01:32.860 --> 00:01:38.860
And so they said, well, we have going this
way let's just combine them together.

28
00:01:38.860 --> 00:01:43.050
And so when you see what's called,
banana in a box,

29
00:01:43.050 --> 00:01:46.970
if you will, is you have the brackets and
then the parentheses.

30
00:01:46.970 --> 00:01:50.740
What this allows it to do is bind to the
property on the class, so it automatically

31
00:01:50.740 --> 00:01:56.920
updates, but if it changes, then it will
communicate that change back to the class.

32
00:01:56.920 --> 00:01:58.040
And so really,

33
00:01:58.040 --> 00:02:01.530
two way data binding is just two one
way data bindings combined together.

34
00:02:03.690 --> 00:02:09.840
I actually like to call this an angular
hug, so, that's kind of how that happens.

35
00:02:09.840 --> 00:02:17.770
So, what we have here is template class,
property binding and event binding.

36
00:02:17.770 --> 00:02:25.014
I think I lost my arrows here, but the
event binding happen from what to what?

37
00:02:27.902 --> 00:02:29.261
&gt;&gt; Speaker 2: Template to class.

38
00:02:29.261 --> 00:02:31.120
&gt;&gt; Lukas Ruebbelke: Template to class,
okay.

39
00:02:31.120 --> 00:02:33.420
And then property binding is from?

40
00:02:34.420 --> 00:02:35.110
Class to template.

41
00:02:35.110 --> 00:02:36.141
So it's just kind of a circle.

42
00:02:39.127 --> 00:02:40.870
&gt;&gt; Lukas Ruebbelke: So
let's see some of this.

43
00:02:40.870 --> 00:02:43.550
Over here, what do we have?

44
00:02:45.080 --> 00:02:45.880
String interpolation.

45
00:02:45.880 --> 00:02:48.490
It's just taking a string and
rendering it on to the template.

46
00:02:48.490 --> 00:02:52.210
This is pretty much kind
of the most basic one.

47
00:02:52.210 --> 00:02:56.820
Now we have e of experiments, so

48
00:02:56.820 --> 00:02:59.500
we have this property e that we
want to pass into this template.

49
00:03:01.060 --> 00:03:03.010
We're using property binding.

50
00:03:03.010 --> 00:03:05.940
So we're saying,
on this property experiment,

51
00:03:05.940 --> 00:03:08.250
we're passing in this value of e.

52
00:03:09.620 --> 00:03:11.380
But then over here, we have a button.

53
00:03:12.750 --> 00:03:14.740
And we say when this clicks, so

54
00:03:14.740 --> 00:03:18.040
we're capturing the click,
we're saying call updateMessage.

55
00:03:20.640 --> 00:03:22.160
And then from here, we have an input.

56
00:03:24.030 --> 00:03:28.047
You can see that we're
binding in both places.

57
00:03:28.047 --> 00:03:28.720
Does that make sense?

58
00:03:30.030 --> 00:03:34.410
So one way to think of this,
is if you have an object and

59
00:03:34.410 --> 00:03:37.070
you want to dynamically
access a property on it.

60
00:03:37.070 --> 00:03:40.700
Wish we had a whiteboard but we do not.

61
00:03:40.700 --> 00:03:42.650
So imagine you have an object.

62
00:03:44.100 --> 00:03:47.350
And you say, I want to get
the value of some dynamic property.

63
00:03:47.350 --> 00:03:48.070
You donâ€™t know what it is.

64
00:03:48.070 --> 00:03:51.150
It could be first name,
last name, address, whatever.

65
00:03:52.710 --> 00:03:53.720
How do we do that?

66
00:03:53.720 --> 00:03:54.520
With the ray notation.

67
00:03:55.520 --> 00:03:59.780
So, you can say, user, a ray notation,

68
00:03:59.780 --> 00:04:04.110
you can actually just pass him the
property dynamically to get that value.

69
00:04:04.110 --> 00:04:09.790
And so this is how I think of property
binding, cuz you're actually accessing

70
00:04:09.790 --> 00:04:14.330
the value of a property that
exists on this component.

71
00:04:14.330 --> 00:04:18.930
Now when you have a function,
how do you call it?

72
00:04:20.180 --> 00:04:25.830
So if I had a function called run,
well, let's just say Hello World, and

73
00:04:25.830 --> 00:04:29.560
I traced it out in the console,
just console log, Hello World.

74
00:04:30.650 --> 00:04:32.970
What's it going to output?

75
00:04:32.970 --> 00:04:34.570
The body of the function.

76
00:04:36.240 --> 00:04:37.410
So it's not calling it.

77
00:04:37.410 --> 00:04:38.480
A function is an object.

78
00:04:38.480 --> 00:04:39.920
I'm tracing out the object.

79
00:04:39.920 --> 00:04:42.832
How do I call, Hello World?

80
00:04:42.832 --> 00:04:45.440
Parentheses.

81
00:04:45.440 --> 00:04:48.240
Once you put the parentheses on it,
that method is going to get called, and

82
00:04:48.240 --> 00:04:50.680
it's actually gonna trace
out the result of it.

83
00:04:50.680 --> 00:04:53.000
And so this is how I think of events.

84
00:04:53.000 --> 00:04:55.130
Capture it with parentheses.

85
00:04:55.130 --> 00:04:58.149
So, brackets for array,
parentheses for event calls.

86
00:05:01.778 --> 00:05:05.630
&gt;&gt; Lukas Ruebbelke: If you can believe it,
I think we're in the homestretch.

87
00:05:05.630 --> 00:05:07.990
So, this comes up a lot.

88
00:05:07.990 --> 00:05:09.310
What about directives?

89
00:05:09.310 --> 00:05:14.240
So, a component is
a directive with a template.

90
00:05:16.750 --> 00:05:21.250
A directive is actually
a kind of a superset

91
00:05:21.250 --> 00:05:26.030
of a component that provides
functionality to an element, but

92
00:05:26.030 --> 00:05:30.070
it doesn't provide a template with it.

93
00:05:30.070 --> 00:05:34.810
So what it's doing is taking
an existing element on the page, and

94
00:05:34.810 --> 00:05:36.080
essentially augmenting that.

95
00:05:36.080 --> 00:05:39.140
So you're basically saying
a directive is behavior only,

96
00:05:39.140 --> 00:05:43.410
not behavior and view,
if that makes sense.

97
00:05:43.410 --> 00:05:50.810
So, there's certain things,
like let's say you had an item

98
00:05:50.810 --> 00:05:56.880
on the page that you wanted to attach
some kind of styling to it, dynamically.

99
00:05:56.880 --> 00:05:58.890
That would be a good case of a directive.

100
00:05:58.890 --> 00:06:00.700
A router link is a good example of that.

101
00:06:01.820 --> 00:06:04.340
Is that it will basically take and

102
00:06:04.340 --> 00:06:08.690
take an existing element and
attach the link to it.

103
00:06:08.690 --> 00:06:10.570
It's not inserting a new template,

104
00:06:10.570 --> 00:06:13.490
it's just taking the thing that's already
there and augmenting the behavior.

105
00:06:14.950 --> 00:06:16.950
NGF is actually another example of this.

106
00:06:16.950 --> 00:06:18.225
NGF what does that look like?

107
00:06:18.225 --> 00:06:20.600
Or NG4.

108
00:06:20.600 --> 00:06:23.550
It doesn't look like anything,
it looks like whatever template it's on.

109
00:06:23.550 --> 00:06:26.900
So that's the difference is that
a component has a template,

110
00:06:26.900 --> 00:06:28.176
a directive does not.

111
00:06:28.176 --> 00:06:33.910
So it kind of broke my heart, but
they deprecated the blink tag.

112
00:06:35.720 --> 00:06:38.420
Somebody could bring this back,
if they wanted.

113
00:06:38.420 --> 00:06:43.430
And how would do this is, write
a blink directive, insert the element,

114
00:06:43.430 --> 00:06:47.560
that it's on, so this is element rev, and
then attach the blink functionality and

115
00:06:47.560 --> 00:06:49.220
get the party started.

116
00:06:49.220 --> 00:06:52.900
And so this is an example of,
I don't want to add in a new view.

117
00:06:52.900 --> 00:06:55.048
What I wanna do is take
this existing thing, and

118
00:06:55.048 --> 00:06:56.828
I want it to blink like it's 1999.

119
00:07:00.266 --> 00:07:02.973
&gt;&gt; Lukas Ruebbelke: So this is it,
it just has a selector, not a template.

120
00:07:06.085 --> 00:07:08.740
&gt;&gt; Lukas Ruebbelke: Okay,
really close to homestretch now.

121
00:07:09.920 --> 00:07:13.560
This is pretty easy,
a component is system what?

122
00:07:13.560 --> 00:07:15.410
A class and a template.

123
00:07:15.410 --> 00:07:16.030
That's a metadata.

124
00:07:17.740 --> 00:07:21.850
Well, this is really easy with a service,
it's just a class.

125
00:07:23.660 --> 00:07:25.840
And what you wanna do it's
keep your business logic,

126
00:07:25.840 --> 00:07:30.470
everything as much as you
can into your services.

127
00:07:30.470 --> 00:07:33.380
And you want your components
to do one of two things.

128
00:07:33.380 --> 00:07:36.210
Consume just enough data
to satisfy the template,

129
00:07:36.210 --> 00:07:40.860
capture user events and
delegate it back to the services.

130
00:07:40.860 --> 00:07:44.470
So you want your services to be rich,
your components to be thin clients.

131
00:07:46.220 --> 00:07:50.470
One thing I will say is,
you technically do not have to

132
00:07:50.470 --> 00:07:55.090
use injectable metadata, but
there's some weird cases, it'll break.

133
00:07:55.090 --> 00:07:57.420
So just the recommended thing
is always use injectable.

134
00:07:59.380 --> 00:08:02.520
And this is it, what do we have here?

135
00:08:03.930 --> 00:08:06.370
Well, it's a class.

136
00:08:06.370 --> 00:08:11.350
A little bit of dependency
injection with a method.

137
00:08:12.400 --> 00:08:15.910
And so, by the time we get to components,
and kinda work through that,

138
00:08:15.910 --> 00:08:20.370
we'll get to the services thing, and
it's like, all right, you know what to do.

139
00:08:20.370 --> 00:08:24.269
And it's gonna actually be a very short
module, because this is just a class.

140
00:08:31.394 --> 00:08:36.413
&gt;&gt; Lukas Ruebbelke: So what NG 4 worked

141
00:08:36.413 --> 00:08:41.439
with ES 5 syntax.

142
00:08:41.439 --> 00:08:45.634
Like in angle GS entry repeat.

143
00:08:45.634 --> 00:08:50.358
No, I don't, they do not have
an equivalent to that, so it is very much,

144
00:08:50.358 --> 00:08:52.590
yes, kind of all the way.

