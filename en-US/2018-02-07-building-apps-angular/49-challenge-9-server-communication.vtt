WEBVTT

1
00:00:00.352 --> 00:00:04.408
&gt;&gt; Lukas Ruebbelke: And so what I'd like
everybody to do is build out their widgets

2
00:00:04.408 --> 00:00:05.115
service.

3
00:00:05.115 --> 00:00:09.994
So start with get, the collection,
but then go ahead and

4
00:00:09.994 --> 00:00:12.950
do create, update, and delete.

5
00:00:15.600 --> 00:00:20.418
I think this will take,
&gt;&gt; Lukas Ruebbelke: I'll give everybody

6
00:00:20.418 --> 00:00:21.627
20 minutes to do this.

7
00:00:21.627 --> 00:00:24.970
If somebody, when you get done,
just go ahead and raise your hand.

8
00:00:24.970 --> 00:00:27.950
And if everybody's kinda done,
then we'll just, we'll kinda move on.

9
00:00:27.950 --> 00:00:34.090
So use the ItemService as a reference and
the items component.

10
00:00:34.090 --> 00:00:38.515
And let's built out this container
component and the service.

11
00:00:38.515 --> 00:00:45.000
So Sebastian on headers, any best
practices or tips to handle CORS errors?

12
00:00:45.000 --> 00:00:50.227
So, generally CORS is
an issue with the server.

13
00:00:50.227 --> 00:00:58.190
And so your server has to be
configured to accept your call.

14
00:00:58.190 --> 00:01:02.350
And so if there is a CORS error,
I actually wanna know about that.

15
00:01:02.350 --> 00:01:04.520
And so that is something I
try to catch in development.

16
00:01:05.540 --> 00:01:07.930
And sometimes I'm just
hitting an endpoint that

17
00:01:09.120 --> 00:01:14.280
it hasn't been configured to
accept my request from my call.

18
00:01:14.280 --> 00:01:18.648
And so sometimes it's just a matter
of calling up IT and saying, hey,

19
00:01:18.648 --> 00:01:20.790
can you whitelist this IP?

20
00:01:20.790 --> 00:01:25.030
And so generally, in development,
I want to surface all the errors.

21
00:01:25.030 --> 00:01:30.010
And so
while I'm working in development mode,

22
00:01:30.010 --> 00:01:32.960
I wanna capture everything and
I wanna know about it.

23
00:01:32.960 --> 00:01:36.000
I wanna see how many of these
things can I actually fix?

24
00:01:36.000 --> 00:01:37.440
How many of these are solvable?

25
00:01:38.950 --> 00:01:42.989
From there, if there was some kind of
a CORS error or something happened,

26
00:01:44.050 --> 00:01:47.360
more than likely what I would do
is capture it at the stream level.

27
00:01:49.280 --> 00:01:51.407
Find some way to communicate
that internally.

28
00:01:51.407 --> 00:01:56.723
So maybe send that,
like log that error to a remote server and

29
00:01:56.723 --> 00:02:03.188
then find some user-friendly error
to communicate to the user that hey,

30
00:02:03.188 --> 00:02:08.850
something has happened,
either try again or contact support.

31
00:02:08.850 --> 00:02:12.360
And so obviously, you don't wanna
surface any kind of sensitive data or

32
00:02:12.360 --> 00:02:14.740
information that doesn't
make any sense to them.

33
00:02:14.740 --> 00:02:17.880
And so for me,
the best approach to this is you wanna

34
00:02:17.880 --> 00:02:20.990
catch as much of this before
you go onto production.

35
00:02:20.990 --> 00:02:23.160
But if it is going to happen, and it will,

36
00:02:24.350 --> 00:02:30.230
have a way to catch that at the stream
level to communicate that to

37
00:02:30.230 --> 00:02:34.970
a kind of a remote server that you can
then go back and see what happened.

38
00:02:34.970 --> 00:02:37.900
So kind of communicate it
through the back door like hey,

39
00:02:37.900 --> 00:02:39.990
this is what really happened.

40
00:02:39.990 --> 00:02:44.720
And then come up with a scheme for
communicating it to

41
00:02:44.720 --> 00:02:49.570
the user in a friendly way
that actually makes sense.

42
00:02:49.570 --> 00:02:53.196
And so that's kinda the beauty of
observables is that you can capture it

43
00:02:53.196 --> 00:02:57.004
where happens, and then figure out what
you're going to do with it right at

44
00:02:57.004 --> 00:03:00.370
the source.
&gt;&gt; Speaker 2: Is there any built in login?

45
00:03:01.850 --> 00:03:04.070
Cuz I mean you send it
right to remote server?

46
00:03:04.070 --> 00:03:08.872
Or are you just kinda handle it yourself?
&gt;&gt; Lukas Ruebbelke: So with AngularJS,

47
00:03:08.872 --> 00:03:14.130
there was a dollar log, which just give
you kind of some better logging options.

48
00:03:14.130 --> 00:03:18.360
There's nothing into the framework for
that.

49
00:03:18.360 --> 00:03:22.736
But there is some pretty good projects
that are fairly full featured in terms of

50
00:03:22.736 --> 00:03:23.343
logging.

51
00:03:23.343 --> 00:03:26.601
But, I up for

52
00:03:26.601 --> 00:03:32.640
Airbrake is a pretty common service.

53
00:03:32.640 --> 00:03:38.130
And so to that end, before actually
capturing the errors themselves,

54
00:03:38.130 --> 00:03:41.050
I would recommend hooking up
a third party service for that.

55
00:03:41.050 --> 00:03:44.310
So Airbrake is the one that
I've used in production.

56
00:03:44.310 --> 00:03:46.460
Like, hey, this thing went wrong.

57
00:03:46.460 --> 00:03:50.029
And then what you can do using
an interceptor is actually automatically

58
00:03:50.029 --> 00:03:51.574
capture any of those errors and

59
00:03:51.574 --> 00:03:54.320
automatically just push them
right out the Airbrake.

60
00:03:56.640 --> 00:03:59.570
And then you can even configure it if
something goes wrong, send me an email.

61
00:03:59.570 --> 00:04:01.060
Or sometimes, you just don't wanna know,

62
00:04:01.060 --> 00:04:03.890
I'll just go look at it at the end
of the day or the end of the week.

63
00:04:03.890 --> 00:04:08.480
But there are certain, during launch,
we've had those running and

64
00:04:08.480 --> 00:04:11.688
pretty much as things are breaking,
we're able to capture them,

65
00:04:11.688 --> 00:04:13.970
but Airbrake or some kind of
third party service like that.

