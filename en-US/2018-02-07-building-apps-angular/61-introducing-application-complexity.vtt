WEBVTT

1
00:00:00.250 --> 00:00:04.430
&gt;&gt; Lukas Ruebbelke: If we are at,
let's say, kind of very local level.

2
00:00:04.430 --> 00:00:07.170
So imagine we're sitting in a room here.

3
00:00:07.170 --> 00:00:14.250
And this is the current angular
perspective that we have.

4
00:00:14.250 --> 00:00:18.980
We're going to zoom out and
we're going to look it programming as

5
00:00:18.980 --> 00:00:23.910
a whole from at a minimum,
like an airplane view.

6
00:00:23.910 --> 00:00:26.840
So we're not going from ground level.

7
00:00:26.840 --> 00:00:31.534
Let's step up and just look at
applications as a whole from kind of this

8
00:00:31.534 --> 00:00:36.708
10,000-foot view and use this as
a context for kind of everything that

9
00:00:36.708 --> 00:00:41.565
we're going to cover today and
how it actually solves these high-level

10
00:00:41.565 --> 00:00:49.106
problems.
&gt;&gt; Lukas Ruebbelke: So

11
00:00:49.106 --> 00:00:56.288
how many people here would say
that programming is super easy and

12
00:00:56.288 --> 00:01:00.546
it comes totally natural, anybody?

13
00:01:00.546 --> 00:01:04.183
I can say for
a fact that learning to program and

14
00:01:04.183 --> 00:01:10.346
learning to program well is one of the
hardest things that I've ever had to do.

15
00:01:10.346 --> 00:01:13.280
And it's something that I
just work on over and over.

16
00:01:13.280 --> 00:01:15.266
Every day, I'm trying to get better.

17
00:01:15.266 --> 00:01:20.306
And whatt's funny is, I'll tell
a little story, so I've mentioned Jeff

18
00:01:20.306 --> 00:01:25.595
[INAUDIBLE] who's saying who has an
amazing course here, and one of my heroes.

19
00:01:25.595 --> 00:01:31.638
We were at Salt Lake City at a conference,
and he's a bit more classically trained.

20
00:01:31.638 --> 00:01:36.356
I'm self-taught, and so I happen to
know a little bit about a lot of things,

21
00:01:36.356 --> 00:01:39.640
where he knows a lot about
some very specific things.

22
00:01:39.640 --> 00:01:42.890
And so I'm saying, Jeff, what do you do

23
00:01:42.890 --> 00:01:47.910
when you're kind of this breadth style
learner, where you just know a lot?

24
00:01:47.910 --> 00:01:49.470
How would you approach that?

25
00:01:49.470 --> 00:01:55.390
And he made this comment, he said,
well, I'd been programming for

26
00:01:55.390 --> 00:01:59.360
ten years before I learned Lisp.

27
00:01:59.360 --> 00:02:00.810
And then I realized I
didn't know anything.

28
00:02:02.290 --> 00:02:07.042
And so you can imagine it
just kind of like [SOUND].

29
00:02:07.042 --> 00:02:08.797
It's like if you didn't
know anything before Lisp,

30
00:02:08.797 --> 00:02:10.870
I haven't even gotten started.

31
00:02:10.870 --> 00:02:16.150
And so I bring that up to say
that programming is very complex.

32
00:02:17.980 --> 00:02:23.500
And I think that not only is
programming itself complex,

33
00:02:23.500 --> 00:02:27.800
but understanding the problems
that we're trying to solve,

34
00:02:29.300 --> 00:02:33.470
that there are complicated problems
that a lot of times the stakeholders

35
00:02:33.470 --> 00:02:36.250
they don't actually understand
fully what they're building or why.

36
00:02:37.910 --> 00:02:43.668
And so
now trying to build something that really,

37
00:02:43.668 --> 00:02:51.357
at the end of the day,
isn't really well defined and is changing.

38
00:02:51.357 --> 00:02:55.494
And so now we're taking this
complexity and adjusting over time.

39
00:02:55.494 --> 00:03:00.550
This is why Agile exists, different
things, is that it's very, very hard.

40
00:03:00.550 --> 00:03:04.964
And I think we can agree that if it was
easy, I think everybody would be doing it.

41
00:03:04.964 --> 00:03:09.273
As it is, I've been doing it for
easily 15 years, and

42
00:03:09.273 --> 00:03:11.941
I'm still learning all the time.

43
00:03:11.941 --> 00:03:14.330
Like it's something that I will pursue for
the rest of my life, and

44
00:03:14.330 --> 00:03:19.859
I love it.
&gt;&gt; Lukas Ruebbelke: I

45
00:03:19.859 --> 00:03:23.421
was talking to Victor Savkin and
we're talking about kind of immutability,

46
00:03:23.421 --> 00:03:26.690
functional program,
different things, he said, hey.

47
00:03:26.690 --> 00:03:31.930
You should go read this book Out of the
Tar Pit by Ben Moseley and Peter Marks.

48
00:03:31.930 --> 00:03:35.238
And you can Google it,
you get the PDF for free.

49
00:03:35.238 --> 00:03:39.070
And I would say definitely
read li e the first 20 pages.

50
00:03:39.070 --> 00:03:42.760
And towards the end,
it was hard for me to follow.

51
00:03:42.760 --> 00:03:44.760
It didn't really seem applicable.

52
00:03:44.760 --> 00:03:47.680
But they made this quote that I really,
really like.

53
00:03:47.680 --> 00:03:51.700
And that is the biggest
problem in development and

54
00:03:51.700 --> 00:03:55.870
maintenance of large-scale
software systems is complexity.

55
00:03:55.870 --> 00:03:57.390
Large systems are hard to understand.

56
00:04:00.280 --> 00:04:02.140
And so I totally agree with this.

57
00:04:02.140 --> 00:04:05.206
But it begs the question,
what is complexity?

58
00:04:05.206 --> 00:04:06.166
What does he mean or

59
00:04:06.166 --> 00:04:10.643
what do they mean here?
&gt;&gt; Lukas Ruebbelke: And I'm not gonna

60
00:04:10.643 --> 00:04:14.670
read this whole quote, but they basically
define it as kind of three things.

61
00:04:16.110 --> 00:04:20.974
Handling of state,
being the big one, and out of that,

62
00:04:20.974 --> 00:04:25.322
the code volume that comes
from handling state and

63
00:04:25.322 --> 00:04:31.138
the challenges of communicating
that state through your system.

64
00:04:31.138 --> 00:04:33.731
So flow of control,
like when something happens,

65
00:04:33.731 --> 00:04:37.470
how do you communicate that
to the rest of your system?

66
00:04:37.470 --> 00:04:41.416
So we can agree the biggest
problem with software,

67
00:04:41.416 --> 00:04:45.193
especially as it grows in size,
is complexity.

68
00:04:45.193 --> 00:04:49.081
And that consists of state,

69
00:04:49.081 --> 00:04:53.623
flow control, and code volume.

