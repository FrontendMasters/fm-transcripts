WEBVTT

1
00:00:00.190 --> 00:00:05.310
&gt;&gt; Lukas Ruebbelke: And we're going to
talk about how to test a component.

2
00:00:05.310 --> 00:00:11.940
So what we wanna do is I wanna focus on
here my goal for this module is to explain

3
00:00:11.940 --> 00:00:16.830
the angular testing utilities and
how it relates to a component test.

4
00:00:17.990 --> 00:00:25.120
Now compared to Angular 1,
this is just dreamland.

5
00:00:25.120 --> 00:00:29.860
It's so incredible, the utilities that
they've actually provided in terms of,

6
00:00:29.860 --> 00:00:34.110
in AngularJS, if you wanted to test a
directive, you had to do some weird string

7
00:00:34.110 --> 00:00:37.270
manipulation and then compile it and
do regex against it.

8
00:00:37.270 --> 00:00:37.960
It was just crazy.

9
00:00:37.960 --> 00:00:38.760
And so

10
00:00:38.760 --> 00:00:43.770
they've really done a very good job about
making it easy to write component tests.

11
00:00:45.350 --> 00:00:50.491
And so here is a basic component.
&gt;&gt; Lukas Ruebbelke: This

12
00:00:50.491 --> 00:00:57.020
actually looks exactly like
a component that I just generated.

13
00:00:57.020 --> 00:00:59.450
Except that I have a small
property up here, just title.

14
00:00:59.450 --> 00:01:05.834
So I just put this up here so that we
could have something to actually test.

15
00:01:05.834 --> 00:01:08.670
But [INAUDIBLE], I don't think it
gets much more basic than this,

16
00:01:08.670 --> 00:01:09.830
short of being totally empty.

17
00:01:09.830 --> 00:01:14.240
And so then here is a basic test.

18
00:01:14.240 --> 00:01:18.590
And so this is what is
generated with the angular CLI.

19
00:01:18.590 --> 00:01:23.600
And so now let's talk about
what is happening here.

20
00:01:23.600 --> 00:01:28.670
And so I'm gonna walk through this,
I'm going to explain the pieces and

21
00:01:28.670 --> 00:01:31.270
what they're doing, and
how we can use them to write tests.

22
00:01:32.990 --> 00:01:37.634
So when you're writing a component test,
&gt;&gt; Lukas Ruebbelke: The first

23
00:01:37.634 --> 00:01:40.864
thing you need to do is
configure the module.

24
00:01:40.864 --> 00:01:43.380
So anytime we create a component,
what do we do?

25
00:01:43.380 --> 00:01:47.000
We go and we add it to,
essentially, the app module.

26
00:01:47.000 --> 00:01:50.380
So when you are writing a test,

27
00:01:50.380 --> 00:01:55.940
essentially what you need to do is create
a module for that component to run in so

28
00:01:55.940 --> 00:01:58.929
that it can be tested.
&gt;&gt; Lukas Ruebbelke: Well,

29
00:01:58.929 --> 00:02:02.580
this is where the TestBed comes in.

30
00:02:02.580 --> 00:02:08.450
So Angular provides us with this
utility called the TestBed and

31
00:02:08.450 --> 00:02:14.220
what this allows us to do is
configure a testing module.

32
00:02:14.220 --> 00:02:20.080
So it works very much like a regular
module but it creates the context and

33
00:02:20.080 --> 00:02:24.080
the module for your component to run in.

34
00:02:25.580 --> 00:02:27.870
So in this case,

35
00:02:27.870 --> 00:02:32.710
we want to create a module that has
the gadget component attached to it.

36
00:02:34.240 --> 00:02:38.560
Just like our app module,
we just pass in an object.

37
00:02:38.560 --> 00:02:41.580
And we just say, here,
declarations, we're declaring this,

38
00:02:41.580 --> 00:02:43.240
make this available to our testing module.

39
00:02:44.320 --> 00:02:45.120
Pretty straightforward.

40
00:02:45.120 --> 00:02:48.080
It's always identical to
declaring an NGModule.

41
00:02:49.350 --> 00:02:50.836
So this is the most important thing.

42
00:02:50.836 --> 00:02:55.597
And we use
TestBed.configureTestingModule to define

43
00:02:55.597 --> 00:03:00.870
the module with a container that
our tests are going to run in.

44
00:03:01.880 --> 00:03:06.875
And from here, we need to configure the
testing module in the BeforeEach block so

45
00:03:06.875 --> 00:03:09.160
that it gets reset before each spec.

46
00:03:10.580 --> 00:03:12.654
So this and everything that you'll do,

47
00:03:12.654 --> 00:03:15.424
you'll see that this happens
in a BeforeEach block.

48
00:03:15.424 --> 00:03:20.170
So everytime you run new test,
this gets thrown down and put back up.

49
00:03:20.170 --> 00:03:22.510
Secondly, we're going to create a fixture.

50
00:03:22.510 --> 00:03:24.690
And I'll explain what
that is in just a moment.

51
00:03:25.770 --> 00:03:30.800
But if we look here,
we can kind of come to the conclusion

52
00:03:30.800 --> 00:03:36.340
that a fixture is something that
this component is going to live in.

53
00:03:36.340 --> 00:03:38.809
It's like we're providing
it some kind of context.

54
00:03:39.814 --> 00:03:45.320
Where we going to put it into a context
that's going to prove to be useful to us.

55
00:03:45.320 --> 00:03:48.100
What we're saying here is we're
defining the fixture up here.

56
00:03:48.100 --> 00:03:51.990
And we're saying,
this is a component fixture

57
00:03:51.990 --> 00:03:55.860
that has or
is rapping the gadget component.

58
00:03:57.300 --> 00:04:01.134
And then down here,
in this beforeEach block, we're saying,

59
00:04:01.134 --> 00:04:05.545
TestBed.createComponent and
we're passing in the gadget component.

60
00:04:05.545 --> 00:04:09.977
And so this is returning our
test fixture for us and so

61
00:04:09.977 --> 00:04:15.824
this essentially creates an instance
of the component under test and

62
00:04:15.824 --> 00:04:19.280
returns it as a component test fixture.

63
00:04:20.540 --> 00:04:25.580
But it also gives us some additional
utilities that we can use that come in

64
00:04:25.580 --> 00:04:26.820
quite handy.

65
00:04:26.820 --> 00:04:31.000
For instance,
we can get the component instance.

66
00:04:31.000 --> 00:04:36.897
So using the component fixture,
we can get the component itself

67
00:04:36.897 --> 00:04:42.710
using component instance but
we can also get access to a debug element.

68
00:04:42.710 --> 00:04:46.780
So this is essentially
the component's DOM element.

69
00:04:47.940 --> 00:04:53.530
So they're actually taking kind of,
under the hood,

70
00:04:53.530 --> 00:04:59.280
is our By.css providing this
representation of the template that

71
00:04:59.280 --> 00:05:05.370
you can query, for instance,
with a CSS selector.

72
00:05:05.370 --> 00:05:10.980
So using debug element query and
then the By utility,

73
00:05:10.980 --> 00:05:16.140
so using By.css, that allows us to
construct its query as you reach in and

74
00:05:16.140 --> 00:05:19.020
get some information about
our component template.

75
00:05:19.020 --> 00:05:23.217
It's super, super crazy that now,
traditionally,

76
00:05:23.217 --> 00:05:27.500
this had to be done in
an end-to-end context.

77
00:05:27.500 --> 00:05:30.560
But now we're able to
actually represent or

78
00:05:30.560 --> 00:05:35.460
have some representation of our
template and do stuff with it.

79
00:05:35.460 --> 00:05:38.000
So what we're seeing here is,

80
00:05:38.000 --> 00:05:40.655
one, I'm calling component.
&gt;&gt; Lukas Ruebbelke: =

81
00:05:40.655 --> 00:05:43.650
fixture.componentInstance.

82
00:05:43.650 --> 00:05:44.550
It's returning it.

83
00:05:44.550 --> 00:05:45.410
Yes?
&gt;&gt; Speaker 2: It

84
00:05:45.410 --> 00:05:47.320
is still in the context of the component,
right?

85
00:05:47.320 --> 00:05:49.049
So it is still not rendering anywhere

86
00:05:49.049 --> 00:05:49.965
in all of that?
&gt;&gt; Lukas Ruebbelke: No.

87
00:05:49.965 --> 00:05:51.430
&gt;&gt; Speaker 2: To get the DOM?

88
00:05:51.430 --> 00:05:55.900
It's just parsing the DOM of
that component, that HTML file.

89
00:05:55.900 --> 00:05:57.380
It is not actually?

90
00:05:57.380 --> 00:06:02.445
When you're referencing a DOM in a test,
you actually are looking at the browser

91
00:06:02.445 --> 00:06:04.853
and trying to interact with the DOM.
&gt;&gt; Lukas Ruebbelke: So

92
00:06:04.853 --> 00:06:07.269
it's not like in an end-to-end situation.
&gt;&gt; Speaker 2: Yeah.

93
00:06:07.269 --> 00:06:08.100
&gt;&gt; Lukas Ruebbelke: But I think it's

94
00:06:08.100 --> 00:06:12.252
probably rendering it in memory somewhere.
&gt;&gt; Speaker 2: [INAUDIBLE] rendering it or

95
00:06:12.252 --> 00:06:15.650
is it just parsing a tree and getting a?
&gt;&gt; Lukas Ruebbelke: Yeah, maybe, so

96
00:06:15.650 --> 00:06:17.500
that's something I would have
to look at but I don't know.

97
00:06:17.500 --> 00:06:18.610
&gt;&gt; Speaker 2: Okay.

98
00:06:18.610 --> 00:06:19.300
&gt;&gt; Lukas Ruebbelke: This is one of these

99
00:06:19.300 --> 00:06:20.659
things where like, look,

100
00:06:20.659 --> 00:06:25.000
I don't know how I metabolize
delicious tacos when I eat them.

101
00:06:25.000 --> 00:06:27.221
I just know that they're
delicious when I eat them,

102
00:06:27.221 --> 00:06:27.824
so.
&gt;&gt; Speaker 2: Yeah,

103
00:06:27.824 --> 00:06:31.615
because rendering would be difficult
unless you get the CSS at the top

104
00:06:31.615 --> 00:06:32.530
level.
&gt;&gt; Lukas Ruebbelke: Right, so

105
00:06:32.530 --> 00:06:37.170
I think it's just creating some kind of
representation, essentially like the tree,

106
00:06:37.170 --> 00:06:40.960
the structure that allows you to then go,
it doesn't have to render, for instance,

107
00:06:40.960 --> 00:06:44.576
you can do a CSS query just on the thing.
&gt;&gt; Speaker 2: Right.

108
00:06:44.576 --> 00:06:45.530
&gt;&gt; Lukas Ruebbelke: And do that.

109
00:06:45.530 --> 00:06:49.762
And so from here, we can now access
properties and methods on the component.

110
00:06:49.762 --> 00:06:54.030
So component.title,
we can write an assertion on that, so

111
00:06:54.030 --> 00:06:56.550
we expect this property to be this.

112
00:06:56.550 --> 00:06:57.750
Pretty simple, right?

113
00:06:58.780 --> 00:07:00.550
They're giving us the component.

114
00:07:00.550 --> 00:07:04.180
We don't have to set it up like it's there
we just need to write some assertions on

115
00:07:04.180 --> 00:07:07.970
it, pretty easy,
way easier than it used to be.

116
00:07:08.970 --> 00:07:14.107
Now, I mentioned debug element,
so pretty easy,

117
00:07:14.107 --> 00:07:19.850
so I've added this piece right up here,
debug element.

118
00:07:19.850 --> 00:07:24.720
So I've defined it and then down here,
you just call fisher.debug element.

119
00:07:25.830 --> 00:07:30.447
And then you can do something
like de.query(By.css('h1')).

120
00:07:30.447 --> 00:07:34.914
Now you've really got my brain spinning,

121
00:07:34.914 --> 00:07:42.120
because we're actually saying
h1.nativeElement.innerText.

122
00:07:42.120 --> 00:07:45.670
So you're querying it as
if it were actual DOM.

123
00:07:45.670 --> 00:07:48.730
It's probably not, there's probably
some representation in memory.

124
00:07:48.730 --> 00:07:51.320
And so I don't think it's
visually showing up anywhere but

125
00:07:51.320 --> 00:07:53.748
I think maybe they've found
a way to represent it in memory.

126
00:07:53.748 --> 00:07:58.720
So
expect(h1.nativeElement.innerText).toBe('-

127
00:07:58.720 --> 00:08:03.732
Hello Gadget').
&gt;&gt; Speaker 2: How are we doing works for

128
00:08:03.732 --> 00:08:06.441
the case when you have
a container component and

129
00:08:06.441 --> 00:08:09.709
then you have two presentation
components inside of it?

130
00:08:09.709 --> 00:08:11.761
So when you create a container component,

131
00:08:11.761 --> 00:08:15.181
do you have to specify that there
are these dependent component on it and

132
00:08:15.181 --> 00:08:18.145
you have to create those components for
it to be tested, so for

133
00:08:18.145 --> 00:08:21.990
example our items component?
&gt;&gt; Lukas Ruebbelke: So we are kind of

134
00:08:21.990 --> 00:08:26.980
jumping, if we're over here in
the spectrum of, this is the basic.

135
00:08:28.420 --> 00:08:32.990
So we can go really far over here or kinda
that question is kinda somewhere here.

136
00:08:32.990 --> 00:08:36.260
But in one of the tests,

137
00:08:36.260 --> 00:08:41.158
you can actually override the template.
&gt;&gt; Lukas Ruebbelke: So for

138
00:08:41.158 --> 00:08:46.000
instance, I could say,
I want to render the widget template.

139
00:08:46.000 --> 00:08:50.780
But because I'm not interested in testing
the presentational components in it,

140
00:08:50.780 --> 00:08:56.910
I'm going to actually replace the real
template with this modified version.

141
00:08:58.330 --> 00:09:00.700
And so
you can actually override the template.

142
00:09:00.700 --> 00:09:05.200
Hit test time,
it's pretty powerful what you can do.

143
00:09:05.200 --> 00:09:08.060
But you can also render it
like a host component and

144
00:09:08.060 --> 00:09:09.150
test that your bindings work.

145
00:09:10.150 --> 00:09:11.340
There's a lot of things and

146
00:09:11.340 --> 00:09:14.170
we could probably spend an entire two
days talking about how to do this.

147
00:09:14.170 --> 00:09:17.950
But you can test your child components and
test the bindings, and

148
00:09:17.950 --> 00:09:21.318
that it actually renders properly and
fires into the parent component.

149
00:09:21.318 --> 00:09:29.635
So,
&gt;&gt; Lukas Ruebbelke: Now Angular,

150
00:09:29.635 --> 00:09:34.666
this is an important distinction
to make or to call out is

151
00:09:34.666 --> 00:09:41.100
that Angular is not manually handling
change detection out of the box.

152
00:09:42.740 --> 00:09:46.940
Because what they want to do
is allow you to make a change.

153
00:09:46.940 --> 00:09:51.544
And if you need to make an assertion,
make that assertion,

154
00:09:51.544 --> 00:09:55.230
trigger change detection,
and then test it.

155
00:09:55.230 --> 00:09:57.567
So they're giving you this opportunity
to kind of insert yourself before

156
00:09:57.567 --> 00:09:59.090
change detection.

157
00:09:59.090 --> 00:10:01.100
You can turn it on by default.

158
00:10:01.100 --> 00:10:01.910
I recommend not.

159
00:10:03.340 --> 00:10:09.070
Cuz you can simply force change
detections by calling detectChanges.

160
00:10:09.070 --> 00:10:11.220
And so this gives us, again,

161
00:10:11.220 --> 00:10:16.905
greater control of how we inspect
our components pre and post binding.

162
00:10:16.905 --> 00:10:20.690
And so a lot of times what I'll
do is write in the beforeEach.

163
00:10:20.690 --> 00:10:21.410
I'll just call it.

164
00:10:21.410 --> 00:10:22.850
So actually the generator,
that's what they do.

165
00:10:22.850 --> 00:10:27.170
They just call the tech changes one
time to trigger the bindings and

166
00:10:27.170 --> 00:10:28.280
make sure that everything renders.

167
00:10:30.030 --> 00:10:31.990
But what you'll need to do is, for

168
00:10:31.990 --> 00:10:36.589
instance, if I went component.title
equals Hello developers.

169
00:10:38.280 --> 00:10:42.950
And I left this line out here.

170
00:10:42.950 --> 00:10:45.180
So I did not call this.

171
00:10:45.180 --> 00:10:49.450
Well, change detection has
not run on my template.

172
00:10:49.450 --> 00:10:53.400
And so it's still going to be,
hello widgets or gadgets or whatever.

173
00:10:54.440 --> 00:10:59.380
So in order for me to force the template
to render I have to call detect changes,

174
00:11:01.160 --> 00:11:02.390
so that's why that is happening.

