WEBVTT

1
00:00:00.636 --> 00:00:02.989
&gt;&gt; Lukas Ruebbelke: So what I am gonna
do is I am gonna talk about testing

2
00:00:02.989 --> 00:00:05.185
in Angular, a couple different strategies.

3
00:00:05.185 --> 00:00:08.850
And then I am gonna show you
how to write a component test.

4
00:00:08.850 --> 00:00:11.987
I'll briefly touch on an end-to-end test.

5
00:00:11.987 --> 00:00:15.491
But I think that will give you
the kind of the ground work,

6
00:00:15.491 --> 00:00:19.440
kind of the entry level for
how to write Angular test and do that.

7
00:00:22.210 --> 00:00:28.520
So generally, when I talk to people
about testing, especially kind of

8
00:00:28.520 --> 00:00:33.356
seasoned developers who have been around,
unless they're exceptionally disciplined,

9
00:00:33.356 --> 00:00:38.770
most people kind of have
this reaction of just like,

10
00:00:38.770 --> 00:00:42.230
I should do it, I don't write enough test.

11
00:00:42.230 --> 00:00:47.090
Even myself, I would admit, everybody
say like, I could write more test.

12
00:00:47.090 --> 00:00:48.920
And the reason, so well,
why don't you don't?

13
00:00:48.920 --> 00:00:51.728
Well, it's hard.

14
00:00:51.728 --> 00:00:57.240
It's kind of the genera,l I think,
implied consensus is that testing is hard.

15
00:00:58.720 --> 00:01:02.830
Well for one,
that's because writing software is hard.

16
00:01:02.830 --> 00:01:05.770
Again, we've talked about this,
this is not a trivial activity.

17
00:01:08.150 --> 00:01:15.610
But I found that, especially in Angular,
as you start to write test,

18
00:01:15.610 --> 00:01:18.790
you realize you're doing a lot of
the same things over and over.

19
00:01:20.850 --> 00:01:23.840
And as a result, I realized that

20
00:01:23.840 --> 00:01:28.630
once I kind of understood some of these
basic patterns, aka the secret handshake,

21
00:01:28.630 --> 00:01:33.740
it was a lot easier for me to just
get up in running and write the test.

22
00:01:33.740 --> 00:01:39.412
And so the problem is, and it's,
I think, a challenge with unit testing,

23
00:01:39.412 --> 00:01:44.732
it's a huge challenge,
with end-to-end testing, is that you spend

24
00:01:44.732 --> 00:01:50.900
more time setting up the environment and
kind of try to bring it to life.

25
00:01:50.900 --> 00:01:55.670
All of a sudden you get this Franken test
runner that tips over every other time.

26
00:01:55.670 --> 00:01:58.070
Selenium, I'm looking at you.

27
00:01:58.070 --> 00:02:04.440
That it's just so hard that is not
natural to be in a development work flow.

28
00:02:04.440 --> 00:02:07.410
And so people forget it,
and it goes stale.

29
00:02:07.410 --> 00:02:11.450
But once you can kind of streamline
some of those pinpoints,

30
00:02:11.450 --> 00:02:16.150
that you can focus on kind of these basic
patterns, and really, truly be effective.

31
00:02:17.436 --> 00:02:22.480
So here are some things
that I have found that, for

32
00:02:22.480 --> 00:02:25.030
me, make it much, much easier to test.

33
00:02:26.300 --> 00:02:29.770
I will say this, if you wanna
write good test, write good code.

34
00:02:31.440 --> 00:02:34.480
When you think,
if you approach from a test-first mindset,

35
00:02:35.900 --> 00:02:40.600
that you will write good test
because you're writing good code.

36
00:02:40.600 --> 00:02:46.180
There's nothing worse than coming into
a project with like a 1,200 line method,

37
00:02:46.180 --> 00:02:48.740
I've gotta test this.

38
00:02:48.740 --> 00:02:53.796
Well, the person who wrote this clearly
did not have the same concept of

39
00:02:53.796 --> 00:02:59.510
what a software craftsmanship or
software craftsman should look like.

40
00:02:59.510 --> 00:03:04.560
So first and foremost,
small methods are easier to test.

41
00:03:05.740 --> 00:03:13.280
The smaller they are, the more precise in
what they do, the easier it is to test.

42
00:03:13.280 --> 00:03:17.182
Because when you ask yourself,
what does this method do?

43
00:03:17.182 --> 00:03:21.742
And if you come back and it says, it
takes this thing and it does this thing.

44
00:03:21.742 --> 00:03:28.340
That's really to, in just articulating it,
you can say, it does this thing.

45
00:03:28.340 --> 00:03:30.450
Well, then it's easy
to write an assertion.

46
00:03:30.450 --> 00:03:32.900
And a lot of times I will
actually talk out loud or

47
00:03:32.900 --> 00:03:36.510
verbalize, okay, I'm testing this method,
what should it do?

48
00:03:36.510 --> 00:03:38.630
Well, I should call this and
this should happen.

49
00:03:40.390 --> 00:03:42.400
But when you find yourselves saying,
what does this method do?

50
00:03:42.400 --> 00:03:45.560
Well, it takes this and it does this,
and then based on this it does this.

51
00:03:46.760 --> 00:03:50.480
Stop, that's a recipe, like you
start to go down this path of like,

52
00:03:50.480 --> 00:03:53.040
my method is doing too much because
you have a test that takes this, and

53
00:03:53.040 --> 00:03:56.120
it does this, and
then based on this it does something else.

54
00:03:57.120 --> 00:04:00.071
So now you're having to write multiple
tests for a single piece of code.

55
00:04:03.084 --> 00:04:05.230
&gt;&gt; Lukas Ruebbelke: Pure
methods are easier to test.

56
00:04:05.230 --> 00:04:06.810
We talked about this, so

57
00:04:06.810 --> 00:04:11.890
having methods that are free from
internal states and side effects.

58
00:04:11.890 --> 00:04:16.040
So this is basically called referential
transparency, meaning you can

59
00:04:16.040 --> 00:04:19.830
call a method, and every single time,
if you pass in the same parameters,

60
00:04:19.830 --> 00:04:22.710
you're going to get the same
result every single time.

61
00:04:22.710 --> 00:04:27.260
Those are pure, and these are ultimately
what you should strive for.

62
00:04:27.260 --> 00:04:30.050
The more of these you have,
the easier it is to test.

63
00:04:30.050 --> 00:04:34.050
So for instance, with Redux,
everything happens in a reducer.

64
00:04:34.050 --> 00:04:39.390
Well, every one of those methods
are pure and immutable in nature.

65
00:04:39.390 --> 00:04:43.800
And so it's insanely easy to test
a reducer because you just know,

66
00:04:43.800 --> 00:04:45.440
I'm putting this in, and
I'm getting this out.

67
00:04:45.440 --> 00:04:48.480
It has that clear contract of inputs and
outputs.

68
00:04:48.480 --> 00:04:50.620
Also, just to clarify, at the break,

69
00:04:50.620 --> 00:04:53.970
the question's like well,
when you say Redux, what do you mean?

70
00:04:53.970 --> 00:04:58.370
Because I often times use Redux and
NgRx interchangeably.

71
00:04:58.370 --> 00:05:02.820
So there is Redux,
the library that works with React,

72
00:05:02.820 --> 00:05:06.870
and so I refer to that to uppercase R,
Redux.

73
00:05:06.870 --> 00:05:09.090
But not only is it a library,
but it is a pattern.

74
00:05:10.120 --> 00:05:12.840
And so when I talk about Redux
in the context of this workshop,

75
00:05:12.840 --> 00:05:15.260
I'm talking about the pattern.

76
00:05:15.260 --> 00:05:18.400
So Redux, the pattern,
is what NgRx is based off of, so

77
00:05:18.400 --> 00:05:20.290
that is what I'm referring to here.

78
00:05:20.290 --> 00:05:22.691
So hopefully that clears up
a little bit of the confusion,

79
00:05:22.691 --> 00:05:26.090
it's slightly overloaded,
Redux the library, Redux the pattern.

80
00:05:26.090 --> 00:05:28.252
So pure methods are easier to test.

81
00:05:30.852 --> 00:05:35.774
&gt;&gt; Lukas Ruebbelke: And don't use real
services, so one of the big things that

82
00:05:35.774 --> 00:05:42.410
I've seen is you have a service that's
actually making the server side call.

83
00:05:43.930 --> 00:05:45.530
And you're testing
a component that does that.

84
00:05:46.600 --> 00:05:50.190
Well, this is where dependency
injection comes in in a big way.

85
00:05:51.730 --> 00:05:56.890
Instead of using the real service,
use a test double, so

86
00:05:56.890 --> 00:06:03.170
when you inject something into
a component, just send in

87
00:06:03.170 --> 00:06:08.970
a test double, something to stand
in place of that real service.

88
00:06:08.970 --> 00:06:13.943
In a lot cases, depending on the nature
of my component, is I will simply pass in

89
00:06:13.943 --> 00:06:18.488
an empty class and that will suffice,
I've satisfied the dependency.

90
00:06:18.488 --> 00:06:22.436
Or if it does some kind of a call,
I'm explicitly calling on the service,

91
00:06:22.436 --> 00:06:23.850
then I just mock that out.

92
00:06:24.880 --> 00:06:30.126
But the point is focus on the thing
you're testing and isolate it.

93
00:06:30.126 --> 00:06:34.546
And so any dependencies, use test doubles,
so don't use real services or

94
00:06:34.546 --> 00:06:35.540
dependencies.

95
00:06:37.590 --> 00:06:42.979
So you can use a stub,
this is just a small generic

96
00:06:42.979 --> 00:06:49.828
object that you can put in in its place,
you can also you a spy.

97
00:06:49.828 --> 00:06:55.795
So occasionally,
I will inject the service,

98
00:06:55.795 --> 00:07:01.150
but I'll actually intercept the call and

99
00:07:01.150 --> 00:07:06.490
overwrite it with my own response.

100
00:07:06.490 --> 00:07:09.670
Even what I'll do is if I'm testing
a component that has a service that

101
00:07:09.670 --> 00:07:14.510
makes a call,
is I'll just spy on the service call.

102
00:07:16.200 --> 00:07:21.710
And so what that means is when this
method happens on the component,

103
00:07:21.710 --> 00:07:26.360
it calls this method on
the service with this parameter.

104
00:07:26.360 --> 00:07:30.471
So what I can do is I can say, okay,
I'm gonna spy on this service method and

105
00:07:30.471 --> 00:07:33.670
assert that it was indeed
called with this value.

106
00:07:33.670 --> 00:07:35.842
So I'm not testing the service, but

107
00:07:35.842 --> 00:07:39.078
I'm spying on what we're
calling that service with.

108
00:07:41.735 --> 00:07:46.170
&gt;&gt; Lukas Ruebbelke: And so faking and
spying, they're both great options.

109
00:07:47.240 --> 00:07:51.610
In fact, start with what is easiest.

110
00:07:51.610 --> 00:07:54.510
So generally, for me, the first thing I
do is I'll start with a stub or a mock.

111
00:07:55.670 --> 00:07:56.930
I'll just say, this is this thing,

112
00:07:56.930 --> 00:08:02.080
I'm gonna just create an empty object, and
I will start to build it out as I need to.

113
00:08:05.790 --> 00:08:09.570
In fact, they're both great options,
and usually use both.

114
00:08:10.910 --> 00:08:17.790
So a lot of times I will do a mock, and
then I will then spy on the methods.

115
00:08:17.790 --> 00:08:19.134
So I'll even mock out the method, but

116
00:08:19.134 --> 00:08:21.112
then I'll spy on it to make
sure that it's been called.

117
00:08:23.427 --> 00:08:29.300
&gt;&gt; Lukas Ruebbelke: So in Angular,
here is kind of the basic structure.

118
00:08:29.300 --> 00:08:31.460
So we've been talking about this,
this is the third day now, so

119
00:08:31.460 --> 00:08:33.990
you have basically a class
that's wrapped in some metadata.

120
00:08:33.990 --> 00:08:38.119
So Angular is kinda this
candy coated shell, and

121
00:08:38.119 --> 00:08:44.778
then inside you have this milk chocolate
imitation, if we're being honest.

122
00:08:44.778 --> 00:08:48.370
I don't even think they can
call it milk chocolate anymore.

123
00:08:48.370 --> 00:08:51.090
So we have two approaches based on this.

124
00:08:51.090 --> 00:08:54.240
We can use the Angular
testing utilities and

125
00:08:54.240 --> 00:08:56.410
test it in the context of
an Angular application.

126
00:08:57.750 --> 00:09:02.370
Or we can just say, we're gonna
bypass this angular wrapper, and

127
00:09:02.370 --> 00:09:05.320
we're going to test the class
itself in isolation.

128
00:09:06.820 --> 00:09:12.040
Also valid for services, and pipes, and
different things that are just classes,

129
00:09:12.040 --> 00:09:14.380
oftentimes this is
the easiest thing to do.

130
00:09:14.380 --> 00:09:18.965
So generally, what I'll do is I will
do components using the Angular

131
00:09:18.965 --> 00:09:22.760
testing utilities, but
then services, and pipes, and

132
00:09:22.760 --> 00:09:26.734
different things,
is I'll just test those in isolation.

133
00:09:30.378 --> 00:09:34.986
&gt;&gt; Lukas Ruebbelke: And so kind of the
testing big picture is our test runner is

134
00:09:34.986 --> 00:09:39.020
Karma, which shifts with angular CLI.

135
00:09:39.020 --> 00:09:44.900
And we use Jasmine as our assertion
library, which shifts with the CLI.

136
00:09:44.900 --> 00:09:47.920
And then we have out testing utilities,
which shifts with the CLI.

137
00:09:49.460 --> 00:09:53.310
And then we have our code,
if only that shifted with the CLI,

138
00:09:53.310 --> 00:09:54.850
my life would be so easy.

139
00:09:54.850 --> 00:09:57.165
Like your recipe thing
would be done by now,

140
00:09:57.165 --> 00:09:59.870
if we could just feed it the mock and-
&gt;&gt; Speaker 2: Next week.

141
00:09:59.870 --> 00:10:01.790
&gt;&gt; Lukas Ruebbelke: Yeah, next week,
I'll talk to Mike about that.

