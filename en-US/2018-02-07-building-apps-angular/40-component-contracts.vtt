WEBVTT

1
00:00:00.220 --> 00:00:02.060
&gt;&gt; Lucas Ruebbelke: Our favorite graphic,
with arrows.

2
00:00:02.060 --> 00:00:05.999
So we've seen this, template,

3
00:00:05.999 --> 00:00:11.209
metadata, class, events, properties.

4
00:00:15.501 --> 00:00:21.010
&gt;&gt; Lucas Ruebbelke: Now I want you to
think for a second, what'd it mean

5
00:00:22.600 --> 00:00:28.520
if we could take our properties and
our events and make them totally custom.

6
00:00:30.280 --> 00:00:33.700
For instance right now we've been binding
to the click event and the submit event.

7
00:00:34.940 --> 00:00:37.470
So remember you combine
to really any dom event.

8
00:00:39.400 --> 00:00:43.340
But what if you wanted
a specific event to your domain.

9
00:00:45.353 --> 00:00:47.000
&gt;&gt; Lucas Ruebbelke: What
would that look like?

10
00:00:47.000 --> 00:00:51.360
Well, exactly like in the other event or
property binding.

11
00:00:52.990 --> 00:00:58.020
And how we accomplish that
is with inputs and outputs.

12
00:00:58.020 --> 00:01:01.160
So when you're doing property binding,
what are we doing?

13
00:01:01.160 --> 00:01:06.430
We're saying, I have this value that
I want to pass to this element.

14
00:01:06.430 --> 00:01:09.040
You're passing it in, AKA, an input.

15
00:01:09.040 --> 00:01:11.980
So I mean, I think you would, the mental
mouth of the direction makes sense.

16
00:01:11.980 --> 00:01:16.310
And when something happens on
an element that you wanna capture,

17
00:01:16.310 --> 00:01:17.500
like a click, same thing.

18
00:01:17.500 --> 00:01:20.630
It's, like,
I have this thing that I want to surface.

19
00:01:20.630 --> 00:01:24.700
Out of this component and put in to the
parent component, so it's an outputter.

20
00:01:26.320 --> 00:01:28.460
And so
now have this kind of unidirectional

21
00:01:30.530 --> 00:01:34.430
data flow between a parent component and
a child component.

22
00:01:34.430 --> 00:01:36.620
And so we'll talk about kind of how
they sit together in just a moment.

23
00:01:39.920 --> 00:01:43.740
&gt;&gt; Lucas Ruebbelke: So
we've seen that we can put components into

24
00:01:43.740 --> 00:01:46.560
an application via routes.

25
00:01:46.560 --> 00:01:51.080
But for the most part, most components
will end up in your application.

26
00:01:51.080 --> 00:01:55.299
Because basically you've put
a selector into a parent template.

27
00:01:56.460 --> 00:01:59.740
So if you have, for instance items list.

28
00:02:00.780 --> 00:02:02.990
Well, we want that to go
into the items component.

29
00:02:02.990 --> 00:02:04.540
How do we get that in there.

30
00:02:04.540 --> 00:02:06.930
We take swiper,
we put it into the template.

31
00:02:06.930 --> 00:02:13.450
So, the surface area between a child and
a parent is at the template.

32
00:02:13.450 --> 00:02:15.230
Does that make sense?

33
00:02:15.230 --> 00:02:16.400
So when we want to instantiate, so

34
00:02:16.400 --> 00:02:18.700
we've been doing this since
we created our components.

35
00:02:18.700 --> 00:02:20.760
What do we do?
We just take the selector and

36
00:02:20.760 --> 00:02:24.680
drop it into either the home component has
kind of been the one we've been targeting.

37
00:02:24.680 --> 00:02:27.740
But that's where they live,
that's the surface area.

38
00:02:27.740 --> 00:02:32.509
So from the parent side, nothing changes.

39
00:02:33.930 --> 00:02:36.880
In terms of communicating to a child.

40
00:02:36.880 --> 00:02:40.270
They simply are passing in properties,
pulling out events.

41
00:02:41.520 --> 00:02:45.740
Just like, if you're pulling in
native properties, native dom events.

42
00:02:47.620 --> 00:02:52.900
But on the child component, what is

43
00:02:52.900 --> 00:02:58.050
a property binding from the parent to the
child, internally is defined as an input.

44
00:02:59.790 --> 00:03:04.730
Now from the parent,
what is considered an event

45
00:03:04.730 --> 00:03:08.580
is defined as an output on the child.

46
00:03:08.580 --> 00:03:11.420
So a child component over
the any component but,

47
00:03:11.420 --> 00:03:13.420
in this case the child component.

48
00:03:13.420 --> 00:03:17.690
Defines what comes in and what goes out.

49
00:03:17.690 --> 00:03:22.050
And so, what are we doing here?

50
00:03:22.050 --> 00:03:26.070
We are creating essentially
a component contract.

51
00:03:26.070 --> 00:03:32.100
A component contract, from a high level,
it's an agreement between a developer and

52
00:03:32.100 --> 00:03:34.610
a user that this is how
this is going to work.

53
00:03:35.780 --> 00:03:38.520
Well, inputs and
outputs define that contract.

54
00:03:38.520 --> 00:03:42.600
It is essentially the API
of that component.

55
00:03:42.600 --> 00:03:45.810
And so that essentially acts as a contract

56
00:03:45.810 --> 00:03:49.390
to any component that
is going to consume it.

57
00:03:49.390 --> 00:03:51.870
Now, it also acts as a visual aid.

58
00:03:51.870 --> 00:03:55.740
So that we can infer what
a component does just by looking at

59
00:03:55.740 --> 00:03:56.630
it's inputs and outputs.

60
00:03:56.630 --> 00:04:00.654
So think of input and
output as the component API.

61
00:04:00.654 --> 00:04:05.790
So app items list, I can look at this.

62
00:04:06.880 --> 00:04:11.320
And because I know what property by are,
and I understand the direction of them.

63
00:04:11.320 --> 00:04:15.910
I can say well, this list takes

64
00:04:15.910 --> 00:04:20.270
an input of items, and
it has an output of selected and deleted.

65
00:04:21.780 --> 00:04:23.700
These are the properties that it wants,
and

66
00:04:23.700 --> 00:04:26.900
these are the events it's going
to emit when something happens.

67
00:04:26.900 --> 00:04:31.300
And so very clearly I can,
one input, two outputs.

