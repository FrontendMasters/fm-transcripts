WEBVTT

1
00:00:00.362 --> 00:00:03.523
&gt;&gt; Lukas Ruebbelke: So let me show
you how this looks in the code.

2
00:00:03.523 --> 00:00:04.742
So we'll just walk through.

3
00:00:04.742 --> 00:00:08.237
I'll give you kind of a tour
of what this looks like and

4
00:00:08.237 --> 00:00:11.895
then we'll break for lunch and
get into our challenge.

5
00:00:14.711 --> 00:00:21.681
&gt;&gt; Lukas Ruebbelke: So using the items
component as our reference point.

6
00:00:21.681 --> 00:00:24.176
Because this actually has
everything that I've talked about.

7
00:00:28.330 --> 00:00:30.940
&gt;&gt; Lukas Ruebbelke: Let's look at
first and foremost, the template.

8
00:00:33.200 --> 00:00:35.713
So there's very little
layout happening here.

9
00:00:39.501 --> 00:00:44.188
&gt;&gt; Lukas Ruebbelke: The only layout that
is happening, really, is to put child

10
00:00:44.188 --> 00:00:49.735
components on the stage and
kind of just arrange them appropriately.

11
00:00:49.735 --> 00:00:51.566
So you have the container and

12
00:00:51.566 --> 00:00:56.231
obviously I'm using the flexbox to
kind of split them into two columns.

13
00:00:56.231 --> 00:01:02.811
Now if we look at this, we have an items
list that has an input of items.

14
00:01:02.811 --> 00:01:09.810
And we know that this item can omit
two events selected and deleted.

15
00:01:09.810 --> 00:01:12.140
Well that makes sense,
you can select the event or

16
00:01:12.140 --> 00:01:14.220
select an item but you can also delete it.

17
00:01:16.250 --> 00:01:22.040
So now, when we select an item,
what do you think happens?

18
00:01:22.040 --> 00:01:25.000
Is it set to two, current item.

19
00:01:25.000 --> 00:01:28.430
And so now,
this is how that problem is solved.

20
00:01:28.430 --> 00:01:29.190
It's on the list.

21
00:01:29.190 --> 00:01:30.910
It's saying this was just selected.

22
00:01:32.330 --> 00:01:33.310
The list doesn't care.

23
00:01:33.310 --> 00:01:34.380
It just says hey, parent.

24
00:01:34.380 --> 00:01:36.540
Like this just what happened.

25
00:01:36.540 --> 00:01:42.960
Then, it sets current item and
because it's now bound to the item detail.

26
00:01:44.080 --> 00:01:45.380
It's automatically going to update.

27
00:01:47.090 --> 00:01:49.260
And so, we know also that you can save or
cancel.

28
00:01:49.260 --> 00:01:54.540
So we know on the detail component,
you can save it, whatever's in there,

29
00:01:54.540 --> 00:01:55.890
or we can cancel it, we don't wanna do it.

30
00:01:55.890 --> 00:01:57.490
We don't need to do anything.

31
00:01:57.490 --> 00:02:02.088
So let's look at-
&gt;&gt; Lukas Ruebbelke: The item

32
00:02:02.088 --> 00:02:03.819
list component.

33
00:02:05.710 --> 00:02:08.112
So right here.

34
00:02:08.112 --> 00:02:10.602
No moving parts.

35
00:02:10.602 --> 00:02:14.851
It takes an input of an items array.

36
00:02:14.851 --> 00:02:17.062
I do have a property of read only.

37
00:02:17.062 --> 00:02:20.659
The reason being is if it's on the
homepage I just want to read I don't want

38
00:02:20.659 --> 00:02:24.710
the ability for someone actually
delete it from the homepage.

39
00:02:24.710 --> 00:02:28.150
And so,
you can see here within the template

40
00:02:30.060 --> 00:02:33.810
this is, pretty much the rules
of basic binding work.

41
00:02:33.810 --> 00:02:36.980
I'm just saying if it's not read
only go ahead and show this button.

42
00:02:36.980 --> 00:02:40.630
If not, go ahead and hide it.

43
00:02:40.630 --> 00:02:43.400
So if reads only hide it,
if it's not show it.

44
00:02:43.400 --> 00:02:47.150
But we're letting the parent
define the context.

45
00:02:48.730 --> 00:02:53.420
And so if we go back to the items of this
component, we're defaulting it to false,

46
00:02:53.420 --> 00:02:55.130
cause by default we wanna show it.

47
00:02:55.130 --> 00:02:59.480
But you can override that and say well no,
we actually don't wanna show it,

48
00:02:59.480 --> 00:03:01.370
we want it to be read
only in this context.

49
00:03:01.370 --> 00:03:06.960
So if we go to Home Component what
do you think we're going to see?

50
00:03:06.960 --> 00:03:11.010
Well, before I get there,
let's keep sharp here.

51
00:03:12.160 --> 00:03:13.280
We have an input of items.

52
00:03:15.800 --> 00:03:17.030
And read only.

53
00:03:18.360 --> 00:03:22.480
It also has an output of selected and
deleted, so you can select an item or

54
00:03:22.480 --> 00:03:25.330
you can delete an item
from the collection.

55
00:03:25.330 --> 00:03:32.107
Now if we jump over to the home component,
&gt;&gt; Lukas Ruebbelke: What

56
00:03:32.107 --> 00:03:33.010
do we have going on here?

57
00:03:34.204 --> 00:03:38.080
Outside of list, and
we're only using the two inputs.

58
00:03:38.080 --> 00:03:41.360
We're saying, take these items,
go ahead and render them.

59
00:03:42.470 --> 00:03:43.780
And we're setting this to read only.

60
00:03:43.780 --> 00:03:45.920
So in this context,
we're letting the parent say,

61
00:03:47.040 --> 00:03:50.090
we want to display the item list but
we want it to be read only.

62
00:03:50.090 --> 00:03:58.190
And then from here,
it says great, I have items, and

63
00:03:58.190 --> 00:04:03.550
from here then in the template it just
treats it any other property or method.

64
00:04:05.150 --> 00:04:09.840
Now the difference is with outputs,

65
00:04:09.840 --> 00:04:14.100
instead of calling the method,
you do the output.emit.

66
00:04:14.100 --> 00:04:16.436
so you actually have to emit the event.

67
00:04:16.436 --> 00:04:20.332
So there's kinda that one thing
you're dealing with event emitter.

68
00:04:20.332 --> 00:04:25.316
So when selected, or this button gets
clicked it's called selected.omit or

69
00:04:25.316 --> 00:04:29.100
deleted.omit or
passing up the item that we are deleting.

70
00:04:33.090 --> 00:04:39.990
But when I look at this, right here,
I think this is absolutely incredible.

71
00:04:41.220 --> 00:04:48.640
We have a fully functional,
non-trivial, component on the page.

72
00:04:49.790 --> 00:04:54.330
It is actually not doing anything other
than rendering whatever you pass into it,

73
00:04:55.360 --> 00:04:59.320
and taking whatever user reaction
happens to it, and kicking it back out.

74
00:05:00.630 --> 00:05:02.565
This is a very, very stable component.

75
00:05:05.302 --> 00:05:09.950
&gt;&gt; Lukas Ruebbelke: Now for reference,
let's also look at item detail.

76
00:05:12.302 --> 00:05:15.981
&gt;&gt; Lukas Ruebbelke: So in item detail,
we've obviously seen this a bit from using

77
00:05:15.981 --> 00:05:18.973
it as a reference point for
the widget component.

78
00:05:21.913 --> 00:05:27.101
&gt;&gt; Lukas Ruebbelke: The difference is,
if we go into here, we have two outputs.

79
00:05:29.193 --> 00:05:30.760
&gt;&gt; Lukas Ruebbelke: Saved and cancelled.

80
00:05:30.760 --> 00:05:36.630
And we have one input of item.

81
00:05:36.630 --> 00:05:39.280
So before I get into what's
actually happening here,

82
00:05:39.280 --> 00:05:41.840
let's go back to our mark up.

83
00:05:43.490 --> 00:05:45.270
So it has one input of item.

84
00:05:47.120 --> 00:05:49.570
And it has a saved and a cancelled output.

85
00:05:50.740 --> 00:05:57.530
Now the question is, why pray tell,
am I doing this right here?

86
00:05:59.290 --> 00:06:03.750
The reason being is, well,
there's a famous quote.

87
00:06:03.750 --> 00:06:04.990
Not a famous quote, but

88
00:06:04.990 --> 00:06:10.350
there's this guy Venkat Subramaniam who
has written a couple books on Groovy and

89
00:06:10.350 --> 00:06:15.500
he's just a pretty famous Groovy/Java
programmer, really dynamic personality.

90
00:06:15.500 --> 00:06:19.000
And, it went over my head at the time,
but.

91
00:06:19.000 --> 00:06:20.111
He was giving a talk in Phoenix.

92
00:06:20.111 --> 00:06:25.759
And he said,
shared state is not a bad thing.

93
00:06:25.759 --> 00:06:30.090
Mutable state is not a bad thing.

94
00:06:30.090 --> 00:06:32.690
Share mutable state is the devil.

95
00:06:34.950 --> 00:06:39.740
In other words, when you have state
that is shared between multiple

96
00:06:39.740 --> 00:06:44.740
components in any component
can mutate that state.

97
00:06:46.440 --> 00:06:51.280
You have now put every other component
that depends on that state at risk.

98
00:06:51.280 --> 00:06:55.150
And I'll talk a little bit more
about that probably tomorrow.

99
00:06:55.150 --> 00:06:59.940
The point is, shared mutable
state is a really good way for

100
00:06:59.940 --> 00:07:02.060
things to go horribly
wrong in your application.

101
00:07:03.640 --> 00:07:04.800
So what do you do about forms?

102
00:07:06.190 --> 00:07:10.130
Obviously, at some point,
somebody has to change state.

103
00:07:10.130 --> 00:07:11.620
You have to accept user input.

104
00:07:11.620 --> 00:07:14.880
And so this is something I really
struggled with for a long time.

105
00:07:16.350 --> 00:07:22.502
And the simple answer is that you
allow for the mutation to happen.

106
00:07:22.502 --> 00:07:25.901
By isolating the mutation.

107
00:07:25.901 --> 00:07:29.270
So you basically make it no longer shared.

108
00:07:29.270 --> 00:07:31.220
You simply say here's
the state you're taking.

109
00:07:33.300 --> 00:07:37.360
It's potentially shared, lets go ahead and
create a perimeter around it and

110
00:07:37.360 --> 00:07:43.050
isolate the state mutation until we're
ready to save it, back up and persist it.

111
00:07:43.050 --> 00:07:50.660
So what I'm doing here is I've created an
input but using ES 6 I've done a setter.

112
00:07:50.660 --> 00:07:55.060
So instead of doing it straight like
this equals this every time I set item

113
00:07:55.060 --> 00:07:57.310
this method gets called.

114
00:07:57.310 --> 00:08:03.020
And from here I'm creating a local
copy called by using Object.assign,

115
00:08:03.020 --> 00:08:07.390
so this is a handy way to
create a copy of an object.

116
00:08:07.390 --> 00:08:11.090
So anytime we send an item,
I am saying great.

117
00:08:11.090 --> 00:08:13.130
I have an item.

118
00:08:13.130 --> 00:08:17.240
Go ahead and create a copy of it and
send it as selecteditem.

119
00:08:18.860 --> 00:08:23.142
Now, what I'm also doing here is I'm
creating a reference to the originalName.

120
00:08:23.142 --> 00:08:27.426
The reason being is,

121
00:08:27.426 --> 00:08:34.812
you'll see here when I select this.

122
00:08:34.812 --> 00:08:38.201
If I was not binding to a reference
to the original name here,

123
00:08:38.201 --> 00:08:42.310
the minute I started typing over
this would start updating as well.

124
00:08:42.310 --> 00:08:43.750
So this is what I mean
by shared mutable state.

125
00:08:43.750 --> 00:08:44.860
Let me ask you to just undo this.

126
00:08:44.860 --> 00:08:49.110
Look so I know kind of that you say
shared mutable state and it's like!

127
00:08:50.440 --> 00:08:52.350
At least for me,
the first time it went way over my head.

128
00:08:53.810 --> 00:08:56.167
So here.

129
00:09:01.292 --> 00:09:06.566
&gt;&gt; Lukas Ruebbelke: So instead of binding
to the stored reference, we'll go here.

130
00:09:09.323 --> 00:09:12.030
&gt;&gt; Lukas Ruebbelke: This is what I
mean by having shared mutable state.

131
00:09:12.030 --> 00:09:16.730
You change it here, in this field,
and it's messing it up over here.

132
00:09:16.730 --> 00:09:19.000
And so it's a really benign example, but

133
00:09:19.000 --> 00:09:21.580
what if this was happening
somewhere else in your application?

134
00:09:21.580 --> 00:09:23.270
And it was mutating C and
you couldn't even see,

135
00:09:23.270 --> 00:09:27.460
like the fact is you can see this,
it makes it a little easier to deal with,

136
00:09:27.460 --> 00:09:29.990
what happens is this changes something and
you don't even know about it.

137
00:09:31.090 --> 00:09:32.320
Yey.
Pass by reference.

138
00:09:32.320 --> 00:09:36.310
That's the nature of JavaScript, and
really, most programming languages.

139
00:09:36.310 --> 00:09:41.007
And so that's why, for a UX experience,
for just the user experience I

140
00:09:41.007 --> 00:09:45.875
store that off, but I also do it, so
again I'm isolating that mutation.

141
00:09:49.175 --> 00:09:50.800
&gt;&gt; Lukas Ruebbelke: So
we'll set this back to its original name.

142
00:09:53.050 --> 00:09:56.130
So now when I select this, I can type it.

143
00:09:56.130 --> 00:10:00.070
And it's working on,
essentially the copy that I created.

144
00:10:01.080 --> 00:10:02.690
So when I'm ready to save it.

145
00:10:04.010 --> 00:10:08.990
Then what I do is I simply say take
this item that I've just changed,

146
00:10:08.990 --> 00:10:10.720
save it up, and pass it back.

147
00:10:12.000 --> 00:10:15.930
And so then we take that basically
the cloned item, save it to the server,

148
00:10:15.930 --> 00:10:16.800
and we're good to go.

149
00:10:18.250 --> 00:10:21.660
But, I'll save it again,
let's just put it back where it was.

150
00:10:21.660 --> 00:10:24.140
Let's say you just do something and

151
00:10:24.140 --> 00:10:27.700
you know like, eh,
I didn't mean to do that, cancel.

152
00:10:27.700 --> 00:10:28.680
Well what does it do?

153
00:10:28.680 --> 00:10:30.000
It just throws away the clone,

154
00:10:30.000 --> 00:10:32.980
it doesn't need it because you
haven't effected the original object.

155
00:10:32.980 --> 00:10:37.239
And so this is why the mutable
operations are so important.

156
00:10:38.860 --> 00:10:42.870
For instance, as if you had
an object with ten properties on it.

157
00:10:44.300 --> 00:10:49.090
And you started to change one property,
then another, and then another.

158
00:10:49.090 --> 00:10:52.060
And then, you're, like,
I actually need to undo this.

159
00:10:52.060 --> 00:10:53.660
I need to reset this object.

160
00:10:53.660 --> 00:10:55.400
I need to back it out.

161
00:10:55.400 --> 00:10:56.050
Well, how do you do that?

162
00:10:57.250 --> 00:10:58.440
We've already mutated the object.

163
00:10:58.440 --> 00:11:01.740
And what happens if you do property one,
two, and five,

164
00:11:01.740 --> 00:11:03.820
and you need to mutate property two?

165
00:11:03.820 --> 00:11:06.460
Well now you gotta figure out
how to actually step over with

166
00:11:06.460 --> 00:11:08.850
what you did on five,
and go straight to two.

167
00:11:08.850 --> 00:11:11.420
It's a really hairy thing.

168
00:11:11.420 --> 00:11:15.130
Instead, as if you create a copy,
I need to back this out,

169
00:11:15.130 --> 00:11:17.080
you just roll it back
to the original copy.

170
00:11:19.810 --> 00:11:25.780
And so that is why in the item detail
component I'm essentially creating a copy

171
00:11:25.780 --> 00:11:30.940
and I'm binding to it in the template.

172
00:11:30.940 --> 00:11:36.300
And so the form is bound to not item,
but it is bound to selected item.

173
00:11:38.190 --> 00:11:40.580
Therefore my mutation is
isolated to that component.

174
00:11:42.780 --> 00:11:46.438
And it can't escape until I save
it out and emit that event.

175
00:11:52.609 --> 00:11:54.663
&gt;&gt; Lukas Ruebbelke: Inputs, outputs.

