WEBVTT

1
00:00:00.400 --> 00:00:02.724
&gt;&gt; Lukas Ruebbelke: Complexity
leads to purgatory,

2
00:00:02.724 --> 00:00:06.294
any seasoned developers in the room,
or even not.

3
00:00:06.294 --> 00:00:11.664
I think it took all of two hours or
less of me trying to program before I

4
00:00:11.664 --> 00:00:17.621
found myself in this state of,
what is going on, like doesn't feel good.

5
00:00:17.621 --> 00:00:20.515
So have you ever been programming on
something and you just hated your life?

6
00:00:20.515 --> 00:00:21.192
&gt;&gt; Speaker 2: [LAUGH]

7
00:00:21.192 --> 00:00:22.744
&gt;&gt; Lukas Ruebbelke: You're just like,

8
00:00:22.744 --> 00:00:25.483
I wanna quit and go deliver pizzas,

9
00:00:25.483 --> 00:00:30.831
like this is not fun.
&gt;&gt; Lukas Ruebbelke: The majority

10
00:00:30.831 --> 00:00:35.080
of the time it's because of complexity.

11
00:00:35.080 --> 00:00:38.410
And so to be clear, sometimes even
just ambiguity leads to complexity.

12
00:00:38.410 --> 00:00:42.692
Things appear, where you're processing
things and the perspective is that it's

13
00:00:42.692 --> 00:00:46.254
very complex because it's ambiguous,
like, what's happening.

14
00:00:46.254 --> 00:00:49.059
But complexity leads to purgatory, so

15
00:00:49.059 --> 00:00:53.990
let's see a couple examples here,
and just to illustrate my point.

16
00:00:53.990 --> 00:00:55.995
I'm not trying to scare you, but

17
00:00:55.995 --> 00:01:00.231
imagine if I can kind of kind of drive
these points home in a few slides.

18
00:01:00.231 --> 00:01:03.766
Now, imagine doing this at an enterprise

19
00:01:03.766 --> 00:01:07.016
app level.
&gt;&gt; Lukas Ruebbelke: So,

20
00:01:07.016 --> 00:01:11.330
let's take this code here.
&gt;&gt; Lukas Ruebbelke: We are calling

21
00:01:11.330 --> 00:01:16.656
a method inbound,
over here, taking an item,

22
00:01:16.656 --> 00:01:21.051
we're doing some kind of processing,

23
00:01:21.051 --> 00:01:25.580
and we're then returning a total.

24
00:01:25.580 --> 00:01:32.100
So, an item comes in,
based on this value here, currentCategory.

25
00:01:33.180 --> 00:01:37.320
Determines what logic gets processed, and
then you return a total based on that.

26
00:01:37.320 --> 00:01:43.636
So this is kind of some quasi code, but
the question is, when you call this,

27
00:01:43.636 --> 00:01:48.683
what are you going to get?
&gt;&gt; Lukas Ruebbelke: Well,

28
00:01:48.683 --> 00:01:50.730
the answer is you don't know.

29
00:01:52.510 --> 00:01:56.680
Like you cannot say for
certain, in itself,

30
00:01:56.680 --> 00:02:01.170
in a vacuum, when you call this
what you are going to get.

31
00:02:02.560 --> 00:02:08.340
The reason being,
is because this method has hidden state.

32
00:02:09.440 --> 00:02:16.380
So I could call this 10000 times and
get a different result every single time.

33
00:02:17.680 --> 00:02:20.940
The reason being, is that if I'm changing

34
00:02:22.150 --> 00:02:27.480
current category I'm changing
the internal workings of this method.

35
00:02:27.480 --> 00:02:32.184
And now, in order for
me to reliably assert that this method is

36
00:02:32.184 --> 00:02:37.069
going to return this thing or
there's going to be this outcome,

37
00:02:37.069 --> 00:02:42.045
I also have to control this hidden
internal state, in this case,

38
00:02:42.045 --> 00:02:44.044
it's currentCategory.

39
00:02:44.044 --> 00:02:50.396
And so now we're thinking, in order for
me to wrap my mind around this method,

40
00:02:50.396 --> 00:02:55.995
I also have to add in this additional
piece into my Cogno processing.

41
00:02:55.995 --> 00:02:59.960
As human beings are not very good at this,
so for

42
00:02:59.960 --> 00:03:04.478
instance,
&gt;&gt; Lukas Ruebbelke: Let's say we have

43
00:03:04.478 --> 00:03:07.834
three dice.
&gt;&gt; Lukas Ruebbelke: How many

44
00:03:07.834 --> 00:03:13.570
possible combinations can
we have with three dice?

45
00:03:13.570 --> 00:03:17.009
So I know there is a math formula for
this, but for me,

46
00:03:17.009 --> 00:03:20.761
when I try to think it off the top
of my head, I can't do it.

47
00:03:20.761 --> 00:03:27.444
So imagine you have these three things
in your method that affect the outcome,

48
00:03:27.444 --> 00:03:33.740
and now you have to try to figure out
what is going to be the outcome of this.

49
00:03:34.750 --> 00:03:38.424
So, I think kind of the easy argument for
this is,

50
00:03:38.424 --> 00:03:41.672
is like well that's why we write unitests.

51
00:03:41.672 --> 00:03:47.424
The problem is, or rather I'm all for
unitests, but we have this little thing

52
00:03:47.424 --> 00:03:53.088
called before each, as in every test
that you run, you are resetting state,

53
00:03:53.088 --> 00:03:57.210
you're controlling the state
as it goes into the text.

54
00:03:58.780 --> 00:04:01.850
So we have this equivalent in real life,
and

55
00:04:01.850 --> 00:04:07.840
its called restart your computer,
restart your phone, refresh the browser.

56
00:04:07.840 --> 00:04:11.506
Cuz what happens, you go in a bad state,
a state you didn't intend to,

57
00:04:11.506 --> 00:04:14.272
you have to refresh it,
you have to reset that state.

58
00:04:14.272 --> 00:04:17.335
That is kind of the real life equivalent,

59
00:04:17.335 --> 00:04:22.849
IRL before each is it's called restart
the thing, because you've gotten

60
00:04:22.849 --> 00:04:28.032
your application into a state that
the developer did not account for.

61
00:04:28.032 --> 00:04:32.127
So you can see one method
one internal state and

62
00:04:32.127 --> 00:04:36.852
we can no longer assert what
this is going to be without

63
00:04:36.852 --> 00:04:41.180
understanding the impact
of that hidden state.

64
00:04:41.180 --> 00:04:45.846
And not only that, if you were
to introduce an additional logic

65
00:04:45.846 --> 00:04:50.335
structure into this,
like let's say it was a child, then,

66
00:04:50.335 --> 00:04:54.663
do this, because this other
outcome would be dangerous.

67
00:04:54.663 --> 00:04:59.762
And, this kinda seems a little
contrived; I've seen way worse.

68
00:04:59.762 --> 00:05:05.293
In the sense it's very common
to see blocks of code that is

69
00:05:05.293 --> 00:05:11.057
doing multiple things where
you just see this procedural,

70
00:05:11.057 --> 00:05:16.664
top down, if this do this,
if this do this, if this etc.

71
00:05:16.664 --> 00:05:20.400
But the problem is,
how do you even test this,

72
00:05:20.400 --> 00:05:22.550
this internal thing,
this structure right here?

73
00:05:22.550 --> 00:05:27.691
How would you say, if it's dangerous and
it's a child, do this, if not.

74
00:05:27.691 --> 00:05:32.424
The only way to get to this is you
have to step through the entire

75
00:05:32.424 --> 00:05:35.500
rest of this body to get to it.

76
00:05:35.500 --> 00:05:41.643
So again, complexity leads to purgatory.
&gt;&gt; Lukas Ruebbelke: So,

77
00:05:41.643 --> 00:05:46.270
now we're thinking like well how do
we manage these possible states?

78
00:05:46.270 --> 00:05:47.520
Let's take it a step further.

79
00:05:48.700 --> 00:05:54.333
So this is a real easy one,
we have an inventory class,

80
00:05:54.333 --> 00:05:59.482
two components,
that have this add method on it.

81
00:05:59.482 --> 00:06:04.232
And so each component simply
you can call add on it and,

82
00:06:04.232 --> 00:06:08.580
it will update the total
on the inventory ledger.

83
00:06:09.710 --> 00:06:14.563
This seems totally benign,
when I started Angular JS,

84
00:06:14.563 --> 00:06:19.416
I did something like this all the time,
the problem is,

85
00:06:19.416 --> 00:06:23.294
this.
&gt;&gt; Lukas Ruebbelke: What happens if

86
00:06:23.294 --> 00:06:27.941
the items component has a requirement
that you can never ever, ever,

87
00:06:27.941 --> 00:06:31.564
ever, ever or
the factory will explode have a negative

88
00:06:31.564 --> 00:06:34.598
number?
&gt;&gt; Lukas Ruebbelke: Or

89
00:06:34.598 --> 00:06:37.790
you can never get below 10.

90
00:06:37.790 --> 00:06:41.412
So let's say this was like a thermostat or
something.

91
00:06:41.412 --> 00:06:45.844
There is a real reason why something
cannot be in certain state or

92
00:06:45.844 --> 00:06:48.151
you cannot have a certain value.

93
00:06:48.151 --> 00:06:52.085
So, what would keep the widgets component,
so let's just say you can't have

94
00:06:52.085 --> 00:06:55.648
a negative number,
&gt;&gt; Lukas Ruebbelke: In the items

95
00:06:55.648 --> 00:06:56.980
component.

96
00:06:56.980 --> 00:07:00.267
The widgets component does not
share that same constraint,

97
00:07:00.267 --> 00:07:03.297
what would keep the WidgetsComponent
from setting it to

98
00:07:03.297 --> 00:07:05.940
the negative 10?
&gt;&gt; Lukas Ruebbelke: One,

99
00:07:05.940 --> 00:07:10.565
the answer is nothing at all.
&gt;&gt; Lukas Ruebbelke: More

100
00:07:10.565 --> 00:07:14.195
importantly it's that,
I think in kind of the benign approach or

101
00:07:14.195 --> 00:07:17.700
kind of the trick, I think people
get kind of lulled into this.

102
00:07:17.700 --> 00:07:20.788
Is you have a programmer
writing both of these classes,

103
00:07:20.788 --> 00:07:24.610
they're like I just know like they're
here like I know you can do it.

104
00:07:24.610 --> 00:07:27.200
And so it's kinda right there,
on top of mine.

105
00:07:28.600 --> 00:07:31.421
But what happens when three months
later some other developers come and

106
00:07:31.421 --> 00:07:33.031
they're not aware of the constraints?

107
00:07:33.031 --> 00:07:38.473
So that's how, in a very poor way, you
would keep this from happening you said,

108
00:07:38.473 --> 00:07:43.278
the widget's component has to have
knowledge of the ItemsComponent,

109
00:07:43.278 --> 00:07:44.413
and vice versa.

110
00:07:44.413 --> 00:07:48.336
And so now purely because of the fact
they are in this mutual state of like,

111
00:07:48.336 --> 00:07:50.806
mutually assured destruction, if you will,

112
00:07:50.806 --> 00:07:54.802
that they're coupled together.
&gt;&gt; Lukas Ruebbelke: One has to know

113
00:07:54.802 --> 00:07:58.780
something about, some constraint that
has nothing to do with that component.

114
00:07:59.910 --> 00:08:03.045
And so this is where shared
mutable state is a real problem,

115
00:08:03.045 --> 00:08:06.570
and we saw it yesterday when
we were doing the detail form,

116
00:08:06.570 --> 00:08:10.360
we started typing and
it's changing over here.

117
00:08:10.360 --> 00:08:15.041
You had to be super careful to avoid that,
let's talk about controlling flow.

118
00:08:15.041 --> 00:08:18.033
So this is actually from Jafar course, so

119
00:08:18.033 --> 00:08:21.539
this is kind of a big
problem they had at Netflix.

120
00:08:22.750 --> 00:08:27.119
And so kind of borrowing
the approach they did is,

121
00:08:27.119 --> 00:08:32.943
what happens when you have,
you're making a call with a promise,

122
00:08:32.943 --> 00:08:39.203
and you need to recover and do it again?
&gt;&gt; Lukas Ruebbelke: What do you do?

123
00:08:39.203 --> 00:08:42.317
So anyone who studied 1.x, I mean,
that's a real concern it's like,

124
00:08:42.317 --> 00:08:45.330
hey, this call failed I wanna actually
recover, I wanna try it again,

125
00:08:45.330 --> 00:08:48.958
I wanna retry.
&gt;&gt; Lukas Ruebbelke: Well,

126
00:08:48.958 --> 00:08:55.160
the only way to do that is
to introduce more code.

127
00:08:55.160 --> 00:08:58.140
Like, this is how code
volume spins out of control,

128
00:08:58.140 --> 00:09:02.833
it's cuz you don't have mechanisms so
they're kind of like agitate each other.

129
00:09:02.833 --> 00:09:06.377
It's like I don't have the proper
mechanism to manage my control flow, so

130
00:09:06.377 --> 00:09:09.654
I have to introduce more code volume,
which then introduces state.

131
00:09:09.654 --> 00:09:13.252
Or I have to introduce state
which is more code volume,

132
00:09:13.252 --> 00:09:17.410
and it's just this cycle of
complexity leading to purgatory.

133
00:09:17.410 --> 00:09:22.117
So in this case I need a retries count,
again that's outside of the structure,

134
00:09:22.117 --> 00:09:26.000
that you're saying, try it three times,
if not, then give up.

135
00:09:27.200 --> 00:09:30.400
Now imagine, and
this is where Jafar just was kind of like,

136
00:09:30.400 --> 00:09:34.503
you're starting to imagine if you had
two calls that you had to coordinate.

137
00:09:34.503 --> 00:09:39.147
So in the case of Netflix, you will
basically wanna go get the videos that

138
00:09:39.147 --> 00:09:43.489
users requests but at the same time
you need to check to make sure that

139
00:09:43.489 --> 00:09:47.390
they're logged in, and
they're dependent on each other.

140
00:09:47.390 --> 00:09:52.262
So you cannot move further like forward
without both of them successfully

141
00:09:52.262 --> 00:09:57.501
resolving, like how do you control that?
&gt;&gt; Lukas Ruebbelke: I

142
00:09:57.501 --> 00:09:59.872
think I'm getting an ulcer
thinking about this.

143
00:09:59.872 --> 00:10:04.109
I mean, these are easy things that
can fit on a single slide, and

144
00:10:04.109 --> 00:10:07.580
already you're like that
is a really hard problem.

145
00:10:08.930 --> 00:10:14.027
And so this is where this leads to,
again, state management,

146
00:10:14.027 --> 00:10:18.000
grove control, and variably,
I think the bottom of the threes,

147
00:10:18.000 --> 00:10:21.860
what you end up doing is writing
more code to try to handle it.

