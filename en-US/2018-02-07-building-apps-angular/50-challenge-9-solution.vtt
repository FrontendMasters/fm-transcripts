WEBVTT

1
00:00:00.180 --> 00:00:02.790
&gt;&gt; Lukas Ruebbelke: Let's go
through this challenge real quick.

2
00:00:02.790 --> 00:00:08.370
But for the sake of time, I'm going
to do a bit of just copy and pasting,

3
00:00:08.370 --> 00:00:15.200
because it is quite a bit of repetitious.
&gt;&gt; Lukas Ruebbelke: Work.

4
00:00:15.200 --> 00:00:18.601
So I'm just going to copy this and

5
00:00:18.601 --> 00:00:23.974
we'll just go here.
&gt;&gt; Lukas Ruebbelke: Oops.

6
00:00:31.193 --> 00:00:33.414
&gt;&gt; Lukas Ruebbelke: Now what's interesting

7
00:00:33.414 --> 00:00:38.700
about this is, quite frankly,
the only thing that changes

8
00:00:38.700 --> 00:00:45.269
is the parameter.
&gt;&gt; Lukas Ruebbelke: So

9
00:00:45.269 --> 00:00:48.009
we'll just go here,
let's just replace this.

10
00:01:04.244 --> 00:01:05.143
&gt;&gt; Lukas Ruebbelke: So update these

11
00:01:05.143 --> 00:01:14.768
primers here.
&gt;&gt; Lukas Ruebbelke: I'm

12
00:01:14.768 --> 00:01:23.966
not for sure.
&gt;&gt; Lukas Ruebbelke: You know what?

13
00:01:23.966 --> 00:01:25.674
I know how to solve this problem,

14
00:01:25.674 --> 00:01:31.722
because I just ran into it.
&gt;&gt; Lukas Ruebbelke: Make

15
00:01:31.722 --> 00:01:35.299
sure that you have imported headers,
or you will run into some problems.

16
00:01:36.950 --> 00:01:41.051
And from here's, let's go into our

17
00:01:41.051 --> 00:01:45.693
widgets component.
&gt;&gt; Lukas Ruebbelke: And

18
00:01:45.693 --> 00:01:48.284
let's kind of fill this out.

19
00:01:48.284 --> 00:01:54.524
So.
&gt;&gt; Lukas Ruebbelke: When

20
00:01:54.524 --> 00:01:58.058
we call.
&gt;&gt; Lukas Ruebbelke: I'm gonna kinda change

21
00:01:58.058 --> 00:02:07.720
the order of this around a bit.
&gt;&gt; Lukas Ruebbelke: We're going to say,

22
00:02:07.720 --> 00:02:11.821
if widget doesn't have an id,

23
00:02:11.821 --> 00:02:19.816
then let's call create widget.
&gt;&gt; Lukas Ruebbelke: And

24
00:02:19.816 --> 00:02:20.893
just pass it through.

25
00:02:31.766 --> 00:02:32.546
&gt;&gt; Lukas Ruebbelke: If it does have

26
00:02:32.546 --> 00:02:35.472
an idea,
we'll call updateWidget on past history.

27
00:02:47.618 --> 00:02:48.434
&gt;&gt; Lukas Ruebbelke: And then,

28
00:02:48.434 --> 00:02:55.751
we'll do create widget.
&gt;&gt; Lukas Ruebbelke: So

29
00:02:55.751 --> 00:03:00.083
again, because we're doing small fine
grade functions, I would say that

30
00:03:00.083 --> 00:03:04.706
the level of complexity on the JavaScript
itself is probably a three out of ten.

31
00:03:04.706 --> 00:03:09.108
And so there's a lot of kind of these
really simple functions that we're

32
00:03:09.108 --> 00:03:10.336
putting together,

33
00:03:10.336 --> 00:03:15.191
to build a master detailed view that
pretty much can do almost everything else.

34
00:03:15.191 --> 00:03:20.110
So any line of business have is
generally a variation of this.

35
00:03:20.110 --> 00:03:27.347
So from here,
we'll just go this.widgetService.

36
00:03:29.370 --> 00:03:31.065
&gt;&gt; Lukas Ruebbelke: And we'll call create.

37
00:03:31.065 --> 00:03:36.112
And we just pass send.
&gt;&gt; Lukas Ruebbelke: Then we'll go to here.

38
00:03:37.369 --> 00:03:38.368
&gt;&gt; Lukas Ruebbelke: That's subscribe.

39
00:03:42.964 --> 00:03:44.353
&gt;&gt; Lukas Ruebbelke: This is going to take

40
00:03:44.353 --> 00:03:49.423
a result which we're not going to use,
because instead what we're going

41
00:03:49.423 --> 00:03:54.209
to do is.
&gt;&gt; Lukas Ruebbelke: Just rehydrated it and

42
00:03:54.209 --> 00:03:59.150
reset the currently selected widget.

43
00:03:59.150 --> 00:04:03.770
I'm going to copy this, cuz I'm going
to need it again in just a second.

44
00:04:03.770 --> 00:04:10.900
So, update widget, this.
&gt;&gt; Lukas Ruebbelke: widgetService.update,

45
00:04:10.900 --> 00:04:16.703
pass the (widget) in.
&gt;&gt; Lukas Ruebbelke: .subscribe.

46
00:04:18.357 --> 00:04:20.325
&gt;&gt; Lukas Ruebbelke: And actually you just

47
00:04:20.325 --> 00:04:23.490
drop this in, this is the same.

48
00:04:23.490 --> 00:04:27.299
And for delete.
&gt;&gt; Lukas Ruebbelke: Let's go ahead and

49
00:04:27.299 --> 00:04:29.060
check this as well.

50
00:04:29.060 --> 00:04:35.693
So widget.Service.
&gt;&gt; Lukas Ruebbelke: delete.

51
00:04:38.221 --> 00:04:39.422
&gt;&gt; Lukas Ruebbelke: (widget).

52
00:04:43.748 --> 00:04:45.706
&gt;&gt; Lukas Ruebbelke: And well go like this.

53
00:04:53.558 --> 00:04:54.306
&gt;&gt; Lukas Ruebbelke: This trailing

54
00:04:54.306 --> 00:04:57.746
whitespace.
&gt;&gt; Lukas Ruebbelke: I feel like morally

55
00:04:57.746 --> 00:05:01.381
responsible because it's in the TSLint
that I should like leave it there,

56
00:05:01.381 --> 00:05:05.320
I really, like there's like a really good
reason that I just don't know about.

57
00:05:06.670 --> 00:05:09.903
And, create, create, create,

58
00:05:09.903 --> 00:05:16.507
create.
&gt;&gt; Lukas Ruebbelke: All right,

59
00:05:16.507 --> 00:05:20.923
I think this.
&gt;&gt; Lukas Ruebbelke: I have a good feeling

60
00:05:20.923 --> 00:05:21.733
about this.

61
00:05:21.733 --> 00:05:22.726
Let's try it out.

62
00:05:32.548 --> 00:05:36.431
&gt;&gt; Lukas Ruebbelke: So it showed up here.
&gt;&gt; Lukas Ruebbelke: Let's

63
00:05:36.431 --> 00:05:37.721
check our actual JSON and

64
00:05:37.721 --> 00:05:43.250
see if it actually got wrote to it.
&gt;&gt; Lukas Ruebbelke: Yeah.

65
00:05:45.710 --> 00:05:46.460
Let's go back here.

66
00:05:47.670 --> 00:05:55.131
Let's select it.
&gt;&gt; Lukas Ruebbelke: Update it.

67
00:05:55.131 --> 00:05:56.542
I'm pretty excited about this.

68
00:06:04.221 --> 00:06:05.140
&gt;&gt; Lukas Ruebbelke: So, it's saved.

69
00:06:06.440 --> 00:06:08.500
Obviously, it can read and
then we'll go here.

70
00:06:08.500 --> 00:06:13.892
And.
&gt;&gt; Lukas Ruebbelke: It

71
00:06:13.892 --> 00:06:18.889
deleted it, let's see if it, boom, done.

72
00:06:18.889 --> 00:06:23.466
Create, read, update, delete.
&gt;&gt; Lukas Ruebbelke: And

73
00:06:23.466 --> 00:06:26.268
you can see it reflected in db.json.

74
00:06:34.453 --> 00:06:35.950
&gt;&gt; Lukas Ruebbelke: Now,
one thing you could do.

75
00:06:37.390 --> 00:06:41.260
This is just me musing out loud, as I'm
kind of typing these things over and over

76
00:06:42.430 --> 00:06:47.940
is, you know it's like these three
methods currently are identical.

77
00:06:49.600 --> 00:06:51.430
Except for this one thing.

78
00:06:53.170 --> 00:07:00.120
And so you could almost do
something like action(widget,

79
00:07:00.120 --> 00:07:05.404
or action) let's do something like execute

80
00:07:07.896 --> 00:07:13.674
&gt;&gt; Lukas Ruebbelke: And.
&gt;&gt; Lukas Ruebbelke: Then use something

81
00:07:13.674 --> 00:07:18.905
like this.widgetService[action](widget).

82
00:07:29.178 --> 00:07:31.020
&gt;&gt; Lukas Ruebbelke: This
is all hypothetical.

83
00:07:31.020 --> 00:07:31.610
Till I try it.

84
00:07:31.610 --> 00:07:33.770
I think I will.

85
00:07:33.770 --> 00:07:36.126
All right,
let's see what happens just for fun.

86
00:07:44.334 --> 00:07:45.442
&gt;&gt; Lukas Ruebbelke: Create.

87
00:08:02.701 --> 00:08:04.149
&gt;&gt; Lukas Ruebbelke: See what happens.

88
00:08:20.878 --> 00:08:22.613
&gt;&gt; Lukas Ruebbelke: That's pretty cool.

89
00:08:22.613 --> 00:08:25.730
So, one of the things
that I do wrestle with,

90
00:08:25.730 --> 00:08:30.890
especially as an instructor,
is sometimes you can get so clever

91
00:08:31.970 --> 00:08:37.076
that your true intention is kind
of obscured in your cleverness.

92
00:08:37.076 --> 00:08:40.580
And I think writing code
that's easy to read.

93
00:08:40.580 --> 00:08:46.560
That communicates intent is way, way, way,
way, way better in being clever and cute.

94
00:08:46.560 --> 00:08:52.430
So to that end, because JavaScript is
this really amazing dynamic language,

95
00:08:54.350 --> 00:08:58.840
you can do things like,
where that I even put in?

96
00:08:58.840 --> 00:09:02.979
I'm looking right at it, like this and
I'm dynamically calling a method

97
00:09:04.150 --> 00:09:06.530
on the fly by passing in the action
that I actually wanna do.

98
00:09:07.560 --> 00:09:10.754
But, if somebody looked at this and

99
00:09:10.754 --> 00:09:15.409
they're like.
&gt;&gt; Lukas Ruebbelke: There's gonna be this

100
00:09:15.409 --> 00:09:17.107
second of well, what is action?

101
00:09:17.107 --> 00:09:18.250
What is it?

102
00:09:18.250 --> 00:09:23.740
What's happening here, as opposed
to somebody looks at widget.create.

103
00:09:23.740 --> 00:09:26.300
Just immediately,
they're gonna know what it is.

104
00:09:26.300 --> 00:09:30.705
And so this is why even I will
sometimes favor verbosity.

105
00:09:30.705 --> 00:09:37.913
And as you type things out, because it's
2017, our computers are super, super fast.

106
00:09:37.913 --> 00:09:41.949
And, we're not actually counting but, it's
like we have managed garbage collection,

107
00:09:41.949 --> 00:09:42.811
things like that.

108
00:09:42.811 --> 00:09:48.430
So, I would much rather, in most cases,
see widgetService.create.

109
00:09:48.430 --> 00:09:50.220
You immediately know what that does.

110
00:09:50.220 --> 00:09:53.550
As opposed to,
widgetService, like, action.

111
00:09:55.690 --> 00:09:58.930
Because it's like well,
I think I know what that does.

112
00:09:59.990 --> 00:10:02.960
It's even hard, because I know
what it does cuz I wrote it.

113
00:10:02.960 --> 00:10:06.171
But, it would be interesting to pull some
program out of the hall and be like hey,

114
00:10:06.171 --> 00:10:07.315
what do you think this does?

115
00:10:07.315 --> 00:10:09.019
Three, two, one, go.

116
00:10:09.019 --> 00:10:12.262
And the first question they're
gonna ask is like, what is action?

117
00:10:12.262 --> 00:10:15.116
Or they're gonna have some
prior knowledge to it.

118
00:10:15.116 --> 00:10:20.451
So, just something to consider.
&gt;&gt; Speaker 2: In case

119
00:10:20.451 --> 00:10:25.592
of nested objects, like employee address.

120
00:10:25.592 --> 00:10:28.335
So an employee has multiple address.

121
00:10:28.335 --> 00:10:32.327
So you would have,
would he have a single service and

122
00:10:32.327 --> 00:10:37.960
you do the mapping and all of that
object handling on the server side?

123
00:10:37.960 --> 00:10:39.417
or you do it in the component and

124
00:10:39.417 --> 00:10:43.890
then pass?
&gt;&gt; Lukas Ruebbelke: So-

125
00:10:43.890 --> 00:10:44.900
&gt;&gt; Speaker 2: Where does that

126
00:10:44.900 --> 00:10:45.870
mapping logic set?

127
00:10:45.870 --> 00:10:47.112
Does it set in the component or

128
00:10:47.112 --> 00:10:51.943
the service?
&gt;&gt; Lukas Ruebbelke: I would definitely

129
00:10:51.943 --> 00:10:54.370
not do it in the component.

130
00:10:54.370 --> 00:10:59.070
So the question is,
if you have a complex data object that is

131
00:10:59.070 --> 00:11:01.330
it has nested objects within itself.

132
00:11:02.400 --> 00:11:04.600
And, where do you map that together?

133
00:11:06.060 --> 00:11:11.259
And the answer to that is,
certainly not in the component.

134
00:11:11.259 --> 00:11:15.347
A component should get a data structure,
and immediately be able to render it.

135
00:11:15.347 --> 00:11:19.290
Because to map those together,
that is business logic.

136
00:11:19.290 --> 00:11:21.410
If there's someone saying like,

137
00:11:21.410 --> 00:11:25.840
because I understand the business
model I know that this, like you know,

138
00:11:25.840 --> 00:11:29.860
a user has a policy but
they also have this other thing over here.

139
00:11:29.860 --> 00:11:34.651
So, I would do that definitely in
a server, or a service rather.

140
00:11:35.690 --> 00:11:38.750
I might have like a helper function
that does just that mapping.

141
00:11:38.750 --> 00:11:43.670
So I'm a huge fan of having classes and
services do one thing.

142
00:11:43.670 --> 00:11:46.470
So I might have,
depending on the complexity of the logic,

143
00:11:46.470 --> 00:11:52.400
I might have a single service considered
lightweight handle that mapping.

144
00:11:52.400 --> 00:11:56.200
Now with that said,
I would do this in Redux,

145
00:11:56.200 --> 00:12:00.294
and I would do it one of two ways,
using observable.combinelatest.

146
00:12:01.620 --> 00:12:04.130
so it takes basically
multiple data structures, and

147
00:12:04.130 --> 00:12:06.530
when either one of them
updates you then can,

148
00:12:06.530 --> 00:12:11.550
basically it's computed data,
you can basically re-compute the data.

149
00:12:11.550 --> 00:12:14.880
And then expose it to the rest
of your app via an observable.

150
00:12:14.880 --> 00:12:19.008
Or, I would use reselect, which is,

151
00:12:19.008 --> 00:12:24.680
it's actually a reactant
that you can use in NGRX.

152
00:12:24.680 --> 00:12:26.720
And it does the same exact thing.

153
00:12:26.720 --> 00:12:29.686
It's when you take multiple data
structures and you just combine them

154
00:12:29.686 --> 00:12:33.496
together, using a comparator function.
&gt;&gt; Lukas Ruebbelke: And so

155
00:12:33.496 --> 00:12:38.220
these higher order functions, first of
all with JavaScript using map find.

156
00:12:38.220 --> 00:12:39.020
Filter these things.

157
00:12:39.020 --> 00:12:40.790
Like those are amazing.

158
00:12:40.790 --> 00:12:45.110
But then you have those
as well with observables.

159
00:12:45.110 --> 00:12:46.810
And you can kinda do
a lot of the same things.

