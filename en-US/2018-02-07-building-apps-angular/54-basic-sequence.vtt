WEBVTT

1
00:00:00.360 --> 00:00:04.316
&gt;&gt; Lukas Ruebbelke: Now I would imagine
that most of us are pretty familiar with

2
00:00:04.316 --> 00:00:07.410
kind of concept of, I have some input,

3
00:00:07.410 --> 00:00:10.750
I'm going to produce it to you, and
you're going to give me some output.

4
00:00:10.750 --> 00:00:12.740
So input, output.

5
00:00:12.740 --> 00:00:16.020
I think everybody here is like,
okay, I understand that concept.

6
00:00:17.210 --> 00:00:20.247
But what I would recommend for

7
00:00:20.247 --> 00:00:25.237
observables is flip this in your mind,
to this.

8
00:00:25.237 --> 00:00:30.040
And I owe all the credit, I don't want to
by any means try to hint that I came up

9
00:00:30.040 --> 00:00:33.643
with this, this was actually
John Lindquist sat down and

10
00:00:33.643 --> 00:00:38.223
explained this to me one evening, and
this is basically what he told me,

11
00:00:38.223 --> 00:00:43.558
is that traditional programming, you're
used to essentially providing input and

12
00:00:43.558 --> 00:00:46.704
pulling the output to you or
requesting output.

13
00:00:46.704 --> 00:00:48.610
I'm gonna give you this thing and
you're gonna give me something back.

14
00:00:50.190 --> 00:00:54.690
With observables, the output is happening.

15
00:00:54.690 --> 00:00:59.130
There is a stream that is
always outputting data, and

16
00:00:59.130 --> 00:01:02.040
you simply need to figure out
where you're going to put it.

17
00:01:03.380 --> 00:01:07.770
And so instead of having initial
input to get final output,

18
00:01:07.770 --> 00:01:11.240
reverse that to think of,
I have this initial output,

19
00:01:11.240 --> 00:01:16.180
in other words the start of this stream,
and my job is to figure

20
00:01:16.180 --> 00:01:20.600
out where I wanna put it and what form
it needs to be in when it gets there.

21
00:01:20.600 --> 00:01:25.771
So, for instance,
if you are consuming a Firebase end point,

22
00:01:25.771 --> 00:01:30.970
so Firebase is a real time database
that as things change in the database,

23
00:01:30.970 --> 00:01:33.200
it will push them out to you.

24
00:01:33.200 --> 00:01:37.090
So any connected client, if something
changes at the Firebase database,

25
00:01:37.090 --> 00:01:40.660
it gets basically pushed out
to any connected client.

26
00:01:40.660 --> 00:01:45.980
Well, that Firebase stream
is happening all the time,

27
00:01:45.980 --> 00:01:48.350
it's streaming whether you're connected or
not.

28
00:01:48.350 --> 00:01:53.330
But, once you're connected, you now have
hooked into the output of the stream.

29
00:01:53.330 --> 00:01:57.810
You need to figure out where you wanna put
it and what shape you want it to be in.

30
00:01:59.800 --> 00:02:03.980
And so this is the basic
sequence of an observable stream.

31
00:02:05.330 --> 00:02:09.680
We have an initial output.

32
00:02:09.680 --> 00:02:11.560
And at the bottom of this,
we have a final input.

33
00:02:13.040 --> 00:02:17.510
And in between, we just have some
magic that's going to happen.

34
00:02:19.080 --> 00:02:23.640
So I call this pretty much
the observable sandwich, if you will.

35
00:02:23.640 --> 00:02:26.290
The reason why I also call it final input,

36
00:02:26.290 --> 00:02:31.090
is because once it hits your subscribe
block, it is in its final form.

37
00:02:31.090 --> 00:02:34.810
The observable stream can no
longer do anything with that data.

38
00:02:34.810 --> 00:02:36.580
So it is kind of the equivalent,

39
00:02:36.580 --> 00:02:41.810
if you have a garden hose,
you turn the knob, water's coming out.

40
00:02:41.810 --> 00:02:43.230
So that's the stream.

41
00:02:43.230 --> 00:02:45.670
You need to figure out,
where am I gonna put this?

42
00:02:45.670 --> 00:02:49.020
Am I gonna put it in the flowers,
the grass?

43
00:02:49.020 --> 00:02:51.150
Spray my dog, whatever.

44
00:02:51.150 --> 00:02:54.090
But once it's off the end of that hose,
that's it.

45
00:02:54.090 --> 00:02:58.418
You can no longer control
it by means of the hose.

46
00:02:58.418 --> 00:03:00.608
And so that's why we say final input.

47
00:03:00.608 --> 00:03:05.170
So initial output, so
you have the stream, the genesis of it,

48
00:03:05.170 --> 00:03:11.038
it's coming through your what I'll say
magic, I'll clarify this in a second.

49
00:03:11.038 --> 00:03:14.208
And then now you're trying to decide,
where do I want to put it and

50
00:03:14.208 --> 00:03:16.750
what is the final form going to be?

51
00:03:16.750 --> 00:03:19.880
So in this case, more often than not,
you have an event.

52
00:03:21.400 --> 00:03:25.054
Then you have some kind of operator or
operators,

53
00:03:25.054 --> 00:03:28.370
which I can't wait to show this to you.

54
00:03:28.370 --> 00:03:30.904
And then a subscribe block.

55
00:03:30.904 --> 00:03:35.790
So the event or the start of
the stream is your initial output.

56
00:03:37.480 --> 00:03:39.330
The final input is your subscribe block.

57
00:03:39.330 --> 00:03:40.740
So that's no mystery there.

58
00:03:43.530 --> 00:03:49.440
In between, we have tons of
operators at our disposal to control

59
00:03:50.880 --> 00:03:54.830
what form our data's going to be, or

60
00:03:54.830 --> 00:03:59.620
what is going to come out of that stream
when it gets to its final destination.

61
00:03:59.620 --> 00:04:04.100
When I started working with observables,
because I was used to promises which

62
00:04:04.100 --> 00:04:07.966
do not have any operators,
I would get into my subscribe block.

63
00:04:07.966 --> 00:04:11.340
I'd be like, I got this thing from the
server, then I'd be looping over it and

64
00:04:11.340 --> 00:04:12.790
fiddling with it.

65
00:04:12.790 --> 00:04:17.360
And I realized, if I get to my
subscribe block, and my data is not

66
00:04:17.360 --> 00:04:21.170
in the exact shape that I want, in other
words, I can't say, take this result and

67
00:04:21.170 --> 00:04:26.860
just assign it right into a local
variable, I am not using it properly.

68
00:04:27.970 --> 00:04:30.370
Your data,
when it hits the subscribe block,

69
00:04:30.370 --> 00:04:36.660
it should not only be in the final input
but it should be in its final form.

70
00:04:36.660 --> 00:04:40.270
And so this is where these operators
come in in a really big way.

71
00:04:42.490 --> 00:04:47.575
And so, with that in mind,
when I look at an observable sequence, or

72
00:04:47.575 --> 00:04:53.560
something that's happening with an
observable; I work through it in this way.

73
00:04:54.740 --> 00:04:56.790
What's my final or my initial output?

74
00:04:56.790 --> 00:04:57.930
Where's the start of this?

75
00:04:58.980 --> 00:05:00.290
What's my final input?

76
00:05:00.290 --> 00:05:02.310
And then I work kind of in the middle and

77
00:05:02.310 --> 00:05:05.670
I figure out what's actually
happening in the stream itself.

78
00:05:06.710 --> 00:05:07.490
So let's work the system.

79
00:05:10.250 --> 00:05:14.446
Initial output,
in this case we're capturing an event.

80
00:05:14.446 --> 00:05:19.181
And we're saying create an Observable

81
00:05:19.181 --> 00:05:23.660
from the click event on this button.

82
00:05:23.660 --> 00:05:25.990
And so I have a little helper
function to kind of unwrap it so

83
00:05:25.990 --> 00:05:27.630
I can get the native element.

84
00:05:27.630 --> 00:05:32.410
But what's interesting, I didn't really
think about this until I started working

85
00:05:32.410 --> 00:05:37.372
with observables, user interactions
are the ultimate streams.

86
00:05:37.372 --> 00:05:42.715
Your DOM, your browser,
is emitting events every single,

87
00:05:42.715 --> 00:05:48.811
anytime you interact with the DOM,
you move your mouse, anything.

88
00:05:48.811 --> 00:05:52.907
User events, user interactions
it is a constant stream of data

89
00:05:52.907 --> 00:05:56.080
that you can capture and do things with.

90
00:05:56.080 --> 00:05:58.570
Even, for instance, a button,
that's not a one-off.

91
00:05:58.570 --> 00:06:00.330
Somebody can click
a button a bunch of times.

92
00:06:00.330 --> 00:06:04.640
Well, wouldn't you wanna capture
every single click on that?

93
00:06:04.640 --> 00:06:10.050
And so this is where, and we're gonna kind
of focus initially on some user elements,

94
00:06:10.050 --> 00:06:12.670
is that capturing user interactions and

95
00:06:12.670 --> 00:06:17.340
transforming them via an observable
stream, is really, really neat.

96
00:06:17.340 --> 00:06:21.940
So here, our initial output,
Observable.fromEvent.

97
00:06:21.940 --> 00:06:25.630
We're saying take this button,
and create it on the click event.

98
00:06:27.000 --> 00:06:29.810
So, I mean, it kind of looks like
an event handler, basically.

99
00:06:31.730 --> 00:06:35.140
And our final input.

100
00:06:35.140 --> 00:06:37.430
So we're just saying take this event.

101
00:06:37.430 --> 00:06:39.560
So this is an actual DOM event.

102
00:06:39.560 --> 00:06:44.090
And we're not actually doing anything,
we're just saying okay,

103
00:06:44.090 --> 00:06:47.990
when this thing happens, we're saying
this message equals Beast Mode Activated.

104
00:06:49.710 --> 00:06:54.500
But I'm going to teach you
a very valuable lesson here.

105
00:06:54.500 --> 00:07:00.000
That when life give you lemons,
map it to lemonade.

106
00:07:01.320 --> 00:07:05.784
So we're getting this event,
it's a DOM event.

107
00:07:05.784 --> 00:07:07.460
We don't care about that.

108
00:07:07.460 --> 00:07:08.160
It's not what we want.

109
00:07:09.420 --> 00:07:13.110
What we want is we want to send in
a message into our subscribe block.

110
00:07:13.110 --> 00:07:15.450
So in this case we're saying,
take this event,

111
00:07:15.450 --> 00:07:19.820
and instead, I want you to return this.

112
00:07:19.820 --> 00:07:22.110
So we're taking the event,
we're just returning a string.

113
00:07:22.110 --> 00:07:24.857
So sometimes it's as
simple as a straight swap.

114
00:07:28.444 --> 00:07:31.314
&gt;&gt; Lukas Ruebbelke: And
you can stack these operators

115
00:07:31.314 --> 00:07:34.295
to do multiple transformations.

116
00:07:34.295 --> 00:07:38.721
So this works in a very kind of pure pipe,

117
00:07:38.721 --> 00:07:43.930
functional ways is
the word I'm looking for.

118
00:07:43.930 --> 00:07:48.980
So these functional operators,
because they have no side effects,

119
00:07:48.980 --> 00:07:52.010
complete referential transparency,
is you can stack these together.

120
00:07:52.010 --> 00:07:54.308
So in this case, we're adding in a filter.

121
00:07:54.308 --> 00:07:55.970
And we're saying,

122
00:07:55.970 --> 00:08:00.070
only allow events through the stream
if the Shift key is held down.

123
00:08:01.130 --> 00:08:05.890
So we're filtering out anything
that doesn't meet our criteria.

124
00:08:05.890 --> 00:08:09.900
And once it is held down, it says, okay,
good, we'll let this event pass through.

125
00:08:09.900 --> 00:08:10.780
And then we're saying, okay,

126
00:08:10.780 --> 00:08:15.850
take the event and instead map it to
this string and pass it down the line.

127
00:08:15.850 --> 00:08:21.520
So you can think of this as almost this
super highway that only you can drive on.

128
00:08:21.520 --> 00:08:22.980
So it's completely encapsulated.

129
00:08:24.040 --> 00:08:27.735
And as you're driving down the highway,
you've got these mini

130
00:08:27.735 --> 00:08:32.459
factories along the way that's saying,
pull in, it does some transformation,

131
00:08:32.459 --> 00:08:37.196
pull out, some additional transformation,
until you get to the end of the road.

132
00:08:37.196 --> 00:08:39.887
So let's do a demonstration and

133
00:08:39.887 --> 00:08:44.580
kind of start to build on this and
see what comes of this.

134
00:08:44.580 --> 00:08:49.783
So my goal is as we type along and
do this demonstration,

135
00:08:49.783 --> 00:08:54.876
please follow along,
that we will have a sense of one,

136
00:08:54.876 --> 00:09:00.082
initial output, final input,
and then we'll start to

137
00:09:00.082 --> 00:09:05.090
stack in some operators and
see what we can make of it.

