WEBVTT

1
00:00:00.560 --> 00:00:04.520
&gt;&gt; Lukas Ruebbelke: I really do not
want to solve your next challenge for

2
00:00:04.520 --> 00:00:07.730
you, so I'm gonna create a service,
and we'll go from there.

3
00:00:09.290 --> 00:00:12.050
But it's not going to be a widget service,
it's not going to be so easy.

4
00:00:14.350 --> 00:00:19.270
One thing I do wanna mention is that
the question came up over lunch.

5
00:00:20.820 --> 00:00:27.080
Do you always put your services in
kind of a shared or common folder?

6
00:00:29.160 --> 00:00:33.470
And the answer is, that depends.

7
00:00:33.470 --> 00:00:38.050
So the reason why I think you want
to find the appropriate level of

8
00:00:38.050 --> 00:00:42.890
abstraction for
the things that you're working on.

9
00:00:42.890 --> 00:00:47.220
So if I knew for a fact that I
was in this widget's component,

10
00:00:47.220 --> 00:00:51.726
and I needed to call and
get widgets from the server.

11
00:00:51.726 --> 00:00:55.900
And this widget's collection was never,
ever,

12
00:00:55.900 --> 00:01:01.360
ever, ever, ever, ever going to exist or
need to be used outside of

13
00:01:01.360 --> 00:01:06.400
the widgets component, I would put
it at that level of abstraction.

14
00:01:07.810 --> 00:01:12.730
But, because i know that I may want
to use widgets somewhere else,

15
00:01:12.730 --> 00:01:17.030
aka the home screen or the home component,

16
00:01:17.030 --> 00:01:21.220
that it needs to be shared
across two components.

17
00:01:21.220 --> 00:01:24.260
And so, generally anything
that communicates to a server

18
00:01:25.710 --> 00:01:29.660
that I will put it in the shared folder,
just by default.

19
00:01:29.660 --> 00:01:32.980
And then what I will also do is,

20
00:01:32.980 --> 00:01:38.460
as I start to grow in complexity is,
let's say there was 20 services in here.

21
00:01:39.710 --> 00:01:40.910
In the shared folder,
I'd start to look and

22
00:01:40.910 --> 00:01:43.610
be like okay this is getting out of hand.

23
00:01:43.610 --> 00:01:47.030
We need to actually go and create yet
another level of abstraction and

24
00:01:47.030 --> 00:01:48.680
kind of start to move things around.

25
00:01:48.680 --> 00:01:52.122
So, if you actually look like a full on,
like a redux application,

26
00:01:52.122 --> 00:01:52.680
cuz a lot of times,

27
00:01:52.680 --> 00:01:56.790
you'll have your reducers in a folder,
services in a folder, you know etc.

28
00:01:56.790 --> 00:02:00.250
So there's a few ways to do this,
it's a bit art and science.

29
00:02:00.250 --> 00:02:04.300
But you want to have
a level of abstraction that

30
00:02:04.300 --> 00:02:06.440
meets the needs of consumption.

31
00:02:06.440 --> 00:02:08.650
So if more than one
component needs a service,

32
00:02:08.650 --> 00:02:11.560
well then, promote it to a shared folder.

33
00:02:12.610 --> 00:02:17.890
All right, with that said,
let's create a service

34
00:02:17.890 --> 00:02:23.983
and,
&gt;&gt; Lukas Ruebbelke: We'll

35
00:02:23.983 --> 00:02:29.099
just call this caffeine service.ts,
probably because I was thinking about

36
00:02:29.099 --> 00:02:34.056
Red Bull right now.
&gt;&gt; Lukas Ruebbelke: So

37
00:02:34.056 --> 00:02:37.680
when I create a component, Cider.
&gt;&gt; Speaker 2: Class

38
00:02:37.680 --> 00:02:38.890
&gt;&gt; Lukas Ruebbelke: Lets do it the same

39
00:02:38.890 --> 00:02:42.250
thing, so export class.

40
00:02:43.820 --> 00:02:48.890
I just love the fact, that it just knows,
you probably want to do this,

41
00:02:48.890 --> 00:02:55.219
and then from here, let's go injectable.
&gt;&gt; Lukas Ruebbelke: And

42
00:02:55.219 --> 00:02:58.530
remember, this is where you will
get burnt as I have been burnt.

43
00:02:59.750 --> 00:03:03.230
If I walked away right now and I'm like,
I'm out of here, this is done,

44
00:03:03.230 --> 00:03:08.210
I'd get into trouble because
decorators are functions.

45
00:03:08.210 --> 00:03:12.130
You have to call the function, and
so I've basically done injectable.

46
00:03:12.130 --> 00:03:14.760
And I'm like,
I've imported I'm ready to go and

47
00:03:14.760 --> 00:03:18.760
I forget to actually call
the function in the break.

48
00:03:18.760 --> 00:03:23.288
So just make sure that even though you've
done the import and you've decorated it.

49
00:03:23.288 --> 00:03:28.640
Until you actually do that function call,
nothing's going to happen.

50
00:03:28.640 --> 00:03:35.585
Okay, so I've created the service,
and let's just create an array.

51
00:03:35.585 --> 00:03:43.841
We'll go red bull,
&gt;&gt; Lukas Ruebbelke: What's

52
00:03:43.841 --> 00:03:47.417
an energy drink that people like here?
&gt;&gt; Speaker 3: Monster.

53
00:03:47.417 --> 00:03:48.035
&gt;&gt; Lukas Ruebbelke: Monster,

54
00:03:48.035 --> 00:03:48.930
I got Monster.

55
00:03:52.570 --> 00:03:54.612
What's that one I was like?
&gt;&gt; Speaker 4: Rockstar?

56
00:03:54.612 --> 00:03:55.692
&gt;&gt; Lukas Ruebbelke: Rockstar, okay,

57
00:03:55.692 --> 00:03:56.910
I think we're good.

58
00:03:58.058 --> 00:04:01.700
I wanna make like a cocaine joke here but
that might not be appropriate.

59
00:04:02.770 --> 00:04:07.130
Let's go,
&gt;&gt; Lukas Ruebbelke: All right, how's that?

60
00:04:07.130 --> 00:04:08.040
&gt;&gt; Speaker 5: How about four Loco?

61
00:04:09.460 --> 00:04:10.410
&gt;&gt; Lukas Ruebbelke: That's what I was

62
00:04:10.410 --> 00:04:14.570
trying to remember, so what is it?
&gt;&gt; Speaker 5: Four loco, number four and

63
00:04:14.570 --> 00:04:16.415
then, yeah.
&gt;&gt; Lukas Ruebbelke: Yeah, which I think

64
00:04:16.415 --> 00:04:21.135
is illegal in every state now.
&gt;&gt; Lukas Ruebbelke: Okay,

65
00:04:21.135 --> 00:04:23.694
so it's a property on my service,

66
00:04:23.694 --> 00:04:28.810
I can now, once I consume this properly,
I can bind to this.

67
00:04:28.810 --> 00:04:32.834
So I've created this service,
what's the next thing that I need to

68
00:04:32.834 --> 00:04:37.538
do?
&gt;&gt; Speaker 6: Create

69
00:04:37.538 --> 00:04:39.970
functions.
&gt;&gt; Lukas Ruebbelke: So

70
00:04:39.970 --> 00:04:45.700
I've kind of enhanced it, but
I need to consume it somewhere.

71
00:04:45.700 --> 00:04:50.160
But before I can actually consume it,
I need to expose it.

72
00:04:50.160 --> 00:04:51.256
So you're on the right track.

73
00:04:51.256 --> 00:04:54.496
So I created it, and

74
00:04:54.496 --> 00:05:00.025
now let's go into our app module,

75
00:05:00.025 --> 00:05:04.810
we'll go caffeine service.

76
00:05:04.810 --> 00:05:11.160
It picked it up and now you'll notice
here that this did a single import,

77
00:05:12.750 --> 00:05:18.850
but what we can also do is,
you'll notice this index.ts here.

78
00:05:20.470 --> 00:05:24.160
So this is a similar thing to what I was
doing with the angular material modules,

79
00:05:24.160 --> 00:05:26.870
is I'm basically creating
what's called a barrel roll.

80
00:05:26.870 --> 00:05:31.179
And so I'm saying, I'm going to create

81
00:05:31.179 --> 00:05:36.249
a single top level module
that is going to export

82
00:05:36.249 --> 00:05:41.426
everything.
&gt;&gt; Lukas Ruebbelke: And so

83
00:05:41.426 --> 00:05:49.285
now what I can do is in my app module,
&gt;&gt; Lukas Ruebbelke: And

84
00:05:49.285 --> 00:05:51.210
so this is kind of the barrel roll.

85
00:05:52.610 --> 00:05:56.014
Cuz if there's an index.ts,
it just assumes that it's kind of like

86
00:05:56.014 --> 00:05:59.390
an index.html on a web browser,
like that's kind of the default.

87
00:05:59.390 --> 00:06:04.499
And that's where it looks first, so,
kind of a node nothing happening here but,

88
00:06:04.499 --> 00:06:09.851
and so I don't have ten lines of imports,
is that I'll just create this barrel roll.

89
00:06:09.851 --> 00:06:13.901
And I will export everything into
then I can just pull everything

90
00:06:13.901 --> 00:06:16.320
in a single input statement, okay?

91
00:06:16.320 --> 00:06:19.630
So, caffeine service.

92
00:06:19.630 --> 00:06:25.460
I have created this service, expose the
service, now let's consume the service.

93
00:06:27.040 --> 00:06:27.895
Let's go with home,

94
00:06:27.895 --> 00:06:34.450
that's kind of a good place.
&gt;&gt; Lukas Ruebbelke: And, so I need

95
00:06:34.450 --> 00:06:38.880
to get this into my service, dependency
injection only into my component.

96
00:06:40.060 --> 00:06:42.190
Dependency injection to the rescue.

97
00:06:43.990 --> 00:06:52.260
So, we'll go private, caffineService,

98
00:06:52.260 --> 00:06:58.290
CaffineService, and
then I'll put a comma here.

99
00:06:59.570 --> 00:07:03.540
And so now, we're injecting it in.

100
00:07:03.540 --> 00:07:09.074
And then I can go here, and
I can say let's do sources.

101
00:07:14.287 --> 00:07:16.574
&gt;&gt; Lukas Ruebbelke: Leave it like this,

102
00:07:16.574 --> 00:07:20.610
then I could say this.sources, so

103
00:07:20.610 --> 00:07:24.916
again just dealing with properties,

104
00:07:24.916 --> 00:07:30.578
equals this.caffeineservice.sources whoa.

105
00:07:30.578 --> 00:07:34.483
And now I'm just saying,
take this property off of this, or

106
00:07:34.483 --> 00:07:39.002
the value on this property, and
assign it to this local property, and

107
00:07:39.002 --> 00:07:44.283
then from here, we can,
&gt;&gt; Lukas Ruebbelke: Let's just do an ngFor

108
00:07:44.283 --> 00:07:49.826
real quick.
&gt;&gt; Lukas Ruebbelke: Not an ngFor,

109
00:07:49.826 --> 00:07:53.143
there we go, let source of sources.

110
00:08:00.249 --> 00:08:02.490
&gt;&gt; Lukas Ruebbelke: Refresh the page,

111
00:08:02.490 --> 00:08:07.280
let's go home and there we have it.

112
00:08:07.280 --> 00:08:11.810
So the big thing here is create,
expose, consume, CEC.

113
00:08:11.810 --> 00:08:14.360
If only that was a clever word.

114
00:08:17.610 --> 00:08:20.370
So I've created the caffeine service.

115
00:08:21.600 --> 00:08:26.920
I've exposed the caffeine
service via the app module,

116
00:08:26.920 --> 00:08:29.590
and then over here I am consuming it.

117
00:08:29.590 --> 00:08:32.226
And from there you can
consume properties and

118
00:08:32.226 --> 00:08:35.580
methods just like you would anywhere else.
&gt;&gt; Speaker 7: So,

119
00:08:35.580 --> 00:08:39.390
we can alter our borders directly on the
component instead of the module, right?

120
00:08:39.390 --> 00:08:42.940
Because right now we are just
putting it on the module, and

121
00:08:42.940 --> 00:08:46.840
then everyone in the module
has access to those borders.

122
00:08:46.840 --> 00:08:50.844
But instead of them on the module we
can just put it on the component,

123
00:08:50.844 --> 00:08:54.215
which is currently using it,
given that right now we've

124
00:08:54.215 --> 00:08:55.580
mostly component.
&gt;&gt; Lukas Ruebbelke: So

125
00:08:55.580 --> 00:09:01.890
I think it has to go into the module,
in order for angular to know about it.

126
00:09:01.890 --> 00:09:05.939
Dependency injection is
not going to work unless,

127
00:09:07.130 --> 00:09:10.090
as far as I know I think.
&gt;&gt; Speaker 7: Because

128
00:09:10.090 --> 00:09:12.080
otherwise then lazy loading
of the component won't

129
00:09:12.080 --> 00:09:12.670
work, right?
&gt;&gt; Lukas Ruebbelke: Right.

130
00:09:12.670 --> 00:09:13.850
&gt;&gt; Speaker 7: Because if I'm lazy loading

131
00:09:13.850 --> 00:09:18.780
a component, then only those component
aspects would have to be loaded at once.

132
00:09:18.780 --> 00:09:22.149
So I'm just thinking about it like,
&gt;&gt; Lukas Ruebbelke: You could possibly get

133
00:09:22.149 --> 00:09:25.016
it to work without putting it on module,
and so for

134
00:09:25.016 --> 00:09:27.676
instance.
&gt;&gt; Speaker 7: Import caffeine service

135
00:09:27.676 --> 00:09:28.515
here, and

136
00:09:28.515 --> 00:09:32.110
just provide us in the component.
&gt;&gt; Lukas Ruebbelke: So

137
00:09:32.110 --> 00:09:36.790
you notice it's being imported here but,
if I go, let's just see what happens.

138
00:09:36.790 --> 00:09:39.570
And I really hope this explodes.

139
00:09:39.570 --> 00:09:43.116
I hope this is messy.
&gt;&gt; Speaker 7: When, and

140
00:09:43.116 --> 00:09:45.968
you can add it to the caffeine,
you would have to add it on

141
00:09:45.968 --> 00:09:49.358
the component as provider.
&gt;&gt; Lukas Ruebbelke: So you're saying,

142
00:09:49.358 --> 00:09:50.198
there's no provider, so

143
00:09:50.198 --> 00:09:53.170
it hasn't been registered.
&gt;&gt; Speaker 7: Yeah, but

144
00:09:53.170 --> 00:09:57.644
if you go into the component.
&gt;&gt; Lukas Ruebbelke: I think you can, but

145
00:09:57.644 --> 00:10:04.490
it's considered.
&gt;&gt; Lukas Ruebbelke: This

146
00:10:04.490 --> 00:10:06.290
is kind of anti best practice.

147
00:10:06.290 --> 00:10:07.710
So I think you can do this.

148
00:10:09.540 --> 00:10:15.199
If you really want to, let's see.
&gt;&gt; Lukas Ruebbelke: So

149
00:10:15.199 --> 00:10:20.696
it works, but you're kind of limiting your
options in terms of latency loading and

150
00:10:20.696 --> 00:10:23.060
these different things like that.

151
00:10:24.850 --> 00:10:28.150
As well as when you,
this is actually a good point.

152
00:10:28.150 --> 00:10:32.920
So this is now only
available to this component.

153
00:10:34.320 --> 00:10:38.394
And so now if I needed it into like
another service, or another component,

154
00:10:38.394 --> 00:10:39.830
I'd have to do this here.

155
00:10:39.830 --> 00:10:43.670
So it's much easier to do it at the module
level, and let the module handle it.

