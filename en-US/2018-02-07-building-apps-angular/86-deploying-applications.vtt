WEBVTT

1
00:00:00.230 --> 00:00:03.030
&gt;&gt; Lucas: Let's talk about just
deploying the application.

2
00:00:03.030 --> 00:00:05.370
We've actually seen this
quite a bit already.

3
00:00:05.370 --> 00:00:07.970
We've kind of touched on ng build.

4
00:00:07.970 --> 00:00:13.300
So, they've done this in such a way that

5
00:00:13.300 --> 00:00:19.410
they've set some defaults that, when you
run this, certain things are gonna happen.

6
00:00:19.410 --> 00:00:25.250
So, first that you would do a build is
set your target and your environment.

7
00:00:26.510 --> 00:00:30.940
So if it say, I wanna build my target for
production and my environment for prod.

8
00:00:32.540 --> 00:00:36.020
Or you could just say ng build --prod,

9
00:00:36.020 --> 00:00:39.350
it's the same thing
because of the defaults.

10
00:00:40.350 --> 00:00:44.260
You can also say target=development,
environment=dev, or just ng build.

11
00:00:44.260 --> 00:00:50.200
So by default, you're in a development
environment targeting development.

12
00:00:50.200 --> 00:00:56.050
So just kind of important to know that
they are different and this is how.

13
00:00:56.050 --> 00:01:00.340
So when you run a development build,
you are not getting aot, and

14
00:01:00.340 --> 00:01:02.240
I'll talk about that in just a minute.

15
00:01:03.930 --> 00:01:08.130
But, it is doing output-hashing for
the media.

16
00:01:08.130 --> 00:01:13.090
So, in other words, is it going to hash
it so it doesn't get cached, I believe.

17
00:01:13.090 --> 00:01:15.010
Sourcemaps are true.

18
00:01:15.010 --> 00:01:17.750
It's going to not pull out the css.

19
00:01:17.750 --> 00:01:22.370
And it's going to do named-chunks.

20
00:01:22.370 --> 00:01:27.270
But when you do prod, you do get aot
right out of the box, which is crazy.

21
00:01:27.270 --> 00:01:29.260
It will hash everything.

22
00:01:29.260 --> 00:01:30.710
No sourcemaps.

23
00:01:30.710 --> 00:01:31.890
It will extract the css.

24
00:01:31.890 --> 00:01:33.260
It will remove the named-chunks.

25
00:01:33.260 --> 00:01:35.460
In other words,
we saw when we did that one module.

26
00:01:35.460 --> 00:01:36.800
Everything was named out.

27
00:01:37.890 --> 00:01:39.560
It will actually just
remove that optimizer.

28
00:01:41.830 --> 00:01:43.700
So what is AOT?

29
00:01:43.700 --> 00:01:44.580
AOT compilation.

30
00:01:46.740 --> 00:01:51.810
Simply what this means is that
when your application is running,

31
00:01:51.810 --> 00:01:55.110
you have what's called
Just In Time compilation.

32
00:01:55.110 --> 00:02:01.490
If something happens, there's this angular
compiler, interpreting what has happened,

33
00:02:01.490 --> 00:02:07.390
figuring out what it needs to do, and it's
compiling your template in making changes.

34
00:02:07.390 --> 00:02:11.290
So out of the box,
everything that's happening just in time.

35
00:02:13.113 --> 00:02:16.858
&gt;&gt; Lucas: With AOT,
they're saying what's some small tweaks,

36
00:02:16.858 --> 00:02:21.718
we can know everything that's going
to happen in your application, and

37
00:02:21.718 --> 00:02:26.194
so we can just write it in such a way
that we do not need the compiler.

38
00:02:27.978 --> 00:02:32.724
&gt;&gt; Lucas: And so that's why when you
notice this 4 megabyte dev build down to

39
00:02:32.724 --> 00:02:37.640
a 1 megabyte prod build,
one of the reasons why that's happening is

40
00:02:37.640 --> 00:02:42.929
because when we run a production build,
we're taking out the compiler.

41
00:02:42.929 --> 00:02:46.280
Because we're able to write in such a way
that it just knows what's going to happen.

42
00:02:46.280 --> 00:02:48.290
It's not having to guess and
make assumptions.

43
00:02:48.290 --> 00:02:52.350
So we're just constraining this is what
can happen in the application, and

44
00:02:52.350 --> 00:02:54.350
running a very kind of static build.

45
00:02:54.350 --> 00:02:57.810
So I think of this in a sense
of when you are writing C# or

46
00:02:57.810 --> 00:03:00.940
something you actually compile it
down to an executable, that's it.

47
00:03:00.940 --> 00:03:03.530
Like, it's not changing,
you know what's going to happen.

48
00:03:03.530 --> 00:03:07.860
And that, it's fairly finite and
fairly static.

49
00:03:07.860 --> 00:03:12.650
And so this is what Angular is doing
is we're gonna pile this down and

50
00:03:12.650 --> 00:03:13.360
remove the compiler.

51
00:03:14.880 --> 00:03:18.540
Smaller Payload, but
it's also much faster to render,

52
00:03:18.540 --> 00:03:20.330
because it knows exactly
what's going to happen.

53
00:03:22.040 --> 00:03:23.650
&gt;&gt; Speaker 2: So, like machine code?

54
00:03:23.650 --> 00:03:26.310
&gt;&gt; Lucas: Kind of, so
it's very optimized, so

55
00:03:26.310 --> 00:03:28.930
it's a smaller payload,
it's not having to do async requests.

56
00:03:28.930 --> 00:03:30.740
But, more importantly,
it's faster rendering.

57
00:03:30.740 --> 00:03:32.802
Because it's been optimized for

58
00:03:32.802 --> 00:03:37.220
specifically what has been essentially
written to do, as opposed to,

59
00:03:37.220 --> 00:03:42.097
I need to be here in case something I
haven't thought of happening, happens.

60
00:03:42.097 --> 00:03:46.965
And so what you're doing is you're
removing kind of that, the compiler, and

61
00:03:46.965 --> 00:03:49.637
just saying, this is pretty much static.

62
00:03:49.637 --> 00:03:54.259
So for instance, the equivalent of
that would be Mark was here and

63
00:03:54.259 --> 00:03:58.070
he's like, hey I'm gonna go work out.

64
00:03:58.070 --> 00:04:02.480
The minute he left,
this became ahead of time workshop,

65
00:04:03.680 --> 00:04:05.400
because the main compiler is gone.

66
00:04:05.400 --> 00:04:10.504
And he's trusting on John and
I to get this workshop finished,

67
00:04:10.504 --> 00:04:15.716
with a sufficiently high quality and
to the best of our ability.

68
00:04:15.716 --> 00:04:19.460
[LAUGH] Boy is he gonna be in for
a surprise when he gets back, but

69
00:04:19.460 --> 00:04:21.050
that's kind of the deal.

70
00:04:21.050 --> 00:04:22.349
Mark's saying,
I know what's gonna happen here.

71
00:04:22.349 --> 00:04:24.280
There's not gonna be any surprises.

72
00:04:24.280 --> 00:04:25.090
I'm gonna work out.

73
00:04:26.140 --> 00:04:29.260
You stay here and do the workshop,
to make an analogy.

