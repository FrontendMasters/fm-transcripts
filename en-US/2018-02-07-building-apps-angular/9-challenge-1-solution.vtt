WEBVTT

1
00:00:00.300 --> 00:00:04.349
&gt;&gt; Lukas Ruebbelke: Let's just walk
through this challenge real quick and

2
00:00:04.349 --> 00:00:07.173
then we'll hop into the Angular CLI.

3
00:00:07.173 --> 00:00:09.087
So I'm just gonna walk through and

4
00:00:09.087 --> 00:00:13.047
show some of the major pieces real
quick in the sample application, and

5
00:00:13.047 --> 00:00:17.403
then I'll just kind of show real quick
property, how to do it in a component and

6
00:00:17.403 --> 00:00:22.035
a service, and then I will move on.
&gt;&gt; Lukas Ruebbelke: So,

7
00:00:24.333 --> 00:00:26.304
&gt;&gt; Lukas Ruebbelke: In our application,

8
00:00:26.304 --> 00:00:30.470
let's start at the top and
kind of work down.

9
00:00:31.720 --> 00:00:38.380
So remember, if you remember the graphic,
it was module, route, component, service.

10
00:00:38.380 --> 00:00:39.880
And so let's do it in that order.

11
00:00:41.430 --> 00:00:49.857
So, the entry point to pretty much
every application is in the index.html.

12
00:00:49.857 --> 00:00:53.837
So, let me collapse some of this.
&gt;&gt; Lukas Ruebbelke: And

13
00:00:53.837 --> 00:01:00.358
in our source folder we
have our index.html And

14
00:01:00.358 --> 00:01:06.570
you'll notice here that we have app-root.

15
00:01:06.570 --> 00:01:10.530
And so this is the component
that we're placing on the stage,

16
00:01:10.530 --> 00:01:12.570
our top level component.

17
00:01:12.570 --> 00:01:17.330
So outside of loading
a component in via a route,

18
00:01:17.330 --> 00:01:25.510
how you get a component on the page Is by
adding it to a template via a selector.

19
00:01:25.510 --> 00:01:29.800
And so in our index.html,
this is how angular

20
00:01:31.460 --> 00:01:35.590
is instantiated and
begins to live on the page.

21
00:01:37.250 --> 00:01:43.273
Now, with that said, there's kind of some
Bootstrappy stuff that needs to happen.

22
00:01:43.273 --> 00:01:49.363
And this happened in main.ts,
also in the source folder.

23
00:01:49.363 --> 00:01:53.111
And so
what we're doing here is we're using

24
00:01:53.111 --> 00:01:57.476
platformBrowserDynamic to
boostrap the module.

25
00:01:57.476 --> 00:02:03.361
And we're saying OK we're gonna spin
this up, bootstrap the app module.

26
00:02:03.361 --> 00:02:08.334
From here we could say,
well, within our ng module

27
00:02:08.334 --> 00:02:12.616
we're bootstrapping the app component and

28
00:02:12.616 --> 00:02:16.434
you can see here, remember selector,

29
00:02:16.434 --> 00:02:22.570
this is how something lives in the page,
it's app route.

30
00:02:22.570 --> 00:02:26.470
If we go back here you can see
this is how we're adding it.

31
00:02:27.640 --> 00:02:32.490
So main TS is where we're boot
strapping our main module and

32
00:02:32.490 --> 00:02:36.570
then within our main module this is where
we're boot strapping our component.

33
00:02:37.720 --> 00:02:43.012
Now if we go into app component
what I want to call out is this

34
00:02:43.012 --> 00:02:48.267
right here.
&gt;&gt; Lukas Ruebbelke: Is just for

35
00:02:48.267 --> 00:02:50.940
the most part an ES6 class.

36
00:02:50.940 --> 00:02:55.070
So I will use ES6 in TypeScript fairly

37
00:02:55.070 --> 00:03:00.620
interchangeably, but for
the most part this is an ES6 class.

38
00:03:00.620 --> 00:03:03.860
So we have properties
that we're binding to.

39
00:03:05.090 --> 00:03:09.458
We have a method here
that is doing some stuff

40
00:03:09.458 --> 00:03:14.020
and so on.

41
00:03:14.020 --> 00:03:17.770
So within here let me
hop into the templates.

42
00:03:17.770 --> 00:03:23.754
So then, this is the metadata up here,
component,

43
00:03:23.754 --> 00:03:28.378
and then if we go to template url In here,

44
00:03:28.378 --> 00:03:34.909
if you remember it was a title
property on the component.

45
00:03:34.909 --> 00:03:41.960
Over here, I am binding to this somewhere,
yes, up here.

46
00:03:43.170 --> 00:03:44.280
So it's a property.

47
00:03:44.280 --> 00:03:45.000
We're just saying,

48
00:03:45.000 --> 00:03:48.450
because it's just a string that we
wanna render, doubly curly braces.

49
00:03:50.750 --> 00:03:53.010
Now, this is the module.

50
00:03:53.010 --> 00:03:57.250
So I've kinda went from here for
the module, to the top level component.

51
00:03:57.250 --> 00:04:03.180
But, if you look here, on line 23,
there's a router outlet.

52
00:04:03.180 --> 00:04:05.960
So when we go to item's widgets
in these different things,

53
00:04:05.960 --> 00:04:08.950
this is where this component
is being inserted.

54
00:04:08.950 --> 00:04:12.870
So you'll, on your top level components,
generally have a router outlet.

55
00:04:12.870 --> 00:04:15.720
You can also have them
in child components, so

56
00:04:15.720 --> 00:04:20.650
you can have nested routes,
I'm glad they finally figured that out.

57
00:04:21.720 --> 00:04:24.190
And so in the router outlet,
what goes in here?

58
00:04:24.190 --> 00:04:25.770
So let's move now to routes.

59
00:04:27.150 --> 00:04:33.840
If we go to within our app
the app routing module, we have

60
00:04:35.470 --> 00:04:40.480
some pretty basic path
to component mapping.

61
00:04:42.520 --> 00:04:43.700
Widgets to widget component.

62
00:04:43.700 --> 00:04:46.857
So we have some animation stuff,
we'll get into that.

63
00:04:46.857 --> 00:04:49.724
And then we even have,
we're saying path, and

64
00:04:49.724 --> 00:04:55.000
we're doing some lazy loading here,
and I'll talk that on the third day.

65
00:04:55.000 --> 00:04:59.494
But really at the bottom line
is that you have a path in

66
00:04:59.494 --> 00:05:02.980
the URL that gets mapped to a component.

67
00:05:02.980 --> 00:05:05.600
And then from here,
it's just more of the same.

68
00:05:05.600 --> 00:05:10.410
So we have ItemsComponent, properties,
methods, and things are happening.

69
00:05:10.410 --> 00:05:14.300
So, if I hop back into the browser,
I'm on items.

70
00:05:15.430 --> 00:05:20.660
If we go to Widgets you'll notice that
the, up here the route changed and

71
00:05:20.660 --> 00:05:22.219
now it's loading the widgets component.

72
00:05:23.270 --> 00:05:25.600
Home, same exact thing.

73
00:05:27.020 --> 00:05:34.270
Now it's loading the home route,
home component and then from there,

74
00:05:34.270 --> 00:05:37.530
if I actually go to the home component,
this is kind of interesting.

75
00:05:39.500 --> 00:05:44.410
That I have four components on the stage.

76
00:05:44.410 --> 00:05:48.620
Item search, items list, app newsletter,
apps widgets list, and so

77
00:05:48.620 --> 00:05:51.150
I can use a component
in more than one place.

78
00:05:52.230 --> 00:05:56.600
So if we look into the browser,
we have these lists here.

79
00:05:56.600 --> 00:06:01.304
Well they also exist over here, and so
this is the beauty of having well defined

80
00:06:01.304 --> 00:06:08.498
components, is that they're reusable.
&gt;&gt; Lukas Ruebbelke: And

81
00:06:08.498 --> 00:06:12.458
so to that end let me just put
a quick property on here so

82
00:06:12.458 --> 00:06:15.280
we can just kind of see how this works.

83
00:06:16.710 --> 00:06:25.180
Let's go Message = "Holla at yer boy!" So
now this is a property.

84
00:06:26.490 --> 00:06:32.001
We can now bind to it.
&gt;&gt; Lukas Ruebbelke: Each one

85
00:06:32.001 --> 00:06:37.129
because I'm super obnoxious.
&gt;&gt; Lukas Ruebbelke: Also, you'll notice

86
00:06:37.129 --> 00:06:43.151
here, that you can see how as I started
to type, it started to give me hints.

87
00:06:43.151 --> 00:06:45.510
Try doing this in ES5.

88
00:06:45.510 --> 00:06:50.768
It kind of works in ES6 a little bit but
TypeScript,

89
00:06:50.768 --> 00:06:57.713
this is pretty much having essentially
type ahead and code hinting.

90
00:06:57.713 --> 00:07:01.180
Again Java C Sharp is like duh
we have had this for years.

91
00:07:01.180 --> 00:07:04.820
It is a java developer, it's super useful.

92
00:07:04.820 --> 00:07:07.520
I write code much faster,
and I make less mistakes.

93
00:07:07.520 --> 00:07:11.490
So being able to communicate
intentions is, I think,

94
00:07:11.490 --> 00:07:14.820
really, really handy, and
it just allows me to go faster.

95
00:07:15.830 --> 00:07:18.858
So here you can see
a little property on it,

96
00:07:18.858 --> 00:07:23.772
I can now bind to it.
&gt;&gt; Lukas Ruebbelke: Any

97
00:07:23.772 --> 00:07:27.086
questions about any of the pieces?

98
00:07:27.086 --> 00:07:32.295
Do we understand Module, route, component.

99
00:07:32.295 --> 00:07:34.650
Let me show you one other
thing just real quick.

100
00:07:36.420 --> 00:07:40.960
As you'll notice here, I need to get
items, and I need to get widgets for

101
00:07:40.960 --> 00:07:43.550
my home component to render.

102
00:07:43.550 --> 00:07:45.080
So what do I do?

103
00:07:45.080 --> 00:07:49.350
I just inject them into the constructor,
and then I can call methods on them.

104
00:07:50.660 --> 00:07:52.830
So, if I go over here,
item service, if I step in.

105
00:07:55.230 --> 00:07:58.590
Again, it's just a class
with some methods on it.

106
00:07:58.590 --> 00:08:03.550
And so, module, route, component, service.

107
00:08:04.790 --> 00:08:06.100
We kind of see how this fits together.

108
00:08:07.760 --> 00:08:11.010
What happens, is we have a module
that's kind of a very broad container.

109
00:08:12.080 --> 00:08:17.510
Routes that defines how we get to
specific pieces via components, and

110
00:08:17.510 --> 00:08:22.560
then components are just very thin layers
that the user can interact with, and

111
00:08:22.560 --> 00:08:25.170
then the business logic and
the state management, and

112
00:08:25.170 --> 00:08:28.270
the different things
happen in the services.

113
00:08:28.270 --> 00:08:32.620
So you're going very broad to
very specific with the bulk of

114
00:08:32.620 --> 00:08:36.210
your business logic,
happening in the service.

115
00:08:37.850 --> 00:08:40.980
One of the reasons is because in a service

116
00:08:42.180 --> 00:08:47.270
you can often times test these in
isolation, because they're just classes.

117
00:08:47.270 --> 00:08:50.780
When you spin up a template, or
a component with a template you have to

118
00:08:50.780 --> 00:08:55.020
satisfy that view and manage it,
Angular makes it easier, but

119
00:08:55.020 --> 00:08:59.480
having to try to test directives
in angular1.x is super hard.

120
00:08:59.480 --> 00:09:05.120
So now by having just a straight class,
especially when

121
00:09:05.120 --> 00:09:08.790
you do it with very fine-grain functions,
it's really, really easy to test.

122
00:09:09.920 --> 00:09:13.940
And the first step, I think, to writing
a good test is having good code.

