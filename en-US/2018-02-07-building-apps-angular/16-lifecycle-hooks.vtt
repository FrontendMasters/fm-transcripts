WEBVTT

1
00:00:00.330 --> 00:00:03.440
&gt;&gt; Lukas Ruebbelke: Now, I did mention
that there are things that are happening

2
00:00:03.440 --> 00:00:05.580
with the very stages of a component.

3
00:00:06.850 --> 00:00:11.497
And for instance,
&gt;&gt; Lukas Ruebbelke: An anti-pattern in

4
00:00:11.497 --> 00:00:17.470
Angular is to have complex construction
logic, or logic in the constructor.

5
00:00:19.340 --> 00:00:21.600
And this is actually
an anti-pattern across the board.

6
00:00:21.600 --> 00:00:25.780
The reason being is, how do you
call the constructor on a class?

7
00:00:25.780 --> 00:00:26.730
You don't.

8
00:00:26.730 --> 00:00:28.500
It's implicitly called.

9
00:00:28.500 --> 00:00:32.326
And so now you're basically tucking
logic into something that you can't

10
00:00:32.326 --> 00:00:33.640
explicitly call.

11
00:00:33.640 --> 00:00:36.090
It's now essentially

12
00:00:36.090 --> 00:00:38.900
coupled to this implicit method
that you can't directly call.

13
00:00:40.110 --> 00:00:45.460
In Angular specifically, is if you
are binding to something on the template

14
00:00:45.460 --> 00:00:52.340
that the parent component is supplying,
that may or may not exist.

15
00:00:52.340 --> 00:00:56.920
So what will happen is you say, okay,
I need items from my parent component.

16
00:00:57.940 --> 00:01:02.835
Well, if it's an asynchronous call,
that still may be end route, and

17
00:01:02.835 --> 00:01:05.480
so it may be a second or two.

18
00:01:05.480 --> 00:01:06.680
When is a constructor called?

19
00:01:06.680 --> 00:01:10.012
[SOUND] Immediately,
the minute you do something up,

20
00:01:10.012 --> 00:01:12.240
[SOUND] that constructor is called.

21
00:01:12.240 --> 00:01:16.937
And so you will run into a problem where
if you assume data is available via

22
00:01:16.937 --> 00:01:21.404
binding for the parent component,
and you put in your constructor,

23
00:01:21.404 --> 00:01:26.350
you're going to realize very quickly
that it may actually work a few times.

24
00:01:26.350 --> 00:01:30.580
And then you have a slow Internet
connection, and it's not there.

25
00:01:30.580 --> 00:01:34.650
So what you do is you pull that out of
the constructor, and you put it into, for

26
00:01:34.650 --> 00:01:36.790
instance, ngOnInit.

27
00:01:36.790 --> 00:01:40.890
And that's when you know safely that
the bindings have been satisfied and

28
00:01:40.890 --> 00:01:42.700
you can assume that it's there.

29
00:01:42.700 --> 00:01:44.710
You can safely operate on it.

30
00:01:44.710 --> 00:01:49.620
And so this is an example of
a lifecycle hook in action.

31
00:01:51.690 --> 00:01:56.563
So here's a list of all
the available lifecycle

32
00:01:56.563 --> 00:02:01.682
hooks.
&gt;&gt; Lukas Ruebbelke: What you will use,

33
00:02:01.682 --> 00:02:05.160
and every one of these has its utility.

34
00:02:05.160 --> 00:02:11.320
But to simplify it, these are the two
that you'll use most of the time.

35
00:02:11.320 --> 00:02:14.990
And oftentimes, if my component is for

36
00:02:14.990 --> 00:02:18.530
the most part stateless,
I won't even use ngOnDestroy.

37
00:02:18.530 --> 00:02:21.410
Cuz it's very good about
cleaning up after itself.

38
00:02:21.410 --> 00:02:25.676
But you will use ngOnInit
quite frequently.

39
00:02:25.676 --> 00:02:27.990
And so these are here.

40
00:02:27.990 --> 00:02:28.940
I wouldn't worry about them.

41
00:02:28.940 --> 00:02:30.350
The big ones, it's just, no.

42
00:02:30.350 --> 00:02:37.513
Init and destroy, it's alive, it's dying.
&gt;&gt; Lukas Ruebbelke: And

43
00:02:37.513 --> 00:02:44.473
so here.
&gt;&gt; Lukas Ruebbelke: The question

44
00:02:44.473 --> 00:02:49.880
is can ngOnInit fail too,
if you had really bad luck?

45
00:02:49.880 --> 00:02:54.350
Well, I think that depends on [LAUGH]
what do you mean by really bad luck?

46
00:02:54.350 --> 00:02:58.660
Was there an earthquake and
your computer exploded?

47
00:02:58.660 --> 00:03:00.800
Then possibly.

48
00:03:00.800 --> 00:03:05.240
In terms of referencing data,
that ngOnInit

49
00:03:05.240 --> 00:03:10.070
is not fired until ngOnChanges
is fired at least once.

50
00:03:10.070 --> 00:03:15.410
What that means is that anything you're
referencing via binding, is being called.

51
00:03:15.410 --> 00:03:17.130
And so basically you're
binding has been satisfied.

52
00:03:17.130 --> 00:03:19.841
So I don't wanna say never, and

53
00:03:19.841 --> 00:03:24.900
I don't wanna try to quantify or
say, what is bad luck?

54
00:03:24.900 --> 00:03:26.200
But as a whole,

55
00:03:26.200 --> 00:03:30.570
I would be willing to put 100 bucks
on the fact that it's going to work.

56
00:03:31.650 --> 00:03:33.240
If I'm depending on data from binding,

57
00:03:33.240 --> 00:03:38.380
it's going to exist on the ngOnInit block.
&gt;&gt; Lukas Ruebbelke: So

58
00:03:38.380 --> 00:03:44.370
you can use ngOnInit or
lifecycle hook without an interface.

59
00:03:44.370 --> 00:03:47.520
But it's considered
best practice to do so.

60
00:03:47.520 --> 00:03:52.188
The reason being is because you
are formalizing your contract with

61
00:03:52.188 --> 00:03:53.364
the component.

62
00:03:53.364 --> 00:04:01.068
And so it also tells your IDE
that this is what's happening.

63
00:04:01.068 --> 00:04:03.260
So it's kinda like putting a ring on it,
if you will.

64
00:04:03.260 --> 00:04:10.770
I'm committed to OnInit, and therefore,
I will call or satisfy this interface.

