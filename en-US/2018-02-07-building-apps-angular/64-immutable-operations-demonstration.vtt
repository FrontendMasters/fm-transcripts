WEBVTT

1
00:00:00.230 --> 00:00:01.800
&gt;&gt; Lucas Ruebbelke: This
is a pretty quick module.

2
00:00:01.800 --> 00:00:07.740
It's just a few slides, but
I wanna put it out there because it is

3
00:00:07.740 --> 00:00:13.690
incredibly valuable for moving from this
mutable mindset to an immutable mindset.

4
00:00:15.250 --> 00:00:18.555
And interestingly enough,
once you make that switch mentally,

5
00:00:18.555 --> 00:00:21.921
it's just a matter of switching
really how you approach these, or

6
00:00:21.921 --> 00:00:27.408
kind of the operators that you use.
&gt;&gt; Lucas Ruebbelke: So

7
00:00:27.408 --> 00:00:33.710
when we look at this code right here,
we're using state dot push.

8
00:00:35.580 --> 00:00:36.320
So what is happening?

9
00:00:36.320 --> 00:00:40.970
It's taking the state collection, if you
will, and it's pushing something into it,

10
00:00:40.970 --> 00:00:42.500
so it's mutating it.

11
00:00:42.500 --> 00:00:49.410
This is a mutable operation.
&gt;&gt; Lucas Ruebbelke: Here's another one.

12
00:00:50.634 --> 00:00:53.140
Let's say you have a collection, and

13
00:00:53.140 --> 00:00:55.310
you wanna update a specific
item in the collection.

14
00:00:56.740 --> 00:01:00.840
Well, you're basically looping
over the state collection,

15
00:01:00.840 --> 00:01:04.660
finding the thing that you want, chopping
out the old one, putting the new one in,

16
00:01:04.660 --> 00:01:09.790
mutable.
&gt;&gt; Lucas Ruebbelke: Same thing for delete.

17
00:01:11.150 --> 00:01:12.010
Looping over the collection,

18
00:01:12.010 --> 00:01:16.800
finding the thing that you want out,
deleting it from the collection, mutable.

19
00:01:16.800 --> 00:01:20.340
And so,
these are things that I've done for years.

20
00:01:20.340 --> 00:01:23.220
Things like array.push, that's common.

21
00:01:23.220 --> 00:01:30.078
I've probably done this 10,000 times.
&gt;&gt; Lucas Ruebbelke: The problem is,

22
00:01:30.078 --> 00:01:35.680
these things mutate the collection or
the object that you're working on.

23
00:01:35.680 --> 00:01:40.138
And so, the question is,
how do we move from mutable to immutable?

24
00:01:40.138 --> 00:01:48.520
So there is a really handy
method on object called freeze.

25
00:01:48.520 --> 00:01:52.900
And it's interesting, a lot of people
do not talk about it very often,

26
00:01:52.900 --> 00:01:54.098
but it's pretty nice.

27
00:01:54.098 --> 00:01:56.220
And it's object.freeze.

28
00:01:56.220 --> 00:01:59.190
And so essentially what it does
is it freezes an object and

29
00:01:59.190 --> 00:02:04.600
it prevents stuff from being changed.

30
00:02:04.600 --> 00:02:07.400
We can add properties to it, take it
away or change existing properties.

31
00:02:08.940 --> 00:02:13.848
So this is really handy,
this is if you use in GRX what they'll do,

32
00:02:13.848 --> 00:02:18.920
is actually if you are in development
mode, is they will freeze the store,

33
00:02:18.920 --> 00:02:21.240
so everything that you
do has to be mutable.

34
00:02:21.240 --> 00:02:25.360
So this is just kind of, I would say,
training wheels, if you will.

35
00:02:26.840 --> 00:02:29.620
You can use this is a development
context of I'm doing these things.

36
00:02:29.620 --> 00:02:35.220
And it will catch you,
you're mutating the thing, stop doing it.

37
00:02:36.280 --> 00:02:40.960
All right, so let's look over create,
update and delete.

38
00:02:40.960 --> 00:02:43.940
How do we go from mutable to immutable?

39
00:02:46.570 --> 00:02:52.750
So kind of a hint to this is,
if you go look into MDN,

40
00:02:54.690 --> 00:03:00.210
that its pretty clear,
kind of the marker here is,

41
00:03:00.210 --> 00:03:04.870
instead returns a new something and
that's what you want.

42
00:03:04.870 --> 00:03:07.540
I need to do this thing,
give me a new version of it.

43
00:03:09.130 --> 00:03:17.070
So in the case of dot push,
instead what you do is use concat.

44
00:03:18.280 --> 00:03:22.112
And so what it does is it
take in existing collection,

45
00:03:22.112 --> 00:03:26.380
the item you wanna add and
returns them as a new collection.

46
00:03:26.380 --> 00:03:29.981
And so essentially it used to merge two or

47
00:03:29.981 --> 00:03:34.100
more arrays, but
it does not change the existing arrays.

48
00:03:34.100 --> 00:03:38.630
Super easy, so now what you need to know
is that instead of acting on something,

49
00:03:38.630 --> 00:03:42.010
you're actually getting something back
which then you make an assignment.

50
00:03:43.410 --> 00:03:48.300
So, here, kind of shorthand to this,
is you can use the spread array,

51
00:03:48.300 --> 00:03:53.870
which will expand that,
whatever that is into a new array and

52
00:03:53.870 --> 00:03:56.310
then add this last piece to it.

53
00:03:56.310 --> 00:03:58.834
So this is kind of shorthand for

54
00:03:58.834 --> 00:04:04.560
this is spread operator and
we're dropping in the payload.

55
00:04:04.560 --> 00:04:10.044
So with that said,
instead of pushing something into array,

56
00:04:10.044 --> 00:04:14.267
merge the two arrays together and
get a new one.

57
00:04:14.267 --> 00:04:22.121
Update, how do you update
an item in a collection?

58
00:04:22.121 --> 00:04:25.360
Well, first step is with map.

59
00:04:25.360 --> 00:04:28.640
So if we look at the MDN,
the map method creates a new array.

60
00:04:28.640 --> 00:04:31.850
And so what it does is it loops over,

61
00:04:31.850 --> 00:04:35.490
performs some operation on a collection,
and then just returns a new collection.

62
00:04:36.880 --> 00:04:40.170
So that's step one is
we're getting a new array.

63
00:04:40.170 --> 00:04:45.925
We also use object.assign to copy all the
innumerable properties off of an object,

64
00:04:45.925 --> 00:04:47.950
of one or more objects.

65
00:04:47.950 --> 00:04:53.670
And then, low and
behold it will return the target object.

66
00:04:53.670 --> 00:04:59.390
So essentially what we're doing is, we're
saying go find the thing you wanna update,

67
00:05:00.520 --> 00:05:05.210
use object.assign to create a new version
of this, and then return a brand new array

68
00:05:06.570 --> 00:05:11.680
that has this new object in it, very easy.

69
00:05:11.680 --> 00:05:13.340
And last but not least, delete.

70
00:05:15.380 --> 00:05:17.910
So, the filter method, let's see it here,

71
00:05:17.910 --> 00:05:22.680
creates a new array with all
the elements that pass the test.

72
00:05:23.870 --> 00:05:25.070
So if you wanna filter something out,

73
00:05:26.180 --> 00:05:30.350
well you don't have to delete it,
just loop over and just say, this is

74
00:05:30.350 --> 00:05:35.344
the criteria in which this thing will
get back into the new collection, done.

75
00:05:35.344 --> 00:05:42.620
Concat, map, filter, and object.assign.

76
00:05:42.620 --> 00:05:46.980
That is how you move from
mutable to immutable.

77
00:05:49.360 --> 00:05:55.059
All right, so with that said,
let's just take a quick five minute break.

78
00:05:56.190 --> 00:05:57.480
Shake our legs out.

79
00:05:57.480 --> 00:06:00.571
And we will come back and

80
00:06:00.571 --> 00:06:05.435
talk about reactive forms, yes.
&gt;&gt; Student 1: Does

81
00:06:05.435 --> 00:06:08.720
immutability have something to do
with the performance of the app?

82
00:06:08.720 --> 00:06:12.090
Because you are saying that
an object is immutable,

83
00:06:12.090 --> 00:06:15.090
then you are assigning a new object.

84
00:06:15.090 --> 00:06:18.594
Then you edit or
copy a value into an object.

85
00:06:18.594 --> 00:06:19.850
&gt;&gt; Lucas Ruebbelke: Mm-hm.

86
00:06:19.850 --> 00:06:21.070
&gt;&gt; Student 1: Actually,

87
00:06:21.070 --> 00:06:23.300
the computer is also doing the same thing,
right?

88
00:06:23.300 --> 00:06:29.070
Because you would have to assign,
you are not overwriting an existing value.

89
00:06:29.070 --> 00:06:30.930
I mean depending upon the language and
the permutation, but

90
00:06:30.930 --> 00:06:32.410
you're not overwriting an existing value.

91
00:06:32.410 --> 00:06:34.220
You are just assigning new memory and then

92
00:06:35.350 --> 00:06:40.726
editing.
&gt;&gt; Lucas Ruebbelke: I would say that,

93
00:06:40.726 --> 00:06:45.710
and I'm not a computer scientist,
I just play one on Frontend Masters.

94
00:06:45.710 --> 00:06:52.290
Is that you have multiple objects,
or a single object with multiple

95
00:06:52.290 --> 00:06:57.260
pointers towards it, so if the pointers
are still there, that's one concern.

96
00:06:58.440 --> 00:07:04.960
And so for instance, so
you have the JVM, what's the other one?

97
00:07:04.960 --> 00:07:08.010
What's dot net?
&gt;&gt; Student 1: CLR.

98
00:07:08.010 --> 00:07:10.180
&gt;&gt; Lucas Ruebbelke: CLR, and so

99
00:07:10.180 --> 00:07:15.940
they're trying to optimize it, and I think
they do probably a pretty good job, but

100
00:07:15.940 --> 00:07:24.170
at the same time is if you
need to undo something, or

101
00:07:24.170 --> 00:07:29.800
let's say having to go through and process
like what has changed and compare it.

102
00:07:29.800 --> 00:07:31.290
So, first is in the case
of dirty checking.

103
00:07:32.470 --> 00:07:36.330
It's much easier to say this
thing is clearly different

104
00:07:36.330 --> 00:07:37.740
because the pointers have changed.
&gt;&gt; Student 1: Okay.

105
00:07:38.930 --> 00:07:39.880
&gt;&gt; Lucas Ruebbelke: In other words saying,

106
00:07:39.880 --> 00:07:41.680
okay, has this changed or not?

107
00:07:41.680 --> 00:07:42.880
You're just comparing the pointers.

108
00:07:42.880 --> 00:07:44.800
If it is, you just swap them.

109
00:07:44.800 --> 00:07:51.260
But and I think one of the problems
with AngularJS is in their digest cycle,

110
00:07:51.260 --> 00:07:54.470
what they were doing is looping through
and comparing every single property.

111
00:07:54.470 --> 00:07:56.630
And that took a lot of time.

112
00:07:57.820 --> 00:07:59.310
So instead of doing a deep comparison,

113
00:08:00.350 --> 00:08:03.650
it's much faster to say we know this has
changed cuz the pointer's different,

114
00:08:03.650 --> 00:08:08.552
and let's just swap it.
&gt;&gt; Lucas Ruebbelke: Does that

115
00:08:08.552 --> 00:08:09.750
make sense?
&gt;&gt; Student 1: Yeah,

116
00:08:09.750 --> 00:08:11.150
yeah.
&gt;&gt; Lucas Ruebbelke: And so

117
00:08:11.150 --> 00:08:13.860
it's kind of counter-intuitive of, wait
a second, I'm just returning a new one?

118
00:08:13.860 --> 00:08:16.939
Isn't that,
&gt;&gt; Lucas Ruebbelke: You're just getting

119
00:08:16.939 --> 00:08:21.278
this new thing, and I think people kinda
make this mental thing that would be,

120
00:08:21.278 --> 00:08:24.675
I take my car in to get a car wash and
they just give me a new car.

121
00:08:24.675 --> 00:08:31.948
And it's not quite how it works is that,
once computers are very efficient.

122
00:08:31.948 --> 00:08:35.165
But the fact is, we're not having
to go through and take two cars and

123
00:08:35.165 --> 00:08:39.173
compare them piece by piece by piece, and
saying, is anything changed in this car,

124
00:08:39.173 --> 00:08:41.333
because if it has,
I'm getting the new one.

125
00:08:41.333 --> 00:08:43.633
And that's kinda the big difference.

