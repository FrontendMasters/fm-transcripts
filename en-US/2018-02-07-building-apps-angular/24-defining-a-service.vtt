WEBVTT

1
00:00:00.170 --> 00:00:01.610
&gt;&gt; Lukas Ruebbelke: So
we've talked about components,

2
00:00:01.610 --> 00:00:05.580
we've talked about templates,
now we're going to talk about services.

3
00:00:05.580 --> 00:00:11.080
Now before I get into services, let's just
take a moment and talk about components.

4
00:00:12.970 --> 00:00:16.110
So components consist of what?

5
00:00:16.110 --> 00:00:19.680
A component class and an html template.

6
00:00:21.580 --> 00:00:24.740
A component class is that and metadata.

7
00:00:24.740 --> 00:00:29.560
So a component truly is an ES6
class with some metadata on

8
00:00:29.560 --> 00:00:34.120
top to tell Angular hey, this is a thing,
I want you to know about it.

9
00:00:35.710 --> 00:00:42.300
So if we understand that and
we understand the shape of ES6 classes and

10
00:00:42.300 --> 00:00:46.640
if we put a property on the class,
it's available to the template,

11
00:00:46.640 --> 00:00:50.710
if we put a method on the class,
it's available to the template.

12
00:00:50.710 --> 00:00:55.926
And that very basic shape of we
have a class with properties and

13
00:00:55.926 --> 00:01:00.959
methods, making a transition
to services is really easy.

14
00:01:03.133 --> 00:01:05.350
&gt;&gt; Lukas Ruebbelke: A surprise!

15
00:01:05.350 --> 00:01:07.780
It's just a class.

16
00:01:07.780 --> 00:01:12.560
This to me is one of the biggest punch
lines and it's a big ah-ha moment.

17
00:01:13.750 --> 00:01:17.920
When you are working with Angular 2 and
above.

18
00:01:19.490 --> 00:01:24.544
Everything follows the same basic shape.

19
00:01:24.544 --> 00:01:27.459
So the footprint of Angular is now very,

20
00:01:27.459 --> 00:01:32.971
very small because it's just letting
ES6 and tight script do all the work.

21
00:01:32.971 --> 00:01:37.441
So we've seen with our component,

22
00:01:37.441 --> 00:01:42.362
it's just a class with some metadata.

23
00:01:44.339 --> 00:01:48.271
&gt;&gt; Lukas Ruebbelke: Service, if you can
believe me, same exact thing, class,

24
00:01:48.271 --> 00:01:49.050
metadata.

25
00:01:50.090 --> 00:01:52.790
If we were doing a pipe, class, metadata.

26
00:01:52.790 --> 00:01:58.700
Directive, class, metadata and
on and on and on.

27
00:01:58.700 --> 00:02:06.210
So we can reduce the majority
of Angular to this simple

28
00:02:06.210 --> 00:02:12.230
basic shape, class, metadata.

29
00:02:12.230 --> 00:02:15.280
And more often than not the class
has nothing to do with Angular,

30
00:02:15.280 --> 00:02:16.450
it's just the metadata

31
00:02:17.650 --> 00:02:22.160
that is telling you that this is how this
is going to live in the application.

32
00:02:23.830 --> 00:02:29.330
So to that end, it's really quite simple.

33
00:02:29.330 --> 00:02:34.470
We define the service, we expose
the service and we consume the service.

34
00:02:34.470 --> 00:02:37.780
So let's talk about defining a service.

35
00:02:39.790 --> 00:02:43.938
Now what we have here is class.

36
00:02:43.938 --> 00:02:45.098
Yay!

37
00:02:45.098 --> 00:02:52.240
And, so export class ItemsService,
we have some methods, does some stuff.

38
00:02:53.258 --> 00:02:58.058
Fairly fine grain,
you can imagine here that load, save,

39
00:02:58.058 --> 00:03:03.346
create, update, delete,
we're kind of walking around crud.

40
00:03:03.346 --> 00:03:09.651
More so,
this is where your rest API calls go.

41
00:03:09.651 --> 00:03:13.926
And some very fine grain specific methods,

42
00:03:13.926 --> 00:03:20.971
each one of them do one thing that now
that we have a property on the class,

43
00:03:20.971 --> 00:03:26.421
it's now available for
anything that is consuming it.

44
00:03:26.421 --> 00:03:32.343
But when it comes to defining a class,
we are defining a service

45
00:03:32.343 --> 00:03:38.180
is just a class with this little
bit of metadata right up here.

46
00:03:39.610 --> 00:03:44.380
And so technically, and
I don't wanna get in to this, past culprit

47
00:03:44.380 --> 00:03:48.370
actually explained to me one time like,
why you need it, and it has to do with how

48
00:03:48.370 --> 00:03:53.440
the metadata is generated and there's
this one weird case where it will break.

49
00:03:53.440 --> 00:03:55.390
And so, I pretty much said whatever,

50
00:03:55.390 --> 00:03:58.750
it's the smallest piece of
metadata that there is.

51
00:03:59.760 --> 00:04:01.220
And so, like, just put it on there.

52
00:04:01.220 --> 00:04:06.470
And it just ensures that the correct, that
it's wired up correctly via the metadata.

53
00:04:08.450 --> 00:04:10.310
So class, properties, methods.

54
00:04:12.570 --> 00:04:18.039
You've created a class or service, which
really looks quite a bit like a component.

55
00:04:20.914 --> 00:04:22.380
&gt;&gt; Lukas Ruebbelke: From there.

56
00:04:22.380 --> 00:04:23.900
Well, we know how to register a component.

57
00:04:25.430 --> 00:04:28.723
We need to do the same
thing with a service.

58
00:04:28.723 --> 00:04:32.960
The difference is that instead
of going in the declarations,

59
00:04:34.140 --> 00:04:37.199
is it goes in providers.

60
00:04:38.450 --> 00:04:43.670
So you create the class,
expose the class via the module,

61
00:04:44.690 --> 00:04:46.300
and then you can consume it.

62
00:04:46.300 --> 00:04:52.140
Would anybody like to take a guess of how
you consume a service in a component?

63
00:04:52.140 --> 00:04:53.300
&gt;&gt; Speaker 2: Pens the injection.

64
00:04:53.300 --> 00:04:54.070
&gt;&gt; Lukas Ruebbelke: Pens the injection.

65
00:04:54.070 --> 00:04:54.850
Via?

66
00:04:54.850 --> 00:04:55.540
&gt;&gt; Speaker 2: Construct.

67
00:04:55.540 --> 00:04:56.040
&gt;&gt; Lukas Ruebbelke: Constructor's time.

68
00:05:00.605 --> 00:05:02.066
&gt;&gt; Lukas Ruebbelke: So
what's awesome about this,

69
00:05:02.066 --> 00:05:05.581
is I know at the morning when I was going
over kind of these big picture things,

70
00:05:05.581 --> 00:05:08.260
it was like there's so much information.

71
00:05:08.260 --> 00:05:12.240
Even just for me to say it and articulate
it, but as we start to expand it out.

72
00:05:13.500 --> 00:05:14.690
Things start to fall into place and

73
00:05:14.690 --> 00:05:17.470
you realize I'm just doing
the same thing over and over.

74
00:05:18.510 --> 00:05:23.250
And so, this is how you provide a service

75
00:05:24.670 --> 00:05:30.430
to a component and/or another
service that needs it.

76
00:05:30.430 --> 00:05:34.630
As a parameter and a constructor,
and then using public or private.

77
00:05:34.630 --> 00:05:39.350
Generally it's private,
that this under the hood

78
00:05:39.350 --> 00:05:43.540
does constructor assignment and makes
it available for the rest of the class.

79
00:05:45.380 --> 00:05:50.250
&gt;&gt; Speaker 3: Would you ever have more
then one service in the constructor?

80
00:05:50.250 --> 00:05:50.750
&gt;&gt; Lukas Ruebbelke: Yes.

81
00:05:50.750 --> 00:05:52.100
&gt;&gt; Speaker 3: Okay.

82
00:05:52.100 --> 00:05:54.910
&gt;&gt; Lukas Ruebbelke: So for instance, so

83
00:05:54.910 --> 00:05:59.810
what do you think that would look like?

84
00:06:03.870 --> 00:06:10.190
If one dependency is one parameter,
two dependencies would be?

85
00:06:10.190 --> 00:06:12.439
&gt;&gt; Speaker 3: Two parameters
&gt;&gt; Lukas Ruebbelke: Woo!

86
00:06:19.444 --> 00:06:21.080
&gt;&gt; Lukas Ruebbelke: That's right,
I'm gonna start bridge.

87
00:06:21.080 --> 00:06:22.590
If I was on master,

88
00:06:22.590 --> 00:06:27.170
I'm pulling in items in widgets
like would literary look like here.

89
00:06:28.380 --> 00:06:30.540
In general, what I'll do at that
point is I'll break it to a new line.

90
00:06:30.540 --> 00:06:31.780
&gt;&gt; Speaker 3: Right.

91
00:06:31.780 --> 00:06:33.090
&gt;&gt; Lukas Ruebbelke: And
you just, you do it that way.

92
00:06:33.090 --> 00:06:36.150
So let me, I'm gonna deviate just for
one second.

93
00:06:36.150 --> 00:06:40.821
I think, possibly if you know
from classical languages,

94
00:06:40.821 --> 00:06:43.310
this maybe make a lot of sense.

95
00:06:43.310 --> 00:06:47.737
At the same time I wanna be cognizant
of the fact there are JavaScript

96
00:06:47.737 --> 00:06:51.401
developers that have never
done a classical language.

97
00:06:51.401 --> 00:06:57.608
Believe it or not, I learned my first
programming language was ActionScript,

98
00:06:57.608 --> 00:07:03.350
which is a really, if you've done Flash,
it's similar to JavaScript,

99
00:07:03.350 --> 00:07:07.180
but prototypical change, prototype based.

100
00:07:07.180 --> 00:07:08.710
Now try learning OP.

101
00:07:10.270 --> 00:07:14.230
But on that, it's really hard.

102
00:07:14.230 --> 00:07:15.949
And so, I had to actually go do Java, and

103
00:07:15.949 --> 00:07:18.442
then come back for
me to actually wrap my mind around that.

104
00:07:18.442 --> 00:07:23.631
So what I wanna do real quick is just
take a second to show what is happening

105
00:07:23.631 --> 00:07:28.496
with constructor assignment,
cuz I don't wanna gloss over this.

106
00:07:28.496 --> 00:07:32.035
So I'm going to TypeScriptlenleng.org and

107
00:07:32.035 --> 00:07:36.781
if you go over here on the playground
you can kind of start to,

108
00:07:36.781 --> 00:07:42.088
I think we'll give you somebody
actually write some type script and

109
00:07:42.088 --> 00:07:45.098
then to generate it into ES5 for you.

110
00:07:45.098 --> 00:07:49.912
And so now, you'll notice

111
00:07:49.912 --> 00:07:54.308
that message is they're

112
00:07:54.308 --> 00:07:59.958
generating this on the ES5 is,

113
00:07:59.958 --> 00:08:05.470
nothing has happened to it.

114
00:08:05.470 --> 00:08:08.041
But let me just go like this.

115
00:08:10.836 --> 00:08:15.557
&gt;&gt; Lukas Ruebbelke: And so,
if I wanted this message parameter to

116
00:08:15.557 --> 00:08:18.050
exist outside of this.

117
00:08:18.050 --> 00:08:24.493
So let me just go test,
&gt;&gt; Lukas Ruebbelke: Let

118
00:08:24.493 --> 00:08:25.586
me just delete this.

119
00:08:25.586 --> 00:08:31.430
So now, I'm sending this in, if you
remember, ES5 is scoped to function.

120
00:08:31.430 --> 00:08:32.630
So it's function block scope.

121
00:08:34.210 --> 00:08:37.360
The scope exists around the function.

122
00:08:37.360 --> 00:08:39.420
So once you put something into a function,

123
00:08:39.420 --> 00:08:43.920
then that is the lexical
scope that it's assigned to.

124
00:08:43.920 --> 00:08:45.930
Cal Simpson has some amazing courses here.

125
00:08:45.930 --> 00:08:48.530
I recommend checking those out.

126
00:08:48.530 --> 00:08:51.970
He is definitely going to say this
much better than I ever could.

127
00:08:51.970 --> 00:08:55.820
So we have this message property,
we're sending in, and

128
00:08:55.820 --> 00:09:00.080
I want to reference it out here.

129
00:09:00.080 --> 00:09:04.519
So I wanna say, this.message = test.

130
00:09:06.673 --> 00:09:10.273
&gt;&gt; Lukas Ruebbelke: Well, you can see
here, it's saying, we can't do that,

131
00:09:10.273 --> 00:09:11.500
it doesn't exist.

132
00:09:12.660 --> 00:09:15.036
So in order for this to work,

133
00:09:15.036 --> 00:09:19.795
what I have to do is I have
to go this.message = message.

134
00:09:22.638 --> 00:09:25.372
&gt;&gt; Lukas Ruebbelke: But then, also what
I have to do because it's TypeScript,

135
00:09:28.351 --> 00:09:29.730
&gt;&gt; Lukas Ruebbelke: Like this.

136
00:09:29.730 --> 00:09:31.890
So if I was going to do this by hand,

137
00:09:31.890 --> 00:09:36.370
you can see in kind of this
constructor this is saying message.

138
00:09:38.230 --> 00:09:40.480
The perimeter is assigned
to a local member of it.

139
00:09:40.480 --> 00:09:44.270
And so,
this is what is happening under the hood.

140
00:09:44.270 --> 00:09:51.850
So I can actually reference this, if I
want to reference this thing outside of it

141
00:09:51.850 --> 00:09:56.660
or rather this value, I need to assign it
to something that's local to that class.

142
00:09:56.660 --> 00:10:01.270
Now what I can do for
shorthand is, check this out,

143
00:10:05.760 --> 00:10:12.020
when I go like this TypeScript
under the hood is saying,

144
00:10:12.020 --> 00:10:17.000
because this is a private member
we're going to go ahead and

145
00:10:17.000 --> 00:10:18.800
do this assignment automatically for you.

146
00:10:20.020 --> 00:10:21.440
And so, this is what is happening.

147
00:10:22.780 --> 00:10:27.370
And so, when we want to inject,
let me do another one.

148
00:10:29.222 --> 00:10:33.870
&gt;&gt; Lukas Ruebbelke: And let's go
broadcast, cuz I have no idea why.

149
00:10:33.870 --> 00:10:35.483
But there's this string.

150
00:10:39.411 --> 00:10:42.157
&gt;&gt; Lukas Ruebbelke: Same exact thing,
framers coming in,

151
00:10:42.157 --> 00:10:44.940
it's assigning it to a local member.

152
00:10:44.940 --> 00:10:48.730
So that it can exist and we can
reference it outside of the function.

153
00:10:50.550 --> 00:10:54.110
So this is why when we're doing
Angular Dependency Injection,

154
00:10:55.180 --> 00:11:00.110
we are using this public or
private modifier, this access modifier.

155
00:11:00.110 --> 00:11:05.940
Because under the hood,
&gt;&gt; Lukas Ruebbelke: I just copy this.

156
00:11:07.260 --> 00:11:08.275
Let's see if this works.

157
00:11:13.012 --> 00:11:14.350
&gt;&gt; Lukas Ruebbelke: This is
what's actually happening.

158
00:11:16.540 --> 00:11:19.890
But the minute I take this
off it's just a parameter.

159
00:11:19.890 --> 00:11:24.090
The minute I put this on,
it's a structure assignment.

160
00:11:24.090 --> 00:11:28.780
And so, if you are actually doing ES6

161
00:11:30.710 --> 00:11:34.138
you would have to do this in
the constructor, by hand.

162
00:11:34.138 --> 00:11:41.030
I love it when it's, you're gonna do
this anyway, let's just do it for you.

163
00:11:41.030 --> 00:11:43.200
And that's exactly what's happening.

164
00:11:43.200 --> 00:11:48.100
So now, back to this.

165
00:11:49.650 --> 00:11:52.050
&gt;&gt; Speaker 4: Is one of
those a best practice like,

166
00:11:52.050 --> 00:11:59.090
is it better to do the private method or
is it to kinda do the long end version?

167
00:11:59.090 --> 00:12:04.360
&gt;&gt; Lukas Ruebbelke: So
private is, in Angular,

168
00:12:04.360 --> 00:12:09.590
using constructor assignment is best
practice, so that's public or private.

169
00:12:10.790 --> 00:12:16.271
It's considered best practice to use
private, because rarely are you going

170
00:12:16.271 --> 00:12:21.510
to need to expose this as a public
member for consumption somewhere else.

171
00:12:21.510 --> 00:12:25.233
I mean, there may be,
I've seen it a few weird, odd times,

172
00:12:25.233 --> 00:12:29.833
especially with NTRX that you might
expose a store or something or rather,

173
00:12:29.833 --> 00:12:33.134
the stores that you can
broadcast from the template.

174
00:12:33.134 --> 00:12:39.177
But in my home component,
I would never do, I would never say like,

175
00:12:39.177 --> 00:12:43.216
okay, this'll actually give us a good one.

176
00:12:43.216 --> 00:12:48.810
Click, itemService.load or

177
00:12:48.810 --> 00:12:52.900
something like that.

178
00:12:54.210 --> 00:12:59.140
Because what you're doing is you're
breaking kind of the log demeter is that

179
00:12:59.140 --> 00:13:03.540
an object should only be
able to go one degree

180
00:13:05.540 --> 00:13:08.080
to its child object or parent.

181
00:13:08.080 --> 00:13:10.690
So you don't actually wanna reach
two degrees out of an object.

182
00:13:10.690 --> 00:13:11.620
&gt;&gt; Speaker 4: Sure.

183
00:13:11.620 --> 00:13:15.010
&gt;&gt; Lukas Ruebbelke: And so, this is why,
also when you do it like this,

184
00:13:15.010 --> 00:13:22.350
you're now coupling this component to,
or rather this template to this service.

185
00:13:23.750 --> 00:13:26.020
And so, this is why you make it private.

186
00:13:26.020 --> 00:13:31.240
It's cuz your component
doesn't need to know or

187
00:13:31.240 --> 00:13:33.920
rather, the template doesn't need to know
about the underlying implementation.

188
00:13:33.920 --> 00:13:35.750
So you wanna keep those nice and clean.

189
00:13:35.750 --> 00:13:39.023
So that's why it's considered
best practice to one,

190
00:13:39.023 --> 00:13:42.307
use constructor assignment,
because it's easier.

191
00:13:42.307 --> 00:13:45.447
It's actually easier even to read, because
you just kinda know what's happening,

192
00:13:45.447 --> 00:13:46.373
once you understand it.

193
00:13:46.373 --> 00:13:51.043
But also, that it,
you set it to private and

194
00:13:51.043 --> 00:13:59.240
it kind of implies that this is not
going to be seen outside of this class.

195
00:13:59.240 --> 00:14:04.000
Now, the caveat to that is there is no
concept of public and private in ES5.

196
00:14:05.010 --> 00:14:09.100
So this is only enforced at run time or
rather, compile time.

197
00:14:09.100 --> 00:14:12.300
At run time, because it's ES5,
all bets are off.

198
00:14:12.300 --> 00:14:16.252
And so, there's ways to kind of,
if somebody really wanted to break it and

199
00:14:16.252 --> 00:14:19.596
really hit that private member,
they could find a way to do it.

200
00:14:19.596 --> 00:14:23.058
But this is merely to communicate intent.

201
00:14:23.058 --> 00:14:27.645
And if I tried to access it while it's
compiling it, I would be like, nope,

202
00:14:27.645 --> 00:14:28.660
don't do that.

