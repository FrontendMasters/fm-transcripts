WEBVTT

1
00:00:00.110 --> 00:00:02.769
&gt;&gt; Lucas Ruebbelke: Let's actually
look at the application real quick and

2
00:00:02.769 --> 00:00:03.877
just see where we are.

3
00:00:03.877 --> 00:00:08.617
So if we go to Items, you can see here,
like when you select something,

4
00:00:08.617 --> 00:00:10.752
it actually goes into the form.

5
00:00:10.752 --> 00:00:15.002
Well, currently, as it stands, on Widgets,

6
00:00:15.002 --> 00:00:20.013
we're just dumping the selected
widget into the page.

7
00:00:20.013 --> 00:00:22.990
So we're just saying, this is what it is,
and we're just dumping it in.

8
00:00:22.990 --> 00:00:28.551
So our goal for the next module is
to talk about template-driven forms,

9
00:00:28.551 --> 00:00:33.656
but the idea is to take this module or
this selected widget object,

10
00:00:33.656 --> 00:00:37.044
and actually push it
into a form on the page.

11
00:00:37.044 --> 00:00:41.994
And so with any application,
obviously you have to accept user input.

12
00:00:41.994 --> 00:00:45.269
So especially with master detail views,
a form is kind of mandatory.

13
00:00:45.269 --> 00:00:48.005
So we're gonna start with
template-driven forms,

14
00:00:48.005 --> 00:00:50.200
which is kind of how we
did it in AngularJS.

15
00:00:50.200 --> 00:00:54.070
And I think the simplest version for
simple forms, totally appropriate.

16
00:00:54.070 --> 00:00:57.157
And then later today we'll
talk about reactive forms.

17
00:00:57.157 --> 00:01:03.851
But for now, let's jump into,
drum roll please, template driven forms.

18
00:01:06.685 --> 00:01:07.931
&gt;&gt; Lucas Ruebbelke: So we set the stage.

19
00:01:07.931 --> 00:01:11.041
We have this object we're selecting,
this widget object.

20
00:01:11.041 --> 00:01:13.547
We're just dumping it in the page,
but we need to put this in a form, so

21
00:01:13.547 --> 00:01:14.918
we can actually do something with it.

22
00:01:16.627 --> 00:01:18.699
&gt;&gt; Lucas Ruebbelke: So
we do this with forms.

23
00:01:18.699 --> 00:01:22.836
So the first pass that we'll take at
this is with template driven forms.

24
00:01:22.836 --> 00:01:28.065
And there's kind of, I would say,
two main parts that go to this is, one,

25
00:01:28.065 --> 00:01:32.971
getting the FormsModule into the app,
which is really quite simple.

26
00:01:32.971 --> 00:01:35.752
Angular CLI fortunately does this for us.

27
00:01:35.752 --> 00:01:41.734
But then understanding how Angular is
controlling the form under the hood.

28
00:01:41.734 --> 00:01:47.613
And then to kind of top things off, there
are some ways that you can validate or

29
00:01:47.613 --> 00:01:51.967
actually style your form based
on its validation state.

30
00:01:51.967 --> 00:01:52.918
Is it valid not?

31
00:01:52.918 --> 00:01:55.936
And so, depending on your design.

32
00:01:55.936 --> 00:01:57.695
And so this is for
the UX people out there.

33
00:01:57.695 --> 00:02:02.428
You may actually wanna show some kind
of a micro-interaction of some sort.

34
00:02:02.428 --> 00:02:05.822
This is not in a good place,
let's show something some user,

35
00:02:05.822 --> 00:02:08.124
or we actually wanna do a specific color.

36
00:02:08.124 --> 00:02:12.183
Or cue the user that this is not a good
place, and do this in a meaningful way.

37
00:02:14.239 --> 00:02:18.219
&gt;&gt; Lucas Ruebbelke: So
to use forms in an Angular application,

38
00:02:18.219 --> 00:02:24.077
we simply need to import
the FormsModule from Angular forms and

39
00:02:24.077 --> 00:02:28.292
add it into our entry
module import section.

40
00:02:28.292 --> 00:02:33.915
Because we're using Angular CLI,
the CLI is already done this for us.

41
00:02:33.915 --> 00:02:38.770
But if you were, for some reason,
you're spinning something up by hand or

42
00:02:38.770 --> 00:02:42.315
you had a pre-existing project
that was not from CLI,

43
00:02:42.315 --> 00:02:46.340
then you would need to do this by hand,
so CLI does this for us.

44
00:02:46.340 --> 00:02:49.272
But be cognizant that this must exist.

45
00:02:49.272 --> 00:02:52.188
So the Angular team, wisely so,

46
00:02:52.188 --> 00:02:57.292
has broken up the functionality,
the core Angular pieces

47
00:02:57.292 --> 00:03:02.206
into smaller pieces that you
can just use as you see fit.

48
00:03:02.206 --> 00:03:05.227
So, there for instance may be, let's say,

49
00:03:05.227 --> 00:03:10.647
a kiosk application that there are no
forms, that you're simply showing data.

50
00:03:10.647 --> 00:03:14.519
Well, in that case, it would not make
sense to actually incur the overhead of

51
00:03:14.519 --> 00:03:17.270
the FormsModule or
any module that you're not using.

52
00:03:17.270 --> 00:03:21.502
And so, by being able to pick and
choose a la carte what you want, and

53
00:03:21.502 --> 00:03:26.331
we'll talk about this tomorrow, is I
think on of the easiest ways to increase

54
00:03:26.331 --> 00:03:30.528
the performance of your application
by simply making it smaller.

55
00:03:32.821 --> 00:03:35.804
&gt;&gt; Speaker 2: Also, in addition to that
you have to add it in the package or

56
00:03:35.804 --> 00:03:38.558
JSON, right, otherwise it won't-
&gt;&gt; Lucas Ruebbelke: Right, so

57
00:03:38.558 --> 00:03:43.188
the question was do we also
have to add it to package.json?

58
00:03:43.188 --> 00:03:44.231
And the answer is yes.

59
00:03:44.231 --> 00:03:47.961
So these are separate npm
packages that you install and

60
00:03:47.961 --> 00:03:50.403
then import into you application.

61
00:03:50.403 --> 00:03:57.539
So if we hop over to the package.json,
&gt;&gt; Lucas Ruebbelke: You'll

62
00:03:57.539 --> 00:04:02.862
be able to see here that we have a bunch
of things kind of happening here.

63
00:04:02.862 --> 00:04:07.256
So we're just adding these things
in bit by bit, so animations, CDK,

64
00:04:07.256 --> 00:04:11.795
the common, which is kind of the big
piece as well as the compiler, core,

65
00:04:11.795 --> 00:04:14.819
this is what we're interested in here,
forms.

66
00:04:14.819 --> 00:04:20.419
HTTP so you may actually may not be making
server side calls, in this case we are.

67
00:04:20.419 --> 00:04:24.404
And, the routers and the different things,
is that if you don't need it,

68
00:04:24.404 --> 00:04:28.073
don't use it but if you do then make
sure you install the npm package,

69
00:04:28.073 --> 00:04:31.530
so that you can import it and
make it available in your ngModule.

70
00:04:31.530 --> 00:04:34.454
Yes.
&gt;&gt; Speaker 2: So if we were to want to use

71
00:04:34.454 --> 00:04:38.614
say Bootstrap instead of material.

72
00:04:38.614 --> 00:04:42.884
We talked about this
a little bit yesterday, but

73
00:04:42.884 --> 00:04:50.190
would you just add it right there, or do
an npm install, some third party library?

74
00:04:50.190 --> 00:04:52.168
&gt;&gt; Lucas Ruebbelke: So,
let's find just a viable library,

75
00:04:52.168 --> 00:04:53.923
I'll show you how we would do this.

76
00:04:53.923 --> 00:04:58.983
So,
&gt;&gt; Lucas Ruebbelke: I've

77
00:04:58.983 --> 00:05:00.874
actually seen this in the wild.

78
00:05:06.145 --> 00:05:10.151
&gt;&gt; Lucas Ruebbelke: And so if I were gonna
use this, I would just go, so this is,

79
00:05:10.151 --> 00:05:13.452
right here in the docs,
this is ng-bootstrap.

80
00:05:15.321 --> 00:05:19.757
&gt;&gt; Speaker 2: But
that's a specific bootstrap for

81
00:05:19.757 --> 00:05:22.369
the Angular
&gt;&gt; Lucas Ruebbelke: Yes.

82
00:05:22.369 --> 00:05:25.012
&gt;&gt; Speaker 2: With the at
symbol before it's using a-

83
00:05:25.012 --> 00:05:26.299
&gt;&gt; Lucas Ruebbelke: So the reason why you

84
00:05:26.299 --> 00:05:29.553
have at symbols, and so
this is kind of a new thing,

85
00:05:29.553 --> 00:05:34.507
is it allows you to kind of name space
your packages withing an organization.

86
00:05:34.507 --> 00:05:41.958
So for instance if you look here,
&gt;&gt; Lucas Ruebbelke: Is everything is kinda

87
00:05:41.958 --> 00:05:47.824
under this scoped Angular org, but here
are the available packages within this.

88
00:05:47.824 --> 00:05:53.564
And so, in this case,
we have ng-bootstrap.

89
00:05:53.564 --> 00:05:58.831
And I would wager, if we went to,
&gt;&gt; Lucas Ruebbelke: Let's

90
00:05:58.831 --> 00:05:59.745
see if I can find this here.

91
00:06:08.683 --> 00:06:11.492
&gt;&gt; Lucas Ruebbelke: If
you went to the repo.

92
00:06:15.690 --> 00:06:17.417
&gt;&gt; Speaker 3: Start will
take you to the repo.

93
00:06:17.417 --> 00:06:18.345
&gt;&gt; Lucas Ruebbelke: What's that?

94
00:06:18.345 --> 00:06:20.153
&gt;&gt; Speaker 3: Start will
take you to the repo.

95
00:06:20.153 --> 00:06:23.897
&gt;&gt; Lucas Ruebbelke: All right, apparently
I'm becoming a fan of ng-bootstrap.

96
00:06:23.897 --> 00:06:28.590
That they would have inside
the organization multiple

97
00:06:28.590 --> 00:06:31.963
packages that they are exporting out.

98
00:06:31.963 --> 00:06:36.487
So not to get in a rabbit hole, but they
might only have one but it allows you to

99
00:06:36.487 --> 00:06:41.617
put multiple packages within, kind of a
name space, which is what Angular's done.

100
00:06:43.282 --> 00:06:45.136
&gt;&gt; Lucas Ruebbelke: So, back to this.

101
00:06:45.136 --> 00:06:47.385
This looks good.

102
00:06:47.385 --> 00:06:49.644
And actually, since I'm here,
I'll show you another one.

103
00:06:49.644 --> 00:06:51.879
Let's see how this one works.

104
00:06:51.879 --> 00:06:55.200
So PrimeNG is actually
a pretty nice library.

105
00:06:55.200 --> 00:06:56.174
It kinda just came out.

106
00:06:56.174 --> 00:07:02.132
I didn't know about it, I've been using it
on another project and it is ridiculous.

107
00:07:02.132 --> 00:07:03.148
Super nice.

108
00:07:07.304 --> 00:07:08.144
&gt;&gt; Lucas Ruebbelke: Same thing.

109
00:07:08.144 --> 00:07:14.149
So MPE's just like, I wanna use this and,
&gt;&gt; Lucas Ruebbelke: Done deal.

110
00:07:14.149 --> 00:07:16.462
So npm install and then you can go in and

111
00:07:16.462 --> 00:07:19.294
then important the things
that you wanna use.

112
00:07:19.294 --> 00:07:24.923
&gt;&gt; Speaker 3: Okay, but,
&gt;&gt; Speaker 3: Once you run the install

113
00:07:24.923 --> 00:07:30.205
the CLI's gonna put it
in the dependencies.

114
00:07:30.205 --> 00:07:33.439
It adds it to the dependencies,
so then it's available.

115
00:07:33.439 --> 00:07:34.504
You don't have to do anything else.

116
00:07:34.504 --> 00:07:35.657
&gt;&gt; Lucas Ruebbelke: Yep, so let me-
&gt;&gt; Speaker 3: So

117
00:07:35.657 --> 00:07:37.482
then you just reference it in a-
&gt;&gt; Lucas Ruebbelke: So

118
00:07:37.482 --> 00:07:38.400
I'm gonna go ahead and do this.

119
00:07:38.400 --> 00:07:44.707
All right, so npm install PrimeNG, so
that's the package, I'm doing --save.

120
00:07:44.707 --> 00:07:48.359
So what this is going to do is
install this as a dependency,

121
00:07:48.359 --> 00:07:49.781
it packaged out JSON.

122
00:07:49.781 --> 00:07:55.024
So just notice here, nothing,
it'll probably go right here.

123
00:07:57.774 --> 00:08:01.482
&gt;&gt; Lucas Ruebbelke: So
npm install primeng --save.

124
00:08:01.482 --> 00:08:06.744
Now if I did --save.dev,
it would put it down in dev dependencies.

125
00:08:06.744 --> 00:08:10.224
Okay, and so
you can see this is completed, and

126
00:08:10.224 --> 00:08:14.714
then from here,
&gt;&gt; Lucas Ruebbelke: It's now in my

127
00:08:14.714 --> 00:08:21.637
modules, then I can go into here and
import it.

128
00:08:21.637 --> 00:08:26.352
So then, I would, Angular material or
anything like that, just import it,

129
00:08:26.352 --> 00:08:28.830
add it into here, and it's available.

130
00:08:28.830 --> 00:08:34.590
&gt;&gt; Speaker 3: Okay,
you would add it to your imports.

131
00:08:34.590 --> 00:08:39.047
&gt;&gt; Lucas Ruebbelke: You'll see here
that if I went over to GitHub, or

132
00:08:39.047 --> 00:08:43.083
let's just say, get client here, tower.

133
00:08:50.411 --> 00:08:52.132
&gt;&gt; Lucas Ruebbelke: You can see
that I've made this change.

134
00:08:52.132 --> 00:08:56.266
So I check this in and so the next person
that basically clones this project and

135
00:08:56.266 --> 00:08:59.973
they run npm install, its gonna run
through and install all of this.

136
00:08:59.973 --> 00:09:02.176
It's going to be available,
for anybody else.

137
00:09:02.176 --> 00:09:06.573
So I've basically said this
project needs this thing to work.

138
00:09:06.573 --> 00:09:08.912
And so this is how package.json
kind of keeps track of it.

139
00:09:08.912 --> 00:09:13.264
So this is how you would add Bootstrap,
Prime, NG, anything that you need.

140
00:09:13.264 --> 00:09:19.627
You just add it to your package.json and
you're good to go.

141
00:09:19.627 --> 00:09:23.178
&gt;&gt; Speaker 4: In their app module
you would add it to [INAUDIBLE]?

142
00:09:23.178 --> 00:09:24.498
&gt;&gt; Lucas Ruebbelke: Yes, and so

143
00:09:24.498 --> 00:09:30.024
then you could,
&gt;&gt; Lucas Ruebbelke: Here just import.

144
00:09:32.918 --> 00:09:35.950
&gt;&gt; Lucas Ruebbelke: And
there we go, makes sense?

145
00:09:35.950 --> 00:09:36.561
&gt;&gt; Speaker 4: Yes.

146
00:09:36.561 --> 00:09:37.448
&gt;&gt; Lucas Ruebbelke: All right.

147
00:09:44.389 --> 00:09:45.568
&gt;&gt; Lucas Ruebbelke: Where was I?

148
00:09:45.568 --> 00:09:47.933
[LAUGH] I don't know.

149
00:09:47.933 --> 00:09:50.228
I don't think that matters.

150
00:09:50.228 --> 00:09:55.618
Yes, so that's why you will
have to do this by hand.

151
00:09:55.618 --> 00:09:59.798
So I think the point I was trying to
make is that use the stuff you need,

152
00:09:59.798 --> 00:10:02.117
don't use the stuff you don't need.

153
00:10:02.117 --> 00:10:05.836
Gone are the days of,
I have this application and

154
00:10:05.836 --> 00:10:11.654
there's 200 megabytes of dependencies and
I only need a fraction of it.

155
00:10:11.654 --> 00:10:16.591
And I think fundamentally that's why,
in my opinion, why Bower failed.

156
00:10:16.591 --> 00:10:20.678
Is the idea would say you could say I
have this thing I wanna use in my app,

157
00:10:20.678 --> 00:10:21.646
Bower Install.

158
00:10:21.646 --> 00:10:26.624
But the problem is it would get
go get the entire GitHub repo and

159
00:10:26.624 --> 00:10:28.940
just add it to your project.

160
00:10:28.940 --> 00:10:33.496
Now do that for I need five things, and
you've got five repos tagging along, and

161
00:10:33.496 --> 00:10:37.114
it was just really hard to kind
of sort that through, where npm,

162
00:10:37.114 --> 00:10:39.674
I think it's a little
bit more streamlined.

163
00:10:45.308 --> 00:10:48.678
&gt;&gt; Lucas Ruebbelke: I think I
planned to spend two minutes or

164
00:10:48.678 --> 00:10:51.440
less on this slide, nailed it.

165
00:10:51.440 --> 00:10:55.458
So if there is this confusion of how do we
get stuff into our Angular application,

166
00:10:55.458 --> 00:10:57.064
I certainly want to address it.

167
00:10:57.064 --> 00:10:58.938
npm really is the way to do it.

168
00:10:58.938 --> 00:11:02.725
And then pull that in, and
then import it into your ngModule.

