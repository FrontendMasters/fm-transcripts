WEBVTT

1
00:00:00.054 --> 00:00:05.475
So when you ask people you're an evil
developer, what make code is hard to test?

2
00:00:05.475 --> 00:00:08.324
They'll say, ooh, make things private.

3
00:00:08.324 --> 00:00:09.794
I mean, I don't know,

4
00:00:09.794 --> 00:00:14.665
using final keyword would be cool into
saying object.freeze in JavaScript.

5
00:00:14.665 --> 00:00:16.675
Have methods that are very complicated.

6
00:00:16.675 --> 00:00:21.550
And sure, to a lot of degrees,
this makes the situation harder because

7
00:00:21.550 --> 00:00:25.954
you cannot monkey patch things,
because the object is frozen.

8
00:00:25.954 --> 00:00:28.508
Or you cannot get a hold of things
because they're hidden somewhere in

9
00:00:28.508 --> 00:00:29.296
a special property.

10
00:00:29.296 --> 00:00:30.833
Or if the method is too long,

11
00:00:30.833 --> 00:00:33.661
then it becomes really
complicated to write a test.

12
00:00:33.661 --> 00:00:34.983
But fundamentally,

13
00:00:34.983 --> 00:00:39.470
the reason why code is hard to test
is because you can't separate it out.

14
00:00:39.470 --> 00:00:41.201
You can't isolate it.

15
00:00:41.201 --> 00:00:47.004
And the reason you can't isolate it is
because the code which is responsible for

16
00:00:47.004 --> 00:00:49.603
constructing your application and

17
00:00:49.603 --> 00:00:55.505
the code that represents the logic are
intermixed, so you can't take it apart.

18
00:00:55.505 --> 00:00:59.345
And the reason why they're
intermixed is that you'll have

19
00:00:59.345 --> 00:01:03.874
things that you'll have code that
looks for other pieces of code, and

20
00:01:03.874 --> 00:01:07.746
you'll see a lot of snow as love
Demeter or the train wreck.

21
00:01:07.746 --> 00:01:13.472
You'll you have something called A, and
you'll say something like A.B.C.D.F,

22
00:01:13.472 --> 00:01:17.874
and you kinda walk the tree to get
a hold of something that you want.

23
00:01:17.874 --> 00:01:21.728
This can also be done as you call
a function that returns another function,

24
00:01:21.728 --> 00:01:25.163
which you call another function on
it to return whatever you want.

25
00:01:25.163 --> 00:01:28.416
And you're just kinda working
it instead of just being given

26
00:01:28.416 --> 00:01:30.657
the thing that you need at the beginning.

27
00:01:32.391 --> 00:01:38.337
Doing work in a constructor, so
when we're doing the GitHub API test,

28
00:01:38.337 --> 00:01:43.689
we created a helper function that
created a promise that allowed

29
00:01:43.689 --> 00:01:48.364
us to manipulate the promise
from the outside, right?

30
00:01:48.364 --> 00:01:54.094
It kind of made sure that the resolve and
reject was exposed to the outside world.

31
00:01:54.094 --> 00:01:56.858
But notice, we didn't do anything
else inside of that function.

32
00:01:56.858 --> 00:01:59.884
If we wrote this function
where inside a way,

33
00:01:59.884 --> 00:02:05.392
we would automatically also put the logic
for returning something or verifying.

34
00:02:05.392 --> 00:02:08.575
It would be really difficult to reuse or
use it anywhere else,

35
00:02:08.575 --> 00:02:12.325
because we would be essentially doing
work in the constructor, right?

36
00:02:12.325 --> 00:02:15.831
The thing that was responsible for
constructing it should do nothing else,

37
00:02:15.831 --> 00:02:16.773
just construct it.

38
00:02:16.773 --> 00:02:18.842
And so in our case, it just did that.

39
00:02:18.842 --> 00:02:23.497
And it was a natural consequence
to us writing the test first,

40
00:02:23.497 --> 00:02:26.462
because why would you write it in a way?

41
00:02:26.462 --> 00:02:28.647
Because any other way would
be more complicated to write.

42
00:02:28.647 --> 00:02:30.325
And so if you write test first,
so obviously,

43
00:02:30.325 --> 00:02:32.270
you're gonna write the simplest
thing you think of.

44
00:02:32.270 --> 00:02:36.418
Nobody's gonna make the test
intentionally complicated,

45
00:02:36.418 --> 00:02:39.596
that's just not how we are as humans,
right?

46
00:02:39.596 --> 00:02:44.040
Okay, the other one that really should be
worth talking about is the global state.

47
00:02:44.040 --> 00:02:47.727
And global state is super problematic, and

48
00:02:47.727 --> 00:02:52.722
it's more problematic on a server
than it is on the client.

49
00:02:52.722 --> 00:02:58.708
So for example, you write an application
that takes a currently logged-in user and

50
00:02:58.708 --> 00:03:03.764
shoves it somewhere in the global state,
so anywhere in the code base,

51
00:03:03.764 --> 00:03:08.252
you can just say this global variable and
you get the username.

52
00:03:08.252 --> 00:03:11.221
It surely makes your life
easier as a developer, but

53
00:03:11.221 --> 00:03:15.482
now you decide, I'm gonna pre-render
the application on a server.

54
00:03:15.482 --> 00:03:19.382
But on the server, you have multiple
threads of execution happening, right?

55
00:03:19.382 --> 00:03:22.830
Because, I mean,
it's not multithreaded, but

56
00:03:22.830 --> 00:03:26.123
multiple awaits
are happening continuously.

57
00:03:26.123 --> 00:03:28.384
The Node.js gets multiple requests, and

58
00:03:28.384 --> 00:03:31.221
it's processing multiple
requests concurrently.

59
00:03:31.221 --> 00:03:37.124
When request A is waiting on a database,
the server can process request B.

60
00:03:37.124 --> 00:03:40.176
And now, the global variable
becomes a problem, right?

61
00:03:40.176 --> 00:03:44.536
Because if request A sets
the user to be user A and

62
00:03:44.536 --> 00:03:48.242
request B now runs, it can't just go and

63
00:03:48.242 --> 00:03:53.379
set it to request B because
there's only one copy of it.

64
00:03:53.379 --> 00:03:57.540
So that's an example of where
it becomes problematic.

65
00:03:57.540 --> 00:04:01.948
But it also is problematic,
because global state is hard to get to.

66
00:04:01.948 --> 00:04:07.330
Externally, I don't know what kinda
global state the application relies on,

67
00:04:07.330 --> 00:04:12.871
because when I write a unit test, I wanna
be able to control all the dependencies,

68
00:04:12.871 --> 00:04:16.272
which include dependencies
in the global space.

69
00:04:16.272 --> 00:04:19.944
And this global space might be difficult
to get to, or hidden in some way,

70
00:04:19.944 --> 00:04:23.380
because typically, we don't wanna
expose it to the outside world,

71
00:04:23.380 --> 00:04:25.827
which means we also
are hiding it from the tests.

72
00:04:25.827 --> 00:04:30.219
So global state is
particularly problematic.

73
00:04:30.219 --> 00:04:34.427
And singletons are just
another form of global state,

74
00:04:34.427 --> 00:04:38.646
where you have one global cache for
your application.

75
00:04:38.646 --> 00:04:42.644
Great, you go to the server, not so great.

76
00:04:42.644 --> 00:04:47.463
But also, inside of a unit test,
it's not so great because test A runs,

77
00:04:47.463 --> 00:04:51.339
it sets up some information
inside your singleton cache.

78
00:04:51.339 --> 00:04:56.019
Test B runs, and all of the sudden test
B fails because the cache contains some

79
00:04:56.019 --> 00:04:58.045
values that you didn't expect.

80
00:04:58.045 --> 00:05:02.102
You focus the test by saying it.only,
and now you run the test by itself.

81
00:05:02.102 --> 00:05:05.900
And now the cache isn't poisoned,
and now your test passes, and

82
00:05:05.900 --> 00:05:09.296
now you're going crazy,
like what kind of a test is this?

83
00:05:09.296 --> 00:05:13.438
It's passing by itself, but
it's failing as a group.

84
00:05:13.438 --> 00:05:16.070
And you can see how that would become
really difficult really quick.

85
00:05:20.806 --> 00:05:23.921
Well, I'm not gonna cover
the deep inheritance,

86
00:05:23.921 --> 00:05:27.333
because that's not really
applicable to JavaScript.

87
00:05:27.333 --> 00:05:31.804
But too many conditionals
is just the question of,

88
00:05:34.039 --> 00:05:35.918
Something known as cyclomatic complexity.

89
00:05:35.918 --> 00:05:38.385
Have you heard the term?

90
00:05:38.385 --> 00:05:41.587
Cyclomatic complexity just says,
if you look at your function,

91
00:05:41.587 --> 00:05:43.400
how many decision points are there?

92
00:05:43.400 --> 00:05:46.170
The IF statement is a decision point,
right, because you could go one way or

93
00:05:46.170 --> 00:05:46.743
the other way.

94
00:05:46.743 --> 00:05:49.738
You could either go to the L's branch or
then branch.

95
00:05:49.738 --> 00:05:54.524
So cyclomatic complexity just adds up all
the different paths that you can have

96
00:05:54.524 --> 00:05:56.568
through your function, right?

97
00:05:56.568 --> 00:05:59.395
A simple function has
a cyclomatic complexity of one,

98
00:05:59.395 --> 00:06:01.798
because there's only
one way it can execute.

99
00:06:01.798 --> 00:06:06.052
Whereas if you have an IF statement, at a
minimum you have cyclomatic complexity of

100
00:06:06.052 --> 00:06:09.722
two, because you can execute through
the IF branch or the Then branch.

101
00:06:09.722 --> 00:06:13.837
And if you have two instead IF statements,
now you have a cyclomatic complexity of

102
00:06:13.837 --> 00:06:17.474
four, because you can go through
the first IF, but the second Then, and

103
00:06:17.474 --> 00:06:18.563
it adds up like that.

104
00:06:18.563 --> 00:06:19.530
Go ahead.

105
00:06:19.530 --> 00:06:23.805
&gt;&gt; There's a question around
understanding mixing new with logic,

106
00:06:23.805 --> 00:06:29.238
is that just when you're creating a new
class that it's doing too many things, or?

107
00:06:29.238 --> 00:06:35.821
&gt;&gt; Yeah, so let's say we had a piece
of code that would load the dataset for

108
00:06:35.821 --> 00:06:41.970
clustering, and then run it through
the clustering algorithm and

109
00:06:41.970 --> 00:06:48.262
then convert it into the desired
output for the cluster component.

110
00:06:48.262 --> 00:06:52.593
Such a situation would be
extremely difficult to test,

111
00:06:52.593 --> 00:06:57.843
because I would like to now create
a clustering with my own dataset,

112
00:06:57.843 --> 00:07:02.262
but I can't because the code
that is fetching the data and

113
00:07:02.262 --> 00:07:07.449
the code that is doing the clustering
are all in the same function.

114
00:07:07.449 --> 00:07:12.315
So now I have created a problem for
myself, because I cannot split it apart.

115
00:07:12.315 --> 00:07:15.471
So if you notice the way we
structured our code base,

116
00:07:15.471 --> 00:07:19.417
as we made sure that the act of
passing the data into the clustering

117
00:07:19.417 --> 00:07:24.372
algorithm was always separate from
the actual clustering algorithm, right, so

118
00:07:24.372 --> 00:07:27.420
that we could always call
it with something else.

119
00:07:27.420 --> 00:07:32.437
You could make it simpler on yourself by
just saying like, the first argument,

120
00:07:32.437 --> 00:07:34.073
I'm not gonna ask you for.

121
00:07:34.073 --> 00:07:38.763
Instead, I'm just gonna call the
underlying method which was load dataset.

122
00:07:38.763 --> 00:07:42.771
But now, you would mess yourself up for
testing purposes,

123
00:07:42.771 --> 00:07:47.034
because you can no longer pass
in a smaller, simpler test set.

124
00:07:47.034 --> 00:07:51.240
So that's what I mean by mixing the logic,
which is the clustering with

125
00:07:51.240 --> 00:07:55.881
the construction, which is how do you
assemble the pieces together, right?

126
00:07:55.881 --> 00:07:59.297
So I can teach you about writing test and
the answer is nothing, but

127
00:07:59.297 --> 00:08:02.177
I can only teach you stuff
about writing testable code.

128
00:08:04.925 --> 00:08:08.439
This was written back in the day before
I mainly did Java, that's why I said,

129
00:08:08.439 --> 00:08:10.238
good object-oriented programming.

130
00:08:10.238 --> 00:08:15.720
But really, it comes down to just good
practices that is decoupled, right?

131
00:08:15.720 --> 00:08:18.297
You wanna have code that is decoupled,
think Lego blocks.

132
00:08:18.297 --> 00:08:21.190
You wanna be able to work with
Lego blocks individually.

133
00:08:21.190 --> 00:08:24.470
You need to have some way of
getting hold of these dependencies.

134
00:08:24.470 --> 00:08:28.015
Dependency injection is one way
that's popular in the Java world.

135
00:08:28.015 --> 00:08:31.397
But even if you're not using
dependency junction per se,

136
00:08:31.397 --> 00:08:36.091
as long as you have a way of getting hold
of the dependencies in a practical sense,

137
00:08:36.091 --> 00:08:39.144
you're really practicing
this particular thing.

138
00:08:39.144 --> 00:08:41.084
Test-driven development is useful,

139
00:08:41.084 --> 00:08:43.851
because it naturally forces
you to write simple tests.

140
00:08:43.851 --> 00:08:46.342
Nobody is gonna write a complicated test.

141
00:08:46.342 --> 00:08:48.799
Everybody writes something simple first,
right?

142
00:08:48.799 --> 00:08:50.584
And if you write tests first,

143
00:08:50.584 --> 00:08:53.880
then your code will naturally
just do the right thing.

144
00:08:53.880 --> 00:08:59.223
Because inside of the test, you will
write something very simple, like,

145
00:08:59.223 --> 00:09:05.075
imagine I have these four data points, now
cluster them, I expect to see two subsets.

146
00:09:05.075 --> 00:09:07.169
That's a pretty straightforward thing,
right?

147
00:09:07.169 --> 00:09:08.760
And naturally, in the test,

148
00:09:08.760 --> 00:09:13.100
you're gonna force a way of passing
the dataset into the clustering algorithm.

149
00:09:13.100 --> 00:09:16.069
And so the test will naturally
force you to make sure that you can

150
00:09:16.069 --> 00:09:18.214
assemble the code in
lots of different ways.

151
00:09:18.214 --> 00:09:22.312
So you can assemble it with dataset
A versus dataset B, with diagonal points,

152
00:09:22.312 --> 00:09:25.371
with one point, with many points,
and so on and so forth.

