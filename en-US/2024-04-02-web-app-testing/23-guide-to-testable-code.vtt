WEBVTT

1
00:00:00.130 --> 00:00:04.240
So we spend a lot of time talking
a lot of theory about code.

2
00:00:04.240 --> 00:00:08.504
But it turns out at some point in my
career and together a bunch of other

3
00:00:08.504 --> 00:00:12.930
engineers, I put together something
called a guide to testable code.

4
00:00:12.930 --> 00:00:17.390
And I wanna kinda show you some of these
things because I think it's useful.

5
00:00:17.390 --> 00:00:22.143
Now, these examples were done
back in the Java days, but

6
00:00:22.143 --> 00:00:28.991
I think the ideas are still applicable and
useful in the JavaScript world as well.

7
00:00:30.711 --> 00:00:35.524
So the examples of what we have here is we
identified when we were building code with

8
00:00:35.524 --> 00:00:40.269
other engineers, there are four main
things that people got into trouble with,

9
00:00:40.269 --> 00:00:42.924
which made the code hard to test.

10
00:00:42.924 --> 00:00:47.367
And again, hopefully what I've tried to
convince you of in the last few hours is

11
00:00:47.367 --> 00:00:51.829
that it's all about being able to take
control over the dependencies, right?

12
00:00:51.829 --> 00:00:55.275
You wanna be able to
control the dependencies so

13
00:00:55.275 --> 00:00:57.695
that you can unit test your code.

14
00:00:57.695 --> 00:01:03.442
And so there are four main flaws that we
identified, constructor does real work.

15
00:01:03.442 --> 00:01:07.638
Digging into collaborators,
brittle global state and

16
00:01:07.638 --> 00:01:10.589
singletons, and class does too much.

17
00:01:10.589 --> 00:01:14.272
And so I wanna go over most of these,
and by the way,

18
00:01:14.272 --> 00:01:17.111
these are available on their website.

19
00:01:17.111 --> 00:01:21.919
So you can take your time kind of to
go over it in a leisurely format.

20
00:01:21.919 --> 00:01:25.415
What do we mean by
constructor does real work?

21
00:01:25.415 --> 00:01:27.963
Let's find a piece of code.

22
00:01:27.963 --> 00:01:30.226
Let's say you have a house, and
a house comes with a bedroom.

23
00:01:30.226 --> 00:01:33.551
Notice what's happening inside
of the constructor of the house.

24
00:01:33.551 --> 00:01:39.102
The house is constructing itself with a
bedroom, which means that in a unit test,

25
00:01:39.102 --> 00:01:44.912
you can never, ever replace the bedroom
with a mock, or anything you want.

26
00:01:44.912 --> 00:01:49.318
So if you wanted to write a test,
you would end up with like,

27
00:01:49.318 --> 00:01:53.479
you make a new house inside
of your code base, and darn.

28
00:01:53.479 --> 00:01:56.430
I'm stuck with the kitchen,
bedroom objects, and

29
00:01:56.430 --> 00:02:00.736
everything else that was created as
the component decided it to be created.

30
00:02:00.736 --> 00:02:05.586
Instead, what you wanna do is you don't
wanna do any work inside a constructor.

31
00:02:05.586 --> 00:02:08.831
You just wanna take the values and
store them in so

32
00:02:08.831 --> 00:02:12.446
that you can later say,
I have a dummy kitchen.

33
00:02:12.446 --> 00:02:13.520
I have a dummy bedroom.

34
00:02:13.520 --> 00:02:18.768
And so now when I instantiate the house
with dummy kitchen, dummy bedroom,

35
00:02:18.768 --> 00:02:24.020
I can control these things and I can build
any kind of code that I want with it.

36
00:02:24.020 --> 00:02:27.802
And again, this comes down to being
able to control the dependencies.

37
00:02:27.802 --> 00:02:30.010
So let's look at another example.

38
00:02:30.010 --> 00:02:35.314
We do work over here because in this case,
the constructor

39
00:02:35.314 --> 00:02:41.606
of the garden configures the gardener
to do specific kind of things.

40
00:02:41.606 --> 00:02:48.116
For example, in this case,
it configures it with a 12-hour workday,

41
00:02:48.116 --> 00:02:52.846
and some set of boots that
it assigns to the gardener.

42
00:02:54.286 --> 00:02:59.836
And so as a result, if you wanted to write
a test, all of a sudden, you are stuck

43
00:02:59.836 --> 00:03:06.264
with this slow moving unit test because
you can't control how it was configured.

44
00:03:06.264 --> 00:03:12.397
And so what you want is you wanna have
a constructor that doesn't do anything.

45
00:03:12.397 --> 00:03:16.023
Your constructor should just ask for,
look, I need a gardener and

46
00:03:16.023 --> 00:03:18.679
I expect the gardener to
be already configured so

47
00:03:18.679 --> 00:03:21.495
that I don't have to do
any configuration myself.

48
00:03:21.495 --> 00:03:26.437
The end result of that is that now you
can configure the gardener with, for

49
00:03:26.437 --> 00:03:32.423
example, one minute workday so that you
can go through the tests quickly, right?

50
00:03:32.423 --> 00:03:34.733
And you don't have to set
up complicated things.

51
00:03:34.733 --> 00:03:40.153
And maybe this mock gardener doesn't even
need boots, and you can skip over that.

52
00:03:40.153 --> 00:03:43.997
And so this is a way of making
your test easier to read and

53
00:03:43.997 --> 00:03:48.443
reason about because you
are controlling things around them.

54
00:03:48.443 --> 00:03:52.208
Now, you might say, constructors,
that's only for Java.

55
00:03:52.208 --> 00:03:55.325
I don't really have constructors because
I'm doing functional programming in

56
00:03:55.325 --> 00:03:55.882
JavaScript.

57
00:03:55.882 --> 00:04:02.361
But again, I'm gonna argue that a lot of
your functions close over other things.

58
00:04:02.361 --> 00:04:07.053
And when you close over other things,
it's the same exact thing as if you had

59
00:04:07.053 --> 00:04:10.231
a constructor that you're closing over,
right?

60
00:04:10.231 --> 00:04:14.641
So the work that you're closing over
should be something that can be easily

61
00:04:14.641 --> 00:04:15.731
worked over.

62
00:04:15.731 --> 00:04:17.321
Let's go digging into the collaborators.

63
00:04:17.321 --> 00:04:19.374
So that's another example
of what you wanna avoid.

64
00:04:21.335 --> 00:04:22.312
So, what are the warning signs?

65
00:04:22.312 --> 00:04:26.752
So, objects are passed in, but
never used directly, instead,

66
00:04:26.752 --> 00:04:30.965
we get a hold of some secondary
object on that primary object.

67
00:04:30.965 --> 00:04:35.341
And we are violating the law of Demeter,
which basically means we're using a whole

68
00:04:35.341 --> 00:04:37.857
bunch of dots to get a hold
of stuff that we want.

69
00:04:37.857 --> 00:04:40.362
And typically,
things have these suspicious names,

70
00:04:40.362 --> 00:04:43.466
like context, environment,
principle, container, manager,

71
00:04:43.466 --> 00:04:45.437
something that's very generic, right?

72
00:04:47.017 --> 00:04:49.907
So let's have a look to what we mean.

73
00:04:49.907 --> 00:04:52.537
Here's an example of a tax calculator.

74
00:04:52.537 --> 00:04:55.787
Notice the constructor does not work,
so that's good.

75
00:04:55.787 --> 00:04:58.813
But now we wanted to compute sales tax,
and

76
00:04:58.813 --> 00:05:02.016
what we get passed in is a user and
an invoice.

77
00:05:02.016 --> 00:05:07.842
But notice that it doesn't really want
the user, it just wants to get address,

78
00:05:07.842 --> 00:05:12.535
sorry about the strong,
that shouldn't be here, that's a typo.

79
00:05:12.535 --> 00:05:14.322
It just wants the address, and

80
00:05:14.322 --> 00:05:18.516
the reason why it wants address is
because it wants to know the locality,

81
00:05:18.516 --> 00:05:23.019
and based on the locality, it will
determine what tax rate to apply, right?

82
00:05:23.019 --> 00:05:27.358
And notice it doesn't want the invoice,
it really just wants the amount.

83
00:05:27.358 --> 00:05:32.013
So really what we wanna write is
just that the tax table needs to get

84
00:05:32.013 --> 00:05:36.708
a taxable rate from the address
to compute the amount.

85
00:05:36.708 --> 00:05:41.854
And so a preferred way to do this,
is to pass in the address and the amount.

86
00:05:41.854 --> 00:05:45.853
Because if you're passing it,
user and invoice,

87
00:05:45.853 --> 00:05:51.433
then your test is complicated because
you have to make a bogus address,

88
00:05:51.433 --> 00:05:56.363
you need to make a bogus user,
you need to make a bogus invoice.

89
00:05:56.363 --> 00:06:03.029
Invoice needs to have probably a bunch of
products inside of it to make it work,

90
00:06:03.029 --> 00:06:08.792
just so you can call the compute
cell stacks on the user and invoice.

91
00:06:08.792 --> 00:06:11.564
Whereas if you don't
have a law of Demeter, or

92
00:06:11.564 --> 00:06:16.540
if you don't violate the law of Demeter,
notice you can just create the address and

93
00:06:16.540 --> 00:06:21.161
you can call the compute cell stacks
directly because you're comparing just

94
00:06:21.161 --> 00:06:23.738
the stuff that you actually need, right?

95
00:06:23.738 --> 00:06:28.059
So whenever you see functions that
look for other things, right,

96
00:06:28.059 --> 00:06:32.611
this particular case, we are not
using what we were given, instead,

97
00:06:32.611 --> 00:06:35.406
we were looking for what we actually need.

98
00:06:37.326 --> 00:06:40.444
What you're asking for is more
complicated than what you actually need.

99
00:06:40.444 --> 00:06:44.607
And because you're asking for something
that's more complicated than what you

100
00:06:44.607 --> 00:06:47.666
actually need, the mocking code
that you end up writing for

101
00:06:47.666 --> 00:06:49.763
becomes a lot more complicated as well.

102
00:06:49.763 --> 00:06:52.962
And so it makes your life harder.

103
00:06:52.962 --> 00:06:58.507
Here is another example where you're
passing a client and a request.

104
00:06:58.507 --> 00:07:03.326
And then when you call login you're
saying, hey, from the request give me

105
00:07:03.326 --> 00:07:08.780
a cookie, and from the authenticator,
call the authenticate on a cookie, right?

106
00:07:08.780 --> 00:07:13.252
So better thing to do would be to pass
in the cookie and the authenticator,

107
00:07:13.252 --> 00:07:15.937
rather than passing in something generic.

108
00:07:15.937 --> 00:07:20.634
But then later you look up what you want,
you pass in something specific, the cookie

109
00:07:20.634 --> 00:07:25.548
and the authenticator, cuz that's the only
thing that you need for the login, right?

110
00:07:25.548 --> 00:07:31.051
And so the test here is complicated
because you have to create a lots

111
00:07:31.051 --> 00:07:37.161
of mocks that mock out the RPCClient and
then mock up the ServletRequest.

112
00:07:37.161 --> 00:07:41.826
Whereas in this case the test is
straightforward because you just create

113
00:07:41.826 --> 00:07:44.502
a bogus cookie and a fake authenticator,

114
00:07:44.502 --> 00:07:47.803
call it and
assert that it did actually get called.

115
00:07:47.803 --> 00:07:52.430
So that's an example of how law of
demeter kinda makes the situation

116
00:07:52.430 --> 00:07:53.819
a lot worse for you.

117
00:07:53.819 --> 00:07:58.487
Global state, typically, you have some
global variable like this, private static,

118
00:07:58.487 --> 00:08:02.537
cuz that's typically the way it's done,
and now you have a login service.

119
00:08:02.537 --> 00:08:07.386
And then whenever the login service is
actually needed, people get hold of it.

120
00:08:07.386 --> 00:08:10.270
So for example,
you have a method called getInstance().

121
00:08:10.270 --> 00:08:14.920
And this getInstance creates your log
in service on as needed basis, right?

122
00:08:14.920 --> 00:08:18.520
And so then typically you
need to start testing it, and

123
00:08:18.520 --> 00:08:22.448
now you have to have a way of
resetting the global instance.

124
00:08:22.448 --> 00:08:26.636
You typically create these methods for
reset for

125
00:08:26.636 --> 00:08:31.240
testing and set for testing so
that you can work on it.

126
00:08:31.240 --> 00:08:35.445
And a typical place you would use it is
you would say, let's say I wanna say,

127
00:08:35.445 --> 00:08:40.200
isAuthenticatedAdminUser, I'm gonna
say loginService.getInstance, right?

128
00:08:40.200 --> 00:08:44.055
And this creates a really complicated
test because you can't just say,

129
00:08:44.055 --> 00:08:47.043
do this because you have
the wrong singleton in there.

130
00:08:47.043 --> 00:08:49.578
Or maybe you forgot to clean up
the singleton from the previous run, and

131
00:08:49.578 --> 00:08:51.643
you have the wrong one in there, right?

132
00:08:51.643 --> 00:08:56.355
So you really wanna avoid that, and
instead, you just wanna say, hey look,

133
00:08:56.355 --> 00:09:01.878
you have your LoginService which does
the implementation not as a singleton.

134
00:09:01.878 --> 00:09:05.650
And then in your dashboard,
you just wanna pass in the loginService.

135
00:09:05.650 --> 00:09:12.697
So you pass it in explicitly rather than
having the code look it up at runtime.

136
00:09:12.697 --> 00:09:17.602
And by passing it in explicitly,
now writing tests become really easy

137
00:09:17.602 --> 00:09:21.093
because you can just say
new AdminDashboard, and

138
00:09:21.093 --> 00:09:26.021
I can pass in the mock login service,
and I can assert whatever I want.

139
00:09:26.021 --> 00:09:29.126
Notice, this all repeats the same thing.

140
00:09:29.126 --> 00:09:32.096
We wanna be able to get hold
of our dependencies, and

141
00:09:32.096 --> 00:09:36.276
we wanna be able to do it in a way
that's very predictable, right?

142
00:09:36.276 --> 00:09:39.405
And that's what kind of
allows us to do that.

143
00:09:43.547 --> 00:09:47.849
The global stuff, like for
example, setting flags globally,

144
00:09:47.849 --> 00:09:50.169
produces the same exact problem.

145
00:09:50.169 --> 00:09:55.391
Because when you wanna write a test,
it's extremely difficult for you to make

146
00:09:55.391 --> 00:10:00.310
sure that you have gone to every singleton
and set it to the correct state.

147
00:10:00.310 --> 00:10:04.459
And also you're always running the risk
that if you add a new singleton,

148
00:10:04.459 --> 00:10:09.153
then the subsequent tests will be failing
because the tests weren't aware of them

149
00:10:09.153 --> 00:10:11.142
and didn't reset them properly.

150
00:10:11.142 --> 00:10:14.336
And so now you can have a leakage
of information from one test to

151
00:10:14.336 --> 00:10:15.141
the next test.

152
00:10:17.131 --> 00:10:20.297
And of course,
if these tests are to be run concurrently,

153
00:10:20.297 --> 00:10:24.441
that's another set of problems,
because concurrency also creates work.

154
00:10:24.441 --> 00:10:29.412
And finally, this is just a good practice
of keep your code modular and simple,

155
00:10:29.412 --> 00:10:34.011
and every single piece of code should
do something that's individual and

156
00:10:34.011 --> 00:10:35.287
it's not complex.

157
00:10:35.287 --> 00:10:39.955
Basically, you don't wanna have things
that have the word and inside of it.

158
00:10:39.955 --> 00:10:45.601
Because that implies that there's multiple
responsibilities for this component.

159
00:10:45.601 --> 00:10:46.685
What does it do?

160
00:10:46.685 --> 00:10:53.654
This component logs you in and
makes sure that your user is created.

161
00:10:53.654 --> 00:10:54.447
Those should be two separate things.

162
00:10:54.447 --> 00:10:55.842
You shouldn't mix it together.

163
00:10:55.842 --> 00:10:59.877
Because when you mix it together, your
unit test become complicated because your

164
00:10:59.877 --> 00:11:02.634
mock can't just mock whether or
not you're logged in.

165
00:11:02.634 --> 00:11:06.010
It now has to mock that
you can be logged in and

166
00:11:06.010 --> 00:11:09.859
that you could create
a user if it doesn't exist.

167
00:11:09.859 --> 00:11:12.782
And so
all of these things become a problem.

168
00:11:12.782 --> 00:11:17.072
And so we put together this set of
things which we think are useful,

169
00:11:17.072 --> 00:11:21.131
that you can share with your
co-workers and say, hey, look,

170
00:11:21.131 --> 00:11:24.057
this is what a good
testable code looks like.

