WEBVTT

1
00:00:00.000 --> 00:00:03.990
I know we talked about it, but I really
wanna hammer this home, which is that,

2
00:00:03.990 --> 00:00:06.418
let's say you wanna unit test a class,
right?

3
00:00:06.418 --> 00:00:08.662
So you have your test driver,
which is your it method.

4
00:00:08.662 --> 00:00:11.368
And you have the class under test or
a function under test,

5
00:00:11.368 --> 00:00:13.200
it doesn't matter what it is, right?

6
00:00:13.200 --> 00:00:15.475
You have something that you wanna test.

7
00:00:15.475 --> 00:00:19.964
And so you say, well,
that's pretty simple, I have my test,

8
00:00:19.964 --> 00:00:24.220
I will go and poke at the class
under test, and things work.

9
00:00:24.220 --> 00:00:26.693
Except that there
are other classes involved.

10
00:00:26.693 --> 00:00:29.575
In our case, the fetch, the delay, right?

11
00:00:29.575 --> 00:00:32.205
Those were other externalities, right?

12
00:00:32.205 --> 00:00:34.468
And the thing is,
it's not just those externalities,

13
00:00:34.468 --> 00:00:36.889
those externalities have
a bunch of other externalities.

14
00:00:36.889 --> 00:00:38.321
And so very quickly,

15
00:00:38.321 --> 00:00:43.183
you get in a situation where you just
end up depending on the whole world.

16
00:00:43.183 --> 00:00:46.491
And so what you wanna do is
you wanna make a seam, right?

17
00:00:46.491 --> 00:00:52.067
You wanna have some mechanism by which I
can give you the external dependencies so

18
00:00:52.067 --> 00:00:54.856
that I can turn them into mocks, right?

19
00:00:54.856 --> 00:00:59.935
And so what you do is you convert this
into this, into what we called friendlies.

20
00:00:59.935 --> 00:01:04.335
The reason I call them friendlies
is because I showed you how to

21
00:01:04.335 --> 00:01:06.873
do it with mocks, but oftentimes,

22
00:01:06.873 --> 00:01:12.644
people actually create a simplified
implementation of the real thing, right?

23
00:01:12.644 --> 00:01:16.360
So mocks are one way to do it, and
they're pretty straightforward,

24
00:01:16.360 --> 00:01:19.512
but you could also create your
own implementation for it.

25
00:01:19.512 --> 00:01:23.974
For example, you can create my own fetch
that knows how to respond to different

26
00:01:23.974 --> 00:01:28.370
things and it's pre-configured with
standard responses and response with

27
00:01:28.370 --> 00:01:33.048
the headers and error codes and all kinds
of other things in there as well, right?

28
00:01:33.048 --> 00:01:34.215
You could do that, and

29
00:01:34.215 --> 00:01:37.231
then you have a useful thing to
just use all over the place.

30
00:01:37.231 --> 00:01:41.063
So these friendlies don't
necessarily have to be mocks,

31
00:01:41.063 --> 00:01:44.200
they could just be
something that you control.

32
00:01:44.200 --> 00:01:48.806
And because you control it, the class
under test gets sandwiched between both

33
00:01:48.806 --> 00:01:50.989
sides of the world that you control.

34
00:01:50.989 --> 00:01:55.781
And by sandwiching the unit test
in the middle, you then can go and

35
00:01:55.781 --> 00:02:00.940
basically control time,
control the order in which things resolve.

36
00:02:00.940 --> 00:02:03.563
Create all weird corner cases or
race conditions or

37
00:02:03.563 --> 00:02:06.494
anything you want can be done
in this particular manner.

38
00:02:06.494 --> 00:02:11.547
Normally when we write code what we mix is
we mix the object graph construction and

39
00:02:11.547 --> 00:02:13.416
lookup with business logic.

40
00:02:13.416 --> 00:02:16.005
And the thing you need to do
is you need to figure out

41
00:02:16.005 --> 00:02:17.802
a way to break them apart, right?

42
00:02:17.802 --> 00:02:21.093
So in our case,
we did something very, very simple,

43
00:02:21.093 --> 00:02:25.572
where we just broke them apart by
having default arguments to our class.

44
00:02:25.572 --> 00:02:29.006
But you can imagine something more
complicated where you have some factory

45
00:02:29.006 --> 00:02:30.762
class that actually makes it for you.

46
00:02:30.762 --> 00:02:34.851
But the point here is that by breaking
these two responsibilities up,

47
00:02:34.851 --> 00:02:38.592
you now have the freedom to test things or
to move things around or

48
00:02:38.592 --> 00:02:41.108
to do things that you didn't have before.

49
00:02:41.108 --> 00:02:45.297
So yeah, in essence, what you want
is you wanna have a test driver and

50
00:02:45.297 --> 00:02:48.622
you wanna create the friendlies
inside of your test and

51
00:02:48.622 --> 00:02:52.181
then pass them through somehow
to the other side, right?

52
00:02:52.181 --> 00:02:57.479
In our case, we had a BeforeEach method
that would set up our friendlies,

53
00:02:57.479 --> 00:03:02.623
right, our mocks, and pass them to
the other side so that we can use it.

