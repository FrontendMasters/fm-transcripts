WEBVTT

1
00:00:00.000 --> 00:00:02.988
So now we have a next to-do.

2
00:00:02.988 --> 00:00:07.145
And in this test, it says we
should time out after x seconds.

3
00:00:07.145 --> 00:00:10.293
So let's implement this first.

4
00:00:10.293 --> 00:00:13.823
And I'm gonna show you what kind of issues
we will have with the implementation.

5
00:00:13.823 --> 00:00:18.083
So, when you are talking to a fetch
over here, if you wanna time out,

6
00:00:18.083 --> 00:00:20.667
you will need to have
some kind of a delay.

7
00:00:20.667 --> 00:00:23.381
So let's create a delay function.

8
00:00:27.998 --> 00:00:31.731
And Autopilot is amazing at writing delay,
perfect, okay.

9
00:00:31.731 --> 00:00:32.797
I think that's correct, right?

10
00:00:32.797 --> 00:00:33.535
Yeah, that's right.

11
00:00:33.535 --> 00:00:39.755
So now this gives me a promise that
allows me to delay a particular thing.

12
00:00:39.755 --> 00:00:43.399
And what we can do now is we can say,
race.await.

13
00:00:43.399 --> 00:00:45.200
No, sorry, not race, promise.race.

14
00:00:45.200 --> 00:00:48.805
Promise.race.

15
00:00:48.805 --> 00:00:50.483
And, I see.

16
00:00:50.483 --> 00:00:51.456
So, okay.

17
00:01:03.634 --> 00:01:07.663
It's unknown because, right,
these are different types.

18
00:01:09.645 --> 00:01:13.000
So we're gonna cheat here and
we're gonna say, then.

19
00:01:13.000 --> 00:01:18.382
So the thing is, we're refactoring it so
that we return a timeout value.

20
00:01:18.382 --> 00:01:22.110
So, we have a delay, and after a delay,

21
00:01:22.110 --> 00:01:27.062
we say return,
let's say response equals timeout.

22
00:01:31.096 --> 00:01:33.691
Otherwise, we do our normal stuff, right?

23
00:01:33.691 --> 00:01:37.617
And now we have to say,
then, we get a response.

24
00:01:37.617 --> 00:01:42.925
And in the response,
we copy this piece of code right here,

25
00:01:42.925 --> 00:01:47.182
which basically says return response.json.

26
00:01:51.872 --> 00:01:53.987
And we can go and just return it.

27
00:01:57.248 --> 00:02:00.470
And they delete this code right here.

28
00:02:00.470 --> 00:02:03.854
So now we have code that will
wait up to 5,000 milliseconds,

29
00:02:03.854 --> 00:02:06.140
it's a race between two promises, right?

30
00:02:06.140 --> 00:02:10.199
Either this promise tries, to actually
fetch the data, or we have a delay and

31
00:02:10.199 --> 00:02:14.703
we will resolve in 5,000 milliseconds
saying like, hey, there's a timeout.

32
00:02:14.703 --> 00:02:17.902
Actually, let's make this
timeout a little shorter, 4,000,

33
00:02:17.902 --> 00:02:19.972
because the 5,000 is also what we test.

34
00:02:19.972 --> 00:02:21.554
So, let's make a new test.

35
00:02:21.554 --> 00:02:26.116
And somebody was asking me, do I copy
the tests or do I like to be dry?

36
00:02:26.116 --> 00:02:28.382
So, I actually like to copy the tests,

37
00:02:28.382 --> 00:02:32.102
because it makes it easier to kind
of figure out what is going on.

38
00:02:32.102 --> 00:02:35.364
So let's just copy this test over,

39
00:02:35.364 --> 00:02:39.838
remove this expect, and
we'll do expect here.

40
00:02:39.838 --> 00:02:42.381
And it's an async.

41
00:02:42.381 --> 00:02:47.061
Okay, so now we have the same exact test,
but what we are gonna do is we're not

42
00:02:47.061 --> 00:02:51.905
we're not going to resolve the the
response, instead we're just gonna wait.

43
00:02:51.905 --> 00:02:56.893
And if I get my test going,
notice that we have a test

44
00:02:56.893 --> 00:03:01.185
that's failing, and it's saying, hey,

45
00:03:01.185 --> 00:03:07.001
I expected to have a response,
but instead I got a timeout.

46
00:03:07.001 --> 00:03:08.272
So actually this is what we wanna do.

47
00:03:08.272 --> 00:03:10.198
We wanna assert that we have a timeout,
right?

48
00:03:10.198 --> 00:03:14.187
So instead of response,
we have a timeout like this.

49
00:03:14.187 --> 00:03:17.493
And now you'll see that this test passes,
hopefully, if I did this right,

50
00:03:17.493 --> 00:03:20.397
it's passing because it's doing
exactly what I wanted, right?

51
00:03:20.397 --> 00:03:23.840
I didn't provide a response,
and it, four seconds later,

52
00:03:23.840 --> 00:03:27.497
provided a timeout response,
which is exactly what we wanted.

53
00:03:27.497 --> 00:03:31.653
However, as you can imagine,
you don't wanna have a test like this,

54
00:03:31.653 --> 00:03:33.422
how do I hide the background?

55
00:03:33.422 --> 00:03:37.602
Okay, you don't want to have a test like
this inside of your repo because it takes

56
00:03:37.602 --> 00:03:41.351
four seconds to execute, and
if you have hundreds and hundreds of them,

57
00:03:41.351 --> 00:03:42.657
this would be a problem.

58
00:03:42.657 --> 00:03:46.966
So the question then becomes,
how do we simulate this?

59
00:03:46.966 --> 00:03:48.554
How do we solve this?

60
00:03:48.554 --> 00:03:52.159
And I'm gonna ask the audience.

61
00:03:52.159 --> 00:03:54.036
&gt;&gt; Timeout should be an argument.

62
00:03:54.036 --> 00:03:58.385
&gt;&gt; [CROSSTALK] That's right, so we need
to now pass in the delay in here, right?

63
00:03:58.385 --> 00:04:03.679
So, we can essentially continue
the same exact process,

64
00:04:03.679 --> 00:04:08.648
where we say,
const delay mock is going to be a function

65
00:04:08.648 --> 00:04:12.550
that is going to be
getting a mock promise.

66
00:04:12.550 --> 00:04:18.317
So the argument of the function
is gonna be a number.

67
00:04:18.317 --> 00:04:20.116
And it's gonna return a promise.

68
00:04:20.116 --> 00:04:24.827
And now we have to take this mock and

69
00:04:24.827 --> 00:04:27.757
pass it in to our API.

70
00:04:27.757 --> 00:04:32.195
And then inside of our API,
we will do the same exact thing.

71
00:04:32.195 --> 00:04:36.870
We will say, we have a delay, and
the delay will be a function that

72
00:04:36.870 --> 00:04:41.803
takes a millisecond, which is a number,
which produces a promise.

73
00:04:41.803 --> 00:04:45.085
And yeah,
we can have a default value in here and

74
00:04:45.085 --> 00:04:47.724
we can also have a default value here.

75
00:04:47.724 --> 00:04:48.651
Oops, fetch.

76
00:04:53.436 --> 00:04:54.465
Actually, is that allowed?

77
00:04:54.465 --> 00:04:57.850
Can you have the fetch name
to be the same as this fetch?

78
00:04:57.850 --> 00:04:58.687
I don't actually know.

79
00:04:58.687 --> 00:05:03.336
We'll find out in a second.

80
00:05:03.336 --> 00:05:08.456
And so, now, instead of just calling
delay, we will call this .delay.

81
00:05:08.456 --> 00:05:14.114
So that we control, we, again,
get to the other side of things.

82
00:05:14.114 --> 00:05:21.458
And if I go back to my test,
My test is now timing out, because

83
00:05:21.458 --> 00:05:27.290
the same way as we are mocking the other
response, we have to mock this one, right?

84
00:05:27.290 --> 00:05:32.965
So, we assert that we're gonna
get called in a correct way and

85
00:05:32.965 --> 00:05:38.000
then we do the limax to
have been called with 4000.

86
00:05:38.000 --> 00:05:43.589
And then we say, delay mock mock results
the first result value that we got

87
00:05:43.589 --> 00:05:50.609
we actually resolve it and we now assert
that you have the right output, let's see.

88
00:05:50.609 --> 00:05:56.639
Yeah, that's not allowed,
my fault on that.

89
00:05:56.639 --> 00:05:59.238
Names cannot match, so I can't do this.

90
00:05:59.238 --> 00:06:00.906
This delay is not a function.

91
00:06:02.130 --> 00:06:04.277
Right.

92
00:06:04.277 --> 00:06:08.976
So now the issue is that we
have broken our previous test.

93
00:06:08.976 --> 00:06:12.208
So our previous test now
also wants to delay mock, so

94
00:06:12.208 --> 00:06:14.269
we now have to pass a mock in here.

95
00:06:14.269 --> 00:06:18.661
We can just do under a function like this.

96
00:06:18.661 --> 00:06:20.933
I think this is just gonna
complain about the type.

97
00:06:24.483 --> 00:06:25.083
Let's go back.

98
00:06:25.083 --> 00:06:27.929
Okay, so now we are passing again.

99
00:06:27.929 --> 00:06:29.578
So the same thing that
we have done previously,

100
00:06:29.578 --> 00:06:30.905
we're repeating over here, right?

101
00:06:30.905 --> 00:06:32.577
We are sandwiching ourselves in.

102
00:06:32.577 --> 00:06:37.952
So you can see that this is how we can
control not just the external APIs,

103
00:06:37.952 --> 00:06:41.275
but also we get to control the time,
right?

104
00:06:41.275 --> 00:06:45.473
Because I get to decide when
individual promises resolve, and so

105
00:06:45.473 --> 00:06:48.908
I can change the order in
which the promises resolve,

106
00:06:48.908 --> 00:06:53.581
I can pretend the time is moving
forward by whatever amount I want, etc.

107
00:06:53.581 --> 00:06:57.730
And so, this is a way to get
a full control over the stuff.

