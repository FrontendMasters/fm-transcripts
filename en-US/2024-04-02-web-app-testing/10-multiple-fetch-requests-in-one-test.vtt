WEBVTT

1
00:00:00.390 --> 00:00:02.380
So now,
let's do something more complicated.

2
00:00:02.380 --> 00:00:06.780
So let's describe getRepositories.

3
00:00:08.610 --> 00:00:09.986
Okay, this is plural, right?

4
00:00:09.986 --> 00:00:12.172
GetRepository was getting one.

5
00:00:12.172 --> 00:00:16.624
This is a plural,
which is we have to do more than one.

6
00:00:16.624 --> 00:00:18.020
And I think I wanna show off.

7
00:00:22.086 --> 00:00:27.586
All repositories for a user.

8
00:00:27.586 --> 00:00:30.454
And the thing that needs to happen is,
we need to do pagination, right?

9
00:00:30.454 --> 00:00:36.545
We need to be able to talk to multiple
fetch requests inside of a single test,

10
00:00:36.545 --> 00:00:41.413
because the first page gets you
x number of Items, and so on.

11
00:00:41.413 --> 00:00:48.544
The thing we want is we wanna
say const responsePromise

12
00:00:48.544 --> 00:00:55.062
= api.getRepositories for username, right?

13
00:00:55.062 --> 00:01:02.865
And we wanna expect that the fetch
mark to have been called with,

14
00:01:02.865 --> 00:01:07.503
it's gonna go to a users/ USERNAME.

15
00:01:07.503 --> 00:01:08.973
Is that the correct one?

16
00:01:08.973 --> 00:01:09.955
So it's correct.

17
00:01:09.955 --> 00:01:14.099
But here, it should say per page 30.

18
00:01:16.506 --> 00:01:21.885
So I want 30 repos per page,
and we need pages =1.

19
00:01:21.885 --> 00:01:24.123
So we're doing pagination, right?

20
00:01:24.123 --> 00:01:27.379
We're gonna have other
things coming through.

21
00:01:27.379 --> 00:01:34.839
Now, because we already tested
that headers are correctly done.

22
00:01:34.839 --> 00:01:37.301
I don't wanna keep repeating
myself here and doing that.

23
00:01:37.301 --> 00:01:40.278
So you can say expect any object here,
basically, we're saying.

24
00:01:40.278 --> 00:01:43.193
You know what, I really don't
care what's gonna come here,

25
00:01:43.193 --> 00:01:45.333
because that's not
really part of the test.

26
00:01:45.333 --> 00:01:47.692
We already proved to ourselves
that we can do this.

27
00:01:47.692 --> 00:01:50.842
Let's not keep repeating ourselves because
in the future who wanted to change this,

28
00:01:50.842 --> 00:01:53.436
you don't wanna be changing this
thing in 50 different locations.

29
00:01:53.436 --> 00:01:56.257
And here, we're basically saying,
look, this is not important over here.

30
00:01:56.257 --> 00:01:59.188
I know that some things
have to be done over here,

31
00:01:59.188 --> 00:02:01.550
it's not really done That important.

32
00:02:03.312 --> 00:02:08.859
And of course,
we need to then say fetchMock.

33
00:02:08.859 --> 00:02:10.216
So we wanna resolve this thing.

34
00:02:10.216 --> 00:02:14.408
Now, what we're gonna do is we're
gonna get an array here, right?

35
00:02:14.408 --> 00:02:18.406
And so we're gonna,
oops, I had this right.

36
00:02:18.406 --> 00:02:19.077
Let's push again.

37
00:02:19.077 --> 00:02:21.310
So we're resolve new Response.

38
00:02:26.478 --> 00:02:29.187
JSON.stringify.

39
00:02:29.187 --> 00:02:32.619
And so we're gonna have a bunch of
repos in here, but those repos,

40
00:02:32.619 --> 00:02:34.657
we're gonna build up in a second here.

41
00:02:34.657 --> 00:02:42.041
RepoSet 1, And

42
00:02:42.041 --> 00:02:44.951
we're gonna fill in
the details of it here later.

43
00:02:44.951 --> 00:02:49.128
So we're gonna get one set of repos here.

44
00:02:49.128 --> 00:02:54.587
And then, what we're gonna expect is that
we will have another one of these calls.

45
00:02:57.525 --> 00:03:01.225
And this time,
it's gonna ask for page two.

46
00:03:01.225 --> 00:03:09.151
And then, we will have to respond
with repoSet 2, something like this.

47
00:03:09.151 --> 00:03:15.067
And finally, we want to be able to
assert that if I await response,

48
00:03:15.067 --> 00:03:19.836
then it returns basically
both of these sets in here.

49
00:03:19.836 --> 00:03:24.588
Now, to create this,
how do we know that we need to go further?

50
00:03:24.588 --> 00:03:28.273
We know we need to go further because
we are gonna have 30 items in an array.

51
00:03:28.273 --> 00:03:31.643
And so it knows that if it gets 30
items because it has page size of 30,

52
00:03:31.643 --> 00:03:33.265
then there is a next page, right?

53
00:03:33.265 --> 00:03:38.486
So if we just repo this,
so we fill this with.

54
00:03:38.486 --> 00:03:41.763
Okay, let's do it as a map.

55
00:03:43.575 --> 00:03:47.961
Map, which gets a index and

56
00:03:47.961 --> 00:03:52.740
returns a id, let's say 1.

57
00:03:52.740 --> 00:03:56.519
And then, the second repo,

58
00:03:56.519 --> 00:04:02.978
we will just return single one id s 31,
right?

59
00:04:02.978 --> 00:04:07.007
And so then, we assert that we have
received both of these parts, and

60
00:04:07.007 --> 00:04:11.737
we're sending it as string five versions,
and we get it back as the string five.

61
00:04:11.737 --> 00:04:14.325
So we wrote a test, right?

62
00:04:14.325 --> 00:04:15.736
And this notice this is TDD, right?

63
00:04:15.736 --> 00:04:19.057
We kind of described what
we want ahead of time.

64
00:04:19.057 --> 00:04:22.634
And because we're describing
what we want ahead of time,

65
00:04:22.634 --> 00:04:25.413
it's pretty easy to make
the test look neat.

66
00:04:25.413 --> 00:04:28.701
What you can get yourself into trouble
with is if you write the code first,

67
00:04:28.701 --> 00:04:31.884
then it's very difficult then afterwards
to write the test because you

68
00:04:31.884 --> 00:04:33.231
don't have the right hooks.

69
00:04:33.231 --> 00:04:37.302
But because we wrote the test first,
it's gonna be really easy for us to go and

70
00:04:37.302 --> 00:04:38.755
implement what we wanted.

71
00:04:38.755 --> 00:04:40.136
It's pretty straightforward.

72
00:04:40.136 --> 00:04:41.346
I would imagine, right?

73
00:04:41.346 --> 00:04:43.266
&gt;&gt; So I have a question actually.

74
00:04:43.266 --> 00:04:46.286
So in this case, you add the fetch and

75
00:04:46.286 --> 00:04:51.261
delay function as an argument
to your GitHub, API, right?

76
00:04:51.261 --> 00:04:55.010
&gt;&gt; Mm-hm.
&gt;&gt; And the reason for that is because you

77
00:04:55.010 --> 00:05:00.788
wrote a test that want mock those
particular arguments, right?

78
00:05:00.788 --> 00:05:07.939
Well, a lot of times, you also want to
abstract those details away from the user.

79
00:05:07.939 --> 00:05:11.579
You want to high fetch, and also delay.

80
00:05:11.579 --> 00:05:14.764
So how do you balance that?

81
00:05:14.764 --> 00:05:18.694
Do you just write your code
based on your test that way?

82
00:05:20.368 --> 00:05:22.031
Yeah, so that's a good question.

83
00:05:22.031 --> 00:05:25.585
You would probably create some
kind of a factory for it.

84
00:05:25.585 --> 00:05:26.709
So there's a couple of ways to do it.

85
00:05:26.709 --> 00:05:27.309
So here,

86
00:05:27.309 --> 00:05:32.038
what we could do is we could make sure
that all of these have a default value.

87
00:05:32.038 --> 00:05:33.936
Let me kinda show this.

88
00:05:33.936 --> 00:05:39.863
I think if I just say, fetch here,
which is a default implementing, right?

89
00:05:39.863 --> 00:05:42.245
And I say delay here.

90
00:05:42.245 --> 00:05:47.036
I'm pretty sure this is gonna fail.

91
00:05:47.036 --> 00:05:49.210
No, it's passing, actually,
look at that, it passes.

92
00:05:49.210 --> 00:05:54.014
Okay, so you create your constructor
with defaults set up such that

93
00:05:54.014 --> 00:05:58.745
anybody can just instantiate and
get the correct things in there.

94
00:05:58.745 --> 00:06:00.600
That's one way to do it.

95
00:06:00.600 --> 00:06:05.559
The other way is to have some other
object responsible for creation,

96
00:06:05.559 --> 00:06:10.345
and then you can then ask it to give
it to you as a production mode, or

97
00:06:10.345 --> 00:06:12.584
inside of a test mode, right?

98
00:06:12.584 --> 00:06:16.607
So that instead of going directly inside
your code base and instantiating one of

99
00:06:16.607 --> 00:06:20.089
these things, you could go through
a slight level of indirection and

100
00:06:20.089 --> 00:06:22.850
say, okay,
have this builder give me what I want, and

101
00:06:22.850 --> 00:06:26.479
then you know that this thing is
already configured in the way you want.

102
00:06:26.479 --> 00:06:31.056
And I think this is important because if
you're doing something in production, for

103
00:06:31.056 --> 00:06:34.807
example, this has to be configured
with the current token, right?

104
00:06:34.807 --> 00:06:38.667
And that's a security thing that you
don't wanna check into your code base.

105
00:06:38.667 --> 00:06:44.610
So how do you set up the system so that
you can easily get a hold of this API,

106
00:06:44.610 --> 00:06:49.785
but at the same time configure
with the correct token already.

107
00:06:49.785 --> 00:06:54.168
So again, you probably wanna have kind of
a additional third object responsible for,

108
00:06:54.168 --> 00:06:56.099
for building these things up for you.

109
00:06:56.099 --> 00:06:58.762
Right, so now,
that I have this, we can go in.

110
00:06:58.762 --> 00:07:01.067
And we can use Copilot to do its magic.

111
00:07:01.067 --> 00:07:03.606
So let's see,
declare method getRepositories.

112
00:07:04.806 --> 00:07:07.266
And here it is.

113
00:07:07.266 --> 00:07:08.486
Let's give it the username.

114
00:07:10.196 --> 00:07:13.096
And so now,, we would like to
just make an implementation.

115
00:07:13.096 --> 00:07:15.176
So right now,
it says it just throws an error.

116
00:07:15.176 --> 00:07:18.851
And so that's what the error one over
here says, like this particular.

117
00:07:18.851 --> 00:07:23.967
Test failed because you don't
have an implementation in here,

118
00:07:23.967 --> 00:07:25.965
so let's implement it.

119
00:07:25.965 --> 00:07:30.885
So it's gonna be async, so
we are gonna be in the loop, right?

120
00:07:30.885 --> 00:07:36.858
So, and then what we will do is
we're gonna keep fetching stuff.

121
00:07:36.858 --> 00:07:38.432
Let's see, what is this?

122
00:07:38.432 --> 00:07:41.711
Is this correct?

123
00:07:41.711 --> 00:07:44.229
Let page equals 1, let's see.

124
00:07:44.229 --> 00:07:49.219
So we're in the loop, we keep fetching

125
00:07:49.219 --> 00:07:53.916
it as long as the JSON length is 30.

126
00:07:53.916 --> 00:07:57.674
As long as we have things of
just trying to break it, I see.

127
00:07:58.734 --> 00:08:00.658
Why we can break it, that's fine.

128
00:08:00.658 --> 00:08:03.955
As long as it's less than 30.

129
00:08:05.363 --> 00:08:07.101
Repositories push.

130
00:08:07.101 --> 00:08:10.533
Okay, so this is gonna be true.

131
00:08:10.533 --> 00:08:14.218
And we need to declare repositories.

132
00:08:14.218 --> 00:08:18.729
Costn repositories, look at

133
00:08:27.323 --> 00:08:36.445
Okay so,
&gt;&gt; Because we didnt do the second object.

134
00:08:36.445 --> 00:08:39.408
So we probably wanna reuse this code.

135
00:08:39.408 --> 00:08:40.543
I'm just gonna copy it.

136
00:08:50.070 --> 00:08:51.500
No, not like that.

137
00:08:51.500 --> 00:08:58.073
It's gonna be headers.

138
00:09:01.905 --> 00:09:04.899
Okay, why are you not happy?

139
00:09:04.899 --> 00:09:08.946
In my thing,
I never had the second expectation.

140
00:09:08.946 --> 00:09:10.531
I just had the resolution.

141
00:09:13.975 --> 00:09:16.371
Yeah, and this one has to be 1.

142
00:09:16.371 --> 00:09:17.483
So what is this?

143
00:09:17.483 --> 00:09:23.026
&gt;&gt; I is actually the second
parameter in map.

144
00:09:23.026 --> 00:09:25.925
&gt;&gt; Yeah, underscore I
&gt;&gt; Underscore i, yeah, right?

145
00:09:25.925 --> 00:09:30.070
&gt;&gt; But even then,
why am I getting all this nulls here?

146
00:09:30.070 --> 00:09:34.514
It's like this map doesn't run.

147
00:09:34.514 --> 00:09:37.406
&gt;&gt; You have to fill it with null.

148
00:09:41.980 --> 00:09:46.897
Now it has the right objects, OK.

149
00:09:46.897 --> 00:09:49.011
We don't have the 31st object.

150
00:09:50.191 --> 00:09:52.201
That's because, right, we exit too early.

151
00:09:52.201 --> 00:09:54.411
So we need to move this
piece of code above.

152
00:09:54.411 --> 00:09:55.361
Look at that.

153
00:09:55.361 --> 00:09:56.462
We found a bug in our implementation.

154
00:09:56.462 --> 00:10:00.854
There we go, okay.

155
00:10:00.854 --> 00:10:05.791
But notice we found a bug,
as in the copilot generated this push.

156
00:10:05.791 --> 00:10:08.473
It exited before it pushed it in there,
right?

157
00:10:08.473 --> 00:10:15.480
Interesting that you would
just get this particular bug.

158
00:10:15.480 --> 00:10:20.219
The main thing I wanna show off, though,
is how you basically compose these

159
00:10:20.219 --> 00:10:23.936
things and how you can get bigger and
bigger things in here.

160
00:10:23.936 --> 00:10:26.941
&gt;&gt; Testing asynchronous code is difficult.

161
00:10:26.941 --> 00:10:29.867
&gt;&gt; Testing asynchronous code is difficult,
but

162
00:10:29.867 --> 00:10:33.549
I wanna point out just how useful
it is to have these marks.

163
00:10:33.549 --> 00:10:38.812
Because with marks you get to
control when things resolve.

164
00:10:38.812 --> 00:10:42.757
When you control when things resolve,
you can do all these things.

165
00:10:42.757 --> 00:10:46.066
By the way,
I think I have to add this delay here.

166
00:10:46.066 --> 00:10:47.197
Yeah, it fails without this delay.

167
00:10:47.197 --> 00:10:50.016
This is an example for it, right?

168
00:10:50.016 --> 00:10:55.374
We resolve this particular promise,
but because we don't yield to

169
00:10:55.374 --> 00:11:00.829
the skill Scheduler, our test blocks,
the schedule from running.

170
00:11:00.829 --> 00:11:06.149
And so await delay(0) is a common trick
to basically just yield to the schedule,

171
00:11:06.149 --> 00:11:08.433
so that the other promises can run.

172
00:11:08.433 --> 00:11:12.402
So when we come back,
we can go and assert other things.

