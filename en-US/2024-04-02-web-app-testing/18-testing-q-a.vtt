WEBVTT

1
00:00:00.090 --> 00:00:02.330
When would you use a Playwright and
when would you use Storybook?

2
00:00:02.330 --> 00:00:05.960
I think is the, the gist of it, or
at least that's what I'm going to answer.

3
00:00:07.250 --> 00:00:12.622
So, with Playwright, you could,
by the way, use Playwright with Storybook,

4
00:00:12.622 --> 00:00:17.220
and a lot of people do in order
to verify different things.

5
00:00:17.220 --> 00:00:22.650
But the basic idea of Storybook is,
can I treat my components as units and

6
00:00:22.650 --> 00:00:26.398
essentially create a unit test for
my component?

7
00:00:28.678 --> 00:00:33.683
Whereas if you just do Playwright,
typically the Playwright runs on top

8
00:00:33.683 --> 00:00:38.769
of the end-to-end test, which is
the application itself, and because

9
00:00:38.769 --> 00:00:44.927
of that the end-to-end test is you're
not testing things in isolation, right?

10
00:00:44.927 --> 00:00:48.455
So for example, if we go back to,
to our example of Chicago, and I don't,

11
00:00:48.455 --> 00:00:49.856
there we go, it's running.

12
00:00:53.607 --> 00:00:56.315
Sorry, the defaults are okay,

13
00:00:56.315 --> 00:01:01.127
if you go to this particular example,
it is difficult for

14
00:01:01.127 --> 00:01:07.163
us to assert that what's actually
showing here is the correct output.

15
00:01:08.453 --> 00:01:13.489
Whereas in Storybook,
we can instantiate just a component and

16
00:01:13.489 --> 00:01:17.099
then give it a data set
that we are sure about,

17
00:01:17.099 --> 00:01:21.754
in this case bunch of points
that we know are diagonal, and

18
00:01:21.754 --> 00:01:28.345
we can easily verify visually that like,
these are diagonal points, right?

19
00:01:28.345 --> 00:01:32.811
So, Storybook is a way of getting
your individual components running in

20
00:01:32.811 --> 00:01:37.131
isolation, whereas Playwright is
just running whatever you want and

21
00:01:37.131 --> 00:01:40.644
typically you run Playwright
on the whole application,

22
00:01:40.644 --> 00:01:43.005
so it's truly an end-to-end test.

23
00:01:43.005 --> 00:01:45.896
Whereas Storybook is
essentially a unit test for

24
00:01:45.896 --> 00:01:50.687
your components, it's not quite unit test
because a lot of things are in there,

25
00:01:50.687 --> 00:01:54.015
but it's essentially a unit test for
your components.

26
00:01:54.015 --> 00:01:58.696
&gt;&gt; Have you ever gotten to a point where
this kind of mocking scenario that you

27
00:01:58.696 --> 00:02:03.552
made gets too complicated and you
almost need tests for the mocks itself?

28
00:02:03.552 --> 00:02:06.032
Is that like a code smell?

29
00:02:06.032 --> 00:02:08.882
&gt;&gt; Yes.
&gt;&gt; Yeah, how would you handle that?

30
00:02:08.882 --> 00:02:12.882
&gt;&gt; So,
this typically happens with legacy code.

31
00:02:12.882 --> 00:02:15.454
If somebody gives you a code
that you already have and

32
00:02:15.454 --> 00:02:19.593
you're trying to mock it out,
you tend to create lots and lots of mocks.

33
00:02:19.593 --> 00:02:20.691
It is a smell, but

34
00:02:20.691 --> 00:02:25.763
it's a symptom of the fact that the code
you're trying to test there's too much.

35
00:02:26.823 --> 00:02:31.517
And so, the solution I'm not
sure if it's feasible for you,

36
00:02:31.517 --> 00:02:36.643
would be to refactor the code base
to make it into smaller tests.

37
00:02:36.643 --> 00:02:40.177
Now, because it's a legacy code base,
maybe that might not be a solution, and in

38
00:02:40.177 --> 00:02:44.281
that particular case, what you wanna do is
you wanna create more intelligent mocks.

39
00:02:44.281 --> 00:02:46.486
So rather than having
mocks that individually,

40
00:02:46.486 --> 00:02:50.030
I have to kind of essentially, if you
think about it, inside of our unit test,

41
00:02:50.030 --> 00:02:51.661
we are training our mocks, right?

42
00:02:51.661 --> 00:02:59.182
So if I go back to,
These were our mocks, I believe?

43
00:03:01.782 --> 00:03:02.562
No, they were not.

44
00:03:04.292 --> 00:03:10.365
Sorry, it wasn't Github, not clustering.

45
00:03:15.077 --> 00:03:17.667
So here we are training, right, we are,

46
00:03:17.667 --> 00:03:22.107
you can think of this as a training
the mark to do what we want, we calling

47
00:03:22.107 --> 00:03:26.849
the results at specific order in order
to train the output to do what we want.

48
00:03:27.989 --> 00:03:33.319
And so this can get cumbersome, and so
in that particular case, maybe instead

49
00:03:33.319 --> 00:03:38.429
of using mocks, you actually make
a your own implementation of the fetch.

50
00:03:38.429 --> 00:03:43.451
So that can be then can have many of
the defaults already set up in there, or

51
00:03:43.451 --> 00:03:48.999
has typical places where you can
navigate with expected responses, etc.

52
00:03:48.999 --> 00:03:53.229
So the way to deal with it is to create
more intelligent mocks for yourself.

53
00:03:55.249 --> 00:03:59.097
But like the first level would be, don't
write code that depends on two Too many

54
00:03:59.097 --> 00:04:01.970
marks, if that is not possible
because of historical etc,

55
00:04:01.970 --> 00:04:04.729
the follow up would be make
your marks more intelligent so

56
00:04:04.729 --> 00:04:07.567
that at the end of the day,
your tests are still readable.

