WEBVTT

1
00:00:00.529 --> 00:00:05.262
Now, let's make a, kind of a bigger test.

2
00:00:05.262 --> 00:00:06.837
So, this is kind of a trivial test,

3
00:00:06.837 --> 00:00:09.259
let's see if we can make
something more interesting.

4
00:00:09.259 --> 00:00:14.038
So let's test if it prints

5
00:00:16.848 --> 00:00:18.594
Current parameters.

6
00:00:28.801 --> 00:00:32.800
So, again, we're gonna navigate,
but when you navigate a page,

7
00:00:32.800 --> 00:00:35.692
you can specify additional
parameters in here.

8
00:00:35.692 --> 00:00:39.679
For example, I can say size equals 1,000.

9
00:00:41.790 --> 00:00:43.160
Number of clusters equals 5.

10
00:00:43.160 --> 00:00:44.210
Let's see.

11
00:00:44.210 --> 00:00:46.855
Is that the correct parameter?

12
00:00:46.855 --> 00:00:49.109
Size, distance, mincluster.

13
00:00:49.109 --> 00:00:55.092
So, size is that, and
I can say distance is 450.

14
00:00:55.092 --> 00:00:58.499
So let's say we wanted to navigate
with this particular URL,

15
00:00:58.499 --> 00:01:00.147
just to kind of prove a point.

16
00:01:00.147 --> 00:01:04.071
I can go here.

17
00:01:04.071 --> 00:01:06.823
And, where is our Chicago?

18
00:01:06.823 --> 00:01:10.042
We can navigate and
now you can see that the default size and

19
00:01:10.042 --> 00:01:12.087
distance has been updated, right?

20
00:01:12.087 --> 00:01:15.107
Let's say we wanted to assert
this particular thing.

21
00:01:15.107 --> 00:01:20.063
So the most obvious way to
do that is you navigate and

22
00:01:20.063 --> 00:01:24.214
then you start selecting things like, for

23
00:01:24.214 --> 00:01:29.187
example, you say a wait,
expect page.locator.

24
00:01:29.187 --> 00:01:31.031
And I think I have a size.

25
00:01:31.031 --> 00:01:33.656
Locator is the way you
find things on a page.

26
00:01:33.656 --> 00:01:38.670
And I've already gave size a class,

27
00:01:38.670 --> 00:01:43.035
so that I can easily find it, and

28
00:01:43.035 --> 00:01:51.144
then I can assert that size
two have text thousand, right?

29
00:01:51.144 --> 00:01:52.974
Why is this?

30
00:01:58.595 --> 00:01:59.874
So, if you look at this.

31
00:01:59.874 --> 00:02:06.615
Thousand right here, You'll see that
it's a span and it already has a class.

32
00:02:06.615 --> 00:02:09.495
So I've already given it a class so
that it's easy for

33
00:02:09.495 --> 00:02:11.287
me to go and select it on the page.

34
00:02:11.287 --> 00:02:13.770
Otherwise, you would have a really hard
time finding things on a page, right?

35
00:02:13.770 --> 00:02:17.204
So typically, you kind of, again,
this is another example of where

36
00:02:17.204 --> 00:02:19.946
you design the application
with testability in mind.

37
00:02:19.946 --> 00:02:23.953
You put extra stuff in there so
that later on it makes it easier for

38
00:02:23.953 --> 00:02:28.127
you to locate and find them and
assert different things around it.

39
00:02:28.127 --> 00:02:30.517
And we can assert other thing.

40
00:02:30.517 --> 00:02:33.538
First of all, let's see if it runs.

41
00:02:33.538 --> 00:02:36.360
So, let's see if our test is passing.

42
00:02:44.701 --> 00:02:46.098
And it looks like it's timing out.

43
00:02:46.098 --> 00:02:46.751
No, it's passed.

44
00:02:46.751 --> 00:02:47.902
So, it did pass.

45
00:02:47.902 --> 00:02:52.120
And you can see that it actually
highlighted the selector on a page.

46
00:02:52.120 --> 00:02:53.562
If you click on this thing,

47
00:02:53.562 --> 00:02:57.347
you can see it highlighting that this
is the part that it's asserting.

48
00:02:57.347 --> 00:03:02.825
Now, the thing I wanna show you is that,
you will, let's make more assertions here.

49
00:03:02.825 --> 00:03:07.529
So, we have size, we have distance,

50
00:03:07.529 --> 00:03:10.475
that should be 450.

51
00:03:17.078 --> 00:03:22.414
And we have min-cluster size And

52
00:03:22.414 --> 00:03:26.804
let's say that's, I think that's 10,
what is the default?

53
00:03:26.804 --> 00:03:31.742
Not this 5, sorry, this is 5 here, and so
now, I should be able to rerun this test

54
00:03:31.742 --> 00:03:35.781
and I should have more assertions and
they all should pass, right?

55
00:03:35.781 --> 00:03:37.012
So they're still passing.

56
00:03:37.012 --> 00:03:38.452
The thing wanna show you is,

57
00:03:38.452 --> 00:03:41.459
you're gonna get bored after
a while writing these tests.

58
00:03:41.459 --> 00:03:47.831
And especially not only are you gonna get
bored, it's gonna get annoying because all

59
00:03:47.831 --> 00:03:53.863
these selectors will make it difficult for
you to reason about the application.

60
00:03:53.863 --> 00:03:57.306
So what you want to do is you want
to put a level of indirection.

61
00:03:57.306 --> 00:04:01.303
Between your unit tests or
rather your end-to-end tests, and

62
00:04:01.303 --> 00:04:02.939
the actual application.

63
00:04:02.939 --> 00:04:07.593
And so, in the world of e2e,
these are called page objects.

64
00:04:07.593 --> 00:04:14.524
And a page object is the logical
representation of what the page does.

65
00:04:14.524 --> 00:04:17.546
So let's build one.

66
00:04:17.546 --> 00:04:21.526
So, what you want is you
create a cluster page,

67
00:04:23.999 --> 00:04:28.397
And the constructor of
the cluster page will take page,

68
00:04:30.422 --> 00:04:33.962
And let's say we want to get the title.

69
00:04:33.962 --> 00:04:39.434
So we can create a title on it,
and the title really is, oops,

70
00:04:39.434 --> 00:04:45.031
return this page locator h1,
no, this page, page.title.

71
00:04:49.279 --> 00:04:51.775
And we also wanna be able to get size.

72
00:04:56.904 --> 00:04:58.777
Wow, Autopilot is amazing.

73
00:04:58.777 --> 00:05:02.637
Okay, get distance, yep, wow.

74
00:05:02.637 --> 00:05:05.489
Get min-cluster size, yes.

75
00:05:05.489 --> 00:05:07.081
You're reading my mind.

76
00:05:07.081 --> 00:05:09.825
It's just amazing when AI works, right?

77
00:05:09.825 --> 00:05:12.263
So, now you have these things, and

78
00:05:12.263 --> 00:05:15.768
you probably also want to
be able to do navigation.

79
00:05:15.768 --> 00:05:21.461
So you wanna create a, sorry,
a saying go to and you wanna navigate and

80
00:05:21.461 --> 00:05:25.805
you probably instead of
creating this URLs this way,

81
00:05:25.805 --> 00:05:29.783
you probably want to
create them as parameters.

82
00:05:29.783 --> 00:05:33.896
You wanna basically say something like,

83
00:05:33.896 --> 00:05:37.780
I wanna have a size, which is a number.

84
00:05:39.733 --> 00:05:42.774
And I wanna have a distance and
min-cluster as well, AI,

85
00:05:42.774 --> 00:05:44.210
you are really rocking it.

86
00:05:45.757 --> 00:05:47.033
Create this.

87
00:05:48.502 --> 00:05:52.607
And, sorry, why is it not?

88
00:05:52.607 --> 00:05:58.726
Right, because it is right, we do

89
00:06:06.641 --> 00:06:11.075
Okay, so you're saying, look, when you do
go to, you can give me these defaults and

90
00:06:11.075 --> 00:06:13.371
I'm gonna build up the URL for you, right?

91
00:06:13.371 --> 00:06:18.206
So you will start with something like,
const url = equals new URL.

92
00:06:20.622 --> 00:06:24.575
And then you can say,
if you have size, then set the size,

93
00:06:24.575 --> 00:06:29.578
if you have distance, set the distance,
if you have min-cluster size,

94
00:06:29.578 --> 00:06:33.223
set them in cluster size and
then you do URL to string.

95
00:06:39.404 --> 00:06:43.588
So now we can go back Into our original
code and we can do some re-factorings.

96
00:06:47.940 --> 00:06:53.449
What we do, we say const cluster

97
00:06:53.449 --> 00:06:57.741
page equals new, oops.

98
00:07:01.382 --> 00:07:05.140
And now that we have a cluster page,
we can rewrite it in a more natural way.

99
00:07:05.140 --> 00:07:10.180
You can say await cluster page go-to,
we don't have to specify anything there.

100
00:07:10.180 --> 00:07:16.087
And then we can write it in this
particular format, which is kind of nicer.

101
00:07:16.087 --> 00:07:18.566
Similarly, in this case,
instead of writing,

102
00:07:18.566 --> 00:07:22.138
I'm gonna actually just comment
this out so it's easier to compare.

103
00:07:22.138 --> 00:07:28.647
Instead of writing this, we can write,
go to, and now we have type safety,

104
00:07:28.647 --> 00:07:34.751
and we can specify that we want
a distance of 450, size of 1000,

105
00:07:34.751 --> 00:07:39.782
minClusterSize of 5, and
then we can Write assertions.

106
00:07:39.782 --> 00:07:45.712
And again, assertions we don't
have to worry about the selectors,

107
00:07:45.712 --> 00:07:51.844
we can just say, hey, on this page,
to have this value, this value and

108
00:07:51.844 --> 00:07:57.086
that value so let's see if we
have still have a working test.

109
00:08:02.481 --> 00:08:07.243
That test works, and
that test works as well.

110
00:08:07.243 --> 00:08:12.010
So the idea behind, let me delete this.

111
00:08:12.010 --> 00:08:13.541
Well, let me just keep it here.

112
00:08:13.541 --> 00:08:18.278
The idea behind a page object is that
it provides a level of indirection

113
00:08:18.278 --> 00:08:20.297
between you and just the DOM.

114
00:08:20.297 --> 00:08:21.918
Cuz the DOM is difficult to work with.

115
00:08:21.918 --> 00:08:24.535
Selectors are difficult to understand,
right?

116
00:08:24.535 --> 00:08:29.051
But what it allows you to do is, let's
say in the future you decide to refactor

117
00:08:29.051 --> 00:08:31.639
the way you display stuff on it for
the user.

118
00:08:31.639 --> 00:08:32.923
You can do that.

119
00:08:32.923 --> 00:08:36.193
You then have to go and
update the cluster page object, but

120
00:08:36.193 --> 00:08:40.085
you don't have to update hundreds
of different tests to match this.

121
00:08:40.085 --> 00:08:45.143
Because the test speak a language
that is strongly typed, right?

122
00:08:45.143 --> 00:08:46.380
The TypeScript is strongly typed.

123
00:08:46.380 --> 00:08:51.210
So here, instead of saying,
give me a locator that has span distance,

124
00:08:51.210 --> 00:08:55.960
which you might forget, or
somebody might refactor or change, etc,

125
00:08:55.960 --> 00:08:58.713
you can just say, give me the distance.

126
00:08:58.713 --> 00:09:01.729
And you can work with
that particular thing.

127
00:09:01.729 --> 00:09:05.004
Does that make sense?

128
00:09:05.004 --> 00:09:06.544
Yes.

129
00:09:06.544 --> 00:09:13.342
&gt;&gt; What do you think about, I've used
the testing library frameworks before and

130
00:09:13.342 --> 00:09:17.359
they prioritize accessibility attributes,

131
00:09:17.359 --> 00:09:21.584
what do you think about
using stuff like that?.

132
00:09:21.584 --> 00:09:24.134
&gt;&gt; Well, in general,
you want to set up your page so

133
00:09:24.134 --> 00:09:26.012
that it's easier to test, right?

134
00:09:26.012 --> 00:09:27.497
And you want to add extra attributes.

135
00:09:27.497 --> 00:09:30.770
Whether those attributes come
in the form of classes or

136
00:09:30.770 --> 00:09:35.478
accessibility attributes or some other
format, it doesn't really matter.

137
00:09:35.478 --> 00:09:39.665
What matters is that you
create your up page, right,

138
00:09:39.665 --> 00:09:42.746
in whatever framework you're using.

139
00:09:42.746 --> 00:09:48.005
You create this page object,
which abstracts away the selectors, right?

140
00:09:48.005 --> 00:09:53.326
It hides the selectors from you, and
does not just hiding of the selectors,

141
00:09:53.326 --> 00:09:56.497
it also hides how to do URL encoding,
right?

142
00:09:56.497 --> 00:09:58.691
And then you just have the test.

143
00:09:58.691 --> 00:10:02.370
And so the test,
instead of going to individual selectors,

144
00:10:02.370 --> 00:10:07.072
which are hard to read and understand and
see why, it becomes easier to read.

145
00:10:07.072 --> 00:10:12.649
And also, this now provides a place where
you can leave documentation, right?

146
00:10:12.649 --> 00:10:17.252
You can say like represents

147
00:10:17.252 --> 00:10:22.863
the current size of the dataset.

148
00:10:22.863 --> 00:10:23.943
Or something like that, right?

149
00:10:23.943 --> 00:10:28.123
So it's a way of providing
all this useful information.

150
00:10:28.123 --> 00:10:33.193
So the page object basically
gives you a programmatic view

151
00:10:33.193 --> 00:10:38.377
to all the knobs and
values that the user might be able to do.

152
00:10:38.377 --> 00:10:40.367
So if you had a button over there,

153
00:10:40.367 --> 00:10:43.646
then that button would be
exposed in your page object.

