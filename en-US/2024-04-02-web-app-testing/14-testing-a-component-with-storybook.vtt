WEBVTT

1
00:00:00.270 --> 00:00:03.200
Let's talk about testing UI, right?

2
00:00:03.200 --> 00:00:07.460
So again, what we're talking about
is this white box in here, right?

3
00:00:07.460 --> 00:00:08.610
There's a page.

4
00:00:08.610 --> 00:00:11.190
This page has whole bunch of things on it.

5
00:00:11.190 --> 00:00:14.501
Well, we just want to assert, just like
when we were talking about the whole

6
00:00:14.501 --> 00:00:16.790
application, we were focusing on a unit.

7
00:00:16.790 --> 00:00:20.335
Our unit of testing now is gonna
become just as white box in here.

8
00:00:20.335 --> 00:00:26.135
And we wanna assert that we can
correctly render this white box.

9
00:00:26.135 --> 00:00:29.219
So how is this box rendered?

10
00:00:29.219 --> 00:00:34.985
So here's our component
which we call a cluster.

11
00:00:34.985 --> 00:00:36.185
And it gets cluster props.

12
00:00:36.185 --> 00:00:39.574
And these props are gonna be the data set,
the width and the height.

13
00:00:39.574 --> 00:00:41.856
And looks like the size is optional,
right?

14
00:00:41.856 --> 00:00:49.065
The size is the size of
the box on the screen, right?

15
00:00:49.065 --> 00:00:55.690
And so all it does is grabs the data set,
right?

16
00:00:55.690 --> 00:01:01.213
And we iterate over the data set,
and for each item in a dataset,

17
00:01:01.213 --> 00:01:06.120
we create, in this case,
a b element where we pass in left

18
00:01:06.120 --> 00:01:10.445
hop with the compute properties,
colors, etc.

19
00:01:11.865 --> 00:01:14.111
Now, you could do several things.

20
00:01:14.111 --> 00:01:17.638
First of all, you could definitely run
a unit test to compute position, right?

21
00:01:17.638 --> 00:01:22.288
This would be a good function to make sure
that this thing is doing what you think

22
00:01:22.288 --> 00:01:23.141
it's doing.

23
00:01:23.141 --> 00:01:24.973
I assume that it's not gonna be very hard,
or

24
00:01:24.973 --> 00:01:27.910
we don't have to go because
we've already kind of done it.

25
00:01:27.910 --> 00:01:30.810
But how would you unit test
this particular component?

26
00:01:30.810 --> 00:01:35.553
You could write a kind of a snapshot
where you assert that the JSX that comes

27
00:01:35.553 --> 00:01:38.230
out of this is of the correct shape.

28
00:01:38.230 --> 00:01:43.488
But that doesn't actually answer
whether it looks right, right?

29
00:01:43.488 --> 00:01:46.876
So what you really want is
a way to instantiate this

30
00:01:46.876 --> 00:01:50.991
component in isolation and
take an image screenshot of it and

31
00:01:50.991 --> 00:01:54.878
then compare it against
the previous image screenshot.

32
00:01:55.938 --> 00:01:58.604
And it turns out that such
a thing already exists.

33
00:01:58.604 --> 00:02:03.794
Storybook is, the idea is you put
individual components on a page,

34
00:02:03.794 --> 00:02:08.627
you control different things,
different inputs on it, etc.

35
00:02:08.627 --> 00:02:13.440
And you take a image screenshot
of this particular output

36
00:02:13.440 --> 00:02:16.254
to see how this thing is working.

37
00:02:18.084 --> 00:02:20.829
So let's install this.

38
00:02:27.176 --> 00:02:28.161
Let's see, right?

39
00:02:28.161 --> 00:02:29.831
I believe we have to
run a special command.

40
00:02:29.831 --> 00:02:32.055
Let's see, integration.

41
00:02:32.055 --> 00:02:36.859
So every framework will have
a different way of doing this.

42
00:02:36.859 --> 00:02:39.405
Where`s Storybook?

43
00:02:39.405 --> 00:02:41.238
Okay, here we go.

44
00:02:41.238 --> 00:02:42.976
Let's run this command.

45
00:02:42.976 --> 00:02:47.575
So this installs the Storybook
inside of our application.

46
00:02:47.575 --> 00:02:49.982
Now, this is specific to different
frameworks will have different things.

47
00:02:49.982 --> 00:02:51.596
This is not the important bit.

48
00:02:51.596 --> 00:02:52.676
Let's just go and install it.

49
00:02:54.206 --> 00:02:57.966
And more we're gonna talk about
how we actually create a test.

50
00:02:57.966 --> 00:03:00.881
Basic idea of Storybook is,
you have lots lots of components,

51
00:03:00.881 --> 00:03:04.411
like think of it like a design
system in your application.

52
00:03:04.411 --> 00:03:09.042
And what you wanna do is you wanna
be able to get each component up and

53
00:03:09.042 --> 00:03:11.772
running in isolation and then poke at it

54
00:03:11.772 --> 00:03:16.757
in isolation to kind of see if the right
things are actually happening.

55
00:03:18.401 --> 00:03:23.276
And because we are talking about
a visual representation of what we want,

56
00:03:23.276 --> 00:03:27.600
really turns out that image snapshots
are really the only good way

57
00:03:27.600 --> 00:03:32.571
to kinda prove that the thing looks like
the way we intended it to look like.

58
00:03:32.571 --> 00:03:36.577
Because you could easily create a CSS
change somewhere in the global style sheet

59
00:03:36.577 --> 00:03:39.220
which would affect the way
your component renders.

60
00:03:41.857 --> 00:03:47.475
Okay, now if I remember correctly,
I believe I already have Storybook, okay?

61
00:03:47.475 --> 00:03:51.745
So now once we have this.

62
00:03:51.745 --> 00:03:53.662
&gt;&gt; Quick just adds those scripts for you?

63
00:03:53.662 --> 00:03:58.236
&gt;&gt; Yes, a lot of frameworks have
a CLI that does kind of the setup for

64
00:03:58.236 --> 00:04:04.616
you Okay, so what does this look like?

65
00:04:04.616 --> 00:04:06.276
In this case, this is just a demo test.

66
00:04:06.276 --> 00:04:07.916
We will add our own test in a second.

67
00:04:07.916 --> 00:04:12.137
But basic idea is that you have a button,
and then in this particular case,

68
00:04:12.137 --> 00:04:15.806
you said,
this is what the button should look like.

69
00:04:15.806 --> 00:04:17.922
And then in here,
you can click on a button and

70
00:04:17.922 --> 00:04:21.118
you can come kind of interact with
it to see if it kind of makes sense.

71
00:04:21.118 --> 00:04:24.738
You can also go here and
say medium, I think large.

72
00:04:24.738 --> 00:04:29.508
So you can get a large button,
you can do small, right?

73
00:04:29.508 --> 00:04:33.998
So you can kind of prove to yourself that
things are rendering the way you want.

74
00:04:33.998 --> 00:04:37.608
So let's create a test now for
our cluster.

75
00:04:37.608 --> 00:04:39.439
What you wanna do is you wanna export.

76
00:04:40.449 --> 00:04:43.259
And as a convention they call
it the primary for a second.

77
00:04:43.259 --> 00:04:48.459
So, let's create different situations.

78
00:04:48.459 --> 00:04:50.339
Let's call the first one called square.

79
00:04:51.569 --> 00:04:55.285
And a square is going to be a story.

80
00:04:56.946 --> 00:04:58.851
And what is the story?

81
00:04:58.851 --> 00:05:03.677
Story is a story object

82
00:05:03.677 --> 00:05:07.741
which we import and

83
00:05:07.741 --> 00:05:14.853
it's gonna take cluster props.

84
00:05:18.719 --> 00:05:26.212
And we have to create a default export so
that the Storybook knows how to load this.

85
00:05:31.043 --> 00:05:38.547
And the component we're
testing is cluster.

86
00:05:38.547 --> 00:05:46.423
Types I don't think you have to declare
printables just empty think, and.

87
00:05:56.815 --> 00:06:01.672
Okay, so with this,
we should be able to create a first story.

88
00:06:03.422 --> 00:06:06.943
Let's create a super simple one.

89
00:06:06.943 --> 00:06:10.565
So for now,
I am just going to say dataset.

90
00:06:14.328 --> 00:06:16.866
Dataset is.

91
00:06:19.969 --> 00:06:25.219
Right, so,
let's just leave this empty for a second.

92
00:06:25.219 --> 00:06:28.069
I'll show you how to
fill this in a second.

93
00:06:28.069 --> 00:06:30.280
And hopes args.

94
00:06:33.638 --> 00:06:36.436
And we want to have width.

95
00:06:40.716 --> 00:06:44.581
Width is 250 height is 250.

96
00:06:44.581 --> 00:06:47.525
Let's say size is.

97
00:06:53.423 --> 00:06:57.283
And now we've created say,
well how do we render this?

98
00:06:57.283 --> 00:07:01.497
And so we just going to create
a cluster and this takes props.

99
00:07:12.708 --> 00:07:16.438
Okay, I know it's red, but
I think we're gonna come back to it later.

100
00:07:16.438 --> 00:07:23.310
But I believe that that
should be enough to,

101
00:07:23.310 --> 00:07:27.953
okay, maybe I have to restart

102
00:07:27.953 --> 00:07:32.551
this to pick it up What am I missing here?

103
00:07:32.551 --> 00:07:35.836
source components?

104
00:07:35.836 --> 00:07:38.852
Right, because the default
places source components, right?

105
00:07:38.852 --> 00:07:43.971
For whatever reason we did not put
our component in the right location,

106
00:07:43.971 --> 00:07:46.541
and I think it is in Storybook Main.

107
00:07:46.541 --> 00:07:49.961
And we just say anything,
not just components.

108
00:07:54.621 --> 00:07:55.831
It has to be restarted.

109
00:07:58.591 --> 00:07:59.791
Here we go, okay.

110
00:07:59.791 --> 00:08:01.722
So now we have our cluster.

111
00:08:01.722 --> 00:08:05.106
And we have our default
one called square and

112
00:08:05.106 --> 00:08:09.146
we can't really see it
unless we flip the darkness.

113
00:08:09.146 --> 00:08:13.253
How do I do dark?

114
00:08:13.253 --> 00:08:14.559
It's not gonna show it.

115
00:08:14.559 --> 00:08:17.021
I have to have a data set.

116
00:08:17.021 --> 00:08:18.167
Okay, I think I have to have a data set.

117
00:08:18.167 --> 00:08:21.805
I'm not gonna escape this.

118
00:08:23.787 --> 00:08:26.212
Cluster storage, okay, so
let's do the data set.

119
00:08:26.212 --> 00:08:28.491
So we need to come up with clusters.

120
00:08:28.491 --> 00:08:30.114
And we could do it manually or

121
00:08:30.114 --> 00:08:34.387
remember we already have this function
that does the clustering, right?

122
00:08:34.387 --> 00:08:38.499
So if we could just push in data into it.

123
00:08:38.499 --> 00:08:43.452
So we can say we want to
put in a square data, and

124
00:08:43.452 --> 00:08:48.461
let's do the parameters
of it actually here.

125
00:08:48.461 --> 00:08:52.713
We can say const

126
00:08:52.713 --> 00:08:57.626
square, cluster

127
00:09:04.062 --> 00:09:10.784
10, 2 are the parameters, and so
now we have to pass in our longitude 0.

128
00:09:14.386 --> 00:09:16.320
So to make a square, right?

129
00:09:16.320 --> 00:09:20.731
You would do 0, 0, 0,
not longitude, it's lng.

130
00:09:20.731 --> 00:09:26.087
You would make 0, 0, 0, 1, 1, and

131
00:09:26.087 --> 00:09:32.223
so those are four points in the corner,
right?

132
00:09:32.223 --> 00:09:36.643
And so now that we have this
fed through the clustering,

133
00:09:36.643 --> 00:09:40.511
I can pass it to my data,
and I should see the box.

134
00:09:40.511 --> 00:09:41.611
Here we go.

135
00:09:41.611 --> 00:09:43.071
So now this box is too big.

136
00:09:43.071 --> 00:09:44.735
Can I zoom out?

137
00:09:44.735 --> 00:09:47.935
Right, so
we have a box now with four points.

138
00:09:47.935 --> 00:09:49.971
Notice just like when
we were unit testing,

139
00:09:49.971 --> 00:09:52.205
we didn't want to do the real dataset.

140
00:09:52.205 --> 00:09:57.405
Instead, we're making up our data set that
is useful for us from testing perspective.

141
00:09:57.405 --> 00:10:02.665
Having four particular points in the space
to be able to do that is useful.

142
00:10:03.715 --> 00:10:05.646
Does that make sense?

143
00:10:05.646 --> 00:10:10.556
So now the thing to do is to be able
to maybe create other scenarios.

144
00:10:10.556 --> 00:10:13.042
So let's say we want to
create a diagonal scenario.

145
00:10:13.042 --> 00:10:17.420
So we have a square and
let's create a diagonal.

146
00:10:24.934 --> 00:10:27.859
And maybe we want to create a smaller one,

147
00:10:27.859 --> 00:10:30.961
just to kind of prove
that the sizing works.

148
00:10:30.961 --> 00:10:33.413
And so
now we have to come up with a diagonal.

149
00:10:37.004 --> 00:10:42.871
Diagonal would be 001122,

150
00:10:42.871 --> 00:10:47.124
and maybe 33, right?

151
00:10:50.208 --> 00:10:54.423
So now notice we have the square,
but I can also go to diagonal and

152
00:10:54.423 --> 00:10:57.167
prove that this particular thing works.

153
00:10:57.167 --> 00:11:00.530
It seems a little squished, no?

154
00:11:00.530 --> 00:11:02.058
What did I mess up?

155
00:11:02.058 --> 00:11:05.531
Because I didn't do 200 here.

156
00:11:05.531 --> 00:11:06.061
Here we go.

157
00:11:06.061 --> 00:11:07.414
So we have a diagonal.

158
00:11:07.414 --> 00:11:10.978
So this is how you would test
your items in isolation, eight?

159
00:11:10.978 --> 00:11:15.318
That are independent from everything
else in your code base, right?

160
00:11:15.318 --> 00:11:19.063
Just like with unit tests, we were trying
to isolate and not have to worry about

161
00:11:19.063 --> 00:11:22.091
the whole world, and
we just wanna test one particular thing.

162
00:11:22.091 --> 00:11:27.504
This particular thing would allow you to
do the same thing in isolation as one.

163
00:11:27.504 --> 00:11:31.676
But the basic idea here of
Storybook is that it allows you to

164
00:11:31.676 --> 00:11:35.521
treat your components as individual units,
right?

165
00:11:35.521 --> 00:11:41.158
And because they're individual units,
what you can do is,

166
00:11:41.158 --> 00:11:45.147
for example, here is our square, right?

167
00:11:45.147 --> 00:11:47.544
And I can go, and I can modify.

168
00:11:47.544 --> 00:11:51.113
So if I go to the clusters,
I can see that I have keys in here.

169
00:11:51.113 --> 00:11:54.535
And I can go, and
I can actually modify these numbers.

170
00:11:54.535 --> 00:11:57.371
So I can decide that this is now 1.

171
00:11:57.371 --> 00:11:59.094
Maybe that was too much.

172
00:11:59.094 --> 00:12:02.951
Now this is 0.5.

173
00:12:02.951 --> 00:12:09.079
If I could type 0.5, and I have actually
moved the visual representation, right?

174
00:12:09.079 --> 00:12:15.185
So, it is a way for you to poke at
your components in an isolated way,

175
00:12:15.185 --> 00:12:19.597
so that you can then assert
the right UI happens.

176
00:12:19.597 --> 00:12:25.119
We can also so in this particular case,
when we did our clustering.

177
00:12:25.119 --> 00:12:27.683
The second cluster was distance ten.

178
00:12:27.683 --> 00:12:31.673
We can change the distance to one,
and now if we go to the diagonals,

179
00:12:31.673 --> 00:12:34.779
the diagonals should be
in different colors.

180
00:12:34.779 --> 00:12:40.920
Because, right, if I make it one,
I have to say minimum cluster size, right?

181
00:12:40.920 --> 00:12:42.414
We have to say one.

182
00:12:42.414 --> 00:12:46.879
So now, it has each one is a separate
dot write different colors.

183
00:12:46.879 --> 00:12:48.841
Now we decided to break it
into separate clusters, right?

184
00:12:48.841 --> 00:12:50.779
This also might be useful test for you.

185
00:12:51.799 --> 00:12:56.402
So the way you will taste UI components
is in terms of visual representation

186
00:12:56.402 --> 00:12:58.019
rather than behavioral.

187
00:12:58.019 --> 00:12:59.635
I mean, you could do behavior as well.

188
00:12:59.635 --> 00:13:01.578
But in terms of visual, right?

189
00:13:01.578 --> 00:13:05.396
And again, you don't want to do
a assertion on the whole page or

190
00:13:05.396 --> 00:13:06.702
whole application.

191
00:13:06.702 --> 00:13:11.688
Or you don't want to do an assertion on
the humongous data set like Iwouldn't want

192
00:13:11.688 --> 00:13:16.528
to assert on well it's not running right
now, here I wouldn't want to assert on

193
00:13:16.528 --> 00:13:21.540
this because if something goes wrong or
whatever it'd be super difficult to see.

194
00:13:21.540 --> 00:13:25.801
You want to assert on essentially the unit
test kind of philosophy where it's very

195
00:13:25.801 --> 00:13:29.997
clear as to what is going inside and
what's coming out of the system.

196
00:13:29.997 --> 00:13:33.154
&gt;&gt; I thought I heard you say
earlier that some of this,

197
00:13:33.154 --> 00:13:38.567
when you get to testing components in
a visual way, it can be a bit more flaky.

198
00:13:38.567 --> 00:13:42.576
Is that more with integration tests or
even something like this where you're just

199
00:13:42.576 --> 00:13:45.787
testing a single component at a time and
single those snapshots.

200
00:13:45.787 --> 00:13:50.307
&gt;&gt; So we should talk about
where does flakiness come from?

201
00:13:50.307 --> 00:13:52.880
Flakiness usually comes from the network.

202
00:13:52.880 --> 00:13:57.600
So if you're actually talking to the
outside world, whether it's database or

203
00:13:57.600 --> 00:14:02.090
something like that,
you could in theory have flakiness, right?

204
00:14:02.090 --> 00:14:05.362
And usually the way flakiness are dealt
with is that You do retries and

205
00:14:05.362 --> 00:14:08.814
exponential back off so you wait and
try again see if it kind of works out.

206
00:14:08.814 --> 00:14:13.312
And usually these frameworks have a built
in, but at some point you will encounter

207
00:14:13.312 --> 00:14:16.978
the fact that like, things just
don't pass for whatever reason.

208
00:14:16.978 --> 00:14:20.792
Stuff like Storybook because there
really is no network, right?

209
00:14:20.792 --> 00:14:26.310
It's all integrated together into one page
where the components are instantiated,

210
00:14:26.310 --> 00:14:27.927
the data is fixed, etc.

211
00:14:27.927 --> 00:14:30.564
This should have extremely low flakiness.

212
00:14:30.564 --> 00:14:35.032
It probably still might have flakiness
because it still requires that a browser

213
00:14:35.032 --> 00:14:35.907
be brought up.

214
00:14:35.907 --> 00:14:40.977
It still requires that something like
Playwright would sit on top of it and

215
00:14:40.977 --> 00:14:43.609
try to poke on it and interact with it.

216
00:14:43.609 --> 00:14:47.155
And all of that, those require that
you have some behavioral changes.

217
00:14:47.155 --> 00:14:51.430
But it should be pretty
low in terms of flakiness.

218
00:14:51.430 --> 00:14:55.571
So I would expect this to be almost no
flakiness, whereas if you do an end-to-end

219
00:14:55.571 --> 00:14:58.761
test of your application,
it'd probably be a lot more flaky.

