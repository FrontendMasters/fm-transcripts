WEBVTT

1
00:00:00.000 --> 00:00:03.230
Let's talk about testing UI, right?

2
00:00:03.230 --> 00:00:07.460
So again, what we're talking about
is this white box in here, right?

3
00:00:07.460 --> 00:00:11.190
There's a page, this page has
a whole bunch of things on it.

4
00:00:11.190 --> 00:00:14.440
What we just wanna assert, just like
when we were talking about the whole

5
00:00:14.440 --> 00:00:16.800
application, we were focusing on a unit.

6
00:00:16.800 --> 00:00:20.406
Our unit of testing now is gonna
become just this white box in In here.

7
00:00:20.406 --> 00:00:26.136
And we wanna assert that we can
correctly render this white box.

8
00:00:26.136 --> 00:00:28.612
So how is this box rendered?

9
00:00:28.612 --> 00:00:36.235
So here's our component, which we call
cluster, and it gets ClusterProps.

10
00:00:36.235 --> 00:00:39.697
And these props are gonna be the data set,
the width and the height.

11
00:00:39.697 --> 00:00:41.738
And it looks like the size is optional,
right?

12
00:00:41.738 --> 00:00:48.398
The size of the box on the screen, right?

13
00:00:50.048 --> 00:00:54.027
And so all it does is grabs the data set,

14
00:00:54.027 --> 00:00:58.338
right, and we iterate over the data set.

15
00:00:58.338 --> 00:01:03.304
And for each item in a data set,
we create, in this case,

16
00:01:03.304 --> 00:01:10.346
a b element where we pass in left top
with the compute properties, colors, etc.

17
00:01:11.876 --> 00:01:14.166
Now, you could do several things.

18
00:01:14.166 --> 00:01:18.036
First of all, you could definitely
unit test the compute position, right?

19
00:01:18.036 --> 00:01:21.762
This would be a good function to make sure
that this thing is doing what you think

20
00:01:21.762 --> 00:01:22.450
it's doing.

21
00:01:22.450 --> 00:01:24.518
I assume that's not gonna be very hard, or

22
00:01:24.518 --> 00:01:27.911
we don't have to go because
we've already kind of done it.

23
00:01:27.911 --> 00:01:30.811
But how would you unit test
this particular component?

24
00:01:30.811 --> 00:01:33.650
You could write a kind
of a snapshot where you

25
00:01:33.650 --> 00:01:38.231
assert that the JSX that comes out
of this is of the correct shape.

26
00:01:38.231 --> 00:01:43.487
But that doesn't actually answer
whether it looks right, right?

27
00:01:43.487 --> 00:01:46.875
So what you really want is
a way to instantiate this

28
00:01:46.875 --> 00:01:50.990
component in isolation and
take an image screenshot of it and

29
00:01:50.990 --> 00:01:54.877
then compare it against
the previous image screenshot.

30
00:01:55.937 --> 00:02:02.458
And it turns out that such a thing already
exists, and it's is called storyblock,

31
00:02:02.458 --> 00:02:07.336
storybooks, sorry,
not storyblocks, different thing.

32
00:02:07.336 --> 00:02:12.578
Storybook, the idea is you put
individual components on a page,

33
00:02:12.578 --> 00:02:17.647
you control different things,
different inputs on it, etc.

34
00:02:17.647 --> 00:02:22.586
And you take an image screenshot
of this particular output to see

35
00:02:22.586 --> 00:02:24.700
how this thing is working.

36
00:02:27.050 --> 00:02:28.977
So let's install this.

37
00:02:31.934 --> 00:02:38.568
Oops, Let's see, I believe we
have to run a special command.

38
00:02:38.568 --> 00:02:45.547
Let's see, integration, so every framework
will have a different way of doing this.

39
00:02:45.547 --> 00:02:50.158
Or a storybook, okay, here we go.

40
00:02:50.158 --> 00:02:51.448
Let's run this command.

41
00:02:51.448 --> 00:02:56.215
So this installs the storybook
inside of our application.

42
00:02:56.215 --> 00:02:58.806
Now, this is specific to different
frameworks, we'll have different things.

43
00:02:58.806 --> 00:03:01.464
This is not the The important bit,
let's just go and install it.

44
00:03:02.984 --> 00:03:06.744
And more we're gonna talk about
how we actually create a test.

45
00:03:06.744 --> 00:03:10.186
Basic idea of Storybook is you
have lots and lots of components,

46
00:03:10.186 --> 00:03:13.069
think of it like a design
system in your application.

47
00:03:13.069 --> 00:03:17.562
And what you wanna do is you wanna
be able to get each component up and

48
00:03:17.562 --> 00:03:19.457
running in isolation.

49
00:03:19.457 --> 00:03:23.406
And then poke at it in isolation to kind
of see if the right things are actually

50
00:03:23.406 --> 00:03:24.095
happening.

51
00:03:27.260 --> 00:03:31.914
And because we are talking about
a visual representation of what we want,

52
00:03:31.914 --> 00:03:36.565
really turns out that image snapshots
are really the only good way to kinda

53
00:03:36.565 --> 00:03:41.316
prove that the thing looks like the way
we intended it to look like, right?

54
00:03:41.316 --> 00:03:46.027
Because you could easily create
a CSS change somewhere in the global

55
00:03:46.027 --> 00:03:50.667
style sheet, which would affect
the way your component renders.

56
00:03:50.667 --> 00:03:56.486
Okay, now if I remember correctly,
I believe, I already have storybook, okay?

57
00:03:56.486 --> 00:04:02.442
So now once we have this,
&gt;&gt; Qwik just adds those scripts for you?

58
00:04:02.442 --> 00:04:07.564
&gt;&gt; Yes, a lot of frameworks have a CLI
that does the kind of the setup for you.

59
00:04:10.949 --> 00:04:12.778
Okay, so what does this look like?

60
00:04:12.778 --> 00:04:17.135
In this case, this is just a demo test,
we will add our own test in a second, but

61
00:04:17.135 --> 00:04:21.229
basic idea is that, you have a button,
and then in this particular case,

62
00:04:21.229 --> 00:04:24.494
you said,
this is what the buttons should look like.

63
00:04:24.494 --> 00:04:26.790
And then in here,
you can click on a button and

64
00:04:26.790 --> 00:04:29.887
you can kinda interact with it
to see if it kinda makes sense.

65
00:04:29.887 --> 00:04:33.517
You can also go here and
say medium, I think large.

66
00:04:33.517 --> 00:04:38.287
So you can get a large button,
you can do small, right?

67
00:04:38.287 --> 00:04:42.794
So you can kind of prove to yourself
the things are rendering the way you want.

68
00:04:42.794 --> 00:04:46.384
So let's create a test now for
our cluster.

69
00:04:46.384 --> 00:04:49.331
What you wanna do is you wanna export.

70
00:04:49.331 --> 00:04:51.939
And as a convention,
they call it the primary for a second.

71
00:04:51.939 --> 00:04:57.095
So let's create different situations.

72
00:04:57.095 --> 00:05:00.271
So let's call a first one called square.

73
00:05:00.271 --> 00:05:02.407
And square is going to be a story.

74
00:05:05.737 --> 00:05:07.556
And what is a story?

75
00:05:07.556 --> 00:05:13.201
Type Story=Story object,

76
00:05:13.201 --> 00:05:18.139
which we import and It's

77
00:05:18.139 --> 00:05:23.556
gonna take ClusterProps.

78
00:05:30.318 --> 00:05:35.267
And we have to create a default export so
that the storybook knows how to load this.

79
00:05:39.779 --> 00:05:45.416
And the component we're testing

80
00:05:45.416 --> 00:05:49.646
is Cluster, argTypes.

81
00:05:49.646 --> 00:05:51.431
I don't think you have to declare them for
now.

82
00:05:51.431 --> 00:05:54.076
Oops, let's just empty this thing.

83
00:05:54.076 --> 00:05:55.538
And,

84
00:06:05.653 --> 00:06:10.443
Okay, so with this,
we should be able to create a first story.

85
00:06:12.253 --> 00:06:13.913
Let's create a super simple one.

86
00:06:15.523 --> 00:06:20.290
So for now, I am just going to say dataset

87
00:06:23.108 --> 00:06:25.800
Dataset is,

88
00:06:29.975 --> 00:06:33.914
Right, so let's just leave this empty for
a second.

89
00:06:33.914 --> 00:06:36.751
Wait, I'll show you how
to fill this in a second.

90
00:06:36.751 --> 00:06:39.851
And oops, args.

91
00:06:42.460 --> 00:06:46.896
And we want to have width, oops,

92
00:06:49.589 --> 00:06:55.048
Width is 250, height is 250,

93
00:06:55.048 --> 00:06:59.632
and let's say size, is,

94
00:07:02.289 --> 00:07:05.001
And now we've created to say,
how do we render this?

95
00:07:05.001 --> 00:07:10.762
And so we're just going to create
a Cluster and oops, this takes props.

96
00:07:21.537 --> 00:07:26.440
And okay, I know it's red,
I think I'm gonna come back to it later,

97
00:07:26.440 --> 00:07:30.076
but I believe that that
should be enough to, okay,

98
00:07:30.076 --> 00:07:33.223
maybe I have to restart this,
to pick it up.

99
00:07:39.714 --> 00:07:41.415
What am I missing here?

100
00:07:41.415 --> 00:07:48.292
Source components, right, because the
default place is source components, right?

101
00:07:48.292 --> 00:07:53.667
For whatever reason, we did not put our
component in the right location and

102
00:07:53.667 --> 00:07:55.980
I think it is in storybook main.

103
00:07:55.980 --> 00:07:59.503
And we just say anything,
not just components.

104
00:08:03.401 --> 00:08:05.041
Lets click Start.

105
00:08:07.459 --> 00:08:08.039
Here we go.

106
00:08:08.039 --> 00:08:14.015
Okay, so now we have our cluster and
we have our default one called Square.

107
00:08:14.015 --> 00:08:18.141
And we can't really see it
unless we flip the darkness.

108
00:08:18.141 --> 00:08:22.009
How do I do dark?

109
00:08:22.009 --> 00:08:25.780
It's not gonna show it,
I have to have a dataset.

110
00:08:25.780 --> 00:08:29.027
Okay, I think I have to have a dataset,
I'm not gonna escape this.

111
00:08:32.578 --> 00:08:33.292
Cluster stories.

112
00:08:33.292 --> 00:08:34.991
Okay, so let's do the dataset.

113
00:08:34.991 --> 00:08:37.267
So we need to come up with clusters.

114
00:08:37.267 --> 00:08:39.533
And we could do it manually or remember,

115
00:08:39.533 --> 00:08:43.212
we already have this function
that does the clustering, right?

116
00:08:43.212 --> 00:08:48.146
So if we If we could just
push in data into it, so

117
00:08:48.146 --> 00:08:52.329
we can say we wanna put in a squareData.

118
00:08:53.379 --> 00:08:55.805
And let's do the parameters
of it being 10.

119
00:08:55.805 --> 00:09:01.695
Actually, here.

120
00:09:01.695 --> 00:09:06.625
We can say const Square cluster

121
00:09:12.880 --> 00:09:15.442
10, 2 are the parameters.

122
00:09:15.442 --> 00:09:23.233
And so
now we have to pass in our longitude 0.

123
00:09:23.233 --> 00:09:27.985
So to make a square,
right, you would do 0, 0,

124
00:09:27.985 --> 00:09:31.620
0, not longitude, it's ing.

125
00:09:31.620 --> 00:09:35.518
You would do make 0, 0, 0, 1, 1.

126
00:09:35.518 --> 00:09:40.953
And so those are four points
in the corner, right?

127
00:09:40.953 --> 00:09:45.499
And so now that we have this
fed through the clustering,

128
00:09:45.499 --> 00:09:49.286
I can pass it to my data and
I should see the box.

129
00:09:49.286 --> 00:09:50.396
Here we go.

130
00:09:50.396 --> 00:09:53.396
So now this box is too big,
can I zoom out?

131
00:09:53.396 --> 00:09:56.716
Right, so
we have a box now with four points.

132
00:09:56.716 --> 00:09:58.929
Notice, just like when
we were unit testing,

133
00:09:58.929 --> 00:10:01.256
we didn't wanna do the real dataset,
instead,

134
00:10:01.256 --> 00:10:05.360
we're making up our dataset that is useful
for us from testing perspective, right?

135
00:10:05.360 --> 00:10:12.347
And having four particular points in
the space to be able to do that is useful.

136
00:10:12.347 --> 00:10:14.318
Does that make sense?

137
00:10:14.318 --> 00:10:19.318
So now the thing to do is to be able
to maybe create other scenarios.

138
00:10:19.318 --> 00:10:21.868
So let's say we wanna
create a diagonal scenario.

139
00:10:21.868 --> 00:10:27.111
So we have a square, and
let's create a diagonal.

140
00:10:33.861 --> 00:10:38.666
And maybe we wanna create a smaller one
just to kind of prove that the sizing

141
00:10:38.666 --> 00:10:39.218
works.

142
00:10:39.218 --> 00:10:42.766
And so
now we have to come up with a diagonal.

143
00:10:45.799 --> 00:10:51.350
Diagonal would be 0, 0, 1, 1,

144
00:10:51.350 --> 00:10:56.372
2, 2, maybe 3, 3, right?

145
00:10:58.918 --> 00:11:02.520
So now notice we have the square but
I can also go to diagonal and

146
00:11:02.520 --> 00:11:04.954
prove that this particular thing works.

147
00:11:04.954 --> 00:11:09.177
Mm-uh, it seems a little squished, no?

148
00:11:09.177 --> 00:11:10.614
What did I mess up?

149
00:11:10.614 --> 00:11:12.907
Because I didn't do 200 here.

150
00:11:14.122 --> 00:11:14.797
There we go.

151
00:11:14.797 --> 00:11:16.112
So we have a diagonal.

152
00:11:16.112 --> 00:11:19.700
So this is how you would test
your items in isolation, right,

153
00:11:19.700 --> 00:11:24.091
that are independent from everything
else in your code base, right?

154
00:11:24.091 --> 00:11:27.802
Just like with unit tests, we were trying
to isolate and not have to worry about

155
00:11:27.802 --> 00:11:31.361
the whole world, and
we just wanna test one particular thing.

156
00:11:31.361 --> 00:11:36.421
This particular thing would allow you to
do the same thing in isolation as one.

157
00:11:36.421 --> 00:11:39.600
But the basic idea here
of storybook is that,

158
00:11:39.600 --> 00:11:44.462
it allows you to treat your components
as individual units, right?

159
00:11:44.462 --> 00:11:49.902
And because they're individual units,
what you can do is,

160
00:11:49.902 --> 00:11:53.753
for example, here is our square, right?

161
00:11:53.753 --> 00:12:00.605
And I can go and modify, so if I go to the
clusters, I see that I have keys in here.

162
00:12:00.605 --> 00:12:03.358
And go and actually modify these numbers.

163
00:12:03.358 --> 00:12:07.768
So I can decide that this is now 1,
maybe that was too much.

164
00:12:09.828 --> 00:12:15.652
Now this is 0.5, I could type 0.5.

165
00:12:15.652 --> 00:12:19.688
And I have actually moved
the visual representation, right?

166
00:12:19.688 --> 00:12:23.813
So it is a way for you to poke at
your components in an isolated way so

167
00:12:23.813 --> 00:12:27.045
that you can then assert
that the right UI happens.

168
00:12:28.975 --> 00:12:33.306
So in this particular case,
when we did our clustering,

169
00:12:33.306 --> 00:12:38.823
the second cluster was distance 10,
we can change the distance to 1.

170
00:12:38.823 --> 00:12:43.222
And now if we go to diagonals,
the diagonal should be in different color.

171
00:12:43.222 --> 00:12:48.581
Because if I make it 1,
I have to say minimum cluster size,

172
00:12:48.581 --> 00:12:51.291
right, we have to say 1.

173
00:12:51.291 --> 00:12:55.581
So now each one is a separate dot,
right, different colors.

174
00:12:55.581 --> 00:12:57.801
So now we've decided to break it
into separate clusters, right?

175
00:12:57.801 --> 00:12:59.561
This also might be a useful test for you.

176
00:13:00.571 --> 00:13:05.200
So the way you would taste UI components
is in terms of visual representation

177
00:13:05.200 --> 00:13:06.894
rather than behavioral.

178
00:13:06.894 --> 00:13:10.464
I mean, you could do behavioral as well,
but in terms of visual, right?

179
00:13:10.464 --> 00:13:15.232
And again, you don't wanna do an assertion
on the whole page or whole application, or

180
00:13:15.232 --> 00:13:18.519
you don't wanna do an assertion
on the humongous dataset.

181
00:13:18.519 --> 00:13:23.260
Like I wouldn't wanna assert, on, well,
it's not running right now, here,

182
00:13:23.260 --> 00:13:27.166
I wouldn't wanna assert on this
because if something goes wrong or

183
00:13:27.166 --> 00:13:30.357
whatever it would be
super difficult to see.

184
00:13:30.357 --> 00:13:34.438
You wanna assert on essentially the unit
test kinda philosophy where it's

185
00:13:34.438 --> 00:13:38.468
very clear as to what is going inside and
what's coming out of the system.

186
00:13:38.468 --> 00:13:41.636
&gt;&gt; I thought I heard you say
earlier that some of this,

187
00:13:41.636 --> 00:13:47.344
like when you get to testing components in
a visual way, it can be a bit more flaky.

188
00:13:47.344 --> 00:13:50.545
Is that more with integration tests or
even something like this,

189
00:13:50.545 --> 00:13:54.624
where you're just testing a single
component at a time and single snapshots?

190
00:13:54.624 --> 00:13:59.244
&gt;&gt; So we should talk about
where does flakiness come from?

191
00:13:59.244 --> 00:14:01.644
Flakiness usually comes from the network.

192
00:14:01.644 --> 00:14:06.372
So If you're actually talking to the
outside world, whether it's database or

193
00:14:06.372 --> 00:14:10.863
something like that,
you could in theory have flakiness, right?

194
00:14:10.863 --> 00:14:14.000
And usually the way flakiness are dealt
with is that you do retries and

195
00:14:14.000 --> 00:14:17.372
exponential backups, you wait and
try again, see if it kinda works out.

196
00:14:17.372 --> 00:14:20.589
And usually, these frameworks have
it built in, but at some point,

197
00:14:20.589 --> 00:14:24.266
you will encounter the fact that things
just don't pass for whatever reason.

198
00:14:25.706 --> 00:14:29.890
Stuff like Storybook,
because there really is no network, right,

199
00:14:29.890 --> 00:14:35.083
it's all integrated together into one page
where the components are instantiated,

200
00:14:35.083 --> 00:14:39.286
the data is fixed, etc,
they should have extremely low flakiness.

201
00:14:39.286 --> 00:14:43.084
It probably still might have flakiness
because it still It still requires that

202
00:14:43.084 --> 00:14:44.789
a browser be brought up.

203
00:14:44.789 --> 00:14:49.268
It still requires that something like
Playwright would sit on top of it and

204
00:14:49.268 --> 00:14:51.592
try to poke on it and interact with it.

205
00:14:51.592 --> 00:14:56.209
And all of those require that you
have some behavioral changes, right?

206
00:14:57.259 --> 00:15:00.399
But it should be pretty
low in terms of flakiness.

207
00:15:00.399 --> 00:15:04.539
So I would expect this to be almost no
flakiness, whereas if you do an end-to-end

208
00:15:04.539 --> 00:15:07.729
test of your application,
it'd probably be a lot more flaky.

