WEBVTT

1
00:00:00.062 --> 00:00:01.936
We're talking about this thing and

2
00:00:01.936 --> 00:00:05.506
I was kinda hoping to take you
through all the parts of it basically.

3
00:00:05.506 --> 00:00:09.421
You start with a unit test,
you do test-driven development.

4
00:00:09.421 --> 00:00:13.131
We did issues that arise
with components and

5
00:00:13.131 --> 00:00:17.147
being able to mock, and
how do you mock things?

6
00:00:17.147 --> 00:00:19.627
And then, what you run over
kinda tooling you would do.

7
00:00:19.627 --> 00:00:22.908
And then we went up from there, said,
okay, so let's say you have a component

8
00:00:22.908 --> 00:00:25.626
that's actually a visual component,
how would you test that?

9
00:00:25.626 --> 00:00:28.821
And we looked at storybook,
then we went into a playwright,

10
00:00:28.821 --> 00:00:30.585
which is end-to-end testing.

11
00:00:30.585 --> 00:00:33.786
And there we talked about
not just how to test it,

12
00:00:33.786 --> 00:00:38.158
but also the importance of having
page objects, so that you can use

13
00:00:38.158 --> 00:00:42.711
the page objects as a way to simplify
the interface to the to the user.

14
00:00:42.711 --> 00:00:45.307
Because on end of the day,
the thing that matters for

15
00:00:45.307 --> 00:00:49.211
the test is not that the test is running,
is that the test is readable, right?

16
00:00:49.211 --> 00:00:51.976
Because it's a form of communication,
it's a form of documentation.

17
00:00:51.976 --> 00:00:56.963
It's a form of, if a new person comes into
your team you can point them to the test

18
00:00:56.963 --> 00:00:59.643
and say, look if you read these examples,

19
00:00:59.643 --> 00:01:03.230
your brain will be able to see
a bunch of concrete things.

20
00:01:03.230 --> 00:01:09.145
And then, you can generalize into what the
system actually does and how it does it.

21
00:01:09.145 --> 00:01:14.061
And so the main point of this was
to show you different strategies

22
00:01:14.061 --> 00:01:18.258
you can use when writing or
testing your application.

23
00:01:18.258 --> 00:01:23.006
And the pattern that was consistent across
them all is that you wanna be able to

24
00:01:23.006 --> 00:01:25.504
get hold of your dependencies, right?

25
00:01:25.504 --> 00:01:29.705
Dependencies is how you make sure that
you can unit test it, whether it's

26
00:01:29.705 --> 00:01:34.476
dependencies in the form of a unit test or
it's a dependency in terms of a database.

27
00:01:34.476 --> 00:01:39.098
Whatever level you're testing on,
it's the dependencies that

28
00:01:39.098 --> 00:01:44.054
allow you to make sure that you don't
have too much on hand all at once,

29
00:01:44.054 --> 00:01:47.433
and you can just focus
on the individual piece.

30
00:01:47.433 --> 00:01:49.351
So with that, questions?

31
00:01:52.242 --> 00:01:53.398
Mark.

32
00:01:53.398 --> 00:01:58.221
&gt;&gt; So when approaching a legacy code base,
would you start with

33
00:01:58.221 --> 00:02:03.814
the playwright test and then try to
work backwards down to unit tests?

34
00:02:03.814 --> 00:02:08.005
&gt;&gt; Yes, so if you have a legacy code base,
you really have only one choice to

35
00:02:08.005 --> 00:02:12.428
kinda get started, which is to do
the playwright, the end-to-end test.

36
00:02:12.428 --> 00:02:16.802
And as you do that, then you slowly
figure out ways to say, hey,

37
00:02:16.802 --> 00:02:21.340
maybe I can get the database running
in the local environment, and

38
00:02:21.340 --> 00:02:26.222
I can get some sample database set in
there that I can write the test for.

39
00:02:26.222 --> 00:02:31.460
Maybe I have a unit test
that I need to write.

40
00:02:31.460 --> 00:02:34.422
Maybe I can refactor
a part of the application.

41
00:02:34.422 --> 00:02:38.742
But before I refactor the part of the
application to make sure it's testable,

42
00:02:38.742 --> 00:02:43.129
I will write a playwright end-to-end
test that covers this particular area so

43
00:02:43.129 --> 00:02:45.758
that I will not do some
kind of obvious mistake.

44
00:02:45.758 --> 00:02:51.685
And so you wanna iteratively go at it over
time until you have enough end-to-end

45
00:02:51.685 --> 00:02:56.666
tests to kinda have reasonable
feeling that you can refactor bits.

46
00:02:56.666 --> 00:03:00.737
But at the same time, you wanna come
at it from the unit test side and

47
00:03:00.737 --> 00:03:04.815
verify individual pieces together,
and then hopefully over time

48
00:03:04.815 --> 00:03:09.800
the application can be refactored in the
state that makes it easier to unit test.

49
00:03:12.731 --> 00:03:13.766
I think you had a hand up.

50
00:03:13.766 --> 00:03:17.377
&gt;&gt; Yeah, so I have a question about
the nested constructor pattern.

51
00:03:17.377 --> 00:03:20.786
So the anti-pattern you talked about,
constructor within the constructor.

52
00:03:20.786 --> 00:03:25.428
So let's say if I have a colleague
who doesn't believe in testing,

53
00:03:25.428 --> 00:03:30.733
how else would I convince him that
a anti-pattern and shouldn't be the way?

54
00:03:30.733 --> 00:03:35.881
&gt;&gt; I think it's, like in my general
argument with people is that

55
00:03:35.881 --> 00:03:41.821
the code that is testable is better
code because it's more decoupled.

56
00:03:41.821 --> 00:03:47.315
The example of a house instantiating its
bedroom, that's a fixed code, right?

57
00:03:47.315 --> 00:03:50.519
You have exactly one kinda
bedroom that's in there and

58
00:03:50.519 --> 00:03:52.754
there is nothing else that you can do.

59
00:03:52.754 --> 00:03:57.041
But if you can pass dependencies in, then
you can use the house with a big bedroom,

60
00:03:57.041 --> 00:04:00.167
a small bedroom, or multiple ones,
or whatever, right?

61
00:04:00.167 --> 00:04:04.858
You have choices, and
I think you should agree with me that

62
00:04:04.858 --> 00:04:08.804
choices is a form of freedom
that you wanna have.

63
00:04:08.804 --> 00:04:12.926
These choices are helpful because
it allow you to do more things.

64
00:04:12.926 --> 00:04:17.110
So to me, whenever I argue for
testability,

65
00:04:17.110 --> 00:04:22.064
the thing I'm really arguing
over is that I wanna have

66
00:04:22.064 --> 00:04:27.347
a code base that is more flexible so
that I can instantiate

67
00:04:27.347 --> 00:04:32.215
it in the ways that are useful for
unit test, right?

68
00:04:32.215 --> 00:04:37.028
And I don't think anybody will argue
that having the freedom to configure

69
00:04:37.028 --> 00:04:39.523
the system in more ways is a bad thing.

70
00:04:39.523 --> 00:04:42.269
Typically, people will agree that
flexibility is a good thing, right?

71
00:04:42.269 --> 00:04:46.894
You wanna make sure that you can use
the same code in a lot of different ways.

72
00:04:46.894 --> 00:04:54.394
And so having things fixed and difficult
to do makes it kind of hard, right?

73
00:04:54.394 --> 00:04:59.293
The other thing is once you write
a unit test where you have a house

74
00:04:59.293 --> 00:05:04.103
where you inject a bedroom, and
so instead of instantiating,

75
00:05:04.103 --> 00:05:08.730
you inject it, it is very difficult for
somebody to undo that

76
00:05:08.730 --> 00:05:13.751
because the only way they can undo
it would be to delete your test.

77
00:05:13.751 --> 00:05:15.763
Because your test kinda
is insisting on look,

78
00:05:15.763 --> 00:05:18.252
I need to be able to instantiate
this with a fake bedroom.

79
00:05:18.252 --> 00:05:21.841
If you're gonna refactor it,
fine, do whatever you want, but

80
00:05:21.841 --> 00:05:25.767
you have to retain me the right to
configure it with a different thing.

81
00:05:25.767 --> 00:05:28.115
And so it becomes extremely difficult for

82
00:05:28.115 --> 00:05:31.938
people then to do something that
is non-configurable because that

83
00:05:31.938 --> 00:05:36.108
immediately means that that test
that's already written will not work.

84
00:05:36.108 --> 00:05:41.522
So once you fight the battle and get one
test in that is able to extricate a piece

85
00:05:41.522 --> 00:05:46.519
of code inside of its unit test by itself,
it is extremely difficult for

86
00:05:46.519 --> 00:05:49.850
the rest of the developers
on a team to regress,

87
00:05:49.850 --> 00:05:54.308
because regressing would mean
that they would break the test.

88
00:05:54.308 --> 00:05:58.420
And I'm pretty sure that nobody is gonna
just blatantly delete the test, right,

89
00:05:58.420 --> 00:06:01.053
hopefully, that's not
a thing that would happen.

90
00:06:01.053 --> 00:06:05.166
&gt;&gt; Is there a catchy rule of thumb for
when to write a unit test?

91
00:06:05.166 --> 00:06:06.908
&gt;&gt; A catchy rule of thumb.

92
00:06:06.908 --> 00:06:10.127
Pretty much always, right?

93
00:06:10.127 --> 00:06:14.347
[LAUGH] But I'm not sure if I
have a catchy slogan for it.

94
00:06:14.347 --> 00:06:16.739
&gt;&gt; When in doubt, unit test.

95
00:06:16.739 --> 00:06:17.731
&gt;&gt; When in doubt, unit test.

96
00:06:17.731 --> 00:06:19.841
&gt;&gt; Before you rest, write your tests.

97
00:06:19.841 --> 00:06:21.088
&gt;&gt; There you go.

98
00:06:21.088 --> 00:06:27.019
&gt;&gt; [LAUGH] I like that,
PK with a slam dunk, all right.

99
00:06:27.019 --> 00:06:30.985
With that, I think we're done.

100
00:06:30.985 --> 00:06:31.731
So thank you.

101
00:06:31.731 --> 00:06:32.524
&gt;&gt; Thank you.

102
00:06:32.524 --> 00:06:35.409
&gt;&gt; [APPLAUSE]

