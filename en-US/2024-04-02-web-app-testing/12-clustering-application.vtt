WEBVTT

1
00:00:00.080 --> 00:00:02.513
So I found this data set online somewhere,

2
00:00:02.513 --> 00:00:06.730
and it shows all of the accidents
that occurred in Chicago.

3
00:00:06.730 --> 00:00:11.203
And what I find interesting about it is
that recently I did some work with machine

4
00:00:11.203 --> 00:00:14.780
learning and
I learned to use a clustering algorithm.

5
00:00:14.780 --> 00:00:16.077
And so I just figured, hey,

6
00:00:16.077 --> 00:00:19.214
it'd be fun if I could just cluster
the data from all the accidents and

7
00:00:19.214 --> 00:00:22.589
you can You can see maybe something
interesting happens in here.

8
00:00:22.589 --> 00:00:25.842
In this particular case, you don't
really have anything interesting because

9
00:00:25.842 --> 00:00:27.927
it turns out that if you're
in a center of the city,

10
00:00:27.927 --> 00:00:29.788
then it's more likely
to cause an accident.

11
00:00:29.788 --> 00:00:35.009
So if you move the buttons a little bit,
I did, I think if you just change

12
00:00:35.009 --> 00:00:40.074
the value here, it just takes a while
because it's a large data set.

13
00:00:40.074 --> 00:00:41.624
Click on the button.

14
00:00:41.624 --> 00:00:42.774
Yeah, it did click on it.

15
00:00:42.774 --> 00:00:44.064
It's chewing through it.

16
00:00:44.064 --> 00:00:48.732
What I find is interesting about it, if
you tweak the parameters of clustering and

17
00:00:48.732 --> 00:00:50.086
how much data you have,

18
00:00:50.086 --> 00:00:54.124
it essentially shows you all
the intersections in a city, right?

19
00:00:54.124 --> 00:00:54.664
So guess what?

20
00:00:54.664 --> 00:00:56.574
Intersections are dangerous.

21
00:00:56.574 --> 00:01:00.271
But I think it's kind of interesting
that you can kind of play with the data.

22
00:01:00.271 --> 00:01:03.070
Anyways, we're not here to talk about
the data, but I thought this would be

23
00:01:03.070 --> 00:01:05.681
an interesting kind of a background for
the kind of test that we built.

24
00:01:05.681 --> 00:01:06.681
What is a cluster?

25
00:01:06.681 --> 00:01:07.603
Good question.

26
00:01:07.603 --> 00:01:11.611
So cluster, so let's go back to
the previous view right here.

27
00:01:12.701 --> 00:01:16.475
And each dot represents an accident,
right?

28
00:01:16.475 --> 00:01:19.092
And so x and y are the position, right?

29
00:01:19.092 --> 00:01:21.864
So you can see the map of
Chicago kinda over here, and

30
00:01:21.864 --> 00:01:25.266
you can kinda see the lines which
represent where people drive so

31
00:01:25.266 --> 00:01:28.635
this is the avenues they
have inside of the city.

32
00:01:28.635 --> 00:01:32.435
And each that represents an accident.

33
00:01:32.435 --> 00:01:35.495
And so well how do you decide if
something is part of a cluster or not?

34
00:01:35.495 --> 00:01:39.575
So like for example if you look at
these three dots in here in the middle,

35
00:01:39.575 --> 00:01:43.151
hopefully you can see them,
maybe I can zoom in, right.

36
00:01:43.151 --> 00:01:46.061
Notice there is big space around them,
right.

37
00:01:46.061 --> 00:01:49.270
So when you set up a clustering algorithm,

38
00:01:49.270 --> 00:01:54.173
you ask it to tell you how much
distance does something have to be to

39
00:01:54.173 --> 00:01:58.291
be still considered part
of the same cluster, right?

40
00:01:58.291 --> 00:02:02.415
And for whatever reason,
no accidents happened over here and

41
00:02:02.415 --> 00:02:06.139
this is why this particular
cluster ended up on its own,

42
00:02:06.139 --> 00:02:12.019
because none of the points that are nearby
qualify the distance thing in there.

43
00:02:12.019 --> 00:02:14.049
Anyway, so
that just gives you the clustering.

44
00:02:14.049 --> 00:02:16.229
This is the background, this is what
we're gonna be using for testing.

45
00:02:16.229 --> 00:02:19.955
So what we want is we wanna be
able to do a unit test Test,

46
00:02:19.955 --> 00:02:24.088
we wanna be able to test this
particular component, right?

47
00:02:24.088 --> 00:02:27.408
This is a component in here
that we wanna unit test.

48
00:02:27.408 --> 00:02:31.904
We probably also wanna have an end-to-end
test because as a application developer

49
00:02:31.904 --> 00:02:35.527
I can mess with these numbers here and
different things can happen.

50
00:02:35.527 --> 00:02:39.555
And so we wanna look at different
kinds of testing that exists now.

51
00:02:39.555 --> 00:02:43.114
So there's a sub-component
folder called clustering.

52
00:02:43.114 --> 00:02:48.028
And there's also a component, sorry,
there's a clustering component in here.

53
00:02:48.028 --> 00:02:54.678
So the routes clustering index TSX,
this is basically just a UI that you see.

54
00:02:54.678 --> 00:03:00.813
So that file represents this UI right
here.And then if you go to the.

55
00:03:00.813 --> 00:03:05.617
Clustering, the source clustering,
there is a clustering TS and

56
00:03:05.617 --> 00:03:08.133
there's a cluster TS, TSX.

57
00:03:08.133 --> 00:03:13.378
The cluster TSX is a component that
creates, basically that's this component

58
00:03:13.378 --> 00:03:18.243
right here, this clustering component
right here that you see here.

59
00:03:18.243 --> 00:03:21.458
So that's a component that
we're using to build up the UI.

60
00:03:21.458 --> 00:03:26.114
And then the clustering is actually
the logic that does the clustering,

61
00:03:26.114 --> 00:03:28.335
that knows how to do all the parts.

62
00:03:29.925 --> 00:03:33.415
So we have a piece of code
that knows how to do clusters.

63
00:03:33.415 --> 00:03:38.895
We have a visual component that
knows how to render the clusters.

64
00:03:38.895 --> 00:03:43.193
And we have a page That not
only shows the clusters, but

65
00:03:43.193 --> 00:03:46.101
also has some UI associated with it.

66
00:03:46.101 --> 00:03:51.959
So you can see how testing all of these
things together might be tricky or

67
00:03:51.959 --> 00:03:53.627
things to explore.

68
00:03:56.107 --> 00:03:58.247
So let's start from the lowest level.

69
00:03:58.247 --> 00:04:01.973
The lowest level is we would like to test
the UI of the cluster that the clustering

70
00:04:01.973 --> 00:04:02.874
algorithm works.

71
00:04:03.964 --> 00:04:07.855
So that's this particular file right here,
it's called clustering.ts.

72
00:04:07.855 --> 00:04:12.749
Okay, so clustering, this is the piece
of code that takes a dataset and

73
00:04:12.749 --> 00:04:15.780
figures out how to build clusters, right?

74
00:04:15.780 --> 00:04:22.068
I am storing the dataset in just
a JSON file, database..json.

75
00:04:22.068 --> 00:04:28.188
If you open it, you'll see that there is
thousands and thousands of accidents.

76
00:04:28.188 --> 00:04:30.548
I'm actually kinda shocked just
how many accidents there are.

77
00:04:30.548 --> 00:04:32.258
I guess it's over last 50 years,
but still.

78
00:04:34.038 --> 00:04:35.208
So this loads the data set.

79
00:04:36.308 --> 00:04:40.108
Then we have some parameters and
some default.

80
00:04:40.108 --> 00:04:45.654
So my default The radius is how many
meters before the size of the cluster,

81
00:04:45.654 --> 00:04:47.362
how big the radius is.

82
00:04:47.362 --> 00:04:51.216
So the default I have is 300 meters,
which I think is about 1,000 feet or

83
00:04:51.216 --> 00:04:52.328
something like that.

84
00:04:52.328 --> 00:04:54.470
And because the actual x and

85
00:04:54.470 --> 00:05:00.167
y positions of where the accident
happens is in longitude and latitude.

86
00:05:00.167 --> 00:05:04.372
There's some math here to
convert it into longitude and

87
00:05:04.372 --> 00:05:09.470
longitude, and each cluster basically
will give me the minimum and

88
00:05:09.470 --> 00:05:13.866
maximum in latitude, minimum and
maximum in longitude.

89
00:05:13.866 --> 00:05:19.626
And a collection of data points
that represent the cluster, right?

90
00:05:19.626 --> 00:05:24.148
And so Location is,
if you go in here, a location is just

91
00:05:24.148 --> 00:05:29.275
a number that represents the longitude and
latitude, right?

92
00:05:29.275 --> 00:05:30.185
So pretty straightforward.

93
00:05:31.535 --> 00:05:36.155
And clusters is going to be plural.

94
00:05:36.155 --> 00:05:39.305
It's just a collection of clusters.

95
00:05:39.305 --> 00:05:41.952
So array of cluster is clusters.

96
00:05:43.862 --> 00:05:50.422
So there is an existing implementation of
clustering algorithm that we're using.

97
00:05:50.422 --> 00:05:55.542
So it's called a density clustering
that I've already installed.

98
00:05:57.532 --> 00:06:03.241
And so the hard part is really just
getting the data in the correct format for

99
00:06:03.241 --> 00:06:05.062
this algorithm to run.

100
00:06:05.062 --> 00:06:07.950
So typically, we're not testing
whether the algorithm is correct.

101
00:06:07.950 --> 00:06:11.720
We're just testing if the data is being
fed into the algorithm in the correct way.

102
00:06:11.720 --> 00:06:14.240
And so
you can see that we create the algorithm.

103
00:06:14.240 --> 00:06:22.761
And we then have to map our data set
into a format that the algorithm wants.

104
00:06:22.761 --> 00:06:24.844
We do some performance numbers in here and

105
00:06:24.844 --> 00:06:28.261
then we let the algorithm
do its magic right here.

106
00:06:28.261 --> 00:06:34.904
Then once we have that, we have to go and
convert it into format that we can use.

107
00:06:34.904 --> 00:06:39.065
So this piece of code over here just
converts it in the format that's

108
00:06:39.065 --> 00:06:41.362
usable to us, right?

109
00:06:41.362 --> 00:06:45.965
And so the test we really would
be interested in is testing this

110
00:06:45.965 --> 00:06:48.842
particular code to see if it works.

111
00:06:48.842 --> 00:06:50.546
So let's get to it.

