WEBVTT

1
00:00:00.190 --> 00:00:04.380
So now that I have this,
I would like to write some tests.

2
00:00:04.380 --> 00:00:11.639
So let's create a new file
called github-api.unit.ts.

3
00:00:11.639 --> 00:00:16.002
Now remember how we talked about that
this is going to be documentation?

4
00:00:16.002 --> 00:00:19.382
So the way I approach these
particular things is I talk about,

5
00:00:19.382 --> 00:00:21.012
there's a describe method.

6
00:00:21.012 --> 00:00:22.535
And you can describe the thing you want.

7
00:00:22.535 --> 00:00:26.836
So, we're gonna talk about github-api.

8
00:00:30.850 --> 00:00:34.687
And the question becomes,
where does the describe method come from?

9
00:00:34.687 --> 00:00:37.875
And so now you need to have
some kind of a test runner,

10
00:00:37.875 --> 00:00:40.937
some kind of way of running these tests.

11
00:00:40.937 --> 00:00:44.967
And there are many ones
out there over the years.

12
00:00:44.967 --> 00:00:48.367
We had all kinds of
different test runners.

13
00:00:48.367 --> 00:00:52.077
Which one I like today, I like Vitest.

14
00:00:52.077 --> 00:00:54.437
So I'm gonna go down this particular path.

15
00:00:54.437 --> 00:00:58.777
And so if we go here, there should be
a description of how to install Vitest.

16
00:00:58.777 --> 00:01:00.898
So let's install Vitest into our project.

17
00:01:03.711 --> 00:01:05.087
Should be as simple as that.

18
00:01:10.319 --> 00:01:17.568
Now Vitest is nice because this particular
project is already configured with Vite.

19
00:01:17.568 --> 00:01:23.162
And turns out Vitest uses the Vite
infrastructure underneath it.

20
00:01:23.162 --> 00:01:25.461
And so
it makes the life much much simpler.

21
00:01:25.461 --> 00:01:28.701
So now I can go in and
I can do an import here.

22
00:01:28.701 --> 00:01:33.742
Import, describe from Vitest.

23
00:01:37.505 --> 00:01:41.237
And so now I would like to test something.

24
00:01:41.237 --> 00:01:45.675
So, the thing we wanna do is,
we wanna test the Git repository.

25
00:01:45.675 --> 00:01:48.080
And there might be more than
one test that you wanna do.

26
00:01:48.080 --> 00:01:51.066
So again,
I'm gonna nest a describe, right?

27
00:01:51.066 --> 00:01:54.376
So I am basically building
up a documentation.

28
00:01:54.376 --> 00:01:57.266
In the future, why is this red?

29
00:01:58.396 --> 00:02:02.043
In the future, we're gonna have
describes for other parts of the system.

30
00:02:02.043 --> 00:02:08.322
So the way you think about it is, you
use describe to tell the reader, right?

31
00:02:08.322 --> 00:02:11.979
You always have to think about,
somebody in the future will come and

32
00:02:11.979 --> 00:02:13.638
read this code.

33
00:02:13.638 --> 00:02:14.566
And all by the way,

34
00:02:14.566 --> 00:02:18.738
chances are very good that it's
gonna be future self of yourself.

35
00:02:18.738 --> 00:02:22.207
And that future of yourself is going to
forget everything you know right now.

36
00:02:22.207 --> 00:02:25.995
So I know you're thinking to yourself,
all of this stuff is obvious.

37
00:02:25.995 --> 00:02:30.880
But your future self is gonna
not remember any of this stuff.

38
00:02:30.880 --> 00:02:34.208
And is going to curse you for
not putting all the stuff in.

39
00:02:34.208 --> 00:02:36.395
And is going to say which idiot did this?

40
00:02:36.395 --> 00:02:39.779
And then they will blame it and
realize that the idiot was yourself.

41
00:02:39.779 --> 00:02:42.672
Okay, this happens to me all the time,

42
00:02:42.672 --> 00:02:46.805
where it's code I have written and
I don't recognize.

43
00:02:46.805 --> 00:02:50.465
And I get frustrated at
the code only to blame it and

44
00:02:50.465 --> 00:02:53.178
realize that I have myself to blame.

45
00:02:53.178 --> 00:02:59.920
So describe kind of sets the context for
the user, for the person reading it.

46
00:02:59.920 --> 00:03:03.450
And so once you have a describe,
you might wanna say what it should do.

47
00:03:03.450 --> 00:03:04.900
And so there is a it.

48
00:03:04.900 --> 00:03:09.380
And you can start with to do and say,
it should return repository information.

49
00:03:09.380 --> 00:03:11.690
That seems like a good test, right?

50
00:03:11.690 --> 00:03:17.278
We can write other tests,
for example, we can say,

51
00:03:17.278 --> 00:03:22.624
it to do, should return,
should timeout after.

52
00:03:25.326 --> 00:03:33.066
After x seconds with timeout.

53
00:03:35.124 --> 00:03:38.080
Response.

54
00:03:38.080 --> 00:03:43.178
If you think about it,
these describes an its,

55
00:03:43.178 --> 00:03:48.540
a really requirements for
your project, right?

56
00:03:48.540 --> 00:03:53.322
Every time you write an it, you're writing
a requirement of what should happen,

57
00:03:53.322 --> 00:03:56.388
how you expect things to happen,
and so on, right?

58
00:03:56.388 --> 00:04:01.674
And so as you build up this this
vocabulary of the requirements, it makes

59
00:04:01.674 --> 00:04:07.842
it easier for the person that's gonna come
in and be able to answer the why question.

60
00:04:07.842 --> 00:04:09.531
Why are you doing all these things?

61
00:04:09.531 --> 00:04:12.542
Well, because if I go to the test,
there is a it,

62
00:04:12.542 --> 00:04:16.663
which is really a requirement that says,
hey this should happen.

63
00:04:16.663 --> 00:04:21.531
So presumably somebody decided that
that's a feature that we need to have.

64
00:04:21.531 --> 00:04:23.832
And therefore we can go and write it.

65
00:04:23.832 --> 00:04:30.839
Now so far, they're just it's and I think
it's a red because I forgot to import it.

66
00:04:32.909 --> 00:04:36.029
Okay, so now what we wanna do is,
we wanna run this.

67
00:04:36.029 --> 00:04:42.751
And I think if I just do let's see,
so in here, I already, okay, perfect.

68
00:04:42.751 --> 00:04:43.791
I already have a test here.

69
00:04:45.031 --> 00:04:49.646
So if I just do npm run test.

70
00:04:58.013 --> 00:05:01.629
It created a row, okay, so
I created a test for my,

71
00:05:01.629 --> 00:05:04.671
because I called it
unit instead of a spec.

72
00:05:04.671 --> 00:05:06.640
I'm sorry, lemme fix that.

73
00:05:06.640 --> 00:05:08.623
So this was supposed to be called spec.

74
00:05:11.336 --> 00:05:14.199
What you see if you run a test?

75
00:05:14.199 --> 00:05:16.505
It shows you the tests in here?

76
00:05:16.505 --> 00:05:20.186
And what I really like about this
particular thing is that if I go and

77
00:05:20.186 --> 00:05:20.790
hit Save.

78
00:05:20.790 --> 00:05:24.396
You notice the test automatically rerun.

79
00:05:24.396 --> 00:05:26.876
And you can also,
I think if you click R in here,

80
00:05:26.876 --> 00:05:29.561
you can rerun the tests in here as well.

81
00:05:29.561 --> 00:05:34.962
And if I save this particular test,
the system is smart enough to only go and

82
00:05:34.962 --> 00:05:37.641
rerun the file that I've modified.

83
00:05:38.691 --> 00:05:42.583
And so this is what I mean by being lazy,
right?

84
00:05:42.583 --> 00:05:46.537
I have taken away all of
the problems of running the code and

85
00:05:46.537 --> 00:05:49.614
put them inside of this test runner,
right?

86
00:05:49.614 --> 00:05:54.229
And so what you will see is that as we're
gonna work on this particular thing, we're

87
00:05:54.229 --> 00:05:58.789
just gonna change code and save because
that's a natural thing for us to do.

88
00:05:58.789 --> 00:06:02.552
And as we save, we will immediately
get updates of where we are.

89
00:06:04.282 --> 00:06:07.022
And I think that's kind of super cool and
super important.

90
00:06:07.022 --> 00:06:10.432
Also, the Vitest also comes with
this cool thing, dash, dash UI.

91
00:06:10.432 --> 00:06:14.063
And if you run this,

92
00:06:14.063 --> 00:06:19.621
I think it, if I go local host.

93
00:06:19.621 --> 00:06:20.371
Where's the UI?

94
00:06:22.433 --> 00:06:23.569
There we go, now it's running.

95
00:06:23.569 --> 00:06:27.385
Okay, I guess npm doesn't
pass the arguments through.

96
00:06:27.385 --> 00:06:29.025
I did not know that.

97
00:06:29.025 --> 00:06:31.280
So you can have a nice
dashboard in the UI and

98
00:06:31.280 --> 00:06:34.645
this dashboard basically
shows the same exact things.

99
00:06:34.645 --> 00:06:40.445
It shows you what your describes are,
what it should do in here.

100
00:06:40.445 --> 00:06:41.953
So for example, this is just one test,

101
00:06:41.953 --> 00:06:44.386
you can see that everything
is passing in here.

102
00:06:44.386 --> 00:06:49.026
So that's sometimes useful as well to
just different way of looking at it.

103
00:06:49.026 --> 00:06:51.211
Okay, so now we wanna write a test.

104
00:06:51.211 --> 00:06:57.374
So let's go to our spec and let's go and
implement this first test in here.

105
00:06:57.374 --> 00:07:00.386
So let's turn this into async.

106
00:07:05.215 --> 00:07:07.329
So what we're gonna do inside of test,
let's see.

107
00:07:07.329 --> 00:07:14.374
So we say const api = new GithubApi,
and let's just leave it as undefined.

108
00:07:14.374 --> 00:07:18.889
And then I'm gonna say getRepository, and

109
00:07:18.889 --> 00:07:23.769
I'm going to ask for 'mhevery', 'qwik',

110
00:07:23.769 --> 00:07:28.922
and I'm gonna say const
response equals await.

111
00:07:28.922 --> 00:07:31.562
And then what are we gonna
do with the response?

112
00:07:31.562 --> 00:07:37.252
Well, we can do an expect, and by the way
the proper way to do it is right here.

113
00:07:37.252 --> 00:07:42.470
So you can say expect that the response

114
00:07:42.470 --> 00:07:47.860
toSnapshot I think, MatchSnapshot.

115
00:07:51.595 --> 00:07:58.603
Okay, so we have a first test in this and
what you might think.

116
00:07:58.603 --> 00:08:02.078
So there's a piece of code, and
you wanna execute it, right?

117
00:08:02.078 --> 00:08:03.884
So we executed it, and

118
00:08:03.884 --> 00:08:08.835
now the response that came from
the server is shown over here.

119
00:08:08.835 --> 00:08:12.890
And you can see it's a huge
amount of text, a wall of text.

120
00:08:12.890 --> 00:08:18.067
One and two is,
this is not actually a unit test, right?

121
00:08:18.067 --> 00:08:21.829
Because we are actually talking to
a real server on the other side,

122
00:08:21.829 --> 00:08:25.269
which means if GitHub goes down,
our tests will be failing.

123
00:08:25.269 --> 00:08:29.746
If GitHub changes the what it responds
with the output, our test fails.

124
00:08:29.746 --> 00:08:34.086
As a matter of fact, I think if I just
rerun this, okay it still passes.

125
00:08:34.086 --> 00:08:38.774
But if I would go into my repo and
I would change something in there,

126
00:08:38.774 --> 00:08:41.536
I would now make this test fail.

127
00:08:41.536 --> 00:08:43.226
Because the output would change, right?

128
00:08:43.226 --> 00:08:46.083
If I would go and modify something,

129
00:08:46.083 --> 00:08:50.676
I'm sure there are timestamps in here and
other things.

130
00:08:50.676 --> 00:08:51.197
Is there timestamps?

131
00:08:51.197 --> 00:08:52.024
Probably.

132
00:08:56.410 --> 00:08:58.500
Yeah updated at, for
example, you see that.

133
00:08:58.500 --> 00:09:06.270
So this test, while it's super easy to
write is not the best kinds of tests.

134
00:09:06.270 --> 00:09:09.402
And I think this is where a lot
of people get in trouble,

135
00:09:09.402 --> 00:09:11.592
because they execute a piece of code.

136
00:09:11.592 --> 00:09:14.285
They're like look I'm doing testing, and

137
00:09:14.285 --> 00:09:17.065
then they assert that
the output is correct.

138
00:09:17.065 --> 00:09:20.804
And of course the output will not be
correct tomorrow because somebody changes

139
00:09:20.804 --> 00:09:23.304
something because you're
depending on live data.

140
00:09:23.304 --> 00:09:28.163
Or the service goes down or
the test becomes flaky or

141
00:09:28.163 --> 00:09:32.579
if you just look at
the amount of time it takes.

142
00:09:32.579 --> 00:09:35.257
If you just look at
the amount of time it takes,

143
00:09:35.257 --> 00:09:38.732
it took 344 milliseconds
to execute this test.

144
00:09:38.732 --> 00:09:39.702
That is a lot.

145
00:09:39.702 --> 00:09:43.332
If you have thousands of tests and
each one takes a third of a second,

146
00:09:43.332 --> 00:09:44.105
that is a lot.

147
00:09:45.305 --> 00:09:48.530
So while this is kind of
an obvious way to do this,

148
00:09:48.530 --> 00:09:50.821
this is not the best way to do this.

