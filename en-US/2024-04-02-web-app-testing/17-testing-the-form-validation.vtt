WEBVTT

1
00:00:00.650 --> 00:00:04.710
We now have a form, and
this form validates.

2
00:00:04.710 --> 00:00:07.670
So we would probably like
to write a bunch of code

3
00:00:07.670 --> 00:00:10.556
to validate that the form
behaves correctly,

4
00:00:10.556 --> 00:00:15.233
so that it does cause invalidation if
I produce different values, right?

5
00:00:15.233 --> 00:00:16.855
And so we can do that.

6
00:00:16.855 --> 00:00:20.956
So I think, I don't know if
it will validate if I do it.

7
00:00:28.316 --> 00:00:29.653
It was a minimum distance, no.

8
00:00:29.653 --> 00:00:33.238
I see, it only validates when
I hit the button Cluster.

9
00:00:33.238 --> 00:00:33.896
Okay, got you.

10
00:00:33.896 --> 00:00:38.332
I don't remember what I wrote.

11
00:00:38.332 --> 00:00:40.438
Right, so it has to be bigger than that.

12
00:00:40.438 --> 00:00:41.771
Okay, so let's do that.

13
00:00:41.771 --> 00:00:48.399
So what we can do now is write
more tests along this path, right?

14
00:00:48.399 --> 00:00:52.979
So we can say, test(it

15
00:00:52.979 --> 00:00:57.788
should print validation

16
00:00:57.788 --> 00:01:02.368
errors when out of bound

17
00:01:02.368 --> 00:01:08.097
parameters are passed in).

18
00:01:15.659 --> 00:01:18.220
And we will, again,
follow the same pattern.

19
00:01:25.307 --> 00:01:28.157
And so on a clusterPage,

20
00:01:28.157 --> 00:01:33.192
we basically wanna say clusterPage.set.

21
00:01:33.192 --> 00:01:37.404
Actually, let's navigate to

22
00:01:37.404 --> 00:01:42.102
a clean page, and then we can say,

23
00:01:42.102 --> 00:01:48.592
setDistance(1), clusterPage.submit,

24
00:01:50.633 --> 00:02:00.393
expect(clusterPage.error).

25
00:02:00.393 --> 00:02:05.225
So this should be
distanceError).toHaveText.

26
00:02:07.864 --> 00:02:09.003
Something like that, right?

27
00:02:09.003 --> 00:02:13.064
This is easy to read, right, from
a point of view of what the test does.

28
00:02:13.064 --> 00:02:18.058
And so now, our job is to modify
the clusterPage, the page object,

29
00:02:18.058 --> 00:02:21.661
to provide the code that is needed here,
right?

30
00:02:21.661 --> 00:02:23.339
So let's create a setDistance.

31
00:02:32.874 --> 00:02:35.632
So you do this.page, here we go.

32
00:02:35.632 --> 00:02:37.261
That was helping, input[name=distance].

33
00:02:37.261 --> 00:02:38.597
Yeah, here we go.

34
00:02:38.597 --> 00:02:40.122
[name=distance], distance.toString.

35
00:02:40.122 --> 00:02:42.567
Yeah, that seems right.

36
00:02:42.567 --> 00:02:49.836
await, sorry, not expect, async.

37
00:03:09.018 --> 00:03:14.222
So distanceError, that will be return

38
00:03:14.222 --> 00:03:18.485
this.page.distanceError.

39
00:03:18.485 --> 00:03:22.681
No, I think it's a different one,
what is it?

40
00:03:22.681 --> 00:03:27.573
Inspect &gt; Elements.

41
00:03:31.900 --> 00:03:34.621
It is class error.distance, okay.

42
00:03:34.621 --> 00:03:40.294
So .error.distance.

43
00:03:46.355 --> 00:03:48.369
No, this is not sitting, right?

44
00:03:48.369 --> 00:03:50.112
Let's type here.

45
00:03:50.112 --> 00:03:50.971
That's gonna give me that.

46
00:03:50.971 --> 00:03:55.941
And then the last thing
is gonna be page.click,

47
00:03:55.941 --> 00:03:59.102
and it's cluster not button.

48
00:03:59.102 --> 00:04:03.784
So now,
if we If we go back to our play right,

49
00:04:03.784 --> 00:04:07.589
we should be able to validate this.

50
00:04:12.616 --> 00:04:16.839
Looks like our click locator is not
working, so notice how it's hanging.

51
00:04:16.839 --> 00:04:19.747
And it's trying, basically retrying,
and at some point,

52
00:04:19.747 --> 00:04:23.464
it's gonna give up and say, I waited
long enough and it's no longer a thing.

53
00:04:23.464 --> 00:04:24.301
So let's see.

54
00:04:27.080 --> 00:04:31.240
The correct thing is Inspect,

55
00:04:31.240 --> 00:04:35.244
it's button type= submit.

56
00:04:35.244 --> 00:04:37.630
Okay, sorry.

57
00:04:37.630 --> 00:04:45.380
So it's not that, it is, button-
&gt;&gt; Missing async.

58
00:04:45.380 --> 00:04:48.600
&gt;&gt; Did I leave the async out?

59
00:04:48.600 --> 00:04:50.932
Yes, I did.

60
00:04:50.932 --> 00:04:54.877
I have a distanceError,
and this is mistyped.

61
00:04:54.877 --> 00:04:55.515
Here we go.

62
00:05:06.561 --> 00:05:09.125
There we go, now it's passing.

63
00:05:09.125 --> 00:05:11.299
So you can see that we asserted in.

64
00:05:11.299 --> 00:05:13.231
And the nice thing is when
you go up through this,

65
00:05:13.231 --> 00:05:15.364
you can actually see what
it was clicking on, right?

66
00:05:15.364 --> 00:05:19.588
You can see that it highlights,
this bit was filling this bit out,

67
00:05:19.588 --> 00:05:22.692
then it clicked on a button,
and this showed up.

68
00:05:22.692 --> 00:05:26.451
And so
all of the pieces that you have are there.

69
00:05:26.451 --> 00:05:31.366
So the main strategy I wanna
point out in terms of testing is

70
00:05:31.366 --> 00:05:34.386
this idea of page objects, right?

71
00:05:34.386 --> 00:05:38.951
And again, it comes down to this idea of,
I wanna make sure my tests

72
00:05:38.951 --> 00:05:43.853
are a form of documentation, therefore,
they need to be easy to read.

73
00:05:43.853 --> 00:05:47.420
And I wanna have a test like this, right?

74
00:05:47.420 --> 00:05:54.988
This is a test that I can easily read, and
people understand what's happening here.

75
00:05:54.988 --> 00:05:59.474
And so now, we need a place to kinda
put all of the non-interesting bits.

76
00:05:59.474 --> 00:06:02.112
And the non-interesting bits
basically go into your page object.

77
00:06:05.430 --> 00:06:10.010
&gt;&gt; That also reads like something you
could show to a non-technical person,

78
00:06:10.010 --> 00:06:14.602
a product manager or somebody like that,
and say like, hey, this is the-

79
00:06:14.602 --> 00:06:15.111
&gt;&gt; Yeah, so

80
00:06:15.111 --> 00:06:18.882
this is basically known as a DSL,
right, domain specific language.

81
00:06:18.882 --> 00:06:22.966
And somebody was asking,
what is the job of a QA?

82
00:06:22.966 --> 00:06:27.511
I think what would be useful,
if your QA's technical enough,

83
00:06:27.511 --> 00:06:30.769
is to create these page objects,
right, and

84
00:06:30.769 --> 00:06:35.951
essentially create this DSL so
that you can create complex scenarios.

85
00:06:35.951 --> 00:06:39.850
For this particular case,

86
00:06:39.850 --> 00:06:44.093
we only have one page object.

87
00:06:44.093 --> 00:06:48.790
But you can imagine how you click on
a button to navigate to another place, and

88
00:06:48.790 --> 00:06:52.417
then what you get back is a page
object for that navigation.

89
00:06:52.417 --> 00:06:56.619
So you are, for example, on a clusterPage,
but you click on a settings, and

90
00:06:56.619 --> 00:06:59.351
what you get back is the page object for
settings.

91
00:06:59.351 --> 00:07:01.950
And now, you can do necessary
things with the settings.

92
00:07:01.950 --> 00:07:05.998
You can go and change your preferences,
save it, and then go back to yet

93
00:07:05.998 --> 00:07:09.725
another page, and then verify
that the correct output is there.

94
00:07:09.725 --> 00:07:14.534
And so the DSL that you create
with these page objects

95
00:07:14.534 --> 00:07:18.806
allows you to succinctly
express the intent.

96
00:07:18.806 --> 00:07:21.795
Whether it's in the form of navigations or

97
00:07:21.795 --> 00:07:27.120
in the form of reading the values out of
the page so you can assert the output.

98
00:07:27.120 --> 00:07:29.994
&gt;&gt; Yeah, I mean,
that's how I use something like this.

99
00:07:29.994 --> 00:07:33.308
I mean,
built it home grown a decade ago, but

100
00:07:33.308 --> 00:07:38.119
I would take the QA test case, and
then I would write it into code.

101
00:07:38.119 --> 00:07:40.444
And I would just do that over and

102
00:07:40.444 --> 00:07:45.274
over again until the software
was basically just bulletproof,

103
00:07:45.274 --> 00:07:50.294
cuz I had hundred of these things
covering all sorts of edge cases.

104
00:07:50.294 --> 00:07:55.560
That's the problem with unit
tests is you can't get the whole

105
00:07:55.560 --> 00:08:00.733
application running [LAUGH] and
those edge cases worked out.

106
00:08:00.733 --> 00:08:04.229
And like interplaying,
you fix one line of code and

107
00:08:04.229 --> 00:08:07.900
now three edge cases break,
or something like that.

108
00:08:07.900 --> 00:08:12.936
Whereas these end up be
more difficult to write.

109
00:08:12.936 --> 00:08:17.623
There's a lot more pieces involved,
but at the end of the day,

110
00:08:17.623 --> 00:08:21.875
it really makes your software,
I think, bulletproof.

111
00:08:21.875 --> 00:08:27.054
&gt;&gt; It also is a little bit slower
to execute than a unit test, right?

112
00:08:27.054 --> 00:08:29.714
And also, if you go back over here,

113
00:08:29.714 --> 00:08:33.977
we're actually running this
on a real data set, right?

114
00:08:33.977 --> 00:08:42.077
So it will be the kinda difficult to
provide assertions about the dataset.

115
00:08:42.077 --> 00:08:47.297
I could imagine that in the page object,
I could write some code to go and

116
00:08:47.297 --> 00:08:52.359
reverse engineer all the tags that
I inserted inside of the cluster.

117
00:08:52.359 --> 00:08:55.868
And then recover back the original data
and then assert the original data.

118
00:08:55.868 --> 00:08:59.813
I could kinda imagine that, but it's
not really how you wanna do it, right?

119
00:08:59.813 --> 00:09:02.671
You really wanna break
this down into pieces and

120
00:09:02.671 --> 00:09:05.605
test different things
in different locations.

121
00:09:05.605 --> 00:09:10.298
So the primary reason for
the end-to-end test is to make

122
00:09:10.298 --> 00:09:15.109
sure that the happy flows
connect all the pieces, right?

123
00:09:15.109 --> 00:09:18.302
If you think of your application,
your application

124
00:09:18.302 --> 00:09:23.099
are lots of independent parts that
are glued together with some connections.

125
00:09:23.099 --> 00:09:25.852
And while you can easily
test individual piece,

126
00:09:25.852 --> 00:09:30.362
you're never quite sure whether you
hooked up all the connections correctly.

127
00:09:30.362 --> 00:09:34.687
And so the end-to-end test is a really
good way of proving to yourself

128
00:09:34.687 --> 00:09:37.486
that everything is wired
together as a unit.

129
00:09:37.486 --> 00:09:41.823
&gt;&gt; But you're right, they do become
really slow if you get too many of them.

130
00:09:41.823 --> 00:09:48.910
&gt;&gt; So it's a tradeoff between speed,
and something goes wrong.

131
00:09:48.910 --> 00:09:53.314
The other kind of a tradeoff that you have
over here is when the unit test fails,

132
00:09:53.314 --> 00:09:55.399
you are only to testing a small unit.

133
00:09:55.399 --> 00:09:59.191
So you know that the problem is inside
of that small unit that you're testing,

134
00:09:59.191 --> 00:10:01.380
whether it's a function or
a class or a file.

135
00:10:01.380 --> 00:10:07.466
But if something fails here,
it could be anywhere, right?

136
00:10:07.466 --> 00:10:12.132
So these are different tradeoffs
that you have to kind of think

137
00:10:12.132 --> 00:10:14.561
about when building software.

