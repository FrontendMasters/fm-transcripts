WEBVTT

1
00:00:00.300 --> 00:00:02.430
So let's talk about
different kinds of tests.

2
00:00:02.430 --> 00:00:05.710
So a lot of time people talk
about this testing pyramid.

3
00:00:05.710 --> 00:00:09.777
And the idea of a testing pyramid
is that you have two axis,

4
00:00:09.777 --> 00:00:14.780
you have execution time, and
you have number of tests, right?

5
00:00:14.780 --> 00:00:19.776
And so what people are saying is that
primarily, you should have unit tests And

6
00:00:19.776 --> 00:00:21.896
when the unit test really check,

7
00:00:21.896 --> 00:00:26.230
is that they check whether your
code does what it's supposed to do.

8
00:00:26.230 --> 00:00:30.969
To put it differently, it checks, when you
write your code, you have if statements

9
00:00:30.969 --> 00:00:36.228
inside of it to make different decision
based on different circumstances, right?

10
00:00:36.228 --> 00:00:39.579
Unit tests really are all about
checking the if statements, right,

11
00:00:39.579 --> 00:00:42.025
that do right things happen
with the right input.

12
00:00:44.065 --> 00:00:46.970
Functional tests, or
sometimes known as integration tests,

13
00:00:46.970 --> 00:00:49.405
really bring multiple units together.

14
00:00:49.405 --> 00:00:53.807
And there, you want to test not
necessarily whether individual pieces do

15
00:00:53.807 --> 00:00:58.706
the right thing on their own, although
you can, but more you're interested in,

16
00:00:58.706 --> 00:01:01.688
are the things compatible with each other?

17
00:01:01.688 --> 00:01:07.026
Like if I, for example, had a DBSCAN,
which was the clustering algorithm,

18
00:01:07.026 --> 00:01:11.787
I had to format my data in the correct
way for the DBSCAN to consume it,

19
00:01:11.787 --> 00:01:16.469
and then DBSCAN produce something,
which I had to further format in

20
00:01:16.469 --> 00:01:21.004
the way that my clustering
component could consume, right?

21
00:01:21.004 --> 00:01:24.453
All these conversions,
are they making the right assumptions?

22
00:01:24.453 --> 00:01:27.024
And this is the purpose of
an integration test, right?

23
00:01:27.024 --> 00:01:31.788
You're not really questioning whether the
DBSCAN itself is doing the right thing,

24
00:01:31.788 --> 00:01:36.215
you're just questioning of whether the
conversion code to get it to state what

25
00:01:36.215 --> 00:01:40.706
DBSCAN can use, and then the conversion
code to get it back out so that I can use,

26
00:01:40.706 --> 00:01:42.478
does that make sense, right?

27
00:01:43.848 --> 00:01:48.821
And so, the functional test or
integration test really are more into

28
00:01:48.821 --> 00:01:54.048
having a bunch of things together to
see if you get the correct output.

29
00:01:54.048 --> 00:01:59.052
Now, it's not always that they're just
interested in communication, sometimes

30
00:01:59.052 --> 00:02:04.378
you can have unit level tests as well, but
it's primarily what they're interested in.

31
00:02:04.378 --> 00:02:10.413
Now typically, functional tests will be
slower because there's more code to run,

32
00:02:10.413 --> 00:02:15.708
but also because your functional tests
are more likely to depend on I/O.

33
00:02:15.708 --> 00:02:19.280
If you think about it,
modern CPUs are extremely fast,

34
00:02:19.280 --> 00:02:23.924
it's really difficult to keep
a modern CPU busy with just code.

35
00:02:23.924 --> 00:02:28.523
Usually when you have to wait for
things a long time, you're waiting for IO.

36
00:02:28.523 --> 00:02:31.299
If we had our unit test where
we were talking to GitHub and

37
00:02:31.299 --> 00:02:34.844
I was saying, look, that's a slow test,
it takes a third of a second,

38
00:02:34.844 --> 00:02:37.740
the issue there wasn't that
the CPU wasn't fast enough,

39
00:02:37.740 --> 00:02:41.329
the issue there was that we were
doing IO to the outside world.

40
00:02:41.329 --> 00:02:46.057
And so, as you go up in this existing
pyramid, you're gonna discover that you're

41
00:02:46.057 --> 00:02:50.800
gonna do more and more IO, and it's the IO
that makes the test fundamentally slow.

42
00:02:52.876 --> 00:02:56.683
And finally, the scenario test,
or like the famous E2E test,

43
00:02:56.683 --> 00:03:01.552
which is essentially the Playwright,
Playwright is gonna be even slower because

44
00:03:01.552 --> 00:03:06.378
you are bringing up a full on browser,
you're pretending to be a user, right?

45
00:03:06.378 --> 00:03:10.906
Every single click might be a round trip
to a server, which renders a new page,

46
00:03:10.906 --> 00:03:15.641
which navigates to a new place and things
of that sort, so these tests as you go up,

47
00:03:15.641 --> 00:03:16.696
becomes slower.

48
00:03:16.696 --> 00:03:21.962
And this is why the recommendation
is that when you develop software,

49
00:03:21.962 --> 00:03:25.424
you wanna focus on unit
tests on the bottom.

50
00:03:25.424 --> 00:03:28.170
If for example,
I have a list of orders and

51
00:03:28.170 --> 00:03:32.645
the list of orders are incorrectly
showing in the incorrect order,

52
00:03:32.645 --> 00:03:37.894
chances are I've probably messed up
the sorting algorithm somewhere.

53
00:03:37.894 --> 00:03:41.068
So there should be a function somewhere
in the code base that does the sorting

54
00:03:41.068 --> 00:03:41.714
algorithm.

55
00:03:41.714 --> 00:03:46.259
And I should be able to just invoke the
function as a unit test, rather than go

56
00:03:46.259 --> 00:03:50.946
into an end-to-end test and try to order
a bunch of try to input a whole bunch of

57
00:03:50.946 --> 00:03:55.584
orders through the UI, and then verify
that the output does the right thing.

58
00:03:55.584 --> 00:03:58.574
That's way too high level for
this particular thing, right?

59
00:03:58.574 --> 00:04:02.475
We're just trying to assert
that individual order forms

60
00:04:02.475 --> 00:04:04.424
are in the correct order, so

61
00:04:04.424 --> 00:04:10.781
we wanna make sure that our comparator
function does the right stuff, right?

62
00:04:10.781 --> 00:04:12.701
So that's why you wanna
focus mostly on unit tests.

63
00:04:12.701 --> 00:04:16.097
Now, this is kind of the ideal world,
doesn't mean that that's actually what

64
00:04:16.097 --> 00:04:19.661
happens in real world, especially when
you have a legacy code base, right?

65
00:04:19.661 --> 00:04:21.534
If you have a legacy codebase,

66
00:04:21.534 --> 00:04:26.073
this will probably be inverted,
because when you have a legacy codebase,

67
00:04:26.073 --> 00:04:30.811
about the only thing that you can
do is to do end-to-end testing.

68
00:04:30.811 --> 00:04:36.638
And slowly over time you can go and
see if you can refactor things and

69
00:04:36.638 --> 00:04:42.985
introduce your mocks into the system so
that you can carve out smaller and

70
00:04:42.985 --> 00:04:47.278
smaller chunks for
unit testing, makes sense?

71
00:04:47.278 --> 00:04:50.014
Question?

72
00:04:50.014 --> 00:04:54.547
&gt;&gt; So do the functional integration
tests have the same testing harness, or

73
00:04:54.547 --> 00:04:58.344
is there a way to test
a gateway like a database call?

74
00:04:58.344 --> 00:05:03.957
If I mark the database I
don't get the actual result,

75
00:05:03.957 --> 00:05:08.213
which is what I'm most concerned with.

76
00:05:08.213 --> 00:05:12.610
&gt;&gt; Right, I think the kind of tooling you
use I think is orthogonal, for example,

77
00:05:12.610 --> 00:05:15.344
you can use Playwright with Storybook.

78
00:05:15.344 --> 00:05:18.627
So, because you're using Playwright,
is that an end-to-end test, or

79
00:05:18.627 --> 00:05:21.441
because it's a storybook,
it's Integration test, right?

80
00:05:21.441 --> 00:05:26.346
So like, to some degree,
these are not written in stone in terms of

81
00:05:26.346 --> 00:05:30.828
what they are, it's more like
a guide to kind of talk about.

82
00:05:30.828 --> 00:05:34.136
When you wanna test
something like a database,

83
00:05:34.136 --> 00:05:36.541
there are a couple of strategies.

84
00:05:36.541 --> 00:05:39.015
One is you can mark it out,
but the problem is,

85
00:05:39.015 --> 00:05:42.479
maybe the communication you
mocked out is incorrect.

86
00:05:42.479 --> 00:05:47.064
So the next thing you can do is you
can create a copy of your database and

87
00:05:47.064 --> 00:05:50.919
locally and
low preloaded with local data, right?

88
00:05:50.919 --> 00:05:55.602
That would be kind of more a trustworthy
thing because you're doing more

89
00:05:55.602 --> 00:05:57.629
of an end-to-end test.

90
00:05:57.629 --> 00:06:02.082
But by doing that now your system is
slow because you maybe can't execute

91
00:06:02.082 --> 00:06:03.705
fast enough.

92
00:06:03.705 --> 00:06:07.149
But it turns out if you wanna
do something with databases,

93
00:06:07.149 --> 00:06:11.226
there's lots of object ORMs,
object relational mappers, right,

94
00:06:11.226 --> 00:06:15.442
where instead of talking directly to
the database, you talk to an ORM,

95
00:06:15.442 --> 00:06:18.913
which is a object-oriented
representation of the data.

96
00:06:18.913 --> 00:06:22.549
And that naturally creates
a place where you can mock, so

97
00:06:22.549 --> 00:06:27.094
then you have a choice of whether I
wanna talk directly to the database or

98
00:06:27.094 --> 00:06:31.699
talk to the ORM, and
I can create mocks for them in that way.

99
00:06:31.699 --> 00:06:37.796
The other thing you can do is you can
easily create like an in-memory database,

100
00:06:37.796 --> 00:06:42.528
like SQL DB has an in-memory
version that you can get where you

101
00:06:42.528 --> 00:06:47.078
can preload a data set that's useful for
testing, right?

102
00:06:47.078 --> 00:06:50.448
Because there is a data set
that is kinda a production and

103
00:06:50.448 --> 00:06:55.182
the production data usually is not
the ideal data for testing because there's

104
00:06:55.182 --> 00:06:59.858
lots of boring stuff in there that
isn't really that interesting.

105
00:06:59.858 --> 00:07:04.550
And for unit tests or for other kinds of
testing thing you want the corner cases,

106
00:07:04.550 --> 00:07:09.315
and so you want a database filled with all
kinds of interesting corner cases, and

107
00:07:09.315 --> 00:07:12.985
even the fact of understanding
the corner cases of interest.

108
00:07:12.985 --> 00:07:17.758
In that kind of situation, you can split
it in two ways, you can say that you have

109
00:07:17.758 --> 00:07:22.034
a well known database which was
prepopulated with these corner cases,

110
00:07:22.034 --> 00:07:26.733
the problem is, how do you communicate
that to all your developers?

111
00:07:26.733 --> 00:07:30.649
Or you can say like, no,
I'm gonna bring a brand new database, and

112
00:07:30.649 --> 00:07:34.910
as part of my test, the setup is
responsible to write into the database and

113
00:07:34.910 --> 00:07:38.583
set up the corner case
that you're interested in.

114
00:07:38.583 --> 00:07:42.941
And I think the second one is more
interesting one where you are guaranteed

115
00:07:42.941 --> 00:07:46.805
that every single test is basically
starting with a blank slate,

116
00:07:46.805 --> 00:07:49.099
with nothing in a database.

117
00:07:49.099 --> 00:07:53.325
And then through something like
a page object or some form of a DSL,

118
00:07:53.325 --> 00:07:57.909
you describe what the database
should have that preloads it.

119
00:07:57.909 --> 00:08:02.063
And now you have a system in a correct
state into in terms of what you wanna

120
00:08:02.063 --> 00:08:05.525
test, and then you can go ahead and
apply your assertions,

121
00:08:05.525 --> 00:08:10.103
you can poke at it to get the output
that you want out of the system.

122
00:08:10.103 --> 00:08:10.933
How does this work?

123
00:08:10.933 --> 00:08:15.144
And I think the way most people
do is they write code here, and

124
00:08:15.144 --> 00:08:21.025
I intentionally made this box red because
that's where the bugs get put in, right?

125
00:08:22.185 --> 00:08:24.718
So the software engineers write code,

126
00:08:24.718 --> 00:08:29.565
and then they have some QA and they
expect that the QA will catch their bugs.

127
00:08:31.305 --> 00:08:33.941
And then you hire some test engineers and
say,

128
00:08:33.941 --> 00:08:38.865
why don't you automate all this stuff so
we don't have to do it all the time.

129
00:08:38.865 --> 00:08:41.949
And so, for some reason,
when you first talk to people,

130
00:08:41.949 --> 00:08:45.246
they always assume the testing
magic happens at this level.

131
00:08:45.246 --> 00:08:50.006
They're like, get some magical software,
pay company some money or whatever and

132
00:08:50.006 --> 00:08:52.046
this problem will go away, right?

133
00:08:52.046 --> 00:08:55.197
And this is not the correct mental model,
this is,

134
00:08:55.197 --> 00:08:58.066
you cannot fix the problem at this level.

135
00:08:58.066 --> 00:09:03.003
And fundamentally, the reason we cannot
fix the problem is, I have this opinion

136
00:09:03.003 --> 00:09:07.794
philosophy, I don't know what you wanna
call it, which is that the person who

137
00:09:07.794 --> 00:09:12.781
creates a mess needs to be the person
who suffers the consequences, right?

138
00:09:12.781 --> 00:09:17.821
If the two people are different,
nothing ever is gonna get better, right?

139
00:09:17.821 --> 00:09:22.250
So if the developer is the one that's
creating a mess making the code untestable

140
00:09:22.250 --> 00:09:25.953
and then the automation engineer
is suffering the consequences,

141
00:09:25.953 --> 00:09:28.575
this isn't gonna get better, right?

142
00:09:28.575 --> 00:09:32.051
You need to make sure that the software
engineer, not only is responsible for

143
00:09:32.051 --> 00:09:35.185
writing the code, but
also is responsible for writing the test.

144
00:09:35.185 --> 00:09:39.121
And then they see the consequences
to their actions, and

145
00:09:39.121 --> 00:09:44.041
now they have a closed loop and
immediately they can learn and say,

146
00:09:44.041 --> 00:09:48.971
I shouldn't do this, it hurts when
I do that, don't do that, right?

147
00:09:48.971 --> 00:09:52.839
And so this is not where the testing magic
is, that's where the testing magic is.

