WEBVTT

1
00:00:00.000 --> 00:00:04.324
Well, what if the GitHub API changes?

2
00:00:04.324 --> 00:00:09.935
So, I'm curious what your thoughts
on something like that would be.

3
00:00:09.935 --> 00:00:13.822
&gt;&gt; Right, so this is where end-to-end
tests come into play, right?

4
00:00:13.822 --> 00:00:18.198
So with unit tests, you wanna verify
that what you're doing is correct.

5
00:00:18.198 --> 00:00:22.915
With end-to-end tests, you're saying, I
wanna make sure that all of the pieces in

6
00:00:22.915 --> 00:00:26.075
the system, which may include GitHub,
come into play.

7
00:00:26.075 --> 00:00:28.006
And you can have two different
kinds of end-to-end tests, right?

8
00:00:28.006 --> 00:00:30.961
You can have an end-to-end test
where GitHub is actually involved,

9
00:00:30.961 --> 00:00:34.178
where you're actually verifying that
it works all the way through GitHub.

10
00:00:34.178 --> 00:00:38.914
Or you can have an end-to-end test where
GitHub is mocked out, where you're

11
00:00:38.914 --> 00:00:43.436
assuming that you are correctly mocking
out how GitHub works on your side,

12
00:00:43.436 --> 00:00:44.101
and do it.

13
00:00:44.101 --> 00:00:45.561
And both of them have value, right?

14
00:00:45.561 --> 00:00:49.056
One is verifying that the API
hasn't changed with GitHub.

15
00:00:49.056 --> 00:00:51.213
Now, GitHub has their APIs versioned and

16
00:00:51.213 --> 00:00:55.039
there's other discussions to be had
around like why that's a good idea.

17
00:00:55.039 --> 00:00:58.476
And on your side you have a choice
to do one way or the other, and

18
00:00:58.476 --> 00:01:02.003
both of these tests are useful and
they test different things.

19
00:01:02.003 --> 00:01:06.552
&gt;&gt; How are the testing objects
shared with the spec files

20
00:01:06.552 --> 00:01:09.595
existing in the routes directory?

21
00:01:09.595 --> 00:01:16.942
&gt;&gt; So, I like to put the spec files
right next to the test that you have.

22
00:01:16.942 --> 00:01:20.848
There is a small risk that you
accidentally include your test code in

23
00:01:20.848 --> 00:01:21.677
production.

24
00:01:21.677 --> 00:01:25.770
My argument towards that would be like,
make sure your bundling system

25
00:01:25.770 --> 00:01:29.534
has a glob that says,
do not include anything that has spec.ts.

26
00:01:29.534 --> 00:01:30.981
That should be pretty safe.

27
00:01:30.981 --> 00:01:34.509
I like it because it's right
next to each other, and so

28
00:01:34.509 --> 00:01:37.433
it's easy to correlate the files together.

29
00:01:37.433 --> 00:01:43.823
In the past, I have been in projects where
we put the test in a separate folder.

30
00:01:43.823 --> 00:01:47.520
Because they're just far away,
it becomes kinda complicated to manage it.

31
00:01:47.520 --> 00:01:52.986
So I personally like when they're
right next to each other.

32
00:01:52.986 --> 00:01:57.526
&gt;&gt; Would you create another test
with the actual correct repo and

33
00:01:57.526 --> 00:02:01.378
correct username to make
sure it builds correctly?

34
00:02:01.378 --> 00:02:02.828
This is a generic test,

35
00:02:02.828 --> 00:02:07.483
but would you ever create something
that's very specific to your project?

36
00:02:07.483 --> 00:02:09.588
&gt;&gt; So, it depends where you
are in the stack, right?

37
00:02:09.588 --> 00:02:11.143
For an end-to-end test,

38
00:02:11.143 --> 00:02:16.020
because we're mocking everything out,
it doesn't really matter what you choose.

39
00:02:16.020 --> 00:02:18.673
But if you wanted to actually
go against the real repo,

40
00:02:18.673 --> 00:02:20.470
it's more of an end-to-end test.

41
00:02:20.470 --> 00:02:25.047
And you might wanna choose to have
a couple of smoke tests like that in that

42
00:02:25.047 --> 00:02:25.807
category.

43
00:02:25.807 --> 00:02:27.993
You probably don't wanna put
them with your unit test,

44
00:02:27.993 --> 00:02:30.332
because they might run slower,
they might be flaky, etc.

45
00:02:30.332 --> 00:02:35.518
You probably wanna run them in a separate
command, with a separate build,

46
00:02:35.518 --> 00:02:41.052
etc, that maybe they only run as part of
your CI build or something of that sort.

47
00:02:41.052 --> 00:02:43.133
But both of those things are useful,
right?

48
00:02:43.133 --> 00:02:46.103
Each one of these test a different thing.

49
00:02:46.103 --> 00:02:49.631
Now, I really wanna stress out this
angle of documentation, right?

50
00:02:49.631 --> 00:02:53.951
So look at this test, and
let's just think about,

51
00:02:53.951 --> 00:02:58.477
what can we do to make the test
easier to read, right?

52
00:02:58.477 --> 00:03:02.479
Typically, you just wanna pull things out
so that you end up with something that

53
00:03:02.479 --> 00:03:05.287
reads easily for the user,
because you wanna be able for

54
00:03:05.287 --> 00:03:09.312
the next person to come in here and
easily understand what's going on, right?

55
00:03:09.312 --> 00:03:13.156
So typically we have some form of a setup,
and

56
00:03:13.156 --> 00:03:20.047
the setup is something that we can pull to
a common location that might be useful.

57
00:03:20.047 --> 00:03:23.328
And I think as we are going to go
through multiple different tests,

58
00:03:23.328 --> 00:03:26.502
we're gonna see that the same
setup occurs over and over again.

59
00:03:26.502 --> 00:03:29.465
We will go and
refactor it to a common location.

60
00:03:29.465 --> 00:03:34.983
Then there is usually the stimulus, the
actual piece of work that you do, right?

61
00:03:34.983 --> 00:03:38.139
The thing that you're testing,
right, the thing on the test, sorry,

62
00:03:38.139 --> 00:03:39.242
that goes all over here.

63
00:03:39.242 --> 00:03:41.109
Sorry, let me back up a second.

64
00:03:41.109 --> 00:03:44.451
The setup is all the way up to here,
right?

65
00:03:44.451 --> 00:03:47.965
Because setting up an API with
a mock is part of the setup.

66
00:03:47.965 --> 00:03:52.791
So this is a setup portion,
then there is a stimulus portion, right?

67
00:03:52.791 --> 00:03:56.237
The actual work,
the thing that I'm testing, right?

68
00:03:56.237 --> 00:03:59.344
And finally,
I have a whole bunch of expects.

69
00:03:59.344 --> 00:04:03.961
And these expects come in either in
the form of just a plain expect,

70
00:04:03.961 --> 00:04:08.168
like expect fetch mark to have
been called with whatever, or

71
00:04:08.168 --> 00:04:12.059
they come in a form of replaying
the other side, right?

72
00:04:12.059 --> 00:04:15.069
So i'm kind of straddling
both sides of the test.

73
00:04:15.069 --> 00:04:19.482
Like, I can expect things from the front,
but in the back,

74
00:04:19.482 --> 00:04:23.736
I can go and pretend that stuff
happened using the mocks.

75
00:04:23.736 --> 00:04:26.633
And that's how I sandwich my test and

76
00:04:26.633 --> 00:04:31.599
do whatever I need into it, and
finally I expect the response.

77
00:04:31.599 --> 00:04:36.614
The other thing I wanna point out is that,
as much as you can, you really

78
00:04:36.614 --> 00:04:41.813
wanna get away with these simple
responses, or the simplified objects.

79
00:04:41.813 --> 00:04:46.487
Because it tells the reader
that it doesn't matter.

80
00:04:46.487 --> 00:04:49.600
Like, you're simplifying the mental model
for them, because you're saying, look,

81
00:04:49.600 --> 00:04:52.393
there's some response that's gonna come
in and it's gonna show up over here.

82
00:04:52.393 --> 00:04:55.224
The actual details don't matter, right?

83
00:04:55.224 --> 00:05:00.074
If I was actually going to make
a real humongous object, like,

84
00:05:00.074 --> 00:05:04.021
I could grab the object from the snapshot,
right?

85
00:05:04.021 --> 00:05:07.315
I could say,
this thing here is my response.

86
00:05:07.315 --> 00:05:11.219
But it would make the test a lot more
complicated for the user to kind of follow

87
00:05:11.219 --> 00:05:15.611
along because then they don't know, is it
something that matters to the test or not?

88
00:05:15.611 --> 00:05:20.179
So you really wanna simplify this and you
really wanna break your test into these

89
00:05:20.179 --> 00:05:24.964
three phase, the setup phase, the stimulus
phase, and the expectations phase.

90
00:05:24.964 --> 00:05:30.265
And every test should follow
this particular pattern overall.

