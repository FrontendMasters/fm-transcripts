WEBVTT

1
00:00:00.071 --> 00:00:04.425
This is not obvious at first
when you start writing code,

2
00:00:04.425 --> 00:00:09.051
you think of testing as something
you do later to the codebase

3
00:00:09.051 --> 00:00:13.420
rather than as being part of
the process of writing code.

4
00:00:14.430 --> 00:00:17.914
And I think this is an important
kind of thing to to internalize.

5
00:00:17.914 --> 00:00:22.629
And it's not just that, it's also
the thing I talked about, which is,

6
00:00:22.629 --> 00:00:27.733
you wanna set up your environment so
you don't have to think about it.

7
00:00:27.733 --> 00:00:30.706
When somebody comes to you and
says, x is broken and

8
00:00:30.706 --> 00:00:34.854
you wanna reproduce it,
you immediately say, the easiest way for

9
00:00:34.854 --> 00:00:37.923
me to reproduce it is to
write a mini-test, right?

10
00:00:39.733 --> 00:00:43.782
If somebody comes in and says, the
clustering isn't working the way I expect,

11
00:00:43.782 --> 00:00:48.115
you should immediately be like, okay, let
me write a unit test with the thing you're

12
00:00:48.115 --> 00:00:50.630
describing see if I can produce the thing.

13
00:00:50.630 --> 00:00:54.399
And the easiest way to do it is inside of
a unit test because it runs automatically

14
00:00:54.399 --> 00:00:57.850
on a side I can immediately see
the output, I can see what's happening.

15
00:00:57.850 --> 00:01:01.995
I can run it under debugger to figure
out what the issue is and so on.

16
00:01:05.657 --> 00:01:09.837
So I always say that testing is
not like frosting, meaning that,

17
00:01:09.837 --> 00:01:13.561
frosting is the sugar you put
on when you bake, right, but

18
00:01:13.561 --> 00:01:17.980
flour is the ingredient that
has to go into your cake.

19
00:01:17.980 --> 00:01:22.347
Like if you skip flour when you're baking
a cake, whatever you get out of it, right,

20
00:01:22.347 --> 00:01:26.107
like you can't add flour on top of it
afterwards and expect to have a cake,

21
00:01:26.107 --> 00:01:28.078
it just doesn't work, right?

22
00:01:28.078 --> 00:01:31.267
So testing is not like frosting,
you can't just add it after the fact,

23
00:01:31.267 --> 00:01:32.714
it has to be part of the process.

24
00:01:35.663 --> 00:01:41.780
So the other thing I wanna talk about, and
I think it's useful as a mental exercise,

25
00:01:41.780 --> 00:01:45.227
is to say,
suppose you're an evil engineer and

26
00:01:45.227 --> 00:01:49.902
you wanna make your code hard to test,
what do you do, right?

27
00:01:49.902 --> 00:01:52.957
Because presumably,
if you can answer that question,

28
00:01:52.957 --> 00:01:57.251
then you can answer the question of what
not to do to make your code easy to test.

29
00:01:57.251 --> 00:02:01.686
And I have a class for you here.

30
00:02:01.686 --> 00:02:06.037
This happens to be Java cuz
I wrote this a while ago.

31
00:02:06.037 --> 00:02:09.819
And when I show this to people,
what usually happens is that people start

32
00:02:09.819 --> 00:02:13.236
reading the code and
they're trying to understand what it does.

33
00:02:15.126 --> 00:02:20.065
And I think that misses the point,
because what the code does has really

34
00:02:20.065 --> 00:02:24.283
nothing to do with whether or
not it's easy to read or write.

35
00:02:24.283 --> 00:02:27.650
As a matter of fact, we have minifiers,
we could minify the whole thing.

36
00:02:27.650 --> 00:02:29.603
&gt;&gt; [LAUGH]
&gt;&gt; Right, and

37
00:02:29.603 --> 00:02:32.476
now you have no idea what the code does.

38
00:02:32.476 --> 00:02:38.263
And yet I'm gonna argue that the ability
to test it has not changed, right?

39
00:02:38.263 --> 00:02:42.251
So testing the code has nothing
to do with what the code does and

40
00:02:42.251 --> 00:02:45.864
it has to do everything with
how the code is structured.

41
00:02:46.974 --> 00:02:50.100
And we kind of touched up on
the biggest part of this,

42
00:02:50.100 --> 00:02:54.024
which is that you need to be able
to get hold of your dependencies.

43
00:02:56.184 --> 00:02:58.444
And so let's color code this a little bit.

44
00:02:58.444 --> 00:03:02.182
So this is the green part over here.

45
00:03:02.182 --> 00:03:06.833
And what the green part
represents are variables

46
00:03:06.833 --> 00:03:11.256
that I can control because
I can pass in a mock,

47
00:03:11.256 --> 00:03:16.144
a friendly, a fake implementation,
a database.

48
00:03:16.144 --> 00:03:18.428
If the data presents a database,

49
00:03:18.428 --> 00:03:22.681
I can pass in a local database over here,
I control D, right?

50
00:03:22.681 --> 00:03:27.109
And because I control D,
if I try hard enough,

51
00:03:27.109 --> 00:03:30.527
maybe, maybe I can control B and C.

52
00:03:31.857 --> 00:03:35.221
But I say, if try I hard enough, meaning,

53
00:03:35.221 --> 00:03:39.801
if I'm really clever about
what green color represents,

54
00:03:39.801 --> 00:03:44.230
the yellow color becomes one step removed,
right?

55
00:03:44.230 --> 00:03:48.733
So if I control the green color directly,
I may be able to get hold of the yellow

56
00:03:48.733 --> 00:03:52.910
color because you can see that the green
is used as an argument in there.

57
00:03:52.910 --> 00:03:56.884
So if I mark enough things,
maybe I can get a hold of the B and

58
00:03:56.884 --> 00:03:59.741
the yellow stuff, does that make sense?

59
00:03:59.741 --> 00:04:01.432
And then if I try hard enough,

60
00:04:01.432 --> 00:04:04.621
maybe I can get a hold of
the third level of indirection.

61
00:04:05.741 --> 00:04:10.051
But that's about it, at that point, your
tests are gonna look so ridiculous, and

62
00:04:10.051 --> 00:04:13.007
you're gonna have so
many mocks returning mocks, etc,

63
00:04:13.007 --> 00:04:17.273
that the whole thing becomes completely
unmaintainable and ununderstandable.

64
00:04:20.352 --> 00:04:25.142
So the way to look at whether or not code
is testable is to ask yourself a question

65
00:04:25.142 --> 00:04:29.440
of, what do I get to control,
what is under my control as a developer?

66
00:04:29.440 --> 00:04:33.239
And if I can control things,
then I can test them.

67
00:04:33.239 --> 00:04:36.013
And if I cannot control things,
then I cannot test them.

68
00:04:39.951 --> 00:04:43.296
So the point of refactoring
when you're doing test,

69
00:04:43.296 --> 00:04:47.677
is to rearrange the code in such a way,
so that you can you can get hold of

70
00:04:47.677 --> 00:04:50.971
as many things inside of
these classes as possible.

71
00:04:50.971 --> 00:04:56.017
That's why when I was talking about
it earlier, I said, hey typically

72
00:04:56.017 --> 00:05:01.231
we write code is when we mix business
logic together with the construction

73
00:05:01.231 --> 00:05:06.049
lodging of how we instantiate all
the functions and classes, etc.

74
00:05:06.049 --> 00:05:08.365
And those two things need to be separate.

75
00:05:08.365 --> 00:05:11.237
I need to be able to build the system.

76
00:05:11.237 --> 00:05:15.590
You can think of it as your system is like
Lego blocks that you wanna put together in

77
00:05:15.590 --> 00:05:19.926
a particular way to have a specific
kind of application working, right?

78
00:05:19.926 --> 00:05:22.229
And LEGO pieces are usually,
some are general,

79
00:05:22.229 --> 00:05:24.823
but some are very specific
to do very specific things.

80
00:05:26.013 --> 00:05:28.678
You wanna make sure that
you can get hold of and

81
00:05:28.678 --> 00:05:31.347
play with each LEGO piece independently,
so

82
00:05:31.347 --> 00:05:35.718
that you can verify that every single
one of them is doing the right stuff.

83
00:05:40.206 --> 00:05:45.560
So if you refactor the same exact code,
if you believe that it's the same thing,

84
00:05:45.560 --> 00:05:49.890
notice all I did is I moved things
around so that the constructor,

85
00:05:49.890 --> 00:05:53.900
instead of looking for things,
is just handed things.

86
00:05:53.900 --> 00:05:55.024
So let me go back up a second.

87
00:05:55.024 --> 00:05:58.490
If you looked over here, you'll notice
what's inside of the constructor here.

88
00:05:58.490 --> 00:06:04.311
You were given stuff and instead of
using it, the constructor did work,

89
00:06:04.311 --> 00:06:09.177
it looked for other things and
made more stuff, right?

90
00:06:09.177 --> 00:06:12.394
Whereas if you refactor it,
the constructor is all nice and green,

91
00:06:12.394 --> 00:06:16.797
it doesn't really do anything, it just
stores the stuff that you were given.

92
00:06:16.797 --> 00:06:21.300
Again, let's go back to where we
were writing the GitHub API test,

93
00:06:21.300 --> 00:06:24.583
we were doing the same exact thing, right?

94
00:06:24.583 --> 00:06:28.687
We wanted to make sure that
the GitHub API, we could sandwich it.

95
00:06:28.687 --> 00:06:32.099
And so we wanted to make sure that
I can pass in the fetch function,

96
00:06:32.099 --> 00:06:34.593
I could pass in the delay function.

97
00:06:34.593 --> 00:06:39.063
I wanted to make sure that I can control
both sides of the of the GitHub API.

98
00:06:39.063 --> 00:06:42.182
And the way we did that
is by passing things in.

99
00:06:42.182 --> 00:06:46.993
Now, you can look at it in terms
of the object-oriented world,

100
00:06:46.993 --> 00:06:52.875
which is the constructor passing, but
if you think about what JavaScript is,

101
00:06:52.875 --> 00:06:57.351
JavaScript has functions,
and functions have closures.

102
00:06:57.351 --> 00:07:00.534
And closures are essentially
the same thing as a constructor,

103
00:07:00.534 --> 00:07:02.045
they just close over things.

104
00:07:02.045 --> 00:07:06.611
And so you wanna make sure that you can
call that function that closes over stuff

105
00:07:06.611 --> 00:07:08.768
and you control what it closes over.

106
00:07:08.768 --> 00:07:11.920
And as long as you can
control what it closes over,

107
00:07:11.920 --> 00:07:16.215
it is equivalent to having the control
over a constructor, right?

108
00:07:16.215 --> 00:07:20.211
So like our GitHub API was written
as a class, it didn't have to be,

109
00:07:20.211 --> 00:07:25.141
it could have been written as a functional
thing where you close over other things.

110
00:07:25.141 --> 00:07:29.213
We would just have to make sure that
we can close over a fake phage and

111
00:07:29.213 --> 00:07:33.138
a fake delay so that we can control
the time and we can control what

112
00:07:33.138 --> 00:07:37.960
goes over the wire to the actual GitHub,
and the same thing would still apply.

113
00:07:37.960 --> 00:07:42.715
&gt;&gt; Yeah, so speaking of Java,
sometimes you have to providers and

114
00:07:42.715 --> 00:07:45.631
dependency injection and all of that.

115
00:07:45.631 --> 00:07:48.407
So do you test for your providers?

116
00:07:48.407 --> 00:07:51.956
And,
&gt;&gt; Very good question.

117
00:07:51.956 --> 00:07:57.738
We're gonna actually cover more of it
a little later, but the short answer is,

118
00:07:57.738 --> 00:08:03.539
your end-to-end test verifies that
everything is wired correctly, right?

119
00:08:03.539 --> 00:08:05.769
Because what you're doing with
the providers are using wiring things

120
00:08:05.769 --> 00:08:07.027
up in a correct way.

121
00:08:07.027 --> 00:08:10.371
If you can do a basic operation
on an end-to-end test,

122
00:08:10.371 --> 00:08:14.938
then you know that all the pieces must
have been wired incorrectly, right?

123
00:08:14.938 --> 00:08:18.187
So the end-to-end tests tend
to answer the question is,

124
00:08:18.187 --> 00:08:20.187
are the pieces wired up correctly.

125
00:08:20.187 --> 00:08:22.953
Whereas a unit test, answer the question,

126
00:08:22.953 --> 00:08:26.111
are the individual pieces
doing the right stuff?

127
00:08:26.111 --> 00:08:27.729
And you can have everything in between.

128
00:08:27.729 --> 00:08:29.706
Yes, Mark.

129
00:08:29.706 --> 00:08:33.979
&gt;&gt; You're saying that the more
decoupled our code is the better it is?

130
00:08:33.979 --> 00:08:38.245
&gt;&gt; That seems like somebody's,
&gt;&gt; [LAUGH]

131
00:08:38.245 --> 00:08:39.413
&gt;&gt; What's the word I'm looking for here?

132
00:08:39.413 --> 00:08:42.296
[LAUGH] Intentionally said that
to kinda make a point, yes,

133
00:08:42.296 --> 00:08:44.439
that's literally what I'm saying, yes.

134
00:08:44.439 --> 00:08:48.230
&gt;&gt; [LAUGH]
&gt;&gt; Sounds like you're optimizing for

135
00:08:48.230 --> 00:08:49.565
dependency injection.

136
00:08:49.565 --> 00:08:52.360
What's your take on dependency injection,

137
00:08:52.360 --> 00:08:55.895
especially when applied to JavaScript and
TypeScript?

138
00:08:57.305 --> 00:09:02.448
&gt;&gt; Right, so dependency injection
is just a fancy way of saying that,

139
00:09:02.448 --> 00:09:06.429
I wanna be able to control
my dependencies, right?

140
00:09:06.429 --> 00:09:09.973
What we did with GitHub API
was that dependency injection?

141
00:09:09.973 --> 00:09:15.965
I guess, right,
we were controlling how we pass things in.

142
00:09:15.965 --> 00:09:19.448
And so again, I'm just gonna come
back to the original statement is,

143
00:09:19.448 --> 00:09:21.930
I don't care how you
control your dependencies,

144
00:09:21.930 --> 00:09:25.357
as long as you can control
your dependencies, right?

145
00:09:25.357 --> 00:09:30.034
If you have a system where you
cannot get a hold of the fetch and

146
00:09:30.034 --> 00:09:32.693
you cannot get a hold of the delay,

147
00:09:32.693 --> 00:09:39.127
you're gonna have a really hard time
being able to write these tests.

148
00:09:39.127 --> 00:09:42.571
Whereas if you can't get a hold
of these things, you can do it.

149
00:09:42.571 --> 00:09:49.481
Now, Javascript, because it's duck typed,
which is dynamically typed, right?

150
00:09:49.481 --> 00:09:54.822
What you can do is you can always get a
hold of, for example, fetch because fetch

151
00:09:54.822 --> 00:10:00.081
is just a property on global space and
you can replace it with something else.

152
00:10:00.081 --> 00:10:04.773
So you always have kind of a heavy
handed way of getting hold of

153
00:10:04.773 --> 00:10:08.458
your dependency by
patching the global state.

154
00:10:09.618 --> 00:10:13.930
But global state is problematic,
so, in my opinion,

155
00:10:13.930 --> 00:10:18.523
it's always nicer to be able to
do it in an explicit fashion

156
00:10:18.523 --> 00:10:22.586
rather than to do it in kind
of the global patchway.

157
00:10:22.586 --> 00:10:26.017
Primarily, because if you
globally patching a fetch,

158
00:10:26.017 --> 00:10:30.689
then you can only run one test at a time,
you cannot do parallelism, right,

159
00:10:30.689 --> 00:10:34.851
because if that test is running,
then no other test can be running.

160
00:10:34.851 --> 00:10:38.904
Now, you can argue that in Javascript it
doesn't really matter because Javascript

161
00:10:38.904 --> 00:10:40.081
is single-threaded.

162
00:10:40.081 --> 00:10:41.728
With promises and the weights,

163
00:10:41.728 --> 00:10:44.725
you can kind of get multiple
tests running concurrently.

164
00:10:44.725 --> 00:10:49.611
Not quite the same thing,
so you have that argument.

165
00:10:49.611 --> 00:10:54.231
But at the end of the day, it's always
much easier to reason about the test.

166
00:10:54.231 --> 00:10:57.878
When I'm explicitly passing a fake fetch,
I look at the test and

167
00:10:57.878 --> 00:11:00.981
I'm, they're passing a fake fetch.

168
00:11:00.981 --> 00:11:05.920
Whereas if you don't do that, then it's
like some setup code somewhere ran and

169
00:11:05.920 --> 00:11:09.322
it replaced the global fetch
with this other fake one.

170
00:11:09.322 --> 00:11:13.918
And now if I call this magical function,
I can control what the fetch returns, but

171
00:11:13.918 --> 00:11:18.068
it's not easy for me to see how
all the pieces come together.

172
00:11:18.068 --> 00:11:22.828
So it's possible to do it without it,
and it's possible to do it

173
00:11:22.828 --> 00:11:27.872
without dependency injection is
just explicit DI makes it easier.

174
00:11:27.872 --> 00:11:32.867
And again, a lot of people will think of
dependency injection as object oriented

175
00:11:32.867 --> 00:11:37.789
with constructor, but I'm gonna argue
that just making a function that closes

176
00:11:37.789 --> 00:11:41.830
over your dependencies,
that is also the same exact thing as just

177
00:11:41.830 --> 00:11:45.079
an object-oriented class
that has a constructor.

178
00:11:45.079 --> 00:11:49.997
It's just that the syntax is much
cleaner and simpler with functions and

179
00:11:49.997 --> 00:11:52.211
closing over variables.

180
00:11:52.211 --> 00:11:56.046
Hopefully, I've convinced you that what
the code does is irrelevant to whether or

181
00:11:56.046 --> 00:11:57.435
not it's testable, right?

182
00:11:57.435 --> 00:12:02.243
It's all about how the code
is structured that makes it

183
00:12:02.243 --> 00:12:04.967
possible to write unit tests.

184
00:12:04.967 --> 00:12:09.776
And this is why, I go back to this thing
that there's nothing I can teach you about

185
00:12:09.776 --> 00:12:14.116
writing tests, I can only teach you
stuff about writing testable code.

186
00:12:15.456 --> 00:12:18.302
So it's all about how
you structure your code,

187
00:12:18.302 --> 00:12:21.658
not some magic of using
some specific tool etc.

188
00:12:21.658 --> 00:12:24.493
Tools are useful, and
they do a lot of interesting things, but

189
00:12:24.493 --> 00:12:26.970
it's all about structuring
the code in the right way.

