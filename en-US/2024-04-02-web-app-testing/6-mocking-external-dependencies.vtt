WEBVTT

1
00:00:00.240 --> 00:00:05.024
So remember, I kind of alluded to the fact
that it's all about managing your

2
00:00:05.024 --> 00:00:06.610
dependencies, right?

3
00:00:06.610 --> 00:00:11.860
And what I meant by this is
that if you go to our API,

4
00:00:11.860 --> 00:00:19.362
this fetch call right here is really
reaching out to an external world.

5
00:00:19.362 --> 00:00:21.798
And therefore,
we are dependent on the external world and

6
00:00:21.798 --> 00:00:23.451
there's a couple of problems with it.

7
00:00:23.451 --> 00:00:25.381
First of all, it is going to be slow.

8
00:00:27.181 --> 00:00:30.131
Second of all, it could be expensive.

9
00:00:30.131 --> 00:00:34.597
So for example,
imagine you are trying to write

10
00:00:34.597 --> 00:00:39.073
software to process
credit card information.

11
00:00:39.073 --> 00:00:43.945
You don't actually wanna make real
charges as part of your test, right?

12
00:00:43.945 --> 00:00:46.739
Even if you are charging 0.01 cent,

13
00:00:46.739 --> 00:00:50.279
if you run the test thousands
of times it can add up.

14
00:00:51.439 --> 00:00:53.749
So you need to mark your
external dependencies.

15
00:00:53.749 --> 00:00:58.483
And so what testing is really about is,
how do I reach

16
00:00:58.483 --> 00:01:03.648
through to the other side of
the unit that I'm testing and

17
00:01:03.648 --> 00:01:07.969
be able to insert friendlies
on the other side.

18
00:01:07.969 --> 00:01:09.069
I don't know what you wanna call it.

19
00:01:09.069 --> 00:01:15.317
Basically insert something on the other
side of this test that is my collaborator,

20
00:01:15.317 --> 00:01:20.481
that can basically sandwich
the code that I'm interested in.

21
00:01:20.481 --> 00:01:25.358
On one side, it is my test applying

22
00:01:25.358 --> 00:01:30.919
stimulus on one side of the of the unit.

23
00:01:30.919 --> 00:01:36.254
And on the other side of the unit is
my friendly collaborator that is gonna

24
00:01:36.254 --> 00:01:41.413
pretend to do stuff so that I can
sandwich the unit test in the middle and

25
00:01:41.413 --> 00:01:45.712
assert what I want about how
the stuff works in the middle.

26
00:01:45.712 --> 00:01:46.522
Does that make sense?

27
00:01:47.732 --> 00:01:51.293
&gt;&gt; Why do you pass expect
that in the argument of them?

28
00:01:51.293 --> 00:01:52.992
&gt;&gt; Why is the expect passed in here?

29
00:01:52.992 --> 00:01:54.893
You can import it over here as well.

30
00:01:54.893 --> 00:02:01.557
But it turns out when you have
an asynchronous test such as here And

31
00:02:01.557 --> 00:02:08.584
you want to run tests concurrently,
then it would not be possible for

32
00:02:08.584 --> 00:02:14.142
the Vite to know the expect
with which test it goes.

33
00:02:14.142 --> 00:02:18.310
If you run the test one after the other,
it's not a problem.

34
00:02:18.310 --> 00:02:21.213
But at some point,
you probably wanna do concurrent testing.

35
00:02:21.213 --> 00:02:24.643
And once you do concurrent testing and
you call expect and

36
00:02:24.643 --> 00:02:27.726
let's say this expect is
doing to match snapshot.

37
00:02:27.726 --> 00:02:33.996
How in the world is supposed to know which
test are you matching against, right?

38
00:02:33.996 --> 00:02:38.748
And so a better way of doing it is
to pass expect in through here and

39
00:02:38.748 --> 00:02:41.301
this expect is permanently tied.

40
00:02:41.301 --> 00:02:43.382
It's the same exact syntax,

41
00:02:43.382 --> 00:02:47.388
but it's permanently tied to
this particular test run.

42
00:02:48.778 --> 00:02:52.714
&gt;&gt; I see, it is snapshot here,
how is it generated?

43
00:02:52.714 --> 00:02:57.558
&gt;&gt; So the first time you run, the
snapshot, see there's a snapshot folder.

44
00:02:57.558 --> 00:02:59.128
So here, let's go back here.

45
00:02:59.128 --> 00:03:02.528
There's my test, and right next to
the test, there's a snapshots folder and

46
00:03:02.528 --> 00:03:06.125
inside of the folder, there's a file
name with the same exact thing.

47
00:03:06.125 --> 00:03:11.185
And the first time I ran it,
it generated the snapshot, right?

48
00:03:11.185 --> 00:03:15.289
So for example, if I go here and
I say false and

49
00:03:15.289 --> 00:03:19.925
I rerun my spec, now it's going to fail.

50
00:03:19.925 --> 00:03:24.867
And it basically says like,
hey, the snapshot is different.

51
00:03:24.867 --> 00:03:28.328
So one thing you could do is, at the
beginning, we don't have a snapshot, so

52
00:03:28.328 --> 00:03:30.777
I'm just gonna delete the snapshot.

53
00:03:30.777 --> 00:03:35.807
The first time I run the test, it goes and
it creates the snapshot, right?

54
00:03:37.207 --> 00:03:39.627
So that's how snapshotting works.

55
00:03:39.627 --> 00:03:42.661
Snapshotting can be useful, but as I said,

56
00:03:42.661 --> 00:03:47.663
it's a thing that people naturally
think of as the first thing to do, but

57
00:03:47.663 --> 00:03:52.425
it's extremely problematic for
all the reasons that we mentioned.

58
00:03:53.865 --> 00:04:00.645
So the thing to mock out or collaborate
is we need to get a control of the fetch.

59
00:04:02.155 --> 00:04:06.765
And as it stands right now, there is no
way for us to get a control of the fetch.

60
00:04:06.765 --> 00:04:12.125
I mean, we could monkey patch the global
fetch and do all kinds of crazy things.

61
00:04:12.125 --> 00:04:14.125
Not the best way to do it, right?

62
00:04:14.125 --> 00:04:16.945
So what we wanna do is we wanna
change this particular thing.

63
00:04:16.945 --> 00:04:19.555
And this is where the magic
of testing comes in, right?

64
00:04:19.555 --> 00:04:23.350
The magic of testing is how do I design
my code in such a way to make it

65
00:04:23.350 --> 00:04:25.277
testable, right?

66
00:04:25.277 --> 00:04:29.122
It's not about the tools,
it's not about knowing stuff about test,

67
00:04:29.122 --> 00:04:32.127
it's about designing your
code in a friendly way.

68
00:04:32.127 --> 00:04:36.169
So the way you would do that
is you would start with like,

69
00:04:36.169 --> 00:04:41.003
let's say we wanted to mark fetch,
is a new fetch, and you say VI.

70
00:04:41.003 --> 00:04:42.991
Sorry, vi.function.

71
00:04:44.945 --> 00:04:48.514
We have to import it and
then we take this mock and

72
00:04:48.514 --> 00:04:55.109
we're gonna fill the details later and
we're gonna pass it to the GitHub API.

73
00:04:55.109 --> 00:05:01.414
So when I go to the GitHub API,
we now need to get a hold of the fetch.

74
00:05:01.414 --> 00:05:03.554
So the type of it would be fetch and

75
00:05:03.554 --> 00:05:07.954
we can just add private keyword
in front of it to save it.

76
00:05:07.954 --> 00:05:12.074
It doesn't know what fetches, so

77
00:05:12.074 --> 00:05:18.040
we're just gonna say that
fetch is export fetch,

78
00:05:18.040 --> 00:05:21.177
is a type of fetch, type.

79
00:05:21.177 --> 00:05:26.390
And so now we control the outside of
the fetch and we come in here where

80
00:05:26.390 --> 00:05:32.166
we're doing a normal fetch and we're
gonna go and fetch using the R fetch.

81
00:05:32.166 --> 00:05:36.057
The API is the same,
everything looks the same, but

82
00:05:36.057 --> 00:05:40.138
now inside of our test we get
to control this function.

83
00:05:40.138 --> 00:05:43.699
Now if you wanted to add
type information to it.

84
00:05:43.699 --> 00:05:52.033
So this function will have the parameters
of fetch, a return type of fetch.

85
00:05:54.747 --> 00:05:58.119
Fetch has to be imported in here.

86
00:05:58.119 --> 00:06:05.653
So now we have a mock that
represents a code that we send out.

87
00:06:05.653 --> 00:06:07.633
Now, if you look at the test,

88
00:06:07.633 --> 00:06:12.583
the test fails because the mock
doesn't know what to respond with.

89
00:06:12.583 --> 00:06:17.833
So if we look at our API, oops,
that's not what I want, right here.

90
00:06:17.833 --> 00:06:22.066
If you look at our API, we call the fetch
and the fetch is supposed to return

91
00:06:22.066 --> 00:06:27.097
a response and on this response we
wanna be able to call the JSON, right?

92
00:06:27.097 --> 00:06:30.687
And so how do I do that?

93
00:06:30.687 --> 00:06:34.640
So we need to train our mock so that it
knows how to respond because currently

94
00:06:34.640 --> 00:06:36.730
the mock doesn't know how to respond.

95
00:06:36.730 --> 00:06:40.441
And because the fetch is asynchronous and
returns a promise,

96
00:06:40.441 --> 00:06:44.770
a good way to train this is to be
able to do a mock promise in here.

97
00:06:44.770 --> 00:06:48.182
So if we had a function that
would masquerade as a promise

98
00:06:48.182 --> 00:06:53.060
that we can control, then we could easily
write these tests inside of our mock.

99
00:06:53.060 --> 00:06:55.875
So what we're gonna do is we're gonna
try to create this mocking function.

100
00:07:03.916 --> 00:07:06.234
Wow, function, okay.

101
00:07:06.234 --> 00:07:10.902
So what we'll try to do is
we're gonna create a promise,

102
00:07:10.902 --> 00:07:13.734
which is going to be a new promise.

103
00:07:15.244 --> 00:07:18.045
And promises get resolve and

104
00:07:18.045 --> 00:07:22.950
reject and we will save them.

105
00:07:22.950 --> 00:07:25.700
So we're gonna say we're gonna have,
sorry.

106
00:07:25.700 --> 00:07:30.891
Let resolve is a function that,
so that's gonna

107
00:07:30.891 --> 00:07:36.472
be a Promise of T, and
it's gonna take T, resolve.

108
00:07:42.167 --> 00:07:43.752
We're gonna have a reject.

109
00:07:43.752 --> 00:07:45.738
Now we're gonna assign it.

110
00:07:45.738 --> 00:07:49.782
Resolve is resolve, reject is reject.

111
00:07:49.782 --> 00:07:54.792
And now we're gonna return a promise.

112
00:07:57.376 --> 00:07:59.362
But we need to assign those in there.

113
00:07:59.362 --> 00:08:01.995
So we need to do that and
we need to do that.

114
00:08:01.995 --> 00:08:06.975
And now it's gonna be a Promise of T, but

115
00:08:06.975 --> 00:08:12.836
we also going to have
additional things on it and

116
00:08:12.836 --> 00:08:18.713
these additional things are,
we go like that.

117
00:08:18.713 --> 00:08:20.660
Sorry, we need to have an exclamation,

118
00:08:20.660 --> 00:08:23.573
trust me we're doing this
in the correct order.

119
00:08:23.573 --> 00:08:26.503
So now we have a mock, right?

120
00:08:26.503 --> 00:08:29.509
And so
our fetch mock will return a promise, but

121
00:08:29.509 --> 00:08:33.463
we don't know how to resolve
this particular promise.

122
00:08:33.463 --> 00:08:36.823
And this is the reason why our
test is timing out, right?

123
00:08:36.823 --> 00:08:42.604
Because the test is trying to do the next
step of fetching from the output,

124
00:08:42.604 --> 00:08:47.094
but we can't do it because we
haven't told it what to do.

125
00:08:49.174 --> 00:08:51.014
So let's train our mock a little bit.

126
00:08:52.184 --> 00:08:59.347
So once we have a fetch, what we
want it to do is we want to assert,

127
00:08:59.347 --> 00:09:04.523
so I wanna say expect that
the fetch mock to have

128
00:09:04.523 --> 00:09:09.995
been called with a particular
parameters here.

129
00:09:09.995 --> 00:09:13.335
So it is something like that.

130
00:09:13.335 --> 00:09:17.111
We're saying,
we expect these headers and this output.

131
00:09:17.111 --> 00:09:18.145
Sorry, we have the wrong order.

132
00:09:18.145 --> 00:09:19.295
We need to call it first.

133
00:09:21.035 --> 00:09:23.606
Sorry, we need to call it and

134
00:09:23.606 --> 00:09:28.436
then we assert that we got
called with this argument.

135
00:09:30.796 --> 00:09:35.605
And the test is still timing out.

136
00:09:35.605 --> 00:09:36.996
But this is not right.

137
00:09:36.996 --> 00:09:39.656
Wait, this is not doing the correct thing.

138
00:09:39.656 --> 00:09:43.476
The correct way of calling it is that
the URL is the first argument and

139
00:09:43.476 --> 00:09:46.623
then the headers is the second argument,
right?

140
00:09:46.623 --> 00:09:47.813
So we need to flip this around.

141
00:09:47.813 --> 00:09:53.353
We have to say that we're calling
it with this argument and

142
00:09:53.353 --> 00:09:58.363
then headers are like this.

143
00:09:58.363 --> 00:10:02.176
Once we assert that we got
called in the right way.

144
00:10:02.176 --> 00:10:08.366
What we can do now is we can
resolve the expectations.

145
00:10:08.366 --> 00:10:13.382
So we can take the fetch mock,
and we can say,

146
00:10:13.382 --> 00:10:20.526
the first thing that you returned,
this was a promise, right?

147
00:10:20.526 --> 00:10:26.556
And now we can resolve this
promise with the actual response.

148
00:10:26.556 --> 00:10:34.259
And our response is going to be
something that has a weight,

149
00:10:34.259 --> 00:10:38.436
so async JSON, which returns.

150
00:10:38.436 --> 00:10:42.891
And let's just return some string.

151
00:10:44.501 --> 00:10:47.098
Sure, response is good, response.

152
00:10:51.008 --> 00:10:51.791
What is it?

153
00:10:51.791 --> 00:10:57.561
Not liking, wrong number of parameters.

154
00:10:57.561 --> 00:11:01.330
This is a common problem
that obviously even myself,

155
00:11:01.330 --> 00:11:04.835
who've done this before, has stepped into.

156
00:11:04.835 --> 00:11:06.935
We are now awaiting, and

157
00:11:06.935 --> 00:11:13.035
the problem is that the await is in
front of us having a response, right?

158
00:11:14.495 --> 00:11:19.599
So we need to get rid of this await,
and this is response promise now,

159
00:11:19.599 --> 00:11:25.231
and then we respond and then we expect
that if we await the response promise,

160
00:11:25.231 --> 00:11:27.447
then it is equal to response.

161
00:11:29.937 --> 00:11:36.527
And now, it's passing,
but expected R in JSON.

162
00:11:37.875 --> 00:11:44.574
Because this is not a JSON
[LAUGH] There we go.

163
00:11:46.064 --> 00:11:52.040
So let's go over all of this stuff
because there was a lot here.

164
00:11:52.040 --> 00:11:54.174
Let me see if I can fit
the whole thing on the page.

165
00:11:55.514 --> 00:11:59.579
So we created a mocking function,
a helper.

166
00:11:59.579 --> 00:12:03.898
We were able to pass it
to the GitHub API so

167
00:12:03.898 --> 00:12:09.107
that we sandwich the GitHub API
on one side by us,

168
00:12:09.107 --> 00:12:14.593
the test runner, and
on the other side by the mock.

169
00:12:16.433 --> 00:12:22.645
We then go and say we wanna do
a request for this particular URL and

170
00:12:22.645 --> 00:12:27.142
we assert that the URL
correctly got built up.

171
00:12:27.142 --> 00:12:30.931
A couple of assertions we for
example are doing here is,

172
00:12:30.931 --> 00:12:35.284
we're coming up with a username and
a specific repository, and

173
00:12:35.284 --> 00:12:39.008
then we're verifying that
the correct URL got built.

174
00:12:39.008 --> 00:12:42.032
We're also verifying that
the correct headers got built up.

175
00:12:43.252 --> 00:12:48.951
And then we go and we create
a bogus response, a mock response.

176
00:12:48.951 --> 00:12:53.752
Notice, we don't have to pretend
to have the full JSON, right?

177
00:12:53.752 --> 00:12:56.505
We're just saying this is the response and

178
00:12:56.505 --> 00:13:00.791
then we are expecting that
the response actually comes over here.

179
00:13:02.041 --> 00:13:05.351
And so now this test is
completely isolated, right?

180
00:13:05.351 --> 00:13:10.017
We no longer have to worry whether
the fetch service actually works or not,

181
00:13:10.017 --> 00:13:10.691
and so on.

182
00:13:10.691 --> 00:13:13.691
Now, it might be useful to
make the test more readable.

183
00:13:13.691 --> 00:13:17.966
So instead of passing in like I'm heavily,

184
00:13:17.966 --> 00:13:23.635
how about we pass in username and
repository, right?

185
00:13:23.635 --> 00:13:26.176
And then we know that
we need to update that.

186
00:13:28.609 --> 00:13:30.035
And this one over here.

187
00:13:30.035 --> 00:13:35.645
And notice, it makes it easier for
person reading it to kind of recognize,

188
00:13:35.645 --> 00:13:39.853
I see this string ends up here and
that string ends up there.

189
00:13:41.024 --> 00:13:43.784
And I see that there's
a particular response.

190
00:13:43.784 --> 00:13:48.686
Now, the other thing we could do is
instead of just passing a token,

191
00:13:48.686 --> 00:13:53.502
we can actually say token here and
now our test is failing because we

192
00:13:53.502 --> 00:13:58.414
have an additional argument here,
see authorization.

193
00:13:58.414 --> 00:14:00.390
This thing gets added to the response.

194
00:14:00.390 --> 00:14:04.824
So now we made a more complete
test because we can verify that

195
00:14:04.824 --> 00:14:08.380
the correct token gets
passed into the system.

196
00:14:08.380 --> 00:14:11.044
We can verify that
the fetch is happening and

197
00:14:11.044 --> 00:14:14.290
we can fully control
the responses of all the pieces.

198
00:14:14.290 --> 00:14:14.924
Make sense?

