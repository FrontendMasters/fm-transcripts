WEBVTT

1
00:00:00.000 --> 00:00:02.616
So you said the testing
is documentation or

2
00:00:02.616 --> 00:00:06.548
you had me at testing is documentation and
tests do a lot of that.

3
00:00:06.548 --> 00:00:08.468
And what I was gonna add is that,

4
00:00:08.468 --> 00:00:13.318
one thing that is difficult to get out of
tests or any sort of source code, right?

5
00:00:13.318 --> 00:00:16.925
You can look at the source code and be, I
see what you're doing here, I understand.

6
00:00:16.925 --> 00:00:19.889
Especially if the source code
is written in a nice useful way,

7
00:00:19.889 --> 00:00:22.397
you can always deduce what
the source code is doing,

8
00:00:22.397 --> 00:00:24.962
so documenting that is not
necessarily that useful.

9
00:00:24.962 --> 00:00:29.147
But what is extremely useful, because it's
extremely difficult to get out of your

10
00:00:29.147 --> 00:00:31.437
source code is,
to answer the why question.

11
00:00:31.437 --> 00:00:34.350
Why are you doing what you're
doing in the source code, right?

12
00:00:34.350 --> 00:00:38.568
That is something that is
extremely difficult to deduce.

13
00:00:38.568 --> 00:00:43.398
And having a good explanation in
your source code on the top saying,

14
00:00:43.398 --> 00:00:46.716
why am I doing this,
is super, super useful.

15
00:00:46.716 --> 00:00:48.840
Let's do some coding.

16
00:00:48.840 --> 00:00:53.709
And so we kind of spent a good hour
kind of talking about a theory

17
00:00:53.709 --> 00:00:58.297
of why do the testing,
on how the testing works, etc, but

18
00:00:58.297 --> 00:01:02.625
at the end of the day,
it's all about coding, right?

19
00:01:02.625 --> 00:01:05.148
And again, as I said earlier,

20
00:01:05.148 --> 00:01:10.096
humans are really good at,
if I give you a bunch of examples,

21
00:01:10.096 --> 00:01:15.062
you will deduce the general
principles out of them, right?

22
00:01:15.062 --> 00:01:16.811
If I just give you general principles,

23
00:01:16.811 --> 00:01:20.634
you're gonna have a hard time figuring out
what does it mean in terms of code, right?

24
00:01:20.634 --> 00:01:24.321
So we kind of gave you a theory,
which is the general principles, but

25
00:01:24.321 --> 00:01:28.136
now we have to show you the actual
examples of how to do this so that you can

26
00:01:28.136 --> 00:01:32.289
tie it back to these general principles
that we kind of talked about earlier.

27
00:01:32.289 --> 00:01:32.999
So let's do that.

28
00:01:32.999 --> 00:01:37.450
Now, there are lots of
different kinds of testing, and

29
00:01:37.450 --> 00:01:40.302
we're gonna cover them in pieces.

30
00:01:40.302 --> 00:01:43.131
We're gonna start with unit testing, which

31
00:01:43.131 --> 00:01:47.902
will be just the lowest level to kinda
the most obvious way of doing the test.

32
00:01:47.902 --> 00:01:52.818
Then we're gonna do some integration
testing about how to put pieces together.

33
00:01:52.818 --> 00:01:59.950
Component testing, which is important
when it comes to testing your UI.

34
00:01:59.950 --> 00:02:03.858
And then finally end-to-end testing,

35
00:02:03.858 --> 00:02:09.224
which will actually do
the end-to-end process for it.

36
00:02:09.224 --> 00:02:13.586
Okay, now inside of unit test, we can talk
about many different things and I'm kinda

37
00:02:13.586 --> 00:02:17.891
gonna talk about all of them, all at
once as we kinda build these things up.

38
00:02:17.891 --> 00:02:22.596
But I want you to pay attention
to the tools we use to do that,

39
00:02:22.596 --> 00:02:26.851
test-driven development,
how we create marking.

40
00:02:26.851 --> 00:02:31.313
Especially pay attention to dependencies,
because to me,

41
00:02:31.313 --> 00:02:37.234
I think dependencies are the key thing
that makes tests possible, right?

42
00:02:37.234 --> 00:02:40.740
If you have a good dependencies between
your different parts of the system,

43
00:02:40.740 --> 00:02:43.808
dependencies in the sense of,
these dependencies can be mocked,

44
00:02:43.808 --> 00:02:46.663
then you're gonna have
an easy time writing tests.

45
00:02:46.663 --> 00:02:50.913
If on the other hand, all these
dependencies are gonna be hard coded in

46
00:02:50.913 --> 00:02:53.220
without the ability to replace them,

47
00:02:53.220 --> 00:02:56.626
then it's gonna be very
difficult to write a unit test.

48
00:02:56.626 --> 00:02:58.333
We're gonna talk about
a little bit about coverage.

49
00:02:59.617 --> 00:03:01.857
And finally, maybe some benchmark testing.

50
00:03:01.857 --> 00:03:04.647
So that's the idea of all
the different pieces.

51
00:03:04.647 --> 00:03:07.417
So let's dive in and
see where we're gonna get to.

52
00:03:08.495 --> 00:03:11.447
Before I go to the source code,
I wanna show you,

53
00:03:11.447 --> 00:03:14.217
kinda give you the goal of today.

54
00:03:14.217 --> 00:03:19.044
So I have two applications here,
I have this URL

55
00:03:19.044 --> 00:03:23.872
that goes into Github and
fetches data from it,

56
00:03:23.872 --> 00:03:28.974
which fetches the name and
the description.

57
00:03:28.974 --> 00:03:33.564
The UI is not pretty, but we're gonna
go and try to write tests for that.

58
00:03:33.564 --> 00:03:38.578
And for kinda a higher level tests,
I managed to find some data

59
00:03:38.578 --> 00:03:43.215
of every accident locations
in Chicago over many years.

60
00:03:43.215 --> 00:03:45.926
So these are 5,000 traffic
accidents in Chicago.

61
00:03:45.926 --> 00:03:51.269
And what I find interesting is that
actually paints you the map of Chicago.

62
00:03:51.269 --> 00:03:55.557
And what I did is,
I ran clustering algorithm on it, and

63
00:03:55.557 --> 00:04:00.394
I'm painting each particular
cluster with different color,

64
00:04:00.394 --> 00:04:03.848
just kind of for fun to kind of explore.

65
00:04:03.848 --> 00:04:08.031
And so this is gonna be our goal, we're
gonna get to where we're gonna build up,

66
00:04:08.031 --> 00:04:11.786
we're gonna write unit tests,
we're gonna write higher level tests,

67
00:04:11.786 --> 00:04:15.498
we're gonna write component tests,
end-to-end tests, and so on.

68
00:04:15.498 --> 00:04:19.349
These are basically the two scenarios that
we're gonna be talking about today so

69
00:04:19.349 --> 00:04:22.249
to kinda give you an overview
of where we're going, right?

70
00:04:25.390 --> 00:04:30.550
Okay, so also, I have a repo,

71
00:04:30.550 --> 00:04:35.119
if you wanna follow along.

72
00:04:35.119 --> 00:04:38.266
It is mhevry/testing-fundamentals.

73
00:04:42.127 --> 00:04:44.549
In the repo, there are two branches.

74
00:04:44.549 --> 00:04:48.298
So there is the main branch which
everything is fully solved with all

75
00:04:48.298 --> 00:04:49.624
the tests inside of it.

76
00:04:49.624 --> 00:04:52.407
And there's a separate
branch called no-test.

77
00:04:52.407 --> 00:04:56.759
And so that's the branch where we're gonna
start to, and we're essentially going to

78
00:04:56.759 --> 00:05:00.405
try to recreate everything from
the no-test branch to the main branch.

79
00:05:00.405 --> 00:05:01.271
Does it make sense?

80
00:05:05.969 --> 00:05:12.083
Okay, so
let's start with this particular page.

81
00:05:12.083 --> 00:05:17.143
So there are two things in a URL,
which is my username

82
00:05:17.143 --> 00:05:22.200
on GitHub and
a project on GitHub called qwik.

83
00:05:22.200 --> 00:05:25.531
And what I wanna do, is I wanna be
able to fetch the repo name and

84
00:05:25.531 --> 00:05:30.340
the description out of the database,
something pretty straightforward.

85
00:05:30.340 --> 00:05:33.970
So let's go back to the index.tsx, okay?

86
00:05:33.970 --> 00:05:39.209
I don't wanna go down the particular
route of how this particular thing works,

87
00:05:39.209 --> 00:05:42.662
but there is a function in
here called routeloader.

88
00:05:42.662 --> 00:05:46.869
And this function's job is to
get your username and repo and

89
00:05:46.869 --> 00:05:50.076
then download it from GitHub, right?

90
00:05:50.076 --> 00:05:53.195
So what it does is it creates a header,

91
00:05:53.195 --> 00:05:57.666
which is specific header,
which we have over here.

92
00:05:57.666 --> 00:05:58.786
We can have the access key.

93
00:05:58.786 --> 00:06:02.276
If you have it, and
maybe add it into the header.

94
00:06:02.276 --> 00:06:08.213
And then we just do a fetch to a
particular URL, and we parse the JSON and

95
00:06:08.213 --> 00:06:14.146
cast it to a particular type over here,
and return this, right?

96
00:06:14.146 --> 00:06:16.812
Now, imagine you wanna test this.

97
00:06:16.812 --> 00:06:23.745
And so this is an example of where
refactoring for testability comes in.

98
00:06:23.745 --> 00:06:28.508
The only kinda test that you can really
write for this is an end-to-end test,

99
00:06:28.508 --> 00:06:32.189
because while this function is
called by the framework, and

100
00:06:32.189 --> 00:06:35.531
I don't actually know how to
kind of call this in here.

101
00:06:35.531 --> 00:06:40.433
So a typical thing to do
would be to refactor this

102
00:06:40.433 --> 00:06:43.875
to a new more testable function.

103
00:06:43.875 --> 00:06:45.505
So let me show you how to do that.

104
00:06:45.505 --> 00:06:50.579
So what we're gonna do is,
we're gonna take the code from here,

105
00:06:50.579 --> 00:06:54.104
essentially, let me actually move this up.

106
00:07:01.118 --> 00:07:05.897
And we're gonna say return,
we're gonna say const api.

107
00:07:05.897 --> 00:07:12.261
I'm making stuff up now, so new=GithubApi.

108
00:07:12.261 --> 00:07:15.767
I'm gonna pass in token,
and then I will say, hey,

109
00:07:15.767 --> 00:07:20.085
return await api getRepository for
username and repo, right?

110
00:07:20.085 --> 00:07:24.459
This is kind of a useful API that
you can think of that would be here.

111
00:07:24.459 --> 00:07:26.455
And now I need to go and create this.

112
00:07:26.455 --> 00:07:30.154
So I'm gonna create an api.ts.

113
00:07:30.154 --> 00:07:35.536
I'm gonna call it GitHubApi.

114
00:07:42.040 --> 00:07:44.682
So let's just put it next to each other,
so we can see both.

115
00:07:49.544 --> 00:07:51.954
Wow, it did a lot of stuff for me here.

116
00:07:51.954 --> 00:07:53.872
Is that correct?

117
00:07:53.872 --> 00:07:57.483
I don't know,
let me just put whatever I have in my,

118
00:08:04.500 --> 00:08:06.359
I wanna move this type across.

119
00:08:17.068 --> 00:08:19.073
Sorry, that's not the right location.

120
00:08:21.802 --> 00:08:25.657
And then I need to get the type here

121
00:08:29.894 --> 00:08:33.032
It becomes this oops,

122
00:08:36.510 --> 00:08:41.609
And then that would be the token, right?

123
00:08:45.921 --> 00:08:53.834
Okay, so all I've done now is I
pulled this code out into a new file.

124
00:08:53.834 --> 00:08:59.618
And the reason why this is important
is because string are undefined,

125
00:08:59.618 --> 00:09:03.059
so this needs to be string are undefined.

126
00:09:03.059 --> 00:09:06.735
[COUGH] Is I pulled it out
into a separate piece of code.

127
00:09:06.735 --> 00:09:07.888
And by pulling it out,

128
00:09:07.888 --> 00:09:12.037
now gives me freedom to be able to much
easier test this particular code, right?

129
00:09:12.037 --> 00:09:15.304
This refactoring was
a relatively simple refactoring,

130
00:09:15.304 --> 00:09:17.890
I just moved the function
to a separate file so

131
00:09:17.890 --> 00:09:22.243
that now I don't have to figure out how
to call it in this complicated way with

132
00:09:22.243 --> 00:09:26.491
those routeloader, instead I can
call it directly inside of here.

133
00:09:26.491 --> 00:09:30.819
And you can argue, and I think I would
argue that this is actually cleaner in

134
00:09:30.819 --> 00:09:35.011
terms of the complexity because I'm
now putting all the logic related to

135
00:09:35.011 --> 00:09:38.531
fetching the code into one
location that I can now unit test.

136
00:09:38.531 --> 00:09:41.541
Does that make sense?

137
00:09:41.541 --> 00:09:47.168
And so if we did this correctly,
nr dev, oops,

138
00:09:47.168 --> 00:09:53.641
if I run the code,
it still shows me the descriptions,

139
00:09:53.641 --> 00:09:59.164
it's still successfully fetching the data.

