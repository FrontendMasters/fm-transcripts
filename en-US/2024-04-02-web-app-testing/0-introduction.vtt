WEBVTT

1
00:00:00.110 --> 00:00:02.140
Hi, I'm Misko Hevery, CTO at Builder.io.

2
00:00:02.140 --> 00:00:03.920
I guess I'm known for
this thing called AngularJS.

3
00:00:03.920 --> 00:00:06.160
And now I do this new
framework called Quick.

4
00:00:06.160 --> 00:00:10.610
I guess the first question you should be
asking yourself is, why should we test?

5
00:00:10.610 --> 00:00:14.790
And I'm kind of curious,
from the audience, what you will say?

6
00:00:16.340 --> 00:00:19.510
&gt;&gt; Testing confirms that your
code works as you expect it to.

7
00:00:19.510 --> 00:00:20.731
&gt;&gt; Okay.

8
00:00:20.731 --> 00:00:23.351
&gt;&gt; And it also enables refactoring.

9
00:00:23.351 --> 00:00:24.089
&gt;&gt; Okay.

10
00:00:26.638 --> 00:00:31.021
You know why I test, because I'm lazy,
&gt;&gt; [LAUGH]

11
00:00:31.021 --> 00:00:32.731
&gt;&gt; And it's not a joke.

12
00:00:32.731 --> 00:00:35.991
I'm kidda serious about
this particular thing.

13
00:00:35.991 --> 00:00:41.510
I want you to kind of think of testing
as the path of least resistance, right?

14
00:00:41.510 --> 00:00:45.270
Testing isn't something that,
it's extra thing.

15
00:00:45.270 --> 00:00:48.510
It's not a good hygiene of, you should
brush your teeth cuz it's good for you,

16
00:00:48.510 --> 00:00:50.510
but really nobody wants to do it.

17
00:00:50.510 --> 00:00:53.780
You should think of testing as actually,
it makes my life easier.

18
00:00:55.170 --> 00:00:58.022
And to get to that point of
where it makes your life easier,

19
00:00:58.022 --> 00:01:00.663
we'll talk about it, how do we get there.

20
00:01:00.663 --> 00:01:05.490
But on the end of the day,
you wanna get in a situation where doing

21
00:01:05.490 --> 00:01:09.703
the easiest thing is actually
the right thing, right?

22
00:01:09.703 --> 00:01:13.981
So you wanna set up your environment,
you wanna set up whatever you need

23
00:01:13.981 --> 00:01:17.902
to do in order to have the situation
where the easiest thing to do,

24
00:01:17.902 --> 00:01:22.870
the most lazy things to do I can get
away with is actually the thing.

25
00:01:22.870 --> 00:01:25.220
&gt;&gt; We have some responses from
online if you want me to read.

26
00:01:25.220 --> 00:01:27.810
&gt;&gt; Yeah, yeah, go for it.

27
00:01:27.810 --> 00:01:29.790
&gt;&gt; Testing reveals problems.

28
00:01:29.790 --> 00:01:30.980
&gt;&gt; Yeah.

29
00:01:30.980 --> 00:01:36.910
&gt;&gt; Enables more stable,
maintainable code base and scalability.

30
00:01:36.910 --> 00:01:42.782
&gt;&gt; Yep, so
I think those are all correct statements.

31
00:01:42.782 --> 00:01:45.734
They do kind of fall into this
righteousness mode of like,

32
00:01:45.734 --> 00:01:50.824
you should do testing because of all these
benefits, and these benefits are true.

33
00:01:50.824 --> 00:01:54.424
But I wanna also point out that we at
the end of the day are humans, right?

34
00:01:54.424 --> 00:01:57.614
And we will always do
the easiest thing for us.

35
00:01:57.614 --> 00:02:00.801
When you're under time pressure and
you wanna cut corners and

36
00:02:00.801 --> 00:02:05.090
that happens all the time, you wanna make
sure that your laziness is your friend and

37
00:02:05.090 --> 00:02:08.378
it's actually the path
of least resistance.

38
00:02:08.378 --> 00:02:11.158
And so people kind of already
pointed this out, right?

39
00:02:11.158 --> 00:02:14.938
You have all these benefits
from improved code quality,

40
00:02:14.938 --> 00:02:19.518
increase productivity,
team collaboration, confidence, etc.

41
00:02:19.518 --> 00:02:22.543
These are all valid things.

42
00:02:22.543 --> 00:02:26.013
Let's kind of zoom into some of them,
improve code quality, right?

43
00:02:26.013 --> 00:02:30.499
You wanna detect your
bugs as soon as possible.

44
00:02:30.499 --> 00:02:34.457
One thing that I think is important
in terms of testing is that you get

45
00:02:34.457 --> 00:02:36.203
the confidence to refactor.

46
00:02:36.203 --> 00:02:38.406
And I think this is super,
super important, right?

47
00:02:38.406 --> 00:02:42.092
As the code grows,
you start with the best intentions, but

48
00:02:42.092 --> 00:02:44.905
it doesn't always work
out the way you want.

49
00:02:44.905 --> 00:02:47.663
You forgot some constraint or
something like that, and so

50
00:02:47.663 --> 00:02:51.335
you wanna be able to refactor the code and
move things around.

51
00:02:51.335 --> 00:02:54.684
And moving things around is scary,

52
00:02:54.684 --> 00:02:59.380
especially if it's a code
base that is not yours.

53
00:02:59.380 --> 00:03:02.189
If you come into a new project and
it's a code base that is not yours,

54
00:03:02.189 --> 00:03:06.144
you don't know where the swamps are,
you don't know where the scary bits are.

55
00:03:06.144 --> 00:03:09.761
And so to be able to ask somebody to
do refactorings is actually extremely

56
00:03:09.761 --> 00:03:14.684
difficult without the confidence knowing
that you have tests to cover your back.

57
00:03:14.684 --> 00:03:17.119
And so what typically happens is
that you come to a project and

58
00:03:17.119 --> 00:03:20.764
you're like, I see that there's a problem,
I should refactor it.

59
00:03:20.764 --> 00:03:24.498
But do I really wanna take that risk
of like, I do some refactoring,

60
00:03:24.498 --> 00:03:27.641
and as a result, it will make things,
I'll have to go and

61
00:03:27.641 --> 00:03:29.981
bug fix something forever, right?

62
00:03:29.981 --> 00:03:33.519
And so a lot of people don't take that
risk, which is actually the complete

63
00:03:33.519 --> 00:03:37.751
opposite of what you want, because now
your solution isn't the proper solution.

64
00:03:37.751 --> 00:03:42.212
Your solution is some hack that you
place in place to fix your problem.

65
00:03:42.212 --> 00:03:46.616
But actually made the overall
problem worse, right?

66
00:03:46.616 --> 00:03:50.896
So refactoring confidence is actually
a super, super important thing.

67
00:03:50.896 --> 00:03:53.717
The other thing is, to me,

68
00:03:53.717 --> 00:03:58.766
tests are a form of code documentation,
right?

69
00:03:58.766 --> 00:04:00.951
We all know we should write documentation,
but

70
00:04:00.951 --> 00:04:04.074
we also know that that doesn't
really happen in real life, right?

71
00:04:04.074 --> 00:04:08.304
It's one of those things that
we don't ever have time for.

72
00:04:08.304 --> 00:04:10.267
But tests are actually, in my opinion,

73
00:04:10.267 --> 00:04:14.954
better than documentation because they're
documentation that's executable, right?

74
00:04:14.954 --> 00:04:17.214
That is verifiable,
that you know that is true.

75
00:04:17.214 --> 00:04:22.057
And so the way I think about testing is,
as a human, right, I can only keep so

76
00:04:22.057 --> 00:04:24.427
many things in my head.

77
00:04:24.427 --> 00:04:28.912
People say it's about seven things, you
can argue what the actual number is, but

78
00:04:28.912 --> 00:04:31.325
it's just some small single digit number.

79
00:04:31.325 --> 00:04:35.889
And if you can can keep only a few things
in your head, then the question then

80
00:04:35.889 --> 00:04:39.656
becomes, how do I make sure that
I can use those seven things or

81
00:04:39.656 --> 00:04:44.319
whatever I have on something useful
that I wanna actually make progress in?

82
00:04:44.319 --> 00:04:47.887
And so you don't want to use up all of
these extra slots in your memory, so

83
00:04:47.887 --> 00:04:52.043
to speak, for remembering like, this
thing needs to be true about the system,

84
00:04:52.043 --> 00:04:54.053
that thing and the other thing, right?

85
00:04:54.053 --> 00:04:56.323
You just wanna focus
on writing your thing.

86
00:04:56.323 --> 00:05:00.149
And so what you do is you take all
of these things that should be true,

87
00:05:00.149 --> 00:05:03.576
these assertions,
these statements about the system, and

88
00:05:03.576 --> 00:05:06.177
you codify them in the form of a test,
right?

89
00:05:06.177 --> 00:05:10.198
So that when you go and refactor or
move things around or change things,

90
00:05:10.198 --> 00:05:13.280
the tests are there to kinda
remind you of saying like,

91
00:05:13.280 --> 00:05:17.637
hey, you said that this should be true and
this is no longer true.

92
00:05:17.637 --> 00:05:24.189
And if you think about it, that is really
good point of view from the documentation.

93
00:05:24.189 --> 00:05:30.686
Now, the other thing I wanna talk
about is team collaboration.

94
00:05:30.686 --> 00:05:33.923
If you come to a project and
there are no tests,

95
00:05:33.923 --> 00:05:37.969
how do you gain the knowledge
of the project, right?

96
00:05:37.969 --> 00:05:42.344
You will have a really hard time trying
to figuring out what things are, and you

97
00:05:42.344 --> 00:05:47.131
typically we'll learn by kind of breaking
things, which is not useful for anybody.

98
00:05:48.331 --> 00:05:53.471
And so to me, tests are a great
way of doing collaboration because

99
00:05:53.471 --> 00:05:58.631
they codify all of these expected
things inside of the test.

100
00:05:58.631 --> 00:05:59.891
And so it's a form of communication.

101
00:05:59.891 --> 00:06:02.641
You can point people to do it.

102
00:06:02.641 --> 00:06:05.745
Now, let me just pause here for
a second, let me back up a second and

103
00:06:05.745 --> 00:06:07.209
talk about humans.

104
00:06:07.209 --> 00:06:10.489
So one of my favorite books is
called Thinking Fast and Slow.

105
00:06:10.489 --> 00:06:11.999
If you haven't read it,
I highly recommend it.

106
00:06:13.239 --> 00:06:15.939
I call it the user manual for your brain.

107
00:06:15.939 --> 00:06:18.363
So if you have a brain,
you should read the user manual,

108
00:06:18.363 --> 00:06:19.763
that's the user manual for it.

109
00:06:19.763 --> 00:06:25.487
Anyways, in the book, the guy makes a very
good point that humans are not very

110
00:06:25.487 --> 00:06:32.248
good about being told generalization and
expecting them to know how to apply it.

111
00:06:32.248 --> 00:06:34.974
Instead, what humans
are really good at is,

112
00:06:34.974 --> 00:06:39.350
I'm gonna give you a bunch of examples and
then you will generalize it for

113
00:06:39.350 --> 00:06:43.335
yourself, and
then you will know how to apply it, right?

114
00:06:43.335 --> 00:06:46.345
And so what tests are, are actually that.

115
00:06:46.345 --> 00:06:49.998
Tests are a whole bunch of examples,
where I say, look,

116
00:06:49.998 --> 00:06:52.824
it should work this way,
it should do this.

117
00:06:52.824 --> 00:06:56.213
These are a whole bunch of concrete
examples that I'm giving you about

118
00:06:56.213 --> 00:06:57.555
the system.

119
00:06:57.555 --> 00:06:59.565
And then when you read these tests,

120
00:06:59.565 --> 00:07:04.855
then you can be like, I can now generalize
it into what the thing is actually doing.

121
00:07:04.855 --> 00:07:07.615
The opposite is something
humans are not good at, right?

122
00:07:07.615 --> 00:07:10.910
So if I just give you a generalization and
expect you to come up with examples,

123
00:07:10.910 --> 00:07:12.185
that doesn't work.

124
00:07:12.185 --> 00:07:15.567
But giving examples and expecting you to
come up with generalization is something

125
00:07:15.567 --> 00:07:16.555
that does work, Mark.

126
00:07:18.105 --> 00:07:21.055
&gt;&gt; Steven online said,
as a team lead in architect,

127
00:07:21.055 --> 00:07:25.256
I really feel like the team
collaboration gets overlooked a lot.

128
00:07:25.256 --> 00:07:30.436
Tests have had the biggest impact on
collaboration in my years of experience.

129
00:07:30.436 --> 00:07:32.136
&gt;&gt; Yeah, and I totally agree with that.

130
00:07:33.326 --> 00:07:35.667
The other useful thing about tests and

131
00:07:35.667 --> 00:07:39.876
teams is that a lot of times
people need to fix a bug, right?

132
00:07:39.876 --> 00:07:44.296
And so the way you can collaborate is,
there's stuck, they don't know what to do.

133
00:07:44.296 --> 00:07:46.713
And so what you can ask them
to do is say like, look,

134
00:07:46.713 --> 00:07:50.227
just write me a test that demonstrates
this particular problem, right?

135
00:07:50.227 --> 00:07:53.796
And then once you have a test, you can
actually use that as a way to share and

136
00:07:53.796 --> 00:07:55.536
collaborate with your teammates.

137
00:07:55.536 --> 00:07:58.713
You can basically take that PR and
send it to your team and then says, hey,

138
00:07:58.713 --> 00:08:01.466
I'm trying to fix this,
how would I go about it, right?

139
00:08:01.466 --> 00:08:04.978
It's not some vague thing
that is hard to explain.

140
00:08:04.978 --> 00:08:08.306
It's a concrete scenario that
you can get under a debugger and

141
00:08:08.306 --> 00:08:10.388
you can look on thread and so on.

142
00:08:10.388 --> 00:08:15.734
So yeah, team collaboration is super,
super important.

143
00:08:15.734 --> 00:08:18.128
We kind of already talked
about productivity, right?

144
00:08:18.128 --> 00:08:23.958
But mainly the thing I wanna show you and
we will talk about as an example is that,

145
00:08:23.958 --> 00:08:28.396
you wanna be in a situation where
tests are so easy to write and

146
00:08:28.396 --> 00:08:33.207
execute that it is by far the simplest
thing for you to do, right?

147
00:08:33.207 --> 00:08:35.715
This is the scenario you
wanna get yourself into.

148
00:08:35.715 --> 00:08:37.933
And if it's the simplest thing for
you to do, of course,

149
00:08:37.933 --> 00:08:41.405
you're gonna do it because it's
the path of least resistance.

150
00:08:41.405 --> 00:08:45.529
Now, as far as confidence goes, yeah,
that is the obvious things of reducing

151
00:08:45.529 --> 00:08:49.351
the risk, better user experience,
peace of mind, etc.

152
00:08:49.351 --> 00:08:54.279
But I really wanna point out
the importance of feeling like you have

153
00:08:54.279 --> 00:08:56.481
control over your code base.

154
00:08:56.481 --> 00:09:00.480
What I mean by that is just
the importance of knowing that you can

155
00:09:00.480 --> 00:09:05.318
go to your code base, move stuff around,
and come out victorious, right?

156
00:09:05.318 --> 00:09:09.254
Because the last thing you want is to
just go in, try to fix something, and

157
00:09:09.254 --> 00:09:13.153
instead of fixing it you get
punished by breaking everything.

158
00:09:13.153 --> 00:09:15.558
And you either cannot
push it to production or

159
00:09:15.558 --> 00:09:18.485
worse you push it to production
all hell breaks loose.

160
00:09:18.485 --> 00:09:19.885
And now you wanna roll it back, but

161
00:09:19.885 --> 00:09:22.313
you can't because other people
have put stuff on top of it.

162
00:09:22.313 --> 00:09:25.833
It's a situation you don't wanna get
into because it will just destroy your

163
00:09:25.833 --> 00:09:28.340
confidence to do something in the future.

164
00:09:28.340 --> 00:09:35.350
So in order to have a malleable piece of
code base, you really wanna have tests.

165
00:09:35.350 --> 00:09:39.553
And tests, as I said, are form of
documentations, but it's also a form of

166
00:09:39.553 --> 00:09:43.923
essentially just generic statements of
what should be true about the world.

167
00:09:43.923 --> 00:09:46.271
And more of these statements you have,

168
00:09:46.271 --> 00:09:49.499
the easier time you're
gonna have with the tests.

169
00:09:49.499 --> 00:09:51.889
And so I'm gonna hammer this down over and
over again.

170
00:09:51.889 --> 00:09:56.718
But the biggest thing is you need
to set up your environment so

171
00:09:56.718 --> 00:10:02.507
that writing and running tests is
easier than running the application.

172
00:10:02.507 --> 00:10:06.379
And there are many situations if you think
about it, if I wanna run an application,

173
00:10:06.379 --> 00:10:08.333
that's actually kinda tricky, right?

174
00:10:08.333 --> 00:10:09.744
Because you have to launch it,

175
00:10:09.744 --> 00:10:12.443
you probably have to have
some database somewhere.

176
00:10:12.443 --> 00:10:16.160
Now you are probably on the login screen,
you have to log yourself in,

177
00:10:16.160 --> 00:10:20.513
get to a specific page like a settings
page where you wanna find the bug.

178
00:10:20.513 --> 00:10:23.575
You push a bunch of buttons,
something breaks, you need to get it on

179
00:10:23.575 --> 00:10:26.932
the debugger, then you wanna change
some piece of code and you go back in.

180
00:10:26.932 --> 00:10:30.079
And what do you do the whole thing again,
you log in, go to the settings page.

181
00:10:30.079 --> 00:10:32.489
By the time you recover
where you used to be,

182
00:10:32.489 --> 00:10:36.569
you kinda lost in your memory what
you're trying to debug, right?

183
00:10:36.569 --> 00:10:38.991
So you wanna be able to be in
a situation where like, hey,

184
00:10:38.991 --> 00:10:40.313
let me just write a quick test.

185
00:10:40.313 --> 00:10:45.184
Like, I am going to pull up a settings
page and I'm gonna do the scenario and

186
00:10:45.184 --> 00:10:47.898
look it's failing in this particular way.

187
00:10:47.898 --> 00:10:49.286
And then I can debug it and

188
00:10:49.286 --> 00:10:53.587
I can go around focusing on a problem
rather than focusing on a problem of, how

189
00:10:53.587 --> 00:10:58.176
do I get the application in the correct
state to demonstrate the problem, right?

190
00:10:58.176 --> 00:11:01.856
Because every time you restart
the application, you have to, again,

191
00:11:01.856 --> 00:11:05.974
go through a bunch of steps to get it
into the problematic state, right?

192
00:11:05.974 --> 00:11:08.350
And so, again,
you wanna be in a situation where,

193
00:11:08.350 --> 00:11:11.794
writing the test is actually
the easier thing for you to do, right?

194
00:11:11.794 --> 00:11:15.999
You cannot force testing on
an organization by calling on these

195
00:11:15.999 --> 00:11:20.914
high-level things of, like,
you're gonna have a better time, or

196
00:11:20.914 --> 00:11:24.084
it's the right thing to do, or whatever.

197
00:11:24.084 --> 00:11:27.184
Those are all nice, but
nothing beats just being lazy.

198
00:11:27.184 --> 00:11:30.643
And I kind of talked about it, but
let's kind of talk about it some more,

199
00:11:30.643 --> 00:11:34.124
which is that, to me, tests really
reduce the cognitive load, right?

200
00:11:34.124 --> 00:11:37.954
Because they minimize the number of
things I have to keep in my mind.

201
00:11:37.954 --> 00:11:41.471
If something needs to be always true, and
I can demonstrate it in form of a test,

202
00:11:41.471 --> 00:11:44.634
that means I can no longer
have to think about it, right?

203
00:11:44.634 --> 00:11:48.879
And as I create more and more of these
tests, there are fewer and fewer things I

204
00:11:48.879 --> 00:11:52.404
need to keep in mind because if I
break one of those assumptions,

205
00:11:52.404 --> 00:11:54.724
the system will tell me, right?

206
00:11:54.724 --> 00:11:58.110
And that's really what it comes
down to because as humans,

207
00:11:58.110 --> 00:12:01.905
there's limited number of
things we can keep track of.

208
00:12:01.905 --> 00:12:05.872
And the other thing I kind of wanna
point out is that a lot of times in

209
00:12:05.872 --> 00:12:08.705
organization, things go bad.

210
00:12:08.705 --> 00:12:11.625
And people tend to have this thing of,
let's blame somebody or

211
00:12:11.625 --> 00:12:13.775
let's blame something, right?

212
00:12:13.775 --> 00:12:17.485
And people often come to be like,
you didn't do this or x or

213
00:12:17.485 --> 00:12:19.615
something like that.

214
00:12:19.615 --> 00:12:20.772
And I think that's not useful.

215
00:12:20.772 --> 00:12:24.614
Because at the end of the day, you can't
have a million things that you expect

216
00:12:24.614 --> 00:12:27.712
the developer to do,
that's just not scalable.

217
00:12:27.712 --> 00:12:28.383
At some point,

218
00:12:28.383 --> 00:12:32.206
you should just say like, there's only one
thing that the developer has to do, and

219
00:12:32.206 --> 00:12:35.062
that one thing is automated,
which is running the test, right?

220
00:12:35.062 --> 00:12:38.289
As long as the test say it's okay,
then you haven't forgotten anything.

221
00:12:38.289 --> 00:12:43.375
So you can't have a situation where you
put the responsibility of remembering

222
00:12:43.375 --> 00:12:48.228
to check the boxes or do bunch of things
on a developer because first of all,

223
00:12:48.228 --> 00:12:53.453
developers leave and come, so you
always have a new influx of developers.

224
00:12:53.453 --> 00:12:56.906
But also there's a limited number
of checklists that you can have as

225
00:12:56.906 --> 00:12:59.338
a developer before this
becomes not scalable.

226
00:12:59.338 --> 00:13:03.488
And so instead, you really wanna offload
this work somewhere else, right?

227
00:13:03.488 --> 00:13:06.648
And it comes down to the cognitive
load of the developer, right?

228
00:13:06.648 --> 00:13:11.208
You wanna make sure that the developer
doesn't have to think about it.

229
00:13:11.208 --> 00:13:16.047
Or to put it differently, the developer
has limited capacity to do stuff, and

230
00:13:16.047 --> 00:13:20.298
you wanna make sure that you use as
much of the capacity as possible for

231
00:13:20.298 --> 00:13:23.890
the problem at hand, which is for
the business logic or for

232
00:13:23.890 --> 00:13:27.077
whatever you're trying to achieve, right?

233
00:13:27.077 --> 00:13:30.654
And you're trying to offload
all of these secondary

234
00:13:30.654 --> 00:13:35.125
things because the more the developer
has to keep in their heads,

235
00:13:35.125 --> 00:13:38.884
the less there is left over
to actually do useful work.

