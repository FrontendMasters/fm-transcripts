WEBVTT

1
00:00:00.290 --> 00:00:04.260
So, I wanna ask you a question and
that is, why don't you test?

2
00:00:05.890 --> 00:00:06.810
Who does testing here?

3
00:00:08.070 --> 00:00:09.400
Everybody?

4
00:00:09.400 --> 00:00:12.275
Okay, one person is not
raising their hand.

5
00:00:12.275 --> 00:00:13.740
[LAUGH] Why don't you test?

6
00:00:15.890 --> 00:00:21.430
&gt;&gt; Sometimes just not testable you
have some async personality and Yeah.

7
00:00:21.430 --> 00:00:22.620
&gt;&gt; Well, we don't have time.

8
00:00:22.620 --> 00:00:26.131
We'll build it now and
we'll test it later, which I mean,

9
00:00:26.131 --> 00:00:28.044
I don't agree with that at all.

10
00:00:28.044 --> 00:00:30.421
[LAUGH] I hear that a lot.

11
00:00:30.421 --> 00:00:35.293
&gt;&gt; One thing that I run into
is working with a legacy code

12
00:00:35.293 --> 00:00:39.296
base that there's just a ton of problems.

13
00:00:39.296 --> 00:00:40.401
[LAUGH]
&gt;&gt; Yeah, yeah.

14
00:00:40.401 --> 00:00:44.042
&gt;&gt; So, as much as I'd like
to write tests around it,

15
00:00:44.042 --> 00:00:47.931
figuring out how to do that
can be a real challenge.

16
00:00:47.931 --> 00:00:49.481
&gt;&gt; Yeah, legacy is tricky.

17
00:00:49.481 --> 00:00:53.581
Yes, that's a topic of itself.

18
00:00:54.581 --> 00:00:59.191
So I have this kind of a chart I made,
like why don't people test?

19
00:00:59.191 --> 00:01:01.106
And these are random different excuses.

20
00:01:01.106 --> 00:01:04.665
And I have this green thing on the top
that's like semi-valid excuse, and

21
00:01:04.665 --> 00:01:06.656
we pointed out legacy code base, right?

22
00:01:06.656 --> 00:01:12.523
That's kind of semi-valid, but it's
valid in the sense that it is difficult.

23
00:01:12.523 --> 00:01:18.776
It's not valid in the sense that you don't
have to do it and you shouldn't do it.

24
00:01:18.776 --> 00:01:23.027
You might have a much harder
time writing legacy part, but

25
00:01:23.027 --> 00:01:26.684
it is something that still
you should strive for.

26
00:01:26.684 --> 00:01:28.836
Writing a UI test is also a little tricky,
but

27
00:01:28.836 --> 00:01:31.474
we're actually gonna
talk about that today.

28
00:01:31.474 --> 00:01:33.984
But I wanna go over some
of these other arguments.

29
00:01:33.984 --> 00:01:37.784
One is people say, well,
it dirties the design.

30
00:01:37.784 --> 00:01:39.674
And I'm gonna try to
convince you actually that,

31
00:01:39.674 --> 00:01:42.192
actually no it makes
the design better better.

32
00:01:42.192 --> 00:01:44.994
Right?
Because fundamentally what testing

33
00:01:44.994 --> 00:01:49.242
requires you to do is to assemble
the system in a different way.

34
00:01:49.242 --> 00:01:50.242
Right?

35
00:01:50.242 --> 00:01:54.196
Like if the code base you have can only be
assembled in one particular way which runs

36
00:01:54.196 --> 00:01:58.321
the application, and you come in from a
testing point of view, say, well actually,

37
00:01:58.321 --> 00:02:00.692
I want to assemble it
in the smaller chunks.

38
00:02:00.692 --> 00:02:04.822
That means that actually it's less
coupled because it gives you the freedom

39
00:02:04.822 --> 00:02:06.756
to assemble it, not the whole app,

40
00:02:06.756 --> 00:02:10.060
but a portion of it and
run the portions of it independently.

41
00:02:10.060 --> 00:02:14.450
So that actually makes the testing easier.

42
00:02:14.450 --> 00:02:18.964
Now the reason people say dirty is
designed is because if you have a legacy

43
00:02:18.964 --> 00:02:23.552
code base, it is so intertwined that
trying to get it to a testable state,

44
00:02:23.552 --> 00:02:29.407
you might temporarily have to kind of hack
things, too, in order to make them work.

45
00:02:29.407 --> 00:02:30.997
Mark, did you have a question?

46
00:02:30.997 --> 00:02:34.807
&gt;&gt; Yeah, a couple of people online said
when approaching a legacy codebase,

47
00:02:34.807 --> 00:02:37.837
it's difficult to figure out
where to even start testing.

48
00:02:39.687 --> 00:02:40.457
&gt;&gt; That is very true.

49
00:02:40.457 --> 00:02:43.956
Legacy codebases can be
almost impossible to test.

50
00:02:43.956 --> 00:02:47.346
And what it comes down to is
managing the dependencies.

51
00:02:47.346 --> 00:02:49.876
And we're going to talk
about that sometimes later.

52
00:02:51.936 --> 00:02:56.003
But that's like the knowing
how to test legacy codebase,

53
00:02:56.003 --> 00:02:58.585
that probably is a course on its own.

54
00:02:58.585 --> 00:03:03.482
&gt;&gt; Somebody else said, sometimes I have
a database dependent situation that

55
00:03:03.482 --> 00:03:06.851
also involves specific
date/time variables.

56
00:03:06.851 --> 00:03:08.697
I guess it's difficult.

57
00:03:08.697 --> 00:03:13.521
&gt;&gt; So marking time is important
part of the particular thing.

58
00:03:13.521 --> 00:03:18.159
People will sometimes argue that the
testing doesn't catch bugs, which is kind

59
00:03:18.159 --> 00:03:22.453
of a strange argument for me because
it's kind of the whole point of it, and

60
00:03:22.453 --> 00:03:26.272
especially once you have lived in
a code base that has good tests and

61
00:03:26.272 --> 00:03:30.226
you refactor the code base,
you realize just how invaluable it is and

62
00:03:30.226 --> 00:03:33.944
you realize like, how did we used
to write code before testing?

63
00:03:33.944 --> 00:03:36.305
Like, I remember when I used
to write code before test and

64
00:03:36.305 --> 00:03:38.174
I have no idea how I get anything working.

65
00:03:38.174 --> 00:03:40.954
People argue that it's slower
because you have to do more work.

66
00:03:42.401 --> 00:03:44.987
So it is true that with tests,
you will do more typing,

67
00:03:44.987 --> 00:03:47.351
because you have to write tests, right?

68
00:03:47.351 --> 00:03:51.711
But I actually think it is faster,
especially once if you start a new

69
00:03:51.711 --> 00:03:56.607
project, you write lots of code fast,
but that quickly kind of tapers off,

70
00:03:56.607 --> 00:04:00.281
and you get into kind of
a maintenance mode, right?

71
00:04:00.281 --> 00:04:03.614
And it's in the maintenance
mode where tests really start

72
00:04:03.614 --> 00:04:07.833
to shine because you think you're fixing
a bug so you change something and

73
00:04:07.833 --> 00:04:11.984
unless you have all the previous tests and
all the previous assertions,

74
00:04:11.984 --> 00:04:15.777
your fix might very well be
breaking three other things.

75
00:04:15.777 --> 00:04:20.896
And so the amount of time you save
not regressing is actually huge.

76
00:04:20.896 --> 00:04:23.395
Okay people say it's boring.

77
00:04:23.395 --> 00:04:27.225
I actually think it is fun once
you're doing it the right way.

78
00:04:27.225 --> 00:04:29.905
We'll talk about that more in the future.

79
00:04:29.905 --> 00:04:32.875
People often argue that if
you make a lot of tests,

80
00:04:32.875 --> 00:04:35.495
the codebase becomes hard to change.

81
00:04:35.495 --> 00:04:36.635
And I see what they're coming from.

82
00:04:36.635 --> 00:04:41.008
They're basically saying that the tests
assert the inner working so tightly

83
00:04:41.008 --> 00:04:45.458
that any kind of change to inner workings
would require you to change the test.

84
00:04:47.348 --> 00:04:50.733
There is a little bit of merit in it, but

85
00:04:50.733 --> 00:04:54.538
it all depends on the kind
of test you write.

86
00:04:54.538 --> 00:04:58.375
If you have tested essentially
what I would call a snapshot test,

87
00:04:58.375 --> 00:05:03.189
a test that takes a snapshot of the system
and basically any change to that snapshot

88
00:05:03.189 --> 00:05:07.197
is considered a failure,
those tests are not very useful, right?

89
00:05:07.197 --> 00:05:09.976
And also become very difficult to change.

90
00:05:09.976 --> 00:05:14.904
But if you do it correctly and you have
intentions in your test saying like, hey,

91
00:05:14.904 --> 00:05:19.556
when this is the input of the system,
then I expect this particular output.

92
00:05:19.556 --> 00:05:22.629
And I specifically don't care
what happens in the middle,

93
00:05:22.629 --> 00:05:25.334
it's a particular kind of test,
then in that case,

94
00:05:25.334 --> 00:05:29.144
it becomes easy to change the internals
because the test isn't asserting

95
00:05:29.144 --> 00:05:34.234
about how you're doing things, it is only
caring about the particular outcome.

96
00:05:34.234 --> 00:05:38.232
And so whether or
not your system becomes hard to change,

97
00:05:38.232 --> 00:05:42.299
it really comes down to how
strong you are about these.

98
00:05:42.299 --> 00:05:45.829
Making assertions about
how it does things, right?

99
00:05:45.829 --> 00:05:50.797
If you're gonna micromanage the software
into delivering the output that you want,

100
00:05:50.797 --> 00:05:55.489
then yes, you might get in a situation
where these tests are overly protective of

101
00:05:55.489 --> 00:05:56.599
the changes.

102
00:05:56.599 --> 00:05:59.660
But if you do it as in like, look,
I don't care how you get there,

103
00:05:59.660 --> 00:06:01.665
I just want to make sure
this is the output,

104
00:06:01.665 --> 00:06:04.311
then the test actually become
much easier to deal with.

105
00:06:06.361 --> 00:06:09.311
Writing tests sometimes does mean
that you have to create interfaces.

106
00:06:09.311 --> 00:06:12.725
Now in typescript and
in JavaScript, interfaces are not

107
00:06:12.725 --> 00:06:17.921
really much of a thing because everything
is duck type so it's not a big deal.

108
00:06:17.921 --> 00:06:22.392
In other languages like in Java or
more strongly typed languages.

109
00:06:22.392 --> 00:06:23.802
Interfaces are more of a thing.

110
00:06:23.802 --> 00:06:29.292
But yes, interfaces are a useful way of
allowing you to manage your dependencies.

111
00:06:29.292 --> 00:06:30.572
We're going to talk about that later.

112
00:06:31.872 --> 00:06:34.632
The other one people often talk about is,
hey, testing is for QA.

113
00:06:34.632 --> 00:06:38.072
Like, this is not my job to do
testing as a software developer.

114
00:06:38.072 --> 00:06:43.153
We're going to talk about more
a little later, but I really want to

115
00:06:43.153 --> 00:06:49.437
point out is that testing is actually
very much the job of the developer.

116
00:06:49.437 --> 00:06:54.998
We need to adjust our assumptions about
whose responsibility these things are,

117
00:06:54.998 --> 00:06:59.334
mainly because testing isn't
that much about writing tests,

118
00:06:59.334 --> 00:07:04.860
it's about designing the code-base
in a way so that it is testable.

119
00:07:04.860 --> 00:07:07.773
If you design code in
a way that is untestable,

120
00:07:07.773 --> 00:07:12.200
there's very little that somebody
can do after the fact to add tests.

121
00:07:12.200 --> 00:07:15.254
In other words, if you design
your code in an untestable way,

122
00:07:15.254 --> 00:07:18.070
you've essentially created
a legacy code base.

123
00:07:18.070 --> 00:07:22.899
That's the reason why legacy code bases
are difficult to test, is because, well,

124
00:07:22.899 --> 00:07:25.965
they weren't designed
with testing in mind.

125
00:07:25.965 --> 00:07:30.401
So there's nothing inherently
difficult about testing existing code,

126
00:07:30.401 --> 00:07:34.485
as long as the code is written
in a testable manner, right?

127
00:07:34.485 --> 00:07:39.796
So, in a strange way,
we're gonna be talking today mostly

128
00:07:39.796 --> 00:07:44.576
about what do you need to do
to make the code testable,

129
00:07:44.576 --> 00:07:48.464
not about how do I actually test, right?

130
00:07:48.464 --> 00:07:52.673
So I'm not here to teach you how to test,
even though that's the title of

131
00:07:52.673 --> 00:07:57.434
the session, rather, I'm here to teach you
about how do you structure the code so

132
00:07:57.434 --> 00:07:59.034
the testing becomes easy.

133
00:08:00.354 --> 00:08:04.065
And that's a very different way
of thinking about the problem.

134
00:08:04.065 --> 00:08:06.154
Now, one of my favorite excuse,

135
00:08:06.154 --> 00:08:09.855
which nobody ever says is
they don't know how, right?

136
00:08:09.855 --> 00:08:13.545
That is fundamentally the reason
why people don't test, right?

137
00:08:13.545 --> 00:08:15.145
Because they don't know how.

138
00:08:15.145 --> 00:08:19.941
And it is not obvious that,
hey in order to test I have

139
00:08:19.941 --> 00:08:23.865
to design my code base
in a particular way,

140
00:08:23.865 --> 00:08:28.885
rather than knowing the insides
of how to write tests.

141
00:08:28.885 --> 00:08:32.693
Everybody's always thinking like,
if I just install some special piece of

142
00:08:32.693 --> 00:08:35.615
software or whatever,
my testing will become easier.

143
00:08:35.615 --> 00:08:36.665
And the answer is no.

144
00:08:36.665 --> 00:08:41.525
It's all about designing
the code in a testable way.

145
00:08:41.525 --> 00:08:44.914
And knowing how is a skill
like any other skill.

146
00:08:44.914 --> 00:08:49.039
Now what I find interesting about this
is that you can come to a developer and

147
00:08:49.039 --> 00:08:51.034
you say, Hey do you know Rust?

148
00:08:51.034 --> 00:08:53.174
And they'll say no I don't or whatever.

149
00:08:53.174 --> 00:08:56.948
And they won't feel any hesitation saying
that they don't know how to do this

150
00:08:56.948 --> 00:08:58.744
particular thing.

151
00:08:58.744 --> 00:09:02.369
But if you come to a developer and
say do you know how to test?

152
00:09:02.369 --> 00:09:06.381
Even if they don't, they feel bad about
saying that they don't know how and

153
00:09:06.381 --> 00:09:10.904
they will essentially lie and be like,
Of course I know how to test.

154
00:09:10.904 --> 00:09:15.870
I find this really interesting that
somehow a skill of testing is not the same

155
00:09:15.870 --> 00:09:18.663
thing as a skill of a particular language,

156
00:09:18.663 --> 00:09:22.259
which is perfectly fine to
admit that you don't know.

157
00:09:22.259 --> 00:09:24.485
And I think we should get better at it.

158
00:09:24.485 --> 00:09:27.983
We should be able to freely admit saying,
look, I'm just not an expert at this

159
00:09:27.983 --> 00:09:30.540
particular thing and
I wanna learn more on how to do this.

