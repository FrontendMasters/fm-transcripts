WEBVTT

1
00:00:00.440 --> 00:00:07.543
So when you have a legacy application,
you kind of start with this idea of like,

2
00:00:07.543 --> 00:00:12.330
hey, let's do test,
I want to automate this stuff.

3
00:00:14.040 --> 00:00:18.858
And so a natural thing to do is to say,
well great, I'm just gonna pretend I'm

4
00:00:18.858 --> 00:00:22.597
a user and I will poke at
the application as a user, right?

5
00:00:22.597 --> 00:00:25.957
That's what end-to-end testing is.

6
00:00:25.957 --> 00:00:30.667
And this is basically your scenario
test or your large test, right?

7
00:00:30.667 --> 00:00:35.391
Where you are pretending to be user and
you're using something like playwright to

8
00:00:35.391 --> 00:00:39.306
poke on your system,
you're creating a large end-to-end test.

9
00:00:42.623 --> 00:00:49.621
And so what you discover is that these
tests are A slow and are flaky, right?

10
00:00:49.621 --> 00:00:53.927
Because if you're using a real,
if you're planning to be user,

11
00:00:53.927 --> 00:00:56.941
you are probably talking to GitHub.

12
00:00:56.941 --> 00:01:01.486
And maybe the GitHub goes down sometimes,
it has happened.

13
00:01:01.486 --> 00:01:03.883
Or you're talking to a database or
something of that and

14
00:01:03.883 --> 00:01:07.306
maybe the database is currently under
load and it doesn't return fast enough.

15
00:01:07.306 --> 00:01:11.560
And so, all of these end-to-end testing
frameworks, when they click on a button

16
00:01:11.560 --> 00:01:15.716
and they don't see anything happens,
is it because nothing has happened?

17
00:01:15.716 --> 00:01:18.006
Something's broken or because they
just haven't waited long enough?

18
00:01:18.006 --> 00:01:19.137
You just don't know.

19
00:01:19.137 --> 00:01:22.122
It's a fundamentally
unanswerable question.

20
00:01:22.122 --> 00:01:25.909
And so all of these, testing framework
have some kind of retries and

21
00:01:25.909 --> 00:01:28.036
automatic back offs where they like,

22
00:01:28.036 --> 00:01:32.192
click a button, see if the result
is what they expect it should be.

23
00:01:32.192 --> 00:01:34.802
And if it isn't, they wait,
try again later.

24
00:01:34.802 --> 00:01:37.682
Is it now,
because maybe the time has enough passed?

25
00:01:39.852 --> 00:01:44.633
And so this basically produce both slow
tests, because you're depending on I/O,

26
00:01:44.633 --> 00:01:48.554
but also flaky tests, because from
time to time, it doesn't work.

27
00:01:50.054 --> 00:01:53.865
So in like the initial thing
that you initially try,

28
00:01:53.865 --> 00:01:57.254
you just assume that you are the user,
right?

29
00:01:57.254 --> 00:02:02.160
And so the nice thing about these kinds of
tests is that you have a high confidence.

30
00:02:02.160 --> 00:02:05.170
That the happy paths are okay, right?

31
00:02:05.170 --> 00:02:09.864
So if you, if in your end-to-end test,
you were able to log in and see a list of

32
00:02:09.864 --> 00:02:15.460
clusters or whatever, then you have a high
confidence that that probably works.

33
00:02:15.460 --> 00:02:19.890
You also get a lot of code executed for
the initial tests.

34
00:02:19.890 --> 00:02:26.402
So by executing a single end-to-end test,
you probably cover 20% of your code base.

35
00:02:27.572 --> 00:02:32.382
To cover the next 20%, you're probably
gonna need a lot more tests, right?

36
00:02:32.382 --> 00:02:36.862
Because each test covers a lot, but
there's a huge amount of overlaps.

37
00:02:36.862 --> 00:02:41.102
So to get into the corner cases
might be extremely difficult.

38
00:02:41.102 --> 00:02:45.472
For example, when we had a GitHub API,
we were asserting that

39
00:02:45.472 --> 00:02:50.225
if the GitHub API is slow,
you would get a separate response.

40
00:02:50.225 --> 00:02:51.955
How would you do that
in an end-to-end test?

41
00:02:53.935 --> 00:02:55.335
It's no good way to do that, right?

42
00:02:55.335 --> 00:02:59.115
Because you don't control the other side,
how do you tell GitHub or

43
00:02:59.115 --> 00:03:04.350
whatever you're talking to that you wanna
make sure that the response is now slow.

44
00:03:04.350 --> 00:03:06.990
Do you put some kind of
a proxy server in between, and

45
00:03:06.990 --> 00:03:09.920
then how do you configure
the proxy server?

46
00:03:09.920 --> 00:03:12.695
Just adding complexity to
it won't solve it right?

47
00:03:15.523 --> 00:03:19.840
It is also hard to reproduce failures,
meaning that in a hard end-to-end test,

48
00:03:19.840 --> 00:03:22.233
when you have some kind
of a flaky situation.

49
00:03:22.233 --> 00:03:26.992
For example, service A responds
before service B everything works,

50
00:03:26.992 --> 00:03:31.723
but service B responds before service A,
it breaks, all right?

51
00:03:31.723 --> 00:03:34.673
How do you simulate that in
an end-to-end test when you're user?

52
00:03:35.893 --> 00:03:38.623
The answer is you can't really,
because it's the same exact thing.

53
00:03:40.343 --> 00:03:42.868
When things go wrong,
there's no easy way for

54
00:03:42.868 --> 00:03:46.559
you to identify like this is right here,
this is the problem because

55
00:03:46.559 --> 00:03:50.372
really anything inside of your
application can cause this.

56
00:03:50.372 --> 00:03:53.467
So it's a pretty big thing.

57
00:03:57.839 --> 00:04:01.308
So, when you have this,
the next thing you realize, okay,

58
00:04:01.308 --> 00:04:05.682
I should probably break
the application down into pieces.

59
00:04:05.682 --> 00:04:10.543
And instead of trying to test
the whole application end-to-end,

60
00:04:10.543 --> 00:04:13.562
I should probably test it in submodules.

61
00:04:13.562 --> 00:04:15.942
Maybe I can test
the authentication separate.

62
00:04:15.942 --> 00:04:21.787
This is what we did with
things like Storybook, right?

63
00:04:21.787 --> 00:04:25.737
We took a portion of the app, and you
can see how you could rebuild inside of

64
00:04:25.737 --> 00:04:28.033
the storybook maybe
just the login page and

65
00:04:28.033 --> 00:04:31.314
then poke at it to make sure
that the login page works.

66
00:04:31.314 --> 00:04:34.914
Or you rebuild the configuration
page of your application.

67
00:04:34.914 --> 00:04:38.824
And you can see that you can easily
reproduce things inside of that state.

68
00:04:38.824 --> 00:04:42.106
So the act of breaking it
up is what allows you to,

69
00:04:42.106 --> 00:04:46.205
go to kinda the lower level of
functional medium level test.

70
00:04:46.205 --> 00:04:52.075
And there you are forced to being able
to control the dependencies, right?

71
00:04:52.075 --> 00:04:56.592
If you wanna have a configuration test,
you're gonna be forced to somehow A,

72
00:04:56.592 --> 00:05:01.041
figure out how to instantiate the
configuration page independently from all

73
00:05:01.041 --> 00:05:01.875
other pages.

74
00:05:01.875 --> 00:05:05.426
That in itself Is gonna force you
to break the creation logic and

75
00:05:05.426 --> 00:05:08.192
a business logic into two pieces.

76
00:05:08.192 --> 00:05:11.416
And when you do that,
you're also going to have to be able

77
00:05:11.416 --> 00:05:15.232
to control what the current
configuration of the current user is.

78
00:05:15.232 --> 00:05:18.282
Presumably you're not actually locked in,
cuz you're faking that.

79
00:05:18.282 --> 00:05:22.039
And so now you need to be able
to also control the database or

80
00:05:22.039 --> 00:05:25.227
whatever the database is over there,
right?

81
00:05:25.227 --> 00:05:26.577
So notice what's happening.

82
00:05:26.577 --> 00:05:29.546
We're just taking the whole thing and

83
00:05:29.546 --> 00:05:33.544
breaking it down into smaller and
smaller pieces.

84
00:05:34.993 --> 00:05:40.484
And so, what we're getting here is,
we're getting higher confidence

85
00:05:40.484 --> 00:05:46.850
that we are now focusing on individual
subsystems of the application.

86
00:05:46.850 --> 00:05:50.293
It is much harder to get coverage now
because we're not running the whole thing

87
00:05:50.293 --> 00:05:53.218
end-to-end, instead you're
running individual pieces and so

88
00:05:53.218 --> 00:05:55.200
you have to do a lot more of it.

89
00:05:55.200 --> 00:05:58.290
But, now your tests become
a lot more focused.

90
00:05:58.290 --> 00:06:02.102
It's not just this high level,
user logs in, clicks on this button and

91
00:06:02.102 --> 00:06:03.129
everything works.

92
00:06:03.129 --> 00:06:07.187
It's a lot more focused and like,
this is a configuration page.

93
00:06:07.187 --> 00:06:09.788
I can change these settings, but
this thing should be red and

94
00:06:09.788 --> 00:06:10.713
this should be blue.

95
00:06:10.713 --> 00:06:13.697
This should be producing this error
message if I don't fill this out or

96
00:06:13.697 --> 00:06:14.769
something of that sort.

97
00:06:19.465 --> 00:06:24.289
And so you can just repeat this over and
over again, until you have you end up with

98
00:06:24.289 --> 00:06:28.903
things that are fundamentally
from your point of view units.

99
00:06:28.903 --> 00:06:32.160
The thing is,
nothing ever is a unit, right?

100
00:06:32.160 --> 00:06:35.413
Because you can always
break down stuff further.

101
00:06:35.413 --> 00:06:38.418
For example,
when you are running your code,

102
00:06:38.418 --> 00:06:41.525
you trust that the computer
is doing its stuff.

103
00:06:41.525 --> 00:06:45.720
Essentially you're running an end-to-end
test on top of the computer and

104
00:06:45.720 --> 00:06:49.560
you're hoping that the computer
does the right thing for you right?

105
00:06:49.560 --> 00:06:52.936
So the unit test from your point of
view is the code you've written.

106
00:06:52.936 --> 00:06:56.823
But as far as the computer is concerned,
it's the actual end-to-end test for

107
00:06:56.823 --> 00:07:00.780
everything the computer has to work in
order to deliver the output that you want.

108
00:07:02.150 --> 00:07:02.997
Right?

109
00:07:02.997 --> 00:07:06.740
So, there is no hard
line of what the test is.

110
00:07:06.740 --> 00:07:10.457
It's from your perspective as a developer,
what is it that you control?

111
00:07:10.457 --> 00:07:11.001
And again,

112
00:07:11.001 --> 00:07:14.601
all of these tests are important because
they test different things, right?

113
00:07:14.601 --> 00:07:18.737
An end-to-end test, make sure that all
of the pieces communicate together.

114
00:07:18.737 --> 00:07:22.609
A unit test, make sure that
individual pieces do the right thing.

115
00:07:22.609 --> 00:07:27.079
So the way I explain it is, let's say
you have a stereo system at home.

116
00:07:27.079 --> 00:07:31.289
You have your TV, you have your amplifier,
you have your remote control, right?

117
00:07:31.289 --> 00:07:35.953
An end-to-end test is you sitting behind
a TV hitting the power button on and

118
00:07:35.953 --> 00:07:39.682
expecting that the TV comes on,
your amplifier comes on, and

119
00:07:39.682 --> 00:07:41.928
you hear the sound of the TV, right?

120
00:07:41.928 --> 00:07:45.137
That's an end-to-end test because
everything's being tested together.

121
00:07:45.137 --> 00:07:49.887
A unit test would be,
does the amplifier work correctly?

122
00:07:49.887 --> 00:07:53.257
Does the TV show pixels at
the right locations, right?

123
00:07:53.257 --> 00:07:59.176
So the kind of thing that you would
test with an end-to-end test is,

124
00:07:59.176 --> 00:08:03.393
I didn't plug the HDMI cable
in the correct output.

125
00:08:03.393 --> 00:08:06.587
That's a configuration level error.

126
00:08:06.587 --> 00:08:07.870
You misconfigured the system.

127
00:08:07.870 --> 00:08:10.501
It's not that the TV's broken,
it's not that the amplifier's broken,

128
00:08:10.501 --> 00:08:12.217
it's not that speakers don't work.

129
00:08:12.217 --> 00:08:16.017
It's like you wired up the whole
thing in the wrong way, right?

130
00:08:16.017 --> 00:08:20.379
That's what end-to-end tests are good for,
to kind of verify that the cabling,

131
00:08:20.379 --> 00:08:22.890
the wiring of the stuff
is done in the right way.

132
00:08:22.890 --> 00:08:26.406
When the wiring could either mean
the shape of objects you're passing across

133
00:08:26.406 --> 00:08:29.528
are correct, or
the order of calls is correct.

134
00:08:29.528 --> 00:08:35.778
But it's not really testing the actual
behavior of the lower level thing.

135
00:08:35.778 --> 00:08:37.598
For example, sorting function.

136
00:08:37.598 --> 00:08:40.458
A sort would be more
of a unit level thing.

137
00:08:40.458 --> 00:08:43.466
So let's say you have a flashlight,

138
00:08:43.466 --> 00:08:48.812
and you want to unit test it, or
rather you wanted to test it.

139
00:08:48.812 --> 00:08:53.372
So you push the power button and
the flashlight either turns on or

140
00:08:53.372 --> 00:08:56.002
doesn't turn on, right?

141
00:08:56.002 --> 00:08:59.487
The thing is,
if you push the power button and

142
00:08:59.487 --> 00:09:04.119
it doesn't turn on,
you have really no idea why.

143
00:09:04.119 --> 00:09:06.629
Is the switch broken, is the battery dead?

144
00:09:06.629 --> 00:09:09.069
Is the light bulb burnt out, right?

145
00:09:09.069 --> 00:09:11.869
All of those things are possible answers.

146
00:09:11.869 --> 00:09:16.809
But on the other hand, if it does turn on,
you know that everything must be working.

147
00:09:16.809 --> 00:09:19.406
You must have a new battery,
you must have a switch is working,

148
00:09:19.406 --> 00:09:21.129
the light bulb is not burned out, right?

149
00:09:21.129 --> 00:09:22.849
Everything works.

150
00:09:22.849 --> 00:09:24.737
Whereas as you go lower, you can say,

151
00:09:24.737 --> 00:09:27.209
hey maybe I'll just test
the battery by itself.

152
00:09:27.209 --> 00:09:29.779
Maybe I'm just gonna remove
the battery and put it in the tester.

153
00:09:29.779 --> 00:09:33.579
And now I've eliminated a piece
that I know isn't the problem.

154
00:09:33.579 --> 00:09:35.659
Can I test a switch by itself?

155
00:09:35.659 --> 00:09:37.379
And each of these have probabilities,
right?

156
00:09:38.489 --> 00:09:40.989
Usually a battery is not working.

157
00:09:40.989 --> 00:09:43.735
Sometimes the switch is broken but
that's pretty rare.

158
00:09:43.735 --> 00:09:46.905
Sometimes the connectors get rusty,
but that's also pretty rare.

159
00:09:46.905 --> 00:09:49.225
And sometimes the bulb goes out, right?

160
00:09:49.225 --> 00:09:52.695
So you kind of have
probabilities to these things.

161
00:09:52.695 --> 00:09:57.051
And what you wanna do with the unit test,
is you wanna test individual parts so

162
00:09:57.051 --> 00:10:00.885
that you can easily say,
is the battery good, yes or no?

163
00:10:00.885 --> 00:10:02.983
Is the light bulb good, yes or no?

164
00:10:02.983 --> 00:10:05.233
Is the switch working, yes or no?

165
00:10:05.233 --> 00:10:08.827
So then when you put it all together,
and it works or doesn't work,

166
00:10:08.827 --> 00:10:11.383
you have eliminated a lot
of different paths.

167
00:10:11.383 --> 00:10:15.218
So that's the way I think about
the end-to-end test versus unit test.

168
00:10:15.218 --> 00:10:21.093
Is that end-to-end test is the system
wired together in the correct way.

169
00:10:21.093 --> 00:10:25.384
Is the information flowing through
the system in a correct way, right?

170
00:10:25.384 --> 00:10:30.655
For example, is my application
configured with the correct

171
00:10:30.655 --> 00:10:35.652
credentials so
that it can talk to the database,right?

172
00:10:35.652 --> 00:10:39.022
That you cannot really
verify in a unit test.

173
00:10:39.022 --> 00:10:42.235
But a single end-to-end test
will easily verify that, and

174
00:10:42.235 --> 00:10:45.763
bazillion other things like,
are you connected to the database?

175
00:10:45.763 --> 00:10:48.232
Are you talking to a caching server,
to Redis,

176
00:10:48.232 --> 00:10:51.833
to all the pieces that are required
to make the application run.

177
00:10:51.833 --> 00:10:53.675
That's an extremely high level test.

