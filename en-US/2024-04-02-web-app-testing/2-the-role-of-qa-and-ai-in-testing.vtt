WEBVTT

1
00:00:00.120 --> 00:00:04.088
I'm curious if you have thoughts
that you can share on where or

2
00:00:04.088 --> 00:00:08.150
if you think QA fits into
the software development life cycle?

3
00:00:09.450 --> 00:00:13.360
Is there a strong need for
QA, do you think?

4
00:00:13.360 --> 00:00:14.280
&gt;&gt; Yeah, so that's a good question.

5
00:00:14.280 --> 00:00:17.460
So QA is kind of, you can think
of it in a lot of different ways.

6
00:00:17.460 --> 00:00:22.571
The old way of doing QA, which literally
was like they fully test everything,

7
00:00:22.571 --> 00:00:28.422
or the new way of QA, which kind of helps
the developers make assertion frameworks.

8
00:00:28.422 --> 00:00:31.707
So, in order to have this freedom
to do all of these things,

9
00:00:31.707 --> 00:00:34.842
you have to set up your
environment in the right way.

10
00:00:34.842 --> 00:00:37.870
Some of things are gonna be pretty
obvious and we are gonna talk about it,

11
00:00:37.870 --> 00:00:40.262
other things are gonna
be more complicated.

12
00:00:40.262 --> 00:00:42.902
Like, how do you set up UI testing, right?

13
00:00:42.902 --> 00:00:45.890
It's kind of in this semi-valid excuse.

14
00:00:45.890 --> 00:00:47.522
That gets complicated.

15
00:00:47.522 --> 00:00:52.204
And so a place where QA can help is
to create kind of a testing framework

16
00:00:52.204 --> 00:00:56.724
which we call pages, into the system so
that you create a good DSL,

17
00:00:56.724 --> 00:01:02.646
good domain specific language, for the
developers to express themselves, right?

18
00:01:02.646 --> 00:01:03.876
So that's one thing.

19
00:01:03.876 --> 00:01:10.356
The other thing a QA can do is you
as a developer produce the system,

20
00:01:10.356 --> 00:01:18.086
hopefully in a testable way, and
then over time issues are discovered.

21
00:01:18.086 --> 00:01:21.402
And so when a particular issue is
discovered, you should always create

22
00:01:21.402 --> 00:01:24.911
a regression test saying, hey,
this is an issue that we missed.

23
00:01:24.911 --> 00:01:28.856
And this is another useful thing to do for
a QA, which is, hey,

24
00:01:28.856 --> 00:01:34.761
using these domain-specific languages,
can I recreate this particular scenario?

25
00:01:34.761 --> 00:01:39.588
And it is so much helpful, then, to just
give the scenario over to the developer

26
00:01:39.588 --> 00:01:42.216
and be, hey, this needs to be fixed.

27
00:01:42.216 --> 00:01:45.816
The other thing that's useful is
oftentimes scenarios are complicated.

28
00:01:46.906 --> 00:01:48.851
And a lot of it is just randomly like,
hey,

29
00:01:48.851 --> 00:01:51.346
this is a complicated
scenario that I've recreated.

30
00:01:51.346 --> 00:01:53.149
It's gonna be super difficult for

31
00:01:53.149 --> 00:01:57.496
me to debug or figure out what's going
on under it, let me simplify it, right?

32
00:01:57.496 --> 00:02:01.261
Let's just randomly start
deleting portions of

33
00:02:01.261 --> 00:02:05.354
the code until the test no longer fails,
right?

34
00:02:05.354 --> 00:02:09.990
And what you're doing over there is you,
without having any knowledge

35
00:02:09.990 --> 00:02:14.548
about how the system works or
knowledge about why the test is failing,

36
00:02:14.548 --> 00:02:19.124
you get to whittle down the scenario and
the simplest possible thing.

37
00:02:19.124 --> 00:02:22.298
And those are all useful
things that you can do.

38
00:02:22.298 --> 00:02:25.838
Now, it does mean that the QA
has to be more technical, right?

39
00:02:25.838 --> 00:02:31.362
It's not the old style, just throw a bunch
of people and have them click around,

40
00:02:31.362 --> 00:02:36.250
which is by the way a boring job that
nobody wants to do anyways, right?

41
00:02:36.250 --> 00:02:41.808
You wanna just automate it so that it's
both faster, you get better results.

42
00:02:41.808 --> 00:02:47.031
And I think the role of a QA,
it becomes more of how do I build

43
00:02:47.031 --> 00:02:53.018
up more infrastructure to enable
more expressive tests, right?

44
00:02:53.018 --> 00:02:56.745
Because one of the things that we're gonna
talk about is you wanna have your tests to

45
00:02:56.745 --> 00:02:57.498
be easy to read.

46
00:02:57.498 --> 00:02:59.985
Because remember,
we said it's a form of documentation.

47
00:02:59.985 --> 00:03:04.815
So when you come to a test, it should be
obvious what scenario you are testing.

48
00:03:04.815 --> 00:03:08.829
And I oftentimes see these super
complicated tests where you're like,

49
00:03:08.829 --> 00:03:11.675
what in the world are you
trying to tell me, right?

50
00:03:11.675 --> 00:03:14.605
How am I supposed to reason
about this particular thing?

51
00:03:14.605 --> 00:03:19.537
And people just don't spend enough time
either whittling down the test to the bare

52
00:03:19.537 --> 00:03:25.227
minimum, or giving proper names to things
so that it creates a nice, useful story.

53
00:03:25.227 --> 00:03:28.307
&gt;&gt; Someone asked,
is testing language dependent?

54
00:03:28.307 --> 00:03:29.354
&gt;&gt; Is testing language dependent?

55
00:03:29.354 --> 00:03:30.613
It's a good question.

56
00:03:30.613 --> 00:03:33.267
Mostly I would say no.

57
00:03:34.287 --> 00:03:38.791
Whatever is a good testing practice in any
one language should also be true in other

58
00:03:38.791 --> 00:03:39.905
languages.

59
00:03:39.905 --> 00:03:44.311
Now it is true that some languages make
this easier than others, because, for

60
00:03:44.311 --> 00:03:47.065
example, JavaScript is duck-typed, right?

61
00:03:47.065 --> 00:03:50.241
If it walks like a duck,
walks like a duck, it's a duck.

62
00:03:50.241 --> 00:03:53.221
It makes it easier to create mocks and

63
00:03:53.221 --> 00:03:57.225
hack things around inside
of your code base.

64
00:03:57.225 --> 00:03:59.645
Not necessarily that you should do that,
but

65
00:03:59.645 --> 00:04:03.287
it is a tool that you have that you
might not have in other languages.

66
00:04:04.487 --> 00:04:08.483
So for example, if you are in C,
which is everything strongly typed,

67
00:04:08.483 --> 00:04:12.821
if somebody doesn't give you an interface,
it makes it really difficult,

68
00:04:12.821 --> 00:04:16.147
if not impossible,
to do anything about it.

69
00:04:16.147 --> 00:04:20.338
Whereas if you're in JavaScript and
if somebody doesn't give you an interface,

70
00:04:20.338 --> 00:04:24.530
if you're creative enough, maybe you can
hack the require or the import system or

71
00:04:24.530 --> 00:04:26.677
something like that to get what you want.

72
00:04:26.677 --> 00:04:27.967
Is it the best way of testing?

73
00:04:27.967 --> 00:04:34.907
No, but it does give you slightly more
freedom in kind of the corner cases.

74
00:04:34.907 --> 00:04:38.694
But I still would say, hey, the best thing
to do is to just design your code base to

75
00:04:38.694 --> 00:04:39.991
be testable to begin with.

76
00:04:39.991 --> 00:04:41.891
&gt;&gt; What's the role of AI in testing?

77
00:04:41.891 --> 00:04:43.055
Do you think it could replace it?

78
00:04:43.055 --> 00:04:44.931
&gt;&gt; That is an excellent question.

79
00:04:44.931 --> 00:04:47.581
So let's take a little
bit of a diversion here.

80
00:04:47.581 --> 00:04:52.628
So the role of AI,
I remember about 15, 20 years ago,

81
00:04:52.628 --> 00:04:58.201
there was a company that was trying
to write a piece of software.

82
00:04:58.201 --> 00:04:59.661
I don't think they succeeded at this.

83
00:04:59.661 --> 00:05:01.607
And I forgot the name of the company.

84
00:05:01.607 --> 00:05:05.370
But the idea was that you as
a developer write the application and

85
00:05:05.370 --> 00:05:08.827
then the software will generate the tests.

86
00:05:08.827 --> 00:05:14.490
And I think that's fundamentally flawed
because you can replace that company or

87
00:05:14.490 --> 00:05:16.077
the software with AI.

88
00:05:16.077 --> 00:05:18.057
It's the same exact thing.

89
00:05:18.057 --> 00:05:22.283
The reason I think it's fundamentally
flawed is because I think you have it

90
00:05:22.283 --> 00:05:23.970
backwards, right?

91
00:05:23.970 --> 00:05:27.846
What you're saying is like,
here is a real working system,

92
00:05:27.846 --> 00:05:31.390
try to figure out what
the requirements were.

93
00:05:31.390 --> 00:05:33.640
That's not how people work,
it's the other way around.

94
00:05:33.640 --> 00:05:37.910
Let me give you requirements
you tell me what the system is.

95
00:05:37.910 --> 00:05:40.872
So I actually think that the role
of AI would be useful and

96
00:05:40.872 --> 00:05:44.970
it's actually reversed in the sense
that as a developer, what I really wanna

97
00:05:44.970 --> 00:05:49.066
do is write a whole bunch of tests
showing you, hey, let me demonstrate you,

98
00:05:49.066 --> 00:05:52.906
I want the software that does this,
this, this, and this.

99
00:05:52.906 --> 00:05:57.886
And let the AI or some tool automatically
generate the actual behavior, right?

100
00:05:57.886 --> 00:05:59.592
So you want to do it backwards.

101
00:05:59.592 --> 00:06:02.897
But because historically we've
been the ones writing the code,

102
00:06:02.897 --> 00:06:06.021
we're coming at it from the angle of,
here's the code base,

103
00:06:06.021 --> 00:06:10.012
go generate some tests for you because
I hear tests are a good idea, right?

104
00:06:10.012 --> 00:06:14.884
But that completely misses the quality
of it because testing is about

105
00:06:14.884 --> 00:06:17.912
having a software that's well designed.

106
00:06:17.912 --> 00:06:21.893
And if the tool or
the AI is unable to change your design,

107
00:06:21.893 --> 00:06:27.713
then there's very limited kind of quality
of the test that you can produce.

108
00:06:27.713 --> 00:06:32.117
But when you flip it around, you create
tests first, and you let the AI produce

109
00:06:32.117 --> 00:06:35.953
the output, I think that's actually
viable and workable things.

110
00:06:35.953 --> 00:06:40.737
And I think we're getting there,
because when you have the co-pilot,

111
00:06:40.737 --> 00:06:44.588
it is remarkable sometimes
what the co-pilot produces.

112
00:06:44.588 --> 00:06:48.368
Like there are moments where I'm,
how in the world did you figure this out?

113
00:06:48.368 --> 00:06:52.168
But I'm, I'm gonna go with it cuz I
think it's actually the right thing.

114
00:06:52.168 --> 00:06:56.192
The other thing I wanna point out
is if your code is not testable,

115
00:06:56.192 --> 00:07:00.380
the kind of test that you end up with
are tests that are hard to read.

116
00:07:00.380 --> 00:07:03.341
Because you are desperately
trying to work around

117
00:07:03.341 --> 00:07:07.017
the limitations of a code base
that doesn't wanna be tested.

118
00:07:07.017 --> 00:07:10.974
But if you flip it around and you say,
I'm gonna write the test first,

119
00:07:10.974 --> 00:07:14.935
nobody in their right mind will
write a hard-to-read test, right,

120
00:07:14.935 --> 00:07:16.902
that's not how it works, right?

121
00:07:16.902 --> 00:07:21.010
You start with a simple to
read simple scenario test and

122
00:07:21.010 --> 00:07:24.717
then you're producing the output, right?

123
00:07:24.717 --> 00:07:28.888
So, if you start test first, or
this is what people talk about test-driven

124
00:07:28.888 --> 00:07:33.319
development, of course, your test will be
pretty and simple and easy to read and

125
00:07:33.319 --> 00:07:37.577
easy to reason about because, well,
that's the path of least resistance.

126
00:07:37.577 --> 00:07:41.349
You write a simple test case, and
then you write the code, right?

127
00:07:41.349 --> 00:07:44.409
You don't write the code and
then scratch your head,

128
00:07:44.409 --> 00:07:48.625
how in the world am I gonna test this
thing and then end up with some kludgy,

129
00:07:48.625 --> 00:07:52.779
complicated thing that's
difficult to reason about, right?

130
00:07:52.779 --> 00:07:57.366
So there's a very convoluted way of saying
is that I think historically people just

131
00:07:57.366 --> 00:07:59.409
have the wrong thing in their heads.

132
00:07:59.409 --> 00:08:04.130
They assume that it's all about
the code and the tests are secondary,

133
00:08:04.130 --> 00:08:09.170
whereas I really would like to flip
this in your head and say, no, no, no,

134
00:08:09.170 --> 00:08:14.073
the tests are the driving forces here and
the code is the secondary part.

135
00:08:14.073 --> 00:08:18.731
Yes, we want code, and at the end of the
day the code is the thing that will do and

136
00:08:18.731 --> 00:08:21.495
solve and
build the application that we want.

137
00:08:21.495 --> 00:08:25.000
But think of the tests as
the requirements, the description,

138
00:08:25.000 --> 00:08:28.508
the documentation,
the thing that keeps your team together,

139
00:08:28.508 --> 00:08:32.406
the way of explaining how
the system works to your teammates.

140
00:08:32.406 --> 00:08:34.221
All of those things is what tests are.

