WEBVTT

1
00:00:00.327 --> 00:00:04.017
So the way we develop code
is essentially this, right?

2
00:00:04.017 --> 00:00:05.612
Everybody does this.

3
00:00:05.612 --> 00:00:09.852
The question is, when we do the testing,
do we do it manually or

4
00:00:09.852 --> 00:00:12.819
do we do it in an automatic fashion,
right?

5
00:00:12.819 --> 00:00:17.617
Nobody goes and writes huge amounts
of code at once and checks it in.

6
00:00:17.617 --> 00:00:21.997
Everybody writes a little bit of code and
then you do something to test it.

7
00:00:21.997 --> 00:00:23.538
Whether it's manual or

8
00:00:23.538 --> 00:00:28.400
automatic, it doesn't matter, but
you do something to test it, right?

9
00:00:28.400 --> 00:00:32.194
You don't write code for
months without ever running it.

10
00:00:32.194 --> 00:00:33.591
&gt;&gt; I was gonna say, hopefully [LAUGH].

11
00:00:33.591 --> 00:00:35.042
&gt;&gt; Hopefully, I mean, but

12
00:00:35.042 --> 00:00:39.407
the point is that there is always this
testing cycle that happens, right?

13
00:00:39.407 --> 00:00:42.794
And so the only thing I'm trying
to convince you of like, look,

14
00:00:42.794 --> 00:00:46.143
you're gonna do this anyway,
let's just not do it manually.

15
00:00:46.143 --> 00:00:50.049
Let's just automate it so
that the computer does it for you so

16
00:00:50.049 --> 00:00:53.121
that you can really focus
on just writing code.

17
00:00:53.121 --> 00:00:56.518
And as you are developing things,
you have more and

18
00:00:56.518 --> 00:00:59.126
more tests that you build up over time.

19
00:00:59.126 --> 00:01:02.189
And these tests were
essentially requirements, or

20
00:01:02.189 --> 00:01:06.023
assumptions, or something you
expected to be true all the time.

21
00:01:06.023 --> 00:01:09.584
And as time goes on,
you just build up a huge repertoire of it.

22
00:01:09.584 --> 00:01:12.212
And hopefully,
you've read it in a way that is easy for

23
00:01:12.212 --> 00:01:15.984
others to kinda look at it and understand
like, yeah, I understand why they

24
00:01:15.984 --> 00:01:19.780
wrote this test because they wanted to
assert something or something useful.

25
00:01:19.780 --> 00:01:23.232
This should be true or something of that
sort, and then you build up over time.

26
00:01:23.232 --> 00:01:26.610
So the thing I'm trying to convince
you of is that at the end of the day,

27
00:01:26.610 --> 00:01:28.346
this is how everybody does coding.

28
00:01:28.346 --> 00:01:30.920
I have never seen anybody not
doing it this particular way.

29
00:01:30.920 --> 00:01:36.752
The question just becomes,
are the tests automated or not, right?

30
00:01:36.752 --> 00:01:39.930
If they're manual,
then they're fundamentally limited,

31
00:01:39.930 --> 00:01:44.097
because you're not gonna remember to do
all the possible testing all the times.

32
00:01:44.097 --> 00:01:47.935
You're gonna only do a subset
because it takes time and

33
00:01:47.935 --> 00:01:52.286
chances are you gonnav forget stuff and
problems will arise.

34
00:01:52.286 --> 00:01:54.423
So what kind of tests do you have?

35
00:01:54.423 --> 00:01:58.208
Well, you can split it in
a lot of different ways.

36
00:01:58.208 --> 00:02:01.374
You can talk about testing level,
for example, unit test,

37
00:02:01.374 --> 00:02:04.181
integration test,
system test, acceptance test.

38
00:02:04.181 --> 00:02:08.524
You can split it by functionality, for
example, does it do the right thing?

39
00:02:08.524 --> 00:02:10.157
Does it do it fast enough?

40
00:02:10.157 --> 00:02:11.623
Does it do it in a secure way?

41
00:02:11.623 --> 00:02:15.551
Does it do it in a way where
usability matters, right?

42
00:02:15.551 --> 00:02:19.684
You take a random person off the street
and sit them behind the software,

43
00:02:19.684 --> 00:02:22.053
will they be able to do the right thing,
or

44
00:02:22.053 --> 00:02:24.579
does it take a complicated
set of training?

45
00:02:24.579 --> 00:02:26.482
Is it accessible, right?

46
00:02:26.482 --> 00:02:29.667
Those are different kind of tests.

47
00:02:29.667 --> 00:02:33.382
Automation, which is, have I managed to
automate it or is it manual tests, right?

48
00:02:33.382 --> 00:02:36.185
If you think about
the old way of doing QA,

49
00:02:36.185 --> 00:02:39.472
what you would have is just documents,
pages and

50
00:02:39.472 --> 00:02:44.779
pages of checklist of what the QA would
have to go and click on and assert, etc.

51
00:02:44.779 --> 00:02:51.212
You're just using a human as
a very slow and inefficient CPU.

52
00:02:51.212 --> 00:02:52.818
And of course,
we have regression and smoke.

53
00:02:52.818 --> 00:02:56.355
Regression being, I thought the system
was working, I discovered a bug.

54
00:02:56.355 --> 00:02:59.269
I'm gonna add this particular
scenario now to my test suite so

55
00:02:59.269 --> 00:03:00.791
that it doesn't happen again.

56
00:03:00.791 --> 00:03:04.292
And a smoke test usually happens
when you have a large system and

57
00:03:04.292 --> 00:03:07.277
you wanna determine if
everything works correctly.

58
00:03:07.277 --> 00:03:11.224
But the number of tests you have is so
huge that it takes maybe hours to run.

59
00:03:11.224 --> 00:03:16.551
And so you select a subsection of the test
that kind of give you a sanity check.

60
00:03:16.551 --> 00:03:19.016
Did you really break anything or
the basics stopped working?

61
00:03:19.016 --> 00:03:21.942
So you would have a smoke test.

62
00:03:21.942 --> 00:03:24.804
So there's a lot of different
kinds of way of doing testing or

63
00:03:24.804 --> 00:03:25.935
what we can talk about.

64
00:03:25.935 --> 00:03:32.360
&gt;&gt; Do we need to follow the test-driven
development or is it optional?

65
00:03:32.360 --> 00:03:37.043
&gt;&gt; So test-driven development,
that's a very good question.

66
00:03:37.043 --> 00:03:39.130
And it's a complicated answer,

67
00:03:39.130 --> 00:03:43.824
because I'm a big fan of test-driven
development, but at the same time,

68
00:03:43.824 --> 00:03:47.570
I am not gonna lie to you and
tell you that I do it all the time.

69
00:03:47.570 --> 00:03:49.548
It's a mixture of both, right?

70
00:03:49.548 --> 00:03:52.917
Sometimes you do TDD,
because it makes sense for you.

71
00:03:52.917 --> 00:03:57.269
Sometimes I'm not exactly sure what I'm
doing and so I'm kind of experimenting

72
00:03:57.269 --> 00:04:00.919
with things, and then I have to go
back and add the test afterwards.

73
00:04:00.919 --> 00:04:04.315
And I can tell you that whenever you
go back and add the test afterwards,

74
00:04:04.315 --> 00:04:05.626
you're gonna miss stuff.

75
00:04:05.626 --> 00:04:08.568
You're never gonna cover everything.

76
00:04:08.568 --> 00:04:13.179
So I try heavily to prefer
TDD whenever I can, but

77
00:04:13.179 --> 00:04:19.382
I don't always do it and
there are various set of reasons why not.

78
00:04:19.382 --> 00:04:27.103
But in general, you want to do
it in a test-driven form first.

79
00:04:27.103 --> 00:04:32.032
An example of that would be you wanna make
a new feature, right, and so you write

80
00:04:32.032 --> 00:04:37.200
a test that basically demonstrates this
particular feature in its simplest form.

81
00:04:37.200 --> 00:04:39.599
And now you have a test that doesn't work,
right?

82
00:04:39.599 --> 00:04:42.791
So now, you have something that you
can easily run over and over and

83
00:04:42.791 --> 00:04:46.382
easily get under the debugger and
easily put console log statements in your

84
00:04:46.382 --> 00:04:48.961
application that gonna
figure out what's going on.

85
00:04:48.961 --> 00:04:53.363
And once you have this scenario that isn't
working, now your job is to go back and

86
00:04:53.363 --> 00:04:55.126
go and implement this, right?

87
00:04:55.126 --> 00:04:59.298
And so you start implementing it,
whatever it takes until the test pass.

88
00:04:59.298 --> 00:05:04.250
And when the tests pass,
the thing you should be doing is to try to

89
00:05:04.250 --> 00:05:09.495
implement just the bare minimum
of what the test requires, right?

90
00:05:09.495 --> 00:05:14.134
So you do the bare minimum first, and then
you write another test that is a little

91
00:05:14.134 --> 00:05:18.080
more complicated, a little more involved,
or test a corner case or

92
00:05:18.080 --> 00:05:21.767
something of that sort, and
then you go back and implement it.

93
00:05:21.767 --> 00:05:23.172
So that's the idea of
test-driven development.

94
00:05:23.172 --> 00:05:28.023
But as I said, while I think ideally
you wanna do that all the time,

95
00:05:28.023 --> 00:05:32.112
sometimes there are reasons
where that might not work.

96
00:05:32.112 --> 00:05:36.793
So I don't wanna just basically preach
something that I myself sometimes

97
00:05:36.793 --> 00:05:37.552
don't do.

98
00:05:37.552 --> 00:05:40.464
Okay, so let's talk about scope.

99
00:05:40.464 --> 00:05:45.304
So unit tests are the lowest scope,
and we're gonna actually have hands-on

100
00:05:45.304 --> 00:05:49.338
building, etc, this is kind of
a theory portion, so to speak.

101
00:05:49.338 --> 00:05:51.143
And we're focusing on individual units.

102
00:05:51.143 --> 00:05:52.205
And so what's a unit?

103
00:05:52.205 --> 00:05:58.941
A unit would be a individual function,
or a class, or a file.

104
00:05:58.941 --> 00:06:02.168
Typically, in the same file,
you put related code together, right?

105
00:06:02.168 --> 00:06:03.273
So that will be a unit.

106
00:06:03.273 --> 00:06:07.856
And what we mean by unit is that really,
you can think of a test as

107
00:06:07.856 --> 00:06:12.700
a harness in the sense that it takes
that unit that you wanna test and

108
00:06:12.700 --> 00:06:16.594
then pokes at it with different scenarios,
inputs,

109
00:06:16.594 --> 00:06:21.557
whatever you wanna call it, and
it asserts as particular outputs.

110
00:06:21.557 --> 00:06:24.812
It's like, if I do this,
I expect that to happen.

111
00:06:24.812 --> 00:06:30.418
And a unit test really just says that it's
very clear as to where you should look for

112
00:06:30.418 --> 00:06:31.810
a problem, right?

113
00:06:31.810 --> 00:06:36.060
If I poke over here and
the stuff doesn't work over here,

114
00:06:36.060 --> 00:06:40.943
there should be very limited
number of suspects for you, right?

115
00:06:40.943 --> 00:06:46.864
If I have a function that is sorting
things by distance from something,

116
00:06:46.864 --> 00:06:52.489
then it should be very easy for me,
if the sort comes out incorrect,

117
00:06:52.489 --> 00:06:55.370
to pinpoint where the mistake is.

118
00:06:55.370 --> 00:06:59.147
Not necessarily where it is, but
which code to look for it, right?

119
00:06:59.147 --> 00:07:03.975
There's another extreme, if you have an
end-to-end test which tries to log you in

120
00:07:03.975 --> 00:07:07.783
and then goes to the Settings page and
change your email address and

121
00:07:07.783 --> 00:07:11.733
this test fails, who knows where
the issue might have been, right?

122
00:07:11.733 --> 00:07:15.315
There's so many layers involved
that becomes very, very difficult.

123
00:07:15.315 --> 00:07:19.264
So I'm just kind of putting the two
extremes on a table over here.

124
00:07:19.264 --> 00:07:24.279
And so usually, what we mean by unit test
is something that is very well defined.

125
00:07:24.279 --> 00:07:29.140
The other kind of hallmark of unit
test is that they're isolated, right?

126
00:07:29.140 --> 00:07:35.516
You will never have a flakiness
inside a unit test, or you shouldn't.

127
00:07:35.516 --> 00:07:38.713
I can't imagine how you would get
a flakiness into a unit test, right,

128
00:07:38.713 --> 00:07:40.163
because it's fully isolated.

129
00:07:40.163 --> 00:07:43.466
And because of that also,
they're extremely fast, right?

130
00:07:43.466 --> 00:07:47.688
You should be able to run
thousands of them in a second.

131
00:07:47.688 --> 00:07:48.856
That should be not a problem.

132
00:07:48.856 --> 00:07:53.616
As a matter of fact, if you think about
it, unit tests are typically CPU-bound.

133
00:07:53.616 --> 00:07:59.698
And it's typically extremely difficult
to keep a CPU busy for a second, unless

134
00:07:59.698 --> 00:08:05.989
you're going through huge amount of IO
where you're moving a lot of data across.

135
00:08:05.989 --> 00:08:08.539
Actually, just keeping the CPU busy for

136
00:08:08.539 --> 00:08:12.739
a second with just pure computation
is kinda tricky or difficult.

137
00:08:12.739 --> 00:08:15.261
The amount of code you would have
to write would be ridiculous.

138
00:08:15.261 --> 00:08:20.071
So unit tests are essentially
tests that then make an assertion

139
00:08:20.071 --> 00:08:22.985
typically about how things are done.

140
00:08:22.985 --> 00:08:27.438
And so they do tend to fall into this
category of like, if I change the way I am

141
00:08:27.438 --> 00:08:31.909
doing things, I'll probably invalidate
a whole bunch of unit tests, right?

142
00:08:31.909 --> 00:08:35.241
I don't know, if you're processing an
order and one of these steps in the order

143
00:08:35.241 --> 00:08:38.423
is to sort things by the distance in your
warehouse or something like that and

144
00:08:38.423 --> 00:08:40.661
you decide that that algorithm
no longer is true, but

145
00:08:40.661 --> 00:08:43.028
instead you wanna apply
a different kind of algorithm.

146
00:08:43.028 --> 00:08:46.598
You're probably gonna invalidate a whole
bunch of tests that have to do with

147
00:08:46.598 --> 00:08:49.683
distance measurements, right,
but that's kind of expected.

148
00:08:49.683 --> 00:08:53.171
So that brings us to a higher level test,
which is the integration test.

149
00:08:53.171 --> 00:08:55.494
An integration test basically says, hey,

150
00:08:55.494 --> 00:08:58.079
can I have a bunch of
related things to together.

151
00:08:58.079 --> 00:09:01.850
So I'm no longer testing one thing,
but whole bunch of things together.

152
00:09:01.850 --> 00:09:07.134
So a order of workflow might be something
like an integration test, right,

153
00:09:07.134 --> 00:09:12.912
where you're saying, if I start with this
workflow, this particular order, and

154
00:09:12.912 --> 00:09:18.627
I go through these steps, I assert that I
have it in stock and I wanna ship it, etc.

155
00:09:18.627 --> 00:09:23.740
The state machine changes in, I should
eventually get to this particular output.

156
00:09:23.740 --> 00:09:28.807
And so there,
it becomes a little more nebulous as to if

157
00:09:28.807 --> 00:09:33.778
things fail, where to look for
the problem, right?

158
00:09:33.778 --> 00:09:38.881
Because who knows which part of the system
has kinda produce this particular issue.

159
00:09:41.379 --> 00:09:45.473
And so integration tests,
though have really nice property,

160
00:09:45.473 --> 00:09:49.655
though that typically they don't
tell you how things are done.

161
00:09:49.655 --> 00:09:53.715
They only say, given this beginning,
I wanna make sure I end up over here.

162
00:09:53.715 --> 00:09:57.548
How exactly you get
there is not my concern.

163
00:09:57.548 --> 00:10:02.116
And so integration tests do actually help
you with refactorings in the sense that if

164
00:10:02.116 --> 00:10:04.270
you wanna change how something works,

165
00:10:04.270 --> 00:10:07.288
integration tests typically
give you a lot of leeway.

166
00:10:07.288 --> 00:10:10.221
So for example, when I work on
my framework, which is QUIC,

167
00:10:10.221 --> 00:10:14.189
there's a lot of integration tests that
basically create a little tiny program,

168
00:10:14.189 --> 00:10:16.219
a little tiny scenario, like a counter.

169
00:10:16.219 --> 00:10:21.809
And the counter has a button that you can
click on that increments the count and

170
00:10:21.809 --> 00:10:25.600
then I assert that the DOM
on the output has updated.

171
00:10:25.600 --> 00:10:30.243
I don't care how it did it internally and
who knows how much code had to execute in

172
00:10:30.243 --> 00:10:32.826
order for
this thing to to actually happen.

173
00:10:32.826 --> 00:10:36.155
All I'm saying is, hey, if I have this
tiny little program that represents

174
00:10:36.155 --> 00:10:39.549
a counter and then I click on a button,
I want the count to increment, right?

175
00:10:39.549 --> 00:10:44.927
That's a good integration test, because it
allows me to refactor how the internals

176
00:10:44.927 --> 00:10:49.715
of the frameworks work without
necessarily forcing anything on the user.

177
00:10:53.495 --> 00:10:56.755
And then, on the other extreme,
we have end-to-end tests.

178
00:10:56.755 --> 00:11:00.879
And the end-to-end test
basically to think about it is,

179
00:11:00.879 --> 00:11:03.497
I am pretending to be a user, right?

180
00:11:03.497 --> 00:11:07.952
So you will probably open
up a real browser and

181
00:11:07.952 --> 00:11:11.236
you will simulate real clicks and

182
00:11:11.236 --> 00:11:16.522
you will go through a whole
testing scenario with it.

183
00:11:16.522 --> 00:11:21.297
And these kinds of tests
are typically slow.

184
00:11:21.297 --> 00:11:23.208
They tend to be flaky.

185
00:11:23.208 --> 00:11:25.561
You might have to mock out databases,
and so

186
00:11:25.561 --> 00:11:28.560
it just gets complicated to
write these kinds of tests.

187
00:11:28.560 --> 00:11:32.433
They're still useful in a different way,
but it gets complicated.

188
00:11:32.433 --> 00:11:35.147
And this is somebody was asking,
well, what about the role of the QA?

189
00:11:35.147 --> 00:11:40.292
This is a perfect place where QA can help,
because they can help with setting up,

190
00:11:40.292 --> 00:11:42.940
whether it is setting up mock databases so

191
00:11:42.940 --> 00:11:46.210
that we have expected set
of orders in there, etc.

192
00:11:46.210 --> 00:11:51.869
Or setting up a test harnesses or
easy way to assert what's happening,

193
00:11:51.869 --> 00:11:56.604
what we call these page objects or
just things of that sort.

