WEBVTT

1
00:00:00.120 --> 00:00:01.802
&gt;&gt; Nina Zakharenko: Going
back to the top here,

2
00:00:01.802 --> 00:00:05.394
remember you have some of these
set operations in a table.

3
00:00:05.394 --> 00:00:11.154
So,
&gt;&gt; Nina Zakharenko: This whole course,

4
00:00:11.154 --> 00:00:15.729
there's a lot of information, and
the way that you'll retain it is just

5
00:00:15.729 --> 00:00:21.130
with muscle memory, typing in the code,
doing examples, sticking with it.

6
00:00:21.130 --> 00:00:24.930
If there's a particular thing that you're
not using frequently, you'll probably have

7
00:00:24.930 --> 00:00:29.010
to look it up, and that's okay,
that's why the course website is here.

8
00:00:31.770 --> 00:00:36.030
I expect nobody to absorb every single
piece of information that I'm gonna

9
00:00:36.030 --> 00:00:36.830
tell you today.

10
00:00:36.830 --> 00:00:40.760
So okay, set cheat sheet.

11
00:00:40.760 --> 00:00:45.660
Sets are used for
storing immutable data types uniquely.

12
00:00:45.660 --> 00:00:52.810
It's easy to,
&gt;&gt; Nina Zakharenko: It's a bit of a typo.

13
00:00:52.810 --> 00:00:59.670
It's easy to find out if an item is in
a set or not, it's a very fast operation.

14
00:01:00.940 --> 00:01:05.700
To create sets, remember,
what kind of data structure do we see if

15
00:01:05.700 --> 00:01:10.610
try to make an empty set with just two
empty squiggly brackets, curly brackets?

16
00:01:10.610 --> 00:01:12.900
&gt;&gt; Student: Dictionary?
&gt;&gt; Nina Zakharenko: Dictionary, right, so

17
00:01:12.900 --> 00:01:15.680
to create an empty set,
use the set method.

18
00:01:17.410 --> 00:01:20.460
And you can use the curly
braces with items separated

19
00:01:20.460 --> 00:01:23.800
by commas to create
a set with items in it.

20
00:01:23.800 --> 00:01:29.650
Search method, check to see if the item
is in the set with the incurred.

21
00:01:29.650 --> 00:01:33.615
Search speed, searching for
an item in a large set is very fast,

22
00:01:33.615 --> 00:01:36.570
cuz it uses that hash that I
showed you under the hood.

23
00:01:38.380 --> 00:01:41.030
Some common set methods Set dot.

24
00:01:41.030 --> 00:01:44.860
My set.add item, my set.discard item,

25
00:01:44.860 --> 00:01:50.760
to remove the item if it's present,
and not throw an error if it's not.

26
00:01:50.760 --> 00:01:54.585
My set.remove item to remove
the item if it's present, but

27
00:01:54.585 --> 00:01:57.590
throw an exception if it's not.

28
00:01:57.590 --> 00:02:00.160
Or my set.update other set.

29
00:02:00.160 --> 00:02:01.600
And remember just like with lists,

30
00:02:01.600 --> 00:02:06.600
you don't want to name your sets set cuz
you'd be overriding a built in type.

31
00:02:08.140 --> 00:02:09.300
Is the order preserved?

32
00:02:10.400 --> 00:02:11.380
&gt;&gt; Student2: No.

33
00:02:11.380 --> 00:02:15.040
&gt;&gt; Nina Zakharenko: Right,
can you access items in a set by index?

34
00:02:15.040 --> 00:02:16.200
No.

35
00:02:16.200 --> 00:02:17.245
Is a set mutable?

36
00:02:17.245 --> 00:02:19.421
&gt;&gt; Student2: Yes.

37
00:02:19.421 --> 00:02:20.260
&gt;&gt; Nina Zakharenko: It is, right?

38
00:02:20.260 --> 00:02:21.954
&gt;&gt; Student2: You said immutable?

39
00:02:21.954 --> 00:02:24.540
&gt;&gt; Nina Zakharenko: Mutable,
is the set mutable?

40
00:02:24.540 --> 00:02:25.750
&gt;&gt; Student3: Yes, it's mutable.

41
00:02:25.750 --> 00:02:28.530
&gt;&gt; Nina Zakharenko: Yes, you can add and
remove items from the set.

42
00:02:30.540 --> 00:02:33.920
Can you sort a set in place?

43
00:02:33.920 --> 00:02:34.640
&gt;&gt; Class: No.

44
00:02:34.640 --> 00:02:37.272
&gt;&gt; Nina Zakharenko: No,
cuz the items are in order right?

45
00:02:39.882 --> 00:02:42.350
&gt;&gt; Nina Zakharenko: What kind
of data structure can you sort?

46
00:02:43.490 --> 00:02:44.240
&gt;&gt; Class: A list.

47
00:02:45.350 --> 00:02:50.840
&gt;&gt; Nina Zakharenko: So
one quick kind of hack here,

48
00:02:50.840 --> 00:02:53.930
if you wanted to sort the items in a set,
and

49
00:02:53.930 --> 00:02:59.240
you know that a list is sortable, what
might you want to do in this situation?

50
00:03:00.380 --> 00:03:02.410
&gt;&gt; Student3: Could you
move the set into a list?

51
00:03:02.410 --> 00:03:06.980
&gt;&gt; Nina Zakharenko: Right,
and we saw this earlier, but

52
00:03:06.980 --> 00:03:14.890
we can call the list
constructor on our set.

53
00:03:14.890 --> 00:03:17.440
And all of a sudden,
we have a copy back, right?

54
00:03:17.440 --> 00:03:20.595
So our original rainbow
color set is still there,

55
00:03:20.595 --> 00:03:23.005
this is just a copy that's now a list.

