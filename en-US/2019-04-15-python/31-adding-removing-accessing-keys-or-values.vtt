WEBVTT

1
00:00:00.180 --> 00:00:04.539
&gt;&gt; Nina Zakharenko: Adding and
removing from dictionaries.

2
00:00:04.539 --> 00:00:06.802
Dictionaries are themselves mutable.

3
00:00:09.769 --> 00:00:11.293
&gt;&gt; Nina Zakharenko: So to add to our

4
00:00:11.293 --> 00:00:16.717
dictionary,
&gt;&gt; Nina Zakharenko: We

5
00:00:16.717 --> 00:00:19.993
put the new key in square brackets.

6
00:00:22.730 --> 00:00:25.295
&gt;&gt; Nina Zakharenko: And
then we use the assignment operation.

7
00:00:34.820 --> 00:00:36.370
&gt;&gt; Nina Zakharenko: I'll
give you a little hint.

8
00:00:39.160 --> 00:00:44.855
What happens if we try to
&gt;&gt; Nina Zakharenko: Do the same thing

9
00:00:44.855 --> 00:00:50.802
with,
&gt;&gt; Nina Zakharenko: With

10
00:00:50.802 --> 00:00:53.680
a key that's already there.

11
00:00:53.680 --> 00:00:59.260
Remember that with sets,
we couldn't have duplicate items?

12
00:00:59.260 --> 00:01:04.060
Do you think we can have duplicate items,
duplicate keys in our dictionary.

13
00:01:06.120 --> 00:01:07.020
We can't, right?

14
00:01:08.070 --> 00:01:10.589
Because of hash, yeah.

15
00:01:10.589 --> 00:01:15.737
And so if I do this,
it just gonna overwrite the value

16
00:01:15.737 --> 00:01:21.181
that was there,
&gt;&gt; Nina Zakharenko: And

17
00:01:21.181 --> 00:01:22.569
discard the old one.

18
00:01:28.940 --> 00:01:31.644
&gt;&gt; Nina Zakharenko: Just
like with sets and lists,

19
00:01:31.644 --> 00:01:37.682
we can quickly see if an item is in
the dictionary with the in keyword.

20
00:01:43.280 --> 00:01:47.830
You can also call .update,
just like we did with a set.

21
00:01:47.830 --> 00:01:53.070
See that kind of sets and dictionaries
are a little bit similar, right?

22
00:01:53.070 --> 00:01:56.340
Kind of think of a set like a, excuse me,

23
00:01:56.340 --> 00:02:00.140
you can kind of think of the keys
in a dictionary like a set, right?

24
00:02:01.180 --> 00:02:04.980
There's no duplicates, or
the duplicates get overwritten.

25
00:02:04.980 --> 00:02:10.610
It's really easy to see if an item is
in a dictionary or not by its key.

26
00:02:12.510 --> 00:02:18.700
So, let's say we had two dictionaries.

27
00:02:18.700 --> 00:02:24.627
Let's say the key is kind of
the letter that the color starts with.

28
00:02:29.901 --> 00:02:34.235
&gt;&gt; Nina Zakharenko: And
then I had a numbers dictionary here.

29
00:02:41.758 --> 00:02:45.039
&gt;&gt; Nina Zakharenko: So colors, numbers.

30
00:02:45.039 --> 00:02:52.690
If I wanted to combine these two
dictionaries together, I can call .update.

31
00:02:52.690 --> 00:02:55.930
And if I take a look at my colors now,
we'll see that,

32
00:02:55.930 --> 00:02:58.170
the key-value pairs are combined.

33
00:02:59.500 --> 00:03:00.440
Just like with lists,

34
00:03:00.440 --> 00:03:05.200
there's nothing stopping you from
mixing the types of the keys.

35
00:03:05.200 --> 00:03:10.984
And if we update from a dictionary
that already has a particular key,

36
00:03:10.984 --> 00:03:13.588
what do you think will happen?

37
00:03:13.588 --> 00:03:15.873
&gt;&gt; [INAUDIBLE].

38
00:03:15.873 --> 00:03:20.827
&gt;&gt; Nina Zakharenko: Yeah.
Yep, one incredibly useful scenario for

39
00:03:20.827 --> 00:03:27.285
dictionaries is storing
the values in a list, right?

40
00:03:27.285 --> 00:03:32.280
We already know that mutable types
can be the dictionary value.

41
00:03:32.280 --> 00:03:36.681
So let's say I have
a dictionary of a color, and

42
00:03:36.681 --> 00:03:42.300
the value is a list of all
the vegetables that are that color.

43
00:03:45.560 --> 00:03:47.844
&gt;&gt; Nina Zakharenko: I can have
as many items in here as I want,

44
00:03:47.844 --> 00:03:50.140
and just kind of going with one example.

45
00:03:51.260 --> 00:03:58.400
Actually, I'm going to rename
this vegetables, okay.

46
00:04:00.450 --> 00:04:05.690
Now I can say, colors,
pass in the key of green.

47
00:04:06.830 --> 00:04:09.470
What's the type of what this returns?

48
00:04:10.770 --> 00:04:12.930
&gt;&gt; Student: List.
&gt;&gt; Nina Zakharenko: It's a list.

49
00:04:12.930 --> 00:04:14.770
What can I do with a list?

50
00:04:14.770 --> 00:04:18.099
Can easily add or
remove items to it, right?

51
00:04:18.099 --> 00:04:23.160
So I'm just, I know well,
let me test my assumption.

52
00:04:23.160 --> 00:04:28.449
So I think that vegetables with
a key of green is gonna be a list.

53
00:04:28.449 --> 00:04:30.720
So let me call type on that, right?

54
00:04:30.720 --> 00:04:34.280
So I'm just verifying that, so

55
00:04:34.280 --> 00:04:40.370
because it's a list I can
call an append on it.

56
00:04:40.370 --> 00:04:41.820
Now if I look at my colors,

57
00:04:41.820 --> 00:04:46.690
we will see that green, the key
green maps to a value that's a list.

58
00:04:46.690 --> 00:04:49.460
And it has spinach in there, apples, etc.

59
00:04:51.840 --> 00:04:54.920
So, and
this is kind of a really common pattern

60
00:04:55.990 --> 00:05:00.660
of storing a list of items
associated to one key.

61
00:05:01.990 --> 00:05:06.370
Now there's three important methods that
you need to remember when working with

62
00:05:06.370 --> 00:05:11.489
dictionaries, because
dictionaries are key-value pairs.

63
00:05:12.570 --> 00:05:19.302
So going back to my dictionary of nums and

64
00:05:19.302 --> 00:05:26.233
let me update to be something less silly.

65
00:05:26.233 --> 00:05:31.633
And then okay,
save my dictionary of numbers,

66
00:05:31.633 --> 00:05:39.870
calling .keys on this will get me back
all of the keys in the dictionary.

67
00:05:41.370 --> 00:05:45.509
Calling .values will
get all of the values.

68
00:05:48.587 --> 00:05:51.275
&gt;&gt; Nina Zakharenko: What we're
usually interested in, not always,

69
00:05:51.275 --> 00:05:53.580
which is why these methods are available.

70
00:05:53.580 --> 00:05:56.340
But usually when we're
looking at a dictionary,

71
00:05:56.340 --> 00:06:00.440
we wanna look at
the key-value pairs together.

72
00:06:00.440 --> 00:06:05.010
Those pairs, the key-value pair,
that's called an item.

73
00:06:05.010 --> 00:06:10.495
So, we know that .keys
gives me back all the keys,

74
00:06:10.495 --> 00:06:13.270
.values gives me back all the values.

75
00:06:13.270 --> 00:06:15.490
If the key value pair is an item,

76
00:06:15.490 --> 00:06:20.031
what method might we wanna call to
get back those key value pairs?

77
00:06:20.031 --> 00:06:21.558
&gt;&gt; Student: Items.

78
00:06:21.558 --> 00:06:25.400
&gt;&gt; Nina Zakharenko: Gold star, nums.items.

79
00:06:25.400 --> 00:06:32.000
And that will return a list of
tuples with the key-value pairs.

80
00:06:32.000 --> 00:06:37.412
And we'll see why this is
a little bit interesting later,

81
00:06:37.412 --> 00:06:41.620
because remember what
we can do with a tuple.

82
00:06:41.620 --> 00:06:43.770
We can easily unpack the values, right.

