WEBVTT

1
00:00:00.190 --> 00:00:04.930
&gt;&gt; Nina Zakharenko: Sets in Python
are a data type that allow you to store

2
00:00:04.930 --> 00:00:07.960
other immutable types in an unsorted way.

3
00:00:09.020 --> 00:00:12.640
And all of the simple objects, or

4
00:00:12.640 --> 00:00:17.150
simple types that we talked about earlier
in the day, those are all immutable.

5
00:00:17.150 --> 00:00:19.010
Strings, numbers, etcetera.

6
00:00:22.099 --> 00:00:25.042
&gt;&gt; Nina Zakharenko: The interesting
thing about an item is that

7
00:00:25.042 --> 00:00:28.690
an item can only be stored in a set once.

8
00:00:28.690 --> 00:00:30.220
There are no duplicates allowed.

9
00:00:31.830 --> 00:00:35.160
And a set doesn't have order to it.

10
00:00:35.160 --> 00:00:38.630
It just kind of has this
collection of items but,

11
00:00:38.630 --> 00:00:41.780
you won't be able to access them by
position, because there is none.

12
00:00:43.700 --> 00:00:49.150
The benefits of a set are very
fast membership testing.

13
00:00:49.150 --> 00:00:54.666
So in a set, it stores the kind

14
00:00:54.666 --> 00:01:00.405
of hashed value of that type and

15
00:01:00.405 --> 00:01:07.050
I won't dive into what hash is but.

16
00:01:08.200 --> 00:01:10.970
To check if an item is
an asset it's a very

17
00:01:10.970 --> 00:01:14.220
very fast operation you don't
have to examine each item and

18
00:01:14.220 --> 00:01:19.000
say are you it, are you it no,
okay next item just very fast membership.

19
00:01:20.050 --> 00:01:24.060
And on sets you can use
powerful set operations for

20
00:01:24.060 --> 00:01:29.250
those of you who have a math background
like union difference intersection.

21
00:01:29.250 --> 00:01:32.710
If you don't have a math background
it's okay, I'll explain what those mean.

22
00:01:34.850 --> 00:01:39.169
So looking at sets,
let's create our first few sets.

23
00:01:43.510 --> 00:01:47.090
There's something important to note here.

24
00:01:47.090 --> 00:01:49.980
I'll talk about dictionaries next.

25
00:01:49.980 --> 00:01:54.470
But, you think we might make

26
00:01:54.470 --> 00:01:59.009
an empty set with two curly brackets
if that's how sets are defined?

27
00:02:00.470 --> 00:02:02.210
What is the type of this?

28
00:02:05.900 --> 00:02:08.440
It's a dictionary, yeah.

29
00:02:08.440 --> 00:02:12.730
So curly braces are used by sets,
and by dictionaries.

30
00:02:14.330 --> 00:02:18.540
If you want to make an empty set,
you have to be explicit about it,

31
00:02:18.540 --> 00:02:20.050
and you have to call the set type.

32
00:02:21.640 --> 00:02:28.084
As soon as you start adding items to it,
&gt;&gt; Nina Zakharenko: You're good to go,

33
00:02:28.084 --> 00:02:32.875
but just the empty set needs
to be created by calling set.

34
00:02:39.405 --> 00:02:43.555
&gt;&gt; Nina Zakharenko: And If you feel like
you're having a hard time remembering some

35
00:02:43.555 --> 00:02:48.360
of the quirks, don't forget you
always have type available.

36
00:02:48.360 --> 00:02:50.710
So you can test your assumptions.

37
00:02:50.710 --> 00:02:54.150
The REPL isn't just something for
beginners or for

38
00:02:54.150 --> 00:02:59.310
learning, even as a experienced Python
programmer with many years of experience,

39
00:02:59.310 --> 00:03:01.200
I use the REPL everyday.

40
00:03:01.200 --> 00:03:05.670
All the time to test my assumptions,
to test out little bits of code.

41
00:03:06.670 --> 00:03:11.646
As you progress in Python,
there are other types of REPLs available

42
00:03:11.646 --> 00:03:16.850
that have syntax highlighting and
fancier stuff like copy and paste and

43
00:03:20.770 --> 00:03:26.372
there's even one that kind
of uses this library called

44
00:03:26.372 --> 00:03:31.970
causes to make a terminal GUI for
your Python REPL.

45
00:03:31.970 --> 00:03:34.980
So this is just kinda the most basic one.

46
00:03:34.980 --> 00:03:36.664
You can upgrade when you feel like it.

47
00:03:36.664 --> 00:03:40.890
But the REPL is just a super powerful
tool for Python programmers,

48
00:03:40.890 --> 00:03:44.110
so don't forget to use
type if you're unsure.

49
00:03:46.448 --> 00:03:53.529
Okay, so sets with items in them,
let's say I have a list of names.

50
00:03:58.770 --> 00:04:01.920
&gt;&gt; Nina Zakharenko: Sets
can contain duplicates.

51
00:04:01.920 --> 00:04:03.979
So what would my name set look like?

52
00:04:08.980 --> 00:04:10.760
&gt;&gt; Nina Zakharenko: How
many items will I have?

53
00:04:10.760 --> 00:04:11.939
Two items, yeah.

54
00:04:15.240 --> 00:04:17.410
&gt;&gt; Nina Zakharenko: The duplicate
value is just ignored.

55
00:04:20.630 --> 00:04:22.830
&gt;&gt; Nina Zakharenko: We can
check the length of our names.

56
00:04:28.471 --> 00:04:31.462
&gt;&gt; Nina Zakharenko: Sets
can't contain mutable data

57
00:04:31.462 --> 00:04:34.359
types
&gt;&gt; Nina Zakharenko: The way that they

58
00:04:34.359 --> 00:04:38.695
allow you to quickly check if
an item that is contained in it or

59
00:04:38.695 --> 00:04:41.516
not is with an algorithm called a hash.

60
00:04:41.516 --> 00:04:47.730
And there's a built-in
hash function in Python.

61
00:04:47.730 --> 00:04:50.950
Generally, you're not really
gonna call it manually.

62
00:04:50.950 --> 00:04:56.610
But we can call it just kind of to see
what the hash of an item might be.

63
00:05:02.009 --> 00:05:07.830
&gt;&gt; Nina Zakharenko: Okay, so if I check
the hash of a string, we see a number.

64
00:05:07.830 --> 00:05:11.100
Doesn't really matter what it is or
what the algorithm is.

65
00:05:11.100 --> 00:05:12.300
It's there.

66
00:05:13.740 --> 00:05:16.539
&gt;&gt; Nina Zakharenko: What happens if
you try to get the hash off a list?

67
00:05:19.771 --> 00:05:22.660
&gt;&gt; Student: [INAUDIBLE]
will come up with an error.

68
00:05:22.660 --> 00:05:24.360
&gt;&gt; Nina Zakharenko: Yeah, what error?

69
00:05:24.360 --> 00:05:25.467
&gt;&gt; Student: TypeError.

70
00:05:25.467 --> 00:05:29.790
&gt;&gt; Nina Zakharenko: The
TypeError Unhashable type list..

71
00:05:29.790 --> 00:05:35.430
This is maybe one of those errors that
could be a little bit clearer but

72
00:05:35.430 --> 00:05:39.320
now that you know what a hash is
you know what unhashable is right?

73
00:05:39.320 --> 00:05:39.990
Can't hash it.

74
00:05:41.200 --> 00:05:45.119
So if I try to put a list in my set,

75
00:05:45.119 --> 00:05:53.680
I'm gonna see that same error
unhashable type list, right?

76
00:05:53.680 --> 00:05:55.950
Can only put immutable items in your set.

77
00:06:03.365 --> 00:06:04.630
&gt;&gt; Nina Zakharenko: Okay.

78
00:06:04.630 --> 00:06:09.880
Because sets can't have
duplicate items in them,

79
00:06:09.880 --> 00:06:15.340
it's a quick way of de-duplicating a list.

80
00:06:15.340 --> 00:06:19.122
So if I had a list of names and

81
00:06:19.122 --> 00:06:23.241
it has some duplicates in it.

82
00:06:24.320 --> 00:06:26.640
&gt;&gt; Nina Zakharenko: And
I quickly wanted to see,

83
00:06:26.640 --> 00:06:29.840
what are the unique items in this list?

84
00:06:32.720 --> 00:06:38.240
I showed you I can create an empty
set with a despite calling set right.

85
00:06:38.240 --> 00:06:43.280
But I can also pass in a list
into the set creation or

86
00:06:43.280 --> 00:06:46.910
a tuple or
other kind of container data types,

87
00:06:46.910 --> 00:06:50.280
and I'm that's gonna return a set
without the duplicates in there.

88
00:06:51.620 --> 00:06:55.320
&gt;&gt; Student: What if one of
the duplicates had different casing,-

89
00:06:55.320 --> 00:06:56.050
&gt;&gt; Nina Zakharenko: Then it's not

90
00:06:56.050 --> 00:06:57.430
a duplicate, it's different, yeah.

91
00:06:58.530 --> 00:07:01.160
Sets have a length and sets are mutable.

92
00:07:01.160 --> 00:07:03.870
We can add to them and remove from them.

93
00:07:03.870 --> 00:07:07.490
I'll show you that in an order,
in a minute, excuse me.

94
00:07:08.720 --> 00:07:10.740
But sets don't have an order.

95
00:07:11.990 --> 00:07:15.600
That means that when you print
them out the items in them

96
00:07:15.600 --> 00:07:19.650
aren't necessarily going to be displayed
in the order that they were entered.

97
00:07:21.240 --> 00:07:24.330
So I can say my set is 1.

98
00:07:24.330 --> 00:07:29.680
And again, just like less
contain whatever types I want.

99
00:07:33.660 --> 00:07:37.200
&gt;&gt; Nina Zakharenko: If I look at my set or
the representation of it.

100
00:07:37.200 --> 00:07:38.594
You know, there's no order.

101
00:07:38.594 --> 00:07:42.670
Things aren't necessarily printed out in
the same way that they are represented.

102
00:07:44.650 --> 00:07:45.410
Right?

103
00:07:45.410 --> 00:07:49.950
It's just not what a set is good at.

104
00:07:49.950 --> 00:07:53.860
What do you think will happen,
and by what do you think, I mean.

105
00:07:53.860 --> 00:07:58.950
What do you think, when you type it in and
you see that, what if I tried to access

106
00:07:58.950 --> 00:08:04.666
my set by position, by index, sets don't
have an order, what's gonna happen?

107
00:08:04.666 --> 00:08:10.750
&gt;&gt; [INAUDIBLE]
&gt;&gt; Nina Zakharenko: Yeah, type error.

108
00:08:10.750 --> 00:08:14.280
Set object does not support indexing,
right?

109
00:08:14.280 --> 00:08:15.680
Makes sense, there's no position.

