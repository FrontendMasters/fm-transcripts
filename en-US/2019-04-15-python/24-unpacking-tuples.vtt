WEBVTT

1
00:00:00.140 --> 00:00:02.940
&gt;&gt; Nina Zakharenko: Tuples
are also a great way to quickly

2
00:00:02.940 --> 00:00:07.190
consolidate information because of
something called tuple unpacking.

3
00:00:08.660 --> 00:00:14.846
So looking back at our student, we have
a name, an age, a subject, and a GPA.

4
00:00:17.262 --> 00:00:21.813
&gt;&gt; Nina Zakharenko: We can unpack this by
declaring variable names on the left side

5
00:00:21.813 --> 00:00:24.040
of the expression.

6
00:00:24.040 --> 00:00:29.700
And matching them up with
the number of items in the tuple.

7
00:00:29.700 --> 00:00:31.850
And separating them with a comma.

8
00:00:31.850 --> 00:00:35.370
Second say, name, comma,
age, comma, subject,

9
00:00:38.750 --> 00:00:41.400
comma, gpa, equals student.

10
00:00:43.810 --> 00:00:44.996
It looks a little weird, right?

11
00:00:47.516 --> 00:00:52.108
&gt;&gt; Nina Zakharenko: But now, all of
a sudden, my variable name is filled in,

12
00:00:52.108 --> 00:00:56.430
age is filled in,
subject filled in, gpa filled in.

13
00:00:57.940 --> 00:00:59.300
Super easy, right?

14
00:00:59.300 --> 00:01:01.366
If this was a row in a spreadsheet,

15
00:01:01.366 --> 00:01:04.226
I could just pull out
the values super quickly.

16
00:01:12.254 --> 00:01:14.357
&gt;&gt; Nina Zakharenko: As we're
first starting out, and

17
00:01:14.357 --> 00:01:18.210
this is not a syntax rule in Python,
there's a way of doing it.

18
00:01:18.210 --> 00:01:22.750
But generally,
we want the number of variables that we

19
00:01:22.750 --> 00:01:26.450
declare to match up to the number
of items in the tuple.

20
00:01:26.450 --> 00:01:31.350
If you don't believe,
you will see an error.

21
00:01:31.350 --> 00:01:33.450
Let me double check that.

22
00:01:35.530 --> 00:01:39.661
Right, yeah, you'll see a ValueError,
too many values to unpack.

23
00:01:44.890 --> 00:01:49.480
&gt;&gt; Nina Zakharenko: If we don't care about
saving one of the values as a variable we

24
00:01:49.480 --> 00:01:51.350
can use the underscore.

25
00:01:52.400 --> 00:01:56.870
So let's say, I just want a name,
age and the subject.

26
00:01:56.870 --> 00:02:02.390
And I don't care about Marcy's GPA,
I can use the shorthand underscore.

27
00:02:04.320 --> 00:02:08.536
And if I sign that to student my name,
age and subject will be set.

28
00:02:08.536 --> 00:02:12.560
But this is just, it means throw away
this value, I don't really care.

29
00:02:14.340 --> 00:02:18.166
I know this is super weird, but you'll
probably see it in Python code out in

30
00:02:18.166 --> 00:02:20.619
the wild, and
then you'll know what it means.

31
00:02:26.915 --> 00:02:31.210
&gt;&gt; Nina Zakharenko: You can return tuples
from functions and use on packing.

32
00:02:32.290 --> 00:02:33.560
Let's see that very quickly.

33
00:02:37.680 --> 00:02:41.460
And before moving on, so

34
00:02:41.460 --> 00:02:45.880
I told you that parenthesis mean the tuple
but that's not entirely true right?

35
00:02:45.880 --> 00:02:46.900
It's actually the comma.

36
00:02:47.990 --> 00:02:52.054
I can also declare my tuple like this,

37
00:02:52.054 --> 00:02:55.880
without the parentheses, right?

38
00:02:55.880 --> 00:02:59.560
Cuz it's the comma that
makes a difference.

39
00:02:59.560 --> 00:03:04.945
Let's say, I had a method to
get back an HTTPS status code.

40
00:03:07.572 --> 00:03:12.422
&gt;&gt; Nina Zakharenko: I can return two
values, 200, which is the status code,

41
00:03:12.422 --> 00:03:14.620
and OK, which is the name.

42
00:03:16.510 --> 00:03:18.140
What type will this return?

43
00:03:18.140 --> 00:03:21.750
It will return tuple, right?

44
00:03:21.750 --> 00:03:28.602
Why, because of the commas,

45
00:03:28.602 --> 00:03:31.620
there we go.

46
00:03:31.620 --> 00:03:34.850
Now, I can use tuple unpacking.

47
00:03:34.850 --> 00:03:37.830
If I know that this
function returns a tuple,

48
00:03:37.830 --> 00:03:43.210
I can use tuple unpacking to quickly
get the values out as named variables.

49
00:03:43.210 --> 00:03:47.513
So I can say that the code and

50
00:03:47.513 --> 00:03:52.959
the name = http_status_code.

51
00:03:52.959 --> 00:03:59.543
And that code will be 200,
name will be okay.

52
00:03:59.543 --> 00:04:02.864
So, think tuples worth their while now?

53
00:04:02.864 --> 00:04:03.376
&gt;&gt; Class: Yeah.

54
00:04:03.376 --> 00:04:03.876
&gt;&gt; Nina Zakharenko: Yeah.

