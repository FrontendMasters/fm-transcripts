WEBVTT

1
00:00:00.260 --> 00:00:03.050
&gt;&gt; Nina Zakharenko: In Python,
you can do comparisons.

2
00:00:03.050 --> 00:00:07.390
You can compare items of the same type.

3
00:00:07.390 --> 00:00:11.929
Someone in chat asked about comparing
items of different types for

4
00:00:11.929 --> 00:00:13.153
the built-ins.

5
00:00:13.153 --> 00:00:15.880
That doesn't necessarily make sense.

6
00:00:15.880 --> 00:00:19.690
I'm not sure I can think of a case
where I would find that useful.

7
00:00:19.690 --> 00:00:24.224
Once you kind of graduate and
move on to writing your own

8
00:00:24.224 --> 00:00:29.451
advanced Python programs,
you can create your own objects and

9
00:00:29.451 --> 00:00:35.020
define how you want them to
be compared with each other.

10
00:00:35.020 --> 00:00:41.129
But you can't compare different types in
Python 3, it just doesn't make sense.

11
00:00:42.700 --> 00:00:49.200
Okay, so for our comparisons,
we have a less than operator,

12
00:00:49.200 --> 00:00:54.360
a greater than operator, so
just kinda like your simple math.

13
00:00:54.360 --> 00:00:59.769
We have a less than or equals and

14
00:00:59.769 --> 00:01:04.360
a greater than or equals.

15
00:01:04.360 --> 00:01:08.930
And so these comparisons themselves,
they return a true or a false value.

16
00:01:11.362 --> 00:01:15.298
&gt;&gt; Nina Zakharenko: There's a little bit
of weirdness when you try to compare

17
00:01:15.298 --> 00:01:16.041
strings.

18
00:01:16.041 --> 00:01:20.140
The string comparison,
they're compared lexicographically.

19
00:01:20.140 --> 00:01:25.392
That means by the ASCII value, the
underlying ASCII value of the character.

20
00:01:29.906 --> 00:01:32.966
&gt;&gt; Nina Zakharenko: You don't really need
to know much about ASCII besides for

21
00:01:32.966 --> 00:01:36.220
capital letters come
before lower case ones.

22
00:01:36.220 --> 00:01:38.830
So you'll just have to remember
that in your sort order.

23
00:01:40.320 --> 00:01:41.960
When you try to compare two strings,

24
00:01:41.960 --> 00:01:45.570
each character is checked one by
one until a difference is found.

25
00:01:45.570 --> 00:01:47.160
And then, that difference is returned.

26
00:01:48.820 --> 00:01:51.490
And that kind of determines
the order under the hood.

27
00:01:51.490 --> 00:01:56.676
So just remember that uppercase

28
00:01:56.676 --> 00:02:02.826
letters are lower-valued in ASCII.

29
00:02:02.826 --> 00:02:07.331
Okay, so is "t" &lt; "T", it's not.

30
00:02:07.331 --> 00:02:12.299
Just something to be aware of,
but then once you get past

31
00:02:12.299 --> 00:02:17.490
the lowercase uppercase,
things kind of work as expected

32
00:02:21.816 --> 00:02:24.892
&gt;&gt; Nina Zakharenko: Okay, so equality.

33
00:02:24.892 --> 00:02:29.630
Equality is do the values and these two,

34
00:02:31.570 --> 00:02:36.480
do these two values have
the same values within them?

35
00:02:36.480 --> 00:02:43.350
So for an integer, that's pretty simple,
right, is one equal to one?

36
00:02:43.350 --> 00:02:44.220
Yes, it is.

37
00:02:44.220 --> 00:02:47.440
Is this string equal to this one?

38
00:02:47.440 --> 00:02:48.683
Yes, it is.

39
00:02:48.683 --> 00:02:54.202
It gets a little bit more complicated
when you're looking at more advanced

40
00:02:54.202 --> 00:02:59.473
container types, right, so
these things are not equal to each other.

41
00:03:01.586 --> 00:03:03.924
&gt;&gt; Nina Zakharenko: But these are.

42
00:03:03.924 --> 00:03:10.540
If you have two variables that
you kinda created independently.

43
00:03:12.080 --> 00:03:14.660
You can check and
see if they're equal to each other.

44
00:03:16.400 --> 00:03:19.610
And then,
not equal is just the inverse of that.

45
00:03:19.610 --> 00:03:24.040
And you do that with a !=.

46
00:03:25.130 --> 00:03:30.880
So this will be false because a and
b do in fact contain equal values.

47
00:03:37.008 --> 00:03:42.078
&gt;&gt; Nina Zakharenko: Okay,
someone mentioned earlier, they saw that

48
00:03:42.078 --> 00:03:47.400
I used the is keyword to
check if something was none.

49
00:03:48.590 --> 00:03:52.390
And so is means identity.

50
00:03:52.390 --> 00:03:57.260
And it kind of frequently trips up Python
beginners, so you wanna make sure that

51
00:03:57.260 --> 00:04:03.870
equality, is double equals,
and not equals.

52
00:04:03.870 --> 00:04:07.494
And then identity is the is keyword.

53
00:04:09.768 --> 00:04:14.168
&gt;&gt; Nina Zakharenko: As a beginner,
besides for comparing non-true or false,

54
00:04:14.168 --> 00:04:17.310
kind of those built in singletons.

55
00:04:17.310 --> 00:04:20.427
You're not gonna be using
the is keyword very often.

56
00:04:20.427 --> 00:04:25.428
Because that QR test if the two
compared objects are stored at

57
00:04:25.428 --> 00:04:30.341
the same memory location,
if they point to the same thing.

58
00:04:30.341 --> 00:04:34.210
I'm not gonna go into too
much detail why about this.

59
00:04:35.230 --> 00:04:38.125
Just remember to use.

60
00:04:40.915 --> 00:04:42.550
&gt;&gt; Nina Zakharenko: Let's say x = None.

61
00:04:43.630 --> 00:04:47.560
Checking for the is keyword when trying

62
00:04:49.210 --> 00:04:53.640
to find out is this variable True,
False, None.

63
00:04:55.480 --> 00:05:03.350
If we look at our list again,
I created them in two separate instances.

64
00:05:03.350 --> 00:05:06.199
If I ask, a is b.

65
00:05:06.199 --> 00:05:09.130
I know a is equal to b, there is equality.

66
00:05:09.130 --> 00:05:12.550
If I ask, a is b,
what do you think I'll get?

67
00:05:12.550 --> 00:05:13.760
&gt;&gt; Class: False.

68
00:05:13.760 --> 00:05:17.620
&gt;&gt; Nina Zakharenko: False, they're not
stored at the same memory location,

69
00:05:17.620 --> 00:05:20.440
even though they are equal to each other.

70
00:05:20.440 --> 00:05:22.920
So just an important
distinction to remember.

71
00:05:25.110 --> 00:05:32.070
And there's also the not modifier.

72
00:05:32.070 --> 00:05:37.437
So if I'm checking if, let's see.

73
00:05:37.437 --> 00:05:39.160
Let's say, a = None.

74
00:05:40.850 --> 00:05:46.780
If I want to know if a = None,
I can check that.

75
00:05:46.780 --> 00:05:51.740
If I want the opposite of this, remember
with equality it was the exclamation point

76
00:05:51.740 --> 00:05:56.870
and equals, so the not of is, is not.

77
00:05:59.000 --> 00:06:05.344
a is not None, well, that's False because
it's None, so just remember this order.

78
00:06:05.344 --> 00:06:08.127
The good thing I like about Python
is it's really readable and

79
00:06:08.127 --> 00:06:09.850
almost sounds like English, right?

