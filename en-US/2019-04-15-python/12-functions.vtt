WEBVTT

1
00:00:00.120 --> 00:00:01.220
&gt;&gt; Nina Zakharenko: Okay, so

2
00:00:01.220 --> 00:00:05.930
covered all the basic data types,
now let's talk about functions.

3
00:00:05.930 --> 00:00:09.150
And again, I'm just putting the comments
in here to make it easier for

4
00:00:09.150 --> 00:00:13.160
you guys to read you don't have
to put them into your own code.

5
00:00:14.800 --> 00:00:18.720
Functions help us organize our
code in a way that's reusable and

6
00:00:18.720 --> 00:00:22.504
accepts arguments and
even provides defaults where needed.

7
00:00:26.194 --> 00:00:28.616
&gt;&gt; Nina Zakharenko: And
the purpose of these functions,

8
00:00:28.616 --> 00:00:31.500
it's to make our code reusable, right?

9
00:00:31.500 --> 00:00:35.300
So if we find ourselves copying and
pasting the same thing, the same code

10
00:00:35.300 --> 00:00:40.140
multiple times all over a place, that's a
good sign that a function might help you.

11
00:00:42.280 --> 00:00:46.330
Very quickly, the anatomy of a function,
this is the recipe for

12
00:00:46.330 --> 00:00:48.550
defining a Python function.

13
00:00:48.550 --> 00:00:51.240
We always start the function
with the keyword def,

14
00:00:51.240 --> 00:00:56.620
followed by a space, that tells Python
that we're starting a function definition.

15
00:00:57.880 --> 00:00:59.620
Then we come up with a name for

16
00:00:59.620 --> 00:01:04.080
the function, so this isn't a good name
but for now let's just call it fool.

17
00:01:05.620 --> 00:01:11.740
Then we always need
the opening parenthesis and

18
00:01:11.740 --> 00:01:15.770
optionally we can type in
some arguments here or

19
00:01:15.770 --> 00:01:19.700
if our function does not accept arguments
we type in the closing parenthesis.

20
00:01:22.547 --> 00:01:26.110
&gt;&gt; Nina Zakharenko: If it had arguments,
we would separate those with a comma.

21
00:01:27.380 --> 00:01:33.870
Okay, lastly, a colon,
that's our recipe for a function.

22
00:01:33.870 --> 00:01:36.480
Now, if we press Enter in the REPL,

23
00:01:36.480 --> 00:01:40.500
we'll see these three dots again,
it's waiting for more input.

24
00:01:43.240 --> 00:01:47.350
Now for those of you who've come from
other languages, let's say JavaScript,

25
00:01:48.380 --> 00:01:52.230
what did you not see in
the function definition?

26
00:01:52.230 --> 00:01:53.540
&gt;&gt; Class: Brackets.

27
00:01:53.540 --> 00:01:55.950
&gt;&gt; Nina Zakharenko: Brackets,
gold star, exactly right

28
00:01:57.100 --> 00:02:01.300
Python doesn't use brackets
to differentiate between

29
00:02:03.190 --> 00:02:07.080
the scope of what belongs to
a function and what doesn't.

30
00:02:07.080 --> 00:02:11.620
In Python instead we indicate
that with indentation,

31
00:02:13.210 --> 00:02:17.050
so, important concept you'll see again and
again.

32
00:02:17.050 --> 00:02:22.080
But to put in the contents of
our function, we can just press

33
00:02:22.080 --> 00:02:27.460
tab to insert one level of indentation.

34
00:02:27.460 --> 00:02:28.390
What's that?

35
00:02:28.390 --> 00:02:30.200
&gt;&gt; Class: Type eight I think just spaces.

36
00:02:30.200 --> 00:02:31.060
&gt;&gt; Nina Zakharenko: Yes, so

37
00:02:31.060 --> 00:02:35.220
in the REPL you can hit tab to just
kind of quickly type things in.

38
00:02:35.220 --> 00:02:40.430
In your Python files,
I recommend using spaces,

39
00:02:40.430 --> 00:02:45.630
so when you use an ID, if you hit
tab while you're typing your Python

40
00:02:45.630 --> 00:02:50.510
code, it'll just convert it
into spaces under the hood, so.

41
00:02:51.930 --> 00:02:56.775
And to verify that,
if you look at the blue bar down here,

42
00:02:56.775 --> 00:03:01.660
you'll see mine says,
spaces 4, if yours says tab,

43
00:03:01.660 --> 00:03:05.220
you might wanna change that but
not a big deal right now.

44
00:03:05.220 --> 00:03:08.424
Okay, so we're in the REPL we hit tab and

45
00:03:08.424 --> 00:03:13.110
now we're gonna have to use
that print function, right?

46
00:03:13.110 --> 00:03:21.540
Because when we call our function in
the REPL if it doesn't do anything,

47
00:03:21.540 --> 00:03:24.600
if it just declares some variables,
we're not gonna see any output.

48
00:03:25.910 --> 00:03:30.003
So let's use print and print out hello.

49
00:03:39.513 --> 00:03:41.320
&gt;&gt; Nina Zakharenko: And
let's press Enter again.

50
00:03:41.320 --> 00:03:46.439
And you'll see here that
Python is still in this,

51
00:03:46.439 --> 00:03:50.840
or the Python REPL is still in this dot,
dot, dot mode it's still waiting for

52
00:03:50.840 --> 00:03:56.010
more input, that's because we can
type in more stuff to our function.

53
00:03:56.010 --> 00:03:58.980
When we decide that we're done with it,
in the REPL,

54
00:03:58.980 --> 00:04:04.240
we'll want to hit Enter an extra time
until we see these three brackets again,

55
00:04:04.240 --> 00:04:06.510
saying that our prompt is ready for input.

56
00:04:08.100 --> 00:04:11.730
To call our function we
type the name of it,

57
00:04:11.730 --> 00:04:14.540
if it accepts arguments
we'd wanna pass those in,

58
00:04:14.540 --> 00:04:20.330
if it doesn't like in the case of fool,
we can just pass in empty parentheses.

59
00:04:20.330 --> 00:04:25.632
And when i call that function i see
my result result hello, cool right?

60
00:04:25.632 --> 00:04:32.080
Okay so,
functions can accept no arguments,

61
00:04:32.080 --> 00:04:36.630
in this case the function
also returns nothing.

62
00:04:36.630 --> 00:04:45.001
The print statement, it just does
something that displays text, right?

63
00:04:45.001 --> 00:04:50.099
But in our production code lets
say we probably don't have

64
00:04:50.099 --> 00:04:54.989
print statements littered
all over the place, right,

65
00:04:54.989 --> 00:05:01.080
we know what the code does and so
we want function to return a value.

66
00:05:01.080 --> 00:05:06.728
So let's make new function and
call it, meaning of life,

67
00:05:06.728 --> 00:05:11.588
and it's just two empty parenthesis and
a colon.

68
00:05:11.588 --> 00:05:18.331
And our function is gonna return a value
42, press enter and enter again.

69
00:05:22.418 --> 00:05:25.916
&gt;&gt; Nina Zakharenko: Now we can
call the meaning of life function,

70
00:05:25.916 --> 00:05:29.747
and we'll see our returned value 42.

71
00:05:29.747 --> 00:05:34.619
&gt;&gt; Nina Zakharenko: Just to be
very clear on the distinction,

72
00:05:34.619 --> 00:05:40.746
I'm gonna make a new variable
that says call fool and

73
00:05:40.746 --> 00:05:46.470
I'm gonna assign the value
of calling foo to it.

74
00:05:48.320 --> 00:05:51.709
If I checked what the value
of that variable is,

75
00:05:51.709 --> 00:05:56.300
we'll see that there’s nothing there,
a non-type, right?

76
00:05:56.300 --> 00:05:59.445
This function prints something out and
does something but

77
00:05:59.445 --> 00:06:00.936
does not return anything.

78
00:06:00.936 --> 00:06:08.324
If I set the result of calling,
the meaning of life function,

79
00:06:08.324 --> 00:06:13.879
to the variable x,
what will the value of x be?

80
00:06:16.600 --> 00:06:17.480
&gt;&gt; Nina Zakharenko: 42.

81
00:06:17.480 --> 00:06:19.360
&gt;&gt; Class: 42.

82
00:06:22.230 --> 00:06:26.049
&gt;&gt; Nina Zakharenko: Cool,
whether your function returns arguments or

83
00:06:26.049 --> 00:06:29.050
not depends on what it does, right?

84
00:06:29.050 --> 00:06:32.760
Not all functions need to return anything,
it's optional.

85
00:06:33.930 --> 00:06:39.330
Our functions can also accept arguments,
so

86
00:06:39.330 --> 00:06:42.059
let's say I had a function
called add numbers.

87
00:06:43.700 --> 00:06:48.310
After my empty parenthesis, I'm gonna
put in the variable that I expect, so

88
00:06:48.310 --> 00:06:50.360
I'm gonna expect two numbers, x, and y.

89
00:06:50.360 --> 00:06:55.270
I'm gonna separate them with a comma,
put in my closing parenthesis,

90
00:06:55.270 --> 00:06:57.050
and then put in the colon.

91
00:06:59.340 --> 00:07:02.595
That means that no matter what
my function gets called in,

92
00:07:02.595 --> 00:07:09.260
within the scope of my function,
those variables will be called x and y.

93
00:07:10.830 --> 00:07:17.114
So I hit enter for new line, I hit tab and
then I'm gonna return x + y.

94
00:07:24.652 --> 00:07:29.590
&gt;&gt; Nina Zakharenko: Now I can call
this function with any numbers and

95
00:07:29.590 --> 00:07:34.700
it will return the result of adding them.

96
00:07:34.700 --> 00:07:40.300
I can also set variables here
with some numbers in them,

97
00:07:40.300 --> 00:07:45.696
say a and b, I can call my
add_numbers function with a and b.

98
00:07:45.696 --> 00:07:50.670
But remember, add_numbers doesn't
know anything about a and

99
00:07:50.670 --> 00:07:52.670
b, and it doesn't care, right?

100
00:07:52.670 --> 00:07:57.170
Add_numbers only knows about two arguments
and within the scope of the function,

101
00:07:57.170 --> 00:07:58.600
they're gonna be called x and y.

102
00:08:04.120 --> 00:08:09.684
&gt;&gt; Nina Zakharenko: Now, if we forget this
recipe for trying to define a function

103
00:08:09.684 --> 00:08:15.490
in Python, Python's gonna help
us out with the syntax error.

104
00:08:15.490 --> 00:08:21.570
So let's try to create some functions,
I'm gonna call this one, oops,

105
00:08:23.040 --> 00:08:28.260
and if I forget the colon and
press enter syntax error,

106
00:08:29.710 --> 00:08:38.530
invalid syntax with a helpful arrow
pointing to the end of oops, okay?

107
00:08:38.530 --> 00:08:45.309
If I forget, my parenthesis syntax error,
invalid syntax, right?

108
00:08:47.030 --> 00:08:49.050
Makes sense,
we're not following the recipe.

109
00:08:53.520 --> 00:08:57.727
&gt;&gt; Nina Zakharenko: The recipe for our
function contents, so we have a new line,

110
00:08:57.727 --> 00:09:01.192
we have an indentation, and
then we can have one or

111
00:09:01.192 --> 00:09:06.760
more lines in there, right, so
we've seen some simple functions.

112
00:09:06.760 --> 00:09:11.070
But let's make a new one called greeting.

113
00:09:12.626 --> 00:09:15.150
&gt;&gt; Nina Zakharenko: And
our greeting will take a name.

114
00:09:18.241 --> 00:09:21.597
&gt;&gt; Nina Zakharenko: You can also define
a new variable within the scope of

115
00:09:21.597 --> 00:09:22.670
this function.

116
00:09:27.010 --> 00:09:31.246
&gt;&gt; Nina Zakharenko: And I'm gonna make
my greeting, hello, but you can make it

117
00:09:31.246 --> 00:09:36.610
whatever you want and then we're gonna
return the greeting plus the name.

118
00:09:38.510 --> 00:09:44.052
So to add more content to the function,
remember you always need to indent,

119
00:09:44.052 --> 00:09:49.347
everything that is indented one level
under the function belongs to it.

120
00:09:49.347 --> 00:09:54.183
Press enter twice call greeting
with Nina and it'll return,

121
00:09:54.183 --> 00:09:58.926
hello Nina, remember that return
statement is optional and

122
00:09:58.926 --> 00:10:03.681
if you don't provide one,
the function just returns none.

123
00:10:05.730 --> 00:10:10.303
&gt;&gt; Nina Zakharenko: You can also kind of
very occasionally, you can use a return

124
00:10:10.303 --> 00:10:14.970
statement that has no value,
so you'll see that in kind of,

125
00:10:14.970 --> 00:10:20.860
when we talk about control flow
you'll see that a little bit more.

126
00:10:20.860 --> 00:10:25.698
But let's say I have a function fool here,
and

127
00:10:25.698 --> 00:10:31.663
I set x equal to 5 and
I type return with no value, right?

128
00:10:31.663 --> 00:10:38.767
It's still valid Python syntax, but
if I call let's say x is equal to fool,

129
00:10:38.767 --> 00:10:43.430
if I check the type of x,
it's gonna be NoneType.

130
00:10:48.004 --> 00:10:51.968
&gt;&gt; Nina Zakharenko: This return statement
will return from anywhere within

131
00:10:51.968 --> 00:10:55.847
the function In the REPL you
don't get helpful hints,

132
00:10:55.847 --> 00:10:59.240
like you do when typing
a Python file in the IDE.

133
00:11:00.610 --> 00:11:05.410
In the IDE if you put anything
after the return statement and

134
00:11:05.410 --> 00:11:10.110
you've installed the linter like we did
in the beginning, you'll see an error

135
00:11:10.110 --> 00:11:15.340
about unreachable code or not an error,
but a warning about unreachable code.

136
00:11:15.340 --> 00:11:18.597
So, if there's no control
flow to your program,

137
00:11:18.597 --> 00:11:21.321
everything after the return is ignored.

