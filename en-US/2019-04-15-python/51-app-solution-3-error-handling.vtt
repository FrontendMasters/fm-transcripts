WEBVTT

1
00:00:00.250 --> 00:00:03.690
&gt;&gt; Nina Zakharenko: Another
important thing to do is to

2
00:00:03.690 --> 00:00:06.950
check the status code that
we got back from our API.

3
00:00:06.950 --> 00:00:09.540
If it wasn't actually 200,

4
00:00:09.540 --> 00:00:13.830
then we're not gonna have
a response.json with the items in it.

5
00:00:13.830 --> 00:00:15.820
We're gonna have an error in it instead.

6
00:00:16.910 --> 00:00:19.800
So we just wanna do a little
bit of checking here.

7
00:00:21.550 --> 00:00:29.490
And we're gonna say,
if the status code is not equal to 200,

8
00:00:29.490 --> 00:00:34.410
we're just gonna raise our
own exception and exit out.

9
00:00:34.410 --> 00:00:37.816
We're gonna talk more about
exceptions tomorrow, but

10
00:00:37.816 --> 00:00:41.292
until then I'm just gonna say,
raise a runtime error and

11
00:00:41.292 --> 00:00:44.929
I'm gonna pass in a message that says,
an error occurred.

12
00:00:47.181 --> 00:00:52.469
&gt;&gt; Nina Zakharenko: And oops, I want to
get the status code from my response.

13
00:00:52.469 --> 00:00:55.649
So I want to make sure that I
have that variable defined.

14
00:00:55.649 --> 00:01:00.454
So the status_code = response.status_code,

15
00:01:00.454 --> 00:01:04.819
just like we looked at
when we used the dog API.

16
00:01:04.819 --> 00:01:09.404
Okay, we'll say, an error occurred and

17
00:01:09.404 --> 00:01:15.830
the status code was, and
then we'll just print that out.

18
00:01:15.830 --> 00:01:20.342
And this runtime error, we're not
doing that try-catch sort of thing,

19
00:01:20.342 --> 00:01:22.540
it's just gonna exit our program.

20
00:01:22.540 --> 00:01:26.900
There is really nothing else to do
if the github API returned an error.

21
00:01:28.270 --> 00:01:32.890
Otherwise, we're gonna do this code here.

22
00:01:32.890 --> 00:01:37.760
So technically,
I don't need an else statement here.

23
00:01:37.760 --> 00:01:39.700
If this error occurs it's just gonna quit.

24
00:01:41.210 --> 00:01:45.700
But I like being very
explicit about the situation.

25
00:01:45.700 --> 00:01:49.289
So I'm going to put an else here,
and then tab in this code.

26
00:01:56.158 --> 00:02:01.299
&gt;&gt; Nina Zakharenko: Okay,
and let's see if this works.

27
00:02:07.129 --> 00:02:10.900
&gt;&gt; Nina Zakharenko: Looks like I did
not define the variable stars right.

28
00:02:10.900 --> 00:02:15.410
So I'm putting in sort,
I think I had stars as a string here and

29
00:02:15.410 --> 00:02:17.200
I just forgot to change it.

30
00:02:17.200 --> 00:02:19.950
So I'm gonna update that
to use the variable.

31
00:02:19.950 --> 00:02:20.640
Let's try it again.

32
00:02:23.450 --> 00:02:26.620
And it works, awesome.

33
00:02:26.620 --> 00:02:31.760
So we are able to use
a pretty powerful API.

34
00:02:31.760 --> 00:02:37.110
The github search API lets you get a ton
of data about publically available repos.

35
00:02:37.110 --> 00:02:40.590
The great thing about this API is
you can use it unauthenticated.

36
00:02:40.590 --> 00:02:44.720
It is really rate limited, so
you can't constantly hammer it,

37
00:02:44.720 --> 00:02:48.130
because that would just be
a denial of service attack, right?

38
00:02:48.130 --> 00:02:51.880
So gitub cuts off
unauthenticated requests for

39
00:02:51.880 --> 00:02:55.080
the search API at about
ten requests per minute.

40
00:02:55.080 --> 00:03:00.170
And for their regular API, I think it's
about 50 or 60 requests per hour until

41
00:03:00.170 --> 00:03:05.290
they cut you off, but
that was plenty for us.

42
00:03:05.290 --> 00:03:10.830
I just wanna show you one
more thing here in this code.

43
00:03:10.830 --> 00:03:16.830
So here I'm saying,
status_code = reponse.status_code.

44
00:03:16.830 --> 00:03:22.599
But just for the time being,
let's say our status_code.

45
00:03:22.599 --> 00:03:27.594
Let's just short circuit this and
say our status code is 500, right?

46
00:03:27.594 --> 00:03:29.490
500 is a server error.

47
00:03:31.290 --> 00:03:35.805
When we do this and
we run our python file,

48
00:03:35.805 --> 00:03:42.841
we'll see an instant,
&gt;&gt; Nina Zakharenko: You'll see this,

49
00:03:42.841 --> 00:03:44.780
Status code was: {status_code}.

50
00:03:44.780 --> 00:03:46.940
What do you think that means?

51
00:03:46.940 --> 00:03:48.520
&gt;&gt; Student: We didn't have the f.

52
00:03:48.520 --> 00:03:49.870
&gt;&gt; Nina Zakharenko: I forgot my f string,
yeah.

53
00:03:51.150 --> 00:03:53.370
So let me put that in there and
run it one more time.

54
00:03:55.150 --> 00:03:57.090
Okay, we'll see, an error occurred.

55
00:03:57.090 --> 00:03:58.590
Status code was: 500.

56
00:03:58.590 --> 00:04:00.890
We just cleanly exited our program.

