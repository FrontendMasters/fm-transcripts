WEBVTT

1
00:00:00.530 --> 00:00:04.443
&gt;&gt; Nina Zakharenko: Using the request
library we can interact with APIs from

2
00:00:04.443 --> 00:00:07.950
Python, and per the dictionary,
what is an API?

3
00:00:07.950 --> 00:00:12.269
It's a set of functions or
procedures that allow

4
00:00:12.269 --> 00:00:17.231
accessing features or
data of a system somewhere else.

5
00:00:17.231 --> 00:00:21.350
API sometimes has authentication,
which I won't cover today.

6
00:00:21.350 --> 00:00:24.790
We're just gonna use
unauthenticated libraries.

7
00:00:24.790 --> 00:00:27.210
It has rate limiting sometimes,

8
00:00:27.210 --> 00:00:31.740
which especially comes into play
when you're not authenticating.

9
00:00:31.740 --> 00:00:35.060
And there are a lot of free
APIs out there for you to use.

10
00:00:36.810 --> 00:00:39.610
A little bit about working with APIs.

11
00:00:39.610 --> 00:00:41.950
This image came from a really excellent,

12
00:00:41.950 --> 00:00:46.280
thorough intro to API guide
by Brian Cooksey from Zapier.

13
00:00:46.280 --> 00:00:50.690
So if you're really interested in how
this stuff works, I recommend reading it.

14
00:00:50.690 --> 00:00:55.480
But your client, your web browser,
your Python program,

15
00:00:55.480 --> 00:01:03.010
it sends a request to a server and that
server comes back and returns a response.

16
00:01:03.010 --> 00:01:08.970
To interact with APIs you
use HTTP methods generally.

17
00:01:08.970 --> 00:01:12.080
So GET is asking the server for
a resource.

18
00:01:12.080 --> 00:01:15.550
POST is asking the server
to create a new resource.

19
00:01:15.550 --> 00:01:21.890
PUT updates, DELETE, deletes,
kind of the standard ones.

20
00:01:21.890 --> 00:01:25.400
Generally, you also attach a header,
a body,

21
00:01:25.400 --> 00:01:28.320
or parameters along with your request.

22
00:01:28.320 --> 00:01:31.810
This is kind of an example of
what URL parameters look like.

23
00:01:33.640 --> 00:01:38.960
And then, these APIs have different
response types, a variety of formats.

24
00:01:38.960 --> 00:01:41.550
XML was popular a few years ago.

25
00:01:41.550 --> 00:01:45.050
JSON is the popular library now.

26
00:01:45.050 --> 00:01:47.410
So JSON looks like this, and

27
00:01:47.410 --> 00:01:52.470
the request library turns this JSON
into a Python dictionary seamlessly.

28
00:01:54.520 --> 00:02:00.880
A quick insight into HTTP status codes,
they tend to fall into these categories.

29
00:02:00.880 --> 00:02:06.120
The ones in the 200 range
generally mean success.

30
00:02:06.120 --> 00:02:11.227
Common ones here are 200 OK,
that means everything went fine,

31
00:02:11.227 --> 00:02:15.890
kinda the standard response for
successful HTTP requests.

32
00:02:15.890 --> 00:02:20.720
201 CREATED means the resource
was created successfully.

33
00:02:20.720 --> 00:02:22.810
In the 300s is a redirection.

34
00:02:23.920 --> 00:02:26.330
400s is a client error,

35
00:02:26.330 --> 00:02:32.090
like a 404 means you gave me an ID but
I couldn't find that ID in my system.

36
00:02:32.090 --> 00:02:36.540
And I couldn't find what
you specifically asked for.

37
00:02:36.540 --> 00:02:40.180
Whereas the 500 range is
an internal server error.

38
00:02:40.180 --> 00:02:42.820
That means I'm the server,

39
00:02:42.820 --> 00:02:46.470
something went wrong when I tried to
generate a response to send back to you.

40
00:02:46.470 --> 00:02:49.070
So not anything having
to do with the client.

41
00:02:50.080 --> 00:02:52.805
And because HTTP status codes are boring,

42
00:02:52.805 --> 00:02:57.130
there's a very helpful table here for
HTTP status codes with cats.

43
00:02:57.130 --> 00:03:03.466
So 200 is OK, 301, for example,
means moved permanently.

44
00:03:03.466 --> 00:03:06.764
404, not found.

45
00:03:06.764 --> 00:03:10.164
And 500 is an internal server error.

46
00:03:10.164 --> 00:03:15.141
If you have a cat in your server,
you might have a problem.

47
00:03:15.141 --> 00:03:22.945
One of my favorite all time Internet
pieces of Internet trivia is that in 1998,

48
00:03:22.945 --> 00:03:29.076
as an April Fool's joke,
someone made HTTP status code 418,

49
00:03:29.076 --> 00:03:34.882
I'm a teapot aka the hypertext
coffeepot control protocol.

50
00:03:34.882 --> 00:03:37.080
And this is the implementation of it.

51
00:03:37.080 --> 00:03:41.643
So if you have an hour to kill,
look up the Wikipedia entry and

52
00:03:41.643 --> 00:03:43.620
look at the code for this.

53
00:03:43.620 --> 00:03:44.860
It's hysterical.

54
00:03:46.170 --> 00:03:50.090
There are several ways of authenticating
to APIs, but I won't be covering them.

