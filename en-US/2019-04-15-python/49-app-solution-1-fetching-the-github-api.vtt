WEBVTT

1
00:00:05.848 --> 00:00:10.338
&gt;&gt; Nina Zakharenko: So
you're gonna build a small app that uses

2
00:00:10.338 --> 00:00:13.831
the GitHub search API to query for

3
00:00:13.831 --> 00:00:18.833
popular repositories by
a specific language.

4
00:00:18.833 --> 00:00:24.458
And sort those in descending order by
the number of stars that they have.

5
00:00:24.458 --> 00:00:28.978
At this point, if you have not
installed the requests library,

6
00:00:28.978 --> 00:00:31.163
you're gonna have to do that.

7
00:00:31.163 --> 00:00:38.757
And just note that you may see pip being
used directly, like pip install requests.

8
00:00:38.757 --> 00:00:44.656
But python -m pip is what's
recommended by python.

9
00:00:44.656 --> 00:00:49.259
And that's gonna help you
avoid any versioning errors.

10
00:00:49.259 --> 00:00:54.567
So I'm gonna make a new python file.

11
00:00:54.567 --> 00:00:58.624
I'm gonna call it day1.py.

12
00:00:58.624 --> 00:01:04.579
Remember, pip install,
or python -m pip install

13
00:01:04.579 --> 00:01:09.710
requests, if you have not done so already.

14
00:01:09.710 --> 00:01:12.882
I'll see some output,
because I already have it installed,

15
00:01:12.882 --> 00:01:17.557
but,
&gt;&gt; Nina Zakharenko: Make sure that

16
00:01:17.557 --> 00:01:20.048
you see that as well.

17
00:01:20.048 --> 00:01:23.385
The first thing we'll need
to do is import requests, so

18
00:01:23.385 --> 00:01:25.661
that we can use the requests library.

19
00:01:27.785 --> 00:01:32.399
&gt;&gt; Nina Zakharenko: And we want to run our

20
00:01:32.399 --> 00:01:37.562
code in a main method.

21
00:01:37.562 --> 00:01:45.244
So we're gonna say if __name__ is
is equal to the string __main__,

22
00:01:45.244 --> 00:01:49.571
then we're gonna have a main method here.

23
00:01:52.619 --> 00:01:56.480
&gt;&gt; Nina Zakharenko: For the time being,
I just want to stub this method out.

24
00:01:56.480 --> 00:02:01.307
So I'm gonna put a Python
construct called pass in here.

25
00:02:01.307 --> 00:02:07.857
And that just means do nothing, but
if I save this, it's still valid code.

26
00:02:07.857 --> 00:02:11.999
So we're gonna want to use
the GitHub search API to

27
00:02:11.999 --> 00:02:14.868
get the repos with the most stars.

28
00:02:14.868 --> 00:02:18.493
I'm gonna make a new method called

29
00:02:18.493 --> 00:02:24.103
repos_with_most,
&gt;&gt; Nina Zakharenko: Excuse me,

30
00:02:24.103 --> 00:02:30.124
can't type today, repos_with_most_stars.

31
00:02:30.124 --> 00:02:35.854
And I'm going to get the URL for
the GitHub search API.

32
00:02:39.823 --> 00:02:43.844
&gt;&gt; Nina Zakharenko: And,
[LAUGH] let me just grab that from

33
00:02:43.844 --> 00:02:46.840
the course exercise here.

34
00:02:46.840 --> 00:02:51.525
In the class website, you'll find
a link to the documentation for

35
00:02:51.525 --> 00:02:55.383
this API endpoint,
if you want to learn more about it.

36
00:02:55.383 --> 00:02:58.477
Now just like before with the cute dogs,

37
00:02:58.477 --> 00:03:02.675
we're gonna say response
is equal to requests.get.

38
00:03:02.675 --> 00:03:06.918
This time, we're passing in
the GitHub API search URL.

39
00:03:06.918 --> 00:03:10.638
And we're gonna print the response.text.

40
00:03:13.664 --> 00:03:17.907
&gt;&gt; Nina Zakharenko: Now in my main method,
I'm gonna need to call

41
00:03:17.907 --> 00:03:21.936
this repos_with_most_stars method.

42
00:03:21.936 --> 00:03:25.691
So I'm just gonna paste that down here.

43
00:03:25.691 --> 00:03:30.085
And let's run our code and
see what happens.

44
00:03:30.085 --> 00:03:36.393
Okay, we get a message here,
a validation failure.

45
00:03:36.393 --> 00:03:41.694
And earlier in the chat, someone asked the
type that might come back from the API.

46
00:03:41.694 --> 00:03:47.169
Well, it'll be converted under the hood
to the Python type that matches the JSON.

47
00:03:47.169 --> 00:03:51.017
So if the API returns
a list of JSON objects,

48
00:03:51.017 --> 00:03:55.284
then in Python it will be
a list of dictionaries.

49
00:03:55.284 --> 00:03:58.818
But here,
response.text doesn't do any conversion.

50
00:03:58.818 --> 00:04:01.851
It just prints out the exact
response that we got.

51
00:04:01.851 --> 00:04:03.595
So we got a validation error.

52
00:04:06.010 --> 00:04:09.408
&gt;&gt; Nina Zakharenko: And it's showing us
the research, which is the search API.

53
00:04:09.408 --> 00:04:14.883
And it's saying that field q is missing.

54
00:04:14.883 --> 00:04:18.758
So we're gonna need to provide
a query to get this to work.

55
00:04:22.840 --> 00:04:27.208
&gt;&gt; Nina Zakharenko: Let's stub
this out with some parameters.

56
00:04:30.790 --> 00:04:33.255
&gt;&gt; Nina Zakharenko: We're
gonna make a dictionary, and

57
00:04:33.255 --> 00:04:35.410
we're gonna make a new key, q.

58
00:04:35.410 --> 00:04:38.815
And the value is gonna be stars,

59
00:04:38.815 --> 00:04:44.118
followed by colon, greater than 50,000.

60
00:04:48.716 --> 00:04:51.946
&gt;&gt; Nina Zakharenko: These parameters
are specific to the GitHub search API.

61
00:04:51.946 --> 00:04:54.343
They don't have anything
to do with Python.

62
00:04:54.343 --> 00:04:59.155
So remember that each API that you work
with is probably gonna work a little bit

63
00:04:59.155 --> 00:05:03.906
differently, and accept different
values have different requirements.

64
00:05:03.906 --> 00:05:08.144
Just like before,
we're going to pass these parameters in

65
00:05:08.144 --> 00:05:12.802
using,
&gt;&gt; Nina Zakharenko: An argument called

66
00:05:12.802 --> 00:05:13.682
params.

67
00:05:13.682 --> 00:05:14.673
Let's try this again.

68
00:05:16.692 --> 00:05:21.169
&gt;&gt; Nina Zakharenko: Okay,
that spit out a bunch of stuff, right?

69
00:05:21.169 --> 00:05:23.265
Looks like it's working correctly.

70
00:05:23.265 --> 00:05:26.999
And now we can start refactoring.

71
00:05:26.999 --> 00:05:31.110
And actually doing something
with the data that we got back.

