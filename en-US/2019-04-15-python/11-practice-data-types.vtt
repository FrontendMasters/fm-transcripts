WEBVTT

1
00:00:04.910 --> 00:00:06.827
&gt;&gt; Nina Zakharenko: So if you open chapter

2
00:00:06.827 --> 00:00:10.817
two,
&gt;&gt; Nina Zakharenko: You'll

3
00:00:10.817 --> 00:00:15.441
see an exercise on basic data types,
strings and numbers.

4
00:00:15.441 --> 00:00:19.990
This is a pretty short exercise,
so let's aim for ten minutes.

5
00:00:19.990 --> 00:00:25.080
And before we kick it off, just a reminder
that if you see code here that says

6
00:00:25.080 --> 00:00:31.130
Python REPL, you can hit this copy
icon to copy it to the clipboard.

7
00:00:31.130 --> 00:00:34.010
So just to cover a question
that came up earlier.

8
00:00:35.340 --> 00:00:40.945
For NVS code, if you were not able
to open code by typing code space

9
00:00:40.945 --> 00:00:46.370
dot in your terminal from where your
virtual environment was activated

10
00:00:46.370 --> 00:00:51.550
in the project folder, you might have
to explicitly select your interpreter.

11
00:00:52.860 --> 00:00:56.982
And as long as you have
the Python extension for VS Code,

12
00:00:56.982 --> 00:01:01.558
you should see a blue bar here
at the bottom, you can hit this.

13
00:01:01.558 --> 00:01:09.310
If you already opened your VS Code with
code dot, you don't have to do this.

14
00:01:09.310 --> 00:01:12.740
But if you didn't, you would open,
click on that, and

15
00:01:12.740 --> 00:01:15.290
the select the right interpreter.

16
00:01:15.290 --> 00:01:20.175
Generally, it would be this format,
./n, that's the virtual environment,

17
00:01:20.175 --> 00:01:22.690
/bin/python3.

18
00:01:22.690 --> 00:01:25.557
On Windows,
it might be something else, but

19
00:01:25.557 --> 00:01:28.806
you'll see kind of the list
of available options.

20
00:01:28.806 --> 00:01:31.375
And you wanna make sure
that the version is right,

21
00:01:31.375 --> 00:01:35.180
because the first result here is
Python 2.7, and we don't want that.

22
00:01:36.320 --> 00:01:41.050
Okay, so going through our
basic data types, strings and

23
00:01:41.050 --> 00:01:46.030
numbers, just for shorthand, I'm not going

24
00:01:46.030 --> 00:01:51.790
to name my variables here, I'm just
gonna pass them directly into type.

25
00:01:51.790 --> 00:01:55.570
So the type of 42, that's an int,

26
00:01:56.690 --> 00:02:02.990
the type of 3 divided by 4, it's a float.

27
00:02:02.990 --> 00:02:08.690
If I made a new int this way,
and one of the cool

28
00:02:08.690 --> 00:02:13.820
things about the int function is we don't
have to just pass integers into it,

29
00:02:13.820 --> 00:02:19.680
we can also pass in a string with
an integer, and that will work just fine.

30
00:02:19.680 --> 00:02:24.504
So my type of z is an int,
it's a kind of a handy shortcut.

31
00:02:24.504 --> 00:02:30.272
I can also do that with a float, so
if I pass an integer into a float,

32
00:02:30.272 --> 00:02:34.701
and I check the type of a,
it'll be of class float,

33
00:02:34.701 --> 00:02:38.730
just to take a quick peek at it, it's 5.0.

34
00:02:38.730 --> 00:02:43.497
Okay, so numbers, we wanna calculate
the amount of rent that we

35
00:02:43.497 --> 00:02:48.070
pay daily by taking our monthly rent and
dividing it by 30.

36
00:02:48.070 --> 00:02:52.006
So let's say I live in San Francisco and

37
00:02:52.006 --> 00:02:56.425
I pay $5,000 for a studio apartment.

38
00:02:56.425 --> 00:02:58.418
I don't, I live in Portland.

39
00:02:58.418 --> 00:03:05.298
But the per day amount would
just be the rent divided by 30.

40
00:03:05.298 --> 00:03:10.407
Now, we could just type
in our variable here and

41
00:03:10.407 --> 00:03:15.005
see the result, or we can use the built-in

42
00:03:15.005 --> 00:03:20.522
function print to explicitly
print out the value.

43
00:03:20.522 --> 00:03:25.170
You won't need to use print
much on the REPL, if at all.

44
00:03:25.170 --> 00:03:27.206
But once we move on to
real Python programs,

45
00:03:27.206 --> 00:03:30.134
that's how we're gonna see
what's contained in variables.

46
00:03:33.069 --> 00:03:36.700
&gt;&gt; Nina Zakharenko: So
if I printed out the value of Hello World,

47
00:03:36.700 --> 00:03:38.180
I would see that.

48
00:03:40.110 --> 00:03:45.870
If I set my name to Nina,
I could also print out My name is.

49
00:03:46.880 --> 00:03:52.630
And here's a kind of really fun quick
shorthand for the print statement.

50
00:03:52.630 --> 00:03:56.340
If you want to print a bunch
of things separated by space,

51
00:03:56.340 --> 00:04:01.170
you can pass them separated by
comma to the print function.

52
00:04:01.170 --> 00:04:05.049
So if you don't wanna type an f
string necessarily in this case.

53
00:04:06.130 --> 00:04:11.824
So this is gonna print out my name is,
notice the space, and Nina.

54
00:04:14.446 --> 00:04:18.044
&gt;&gt; Nina Zakharenko: Or if I wanted to
do the same thing with an f string,

55
00:04:18.044 --> 00:04:20.980
and I can also pass the f string to print.

56
00:04:20.980 --> 00:04:23.809
Remember that f string
starts with a lowercase f.

57
00:04:24.830 --> 00:04:30.174
And I could say My name is,
&gt;&gt; Nina Zakharenko: And

58
00:04:30.174 --> 00:04:35.307
then do the curly braces, and
the name of the variable, which is name.

59
00:04:38.377 --> 00:04:41.707
&gt;&gt; Nina Zakharenko: So a quick
example here for percent formatting,

60
00:04:41.707 --> 00:04:44.800
just in case you kind of
see it out in the wild.

61
00:04:45.810 --> 00:04:50.790
If I have my name Nina, I could print
out Hello, and then I would put

62
00:04:50.790 --> 00:04:56.200
in %s to designate that the value that

63
00:04:56.200 --> 00:05:02.760
I want to interpolate here is a string,
followed by %, followed by name.

64
00:05:02.760 --> 00:05:05.430
So a lot less readable.

65
00:05:05.430 --> 00:05:08.618
And as soon as you start passing
multiple values into this,

66
00:05:08.618 --> 00:05:12.972
it gets even less readable, so that's
why it's not the recommended standard.

67
00:05:16.812 --> 00:05:23.198
&gt;&gt; Nina Zakharenko: Okay, so we had,
&gt;&gt; Nina Zakharenko: We

68
00:05:23.198 --> 00:05:26.517
had our name, which is Nina.

69
00:05:26.517 --> 00:05:30.557
You can also do some kind of
basic operations in f strings,

70
00:05:30.557 --> 00:05:32.700
which is pretty cool.

71
00:05:32.700 --> 00:05:33.873
So for this case,

72
00:05:33.873 --> 00:05:38.893
I'm just gonna not use the print because
it's kind of optional in the REPL.

73
00:05:38.893 --> 00:05:41.759
I'm just gonna say Hello, my name is Nina.

74
00:05:41.759 --> 00:05:50.026
I pay,
&gt;&gt; Nina Zakharenko: I'm

75
00:05:50.026 --> 00:05:54.132
gonna put a dollar sign here,
just to signify the dollar amount,

76
00:05:54.132 --> 00:05:57.055
not a special symbol or
anything in this case.

77
00:05:57.055 --> 00:06:03.271
I'm gonna say I'm gonna pay rent
divided by 30 in rent, per day.

78
00:06:05.177 --> 00:06:07.240
&gt;&gt; Nina Zakharenko: Okay,
it's a lot of money.

79
00:06:09.120 --> 00:06:14.240
And quickly,
just going through our helper functions.

80
00:06:14.240 --> 00:06:21.350
We talked about type,
&gt;&gt; Nina Zakharenko: Type of x is int.

81
00:06:22.790 --> 00:06:27.660
We talked about dir, so
if I do a dir on int, remember,

82
00:06:27.660 --> 00:06:32.430
it has to be the class here,
I'll see all the methods available on int.

83
00:06:32.430 --> 00:06:35.050
The ones without the underscores
are the ones that we care about.

84
00:06:36.890 --> 00:06:42.700
And I can also,
&gt;&gt; Nina Zakharenko: Use the help function.

85
00:06:42.700 --> 00:06:45.460
Let's say I wanted to know
more about what this does.

86
00:06:45.460 --> 00:06:50.792
I can do int., int is the type,
followed by the method,

87
00:06:50.792 --> 00:06:57.037
and pass that into help, and
it'll print out the documentation.

88
00:06:57.037 --> 00:06:58.868
I can press Q to exit.

