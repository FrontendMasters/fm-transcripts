WEBVTT

1
00:00:00.000 --> 00:00:04.362
&gt;&gt; Nina Zakharenko: Tuples are a
lightweight collection that are generally

2
00:00:04.362 --> 00:00:08.361
used to keep track of related but
different items.

3
00:00:08.361 --> 00:00:12.038
And again,
that's just how they're used in practice,

4
00:00:12.038 --> 00:00:16.724
but you're free to do whatever you want,
Python's not gonna stop you.

5
00:00:18.621 --> 00:00:22.672
&gt;&gt; Nina Zakharenko: While lists
are mutable, right, we were able to I add,

6
00:00:22.672 --> 00:00:26.050
remove items from them,
changed the values.

7
00:00:26.050 --> 00:00:31.100
Tuples are immutable,
that means that once a tuple

8
00:00:31.100 --> 00:00:36.042
has been created,
the items in it can't change.

9
00:00:36.042 --> 00:00:40.133
Okay, and you might ask, okay, we just
learned about lists, they are awesome,

10
00:00:40.133 --> 00:00:42.465
why do we need tuple
that sounds complicated?

11
00:00:45.348 --> 00:00:50.724
&gt;&gt; Nina Zakharenko: Tuples are useful for
things like containing a snapshot of data,

12
00:00:50.724 --> 00:00:55.806
so let's say you wanna represent
a spreadsheet in your code,

13
00:00:55.806 --> 00:01:00.909
a tuple might represent each
row in the spreadsheet, right?

14
00:01:00.909 --> 00:01:03.988
So your spreadsheet has different columns,
and

15
00:01:03.988 --> 00:01:08.278
each position in the tuple relates
to a value in a different column.

16
00:01:08.278 --> 00:01:11.625
And these tuples can't
continually be changed,

17
00:01:11.625 --> 00:01:16.167
they can't be added to or removed
from like you would do with a list,

18
00:01:16.167 --> 00:01:21.445
which also provides you a little bit of
added security with your data, right?

19
00:01:21.445 --> 00:01:26.196
You generally know that the tuple
is gonna look the same when

20
00:01:26.196 --> 00:01:30.864
you access it later on, so
looking at tuples in practice.

21
00:01:36.671 --> 00:01:40.405
&gt;&gt; Nina Zakharenko: To make empty and
one-item tuples,

22
00:01:45.329 --> 00:01:47.710
&gt;&gt; Nina Zakharenko: You use parentheses,

23
00:01:47.710 --> 00:01:54.987
just empty parentheses,
the type(a| we'll see is a class tuple.

24
00:01:59.662 --> 00:02:02.653
&gt;&gt; Nina Zakharenko: There's something
kind of tricky here, all right?

25
00:02:02.653 --> 00:02:05.375
If the square brackets
are associated with the list,

26
00:02:05.375 --> 00:02:09.199
you might think that the parentheses
are associated with tuples, right?

27
00:02:09.199 --> 00:02:15.163
We use two empty parentheses, and we end
up with an empty tuple, but pay attention,

28
00:02:15.163 --> 00:02:20.210
things get tricky when we try to make
a tuple that just has one item in it.

29
00:02:24.618 --> 00:02:30.644
&gt;&gt; Nina Zakharenko: Let's say I try to
make this tuple b, if I check the type(b|,

30
00:02:30.644 --> 00:02:37.608
we'll see that the class is actually int,
okay, what happened there?

31
00:02:37.608 --> 00:02:44.379
So tuples are not just parentheses,
tuples are about commas,

32
00:02:44.379 --> 00:02:48.480
they're kind of the combination of,

33
00:02:51.774 --> 00:02:54.106
&gt;&gt; Nina Zakharenko: Optional parentheses,

34
00:02:54.106 --> 00:02:57.552
but the comma is the important part.

35
00:02:57.552 --> 00:03:02.991
So knowing that,
&gt;&gt; Nina Zakharenko: How

36
00:03:02.991 --> 00:03:06.268
would I make my one item tuple be a tuple?

37
00:03:06.268 --> 00:03:07.070
&gt;&gt; Class: Add a comma.

38
00:03:07.070 --> 00:03:09.274
&gt;&gt; Nina Zakharenko: Add a comma,
and where would the comma go?

39
00:03:09.274 --> 00:03:10.273
&gt;&gt; Class: After the 1.

40
00:03:10.273 --> 00:03:15.923
&gt;&gt; Nina Zakharenko: After the 1,
if I check the type (c| now, it's a tuple.

41
00:03:22.480 --> 00:03:28.505
&gt;&gt; Nina Zakharenko: Unfortunately,
doing this is a syntax error in Python,

42
00:03:28.505 --> 00:03:32.277
right, just doesn't make sense.

43
00:03:32.277 --> 00:03:38.802
So that's why we have the two empty
parentheses being the empty tuple,

44
00:03:38.802 --> 00:03:43.601
but the comma here being
what makes a one item tuple.

45
00:03:43.601 --> 00:03:47.601
And now that I have my comma, I can
make tuples that are as long as I want.

46
00:03:47.601 --> 00:03:51.537
Let's say we have
a spreadsheet of students, and

47
00:03:51.537 --> 00:03:56.705
we'd like to represent each row
in the spreadsheet with a tuple.

48
00:03:56.705 --> 00:04:01.598
We can say student is opening parentheses,
and

49
00:04:01.598 --> 00:04:07.223
let's say her students name is Marcy,
and she's 8,

50
00:04:07.223 --> 00:04:13.480
and her favorite subject is history,
and her GPA is 3.5.

51
00:04:13.480 --> 00:04:18.677
Just like with a list, I can go through
and access the items in my tuple by index,

52
00:04:18.677 --> 00:04:21.408
so what year will student|0| return?

53
00:04:21.408 --> 00:04:22.281
&gt;&gt; Class: Marcy.

54
00:04:22.281 --> 00:04:26.660
&gt;&gt; Nina Zakharenko: Marcy,
right, and student |1|.

55
00:04:26.660 --> 00:04:27.289
&gt;&gt; Class: 8.

56
00:04:27.289 --> 00:04:34.247
&gt;&gt; Nina Zakharenko: 8, right, okay,
I told you that tuples are immutable,

57
00:04:34.247 --> 00:04:41.776
so what if I try to change the value
in my tuple, what will I see?

58
00:04:41.776 --> 00:04:43.351
&gt;&gt; Student: TypeError,

59
00:04:43.351 --> 00:04:48.175
object does not supported-
&gt;&gt; Nina Zakharenko: TypeError, tuple

60
00:04:48.175 --> 00:04:54.321
object does not support item assignment,
makes sense, right, it's immutable.

61
00:04:55.992 --> 00:04:59.333
&gt;&gt; Nina Zakharenko: And because of that,
do you think tuples have an append or

62
00:04:59.333 --> 00:05:01.222
extend method, or pop method?

63
00:05:01.222 --> 00:05:01.761
&gt;&gt; Class: No.

64
00:05:01.761 --> 00:05:06.491
&gt;&gt; Nina Zakharenko: No, right,
they don't, you can't change them.

65
00:05:06.491 --> 00:05:10.623
All right, so all of this sounds like
a lot of work without a lot of benefit,

66
00:05:10.623 --> 00:05:14.839
right, kind of already have lists,
why do we need this new data structure?

67
00:05:14.839 --> 00:05:15.705
Well, not so,

68
00:05:15.705 --> 00:05:20.320
tuples are actually really great when you
depend on your data staying unchanged.

69
00:05:20.320 --> 00:05:25.355
And because of this guarantee,
you can use tuples in other

70
00:05:25.355 --> 00:05:31.541
types of containers where the container
needs a key that is immutable.

71
00:05:31.541 --> 00:05:37.102
Like a dictionary key needs to be
immutable, you can use a tuple,

72
00:05:37.102 --> 00:05:41.362
as long as the tuple
contains all immutable data.

73
00:05:41.362 --> 00:05:45.738
So we'll talk about that a little
bit later, but that's an important

74
00:05:45.738 --> 00:05:50.781
distinction, you can not use a mutable
data type that can be changed, added to,

75
00:05:50.781 --> 00:05:55.330
as a key in data structure like
a dictionary, you will just get an error.

