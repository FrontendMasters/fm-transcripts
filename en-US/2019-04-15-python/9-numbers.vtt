WEBVTT

1
00:00:00.016 --> 00:00:02.769
&gt;&gt; Nina Zakharenko: In Python,
these are all integers.

2
00:00:04.947 --> 00:00:07.830
&gt;&gt; Nina Zakharenko: That's
a negative number, we have zero.

3
00:00:08.950 --> 00:00:11.030
We also have floating type.

4
00:00:12.400 --> 00:00:16.599
So to make a number a floating type,
you just add a decimal place.

5
00:00:21.393 --> 00:00:23.740
&gt;&gt; Nina Zakharenko: Let's make that 0.5.

6
00:00:23.740 --> 00:00:25.501
Are you all typing along with me?

7
00:00:25.501 --> 00:00:27.215
Let's get that muscle memory going.

8
00:00:27.215 --> 00:00:30.959
Okay, so let's make a few integers,

9
00:00:30.959 --> 00:00:35.289
a positive one, a negative one, and zero.

10
00:00:35.289 --> 00:00:37.400
You can name them whatever you want.

11
00:00:38.560 --> 00:00:44.203
And then some floating point numbers,
a positive floating point,

12
00:00:44.203 --> 00:00:48.264
a negative floating point,
and lastly, zero.

13
00:00:51.968 --> 00:00:56.203
&gt;&gt; Nina Zakharenko: So if we look at the
value of z now, we'll see that it's 0.0.

14
00:00:56.203 --> 00:01:04.028
Python also has complex numbers,
&gt;&gt; Nina Zakharenko: And

15
00:01:04.028 --> 00:01:06.350
they are just represented by a j.

16
00:01:06.350 --> 00:01:11.060
Unless you're doing mathy stuff,
you probably won't need to use them.

17
00:01:12.580 --> 00:01:18.490
In Python, integers and simple data
types are just objects under the hood.

18
00:01:18.490 --> 00:01:21.420
That means that you can just
create new ones by calling

19
00:01:21.420 --> 00:01:24.600
the methods associated with their types.

20
00:01:24.600 --> 00:01:29.355
So for example, if I check the type of,
let's look at y,

21
00:01:29.355 --> 00:01:31.630
we'll see that it's a float.

22
00:01:33.100 --> 00:01:38.024
And if I make a new number a and
I check its type,

23
00:01:38.024 --> 00:01:42.150
we'll see that it's an int.

24
00:01:42.150 --> 00:01:48.534
So if I wanted to make
new instances of these,

25
00:01:48.534 --> 00:01:54.430
I can also say in 5, float 3.0, etc.

26
00:01:54.430 --> 00:01:58.800
Not necessarily useful now,
you won't see this commonly used for

27
00:01:58.800 --> 00:02:01.190
simple code, but
it'll come in advantage later.

28
00:02:02.550 --> 00:02:06.500
And then we saw some
mathematical operations.

29
00:02:06.500 --> 00:02:11.303
So let's say I have x equals 5 and
y equals 3.0,

30
00:02:11.303 --> 00:02:14.544
I can add these numbers together,

31
00:02:14.544 --> 00:02:19.348
I can divide numbers,
let's say 6 divided by 2,

32
00:02:19.348 --> 00:02:24.307
I can multiply them, so
standard math operations.

33
00:02:27.272 --> 00:02:31.655
&gt;&gt; Nina Zakharenko: And just notice
here that when I divided two integers,

34
00:02:31.655 --> 00:02:35.190
the end result was
a floating point number.

