WEBVTT

1
00:00:00.060 --> 00:00:03.220
&gt;&gt; Nina Zakharenko: Very quickly,
let's use the request library

2
00:00:04.670 --> 00:00:07.360
to interact with APIs.

3
00:00:08.520 --> 00:00:14.378
So let's all together make a new file and

4
00:00:14.378 --> 00:00:22.377
we're gonna call it dog.ui
&gt;&gt; Nina Zakharenko: And

5
00:00:22.377 --> 00:00:30.100
it might be useful for you to have this
page open from the class exercise.

6
00:00:30.100 --> 00:00:34.990
So to use the request library, the first
thing we need to do is import requests,

7
00:00:36.100 --> 00:00:41.320
next we're gonna define the URL of
an API that we want to interact with.

8
00:00:41.320 --> 00:00:44.720
If you go back to the class website and
you look down here,

9
00:00:44.720 --> 00:00:49.200
where I define the API URL variable,
you can just copy and paste this.

10
00:00:49.200 --> 00:00:52.251
It's the URL for Shibe Inu API,

11
00:00:52.251 --> 00:00:56.896
and just make sure that
you get the quotes right.

12
00:01:00.430 --> 00:01:03.836
&gt;&gt; Nina Zakharenko: Now,
we want to get a response back, so

13
00:01:03.836 --> 00:01:09.529
we're gonna use the request library
to call .get on our API URL.

14
00:01:14.062 --> 00:01:19.920
&gt;&gt; Nina Zakharenko: And
then if our response is successful,

15
00:01:19.920 --> 00:01:26.480
it should have a status
code available on it.

16
00:01:26.480 --> 00:01:29.716
So we can print out that the status code.

17
00:01:32.416 --> 00:01:37.770
&gt;&gt; Nina Zakharenko: Is,
okay, and let's run this.

18
00:01:37.770 --> 00:01:39.700
Okay, status code 200.

19
00:01:39.700 --> 00:01:41.930
What do remember from the cat pictures?

20
00:01:41.930 --> 00:01:43.400
What does 200 mean?

21
00:01:43.400 --> 00:01:46.530
200 okay, everything went great.

22
00:01:48.830 --> 00:01:53.633
Now, by default these days,
most APIs return JSON,

23
00:01:53.633 --> 00:02:00.598
some of them optionally let you specify
but I know that this API returns JSON.

24
00:02:00.598 --> 00:02:04.918
And oops, sorry and working with JSON,

25
00:02:04.918 --> 00:02:10.764
with requests is really easy,
we can assign a variable

26
00:02:10.764 --> 00:02:15.849
response_json by just
calling the response,

27
00:02:15.849 --> 00:02:20.170
remember, that's the variable here,

28
00:02:20.170 --> 00:02:23.558
the response from the server.

29
00:02:23.558 --> 00:02:28.768
And response.json will get
the JSON from that response,

30
00:02:28.768 --> 00:02:34.525
convert it into a Python dictionary,
so let's print that out.

31
00:02:42.915 --> 00:02:44.662
&gt;&gt; Nina Zakharenko: Now if
you did something wrong,

32
00:02:44.662 --> 00:02:48.169
if you're passing in some
parameters that didn't make sense.

33
00:02:50.360 --> 00:02:55.536
Calling this API might result in
any other type of HTTP status code,

34
00:02:55.536 --> 00:03:00.845
for example 404500, depends.

35
00:03:00.845 --> 00:03:03.680
Okay, now,
one of the nice things about VS code,

36
00:03:03.680 --> 00:03:05.980
you should have a URL printed out here.

37
00:03:07.600 --> 00:03:12.870
You can command and click in
the terminal to follow that URL and

38
00:03:12.870 --> 00:03:17.780
we just used an API to get this
adorable picture of a doge.

39
00:03:20.290 --> 00:03:23.586
Doge's on demand,
you can run this all day, every day and

40
00:03:23.586 --> 00:03:25.408
get new adorable dog pictures.

41
00:03:29.721 --> 00:03:33.596
&gt;&gt; Nina Zakharenko: So the request
library, I told you that Python was

42
00:03:33.596 --> 00:03:40.550
batteries included, sometimes those
batteries are a little rusty, right?

43
00:03:40.550 --> 00:03:46.400
The standard library is more
focused on feature richness,

44
00:03:46.400 --> 00:03:49.110
on backwards compatibility.

45
00:03:49.110 --> 00:03:53.893
Other external libraries have other
purposes, so this library in particular

46
00:03:53.893 --> 00:03:57.299
requests focuses on making
working with APIs as easy and

47
00:03:57.299 --> 00:03:59.405
as straightforward as possible.

48
00:04:02.430 --> 00:04:05.797
&gt;&gt; Nina Zakharenko: There's one
other thing I want to show you,

49
00:04:05.797 --> 00:04:10.711
remember, I talked about URL
parameters that we can optionally

50
00:04:10.711 --> 00:04:13.356
add on some parameters to our API.

51
00:04:13.356 --> 00:04:17.349
Let's do that with our response,
so by looking at

52
00:04:17.349 --> 00:04:22.920
the documentation I know that I can
pass in a parameter of accounts.

53
00:04:22.920 --> 00:04:26.860
So how many adorable dog
pictures do I want to look at?

54
00:04:28.020 --> 00:04:31.480
We declare our parameters as a dictionary,
so

55
00:04:31.480 --> 00:04:37.010
I'm gonna say count of 10 and

56
00:04:37.010 --> 00:04:42.070
then we pass in those
params to our response.

57
00:04:42.070 --> 00:04:44.090
So these two lines right here,
lines five and

58
00:04:44.090 --> 00:04:46.230
six are the only things that I've changed.

59
00:04:47.760 --> 00:04:50.953
If I run my Python file
in the terminal now,

60
00:04:50.953 --> 00:04:54.077
we'll see that I got ten responses back.

