WEBVTT

1
00:00:00.250 --> 00:00:03.240
&gt;&gt; Nina Zakharenko: For now we're gonna
talk about loops and control statements.

2
00:00:03.240 --> 00:00:10.040
We gonna talk about for
loops in Python and if else and else if.

3
00:00:12.000 --> 00:00:17.530
And just kind of as an aside, I'm gonna
through the final exercise first.

4
00:00:17.530 --> 00:00:19.910
And then I will come
back to this section and

5
00:00:19.910 --> 00:00:22.950
go over while loops and
break and continue.

6
00:00:22.950 --> 00:00:25.762
So if you wanna stay afterwards for
that, you're welcome to.

7
00:00:29.504 --> 00:00:31.850
&gt;&gt; Nina Zakharenko: But loops and
control statements in Python.

8
00:00:32.850 --> 00:00:36.280
So if you've done Java or
JavaScript or C++,

9
00:00:36.280 --> 00:00:40.280
you might have seen some for
loops that look like this, right?

10
00:00:40.280 --> 00:00:45.040
For and then i is zero,
you're defining the condition

11
00:00:46.120 --> 00:00:49.270
that we're looping until,
which is i is less than five, and

12
00:00:49.270 --> 00:00:54.100
then defining the operation you're
doing to meet the condition.

13
00:00:55.670 --> 00:00:58.272
For loops in Python
are a lot nicer than this.

14
00:01:00.416 --> 00:01:03.840
&gt;&gt; Nina Zakharenko: Let's
say we had a list of colors.

15
00:01:05.190 --> 00:01:12.330
I can just loop over for color in colors
and print out the value of the item.

16
00:01:12.330 --> 00:01:13.900
That's a for loop in Python.

17
00:01:18.147 --> 00:01:23.835
&gt;&gt; Nina Zakharenko: Let's say
my colors were red, green, blue.

18
00:01:23.835 --> 00:01:27.876
I can say for color in colors,
so that's kind of a temporary,

19
00:01:27.876 --> 00:01:32.697
color is a temporary variable that exists
in the context of the for loop and

20
00:01:32.697 --> 00:01:36.621
each item in that list is gonna
get assigned a color in turn.

21
00:01:42.808 --> 00:01:46.724
&gt;&gt; Nina Zakharenko: And then we go through
each one and print out red, green, blue.

22
00:01:46.724 --> 00:01:49.097
&gt;&gt; Student: So that word color
could've been any word, right?

23
00:01:49.097 --> 00:01:51.625
&gt;&gt; Nina Zakharenko: Yes,
any variable name that you decide.

24
00:01:51.625 --> 00:01:53.391
&gt;&gt; Student: Cuz you're kind
of instantiating it or

25
00:01:53.391 --> 00:01:55.002
making it available at that point.

26
00:01:55.002 --> 00:01:55.894
&gt;&gt; Nina Zakharenko: Yeah.

27
00:01:55.894 --> 00:01:57.278
&gt;&gt; Student: Okay.

28
00:01:57.278 --> 00:02:02.773
&gt;&gt; Nina Zakharenko: And then something
kind of interesting here is that

29
00:02:02.773 --> 00:02:09.050
this isn't a function,
there's no scope here, right?

30
00:02:10.770 --> 00:02:17.950
And so color will exist in your scope
as the last color it was set to.

31
00:02:18.980 --> 00:02:23.500
So something to keep an eye on.

32
00:02:23.500 --> 00:02:25.970
And just like with functions,

33
00:02:25.970 --> 00:02:31.199
it's the indentation that defines
what belongs to the for loop.

34
00:02:33.791 --> 00:02:36.648
&gt;&gt; Nina Zakharenko: If we want to
go through a sequence of numbers,

35
00:02:36.648 --> 00:02:39.448
there's a function in Python called range.

36
00:02:39.448 --> 00:02:45.210
And if we call it, we'll see this type.

37
00:02:45.210 --> 00:02:49.210
So range implicitly starts with zero and
ends at the provided number.

38
00:02:50.890 --> 00:02:54.580
And that provided number,
it's not inclusive of.

39
00:02:54.580 --> 00:02:58.850
So this will give us a range
of numbers from 0 to 4.

40
00:02:58.850 --> 00:03:03.820
But Python is kind of smart about it,
doesn't generate that whole list at once.

41
00:03:03.820 --> 00:03:07.830
As we go through the loop,
it kind of generates it as we need it.

42
00:03:07.830 --> 00:03:12.480
If we want to see what is
generated in this list, or

43
00:03:12.480 --> 00:03:17.520
in the range function under the hood,
we can pass it to list, and

44
00:03:17.520 --> 00:03:21.940
that will immediately
evaluate all of those.

45
00:03:21.940 --> 00:03:26.830
So just like before,
I can loop through a number

46
00:03:26.830 --> 00:03:30.870
in the range and print out the number.

47
00:03:30.870 --> 00:03:36.974
And this will print, 0, 1,
2, 3, 4, not inclusive of 5.

48
00:03:38.050 --> 00:03:42.160
For range, I can provide two values.

49
00:03:43.240 --> 00:03:47.730
The first is where to start,
the second is where to end.

50
00:03:47.730 --> 00:03:54.400
The start is inclusive, so in this range 1
is included in the numbers but 5 is not.

51
00:03:54.400 --> 00:03:56.290
5 is exclusive.

52
00:03:58.080 --> 00:04:00.138
Okay, so we got 1234.

53
00:04:02.484 --> 00:04:05.730
&gt;&gt; Nina Zakharenko: There's one other
value that you can pass to range.

54
00:04:06.800 --> 00:04:13.900
And that is a step argument, so that's,
how many numbers should I skip over by?

55
00:04:14.900 --> 00:04:19.671
So let's say I start at 1 and
end at 7 and do a step of 2, and

56
00:04:19.671 --> 00:04:24.077
you can also kind of explicitly
name this optionally.

57
00:04:24.077 --> 00:04:26.421
In that way it's a little
bit clearer to read.

58
00:04:26.421 --> 00:04:28.910
What do you think this will print out?

59
00:04:28.910 --> 00:04:32.739
&gt;&gt; Student: 1, 3, 5.

60
00:04:32.739 --> 00:04:34.819
&gt;&gt; Nina Zakharenko: Oops.

61
00:04:34.819 --> 00:04:42.020
So in Python 2, print was not a function,
it was a statement.

62
00:04:42.020 --> 00:04:44.980
And every once in a while
it catches me too.

63
00:04:46.470 --> 00:04:51.380
No, I'm sorry, range does not take
keyword arguments, it's just an order.

64
00:04:51.380 --> 00:04:57.001
So,
&gt;&gt; Nina Zakharenko: My apologies for that.

65
00:04:57.001 --> 00:05:00.220
Range takes three arguments,
and they're just positional.

