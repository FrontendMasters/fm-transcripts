WEBVTT

1
00:00:00.290 --> 00:00:02.140
&gt;&gt; Nina Zakharenko: Dictionaries and
Python.

2
00:00:02.140 --> 00:00:08.050
They're a useful type that allow us
to store our data in key value pairs.

3
00:00:08.050 --> 00:00:12.410
So someone brought up JSON,
JSON is key value pairs, right?

4
00:00:12.410 --> 00:00:16.080
So, perfect data structure for
storing and working with JSON.

5
00:00:17.490 --> 00:00:20.440
Dictionaries themselves are mutable,
you can add and

6
00:00:20.440 --> 00:00:22.470
remove items from a dictionary.

7
00:00:22.470 --> 00:00:27.848
But dictionary keys can only
be immutable types right.

8
00:00:27.848 --> 00:00:32.712
What happened when we try to
put immutable lists in our set?

9
00:00:34.232 --> 00:00:35.335
&gt;&gt; Nina Zakharenko: We got an error right?

10
00:00:35.335 --> 00:00:40.027
Unhashable type,
same thing with dictionaries,

11
00:00:40.027 --> 00:00:45.180
a dictionary key can only
be of immutable type.

12
00:00:45.180 --> 00:00:47.720
Because under the hood it
uses that hash function.

13
00:00:50.038 --> 00:00:53.224
&gt;&gt; Nina Zakharenko: We use dictionaries
when we wanna be able to quickly

14
00:00:53.224 --> 00:00:56.941
access additional data associated
with a particular key.

15
00:00:58.128 --> 00:01:02.388
&gt;&gt; Nina Zakharenko: Practical
application for dictionaries is JSON or

16
00:01:02.388 --> 00:01:04.969
something like memoization.

17
00:01:04.969 --> 00:01:10.163
Let's say that you wanna save computing
power, and store the result for

18
00:01:10.163 --> 00:01:14.860
a function called with a particular
set of immutable arguments.

19
00:01:16.040 --> 00:01:18.387
The arguments themselves could be a key,
and

20
00:01:18.387 --> 00:01:21.740
the result could be stored as
the value of a dictionary, right?

21
00:01:21.740 --> 00:01:23.504
Just like with sets,

22
00:01:23.504 --> 00:01:28.810
checking to see if a key in
a dictionary is a very fast operation.

23
00:01:30.400 --> 00:01:35.024
Like with list you don't have to say
let me check each key one by one,

24
00:01:35.024 --> 00:01:38.939
it's just, the key is in there or
not, it's very fast.

25
00:01:40.729 --> 00:01:45.778
&gt;&gt; Nina Zakharenko: We have our
dictionary cheat sheet right here,

26
00:01:45.778 --> 00:01:48.682
but let's kinda see them in

27
00:01:48.682 --> 00:01:53.985
practice
&gt;&gt; Nina Zakharenko: How

28
00:01:53.985 --> 00:01:55.065
do we make an empty dictionary?

29
00:01:55.065 --> 00:01:56.096
We already know this one.

30
00:01:56.096 --> 00:01:57.967
&gt;&gt; Class: Records.

31
00:01:57.967 --> 00:01:59.090
&gt;&gt; Nina Zakharenko: Right.

32
00:02:01.383 --> 00:02:04.000
&gt;&gt; Nina Zakharenko: And to confirm,
check the type, it's a dict.

33
00:02:04.000 --> 00:02:08.257
We can also, see, if the class is dict,

34
00:02:08.257 --> 00:02:13.536
we can also call dict like this,
also have a dict.

35
00:02:15.553 --> 00:02:19.534
&gt;&gt; Nina Zakharenko: Kind of for
all of these data structures.

36
00:02:19.534 --> 00:02:25.480
Generally you'll see them created with
the symbols and not with the methods.

37
00:02:25.480 --> 00:02:30.750
But, it's kind of an option in
you will see it used in code.

38
00:02:32.610 --> 00:02:35.780
Especially with empty set where
there's just is no other options.

39
00:02:40.077 --> 00:02:40.734
&gt;&gt; Nina Zakharenko: Okay.

40
00:02:42.958 --> 00:02:47.210
&gt;&gt; Nina Zakharenko: To create
dictionaries with items in them so,

41
00:02:47.210 --> 00:02:51.360
the brackets,
those kind of belong to sets.

42
00:02:51.360 --> 00:02:56.383
The thing that makes the dictionary
different than a set is a new symbol.

43
00:02:56.383 --> 00:03:00.871
And so, we're gonna make a dictionary,

44
00:03:00.871 --> 00:03:08.963
the key is on the left hand side followed
by a colon, followed by the value.

45
00:03:12.254 --> 00:03:13.562
&gt;&gt; Nina Zakharenko: So
that's a one item dictionary.

46
00:03:19.600 --> 00:03:24.010
&gt;&gt; Nina Zakharenko: Let's make a new one.

47
00:03:24.010 --> 00:03:29.180
This time let's reverse the order and
say the string one,

48
00:03:29.180 --> 00:03:35.460
the key one is mapped
to the value numeric 1.

49
00:03:35.460 --> 00:03:39.937
Let's do that with 2 and with 3.

50
00:03:41.971 --> 00:03:45.795
&gt;&gt; Nina Zakharenko: Notice that
the key value pairs in the dictionary

51
00:03:45.795 --> 00:03:47.852
are separated by commas.

52
00:03:49.185 --> 00:03:52.628
&gt;&gt; Nina Zakharenko: If we look at the type
of our nums it's a dictionary, and

53
00:03:52.628 --> 00:03:56.430
if we look in here we'll
see our key value pairs.

54
00:03:56.430 --> 00:04:01.067
Just a quick sidenote about
what can be used as keys.

55
00:04:01.067 --> 00:04:03.920
Here you've seen me use strings and
numbers, right?

56
00:04:03.920 --> 00:04:09.038
So, I can say a dictionary of 1 to 1,
that's just fine.

57
00:04:09.038 --> 00:04:16.401
I can have a mutable type as
the value in my dictionary just fine.

58
00:04:18.451 --> 00:04:22.715
&gt;&gt; Nina Zakharenko: What if I tried
to use the mutable type as the key to

59
00:04:22.715 --> 00:04:26.258
my dictionary, what's gonna happen.

60
00:04:26.258 --> 00:04:27.088
&gt;&gt; Class: Type error.

61
00:04:27.088 --> 00:04:31.250
&gt;&gt; Nina Zakharenko: Unhashable type list,
right?

62
00:04:32.720 --> 00:04:37.463
Only immutable types can
be used as dictionary keys.

63
00:04:42.084 --> 00:04:44.946
&gt;&gt; Nina Zakharenko: But it doesn't matter
for the values, the values can be mutable,

64
00:04:44.946 --> 00:04:46.390
inmutable, whatever you want.

65
00:04:48.889 --> 00:04:51.969
&gt;&gt; Nina Zakharenko: Okay so,
just like with a set,

66
00:04:51.969 --> 00:04:56.351
the keys of our dictionary
are not ordered,

67
00:04:56.351 --> 00:05:01.930
they're not at position 1 or
0 or anything like that.

68
00:05:03.440 --> 00:05:07.320
Instead, our dictionary
contains key value pairs.

69
00:05:07.320 --> 00:05:10.838
So looking back at our nums dictionary,

70
00:05:10.838 --> 00:05:15.602
how do you think I might access
the value for the key 1?

71
00:05:15.602 --> 00:05:17.267
&gt;&gt; Class: With the key.

72
00:05:17.267 --> 00:05:21.742
&gt;&gt; Nina Zakharenko: With the key, exactly
right, and so just like with a list where

73
00:05:21.742 --> 00:05:28.140
I used this square bracket notation to
say, give me the item at this position.

74
00:05:28.140 --> 00:05:31.406
With the dictionary instead
you put the key in there.

75
00:05:34.160 --> 00:05:35.911
&gt;&gt; Nina Zakharenko: You put in the key and
get back the value.

76
00:05:42.528 --> 00:05:46.183
&gt;&gt; Nina Zakharenko: Okay,
what if I try to access, let's say,

77
00:05:57.806 --> 00:05:58.730
&gt;&gt; Nina Zakharenko: What if I try

78
00:05:58.730 --> 00:06:02.710
to access nums at position 0,
what am I gonna get?

79
00:06:04.080 --> 00:06:07.090
Do dictionaries have a sequence or
an order to them?

80
00:06:07.090 --> 00:06:09.241
No, you get a KeyError.

81
00:06:09.241 --> 00:06:11.430
Says 0 is not in my dictionary.

82
00:06:12.540 --> 00:06:14.763
If it was,
then I would get something back, but

83
00:06:14.763 --> 00:06:16.608
that's kind of coincidence, right?

84
00:06:19.637 --> 00:06:21.830
&gt;&gt; Nina Zakharenko: So,
it's something to be mindful of.

85
00:06:25.156 --> 00:06:30.368
&gt;&gt; Nina Zakharenko: If we try to access
an item that's not in the dictionary,

86
00:06:30.368 --> 00:06:35.156
we're gonna get a key error,
just like we saw here.

87
00:06:35.156 --> 00:06:39.851
But remember with our set, there was
a discard method that allowed us to

88
00:06:39.851 --> 00:06:43.190
remove something from
the site if it was in there.

89
00:06:43.190 --> 00:06:46.150
And if it wasn't,
instead of giving us this noisy error,

90
00:06:46.150 --> 00:06:48.621
it would just kinda return nothing.

91
00:06:50.320 --> 00:06:54.811
Dictionaries have these too,
so looking at my nums.

92
00:06:54.811 --> 00:07:00.308
If I called nums.get with a key

93
00:07:00.308 --> 00:07:05.810
that's not present no error.

94
00:07:07.760 --> 00:07:14.870
What do I see if I try to
access the key for a nums?

95
00:07:14.870 --> 00:07:15.860
&gt;&gt; Class: Key error.

96
00:07:15.860 --> 00:07:16.360
&gt;&gt; Nina Zakharenko: Key error.

97
00:07:18.287 --> 00:07:19.094
&gt;&gt; Nina Zakharenko: Got it?

98
00:07:19.094 --> 00:07:23.326
So two different ways of accessing items,
one throws an explicit error,

99
00:07:23.326 --> 00:07:24.154
one does not.

100
00:07:27.221 --> 00:07:29.348
&gt;&gt; Nina Zakharenko: The nice
thing about get is,

101
00:07:29.348 --> 00:07:34.590
we can also provide a default value
to return if the key is not present.

102
00:07:35.850 --> 00:07:39.460
So, looking at my dictionary of nums.

103
00:07:40.790 --> 00:07:49.457
What happens if I call nums.get1,
&gt;&gt; Nina Zakharenko: The number 1?

104
00:07:49.457 --> 00:07:53.378
nums.get|"four"|?

105
00:07:53.378 --> 00:07:56.360
Turns nothing one, right, or non-type.

106
00:07:56.360 --> 00:08:00.166
Now I can provide
an optional argument to get.

107
00:08:00.166 --> 00:08:06.820
And say, if this key is not present,
return this default value instead.

108
00:08:09.435 --> 00:08:13.450
&gt;&gt; Nina Zakharenko: Okay, so
what if I call nums.get"one" but

109
00:08:13.450 --> 00:08:18.002
also provide a default value,
which on will I get?

110
00:08:18.002 --> 00:08:18.904
&gt;&gt; Class: Your 1.

111
00:08:18.904 --> 00:08:23.677
&gt;&gt; Nina Zakharenko: Get 1, all right,
so that says give me the value for

112
00:08:23.677 --> 00:08:26.184
that key if it's present.

113
00:08:26.184 --> 00:08:30.140
If it's not,
here's the default value instead,

114
00:08:30.140 --> 00:08:33.002
pretty nice handy little short cut.

