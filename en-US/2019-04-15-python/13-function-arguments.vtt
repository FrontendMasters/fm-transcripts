WEBVTT

1
00:00:00.860 --> 00:00:04.708
&gt;&gt; Nina Zakharenko: Okay, so we've
talked about calling functions with and

2
00:00:04.708 --> 00:00:06.158
without arguments.

3
00:00:06.158 --> 00:00:10.450
And you also know how to store
the returned value of a function, right?

4
00:00:10.450 --> 00:00:15.179
You just assign it to a variable
just like anything else.

5
00:00:15.179 --> 00:00:17.453
Okay, let's talk about Function Arguments.

6
00:00:21.327 --> 00:00:27.645
&gt;&gt; Nina Zakharenko: So
let's say I have my add number

7
00:00:27.645 --> 00:00:33.262
function and it takes an x and

8
00:00:33.262 --> 00:00:38.421
a y and it returns, x + y.

9
00:00:38.421 --> 00:00:42.410
If I can add numbers with 3 and
5, I'll get an 8.

10
00:00:44.270 --> 00:00:51.940
What if I call add numbers without
passing in the second parameter?

11
00:00:51.940 --> 00:00:53.690
What kind of error do I get?

12
00:00:56.205 --> 00:01:01.040
Y'all have a rupple so y'all have
the answers right under your fingertips.

13
00:01:01.040 --> 00:01:02.530
&gt;&gt; Student: It's the argument?

14
00:01:02.530 --> 00:01:04.720
&gt;&gt; Nina Zakharenko: That's right, so

15
00:01:04.720 --> 00:01:09.220
it’s a type error, that’s the class,
see that right here.

16
00:01:10.680 --> 00:01:13.924
It's missing one required
positional argument, and

17
00:01:13.924 --> 00:01:16.187
helpfully it even tells us which one.

18
00:01:21.617 --> 00:01:25.940
&gt;&gt; Nina Zakharenko: So any arguments
defined this way are required.

19
00:01:27.760 --> 00:01:32.663
And it doesn't matter what order you pass
them in, when you call them they're just

20
00:01:32.663 --> 00:01:36.040
gonna be x and y in order within
the scope of the function.

21
00:01:38.570 --> 00:01:43.025
&gt;&gt; Nina Zakharenko: Python also has key
word arguments with default values.

22
00:01:43.025 --> 00:01:47.604
Which is really helpful, we can optionally
pass in the argument if we want.

23
00:01:47.604 --> 00:01:52.116
If we don't want to,
there is a default available for us.

24
00:01:52.116 --> 00:01:57.247
So let's say we have a function
called say_greeting,

25
00:01:57.247 --> 00:02:00.423
and it takes a greeting and a name.

26
00:02:02.767 --> 00:02:11.292
&gt;&gt; Nina Zakharenko: And we're gonna print
out the f string of {greeting}, {name}.

27
00:02:13.142 --> 00:02:16.240
&gt;&gt; Nina Zakharenko: Is everyone
getting the hand of these f strings?

28
00:02:16.240 --> 00:02:18.020
Yeah, awesome, I thought so.

29
00:02:20.673 --> 00:02:27.031
&gt;&gt; Nina Zakharenko: Okay, so I can call,
say, greeting with hello and Nina.

30
00:02:27.031 --> 00:02:28.152
It'll print out Hello, Nina.

31
00:02:30.640 --> 00:02:34.560
&gt;&gt; Nina Zakharenko: Let's say I didn't
want to pass in Hello all the time.

32
00:02:34.560 --> 00:02:39.651
Hello was be used most of the time by
default when calling this function.

33
00:02:39.651 --> 00:02:43.633
But I wanted to have the option of
changing my greeting if I wanted to.

34
00:02:45.420 --> 00:02:48.248
&gt;&gt; Nina Zakharenko: So
we're gonna make a new function.

35
00:02:51.540 --> 00:02:55.432
&gt;&gt; Nina Zakharenko: We're
going to call it say greeting.

36
00:02:55.432 --> 00:02:59.930
If I define those function in the rupple,
just know that it will overwrite the other

37
00:02:59.930 --> 00:03:04.060
function I've defined here, and
that's because they have the same name.

38
00:03:05.870 --> 00:03:08.898
So now I'm going to take a name, right,

39
00:03:08.898 --> 00:03:13.006
cuz that's kind of the variable
of the equation here.

40
00:03:13.006 --> 00:03:17.032
And I'm also gonna provide
a default argument.

41
00:03:17.032 --> 00:03:21.453
Default arguments or arguments with
default values always come last.

42
00:03:27.642 --> 00:03:32.619
&gt;&gt; Nina Zakharenko: To pass in a default
argument, you just give it a name, equals,

43
00:03:32.619 --> 00:03:37.425
and then a string or a number,
kind of whatever you want here.

44
00:03:38.645 --> 00:03:42.696
And I'm gonna print out
the same thing I did before.

45
00:03:49.043 --> 00:03:53.430
&gt;&gt; Nina Zakharenko: Okay,
now I can call say greeting with Nina.

46
00:03:53.430 --> 00:03:58.201
What will this print out?

47
00:04:02.158 --> 00:04:03.183
&gt;&gt; Student2: Hello, Nina.

48
00:04:03.183 --> 00:04:04.978
&gt;&gt; Nina Zakharenko: That's right, why?

49
00:04:04.978 --> 00:04:07.100
Because hello is our default argument.

50
00:04:08.740 --> 00:04:14.109
I can also pass in a greeting now.

51
00:04:14.109 --> 00:04:16.234
Let's say Bonjour.

52
00:04:18.319 --> 00:04:22.859
&gt;&gt; Nina Zakharenko: So unlike the required
arguments where I had to have the exact

53
00:04:22.859 --> 00:04:29.120
right amount or I got an error,
this default argument, it's optional.

54
00:04:29.120 --> 00:04:33.990
If I don't provide it, I will get
the default value specified here.

55
00:04:33.990 --> 00:04:36.755
But if I do, that gets overwritten.

56
00:04:39.433 --> 00:04:41.749
&gt;&gt; Nina Zakharenko: It's really useful,
right?

57
00:04:41.749 --> 00:04:43.900
I use this a ton in my code.

58
00:04:46.935 --> 00:04:53.780
&gt;&gt; Nina Zakharenko: Just make sure that
your default arguments always come last.

59
00:04:53.780 --> 00:04:57.364
If you don't declare them in this way,
you're going to get a syntax error.

60
00:05:00.349 --> 00:05:03.910
&gt;&gt; Nina Zakharenko: And
just quickly show you what that is.

61
00:05:03.910 --> 00:05:08.715
Say I had a say_greeting_bad and

62
00:05:08.715 --> 00:05:14.182
I tried to say greeting='Hello' and

63
00:05:14.182 --> 00:05:19.328
then the required argument of name.

64
00:05:19.328 --> 00:05:21.002
Let me give it a.

65
00:05:25.747 --> 00:05:27.828
&gt;&gt; Nina Zakharenko: Let me give
the function some content so

66
00:05:27.828 --> 00:05:30.160
it doesn't error out early.

67
00:05:30.160 --> 00:05:34.540
We'll see here syntax error, non-default
argument follows default argument.

68
00:05:36.210 --> 00:05:39.233
And now you all know what that means,
right, wrong order.

69
00:05:46.309 --> 00:05:50.013
&gt;&gt; Nina Zakharenko: In my
say_greeting function here,

70
00:05:50.013 --> 00:05:54.674
do I still have to provide
this name argument?

71
00:05:57.929 --> 00:05:59.350
&gt;&gt; Nina Zakharenko: What
do you guys think?

72
00:05:59.350 --> 00:06:00.451
&gt;&gt; Student3: You mean when you call it?

73
00:06:00.451 --> 00:06:01.480
&gt;&gt; Nina Zakharenko: Yes.
&gt;&gt; Student3: Yes.

74
00:06:01.480 --> 00:06:02.810
&gt;&gt; Nina Zakharenko: Okay, I do, right,

75
00:06:02.810 --> 00:06:06.320
because positional arguments
are always required.

76
00:06:06.320 --> 00:06:11.432
If I try to call say_greeting with
nothing, then I get my type error,

77
00:06:11.432 --> 00:06:14.822
missing one required positional parameter.

78
00:06:14.822 --> 00:06:18.080
So introducing default arguments
doesn't change anything about that.

79
00:06:21.320 --> 00:06:28.760
But you can also pass in none, some, or
all of the keyword arguments, right?

80
00:06:28.760 --> 00:06:31.791
Keyword arguments are optional.

81
00:06:31.791 --> 00:06:40.168
So earlier today we saw a function
that created a query for

82
00:06:40.168 --> 00:06:46.120
the GitHub API and it took a few QR tasks.

83
00:06:46.120 --> 00:06:48.940
Let's say the language is JavaScript.

84
00:06:48.940 --> 00:06:53.604
The minimum number of stars is 50 and

85
00:06:53.604 --> 00:06:56.676
the sort is descending.

86
00:06:59.850 --> 00:07:03.903
&gt;&gt; Nina Zakharenko: Now
we can return a f string.

87
00:07:03.903 --> 00:07:10.719
Let's just say the language
is the language,

88
00:07:10.719 --> 00:07:17.369
followed by the number of stars and
the sort.

89
00:07:22.357 --> 00:07:25.321
&gt;&gt; Nina Zakharenko: What will I see
printed out if I call this with no

90
00:07:25.321 --> 00:07:26.157
arguments?

91
00:07:30.730 --> 00:07:32.841
&gt;&gt; Student3: You'll see
the default values.

92
00:07:32.841 --> 00:07:34.942
&gt;&gt; Nina Zakharenko: The default values,
that's exactly right.

93
00:07:34.942 --> 00:07:38.340
It's JavaScript 50 and descending.

94
00:07:40.030 --> 00:07:42.638
But I can pass in none.

95
00:07:42.638 --> 00:07:46.610
One, let's say I want
the language to be Python.

96
00:07:47.910 --> 00:07:51.257
What will the sort and
the number of stars be?

97
00:07:51.257 --> 00:07:52.041
You guys?
&gt;&gt; Student: 50.

98
00:07:52.041 --> 00:07:59.562
&gt;&gt; Nina Zakharenko: Yep,
I can also pass in all of these arguments.

99
00:08:03.222 --> 00:08:05.876
&gt;&gt; Nina Zakharenko: And notice that
they don't have to be in the same order,

100
00:08:05.876 --> 00:08:07.630
that's because they're labeled.

101
00:08:09.265 --> 00:08:15.927
Right, so I'm being very explicit
about what I'm passing in.

102
00:08:15.927 --> 00:08:20.940
You can also,
let's say I had a function foo here.

103
00:08:20.940 --> 00:08:25.953
It took one positional argument and

104
00:08:25.953 --> 00:08:29.301
one default argument.

105
00:08:32.243 --> 00:08:36.937
&gt;&gt; Nina Zakharenko: I can also use
the label of the positional argument if I

106
00:08:36.937 --> 00:08:38.800
wanted to.

107
00:08:38.800 --> 00:08:41.569
So I could call foo with 3.

108
00:08:41.569 --> 00:08:49.260
That just automatically sets a to 3
within this function, and b to 5.

109
00:08:49.260 --> 00:08:57.515
I could call foo,
&gt;&gt; Nina Zakharenko: By

110
00:08:57.515 --> 00:09:03.161
setting 3 in the right position and
then passing in b as 6.

111
00:09:03.161 --> 00:09:08.443
In Python also if you just wanna be
extra explicit about what you're doing,

112
00:09:08.443 --> 00:09:11.092
you can pass in the label of A, right?

113
00:09:11.092 --> 00:09:14.538
So the positional argument you
can pass in that label and

114
00:09:14.538 --> 00:09:19.100
you can pass on the label of the keyword
argument, it does the same thing.

