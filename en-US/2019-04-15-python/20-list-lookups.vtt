WEBVTT

1
00:00:00.016 --> 00:00:03.900
&gt;&gt; Nina Zakharenko: If we wanna look for
items, we have a few ways of doing that.

2
00:00:05.350 --> 00:00:07.020
But you have to remember that looking for

3
00:00:07.020 --> 00:00:10.460
an item in a list is actually
a really slow operation.

4
00:00:10.460 --> 00:00:12.590
That's because under the hood,

5
00:00:12.590 --> 00:00:17.020
each value is checked to be like are you
the right one, are you the right one?

6
00:00:17.020 --> 00:00:19.823
No, okay, let me look at the next one,
are you the right one, right?

7
00:00:19.823 --> 00:00:23.790
And so for a large list,
that can take some time.

8
00:00:25.417 --> 00:00:29.368
&gt;&gt; Nina Zakharenko: So
to check if an item is in the list and

9
00:00:29.368 --> 00:00:35.140
at which position there's
a few ways of doing that.

10
00:00:35.140 --> 00:00:41.670
So I'm gonna make a new list of names,

11
00:00:41.670 --> 00:00:48.338
I'm gonna put four items in it
&gt;&gt; Nina Zakharenko: Now, purposefully

12
00:00:48.338 --> 00:00:53.920
the last item that I'm putting in this
list is the same as the first item.

13
00:00:53.920 --> 00:00:56.800
So if you're making
your own list of names,

14
00:00:56.800 --> 00:00:59.550
make sure the pattern
that same kind of caveat.

15
00:01:03.960 --> 00:01:07.103
&gt;&gt; Nina Zakharenko: We can use the in
keyword to determine if a value or

16
00:01:07.103 --> 00:01:10.470
an item is present in the list or not.

17
00:01:10.470 --> 00:01:15.840
So I can say here's
the value of a variable and

18
00:01:15.840 --> 00:01:21.680
then I can use the in keyword and ask is
Rose in names and I'll get back false.

19
00:01:23.780 --> 00:01:27.450
If I try the same thing with Nina,
will get back true.

20
00:01:28.830 --> 00:01:33.150
So true and
false are Python's Boolian values, right?

21
00:01:34.190 --> 00:01:37.830
They're built in types,
they're always available, right?

22
00:01:40.940 --> 00:01:46.170
So when I asked if Nina was in names,
Python said true, which means yes.

23
00:01:46.170 --> 00:01:50.030
When I asked if Rose was in names,
Python said false, which means no.

24
00:01:53.390 --> 00:01:57.619
&gt;&gt; Nina Zakharenko: You can also
use the index method on the list to

25
00:01:57.619 --> 00:02:02.560
find the first index of a potential match.

26
00:02:02.560 --> 00:02:09.570
So if I call names.index("Max"),
I'm gonna get the index of 1.

27
00:02:09.570 --> 00:02:17.970
If I call names.index("Nina"),
what am I gonna get, what?

28
00:02:17.970 --> 00:02:19.930
&gt;&gt; Student: One, or zero, yeah I'm sorry.

29
00:02:19.930 --> 00:02:22.020
&gt;&gt; Nina Zakharenko: Zero,
that's right, zero.

30
00:02:23.630 --> 00:02:26.380
It's only in the first result.

31
00:02:26.380 --> 00:02:31.160
Even though Nina is repeated again

32
00:02:31.160 --> 00:02:35.120
at the end of the list, using index
will only give me the first result.

33
00:02:36.920 --> 00:02:40.530
If you want to figure out how many
times an item appears on a list,

34
00:02:40.530 --> 00:02:42.540
you can use the count method.

35
00:02:42.540 --> 00:02:47.510
So names.count of Max will be 1.

36
00:02:47.510 --> 00:02:51.596
Names.count of Nina will be what?

37
00:02:51.596 --> 00:02:53.932
2, okay cool.

38
00:02:57.235 --> 00:03:01.056
&gt;&gt; Nina Zakharenko: So I already showed
you how to update items at a position,

39
00:03:01.056 --> 00:03:01.890
right?

40
00:03:01.890 --> 00:03:07.230
If I wanted to change the very
first item in that list to be,

41
00:03:07.230 --> 00:03:11.330
I already showed you how to update
items at a position, right?

42
00:03:11.330 --> 00:03:17.680
If I wanted to changed the very
first item in that list to be

43
00:03:17.680 --> 00:03:22.800
at Jimmy,
I can just do that by using the index and

44
00:03:22.800 --> 00:03:24.740
if we take a look we'll see our new list,
right?

45
00:03:27.070 --> 00:03:32.215
&gt;&gt; Nina Zakharenko: You can also
use this in combination with .index

46
00:03:32.215 --> 00:03:36.540
to find the value that you wanna change.

47
00:03:36.540 --> 00:03:42.290
So let's say I want to
replace Phillip with Floyd.

48
00:03:42.290 --> 00:03:47.610
I can say the position that I
want is names.index of Phillip.

49
00:03:51.040 --> 00:03:59.626
And then, I can update my names
list at the returned position,

50
00:03:59.626 --> 00:04:03.847
oops, Floyd one l or two l's?

51
00:04:03.847 --> 00:04:07.149
&gt;&gt; Student: One
&gt;&gt; Nina Zakharenko: One l, okay, oops,

52
00:04:07.149 --> 00:04:09.780
okay, I got a name error.

53
00:04:09.780 --> 00:04:12.430
The name Floyd is not defined,
why did that happen?

54
00:04:13.540 --> 00:04:14.552
&gt;&gt; Student: No quotes around it.

55
00:04:14.552 --> 00:04:17.610
&gt;&gt; Nina Zakharenko: Right,
I forgot to put quotes around it.

56
00:04:17.610 --> 00:04:21.270
So Python thinks that it's
a variable that I haven't declared,

57
00:04:21.270 --> 00:04:23.120
but really I just forgot my quotes.

58
00:04:24.440 --> 00:04:27.660
Okay, so taking a look at
our names now we'll see that

59
00:04:32.340 --> 00:04:36.080
Philip has been replaced with Floyd
at the position that we found.

60
00:04:39.030 --> 00:04:41.136
&gt;&gt; Nina Zakharenko: And
just like we saw earlier,

61
00:04:41.136 --> 00:04:46.430
so I have our list of names right
the length of the names is four.

62
00:04:46.430 --> 00:04:52.910
If I tried to update an item at index 4,
it's not a valid index, right?

63
00:04:52.910 --> 00:04:55.290
Our index that we count from starts at 0.

64
00:04:58.762 --> 00:05:00.488
&gt;&gt; Nina Zakharenko: I'm
gonna get an error,

65
00:05:00.488 --> 00:05:04.776
an index error that the list
assignment index is out of range.

