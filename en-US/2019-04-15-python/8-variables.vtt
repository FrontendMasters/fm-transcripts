WEBVTT

1
00:00:00.180 --> 00:00:04.230
&gt;&gt; Nina Zakharenko: Variables in Python,
they allow us to store information and

2
00:00:04.230 --> 00:00:09.260
give it a useful label that we can then
use to retrieve the information later.

3
00:00:09.260 --> 00:00:11.690
We can use these variables
to store strings,

4
00:00:11.690 --> 00:00:15.580
numbers, or even more advanced data types,
lists, etc.

5
00:00:17.600 --> 00:00:22.240
We assign values to variables by putting
them at the right of an equal sign.

6
00:00:22.240 --> 00:00:25.610
So the variable name is on
the left side equal sign

7
00:00:25.610 --> 00:00:27.970
followed by the thing
that you're assigning.

8
00:00:29.280 --> 00:00:32.950
And because Python is a dynamic language,
we don't need to declare

9
00:00:32.950 --> 00:00:37.410
the type of the variable
before we store data in them.

10
00:00:37.410 --> 00:00:45.330
So, I can make x a number, I can make x
the string, doesn't matter, no errors.

11
00:00:45.330 --> 00:00:48.870
I think for you JavaScript folks,
you're like yeah, whatever.

12
00:00:48.870 --> 00:00:53.490
But if you come from like, Java or
.Net, or a compiled language,

13
00:00:53.490 --> 00:00:55.670
it's kind of a big deal, right?

14
00:00:59.220 --> 00:01:00.740
When creating variables in python,

15
00:01:00.740 --> 00:01:04.636
there are a few best practices you
should follow, we talked about PEP 8.

16
00:01:04.636 --> 00:01:10.420
So PEP 8 convention says that
names should all be in lower case,

17
00:01:10.420 --> 00:01:13.160
whole words separated by an underscore.

18
00:01:14.370 --> 00:01:19.060
So if I wanted to say my list,
I can do that, right?

19
00:01:20.530 --> 00:01:22.400
This is the convention
you all see followed.

20
00:01:23.900 --> 00:01:27.460
In general, it's okay to be
a little bit verbose, for example,

21
00:01:27.460 --> 00:01:29.610
x is not a great variable name, right?

22
00:01:29.610 --> 00:01:32.494
Unless you're doing some sort
of mathematical operation,

23
00:01:32.494 --> 00:01:35.010
x doesn't necessarily makes sense.

24
00:01:35.010 --> 00:01:39.030
We're gonna use some shorter variables
names just today for the sake of time and

25
00:01:39.030 --> 00:01:39.540
typing.

26
00:01:39.540 --> 00:01:41.910
But in your programs,
it's okay to name things.

27
00:01:43.970 --> 00:01:48.120
It's okay to name things you
know as descriptive as you like.

28
00:01:50.180 --> 00:01:54.220
There are few other naming gotchas
like you can't name your variable with

29
00:01:55.670 --> 00:01:57.000
operations in Python.

30
00:01:57.000 --> 00:01:59.510
Like don't name your variable, ands.

31
00:02:00.550 --> 00:02:05.660
But in general,
as long as you're variable name

32
00:02:05.660 --> 00:02:09.140
is pretty descriptive,
then you'll be fine.

33
00:02:10.300 --> 00:02:13.600
We talked about the type
function a little bit.

34
00:02:13.600 --> 00:02:17.020
So if I look at type of x,
we'll see that it's a stir.

35
00:02:18.020 --> 00:02:22.380
And then just to mention
one special type in Python,

36
00:02:22.380 --> 00:02:26.580
you might have seen it called
null in other languages, right?

37
00:02:26.580 --> 00:02:30.360
It signifies nothing, no value.

38
00:02:30.360 --> 00:02:32.180
And in Python, that type is none.

39
00:02:33.970 --> 00:02:40.706
So, if I set my variable x to none, and
I try to just enter the variable and

40
00:02:40.706 --> 00:02:48.342
press enter in the wrapper which should
show me some results, I'll see nothing.

41
00:02:48.342 --> 00:02:51.429
And if I check the type of x,
I'll see that it's nonetype.

42
00:02:54.980 --> 00:03:01.230
And if I set my variable to
something that's not nonetype

43
00:03:01.230 --> 00:03:06.160
in the REPL only, I can just type that
variable and instantly see the value.

