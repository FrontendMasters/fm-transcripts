WEBVTT

1
00:00:00.230 --> 00:00:03.170
&gt;&gt; Nina Zakharenko: Well, we'll talk
a little bit more about this later but

2
00:00:03.170 --> 00:00:07.900
I wanna introduce it as I
introduced the concept.

3
00:00:07.900 --> 00:00:13.900
You never ever want to use mutable types
like list as your default arguments?

4
00:00:13.900 --> 00:00:16.790
And it's okay if you don't know
what that means right now.

5
00:00:16.790 --> 00:00:24.990
I'm just gonna show you that if you
use an argument that can be changed,

6
00:00:24.990 --> 00:00:29.940
like a list, as your default argument,
you're gonna have a very bad time.

7
00:00:29.940 --> 00:00:35.710
Because you would think that these
default arguments get kind of created or

8
00:00:35.710 --> 00:00:40.760
instantiated every time you call the
function, but that's not true, actually.

9
00:00:40.760 --> 00:00:47.880
They only get created every time
the function is called, or I'm sorry, they

10
00:00:47.880 --> 00:00:52.660
get created the first time the function
is called and then that value is shared.

11
00:00:52.660 --> 00:00:57.690
So I've seen this by so
many beginner Python programmers.

12
00:00:57.690 --> 00:01:02.876
So like warning, don't do this.

13
00:01:02.876 --> 00:01:08.130
And we'll talk about lists and the methods
that we're gonna use a little bit later.

14
00:01:08.130 --> 00:01:12.670
So let's say I had a function foo and

15
00:01:12.670 --> 00:01:20.160
it took one default parameter a,
and a is a list, oops, sorry.

16
00:01:20.160 --> 00:01:25.950
I'm gonna make it take t parameters,
a is an item,

17
00:01:25.950 --> 00:01:30.750
just a regular positional argument,
b is a list, and

18
00:01:30.750 --> 00:01:36.740
then I'm going to append
the value of a to b, okay?

19
00:01:38.490 --> 00:01:46.040
So if I call this foo with five,
sorry, I forgot something.

20
00:01:46.040 --> 00:01:48.780
My function doesn't do anything,
why is that?

21
00:01:50.214 --> 00:01:50.870
&gt;&gt; Speaker 2: There's no return.

22
00:01:50.870 --> 00:01:52.150
&gt;&gt; Nina Zakharenko: There's no return,
right.

23
00:01:55.010 --> 00:01:58.030
So I can do a return or

24
00:01:58.030 --> 00:02:03.380
I can just print out something,
so I'm gonna do a print for now.

25
00:02:04.750 --> 00:02:09.220
Okay, if I call foo with five
we'll see that b is five.

26
00:02:10.510 --> 00:02:15.250
If I call foo again with six, we'll see
that our list b is now five and six.

27
00:02:17.490 --> 00:02:21.530
So it's just using the same list over and

28
00:02:21.530 --> 00:02:25.790
over not doing what we expect it to.

29
00:02:25.790 --> 00:02:32.580
So if we want to kind of use an empty list
or just use the centino value instead.

30
00:02:32.580 --> 00:02:34.410
You can say b equals none, right?

31
00:02:34.410 --> 00:02:36.240
And then in your code check and

32
00:02:36.240 --> 00:02:40.620
then say if b is none then make
a new list within my function code.

33
00:02:41.920 --> 00:02:42.670
Everyone got that?

34
00:02:43.810 --> 00:02:48.990
I've been bitten by this bug so many times
even after I've been doing Python for

35
00:02:48.990 --> 00:02:51.550
years, okay.

36
00:02:51.550 --> 00:02:58.170
So, naming our functions and arguments,
because Python is a dynamic language,

37
00:02:58.170 --> 00:03:02.859
we have to be really mindful
of how we name things.

38
00:03:04.060 --> 00:03:08.199
Sometimes it's also called duck typed,
which I think is a pretty funny name.

39
00:03:09.557 --> 00:03:12.478
&gt;&gt; Nina Zakharenko: As I'm
typing here in the ripple,

40
00:03:12.478 --> 00:03:16.120
I'm trying to show you concepts quickly.

41
00:03:16.120 --> 00:03:19.530
It's okay,
if I call things foo and a and b.

42
00:03:19.530 --> 00:03:22.470
Generally, you don't wanna do
this in your production code.

43
00:03:22.470 --> 00:03:24.440
You wanna name your functions and

44
00:03:24.440 --> 00:03:29.310
your variables, in what's being done
with them as explicitly as possible.

45
00:03:30.640 --> 00:03:36.190
For example, maybe x and y are common
names in a mathematical operation,

46
00:03:36.190 --> 00:03:41.910
but besides for that unless they're gonna
be easily recognized, you don't really

47
00:03:41.910 --> 00:03:46.260
want to name your things x,
y, a, b [LAUGH].

48
00:03:46.260 --> 00:03:51.010
Because for example,
who has looked at some production code and

49
00:03:51.010 --> 00:03:53.690
they're like, my God, who wrote this?

50
00:03:53.690 --> 00:03:57.580
This is horrible and
then they did a get blame and

51
00:03:57.580 --> 00:04:00.335
it's like, I wrote it a year ago.

52
00:04:00.335 --> 00:04:03.420
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Nina Zakharenko: Okay, yeah,

53
00:04:03.420 --> 00:04:05.250
some laughs, yeah.

54
00:04:05.250 --> 00:04:07.030
I definitely have done that, right?

55
00:04:09.366 --> 00:04:13.178
&gt;&gt; Nina Zakharenko: You tend to forget, so
by being as explicit as possible the first

56
00:04:13.178 --> 00:04:16.848
time around, not only are you
being kind to your future self,

57
00:04:16.848 --> 00:04:19.480
you're also being kind to your coworkers.

58
00:04:23.140 --> 00:04:26.710
I put a link into a talk
that I really like,

59
00:04:26.710 --> 00:04:30.760
a conference talk that you can watch
after the course called the naming

60
00:04:30.760 --> 00:04:35.410
of Darkseid dynamic type smart
conventions by Brandon Rhodes.

61
00:04:35.410 --> 00:04:40.500
And he dive into this half an hour or
45 minutes just talking about

62
00:04:40.500 --> 00:04:44.430
how do we do a good job of naming
things in a dynamic language.

