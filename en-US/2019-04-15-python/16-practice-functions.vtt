WEBVTT

1
00:00:05.853 --> 00:00:08.438
&gt;&gt; Nina Zakharenko: Talking
about functions,

2
00:00:08.438 --> 00:00:13.727
we're gonna create a basic function,
add_numbers.

3
00:00:13.727 --> 00:00:21.137
It's gonna take two arguments, x and y,
and we're going to return x + y, right?

4
00:00:21.137 --> 00:00:28.086
So we can call add_numbers on any
integers, or floats, or whatever.

5
00:00:28.086 --> 00:00:31.408
If we also made some variables,

6
00:00:31.408 --> 00:00:36.207
we can call add_numbers
with the variables,

7
00:00:36.207 --> 00:00:40.398
right, and still get the right result.

8
00:00:43.701 --> 00:00:48.704
&gt;&gt; Nina Zakharenko: Now,
remember the importance of whitespace.

9
00:00:48.704 --> 00:00:52.248
If you try to make a function, and

10
00:00:52.248 --> 00:00:56.553
you don't do the level of indentation,

11
00:00:56.553 --> 00:01:01.881
you're gonna get an indentation error,
right?

12
00:01:01.881 --> 00:01:07.326
Gonna say, expected an indented block,
you didn't provide one.

13
00:01:07.326 --> 00:01:10.742
That's one of the things I
really love about Python.

14
00:01:10.742 --> 00:01:15.211
As the language has grown, the error
messages have gotten a lot simpler, and

15
00:01:15.211 --> 00:01:16.876
more descriptive, right?

16
00:01:16.876 --> 00:01:18.426
Now that you know the terminology for

17
00:01:18.426 --> 00:01:20.930
these things,
the errors are pretty easy to read, right?

18
00:01:20.930 --> 00:01:24.097
It expected an indented block,
and you didn't provide one.

19
00:01:25.560 --> 00:01:29.416
&gt;&gt; Nina Zakharenko: Okay, so
a little bit about function scope, and

20
00:01:29.416 --> 00:01:35.354
then I'm gonna show you something else
that was not part of this exercise.

21
00:01:35.354 --> 00:01:40.814
So I declared x = 1, y = 2,
&gt;&gt; Nina Zakharenko: I have

22
00:01:40.814 --> 00:01:45.892
an add_numbers method here,
&gt;&gt; Nina Zakharenko: I'm

23
00:01:45.892 --> 00:01:50.253
gonna say, an f-string,

24
00:01:50.253 --> 00:01:55.182
inside the function, x is x and

25
00:01:55.182 --> 00:02:00.024
y is y,
&gt;&gt; Nina Zakharenko: And

26
00:02:00.024 --> 00:02:02.173
I'm gonna return x+y.

27
00:02:09.451 --> 00:02:16.244
&gt;&gt; Nina Zakharenko: Okay, so
printing out outside of the function,

28
00:02:16.244 --> 00:02:21.890
x is x, y is y, what was the result here?

29
00:02:24.688 --> 00:02:26.965
&gt;&gt; Nina Zakharenko: What will I see for
x and y?

30
00:02:26.965 --> 00:02:27.717
&gt;&gt; class: 1 and 2.

31
00:02:27.717 --> 00:02:34.199
&gt;&gt; Nina Zakharenko: 1 and 2, whoops,
&gt;&gt; Nina Zakharenko: I

32
00:02:34.199 --> 00:02:37.475
have an invalid syntax.

33
00:02:37.475 --> 00:02:42.483
There we go, thank you,
it was pointing right at the right thing,

34
00:02:42.483 --> 00:02:46.703
right, okay,
outside of the function x is 1, y is 2.

35
00:02:46.703 --> 00:02:51.902
If I call add_numbers(4, 5),

36
00:02:51.902 --> 00:02:56.103
what is gonna be printed out?

37
00:02:56.103 --> 00:02:57.092
&gt;&gt; class: 4 and 5.

38
00:02:57.092 --> 00:03:00.705
&gt;&gt; Nina Zakharenko: Right,
inside the function, x is 4, y is 5.

39
00:03:03.413 --> 00:03:06.997
&gt;&gt; Nina Zakharenko: Let's try something
else, so we have an x declared, and

40
00:03:06.997 --> 00:03:08.872
we have a y declared, right?

41
00:03:11.542 --> 00:03:17.388
&gt;&gt; Nina Zakharenko: Let's say I
make a new function, numbers(),

42
00:03:17.388 --> 00:03:24.526
doesn't take any arguments,
and I set x = 0 and y = -1.

43
00:03:24.526 --> 00:03:28.095
And I'm gonna print out the same thing,
right, f-string, inside the function,

44
00:03:30.907 --> 00:03:38.340
&gt;&gt; Nina Zakharenko: x is x, y is y, okay?

45
00:03:38.340 --> 00:03:42.269
If I call numbers(),
inside the function, x is 0, y is 1.

46
00:03:44.370 --> 00:03:50.484
&gt;&gt; Nina Zakharenko: I'm gonna print out,
again,

47
00:03:50.484 --> 00:03:55.658
outside of the function,

48
00:03:55.658 --> 00:03:58.725
x is x and y is y.

49
00:03:58.725 --> 00:04:04.157
So these are old values that we declared,
right, x is 1, y is 2.

50
00:04:04.157 --> 00:04:09.863
So you can change the value of x and
y within the scope of your function,

51
00:04:09.863 --> 00:04:14.913
that doesn't affect the outer scope,
makes sense, right?

52
00:04:14.913 --> 00:04:18.456
Okay, positional arguments
versus keyword arguments.

53
00:04:21.826 --> 00:04:24.366
&gt;&gt; Nina Zakharenko: So
let's make a new function,

54
00:04:24.366 --> 00:04:29.938
we're gonna say calculate_numbers,
and it's gonna take an x and

55
00:04:29.938 --> 00:04:35.045
y in an operation,
&gt;&gt; Nina Zakharenko: ="add",

56
00:04:35.045 --> 00:04:39.435
right, and
we'll talk about if-statements soon, but

57
00:04:39.435 --> 00:04:43.190
in the meantime,
pretty easy syntax to follow.

58
00:04:43.190 --> 00:04:47.931
So we're just gonna say, if the operation
is add, we're gonna return x + y.

59
00:04:47.931 --> 00:04:52.583
Something to note here is, if-statements
have their own level of indentation.

60
00:04:52.583 --> 00:04:56.835
So I indent once to get to
the indentation for the function,

61
00:04:56.835 --> 00:05:01.779
I indent again to get to the indentation
level of the if-statement.

62
00:05:01.779 --> 00:05:06.265
So here I'm gonna return x + y, and

63
00:05:06.265 --> 00:05:12.706
I'm just gonna have
another if=statement here.

64
00:05:12.706 --> 00:05:18.045
And if the operation is subtract,
i'm gonna return x- y.

65
00:05:21.414 --> 00:05:24.627
&gt;&gt; Nina Zakharenko: Okay,
so calculate_numbers,

66
00:05:24.627 --> 00:05:29.340
calling it on 4 and 5,
what will the result be?

67
00:05:29.340 --> 00:05:30.066
&gt;&gt; class: 9.

68
00:05:30.066 --> 00:05:35.410
&gt;&gt; Nina Zakharenko: 9, okay,
what if I pass in 4 and 5,

69
00:05:35.410 --> 00:05:41.257
and I say that the operation is subtract,

70
00:05:41.257 --> 00:05:44.781
what will the result be?

71
00:05:44.781 --> 00:05:46.301
&gt;&gt; class: -1.

72
00:05:46.301 --> 00:05:47.489
&gt;&gt; Nina Zakharenko: -1-
&gt;&gt; Student: Nothing,

73
00:05:47.489 --> 00:05:50.897
because you misspelled
subtract in the function.

74
00:05:50.897 --> 00:05:52.333
&gt;&gt; class: No, thank you.

75
00:05:52.333 --> 00:05:52.940
&gt;&gt; Student: You're welcome.

76
00:05:52.940 --> 00:05:55.446
&gt;&gt; class: I love group pair programming.

77
00:05:55.446 --> 00:06:00.525
So I'm just gonna call this substract,
to match my typo,

78
00:06:00.525 --> 00:06:04.993
just so we can kinda get on with it,
okay, so -1.

79
00:06:04.993 --> 00:06:07.996
What if I call

80
00:06:07.996 --> 00:06:14.003
calculate_numbers with

81
00:06:14.003 --> 00:06:18.100
y = 3 and x = 2?

82
00:06:18.100 --> 00:06:19.310
&gt;&gt; Student2: It'll add them, 5.

83
00:06:19.310 --> 00:06:23.318
&gt;&gt; Nina Zakharenko: 5, that's right,
awesome, you guys are Python pros now,

84
00:06:23.318 --> 00:06:26.106
that's it, we can just leave for the day.

85
00:06:26.106 --> 00:06:28.732
&gt;&gt; class: [LAUGH]
&gt;&gt; Nina Zakharenko: Does this make sense

86
00:06:28.732 --> 00:06:32.883
to everyone, right, yeah,
passing in 4 and 5,

87
00:06:32.883 --> 00:06:36.756
positional arguments, in order, required.

88
00:06:36.756 --> 00:06:39.972
If I try to say calculate_arguments
with no arguments,

89
00:06:39.972 --> 00:06:42.991
missing 2 required positional arguments,
right?

90
00:06:42.991 --> 00:06:47.380
If I make labels,
of if I pass in labels for the arguments,

91
00:06:47.380 --> 00:06:53.938
along with my positional arguments, just,
I can put them in any order I want, right?

92
00:06:53.938 --> 00:06:56.393
I'm giving Python a hint
about what I mean.

93
00:06:59.138 --> 00:07:03.795
&gt;&gt; Nina Zakharenko: Okay,
any questions about functions, yes?

94
00:07:03.795 --> 00:07:08.529
&gt;&gt; Student3: In your conditional, you
are using ==, but when we did whether or

95
00:07:08.529 --> 00:07:13.278
not the list was None, you said is,
is there a difference between?

96
00:07:13.278 --> 00:07:16.576
&gt;&gt; Nina Zakharenko: Yeah,
that's a very good question,

97
00:07:16.576 --> 00:07:20.194
I'm gonna cover it in more detail later.

98
00:07:20.194 --> 00:07:25.844
But for the time being, there are a few
types of built in-types in Python where

99
00:07:25.844 --> 00:07:31.845
you didn't have to declare it or anything,
it's just there in your environment.

100
00:07:31.845 --> 00:07:39.322
None is one of them, True is one, False
is another, those are Boolean statements.

101
00:07:39.322 --> 00:07:45.388
And I'd have to double-check this,
but I'm 95% positive,

102
00:07:45.388 --> 00:07:52.237
these values are singletons in Python,
so they're only declared once.

103
00:07:52.237 --> 00:07:56.433
The difference between ==, == stands for

104
00:07:56.433 --> 00:08:01.282
equality, are these two
things equal to each other?

105
00:08:01.282 --> 00:08:06.337
Whereas is stands for, do these things
point to the same thing in memory?

106
00:08:13.552 --> 00:08:19.826
&gt;&gt; Nina Zakharenko: So in general, you'll
use the is keyword to compare to None,

107
00:08:19.826 --> 00:08:28.410
True, and False, kind of these built-in
types that exist as part of the language.

108
00:08:28.410 --> 00:08:31.387
But you'll use equality to compare values,

109
00:08:31.387 --> 00:08:34.450
to compare if values are equal,
but good eye.

