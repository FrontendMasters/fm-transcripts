WEBVTT

1
00:00:00.360 --> 00:00:04.319
&gt;&gt; Nina Zakharenko: Generally,
you'll want to debug your code with

2
00:00:04.319 --> 00:00:08.580
print statements when
you're first starting out.

3
00:00:09.590 --> 00:00:14.960
So just an example of that,
I'm gonna make a new file and

4
00:00:14.960 --> 00:00:17.559
I'm gonna call it mystery.py.

5
00:00:17.559 --> 00:00:21.395
And I'm gonna make
a function called mystery.

6
00:00:23.777 --> 00:00:27.230
&gt;&gt; Nina Zakharenko: And I'm gonna
say that my number is equal to this.

7
00:00:29.120 --> 00:00:34.412
And if my number is equal to 10,

8
00:00:34.412 --> 00:00:40.656
let's set it to the number times 10.

9
00:00:44.285 --> 00:00:49.029
&gt;&gt; Nina Zakharenko: Otherwise,
if the number, and I can use an l, also,

10
00:00:49.029 --> 00:00:50.300
here as well.

11
00:00:51.560 --> 00:00:54.583
Otherwise, if the number is equal to 30,

12
00:00:54.583 --> 00:00:58.274
we're gonna set the number
to the number times 30.

13
00:01:01.193 --> 00:01:05.517
&gt;&gt; Nina Zakharenko: And we're gonna return
that number, let me hide the terminal for

14
00:01:05.517 --> 00:01:07.210
a second.

15
00:01:07.210 --> 00:01:11.412
And then at the bottom of the file
we're gonna call this mystery().

16
00:01:14.621 --> 00:01:17.163
&gt;&gt; Nina Zakharenko: And
notice that calling the function is not

17
00:01:17.163 --> 00:01:20.410
indented under the function definition.

18
00:01:20.410 --> 00:01:21.920
So calling that real quickly.

19
00:01:23.870 --> 00:01:27.520
Oops, I wanted to print
the result of calling mystery.

20
00:01:28.620 --> 00:01:29.770
We'll see that the number was 900 and

21
00:01:29.770 --> 00:01:34.170
it's like well I'm not really
sure what happened here right?

22
00:01:34.170 --> 00:01:37.193
So we can put some print statements here.

23
00:01:39.495 --> 00:01:48.460
&gt;&gt; Nina Zakharenko: And that will help us
figure out which path we went down, right?

24
00:01:48.460 --> 00:01:52.303
You can say num was here.

25
00:01:56.342 --> 00:01:59.210
&gt;&gt; Nina Zakharenko: And I'll add these
particular files to the Git repo so

26
00:01:59.210 --> 00:02:01.300
that you can look at them.

27
00:02:01.300 --> 00:02:05.010
Now if I run this code again,
well I know which condition was met.

28
00:02:05.010 --> 00:02:07.760
I know what the number was set to, right.

29
00:02:09.050 --> 00:02:13.760
Generally, as you advance in Python,
you're gonna want to use a debugger.

30
00:02:13.760 --> 00:02:16.810
But for the time being,
print statements are a great tool.

31
00:02:16.810 --> 00:02:19.962
But you just have to remember not
to litter your production code with

32
00:02:19.962 --> 00:02:20.690
them, right?

