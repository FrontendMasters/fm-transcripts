WEBVTT

1
00:00:00.330 --> 00:00:01.530
&gt;&gt; Nina Zakharenko: Strings in Python.

2
00:00:02.680 --> 00:00:09.320
They can be enclosed either with
single quotes, so like this.

3
00:00:11.000 --> 00:00:13.540
Or in double quotes, like that.

4
00:00:16.480 --> 00:00:19.310
We'll see that the representation
of them is the same,

5
00:00:19.310 --> 00:00:22.810
it doesn't matter how you declare them,
you'll end up with the same result.

6
00:00:23.920 --> 00:00:27.830
In general it's best practice
to use double quotes

7
00:00:29.290 --> 00:00:34.910
because if you need to put
a single quote within your string.

8
00:00:34.910 --> 00:00:42.339
If you were to do it,
&gt;&gt; Nina Zakharenko: Like this,

9
00:00:42.339 --> 00:00:44.390
you would get a failure, right?

10
00:00:44.390 --> 00:00:51.870
Because you closed the string
before this last closing string.

11
00:00:51.870 --> 00:00:53.460
It's a syntax error.

12
00:00:53.460 --> 00:00:57.220
So if you're using enclosing
single quotes and you wanna put

13
00:00:57.220 --> 00:01:02.280
another single quote in between,
you have to escape it with a backslash.

14
00:01:02.280 --> 00:01:06.790
And that's just kind of yucky, right?

15
00:01:06.790 --> 00:01:10.630
If we use double quotes from the get-go,

16
00:01:10.630 --> 00:01:15.330
then we can have our single
quotes in there, no problem.

17
00:01:15.330 --> 00:01:16.270
It's a lot more readable.

18
00:01:17.310 --> 00:01:21.640
You might see single quotes
within some of these examples,

19
00:01:21.640 --> 00:01:24.560
I'm sorry I migrated over a few years ago.

20
00:01:24.560 --> 00:01:32.605
So you can also concatenate two
strings together with the plus symbol.

21
00:01:40.915 --> 00:01:46.215
We won't be using too many long
strings on this first day.

22
00:01:46.215 --> 00:01:53.730
But if you need declare a long string,
you can do that with triple quotes.

23
00:01:53.730 --> 00:01:57.460
It's also how you'll see long
form comments in the code.

24
00:01:57.460 --> 00:02:00.860
So if you say long_string =
you put triple quotes and

25
00:02:00.860 --> 00:02:06.010
you press Enter, you'll see
a different prompt here in the REPL.

26
00:02:06.010 --> 00:02:09.830
It'll be three dots, and that means
that the REPL is waiting for more input.

27
00:02:12.350 --> 00:02:17.460
So here we can type, oops.

28
00:02:19.150 --> 00:02:22.730
Here we can type more stuff and

29
00:02:22.730 --> 00:02:27.670
once we're done with this long string,
we can end it with another three quotes.

30
00:02:27.670 --> 00:02:28.630
I'm gonna press Enter.

31
00:02:30.240 --> 00:02:33.050
And if we look at that,
we'll see a long string.

32
00:02:34.400 --> 00:02:38.110
Might be wondering what
these \n characters are.

33
00:02:38.110 --> 00:02:41.860
We'll talk about them more later,
but they represent a new line.

34
00:02:41.860 --> 00:02:46.140
So a new line here in the beginning,
a new line after 1234, and

35
00:02:46.140 --> 00:02:50.210
a new line after abc.

36
00:02:50.210 --> 00:02:53.440
There are several types
of string formatting, but

37
00:02:53.440 --> 00:02:59.240
one of the biggest advantages of Python
3 is something called f-strings.

38
00:02:59.240 --> 00:03:01.818
It's the new fancy way
of string formatting.

39
00:03:03.826 --> 00:03:06.969
&gt;&gt; Nina Zakharenko: Let's say we
made a new variable called name,

40
00:03:06.969 --> 00:03:08.911
we assigned it to our names.

41
00:03:10.512 --> 00:03:14.459
&gt;&gt; Nina Zakharenko: To declare
an f-string, the f-string starts with

42
00:03:14.459 --> 00:03:20.570
the lower case letter f followed by the
opening double quotes, just like usual.

43
00:03:21.910 --> 00:03:24.840
Now I can type stuff in my string.

44
00:03:24.840 --> 00:03:29.392
And if I want to reference a variable,
I use curly braces.

45
00:03:31.405 --> 00:03:35.149
&gt;&gt; Nina Zakharenko: I'm gonna
reference the variable name and

46
00:03:35.149 --> 00:03:37.958
then put my closing quote here.

47
00:03:41.661 --> 00:03:45.148
&gt;&gt; Nina Zakharenko: When I press Enter
it's gonna do that interpolation for

48
00:03:45.148 --> 00:03:46.860
me and say, Hello, Nina.

49
00:03:49.010 --> 00:03:52.800
Is everyone able to get hello and
their name printed out with an f-string?

50
00:03:52.800 --> 00:03:54.090
Awesome.

51
00:03:54.090 --> 00:03:57.040
So there are a few other types
of string formatting that you

52
00:03:57.040 --> 00:04:00.660
might see in Python code,
especially older Python code.

53
00:04:00.660 --> 00:04:03.020
One of those is called percent formatting.

54
00:04:03.020 --> 00:04:08.110
You might see the .format method,
but throughout the course

55
00:04:08.110 --> 00:04:12.374
of today and tomorrow,
generally I'm gonna use f-strings.

56
00:04:12.374 --> 00:04:20.580
They are really easy, they're pretty
easy to get the syntax right.

57
00:04:20.580 --> 00:04:26.820
And if you're learning the the best way
first, then you'll end up at an advantage.

58
00:04:34.430 --> 00:04:36.983
Going back to the course website,

59
00:04:36.983 --> 00:04:41.860
I wanna talk about a few common
mistakes that you might see here.

60
00:04:41.860 --> 00:04:45.300
So you can open this up for reference, but

61
00:04:45.300 --> 00:04:48.532
I'm gonna go through them in the REPL,
excuse me.

62
00:04:49.700 --> 00:04:53.010
Okay, someone said CTRL + L,
I believe, to clear my REPL.

63
00:04:53.010 --> 00:04:55.715
If that shuts down my VS Code,
you're getting in trouble.

64
00:04:55.715 --> 00:04:59.600
[LAUGH] Thank you.

65
00:04:59.600 --> 00:05:02.630
Thank you random chat person,
much appreciated.

66
00:05:04.190 --> 00:05:06.750
Okay, so a few common mistakes.

67
00:05:06.750 --> 00:05:12.050
If you mismatch string quotes, so

68
00:05:12.050 --> 00:05:17.050
if I do that and I do that and I press
Enter, you're gonna get this exception.

69
00:05:17.050 --> 00:05:19.190
Syntax error, end of line.

70
00:05:19.190 --> 00:05:23.740
Or EOL, eol stands for
end of line while scanning string literal.

71
00:05:24.960 --> 00:05:29.377
The error's kind of pointing to
exactly where you made the mistake, so

72
00:05:29.377 --> 00:05:31.226
just take a quick look there.

73
00:05:33.838 --> 00:05:38.008
&gt;&gt; Nina Zakharenko: Another
error you might commonly see,

74
00:05:38.008 --> 00:05:43.186
if you try to concatenate
an integer in a string,

75
00:05:43.186 --> 00:05:48.520
because we can concatenate two strings,
right?

76
00:05:48.520 --> 00:05:52.687
But if we try to concatenate a string and

77
00:05:52.687 --> 00:05:57.248
a number, we're gonna get an exception.

78
00:05:57.248 --> 00:06:02.999
It's gonna be a TypeError.

79
00:06:02.999 --> 00:06:07.954
And it can say,
can only concatenate str not int to star.

80
00:06:07.954 --> 00:06:11.470
And you might get a slightly different
error if you do it the other way round.

81
00:06:12.940 --> 00:06:15.880
Unsupported operand types for
+: 'int' and 'str'.

82
00:06:17.440 --> 00:06:21.370
So I know these tracebacks look kind of
scary, but if you just read them from

83
00:06:21.370 --> 00:06:26.190
the bottom up, we can see here that we try
to add a number together in a string and

84
00:06:26.190 --> 00:06:33.420
it doesn't work, just be mindful of when
your stuff is all in variables, right?

85
00:06:33.420 --> 00:06:39.245
So if I have a = 5 and name = Nina,
and I try to add these together,

86
00:06:39.245 --> 00:06:45.610
it's a litle bit less immediately
obvious of what's going on, right?

87
00:06:45.610 --> 00:06:48.430
So just keep an eye out for that error.

