WEBVTT

1
00:00:00.000 --> 00:00:03.263
&gt;&gt; Nina Zakharenko: Instead
of just working with this big

2
00:00:03.263 --> 00:00:08.104
blob of printed out text,
let's get the json back, so

3
00:00:08.104 --> 00:00:12.752
I'll say response_json = response.json||.

4
00:00:14.914 --> 00:00:20.581
&gt;&gt; Nina Zakharenko: And, I can kind of
examine this object that we get back,

5
00:00:20.581 --> 00:00:24.921
so a good way of kind
of looking at new APIs,

6
00:00:24.921 --> 00:00:30.348
working with new data types,
is just printing out for

7
00:00:30.348 --> 00:00:35.921
a larger dictionary,
you can just print out the keys.

8
00:00:35.921 --> 00:00:39.312
So I'm gonna say response_json.keys,

9
00:00:39.312 --> 00:00:43.933
I'm gonna print that out, and
let's see what I get back.

10
00:00:43.933 --> 00:00:45.581
So there's a few keys here,

11
00:00:45.581 --> 00:00:49.365
I know the total count is the total
number of items that came back.

12
00:00:49.365 --> 00:00:53.217
Incomplete results has to do
with the GitHub search API.

13
00:00:53.217 --> 00:00:56.429
The way that it works,
it always return, kind of,

14
00:00:56.429 --> 00:00:59.793
the most accurate values,
it just runs your query and

15
00:00:59.793 --> 00:01:03.999
returns the first results that
came back before a timeout occurs.

16
00:01:03.999 --> 00:01:09.063
So this key here will tell you if
there were incomplete results or not.

17
00:01:09.063 --> 00:01:12.283
But just by looking at
the GitHub search API,

18
00:01:12.283 --> 00:01:17.466
I know that this key items is the one
that we're actually interested in.

19
00:01:19.139 --> 00:01:24.168
&gt;&gt; Nina Zakharenko: So
I'm gonna take this out,

20
00:01:24.168 --> 00:01:31.084
and I'm going to use that dictionary,

21
00:01:31.084 --> 00:01:38.429
get the item's key from the dictionary.

22
00:01:38.429 --> 00:01:44.318
I know that this is a dictionary and
I'm going to get the items key from it.

23
00:01:44.318 --> 00:01:49.620
Now, the items key contains
a list of other dictionaries,

24
00:01:49.620 --> 00:01:55.453
so narrow kind of thinking about
more involved data structures,

25
00:01:55.453 --> 00:01:59.707
and I'm going to return
this response_json.

26
00:02:06.392 --> 00:02:11.567
&gt;&gt; Nina Zakharenko: Now in my main method,
I'm gonna assign a variable to

27
00:02:11.567 --> 00:02:18.939
this function call because I know that
it now is gonna return a list of items.

28
00:02:18.939 --> 00:02:23.829
And just to kind of incrementally
test that this is all working,

29
00:02:23.829 --> 00:02:27.010
I can print out the length of the results.

30
00:02:32.230 --> 00:02:35.968
&gt;&gt; Nina Zakharenko: Okay, 30 of them,
things are working as expected.

31
00:02:41.417 --> 00:02:46.388
&gt;&gt; Nina Zakharenko: If I was kind of
writing this on my own and doing a little

32
00:02:46.388 --> 00:02:51.803
bit more exploring,
I might want to maybe look at the first

33
00:02:51.803 --> 00:02:56.909
result by saying,
first_result equals results 0.

34
00:02:56.909 --> 00:03:00.882
Seeing what keys might be on that,
maybe printing that out, and

35
00:03:00.882 --> 00:03:04.429
getting to know this data
structure a little bit better.

36
00:03:04.429 --> 00:03:09.227
But because this is available
in the documentation for

37
00:03:09.227 --> 00:03:14.127
the GitHub search API,
I know some of the other keys that

38
00:03:14.127 --> 00:03:19.671
are available on every item,
in that items dictionary there.

39
00:03:19.671 --> 00:03:24.949
So I'm going to loop over them and
say for result in results:,

40
00:03:24.949 --> 00:03:30.427
that the language is going to be
the result with the key language,

41
00:03:30.427 --> 00:03:35.807
and the number of stars that project has,
this GitHub project,

42
00:03:35.807 --> 00:03:40.415
is gonna be something called
the stargazers_count.

43
00:03:40.415 --> 00:03:45.617
And that the name of the project is
going to be in a key called name.

44
00:03:45.617 --> 00:03:51.166
And now I can print this all out and
I want the print to be nested in my for

45
00:03:51.166 --> 00:03:56.814
loop, not outside of it, so
that it prints for every single project,

46
00:03:56.814 --> 00:04:01.055
or every single result in
that results dictionary.

47
00:04:01.055 --> 00:04:05.327
So for this f string, I'm just going to

48
00:04:05.327 --> 00:04:09.987
print out some nicer formatting here, and

49
00:04:09.987 --> 00:04:15.814
say {name} is a {language}
repo with {stars},

50
00:04:15.814 --> 00:04:21.266
number of stars, and
I can take this comment out.

51
00:04:21.266 --> 00:04:23.184
Okay let's run this and see if it works.

52
00:04:24.826 --> 00:04:28.890
&gt;&gt; Nina Zakharenko: Okay I have just got
a whole bunch of results about 30 of them.

53
00:04:28.890 --> 00:04:35.416
And we will see that it's just
various languages here JavaScript,

54
00:04:35.416 --> 00:04:40.806
C++, None,
looks like there's no value set there.

55
00:04:40.806 --> 00:04:45.414
Shell repo, TypeScript repo,

56
00:04:45.414 --> 00:04:50.193
we have more JavaScripts, CSS,

57
00:04:50.193 --> 00:04:54.639
Dart, and a Python repo here.

58
00:04:54.639 --> 00:04:59.596
But I wanna do some filtering,
I don't necessarily care about all

59
00:04:59.596 --> 00:05:04.035
of these languages,
I just care about a few specific ones.

60
00:05:04.035 --> 00:05:11.134
So in order to do that, we're gonna
have to build up this query and be very,

61
00:05:11.134 --> 00:05:16.782
very specific about,
what languages we want results for.

62
00:05:16.782 --> 00:05:23.027
So I'm gonna make a new method here,
and I'm gonna call it create_query.

63
00:05:23.027 --> 00:05:28.739
And it's gonna take a list of languages
along with the minimum number of stars.

64
00:05:28.739 --> 00:05:32.470
I'm gonna start at 50,000, and

65
00:05:32.470 --> 00:05:37.106
there's some more
documentation in this file in

66
00:05:37.106 --> 00:05:42.195
the GitHub repository on
my personal GitHub at nnja,

67
00:05:42.195 --> 00:05:46.394
that you can access by git.io/python3.

68
00:05:46.394 --> 00:05:51.023
It has more documentation,
more comments, but for now,

69
00:05:51.023 --> 00:05:57.361
I know what the query structure look
likes, so I'm just gonna make an f string.

70
00:05:57.361 --> 00:06:02.411
And I know that the stars,
I want those to be greater than or

71
00:06:02.411 --> 00:06:06.020
equal to the minimum number of stars, and

72
00:06:06.020 --> 00:06:10.868
something important to add
here is a space after words,

73
00:06:10.868 --> 00:06:15.530
but it's just kind of
the query that GitHub expects.

74
00:06:15.530 --> 00:06:18.787
And then for each language in languages,

75
00:06:18.787 --> 00:06:24.166
we're gonna loop over them,
&gt;&gt; Nina Zakharenko: And

76
00:06:24.166 --> 00:06:29.372
I'm just going to append to this query and

77
00:06:29.372 --> 00:06:36.445
say I want the language to,
&gt;&gt; Nina Zakharenko: Be that and

78
00:06:36.445 --> 00:06:40.372
I have to include a space
that's what GitHub expects, and

79
00:06:40.372 --> 00:06:42.786
then I'm gonna return this query.

80
00:06:45.287 --> 00:06:47.387
&gt;&gt; Nina Zakharenko: So
let's test this method out

81
00:06:47.387 --> 00:06:53.411
quickly,
&gt;&gt; Nina Zakharenko: Kinda

82
00:06:53.411 --> 00:06:54.930
here at the bottom.

83
00:06:54.930 --> 00:06:59.334
I'm gonna say that my languages

84
00:06:59.334 --> 00:07:04.388
should let me do that at the top here,

85
00:07:04.388 --> 00:07:10.097
I'm gonna say my languages are Python and

86
00:07:10.097 --> 00:07:14.029
JavaScript and let's see.

87
00:07:16.404 --> 00:07:18.554
&gt;&gt; Nina Zakharenko: Let's do Ruby as well.

88
00:07:21.600 --> 00:07:23.988
&gt;&gt; Nina Zakharenko: So
if I call create_query,

89
00:07:26.686 --> 00:07:27.814
&gt;&gt; Nina Zakharenko: With my list of

90
00:07:27.814 --> 00:07:36.318
languages and I print that out,
&gt;&gt; Nina Zakharenko: Let's

91
00:07:36.318 --> 00:07:37.598
see what it looks like.

92
00:07:40.426 --> 00:07:41.996
&gt;&gt; Nina Zakharenko: Okay, so my terminal,

93
00:07:41.996 --> 00:07:47.029
I'm just gonna have to scroll up here
to the very top, and here's my query.

94
00:07:47.029 --> 00:07:55.178
It's a space separated list of parameters
with a value that the GitHub API expects,

95
00:07:55.178 --> 00:08:00.227
so this query will look for
repositories in Python,

96
00:08:00.227 --> 00:08:05.643
JavaScript or
Ruby with more than 50,000 stars.

97
00:08:05.643 --> 00:08:08.835
Now that we know the query works,

98
00:08:08.835 --> 00:08:14.079
we're going to want to move
this call up to where we'll

99
00:08:14.079 --> 00:08:18.771
actually be using it
outside of the main method.

100
00:08:18.771 --> 00:08:23.317
So, I'm gonna remove this print statement,
and

101
00:08:23.317 --> 00:08:28.633
I'm gonna move this list of
languages above the results.

102
00:08:28.633 --> 00:08:32.706
Because I want the repos_with_most_stars
for these specific languages.

103
00:08:32.706 --> 00:08:40.065
So if I want to pass languages into
the repos_with_most_stars function,

104
00:08:40.065 --> 00:08:45.158
I will pass that in, and
then I also have to change that

105
00:08:45.158 --> 00:08:50.497
function signature so
that it accepts a new parameter.

106
00:08:56.999 --> 00:09:01.341
&gt;&gt; Nina Zakharenko: Now,
I'm gonna move this call up here.

107
00:09:04.878 --> 00:09:08.658
&gt;&gt; Nina Zakharenko: So
now we have this query, this q key, and

108
00:09:08.658 --> 00:09:12.549
I'm just gonna put that here, all right?

109
00:09:12.549 --> 00:09:16.715
The query is now being
created by this function,

110
00:09:16.715 --> 00:09:23.027
there are a few other parameters that
I wanna pass in along with the query.

111
00:09:23.027 --> 00:09:27.078
The first is the sort,
what do I wanna sort for, or sort by?

112
00:09:27.078 --> 00:09:32.794
I think you can sort by forks or
some other variables,

113
00:09:32.794 --> 00:09:38.268
in this case,
I want to sort by the number of stars.

114
00:09:41.608 --> 00:09:46.340
&gt;&gt; Nina Zakharenko: And
I want the order to be descending.

115
00:09:53.847 --> 00:09:57.696
&gt;&gt; Nina Zakharenko: Let me
clean up some white space and

116
00:09:57.696 --> 00:10:01.028
then let's run this and see.

117
00:10:01.028 --> 00:10:03.710
So just scrolling down to the bottom here,

118
00:10:03.710 --> 00:10:08.628
we'll see that my results are now just
filtered to JavaScript, some Python,

119
00:10:08.628 --> 00:10:11.629
doesn't look like any
Ruby repos made it here.

120
00:10:15.775 --> 00:10:24.217
&gt;&gt; Nina Zakharenko: Okay,
&gt;&gt; Nina Zakharenko: Some

121
00:10:24.217 --> 00:10:28.723
other improvements that we can make,
just some clean up here.

122
00:10:31.680 --> 00:10:36.343
&gt;&gt; Nina Zakharenko: It's pretty likely
that anybody using this function,

123
00:10:36.343 --> 00:10:40.607
they might want to pass in
their own sort order, and

124
00:10:40.607 --> 00:10:45.780
they might want to pass in their
own parameter for sorting by.

125
00:10:45.780 --> 00:10:52.809
So I would say it's probably useful to
make these into default parameters.

126
00:10:52.809 --> 00:10:58.787
So I would say my function also accepts
a sort, but the default is stars,

127
00:10:58.787 --> 00:11:03.791
and it also accepts an order
that the default is descending.

128
00:11:03.791 --> 00:11:10.754
And now I can update these
to use those defaults.

