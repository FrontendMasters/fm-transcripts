WEBVTT

1
00:00:00.160 --> 00:00:03.008
&gt;&gt; Nina Zakharenko: I've used
the word scope a little bit.

2
00:00:03.008 --> 00:00:05.142
Functions have scope, and

3
00:00:05.142 --> 00:00:10.070
when we`re inside of a Python function,
that scope changes.

4
00:00:11.290 --> 00:00:13.058
You can kind of think about it this way,

5
00:00:13.058 --> 00:00:15.213
that Python scoping
happens with white space.

6
00:00:15.213 --> 00:00:18.128
When we delineate the code block for
a function,

7
00:00:18.128 --> 00:00:20.840
we indent it under
the function definition.

8
00:00:20.840 --> 00:00:23.930
And within that block of indented code,

9
00:00:23.930 --> 00:00:28.380
its scope changes to a new internal
scope that just exists for the function.

10
00:00:28.380 --> 00:00:33.565
In that internal scope,
the function has access

11
00:00:33.565 --> 00:00:39.000
to variables that
are defined outside of it.

12
00:00:39.000 --> 00:00:41.130
But it can't actually change them.

13
00:00:42.560 --> 00:00:45.620
So just something to keep an eye out for.

14
00:00:47.650 --> 00:00:56.309
Let's say I had a function
here called twitter_info.

15
00:00:56.309 --> 00:01:00.140
And I'm gonna say that my account is nnja.

16
00:01:00.140 --> 00:01:04.748
And then I'm gonna print
out an f string and

17
00:01:04.748 --> 00:01:08.979
say, Account inside the function is,

18
00:01:18.710 --> 00:01:19.926
&gt;&gt; Nina Zakharenko: If I call my function,

19
00:01:19.926 --> 00:01:23.130
we'll see that the Account
inside of the function is nnja.

20
00:01:25.829 --> 00:01:29.598
&gt;&gt; Nina Zakharenko: What if I try to
access the variable account outside of

21
00:01:29.598 --> 00:01:30.950
the function?

22
00:01:30.950 --> 00:01:31.649
What's gonna happen?

23
00:01:34.260 --> 00:01:36.660
&gt;&gt; Student: It doesn't exist.

24
00:01:36.660 --> 00:01:38.460
&gt;&gt; Nina Zakharenko: Come on,
you guys know the answer.

25
00:01:41.043 --> 00:01:44.419
&gt;&gt; Nina Zakharenko: Right, exactly right,
the account is not defined.

26
00:01:47.500 --> 00:01:49.110
Why is account not defined?

27
00:01:50.140 --> 00:01:54.810
Because we declared it in
the scope of this function, right?

28
00:01:56.130 --> 00:02:00.570
So when we run this function,
we have access to this account variable.

29
00:02:01.670 --> 00:02:05.550
Outside of this function,
we're in a different scope, and

30
00:02:05.550 --> 00:02:07.190
there is no account variable.

31
00:02:10.670 --> 00:02:13.764
Let's say I declared a variable
outside of the function.

32
00:02:19.339 --> 00:02:22.881
&gt;&gt; Nina Zakharenko: And
I'm gonna make a different function.

33
00:02:22.881 --> 00:02:25.290
I'm gonna say try to change the name.

34
00:02:27.060 --> 00:02:30.622
And within this function,
the name is Max, and

35
00:02:30.622 --> 00:02:35.449
I'm gonna print out an f string
that says Name inside function.

36
00:02:46.129 --> 00:02:50.135
&gt;&gt; Nina Zakharenko: Okay,
if I run this function, try_change_name,

37
00:02:50.135 --> 00:02:52.010
what is gonna print out?

38
00:02:55.101 --> 00:02:55.909
&gt;&gt; Nina Zakharenko: What name?

39
00:02:57.725 --> 00:02:58.674
&gt;&gt; Nina Zakharenko: That's right.

40
00:02:58.674 --> 00:03:00.769
Max, right.

41
00:03:00.769 --> 00:03:07.460
Even though I declared my name here
inside of this function, the name is Max.

42
00:03:07.460 --> 00:03:12.249
I can also print out what's
the name outside of the function.

43
00:03:16.038 --> 00:03:17.730
&gt;&gt; Nina Zakharenko: What will
this print out, which name?

44
00:03:18.950 --> 00:03:19.899
&gt;&gt; Student: Nina.
&gt;&gt; Nina Zakharenko: Nina, that's right.

45
00:03:21.990 --> 00:03:23.570
&gt;&gt; Nina Zakharenko: Okay,
makes sense, right?

46
00:03:30.090 --> 00:03:34.230
&gt;&gt; Nina Zakharenko: We don't necessarily
really want to follow this pattern.

47
00:03:34.230 --> 00:03:39.244
We don't want to change defined variables

48
00:03:39.244 --> 00:03:43.150
outside of their defined scope.

49
00:03:43.150 --> 00:03:47.768
So in general for you Python programs,
you don't necessarily want to, or

50
00:03:47.768 --> 00:03:51.673
like I'm talking about production
Python programs, right?

51
00:03:51.673 --> 00:03:56.272
Not when you're first starting out,
generally don't wanna have too many

52
00:03:56.272 --> 00:04:00.480
variables floating around
outside of a defined scope.

53
00:04:00.480 --> 00:04:01.940
Maybe something like a constant,

54
00:04:01.940 --> 00:04:06.570
like a variable that doesn't change over
the execution of the program, right?

55
00:04:06.570 --> 00:04:12.500
It's okay to define it out of the scope,
but just kind of be mindful of this.

56
00:04:12.500 --> 00:04:15.870
It seems like there is a little
bit of confusion about

57
00:04:18.140 --> 00:04:20.860
having an empty list as default argument.

58
00:04:20.860 --> 00:04:28.020
So just to be very clear on that,
I am saying don't do this, don't do it.

59
00:04:28.020 --> 00:04:31.430
It's the source of a lot of bugs.

60
00:04:31.430 --> 00:04:35.951
I'm giving you an example
of what not to do, just so

61
00:04:35.951 --> 00:04:39.119
that you know what the behavior is.

62
00:04:45.026 --> 00:04:48.795
&gt;&gt; Nina Zakharenko: So I defined
this function foo, that takes a and

63
00:04:48.795 --> 00:04:52.480
provides an empty list
as a default argument.

64
00:04:54.180 --> 00:04:57.389
It doesn't really have anything
to do with scope, right?

65
00:04:59.040 --> 00:05:03.580
The reason that b is
the same list every time

66
00:05:03.580 --> 00:05:08.830
I call this function,
is because these default arguments,

67
00:05:08.830 --> 00:05:14.640
they get instantiated once,
when the function is defined.

68
00:05:14.640 --> 00:05:18.720
So when you're using kind of
these basic types integer string,

69
00:05:19.790 --> 00:05:23.170
the safe types to be
considered default arguments.

70
00:05:23.170 --> 00:05:24.290
It doesn't really matter right?

71
00:05:24.290 --> 00:05:28.614
If it's the same instance,
but with an empty list,

72
00:05:28.614 --> 00:05:32.950
there's just kind of one
handle on this empty list.

73
00:05:32.950 --> 00:05:37.852
So if you think that this is going to
make a new empty list every time you call

74
00:05:37.852 --> 00:05:41.560
this function,
you're gonna be wrong, right?

75
00:05:41.560 --> 00:05:45.250
And it's the kind of thing where
you're not gonna get a syntax error.

76
00:05:45.250 --> 00:05:48.280
You're not gonna get any sort of hint.

77
00:05:48.280 --> 00:05:53.450
You're just gonna end up with some really
weird, hard to diagnose bugs, right?

78
00:05:53.450 --> 00:05:57.720
So just to be very clear, don't do this.

79
00:05:57.720 --> 00:05:59.180
Keep an eye out for this, right?

80
00:06:00.840 --> 00:06:05.010
So I have my list b, I'm appending a, and

81
00:06:05.010 --> 00:06:09.070
then I'm printing out the value of b,
right?

82
00:06:09.070 --> 00:06:12.319
As I called foo, when I call it once,
okay, cool, right?

83
00:06:12.319 --> 00:06:17.770
I have my empty list b, I appended
value a too and I'm printing it out.

84
00:06:17.770 --> 00:06:19.289
That does what we expect, right?

85
00:06:20.590 --> 00:06:25.870
But when I call it again, b didn't,

86
00:06:25.870 --> 00:06:30.810
when I call this function,
this b variable was not cleared, right?

87
00:06:30.810 --> 00:06:35.590
Instead it's just getting upended to over
and over, so just a subtle cause of bugs.

88
00:06:36.790 --> 00:06:39.860
Instead, I can show you what
you would want to do right?

89
00:06:39.860 --> 00:06:43.910
So
&gt;&gt; Nina Zakharenko: Do this instead.

90
00:06:46.920 --> 00:06:49.760
You can say def foo a and b.

91
00:06:49.760 --> 00:06:52.610
You'd wanna say b to the none type, right.

92
00:06:54.150 --> 00:06:56.900
That's kind of like a flag or
a signal for us.

93
00:06:57.960 --> 00:07:03.432
And then sorry,
I'm gonna use some control statements and

94
00:07:03.432 --> 00:07:07.372
stuff, we'll talk about these soon, but

95
00:07:07.372 --> 00:07:13.770
then I can just say If b is none,
then make an empty list, right?

96
00:07:13.770 --> 00:07:19.059
And then b.append(a) and printing b.

97
00:07:19.059 --> 00:07:22.079
Don't worry, I'll cover all of
this in more detail soon, right.

98
00:07:23.530 --> 00:07:26.481
But now, if I call foo with 1, get 1.

99
00:07:26.481 --> 00:07:30.980
If I call foo with 5,
I get an empty list with 5 in it, right?

100
00:07:30.980 --> 00:07:34.709
This does the correct behavior, okay?

101
00:07:34.709 --> 00:07:37.920
So I hope that clarifies things for
everyone.

102
00:07:37.920 --> 00:07:39.320
Just don't do this.

