WEBVTT

1
00:00:00.473 --> 00:00:02.573
&gt;&gt; Nina Zakharenko: Now that
we've talked about for loops,

2
00:00:02.573 --> 00:00:07.150
we're gonna talk about the different
kind of loop in Python, the while loop.

3
00:00:07.150 --> 00:00:12.540
They're a special type of
loop that run forever until

4
00:00:12.540 --> 00:00:18.530
some condition is met, unlike that for
loop we saw earlier that just ran

5
00:00:18.530 --> 00:00:24.150
until the list of items that it
was running through was exhausted.

6
00:00:24.150 --> 00:00:27.008
So let's see while loops in practice.

7
00:00:27.008 --> 00:00:33.358
Let's say I have a counter variable and
I have maximum value here.

8
00:00:33.358 --> 00:00:38.100
I'm gonna set a while loop that's
gonna run while my counter is less

9
00:00:38.100 --> 00:00:39.940
than the maximum amount.

10
00:00:41.040 --> 00:00:47.044
And in here I'm going to print
out the count is counter.

11
00:00:49.828 --> 00:00:55.600
&gt;&gt; Nina Zakharenko: Now, if I left my loop
just like this, It would run forever.

12
00:00:55.600 --> 00:00:59.786
I would have to, if I was running it
in REPL, I'd have to press Ctrl+C or

13
00:00:59.786 --> 00:01:03.820
maybe Ctrl+Z on Windows to kill it.

14
00:01:03.820 --> 00:01:06.300
That's because we're not
updating our counter.

15
00:01:06.300 --> 00:01:10.850
So in order for this loop to only run
a certain number of times, we need to make

16
00:01:10.850 --> 00:01:16.200
sure that the condition for
the while loop is gonna be met eventually.

17
00:01:17.360 --> 00:01:22.017
So I can say counter = counter + 1,
and now when I run this loop,

18
00:01:22.017 --> 00:01:24.067
it'll just run four times.

19
00:01:26.708 --> 00:01:28.308
&gt;&gt; Nina Zakharenko: If I
never put this in,

20
00:01:28.308 --> 00:01:31.266
remember that my loop would run forever.

21
00:01:38.029 --> 00:01:41.708
&gt;&gt; Nina Zakharenko: A great way of
controlling white loops is with break,

22
00:01:41.708 --> 00:01:44.120
continue, and return.

23
00:01:44.120 --> 00:01:50.488
These statements allow us to
control the flow of our programs.

24
00:01:50.488 --> 00:01:55.458
They're really a concept that beginners
to Python tend to misunderstand, so

25
00:01:55.458 --> 00:01:58.031
I would say pay careful attention here.

26
00:02:04.298 --> 00:02:08.950
&gt;&gt; Nina Zakharenko: A break statement will
completely break out of the current loop.

27
00:02:08.950 --> 00:02:13.514
Meaning that it won't run any more of
the statements contained inside of it.

28
00:02:16.570 --> 00:02:22.196
&gt;&gt; Nina Zakharenko: So using break,
&gt;&gt; Nina Zakharenko: Let's say I had

29
00:02:22.196 --> 00:02:31.915
my list of names here,
&gt;&gt; Nina Zakharenko: Max,

30
00:02:31.915 --> 00:02:36.110
Rose, Nina, and Jimmy.

31
00:02:38.290 --> 00:02:42.841
I can say for name in names, and

32
00:02:42.841 --> 00:02:50.382
print out the f string of Hello,
followed by name.

33
00:02:55.410 --> 00:02:57.390
&gt;&gt; Nina Zakharenko: I'm gonna
add a break statement to this.

34
00:02:57.390 --> 00:03:00.112
I'm gonna say if the name
is equal to Nina,

35
00:03:03.775 --> 00:03:04.350
&gt;&gt; Nina Zakharenko: break.

36
00:03:05.720 --> 00:03:11.260
When I run this on my list, it's gonna
say Hello, Max, Hello, Rose, Hello, Nina.

37
00:03:11.260 --> 00:03:15.470
But it won't print out Hello,
Jimmy because this condition was met,

38
00:03:15.470 --> 00:03:20.380
and this break statement
completely broke out of the loop.

39
00:03:20.380 --> 00:03:24.340
Remember that break completely
breaks out of the loop.

40
00:03:25.680 --> 00:03:29.020
There's another statement used for
the control flow of loops, and

41
00:03:29.020 --> 00:03:29.960
that is continue.

42
00:03:32.630 --> 00:03:35.870
Continue works a little bit differently.

43
00:03:37.790 --> 00:03:40.770
Instead of breaking out
of the loop completely,

44
00:03:40.770 --> 00:03:44.020
instead it goes back to
the start of the loop and

45
00:03:44.020 --> 00:03:49.510
keeps running over it skipping any other
statements that came after the continue.

46
00:03:50.780 --> 00:03:55.730
If I have my same list of names and

47
00:03:55.730 --> 00:04:01.670
I say for name in names, and this time
I'm gonna check if the name is not

48
00:04:03.080 --> 00:04:07.290
equal to Nina, I'm going to continue.

49
00:04:09.480 --> 00:04:14.682
Otherwise, I'm going to
print out Hello and name.

50
00:04:17.866 --> 00:04:23.790
&gt;&gt; Nina Zakharenko: Running this code,
oops, I forgot my f string there.

51
00:04:23.790 --> 00:04:25.710
So let's do that one more time.

52
00:04:25.710 --> 00:04:31.980
For name in names, if the name is not
equal to Nina, we're going to continue.

53
00:04:31.980 --> 00:04:35.060
Otherwise, we're gonna print
out the f string Hello, name.

54
00:04:37.260 --> 00:04:40.060
Okay, this only prints out Hello, Nina.

55
00:04:41.430 --> 00:04:42.740
Why?

56
00:04:42.740 --> 00:04:48.660
Looking back at our list of names,
if the name is not equal to Nina,

57
00:04:48.660 --> 00:04:51.930
which in this case it's not a max,
It's gonna continue.

58
00:04:51.930 --> 00:04:56.830
Which means it's gonna jump back to the
top of the loop, look at the next item,

59
00:04:56.830 --> 00:04:58.700
and the check this condition again.

60
00:04:58.700 --> 00:05:04.650
When it's Rose, the condition's not met,
so it's gonna continue back to the top.

61
00:05:04.650 --> 00:05:09.320
Finally, when it's Nina,
this condition is not met, and

62
00:05:09.320 --> 00:05:11.300
Hello and name will be printed out.

63
00:05:12.650 --> 00:05:18.540
There's a helpful diagram to visualize
this on the course website, right here.

64
00:05:18.540 --> 00:05:24.780
So for my list of names, as I'm looping
through the name, if the length

65
00:05:24.780 --> 00:05:29.850
of the name is not equal to 4, it's gonna
continue back to the top of the loop.

66
00:05:29.850 --> 00:05:34.642
So for this first name in the list,
Jimmy, the length is not equal to 4, so

67
00:05:34.642 --> 00:05:38.918
it's just gonna come back around and
look at the next name, Rose.

68
00:05:40.919 --> 00:05:45.941
&gt;&gt; Nina Zakharenko: Now, because this
condition is not met, the length is equal

69
00:05:45.941 --> 00:05:50.765
to 4, it's gonna print Hello,
name, and then go back to

70
00:05:50.765 --> 00:05:56.100
the top of the loop because the name
is not equal to Nina, right?

71
00:05:56.100 --> 00:05:57.750
So it's just gonna keep going.

72
00:05:57.750 --> 00:06:01.040
Max does not fit the length
of name equals 4,

73
00:06:01.040 --> 00:06:03.650
so continue back to the top of the loop.

74
00:06:03.650 --> 00:06:08.960
Now, for Nina, the length is equal to 4,

75
00:06:08.960 --> 00:06:12.850
so we're gonna keep going in this code,
we're gonna print out Hello, Nina.

76
00:06:12.850 --> 00:06:15.750
But we're also gonna see
this additional condition.

77
00:06:15.750 --> 00:06:20.340
If the name is equal to Nina, it's gonna
completely break out of the loop and

78
00:06:20.340 --> 00:06:21.690
not run it any further.

79
00:06:23.040 --> 00:06:25.299
Let's see the results of this code.

80
00:06:25.299 --> 00:06:32.553
We'll see Hello, Rose, Hello, Nina,
and then immediately print out Done.

81
00:06:36.617 --> 00:06:40.185
&gt;&gt; Nina Zakharenko: Something to
know is that if you use break and

82
00:06:40.185 --> 00:06:42.983
continue inside of nested loops,

83
00:06:42.983 --> 00:06:48.920
you're only going to break out of
the loop at the level of the break.

84
00:06:48.920 --> 00:06:52.880
So if you have two nested for loops, and

85
00:06:52.880 --> 00:06:57.380
your break is inside that inner for loop,
when you break out of it, that outer for

86
00:06:57.380 --> 00:07:00.680
loop is still going to continue,
so something to be mindful of.

87
00:07:02.180 --> 00:07:07.660
You can also use break to do loop
control inside of while statements.

88
00:07:07.660 --> 00:07:11.990
So let's say I had a condition where
I ran my while loop, while True,

89
00:07:11.990 --> 00:07:14.920
which means kinda run infinitely forever.

90
00:07:16.830 --> 00:07:21.007
And,
&gt;&gt; Nina Zakharenko: Sorry, to do that,

91
00:07:21.007 --> 00:07:27.340
I'm going to say, I'm gonna give a count,
I'm gonna start the count of 0.

92
00:07:27.340 --> 00:07:32.700
And then I'm gonna say while True,
the count, add the value 1 to it.

93
00:07:32.700 --> 00:07:37.694
Plus equals here means it's the same
as count equals count plus 1.

94
00:07:37.694 --> 00:07:43.214
And then I'm gonna say, if the count is
equal to 5, I'm gonna print out the count

95
00:07:43.214 --> 00:07:48.550
was reached,
&gt;&gt; Nina Zakharenko: And

96
00:07:48.550 --> 00:07:49.797
I'm going to break.

97
00:07:52.828 --> 00:07:55.950
&gt;&gt; Nina Zakharenko: Great, so when
the count hit 5, it printed this out and

98
00:07:55.950 --> 00:07:57.700
our loop stopped.

99
00:07:57.700 --> 00:08:00.830
So we got around this condition for

100
00:08:00.830 --> 00:08:03.410
an infinite while loop by
using a break statement.

101
00:08:04.760 --> 00:08:07.822
Remember that,
just like inside of functions,

102
00:08:07.822 --> 00:08:12.460
you can consider the return statement
to be a hard kill switch of the loop.

103
00:08:15.349 --> 00:08:16.989
&gt;&gt; Nina Zakharenko: Let's
see this in practice.

104
00:08:24.289 --> 00:08:28.740
&gt;&gt; Nina Zakharenko: Looking at our
names list, let's make a new function.

105
00:08:28.740 --> 00:08:37.417
It's going to,
&gt;&gt; Nina Zakharenko: Find a target,

106
00:08:37.417 --> 00:08:41.870
so I'm gonna call it find_target_name.

107
00:08:41.870 --> 00:08:46.410
And then it's gonna loop through
each name in the names, and

108
00:08:46.410 --> 00:08:49.910
it's gonna print out the name.

109
00:08:49.910 --> 00:08:52.966
But we have a special condition here,

110
00:08:52.966 --> 00:08:58.310
if the name is equal to Nina, oops,
&gt;&gt; Nina Zakharenko: I

111
00:08:58.310 --> 00:09:01.875
pressed Enter too early,
so let me do that again.

112
00:09:04.404 --> 00:09:07.074
&gt;&gt; Nina Zakharenko: Okay,
if the name is equal to Nina,

113
00:09:07.074 --> 00:09:11.618
I'm just gonna return the string,
Found the special case.

114
00:09:15.275 --> 00:09:20.546
&gt;&gt; Nina Zakharenko: Let's say
I have a shorter list of names

115
00:09:20.546 --> 00:09:26.314
here that contains Max, Nina, and Rose.

116
00:09:26.314 --> 00:09:31.017
If I call find_target_name on my list
of names, it'll print Max, Nina,

117
00:09:31.017 --> 00:09:35.470
and then Found the special case,
but it'll never get to Rose.

118
00:09:35.470 --> 00:09:38.263
So we learned about how break,
continue, and

119
00:09:38.263 --> 00:09:43.144
return allow us to control the flow of our
loops, both for loops and while loops.

