WEBVTT

1
00:00:00.320 --> 00:00:03.850
&gt;&gt; Nina Zakharenko: Because lists have
an order we can access them by index,

2
00:00:03.850 --> 00:00:05.610
that also means we can sort them.

3
00:00:07.200 --> 00:00:12.350
So let's say that I have some
lottery numbers, in a list.

4
00:00:13.510 --> 00:00:17.366
And you guys can make up your own,
it's your lucky day, so

5
00:00:17.366 --> 00:00:22.333
[LAUGH]
&gt;&gt; Nina Zakharenko: These

6
00:00:22.333 --> 00:00:23.780
are my lottery numbers, right?

7
00:00:27.910 --> 00:00:32.120
There are two ways of sorting in Python.

8
00:00:32.120 --> 00:00:35.504
Let me clear the screen and
kind of move this back to the top,

9
00:00:35.504 --> 00:00:37.273
there's two ways of sorting.

10
00:00:42.252 --> 00:00:46.950
&gt;&gt; Nina Zakharenko: The first way is to,
&gt;&gt; Nina Zakharenko: Take that

11
00:00:46.950 --> 00:00:51.093
original list and then return a copy
of the list that's sorted, but

12
00:00:51.093 --> 00:00:54.300
leave the lists in that
variable completely alone.

13
00:00:55.670 --> 00:01:02.600
And just like with LAN, for length,
sorted as a built-in in Python.

14
00:01:02.600 --> 00:01:07.270
So we can call sorted and pass in
the lottery numbers, and look at that,

15
00:01:07.270 --> 00:01:08.710
they are sorted, right?

16
00:01:11.040 --> 00:01:14.304
But if we look at our underlying variable,

17
00:01:14.304 --> 00:01:18.667
it's still exactly the same,
just like we declared it.

18
00:01:25.355 --> 00:01:29.564
&gt;&gt; Nina Zakharenko: Sorted takes
an optional argument, and by the way,

19
00:01:29.564 --> 00:01:35.303
to scroll back and forth in my history,
I'm just using the up arrows and

20
00:01:35.303 --> 00:01:40.040
the down arrows,
it might save you some time.

21
00:01:40.040 --> 00:01:43.879
So remember these optional
default arguments.

22
00:01:46.068 --> 00:01:51.570
&gt;&gt; Nina Zakharenko: So by default,
the list is sorted in increasing order.

23
00:01:51.570 --> 00:01:55.320
But if I pass in this argument
to sorted reverse equals true,

24
00:01:55.320 --> 00:01:56.900
it's gonna sort my list backwards.

25
00:01:58.070 --> 00:02:06.310
And again, looking at the list, the
original list remains unchanged, right?

26
00:02:07.700 --> 00:02:12.645
Notice that calling sorted returns
something, right, it returns a copy.

27
00:02:12.645 --> 00:02:18.811
So, I can save this to a variable,

28
00:02:18.811 --> 00:02:24.126
and all of a sudden in X I have my

29
00:02:24.126 --> 00:02:30.525
new sorted list of saved back copy.

30
00:02:30.525 --> 00:02:36.353
Okay, second way of sorting list,
is to do it in place,

31
00:02:36.353 --> 00:02:41.561
so this operation modifies
the underlying list,

32
00:02:41.561 --> 00:02:44.670
your data is going to change.

33
00:02:46.170 --> 00:02:50.790
And one of the hints that
that is happening is,

34
00:02:50.790 --> 00:02:56.270
if I have my lottery numbers,
I can call .sort on it.

35
00:02:56.270 --> 00:02:59.789
And notice that I'm calling this
method on my own variable, right?

36
00:03:02.350 --> 00:03:05.510
And when I call this method
nothing returns, right.

37
00:03:07.520 --> 00:03:10.750
Or technically,
it's the non type that's returned, but

38
00:03:10.750 --> 00:03:14.050
we're not getting a new copy of
our list because there is no copy.

39
00:03:17.200 --> 00:03:20.221
So if we look in lottery numbers now,

40
00:03:20.221 --> 00:03:25.386
we'll see that our lottery numbers
have been sorted in place,

41
00:03:25.386 --> 00:03:29.291
the data structure has been modified,
right.

42
00:03:29.291 --> 00:03:34.043
So a little bit of trickery,
you would think lottery numbers dot

43
00:03:34.043 --> 00:03:38.971
sort reverse sequel true,
unfortunately, not quite that easy,

44
00:03:38.971 --> 00:03:42.763
so thereâ€™s just an extra
method to remember here.

45
00:03:42.763 --> 00:03:48.990
And that would be lottery_numbers.reverse.

46
00:03:48.990 --> 00:03:51.310
Again it returns nothing,
why is that happening?

47
00:03:52.410 --> 00:03:53.360
&gt;&gt; Student: Doing it in place.

48
00:03:53.360 --> 00:03:56.300
&gt;&gt; Nina Zakharenko: Because
it's doing it in place, right.

49
00:03:56.300 --> 00:03:57.826
If I look at my lottery numbers,

50
00:03:57.826 --> 00:04:04.531
they're now sorted backwards
&gt;&gt; Nina Zakharenko: Remember,

51
00:04:04.531 --> 00:04:09.578
if you forget all of this stuff you
can call, because if we look at

52
00:04:09.578 --> 00:04:15.445
the type of lottery numbers,
&gt;&gt; Nina Zakharenko: it's

53
00:04:15.445 --> 00:04:17.270
class list, right?

54
00:04:17.270 --> 00:04:21.350
So, if I wanted to see
the directory listing of

55
00:04:21.350 --> 00:04:24.210
all of the methods available on list,
what would I call?

56
00:04:25.230 --> 00:04:29.543
&gt;&gt; Class: Dir.
&gt;&gt; Nina Zakharenko: Dir on list, right?

57
00:04:29.543 --> 00:04:35.274
Okay, and the ones without the underscores
are generally the ones that we care about.

58
00:04:35.274 --> 00:04:38.301
I used append a little bit earlier, right?

59
00:04:38.301 --> 00:04:44.204
Here's reverse sort,
if I didn't remember what

60
00:04:44.204 --> 00:04:50.260
arguments it took,
what would I type into my REPL?

61
00:04:50.260 --> 00:04:51.246
&gt;&gt; Class: Help.

62
00:04:51.246 --> 00:04:52.766
&gt;&gt; Nina Zakharenko: Help, right.

63
00:04:52.766 --> 00:04:53.638
&gt;&gt; Student2: List.

64
00:04:53.638 --> 00:04:54.672
&gt;&gt; Nina Zakharenko: List.

65
00:04:54.672 --> 00:04:56.598
&gt;&gt; Student2: And then .reverse.

66
00:04:56.598 --> 00:04:59.240
&gt;&gt; Nina Zakharenko: .reverse, right, yeah.

67
00:04:59.240 --> 00:05:04.080
No extra parentheses here or anything,
just the type and the method, and

68
00:05:04.080 --> 00:05:09.370
we'll see that pretty helpful
method comment, right?

69
00:05:09.370 --> 00:05:12.879
It reverses the list in place, cool.

70
00:05:18.714 --> 00:05:21.572
&gt;&gt; Nina Zakharenko: So taking a quick
look at the cheat sheet here,

71
00:05:21.572 --> 00:05:23.560
what's the use for a list?

72
00:05:23.560 --> 00:05:24.290
It's used for

73
00:05:24.290 --> 00:05:30.500
storing similar items in cases where
items need to be added or removed.

74
00:05:30.500 --> 00:05:35.432
You can create the list with the square
brackets, or list for an empty list,

75
00:05:35.432 --> 00:05:37.062
or for a list with items.

76
00:05:37.062 --> 00:05:40.339
You could just put the square brackets and

77
00:05:40.339 --> 00:05:46.058
put some information in there,
right, variables separated by comma.

78
00:05:49.179 --> 00:05:53.654
&gt;&gt; Nina Zakharenko: Cool,
&gt;&gt; Nina Zakharenko: So

79
00:05:53.654 --> 00:06:00.260
we looked at checking the name, or
I'm sorry checking the length of the list.

80
00:06:00.260 --> 00:06:01.535
We just do that with one.

