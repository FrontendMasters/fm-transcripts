WEBVTT

1
00:00:00.250 --> 00:00:02.190
&gt;&gt; Nina Zakharenko: I'm gonna
make a new file, and I'm

2
00:00:04.180 --> 00:00:08.680
gonna save this one as nam_lib.py, and

3
00:00:08.680 --> 00:00:14.180
I want it to be a library function that
does some useful things with my name.

4
00:00:14.180 --> 00:00:18.200
So i'm gonna say upper_case,
I'm gonna make a new function,

5
00:00:18.200 --> 00:00:21.200
call it upper_case_name,
and it's gonna take a name.

6
00:00:21.200 --> 00:00:24.560
And it's gonna return name.upper,
so the uppercase version.

7
00:00:26.250 --> 00:00:31.560
And now I'm just gonna put some code in
here, I'm gonna say my name is "Nina".

8
00:00:32.680 --> 00:00:36.838
And I'm gonna get
the uppercase version of my

9
00:00:36.838 --> 00:00:39.663
name,
&gt;&gt; Nina Zakharenko: And

10
00:00:39.663 --> 00:00:42.327
then I'm gonna print out that value.

11
00:00:53.360 --> 00:00:55.285
&gt;&gt; Nina Zakharenko: Okay,
if I run this file,

12
00:00:55.285 --> 00:01:00.225
it'll print out uppercase name is Nina,
&gt;&gt; Nina Zakharenko: Right,

13
00:01:00.225 --> 00:01:02.580
okay, pretty useful.

14
00:01:02.580 --> 00:01:08.510
Let's say that I'm a developer or
even I want to reuse my code,

15
00:01:08.510 --> 00:01:12.910
and I see this awesome new library
with my upper case method.

16
00:01:12.910 --> 00:01:17.110
And I'm like, great,
I want to use this in my code, too.

17
00:01:17.110 --> 00:01:23.122
So I'm going to make a new file and
I'm gonna call it,

18
00:01:25.109 --> 00:01:29.950
&gt;&gt; Nina Zakharenko: Other_program.py.

19
00:01:29.950 --> 00:01:34.969
And in my other program,
I'm going to import name_lib.

20
00:01:34.969 --> 00:01:41.400
That's the name of this Python file,
that's in the same directory as mine.

21
00:01:41.400 --> 00:01:46.190
And I'm gonna say okay,
well, my_name = "Fred".

22
00:01:46.190 --> 00:01:52.981
And the upper of my name
is gonna be in the name_lib

23
00:01:52.981 --> 00:01:58.805
using that upper_case_name function,

24
00:01:58.805 --> 00:02:04.800
and then I'm gonna pass
my own name into it.

25
00:02:06.530 --> 00:02:08.320
And then I'm gonna print it out,
too, right.

26
00:02:08.320 --> 00:02:15.210
Okay, so in my own code,
upper name is upper_name.

27
00:02:15.210 --> 00:02:20.690
We're gonna see something
unexpected happen here.

28
00:02:20.690 --> 00:02:25.460
So if I run this code, oops,
I feel like I'm missing.

29
00:02:25.460 --> 00:02:30.976
&gt;&gt; Speaker 2: I think you overwrote
your function with the string.

30
00:02:30.976 --> 00:02:33.394
&gt;&gt; Nina Zakharenko: Where?

31
00:02:33.394 --> 00:02:37.514
&gt;&gt; Speaker 2: In name_lib.

32
00:02:37.514 --> 00:02:40.594
&gt;&gt; Nina Zakharenko: I totally did,
thank you for catching that.

33
00:02:46.343 --> 00:02:52.790
&gt;&gt; Nina Zakharenko: So I'm gonna call this
one name_upper, and just run that again.

34
00:02:52.790 --> 00:02:55.490
It says my upper case name is NINA, okay.

35
00:02:55.490 --> 00:03:00.380
So in my other program,
now I'm Fred, using this library.

36
00:03:00.380 --> 00:03:04.480
I run it, and okay, it says in my
own code, the upper name is Fred.

37
00:03:04.480 --> 00:03:06.030
But it's also printing out,

38
00:03:06.030 --> 00:03:10.320
upper case name is Nina,
that's totally not what we want.

39
00:03:10.320 --> 00:03:14.870
That's because when Python doesn't import,
it just kind of follows all the stuff,

40
00:03:14.870 --> 00:03:15.680
step by step.

41
00:03:19.520 --> 00:03:25.720
There's a conditional that we have to set,
and it's pretty kind of recommended.

42
00:03:27.520 --> 00:03:32.274
If you want your code to be reusable and
there's any code in your library

43
00:03:32.274 --> 00:03:36.487
that's kind of just for you,
you wanna put it in a main method.

44
00:03:41.048 --> 00:03:44.967
&gt;&gt; Nina Zakharenko: And
to understand how the main method works,

45
00:03:44.967 --> 00:03:48.795
I'm gonna print out the value of __name.

46
00:03:51.442 --> 00:03:55.250
&gt;&gt; Nina Zakharenko: Underscore underscore
in Python, or double underscore,

47
00:03:55.250 --> 00:03:59.300
sometimes called dunder, so
just so you know what that means.

48
00:03:59.300 --> 00:04:01.020
I'm gonna run this.

49
00:04:02.850 --> 00:04:08.941
So when I run this file directly,

50
00:04:08.941 --> 00:04:15.701
dunder name is equal to __name_.

51
00:04:15.701 --> 00:04:19.651
If I run my other program now,

52
00:04:19.651 --> 00:04:26.460
we'll see all this stuff
is printed out again.

53
00:04:26.460 --> 00:04:28.340
But now when I'm used as a library,

54
00:04:28.340 --> 00:04:33.180
my dunder name is the name of the file,
the name of the import.

55
00:04:35.040 --> 00:04:40.700
So if we only want our special
code to run when we're running

56
00:04:40.700 --> 00:04:47.160
this file directly,
we're gonna want to check, if dunder name

57
00:04:47.160 --> 00:04:52.480
is equal to a particular value,
then run this code.

58
00:04:52.480 --> 00:04:54.652
What are we checking for?

59
00:04:54.652 --> 00:04:56.981
&gt;&gt; Speaker 2: If it's equal to name?

60
00:04:56.981 --> 00:04:59.471
&gt;&gt; Nina Zakharenko: If
it's equal dunder name.

61
00:04:59.471 --> 00:05:01.726
&gt;&gt; Speaker 2: Underscore, underscore
&gt;&gt; Nina Zakharenko: Mm-hm.

62
00:05:05.662 --> 00:05:10.450
&gt;&gt; Nina Zakharenko: So for
my if statement, I have to indent.

63
00:05:10.450 --> 00:05:14.040
In VS code, if you select all the lines,
you can just hit Tab once.

64
00:05:16.320 --> 00:05:20.010
Okay, now if I run my library,

65
00:05:20.010 --> 00:05:25.360
I see uppercase name is NINA, but
if I go back to my other program,

66
00:05:25.360 --> 00:05:30.580
and I run it, I just see,
in my own code, my upper name is FRED.

67
00:05:30.580 --> 00:05:31.651
Does that make sense?

68
00:05:33.890 --> 00:05:34.736
&gt;&gt; Nina Zakharenko: Okay.

69
00:05:39.984 --> 00:05:43.351
&gt;&gt; Nina Zakharenko: When we're
working with files like this,

70
00:05:43.351 --> 00:05:47.940
an uncaught exception is going
to exit out of our program.

71
00:05:49.310 --> 00:05:55.540
So I'm gonna make a new
file called exceptions.py.

72
00:05:55.540 --> 00:05:58.890
And let's do something that
we know is not allowed.

73
00:06:00.110 --> 00:06:04.860
I'm gonna call int with a string.

74
00:06:04.860 --> 00:06:08.360
It's gonna throw an error, right.

75
00:06:11.480 --> 00:06:13.900
This will throw an error.

76
00:06:13.900 --> 00:06:18.790
And then I'm gonna print out,
this is the end of my program.

77
00:06:22.060 --> 00:06:28.310
So running this in the terminal,
I see my value error printed out.

78
00:06:29.490 --> 00:06:33.490
But we don't ever get to the end
of the program, it just exits.

79
00:06:37.180 --> 00:06:41.341
&gt;&gt; Nina Zakharenko: In order to get around
this, you're gonna want to use a try and

80
00:06:41.341 --> 00:06:43.320
except block.

81
00:06:43.320 --> 00:06:46.500
So you put the code that you're kind of,
you're not sure,

82
00:06:46.500 --> 00:06:48.245
maybe it'll throw an error maybe it won't.

83
00:06:48.245 --> 00:06:51.284
You put it in a try block, and

84
00:06:51.284 --> 00:06:56.756
then right underneath the try,
you put an accept.

85
00:06:56.756 --> 00:07:03.350
In the except, you need to put the exact
exception class that you want to catch.

86
00:07:03.350 --> 00:07:06.120
And luckily,
we have that right here in the trace back.

87
00:07:07.180 --> 00:07:09.590
So I'm just gonna copy that exact thing.

88
00:07:12.060 --> 00:07:16.275
And then I'll put a colon,
and then print something out.

89
00:07:21.646 --> 00:07:26.610
&gt;&gt; Nina Zakharenko: When I run this,
now I reach the end of my program.

90
00:07:26.610 --> 00:07:30.510
And I also print out the code
that's in the except block.

91
00:07:33.420 --> 00:07:40.000
You can use as to give this exception

92
00:07:40.000 --> 00:07:45.509
a variable name, that you can then use
within that except code statement.

93
00:07:46.750 --> 00:07:50.209
So now I can print out e, and

94
00:07:50.209 --> 00:07:55.938
it'll give me more information right here.

