WEBVTT

1
00:00:00.150 --> 00:00:03.883
&gt;&gt; Nina Zakharenko: If you want
to loop over a dictionary,

2
00:00:03.883 --> 00:00:08.325
let's say I have
a dictionary of hex colors.

3
00:00:08.325 --> 00:00:15.786
And red is #FF and

4
00:00:15.786 --> 00:00:20.264
then green

5
00:00:20.264 --> 00:00:25.873
is,
&gt;&gt; Nina Zakharenko: #008.

6
00:00:25.873 --> 00:00:28.360
So this is my dictionary.

7
00:00:30.000 --> 00:00:34.504
If I tried to loop over my dictionary just

8
00:00:34.504 --> 00:00:39.286
as is,
&gt;&gt; Nina Zakharenko: What am

9
00:00:39.286 --> 00:00:41.860
I gonna see here?

10
00:00:41.860 --> 00:00:43.185
It's just the keys.

11
00:00:45.644 --> 00:00:48.071
&gt;&gt; Nina Zakharenko: If I wanted
to loop over the keys and

12
00:00:48.071 --> 00:00:52.519
values in my dictionary at once,
which method do I have to use?

13
00:00:55.620 --> 00:00:56.658
&gt;&gt; Speaker 2: .items?

14
00:00:56.658 --> 00:01:00.826
&gt;&gt; Nina Zakharenko: .items, that's exactly
right, so I would put .items here, and

15
00:01:00.826 --> 00:01:04.370
what does .items return,
what's the data structure?

16
00:01:04.370 --> 00:01:07.633
&gt;&gt; Speaker 3: Q value per,
&gt;&gt; Speaker 4: Tuples.

17
00:01:07.633 --> 00:01:10.611
&gt;&gt; Nina Zakharenko: Tuples,
yeah, it's a list of tuples, and

18
00:01:10.611 --> 00:01:12.470
what can we do with tuples?

19
00:01:12.470 --> 00:01:13.530
We can unpack them.

20
00:01:15.430 --> 00:01:20.352
So we can use that tuple
unpacking in our for loop and

21
00:01:20.352 --> 00:01:25.404
we can say, for and
give a variable name for the key.

22
00:01:28.569 --> 00:01:32.372
&gt;&gt; Nina Zakharenko: And
then give the variable name to the value,

23
00:01:34.558 --> 00:01:36.750
&gt;&gt; Nina Zakharenko: And loop over that.

24
00:01:36.750 --> 00:01:40.475
The key here is to call
.items on our dictionary so

25
00:01:40.475 --> 00:01:43.858
that we get that key-value
pair all at once.

26
00:01:50.966 --> 00:01:56.310
&gt;&gt; Nina Zakharenko: A lot better than 4i
equals i++, kinda that sorta stuff, right?

27
00:01:56.310 --> 00:01:59.610
&gt;&gt; Speaker 5: So in this case,
you have to increment at the end,

28
00:01:59.610 --> 00:02:02.000
what if you wanted to
increment at the beginning?

29
00:02:02.000 --> 00:02:08.134
Like do i++, doing ++i,
where you'd increment

30
00:02:08.134 --> 00:02:13.180
first before you started the comparison.

31
00:02:13.180 --> 00:02:16.170
&gt;&gt; Nina Zakharenko: Increment from i.

32
00:02:16.170 --> 00:02:19.590
If you want to get fancy
with the sequence,

33
00:02:19.590 --> 00:02:24.472
you can use range to
generate the indices and

34
00:02:24.472 --> 00:02:29.290
then just manually use
that index in your list.

35
00:02:31.330 --> 00:02:33.590
&gt;&gt; Speaker 5: Normally
people increment that way,

36
00:02:33.590 --> 00:02:35.540
maybe that's normally how
people do it in the end.

37
00:02:37.650 --> 00:02:40.487
&gt;&gt; Nina Zakharenko: Normally
people increment, well,

38
00:02:40.487 --> 00:02:43.510
you wanna start at 0 and go from there.

39
00:02:47.310 --> 00:02:49.904
Right, yeah, a lot more readable.

40
00:02:49.904 --> 00:02:55.980
If on the off case that you need

41
00:02:55.980 --> 00:03:00.600
to get the index and
the item at that index at the same time,

42
00:03:00.600 --> 00:03:03.920
there's a built in
function called enumerate.

43
00:03:03.920 --> 00:03:10.160
So if I look at my list of colors,
I could say, for i, that's the index,

44
00:03:10.160 --> 00:03:17.930
and the color in, and
then call this built-in enumerate,

45
00:03:17.930 --> 00:03:22.580
if I can spell it right, and
pass in my list of colors.

46
00:03:22.580 --> 00:03:29.269
That's gonna return a list of
tuples in enumerate colors,

47
00:03:29.269 --> 00:03:34.618
for the first item in
the tuple is the position or

48
00:03:34.618 --> 00:03:40.122
the index and
the second item is the item itself.

49
00:03:42.841 --> 00:03:46.120
&gt;&gt; Speaker 2: You would want
that to be i though, not index?

50
00:03:46.120 --> 00:03:47.099
&gt;&gt; Nina Zakharenko: Yes, thank you.

51
00:03:51.916 --> 00:03:55.652
&gt;&gt; Nina Zakharenko: Okay, so index 0,
color red, index 1, color green, index 2,

52
00:03:55.652 --> 00:03:57.890
color blue, pretty straightforward.

53
00:03:59.280 --> 00:04:03.675
So a common error when
looping over a dictionary,

54
00:04:03.675 --> 00:04:10.489
I had my hex colors dictionary, what if
I try to do for key value in hex colors?

55
00:04:14.294 --> 00:04:15.911
&gt;&gt; Nina Zakharenko: What
would happen here?

56
00:04:20.146 --> 00:04:24.040
&gt;&gt; Nina Zakharenko: I'm not using dot
items, so what am I gonna be looping over?

57
00:04:26.110 --> 00:04:27.200
&gt;&gt; Speaker 2: The keys.

58
00:04:27.200 --> 00:04:28.130
&gt;&gt; Nina Zakharenko: Just the keys, yeah.

59
00:04:29.276 --> 00:04:34.290
So I'm gonna get a tuple
unpacking error because

60
00:04:34.290 --> 00:04:38.080
I'm only getting a key back but I'm
trying to assign it to a key value tuple.

61
00:04:39.260 --> 00:04:43.274
Remember, if we had a tuple and,

62
00:04:48.039 --> 00:04:49.309
&gt;&gt; Nina Zakharenko: We unpacked it and

63
00:04:49.309 --> 00:04:52.949
we didn't provide the right
number of arguments,

64
00:04:52.949 --> 00:04:56.514
we got the same error,
too many values to unpack.

