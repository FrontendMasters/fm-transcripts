WEBVTT

1
00:00:00.270 --> 00:00:03.680
&gt;&gt; Nina Zakharenko: I feel like we've been
laying a good foundation this morning,

2
00:00:03.680 --> 00:00:05.280
getting comfortable in Python.

3
00:00:05.280 --> 00:00:11.933
Getting comfortable in the understanding
that one of Python's core tendencies is to

4
00:00:11.933 --> 00:00:17.780
use quotations instead of something like
curly braces to delineate blocks of code.

5
00:00:19.380 --> 00:00:20.640
So, we got the basics down.

6
00:00:20.640 --> 00:00:23.880
We know about numbers,
we know about strings.

7
00:00:23.880 --> 00:00:26.570
Now it's time to talk about
some advanced data types.

8
00:00:26.570 --> 00:00:32.017
So, they're the container objects that
let us organize other types of objects

9
00:00:32.017 --> 00:00:37.152
into one data structure, a collection,
so that we can work with it later.

10
00:00:42.026 --> 00:00:45.553
&gt;&gt; Nina Zakharenko: Very quickly,
for most of these data structures,

11
00:00:45.553 --> 00:00:48.751
I put a little bit of
a cheat sheet at the top, so

12
00:00:48.751 --> 00:00:53.097
that when you're coming back to
this class, a few days later or

13
00:00:53.097 --> 00:00:58.947
a week from now, there's one place to look
for all the most important information.

14
00:01:02.303 --> 00:01:07.255
&gt;&gt; Nina Zakharenko: So
let's look at these lists in practice.

15
00:01:12.799 --> 00:01:16.494
&gt;&gt; Nina Zakharenko: So we've already seen
how to create a little hint about how to

16
00:01:16.494 --> 00:01:18.020
create a new list right?

17
00:01:19.400 --> 00:01:23.712
So in Python an empty list can be
created with two square brackets.

18
00:01:26.963 --> 00:01:32.046
&gt;&gt; Nina Zakharenko: But you can also,
because everything is an object in Python,

19
00:01:32.046 --> 00:01:36.835
you can also call list on
the type list with no parameters,

20
00:01:36.835 --> 00:01:41.740
and that'll also give you an empty list,
right?

21
00:01:41.740 --> 00:01:45.440
So because this is a built-in method,
I didn't have to declare it, right?

22
00:01:45.440 --> 00:01:47.790
It's not a variable that I made.

23
00:01:47.790 --> 00:01:50.060
If you call your variables list,

24
00:01:50.060 --> 00:01:52.420
you're gonna end up having
problems down the line.

25
00:01:52.420 --> 00:01:56.520
All right, and just to confirm,
we can just type, and

26
00:01:56.520 --> 00:02:01.440
type will tell us that this
[INAUDIBLE] square brackets are lists.

27
00:02:05.800 --> 00:02:09.941
Now if I wanna create a list
with some items in it,

28
00:02:09.941 --> 00:02:14.090
we're going to use the comma
to separate items.

29
00:02:15.100 --> 00:02:18.750
So we're all typing along and
asking questions.

30
00:02:20.970 --> 00:02:23.310
Let's make a list of names for

31
00:02:23.310 --> 00:02:27.358
these types that can contain other types
you wanna name them in the plural right?

32
00:02:27.358 --> 00:02:29.513
So you know names not name,

33
00:02:29.513 --> 00:02:34.970
will give me as a programmer hint
that this is probably a collection.

34
00:02:36.600 --> 00:02:38.444
So let's put some names in here.

35
00:02:43.186 --> 00:02:46.400
&gt;&gt; Nina Zakharenko: And
double checking our type, right?

36
00:02:46.400 --> 00:02:47.790
Type of names, it's a list.

37
00:02:48.900 --> 00:02:55.817
So in the REPL we can easily just type
that variable in and see the results.

38
00:02:58.918 --> 00:03:03.217
&gt;&gt; Nina Zakharenko: We can also past our
list of names to the print statement and

39
00:03:03.217 --> 00:03:08.217
we can print them out, in case we
wanna see what's going on inside of

40
00:03:08.217 --> 00:03:10.970
a function we can print out our list.

41
00:03:13.360 --> 00:03:19.620
Lists also have a very useful method,
but the method isn't on them, right?

42
00:03:19.620 --> 00:03:23.140
We've seen mystring.lower, right?

43
00:03:23.140 --> 00:03:25.240
That's a method on the string.

44
00:03:25.240 --> 00:03:28.686
For example,
&gt;&gt; Nina Zakharenko: We saw this

45
00:03:28.686 --> 00:03:29.970
earlier, right?

46
00:03:29.970 --> 00:03:31.080
This is a string method.

47
00:03:31.080 --> 00:03:33.650
It acts on the string.

48
00:03:33.650 --> 00:03:38.750
But to find out the length of the list,
we're gonna use a built-in method called

49
00:03:38.750 --> 00:03:42.690
Len, but
it's not a method that's on the list.

50
00:03:42.690 --> 00:03:46.070
It's just a built-in method in Python.

51
00:03:46.070 --> 00:03:49.900
So we would call the function Len and
pass names into it.

52
00:03:49.900 --> 00:03:54.003
It's because more than lists can have a
length right, a stream can have a length.

53
00:03:56.175 --> 00:03:56.986
&gt;&gt; Nina Zakharenko: Set, dictionary,

54
00:03:56.986 --> 00:04:00.470
some of the other types that we're
gonna talk about also have a length.

55
00:04:00.470 --> 00:04:03.340
So this is just a globally
available function.

56
00:04:06.000 --> 00:04:09.620
The most important thing about
lists is they retain the order

57
00:04:09.620 --> 00:04:10.880
of the items in them.

58
00:04:12.090 --> 00:04:15.570
In the next section, we're gonna
look at some data types that don't.

59
00:04:15.570 --> 00:04:18.550
So this is an important distinction here.

60
00:04:18.550 --> 00:04:23.180
In order to access the items in a list,
we're gonna need to use an index.

61
00:04:25.080 --> 00:04:28.660
Sometimes multiple indexes
are also called indices.

62
00:04:30.150 --> 00:04:34.662
Just some preference there.

63
00:04:34.662 --> 00:04:35.765
Let's take a look at this.

64
00:04:44.727 --> 00:04:46.319
&gt;&gt; Nina Zakharenko: See if this works.

65
00:04:51.528 --> 00:04:55.247
&gt;&gt; Nina Zakharenko: So if I have a list.

66
00:04:57.786 --> 00:05:00.183
&gt;&gt; Nina Zakharenko: And
has some strings in it.

67
00:05:09.605 --> 00:05:14.150
&gt;&gt; Nina Zakharenko: We know that lists
retain the order of the items within them.

68
00:05:14.150 --> 00:05:16.740
And we access the items
in the list by index.

69
00:05:17.940 --> 00:05:22.610
So the index for each item here.

70
00:05:22.610 --> 00:05:25.175
Index starts at 0 always in programming.

71
00:05:27.293 --> 00:05:31.220
&gt;&gt; Nina Zakharenko: The index of A is 0,
B is 1, C is 2.

72
00:05:31.220 --> 00:05:37.703
And if we call len of my_list.

73
00:05:40.221 --> 00:05:40.990
&gt;&gt; Nina Zakharenko: What is it?

74
00:05:40.990 --> 00:05:41.940
&gt;&gt; Student: It's three.

75
00:05:41.940 --> 00:05:43.127
&gt;&gt; Nina Zakharenko: Three, right.

76
00:05:46.373 --> 00:05:48.881
&gt;&gt; Nina Zakharenko: Okay so
using the index.

77
00:05:54.252 --> 00:05:59.010
&gt;&gt; Nina Zakharenko: To get the item at
the index I put the index in square

78
00:05:59.010 --> 00:06:02.990
brackets that follow the list variable.

79
00:06:05.280 --> 00:06:06.450
So what would this be?

80
00:06:06.450 --> 00:06:07.001
Which value?

81
00:06:13.785 --> 00:06:18.850
&gt;&gt; Nina Zakharenko: I'm gonna remove
the equals just for any confusion.

82
00:06:18.850 --> 00:06:26.256
Okay, my list of 0 is A.

83
00:06:26.256 --> 00:06:29.212
Right.

84
00:06:29.212 --> 00:06:35.912
And my list of 2?

85
00:06:35.912 --> 00:06:37.340
&gt;&gt; Student2: C.

86
00:06:37.340 --> 00:06:38.048
&gt;&gt; Nina Zakharenko: C.

87
00:06:38.048 --> 00:06:40.455
Okay.

88
00:06:40.455 --> 00:06:41.327
Make sense?

89
00:06:43.810 --> 00:06:45.900
&gt;&gt; Nina Zakharenko: So let's try this out.

90
00:06:45.900 --> 00:06:47.680
We have our list of names.

91
00:06:47.680 --> 00:06:51.404
We know that has a length of three.

92
00:06:51.404 --> 00:06:57.346
names[0] is Nina, names[1] is Max,

93
00:06:57.346 --> 00:07:01.366
names, the index 2 is Rose.

94
00:07:01.366 --> 00:07:08.160
So my list is a blank three, what if I
try to access the item at position three?

95
00:07:08.160 --> 00:07:09.515
What will I see?

96
00:07:09.515 --> 00:07:10.537
&gt;&gt; Student4: A [INAUDIBLE] error.

97
00:07:10.537 --> 00:07:12.970
&gt;&gt; Nina Zakharenko: Which error?

98
00:07:12.970 --> 00:07:13.980
&gt;&gt; Student2: Index error.

99
00:07:13.980 --> 00:07:14.970
&gt;&gt; Student3: Out of range.

100
00:07:14.970 --> 00:07:17.140
&gt;&gt; Nina Zakharenko: Right,
list index out of range.

101
00:07:17.140 --> 00:07:17.820
Makes sense, right?

102
00:07:17.820 --> 00:07:20.459
You're trying to access
an item that's not there.

103
00:07:27.697 --> 00:07:31.372
&gt;&gt; Nina Zakharenko: To update a particular
item in the list we use that same

104
00:07:31.372 --> 00:07:36.760
square-bracket notation but
we just add assignment to the end of it.

105
00:07:36.760 --> 00:07:38.439
So looking at our list of names.

106
00:07:39.660 --> 00:07:46.740
Let's say I wanted to update
the middle name to 'Jimmy'.

107
00:07:46.740 --> 00:07:51.600
I would put the list,
put which position I want to update,

108
00:07:51.600 --> 00:07:56.300
then equals, just like we've done
with variables, and the new value.

109
00:07:56.300 --> 00:08:00.246
So now if I look at my list of names,
I'll see that the value there has been

110
00:08:00.246 --> 00:08:06.355
replaced
&gt;&gt; Nina Zakharenko: Just

111
00:08:06.355 --> 00:08:09.620
a little tip about formatting with Python.

112
00:08:11.240 --> 00:08:16.120
When I'm declaring my list and
I put my first kinda

113
00:08:16.120 --> 00:08:20.180
opening square bracket, optionally here,
I can just press Enter.

114
00:08:21.390 --> 00:08:27.470
And that gives me that dot, dot,
dot in the REPL expecting more input.

115
00:08:27.470 --> 00:08:32.060
So I can just do the same thing but
enter each name on a new line.

116
00:08:33.150 --> 00:08:38.900
For really long lists or
lists that have complicated information.

117
00:08:38.900 --> 00:08:41.240
Kind of a little bit easier to read.

118
00:08:41.240 --> 00:08:47.530
Also unlike in JSON, you can have
a comma here on the very last item and

119
00:08:47.530 --> 00:08:51.880
close the list, and
that's perfectly valid.

120
00:08:51.880 --> 00:08:55.466
In fact you'll see this frequently in

121
00:08:55.466 --> 00:09:00.403
production Python just
because it helps with difs.

122
00:09:00.403 --> 00:09:02.370
If you add more items to the list,

123
00:09:02.370 --> 00:09:06.670
well then this last item doesn't
change it already has the comma there.

124
00:09:08.090 --> 00:09:08.730
Cool.

125
00:09:08.730 --> 00:09:11.010
And the list looks exactly the same.

126
00:09:12.200 --> 00:09:15.729
So just a few common gotchas with lists.

127
00:09:18.154 --> 00:09:22.955
&gt;&gt; Nina Zakharenko: If I
tried to make a new list and

128
00:09:22.955 --> 00:09:28.150
if I forget a comma what do I see?

129
00:09:32.251 --> 00:09:35.550
&gt;&gt; Student4: Syntax error?

130
00:09:35.550 --> 00:09:37.119
&gt;&gt; Nina Zakharenko: Right, invalid syntax.

131
00:09:39.390 --> 00:09:41.260
Notice how it's pointing at four here but

132
00:09:41.260 --> 00:09:45.290
actually the problem is I forgot
a symbol between three and four.

133
00:09:45.290 --> 00:09:50.810
Sometimes you'll see a syntax error on the
next line or the previous line of where

134
00:09:50.810 --> 00:09:56.350
the error actually occurred, so sometimes
you have to look around a little bit.

135
00:09:56.350 --> 00:10:02.200
Okay, what if I make a list of names.

136
00:10:03.980 --> 00:10:04.830
And.

137
00:10:06.950 --> 00:10:13.283
I guess this woulnd't work into REPL,
so I'm just gonna quickly open a file.

138
00:10:13.283 --> 00:10:16.497
You don't have to open the same file.

139
00:10:16.497 --> 00:10:19.450
It's just kind of a quick example.

140
00:10:22.710 --> 00:10:26.158
If I had a list of names.

141
00:10:26.158 --> 00:10:29.942
And that you'll see in the US code
when you when you put in an opening

142
00:10:29.942 --> 00:10:33.806
bracket at all put in the closing
bracket for you, really helpful.

143
00:10:33.806 --> 00:10:38.695
But let's say I deleted by accident and

144
00:10:38.695 --> 00:10:42.260
then I put in some more code.

145
00:10:42.260 --> 00:10:47.560
I'm gonna just save this as a Python file.

146
00:10:50.650 --> 00:10:57.880
Okay, now I'm gonna run it, and we'll
see I got a SyntaxError: invalid syntax.

147
00:10:57.880 --> 00:11:00.960
Here you'll see that it's
pointing at line X equals 5 but

148
00:11:00.960 --> 00:11:03.330
that's perfectly valid code.

149
00:11:03.330 --> 00:11:05.490
The error is actually up above.

150
00:11:05.490 --> 00:11:07.460
I forgot my closing bracket.

151
00:11:08.960 --> 00:11:11.980
And if you installed your linter

152
00:11:11.980 --> 00:11:15.560
you'll also see that the X
here is underlined in red.

153
00:11:15.560 --> 00:11:18.170
And if you mouse over it,
it will show you invalid syntax.

154
00:11:18.170 --> 00:11:19.690
You don’t even have to run your code.

155
00:11:19.690 --> 00:11:22.189
That's just one extra layer of protection.

156
00:11:25.435 --> 00:11:30.799
&gt;&gt; Nina Zakharenko: Okay, makes sense,
&gt;&gt; Nina Zakharenko: And

157
00:11:30.799 --> 00:11:35.214
going back to my REPL here,
remember that in this terminal window

158
00:11:35.214 --> 00:11:39.631
there’s a drop down here where
you can select between your REPL,

159
00:11:39.631 --> 00:11:42.310
your Python shell, your other shell.

160
00:11:42.310 --> 00:11:44.660
And you might have a few options here.

161
00:11:45.870 --> 00:11:49.375
I'm just gonna select the REPL.

162
00:11:49.375 --> 00:11:50.389
Okay.

163
00:11:50.389 --> 00:11:51.421
Makes sense, right?

164
00:11:51.421 --> 00:11:55.660
You have to be very specific
with how you format your list.

