WEBVTT

1
00:00:00.025 --> 00:00:02.080
&gt;&gt; Nina Zakharenko: Feel like
your minds are spinning,

2
00:00:02.080 --> 00:00:03.799
you know where this is going.

3
00:00:03.799 --> 00:00:07.464
Okay, so
going back to our dictionary cheat sheet,

4
00:00:07.464 --> 00:00:11.642
the use here it's used for
storing data in key value pairs.

5
00:00:11.642 --> 00:00:14.888
The keys used must be
immutable data types.

6
00:00:14.888 --> 00:00:17.347
If they're not you're gonna get an error.

7
00:00:17.347 --> 00:00:22.674
For creation just two,
empty curly braces or calling dict for

8
00:00:22.674 --> 00:00:27.804
an empty dictionary, or for
a dictionary with items in it.

9
00:00:27.804 --> 00:00:33.427
The key on the left side,
a colon separating a key value pair,

10
00:00:33.427 --> 00:00:36.887
followed by the value and a comma, and

11
00:00:36.887 --> 00:00:41.121
then as many other key
value pairs as you want.

12
00:00:41.121 --> 00:00:46.210
Makes sense, right?

13
00:00:46.210 --> 00:00:49.627
Kind of almost sort of like a set, but

14
00:00:49.627 --> 00:00:54.491
with an extra addition of
also putting in the value.

15
00:00:54.491 --> 00:01:00.222
Search methods is key in my dict,
that is very fast.

16
00:01:00.222 --> 00:01:04.004
So, one in numbs, very fast,

17
00:01:04.004 --> 00:01:09.973
especially kind of for
larger data structures.

18
00:01:09.973 --> 00:01:14.378
Some common methods and
dictionaries using the key parsed into

19
00:01:14.378 --> 00:01:18.128
the square brackets to get
back the value of the item.

20
00:01:18.128 --> 00:01:20.794
My dict.items for all key value pairs.

21
00:01:20.794 --> 00:01:23.757
My dict.key is for all the key.

22
00:01:23.757 --> 00:01:27.333
And my dict.values for all the values.

23
00:01:27.333 --> 00:01:30.602
Okay, now is the order preserved?

24
00:01:30.602 --> 00:01:33.606
Sort of, as of Python 36,

25
00:01:33.606 --> 00:01:38.257
a dictionary is sorted in insertion order.

26
00:01:38.257 --> 00:01:42.590
So, like with a set there
was just no order at all.

27
00:01:42.590 --> 00:01:45.208
But now, in a new version of Python,

28
00:01:45.208 --> 00:01:50.288
the dictionary knows kind of when
things were put into it in what order.

29
00:01:50.288 --> 00:01:56.746
But those items that can't be accessed by
index, they can only be accessed by key.

30
00:01:56.746 --> 00:02:01.327
So, kind of sort of a little bit different
than the other data types we saw.

31
00:02:01.327 --> 00:02:04.594
Is the dictionary mutable?

32
00:02:04.594 --> 00:02:07.775
Yes, we can add and remove items to it.

33
00:02:07.775 --> 00:02:11.257
Is the dictionary in place sortable?

34
00:02:11.257 --> 00:02:12.172
No, it's not.

