WEBVTT

1
00:00:00.220 --> 00:00:05.381
&gt;&gt; Nina Zakharenko: We can use operations
to compare items between two sets,

2
00:00:05.381 --> 00:00:10.229
and there's just a cheat sheet here for
some of them.

3
00:00:10.229 --> 00:00:14.374
There's more than this, but these
are the ones that I generally find useful.

4
00:00:14.374 --> 00:00:19.290
So union or pipe symbol creates
a new set with all the items

5
00:00:19.290 --> 00:00:23.497
from both s and t, and
let's see that in action.

6
00:00:33.477 --> 00:00:38.496
&gt;&gt; Nina Zakharenko: And very quickly
just like list, if I wanna find out

7
00:00:38.496 --> 00:00:43.769
if an item is in my set or
not, I can use the In keyword.

8
00:00:43.769 --> 00:00:47.350
So if I have a set of colors,

9
00:00:53.184 --> 00:00:55.893
&gt;&gt; Nina Zakharenko: I can say is blue in

10
00:00:55.893 --> 00:00:57.345
colors?

11
00:00:57.345 --> 00:00:58.862
It is.

12
00:00:58.862 --> 00:01:01.010
Is orange in colors?

13
00:01:01.010 --> 00:01:02.877
It's not.

14
00:01:02.877 --> 00:01:07.591
There is some other methods on
list that help us figure out if

15
00:01:07.591 --> 00:01:09.773
items were in there or not.

16
00:01:09.773 --> 00:01:12.377
One of those was .index.

17
00:01:12.377 --> 00:01:15.269
Do you think set has a .index?

18
00:01:15.269 --> 00:01:19.874
No, because the items in the set,
they aren't positional.

19
00:01:19.874 --> 00:01:25.088
Just think about it like
Santa's bag of presents, right?

20
00:01:25.088 --> 00:01:28.778
He's got presents in there,
kind of all jumbled up.

21
00:01:28.778 --> 00:01:30.213
Doesn't really matter, right?

22
00:01:33.921 --> 00:01:38.185
&gt;&gt; Nina Zakharenko: For a list,
we also used a count method, right?

23
00:01:38.185 --> 00:01:43.334
Like to find out how many times
a particular item appeared in the list.

24
00:01:43.334 --> 00:01:45.715
Does sets have a count method?

25
00:01:45.715 --> 00:01:47.847
No, right?

26
00:01:47.847 --> 00:01:50.648
Because each item is only in there once.

27
00:01:50.648 --> 00:01:52.771
Once it's in there that's it,

28
00:01:52.771 --> 00:01:56.792
if I try to add it to the set
again it's not gonna get updated.

29
00:01:56.792 --> 00:02:02.317
Now set operations are really useful.

30
00:02:02.317 --> 00:02:09.552
So I'm gonna make two sets of colors and
I recommend that you make your own sets.

31
00:02:09.552 --> 00:02:15.612
So the first one is gonna
be the rainbow colors,

32
00:02:15.612 --> 00:02:21.065
and those are the same for everyone; red,

33
00:02:21.065 --> 00:02:27.138
orange, yellow, green, blue, and violet.

34
00:02:27.138 --> 00:02:31.946
And now make a new set
of your favorite colors.

35
00:02:31.946 --> 00:02:35.149
Based on my hair, my favorite
color is obviously pink, right?

36
00:02:35.149 --> 00:02:38.374
Pink hair, pink laptop, but

37
00:02:38.374 --> 00:02:43.537
I also like color black,
I like the color blue.

38
00:02:48.705 --> 00:02:52.163
&gt;&gt; Nina Zakharenko: So
now you should have two sets.

39
00:02:52.163 --> 00:02:57.135
Just for clarity I'm gonna rename my
favorite set favorite colors just so

40
00:02:57.135 --> 00:02:59.631
you can kind of follow along with me.

41
00:02:59.631 --> 00:03:04.063
To do that I can just assign

42
00:03:04.063 --> 00:03:08.703
a new variable to that one.

43
00:03:08.703 --> 00:03:14.246
Looking at my rainbow colors, red,
orange, they're all in there.

44
00:03:14.246 --> 00:03:17.609
My favorite colors, black, blue, and pink.

45
00:03:20.173 --> 00:03:21.192
&gt;&gt; Nina Zakharenko: Now.

46
00:03:24.171 --> 00:03:28.934
&gt;&gt; Nina Zakharenko: We can use
the union operator to create a new

47
00:03:28.934 --> 00:03:33.697
set that contains all
of the items from both

48
00:03:33.697 --> 00:03:37.950
rainbow colors and favorite colors.

49
00:03:40.982 --> 00:03:46.799
&gt;&gt; Nina Zakharenko: Remember
you can use my set.union,

50
00:03:46.799 --> 00:03:52.145
other set,
&gt;&gt; Nina Zakharenko: Or

51
00:03:52.145 --> 00:03:57.577
you can use my_set, and
this pipe symbol that means union.

52
00:03:59.491 --> 00:04:01.466
&gt;&gt; Nina Zakharenko: Other set.

53
00:04:01.466 --> 00:04:08.331
Okay, so let's try this with
rainbow colors and favorite colors.

54
00:04:09.963 --> 00:04:12.294
&gt;&gt; Nina Zakharenko: And so
all the items from rainbow colors and

55
00:04:12.294 --> 00:04:14.310
all the items from favorite colors.

56
00:04:14.310 --> 00:04:17.516
And we'll see that the set is
a little bit shorter, right?

57
00:04:17.516 --> 00:04:22.481
All the items combined are shorter
than the sets with the two different

58
00:04:22.481 --> 00:04:23.836
elements in them.

59
00:04:23.836 --> 00:04:26.517
Why is that?

60
00:04:26.517 --> 00:04:27.897
&gt;&gt; Speaker 2: Remove the duplicates.

61
00:04:27.897 --> 00:04:29.679
&gt;&gt; Nina Zakharenko: Right,
remove the duplicates

62
00:04:33.929 --> 00:04:34.479
&gt;&gt; Nina Zakharenko: Okay,

63
00:04:34.479 --> 00:04:36.594
next is the intersection.

64
00:04:38.409 --> 00:04:43.312
&gt;&gt; Nina Zakharenko: So that's creating
a new set with only the items that appear

65
00:04:43.312 --> 00:04:44.496
in both sets.

66
00:04:44.496 --> 00:04:48.109
And the symbol for
intersection is the ampersand.

67
00:04:48.109 --> 00:04:54.964
So, rainbow rainbow_colors
&amp; favorite_colors.

68
00:04:54.964 --> 00:04:56.845
For me, that's just blue.

69
00:04:56.845 --> 00:05:00.299
Depending on what your favorite colors
are, you might see more results or

70
00:05:00.299 --> 00:05:01.255
you might see less.

71
00:05:01.255 --> 00:05:02.892
Or you might get back nothing.

72
00:05:05.404 --> 00:05:10.375
&gt;&gt; Nina Zakharenko: Now, lastly we're
also gonna find the difference.

73
00:05:10.375 --> 00:05:15.507
The difference is,
it's creating a new set with

74
00:05:15.507 --> 00:05:21.402
all the items that are in one,
but not in the other side.

75
00:05:21.402 --> 00:05:27.083
So to do that we use this hat character.

76
00:05:27.083 --> 00:05:28.582
That's the difference.

77
00:05:32.688 --> 00:05:36.460
&gt;&gt; Nina Zakharenko: And we'll see that
blue Is missing from this list, right?

78
00:05:36.460 --> 00:05:40.200
Blue was in both and now it's gone,
that's the intersection.

79
00:05:42.864 --> 00:05:46.550
&gt;&gt; Nina Zakharenko: There are a lot of
other useful operations available on set.

80
00:05:46.550 --> 00:05:49.630
You can see if one set is
a subset of another set,

81
00:05:49.630 --> 00:05:51.947
or superset, there's a lot more.

82
00:05:51.947 --> 00:05:55.088
I don't have time to cover them all.

83
00:05:55.088 --> 00:05:59.433
Python also has a frozen
set type available.

84
00:05:59.433 --> 00:06:03.896
If you need the functionality of a set,
but you might want it to be what?

85
00:06:06.482 --> 00:06:07.847
&gt;&gt; Speaker 3: Immutable.

86
00:06:07.847 --> 00:06:09.803
&gt;&gt; Nina Zakharenko: Gold star,
exactly right.

87
00:06:09.803 --> 00:06:11.461
Did everyone hear?

88
00:06:11.461 --> 00:06:16.037
Yeah, if you want your set to be
a immutable, you can use a frozen set.

89
00:06:20.092 --> 00:06:25.316
&gt;&gt; Nina Zakharenko: And don't forget,
you can always call help on set,

90
00:06:25.316 --> 00:06:29.131
or dim, do a little bot of exploring.

91
00:06:29.131 --> 00:06:32.509
So if I wanted to call help on set.union,

92
00:06:32.509 --> 00:06:37.720
I would just have to pass in that method,
and it'll kinda give me

93
00:06:37.720 --> 00:06:42.857
a helpful hint that union returns
the union of sets as a new set.

94
00:06:42.857 --> 00:06:46.071
Actually, that's not a good explanation,
right?

95
00:06:46.071 --> 00:06:48.207
It's like the definition
is the definition.

96
00:06:48.207 --> 00:06:48.707
&gt;&gt; Speaker 3: [LAUGH]

