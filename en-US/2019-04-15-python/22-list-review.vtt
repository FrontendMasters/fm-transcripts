WEBVTT

1
00:00:00.000 --> 00:00:04.364
&gt;&gt; Nina Zakharenko: Going back to our
little cheat sheet here, lists, part one.

2
00:00:04.364 --> 00:00:08.167
You use lists for
storing similar items, generally,

3
00:00:08.167 --> 00:00:11.567
in cases where items need to be added or
removed.

4
00:00:11.567 --> 00:00:15.754
You can create them with square brackets,
or by calling the list type.

5
00:00:15.754 --> 00:00:17.795
To search for items in the list,

6
00:00:17.795 --> 00:00:22.186
you call my_list.index with
the item that you're searching for.

7
00:00:22.186 --> 00:00:28.678
Or you can ask, is this item in my list,
with the in keyword.

8
00:00:28.678 --> 00:00:34.706
The search speed is slow, right, for a
large list, every item has to be checked.

9
00:00:34.706 --> 00:00:38.522
So if the value that you're looking for
is all the way at the end,

10
00:00:38.522 --> 00:00:40.797
you have to check all of those values.

11
00:00:40.797 --> 00:00:46.667
Some common methods on list are calling
len, on the list to find out the length,

12
00:00:46.667 --> 00:00:50.007
calling append with an item,
to add an item.

13
00:00:50.007 --> 00:00:52.410
Using insert, with an index and

14
00:00:52.410 --> 00:00:56.954
an item to insert in the middle of a list,
based on the index.

15
00:00:56.954 --> 00:01:03.812
And using pop(), with or without
the optional argument, to remove items.

16
00:01:03.812 --> 00:01:08.700
Is the order of a list preserved,
yes, right, and

17
00:01:08.700 --> 00:01:14.858
we know that because we can access
the items in the list by index.

18
00:01:14.858 --> 00:01:20.483
We'll talk about mutability later,
but mutability is,

19
00:01:20.483 --> 00:01:26.469
can the contents of this item
be changed after it is declared?

20
00:01:26.469 --> 00:01:34.061
Is the list mutable, yes,
is it possible to sort it in place,

21
00:01:34.061 --> 00:01:39.026
yep, we can call my_list.sort() or

22
00:01:39.026 --> 00:01:43.268
my_list.reverse(), okay?

23
00:01:43.268 --> 00:01:47.290
I know, it's a lot to think about,
right, all-new data structure,

24
00:01:47.290 --> 00:01:49.377
can contain other data structures.

25
00:01:49.377 --> 00:01:53.203
The thing about lists is,
they can contain any types, right?

26
00:01:53.203 --> 00:01:55.369
They can contain strings, numbers,

27
00:01:55.369 --> 00:01:59.032
they can also contain other
advanced container types, right?

28
00:01:59.032 --> 00:02:01.453
You can easily have a list of lists,

29
00:02:01.453 --> 00:02:05.592
how to access that is a little
bit out of scope for this class.

30
00:02:05.592 --> 00:02:08.508
But if you decide you haven't
had enough Python today, and

31
00:02:08.508 --> 00:02:11.902
you want some homework after class,
it's a fun thing to figure out.

32
00:02:11.902 --> 00:02:15.499
&gt;&gt; Student: But the rule is, in the list,
all the members have to be the same.

33
00:02:15.499 --> 00:02:16.554
&gt;&gt; Nina Zakharenko: No, nope.

34
00:02:16.554 --> 00:02:18.719
&gt;&gt; Student: They don't,
I thought that was a, okay.

35
00:02:18.719 --> 00:02:21.958
&gt;&gt; Nina Zakharenko: They tend to be
similar items, just kind of in practice,

36
00:02:21.958 --> 00:02:26.011
right, just how you would use them,
but that's a very good question.

37
00:02:26.011 --> 00:02:27.916
Okay, so someone asked,

38
00:02:27.916 --> 00:02:32.689
do items in the list have to be
the same type, and the answer is no.

39
00:02:32.689 --> 00:02:39.876
So if I assign this wacky list
that I made to a variable,

40
00:02:39.876 --> 00:02:44.264
what is the value at position 0?

41
00:02:44.264 --> 00:02:45.043
&gt;&gt; Class: 1.

42
00:02:45.043 --> 00:02:50.144
&gt;&gt; Nina Zakharenko: 1, and
at position 2, Nina, yeah.

43
00:02:50.144 --> 00:02:54.871
So totally valid in Python,
just generally not something you'd see,

44
00:02:54.871 --> 00:02:59.140
more out of convention than possibility,
if that makes sense.

45
00:02:59.140 --> 00:03:01.802
&gt;&gt; Student2: And
the list knows the type, right?

46
00:03:01.802 --> 00:03:06.305
So the True's a Boolean, the None's
a None type, cuz it's not a string,

47
00:03:06.305 --> 00:03:08.393
cuz there's no quotes around it.

48
00:03:08.393 --> 00:03:11.803
&gt;&gt; Nina Zakharenko: Right,
that's a complicated question, and

49
00:03:11.803 --> 00:03:14.607
kind of out of the scope of this class.

50
00:03:14.607 --> 00:03:19.208
But yeah, the list knows the variables
that has in them, right, or

51
00:03:19.208 --> 00:03:22.300
rather the values of the variables, right?

