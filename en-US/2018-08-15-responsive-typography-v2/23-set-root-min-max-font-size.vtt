WEBVTT

1
00:00:00.780 --> 00:00:03.960
&gt;&gt; Jason Pamental: As we start to
think about using view port units and

2
00:00:03.960 --> 00:00:08.890
tying that into the way we scale things,
it really starts to

3
00:00:08.890 --> 00:00:13.460
give me some ideas on how we might
get away from defining these fixed

4
00:00:13.460 --> 00:00:18.523
relationships across all of
these different break points.

5
00:00:18.523 --> 00:00:22.658
And this article from Tim Brown,
it was really interesting,

6
00:00:22.658 --> 00:00:28.088
I really wasn't quite sure what to make
of it because it's pretty complicated.

7
00:00:28.088 --> 00:00:32.460
And it's pretty complicated in a way
that meant you still had to rewrite

8
00:00:32.460 --> 00:00:33.850
things often.

9
00:00:33.850 --> 00:00:37.740
And so adding complexity and

10
00:00:37.740 --> 00:00:41.850
adding frequency didn't seem
like such a great idea.

11
00:00:41.850 --> 00:00:45.840
But once I started figuring out how
to add these things together and

12
00:00:45.840 --> 00:00:49.879
started looking at what Lea Verou was
talking about with CSS variables,

13
00:00:49.879 --> 00:00:55.260
that got me thinking about how could I tie
these things together with variable fonts

14
00:00:55.260 --> 00:00:58.920
and have all of these things flex and
move and scale together.

15
00:00:58.920 --> 00:01:03.970
And that's where it started to really
turn into something that I thought was

16
00:01:03.970 --> 00:01:08.900
important and novel and a new way of
thinking about typographic hierarchy

17
00:01:08.900 --> 00:01:13.190
in a way that's pretty sophisticated but
also pretty portable.

18
00:01:13.190 --> 00:01:15.980
So it might be intimidating to write once,
but

19
00:01:15.980 --> 00:01:21.110
once you have it then you can use it and
modify and tweak it very easily.

20
00:01:21.110 --> 00:01:25.240
So if you haven't used custom
properties before in CSS,

21
00:01:25.240 --> 00:01:28.220
they're relatively easy to declare.

22
00:01:28.220 --> 00:01:31.850
You can either define this way so
it will be available to

23
00:01:31.850 --> 00:01:35.970
anything in the document or
you can scope it inside the selector.

24
00:01:35.970 --> 00:01:37.600
So in this case I'm saying,

25
00:01:37.600 --> 00:01:40.870
root, meaning I want this available
throughout the entire document.

26
00:01:42.370 --> 00:01:46.560
And I've set some variables
equivalent to my main break points.

27
00:01:46.560 --> 00:01:49.800
And then I have a minimum and
a maximum size.

28
00:01:49.800 --> 00:01:56.200
So I don't know if you recall when I first
talked about view port units earlier.

29
00:01:56.200 --> 00:01:59.040
The problem is,
in using view port units to size text,

30
00:01:59.040 --> 00:02:03.730
if the window gets even narrower,
like maybe an Apple Watch anyone?

31
00:02:03.730 --> 00:02:08.230
If you're sizing view port units there,
you'd have very unpredictable results on

32
00:02:08.230 --> 00:02:13.160
how tiny the text actually gets to be or
how big it is on a really big desktop.

33
00:02:14.600 --> 00:02:19.410
This locks idea that Tim Brown wrote
about, is a way to set a low-end and

34
00:02:19.410 --> 00:02:22.230
high-end and then have everything
else calculate in the middle.

35
00:02:24.040 --> 00:02:29.850
So it looks really normal here
where I've taken that number value.

36
00:02:29.850 --> 00:02:34.665
I said five and ten, I didn't give it
a unit I need to not give you the unit at

37
00:02:34.665 --> 00:02:39.830
that point, where here the calculation
is simply adding the value.

38
00:02:39.830 --> 00:02:41.710
That's really all this is doing.

39
00:02:41.710 --> 00:02:48.150
So, we've got var(--h1-font-size-min), and
the calculation is multiply that time 1em,

40
00:02:48.150 --> 00:02:52.001
so it ends with an value, that's
the only purpose to that calculation.

41
00:02:53.830 --> 00:02:57.380
Now, on the high end once I've
reached the pretty large desktop

42
00:02:57.380 --> 00:03:01.420
I'm using the font size max so 10m.

43
00:03:01.420 --> 00:03:04.510
So five and ten,
low-end to the high-end so

44
00:03:04.510 --> 00:03:08.766
on a phone it's gonna be five, on a pretty
large desktop, it's gonna be ten.

45
00:03:08.766 --> 00:03:13.129
And what we wanna do is figure out
what do we do everywhere in between.

46
00:03:15.040 --> 00:03:20.081
And that's where this comes in,
queue headaches.

47
00:03:20.081 --> 00:03:25.840
So what this is doing is add a minimum
width of 24.15em which is more or

48
00:03:25.840 --> 00:03:29.440
less making sure that as soon
as you turn your phone sideways,

49
00:03:29.440 --> 00:03:30.690
we've tripped this breakpoint.

50
00:03:30.690 --> 00:03:35.960
So it's just bigger than any of
the phones that I could find

51
00:03:35.960 --> 00:03:38.810
in terms of the reported resolution and
sizing.

52
00:03:38.810 --> 00:03:43.950
So that I knew that something would happen
as soon as you start to rotate the phone.

53
00:03:43.950 --> 00:03:46.010
That's when the calculation kicks in.

54
00:03:46.010 --> 00:03:50.520
And what this is doing is,
starting with the minimum value and

55
00:03:50.520 --> 00:03:53.990
then it's adding a subtraction
of the minimum and max.

56
00:03:53.990 --> 00:03:58.530
And then it has this formula with
the low and high-end break points and

57
00:03:58.530 --> 00:04:01.220
a hundred view port with units.

58
00:04:01.220 --> 00:04:04.490
The nice thing about this is you're
not really gonna have to care.

59
00:04:06.240 --> 00:04:07.720
Just know that it works.

60
00:04:07.720 --> 00:04:12.810
So the way this is set up is
it's going anywhere between

61
00:04:12.810 --> 00:04:16.150
whichever break points I've
referenced above and below.

62
00:04:16.150 --> 00:04:19.994
It's going to smoothly calculate from
the low-end value to the high-end value.

63
00:04:21.220 --> 00:04:25.930
And that's what you'll end up
with is some value that is,

64
00:04:25.930 --> 00:04:30.620
as the screen size gets bigger that
value is gonna grow from five to ten.

65
00:04:30.620 --> 00:04:34.720
It will never get any smaller than five,
and never get any bigger than ten.

66
00:04:34.720 --> 00:04:40.940
So that's what's gonna be important about
using this for font size, for line height.

67
00:04:40.940 --> 00:04:42.860
We can use it for optical sizing.

68
00:04:42.860 --> 00:04:48.690
We can use it for There's a couple
of other values we can use it for.

69
00:04:48.690 --> 00:04:49.790
There is a limitation.

70
00:04:50.800 --> 00:04:55.400
The problem with this calculation is
it always ends up with a unit value.

71
00:04:56.670 --> 00:05:00.349
Because once you've introduce those units,
view port, width and ems,

72
00:05:00.349 --> 00:05:02.850
you can't get rid of them in CSS calc.

73
00:05:02.850 --> 00:05:04.020
They're working on that.

74
00:05:04.020 --> 00:05:07.330
There's actually active discussion
in the CSS working group

75
00:05:07.330 --> 00:05:09.960
which I found out by going to GitHub and

76
00:05:09.960 --> 00:05:13.040
commenting on some of these issues so
I see the updates pretty regularly.

77
00:05:14.500 --> 00:05:17.990
As soon as we have that we can
use this kind of calculation for

78
00:05:17.990 --> 00:05:20.310
any variable value that we want.

79
00:05:20.310 --> 00:05:23.440
So font width, as an example.

80
00:05:23.440 --> 00:05:26.800
If we want the characters slightly
narrower on small screen and

81
00:05:26.800 --> 00:05:31.120
slightly wider on a big one to sort of
tailor the reading experience a little

82
00:05:31.120 --> 00:05:36.330
bit, having that on a smooth
sliding scale is pretty nice.

83
00:05:36.330 --> 00:05:40.060
We do have some other things that will
make it a little bit easier using CSS

84
00:05:40.060 --> 00:05:42.070
variables, we'll come back to
that in just a little bit.

85
00:05:43.750 --> 00:05:46.440
So here's what it looks like in action.

86
00:05:46.440 --> 00:05:50.450
As this animates we've
done a number of things.

87
00:05:50.450 --> 00:05:55.870
We've changed the optical sizing, the line
height and the ascenders and descenders.

88
00:05:55.870 --> 00:05:59.080
And we've also, down below,
changed the font size.

89
00:05:59.080 --> 00:06:05.196
We went from at a high end of about
18 pixel equivalent down to 16.

90
00:06:05.196 --> 00:06:10.330
Or that 100% value, but we've made
the characters slightly narrower so

91
00:06:10.330 --> 00:06:12.760
we have a few more characters per line.

92
00:06:12.760 --> 00:06:16.090
It makes it a little bit easier to read,
and we've played around with

93
00:06:16.090 --> 00:06:19.600
the optical-sizing to make sure that
the characters stay sturdy enough at that

94
00:06:19.600 --> 00:06:24.180
small size, and we've also brought the
line-height a little bit closer together.

95
00:06:24.180 --> 00:06:28.420
The purpose of line height is to allow you
a comfortable experience reading across

96
00:06:28.420 --> 00:06:33.050
the line without making it too big a gap
to get back to the next line easily,

97
00:06:33.050 --> 00:06:35.150
to let your eye travel that way.

98
00:06:35.150 --> 00:06:39.390
The shorter the line, the less line
height you need, and that also makes for

99
00:06:39.390 --> 00:06:43.570
the convenient truth of having more
content on the screen at any given time.

100
00:06:43.570 --> 00:06:47.352
So it might not be as big
an exaggeration as I'm doing here,

101
00:06:47.352 --> 00:06:52.272
just to kind of show you things changing,
but it's certainly good to tighten

102
00:06:52.272 --> 00:06:57.060
it up just a little bit so that you get
a little bit more content on-screen.

