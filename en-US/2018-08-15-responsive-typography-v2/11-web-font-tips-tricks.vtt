WEBVTT

1
00:00:00.440 --> 00:00:02.360
&gt;&gt; Jason Pamental: I wanna
talk about centered text.

2
00:00:03.680 --> 00:00:06.980
Or rather,
I wanna talk about how inappropriate and

3
00:00:06.980 --> 00:00:10.355
hard to read large blocks of
centered text tend to be.

4
00:00:10.355 --> 00:00:15.045
And the reason for that is your
eye has to travel back to some

5
00:00:15.045 --> 00:00:18.400
point to start reading the next line.

6
00:00:18.400 --> 00:00:21.440
And if your eye doesn't know
where that point's going to be,

7
00:00:21.440 --> 00:00:23.190
it's going to slow you down.

8
00:00:23.190 --> 00:00:26.460
That is why a smooth left edge,
if you are reading English, or

9
00:00:26.460 --> 00:00:31.420
a smooth right edge if you are reading
something right to left like in Arabic.

10
00:00:32.480 --> 00:00:36.603
That makes all the difference in the world
to the ease with which you can take in

11
00:00:36.603 --> 00:00:37.179
content.

12
00:00:37.179 --> 00:00:41.733
So anything more than about two lines of
text, if you are centering that text,

13
00:00:41.733 --> 00:00:43.780
you are slowing people down.

14
00:00:43.780 --> 00:00:45.680
You are making it harder for
them to get the point.

15
00:00:46.760 --> 00:00:50.657
A lot of people do this,
it's built in to a ton of frameworks.

16
00:00:50.657 --> 00:00:55.277
Because especially with a responsive
site it's easy, because centered text

17
00:00:55.277 --> 00:00:59.199
centers easily under this picture and
it makes a nice card layout.

18
00:00:59.199 --> 00:01:03.601
And It doesn't matter if it's one, two or
five across, it's a real problem for

19
00:01:03.601 --> 00:01:04.522
people to read.

20
00:01:04.522 --> 00:01:07.327
So what I suggest to people instead, and

21
00:01:07.327 --> 00:01:11.864
we can look at an example of this
later and play around with it, but

22
00:01:11.864 --> 00:01:16.290
align the text to the left and
simply pad it in one or two m.

23
00:01:16.290 --> 00:01:20.760
If you want to have that text visually
centered underneath something and

24
00:01:20.760 --> 00:01:22.850
not flowing all the way out.

25
00:01:22.850 --> 00:01:26.880
You can still left align it, but
just pad in that left side and

26
00:01:26.880 --> 00:01:29.720
the ragged right side
will take care of itself.

27
00:01:29.720 --> 00:01:33.320
It will still look visually
centered in that card layout, but

28
00:01:33.320 --> 00:01:34.829
it won't be hard to read.

29
00:01:36.640 --> 00:01:41.780
And the point that I have here goes along
with that is the maximum line length.

30
00:01:41.780 --> 00:01:44.710
That's another thing you see
in responsive sites a lot,

31
00:01:44.710 --> 00:01:47.080
is no limit to the width of the text.

32
00:01:47.080 --> 00:01:50.900
So as the screen gets bigger and bigger
and bigger, you might have 80, 90, 100, or

33
00:01:50.900 --> 00:01:55.010
150 characters on a line,
your eye can't follow that.

34
00:01:55.010 --> 00:01:58.060
It's just not gonna be a good experience.

35
00:01:59.530 --> 00:02:04.320
One of the sort of brain
hurst rules is around 65 to

36
00:02:04.320 --> 00:02:09.860
75 characters per line,
that's what we're used to.

37
00:02:09.860 --> 00:02:13.720
Online, I think people are getting used
to reading slightly longer line lengths.

38
00:02:13.720 --> 00:02:18.850
So 38em translates to usually

39
00:02:18.850 --> 00:02:24.890
around 65 to 70 characters.

40
00:02:24.890 --> 00:02:29.580
Now the reason I know that is because
I've used a calculator a lot.

41
00:02:29.580 --> 00:02:37.400
But by specifying an ems that's tied to
the types of size that you're measuring.

42
00:02:37.400 --> 00:02:41.670
So it's always relative to the type
size that it's applying to.

43
00:02:41.670 --> 00:02:46.940
So if that is rendering at 100% or

44
00:02:46.940 --> 00:02:50.636
16 pixels, or 20 pixels or
whatever, it doesn't really matter.

45
00:02:50.636 --> 00:02:56.190
Because that 38em is relative to the font
size of the paragraph itself, you

46
00:02:56.190 --> 00:03:01.490
will always have a consistent line length
that will be easy for people to read.

47
00:03:01.490 --> 00:03:07.570
And you can do an experiment 38, 40, 42em
it's all gonna be in the right ballpark,

48
00:03:07.570 --> 00:03:10.510
so you can match that with your design.

49
00:03:10.510 --> 00:03:12.660
You don't want to end up
with really weird gaps, but

50
00:03:12.660 --> 00:03:15.180
you still want people to read the text.

51
00:03:15.180 --> 00:03:16.800
You want people to be
able to read the content.

52
00:03:16.800 --> 00:03:18.100
That's the whole goal.

53
00:03:18.100 --> 00:03:21.830
So that's why you wanna make sure that you
don't let those paragraphs run all the way

54
00:03:21.830 --> 00:03:22.590
across the screen.

55
00:03:22.590 --> 00:03:26.790
[COUGH]
There are some other interesting

56
00:03:28.000 --> 00:03:32.120
CSS units out there in
terms of sizing things.

57
00:03:32.120 --> 00:03:36.960
CH and CX are ones that are supposed
to be related to character height or

58
00:03:36.960 --> 00:03:37.719
character width.

59
00:03:38.990 --> 00:03:45.950
They're not terribly reliable, and
I don't think they bring a greater value

60
00:03:45.950 --> 00:03:51.350
than simply getting used to what is
an translation and just relying on that.

61
00:03:51.350 --> 00:03:56.230
That I've found to apply much more
universally than saying 75ch,

62
00:03:56.230 --> 00:04:01.040
which is supposed to equate to
about 75 characters per line.

63
00:04:01.040 --> 00:04:04.230
I've not found that to be
typically very useful.

64
00:04:04.230 --> 00:04:09.480
vw and vh, or viewport width and viewport
height, those are tremendously useful.

65
00:04:09.480 --> 00:04:13.100
We're gonna be leaning into viewport
width units quite a bit today.

66
00:04:13.100 --> 00:04:17.320
And those tend to be,
well a viewport width unit,

67
00:04:17.320 --> 00:04:21.140
there are 100 view port units,
either high or wide.

68
00:04:21.140 --> 00:04:23.990
It's like percentage, except it works.

69
00:04:23.990 --> 00:04:27.800
So view port width units is
an interesting way to size types so

70
00:04:27.800 --> 00:04:30.190
the type is always proportional
to the size of the window.

71
00:04:31.320 --> 00:04:35.820
The problem that you can run into there
is that window can sometimes get narrower

72
00:04:35.820 --> 00:04:39.740
than you expect or wider than you
expect and there's no low or high end.

73
00:04:39.740 --> 00:04:42.600
We have a solution for
that that we're gonna play with.

74
00:04:42.600 --> 00:04:47.433
But just know that setting something
just in straight view port units

75
00:04:47.433 --> 00:04:52.014
does have risks based on the size
of the screen being much larger or

76
00:04:52.014 --> 00:04:54.199
smaller than you anticipate.

77
00:04:57.408 --> 00:05:02.648
&gt;&gt; Jason Pamental: Font sizing,
four years ago, I was still on

78
00:05:02.648 --> 00:05:08.610
the fence about using REMs,
or sort of Root M's.

79
00:05:10.900 --> 00:05:14.400
They're fine,
there are reasons to use an M or a REM.

80
00:05:14.400 --> 00:05:17.300
I'm gonna talk about
the differences just a little bit.

81
00:05:17.300 --> 00:05:19.640
It has started to become acceptable or

82
00:05:19.640 --> 00:05:22.357
fashionable again to go
back to using pixels.

83
00:05:22.357 --> 00:05:27.540
Don't do it, it's a bad idea for
a couple of reasons.

84
00:05:29.280 --> 00:05:33.309
When you set something in pixels
right now, it's using something,

85
00:05:33.309 --> 00:05:36.585
it's technically a reference
pixel not an actual one.

86
00:05:36.585 --> 00:05:42.937
So your device, like an iPhone 10, reports
something like 380 pixels across for

87
00:05:42.937 --> 00:05:48.607
the whole screen when in truth the real
resolution is about three times that.

88
00:05:48.607 --> 00:05:53.535
Every device is doing something
slightly different to report back

89
00:05:53.535 --> 00:05:56.268
what that reference pixel value is.

90
00:05:56.268 --> 00:06:00.588
And every once in a while you find
devices that actually just go with true

91
00:06:00.588 --> 00:06:03.530
resolution when you don't expect it to.

92
00:06:03.530 --> 00:06:07.574
If you're setting things in pixels,
you might find your content the size of

93
00:06:07.574 --> 00:06:10.494
a postage stamp in the middle
of a touch screen laptop.

94
00:06:10.494 --> 00:06:14.425
If you had set it in EMs,
you wouldn't have this problem.

95
00:06:14.425 --> 00:06:17.353
So break points, it's really easy.

96
00:06:17.353 --> 00:06:19.714
When you're setting break points in EMs,

97
00:06:19.714 --> 00:06:24.449
it's always going to be relating back to
16 pixels, it just always works that way.

98
00:06:24.449 --> 00:06:26.029
So 1em, 16 pixels,

99
00:06:26.029 --> 00:06:31.824
if you wanna breakpoint that is somewhere
around 400 pixels, just divide by 16.

100
00:06:31.824 --> 00:06:35.610
You don't have to put any
more thought into that.

101
00:06:35.610 --> 00:06:38.740
Whatever the pixel value is that you
were going to use in your breakpoint,

102
00:06:38.740 --> 00:06:40.180
divide by 16, use an.

103
00:06:41.200 --> 00:06:42.760
Don't use a REM, use an.

104
00:06:44.020 --> 00:06:48.040
REMs are great when you
want to always come back to

105
00:06:48.040 --> 00:06:52.359
something like setting
a consistent max-width for

106
00:06:52.359 --> 00:06:57.280
headings and body copy,
we'll be doing that later today.

107
00:06:57.280 --> 00:07:02.041
REMs are little bit different than in And
that REM is always going back to the root

108
00:07:02.041 --> 00:07:05.846
value which is typically going
to be something like 16 pixels.

109
00:07:05.846 --> 00:07:10.191
Unless you set the body or
the HTML element to be some other size and

110
00:07:10.191 --> 00:07:13.125
everything references back to that point.

111
00:07:13.125 --> 00:07:18.080
EMs are always relative to whatever
the parent is somewhere along the way.

112
00:07:18.080 --> 00:07:24.010
So if you've set a font size on a div and
then you set a font size on an H1,

113
00:07:24.010 --> 00:07:27.360
it's referring back to the containing div,
not the root.

114
00:07:27.360 --> 00:07:30.090
So that's where people get
into trouble with EMs.

115
00:07:31.150 --> 00:07:34.610
But sometimes you really need
it relative to the thing itself.

116
00:07:34.610 --> 00:07:38.360
So sizing margin on a button

117
00:07:38.360 --> 00:07:42.790
in EMs is relative to the text size
that's on the button, that makes sense.

118
00:07:42.790 --> 00:07:44.750
You want that actually to flex and

119
00:07:44.750 --> 00:07:49.620
grow with the size of the text not
necessarily with the size of the root.

120
00:07:49.620 --> 00:07:54.210
So there's a lot more to it than that.

121
00:07:54.210 --> 00:07:58.710
It's just when you set all of
these things in a relative unit,

122
00:07:58.710 --> 00:08:01.740
that means if somebody
needs to resize the text,

123
00:08:01.740 --> 00:08:06.290
if they need an accessibility setting,
all of these things scale uniformly.

124
00:08:06.290 --> 00:08:11.310
If your break points and margins and
text sizes are all set in EMs or

125
00:08:11.310 --> 00:08:14.150
REMs, everything scales smoothly together.

126
00:08:14.150 --> 00:08:16.680
It's a far better solution for
accessibility, and

127
00:08:16.680 --> 00:08:22.040
it also means that your design will
work with that page zoom flawlessly.

128
00:08:22.040 --> 00:08:25.473
It also means that when that
reference pixel standard changes,

129
00:08:25.473 --> 00:08:27.073
your design will still work.

130
00:08:27.073 --> 00:08:31.694
Because this is all going back to
whatever is deemed by the browser or

131
00:08:31.694 --> 00:08:37.545
device manufacturer to be a readable size
of text, whatever that 100% value is.

132
00:08:37.545 --> 00:08:42.167
So it's not that hard if you need
to write a mix in or something so

133
00:08:42.167 --> 00:08:46.280
that it outputs EMs or
REMs when you put in a pixel value.

134
00:08:46.280 --> 00:08:48.623
That's totally fine as
we use these tools so

135
00:08:48.623 --> 00:08:51.864
we don't have to think that hard
about some of these things.

136
00:08:51.864 --> 00:08:56.241
But just know that in the output value,
what gets shipped to the browser,

137
00:08:56.241 --> 00:09:00.700
the only place where pixels belong
is in maybe a border thickness.

138
00:09:00.700 --> 00:09:05.560
Other than that, there's no need
to have a pixel value in your CSS.

139
00:09:05.560 --> 00:09:09.288
That may be something of a controversial
statement to some people, but

140
00:09:09.288 --> 00:09:13.090
I will stand by that and I have since
the beginning of responsive design.

141
00:09:13.090 --> 00:09:15.006
And I never get into
trouble with this stuff.

142
00:09:15.006 --> 00:09:19.924
And I've seen many other designs fall
apart when one little thing changes.

143
00:09:19.924 --> 00:09:25.746
If we keep it all relative, it's all based
around readable text, that is the point.

144
00:09:25.746 --> 00:09:29.681
All of our projects,
all of our websites, all of our apps,

145
00:09:29.681 --> 00:09:34.431
the core of it is the text on the screen
in order to get that point across.

146
00:09:34.431 --> 00:09:37.742
So someone can buy a thing,
can read a thing, can go do a thing,

147
00:09:37.742 --> 00:09:39.380
they're reading something.

148
00:09:40.600 --> 00:09:44.600
Instagram is pretty much the only place
where that's not really going to be

149
00:09:44.600 --> 00:09:47.510
that important,
except reading the comments is hilarious.

150
00:09:47.510 --> 00:09:49.020
So, still, text.

151
00:09:54.053 --> 00:09:59.399
&gt;&gt; Jason Pamental: This last
part is always a struggle.

152
00:09:59.399 --> 00:10:04.002
But if you never put
Lorem Ipsum into your design,

153
00:10:04.002 --> 00:10:10.261
you will never fall victim to not
knowing how it will really behave.

154
00:10:10.261 --> 00:10:14.533
Because when you put the exact same string
of text in every single card content of

155
00:10:14.533 --> 00:10:16.638
the design while you're proofing it,

156
00:10:16.638 --> 00:10:20.784
you're never gonna know what's gonna
happen when a real headline goes in and

157
00:10:20.784 --> 00:10:23.510
you find that weird
little in between space.

158
00:10:23.510 --> 00:10:26.660
You'll never know it's there if
you're not using real content.

159
00:10:26.660 --> 00:10:28.840
So it doesn't matter if it's current.

160
00:10:28.840 --> 00:10:32.640
Go take some stuff from Moby Dick,
that's my go to.

161
00:10:32.640 --> 00:10:35.290
I always go back and
use that in my sample designs.

162
00:10:35.290 --> 00:10:38.659
Or just go copy the existing content.

163
00:10:38.659 --> 00:10:41.339
But make sure that you use real stuff.

164
00:10:41.339 --> 00:10:46.045
So that way when you're working on
your card layouts, when you're working

165
00:10:46.045 --> 00:10:50.825
on the article design, the basic page
framework navigation whatever it is,

166
00:10:50.825 --> 00:10:55.060
if you've got real words you've
got real design considerations.

167
00:10:55.060 --> 00:10:57.063
If you don't do that and
it's just link one, link two,

168
00:10:57.063 --> 00:11:00.410
link three when you're trying to
lay out your navigation, you have

169
00:11:00.410 --> 00:11:05.200
no idea what's gonna happen when you
have a 37 word link that goes in there.

170
00:11:05.200 --> 00:11:08.360
Because I guarantee you it's gonna happen,
because as soon as we put

171
00:11:08.360 --> 00:11:13.830
the admin user in control of
the content management system, they're

172
00:11:13.830 --> 00:11:19.290
going to do six things that you never
knew were even possible in the first day.

173
00:11:19.290 --> 00:11:20.700
And that's just the nature of things.

174
00:11:20.700 --> 00:11:24.080
But that's what we have to learn
to work with as designers and

175
00:11:24.080 --> 00:11:26.600
developers, to build a resilient web.

