WEBVTT

1
00:00:00.040 --> 00:00:02.985
&gt;&gt; Jason Pamental: We're gonna review
a couple of quick points, and then,

2
00:00:02.985 --> 00:00:08.800
we'll actually go about copying
one of the sample pages,

3
00:00:08.800 --> 00:00:13.550
and adding in everything that
we need to load web fonts, and

4
00:00:13.550 --> 00:00:16.380
walk through all of the code
that's in place there.

5
00:00:17.500 --> 00:00:23.070
So in implementing web fonts,
don't block page render.

6
00:00:24.670 --> 00:00:30.380
That is the most important thing,
because you have to deal with that.

7
00:00:30.380 --> 00:00:33.908
53% of users on mobile or desktop,
are gonna bail out on a site,

8
00:00:33.908 --> 00:00:37.319
if it takes more than three seconds
to see content on the screen.

9
00:00:38.680 --> 00:00:41.370
Now, that happens to coincide
with every single browser,

10
00:00:41.370 --> 00:00:46.100
now, standardizing on waiting for three
seconds to see if those web fonts load.

11
00:00:46.100 --> 00:00:48.070
And after 2.9 seconds,
do you wanna gamble?

12
00:00:49.200 --> 00:00:53.720
So that's where using things like
these font loading techniques, and

13
00:00:53.720 --> 00:00:58.600
font display swap where it's supported, I
know that was a comment in the chat room.

14
00:01:00.940 --> 00:01:06.670
They're all layers to this, ways to get
content on the screen quickly, and then,

15
00:01:06.670 --> 00:01:11.720
make sure that things come in behind it,
and then, complete the experience.

16
00:01:13.180 --> 00:01:18.330
So in making these kinds of choices,
we don't wanna just check all the boxes.

17
00:01:18.330 --> 00:01:22.000
Likewise, we don't wanna do
the same thing on Google fonts.

18
00:01:22.000 --> 00:01:24.900
Of course,
this is now willfully out of date

19
00:01:24.900 --> 00:01:29.100
screenshot of the Google fonts interface,
but you get the idea.

20
00:01:29.100 --> 00:01:32.900
If you start to customize it, it's gonna
give you a little indicator that tells you

21
00:01:32.900 --> 00:01:36.160
how terrible a person you're being
by loading too many font files.

22
00:01:36.160 --> 00:01:37.570
There are a little aggressive.

23
00:01:37.570 --> 00:01:40.630
If you select more than two, it's gonna
start to tell you that you're doing bad

24
00:01:40.630 --> 00:01:46.210
things, but you really need to be
mindful of what is a reasonable payload,

25
00:01:46.210 --> 00:01:49.480
in order to get a good experience.

26
00:01:50.530 --> 00:01:54.580
So if you remember that little bit,
we've seen a couple of times now,

27
00:01:54.580 --> 00:01:57.800
wanting to make sure that that's
the kind of experience that people have.

28
00:01:58.970 --> 00:02:00.030
We use something like this.

29
00:02:00.030 --> 00:02:05.309
So this is more complete view
of calling font face observer,

30
00:02:05.309 --> 00:02:10.483
and then, creating the initial
construction of how we're

31
00:02:10.483 --> 00:02:16.913
handling the class switching,
looking for a session storage variable.

32
00:02:16.913 --> 00:02:24.760
In this case, we're only loading in one
web font, so that's defined as font A.

33
00:02:24.760 --> 00:02:27.740
And there's a promise
that's constructed when it

34
00:02:27.740 --> 00:02:32.240
links together all of those different
assets, and once they are all true,

35
00:02:32.240 --> 00:02:38.340
then it will switch those classes around,
and reset the session storage variable.

36
00:02:38.340 --> 00:02:41.994
And the important thing being here that,
well there's two things, one,

37
00:02:41.994 --> 00:02:44.662
is it's getting the class
switching done for you, and

38
00:02:44.662 --> 00:02:47.632
this script should be in line
in the head section of the page.

39
00:02:47.632 --> 00:02:52.950
As soon as you call your CSS,
then have this JavaScript in.

40
00:02:52.950 --> 00:02:57.440
That's going to give you the fastest
performance in having this stuff just

41
00:02:57.440 --> 00:02:58.670
work quickly.

42
00:02:58.670 --> 00:03:02.800
And that session storage variable is
faster to access than checking the browser

43
00:03:02.800 --> 00:03:04.170
cache itself, so

44
00:03:04.170 --> 00:03:08.310
that's gonna tell the browser,
just go get it, I know it's there already.

45
00:03:08.310 --> 00:03:11.030
So that avoids some of the repaint
issues that you see in Chrome.

46
00:03:13.590 --> 00:03:17.220
Then, going in and setting our h1, and

47
00:03:17.220 --> 00:03:21.590
balancing that out with,
when the .wf-inactive class is present,

48
00:03:21.590 --> 00:03:25.600
don't call the web font,
you get the stuff on screen right away.

49
00:03:25.600 --> 00:03:28.940
That can make a several second difference.

50
00:03:28.940 --> 00:03:32.760
So it's between no content,
and all the content, and

51
00:03:32.760 --> 00:03:35.010
you can just make that problem go away.

52
00:03:35.010 --> 00:03:36.699
It's tremendously powerful.

53
00:03:37.830 --> 00:03:44.340
And the reasons why we want to keep all
these things in mind, is there's a gap

54
00:03:44.340 --> 00:03:49.180
in support for @font-face and JavaScript.

55
00:03:49.180 --> 00:03:51.120
Now, it's not that browsers can't, so

56
00:03:51.120 --> 00:03:56.220
Opera Mini, which is in place
on about 400 million handsets.

57
00:03:56.220 --> 00:03:57.989
Maybe more now around the world.

58
00:03:59.250 --> 00:04:04.070
It supports JavaScript, but
doesn't support @font-face.

59
00:04:04.070 --> 00:04:09.610
More browsers going back further into
the depths of time support @font-face,

60
00:04:09.610 --> 00:04:11.620
than support all the JavaScript.

61
00:04:11.620 --> 00:04:14.220
They're not the same thing,
so you can't conflate them,

62
00:04:14.220 --> 00:04:16.190
you really shouldn't conflate them.

63
00:04:16.190 --> 00:04:21.980
You wanna make sure that you lean towards,
I'm going to say JavaScript has

64
00:04:21.980 --> 00:04:26.320
to work in order to give the web fonts,
or I know you're gonna get the web fonts,

65
00:04:26.320 --> 00:04:29.460
I'm going to use JavaScript to
make that experience better.

66
00:04:29.460 --> 00:04:33.470
One way or the other depending on your
own users, you wanna lean into that, and

67
00:04:33.470 --> 00:04:35.820
optimize for that use case.

68
00:04:35.820 --> 00:04:37.960
So in some parts of the world,

69
00:04:37.960 --> 00:04:41.986
you might wanna optimize for
web fonts simply not being there.

70
00:04:41.986 --> 00:04:46.650
But use JavaScript to make sure that
you can provide that fall back.

71
00:04:46.650 --> 00:04:49.260
You can also tie things
into bandwidth detection.

72
00:04:49.260 --> 00:04:51.100
It might be a little extreme for
web fonts, but

73
00:04:51.100 --> 00:04:55.470
I've done that with the decision to put
a photo or a video on a home page, and

74
00:04:55.470 --> 00:04:56.720
that can be really effective, too.

75
00:04:57.760 --> 00:05:02.720
&gt;&gt; Student: So do you know if
your users have the JavaScript by

76
00:05:02.720 --> 00:05:04.270
the developer tools?

77
00:05:04.270 --> 00:05:09.352
So how you would go about knowing if,
for example, in the UK how [INAUDIBLE].

78
00:05:09.352 --> 00:05:11.854
&gt;&gt; Jason Pamental: Well
that's the trouble,

79
00:05:11.854 --> 00:05:16.290
is that you can't really know objectively.

80
00:05:16.290 --> 00:05:23.870
You have to structure you code to work,
you just kinda have to make inferences.

81
00:05:23.870 --> 00:05:29.590
So that's why one of the things
that a lot of frameworks will do,

82
00:05:29.590 --> 00:05:33.990
is you write your HTML with a node
JS class in the HTML element.

83
00:05:33.990 --> 00:05:37.890
And then, use JavaScript to
replace it with the JS class.

84
00:05:37.890 --> 00:05:42.490
So if no JavaScript ever fires,

85
00:05:42.490 --> 00:05:47.840
then you have a no JS class present,
and you can use that to scope CSS.

86
00:05:48.920 --> 00:05:56.050
And you could then do things like make
decisions about wrapping the @font-face

87
00:05:56.050 --> 00:06:00.170
declaration, and scope it with
the absence or presence of that class.

88
00:06:00.170 --> 00:06:06.210
So something like that, you could then
decide if you wanted to lean into,

89
00:06:06.210 --> 00:06:09.000
okay, if there's no JavaScript,
no web fonts.

90
00:06:09.000 --> 00:06:11.510
So you could then just write your CSS,

91
00:06:11.510 --> 00:06:16.940
wrap the @font-face declaration in
a JS class, so that way, it would

92
00:06:16.940 --> 00:06:21.930
only load the web fonts if JavaScript
has already processed that one thing.

93
00:06:21.930 --> 00:06:26.580
So It's not that you can be absolute, but

94
00:06:26.580 --> 00:06:33.650
we can layer a few checks in place to see,
is it a reasonably performant browser?

95
00:06:33.650 --> 00:06:36.000
Are these things behaving
as we might expect?

96
00:06:36.000 --> 00:06:39.470
If they are, then, yes,
I want to build up this experience.

97
00:06:41.100 --> 00:06:44.570
The truth is, though,
JavaScript may never fire,

98
00:06:44.570 --> 00:06:48.490
you can still give somebody a good
experience with the web fonts.

99
00:06:48.490 --> 00:06:54.360
It might take a couple seconds longer for
stuff to load, and show up onscreen.

100
00:06:54.360 --> 00:06:58.620
That's where you have to weigh what's
most important, ultimate performance,

101
00:06:58.620 --> 00:07:00.930
or experience.

102
00:07:00.930 --> 00:07:05.350
So you have to make a little trade
off there, because we can't know.

103
00:07:05.350 --> 00:07:11.850
It's not possible given
the nature of the web right now.

104
00:07:11.850 --> 00:07:17.453
So like I said, you want to choose what's
right for your user base, your project,

105
00:07:17.453 --> 00:07:22.258
your purpose with whatever it is that
you're working on to decide which

106
00:07:22.258 --> 00:07:27.087
way you want to lean in structuring
your CSS, and JavaScript loading.

107
00:07:29.514 --> 00:07:32.718
&gt;&gt; Jason Pamental: But by and large,
I think making sure that you have

108
00:07:32.718 --> 00:07:37.145
the fallback stuff, and trying to
lean into using the JavaScript for

109
00:07:37.145 --> 00:07:41.496
the class switching, will make sure
that for all those devices that

110
00:07:41.496 --> 00:07:46.342
aren't going to get the web fonts,
they'll still get a good experience.

