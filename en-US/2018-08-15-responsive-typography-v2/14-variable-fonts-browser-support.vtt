WEBVTT

1
00:00:00.150 --> 00:00:03.960
&gt;&gt; Jason Pamental: As far as support goes,
it's actually quite good already.

2
00:00:03.960 --> 00:00:09.900
It's already baked into iOS [COUGH], so
that means that it's supported in Safari,

3
00:00:09.900 --> 00:00:13.750
and any other browser that you use on iOS,

4
00:00:13.750 --> 00:00:18.700
because that's Apple, they'll force
you to use web kits, rendering engine,

5
00:00:18.700 --> 00:00:23.366
it works in Safari, it works in Chrome,
on Mac, and Windows.

6
00:00:23.366 --> 00:00:26.444
It has for, well,
since November, I think, so

7
00:00:26.444 --> 00:00:31.401
it's going on three quarters of the year,
it launched in Edge about a month and

8
00:00:31.401 --> 00:00:35.346
a half ago, and it's in
the development version in Firefox.

9
00:00:35.346 --> 00:00:38.720
You can actually turn it on in
the shipping version with a flag,

10
00:00:38.720 --> 00:00:40.770
it's on by default in Nightly Build.

11
00:00:40.770 --> 00:00:44.690
They're hoping to ship full
support in August with Firefox 62,

12
00:00:44.690 --> 00:00:49.600
I've been doing a lot of
work with the Firefox team.

13
00:00:49.600 --> 00:00:55.050
Jen Simmons is a developer and
designer evangelist there.

14
00:00:55.050 --> 00:00:59.110
She's been really leading the charge and
support variable funds, and they've

15
00:00:59.110 --> 00:01:03.570
been really amazing at kind of giving me
an inside look at what they're working on,

16
00:01:03.570 --> 00:01:08.260
getting feedback on the tools, and showing
us what kind of things they're doing.

17
00:01:08.260 --> 00:01:09.770
So it's really coming along well,

18
00:01:10.920 --> 00:01:16.190
it's in an operating system level support
in both High Sierra and Windows 10.

19
00:01:16.190 --> 00:01:20.200
In the currently shipping, well,
the last two versions of Windows 10,

20
00:01:20.200 --> 00:01:22.330
since last fall, it's been supported.

21
00:01:22.330 --> 00:01:24.750
And you can access all the sliders for

22
00:01:24.750 --> 00:01:29.140
variable fonts in the current versions
of Illustrator and Photoshop.

23
00:01:29.140 --> 00:01:33.980
Now, there's another aspect to these
fonts that's important to point out,

24
00:01:33.980 --> 00:01:39.170
that there is this notion
of named instances.

25
00:01:39.170 --> 00:01:42.530
So when we're used to thinking
about a typeface, and

26
00:01:42.530 --> 00:01:46.830
there's Bold, there's Light,
there's Italic, there's Bold Condensed.

27
00:01:46.830 --> 00:01:54.440
Those were previously separate files,
now, they're points along these axis.

28
00:01:54.440 --> 00:02:01.010
They're shortcuts within this one file for
us to access by this named instance.

29
00:02:01.010 --> 00:02:05.590
This is what Bold Condensed looks like in
the eyes of the person who designed it.

30
00:02:05.590 --> 00:02:07.830
And that will translate
to this width value,

31
00:02:07.830 --> 00:02:11.280
that weight value,
whatever other axis are present.

32
00:02:12.700 --> 00:02:16.040
Those are accessible now,
in other applications on the desktop.

33
00:02:16.040 --> 00:02:20.210
So if you open up Keynote, if you open up
Pages, if you open up any application that

34
00:02:20.210 --> 00:02:25.710
is working in High Sierra, or
on Windows 10, you should see, be able

35
00:02:25.710 --> 00:02:30.650
to select a variable font, and have access
to any named instances that are in there.

36
00:02:32.560 --> 00:02:38.940
The unfortunate thing is those named
instances are not accessible in CSS.

37
00:02:38.940 --> 00:02:43.170
But they are accessible in Firefox's
DevTools, so we'll take a look at that,

38
00:02:43.170 --> 00:02:48.240
and see how you can then find the values,
and bring those values back into your CSS.

39
00:02:49.380 --> 00:02:54.450
So after only a year and
a half, we'll have,

40
00:02:54.450 --> 00:02:58.960
within a couple months,
support in almost every shipping browser.

41
00:02:58.960 --> 00:03:03.390
I think the UC browser and the Samsung
ones still have not figured it out,

42
00:03:03.390 --> 00:03:08.680
but the core Android browser does have
support for variable fonts, as well.

43
00:03:08.680 --> 00:03:13.780
In general,
what happens with a browser that's

44
00:03:15.040 --> 00:03:19.280
less than two years old, it will probably
still display the variable font,

45
00:03:19.280 --> 00:03:22.380
just in its normal state, it won't vary.

46
00:03:22.380 --> 00:03:27.170
So it will still work,
you can also use @support, so

47
00:03:27.170 --> 00:03:33.170
feature detection in your CSS, and test
for support, and provide some fall back.

48
00:03:33.170 --> 00:03:36.770
I can show you the work in
progress from my own website.

49
00:03:36.770 --> 00:03:41.390
I took my existing site, and then I
created an extra chunk in the style sheet

50
00:03:41.390 --> 00:03:45.950
inside and @support's block, and then,
adding all the variable fun stuff there.

51
00:03:45.950 --> 00:03:49.650
So if you have a preexisting design
system, you don't have to disturb it.

52
00:03:49.650 --> 00:03:54.840
You can add in this sort of tightly
scoped chunk of CSS that will

53
00:03:54.840 --> 00:03:58.865
replace the core typography
with the variable font stuff.

54
00:03:58.865 --> 00:04:01.645
And because of, what I mentioned earlier,

55
00:04:01.645 --> 00:04:06.645
all the CSS has to be processed before it
starts to render the page, you can prevent

56
00:04:06.645 --> 00:04:11.315
the browser from downloading both
the non-variable and variable fonts.

57
00:04:11.315 --> 00:04:15.975
Just by nature of specifying it
the right way, and that @supports block.

58
00:04:15.975 --> 00:04:21.080
So as long as you then cover
all of your declarations for

59
00:04:21.080 --> 00:04:25.930
font family in your variable font CSS,
then,

60
00:04:25.930 --> 00:04:29.100
you won't end up with a double
download penalty for the end user.

