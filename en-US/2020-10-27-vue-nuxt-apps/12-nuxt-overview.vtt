WEBVTT

1
00:00:00.050 --> 00:00:04.460
We are going to get into the nitty
gritty of building a food app with nuxt.

2
00:00:04.460 --> 00:00:09.000
This is going to be building a real
life application with an API and

3
00:00:09.000 --> 00:00:12.140
we're going to work with view x store and
learn all sorts of stuff.

4
00:00:13.170 --> 00:00:16.290
So, why are we talking about Nuxt?

5
00:00:16.290 --> 00:00:19.840
Nuxt is kind of this
meta framework on Vue.

6
00:00:19.840 --> 00:00:24.870
If you're familiar with react has nuxt and
vue has nuxt.

7
00:00:24.870 --> 00:00:27.780
So, without further ado, today,

8
00:00:27.780 --> 00:00:33.160
we're gonna talk about, Nuxt, [LAUGH] I

9
00:00:33.160 --> 00:00:39.370
use this code pen as an example because
there's also now next few other things.

10
00:00:39.370 --> 00:00:43.700
I know that that's very confusing but
you can think of it as comparable to

11
00:00:43.700 --> 00:00:48.450
react nuxt, truthfully though, they've
kind of branched off from each other.

12
00:00:48.450 --> 00:00:50.018
I think it kind of started that way.

13
00:00:50.018 --> 00:00:54.930
But now nuxt has its own community and
makes its own technical decisions.

14
00:00:54.930 --> 00:00:58.300
And it's no longer just working
off of what nuxt js does anymore.

15
00:00:58.300 --> 00:01:01.510
But you can similarly think about
it as a metaphor framework,

16
00:01:01.510 --> 00:01:03.340
it's using view under the hood.

17
00:01:03.340 --> 00:01:07.930
And then it's making some kind of
configuration assumptions for us and

18
00:01:07.930 --> 00:01:11.530
it makes some things a little
bit nicer to work with and

19
00:01:11.530 --> 00:01:13.000
you'll see why in just a minute.

20
00:01:14.060 --> 00:01:15.540
So why are we working with it?

21
00:01:15.540 --> 00:01:19.030
It has excellent performance, I kind
of covered this in the other course.

22
00:01:19.030 --> 00:01:20.950
It does this thing called treeshaking.

23
00:01:20.950 --> 00:01:22.960
It does things like code splitting.

24
00:01:22.960 --> 00:01:25.100
I'll explain tree shaking in a moment.

25
00:01:25.100 --> 00:01:28.680
It makes sure that your code is
as optimized as humanly possible.

26
00:01:28.680 --> 00:01:34.120
It also allows us to kind of decide
what are compilation targets are, right?

27
00:01:34.120 --> 00:01:37.860
We're able to say, okay,
we're gonna make a static build of this or

28
00:01:37.860 --> 00:01:42.160
we're gonna use it from a server or
we're gonna use an SPA type of view.

29
00:01:42.160 --> 00:01:46.260
And we're still going to make sure that
everything is server side rendered,

30
00:01:46.260 --> 00:01:49.100
that everything is minified and
concatenated.

31
00:01:49.100 --> 00:01:51.900
And that we have some nice
development things that we can work

32
00:01:51.900 --> 00:01:52.720
with on the surface.

33
00:01:54.030 --> 00:01:56.750
There's automatically
generated dynamic routes now,

34
00:01:56.750 --> 00:01:58.850
this is actually a newer feature.

35
00:01:58.850 --> 00:02:01.680
We It used to be that we
would create dynamic routes.

36
00:02:01.680 --> 00:02:04.730
So you always couldn't make
dynamic routes with nuxt.

37
00:02:04.730 --> 00:02:07.690
But you'd have to kind of
describe in a function like what

38
00:02:07.690 --> 00:02:10.640
shape of that data you
would like it to hold?

39
00:02:10.640 --> 00:02:12.640
How you would like it to generate?

40
00:02:12.640 --> 00:02:17.860
And at this point, what it does now
is if you choose the target static,

41
00:02:17.860 --> 00:02:20.500
it will take all of those routes.

42
00:02:20.500 --> 00:02:23.500
If it sees a particular
page which will build,

43
00:02:23.500 --> 00:02:29.350
it will actually create those for
you dynamically, which is really nice.

44
00:02:29.350 --> 00:02:30.760
It creates automatic routing.

45
00:02:30.760 --> 00:02:35.000
So even just between from page to page,
it will create a page for you.

46
00:02:35.000 --> 00:02:39.710
And we're gonna be, I'll walk you through
that and show you what that looks like.

47
00:02:39.710 --> 00:02:44.490
It does SSR and
jamstack and SPA rendering.

48
00:02:44.490 --> 00:02:48.660
I should also mention that it is
able to use the composition API

49
00:02:48.660 --> 00:02:50.860
after we build this food app.

50
00:02:50.860 --> 00:02:52.210
Later on today,

51
00:02:52.210 --> 00:02:56.688
we're gonna see the composition API
from view three in an app also.

52
00:02:56.688 --> 00:03:01.280
So we're gonna look at the nuxt app
built with the composition API and

53
00:03:01.280 --> 00:03:03.250
we'll do an exercise with that as well.

54
00:03:03.250 --> 00:03:09.240
So after we get all done with this options
API view of nuxt, we'll use view three

55
00:03:09.240 --> 00:03:15.080
composition API and nuxt,
It has some really elegant defaults there.

56
00:03:15.080 --> 00:03:19.150
We're gonna go into how it uses pages and
layouts and things like that.

57
00:03:19.150 --> 00:03:22.930
And what I really like about it is,
when I was a contractor,

58
00:03:22.930 --> 00:03:27.280
I used to get clients that were working
with things in totally different ways.

59
00:03:27.280 --> 00:03:29.740
And their code bases were set
up in totally different ways.

60
00:03:29.740 --> 00:03:33.600
Because it has some elegant defaults and
default configuration,

61
00:03:33.600 --> 00:03:37.970
I could jump into a next project and
immediately know where everything is.

62
00:03:37.970 --> 00:03:41.140
It's kind of similar how when
you're working with you, you can

63
00:03:41.140 --> 00:03:44.900
see the legibility of the distinction
between methods computed and watcher.

64
00:03:44.900 --> 00:03:46.845
And you know exactly
what those things are.

65
00:03:46.845 --> 00:03:50.670
Nuxt has some defaults like that to,
where you can jump into the code base.

66
00:03:50.670 --> 00:03:52.450
And be like, this is a plugin,

67
00:03:52.450 --> 00:03:57.858
it's registering some JavaScript
that's going to be activated.

68
00:03:57.858 --> 00:04:01.610
You're even gonna see how we can
call things on the server or

69
00:04:01.610 --> 00:04:03.560
the client from a plugin.

70
00:04:03.560 --> 00:04:08.790
We're gonna do all sorts of things where
you can see exactly by which directory

71
00:04:08.790 --> 00:04:15.020
which are well named, what we're extending
this view framework to do with next.

72
00:04:16.080 --> 00:04:20.170
It has great organization and that was
kind of like what I was explaining before

73
00:04:20.170 --> 00:04:24.500
you can jump in and
you can see exactly where everything lays.

74
00:04:24.500 --> 00:04:27.640
I did mention that we use treeshaking.

75
00:04:27.640 --> 00:04:30.610
And I just wanna give a small
example of treeshaking.

76
00:04:30.610 --> 00:04:32.140
I mentioned this in the other course but

77
00:04:32.140 --> 00:04:35.160
it bears repeating if you didn't
watch the other other course.

78
00:04:35.160 --> 00:04:37.170
So let's say I'm working with lodash,

79
00:04:37.170 --> 00:04:42.430
and lodash has all of these nice methods,
that we're allowed to use in it.

80
00:04:42.430 --> 00:04:47.050
Now, if I'm using lodash, and
I'm really only using tall and union,

81
00:04:47.050 --> 00:04:52.230
I can use treeshaking to get rid of all of
the methods that I'm not using anymore.

82
00:04:52.230 --> 00:04:56.980
This is really important because as a nuxt
app grows, it's going to always make

83
00:04:56.980 --> 00:05:01.650
sure that you're only using the bits
that are absolutely necessary to you.

84
00:05:01.650 --> 00:05:05.390
And it's gonna remove anything that you're
not using, the second you're using it,

85
00:05:05.390 --> 00:05:07.220
it's still available to you.

86
00:05:07.220 --> 00:05:09.690
And the new version of view

87
00:05:09.690 --> 00:05:13.170
has been written in a way that
everything is tree shakable.

88
00:05:13.170 --> 00:05:16.780
So the combination of
both is pretty powerful.

