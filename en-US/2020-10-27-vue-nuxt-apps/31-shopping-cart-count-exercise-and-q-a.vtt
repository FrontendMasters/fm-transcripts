WEBVTT

1
00:00:00.970 --> 00:00:06.640
Our exercise now is to finish the cart,
add a counter to the cart in the menu.

2
00:00:06.640 --> 00:00:12.360
Remember when we were looking at that
next food app, that I had before,

3
00:00:12.360 --> 00:00:16.120
we had this like,
as we added things to the cart.

4
00:00:19.380 --> 00:00:23.340
If I have two and I add to cart,
you can see that little two Bear,

5
00:00:23.340 --> 00:00:25.880
you're gonna make that little too.

6
00:00:25.880 --> 00:00:28.220
There's a number of ways that
you can make that little too.

7
00:00:28.220 --> 00:00:31.960
I want you to try to use a getter for
that.

8
00:00:31.960 --> 00:00:36.050
So, we, went through this SVG logo.

9
00:00:36.050 --> 00:00:40.730
I also have a cookbook demo
that shows in view cookbook.

10
00:00:40.730 --> 00:00:42.842
Now let's finish this thing off.

11
00:00:42.842 --> 00:00:45.880
We're gonna show the count
of the cart in the menu and

12
00:00:45.880 --> 00:00:48.250
you're gonna use the class smallnum.

13
00:00:48.250 --> 00:00:52.680
If you use the class smallnum,
right above that layout and

14
00:00:52.680 --> 00:00:57.510
If we go into app menu,
if right above here you

15
00:00:57.510 --> 00:01:01.480
use a div class of smallnum, then I'll
take care of the styling for you.

16
00:01:01.480 --> 00:01:02.922
That's my promise to you.

17
00:01:02.922 --> 00:01:10.190
[LAUGH] If the card is empty,
show an empty cart SVG, it's in resources.

18
00:01:10.190 --> 00:01:14.477
So if we go over to our resources,

19
00:01:14.477 --> 00:01:18.160
we have this hungry man SVG.

20
00:01:18.160 --> 00:01:23.220
In that SVG, he's going like I'm hungry.

21
00:01:23.220 --> 00:01:25.760
And I think he has like forks and
knives in there.

22
00:01:25.760 --> 00:01:30.930
I think we can see it if we go
back to this next food app and

23
00:01:30.930 --> 00:01:32.750
go check out the cart.

24
00:01:32.750 --> 00:01:34.150
There he is.
He's like, Man,

25
00:01:34.150 --> 00:01:36.250
I don't have any tacos to eat.

26
00:01:36.250 --> 00:01:37.670
Your cart is empty.

27
00:01:37.670 --> 00:01:41.230
So what you're gonna do is, if the cart's
empty, you're gonna show this,

28
00:01:41.230 --> 00:01:46.690
your cart is empty, fill it up with this
hungry man, and try to make it accessible.

29
00:01:46.690 --> 00:01:51.350
Remember how I put a title and
an aria labeled by and things like that.

30
00:01:53.000 --> 00:01:57.110
So if the cart is empty show that,
otherwise show the table and

31
00:01:57.110 --> 00:02:01.240
then show the count of the cart in
the menu using the class smallnum and

32
00:02:01.240 --> 00:02:03.430
try to use a getter for that.

33
00:02:03.430 --> 00:02:07.675
So you can Look at the final result if you
need some guidance for what that might be.

34
00:02:07.675 --> 00:02:09.575
I got some questions in the chat.

35
00:02:09.575 --> 00:02:16.710
So one of them was will all of the,
dynamic pages and getting all of that data

36
00:02:16.710 --> 00:02:21.420
from the food data thing happened at build
time, and that that is what's happening.

37
00:02:21.420 --> 00:02:25.060
The reason why it's happening that way,
is a couple of different reasons.

38
00:02:25.060 --> 00:02:27.240
One was that we picked target static.

39
00:02:27.240 --> 00:02:29.190
So we're building it like a jam stack app.

40
00:02:29.190 --> 00:02:33.490
Basically, the premise of that is
that we do everything ahead of time.

41
00:02:33.490 --> 00:02:37.040
We kind of bundle and we compile and

42
00:02:37.040 --> 00:02:41.690
we do tree shaking, and
we pre build the entire application and

43
00:02:41.690 --> 00:02:45.080
then we disperse it to CDN
nodes all over the world.

44
00:02:45.080 --> 00:02:49.885
So the the kind of benefit of that is
that you're not pinging a server for

45
00:02:49.885 --> 00:02:53.535
the information and then waiting for
the server to then respond.

46
00:02:53.535 --> 00:02:58.205
Everything is available to you when you
first hit a jam stack application and

47
00:02:58.205 --> 00:03:00.145
then that makes it go really quickly.

48
00:03:01.190 --> 00:03:05.200
Where you might see though is because of
that we have some build times when we're

49
00:03:05.200 --> 00:03:07.750
creating all of those dynamic routes.

50
00:03:07.750 --> 00:03:11.140
Now, there are multiple ways
of working with next though,

51
00:03:11.140 --> 00:03:14.280
you can also use next on the server.

52
00:03:14.280 --> 00:03:16.250
There's different targets.

53
00:03:16.250 --> 00:03:18.810
They have server side rendering for
servers,

54
00:03:18.810 --> 00:03:22.260
they have SPA,
they have that target static.

55
00:03:22.260 --> 00:03:23.730
And the nice thing about Nexus,

56
00:03:23.730 --> 00:03:28.690
you can set all of that config with
a string inside knucks.config.

57
00:03:28.690 --> 00:03:32.030
And so they make it pretty simple to
even switch compile targets, right?

58
00:03:32.030 --> 00:03:35.800
Like if you decided you wanted to
try one thing versus the other.

59
00:03:35.800 --> 00:03:40.930
It wouldn't be hard for you to do so
you are able to do so with ease.

60
00:03:40.930 --> 00:03:48.020
So the way that we had kind of built this
in next config is we said target static,

61
00:03:48.020 --> 00:03:53.560
and then we also had this get food.server.

62
00:03:53.560 --> 00:03:56.830
The dot server on the end tells next,

63
00:03:56.830 --> 00:03:59.145
execute this on the server
instead of the client.

64
00:03:59.145 --> 00:04:03.180
So I could say get food.js in plugins,

65
00:04:03.180 --> 00:04:05.470
then it would execute on the client and
the server.

66
00:04:05.470 --> 00:04:10.800
But if I specify dot server or
dot client, then knucks knows whether or

67
00:04:10.800 --> 00:04:14.020
not to execute it on the client or
the server.

68
00:04:14.020 --> 00:04:15.893
Pretty cool.

69
00:04:15.893 --> 00:04:17.340
Great.

70
00:04:17.340 --> 00:04:23.010
Another question was does view x
restart the state of the store,

71
00:04:23.010 --> 00:04:24.068
on a browser reload?

72
00:04:24.068 --> 00:04:26.220
Yes or no?

73
00:04:26.220 --> 00:04:29.820
The answer to that is
if you're just storing

74
00:04:29.820 --> 00:04:34.430
the application state without
storing it somewhere else, then yes.

75
00:04:34.430 --> 00:04:38.460
So in this case,
what we've got is this API data.

76
00:04:38.460 --> 00:04:43.826
And we're pulling the API data in from
Amazon like we talked about in tha.

77
00:04:43.826 --> 00:04:48.140
And hose Amazon pieces
are gonna stick around right?

78
00:04:48.140 --> 00:04:49.310
Even though they're in view x store,

79
00:04:49.310 --> 00:04:51.660
they're gonna stick around
on another browser reload,

80
00:04:51.660 --> 00:04:54.755
because of all of the building
things I just talked about, right?

81
00:04:54.755 --> 00:04:58.840
We have the state that we
have from somewhere else.

82
00:04:58.840 --> 00:05:04.710
So If your server or an API is giving you
that data that will stay in view x store,

83
00:05:04.710 --> 00:05:07.710
but if you're just holding
things inside of your store and

84
00:05:07.710 --> 00:05:11.830
you're not storing them somewhere else, in
other words, there's a thing called crud,

85
00:05:11.830 --> 00:05:14.050
create, read, update, delete.

86
00:05:14.050 --> 00:05:21.030
If you're not creating crud application
things to add things to things and

87
00:05:21.030 --> 00:05:24.390
I will talk about that in just
a minute about how we could do that.

88
00:05:24.390 --> 00:05:28.110
Then the extra will get rid of it.

89
00:05:28.110 --> 00:05:30.600
It will get rid of it on
another browser reload

90
00:05:30.600 --> 00:05:35.770
if you haven't given it in a way that
the application knows to process so

91
00:05:35.770 --> 00:05:38.895
those are the answers to those
great questions from the chat.

