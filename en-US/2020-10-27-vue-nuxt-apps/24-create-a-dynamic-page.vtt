WEBVTT

1
00:00:00.050 --> 00:00:02.400
So let's go back to our checklist.

2
00:00:02.400 --> 00:00:05.895
All right, we filtered the grid
with a reusable component and

3
00:00:05.895 --> 00:00:11.150
computed properties, now,
we're gonna create a dynamic page.

4
00:00:11.150 --> 00:00:13.790
So okay, let's create a dynamic page.

5
00:00:15.040 --> 00:00:17.488
We go back over to VS Code.

6
00:00:20.060 --> 00:00:24.790
And what we're gonna do in order to create
a dynamic page, this part is really cool.

7
00:00:24.790 --> 00:00:25.690
You're gonna be into it.

8
00:00:27.000 --> 00:00:31.600
You create a new thing with an underscore.

9
00:00:31.600 --> 00:00:36.170
So I'm going to use
whatever I think is unique.

10
00:00:36.170 --> 00:00:41.040
Remember how we're using keys and
before, we wanna use whatever is unique.

11
00:00:41.040 --> 00:00:45.610
So whatever is unique about that data,
typically it's going to be an ID, but

12
00:00:45.610 --> 00:00:50.640
I've seen people use like,
post slugs, and all sorts of things.

13
00:00:50.640 --> 00:00:54.850
So I'm gonna say id.vue,
I go in the Pages Directory, and

14
00:00:54.850 --> 00:00:58.509
then if I want it to be in a subdirectory,
I'll say Items.

15
00:00:58.509 --> 00:01:01.390
So I'm gonna create a subdirectory
directory called items.

16
00:01:01.390 --> 00:01:05.110
I typically do that for dynamic pages,
because I want it to be very clear that

17
00:01:05.110 --> 00:01:08.830
this is a subdirectory,
dynamic pages are happening inside here.

18
00:01:10.290 --> 00:01:13.847
And so, I say _id.vue,

19
00:01:13.847 --> 00:01:18.511
I save, I say, vbase.

20
00:01:18.511 --> 00:01:23.760
And right away what I have access to is,
if I

21
00:01:23.760 --> 00:01:33.538
make data I can say id:
this.$route.params.id.

22
00:01:33.538 --> 00:01:36.640
And this will give me access

23
00:01:36.640 --> 00:01:40.990
to whichever unique piece of
data I'm using at that moment.

24
00:01:40.990 --> 00:01:44.960
And sure enough,
we're gonna do that pretag up here again.

25
00:01:44.960 --> 00:01:49.940
And I'm going to do the same thing
I did last time where I kind of

26
00:01:49.940 --> 00:01:53.550
put the data on the page so
that I can see it right away.

27
00:01:54.970 --> 00:01:59.120
But I wanna have a way to get there too,
because I didn't memorize all of those

28
00:01:59.120 --> 00:02:04.290
long IDs when I was working with all
of this stuff, sorry about that.

29
00:02:04.290 --> 00:02:08.800
So I'm gonna go over to the components,
and

30
00:02:08.800 --> 00:02:13.850
I'm gonna go to our AppRestaurantInfo.

31
00:02:13.850 --> 00:02:16.833
And remember this Ghost button
that we never linked up,

32
00:02:16.833 --> 00:02:19.760
we wanna be able to access
the item from that view item.

33
00:02:19.760 --> 00:02:23.880
So I'm gonna say vnuxt l,
that's gonna give me the next link.

34
00:02:23.880 --> 00:02:27.676
I'm gonna take this out and
wrap this button.

35
00:02:30.449 --> 00:02:34.810
And then I'm going to
use a template literal.

36
00:02:34.810 --> 00:02:40.280
And remember I said Item,
I think, items, and then

37
00:02:41.340 --> 00:02:47.550
I'm going to pass in menu:item.id,

38
00:02:47.550 --> 00:02:51.890
because that's what I used up
there was the menu:item.id.

39
00:02:51.890 --> 00:02:56.490
The last thing I wanna do is I
wanna make sure that I bind this so

40
00:02:56.490 --> 00:03:01.770
that it's not just, cuz remember,
otherwise it's just going to use a string.

41
00:03:01.770 --> 00:03:03.620
That's all of this and
that's going to be garbage,

42
00:03:03.620 --> 00:03:07.270
so we definitely want to change that.

43
00:03:07.270 --> 00:03:13.205
And for this, we also want to restart
the server, so we're gonna go over here.

44
00:03:15.545 --> 00:03:21.260
Go restart the server, because it
needs to generate all of those pages.

45
00:03:21.260 --> 00:03:25.560
So I need to restart the server so it can
create all of these dynamic pages for me.

46
00:03:27.230 --> 00:03:31.260
So if I go over to this

47
00:03:32.450 --> 00:03:37.050
refresh, then I should be
able to go to the page and

48
00:03:37.050 --> 00:03:42.850
you'll see localhost items and
the ID of the item.

49
00:03:42.850 --> 00:03:46.170
And you can see that ID
outputted to the page.

50
00:03:46.170 --> 00:03:49.110
The last thing we're gonna do
before I give you an exercise is,

51
00:03:50.120 --> 00:03:53.090
right now I have the ID and
that is all I have.

52
00:03:53.090 --> 00:03:56.100
I have the unique ID for the thing.

53
00:03:56.100 --> 00:03:59.830
But in that unique ID for
the thing, I don't know,

54
00:03:59.830 --> 00:04:03.450
all of the other information about it
right, I don't know the item title,

55
00:04:03.450 --> 00:04:06.710
I don't know the price,
I don't know all of these other pieces.

56
00:04:06.710 --> 00:04:09.140
So what I'm gonna do is
I'm gonna go back and

57
00:04:09.140 --> 00:04:13.500
I'm going to make sure that I'm going
through all of our food data and

58
00:04:13.500 --> 00:04:19.600
I'm grabbing one of those pieces
of the array from that ID.

59
00:04:19.600 --> 00:04:23.830
So I'm gonna filter
through that information.

60
00:04:23.830 --> 00:04:29.221
So I'm gonna go to the ID and
I'm going to say,

61
00:04:29.221 --> 00:04:33.923
vmapstate, and I'm going to bring in,

62
00:04:33.923 --> 00:04:37.955
I always put computed after data.

63
00:04:40.609 --> 00:04:44.049
And I'm gonna say fooddata.

64
00:04:44.049 --> 00:04:49.691
And now, what I want to do here is
I wanna actually make a new thing

65
00:04:49.691 --> 00:04:54.920
in computed properties that
I'm gonna call currentItem,

66
00:04:54.920 --> 00:04:57.967
not cuttent item, currentItem.

67
00:04:59.669 --> 00:05:03.846
Now, here is the thing that I'm going to
do that is going to be contentious because

68
00:05:03.846 --> 00:05:07.720
I know a lot of functional programmers
that would absolutely just use filter

69
00:05:07.720 --> 00:05:08.610
for this.

70
00:05:08.610 --> 00:05:12.320
But what I'm going to do instead is
I'm going to use a nested for loop.

71
00:05:12.320 --> 00:05:14.100
And the reason why I'm
gonna use a nested for

72
00:05:14.100 --> 00:05:16.830
loop instead of a filter is
because it's more efficient.

73
00:05:16.830 --> 00:05:19.650
Because in a nested for
loop I can break, so

74
00:05:19.650 --> 00:05:24.160
I can say, go through all of these
until you find a match and then stop.

75
00:05:24.160 --> 00:05:26.550
But with a .filter, I can't do that.

76
00:05:26.550 --> 00:05:32.150
So what I'm gonna do to keep it efficient,
typically I would use filters and things.

77
00:05:32.150 --> 00:05:35.650
But because we're potentially working
with a large amount of information, and

78
00:05:35.650 --> 00:05:39.170
I'm going to be a little bit
performance budget conscious here.

79
00:05:39.170 --> 00:05:44.544
So I'm gonna say let result,
and then return the results.

80
00:05:47.954 --> 00:05:52.022
And I'm gonna say, for

81
00:05:52.022 --> 00:06:00.370
(let i = 0: i &lt; this.fooddata.length).

82
00:06:03.310 --> 00:06:07.154
Never thought you'd be watching
people just code up for loops.

83
00:06:07.154 --> 00:06:10.692
[LAUGH] So here we got the this for loop.

84
00:06:10.692 --> 00:06:15.170
And then, so remember,
we have that first level of the stores,

85
00:06:15.170 --> 00:06:19.210
and then we also have the second
level of those menu items.

86
00:06:19.210 --> 00:06:24.982
So I need to go through this and
say .menu.length,

87
00:06:24.982 --> 00:06:29.583
and then I'm gonna change these all to J.

88
00:06:29.583 --> 00:06:33.860
Because that's just kind of industry
standard, when we loop through twice.

89
00:06:36.580 --> 00:06:41.700
We're looping through first those store
pieces, then we're doing the .menu.length.

90
00:06:41.700 --> 00:06:46.068
Then we say if all of this,

91
00:06:46.068 --> 00:06:51.628
the menu item j.id = this.id,

92
00:06:51.628 --> 00:06:57.198
in other words, this.id here.

93
00:06:57.198 --> 00:07:03.022
Then we're going to say that the result

94
00:07:03.022 --> 00:07:08.319
is this.fooddata.i.menu: J,

95
00:07:08.319 --> 00:07:14.220
and then we're gonna say break.

96
00:07:14.220 --> 00:07:17.980
And that's gonna allow us to stop
that process when we're done.

97
00:07:19.150 --> 00:07:23.277
So now I'm going to output currentItem and
see if we did that correctly.

98
00:07:26.274 --> 00:07:29.770
Why is it .2, that seems weird.

99
00:07:29.770 --> 00:07:34.370
this.fooddata i.j.id,

100
00:07:34.370 --> 00:07:40.950
I'm assigning instead
of checking a quality.

101
00:07:40.950 --> 00:07:45.910
All right, cool, so now I go back, and

102
00:07:45.910 --> 00:07:51.590
cool, we have the description, we have the
items, we have the image, we have the ID.

103
00:07:51.590 --> 00:07:54.600
We have the price and
the add ons, excellent.

