WEBVTT

1
00:00:00.180 --> 00:00:03.430
Okay, so we have a couple of
great questions in the chat.

2
00:00:03.430 --> 00:00:06.624
One of them was why was
TypeScript necessary again?

3
00:00:06.624 --> 00:00:11.477
So I mentioned that this
is at this state and time,

4
00:00:11.477 --> 00:00:19.190
not state like state at this moment in
time, view three is just coming out.

5
00:00:19.190 --> 00:00:22.932
And view three was a complete
rewrite from the base of view.

6
00:00:22.932 --> 00:00:26.240
So like it's a completely
different code base and

7
00:00:26.240 --> 00:00:29.110
all of that code base was
written in TypeScript.

8
00:00:29.110 --> 00:00:33.480
So in order for nuxts, to work with it
currently at this moment, it needs to load

9
00:00:33.480 --> 00:00:37.460
in TypeScript in order to work, but that
will change in the future and in fact,

10
00:00:37.460 --> 00:00:43.760
l will update our readme and
put in a new exercise that's compatible.

11
00:00:43.760 --> 00:00:48.390
That's as soon as that update is made,
and so

12
00:00:48.390 --> 00:00:53.140
that is the reason why we work
with TypeScript in nuxt right now.

13
00:00:53.140 --> 00:00:57.240
There was also another really good
question of when I recommend using

14
00:00:57.240 --> 00:00:59.720
composition API instead of UX.

15
00:00:59.720 --> 00:01:02.550
And this is going to be
a little bit subjective

16
00:01:02.550 --> 00:01:05.380
because a lot of different people have
a lot of different thoughts on the matter.

17
00:01:05.380 --> 00:01:10.100
But here's my personal thought and I think
some of the view core team share, this,

18
00:01:10.100 --> 00:01:12.700
I've spoken to some of them about this.

19
00:01:12.700 --> 00:01:17.480
So the times when I want
to use view x is when I'm

20
00:01:17.480 --> 00:01:22.120
clearly stating that this is the brains of
the application and these are the really

21
00:01:22.120 --> 00:01:26.930
important bits for every piece of
the application to know about.

22
00:01:26.930 --> 00:01:30.560
So it's kind of self
documenting in that way.

23
00:01:30.560 --> 00:01:34.830
The reason why someone is asking that
question is because technically, I could

24
00:01:34.830 --> 00:01:41.630
start using composition API Instead of
UX for those changes, that is possible.

25
00:01:41.630 --> 00:01:46.204
But what I'm going to start doing is
I'm going to start using composition

26
00:01:46.204 --> 00:01:51.073
API more for the kind of encapsulated
logic that I'd like to reuse in different

27
00:01:51.073 --> 00:01:55.647
places around the application,
like dark mode, like use window width,

28
00:01:55.647 --> 00:01:59.854
like all of these pieces of
functionality that aren't necessarily

29
00:01:59.854 --> 00:02:04.101
tied to templates that I need to
reuse in several different places.

30
00:02:04.101 --> 00:02:10.375
And it's becoming kind of standard to
place those inside of a composable folder.

31
00:02:10.375 --> 00:02:15.010
What I like about keeping them separate
is that there's a bit of a legibility of

32
00:02:15.010 --> 00:02:15.933
distinction.

33
00:02:15.933 --> 00:02:22.920
Yes, both can work for the same thing and
I can use composition API for that.

34
00:02:22.920 --> 00:02:27.400
But I like the idea that someone
could come into a repo that I own and

35
00:02:27.400 --> 00:02:31.290
know okay, these things are in the store,
these are the things that are getting

36
00:02:31.290 --> 00:02:35.230
doled out to many different
components all over this app.

37
00:02:35.230 --> 00:02:40.060
And these composable are pieces that
I'm probably going to be using over and

38
00:02:40.060 --> 00:02:41.610
over again in many different components.

39
00:02:41.610 --> 00:02:46.440
So it's a little bit less of can it
do it because it absolutely can?

40
00:02:46.440 --> 00:02:51.530
And more of a stylistic decision of
saying, I want to make sure that my

41
00:02:51.530 --> 00:02:56.940
code is as legible to maintainers around
me and also future me as possible.

42
00:02:56.940 --> 00:03:00.630
But great question, you did so much today.

43
00:03:00.630 --> 00:03:04.210
We made a full game and used view x store.

44
00:03:04.210 --> 00:03:06.280
We use view clx for it.

45
00:03:06.280 --> 00:03:12.090
In our food next app,
we created a whole application with nuxt.

46
00:03:12.090 --> 00:03:17.140
We deployed it, we brought in data
with an API, we created a bunch

47
00:03:17.140 --> 00:03:22.120
of things that were dynamic to that API,
like grades that we could filter on.

48
00:03:22.120 --> 00:03:25.080
We also created dynamic pages.

49
00:03:25.080 --> 00:03:29.430
And at the very end, we showed how we
could use some conditional logic and

50
00:03:29.430 --> 00:03:32.290
even getters to show things in our store.

51
00:03:32.290 --> 00:03:34.050
Thanks so much for joining me today.

52
00:03:34.050 --> 00:03:34.970
This was really a blast.

