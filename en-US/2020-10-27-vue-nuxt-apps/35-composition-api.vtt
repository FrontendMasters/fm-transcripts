WEBVTT

1
00:00:00.230 --> 00:00:02.467
Now we're gonna move
into our last section.

2
00:00:02.467 --> 00:00:05.309
So remember, we have that Github.

3
00:00:05.309 --> 00:00:08.248
And we're do building web apps with view.

4
00:00:08.248 --> 00:00:13.243
One Last thing, we are going to work

5
00:00:13.243 --> 00:00:17.079
with the composition API.

6
00:00:17.079 --> 00:00:21.171
Now, I'm gonna give you a small exercise
because we spent the day building all

7
00:00:21.171 --> 00:00:22.537
of these apps and things.

8
00:00:22.537 --> 00:00:23.905
And truly things aren't so

9
00:00:23.905 --> 00:00:27.781
different with the composition API than
what you've been working on so far.

10
00:00:27.781 --> 00:00:28.983
The directives and

11
00:00:28.983 --> 00:00:33.425
all of the things that we work on with
the template is exactly the same.

12
00:00:33.425 --> 00:00:37.457
But some of the ways that we set
things up are a little bit different.

13
00:00:37.457 --> 00:00:43.672
So I'm gonna show you how we set things
up and give you a small exercise.

14
00:00:43.672 --> 00:00:48.873
So if we go into Building Web Apps
with Vue and Nuxt.

15
00:00:48.873 --> 00:00:53.122
We have this Composition API,
you might have heard a lot about it.

16
00:00:53.122 --> 00:00:57.066
I think sometimes think,
U3 is the composition API.

17
00:00:57.066 --> 00:01:01.627
No actually U3 is the same,
the surface API has not changed that much.

18
00:01:01.627 --> 00:01:05.053
We have a whole migration
guide in the view docs.

19
00:01:05.053 --> 00:01:10.535
If you go to v3 for now, and
then we got this migration guide, and

20
00:01:10.535 --> 00:01:16.621
it gives you all sorts of information
about anything that's changed and

21
00:01:16.621 --> 00:01:22.229
I go over a lot of that in the other
courses in the interview course.

22
00:01:22.229 --> 00:01:25.723
The composition API is
an advanced additive feature.

23
00:01:25.723 --> 00:01:30.034
And so you can use it for
an entire application.

24
00:01:30.034 --> 00:01:33.110
You cannot use it for
an entire application.

25
00:01:33.110 --> 00:01:36.232
You can create components with it.

26
00:01:36.232 --> 00:01:41.336
You can also take an existing
options API and merge.

27
00:01:41.336 --> 00:01:46.194
What we call composable now, which
are just JS files that are the composition

28
00:01:46.194 --> 00:01:50.001
API, and use it similarly to a way
that we used to use mix ins,

29
00:01:50.001 --> 00:01:53.610
where you're just encapsulating
a little bit of logic.

30
00:01:53.610 --> 00:01:58.316
View use is a site that
has a bunch of information

31
00:01:58.316 --> 00:02:03.258
like a bunch of things that
you can composable that

32
00:02:03.258 --> 00:02:07.976
you can use in your project
you can NPM install.

33
00:02:07.976 --> 00:02:11.902
And you can see these like
create global state one.

34
00:02:11.902 --> 00:02:16.784
You can see like use counter device
like device motion use network or

35
00:02:16.784 --> 00:02:22.091
since it's all open source on Github,
if you wanna learn how to make all of

36
00:02:22.091 --> 00:02:28.022
these kind of JS components that you can
import into your app, you can look there.

37
00:02:28.022 --> 00:02:32.782
So it's really good for
reusable pieces of component or logic.

38
00:02:32.782 --> 00:02:36.939
The way that I'm typically gonna be
working with it is using the options

39
00:02:36.939 --> 00:02:39.723
API generally and
then in a composable folder.

40
00:02:39.723 --> 00:02:43.784
I'm going to start adding the pieces
that used to be mixins and

41
00:02:43.784 --> 00:02:47.923
writing company kind of pieces of
logic that I wanna use over and

42
00:02:47.923 --> 00:02:52.843
over again like if I'm using the window
width or if I'm getting the mouse or

43
00:02:52.843 --> 00:02:55.996
if I wanna use dark mode or
something like that.

44
00:02:55.996 --> 00:02:57.724
But I am gonna show you how to build it.

45
00:02:57.724 --> 00:03:00.967
So that you can create
an app with it with nuxt.

46
00:03:00.967 --> 00:03:03.622
It's inspired by react hooks.

47
00:03:03.622 --> 00:03:09.095
So when react hooks came out, they were
really talking through all the ways that

48
00:03:09.095 --> 00:03:14.566
you can, encapsulate just a bit of logic
so that if you have a larger component,

49
00:03:14.566 --> 00:03:19.327
you're not looking you don't have
many different things going on.

50
00:03:19.327 --> 00:03:21.901
You're pulling out one
piece of functionality.

51
00:03:21.901 --> 00:03:25.126
That you can reuse
across your application.

52
00:03:25.126 --> 00:03:28.362
It's also clear what's being exported.

53
00:03:28.362 --> 00:03:33.280
When we're working with the composition
API, one thing it has over its predecessor

54
00:03:33.280 --> 00:03:37.918
Mixins, is in Mixins, it's not necessarily
clear what you're being given,

55
00:03:37.918 --> 00:03:42.231
whereas with the composition API,
you're always returning at the end.

56
00:03:42.231 --> 00:03:46.785
So you know explicitly what's being
returned at the end of the composition

57
00:03:46.785 --> 00:03:51.552
API, which makes it pretty legible for
a maintainer to come in and say, okay,

58
00:03:51.552 --> 00:03:54.755
these are the things that
we're working with here.

59
00:03:54.755 --> 00:03:56.238
They can be composed together.

60
00:03:56.238 --> 00:03:59.285
This is the thing that mix ins,
which predated it did not do.

61
00:03:59.285 --> 00:04:00.955
So previously.

62
00:04:00.955 --> 00:04:05.964
If you wanted to take a dark mode,
mixin and just use that little bit

63
00:04:05.964 --> 00:04:11.079
of functionality and then you
wanna something else you couldn't.

64
00:04:11.079 --> 00:04:14.209
Encapsulate them into pieces
that worked together.

65
00:04:14.209 --> 00:04:19.269
And that's part of the reason why we
use the name composition API is because

66
00:04:19.269 --> 00:04:23.943
you can actually compose multiple
pieces together with each other.

67
00:04:23.943 --> 00:04:28.464
So you could return something that gets,
used and another one, and

68
00:04:28.464 --> 00:04:31.636
then therefore,
you're able to kind of mix and

69
00:04:31.636 --> 00:04:37.298
match in It's a little bit like Legos, you
can build whatever experience you want.

70
00:04:37.298 --> 00:04:42.731
So, if you're in the other workshop,
I'm just gonna give

71
00:04:42.731 --> 00:04:47.851
a quick overview of what
the composition API Is in does.

72
00:04:47.851 --> 00:04:51.487
If it's written correctly,
they're pure they don't modify or

73
00:04:51.487 --> 00:04:55.454
change things outside of the function
scope, you will always reliably

74
00:04:55.454 --> 00:04:59.239
receive the same value with the same
input on multiple executions.

75
00:04:59.239 --> 00:05:04.257
That's a note to you as an author to
try to make sure that they are pure.

76
00:05:04.257 --> 00:05:06.323
They can be really powerful.

77
00:05:06.323 --> 00:05:10.663
So I mentioned before, there's like
this kind of famous tweet from react

78
00:05:10.663 --> 00:05:14.375
hooks where someone was describing
why they're so powerful.

79
00:05:14.375 --> 00:05:19.075
And they showed this video of a component
with a lot of different types of logic.

80
00:05:19.075 --> 00:05:22.322
What it allows it to do
is be grouped together.

81
00:05:22.322 --> 00:05:27.654
So what we're doing now is we're grouping
together similar types of logic and

82
00:05:27.654 --> 00:05:32.189
it also has the added benefit of
really great Type Script support.

83
00:05:32.189 --> 00:05:36.954
So if previously what we did
was work with this data return

84
00:05:36.954 --> 00:05:42.033
tacos as a string, and
we said yes or no, you're a monster.

85
00:05:42.033 --> 00:05:43.161
So do you like tacos?

86
00:05:43.161 --> 00:05:50.398
Yes, no, you're a monster and we have
this, data return tacos then inside,

87
00:05:50.398 --> 00:05:54.786
when we're working with
the composition API,

88
00:05:54.786 --> 00:05:58.965
what we would do is say
const ref equals view.

89
00:05:58.965 --> 00:06:05.835
We will have a setup we'd say const
tacos equals ref and return tacos.

90
00:06:05.835 --> 00:06:10.968
So I just mentioned before,
that we're explicitly returning what

91
00:06:10.968 --> 00:06:16.831
we're using this const tacos ref is
an empty string is, equivalent to data.

92
00:06:16.831 --> 00:06:19.980
So we can say yes or no,
you're a monster and

93
00:06:19.980 --> 00:06:24.851
this does the same thing you might
also note that we have this setup.

94
00:06:24.851 --> 00:06:28.716
And so we're, we're passing everything
through setup I'm not gonna go through

95
00:06:28.716 --> 00:06:31.517
the whole thing but
what I think is really important because

96
00:06:31.517 --> 00:06:33.663
because you can go look
at that other course.

97
00:06:33.663 --> 00:06:39.113
But another piece that I think is really
important is that you can state reactive

98
00:06:39.113 --> 00:06:44.012
here, instead of saying ref for
everything and say ref ref ref ref ref.

99
00:06:44.012 --> 00:06:47.988
You can use reactive
similarly to the way that

100
00:06:47.988 --> 00:06:51.445
you use data before in the options API.

101
00:06:51.445 --> 00:06:57.429
So, In here, we could say reactive count
dot zero if we needed more properties,

102
00:06:57.429 --> 00:07:01.927
instead of restating ref,
we would then add to this option.

103
00:07:01.927 --> 00:07:05.607
And in order to access that
we would say state.count so

104
00:07:05.607 --> 00:07:11.132
I'll show you two different examples and
then we'll jump into the application.

105
00:07:11.132 --> 00:07:16.212
In, a bigger thing let's talk about
it we just got used to that from

106
00:07:16.212 --> 00:07:21.199
our last next app, we're saying in set up,
ref, ref, ref ref,

107
00:07:21.199 --> 00:07:25.678
and each one of these you can
think of as the data property.

108
00:07:25.678 --> 00:07:29.653
So we've got, let's talk about it and
we're gonna array and

109
00:07:29.653 --> 00:07:32.030
we're passing in each one of these.

110
00:07:32.030 --> 00:07:37.891
If we want to access any one of them we
will access them by num items dot value,

111
00:07:37.891 --> 00:07:42.303
dot value is how we'll we will
access something in a ref.

112
00:07:42.303 --> 00:07:49.052
And then we're also returning all of
these options as well as any function.

113
00:07:49.052 --> 00:07:55.758
So you can think of that
function like a method.so here,

114
00:07:55.758 --> 00:08:01.778
we've got, ref ref ref and
add items and so forth.

115
00:08:01.778 --> 00:08:06.636
If we're using something like reactive,
what we would do instead

116
00:08:06.636 --> 00:08:11.841
instead of calling ref repeatedly,
it's more like that data here so,

117
00:08:11.841 --> 00:08:16.978
we've got the restaurant name options,
and it's pat all passed in.

118
00:08:16.978 --> 00:08:21.768
We can also say to reps in passing
state instead of just passing in state,

119
00:08:21.768 --> 00:08:24.673
we're gonna say spread
to reps into state so

120
00:08:24.673 --> 00:08:28.305
that we don't have to keep
saying state dot num items.

121
00:08:28.305 --> 00:08:33.774
State dot delivery time in our template
we can say just delivery time so

122
00:08:33.774 --> 00:08:40.378
we're passing all of state into tariffs,
and also returning the add items.

123
00:08:40.378 --> 00:08:44.230
If you wanna go into more detail
the other course goes into computed and

124
00:08:44.230 --> 00:08:46.230
watchers and so on and so forth.

