WEBVTT

1
00:00:00.180 --> 00:00:03.942
Okay, from here,
we wanna do a couple of things.

2
00:00:03.942 --> 00:00:09.750
We wanna say if the game state,
if we get to the end of that

3
00:00:09.750 --> 00:00:16.320
array of questions that once we get
to the end of the question index,

4
00:00:16.320 --> 00:00:21.240
that we wanna tell the UI state,
you either won or you lost.

5
00:00:21.240 --> 00:00:24.090
And so
we're gonna pass that in as a string.

6
00:00:24.090 --> 00:00:26.360
So let's go back to the store.

7
00:00:26.360 --> 00:00:30.949
And we're just going to say, okay,
keep going until you can go no further.

8
00:00:30.949 --> 00:00:35.529
But else, let's say let's check if

9
00:00:35.529 --> 00:00:40.270
the state.score is greater than 0.

10
00:00:40.270 --> 00:00:43.093
And we're gonna use another ternary here.

11
00:00:43.093 --> 00:00:49.439
And then we're gonna set
the state of the UI,

12
00:00:49.439 --> 00:00:53.781
uiState to 1 if it is greater,

13
00:00:53.781 --> 00:00:58.466
or state.uiState = 'lost'.

14
00:00:58.466 --> 00:01:00.780
There's one more thing I'm gonna do here.

15
00:01:00.780 --> 00:01:07.720
I'm going to say Math.sign because I
have done this a few times, and I know

16
00:01:07.720 --> 00:01:13.800
that JavaScript likes to coerce things and
it likes to do funny things with numbers.

17
00:01:13.800 --> 00:01:17.050
In TypeScript, you would be
literally setting it to number and

18
00:01:17.050 --> 00:01:18.100
making sure of that.

19
00:01:18.100 --> 00:01:21.300
But a quick way of doing this
here is to say Math.sign.

20
00:01:21.300 --> 00:01:24.460
And what that's gonna do is it's
gonna convert this to a solid number.

21
00:01:24.460 --> 00:01:27.700
It's gonna take it, make sure it's
a number and convert it to a solid number.

22
00:01:27.700 --> 00:01:35.700
So I definitely know that it's not like
0.00002 or something silly like that.

23
00:01:35.700 --> 00:01:38.630
Okay, so now let's play again.

24
00:01:38.630 --> 00:01:44.710
We've got our baker, we can go through,
and I'm gonna lose intentionally.

25
00:01:44.710 --> 00:01:48.320
We're losing, we're losing,
we're losing, we're losing.

26
00:01:48.320 --> 00:01:56.020
And then if I look in here, you can see
that uiState has now updated to lost.

27
00:01:56.020 --> 00:01:56.790
So that's good.

28
00:01:58.570 --> 00:02:03.140
There's one more thing we've gotta do and
then I'm gonna give you an exercise.

29
00:02:03.140 --> 00:02:05.000
This is always the same.

30
00:02:05.000 --> 00:02:08.800
If you're smart, you'll probably figure
out that that ordering actually matters.

31
00:02:08.800 --> 00:02:11.412
And we wanna make sure that
that ordering does not matter.

32
00:02:11.412 --> 00:02:14.330
We wanna shuffle all of
the things in that array.

33
00:02:15.940 --> 00:02:19.378
So what we're gonna do is do this
in the component not in the store.

34
00:02:19.378 --> 00:02:25.130
Because it's really something that needs
to be updated within this component here.

35
00:02:25.130 --> 00:02:28.670
You might be tempted to use
a computer property here.

36
00:02:28.670 --> 00:02:34.180
And you totally could because you could
use this dot characterChoices and

37
00:02:34.180 --> 00:02:36.360
create a shuffle based off of this.

38
00:02:36.360 --> 00:02:40.680
But what I've noticed in game logic
is that I use shuffle quite often.

39
00:02:40.680 --> 00:02:44.130
And it might be better to be
able to pass in something.

40
00:02:44.130 --> 00:02:46.820
So rather than using
a computed property for

41
00:02:46.820 --> 00:02:50.730
this, I'm gonna use a method because I
wanna be able to pass in characterChoices.

42
00:02:50.730 --> 00:02:53.630
So that someday maybe I wanna
shuffle something else,

43
00:02:53.630 --> 00:02:55.410
I still have that parameter.

44
00:02:55.410 --> 00:02:58.630
I can't pass in a parameter
with a computed property.

45
00:02:58.630 --> 00:03:01.328
So what I'm gonna do is I'm gonna
make a method called shuffle.

46
00:03:01.328 --> 00:03:08.544
And with shuffling an array,
you could do this really quick check,

47
00:03:08.544 --> 00:03:14.127
that's like checking if it's above 0.5 or
not.

48
00:03:14.127 --> 00:03:19.149
But that's not a perfect algorithm for
checking a shuffle.

49
00:03:19.149 --> 00:03:22.482
There's a few different
like schools of thoughts

50
00:03:22.482 --> 00:03:25.349
in computer programming about shuffles.

51
00:03:25.349 --> 00:03:27.786
Lodash uses a really good shuffle.

52
00:03:27.786 --> 00:03:31.090
Under the hood, it's called Fisher-Yates.

53
00:03:31.090 --> 00:03:35.280
The type of shuffle that
Lodash uses is Fisher-Yates.

54
00:03:35.280 --> 00:03:36.250
I use shuffle so

55
00:03:36.250 --> 00:03:40.190
much when I make games that I actually
have a snippet created for it.

56
00:03:40.190 --> 00:03:44.124
So I'm gonna go in here, I have all of
these snippets that I use pretty often.

57
00:03:44.124 --> 00:03:49.320
I'm gonna collect my fisher-yates shuffle,
and I'm gonna paste it in here.

58
00:03:49.320 --> 00:03:51.330
And instead of saying
function shuffle(array),

59
00:03:51.330 --> 00:03:53.120
I'm gonna say shuffle(array).

60
00:03:53.120 --> 00:03:55.770
I'm gonna return that array.

61
00:03:55.770 --> 00:04:00.500
And now I can use this method, that's
the Fisher-Yates shuffle, for everything.

62
00:04:00.500 --> 00:04:01.890
I don't have to load in Lodash.

63
00:04:01.890 --> 00:04:06.230
It's kind of like too few lines
of code to load in Lodash.

64
00:04:06.230 --> 00:04:10.330
I could just load in that method, but
it's also just four lines of code.

65
00:04:10.330 --> 00:04:17.300
So, I have this shuffle(array), and
now I can, in my character choices, say,

66
00:04:17.300 --> 00:04:22.670
shuffle and pass in characterChoices.

67
00:04:22.670 --> 00:04:24.250
And now let's check it out.

68
00:04:24.250 --> 00:04:29.032
Because the way that we can test this is,
if I answer with baker,

69
00:04:29.032 --> 00:04:33.030
it should keep winning if
it's in the same position.

70
00:04:33.030 --> 00:04:36.980
If I just keep on selecting the first one,
it should win if we're not shuffling.

71
00:04:36.980 --> 00:04:38.100
So are we winning?

72
00:04:38.100 --> 00:04:39.530
No, we're losing.

73
00:04:39.530 --> 00:04:40.650
We're winning.

74
00:04:40.650 --> 00:04:43.440
It's all over the place,
which is exactly what we want.

75
00:04:43.440 --> 00:04:47.030
We want to be able to win and
lose and win and lose.

76
00:04:47.030 --> 00:04:51.900
So currently, the state that
the application is in right now is

77
00:04:51.900 --> 00:04:55.070
we are able to select our character.

78
00:04:55.070 --> 00:04:58.420
We are able to move the needle
based on our score.

79
00:04:58.420 --> 00:05:01.684
We're able to go through
all of the questions.

80
00:05:01.684 --> 00:05:06.130
We're able to even find out if we win or
lose through this entire application.

81
00:05:06.130 --> 00:05:07.010
So we did a lot.

