WEBVTT

1
00:00:00.060 --> 00:00:05.700
So far, all we've been doing ishard
coding that kind of manifest all of

2
00:00:05.700 --> 00:00:12.283
the food data in but that's not typically
how we work with an application, right?

3
00:00:12.283 --> 00:00:16.467
What we usually do is we bring
things be in via an API.

4
00:00:16.467 --> 00:00:20.290
And we're going to use
vuex store to do so.

5
00:00:20.290 --> 00:00:22.490
But we're also going to learn a new thing.

6
00:00:22.490 --> 00:00:25.170
And that new thing is going
to be called a plugin.

7
00:00:25.170 --> 00:00:29.280
That plugin is going to allow us
to execute logic on the server,

8
00:00:29.280 --> 00:00:31.740
instead of calling it on
one of the components.

9
00:00:31.740 --> 00:00:35.006
So far, we've just been calling
things from the component and

10
00:00:35.006 --> 00:00:36.307
using them in the store.

11
00:00:36.307 --> 00:00:39.968
But what if we wanted it to
build with everything [LAUGH]?

12
00:00:39.968 --> 00:00:41.832
And Knox actually allows us to do that.

13
00:00:41.832 --> 00:00:43.726
So that's pretty cool.

14
00:00:43.726 --> 00:00:47.439
All right, so let's go back here.

15
00:00:48.870 --> 00:00:55.260
And we are going to go into our store
like we did, we had our main food data.

16
00:00:55.260 --> 00:01:01.872
And before it's all hard coded here, and
we have this gigantic array of values,

17
00:01:01.872 --> 00:01:06.750
I'm gonna actually delete this
gigantic array of values.

18
00:01:06.750 --> 00:01:09.204
And we're just gonna have
an empty array for now.

19
00:01:10.888 --> 00:01:12.404
I'm going to use actions.

20
00:01:12.404 --> 00:01:15.495
I think there were some questions
about actions, when to use actions and

21
00:01:15.495 --> 00:01:16.518
mutations in the chat.

22
00:01:16.518 --> 00:01:20.700
Just for review, mutations are the only
thing that can change the state.

23
00:01:20.700 --> 00:01:25.263
So in our game application,
they're synchronous.

24
00:01:25.263 --> 00:01:26.699
They're just gonna change the state.

25
00:01:26.699 --> 00:01:29.860
So we're only working
with data synchronously.

26
00:01:29.860 --> 00:01:31.960
Actions can't change the state,

27
00:01:31.960 --> 00:01:35.920
actions can commit mutations
that change the state.

28
00:01:35.920 --> 00:01:38.730
But actions are good for
asynchronous logic.

29
00:01:38.730 --> 00:01:44.380
So in this case, what we're going to do is
we're going to use an action to do that

30
00:01:44.380 --> 00:01:50.978
kind of async stuff, and that action
will call a commit in the mutation.

31
00:01:50.978 --> 00:01:54.550
So we're gonna use both of them
in this next step, next section.

32
00:01:54.550 --> 00:01:57.139
So we have export const actions.

33
00:01:57.139 --> 00:02:00.519
I'm going to use async here, and

34
00:02:00.519 --> 00:02:05.723
I'm gonna change the name
of this to getFoodData.

35
00:02:05.723 --> 00:02:11.374
We're gonna pass in not just
the commit but the store as well.

36
00:02:11.374 --> 00:02:13.326
The state, not the store, sorry.

37
00:02:13.326 --> 00:02:16.963
The state as well because we're
gonna use that in just a minute.

38
00:02:16.963 --> 00:02:21.927
Now since we used async,
we can now use async, wait and

39
00:02:21.927 --> 00:02:24.524
I'm gonna use try and catch.

40
00:02:27.301 --> 00:02:30.375
I'm gonna catch an error.

41
00:02:30.375 --> 00:02:31.963
Don't worry about that commit for now.

42
00:02:31.963 --> 00:02:37.000
I'm gonna pull this commit into the try.

43
00:02:37.000 --> 00:02:41.000
But for now, I'm just gonna comment it
out because I'm not gonna use it yet.

44
00:02:41.000 --> 00:02:42.658
We're gonna use it in just a second.

45
00:02:42.658 --> 00:02:46.581
I wanna make sure that I console log or
console warn or whatever.

46
00:02:46.581 --> 00:02:53.540
My error here in this try, that's where
I'm going to call the await part of this.

47
00:02:53.540 --> 00:02:56.320
So I'm gonna do await.

48
00:02:56.320 --> 00:03:00.330
And then I'm gonna use fetch and
you might be thinking, at the time of

49
00:03:00.330 --> 00:03:04.970
this recording, fetch isn't supported in
every browser back in all of this stuff.

50
00:03:04.970 --> 00:03:11.040
But actually next offers a polyfill so
that you can use fetch in within

51
00:03:12.780 --> 00:03:17.830
next, and you can know that it's going to
actually perform well in other browsers.

52
00:03:17.830 --> 00:03:20.410
Now, we're gonna call out to this API.

53
00:03:20.410 --> 00:03:22.951
And let me go back to my slides for
a minute.

54
00:03:24.712 --> 00:03:28.643
I wrote a tutorial on
how to set up DynamoDB,

55
00:03:28.643 --> 00:03:34.850
use lambda as a serverless function
to pull in the DynamoDB data.

56
00:03:34.850 --> 00:03:39.670
And also use API Gateway to
offer some a nice API, so

57
00:03:39.670 --> 00:03:42.770
that you can call
the information that you need.

58
00:03:42.770 --> 00:03:47.267
And it also goes through things
like how to do body mapping and

59
00:03:47.267 --> 00:03:49.923
a few other things inside of there.

60
00:03:49.923 --> 00:03:51.623
It's a very long article.

61
00:03:51.623 --> 00:03:57.705
[LAUGH] It's like 32 pages long and
the netlify team did a really good job.

62
00:03:57.705 --> 00:04:00.962
The netfliy marketing team did a great job
of putting it together in a way that you

63
00:04:00.962 --> 00:04:02.723
can kind of read through all the sections.

64
00:04:02.723 --> 00:04:06.513
It's out of the scope of the course
because it could be [LAUGH] a whole course

65
00:04:06.513 --> 00:04:07.135
of its own.

66
00:04:07.135 --> 00:04:08.609
But if you wanna dive in and

67
00:04:08.609 --> 00:04:12.162
you wanna learn how to make
something like that with DynamoDB,

68
00:04:12.162 --> 00:04:16.900
Lambda and API Gateway, that article will
show you and we actually build this API.

69
00:04:16.900 --> 00:04:19.950
So you can actually build
that API if you like.

70
00:04:19.950 --> 00:04:22.014
So here's our API.

71
00:04:22.014 --> 00:04:27.210
I'm going to grab it,
If slides lets me [LAUGH] and

72
00:04:27.210 --> 00:04:29.910
then I'm gonna go into VS code.

73
00:04:29.910 --> 00:04:32.920
I'm gonna pass this in to fetch.

74
00:04:32.920 --> 00:04:36.290
And then I'm also going
to create some headers.

75
00:04:37.810 --> 00:04:42.020
And the reason I'm gonna create some
headers is that I actually want to

76
00:04:42.020 --> 00:04:43.770
use an API key for this.

77
00:04:43.770 --> 00:04:47.160
Typically we're gonna be
working with API keys.

78
00:04:47.160 --> 00:04:49.590
I didn't have to create an API key for
this.

79
00:04:49.590 --> 00:04:52.662
But that's the way I set up this tutorial
because that's kind of how people

80
00:04:52.662 --> 00:04:54.244
are often going to be working with it.

81
00:04:54.244 --> 00:05:00.348
So we're gonna say content
type is application JSON.

82
00:05:02.759 --> 00:05:07.148
And then we're gonna say, x api key.

83
00:05:07.148 --> 00:05:11.976
That's what Amazon is gonna expect is,

84
00:05:11.976 --> 00:05:17.088
and this is something that NEXT offers us,

85
00:05:17.088 --> 00:05:21.783
we can say process.env.awsapi key.

86
00:05:21.783 --> 00:05:25.980
This is kind of standard for
when you're using a key like this.

87
00:05:25.980 --> 00:05:29.850
I mentioned before that I had
in the food resources folder,

88
00:05:29.850 --> 00:05:34.500
a thing that's like an end file
without a dot in front of it.

89
00:05:34.500 --> 00:05:39.120
And that's because that dot
file is often get ignored.

90
00:05:39.120 --> 00:05:44.362
And so I'm gonna create a .env file

91
00:05:44.362 --> 00:05:48.911
at the base of my next food app.

92
00:05:48.911 --> 00:05:50.192
And say, yes.

93
00:05:50.192 --> 00:05:52.058
And I'm gonna paste in my API key.

94
00:05:52.058 --> 00:05:54.133
It's okay if you know my API key.

95
00:05:54.133 --> 00:05:57.967
I put a bunch of rate limiting
things [LAUGH] on my stuff.

96
00:05:57.967 --> 00:06:00.711
You can play with the API all you want.

97
00:06:00.711 --> 00:06:05.480
And so, I'm pasting in the API key.

98
00:06:05.480 --> 00:06:10.250
And then, this process .env
is going to allow nuxt to

99
00:06:10.250 --> 00:06:13.180
know to go grab that env folder.

100
00:06:13.180 --> 00:06:16.210
And you can see that it's get
ignored because well vs code's

101
00:06:16.210 --> 00:06:19.480
showing us all the things that it's kind
of lighting up green everything that we

102
00:06:19.480 --> 00:06:20.540
haven't committed.

103
00:06:20.540 --> 00:06:25.600
But I would also suggest just as
a good [LAUGH] thing to commonly

104
00:06:25.600 --> 00:06:30.680
do anytime you add a file like
.env to just take a look inside

105
00:06:30.680 --> 00:06:35.670
your get ignore file and make sure that
.env is get ignored because you don't

106
00:06:35.670 --> 00:06:38.890
want that committed to GitHub so
that there's memory of your key.

107
00:06:40.140 --> 00:06:45.752
Cool, so, once we do that,
we're gonna say .then,

108
00:06:45.752 --> 00:06:49.779
and we're gonna pass in the response,

109
00:06:49.779 --> 00:06:55.010
and we're gonn return response.json.

110
00:06:55.010 --> 00:06:58.830
And the reason we do that is because
what we're getting at first from fetch

111
00:06:58.830 --> 00:07:00.060
is a response object.

112
00:07:00.060 --> 00:07:01.810
It's not actually going to be JSON,

113
00:07:01.810 --> 00:07:06.350
we need response.json to actually
extract the JSON from that.

114
00:07:06.350 --> 00:07:07.820
And then we're gonna .then again.

115
00:07:08.940 --> 00:07:12.360
And we're gonna say, okay, get that data.

116
00:07:12.360 --> 00:07:15.060
And now we're gonna do
things with that data.

117
00:07:15.060 --> 00:07:18.230
And here's where we're gonna
be doing things with a commit.

118
00:07:19.420 --> 00:07:21.560
So we'll save that.

119
00:07:21.560 --> 00:07:24.570
I'm gonna console.log this just for now.

120
00:07:24.570 --> 00:07:28.840
We'll remove that later, just so
what you can see when things are working.

121
00:07:28.840 --> 00:07:31.014
That commit is gonna be update some value.

122
00:07:31.014 --> 00:07:36.861
So I'm gonna say update food data and
then the payload is data.

123
00:07:36.861 --> 00:07:39.138
Because that's what we're passing in here.

124
00:07:39.138 --> 00:07:43.207
Cool, now we're gonna
go into our mutations.

125
00:07:43.207 --> 00:07:48.489
And we're gonna say updateFoodData and

126
00:07:48.489 --> 00:07:54.390
the state and
I'm gonna change this to data,

127
00:07:54.390 --> 00:07:57.040
state.fooddata.

128
00:07:58.070 --> 00:07:58.580
There you go.

129
00:08:00.520 --> 00:08:03.930
So again,
what we're doing is we're using an action,

130
00:08:03.930 --> 00:08:07.590
which is some asynchronous
logic to call a mutation and

131
00:08:07.590 --> 00:08:11.180
the mutation is the thing that
actually changes the state.

132
00:08:11.180 --> 00:08:14.240
That's the reason why we
have that separation there.

133
00:08:14.240 --> 00:08:16.790
There's one last thing I wanna do.

134
00:08:16.790 --> 00:08:20.180
I want to make sure that I'm
being as efficient as possible,

135
00:08:20.180 --> 00:08:21.680
actually not inside the try.

136
00:08:21.680 --> 00:08:23.900
Let's go above the try.

137
00:08:23.900 --> 00:08:25.820
I'm going to say at the top here,

138
00:08:25.820 --> 00:08:31.790
that if the state.fooddata

139
00:08:31.790 --> 00:08:36.630
has length to it, then return.

140
00:08:36.630 --> 00:08:40.330
So if you already got all of this
information, then don't go get it again.

141
00:08:41.380 --> 00:08:45.640
Cool, we have all of this but
we're not calling it yet.

142
00:08:45.640 --> 00:08:50.670
And you might think, well I could
go into the index page and I could

143
00:08:50.670 --> 00:08:57.430
on a created life cycle method call
dispatch this and then populate the store.

144
00:08:57.430 --> 00:09:01.282
But the problem with that is what if they
come not from the index page, are you

145
00:09:01.282 --> 00:09:07.000
gonna then add that into every single
page and make multiple calls and things?

146
00:09:07.000 --> 00:09:10.107
What would be much better since we're
serving in a kind of jamstacky way.

147
00:09:10.107 --> 00:09:13.610
What we're gonna do is we're gonna build
and concatenate all of those files.

148
00:09:13.610 --> 00:09:18.093
And we're gonna create dynamic
routes from all of these pages, but

149
00:09:18.093 --> 00:09:23.060
we're also able to do things well,
we're creating things on the server.

150
00:09:23.060 --> 00:09:27.339
So what we wanna do is we wanna call it
once while the pages are building and

151
00:09:27.339 --> 00:09:31.631
do it really efficiently that way,
instead of calling it on the client.

152
00:09:31.631 --> 00:09:35.606
And then having the person have to
wait for information to be loaded.

153
00:09:35.606 --> 00:09:41.880
So I'm going to go into a new file here,
and I'm gonna call it get food.

154
00:09:41.880 --> 00:09:44.634
[LAUGH] Cuz I just wanna call it get food,
I don't know.

155
00:09:44.634 --> 00:09:51.050
And I'm going to do this special
thing where I say getfood.server.js.

156
00:09:51.050 --> 00:09:55.980
And what that allows me to do is
tell nuxt, do this on the server.

157
00:09:55.980 --> 00:09:57.180
Don't do this on the client.

158
00:09:57.180 --> 00:10:01.220
And I'm gonna put this
in the plugins folder.

159
00:10:01.220 --> 00:10:07.819
So then I can say, export, default async
and then I'm gonna pass in the store.

160
00:10:13.347 --> 00:10:19.478
And then here,
I'm gonna say awaitstore.dispatch.

161
00:10:19.478 --> 00:10:23.296
Remember we dispatch actions,
we commit mutations,

162
00:10:23.296 --> 00:10:27.120
store.dispatch, what did I call it,
get food data?

163
00:10:28.490 --> 00:10:34.792
Let's write it and then check,
store.dispatch get food data.

164
00:10:34.792 --> 00:10:37.711
Yes, get food data.

165
00:10:37.711 --> 00:10:39.543
We have one more step to do.

166
00:10:39.543 --> 00:10:43.657
What we have to do now is we have
to go into our nuxt config, and

167
00:10:43.657 --> 00:10:48.800
let it know that this plugin exists
just like we did with the CSS above it.

168
00:10:48.800 --> 00:10:49.983
It's very similar.

169
00:10:49.983 --> 00:10:55.131
So we're gonna say tilde and
then we're gonna say plugins and

170
00:10:55.131 --> 00:10:59.197
then we're gonna say, get food.server.js.

171
00:10:59.197 --> 00:11:03.410
Now remember when I said, every time we
touch the nuxt configure, make some plugin

172
00:11:03.410 --> 00:11:07.510
registered or whatever, we have to
turn off the server and restart it.

173
00:11:07.510 --> 00:11:09.890
So I'm gonna go over to
where our server is.

174
00:11:09.890 --> 00:11:15.660
I'm going to turn it off and
turn it back on again.

175
00:11:15.660 --> 00:11:22.336
Maybe we should have made sure
that everything is saved.

176
00:11:24.082 --> 00:11:27.130
All right,
we'll check it again if it doesn't work.

177
00:11:27.130 --> 00:11:30.745
So we go to localhost:3000 and

178
00:11:30.745 --> 00:11:35.326
now we see all of that
information coming in.

179
00:11:35.326 --> 00:11:41.760
But remember, it's not coming in from
that static piece of information.

180
00:11:41.760 --> 00:11:44.420
Now it's coming in from our API.

181
00:11:44.420 --> 00:11:48.460
So if we look and the way that we can
check that is, remember we console logged?

182
00:11:48.460 --> 00:11:51.670
Well, console logging,
it's not gonna console log on the,

183
00:11:51.670 --> 00:11:53.330
well actually, I'm wrong.

184
00:11:53.330 --> 00:11:56.481
It's because in development mode,
it's going to,

185
00:11:56.481 --> 00:11:59.470
nuxt SSR gives you access to that console.

186
00:11:59.470 --> 00:12:00.815
I forgot about that.

187
00:12:00.815 --> 00:12:04.030
But if you deploy this on to a client,
this is only gonna

188
00:12:04.030 --> 00:12:06.970
happen in development mode,
it's not gonna happen in production mode.

189
00:12:10.280 --> 00:12:13.760
In here inside of our console,
or inside of our server,

190
00:12:13.760 --> 00:12:16.760
you can actually see all
of that data coming in.

191
00:12:16.760 --> 00:12:17.830
Super cool.

192
00:12:17.830 --> 00:12:22.147
So now we're bringing all of that in.

193
00:12:22.147 --> 00:12:24.417
So we're bringing things in via API.

194
00:12:24.417 --> 00:12:26.843
We have vuex store and
a plugin and we did it.

