WEBVTT

1
00:00:00.148 --> 00:00:02.007
&gt;&gt; Scott Moss: Let's go make
the resolvers for this.

2
00:00:02.007 --> 00:00:03.870
So just follow me on here,

3
00:00:03.870 --> 00:00:08.800
we do need to import some database stuff,
some other things.

4
00:00:08.800 --> 00:00:11.270
So I'm just gonna copy my imports.

5
00:00:11.270 --> 00:00:12.890
I highly recommend you do the same.

6
00:00:12.890 --> 00:00:15.086
I'm just gonna put them up here,
I'll talk about them.

7
00:00:15.086 --> 00:00:19.204
So you have the context at least.

8
00:00:19.204 --> 00:00:24.157
Let me Added underneath it,
I'm sorry, there we go.

9
00:00:24.157 --> 00:00:29.701
So what is this?

10
00:00:33.797 --> 00:00:36.582
&gt;&gt; Scott Moss: I'm sorry,
I'm in the wrong file.

11
00:00:36.582 --> 00:00:37.419
I'm like, what is this?

12
00:00:37.419 --> 00:00:42.080
Doesn't make any sense, I need to go to
my resolver file, sorry, bring it here,

13
00:00:42.080 --> 00:00:42.835
there we go.

14
00:00:42.835 --> 00:00:48.051
Okay, so in my resolvers file,
these imports are a few things.

15
00:00:48.051 --> 00:00:51.364
This is our ORM,
this is how we interact with our database.

16
00:00:51.364 --> 00:00:54.961
So we're using drizzle, if you ever use
drizzle, you'll know exactly what this is.

17
00:00:54.961 --> 00:00:57.515
If you never use drizzle,
it doesn't matter, it's an ORM,

18
00:00:57.515 --> 00:01:00.213
they all do the same thing,
slightly different.

19
00:01:00.213 --> 00:01:03.630
If you don't know what ORM is,
it's the SDK for your database,

20
00:01:03.630 --> 00:01:06.573
that's the best way I can describe it.

21
00:01:06.573 --> 00:01:11.345
This is the code in which you
interact with your database with,

22
00:01:11.345 --> 00:01:14.948
these are database related
type script types,

23
00:01:14.948 --> 00:01:18.840
and also the database tables
that we will be using.

24
00:01:18.840 --> 00:01:24.979
This is a custom type that I created that
represents the current sign in user.

25
00:01:24.979 --> 00:01:29.241
We can use this to type
check our GraphQL context,

26
00:01:29.241 --> 00:01:32.902
which eventually will have the user on it.

27
00:01:32.902 --> 00:01:37.549
These are utility functions for helping
us sign in and sign up, and getting

28
00:01:37.549 --> 00:01:42.520
a user from adjacent web, so we're not
gonna make that as nothing to a GraphQL.

29
00:01:42.520 --> 00:01:46.718
But if you want to just understand
that process, it's quite simple,

30
00:01:46.718 --> 00:01:49.789
a sign-in function takes an email and
a password.

31
00:01:49.789 --> 00:01:55.049
It looks in the database to see if a user
has that email, if it does, it compares

32
00:01:55.049 --> 00:02:00.253
that person's hash password with the plain
text password that they sent up.

33
00:02:00.253 --> 00:02:03.869
And if that's correct, then that
person is who they say they are and

34
00:02:03.869 --> 00:02:05.084
they're signing in.

35
00:02:05.084 --> 00:02:07.904
So generate them adjacent web token and
send it back.

36
00:02:07.904 --> 00:02:11.156
Signup is very similar, except for
there is no comparison,

37
00:02:11.156 --> 00:02:14.494
it just tries to insert a user
with a given email and password.

38
00:02:14.494 --> 00:02:17.424
If that doesn't fail a unique constraint,

39
00:02:17.424 --> 00:02:21.232
it will then create a token for
that user and send it back.

40
00:02:21.232 --> 00:02:24.028
Hash password, compare password,
does exactly what they say.

41
00:02:24.028 --> 00:02:27.098
Hash password takes a plain
text password and hashes it.

42
00:02:27.098 --> 00:02:31.828
Compare takes a hash password and
a plain text password and compares it.

43
00:02:31.828 --> 00:02:35.798
And then the other one up here was,
what is this?

44
00:02:35.798 --> 00:02:40.126
Get user from token, it takes the headers,
it grabs the token from the headers,

45
00:02:40.126 --> 00:02:42.304
it tries to validate the JSON web token.

46
00:02:42.304 --> 00:02:45.144
If you don't know what JSON web token is,

47
00:02:45.144 --> 00:02:50.755
it's a string that represents a claim to
some data, in this case, a user object.

48
00:02:50.755 --> 00:02:52.690
So it tries to invert that string and

49
00:02:52.690 --> 00:02:56.804
turn it back to an object with the same
secret it used to create the token.

50
00:02:56.804 --> 00:02:59.160
If that works,
we can create a database for

51
00:02:59.160 --> 00:03:03.021
that user ID to see if the user is valid,
if so, return the user.

52
00:03:03.021 --> 00:03:05.221
This is how we know who signed in.

53
00:03:05.221 --> 00:03:06.722
And then create token for user,

54
00:03:06.722 --> 00:03:09.791
is the thing that's actually
creating the token given a user ID.

55
00:03:09.791 --> 00:03:12.173
And we can use this to
send back to the client so

56
00:03:12.173 --> 00:03:14.008
they can save it at local storage.

57
00:03:14.008 --> 00:03:17.146
On the client side, of course,
we use this JSON web token.

58
00:03:17.146 --> 00:03:20.887
It had to send it up every single time
in order for our request to work,

59
00:03:20.887 --> 00:03:24.884
you will most likely have to do the same
thing, but inside the Apollo app,

60
00:03:24.884 --> 00:03:26.517
I'll show you where to do it.

61
00:03:26.517 --> 00:03:28.325
So you have a place to header there, so

62
00:03:28.325 --> 00:03:31.807
your queries can continue to work
after we add authentication.

63
00:03:31.807 --> 00:03:36.530
So, nothing to do with GraphQL, plain
old authentication, nothing crazy, but

64
00:03:36.530 --> 00:03:41.337
this can be useful if you've never built
authentication before, so check it out.

65
00:03:41.337 --> 00:03:43.718
Anyway, done with that tangent,
let's work on these resolvers.

66
00:03:43.718 --> 00:03:48.025
So we need to make a resolver for
me, I have one it's not correct, so

67
00:03:48.025 --> 00:03:49.448
let's fix it.

68
00:03:49.448 --> 00:03:53.186
We know me returns a user,
so we need to do that.

69
00:03:53.186 --> 00:03:57.418
I'm just working me on this one, we're
doing something that we haven't done yet.

70
00:03:57.418 --> 00:04:00.577
So, the first argument is a parent,
this thing's never gonna have a parent, so

71
00:04:00.577 --> 00:04:02.587
I'm gonna put underscore
there as a placeholder.

72
00:04:03.597 --> 00:04:07.957
The second argument is the actual
arguments passed to this query.

73
00:04:07.957 --> 00:04:10.648
Well, this query doesn't
have any arguments, so

74
00:04:10.648 --> 00:04:12.777
I'm also not going to use those.

75
00:04:12.777 --> 00:04:16.317
So I'm just gonna put
underscore underscore.

76
00:04:16.317 --> 00:04:18.517
The third argument is the context.

77
00:04:19.617 --> 00:04:22.039
I'm actually gonna use this,
I need this right here, so

78
00:04:22.039 --> 00:04:24.107
I'm going to put ctx for context.

79
00:04:24.107 --> 00:04:28.307
The way I'm gonna architecture
the authentication is,

80
00:04:28.307 --> 00:04:34.107
I'm going to check if there is a user
before the GraphQL server starts.

81
00:04:34.107 --> 00:04:38.174
And then if there is, I'm going to attach
that user to the context object, so

82
00:04:38.174 --> 00:04:39.437
every resolver has it.

83
00:04:39.437 --> 00:04:43.296
So if we want to get the current user,
we should just be able to return

84
00:04:43.296 --> 00:04:47.725
context.user, in this case,
assuming there's a user that's signed in.

85
00:04:47.725 --> 00:04:51.573
So that's all we have to do,
is return ctx.user, and

86
00:04:51.573 --> 00:04:56.575
that type that I imported,
GQL context, that's what it's for.

87
00:04:56.575 --> 00:05:01.343
GQL context is telling us that, hey,
context, I might have user on it,

88
00:05:01.343 --> 00:05:05.189
it's optional,
it depends if they're signed in or not.

89
00:05:05.189 --> 00:05:08.779
We'll get to that part where we attach the
user to the context right after this, but

90
00:05:08.779 --> 00:05:10.278
that's where I'm gonna put it.

91
00:05:10.278 --> 00:05:14.981
This is useful because you don't
have to write the same logic in

92
00:05:14.981 --> 00:05:18.442
every single resolver
to determine whether or

93
00:05:18.442 --> 00:05:23.453
not the person is signed in,
just do it before the app starts.

94
00:05:23.453 --> 00:05:26.367
And then there's, we'll get to it and
I'll talk more about it, but

95
00:05:26.367 --> 00:05:30.263
there's different scenarios and where you
wanna enforce a user being there or not.

96
00:05:30.263 --> 00:05:34.003
Like checking to see if a user is one
thing, but enforcing it is different.

97
00:05:34.003 --> 00:05:37.204
We probably don't wanna enforce it on the
whole server level because no one would

98
00:05:37.204 --> 00:05:39.792
ever be able to sign in or
sign up without already being signed in,

99
00:05:39.792 --> 00:05:41.501
that wouldn't make it get a sense.

100
00:05:41.501 --> 00:05:44.161
So you have to figure out
where you wanna do it,

101
00:05:44.161 --> 00:05:46.355
I talked about doing on a field level.

102
00:05:46.355 --> 00:05:50.052
You can do it on a object level,
you do it on a resolver level, there's so

103
00:05:50.052 --> 00:05:52.734
many levels,
we're gonna choose resolver level.

104
00:05:52.734 --> 00:05:57.411
So the resolvers are in control on whether
or not it's enforced because they have

105
00:05:57.411 --> 00:06:01.759
access to the user there or not, so
that's what we're gonna do, sign in.

106
00:06:01.759 --> 00:06:03.073
Let's go ahead and get that going.

107
00:06:03.073 --> 00:06:07.923
So we need to make a mutation, like so.

108
00:06:07.923 --> 00:06:11.243
We need to say, sign in, like so.

109
00:06:11.243 --> 00:06:16.823
Sign in, is gonna take arguments, but
there's no parent, so nothing there.

110
00:06:16.823 --> 00:06:18.397
It is going to take arguments here,

111
00:06:18.397 --> 00:06:20.764
which is an object that has
a field on it called input.

112
00:06:20.764 --> 00:06:22.454
How do I know that?

113
00:06:22.454 --> 00:06:25.515
Well, if I go back and
look at this schema,

114
00:06:25.515 --> 00:06:29.354
I can see that sign in takes
an argument called input.

115
00:06:30.594 --> 00:06:34.394
And its type is all the input, which
is an object that has email password.

116
00:06:34.394 --> 00:06:36.526
So there it is, it's called input.

117
00:06:36.526 --> 00:06:40.505
I can even do structure that and
get email password if I want, but

118
00:06:40.505 --> 00:06:42.285
I'll just keep it as input.

119
00:06:42.285 --> 00:06:45.665
Every resolver gets context,
I'm just gonna say context.

120
00:06:45.665 --> 00:06:49.032
And then, the fourth argument is info,
but we're not using it, so

121
00:06:49.032 --> 00:06:50.757
I'm not even gonna give it a name.

122
00:06:50.757 --> 00:06:54.222
The only reason I have to name
these is because if you want to

123
00:06:54.222 --> 00:06:58.893
access the arguments, after earlier
arguments, the earlier arguments need

124
00:06:58.893 --> 00:07:03.569
placeholders if you don't use them,
that's just a JavaScript thing.

125
00:07:03.569 --> 00:07:09.629
You just, I don't think you can do that,
right, but you have to put something here.

126
00:07:09.629 --> 00:07:13.039
So, I put an underscore,
because I'm never gonna use it.

127
00:07:13.039 --> 00:07:17.242
So, I wish they would have come up
with a better way for that, honestly.

128
00:07:17.242 --> 00:07:19.719
But unfortunately, so we got to do it.

129
00:07:19.719 --> 00:07:24.223
So, we have that, now, sign in,
how is that going to work?

130
00:07:24.223 --> 00:07:27.386
Well, I mean the code is here, I can
kind of walk through, is pretty simple.

131
00:07:27.386 --> 00:07:31.073
First, we call the sign in function
with the arcs.input, all right, so

132
00:07:31.073 --> 00:07:31.913
let's do that.

133
00:07:31.913 --> 00:07:34.690
We can say, data equals await,
which means,

134
00:07:34.690 --> 00:07:38.396
we can make this resolver asynchronous,
all resolvers can,

135
00:07:38.396 --> 00:07:43.618
and most likely, will be asynchronous,
so you can put a sync in front of them.

136
00:07:43.618 --> 00:07:48.378
You can return promises, you can return an
array of promises, wherever you wanna do.

137
00:07:48.378 --> 00:07:52.658
So we will await the sign-in
function that you import at the top.

138
00:07:52.658 --> 00:07:55.348
You can see it takes in an email and
password.

139
00:07:55.348 --> 00:07:59.622
Luckily for us, the input variable
is an object that has email and

140
00:07:59.622 --> 00:08:04.440
password on it because again, right here,
input is auth input, which is

141
00:08:04.440 --> 00:08:09.827
an object with email and password,
guaranteed to be there, cuz it's required.

142
00:08:09.827 --> 00:08:12.713
So this code won't even
run unless there is for

143
00:08:12.713 --> 00:08:17.018
sure 100% an object on input that
has an email and password on it.

144
00:08:17.018 --> 00:08:22.067
This resolver won't even execute, cuz
that has to pass the schema validation.

145
00:08:22.067 --> 00:08:26.977
So we can guarantee that that's there,
and I can just say input, there we go.

146
00:08:26.977 --> 00:08:28.147
Good to go.

147
00:08:28.147 --> 00:08:28.989
So if we have that,

148
00:08:28.989 --> 00:08:33.477
then basically I just wanna check to
make sure like, did that actually work?

149
00:08:33.477 --> 00:08:35.159
Or if it did not work,
I wanna throw some errors.

150
00:08:35.159 --> 00:08:36.557
So let's do that.

151
00:08:36.557 --> 00:08:40.561
So I can say if not data or

152
00:08:40.561 --> 00:08:44.767
not data.token, or for

153
00:08:44.767 --> 00:08:50.174
some reason, not data.user,

154
00:08:50.174 --> 00:08:58.798
then what I can do is I can
throw a new GraphQL error.

155
00:08:58.798 --> 00:09:02.198
I recommend throwing GraphQL errors and
not traditional errors.

156
00:09:02.198 --> 00:09:07.182
Without traditional error, nothing's wrong
with that because the GraphQL server,

157
00:09:07.182 --> 00:09:11.164
you can think of the whole server
being wrapped in a try catch.

158
00:09:11.164 --> 00:09:14.236
So it's not gonna break your server,
the GraphQL server is gonna catch it.

159
00:09:14.236 --> 00:09:15.658
It's just the message that it sends down.

160
00:09:15.658 --> 00:09:18.824
It's just gonna be like,
I don't know something happened, right?

161
00:09:18.824 --> 00:09:23.015
So, these are GraphQL error, you have
just have more control over what error

162
00:09:23.015 --> 00:09:26.380
message you send down, so
I'm gonna say GraphQL your error.

163
00:09:26.380 --> 00:09:30.349
I'm gonna put in something called
unauthorized, you can put whatever you

164
00:09:30.349 --> 00:09:33.692
want, but this is where creating
an error system is a big deal.

165
00:09:33.692 --> 00:09:35.344
You really should sit down and
think about,

166
00:09:35.344 --> 00:09:37.272
what are the error codes
that I wanna send?

167
00:09:37.272 --> 00:09:39.492
What are the error messages
that I wanna send?

168
00:09:39.492 --> 00:09:42.147
Is my client gonna take the error
message from the server and

169
00:09:42.147 --> 00:09:45.119
put it right on the screen, or
is my client gonna look at the code and

170
00:09:45.119 --> 00:09:46.728
come up with his own error message?

171
00:09:46.728 --> 00:09:49.584
What level of experience do you want?

172
00:09:49.584 --> 00:09:51.105
There is no wrong answer.

173
00:09:51.105 --> 00:09:53.240
It also depends if you're doing client or

174
00:09:53.240 --> 00:09:57.374
developer facing APIs versus just
internal, so there's no wrong answers.

175
00:09:57.374 --> 00:10:01.477
I'm just gonna do this,
then I could put extensions on here.

176
00:10:01.477 --> 00:10:04.087
And then for extensions,
I'll talk about that in a minute.

177
00:10:04.087 --> 00:10:08.930
I could put code, and I'll just say,
there really isn't a wrong answer here.

178
00:10:08.930 --> 00:10:12.604
I think what I was doing is, yeah,
you can do whatever you want.

179
00:10:12.604 --> 00:10:16.232
I'll just keep this simple, and I'll
actually put a 401 since I guess that's

180
00:10:16.232 --> 00:10:19.176
what you would get if you were using REST,
if you tried to sign in and

181
00:10:19.176 --> 00:10:20.773
it didn't work, you get a 401.

182
00:10:20.773 --> 00:10:22.467
So I'll just say code 401.

183
00:10:22.467 --> 00:10:26.033
This is useful, so on the front end,
if I get an error, I could be like, cool,

184
00:10:26.033 --> 00:10:29.877
here's an array of errors on my query and
I'll show you an Apollo thing.

185
00:10:29.877 --> 00:10:31.951
I can look at the code and
like, code 401, cool,

186
00:10:31.951 --> 00:10:33.937
I know what to show my user on the screen.

187
00:10:33.937 --> 00:10:36.975
I have a map on my front end that
maps error codes to messages and

188
00:10:36.975 --> 00:10:41.314
that's what it shows on the screen when it
sees 401, or whatever code you wanna put.

189
00:10:41.314 --> 00:10:45.822
There's no wrong answer here when it
comes to creating an error framework, or

190
00:10:45.822 --> 00:10:46.997
whatever, right?

191
00:10:46.997 --> 00:10:50.257
So, there we go, we got that.

192
00:10:50.257 --> 00:10:54.050
And in this case, I need to satisfy
the required constraints or

193
00:10:54.050 --> 00:10:56.269
the scheme of constraints of a user,

194
00:10:56.269 --> 00:11:00.007
which is it needs all of this
plus an optional of this, right?

195
00:11:00.007 --> 00:11:04.325
So, I'm going to do just that,
I'm gonna say cool.

196
00:11:04.325 --> 00:11:08.032
Returning object,
with all the data on it, and

197
00:11:08.032 --> 00:11:13.034
if we look at the data,
we can know that it's a user with a token,

198
00:11:13.034 --> 00:11:16.666
like this, so
I can just put all the data on it.

199
00:11:16.666 --> 00:11:20.058
Well, I guess technically I could just
say, just return the data then at this

200
00:11:20.058 --> 00:11:23.055
point since it's basically that,
anyway, it's a user.

201
00:11:23.055 --> 00:11:29.882
I'm sorry, no, we can't do that with, the
user is flat, it's not a user property.

202
00:11:29.882 --> 00:11:33.666
If you go back and look,
there's no user property on here,

203
00:11:33.666 --> 00:11:35.516
it's all the flat fields.

204
00:11:35.516 --> 00:11:37.826
And then there's a token property,
so we need to do,

205
00:11:40.111 --> 00:11:43.496
&gt;&gt; Scott Moss: Say, spread over the user,

206
00:11:43.496 --> 00:11:49.019
but then for the token,
give me data.token.

207
00:11:49.019 --> 00:11:52.527
But I think if we just spread
over this data right here,

208
00:11:52.527 --> 00:11:57.079
it'll also, data.user,
I'm sorry, there we go.

209
00:11:57.079 --> 00:11:58.075
That's what we want.

210
00:11:58.075 --> 00:12:00.526
So spread over the data.user and
then for the top, so

211
00:12:00.526 --> 00:12:02.500
I'm gonna give you data dot token, cool.

212
00:12:02.500 --> 00:12:06.788
So we got sign in, lets you sign up, so

213
00:12:06.788 --> 00:12:10.140
sign up., pretty similar.

214
00:12:12.680 --> 00:12:16.907
We're gonna say,
const data equals await, sign up.

215
00:12:16.907 --> 00:12:22.682
It's also gonna take the input,
so let's get our arguments going.

216
00:12:26.892 --> 00:12:29.320
&gt;&gt; Scott Moss: Passing our
input here on sign up,

217
00:12:29.320 --> 00:12:32.178
we got that, literally the same thing.

218
00:12:32.178 --> 00:12:33.178
I'm just going to copy that.

219
00:12:35.168 --> 00:12:36.480
No point of writing it twice.

220
00:12:39.091 --> 00:12:42.703
&gt;&gt; Scott Moss: There we go, so
now we have the exact same thing.

221
00:12:42.703 --> 00:12:43.885
We try to sign up.

222
00:12:43.885 --> 00:12:45.759
If you don't sign up, we throw an error.

223
00:12:45.759 --> 00:12:47.041
If so, we return it.

