WEBVTT

1
00:00:00.000 --> 00:00:02.819
&gt;&gt; Scott Moss: For this part, I'm just
gonna kind of just talk about what

2
00:00:02.819 --> 00:00:05.832
is GraphQL, I also talk about
this in the client side course.

3
00:00:05.832 --> 00:00:08.970
So if you watch that,
it's gonna be kind of a recap for you.

4
00:00:08.970 --> 00:00:14.640
But basically, GraphQL, you can read
the definition here of what it is.

5
00:00:14.640 --> 00:00:17.790
The way I describe GraphQL
is basically two parts.

6
00:00:17.790 --> 00:00:21.819
There is a query language,
that's the QL part in graph.

7
00:00:21.819 --> 00:00:26.679
That query language is used to
traverse any type of data source or

8
00:00:26.679 --> 00:00:30.104
many data sources in
a very descriptive way.

9
00:00:30.104 --> 00:00:32.746
So that query language
allows you to literally say,

10
00:00:32.746 --> 00:00:37.070
this is the shape of data that I want from
the available data that I know about.

11
00:00:37.070 --> 00:00:41.391
Make sure you return the data in this
exact shape, so that's the query language.

12
00:00:41.391 --> 00:00:45.132
The other side of it is what we're making
today is gonna be the part that satisfies

13
00:00:45.132 --> 00:00:48.064
that query language,
that's gonna be the server component.

14
00:00:48.064 --> 00:00:53.344
So that server, its job is to
architecture some way in which

15
00:00:53.344 --> 00:00:58.097
a client can query the given
schema in any direction,

16
00:00:58.097 --> 00:01:01.597
any format, any shape that they want.

17
00:01:01.597 --> 00:01:05.417
So there can be a pretty close to
infinite amount of possibilities in

18
00:01:05.417 --> 00:01:09.715
which someone can query a GraphQL schema
depending on how big the schema is.

19
00:01:09.715 --> 00:01:14.902
So the server's job is to make sure that
all those possibilities can be fulfilled,

20
00:01:14.902 --> 00:01:19.796
which sounds quite difficult if you think
about it from a perspective of making

21
00:01:19.796 --> 00:01:22.928
one rest route for
one resource plus CRUD action.

22
00:01:22.928 --> 00:01:26.769
That sounds like you'd be making a lot of
routes and verbs, and things like that,

23
00:01:26.769 --> 00:01:29.738
but it's not architecture like
that as you'll soon find out.

24
00:01:29.738 --> 00:01:33.673
So that's kind of how I describe GraphQL,
and then just to tie it all together,

25
00:01:33.673 --> 00:01:35.224
there's a lot of type safety.

26
00:01:35.224 --> 00:01:39.975
So having that schema that tells the
client what resources it can access, and

27
00:01:39.975 --> 00:01:42.752
then having the back
end fulfill that query,

28
00:01:42.752 --> 00:01:47.137
there's type safety involved to ensure
that the client can only ask for

29
00:01:47.137 --> 00:01:51.314
things in a certain type in
which the schema created.

30
00:01:51.314 --> 00:01:56.274
And if that contract is violated,
the server will automatically error out,

31
00:01:56.274 --> 00:02:00.621
so if you don't satisfy the right
type on the back end, if you ask for

32
00:02:00.621 --> 00:02:04.684
different things on the front end,
you're gonna get errors.

33
00:02:04.684 --> 00:02:07.538
So that's not something unique to servers,
but

34
00:02:07.538 --> 00:02:10.957
typically that's something
you have to build yourself.

35
00:02:10.957 --> 00:02:15.732
Every company I've ever worked at, where
we were not using something like GraphQL,

36
00:02:15.732 --> 00:02:19.195
part of the stack was for
sure validating input from a client.

37
00:02:19.195 --> 00:02:23.274
It's like, okay, here's the input,
either we validate it from scratch or

38
00:02:23.274 --> 00:02:26.663
we have like, I've used things
like runtime schemas like ZOD or

39
00:02:26.663 --> 00:02:29.526
things like that that will
validate some user input.

40
00:02:29.526 --> 00:02:32.570
Cuz you don't wanna trust a client,
before we even interact with the database,

41
00:02:32.570 --> 00:02:34.830
which has another layer of
validation with its own schema.

42
00:02:34.830 --> 00:02:37.351
So there's a lot of valid, and
then on the front end for a form,

43
00:02:37.351 --> 00:02:39.074
you might have front end form validation.

44
00:02:39.074 --> 00:02:43.445
So there's three layers of validation you
might have when it comes to accepting

45
00:02:43.445 --> 00:02:44.172
user input.

46
00:02:44.172 --> 00:02:48.616
GraphQL takes care of the validating
from the client to the back end,

47
00:02:48.616 --> 00:02:52.981
that's done for free given a schema,
just like a database schema,

48
00:02:52.981 --> 00:02:57.293
if you try to violate that,
the database should error out as well.

49
00:02:57.293 --> 00:03:00.749
If you have some primary key or
some foreign key constraints on the SQL

50
00:03:00.749 --> 00:03:04.800
database, and you try to violate that
on insert, then yeah, you're gonna have

51
00:03:04.800 --> 00:03:08.749
errors thrown from the database for
free, you don't have to write that code.

52
00:03:08.749 --> 00:03:13.526
You basically get that same experience but
on the API layer with GraphQL,

53
00:03:13.526 --> 00:03:17.694
so it's quite effective
as you'll soon find out.

54
00:03:17.694 --> 00:03:20.299
So created by Facebook, long time ago.

55
00:03:20.299 --> 00:03:23.918
And then since then,
it's evolved into, I would say,

56
00:03:23.918 --> 00:03:28.692
it's pretty much a standard at this
point when comparing it to other types

57
00:03:28.692 --> 00:03:31.865
of things out there like GRPC,
obviously REST.

58
00:03:31.865 --> 00:03:36.166
There's now TRPC,
it's definitely up there.

59
00:03:36.166 --> 00:03:40.733
It's definitely in the conversation when
it comes to what API should be built for

60
00:03:40.733 --> 00:03:41.684
something new.

61
00:03:41.684 --> 00:03:46.448
GraphQL is something that we thought about
a lot at the company that I'm building and

62
00:03:46.448 --> 00:03:49.552
how we might use it because
of just how useful it can be.

63
00:03:49.552 --> 00:03:51.372
But now it's maintained
by a large community.

64
00:03:51.372 --> 00:03:55.920
There are companies built on
creating services, and plugins, and

65
00:03:55.920 --> 00:03:59.910
all different types of product for
GraphQL developers, so

66
00:03:59.910 --> 00:04:04.324
when you see that, you know it's
always a massive opportunity.

67
00:04:04.324 --> 00:04:07.196
But yeah, I'm pretty impressed
with what GraphQL has done and

68
00:04:07.196 --> 00:04:08.396
how far along it's come.

69
00:04:08.396 --> 00:04:11.700
So yeah, why would you use something
like GraphQL over something like REST?

70
00:04:11.700 --> 00:04:15.082
I mean, we're gonna talk
about that the entire course.

71
00:04:15.082 --> 00:04:20.189
But I would say, for me, especially on
the back end, the biggest reason is that,

72
00:04:20.189 --> 00:04:23.974
well, the back end is so
difficult the than the client side.

73
00:04:23.974 --> 00:04:27.491
But I'd say some of the biggest benefits
on the back end of why you would use

74
00:04:27.491 --> 00:04:30.556
GraphQL is that, you can tie into
many different data sources,

75
00:04:30.556 --> 00:04:32.405
that aren't just like one database.

76
00:04:32.405 --> 00:04:35.389
So if you have microservice,
if you integrate with Stripe,

77
00:04:35.389 --> 00:04:39.792
you integrate with this third party thing,
you have different databases for whatever.

78
00:04:39.792 --> 00:04:42.924
Yeah, obviously, you would write a bunch
of business logic to tie all that stuff in

79
00:04:42.924 --> 00:04:45.140
and then surface that through
whatever clients you want.

80
00:04:45.140 --> 00:04:50.101
But GraphQL just kind of makes that easy,
because it's abstracted away from

81
00:04:50.101 --> 00:04:55.305
the data sources, but it creates a unified
schema in which any client can query.

82
00:04:55.305 --> 00:04:58.098
So if you have a mobile app
that needs to get data,

83
00:04:58.098 --> 00:05:02.799
as far as you wanna get the user, you also
wanna get the user subscription status,

84
00:05:02.799 --> 00:05:04.742
which comes from Stripe.

85
00:05:04.742 --> 00:05:11.792
You also wanna get something about the
user that comes from their Google profile.

86
00:05:11.792 --> 00:05:15.068
Yes, you can curry all that individually,
make a route for it, and

87
00:05:15.068 --> 00:05:16.632
then send it back to the client.

88
00:05:16.632 --> 00:05:20.462
But you can also have GraphQL resolve
those pieces of data individually and

89
00:05:20.462 --> 00:05:24.106
put them together for you in one
single place, and one object type, and

90
00:05:24.106 --> 00:05:27.794
the client just gets that for free,
and they don't even know about it.

91
00:05:27.794 --> 00:05:32.052
So, it's quite impressive when
you can do things like that.

92
00:05:32.052 --> 00:05:36.729
I think it also just, is a great
way to organize an API as you soon

93
00:05:36.729 --> 00:05:39.748
find out that it's a framework really.

94
00:05:39.748 --> 00:05:43.950
I think for the most part, when it
comes to developing APIs, yeah, we have

95
00:05:43.950 --> 00:05:48.289
things like Express and things like that,
but you can still get pretty wild,

96
00:05:48.289 --> 00:05:51.518
I've never seen two express
servers that look the same.

97
00:05:51.518 --> 00:05:54.621
Even though they all use Express,
they all look way different.

98
00:05:54.621 --> 00:05:58.502
Whereas, with GraphQL, it's like React,
it's pretty much all gonna look the same,

99
00:05:58.502 --> 00:06:01.178
cuz if you don't satisfy
the constraints of the framework,

100
00:06:01.178 --> 00:06:03.347
it won't let it start as
you'll find out today.

101
00:06:03.347 --> 00:06:08.089
You really have to be pretty literal with
the things that you make because it's so

102
00:06:08.089 --> 00:06:12.705
type heavy that it won't even start, so
it gives you a little bit of security.

103
00:06:12.705 --> 00:06:16.640
It also creates standardization around
GraphQL API, so you can feel confident

104
00:06:16.640 --> 00:06:19.826
that you can go work on another one,
even in another language.

105
00:06:19.826 --> 00:06:24.066
I've worked on GraphQL APIs and
languages like Phoenix,

106
00:06:24.066 --> 00:06:29.082
I don't even know those languages,
but yeah, I was able to work with

107
00:06:29.082 --> 00:06:34.553
GraphQL because it's abstracted so
high from it that it doesn't matter.

108
00:06:34.553 --> 00:06:36.702
Some of the bigger differences
between GraphQL and REST, and

109
00:06:36.702 --> 00:06:39.485
we'll be talking about this throughout
the course as well as we continue to go.

110
00:06:39.485 --> 00:06:43.292
But some of the bigger ones are, with
REST there's a combination of a route and

111
00:06:43.292 --> 00:06:44.398
a verb for a resource.

112
00:06:44.398 --> 00:06:49.234
So if you wanna do CRUD,
you might have a postrequestto/user.

113
00:06:49.234 --> 00:06:54.464
You wanna get one user,
it might be a getrequestto/user/userid,

114
00:06:54.464 --> 00:06:58.894
you wanna update one to put or
a patch to user/id, right?

115
00:06:58.894 --> 00:07:01.899
So you're having all these routes for
all these different resources,

116
00:07:01.899 --> 00:07:04.212
with all these different actions,
not with GraphQL.

117
00:07:04.212 --> 00:07:08.361
GraphQL, there's just one URL,
it's typically /GraphQL, and

118
00:07:08.361 --> 00:07:11.437
it's always pretty much
gonna be a POST request.

119
00:07:11.437 --> 00:07:13.329
And that's it,
you only have one route, right?

120
00:07:13.329 --> 00:07:19.859
The actual part where you are asking for
the information is part of the payload.

121
00:07:19.859 --> 00:07:24.491
Payload that you send up is what
the server needs to figure out how to

122
00:07:24.491 --> 00:07:27.812
resolve your query,
it's not part of the URL.

123
00:07:27.812 --> 00:07:32.642
So that's the biggest difference REST uses
the URL to determine what it is you're

124
00:07:32.642 --> 00:07:36.772
trying to access, whereas GraphQL
uses the body of the POST request to

125
00:07:36.772 --> 00:07:40.146
figure out what it is that you
want after it validates it.

126
00:07:40.146 --> 00:07:42.692
So, that's why you only need one URL.

