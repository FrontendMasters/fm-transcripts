WEBVTT

1
00:00:00.110 --> 00:00:00.643
&gt;&gt; Scott Moss: For this part,

2
00:00:00.643 --> 00:00:02.650
I'm just gonna kinda just
talk about what is GraphQL.

3
00:00:02.650 --> 00:00:06.276
I also talk about this in the client
side course, so if you watch that,

4
00:00:06.276 --> 00:00:08.970
it's gonna be kind of a recap for you.

5
00:00:08.970 --> 00:00:14.640
But basically, GraphQL, you can read
the definition here of what it is.

6
00:00:14.640 --> 00:00:19.523
The way I describe GraphQL is basically
like two parts, there is a query language,

7
00:00:19.523 --> 00:00:21.284
that's the QL part in graph.

8
00:00:21.284 --> 00:00:26.363
That query language is used to
traverse any type of data source or

9
00:00:26.363 --> 00:00:30.232
a mini data sources,
in a very descriptive way.

10
00:00:30.232 --> 00:00:32.818
So that query language
allows you to literally say,

11
00:00:32.818 --> 00:00:37.102
this is the shape of data that I want from
the available data that I know about.

12
00:00:37.102 --> 00:00:41.392
Make sure you return the data in this
exact shape, so that's the query language.

13
00:00:41.392 --> 00:00:45.048
The other side of it is what we're making
today, is gonna be the part that satisfies

14
00:00:45.048 --> 00:00:48.192
that query language,
that's gonna be the server component.

15
00:00:48.192 --> 00:00:53.505
So that server, its job is to
architecture some way in which

16
00:00:53.505 --> 00:00:58.289
a client can query the given
schema in any direction,

17
00:00:58.289 --> 00:01:01.812
any format, any shape that they want.

18
00:01:01.812 --> 00:01:06.234
So they can be pretty close to infinite
amount of possibilities in which someone

19
00:01:06.234 --> 00:01:09.936
can query a graphical schema,
depending on how big the schema is.

20
00:01:09.936 --> 00:01:15.116
So the server's job is to make sure that
all those possibilities can be fulfilled,

21
00:01:15.116 --> 00:01:19.408
which sounds quite difficult if you
think about it from a perspective

22
00:01:19.408 --> 00:01:23.116
of making one REST route for
one resource plus code action.

23
00:01:23.116 --> 00:01:26.896
That sounds like you'd be making a lot of
routes and verbs and things like that, but

24
00:01:26.896 --> 00:01:29.893
it's not architecture like
that as you'll soon find out.

25
00:01:29.893 --> 00:01:32.013
So that's kinda how I describe GraphQL.

26
00:01:32.013 --> 00:01:35.433
And then just to tie it all together,
there's a lot of type safety.

27
00:01:35.433 --> 00:01:39.975
So having that schema that tells the
client what resources it can access and

28
00:01:39.975 --> 00:01:42.713
then have in the back
end fulfill that query,

29
00:01:42.713 --> 00:01:47.038
there's type safety involved to ensure
that the client can only ask for

30
00:01:47.038 --> 00:01:51.315
things in the certain type
in which the schema created.

31
00:01:51.315 --> 00:01:56.845
And if that contract is violated,
the server will automatically error out.

32
00:01:56.845 --> 00:02:00.861
So if you don't satisfy the right
types on the back end, if you ask for

33
00:02:00.861 --> 00:02:04.835
different things on the front end,
you're gonna get errors.

34
00:02:04.835 --> 00:02:07.671
So that's not something unique to servers,
but

35
00:02:07.671 --> 00:02:11.095
typically that's something
you had to build yourself.

36
00:02:11.095 --> 00:02:15.940
Every company I've ever worked at, where
we were not using something like GraphQL,

37
00:02:15.940 --> 00:02:19.455
part of the stack was for
sure validating input from a client.

38
00:02:19.455 --> 00:02:23.699
It's like, okay, here's the input,
either we validate it from scratch,

39
00:02:23.699 --> 00:02:27.487
I've used things like runtime schemas
like Zod or things like that,

40
00:02:27.487 --> 00:02:29.536
that will validate some user input.

41
00:02:29.536 --> 00:02:32.762
Because you don't wanna trust the clients
before we even interact with the database,

42
00:02:32.762 --> 00:02:35.143
which has another layer of
validation with it's own schema.

43
00:02:35.143 --> 00:02:39.085
And then on the front end for a form,
you might have front end form validation,

44
00:02:39.085 --> 00:02:43.091
so there's three layers of validation you
might have when it comes to accepting

45
00:02:43.091 --> 00:02:44.682
user input.

46
00:02:44.682 --> 00:02:50.103
GraphQL takes care of the validating from
the client to the back end that's done for

47
00:02:50.103 --> 00:02:54.152
free, given a schema just
like a database schema.

48
00:02:54.152 --> 00:02:58.256
If you try to violate that the database
should error out as well if you have some

49
00:02:58.256 --> 00:03:01.743
primary key or some foreign key
constraints on the SQL database.

50
00:03:01.743 --> 00:03:04.383
And you tried to violate that on insert,
then yeah,

51
00:03:04.383 --> 00:03:07.515
you're gonna have arrows thrown
from the database for free.

52
00:03:07.515 --> 00:03:12.082
You didn't have to write that code, you
basically get that same experience, but

53
00:03:12.082 --> 00:03:17.705
on the API layer where GraphQL, so it's
quite effective, as you'll soon find out.

54
00:03:17.705 --> 00:03:20.300
So created by Facebook, long time ago.

55
00:03:20.300 --> 00:03:25.195
And since then, it's evolved into,
I would say it's pretty much a standard

56
00:03:25.195 --> 00:03:30.013
at this point when comparing it to other
types of things out there like GRPC,

57
00:03:30.013 --> 00:03:34.630
obviously, REST, and there's now TRPC,
it's definitely up there.

58
00:03:34.630 --> 00:03:40.597
It's definitely in the conversation when
it comes to what API should be built for

59
00:03:40.597 --> 00:03:41.835
something new.

60
00:03:41.835 --> 00:03:46.237
GraphQL is something that we thought about
a lot at the company that I'm building and

61
00:03:46.237 --> 00:03:49.218
how we might use it,
because of just how useful it can be.

62
00:03:49.218 --> 00:03:52.404
But now it's maintained
by a large community,

63
00:03:52.404 --> 00:03:56.468
there are like companies built,
on creating, services and

64
00:03:56.468 --> 00:04:01.345
plugins and all different types of
products, for GraphQL developers.

65
00:04:01.345 --> 00:04:04.435
So when you see that, you know
it's always a massive opportunity.

