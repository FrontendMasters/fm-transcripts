WEBVTT

1
00:00:00.180 --> 00:00:04.518
&gt;&gt; Scott Moss: One of the last things we
need to do is we just need to configure

2
00:00:04.518 --> 00:00:09.983
our global context to get the current
user if a authorization header is set.

3
00:00:09.983 --> 00:00:12.208
So it's attached to the context.

4
00:00:12.208 --> 00:00:15.988
So we can then use it in all our
resolvers, which is necessary for

5
00:00:15.988 --> 00:00:21.135
the me query, which is expecting a user on
the context object so it can return it.

6
00:00:21.135 --> 00:00:22.926
So let's do that.

7
00:00:22.926 --> 00:00:26.615
We can go to our route.ts
in the GraphQL file.

8
00:00:26.615 --> 00:00:31.165
We can go down to where we are making
a new Apollo server, I'm sorry,

9
00:00:31.165 --> 00:00:32.193
a new handler.

10
00:00:32.193 --> 00:00:36.537
And then that object that I had there,
you can pass in a context property,

11
00:00:36.537 --> 00:00:39.425
which runs a function and
returns some things.

12
00:00:39.425 --> 00:00:40.792
So let's do that.

13
00:00:40.792 --> 00:00:45.450
So in this object,
we're gonna pass a context property.

14
00:00:46.660 --> 00:00:48.580
So I run a function here.

15
00:00:48.580 --> 00:00:50.750
It's gonna be async.

16
00:00:52.520 --> 00:00:55.626
&gt;&gt; Scott Moss: And basically,
you get access to the request object here.

17
00:00:55.626 --> 00:00:59.565
Basically the whole point of this is, hey,

18
00:00:59.565 --> 00:01:04.008
this function runs before
the server executes.

19
00:01:04.008 --> 00:01:06.675
I think it runs after validation, though.

20
00:01:06.675 --> 00:01:10.504
So assuming the query
you sent is validated,

21
00:01:10.504 --> 00:01:15.051
then this runs, and
then your resolver start to run.

22
00:01:15.051 --> 00:01:17.188
So I believe this runs after validation.

23
00:01:17.188 --> 00:01:19.513
I could be wrong, but
I'm pretty sure it does.

24
00:01:19.513 --> 00:01:20.237
But either way,

25
00:01:20.237 --> 00:01:23.246
it runs before your resolvers do,
which is the most important part.

26
00:01:24.596 --> 00:01:28.823
So the whole strategy here is, use this
function, get user from token, pass

27
00:01:28.823 --> 00:01:33.521
in the request headers, the authorization
header, and then get the optional user.

28
00:01:33.521 --> 00:01:35.798
Don't enforce it,
this might be null, and that's fine.

29
00:01:35.798 --> 00:01:36.536
We don't wanna enforce it.

30
00:01:36.536 --> 00:01:41.426
If we said, cool, not user, throw error,
then no one could ever sign in or sign up,

31
00:01:41.426 --> 00:01:43.409
cuz this runs before that, right?

32
00:01:43.409 --> 00:01:46.040
So we don't wanna enforce it,
we just wanna try to get it.

33
00:01:46.040 --> 00:01:50.230
So, get, what is it called?

34
00:01:50.230 --> 00:01:57.010
GetUserFromToken, req.headers.get.

35
00:01:57.010 --> 00:02:01.580
Headers is a set, so
you have to do a get method on it.

36
00:02:01.580 --> 00:02:06.118
Get the authorization header, that's
where the client is sending the token, or

37
00:02:06.118 --> 00:02:07.969
just default to an empty string.

38
00:02:07.969 --> 00:02:13.433
And then just return an object
with the requests and

39
00:02:13.433 --> 00:02:17.382
the optional user, possible user.

40
00:02:23.510 --> 00:02:26.104
&gt;&gt; Scott Moss: So there we go.
So now our app is bulletproof,

41
00:02:26.104 --> 00:02:28.890
nobody can hack us, we're good.

42
00:02:28.890 --> 00:02:31.753
So let's try it.

43
00:02:31.753 --> 00:02:37.670
Let's go back to our Apollo server,
make sure nothing is broken.

44
00:02:38.840 --> 00:02:42.191
Looks like, nice, I'm glad we saw this.

45
00:02:42.191 --> 00:02:43.697
I've been trying to, yes.

46
00:02:43.697 --> 00:02:46.219
Okay, so look, look at this,
mutation.signup defined, and

47
00:02:46.219 --> 00:02:47.442
resolvers were not in schema.

48
00:02:47.442 --> 00:02:51.437
So that's so great that it said that,
cuz check this out.

49
00:02:51.437 --> 00:02:54.100
In my resolvers,
I called this signup, right?

50
00:02:54.100 --> 00:02:54.896
&gt;&gt; Speaker 2: Right.
&gt;&gt; Scott Moss: You probably

51
00:02:54.896 --> 00:02:56.614
already caught this,
you're probably, what is he doing?

52
00:02:56.614 --> 00:02:59.498
But in my mutation,
it's called createUser, right?

53
00:02:59.498 --> 00:03:01.365
So I gotta change one of them.

54
00:03:01.365 --> 00:03:02.409
And I like that.

55
00:03:02.409 --> 00:03:05.991
You cannot make a resolver for something
that doesn't exist in your schema, and

56
00:03:05.991 --> 00:03:08.002
it will scream at you until you do it,
right?

57
00:03:08.002 --> 00:03:10.509
So I'm gonna go change my resolver too.

58
00:03:10.509 --> 00:03:12.889
Check up above, you may already have it.

59
00:03:12.889 --> 00:03:14.974
Do I? I think. Let's see.

60
00:03:14.974 --> 00:03:15.478
&gt;&gt; Speaker 2: No.

61
00:03:15.478 --> 00:03:16.389
&gt;&gt; Scott Moss: No, yeah, I don't have it.

62
00:03:16.389 --> 00:03:20.110
Yeah, it would be kinda mutation, yep.

63
00:03:20.110 --> 00:03:22.233
So I'm gonna call this createUser.

64
00:03:22.233 --> 00:03:25.439
And I think it's like,
okay, cool, that works.

65
00:03:25.439 --> 00:03:26.517
So that's beautiful.

66
00:03:26.517 --> 00:03:30.443
I can't tell you how many times I've built
API's like, why is this not working, or

67
00:03:30.443 --> 00:03:31.121
this or that.

68
00:03:31.121 --> 00:03:35.663
And it's like, I just named it
something different or weird, or

69
00:03:35.663 --> 00:03:39.064
I've registered this
route before this route.

70
00:03:39.064 --> 00:03:41.630
So this route never ran, or
something weird like that.

71
00:03:41.630 --> 00:03:45.523
You'll have any of those
problems with GraphQL.

72
00:03:45.523 --> 00:03:49.880
The order in which your resolvers run
are dependent on the query that is sent.

73
00:03:49.880 --> 00:03:51.317
You have no control.

74
00:03:51.317 --> 00:03:56.350
The GraphQL resolvers have no control or
idea on how the order of the resolvers

75
00:03:56.350 --> 00:04:01.551
are going to run, because the resolvers
respond to the query that is coming in.

76
00:04:03.201 --> 00:04:06.667
So anyway, let's sign up.

77
00:04:06.667 --> 00:04:11.031
So if you got your database credentials,
you got all that stuff, good to go.

78
00:04:11.031 --> 00:04:14.167
You pushed your database scheme up
when we first started to Turso,

79
00:04:14.167 --> 00:04:15.857
you should be able to create a user.

80
00:04:15.857 --> 00:04:17.905
So let's create a user.

81
00:04:17.905 --> 00:04:19.106
I'm going to say, cool.

82
00:04:19.106 --> 00:04:21.055
I need at least the token here,
I need the ID.

83
00:04:21.055 --> 00:04:22.386
Let me get the email.

84
00:04:22.386 --> 00:04:26.900
For my inputs,
I'm gonna do email and password.

85
00:04:26.900 --> 00:04:29.456
Let me get rid of this
old one that I have here.

86
00:04:29.456 --> 00:04:31.046
So let's give it a email.

87
00:04:33.015 --> 00:04:38.361
&gt;&gt; Scott Moss: I'm gonna say,
darryl@app.com, and

88
00:04:38.361 --> 00:04:44.174
the password is bigcat, cuz he's a bigcat.

89
00:04:45.284 --> 00:04:47.498
And let's run this.

90
00:04:50.310 --> 00:04:54.384
&gt;&gt; Scott Moss: Boom, so you can see
right here, I was able to create a user.

91
00:04:54.384 --> 00:04:59.737
Here's my adjacent web token,
here's my id, here's my email.

92
00:05:03.860 --> 00:05:07.917
&gt;&gt; Scott Moss: If I try to do this again,
given the database constraints,

93
00:05:07.917 --> 00:05:10.604
I'm going to most likely get an error.

94
00:05:10.604 --> 00:05:12.870
There we go, I tried to run this again.

95
00:05:12.870 --> 00:05:16.173
Like I said, GraphQL does
a try-catch over your whole app.

96
00:05:16.173 --> 00:05:20.736
So the server didn't break, but
GraphQL caught the error and said, hey,

97
00:05:20.736 --> 00:05:22.774
this is the error that we caught.

98
00:05:22.774 --> 00:05:24.770
We're just gonna just throw
it to you real quick.

99
00:05:24.770 --> 00:05:27.034
So this is coming straight
from the database, right?

100
00:05:27.034 --> 00:05:30.294
I could catch this error and
do something with it, but by default,

101
00:05:30.294 --> 00:05:31.877
your server is still good to go.

102
00:05:31.877 --> 00:05:35.978
And what's even crazier, this might blow
your mind if you built a lot of APIs.

103
00:05:35.978 --> 00:05:39.375
It still gave me a 200 even
though it errored out.

104
00:05:39.375 --> 00:05:41.892
Right, because GraphQL always does a 200.

105
00:05:41.892 --> 00:05:45.418
Even if there's an error, there's always
a post request, it's always a 200.

106
00:05:45.418 --> 00:05:47.871
Doesn't matter if there's an error or
not, because it doesn't care,

107
00:05:47.871 --> 00:05:49.046
it doesn't need to.

108
00:05:49.046 --> 00:05:51.744
It would rather just tell
you what the error is in

109
00:05:51.744 --> 00:05:53.708
the payload than the status code.

110
00:05:53.708 --> 00:05:57.741
Which, to be fair, if you really think
about how you build applications,

111
00:05:57.741 --> 00:05:59.348
status codes are important.

112
00:05:59.348 --> 00:06:02.834
But if you're building a really
sophisticated application,

113
00:06:02.834 --> 00:06:06.058
you're also sending back some
context about the error and

114
00:06:06.058 --> 00:06:10.210
the payload itself to your client,
and you're using that as well.

115
00:06:10.210 --> 00:06:14.392
So mostly status codes are for
machines or other applications like

116
00:06:14.392 --> 00:06:19.032
browsers where they actually log
different things in different colors.

117
00:06:19.032 --> 00:06:22.528
They know what to put a red X
next to on the network tab and

118
00:06:22.528 --> 00:06:25.731
things like that,
depending on the status code.

119
00:06:25.731 --> 00:06:29.628
But if your app is consuming the response
and you needed more control of the error,

120
00:06:29.628 --> 00:06:32.907
you're most likely gonna get to
the point where you're sending back

121
00:06:32.907 --> 00:06:34.846
context about the error in the payload.

122
00:06:34.846 --> 00:06:39.238
Anyway, GraphQL just takes that to the
next step and say, forget status codes,

123
00:06:39.238 --> 00:06:40.797
your error is gonna be here.

124
00:06:44.672 --> 00:06:46.510
&gt;&gt; Scott Moss: Cool, so we got that.

125
00:06:46.510 --> 00:06:47.659
Let's try signin.

126
00:06:47.659 --> 00:06:49.780
So now I'm gonna try signin.

127
00:06:49.780 --> 00:06:55.855
I'm just going to remove that,
go back to my mutation.

128
00:06:55.855 --> 00:06:58.173
I'm gonna click signin.

129
00:06:58.173 --> 00:07:01.669
I'm gonna get the same thing,
give me the token, give me the ID.

130
00:07:01.669 --> 00:07:07.103
The inputs should exactly be the same,
except for it renamed them for me.

131
00:07:07.103 --> 00:07:10.523
Let's see, it renamed it to signinInput2,
has already had an input down there.

132
00:07:10.523 --> 00:07:13.025
So I'm gonna rename it back myself.

133
00:07:13.025 --> 00:07:14.333
Well, I'm just gonna get rid of it,
actually.

134
00:07:14.333 --> 00:07:15.862
So let's get rid of the second one.

135
00:07:20.388 --> 00:07:22.945
&gt;&gt; Scott Moss: There we go,
and then name this to input.

136
00:07:25.567 --> 00:07:26.939
&gt;&gt; Scott Moss: There we go.

137
00:07:26.939 --> 00:07:30.323
So now I'm gonna try to sign in
with the same email and password,

138
00:07:30.323 --> 00:07:34.349
and I should get back the same thing I got
on sign up, which is a token and a ID.

139
00:07:34.349 --> 00:07:37.756
And then just to be sure,
give me the email as well.

140
00:07:37.756 --> 00:07:39.692
So I'll try to sign in, there we go.

141
00:07:39.692 --> 00:07:41.219
Now we signed in.

142
00:07:41.219 --> 00:07:44.435
We have the token, the ID,
and things like that.

143
00:07:44.435 --> 00:07:47.800
So once you get to this point going
forward, because every query and

144
00:07:47.800 --> 00:07:51.839
mutation we make from here on out is
gonna require a user to be signed in.

145
00:07:51.839 --> 00:07:56.395
You will no longer be able to use this app
to interact with your GraphQL API unless

146
00:07:56.395 --> 00:07:58.035
you supply a JSON Web Token.

147
00:07:58.035 --> 00:08:00.111
So I highly recommend
that you create a user,

148
00:08:00.111 --> 00:08:01.923
just take the JSON Web Token like this.

149
00:08:02.963 --> 00:08:04.873
I'm just gonna copy it.

150
00:08:04.873 --> 00:08:07.123
If you go down here to Headers,
you click on Headers.

151
00:08:08.823 --> 00:08:09.965
You can make a New Header.

152
00:08:11.968 --> 00:08:14.643
&gt;&gt; Scott Moss: Click on Header Key,
click Authorization.

153
00:08:14.643 --> 00:08:21.483
For value, put the word bearer,
space, your token.

154
00:08:21.483 --> 00:08:23.737
And now that's always gonna be there.

155
00:08:23.737 --> 00:08:27.732
So now every GraphQL request
you make is gonna be this user.

156
00:08:27.732 --> 00:08:32.326
So this is necessary because we will be
locking down every single mutation and

157
00:08:32.326 --> 00:08:33.677
query going forward.

158
00:08:35.224 --> 00:08:36.886
So now we're able to do that,

159
00:08:36.886 --> 00:08:40.819
let's actually check out the application
to make sure we can sign in.

160
00:08:40.819 --> 00:08:41.534
So let's do that.

161
00:08:41.534 --> 00:08:46.855
So I'm gonna open up a new tab,
go to localhost 3000.

162
00:08:51.159 --> 00:08:55.609
&gt;&gt; Scott Moss: Might already be signed
in yet cuz I already have a bunch

163
00:08:55.609 --> 00:09:00.073
of stuff in my database and
I have a JSON Web Token here.

164
00:09:00.073 --> 00:09:01.760
Let me delete my JSON Web Token.

165
00:09:05.296 --> 00:09:05.827
&gt;&gt; Scott Moss: Where's that?

166
00:09:05.827 --> 00:09:07.634
There it is.

167
00:09:07.634 --> 00:09:11.293
Delete that, and refresh the page.

168
00:09:11.293 --> 00:09:14.771
Should kick me to sign in, there it is.

169
00:09:14.771 --> 00:09:17.156
Let this go away, there we go.

170
00:09:17.156 --> 00:09:21.331
So now I'm going to try to sign in with

171
00:09:21.331 --> 00:09:26.182
the same credentials that I had over here,

172
00:09:26.182 --> 00:09:30.265
which was,
&gt;&gt; Scott Moss: For me,

173
00:09:30.265 --> 00:09:33.486
it was Darryl app and my bigcat password.

174
00:09:33.486 --> 00:09:38.890
So I'm just gonna copy that,
go back to it, see if I can sign in.

175
00:09:38.890 --> 00:09:44.579
I think this should work
as far as signing in.

176
00:09:44.579 --> 00:09:46.496
And yeah, there we go.

177
00:09:46.496 --> 00:09:49.169
So this error is because we haven't
made the query to get the issues,

178
00:09:49.169 --> 00:09:51.949
we're gonna make that next, but
I'm able to sign in and get to the app.

179
00:09:51.949 --> 00:09:56.301
So you should be at this point
where you can sign in to the app.

180
00:09:56.301 --> 00:10:00.844
If assuming you created a user in
the Apollo server, if you did not create

181
00:10:00.844 --> 00:10:05.631
a user in Apollo server, you need to
go to /signup and do that here, right?

182
00:10:05.631 --> 00:10:10.424
So just to show you that,
if I go to /signup,

183
00:10:10.424 --> 00:10:17.247
I can sign up here with
anything.email.com, or anything@.

184
00:10:20.632 --> 00:10:21.927
&gt;&gt; Scott Moss: Email.com.

185
00:10:21.927 --> 00:10:26.736
And then whatever password I want,
and I should be able to Signup.

186
00:10:26.736 --> 00:10:27.718
And that works too.

187
00:10:27.718 --> 00:10:31.066
The last thing we wanna check is just
to make sure that the me query works.

188
00:10:31.066 --> 00:10:36.320
So I'm gonna go back to the Apollo server,
get rid of all of this.

189
00:10:36.320 --> 00:10:38.859
This only works if you
add that header here.

190
00:10:38.859 --> 00:10:42.322
You have to add that header here cuz
it won't know who me is if you're not

191
00:10:42.322 --> 00:10:42.915
signed in.

192
00:10:45.185 --> 00:10:49.431
&gt;&gt; Scott Moss: So I'm gonna say, give me
a query, give me me, give me an email,

193
00:10:49.431 --> 00:10:50.559
run that.

194
00:10:50.559 --> 00:10:52.752
There you go, that's me, I'm Darryl.

195
00:10:59.150 --> 00:11:01.172
&gt;&gt; Scott Moss: Cool,
any questions on this stuff?

196
00:11:04.582 --> 00:11:09.516
&gt;&gt; Scott Moss: Okay, cool, so what we'll
do next is, we're gonna get to the point

197
00:11:09.516 --> 00:11:14.297
where we can create the issues,
get the issues, edit the issues.

198
00:11:14.297 --> 00:11:16.806
And if you have time,
we will delete the issue.

199
00:11:16.806 --> 00:11:20.749
So full crud, and as far as UI goes,
that's this button.

200
00:11:20.749 --> 00:11:24.836
So I click this button, I type something
in here, type something in here.

201
00:11:24.836 --> 00:11:27.982
I want it to actually work and create.

202
00:11:27.982 --> 00:11:31.107
Right now it's not cuz
it's not even hooked up.

203
00:11:31.107 --> 00:11:34.137
So we need to do something there.

204
00:11:34.137 --> 00:11:36.243
So that's what we're gonna do next.

