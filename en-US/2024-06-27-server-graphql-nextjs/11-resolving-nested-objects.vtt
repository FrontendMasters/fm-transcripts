WEBVTT

1
00:00:00.000 --> 00:00:02.780
&gt;&gt; Scott Moss: Resolving interfaces
is literally the same thing,

2
00:00:02.780 --> 00:00:06.517
as resolving unions, there really
isn't any different thing here.

3
00:00:06.517 --> 00:00:11.272
You do a resolve type in this case
the interface and you do a if check on

4
00:00:11.272 --> 00:00:16.038
the object to see which one it is,
and then you return the name of it.

5
00:00:16.038 --> 00:00:18.932
It's pretty much the same thing,
it's no different.

6
00:00:18.932 --> 00:00:21.234
Resolving nest objects.

7
00:00:21.234 --> 00:00:24.833
I think we kind of already walked
through that with the person.

8
00:00:24.833 --> 00:00:25.512
Did we do that?

9
00:00:25.512 --> 00:00:27.571
No, I guess I didn't do that.

10
00:00:27.571 --> 00:00:28.654
I did like a field level.

11
00:00:28.654 --> 00:00:29.688
So let's talk about nested objects.

12
00:00:29.688 --> 00:00:33.491
So with nested objects,
we can go back to our schema, and

13
00:00:33.491 --> 00:00:38.260
then we can say like a person has pets,
which are type animal like this.

14
00:00:38.260 --> 00:00:41.823
So this will be a nested object.

15
00:00:41.823 --> 00:00:44.344
So now if I search for people,
I can get the pets from them.

16
00:00:44.344 --> 00:00:45.659
So what I could do is,

17
00:00:45.659 --> 00:00:49.764
let's say a really classic example
would be something like this.

18
00:00:49.764 --> 00:00:55.605
So for a person, or where is it at?

19
00:00:55.605 --> 00:00:58.919
Here we go for people, so
let's say people have pets, right?

20
00:00:58.919 --> 00:01:04.657
So in this case I I'll return for
pets, an array of IDs, right?

21
00:01:04.657 --> 00:01:08.631
I'll have pet ID 1, pet ID 2, pet ID 3.

22
00:01:08.631 --> 00:01:10.044
I have three pets here with their IDs.

23
00:01:10.044 --> 00:01:12.818
This wouldn't satisfy
the request if I asked for

24
00:01:12.818 --> 00:01:16.075
pets right now, right,
because pets are a object type.

25
00:01:16.075 --> 00:01:20.798
So if I said give me people.

26
00:01:22.394 --> 00:01:24.193
&gt;&gt; Scott Moss: And I want the name,
and I want my pets,

27
00:01:24.193 --> 00:01:26.002
and then inside of pets I want the name.

28
00:01:26.002 --> 00:01:26.942
Try to run this.

29
00:01:28.076 --> 00:01:30.887
&gt;&gt; Scott Moss: It's gonna say,
I could not get animal.name.

30
00:01:30.887 --> 00:01:34.525
It's a non nullable field and you just
return an array of IDs or numbers,

31
00:01:34.525 --> 00:01:36.265
I don't know what to do with this.

32
00:01:36.265 --> 00:01:38.390
So how can I solve this?

33
00:01:38.390 --> 00:01:41.607
Well, I guess you could in here in
your database query to this person,

34
00:01:41.607 --> 00:01:44.509
you could say, hey, join the table,
give me all the pets too.

35
00:01:44.509 --> 00:01:46.813
But if you did that,
you'd be doing that for

36
00:01:46.813 --> 00:01:50.879
every single query that someone sends
up regardless they ask for pets or not.

37
00:01:50.879 --> 00:01:54.672
Maybe you should only be joining the table
if they ask for the pets, right?

38
00:01:54.672 --> 00:01:58.972
So if I went in here and was like, yeah,
always send back the pet objects for

39
00:01:58.972 --> 00:02:00.630
this user, no matter what.

40
00:02:00.630 --> 00:02:04.387
What if my query did not have pets?

41
00:02:04.387 --> 00:02:06.829
Your database query is
still getting the pets.

42
00:02:06.829 --> 00:02:10.530
That's kind of wasteful and redundant and
defeats the purpose of GraphQL.

43
00:02:10.530 --> 00:02:16.855
So what you wanna do is only query
the pets when the query asks for the pets.

44
00:02:16.855 --> 00:02:17.581
Let me repeat that.

45
00:02:17.581 --> 00:02:22.593
Only query the database for your pets when
the GraphQL query is asking for the pets.

46
00:02:22.593 --> 00:02:24.504
So how do you do that?

47
00:02:24.504 --> 00:02:25.259
It's quite simple.

48
00:02:25.259 --> 00:02:28.301
You let GraphQL handle it and
you make a resolver for it.

49
00:02:28.301 --> 00:02:29.602
If you make a resolver for it,

50
00:02:29.602 --> 00:02:32.162
GraphQL will use that resolver
when someone asked for it.

51
00:02:32.162 --> 00:02:32.941
It's that simple.

52
00:02:32.941 --> 00:02:37.234
There is no resolver for
pets on a person, so it didn't use it,

53
00:02:37.234 --> 00:02:41.534
it just took what you gave it,
in this case an array of numbers.

54
00:02:41.534 --> 00:02:47.997
But if we go to our person which is what
is returned from the people query and

55
00:02:47.997 --> 00:02:53.211
and I say pets here and
I make a function and because its gonna

56
00:02:53.211 --> 00:03:00.429
have a parent here which is actually gonna
be a person, so am gonna call it person.

57
00:03:00.429 --> 00:03:04.913
In a real life scenario, I would
loop over these person.pets IDs and

58
00:03:04.913 --> 00:03:09.643
go to the database and say, give me
all the animals with this id, right?

59
00:03:09.643 --> 00:03:12.588
So I'm just gonna imitate that and

60
00:03:12.588 --> 00:03:18.183
return an object of animals which
have species and name, right?

61
00:03:18.183 --> 00:03:23.947
So I'll just say dpecies
&gt;&gt; Scott Moss: Cat and

62
00:03:23.947 --> 00:03:27.667
then there are and just to be super clear,

63
00:03:27.667 --> 00:03:33.314
I'll just return one Id even
though that's not gonna matter.

64
00:03:33.314 --> 00:03:35.532
So in this case I'm saying cool.

65
00:03:35.532 --> 00:03:37.729
I know that when I run this query so

66
00:03:37.729 --> 00:03:42.767
I'm just gonna return the pet IDs cuz I
have them on the table already maybe.

67
00:03:42.767 --> 00:03:46.649
But I don't wanna join the table unless
someone actually asks for the pets.

68
00:03:46.649 --> 00:03:50.563
And if they do ask for the pets,
GraphQL will then run person.pets,

69
00:03:50.563 --> 00:03:54.344
which will get the current person
that was previously resolved and

70
00:03:54.344 --> 00:03:56.865
go to the database and
get the pets for them.

71
00:03:56.865 --> 00:04:00.026
And if I return many people,
then this will be called for

72
00:04:00.026 --> 00:04:02.737
each one of those persons singularly,
right?

73
00:04:02.737 --> 00:04:09.284
So now if I run this,
I should be able to get the pet's name.

74
00:04:09.284 --> 00:04:12.982
You could probably see this is very
powerful and it's way different than any

75
00:04:12.982 --> 00:04:16.295
of the server architecture API,
that you've might have built it.

76
00:04:16.295 --> 00:04:18.486
It's just a different way of thinking.

77
00:04:18.486 --> 00:04:21.217
You actually have to think as a graph.

78
00:04:21.217 --> 00:04:27.190
Looking back when I started learning
GraphQL, like 2015, 2016 maybe,

79
00:04:27.190 --> 00:04:32.394
the thing that really confused me was
this nature of what is the parent?

80
00:04:32.394 --> 00:04:34.303
How do I know when there's a parent?

81
00:04:34.303 --> 00:04:37.875
If you are making a resolver for
a object type,

82
00:04:37.875 --> 00:04:43.005
there's always gonna be a parent here,
because you're only this

83
00:04:43.005 --> 00:04:48.797
is only ever gonna get called when
the object type is trying to be resolved.

84
00:04:48.797 --> 00:04:53.299
So there probably is always going to be a
parent here if you're resolving for object

85
00:04:53.299 --> 00:04:57.801
type, there almost is never going to be a
parent when you're resolving from a query

86
00:04:57.801 --> 00:05:02.466
type or a mutation type because they're on
the route, nothing happens before them.

87
00:05:02.466 --> 00:05:06.628
That's the entry into, this is the only
way you can interact with your GraphQL API

88
00:05:06.628 --> 00:05:08.873
is by calling a query or
calling a mutation.

89
00:05:08.873 --> 00:05:11.892
You can't just go to the GraphQL API and
like, give me person.

90
00:05:11.892 --> 00:05:12.731
It doesn't work that way.

91
00:05:12.731 --> 00:05:14.671
You have to add that to a query somewhere.

92
00:05:14.671 --> 00:05:17.202
So therefore,
this is the first thing to run.

93
00:05:17.202 --> 00:05:18.901
So there is no parent here.

94
00:05:18.901 --> 00:05:24.372
But if an object type resolvers are
running, that means, somewhere earlier,

95
00:05:24.372 --> 00:05:29.780
maybe from a query, maybe from a mutation,
a person is being returned somewhere.

96
00:05:29.780 --> 00:05:31.386
And now, because I have these fields,

97
00:05:31.386 --> 00:05:33.686
it's resolving the individual
fields of that person.

98
00:05:33.686 --> 00:05:37.874
So therefore, there is an object above it,
which is a parent.

99
00:05:37.874 --> 00:05:41.555
&gt;&gt; Speaker 2: Does the order of
the arguments in the resolver matter, for

100
00:05:41.555 --> 00:05:45.160
example, does the person have
to come before the pets, so

101
00:05:45.160 --> 00:05:47.529
that it can resolve the person first.

102
00:05:47.529 --> 00:05:51.536
&gt;&gt; Scott Moss: No, the order in which you
make the resolvers in this object does not

103
00:05:51.536 --> 00:05:52.109
matter.

104
00:05:52.109 --> 00:05:55.621
And in fact, in Javascript, order inside
of objects cannot be maintained or

105
00:05:55.621 --> 00:05:56.275
guaranteed.

106
00:05:56.275 --> 00:05:58.588
There is no such thing
as order in the object.

107
00:05:58.588 --> 00:06:01.376
JavaScript does a really good job of,
if you were to log this object out,

108
00:06:01.376 --> 00:06:03.132
it'll log at the same
order that you made it.

109
00:06:03.132 --> 00:06:05.587
But order inside of
an object is not guaranteed.

110
00:06:05.587 --> 00:06:06.996
That's the point of an array.

111
00:06:06.996 --> 00:06:10.493
So where you write this does not matter.

112
00:06:10.493 --> 00:06:12.047
It's all about the name.

113
00:06:12.047 --> 00:06:14.694
This name matches with this name.

114
00:06:14.694 --> 00:06:18.145
This name matches with this name.

115
00:06:18.145 --> 00:06:19.596
That is the only thing that matters.

