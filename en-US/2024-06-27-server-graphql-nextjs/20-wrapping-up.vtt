WEBVTT

1
00:00:00.025 --> 00:00:02.545
&gt;&gt; Scott Moss: Some of the things I want
to talk about is just like what you can do

2
00:00:02.545 --> 00:00:03.220
going forward.

3
00:00:03.220 --> 00:00:06.730
First, figure out what layer you
want to install GraphQL, right?

4
00:00:06.730 --> 00:00:11.564
So far, I'm gonna show you how
to embed GraphQL into Azure API.

5
00:00:11.564 --> 00:00:16.108
But GraphQL can be installed in many
different places, it can sit in between

6
00:00:16.108 --> 00:00:20.381
your client and your API, it can sit
on your API, it can sit on the edge.

7
00:00:20.381 --> 00:00:23.776
So you can run GraphQL
on the edge on a CDN.

8
00:00:23.776 --> 00:00:25.941
There's so
many layers on where you can put GraphQL.

9
00:00:25.941 --> 00:00:30.679
So if you are in the boat of yeah, we were
thinking about GraphQL, but having to do

10
00:00:30.679 --> 00:00:35.951
a complete refactor of our entire backend
sounds crazy, but we wanna use GraphQL.

11
00:00:35.951 --> 00:00:39.110
Okay, make a server,
pick whatever language you want and

12
00:00:39.110 --> 00:00:40.666
put GraphQL on that server.

13
00:00:40.666 --> 00:00:43.633
And have that sit in front
of your actual backend and

14
00:00:43.633 --> 00:00:48.592
your client talks to that GraphQL layer
and it treats it as like a API gateway.

15
00:00:48.592 --> 00:00:50.742
So that'd be like GraphQL
as an API Gateway.

16
00:00:50.742 --> 00:00:52.641
It's a great use case for
using it on the edge or

17
00:00:52.641 --> 00:00:55.452
somewhere like that where it's
hosted in multiple regions.

18
00:00:55.452 --> 00:00:59.542
That way you never have to configure
your backend at all and really what

19
00:00:59.542 --> 00:01:04.117
your resolvers will look like, instead
of talking directly to the database,

20
00:01:04.117 --> 00:01:08.029
your resolvers would make an HTTP
request to your server, right?

21
00:01:08.029 --> 00:01:11.450
That's what the data source would be, it'd
be an HTTP request to your actual server

22
00:01:11.450 --> 00:01:15.099
that isn't using GraphQL, but the GraphQL
is the one that's resolving it.

23
00:01:15.099 --> 00:01:17.589
So that's how you could do that.

24
00:01:17.589 --> 00:01:21.494
So yeah, figure out what you wanna do,
where you wanna install it, and

25
00:01:21.494 --> 00:01:24.763
then I would say,
figure out what framework you wanna use.

26
00:01:24.763 --> 00:01:27.613
We've been using Apollo,
this was really cool.

27
00:01:27.613 --> 00:01:29.623
This is probably my favorite one.

28
00:01:29.623 --> 00:01:32.583
So I would recommend
checking this one out.

29
00:01:32.583 --> 00:01:34.153
I mean, it's all mostly the same.

30
00:01:34.153 --> 00:01:36.584
You give it a schema,
you give it some resolvers, but

31
00:01:36.584 --> 00:01:40.323
I've always had better luck with the
SWIFT, their API's, it's a lot cleaner.

32
00:01:40.323 --> 00:01:43.038
So highly recommend checking that out.

33
00:01:43.038 --> 00:01:46.041
It's part of what's called the guild,

34
00:01:46.041 --> 00:01:51.264
it's either built by Apollo or
some folks that used to work at Apollo.

35
00:01:51.264 --> 00:01:59.659
But it's like an organization who
is just building cool shit for

36
00:01:59.659 --> 00:02:05.109
GraphQL is the best way I can describe it.

37
00:02:05.109 --> 00:02:08.245
So they have all different types
of things that they built in here,

38
00:02:08.245 --> 00:02:11.279
each one of these modules,
it has something to do with GraphQL.

39
00:02:11.279 --> 00:02:14.875
So for instance, server side events, which
if you don't know, is a way you can send

40
00:02:14.875 --> 00:02:18.269
a message from the server to a client,
kinda like WebSockets, but just.

41
00:02:18.269 --> 00:02:23.074
Or it's like HTTP, but inverse,
you're sending a request to the client.

42
00:02:23.074 --> 00:02:24.224
They have WebSockets.

43
00:02:24.224 --> 00:02:27.194
They have all different types of things.

44
00:02:27.194 --> 00:02:30.124
They got custom scalars,
you can do all different types of stuff.

45
00:02:30.124 --> 00:02:31.858
So highly recommend checking them out,

46
00:02:31.858 --> 00:02:35.464
if anybody's doing anything in
GraphQL it's gonna be these folks.

47
00:02:35.464 --> 00:02:36.774
So give that a look.

48
00:02:36.774 --> 00:02:41.541
Some other things you want to check
out are gonna be GraphQL Federation.

49
00:02:43.654 --> 00:02:46.703
&gt;&gt; Scott Moss: So GraphQL Federation, the
name has changed over and over and over.

50
00:02:46.703 --> 00:02:48.643
It used to be called schema stitching.

51
00:02:48.643 --> 00:02:54.033
It used to be called so many things,
but basically here's a good diagram.

52
00:02:54.033 --> 00:02:57.168
Imagine if you had many services,
whether you made them or not, but

53
00:02:57.168 --> 00:02:58.218
they all use GraphQL.

54
00:02:58.218 --> 00:03:02.381
You can have one GraphQL schema that
stitches them all together, and

55
00:03:02.381 --> 00:03:05.683
you can delegate which fields
resolve to what schema,

56
00:03:05.683 --> 00:03:09.513
whether that schema is remote or
local, it'll resolve to it.

57
00:03:09.513 --> 00:03:11.361
And that way your client
only has to talk to one.

58
00:03:11.361 --> 00:03:15.100
So it's really great for
intercommunication with microservices if

59
00:03:15.100 --> 00:03:20.081
they all had GraphQL, which is the exact
line that they talk about right here.

60
00:03:20.081 --> 00:03:23.445
So this is how you would do it
without GraphQL, you have your client,

61
00:03:23.445 --> 00:03:24.436
gotta talk to this.

62
00:03:24.436 --> 00:03:25.476
It also has to talk to this.

63
00:03:25.476 --> 00:03:31.576
It also has to talk to this, with GraphQL
Federation, you move more into this.

64
00:03:31.576 --> 00:03:35.189
The client just talks to this one thing
and this aggregates all of this data,

65
00:03:35.189 --> 00:03:38.026
and the communication
layer here is all GraphQL.

66
00:03:38.026 --> 00:03:39.986
So I reccomend checking that out.

67
00:03:39.986 --> 00:03:44.438
I guess they call it a supergraph now and
schema federation and

68
00:03:44.438 --> 00:03:48.281
things like that, or
a subgraph, I should say.

69
00:03:48.281 --> 00:03:50.309
Wait, no, there's a supergraph and
a subgraph,

70
00:03:50.309 --> 00:03:51.857
I can't keep up with these terms.

71
00:03:51.857 --> 00:03:55.247
So I recommend checking that out,
it's actually quite powerful.

72
00:03:55.247 --> 00:03:59.184
A lot of developer facing products now
offer GraphQL schemas publicly and

73
00:03:59.184 --> 00:04:01.687
there's just more and more being added.

74
00:04:01.687 --> 00:04:05.072
Like GitHub has a GraphQL API, that's
the only one that I use because it's so

75
00:04:05.072 --> 00:04:06.107
much better.

76
00:04:06.107 --> 00:04:07.547
You can even go explore it, right?

77
00:04:07.547 --> 00:04:12.057
So from the GitHub GraphQL API,
I'm pretty sure they have an explorer tool

78
00:04:12.057 --> 00:04:15.387
similar to the one that we just saw,
here it is.

79
00:04:15.387 --> 00:04:16.697
You can explore the GitHub API.

80
00:04:16.697 --> 00:04:17.857
You just gotta sign in and

81
00:04:17.857 --> 00:04:20.684
you can do all the things here
the way that we've been doing.

82
00:04:20.684 --> 00:04:23.814
It looks a little different,
but it's the same thing.

83
00:04:23.814 --> 00:04:27.624
So highly recommend checking
out Federation stuff.

84
00:04:27.624 --> 00:04:30.773
And lastly, I recommend diving into, and

85
00:04:30.773 --> 00:04:36.564
maybe I'll create a course in this in
the future, but more production stuff.

86
00:04:36.564 --> 00:04:40.953
There are a lot of things that you
really need to think about when going to

87
00:04:40.953 --> 00:04:43.896
production with GraphQL
around like caching.

88
00:04:43.896 --> 00:04:47.687
Because if everything's a post request and
the URL is entirely the same,

89
00:04:47.687 --> 00:04:52.044
that kinda breaks the traditional caching
on the network layer that we're used to.

90
00:04:52.044 --> 00:04:56.113
If you think of like network layer
caching, it's typically like a combination

91
00:04:56.113 --> 00:04:59.344
of this URL plus this verb, and
it's typically GET requests.

92
00:04:59.344 --> 00:05:00.742
You don't typically cache POST requests.

93
00:05:00.742 --> 00:05:05.472
That breaks, everything's the same URL,
everything's the same verb.

94
00:05:05.472 --> 00:05:07.882
So how do you create a key?

95
00:05:07.882 --> 00:05:10.292
What is the cache digest key?

96
00:05:10.292 --> 00:05:11.282
How do you compose that?

97
00:05:11.282 --> 00:05:14.612
Is that created from
the content of the query?

98
00:05:14.612 --> 00:05:16.542
How do you create a unique key,
and things like that?

99
00:05:16.542 --> 00:05:18.332
There are different tools out there.

100
00:05:18.332 --> 00:05:22.869
There's paid products, so figure out
caching on the network layer, but

101
00:05:22.869 --> 00:05:25.362
also caching on the execution layer.

102
00:05:25.362 --> 00:05:29.028
Are you using Redis when you
make these resolver calls,

103
00:05:29.028 --> 00:05:34.182
are you using something like data loader
per request, indexing strategies.

104
00:05:34.182 --> 00:05:35.417
It really changes a lot, so

105
00:05:35.417 --> 00:05:38.302
what I just showed you is how
you build an application.

106
00:05:38.302 --> 00:05:42.529
But deploying it with a bunch of users and
data, there's a lot that goes into it,

107
00:05:42.529 --> 00:05:44.597
that are as quite different than rest.

108
00:05:44.597 --> 00:05:46.797
So I recommend checking
some of that stuff out.

109
00:05:46.797 --> 00:05:49.243
But if you haven't checked out
the client side GraphQL course,

110
00:05:49.243 --> 00:05:50.157
please check that out.

111
00:05:50.157 --> 00:05:54.057
It works on the same app, but builds
the client side that makes these queries.

112
00:05:54.057 --> 00:05:57.677
They kinda go hand in hand if you
wanna see the complete picture.

113
00:05:57.677 --> 00:05:59.900
So, yeah, other than that,
thanks for coming.

114
00:05:59.900 --> 00:06:00.948
&gt;&gt; Speaker 2: All right, here.

115
00:06:00.948 --> 00:06:04.962
[APPLAUSE]

