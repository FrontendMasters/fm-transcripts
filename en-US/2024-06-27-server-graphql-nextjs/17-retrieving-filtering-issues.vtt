WEBVTT

1
00:00:00.260 --> 00:00:01.680
&gt;&gt; Speaker 1: All right,
let's keep it moving.

2
00:00:01.680 --> 00:00:05.150
Let's work on getting the issues so
we can see them on the page.

3
00:00:05.150 --> 00:00:10.400
This one, queries are usually
simpler than mutations.

4
00:00:10.400 --> 00:00:17.268
So for the issues a couple things, we
need to make an IssuesFilter type input.

5
00:00:17.268 --> 00:00:20.424
This is gonna allow us to filter
issues by status codes and

6
00:00:20.424 --> 00:00:22.632
then we need to make a query for issues.

7
00:00:22.632 --> 00:00:25.699
And then, obviously we need
to make the resolvers, but

8
00:00:25.699 --> 00:00:27.622
we need to make a couple here.

9
00:00:27.622 --> 00:00:30.107
We need to make one that
gets all the issues, and

10
00:00:30.107 --> 00:00:31.973
it's gonna be quite complicated,

11
00:00:31.973 --> 00:00:35.842
because it can take in an array of issue
statuses on which it can filter on.

12
00:00:35.842 --> 00:00:38.962
So the database query gets kind of nuts.

13
00:00:38.962 --> 00:00:42.997
And then we need to make
a issues query on the user type.

14
00:00:42.997 --> 00:00:47.238
So that way we can get the issues for a
user the same way we can get the user for

15
00:00:47.238 --> 00:00:48.097
an issue.

16
00:00:48.097 --> 00:00:50.237
So it's a one to many relationship.

17
00:00:50.237 --> 00:00:53.277
A user can have many issues, but
one issue can have one user.

18
00:00:53.277 --> 00:00:56.317
So we have to be able to resolve issues.

19
00:00:56.317 --> 00:00:58.177
We don't have to, but we are.

20
00:00:58.177 --> 00:01:02.097
We're gonna allow you to resolve
the issues on a user because if you

21
00:01:02.097 --> 00:01:05.045
look at our database,
it supports that, right?

22
00:01:05.045 --> 00:01:09.301
If we go to our database here,
but I'm in the wrong, okay,

23
00:01:09.301 --> 00:01:11.698
sorry, that was the wrong file.

24
00:01:11.698 --> 00:01:12.895
There we go.

25
00:01:12.895 --> 00:01:19.822
If we look at our database here,
you can see A user has many issues.

26
00:01:19.822 --> 00:01:22.462
So we want to be able to
support that with GraphQL.

27
00:01:22.462 --> 00:01:25.272
So we're going to fix our schema for that.

28
00:01:25.272 --> 00:01:26.502
So let's go to our schema.

29
00:01:28.232 --> 00:01:32.648
And the first thing I'm gonna
do is go to our user and

30
00:01:32.648 --> 00:01:37.588
I'm gonna add a issues field here of type,
issue non no.

31
00:01:45.819 --> 00:01:50.395
And then we make a new type here,
call it issue.

32
00:01:50.395 --> 00:01:54.365
It's gonna have an ID created or
I'm sorry,

33
00:01:54.365 --> 00:01:58.343
we're gonna have to issue, I'm tripping.

34
00:01:58.343 --> 00:02:02.714
We need to add the query for issue.

35
00:02:04.664 --> 00:02:07.186
&gt;&gt; Speaker 1: And here is where
it's going to take in an input.

36
00:02:07.186 --> 00:02:13.076
That input is gonna be
the IssueFilterInput.

37
00:02:13.076 --> 00:02:15.259
So let's do that, IssuesFilterInput.

38
00:02:17.457 --> 00:02:22.122
Input is IssuesFilterInput like this.

39
00:02:23.322 --> 00:02:27.825
And it's gonna take statuses,

40
00:02:27.825 --> 00:02:34.412
which is an array of IssueStatus,
like that.

41
00:02:34.412 --> 00:02:36.082
And it can be null.

42
00:02:36.082 --> 00:02:39.747
But if you give the array,
then you must put something in it.

43
00:02:39.747 --> 00:02:41.237
You can't just send up an empty array.

44
00:02:41.237 --> 00:02:44.079
So technically it should be that.

45
00:02:44.079 --> 00:02:46.529
You cannot give us an array,
but if you do give us an array,

46
00:02:46.529 --> 00:02:47.937
you better have something in it.

47
00:02:47.937 --> 00:02:49.907
Don't send us an empty array,
which makes sense.

48
00:02:49.907 --> 00:02:50.447
Why would you do that?

49
00:02:52.027 --> 00:02:55.340
Or maybe you wrote your code in a way that
it just, I don't know, it maps over, but

50
00:02:55.340 --> 00:02:56.397
it's up to you.

51
00:02:56.397 --> 00:02:56.967
I'm gonna do that.

52
00:02:56.967 --> 00:03:02.117
I'll probably do something
different in the docs we'll see.

53
00:03:02.117 --> 00:03:07.612
And then we can do for that input type,
it'll just be IssueFilterInput.

54
00:03:07.612 --> 00:03:11.452
I won't make it required, because maybe
you don't want to filter on statuses.

55
00:03:11.452 --> 00:03:12.822
You just want to get all the issues.

56
00:03:12.822 --> 00:03:16.242
So it's not gonna be required and

57
00:03:16.242 --> 00:03:22.480
then it's gonna return issue or
it's gonna return issues.

58
00:03:22.480 --> 00:03:27.964
And I guess I'll call this issues,
plural, and I'll make the list required.

59
00:03:27.964 --> 00:03:32.996
So this is giving us
a query that if you hit

60
00:03:32.996 --> 00:03:38.886
it will get all the issues for
a given user.

61
00:03:38.886 --> 00:03:42.374
Will always return an array,
even if there's nothing in it,

62
00:03:42.374 --> 00:03:46.006
has an optional input object of
filtering on statuses if given.

63
00:03:47.036 --> 00:03:49.556
And we just need to go write
those resolvers for that.

64
00:03:49.556 --> 00:03:52.036
And we already added the issue
array here for the user.

65
00:03:52.036 --> 00:03:54.426
So, okay, I wanna look at that.

66
00:03:56.806 --> 00:03:57.336
Let's go do that.

67
00:03:59.323 --> 00:04:02.003
So for the resolvers,
let's go to our query.

68
00:04:02.003 --> 00:04:05.505
We'll make a new one for issues like this,

69
00:04:05.505 --> 00:04:10.483
we're going to get the parent
that does not exist.

70
00:04:10.483 --> 00:04:13.651
We do have an optional input here,
so we'll take that and

71
00:04:13.651 --> 00:04:15.143
we will use the context.

72
00:04:15.143 --> 00:04:17.402
We don't need the info.

73
00:04:17.402 --> 00:04:18.906
We'll do the same thing
we did with all of them.

74
00:04:18.906 --> 00:04:23.180
Because the resolvers are responsible for
enforcing authentication,

75
00:04:23.180 --> 00:04:24.796
so we'll enforce it here.

76
00:04:24.796 --> 00:04:30.031
Now on this line,
we are sure user is here And

77
00:04:30.031 --> 00:04:34.956
the first thing we wanna do is we need to
build up a filter that we can pass our

78
00:04:34.956 --> 00:04:39.415
ORM if you passed in statuses, so
that's what we're going to do.

79
00:04:39.415 --> 00:04:43.304
I might have to just walk through this one
because it's very specific to the database

80
00:04:43.304 --> 00:04:44.579
or the ORM that I'm using.

81
00:04:45.949 --> 00:04:51.169
But basically,
there's one filter I have to do.

82
00:04:51.169 --> 00:04:52.999
And there's an optional second filter,
right?

83
00:04:52.999 --> 00:04:57.049
The one filter I have to do is, only
show me the issues for the current user.

84
00:04:57.049 --> 00:04:58.810
So I have to do that filter.

85
00:04:58.810 --> 00:05:01.020
Otherwise, you'll just get
everybody's issues in the database.

86
00:05:01.020 --> 00:05:05.920
So this is a multi-tenant database,
so scope it by the user's ID.

87
00:05:05.920 --> 00:05:10.830
So that's the first filter, so
I make an array of that filter.

88
00:05:10.830 --> 00:05:13.791
You can see I'm saying,
I want to make sure

89
00:05:13.791 --> 00:05:19.214
that the issues user ID equals the current
user's ID, so I'm scoping that.

90
00:05:19.214 --> 00:05:22.516
And then if you pass in the statuses and
the statuses have length,

91
00:05:22.516 --> 00:05:25.216
I guess I don't have to do
this check right here if I did

92
00:05:25.216 --> 00:05:27.454
the exclamation on
the inside of the array.

93
00:05:27.454 --> 00:05:29.384
So that would get rid of this check.

94
00:05:29.384 --> 00:05:33.893
If that's the case, go ahead and
push in a new equal filter for

95
00:05:33.893 --> 00:05:37.034
each one of those statuses into the array.

96
00:05:37.034 --> 00:05:41.815
So if you pass in three statuses,
so we gonna pass in three equals

97
00:05:41.815 --> 00:05:46.343
inside that array of issues.status
equaling that status.

98
00:05:46.343 --> 00:05:47.831
And that's basically
what we're doing here.

99
00:05:47.831 --> 00:05:51.403
And then we can pass that into
the end helper for our ORM,

100
00:05:51.403 --> 00:05:54.215
which if given an array
of equality checks,

101
00:05:54.215 --> 00:05:58.711
all of them have to pass in order for
you to get the result that you want.

102
00:05:58.711 --> 00:05:59.810
And that's what and means.

103
00:05:59.810 --> 00:06:04.048
So that's just saying every
one of these filters if given,

104
00:06:04.048 --> 00:06:07.702
have to be true in order for
an issue to be returned.

105
00:06:07.702 --> 00:06:12.160
And then this order thing by is just,
you don't even really need this.

106
00:06:12.160 --> 00:06:15.830
But it was driving me crazy that
the things were not sorted, so I added it.

107
00:06:15.830 --> 00:06:17.530
So let's do that.

108
00:06:17.530 --> 00:06:19.390
So we'll go in here.

109
00:06:19.390 --> 00:06:24.133
We'll say, andFilters are gonna be

110
00:06:24.133 --> 00:06:29.489
an array with the equal of issues.userId

111
00:06:29.489 --> 00:06:33.940
equals the context.user.id.

112
00:06:33.940 --> 00:06:39.193
Then I can say, if input and

113
00:06:39.193 --> 00:06:43.083
input.statuses.

114
00:06:43.083 --> 00:06:47.472
I don't have to check for length on this
one, because on this version that I wrote,

115
00:06:47.472 --> 00:06:51.295
again, I said, if you pass that input,
it better have a status in it, so

116
00:06:51.295 --> 00:06:53.928
this code won't even run
unless that is true.

117
00:06:53.928 --> 00:06:56.448
So I don't have to check for
the length here like I did in the docs.

118
00:06:57.862 --> 00:07:01.345
And then I can say, okay,
cool, if that's true,

119
00:07:01.345 --> 00:07:04.910
basically what I wanna do is
I want to map over them and

120
00:07:04.910 --> 00:07:08.812
return a equal statement that
I can then push in an array.

121
00:07:10.622 --> 00:07:16.102
Could have just used reduce here,
but it's all good.

122
00:07:16.102 --> 00:07:23.076
StatusFilters = Input.statuses.map,

123
00:07:23.076 --> 00:07:27.976
grab the status return an equal

124
00:07:27.976 --> 00:07:32.688
statement of issues.status

125
00:07:32.688 --> 00:07:37.734
equals that status like this.

126
00:07:37.734 --> 00:07:42.378
This thing is freaking out because
I already declared something

127
00:07:42.378 --> 00:07:45.423
called status somewhere, probably.

128
00:07:45.423 --> 00:07:47.399
I just didn't spell it right.

129
00:07:47.399 --> 00:07:49.539
There we go, cool.

130
00:07:49.539 --> 00:07:58.038
Okay, got our status filters, And
then we just push them into our array.

131
00:07:58.038 --> 00:08:02.678
But we have to do an or here because
it's like if I put another and here,

132
00:08:02.678 --> 00:08:07.477
what would happen is it's only one
issues that have all these statuses,

133
00:08:07.477 --> 00:08:10.238
that wouldn't make sense.

134
00:08:10.238 --> 00:08:11.318
You can only have one status.

135
00:08:11.318 --> 00:08:16.758
So it's like I want all the issues
that belong to this user and

136
00:08:16.758 --> 00:08:19.219
has one of these statuses.

137
00:08:20.279 --> 00:08:21.309
That's what the or is, right?

138
00:08:21.309 --> 00:08:22.409
So I'm pushing the or in here.

139
00:08:22.409 --> 00:08:27.707
So I'm gonna say
andFilters.push using the or

140
00:08:27.707 --> 00:08:34.469
keyword that's imported at
the top...statusFilters.

141
00:08:42.294 --> 00:08:43.463
&gt;&gt; Speaker 1: So we got that.

142
00:08:43.463 --> 00:08:48.123
Now we can actually make the query,
which is a little funky.

143
00:08:48.123 --> 00:08:50.614
Also because the orderBy
is a little weird.

144
00:08:50.614 --> 00:08:51.990
I'm probably just gonna copy that.

145
00:08:51.990 --> 00:08:54.637
Actually I'm just gonna copy that right
now because I'm not writing that again.

146
00:08:54.637 --> 00:08:56.227
That's just so gross.

147
00:08:56.227 --> 00:09:02.627
But it's pretty simple once you
get past the orderBy thing,

148
00:09:02.627 --> 00:09:06.643
which is just going to be get the data,

149
00:09:06.643 --> 00:09:12.796
that's going to equals
db.query.issues.findMany,

150
00:09:12.796 --> 00:09:16.812
where we're gonna use the and query,

151
00:09:16.812 --> 00:09:20.973
spread over the and filters like that.

152
00:09:24.307 --> 00:09:28.099
And then we can say orderBy, which
I'm just going to paste in like that.

153
00:09:29.219 --> 00:09:33.801
What the orderBy thing is doing here,
all this is doing is,

154
00:09:33.801 --> 00:09:36.499
it's sorting by the enums.

155
00:09:36.499 --> 00:09:41.140
This guarantees that we always get back
issues with backlogs at the top in

156
00:09:41.140 --> 00:09:42.829
progress and then done.

157
00:09:42.829 --> 00:09:44.169
There's also another one to do.

158
00:09:44.169 --> 00:09:45.369
You can add that here too.

159
00:09:45.369 --> 00:09:46.809
I just didn't feel like doing it.

160
00:09:46.809 --> 00:09:49.199
So you'll always get those
three back in this order.

161
00:09:49.199 --> 00:09:53.442
Without this, you'll just get
them back in any random order and

162
00:09:53.442 --> 00:09:56.044
then an additional sort of createdAt.

163
00:09:56.044 --> 00:09:58.023
So first sort by status, and

164
00:09:58.023 --> 00:10:02.404
then within those statuses sort
by descending the createdAt.

165
00:10:05.794 --> 00:10:09.594
The SQL helper allows me to write raw SQL.

166
00:10:09.594 --> 00:10:12.370
I couldn't figure out a way
to do this with the ORM, so

167
00:10:12.370 --> 00:10:13.744
I just wrote it in raw SQL.

168
00:10:15.026 --> 00:10:16.536
Okay, so we got that.

169
00:10:16.536 --> 00:10:19.636
And lastly, let's just return data.

170
00:10:19.636 --> 00:10:21.326
That should be a list of things.

171
00:10:21.326 --> 00:10:23.016
If I hover over it, there we go.

172
00:10:23.016 --> 00:10:24.566
It's a list of issues.

173
00:10:24.566 --> 00:10:25.716
Okay, so we got that.

174
00:10:25.716 --> 00:10:29.476
I guess I need to add async on this so
await actually works.

175
00:10:30.556 --> 00:10:31.351
There we go.

176
00:10:34.305 --> 00:10:40.357
And what we need to do now is teach
GraphQL how to get issues from a user.

177
00:10:40.357 --> 00:10:42.647
So I can go down here at
top level of my resolver.

178
00:10:42.647 --> 00:10:47.687
Say for the user type it has issues,
and I want to resolve this.

179
00:10:47.687 --> 00:10:50.417
Because it's a field on a object type,

180
00:10:50.417 --> 00:10:53.917
I know that this parent
is going to be a user.

181
00:10:53.917 --> 00:10:57.071
That's the quickest way you can figure
out if If I'm making a resolver

182
00:10:57.071 --> 00:11:00.616
on an object type, this first argument
is gonna be that object type, always.

183
00:11:02.086 --> 00:11:04.726
This is always gonna be a user
because it's a field on user.

184
00:11:04.726 --> 00:11:05.716
So its parent is a user.

185
00:11:06.776 --> 00:11:07.656
So I have the user here.

186
00:11:08.746 --> 00:11:10.616
I don't care for that argument.

187
00:11:10.616 --> 00:11:13.559
I do care about the context, so
I can check for authentication,

188
00:11:13.559 --> 00:11:15.040
which I'm gonna do right here.

189
00:11:17.722 --> 00:11:22.946
And I guess technically you
don't have to do this, right?

190
00:11:22.946 --> 00:11:24.216
What query do we have?

191
00:11:24.216 --> 00:11:28.924
I don't think there's a query
that you can run that will

192
00:11:28.924 --> 00:11:33.546
give you a user in which
you're not logged in already.

193
00:11:34.636 --> 00:11:38.924
So you technically don't have to check for
authentication in the sub resolvers

194
00:11:38.924 --> 00:11:41.360
because their parents
are already doing it.

195
00:11:43.582 --> 00:11:47.983
Right, so if you follow the graph,
what query can I get a user from?

196
00:11:47.983 --> 00:11:51.883
I can get it from a signin.

197
00:11:51.883 --> 00:11:53.503
I can get it from a createUser.

198
00:11:53.503 --> 00:11:57.145
Well, at that point, you're signed in, and
you're created so you are logged in and

199
00:11:57.145 --> 00:11:58.724
you should be able to get the issues.

200
00:11:58.724 --> 00:11:59.434
Now I don't have to check this.

201
00:11:59.434 --> 00:12:01.374
So technically you don't have
to check in these nested ones.

202
00:12:02.564 --> 00:12:04.874
It's kind of redundant,
but it's not gonna hurt.

203
00:12:06.644 --> 00:12:14.924
This one is just return
database.query.issues.findMany.

204
00:12:14.924 --> 00:12:21.778
Where: equals (issues.userId

205
00:12:21.778 --> 00:12:25.563
equals user.id)

206
00:12:40.976 --> 00:12:43.723
And this should give us our issues.

207
00:12:46.081 --> 00:12:49.979
Okay, any questions on that, yes.

208
00:12:49.979 --> 00:12:55.039
How do you organize your resolvers
when you have hundreds of tables?

209
00:12:55.039 --> 00:12:55.867
Yeah, that's a good question.

210
00:12:55.867 --> 00:12:59.309
I mean, you can break your resolvers
up into many different files.

211
00:12:59.309 --> 00:13:02.329
You don't have to put them all,
I mean, it's just an object.

212
00:13:02.329 --> 00:13:06.929
So there's nothing wrong with taking each
one of these types and giving them their

213
00:13:06.929 --> 00:13:11.275
own file, or taking each one of these
types and giving them their own folder.

214
00:13:11.275 --> 00:13:13.903
And then make a file for
each single resolver and

215
00:13:13.903 --> 00:13:19.029
then you just merge them all in, it's an
object, so you can merge however you want.

216
00:13:19.029 --> 00:13:21.168
There really is no wrong way.

217
00:13:21.168 --> 00:13:24.560
I'd say most people just start off by
putting everything in one file, and

218
00:13:24.560 --> 00:13:27.734
then what they end up doing is,
they start going into their schema and

219
00:13:27.734 --> 00:13:31.759
separating this, taking this outta one
file and putting it into many files.

220
00:13:31.759 --> 00:13:36.641
And at that point you can start
to co-locate things together by

221
00:13:36.641 --> 00:13:39.321
either functionality or entity.

222
00:13:39.321 --> 00:13:43.227
So you might put all your queries
together, all your mutations together, or

223
00:13:43.227 --> 00:13:46.888
you might group things by all my
user stuff, all my issue stuff.

224
00:13:46.888 --> 00:13:48.474
So there really is no wrong answer, but

225
00:13:48.474 --> 00:13:52.028
I would say just keep everything in
one file until it becomes annoying.

226
00:13:52.028 --> 00:13:56.648
And then from there, do what makes sense
as long as you merge them in at the end of

227
00:13:56.648 --> 00:13:59.767
the day, GraphQL doesn't know or
doesn't care.

228
00:13:59.767 --> 00:14:03.768
So there are also tools that will
take something like this and

229
00:14:03.768 --> 00:14:08.402
spit out a GraphQL schema, so
it can kind of get you there half the way.

230
00:14:08.402 --> 00:14:10.907
So you could do that as well.

231
00:14:10.907 --> 00:14:14.967
That way you're really not even writing
GraphQL schemas minus the things you wanna

232
00:14:14.967 --> 00:14:18.984
keep, like get right rid of the password
field on that schema, things like that.

233
00:14:18.984 --> 00:14:21.586
So it works pretty well.

234
00:14:21.586 --> 00:14:23.306
If you use Prisma, I know for

235
00:14:23.306 --> 00:14:28.414
sure Prisma has the ability to generate to
GraphQL because it's based off GraphQL.

236
00:14:28.414 --> 00:14:30.774
So actually,
we're just gonna go straight to the app.

237
00:14:30.774 --> 00:14:35.247
I should just be able to
refresh if I didn't kill it.

238
00:14:35.247 --> 00:14:40.186
For this sign in user, I should
see two issues I think, let's see.

239
00:14:42.622 --> 00:14:44.296
Just one, maybe not two.

240
00:14:44.296 --> 00:14:48.270
Okay, yeah, so here's my one issue
that I created for the signed in user.

241
00:14:48.270 --> 00:14:52.074
That's right, who I'm signing with on
this app is not who I'm signing with

242
00:14:52.074 --> 00:14:54.886
on the Apollo thing, two different people.

243
00:14:54.886 --> 00:14:57.053
Okay, so that works, let's try it.

244
00:14:57.053 --> 00:14:57.833
Let's make another one.

245
00:14:57.833 --> 00:15:01.566
So I can say another issue.

246
00:15:01.566 --> 00:15:05.413
Hello there, create the issue.

247
00:15:05.413 --> 00:15:08.111
Boom, shows up another issue, right?

248
00:15:08.111 --> 00:15:11.513
You can go test this
in Apollo if you want.

249
00:15:11.513 --> 00:15:12.513
So let's go here.

250
00:15:14.153 --> 00:15:21.331
Already created, let me create another
one here for this user, yellow.

251
00:15:24.259 --> 00:15:27.897
Do more fun things.

252
00:15:27.897 --> 00:15:32.779
So I can create that and then now I
can go back, get rid of all of this,

253
00:15:32.779 --> 00:15:35.193
get rid of this, get rid of that.

254
00:15:35.193 --> 00:15:39.400
Do a query for the issues,
get the content,

255
00:15:39.400 --> 00:15:44.228
the name, the ID, status, and query that.

256
00:15:44.228 --> 00:15:45.668
And there we go.

257
00:15:45.668 --> 00:15:46.968
We got all of those.

258
00:15:46.968 --> 00:15:49.158
And then I should be able
to get the user from this.

259
00:15:49.158 --> 00:15:51.458
So let's see if I get the user from this.

260
00:15:52.718 --> 00:15:54.548
That seems to work.

261
00:15:54.548 --> 00:15:58.174
And then I want to make sure I can get the
issues from the user, so I'll do that, and

262
00:15:58.174 --> 00:16:00.081
I'll say, give me the content.

263
00:16:00.081 --> 00:16:03.431
And that seems to work as well.

264
00:16:03.431 --> 00:16:06.261
So pretty effective.

265
00:16:06.261 --> 00:16:09.811
So this is what I mean by letting
the resolvers do the work.

266
00:16:09.811 --> 00:16:14.003
There's no way we would have been able to
anticipate like, first I gotta get this,

267
00:16:14.003 --> 00:16:16.113
and then I gotta write
some code to get this.

268
00:16:16.113 --> 00:16:18.366
You just don't know,
you just let the resolvers do the work.

269
00:16:18.366 --> 00:16:21.023
The resolvers get called
based on the query.

270
00:16:21.023 --> 00:16:24.553
These are the directions in
which your resolvers run.

271
00:16:24.553 --> 00:16:27.923
So they don't know that they're already
being called and things like that.

272
00:16:27.923 --> 00:16:31.369
So you might be asking yourself,
if I'm just getting the same data here,

273
00:16:31.369 --> 00:16:34.143
as I'm getting here,
is there a way to cache this?

274
00:16:34.143 --> 00:16:35.682
Yes, there's a way to do that.

275
00:16:35.682 --> 00:16:37.733
Per request,
there's something called a data loader.

276
00:16:42.221 --> 00:16:45.837
And this is actually the recommended
thing that you're supposed to use is

277
00:16:45.837 --> 00:16:48.042
you use something called a data loader.

278
00:16:48.042 --> 00:16:51.672
The best way I can describe a data
loader is it is a per-request cache.

279
00:16:51.672 --> 00:16:54.799
So that way, when you do things like
I just did, where I got the issues,

280
00:16:54.799 --> 00:16:56.883
I got the user that I got the issues for
the user,

281
00:16:56.883 --> 00:16:59.550
which technically are the same issues,
two levels above.

282
00:16:59.550 --> 00:17:03.166
I could have just cashed that per request
and it would have ran my code again,

283
00:17:03.166 --> 00:17:06.010
it almost got the issues
that previously got.

284
00:17:06.010 --> 00:17:07.770
So that's what a data loader is.

285
00:17:07.770 --> 00:17:09.000
You can make them from scratch.

286
00:17:09.000 --> 00:17:12.465
There's plugins that kind of do them for
you depending on ORM you have,

287
00:17:12.465 --> 00:17:15.610
there's Mongo, data loaders,
things like that.

288
00:17:15.610 --> 00:17:17.810
But it's kind of beyond the scope of this.

289
00:17:17.810 --> 00:17:21.500
But yeah, you would use something
like this, a per request cache.

290
00:17:21.500 --> 00:17:25.530
I mean, technically you would use
something like this for a lot of server

291
00:17:25.530 --> 00:17:29.760
side things like in Next.js App Directory
for server components.

292
00:17:29.760 --> 00:17:32.390
If you wanted a cache there,
you have to make sure it's per request.

293
00:17:32.390 --> 00:17:34.842
Otherwise all your users share
the same server cache and

294
00:17:34.842 --> 00:17:36.830
you would leak data to someone else.

295
00:17:36.830 --> 00:17:40.780
So you wanna instantiate a new
cache every time you do a request.

296
00:17:40.780 --> 00:17:41.780
That's what data loader is.

297
00:17:41.780 --> 00:17:45.930
So it's a key value, cache for things.

298
00:17:45.930 --> 00:17:47.360
So you would use that.

299
00:17:47.360 --> 00:17:49.766
That way you don't have this problem, or

300
00:17:49.766 --> 00:17:52.530
at least you won't reusing
all the resources.

301
00:17:54.010 --> 00:17:54.996
This database resource,

302
00:17:54.996 --> 00:17:57.383
you'd still be CPU Intensive if
someone made a really big one.

