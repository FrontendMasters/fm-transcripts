WEBVTT

1
00:00:00.110 --> 00:00:01.720
&gt;&gt; Scott Moss: Okay,
now we're gonna talk about operations.

2
00:00:01.720 --> 00:00:03.860
We've been using query this whole time.

3
00:00:03.860 --> 00:00:05.645
So we'll talk a little more about that,
but

4
00:00:05.645 --> 00:00:08.700
I'm also gonna talk about mutations
which are the opposite of queries.

5
00:00:08.700 --> 00:00:14.830
So queries in order to make a GraphQL
schema, you at minimum need one query.

6
00:00:14.830 --> 00:00:17.059
If I got rid of this, this is gonna break.

7
00:00:17.059 --> 00:00:18.910
I got rid of all these queries here,

8
00:00:18.910 --> 00:00:21.397
I'm pretty sure this my
thing will not load up.

9
00:00:23.457 --> 00:00:26.438
&gt;&gt; Scott Moss: I mean it will break,
it won't work.

10
00:00:26.438 --> 00:00:28.085
You have to have at least one query.

11
00:00:28.085 --> 00:00:30.531
You don't need a mutation, we don't have
any mutations, everything works fine.

12
00:00:30.531 --> 00:00:32.465
But you need at least one query I believe.

13
00:00:34.130 --> 00:00:36.555
&gt;&gt; Scott Moss: So queries you can
think of those as like get requests.

14
00:00:36.555 --> 00:00:38.845
You want to get something
from the database.

15
00:00:38.845 --> 00:00:41.700
There's something you're trying to
get back from this graphical server,

16
00:00:41.700 --> 00:00:43.265
those are queries.

17
00:00:43.265 --> 00:00:46.223
A mutation is something you're
trying to modify or create,

18
00:00:46.223 --> 00:00:49.945
you're trying to mutate something on
the server, so those are mutations.

19
00:00:49.945 --> 00:00:54.452
You could think of those as post, put,
delete, queries are get, get one,

20
00:00:54.452 --> 00:00:57.705
mutations are post, put,
delete as far as crud goes.

21
00:00:57.705 --> 00:01:01.891
So the other thing we can do with queries
is that we can take arguments, right?

22
00:01:01.891 --> 00:01:07.031
So if I say, cool, you wanna search,
but what do you wanna search for?

23
00:01:07.031 --> 00:01:10.721
I can pass in arguments here, and these
arguments could have different types.

24
00:01:10.721 --> 00:01:15.461
So I can say, I wanna search for
search results.

25
00:01:15.461 --> 00:01:17.111
Let's see we got tweets and profiles.

26
00:01:17.111 --> 00:01:20.722
So tweet has an ID profiles have ID.

27
00:01:20.722 --> 00:01:25.170
So I'll say I wanna search for
an ID, whose type is ID.

28
00:01:27.215 --> 00:01:31.902
&gt;&gt; Scott Moss: So this is how you
would pass an argument to a query.

29
00:01:31.902 --> 00:01:34.142
And then you'd have access
to this argument and

30
00:01:34.142 --> 00:01:38.612
the code that you would write to resolve
this and this is also strictly typed.

31
00:01:38.612 --> 00:01:42.959
You can pass as many arguments as you
want, it doesn't really matter, but

32
00:01:42.959 --> 00:01:46.004
eventually they get so
long, it's just like code.

33
00:01:46.004 --> 00:01:48.062
If I make a function that's
more than two arguments,

34
00:01:48.062 --> 00:01:50.454
I'm just gonna get rid of those
arguments and make an object.

35
00:01:50.454 --> 00:01:53.754
Now you gotta pass in an object,
more than two arguments is gross.

36
00:01:53.754 --> 00:01:56.924
So I'm just gonna have an object that you
gotta pass in with the properties on it.

37
00:01:56.924 --> 00:01:59.584
The same thing is true here,
you will make an input type.

38
00:01:59.584 --> 00:02:04.068
So if I were going to make
something more complicated,

39
00:02:04.068 --> 00:02:10.207
I could say, input SearchInput,
using the input keyword here.

40
00:02:10.207 --> 00:02:12.927
And then name spacing your
input this is not required, but

41
00:02:12.927 --> 00:02:14.925
it just makes more sense for
me as a human and

42
00:02:14.925 --> 00:02:18.164
when I go read it in the documentation
that I know that the input type.

43
00:02:18.164 --> 00:02:20.916
And then it's kinda just
like an object type,

44
00:02:20.916 --> 00:02:23.868
you can search for an ID, it's optional.

45
00:02:23.868 --> 00:02:27.108
Maybe you wanna search for
a name, that's optional.

46
00:02:27.108 --> 00:02:31.876
So I'm not gonna make it required, now you
can go down here, and it's probably more

47
00:02:31.876 --> 00:02:35.988
appropriately to call this input,
I usually always just call it input.

48
00:02:35.988 --> 00:02:41.295
You can call it whatever you want, but the
type is SearchInput, and it's required,

49
00:02:41.295 --> 00:02:45.368
you have to pass in an input here
in order for this to work, right?

50
00:02:45.368 --> 00:02:46.605
So I can save that.

51
00:02:46.605 --> 00:02:51.077
Let's make sure we didn't break anything,
let's go back here, still works,

52
00:02:51.077 --> 00:02:52.568
let me get rid of this.

53
00:02:52.568 --> 00:02:55.188
I'm gonna do a query for search.

54
00:02:56.238 --> 00:02:59.098
And notice down here this
variables panel popped open.

55
00:02:59.098 --> 00:03:00.764
So you can see I have Arguments now.

56
00:03:00.764 --> 00:03:04.271
I have one argument whose type is input,
so it's an object whose type is input.

57
00:03:04.271 --> 00:03:08.685
I'm gonna click into that and
I'm gonna say yeah, ID and a name, so

58
00:03:08.685 --> 00:03:10.634
I'll have to fill those out.

59
00:03:10.634 --> 00:03:13.294
Well, I don't have to because
they're both optional, but I will.

60
00:03:13.294 --> 00:03:15.564
And then, same thing,
just give me this stuff.

61
00:03:15.564 --> 00:03:21.148
So I'll say, I want that, give me the name
here, and then I'll pass up for an ID.

62
00:03:21.148 --> 00:03:23.645
I don't know how this works with
mock data, so I'll just do that.

63
00:03:24.695 --> 00:03:29.415
And for a name, I'll put Jess,
and we'll see what happens.

64
00:03:29.415 --> 00:03:32.007
So you can see, yeah,
it's still just gonna return mock data,

65
00:03:32.007 --> 00:03:33.166
it just kinda ignores this.

66
00:03:33.166 --> 00:03:37.085
But this is how you would
pass in the variables.

67
00:03:37.085 --> 00:03:39.972
Notice on the query though,
you have this weird syntax,

68
00:03:39.972 --> 00:03:42.809
I talk a lot about this syntax
in the client side course.

69
00:03:42.809 --> 00:03:46.669
But the best way I can describe this
is you can think of this right here as

70
00:03:46.669 --> 00:03:51.006
an operation or you could think of it as
you creating a function in JavaScript.

71
00:03:51.006 --> 00:03:55.557
This is you making a function and
this is you describing the arguments for

72
00:03:55.557 --> 00:03:57.129
that function, right?

73
00:03:57.129 --> 00:04:00.121
If you were doing this in Typescript,
you say, here's the argument name,

74
00:04:00.121 --> 00:04:02.227
here's the argument type,
it's the same thing.

75
00:04:02.227 --> 00:04:05.857
It's just that all arguments in TypeScript
have to start with a dollar sign.

76
00:04:05.857 --> 00:04:07.237
That's how it knows it's an argument.

77
00:04:07.237 --> 00:04:11.207
That's the only difference between this
and making a function in TypeScript.

78
00:04:11.207 --> 00:04:12.716
I'm making a function called search.

79
00:04:12.716 --> 00:04:15.807
So you can call this whatever you want
cuz it's a function, it doesn't matter.

80
00:04:16.837 --> 00:04:20.449
And I'm declaring
an argument called input,

81
00:04:20.449 --> 00:04:24.880
whose type is SearchInput and
it is required.

82
00:04:24.880 --> 00:04:29.310
And then on the next line,
I'm calling a function called search.

83
00:04:29.310 --> 00:04:33.150
This search function already exists,
I'm calling it,

84
00:04:33.150 --> 00:04:39.550
it is demanding that I pass in an argument
called input whose value is this variable.

85
00:04:39.550 --> 00:04:43.104
So this is me making a function and
declaring an argument,

86
00:04:43.104 --> 00:04:46.669
this is me calling a function and
passing in the argument.

87
00:04:47.979 --> 00:04:54.579
It's the equivalent of if
you were in JavaScript and

88
00:04:54.579 --> 00:04:59.979
you were making a function called action,

89
00:04:59.979 --> 00:05:04.179
and action took in some options,

90
00:05:04.179 --> 00:05:10.837
whose type is a Record of,
&gt;&gt; Scott Moss: I

91
00:05:10.837 --> 00:05:16.015
don't know how this works, this is like
a string, I forgot how Record works.

92
00:05:16.015 --> 00:05:19.720
I don't know, you'll have some type here,

93
00:05:19.720 --> 00:05:23.821
let's do this name string,
okay, name string.

94
00:05:25.021 --> 00:05:27.331
And then we have that, and
then somewhere in here,

95
00:05:27.331 --> 00:05:30.411
I'm gonna call a function that
already exists somewhere, right?

96
00:05:30.411 --> 00:05:35.406
It could be like
thisFunctionAlreadyExists.

97
00:05:38.654 --> 00:05:42.292
&gt;&gt; Scott Moss: And I'll call it and
I'm gonna pass in options.

98
00:05:42.292 --> 00:05:47.002
That's the equivalent of that, it's
the same thing, it's the exact same thing.

99
00:05:47.002 --> 00:05:48.860
I'm making a function,
I'm declaring arguments,

100
00:05:48.860 --> 00:05:51.532
now I'm passing it into
a function that already exists.

101
00:05:51.532 --> 00:05:52.882
It's the best way I can describe it.

102
00:05:54.315 --> 00:05:56.109
&gt;&gt; Scott Moss: So that's what
we're doing here and then yeah,

103
00:05:56.109 --> 00:05:57.302
you run it, you get some stuff.

104
00:05:57.302 --> 00:06:01.263
I promise we're gonna get to making
the app, there's a lot to cover here.

105
00:06:01.263 --> 00:06:02.830
So mutations, let's do some mutations,

106
00:06:02.830 --> 00:06:05.842
I'm curious how this works with the mock
schema, I haven't done this in a while.

107
00:06:05.842 --> 00:06:10.735
But mutations are how you make things,
so they're very similar to queries,

108
00:06:10.735 --> 00:06:14.817
in fact, they just make stuff,
so let's make some mutations.

109
00:06:14.817 --> 00:06:17.104
So the way you make a mutation is you say,

110
00:06:17.104 --> 00:06:20.446
type
&gt;&gt; Scott Moss: Mutation.

111
00:06:20.446 --> 00:06:24.260
I can spell, there we go.

112
00:06:24.260 --> 00:06:26.870
And then let's say I wanna make a tweet.

113
00:06:26.870 --> 00:06:29.330
So I can say makeTweet, okay?

114
00:06:29.330 --> 00:06:31.320
You gotta make a tweet,
you gotta pass up some stuff.

115
00:06:31.320 --> 00:06:35.040
Let's say you gotta pass in some content.

116
00:06:35.040 --> 00:06:37.550
So give me some content.

117
00:06:37.550 --> 00:06:40.120
Let's type String, required, and I'll.

118
00:06:40.120 --> 00:06:44.672
And I'll return back a Tweet
that's always there.

119
00:06:44.672 --> 00:06:47.552
And it's not nake, it's makeTweet.

120
00:06:49.432 --> 00:06:55.924
So now I have that mutation,
I can go back to our app or Apollo Studio.

121
00:06:55.924 --> 00:07:01.791
If I go back here, you can see now
I have a mutation on the root type.

122
00:07:02.901 --> 00:07:06.861
So I'm just gonna uncheck that,
get rid of this.

123
00:07:06.861 --> 00:07:10.119
I'm gonna click on the mutation,
I only have one called makeTweet,

124
00:07:10.119 --> 00:07:11.257
so I'm gonna add that.

125
00:07:11.257 --> 00:07:15.511
I want the content, I want the ID.

126
00:07:15.511 --> 00:07:18.733
I have to satisfy the request of
the non-null content string, so

127
00:07:18.733 --> 00:07:21.205
I'm gonna go down here and
say, this is my tweet.

128
00:07:23.449 --> 00:07:24.551
&gt;&gt; Scott Moss: And I'm gonna run this.

129
00:07:24.551 --> 00:07:25.561
And now I made a tweet.

130
00:07:29.290 --> 00:07:30.860
&gt;&gt; Scott Moss: That's it,
it's very similar to queries.

131
00:07:30.860 --> 00:07:35.051
In reality, it's the exact same
syntax as running a query,

132
00:07:35.051 --> 00:07:39.080
it's just the behavior on
the back end is different.

133
00:07:39.080 --> 00:07:41.369
You're creating something,
you're modifying something,

134
00:07:41.369 --> 00:07:44.999
you're deleting something, whereas a query
is expected to just get something.

135
00:07:44.999 --> 00:07:48.729
Now, does GraphQL actually care or
know what you're doing on your resolvers?

136
00:07:48.729 --> 00:07:49.809
No, it has no idea.

137
00:07:49.809 --> 00:07:54.299
Just like if you were to make a REST
route that we're supposed to get all your

138
00:07:54.299 --> 00:07:58.863
to-dos, there's not a stop of you from
creating something there as well,

139
00:07:58.863 --> 00:08:00.529
it doesn't care, right?

140
00:08:00.529 --> 00:08:04.586
So, there's no checking or
knowing what you're actually doing,

141
00:08:04.586 --> 00:08:08.346
it's just that's the convention
you should be following.

142
00:08:08.346 --> 00:08:13.276
Mutations are for modifying and deleting
and creating, queries are for getting.

143
00:08:13.276 --> 00:08:16.193
But obviously you'll have like,
side effects.

144
00:08:16.193 --> 00:08:19.217
One side effect might be,
I'm doing a query that gets data, but

145
00:08:19.217 --> 00:08:22.590
I'm also making a post request to my
analytics service that logs this.

146
00:08:22.590 --> 00:08:25.222
So you still might be modifying
something inside of a query,

147
00:08:25.222 --> 00:08:27.400
you might have side effects and
things like that.

148
00:08:27.400 --> 00:08:31.466
So it's not always one for one, but that's
the expectation, queries and mutations.

149
00:08:31.466 --> 00:08:32.867
Any questions on mutations?

150
00:08:32.867 --> 00:08:35.355
They're literally the same
thing as queries,

151
00:08:35.355 --> 00:08:37.850
your logic is different
on the resolving side.

152
00:08:38.850 --> 00:08:43.583
And yeah, you can use inputs the same
way you did them with queries.

153
00:08:43.583 --> 00:08:46.831
&gt;&gt; Scott Moss: Subscriptions, we won't
be diving into subscriptions today, but

154
00:08:46.831 --> 00:08:50.742
subscriptions are basically web hooks,
I'm sorry, web sockets.

155
00:08:50.742 --> 00:08:54.520
If you want real-time
communication with the GraphQL API,

156
00:08:54.520 --> 00:08:59.242
you would use subscriptions so
you can subscribe to something specific.

157
00:08:59.242 --> 00:09:06.588
I don't know if the mock schema,
will allow us to do that, I'm not sure.

158
00:09:06.588 --> 00:09:11.165
But this is for WebSockets,
we also couldn't really do this on Next.js

159
00:09:11.165 --> 00:09:14.091
anyway cuz Next.Js has
service functions and

160
00:09:14.091 --> 00:09:17.404
you can't do WebSockets
in a service environment.

161
00:09:17.404 --> 00:09:21.810
The way the WebSockets work they need a
long-lived connection a service function,

162
00:09:21.810 --> 00:09:24.426
spin up and
shut down to do transactional things.

163
00:09:24.426 --> 00:09:27.664
So you couldn't use WebSockets in
a serverless environment without a third

164
00:09:27.664 --> 00:09:31.116
party service sitting in between them,
and that's just a lot of work right now.

165
00:09:31.116 --> 00:09:34.926
But that's how you would do WebSockets,
two-way communication.

166
00:09:34.926 --> 00:09:37.675
We talked about input types,
we talked about arguments.

167
00:09:37.675 --> 00:09:41.995
Okay, that's all the schema definition
language that you,- this is literally 99%

168
00:09:41.995 --> 00:09:45.173
of GraphQL schema if you know this,
you know how to make a schema.

169
00:09:45.173 --> 00:09:48.934
There's really not much more
other than custom directives,

170
00:09:48.934 --> 00:09:51.993
advanced union types and things like that.

171
00:09:51.993 --> 00:09:55.946
You can even make custom scholars I guess
I didn't really talk about that but

172
00:09:55.946 --> 00:09:57.383
we have the scholarships.

173
00:09:57.383 --> 00:10:01.563
You can make custom ones if you want a
date field maybe, or something like that.

174
00:10:01.563 --> 00:10:04.519
You can do that as well, but that's it.

175
00:10:04.519 --> 00:10:08.365
If this is all you ever knew,
you can make any graphical schema, so

176
00:10:08.365 --> 00:10:10.739
we're past that part.

177
00:10:10.739 --> 00:10:15.552
How does GraphQL know whether to
run before or after the directive?

178
00:10:15.552 --> 00:10:19.719
It's up to the directive to
decide when it wants to run.

179
00:10:19.719 --> 00:10:21.996
I think there's gonna be a lot
of directive questions, so

180
00:10:21.996 --> 00:10:24.705
I'm just gonna show the documentation
on what that would look like.

181
00:10:24.705 --> 00:10:28.242
Because it is kinda what
the hell's going on there?

182
00:10:28.242 --> 00:10:29.232
How's that working?

183
00:10:29.232 --> 00:10:33.402
I'll just show you what a directive
might look like as far as making one.

184
00:10:34.492 --> 00:10:40.812
Let's see if they have an example of
custom directives implemented here.

185
00:10:40.812 --> 00:10:46.596
Okay, this is not what I'm looking for
I'll show you custom directives graphql.

186
00:10:49.879 --> 00:10:53.722
&gt;&gt; Scott Moss: So let's say you
wanted an uppercase directive,

187
00:10:53.722 --> 00:10:55.648
let me make this bigger.

188
00:10:55.648 --> 00:10:58.132
You wanted to create
a directive called uppercase.

189
00:10:58.132 --> 00:11:01.704
So first thing you do is in your schema,
you would use the directive keyword.

190
00:11:01.704 --> 00:11:06.179
You would say this is the name of the
directory that I want you to use the on

191
00:11:06.179 --> 00:11:10.144
keyword and this is a enom of
where this directive should work.

192
00:11:10.144 --> 00:11:12.004
So in this case, the field definition so

193
00:11:12.004 --> 00:11:15.194
that means you can use this
uppercase directive on fields.

194
00:11:15.194 --> 00:11:18.604
There are other different definitions
on which a directive can work on.

195
00:11:18.604 --> 00:11:21.597
And this example they want to be
able to uppercase fields, right?

196
00:11:21.597 --> 00:11:26.550
So, then in their code you can
also pass in argument stuff, but

197
00:11:26.550 --> 00:11:32.257
then in there, let me see here all
the value all the supported location.

198
00:11:32.257 --> 00:11:36.760
So scholar object field definition,
argument definition, interface unions,

199
00:11:36.760 --> 00:11:39.967
enoms you can let him make a director for
anything, okay?

200
00:11:39.967 --> 00:11:42.576
And then let me see if they have
the code that I wanna show you.

201
00:11:42.576 --> 00:11:46.206
So here's the uppercase one, this one's
a little more, yeah, there we go.

202
00:11:46.206 --> 00:11:51.506
So on the object field, so executes once
for each object field in the schema.

203
00:11:51.506 --> 00:11:53.883
So every single field that
you have in the schema,

204
00:11:53.883 --> 00:11:56.046
this function is going to run, right?

205
00:11:56.046 --> 00:11:58.467
And then what it attempts to do is, hey,

206
00:11:58.467 --> 00:12:04.007
does this field have the specified
directives that I'm trying to check for?

207
00:12:04.007 --> 00:12:09.122
If it does have the uppercase directive,
what I wanna do is I wanna

208
00:12:09.122 --> 00:12:15.458
get the config for that field, which in
this case returns the resolve function.

209
00:12:15.458 --> 00:12:18.608
The resolve function, we're gonna
create resolvers in a minute, but

210
00:12:18.608 --> 00:12:21.614
this is the function that runs that
returns the value of that field.

211
00:12:21.614 --> 00:12:26.554
So what you can see here is they
are overriding that resolve function.

212
00:12:26.554 --> 00:12:31.485
So they're basically creating a wrapper,
it's like a higher order function around

213
00:12:31.485 --> 00:12:34.234
the original resolve function for
that field.

214
00:12:34.234 --> 00:12:36.275
So let's say the resolve function for

215
00:12:36.275 --> 00:12:40.304
that field was literally just
a function that returns the name.

216
00:12:40.304 --> 00:12:43.066
What they're gonna say is,
okay that's not what it is anymore,

217
00:12:43.066 --> 00:12:45.878
what it is now it's gonna be this
function, and then internally,

218
00:12:45.878 --> 00:12:50.107
inside of the function that they create,
they call the original resolve function.

219
00:12:50.107 --> 00:12:52.707
So this is how they get the value of it.

220
00:12:52.707 --> 00:12:56.163
Once they get the value of it,
then they go, is it a type string, cool,

221
00:12:56.163 --> 00:12:57.917
uppercase it and return that.

222
00:12:57.917 --> 00:13:01.027
This is a very common pattern,
it's not something unique to GraphQL.

223
00:13:01.027 --> 00:13:04.688
I mean, you do this in React,
it's basically middleware.

224
00:13:04.688 --> 00:13:08.828
You're applying middleware to,
in this case, a field.

225
00:13:08.828 --> 00:13:12.651
So you're like, hey, I'm gonna override
the original functionality of what

226
00:13:12.651 --> 00:13:15.572
normally happens here, and
I'm going to say it is this now.

227
00:13:15.572 --> 00:13:19.312
And inside my implementation, I'm gonna
call the original one to get the result

228
00:13:19.312 --> 00:13:21.622
unmodified by whatever code I'm doing.

229
00:13:21.622 --> 00:13:24.472
And then once I get the result,
I'm then gonna modify it and

230
00:13:24.472 --> 00:13:26.292
return that modified result.

231
00:13:26.292 --> 00:13:27.892
So that's what GraphQL is gonna see.

232
00:13:27.892 --> 00:13:32.372
So in this case, it's quite simple,
it's basically what I suggested earlier.

233
00:13:32.372 --> 00:13:35.055
They wait until the data is resolved and
then they run a function on it, and

234
00:13:35.055 --> 00:13:36.432
that's what's happening here.

235
00:13:36.432 --> 00:13:40.152
It's not too crazy, but
it's quite powerful.

236
00:13:40.152 --> 00:13:44.779
And this was what I'm showing you is
gonna be specific to the GraphQL server

237
00:13:44.779 --> 00:13:47.417
framework that you're using.

238
00:13:47.417 --> 00:13:51.027
They all do it differently,
they all have different versions.

239
00:13:51.027 --> 00:13:53.796
That's why I was like,
this doesn't look too familiar cuz I

240
00:13:53.796 --> 00:13:57.652
use something else that uses a different
version and it's slightly different, but

241
00:13:57.652 --> 00:13:59.717
the logic is basically the same.

242
00:13:59.717 --> 00:14:01.577
I'm hijacking a resolve function,

243
00:14:01.577 --> 00:14:05.657
I'm recreating it by calling the original
one and doing some some type of thing.

244
00:14:05.657 --> 00:14:07.550
So it can get pretty crazy.

