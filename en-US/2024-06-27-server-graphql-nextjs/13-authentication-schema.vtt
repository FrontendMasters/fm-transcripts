WEBVTT

1
00:00:00.280 --> 00:00:01.900
&gt;&gt; Scott Moss: All right,
now it's time to get real though.

2
00:00:01.900 --> 00:00:06.580
So we have that, now we actually need to
make the schema, put the stuff in it.

3
00:00:06.580 --> 00:00:10.303
And I'm gonna pull up like the database
schema, we'll look at the tables and

4
00:00:10.303 --> 00:00:13.280
it will try to figure out how we
need to make the object types and

5
00:00:13.280 --> 00:00:15.830
what queries need to make and
things like that.

6
00:00:15.830 --> 00:00:19.049
Now that we have our server,
we need to actually build the things for

7
00:00:19.049 --> 00:00:20.354
the authentication.

8
00:00:20.354 --> 00:00:25.227
We're gonna need a user type, we're gonna
need a query to get the user, we're

9
00:00:25.227 --> 00:00:30.534
gonna need some inputs in order to fulfill
the form in which you sign in and sign up.

10
00:00:30.534 --> 00:00:33.111
Luckily for us, they take the same thing,
they both take an email,

11
00:00:33.111 --> 00:00:34.214
they both take a password.

12
00:00:34.214 --> 00:00:36.739
So we're gonna need that in our schema,
and

13
00:00:36.739 --> 00:00:39.954
then we're also going to need
to resolve those things.

14
00:00:39.954 --> 00:00:45.277
So we need to resolve the user, we need
to be able to sign in, we need to be able

15
00:00:45.277 --> 00:00:50.807
to sign up, which is called Create user,
so we're gonna do those two things.

16
00:00:50.807 --> 00:00:52.677
So let's get to it.

17
00:00:52.677 --> 00:00:55.269
Let's go to our schema first.

18
00:00:56.531 --> 00:01:01.044
&gt;&gt; Scott Moss: Here we go, I'm gonna get
rid of the me one, or at least for now,

19
00:01:01.044 --> 00:01:02.837
just get rid of that.

20
00:01:02.837 --> 00:01:06.037
And then let's make our type user.

21
00:01:06.037 --> 00:01:08.140
So what actually goes on a user?

22
00:01:08.140 --> 00:01:10.507
I mean, there's no wrong answer here.

23
00:01:10.507 --> 00:01:14.677
You could even probably guess
from the off input type.

24
00:01:14.677 --> 00:01:17.510
But if you go look in the repo,
there should be another schema file,

25
00:01:17.510 --> 00:01:20.311
not the one you're writing in,
but another one for the database.

26
00:01:20.311 --> 00:01:25.371
If you go and look at that, you can
kinda see there is a users table here.

27
00:01:26.671 --> 00:01:30.961
You don't really need to know this tool
to understand what fields there are.

28
00:01:30.961 --> 00:01:34.222
As you can see, there's an ID field,
there's a createdAt field,

29
00:01:34.222 --> 00:01:37.991
there's an email field, and
there's a password field.

30
00:01:37.991 --> 00:01:41.416
Now looking at all these four fields,
which fields do you think

31
00:01:41.416 --> 00:01:44.918
would make sense to go on the GraphQL
schema version of the user?

32
00:01:44.918 --> 00:01:49.039
And which ones would not make sense to
go on the GraphQL schema with the user?

33
00:01:49.039 --> 00:01:50.846
Right, think about that.

34
00:01:52.626 --> 00:01:57.407
And the reason I'm asking is because
not all fields from your database

35
00:01:57.407 --> 00:01:59.443
are gonna map to your schema.

36
00:01:59.443 --> 00:02:04.089
Because you probably should not be
sending down someone's password [LAUGH]

37
00:02:04.089 --> 00:02:05.424
from an API request.

38
00:02:05.424 --> 00:02:07.964
So maybe don't put that
on the graphical schema.

39
00:02:07.964 --> 00:02:09.684
There's no point to send your password.

40
00:02:09.684 --> 00:02:13.914
There might be one example I can think
of where you would wanna do that.

41
00:02:13.914 --> 00:02:16.989
And that would be in a setting somewhere,
if someone wanted to change

42
00:02:16.989 --> 00:02:20.503
their password, but you somehow wanted
to show them their current password.

43
00:02:20.503 --> 00:02:23.938
Which I've never really seen is usually
like you give me your current password and

44
00:02:23.938 --> 00:02:26.092
then I'll let you change your password.

45
00:02:26.092 --> 00:02:30.192
It's usually not like yeah, here's your
current password if you wanna look at it.

46
00:02:30.192 --> 00:02:33.857
I've never really seen that, but that is
like the only example I can think of why

47
00:02:33.857 --> 00:02:36.220
you would wanna put
someone's password on there.

48
00:02:36.220 --> 00:02:39.228
And that's assuming it's even in
plain text, which I hope it's not.

49
00:02:39.228 --> 00:02:42.989
Lot of security issues there, so no,
it's not always gonna be one for one.

50
00:02:42.989 --> 00:02:46.855
And even then maybe you don't wanna
call it email inside of GraphQL.

51
00:02:46.855 --> 00:02:50.569
Maybe you wanna call it email address,
so you can rename that field.

52
00:02:50.569 --> 00:02:53.099
So it's not always a one for one.

53
00:02:53.099 --> 00:02:56.577
Maybe you wanted to format the createdAt
before you give it to the user, so

54
00:02:56.577 --> 00:02:58.329
that field is something different.

55
00:02:58.329 --> 00:03:02.452
So what we're gonna do is in our schema,
is we're just gonna say we have an ID,

56
00:03:02.452 --> 00:03:04.830
its type is ID,
it's always gonna be there.

57
00:03:04.830 --> 00:03:10.440
We're gonna have a type email, that's
a type string, it's always gonna be there.

58
00:03:10.440 --> 00:03:14.860
If you want it to get really strict with
this you can go make a custom scalar type

59
00:03:14.860 --> 00:03:17.513
that does a regex to make
sure this is an email.

60
00:03:17.513 --> 00:03:22.249
So you can validate that email on the
GraphQL level to make sure it's a valid

61
00:03:22.249 --> 00:03:23.530
email address.

62
00:03:23.530 --> 00:03:26.024
Have ChatGPT make you an email regex and

63
00:03:26.024 --> 00:03:29.850
go make a custom scaler type
that defines the email type.

64
00:03:29.850 --> 00:03:33.769
In fact, you know what,
if I just get on npm right now,

65
00:03:33.769 --> 00:03:38.640
I guarantee you, npm graphql email type,
I guarantee it's done.

66
00:03:40.240 --> 00:03:43.610
&gt;&gt; Scott Moss: Here we go,
somebody already has one.

67
00:03:43.610 --> 00:03:47.230
This was this was six years ago we're so
behind.

68
00:03:47.230 --> 00:03:51.390
They already have a GraphQL type date,
they use this GraphQL type object syntax.

69
00:03:51.390 --> 00:03:54.440
This was really hot back in the day, I
don't know if people still do it this way.

70
00:03:54.440 --> 00:03:59.040
But they have a scalar called email and
then look, you can just set it to email.

71
00:03:59.040 --> 00:04:04.269
And I guarantee if I looked at this code
it's just gonna be a regex on an email,

72
00:04:04.269 --> 00:04:08.791
there it is that is, the nastiest
regex I've ever seen in my life.

73
00:04:08.791 --> 00:04:10.513
&gt;&gt; Male Speaker 1: [LAUGH]
&gt;&gt; Scott Moss: So [LAUGH] that's the regex

74
00:04:10.513 --> 00:04:14.931
on the email and it's just checking
to see if it's an email, right?

75
00:04:14.931 --> 00:04:19.606
And if we go look at the actual
GraphQL implementation of it,

76
00:04:19.606 --> 00:04:22.827
yeah, this is actually mostly the same.

77
00:04:22.827 --> 00:04:25.954
You have to serialize it, you have to
parse it, and you have to like parse it

78
00:04:25.954 --> 00:04:29.847
literally, this is actually still the same
way you do it, so it's quite simple.

79
00:04:29.847 --> 00:04:31.687
But yeah, you can do that if you want.

80
00:04:31.687 --> 00:04:36.097
You can get pretty granular with this
stuff, but we're not gonna do that.

81
00:04:36.097 --> 00:04:37.527
That's just too much work right now.

82
00:04:37.527 --> 00:04:41.532
So let's go back to our code,
we got our email and

83
00:04:41.532 --> 00:04:45.459
then we also have createdAt
you could add that.

84
00:04:45.459 --> 00:04:48.382
I'm not using it in the app, so
I'm not going to add it, but

85
00:04:48.382 --> 00:04:50.359
you know what, I'll just add it.

86
00:04:50.359 --> 00:04:52.156
Maybe we won't use it, but
I'll just say it's type string.

87
00:04:55.139 --> 00:05:00.425
&gt;&gt; Scott Moss: This might throw an error
if the database throws a different

88
00:05:00.425 --> 00:05:06.672
type for the createdAt, I think this
is a string, we'll have to see.

89
00:05:06.672 --> 00:05:12.172
Yeah, I mean SQLite only has strings,
integers and blobs.

90
00:05:12.172 --> 00:05:14.182
They don't have anything else,
they don't even have booleans.

91
00:05:14.182 --> 00:05:17.322
So I think that'll be a string.

92
00:05:17.322 --> 00:05:20.012
If not, we can coerce it with a resolver,
it's totally fine.

93
00:05:20.012 --> 00:05:22.576
So we have our user and
then we go back to my notes.

94
00:05:27.000 --> 00:05:29.726
&gt;&gt; Scott Moss: We need to make
our AuthInput, so let's do that.

95
00:05:29.726 --> 00:05:32.746
I'm gonna say AuthInput.

96
00:05:34.636 --> 00:05:38.633
You have to give me an email, that's
a string, you have to give me a password,

97
00:05:38.633 --> 00:05:40.076
that's a string.

98
00:05:40.076 --> 00:05:43.996
It's the only way you can authenticate,
okay?

99
00:05:45.017 --> 00:05:47.921
&gt;&gt; Scott Moss: Then for
the query, I'm gonna put me,

100
00:05:47.921 --> 00:05:50.748
it's gonna return the current user.

101
00:05:50.748 --> 00:05:53.908
And then I need to make some mutations.

102
00:05:55.418 --> 00:05:56.850
I need to make sign in.

103
00:05:57.929 --> 00:06:04.635
Which is gonna take input of type,
Authinput required,

104
00:06:06.249 --> 00:06:10.012
&gt;&gt; Scott Moss: And it's gonna return User.

105
00:06:10.012 --> 00:06:14.635
User also is gonna need a token
here I just realized that.

106
00:06:14.635 --> 00:06:18.302
&gt;&gt; Scott Moss: So I'm gonna say token or
does that make that?

107
00:06:18.302 --> 00:06:20.362
Yeah, it's not required,
you're not always gonna have it.

108
00:06:20.362 --> 00:06:21.200
So these needs to be a user here.

109
00:06:24.891 --> 00:06:29.321
&gt;&gt; Scott Moss: And then for
a sign up, I just call it createUser.

110
00:06:29.321 --> 00:06:36.031
That's also gonna take the same input
of AuthInput, that is required.

111
00:06:36.031 --> 00:06:37.323
And it's also gonna return a User here.

