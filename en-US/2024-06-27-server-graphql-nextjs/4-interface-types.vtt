WEBVTT

1
00:00:00.004 --> 00:00:02.416
&gt;&gt; Scott Moss: We talked about scalar
types, we're talking about object types.

2
00:00:02.416 --> 00:00:04.053
We mentioned the query type.

3
00:00:04.053 --> 00:00:06.659
I promise I'll get to it in more
detail at the bottom of this, but

4
00:00:06.659 --> 00:00:08.510
let's get more into
some other things here.

5
00:00:08.510 --> 00:00:11.540
So we have this other thing
called interface type.

6
00:00:11.540 --> 00:00:15.127
If you've ever used any type system in
your life where there's TypeScript or

7
00:00:15.127 --> 00:00:18.726
type-based language like Java,
you kinda already know what interface is.

8
00:00:18.726 --> 00:00:21.670
Interface is like abstract type.

9
00:00:21.670 --> 00:00:26.567
It itself isn't an object, but it can
be implemented by other object types.

10
00:00:26.567 --> 00:00:32.309
So for instance,
you might have interface called character,

11
00:00:32.309 --> 00:00:37.523
and a character can be
implemented by other optic types.

12
00:00:37.523 --> 00:00:42.603
So if I'm making a video game and
I have interface called character,

13
00:00:42.603 --> 00:00:47.084
I might have two object types
that are of the type character.

14
00:00:47.084 --> 00:00:48.975
They share these same four fields, but

15
00:00:48.975 --> 00:00:51.506
they also have their own different fields,
right?

16
00:00:51.506 --> 00:00:56.352
So they share this interface because all
characters need a ID, a name, friends, and

17
00:00:56.352 --> 00:01:00.390
appears in, but this other object
type over also has these fields, and

18
00:01:00.390 --> 00:01:02.433
this object type has these fields.

19
00:01:02.433 --> 00:01:04.180
So that's what a interface is.

20
00:01:04.180 --> 00:01:06.206
So we can play around with that.

21
00:01:06.206 --> 00:01:09.947
So if we go back to our schema and
we make an interface here.

22
00:01:13.125 --> 00:01:17.212
&gt;&gt; Scott Moss: I can say interface,
and I'll call this a,

23
00:01:17.212 --> 00:01:21.423
I guess I will do the same thing,
character.

24
00:01:21.423 --> 00:01:25.066
So we can say character, and I'm just
gonna take the name off a person and

25
00:01:25.066 --> 00:01:27.893
put it on character because
all characters have a name.

26
00:01:27.893 --> 00:01:33.113
They have an outfit, I guess.

27
00:01:33.113 --> 00:01:34.398
That's a string, right?

28
00:01:34.398 --> 00:01:41.845
And then they have strengthStat, okay?

29
00:01:41.845 --> 00:01:44.918
And that is gonna be
an integer that's required.

30
00:01:44.918 --> 00:01:49.073
So now that I have that,
I can go down to my person and

31
00:01:49.073 --> 00:01:52.179
I can say this implements character.

32
00:01:56.831 --> 00:02:02.676
The only thing is you have to
put all the fields on it again.

33
00:02:02.676 --> 00:02:07.743
Was just kinda redundant, but it makes
sense if you dive into the tooling.

34
00:02:07.743 --> 00:02:12.257
And then I can put any other fields
in addition to a character that

35
00:02:12.257 --> 00:02:13.434
a person needs.

36
00:02:13.434 --> 00:02:17.487
So let's say a person
also has backgroundStory.

37
00:02:20.864 --> 00:02:22.339
&gt;&gt; Scott Moss: Something like that, right?

38
00:02:22.339 --> 00:02:23.525
So I could do that.

39
00:02:23.525 --> 00:02:28.397
And then I could make another
type that implements character.

40
00:02:28.397 --> 00:02:33.527
And I'll call this,
&gt;&gt; Scott Moss: An alien.

41
00:02:33.527 --> 00:02:41.083
And so having a backgroundStory, they
have a homeWorld, something like that.

42
00:02:46.939 --> 00:02:50.863
&gt;&gt; Scott Moss: And
then what I could do is instead of,

43
00:02:50.863 --> 00:02:55.280
actually I'll just make another query and

44
00:02:55.280 --> 00:02:59.093
I'll call it characters, plural.

45
00:02:59.093 --> 00:03:04.738
And it's gonna return a list of character,
like that.

46
00:03:08.690 --> 00:03:11.556
&gt;&gt; Scott Moss: And
I'm gonna say the list is non-null, so

47
00:03:11.556 --> 00:03:13.654
it must always return an array.

48
00:03:13.654 --> 00:03:17.558
I could also put an exclamation
inside the array and say,

49
00:03:17.558 --> 00:03:22.211
not only does it have to return an array,
the array cannot be empty.

50
00:03:22.211 --> 00:03:24.833
So that is something you can do as well.

51
00:03:27.784 --> 00:03:29.215
&gt;&gt; Scott Moss: So I'll do that.

52
00:03:29.215 --> 00:03:32.057
And let's see if we didn't break anything.

53
00:03:34.856 --> 00:03:36.041
&gt;&gt; Scott Moss: Okay, nothing broke,

54
00:03:36.041 --> 00:03:39.014
that's great [LAUGH] cuz it
will break if it's very strict.

55
00:03:39.014 --> 00:03:43.289
So now that I have that, what I can do
is I'm just gonna get rid of this query.

56
00:03:43.289 --> 00:03:46.691
And I'm going to say, give me a character.

57
00:03:46.691 --> 00:03:49.974
And then now you can see here on
the left it's like, okay, cool,

58
00:03:49.974 --> 00:03:51.125
you want a character?

59
00:03:51.125 --> 00:03:54.101
But you have these other things
that implement the character.

60
00:03:54.101 --> 00:03:56.145
You have a person that
implements the character,

61
00:03:56.145 --> 00:03:58.393
you also have an alien that
implements the character.

62
00:03:58.393 --> 00:04:01.926
So I'm gonna say, give me all the common
fields, I want those common fields.

63
00:04:01.926 --> 00:04:03.834
So let me run this, right-click.

64
00:04:03.834 --> 00:04:05.724
You can see I have the common fields.

65
00:04:05.724 --> 00:04:11.044
But notice, how do I know which
one of these is an alien or

66
00:04:11.044 --> 00:04:13.207
which one is a person?

67
00:04:13.207 --> 00:04:16.832
There's no indication of that,
they both implement the character.

68
00:04:16.832 --> 00:04:20.267
Well, there's a couple things you can do.

69
00:04:20.267 --> 00:04:24.703
One, you can add this field
called typename, like this.

70
00:04:24.703 --> 00:04:25.824
And what this will do,

71
00:04:25.824 --> 00:04:29.020
it will tell you the type of
the object that you are resolving to.

72
00:04:29.020 --> 00:04:33.621
So in this case, you can see
typename shows person or alien here.

73
00:04:33.621 --> 00:04:35.480
So that's one way you could figure it out.

74
00:04:35.480 --> 00:04:38.911
But now let's say I actually wanna
get this specific fields for

75
00:04:38.911 --> 00:04:40.669
the specific implementation.

76
00:04:40.669 --> 00:04:42.952
So for the person,
that's gonna be backgroundStory.

77
00:04:42.952 --> 00:04:45.276
And then for the alien, that's homeWorld.

78
00:04:45.276 --> 00:04:47.319
Notice it added these characters here.

79
00:04:47.319 --> 00:04:50.605
It added this dot dot dot
on dot dot dot on, right?

80
00:04:50.605 --> 00:04:53.694
So this is what's called
an inline fragment.

81
00:04:53.694 --> 00:04:57.240
And it's basically saying, okay, these
are the common fields for characters.

82
00:04:57.240 --> 00:05:00.873
So I don't have to specify what object
type I want these to come from cuz they

83
00:05:00.873 --> 00:05:01.747
all share these.

84
00:05:01.747 --> 00:05:03.165
But these are the specific fields.

85
00:05:03.165 --> 00:05:08.850
So when the character is a person,
I also want the backgroundStory.

86
00:05:08.850 --> 00:05:12.202
When the character is an alien,
I want its homeWorld.

87
00:05:12.202 --> 00:05:14.533
That's what the dot dot dot on is.

88
00:05:14.533 --> 00:05:18.859
But you can think of this as when a person
give me this, when an alien give me that.

89
00:05:18.859 --> 00:05:20.305
So I'm not gonna run this.

90
00:05:20.305 --> 00:05:23.768
You can see, for
the aliens I get the homeWorld, for

91
00:05:23.768 --> 00:05:26.223
the persons I get backgroundStory.

92
00:05:26.223 --> 00:05:30.195
So you can start to see how you can
compose different pieces of data from

93
00:05:30.195 --> 00:05:34.843
different places that share similar things
but also are quite different, but yet

94
00:05:34.843 --> 00:05:37.419
still, from a client side, make one query.

95
00:05:37.419 --> 00:05:42.520
And if you notice, we get back the exact
same shape in the exact same order that we

96
00:05:42.520 --> 00:05:47.868
requested, name, name, outfit, outfit,
strengthStat, backgroundStory.

97
00:05:47.868 --> 00:05:49.456
Everything's exactly the same, right?

98
00:05:49.456 --> 00:05:53.734
If I got rid of outfit, then it's gonna
be gone, it's not gonna be there.

99
00:05:53.734 --> 00:05:56.047
Just because it's all a scheme and
that'll mean I'm gonna get it back, right?

100
00:05:56.047 --> 00:05:59.753
The way you would handle this in rest is,
I'm just gonna give you back everything

101
00:05:59.753 --> 00:06:02.108
that's public for
this resource and send it back.

102
00:06:02.108 --> 00:06:03.927
And then if you wanna optimize for that,

103
00:06:03.927 --> 00:06:06.291
you'll build a query builder
on the end of that URL.

104
00:06:06.291 --> 00:06:08.913
You'll say, okay, all right, well,
you wanna do specific fields?

105
00:06:08.913 --> 00:06:13.263
Okay, I'll add support for
a query string where you can say select or

106
00:06:13.263 --> 00:06:14.538
you can say fields.

107
00:06:14.538 --> 00:06:18.125
And then maybe you can pass me
a JSON object that has the fields,

108
00:06:18.125 --> 00:06:22.609
the field name you want, colon, true or
false, and I'll return it, right?

109
00:06:22.609 --> 00:06:23.415
That's how it works.

110
00:06:23.415 --> 00:06:27.794
&gt;&gt; Speaker 2: What's the difference
between the exclamation mark

111
00:06:27.794 --> 00:06:32.470
on the character in the array
versus on the array itself?

112
00:06:32.470 --> 00:06:33.320
&gt;&gt; Scott Moss: Yeah, great question.

113
00:06:33.320 --> 00:06:39.754
So the exclamation mark follows
what you want to be required.

114
00:06:39.754 --> 00:06:44.605
So in this case, I have a exclamation
mark outside the array,

115
00:06:44.605 --> 00:06:48.259
that means characters
has to return an array.

116
00:06:48.259 --> 00:06:53.058
The array can be empty, but
it has to return an array.

117
00:06:53.058 --> 00:06:57.216
The exclamation mark on
the inside is saying,

118
00:06:57.216 --> 00:07:03.197
the array cannot be empty,
it must have a character in it at least.

119
00:07:03.197 --> 00:07:04.797
So this is saying,

120
00:07:04.797 --> 00:07:10.299
it must return a non-null array
that has at least one value in it.

121
00:07:10.299 --> 00:07:13.699
If I got rid of the inside exclamation,
this is just saying there will for

122
00:07:13.699 --> 00:07:16.730
sure always be an array,
there just might not be anything in it.

123
00:07:16.730 --> 00:07:21.913
If I got rid of one on the outside,
it saying, there might not be an array,

124
00:07:21.913 --> 00:07:27.027
and even if there was an array,
there might not be anything in the array.

125
00:07:27.027 --> 00:07:30.597
If I just put one on the inside and
nothing on the outside, this is saying,

126
00:07:30.597 --> 00:07:33.995
there might not be an array, but
if there was an array, there would for

127
00:07:33.995 --> 00:07:35.221
sure be something in it.

128
00:07:35.221 --> 00:07:37.896
So I don't know why you
would ever have that, but

129
00:07:37.896 --> 00:07:40.254
really just depends on your application.

130
00:07:40.254 --> 00:07:44.113
For me, if I have an array type, I always
do that cuz you should always want

131
00:07:44.113 --> 00:07:46.440
an array to come back
even when it's empty.

132
00:07:46.440 --> 00:07:49.565
That way, it doesn't break your
app cuz I'm thinking of a UI.

133
00:07:49.565 --> 00:07:52.741
You're gonna be mapping over
an array inside of React probably.

134
00:07:52.741 --> 00:07:56.725
You don't wanna check to see if
their arrays is there or not.

135
00:07:56.725 --> 00:07:58.447
It's much easier for
the array to be empty.

136
00:07:58.447 --> 00:08:01.893
So you had to change your code, then for
it to not exist in the first place,

137
00:08:01.893 --> 00:08:04.242
where that's gonna create
a branch in your code.

138
00:08:04.242 --> 00:08:08.402
So for me, I always just make sure
the array has exclamation on the outside.

139
00:08:08.402 --> 00:08:12.838
This part, that's gonna be use case.

140
00:08:12.838 --> 00:08:15.190
That's gonna be determined on
your use case, but for me,

141
00:08:15.190 --> 00:08:16.918
I always make sure the arrays is required.

142
00:08:16.918 --> 00:08:18.203
And that's just something
that I've learned.

