WEBVTT

1
00:00:00.110 --> 00:00:02.835
&gt;&gt; Scott: Let's get into the actual app,
we're just gonna be cruising through it.

2
00:00:02.835 --> 00:00:07.040
We're gonna make it work now that we
know all the tools so follow along.

3
00:00:07.040 --> 00:00:08.128
We're gonna get this app to work.

4
00:00:08.128 --> 00:00:09.499
We're gonna start with authentication.

5
00:00:09.499 --> 00:00:13.928
We're gonna talk about that and how it
works, and we're gonna implement it and

6
00:00:13.928 --> 00:00:14.730
get it going.

7
00:00:14.730 --> 00:00:19.962
First thing is we need to create our API,
and then,

8
00:00:19.962 --> 00:00:24.720
what you should do is
checkout to server/0.

9
00:00:29.079 --> 00:00:30.186
&gt;&gt; Scott: If you have any commits,

10
00:00:30.186 --> 00:00:32.887
make sure you commit them or
stash them before you checkout.

11
00:00:42.049 --> 00:00:46.417
&gt;&gt; Scott: And one thing to note,
I think we had a question earlier during

12
00:00:46.417 --> 00:00:51.877
the break, is someone had mentioned
in Next.js, Next.js has a config file

13
00:00:51.877 --> 00:00:56.930
where I'm doing a bunch of stuff,
this is really just me adding cores.

14
00:00:56.930 --> 00:00:59.488
If you don't know what cores is,
it's just a way for

15
00:00:59.488 --> 00:01:02.512
us to enable cross-origin
resource sharing for our server,

16
00:01:02.512 --> 00:01:06.138
which allows clients like browsers to
access us if we give them the right.

17
00:01:06.138 --> 00:01:09.917
It basically just lets the server
describe who can access it and

18
00:01:09.917 --> 00:01:11.565
what headers they can use.

19
00:01:11.565 --> 00:01:14.077
So this is just saying
anybody can use this.

20
00:01:14.077 --> 00:01:17.237
Obviously you can still have like
authentication through like,

21
00:01:17.237 --> 00:01:19.314
other means, but this is just just cores.

22
00:01:19.314 --> 00:01:21.172
But someone asked a question about like,
well,

23
00:01:21.172 --> 00:01:22.586
how do I configure a web pack in here?

24
00:01:22.586 --> 00:01:23.729
Well, it's the same.

25
00:01:23.729 --> 00:01:27.206
I don't know exactly, or remember exactly
how you do it with Next.js on web pack,

26
00:01:27.206 --> 00:01:28.659
but it's got to be the same thing.

27
00:01:28.659 --> 00:01:31.338
And the reason they're
asking that is because, so

28
00:01:31.338 --> 00:01:34.204
far, we've been writing our
schemas in a string, but

29
00:01:34.204 --> 00:01:37.403
you can also write your schemas
in a .GraphQL file, right?

30
00:01:37.403 --> 00:01:40.280
And for that file to be used,
you have two ways.

31
00:01:40.280 --> 00:01:44.834
You can read the file using the file
system, I don't recommend doing that in

32
00:01:44.834 --> 00:01:49.835
a serverless environment because the file
system is, it's just not guaranteed.

33
00:01:49.835 --> 00:01:50.940
It's ephemeral.

34
00:01:50.940 --> 00:01:52.386
The paths aren't where you think they are.

35
00:01:52.386 --> 00:01:55.239
So I don't recommend doing the file
system in a serverless environment.

36
00:01:55.239 --> 00:01:58.765
The second way is you can
teach web pack how to load

37
00:01:58.765 --> 00:02:01.352
that file through a custom loader.

38
00:02:01.352 --> 00:02:04.303
So if you do want to make your schema and
a .GraphQL file,

39
00:02:04.303 --> 00:02:08.004
instead of putting it in a string in
a JavaScript file, you can do that.

40
00:02:08.004 --> 00:02:12.514
You just need to configure Next.js
to use the GraphQL loader when

41
00:02:12.514 --> 00:02:17.270
it sees a .GraphQL or .GQL file so
when it when you import that file,

42
00:02:17.270 --> 00:02:20.960
it will basically transform
it into either a string or

43
00:02:20.960 --> 00:02:24.903
realistically a GraphQL
document that you can then use.

44
00:02:24.903 --> 00:02:27.376
So that is a workflow that you can use.

45
00:02:27.376 --> 00:02:29.546
I don't really care to put it in the file,

46
00:02:29.546 --> 00:02:33.088
I actually prefer it in JavaScript
that way I can do dynamic things.

47
00:02:33.088 --> 00:02:36.735
I don't like myself in graphical files,
but a lot of people do.

48
00:02:36.735 --> 00:02:38.694
So, you could totally do that if you want.

49
00:02:38.694 --> 00:02:43.742
And yeah,
you would just configure it here.

50
00:02:43.742 --> 00:02:48.374
Okay, so let's get into it.

51
00:02:48.374 --> 00:02:51.467
As you can see,
you have an API folder that says GraphQL,

52
00:02:51.467 --> 00:02:54.246
there's only one thing in it and
it's route.ts.

53
00:02:54.246 --> 00:02:55.882
There's literally nothing else in this.

54
00:02:55.882 --> 00:02:59.096
So the first step of this is
setting up our GraphQL server.

55
00:02:59.096 --> 00:03:02.454
That was already done for you in the demo,
so this is your first time setting it up.

56
00:03:02.454 --> 00:03:03.881
Let's get that going.

57
00:03:03.881 --> 00:03:05.896
I have the code here for it.

58
00:03:05.896 --> 00:03:09.362
So to set up a GraphQL server,
we need at least two things.

59
00:03:09.362 --> 00:03:11.701
We need a schema and we need a resolver.

60
00:03:11.701 --> 00:03:13.614
Those are the least two
things that we need, right?

61
00:03:13.614 --> 00:03:15.553
So let's make our schema.

62
00:03:15.553 --> 00:03:18.822
You can literally put whatever you want
because we're gonna be making a lot of

63
00:03:18.822 --> 00:03:19.383
this stuff.

64
00:03:19.383 --> 00:03:24.560
So I'm just gonna go make a schema, make
a file inside the GraphQL folder called

65
00:03:24.560 --> 00:03:29.611
schema.ts,
&gt;&gt; Scott: And make a schema.

66
00:03:29.611 --> 00:03:34.436
So I'm just gonna say
export const schema =,

67
00:03:36.007 --> 00:03:37.379
&gt;&gt; Scott: Back ticks like this.

68
00:03:37.379 --> 00:03:41.753
I'm gonna do my comment for GraphQL,
so I get my syntax highlighting and

69
00:03:41.753 --> 00:03:45.139
I'm just gonna make a quick
little schema right quick.

70
00:03:47.175 --> 00:03:50.241
Something to satisfy it so
it actually works.

71
00:03:50.241 --> 00:03:50.842
There we go.

72
00:03:50.842 --> 00:03:53.848
I'm not even gonna make it require it.

73
00:03:53.848 --> 00:03:58.586
So I got my schema,
you can do whatever you want here.

74
00:03:58.586 --> 00:04:01.414
The next thing I need to do, I just need
to make a quick resolver that resolves

75
00:04:01.414 --> 00:04:02.886
that, so I'm gonna do the same thing.

76
00:04:02.886 --> 00:04:06.362
I'm gonna make a file in the same
GraphQL folder, call it resolvers.

77
00:04:09.351 --> 00:04:14.676
&gt;&gt; Scott: And I'm gonna say,
export const resolvers = an object

78
00:04:14.676 --> 00:04:21.148
that has the query type with the field
of me, and it just returns me.

79
00:04:26.908 --> 00:04:28.466
&gt;&gt; Scott: Super simple.

80
00:04:28.466 --> 00:04:30.319
Not that crazy,
you can put whatever you want.

81
00:04:32.409 --> 00:04:35.479
&gt;&gt; Scott: And now we need to bring
it all together inside the route.ts.

82
00:04:35.479 --> 00:04:39.553
So if you've never used Next.js,
you can think of this as like,

83
00:04:39.553 --> 00:04:44.072
this one file is the equivalent,
if you used Express or Django or Flask or

84
00:04:44.072 --> 00:04:47.776
something like that,
this will be the equivalent of like,

85
00:04:47.776 --> 00:04:50.997
you know how you can make
a route verb combination.

86
00:04:50.997 --> 00:04:56.346
So when someone does a get request
to /api/ this, run this code.

87
00:04:56.346 --> 00:05:02.328
Okay, this is like, this file is where
you would set up all the verbs for

88
00:05:02.328 --> 00:05:05.340
this one route at /api/graphql.

89
00:05:05.340 --> 00:05:06.445
So this is the equivalent.

90
00:05:06.445 --> 00:05:11.467
So run this function when someone
does a get request to /api/graphql.

91
00:05:11.467 --> 00:05:15.810
Run this function when someone does
a post request to /api/graphql.

92
00:05:15.810 --> 00:05:21.787
These are the handlers for those verbs
inside of this route, api/graphql.

93
00:05:21.787 --> 00:05:25.535
We need to do some bindings here for
our Apollo service, so

94
00:05:25.535 --> 00:05:27.533
that's what we're gonna do.

95
00:05:27.533 --> 00:05:33.328
You scroll down, I actually have all
the code here on which we need to do.

96
00:05:33.328 --> 00:05:36.459
And I'm gonna walk through
pretty much all of it.

97
00:05:36.459 --> 00:05:42.281
It's a lot simpler just to copy all these
imports than writing them yourself,

98
00:05:42.281 --> 00:05:44.140
I'm just gonna do that.

99
00:05:44.140 --> 00:05:47.104
I think for me, the biggest difference,
what I just did is I had named exports.

100
00:05:47.104 --> 00:05:49.566
So we'll put brackets around my
stuff because they're names.

101
00:05:49.566 --> 00:05:52.681
And I think this one's called the schema
of mine, yours might be different.

102
00:05:52.681 --> 00:05:53.696
So I'll have that.

103
00:05:53.696 --> 00:05:55.950
I'm just going to consolidate my imports.

104
00:05:55.950 --> 00:05:58.436
That's the same imports,
I'm going to get rid of it.

105
00:05:58.436 --> 00:06:00.215
There we go, so we got that.

106
00:06:00.215 --> 00:06:04.056
The next part really is not that
important, it's very framework specific.

107
00:06:04.056 --> 00:06:06.751
This is what, you know,
when we go to the browser,

108
00:06:06.751 --> 00:06:10.163
we go to /api/graphql on the app loads up,
the Apollo Studio?

109
00:06:10.163 --> 00:06:11.959
This is how we get it.

110
00:06:11.959 --> 00:06:15.842
They have a plugin called
Apollo Server plugin landing page,

111
00:06:15.842 --> 00:06:17.866
so long, that's what this is.

112
00:06:17.866 --> 00:06:21.736
This is a landing page for
your GraphQL API, this is what enables it.

113
00:06:21.736 --> 00:06:25.220
So you can honestly just copy that,
this part is really not that important.

114
00:06:25.220 --> 00:06:29.168
And really all I'm doing here is just
like, hey, if you're in production,

115
00:06:29.168 --> 00:06:32.206
this graphRef thing,
this has nothing to do with GraphQL,

116
00:06:32.206 --> 00:06:36.215
this is if you use Apollo's service, for
your GraphQL API to do like tracing or

117
00:06:36.215 --> 00:06:39.797
whatever they give you like a graph or
ref, and you can put that here.

118
00:06:39.797 --> 00:06:44.539
Otherwise, we're on local hosts,
just embed it with auto graphRef and

119
00:06:44.539 --> 00:06:47.659
use the local and
not the production plug-in.

120
00:06:47.659 --> 00:06:49.790
This is really just to
start up that app for us.

121
00:06:49.790 --> 00:06:52.597
Your server will work without this,
you just won't be able to go and

122
00:06:52.597 --> 00:06:54.189
to play with it if you don't add this.

123
00:06:54.189 --> 00:06:56.575
Okay, and then the next part is
the part that really matters.

124
00:06:56.575 --> 00:06:59.631
So first we need to make a server,
we got to pass it our resolvers,

125
00:06:59.631 --> 00:07:03.645
our type definitions which are our schema
and then the plugins, which is this stuff.

126
00:07:03.645 --> 00:07:04.513
So let's do that.

127
00:07:04.513 --> 00:07:13.412
So we'll say const server,
&gt;&gt; Scott: Okay, there we go.

128
00:07:13.412 --> 00:07:15.899
It's for
some reason I can't type at this angle.

129
00:07:15.899 --> 00:07:21.215
Server = new ApolloServer.

130
00:07:21.215 --> 00:07:22.918
We're gonna pass in our resolvers.

131
00:07:22.918 --> 00:07:27.993
We're gonna pass in our plugins,
and then we're gonna pass

132
00:07:27.993 --> 00:07:32.784
in our type definitions,
which for me is called schema.

133
00:07:32.784 --> 00:07:34.416
I guess technically it's not a schema.

134
00:07:34.416 --> 00:07:38.464
I guess technically
the typeDefs together plus

135
00:07:38.464 --> 00:07:42.922
the resolvers is the schema,
but it's the schema.

136
00:07:45.005 --> 00:07:47.487
Cool, so now we have our server.

137
00:07:47.487 --> 00:07:50.509
&gt;&gt; Scott: What we need to do now is
we need to create a handler, right?

138
00:07:50.509 --> 00:07:53.973
So the handler is what
we're gonna replace.

139
00:07:53.973 --> 00:07:58.473
Right now these functions don't do
anything but return a a basic object, so

140
00:07:58.473 --> 00:08:02.129
we need to create a handler and
we can use these startServer and

141
00:08:02.129 --> 00:08:04.749
createNextHandler function from Apollo.

142
00:08:04.749 --> 00:08:10.279
So I'll say,
&gt;&gt; Scott: Handler equals

143
00:08:10.279 --> 00:08:15.488
startServer and CreateNextHandler.

144
00:08:15.488 --> 00:08:21.071
I'm using Typescript here and
I'm just gonna pass in this generic.

145
00:08:21.071 --> 00:08:24.275
A generic is basically like
an argument for types.

146
00:08:24.275 --> 00:08:26.628
So I can say NextRequest, so

147
00:08:26.628 --> 00:08:32.227
that way the request object is
type checked according to Next.js.

148
00:08:32.227 --> 00:08:34.818
It takes the argument of server,
I'm going to pass that in.

149
00:08:37.668 --> 00:08:39.257
&gt;&gt; Scott: So now we have our handler.

150
00:08:40.868 --> 00:08:43.156
&gt;&gt; Scott: There's a second
options argument.

151
00:08:43.156 --> 00:08:45.566
I think I have trouble if I
didn't put an empty object, so

152
00:08:45.566 --> 00:08:46.934
I'm gonna put an empty object.

153
00:08:49.492 --> 00:08:50.341
&gt;&gt; Scott: And then from there,

154
00:08:50.341 --> 00:08:52.943
we just need to supply our handler
to our get in our posts, right?

155
00:08:52.943 --> 00:08:55.774
So we're gonna return handler and
passing the request.

156
00:08:55.774 --> 00:08:59.550
So I'm just gonna copy both of these,

157
00:08:59.550 --> 00:09:04.040
return handler and
then pass in the request.

158
00:09:04.040 --> 00:09:08.264
There we go, now we have a GraphQL server.

159
00:09:08.264 --> 00:09:12.185
Depending on the technology that you use,
like Next.js, or Node,

160
00:09:12.185 --> 00:09:14.901
or Express,
this part is slightly different.

161
00:09:14.901 --> 00:09:20.012
Everything up is the same, it's this
handler part that will be different.

162
00:09:20.012 --> 00:09:24.300
You're always going to create, if you use
Apollo, there's more than one GraphQL

163
00:09:24.300 --> 00:09:27.805
server framework, but if you use Apollo,
this is always the same.

164
00:09:27.805 --> 00:09:29.805
You're always gonna make
a new Apollo server,

165
00:09:29.805 --> 00:09:31.661
you're always gonna pass in these things.

166
00:09:31.661 --> 00:09:34.110
It's this part that's
specific to the framework.

167
00:09:34.110 --> 00:09:35.753
So literally just one line.

168
00:09:37.674 --> 00:09:40.392
&gt;&gt; Scott: This is why I said you don't
really need to know Next.js to get

169
00:09:40.392 --> 00:09:43.553
a benefit from this, this is the only
Next.js specific thing is this.

170
00:09:47.527 --> 00:09:49.369
&gt;&gt; Scott: Okay, any questions on that?

171
00:09:50.652 --> 00:09:54.742
&gt;&gt; Scott: Well, okay, so we did this
right, should be able to run this.

172
00:09:55.926 --> 00:09:58.470
&gt;&gt; Scott: Let's see, npm run.

173
00:10:00.384 --> 00:10:02.222
&gt;&gt; Scott: Hopefully this works.

174
00:10:02.222 --> 00:10:08.105
So now we can go to
the same thing right here,

175
00:10:08.105 --> 00:10:13.045
/GraphQL, and ta-da, it works.

176
00:10:13.045 --> 00:10:15.007
And now if we go look at our schema,

177
00:10:15.007 --> 00:10:19.695
we can see that whatever you're putting
your schema, you should see that there.

178
00:10:19.695 --> 00:10:23.160
Yours is different than mine, you should
see something different, but there we go.

179
00:10:23.160 --> 00:10:26.287
We have a server, we created it,
it's literally gonna be the same for

180
00:10:26.287 --> 00:10:27.512
everything that you make.

181
00:10:27.512 --> 00:10:31.967
So congrats, you now know how to make
a Hello World GraphQL server from scratch,

182
00:10:31.967 --> 00:10:32.895
you graduated.

