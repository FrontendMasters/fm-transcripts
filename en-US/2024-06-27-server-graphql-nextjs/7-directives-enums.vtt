WEBVTT

1
00:00:00.000 --> 00:00:03.460
&gt;&gt; Scott: So directives, I kinda just
talked about it for a little bit.

2
00:00:03.460 --> 00:00:07.011
You'll probably almost never use these
until you become like, I don't know,

3
00:00:07.011 --> 00:00:08.920
you just become really badass at GraphQL.

4
00:00:08.920 --> 00:00:13.633
You're just like, I'm just out here making
custom directives because I can, sure,

5
00:00:13.633 --> 00:00:16.360
there's some pretty crazy
stuff you can do here.

6
00:00:16.360 --> 00:00:21.088
There's tons of plugins you can download,

7
00:00:21.088 --> 00:00:26.068
the best way I can describe it,
is you can think

8
00:00:26.068 --> 00:00:31.195
about it as middleware for
a field or an entity.

9
00:00:31.195 --> 00:00:36.285
Cuz you can put a directive on a field,
you can also put it on a type as well.

10
00:00:36.285 --> 00:00:41.248
And it's basically middleware for
that, it's a function that will run to

11
00:00:41.248 --> 00:00:46.073
hijack when that entity is either created,
there's many life cycles.

12
00:00:46.073 --> 00:00:50.370
So a directive allows you to tie
into the life cycle of a field or

13
00:00:50.370 --> 00:00:54.683
an entity and do something when
that life cycle is triggered.

14
00:00:54.683 --> 00:00:58.993
So, I wanna run this function,
for instance, deprecated.

15
00:00:58.993 --> 00:01:02.813
If we were to add this,
this is a built-in directive,

16
00:01:02.813 --> 00:01:07.549
what this would do is it would add
a comment in the notes of the GraphQL

17
00:01:07.549 --> 00:01:12.805
explorer that we're using to let you
know that it's deprecated, right?

18
00:01:12.805 --> 00:01:17.538
So if I were to go look at the schema here
and one of these fields are deprecated,

19
00:01:17.538 --> 00:01:19.205
it would probably tell me.

20
00:01:19.205 --> 00:01:23.833
So let's go that just so
you can see what I'm talking about.

21
00:01:23.833 --> 00:01:28.352
Profile, let's just say at deprecated,

22
00:01:28.352 --> 00:01:32.634
I can spell, is that how you spell that?

23
00:01:32.634 --> 00:01:33.996
Deprecated.

24
00:01:37.385 --> 00:01:38.283
&gt;&gt; Scott: Yeah, that is how you spell it.

25
00:01:38.283 --> 00:01:41.782
So you can give it a reason,
you can put whatever you want there.

26
00:01:41.782 --> 00:01:49.572
So I'll say deprecated reason no more,
right?

27
00:01:49.572 --> 00:01:54.238
I say that, I can go back to our username
and pretty sure this is built-in,

28
00:01:54.238 --> 00:01:55.066
let's see.

29
00:01:57.932 --> 00:02:01.425
&gt;&gt; Scott: I put single quotes, gotta put
double quotes I do that all the time.

30
00:02:03.075 --> 00:02:04.795
It's very strict, there we go.

31
00:02:04.795 --> 00:02:09.580
So now if I go back to our schema,
I put that on the person.

32
00:02:13.959 --> 00:02:16.105
&gt;&gt; Scott: Or no, it wasn't all perfect,
it was on profile, right?

33
00:02:16.105 --> 00:02:19.775
There we go, and
you see right here, deprecated.

34
00:02:19.775 --> 00:02:24.009
That's what that directive does it just
tells you that this field is deprecated.

35
00:02:25.179 --> 00:02:29.189
It's mostly for documentation, and
there are some other built-in ones.

36
00:02:29.189 --> 00:02:33.035
Some of the ones that I've made that were
useful and I'll talk a little more about

37
00:02:33.035 --> 00:02:36.959
it when it gets authentication where
we're like directors for authentication.

38
00:02:36.959 --> 00:02:43.455
So in my schema,
this is where it gets really powerful.

39
00:02:43.455 --> 00:02:48.297
For a search result there are some
things you want non-logged

40
00:02:48.297 --> 00:02:51.065
in people to be able to search for.

41
00:02:51.065 --> 00:02:53.602
But then there's some things you don't
want them to be able to search for

42
00:02:53.602 --> 00:02:54.905
unless they're logged in, right?

43
00:02:54.905 --> 00:02:59.495
So for a profile, I say,
all right, I'll let you search for

44
00:02:59.495 --> 00:03:05.617
a profile you can see their username and
ID, but you can't see who the person is.

45
00:03:05.617 --> 00:03:13.147
So this is all, and maybe I'll say,
required true or something like that.

46
00:03:13.147 --> 00:03:18.341
So I'll make a directive that this field,
if access through a query has

47
00:03:18.341 --> 00:03:24.331
to pass authentication, otherwise it can't
be sent down right on a field level.

48
00:03:24.331 --> 00:03:29.987
So I can do a field level, I can do
a query level, I can do a type level.

49
00:03:29.987 --> 00:03:33.508
So you can get pretty granular with
the things that you wanna show, and

50
00:03:33.508 --> 00:03:36.261
then I would have to go write
the code to make this work.

51
00:03:36.261 --> 00:03:39.709
And it's not too crazy, we won't be
writing custom directives today,

52
00:03:39.709 --> 00:03:42.024
cuz I think it is this
a little more advanced, but

53
00:03:42.024 --> 00:03:44.582
this is probably one of
the best use cases I've seen.

54
00:03:46.182 --> 00:03:49.964
Just to note,
directives are a type of entity and

55
00:03:49.964 --> 00:03:54.312
GraphQL that work on the schema,
but also in the query.

56
00:03:54.312 --> 00:03:57.887
But those are two different types of
directives, so you can do directives and

57
00:03:57.887 --> 00:03:59.222
the query as well.

58
00:03:59.222 --> 00:04:02.885
And I've seen some pretty cool ones,
I've almost never really used them.

59
00:04:02.885 --> 00:04:06.396
There's a few ones that some of them have,
but

60
00:04:06.396 --> 00:04:10.356
I think some of the really
cool ones that I've seen,

61
00:04:10.356 --> 00:04:14.695
were only see Lodash GraphQL,
this one's pretty cool.

62
00:04:16.895 --> 00:04:25.258
You can do Lodash functions on a query.

63
00:04:25.258 --> 00:04:29.812
So if you never use Lodash, it's like
helper methods that allow you to operate

64
00:04:29.812 --> 00:04:32.208
on arrays and objects, every filter.

65
00:04:32.208 --> 00:04:36.372
I mean, some of the stuff is built
into Javascript global now, but for

66
00:04:36.372 --> 00:04:38.568
the most part, it's quite useful.

67
00:04:38.568 --> 00:04:42.900
So you can run Lodash functions
as directives inside your,

68
00:04:42.900 --> 00:04:46.546
query, which is quite
impressive in my opinion.

69
00:04:46.546 --> 00:04:52.436
So this is a useful example of the power
of what you can do with directives.

70
00:04:52.436 --> 00:04:56.096
And there's tons of these out there,
so you can get pretty creative.

71
00:04:56.096 --> 00:04:58.856
But for the most part it's like yeah,
you could do this here.

72
00:04:58.856 --> 00:05:03.711
But I feel do I really wanna build
an API that allows people to do that or

73
00:05:03.711 --> 00:05:09.001
should I just have it taken as an argument
and write that in the code myself?

74
00:05:09.001 --> 00:05:12.536
It really just depends on what use
case you want and things like that.

75
00:05:16.536 --> 00:05:21.185
&gt;&gt; Scott: Okay,
any questions on directives?

76
00:05:25.473 --> 00:05:26.490
&gt;&gt; Scott: Yes.

77
00:05:26.490 --> 00:05:30.695
&gt;&gt; Speaker 2: How does GraphQL access
these things that would seem to be outside

78
00:05:30.695 --> 00:05:32.621
the scope of querying a dB?

79
00:05:32.621 --> 00:05:35.391
Does it have some kind of callback hook?

80
00:05:35.391 --> 00:05:38.101
&gt;&gt; Scott: Yeah, exactly,
it does have some type of callback hook.

81
00:05:38.101 --> 00:05:43.772
I've been kinda talking about it, but it's
basically, you would have to write code

82
00:05:43.772 --> 00:05:48.813
that ties into the, there's life cycle
methods of how a graphical schema is

83
00:05:48.813 --> 00:05:54.372
processed when it starts, when it's being
validated, when a field is accessed.

84
00:05:54.372 --> 00:05:58.398
If you've ever worked on any
type of language before or

85
00:05:58.398 --> 00:06:04.352
tried to build a language, there's
something called an abstract syntax tree,

86
00:06:04.352 --> 00:06:06.995
it does pattern matching, right?

87
00:06:06.995 --> 00:06:10.960
And it will figure out, okay, this is
a node, this is a node, this is a node,

88
00:06:10.960 --> 00:06:14.742
this is a node, every language does this,
And GraphQL is a language, and

89
00:06:14.742 --> 00:06:16.115
you can hook into that.

90
00:06:16.115 --> 00:06:20.222
You can say, cool,
I want to run this function when a node or

91
00:06:20.222 --> 00:06:25.247
a node whose type is filled is accessed,
run my function first, right?

92
00:06:25.247 --> 00:06:27.867
So you can do that and
that function can be a directive.

93
00:06:27.867 --> 00:06:30.424
So you can say run this directive first,
but

94
00:06:30.424 --> 00:06:34.852
what actually ends up happening for
some of those queries that I showed you,

95
00:06:34.852 --> 00:06:39.237
those queries are probably happening
after the data is resolved, right?

96
00:06:39.237 --> 00:06:43.154
So it's after the data is resolved, run
this directive, and then that directive

97
00:06:43.154 --> 00:06:46.827
uses that Lodash function to apply
it to the data that was resolved.

98
00:06:46.827 --> 00:06:51.977
Because you can tie into many
stages of a hook inside of GraphQL.

99
00:06:51.977 --> 00:06:56.709
So I would imagine the Lodash one is
probably tying into after that field or

100
00:06:56.709 --> 00:07:01.077
that query was resolved before
they send the results back.

101
00:07:01.077 --> 00:07:04.868
Use this directives function to process
the data and then send that back.

102
00:07:04.868 --> 00:07:07.868
I'm pretty sure that's what's happening
because it would need the data first.

103
00:07:07.868 --> 00:07:10.911
So yes,
you can hook into different stages and

104
00:07:10.911 --> 00:07:16.778
different nodes in GraphQL and
it's really, really, really powerful.

105
00:07:16.778 --> 00:07:19.572
Okay, and
then there's some more built-in ones,

106
00:07:19.572 --> 00:07:23.735
but no one's really using directives
like that, I'm gonna be honest.

107
00:07:23.735 --> 00:07:27.075
They're powerful, but
it's just like is it worth it?

108
00:07:27.075 --> 00:07:27.655
Who knows?

109
00:07:29.075 --> 00:07:31.365
Cool, the next one is input types.

110
00:07:31.365 --> 00:07:34.305
Input types are a description.

111
00:07:34.305 --> 00:07:39.695
We haven't talked about arguments yet,
so maybe we'll talk about arguments.

112
00:07:39.695 --> 00:07:41.394
Right now, we'll talk about enums.

113
00:07:41.394 --> 00:07:44.644
So enums are exactly what they sound like,
if you ever built a database or

114
00:07:44.644 --> 00:07:47.574
even use Typescript,
an enum is just saying it's a string type,

115
00:07:47.574 --> 00:07:49.644
but it's gotta be one of these strings.

116
00:07:49.644 --> 00:07:51.204
That's basically what an enum type is,
right?

117
00:07:51.204 --> 00:07:57.347
So I can come here, I can say,
I wanna make an enum.

118
00:07:57.347 --> 00:08:01.531
I'm gonna call this enum STATUSES,
I guess.

119
00:08:01.531 --> 00:08:06.284
Typically, enums are all caps,
but they don't have to be.

120
00:08:06.284 --> 00:08:10.648
And I can say one status is in progress,

121
00:08:10.648 --> 00:08:16.244
another status is done,
another one is to do.

122
00:08:16.244 --> 00:08:19.159
So I have statuses here and then now,

123
00:08:19.159 --> 00:08:23.216
let's make a new type guess just for
the heck of it.

124
00:08:23.216 --> 00:08:28.455
I could say type a to-do and might have

125
00:08:28.455 --> 00:08:35.340
a status on it whose type is STATUSES,
like that.

126
00:08:36.679 --> 00:08:39.956
&gt;&gt; Scott: And it's basically the same as
a database, same as any type language.

127
00:08:39.956 --> 00:08:42.782
It's just saying it's
gotta be one of these.

