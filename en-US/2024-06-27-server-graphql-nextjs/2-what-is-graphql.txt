[00:00:00]
>> Scott Moss: For this part, I'm just gonna kinda just talk about what is GraphQL. I also talk about this in the client side course, so if you watch that, it's gonna be kind of a recap for you. But basically, GraphQL, you can read the definition here of what it is.

[00:00:14]
The way I describe GraphQL is basically like two parts, there is a query language, that's the QL part in graph. That query language is used to traverse any type of data source or a mini data sources, in a very descriptive way. So that query language allows you to literally say, this is the shape of data that I want from the available data that I know about.

[00:00:37]
Make sure you return the data in this exact shape, so that's the query language. The other side of it is what we're making today, is gonna be the part that satisfies that query language, that's gonna be the server component. So that server, its job is to architecture some way in which a client can query the given schema in any direction, any format, any shape that they want.

[00:01:01]
So they can be pretty close to infinite amount of possibilities in which someone can query a graphical schema, depending on how big the schema is. So the server's job is to make sure that all those possibilities can be fulfilled, which sounds quite difficult if you think about it from a perspective of making one REST route for one resource plus code action.

[00:01:23]
That sounds like you'd be making a lot of routes and verbs and things like that, but it's not architecture like that as you'll soon find out. So that's kinda how I describe GraphQL. And then just to tie it all together, there's a lot of type safety. So having that schema that tells the client what resources it can access and then have in the back end fulfill that query, there's type safety involved to ensure that the client can only ask for things in the certain type in which the schema created.

[00:01:51]
And if that contract is violated, the server will automatically error out. So if you don't satisfy the right types on the back end, if you ask for different things on the front end, you're gonna get errors. So that's not something unique to servers, but typically that's something you had to build yourself.

[00:02:11]
Every company I've ever worked at, where we were not using something like GraphQL, part of the stack was for sure validating input from a client. It's like, okay, here's the input, either we validate it from scratch, I've used things like runtime schemas like Zod or things like that, that will validate some user input.

[00:02:29]
Because you don't wanna trust the clients before we even interact with the database, which has another layer of validation with it's own schema. And then on the front end for a form, you might have front end form validation, so there's three layers of validation you might have when it comes to accepting user input.

[00:02:44]
GraphQL takes care of the validating from the client to the back end that's done for free, given a schema just like a database schema. If you try to violate that the database should error out as well if you have some primary key or some foreign key constraints on the SQL database.

[00:03:01]
And you tried to violate that on insert, then yeah, you're gonna have arrows thrown from the database for free. You didn't have to write that code, you basically get that same experience, but on the API layer where GraphQL, so it's quite effective, as you'll soon find out. So created by Facebook, long time ago.

[00:03:20]
And since then, it's evolved into, I would say it's pretty much a standard at this point when comparing it to other types of things out there like GRPC, obviously, REST, and there's now TRPC, it's definitely up there. It's definitely in the conversation when it comes to what API should be built for something new.

[00:03:41]
GraphQL is something that we thought about a lot at the company that I'm building and how we might use it, because of just how useful it can be. But now it's maintained by a large community, there are like companies built, on creating, services and plugins and all different types of products, for GraphQL developers.

[00:04:01]
So when you see that, you know it's always a massive opportunity.

