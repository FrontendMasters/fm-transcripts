WEBVTT

1
00:00:00.000 --> 00:00:03.649
&gt;&gt; Scott Moss: Hopefully some of the stuff
we've talked about so far in the GraphQL

2
00:00:03.649 --> 00:00:07.309
schema definition language has
been nothing short of impressive.

3
00:00:07.309 --> 00:00:10.375
Because I remember when I was first
learning GraphQL, I was like,

4
00:00:10.375 --> 00:00:13.076
I don't know why I would ever
use anything else than this.

5
00:00:13.076 --> 00:00:16.313
But it's not a perfect solution,

6
00:00:16.313 --> 00:00:20.897
it's definitely a tool for
a specific problem.

7
00:00:20.897 --> 00:00:24.412
I guess it's like one of those times
where you start using TypeScript for

8
00:00:24.412 --> 00:00:27.296
the first time or any type language and
you're like, wow,

9
00:00:27.296 --> 00:00:30.661
I don't have to write tests to see
if something is this certain type.

10
00:00:30.661 --> 00:00:35.062
Assuming you wrote tests in the first
place, it kind of felt like that.

11
00:00:35.062 --> 00:00:38.759
But let's keep it moving on some
of the other things in the skeeba

12
00:00:38.759 --> 00:00:40.131
definition language.

13
00:00:40.131 --> 00:00:41.635
Talked about unions.

14
00:00:41.635 --> 00:00:46.899
We already talked about these type
modifiers like exclamation and

15
00:00:46.899 --> 00:00:49.818
list fields, nothing crazy there.

16
00:00:49.818 --> 00:00:52.974
We didn't talk about relationships,
so let's talk about relationships.

17
00:00:52.974 --> 00:00:57.622
And this is really like the whole crux of
like GraphQL, like everything's a graph,

18
00:00:57.622 --> 00:00:59.201
there's relational data.

19
00:00:59.201 --> 00:01:04.657
And the rest, this is so
hard to figure out and resolve but here,

20
00:01:04.657 --> 00:01:10.235
with GraphQL, it's quite simple,
at least on the schema side.

21
00:01:10.235 --> 00:01:12.890
On the resolver side,
I think this is where it gets confusing to

22
00:01:12.890 --> 00:01:15.410
a lot of people, and
we'll cover that today, obviously.

23
00:01:15.410 --> 00:01:20.488
But let's hop into the relationships,
so for the relationships,

24
00:01:20.488 --> 00:01:26.022
let's go back to our code, and
like I said before, please follow along.

25
00:01:26.022 --> 00:01:28.014
Let's see, what's a good example
we can do for a relationship?

26
00:01:28.014 --> 00:01:35.352
So we can say, how about we say,
we can say a profile has a person,

27
00:01:35.352 --> 00:01:40.304
cuz I don't fully like making another one.

28
00:01:40.304 --> 00:01:44.304
So let's say a profile can have a person,
so I can give it a field called person,

29
00:01:44.304 --> 00:01:47.129
right, and then I can say its
type is person, not null.

30
00:01:47.129 --> 00:01:50.795
And then do we have a query for profile?

31
00:01:50.795 --> 00:01:52.442
Yes, we do on the union search.

32
00:01:52.442 --> 00:01:55.554
So I'll do the search result query,
I'll get a profile,

33
00:01:55.554 --> 00:01:59.185
then I'll get the person on the profile,
so let's check that out.

34
00:01:59.185 --> 00:02:03.147
So I'm gonna go back to our example here,
refresh this,

35
00:02:03.147 --> 00:02:05.469
make sure nothing broke, cool?

36
00:02:05.469 --> 00:02:08.686
And you'll know, when you refresh this,
if your schema was jacked up,

37
00:02:08.686 --> 00:02:09.653
this would not load.

38
00:02:09.653 --> 00:02:12.425
So if this loads, your schema's good,

39
00:02:12.425 --> 00:02:16.102
[LAUGH] you didn't do anything
wrong as far as syntax.

40
00:02:16.102 --> 00:02:19.439
You might not have the right behavior that
you're expecting, but as far as syntax,

41
00:02:19.439 --> 00:02:20.708
you didn't do anything wrong.

42
00:02:20.708 --> 00:02:24.118
So it's really executing code at runtime,

43
00:02:24.118 --> 00:02:28.551
you're gonna get syntax errors
if you try to execute it.

44
00:02:28.551 --> 00:02:31.310
So if the server tries
to execute your schema,

45
00:02:31.310 --> 00:02:34.220
it will throw an error if
something is not valid.

46
00:02:34.220 --> 00:02:37.861
So something to keep an eye out on,
so we got that.

47
00:02:37.861 --> 00:02:40.658
I don't care about
the tweet stuff right now.

48
00:02:40.658 --> 00:02:45.555
I'm just gonna say profile, and then for
profile, I wanna get the person.

49
00:02:45.555 --> 00:02:48.678
And you can see right here I get
all the fields for a person.

50
00:02:48.678 --> 00:02:52.269
So I can say I want the backstory,

51
00:02:52.269 --> 00:02:57.406
I want the name, yeah,
let's just run those.

52
00:02:57.406 --> 00:03:00.876
So all you have to do is just expand it,
on an object type.

53
00:03:00.876 --> 00:03:05.133
So anything that's a relationship, you
just have to put your brackets here, and

54
00:03:05.133 --> 00:03:09.521
you can make it, you pick what fields you
want there, and you hit that, there we go.

55
00:03:09.521 --> 00:03:12.367
We got our person,
we got our fields there.

56
00:03:12.367 --> 00:03:15.317
It comes back exactly the way that
you think it would've come back as

57
00:03:15.317 --> 00:03:16.109
a nested object.

58
00:03:16.109 --> 00:03:17.816
It's pretty simple, right?

59
00:03:17.816 --> 00:03:22.153
Let's run into a scenario that
where it gets quite complicated.

60
00:03:22.153 --> 00:03:28.575
So let's say I have a person type,
but on the person type,

61
00:03:28.575 --> 00:03:34.617
I also want to be able to look
at the profile of a person.

62
00:03:34.617 --> 00:03:41.348
So I can say a person also has a profile,
&gt;&gt; Scott Moss: Right?

63
00:03:41.348 --> 00:03:44.993
We're saying a profile has a person and
a person has a profile, it's a one-to-one

64
00:03:44.993 --> 00:03:48.093
relationship, that's very common,
so this is how you would do that.

65
00:03:48.093 --> 00:03:51.850
I have a person that has a profile,
a person has a profile, and

66
00:03:51.850 --> 00:03:53.597
a profile that has a person.

67
00:03:53.597 --> 00:03:58.197
So if I go back here, and I'm refreshing,
but I don't think you have to refresh,

68
00:03:58.197 --> 00:04:02.265
this tool is pinging your schema like
every one second to get the latest,

69
00:04:02.265 --> 00:04:04.288
I just refresh for sanity reasons.

70
00:04:04.288 --> 00:04:07.158
So now if I'm on a person and
I say, okay, cool,

71
00:04:07.158 --> 00:04:09.400
I wanna get the profile of the person.

72
00:04:09.400 --> 00:04:11.139
Okay, cool, I get the profile.

73
00:04:11.139 --> 00:04:15.084
And I wanna get the profiles username,
so I run that.

74
00:04:15.084 --> 00:04:15.746
There we go.

75
00:04:15.746 --> 00:04:21.264
So I do a search result, I get a profile,
I get the person of that profile,

76
00:04:21.264 --> 00:04:24.388
and then I get the profile of that person.

77
00:04:24.388 --> 00:04:28.436
So as you might be aware of,
this can be bad, right,

78
00:04:28.436 --> 00:04:33.404
cuz I can keep going, I can say,
well, cool, give me the user or

79
00:04:33.404 --> 00:04:38.378
give me the person of that, and
then give me the profile of that.

80
00:04:38.378 --> 00:04:42.539
And then give me the person of that and
then give profile of that, and

81
00:04:42.539 --> 00:04:46.043
you can just keep going and
going and going and going, and

82
00:04:46.043 --> 00:04:48.909
this is the cyclic nature
of a GraphQL schema.

83
00:04:48.909 --> 00:04:53.825
Depending on the resources of your
machine where this is running,

84
00:04:53.825 --> 00:04:57.179
it will definitely
attempt to execute that.

85
00:04:57.179 --> 00:05:01.919
This will probably return instantly
if I did it cause I think it's all

86
00:05:01.919 --> 00:05:03.646
just running In memory.

87
00:05:03.646 --> 00:05:06.123
Let's see.
Or maybe they built in some protections,

88
00:05:06.123 --> 00:05:06.978
let's find out.

89
00:05:06.978 --> 00:05:10.878
No, this returns instantly because
it's they're just using recursion and

90
00:05:10.878 --> 00:05:13.284
going all the way down and
doing this in memory.

91
00:05:13.284 --> 00:05:19.923
But if each one of these was a database
query or an API call, I don't know.

92
00:05:19.923 --> 00:05:24.154
This depending on your machine and
where this code is running, this might not

93
00:05:24.154 --> 00:05:28.859
ever resolve, you might get a timeout, you
might get errors, you might get issues.

94
00:05:28.859 --> 00:05:32.882
So very quickly,
if you had a developer facing GraphQL API.

95
00:05:32.882 --> 00:05:36.245
And someone noticed this cyclic
relationship between two nodes and

96
00:05:36.245 --> 00:05:39.909
they wanted to DDoS you, there's
nothing stopping her from doing that.

97
00:05:39.909 --> 00:05:46.280
I can just write a script that creates,
I don't know, 300 nested profile person,

98
00:05:46.280 --> 00:05:51.708
nested objects and just run that in
a loop and see what happens to your API.

99
00:05:51.708 --> 00:05:56.394
So that would suck, and that's one of
the downsides of graphic about the box is

100
00:05:56.394 --> 00:06:00.585
that because it's graph,
you have these cyclic relationships and.

101
00:06:00.585 --> 00:06:05.513
And there isn't anything built into
the GraphQL spec that will stop this

102
00:06:05.513 --> 00:06:06.736
from happening.

103
00:06:06.736 --> 00:06:08.161
However, there are tools and

104
00:06:08.161 --> 00:06:11.239
plugins outside of the GraphQL
spec that kind of prevent this and

105
00:06:11.239 --> 00:06:15.061
they all have their own different
trade-offs, there is no perfect solution.

106
00:06:15.061 --> 00:06:19.629
But it's mostly a concern with
developer facing GraphQL APIs.

107
00:06:19.629 --> 00:06:22.203
If you're building a GraphQL API for
your own product,

108
00:06:22.203 --> 00:06:25.015
then don't write a query that
does that and you'll be fine.

109
00:06:25.015 --> 00:06:29.004
But you can't help what
developers might do, so

110
00:06:29.004 --> 00:06:33.103
there are ways to get around it and
circumvent it.

111
00:06:33.103 --> 00:06:36.570
And caching is something
that can help with that, and

112
00:06:36.570 --> 00:06:38.889
there's different ways to cache.

113
00:06:38.889 --> 00:06:43.612
I've seen people, what they'll do is,
they'll give, it's so complicated but

114
00:06:43.612 --> 00:06:47.053
like, though we haven't talked
about directives yet, but

115
00:06:47.053 --> 00:06:49.831
you can add directives
here that like do things.

116
00:06:49.831 --> 00:06:55.211
And something you might do is
&gt;&gt; Scott Moss: You might say,

117
00:06:55.211 --> 00:07:00.934
this thing has like, a score of,
I don't know, five or something like that.

118
00:07:00.934 --> 00:07:08.744
And you might put in your code that no
query can be of score more than 200.

119
00:07:08.744 --> 00:07:10.905
So once it starts going
through all these fields,

120
00:07:10.905 --> 00:07:15.021
it'll start counting the score like, you
went over 200 so the query stopped, right,

121
00:07:15.021 --> 00:07:16.316
so it can do things like that.

122
00:07:16.316 --> 00:07:18.825
There's like so
many ways I've seen people attempt this.

123
00:07:18.825 --> 00:07:22.184
It really depends on the experience
you wanna offer to your developers, so

124
00:07:22.184 --> 00:07:25.539
you can, you can call it a score,
you can call it a weight, there's many,

125
00:07:25.539 --> 00:07:26.579
many different ways.

126
00:07:26.579 --> 00:07:31.034
I've seen people say,
they jack into the abstract syntax tree,

127
00:07:31.034 --> 00:07:35.903
the AST of GraphQL schema, and
count how many times you go down a level.

128
00:07:35.903 --> 00:07:39.579
And then they can say, we're only gonna
let you go down in amount of levels,

129
00:07:39.579 --> 00:07:42.985
once you go past that, we stop it,
we throw an error you can't go further,

130
00:07:42.985 --> 00:07:45.335
there's no one way, and
they all have trade offs.

131
00:07:45.335 --> 00:07:47.630
It's all about the developer
experience at that point.

132
00:07:47.630 --> 00:07:51.118
But again, if you're building an API for
your own consumption and your own app,

133
00:07:51.118 --> 00:07:52.104
this is not a problem.

134
00:07:52.104 --> 00:07:56.057
Just don't write a query that
does that and protect your API so

135
00:07:56.057 --> 00:07:59.795
it's not used by anyone,
not on your app, you're fine.

136
00:08:03.902 --> 00:08:05.175
&gt;&gt; Scott Moss: Cool,
any questions on that?

137
00:08:07.228 --> 00:08:08.016
&gt;&gt; Scott Moss: Yes.

138
00:08:09.633 --> 00:08:14.277
&gt;&gt; Learner: I don't see any data in
Terso related to person, alien, tweet,

139
00:08:14.277 --> 00:08:16.901
etc, where is the data coming from?

140
00:08:16.901 --> 00:08:19.900
&gt;&gt; Scott Moss: It's a great question,
so we kind of breezed over it earlier,

141
00:08:19.900 --> 00:08:23.823
we haven't gotten to the part of making
a schema where you actually make the data.

142
00:08:23.823 --> 00:08:26.598
We're gonna do that as soon as we go
through the schema definition language.

143
00:08:26.598 --> 00:08:28.384
So where's the data coming from?

144
00:08:28.384 --> 00:08:33.981
If you go into the route TS file of /API,
/app/api/graphql

145
00:08:33.981 --> 00:08:39.168
route right here where we're
making a new Apollo Server.

146
00:08:39.168 --> 00:08:43.740
We're using this function called
addMocksToSchema, what this function does,

147
00:08:43.740 --> 00:08:47.991
is it does exactly what it says it does,
it will add mock data to your schema.

148
00:08:47.991 --> 00:08:51.847
So here's our schema, we give it
our schema, and what it will do is,

149
00:08:51.847 --> 00:08:55.573
whenever we query that schema,
it will generate mock data for us,

150
00:08:55.573 --> 00:08:58.857
based off the primitive or
scholar types of those fields.

151
00:08:58.857 --> 00:09:01.589
So the C string,
it will probably return hello world.

152
00:09:01.589 --> 00:09:05.048
If it sees number, it'll return
a random number, if it sees booing,

153
00:09:05.048 --> 00:09:06.877
it'll return random true or false.

154
00:09:06.877 --> 00:09:11.224
So if you think about it, the schema,
and this is not just what GraphQL,

155
00:09:11.224 --> 00:09:13.452
this is like even a database schema.

156
00:09:13.452 --> 00:09:18.978
Everything always resolves down to
a primitive or scholar type, right?

157
00:09:18.978 --> 00:09:24.213
A character has a name that's a string,
right, even if a person has a profile,

158
00:09:24.213 --> 00:09:27.965
a profile resolves down to
just these scholar types, and

159
00:09:27.965 --> 00:09:30.171
this resolves to scholar types.

160
00:09:30.171 --> 00:09:34.062
So everything is a scholar eventually,
unless it's cyclic like this,

161
00:09:34.062 --> 00:09:37.713
and then it's like infinitely
it's cyclic and that's the issue.

162
00:09:37.713 --> 00:09:40.926
So because everything is predictable and
is a scholar type,

163
00:09:40.926 --> 00:09:43.499
they can just use recursion to figure out.

164
00:09:43.499 --> 00:09:48.316
I'll just loop through this query and
satisfy all these scholar fields with

165
00:09:48.316 --> 00:09:52.170
a string, a number of Boolean,
an ID and that type of thing.

166
00:09:52.170 --> 00:09:55.305
So it's actually quite simple, but
that's what's doing it right now.

167
00:09:55.305 --> 00:09:56.730
Yes?

168
00:09:56.730 --> 00:10:00.742
&gt;&gt; Learner: So there are different caches,
like client side,

169
00:10:00.742 --> 00:10:03.927
create cache and server GraphQL cache.

170
00:10:03.927 --> 00:10:05.173
&gt;&gt; Scott Moss: Are the different caches?

171
00:10:05.173 --> 00:10:09.635
So okay, so
let's talk about cashing fo a little bit,

172
00:10:09.635 --> 00:10:12.453
I'll just briefly talk about it.

173
00:10:12.453 --> 00:10:13.670
And this is nothing to do with GraphQL.

174
00:10:13.670 --> 00:10:16.419
Caching on the front end
in a React app has nothing

175
00:10:16.419 --> 00:10:19.637
to do with what caching strategies
you do on the back end,

176
00:10:19.637 --> 00:10:23.746
has nothing to do with GraphQL, so
yeah, that also applies to GraphQL.

177
00:10:23.746 --> 00:10:28.655
There are two separate things, you don't
wanna be caching some users data in

178
00:10:28.655 --> 00:10:31.688
a place where all the other
users can access it.

179
00:10:31.688 --> 00:10:34.013
So you separate the things but yeah,

180
00:10:34.013 --> 00:10:38.888
there are specific mechanisms to cache
with GraphQL, but for the most part,

181
00:10:38.888 --> 00:10:43.616
on a high level, it's the same as
anything else, so no difference there.

