WEBVTT

1
00:00:00.520 --> 00:00:01.810
&gt;&gt; Scott Moss: Yeah, interfaces are cool.

2
00:00:01.810 --> 00:00:05.190
Unions are very similar interfaces.

3
00:00:05.190 --> 00:00:09.660
You can think of unions as like,
it's like an or type.

4
00:00:09.660 --> 00:00:13.295
It's like, I'm gonna create a type that
can be one of these, and none of those

5
00:00:13.295 --> 00:00:17.020
have to share fields, that's the
difference between a union and interface.

6
00:00:17.020 --> 00:00:20.171
Interface is like,
I need to create a type, and

7
00:00:20.171 --> 00:00:22.690
which other object types can implement.

8
00:00:22.690 --> 00:00:25.790
So therefore there's gonna be at
least one field that they share.

9
00:00:25.790 --> 00:00:30.792
A union type is like no, none of these
types have to share any common fields,

10
00:00:30.792 --> 00:00:34.330
but the union type could
be either one of them.

11
00:00:34.330 --> 00:00:37.960
So it's a great example is
always a search result.

12
00:00:37.960 --> 00:00:41.627
Like imagine if you had a search bar on
your app that can return many different

13
00:00:41.627 --> 00:00:44.149
types of things that
aren't the same shape.

14
00:00:44.149 --> 00:00:50.286
So if you have a global search on your
app where you can search for people.

15
00:00:50.286 --> 00:00:54.214
Let's say your Twitter, you can search for
people, you can search for tweets, you can

16
00:00:54.214 --> 00:00:57.772
search for retweets, you can search for
whatever other entities Twitter has,

17
00:00:57.772 --> 00:01:01.037
all in that one search bar, and
none of those things have common fields.

18
00:01:01.037 --> 00:01:02.522
You would make a union for

19
00:01:02.522 --> 00:01:06.917
that because that one search result
can be any one of those types, right?

20
00:01:06.917 --> 00:01:09.007
So let's check that out.

21
00:01:09.007 --> 00:01:10.927
So we go back to our code.

22
00:01:10.927 --> 00:01:16.787
I can make a union and
I'll just say, search results.

23
00:01:16.787 --> 00:01:22.125
That's literally like the most
common place that I used it.

24
00:01:22.125 --> 00:01:23.835
So here is a search result.

25
00:01:23.835 --> 00:01:26.955
And then let's just make some types here.

26
00:01:26.955 --> 00:01:30.835
I'll just do the Twitter example that
I talked about, so we have a tweet.

27
00:01:30.835 --> 00:01:35.195
And it has some content on it,
that's a string.

28
00:01:35.195 --> 00:01:39.611
And then we have a profile,

29
00:01:39.611 --> 00:01:46.523
it has a username on it, that's a string.

30
00:01:46.523 --> 00:01:48.524
I wanna make these required.

31
00:01:48.524 --> 00:01:50.641
I'm making most of these required so

32
00:01:50.641 --> 00:01:55.434
that the mock schema thing that we're
using actually return something.

33
00:01:55.434 --> 00:01:56.964
They don't always have to be required,

34
00:01:56.964 --> 00:01:59.259
I realized if you don't do
the required on the mock schemas,

35
00:01:59.259 --> 00:02:02.735
sometime it'll return it, sometimes
it won't, because it doesn't have to.

36
00:02:02.735 --> 00:02:07.235
So just to force it to return some
real stuff, I make it require it.

37
00:02:07.235 --> 00:02:09.225
So let's say we have those two things.

38
00:02:09.225 --> 00:02:13.650
And I can say a union
is gonna be a tweet or

39
00:02:13.650 --> 00:02:17.009
a profile like that, right?

40
00:02:17.009 --> 00:02:20.136
And then I need to add that to my
query object, so I'll go make a query,

41
00:02:20.136 --> 00:02:21.683
I will make a query called Search.

42
00:02:21.683 --> 00:02:26.820
And it's gonna return a search result,
required,

43
00:02:26.820 --> 00:02:33.250
or, I guess, in this case,
an array of search results, right?

44
00:02:33.250 --> 00:02:36.170
So let's go back make sure
we didn't break anything.

45
00:02:37.920 --> 00:02:40.189
Looks good, get rid of that query.

46
00:02:40.189 --> 00:02:45.339
I'm gonna go back, make a query,
make a search result query.

47
00:02:45.339 --> 00:02:50.079
And very similar to what we had with the
interface, we kind of get a branch here.

48
00:02:50.079 --> 00:02:54.359
The difference is with the interface
up here it showed the common fields.

49
00:02:54.359 --> 00:02:56.499
But because these don't have
common fields and don't need to,

50
00:02:56.499 --> 00:02:57.459
there are no common fields.

51
00:02:57.459 --> 00:02:59.879
So we can do that, we can do that.

52
00:02:59.879 --> 00:03:02.112
But you will notice is that
the syntax is the same.

53
00:03:02.112 --> 00:03:05.451
We still do inline fragment to say,
okay, I wanna do a search,

54
00:03:05.451 --> 00:03:09.735
which is gonna return a search result, but
for a tweet, I wanna get this, and for

55
00:03:09.735 --> 00:03:11.352
a profile, I wanna get this.

56
00:03:11.352 --> 00:03:15.392
So if it was an interface, there'd be some
common fields up here that you might have.

57
00:03:15.392 --> 00:03:18.072
There are no common fields,
so there are none there.

58
00:03:18.072 --> 00:03:22.955
On the union, every single field Statement
in your query is gonna be within a inlife

59
00:03:22.955 --> 00:03:26.491
fragment because none of them are common,
right?

60
00:03:26.491 --> 00:03:33.781
I don't know, let's say you know,
all tweets have IDs, right?

61
00:03:34.811 --> 00:03:39.291
All tweets have IDs and
then all profiles have IDs.

62
00:03:39.291 --> 00:03:41.180
So you might think those
are common fields,

63
00:03:41.180 --> 00:03:46.050
but,
&gt;&gt; Scott Moss: They're not.

64
00:03:46.050 --> 00:03:49.280
Let me go here, right?

65
00:03:49.280 --> 00:03:53.152
It's not gonna show,
even though they're both IDs of type ID,

66
00:03:53.152 --> 00:03:58.260
same everything, they're not common
fields because it's not an interface.

67
00:03:58.260 --> 00:04:00.260
They're completely isolated, yes.

68
00:04:00.260 --> 00:04:05.119
&gt;&gt; Participant: If both of those
types in here had a common interface

69
00:04:05.119 --> 00:04:09.307
that would contain
the IDE then would that.

70
00:04:09.307 --> 00:04:10.799
&gt;&gt; Scott Moss: That's advanced.

71
00:04:10.799 --> 00:04:14.841
So you're saying we make
a union of these two types, but

72
00:04:14.841 --> 00:04:18.269
these types also shared an interface.

73
00:04:18.269 --> 00:04:21.457
Yes, in that case, they should resolve,

74
00:04:21.457 --> 00:04:25.709
I don't think I've ever
built something that's done,

75
00:04:25.709 --> 00:04:31.154
So let's say you have a tweet account and
a Facebook account.

76
00:04:31.154 --> 00:04:31.877
Right.
&gt;&gt; Participant: So.

77
00:04:31.877 --> 00:04:35.734
&gt;&gt; Scott Moss: Let's try it, I'm curious.

78
00:04:37.774 --> 00:04:43.609
So you implement Entity,
implements Entity.

79
00:04:43.609 --> 00:04:48.652
Well, I guess if you think about it,
it really comes to,- before we run it,

80
00:04:48.652 --> 00:04:52.929
what I think is gonna happen is,
it really comes down to this.

81
00:04:52.929 --> 00:04:56.012
Because we're bypassing,
here when we make a union,

82
00:04:56.012 --> 00:05:00.179
the union knows nothing about the entity,
it's completely bypassing.

83
00:05:00.179 --> 00:05:01.639
So I think it's still
gonna be the same result

84
00:05:01.639 --> 00:05:03.488
even though they implement the same thing.

85
00:05:03.488 --> 00:05:06.512
I think you would have to do this,
you'd have to say entity, but

86
00:05:06.512 --> 00:05:08.888
at that point you don't
really need a union.

87
00:05:08.888 --> 00:05:10.321
&gt;&gt; Participant: You're right.
&gt;&gt; Scott Moss: Unless you had another

88
00:05:10.321 --> 00:05:13.948
thing here that did not implement
the entity, and then you can do that.

89
00:05:13.948 --> 00:05:16.478
So let's see, let's run that.

90
00:05:16.478 --> 00:05:18.033
But I think it's gonna
be the same actually.

91
00:05:20.514 --> 00:05:25.197
&gt;&gt; Scott Moss: Yeah,
it's the same, it bypasses that.

92
00:05:25.197 --> 00:05:30.527
But if I did Entity, and then let's
just make an, what do we have here?

93
00:05:30.527 --> 00:05:31.847
Do we have something
that doesn't implement?

94
00:05:31.847 --> 00:05:35.247
Yeah, let's add a character,
that makes sense, right?

95
00:05:35.247 --> 00:05:35.757
So we'll do that.

96
00:05:37.327 --> 00:05:40.473
And if we go back here, yeah,
it's just, what is it say?

97
00:05:40.473 --> 00:05:43.218
Union type searches can only
include object types, so

98
00:05:43.218 --> 00:05:44.898
you can't include interfaces.

99
00:05:44.898 --> 00:05:46.748
So I guess they thought about that.

100
00:05:46.748 --> 00:05:50.038
I guess that would be like cyclic,
maybe, or there's no syntax for

101
00:05:50.038 --> 00:05:54.978
it on the query that would make sense,
so maybe they couldn't do it, yes, Mark.

102
00:05:54.978 --> 00:05:58.488
What was the introspection
string to get the type?

103
00:05:58.488 --> 00:06:01.267
Something with an underscore,
underscore at the beginning?

104
00:06:01.267 --> 00:06:03.057
Yeah, I'll show that in one second.

105
00:06:03.057 --> 00:06:05.898
So, what you can do in the query,

106
00:06:05.898 --> 00:06:11.696
if you wanna get the type of something
you can just do _ _type name.

107
00:06:11.696 --> 00:06:15.366
I can't do it well here I would have to
do it inside of here, I'll to say _ _,

108
00:06:15.366 --> 00:06:16.507
type name.

109
00:06:16.507 --> 00:06:20.031
So _ _type name gives you
the type of something.

110
00:06:20.031 --> 00:06:24.634
So if I run this, you can see that
the type of this one is called tweet.

111
00:06:24.634 --> 00:06:28.905
If I did it here, it's also,
this one's gonna be called profile.

112
00:06:33.769 --> 00:06:35.585
&gt;&gt; Scott Moss: We're gonna be using
this when we make the resolvers,

113
00:06:35.585 --> 00:06:37.178
this is gonna come in handy for sure.

114
00:06:37.178 --> 00:06:39.012
But this is how you would resolve that.

115
00:06:39.012 --> 00:06:42.376
Or on the front end if you wanted
to know like, is this a person,

116
00:06:42.376 --> 00:06:44.614
if you wanna show us you have a different.

117
00:06:44.614 --> 00:06:48.697
This example for a search result, you
would probably show a different component

118
00:06:48.697 --> 00:06:51.049
in the list depending on
what object this was.

119
00:06:51.049 --> 00:06:55.109
So this is the boolean and what you would
check you would map over all of this.

120
00:06:55.109 --> 00:06:59.170
You'd say if,search result.type
name equals profile,

121
00:06:59.170 --> 00:07:02.739
render the profile component,
pass the data in.

122
00:07:02.739 --> 00:07:07.353
If type name equals tweet,
render the tweet component and

123
00:07:07.353 --> 00:07:11.889
pass in the data, right,
that's how you would do that.

124
00:07:11.889 --> 00:07:16.247
So it's very seamless, you don't have to
do any processing after you get the data

125
00:07:16.247 --> 00:07:18.475
cuz all the information you need is here.

