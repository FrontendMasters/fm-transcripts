WEBVTT

1
00:00:00.240 --> 00:00:06.089
&gt;&gt; Scott Moss: Okay, let's hop into
the other mutations that we have.

2
00:00:06.089 --> 00:00:12.910
So let's look at my notes, we have,
&gt;&gt; Scott Moss: A few more,

3
00:00:12.910 --> 00:00:17.820
we have Edit Issue and Delete Issue,
so let's do Edit Issue.

4
00:00:17.820 --> 00:00:21.869
Edit issue is quite simple, we're gonna
use this to edit the status of an issue.

5
00:00:21.869 --> 00:00:26.749
So we can create an EditIssueInput
that have all these optional things

6
00:00:26.749 --> 00:00:30.649
because I don't know which
one of these you wanna edit.

7
00:00:30.649 --> 00:00:33.585
You maybe wanna edit the name,
maybe the content, maybe the status, or

8
00:00:33.585 --> 00:00:35.579
a combination of these three.

9
00:00:35.579 --> 00:00:38.615
So those are all optional, but
you definitely have to give me an ID so

10
00:00:38.615 --> 00:00:41.670
I can identify what issue you want
me to edit in the first place.

11
00:00:41.670 --> 00:00:43.850
So give me an ID here.

12
00:00:43.850 --> 00:00:44.880
So that's what we need to do.

13
00:00:44.880 --> 00:00:49.477
And then we need to create a mutation for
edit issue and make it return an issue,

14
00:00:49.477 --> 00:00:51.220
so let's do that.

15
00:00:51.220 --> 00:00:51.980
Let's go to our schema.

16
00:00:55.841 --> 00:00:58.811
&gt;&gt; Scott Moss: We'll
make an input here for

17
00:00:58.811 --> 00:01:04.109
Edit,
&gt;&gt; Scott Moss: IssueInputs,

18
00:01:04.109 --> 00:01:09.144
it's gotta have a name,
that's an optional string,

19
00:01:09.144 --> 00:01:12.763
a content, that's optional string.

20
00:01:12.763 --> 00:01:19.561
A status, that's an optional issue status,
and then an ID that is required.

21
00:01:24.189 --> 00:01:25.160
&gt;&gt; Scott Moss: And
then we just need to make a mutation.

22
00:01:25.160 --> 00:01:30.308
So we're gonna say editIssue,
which is gonna

23
00:01:30.308 --> 00:01:35.324
take an input of
EditIssueInput required and

24
00:01:35.324 --> 00:01:39.681
it's gonna return a non-null issue.

25
00:01:39.681 --> 00:01:45.109
The reason I'm making this a non-null
issue versus the create issue,

26
00:01:45.109 --> 00:01:50.189
which wasn't, it's,
there really is no right or wrong answer.

27
00:01:50.189 --> 00:01:53.771
This is mutating something
that's existing, so

28
00:01:53.771 --> 00:01:59.206
I'm expecting it to return an issue,
otherwise it should break.

29
00:01:59.206 --> 00:02:01.972
Whereas this is trying to create
something that doesn't exist, so

30
00:02:01.972 --> 00:02:03.727
there's a potential that it might break.

31
00:02:03.727 --> 00:02:06.697
So it might just return null
if it couldn't create one.

32
00:02:06.697 --> 00:02:11.034
Whereas, if I tried to edit
the status of an issue and for

33
00:02:11.034 --> 00:02:14.632
some reason it couldn't find it,
then yeah,

34
00:02:14.632 --> 00:02:18.999
I would want this to break,
so that's why I would do it.

35
00:02:18.999 --> 00:02:20.915
There is no right or wrong answer,
I guess it's just a user experience.

36
00:02:20.915 --> 00:02:24.588
But for me, I'm like, if you're trying to
edit something and you gave me an ID and

37
00:02:24.588 --> 00:02:26.628
that's not real,
then I want this to break.

38
00:02:29.608 --> 00:02:31.456
&gt;&gt; Scott Moss: Whereas this,
you could also have the same argument,

39
00:02:31.456 --> 00:02:34.064
you could say, well, if I tried to create
an issue, I should always want it to

40
00:02:34.064 --> 00:02:36.817
create an issue or it should break, it's
totally up to you, whatever the UI is.

41
00:02:39.901 --> 00:02:42.402
&gt;&gt; Scott Moss: Okay, let's make our
resolvers, so, if we go back and

42
00:02:42.402 --> 00:02:45.027
look at our notes,
we only have to make one resolver here.

43
00:02:45.027 --> 00:02:50.616
We have to make the resolver for
the edit issue, which is very simple,

44
00:02:50.616 --> 00:02:54.688
we do our off check,
we flatten out our fields, and

45
00:02:54.688 --> 00:03:00.876
then we issue the database query, so,
let's do that, go to our resolvers.

46
00:03:02.136 --> 00:03:05.646
We're gonna go to
the mutation object here.

47
00:03:05.646 --> 00:03:11.672
We're gonna say editIssue has to be
the same name that we put in the schema,

48
00:03:11.672 --> 00:03:13.116
like that.

49
00:03:13.116 --> 00:03:15.438
There is no parent cuz it's on
the mutation, it's the root, so

50
00:03:15.438 --> 00:03:16.886
there is no parent.

51
00:03:16.886 --> 00:03:18.676
We do have an input argument here.

52
00:03:18.676 --> 00:03:20.644
Always call my arguments inputs so for

53
00:03:20.644 --> 00:03:24.162
me it's always input you can call
whatever you want in your schema.

54
00:03:24.162 --> 00:03:28.056
We do need the context from the user and
like always it's the resolvers

55
00:03:28.056 --> 00:03:32.227
responsibility to an enforced
authentication, so we need to check here.

56
00:03:34.005 --> 00:03:36.760
&gt;&gt; Scott Moss: Later on I can show you how
you can create a higher order function to

57
00:03:36.760 --> 00:03:39.681
do this for you if you wanna know
what I'm talking about I can do that.

58
00:03:39.681 --> 00:03:47.276
If we look at,
&gt;&gt; Scott Moss: If you look at the input,

59
00:03:47.276 --> 00:03:50.781
the input is gonna be all the flat
properties on there plus the ID.

60
00:03:50.781 --> 00:03:54.531
We need to pop the ID off cuz that's
not gonna go into the updates object.

61
00:03:54.531 --> 00:03:58.195
So I'm gonna say const, give me the ID and

62
00:03:58.195 --> 00:04:03.021
then everything else is just
like the update of input.

63
00:04:05.164 --> 00:04:07.111
&gt;&gt; Scott Moss: Kinda also
just went into the schema and

64
00:04:07.111 --> 00:04:08.941
made two different inputs, right?

65
00:04:08.941 --> 00:04:12.381
You could also say, okay, the input is
gonna be like everything you wanna update.

66
00:04:12.381 --> 00:04:16.541
But there's also a second argument called
ID that's ID, you could have did that too.

67
00:04:16.541 --> 00:04:18.535
That's probably more common,
you might see that.

68
00:04:18.535 --> 00:04:20.718
And that way,
I just take the ID off of this,

69
00:04:20.718 --> 00:04:22.606
and now the ID is the second argument.

70
00:04:22.606 --> 00:04:23.946
So there's really no wrong answer.

71
00:04:25.554 --> 00:04:28.316
&gt;&gt; Scott Moss: But because I did it
this way, I'm popping the ID off so

72
00:04:28.316 --> 00:04:32.473
I can just feed this object directly into
my database without putting this there.

73
00:04:36.204 --> 00:04:36.966
&gt;&gt; Scott Moss: There we go.

74
00:04:36.966 --> 00:04:41.130
So got that, and
I know the inputs there because,

75
00:04:41.130 --> 00:04:45.605
it's got an exclamation on it,
so it has to be there.

76
00:04:47.303 --> 00:04:49.000
&gt;&gt; Scott Moss: All right, so we got that.

77
00:04:49.000 --> 00:04:53.932
And then now we wanna say

78
00:04:53.932 --> 00:05:00.345
results = await db.update on

79
00:05:00.345 --> 00:05:05.557
the issues table .set.

80
00:05:05.557 --> 00:05:09.561
We wanna set the update here,
but the thing is,

81
00:05:09.561 --> 00:05:13.077
you might not have passed anything here.

82
00:05:13.077 --> 00:05:16.670
So literally, what you probably wanna do
is do a check on update here to see if

83
00:05:16.670 --> 00:05:20.055
there's some fields but that's just so
much work, I'm not doing it.

84
00:05:20.055 --> 00:05:25.289
So I'll just say, you know what,
something like that, we could do that.

85
00:05:25.289 --> 00:05:32.767
And then we wanna say
where(eq(issue.userId

86
00:05:32.767 --> 00:05:37.516
is equal to ctx.user.Id/.

87
00:05:37.516 --> 00:05:42.024
So only update the issue or I guess,

88
00:05:42.024 --> 00:05:45.320
yeah, we wanna do that.

89
00:05:45.320 --> 00:05:46.900
We wanna do an and here actually.

90
00:05:46.900 --> 00:05:51.957
So we wanna say where and that,

91
00:05:51.957 --> 00:05:59.153
so the issues user ID
belongs to this user and

92
00:05:59.153 --> 00:06:04.404
the issue.Id is the same as id,

93
00:06:04.404 --> 00:06:09.675
so both of those have to be true.

94
00:06:09.675 --> 00:06:11.977
And then we need to do returning,

95
00:06:11.977 --> 00:06:15.858
otherwise it will just tell
me x amount of rows updated.

96
00:06:15.858 --> 00:06:17.916
I wanna actually get
the updated things back,

97
00:06:17.916 --> 00:06:19.616
this is always gonna return an array.

98
00:06:19.616 --> 00:06:20.876
I just wanna get the first thing, so

99
00:06:20.876 --> 00:06:27.003
I'll just say,
&gt;&gt; Scott Moss: Which is the updated issue.

100
00:06:30.703 --> 00:06:33.853
&gt;&gt; Scott Moss: If you're looking like what
the hell is this double question mark,

101
00:06:33.853 --> 00:06:39.760
it's basically the same thing as,
&gt;&gt; Scott Moss: This,

102
00:06:39.760 --> 00:06:46.343
except for this, will fail on falsy
values that are actual values.

103
00:06:46.343 --> 00:06:48.475
This would fail if the left was zero.

104
00:06:49.545 --> 00:06:52.295
But maybe zero is a valid value for
the operation you're doing.

105
00:06:52.295 --> 00:06:57.165
So it'll fail on falsy values,
whereas this would only fail on null and

106
00:06:57.165 --> 00:06:58.065
undefined.

107
00:06:59.116 --> 00:07:02.306
So if this was null or
undefined, then it'll do this.

108
00:07:02.306 --> 00:07:06.450
Whereas but if the left was zero,
that would be considered truthy and

109
00:07:06.450 --> 00:07:07.956
it would just read that.

110
00:07:07.956 --> 00:07:11.546
So I think in most cases
you probably want this.

111
00:07:11.546 --> 00:07:13.756
We got the editIssue,
let's go try to editIssue.

112
00:07:13.756 --> 00:07:16.336
Let's go see, see what the vibe is here.

113
00:07:16.336 --> 00:07:19.080
Let's go up here, let me grab this issue.

114
00:07:19.080 --> 00:07:21.750
Let's get this issue d right here,
let's grab this one.

115
00:07:21.750 --> 00:07:27.770
So I got my issue id, I'm gonna go back,
I'm gonna uncheck that one.

116
00:07:27.770 --> 00:07:29.090
I'll go back here, I'm gonna uncheck that.

117
00:07:29.090 --> 00:07:34.350
Let me clear these inputs down here,
make a mutation, do a editIssue.

118
00:07:35.440 --> 00:07:40.408
I'm gonna edit the status, so then we can
try to do this status filter on our issues

119
00:07:40.408 --> 00:07:44.675
query that, we haven't tested out,
I forgot to do that.

120
00:07:44.675 --> 00:07:51.855
So I'll get the name, the id, and I want
to edit the, I'll pass the id of course.

121
00:07:51.855 --> 00:07:55.365
I want to edit the status,
so let's do that.

122
00:07:55.365 --> 00:07:58.351
Here's the iid and then for
the status, they're all backlogged, so

123
00:07:58.351 --> 00:08:00.435
I'll change one to INPROGRESS.

124
00:08:00.435 --> 00:08:02.543
So let's do that.

125
00:08:02.543 --> 00:08:04.545
What did we get here?

126
00:08:04.545 --> 00:08:08.705
Cannot return null for null-field
Mutation.editIssue, we got an error.

127
00:08:08.705 --> 00:08:10.375
Let's see, might be a Davis error.

128
00:08:11.955 --> 00:08:15.000
I guess the only thing I can think of
is like this id that I copied is not

129
00:08:15.000 --> 00:08:15.595
an issue id.

130
00:08:16.785 --> 00:08:21.766
So let's get another
issue id from here make,

131
00:08:21.766 --> 00:08:26.618
make a new tab and
issue another request, and

132
00:08:26.618 --> 00:08:31.232
do a query for
all the issues for this user.

133
00:08:31.232 --> 00:08:34.830
I'll just grab all the ids and
then the status, and

134
00:08:34.830 --> 00:08:38.341
then I'll grab,
&gt;&gt; Scott Moss: And id,

135
00:08:38.341 --> 00:08:40.400
make sure I get it correct.

136
00:08:40.400 --> 00:08:42.280
There we go, I'll go back to this.

137
00:08:43.580 --> 00:08:48.640
I will go back here,
at this one and let's run that.

138
00:08:48.640 --> 00:08:51.550
There we go, yeah, I guess the id
that I pasted it was just not right.

139
00:08:51.550 --> 00:08:56.430
So that works, I changed it to INPROGRESS.

140
00:08:56.430 --> 00:09:01.509
So now that one's INPROGRESS,
what I wanted to test was this

141
00:09:01.509 --> 00:09:09.136
query where we can do the issues query and
then add the arguments here for statuses.

142
00:09:09.136 --> 00:09:13.556
And for statuses, I'm gonna pass
an array of only INPROGRESS.

143
00:09:13.556 --> 00:09:17.816
For this user, it should just be one,
and it is, it's just one.

144
00:09:17.816 --> 00:09:21.888
If I say give me all the ones
that are backlog, it should be,

145
00:09:21.888 --> 00:09:24.893
I don't know, more than one.

146
00:09:24.893 --> 00:09:27.063
Or I guess I only have two.

147
00:09:27.063 --> 00:09:30.543
Let's see, backlog and
INPROGRESS, let's see.

148
00:09:31.813 --> 00:09:35.743
Yeah, I guess his user only has two, so
there we go, so that filtering works.

149
00:09:35.743 --> 00:09:40.623
Yeah, I guess I just copied a wrong id or
it didn't belong to that user or whatever,

150
00:09:40.623 --> 00:09:43.301
but yeah, code looks right, so that works.

151
00:09:43.301 --> 00:09:44.441
Let's check it out on the app.

152
00:09:46.803 --> 00:09:48.845
&gt;&gt; Scott Moss: We go to here, the app.

153
00:09:48.845 --> 00:09:52.710
The way you want to edit is if you
click on one of these status rings,

154
00:09:52.710 --> 00:09:55.725
you can change it, so
I'm gonna say INPROGRESS.

155
00:09:55.725 --> 00:09:59.694
It changed to yellow if I refresh,
you can tell that it's yellow.

156
00:09:59.694 --> 00:10:01.782
It jumped down because
that's the sequel sorting,

157
00:10:01.782 --> 00:10:04.004
whereas the front end
doesn't do the same sorting.

158
00:10:04.004 --> 00:10:05.584
I talk about it on the client side,
of course.

159
00:10:05.584 --> 00:10:09.144
I can change this to done,
and that works as well.

160
00:10:09.144 --> 00:10:12.252
So it looks like our update,
our edit works just fine,

161
00:10:12.252 --> 00:10:14.764
our create works fine, our git works fine.

162
00:10:14.764 --> 00:10:18.906
So for the most part,
that is the functionality to app.

163
00:10:18.906 --> 00:10:23.193
We still have the delete
functionality that we can add, but

164
00:10:23.193 --> 00:10:24.916
there is no UI for that.

165
00:10:24.916 --> 00:10:29.916
On the client side, of course,
I left it as a extra credit if

166
00:10:29.916 --> 00:10:34.126
you wanted to add a UI to
be able to delete an issue.

167
00:10:35.226 --> 00:10:38.427
On the main branch,
I have the delete mutation implemented, so

168
00:10:38.427 --> 00:10:40.588
you can just write the front end.

169
00:10:40.588 --> 00:10:43.329
Now for the back end,
the extra credit would be for

170
00:10:43.329 --> 00:10:47.418
you to make the delete implementation or
the delete mutation.

171
00:10:47.418 --> 00:10:48.758
So therefore you can delete it.

172
00:10:48.758 --> 00:10:52.798
So that's something that I will
leave up to you all, to get going

