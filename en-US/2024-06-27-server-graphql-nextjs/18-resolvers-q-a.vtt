WEBVTT

1
00:00:00.250 --> 00:00:02.410
&gt;&gt; Participant: Can we
pass anything to context?

2
00:00:02.410 --> 00:00:05.700
For example, can we pass the drizzle
instance in the context?

3
00:00:05.700 --> 00:00:08.700
&gt;&gt; Scott Moss: Absolutely, you can
pass whatever you want to the context.

4
00:00:08.700 --> 00:00:11.890
So if you go to the route,
you can put anything here.

5
00:00:13.740 --> 00:00:16.100
Doesn't matter what you put here.

6
00:00:16.100 --> 00:00:20.191
You can literally put whatever you want
here, and it'll be on the context object.

7
00:00:20.191 --> 00:00:24.061
The third argument inside of every single
resolver, as far as putting drizzle here.

8
00:00:24.061 --> 00:00:28.501
Sure, db I can grab the database
from drizzle and I can put it here.

9
00:00:28.501 --> 00:00:33.132
And in fact, this is usually recommended,
the convention is,

10
00:00:33.132 --> 00:00:38.411
if you're in a resolver, look at
all the dependencies of a resolver.

11
00:00:38.411 --> 00:00:40.813
You can see I have this dependency
on the database, right?

12
00:00:40.813 --> 00:00:44.134
But it's not coming from the argument, so

13
00:00:44.134 --> 00:00:47.923
this is kind of a dependency
injection pattern.

14
00:00:47.923 --> 00:00:50.905
If you ever use angular or
anything like that, there's the concept

15
00:00:50.905 --> 00:00:55.033
of dependency injection, which basically
makes your functions really easy to test.

16
00:00:55.033 --> 00:00:57.717
Because if every dependency
that it needs is an argument,

17
00:00:57.717 --> 00:01:01.385
when you go run this function in any other
context, you can mock those things out

18
00:01:01.385 --> 00:01:04.319
easily by passing in whatever
you want as an argument.

19
00:01:04.319 --> 00:01:06.605
So if you really wanna
test these very flexible,

20
00:01:06.605 --> 00:01:09.189
then make sure all of
the dependencies are arguments.

21
00:01:09.189 --> 00:01:13.249
So you can't control this, you can
only control this through the schema.

22
00:01:13.249 --> 00:01:15.729
The only thing you do have control
over is the context object.

23
00:01:15.729 --> 00:01:19.079
So in this case, yes,
passing the database onto the context.

24
00:01:19.079 --> 00:01:22.145
So then you could do something like,
ctx.db, yeah,

25
00:01:22.145 --> 00:01:23.885
that would be super flexible.

26
00:01:23.885 --> 00:01:28.155
The reason I didn't do it is because
check this out, It just says any now.

27
00:01:28.155 --> 00:01:33.841
I lose all the benefit of drizzle
having those types because I didn't do

28
00:01:33.841 --> 00:01:39.147
the GraphQL code gen to map this
database to the output of drizzle,

29
00:01:39.147 --> 00:01:42.019
it's just crazy TypeScript work.

30
00:01:42.019 --> 00:01:45.309
So I decided not to do it,
so I could still get this.

31
00:01:45.309 --> 00:01:46.909
I still like this TypeScript here.

32
00:01:46.909 --> 00:01:50.384
So that's the only reason I didn't do it,
but yeah, in a production app,

33
00:01:50.384 --> 00:01:54.489
I would just do the work, map the types,
and add it to my context object.

34
00:01:54.489 --> 00:01:58.867
Every single thing that my resolver needed
would be on the context here because when

35
00:01:58.867 --> 00:02:00.503
I go and test it I can change it.

36
00:02:00.503 --> 00:02:05.394
I can mock it, I can do whatever I want
versus right now I'm creating, somewhat

37
00:02:05.394 --> 00:02:10.287
of a closure by pulling it from the top
here, which makes this very hard to test.

38
00:02:10.287 --> 00:02:14.942
Then you got to have a testing framework
that can mock out a whole module,

39
00:02:14.942 --> 00:02:16.404
its just a lot of work.

40
00:02:16.404 --> 00:02:20.750
One thing I just wanna kind of double
down on cuz I realized this was very

41
00:02:20.750 --> 00:02:25.023
complicated for me, it's just
the concept of this first argument,

42
00:02:25.023 --> 00:02:27.305
which is the parent argument.

43
00:02:27.305 --> 00:02:32.550
I think what's complicated about this is,
when you think about how

44
00:02:32.550 --> 00:02:37.978
the resolvers work, it's easy to
think that the resolvers are routes

45
00:02:37.978 --> 00:02:43.256
that run when something happen but
that's actually not the case.

46
00:02:43.256 --> 00:02:44.582
I can look at a GraphQL query and

47
00:02:44.582 --> 00:02:47.906
tell you what resolver is going to
run just based off the query, right?

48
00:02:47.906 --> 00:02:53.016
So if I go here, if I look at this query I
can tell you what resolver is gonna run.

49
00:02:53.016 --> 00:02:57.211
The first resolver that's gonna run is
gonna be the issues resolver on the query

50
00:02:57.211 --> 00:02:57.716
object.

51
00:02:57.716 --> 00:03:03.164
That's gonna run,
it's gonna return this whole thing, okay?

52
00:03:03.164 --> 00:03:06.094
The next resolver that's going to run,

53
00:03:06.094 --> 00:03:10.304
is going to be the user
resolver on the issue type.

54
00:03:10.304 --> 00:03:11.394
How do I know that?

55
00:03:11.394 --> 00:03:14.524
Well, because issues
returns an array of issues.

56
00:03:14.524 --> 00:03:18.084
So for each one of those issues,
I want to get the user.

57
00:03:18.084 --> 00:03:20.878
So that means this user
is on the issue type, so

58
00:03:20.878 --> 00:03:25.905
I know that the issue resolver on the user
type in the resolver is gonna run, right?

59
00:03:25.905 --> 00:03:27.405
So if I go here, that's what's gonna run.

60
00:03:28.495 --> 00:03:30.145
And then what's gonna run next?

61
00:03:30.145 --> 00:03:33.401
The user is gonna return those fields and

62
00:03:33.401 --> 00:03:38.395
then the issues field on the user
type is going to run, right?

63
00:03:38.395 --> 00:03:42.104
So if I go to the user type,
the issues field is gonna run.

64
00:03:42.104 --> 00:03:44.464
And I know that just by
looking at the query.

65
00:03:44.464 --> 00:03:48.224
So if you wanna know what the parent
means, you can just look at your query.

66
00:03:48.224 --> 00:03:54.564
When this user resolver runs on
the issue type, what is above it?

67
00:03:54.564 --> 00:03:56.674
The issue, so that's the parent.

68
00:03:56.674 --> 00:03:57.884
The parent is the issue here.

69
00:03:57.884 --> 00:04:00.896
It's the one that's above it,
the one it's inside of.

70
00:04:00.896 --> 00:04:04.078
Okay, when the issues resolver
runs on the user type,

71
00:04:04.078 --> 00:04:07.386
so when this function runs,
what's its parent?

72
00:04:07.386 --> 00:04:09.476
The user, the user is the parent.

73
00:04:09.476 --> 00:04:12.606
That's what's above it, so that's how
you can figure out what the parent is.

74
00:04:12.606 --> 00:04:16.490
And this is why I said, you'll never
have a parent on top level queries and

75
00:04:16.490 --> 00:04:18.471
mutations because what is above it?

76
00:04:18.471 --> 00:04:20.931
Nothing, there's nothing above it.

77
00:04:20.931 --> 00:04:23.561
It's the first thing you're running,
so there's never parent.

78
00:04:23.561 --> 00:04:24.810
But these nested ones,

79
00:04:24.810 --> 00:04:28.441
they're called nested because
they're inside of something else.

80
00:04:28.441 --> 00:04:30.621
So the thing that they're
inside of is its parent.

81
00:04:30.621 --> 00:04:33.621
So just by looking at this query,
I know that the parent is issue.

82
00:04:33.621 --> 00:04:36.001
I know that this parent is user.

