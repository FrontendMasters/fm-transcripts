WEBVTT

1
00:00:00.000 --> 00:00:04.222
&gt;&gt; Scott Moss: We left off right before
we're gonna talk about resolvers,

2
00:00:04.222 --> 00:00:07.284
which are the meat and
potatoes of GraphQL,

3
00:00:07.284 --> 00:00:11.861
is just schemas are one side that
defines the type safe contract.

4
00:00:11.861 --> 00:00:16.065
But resolvers are the code that
satisfies the contract and

5
00:00:16.065 --> 00:00:18.395
actually tries to get the data.

6
00:00:18.395 --> 00:00:25.610
So what happened to our notes here and
we'll talk about some resolvers.

7
00:00:25.610 --> 00:00:30.586
So, resolvers are functions that basically
generate a response for graphical queries.

8
00:00:30.586 --> 00:00:33.712
You can think of these as, if you're
making a traditional rest server,

9
00:00:33.712 --> 00:00:36.649
you have your routes, and
then you have your controllers, right?

10
00:00:36.649 --> 00:00:39.699
These controllers talk to your
database and then they return data.

11
00:00:39.699 --> 00:00:42.848
That's kind of what resolvers are,
but they're not,

12
00:00:42.848 --> 00:00:46.406
because you only have one route,
you only have slash GraphQL.

13
00:00:46.406 --> 00:00:51.130
And it's always a post request, you
don't have, a controller for each route.

14
00:00:51.130 --> 00:00:52.087
There's only one route.

15
00:00:52.087 --> 00:00:57.023
So a resolver is typically,
gonna be for every single at least for

16
00:00:57.023 --> 00:00:59.736
every single object type you have.

17
00:00:59.736 --> 00:01:03.005
And every single query mutation you have,
but it could also be for

18
00:01:03.005 --> 00:01:04.503
every single field you have.

19
00:01:04.503 --> 00:01:05.936
We'll talk about that in a little bit.

20
00:01:05.936 --> 00:01:08.984
You didn't get down to the field
level with the resolvers.

21
00:01:08.984 --> 00:01:14.019
But basically, you cannot create
a GraphQL schema without resolvers.

22
00:01:14.019 --> 00:01:17.654
The reason ours has worked so far, is
because we used that mock schema function

23
00:01:17.654 --> 00:01:21.030
that created the resolvers for us,
that's actually what it's doing.

24
00:01:21.030 --> 00:01:27.278
It's looking at the schema and dynamically
generating resolvers on the fly.

25
00:01:27.278 --> 00:01:30.824
I know that because I literally had to do
that for the last startup that I created,

26
00:01:30.824 --> 00:01:31.929
it was quite difficult.

27
00:01:31.929 --> 00:01:34.034
But let's talk about
the structure of a resolver.

28
00:01:34.034 --> 00:01:38.574
Again, it's just a function, and the
function names map directly to the things

29
00:01:38.574 --> 00:01:40.860
that they want to resolve, one for one.

30
00:01:40.860 --> 00:01:44.117
So in this case I have a resolver object.

31
00:01:44.117 --> 00:01:49.022
You can see here, I'm saying, hey,
I want to create a resolver for

32
00:01:49.022 --> 00:01:51.446
the user query on the query type.

33
00:01:51.446 --> 00:01:56.573
So I used query the same way you
put it in your schema with a Q,

34
00:01:56.573 --> 00:02:01.102
and I can say that query has
a field on it called user.

35
00:02:01.102 --> 00:02:05.197
And this is the function that runs
when someone asks for the user query,

36
00:02:05.197 --> 00:02:06.911
this is the function, okay?

37
00:02:06.911 --> 00:02:08.725
You get four arguments.

38
00:02:08.725 --> 00:02:15.489
The first argument is the optional
parent of this current resolver.

39
00:02:15.489 --> 00:02:19.409
That might not make sense right now,
but we'll talk about

40
00:02:19.409 --> 00:02:24.137
why that's important when we get to
nested data and things like that.

41
00:02:24.137 --> 00:02:27.044
So that's optional,
it most likely will be no.

42
00:02:27.044 --> 00:02:31.410
If you are running a top level query
in this case, like user on a query,

43
00:02:31.410 --> 00:02:33.262
this is always going to be no.

44
00:02:33.262 --> 00:02:37.049
There's no parent there cuz this
is running on the root, args.

45
00:02:37.049 --> 00:02:42.591
These are the arguments that this,
if on your schema, let's go to our schema.

46
00:02:42.591 --> 00:02:49.640
If your schema is taking arguments,
that's what the args object would be.

47
00:02:49.640 --> 00:02:54.235
So in the case of search,
the args argument in that resolver will be

48
00:02:54.235 --> 00:02:59.011
an object that has an input property
whose type is this type, right?

49
00:02:59.011 --> 00:03:02.183
So this would be an object that has
an input property whose type was the type

50
00:03:02.183 --> 00:03:03.012
that I showed you.

51
00:03:03.012 --> 00:03:07.633
That's what args is, it's any arguments
that in this case query might have.

52
00:03:07.633 --> 00:03:10.837
If there aren't any, this thing is known.

53
00:03:10.837 --> 00:03:12.883
Context is exactly what it sounds like.

54
00:03:12.883 --> 00:03:17.104
It's basically an object that you can
create at the initialization of your

55
00:03:17.104 --> 00:03:18.176
GraphQL server and

56
00:03:18.176 --> 00:03:22.336
it gets passed as a third argument to
every single resolver that you have.

57
00:03:22.336 --> 00:03:27.014
So the common pattern for context is to
pass things like the current signed in

58
00:03:27.014 --> 00:03:31.397
user, maybe your ORM versus importing
your ORM in the resolver file and

59
00:03:31.397 --> 00:03:34.484
using it directly,
maybe you pass it as context.

60
00:03:34.484 --> 00:03:38.221
So when you go and mock this or
test this, you can mock out that ORM for

61
00:03:38.221 --> 00:03:42.758
something else that you want, versus just
pulling it into a closure and using it.

62
00:03:42.758 --> 00:03:46.664
So, it's just a place in which you can
pass state that gets reused for every

63
00:03:46.664 --> 00:03:50.576
single resolver and that gets initialized
at the beginning of the server.

64
00:03:50.576 --> 00:03:54.703
Info is something you'll probably almost
never use unless you're doing like

65
00:03:54.703 --> 00:03:57.149
metadata based things
analytics type stuff.

66
00:03:57.149 --> 00:04:01.088
Info is basically information on
the actual query that was sent up.

67
00:04:01.088 --> 00:04:04.294
So if you want to see the raw
query that actually was sent up,

68
00:04:04.294 --> 00:04:08.994
the abstract syntax tree, like low-level
GraphQL stuff, that's what info is for.

69
00:04:08.994 --> 00:04:13.124
You'll almost never use this unless
you're doing like tooling or

70
00:04:13.124 --> 00:04:15.196
some dynamic metaprogramming.

71
00:04:15.196 --> 00:04:19.337
But for just like resolving data,
you'll almost never use this.

72
00:04:19.337 --> 00:04:23.132
For the most part, you're just gonna be
looking at args, if you have arguments,

73
00:04:23.132 --> 00:04:26.377
context, if you're taking advantage
of because you don't have to,

74
00:04:26.377 --> 00:04:28.968
you literally never have to
use it if you don't want to.

75
00:04:28.968 --> 00:04:32.332
And then you'll look at parents,
if this is a nested resolver, and

76
00:04:32.332 --> 00:04:34.763
we'll talk about nested
resolvers in a minute.

77
00:04:34.763 --> 00:04:38.274
Other than that, you can do whatever
the hell you want in this argument.

78
00:04:38.274 --> 00:04:41.579
I'm sorry, in this function it's,
there's no limit what you can do.

79
00:04:41.579 --> 00:04:45.609
You can return a promise,
you can return an array of promises.

80
00:04:45.609 --> 00:04:49.590
Those things will get resolved,
it's pretty much whatever you want.

81
00:04:49.590 --> 00:04:54.277
So this is where you can imagine if you
were using like some third party provider

82
00:04:54.277 --> 00:04:55.636
for authentication.

83
00:04:55.636 --> 00:04:59.588
Let's say, using like clerk or
something and you wanted to get the user,

84
00:04:59.588 --> 00:05:03.566
you would make a call to clerk, go get
the user by this arg ID and come back.

85
00:05:03.566 --> 00:05:05.920
It doesn't matter if it comes
from your database or not,

86
00:05:05.920 --> 00:05:07.055
it can come from anywhere.

87
00:05:07.055 --> 00:05:11.965
In this example,
I'm using something called data sources.

88
00:05:11.965 --> 00:05:16.257
So, when I created the server, I made an
object on the context called data sources.

89
00:05:16.257 --> 00:05:20.994
And it's all the sources that my resolvers
have access to and I can do that.

90
00:05:20.994 --> 00:05:24.898
So this is a common pattern that people
use in GraphQL is like, cuz you can have

91
00:05:24.898 --> 00:05:28.946
many data sources that you probably just
wanna add them to your context object.

92
00:05:28.946 --> 00:05:31.713
And so you can bring them in and
use them here.

93
00:05:31.713 --> 00:05:33.927
We probably won't be doing
that in this course,

94
00:05:33.927 --> 00:05:37.276
I'll just be importing it from the top,
cuz we only have one data source.

95
00:05:37.276 --> 00:05:38.221
It's our database.

96
00:05:38.221 --> 00:05:41.878
So I'm just gonna import it because
if I do it with the context,

97
00:05:41.878 --> 00:05:46.377
unless I do the type script correctly,
I'll lose the TypeScript findings.

98
00:05:46.377 --> 00:05:48.955
So I won't get the auto
complete on the database, or

99
00:05:48.955 --> 00:05:52.779
unless I create another type which
doesn't take that long, I'm just lazy.

100
00:05:52.779 --> 00:05:55.565
So we'll just be importing the database
from the top of the file and

101
00:05:55.565 --> 00:05:57.473
using it versus passing
it through context.

102
00:05:57.473 --> 00:06:01.244
But you can put whatever you want,
we will use context for other things.

103
00:06:01.244 --> 00:06:04.943
So, let's make some resolvers,
let's go back to our app.

104
00:06:04.943 --> 00:06:08.354
Just to, I'm just telling you right now,
just go ahead and

105
00:06:08.354 --> 00:06:11.781
delete everything you have in
this schema that we created.

106
00:06:11.781 --> 00:06:16.427
Cuz if you don't, you're gonna have to
make a resolver for everything in here.

107
00:06:16.427 --> 00:06:21.497
So just delete everything in there, make a
quick query, I was gonna make a Query for

108
00:06:21.497 --> 00:06:25.130
me, and I'm gonna say it returns
a type string, not null.

109
00:06:25.130 --> 00:06:32.674
That's a minimum query,
I'm just gonna say type query me, okay?

110
00:06:32.674 --> 00:06:38.625
Very, very, very, very simple
&gt;&gt; Scott Moss: And

111
00:06:38.625 --> 00:06:43.496
now, what we wanna do is if we
go to the route.ts where we have

112
00:06:43.496 --> 00:06:47.603
the schema here and
we have addMockstoSchema, and

113
00:06:47.603 --> 00:06:52.684
we makeExecutableSchema,
we can get rid of that whole field.

114
00:06:52.684 --> 00:06:55.601
Just get rid of this whole field,
everything that I have highlighted here,

115
00:06:55.601 --> 00:06:56.753
we're just gonna get rid of.

116
00:06:56.753 --> 00:07:00.517
So we'll get rid of schema, and instead,
we're gonna put something called typeDefs.

117
00:07:00.517 --> 00:07:06.242
These are stored for type definitions,
which is basically our schema.

118
00:07:06.242 --> 00:07:08.784
And then we're gonna put resolvers,

119
00:07:08.784 --> 00:07:12.128
which is already imported
at the top of your file.

120
00:07:12.128 --> 00:07:15.312
So we got typeDefs, we got resolvers,
and then we have these plugins.

121
00:07:18.397 --> 00:07:19.947
&gt;&gt; Scott Moss: So,
if you go look at the imports,

122
00:07:19.947 --> 00:07:22.253
type definitions is
literally our schema string.

123
00:07:22.253 --> 00:07:27.199
Resolvers is, if you go look at that, it's
an empty object, it has nothing on it.

124
00:07:27.199 --> 00:07:31.727
So I'm gonna save this, or I'm sorry,
I'm gonna go back and save this, and

125
00:07:31.727 --> 00:07:34.316
you should not be able
to start your server.

126
00:07:34.316 --> 00:07:36.071
You're most likely gonna get a error.

127
00:07:36.071 --> 00:07:38.745
All right, let me see, okay,
I see why it's not an object type.

128
00:07:38.745 --> 00:07:43.547
Yeah, so the reason I thought it was gonna
throw an error is because if you don't

129
00:07:43.547 --> 00:07:47.778
specifically have the resolver for
the thing that's in your schema,

130
00:07:47.778 --> 00:07:51.311
it'll say, hey,
I don't see a resolver for this thing.

131
00:07:51.311 --> 00:07:55.697
So therefore, I cannot start, so
it typically would break, but

132
00:07:55.697 --> 00:07:58.587
I think it's because it's a scalar type.

133
00:07:58.587 --> 00:08:02.004
It doesn't matter, but
either way, running it,

134
00:08:02.004 --> 00:08:06.382
you yield no result because we
didn't actually make a resolver.

135
00:08:06.382 --> 00:08:11.642
So let's make a resolver for
the query of me and resolve the data.

136
00:08:11.642 --> 00:08:14.909
So if we go back to our resolvers,

137
00:08:14.909 --> 00:08:20.629
what I'm gonna do is inside this object,
I'm gonna say,

138
00:08:20.629 --> 00:08:25.318
Query, it's only query, type here, right?

139
00:08:25.318 --> 00:08:29.774
So I'm gonna say query,
I'm gonna say me because on the schema,

140
00:08:29.774 --> 00:08:32.379
it's called me, that's the field.

141
00:08:32.379 --> 00:08:35.547
And then I'm gonna create a resolver.

142
00:08:35.547 --> 00:08:38.072
For now I'm just gonna return me,

143
00:08:38.072 --> 00:08:43.221
I need to return the same type that
the schema says this type should be.

144
00:08:43.221 --> 00:08:45.712
In this case, it's a non-null string.

145
00:08:45.712 --> 00:08:48.613
So I can't return a number,
I can't return an object.

146
00:08:48.613 --> 00:08:52.091
I have to return a string,
so that's what I'm gonna do.

147
00:08:54.603 --> 00:08:58.121
&gt;&gt; Scott Moss: So I go here,
I run this again, I now get me.

148
00:09:05.850 --> 00:09:10.066
&gt;&gt; Scott Moss: And
that is a resolver at its most basic,

149
00:09:10.066 --> 00:09:15.280
is literally creating,
looking at your schema.

150
00:09:15.280 --> 00:09:20.306
And creating functions that map exactly to
how they're creating your schema, right?

151
00:09:20.306 --> 00:09:26.026
By default, GraphQL will create automatic
resolvers for you for every single field,

152
00:09:26.026 --> 00:09:30.269
if you return an object,
we'll talk about that in a little bit.

153
00:09:30.269 --> 00:09:32.964
So you don't have to make a resolver for

154
00:09:32.964 --> 00:09:37.795
every single field on an object type,
if you return an entire object.

155
00:09:37.795 --> 00:09:40.785
Let's say, let me give you an example,
let's make an object type here.

156
00:09:40.785 --> 00:09:47.198
So if I say, type person, right,
and I say the person has a name,

157
00:09:47.198 --> 00:09:52.464
it's a string, person has ID,
it's an ID, right?

158
00:09:52.464 --> 00:09:57.241
And then I'm gonna make
something called people,

159
00:09:57.241 --> 00:10:03.362
it returns an array of person,
non-null, non-null, right?

160
00:10:03.362 --> 00:10:08.520
Let's say I do this, let's refresh this.

161
00:10:08.520 --> 00:10:11.564
That still works, so then now,
I'm gonna make a resolver for this.

162
00:10:11.564 --> 00:10:15.510
So if I go into resolvers,
I'm just gonna make one for people,

163
00:10:15.510 --> 00:10:17.302
still inside of query here.

164
00:10:17.302 --> 00:10:19.798
And then It's got to be a resolver.

165
00:10:19.798 --> 00:10:26.090
It's gonna return an array, and it's gonna
return an object with a name and an ID.

166
00:10:26.090 --> 00:10:31.846
So let's just do that, name of Sam,

167
00:10:31.846 --> 00:10:36.876
and ID of whatever, all right?

168
00:10:36.876 --> 00:10:40.787
So I'm gonna return that for people.

169
00:10:40.787 --> 00:10:45.326
Now if I go back and I say cool,
give me people, give me ID,

170
00:10:45.326 --> 00:10:48.970
give me name, and
I run this, I get that back.

171
00:10:48.970 --> 00:10:53.737
But I didn't write a resolver for ID and
I did not write a resolver for name.

172
00:10:53.737 --> 00:11:00.469
I only wrote a resolver for
people or a person in this case.

173
00:11:02.535 --> 00:11:07.405
&gt;&gt; Scott Moss: GraphQL was smart enough
to resolve each field because I returned

174
00:11:07.405 --> 00:11:10.779
an object that had the same
field names on it.

175
00:11:10.779 --> 00:11:14.260
The object that I returned in
my resolver were name and ID,

176
00:11:14.260 --> 00:11:17.966
those happen to be the exact same
name as the fields on person.

177
00:11:17.966 --> 00:11:22.259
So it just went ahead and automatically
resolve those for me, it's like, that's

178
00:11:22.259 --> 00:11:26.328
the same name, therefore that must be
the name field that must be the ID field.

179
00:11:26.328 --> 00:11:28.255
If I change the names, right?

180
00:11:28.255 --> 00:11:30.876
If I say, if I'm typo

181
00:11:30.876 --> 00:11:35.934
that
&gt;&gt; Scott Moss: Name

182
00:11:35.934 --> 00:11:40.353
is null because it didn't resolve that
field ,it didn't know what to do right?

183
00:11:40.353 --> 00:11:46.360
So the other side of that is,
let's say, I don't put a name here.

184
00:11:46.360 --> 00:11:48.647
I only return an ID, right?

185
00:11:48.647 --> 00:11:51.762
Cuz I want to do something
different with the name.

186
00:11:51.762 --> 00:11:56.460
So, what I'll do is, I can go up here and

187
00:11:56.460 --> 00:12:01.990
I can say, hey, for
a person for a person type,

188
00:12:01.990 --> 00:12:07.687
this is how you resolve
the name field like this.

189
00:12:07.687 --> 00:12:12.275
So this is how I can say, for the name
field of a person run this function.

190
00:12:12.275 --> 00:12:15.854
And then now I can use
that first argument.

191
00:12:15.854 --> 00:12:17.338
This will be the parent, right?

192
00:12:17.338 --> 00:12:22.067
The parent in this case, is going to
be the person that was returned here.

193
00:12:22.067 --> 00:12:25.249
So I'm just gonna call this person.

194
00:12:25.249 --> 00:12:30.615
So a better example would be,
let's actually put a name here.

195
00:12:30.615 --> 00:12:34.592
Let's just say, Henry.

196
00:12:34.592 --> 00:12:40.128
But I really want that to be capitalized,
so I'll just say return

197
00:12:40.128 --> 00:12:45.575
person.name.toupperCase, or
yeah, let's do uppercase.

198
00:12:50.272 --> 00:12:54.601
&gt;&gt; Scott Moss: Is it c,
I don't know we're gonna find out.

199
00:12:54.601 --> 00:12:59.922
So I can do that, and that will hijack
the original name being returned,

200
00:12:59.922 --> 00:13:04.025
then run this one and
then return the string uppercase,

201
00:13:04.025 --> 00:13:06.741
assuming that's the right method.

202
00:13:06.741 --> 00:13:08.611
So let's run that, there you go.

203
00:13:08.611 --> 00:13:09.668
It's uppercase now.

204
00:13:09.668 --> 00:13:12.241
&gt;&gt; Mark: How do you get type
inferences with resolvers?

205
00:13:12.241 --> 00:13:14.606
&gt;&gt; Scott Moss: How you get
type inference with resolvers.

206
00:13:14.606 --> 00:13:19.613
So, the way GraphQL works is because it's
not built with TypeScript TRPC where it's

207
00:13:19.613 --> 00:13:24.634
like TypeScript talking to TypeScript, you
have to do some type of code generation.

208
00:13:24.634 --> 00:13:29.194
So, basically, if you just go look up

209
00:13:29.194 --> 00:13:34.473
GraphQL codGen, they have a tool for that.

210
00:13:34.473 --> 00:13:38.849
It basically will look at
your schema like this and

211
00:13:38.849 --> 00:13:44.067
output Typescript for
you to import into all of your files.

212
00:13:44.067 --> 00:13:47.517
And then that way you get
the the nice syntax highlighting.

213
00:13:47.517 --> 00:13:50.408
I'm not doing it here in this course
because I feel like it's it's very

214
00:13:50.408 --> 00:13:53.684
TypeScript specific, and I don't want
people to have to know what TypeScript is

215
00:13:53.684 --> 00:13:54.948
to get the best out of GraphQL.

216
00:13:54.948 --> 00:13:59.014
But, yes, in production,
if you're using TypeScript and GraphQL,

217
00:13:59.014 --> 00:14:00.452
you would use a CodeGen.

218
00:14:00.452 --> 00:14:03.839
It's a command that you would run
every time you change your schema, or

219
00:14:03.839 --> 00:14:04.967
you can have it watch and

220
00:14:04.967 --> 00:14:08.488
it will output TypeScript files that
you can import anywhere in your app.

221
00:14:08.488 --> 00:14:11.433
Whether it's in the resolvers,
whether it's on your client side,

222
00:14:11.433 --> 00:14:12.712
wherever you wanna put them.

223
00:14:12.712 --> 00:14:15.140
That's how you would do it.

224
00:14:15.140 --> 00:14:16.984
So, yeah, it's a build step.

225
00:14:21.287 --> 00:14:23.667
&gt;&gt; Scott Moss: Okay, so yeah,
you can see here I'm hijacking the name,

226
00:14:23.667 --> 00:14:24.599
I'm resolving that.

227
00:14:24.599 --> 00:14:28.497
And because you gotta follow the order,

228
00:14:28.497 --> 00:14:34.001
I'm running the people query first,
so the resolver for

229
00:14:34.001 --> 00:14:39.062
people runs,
it returns an array of these objects.

230
00:14:39.062 --> 00:14:44.354
But because I also have a resolver for
a person's name and this is a person,

231
00:14:44.354 --> 00:14:48.806
now person runs, its parent is
the person that was returned and

232
00:14:48.806 --> 00:14:53.022
I can override what the name
was by putting something here.

233
00:14:53.022 --> 00:14:54.797
So I can make this be whatever I want.

234
00:14:54.797 --> 00:15:00.614
So now you can resolve field levels as
well as object levels and query levels.

235
00:15:00.614 --> 00:15:03.901
So it gets pretty powerful very quickly.

236
00:15:03.901 --> 00:15:07.129
And, again, these functions can
do whatever the hell they want.

237
00:15:07.129 --> 00:15:11.392
All right, so if I return the number here,
what do you think is gonna happen?

238
00:15:14.007 --> 00:15:17.400
&gt;&gt; Scott Moss: All right, if I try to do
this, it just converts It to a string.

239
00:15:17.400 --> 00:15:20.279
So in this case, it's gonna coerce
it to a string, because it's like,

240
00:15:20.279 --> 00:15:21.571
this is supposed to be a string.

241
00:15:21.571 --> 00:15:24.378
You return something that I can coerce,
I'll do that.

242
00:15:24.378 --> 00:15:27.062
So it's never not gonna
be what the schema says.

243
00:15:29.148 --> 00:15:31.207
&gt;&gt; Scott Moss: This can get pretty
buggy for things like timestamps,

244
00:15:31.207 --> 00:15:33.534
where sometimes you thought you
were gonna get a date object,

245
00:15:33.534 --> 00:15:35.520
but then you got a string,
and it gets really weird.

246
00:15:35.520 --> 00:15:40.083
But this is why sometimes you do
specifically write field-level resolvers

247
00:15:40.083 --> 00:15:41.228
for the most part.

