WEBVTT

1
00:00:00.250 --> 00:00:01.280
&gt;&gt; Scott Moss: This is an interesting one.

2
00:00:01.280 --> 00:00:04.500
So Resolving Enums, and then we'll talk
about Resolving Unions and Interfaces, and

3
00:00:04.500 --> 00:00:06.470
then we'll actually get to that.

4
00:00:06.470 --> 00:00:11.351
So resolving enums, for the most part,
you almost never need to resolve an enum,

5
00:00:11.351 --> 00:00:16.094
but sometimes you do because maybe the
enum that you wrote doesn't map directly

6
00:00:16.094 --> 00:00:20.304
to the actual value that you wanna use
in your UI or maybe to a database.

7
00:00:20.304 --> 00:00:22.989
An app that we're gonna be making
they don't map one for one, so

8
00:00:22.989 --> 00:00:24.446
we have to resolve it.

9
00:00:24.446 --> 00:00:30.082
So if I have an enum here in my schema,
&gt;&gt; Scott Moss: Or

10
00:00:30.082 --> 00:00:35.946
let's say enum and
I call it colors, right?

11
00:00:35.946 --> 00:00:41.486
And I have colors and I say,
I have one color that is blue.

12
00:00:41.486 --> 00:00:43.981
I have one color that is purple.

13
00:00:45.978 --> 00:00:49.371
&gt;&gt; Scott Moss: I have
another color that is brown.

14
00:00:49.371 --> 00:00:52.085
I can have this, and
I can use this enum wherever I want.

15
00:00:52.085 --> 00:00:56.886
So maybe now I'll say this
person has a favorite color, and

16
00:00:56.886 --> 00:00:59.583
it's of value colors like that.

17
00:01:00.756 --> 00:01:05.323
&gt;&gt; Scott Moss: But what if I don't
want to actually have the values be

18
00:01:05.323 --> 00:01:06.855
stored this way?

19
00:01:06.855 --> 00:01:12.145
Or maybe in the database, they actually
map to a hexadecimal color and

20
00:01:12.145 --> 00:01:14.215
not the actual word color?

21
00:01:14.215 --> 00:01:18.745
So if I wanted to remap those,
I can just also do that here.

22
00:01:18.745 --> 00:01:20.883
I just get, Grab the name of the enum,
this case colors.

23
00:01:20.883 --> 00:01:24.843
I can go to my resolvers top level,
say colors, like this, right?

24
00:01:24.843 --> 00:01:28.206
And then all I have to do is just give
it an object with those enums and

25
00:01:28.206 --> 00:01:31.313
the values on the right,
on which they map to.

26
00:01:31.313 --> 00:01:34.184
So if this case, I could say, okay,

27
00:01:34.184 --> 00:01:38.921
blue is actually like this
hexadecimal color or something.

28
00:01:38.921 --> 00:01:41.041
If I would have made a blue one,
I would have flipped out.

29
00:01:41.041 --> 00:01:42.626
That would have been crazy.

30
00:01:42.626 --> 00:01:44.666
[LAUGH] I don't like, wait,

31
00:01:44.666 --> 00:01:49.091
do I know a blue hexadecimal
color off the top of my head?

32
00:01:49.091 --> 00:01:50.316
Purple, that's pretty close.

33
00:01:50.316 --> 00:01:53.691
Whatever, so,
you get what I'm saying here.

34
00:01:53.691 --> 00:01:56.421
You can do that,
you can map it to a different color.

35
00:01:56.421 --> 00:01:58.271
So, this is how you would resolve an enum.

36
00:01:58.271 --> 00:02:03.171
So If someone were to ask for enum,
they would actually resolve to this value

37
00:02:03.171 --> 00:02:08.381
versus the actual enum cuz you couldn't
put a hexadecimal thing in your schema,

38
00:02:08.381 --> 00:02:11.409
so you can map your enums that way.

39
00:02:11.409 --> 00:02:15.049
It's very rare that I see people do that,
but we will most likely be doing that.

40
00:02:16.189 --> 00:02:20.598
The more interesting one and
useful one is gonna be Resolving Unions.

41
00:02:20.598 --> 00:02:21.147
Okay, so

42
00:02:21.147 --> 00:02:25.688
this one's not as complicated since you
already kind of know how unions work.

43
00:02:25.688 --> 00:02:29.912
It's very similar to what you would do on
the query side where you do dot dot on,

44
00:02:29.912 --> 00:02:33.434
where each one of those is in life
fragment which I consider like if

45
00:02:33.434 --> 00:02:34.348
statements.

46
00:02:34.348 --> 00:02:36.588
It's pretty much the same thing and
your resolver, right?.

47
00:02:36.588 --> 00:02:40.454
So for instance,
let's go back to our schema,

48
00:02:40.454 --> 00:02:43.558
let me get rid of the enum right quick.

49
00:02:43.558 --> 00:02:48.268
And we have a person,
we also have an animal.

50
00:02:49.728 --> 00:02:54.299
And it has a species, and

51
00:02:54.299 --> 00:02:58.008
it is a type string.

52
00:03:00.104 --> 00:03:05.884
But it also has an ID or
also has a name like this.

53
00:03:05.884 --> 00:03:09.986
So I'm gonna do that, and

54
00:03:09.986 --> 00:03:17.071
then I'll have a union
called searchType and

55
00:03:17.071 --> 00:03:22.863
it's gonna be an animal or a person.

56
00:03:22.863 --> 00:03:28.536
And then I'll say search query like this,

57
00:03:28.536 --> 00:03:35.963
no arguments,
just an array of searchType, not null.

58
00:03:35.963 --> 00:03:36.583
So I can do that.

59
00:03:37.653 --> 00:03:40.665
Now I gotta go write the resolver for
the search and

60
00:03:40.665 --> 00:03:44.107
then I need to resolve which
type I'm actually getting,

61
00:03:44.107 --> 00:03:48.071
how do I know something is animal,
something is person, right?

62
00:03:48.071 --> 00:03:51.161
So what I'll do,
is I'll go to my resolvers.

63
00:03:51.161 --> 00:03:52.853
First, I need to make a query for

64
00:03:52.853 --> 00:03:57.276
a search,
&gt;&gt; Scott Moss: Like this,

65
00:03:57.276 --> 00:04:02.789
search is just gonna return an array
of objects, one's gonna be a person.

66
00:04:04.389 --> 00:04:07.499
Name is Scott, and
what else does a person have?

67
00:04:07.499 --> 00:04:12.779
A person has an id, so
I'll just give it an id of whatever.

68
00:04:12.779 --> 00:04:16.989
And then there's also gonna be an animal
in here, because we can return

69
00:04:16.989 --> 00:04:21.396
a searchType, which is also an animal
that's have a species and a name.

70
00:04:21.396 --> 00:04:27.886
So this will be Darryl is my cat, and
it doesn't have id but it has a species.

71
00:04:29.446 --> 00:04:34.716
And I'll just say, Big cat, is a big cat.

72
00:04:34.716 --> 00:04:36.746
So his species is Big cat.

73
00:04:36.746 --> 00:04:40.480
So now we have that and then what I
wanna do is, I need to determine,

74
00:04:40.480 --> 00:04:45.217
how do I know when someone does an inline
fragment, when they say hey, on a species,

75
00:04:45.217 --> 00:04:47.698
give me this on a person, give me this.

76
00:04:47.698 --> 00:04:49.728
The resolver needs to
know which one's which.

77
00:04:49.728 --> 00:04:53.162
So in order to do that, I can say hey, for

78
00:04:53.162 --> 00:04:58.024
that searchType,
this is how you resolve them, right?

79
00:04:58.024 --> 00:05:00.559
So I can say okay, cool.

80
00:05:00.559 --> 00:05:05.344
For a searchType,
which is what I called it in my schema,

81
00:05:05.344 --> 00:05:11.329
I'm gonna get the actual object here and
I can say if object.species,

82
00:05:11.329 --> 00:05:16.839
if that's there, which it will
be a hundred percent, be there.

83
00:05:16.839 --> 00:05:21.177
If it's an animal, because it's non-null,
it has to be there,

84
00:05:21.177 --> 00:05:25.837
then return the name of that type,
which in this case is called Animal.

85
00:05:28.027 --> 00:05:32.367
Otherwise, it's gonna be a person.

86
00:05:32.367 --> 00:05:34.816
I mean, technically you should make
another if statement for a person, but

87
00:05:34.816 --> 00:05:36.853
I'm just gonna assume if it's
not an animal, it's a person.

88
00:05:38.950 --> 00:05:40.461
&gt;&gt; Scott Moss: So I can resolve it.

89
00:05:40.461 --> 00:05:43.713
I'm sorry, I need to do a resolve type.

90
00:05:43.713 --> 00:05:47.773
I'm tripping, so
I think you need to do objects here.

91
00:05:47.773 --> 00:05:48.833
Yeah, there we go, I'm sorry.

92
00:05:48.833 --> 00:05:54.639
Yeah, you need to do objects with
__resolve type, and that is the function.

93
00:06:00.635 --> 00:06:04.072
&gt;&gt; Scott Moss: So now that we
have that and we have our search,

94
00:06:04.072 --> 00:06:09.288
we should be able to search for
that and get back those specific types.

95
00:06:09.288 --> 00:06:13.401
So let's go try that,

96
00:06:13.401 --> 00:06:19.029
go back to our app and I'm going

97
00:06:19.029 --> 00:06:24.303
to say oops
&gt;&gt; Scott Moss: Search,

98
00:06:24.303 --> 00:06:30.393
I want the,
&gt;&gt; Scott Moss: On Person,

99
00:06:30.393 --> 00:06:35.487
give me the name and
id, and then on Animal,

100
00:06:35.487 --> 00:06:40.583
give me the name and
Species, but it's just

101
00:06:40.583 --> 00:06:46.072
freaking out about,
&gt;&gt; Scott Moss: Okay,

102
00:06:46.072 --> 00:06:47.852
this is a great example of this.

103
00:06:47.852 --> 00:06:49.868
Let's see if it actually
runs before I talk about it.

104
00:06:49.868 --> 00:06:56.252
That's great, so what it's saying here is,
hey, you have a union.

105
00:06:56.252 --> 00:06:58.844
They both have a name property on them,
but one of them is required and

106
00:06:58.844 --> 00:06:59.852
the other one is not.

107
00:06:59.852 --> 00:07:03.939
So this is gonna cost some inconsistencies
with the data you get back, so

108
00:07:03.939 --> 00:07:05.610
we don't allow it.

109
00:07:05.610 --> 00:07:09.580
So please either rename the field to
something else or make them the same.

110
00:07:09.580 --> 00:07:15.910
So in this case, I have to just do that in
order for our contract to be satisfied.

111
00:07:15.910 --> 00:07:17.440
So if I do that, here we go.

112
00:07:17.440 --> 00:07:21.667
We have an animal here, and
just to confirm, we can say typename.

113
00:07:21.667 --> 00:07:24.517
Don't say typename to run that.

114
00:07:24.517 --> 00:07:28.712
This is a person clearly,
this is an animal clearly,

115
00:07:28.712 --> 00:07:33.427
if we didn't resolve it,
we didn't have resolve type.

116
00:07:33.427 --> 00:07:35.937
I don't think it's gonna
know which ones which.

117
00:07:35.937 --> 00:07:41.357
All right, so right here, you have
an abstract type called search type.

118
00:07:41.357 --> 00:07:43.751
It must resolve to
an object type at runtime,

119
00:07:43.751 --> 00:07:46.716
we don't know what it resolves
cuz you didn't tell us.

120
00:07:46.716 --> 00:07:50.012
So can you resolve it for us,
yeah here you go, it's this

