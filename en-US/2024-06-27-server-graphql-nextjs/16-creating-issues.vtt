WEBVTT

1
00:00:00.000 --> 00:00:02.590
&gt;&gt; Scott Moss: So, for
create issues, as you might know,

2
00:00:02.590 --> 00:00:04.416
we're gonna need a mutation.

3
00:00:04.416 --> 00:00:06.734
We're gonna need an object type for

4
00:00:06.734 --> 00:00:11.763
the issue that kinda closely aligns to
our database table with the same name.

5
00:00:11.763 --> 00:00:16.001
We're gonna need the enums here,
the inputs, and like I said,

6
00:00:16.001 --> 00:00:19.942
the mutations, and
then all the resolvers that go with it.

7
00:00:19.942 --> 00:00:25.747
So, we will do that and see how it works,
so let's hop into our GraphQL Schema.

8
00:00:25.747 --> 00:00:29.010
Let's make our issue types and
all the other things, so

9
00:00:29.010 --> 00:00:31.240
I'm going to go into our Schema here.

10
00:00:31.240 --> 00:00:37.642
I'm going to make the issue type,
Type issue,

11
00:00:37.642 --> 00:00:42.471
if we go and look at our database Schema,
you can see that we have

12
00:00:42.471 --> 00:00:47.598
the issues type here, it has ID,
a name, a projectId, a userId.

13
00:00:47.598 --> 00:00:52.005
It has content at a string,
status as an enum, it has a createdAt, and

14
00:00:52.005 --> 00:00:55.096
then below it,
there's this relations table.

15
00:00:55.096 --> 00:00:59.396
You can see that an issue has one user and

16
00:00:59.396 --> 00:01:04.491
one project, so
we need to make those as well.

17
00:01:04.491 --> 00:01:08.722
Projects, we probably really won't get
to but definitely for sure on users,

18
00:01:08.722 --> 00:01:10.848
projects are mostly for extra credit.

19
00:01:10.848 --> 00:01:14.014
We'll just mostly focus on the user thing,
but you can add it if you want,

20
00:01:14.014 --> 00:01:15.665
I'll talk about it when we get there.

21
00:01:15.665 --> 00:01:20.995
So, let's do that, so issues,
we know we need ID, so let's do that.

22
00:01:20.995 --> 00:01:26.990
Got ID here, it has a name,
or what did I call it?

23
00:01:26.990 --> 00:01:33.425
So, the name, yes, it has a name,
that's a string that's not null,

24
00:01:33.425 --> 00:01:38.379
it has content, that's a string,
that's not null.

25
00:01:38.379 --> 00:01:43.815
It has a userId, a projectId,
a status, and a createdAt.

26
00:01:43.815 --> 00:01:48.601
So, userId, which is the same
type of the ID of userId, so

27
00:01:48.601 --> 00:01:51.059
I'll say that's also an ID.

28
00:01:51.059 --> 00:01:56.883
It has a projectId,
which is ID, it has a status,

29
00:01:56.883 --> 00:02:02.987
that's gonna be an enum type,
so let's make that,

30
00:02:02.987 --> 00:02:08.814
we'll say enum, and
I'm gonna call this issue,

31
00:02:08.814 --> 00:02:14.825
what did I call it here,
issue status, like that.

32
00:02:17.775 --> 00:02:21.436
It's gonna map to four different enums.

33
00:02:21.436 --> 00:02:27.037
I believe I have DONE, TODO,

34
00:02:27.037 --> 00:02:32.419
INPROGRESS, and BACKLOG.

35
00:02:35.746 --> 00:02:36.969
Just gonna map to those.

36
00:02:36.969 --> 00:02:39.834
So, status is gonna be
of type IssueStatus.

37
00:02:46.036 --> 00:02:53.473
And lastly, it's gonna have a user, which
is gonna be type user, that's not null.

38
00:02:53.473 --> 00:02:56.450
Arguably, you could just
not have the userId and

39
00:02:56.450 --> 00:02:58.635
just put user, but it's up to you.

40
00:02:58.635 --> 00:03:00.743
Maybe sometimes you just
wanna see the userId and

41
00:03:00.743 --> 00:03:02.241
not have to populate entire user.

42
00:03:02.241 --> 00:03:05.941
So okay, so we got that.

43
00:03:05.941 --> 00:03:08.828
Next thing we wanna do is
create the input, which,

44
00:03:08.828 --> 00:03:12.739
if you wanna create an issue,
you have to give it a name and a content.

45
00:03:12.739 --> 00:03:21.117
A status is optional cuz it defaults to
one in the database Schema as backlog.

46
00:03:21.117 --> 00:03:22.268
So, let's do that.

47
00:03:22.268 --> 00:03:27.932
Say input CreateIssueInput.

48
00:03:30.080 --> 00:03:31.856
And yeah, name, content, status.

49
00:03:31.856 --> 00:03:37.909
So, name is a not null string,
content is a not null string,

50
00:03:37.909 --> 00:03:41.486
and status is of type issueStatus.

51
00:03:41.486 --> 00:03:44.884
But that can be null cuz maybe you
just want it to default to whatever

52
00:03:44.884 --> 00:03:46.288
the database defaults to.

53
00:03:49.161 --> 00:03:50.324
So we have that.

54
00:03:53.549 --> 00:04:00.105
Now we go down to our mutation,
and we can do a createIssue,

55
00:04:00.105 --> 00:04:05.746
which takes in an input
type of createIssueInput,

56
00:04:05.746 --> 00:04:09.437
not null, and returns an issue.

57
00:04:09.437 --> 00:04:13.380
So, more of the same,
but slightly different.

58
00:04:15.732 --> 00:04:20.377
Okay, we got that, if we go back and
we actually try to run this,

59
00:04:20.377 --> 00:04:22.367
let's see if we get error.

60
00:04:26.088 --> 00:04:26.782
&gt;&gt; Scott Moss: No, it's fine.

61
00:04:26.782 --> 00:04:30.738
You only get error if you make a resolver,
and not on the Schema site.

62
00:04:30.738 --> 00:04:33.308
But you can put something on the Schema,
not happen on a resolver is fine,

63
00:04:33.308 --> 00:04:34.481
you just won't be able to run it.

64
00:04:36.865 --> 00:04:38.665
&gt;&gt; Scott Moss: So,
let's go make the resolvers now.

65
00:04:38.665 --> 00:04:40.579
So, we head over the resolvers.

66
00:04:40.579 --> 00:04:43.956
We know we're gonna make a mutation
here for a createIssue, so

67
00:04:43.956 --> 00:04:47.411
I'm just gonna go ahead and
do that, createIssue, like this.

68
00:04:47.411 --> 00:04:48.228
It's async.

69
00:04:50.307 --> 00:04:51.100
&gt;&gt; Scott Moss: It's gonna be that.

70
00:04:56.737 --> 00:04:58.791
&gt;&gt; Scott Moss: And basically, for this,

71
00:04:58.791 --> 00:05:03.348
look at our notes because now
we're doing authentication,

72
00:05:03.348 --> 00:05:09.441
we have everything authenticated, we need
to check to make sure there is a user.

73
00:05:09.441 --> 00:05:11.294
There's not a user, we wanna error out, so

74
00:05:11.294 --> 00:05:13.963
you should not be able to CreateIssue
unless you are signed in.

75
00:05:13.963 --> 00:05:18.746
And I know you're signed in if there's
a user on the context object because I

76
00:05:18.746 --> 00:05:22.632
validate and verify a JSON web
token before all of this runs and

77
00:05:22.632 --> 00:05:25.941
attach the user to the context
object if it is there.

78
00:05:25.941 --> 00:05:31.406
And now it is up to the resolver's job
to enforce that restriction on the user.

79
00:05:31.406 --> 00:05:36.343
So, we can do it on a resolver per
resolver basis and not globally, so

80
00:05:36.343 --> 00:05:40.021
that leads to a lot of
redundancy around checking.

81
00:05:40.021 --> 00:05:43.192
But you could arguably just
take this logic out and

82
00:05:43.192 --> 00:05:47.647
create a higher order function that
wraps this that says, is off, and

83
00:05:47.647 --> 00:05:51.065
it just does this for
you plus running your resolver.

84
00:05:51.065 --> 00:05:53.715
So, that is a higher order function that
you can make if you don't wanna have to

85
00:05:53.715 --> 00:05:55.253
have to do this if-check
every single time.

86
00:05:55.253 --> 00:05:57.601
So, whatever pattern you want,
it's just JavaScript at that point.

87
00:06:00.572 --> 00:06:01.802
&gt;&gt; Scott Moss: But
we'll go ahead and do that.

88
00:06:01.802 --> 00:06:05.778
So, we'll say, let's get our pan that
we're never gonna use cuz it's on

89
00:06:05.778 --> 00:06:07.561
a mutation, there is no parent.

90
00:06:07.561 --> 00:06:10.666
There's gonna be an input arc here,
and then we'll get the context.

91
00:06:10.666 --> 00:06:16.985
I'll just go ahead and scope that to
GraphQL or GQL Context like that.

92
00:06:16.985 --> 00:06:21.274
And then I'll say,

93
00:06:21.274 --> 00:06:25.814
if not, ctx.user,

94
00:06:25.814 --> 00:06:32.384
then throw new GraphQLError.

95
00:06:32.384 --> 00:06:36.411
I'm gonna say the same thing I have
before, I'm actually just gonna copy this

96
00:06:36.411 --> 00:06:41.965
one, there we go
&gt;&gt; Scott Moss: So, go ahead and throw

97
00:06:41.965 --> 00:06:46.791
that if there is no user, if there is
a user, let's go ahead and make an issue.

98
00:06:46.791 --> 00:06:48.542
So, this is where we're
gonna start interacting with

99
00:06:48.542 --> 00:06:49.426
the database a little bit.

100
00:06:49.426 --> 00:06:52.960
So, just a little bit,
it kinda make sense if you look at it, but

101
00:06:52.960 --> 00:06:54.865
it's really not that difficult.

102
00:06:54.865 --> 00:06:59.642
So, we'll say,
issue = await db.insert, and

103
00:06:59.642 --> 00:07:05.102
we want to insert into the issues table,
which is already

104
00:07:05.102 --> 00:07:11.383
imported at the top of your file if
you took the imports that I had.

105
00:07:11.383 --> 00:07:17.640
And we wanna insert with these values,
these values are just going to be input.

106
00:07:19.815 --> 00:07:23.155
&gt;&gt; Scott Moss: And then we wanna do
this special thing called returning,

107
00:07:23.155 --> 00:07:27.993
if you don't do returning, the database is
just going to return back the stats on how

108
00:07:27.993 --> 00:07:31.901
many rows were inserted, and
whether or not they were successful.

109
00:07:31.901 --> 00:07:35.993
We actually want to get the issues
that were created so we do .returning,

110
00:07:35.993 --> 00:07:38.765
that's gonna return,
technically, an array.

111
00:07:38.765 --> 00:07:42.320
So, I'm just gonna call that ish, I guess
I can't call it issues because that's

112
00:07:42.320 --> 00:07:44.479
already called issues,
I'll just call this data.

113
00:07:44.479 --> 00:07:49.467
So, this will be an array of issues
that always returns an array, but

114
00:07:49.467 --> 00:07:54.293
because we only pass in one,
we should only expect to get back one.

115
00:07:54.293 --> 00:07:58.391
So, I'm just gonna say return datazero,
obviously you gonna do more checks in

116
00:07:58.391 --> 00:08:02.796
here, you just don't wanna trust that your
table is always gonna return something,

117
00:08:02.796 --> 00:08:04.098
but this is fine for now.

118
00:08:08.802 --> 00:08:09.794
&gt;&gt; Scott Moss: Cool, so we got that.

119
00:08:15.704 --> 00:08:20.745
&gt;&gt; Scott Moss: Wait, I think we need
to put the userId on here, yeah?

120
00:08:20.745 --> 00:08:23.903
Yeah, yeah, there we go, we gotta put
the userId on, I forgot about that.

121
00:08:23.903 --> 00:08:27.711
I thought that was on the input, so
you don't just wanna put input on here,

122
00:08:27.711 --> 00:08:29.538
you actually wanna make an object.

123
00:08:29.538 --> 00:08:33.681
Put userId, set that to ctx.user.id, and

124
00:08:33.681 --> 00:08:38.487
then spread over the input,
that's what you want.

125
00:08:38.487 --> 00:08:41.811
Otherwise, this would break
because you need userId for issue,

126
00:08:41.811 --> 00:08:43.451
the database would say, nope.

127
00:08:43.451 --> 00:08:46.447
Now we need to resolve
our issue with GraphQL.

128
00:08:46.447 --> 00:08:48.515
There are some things on there
that we have to tell it about.

129
00:08:48.515 --> 00:08:53.144
Specifically, we need to teach GraphQL
how to get a user for an issue.

130
00:08:53.144 --> 00:08:57.977
Because we said the issue type on GraphQL
has a user, which is a nested type.

131
00:08:57.977 --> 00:09:02.731
So, we have to tell GraphQL how to resolve
a user, which is an object type on

132
00:09:02.731 --> 00:09:06.666
an issue, which is an object type,
cuz by default it won't.

133
00:09:06.666 --> 00:09:10.980
Because, I mean, I guess technically we
could just write some more query here.

134
00:09:10.980 --> 00:09:15.930
We could say, we can do a join here and
try to get the user, or

135
00:09:15.930 --> 00:09:21.088
I guess technically what we could do,
you could just do this.

136
00:09:21.088 --> 00:09:24.762
You could say, okay, spread over that.

137
00:09:24.762 --> 00:09:32.113
And then here's the user, which is going
to be ctx.user, you could just do that.

138
00:09:33.862 --> 00:09:37.616
&gt;&gt; Scott Moss: And then it will just
automatically resolve the user property

139
00:09:37.616 --> 00:09:39.859
on the issue that's returned here.

140
00:09:39.859 --> 00:09:44.538
But who says that
the ctx.user is gonna have

141
00:09:44.538 --> 00:09:48.720
the full fields that a user type would?

142
00:09:48.720 --> 00:09:53.134
There's no guarantee, in this case, I mean
I did, our user only has three properties.

143
00:09:53.134 --> 00:09:57.375
But you probably wanna get the user from
the database and not from this context,

144
00:09:57.375 --> 00:09:58.204
cuz who knows?

145
00:09:58.204 --> 00:10:02.408
What you put on the context as far as a
user might not be exactly what you expose

146
00:10:02.408 --> 00:10:03.933
as a user for GraphQL type.

147
00:10:03.933 --> 00:10:08.766
So, they might always align, and also,
you wanna make sure you leave it up

148
00:10:08.766 --> 00:10:12.604
to the resolvers,
let the resolvers do the heavy lifting,

149
00:10:12.604 --> 00:10:15.936
don't try to over-optimize
with the databases.

150
00:10:15.936 --> 00:10:20.921
That is a solution for optimizing,
but I've been down that path and

151
00:10:20.921 --> 00:10:25.040
it's basically like looking
at this thing right here.

152
00:10:25.040 --> 00:10:30.917
And then instead of letting the resolvers
figure out what order they should run, you

153
00:10:30.917 --> 00:10:36.737
actually just run the whole graph in the
top-level resolver based off this query.

154
00:10:36.737 --> 00:10:39.103
So, you parse this query yourself and
figure out, and

155
00:10:39.103 --> 00:10:41.019
turn that into a database query basically.

156
00:10:41.019 --> 00:10:44.589
Take this GraphQL query,
turn it into one big database query, and

157
00:10:44.589 --> 00:10:46.004
return everything here.

158
00:10:46.004 --> 00:10:50.405
Versus, I'm only gonna just query for the
thing that I need and make resolvers for

159
00:10:50.405 --> 00:10:52.891
it, which could lead to
more database queries.

160
00:10:52.891 --> 00:10:54.037
There's pros and cons, but

161
00:10:54.037 --> 00:10:56.248
we're just gonna leave it up
to the resolvers for now.

162
00:10:56.248 --> 00:10:57.973
What I just described is super advanced.

163
00:11:01.642 --> 00:11:03.686
&gt;&gt; Scott Moss: So,
in that case, we need to say,

164
00:11:03.686 --> 00:11:06.155
hey, you need to resolve the user issue.

165
00:11:06.155 --> 00:11:10.772
So, I'm gonna go out here at the mutation,
I'm gonna say issue,

166
00:11:10.772 --> 00:11:13.753
this is how you resolve a user, like this.

167
00:11:13.753 --> 00:11:16.337
As a first argument to user,
that's gonna be its parent,

168
00:11:16.337 --> 00:11:19.781
I'm just gonna call that issue,
cuz that's for sure always gonna be there.

169
00:11:19.781 --> 00:11:25.124
And all I really need to do, first,
this doesn't have any arguments,

170
00:11:25.124 --> 00:11:29.324
so I'm just gonna skip that but
we do have context here.

171
00:11:29.324 --> 00:11:35.068
And I'm just gonna do the same
thing that we did in issues,

172
00:11:35.068 --> 00:11:42.003
if there is no user, then how are you
gonna get the user for this issue?

173
00:11:42.003 --> 00:11:46.357
So, go ahead and do that, and then
from here, it's just a database query.

174
00:11:46.357 --> 00:11:55.477
So, I can say,
return db.query.users.findFirst,

175
00:11:55.477 --> 00:11:59.703
where,
&gt;&gt; Scott Moss: And

176
00:11:59.703 --> 00:12:04.539
then you use this eq function,

177
00:12:04.539 --> 00:12:08.631
which stands for equals,

178
00:12:08.631 --> 00:12:16.078
where users.id is
the same as issue.userId.

179
00:12:16.078 --> 00:12:18.152
How do I know there's
a userId on the issue?

180
00:12:18.152 --> 00:12:22.507
Well, I know that because the database
Schema has userId on the issue,

181
00:12:22.507 --> 00:12:25.275
you can't create an issue
without a userId.

182
00:12:25.275 --> 00:12:29.915
And I'm returning an entire issue here,
which should have a userId,

183
00:12:29.915 --> 00:12:34.490
if I hover over this,
it'll say userId string, it's right there.

184
00:12:34.490 --> 00:12:38.113
So, assuming there is an issue,
there should be a userId on it.

185
00:12:38.113 --> 00:12:43.107
And this is the issue because
this user is a child resolver

186
00:12:43.107 --> 00:12:47.072
of the issue,
which is being returned here.

187
00:12:50.167 --> 00:12:54.242
&gt;&gt; Scott Moss: So, that's how we get our
user, so should be able to save that,

188
00:12:54.242 --> 00:12:56.509
should be able to create a user now.

189
00:12:56.509 --> 00:13:00.750
I think the last thing we need to
do actually is resolve the enums.

190
00:13:00.750 --> 00:13:03.154
So, my reason you have to resolve
them is cuz in the database,

191
00:13:03.154 --> 00:13:05.807
they're all lowercase, but
in GraphQL, they're capitalized.

192
00:13:05.807 --> 00:13:09.145
I could have just made them both
lowercase or both capitalized, but

193
00:13:09.145 --> 00:13:11.442
why not show you how to resolve enums,
right?

194
00:13:11.442 --> 00:13:14.866
So, I'm actually just gonna copy
cuz that's so redundant to write,

195
00:13:14.866 --> 00:13:16.384
I don't feel like writing it.

196
00:13:16.384 --> 00:13:21.821
I was gonna put at the top of my
resolvers, and just to get you understand

197
00:13:21.821 --> 00:13:27.452
what I'm saying, if I go to my database
Schema, my enums are lowercase.

198
00:13:27.452 --> 00:13:32.317
If I go to my GraphQL Schema,
my enums are capitalized,

199
00:13:32.317 --> 00:13:36.051
that is why I have to
resolve them that way.

200
00:13:41.947 --> 00:13:46.249
&gt;&gt; Scott Moss: That's it, so I'm teaching
it like, hey, if you see this, it's this.

201
00:13:46.249 --> 00:13:47.668
You see this, it's this.

202
00:13:49.882 --> 00:13:53.848
&gt;&gt; Scott Moss: We're gonna get them back
capitalized in our GraphQL query, but

203
00:13:53.848 --> 00:13:55.588
the database will see them.

204
00:13:55.588 --> 00:14:03.319
That's that, so let's go to our app,
Localhost 3000, should be signed in.

205
00:14:03.319 --> 00:14:07.472
I guess we could just check,
let's check Apollo Studio first, yeah,

206
00:14:07.472 --> 00:14:10.881
let's do that first before we
get embarrassed on the app.

207
00:14:10.881 --> 00:14:16.152
So, let's go here, I'm still signing up
with my headers with my Darrell user.

208
00:14:16.152 --> 00:14:20.379
I'm gonna go to root, I'm gonna go to
mutation, I'm gonna go create an issue.

209
00:14:20.379 --> 00:14:23.548
I'm gonna say, give me the ID,
give me the name,

210
00:14:23.548 --> 00:14:26.723
give me the user,
I want the user's email and ID.

211
00:14:26.723 --> 00:14:30.881
I also want the content as well,
so I'm gonna do that.

212
00:14:30.881 --> 00:14:33.662
Let me just delete these arcs right quick,
and

213
00:14:33.662 --> 00:14:41.110
then I'm gonna say,
&gt;&gt; Scott Moss: There we go,

214
00:14:41.110 --> 00:14:44.969
get these arcs, no,
can we add the arguments please?

215
00:14:44.969 --> 00:14:48.527
There we go, okay, so
now I want to add the content string.

216
00:14:48.527 --> 00:14:53.146
I will pick a status, I'll have a default,
so for content I'll say,

217
00:14:53.146 --> 00:14:54.412
this is the issue.

218
00:14:54.412 --> 00:15:01.840
And I'll say,
&gt;&gt; Scott Moss: Fix the back door.

219
00:15:01.840 --> 00:15:04.790
That's the thing I need to do,
so I'll run this mutation.

220
00:15:04.790 --> 00:15:06.943
And there we go, we created an issue.

221
00:15:06.943 --> 00:15:11.629
We have the ID of it, the name, the user
that created it and the ID of the user,

222
00:15:11.629 --> 00:15:13.448
and then the content itself.

223
00:15:13.448 --> 00:15:15.328
So, we have an issue there.

224
00:15:19.436 --> 00:15:20.735
&gt;&gt; Scott Moss: So, now that that works,

225
00:15:20.735 --> 00:15:24.589
we should feel pretty confident that we
can go to the app and create the issue.

226
00:15:24.589 --> 00:15:28.568
Because we're not getting issues,
we still won't see anything on the page,

227
00:15:28.568 --> 00:15:31.657
we'll just have to go trust for
now that that issue is there.

228
00:15:31.657 --> 00:15:34.074
And when we write the query later,
you'll see it pop up on the page, but

229
00:15:34.074 --> 00:15:34.811
let's give it a try.

230
00:15:34.811 --> 00:15:41.600
So, I can say issue is do the thing and
keep doing the thing.

231
00:15:45.363 --> 00:15:47.250
&gt;&gt; Scott Moss: So, we can do that,
we can create an issue.

232
00:15:49.900 --> 00:15:51.406
&gt;&gt; Scott Moss: Did that work?

233
00:15:51.406 --> 00:15:56.071
Let me see, why is that not working?

234
00:15:57.097 --> 00:15:59.292
&gt;&gt; Scott Moss: 400, let's see.

235
00:16:01.972 --> 00:16:05.259
&gt;&gt; Scott Moss: That request,
I might have set something up wrong,

236
00:16:05.259 --> 00:16:07.060
let's look at the network.

237
00:16:07.060 --> 00:16:10.245
This would be an error on the client side,
so it probably had anything to do with

238
00:16:10.245 --> 00:16:13.210
the server side since we just validated
that it works on the server side.

239
00:16:13.210 --> 00:16:15.898
So, it might be a bug I
left on the client side.

240
00:16:15.898 --> 00:16:20.285
CreatedAt, cannot query field
createdAt on type issue.

241
00:16:20.285 --> 00:16:26.027
Interesting, cuz I must have not had
added it on my Schema version of issue,

242
00:16:26.027 --> 00:16:27.553
let's go check.

243
00:16:27.553 --> 00:16:33.452
Yeah, I forgot to add createdAt, so this
is where those error messages are so good.

244
00:16:33.452 --> 00:16:38.555
So, I can just do that,
and let's try that again,

245
00:16:38.555 --> 00:16:42.842
there we go, it created the issue, cool.

246
00:16:42.842 --> 00:16:47.190
And I guess, just to note,
I guess that's me reneging on what I said,

247
00:16:47.190 --> 00:16:50.975
I said it's always gonna be 200,
unless it's a 400.

248
00:16:50.975 --> 00:16:55.300
And the only time it's a 400 is if
it's a Schema validation error,

249
00:16:55.300 --> 00:17:00.079
I guess what I meant was, it's always
gonna be a 200 if the resolvers run.

250
00:17:00.079 --> 00:17:04.644
If and when you actually execute on
the server, it's always gonna be 200.

251
00:17:04.644 --> 00:17:08.935
But if doesn't get to the execution part
because the validation failed, then yeah,

252
00:17:08.935 --> 00:17:10.195
it's gonna be a 400.

253
00:17:10.195 --> 00:17:13.496
But as far as executing,
it's always at 200, whether or

254
00:17:13.496 --> 00:17:17.591
not your resolvers threw an error or
not, it's always gonna be at 200.

255
00:17:17.591 --> 00:17:23.046
But the validation happens before the
execution, it's not in GraphQL land yet,

256
00:17:23.046 --> 00:17:27.485
it's still in regular HTP land,
so it respects the status codes.

257
00:17:27.485 --> 00:17:30.879
But after that, it's in GraphQL land and
it's just gonna sent back 200.

