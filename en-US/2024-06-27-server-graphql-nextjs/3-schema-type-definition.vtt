WEBVTT

1
00:00:00.210 --> 00:00:03.520
&gt;&gt; Scott Moss: Here, we're gonna talk
about the schema definition language.

2
00:00:03.520 --> 00:00:07.425
So in the client side course, we talked
more about the query language, which is,

3
00:00:07.425 --> 00:00:09.830
we'll also do a lot of that today for
sure.

4
00:00:09.830 --> 00:00:12.873
But this server side course is
specifically focused on the schema

5
00:00:12.873 --> 00:00:13.990
definition language.

6
00:00:13.990 --> 00:00:16.555
So what does it look like to
make a graphical schema and

7
00:00:16.555 --> 00:00:18.480
everything that's involved?

8
00:00:18.480 --> 00:00:19.991
So that's what we're gonna be doing today.

9
00:00:19.991 --> 00:00:24.516
if you've built any schema in your life
whether it's a data base schema, some

10
00:00:24.516 --> 00:00:29.522
frontend validation, this is gonna feel
very familiar, it's modeled after JSON and

11
00:00:29.522 --> 00:00:34.391
java script so if you've written java
script it should feel pretty familiar.

12
00:00:34.391 --> 00:00:37.841
This isn't gonna feel foreign,
honestly it feels like Typescript.

13
00:00:37.841 --> 00:00:41.693
If you've ever written type script that's
what GraphQL schemas feel like to me.

14
00:00:41.693 --> 00:00:43.163
They feel very much like TypeScript.

15
00:00:43.163 --> 00:00:47.067
And in fact, there's tons of tooling that
will take a GraphQL schema and turn it to

16
00:00:47.067 --> 00:00:51.553
TypeScript and vice versa, because
they're very similar in my opinion.

17
00:00:51.553 --> 00:00:52.573
So we're gonna talk about that.

18
00:00:52.573 --> 00:00:57.479
At the same time, as I talk about it, I
have a branch on the repo set up just for

19
00:00:57.479 --> 00:01:02.190
us to go and apply some of these things
that I'm talking about as we do it.

20
00:01:02.190 --> 00:01:04.984
So let's walk through how we start
that and get that set up, and

21
00:01:04.984 --> 00:01:07.540
then we'll walk through
the schema definition linger.

22
00:01:07.540 --> 00:01:09.520
So please follow along on this next part.

23
00:01:09.520 --> 00:01:16.330
So check out to the server/demo branch,
it's a stripped down version of the repo.

24
00:01:16.330 --> 00:01:19.699
If you've worked on the client-side
course, there were tons of files and

25
00:01:19.699 --> 00:01:21.043
react Stuff in there.

26
00:01:21.043 --> 00:01:24.843
This one's pretty bare bones, I'm just
gonna walk you through it right quick.

27
00:01:24.843 --> 00:01:27.375
So we have an app directory,
this is a Next.js app, so

28
00:01:27.375 --> 00:01:28.873
there's a app directory here.

29
00:01:28.873 --> 00:01:32.830
But really only thing that we care
about is this api folder inside,

30
00:01:32.830 --> 00:01:37.813
which has a graphql server, or
I'm sorry, a graphql folder inside.

31
00:01:37.813 --> 00:01:41.728
And there's three files,
there's a resolvers, a route and a schema.

32
00:01:41.728 --> 00:01:46.613
What we're gonna do as we walk through
some of the concepts of a graphql schema

33
00:01:46.613 --> 00:01:50.145
is we're gonna be working
here in this schema file, and

34
00:01:50.145 --> 00:01:53.018
we're gonna just kinda
play around with it.

35
00:01:53.018 --> 00:01:58.068
So, one of the things we can
do is obviously start this.

36
00:01:58.068 --> 00:02:02.644
So, npm run dev is
the command to start this.

37
00:02:06.610 --> 00:02:09.935
&gt;&gt; Scott Moss: If you get an error trying
to start, be sure to do a npm install.

38
00:02:09.935 --> 00:02:12.955
I went over at the beginning, that means
you didn't have the modules installed,

39
00:02:12.955 --> 00:02:14.505
so make sure you do an empty install here.

40
00:02:16.365 --> 00:02:17.688
But start the server,

41
00:02:17.688 --> 00:02:23.005
it should put you on Mindsets Port 3
3,001 because I'm already on port 3,000.

42
00:02:23.005 --> 00:02:24.565
So let me stop that and run it again.

43
00:02:28.445 --> 00:02:33.397
There we go, I'm on 3,000 now, so
once you're there what you can do is,

44
00:02:33.397 --> 00:02:36.285
you can go to the browser, go to 3,000.

45
00:02:36.285 --> 00:02:38.215
You should just see a blank
page that says home.

46
00:02:38.215 --> 00:02:42.838
That's fine,
we're not doing react right now but

47
00:02:42.838 --> 00:02:45.858
you wanna go to /api/graphql.

48
00:02:45.858 --> 00:02:48.944
And when you go here,
you might get an error, right?

49
00:02:48.944 --> 00:02:50.854
And we're gonna talk about
why you get an error.

50
00:02:50.854 --> 00:02:55.744
This is intentional, and this is showing
you just how specific GraphQL is.

51
00:02:55.744 --> 00:02:59.525
So if you go to /api/graphql
in your browser,

52
00:02:59.525 --> 00:03:03.975
you should get this error,
unexpected EOF end of file.

53
00:03:03.975 --> 00:03:06.755
I think that's what that means,
so we're gonna fix this.

54
00:03:06.755 --> 00:03:10.009
We're gonna go through, and
start talking about some of these types.

55
00:03:13.101 --> 00:03:14.861
&gt;&gt; Scott Moss: Okay, so back to the notes.

56
00:03:14.861 --> 00:03:19.585
First thing, type definitions.

57
00:03:19.585 --> 00:03:20.697
What is the type definition?

58
00:03:20.697 --> 00:03:24.847
Basically, it's literally the building
block of a GraphQL schema, or honestly,

59
00:03:24.847 --> 00:03:26.027
really any schema.

60
00:03:26.027 --> 00:03:30.152
You can think of a type in a GraphQL
schema as a table in a database,

61
00:03:30.152 --> 00:03:33.047
that's the best way I can describe it.

62
00:03:33.047 --> 00:03:34.846
It's not always gonna match one for one,

63
00:03:34.846 --> 00:03:38.337
you might have tables in your database
that don't need GraphQL types.

64
00:03:38.337 --> 00:03:41.671
You might have GraphQL types that
don't map to tables in a database.

65
00:03:41.671 --> 00:03:44.591
Because you might not always be
using a database with GraphQL.

66
00:03:44.591 --> 00:03:49.041
GraphQL doesn't care where your data comes
from, so it's not always a one for one.

67
00:03:49.041 --> 00:03:52.000
But, if you're building a simple CRUD app,
yeah,

68
00:03:52.000 --> 00:03:56.251
I would say your GraphQL types will
align pretty heavily with your tables.

69
00:03:56.251 --> 00:03:59.766
Plus or minus some fields
like passwords or combining,

70
00:03:59.766 --> 00:04:04.716
virtualizing one field into two fields,
or the opposite of things like that.

71
00:04:04.716 --> 00:04:08.876
So let's talk about what makes up a type.

72
00:04:08.876 --> 00:04:11.773
So we have something called
a scholar type, a scholar type, or

73
00:04:11.773 --> 00:04:15.436
just primitive types in a programming
language, GraphQL has a few of them.

74
00:04:15.436 --> 00:04:20.126
It has int for integer, so numbers,
floats which are decimals.

75
00:04:21.268 --> 00:04:24.198
String, it's a string,
it's exactly what it sounds like.

76
00:04:24.198 --> 00:04:26.428
Boolean is true or false, and then ID.

77
00:04:26.428 --> 00:04:29.676
ID is literally the same thing,
it can be a number or a string,

78
00:04:29.676 --> 00:04:32.808
but it just tells GraphQL
this is a unique value.

79
00:04:32.808 --> 00:04:36.884
This is helpful for GraphQL tooling
that does caching on a frontend and

80
00:04:36.884 --> 00:04:39.378
tries to resolve things by unique value.

81
00:04:39.378 --> 00:04:42.682
So, but it basically just be any
value that is considered unique.

82
00:04:42.682 --> 00:04:47.582
So those are scholar types,
and then we have object types.

83
00:04:47.582 --> 00:04:51.395
So an object type is exactly
what it sounds like,

84
00:04:51.395 --> 00:04:56.417
it's a more complicated type,
so it's not just one field, but

85
00:04:56.417 --> 00:05:02.748
basically it is composed of other scholar
types and other object types, right?

86
00:05:02.748 --> 00:05:06.588
So here's an example of a user
type that we're making.

87
00:05:06.588 --> 00:05:12.028
It has an id whose type is ID,
this exclamation here means non null.

88
00:05:12.028 --> 00:05:15.466
So this is very common in a database
where you can say, I have a field and

89
00:05:15.466 --> 00:05:16.408
it cannot be null.

90
00:05:16.408 --> 00:05:20.323
This is a required field, that's
what the exclamation means required.

91
00:05:20.323 --> 00:05:23.599
If you don't have exclamation next to it,
it is not required.

92
00:05:23.599 --> 00:05:26.249
That's gonna make a big
difference as we make a schema.

93
00:05:26.249 --> 00:05:31.269
So in the case of post, what you see here
is, okay, I have a field called post.

94
00:05:31.269 --> 00:05:35.902
It is type array, so it's gonna be an
array of another object type called post

95
00:05:35.902 --> 00:05:39.895
that's not shown here, but
it does not have an exclamation mark,

96
00:05:39.895 --> 00:05:44.055
which means this field is not required,
so it could be null.

97
00:05:44.055 --> 00:05:45.505
So we're gonna dive
into this a little bit.

98
00:05:45.505 --> 00:05:49.213
So let's go into our code,
go into the schema,

99
00:05:49.213 --> 00:05:52.655
and we're going to make some things first.

100
00:05:52.655 --> 00:05:56.859
So the first thing we need to do is,
and we're gonna make it first, and

101
00:05:56.859 --> 00:06:02.014
I'll talk about it in a minute, is we
need to make what's called a query type.

102
00:06:02.014 --> 00:06:05.638
What a capital Q, so
if you say type Query like this and

103
00:06:05.638 --> 00:06:08.064
you kinda open it up like an object.

104
00:06:10.174 --> 00:06:13.021
And quick note,
as you're writing this stuff,

105
00:06:13.021 --> 00:06:16.504
if you don't get syntax highlighting or
things like that.

106
00:06:16.504 --> 00:06:18.614
There are tons of plugins.

107
00:06:18.614 --> 00:06:23.786
I'm using cursor, which is just a fork
of VS Code so it's the same thing.

108
00:06:23.786 --> 00:06:26.424
There are tons of plugins you can
download that will give you the syntax

109
00:06:26.424 --> 00:06:28.026
highlighting for GraphQL.

110
00:06:28.026 --> 00:06:31.902
This comment that I'm using right here
inside this template string is telling my

111
00:06:31.902 --> 00:06:33.783
editor that this is a GraphQL string and

112
00:06:33.783 --> 00:06:36.476
that's how I'm getting
syntax highlighting you.

113
00:06:36.476 --> 00:06:38.351
You should also have that comment there,

114
00:06:38.351 --> 00:06:40.975
which will hint to your editor
that this is graphic QL, and

115
00:06:40.975 --> 00:06:44.901
if you have the appropriate GraphQL
plugin, it'll highlight for you.

116
00:06:44.901 --> 00:06:48.461
But if it doesn't highlight, that doesn't
mean it's not gonna change how it works.

117
00:06:48.461 --> 00:06:50.841
It's still gonna work the same,
it just obviously doesn't look as good.

118
00:06:50.841 --> 00:06:53.541
It's like writing code in Google Docs,
you don't wanna do that.

119
00:06:53.541 --> 00:06:57.431
It'll work, but
probably don't wanna do it.

120
00:06:57.431 --> 00:07:00.201
So that's how I got
the syntax highlighting.

121
00:07:00.201 --> 00:07:04.556
And then what I'm gonna do here, we'll
talk about the query type a little bit,

122
00:07:04.556 --> 00:07:08.014
but what I'm gonna do here is I'm
going to make an object type.

123
00:07:08.014 --> 00:07:10.894
So let's do that, so
I'm gonna say type person.

124
00:07:12.314 --> 00:07:13.224
It's an object type.

125
00:07:13.224 --> 00:07:19.056
And then let's give the person a name,
which is a type string, okay?

126
00:07:22.127 --> 00:07:25.228
&gt;&gt; Scott Moss: And then for us to get
rid of this era that we're having and

127
00:07:25.228 --> 00:07:27.399
we can actually explore our schema.

128
00:07:27.399 --> 00:07:30.389
We need to write one query type.

129
00:07:30.389 --> 00:07:33.869
So what I'm gonna do here is I'm
gonna make something called me.

130
00:07:35.209 --> 00:07:39.781
Make a query called me and
it returns a person like this, and

131
00:07:39.781 --> 00:07:41.799
I'm just gonna hit Save.

132
00:07:44.749 --> 00:07:46.741
&gt;&gt; Scott Moss: So
I made an object type called person.

133
00:07:46.741 --> 00:07:48.921
It has a name field, which is type string.

134
00:07:48.921 --> 00:07:50.904
And I'm actually gonna make that required,
so

135
00:07:50.904 --> 00:07:52.646
I'm gonna put an exclamation next to it.

136
00:07:55.554 --> 00:07:57.941
&gt;&gt; Scott Moss: And on the query type,
I made a field called me,

137
00:07:57.941 --> 00:07:59.811
and I said its type is called person.

138
00:07:59.811 --> 00:08:02.766
I'm also gonna make that an exclamation,
so

139
00:08:02.766 --> 00:08:06.917
that means the me field on
query has to return a person.

140
00:08:06.917 --> 00:08:11.350
If it doesn't return a person,
the server will blow up and

141
00:08:11.350 --> 00:08:15.247
the person type must have
a field on it called name.

142
00:08:15.247 --> 00:08:19.587
That's a type string, if it doesn't,
it will blow up, okay?

143
00:08:19.587 --> 00:08:23.573
So that's a very simple
GraphQL schema there,

144
00:08:23.573 --> 00:08:27.368
we go back to our browser,
go back to our app.

145
00:08:27.368 --> 00:08:31.592
If we hit refresh,
you'll now see this whole app load up.

146
00:08:33.127 --> 00:08:35.328
&gt;&gt; Scott Moss: So
why is it loading up now?

147
00:08:35.328 --> 00:08:36.808
Why was it not loading up before?

148
00:08:38.308 --> 00:08:39.386
We can talk about that.

149
00:08:41.981 --> 00:08:45.070
&gt;&gt; Scott Moss: So if you go into
the route.ts file in the GraphQL folder,

150
00:08:45.070 --> 00:08:47.727
this is actually where
we're making the schema.

151
00:08:47.727 --> 00:08:52.480
Don't worry too much about what's going on
here, you're gonna do this from scratch in

152
00:08:52.480 --> 00:08:55.692
a little bit, but
this is kinda where I make the server, and

153
00:08:55.692 --> 00:08:59.447
the server cannot be created unless
there is at least one query type.

154
00:08:59.447 --> 00:09:02.642
You can think of a query
type as like a Git request.

155
00:09:02.642 --> 00:09:07.616
Unless you have one Git request route
to find in your GraphQL schema,

156
00:09:07.616 --> 00:09:08.912
it will not boot.

157
00:09:10.072 --> 00:09:10.922
It just won't work.

158
00:09:12.662 --> 00:09:18.072
So once we made that it worked,
how do we actually get this app here?

159
00:09:18.072 --> 00:09:22.352
There's no code, if you go look, there's
literally no code in here for this app.

160
00:09:22.352 --> 00:09:24.151
So where does it coming from?

161
00:09:24.151 --> 00:09:26.533
That's actually part
of the GraphQL schema,

162
00:09:26.533 --> 00:09:29.011
this is a tool called Apollo Studio.

163
00:09:29.011 --> 00:09:34.381
We're using an open source GraphQL
server framework called Apollo.

164
00:09:34.381 --> 00:09:36.872
It's a company that
makes GraphQL tools and

165
00:09:36.872 --> 00:09:39.571
they have built this app
called Apollo Studio.

166
00:09:39.571 --> 00:09:43.774
You could think of it as like Postman or
Insomnia, but for GraphQL, and

167
00:09:43.774 --> 00:09:45.606
it's built into your server.

168
00:09:45.606 --> 00:09:46.996
You can turn it on, you can turn it off.

169
00:09:48.376 --> 00:09:49.915
We have it turned on and

170
00:09:49.915 --> 00:09:54.616
what it does is it runs an introspection
query to your GraphQL query.

171
00:09:54.616 --> 00:09:58.069
It pulls down the entire schema, and
then it builds an app around it, and

172
00:09:58.069 --> 00:09:59.776
it allows us to explore our schema.

173
00:09:59.776 --> 00:10:02.589
So it's quite effective,
it's very similar if you did like it.

174
00:10:02.589 --> 00:10:06.606
You can introspect SQL databases or
MySQL databases or

175
00:10:06.606 --> 00:10:11.959
Postgres databases and see what
the schema is, it's the same thing.

176
00:10:11.959 --> 00:10:14.879
This app introspects our server,
pulls down the schema, and

177
00:10:14.879 --> 00:10:16.479
knows everything about it.

178
00:10:16.479 --> 00:10:19.649
In fact, I can go here to click on
this button that says Schema and

179
00:10:19.649 --> 00:10:22.609
I can see the documentation for
the schema that I just made.

180
00:10:23.612 --> 00:10:27.962
So I can see I have a query type
called me, returns a required person.

181
00:10:27.962 --> 00:10:32.922
I have an object type called person,
and I have some scholars here.

182
00:10:32.922 --> 00:10:35.364
So if I click on the Object type person,

183
00:10:35.364 --> 00:10:39.002
you can see that it has a name
field with a required string.

184
00:10:40.382 --> 00:10:42.704
So I built all this for free,
we don't have to do anything.

185
00:10:42.704 --> 00:10:46.828
And if I click on SDL here, I'll
actually see the schema that we wrote.

186
00:10:50.824 --> 00:10:53.543
&gt;&gt; Scott Moss: So
that alone is just quite impressive.

187
00:10:53.543 --> 00:10:56.959
Imagine if you were building
a developer facing product,

188
00:10:56.959 --> 00:11:01.215
which obviously needs tons of
documentation, I don't think I've ever

189
00:11:01.215 --> 00:11:05.906
used a GraphQL API from a company where
they built documentation from scratch.

190
00:11:05.906 --> 00:11:09.206
I've never seen it,
they'll just say, go here.

191
00:11:09.206 --> 00:11:13.576
Type in our URL into Apollo Studio,
there's your documentation.

192
00:11:13.576 --> 00:11:17.236
You can see it all there, you can explore
it, you can do whatever you want.

193
00:11:17.236 --> 00:11:21.056
There's no need for it, why would we write
documentation when it can be generated?

194
00:11:21.056 --> 00:11:24.838
So that's the great part,
is like you just never see it.

195
00:11:24.838 --> 00:11:29.038
You don't need documentation for it,
whereas with REST there's swagger.

196
00:11:29.038 --> 00:11:32.588
There's people making their own stuff,
it gets it just gets complicated.

197
00:11:32.588 --> 00:11:37.473
But for GraphQL, it's pretty much
standardized because this tool

198
00:11:37.473 --> 00:11:41.768
works with any GraphQL schema,
period, so it just works.

199
00:11:42.994 --> 00:11:45.494
Right, so let's go back to
the Explorer and let's run our query.

200
00:11:45.494 --> 00:11:49.114
So I'm just gonna get rid of what I have
here, let's use this query Explorer.

201
00:11:49.114 --> 00:11:53.414
So right now, you can see Root Type,
we have Query, Query here.

202
00:11:53.414 --> 00:11:55.924
If you hit this + button,
it'll just add it for you.

203
00:11:57.274 --> 00:12:01.894
It's very cool, and I only have one
field on the Query and it's called me.

204
00:12:01.894 --> 00:12:04.230
We made it, so
I'm going to hit the + button on that.

205
00:12:04.230 --> 00:12:09.010
And then because me is an object type,
it has to be expanded like this.

206
00:12:09.010 --> 00:12:11.550
You see these objects,
these object brackets?

207
00:12:11.550 --> 00:12:14.690
If I didn't put these object brackets,
I couldn't run this query.

208
00:12:14.690 --> 00:12:17.850
If I just said, let me just do this.

209
00:12:17.850 --> 00:12:21.020
You can see it's already erroring,
if I try to run this, it's gonna say no.

210
00:12:21.020 --> 00:12:24.331
Field me of type Person must
have a selection of subfields.

211
00:12:24.331 --> 00:12:27.191
Did you mean me, {...}?

212
00:12:27.191 --> 00:12:32.096
It knows that me returns the person type
and the person type is an object type,

213
00:12:32.096 --> 00:12:34.301
so what fields do you want on me?

214
00:12:34.301 --> 00:12:38.221
Because it doesn't know, you have to be
very specific of what you're asking for.

215
00:12:38.221 --> 00:12:39.971
Otherwise, you'll get this.

216
00:12:39.971 --> 00:12:42.703
We did not write the code for
this input validation.

217
00:12:42.703 --> 00:12:47.443
This was given to us for free because it's
looking at the rules of the schema, right?

218
00:12:47.443 --> 00:12:50.123
And even our syntax highlighting,
is aware of that.

219
00:12:52.343 --> 00:12:56.151
So we need to satisfy that constraint
by making the object type,

220
00:12:56.151 --> 00:12:57.853
which still isn't enough.

221
00:12:57.853 --> 00:12:59.853
They just disable the button,
no, that's not, [LAUGH].

222
00:12:59.853 --> 00:13:01.593
You're not even gonna do it.

223
00:13:01.593 --> 00:13:04.228
So, there's only one field we can ask for
and that's name.

224
00:13:04.228 --> 00:13:06.415
So I could just click here and
it'll add name for me,

225
00:13:06.415 --> 00:13:08.418
I could have just typed it out as well.

226
00:13:08.418 --> 00:13:11.928
Then I run the Query and
we get Hello World.

227
00:13:11.928 --> 00:13:15.218
So you might be asking,
where the hell does Hello World come from?

228
00:13:15.218 --> 00:13:16.713
We didn't write that,

229
00:13:16.713 --> 00:13:21.138
this is another cool feature of
GraphQL because everything is typed.

230
00:13:22.718 --> 00:13:26.262
I can use this tool that will
mock out all the data for

231
00:13:26.262 --> 00:13:30.312
my schema because it knows all
the types of all the fields.

232
00:13:30.312 --> 00:13:32.607
So this tool takes our schema and

233
00:13:32.607 --> 00:13:38.142
mocks out all the return values
without us having to write them.

234
00:13:38.142 --> 00:13:39.992
Obviously, we don't want
that in production.

235
00:13:39.992 --> 00:13:43.286
We're gonna use real data and talk to
a database and that's what you're gonna do

236
00:13:43.286 --> 00:13:46.443
today, but just to prototype the schema
and get things going, it's great.

237
00:13:46.443 --> 00:13:48.805
You can just mock this
schema out right here,

238
00:13:48.805 --> 00:13:50.873
which is exactly what this code does.

239
00:13:50.873 --> 00:13:55.871
It just looks at our GraphQL schema and
mocks out every single field on it,

240
00:13:55.871 --> 00:14:00.883
given the type, because everything
resolves to a scholar at some point.

241
00:14:00.883 --> 00:14:05.381
So it's just mocking out strings Integer,
Floats, Booleans, and IDs.

242
00:14:05.381 --> 00:14:09.351
So those are just primitive types so
it can mock those out pretty effectively.

243
00:14:09.351 --> 00:14:14.291
And that's where Hello World comes from,
that's this tool mocking it out.

244
00:14:14.291 --> 00:14:20.111
You can give this tool other functions to
run to what mock data you want to return.

245
00:14:20.111 --> 00:14:22.879
But at that point, you might also just
make real resolvers it might have been.

246
00:14:24.961 --> 00:14:26.149
&gt;&gt; Scott Moss: Any questions so far?

247
00:14:27.399 --> 00:14:31.246
If this is your first time experiencing
GraphQL on the server, you might have your

248
00:14:31.246 --> 00:14:35.239
mind blown at this point just how free
we were able to get some of this stuff.

249
00:14:35.239 --> 00:14:39.329
Cuz I know in REST,
you would not be here right now.

250
00:14:39.329 --> 00:14:41.719
You might not ever get here,
this is like a dream.

251
00:14:41.719 --> 00:14:45.303
You worked at a company that had something
like this built for their REST, API,

252
00:14:45.303 --> 00:14:48.419
you're probably at a great company
cuz no one built stuff like this.

253
00:14:48.419 --> 00:14:51.972
They just default to swagger API swagger,
API, and

254
00:14:51.972 --> 00:14:55.379
I hate the way the look,
I hate how swagger looks.

255
00:14:55.379 --> 00:14:57.749
I just cannot stand the way that it look.

256
00:14:57.749 --> 00:15:01.659
It blows my mind that it's like still
looks like Bootstrap two or so.

257
00:15:01.659 --> 00:15:03.270
I don't, I can't stand it.

258
00:15:03.270 --> 00:15:07.428
But this right here just feels, you ever
tried to use something like Swagger or

259
00:15:07.428 --> 00:15:11.460
any REST documentation and you wanna
actually run the route and it's just so

260
00:15:11.460 --> 00:15:12.280
complicated.

261
00:15:12.280 --> 00:15:15.090
You gotta click here,
then you gotta sign in sometimes.

262
00:15:15.090 --> 00:15:19.960
And this is so complicated, I just want
to just try this thing out right quick.

263
00:15:19.960 --> 00:15:22.473
And that's just so hard, but
with this, you just try it out.

264
00:15:22.473 --> 00:15:25.305
You just run it right now, and we didn't
have to write any code for it, so

265
00:15:25.305 --> 00:15:26.757
I think that's pretty impressive.

