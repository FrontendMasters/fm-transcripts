WEBVTT

1
00:00:00.310 --> 00:00:03.710
For this course, we will be using
TypeScript instead of plain JavaScript.

2
00:00:03.710 --> 00:00:06.033
Now, TypeScript is becoming
the tool of choice for

3
00:00:06.033 --> 00:00:09.690
any JavaScript developer who is
interested in using modern tooling.

4
00:00:09.690 --> 00:00:14.185
Nowadays, most projects that I've worked
on have been using TypeScript, or

5
00:00:14.185 --> 00:00:16.034
looking to move to TypeScript.

6
00:00:16.034 --> 00:00:21.016
So really, if you are going to be,
writing React Native code for your job or

7
00:00:21.016 --> 00:00:26.098
for work, you're more than likely going
to be using TypeScript in the end.

8
00:00:26.098 --> 00:00:28.907
So if you never use TypeScript before,

9
00:00:28.907 --> 00:00:32.493
there's no time like
the present to get stuck in.

10
00:00:32.493 --> 00:00:36.052
Just a note because of the way that
React Native projects are set up,

11
00:00:36.052 --> 00:00:40.111
if you're not interested in learning
TypeScript, you can simply opt out and

12
00:00:40.111 --> 00:00:41.814
just not use it on your project.

13
00:00:41.814 --> 00:00:44.170
If you use TypeScript on the web before,

14
00:00:44.170 --> 00:00:47.499
you can build the web app
using the TypeScript compiler,

15
00:00:47.499 --> 00:00:51.195
meaning that the app won't build
if the whole script is wrong.

16
00:00:51.195 --> 00:00:54.019
But on React Native because
we use in Metro Bundler and

17
00:00:54.019 --> 00:00:55.652
TypeScript is just adjacent,

18
00:00:55.652 --> 00:01:00.150
the Metro Bundler step will still work
even if your TypeScript is wrong.

19
00:01:00.150 --> 00:01:03.550
So if you're not interested in TypeScript,
you can opt out of this.

20
00:01:03.550 --> 00:01:04.544
So what is TypeScript?

21
00:01:04.544 --> 00:01:08.968
TypeScript essentially typed JavaScript,
and it is a superset of JavaScript,

22
00:01:08.968 --> 00:01:13.260
which means that all valid JavaScript
code is also a valid TypeScript code, so

23
00:01:13.260 --> 00:01:17.109
it's like JavaScript, but
you can option you have some extra stuff.

24
00:01:17.109 --> 00:01:21.552
The TypeScript files, and
React Native have TS and

25
00:01:21.552 --> 00:01:25.593
TSX file extension, so
instead of JS and JSX.

26
00:01:25.593 --> 00:01:29.538
And TypeScript has two
main points of views.

27
00:01:29.538 --> 00:01:32.428
So firstly it does static code analysis.

28
00:01:32.428 --> 00:01:36.166
So without you doing anything,
so there's no types here,

29
00:01:36.166 --> 00:01:41.425
it analyzes your existing code and points
out any incorrect usages when possible.

30
00:01:41.425 --> 00:01:46.045
So for example, if you consider this code,
so we have a const, my number, and

31
00:01:46.045 --> 00:01:47.380
I've assigned to 5.

32
00:01:47.380 --> 00:01:50.422
And if I try to call split on it,

33
00:01:50.422 --> 00:01:55.572
you actually get a TypeScript
error on your editor.

34
00:01:55.572 --> 00:01:59.156
And you will see a property
split does not exist on type 5.

35
00:01:59.156 --> 00:02:01.929
And this is because TypeScript
knows that this is a number,

36
00:02:01.929 --> 00:02:05.050
because I've literally just
assigned to a constant.

37
00:02:05.050 --> 00:02:09.030
But split is an operation
you can only do on a string.

38
00:02:09.030 --> 00:02:11.100
So it's going to tell me
that you can't do that.

39
00:02:14.110 --> 00:02:20.750
Now, static code analysis isn't going to
be enough for more complicated use cases.

40
00:02:20.750 --> 00:02:25.680
So for that reason, you can also expand
your JavaScript code with custom types.

41
00:02:26.700 --> 00:02:29.857
So for example,
consider this add function, so

42
00:02:29.857 --> 00:02:33.325
it's just going to take A and
B and add them together.

43
00:02:33.325 --> 00:02:37.460
So JavaScript does not type safe,
there is really nothing preventing or

44
00:02:37.460 --> 00:02:42.338
even warning you, if instead of passing in
numbers, you pass in strings or objects or

45
00:02:42.338 --> 00:02:45.180
function or literally anything.

46
00:02:45.180 --> 00:02:47.690
And this could cause
unintended side effects.

47
00:02:47.690 --> 00:02:50.910
So ideally you want other people to know,

48
00:02:50.910 --> 00:02:56.530
that you need to pass in two numbers
without having to read the comments.

49
00:02:57.910 --> 00:03:02.510
So to do that, you can explicitly type
these arguments and the return type.

50
00:03:02.510 --> 00:03:07.373
So here, and the way we do that,
is we add a colon and the type.

51
00:03:07.373 --> 00:03:12.965
So here we say that A is a number, and
B is a number, and it also returns number.

52
00:03:12.965 --> 00:03:16.206
So now if I tried to call this add
function with hello and world,

53
00:03:16.206 --> 00:03:18.419
you will get a warning
in your code editor.

54
00:03:22.138 --> 00:03:29.229
And here's a tip for CI usage, so I
usually add a Typescript check step on CI,

55
00:03:29.229 --> 00:03:33.760
so along with checking tests and linting.

56
00:03:33.760 --> 00:03:39.870
And basically the way you do it is if you
do use yarn, you can just use do yarn tsc.

57
00:03:39.870 --> 00:03:46.098
But if you use npm the best thing to do is
add a script for ts:check that codes tsc.

58
00:03:46.098 --> 00:03:51.069
And then this will basically check for
the TypeScript types in your codebase.

