WEBVTT

1
00:00:00.240 --> 00:00:02.459 A:middle L:90%
for this course we will be using TypeScript instead of

2
00:00:02.529 --> 00:00:05.639 A:middle L:90%
playing JavaScript now, TypeScript is becoming the tool of

3
00:00:05.740 --> 00:00:08.339 A:middle L:90%
choice for any jealousy developer who is interested in using

4
00:00:08.619 --> 00:00:12.580 A:middle L:90%
modern tooling nowadays, most projects that I've worked on

5
00:00:12.779 --> 00:00:15.490 A:middle L:90%
have been using TypeScript or looking to move to TypeScript

6
00:00:16.230 --> 00:00:20.000 A:middle L:90%
So really if you are going to be right in

7
00:00:20.070 --> 00:00:22.899 A:middle L:90%
react native code for your job or for work you're

8
00:00:23.339 --> 00:00:25.140 A:middle L:90%
more than likely going to be using TypeScript in the

9
00:00:25.230 --> 00:00:28.670 A:middle L:90%
end so if you never use touch group before there's

10
00:00:28.879 --> 00:00:32.340 A:middle L:90%
no time like the present to get stuck in just

11
00:00:32.869 --> 00:00:34.579 A:middle L:90%
a note because of the way that react native project

12
00:00:35.109 --> 00:00:36.850 A:middle L:90%
are set up. If you're not interested in learning

13
00:00:37.170 --> 00:00:40.460 A:middle L:90%
TypeScript you can simply opt out and just not use

14
00:00:40.689 --> 00:00:42.570 A:middle L:90%
it on your project. If you use TypeScript on

15
00:00:42.659 --> 00:00:44.750 A:middle L:90%
the web before you can build the web app using

16
00:00:45.350 --> 00:00:48.280 A:middle L:90%
the typescript compiler meaning that you can, the app

17
00:00:48.560 --> 00:00:52.100 A:middle L:90%
won't build if the TypeScript is wrong but on react

18
00:00:52.350 --> 00:00:54.640 A:middle L:90%
native because we use the metro bundler and TypeScript is

19
00:00:54.750 --> 00:00:57.859 A:middle L:90%
just adjacent. The metro bundler step will still work

20
00:00:58.359 --> 00:01:00.670 A:middle L:90%
even if you're TypeScript is wrong so if you're not

21
00:01:00.829 --> 00:01:02.359 A:middle L:90%
interested in touch skipped, you can opt out of

22
00:01:02.439 --> 00:01:05.700 A:middle L:90%
this. So what is TypeScript TypeScript essentially typed,

23
00:01:06.280 --> 00:01:09.400 A:middle L:90%
JavaScript and it is a super set of JavaScript which

24
00:01:09.739 --> 00:01:13.030 A:middle L:90%
means that all valid javascript code is also valid typescript

25
00:01:13.459 --> 00:01:15.590 A:middle L:90%
code. So it's like JavaScript but you can actually

26
00:01:15.909 --> 00:01:19.680 A:middle L:90%
have some extra stuff um the TypeScript files in react

27
00:01:19.890 --> 00:01:22.640 A:middle L:90%
native have T s and T s x file extensions

28
00:01:23.209 --> 00:01:26.599 A:middle L:90%
so instead of Js and Js x and TypeScript has

29
00:01:27.030 --> 00:01:30.890 A:middle L:90%
two main points of views So firstly it does static

30
00:01:31.359 --> 00:01:34.219 A:middle L:90%
code analysis. So without you doing anything, so

31
00:01:34.530 --> 00:01:37.310 A:middle L:90%
there's no types here, it analyzes your existing code

32
00:01:37.819 --> 00:01:41.439 A:middle L:90%
and points out any incorrect usages when possible. So

33
00:01:41.739 --> 00:01:43.420 A:middle L:90%
for example, if you consider this code, so

34
00:01:43.670 --> 00:01:46.370 A:middle L:90%
we have a constant my number and I decided to

35
00:01:46.459 --> 00:01:49.750 A:middle L:90%
five and if I try to call split on it

36
00:01:50.540 --> 00:01:54.640 A:middle L:90%
, Um you actually get a typescript error on your

37
00:01:54.769 --> 00:01:56.750 A:middle L:90%
editor and you will see it probably display, it

38
00:01:56.879 --> 00:01:59.739 A:middle L:90%
does not exist on type five and this is because

39
00:02:00.079 --> 00:02:02.920 A:middle L:90%
TypeScript knows that this is a number because of literally

40
00:02:03.250 --> 00:02:06.450 A:middle L:90%
just designed to a constant but split is an operation

41
00:02:06.870 --> 00:02:09.129 A:middle L:90%
you can you do on a string. So it's

42
00:02:09.219 --> 00:02:11.060 A:middle L:90%
going to tell me that you can't do that.

43
00:02:13.939 --> 00:02:17.259 A:middle L:90%
Now study study code analysis isn't going to be enough

44
00:02:18.169 --> 00:02:21.490 A:middle L:90%
for for more complicated use cases. So for that

45
00:02:21.740 --> 00:02:24.900 A:middle L:90%
reason you can also expand your javascript code with custom

46
00:02:25.240 --> 00:02:28.819 A:middle L:90%
types. So for example, consider this add function

47
00:02:29.530 --> 00:02:32.000 A:middle L:90%
so it's just going to take A and B and

48
00:02:32.310 --> 00:02:35.689 A:middle L:90%
add them together since you asked does not type safe

49
00:02:36.210 --> 00:02:38.750 A:middle L:90%
. There is really nothing preventing or even warning you

50
00:02:39.090 --> 00:02:42.020 A:middle L:90%
if instead of passing in numbers, you passing strings

51
00:02:42.479 --> 00:02:45.520 A:middle L:90%
or objects or function or literally anything and this could

52
00:02:45.659 --> 00:02:49.199 A:middle L:90%
cause unintended side effects. So ideally you want other

53
00:02:49.509 --> 00:02:54.000 A:middle L:90%
people to know that you need to pass in two

54
00:02:54.210 --> 00:02:58.050 A:middle L:90%
numbers without having to read the comments. So to

55
00:02:58.180 --> 00:03:01.310 A:middle L:90%
do that you can explicitly type these arguments and the

56
00:03:01.400 --> 00:03:03.780 A:middle L:90%
return type. So here and the way we do

57
00:03:03.949 --> 00:03:06.650 A:middle L:90%
that is we are a colon and the type.

58
00:03:07.360 --> 00:03:09.750 A:middle L:90%
So here we say that is a number and B

59
00:03:09.919 --> 00:03:13.139 A:middle L:90%
is the number and it also returns number. So

60
00:03:13.310 --> 00:03:15.139 A:middle L:90%
now if I try to call this add function with

61
00:03:15.550 --> 00:03:17.659 A:middle L:90%
Hello and world, you will get a warning in

62
00:03:17.740 --> 00:03:24.599 A:middle L:90%
your code editor and here's a tip for ci usage

63
00:03:25.340 --> 00:03:28.539 A:middle L:90%
. So I usually add a TypeScript check, step

64
00:03:29.180 --> 00:03:32.800 A:middle L:90%
one ci. So along with checking tests and lynching

65
00:03:33.639 --> 00:03:35.789 A:middle L:90%
and basically the way you do it is if you

66
00:03:35.889 --> 00:03:38.900 A:middle L:90%
do use young, you can just do young TSC

67
00:03:39.580 --> 00:03:41.990 A:middle L:90%
but if you use npm the best thing to do

68
00:03:42.229 --> 00:03:45.120 A:middle L:90%
is add a script for T s check that calls

69
00:03:45.379 --> 00:03:49.090 A:middle L:90%
TSC and then this will basically check for the TypeScript

70
00:03:49.520 --> 00:03:50.650 A:middle L:90%
types in your code base.

