WEBVTT

1
00:00:00.410 --> 00:00:04.052
So let me just quickly show
you on the home screen,

2
00:00:04.052 --> 00:00:07.980
just how the reanimated components work.

3
00:00:07.980 --> 00:00:11.760
So I'm going to just
had a little view here.

4
00:00:11.760 --> 00:00:20.105
And I'm going to animate the styles of
this view just to see how it works.

5
00:00:20.105 --> 00:00:24.410
Okay, so let's do,

6
00:00:26.409 --> 00:00:33.160
const, shared = useSharedValue.

7
00:00:33.160 --> 00:00:35.310
Let's start with a 0.

8
00:00:35.310 --> 00:00:41.900
And then let's do a style
which is useanimatedstyle.

9
00:00:44.715 --> 00:00:51.080
And this is a function.

10
00:00:55.771 --> 00:00:56.346
And it returns an object
which is the style object.

11
00:01:02.620 --> 00:01:07.609
And so, Yeah it's just a returning

12
00:01:07.609 --> 00:01:11.762
empty object to begin with.

13
00:01:11.762 --> 00:01:17.679
All right, so
let's make this into a square so

14
00:01:17.679 --> 00:01:22.233
I'm going to do styles.square and

15
00:01:22.233 --> 00:01:29.017
I'm going to give it some width and
a height And

16
00:01:29.017 --> 00:01:35.245
a background color of light

17
00:01:35.245 --> 00:01:40.940
green styles.square.

18
00:01:42.040 --> 00:01:46.456
Okay, so we have a little square here,
so I want to do it so

19
00:01:46.456 --> 00:01:51.430
that when I click on the square,
it moves slightly to the right.

20
00:01:52.990 --> 00:01:59.520
So to do that,
I want to actually use a pressable,

21
00:01:59.520 --> 00:02:06.840
so let's import pressable,
and let's do an OnPress.

22
00:02:10.657 --> 00:02:16.592
We'll do shared.value equals

23
00:02:16.592 --> 00:02:21.210
shared.value + 20.

24
00:02:21.210 --> 00:02:25.490
Now, I wanna use this shared value.

25
00:02:25.490 --> 00:02:30.597
To update this style,
so let's do transform,

26
00:02:30.597 --> 00:02:36.840
and that's this an array and
then we want a object.

27
00:02:36.840 --> 00:02:41.387
So we want to translate y to whatever

28
00:02:41.387 --> 00:02:45.790
the shared value is shared value,

29
00:02:49.658 --> 00:02:54.110
All right, and now we wanna add
this style to our pressable.

30
00:02:54.110 --> 00:02:58.950
Now in order for animated styles to
take any effect on your component,

31
00:02:58.950 --> 00:03:01.830
this needs to be a reanimated component.

32
00:03:03.140 --> 00:03:08.020
So the way to do that is we'll
do const ReanimatedPressable.

33
00:03:11.250 --> 00:03:16.139
And then where we have
react-native-reanimated we

34
00:03:16.139 --> 00:03:20.050
need the default export so
we animate it and

35
00:03:20.050 --> 00:03:27.450
we'll do reanimated.create animated
component and we pass in the pressable.

36
00:03:32.985 --> 00:03:37.210
And we're going to use that
instead of depressible.

37
00:03:37.210 --> 00:03:42.470
And now we can pass in the style as
the second item on our styles array.

38
00:03:43.980 --> 00:03:45.860
Now when I click on that, okay,

39
00:03:45.860 --> 00:03:49.937
translate y while she goes
down stairs to translate x.

40
00:03:49.937 --> 00:03:53.880
They get, so
every time I click on it, it moves.

41
00:03:53.880 --> 00:03:56.408
Now you'll notice that it moves, but

42
00:03:56.408 --> 00:04:00.310
it's not animating so
I want it to move smoothly.

43
00:04:00.310 --> 00:04:05.240
So this is where the,
width transition helper methods come in.

44
00:04:05.240 --> 00:04:09.116
So if you remember in the animated
talks we have with timing, with spring,

45
00:04:09.116 --> 00:04:13.115
with decay, with timing is the one that
you're going to be using most often or

46
00:04:13.115 --> 00:04:16.157
at least I do so
if we're important with timing.

47
00:04:16.157 --> 00:04:21.562
So here OnPress where
we set the new value,

48
00:04:21.562 --> 00:04:26.830
we can do shared.value and with timing.

49
00:04:31.140 --> 00:04:34.718
So this will set this
value to this new value,

50
00:04:34.718 --> 00:04:39.990
so the current value + 20 but
it will transition to it.

51
00:04:39.990 --> 00:04:40.680
So now let's reload.

52
00:04:40.680 --> 00:04:44.590
When working with the animator
to it's often good to reload in

53
00:04:44.590 --> 00:04:49.040
between hot reloading because it
doesn't always update correctly.

54
00:04:51.840 --> 00:04:57.200
So now when I, whenever I click on it,
it kind of shifts slide through right.

55
00:04:57.200 --> 00:05:00.887
There's an animation config here as well.

56
00:05:00.887 --> 00:05:02.924
So I can tweak the duration.

57
00:05:02.924 --> 00:05:08.284
So I can for example say duration,
1000 milliseconds,

58
00:05:08.284 --> 00:05:12.396
so we'll take whole second
to go to the right.

59
00:05:12.396 --> 00:05:17.630
COUGH] So

60
00:05:17.630 --> 00:05:21.346
on a high level this is how
animating a component using

61
00:05:21.346 --> 00:05:25.816
animator styles will work and
let's use this now on our button.

62
00:05:25.816 --> 00:05:30.878
So currently what's happening is
you can't really choose an emoji,

63
00:05:30.878 --> 00:05:36.000
you can't really choose a mood,
if you haven't selected one.

64
00:05:36.000 --> 00:05:38.070
However, this button looks enabled.

65
00:05:38.070 --> 00:05:43.941
So we just want to do a visual UI
update for the user to know that well,

66
00:05:43.941 --> 00:05:50.430
I know that I can't currently choose
anything because this is dimmed out.

67
00:05:50.430 --> 00:05:54.812
So, I'm going to remove
this code from here.

68
00:05:54.812 --> 00:06:01.890
[SOUND]
All right.

69
00:06:01.890 --> 00:06:06.640
Let's go into our mood picker component.

70
00:06:11.330 --> 00:06:17.000
Okay, so our choose button is over here,
and it's suppressible.

71
00:06:17.000 --> 00:06:19.044
So, we need to create
an animated component for it.

72
00:06:19.044 --> 00:06:23.406
So let's import,

73
00:06:23.406 --> 00:06:27.500
we animate it from

74
00:06:30.020 --> 00:06:33.830
React-native-reanimated.

75
00:06:33.830 --> 00:06:38.270
So, we were talking about default
exports versus non default exports.

76
00:06:38.270 --> 00:06:42.626
So, in the code base and working at the
moment, we have some people imported as

77
00:06:42.626 --> 00:06:45.740
animated and
some people are important as reanimated.

78
00:06:45.740 --> 00:06:48.271
So, we have two standards.

79
00:06:48.271 --> 00:06:51.966
So if this was a named exports,

80
00:06:51.966 --> 00:06:55.953
we wouldn't have that problem.

81
00:06:55.953 --> 00:07:01.315
So const ReanimatedPressable,
he's reanimated,

82
00:07:01.315 --> 00:07:06.920
create animated component and
as person depressible.

83
00:07:10.470 --> 00:07:14.900
Now let's use it for our choose button.

84
00:07:14.900 --> 00:07:16.510
Let's create an animated style for this.

85
00:07:17.590 --> 00:07:23.810
So const buttonStyle, is useAnimatedStyle.

86
00:07:27.490 --> 00:07:31.250
This is an error function
that returns an object.

87
00:07:31.250 --> 00:07:36.392
It has a dependencies array, And

88
00:07:36.392 --> 00:07:42.154
let's do the opacity as to
if there is a selected mood,

89
00:07:42.154 --> 00:07:45.050
then let's do opacity 1.

90
00:07:45.050 --> 00:07:50.877
Otherwise, let's do opacity no 0.5.

91
00:07:51.910 --> 00:07:57.520
And let's also pass this
button style into our buttons.

92
00:08:04.839 --> 00:08:05.649
Excellent, so

93
00:08:05.649 --> 00:08:09.338
now we are at where we were with
the previous case of doing animations.

94
00:08:09.338 --> 00:08:12.200
So this works, but
it doesn't actually animate.

95
00:08:12.200 --> 00:08:14.490
So how do we make this animate?

96
00:08:14.490 --> 00:08:18.533
Well, the handy thing about those with
transition hooks is that you can use

97
00:08:18.533 --> 00:08:21.390
them within use and
then we just start as well.

98
00:08:21.390 --> 00:08:26.654
So if you toggle between two states,
you don't have

99
00:08:26.654 --> 00:08:33.843
to create an external shared value
just to track it, you can do it here.

100
00:08:33.843 --> 00:08:40.146
So if we input with timing
from react-native-reanimated,

101
00:08:40.146 --> 00:08:47.100
we can wrap these one as no 0.5
in with the timing function.

102
00:08:47.100 --> 00:08:52.556
And then if this changes, this opacity
gets changed to one ordinal 0.5,

103
00:08:52.556 --> 00:08:55.920
but it will transition to that value.

104
00:08:55.920 --> 00:08:59.554
So now if we reload and
select one of these, okay, so

105
00:08:59.554 --> 00:09:04.344
the reason this doesn't work is
that there is a dependencies array,

106
00:09:04.344 --> 00:09:09.780
but my ESN plugin isn't telling me
that's need to add something to it.

107
00:09:09.780 --> 00:09:15.153
So make sure you add selected
mood to the dependencies array.

108
00:09:15.153 --> 00:09:19.116
And reload, now when I select something,

109
00:09:19.116 --> 00:09:24.960
you can see that it goes from opacity,
no 0.5 to opacity 1.

110
00:09:27.898 --> 00:09:31.994
Now, only thing here is that you
can actually animate several

111
00:09:31.994 --> 00:09:34.510
properties at the same time.

112
00:09:34.510 --> 00:09:36.400
So we can also animate the scale.

113
00:09:37.650 --> 00:09:40.560
So if we do transform.

114
00:09:40.560 --> 00:09:46.110
There's an array and we'll do scale and
we can do a similar thing.

115
00:09:46.110 --> 00:09:49.925
So we'll do, if the selected
mood is a mood is selected,

116
00:09:49.925 --> 00:09:51.600
we will do a scale of one.

117
00:09:52.600 --> 00:09:54.814
Otherwise that's to no 0.8.

118
00:09:54.814 --> 00:09:58.070
And we can add a width timing 1.

119
00:10:03.940 --> 00:10:09.259
So now if we reload You

120
00:10:09.259 --> 00:10:14.416
can see that this is small and
then when we choose an emoji,

121
00:10:14.416 --> 00:10:18.380
It kind of both face in and
zooms in a little bit.

122
00:10:19.734 --> 00:10:22.880
Now you notice that I didn't
add with timing here.

123
00:10:22.880 --> 00:10:27.655
This is because when I was doing this
earlier on Android, there is currently

124
00:10:27.655 --> 00:10:32.506
a bug for adding a timing function on
scale on this particular version already

125
00:10:32.506 --> 00:10:37.077
talked to the reanimated folks about it,
so we'll get this fixed soon.

126
00:10:37.077 --> 00:10:40.674
All right, let's make sure that we
have our Android app also running.

127
00:10:45.610 --> 00:10:48.780
So, Toby hasn't been built.

128
00:10:55.110 --> 00:10:55.610
Yep, this needs to be rebuilt.

129
00:11:00.560 --> 00:11:06.329
So let's rebuild Android, there you go so
it zooms out you choose and

130
00:11:06.329 --> 00:11:10.418
then it both goes to positive one and
it flows in.

131
00:11:10.418 --> 00:11:16.034
So this is a pretty quick simple example,
but it's very powerful

132
00:11:16.034 --> 00:11:22.073
because you use the same kind of
methods to do all kinds of animations.

