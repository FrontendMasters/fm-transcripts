WEBVTT

1
00:00:00.740 --> 00:00:03.040 A:middle L:90%
Next up recall that we can pass props down to

2
00:00:03.330 --> 00:00:05.259 A:middle L:90%
child components. For example, if we have a

3
00:00:05.370 --> 00:00:07.610 A:middle L:90%
user and the user's name is Mary we can pass

4
00:00:08.000 --> 00:00:10.429 A:middle L:90%
Mary as a prop and then it will show up

5
00:00:10.779 --> 00:00:13.130 A:middle L:90%
here and the structure it from new components. And

6
00:00:13.460 --> 00:00:15.710 A:middle L:90%
also because we are using TypeScript we can use use

7
00:00:16.140 --> 00:00:19.059 A:middle L:90%
a prop and explicitly type mary mary's name as a

8
00:00:19.120 --> 00:00:24.679 A:middle L:90%
strength and a used Corvair coke is a react hook

9
00:00:24.899 --> 00:00:28.960 A:middle L:90%
for memorizing interactions within a reaction permits. Now next

10
00:00:29.289 --> 00:00:30.809 A:middle L:90%
up when we save our mood options, we want

11
00:00:30.949 --> 00:00:33.570 A:middle L:90%
to also recalled their time stamps. So let's create

12
00:00:33.979 --> 00:00:36.320 A:middle L:90%
a new type for the mood option with the time

13
00:00:36.570 --> 00:00:42.649 A:middle L:90%
timestamp. So let's open our types file and export

14
00:00:43.179 --> 00:00:54.240 A:middle L:90%
another type called mood option with timestamp. And this

15
00:00:54.450 --> 00:00:57.270 A:middle L:90%
will have the mood which will be of type,

16
00:00:57.859 --> 00:01:02.840 A:middle L:90%
mood option type and the time stamp which would just

17
00:01:03.030 --> 00:01:11.420 A:middle L:90%
be a number. Mhm. Next up, in

18
00:01:11.579 --> 00:01:13.939 A:middle L:90%
our home screen we want to use a use state

19
00:01:14.260 --> 00:01:20.439 A:middle L:90%
variable to actually store our mood list. So let's

20
00:01:20.879 --> 00:01:27.099 A:middle L:90%
in our screens let's find the home screen and let's

21
00:01:27.370 --> 00:01:29.920 A:middle L:90%
create a new state variable. So we'll do const

22
00:01:31.340 --> 00:01:36.560 A:middle L:90%
mood list, set mood list. I will do

23
00:01:36.909 --> 00:01:42.239 A:middle L:90%
react dot you state and we'll start with an empty

24
00:01:42.560 --> 00:01:47.269 A:middle L:90%
array. And again we need to tell mood list

25
00:01:48.090 --> 00:01:50.799 A:middle L:90%
what type this is. So we can do it

26
00:01:51.219 --> 00:01:54.950 A:middle L:90%
by passing a mood list, mood option with timestamp

27
00:01:56.239 --> 00:01:59.129 A:middle L:90%
array as the type to use state. So now

28
00:01:59.290 --> 00:02:00.909 A:middle L:90%
when I hover over mood list is going to tell

29
00:02:01.219 --> 00:02:12.000 A:middle L:90%
me what type it is. Next up, we

30
00:02:12.159 --> 00:02:14.620 A:middle L:90%
want to add a use cool back hook to handle

31
00:02:15.150 --> 00:02:19.289 A:middle L:90%
when you select a new mood. So in the

32
00:02:19.400 --> 00:02:23.870 A:middle L:90%
home file in the home screen let's do const handle

33
00:02:24.830 --> 00:02:32.629 A:middle L:90%
select mood and we'll do a react use callback and

34
00:02:32.789 --> 00:02:40.000 A:middle L:90%
then this will have the selected moot which will be

35
00:02:40.469 --> 00:02:50.750 A:middle L:90%
of type mood option, empty dependencies are ready for

36
00:02:50.860 --> 00:02:54.009 A:middle L:90%
now and we'll just to set the mood list and

37
00:02:54.360 --> 00:02:56.919 A:middle L:90%
remember for you state variables you can pass in either

38
00:02:57.669 --> 00:03:00.310 A:middle L:90%
the new variable or we can pass in a function

39
00:03:00.960 --> 00:03:07.240 A:middle L:90%
takes in the current ones. So current list and

40
00:03:07.639 --> 00:03:10.860 A:middle L:90%
we can append are selected mood to the current list

41
00:03:11.840 --> 00:03:17.969 A:middle L:90%
. So we'll return current so will the current.

42
00:03:18.360 --> 00:03:21.039 A:middle L:90%
And we'll also need to add the timestamp to our

43
00:03:21.139 --> 00:03:24.620 A:middle L:90%
mood. So we'll do mood which is the selected

44
00:03:25.150 --> 00:03:29.349 A:middle L:90%
mood and timestamp which will be date dot. Now

45
00:03:31.639 --> 00:03:34.539 A:middle L:90%
I noticed that I actually forgot that we created this

46
00:03:34.699 --> 00:03:38.210 A:middle L:90%
mood option with timestamp and because TypeScript I immediately knew

47
00:03:38.430 --> 00:03:40.669 A:middle L:90%
that I messed up so that saved me some debugging

48
00:03:41.039 --> 00:03:47.569 A:middle L:90%
time. Now let's pass handle select mood into our

49
00:03:47.800 --> 00:03:52.710 A:middle L:90%
mood picker. Mhm. And if we open our

50
00:03:52.979 --> 00:03:57.889 A:middle L:90%
mood picker this is now a property of mood picker

51
00:03:58.259 --> 00:04:00.460 A:middle L:90%
. So we'll create a type for the props so

52
00:04:00.780 --> 00:04:07.289 A:middle L:90%
we'll do type mood picker clubs equals and we'll do

53
00:04:07.650 --> 00:04:11.939 A:middle L:90%
handle select mood. So this takes in the moot

54
00:04:13.539 --> 00:04:22.139 A:middle L:90%
which will be of type mood option type. I

55
00:04:22.259 --> 00:04:27.019 A:middle L:90%
think this was my option and then it returns nothing

56
00:04:28.540 --> 00:04:32.129 A:middle L:90%
. So we use void. Now we'll pass this

57
00:04:32.350 --> 00:04:36.100 A:middle L:90%
type into react fc and we can also be structure

58
00:04:36.910 --> 00:04:40.839 A:middle L:90%
and or select a move from here and now on

59
00:04:41.110 --> 00:04:44.069 A:middle L:90%
our button. So I choose button we can do

60
00:04:44.379 --> 00:04:50.660 A:middle L:90%
on press and we'll do handle select mood and or

61
00:04:50.810 --> 00:04:59.279 A:middle L:90%
pass in selective moot. All right now this is

62
00:04:59.379 --> 00:05:02.500 A:middle L:90%
telling me that argument of type mood option type undefined

63
00:05:03.149 --> 00:05:04.620 A:middle L:90%
is not a sign of water parameter, mood option

64
00:05:04.889 --> 00:05:07.050 A:middle L:90%
type. And this is because this function is saying

65
00:05:07.370 --> 00:05:09.519 A:middle L:90%
, okay, we definitely need a mood option but

66
00:05:09.860 --> 00:05:12.920 A:middle L:90%
notice that selected mood could be undefined. There's another

67
00:05:13.149 --> 00:05:14.720 A:middle L:90%
thing what high school tells me that okay, what

68
00:05:14.970 --> 00:05:18.410 A:middle L:90%
about if someone cause dysfunction but selective mutism defined.

69
00:05:18.920 --> 00:05:22.220 A:middle L:90%
What should I do then? So I'm actually going

70
00:05:22.430 --> 00:05:26.759 A:middle L:90%
to pull this out to a use callback So that's

71
00:05:27.360 --> 00:05:32.980 A:middle L:90%
actually not. So what we can do is here

72
00:05:33.560 --> 00:05:36.470 A:middle L:90%
we'll do, we'll turn this into a proper function

73
00:05:42.740 --> 00:05:47.050 A:middle L:90%
and we'll do if selected mood. So if this

74
00:05:47.230 --> 00:05:50.019 A:middle L:90%
is not undefined only then we'll call it and notice

75
00:05:50.250 --> 00:05:52.389 A:middle L:90%
that TypeScript now knows that this is undefined. This

76
00:05:52.600 --> 00:05:54.420 A:middle L:90%
is not going to be undefined in here because it's

77
00:05:54.560 --> 00:05:58.230 A:middle L:90%
past as if statement and this will work. And

78
00:05:58.569 --> 00:06:02.670 A:middle L:90%
lastly in our home let's also print out the move

79
00:06:02.970 --> 00:06:05.170 A:middle L:90%
list just so we see what's being added. So

80
00:06:05.310 --> 00:06:09.579 A:middle L:90%
let's import text and underneath the moon pick up let's

81
00:06:09.870 --> 00:06:15.199 A:middle L:90%
just do mood list dot map. Hey tim and

82
00:06:15.410 --> 00:06:25.250 A:middle L:90%
let's do text and item it's not mood and let's

83
00:06:25.709 --> 00:06:29.680 A:middle L:90%
also add the time steps that must do item dot

84
00:06:31.240 --> 00:06:34.860 A:middle L:90%
touch them. It's called new state on it because

85
00:06:35.050 --> 00:06:37.839 A:middle L:90%
it's just going to be a number and then we

86
00:06:37.970 --> 00:06:42.509 A:middle L:90%
need to also call to string to string. So

87
00:06:43.019 --> 00:06:44.819 A:middle L:90%
it will be something that we could look at.

88
00:06:47.129 --> 00:06:49.790 A:middle L:90%
And let's add a key to text. So whenever

89
00:06:50.060 --> 00:06:51.810 A:middle L:90%
you map over anything you need to add it a

90
00:06:51.870 --> 00:06:55.720 A:middle L:90%
key. So we'll do item dot timestamp. So

91
00:06:56.110 --> 00:06:58.009 A:middle L:90%
I turned up mood is an object so I need

92
00:06:58.170 --> 00:06:59.959 A:middle L:90%
to do I do item dot mood dot emoji.

93
00:07:03.240 --> 00:07:06.350 A:middle L:90%
There we go. So now when I added you'll

94
00:07:06.480 --> 00:07:08.699 A:middle L:90%
see that I'll get to the emoji and also the

95
00:07:08.800 --> 00:07:10.949 A:middle L:90%
time stamp. So what we'd also like is once

96
00:07:11.149 --> 00:07:14.730 A:middle L:90%
you've selected the mood it should de select the background

97
00:07:15.319 --> 00:07:18.740 A:middle L:90%
. So let's in the mood picker component. Let's

98
00:07:19.029 --> 00:07:21.800 A:middle L:90%
pull this on, press out into a use callback

99
00:07:22.300 --> 00:07:29.050 A:middle L:90%
. So let's do const you just check what I

100
00:07:29.110 --> 00:07:35.720 A:middle L:90%
called it. Sorry, handle select. So let's

101
00:07:35.930 --> 00:07:40.360 A:middle L:90%
do const handle select he calls, react. Use

102
00:07:40.680 --> 00:07:49.620 A:middle L:90%
callback. Mhm. And let's copy this on press

103
00:07:50.839 --> 00:07:56.399 A:middle L:90%
mm select. Mhm. So put that in here

104
00:07:58.339 --> 00:08:00.899 A:middle L:90%
. Yeah. So we'll set the selective mood and

105
00:08:01.250 --> 00:08:04.069 A:middle L:90%
also let's set it to under fine. So we'll

106
00:08:04.300 --> 00:08:10.209 A:middle L:90%
unset the selected state. So that's two set selective

107
00:08:10.589 --> 00:08:15.040 A:middle L:90%
mood and undefined. And we also want to update

108
00:08:15.360 --> 00:08:21.240 A:middle L:90%
dependencies around. All right. So now when we

109
00:08:21.329 --> 00:08:26.300 A:middle L:90%
selected it will de select the state. Could you

110
00:08:26.459 --> 00:08:29.019 A:middle L:90%
please explain the use of used call back here.

111
00:08:32.440 --> 00:08:36.889 A:middle L:90%
Um So I tend to wrap all the functions that

112
00:08:37.129 --> 00:08:40.139 A:middle L:90%
are inside. We are components into use Quebec really

113
00:08:40.519 --> 00:08:44.360 A:middle L:90%
, therefore memorizing the functions so that basically obviously for

114
00:08:44.519 --> 00:08:47.269 A:middle L:90%
every component, every time something changes like internally on

115
00:08:47.389 --> 00:08:50.379 A:middle L:90%
the components or props change, then the whole component

116
00:08:50.929 --> 00:08:53.210 A:middle L:90%
gets run. So if you have a bunch of

117
00:08:53.350 --> 00:08:55.429 A:middle L:90%
things here, a bunch of functions, every single

118
00:08:55.679 --> 00:08:58.570 A:middle L:90%
function that you have gets re initialized. If you're

119
00:08:58.669 --> 00:09:01.580 A:middle L:90%
using arrow functions. So for use callback and use

120
00:09:01.740 --> 00:09:03.220 A:middle L:90%
member and all of those hooks, like the purpose

121
00:09:03.750 --> 00:09:05.899 A:middle L:90%
of them. Is that oh, if none of

122
00:09:05.980 --> 00:09:09.590 A:middle L:90%
these dependencies changed, then don't re initialize it.

123
00:09:09.769 --> 00:09:11.950 A:middle L:90%
So like when you have lots of complicated things,

124
00:09:12.370 --> 00:09:15.379 A:middle L:90%
it will just be um a performance enhancement.

