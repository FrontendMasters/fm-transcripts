WEBVTT

1
00:00:00.560 --> 00:00:01.755
Let's move on to the network images.

2
00:00:01.755 --> 00:00:06.420
So network images are images are loaded
via URL, usually I think in my

3
00:00:06.420 --> 00:00:11.738
experience most of the images you'll be
using in your app are loaded this way.

4
00:00:11.738 --> 00:00:15.410
Because you'll have an API request
that has an image URLs and

5
00:00:15.410 --> 00:00:16.927
then you load the image.

6
00:00:16.927 --> 00:00:21.770
So in order to render images from
a URL just as here's an example.

7
00:00:21.770 --> 00:00:26.703
So I've got this image from Unsplash
just a nice smoky background so

8
00:00:26.703 --> 00:00:30.435
let's add this as a background
to our home screen.

9
00:00:32.477 --> 00:00:33.703
So I've got the home screen open.

10
00:00:33.703 --> 00:00:36.711
And I'm going to copy this

11
00:00:36.711 --> 00:00:45.082
URL All right so

12
00:00:45.082 --> 00:00:48.757
let's import image from React Native and

13
00:00:48.757 --> 00:00:54.335
I'm going to start by just
rendering it inside the container.

14
00:00:54.335 --> 00:00:59.375
Let's do image and source,
now one thing to note is that if you have

15
00:00:59.375 --> 00:01:06.130
network images, images via URL,
you can't just do this, this won't work.

16
00:01:06.130 --> 00:01:10.178
Source will have to be an object and
you pass in the URL,

17
00:01:10.178 --> 00:01:13.170
which will be the image URL from the web.

18
00:01:14.780 --> 00:01:20.559
Now when I save this, nothing actually
renders and that's because this image

19
00:01:20.559 --> 00:01:25.814
isn't local, so iOS doesn't know how
much space to give it to render so

20
00:01:25.814 --> 00:01:31.619
for images that you render via URL you
always have to give a width and or height.

21
00:01:31.619 --> 00:01:39.125
So if I do style And just do width 100%?

22
00:01:39.125 --> 00:01:43.190
And height 100, yeah,

23
00:01:43.190 --> 00:01:49.214
actually let's just do height 100.

24
00:01:49.214 --> 00:01:55.376
[COUGH] Vega, and we got our image.

25
00:01:57.650 --> 00:02:02.315
Now what I'd like to do is actually
have this image in the background so

26
00:02:02.315 --> 00:02:05.175
that our content is overlaid on the image.

27
00:02:05.175 --> 00:02:11.275
So what I would like to do as a react
developer is basically just do this and

28
00:02:11.275 --> 00:02:14.475
then move the route picker inside it.

29
00:02:14.475 --> 00:02:18.880
Now this won't work because
the react native image

30
00:02:18.880 --> 00:02:23.798
component doesn't allow you
to put children inside it,

31
00:02:23.798 --> 00:02:28.007
so one way around it is to
use an absolute layout.

32
00:02:28.007 --> 00:02:33.475
So let's put the image first and
then move picker underneath it.

33
00:02:33.475 --> 00:02:38.110
And let's Yeah and

34
00:02:38.110 --> 00:02:41.270
they are both wrapped inside a container.

35
00:02:44.320 --> 00:02:49.722
And then let's wrap the mood
picker in a view And

36
00:02:49.722 --> 00:02:53.740
let's give this view an absolute fill.

37
00:02:53.740 --> 00:02:58.540
So we want this view to
absolutely fill its content.

38
00:02:58.540 --> 00:03:04.690
So we'll do style and there is
a convenience style in style sheet.

39
00:03:04.690 --> 00:03:06.434
So style sheet dot absolute fill.

40
00:03:06.434 --> 00:03:11.120
So if we look over this, look into it, I'd
actually just position absolute top zero,

41
00:03:11.120 --> 00:03:13.500
bottom zero, left zero, right zero.

42
00:03:13.500 --> 00:03:14.580
So you don't have to type it out.

43
00:03:16.770 --> 00:03:22.316
Cool, so
let me just remove this height and

44
00:03:22.316 --> 00:03:25.870
give this image a flex one.

45
00:03:27.630 --> 00:03:30.963
Okay, so
in the view that's around the mood picker,

46
00:03:30.963 --> 00:03:32.970
we'll turn this into an array.

47
00:03:34.800 --> 00:03:40.710
And we'll do justify content center, cool.

48
00:03:40.710 --> 00:03:42.564
So now we have a container and

49
00:03:42.564 --> 00:03:47.330
this is basically if you need to
display content over your image.

50
00:03:47.330 --> 00:03:52.460
But you can't give the image
children this is the way you do it.

51
00:03:52.460 --> 00:03:56.651
So you basically wrap
a container around the image and

52
00:03:56.651 --> 00:03:59.640
then the content you want to overlay.

53
00:04:00.970 --> 00:04:05.792
Then you give the image, like render
it the size or whatever size you need

54
00:04:05.792 --> 00:04:10.932
which means that this container will
automatically be of that size and then so

55
00:04:10.932 --> 00:04:15.835
this is basically for the content we
overlay and there will be add absolute

56
00:04:15.835 --> 00:04:21.660
fill here, which is positioned absolute
and then filling the whole container.

57
00:04:21.660 --> 00:04:26.606
So this will fill all of this container
and then you can add anything in here,

58
00:04:26.606 --> 00:04:29.718
which will then be overlaid
on top of the image.

59
00:04:33.199 --> 00:04:37.549
So, in react native if you don't
want to do this there is actually

60
00:04:37.549 --> 00:04:42.190
a component called background image or
image background.

61
00:04:42.190 --> 00:04:48.146
That's called image background
which you can use instead so

62
00:04:48.146 --> 00:04:54.813
if instead of doing all of this,
going to remove this and wrap this.

63
00:04:57.710 --> 00:05:01.180
Whole thing into an image background.

64
00:05:02.840 --> 00:05:04.440
So let's do source.

65
00:05:04.440 --> 00:05:05.810
It has the same API as to image.

66
00:05:05.810 --> 00:05:10.307
It will do source,

67
00:05:10.307 --> 00:05:13.975
URI image URL.

68
00:05:13.975 --> 00:05:14.663
Now this works as well.

69
00:05:17.740 --> 00:05:22.028
But if you actually look into the React
Native repository the tree into how image

70
00:05:22.028 --> 00:05:26.252
backer is implemented is actually
implemented exactly how I just showed you,

71
00:05:26.252 --> 00:05:29.004
it just renders the image
component underneath and

72
00:05:29.004 --> 00:05:31.917
absolutely overlays the content.

73
00:05:31.917 --> 00:05:35.940
So why did I even go through
like showing you how to do this.

74
00:05:35.940 --> 00:05:37.365
Well for production use,

75
00:05:37.365 --> 00:05:41.040
I don't personally use the image
components from React Native.

76
00:05:41.040 --> 00:05:45.268
I think a lot of people don't because it
doesn't have a lot of capabilities in

77
00:05:45.268 --> 00:05:47.930
terms of like caching and performance.

78
00:05:47.930 --> 00:05:53.722
So usually, there is a component, there's
a library called React Native fast image

79
00:05:53.722 --> 00:05:59.041
which is here, and I think this is what
most people end up using in production.

80
00:05:59.041 --> 00:06:02.155
Well, it's very good for lots of images so

81
00:06:02.155 --> 00:06:06.567
if you have a little bit lots of
images React directly to image

82
00:06:06.567 --> 00:06:11.690
component wouldn't be able to handle this,
especially on Android.

83
00:06:13.280 --> 00:06:16.172
And also it has some extra properties for
caching and

84
00:06:16.172 --> 00:06:19.020
prioritizations, which
we want to prioritize.

85
00:06:19.020 --> 00:06:22.974
We have lots of images to load and
you want to prioritize some images and

86
00:06:22.974 --> 00:06:24.994
not others, then you can use that.

87
00:06:24.994 --> 00:06:28.898
And one of the reasons I wanted to
go through how to overlay content,

88
00:06:28.898 --> 00:06:34.050
is because this fast image, it doesn't
allow you to have children inside either.

89
00:06:34.050 --> 00:06:37.030
So you would have to do
the method I showed you earlier.

90
00:06:37.030 --> 00:06:41.730
All right, so lastly,
I now feel like this little layout,

91
00:06:41.730 --> 00:06:45.890
it doesn't really show
the content very much.

92
00:06:45.890 --> 00:06:50.460
So I wanna add some opacity behind there
just to make it pop a little bit more.

93
00:06:50.460 --> 00:06:55.980
So if we open our mood picker and
then go to where the container lives.

94
00:06:57.330 --> 00:06:58.690
So here it is.

95
00:06:58.690 --> 00:07:04.867
Let's give it a background
color of RGBA 000,

96
00:07:04.867 --> 00:07:09.140
so it's black and naught 0.2.

97
00:07:09.140 --> 00:07:12.006
Yeah, I think this looks
a little bit nicer so

98
00:07:12.006 --> 00:07:15.860
you can definitely see where the area for
the content lives.

99
00:07:16.860 --> 00:07:18.790
And just a quick note.

100
00:07:18.790 --> 00:07:22.490
So you can add RGBA values for colors.

101
00:07:22.490 --> 00:07:25.878
So this is basically the red green and
blue values.

102
00:07:25.878 --> 00:07:29.588
And then a naught 0.2 is the a value or
the opacity,

103
00:07:29.588 --> 00:07:32.580
alpha value of the audio opacity.

104
00:07:32.580 --> 00:07:36.686
And the reason that I'm doing this,

105
00:07:36.686 --> 00:07:44.370
instead of using normal opacity
is if I did background color 000,

106
00:07:44.370 --> 00:07:48.345
and then opacity, naught 0.2,

107
00:07:48.345 --> 00:07:54.720
then you see the whole content
we'll have this opacity.

108
00:07:54.720 --> 00:08:01.225
And obviously this is not what I want
just the background to have this opacity,

109
00:08:01.225 --> 00:08:06.660
and that's why in this case I needed
to use an RGBA value instead.

110
00:08:06.660 --> 00:08:13.330
And lastly if we find where the heading
text is let's look at what the type is.

111
00:08:13.330 --> 00:08:14.070
Let's call it heading.

112
00:08:15.470 --> 00:08:17.253
Let's just make this white.

113
00:08:17.253 --> 00:08:20.949
So color and

114
00:08:20.949 --> 00:08:27.240
theme color white.

115
00:08:27.240 --> 00:08:30.280
Okay, I think now this
matches our little design

