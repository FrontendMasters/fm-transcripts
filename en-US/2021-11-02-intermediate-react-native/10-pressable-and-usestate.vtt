WEBVTT

1
00:00:00.240 --> 00:00:02.919 A:middle L:90%
let's move on to possible. Uh compressible is a

2
00:00:02.990 --> 00:00:05.580 A:middle L:90%
relatively new component. It was introduced in react native

3
00:00:06.009 --> 00:00:10.480 A:middle L:90%
63 and it's a more versatile alternative to the touchable

4
00:00:10.839 --> 00:00:14.570 A:middle L:90%
opacity. Touchable highlight. So usually people tend to

5
00:00:14.669 --> 00:00:18.089 A:middle L:90%
use touchable opacity because it gives you some quick interaction

6
00:00:18.820 --> 00:00:20.800 A:middle L:90%
feedback for free. Uh The problem with that is

7
00:00:20.920 --> 00:00:24.109 A:middle L:90%
it's very distinctive so you can almost tell which apps

8
00:00:24.379 --> 00:00:26.969 A:middle L:90%
are built for direct native by the touchable opacity because

9
00:00:27.230 --> 00:00:30.070 A:middle L:90%
people use the default values so you can either use

10
00:00:30.609 --> 00:00:35.030 A:middle L:90%
touchable opacity but reduce um the active capacity um or

11
00:00:35.789 --> 00:00:38.289 A:middle L:90%
actually what is recommended is that we all switched to

12
00:00:38.369 --> 00:00:41.570 A:middle L:90%
using possible. Um So in the future I think

13
00:00:41.780 --> 00:00:43.590 A:middle L:90%
the touchable components are going to be deprecate ID.

14
00:00:43.820 --> 00:00:47.740 A:middle L:90%
So in my applications I only use possible. So

15
00:00:48.039 --> 00:00:51.240 A:middle L:90%
principle is very similar to vegetable capacity. It has

16
00:00:51.450 --> 00:00:54.810 A:middle L:90%
all the same events but you can explicitly style the

17
00:00:55.509 --> 00:00:59.719 A:middle L:90%
pressed and not pressed state. So the possible component

18
00:01:00.149 --> 00:01:01.789 A:middle L:90%
knows whether it's pressed or not. You can apply

19
00:01:02.049 --> 00:01:05.489 A:middle L:90%
styles And about an example here if you wanted to

20
00:01:05.810 --> 00:01:09.290 A:middle L:90%
have the same effect as touchable opacity but using principle

21
00:01:10.010 --> 00:01:12.959 A:middle L:90%
you can use this component. So I've called irrepressible

22
00:01:13.480 --> 00:01:16.510 A:middle L:90%
area and basically what this does is you can use

23
00:01:16.769 --> 00:01:19.799 A:middle L:90%
it this, it applies depressed state. So when

24
00:01:19.969 --> 00:01:24.540 A:middle L:90%
you are pressed it applies the capacity no .9 otherwise

25
00:01:25.370 --> 00:01:27.900 A:middle L:90%
it doesn't do anything and the effect is very similar

26
00:01:28.260 --> 00:01:31.060 A:middle L:90%
to what the touchable opacity does Well it's actually the

27
00:01:31.150 --> 00:01:35.250 A:middle L:90%
same as what the touchable opacity does and this file

28
00:01:35.540 --> 00:01:37.370 A:middle L:90%
here is just to make sure that we also apply

29
00:01:37.840 --> 00:01:43.969 A:middle L:90%
styles. Cool and you stayed in human based want

30
00:01:44.129 --> 00:01:46.329 A:middle L:90%
to react hooks And we used to show and we

31
00:01:46.459 --> 00:01:51.709 A:middle L:90%
used to store the selected value. Alright, let's

32
00:01:51.909 --> 00:01:55.480 A:middle L:90%
start by creating a TypeScript type for the emerging option

33
00:01:56.019 --> 00:01:58.900 A:middle L:90%
. So usually in TypeScript projects, I create a

34
00:01:59.170 --> 00:02:02.260 A:middle L:90%
types file in source let's create type start. Yes

35
00:02:03.040 --> 00:02:05.340 A:middle L:90%
. How much can you to copy this? And

36
00:02:05.640 --> 00:02:07.739 A:middle L:90%
here we're going to explore type, mood option type

37
00:02:08.129 --> 00:02:10.680 A:middle L:90%
and we basically typed the emoji and the description.

38
00:02:11.360 --> 00:02:13.120 A:middle L:90%
So this is so that if we use the same

39
00:02:13.409 --> 00:02:15.770 A:middle L:90%
type in various files, we have one source of

40
00:02:15.860 --> 00:02:20.780 A:middle L:90%
truth for the type definition. Now next up let's

41
00:02:21.050 --> 00:02:25.719 A:middle L:90%
import this type in mood picker. So in woodpecker

42
00:02:27.439 --> 00:02:34.840 A:middle L:90%
we will Okay import mood option type from types and

43
00:02:35.199 --> 00:02:37.919 A:middle L:90%
we can actually explicitly type these mood options if we

44
00:02:38.009 --> 00:02:41.439 A:middle L:90%
wanted to. So mood option type. Yeah.

45
00:02:42.439 --> 00:02:44.039 A:middle L:90%
Okay. So now we want a you state variable

46
00:02:44.569 --> 00:02:47.789 A:middle L:90%
for the selected mood. So inside our component,

47
00:02:48.310 --> 00:02:54.949 A:middle L:90%
let's do a constant selected mood set, selective mood

48
00:02:58.939 --> 00:03:03.469 A:middle L:90%
. And this is a react use state and no

49
00:03:03.800 --> 00:03:06.330 A:middle L:90%
initial value. Now the question becomes how do we

50
00:03:06.460 --> 00:03:09.009 A:middle L:90%
tell TypeScript that we want this to be of type

51
00:03:09.349 --> 00:03:11.400 A:middle L:90%
mood option type. And actually the way we do

52
00:03:11.590 --> 00:03:14.050 A:middle L:90%
this is just after you state and before the parentheses

53
00:03:15.340 --> 00:03:20.340 A:middle L:90%
we will add some angle records and we place the

54
00:03:20.419 --> 00:03:22.449 A:middle L:90%
type in here. So now when you hover over

55
00:03:22.659 --> 00:03:25.569 A:middle L:90%
selected mood, it actually tells you that here it's

56
00:03:25.930 --> 00:03:28.919 A:middle L:90%
either mood option type or undefined. Okay, so

57
00:03:29.060 --> 00:03:33.539 A:middle L:90%
next up let's import possible from react native. And

58
00:03:34.009 --> 00:03:36.909 A:middle L:90%
let's wrap each of these texts inside a principle.

59
00:03:42.099 --> 00:03:50.539 A:middle L:90%
And on press, let's set select a mood to

60
00:03:50.759 --> 00:03:51.849 A:middle L:90%
be the current option.

