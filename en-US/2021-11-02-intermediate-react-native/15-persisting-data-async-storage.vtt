WEBVTT

1
00:00:00.130 --> 00:00:03.237
So, now we have built a app
where you can choose moods and

2
00:00:03.237 --> 00:00:06.028
we have a history tab where
you can see past moods.

3
00:00:06.028 --> 00:00:10.906
But you will notice that if I reload
our app then the history is wiped and

4
00:00:10.906 --> 00:00:15.703
obviously this is not very handy
because I would like to have an actual

5
00:00:15.703 --> 00:00:17.210
history of my moods.

6
00:00:17.210 --> 00:00:22.164
So, the data is currently stored in
memory and we lose it when we relaunch.

7
00:00:22.164 --> 00:00:26.611
So, the way to prevent this is
that we need to physically store

8
00:00:26.611 --> 00:00:31.653
the data in on the device so that if
you were to close the app and reopen or

9
00:00:31.653 --> 00:00:37.240
even just reload the app with JavaScript,
we will still have our past moods.

10
00:00:38.830 --> 00:00:43.137
On the web, you're probably already
familiar with local storage and

11
00:00:43.137 --> 00:00:47.085
there is an equivalent in
React Native is called async storage.

12
00:00:47.085 --> 00:00:50.088
It kind of works the same
way as local storage but

13
00:00:50.088 --> 00:00:54.307
the difference is that it is as
the name suggests, asynchronous.

14
00:00:54.307 --> 00:00:58.256
Anything that you store in local
storage has to be serializable and

15
00:00:58.256 --> 00:01:03.194
in layman's terms, this basically means
you can't store objects or functions,

16
00:01:03.194 --> 00:01:06.470
or anything like that, or
classes or references.

17
00:01:06.470 --> 00:01:10.943
So, it needs to be stringed in numbers
because we call to string on the value

18
00:01:10.943 --> 00:01:12.650
that we're going to store.

19
00:01:14.680 --> 00:01:20.419
Async storage is a native library, so
let's copy this install command and

20
00:01:20.419 --> 00:01:23.979
we'll open a terminal and
install the library

21
00:01:30.226 --> 00:01:35.115
And for iOS we'll cd into the ios
directory and pod install.

22
00:01:42.291 --> 00:01:44.520
So, you'll see the library
that's going to install.

23
00:01:46.210 --> 00:01:49.535
And let's go back to our root
directory and run yarn ios or

24
00:01:49.535 --> 00:01:52.528
you can always run your app
through X code instead.

25
00:01:56.410 --> 00:02:01.333
For Android, there's no need to
install packages just rebuild your app

26
00:02:01.333 --> 00:02:04.812
using yarn Android or
rebuild via Android Studio.

27
00:02:04.812 --> 00:02:09.645
So, stop and restart, so, for the API for

28
00:02:09.645 --> 00:02:14.617
async storage is pretty straightforward,

29
00:02:14.617 --> 00:02:17.453
so if we look at the docs.

30
00:02:20.745 --> 00:02:26.813
We have getItem, setItem, mergeItem,
removeItem, getAllKeys and

31
00:02:26.813 --> 00:02:31.780
clear, which are the ones that
I'm mostly ends up using.

32
00:02:33.060 --> 00:02:36.240
So, let's look at the function signatures.

33
00:02:36.240 --> 00:02:39.784
So, get item, you pass in a string key, so

34
00:02:39.784 --> 00:02:45.040
this will be sandboxed kind of so
it will be scoped to your app.

35
00:02:45.040 --> 00:02:46.152
So, for example,

36
00:02:46.152 --> 00:02:50.650
you wouldn't be able to get the item
from another apps async storage.

37
00:02:50.650 --> 00:02:55.190
So, this works similarly to local storage,
so you'll get the item by key.

38
00:02:55.190 --> 00:02:58.405
And usually we will
store things by JSON but

39
00:02:58.405 --> 00:03:04.390
you can just store individual strings
as well and then we get the value.

40
00:03:04.390 --> 00:03:09.250
For setItem, it's pretty much the same,
but we just set the Item by key.

41
00:03:09.250 --> 00:03:11.663
So, we take in two arguments,
the first one is the key and

42
00:03:11.663 --> 00:03:13.690
the second one is the value
that you want to set.

43
00:03:13.690 --> 00:03:15.998
So, this value needs to be a string.

44
00:03:17.990 --> 00:03:21.717
Then we have clear to clear
the whole async storage.

45
00:03:21.717 --> 00:03:25.467
You have removeItem to remove
this particular Item and

46
00:03:25.467 --> 00:03:28.170
another handy one is getAllKeys.

47
00:03:28.170 --> 00:03:32.500
So, this is get all of the keys
that are ever set for this app.

48
00:03:34.480 --> 00:03:37.650
Let's see if the build has finished,
excellent timing.

49
00:03:39.810 --> 00:03:44.802
All right, so
if we go to our app provider,

50
00:03:44.802 --> 00:03:49.809
let's start by importing async storage,

51
00:03:51.428 --> 00:03:57.992
From React Native, I think it's
a React Native community package.

52
00:03:57.992 --> 00:04:01.174
There it is, so
React Native async storage, async storage.

53
00:04:03.832 --> 00:04:07.706
And I'm just gonna quickly check
where I called the functions, so

54
00:04:07.706 --> 00:04:09.030
I'll be consistent.

55
00:04:12.395 --> 00:04:16.280
Okay, so let's figure out what we
want our app data to look like.

56
00:04:16.280 --> 00:04:19.360
So, let's do type app data.

57
00:04:21.350 --> 00:04:25.365
And we just wanna store the mood list.

58
00:04:27.271 --> 00:04:31.230
Which will be a mood
option with timestamp.

59
00:04:32.280 --> 00:04:36.625
So, generally things that
you store in async storage,

60
00:04:36.625 --> 00:04:42.634
it's good to have them as JSON objects
because then you can always add keys and

61
00:04:42.634 --> 00:04:45.790
let's also do it a constant for our key.

62
00:04:47.630 --> 00:04:51.061
So, let's call it my app data.

63
00:04:54.137 --> 00:05:00.660
What data key, let's do a set app data.

64
00:05:03.740 --> 00:05:07.330
So, this takes in the app
data that we want to save.

65
00:05:07.330 --> 00:05:14.443
We should be of type app data and
it doesn't return anything so we use void.

66
00:05:16.813 --> 00:05:23.187
So, to do this we'll do const results

67
00:05:23.187 --> 00:05:29.365
equals async storage dot setItem and

68
00:05:29.365 --> 00:05:33.560
we'll use the data key.

69
00:05:35.460 --> 00:05:40.536
And we'll JSON stringify our app data,

70
00:05:40.536 --> 00:05:47.880
now this is an async function,
so I want to await it.

71
00:05:47.880 --> 00:05:52.388
So, I need to make this into

72
00:05:52.388 --> 00:05:56.711
an async arrow function.

73
00:06:00.084 --> 00:06:05.047
Okay and this is actually telling me that,
you said there's going to return void but

74
00:06:05.047 --> 00:06:08.240
actually it's a promise, so
I'm going to add promise.

75
00:06:09.990 --> 00:06:12.947
So, it's asynchronous and
then is going to returning nothing

76
00:06:19.992 --> 00:06:21.780
And we don't actually need the result.

77
00:06:21.780 --> 00:06:26.640
So, we just get the app data, we set it
to async storage and then do nothing.

78
00:06:26.640 --> 00:06:31.376
It's good practice to also surround
this in a try-catch because you don't

79
00:06:31.376 --> 00:06:34.854
really want JavaScript errors here,
and if app data for

80
00:06:34.854 --> 00:06:38.020
some reason wasn't what
you were expecting.

81
00:06:38.020 --> 00:06:41.012
You don't really want errors here,
so I usually do a try and catch.

82
00:06:46.278 --> 00:06:49.002
I'm kind of not doing anything with it.

83
00:06:49.002 --> 00:06:54.101
All right, let's do another one for
actually getting the app data.

84
00:06:54.101 --> 00:07:01.256
So, const get app data so
this will also be an async function.

85
00:07:01.256 --> 00:07:06.538
We don't have any arguments but

86
00:07:06.538 --> 00:07:12.410
it returns a promise with app data.

87
00:07:12.410 --> 00:07:15.306
And let's do another try-catch here.

88
00:07:20.701 --> 00:07:25.243
I will do a const of results,

89
00:07:25.243 --> 00:07:32.040
I will await async storage getItem.

90
00:07:32.040 --> 00:07:36.303
So, this is why it's nice to
pull these out to a constant,

91
00:07:36.303 --> 00:07:39.355
just to make sure that
we use the same key.

92
00:07:40.527 --> 00:07:41.420
And that's it.

93
00:07:41.420 --> 00:07:45.748
So, this gives us the results and
we'll also because we JSON stringfied our

94
00:07:45.748 --> 00:07:49.440
app data here,
we want to JSON pass the results.

95
00:07:49.440 --> 00:07:55.039
So, we'll do return but we also need to
account for when the result is undefined.

96
00:07:55.039 --> 00:07:56.720
So, we'll do if result,

97
00:08:00.269 --> 00:08:05.422
Because obviously on initial

98
00:08:05.422 --> 00:08:10.367
launch this will just be no,

99
00:08:10.367 --> 00:08:15.735
return JSON parse and result.

100
00:08:15.735 --> 00:08:23.291
Okay, and we also need a default value,
so let's do return null by default.

101
00:08:23.291 --> 00:08:29.196
And we'd also need to tell
our promise that we do this.

102
00:08:29.196 --> 00:08:32.844
So, just as a side note about TypeScript,
so

103
00:08:32.844 --> 00:08:36.978
I don't actually need to
type these return types.

104
00:08:36.978 --> 00:08:41.595
So, if I hover over this, you can look
at the function signature so it goes,

105
00:08:41.595 --> 00:08:44.570
okay takes up data and
returns an empty promise.

106
00:08:44.570 --> 00:08:49.456
If I remove this this is where
the static code checking comes to play,

107
00:08:49.456 --> 00:08:54.021
if I remove this and hover over it,
TypeScript only knows this.

108
00:08:54.021 --> 00:08:59.736
So, actually this return type is
superfluous which is quite handy,

109
00:08:59.736 --> 00:09:04.572
so it can be nice to add it just
to sanity check your things.

110
00:09:04.572 --> 00:09:07.654
Or if it's not returning what
you thought it was returning but

111
00:09:07.654 --> 00:09:11.270
in this case we don't actually
need to explicitly type it.

112
00:09:11.270 --> 00:09:13.649
I was just looking in get app data,

113
00:09:13.649 --> 00:09:17.960
here we kind of do want to say
that if it's app data or no.

114
00:09:17.960 --> 00:09:19.512
So, if we don't type it and

115
00:09:19.512 --> 00:09:24.450
see that it's going to say, it returns
a promise of any, which isn't correct.

116
00:09:24.450 --> 00:09:27.830
So, in this case we want to type it,
that's a good example again.

117
00:09:27.830 --> 00:09:30.560
And then in this case, it doesn't
matter because we return nothing.

118
00:09:32.440 --> 00:09:37.060
Cool, so we want to get and
set this on launch.

119
00:09:37.060 --> 00:09:39.489
So, let's do a use effect.

120
00:09:41.961 --> 00:09:50.070
So, if we do a use effect with an empty
dependency array, it gets run at launch.

121
00:09:50.070 --> 00:09:54.534
And so, in use effect you can't
run asynchronous functions but

122
00:09:54.534 --> 00:09:57.370
obviously this is asynchronous.

123
00:09:57.370 --> 00:10:02.359
So, way around it is you
can define an asynchronous

124
00:10:02.359 --> 00:10:07.238
function inside your use effect and
just call it.

125
00:10:07.238 --> 00:10:13.100
So, let's do fetch app data,
this will be an async function.

126
00:10:15.200 --> 00:10:19.730
And we'll do const data
equals get app data.

127
00:10:19.730 --> 00:10:22.928
So, this will be async so
we need to await it.

128
00:10:22.928 --> 00:10:28.718
And if data remember the default value for

129
00:10:28.718 --> 00:10:36.830
it is no, then we set the mood
list to be data dot mood list.

130
00:10:39.930 --> 00:10:43.624
And here let's just call fetch app data.

131
00:10:46.680 --> 00:10:48.448
So, that's to get the initial data but

132
00:10:48.448 --> 00:10:51.550
we also need to save the data
whenever we make a change.

133
00:10:51.550 --> 00:10:53.712
So, just a quick way of doing it is,

134
00:10:53.712 --> 00:10:57.400
I'm going to do it inside this
handle select mood callback.

135
00:10:58.970 --> 00:11:03.815
So, let's make this not
an implicit return,

136
00:11:03.815 --> 00:11:08.039
so I make this into an explicit return and

137
00:11:08.039 --> 00:11:13.007
do const new mood list
which will be this value,

138
00:11:13.007 --> 00:11:16.129
so we still want to return it.

139
00:11:19.199 --> 00:11:25.731
But also,
before we return it let's set app data and

140
00:11:25.731 --> 00:11:30.940
let's do a mood list to
be the new mood list

141
00:11:34.142 --> 00:11:39.906
Alright that should be all the vets
let's reload to be clear and

142
00:11:39.906 --> 00:11:44.703
let's add some moods, so
we've got two mood here.

143
00:11:44.703 --> 00:11:47.827
And let's reload and they're still there.

144
00:11:47.827 --> 00:11:52.283
Now, if I actually completely
close the app and reopen it,

145
00:11:52.283 --> 00:11:57.200
they're still there so
they are get persisted across launches.

