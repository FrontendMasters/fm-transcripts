WEBVTT

1
00:00:00.220 --> 00:00:04.976
Now there are several ways to handle
data in your React Native app, so

2
00:00:04.976 --> 00:00:09.987
you probably have already heard of Redux,
it's kind of the go-to way.

3
00:00:09.987 --> 00:00:14.904
In this workshop,
we are going to use React context which

4
00:00:14.904 --> 00:00:19.320
is a built-in way in React
to handle global state.

5
00:00:20.650 --> 00:00:24.272
Just as a side note, if you are going
to use Redux for your project,

6
00:00:24.272 --> 00:00:27.055
I strongly recommend you
check out Redux Toolkit,

7
00:00:27.055 --> 00:00:30.615
which basically gives you all
the power of Redux, but with very,

8
00:00:30.615 --> 00:00:34.200
very little boilerplate,
also is fully typed with TypeScript.

9
00:00:34.200 --> 00:00:36.140
So it's basically magic.

10
00:00:37.900 --> 00:00:42.490
However, in this project we're going
to be exploring React context.

11
00:00:42.490 --> 00:00:46.799
Now, React context basically the way
it works is you wrap a context around

12
00:00:46.799 --> 00:00:50.355
a section of your app or
you can wrap it around your whole app.

13
00:00:50.355 --> 00:00:55.233
And then basically, you pass down
specific elements through the context and

14
00:00:55.233 --> 00:00:58.758
all the items that you're
passed down can be then used or

15
00:00:58.758 --> 00:01:01.100
by all the children inside your app.

16
00:01:04.030 --> 00:01:07.292
Now context has two parts,
there is a provider and a consumer So,

17
00:01:07.292 --> 00:01:11.460
the provider is this top-level component
and this is where we also store the data.

18
00:01:11.460 --> 00:01:15.754
And then the consumer is something
that can consume all the data within

19
00:01:15.754 --> 00:01:19.290
the provider from any row
in the app component tree.

20
00:01:19.290 --> 00:01:22.520
So, you don't need to any prompt chilling.

21
00:01:22.520 --> 00:01:26.728
So, this is handy for
us because if you look at our app,

22
00:01:26.728 --> 00:01:31.304
we would like to be entering
our data from the homepage, but

23
00:01:31.304 --> 00:01:35.900
really want the data history
to appear on the history page.

24
00:01:37.110 --> 00:01:40.163
And if you go to the navigation,
oftentimes navigation,

25
00:01:40.163 --> 00:01:43.278
we couldn't even pass these
down as probes because home and

26
00:01:43.278 --> 00:01:45.664
history are adjacent
in the component tree.

27
00:01:45.664 --> 00:01:49.620
So that's why we have to use
something like context or Redux.

28
00:01:53.290 --> 00:01:56.470
So to start, let's create a provider.

29
00:01:56.470 --> 00:01:59.150
So I'm going to create
one top level context.

30
00:01:59.150 --> 00:02:03.123
So in a source directory,
let's create a new file and

31
00:02:03.123 --> 00:02:05.962
let's call it App.provider.tsx.

32
00:02:09.901 --> 00:02:14.741
And here let's create a new context.

33
00:02:14.741 --> 00:02:21.275
So let's do const app,
I need to check if it was capital or not.

34
00:02:21.275 --> 00:02:23.129
Okay, it was.

35
00:02:23.129 --> 00:02:25.771
So let's create a new context.

36
00:02:25.771 --> 00:02:31.138
So let's do const
Appcontext = createContext,

37
00:02:31.138 --> 00:02:36.004
then create context is
imported from React.

38
00:02:36.004 --> 00:02:43.657
And here we need to pass in a default
value and also the type for it.

39
00:02:43.657 --> 00:02:52.375
So let's start with AppcontextType.

40
00:02:52.375 --> 00:02:56.831
And let's just say greeting,
and I'm gonna just say hello.

41
00:02:56.831 --> 00:03:01.833
And I'm going to pass this
context type here as we did

42
00:03:01.833 --> 00:03:07.410
with use state and
we also need to pass in an initial value.

43
00:03:07.410 --> 00:03:12.999
So let's do, so this is a type, so
this should be greeting string.

44
00:03:12.999 --> 00:03:16.720
Here we do greeting hello.

45
00:03:16.720 --> 00:03:19.852
All right, so
now we have an Appcontext and

46
00:03:19.852 --> 00:03:24.207
we have an initial value,
next thing we need is a provider.

47
00:03:24.207 --> 00:03:29.808
So this is the bit that's exported

48
00:03:29.808 --> 00:03:34.057
from the app provider, so

49
00:03:34.057 --> 00:03:40.247
let's do export const AppProvider.

50
00:03:40.247 --> 00:03:44.890
So this will be a React.FC and

51
00:03:44.890 --> 00:03:52.520
we're going to return Appcontext.Provider.

52
00:03:52.520 --> 00:03:56.746
And so basically, the purpose of this
component is that we're going to wrap it

53
00:03:56.746 --> 00:03:59.310
around where we want our context to be.

54
00:03:59.310 --> 00:04:03.384
So we're going to take the children,
so anything that's inside it, and

55
00:04:03.384 --> 00:04:05.894
we're going to just
pass the children down.

56
00:04:10.720 --> 00:04:14.761
And lastly,
we need to give the context a value.

57
00:04:14.761 --> 00:04:19.438
So the value in a provider is
basically what's the current

58
00:04:19.438 --> 00:04:21.450
value of the context is.

59
00:04:21.450 --> 00:04:24.400
So this is the path that will be
available for all the children to use.

60
00:04:24.400 --> 00:04:29.382
So we'll do value and
then this needs to match the syntax, so

61
00:04:29.382 --> 00:04:31.639
we'll do greeting hello.

62
00:04:35.127 --> 00:04:40.150
And lastly, we should also
import react if we're using JSX.

63
00:04:43.210 --> 00:04:46.356
All right, so now this is all set up.

64
00:04:46.356 --> 00:04:50.084
Now let's go to where we want
this app provide it to be.

65
00:04:50.084 --> 00:04:53.030
So in our case, let's go to the top level.

66
00:04:53.030 --> 00:04:59.890
So I'm going to go to App.tsx and I'm
going to about this in the AppProvider.

67
00:05:14.140 --> 00:05:17.324
Cool.
So now, this means that this value that

68
00:05:17.324 --> 00:05:21.588
we're passing to our app
provider will be available for

69
00:05:21.588 --> 00:05:24.960
anything that's inside the app provider.

70
00:05:24.960 --> 00:05:29.722
So all of our screens will have access
to the same instance of that value.

71
00:05:29.722 --> 00:05:34.080
So usually, I create a convenience
function in my provider for

72
00:05:34.080 --> 00:05:37.052
using it, so there's a use context hook.

73
00:05:37.052 --> 00:05:43.310
So I will do export const useAppContext.

74
00:05:43.310 --> 00:05:47.863
And the way you use context
is you use context.

75
00:05:50.355 --> 00:05:54.397
UseContext, which is important.

76
00:05:54.397 --> 00:05:57.176
Sorry, let's do React.useContext.

77
00:05:58.968 --> 00:06:06.560
And we pass in the context you wanna use,
in our case, it's the app context.

78
00:06:06.560 --> 00:06:10.150
So you can have multiple
contexts within your app.

79
00:06:10.150 --> 00:06:14.564
So in this case,
you could have user context, or

80
00:06:14.564 --> 00:06:18.770
theme context, or authentication context.

81
00:06:18.770 --> 00:06:23.310
And now from any component, so let's,
for example, go to our history screen.

82
00:06:25.150 --> 00:06:33.384
We can do const Appcontext
= useAppContext.

83
00:06:33.384 --> 00:06:37.184
And I have a hover over this,
you'll see that,

84
00:06:37.184 --> 00:06:40.227
that need to give me the return value.

85
00:06:40.227 --> 00:06:44.657
Yeah, we'll see that this is
of type app context type,

86
00:06:44.657 --> 00:06:48.520
which means that it has a greeting in it.

87
00:06:48.520 --> 00:06:52.870
So in history,
instead of logging out history,

88
00:06:52.870 --> 00:06:59.030
I can do AppContext.greeting and
now I can see that this says hello.

89
00:06:59.030 --> 00:07:06.000
So if I had more things here,
hello world, it will update.

90
00:07:06.000 --> 00:07:10.989
And the cool thing about that is that
we can use the same thing on any

91
00:07:10.989 --> 00:07:14.448
component without having
to pass this down.

92
00:07:14.448 --> 00:07:19.552
So for example, if I went to
the Analytics tab that we haven't used,

93
00:07:19.552 --> 00:07:25.369
this exact same thing will work here,
so const appContext = useAppContext.

94
00:07:27.210 --> 00:07:31.952
If I did appContext.greeting,
you can see that so I'm going home,

95
00:07:31.952 --> 00:07:34.380
history says hello world.

96
00:07:34.380 --> 00:07:36.192
And analytics also says hello world, so

97
00:07:36.192 --> 00:07:38.440
they have access to the same
instance of context.

98
00:07:41.490 --> 00:07:43.924
So I'm just going through about
this from the analytics screen.

99
00:07:46.910 --> 00:07:51.590
So what we want to use our context for

100
00:07:51.590 --> 00:07:59.546
is basically to pull out this
mood list item into context, so

101
00:07:59.546 --> 00:08:05.630
we could access the mood
list from both pages.

102
00:08:09.830 --> 00:08:14.318
So, let's do this now.

103
00:08:14.318 --> 00:08:18.800
Let's go to the home screen.

104
00:08:18.800 --> 00:08:22.497
Okay, let's open the home screen where
we currently have the mood list and

105
00:08:22.497 --> 00:08:23.560
handle select mood.

106
00:08:23.560 --> 00:08:30.600
And I'm going to copy both this and
go to the app provider.

107
00:08:32.160 --> 00:08:37.480
And this is just a React component,
so I'm going to paste them here,

108
00:08:37.480 --> 00:08:40.623
so we got MoodList and also SelectMood.

109
00:08:40.623 --> 00:08:41.704
I'm going to import.

110
00:08:45.664 --> 00:08:46.314
And I wanna both of these down so
they could be accessed by any component.

111
00:08:46.314 --> 00:08:51.293
So let's do moodList

112
00:08:51.293 --> 00:08:56.830
list and SetMoodList.

113
00:08:56.830 --> 00:09:03.520
And obviously, now our context type
has changed, so I need to update this.

114
00:09:03.520 --> 00:09:10.070
So moodList is now an array of
moods option with timestamp.

115
00:09:13.870 --> 00:09:19.305
And handle select mood is
a function that takes in a mood,

116
00:09:19.305 --> 00:09:23.960
which is a mood option type and
returns nothing.

117
00:09:25.740 --> 00:09:30.872
So one thing is that you need to
provide a default value for all these.

118
00:09:30.872 --> 00:09:36.817
So we'll do moodList which
is just an empty array and

119
00:09:36.817 --> 00:09:41.960
handleSelectMood, which is a no function.

120
00:09:44.210 --> 00:09:46.875
Excellent, so now both moodLists and

121
00:09:46.875 --> 00:09:51.380
the handleSelect functions
are available within our context.

122
00:09:51.380 --> 00:09:53.100
So, now if we go to home.

123
00:09:55.930 --> 00:10:00.090
Let's delete this and
use AppContext instead.

124
00:10:00.090 --> 00:10:01.389
So, let's do AppContext.

125
00:10:05.870 --> 00:10:09.055
UseAppContext.

126
00:10:09.055 --> 00:10:14.515
And here we have the mood picker for
handleSelectMood,

127
00:10:14.515 --> 00:10:20.010
we'll instead pass
appContext.handleSelectMood.

128
00:10:20.010 --> 00:10:24.511
And I'm going to copy this
moodList away from the app

129
00:10:24.511 --> 00:10:28.310
screen because we don't
want it to be here.

130
00:10:28.310 --> 00:10:31.060
And instead let's open history screen.

131
00:10:34.720 --> 00:10:39.174
So we already have AppContext here,
and we want to.

132
00:10:41.258 --> 00:10:47.660
Do AppContext.moodList, so
we wanna copy this bit.

133
00:10:53.050 --> 00:10:57.110
And we wanna map them to mood item,
let's make sure this is important.

134
00:10:58.760 --> 00:10:59.570
And this doesn't need to be in text.

135
00:11:07.130 --> 00:11:09.116
All right, so in our home screen,

136
00:11:09.116 --> 00:11:13.652
all we're doing is we're accessing
the app context, passing in the select.

137
00:11:13.652 --> 00:11:19.347
And in history, we're also passing like
accessing our context and we're just using

138
00:11:19.347 --> 00:11:25.059
that to access AppContext.moodList to map
a route and render each of the mood items.

139
00:11:25.059 --> 00:11:26.322
So let's see if this works.

140
00:11:26.322 --> 00:11:28.520
So I'm gonna choose some mood items.

141
00:11:30.020 --> 00:11:36.080
Yay, it's in the select screen, I'm gonna
add extra celebratory emoji for that.

142
00:11:36.080 --> 00:11:40.378
&gt;&gt; Say I'm recording my mood every day for
a few days, and I traveled from London to

143
00:11:40.378 --> 00:11:45.380
San Francisco, and then recorded my mood
in San Francisco then came back to London.

144
00:11:45.380 --> 00:11:49.139
How would we adjust the time and
show VST for

145
00:11:49.139 --> 00:11:53.950
all of my moods in PS or
PCT anywhere there is timezone?

146
00:11:53.950 --> 00:11:59.024
&gt;&gt; Well, the way the JavaScript times
work is that it's a point in time,

147
00:11:59.024 --> 00:12:00.578
if that makes sense.

148
00:12:00.578 --> 00:12:05.573
So the actual timestamp,
it's a timestamp in that so

149
00:12:05.573 --> 00:12:11.124
currently it says 28th of September,
12:58 to me.

150
00:12:11.124 --> 00:12:19.200
If I took this exact date object and moved
into the US, the date would be different.

151
00:12:19.200 --> 00:12:20.736
As we still a point in time, so

152
00:12:20.736 --> 00:12:24.001
you wouldn't have like dates that
are like all over the place.

153
00:12:24.001 --> 00:12:29.640
But to actually say that, this date
was recorded in a different timezone,

154
00:12:29.640 --> 00:12:34.457
I think you need to add the actual
timezone information on the date.

155
00:12:34.457 --> 00:12:36.972
Yeah, I think that's how I would do it.

156
00:12:36.972 --> 00:12:43.692
I'd add the actual timezone information
into the date because that the JavaScript

157
00:12:43.692 --> 00:12:49.265
date object is a point in time so
it doesn't know what timezone it is.

158
00:12:49.265 --> 00:12:53.931
So it's telling me my date in
my timezone because it knows

159
00:12:53.931 --> 00:12:56.276
the context from my device.

160
00:12:56.276 --> 00:12:56.858
Timezone is a hard.

161
00:12:56.858 --> 00:13:02.804
&gt;&gt; Maybe recording it in UTC or something
&gt;&gt; Yeah,

162
00:13:02.804 --> 00:13:06.500
you'd need you'd need
a different way of recording it,

163
00:13:06.500 --> 00:13:09.349
you wouldn't be able to
use in timestamps so

164
00:13:09.349 --> 00:13:14.509
you could actually do the date string
that includes the timezone information.

165
00:13:14.509 --> 00:13:18.731
But genuinely,
I just stick to JavaScript dates so

166
00:13:18.731 --> 00:13:24.325
if you recorded your mood at 10 AM
in the US and then move to London,

167
00:13:24.325 --> 00:13:31.440
then it would say that it was recorded at
5 AM or whatever the time differences.

168
00:13:31.440 --> 00:13:34.330
&gt;&gt; Is the app context type that you
just implemented the interface?

169
00:13:34.330 --> 00:13:40.300
&gt;&gt; Is the app context type and interface?

170
00:13:40.300 --> 00:13:41.380
It's not.

171
00:13:41.380 --> 00:13:47.657
You could use interfaces, so I wanted
to keep this as simple as possible,

172
00:13:47.657 --> 00:13:52.533
so you could use an interface for
this, we could do this.

173
00:13:52.533 --> 00:13:56.073
And that would work, that's valid.

174
00:13:56.073 --> 00:14:03.380
There are some differences with how
interfaces work versus how types work.

175
00:14:03.380 --> 00:14:07.670
And I think types are easier to work with,
so I don't generally use interfaces.

176
00:14:07.670 --> 00:14:12.529
One thing with interfaces is that
you could have two interfaces

177
00:14:12.529 --> 00:14:14.095
with the same name.

178
00:14:14.095 --> 00:14:16.746
So let's do greeting and
strength, all right?

179
00:14:16.746 --> 00:14:22.645
And then what actually would happen is
that because these are two interfaces

180
00:14:22.645 --> 00:14:27.623
with the same name, they kind of
get combined like in your type,

181
00:14:27.623 --> 00:14:30.940
which I think is quite unexpected.

182
00:14:30.940 --> 00:14:34.064
And if you use type, well,
it's a feature, right,

183
00:14:34.064 --> 00:14:38.510
if you use object-oriented programming
especially, but if you use type,

184
00:14:38.510 --> 00:14:41.930
you wouldn't be able to have
two types with the same name.

185
00:14:41.930 --> 00:14:45.880
So in general, I kind of stick to types, I
think they're a bit more straightforward.

