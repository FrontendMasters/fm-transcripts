WEBVTT

1
00:00:00.040 --> 00:00:02.310 A:middle L:90%
So now we have built a app, we can

2
00:00:02.470 --> 00:00:04.490 A:middle L:90%
choose moods and we have a history tab. We

3
00:00:04.620 --> 00:00:07.040 A:middle L:90%
can see passports. But you will notice that if

4
00:00:07.269 --> 00:00:10.490 A:middle L:90%
I reload our app, then the history is wiped

5
00:00:11.119 --> 00:00:12.849 A:middle L:90%
. And obviously this is not very handy because I

6
00:00:12.910 --> 00:00:14.460 A:middle L:90%
would like to have an actual history of my moods

7
00:00:14.970 --> 00:00:17.839 A:middle L:90%
. So the data is currently stored in memory and

8
00:00:18.260 --> 00:00:22.379 A:middle L:90%
we lose it when we relaunch. So the way

9
00:00:22.519 --> 00:00:25.109 A:middle L:90%
to prevent this is that we need to physically store

10
00:00:26.059 --> 00:00:29.530 A:middle L:90%
the data in on the device so that if you

11
00:00:29.660 --> 00:00:32.560 A:middle L:90%
were to close the app and reopen or even just

12
00:00:33.090 --> 00:00:36.450 A:middle L:90%
reload the average JavaScript we would still have our past

13
00:00:36.810 --> 00:00:40.630 A:middle L:90%
moods on the web. You're probably already familiar with

14
00:00:40.770 --> 00:00:43.679 A:middle L:90%
local storage and there is an equivalent in react native

15
00:00:44.000 --> 00:00:46.189 A:middle L:90%
is called a sting storage. It kind of works

16
00:00:46.780 --> 00:00:49.350 A:middle L:90%
the same way um, as local storage. But

17
00:00:49.490 --> 00:00:50.979 A:middle L:90%
the difference is that it is, as the name

18
00:00:51.159 --> 00:00:55.659 A:middle L:90%
suggests, a synchronous, anything that you store in

19
00:00:55.780 --> 00:00:58.969 A:middle L:90%
local storage has to be serialized able. And in

20
00:00:59.079 --> 00:01:01.679 A:middle L:90%
layman's terms, this basically means you can't store objects

21
00:01:02.409 --> 00:01:05.640 A:middle L:90%
or functions waiting like that or classes or references.

22
00:01:06.299 --> 00:01:08.310 A:middle L:90%
So it needs to be strange numbers because we call

23
00:01:08.900 --> 00:01:12.019 A:middle L:90%
to string um, on the value that we're going

24
00:01:12.250 --> 00:01:15.989 A:middle L:90%
to stall. Easy storage is a native library.

25
00:01:16.489 --> 00:01:21.239 A:middle L:90%
So let's copy this, install command and we'll open

26
00:01:21.629 --> 00:01:31.189 A:middle L:90%
up terminal and install the library and for girls.

27
00:01:31.549 --> 00:01:42.340 A:middle L:90%
Well cd into the directory and Poland still. So

28
00:01:42.530 --> 00:01:46.329 A:middle L:90%
you'll see the library that's going to install and let's

29
00:01:46.500 --> 00:01:49.079 A:middle L:90%
go back to our root directory and run on IOS

30
00:01:49.640 --> 00:01:52.000 A:middle L:90%
or you can always run your app through X code

31
00:01:52.219 --> 00:01:58.040 A:middle L:90%
instead for android, there's no need to install packages

32
00:01:58.620 --> 00:02:01.959 A:middle L:90%
. Just rebuild your app using an android or rebuild

33
00:02:02.609 --> 00:02:12.490 A:middle L:90%
via Andrew studio so stop and restart. So for

34
00:02:12.870 --> 00:02:16.000 A:middle L:90%
the api for racing storage is pretty straightforward. So

35
00:02:16.319 --> 00:02:21.759 A:middle L:90%
if we look at the docks we have get item

36
00:02:22.280 --> 00:02:24.689 A:middle L:90%
set items, merge items from the item, get

37
00:02:25.120 --> 00:02:29.729 A:middle L:90%
all keys um and clear which are the ones that

38
00:02:30.139 --> 00:02:34.199 A:middle L:90%
I mostly end up using. So let's look at

39
00:02:34.319 --> 00:02:38.520 A:middle L:90%
the function signatures. So get item you pass in

40
00:02:38.759 --> 00:02:40.830 A:middle L:90%
a string key. So this will be a sand

41
00:02:41.270 --> 00:02:44.360 A:middle L:90%
boxed kind of um so it will be scoped to

42
00:02:44.500 --> 00:02:46.699 A:middle L:90%
europe so for example you wouldn't be able to get

43
00:02:47.300 --> 00:02:50.909 A:middle L:90%
the item from another apps facing storage so that just

44
00:02:51.150 --> 00:02:53.430 A:middle L:90%
works similar to local storage. So you'll get the

45
00:02:53.539 --> 00:02:57.969 A:middle L:90%
item by key and usually we will store things by

46
00:02:58.080 --> 00:03:00.330 A:middle L:90%
chasing but you can just store individual strings as well

47
00:03:02.139 --> 00:03:04.599 A:middle L:90%
. Um and then we get the value for set

48
00:03:04.909 --> 00:03:07.870 A:middle L:90%
item, it's pretty much the same but we just

49
00:03:08.310 --> 00:03:09.819 A:middle L:90%
set the item by key. So we take two

50
00:03:10.120 --> 00:03:12.020 A:middle L:90%
arguments. The first one is the key and the

51
00:03:12.090 --> 00:03:13.669 A:middle L:90%
second one is the value that you want to set

52
00:03:14.389 --> 00:03:18.039 A:middle L:90%
. This value needs to be a strength. Then

53
00:03:18.300 --> 00:03:21.270 A:middle L:90%
we have clear to clear the whole lacing storage.

54
00:03:22.169 --> 00:03:25.479 A:middle L:90%
You have removed item, two rooms particular item and

55
00:03:25.800 --> 00:03:28.270 A:middle L:90%
another handy one is get all keys. So this

56
00:03:28.500 --> 00:03:31.240 A:middle L:90%
is get all of the keys that are ever set

57
00:03:31.759 --> 00:03:35.620 A:middle L:90%
for this app, see if the build is finished

58
00:03:36.490 --> 00:03:40.400 A:middle L:90%
. Ah excellent timing. So if we go to

59
00:03:40.909 --> 00:03:47.659 A:middle L:90%
our app provider um let's start by importing a sink

60
00:03:47.979 --> 00:03:54.550 A:middle L:90%
storage from react native. I think it's a react

61
00:03:54.759 --> 00:03:59.039 A:middle L:90%
native complete package. Mm There it is. So

62
00:03:59.280 --> 00:04:05.250 A:middle L:90%
reactivating storage using storage and she's going to quickly check

63
00:04:05.509 --> 00:04:08.569 A:middle L:90%
what I call the functions so I'll be consistent Agriculture

64
00:04:11.039 --> 00:04:14.229 A:middle L:90%
. Okay. Okay. So let's figure out what

65
00:04:14.729 --> 00:04:16.379 A:middle L:90%
we want are updated to look like. So let's

66
00:04:16.579 --> 00:04:21.970 A:middle L:90%
do type up data and we just want to store

67
00:04:22.329 --> 00:04:30.329 A:middle L:90%
the mood list which will be a mood option with

68
00:04:30.740 --> 00:04:33.899 A:middle L:90%
timestamp. So generally things that you store in a

69
00:04:34.029 --> 00:04:35.860 A:middle L:90%
sink storage. It's good to have them as situation

70
00:04:36.240 --> 00:04:40.139 A:middle L:90%
objects because then you can always add keys. Let's

71
00:04:40.639 --> 00:04:47.730 A:middle L:90%
also do a constant for our key. So that's

72
00:04:47.939 --> 00:04:58.089 A:middle L:90%
quite my cup data with the turkey as to a

73
00:04:59.230 --> 00:05:04.459 A:middle L:90%
set up data. Yeah. So this takes in

74
00:05:04.750 --> 00:05:07.269 A:middle L:90%
the app data that we want to save. We

75
00:05:07.439 --> 00:05:11.360 A:middle L:90%
should be of type app data and it doesn't return

76
00:05:11.750 --> 00:05:18.670 A:middle L:90%
anything so we'll use void. So to do this

77
00:05:18.939 --> 00:05:29.129 A:middle L:90%
we'll do const result equals eating storage dot get set

78
00:05:29.540 --> 00:05:35.990 A:middle L:90%
item and we'll use the data care and well Jason

79
00:05:36.920 --> 00:05:44.529 A:middle L:90%
string of fire our appetite to now this is an

80
00:05:44.699 --> 00:05:46.959 A:middle L:90%
a sink function. So I want to await it

81
00:05:47.740 --> 00:05:49.759 A:middle L:90%
. So I need to make this into an a

82
00:05:49.920 --> 00:06:01.410 A:middle L:90%
sink. Arrow function. Mm Okay. And this

83
00:06:01.519 --> 00:06:03.430 A:middle L:90%
is actually telling me that oh you said that is

84
00:06:03.519 --> 00:06:05.370 A:middle L:90%
going to return void but actually it's a promise.

85
00:06:05.910 --> 00:06:10.430 A:middle L:90%
So I'm going to add promise. So it's a

86
00:06:10.579 --> 00:06:12.449 A:middle L:90%
synchronous and then it's going to return in nothing.

87
00:06:19.040 --> 00:06:21.689 A:middle L:90%
Yeah and we don't actually need the result. So

88
00:06:22.019 --> 00:06:24.740 A:middle L:90%
we just get the up data, we started tracing

89
00:06:25.129 --> 00:06:27.339 A:middle L:90%
storage and then do nothing. It's good practice to

90
00:06:27.790 --> 00:06:30.829 A:middle L:90%
also surround us in a try catch because you don't

91
00:06:30.980 --> 00:06:33.819 A:middle L:90%
really want JavaScript errors here and if update a for

92
00:06:33.959 --> 00:06:37.160 A:middle L:90%
some reason um was wasn't what you were expecting?

93
00:06:37.829 --> 00:06:39.889 A:middle L:90%
You don't really want errors here. So I usually

94
00:06:40.259 --> 00:06:47.410 A:middle L:90%
do try catch Yeah and cannot do anything with it

95
00:06:49.139 --> 00:06:52.540 A:middle L:90%
. Alright, let's do another one for actually getting

96
00:06:53.009 --> 00:06:56.310 A:middle L:90%
the app data. So const get up data.

97
00:06:57.240 --> 00:07:01.240 A:middle L:90%
So this will also be an easing function. We

98
00:07:01.600 --> 00:07:08.139 A:middle L:90%
don't have any arguments but it returns a promise with

99
00:07:08.759 --> 00:07:14.589 A:middle L:90%
up data and let's do another try catch here.

100
00:07:18.540 --> 00:07:26.040 A:middle L:90%
Mhm. And we'll do a const of result and

101
00:07:26.379 --> 00:07:32.300 A:middle L:90%
we'll await facing storage get item. So this is

102
00:07:32.399 --> 00:07:34.750 A:middle L:90%
why it's nice to pull these out to a constant

103
00:07:35.290 --> 00:07:37.259 A:middle L:90%
just to make sure that we use the same key

104
00:07:40.639 --> 00:07:42.100 A:middle L:90%
and that's it. So this gives us the results

105
00:07:42.709 --> 00:07:45.540 A:middle L:90%
and we'll also because we Jason string of fires are

106
00:07:45.680 --> 00:07:48.149 A:middle L:90%
updated here, we want to Jason passed the result

107
00:07:49.240 --> 00:07:52.470 A:middle L:90%
. So we'll do return well we also need to

108
00:07:52.550 --> 00:07:54.899 A:middle L:90%
account for when the result is undefined. So we'll

109
00:07:55.019 --> 00:08:02.300 A:middle L:90%
do if result because obviously on initial launch this will

110
00:08:02.439 --> 00:08:12.790 A:middle L:90%
just be no uh return Jason Pass and result.

111
00:08:14.240 --> 00:08:17.470 A:middle L:90%
Okay, okay. And we also need a default

112
00:08:17.959 --> 00:08:23.639 A:middle L:90%
value. So let's do return null by default and

113
00:08:24.089 --> 00:08:27.540 A:middle L:90%
we also need to tell our promise that we do

114
00:08:27.709 --> 00:08:32.450 A:middle L:90%
this. So just as a side note about TypeScript

115
00:08:33.639 --> 00:08:36.309 A:middle L:90%
so I don't actually need to type these return types

116
00:08:36.850 --> 00:08:39.340 A:middle L:90%
. So if I hover over this, you can

117
00:08:39.470 --> 00:08:41.440 A:middle L:90%
look at the function signature so it goes okay,

118
00:08:41.669 --> 00:08:43.870 A:middle L:90%
it takes up data and returns an empty promise.

119
00:08:44.419 --> 00:08:48.120 A:middle L:90%
If I remove this, this is where the study

120
00:08:48.580 --> 00:08:50.850 A:middle L:90%
co checking comes to play if I remove this and

121
00:08:51.000 --> 00:08:53.929 A:middle L:90%
hover over it, TypeScript already knows this. So

122
00:08:54.379 --> 00:08:58.500 A:middle L:90%
actually this return type is superfluous uh which is quite

123
00:08:58.669 --> 00:09:01.149 A:middle L:90%
handy, so it's nice like it can be nice

124
00:09:01.629 --> 00:09:03.990 A:middle L:90%
to add it just to check sanity check your things

125
00:09:04.409 --> 00:09:06.440 A:middle L:90%
or if it's not returning what you thought it was

126
00:09:06.570 --> 00:09:08.820 A:middle L:90%
returning, but in this case we don't actually need

127
00:09:09.070 --> 00:09:12.120 A:middle L:90%
to explicitly type it. I was just looking in

128
00:09:12.610 --> 00:09:15.500 A:middle L:90%
get up data here, we kind of do want

129
00:09:15.690 --> 00:09:17.679 A:middle L:90%
to say that if it's updated or null. So

130
00:09:18.059 --> 00:09:20.950 A:middle L:90%
if we don't type it, you can see that

131
00:09:21.090 --> 00:09:22.470 A:middle L:90%
it's going to say, oh it returns a promise

132
00:09:22.860 --> 00:09:24.769 A:middle L:90%
of any, which isn't correct. So in this

133
00:09:24.940 --> 00:09:26.679 A:middle L:90%
case we want to type it, that's a good

134
00:09:26.779 --> 00:09:29.340 A:middle L:90%
example again and then in this case it doesn't matter

135
00:09:29.580 --> 00:09:33.519 A:middle L:90%
because we returned nothing. Cool, so we want

136
00:09:33.799 --> 00:09:37.149 A:middle L:90%
to get and set this on launch. So let's

137
00:09:37.539 --> 00:09:42.830 A:middle L:90%
do a used effect. So if we do a

138
00:09:43.029 --> 00:09:45.549 A:middle L:90%
used effect with an empty dependency array, it gets

139
00:09:45.990 --> 00:09:52.480 A:middle L:90%
run at lunch. And so use a news effect

140
00:09:52.769 --> 00:09:55.230 A:middle L:90%
. You can't run asynchronous functions but obviously this is

141
00:09:55.529 --> 00:09:59.620 A:middle L:90%
a synchronous so we around it is you can define

142
00:10:00.570 --> 00:10:03.799 A:middle L:90%
an asynchronous function inside you use effect and just call

143
00:10:04.039 --> 00:10:11.210 A:middle L:90%
it. So let's do bitch data. This will

144
00:10:11.340 --> 00:10:16.500 A:middle L:90%
be an a sync function and we'll do constant data

145
00:10:17.529 --> 00:10:21.500 A:middle L:90%
equals get up data. So this will be a

146
00:10:21.659 --> 00:10:26.000 A:middle L:90%
thing. So we need to await it and if

147
00:10:26.720 --> 00:10:30.100 A:middle L:90%
data remember the default value for it is No.

148
00:10:31.440 --> 00:10:36.169 A:middle L:90%
Then we set the mood list to be data dot

149
00:10:36.450 --> 00:10:42.990 A:middle L:90%
mood list. And here let's just call pitch and

150
00:10:43.110 --> 00:10:47.809 A:middle L:90%
potato. So that's to get the initial data.

151
00:10:48.200 --> 00:10:50.090 A:middle L:90%
But we also need to save the data whenever we

152
00:10:50.169 --> 00:10:53.320 A:middle L:90%
make a change. So just a quick way of

153
00:10:53.409 --> 00:10:55.720 A:middle L:90%
doing it is I'm going to do it inside this

154
00:10:56.049 --> 00:11:00.250 A:middle L:90%
handle. Select mood callback. So let's make this

155
00:11:02.039 --> 00:11:05.940 A:middle L:90%
not an implicit return to make this into an explicit

156
00:11:06.539 --> 00:11:14.049 A:middle L:90%
return and const new mood list. We should be

157
00:11:14.129 --> 00:11:15.830 A:middle L:90%
this value. So we still want to return it

158
00:11:19.340 --> 00:11:22.370 A:middle L:90%
. But also before we return it, let's set

159
00:11:24.340 --> 00:11:29.659 A:middle L:90%
up data and let's do mood list to be the

160
00:11:30.149 --> 00:11:34.899 A:middle L:90%
new mood list. All right. That should be

161
00:11:35.009 --> 00:11:38.889 A:middle L:90%
all the vets reload to be clear. And let's

162
00:11:39.240 --> 00:11:43.679 A:middle L:90%
add some moods. So we've got to move here

163
00:11:44.830 --> 00:11:49.700 A:middle L:90%
and let's reload and is still there. Now if

164
00:11:49.879 --> 00:11:52.529 A:middle L:90%
I actually completely close the app and reopen it,

165
00:11:54.320 --> 00:11:56.720 A:middle L:90%
they're still there so they get persisted across launches

