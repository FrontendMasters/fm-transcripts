WEBVTT

1
00:00:00.680 --> 00:00:05.075
Next up we have one additional tab,
application for analytics.

2
00:00:05.075 --> 00:00:10.520
So there's all kinds of things you
can do with data once you have it.

3
00:00:10.520 --> 00:00:16.950
And this is a good opportunity to try
your hand at some Data Visualization.

4
00:00:16.950 --> 00:00:22.273
So for this task I would recommend
you use something like victory,

5
00:00:22.273 --> 00:00:24.960
which is a charting library.

6
00:00:24.960 --> 00:00:28.000
For React web and React Native as well.

7
00:00:28.000 --> 00:00:33.060
And you can use it to for example,
create a pie chart for the moods.

8
00:00:33.060 --> 00:00:37.800
So the victory talks are pretty
comprehensive, and they have all kinds of

9
00:00:37.800 --> 00:00:42.170
different animation like charting and
utilities that you can use.

10
00:00:42.170 --> 00:00:44.860
You can create by charts or line charts.

11
00:00:44.860 --> 00:00:47.196
You can get pretty fancy
with what you create.

12
00:00:47.196 --> 00:00:51.763
All right, so basically to create
this we will use victory native.

13
00:00:51.763 --> 00:00:53.297
So we do yarn add victory native.

14
00:00:53.297 --> 00:00:58.159
And victory native actually has
a dependency of React Native SVG PG.

15
00:00:58.159 --> 00:01:03.117
So that's where it uses to render all of
the charting stuff and we already have

16
00:01:03.117 --> 00:01:07.711
React Native SVG because we need to
install it for our bottom tab icons.

17
00:01:07.711 --> 00:01:13.170
So there's actually no native dependencies
on this one, we'll just work.

18
00:01:13.170 --> 00:01:13.670
I can just add it.

19
00:01:18.360 --> 00:01:24.313
And next, if you look at the documentation
for victory pie, which is what I use for

20
00:01:24.313 --> 00:01:29.659
my analytics tab, it is looking for
data, that's in a format of X cats and

21
00:01:29.659 --> 00:01:33.740
x with which is the title that
you're going to be using.

22
00:01:33.740 --> 00:01:37.120
And Y being the number of
those items in the set.

23
00:01:38.630 --> 00:01:41.634
And obviously,
our data doesn't look like that.

24
00:01:41.634 --> 00:01:44.750
So we need to convert it into that format.

25
00:01:44.750 --> 00:01:45.790
For this, I use lodash.

26
00:01:45.790 --> 00:01:47.720
But you can do it in plain JavaScript.

27
00:01:49.010 --> 00:01:51.026
So lodash doesn't have those gift types.

28
00:01:51.026 --> 00:01:56.015
So if you want to use you with TypeScript
you'll have to install types to community

29
00:01:56.015 --> 00:02:00.933
types which are thankfully available and
you can do that with yarn add a type slash

30
00:02:00.933 --> 00:02:06.450
lodash slash lodash So,

31
00:02:06.450 --> 00:02:10.220
here, this is an example of how
you could group the energy.

32
00:02:10.220 --> 00:02:12.367
So, you can use group by from lodash,

33
00:02:12.367 --> 00:02:16.880
which basically automatically create
groups based on a key value on an object.

34
00:02:16.880 --> 00:02:20.770
And then you can call operator entries
on that so you could map over it.

35
00:02:20.770 --> 00:02:25.194
And then we can pass
the data down to victory PI.

36
00:02:25.194 --> 00:02:29.154
And then there are a bunch of properties,
so if you look at my solution,

37
00:02:29.154 --> 00:02:33.312
so here are a bunch of properties that
are used to create the right colors and

38
00:02:33.312 --> 00:02:34.968
sizes that I was looking for.

39
00:02:34.968 --> 00:02:37.580
But you can sell it to
your heart's content.

