WEBVTT

1
00:00:00.720 --> 00:00:01.286
All right so

2
00:00:01.286 --> 00:00:05.366
this course isn't about TypeScript I know
I'm talking about TypeScript right now,

3
00:00:05.366 --> 00:00:09.064
but I'll just tell you a little bit in
order for you to be able to follow along.

4
00:00:09.064 --> 00:00:13.653
So I'll do a quick intro to
what you need to know for

5
00:00:13.653 --> 00:00:17.162
this workshop and we just open our code

6
00:00:22.434 --> 00:00:24.920
Okay, so,
this is the projects that we've created.

7
00:00:24.920 --> 00:00:28.574
And then at the rear directory,
you'll see a Ts config dot Jason,

8
00:00:28.574 --> 00:00:33.160
and this is basically all the options for
the type grid you can acquire that.

9
00:00:33.160 --> 00:00:36.814
And you can choose here whether to
use strict mode or not, whether

10
00:00:36.814 --> 00:00:41.380
to allow implicit anys like how strict
you want to do in your type checking.

11
00:00:41.380 --> 00:00:45.244
Also whether you should ignore some parts,
you can set up module aliases, or

12
00:00:45.244 --> 00:00:46.780
that kind of stuff.

13
00:00:46.780 --> 00:00:50.885
So this is the main conflict file

14
00:00:57.062 --> 00:01:00.820
All right, main things you need to know
about TypeScript, how to declare types.

15
00:01:00.820 --> 00:01:03.620
So, suppose you had a user
object that looks like this.

16
00:01:03.620 --> 00:01:08.850
So, we've got a user and
the user's name, age and hobbies.

17
00:01:08.850 --> 00:01:12.940
So, to declare a type for this object,
we can use a type command.

18
00:01:12.940 --> 00:01:15.478
So, I'm going to do type user, so

19
00:01:15.478 --> 00:01:19.600
types are usually uppercase
like soft then uppercase.

20
00:01:19.600 --> 00:01:24.441
So we're gonna do type capital user,
equals and then we do name which is

21
00:01:24.441 --> 00:01:28.900
a string age number and
then hobbies which is a string array.

22
00:01:28.900 --> 00:01:32.965
So to denote an array, you can do
the type and an array in the end, or

23
00:01:32.965 --> 00:01:35.670
you can wrap the whole thing in array.

24
00:01:35.670 --> 00:01:36.600
I prefer this notation.

25
00:01:36.600 --> 00:01:41.560
And then we can explicitly set
the type of the object to be user.

26
00:01:43.130 --> 00:01:48.100
So here we say that user
colon is of type user.

27
00:01:48.100 --> 00:01:53.079
So here, for example,
if I added additional fields that didn't

28
00:01:53.079 --> 00:01:57.071
exist in my user type,
I would get type kinda error.

29
00:01:59.383 --> 00:02:04.420
So this actually quite handy to check
using the TypeScript playground.

30
00:02:04.420 --> 00:02:07.982
So if I open this TypeScript playground
can I actually show you this to you.

31
00:02:24.009 --> 00:02:28.601
Cool so right now it's happy but
see I removed these hobbies array and

32
00:02:28.601 --> 00:02:31.225
you can see that this is going to error.

33
00:02:33.145 --> 00:02:36.478
And similarly, if I added another field,

34
00:02:36.478 --> 00:02:40.273
like pets,
which should also be a string array,

35
00:02:40.273 --> 00:02:46.120
then the user will error because it's
saying that is missing my pets type.

36
00:02:47.330 --> 00:02:49.610
We can also have optional types.

37
00:02:49.610 --> 00:02:56.670
So this means that the argument
is either typed or undefined so

38
00:02:56.670 --> 00:03:03.750
say that we added hobbies aside pets here,
as a string array.

39
00:03:05.100 --> 00:03:07.710
And it's saying,
no user doesn't have pets, but

40
00:03:07.710 --> 00:03:11.500
then I can make it optional by adding
a question mark after the pets.

41
00:03:11.500 --> 00:03:17.484
And now it's fine because you
can have pets or you might not.

42
00:03:17.484 --> 00:03:22.285
So we can have another user
if we did use a two and

43
00:03:22.285 --> 00:03:30.050
also make this off type user and
say name, Paul, age 30, hobbies.

44
00:03:30.050 --> 00:03:31.460
Let's make hobbies an empty array.

45
00:03:31.460 --> 00:03:36.580
This is also valid because an empty
string array is still a string array.

46
00:03:36.580 --> 00:03:40.650
And then pets,
let's say that Paul has a rabbit.

47
00:03:40.650 --> 00:03:42.920
And that is fine.

48
00:03:42.920 --> 00:03:45.980
So both of these users
are valid user types.

49
00:03:49.570 --> 00:03:51.810
Then we have an or type.

50
00:03:51.810 --> 00:03:53.957
So you can use enums for this, but

51
00:03:53.957 --> 00:03:57.949
I prefer not to because It's
less boilerplate if you don't,

52
00:03:57.949 --> 00:04:02.460
you can use this symbol which acts
as an or between the options.

53
00:04:02.460 --> 00:04:04.920
So for example, we can add a nationality.

54
00:04:04.920 --> 00:04:09.380
So we can have a nationality that's
British, or American, or Estonian.

55
00:04:09.380 --> 00:04:14.353
So if I copy this Now it's saying I

56
00:04:14.353 --> 00:04:17.710
know both of these users are invalid
because you don't have nationality.

57
00:04:17.710 --> 00:04:25.205
And I can do nationality British And
here let's do nationality Estonian.

58
00:04:25.205 --> 00:04:29.255
Now both of these are valid but

59
00:04:29.255 --> 00:04:35.420
we can only choose from
these three options.

60
00:04:35.420 --> 00:04:39.867
So let's do German and it's actually
going to say that German is not

61
00:04:39.867 --> 00:04:43.613
assignable to these three types
because this I can do an or

62
00:04:43.613 --> 00:04:47.411
type
&gt;&gt; Can you

63
00:04:47.411 --> 00:04:51.970
declare a mixed array like strings and
numbers in the array for example?

64
00:04:51.970 --> 00:04:53.700
&gt;&gt; Yes, yeah, you can.

65
00:04:53.700 --> 00:04:59.989
So for example if hobbies was a string or
a number you would do brackets and

66
00:04:59.989 --> 00:05:05.260
do string or number and then here,
I could put numbers here.

67
00:05:06.830 --> 00:05:08.770
But I wouldn't be able to
probe sample do an object.

68
00:05:08.770 --> 00:05:16.947
So this is going to say, it's not
a string array number And lastly so

69
00:05:16.947 --> 00:05:22.316
when typing functions the word void is
used to denote the lack of a return type.

70
00:05:22.316 --> 00:05:27.620
So for example for this function, which
is a logger, where it takes a message and

71
00:05:27.620 --> 00:05:31.520
returns nothing cuz we're just
logging out this message,

72
00:05:31.520 --> 00:05:34.334
we would say that this
return type is void.

73
00:05:34.334 --> 00:05:37.880
Now typing React Components.

74
00:05:37.880 --> 00:05:42.080
So here is a simple component that
just imports react imports, text and

75
00:05:42.080 --> 00:05:43.920
return a greeting.

76
00:05:43.920 --> 00:05:47.350
This component in TypeScript
is exactly the same.

77
00:05:47.350 --> 00:05:50.724
The only thing that's
different is notice that

78
00:05:50.724 --> 00:05:55.060
after the title of name of the component,
we add react.fc.

79
00:05:55.060 --> 00:05:57.870
So FC stands for functional components.

80
00:05:57.870 --> 00:06:01.884
Now, the reason that we do that in this
case, it knows that you should return

81
00:06:01.884 --> 00:06:05.740
a function you should return you
should return something from it.

82
00:06:05.740 --> 00:06:07.760
So for example, if you return no.

83
00:06:07.760 --> 00:06:10.367
It's fine but if you return nothing for

84
00:06:10.367 --> 00:06:15.581
example you forgot your return keyword
which can happen to the best of us this is

85
00:06:15.581 --> 00:06:21.120
going to give you a warning it's going to
say I think you meant to return something.

86
00:06:21.120 --> 00:06:24.452
The other thing you get for
free is you get the children property, so

87
00:06:24.452 --> 00:06:28.079
if your function has children like
children is typed by default you don't

88
00:06:28.079 --> 00:06:29.384
have to worry about them.

89
00:06:29.384 --> 00:06:34.363
And to actually type the properties so
here we have another user we've got react,

90
00:06:34.363 --> 00:06:38.705
text and we just take the first name and
last name and add them together.

91
00:06:38.705 --> 00:06:42.546
In TypeScript we basically,
we create a type for

92
00:06:42.546 --> 00:06:46.856
the user props the same way
that we did before here, and

93
00:06:46.856 --> 00:06:51.541
we define all the props so
you can use optional parameters or

94
00:06:51.541 --> 00:06:55.970
also whatever you want And
then we pass it into React FC.

95
00:06:55.970 --> 00:07:00.880
So basically this component is a component
without any props if you add props

96
00:07:00.880 --> 00:07:02.425
you just add them here.

