WEBVTT

1
00:00:00.640 --> 00:00:02.950 A:middle L:90%
All right. So this course isn't about TypeScript and

2
00:00:03.100 --> 00:00:05.660 A:middle L:90%
I'm talking about TypeScript right now but I'll just tell

3
00:00:05.769 --> 00:00:07.919 A:middle L:90%
you a little bit in order for you to be

4
00:00:07.980 --> 00:00:09.769 A:middle L:90%
able to follow along. So I'll do a quick

5
00:00:10.050 --> 00:00:11.750 A:middle L:90%
intro to what you need to know for this workshop

6
00:00:12.640 --> 00:00:22.609 A:middle L:90%
Let me just open our code. Okay, so

7
00:00:22.750 --> 00:00:25.230 A:middle L:90%
this is the projects that we've created and then at

8
00:00:25.379 --> 00:00:28.260 A:middle L:90%
the root directory you'll see a T s conflict or

9
00:00:28.390 --> 00:00:31.760 A:middle L:90%
Jason and this is basically all the options for the

10
00:00:31.829 --> 00:00:35.310 A:middle L:90%
typescript compiler and you can choose here um whether to

11
00:00:35.479 --> 00:00:37.590 A:middle L:90%
use strict mode or not, whether to allow implicit

12
00:00:38.090 --> 00:00:40.179 A:middle L:90%
Aeneas, like how strict you want to do in

13
00:00:40.280 --> 00:00:42.789 A:middle L:90%
your type checking. Also whether you should ignore some

14
00:00:43.020 --> 00:00:45.539 A:middle L:90%
parts, you can set up module, aliases or

15
00:00:45.679 --> 00:00:47.429 A:middle L:90%
that kind of stuff. So this is the main

16
00:00:47.829 --> 00:00:57.929 A:middle L:90%
conflict fail. Mhm Alright, main things you need

17
00:00:58.039 --> 00:01:00.409 A:middle L:90%
to know about TypeScript how to declare types. So

18
00:01:01.039 --> 00:01:03.210 A:middle L:90%
suppose you had a user object that looks like this

19
00:01:03.539 --> 00:01:05.790 A:middle L:90%
so we've got a user and the user has a

20
00:01:05.840 --> 00:01:09.799 A:middle L:90%
name, age and hobbies so to declare a type

21
00:01:10.549 --> 00:01:12.519 A:middle L:90%
for this object, we can use the type command

22
00:01:12.950 --> 00:01:15.049 A:middle L:90%
. So I'm going to do type user. So

23
00:01:16.239 --> 00:01:19.310 A:middle L:90%
types are usually upper case uh workshop than upper case

24
00:01:19.599 --> 00:01:22.439 A:middle L:90%
. So we're going to do type capital user equals

25
00:01:23.310 --> 00:01:24.819 A:middle L:90%
and then we do name, which is a string

26
00:01:25.400 --> 00:01:27.859 A:middle L:90%
age number and then hobbies, which is a string

27
00:01:28.209 --> 00:01:29.510 A:middle L:90%
array, so do the notes, an array,

28
00:01:29.890 --> 00:01:32.939 A:middle L:90%
you can do the type and then array in the

29
00:01:33.170 --> 00:01:34.969 A:middle L:90%
end or you can wrap the whole thing in array

30
00:01:35.390 --> 00:01:38.430 A:middle L:90%
. I prefer this notation and then we can explicitly

31
00:01:38.950 --> 00:01:41.140 A:middle L:90%
set the type of the object to be user.

32
00:01:43.040 --> 00:01:47.040 A:middle L:90%
So so here we say that user colon is of

33
00:01:47.140 --> 00:01:49.000 A:middle L:90%
type user. So here for example, if I

34
00:01:49.060 --> 00:01:53.120 A:middle L:90%
added um additional fields that didn't exist in my user

35
00:01:53.370 --> 00:01:59.439 A:middle L:90%
type, I would get TypeScript there's era. So

36
00:01:59.980 --> 00:02:03.579 A:middle L:90%
this is actually quite handed to check using the typescript

37
00:02:03.959 --> 00:02:06.840 A:middle L:90%
playground. So if I open this TypeScript playground can

38
00:02:07.019 --> 00:02:19.340 A:middle L:90%
actually show you the studio. Yeah. Mhm.

39
00:02:24.039 --> 00:02:25.969 A:middle L:90%
Cool. So right now it's happy. But say

40
00:02:26.460 --> 00:02:29.639 A:middle L:90%
I removed these hobbies. All right, and you

41
00:02:29.719 --> 00:02:33.039 A:middle L:90%
can see that this is going to error. And

42
00:02:33.289 --> 00:02:36.840 A:middle L:90%
similarly, if I added another field um like pets

43
00:02:38.139 --> 00:02:41.939 A:middle L:90%
, which should also be a string array, then

44
00:02:42.389 --> 00:02:44.259 A:middle L:90%
the user will error because it's saying that it's missing

45
00:02:45.129 --> 00:02:49.550 A:middle L:90%
my pets type. All right. Um We can

46
00:02:49.659 --> 00:02:52.610 A:middle L:90%
also have optional types. So this means that the

47
00:02:52.729 --> 00:02:56.680 A:middle L:90%
argument decided typed or undefined. So say that we

48
00:02:59.639 --> 00:03:05.009 A:middle L:90%
added hobbies a sad pets here as a string.

49
00:03:05.490 --> 00:03:08.250 A:middle L:90%
Right? And it's saying, oh no user doesn't

50
00:03:08.490 --> 00:03:10.379 A:middle L:90%
have pets, but then I can make it optional

51
00:03:10.810 --> 00:03:13.349 A:middle L:90%
by adding a question mark after the pets. And

52
00:03:13.699 --> 00:03:16.669 A:middle L:90%
now it's fine because you can have pets or you

53
00:03:16.960 --> 00:03:19.250 A:middle L:90%
might not. So we can have another user if

54
00:03:19.370 --> 00:03:22.280 A:middle L:90%
we did use it to And also make this of

55
00:03:22.460 --> 00:03:30.840 A:middle L:90%
type user and say name paul age 30 hobbies.

56
00:03:32.110 --> 00:03:33.830 A:middle L:90%
Let's make copies an empty array. This is also

57
00:03:34.069 --> 00:03:36.960 A:middle L:90%
valid because an empty string array is still it's still

58
00:03:37.120 --> 00:03:41.590 A:middle L:90%
a string array and then pet. Let's say that

59
00:03:41.759 --> 00:03:45.009 A:middle L:90%
paul has a rabbit and now it's fine. So

60
00:03:45.169 --> 00:03:51.819 A:middle L:90%
both of these users are valid user types then we

61
00:03:51.919 --> 00:03:54.969 A:middle L:90%
have an old type so you can use enemas for

62
00:03:55.090 --> 00:03:57.860 A:middle L:90%
this but I prefer not to because it's less boilerplate

63
00:03:58.449 --> 00:04:01.629 A:middle L:90%
if you don't um you can use this symbol which

64
00:04:01.860 --> 00:04:04.659 A:middle L:90%
acts as an awe between the options. So for

65
00:04:04.729 --> 00:04:07.289 A:middle L:90%
example we can add a nationality so we can have

66
00:04:07.560 --> 00:04:11.789 A:middle L:90%
nationality that's british or american or estonian. So if

67
00:04:11.949 --> 00:04:16.160 A:middle L:90%
I copy this. Mhm Yeah. Now it's saying

68
00:04:16.509 --> 00:04:18.269 A:middle L:90%
oh no both of these users are invalid because they

69
00:04:18.339 --> 00:04:27.439 A:middle L:90%
don't have nationality and I can do nationality british and

70
00:04:28.170 --> 00:04:32.889 A:middle L:90%
here let's do nationality estonian. Now both of these

71
00:04:33.069 --> 00:04:36.250 A:middle L:90%
are valid but we can only choose from these three

72
00:04:36.480 --> 00:04:40.410 A:middle L:90%
options. So let's do german and it's actually going

73
00:04:40.610 --> 00:04:43.259 A:middle L:90%
to say that Germany is not a sustainable to these

74
00:04:43.459 --> 00:04:45.170 A:middle L:90%
three types. This is how you can do and

75
00:04:45.360 --> 00:04:51.410 A:middle L:90%
all type, can you declare max during like strings

76
00:04:51.899 --> 00:04:53.790 A:middle L:90%
and numbers in the array for example. Yes.

77
00:04:54.439 --> 00:04:58.290 A:middle L:90%
Yeah you can so for example if hobbies um was

78
00:04:58.819 --> 00:05:01.930 A:middle L:90%
a string or a number, you would do brackets

79
00:05:02.629 --> 00:05:06.079 A:middle L:90%
and do a string or number and then here I

80
00:05:06.170 --> 00:05:09.649 A:middle L:90%
could put numbers here but I wouldn't be able to

81
00:05:09.750 --> 00:05:11.220 A:middle L:90%
for example do an object. So this is going

82
00:05:11.420 --> 00:05:12.959 A:middle L:90%
to say oh it's not a string or a number

83
00:05:16.740 --> 00:05:19.819 A:middle L:90%
. Yeah. And lastly so when typing functions,

84
00:05:21.139 --> 00:05:23.300 A:middle L:90%
uh the word void is used to denote the lack

85
00:05:23.620 --> 00:05:26.290 A:middle L:90%
of a return type. So for example for dysfunction

86
00:05:27.050 --> 00:05:29.399 A:middle L:90%
which is a longer where it takes a message and

87
00:05:29.589 --> 00:05:31.379 A:middle L:90%
returns nothing because we're just logging out this message.

88
00:05:31.980 --> 00:05:37.839 A:middle L:90%
We would say that this return type is void now

89
00:05:38.189 --> 00:05:41.149 A:middle L:90%
type of their components. So here is a simple

90
00:05:41.430 --> 00:05:44.509 A:middle L:90%
component that just import react imports text and we return

91
00:05:44.889 --> 00:05:48.649 A:middle L:90%
a greeting. This component in TypeScript is exactly the

92
00:05:48.740 --> 00:05:51.500 A:middle L:90%
same. The only thing that's different is note that

93
00:05:51.750 --> 00:05:55.220 A:middle L:90%
after the title of name of the component we add

94
00:05:55.709 --> 00:05:59.839 A:middle L:90%
react dot fc fc stands for functional components. Now

95
00:06:00.100 --> 00:06:02.480 A:middle L:90%
the reason that we do that is in this case

96
00:06:02.850 --> 00:06:05.550 A:middle L:90%
it knows that you should return a function, you

97
00:06:05.620 --> 00:06:07.329 A:middle L:90%
should return, you should return something from it.

98
00:06:07.610 --> 00:06:10.560 A:middle L:90%
So for example if you return null. Absar it's

99
00:06:11.000 --> 00:06:12.980 A:middle L:90%
fine. But if you return nothing for example you

100
00:06:13.089 --> 00:06:15.740 A:middle L:90%
forgot your return keyword can happen to the best of

101
00:06:15.819 --> 00:06:18.009 A:middle L:90%
us. Um this is going to give you a

102
00:06:18.069 --> 00:06:19.410 A:middle L:90%
warning, is going to say, I think you

103
00:06:19.579 --> 00:06:21.930 A:middle L:90%
meant to return something. The other thing you get

104
00:06:22.139 --> 00:06:25.089 A:middle L:90%
for free is you get the Children property. So

105
00:06:25.589 --> 00:06:28.759 A:middle L:90%
if your if your function has Children like Children is

106
00:06:28.980 --> 00:06:30.350 A:middle L:90%
typed in by default so you don't have to worry

107
00:06:30.500 --> 00:06:32.939 A:middle L:90%
about them and you actually take the properties. So

108
00:06:33.120 --> 00:06:36.279 A:middle L:90%
here we have another user we got react text and

109
00:06:36.379 --> 00:06:38.930 A:middle L:90%
we just take the first name and last name and

110
00:06:39.240 --> 00:06:44.350 A:middle L:90%
add them together in TypeScript Well basically add, we

111
00:06:44.949 --> 00:06:47.430 A:middle L:90%
create a type for the user props the same way

112
00:06:47.610 --> 00:06:51.610 A:middle L:90%
we did before here, and we define all the

113
00:06:51.720 --> 00:06:54.430 A:middle L:90%
props so you can use optional parameters are also whatever

114
00:06:54.680 --> 00:06:57.600 A:middle L:90%
you want, and then we pass it into react

115
00:06:57.959 --> 00:07:01.410 A:middle L:90%
Fc. So basically this component is a component without

116
00:07:01.709 --> 00:07:03.750 A:middle L:90%
any props. If you add props, you just

117
00:07:04.019 --> 00:07:04.339 A:middle L:90%
add them here.

