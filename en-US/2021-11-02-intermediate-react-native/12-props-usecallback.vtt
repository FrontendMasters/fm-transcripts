WEBVTT

1
00:00:00.830 --> 00:00:05.292
Next up, recall that we can pass props
down to child components, for example,

2
00:00:05.292 --> 00:00:09.440
if we have a user, and the user's name
is Mary, we can pass Mary as a prop.

3
00:00:09.440 --> 00:00:13.376
And then it will show up here in
the structure from your component, and

4
00:00:13.376 --> 00:00:16.909
also because we are using TypeScript,
we can use User Probe and

5
00:00:16.909 --> 00:00:19.324
explicitly type Mary's name as a string.

6
00:00:23.005 --> 00:00:24.858
And a useCallback hook,
is a react hook for

7
00:00:24.858 --> 00:00:27.340
memorizing interactions
within a reaction opponents.

8
00:00:28.860 --> 00:00:33.110
Now next up, when we save a mood options,
you want to also record their timestamps.

9
00:00:33.110 --> 00:00:40.631
So let's create a new type for
the mood option with the timestamp.

10
00:00:40.631 --> 00:00:44.289
So let's open our types file and

11
00:00:44.289 --> 00:00:50.802
export another type called
mood option with timestamp.

12
00:00:50.802 --> 00:00:56.460
And this will have the mood
which will be of type,

13
00:00:56.460 --> 00:01:03.653
mood option type, and
the times stamp would just be a number.

14
00:01:10.979 --> 00:01:12.669
Next up in our home screen,

15
00:01:12.669 --> 00:01:16.790
we want to use a used data variable
to actually store our mode list.

16
00:01:19.190 --> 00:01:23.526
So let's in our screens,
let's find the home screen.

17
00:01:27.078 --> 00:01:29.350
And let's create a used state variable.

18
00:01:29.350 --> 00:01:34.596
So we'll do const moodList, setMoodList,

19
00:01:34.596 --> 00:01:38.875
and we'll do React .useState, and

20
00:01:38.875 --> 00:01:42.890
we'll start with an empty right.

21
00:01:45.600 --> 00:01:49.599
Again we need to tell moodList
what type this is, so

22
00:01:49.599 --> 00:01:54.900
we can do it by passing a moodList
mood option with timestamp array.

23
00:01:54.900 --> 00:01:57.177
As the type to useState, so

24
00:01:57.177 --> 00:02:02.532
now when I hover over moodList is
going to tell me what type it is.

25
00:02:11.411 --> 00:02:14.447
Next up,
we want to add a useCallback hook,

26
00:02:14.447 --> 00:02:17.005
to handle when you select a new mode.

27
00:02:17.005 --> 00:02:21.614
So in the home file in the home screen,

28
00:02:21.614 --> 00:02:26.227
let's do const handleSelectMood and

29
00:02:26.227 --> 00:02:30.420
we'll do a React.useCallback.

30
00:02:32.720 --> 00:02:38.003
And then this will have the selected mood,

31
00:02:38.003 --> 00:02:42.270
which will be of type moodOption.

32
00:02:49.792 --> 00:02:51.390
Empty dependencies you are right for now.

33
00:02:51.390 --> 00:02:54.666
I will just do setMoodList and
remember for

34
00:02:54.666 --> 00:02:59.489
useState variables,
you can pass in either the new variable,

35
00:02:59.489 --> 00:03:03.590
or we can pass in a function
takes in the current ones.

36
00:03:05.100 --> 00:03:12.030
So current list, and we can append our
selected mood to the current list.

37
00:03:12.030 --> 00:03:14.820
So we'll return current.

38
00:03:14.820 --> 00:03:21.599
So will the current and we'll also
need to add the timestamp to our mood,

39
00:03:21.599 --> 00:03:26.268
so we'll do mood,
which is this selected mood and

40
00:03:26.268 --> 00:03:29.950
timestamp, which will be Date.now.

41
00:03:31.820 --> 00:03:36.660
And notice that I actually forgot that we
created this moodOption, with a timestamp.

42
00:03:36.660 --> 00:03:39.610
And because PostScript I immediately
knew that I messed up, so

43
00:03:39.610 --> 00:03:41.290
that saved me some debugging time.

44
00:03:44.570 --> 00:03:48.159
Now let's pass handleSelectMood
into our MoodPicker.

45
00:03:51.571 --> 00:03:58.240
And if we open our MoodPicker,
this is now a property of MoodPicker.

46
00:03:58.240 --> 00:04:00.590
So we'll create a type for the props.

47
00:04:00.590 --> 00:04:05.392
So we'll do type MoodPickerProps equals,
and

48
00:04:05.392 --> 00:04:09.030
we'll do handleSelectMood.

49
00:04:09.030 --> 00:04:12.352
So this takes in the mood,

50
00:04:12.352 --> 00:04:17.490
which will be off type MoodOptionType.

51
00:04:20.600 --> 00:04:24.392
I think this was MoodOption, and

52
00:04:24.392 --> 00:04:29.142
then it returns nothing, so we use void.

53
00:04:29.142 --> 00:04:33.981
Now we'll pass this type into React.FC.

54
00:04:33.981 --> 00:04:40.206
And we can also D structure,
handleSelectMood from here, and

55
00:04:40.206 --> 00:04:46.078
now on our button so our Choose button,
we can do OnPress and

56
00:04:46.078 --> 00:04:51.140
we'll do handleSelectMood,
and we'll pass in.

57
00:04:55.084 --> 00:04:58.940
Select the mood, okay.

58
00:04:58.940 --> 00:05:02.195
Now this is telling me that argument
with type MoodOptionType or

59
00:05:02.195 --> 00:05:05.570
undefined is not assignable
primary to MoodOptionType.

60
00:05:05.570 --> 00:05:07.861
And this is because this
function is saying,

61
00:05:07.861 --> 00:05:12.340
okay, we definitely need a MoodOption, but
notice that selected could be undefined.

62
00:05:12.340 --> 00:05:16.104
So this is another thing with TypeScript
tells me that, okay ,what about if someone

63
00:05:16.104 --> 00:05:19.620
calls this function, but SelectedMood
is undefined, what should I do then?

64
00:05:21.450 --> 00:05:26.346
So I'm actually going to pull
this out to a useCallback,

65
00:05:26.346 --> 00:05:29.513
so, let's, well, actually not.

66
00:05:31.763 --> 00:05:37.016
So, we can do is here we'll turn
this into a proper function,

67
00:05:42.931 --> 00:05:47.761
And we'll do, if selected so if this is
not undefined, only then we'll call it and

68
00:05:47.761 --> 00:05:51.082
notice the TypeScript now
knows that this is undefined.

69
00:05:51.082 --> 00:05:55.679
This is not going to be undefined in here
cuz it's passed this if statement and

70
00:05:55.679 --> 00:05:56.680
this will work.

71
00:05:58.305 --> 00:06:03.094
And lastly in our home,
let's also print out the MoodList just so

72
00:06:03.094 --> 00:06:05.195
we see what's being added.

73
00:06:05.195 --> 00:06:10.721
So let's import text, and
underneath the MoodPicker,

74
00:06:10.721 --> 00:06:14.306
let's just do MoodList.map item.

75
00:06:14.306 --> 00:06:18.221
And lets do Text and

76
00:06:18.221 --> 00:06:23.359
item.mood, and let's

77
00:06:23.359 --> 00:06:28.754
also add the timestamps.

78
00:06:28.754 --> 00:06:33.933
Let's do item.timestamp,
it's called new date on it,

79
00:06:33.933 --> 00:06:39.111
cuz it's just going to be a number,
and then we need to also

80
00:06:39.111 --> 00:06:45.050
call to string to string so
it will be something that we can look at.

81
00:06:47.370 --> 00:06:50.825
And let's add a key to text so
whenever you map over anything,

82
00:06:50.825 --> 00:06:52.700
you need to add in a key.

83
00:06:52.700 --> 00:06:57.733
So we'll do item.timestamp,
so item.mood is an object,

84
00:06:57.733 --> 00:07:00.705
so I need to do item.mood.emoji.

85
00:07:02.730 --> 00:07:07.721
There we go, so now when added,
you'll see that I'll get to the emoji and

86
00:07:07.721 --> 00:07:09.790
also the timestamp.

87
00:07:09.790 --> 00:07:13.059
So what we'd also like is
once you've selected a mood,

88
00:07:13.059 --> 00:07:15.450
it should deselect the background.

89
00:07:15.450 --> 00:07:18.519
So let's in the MoodPicker component,

90
00:07:18.519 --> 00:07:22.320
let's pull this on press
out into a useCallback.

91
00:07:22.320 --> 00:07:24.657
So let's do it, const

92
00:07:27.705 --> 00:07:32.405
Let me just check what I called it,
sorry, handleSelect.

93
00:07:35.520 --> 00:07:41.695
So, let's do const handleSelect
= React.useCallback.

94
00:07:47.853 --> 00:07:52.408
And let's copy this OnPress and

95
00:07:52.408 --> 00:07:56.630
select, so put that in here.

96
00:07:59.530 --> 00:08:04.769
So we'll set SelectedMood and
also let's set it to undefined so

97
00:08:04.769 --> 00:08:07.590
we'll unset the selectedState.

98
00:08:07.590 --> 00:08:12.018
So let's do, set SelectedMood and
undefined, and

99
00:08:12.018 --> 00:08:16.149
we'll also want to update
dependencies array.

100
00:08:19.754 --> 00:08:22.718
All right, so now when we select it,

101
00:08:22.718 --> 00:08:27.503
it will deselect the state
&gt;&gt; Can you please explain

102
00:08:27.503 --> 00:08:29.272
the use of useCallback here?

103
00:08:33.806 --> 00:08:38.573
&gt;&gt; So I tend to wrap all the functions
that are inside React components into

104
00:08:38.573 --> 00:08:41.774
useCallback,
&gt;&gt; Really therefore memorizing

105
00:08:41.774 --> 00:08:45.234
the functions, so that basically
obviously for React component.

106
00:08:45.234 --> 00:08:48.749
Every time something changes,
like instantly React components or

107
00:08:48.749 --> 00:08:51.910
props change,
then the whole component gets run.

108
00:08:51.910 --> 00:08:56.224
So if you have a bunch of things here,
a bunch of functions, every single

109
00:08:56.224 --> 00:09:00.920
function that you have gets re initialized
if you're using arrow functions.

110
00:09:00.920 --> 00:09:05.657
So for useCallback and use my own all of
those hooks like the purpose of them,

111
00:09:05.657 --> 00:09:10.556
is that if none of these dependencies
changed, then don't re initialize it.

112
00:09:10.556 --> 00:09:13.407
So when you have lots
of complicated things,

113
00:09:13.407 --> 00:09:16.040
it will just be a performance enhancement

