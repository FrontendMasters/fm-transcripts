WEBVTT

1
00:00:00.280 --> 00:00:02.964
They're media queries, so
you can size up fonts for

2
00:00:02.964 --> 00:00:05.065
like tablet display that kind of thing.

3
00:00:05.065 --> 00:00:09.967
&gt;&gt; So there aren't media queries,
and the way you would size

4
00:00:09.967 --> 00:00:15.230
up fonts is that you would
use the size of your screen.

5
00:00:15.230 --> 00:00:20.425
So for example there is,
okay, so for example in this

6
00:00:20.425 --> 00:00:25.280
theme file, for example,
if you did font sizes.

7
00:00:25.280 --> 00:00:30.497
So something that I always do,
font sizes for

8
00:00:30.497 --> 00:00:36.967
my apps is I will do font size 14,
just 14 etcetera.

9
00:00:36.967 --> 00:00:42.159
So you would have really I
think eight is kind of small

10
00:00:42.159 --> 00:00:48.531
waist smaller she would go to do 8 12,
14 16, etcetera.

11
00:00:48.531 --> 00:00:53.027
And then if you were on a larger device,

12
00:00:53.027 --> 00:00:57.400
what you could do, is you could import

13
00:01:00.870 --> 00:01:08.005
Dimensions from react native, and
then you can use these dimensions.

14
00:01:08.005 --> 00:01:10.920
So for example okay so you do const.

15
00:01:14.871 --> 00:01:17.751
Screen width is dimensions, get.

16
00:01:17.751 --> 00:01:22.581
well so you can use a this window screen.

17
00:01:22.581 --> 00:01:27.073
I think Windows, is better to be honest.

18
00:01:27.073 --> 00:01:30.950
And so so
this is where you get the scale as well.

19
00:01:30.950 --> 00:01:32.600
So you got pixel density.

20
00:01:32.600 --> 00:01:38.250
And actually it comes with a font scale,
which I think is a user defined property.

21
00:01:38.250 --> 00:01:41.193
So you could use this to
like choose the right font,

22
00:01:41.193 --> 00:01:44.142
that you would need for
your particular platform.

23
00:01:49.680 --> 00:01:52.528
And then basically like
in your theme objects,

24
00:01:52.528 --> 00:01:54.946
when you define it you could say okay, so

25
00:01:54.946 --> 00:01:59.590
depending on the properties of the user
device, make these like different.

26
00:01:59.590 --> 00:02:03.989
So even though it's font size eight,
so say that you're a tablet,

27
00:02:03.989 --> 00:02:07.863
it would be like eight times,
1.2, or something that.

28
00:02:07.863 --> 00:02:12.927
So you scale it up in your theme file, and
that's the benefit of having a theme file.

29
00:02:12.927 --> 00:02:14.960
Because you change it in one place, and

30
00:02:14.960 --> 00:02:17.430
then your whole app will
scale automatically.

31
00:02:22.540 --> 00:02:26.005
And just in case you didn't know,

32
00:02:26.005 --> 00:02:30.904
if you ever need to reference,
the screen size,

33
00:02:30.904 --> 00:02:36.660
there is a hook,
which is called use window dimensions.

34
00:02:38.270 --> 00:02:43.070
So this is from React Native, and
this basically gives you the width and

35
00:02:43.070 --> 00:02:44.594
height of the window.

36
00:02:44.594 --> 00:02:50.676
So for example for some reason you need
to know exactly how big the screen is,

37
00:02:50.676 --> 00:02:54.395
and then like size your
content accordingly.

38
00:02:54.395 --> 00:02:59.628
You can use this as a hook, and this is
equivalent of importing dimensions from

39
00:02:59.628 --> 00:03:04.562
React Native, and doing dimensions
get Window.height, or dot width.

40
00:03:04.562 --> 00:03:08.895
But the benefit is that it's a hook,
which means that if, for example,

41
00:03:08.895 --> 00:03:12.588
your user rotates their phone,
which means that the width and

42
00:03:12.588 --> 00:03:16.560
height become inverted,
this would know about it in wood fire.

43
00:03:16.560 --> 00:03:18.063
And then would automatically update.

44
00:03:18.063 --> 00:03:21.590
&gt;&gt; Is there any way to set global styles?

45
00:03:21.590 --> 00:03:23.040
&gt;&gt; I'm glad you asked that.

46
00:03:23.040 --> 00:03:29.500
So what I do, almost always,
[LAUGH] is basically in components.

47
00:03:29.500 --> 00:03:31.840
I would create a text component.

48
00:03:31.840 --> 00:03:36.428
So usually it would be like
whatever the app is called text, so

49
00:03:36.428 --> 00:03:38.380
I don't know hypertext.

50
00:03:40.460 --> 00:03:44.699
And then this component would
have the font style done,

51
00:03:44.699 --> 00:03:47.410
would have the font style applied.

52
00:03:47.410 --> 00:03:53.653
So for example, you do react from react.

53
00:03:53.653 --> 00:03:58.210
And then export const app text.

54
00:04:08.484 --> 00:04:14.060
Cool and then this will return a text.

55
00:04:14.060 --> 00:04:17.971
And then this should act exactly
like your normal text word.

56
00:04:20.834 --> 00:04:26.634
So just pass in the text children,

57
00:04:26.634 --> 00:04:30.438
so import text [COUGH].

58
00:04:37.720 --> 00:04:43.306
Okay, and then this would have
a font style applied to it,

59
00:04:43.306 --> 00:04:46.389
and then you can also add props.

60
00:04:46.389 --> 00:04:49.760
You can have this, have the text props

61
00:04:54.761 --> 00:04:59.173
Select text, text base,

62
00:04:59.173 --> 00:05:02.588
okay, there we go.

63
00:05:02.588 --> 00:05:06.259
Text props I knew it was important.

64
00:05:06.259 --> 00:05:10.087
Okay, so
if you give this the text props, right?

65
00:05:10.087 --> 00:05:14.954
Then it will like any of
the properties that the text

66
00:05:14.954 --> 00:05:18.349
has like this could have as well, so

67
00:05:18.349 --> 00:05:23.570
you do children props, and
then apply it to your text.

68
00:05:28.200 --> 00:05:28.910
Right?

69
00:05:28.910 --> 00:05:33.854
And where the font comes in,
so if I do, AppText type, so

70
00:05:33.854 --> 00:05:39.519
this will be text props, and
that is how you can combine types, so

71
00:05:39.519 --> 00:05:45.000
you want to use all the types of
text was going to have, anyway.

72
00:05:45.000 --> 00:05:48.330
And then some custom types.

73
00:05:48.330 --> 00:05:52.349
And then here you can set a font family.

74
00:05:56.121 --> 00:06:04.228
And here, I would usually use an old one,
so you could do bold, regular.

75
00:06:04.228 --> 00:06:08.048
Italic.

76
00:06:10.342 --> 00:06:11.183
Right?

77
00:06:11.183 --> 00:06:13.111
So the component where you use it,

78
00:06:13.111 --> 00:06:16.316
it doesn't need to know what
exactly the font is called.

79
00:06:16.316 --> 00:06:19.427
Cuz really in a component you wanna know,
okay, is it bold, is it regularly,

80
00:06:19.427 --> 00:06:20.470
is it italic?.

81
00:06:20.470 --> 00:06:26.102
Or if you have two kinds of fonts, I think
most apps have like two different fonts.

82
00:06:26.102 --> 00:06:31.130
So one will be for one sensor effect and
it's pretty common.

83
00:06:31.130 --> 00:06:36.098
Then you could say like like which
style it is, depending on your app.

84
00:06:36.098 --> 00:06:42.720
And then you could use the font family
here, well you basically pass in a style.

85
00:06:45.250 --> 00:06:49.780
Which so would need to extend
the styles that you get.

86
00:06:54.640 --> 00:06:56.050
Start with this.

87
00:07:00.224 --> 00:07:04.657
Come on, okay, yeah so

88
00:07:04.657 --> 00:07:08.210
you would need to.

89
00:07:11.171 --> 00:07:13.638
Know I'd seen, cool.

90
00:07:13.638 --> 00:07:16.634
Yeah, so here because the user,

91
00:07:16.634 --> 00:07:22.310
you could set extra styles on this text,
need to pass in style.

92
00:07:22.310 --> 00:07:27.522
But then as well as the style,
you could say that if.

93
00:07:31.156 --> 00:07:33.620
Like font family would be like.

94
00:07:35.370 --> 00:07:37.130
Fontstyle.

95
00:07:38.895 --> 00:07:41.340
React useMemo.

96
00:07:43.093 --> 00:07:48.531
And then you could get the actual font

97
00:07:48.531 --> 00:07:56.076
style based on the font
family that user passed in,

98
00:07:56.076 --> 00:08:00.826
so if one family equals to bold.

99
00:08:03.615 --> 00:08:04.935
Turn.

100
00:08:07.724 --> 00:08:10.073
Fontfamily.

101
00:08:12.167 --> 00:08:13.330
Theme.

102
00:08:13.330 --> 00:08:18.351
My autocomplete isn't
working all the time,

103
00:08:18.351 --> 00:08:21.196
it's very frustrating.

104
00:08:21.196 --> 00:08:24.853
So import theme.

105
00:08:32.006 --> 00:08:32.954
Theme.

106
00:08:32.954 --> 00:08:35.484
So theme dot.

107
00:08:35.484 --> 00:08:37.101
BLANK_AUDIO].

108
00:08:37.101 --> 00:08:40.370
Font can be bold.

109
00:08:42.320 --> 00:08:47.816
And then you could

110
00:08:47.816 --> 00:08:56.250
apply the font style here.

111
00:09:02.270 --> 00:09:03.038
So it depends here.

112
00:09:03.038 --> 00:09:07.941
Right, so effectually like this is
on high level how it would work, and

113
00:09:07.941 --> 00:09:12.943
then usually I would add all the different
properties that I would need.

114
00:09:12.943 --> 00:09:14.011
So for example,

115
00:09:14.011 --> 00:09:18.370
for the size, like, I would set
the sizes that I support in the app.

116
00:09:18.370 --> 00:09:22.677
So I can say you can only do eight, or

117
00:09:22.677 --> 00:09:26.400
10, or 12, etcetera.

118
00:09:26.400 --> 00:09:30.530
So this kind of gives you an API for
like all the valid things I would do,

119
00:09:30.530 --> 00:09:33.766
font family, size, color,
like anything you need.

120
00:09:33.766 --> 00:09:39.577
So then in your app when you use text,
rather than using a text element and

121
00:09:39.577 --> 00:09:43.470
style it, then you would use the app text.

122
00:09:43.470 --> 00:09:46.739
And then basically,
it would work the same way,

123
00:09:46.739 --> 00:09:50.184
you would pass in just the text and
the properties.

124
00:09:50.184 --> 00:09:54.414
Yeah, and then a goal of for
me for this text element,

125
00:09:54.414 --> 00:09:58.460
is that you would never need
to pass a style into it.

126
00:09:58.460 --> 00:10:02.711
So the idea is that if you
were to use your App Text,

127
00:10:02.711 --> 00:10:08.376
AppText All right,

128
00:10:08.376 --> 00:10:14.043
so then I could do font family bold,
see that when I did font family, it gives

129
00:10:14.043 --> 00:10:19.822
me all the options which is super handy,
I don't need to go to any other file.

130
00:10:19.822 --> 00:10:23.980
And also size, identify some style, size.

131
00:10:23.980 --> 00:10:27.310
But the idea is here that
you should never, ideally,

132
00:10:27.310 --> 00:10:30.868
you don't have to pass in any
other styles for this text.

133
00:10:30.868 --> 00:10:35.600
So your one and only AppText will
have all the different variants.

