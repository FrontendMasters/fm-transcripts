WEBVTT

1
00:00:00.620 --> 00:00:04.516
There are two ways,
to really animate your UI in React Native.

2
00:00:04.516 --> 00:00:08.587
You can either define the exact animation
that you need to do yourself, or

3
00:00:08.587 --> 00:00:11.092
you can let layout
animation do all the work.

4
00:00:11.092 --> 00:00:15.751
So, layout animation, I was really excited
when I discovered that animation is

5
00:00:15.751 --> 00:00:18.845
incredibly powerful, but
it's not very flexible.

6
00:00:18.845 --> 00:00:21.836
Basically it works by somewhat magically

7
00:00:21.836 --> 00:00:26.628
animating your app from the current
state of the UI to the next one.

8
00:00:26.628 --> 00:00:32.171
So basically after you trigger the layout
animation, the next UI update that

9
00:00:32.171 --> 00:00:37.297
happens in your app, will automatically
animate UI to the next state.

10
00:00:37.297 --> 00:00:42.445
The downside of this is that, it's not
flexible at all, and you can't choose

11
00:00:42.445 --> 00:00:47.284
to do a layout animation on just one
element, it's kinda all or nothing.

12
00:00:47.284 --> 00:00:51.033
So, in most cases you will probably
end up writing your own animation, but

13
00:00:51.033 --> 00:00:54.009
the animation is kind of handy
if you want something quick,

14
00:00:54.009 --> 00:00:57.900
because it's often it's still a lot
better than having no animation at all.

15
00:01:07.566 --> 00:01:09.474
Okay, so first thing we want to do.

16
00:01:09.474 --> 00:01:11.579
Basically what we're going to do,

17
00:01:11.579 --> 00:01:16.505
is we're going to use layout animation to
animate the list when you remove an item.

18
00:01:16.505 --> 00:01:19.682
So the first thing we need to do for that,

19
00:01:19.682 --> 00:01:23.522
is we need to add the delete
mood functionality.

20
00:01:23.522 --> 00:01:26.420
So let's open our app provider.

21
00:01:28.684 --> 00:01:33.074
And let's now add a another function
here called handle delete mood.

22
00:01:38.078 --> 00:01:44.592
And this will be a React usecallback,
and this takes in.

23
00:01:44.592 --> 00:01:51.830
So we deleted we have the mood
option with this the timestamp.

24
00:01:51.830 --> 00:01:54.472
So moodoption.

25
00:01:58.329 --> 00:02:02.953
Is called mood, and
this will be a mood option with timestamp.

26
00:02:02.953 --> 00:02:06.311
[COUGH]

27
00:02:13.509 --> 00:02:14.467
All right, and

28
00:02:14.467 --> 00:02:16.241
now we want to set moodlist.

29
00:02:23.985 --> 00:02:26.909
We take the current.

30
00:02:28.484 --> 00:02:33.839
And we want to do the new mood list,

31
00:02:33.839 --> 00:02:38.640
which is the current list, and

32
00:02:38.640 --> 00:02:41.602
we need to filter.

33
00:02:45.864 --> 00:02:50.739
And this is a mood [COUGH] and
we can use the timestamp to filter it,

34
00:02:50.739 --> 00:02:53.554
because timestamps will be unique.

35
00:02:53.554 --> 00:02:57.008
You can't ever go back in timestamps.

36
00:02:57.008 --> 00:03:02.437
And we'll do, if mood,
thought timestamp is not.

37
00:03:04.696 --> 00:03:06.362
What's this called again?

38
00:03:06.362 --> 00:03:09.387
Always call this something else,
still value.

39
00:03:09.387 --> 00:03:17.379
[COUGH] The value that timestamp
is not mood dot timestamp.

40
00:03:17.379 --> 00:03:23.273
So for filter, if this is true, we keep
it, so we want to get rid of this one.

41
00:03:26.885 --> 00:03:29.697
And we also need to update the Appdata.

42
00:03:29.697 --> 00:03:34.257
So we'll do set Appdata
just to make sure that

43
00:03:34.257 --> 00:03:38.827
our persisted state will
be updated as well.

44
00:03:38.827 --> 00:03:42.386
So we'll do mood list and

45
00:03:42.386 --> 00:03:47.987
new mood list, and turn new mood list.

46
00:03:49.807 --> 00:03:55.435
All right, this looks right to me.

47
00:03:55.435 --> 00:03:58.856
And let's also pass it down our context,
so

48
00:03:58.856 --> 00:04:03.301
this will make it available for
other components to use.

49
00:04:03.301 --> 00:04:09.092
So if we go here to App context,
we'll add a type for that.

50
00:04:09.092 --> 00:04:11.997
So the default for

51
00:04:11.997 --> 00:04:16.846
this will be a mood to delete.

52
00:04:16.846 --> 00:04:18.498
It should be a mood option with timestamp.

53
00:04:21.723 --> 00:04:25.458
Actually sorry,
this is not where the type is.

54
00:04:25.458 --> 00:04:31.220
Yeah so we need to go up here to
the context type to actually add the type,

55
00:04:31.220 --> 00:04:37.380
so handle delete mood will take mood,
which is mood option with timestamp.

56
00:04:37.380 --> 00:04:40.450
This is return maternity thing, and hey,

57
00:04:40.450 --> 00:04:44.384
we'll just add an empty
function as the placeholder.

58
00:04:44.384 --> 00:04:49.283
Cool, looks like TypeScript
is happy with me.

59
00:04:49.283 --> 00:04:54.032
So now let's go to the mood Item Row, and

60
00:04:54.032 --> 00:04:57.665
let's add a Delete button, so

61
00:04:57.665 --> 00:05:03.553
we'll add some more text,
and we'll do delete.

62
00:05:03.553 --> 00:05:10.493
This will have a stylestyles.deleteText

63
00:05:15.227 --> 00:05:22.129
This at the bottom.

64
00:05:22.129 --> 00:05:27.269
Family theme, fontFamilyBold,

65
00:05:27.269 --> 00:05:31.705
and let's make this purple.

66
00:05:31.705 --> 00:05:33.306
I have another color for it.

67
00:05:36.362 --> 00:05:37.934
I made this blue, okay.

68
00:05:37.934 --> 00:05:41.996
So color theme.fontFamily, colorBlue.

69
00:05:41.996 --> 00:05:48.701
Okay there we go, so
we got a Delete button.

70
00:05:48.701 --> 00:05:51.824
Now, to make this into an actual button,

71
00:05:51.824 --> 00:05:56.302
cuz right now it's text,
let's wrap this in a pressable.

72
00:06:04.656 --> 00:06:07.106
And one of the nice things about context,

73
00:06:07.106 --> 00:06:09.911
is we don't get access
to it just from screens.

74
00:06:09.911 --> 00:06:12.185
We can get access to
it from any component.

75
00:06:12.185 --> 00:06:14.884
So, we're going to import context here.

76
00:06:14.884 --> 00:06:19.434
We'll do const, appContext

77
00:06:19.434 --> 00:06:23.802
equals use appContext, and

78
00:06:23.802 --> 00:06:28.898
then hey on the pressable we can do

79
00:06:28.898 --> 00:06:33.994
unpress let's create a handle,

80
00:06:33.994 --> 00:06:40.182
Handle delete, react, use callback.

81
00:06:42.561 --> 00:06:45.130
And on press we're going
to call it handle Delete.

82
00:06:45.130 --> 00:06:47.601
I don't handle delete,
we're going to do our appContext.

83
00:06:51.747 --> 00:06:57.792
Delete mood, has delete mood who
pass in the item, this is from props

84
00:07:04.192 --> 00:07:07.312
So let's just check if this works.

85
00:07:08.800 --> 00:07:13.509
Yep, so this got deleted, but
obviously there's no animation yet.

86
00:07:13.509 --> 00:07:18.350
So the way we do animation is we use
layout animation from React Native,

87
00:07:18.350 --> 00:07:20.703
so we import it from React Native.

88
00:07:23.720 --> 00:07:29.157
And here in our use callback hook,
we do layout animation configure next

89
00:07:32.046 --> 00:07:37.696
And we pass in the configuration for
the actual layout transition.

90
00:07:37.696 --> 00:07:43.104
And there is a couple of presets,
so I always use the presets,

91
00:07:43.104 --> 00:07:46.855
animation presets, and ease in ease out.

92
00:07:46.855 --> 00:07:51.560
So let's just refresh this just incase.

93
00:07:51.560 --> 00:07:54.054
And now when I delete these moods,

94
00:07:54.054 --> 00:07:59.222
you can see that the rest of the list
slides up, which is pretty nice.

95
00:07:59.222 --> 00:08:04.867
We should make this into a scroll view,
so let's go to the history screen yeah so

96
00:08:04.867 --> 00:08:09.670
this is a view, so if you haven't
already you probably ahead of me,

97
00:08:09.670 --> 00:08:11.974
change this into a scroll view.

98
00:08:11.974 --> 00:08:15.389
So we can actually
scroll on our mood list.

99
00:08:15.389 --> 00:08:18.613
All right, so
currently when we add new moods,

100
00:08:18.613 --> 00:08:21.364
they get added to the bottom of the list.

101
00:08:21.364 --> 00:08:25.748
But really we would expect them
to show up at the very top.

102
00:08:25.748 --> 00:08:32.269
So to do that we can reverse our
mood list, so we just call reverse.

103
00:08:32.269 --> 00:08:35.767
On this array, it will reverse it, but

104
00:08:35.767 --> 00:08:39.901
this actually goes has
an interesting UI bug.

105
00:08:39.901 --> 00:08:41.936
So, if I delete this mood,

106
00:08:41.936 --> 00:08:46.107
we get this kind of transition
where it goes up and down.

107
00:08:46.107 --> 00:08:51.094
And I think that's because this
reverse is a mutating function, so

108
00:08:51.094 --> 00:08:56.706
it actually mutates this mood list and
reverses it, and then we map over it.

109
00:08:56.706 --> 00:08:59.668
So what we can actually do is we can,
create a copy of it.

110
00:08:59.668 --> 00:09:07.065
So if you call dot splice on it first,
was splice.

111
00:09:07.065 --> 00:09:10.406
So if you call mood list dot slice,
and then reverse,

112
00:09:10.406 --> 00:09:14.505
then he creates a copy of it and
we don't get this weird UI effect.

113
00:09:18.345 --> 00:09:22.286
Now when we add a new mood,
it gets added at the top of our list.

114
00:09:22.286 --> 00:09:25.971
So one thing about layout animations,
is that they are still and

115
00:09:25.971 --> 00:09:29.672
have forever been for years and
years experimental on Android.

116
00:09:29.672 --> 00:09:32.472
So if you want to enable these on Android,

117
00:09:32.472 --> 00:09:36.720
you need to explicitly set
the animation enabled flag to true.

118
00:09:36.720 --> 00:09:41.940
So if you copy this piece of code and

119
00:09:41.940 --> 00:09:48.610
open app dot TSX, and
then just paste it in.

120
00:09:48.610 --> 00:09:51.526
So basically what this does, it goes.

121
00:09:51.526 --> 00:09:55.504
It's imposed platform for
React Native, and

122
00:09:55.504 --> 00:10:01.626
he goes if you're on Android, and
this option exists, set it to true.

123
00:10:02.807 --> 00:10:08.022
Now, since I have an Android phone here,
let's see if this works.

124
00:10:18.717 --> 00:10:21.198
We'll go ahead and hit Delete.

125
00:10:21.198 --> 00:10:21.831
There we go.

126
00:10:21.831 --> 00:10:22.967
It slides closed, beautiful.

127
00:10:26.808 --> 00:10:32.754
So one thing that I have found on Android,
is that layout animation sometimes doesn't

128
00:10:32.754 --> 00:10:38.130
work when you have a scroll view, and
the contents of the scroll view changes,

129
00:10:38.130 --> 00:10:42.946
there's something about keys and
within scroll view that can error.

130
00:10:42.946 --> 00:10:46.224
So that's why you need
to kind of watch out for

131
00:10:46.224 --> 00:10:48.649
it on Android to make sure it works

