WEBVTT

1
00:00:00.179 --> 00:00:04.633
Can you ask her the main important things
that she would consider when trying to

2
00:00:04.633 --> 00:00:08.279
build a scalable app as far as
like implementing new features and

3
00:00:08.279 --> 00:00:09.106
a bigger app?

4
00:00:09.106 --> 00:00:14.566
&gt;&gt; I think the the core thing to think
about is your folder structure and,

5
00:00:16.013 --> 00:00:21.157
setting up your app layout to scale,
if that makes sense?

6
00:00:21.157 --> 00:00:24.352
So for example, these things here,
so technically,

7
00:00:24.352 --> 00:00:28.657
I could have [INAUDIBLE] a navigation,
Technically I could have just added

8
00:00:28.657 --> 00:00:31.444
everything in one app TSX
it would have worked.

9
00:00:31.444 --> 00:00:37.407
So the reason for pulling all of these out
so each screen has its own component and

10
00:00:37.407 --> 00:00:41.949
each Navigator has its own
component is to make it scalable.

11
00:00:41.949 --> 00:00:46.570
So that in a production app, so
in my current app that I'm building,

12
00:00:46.570 --> 00:00:49.638
we have maybe 30 screens, or even more.

13
00:00:49.638 --> 00:00:52.297
And because each of them
have their own screen,

14
00:00:52.297 --> 00:00:54.785
it's easy to navigate between them.

15
00:00:54.785 --> 00:00:59.579
And say for components kind of having
conventions in your code base is super,

16
00:00:59.579 --> 00:01:00.771
super important.

17
00:01:00.771 --> 00:01:03.783
So one of the things for
me is for components,

18
00:01:03.783 --> 00:01:08.721
I like to have the component
directory as flat as possible.

19
00:01:08.721 --> 00:01:12.914
So there's no nesting of like,
these are UI components or

20
00:01:12.914 --> 00:01:15.230
like these are text components.

21
00:01:15.230 --> 00:01:18.518
So These are button components
is completely flat, So

22
00:01:18.518 --> 00:01:21.377
if someone gets on boarded
onto your code base,

23
00:01:21.377 --> 00:01:26.531
they can just look at these components and
they know like, what's what's going on.

24
00:01:26.531 --> 00:01:31.494
In terms of like scalability for,
like performance,

25
00:01:32.566 --> 00:01:36.625
There's performance tracking tools on iOS,
on Xcode and Android.

26
00:01:36.625 --> 00:01:42.094
They can help you track down memory
leaks and long running processes

27
00:01:42.094 --> 00:01:46.757
In terms of data management
where things with context in

28
00:01:46.757 --> 00:01:51.651
particular, is.

29
00:01:51.651 --> 00:01:56.494
Basically, context will like,
all the components that listen

30
00:01:56.494 --> 00:02:00.440
to your context,
when this context value changes,

31
00:02:00.440 --> 00:02:05.293
all of these components that
are listening to it will rerender.

32
00:02:05.293 --> 00:02:09.747
So you need to be kind of weary
when using context of only wrapping

33
00:02:09.747 --> 00:02:13.385
the context around the parts
of the app that need it.

34
00:02:13.385 --> 00:02:21.070
But also it's better to have lots of
small contexts than one huge one, Right?

35
00:02:21.070 --> 00:02:26.547
So for example usually you'd have
a context ,provided just for

36
00:02:26.547 --> 00:02:30.113
theming or just for authentication.

37
00:02:30.113 --> 00:02:36.115
So even though in app,
in your main entry point, it might

38
00:02:36.115 --> 00:02:41.433
create this pyramid layout which people
like joking about from a performance

39
00:02:41.433 --> 00:02:46.939
point of view that's better than having
one context that has everything in it.

