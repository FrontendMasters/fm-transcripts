WEBVTT

1
00:00:00.340 --> 00:00:03.080 A:middle L:90%
let's move on to navigation first, workshop we're going

2
00:00:03.200 --> 00:00:05.990 A:middle L:90%
to use bottom navigation. So firstly let's just install

3
00:00:06.629 --> 00:00:09.230 A:middle L:90%
the navigation library. So this installs quite a few

4
00:00:09.539 --> 00:00:12.080 A:middle L:90%
packages. So I'm going to copy this line,

5
00:00:12.779 --> 00:00:18.239 A:middle L:90%
open the terminal and run it. So just to

6
00:00:18.309 --> 00:00:20.850 A:middle L:90%
go through what this is going to install. So

7
00:00:21.320 --> 00:00:23.579 A:middle L:90%
we're going to use react navigation in the world of

8
00:00:23.660 --> 00:00:25.600 A:middle L:90%
react native, you can pretty much use react navigation

9
00:00:26.170 --> 00:00:29.320 A:middle L:90%
or react native navigation. Uh personally I prefer react

10
00:00:29.530 --> 00:00:32.259 A:middle L:90%
navigation because I've used it before. And also that's

11
00:00:32.500 --> 00:00:34.780 A:middle L:90%
the one that's pre built into expo So if you

12
00:00:34.850 --> 00:00:36.649 A:middle L:90%
use extra before you will be familiar with this one

13
00:00:38.939 --> 00:00:42.869 A:middle L:90%
and react navigation. They are a mono repo with

14
00:00:43.219 --> 00:00:45.630 A:middle L:90%
multiple packages just so you wouldn't have to, for

15
00:00:45.689 --> 00:00:47.929 A:middle L:90%
example, if you only use bottom navigation, you

16
00:00:48.229 --> 00:00:50.469 A:middle L:90%
wouldn't also have to insource talk navigators. So it's

17
00:00:50.579 --> 00:00:52.880 A:middle L:90%
just to keep your bundle size small. So this

18
00:00:53.030 --> 00:00:55.520 A:middle L:90%
is why there's so many libraries then we have natural

19
00:00:55.859 --> 00:00:58.729 A:middle L:90%
cognitive screens, which is an um, which is

20
00:00:58.810 --> 00:01:01.060 A:middle L:90%
a library for managing the actual screens. And it's

21
00:01:01.240 --> 00:01:03.670 A:middle L:90%
, it's called built in optimizations to make sure it's

22
00:01:04.159 --> 00:01:08.140 A:middle L:90%
um as optimal as possible on mobile devices. Then

23
00:01:08.310 --> 00:01:11.319 A:middle L:90%
we have react native safe area context. And this

24
00:01:11.409 --> 00:01:13.590 A:middle L:90%
is the library that basically allows you to know what

25
00:01:13.769 --> 00:01:16.209 A:middle L:90%
kind of insects there are on a device. So

26
00:01:16.579 --> 00:01:18.420 A:middle L:90%
for example on an iphone X. You have an

27
00:01:18.680 --> 00:01:20.780 A:middle L:90%
inset at the top and the bottom or most android

28
00:01:21.090 --> 00:01:22.510 A:middle L:90%
phones, you don't have an inset at the bottom

29
00:01:22.829 --> 00:01:27.489 A:middle L:90%
etcetera. And lastly we're also going to add the

30
00:01:27.849 --> 00:01:30.349 A:middle L:90%
bottom tabs, library. So this is the specific

31
00:01:30.799 --> 00:01:32.730 A:middle L:90%
library we need, we need to use to add

32
00:01:33.019 --> 00:01:38.329 A:middle L:90%
bottom tabs to application. Now, if you're building

33
00:01:38.670 --> 00:01:41.299 A:middle L:90%
an android app, there's some additional native code that

34
00:01:41.430 --> 00:01:43.409 A:middle L:90%
you need to add. Not a lot, but

35
00:01:43.769 --> 00:01:47.040 A:middle L:90%
I did say that this might happen. So if

36
00:01:47.239 --> 00:01:49.879 A:middle L:90%
you go to android app source main java mood tracker

37
00:01:50.439 --> 00:01:52.280 A:middle L:90%
and the main activity. So this is the main

38
00:01:52.549 --> 00:01:56.730 A:middle L:90%
entry point for application and copy these lines of code

39
00:01:57.290 --> 00:02:04.180 A:middle L:90%
. So let's go android sauce main java main activity

40
00:02:06.840 --> 00:02:09.520 A:middle L:90%
. And we need to add this just underneath underneath

41
00:02:10.319 --> 00:02:16.020 A:middle L:90%
our existing component name function and we also need to

42
00:02:16.129 --> 00:02:19.460 A:middle L:90%
import this bundle library and add it to the top

43
00:02:23.840 --> 00:02:26.539 A:middle L:90%
. Cool, so for I o s remember on

44
00:02:26.729 --> 00:02:30.729 A:middle L:90%
android android kind of handles all the dependencies automatically on

45
00:02:31.169 --> 00:02:33.750 A:middle L:90%
IOS me to explicitly installed them. So if you

46
00:02:33.849 --> 00:02:36.310 A:middle L:90%
open a terminal, good to see D I R

47
00:02:36.479 --> 00:02:45.599 A:middle L:90%
s and part in store and you actually see that

48
00:02:45.810 --> 00:02:48.159 A:middle L:90%
it's saying what's it's installing. So these are the

49
00:02:48.280 --> 00:02:50.879 A:middle L:90%
libraries which we've just installed that have native dependencies.

50
00:02:51.680 --> 00:02:57.069 A:middle L:90%
So there's usually a pot file um there's usually a

51
00:02:57.139 --> 00:02:59.780 A:middle L:90%
pot file in these libraries repositories that will, that

52
00:02:59.930 --> 00:03:04.360 A:middle L:90%
will list which dependencies they rely on. Now we

53
00:03:04.479 --> 00:03:07.810 A:middle L:90%
go C d back into our main directory and the

54
00:03:07.879 --> 00:03:09.900 A:middle L:90%
last thing, whenever you add anything that has native

55
00:03:10.139 --> 00:03:12.879 A:middle L:90%
dependencies, we will also need to rebuild our app

56
00:03:13.400 --> 00:03:15.080 A:middle L:90%
. So you can do this via X code or

57
00:03:16.129 --> 00:03:22.340 A:middle L:90%
you can or you can do john Eyles. All

58
00:03:22.490 --> 00:03:25.719 A:middle L:90%
right, we have successfully rebuilt the app now is

59
00:03:25.819 --> 00:03:28.229 A:middle L:90%
still the same for android. So again on android

60
00:03:28.620 --> 00:03:35.439 A:middle L:90%
, you can either run yarn android. We can

61
00:03:35.580 --> 00:03:39.229 A:middle L:90%
always do it from Andrew's studio in this case I'm

62
00:03:39.400 --> 00:03:41.710 A:middle L:90%
going to run on android. So one thing to

63
00:03:41.830 --> 00:03:44.250 A:middle L:90%
note is that once you've built native bundle, you

64
00:03:44.509 --> 00:03:47.490 A:middle L:90%
don't actually need to have this process running all the

65
00:03:47.590 --> 00:03:51.139 A:middle L:90%
time in your editor because like the native bundle will

66
00:03:51.509 --> 00:03:53.550 A:middle L:90%
stay the same unless it's changed and we're not going

67
00:03:53.710 --> 00:03:55.139 A:middle L:90%
to be changing any of the native code. So

68
00:03:55.560 --> 00:03:58.919 A:middle L:90%
that's why I can pause this execution on X code

69
00:03:59.199 --> 00:04:01.159 A:middle L:90%
and on android studio and then just run the cli

70
00:04:01.599 --> 00:04:05.139 A:middle L:90%
tool which builds the app once installs it and then

71
00:04:05.300 --> 00:04:07.759 A:middle L:90%
exits. So I'm doing this just to save a

72
00:04:07.870 --> 00:04:13.189 A:middle L:90%
little bit of my computer's memory. Oh, interesting

73
00:04:13.639 --> 00:04:17.259 A:middle L:90%
. So it worked through android studio but not via

74
00:04:17.470 --> 00:04:19.680 A:middle L:90%
terminal. So it could be that it just hadn't

75
00:04:20.420 --> 00:04:25.519 A:middle L:90%
had the time to download the dependencies. Well regardless

76
00:04:26.259 --> 00:04:27.389 A:middle L:90%
let's move on. We have both the apps.

77
00:04:27.970 --> 00:04:29.779 A:middle L:90%
Cool. So we got android and we got eyes

78
00:04:30.839 --> 00:04:35.100 A:middle L:90%
. Cool. So before we do before we do

79
00:04:35.209 --> 00:04:37.379 A:middle L:90%
anything. So this is a plain react native template

80
00:04:37.959 --> 00:04:40.230 A:middle L:90%
. I'm just going to make a couple of super

81
00:04:40.579 --> 00:04:42.949 A:middle L:90%
quick adjustments. So firstly we're not going to be

82
00:04:43.259 --> 00:04:47.149 A:middle L:90%
using tests in this course um maybe in another course

83
00:04:48.029 --> 00:04:50.439 A:middle L:90%
. So I'm going to delete the test directory personally

84
00:04:51.060 --> 00:04:53.199 A:middle L:90%
when I write tests. I prefer to write a

85
00:04:53.250 --> 00:04:56.149 A:middle L:90%
test. Put the test next to the thing that

86
00:04:56.269 --> 00:04:59.829 A:middle L:90%
we're testing anyway. But I digress and your thing

87
00:05:00.139 --> 00:05:03.660 A:middle L:90%
is in tears conflict. Um, there is a

88
00:05:04.079 --> 00:05:07.600 A:middle L:90%
option for skip, live check and currently is set

89
00:05:08.019 --> 00:05:10.230 A:middle L:90%
to false. So I turned this true. So

90
00:05:11.839 --> 00:05:14.959 A:middle L:90%
so I said this is true. So it doesn't

91
00:05:15.740 --> 00:05:18.509 A:middle L:90%
check the Node Node modules because at the moment,

92
00:05:18.920 --> 00:05:21.420 A:middle L:90%
if you run the TSC command on this template and

93
00:05:21.629 --> 00:05:24.009 A:middle L:90%
you'll get a couple of TypeScript errors, which are

94
00:05:24.089 --> 00:05:25.810 A:middle L:90%
due to some of the modules that are installed.

95
00:05:26.420 --> 00:05:27.980 A:middle L:90%
But if you turn this on, it will only

96
00:05:28.699 --> 00:05:33.839 A:middle L:90%
run TSC on the code that you write. And

97
00:05:34.129 --> 00:05:36.810 A:middle L:90%
lastly this is just a preference. But I'm going

98
00:05:36.970 --> 00:05:42.500 A:middle L:90%
to turn brackets facing the truth because I like having

99
00:05:42.709 --> 00:05:45.410 A:middle L:90%
spacing between brackets. All right. That's it.

100
00:05:45.709 --> 00:05:45.939 A:middle L:90%
No preferences.

