WEBVTT

1
00:00:00.510 --> 00:00:04.019
All right, now that our app
has loaded into X- code, so

2
00:00:04.019 --> 00:00:07.470
this is the native iOS
development environment.

3
00:00:07.470 --> 00:00:09.758
It does a huge amount of things.

4
00:00:09.758 --> 00:00:15.604
There's various simulators, and there's
profiling, and performance tracking.

5
00:00:15.604 --> 00:00:19.626
And the amount of features X-code
has is kind of ridiculous, but

6
00:00:19.626 --> 00:00:22.492
we're just going to use
it to run our project.

7
00:00:22.492 --> 00:00:26.221
So here under devices, you can
choose where you want to run it on.

8
00:00:26.221 --> 00:00:30.662
If you have your own device connected,
you will see it here.

9
00:00:30.662 --> 00:00:34.274
I'm going to choose iPhone 12 and
actually,

10
00:00:34.274 --> 00:00:38.530
first on a terminal,
I'm going to start the packager.

11
00:00:38.530 --> 00:00:41.176
So there's two two parts
of a native iOS app,

12
00:00:41.176 --> 00:00:44.182
you have the JavaScript bundle and
the native app.

13
00:00:44.182 --> 00:00:51.538
So I'm going to start run yarn start,
to start the JavaScript bundle first,

14
00:00:51.538 --> 00:00:56.170
and then I get to export X-code,
and hit play.

15
00:00:56.170 --> 00:00:58.139
So this is going to build the native app.

16
00:00:58.139 --> 00:01:02.522
The first time, this will take a little
bit longer, but after you've done

17
00:01:02.522 --> 00:01:06.710
it a couple of times, the second time,
it's going to go much quicker.

18
00:01:07.980 --> 00:01:12.350
&gt;&gt; Why don't you choose CocoaPods instead
of another pods dependency manager?

19
00:01:13.550 --> 00:01:18.960
&gt;&gt; So there's kind of two main ones,
there's CocoaPods and Cartridge.

20
00:01:18.960 --> 00:01:21.697
And actually, the choice is very easy for
React Native,

21
00:01:21.697 --> 00:01:25.817
because React Native officially switched
to using pods for dependency management.

22
00:01:25.817 --> 00:01:30.373
And so, if you do React Native in it, as
we did, and they've already had pods set

23
00:01:30.373 --> 00:01:34.058
up, so they load the React Native
dependencies by a pods as well.

24
00:01:34.058 --> 00:01:36.482
So it's kind of a no brainer
because if you wanted to use for

25
00:01:36.482 --> 00:01:39.464
example cartridge instead,
you would then manually have to set it up.

26
00:01:39.464 --> 00:01:40.641
While we're waiting for

27
00:01:40.641 --> 00:01:43.620
this, I can tell you a little
bit about the project structure.

28
00:01:43.620 --> 00:01:47.781
So if you go to the very first
tab here that has the folder,

29
00:01:47.781 --> 00:01:50.140
this is kind of a folder layout.

30
00:01:50.140 --> 00:01:55.752
Now, one thing to know about X-code
is because it's an integrated ID,

31
00:01:55.752 --> 00:01:59.984
this folder layout doesn't
necessarily reflect your

32
00:01:59.984 --> 00:02:03.481
folder actual directory
layout on your Mac.

33
00:02:03.481 --> 00:02:05.753
Which is kind of frustrating, but
it's something to be aware of.

34
00:02:05.753 --> 00:02:10.271
Also when adding files, you need to
always do, new file or add files,

35
00:02:10.271 --> 00:02:15.095
cuz if you were to, for example, drag and
drop a file into this directory,

36
00:02:15.095 --> 00:02:20.180
it would just link the file, but no
actually move it into your Git repository.

37
00:02:20.180 --> 00:02:25.089
So that's kind of a got share, that we
as JavaScript developers kind of fall

38
00:02:25.089 --> 00:02:29.459
into quite a bit because in our editors,
our editor folder layout,

39
00:02:29.459 --> 00:02:32.890
reflects what's actually in the device.

40
00:02:32.890 --> 00:02:34.380
Whereas on X-code, that's not the case.

41
00:02:36.610 --> 00:02:40.753
And here, so
these two are objective C files.

42
00:02:40.753 --> 00:02:44.042
So we have the header file and
the implementation file.

43
00:02:44.042 --> 00:02:49.710
And essentially what's a React Native app,
we use it from Template.

44
00:02:49.710 --> 00:02:52.153
All it's doing is, it's creating and

45
00:02:52.153 --> 00:02:56.535
it's just initializing the React Native
and the JavaScript bundle.

46
00:02:56.535 --> 00:02:59.799
That's pretty much what it's doing,
so here it is.

47
00:02:59.799 --> 00:03:01.040
Do you love bridge?

48
00:03:01.040 --> 00:03:02.520
We'll go over each view and
then we launch it.

49
00:03:02.520 --> 00:03:06.718
So throughout this course,
we're going to be adding

50
00:03:06.718 --> 00:03:11.780
little bits of code into the IOS and
the Android apps.

51
00:03:11.780 --> 00:03:14.720
&gt;&gt; Do we need to configure
native modules separately?

52
00:03:14.720 --> 00:03:17.914
&gt;&gt; In this course, we will do, yeah.

53
00:03:17.914 --> 00:03:22.497
So we're installing several libraries
that have native dependencies.

54
00:03:22.497 --> 00:03:26.583
And some of them requires to add

55
00:03:26.583 --> 00:03:31.306
bits of code into the Native files.

56
00:03:31.306 --> 00:03:32.985
so for example, for a splash screen,

57
00:03:32.985 --> 00:03:35.726
basically anything that you
can't launch from JavaScript.

58
00:03:35.726 --> 00:03:40.595
So for example, for the splash screen,
you need to show the splash screen in

59
00:03:40.595 --> 00:03:43.879
Native code, and
then hide it in JavaScript code.

60
00:03:43.879 --> 00:03:45.863
So it's just a one line thing, but

61
00:03:45.863 --> 00:03:49.499
I've added them here on purpose
just to get more comfortable.

62
00:03:49.499 --> 00:03:53.413
Cuz basically, if you're doing
React Native Development without Expo,

63
00:03:53.413 --> 00:03:56.405
you will occasionally have
to touch these Native codes.

64
00:03:56.405 --> 00:03:59.676
And the more comfortable
you become with it,

65
00:03:59.676 --> 00:04:02.699
just the easier it will
be in the long run.

66
00:04:02.699 --> 00:04:03.303
Cool, okay.

67
00:04:03.303 --> 00:04:07.537
So, our build failed, and
this is actually to be expected.

68
00:04:07.537 --> 00:04:11.967
And this is another thing that's
pretty frequent when you're doing data

69
00:04:11.967 --> 00:04:15.546
development, because your
environment keeps changing.

70
00:04:15.546 --> 00:04:16.906
So now we have a build error and

71
00:04:16.906 --> 00:04:19.635
this is actually something that
I was expecting to happen.

72
00:04:19.635 --> 00:04:23.950
And I just wanted to illustrate that
these things happen, don't worry,

73
00:04:23.950 --> 00:04:26.045
Google the error, things happen.

74
00:04:26.045 --> 00:04:30.094
And the reason this is happening is
because our development environment

75
00:04:30.094 --> 00:04:30.698
changed.

76
00:04:30.698 --> 00:04:37.561
So last week, I think,
X-code 13 came out and this is X-code 13.

77
00:04:37.561 --> 00:04:42.705
And I think my Mac, at least,
automatically upgrades to it and

78
00:04:42.705 --> 00:04:46.112
X-code 13 supports Swift by default.

79
00:04:46.112 --> 00:04:50.470
And our template app doesn't
have any Swift files.

80
00:04:50.470 --> 00:04:53.751
So what this is actually trying to do, is
it's trying to load a swift file is going

81
00:04:53.751 --> 00:04:56.690
there's no swift in your
project everything's terrible.

82
00:04:56.690 --> 00:05:00.126
So there's a quick fix for it and
basically what we're going to do is,

83
00:05:00.126 --> 00:05:03.580
we're going to add a empty
Swift file into our project.

84
00:05:03.580 --> 00:05:08.091
So I'm just going to right
click on new tracker,

85
00:05:08.091 --> 00:05:11.281
new file, Swift file, next, and

86
00:05:11.281 --> 00:05:17.400
I'm just going to call it dummy for
dummy file, create.

87
00:05:17.400 --> 00:05:20.279
And now this is the bit that's important.

88
00:05:20.279 --> 00:05:23.230
It's asking me if I want to create
an objective C bridging header.

89
00:05:23.230 --> 00:05:28.201
A bridging header is basically the way
that you can interact between Swift

90
00:05:28.201 --> 00:05:30.376
code and Objective Swift code.

91
00:05:30.376 --> 00:05:34.664
So if you wanted to write native modules,
for example, for React Native and

92
00:05:34.664 --> 00:05:38.081
you wanted to do it in Swift,
what you actually have to do is,

93
00:05:38.081 --> 00:05:42.750
you write your JavaScript code and
then you bind it to your Objective C code.

94
00:05:42.750 --> 00:05:46.448
And then use a bridging header
to bridge it to your Swift code.

95
00:05:49.014 --> 00:05:52.021
Then we create a bridging header,
this created this dummy file,

96
00:05:52.021 --> 00:05:54.060
and the bridging header.

97
00:05:54.060 --> 00:05:56.208
&gt;&gt; You mentioned that in the future,

98
00:05:56.208 --> 00:05:59.850
the React Native template
will probably resolve this.

99
00:05:59.850 --> 00:06:01.190
Correct, yes.

100
00:06:01.190 --> 00:06:02.801
&gt;&gt; Yeah, it definitely will.

101
00:06:02.801 --> 00:06:08.150
I was thinking of doing a PR for it but
I didn't want to do a last minute fix.

102
00:06:08.150 --> 00:06:12.003
I actually thought it would be nice
to show this on the workshop as well.

103
00:06:12.003 --> 00:06:17.490
Because if you're doing this in real life,
for clients, these things will happen.

104
00:06:17.490 --> 00:06:21.321
And you just become more comfortable,
you're like, okay, something's changed,

105
00:06:21.321 --> 00:06:24.270
is there a new version of one
of the major tools that I use?

106
00:06:24.270 --> 00:06:25.335
Okay, yes, there is.

107
00:06:25.335 --> 00:06:26.720
I can see what's going on.

108
00:06:26.720 --> 00:06:31.927
So it is kinda just part
of being a developer and

109
00:06:31.927 --> 00:06:34.604
it's not at all scary.

110
00:06:34.604 --> 00:06:37.566
Right, looks like this has worked,
which is excellent.

111
00:06:41.745 --> 00:06:43.932
So this is now bundling
the JavaScript bundle here.

112
00:06:48.077 --> 00:06:54.156
Excellent, so one thing to note, and
I've been doing React in development for

113
00:06:54.156 --> 00:06:58.050
years, and
I never read these instructions.

114
00:06:58.050 --> 00:07:02.143
But, if you're, for example, pressed R
in the tab where your Metro boundary is,

115
00:07:02.143 --> 00:07:04.540
if you refresh the app, how handy is that?

116
00:07:04.540 --> 00:07:07.315
And same for D,
you can open the developer tools.

117
00:07:07.315 --> 00:07:10.665
I think that only works
on the real device.

118
00:07:10.665 --> 00:07:14.836
Cool, let's now swap and do Android.

