WEBVTT

1
00:00:01.230 --> 00:00:03.298
Awesome that's it,
we have reached the end.

2
00:00:03.298 --> 00:00:04.826
Thank you so much, for

3
00:00:04.826 --> 00:00:09.419
this course I hope you found
something interesting in this course.

4
00:00:09.419 --> 00:00:12.105
So just a recap of things
that we looked at, so

5
00:00:12.105 --> 00:00:15.095
we looked at using TypeScript
with React Native.

6
00:00:15.095 --> 00:00:19.310
We did a recap of core components and
React Hooks.

7
00:00:19.310 --> 00:00:24.930
We added a bottom navigation bar, so
you've added a bottom navigation bar.

8
00:00:24.930 --> 00:00:28.190
We looked at JavaScript earlier versus
native libraries in React Native.

9
00:00:28.190 --> 00:00:32.360
We used React Context to
store global app state.

10
00:00:32.360 --> 00:00:38.992
We learned how to persist data across
app launches using async storage.

11
00:00:38.992 --> 00:00:43.287
We looked at a rendering images
locally and remotely via URL.

12
00:00:43.287 --> 00:00:45.913
We added SVGs in React Native for
our bottom tabs.

13
00:00:45.913 --> 00:00:47.788
We added custom fonts.

14
00:00:47.788 --> 00:00:51.886
We created animations using layout
animation as well as custom animations

15
00:00:51.886 --> 00:00:53.128
using Reanimated 2.

16
00:00:53.128 --> 00:00:56.203
We added an app icon and a splash screen.

17
00:00:56.203 --> 00:00:59.346
And we also did a whirlwind
intro into data visualization.

18
00:00:59.346 --> 00:01:00.917
So where to next?

19
00:01:00.917 --> 00:01:05.491
Well, we have only really scraped
the surface when it comes to animations in

20
00:01:05.491 --> 00:01:09.502
React Native, and I think that's
one of the most exciting parts.

21
00:01:09.502 --> 00:01:13.575
So now that you have the fundamentals and
you have the docs,

22
00:01:13.575 --> 00:01:16.400
here's some things that you could try.

23
00:01:16.400 --> 00:01:19.943
You could try to group the items
in the History tab by day, and

24
00:01:19.943 --> 00:01:23.500
then render the days using a draw,
so that each day is a draw.

25
00:01:23.500 --> 00:01:27.430
And then when you tap on it,
it will expand to show the actual entries.

26
00:01:29.030 --> 00:01:32.070
You could create a component to fade or
scale in,

27
00:01:32.070 --> 00:01:34.370
when an image is loaded by a URL.

28
00:01:34.370 --> 00:01:37.895
So this is a very common use case if
you're loading something via URL,

29
00:01:37.895 --> 00:01:40.224
need to cool the onload event and
then fade in so

30
00:01:40.224 --> 00:01:43.060
you don't have the white
image while you're loading.

31
00:01:44.490 --> 00:01:47.630
And you could try using an animated
header for a scrollable page.

32
00:01:47.630 --> 00:01:51.063
So this will be using
the animated gesture handler so

33
00:01:51.063 --> 00:01:55.600
when you scroll down on a page you
could have a header pop up or change.

34
00:01:55.600 --> 00:02:00.210
Another thing that we didn't really
touch on was haptic feedback.

35
00:02:00.210 --> 00:02:02.390
So haptic feedback is vibration.

36
00:02:02.390 --> 00:02:05.090
And it's often used to make
apps kind of nicer to use.

37
00:02:05.090 --> 00:02:08.530
You'll see a lot if you like a tweet,
for example.

38
00:02:08.530 --> 00:02:12.390
And also sounds, so playing sounds
when something good happens.

39
00:02:13.420 --> 00:02:16.153
So there are two libraries here
that you could try using, so

40
00:02:16.153 --> 00:02:18.680
React Native haptic feedback and
React Native sound.

41
00:02:18.680 --> 00:02:19.538
So for example,

42
00:02:19.538 --> 00:02:22.980
you could add a haptic feedback
effect when the user selects mute.

43
00:02:24.650 --> 00:02:29.420
And also, I've only given one example
of using a victory chart in our app.

44
00:02:29.420 --> 00:02:31.382
But there are so
many more charts available and

45
00:02:31.382 --> 00:02:33.150
different ways of displaying your data.

46
00:02:33.150 --> 00:02:35.896
So you can get creative and
try visualizing your data,

47
00:02:35.896 --> 00:02:38.350
in a different kind of chart,
maybe a bar chart.

48
00:02:40.240 --> 00:02:42.550
And finally, thanks so
much for taking my calls.

49
00:02:42.550 --> 00:02:46.090
I would be find it informative and
helpful in your React Native journey.

50
00:02:46.090 --> 00:02:50.430
&gt;&gt; Would you be able to use
React Native for game development?

51
00:02:51.610 --> 00:02:54.000
&gt;&gt; Yes [LAUGH].

52
00:02:54.000 --> 00:02:57.996
So, it depends on the games, I think.

53
00:02:57.996 --> 00:03:03.235
So for like 3D platformers,
you would use something

54
00:03:03.235 --> 00:03:07.900
like unity which you can
run now on mobile apps.

55
00:03:07.900 --> 00:03:12.965
But if it was maybe a gesture Extra
boost app or you could definitely do it.

56
00:03:12.965 --> 00:03:18.933
One of my colleagues actually built
an app, which is drag and drop based.

57
00:03:18.933 --> 00:03:22.629
So you could do things like for
example you wanted to do a sudoku,

58
00:03:22.629 --> 00:03:27.215
that was in React Native or if you wanted
to do something where you like drag items

59
00:03:27.215 --> 00:03:29.484
the right position, that would work.

60
00:03:29.484 --> 00:03:30.796
So it's just like tools for the job.

61
00:03:30.796 --> 00:03:33.773
But if it was something
like to do with 3D,

62
00:03:33.773 --> 00:03:37.930
like I personally don't know
the tools to do it at the moment

63
00:03:37.930 --> 00:03:43.880
&gt;&gt; About testing libraries?

64
00:03:43.880 --> 00:03:48.870
So, for end to end testing,
detox is kind of the go to.

65
00:03:48.870 --> 00:03:51.678
So, for
testing like normal JavaScript stuff,

66
00:03:51.678 --> 00:03:54.220
you would still use jest
it will still work.

67
00:03:54.220 --> 00:03:57.920
So, most of your testing on
the front end would be using jest.

68
00:03:57.920 --> 00:04:02.044
But for end to end you, would use detox,

69
00:04:02.044 --> 00:04:06.290
detox.react native, there you go, and

70
00:04:06.290 --> 00:04:13.083
that's kind of the go to see still
write your tests in JavaScript,

71
00:04:13.083 --> 00:04:19.180
but then you can run them random on CI and
run them end to end.

72
00:04:20.220 --> 00:04:24.233
&gt;&gt; Could you give an overview
of authentication strategies for

73
00:04:24.233 --> 00:04:25.260
React Native?

74
00:04:25.260 --> 00:04:30.174
&gt;&gt; Yes, so that's something I was
hoping to cover in this course,

75
00:04:30.174 --> 00:04:32.640
but didn't quite get to.

76
00:04:32.640 --> 00:04:36.362
Okay, so with authentication,
so one of the things is,

77
00:04:39.970 --> 00:04:41.936
Like, where do you authenticate and when.

78
00:04:41.936 --> 00:04:46.056
So if your app has a completely
different view for

79
00:04:46.056 --> 00:04:52.391
users that are authenticated and
then users that aren't authenticated,

80
00:04:52.391 --> 00:04:56.511
and what you would do is
at the very root level, so

81
00:04:56.511 --> 00:05:02.038
here before you hide the splash screen,
you would decide whether

82
00:05:02.038 --> 00:05:08.000
the user should see the logged in flow,
or the logged out flow.

83
00:05:08.000 --> 00:05:13.237
So, you could for example, do if you
store your users token in 18 storage or

84
00:05:13.237 --> 00:05:17.427
secure storage, you would see,
okay, if there is no token,

85
00:05:17.427 --> 00:05:22.750
they're probably not logged in, but
they're definitely not logged in.

86
00:05:22.750 --> 00:05:24.630
So, show them the locked out view.

87
00:05:24.630 --> 00:05:26.190
Otherwise show them locked in view.

88
00:05:26.190 --> 00:05:28.670
So, that would be one way of doing it.

89
00:05:28.670 --> 00:05:33.393
On the current app that I'm working on,
it's a little bit frustrating

90
00:05:33.393 --> 00:05:38.114
that you have a, the app is usable if
you're not logged in, but then you

91
00:05:38.114 --> 00:05:43.240
can choose to log in in the middle and
then everything should still work.

92
00:05:43.240 --> 00:05:45.700
Like the same way and
the UI looks really similar.

93
00:05:45.700 --> 00:05:49.750
So the way we handled it is
that we have an auth context.

94
00:05:49.750 --> 00:05:52.990
So an auth provider, that basically
handles like whether you're logged in,

95
00:05:52.990 --> 00:05:54.130
what's the current user?

96
00:05:54.130 --> 00:05:59.554
Like what's state, and
then it's handled on a global level.

97
00:05:59.554 --> 00:06:03.394
&gt;&gt; If I have an SVG tag,
can I add on click interactivity and

98
00:06:03.394 --> 00:06:09.017
stuff directly to the element or
&gt;&gt; So you can, I wouldn't recommend it.

99
00:06:09.017 --> 00:06:15.513
It's a little bit, so we actually like,
again in a recent project,

100
00:06:15.513 --> 00:06:22.800
we have some complex SVG is going on where
we need to tap in the middle of an SVG.

101
00:06:22.800 --> 00:06:27.763
And on Android in particular,
it created some unexpected behaviors,

102
00:06:27.763 --> 00:06:30.810
and the own press wasn't always toggled.

103
00:06:30.810 --> 00:06:36.585
So actually what we ended up doing,
is we absolute positioned

104
00:06:36.585 --> 00:06:42.150
that pressable area on top of
the SVG at the right position.

105
00:06:42.150 --> 00:06:47.013
So you will have the SVG, and then
the button is absolute position on top

106
00:06:47.013 --> 00:06:51.980
of it that will handle the on press event,
because we used to animate it.

107
00:06:51.980 --> 00:06:55.551
And, yeah,
it just wasn't working as we wanted but

108
00:06:55.551 --> 00:07:00.030
in general it is supported like
there is an on press event on SVGs.

109
00:07:00.030 --> 00:07:02.356
&gt;&gt; Any deployment pipeline or

110
00:07:02.356 --> 00:07:07.319
deployment tools React Native
that we should be aware of?

111
00:07:07.319 --> 00:07:13.686
So I almost exclusively have been using
App Center, which is Microsoft Epicenter,

112
00:07:13.686 --> 00:07:18.438
and basically it is,
I will say that it is slow, especially for

113
00:07:18.438 --> 00:07:23.279
iOS I think the current current build for
iOS it takes like 30 or

114
00:07:23.279 --> 00:07:27.343
40 minutes, but
Android it's like 15 minutes.

115
00:07:27.343 --> 00:07:30.825
So it's not ideal however for like a paid,

116
00:07:30.825 --> 00:07:35.857
subscription it's like 30 dollars or
30 pounds a month,

117
00:07:35.857 --> 00:07:42.050
which is like affordable for
a CI service for unlimited builds.

118
00:07:42.050 --> 00:07:45.323
And basically yeah,
I would use Epicenter, most of time.

119
00:07:45.323 --> 00:07:48.061
There's they also have a free tier, but

120
00:07:48.061 --> 00:07:52.830
I think it's only 60 minutes a month,
so it's not usually enough.

121
00:07:52.830 --> 00:07:56.194
And I would always, always,
always build on CI rather than locally.

122
00:07:56.194 --> 00:07:59.383
So even though you can
obviously build locally,

123
00:07:59.383 --> 00:08:03.738
just to manage the certificates and
build signing, both on iOS and

124
00:08:03.738 --> 00:08:08.716
Android, just to make sure that you
have the right environment variables,

125
00:08:08.716 --> 00:08:11.823
it's just much safer to
set it up once on the CI,

126
00:08:11.823 --> 00:08:16.340
and then you know you're
having a consistent behavior.

127
00:08:16.340 --> 00:08:20.400
You can also actually set this
up fully on GitHub actions.

128
00:08:20.400 --> 00:08:23.158
So GitHub action support Max, so

129
00:08:23.158 --> 00:08:28.700
you can set up your pipeline to
build fully on GitHub actions.

130
00:08:28.700 --> 00:08:31.170
So some of the projects in
my company actually do that.

131
00:08:31.170 --> 00:08:35.580
So most of them are either
GitHub actions or Epicenter.

132
00:08:35.580 --> 00:08:40.301
&gt;&gt; Do you ever use a WebView or
linking, especially with like payments,

133
00:08:40.301 --> 00:08:43.370
with PayPal, that kind of thing?

134
00:08:43.370 --> 00:08:44.710
&gt;&gt; Yeah.

135
00:08:44.710 --> 00:08:46.670
React Native WebView is pretty awesome.

136
00:08:46.670 --> 00:08:51.109
And sometimes I mean, I think it
depends like if you're doing something

137
00:08:51.109 --> 00:08:55.694
from scratch, and it's the company
does their first app, they've never

138
00:08:55.694 --> 00:09:00.461
had anything else, and you have free
rein to build everything from scratch.

139
00:09:00.461 --> 00:09:05.353
Obviously, it's nice not to use WebViews,
but a lot of the time especially for

140
00:09:05.353 --> 00:09:09.740
big companies, like not everything
is available via an API.

141
00:09:09.740 --> 00:09:11.055
So you'll have elements or

142
00:09:11.055 --> 00:09:13.920
application that you'll have
to render within a WebView.

143
00:09:13.920 --> 00:09:19.492
So it's not ideal because it can take you
outside of the kind of flow that the user

144
00:09:19.492 --> 00:09:24.916
is posing, and also you don't have
control over the styling of the WebView.

145
00:09:24.916 --> 00:09:29.150
So it might look not the same
as the rest of your app.

146
00:09:30.670 --> 00:09:34.850
But, sometimes you have to.

147
00:09:34.850 --> 00:09:36.980
And yeah, I've used
React Native WebView quite a bit.

148
00:09:38.136 --> 00:09:41.392
&gt;&gt; It looks like there's one
last one about the path for

149
00:09:41.392 --> 00:09:45.250
upgrading React Native with new
versions of Android and iOS.

150
00:09:45.250 --> 00:09:48.950
Is that getting better,
or is it still a pain?

151
00:09:48.950 --> 00:09:50.140
&gt;&gt; It's not been a pain.

152
00:09:50.140 --> 00:09:54.578
I mean, you literally, I think you saw
it at the very beginning, when we create

153
00:09:54.578 --> 00:09:59.440
a new project, we had an XCode update,
which basically broke the template.

154
00:09:59.440 --> 00:10:02.799
So things like that will happen, but
they usually like one small thing and

155
00:10:02.799 --> 00:10:04.710
it commutable sorted out super quickly.

