WEBVTT

1
00:00:00.630 --> 00:00:05.445
Now most animations actually aren't
standalone most of the time we're going to

2
00:00:05.445 --> 00:00:08.575
be using animations in
conjunction with gestures.

3
00:00:08.575 --> 00:00:12.097
So an example of this is when
you have a scroll view and

4
00:00:12.097 --> 00:00:16.822
as you scroll up the header changes or
for example if the user swipes and

5
00:00:16.822 --> 00:00:19.322
then as you swipe the UI is to change.

6
00:00:19.322 --> 00:00:23.237
So for us what we want to do is you
want to implement swipe to delete.

7
00:00:23.237 --> 00:00:26.681
So at the moment you need
to tap on Delete button but

8
00:00:26.681 --> 00:00:30.660
most applications that you use for
example Gmail.

9
00:00:30.660 --> 00:00:33.717
We'll have a functionality
to swipe to delete as well.

10
00:00:33.717 --> 00:00:37.455
So we're going to add a pretty
simple implementation so

11
00:00:37.455 --> 00:00:42.066
that the user will swipe right or
left and when they go over a threshold

12
00:00:42.066 --> 00:00:47.099
the card will animate all the way to the,
most are left and then disappear.

13
00:00:50.210 --> 00:00:54.000
So to do that let's install
react-native-gesture-handler.

14
00:00:58.620 --> 00:01:04.462
And then in your index.js, so
this is at the root level,

15
00:01:04.462 --> 00:01:10.570
let's add import
"react-native-gesture-handler"

16
00:01:14.110 --> 00:01:18.494
So this will be the very first
line in your file to do an audit

17
00:01:18.494 --> 00:01:20.380
anywhere in the bottom.

18
00:01:24.010 --> 00:01:27.160
And we'll see the iOS and pod install.

19
00:01:32.273 --> 00:01:37.700
And then for Android, we'll also need
to update the main activity, that Java.

20
00:01:38.720 --> 00:01:43.970
So, that it overrides the method
responsible for like.

21
00:01:43.970 --> 00:01:48.284
Basically, you need to hit add this,
in order for

22
00:01:48.284 --> 00:01:52.386
the gesture handler to work on Android.

23
00:01:52.386 --> 00:01:56.340
So, let's copy this,
and open main activity.

24
00:01:56.340 --> 00:01:58.790
And we'll add these imports.

25
00:02:04.608 --> 00:02:07.260
And also we'll need to add this function.

26
00:02:18.318 --> 00:02:21.870
And then we should be good to go.

27
00:02:21.870 --> 00:02:27.291
So we'll need to,
yarn ios to rebuild the iOS app.

28
00:02:31.560 --> 00:02:36.570
All right,
let's open our MoodItemRow and in here.

29
00:02:36.570 --> 00:02:40.170
Let's import PanGestureHandler.

30
00:02:43.759 --> 00:02:48.838
From react-native-gesture-handler.

31
00:02:50.134 --> 00:02:55.450
Now pan is like a swipe interaction.

32
00:02:55.450 --> 00:03:00.939
You can also have like for
example a PinchGestureHandler, And

33
00:03:00.939 --> 00:03:03.833
then let's wrap our entire moodItem in

34
00:03:03.833 --> 00:03:10.552
the PanGestureHandler Now

35
00:03:10.552 --> 00:03:16.123
you also want to set the minDeltaX and
minDeltaY and this is basically

36
00:03:16.123 --> 00:03:22.920
to tell the gesture handler when to
start registering the gesture event.

37
00:03:22.920 --> 00:03:27.550
So, this basically tells us that we
don't really care about gestures that go

38
00:03:27.550 --> 00:03:28.200
this way.

39
00:03:28.200 --> 00:03:34.033
We only really care about
gestures that go this way,

40
00:03:34.033 --> 00:03:38.912
then, We use onGestureEvent.

41
00:03:45.680 --> 00:03:48.159
And this will be a function.

42
00:03:48.159 --> 00:03:55.021
And so
just to show you what this looks like,

43
00:03:55.021 --> 00:03:58.920
evt.nativeEvent.y.

44
00:04:00.110 --> 00:04:03.549
So if I do console.warn

45
00:04:07.530 --> 00:04:14.379
Then if I go right or left,
I think I care about x instead.

46
00:04:14.379 --> 00:04:15.810
There you go.

47
00:04:15.810 --> 00:04:19.773
So as I go right or left,
you can see the logs here updating.

48
00:04:19.773 --> 00:04:23.574
Now, we're actually not going
to use this event directly,

49
00:04:23.574 --> 00:04:27.400
because we want to combine
it with reanimated two.

50
00:04:27.400 --> 00:04:31.220
So there is a animatedGestureHandler.

51
00:04:31.220 --> 00:04:35.885
That's built into reanimated,
which works in combination with

52
00:04:35.885 --> 00:04:41.750
the react-native-gesture-handler and
creates like an optimized workflow.

53
00:04:41.750 --> 00:04:50.640
So if we do const onGestureEvent,

54
00:04:53.951 --> 00:05:00.390
And we'll do, useAnimatedGestureHandler.

55
00:05:03.404 --> 00:05:07.140
And then this takes an object and
this has a dependency array and

56
00:05:07.140 --> 00:05:09.480
this takes an object.

57
00:05:09.480 --> 00:05:14.016
So on active so
this gets cold whenever you change,

58
00:05:14.016 --> 00:05:18.240
whenever you swipe, and
this takes the event.

59
00:05:20.870 --> 00:05:26.010
And we'll do console.warn(event.x).

60
00:05:26.010 --> 00:05:31.760
So there's that if we use
the gesture event directly,

61
00:05:31.760 --> 00:05:35.540
we could do evt.nativeEvent.x.

62
00:05:35.540 --> 00:05:37.719
But with the animated gesture handler,

63
00:05:37.719 --> 00:05:40.740
we don't need to select
the native events separately.

64
00:05:40.740 --> 00:05:42.756
So let's pass this here.

65
00:05:42.756 --> 00:05:46.916
All right so
now when we swipe we get this error,

66
00:05:46.916 --> 00:05:53.801
saying onGestureHandler event is expected
function got by your object type.

67
00:05:53.801 --> 00:05:57.930
This is actually because
the first item inside the gesture

68
00:05:57.930 --> 00:06:01.900
handler has to be an animated or
reanimated component.

69
00:06:03.120 --> 00:06:09.618
So, if we import reanimated
from react-native-reanimated,

70
00:06:09.618 --> 00:06:14.104
and then here on this
view that's just inside

71
00:06:14.104 --> 00:06:19.077
the panGestureHandler
we do reanimated.view.

72
00:06:19.077 --> 00:06:25.561
So both view and text can be
created like this reanimated.view

73
00:06:30.110 --> 00:06:34.171
Oops, so now when we reload,
then we go here,

74
00:06:34.171 --> 00:06:38.190
we get our look like we were expecting.

75
00:06:38.190 --> 00:06:41.520
All right, so what we're
interested in is the translation.

76
00:06:41.520 --> 00:06:48.110
So how much the user has moved
the item from when they started.

77
00:06:48.110 --> 00:06:52.504
So on this event,
we have, translationx, so

78
00:06:52.504 --> 00:06:55.997
let's see how this works, okay, so

79
00:06:55.997 --> 00:07:01.069
here when I start you can
see it's like minus values,

80
00:07:01.069 --> 00:07:05.010
when I go to the right is plus values.

81
00:07:05.010 --> 00:07:10.266
Perfect, and then we want to use
this translation to actually animate

82
00:07:10.266 --> 00:07:16.070
this card so that when I move this with
my finger, then the card moves with it.

83
00:07:18.000 --> 00:07:19.850
So let's create a shared value.

84
00:07:21.200 --> 00:07:27.080
So translatex=useSharedValue.

85
00:07:27.080 --> 00:07:28.155
And we'll start with 0.

86
00:07:33.030 --> 00:07:38.211
And here we'll do on active

87
00:07:38.211 --> 00:07:47.231
translatex.value=event.translationx.

88
00:07:51.425 --> 00:07:55.245
Did I misspell translate,

89
00:07:55.245 --> 00:07:59.700
translatex, excellent.

90
00:07:59.700 --> 00:08:03.234
And now we will create an animated style,
so const

91
00:08:06.400 --> 00:08:11.540
CardStyle=useAnimatedStyle.

92
00:08:13.410 --> 00:08:18.336
And this will be an arrow function
that returns an object with

93
00:08:18.336 --> 00:08:20.181
a dependences array.

94
00:08:20.181 --> 00:08:25.860
And that's translate the card
based on this translation value.

95
00:08:25.860 --> 00:08:32.807
So, let's do transform with
an array with one object and

96
00:08:32.807 --> 00:08:40.154
translatex and
this will be to translatex.value.

97
00:08:40.154 --> 00:08:46.870
[COUGH] Now we can apply
the cardStyle to our moodItem.

98
00:08:50.183 --> 00:08:53.411
Now, when we swipe on this card,
you can see that the card moves,

99
00:08:53.411 --> 00:08:56.810
however it doesn't go back
to his original position.

100
00:08:56.810 --> 00:09:01.040
So here in our useGestureEvent.

101
00:09:01.040 --> 00:09:06.670
We can do onEnd, and
we'll get the evet, we don't need evet.

102
00:09:06.670 --> 00:09:11.817
OnEnd, we will basically do

103
00:09:11.817 --> 00:09:17.060
translatex.value=0.

104
00:09:17.060 --> 00:09:18.598
So when we're finished we'll go back to 0.

105
00:09:18.598 --> 00:09:23.060
So there you go, so
I go back here and it goes back to 0.

106
00:09:23.060 --> 00:09:24.245
Now it is snaps but

107
00:09:24.245 --> 00:09:29.670
thankfully we already have a nice tool
to make any of these values animate.

108
00:09:29.670 --> 00:09:35.189
So if we use withTiming(0) and

109
00:09:35.189 --> 00:09:41.305
save, so now need to reload as well.

110
00:09:47.930 --> 00:09:53.831
So now when we let go, you can see that
it smoothly transitions back to 0.

111
00:09:53.831 --> 00:10:00.007
Now I want to do is when the user
swipes past the certain threshold,

112
00:10:00.007 --> 00:10:04.971
we animates the card all the way
to the right all the way

113
00:10:04.971 --> 00:10:09.852
to the left of the screen and
then we delete the item.

114
00:10:09.852 --> 00:10:15.471
So let's define a threshold, lets say
a const.maxSwipe and let's make it 80.

115
00:10:19.550 --> 00:10:23.462
All right, so here onActive,
so when we finish,

116
00:10:23.462 --> 00:10:26.734
we want to, I think we get the event here.

117
00:10:34.284 --> 00:10:40.575
And we can do if event.translationX,

118
00:10:40.575 --> 00:10:47.445
okay, so once the absolute value of this.

119
00:10:47.445 --> 00:10:52.488
So math.apps of translation x,

120
00:10:52.488 --> 00:10:58.437
so if this is larger than our maxSwipe.

121
00:10:58.437 --> 00:11:01.421
So if this is true.

122
00:11:05.976 --> 00:11:10.660
Then we're going to delete, so let me just
check that we're getting here correctly.

123
00:11:17.360 --> 00:11:21.985
Okay, and then if I just do a little bit,
okay, cool so just works.

124
00:11:24.287 --> 00:11:30.883
Okay, so if we're at maxSwipe
then we wanna delete so

125
00:11:30.883 --> 00:11:36.159
firstly what we want to
do is you wanna swipe

126
00:11:36.159 --> 00:11:41.888
the card all the way to
the like off the screen.

127
00:11:41.888 --> 00:11:45.854
So translatex.value=1,000, so

128
00:11:45.854 --> 00:11:49.600
let's do withTiming and 1,000.

129
00:11:51.350 --> 00:11:53.310
Okay, let's try that.

130
00:11:53.310 --> 00:11:54.820
So we swipe here.

131
00:11:57.720 --> 00:12:02.428
Let's reload again, if you update
these hooks they don't have to

132
00:12:02.428 --> 00:12:06.475
be reloads properly so
it's good to do a proper refresh.

133
00:12:06.475 --> 00:12:09.135
Okay, so we'll go here, okay, so

134
00:12:09.135 --> 00:12:13.859
it's just because we're setting
this to 0 so let's do else.

135
00:12:15.955 --> 00:12:18.750
This one, okay, so reload.

136
00:12:18.750 --> 00:12:24.420
Go to here, all right,
so we're at threshold.

137
00:12:24.420 --> 00:12:28.240
Okay, so this is not, wait,
I did 100, let's do 1000.

138
00:12:31.796 --> 00:12:34.240
Okay, so we go here, okay, so

139
00:12:34.240 --> 00:12:38.940
it gets it does go off the screen,
but it goes the wrong way.

140
00:12:38.940 --> 00:12:40.820
So it always goes on the right.

141
00:12:40.820 --> 00:12:42.790
So we want to make this minus 1000.

142
00:12:42.790 --> 00:12:45.287
If they use a swipe to the left, and

143
00:12:45.287 --> 00:12:50.340
actually a nice way to do that
is you can use math.sign.

144
00:12:50.340 --> 00:12:56.146
So I think it's a multiplied,
so math.sign of this.

145
00:13:00.620 --> 00:13:02.120
Let me check if this works.

146
00:13:04.380 --> 00:13:06.724
Okay, so it's not a sign but

147
00:13:06.724 --> 00:13:10.742
I accidentally need didn't
put it inside here.

148
00:13:10.742 --> 00:13:14.490
So it's 1000*math.sign
with the translation.

149
00:13:15.820 --> 00:13:17.830
So let me just reload this.

150
00:13:17.830 --> 00:13:21.817
So you can see that if I go to the left,
it's forced to the left,

151
00:13:21.817 --> 00:13:24.316
if we go to the right sorts to the right.

152
00:13:24.316 --> 00:13:28.243
So what math.sign does is it looks
at whatever sign this is and

153
00:13:28.243 --> 00:13:31.930
then it just returns basically plus one or
minus one.

154
00:13:31.930 --> 00:13:34.790
So if this is negative,
it will make this whole value negative.

155
00:13:34.790 --> 00:13:36.800
And if it's positive, it stays positive.

156
00:13:39.150 --> 00:13:43.430
All right, so
we've now swiped our item off the screen.

157
00:13:43.430 --> 00:13:44.980
So now we also wanna delete it.

158
00:13:46.090 --> 00:13:48.660
So we already have a context here.

159
00:13:48.660 --> 00:13:55.860
You will have already have handleDELETE
here, so let's just call handleDELETE.

160
00:13:55.860 --> 00:13:59.820
But the thing is we don't want to delete
it straightaway we want to leave some time

161
00:13:59.820 --> 00:14:02.160
for the animation to finish and
then delete it.

162
00:14:02.160 --> 00:14:05.330
So let's create another use callback

163
00:14:08.215 --> 00:14:12.062
DeleteWithDelay and

164
00:14:12.062 --> 00:14:21.960
react.useCallback Okay,
let's just do a setTimeout.

165
00:14:21.960 --> 00:14:26.782
So here, let's do a setTimeout and
our function and

166
00:14:26.782 --> 00:14:32.380
let's just wait for half a second,
it's probably enough.

167
00:14:33.490 --> 00:14:36.640
And after this timeout,
let's just call handleDELETE.

168
00:14:36.640 --> 00:14:45.330
So we'll add the dependency
array delete with delay.

169
00:14:48.930 --> 00:14:58.460
Okay and let's open it up,
Then if we swipe.

170
00:14:58.460 --> 00:15:01.060
Okay, so now, we actually get this error.

171
00:15:01.060 --> 00:15:04.937
And you'll see this a lot when you're
working with the animator tool,

172
00:15:04.937 --> 00:15:09.080
if you're trying to call JavaScript
from within an animation.

173
00:15:09.080 --> 00:15:13.452
So if you want to call a JavaScript code
within this gesture handler like we do,

174
00:15:13.452 --> 00:15:16.850
you need to use runOnJS to tell
it to run a JavaScript thread.

175
00:15:16.850 --> 00:15:21.128
So if you import runOnJS, and

176
00:15:21.128 --> 00:15:25.922
then here are deleteWithDelay,

177
00:15:25.922 --> 00:15:29.905
we wrap it in runOnJS.

178
00:15:29.905 --> 00:15:32.750
And save and also reload.

179
00:15:35.180 --> 00:15:39.470
And now when we swipe,
you can see that it swipes away.

180
00:15:39.470 --> 00:15:40.710
Our items get to be toggled.

181
00:15:44.330 --> 00:15:45.050
There you go.

182
00:15:45.050 --> 00:15:50.080
So I do realize that this is
different from my code example.

183
00:15:50.080 --> 00:15:51.880
I'll probably update
the code example later.

184
00:15:51.880 --> 00:15:54.960
So this is actually
a simpler way of doing this.

185
00:15:54.960 --> 00:16:00.380
The original onGestureEvent that I built
wasn't using the animated gesture handler.

186
00:16:00.380 --> 00:16:04.483
So this is a much more optimized way
of doing it rather than storing this in

187
00:16:04.483 --> 00:16:05.100
context.

