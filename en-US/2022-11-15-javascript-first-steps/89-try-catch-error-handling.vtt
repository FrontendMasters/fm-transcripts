WEBVTT

1
00:00:00.119 --> 00:00:03.669
So, we've been looking
at the Firefox Debugger.

2
00:00:03.669 --> 00:00:07.664
You might be working in Chrome or Safari
or another browser, different browser's

3
00:00:07.664 --> 00:00:10.985
Dev Tools work differently, so
their debuggers work differently.

4
00:00:10.985 --> 00:00:14.304
So you can read up on them,
there're some links in the slides here.

5
00:00:14.304 --> 00:00:17.394
You can read up in the documentation for
your particular browser,

6
00:00:17.394 --> 00:00:18.839
how its developer tools work.

7
00:00:18.839 --> 00:00:20.270
And in fact, there is,

8
00:00:20.270 --> 00:00:24.719
I believe an entire course on using
developer tools on front end masters.

9
00:00:24.719 --> 00:00:29.112
So if you think this is fun, and
you're like, clicking around and

10
00:00:29.112 --> 00:00:34.368
poking around in the web page in your Dev
Tools, you can take that course next and

11
00:00:34.368 --> 00:00:37.676
kind of get even more tricks
up your sleeve there.

12
00:00:37.676 --> 00:00:42.601
But suffice it to say that the the
debugger and kind of looking into what's

13
00:00:42.601 --> 00:00:47.368
going on inside of your functions and
different parts of your code can be

14
00:00:47.368 --> 00:00:52.624
a useful way to figure out when something
is going wrong, what is going wrong.

15
00:00:52.624 --> 00:00:56.524
And so then once we've figured out
where something is going wrong, or

16
00:00:56.524 --> 00:00:57.979
maybe where it is likely,

17
00:00:57.979 --> 00:01:02.554
maybe we already have an idea of where
it's likely that something might go wrong.

18
00:01:02.554 --> 00:01:05.247
We're trying something a little dangerous,

19
00:01:05.247 --> 00:01:08.293
then we can do something about it,
we can handle it.

20
00:01:08.293 --> 00:01:12.245
So, what usually happens in JavaScript,

21
00:01:12.245 --> 00:01:16.526
is that certain code will
throw an exception or

22
00:01:16.526 --> 00:01:22.701
an error that then will cause
JavaScript to stop running our code.

23
00:01:22.701 --> 00:01:26.154
So if I have some function,
this throws an error that is, and

24
00:01:26.154 --> 00:01:29.225
the keyword in JavaScript
to throw an error is throw.

25
00:01:29.225 --> 00:01:33.349
We haven't really looked in detail at that
because usually we will be running into

26
00:01:33.349 --> 00:01:37.308
errors and maybe some other module that
we've loaded or something like that.

27
00:01:37.308 --> 00:01:41.704
But if we do need to manually throw
an error we can use the keyword throw.

28
00:01:41.704 --> 00:01:45.894
And if we have a function that
throws an error, let's say, or

29
00:01:45.894 --> 00:01:51.052
a line in our code that throws an error
because a variable wasn't declared or

30
00:01:51.052 --> 00:01:54.195
something like that, as we've seen before,

31
00:01:54.195 --> 00:01:59.111
when we had a missing variable or we
tried to use await in the wrong place or

32
00:01:59.111 --> 00:02:04.069
do any other thing that JavaScript
don't like, JavaScript will quit.

33
00:02:04.069 --> 00:02:08.159
It'll just give up, it'll say, I can't
run anymore, I'm done, this is terrible.

34
00:02:08.159 --> 00:02:10.509
And so
we won't get to the next line of code.

35
00:02:10.509 --> 00:02:13.256
And sometimes that is exactly
what we want JavaScript to do.

36
00:02:13.256 --> 00:02:15.423
We want it to stop running our program and

37
00:02:15.423 --> 00:02:19.463
let us know that something has gone
horribly wrong and that it makes sense.

38
00:02:19.463 --> 00:02:25.556
But other times, we might want to maybe
try something again a couple of times,

39
00:02:25.556 --> 00:02:29.357
or maybe try a different way,
or try a fallback.

40
00:02:29.357 --> 00:02:33.171
Maybe we have a default dongle
image that we want to load if

41
00:02:33.171 --> 00:02:35.801
loading a random image doesn't work.

42
00:02:35.801 --> 00:02:40.427
For example, or maybe we were just
trying to do something optional,

43
00:02:40.427 --> 00:02:44.814
like add in some extra data,
some extra facts about JavaScript or

44
00:02:44.814 --> 00:02:48.804
about our dongles that aren't
really required in order for

45
00:02:48.804 --> 00:02:54.582
our application to do its job, but maybe
we're just adding some extra pizzas there.

46
00:02:54.582 --> 00:02:59.488
And in that case, if we have an error in
that optional part, we wanna just kind of

47
00:02:59.488 --> 00:03:04.354
skip it and forget about it and say,
whatever and keep going on with our lives.

48
00:03:04.354 --> 00:03:07.952
And so,
in JavaScript the way that we can do that,

49
00:03:07.952 --> 00:03:11.466
the way that we can handle an error,
and either,

50
00:03:11.466 --> 00:03:16.697
maybe give ourselves some more
information about it or do something else

51
00:03:16.697 --> 00:03:21.701
if we run into an error, is using
a couple of friends, try and catch.

52
00:03:21.701 --> 00:03:27.799
So a try catch block here, which we
have a try block and a catch block,

53
00:03:27.799 --> 00:03:34.235
they work together in order to try
something that might give us an error.

54
00:03:34.235 --> 00:03:38.460
So for example, we have a function that
we're calling here in our try block,

55
00:03:38.460 --> 00:03:41.852
inside our curly braces,
that we think might throw an error.

56
00:03:41.852 --> 00:03:47.665
And try is going to try to run it, and
if it works and there's no error, cool,

57
00:03:47.665 --> 00:03:53.757
we're just gonna go on with the rest of
the code after this whole try catch block.

58
00:03:53.757 --> 00:03:57.792
But if this might throw an error,
does throw an error,

59
00:03:57.792 --> 00:04:01.053
then we're going to enter the catch block.

60
00:04:01.053 --> 00:04:06.047
And JavaScript is gonna pass in an error
object to that catch block that

61
00:04:06.047 --> 00:04:10.618
we now have as an error that we
can capture in these parenthesis,

62
00:04:10.618 --> 00:04:15.866
we can capture that as a variable,
which you'll often see called error,

63
00:04:15.866 --> 00:04:18.515
or e, or err, something like that.

64
00:04:18.515 --> 00:04:23.806
So we can catch that object, that
exception or error object that JavaScript

65
00:04:23.806 --> 00:04:28.863
gives us and then maybe we wanna log
a message about it with some details.

66
00:04:28.863 --> 00:04:32.814
Say, as if, we can even use that code
then, we write into an error and

67
00:04:32.814 --> 00:04:35.078
maybe we wanna do something else here.

68
00:04:35.078 --> 00:04:39.645
Maybe we wanna use a fallback value or we
want to try some other way of getting this

69
00:04:39.645 --> 00:04:42.386
optional information or
something like that.

70
00:04:42.386 --> 00:04:47.493
Or maybe we just wanna say,
whatever, let's just keep going,

71
00:04:47.493 --> 00:04:52.506
and the catch block is going to
allow us to decide what we wanna do

72
00:04:52.506 --> 00:04:58.207
in the event that whatever happened
in the try block, throws an error.

73
00:04:58.207 --> 00:05:05.472
And in this case, we're just gonna log
whatever and keep rolling with the homies.

74
00:05:05.472 --> 00:05:08.099
I hope folks that seemed clueless cuz
otherwise this won't make any sense.

75
00:05:08.099 --> 00:05:12.967
But, [LAUGH] in any case, suffice it to
say that try catch is how we can handle

76
00:05:12.967 --> 00:05:17.836
errors in our program and make decisions
in our code about what to do if we run

77
00:05:17.836 --> 00:05:22.511
into an error in a particular line of
code or a particular block of code.

78
00:05:22.511 --> 00:05:25.931
We can have more than one
line in that try block two.

79
00:05:28.143 --> 00:05:32.478
So you can read all about try and
catch on MDN, of course, and

80
00:05:32.478 --> 00:05:37.239
you can read a lot more about error,
objects, and how that works,

81
00:05:37.239 --> 00:05:42.000
and what kind of things we can work
with there on our error objects,

82
00:05:42.000 --> 00:05:45.856
and see some more examples
of how to use try and catch.

83
00:05:45.856 --> 00:05:51.128
And that is something you'll see in
a lot of professional JavaScript code

84
00:05:51.128 --> 00:05:56.920
where we're doing things that might not
work, so this is how we would handle it.

