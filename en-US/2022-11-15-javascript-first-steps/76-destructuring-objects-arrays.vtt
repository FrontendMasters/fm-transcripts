WEBVTT

1
00:00:00.120 --> 00:00:04.104
So before we go on and
talk about places where we can use array,

2
00:00:04.104 --> 00:00:07.260
wanna talk about another
fancy piece of syntax.

3
00:00:07.260 --> 00:00:10.914
Sorry, this is maybe a little tricky to
see, but what we're gonna talk about now

4
00:00:10.914 --> 00:00:14.990
is another piece of fancy JavaScript
syntax called destructuring.

5
00:00:14.990 --> 00:00:16.840
So we've seen some fancy syntax already,
right?

6
00:00:16.840 --> 00:00:19.030
We've seen arrow functions, that's fancy.

7
00:00:19.030 --> 00:00:23.382
We've seen conditional operators with
the question mark, and the colon,

8
00:00:23.382 --> 00:00:24.480
that's fancy.

9
00:00:24.480 --> 00:00:30.050
We've seen the backticks with the dollar
sign curly braces, the string templates.

10
00:00:30.050 --> 00:00:32.474
JavaScript has a lot of syntax.

11
00:00:32.474 --> 00:00:36.030
Unlike maybe some other languages
you've learned where let's say,

12
00:00:36.030 --> 00:00:40.188
parentheses are the entire language,
[LAUGH] like closure script, for example,

13
00:00:40.188 --> 00:00:42.650
maybe if you've seen those.

14
00:00:42.650 --> 00:00:45.910
JavaScript has a lot of different things
that we can do with, for example,

15
00:00:45.910 --> 00:00:46.598
curly braces.

16
00:00:46.598 --> 00:00:49.224
And so what what destructuring is,

17
00:00:49.224 --> 00:00:54.386
is it's a syntax that we can use to
break down an object like a unicorn,

18
00:00:54.386 --> 00:01:00.010
for example, into the parts that make
it up, like a horn, a tail and a body.

19
00:01:01.230 --> 00:01:06.622
And this is a cute illustration of
destructuring from my friend Sarah.

20
00:01:08.085 --> 00:01:11.397
Okay, so destructuring is essentially,

21
00:01:11.397 --> 00:01:17.015
we can think of it as a fancy way of
declaring multiple variables at once.

22
00:01:17.015 --> 00:01:22.518
And/or a way you can think about
is like extracting the properties

23
00:01:22.518 --> 00:01:27.740
from an object and making them
variables in our current scope.

24
00:01:29.490 --> 00:01:32.454
So for example,
remember our spices objects,

25
00:01:32.454 --> 00:01:36.760
each spiceGirls object had a name
property and a nickname property.

26
00:01:37.930 --> 00:01:42.604
So I don't think I have my spices anymore,
but let me go make it.

27
00:01:42.604 --> 00:01:50.044
So we had clear we had got
something like spices equals and

28
00:01:50.044 --> 00:01:56.864
then an array of objects
that looked like name Emma,

29
00:01:56.864 --> 00:02:01.680
nickname Babe and so on and so forth.

30
00:02:01.680 --> 00:02:02.969
I just need one for right now.

31
00:02:04.489 --> 00:02:09.600
So if I use this weird
syntax that sort of looks

32
00:02:09.600 --> 00:02:17.551
like an object on the left hand side
of an equals assignment operator.

33
00:02:17.551 --> 00:02:23.045
This right here, it's not an object,
it's sort of an indication

34
00:02:23.045 --> 00:02:28.480
of the shape of an object,
the properties of an object.

35
00:02:28.480 --> 00:02:34.430
And what this does is it's going to
essentially say, all in this one line,

36
00:02:34.430 --> 00:02:39.634
hey, JavaScript take the object
at index 0 in the spices array.

37
00:02:41.817 --> 00:02:48.391
Pull out the value of its name property
and assign that to a new variable name.

38
00:02:50.021 --> 00:02:53.036
Pull out the value of its
nickname property and

39
00:02:53.036 --> 00:02:55.670
assign that to a new variable nickname.

40
00:02:57.381 --> 00:03:02.177
So, when I run this,
and now I ask for name,

41
00:03:02.177 --> 00:03:09.320
name is now the val pointing to
the value from within that object.

42
00:03:10.760 --> 00:03:15.919
And similarly, so is nicknamed pointing
to the corresponding value there?

43
00:03:17.345 --> 00:03:22.377
Now, it might seem like a little
strange to do it this way,

44
00:03:22.377 --> 00:03:27.308
but this ends up being handy
when you have, for example,

45
00:03:27.308 --> 00:03:31.418
an object with lots of
different properties and

46
00:03:31.418 --> 00:03:37.407
maybe you only care about one of them or
a couple of them, let's say.

47
00:03:37.407 --> 00:03:42.935
And you say, I don't actually wanna,
capture the whole object as,

48
00:03:42.935 --> 00:03:48.100
spiceGirl and then do spiceGirl.name
equal spiceGirls name.

49
00:03:48.100 --> 00:03:51.413
I don't want to have to do all of
that work of getting the object and

50
00:03:51.413 --> 00:03:53.642
then using dots to get
into its properties,

51
00:03:53.642 --> 00:03:56.253
this is just basically a shorthand for
all of that.

52
00:03:56.253 --> 00:04:01.843
So what we can do, all right,
well I don't have a spices to here,

53
00:04:01.843 --> 00:04:07.658
but what we can do is say,
I don't know, I'll just call this Nick.

54
00:04:07.658 --> 00:04:10.764
And I'm just gonna keep working with 0
cuz I only have one spice at the moment,

55
00:04:10.764 --> 00:04:12.144
everyone else has left the group.

56
00:04:12.144 --> 00:04:16.731
[LAUGH] What I can do is,
sorry, I can't say Nick there,

57
00:04:16.731 --> 00:04:21.616
I can just say nickname because
the name of the property here

58
00:04:21.616 --> 00:04:27.300
can be then essentially pulled
out into its own variable.

59
00:04:27.300 --> 00:04:30.860
Now here it's probably not gonna like
it cuz I already declared a nickname.

60
00:04:30.860 --> 00:04:38.060
But what I can do is just reassign to
that value, I'm sorry, to that variable.

61
00:04:39.820 --> 00:04:41.670
No, I can't, no I can't, I need the let.

62
00:04:44.110 --> 00:04:51.408
Let me reload and
copy my thing here, sorry, okay?

63
00:04:51.408 --> 00:04:53.395
All right, start over.

64
00:04:53.395 --> 00:04:58.586
All right, so now,
if I to let, just nickname

65
00:04:58.586 --> 00:05:03.790
is all that I care about equals spices[0].

66
00:05:03.790 --> 00:05:10.695
I have sort of ignored the name, so right
now if I reference nickname that works.

67
00:05:10.695 --> 00:05:16.956
But name is, I don't know what that is,
that might be something old.

68
00:05:16.956 --> 00:05:19.046
But essentially what it's
doing is just saying,

69
00:05:19.046 --> 00:05:22.180
hey, JavaScript I don't care about
the other properties on this object,

70
00:05:22.180 --> 00:05:24.733
I just care about that nickname
property within the object.

71
00:05:26.634 --> 00:05:31.050
Okay, so destructuring lets
us kind of quickly only grab

72
00:05:31.050 --> 00:05:35.012
certain properties we care
about out of an object.

73
00:05:35.012 --> 00:05:36.633
Question.

74
00:05:36.633 --> 00:05:40.744
&gt;&gt; Do the variables inside of the curly
braces need to match the order that they

75
00:05:40.744 --> 00:05:42.530
are in the array.

76
00:05:42.530 --> 00:05:43.070
&gt;&gt; Great question.

77
00:05:44.200 --> 00:05:44.912
Let's find out.

78
00:05:47.848 --> 00:05:49.103
Variables, what order they are in?

79
00:05:49.103 --> 00:05:49.776
Are they in orders?

80
00:05:49.776 --> 00:05:50.372
Let's find out.

81
00:05:50.372 --> 00:05:55.064
Okay, so if I do let nickname,

82
00:05:55.064 --> 00:06:01.207
name in my curlies equal spices[0].

83
00:06:03.041 --> 00:06:09.831
Nickname now is still Baby and
name is still Emma.

84
00:06:09.831 --> 00:06:11.493
No, the order does not matter.

85
00:06:11.493 --> 00:06:15.610
Actually, in JavaScript object
properties are not ordered.

86
00:06:15.610 --> 00:06:20.270
Unlike arrays, where items are ordered,
object properties are not

87
00:06:20.270 --> 00:06:25.330
guaranteed to be in a particular order
in JavaScript even though usually,

88
00:06:25.330 --> 00:06:30.148
we will see them kinda logged out or
printed out by the browser's kind of

89
00:06:30.148 --> 00:06:33.790
viewer here in the order
that we declared them.

90
00:06:33.790 --> 00:06:37.487
There is not actually a concept of
ordering to object properties in

91
00:06:37.487 --> 00:06:38.286
JavaScript.

92
00:06:38.286 --> 00:06:42.139
So as far as destructuring is concerned,
it does not know or

93
00:06:42.139 --> 00:06:44.846
care what order they were originally in.

94
00:06:44.846 --> 00:06:49.246
Nor does it know or care what order
you put them in in your destructuring

95
00:06:49.246 --> 00:06:52.231
assignment because all
it cares about is that,

96
00:06:52.231 --> 00:06:56.460
it has to assign a new variable
to each of those things.

97
00:06:56.460 --> 00:07:00.810
And similarly in our scope,
like variables don't have an order.

98
00:07:00.810 --> 00:07:03.680
Similarly within an object
properties don't have an order.

99
00:07:03.680 --> 00:07:05.360
But great point, great question.

100
00:07:05.360 --> 00:07:06.770
So no order does not matter.

101
00:07:06.770 --> 00:07:09.691
You can write them in whatever
order feels good to you.

102
00:07:11.916 --> 00:07:18.130
Okay, another fun thing is that
we can destructure arrays too.

103
00:07:19.390 --> 00:07:24.324
So for example, in our original spices
array, whenever arrays do have an order,

104
00:07:24.324 --> 00:07:28.543
the objects were structured so
that it was like the baby spice object,

105
00:07:28.543 --> 00:07:31.790
the ginger spice object and
so on and so forth.

106
00:07:31.790 --> 00:07:36.348
And what I can do is use the square
brackets syntax to assign

107
00:07:36.348 --> 00:07:40.640
a variable name to each element
in order in that array.

108
00:07:41.890 --> 00:07:49.339
So let's take an example with, I don't
know, we can just use numbers for now.

109
00:07:49.339 --> 00:07:55.530
One, two, and three could become names
now for an array of numbers like this.

110
00:07:57.228 --> 00:08:03.169
So that if I asked for one,
now I get the number 1, 3, 3, and so on.

111
00:08:05.186 --> 00:08:08.320
And in this case,
order does matter, right?

112
00:08:08.320 --> 00:08:15.135
So if I have six, five, four for
a new array that has 4, 5,

113
00:08:15.135 --> 00:08:21.310
6, JavaScript does not have any property
names to go off of here in an array,

114
00:08:21.310 --> 00:08:25.097
all it has to go off of is the order,
all ut has to off of is the index,

115
00:08:25.097 --> 00:08:28.630
the numerical indices and
the order that things are.

116
00:08:28.630 --> 00:08:31.827
So it's just gonna map the first to the
first, and the second to the second, and

117
00:08:31.827 --> 00:08:32.792
the third to the third.

118
00:08:32.792 --> 00:08:39.018
And so now we're gonna have
confusingly 6 be 4 and 4 be 6.

119
00:08:39.018 --> 00:08:42.480
So order does matter when we're
just structuring arrays, but

120
00:08:42.480 --> 00:08:45.041
it doesn't add over to
structuring objects.

121
00:08:48.356 --> 00:08:52.722
But the fun thing is that when
we're destructuring arrays,

122
00:08:52.722 --> 00:08:56.950
we can ignore any extra
values that we don't need.

123
00:08:56.950 --> 00:09:02.024
So we can, if we only care about
the first couple of things in my array,

124
00:09:02.024 --> 00:09:06.684
I can just ignore the rest of
the array and it won't be captured.

125
00:09:06.684 --> 00:09:10.884
So for example I can do, let,

126
00:09:10.884 --> 00:09:14.750
I don't know 10, 20,

127
00:09:16.284 --> 00:09:20.145
Be on the left hand side
of a much longer array.

128
00:09:21.797 --> 00:09:26.991
And now 10 and 20 are the first two
things, if I can spell them, but 30 and

129
00:09:26.991 --> 00:09:32.132
40 just got ignored, they didn't get
pulled out into our destructuring.

130
00:09:34.237 --> 00:09:38.776
And what's actually fun is that I can
use commas if I wanna skip things in

131
00:09:38.776 --> 00:09:40.510
the array.

132
00:09:40.510 --> 00:09:45.174
So if I can say,
I don't care about the first thing,

133
00:09:45.174 --> 00:09:50.262
I don't care about the second thing,
I care about 30.

134
00:09:50.262 --> 00:09:53.567
And then I don't care
about the fourth thing.

135
00:09:53.567 --> 00:09:57.880
This should,
if I haven't typed anything wrong,

136
00:09:57.880 --> 00:10:03.710
pull out the third thing in the array
here, because of my two commas.

137
00:10:05.300 --> 00:10:07.175
So this can be a handy way, again,

138
00:10:07.175 --> 00:10:10.760
to just like grab out only
a certain amount of information.

139
00:10:10.760 --> 00:10:14.037
I will say that though we can do
this with arrays, it's really handy.

140
00:10:14.037 --> 00:10:17.536
I don't particularly use
the skipping commas,

141
00:10:17.536 --> 00:10:22.240
all that much occasionally,
you will find this come in handy.

142
00:10:22.240 --> 00:10:26.892
But what we often do, is if we know that
we get back an array of three things and

143
00:10:26.892 --> 00:10:29.728
we're gonna need to then go and
say all right,

144
00:10:29.728 --> 00:10:34.132
variable 1 equals array index 0,
variable 2 equals array index 1.

145
00:10:34.132 --> 00:10:38.666
We can save ourselves all those lines
of code by just doing destructuring.

146
00:10:38.666 --> 00:10:43.312
And especially with objects is
super handy, especially when you're

147
00:10:43.312 --> 00:10:47.574
working with objects like responses,
where was our response?

148
00:10:47.574 --> 00:10:48.457
Is it still around?

149
00:10:48.457 --> 00:10:49.481
No, it's not.

150
00:10:49.481 --> 00:10:54.735
When you're working with objects
with lots of properties on them,

151
00:10:54.735 --> 00:11:00.739
like document, for example,
has like 8 bajillion gajillion properties.

152
00:11:00.739 --> 00:11:04.769
And so if I just wanna get let's say,

153
00:11:04.769 --> 00:11:08.543
[LAUGH] let (title) = document.

154
00:11:10.847 --> 00:11:15.384
I should get, my gosh, if I can type it,

155
00:11:15.384 --> 00:11:20.563
the title of the document,
just that property.

156
00:11:20.563 --> 00:11:24.129
And not all of the other gajillions of
properties that I don't care about.

157
00:11:24.129 --> 00:11:27.125
So it's very handy when working
with objects and lots of stuff.

158
00:11:27.125 --> 00:11:30.971
And a lot of the times API's will return
us back objects once we've awaited our

159
00:11:30.971 --> 00:11:34.830
promises and all that stuff and parsed
out our bodies slammed our bodies down.

160
00:11:36.030 --> 00:11:40.011
The objects that we get back from API's
depending on what API you're working with,

161
00:11:40.011 --> 00:11:42.815
sometimes they have like tons
of different information and

162
00:11:42.815 --> 00:11:47.120
you don't care about much of it, you just
care about one thing, maybe or two things.

163
00:11:47.120 --> 00:11:49.121
You can pull them out
with this destructuring.

164
00:11:51.140 --> 00:11:52.159
Cool.

165
00:11:54.301 --> 00:11:58.673
And fun fact are spread syntax that

166
00:11:58.673 --> 00:12:03.193
dot dot can also be used to capture,

167
00:12:03.193 --> 00:12:07.575
instead of expanding and spread.

168
00:12:07.575 --> 00:12:12.817
Instead expanding an array,
it can be used to collect into an array

169
00:12:12.817 --> 00:12:17.600
from all of the rest of the values
that we don't care about.

170
00:12:17.600 --> 00:12:22.765
So like if I have, let one and

171
00:12:22.765 --> 00:12:27.928
then others be 1, 2, 3,

172
00:12:27.928 --> 00:12:33.442
4, oops, Uno and

173
00:12:33.442 --> 00:12:40.726
otros for example, can be 1, 2, 3, 4.

174
00:12:40.726 --> 00:12:45.588
So now we uno is just the value 1 and

175
00:12:45.588 --> 00:12:50.460
otros is 2, 3 and 4 in an array.

176
00:12:50.460 --> 00:12:55.465
So this can be handy if you're,
maybe I don't care about it right now but

177
00:12:55.465 --> 00:12:59.095
maybe I will wanna drill into
the rest of the data later.

178
00:12:59.095 --> 00:13:01.664
You can also do that
with array destructuring.

179
00:13:01.664 --> 00:13:06.355
So this is just some fancy syntax
to put in your JavaScript toolbox.

180
00:13:06.355 --> 00:13:10.519
And most importantly,
you don't need to do this, you can always,

181
00:13:10.519 --> 00:13:15.429
just go through and say, let uno equal
numbers index 0, and so on and so forth.

182
00:13:15.429 --> 00:13:18.663
That's totally valid, this is just maybe
something that you might run into if

183
00:13:18.663 --> 00:13:20.334
you're reading other people's code.

184
00:13:20.334 --> 00:13:23.367
Or it might be something if you
wanna really flex your syntax

185
00:13:23.367 --> 00:13:25.745
muscles might be something
you wanna try out.

186
00:13:25.745 --> 00:13:28.241
And especially for objects,
it can be really handy, and

187
00:13:28.241 --> 00:13:30.171
a quick way to get
the values you care about.

