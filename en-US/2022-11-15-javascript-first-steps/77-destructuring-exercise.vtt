WEBVTT

1
00:00:00.240 --> 00:00:06.512
We're gonna go back to Doggo Fetch and
go down to TODO 2.

2
00:00:09.196 --> 00:00:11.036
And what we're going to do,

3
00:00:11.036 --> 00:00:14.880
is complete another little
utility function that we need.

4
00:00:16.550 --> 00:00:22.024
What this utility function
getBreedFromURL does, is it's

5
00:00:22.024 --> 00:00:29.050
gonna take in a string representing
a URL that has a format like this.

6
00:00:29.050 --> 00:00:35.365
It's gonna be like
https://images.dog.ceo/breeds/,

7
00:00:35.365 --> 00:00:40.069
and then some dog breed,
and then some image name

8
00:00:40.069 --> 00:00:44.542
that we have no idea what
that part is gonna be,

9
00:00:44.542 --> 00:00:50.074
in this example it's poodle standard and
then and no2.

10
00:00:50.074 --> 00:00:52.281
Those are gonna be whatever we know.

11
00:00:52.281 --> 00:00:57.146
What we want,
is to return the breed name as

12
00:00:57.146 --> 00:01:02.427
a string that we can use
like standard poodle.

13
00:01:02.427 --> 00:01:07.137
So poodle-standard
becomes standard poodle.

14
00:01:11.775 --> 00:01:18.601
And what we're gonna also have to
contend with here is that sometimes,

15
00:01:18.601 --> 00:01:26.456
so the URL is always gonna start with
https://images.dog.ceo/ breeds/,

16
00:01:26.456 --> 00:01:32.254
but some of these dog breeds,
if we look up in my breeds list,

17
00:01:32.254 --> 00:01:38.169
some of them have multiple words,
and others, like Beagle,

18
00:01:38.169 --> 00:01:43.580
do not have multiple words,
unlike poodle standards.

19
00:01:43.580 --> 00:01:47.249
So sometimes It's just
gonna be one word and

20
00:01:47.249 --> 00:01:51.820
then some other blahd,
blah, blah, who knows what?

21
00:01:53.780 --> 00:01:58.905
So what we need to do is, we need to
be able to handle either the case

22
00:01:58.905 --> 00:02:04.429
where it's just one word or where it
is two words separated by a minus.

23
00:02:05.620 --> 00:02:10.860
And what we want, in the first case,
we want our function to give

24
00:02:10.860 --> 00:02:15.928
us standard poodle, and
in the second case, we want beagle.

25
00:02:19.680 --> 00:02:23.391
So, this is the type of data processing
where we might find ourselves doing,

26
00:02:23.391 --> 00:02:25.674
sometimes we get data out
in a certain format and

27
00:02:25.674 --> 00:02:27.650
we need it in a different format.

28
00:02:27.650 --> 00:02:30.928
And in this case, it's text data and
we need to actually parse or

29
00:02:30.928 --> 00:02:32.210
process this text data.

30
00:02:33.310 --> 00:02:38.042
There is a handy string method
that we can use here that's

31
00:02:38.042 --> 00:02:41.610
gonna be useful, which is split.

32
00:02:41.610 --> 00:02:43.020
Have folks run into split before?

33
00:02:44.250 --> 00:02:45.190
Maybe not.

34
00:02:45.190 --> 00:02:47.653
So what split does,
is we give it a character,

35
00:02:47.653 --> 00:02:50.000
like here I'm giving it a space character.

36
00:02:51.000 --> 00:02:55.772
And it's gonna return an array
of the different strings

37
00:02:55.772 --> 00:02:59.223
that it gets when it takes this string and

38
00:02:59.223 --> 00:03:03.956
splits it on the delimiting
character that we give it.

39
00:03:03.956 --> 00:03:10.454
So, if we go to our console and
I run Anjanette Sophia Vakil.split,

40
00:03:10.454 --> 00:03:14.822
we get an array with
Anjana as the first thing,

41
00:03:14.822 --> 00:03:20.103
Sophia's the second thing,
Vakil's the last thing.

42
00:03:20.103 --> 00:03:27.553
And then if I use my destructuring
on that, my goodness.

43
00:03:33.747 --> 00:03:40.382
I'm going to be able to pull out
individual parts of that array.

44
00:03:40.382 --> 00:03:45.638
And then the character that
I give it matters, right?

45
00:03:45.638 --> 00:03:50.706
So, if I have this separated by spaces and
I say split on, I don't know,

46
00:03:50.706 --> 00:03:55.860
minus, I only get one thing cuz
there's nothing in there to split.

47
00:03:55.860 --> 00:04:00.549
There's no minus sign to split on or
no hyphen in this case to split on.

48
00:04:00.549 --> 00:04:03.220
So split is gonna come in handy here, and

49
00:04:03.220 --> 00:04:06.293
destructuring is also
going to come in handy.

50
00:04:06.293 --> 00:04:11.613
So our mission, should we choose to
accept it, is write this getBreedFromURL

51
00:04:11.613 --> 00:04:17.173
function that's going to take in a URL in
either one of these formats, either with

52
00:04:17.173 --> 00:04:23.670
a two-word breed separated by one hyphen
or a single-word breed with no hyphen.

53
00:04:23.670 --> 00:04:27.667
And we wanna get out just the breed name.

54
00:04:27.667 --> 00:04:32.180
And in the case of the two-word breeds,
it reverses them,

55
00:04:32.180 --> 00:04:36.440
it goes poodle-standard
instead of standard poodle.

56
00:04:37.970 --> 00:04:39.831
So this is our mission,
should we choose to accept it.

