WEBVTT

1
00:00:00.230 --> 00:00:02.700
Let us poke around with some values,
shall we?

2
00:00:03.950 --> 00:00:11.348
You can use the typeof operator to
figure out what these values are.

3
00:00:11.348 --> 00:00:17.822
And what I'm going to ask you'll to do,
is before you type anything in,

4
00:00:17.822 --> 00:00:22.812
guess, what type of value of
the ones that we've seen so

5
00:00:22.812 --> 00:00:25.693
far, are each of these values.

6
00:00:25.693 --> 00:00:29.847
So we're gonna take a moment to think
about it to ourselves and then use our

7
00:00:29.847 --> 00:00:34.213
typeof friend to check our answers and
then we'll talk through it together.

8
00:00:38.411 --> 00:00:39.890
Okay, so let's see.

9
00:00:40.990 --> 00:00:43.440
How do we feel about these values?

10
00:00:44.910 --> 00:00:46.280
Were we able to guess them?

11
00:00:47.330 --> 00:00:51.930
Sometimes, I would imagine at least one
would have been very difficult to guess.

12
00:00:51.930 --> 00:00:53.215
Okay, so let's see.

13
00:00:53.215 --> 00:00:55.758
False, what type is it?

14
00:00:55.758 --> 00:00:56.524
&gt;&gt; Boolean?

15
00:00:56.524 --> 00:00:57.658
&gt;&gt; Boolean, exactly.

16
00:00:57.658 --> 00:00:59.120
It is the counterpart to true.

17
00:00:59.120 --> 00:01:02.250
We already discussed these
are with no quotes around them.

18
00:01:02.250 --> 00:01:04.259
These are Boolean values,
and they're the only ones.

19
00:01:05.350 --> 00:01:08.040
How about the second one in quotes, true?

20
00:01:08.040 --> 00:01:11.860
We already looked at it a minute ago,
this is a, Stephen?

21
00:01:11.860 --> 00:01:13.930
&gt;&gt; String?
&gt;&gt; A string, exactly.

22
00:01:13.930 --> 00:01:15.545
So we looked at this a second ago,

23
00:01:15.545 --> 00:01:18.640
I think I probably still have
it in my history here, yeah.

24
00:01:18.640 --> 00:01:22.096
So typeof in quotes, true string.

25
00:01:22.096 --> 00:01:28.285
That's again different than if
we do typeof just the word true.

26
00:01:28.285 --> 00:01:32.068
Okay, how about document.title?

27
00:01:32.068 --> 00:01:34.400
What did we get?

28
00:01:34.400 --> 00:01:35.036
It's also a?

29
00:01:35.036 --> 00:01:36.390
&gt;&gt; String.
&gt;&gt; String, yes.

30
00:01:36.390 --> 00:01:40.087
So document.title, again,
we said that it's gonna be, well,

31
00:01:40.087 --> 00:01:43.990
in this case it's new tab because
I'm not even in a document.

32
00:01:43.990 --> 00:01:51.832
But if we typeof that,
We expect some kind of title,

33
00:01:51.832 --> 00:01:56.840
some kind of text to describe this page or
name this page.

34
00:01:58.160 --> 00:02:02.810
How about though, if we take a string
like some string, and then we do .length.

35
00:02:04.560 --> 00:02:05.630
What did this come back with?

36
00:02:05.630 --> 00:02:08.613
What type of value does
this come back with?

37
00:02:08.613 --> 00:02:09.419
&gt;&gt; Number.

38
00:02:09.419 --> 00:02:12.681
&gt;&gt; Number, so
remember the .length we said,

39
00:02:12.681 --> 00:02:17.368
we ran into it earlier,
it tells us on certain types of things.

40
00:02:17.368 --> 00:02:20.690
It tells us how many
things are in this thing.

41
00:02:20.690 --> 00:02:25.056
So we use it earlier to find out how many
children are in a certain element, or

42
00:02:25.056 --> 00:02:28.687
sort of the children of a certain
element in our HTML document.

43
00:02:28.687 --> 00:02:32.790
We can also use it on strings, and
we're gonna look at this in a second.

44
00:02:32.790 --> 00:02:36.795
So if I have some string and then .length,

45
00:02:36.795 --> 00:02:42.707
it's gonna give me a number and
I can confirm that with typeof.

46
00:02:42.707 --> 00:02:46.377
And we'll talk in a moment
about what that number is.

47
00:02:46.377 --> 00:02:48.101
How about the last one?

48
00:02:48.101 --> 00:02:49.824
Did anyone guess this?

49
00:02:49.824 --> 00:02:54.153
If you do, you have some kind
of JavaScript psychic powers.

50
00:02:54.153 --> 00:02:55.880
This one is super weird.

51
00:02:55.880 --> 00:03:03.690
So we said that, okay, we talked about
two types of nothingness in JavaScript.

52
00:03:03.690 --> 00:03:11.571
There's undefined, which if we typeof,
It's type is called undefined.

53
00:03:11.571 --> 00:03:13.671
And then the other typeof
nothingness is null,

54
00:03:13.671 --> 00:03:15.675
which really just represents nothing else.

55
00:03:15.675 --> 00:03:22.429
But, [LAUGH] if I right typeofnull,
did you find object?

56
00:03:22.429 --> 00:03:26.080
And now, you might be saying Anjanette,
you lied to us,

57
00:03:26.080 --> 00:03:29.046
when you said that null
is a primitive value and

58
00:03:29.046 --> 00:03:33.251
that JavaScript distinguishes
primitive values from objects.

59
00:03:33.251 --> 00:03:38.333
So why is null type object?

60
00:03:38.333 --> 00:03:42.032
Well, that is because sometimes
JavaScript makes no sense.

61
00:03:42.032 --> 00:03:44.678
[LAUGH] So, as I mentioned earlier,

62
00:03:44.678 --> 00:03:49.894
JavaScript was implemented in like
ten days in its original version.

63
00:03:49.894 --> 00:03:53.844
And there were certain historical
accidents that we're still dealing

64
00:03:53.844 --> 00:03:55.566
with all of these years later.

65
00:03:55.566 --> 00:04:00.414
And one of them is the fact that
typeofnull it says that it's an object

66
00:04:00.414 --> 00:04:03.016
even though null actually is a type.

67
00:04:03.016 --> 00:04:05.332
It is a primitive data type in JavaScript.

68
00:04:05.332 --> 00:04:10.256
So this is just a weird thing, and I bring
this up not because you need to know that

69
00:04:10.256 --> 00:04:15.788
typeofnull returns object, that is really
just an accident and there's interesting.

70
00:04:15.788 --> 00:04:19.514
You look it up on MDN and
blog posts and stuff like that,

71
00:04:19.514 --> 00:04:23.888
there's interesting reasons and
underlying low level like bit

72
00:04:23.888 --> 00:04:27.136
implementations of things that,
why this is.

73
00:04:27.136 --> 00:04:30.914
But the important part is that
sometimes JavaScript does stuff

74
00:04:30.914 --> 00:04:32.348
that we don't expect.

75
00:04:32.348 --> 00:04:36.221
But suffice it to say that despite
all of its historical accidents and

76
00:04:36.221 --> 00:04:40.585
all the fallout from it being a language
that was thrown together in ten days.

77
00:04:40.585 --> 00:04:45.334
Just to be a scripting language to
interface with the document that has now

78
00:04:45.334 --> 00:04:50.543
gone on to basically conquer the world and
exist in all kinds of other contexts and

79
00:04:50.543 --> 00:04:55.001
be one of the most powerful and
most widely used languages out there.

80
00:04:55.001 --> 00:04:57.265
We still have some like gotchas, or

81
00:04:57.265 --> 00:05:01.860
as they're often called in
the JavaScript community, wat, WAT.

82
00:05:01.860 --> 00:05:06.579
So you'll often hear about
there's a weird JavaScript wat,

83
00:05:06.579 --> 00:05:09.038
where typeofnull is an object.

84
00:05:09.038 --> 00:05:11.520
That's something you might run
into in your JavaScript journey.

85
00:05:11.520 --> 00:05:16.617
And I only bring this up now
because sometimes stuff is weird.

86
00:05:16.617 --> 00:05:18.614
So we don't need to worry
too much about this,

87
00:05:18.614 --> 00:05:21.036
this isn't gonna come up in
our daily lives very often.

88
00:05:21.036 --> 00:05:25.404
But suffice it to say, that JavaScript is
sometimes as these little Easter eggs that

89
00:05:25.404 --> 00:05:28.990
have interesting backstories but
not a lot of logical explanation.

90
00:05:30.820 --> 00:05:36.962
So, any questions about typeof or
these different primitive data types

91
00:05:36.962 --> 00:05:42.109
before we move on, and
talk in more detail about one of them?

92
00:05:42.109 --> 00:05:44.480
Yeah, question from the chat.

93
00:05:44.480 --> 00:05:49.831
&gt;&gt; Why is typeof undefined coming
out as in quotes undefined?

94
00:05:49.831 --> 00:05:53.176
&gt;&gt; Haha, so this is a great question.

95
00:05:53.176 --> 00:06:00.083
So for example,
when I do typeof 42 I get number.

96
00:06:00.083 --> 00:06:06.138
Why do I when I do typeof a in quotes 42,
I get string in quotes?

97
00:06:06.138 --> 00:06:13.735
So typeof, if we look it up, In our
MDN friend, we can type in typeof and

98
00:06:13.735 --> 00:06:18.953
go to the page, this is the definition
of the typeof, it's an operator.

99
00:06:18.953 --> 00:06:22.064
We're gonna talk about what
operators are a little bit later.

100
00:06:22.064 --> 00:06:25.541
But the typeof operator essentially
always returns a string.

101
00:06:25.541 --> 00:06:32.147
And the string corresponds to the name
of the type that this thing is.

102
00:06:32.147 --> 00:06:37.008
So, types themselves are identified
by these strings that indicate

103
00:06:37.008 --> 00:06:39.113
one of these several values.

104
00:06:39.113 --> 00:06:42.834
So string number, string,
string, string, Boolean, etc.

105
00:06:42.834 --> 00:06:46.150
And that is how typeof works
is it returns a string always.

106
00:06:47.210 --> 00:06:48.946
So great question.

107
00:06:48.946 --> 00:06:53.448
And as usual, if we have questions like
this when we're continuing our JavaScript

108
00:06:53.448 --> 00:06:56.294
journey, our friend MDN
usually knows the answer.

