WEBVTT

1
00:00:00.000 --> 00:00:04.110
Now, the next thing that
we're gonna start to want

2
00:00:04.110 --> 00:00:07.654
in our JavaScript programs are variables.

3
00:00:07.654 --> 00:00:09.731
And like Sarah McLachlan,

4
00:00:09.731 --> 00:00:14.977
our variables will remember the values
that we ask them to remember.

5
00:00:14.977 --> 00:00:18.129
So, so far, we've been working
with a lot of values just in and

6
00:00:18.129 --> 00:00:21.591
of themselves, and that means we've
had to repeat ourselves a lot.

7
00:00:21.591 --> 00:00:24.973
Like when we had those examples
of manipulating the DOM, and

8
00:00:24.973 --> 00:00:29.082
we would have to repeat document.query
selector, blah, blah, blah,

9
00:00:29.082 --> 00:00:32.622
a bunch of different times to get
the same thing out every time.

10
00:00:32.622 --> 00:00:37.583
Wouldn't it be nice if we could
just remember that value and

11
00:00:37.583 --> 00:00:41.466
have JavaScript given
to us whenever we want?

12
00:00:41.466 --> 00:00:44.112
And that is exactly
what variables are for.

13
00:00:44.112 --> 00:00:47.524
So for example,
I could create a variable, and

14
00:00:47.524 --> 00:00:52.729
this is a JavaScript spell that's
going to create a variable to remember

15
00:00:52.729 --> 00:00:57.612
a very important date,
the 21st of September, do you remember?

16
00:00:57.612 --> 00:01:02.842
Anyway, [LAUGH] and this is an example of

17
00:01:02.842 --> 00:01:09.822
this one way we can create
a variable in JavaScript.

18
00:01:09.822 --> 00:01:14.475
So looking at this line of code,
what do y'all notice about it?

19
00:01:14.475 --> 00:01:18.476
Just point out some things,
what do you notice in this code?

20
00:01:18.476 --> 00:01:23.294
And chat, feel free to chime in as well,
anything jumping out at us.

21
00:01:23.294 --> 00:01:24.348
&gt;&gt; Purple.

22
00:01:24.348 --> 00:01:28.539
&gt;&gt; Purple, [LAUGH] yes, in this
particular syntax highlighting theme,

23
00:01:28.539 --> 00:01:29.895
something is purple.

24
00:01:29.895 --> 00:01:30.917
What is purple?

25
00:01:32.030 --> 00:01:32.895
&gt;&gt; Let function.

26
00:01:32.895 --> 00:01:35.721
&gt;&gt; Let, this word let.

27
00:01:35.721 --> 00:01:36.864
What is this thing let?

28
00:01:36.864 --> 00:01:38.082
&gt;&gt; Function.

29
00:01:38.082 --> 00:01:40.534
&gt;&gt; TBD, is it a function?

30
00:01:40.534 --> 00:01:46.656
It is a special thing in JavaScript.

31
00:01:46.656 --> 00:01:53.541
We could call it a keyword, and
we could also ask our friend,

32
00:01:53.541 --> 00:01:57.592
MDN, more information about let.

33
00:01:57.592 --> 00:02:04.383
So let is a keyword that
lets us declare a variable.

34
00:02:04.383 --> 00:02:07.858
We're gonna talk more about some of
the other words on this page later.

35
00:02:07.858 --> 00:02:12.503
But let is a special keyword
that indicates a statement,

36
00:02:12.503 --> 00:02:19.582
which we're gonna talk about in a second,
that creates a new variable in JavaScript.

37
00:02:19.582 --> 00:02:24.423
So it's a special feature
of the JavaScript language

38
00:02:24.423 --> 00:02:28.735
that allows us to create or
declare a variable.

39
00:02:28.735 --> 00:02:33.506
So let is what tells JavaScript,
hey, on this line of code,

40
00:02:33.506 --> 00:02:38.666
I want a new variable, and
I want to call that variable remember.

41
00:02:38.666 --> 00:02:40.738
And remember is something,
it's not in purple.

42
00:02:40.738 --> 00:02:45.052
So purple in this scheme, but the syntax
highlighting if you're using a text editor

43
00:02:45.052 --> 00:02:48.589
or you're looking at code examples on MDN,
or something like that.

44
00:02:48.589 --> 00:02:53.490
The syntax highlighting will often
tell you what kind of thing each

45
00:02:53.490 --> 00:02:54.985
word on the page is.

46
00:02:54.985 --> 00:02:59.703
And in this case, it's telling us that let
is a special reserved JavaScript keyword

47
00:02:59.703 --> 00:03:01.508
that means something special.

48
00:03:01.508 --> 00:03:06.416
In this case, it means, hey,
JavaScript, I want a new variable.

49
00:03:06.416 --> 00:03:09.894
And in this case,
remember is just a name that I chose for

50
00:03:09.894 --> 00:03:12.268
this variable, and that's up to me.

51
00:03:12.268 --> 00:03:14.459
We're gonna talk a little
bit about names in a second.

52
00:03:14.459 --> 00:03:20.947
All right, anything else you notice on
this line of code or in this line of code?

53
00:03:23.602 --> 00:03:29.317
Anything else that may be new that
we haven't really seen a lot yet?

54
00:03:29.317 --> 00:03:30.296
&gt;&gt; Variable.

55
00:03:30.296 --> 00:03:32.596
&gt;&gt; Well, yes, it's a variable, exactly.

56
00:03:32.596 --> 00:03:38.450
So the remember is the variable name here,
and we're gonna talk about that.

57
00:03:38.450 --> 00:03:40.889
What about in terms of the syntax or

58
00:03:40.889 --> 00:03:44.597
the symbols that are popping
up in this line of code?

59
00:03:44.597 --> 00:03:49.517
Is there any character or
symbol that is jumping out at us as maybe

60
00:03:49.517 --> 00:03:54.267
a little different than something
we've seen before, Chu?

61
00:03:54.267 --> 00:03:55.612
&gt;&gt; Equals.

62
00:03:55.612 --> 00:03:58.112
&gt;&gt; So we have the equals,
the single equals.

63
00:03:58.112 --> 00:04:03.082
Yes, so we saw that in a couple of
the things that I just told you to write

64
00:04:03.082 --> 00:04:06.131
in the computer without explaining them.

65
00:04:06.131 --> 00:04:08.441
And the single equals is different than,

66
00:04:08.441 --> 00:04:12.206
let's say we just saw the triple
equals for the equality operator.

67
00:04:12.206 --> 00:04:15.498
So yes, the equal sign here,

68
00:04:15.498 --> 00:04:20.515
this is what we call
an assignment operator.

69
00:04:20.515 --> 00:04:24.157
So what this equal sign is saying,
hey, JavaScript,

70
00:04:24.157 --> 00:04:27.970
the let is saying create a new
variable called remember.

71
00:04:27.970 --> 00:04:32.709
And the equals is saying,
assign a value to that

72
00:04:32.709 --> 00:04:36.749
variable of the stuff after the equals.

73
00:04:36.749 --> 00:04:38.495
So excellent point,

74
00:04:38.495 --> 00:04:44.319
the equals is doing a lot of heavy
lifting here in this tiny line of code.

75
00:04:44.319 --> 00:04:48.352
And to the right of the equals,
we have "Sept 21",

76
00:04:48.352 --> 00:04:51.354
which is something we've seen before.

77
00:04:51.354 --> 00:04:52.823
So what is that?

78
00:04:52.823 --> 00:04:53.516
Yeah.

79
00:04:53.516 --> 00:04:54.266
&gt;&gt; A string.

80
00:04:54.266 --> 00:04:55.477
&gt;&gt; It's a string, exactly.

81
00:04:55.477 --> 00:04:58.342
It is a string value, a literal value.

82
00:04:58.342 --> 00:05:00.600
We said it's one of
the primitive data types.

83
00:05:00.600 --> 00:05:03.652
So it's a string value
that we're going to say,

84
00:05:03.652 --> 00:05:06.194
this is the value I want you to remember.

85
00:05:06.194 --> 00:05:09.895
I want you to remember the 21st of
September, cuz Earth, wind, and

86
00:05:09.895 --> 00:05:10.666
fire said so.

87
00:05:10.666 --> 00:05:14.944
So [LAUGH] that is the value
that we're going to be asking

88
00:05:14.944 --> 00:05:17.458
JavaScript to remember for us.

89
00:05:17.458 --> 00:05:21.719
And then there's one other thing left that
we haven't talked about yet, which is?

90
00:05:21.719 --> 00:05:22.324
&gt;&gt; Semicolon.

91
00:05:22.324 --> 00:05:26.109
&gt;&gt; A semicolon at the end
of this piece of code.

92
00:05:26.109 --> 00:05:31.940
And we're going to talk a little bit
later about where semicolons show up.

93
00:05:31.940 --> 00:05:37.057
But essentially, this semicolon is saying,
I'm done talking, JavaScript, I am done.

94
00:05:37.057 --> 00:05:39.551
That is the command I would
like you to go carry out.

95
00:05:39.551 --> 00:05:43.854
Go remember this value, September 21,

96
00:05:43.854 --> 00:05:48.163
as a string in a variable called remember.

97
00:05:48.163 --> 00:05:51.884
And instead of using a period like
we would in an English sentence,

98
00:05:51.884 --> 00:05:54.685
we use a semicolon to say full stop,
JavaScript.

99
00:05:54.685 --> 00:05:57.812
[LAUGH] Okay, look at this.

100
00:05:57.812 --> 00:06:02.206
We just unpacked so much stuff out
of this one tiny line of code.

101
00:06:02.206 --> 00:06:10.556
So let us talk about,
Declaring a variable.

102
00:06:10.556 --> 00:06:15.116
As Michael Scott from
The Office once said,

103
00:06:15.116 --> 00:06:19.562
if you just shout, I declare bankruptcy.

104
00:06:19.562 --> 00:06:22.830
[LAUGH] Have you declared bankruptcy?

105
00:06:22.830 --> 00:06:26.354
I mean, are you now,
as far as the government or

106
00:06:26.354 --> 00:06:29.366
what have you is concerned, bankrupt?

107
00:06:29.366 --> 00:06:34.316
So declaring a variable in
this case is separate from

108
00:06:34.316 --> 00:06:39.722
actually making a meaningful
variable that you can use.

109
00:06:39.722 --> 00:06:43.634
And what this let keyword does
that we just looked at, is, and

110
00:06:43.634 --> 00:06:48.376
it's not the only one, but it is one
way that we can declare a new variable,

111
00:06:48.376 --> 00:06:53.296
is it says, hey, JavaScript,
create a new variable, name it bankruptcy.

112
00:06:55.005 --> 00:07:01.695
And so the question here is,
if we go back to our previous example,

113
00:07:01.695 --> 00:07:06.712
and I say, let remember = "Sept.21" ; what

114
00:07:06.712 --> 00:07:11.855
do you think is the value
of the remember variable?

115
00:07:11.855 --> 00:07:14.219
&gt;&gt; A string.

116
00:07:14.219 --> 00:07:16.142
&gt;&gt; A string, which string?

117
00:07:18.028 --> 00:07:20.099
Sept.21, yes.

118
00:07:20.099 --> 00:07:24.618
Okay, but if I just say let bankruptcy,
as in I declare bankruptcy, and

119
00:07:24.618 --> 00:07:27.804
then put a semicolon,
no equals, no value there,

120
00:07:27.804 --> 00:07:30.860
what do you think is
the value of bankruptcy now?

121
00:07:33.642 --> 00:07:34.260
&gt;&gt; Undefined.

122
00:07:34.260 --> 00:07:35.408
&gt;&gt; Any guesses?

123
00:07:35.408 --> 00:07:37.758
&gt;&gt; Undefined, undefined,
I heard undefined a couple of times.

124
00:07:37.758 --> 00:07:38.875
Exactly, yes.

125
00:07:38.875 --> 00:07:41.955
So let's try this out.

126
00:07:41.955 --> 00:07:47.100
Before, We had let

127
00:07:47.100 --> 00:07:52.179
remember = "Sept.21" ;.

128
00:07:52.179 --> 00:07:56.974
Now, JavaScript console said undefined,
we're gonna talk about that in a second.

129
00:07:56.974 --> 00:08:02.059
But if I now type in the word
remember into my JavaScript console,

130
00:08:02.059 --> 00:08:08.907
no quote, nothing, just a name, it says,
yeah, I remember, it's September 21.

131
00:08:08.907 --> 00:08:14.153
If I do let bankruptcy;, again,
JavaScript console says undefined,

132
00:08:14.153 --> 00:08:17.853
we'll talk about that in a moment,
or a bit later.

133
00:08:17.853 --> 00:08:19.966
But now if I type in the name bankruptcy,

134
00:08:19.966 --> 00:08:22.839
the value that JavaScript
gives me back is undefined.

135
00:08:22.839 --> 00:08:26.827
I haven't given it a value to remember,
I have just said, hey, JavaScript, I want

136
00:08:26.827 --> 00:08:30.438
you to create a variable, and I haven't
given it any value to remember yet.

137
00:08:30.438 --> 00:08:32.961
&gt;&gt; Why is it undefined?

138
00:08:32.961 --> 00:08:35.114
I'm expecting it to be a null.

139
00:08:35.114 --> 00:08:38.835
&gt;&gt; Interesting, so why do we have the,

140
00:08:40.822 --> 00:08:45.341
Why do we have the value of a variable
that I've just declared, but

141
00:08:45.341 --> 00:08:49.631
I haven't given a value yet,
why is it undefined and not null?

142
00:08:49.631 --> 00:08:53.411
And to this, I would say, let's go back
and think about our Backstreet Boys.

143
00:08:53.411 --> 00:08:58.601
[LAUGH] So a null value would
be something where I'm like,

144
00:08:58.601 --> 00:09:04.221
hey, JavaScript,
I want you to remember that, let's say,

145
00:09:04.221 --> 00:09:09.214
I'm not bankrupt,
that there is no bankruptcy here.

146
00:09:09.214 --> 00:09:15.872
In which case,
I could do let bankruptcy = null;.

147
00:09:17.730 --> 00:09:20.182
And now, if I ask JavaScript,
what's bankruptcy?

148
00:09:20.182 --> 00:09:23.279
It's null, there's no bankruptcy,
there has been no bankruptcy.

149
00:09:23.279 --> 00:09:26.604
So this is sort of a way that I can
say in my program, and usually,

150
00:09:26.604 --> 00:09:29.930
if I'm saying this,
it's like I'm talking to another coder,

151
00:09:29.930 --> 00:09:33.712
maybe he was reading my code later,
maybe that coder is me in the future.

152
00:09:33.712 --> 00:09:38.634
And I'm saying, I deliberately
want this value to be empty,

153
00:09:38.634 --> 00:09:42.336
I deliberately want there
to be no value here.

154
00:09:42.336 --> 00:09:47.412
I don't want bankruptcy,
I want a null value for bankruptcy.

155
00:09:47.412 --> 00:09:52.259
However, if I, and I'm refreshing my tab
here to clear out my JavaScript context,

156
00:09:52.259 --> 00:09:54.594
that's gonna be important in a second.

157
00:09:54.594 --> 00:09:58.973
If I just say, let bankruptcy;
without saying anything more,

158
00:09:58.973 --> 00:10:03.106
JavaScript is gonna say, hey,
I don't know if you meant for

159
00:10:03.106 --> 00:10:06.772
there to be a value here,
but there's no value here.

160
00:10:06.772 --> 00:10:09.073
So that is the kind of ain't nothing but

161
00:10:09.073 --> 00:10:13.888
a mistake version of nothingness of maybe
there is supposed to be something here,

162
00:10:13.888 --> 00:10:16.915
I don't know,
you didn't tell me, programmer.

163
00:10:16.915 --> 00:10:21.062
But I can tell you that there's
nothing here, so undefined,

164
00:10:21.062 --> 00:10:23.710
I don't have any definition for this.

165
00:10:23.710 --> 00:10:25.456
Does that make sense?

166
00:10:25.456 --> 00:10:26.654
Awesome, great question.

167
00:10:28.661 --> 00:10:36.044
Okay, so when we declare a variable like
that without giving it a value with let,

168
00:10:36.044 --> 00:10:41.710
we can use let to do this,
we can later go in and give it a value.

169
00:10:41.710 --> 00:10:46.940
And so
if just let bankruptcy here is called

170
00:10:46.940 --> 00:10:52.180
declaring a variable called bankruptcy.

171
00:10:52.180 --> 00:10:57.409
In the second line here,
what we're doing is assigning

172
00:10:57.409 --> 00:11:03.650
a value to that variable that we
had declared on the previous line.

173
00:11:03.650 --> 00:11:09.549
So what this looks like is if I do,

174
00:11:14.152 --> 00:11:19.658
If I do let myDeclaredVariable;, and
now I asked for myDeclaredVariable,

175
00:11:19.658 --> 00:11:24.486
which now my browser is getting smarter,
because it knows that this

176
00:11:24.486 --> 00:11:29.421
might be a value that I want, so
it has an autocomplete option for me.

177
00:11:29.421 --> 00:11:31.509
It's undefined,
same as the bankruptcy thing.

178
00:11:31.509 --> 00:11:38.368
But now, if I type myDeclaredVariable
= "so value much wow",

179
00:11:40.334 --> 00:11:43.944
Now, if I ask again,
what is my declared variable?

180
00:11:43.944 --> 00:11:49.943
Now, it has something it
remembers at that variable.

181
00:11:49.943 --> 00:11:56.548
And so what we've done here is we have
essentially split onto two lines,

182
00:11:56.548 --> 00:12:01.746
which maybe could be at two
different places in our code,

183
00:12:01.746 --> 00:12:08.701
the same thing as if I were to say,
let remember = some value all on one line.

184
00:12:08.701 --> 00:12:13.372
So this line is doing both
the variable declaration, saying, hey,

185
00:12:13.372 --> 00:12:18.043
JavaScript, make me a new variable,
and the variable assignment,

186
00:12:18.043 --> 00:12:22.897
hey, JavaScript, remember this value
as the value of that variable.

187
00:12:24.983 --> 00:12:28.279
So there's a separation, in this case,

188
00:12:28.279 --> 00:12:31.961
between the assignment and
the declaration.

189
00:12:31.961 --> 00:12:34.639
Whereas on the first line that we saw,

190
00:12:34.639 --> 00:12:39.588
the remember September 21st,
that all happens in one line of code.

191
00:12:39.588 --> 00:12:43.446
The point to take away here is that in
order for JavaScript to remember a value,

192
00:12:43.446 --> 00:12:44.505
you need two things.

193
00:12:44.505 --> 00:12:46.803
You need to declare a variable and

194
00:12:46.803 --> 00:12:51.001
you need to assign the value you
care about to that variable.

195
00:12:51.001 --> 00:12:53.037
So we have now seen two
ways of doing this.

196
00:12:53.037 --> 00:12:58.415
We can declare and assign separately
using let variable, semicolon,

197
00:12:58.415 --> 00:13:03.434
and then somewhere later,
the equals operator, single equals,

198
00:13:03.434 --> 00:13:08.467
as the assignment operator to assign
a new value to that variable.

199
00:13:08.467 --> 00:13:10.592
And this is also, by the way,

200
00:13:10.592 --> 00:13:16.471
what we did before when we said
document.query selectorblah.textcontent =.

201
00:13:16.471 --> 00:13:20.473
That's also what we did, we assigned
a new value to that text content.

202
00:13:20.473 --> 00:13:23.177
We'll talk a little bit later about
what all those dots were doing.

203
00:13:23.177 --> 00:13:29.333
Or we can do it all at once,
"such efficient, amaze"; wow.

204
00:13:29.333 --> 00:13:33.232
Okey-doke, so
let's talk a little bit about what is

205
00:13:33.232 --> 00:13:37.230
happening here when we declare and
assign variables.

206
00:13:37.230 --> 00:13:42.570
And again, we're focusing on kind
of our mental models of what

207
00:13:42.570 --> 00:13:48.739
JavaScript's internal mental model
is of variables and how they work.

208
00:13:48.739 --> 00:13:53.180
So let's think about it in
terms of a couple of things.

209
00:13:53.180 --> 00:13:59.330
So when we're dealing with variables,
we have the variables themselves

210
00:13:59.330 --> 00:14:04.797
that we could imagine JavaScript
has kind of a little catalog of.

211
00:14:04.797 --> 00:14:07.350
We'll talk about exactly
what's going on in a second.

212
00:14:07.350 --> 00:14:14.316
And then some kind of values that we
care about in relation to the word.

213
00:14:14.316 --> 00:14:19.770
So when we have, let's say,
our initial when we said,

214
00:14:19.770 --> 00:14:23.380
let remember equal September 21.

215
00:14:23.380 --> 00:14:28.385
What we're doing essentially
is with the let remember part,

216
00:14:28.385 --> 00:14:34.558
we're saying, hey, JavaScript,
I want a new variable called remember.

217
00:14:36.484 --> 00:14:40.913
And then when we have
the equals September 21,

218
00:14:40.913 --> 00:14:46.759
we're saying, and
I care about a value called September 21.

219
00:14:46.759 --> 00:14:50.713
It's a string, has type string,
what have you.

220
00:14:50.713 --> 00:14:56.217
And JavaScript,
I want you to connect that value

221
00:14:56.217 --> 00:15:03.476
to the variable that I've asked
you to create called remember.

222
00:15:03.476 --> 00:15:08.098
When we declare a variable with just let

223
00:15:08.098 --> 00:15:13.538
bankruptcy;, What are we saying?

224
00:15:13.538 --> 00:15:14.938
What do you think?

225
00:15:14.938 --> 00:15:20.979
Maybe, Jason,
I feel like you have a thought brewing.

226
00:15:20.979 --> 00:15:26.838
When I say let bankruptcy;,
what am I telling JavaScript?

227
00:15:26.838 --> 00:15:28.061
&gt;&gt; Let bankruptcy?

228
00:15:28.061 --> 00:15:31.710
&gt;&gt; For example.

229
00:15:31.710 --> 00:15:33.926
&gt;&gt; You're just declaring that variable.

230
00:15:33.926 --> 00:15:35.722
&gt;&gt; I'm declaring the variable, exactly.

231
00:15:35.722 --> 00:15:40.383
So I'm saying, hey, JavaScript,
I want a new variable,

232
00:15:40.383 --> 00:15:43.002
I want it to be named bankruptcy.

233
00:15:43.002 --> 00:15:45.731
And I haven't said
anything about any values.

234
00:15:45.731 --> 00:15:50.860
And so that's where when JavaScript looks
for a value, it doesn't see any value

235
00:15:50.860 --> 00:15:56.532
related to that variable, and it's like,
undefined, don't have a value there.

236
00:15:56.532 --> 00:16:00.995
As opposed to, for example,
to go back to Chu's question,

237
00:16:00.995 --> 00:16:05.554
when we had, okay,
what if we say let bankruptcy equal null?

238
00:16:05.554 --> 00:16:08.874
And so then maybe we're saying,
JavaScript, actually,

239
00:16:08.874 --> 00:16:12.323
I want you to remember the value null,
but that'll be different.

240
00:16:12.323 --> 00:16:15.034
So if we're just declaring the variable,

241
00:16:15.034 --> 00:16:18.208
then we aren't saying
anything about any value.

242
00:16:20.505 --> 00:16:25.402
And we're gonna come back to this in
a moment to kind of understand what

243
00:16:25.402 --> 00:16:29.635
is happening with these variables
when we manipulate them.

244
00:16:29.635 --> 00:16:33.958
But so I just wanna focus this as a way
we can think about the difference between

245
00:16:33.958 --> 00:16:38.097
the variable and any values that may or
may not be related to the variable.

