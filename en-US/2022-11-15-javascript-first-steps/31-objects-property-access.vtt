WEBVTT

1
00:00:00.000 --> 00:00:00.938
How we feeling?

2
00:00:00.938 --> 00:00:02.826
We got a lot of stuff under our belt so
far.

3
00:00:02.826 --> 00:00:04.642
We've had all kinds of
values we've talked about.

4
00:00:04.642 --> 00:00:09.978
We talked about strings, and Boolean,
and numbers, and arrays now.

5
00:00:09.978 --> 00:00:13.811
Look at this, we're really getting a lot
of little feathers in our cap here.

6
00:00:13.811 --> 00:00:17.931
There's one more important type of
data that we really need to talk

7
00:00:17.931 --> 00:00:21.258
about a little bit more detail,
and that is objects.

8
00:00:21.258 --> 00:00:27.400
So we've seen some objects before already,
like, for example, at the beginning,

9
00:00:27.400 --> 00:00:31.939
I showed an object called JS with
some facts about JavaScript.

10
00:00:31.939 --> 00:00:39.261
Like that its birth year was 1995,
and that it's an awesome language.

11
00:00:39.261 --> 00:00:40.793
True, it is awesome.

12
00:00:40.793 --> 00:00:44.309
So [LAUGH] this is
an example of an object.

13
00:00:44.309 --> 00:00:45.568
What do you notice?

14
00:00:45.568 --> 00:00:49.843
What do you notice in this, so
this is the declaration and

15
00:00:49.843 --> 00:00:55.189
assignment of a variable JS,
that assigns that variable to an object,

16
00:00:55.189 --> 00:00:57.703
to a piece of data of type object.

17
00:00:57.703 --> 00:00:59.633
What do you notice?

18
00:00:59.633 --> 00:01:01.228
&gt;&gt; Squiggly.

19
00:01:01.228 --> 00:01:04.307
&gt;&gt; Squiggles, squiggly lines,
squiggly braces, yes.

20
00:01:04.307 --> 00:01:09.913
We call those curly braces, these
characters at the beginning and end here.

21
00:01:09.913 --> 00:01:11.444
Curly braces, yes.

22
00:01:11.444 --> 00:01:16.856
Curly braces in JavaScript have
a bunch of different uses,

23
00:01:16.856 --> 00:01:21.958
but one of their uses is to
indicate an object is in here.

24
00:01:21.958 --> 00:01:24.399
What else?

25
00:01:24.399 --> 00:01:26.254
&gt;&gt; Attributes?

26
00:01:26.254 --> 00:01:29.182
&gt;&gt; Something from the chat?

27
00:01:29.182 --> 00:01:31.181
&gt;&gt; It has a property and value.

28
00:01:31.181 --> 00:01:32.907
&gt;&gt; Properties and values, yes.

29
00:01:32.907 --> 00:01:33.686
So we're gonna talk about this.

30
00:01:33.686 --> 00:01:37.650
So we have these colons on each line here.

31
00:01:37.650 --> 00:01:42.781
And to the left of the colon is
something that doesn't have quotes

32
00:01:42.781 --> 00:01:48.021
around it in this case, and
then on the right is some kind of value.

33
00:01:48.021 --> 00:01:53.013
And so these are sort of, we could think

34
00:01:53.013 --> 00:01:57.716
of them as pseudo variables almost.

35
00:01:57.716 --> 00:02:02.646
Each of these little names,
like abbreviation, is awesome,

36
00:02:02.646 --> 00:02:07.483
birth year, is kind of like
a little pseudo variable within my

37
00:02:07.483 --> 00:02:10.849
object that points at a particular value.

38
00:02:10.849 --> 00:02:14.020
So, similar to how in our program,

39
00:02:14.020 --> 00:02:19.945
we can declare different variables
to point at different values,

40
00:02:19.945 --> 00:02:24.915
objects let us have one value,
this object that has what

41
00:02:24.915 --> 00:02:29.607
we call properties that
point at different values.

42
00:02:33.640 --> 00:02:38.635
So when we want to get the value
of a property in an object in

43
00:02:38.635 --> 00:02:41.562
JavaScript, we use these dots.

44
00:02:41.562 --> 00:02:43.951
We've seen these before, right?

45
00:02:43.951 --> 00:02:49.263
And so if I want to get out a value
from my object, I can use dot, and then

46
00:02:49.263 --> 00:02:55.048
the name of the property that I pointed
at that value to retrieve that value.

47
00:02:55.048 --> 00:02:59.260
So let's grab our JavaScript object.

48
00:02:59.260 --> 00:03:04.746
I'm going to, Let's put our
JavaScript object into our console.

49
00:03:04.746 --> 00:03:09.881
So now JS, if I evaluate it, the console
tells me yep, that's an object,

50
00:03:09.881 --> 00:03:15.117
and it has some stuff in it, and it looks
pretty similar to how I declared it.

51
00:03:15.117 --> 00:03:22.684
And now, if I want to get out the word
JavaScript, I can type js.name.

52
00:03:22.684 --> 00:03:26.663
And JavaScript is going to
look up the JS object and

53
00:03:26.663 --> 00:03:32.753
look up the name pointer within that
object and find the string JavaScript.

54
00:03:32.753 --> 00:03:39.678
How can I get the Boolean
true out of here?.

55
00:03:39.678 --> 00:03:41.091
&gt;&gt; Js.isAwesome.

56
00:03:41.091 --> 00:03:46.602
&gt;&gt; Js.isAwesome, true, exactly.

57
00:03:46.602 --> 00:03:52.408
So this dot notation is
how we access values that

58
00:03:52.408 --> 00:03:58.805
are kind of collected as
properties of that object.

59
00:03:58.805 --> 00:04:03.545
&gt;&gt; Does JavaScript care if you
have multiple properties and

60
00:04:03.545 --> 00:04:08.291
values in one line, or
do you have to break it out by line?

61
00:04:08.291 --> 00:04:10.588
&gt;&gt; Do we have to break it out by line?

62
00:04:10.588 --> 00:04:11.520
Great question.

63
00:04:11.520 --> 00:04:17.335
So here, for example, I have each property
and its value on a different line.

64
00:04:17.335 --> 00:04:23.704
We could create a new object, objy,
[LAUGH] that's going to have,

65
00:04:23.704 --> 00:04:28.048
let's say, I don't know a different name.

66
00:04:28.048 --> 00:04:33.355
Objy, that's maybe confusing,

67
00:04:33.355 --> 00:04:36.834
Object McObjectson.

68
00:04:36.834 --> 00:04:43.779
[LAUGH] And maybe a, I don't know,

69
00:04:43.779 --> 00:04:47.857
awesomeness of 5.

70
00:04:47.857 --> 00:04:50.508
So in this case,
I'm declaring this object all on one line.

71
00:04:53.953 --> 00:04:55.086
Is anything different?

72
00:04:55.086 --> 00:04:56.750
No, JavaScript doesn't care.

73
00:04:56.750 --> 00:05:00.525
What it does care about is that I tell it,
hey, JavaScript,

74
00:05:00.525 --> 00:05:04.821
this is one property and its value,
and here's another property and

75
00:05:04.821 --> 00:05:08.398
its value, and
here's another property and its value.

76
00:05:08.398 --> 00:05:13.106
And there is a piece of punctuation that
we need to include to tell JavaScript

77
00:05:13.106 --> 00:05:16.208
where properties and
their values start and end.

78
00:05:16.208 --> 00:05:22.668
So what separates the different property
assignments here, which character?

79
00:05:22.668 --> 00:05:23.380
&gt;&gt; Comma.

80
00:05:23.380 --> 00:05:25.166
&gt;&gt; Comma, exactly.

81
00:05:25.166 --> 00:05:28.921
So the commas are what tells JavaScript,
this is a new property and

82
00:05:28.921 --> 00:05:31.684
its value, this is a new property and
its value.

83
00:05:31.684 --> 00:05:33.486
The commas are what matters,
not the line breaks.

84
00:05:33.486 --> 00:05:36.220
However, you will see,
in most JavaScript code,

85
00:05:36.220 --> 00:05:39.655
especially for complex objects,
a little bit of a convention,

86
00:05:39.655 --> 00:05:44.124
unless it's a very short object with small
number of properties and short values.

87
00:05:44.124 --> 00:05:48.442
You'll see just conventionally them
separated onto different lines,

88
00:05:48.442 --> 00:05:52.060
just to make the code more readable,
it's really all it is.

89
00:05:52.060 --> 00:05:53.929
So let's talk about what's happening here.

90
00:05:59.316 --> 00:06:03.523
When we get property values.

91
00:06:03.523 --> 00:06:05.450
We'll move into that in a second.

92
00:06:05.450 --> 00:06:12.468
When we use property value, basically
when we access the value with js.name, or

93
00:06:12.468 --> 00:06:19.602
what have you, that is going to evaluate
to the value that property is pointing to.

94
00:06:19.602 --> 00:06:22.754
So in this case, it's a string, and

95
00:06:22.754 --> 00:06:27.345
that means I can do stringy
stuff with that property.

96
00:06:27.345 --> 00:06:30.164
So, for example, I can use my startsWith.

97
00:06:30.164 --> 00:06:35.891
Remember, we had the string spell
startsWith that tells us whether or

98
00:06:35.891 --> 00:06:39.494
not a string begins
with some other string.

99
00:06:39.494 --> 00:06:44.139
Okay, so I can call that on
js.name the same way as I

100
00:06:44.139 --> 00:06:49.011
would call it on just
the literal string JavaScript.

101
00:06:49.011 --> 00:06:50.771
We can prove that to ourselves.

102
00:06:50.771 --> 00:06:53.435
Js.name.startsWith Java, true,

103
00:06:53.435 --> 00:06:57.522
because js.name evaluates to the string,
JavaScript.

104
00:06:57.522 --> 00:07:04.250
So we can use this dot notation as if
we're using the value of the property.

105
00:07:04.250 --> 00:07:06.808
Similar to how we can use variables,
right?

106
00:07:06.808 --> 00:07:10.783
And similarly, we can use it
wherever we would use a value.

107
00:07:10.783 --> 00:07:15.303
So for example,
I could assign a new variable to

108
00:07:15.303 --> 00:07:19.710
the expression 2022- js.birthYear and

109
00:07:19.710 --> 00:07:25.699
assign that to the variable age
to capture JavaScript's age.

110
00:07:25.699 --> 00:07:30.963
So if I run this, and
I now ask for age, I'll see that

111
00:07:30.963 --> 00:07:37.087
JavaScript is 27-years-old,
it's getting up there.

112
00:07:37.087 --> 00:07:44.542
[LAUGH] Yes, so we can even,

113
00:07:46.478 --> 00:07:50.912
Assign two properties on the object.

114
00:07:50.912 --> 00:07:53.976
Let's say I have an object
called indecisive,

115
00:07:53.976 --> 00:07:59.041
where I've declared a property called
lunch that points to a value sandwich.

116
00:07:59.041 --> 00:08:03.171
But then later, because it's indecisive,
it decides that instead of sandwich,

117
00:08:03.171 --> 00:08:04.534
it wants lunch to be tacos.

118
00:08:07.913 --> 00:08:13.105
We can use the dot notation
on the left-hand side of

119
00:08:13.105 --> 00:08:20.125
an equal sign to reassign the property
to point to a different value.

120
00:08:20.125 --> 00:08:25.543
So if I run this code and
I make my indecisive object,

121
00:08:25.543 --> 00:08:30.726
let's just double-check,
lunch is sandwich.

122
00:08:30.726 --> 00:08:35.100
And if I asked for indecisive.lunch,
I get, as expected, sandwich.

123
00:08:35.100 --> 00:08:39.170
If I now use my assignment
operator equals,

124
00:08:39.170 --> 00:08:45.001
with the property indecisive.lunch
on the left-hand side,

125
00:08:45.001 --> 00:08:49.078
and I run this code and
assign this to tacos.

126
00:08:49.078 --> 00:08:55.053
Indecisive.lunch now, Has become tacos.

127
00:08:55.053 --> 00:09:02.170
Sandwich is forgotten,
so yesterday's lunch.

128
00:09:02.170 --> 00:09:07.140
The interesting thing is
that I can even do this

129
00:09:07.140 --> 00:09:12.243
to assign a new property
on an existing object.

130
00:09:12.243 --> 00:09:15.848
So I can, for example,
even though indecisive right now,

131
00:09:15.848 --> 00:09:19.105
it only knows about one property,
it only has lunch.

132
00:09:19.105 --> 00:09:24.354
I can declare a new property using a dot.

133
00:09:24.354 --> 00:09:27.267
So I can say indecisive.snack
is a new thing,

134
00:09:27.267 --> 00:09:31.168
a new property on the indecisive object,
and give it a value.

135
00:09:31.168 --> 00:09:37.352
And now, if I ask for indecisive,
it has two properties, lunch and snack.

136
00:09:37.352 --> 00:09:40.762
So are objects mutable or immutable?

137
00:09:40.762 --> 00:09:41.552
&gt;&gt; Mutable.

138
00:09:41.552 --> 00:09:43.028
&gt;&gt; Mutable.

139
00:09:43.028 --> 00:09:46.466
I can change them,
I have just been doing that.

140
00:09:46.466 --> 00:09:51.085
So our indecisive object, it is so
named as indecisive because

141
00:09:51.085 --> 00:09:55.894
objects are mutable, so
you can change what's in them as you go.

