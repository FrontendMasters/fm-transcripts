WEBVTT

1
00:00:00.109 --> 00:00:02.311
We are well on our way.

2
00:00:02.311 --> 00:00:06.594
We've taken some of our first steps and
we have more steps to take.

3
00:00:06.594 --> 00:00:10.669
So, what we're going to do
now is pause a little bit and

4
00:00:10.669 --> 00:00:15.200
look at some of the things we've
been writing these spells.

5
00:00:15.200 --> 00:00:18.757
I've just been like, say this thing
into your browser console and

6
00:00:18.757 --> 00:00:19.846
magic will happen.

7
00:00:19.846 --> 00:00:22.143
And we've been getting to
know some of the spells.

8
00:00:22.143 --> 00:00:25.083
And how to say them and
what like circles of candles

9
00:00:25.083 --> 00:00:29.566
we need to arrange around ourselves in
order for things to do what we expect.

10
00:00:29.566 --> 00:00:32.496
What we're going to do now
is take a look at some of

11
00:00:32.496 --> 00:00:37.356
the things that we've been working with
that we didn't even really talk about or

12
00:00:37.356 --> 00:00:39.865
think about and drill into what they are.

13
00:00:39.865 --> 00:00:45.300
Namely, I'm talking about chunks
of information that we call data.

14
00:00:45.300 --> 00:00:49.183
And that we can call
values of certain types.

15
00:00:49.183 --> 00:00:54.513
So we've seen things like this so far for
example, in quotes, double quotes

16
00:00:54.513 --> 00:00:59.770
we've seen the word Tic Tac Toe, as like
the title or the header of the page.

17
00:00:59.770 --> 00:01:01.894
We've seen numbers like 9.

18
00:01:01.894 --> 00:01:03.403
Don't have quotes around them.

19
00:01:03.403 --> 00:01:06.962
We've seen other things in quotes,
like the #board, right?

20
00:01:06.962 --> 00:01:09.156
That we said was a CSS selector.

21
00:01:09.156 --> 00:01:12.313
But what are these things
that we've been working with,

22
00:01:12.313 --> 00:01:14.963
that we haven't really named or
talked about?

23
00:01:14.963 --> 00:01:18.019
So, these are values in JavaScript.

24
00:01:18.019 --> 00:01:23.119
These are chunks of information.

25
00:01:23.119 --> 00:01:28.119
We could call them data in terms
of units of information that

26
00:01:28.119 --> 00:01:30.921
have certain characteristics.

27
00:01:30.921 --> 00:01:32.871
So they represent different
types of information.

28
00:01:32.871 --> 00:01:36.120
They represent different
kinds of things in the world.

29
00:01:36.120 --> 00:01:42.464
And they literally are two JavaScript
different kinds of things.

30
00:01:42.464 --> 00:01:43.951
So the information or

31
00:01:43.951 --> 00:01:49.329
the values that we're working with in
JavaScript can be of different types.

32
00:01:49.329 --> 00:01:54.135
And JavaScript has a certain defined
set of different types that it knows

33
00:01:54.135 --> 00:01:59.118
how to work with one example that we've
seen a lot of today is textual data.

34
00:01:59.118 --> 00:02:03.467
So things like Tic Tac Toe or
#board or andina or

35
00:02:03.467 --> 00:02:08.579
any of these things in the quotes
that we've been seeing

36
00:02:08.579 --> 00:02:15.451
a lot today these are pieces of text
data or we could also call them strings.

37
00:02:15.451 --> 00:02:19.245
I like those little friendship
bracelets with the little letter beads,

38
00:02:19.245 --> 00:02:23.725
if you've ever seen these, that's kind of
how I personally remember like strings as

39
00:02:23.725 --> 00:02:25.361
being textual pieces of data.

40
00:02:25.361 --> 00:02:29.233
And this is a general concept in
computer science and programming.

41
00:02:29.233 --> 00:02:33.865
Often different languages will consider
textual data to be of the type string.

42
00:02:33.865 --> 00:02:37.426
So we're gonna talk more in
detail about strings later.

43
00:02:37.426 --> 00:02:42.898
But just for a sort of preview, all of
these are examples of strings in double

44
00:02:42.898 --> 00:02:48.643
quotes, Hello, with an exclamation
point that's a string in single quotes.

45
00:02:48.643 --> 00:02:50.104
I like single-quotes.

46
00:02:50.104 --> 00:02:51.657
That is also a string.

47
00:02:51.657 --> 00:02:56.082
And even without the quotes but
with these little what we call

48
00:02:56.082 --> 00:03:00.612
backticks those little angled marks,
that is also a string.

49
00:03:00.612 --> 00:03:05.176
So in JavaScript we have three different
options for how we can at least three

50
00:03:05.176 --> 00:03:09.670
different options for how we can
represent strings inside double quotes,

51
00:03:09.670 --> 00:03:12.470
inside single quotes,
or inside back ticks.

52
00:03:12.470 --> 00:03:15.185
All of those are valid
strings in JavaScript, and

53
00:03:15.185 --> 00:03:19.266
you'll notice also in our back texturing
we have something else in there.

54
00:03:19.266 --> 00:03:20.122
We have an emoji, right?

55
00:03:20.122 --> 00:03:24.312
So strings don't have to just
include ASCII letters or

56
00:03:24.312 --> 00:03:30.152
kind of the letters that you might see
on your keyboard right in front of you.

57
00:03:30.152 --> 00:03:35.340
They can also include unicode characters
of all different types including emoji and

58
00:03:35.340 --> 00:03:39.506
characters from different writing
sets from different scripts and

59
00:03:39.506 --> 00:03:40.687
things like that.

60
00:03:40.687 --> 00:03:43.752
So we can have all kinds of stuff in
there, we can also have numbers, right?

61
00:03:43.752 --> 00:03:47.438
Like for example, a phone number 867-5309.

62
00:03:47.438 --> 00:03:52.723
If anybody catches the 80 song reference
could be a string if it is in quotes or

63
00:03:52.723 --> 00:03:55.135
just a regular number, like 42.

64
00:03:55.135 --> 00:03:58.736
If it's in quotes, it is a string.

65
00:03:58.736 --> 00:04:01.963
We're gonna talk a little bit
more about that later because, so

66
00:04:01.963 --> 00:04:03.048
what does that mean?

67
00:04:03.048 --> 00:04:05.055
What do I mean when I say
a number can be a string?

68
00:04:05.055 --> 00:04:06.854
So this is a question for y'all.

69
00:04:06.854 --> 00:04:09.849
Do you think that 42 in quotes and

70
00:04:09.849 --> 00:04:14.610
42 without quotes are the same
thing in JavaScript.

71
00:04:14.610 --> 00:04:16.733
I'm seeing some heads shaking.

72
00:04:16.733 --> 00:04:18.986
No, they are not the same thing.

73
00:04:18.986 --> 00:04:24.387
And we can prove it to ourselves
if we use a fun little

74
00:04:24.387 --> 00:04:29.171
JavaScript spell, keyword called typeof.

75
00:04:29.171 --> 00:04:33.544
So typeof is what's actually an operator,
which we'll talk about later.

76
00:04:33.544 --> 00:04:37.360
Typeof is a little spell we can cast
on a value to find out its type.

77
00:04:37.360 --> 00:04:41.490
So let me go back over and we're gonna
go back into our JavaScript console.

78
00:04:41.490 --> 00:04:44.956
And I just wanted to point out that
your JavaScript console earlier,

79
00:04:44.956 --> 00:04:47.896
we were looking at it in the context
of the tic tac toe page.

80
00:04:47.896 --> 00:04:53.328
But we can even open a console
without even having any page loaded,

81
00:04:53.328 --> 00:04:56.141
just in the new tab in the browser.

82
00:04:56.141 --> 00:05:00.441
Usually there is a keyboard shortcut that
I can use, but I can also go into the menu

83
00:05:00.441 --> 00:05:04.691
of my browser and this is going to be
slightly different in different browsers.

84
00:05:04.691 --> 00:05:08.522
But usually there is some kind
I have options for tools or

85
00:05:08.522 --> 00:05:11.546
developer tools or
more tools in this case.

86
00:05:11.546 --> 00:05:15.586
And here I can open web developer tools
and this will give me my inspector my

87
00:05:15.586 --> 00:05:19.970
console a whole bunch of other stuff that
we'll talk about later in the course.

88
00:05:19.970 --> 00:05:21.985
But for now I just need the console and

89
00:05:21.985 --> 00:05:26.082
I can actually just use the console
without having any page really loaded.

90
00:05:26.082 --> 00:05:28.933
I don't really care about the page,
I just want the console.

91
00:05:28.933 --> 00:05:34.143
Cool, and usually there is a shortcut
to open and close this which like

92
00:05:34.143 --> 00:05:39.020
in Firefox on Mac, it's I think
option Cmd + I to open and close.

93
00:05:39.020 --> 00:05:42.468
But this will be slightly different on
every system and in every different

94
00:05:42.468 --> 00:05:46.036
browser, that you can look up what
the shortcuts are if you wanna be speedy.

95
00:05:46.036 --> 00:05:53.446
So, [COUGH] in this case, we said
all right, what about 42 versus 42?

96
00:05:53.446 --> 00:05:56.372
That didn't even sound like it made any
sense because the first one was in quotes

97
00:05:56.372 --> 00:05:57.736
and the second one was not in quotes.

98
00:05:57.736 --> 00:05:59.961
And if I just type them into the console,

99
00:05:59.961 --> 00:06:02.782
it doesn't really like
tell me much information.

100
00:06:02.782 --> 00:06:06.845
But if I use this type of
spell in front of them,

101
00:06:06.845 --> 00:06:09.984
I can find out what type of value is.

102
00:06:09.984 --> 00:06:17.352
So, type of quotes 42 tells me
string is the piece of text data but

103
00:06:17.352 --> 00:06:21.707
type of 42 no quotes tells me number.

104
00:06:21.707 --> 00:06:25.956
So JavaScript sees two totally different
things when it looks at these two

105
00:06:25.956 --> 00:06:27.130
different values.

106
00:06:27.130 --> 00:06:29.536
One is a string value with
the double quotes around it.

107
00:06:29.536 --> 00:06:33.601
One is a number value with no quotes.

108
00:06:33.601 --> 00:06:38.218
So typeof is our friend if we're
not sure what something is.

109
00:06:38.218 --> 00:06:41.054
So we just tried it out and
you can try it out,

110
00:06:41.054 --> 00:06:45.211
you can mess around with other
things that you can try typeof on.

111
00:06:45.211 --> 00:06:48.708
[COUGH] And what we found out is that
we now know of at least two different

112
00:06:48.708 --> 00:06:49.504
types of data.

113
00:06:49.504 --> 00:06:53.408
We know of strings, which we've been
working with already today, and

114
00:06:53.408 --> 00:06:54.523
we know of numbers.

115
00:06:54.523 --> 00:06:58.082
Like Count Von Count always showed
us on Sesame Street, just me?

116
00:06:58.082 --> 00:07:02.734
Okay, so numbers in JavaScript,
these are all examples of numbers.

117
00:07:02.734 --> 00:07:08.854
We can have an integer or a whole number
like 9, or we can have really a larger

118
00:07:08.854 --> 00:07:15.281
still an integers like 525,600 which
may or may not be a unit of minutes.

119
00:07:15.281 --> 00:07:20.581
Anyway, we can also have
decimals points in the numbers so

120
00:07:20.581 --> 00:07:23.729
we can have things like 3.45.

121
00:07:23.729 --> 00:07:27.976
We can have negative signs, and
that still is all still a number, right?

122
00:07:27.976 --> 00:07:31.258
We're just talking about
different in this case,

123
00:07:31.258 --> 00:07:36.144
different sign of whether the number
is positive or negative and a different

124
00:07:36.144 --> 00:07:41.052
precision of how many decimal places
we actually care about in this number.

125
00:07:41.052 --> 00:07:46.040
We can even do big numbers like with
the E, and then a certain number of

126
00:07:46.040 --> 00:07:52.668
a basically decimal places that we want to
multiply whatever's to the left of the.

127
00:07:52.668 --> 00:07:58.240
So just like in math class, you might have
encountered these kind of exponents where

128
00:07:58.240 --> 00:08:03.750
you're saying 1.21 raised to 9 decimal
places out would be like a big number.

129
00:08:03.750 --> 00:08:05.736
I don't know exactly how many.

130
00:08:05.736 --> 00:08:10.495
And JavaScript even has a number
called infinity which is pretty fun,

131
00:08:10.495 --> 00:08:15.418
you can just invoke infinity in your
browser console whenever you want,

132
00:08:15.418 --> 00:08:18.172
if you're feeling lonely, infinity.

133
00:08:18.172 --> 00:08:21.675
So all of these are examples
of numbers in JavaScript.

134
00:08:21.675 --> 00:08:26.767
And what we've seen so far, we've been
talking about strings, and numbers,

135
00:08:26.767 --> 00:08:31.564
those are examples of what in JavaScript
are called primitive data types.

136
00:08:31.564 --> 00:08:35.893
So JavaScript distinguishes two different,
I guess you could say,

137
00:08:35.893 --> 00:08:40.889
meta types, or like types, of types of
data, there are primitive data types,

138
00:08:40.889 --> 00:08:43.895
of which strings and
numbers are two examples.

139
00:08:43.895 --> 00:08:48.513
And then there's objects and so
primitive data types are kind of

140
00:08:48.513 --> 00:08:53.231
special where they work a little
bit differently in JavaScript.

141
00:08:53.231 --> 00:08:57.589
And then pretty much everything else is
an object meaning it follows certain rules

142
00:08:57.589 --> 00:09:01.836
that we're gonna talk about later,
we're gonna talk about how objects work.

143
00:09:01.836 --> 00:09:04.491
And we've already seen
an example of an object,

144
00:09:04.491 --> 00:09:08.071
remember how we called it DOM,
it's the document object model.

145
00:09:08.071 --> 00:09:12.965
Document that word document when I invoke
it in the JavaScript console give me

146
00:09:12.965 --> 00:09:15.763
object that represents the HTML document.

147
00:09:15.763 --> 00:09:18.904
So that's an example of
something that's an object type.

148
00:09:18.904 --> 00:09:22.406
So in JavaScript, we basically only
have two kinds of things in the world.

149
00:09:22.406 --> 00:09:24.370
There's primitive values.

150
00:09:24.370 --> 00:09:26.331
And there's objects.

151
00:09:26.331 --> 00:09:28.685
We're gonna dig into all of that.

152
00:09:28.685 --> 00:09:32.234
In JavaScript, we said we have we already
know a couple of the primitive data types.

153
00:09:32.234 --> 00:09:33.872
There's strings and numbers.

154
00:09:33.872 --> 00:09:37.719
And there are a few other data
types that we're gonna care about.

155
00:09:37.719 --> 00:09:41.871
Namely, we have Boolean
data types undefined,

156
00:09:41.871 --> 00:09:47.253
which we saw earlier and null,
which we also ran into earlier.

157
00:09:47.253 --> 00:09:51.495
And then there are a couple of other
primitive data types we're not going to

158
00:09:51.495 --> 00:09:55.617
talk about, but guess where you can go
if you want to read all about them.

159
00:09:55.617 --> 00:09:58.818
Yes, exactly, so we're not gonna talk
about, there's a couple more, but

160
00:09:58.818 --> 00:10:00.655
these are the ones we're gonna care about.

161
00:10:00.655 --> 00:10:04.910
Strings, numbers, Boolean,
undefined, and null.

162
00:10:04.910 --> 00:10:06.437
Okay, so we talked about strings and
numbers.

163
00:10:06.437 --> 00:10:08.199
What about Boolean?

164
00:10:08.199 --> 00:10:12.608
So Booleans, as you may know if
you've encountered them in some other

165
00:10:12.608 --> 00:10:15.823
programming language
are true/false values, or

166
00:10:15.823 --> 00:10:19.279
in other words,
the dual states of Dwight Trou [LAUGH].

167
00:10:19.279 --> 00:10:26.378
So there are literally only two values
of the Boolean type there's true and

168
00:10:26.378 --> 00:10:31.673
there's false and
we can we can invoke them by just using

169
00:10:31.673 --> 00:10:36.756
the word with no quotes true and
if I type Typeof true.

170
00:10:36.756 --> 00:10:41.732
We'll see it's a Boolean and
similarly it's opposite is false.

171
00:10:41.732 --> 00:10:46.910
Now, keep in mind,
we could also have a string, for example,

172
00:10:46.910 --> 00:10:51.617
of the word true,
which is in quotes that's different.

173
00:10:51.617 --> 00:10:55.203
So Boolean values are only true and false.

174
00:10:55.203 --> 00:10:55.785
There's only two.

175
00:10:55.785 --> 00:10:58.818
There's not a lot to worry about there.

176
00:10:58.818 --> 00:11:02.213
Then we have our friends undefined and
null.

177
00:11:02.213 --> 00:11:09.160
So you could think of both undefined and
null as like a blank void of nothingness.

178
00:11:09.160 --> 00:11:11.918
Undefined and null both mean sort of,

179
00:11:11.918 --> 00:11:15.979
this is a value which represents
the absence of a value.

180
00:11:15.979 --> 00:11:20.973
This is nothingness as a value,
getting very philosophical here already,

181
00:11:20.973 --> 00:11:24.717
and it's only like the middle of the day,
but [LAUGH] but so

182
00:11:24.717 --> 00:11:28.634
there is however a difference
between undefined and null.

183
00:11:28.634 --> 00:11:33.524
And I think that difference can
be best explained by our friends

184
00:11:33.524 --> 00:11:35.286
the Backstreet Boys.

185
00:11:35.286 --> 00:11:42.090
So, [LAUGH] so do you remember the song,
I want it that way by the Backstreet Boys.

186
00:11:42.090 --> 00:11:45.665
There's a line in that song
ain't nothing but a mistake and

187
00:11:45.665 --> 00:11:49.669
really what they were singing about
is not some girl that they may or

188
00:11:49.669 --> 00:11:51.905
may not have wanted it that way with.

189
00:11:51.905 --> 00:11:55.423
But they were talking
about values in JavaScript

190
00:11:55.423 --> 00:12:00.653
namely the undefined value being
often sort of used as a way of saying

191
00:12:00.653 --> 00:12:03.675
there was supposed to be something here.

192
00:12:03.675 --> 00:12:08.908
But accidentally oops, like there's
nothing here and nothing but a mistake.

193
00:12:08.908 --> 00:12:12.389
However, null also means
there's nothing here.

194
00:12:12.389 --> 00:12:17.217
But usually it and this is, there's
an asterisk on this because these are not

195
00:12:17.217 --> 00:12:21.915
always the case but usually null means
I meant for there to be nothing here.

196
00:12:21.915 --> 00:12:23.492
I want it that way.

197
00:12:23.492 --> 00:12:27.524
I want there to be nothing here and
I want to tell you that there is and

198
00:12:27.524 --> 00:12:29.036
should be nothing here.

199
00:12:29.036 --> 00:12:30.751
Undefined often crops up when like,

200
00:12:30.751 --> 00:12:34.418
we thought we were supposed to have
something, but we didn't have anything.

201
00:12:34.418 --> 00:12:36.301
Like we ran into it earlier, right?

202
00:12:36.301 --> 00:12:41.240
When we saw like, we thought that
we were gonna have an element

203
00:12:41.240 --> 00:12:44.606
selected by this, but null, there's not.

204
00:12:44.606 --> 00:12:49.466
And null, for example,
when we ran a query selector, and we said,

205
00:12:49.466 --> 00:12:55.378
give me the element on this page with this
ID, and it comes back and it says, null.

206
00:12:55.378 --> 00:12:57.980
It's saying, yes, there is nothing.

207
00:12:57.980 --> 00:13:02.005
You asked me what is the element at
that idea, and it is nothingness.

208
00:13:02.005 --> 00:13:04.137
Congratulations, you've
received nothingness.

209
00:13:04.137 --> 00:13:06.883
So this is one way we can think
about undefined and null.

210
00:13:06.883 --> 00:13:09.082
They are two different types, though.

211
00:13:09.082 --> 00:13:11.658
They're two different values, but
they crop up in different ways.

212
00:13:11.658 --> 00:13:15.069
So yeah, thanks, Backstreet Boys,
for writing a song about JavaScript.

