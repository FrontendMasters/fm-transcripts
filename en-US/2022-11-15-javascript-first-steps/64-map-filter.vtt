WEBVTT

1
00:00:00.000 --> 00:00:04.354
So yes, before we go on and
move on to our next project,

2
00:00:04.354 --> 00:00:08.994
I just want to wrap up and
talk about a couple more aspects of

3
00:00:08.994 --> 00:00:13.919
iteration that we didn't need
to complete our quiz project,

4
00:00:13.919 --> 00:00:18.019
but we might find very useful for
our next project.

5
00:00:18.019 --> 00:00:21.023
So while we're on the topic of loops and

6
00:00:21.023 --> 00:00:24.758
of iterating over things,
especially arrays,

7
00:00:24.758 --> 00:00:29.873
have a couple of handy dandy methods
that are also very useful for,

8
00:00:32.021 --> 00:00:36.349
Looping over or processing,
in a sense, every item in an array.

9
00:00:36.349 --> 00:00:38.511
And those are map and filter.

10
00:00:38.511 --> 00:00:42.225
And there's also another method, reduce,
we're not gonna talk about here.

11
00:00:42.225 --> 00:00:45.305
But basically, what these methods do, and

12
00:00:45.305 --> 00:00:48.467
map and filter or
kind of like go hand in hand,

13
00:00:48.467 --> 00:00:54.310
they allow us to process every item in the
array by calling a certain function on it.

14
00:00:54.310 --> 00:00:59.254
So what filter's job is if
I give filter an array of

15
00:00:59.254 --> 00:01:04.319
let's say ingredients,
filter can help me filter

16
00:01:04.319 --> 00:01:09.411
out the ingredients I don't
want from that array.

17
00:01:09.411 --> 00:01:14.334
And then what map does is it applies
some kind of operation to everything

18
00:01:14.334 --> 00:01:15.409
in that array.

19
00:01:15.409 --> 00:01:19.445
So if I filter out the ingredients I
don't, like let's say I wanna make

20
00:01:19.445 --> 00:01:24.033
a sandwich but I don't want any cucumbers
in it and I don't want any onions in it.

21
00:01:24.033 --> 00:01:28.359
I can use filter to filter out
the things I don't like, and

22
00:01:28.359 --> 00:01:33.403
then I can use map to do something
to each of the things that are left.

23
00:01:33.403 --> 00:01:37.878
In this case,
maybe I have a chop function.

24
00:01:37.878 --> 00:01:41.091
And so I can chop up all of
my remaining ingredients.

25
00:01:41.091 --> 00:01:43.200
And then we're not gonna
talk about reduce, but

26
00:01:43.200 --> 00:01:46.094
reduce is something that kind of
combines everything in an array.

27
00:01:46.094 --> 00:01:49.530
So, that's how I could make all of
my ingredients that I've chopped

28
00:01:49.530 --> 00:01:51.201
up into a sandwich, let's say.

29
00:01:51.201 --> 00:01:54.633
We get more into this in functional
programming first steps,

30
00:01:54.633 --> 00:01:56.157
if you continue on to that.

31
00:01:56.157 --> 00:01:59.199
But for now,
let's take a look at map and filter.

32
00:01:59.199 --> 00:02:05.434
So map takes in some array and
some function that we give it,

33
00:02:05.434 --> 00:02:10.932
and it calls that function
on each item in the array.

34
00:02:10.932 --> 00:02:17.088
And then what it does is instead
of mutating the original array,

35
00:02:17.088 --> 00:02:22.104
it gives me a new array with
the result of the function

36
00:02:22.104 --> 00:02:25.992
call on each item in the original array.

37
00:02:25.992 --> 00:02:31.213
So if we go back to our, remember our
spices object with all of our Spice Girls?

38
00:02:31.213 --> 00:02:36.709
We have an array of objects and
each object has some properties in it.

39
00:02:36.709 --> 00:02:41.566
I could use map to get a new
array of just the nicknames

40
00:02:41.566 --> 00:02:46.425
of these spices by calling
map on the spices array and

41
00:02:46.425 --> 00:02:52.627
passing in a function, and
I've got my little arrow friend here.

42
00:02:52.627 --> 00:02:56.727
That takes in a spice, which I'm

43
00:02:56.727 --> 00:03:01.855
assigning a mini-variable to here, s,

44
00:03:01.855 --> 00:03:06.835
and returns a string that is the nickname

45
00:03:06.835 --> 00:03:12.270
property of that s
object plus space Spice.

46
00:03:12.270 --> 00:03:17.695
So my new array, if I go back and
I run this code,

47
00:03:17.695 --> 00:03:25.027
my nicknames array is going to be
just strings that were computed

48
00:03:25.027 --> 00:03:30.624
from all of the object
values in my spices array.

49
00:03:32.862 --> 00:03:38.895
And spices, we can double-check,
has not changed, not mutated.

50
00:03:38.895 --> 00:03:43.212
So map is really useful when let's
say you have a bunch of objects,

51
00:03:43.212 --> 00:03:48.238
a bunch of data, and you'll only really
care about some subset of that data.

52
00:03:48.238 --> 00:03:52.934
Map can be a really useful way to pull out
the data that you care about, for example.

53
00:03:52.934 --> 00:03:55.410
It could also carry out
some other operation.

54
00:03:55.410 --> 00:03:59.450
It could do some calculation on
each element in the array, or

55
00:03:59.450 --> 00:04:03.188
it could log something about
each element in the array.

56
00:04:03.188 --> 00:04:08.143
So it's another way of kind of
looping over arrays when we wanna

57
00:04:08.143 --> 00:04:11.601
call a particular function
on each thing and

58
00:04:11.601 --> 00:04:15.633
maybe we wanna capture those
values as a new array.

59
00:04:17.656 --> 00:04:19.433
So arrow functions are really useful.

60
00:04:19.433 --> 00:04:23.080
You can pass in a function,
keyword, expression, or

61
00:04:23.080 --> 00:04:28.568
maybe some other function you've saved
as a variable elsewhere in your program.

62
00:04:28.568 --> 00:04:32.586
You can pass in any kind of
function to the map method, but

63
00:04:32.586 --> 00:04:34.776
arrow functions show up a lot.

64
00:04:34.776 --> 00:04:39.423
So you'll see this pattern very often, map
and then an arrow function over an array.

65
00:04:41.659 --> 00:04:45.753
Another useful trick,
cuz we're learning some new skills here,

66
00:04:45.753 --> 00:04:50.507
another useful trick, especially if
we're doing stringy stuff like this,

67
00:04:50.507 --> 00:04:53.451
are what are called
string template literals.

68
00:04:53.451 --> 00:04:58.025
So if you remember way back a million
years ago when we talked about different

69
00:04:58.025 --> 00:04:59.527
strings in JavaScript,

70
00:04:59.527 --> 00:05:04.402
we said that strings can be surrounded
by three different types of punctuation.

71
00:05:04.402 --> 00:05:07.061
Can anybody help me remember?

72
00:05:07.061 --> 00:05:11.372
We have, let me clear here.

73
00:05:11.372 --> 00:05:16.533
We've been doing a lot of strings
that look like surrounded by-

74
00:05:16.533 --> 00:05:17.055
&gt;&gt; Double quotes.

75
00:05:17.055 --> 00:05:24.332
&gt;&gt; Double quotes,
we could also do single quotes,

76
00:05:24.332 --> 00:05:28.771
and we can also do backticks.

77
00:05:28.771 --> 00:05:33.608
So all of these, and you'll see
JavaScript's default is double quotes.

78
00:05:33.608 --> 00:05:37.422
So when it's printing out or kind of
evaluating, these are all showing me

79
00:05:37.422 --> 00:05:41.370
double quotes around them, but
they're all the same thing to JavaScript.

80
00:05:41.370 --> 00:05:46.514
But what's fun about the backticks
is that the backticks

81
00:05:46.514 --> 00:05:51.980
actually allow us to insert,
or fancy word, interpolate,

82
00:05:51.980 --> 00:05:57.144
different variables or
other values inside of a string.

83
00:05:57.144 --> 00:06:01.175
So for example, let's say

84
00:06:01.175 --> 00:06:06.081
I wanna say the sum of 1 and 2 is,

85
00:06:06.081 --> 00:06:12.755
I can use a $ sign and
then some curly braces.

86
00:06:12.755 --> 00:06:16.761
And now within these curly braces,
I can write JavaScript.

87
00:06:16.761 --> 00:06:22.135
So I can do, for example,
1+2 inside of those curly braces and

88
00:06:22.135 --> 00:06:25.458
JavaScript is going to evaluate that and

89
00:06:25.458 --> 00:06:29.088
then stick that value
inside of the string.

90
00:06:29.088 --> 00:06:32.121
So I get the sum of 1 and 2 is 3.

91
00:06:32.121 --> 00:06:34.654
Pretty cool,
pretty nifty little trick here.

92
00:06:34.654 --> 00:06:39.037
And so, what you see that pop up a lot in
things like if I'm processing elements,

93
00:06:39.037 --> 00:06:41.421
let's say here,
I was trying to d a string,

94
00:06:41.421 --> 00:06:44.397
trying to create a new string
from all of these values.

95
00:06:44.397 --> 00:06:48.713
Earlier we did this with a plus, totally
valid, totally valid, a plus and a space.

96
00:06:48.713 --> 00:06:56.077
I could also do this by creating a string
template here with these backticks and

97
00:06:56.077 --> 00:07:01.880
then using my dollar sign curly
braces to insert the Spice Girl

98
00:07:01.880 --> 00:07:06.588
nickname into that string template,
as it were.

99
00:07:06.588 --> 00:07:10.704
So, for example, we could do,

100
00:07:10.704 --> 00:07:15.125
let spices 2 is spices.map, and

101
00:07:15.125 --> 00:07:19.856
then I pass in my templatey version.

102
00:07:19.856 --> 00:07:22.647
Oops, what did I do?

103
00:07:22.647 --> 00:07:26.943
&gt;&gt; Space between the spices and 2.

104
00:07:26.943 --> 00:07:28.347
&gt;&gt; Yes I did, okay, great, sorry.

105
00:07:28.347 --> 00:07:30.833
[LAUGH] Thanks.

106
00:07:30.833 --> 00:07:33.444
Yep, and JavaScript's like
I don't know what that is.

107
00:07:33.444 --> 00:07:36.485
Okay, now let's try spices2.

108
00:07:36.485 --> 00:07:42.283
It's the same, it looks the same as before
when we use our concatenate operator.

109
00:07:42.283 --> 00:07:46.593
So this is a fun little trick,
that you can sprinkle in,

110
00:07:46.593 --> 00:07:50.998
like a little spice on your
JavaScript programs if you get

111
00:07:50.998 --> 00:07:55.894
sick of writing plus signs,
plusing with spaces everywhere.

112
00:07:57.842 --> 00:07:59.734
So okay, then the other one or

113
00:07:59.734 --> 00:08:03.141
the other friend of map that
we said we have is filter,

114
00:08:03.141 --> 00:08:08.317
which is essentially going to, we're
gonna give it a special type of function.

115
00:08:08.317 --> 00:08:12.270
The function that we give filter is a
function that should return true or false,

116
00:08:12.270 --> 00:08:15.108
or you sometimes hear that
called a predicate function.

117
00:08:15.108 --> 00:08:18.873
Like, for example, our is correct
function was an example of this.

118
00:08:18.873 --> 00:08:24.061
And what filter is gonna do is it's
gonna call that function on every item.

119
00:08:24.061 --> 00:08:26.548
And if the function returns true,

120
00:08:26.548 --> 00:08:31.370
it's going to include that item in
the new array that it gives you.

121
00:08:31.370 --> 00:08:36.430
And if the function returns false,
that item gets filtered out,

122
00:08:36.430 --> 00:08:39.563
it gets left out of the resulting array.

123
00:08:39.563 --> 00:08:46.600
So, for example, In my spices,

124
00:08:46.600 --> 00:08:51.739
I have a bunch of Spice Girls and
two of them are named Mel.

125
00:08:51.739 --> 00:08:57.806
So if I want to get just the Mels,
I can call spices.filter and

126
00:08:57.806 --> 00:09:02.954
then pass in a function that
takes some spice girl s.

127
00:09:02.954 --> 00:09:08.970
Looks at the s.name value,
which is gonna be a string.

128
00:09:08.970 --> 00:09:14.366
And then, if you remember, we have
a special string method called includes,

129
00:09:14.366 --> 00:09:18.551
which can tell me if a string
includes some other substring.

130
00:09:18.551 --> 00:09:23.013
So if the value of s.name
includes the substring Mel,

131
00:09:23.013 --> 00:09:27.088
then we're going to include
it in that new array.

132
00:09:27.088 --> 00:09:31.357
And so now if I ask for Mels,
we can see it has two things in it,

133
00:09:31.357 --> 00:09:34.879
it has only the objects for
the Spice Girls named Mel.

134
00:09:36.906 --> 00:09:41.722
Which is probably a very common JavaScript
program you might need to write,

135
00:09:41.722 --> 00:09:43.088
but you get the idea.

136
00:09:43.088 --> 00:09:45.887
And filtering is very
useful when you're trying,

137
00:09:45.887 --> 00:09:49.608
when you're only interested in
a subset of your data, let's say.

138
00:09:49.608 --> 00:09:54.060
Maybe you're getting some data from
somewhere and whoever made that data

139
00:09:54.060 --> 00:09:58.458
cares about a lot of stuff, but
you only care about a little bit of stuff.

140
00:09:58.458 --> 00:10:02.824
You can filter out the elements in
that array that you don't care about.

