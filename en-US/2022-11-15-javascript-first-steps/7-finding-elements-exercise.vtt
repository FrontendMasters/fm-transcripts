WEBVTT

1
00:00:00.270 --> 00:00:05.813
So unless there are any questions,
which of course are welcome at any time,

2
00:00:05.813 --> 00:00:11.009
let us take a moment to try and play
around on our own and using what we've

3
00:00:11.009 --> 00:00:15.872
seen so far and our friend MDN if we need,
let's try to figure out.

4
00:00:15.872 --> 00:00:20.744
We can take maybe five minutes,
to figure out what you'd need to type

5
00:00:20.744 --> 00:00:24.500
in the console to retrieve
these various things.

6
00:00:24.500 --> 00:00:28.044
So first of all, we're gonna try to get
all of the p elements then we're gonna try

7
00:00:28.044 --> 00:00:29.260
to get the text on the page.

8
00:00:29.260 --> 00:00:34.140
On our Tic Tac Toe page, this is all
gonna be on our Tic Tac Toe page.

9
00:00:34.140 --> 00:00:38.666
I'm gonna try to get the p elements, we're
gonna try to get the text X like this

10
00:00:38.666 --> 00:00:41.358
little symbol X here in the player X,
Anjana.

11
00:00:41.358 --> 00:00:43.894
We're gonna try to get
the number of squares,

12
00:00:43.894 --> 00:00:46.896
squares that are represented
in the tic tac toe board.

13
00:00:46.896 --> 00:00:50.694
And then we're gonna try to get the text
"a game you know" from the top of

14
00:00:50.694 --> 00:00:51.630
the page.

15
00:00:51.630 --> 00:00:55.690
So this is your scavenger hunt,
should you choose to accept it.

16
00:00:55.690 --> 00:00:58.566
So let's take a few minutes,
and then we'll review together.

17
00:01:03.495 --> 00:01:06.950
Welcome back all right,
how did this scavenger hunt go?

18
00:01:06.950 --> 00:01:09.830
Did we find all of the things
we were looking for?

19
00:01:11.860 --> 00:01:14.726
Let's find out [LAUGH] Okay, so

20
00:01:14.726 --> 00:01:20.678
your first task was to retrieve
all of the p elements in the page,

21
00:01:20.678 --> 00:01:24.550
let's clear out our previous work here.

22
00:01:25.910 --> 00:01:31.500
And who could walk me through how
they found all of the p elements?

23
00:01:31.500 --> 00:01:34.556
Maybe somebody from the classroom?

24
00:01:34.556 --> 00:01:39.156
How about Jason any.

25
00:01:39.156 --> 00:01:41.912
&gt;&gt; I tried using getElementsByName.

26
00:01:41.912 --> 00:01:44.241
&gt;&gt; Okay, so.

27
00:01:44.241 --> 00:01:47.220
&gt;&gt; And it returned a NodeList but
I don't think that's quite right.

28
00:01:47.220 --> 00:01:48.320
&gt;&gt; Well, let's try it out.

29
00:01:48.320 --> 00:01:52.415
So what did you type
in to get elements by?

30
00:01:52.415 --> 00:01:56.459
&gt;&gt; I typed in document.getElementsByName,
and I put

31
00:01:56.459 --> 00:01:57.975
&gt;&gt; getElementsBy, okay,

32
00:01:57.975 --> 00:02:02.884
so you might also find in your browser
console you might get some helpful, well,

33
00:02:02.884 --> 00:02:08.030
maybe helpful, the browser trying to
be helpful, some completions here.

34
00:02:08.030 --> 00:02:13.280
So if I type in getElementsBy I get some
options here, one of them is ByName.

35
00:02:14.380 --> 00:02:18.080
So let's maybe just make sure that we're
talking about the right thing here.

36
00:02:18.080 --> 00:02:22.109
We also see something else
called getElementsByClassName,

37
00:02:22.109 --> 00:02:26.760
getElementsByTagName, and
then some other thing called TagNameNS.

38
00:02:26.760 --> 00:02:32.173
Where can I go if I wanna find out what
these methods do and which one I want?

39
00:02:34.277 --> 00:02:35.577
&gt;&gt; MDN
&gt;&gt; MDN,

40
00:02:35.577 --> 00:02:39.450
yes, this is gonna be the answer
to a lot of questions I ask.

41
00:02:39.450 --> 00:02:43.860
Excellent, so let's figure out so
getElementsByName,

42
00:02:43.860 --> 00:02:48.500
if I type that in,
that's gonna take me to the page.

43
00:02:48.500 --> 00:02:50.029
And this is gonna say okay,

44
00:02:50.029 --> 00:02:54.154
the getElementsByName method of
the document object returns a node lists

45
00:02:54.154 --> 00:02:58.030
collection of elements with a given
name attribute in the document.

46
00:02:59.420 --> 00:03:02.454
Okay, let's scroll down and
see kind of what it means.

47
00:03:02.454 --> 00:03:05.739
So in this case, for
example, let's say we have

48
00:03:05.739 --> 00:03:10.722
a document where we have some content and
let me make that a little bigger.

49
00:03:10.722 --> 00:03:18.493
In this case some input elements that
have an attribute name defined on them.

50
00:03:18.493 --> 00:03:22.581
so getElementByName would be the perfect
thing to use if we're trying to pull out

51
00:03:22.581 --> 00:03:24.515
elements with that particular name.

52
00:03:25.695 --> 00:03:28.831
In this case, in our document,

53
00:03:28.831 --> 00:03:33.602
we don't have a lot of
name attributes defined.

54
00:03:33.602 --> 00:03:36.328
In this case the p elements,
they have an ID attribute,

55
00:03:36.328 --> 00:03:40.340
they have a class attribute but they don't
really have a name attribute defined.

56
00:03:40.340 --> 00:03:45.357
So what I actually could
use is if I just want to

57
00:03:45.357 --> 00:03:50.902
pick them out by the fact
that they are p elements,

58
00:03:50.902 --> 00:03:56.712
paragraph elements, so
in that case we can check out

59
00:03:56.712 --> 00:04:01.888
the similarly named getElementsByTagName.

60
00:04:04.412 --> 00:04:08.616
Spell, and in this case it's
going to return a live HTML

61
00:04:08.616 --> 00:04:12.290
collection of elements
with the given tag name.

62
00:04:12.290 --> 00:04:19.352
So in this case, let's say we have a table
element which has some td within it,

63
00:04:19.352 --> 00:04:25.880
that sort of thing, we can select
that with the getElementsByTagName.

64
00:04:27.450 --> 00:04:31.284
So in this case, we're gonna get
slightly different things if we do

65
00:04:31.284 --> 00:04:34.733
getElementsByName("p") I get an,
I do get a NodeList.

66
00:04:34.733 --> 00:04:37.836
It's a collection of things,
but how many things are in it?

67
00:04:39.372 --> 00:04:40.090
&gt;&gt; Zero.

68
00:04:40.090 --> 00:04:41.700
&gt;&gt; Zero, how could I check that?

69
00:04:41.700 --> 00:04:44.415
How can I find out how many things
are in a collection of things?

70
00:04:44.415 --> 00:04:50.330
.length, yes, see, we're already
learning these spells, it's great.

71
00:04:50.330 --> 00:04:51.455
We're witches already.

72
00:04:51.455 --> 00:04:57.976
[LAUGH] But,
if I try document.getElementByTagName("p")

73
00:04:57.976 --> 00:05:02.804
I get a slightly different
type of collection,

74
00:05:02.804 --> 00:05:09.441
I get an HTML collection and
in this case if I try .length on that,

75
00:05:09.441 --> 00:05:13.205
I can see that I do have two elements.

76
00:05:13.205 --> 00:05:15.545
So I have those two p elements.

77
00:05:15.545 --> 00:05:20.336
So this is great and totally great
point that you raised here about

78
00:05:20.336 --> 00:05:23.710
this other method that we discovered.

79
00:05:23.710 --> 00:05:26.022
We'll talk about what
the method is tomorrow, but

80
00:05:26.022 --> 00:05:29.358
this spell that we discovered
getElementsByName is another option if you

81
00:05:29.358 --> 00:05:32.340
are trying to find elements with
the particular name attribute.

82
00:05:33.790 --> 00:05:38.735
Okay, how about number two,
the text X, maybe I'll ask Jason for

83
00:05:38.735 --> 00:05:42.195
this one since we talked
about it a little bit.

84
00:05:43.521 --> 00:05:45.692
I'm sorry, Paul,
I just said Jason, Paul yes.

85
00:05:45.692 --> 00:05:51.435
&gt;&gt; I just did console.log and
then just put the X in there.

86
00:05:51.435 --> 00:05:57.467
&gt;&gt; Okay, so one way we can get the value
X is by whoops, console.log X,

87
00:05:57.467 --> 00:06:02.667
we saw console.log is a spell
that I showed earlier that can

88
00:06:02.667 --> 00:06:07.980
type something or
print something out into our web console.

89
00:06:07.980 --> 00:06:13.700
So if I want a letter X,
I can say console.log(X").

90
00:06:13.700 --> 00:06:19.550
And this will print out an x that
I have told it to print out.

91
00:06:19.550 --> 00:06:20.343
So this is valid and

92
00:06:20.343 --> 00:06:23.510
we're gonna use a lot of console
logging in our JavaScript lives.

93
00:06:23.510 --> 00:06:27.326
And we're gonna talk later about console
log, and we're gonna talk later about what

94
00:06:27.326 --> 00:06:31.090
this undefined, where it is that
just mysteriously popped up here.

95
00:06:31.090 --> 00:06:36.336
But in terms of our scavenger hunt,
what we're trying to do is pick out,

96
00:06:36.336 --> 00:06:41.152
not just any X which in this case,
I've kind of conjured a new X into

97
00:06:41.152 --> 00:06:44.850
existence by typing it in
quotes into the console.

98
00:06:46.320 --> 00:06:50.119
But what I want is actually
the letter X that's right there,

99
00:06:50.119 --> 00:06:53.260
the letter X between the words player and
Anjana.

100
00:06:54.430 --> 00:06:59.309
So if we dig into our document in
the HTML inspector in our dev tools,

101
00:06:59.309 --> 00:07:05.128
we can see that this letter X, It shows
up in here inside of there's this header,

102
00:07:05.128 --> 00:07:07.710
there's the div with the players.

103
00:07:07.710 --> 00:07:09.634
There's a P with id p1,

104
00:07:09.634 --> 00:07:15.360
then there's a span with idp1 symbol,
and then there's an X.

105
00:07:15.360 --> 00:07:19.926
So can we use that information
to pull out not just any X but

106
00:07:19.926 --> 00:07:22.697
the X that is in the HTML document.

107
00:07:22.697 --> 00:07:26.032
Anybody wanna help?

108
00:07:27.306 --> 00:07:36.878
&gt;&gt; document.querySelector("ap1-symbol")
and

109
00:07:36.878 --> 00:07:40.000
then enter text.

110
00:07:41.440 --> 00:07:44.890
&gt;&gt; Okay, so
we can do document.querySelector.

111
00:07:44.890 --> 00:07:46.530
&gt;&gt; Or text content.

112
00:07:46.530 --> 00:07:50.919
&gt;&gt; And then in quotes a CSS selector for
an individual element,

113
00:07:50.919 --> 00:07:55.821
in this case the id which, we said we
can use that hash symbol in CSS to

114
00:07:55.821 --> 00:08:00.470
select the id so
this will get us that span element.

115
00:08:00.470 --> 00:08:05.400
Excellent, thank you Chad, and
then, if I type .textContent for

116
00:08:05.400 --> 00:08:11.260
example, then I will get whatever is
inside of the element with that id.

117
00:08:11.260 --> 00:08:15.740
So this is a totally valid way
to pull out that particular X.

118
00:08:15.740 --> 00:08:19.860
Excellent point,
did anybody have a different solution?

119
00:08:19.860 --> 00:08:24.382
Like I said, there's always multiple ways
to do things, not always but usually.

120
00:08:24.382 --> 00:08:29.715
&gt;&gt; There was one with
the same basic concept but

121
00:08:29.715 --> 00:08:36.212
using document.query,
sorry, getelementById.

122
00:08:36.212 --> 00:08:41.383
&gt;&gt; Right, okay, so
we could do document.getElementById

123
00:08:41.383 --> 00:08:46.553
you can also use tab to complete
if your browsers dev tools

124
00:08:46.553 --> 00:08:51.400
are offering you options you
can press tab to complete

125
00:08:51.400 --> 00:08:55.817
document.getElementById and then a, quote,

126
00:08:55.817 --> 00:09:01.440
double quotes and the name of
the id no hash this time, right?

127
00:09:01.440 --> 00:09:05.652
So we could do p1-symbol,
that's gonna get us that span element,

128
00:09:05.652 --> 00:09:09.250
same element as query selector#p1-symbol.

129
00:09:09.250 --> 00:09:16.640
And then I can do texContent and
pull out the X.

130
00:09:16.640 --> 00:09:21.210
Excellent, so these are both valid,
good hunting, yes question.

131
00:09:21.210 --> 00:09:23.260
&gt;&gt; Hey miss I have undefined.

132
00:09:25.080 --> 00:09:31.480
&gt;&gt; Okay, in yours you have undefined so
what did you pull out?

133
00:09:31.480 --> 00:09:32.627
What did you type in?

134
00:09:32.627 --> 00:09:40.994
&gt;&gt;
document.getElementById("p1-symbol.textco-

135
00:09:40.994 --> 00:09:47.840
ntent"), how did I spell that?

136
00:09:47.840 --> 00:09:54.080
&gt;&gt; So if I typed in, let's say, text,
maybe this happens to me all the time.

137
00:09:54.080 --> 00:09:57.857
So do you noticed when I do textContent,
if I autocomplete,

138
00:09:57.857 --> 00:10:03.039
I'll see it's the capital C, for example,
maybe I just was typing really fast and

139
00:10:03.039 --> 00:10:06.820
I typed it all lowercase,
and then we get undefined.

140
00:10:06.820 --> 00:10:08.260
What is that?

141
00:10:08.260 --> 00:10:09.220
What does that mean?

142
00:10:09.220 --> 00:10:10.389
And why do we get that?

143
00:10:10.389 --> 00:10:12.740
We are going to explore later today.

144
00:10:12.740 --> 00:10:16.370
So I'm gonna put a pin in that,
but this raises two points.

145
00:10:16.370 --> 00:10:19.162
Number one,
undefined is something that we're gonna,

146
00:10:19.162 --> 00:10:22.110
we've already seen it crop up once or
twice now.

147
00:10:22.110 --> 00:10:23.430
We're going to talk about it later today.

148
00:10:24.580 --> 00:10:28.704
And case sensitivity, so the names of
these things document.getElementById,

149
00:10:28.704 --> 00:10:32.230
querySelector, etcetera,
the little letters and the big letters,

150
00:10:32.230 --> 00:10:34.030
it matters to JavaScript.

151
00:10:34.030 --> 00:10:38.720
So and spelling and things like that
sometimes, this happens all the time.

152
00:10:38.720 --> 00:10:43.303
Where something, I do this every
single time, I type document

153
00:10:43.303 --> 00:10:48.850
getElementBy capital I, capital D,
I do this all the time, and then I get.

154
00:10:50.435 --> 00:10:51.840
No, that's not a function.

155
00:10:51.840 --> 00:10:53.440
I don't know what you're talking about.

156
00:10:53.440 --> 00:10:58.390
So JavaScript can be very picky sometimes
about spelling and things like that.

157
00:10:58.390 --> 00:11:02.997
Can also be very loosey-goosey and not
care sometimes when you wish it would care

158
00:11:02.997 --> 00:11:05.980
and tell you that you've made a mistake.

159
00:11:05.980 --> 00:11:10.615
So we're gonna be working through all this
and we're gonna be talking about how we

160
00:11:10.615 --> 00:11:14.010
can debug when we're
having unexpected results.

161
00:11:14.010 --> 00:11:18.342
But later today, we're gonna talk
about what that undefined is and

162
00:11:18.342 --> 00:11:20.092
why It shows up sometimes.

163
00:11:20.092 --> 00:11:22.315
Great, great, great point, great question.

164
00:11:22.315 --> 00:11:27.365
&gt;&gt; I'm gonna say the up button on
my browser allows me to go back

165
00:11:27.365 --> 00:11:32.240
to what I had before so
I can fix a letter and re-execute.

166
00:11:32.240 --> 00:11:33.950
&gt;&gt; Great discovery, excellent.

167
00:11:33.950 --> 00:11:36.909
So if you press in your
browser's dev tools Usually,

168
00:11:36.909 --> 00:11:41.140
if you press up in the console, you'll
get the last thing that you entered.

169
00:11:41.140 --> 00:11:45.676
And if you keep pressing up, you'll get
the previous things that you entered,

170
00:11:45.676 --> 00:11:49.800
as far back as you've been working
in this tab or in this window.

171
00:11:49.800 --> 00:11:54.423
So, if I type up and I see, okay,
I misspelled, I put capital I,

172
00:11:54.423 --> 00:11:58.060
capital D there, I can just edit that.

173
00:11:58.060 --> 00:12:04.210
And now I can use it as let's say
what was it p1-symbol as expected.

174
00:12:06.550 --> 00:12:09.240
So super handy also if you're like, No,

175
00:12:09.240 --> 00:12:12.966
actually I meant to get p2-symbol
makes your life easier.

176
00:12:12.966 --> 00:12:17.388
So pressing up when you wanna go back in
history, excellent discovery by OJ here.

177
00:12:17.388 --> 00:12:22.057
And then also when your lazy as
many of us developers are, and

178
00:12:22.057 --> 00:12:28.377
you want to just complete something and
I've only typed getEleme I can press tab,

179
00:12:28.377 --> 00:12:33.340
and it will complete whatever
the auto suggest was suggesting.

180
00:12:34.500 --> 00:12:37.702
Okay, let's continue with our
scavenger hunt the number of

181
00:12:37.702 --> 00:12:39.470
squares in the tic tac toe board.

182
00:12:41.100 --> 00:12:42.070
Anybody yet Steven?

183
00:12:43.100 --> 00:12:48.910
&gt;&gt; So I did querySelector all the squares,
and then give me the link.

184
00:12:48.910 --> 00:12:52.740
&gt;&gt; Okay, so can you walk me through
what you typed to get all this.

185
00:12:52.740 --> 00:12:54.930
&gt;&gt; document.querySelectorAll.

186
00:12:54.930 --> 00:12:55.910
&gt;&gt; queryselectorAll.

187
00:12:55.910 --> 00:12:59.620
&gt;&gt; And CSSSelectorSquare.

188
00:12:59.620 --> 00:13:05.160
&gt;&gt; Okay, and so then the quotes and
then what how do we select for?

189
00:13:05.160 --> 00:13:06.265
&gt;&gt; .square.

190
00:13:06.265 --> 00:13:08.830
.square, okay.

191
00:13:08.830 --> 00:13:13.332
That's going to give any element
with the class of square,

192
00:13:13.332 --> 00:13:16.854
which happens to be
applied in this document.

193
00:13:16.854 --> 00:13:18.390
&gt;&gt; No .link.

194
00:13:18.390 --> 00:13:21.710
&gt;&gt; Yep so in this document,
if we drill down in our HTML inspector,

195
00:13:21.710 --> 00:13:25.350
we notice that all of the squares in
the board have this class applied.

196
00:13:25.350 --> 00:13:29.870
So that is, in this particular webpage,
that is a great way to pull them out.

197
00:13:29.870 --> 00:13:33.434
So if we do .square,
we get all of those and then.

198
00:13:33.434 --> 00:13:34.004
&gt;&gt; .length.

199
00:13:34.004 --> 00:13:36.710
&gt;&gt; .length tells me how many there are.

200
00:13:36.710 --> 00:13:40.450
There are nine, as we would expect for
a tic tac toe board.

201
00:13:40.450 --> 00:13:42.570
Excellent, thanks so much, Steven.

202
00:13:42.570 --> 00:13:46.270
How about the text from the page
that says "a game you know".

203
00:13:49.010 --> 00:13:53.150
In this case, it shows up
underneath the main page header.

204
00:13:55.020 --> 00:13:59.215
So if we look in our HTML,
collapse a few things here,

205
00:13:59.215 --> 00:14:03.150
we noticed that is in
the header element in an h2.

206
00:14:04.910 --> 00:14:08.499
So can anybody walk through what I
would need to do to pull out this text?

207
00:14:10.670 --> 00:14:14.970
And maybe if someone is in the chat,
we can also find out from there.

208
00:14:14.970 --> 00:14:16.740
Now, in this case,
I don't have a lot to work with, right?

209
00:14:16.740 --> 00:14:21.589
I don't have an id on this element,
I don't have a class on this element,

210
00:14:21.589 --> 00:14:23.480
so what else can I work with?

211
00:14:23.480 --> 00:14:24.069
Yeah, OJ.
&gt;&gt; The

212
00:14:24.069 --> 00:14:28.340
document.querySelector("h2.textContent").

213
00:14:28.340 --> 00:14:30.292
&gt;&gt; Great, okay,

214
00:14:30.292 --> 00:14:39.461
document.querySelector("h2.textContent")
A game you know,

215
00:14:39.461 --> 00:14:42.925
love it, excellent work.

216
00:14:42.925 --> 00:14:46.295
All right, fabulous hunting, everyone.

217
00:14:46.295 --> 00:14:47.580
We turned up all of these things.

218
00:14:47.580 --> 00:14:49.405
[LAUGH] Any questions so far?

219
00:14:50.735 --> 00:14:56.970
Or are we itching to not just find things
in the page, but bend them to our will?

220
00:14:58.310 --> 00:15:01.910
&gt;&gt; So I did querySelector("h2.length") and
then it said undefined.

221
00:15:01.910 --> 00:15:04.281
I'm just trying to understand
if there is something in there,

222
00:15:04.281 --> 00:15:05.850
why would it be undefined?

223
00:15:05.850 --> 00:15:08.237
&gt;&gt; Interesting, okay, so

224
00:15:08.237 --> 00:15:14.960
if we do document.querySelector("
h2.length") undefined.

225
00:15:14.960 --> 00:15:17.790
Our friend undefined showing up yet again.

226
00:15:17.790 --> 00:15:23.209
We're gonna talk later about why this is
but essentially so what happens when I

227
00:15:23.209 --> 00:15:28.644
get querySelector("h2") by itself is
that I get the h2 element itself.

228
00:15:28.644 --> 00:15:33.450
Or more specifically I get
a JavaScripty representation of that

229
00:15:33.450 --> 00:15:35.678
element that I can work with.

230
00:15:35.678 --> 00:15:39.638
Were gonna talk later
today about objects and

231
00:15:39.638 --> 00:15:46.630
we they have a certain aspect you could
say called properties that I can access.

232
00:15:46.630 --> 00:15:51.000
So in this case, if I open up this
h2 element in my dev tools and

233
00:15:51.000 --> 00:15:52.189
I look through.

234
00:15:52.189 --> 00:15:56.748
These are all different values
that this knows about and

235
00:15:56.748 --> 00:16:01.113
the names that I'm seeing
here like like inner text or

236
00:16:01.113 --> 00:16:08.194
children etcetera these are properties on
the object that represents my h2 element.

237
00:16:08.194 --> 00:16:10.231
We're gonna talk more about objects and
properties later.

238
00:16:10.231 --> 00:16:14.786
But suffice it to say when I type in
.length JavaScript is looking at this

239
00:16:14.786 --> 00:16:18.906
list of things that it knows about and
it's looking for a length.

240
00:16:18.906 --> 00:16:21.962
And it's like I don't know
about a length on this element.

241
00:16:21.962 --> 00:16:25.589
However, and we're gonna see this later,

242
00:16:25.589 --> 00:16:30.600
if I were to do textContent.length,
then I get something.

243
00:16:30.600 --> 00:16:35.320
And we're gonna talk later
about what that is and why.

244
00:16:35.320 --> 00:16:36.767
So this is another great discovery.

245
00:16:36.767 --> 00:16:38.940
I love all these intrepid explorations and

246
00:16:38.940 --> 00:16:41.424
discoveries that we're
making already today.

