WEBVTT

1
00:00:00.000 --> 00:00:04.786
We have established that each character
in a string gets a particular

2
00:00:04.786 --> 00:00:08.994
number kind of assigned to it,
either to the letter itself or

3
00:00:08.994 --> 00:00:12.477
to kind of where that letter
begins in the string.

4
00:00:12.477 --> 00:00:16.877
And there is a name in JavaScript and
in computer science for

5
00:00:16.877 --> 00:00:21.106
the numbers assigned to
positions of these characters.

6
00:00:21.106 --> 00:00:26.815
Does anybody know the word for
that, a number given to a position?

7
00:00:26.815 --> 00:00:28.632
Yeah.
&gt;&gt; It's an array.

8
00:00:28.632 --> 00:00:32.089
&gt;&gt; Okay, so arrays also have
these numbers assigned to them.

9
00:00:32.089 --> 00:00:33.895
We're gonna talk about
arrays a little bit later.

10
00:00:33.895 --> 00:00:37.072
So this is something that strings and
arrays have in common,

11
00:00:37.072 --> 00:00:39.518
is the things inside of
them each get a number.

12
00:00:39.518 --> 00:00:42.760
And those numbers,
just as a point of trivia, are called?

13
00:00:42.760 --> 00:00:44.209
&gt;&gt; In chat, they're saying index.

14
00:00:44.209 --> 00:00:48.916
&gt;&gt; Index, exactly, so the number
given to each thing inside of a more

15
00:00:48.916 --> 00:00:53.875
complex thing [LAUGH] when that thing
is ordered is called an index, and

16
00:00:53.875 --> 00:00:55.740
plural indices, right?

17
00:00:55.740 --> 00:01:00.858
So we often talk about, what is the index
of a particular character in a string?

18
00:01:00.858 --> 00:01:03.052
Or, as we're gonna see later,

19
00:01:03.052 --> 00:01:07.621
what is the index of a particular
element or value within an array?

20
00:01:07.621 --> 00:01:14.819
So when we want to work with strings,
we use these indices a lot.

21
00:01:14.819 --> 00:01:19.115
If we want to ask JavaScript,
JavaScript, dear JavaScript,

22
00:01:19.115 --> 00:01:23.832
please tell me, in this string ALOHA,
what is the first character?

23
00:01:23.832 --> 00:01:27.780
I can do that using this
magical invocation here,

24
00:01:27.780 --> 00:01:33.232
square brackets at the end of the string
with a number inside of them.

25
00:01:33.232 --> 00:01:38.104
Where that number represents
an index of the character that I

26
00:01:38.104 --> 00:01:40.309
am asking JavaScript for.

27
00:01:40.309 --> 00:01:45.274
So in this case, if I asked JavaScript,
what is the character at index 0?

28
00:01:45.274 --> 00:01:49.612
In other words, if I have the string
ALOHA and then in square brackets [0],

29
00:01:49.612 --> 00:01:52.847
it's asking,
what is the first character in the string?

30
00:01:52.847 --> 00:01:57.751
And so this is going to give me,
any guesses?

31
00:01:57.751 --> 00:02:02.126
&gt;&gt; A
&gt;&gt; A, so we said that in our,

32
00:02:04.362 --> 00:02:09.053
We said that in our strings, the first
character, although it sounds sort

33
00:02:09.053 --> 00:02:12.932
of counterintuitive if you're
not used to counting from 0.

34
00:02:12.932 --> 00:02:15.699
As humans, we often start counting at 1.

35
00:02:15.699 --> 00:02:18.103
In JavaScript and
in lots of other programming languages,

36
00:02:18.103 --> 00:02:19.120
we start counting at 0.

37
00:02:19.120 --> 00:02:22.339
So 0 is the first character,
the character at index 0.

38
00:02:22.339 --> 00:02:28.125
Okay, what if we wanna ask it,
what is the third character in the string?

39
00:02:28.125 --> 00:02:31.552
Well, again,
because we started at index 0,

40
00:02:31.552 --> 00:02:36.436
we need to kind of always be mentally
subtracting 1 from the order,

41
00:02:36.436 --> 00:02:40.911
the number of things into
the string that we're looking for.

42
00:02:40.911 --> 00:02:46.903
So in this case,
if we're asking the third character,

43
00:02:46.903 --> 00:02:51.628
that's gonna be the character at index 2.

44
00:02:51.628 --> 00:02:56.366
So again, we have A is at index 0,
L is at index 1, O is at index 2.

45
00:02:56.366 --> 00:03:00.570
So if I type in ALOHA[2],

46
00:03:00.570 --> 00:03:04.783
I expect to get and I do get O.

47
00:03:04.783 --> 00:03:08.802
Yeah, we're all on board,
a surfboard, in this case, [SOUND].

48
00:03:08.802 --> 00:03:13.541
Okay, [LAUGH] all right, so
how do I ask JavaScript,

49
00:03:13.541 --> 00:03:18.629
what is the index of a specific
character in the string?

50
00:03:18.629 --> 00:03:23.563
Let's say I wanna find out,
what is the index of the L?

51
00:03:23.563 --> 00:03:28.886
Well, I have a nice little spell,
I can use indexOf, it's handy.

52
00:03:28.886 --> 00:03:32.113
Sometimes things are named in a way
that we expect, sometimes they are not.

53
00:03:32.113 --> 00:03:34.065
In this case,
they're named in a way that we expect.

54
00:03:34.065 --> 00:03:37.040
So I can ask JavaScript
of a particular string.

55
00:03:37.040 --> 00:03:39.062
I can do .indexOf, and

56
00:03:39.062 --> 00:03:44.626
then in parentheses give it
the character that I'm looking for,

57
00:03:44.626 --> 00:03:49.697
and it will tell me the index
where that character appears.

58
00:03:49.697 --> 00:03:50.953
So let's try it out.

59
00:03:50.953 --> 00:03:56.826
What do you think is going to be
the value of "ALOHA".indexOf("L")?

60
00:03:56.826 --> 00:03:57.511
&gt;&gt; 1.

61
00:03:57.511 --> 00:04:02.752
&gt;&gt; We would expect 1, and it is indeed 1.

62
00:04:02.752 --> 00:04:07.094
Beautiful, now, what about this one,

63
00:04:07.094 --> 00:04:10.804
"ALOHA" .indexOf("A").

64
00:04:10.804 --> 00:04:12.113
What do you think it's gonna be?

65
00:04:12.113 --> 00:04:13.020
&gt;&gt; 0.

66
00:04:13.020 --> 00:04:14.636
&gt;&gt; 0 is a good contender.

67
00:04:14.636 --> 00:04:20.812
We do have an A at index 0 as we saw
before, cuz we asked it ALOHA(0).

68
00:04:20.812 --> 00:04:22.105
We know that that's A,

69
00:04:22.105 --> 00:04:25.868
but there's also an A at the end of
the string, which would be index?

70
00:04:25.868 --> 00:04:26.570
&gt;&gt; 4.

71
00:04:26.570 --> 00:04:29.529
&gt;&gt; 4, exactly, so which one?

72
00:04:29.529 --> 00:04:30.957
&gt;&gt; It takes the average.

73
00:04:30.957 --> 00:04:32.595
&gt;&gt; [LAUGH] The average, maybe.

74
00:04:32.595 --> 00:04:34.649
Perhaps, let's find out.

75
00:04:34.649 --> 00:04:39.426
So the way we can find out, as always, is
by tinkering with things in our console,

76
00:04:39.426 --> 00:04:40.964
and it indeed returns 0.

77
00:04:40.964 --> 00:04:46.938
So indexOf is going to find with the first
thing like this that I'm looking for.

78
00:04:46.938 --> 00:04:49.669
And we're gonna see indexOf
works on arrays too, so

79
00:04:49.669 --> 00:04:51.416
we're gonna look at that later.

80
00:04:51.416 --> 00:04:54.992
But in strings,
it's going to return the index of

81
00:04:54.992 --> 00:04:58.924
the first appearance of this
character in the string.

82
00:04:58.924 --> 00:05:01.769
So keep in mind that if you have
multiple of the same character,

83
00:05:01.769 --> 00:05:04.140
you're only gonna find
the first one with indexOf.

84
00:05:06.077 --> 00:05:10.758
Now, what if I ask it to tell
me the index of a character

85
00:05:10.758 --> 00:05:13.887
that's not in the string, like Q?

86
00:05:13.887 --> 00:05:17.775
For example,
if I ask "ALOHA".indexOf("Q").

87
00:05:17.775 --> 00:05:18.678
&gt;&gt; Null.

88
00:05:18.678 --> 00:05:20.541
&gt;&gt; Maybe it's gonna be null.

89
00:05:20.541 --> 00:05:23.039
That might make sense.

90
00:05:23.039 --> 00:05:27.679
Maybe it's gonna be, Dear Anjana,
you don't know what you're talking about.

91
00:05:27.679 --> 00:05:31.013
Stop asking me for
stuff that doesn't exist, unlikely,

92
00:05:31.013 --> 00:05:32.653
cuz how does it know my name?

93
00:05:32.653 --> 00:05:33.784
Tracking, no, just kidding.

94
00:05:33.784 --> 00:05:37.273
[LAUGH] But because it's JavaScript,

95
00:05:37.273 --> 00:05:43.059
sometimes stuff is interesting and
this is one of those cases.

96
00:05:43.059 --> 00:05:44.370
So let's find out.

97
00:05:44.370 --> 00:05:48.098
Let's just do it,
let's find out what it does.

98
00:05:48.098 --> 00:05:51.966
-1, so
this is just kind of a convention in

99
00:05:51.966 --> 00:05:56.882
JavaScript that when I ask for
the index of a character or

100
00:05:56.882 --> 00:06:02.970
an element that doesn't exist in
the string, I'm gonna get a -1.

101
00:06:02.970 --> 00:06:06.628
That indicates that this character
is not present in the string.

102
00:06:06.628 --> 00:06:10.447
And later in life, in our JavaScript
lives, we're going to see how we

103
00:06:10.447 --> 00:06:14.362
could use that information to make
certain decisions or what have you.

104
00:06:14.362 --> 00:06:19.256
But basically, if you get a negative
number, -1 is the only negative number

105
00:06:19.256 --> 00:06:24.173
you could get, as far as I know, [LAUGH]
that means this string does not appear.

106
00:06:24.173 --> 00:06:26.191
It's outside of the string.

107
00:06:26.191 --> 00:06:27.512
It's in the negative world.

108
00:06:27.512 --> 00:06:28.398
Yes, question.

109
00:06:28.398 --> 00:06:29.757
&gt;&gt; Is this case sensitive?

110
00:06:29.757 --> 00:06:31.963
&gt;&gt; Great question.

111
00:06:31.963 --> 00:06:33.675
Is this case sensitive?

112
00:06:33.675 --> 00:06:35.264
Let's find out.

113
00:06:35.264 --> 00:06:36.286
So for example,

114
00:06:36.286 --> 00:06:42.282
instead of asking "ALOHA".indexOf("A") ,or
let's use L cuz there's only one of them.

115
00:06:42.282 --> 00:06:46.806
Let's ask "ALOHA".indexOf("l"), -1.

116
00:06:46.806 --> 00:06:52.840
So the answer to the question, is it case
sensitive, is, sure is, yes, indeed.

117
00:06:52.840 --> 00:06:58.378
Characters like A and
lower case a are separate.

118
00:06:58.378 --> 00:07:02.021
JavaScript doesn't even necessarily,
well, it does kind of know that they're

119
00:07:02.021 --> 00:07:04.575
somehow related, but
it sees them as different things.

120
00:07:04.575 --> 00:07:07.456
But in some cases,
like if I ask for a lowercase q,

121
00:07:07.456 --> 00:07:11.520
that's not in the string either, so
it might give us the same result.

122
00:07:11.520 --> 00:07:15.855
Now, strings since they're made
up of multiple characters,

123
00:07:15.855 --> 00:07:19.876
means that they can contain
shorter strings within them.

124
00:07:19.876 --> 00:07:25.281
So for example, our word ALOHA
also has the word HA [LAUGH].

125
00:07:25.281 --> 00:07:29.787
Like you're making a really
ridiculous statement, and I'm saying,

126
00:07:29.787 --> 00:07:32.948
ha, negative indices,
what a concept, right?

127
00:07:32.948 --> 00:07:36.824
So we can ask JavaScript whether or

128
00:07:36.824 --> 00:07:44.448
not a string includes another
string using this spell, includes.

129
00:07:44.448 --> 00:07:51.158
So this is a question that we're asking,
dear JavaScript,

130
00:07:51.158 --> 00:07:56.167
does the string ALOHA
include the string HA?

131
00:07:56.167 --> 00:07:59.120
JavaScript is gonna
respond with an answer.

132
00:07:59.120 --> 00:08:03.931
This is a little question, what type
of answer is JavaScript gonna give me?

133
00:08:03.931 --> 00:08:06.709
What type of value do
you think this returns?

134
00:08:06.709 --> 00:08:07.726
&gt;&gt; Boolean?

135
00:08:07.726 --> 00:08:10.718
&gt;&gt; Boolean, nice guess, true or false.

136
00:08:10.718 --> 00:08:12.408
It's a yes or no question, right?

137
00:08:12.408 --> 00:08:16.603
This string either does or
does not contain this other string.

138
00:08:16.603 --> 00:08:20.287
So we're gonna get a Boolean out
from includes, that tells us,

139
00:08:20.287 --> 00:08:24.054
yes, true, this string includes
that other string, or false.

140
00:08:24.054 --> 00:08:30.979
So in this case, we would expect what
value for "ALOHA".includes("HA")?

141
00:08:30.979 --> 00:08:36.136
True, yes, there is HA in there.

142
00:08:36.136 --> 00:08:41.602
And likewise if I asked,
does ALOHA include LOL?

143
00:08:41.602 --> 00:08:44.083
No, almost, but no.

144
00:08:44.083 --> 00:08:47.855
Almost doesn't count in JavaScript,
[LAUGH] only in horseshoes and

145
00:08:47.855 --> 00:08:48.788
hand grenades.

146
00:08:48.788 --> 00:08:53.874
So the includes spell here is something
we can ask of a string that gets

147
00:08:53.874 --> 00:08:59.502
a Boolean yes or no value of whether or
not some other substring is part of it.

148
00:09:02.418 --> 00:09:06.277
Similarly, or
sort of as a more specific case,

149
00:09:06.277 --> 00:09:11.396
we can also ask whether a string
begins with some other string.

150
00:09:11.396 --> 00:09:14.578
Anybody happen to know the spell or
the question or

151
00:09:14.578 --> 00:09:17.773
the name of the thing that
I could ask JavaScript?

152
00:09:17.773 --> 00:09:22.096
If we had includes is what tells me
whether or not a string includes another

153
00:09:22.096 --> 00:09:26.646
string, I wanna find out whether this
string starts with some other string.

154
00:09:26.646 --> 00:09:27.923
I can ask.

155
00:09:27.923 --> 00:09:29.559
&gt;&gt; Like a left.

156
00:09:29.559 --> 00:09:31.009
&gt;&gt; Does it start with this thing?

157
00:09:31.009 --> 00:09:32.831
So startsWith is this
spell we can use here.

158
00:09:32.831 --> 00:09:36.358
Yeah, this is just trivia in case
you've already seen this before.

159
00:09:36.358 --> 00:09:40.464
So startsWith is another
question I can ask of a string

160
00:09:40.464 --> 00:09:44.489
that similarly is gonna
return a value of what type?

161
00:09:44.489 --> 00:09:47.250
Boolean, yes or no, true or false.

162
00:09:47.250 --> 00:09:52.261
So if I ask "ALOHA".startsWith("AL")?

163
00:09:52.261 --> 00:09:54.160
True.

164
00:09:54.160 --> 00:10:00.214
"ALOHA".startsWith("HA"), False.

165
00:10:00.214 --> 00:10:05.277
So these are some fun little [LAUGH]
questions we can ask JavaScript.

166
00:10:05.277 --> 00:10:08.698
Now, it seems kind of trivial with
a short string like ALOHA, what have you.

167
00:10:08.698 --> 00:10:11.910
But this can end up being quite
useful when you end up working with

168
00:10:11.910 --> 00:10:14.827
a more complex program that
maybe has to manipulate text or

169
00:10:14.827 --> 00:10:17.522
you wanna be checking the value for
certain strings.

170
00:10:17.522 --> 00:10:23.224
Some of these spells are gonna come in
handy as you're working with strings.

171
00:10:23.224 --> 00:10:28.748
Okay, now, if we know that strings
can contain other strings,

172
00:10:28.748 --> 00:10:31.612
then that means we can also ask for

173
00:10:31.612 --> 00:10:37.565
an index not just of a single character,
but of an entire substring.

174
00:10:37.565 --> 00:10:43.134
And we can actually use our good
friend indexOf with a longer string,

175
00:10:43.134 --> 00:10:47.082
a substring instead of
just a single character.

176
00:10:47.082 --> 00:10:51.737
So earlier we saw "ALOHA".indexOf("H"),
let's say,

177
00:10:51.737 --> 00:10:55.456
or index of A, or
whatever individual character.

178
00:10:55.456 --> 00:10:58.810
We can also ask for
the index of a substring, so

179
00:10:58.810 --> 00:11:02.252
another string that has
multiple characters.

180
00:11:02.252 --> 00:11:06.447
So what do you think
this is going to give us?

181
00:11:06.447 --> 00:11:13.142
Let's go back to our drawing of
the indices related to the string.

182
00:11:13.142 --> 00:11:18.906
What do you think "ALOHA".indexOf("HA")
is going to tell me?

183
00:11:20.871 --> 00:11:27.359
The question is, where does the substring
HA begin in the string ALOHA?

184
00:11:27.359 --> 00:11:28.700
&gt;&gt; 3.

185
00:11:28.700 --> 00:11:31.010
&gt;&gt; So I heard the guess 3.

186
00:11:31.010 --> 00:11:32.443
I see some nodding.

187
00:11:32.443 --> 00:11:36.425
I can't see if the chat is nodding,
but I'm just gonna feel the nods.

188
00:11:36.425 --> 00:11:39.578
[LAUGH] All right, let's
&gt;&gt; There's 3s the chat

189
00:11:39.578 --> 00:11:41.375
&gt;&gt; There's 3s in the chat.

190
00:11:41.375 --> 00:11:42.682
Let's double-check.

191
00:11:44.336 --> 00:11:46.647
Indeed, it does.

192
00:11:46.647 --> 00:11:49.335
And this is why,
to go back to our drawing,

193
00:11:49.335 --> 00:11:53.746
I said that sometimes it's helpful
to think about these indices not as

194
00:11:53.746 --> 00:11:58.977
corresponding to a particular character,
as in the green numbers at the top here,

195
00:11:58.977 --> 00:12:01.769
but to a particular
position in the string.

196
00:12:01.769 --> 00:12:06.273
So both the character H and
the substring HA

197
00:12:06.273 --> 00:12:11.036
begins at position 3, if that makes sense.

198
00:12:11.036 --> 00:12:14.616
How about "ALOHA"indexOf("LOL")?

199
00:12:14.616 --> 00:12:19.342
Now, we already asked if ALOHA includes
LOL, and JavaScript said, false.

200
00:12:19.342 --> 00:12:24.178
So what do you think index
of LOL is going to give us?

201
00:12:24.178 --> 00:12:26.502
Any guesses?

202
00:12:26.502 --> 00:12:27.562
&gt;&gt; -1.

203
00:12:27.562 --> 00:12:29.955
&gt;&gt; I heard -1.

204
00:12:29.955 --> 00:12:31.983
Let's find out.

205
00:12:31.983 --> 00:12:33.151
Boom, yes.

206
00:12:33.151 --> 00:12:38.110
So same rules as for a character
that doesn't exist in the string.

207
00:12:38.110 --> 00:12:42.001
Even though we have an L and
an O in ALOHA,

208
00:12:42.001 --> 00:12:48.532
the substring LOL does not exist,
so the whole thing returns -1.

209
00:12:48.532 --> 00:12:49.753
Cool?

210
00:12:49.753 --> 00:12:50.951
So cool.

211
00:12:50.951 --> 00:12:53.999
We know numbers corresponding
to things inside of a string.

212
00:12:53.999 --> 00:12:56.729
All right,
what else can we do with strings?

213
00:12:56.729 --> 00:12:58.468
How about we add them together?

214
00:12:58.468 --> 00:13:04.616
[LAUGH] So the plus, plus is a thing
we're gonna talk about later.

215
00:13:04.616 --> 00:13:08.935
Plus can be used to
connect strings together.

216
00:13:08.935 --> 00:13:13.899
If I use a + on "ALOHA" + "!",
this is going

217
00:13:13.899 --> 00:13:18.868
to give me a combined string
that sort of smooches

218
00:13:18.868 --> 00:13:23.957
the two strings together
into a new string that has

219
00:13:23.957 --> 00:13:28.712
both of them,
just one right after the other.

220
00:13:28.712 --> 00:13:34.733
So "ALOHA" + "!" is ALOHA!,
more enthusiastically.

221
00:13:34.733 --> 00:13:38.517
[LAUGH] So this is something we're
gonna come back to a little bit later

222
00:13:38.517 --> 00:13:40.225
when we talk about operators.

223
00:13:40.225 --> 00:13:44.265
But plus is an operator
that works on strings to,

224
00:13:44.265 --> 00:13:49.093
you can also hear the word
concatenate strings together,

225
00:13:49.093 --> 00:13:51.963
meaning, squish them together.

226
00:13:51.963 --> 00:13:54.544
But why am I yelling so much?

227
00:13:54.544 --> 00:13:56.295
Why is there so much yelling?

228
00:13:56.295 --> 00:14:00.468
And of the Schitt's Creek ladies want
to know why I'm raising my voice.

229
00:14:00.468 --> 00:14:04.279
And so there's another fun tricks
that strings can do, which is,

230
00:14:04.279 --> 00:14:06.534
they have a spell called toLowerCase.

231
00:14:06.534 --> 00:14:11.132
"ALOHA".toLowerCase is going to give me,
any guesses?

232
00:14:13.032 --> 00:14:14.974
&gt;&gt; Lowercase aloha.

233
00:14:14.974 --> 00:14:20.466
aloha, exactly, [LAUGH] so we said earlier
that JavaScript sees the character

234
00:14:20.466 --> 00:14:26.138
capital A and the character lowercase
a as different characters, that is true.

235
00:14:26.138 --> 00:14:31.136
But it does kind of know a little bit
about the correspondence between lowercase

236
00:14:31.136 --> 00:14:32.935
and uppercase characters.

237
00:14:32.935 --> 00:14:36.793
So there is a method or
a spell, an invocation,

238
00:14:36.793 --> 00:14:41.904
I can ask JavaScript to give me
the lowercase version of a string

239
00:14:41.904 --> 00:14:46.740
by calling string.toLowerCase,
and then parentheses.

