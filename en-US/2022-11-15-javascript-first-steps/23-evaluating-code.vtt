WEBVTT

1
00:00:00.198 --> 00:00:05.683
So let's think about what
happens when we run some code

2
00:00:05.683 --> 00:00:10.820
that in this case declares and
assigns a variable.

3
00:00:11.950 --> 00:00:16.018
Now, we already talked about this
a little bit when we were talking about

4
00:00:16.018 --> 00:00:17.563
the combined age example.

5
00:00:17.563 --> 00:00:23.552
What is gonna happen when I run this code?

6
00:00:23.552 --> 00:00:27.920
What is JavaScript gonna do or think?

7
00:00:27.920 --> 00:00:31.020
A few different things are gonna happen,
so let's think about it.

8
00:00:34.457 --> 00:00:40.090
So one thing that it's gonna do is it's
gonna see that let answerToLife, right?

9
00:00:42.460 --> 00:00:45.199
And what is it gonna do when
it sees let answerToLife?

10
00:00:45.199 --> 00:00:46.018
&gt;&gt; Create the variable.

11
00:00:46.018 --> 00:00:48.891
&gt;&gt; Create a variable, exactly.

12
00:00:48.891 --> 00:00:56.817
Let me, Grab a whiteboard here.

13
00:00:56.817 --> 00:01:00.377
Let's go back to our whiteboard.

14
00:01:00.377 --> 00:01:05.639
And I'm just gonna make some space for
some new stuff here.

15
00:01:08.930 --> 00:01:13.672
Okay, so when we have let answerToLife,

16
00:01:13.672 --> 00:01:18.146
we're going to create a new variable.

17
00:01:18.146 --> 00:01:21.578
In this case, for brevity's sake,
I'll call it answer.

18
00:01:21.578 --> 00:01:25.010
Okay, so
that's one thing that's gonna happen.

19
00:01:25.010 --> 00:01:25.873
What else is gonna happen?

20
00:01:28.737 --> 00:01:34.552
If the chat is chiming in, go right ahead.

21
00:01:34.552 --> 00:01:37.390
What about what's happening on
the right-hand side of our equals here?

22
00:01:37.390 --> 00:01:41.070
There we got like a 4 + 1 x 2 x 4 + 2.

23
00:01:45.281 --> 00:01:48.237
What is JavaScript gonna, well,
first of all, what is this thing?

24
00:01:48.237 --> 00:01:51.823
((4 + 1) x 2 x 4) etc.

25
00:01:51.823 --> 00:01:53.493
That thing is we call a?

26
00:01:53.493 --> 00:01:54.215
&gt;&gt; Experssion.

27
00:01:54.215 --> 00:01:55.782
&gt;&gt; An expression, exactly.

28
00:01:55.782 --> 00:01:58.467
And what does JavaScript
do with expressions?

29
00:02:00.623 --> 00:02:01.971
&gt;&gt; Evaluates them.

30
00:02:01.971 --> 00:02:02.518
&gt;&gt; Sorry, yes?

31
00:02:02.518 --> 00:02:03.141
&gt;&gt; Evaluates.

32
00:02:03.141 --> 00:02:04.426
&gt;&gt; It evaluates them, right?

33
00:02:04.426 --> 00:02:07.086
Or we could say, sorry,
did you say something else?

34
00:02:07.086 --> 00:02:07.867
&gt;&gt; Operations.

35
00:02:07.867 --> 00:02:10.236
&gt;&gt; It looks at the operations
within that expression.

36
00:02:10.236 --> 00:02:14.790
It carries out those operations
to evaluate the expression.

37
00:02:14.790 --> 00:02:19.579
To figure out, given all of these
operations, what value does this

38
00:02:19.579 --> 00:02:24.539
expression evaluate to once I've
performed all of these additions,

39
00:02:24.539 --> 00:02:28.220
and multiplications, and whatever.

40
00:02:28.220 --> 00:02:32.809
And we can make it quick,
this turns out to be 42 [LAUGH] because

41
00:02:32.809 --> 00:02:37.326
that's the answer to life,
the universe, and everything.

42
00:02:37.326 --> 00:02:41.428
And so what JavaScript is gonna do,

43
00:02:41.428 --> 00:02:46.487
one of the things it's
gonna do here is it's

44
00:02:46.487 --> 00:02:53.892
going to conjure up in its data
memory somewhere a value of 42.

45
00:02:53.892 --> 00:02:58.058
Once it has evaluated all of these
operations in that expression to figure

46
00:02:58.058 --> 00:03:00.892
out what the value of this expression is,
right?

47
00:03:00.892 --> 00:03:06.300
And then one more thing needs to happen,
that's indicated by the equals sign.

48
00:03:08.594 --> 00:03:09.909
Yeah, Paul?

49
00:03:09.909 --> 00:03:13.463
&gt;&gt; It assigns that value
to the answerToLife.

50
00:03:13.463 --> 00:03:17.509
&gt;&gt; Exactly, so
it's gonna create a variable answerToLife.

51
00:03:17.509 --> 00:03:21.311
It's going to evaluate the expression,
create a value,

52
00:03:21.311 --> 00:03:25.977
representing whatever that is,
in this case, it's the number 42.

53
00:03:25.977 --> 00:03:30.845
And then importantly, it's going to
create the point, the pointing arrow,

54
00:03:30.845 --> 00:03:33.660
which in our minds we can
think of as an arrow.

55
00:03:33.660 --> 00:03:38.662
It's gonna create a pointer or
a reference from the name

56
00:03:38.662 --> 00:03:44.098
of that variable to the value
of the expression in this case.

57
00:03:44.098 --> 00:03:48.405
Okay, so this is review so
far, we've talked about this.

58
00:03:48.405 --> 00:03:53.276
Now, what happens [LAUGH]
when this code runs?

59
00:03:53.276 --> 00:03:58.406
And this is where we're really getting
into more pop music references.

60
00:03:58.406 --> 00:04:03.276
But also understanding really
how JavaScript is sort of

61
00:04:03.276 --> 00:04:05.561
thinking about our code.

62
00:04:05.561 --> 00:04:11.069
So let me take moment and split screen
this so that we can talk about it.

63
00:04:11.069 --> 00:04:14.084
Okay, this text size is quite small,
but I'll just read the code to you.

64
00:04:14.084 --> 00:04:18.595
So we have let scrub =
guy that thinks he's fly.

65
00:04:18.595 --> 00:04:22.899
Also known as a busta,
meaning let busta = scrub.

66
00:04:22.899 --> 00:04:27.710
And then scrub = 'guy that
can't get no love from me'.

67
00:04:27.710 --> 00:04:28.872
So these are the things
that are happening.

68
00:04:28.872 --> 00:04:31.799
So let's walk through and
let's think about it together.

69
00:04:31.799 --> 00:04:36.113
What is JavaScript doing when it
runs through this code line by line.

70
00:04:36.113 --> 00:04:39.071
And it is gonna start at the top and
work its way down to the bottom.

71
00:04:39.071 --> 00:04:41.839
Okay, so in the first one, let's see.

72
00:04:41.839 --> 00:04:44.700
OJ, what is the first line doing here?

73
00:04:44.700 --> 00:04:48.177
&gt;&gt; It's creating a variable called
scrub and assigning a value to it.

74
00:04:48.177 --> 00:04:52.123
&gt;&gt; Bingo, okay, so
it's creating a variable called scrub.

75
00:04:54.691 --> 00:04:58.851
And then when you say
assigning a value to it,

76
00:04:58.851 --> 00:05:04.336
it's conjuring up, or
we're telling it a certain value.

77
00:05:04.336 --> 00:05:07.251
Okay, so it's conjuring up a certain
value, in this case, it's a string.

78
00:05:07.251 --> 00:05:14.431
I'm just gonna abbreviate this
as fly [LAUGH] for shorthand.

79
00:05:14.431 --> 00:05:20.982
Okay, and then you said it's assigning,
which again, we said is doing what?

80
00:05:20.982 --> 00:05:23.897
How would I draw this in
my little whiteboard?

81
00:05:23.897 --> 00:05:24.950
&gt;&gt; With an arrow.

82
00:05:24.950 --> 00:05:29.639
&gt;&gt; An arrow, it's creating a pointer or
an arrow in our mental model, but

83
00:05:29.639 --> 00:05:33.861
a pointer in computer lingo,
I guess, between the name scrub,

84
00:05:33.861 --> 00:05:37.398
this new variable I've created,
and the value fly.

85
00:05:37.398 --> 00:05:38.165
Okay, great.

86
00:05:38.165 --> 00:05:39.432
Awesome, thank you.

87
00:05:39.432 --> 00:05:41.876
How about the next line?

88
00:05:41.876 --> 00:05:45.503
Jason, you wanna walk us through this one?

89
00:05:45.503 --> 00:05:49.290
&gt;&gt; So it's creating a new variable called,
is that busta?

90
00:05:49.290 --> 00:05:50.638
&gt;&gt; Sorry, it's small.

91
00:05:50.638 --> 00:05:55.261
[LAUGH]
&gt;&gt; And then it is assigning,

92
00:05:55.261 --> 00:05:59.885
is it creating a pointer
to the scrub variable?

93
00:05:59.885 --> 00:06:01.390
&gt;&gt; Great question.

94
00:06:01.390 --> 00:06:04.561
&gt;&gt; Rather than assigning the text to it?

95
00:06:04.561 --> 00:06:05.646
&gt;&gt; This is a great question.

96
00:06:05.646 --> 00:06:09.836
So what is really JavaScript
doing when I say, now,

97
00:06:09.836 --> 00:06:15.170
we've said before that since I
have remembered the scrub value, I

98
00:06:15.170 --> 00:06:21.478
can use that name scrub as if it was that
string value wherever I want in my code.

99
00:06:21.478 --> 00:06:26.703
So remember how before when we
gave JavaScript an expression with

100
00:06:26.703 --> 00:06:31.643
a bunch of arithmetic in it,
it evaluated that expression and

101
00:06:31.643 --> 00:06:35.172
it figured out what
value that resolves to.

102
00:06:35.172 --> 00:06:39.008
In this case, it's gonna do
the same thing with the expression.

103
00:06:39.008 --> 00:06:42.063
In this case,
it's a reference to a variable, scrub,

104
00:06:42.063 --> 00:06:44.798
that's on the right hand
side of our equals sign.

105
00:06:44.798 --> 00:06:48.159
So it's gonna look at
that expression scrub and

106
00:06:48.159 --> 00:06:51.781
it's gonna figure out what
does that evaluate to?

107
00:06:51.781 --> 00:06:56.046
Which means, it's gonna look
up in its little table here,

108
00:06:56.046 --> 00:06:59.042
in its little contact book, let's say.

109
00:06:59.042 --> 00:07:03.630
Look up scrub, and it's gonna say
what to scrub evaluate to, which is?

110
00:07:03.630 --> 00:07:04.586
&gt;&gt; Fly.

111
00:07:04.586 --> 00:07:05.597
&gt;&gt; Fly, in this case.

112
00:07:05.597 --> 00:07:08.719
Guy who thinks he's fly for,
yeah, the longer version.

113
00:07:08.719 --> 00:07:13.184
And so that is going to then be
the value that is assigned to

114
00:07:13.184 --> 00:07:15.148
the new variable busta.

115
00:07:15.148 --> 00:07:20.682
So the arrow actually doesn't
go from scrub to busta,

116
00:07:20.682 --> 00:07:24.185
that's not a thing that we can do.

117
00:07:24.185 --> 00:07:30.386
What we can do is evaluate scrub,
figure out that it's fly,

118
00:07:30.386 --> 00:07:35.006
and then draw the arrow
from busta to the value

119
00:07:35.006 --> 00:07:39.151
that scrub evaluates to in our program.

120
00:07:39.151 --> 00:07:43.157
So this is a thing about JavaScript
that different languages might behave

121
00:07:43.157 --> 00:07:45.234
differently in this kind of context.

122
00:07:45.234 --> 00:07:52.491
But in JavaScript's case, it's going to
associate busta with the string value,

123
00:07:52.491 --> 00:07:58.311
in this case it's a string,
of scrub that we had created earlier.

124
00:07:58.311 --> 00:08:05.490
And it's going to remember that
value now as the value of busta.

125
00:08:05.490 --> 00:08:09.766
Now where this starts to get
interesting is on line three.

126
00:08:09.766 --> 00:08:12.471
Well, maybe it's already interesting,
hopefully, I think so.

127
00:08:12.471 --> 00:08:17.351
But where it starts to actually matter
that we have this contact book model

128
00:08:17.351 --> 00:08:22.151
in our heads, as opposed to the kind
of like box container mental model,

129
00:08:22.151 --> 00:08:24.215
is what happens on line three.

130
00:08:24.215 --> 00:08:29.320
So let's see, Paul,
do you wanna maybe talk me through?

131
00:08:29.320 --> 00:08:33.505
&gt;&gt; Okay, so it takes that new string and

132
00:08:33.505 --> 00:08:40.944
remembers it as a value because it
is assigning that now to scrub.

133
00:08:40.944 --> 00:08:44.362
&gt;&gt; Okay, so
it's gonna conjure up some kind of value.

134
00:08:44.362 --> 00:08:48.382
I'm gonna represent this as no love,
the string, okay?

135
00:08:48.382 --> 00:08:49.339
[LAUGH]
&gt;&gt; And

136
00:08:49.339 --> 00:08:53.292
then it's just going to
point scrub to that no love.

137
00:08:53.292 --> 00:08:58.581
&gt;&gt; Exactly, so what it's gonna do
is erase the original association,

138
00:08:58.581 --> 00:09:04.250
the original pointer between scrub and
fly, or guy who thinks he's fly.

139
00:09:04.250 --> 00:09:09.028
And instead it's going to
create a new pointer, or

140
00:09:09.028 --> 00:09:12.139
a new arrow in our mental models,

141
00:09:12.139 --> 00:09:17.381
to the string value that I've
asked it to remember now.

142
00:09:17.381 --> 00:09:19.430
So now the question is,

143
00:09:19.430 --> 00:09:24.868
if I asked JavaScript the value of busta,
what's it gonna be?

144
00:09:26.756 --> 00:09:28.695
&gt;&gt; I think it's the new value.

145
00:09:28.695 --> 00:09:29.423
&gt;&gt; Guy that thinks he's fly.

146
00:09:29.423 --> 00:09:30.376
&gt;&gt; That's still fly.

147
00:09:30.376 --> 00:09:31.524
&gt;&gt; So we have two options.

148
00:09:31.524 --> 00:09:34.596
Is it gonna be, guy that thinks he's fly?

149
00:09:34.596 --> 00:09:37.666
Or is it gonna be,
guy that can't get no love?

150
00:09:37.666 --> 00:09:44.345
And you know how we can find out is by
copy pasting into our JavaScript console.

151
00:09:44.345 --> 00:09:48.363
And we don't really care about a page for
this.

152
00:09:48.363 --> 00:09:51.836
So I'm gonna execute this
as three separate lines.

153
00:09:51.836 --> 00:09:53.899
I mean, I could paste this all at once.

154
00:09:53.899 --> 00:09:59.249
But just for clarity's sake,
I'm gonna do this in three separate lines.

155
00:09:59.249 --> 00:10:06.427
Okay, we've got let scrub = fly,
let busta = scrub.

156
00:10:06.427 --> 00:10:10.202
And now scrub = guy that
can't get no love from me.

157
00:10:10.202 --> 00:10:13.641
And now we wanna ask JavaScript, so
let's first of all ask, let's check,

158
00:10:13.641 --> 00:10:15.960
what's the value of scrub gonna be?

159
00:10:15.960 --> 00:10:17.627
Hopefully this one is pretty clear.

160
00:10:17.627 --> 00:10:20.121
It's gonna be guy that
can't get no love from me.

161
00:10:20.121 --> 00:10:23.939
[LAUGH] Hope you're
enjoying these examples.

162
00:10:23.939 --> 00:10:31.694
[LAUGH] Busta is actually gonna
still be guy that thinks he's fly.

163
00:10:31.694 --> 00:10:38.361
This is because, again, that arrow,
back to our whiteboard,

164
00:10:38.361 --> 00:10:42.558
that arrow that we had drawn from busta,

165
00:10:42.558 --> 00:10:48.125
it didn't go, like we said,
it didn't go to scrub.

166
00:10:48.125 --> 00:10:52.722
Busta doesn't actually care
what scrub is anymore.

167
00:10:52.722 --> 00:10:57.644
Instead, busta only cares what
the value of scrub was at the time

168
00:10:57.644 --> 00:11:02.748
that it was assigned or, yes,
at the time that that was assigned,

169
00:11:02.748 --> 00:11:05.574
because that is what the word scrub,

170
00:11:05.574 --> 00:11:10.795
the name evaluated to this string
value of guy who thinks he's fly.

171
00:11:10.795 --> 00:11:15.877
And that is what busta in my
phone book is now gonna point to.

172
00:11:15.877 --> 00:11:21.092
It's sort of like, if I had a phone book
and I said, okay, scrub is 555-5555.

173
00:11:21.092 --> 00:11:25.576
All right, now busta is a new contact
with the same number as scrub, so

174
00:11:25.576 --> 00:11:28.870
it's gonna remember 555-5555.

175
00:11:28.870 --> 00:11:34.288
And now I say, just kidding,
scrub changes number to 867-5389.

176
00:11:34.288 --> 00:11:39.228
In my contact book, since I kind
of copied over the old number for

177
00:11:39.228 --> 00:11:42.155
what scrub's number was at the time,

178
00:11:42.155 --> 00:11:46.471
that's still gonna be
associated to my busta contact.

179
00:11:46.471 --> 00:11:50.358
[LAUGH] It's perhaps the most
ridiculous example for

180
00:11:50.358 --> 00:11:55.039
explaining things, but
hopefully it makes the point that this

181
00:11:55.039 --> 00:11:59.999
idea that variables are containers
that contain a certain value.

182
00:11:59.999 --> 00:12:03.860
And so when we assign busta to scrub,
we're actually assigning one container to

183
00:12:03.860 --> 00:12:07.105
another container,
is not how JavaScript actually works.

184
00:12:07.105 --> 00:12:10.910
How it works is it evaluates
the expression on the right

185
00:12:10.910 --> 00:12:15.544
hand side of the equals sign,
whether that's doing some math, or

186
00:12:15.544 --> 00:12:21.360
concatenating some strings together, or
looking up an address in the phone book.

187
00:12:22.450 --> 00:12:26.230
It's going to evaluate the expression
on the right of the equals sign, and

188
00:12:26.230 --> 00:12:26.950
assign that,

189
00:12:26.950 --> 00:12:31.500
create a pointer to the variable that I'm
declaring on the left of the equals sign.

190
00:12:31.500 --> 00:12:35.505
So that's where that new arrow
gets drawn from busta to fly.

191
00:12:37.604 --> 00:12:38.296
This one right here.

192
00:12:38.296 --> 00:12:39.540
Oops, okay.

193
00:12:40.904 --> 00:12:46.251
So before we had this, originally.

194
00:12:46.251 --> 00:12:49.767
We had an arrow from
scrub to fly in line one.

195
00:12:49.767 --> 00:12:57.500
We create an arrow to the evaluated
value of scrub, which is the string fly.

196
00:12:57.500 --> 00:13:02.335
We then, on line three, change
the association of scrub to a new thing,

197
00:13:02.335 --> 00:13:05.364
but busta has not changed
where it points at.

198
00:13:07.229 --> 00:13:08.412
Cool?

199
00:13:08.412 --> 00:13:10.153
With me?

200
00:13:10.153 --> 00:13:12.797
Fans of JavaScript yet?

201
00:13:12.797 --> 00:13:15.329
So yeah, if you've worked with
other programming languages and

202
00:13:15.329 --> 00:13:17.042
they behave differently, that's legit.

203
00:13:17.042 --> 00:13:19.452
But in JavaScript,
this is how things work.

204
00:13:19.452 --> 00:13:23.845
And this is gonna be an important thing
for us to keep in mind as our programs get

205
00:13:23.845 --> 00:13:28.051
more complex and we get more and
more confused about what they're doing.

206
00:13:28.051 --> 00:13:31.239
Keeping in mind that when
we assign a variable,

207
00:13:31.239 --> 00:13:36.980
we're assigning to whatever the value of
the expression on the right-hand side is,

208
00:13:36.980 --> 00:13:39.629
is gonna be helpful thing to remember.

209
00:13:39.629 --> 00:13:40.729
Question?

210
00:13:40.729 --> 00:13:47.086
&gt;&gt; So JavaScript does not have pass by
reference, it uses reference by value?

211
00:13:47.086 --> 00:13:51.717
&gt;&gt; So I've been deliberately avoiding
using the phrases pass by reference and

212
00:13:51.717 --> 00:13:55.420
pass by value because it's
a little bit trickier than that.

213
00:13:55.420 --> 00:13:58.960
But when we talk about
assigning variables, yes,

214
00:13:58.960 --> 00:14:04.392
it's going to assign the variable to
the value of that expression at the time,

215
00:14:04.392 --> 00:14:07.294
as opposed to a reference to a reference.

216
00:14:07.294 --> 00:14:13.504
As opposed to we could theoretically
imagine a language in which if I assign

217
00:14:13.504 --> 00:14:20.713
busta to scrub, it creates a reference to
the pointer, a reference to the reference.

218
00:14:20.713 --> 00:14:24.547
And then it follows that reference
wherever it may change to go in

219
00:14:24.547 --> 00:14:27.751
the future,
that is not what happens in JavaScript.

220
00:14:27.751 --> 00:14:32.034
In JavaScript, when we're assigning
variables, we're dealing with values.

221
00:14:32.034 --> 00:14:35.724
And we're dealing with whatever
the value would've been,

222
00:14:35.724 --> 00:14:39.790
whatever the value was at the time
that the variable was assigned.

223
00:14:39.790 --> 00:14:45.071
And that is going to be, in this case,
the original value of scrub

224
00:14:45.071 --> 00:14:51.715
because we assigned the new variable
busta before scrub's pointer had changed.

225
00:14:53.824 --> 00:14:58.144
So some folks find that the terminology
around pass by reference and

226
00:14:58.144 --> 00:15:01.493
pass by value,
useful to talk about in JavaScript.

227
00:15:01.493 --> 00:15:06.033
Some folks, and
I am also in this camp, find it not as

228
00:15:06.033 --> 00:15:11.108
helpful as thinking about
variables pointing to values.

229
00:15:11.108 --> 00:15:15.816
And the question is, what does
the expression that I have assigned this

230
00:15:15.816 --> 00:15:20.452
variable to evaluate to at the time
that I'm assigning the variable?

231
00:15:20.452 --> 00:15:23.309
But however you find it
more useful to think about,

232
00:15:23.309 --> 00:15:26.775
pass by value, if that's more
useful to think about, sure.

233
00:15:26.775 --> 00:15:30.081
It also depends a little bit when we're
talking about different types of values.

234
00:15:30.081 --> 00:15:33.453
Right now we've been talking
about all strings and

235
00:15:33.453 --> 00:15:37.622
numbers and primitive, or
we could say sort of simple values.

236
00:15:37.622 --> 00:15:39.273
When we talk about arrays and objects,

237
00:15:39.273 --> 00:15:41.333
this is gonna get a little
bit more complicated.

238
00:15:41.333 --> 00:15:46.239
So we'll come back to that thought
a little bit later in the course.

239
00:15:46.239 --> 00:15:47.641
Great question, though.

