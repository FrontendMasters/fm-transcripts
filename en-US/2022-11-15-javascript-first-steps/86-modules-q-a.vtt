WEBVTT

1
00:00:00.000 --> 00:00:03.216
Do we generally only
import utility functions?

2
00:00:03.216 --> 00:00:06.256
&gt;&gt; Do we generally only
import utility functions?

3
00:00:06.256 --> 00:00:11.487
Good question, so utility functions
are a very handy thing to import.

4
00:00:11.487 --> 00:00:15.373
But, no, we might be importing, for
example, some data from a module.

5
00:00:15.373 --> 00:00:19.285
Maybe some module is
actually going through and

6
00:00:19.285 --> 00:00:24.269
going to generate or load some data for
us like a JSON object,

7
00:00:24.269 --> 00:00:28.295
let's say, for
our big long name of dog breeds.

8
00:00:28.295 --> 00:00:30.298
We could even put that
in a separate module.

9
00:00:30.298 --> 00:00:35.415
We could put our big, big, big,
long array of all of these dog

10
00:00:35.415 --> 00:00:40.445
breeds in a module that exposes
that as a constant, breeds.

11
00:00:40.445 --> 00:00:46.327
And we could say import breeds
from breeds.js or what have you.

12
00:00:46.327 --> 00:00:49.088
So, essentially, we can import values.

13
00:00:49.088 --> 00:00:53.919
It's sort of like any kind of
property that could be pointing

14
00:00:53.919 --> 00:00:56.296
at something in JavaScript.

15
00:00:56.296 --> 00:01:00.204
A function could be
pointed at by a property.

16
00:01:00.204 --> 00:01:03.480
A literal value, a string, or a Boolean,

17
00:01:03.480 --> 00:01:07.853
that's probably less likely
that we'd want to import.

18
00:01:07.853 --> 00:01:10.523
But any kind of data,
maybe a complex object,

19
00:01:10.523 --> 00:01:14.290
maybe some adjacent object with
lots of different properties and

20
00:01:14.290 --> 00:01:17.525
nested objects within it,
we could import that, too.

21
00:01:17.525 --> 00:01:20.350
So, basically,
we can import whatever we want.

22
00:01:20.350 --> 00:01:24.864
We just have to make sure that it is
exported by the module that we want to

23
00:01:24.864 --> 00:01:26.253
load it from, yeah?

24
00:01:26.253 --> 00:01:30.581
&gt;&gt; There's a question around importing
modules on the Internet versus locally.

25
00:01:30.581 --> 00:01:35.720
&gt;&gt; Mm-hm, yeah, so as I mentioned,
importing modules when the files

26
00:01:35.720 --> 00:01:42.027
are hosted somewhere on the Internet like
on anjana.dev, let's say, will work.

27
00:01:42.027 --> 00:01:47.113
Because of the way
the browser decides whether

28
00:01:47.113 --> 00:01:55.213
the thing that the page is trying to
do is loading something appropriate.

29
00:01:55.213 --> 00:01:59.613
So the fact that we're loading two
scripts that are both hosted on

30
00:01:59.613 --> 00:02:02.175
anjana.dev matters to the browser.

31
00:02:02.175 --> 00:02:09.607
This is due to something called CORS,
C-O-R-S, Cross Origin Request Scripting.

32
00:02:09.607 --> 00:02:14.010
And it's a whole big complex topic that
you could look up and read more about.

33
00:02:14.010 --> 00:02:19.146
But, essentially, when you're loading
things locally with those file URLs as

34
00:02:19.146 --> 00:02:24.357
opposed to an HTTPs URL, the browser can't
be sure about that security of whether

35
00:02:24.357 --> 00:02:29.343
you're loading something from somewhere
that's trusted or not trusted, or

36
00:02:29.343 --> 00:02:33.895
whether it's actually coming from
the same, what's called origin.

37
00:02:33.895 --> 00:02:35.472
So the same sort of URL.

38
00:02:35.472 --> 00:02:38.090
And so
this is something that just doesn't work.

39
00:02:38.090 --> 00:02:40.512
So if you wanted to work
with modules locally, and

40
00:02:40.512 --> 00:02:43.916
the reason that we didn't do this in
our Doggo Fetch project is because

41
00:02:43.916 --> 00:02:46.473
there's just a little bit
extra work you have to do.

42
00:02:46.473 --> 00:02:49.705
What you have to do is, essentially,

43
00:02:49.705 --> 00:02:53.846
run a local server that
pretends to be a website.

44
00:02:53.846 --> 00:02:59.588
That's not a website that's out there on
a public URL that anybody can get to,

45
00:02:59.588 --> 00:03:02.550
but is what we call a local host website.

46
00:03:02.550 --> 00:03:08.185
So if you've seen projects, maybe,
where they ask you to start a server,

47
00:03:08.185 --> 00:03:13.381
and then load a page from local host,
that is what's going on there.

48
00:03:13.381 --> 00:03:18.454
So if we wanna work with a JavaScript
project that uses modules, usually

49
00:03:18.454 --> 00:03:23.858
what we're gonna be doing is not opening
a file in our browser from a file URL,

50
00:03:23.858 --> 00:03:29.035
we're going to be using some small
little program on our local computer.

51
00:03:29.035 --> 00:03:35.597
For example,
Node has a tool called Express,

52
00:03:35.597 --> 00:03:42.676
that can run a web server
locally on our computer.

53
00:03:42.676 --> 00:03:48.958
Or there are a bunch of other services or
toolkits that do this for us, too.

54
00:03:48.958 --> 00:03:52.251
For example, next,
if folks have run into that before.

55
00:03:52.251 --> 00:03:56.288
Anyway, there's a lot of different ways
that we can run a program locally on our

56
00:03:56.288 --> 00:03:58.409
computer which pretends to be a website.

57
00:03:58.409 --> 00:04:03.433
Runs a, what's called local server
that's serving up both of those

58
00:04:03.433 --> 00:04:08.384
module files or however many module
files we have from the same URL.

59
00:04:08.384 --> 00:04:13.203
So that we're not loading them from
file URLs, we're loading them from

60
00:04:13.203 --> 00:04:17.320
an HTTP URL that happens to just
be pointed at a local website.

61
00:04:17.320 --> 00:04:20.405
So this is a whole can of
worms that we can explore.

62
00:04:20.405 --> 00:04:23.717
And if you read up about modules,
for example, on MDN and

63
00:04:23.717 --> 00:04:27.103
their guide about modules,
you will see this mentioned.

64
00:04:27.103 --> 00:04:32.710
That this is due to course security
policies that browsers have.

65
00:04:32.710 --> 00:04:34.407
So good question.

66
00:04:34.407 --> 00:04:37.030
&gt;&gt; Yeah, I just wanna add to that,

67
00:04:37.030 --> 00:04:42.093
she was asking also about React
modules and how it's loaded.

68
00:04:42.093 --> 00:04:47.258
And generally your NPM installing a bunch
of modules to your local node modules

69
00:04:47.258 --> 00:04:53.146
folder, and that's where they're actually
coming from when you hit import a library.

70
00:04:53.146 --> 00:04:55.142
That's how that's working.

71
00:04:55.142 --> 00:04:58.583
&gt;&gt; Yes, exactly, so
we haven't really touched on Node,

72
00:04:58.583 --> 00:05:00.276
which is a whole big topic.

73
00:05:00.276 --> 00:05:04.765
And I'm sure there are entire courses that
you can take to really dig into Node,

74
00:05:04.765 --> 00:05:07.849
which is, essentially,
server-side JavaScript.

75
00:05:07.849 --> 00:05:12.143
But usually what's happening is,
we have, as Mark points out,

76
00:05:12.143 --> 00:05:14.575
a whole bunch of different modules.

77
00:05:14.575 --> 00:05:18.280
Some of which we wrote, and maybe some
of which other people wrote that we

78
00:05:18.280 --> 00:05:21.215
want to reuse other people's
code that's open source.

79
00:05:21.215 --> 00:05:23.377
That we want to take
advantage of in our programs,

80
00:05:23.377 --> 00:05:25.850
so that we don't have to
reinvent the wheel all the time.

81
00:05:25.850 --> 00:05:28.806
And we can actually import all
kinds of different modules.

82
00:05:28.806 --> 00:05:31.766
Modules that we wrote
in files that we have,

83
00:05:31.766 --> 00:05:36.326
modules that are being loaded from
somewhere else on the Internet,

84
00:05:36.326 --> 00:05:40.968
modules that were installed as kind
of dependencies of our project.

85
00:05:40.968 --> 00:05:45.424
So it gets very very complex, and
there's a lot more to be said about it.

86
00:05:45.424 --> 00:05:49.300
But, yes, when we're working
with really complex sites or

87
00:05:49.300 --> 00:05:54.164
frameworks like React, or kind of
Meta frameworks like Next, let's say,

88
00:05:54.164 --> 00:05:57.364
we end up working with
a ton of different modules.

89
00:05:57.364 --> 00:06:02.740
And we have tools like NPM,
which is a way of downloading,

90
00:06:02.740 --> 00:06:07.463
and installing, and
essentially including those

91
00:06:07.463 --> 00:06:12.511
modules in our project so
that we can import from them,

92
00:06:12.511 --> 00:06:17.448
even if we don't have them
kind of as a file that we've

93
00:06:17.448 --> 00:06:21.768
written next to our main program file,
yeah?

94
00:06:21.768 --> 00:06:27.048
&gt;&gt; So if I have a HTML page and
I wanna split it into modules and

95
00:06:27.048 --> 00:06:33.868
generate parts of the webpage,
what would you recommend to get started?

96
00:06:33.868 --> 00:06:38.861
&gt;&gt; So if you're working locally, you're
saying you want to kind of develop a site

97
00:06:38.861 --> 00:06:43.778
and split up the code across multiple
modules, like we just saw in the module or

98
00:06:43.778 --> 00:06:45.213
Doggo Fetch example.

99
00:06:45.213 --> 00:06:48.849
But we wanna work, we wanna develop on
our computer before we put it out on

100
00:06:48.849 --> 00:06:50.886
the Internet for the whole world to see.

101
00:06:50.886 --> 00:06:53.197
There are a few different options.

102
00:06:53.197 --> 00:06:58.105
For example, if you're used to working
with another programming language that

103
00:06:58.105 --> 00:07:00.990
runs on the backend like Python,
for example,

104
00:07:00.990 --> 00:07:05.462
you can run a simple Python script that
starts up a server that serves all of

105
00:07:05.462 --> 00:07:10.328
the files in a certain directory on your
local computer, just locally for you.

106
00:07:10.328 --> 00:07:16.977
And that will satisfy
the browser's security worries.

107
00:07:16.977 --> 00:07:21.351
But if you're working in
just a JavaScript universe,

108
00:07:21.351 --> 00:07:26.769
you're probably going to be using Node and
some kind of program that

109
00:07:26.769 --> 00:07:32.540
you're downloading from NPM that
has an ability to launch a server.

110
00:07:32.540 --> 00:07:38.852
So, for example, Express is a framework,
I guess you could say,

111
00:07:38.852 --> 00:07:44.063
for running websites with
JavaScript on the backend.

112
00:07:44.063 --> 00:07:49.029
So Node can let you use Express
to run a server locally.

113
00:07:49.029 --> 00:07:53.538
And then there are other frameworks and

114
00:07:53.538 --> 00:07:56.680
things like, basically,

115
00:07:56.680 --> 00:08:02.428
tooling that allow you to
use something like NPM.

116
00:08:02.428 --> 00:08:05.446
You might for
example be following some tutorial,

117
00:08:05.446 --> 00:08:08.968
they'll have instructions on
how to install the project.

118
00:08:08.968 --> 00:08:11.902
You'll download, maybe, a zip file, or

119
00:08:11.902 --> 00:08:16.313
maybe you'll clone a git repository
onto your local computer.

120
00:08:16.313 --> 00:08:20.583
And then it'll give you some kind of
command you might run something like

121
00:08:20.583 --> 00:08:25.413
a start command, which launches off a
bunch of functionality that that developer

122
00:08:25.413 --> 00:08:30.243
has already written for you that starts a
server locally so that you can develop and

123
00:08:30.243 --> 00:08:31.448
tweak the project.

124
00:08:31.448 --> 00:08:33.770
So it really depends
on different projects.

125
00:08:33.770 --> 00:08:36.330
There's lots of different
ways of doing it.

126
00:08:36.330 --> 00:08:42.435
But if you want to get started with
that kind of local server running,

127
00:08:42.435 --> 00:08:47.820
you're probably gonna wanna
look into Node, next, yeah?

128
00:08:47.820 --> 00:08:52.719
&gt;&gt; Yeah, I would probably say that
something like 11ty would be a great

129
00:08:52.719 --> 00:08:54.387
project to start with.

130
00:08:54.387 --> 00:08:57.894
Cuz, essentially,
what they're looking for is a CMS, right?

131
00:08:57.894 --> 00:09:03.490
And being able to load pieces of
HTML into the header or whatever.

132
00:09:03.490 --> 00:09:07.270
So 11ty is a great place to start
cuz it's a static site builder.

133
00:09:07.270 --> 00:09:13.478
&gt;&gt; Yeah, so, for example, yeah, this
is a very popular, simple site builder,

134
00:09:13.478 --> 00:09:19.612
11ty, that you could use to, let's say
make a blog or something like that.

135
00:09:19.612 --> 00:09:25.395
And it has a pretty simple workflow for
running it.

136
00:09:25.395 --> 00:09:29.680
So you can read, it's 1-1-T-Y.dev,

137
00:09:29.680 --> 00:09:33.863
11ty.dev, you can read about it there.

138
00:09:33.863 --> 00:09:37.250
There are some other ones that
you might run into out there,

139
00:09:37.250 --> 00:09:41.787
like one that is starting to get more
attention in the web communities, Astro,

140
00:09:41.787 --> 00:09:44.852
for example, but
that's a little bit more complex.

141
00:09:44.852 --> 00:09:51.251
And then you might find that if you
are working with a framework like React,

142
00:09:51.251 --> 00:09:58.056
or what have you, you have some tooling
like Create React App is a little starter

143
00:09:58.056 --> 00:10:03.800
kit for React that can also do
this kind of local site running.

144
00:10:03.800 --> 00:10:09.036
And then, another really, once you're
getting into much more complex sites,

145
00:10:09.036 --> 00:10:11.349
you might find a Next.js comes up.

146
00:10:11.349 --> 00:10:15.374
So these are a few great
things to be aware of.

147
00:10:15.374 --> 00:10:20.111
I second Mark's recommendation,
11ty would be a fun thing to try if

148
00:10:20.111 --> 00:10:24.380
you'd like to start building
a site locally with JavaScript.

149
00:10:24.380 --> 00:10:26.443
So you can read up about that, and

150
00:10:26.443 --> 00:10:31.103
I'm sure it's also mentioned in some
other courses on Frontend Masters.

151
00:10:31.103 --> 00:10:35.665
&gt;&gt; Another option would be Gatsby,
and we have a Gatsby course.

152
00:10:35.665 --> 00:10:36.740
&gt;&gt; Uh-huh.

153
00:10:36.740 --> 00:10:37.812
&gt;&gt; That's another good option.

154
00:10:37.812 --> 00:10:41.141
But, yeah, there's lots of these kind of.

155
00:10:41.141 --> 00:10:45.514
&gt;&gt; Yeah, so Gatsby.js is another
kind of system for running this.

156
00:10:45.514 --> 00:10:52.937
And I think there's some courses on
Frontend Masters about, and there's also,

157
00:10:52.937 --> 00:10:59.314
yeah, more generally kind of a Next.js is-
&gt;&gt; We also have [INAUDIBLE].

158
00:10:59.314 --> 00:11:02.343
&gt;&gt; Yeah, exactly, there's something very,

159
00:11:02.343 --> 00:11:06.578
this is something that you see
a lot in professional settings.

160
00:11:06.578 --> 00:11:11.800
A lot of professional teams are working
with tools like React and Next.js.

161
00:11:11.800 --> 00:11:13.796
They kind of go hand-in-hand.

162
00:11:13.796 --> 00:11:16.955
So as you go deeper into your journey,

163
00:11:16.955 --> 00:11:21.120
you'll encounter more of
these kind of systems.

164
00:11:21.120 --> 00:11:25.737
And the other kind of things that
you'll notice is, if you start,

165
00:11:25.737 --> 00:11:30.107
if let's say you join a team
that's working with JavaScript,

166
00:11:30.107 --> 00:11:34.491
they might be working with
a particular framework like React.

167
00:11:34.491 --> 00:11:39.038
They might have their own way that
they build and serve their sites.

168
00:11:39.038 --> 00:11:43.240
So they might have their own instructions
for how to be doing that locally.

169
00:11:43.240 --> 00:11:47.399
So essentially each different
project that you work on, or

170
00:11:47.399 --> 00:11:52.224
that you work with, might have
a different approach for doing this,

171
00:11:52.224 --> 00:11:57.045
and for working with modules, and
for structuring modules, and for

172
00:11:57.045 --> 00:12:00.479
organizing modules in
a huge complex code base.

173
00:12:02.086 --> 00:12:02.630
Yeah?

174
00:12:02.630 --> 00:12:07.937
&gt;&gt; The final note I just wanted to mention
because I ran into it when I started

175
00:12:07.937 --> 00:12:13.770
using JavaScript Modules, is the fact
that the browser caches these modules.

176
00:12:13.770 --> 00:12:17.705
And so you might change some code and
then you try to load your browser and

177
00:12:17.705 --> 00:12:19.224
the code doesn't change.

178
00:12:19.224 --> 00:12:22.212
And so you have to hold the Shift key and
hit Refresh-

179
00:12:22.212 --> 00:12:23.025
&gt;&gt; Mm-hm.

180
00:12:23.025 --> 00:12:23.681
&gt;&gt; For hard Refresh.

181
00:12:23.681 --> 00:12:27.526
&gt;&gt; Yeah, so remember we said the two
hardest problems in computer science

182
00:12:27.526 --> 00:12:31.388
are cache and validation,
naming things, and off-by-one errors.

183
00:12:31.388 --> 00:12:36.294
[LAUGH] So caching is a really complex
topic that what the browser's trying

184
00:12:36.294 --> 00:12:40.180
to do is it's trying to load
your site as fast as possible.

185
00:12:40.180 --> 00:12:44.303
And so it's going to say, that utilities
script, that utilities module,

186
00:12:44.303 --> 00:12:48.079
excuse me, that you loaded that one time,
I've already seen it before.

187
00:12:48.079 --> 00:12:53.572
So I'm just gonna remember what
happened when I loaded that before.

188
00:12:53.572 --> 00:12:58.426
And I'm going to use those functions that
it exported to give to you whenever you

189
00:12:58.426 --> 00:12:59.830
reload your page.

190
00:12:59.830 --> 00:13:03.972
But if then you go in and you edit
your utilities file, and change one

191
00:13:03.972 --> 00:13:08.913
of the functions, the browser says, well,
I already remember the old ones, so

192
00:13:08.913 --> 00:13:13.636
you have to manually tell it, hey,
hey, hey, don't use the cached version

193
00:13:13.636 --> 00:13:17.870
with the Shift+Cmd+R instead
of just Cmd+R or Ctrl+R.

194
00:13:17.870 --> 00:13:20.519
So, yeah, that's a great point,
Mark, thanks for mentioning.

195
00:13:20.519 --> 00:13:24.471
But suffice it to say, modules do
get very, there's a lot to be said.

196
00:13:24.471 --> 00:13:28.923
There's a lot of complexity and
there's a lot of history here,

197
00:13:28.923 --> 00:13:32.055
of how the JavaScript and
the web community,

198
00:13:32.055 --> 00:13:37.510
I would say we're even still in the
progress of moving to a modular existence.

199
00:13:37.510 --> 00:13:43.433
Because, again,
JavaScript was created back in '95 for

200
00:13:43.433 --> 00:13:48.079
just running a few lines
of script code to edit or

201
00:13:48.079 --> 00:13:53.860
add a little bit of interactive
flair to an HTML page.

202
00:13:53.860 --> 00:13:57.700
And now we're building hugely
complex projects with it.

203
00:13:57.700 --> 00:14:03.197
So this is part of the fact we said,
JavaScript is a moving target,

204
00:14:03.197 --> 00:14:07.517
JavaScript is a living,
breathing ecosystem, and

205
00:14:07.517 --> 00:14:12.250
modules are a relatively new
concept to that ecosystem.

206
00:14:12.250 --> 00:14:16.515
So if you find this interesting, you can
dig way deeper and you can take some of

207
00:14:16.515 --> 00:14:20.584
the other courses that go into more
details about working with modular and

208
00:14:20.584 --> 00:14:21.649
JavaScript code.

