WEBVTT

1
00:00:00.127 --> 00:00:05.486
Now, have you seen any thing that
this sort of reminds you of already?

2
00:00:05.486 --> 00:00:12.560
Have we worked with any of these
complex nested objects already?

3
00:00:12.560 --> 00:00:14.914
Policy like you're you've
got some tip of your tongue.

4
00:00:14.914 --> 00:00:19.230
&gt;&gt; Well, it's the HTML document is.

5
00:00:19.230 --> 00:00:21.925
&gt;&gt; Document is a great example of this.

6
00:00:21.925 --> 00:00:26.078
So, we had already yes, already.

7
00:00:26.078 --> 00:00:31.066
We had already earlier in the course,
been using this complex kind of

8
00:00:31.066 --> 00:00:35.968
chain of dots to pull out properties and
even dots to call methods and

9
00:00:35.968 --> 00:00:40.528
then call properties on the values
returned by those methods.

10
00:00:40.528 --> 00:00:46.681
When we were doing things like
document.queryselector("h2").append,

11
00:00:46.681 --> 00:00:52.206
all of that, which we were already
casting these spells yesterday, this

12
00:00:52.206 --> 00:00:58.288
is how all of that works is via objects
and via properties and methods on objects.

13
00:00:58.288 --> 00:01:02.561
And so if you wanted to find out
what other properties that document

14
00:01:02.561 --> 00:01:07.292
has besides like title and methods like
query selector what could you do to

15
00:01:07.292 --> 00:01:10.283
find out what other
properties document has?

16
00:01:10.283 --> 00:01:13.608
There's a couple of things.

17
00:01:13.608 --> 00:01:18.433
&gt;&gt; Document that help [LAUGH]
&gt;&gt; That would be great but actually

18
00:01:18.433 --> 00:01:19.737
&gt;&gt; [LAUGH]

19
00:01:19.737 --> 00:01:22.909
&gt;&gt; Even easier if we type in document.

20
00:01:22.909 --> 00:01:27.367
Sorry, let me, even easier if we

21
00:01:27.367 --> 00:01:32.158
type in document into our console.

22
00:01:32.158 --> 00:01:36.756
And we use our browser consoles
little built in object viewer here.

23
00:01:36.756 --> 00:01:42.496
We can [LAUGH] see that there is a lot
of stuff going on in this object and

24
00:01:42.496 --> 00:01:48.064
we can drill into other things
happening and blah, blah, blah.

25
00:01:48.064 --> 00:01:50.881
We can see there's nested,
nested, nested things.

26
00:01:50.881 --> 00:01:56.124
So that's one way is we can
explore it in the console.

27
00:01:56.124 --> 00:02:00.967
Is there another thing we could do to
find out all of the different things

28
00:02:00.967 --> 00:02:03.077
that a document has and can do?

29
00:02:03.077 --> 00:02:08.457
MDN exactly, so yes, as usual,
MDN has a reference of all of the,

30
00:02:08.457 --> 00:02:14.127
you'll notice in this sidebar here
it has kinda a list of properties,

31
00:02:14.127 --> 00:02:17.223
and then it also has a list of methods.

32
00:02:17.223 --> 00:02:19.357
So we can drill down into that and

33
00:02:19.357 --> 00:02:24.432
see all of the different stuff available
on a built in object like document.

34
00:02:24.432 --> 00:02:26.238
Document is built in,

35
00:02:26.238 --> 00:02:31.285
we get it out of the box with
JavaScript running in our browser.

36
00:02:31.285 --> 00:02:35.976
Okay, any other built
in objects that we've

37
00:02:35.976 --> 00:02:40.518
seen already that have some methods or-
&gt;&gt; Arrays.

38
00:02:40.518 --> 00:02:42.762
&gt;&gt; Properties.

39
00:02:42.762 --> 00:02:46.463
Yeah, arrays are one of them we saw for

40
00:02:46.463 --> 00:02:52.477
example that we had array1,
do I still have array1.push,

41
00:02:52.477 --> 00:02:57.578
right is already a built in
method that we could use.

42
00:02:57.578 --> 00:03:03.659
And if I wanted to check out all
of the other things available

43
00:03:03.659 --> 00:03:08.899
on arrays if I type in
array to JavaScript, sorry.

44
00:03:08.899 --> 00:03:13.855
If I type in array in MDN,
I will get a bunch of information about

45
00:03:13.855 --> 00:03:17.795
the properties and
methods available on arrays.

46
00:03:17.795 --> 00:03:22.037
Like concat and like push and
pop sort of spoiled it earlier but

47
00:03:22.037 --> 00:03:27.191
there were a few other built in objects
that we saw, one of them is console.

48
00:03:27.191 --> 00:03:29.924
We've seen console.log a couple of times.

49
00:03:29.924 --> 00:03:34.504
Console is a built in object
that has a method log that

50
00:03:34.504 --> 00:03:38.576
prints something out to
the browser console.

51
00:03:38.576 --> 00:03:43.030
So if I go back to my console,

52
00:03:43.030 --> 00:03:47.679
and type, console.log hi.

53
00:03:47.679 --> 00:03:51.089
It prints out the string hi,
that's built in.

54
00:03:51.089 --> 00:03:54.190
Console also has a couple of
other tricks that It can do.

55
00:03:54.190 --> 00:04:00.405
It has a console.warn,
which similar to console.log

56
00:04:02.555 --> 00:04:07.163
Print's something to the console but this
time puts a little warning label on it.

57
00:04:07.163 --> 00:04:12.619
And similarly, there is console.error.

58
00:04:15.201 --> 00:04:20.922
Which if we say, no, now it gets
an even stronger red exclamation point.

59
00:04:20.922 --> 00:04:23.944
So console has a few built
in methods like this.

60
00:04:23.944 --> 00:04:28.004
And in fact it also has
the clear method which

61
00:04:28.004 --> 00:04:32.841
I've also been accessing
just with the word clear.

62
00:04:32.841 --> 00:04:37.011
So, console is another built in.

63
00:04:37.011 --> 00:04:41.535
And we also very briefly talked
about something called math,

64
00:04:41.535 --> 00:04:44.406
is a built in object which allows us to,

65
00:04:44.406 --> 00:04:48.936
let's say get some math related functions,
and constants.

66
00:04:48.936 --> 00:04:53.395
So for example, if I type in math.pi and
we'll notice this one is in

67
00:04:53.395 --> 00:04:56.927
all caps because pi is a constant,
it never changes.

68
00:04:56.927 --> 00:05:00.823
And I mentioned briefly earlier that
a naming convention in JavaScript is if we

69
00:05:00.823 --> 00:05:03.065
have a constant that's never gonna change,

70
00:05:03.065 --> 00:05:05.498
sometimes you see that
variable put in all caps.

71
00:05:05.498 --> 00:05:10.857
So math.pi is always gonna give me
3.14159 blah, blah, blah, blah.

72
00:05:10.857 --> 00:05:16.043
And similarly,
math.random is a handy little method,

73
00:05:16.043 --> 00:05:19.824
that returns a random, pseudo random but

74
00:05:19.824 --> 00:05:25.240
as random as computers get
a random value between 0 and 1.

75
00:05:25.240 --> 00:05:27.460
And this can be handy for

76
00:05:27.460 --> 00:05:32.458
kind of introducing some
variety into our programs.

77
00:05:32.458 --> 00:05:35.779
So, these are some built in objects and

78
00:05:35.779 --> 00:05:41.124
you can find references to all
kinds of built in objects on MDN.

79
00:05:41.124 --> 00:05:46.955
Now, do you remember that we
have also done some tricks on

80
00:05:46.955 --> 00:05:52.914
strings like string.index of or
string.to uppercase.

81
00:05:52.914 --> 00:05:57.906
So at this point, you might be
thinking Arjuna you have lied to us.

82
00:05:57.906 --> 00:06:00.381
Because you said that strings
are primitive values and

83
00:06:00.381 --> 00:06:03.140
JavaScript distinguishes
primitive values from objects.

84
00:06:03.140 --> 00:06:07.383
And yet if we're doing string.to,
uppercase or string.length,

85
00:06:07.383 --> 00:06:09.954
the dot means that we have an object here.

86
00:06:09.954 --> 00:06:13.659
So our strings objects are their
primitive values that are strings.

87
00:06:13.659 --> 00:06:15.858
And the answer is kind of bow.

88
00:06:15.858 --> 00:06:20.293
So what happens here is that strings
themselves when we put a string in quotes,

89
00:06:20.293 --> 00:06:22.252
that is indeed a primitive value.

90
00:06:22.252 --> 00:06:26.632
However, JavaScript behind the scenes,

91
00:06:26.632 --> 00:06:29.914
wraps that in an object D thing so

92
00:06:29.914 --> 00:06:35.873
that we can interact with
the string using some methods and

93
00:06:35.873 --> 00:06:43.192
some properties that are on a kind
of built-in string wrapper object.

94
00:06:43.192 --> 00:06:46.950
So this is why if you type
in string to JavaScript,

95
00:06:46.950 --> 00:06:51.967
you'll notice that it shows up
in the built-in objects section.

96
00:06:51.967 --> 00:06:59.930
Because the string object is this wrapper
that we can use to manipulate the string,

97
00:06:59.930 --> 00:07:05.064
do things like call.toUpperCase,
but importantly

98
00:07:07.581 --> 00:07:12.118
If I have a little stringy here and

99
00:07:12.118 --> 00:07:15.526
I call s.toUpperCase.

100
00:07:18.671 --> 00:07:22.228
I get it's returning out the value,
STRINGY.

101
00:07:22.228 --> 00:07:26.285
[LAUGH] But
s still points to that original string,

102
00:07:26.285 --> 00:07:30.253
because remember we said
stings are immutable.

103
00:07:30.253 --> 00:07:36.589
So these methods, these wrapper
methods that we have, that we can do,

104
00:07:36.589 --> 00:07:41.763
like toUpperCase,
they are going to create a new string,

105
00:07:41.763 --> 00:07:47.486
which for example,
I could capture as a string 2 toUpperCase.

106
00:07:49.639 --> 00:07:52.335
So now I call it S.

107
00:07:52.335 --> 00:07:57.292
Okay, so now I can see that essentially
we're not manipulating the string

108
00:07:57.292 --> 00:08:02.179
even though it kind of looks like we
are with these dots and these methods.

109
00:08:02.179 --> 00:08:07.074
We're really just kind of invoking this
wrapper object that lets us do some

110
00:08:07.074 --> 00:08:10.818
convenient casts some convenient
spells on our string.

111
00:08:10.818 --> 00:08:16.136
Which in this case return new
values like to uppercase returns

112
00:08:16.136 --> 00:08:21.565
a new string with all the capitalized
characters Okey-doke.

113
00:08:21.565 --> 00:08:23.598
So there are a lot more built-in objects.

114
00:08:23.598 --> 00:08:26.623
You can find a whole bunch more on MDN.

115
00:08:26.623 --> 00:08:31.185
There's a whole page on standard built-in
objects that JavaScript gives you out of

116
00:08:31.185 --> 00:08:31.708
the box.

117
00:08:31.708 --> 00:08:38.107
So things like arrays are a built-in
type of object, we could say.

118
00:08:38.107 --> 00:08:40.418
Although again,
we saw a type of array equals object.

119
00:08:40.418 --> 00:08:45.046
So in JavaScript world, if it's not
a primitive value, it is an object and

120
00:08:45.046 --> 00:08:46.821
that is what's happening.

