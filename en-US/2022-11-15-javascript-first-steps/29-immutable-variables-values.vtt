WEBVTT

1
00:00:00.200 --> 00:00:06.655
Now the question is,
what happens when we use const to

2
00:00:06.655 --> 00:00:12.200
remember a value that itself is mutable?

3
00:00:12.200 --> 00:00:16.000
Like an array,
we said an array can be changed, right?

4
00:00:16.000 --> 00:00:21.182
So let's take a look at this example,
we have a line here in line one

5
00:00:21.182 --> 00:00:27.245
const operands, which is the fancy word
for stuff an operator does stuff to.

6
00:00:27.245 --> 00:00:34.050
[LAUGH] Technical terms here [LAUGH] so,
operands is an array with 4 and 6 in it.

7
00:00:34.050 --> 00:00:36.499
And then, sum is gonna be
operands[0] + operands[1], so

8
00:00:36.499 --> 00:00:38.290
what do you think the value
of sum is going to be?

9
00:00:38.290 --> 00:00:39.220
&gt;&gt; 10.

10
00:00:39.220 --> 00:00:44.140
&gt;&gt; 10, okay, and
both of these are consts, but

11
00:00:44.140 --> 00:00:47.462
when I am working with an array,

12
00:00:47.462 --> 00:00:52.152
we said that we can change the array,
right?

13
00:00:52.152 --> 00:00:55.687
So, I can replace something in the array,
for

14
00:00:55.687 --> 00:00:59.597
example operand [0] = 5
what is that gonna do?

15
00:00:59.597 --> 00:01:04.819
This is the question, is it going to
listen to the array being mutable,

16
00:01:04.819 --> 00:01:08.785
or is it gonna listen to
the const being immutable?

17
00:01:08.785 --> 00:01:10.505
What is JavaScript gonna do here?

18
00:01:10.505 --> 00:01:15.335
&gt;&gt; I figure it'll let it
overwrite the 4 with the 5.

19
00:01:16.335 --> 00:01:20.838
&gt;&gt; So, we have a couple of guesses that
JavaScript is gonna be okay with replacing

20
00:01:20.838 --> 00:01:24.659
what was previously at index zero
which was a 4 with the new thing we

21
00:01:24.659 --> 00:01:25.770
want which is a 5.

22
00:01:28.080 --> 00:01:29.610
Any other guesses to what's
going to happen here?

23
00:01:29.610 --> 00:01:35.080
And then the question is if we asked for
a new value newSum,

24
00:01:35.080 --> 00:01:39.110
it's doing the same operation as before.

25
00:01:39.110 --> 00:01:41.978
It's looking at operands [0] and
adding it to operands [1],

26
00:01:41.978 --> 00:01:43.450
question is what is that gonna be?

27
00:01:43.450 --> 00:01:49.200
So let's take bets,
what are we betting on?

28
00:01:49.200 --> 00:01:49.700
&gt;&gt; 11.
&gt;&gt; 11.

29
00:01:49.700 --> 00:01:50.590
All right,

30
00:01:50.590 --> 00:01:56.553
we got a couple of dollars on the 11 horse
in the race here, any other guesses,

31
00:01:56.553 --> 00:02:01.062
anybody think it's gonna stay 10?
&gt;&gt; Maybe 15, it wouldn't matter

32
00:02:01.062 --> 00:02:03.742
[LAUGH] even though, would it?
&gt;&gt; I mean with JavaScript

33
00:02:03.742 --> 00:02:06.663
sometimes you never can tell
when it's gonna do something

34
00:02:06.663 --> 00:02:09.774
completely unexpected.
All right let's go through it

35
00:02:09.774 --> 00:02:14.321
line by line, so operands [4,
6] let's just double check, great.

36
00:02:14.321 --> 00:02:16.942
Okay, then we're gonna get our sum and

37
00:02:16.942 --> 00:02:21.370
we should expect it to be 10,
all right, so far so good.

38
00:02:21.370 --> 00:02:26.920
Now moment of truth operand [0] = 5, okay.

39
00:02:26.920 --> 00:02:30.144
The value of this whole expression is just

40
00:02:30.144 --> 00:02:33.559
evaluated to the value
I was asking it to do.

41
00:02:33.559 --> 00:02:36.349
Remember we said before JavaScript
will even do sometimes when it hasn't

42
00:02:36.349 --> 00:02:37.620
done anything.

43
00:02:37.620 --> 00:02:40.840
So, the question is,
what is newSum gonna be?

44
00:02:41.950 --> 00:02:46.080
Let's find out, it is indeed 11.

45
00:02:46.080 --> 00:02:50.980
So, let's go back to our whiteboard and
talk about what happened here.

46
00:02:52.840 --> 00:02:57.141
So, we said,
let me just erase that variable,

47
00:02:57.141 --> 00:03:01.227
we said that when we
create const variables,

48
00:03:01.227 --> 00:03:05.014
we create an indelible link to the value.

49
00:03:05.014 --> 00:03:10.838
So, we had here, I can't remember
what I called the operands, okay?

50
00:03:13.533 --> 00:03:21.630
We had operands declared with consts that
points to an array, with some stuff in it.

51
00:03:23.060 --> 00:03:25.943
And that association is immutable,

52
00:03:25.943 --> 00:03:30.310
operands is always gonna
point to this array.

53
00:03:30.310 --> 00:03:35.092
But we say that arrays themselves
JavaScript can do all kinds of stuff with,

54
00:03:35.092 --> 00:03:38.580
and it can make changes
to what is in that array.

55
00:03:38.580 --> 00:03:41.764
So initially, this was a sorry,

56
00:03:41.764 --> 00:03:46.900
I think it had just two things in it and
it was 4 and 6.

57
00:03:48.430 --> 00:03:55.121
And then we said, hey, JavaScript,
whatever was at index zero previously

58
00:03:59.152 --> 00:04:02.929
Right here, there was a little index 0,
my goodness.

59
00:04:04.573 --> 00:04:07.684
Right here,
there was little index 0 pointing to 4,

60
00:04:07.684 --> 00:04:10.403
whatever was there point
it to something else.

61
00:04:10.403 --> 00:04:17.189
In this case, there's a 5 over
here somewhere in JavaScript land,

62
00:04:17.189 --> 00:04:23.273
and what I want you to do is forget
what was at index 0 before and

63
00:04:23.273 --> 00:04:27.136
make the new thing at index 0 be 5 now.

64
00:04:27.136 --> 00:04:31.744
And you can just forget
about that old index 0, so

65
00:04:31.744 --> 00:04:36.136
even though the array
itself hasn't changed,

66
00:04:36.136 --> 00:04:41.538
we had the one there too,
we haven't done anything to it.

67
00:04:41.538 --> 00:04:46.224
Even though the array itself hasn't
changed, the notion of what's

68
00:04:46.224 --> 00:04:51.490
inside of it has, so the array is mutable,
we can still mess with it.

69
00:04:51.490 --> 00:04:56.185
But operands will always point to
that particular array, we can't for

70
00:04:56.185 --> 00:05:01.114
example, reassign it to a new array
that we've created with contact, for

71
00:05:01.114 --> 00:05:03.870
example, does that make sense?

72
00:05:03.870 --> 00:05:09.215
So, we have to distinguish here between
the immutability of const variables and

73
00:05:09.215 --> 00:05:13.770
the mutability of values that
we might assign to them.

74
00:05:13.770 --> 00:05:18.486
So it is possible to have an immutable
reference, an immutable pointer,

75
00:05:18.486 --> 00:05:21.120
immutable arrow to a mutable value.

76
00:05:21.120 --> 00:05:27.970
So we can still mess with the thing,
the array in this case, cool?

77
00:05:27.970 --> 00:05:33.520
Gotta love computers, they're super
weird sometimes, yeah, all right.

78
00:05:35.730 --> 00:05:41.430
I will make this statement, [LAUGH]
which is that, in general if you want

79
00:05:41.430 --> 00:05:47.987
your life to be as easy as possible when
you have the choice keep things immutable.

80
00:05:47.987 --> 00:05:52.916
I have another course on Frontend Masters
called functional programming first steps

81
00:05:52.916 --> 00:05:56.269
where we talk a lot more about
this about why immutable data

82
00:05:56.269 --> 00:06:00.940
is generally a programmer's friend and
why mutable data can be tricky.

83
00:06:00.940 --> 00:06:05.758
Can anybody guess at why I
might say that it is generally

84
00:06:05.758 --> 00:06:08.498
better if you have the choice.

85
00:06:08.498 --> 00:06:13.160
It is generally better to
work with immutable data and

86
00:06:13.160 --> 00:06:20.007
variables as much as possible, any idea
why that might be why might I say that?

87
00:06:20.007 --> 00:06:23.893
&gt;&gt; Because it probably
breaks a lot of processes,

88
00:06:23.893 --> 00:06:28.822
if an underlying value changes-
&gt;&gt; If an underlying value changes and

89
00:06:28.822 --> 00:06:33.141
you didn't expect it to change
because you thought that it was gonna

90
00:06:33.141 --> 00:06:34.666
stay that way forever.

91
00:06:34.666 --> 00:06:39.655
And maybe your co-worker or you in the
future that forgets what happened goes in

92
00:06:39.655 --> 00:06:42.644
and changes it in a way
that you didn't expect.

93
00:06:42.644 --> 00:06:46.476
You're gonna have a bad time,
you're gonna get bugs in your code,

94
00:06:46.476 --> 00:06:50.256
you're gonna have unexpected,
undefined and things like that.

95
00:06:50.256 --> 00:06:54.318
So, Immutability is really helpful in a
lot of ways and that's why for example in

96
00:06:54.318 --> 00:06:58.820
functional programming which is something
we're not gonna talk a ton about here.

97
00:06:58.820 --> 00:07:01.490
But you could take a whole bunch of
other courses out there including mine

98
00:07:01.490 --> 00:07:04.310
on Frontend Masters, but there's other
courses on Frontend Masters too.

99
00:07:05.890 --> 00:07:10.510
Immutable data is a way to make sure
that you're not accidentally gonna

100
00:07:10.510 --> 00:07:13.260
shoot yourself in the foot.

101
00:07:13.260 --> 00:07:17.320
It's a way to make sure that that things
are not gonna change out from under you.

102
00:07:17.320 --> 00:07:22.158
Now we don't always have the choice,
for example in JavaScript it's

103
00:07:22.158 --> 00:07:26.678
a little tricky to work with
an array that you can't ever mutate.

104
00:07:26.678 --> 00:07:32.687
There isn't really a built-in concept for
that, there's an asterisk on that,

105
00:07:32.687 --> 00:07:37.299
there are ways that you can sort
of make sure to freeze an array,

106
00:07:37.299 --> 00:07:40.770
put it on ice so
that you can't mess with it.

107
00:07:40.770 --> 00:07:43.869
But in general,
if you have the choice between, let's say,

108
00:07:43.869 --> 00:07:46.024
working with lead and working with const.

109
00:07:46.024 --> 00:07:50.019
And it doesn't matter because you don't
think this is ever gonna change this

110
00:07:50.019 --> 00:07:51.067
value, use const.

