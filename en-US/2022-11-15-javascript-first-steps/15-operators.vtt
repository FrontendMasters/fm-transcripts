WEBVTT

1
00:00:00.000 --> 00:00:02.203
So far we've been talking
about values a lot,

2
00:00:02.203 --> 00:00:05.098
we're talking about strings in
particular for a long time.

3
00:00:05.098 --> 00:00:12.321
We've been talking about other values
earlier, numbers, Booleans, etc.

4
00:00:12.321 --> 00:00:16.197
We also need some other things in
the universe of JavaScript in order to be

5
00:00:16.197 --> 00:00:18.814
effective, in order to
do stuff in the program.

6
00:00:18.814 --> 00:00:23.661
We can't just write strings all day,
we need to do things with strings,

7
00:00:23.661 --> 00:00:26.609
or numbers, or Boolean, or what have you.

8
00:00:26.609 --> 00:00:28.547
And that's where operators come in.

9
00:00:28.547 --> 00:00:32.841
Also, in Shodai songs if there's
any Shodai fans in the house.

10
00:00:32.841 --> 00:00:37.747
So let's take a look at some of the smooth
operators JavaScript has to offer.

11
00:00:37.747 --> 00:00:42.499
We've already seen a couple,
these two bullet points,

12
00:00:42.499 --> 00:00:45.079
each have an operator in them.

13
00:00:45.079 --> 00:00:48.367
So in string " ALOHA" + "!",

14
00:00:49.619 --> 00:00:54.643
what's the operator, do you think?

15
00:00:54.643 --> 00:00:55.250
&gt;&gt; Plus.

16
00:00:55.250 --> 00:00:56.838
&gt;&gt; The plus.

17
00:00:56.838 --> 00:01:01.128
Excellent, because ALOHA a string,
the exclamation point is also a string,

18
00:01:01.128 --> 00:01:04.319
the plus is the only thing left,
the plus is the operator.

19
00:01:04.319 --> 00:01:09.712
And then in type of value, in this
case a string value, the operator is?

20
00:01:12.242 --> 00:01:13.333
&gt;&gt; Is?

21
00:01:13.333 --> 00:01:16.837
&gt;&gt; Question mark,
what's the operator in type of value?

22
00:01:16.837 --> 00:01:21.728
I'm asking the operator in
this little JavaScript snippet

23
00:01:21.728 --> 00:01:23.985
here type of string value.

24
00:01:23.985 --> 00:01:28.993
So the in quotes value, that's a string,
the only thing left In our little

25
00:01:28.993 --> 00:01:34.020
snippet of JavaScript is type of, so
type of is actually an operator also.

26
00:01:34.020 --> 00:01:36.999
I've been calling these things
like magical spells, but

27
00:01:36.999 --> 00:01:41.338
they have more technical terms than that,
and there are things of different types.

28
00:01:41.338 --> 00:01:44.879
So in this case,
type of the kind of thing that it is,

29
00:01:44.879 --> 00:01:48.188
the kind of spell that it is,
it's an operator.

30
00:01:48.188 --> 00:01:53.950
It's an operator that operates on a value,
so you put it right before a value and

31
00:01:53.950 --> 00:01:58.002
then it tells you the string
name of that value's type.

32
00:01:58.002 --> 00:02:01.600
So type of sting value, we'll say string.

33
00:02:01.600 --> 00:02:05.346
The plus operator in "ALOHA" + " !",
we said it does what?

34
00:02:05.346 --> 00:02:08.834
What does that operator do?

35
00:02:08.834 --> 00:02:10.112
Concatenates.

36
00:02:10.112 --> 00:02:12.033
&gt;&gt; Steven, here you said?

37
00:02:12.033 --> 00:02:12.970
&gt;&gt; You said it already.

38
00:02:12.970 --> 00:02:14.045
&gt;&gt; Could you say it?

39
00:02:14.045 --> 00:02:14.724
&gt;&gt; Concatenates.

40
00:02:14.724 --> 00:02:15.552
&gt;&gt; Concatenates, yes.

41
00:02:15.552 --> 00:02:18.322
So Steven and
OJ both say concatenates the two strings.

42
00:02:18.322 --> 00:02:22.656
Yeah, that's the fancy word for
smooth two strings together,

43
00:02:22.656 --> 00:02:24.670
make another longer string.

44
00:02:24.670 --> 00:02:28.982
So these are a couple of operators and
there are others.

45
00:02:28.982 --> 00:02:32.228
And in fact, so for example,
plus as an operator,

46
00:02:32.228 --> 00:02:34.955
maybe you've seen used for other things.

47
00:02:34.955 --> 00:02:41.242
So plus as an operator in JavaScript,
that has several different uses.

48
00:02:41.242 --> 00:02:44.727
We already saw that what it
does when operating on strings,

49
00:02:44.727 --> 00:02:47.313
OJ just said concatenates the two strings.

50
00:02:47.313 --> 00:02:52.609
Any other guesses on the kinds of things
you could use the plus operator with?

51
00:02:52.609 --> 00:02:55.109
We already looked at one, Bob, so

52
00:02:55.109 --> 00:02:59.518
what other types of values could
a plus operator operate on?

53
00:02:59.518 --> 00:03:00.041
&gt;&gt; Numbers.

54
00:03:00.041 --> 00:03:05.365
&gt;&gt; Numbers,
plus we can use it to do what two numbers?

55
00:03:05.365 --> 00:03:09.960
Add them exactly.

56
00:03:09.960 --> 00:03:16.574
So here's the question,
how many values does the plus operator

57
00:03:16.574 --> 00:03:21.606
need to do its job,
whether strings or numbers?

58
00:03:21.606 --> 00:03:25.512
Especially for adding, right, two numbers,
you can't just add one number,

59
00:03:25.512 --> 00:03:27.681
you have to have another
number to add it to.

60
00:03:27.681 --> 00:03:32.186
So it needs two values to do its
job when it's adding numbers or

61
00:03:32.186 --> 00:03:34.883
when it's concatenating strings.

62
00:03:34.883 --> 00:03:38.886
Now it actually does have other things
that can do that regard different numbers

63
00:03:38.886 --> 00:03:42.949
of values but we're just gonna kind of
gloss over that because it's what is often

64
00:03:42.949 --> 00:03:44.636
called an overloaded operator.

65
00:03:44.636 --> 00:03:48.931
So it's an operator that does
multiple different functions

66
00:03:48.931 --> 00:03:53.575
depending on how you're using it and
what you're using it with.

67
00:03:53.575 --> 00:03:58.314
There are some other arithmetic operators
that you might have seen, or if not,

68
00:03:58.314 --> 00:03:59.740
we're looking at now.

69
00:03:59.740 --> 00:04:05.655
So plus is for add,
the minus sign, subtract.

70
00:04:05.655 --> 00:04:10.471
The star is like, what in elementary
school maybe you used an X for,

71
00:04:10.471 --> 00:04:15.305
but also in math can sometimes be a dot or
a star, different things.

72
00:04:15.305 --> 00:04:19.779
Anyways, in JavaScript, it's a star, it's
an asterisk, is going to multiply numbers.

73
00:04:19.779 --> 00:04:24.048
And then the slash is gonna divide
one number by another number.

74
00:04:24.048 --> 00:04:28.954
So hopefully, none of this is earth
shattering, but the point is JavaScript

75
00:04:28.954 --> 00:04:33.572
has a bunch of different operators,
they can do arithmetic on numbers.

76
00:04:33.572 --> 00:04:36.250
So we say operators operate on value.

77
00:04:36.250 --> 00:04:41.080
So these arithmetic operators
operate on numbers to do

78
00:04:41.080 --> 00:04:46.234
these different arithmetic operations,
what have you.

79
00:04:46.234 --> 00:04:51.985
Now when I have a bunch of operators
all together in the same thing,

80
00:04:51.985 --> 00:04:58.681
we have to understand how JavaScript
is going to carry out these operations.

81
00:04:58.681 --> 00:05:01.704
So what do you think?

82
00:05:01.704 --> 00:05:08.966
In this example, I have a ((4+1)*2*4)+2.

83
00:05:08.966 --> 00:05:11.166
When JavaScript looks at that,

84
00:05:11.166 --> 00:05:16.223
the same as you might look at that in
math class, what is it gonna do first?

85
00:05:17.737 --> 00:05:22.402
Is it going to add 4 + 1?

86
00:05:22.402 --> 00:05:25.435
Is it going to do something else?

87
00:05:25.435 --> 00:05:26.475
Any guesses?

88
00:05:26.475 --> 00:05:27.508
&gt;&gt; Something else.

89
00:05:27.508 --> 00:05:30.039
&gt;&gt; Something else is our guess.

90
00:05:30.039 --> 00:05:31.953
Let's find out, shall we?

91
00:05:31.953 --> 00:05:36.671
We can try, I'm just gonna

92
00:05:36.671 --> 00:05:41.805
copy this and go back in here.

93
00:05:41.805 --> 00:05:43.849
Okay, let's make this
a little bit simpler.

94
00:05:43.849 --> 00:05:44.931
Let's cut out some of this.

95
00:05:44.931 --> 00:05:52.270
So if I have 4 + 1 * 2, I get 6.

96
00:05:52.270 --> 00:05:55.105
So what does it seem to be doing?

97
00:05:55.105 --> 00:05:56.502
&gt;&gt; Respecting the order of operations.

98
00:05:56.502 --> 00:06:02.034
&gt;&gt; That's respecting an order of
operations where multiplication

99
00:06:02.034 --> 00:06:06.362
happened before addition,
same as in math class.

100
00:06:06.362 --> 00:06:07.867
So these operators,

101
00:06:07.867 --> 00:06:12.387
they take the same precedence as
you might expect in math class.

102
00:06:12.387 --> 00:06:15.782
Now, what happens if I want
the addition to happen first?

103
00:06:15.782 --> 00:06:20.105
Or how do I tell JavaScript,
I want the addition to happen first?

104
00:06:20.105 --> 00:06:25.171
I can use parentheses just
like in math to group things

105
00:06:25.171 --> 00:06:31.711
together to indicate to JavaScript
what it should do in which order.

106
00:06:31.711 --> 00:06:37.069
So for example,
if I want the addition to happen first,

107
00:06:37.069 --> 00:06:41.059
I can do [4 + 1] and then times 2, and

108
00:06:41.059 --> 00:06:47.899
now I'll get 4 + 1 is 5 times 2 is
10 as opposed to 1 times 2 is 2,

109
00:06:47.899 --> 00:06:51.789
4 plus 2 is 6 like I had before, cool?

110
00:06:51.789 --> 00:06:55.742
Again, nothing earth shattering,
this is basically to say JavaScript is

111
00:06:55.742 --> 00:07:00.026
a calculator, if you want [LAUGH] you have
a calculator in your web browser, yay.

112
00:07:00.026 --> 00:07:04.536
[LAUGH] So, the important thing
to note is that operators,

113
00:07:04.536 --> 00:07:10.060
JavaScript the way that it interprets
the commands you're giving it or

114
00:07:10.060 --> 00:07:12.453
the spells you're typing in,

115
00:07:12.453 --> 00:07:17.536
depends on certain things that
we've we've created as humans.

116
00:07:17.536 --> 00:07:22.425
We've created these constructs, and
in this case, JavaScript is following

117
00:07:22.425 --> 00:07:26.143
is the kinda canonical
mathematical order of operations.

118
00:07:26.143 --> 00:07:29.363
And parentheses are your friend if
you want to change that grouping.

