WEBVTT

1
00:00:00.000 --> 00:00:04.470
I think there was a question also
in chat about another purple

2
00:00:04.470 --> 00:00:08.250
word [LAUGH] in our syntax
highlighting theme here.

3
00:00:08.250 --> 00:00:13.650
So another special keyword
in JavaScript called const.

4
00:00:13.650 --> 00:00:18.517
So const is sort of
an alternative to let that also

5
00:00:18.517 --> 00:00:23.280
helps us declare a variable and
assigned to it.

6
00:00:23.280 --> 00:00:30.340
With const, the value of the variable
that I'm creating can't ever be changed.

7
00:00:30.340 --> 00:00:33.673
So with let,
we saw that I can use the equals operator,

8
00:00:33.673 --> 00:00:37.517
the assignment operator to assign
a value to the variable, and

9
00:00:37.517 --> 00:00:41.237
I could actually assign different
variables over and over.

10
00:00:41.237 --> 00:00:44.190
I could change the value of
that variable over and over.

11
00:00:44.190 --> 00:00:47.237
With const, I can't do that.

12
00:00:47.237 --> 00:00:52.445
I have to, first of all,
if I'm using const, I'm saying, hey,

13
00:00:52.445 --> 00:00:57.936
JavaScript, remember this value
with this variable name forever and

14
00:00:57.936 --> 00:01:02.981
ever as long as this particular process or
whatever is running.

15
00:01:02.981 --> 00:01:06.207
[LAUGH] So the difference is, with const,

16
00:01:06.207 --> 00:01:12.107
once I have assigned a value to that
variable and I have to assign a variable,

17
00:01:12.107 --> 00:01:16.273
I can't just declare the variable and
not assign it.

18
00:01:16.273 --> 00:01:18.312
I have to assign it a value,

19
00:01:18.312 --> 00:01:23.301
and I can never change the value
that that variable is assigned to.

20
00:01:23.301 --> 00:01:26.650
So that is the difference between let and
const.

21
00:01:26.650 --> 00:01:32.149
And we're going to come back
to that a little bit later.

22
00:01:32.149 --> 00:01:36.687
But just to go back to
our whiteboard here,

23
00:01:36.687 --> 00:01:42.109
this is sort of,
we could think about it as saying,

24
00:01:42.109 --> 00:01:45.402
what did I call that variable?

25
00:01:45.402 --> 00:01:52.640
Unchangeable, Variable or
something like that.

26
00:01:52.640 --> 00:01:57.611
With const, I'm saying, hey, JavaScript,

27
00:01:57.611 --> 00:02:00.728
this value, whatever it is,

28
00:02:06.235 --> 00:02:09.420
A string never give up, let's say,
or never gonna give you up.

29
00:02:09.420 --> 00:02:12.303
JavaScript, I want you to remember this,

30
00:02:12.303 --> 00:02:15.518
I'm gonna use a red arrow
to indicate forever.

31
00:02:15.518 --> 00:02:19.661
I want you to remember that this value,
never gonna give you up,

32
00:02:19.661 --> 00:02:22.290
is the value of my unchanging variable.

33
00:02:22.290 --> 00:02:24.860
So it's kind of a different relationship,
and

34
00:02:24.860 --> 00:02:27.760
we're gonna talk a little
bit about that in a moment.

35
00:02:27.760 --> 00:02:32.930
But what we have to do is we can't just
declare unchanging variable with no value.

36
00:02:32.930 --> 00:02:35.342
I could maybe give it null as a value.

37
00:02:35.342 --> 00:02:39.885
For example, I could say, hey,
JavaScript, remember null forever.

38
00:02:39.885 --> 00:02:42.910
Might not be super useful, but
I could do it if I needed to.

39
00:02:42.910 --> 00:02:47.820
And that association is never gonna
be broken in JavaScript mind.

40
00:02:47.820 --> 00:02:52.578
It's always gonna be the value that
I assigned to this variable when I

41
00:02:52.578 --> 00:02:53.570
declared it.

42
00:02:53.570 --> 00:03:01.277
So const is a alternative to let when we
are creating variables in our programme.

43
00:03:01.277 --> 00:03:07.792
And we're gonna talk a little bit
about the difference between let and

44
00:03:07.792 --> 00:03:12.331
const and
changing values over time a bit later.

45
00:03:14.888 --> 00:03:19.610
So now how about when I use a variable?

46
00:03:19.610 --> 00:03:27.353
So in this case, I have a couple of
phinos that are sort of like values but

47
00:03:27.353 --> 00:03:32.656
not exactly, which are called,
one more time?

48
00:03:32.656 --> 00:03:33.416
&gt;&gt; Expressions.

49
00:03:33.416 --> 00:03:35.423
&gt;&gt; Expressions, excellent, yeah.

50
00:03:35.423 --> 00:03:38.872
So I have a couple of expressions
using variables here.

51
00:03:38.872 --> 00:03:43.464
And essentially, what I can do now,
once I have declared and

52
00:03:43.464 --> 00:03:49.150
assigned a value to this variable,
I can use it like a value in my programs.

53
00:03:49.150 --> 00:03:52.631
So the same way that I could do a,

54
00:03:55.449 --> 00:03:58.494
Let's go back to my console.

55
00:04:01.480 --> 00:04:06.182
So the same way that I could do,
let's say, 42 minus 10.

56
00:04:06.182 --> 00:04:10.301
If I create a variable
called answerToLife and

57
00:04:10.301 --> 00:04:16.002
give it a value of 42, so
declaring and assigning a variable,

58
00:04:16.002 --> 00:04:21.190
there's a Hitchhiker's Guide
to the Galaxy reference.

59
00:04:21.190 --> 00:04:29.486
Now, I can use that just like I would
use the literal value 42 in my code.

60
00:04:29.486 --> 00:04:34.124
So as far as JavaScript sees,
in an expression like this,

61
00:04:34.124 --> 00:04:38.195
it's going to see the word answerToLife,
look for

62
00:04:38.195 --> 00:04:42.739
the value it remembers as
the value of that variable, and

63
00:04:42.739 --> 00:04:47.473
then use that value in whatever
expression you're doing,

64
00:04:47.473 --> 00:04:50.910
whatever operation you're trying to do.

65
00:04:50.910 --> 00:04:52.644
Make sense?

66
00:04:52.644 --> 00:04:54.500
Cool, I see lots of nodding.

67
00:04:54.500 --> 00:04:56.129
I feel like I hear the chat nodding.

68
00:04:56.129 --> 00:05:00.165
[LAUGH] And

69
00:05:00.165 --> 00:05:04.613
similarly, that variable
might be a string, right?

70
00:05:04.613 --> 00:05:08.291
So we can do whatever string
things we usually do, right?

71
00:05:08.291 --> 00:05:12.152
Of like ask for
the uppercase version of the string or

72
00:05:12.152 --> 00:05:15.590
ask the index of some
character in the string.

73
00:05:15.590 --> 00:05:20.435
So depending on what type of
value this variable remembers,

74
00:05:20.435 --> 00:05:25.002
we can use the variable as if
it was that value in our code.

75
00:05:28.088 --> 00:05:31.918
Question so far,
I see a couple of thinky faces.

76
00:05:31.918 --> 00:05:34.935
[LAUGH] So I don't know if there's
thinkie emoji in the chat.

77
00:05:34.935 --> 00:05:35.730
Yes, question.

78
00:05:35.730 --> 00:05:41.225
&gt;&gt; So one thing I've noticed is we don't
specify any data types to these variables,

79
00:05:41.225 --> 00:05:45.143
it's all kinda,
as you said earlier, loosey-goosey.

80
00:05:45.143 --> 00:05:47.180
Can you specify a data type?

81
00:05:47.180 --> 00:05:51.603
So where you have a variable and you only
want it to be a string or you only want it

82
00:05:51.603 --> 00:05:55.640
to be a number, can you do that or
everything is just kind of what it is?

83
00:05:55.640 --> 00:05:57.478
&gt;&gt; Loosey-goosey, yeah,

84
00:05:57.478 --> 00:06:01.992
so [LAUGH] and I'm sure Mark might
have more to say on this matter.

85
00:06:01.992 --> 00:06:08.187
But essentially, so in JavaScript,
we say that JavaScript has dynamic typing,

86
00:06:08.187 --> 00:06:13.572
and it doesn't really care what type
of value you give it to remember for

87
00:06:13.572 --> 00:06:15.394
particular variable.

88
00:06:15.394 --> 00:06:19.833
So JavaScript itself does
not have the concept of

89
00:06:19.833 --> 00:06:22.980
a variable only of a certain type.

90
00:06:22.980 --> 00:06:27.771
Some other languages do, some
statically-type languages do have that

91
00:06:27.771 --> 00:06:33.200
concept of a number variable versus a
string variable versus a Boolean variable.

92
00:06:33.200 --> 00:06:36.158
JavaScript has the concept of variable.

93
00:06:36.158 --> 00:06:40.082
And so, yes, it is super
loosey-goosey in JavaScript, and

94
00:06:40.082 --> 00:06:42.580
that can cause all kinds of headaches.

95
00:06:42.580 --> 00:06:44.024
So the industry or

96
00:06:44.024 --> 00:06:49.124
the community as it were has come
up with ways to deal with that,

97
00:06:49.124 --> 00:06:55.880
which you can also learn about in other
courses on Frontend Masters, for example.

98
00:06:55.880 --> 00:07:00.319
The most popular of which,
Mark, you wanna chime in?

99
00:07:00.319 --> 00:07:01.520
[LAUGH]
&gt;&gt; TypeScript.

100
00:07:01.520 --> 00:07:02.868
&gt;&gt; TypeScript.

101
00:07:02.868 --> 00:07:07.442
So TypeScript, as the name might suggest,

102
00:07:07.442 --> 00:07:13.385
is a JavaScript-ish language
that has stronger types.

103
00:07:13.385 --> 00:07:16.057
And in TypeScript,
you can do exactly this.

104
00:07:16.057 --> 00:07:22.601
So you can say this thing, this variable
is gonna always hold a value of this type.

105
00:07:22.601 --> 00:07:25.684
Or we're gonna talk later about functions,

106
00:07:25.684 --> 00:07:30.640
you can say this function is going to
always require a number as an input.

107
00:07:30.640 --> 00:07:32.310
JavaScript itself doesn't have that.

108
00:07:32.310 --> 00:07:36.758
So that's why languages like
TypeScript have been invented, created.

109
00:07:36.758 --> 00:07:41.843
And it's not the only one, but
it's probably the most widely known and

110
00:07:41.843 --> 00:07:44.744
used by far in order to work around this.

111
00:07:44.744 --> 00:07:49.489
So great question, and the answer is,
nope, JavaScript don't care.

112
00:07:49.489 --> 00:07:52.556
It's just, you do whatever you want.

113
00:07:52.556 --> 00:07:56.330
[LAUGH] Yeah, good question.

114
00:07:59.080 --> 00:08:02.310
Okay, let's take a moment and
talk about names for variables.

115
00:08:02.310 --> 00:08:08.240
So I said before that I can name the
variable whatever I want, that was a lie.

116
00:08:08.240 --> 00:08:12.967
I lie, I can name the variable
almost whatever I want.

117
00:08:12.967 --> 00:08:15.890
So what are valid variable
names in JavaScript?

118
00:08:15.890 --> 00:08:20.735
Well, they usually contain mostly letters,

119
00:08:20.735 --> 00:08:24.461
sometimes they have other things,

120
00:08:24.461 --> 00:08:28.444
like underscores or numbers in them.

121
00:08:28.444 --> 00:08:33.002
And so the top three bullets
in this list here are all

122
00:08:33.002 --> 00:08:37.885
perfectly legal valid
variable names in JavaScript.

123
00:08:37.885 --> 00:08:43.155
The most common thing you'll see is
variables of the first form, so where

124
00:08:43.155 --> 00:08:48.686
you have validVariable with a lowercase
valid and then a capital V variable.

125
00:08:48.686 --> 00:08:53.621
You also might see, and
these variable names with underscores

126
00:08:53.621 --> 00:08:58.184
joining the words,
which is less common in JavaScript but

127
00:08:58.184 --> 00:09:03.230
does show up sometimes, but
is more common in other languages.

128
00:09:03.230 --> 00:09:04.671
Python, for example,

129
00:09:04.671 --> 00:09:09.436
you'll see a lot more of the second type
of variable name than of the first one.

130
00:09:09.436 --> 00:09:11.976
JavaScript tends to go
towards the first one.

131
00:09:11.976 --> 00:09:16.360
You can do other things, you could start a
JavaScript variable with a capital letter.

132
00:09:16.360 --> 00:09:20.459
You could have numbers in them,
at the end or in the middle.

133
00:09:20.459 --> 00:09:22.590
You could have an underscore.

134
00:09:22.590 --> 00:09:24.777
It's not so common, though, so

135
00:09:24.777 --> 00:09:29.871
it's maybe less normal that you'd see one,
but that's technically fine.

136
00:09:29.871 --> 00:09:34.591
What you cannot do is start a variable
with a number or use other characters or

137
00:09:34.591 --> 00:09:39.628
things like emoji, unfortunate,
actually doesn't know, I don't think so.

138
00:09:39.628 --> 00:09:44.180
[LAUGH] But you can't have an exclamation
point in your variable name, for example.

139
00:09:44.180 --> 00:09:50.670
So that last one, 0chanceThisWillWork,
is so named for a reason.

140
00:09:50.670 --> 00:09:53.973
So the most common type of
variable names or structure of

141
00:09:53.973 --> 00:09:58.275
variable names I should say are in
what we call camelCase In JavaScript.

142
00:09:58.275 --> 00:10:03.237
So camelCase, an example is that
validVariable that we see at the beginning

143
00:10:03.237 --> 00:10:06.350
here, where it's sort
of shaped like a camel.

144
00:10:06.350 --> 00:10:10.330
There's capital letters in the middle that
look like the hump of the camel's back.

145
00:10:10.330 --> 00:10:12.495
So I call it camelCase.

146
00:10:12.495 --> 00:10:15.030
And the second bullet point
here with the underscores.

147
00:10:15.030 --> 00:10:19.069
Anybody know what that's called,
as opposed to camelCase, Paul?

148
00:10:19.069 --> 00:10:19.710
&gt;&gt; Snake case.

149
00:10:19.710 --> 00:10:21.610
&gt;&gt; Snake case, yeah.

150
00:10:21.610 --> 00:10:24.052
You can also have all
caps with underscores,

151
00:10:24.052 --> 00:10:27.144
which is screaming snake case,
and yada, yada, yada.

152
00:10:27.144 --> 00:10:31.624
There's a whole bunch of different
conventions, but in JavaScript,

153
00:10:31.624 --> 00:10:34.685
the convention, and
this is just a preference,

154
00:10:34.685 --> 00:10:38.810
this is just a cultural thing,
is usually camelCase variables.

155
00:10:38.810 --> 00:10:41.532
With the exception of sometimes constants,

156
00:10:41.532 --> 00:10:46.473
things that are never ever gonna change
and that are kind of representing values,

157
00:10:46.473 --> 00:10:50.720
sometimes we have all caps variable for
them or screaming snake case.

158
00:10:50.720 --> 00:10:52.899
Anyway, it's not super
important except to know,

159
00:10:52.899 --> 00:10:54.740
don't start your variables with a number.

160
00:10:54.740 --> 00:10:56.680
Don't put weird characters in them.

161
00:10:56.680 --> 00:10:58.448
When in doubt, go for camelCase.

162
00:10:58.448 --> 00:11:00.243
It's a cute little camel.

