WEBVTT

1
00:00:00.080 --> 00:00:05.954
There's another thing that we're gonna
be typing a lot [LAUGH] in JavaScript,

2
00:00:05.954 --> 00:00:07.470
which is .length.

3
00:00:07.470 --> 00:00:10.293
So we noticed that when we
did our query selector all,

4
00:00:10.293 --> 00:00:12.256
we got something called a node list.

5
00:00:12.256 --> 00:00:16.950
When we did our get elements by tag or
class name, we got HTML collections.

6
00:00:16.950 --> 00:00:20.208
These are different
types of collections or

7
00:00:20.208 --> 00:00:23.642
groups of different elements in the page,
and

8
00:00:23.642 --> 00:00:29.542
when we have something like that with
possibly multiple elements inside of it,

9
00:00:29.542 --> 00:00:34.140
we can type .length,
any idea what this is going to give us?

10
00:00:34.140 --> 00:00:34.847
Yeah.

11
00:00:34.847 --> 00:00:39.939
&gt;&gt; Sorry, it was a question about when
you looked back and you saw there is

12
00:00:39.939 --> 00:00:46.400
HTML collection versus a Node List, are
they effectively the same thing or what?

13
00:00:46.400 --> 00:00:49.925
&gt;&gt; We're gonna dig into this a little bit.

14
00:00:49.925 --> 00:00:53.993
I'm gonna maybe put a small
pin in this question.

15
00:00:53.993 --> 00:00:59.052
But essentially,
what we have in our document

16
00:00:59.052 --> 00:01:05.938
are complex entities that represent
the elements in the page.

17
00:01:05.938 --> 00:01:09.552
And JavaScript takes each
of these elements and

18
00:01:09.552 --> 00:01:15.437
kind of wraps it in something that allows
us to interact with those elements.

19
00:01:15.437 --> 00:01:20.154
And it has a couple of different layers
of wrapping that it surrounds these

20
00:01:20.154 --> 00:01:21.150
element with.

21
00:01:21.150 --> 00:01:25.767
So it has concept of element objects,
which we'll talk about, again,

22
00:01:25.767 --> 00:01:29.109
later when we get into objects and
things like that.

23
00:01:29.109 --> 00:01:33.689
And it has concepts of nodes
in the HTML tree essentially,

24
00:01:33.689 --> 00:01:37.320
this document tree that we can work with.

25
00:01:37.320 --> 00:01:41.880
So functionally,
these often end up being equivalent.

26
00:01:41.880 --> 00:01:46.804
There are differences, and I'm gonna
give you a pointer later to where you

27
00:01:46.804 --> 00:01:50.477
can go if you really wanna dig
into those differences and

28
00:01:50.477 --> 00:01:55.250
really talking about what is a node,
what is an element, etc?

29
00:01:55.250 --> 00:01:58.130
Right now I'm going to hand wavy say,

30
00:01:58.130 --> 00:02:02.990
let's just think about these
as equivalent for now.

31
00:02:02.990 --> 00:02:05.100
Because we can often do the same
types of things with them.

32
00:02:06.710 --> 00:02:12.152
Cool, okay, so any guess what this .length
is going to do if I add it on to the end

33
00:02:12.152 --> 00:02:16.570
of one of these getElementsByClassName or
query selector all?

34
00:02:16.570 --> 00:02:20.505
What do we think this is gonna give us?

35
00:02:20.505 --> 00:02:26.016
&gt;&gt; Is it the length of the variables like
the length of your name and Mark's name.

36
00:02:26.016 --> 00:02:31.227
&gt;&gt; It might be the length of the name but
that would require us putting

37
00:02:31.227 --> 00:02:36.950
a few extra things in between
the getElementsBy and then the .length.

38
00:02:36.950 --> 00:02:39.087
But that is a good guess.

39
00:02:39.087 --> 00:02:41.485
Guess from the chat.

40
00:02:41.485 --> 00:02:44.399
&gt;&gt; The count of the elements
that are returned.

41
00:02:44.399 --> 00:02:46.239
&gt;&gt; The count of the elements
that are returned.

42
00:02:46.239 --> 00:02:49.477
Yeah, so I think that what we were saying
is essentially the number of elements that

43
00:02:49.477 --> 00:02:53.550
are returned, right, like if we were
to count them, one, two, three, four.

44
00:02:53.550 --> 00:02:55.527
Exactly, so let's try it out.

45
00:02:55.527 --> 00:02:58.056
Just gonna clear here.

46
00:02:58.056 --> 00:03:02.796
So if I do
document.getElementsByClassName, and

47
00:03:02.796 --> 00:03:07.426
then put in the name of
the class I want in this case,

48
00:03:07.426 --> 00:03:12.183
player.length, I'm going
to get the number two.

49
00:03:12.183 --> 00:03:17.807
So that is because if I take out this
.length, we notice that in the HTML we

50
00:03:17.807 --> 00:03:23.725
have two elements that are both p elements
in this case with a class of player.

51
00:03:23.725 --> 00:03:30.100
One for the X player and one for the O
player called p1 and p2 are their IDs.

52
00:03:30.100 --> 00:03:33.980
So in this case,
this class selector selects two elements.

53
00:03:33.980 --> 00:03:36.445
On a different page for
a different game, let's say,

54
00:03:36.445 --> 00:03:38.548
you might have a different
number of players.

55
00:03:38.548 --> 00:03:40.478
Or if you're using
a different query selector,

56
00:03:40.478 --> 00:03:43.311
you might have a totally different
number of elements than you expect.

57
00:03:43.311 --> 00:03:48.125
But if you want to find
out how many things are in

58
00:03:48.125 --> 00:03:52.200
a collection of things in JavaScript,

59
00:03:52.200 --> 00:03:57.014
often you have this
.length spell you can cast

60
00:03:57.014 --> 00:04:01.962
to find out how many things are in there,
cool?

61
00:04:01.962 --> 00:04:07.621
Awesome, we're gonna be seeing .length
a lot, so get friendly with it.

62
00:04:07.621 --> 00:04:10.111
&gt;&gt; Instead of use count, why length?

63
00:04:10.111 --> 00:04:11.534
&gt;&gt; Why length, why not count?

64
00:04:11.534 --> 00:04:16.644
Remember how I said that JavaScript
was initially developed in ten days?

65
00:04:16.644 --> 00:04:17.707
[LAUGH]
&gt;&gt; I see.

66
00:04:17.707 --> 00:04:22.381
&gt;&gt; And also the JavaScript has vastly
exceeded the expectations that

67
00:04:22.381 --> 00:04:25.930
were created around it
when it was developed.

68
00:04:25.930 --> 00:04:29.263
So there are a lot of things in JavaScript
as in any programming language,

69
00:04:29.263 --> 00:04:32.350
that are honestly just kind of
arbitrary choices people have made.

70
00:04:32.350 --> 00:04:34.206
Sometimes they're historical accidents,

71
00:04:34.206 --> 00:04:36.457
we're gonna look at at least
one of those later today.

72
00:04:36.457 --> 00:04:41.020
Sometimes somebody just had
to choose a name for things.

73
00:04:41.020 --> 00:04:45.665
There is a joke in programming
that folks sometimes say,

74
00:04:45.665 --> 00:04:50.892
there are the two hardest problems
in computer science are cache

75
00:04:50.892 --> 00:04:55.666
invalidation, which we're
not gonna talk about today.

76
00:04:55.666 --> 00:04:59.521
Naming things, very hard.

77
00:04:59.521 --> 00:05:01.250
And off by one errors.

78
00:05:01.250 --> 00:05:05.351
[LAUGH] So
naming things is extremely difficult and

79
00:05:05.351 --> 00:05:11.513
there's as many different opinions on
it as there are people in the world.

80
00:05:11.513 --> 00:05:16.443
A lot of the time, the answer just
like when you ask your parents why

81
00:05:16.443 --> 00:05:20.069
you had to eat your broccoli
is because I said so.

82
00:05:20.069 --> 00:05:26.542
[LAUGH] Or because in this case, somebody
who implemented this feature said so.

83
00:05:26.542 --> 00:05:31.092
We are gonna talk later about
how you can choose the names for

84
00:05:31.092 --> 00:05:34.188
things in your own JavaScript program.

85
00:05:34.188 --> 00:05:39.835
So then you get to be the decider
of what things are named.

86
00:05:39.835 --> 00:05:45.005
Okay, let's continue with our
domming through the DOM here.

87
00:05:46.237 --> 00:05:51.711
We said that we can get an element by
its ID with document.getElementById.

88
00:05:51.711 --> 00:05:55.350
In this case, I'm looking for
the element with id p1-name.

89
00:05:55.350 --> 00:05:59.589
What happens if I put
.textContent after that?

90
00:05:59.589 --> 00:06:01.490
Any guesses or try it out and

91
00:06:01.490 --> 00:06:07.458
find out what is this gonna return if I
do document.getElementById.textContent?

92
00:06:07.458 --> 00:06:09.338
&gt;&gt; Your name?

93
00:06:09.338 --> 00:06:12.362
&gt;&gt; [LAUGH] In this case,
it might be my name.

94
00:06:12.362 --> 00:06:18.064
Yes, and more generally let's
find out what's going on here.

95
00:06:18.064 --> 00:06:19.871
So if I do this,

96
00:06:19.871 --> 00:06:27.110
document.getElementById(p1-name).textCont-
ent,

97
00:06:27.110 --> 00:06:31.561
I get Anjana because that happens to be

98
00:06:31.561 --> 00:06:36.720
the text inside of
the element with this ID.

99
00:06:36.720 --> 00:06:41.951
So, in this case,
I have a span element with the Id p1-name,

100
00:06:41.951 --> 00:06:44.241
and inside of it is my name.

101
00:06:44.241 --> 00:06:49.816
And if I tried this with
a different Id like for

102
00:06:49.816 --> 00:06:53.645
example p2 name I should get,

103
00:06:56.419 --> 00:07:01.220
Marc, so there is a corresponding
element for the other player which

104
00:07:01.220 --> 00:07:06.940
has a span with ID p2-name,
which has the text inside of it, Marc.

105
00:07:06.940 --> 00:07:11.982
So text content is the spell
we can cast when we want

106
00:07:11.982 --> 00:07:16.800
to know what is the text
inside of this element.

107
00:07:18.560 --> 00:07:22.848
So by this point you might be
feeling like a very overwhelmed

108
00:07:22.848 --> 00:07:26.641
Steve Urkel in this gif like,
this is a lot of stuff.

109
00:07:26.641 --> 00:07:30.847
We've just been firehosed going
through a bunch of random things or

110
00:07:30.847 --> 00:07:32.470
they're not random, but

111
00:07:32.470 --> 00:07:37.130
a bunch of spells you might have to
remember to interact with the webpage.

112
00:07:37.130 --> 00:07:40.430
Do I expect you to remember all of
the stuff that we just ran through?

113
00:07:41.550 --> 00:07:42.160
Definitely not.

114
00:07:43.940 --> 00:07:48.239
There are three letters in web development
that are the most [LAUGH] important

115
00:07:48.239 --> 00:07:54.080
letters If you ask me, and they are M, D,
N, stands for Mozilla Developer Network.

116
00:07:54.080 --> 00:07:59.280
This is a website that I had to hold
myself back from saying is the website

117
00:07:59.280 --> 00:08:04.565
I love earlier today that is going to,
in my opinion, help just unlock so

118
00:08:04.565 --> 00:08:09.006
much of not just JavaScript but
web development in general.

119
00:08:09.006 --> 00:08:13.736
Whenever you can't remember,
what is it query selector or

120
00:08:13.736 --> 00:08:18.751
query selector was it
getElementsBy capital I capital D,

121
00:08:18.751 --> 00:08:22.175
or getElementBy lowercase i lowercase d?

122
00:08:22.175 --> 00:08:26.420
Whenever you can't remember something, or
you wanna find out more details about,

123
00:08:26.420 --> 00:08:28.106
wait, nodelist, what is that?

124
00:08:28.106 --> 00:08:29.621
HTML collection, what is that?

125
00:08:29.621 --> 00:08:30.438
How does that work?

126
00:08:30.438 --> 00:08:31.909
How are they different?

127
00:08:31.909 --> 00:08:35.682
Anything that you're trying
to investigate, if you go to

128
00:08:35.682 --> 00:08:41.229
developer.mozilla.org, there will be
copious amounts of information about it.

129
00:08:41.229 --> 00:08:45.972
So let us just check it out right now,

130
00:08:45.972 --> 00:08:49.804
developer.mozilla.org.

131
00:08:49.804 --> 00:08:53.760
MDN, resources for
developers by developers.

132
00:08:53.760 --> 00:08:56.780
So let's say that I want to look up,

133
00:08:56.780 --> 00:09:02.323
I can't remember if it's query selector or
query selector all,

134
00:09:02.323 --> 00:09:07.257
I type in query cell, and
I start getting links to, okay,

135
00:09:07.257 --> 00:09:13.650
there is a query selector page here for
document.query selector.

136
00:09:13.650 --> 00:09:14.538
And this tells me,

137
00:09:14.538 --> 00:09:18.111
this returns the first element within
the document that bla bla bla bla bla.

138
00:09:18.111 --> 00:09:23.570
So this is where we can go and we're gonna
be going a lot [LAUGH] if you asked me.

139
00:09:23.570 --> 00:09:25.820
And there are other websites
that have information like this.

140
00:09:25.820 --> 00:09:29.789
But to my mind MDN is kind of
like a really great trusted,

141
00:09:29.789 --> 00:09:32.071
comprehensive reference, for

142
00:09:32.071 --> 00:09:38.200
all of the things that we might find
we need to work with as web developers.

143
00:09:38.200 --> 00:09:42.827
And they also have some kind of higher
level guides about things like if we're

144
00:09:42.827 --> 00:09:48.020
wondering about the DOM in general, or the
shadow DOM or other things we've heard of,

145
00:09:48.020 --> 00:09:51.760
or we saw once in somebody's blog post or
whatever it is.

146
00:09:51.760 --> 00:09:56.310
We saw in the inspector,
we saw HTML collection, what is that?

147
00:09:56.310 --> 00:09:59.300
The search box here is just your friend.

148
00:09:59.300 --> 00:10:02.795
And you can even set up a search keyword
if you'd like to just really quickly

149
00:10:02.795 --> 00:10:05.520
search from your browser's URL bar.

150
00:10:05.520 --> 00:10:09.971
Any time you wanna find out about
something like an HTML collection,

151
00:10:09.971 --> 00:10:13.110
let's say you can find it in MDN.

152
00:10:13.110 --> 00:10:18.032
So if you take away nothing else from this
course, [LAUGH] I hope you take away that

153
00:10:18.032 --> 00:10:22.586
you can go to this website and look up
whatever you want about JavaScript,

154
00:10:22.586 --> 00:10:26.570
about HTML, about CSS,
how they interact, all of that stuff.

155
00:10:26.570 --> 00:10:31.774
So we're gonna be referring back to
this multiple times in here, and

156
00:10:31.774 --> 00:10:37.172
this is why you don't have to hold
all of this information in your head.

157
00:10:37.172 --> 00:10:41.676
You can always rely on your
friend MDN to help you remember.

