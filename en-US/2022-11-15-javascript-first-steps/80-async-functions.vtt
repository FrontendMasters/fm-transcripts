WEBVTT

1
00:00:00.208 --> 00:00:04.561
Okay, so back to our data fetching,
which is what we were trying to do.

2
00:00:04.561 --> 00:00:08.034
And why we needed to learn destructuring.

3
00:00:08.034 --> 00:00:12.130
Let's destructure the data that
we fetched so that we can use it.

4
00:00:12.130 --> 00:00:14.941
So let's recap what we did
to fetch our [INAUDIBLE].

5
00:00:14.941 --> 00:00:18.361
We had this resource it has a message
property, that's what we care about.

6
00:00:20.614 --> 00:00:27.718
We had done a fetch on this resource URL.

7
00:00:27.718 --> 00:00:32.410
And we had captured its
value as a response, right?

8
00:00:32.410 --> 00:00:36.835
Like this, [LAUGH] with
a weight trick question, nice.

9
00:00:36.835 --> 00:00:43.000
Okay, then we had parsed
out its body as json and

10
00:00:43.000 --> 00:00:47.173
captured as the body variable.

11
00:00:47.173 --> 00:00:48.160
&gt;&gt; Await response?

12
00:00:48.160 --> 00:00:49.883
&gt;&gt; Await response.

13
00:00:49.883 --> 00:00:51.622
And what was the method we used?

14
00:00:51.622 --> 00:00:54.092
.json.
&gt;&gt; .json.

15
00:00:54.092 --> 00:00:59.524
Okay, so now, all we care about is this
array that's inside of this body object,

16
00:00:59.524 --> 00:01:02.852
our message property inside
of that body object.

17
00:01:02.852 --> 00:01:06.657
So what we can do now is extract that.

18
00:01:06.657 --> 00:01:12.571
Now we know how with our destructuring,
to just pull out the message

19
00:01:12.571 --> 00:01:18.403
which in this case is an array of
hounds that we care about, great.

20
00:01:18.403 --> 00:01:25.200
So, what we're gonna do now is
basically we have a process or

21
00:01:25.200 --> 00:01:32.820
we could call it like a procedure for
fetching a resource from a URL.

22
00:01:32.820 --> 00:01:35.858
Parsing the response body as json and

23
00:01:35.858 --> 00:01:40.268
extracting the message value
from within that body.

24
00:01:40.268 --> 00:01:43.541
What we're gonna do is take all of
that and wrap it up in a function.

25
00:01:43.541 --> 00:01:46.360
Now, the thing is, if we try and

26
00:01:46.360 --> 00:01:51.696
do that in a regular function,
we're gonna have a bad time.

27
00:01:51.696 --> 00:01:55.634
So here, I've got a function that's it's
just the first part of this but just for

28
00:01:55.634 --> 00:01:56.161
brevity.

29
00:01:56.161 --> 00:02:00.010
We're gonna try to fetch the response
from a particular URL and

30
00:02:00.010 --> 00:02:02.269
do the same stuff that we did before.

31
00:02:02.269 --> 00:02:05.285
We're just gonna stop at the response
level just for quickness.

32
00:02:05.285 --> 00:02:08.446
But I can't even declare
this function like this,

33
00:02:08.446 --> 00:02:11.470
JavaScript won't even let
me let alone call it.

34
00:02:11.470 --> 00:02:16.950
It says await is only
valid in async functions,

35
00:02:16.950 --> 00:02:20.655
async generators and modules.

36
00:02:20.655 --> 00:02:25.620
So, this is where I said earlier
we can't just drop await anywhere.

37
00:02:25.620 --> 00:02:29.048
JavaScript has specific rules
about where await is allowed.

38
00:02:29.048 --> 00:02:31.734
One of the places it's
allowed is in our console.

39
00:02:31.734 --> 00:02:36.720
But it's not allowed inside of a function,

40
00:02:36.720 --> 00:02:41.706
unless we make it
a special async function by

41
00:02:41.706 --> 00:02:47.254
putting the keyword async
in front of function.

42
00:02:47.254 --> 00:02:51.422
This tells JavaScript that this is
gonna be a function that's carrying

43
00:02:51.422 --> 00:02:55.598
out some kind of potentially
long-running asynchronous operation.

44
00:02:55.598 --> 00:03:01.051
And so we should expect that we might be
working with asynchronous code in here.

45
00:03:01.051 --> 00:03:04.630
We should expect that we
might need to use an await.

46
00:03:04.630 --> 00:03:07.248
And so that's what JavaScript
means when it says async is

47
00:03:07.248 --> 00:03:08.836
only allowed in async functions.

48
00:03:08.836 --> 00:03:16.209
So now, if I just do the same thing But
with the word async in front.

49
00:03:16.209 --> 00:03:18.635
Now JavaScript didn't complain.

50
00:03:18.635 --> 00:03:21.674
And if I do fetch response.

51
00:03:28.505 --> 00:03:31.738
Fetch response of my URL,
what do we think we're gonna get?

52
00:03:35.246 --> 00:03:37.599
Well, it helps if I put it in a string.

53
00:03:37.599 --> 00:03:41.349
&gt;&gt; Promise.

54
00:03:41.349 --> 00:03:46.125
&gt;&gt; Our friend the promise we ring
it's beautiful little head again.

55
00:03:46.125 --> 00:03:50.440
[LAUGH] Yes, so because this is
an asynchronous operation or

56
00:03:50.440 --> 00:03:52.003
at least it might be.

57
00:03:52.003 --> 00:03:55.938
Async functions are going to be promisy.

58
00:03:55.938 --> 00:04:00.767
And so that means in order to get
the output value of the a sync function,

59
00:04:00.767 --> 00:04:04.100
and guess what keyword
would I need to use?

60
00:04:04.100 --> 00:04:04.740
Wait.

61
00:04:08.480 --> 00:04:11.984
Now we have our response, okay?

62
00:04:11.984 --> 00:04:16.383
So, this is what we have to do if we wanna
use async operations is we need to wrap

63
00:04:16.383 --> 00:04:17.954
them in an async function.

64
00:04:17.954 --> 00:04:23.332
And then that function itself is an async
operation, once we introduce asyncyness.

65
00:04:23.332 --> 00:04:27.352
Everything else that we're dealing
with it, in has to be async.

