WEBVTT

1
00:00:00.753 --> 00:00:07.495
So there's one other interesting
thing going on here.

2
00:00:07.495 --> 00:00:11.159
Fact came from way up here.

3
00:00:13.166 --> 00:00:17.436
And inside of my function
I was able to name fact,

4
00:00:17.436 --> 00:00:20.570
talk about fact use fact as a value.

5
00:00:22.370 --> 00:00:27.149
Even though it wasn't really something
like local to this function,

6
00:00:27.149 --> 00:00:29.909
it was something earlier in my program.

7
00:00:29.909 --> 00:00:34.690
So what is going on there and
that is the next thing we're

8
00:00:34.690 --> 00:00:38.879
gonna talk about,
which is scope of variables.

9
00:00:40.070 --> 00:00:46.185
Because in our JavaScript programs,
there are so many variables in play.

10
00:00:46.185 --> 00:00:51.296
And scope is a concept in
programming languages generally but

11
00:00:51.296 --> 00:00:56.112
in JavaScript specifically,
that reflects the fact that

12
00:00:56.112 --> 00:01:00.550
it doesn't just matter
which variables we declare.

13
00:01:01.740 --> 00:01:07.450
It also matters where we declare them and
where we're trying to use them.

14
00:01:07.450 --> 00:01:13.390
So in other words, scope is kind of a
general concept that determines where and

15
00:01:13.390 --> 00:01:18.885
when variables are in play meaning
like valid references that I can use.

16
00:01:18.885 --> 00:01:23.739
So basically when can I access
that variable by its name and

17
00:01:23.739 --> 00:01:27.712
what is it gonna point to,
what is in play here?

18
00:01:27.712 --> 00:01:32.726
So scope is something that we just
need to spend a moment talking about,

19
00:01:32.726 --> 00:01:37.922
because it sometimes results in some
surprising things in our programs.

20
00:01:37.922 --> 00:01:43.340
And it's important as we go on
in our JavaScript journeys for

21
00:01:43.340 --> 00:01:50.364
us to develop a intuition and a solid
foundation of how JavaScript does scope.

22
00:01:50.364 --> 00:01:54.723
And where our variables
are gonna be usable,

23
00:01:54.723 --> 00:01:58.286
depending on where we declare them.

24
00:02:00.185 --> 00:02:03.239
So let's take a look at this example.

25
00:02:03.239 --> 00:02:06.567
I have a function called
declare bankruptcy,

26
00:02:06.567 --> 00:02:10.505
if we think back to our
Michael Scott Gif from earlier.

27
00:02:10.505 --> 00:02:14.514
Where I'm declaring
the variable bankruptcy and

28
00:02:14.514 --> 00:02:19.678
I am declaring that variable and
assigning it to a value of true.

29
00:02:19.678 --> 00:02:23.304
Within the body,
which is what we call the stuff

30
00:02:23.304 --> 00:02:28.118
in curly braces the corpulent
functionality of the function.

31
00:02:28.118 --> 00:02:32.406
So within the body of the function inside
of those curly braces I am declaring

32
00:02:32.406 --> 00:02:35.625
a variable bankruptcy and
I am setting its value to true.

33
00:02:37.295 --> 00:02:42.769
The question is, what do you think is
gonna happen when then I call declare

34
00:02:42.769 --> 00:02:48.355
bankruptcy and then on the following line,
I log the value of bankruptcy.

35
00:02:48.355 --> 00:02:49.928
Any guesses what is gonna happen?

36
00:02:54.246 --> 00:02:57.408
&gt;&gt; It probably is gonna
say it's undefined.

37
00:02:57.408 --> 00:02:58.804
&gt;&gt; Maybe it'll say it's undefined.

38
00:03:01.096 --> 00:03:02.174
Let's check it out.

39
00:03:02.174 --> 00:03:05.427
All right, so let's check it out.

40
00:03:05.427 --> 00:03:08.606
We're gonna take this code,
we're gonna go over to our console.

41
00:03:10.937 --> 00:03:13.208
We're gonna run it line by line, so

42
00:03:13.208 --> 00:03:17.080
we've got our function declarebankruptcy,
okay, cool.

43
00:03:17.080 --> 00:03:20.920
Now I'm gonna call that function, cool.

44
00:03:22.230 --> 00:03:23.636
And it didn't return anything but

45
00:03:23.636 --> 00:03:26.790
we expect that because we
didn't have a return statement.

46
00:03:26.790 --> 00:03:29.445
And now the question is,
what is bankruptcy?

47
00:03:29.445 --> 00:03:32.753
And not only did we get undefined,

48
00:03:32.753 --> 00:03:38.630
we even got a an error that bankruptcy
has not even been declared yet.

49
00:03:38.630 --> 00:03:43.342
It's not even a thing,
it's not even a variable that

50
00:03:43.342 --> 00:03:47.649
points to undefined,
it's a reference error.

51
00:03:47.649 --> 00:03:52.718
JavaScript says, I don't even know
what word you're saying right now,

52
00:03:52.718 --> 00:03:56.410
I can't even understand you,
so what is happening?

53
00:04:00.211 --> 00:04:05.168
Essentially, in JavaScript we
have a concept of nested scopes

54
00:04:05.168 --> 00:04:10.125
where we can think of scopes as
sort of like a playing field where

55
00:04:10.125 --> 00:04:13.880
we can declare variables and
then access them.

56
00:04:15.190 --> 00:04:20.786
And we can talk about scopes as
being wider or narrower in scope,

57
00:04:20.786 --> 00:04:25.773
so meaning kind of like a view
you could have on the world.

58
00:04:25.773 --> 00:04:29.434
You can see more things or
you can see fewer things.

59
00:04:29.434 --> 00:04:34.332
And in JavaScript,
each time that we write a function,

60
00:04:34.332 --> 00:04:37.250
each time we declare a function,

61
00:04:37.250 --> 00:04:42.375
Inside of the body of that function,
is its own new scope.

62
00:04:45.317 --> 00:04:50.351
And that scope is different than the
default scope of that we've been using so

63
00:04:50.351 --> 00:04:54.610
far, where we write everything on
the same level in the program,

64
00:04:54.610 --> 00:04:57.412
which is what's called the global scope.

65
00:05:06.740 --> 00:05:09.623
Well, let's take a look at another example
and then we'll go to the whiteboard.

66
00:05:09.623 --> 00:05:16.238
In this example,
I have a declaration of a variable called

67
00:05:16.238 --> 00:05:22.051
planet that I'm assigning
to the string Jupiter.

68
00:05:22.051 --> 00:05:27.240
Then I'm declaring a function,
that I'll just call scope out that

69
00:05:27.240 --> 00:05:33.170
has another declaration of a variable
planet with a different value, Mars.

70
00:05:34.950 --> 00:05:40.580
Now if I log within space out and
I'm gonna use the phrase inner

71
00:05:40.580 --> 00:05:46.438
planet to describe the value that
I'm login within that scope.

72
00:05:46.438 --> 00:05:51.875
When I use the name planet,
when I refer to planet,

73
00:05:51.875 --> 00:05:56.058
what do you think it's gonna refer to?

74
00:05:56.058 --> 00:05:56.669
&gt;&gt; Mars.

75
00:05:56.669 --> 00:06:01.303
&gt;&gt; Mars,
then when I call that function, and

76
00:06:01.303 --> 00:06:06.711
outside of that function,
log the outer planet,

77
00:06:06.711 --> 00:06:10.597
guess what planets gonna refer to?

78
00:06:10.597 --> 00:06:11.152
&gt;&gt; Jupiter.

79
00:06:11.152 --> 00:06:12.650
&gt;&gt; Jupiter, let's check it out.

80
00:06:15.108 --> 00:06:21.934
Okay, so first I'm gonna
declare my planet variable.

81
00:06:21.934 --> 00:06:26.631
And as we might expect before I do
anything else, planet is Jupiter.

82
00:06:26.631 --> 00:06:28.653
Now I'm gonna declare my function.

83
00:06:30.641 --> 00:06:33.842
And nothing has happened yet
because I've just declared the function,

84
00:06:33.842 --> 00:06:36.300
I haven't run it, I haven't called it.

85
00:06:36.300 --> 00:06:38.526
So let's call it.

86
00:06:38.526 --> 00:06:40.234
And once I call this function,

87
00:06:40.234 --> 00:06:44.500
JavaScript is gonna start running
the code inside of the function.

88
00:06:44.500 --> 00:06:48.956
So it's gonna run the line that says left
planet equals Mars, and then it's gonna

89
00:06:48.956 --> 00:06:54.110
run the line console.log("Inner planet:",
let's see what happens.

90
00:06:54.110 --> 00:06:57.430
Okay, so it printed out inner
planet: Mars, makes sense,

91
00:06:57.430 --> 00:07:00.242
because it's inside of the asteroid belt,
okay.

92
00:07:00.242 --> 00:07:06.245
Now, if I console.log( outside
of the function, outer planet.

93
00:07:06.245 --> 00:07:09.800
Now, when it says planet it's
referring back to the planet

94
00:07:09.800 --> 00:07:12.942
that I had defined outside
of the function Jupiter.

95
00:07:14.942 --> 00:07:18.007
So let's take a look on
Whiteboard what's happening here.

96
00:07:20.188 --> 00:07:25.064
So what we've been saying so
far is we've been talking

97
00:07:25.064 --> 00:07:29.623
about variables as being
all in this one big space.

98
00:07:29.623 --> 00:07:34.689
But really, I've been sort of glossing
over the fact that when we declare

99
00:07:34.689 --> 00:07:40.327
these variables, we are declaring them
within a space that we could call global,

100
00:07:40.327 --> 00:07:43.204
so we could say this is global variables.

101
00:07:43.204 --> 00:07:50.977
And here, when I say let planet equals
Jupiter I have a new variable planet and

102
00:07:50.977 --> 00:07:58.287
then somewhere over here in In value
land I have a string called Jupiter.

103
00:08:00.466 --> 00:08:05.349
And I am making a link
an arrow from my global

104
00:08:05.349 --> 00:08:09.838
variable planet to the value Jupiter.

105
00:08:09.838 --> 00:08:14.623
Now the thing is when I
declare a function I sort of

106
00:08:14.623 --> 00:08:19.540
get a new scope that's
narrower than the old one.

107
00:08:21.030 --> 00:08:27.566
And this is what did I call this scope
out, I think was the name of the function.

108
00:08:27.566 --> 00:08:30.500
And because we declared that function,

109
00:08:30.500 --> 00:08:36.466
we actually get a global variable called
scope out, that points to the function.

110
00:08:38.611 --> 00:08:43.460
And then within scope out,
we have another variable planet,

111
00:08:43.460 --> 00:08:47.855
where somewhere out there we
have a string called Mars,

112
00:08:49.242 --> 00:08:52.084
And we are associating
that planet with Mars.

113
00:08:53.667 --> 00:09:00.215
So when I asked JavaScript for planet
inside the body of the scope out function,

114
00:09:00.215 --> 00:09:04.918
JavaScript is looking for
a variable within that scope.

115
00:09:04.918 --> 00:09:11.977
And it says I found planet and it follows
the link and it finds the value Mars.

116
00:09:11.977 --> 00:09:15.639
But when after I'm done
running that function,

117
00:09:15.639 --> 00:09:20.464
I asked JavaScript to console log
planet from the global context

118
00:09:20.464 --> 00:09:24.863
from the overall context,
the widest context possible.

119
00:09:24.863 --> 00:09:31.153
It's looking for a variable called planet,
it's finding planet in the global scope,

120
00:09:31.153 --> 00:09:35.658
which is where I'm in now because
I'm done with the function,

121
00:09:35.658 --> 00:09:40.134
following the link and
finding the value Jupiter.

122
00:09:40.134 --> 00:09:44.340
Okay, so let's talk about what happened
in our earlier example with bankruptcy.

123
00:09:46.290 --> 00:09:51.297
So I had a global scope,
and in that scope,

124
00:09:51.297 --> 00:09:55.480
I declared a function bankruptcy.

125
00:09:58.929 --> 00:10:02.910
Or sorry,
it was called declare bankruptcy, right,

126
00:10:02.910 --> 00:10:05.320
was the name of the function.

127
00:10:05.320 --> 00:10:06.660
[LAUGH] See, it's a hard word to spell.

128
00:10:07.940 --> 00:10:15.399
And that created its new scope
with the function body there,

129
00:10:15.399 --> 00:10:20.525
so this is the declare bankruptcy scope.

130
00:10:20.525 --> 00:10:25.120
And within that,
I said let bankruptcy equal true, I think.

131
00:10:26.410 --> 00:10:31.862
So here,
I created the bankruptcy variable.

132
00:10:31.862 --> 00:10:37.176
I had a value out here somewhere called
true and I said hey JavaScript point

133
00:10:37.176 --> 00:10:42.161
to the value true, from the variable
bankruptcy within this scope.

134
00:10:44.064 --> 00:10:48.928
But then later after I was done
running the function when I was out

135
00:10:48.928 --> 00:10:53.720
here somewhere I said,
hey JavaScript, what is bankruptcy?

136
00:10:54.810 --> 00:10:59.130
And JavaScript looked in its scope where
I'm asking it, in the global scope,

137
00:10:59.130 --> 00:11:01.814
it looked for
a variable called bankruptcy, and

138
00:11:01.814 --> 00:11:04.644
unlike in our planet example,
we don't have one.

139
00:11:04.644 --> 00:11:09.472
We don't have anything called
bankruptcy in the global scope.

140
00:11:09.472 --> 00:11:15.443
And it can't see into the inner scope
of the declare bankruptcy function,

141
00:11:15.443 --> 00:11:20.391
so it says error, I do not have
a variable called bankruptcy.

142
00:11:20.391 --> 00:11:23.532
I don't know what you're
talking about Anjana,

143
00:11:23.532 --> 00:11:26.160
stop doing nonsense things in your code.

144
00:11:26.160 --> 00:11:29.845
So this is kind of an important
thing about scope,

145
00:11:29.845 --> 00:11:34.570
is that it really matters where
we have those declarations.

146
00:11:34.570 --> 00:11:38.029
And if we have multiple similar
declarations, the values that they refer

147
00:11:38.029 --> 00:11:41.225
to might be different, like we saw
on our Mars and Jupiter example.

148
00:11:41.225 --> 00:11:44.986
This is a tricky thing to wrap your head
around for the first time so if this

149
00:11:44.986 --> 00:11:49.376
is like, don't worry about it, we're
gonna keep talking through some examples.

150
00:11:49.376 --> 00:11:54.042
&gt;&gt; Could you force that variable
planet to be a global variable within

151
00:11:54.042 --> 00:11:55.967
the function itself or no?

152
00:11:55.967 --> 00:12:00.345
&gt;&gt; Can you force the variable to be
a global within the function, okay.

153
00:12:00.345 --> 00:12:02.775
So just a recap of what we just said,

154
00:12:02.775 --> 00:12:07.002
basically within each scope
which they're nested, right.

155
00:12:07.002 --> 00:12:11.308
So we have the global scope that we
land in, then we have a new scope for

156
00:12:11.308 --> 00:12:12.434
every function.

157
00:12:12.434 --> 00:12:14.610
Within each scope that we're in, and

158
00:12:14.610 --> 00:12:17.535
we can even have like
functions within functions.

159
00:12:17.535 --> 00:12:20.697
So we can even have like Russian
doll scopes happening here,

160
00:12:20.697 --> 00:12:24.612
we're not gonna get that far but
that's for later steps with JavaScript.

161
00:12:24.612 --> 00:12:29.549
But within a scope you cannot see any
inner scopes like you can imagine

162
00:12:29.549 --> 00:12:34.249
them wrapped up in a little privacy
film and like tinted windows.

163
00:12:34.249 --> 00:12:38.021
So that you can't see into
them from the outside, So

164
00:12:38.021 --> 00:12:41.293
our function scope has
tinted windows on it.

165
00:12:41.293 --> 00:12:48.209
From the global context, we can't see in,
but from a narrower scope, we can see out.

166
00:12:48.209 --> 00:12:50.844
So, just with tinted windows in your limo,

167
00:12:50.844 --> 00:12:54.121
that you're surely gonna
be driving in once you've,

168
00:12:54.121 --> 00:12:58.412
started the next billion dollar
company with your JavaScript skills.

169
00:12:58.412 --> 00:13:03.833
You can see out from the function
scope into the wider global scope.

170
00:13:03.833 --> 00:13:08.194
So we can see other things like
in our is correct function,

171
00:13:08.194 --> 00:13:10.421
we could see our fact object.

172
00:13:10.421 --> 00:13:14.290
That was a variable declared
outside of the function.

173
00:13:14.290 --> 00:13:19.351
So we can think of these scopes as sort
of having tinted windows on them, okay.

174
00:13:19.351 --> 00:13:24.536
So this is just an example highlighting
something similar to what we did in our

175
00:13:24.536 --> 00:13:30.120
is correct function, here we have a global
variable declared in the global scope,

176
00:13:30.120 --> 00:13:32.703
to a string that describes what it is.

177
00:13:32.703 --> 00:13:37.880
Then we have a function narrower scope,
which just is there to

178
00:13:37.880 --> 00:13:43.974
create the narrower scope, we can log
the global variable from in here.

179
00:13:43.974 --> 00:13:45.624
Let's prove it.

180
00:13:46.808 --> 00:13:54.414
Okay, so I have my global variable,
boom global variable, is there.

181
00:13:54.414 --> 00:13:56.034
Okay, great.

182
00:13:56.034 --> 00:13:58.854
Now I'm gonna declare my
function now our scope,

183
00:13:58.854 --> 00:14:01.617
nothing happened because
I haven't run it yet.

184
00:14:01.617 --> 00:14:06.270
So now let's run it and if we can see out
of our tinted windows then we should be

185
00:14:06.270 --> 00:14:09.340
able to see the global variable and
log its value.

186
00:14:09.340 --> 00:14:12.874
And we gonna declare a local variable.

187
00:14:12.874 --> 00:14:17.932
So we saw I live in global scope so yes we
were able to see out the tinted windows.

188
00:14:17.932 --> 00:14:21.220
But now if I tried to log the local
variable we get the same thing we saw

189
00:14:21.220 --> 00:14:24.972
before with bankruptcy we get this
reference error because we can't see into

190
00:14:24.972 --> 00:14:25.508
the limo.

