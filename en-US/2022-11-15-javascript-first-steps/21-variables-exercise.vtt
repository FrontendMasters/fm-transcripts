WEBVTT

1
00:00:00.330 --> 00:00:05.184
Okay, well, what we're gonna do
now in our console is declare and

2
00:00:05.184 --> 00:00:08.150
assign some of our own variables.

3
00:00:08.150 --> 00:00:12.951
So your mission, should you choose
to accept it, is to declare and

4
00:00:12.951 --> 00:00:17.300
assign variables to remember
a few different things.

5
00:00:17.300 --> 00:00:22.092
Number one, your name, whatever
nickname for yourself you so choose.

6
00:00:22.092 --> 00:00:26.044
Number two,
the combined age of your parents.

7
00:00:26.044 --> 00:00:28.891
I'm gonna ask you to use
an expression when you

8
00:00:28.891 --> 00:00:32.180
declare this variable as
an extra little challenge.

9
00:00:33.500 --> 00:00:39.101
And then, number three, the thing that
we really could have used earlier,

10
00:00:39.101 --> 00:00:45.000
a variable to remember the element
with ID board on our Tic Tac Toe page.

11
00:00:45.000 --> 00:00:49.202
So let's go back to our Tic Tac Toe page,
open up the console again if you had

12
00:00:49.202 --> 00:00:52.959
closed it, and declare some
variables to remember these things.

13
00:01:02.434 --> 00:01:07.025
All right, so how we fill in with
our new-found variable powers?

14
00:01:07.025 --> 00:01:10.682
Pretty good,
seeing some confident nods, okay.

15
00:01:10.682 --> 00:01:18.177
So our name, we could maybe use a let or
did anybody use a const for this one?

16
00:01:18.177 --> 00:01:23.199
No, in my case,
I'm maybe gonna use a const because my

17
00:01:23.199 --> 00:01:28.900
name is not gonna change,
I have no plans to change it.

18
00:01:28.900 --> 00:01:31.959
So it could be maybe your first
name if you chose your full name,

19
00:01:31.959 --> 00:01:32.900
whatever you did.

20
00:01:34.430 --> 00:01:40.064
We have a pretty standard a declare and
assign a string, cool.

21
00:01:40.064 --> 00:01:44.071
Okay, now, the next question was
the combined age of your parents, and

22
00:01:44.071 --> 00:01:47.890
I asked you to use an expression
in your solution to this.

23
00:01:47.890 --> 00:01:49.690
So, can anybody walk me
through what they did?

24
00:01:52.670 --> 00:01:55.380
Chu, you wanna walk us
through your solution?

25
00:01:55.380 --> 00:01:57.880
You look like you have a,
confident thought?

26
00:01:57.880 --> 00:02:00.788
&gt;&gt; I don't know if I did it right.

27
00:02:00.788 --> 00:02:02.620
&gt;&gt; [LAUGH] That's okay,
we can talk it through.

28
00:02:03.790 --> 00:02:09.330
&gt;&gt; I just say lag
combinedParentsAge is equal to.

29
00:02:09.330 --> 00:02:11.260
&gt;&gt; Did you spell it like this?

30
00:02:11.260 --> 00:02:18.860
&gt;&gt; Like combinedParentsAge in our favorite
little new camel case, naming equal to?

31
00:02:18.860 --> 00:02:19.630
&gt;&gt; Two numbers?

32
00:02:19.630 --> 00:02:20.420
&gt;&gt; Two numbers.

33
00:02:20.420 --> 00:02:24.120
Okay, so
how did you combine those two numbers?

34
00:02:24.120 --> 00:02:27.920
We can choose random numbers,
you don't have to disclose your parent's

35
00:02:27.920 --> 00:02:32.530
personal identifying information, but
let's pretend that they're, I don't know.

36
00:02:32.530 --> 00:02:36.610
Let's make them nice and young,

37
00:02:36.610 --> 00:02:42.008
like 23 and 24, I don't know, [LAUGH].

38
00:02:42.008 --> 00:02:44.980
How did you assign this to two numbers?

39
00:02:44.980 --> 00:02:46.609
&gt;&gt; Plus.
&gt;&gt; Plus, exactly, so

40
00:02:46.609 --> 00:02:47.970
that is exactly right.

41
00:02:47.970 --> 00:02:52.051
So again, we can use expressions
where we would use values.

42
00:02:52.051 --> 00:02:56.459
So instead of using the value at 47, here,

43
00:02:56.459 --> 00:03:01.795
I can use plus to create
an expression that evaluates to

44
00:03:01.795 --> 00:03:09.720
a number which then is on the right-hand
side of my assignment operator equals.

45
00:03:09.720 --> 00:03:14.285
So that now when I ask JavaScript for
combinedParentsAge,

46
00:03:14.285 --> 00:03:19.851
it remembers the sum, it remembers
the value to which that expression,

47
00:03:19.851 --> 00:03:22.880
that addition expression evaluated.

48
00:03:24.560 --> 00:03:30.480
So am I going to be able to get back out
the original 23 and 24 from this variable?

49
00:03:30.480 --> 00:03:35.733
No, cuz what JavaScript does is it's
going to evaluate the expression,

50
00:03:35.733 --> 00:03:39.120
add the numbers together,
get the result, and

51
00:03:39.120 --> 00:03:43.285
then remember that as the value for
combinedParentsAge.

52
00:03:43.285 --> 00:03:45.218
Excellent, thanks so much Chu.

53
00:03:45.218 --> 00:03:46.620
Okay, now, what about this last one?

54
00:03:46.620 --> 00:03:49.391
This one that was just like so
annoying earlier,

55
00:03:49.391 --> 00:03:52.986
we had to keep typing document dot blah,
blah, blah all over.

56
00:03:52.986 --> 00:03:58.448
Can anybody walk me through
their solution for storing or

57
00:03:58.448 --> 00:04:04.041
remembering the value of
the ID board element, Stephen?

58
00:04:04.041 --> 00:04:07.260
&gt;&gt; Sorry, declared a variable board.

59
00:04:07.260 --> 00:04:09.840
&gt;&gt; Okay, how, walk me through it.

60
00:04:09.840 --> 00:04:13.490
&gt;&gt; That's equal to document.queryselector.

61
00:04:13.490 --> 00:04:16.397
&gt;&gt; Okay, so
the declaring part which you're like yeah,

62
00:04:16.397 --> 00:04:18.545
I just declare a variable, no big deal,

63
00:04:18.545 --> 00:04:22.161
but let's walk through it in specifics,
what keyword did you use?

64
00:04:22.161 --> 00:04:22.768
&gt;&gt; Let.

65
00:04:22.768 --> 00:04:23.920
&gt;&gt; Let, beautiful.

66
00:04:23.920 --> 00:04:24.620
&gt;&gt; Board.

67
00:04:24.620 --> 00:04:25.340
&gt;&gt; Board.

68
00:04:25.340 --> 00:04:28.580
&gt;&gt; Equals document.queryselector board.

69
00:04:33.130 --> 00:04:34.875
&gt;&gt; Okay, just board like this?

70
00:04:34.875 --> 00:04:39.680
&gt;&gt; No, I actually put the.

71
00:04:39.680 --> 00:04:40.470
&gt;&gt; The hash?

72
00:04:40.470 --> 00:04:41.442
&gt;&gt; Yeah.
&gt;&gt; Yeah,

73
00:04:41.442 --> 00:04:46.464
exactly because we're gonna look for
the element with the ID of board as

74
00:04:46.464 --> 00:04:51.585
opposed to a tag board which we
probably don't have in our page, right?

75
00:04:51.585 --> 00:04:56.412
Great, okay, so now,
board is a div, it is that element,

76
00:04:56.412 --> 00:05:00.865
so now we can work with board
like we did before, like,

77
00:05:03.434 --> 00:05:09.440
We can do board.children.length instead
of document dot, blah, blah, blah.

78
00:05:09.440 --> 00:05:15.915
So variables make our lives easier cuz now
we can capture this value once as it were,

79
00:05:15.915 --> 00:05:20.633
remember it as a shorter thing,
board, and then use board,

80
00:05:20.633 --> 00:05:25.400
the word, the name board,
in our code wherever we want.

81
00:05:25.400 --> 00:05:27.720
The document.queryselector.blah,
blah, blah, blah.

82
00:05:29.320 --> 00:05:32.588
Cool, excellent work,
great job, everybody.

83
00:05:32.588 --> 00:05:34.267
Any questions?

84
00:05:34.267 --> 00:05:35.142
Yeah.

85
00:05:35.142 --> 00:05:39.346
&gt;&gt; I was just playing around and
instead of lad, I use var, and

86
00:05:39.346 --> 00:05:43.820
that still worked,
is that an acceptable alternative to let?

87
00:05:45.320 --> 00:05:48.205
&gt;&gt; I was wondering when this question
was gonna crop up, all right,

88
00:05:48.205 --> 00:05:49.210
excellent question.

89
00:05:50.410 --> 00:05:54.775
There is a third keyword
that we can use to declare

90
00:05:54.775 --> 00:05:58.514
variables in JavaScript, and it is var.

91
00:05:58.514 --> 00:06:03.147
So var, I don't know, var title,

92
00:06:03.147 --> 00:06:08.554
let's say it could be document.title,

93
00:06:08.554 --> 00:06:13.199
and now, this works a lot like let.

94
00:06:13.199 --> 00:06:18.682
So for example, unlike const,

95
00:06:18.682 --> 00:06:21.930
if I do const h1 and

96
00:06:21.930 --> 00:06:27.626
do document query selector h1.

97
00:06:27.626 --> 00:06:33.758
If I try to define this to something
else now, we said with const,

98
00:06:33.758 --> 00:06:38.552
I can't do it,
const can't be changed, let can,

99
00:06:38.552 --> 00:06:45.044
right like parents,
what did I have combinedParentsAge, okay?

100
00:06:45.044 --> 00:06:49.075
CombinedParentsAge can be changed
to whatever we want because we

101
00:06:49.075 --> 00:06:50.475
declared it with let.

102
00:06:50.475 --> 00:06:57.977
Const does not let us, var does or
does not let us reassign the variable.

103
00:06:57.977 --> 00:06:58.605
What do you think?

104
00:06:58.605 --> 00:06:59.957
It does, exactly.

105
00:06:59.957 --> 00:07:03.965
So I could do title
equals whatever I want.

106
00:07:03.965 --> 00:07:10.445
So in some ways, var is similar to let,
are they the same?

107
00:07:10.445 --> 00:07:13.820
No, what is the difference between them?

108
00:07:15.310 --> 00:07:18.664
I'm gonna put a pin in that,
we're gonna talk about it tomorrow.

109
00:07:18.664 --> 00:07:21.015
So the difference between var and
let, well,

110
00:07:21.015 --> 00:07:24.320
there's one difference is
that var is older than let.

111
00:07:24.320 --> 00:07:30.365
Let and const, are kind of new kids on
the block, relatively speaking, they

112
00:07:30.365 --> 00:07:36.317
both came into JavaScript in a version
of the language that was called Es6.

113
00:07:36.317 --> 00:07:41.719
Sorry, Es2015, Es stands for ECMAScript,
this is a complicated JavaScript trivia,

114
00:07:41.719 --> 00:07:44.990
the standards body that says
this is valid JavaScript.

115
00:07:46.320 --> 00:07:51.175
It captures that validity in
a specification called ECMAScript, so

116
00:07:51.175 --> 00:07:55.455
we talk about versions of
JavaScript with this ES nonsense.

117
00:07:55.455 --> 00:08:00.255
So ES 2015 or ES6 introduced let and

118
00:08:00.255 --> 00:08:04.066
const as new ways of creating and

119
00:08:04.066 --> 00:08:10.009
assigning variables with
new rules around them.

120
00:08:10.009 --> 00:08:15.520
The older way going back to 95,
it was var.

121
00:08:15.520 --> 00:08:21.543
So you will still see var in code
that you find around on the web.

122
00:08:21.543 --> 00:08:25.872
I am going to say just right now
similarly to how I said don't

123
00:08:25.872 --> 00:08:30.039
use the double equals loosey
goosey equality operator.

124
00:08:30.039 --> 00:08:34.944
Generally, you're not gonna wanna use var,
tomorrow, we're gonna talk about scope in

125
00:08:34.944 --> 00:08:39.332
JavaScript, and we're gonna talk about
the difference in scope between var and

126
00:08:39.332 --> 00:08:41.352
let which is kind of its equivalent.

127
00:08:41.352 --> 00:08:46.092
Previously, there was no const type thing,
all variables were read declarable.

128
00:08:46.092 --> 00:08:50.430
So I'm gonna put a pin in that,
but I will say that in general,

129
00:08:50.430 --> 00:08:55.280
these days, almost always you're
gonna want a let instead of a var.

130
00:08:55.280 --> 00:08:57.274
Because let is more predictable,

131
00:08:57.274 --> 00:09:02.087
it's easier to predict what it's gonna do
based on the scope rules of JavaScript,

132
00:09:02.087 --> 00:09:05.060
which we're gonna talk
about later in the course.

133
00:09:06.140 --> 00:09:10.574
So, var is a thing,
it is out there, it is a keyword,

134
00:09:10.574 --> 00:09:16.812
it works very similarly in many ways
to let, not the same, try to avoid it.

135
00:09:16.812 --> 00:09:19.830
[LAUGH] Is what I would say
about var at this point.

136
00:09:19.830 --> 00:09:20.371
Great question.

