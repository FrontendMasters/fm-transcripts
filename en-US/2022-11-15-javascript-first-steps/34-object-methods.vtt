WEBVTT

1
00:00:00.000 --> 00:00:05.788
Another thing we can do with properties,
Is to point them to functions.

2
00:00:05.788 --> 00:00:09.045
Now, we're gonna talk a lot
about functions in a little bit.

3
00:00:09.045 --> 00:00:13.521
But suffice it to say that
sometimes properties aren't just

4
00:00:13.521 --> 00:00:17.482
values that represent nouns,
as we said yesterday.

5
00:00:17.482 --> 00:00:22.410
They can also be actions,
they can be things that do stuff.

6
00:00:22.410 --> 00:00:27.163
So, for example,
I can have a speak property that

7
00:00:27.163 --> 00:00:31.917
points to a function that
when I call it prints woof

8
00:00:31.917 --> 00:00:36.802
woof to the console,
because this is a dog object.

9
00:00:36.802 --> 00:00:40.619
So in my dog object, I have a couple
of properties, I have a name, Ein,

10
00:00:40.619 --> 00:00:41.524
breed, Corgi.

11
00:00:41.524 --> 00:00:44.157
If anybody gets this reference,
it's awesome,

12
00:00:44.157 --> 00:00:46.170
cuz this is a Cowboy Bebop reference.

13
00:00:46.170 --> 00:00:52.661
Anyway, and speak is a property which
now I can, when I call dog.speak,

14
00:00:52.661 --> 00:00:57.688
I can use this round parentheses
to call that function and

15
00:00:57.688 --> 00:01:00.957
do whatever the function says to do.

16
00:01:00.957 --> 00:01:06.406
So if we go back to our console, And

17
00:01:06.406 --> 00:01:09.066
I declare my dog object,

18
00:01:09.066 --> 00:01:14.271
we see that this has a few
different properties.

19
00:01:14.271 --> 00:01:18.162
The name is a string value,
the breed points to a string value, and

20
00:01:18.162 --> 00:01:20.397
speak points to some function speak.

21
00:01:20.397 --> 00:01:25.752
So now if I call dog.speak,
it goes woof woof.

22
00:01:25.752 --> 00:01:30.276
So this is to say that sometimes you
see this dot notation with the name

23
00:01:30.276 --> 00:01:32.695
of a property and then parentheses.

24
00:01:32.695 --> 00:01:35.834
What that is, is what we call a method.

25
00:01:35.834 --> 00:01:40.993
So this is like basically a special
type of property that it doesn't

26
00:01:40.993 --> 00:01:45.799
evaluate to a value,
it calls a function that does something.

27
00:01:45.799 --> 00:01:50.240
Now, in a little bit, we're gonna talk
about what functions are, how they work,

28
00:01:50.240 --> 00:01:51.771
what's going on with them.

29
00:01:51.771 --> 00:01:57.118
But suffice it to say that
you will see this dot

30
00:01:57.118 --> 00:02:02.058
property name parens in various places.

31
00:02:02.058 --> 00:02:05.388
In fact,
we've seen it a couple of times already.

32
00:02:05.388 --> 00:02:12.863
Does anybody remember seeing
this type of structure before?

33
00:02:12.863 --> 00:02:15.788
Like, for example,
&gt;&gt; .indexOf.

34
00:02:15.788 --> 00:02:17.756
&gt;&gt; IndexOf, exactly.

35
00:02:17.756 --> 00:02:24.168
So we had some kind of string indexOf(r).

36
00:02:24.168 --> 00:02:28.906
That indexOf, I've been calling it
a spell that we cast on strings,

37
00:02:28.906 --> 00:02:31.204
it's actually called a method.

38
00:02:31.204 --> 00:02:33.993
So indexOf is a method on strings.

39
00:02:33.993 --> 00:02:37.358
We saw a couple of methods on arrays too.

40
00:02:37.358 --> 00:02:42.023
Can anybody remember one of the array
methods we saw today, or we saw earlier?

41
00:02:42.023 --> 00:02:42.627
&gt;&gt; Sort?

42
00:02:42.627 --> 00:02:45.676
&gt;&gt; Sort, exactly.

43
00:02:45.676 --> 00:02:47.570
Do I still have array1?

44
00:02:47.570 --> 00:02:52.927
We saw array sort, exactly.

45
00:02:52.927 --> 00:02:58.742
So these things, these spells that we've
been invoking by pressing .name parens,

46
00:02:58.742 --> 00:03:00.841
these are called methods, and

47
00:03:00.841 --> 00:03:04.810
they are essentially properties
the point to functions.

48
00:03:04.810 --> 00:03:08.667
And functions is gonna be a big topic
of discussion later in the course.

49
00:03:11.303 --> 00:03:16.035
Another thing that I [LAUGH] only want
to mention because you might see it

50
00:03:16.035 --> 00:03:20.849
somewhere out there when you're
reading people's JavaScript code,

51
00:03:20.849 --> 00:03:25.196
is there is a word called this,
a keyword in JavaScript, this.

52
00:03:25.196 --> 00:03:31.301
And you might see this,
it's essentially a way within methods for

53
00:03:31.301 --> 00:03:36.433
us to refer back to the object
that this method lives on.

54
00:03:36.433 --> 00:03:40.811
So that we can access
properties of that object.

55
00:03:40.811 --> 00:03:47.070
So, for example, so
I had my anjana object.

56
00:03:47.070 --> 00:03:50.924
No, I didn't define it,
that's not gonna work.

57
00:03:50.924 --> 00:03:56.389
I'm gonna just make it short here.

58
00:03:56.389 --> 00:03:59.645
Okay, my abbreviated anjana object.

59
00:03:59.645 --> 00:04:03.884
If I now declare a new property on that
object and assign it to a function, and

60
00:04:03.884 --> 00:04:08.136
somewhere in that function, and
we're gonna talk about functions later.

61
00:04:08.136 --> 00:04:11.735
Somewhere in that function,
I use this.name,

62
00:04:11.735 --> 00:04:17.435
in this case to log out to the console,
hi, my name is, and then this.name,

63
00:04:17.435 --> 00:04:23.700
JavaScript's gonna look up the name on the
object that I'm calling this method on.

64
00:04:23.700 --> 00:04:28.799
So now if I call the method anjana.speak,
we'll say hi, my name is Anjana.

65
00:04:28.799 --> 00:04:36.336
So this is a Pandora's box that I don't
really want us to open right now.

66
00:04:36.336 --> 00:04:43.184
But suffice it to say, you might see
this around in your JavaScript journeys,

67
00:04:43.184 --> 00:04:47.669
and I would just say danger,
be careful with this.

68
00:04:47.669 --> 00:04:52.642
It is very tricky in JavaScript, it is
a tricky wicket or whatever they say,

69
00:04:52.642 --> 00:04:53.821
a sticky wicket.

70
00:04:53.821 --> 00:04:58.049
It has behavior that is kind of
complicated and can be weird and

71
00:04:58.049 --> 00:04:59.932
can do unexpected things.

72
00:04:59.932 --> 00:05:04.091
So I mostly am bringing it up just to
say in case you see it around there,

73
00:05:04.091 --> 00:05:08.676
often it's used in methods to talk about
other properties on the object, but

74
00:05:08.676 --> 00:05:12.009
there's a lot of other weird
things to know about this.

75
00:05:12.009 --> 00:05:15.845
So if you are really curious,
you can dig in on MDN.

76
00:05:15.845 --> 00:05:20.629
Cool, now,
we had the question a minute ago of,

77
00:05:20.629 --> 00:05:27.188
can we have more details about one
of the properties in our object?

78
00:05:27.188 --> 00:05:31.737
Can I have a, I think it was pet
info object or something like that,

79
00:05:31.737 --> 00:05:35.799
with maybe the name of the pet,
and the breed of the pet, and

80
00:05:35.799 --> 00:05:38.656
the favorite food of the pet, whatever.

81
00:05:38.656 --> 00:05:40.552
Yes, we totally can.

82
00:05:40.552 --> 00:05:47.803
We can have objects as values
of properties within objects.

83
00:05:47.803 --> 00:05:51.412
So we can essentially have nested objects.

84
00:05:51.412 --> 00:05:57.151
So here, I am creating a menu object
with two properties, lunch and dinner.

85
00:05:57.151 --> 00:06:02.319
And each of those properties
points to another object with

86
00:06:02.319 --> 00:06:07.389
three properties, appetizer,
a main, and a dessert.

87
00:06:07.389 --> 00:06:13.853
So what we have now is the opportunity
to follow those arrows through a couple

88
00:06:13.853 --> 00:06:19.713
of different objects to get to
the end value that we're looking for.

89
00:06:19.713 --> 00:06:24.052
So if I wanna find
tiramisu in this object,

90
00:06:24.052 --> 00:06:29.476
I can find it by saying menu.lunch,
which evaluates

91
00:06:29.476 --> 00:06:36.364
to the object I have put at the pointer
lunch inside the menu object.

92
00:06:36.364 --> 00:06:41.362
And within that object,
I can say .dessert to find the value

93
00:06:41.362 --> 00:06:45.579
of the dessert property
inside that inner object.

94
00:06:47.562 --> 00:06:49.953
Makes sense?

95
00:06:49.953 --> 00:06:55.840
So, yes, we had the question, can we
have objects inside of other objects?

96
00:06:55.840 --> 00:07:00.629
We totally can, and
we can have objects inside of arrays.

97
00:07:00.629 --> 00:07:03.109
And since we can have
arrays inside of objects,

98
00:07:03.109 --> 00:07:06.028
we can have objects inside
of arrays inside of objects.

99
00:07:06.028 --> 00:07:08.768
We can have arrays inside of objects
inside of arrays inside of objects.

100
00:07:08.768 --> 00:07:12.611
We can do whatever we want,
we are the creators.

101
00:07:12.611 --> 00:07:16.872
But, of course, eventually, it gets a
little bit complicated when you're several

102
00:07:16.872 --> 00:07:20.852
layers deep and you're trying to figure
out how to get a value out that you want.

103
00:07:20.852 --> 00:07:24.805
So try not to overcomplicate your life,
if you can help it.

104
00:07:24.805 --> 00:07:29.853
But sometimes it is very convenient
to have nested objects so that

105
00:07:29.853 --> 00:07:35.475
we can do things like menu.lunch.dessert,
and keep it all together.

106
00:07:38.080 --> 00:07:41.555
And as I said,
we can have objects inside of arrays.

107
00:07:41.555 --> 00:07:44.775
So for example here,
I have an array of spices,

108
00:07:44.775 --> 00:07:49.618
where each element, each item inside
of the spices array is an object.

109
00:07:49.618 --> 00:07:52.398
And each object has a name,
and a nickname,

110
00:07:52.398 --> 00:07:55.115
and of course, these are the Spice Girls.

111
00:07:55.115 --> 00:07:59.321
Yes, you know that the 90s
music theme continues.

112
00:07:59.321 --> 00:08:03.603
So, for example,
I could have a Spice Girls object with

113
00:08:03.603 --> 00:08:07.898
an album's property that has
an array of their albums.

114
00:08:07.898 --> 00:08:10.397
A motto, Girl Power, of course.

115
00:08:10.397 --> 00:08:15.788
And a member's property,
which points to the array that

116
00:08:15.788 --> 00:08:21.416
I had declared earlier as
the value of the spices variable.

117
00:08:24.757 --> 00:08:28.628
So let's put this stuff in our console.

118
00:08:31.276 --> 00:08:35.755
So I'm going to create my spices array.

119
00:08:37.221 --> 00:08:39.828
Which is an array with five things in it,
and

120
00:08:39.828 --> 00:08:43.500
each of those things is an object
with two properties, yeah?

121
00:08:43.500 --> 00:08:48.208
And the browser console is really nice
cuz I can kind of drill down into my

122
00:08:48.208 --> 00:08:49.079
stuff here.

123
00:08:49.079 --> 00:08:54.428
And then if I create
my Spice Girls object,

124
00:08:54.428 --> 00:09:00.232
I have an object with
these three properties.

125
00:09:00.232 --> 00:09:03.845
Where albums is an array of strings,

126
00:09:03.845 --> 00:09:09.913
members is my spices array of objects,
and motto is a string.

