WEBVTT

1
00:00:00.220 --> 00:00:03.970
Let us press on and talk about functions.

2
00:00:05.330 --> 00:00:10.023
Now, as Kim Kardashian says in this GIF
that you probably can't read, I'm just so

3
00:00:10.023 --> 00:00:14.851
tired, I can't even function, which I'm
sure we've all related to at some point or

4
00:00:14.851 --> 00:00:16.886
another, or maybe even right now.

5
00:00:16.886 --> 00:00:22.577
And it makes sense that Kim is tired
when she's thinking about functions,

6
00:00:22.577 --> 00:00:27.996
because if we said that values are things
in our JavaScript universe and

7
00:00:27.996 --> 00:00:30.977
variables are pointers, two things,

8
00:00:30.977 --> 00:00:35.070
then we could think about
functions as doing things.

9
00:00:35.070 --> 00:00:37.533
And so
that is why they make us tired sometimes.

10
00:00:37.533 --> 00:00:40.920
[LAUGH] So let's talk about functions.

11
00:00:40.920 --> 00:00:46.720
Now we saw really briefly some
function declarations earlier.

12
00:00:46.720 --> 00:00:50.316
But this is what it looks
like when we declare or

13
00:00:50.316 --> 00:00:53.000
create a function in JavaScript.

14
00:00:53.000 --> 00:00:56.027
There's a few different options that we
have for how to create a function but

15
00:00:56.027 --> 00:00:58.090
this is one very common one.

16
00:00:58.090 --> 00:00:59.838
We have the keyword function,

17
00:00:59.838 --> 00:01:02.670
which indicates that this
is gonna be a function.

18
00:01:04.120 --> 00:01:07.616
A name for the function,
in this case, half, and

19
00:01:07.616 --> 00:01:12.280
then some parentheses with
some stuff inside them.

20
00:01:12.280 --> 00:01:14.880
Then we have our good friends,
the curly braces.

21
00:01:15.950 --> 00:01:19.990
And then we have some code
inside of those curly braces.

22
00:01:19.990 --> 00:01:24.070
And in this case, we have one line of
code and it has the word return in it.

23
00:01:24.070 --> 00:01:29.474
And then it has some kind of expression,
in this case,

24
00:01:29.474 --> 00:01:36.880
dividing x by 2, so we might expect
half to give us the half of some number.

25
00:01:36.880 --> 00:01:41.832
And if we wanna use it or
as we say in computer lingo,

26
00:01:41.832 --> 00:01:45.056
as we if we wanna call a function,

27
00:01:45.056 --> 00:01:50.837
we can say the name of the function,
and then parentheses.

28
00:01:50.837 --> 00:01:57.181
And then pass in a value that we
want to give to this function for

29
00:01:57.181 --> 00:02:02.183
it to run through its code
as whatever value we put

30
00:02:02.183 --> 00:02:07.562
inside of the parens when
we declared the function.

31
00:02:07.562 --> 00:02:12.979
So in this case,
if we assign a new variable

32
00:02:12.979 --> 00:02:17.793
one to the value of calling half on 2,

33
00:02:17.793 --> 00:02:23.660
the function half is gonna
get the number 2 and

34
00:02:23.660 --> 00:02:30.920
it's going to return 2 divided
by 2 which is 1, cool?

35
00:02:30.920 --> 00:02:36.036
Okay, so let's talk a little bit
more detail about what is going

36
00:02:36.036 --> 00:02:40.887
on here inside of these parens
when we declare the function.

37
00:02:40.887 --> 00:02:45.748
So the stuff that we put in here,
which right now has very

38
00:02:45.748 --> 00:02:50.608
boring names of x or x and y,
these are what we could think

39
00:02:50.608 --> 00:02:55.598
of as the values that this
function is gonna need to work.

40
00:02:55.598 --> 00:03:00.063
And then when we call it,
we're gonna pass in actual

41
00:03:00.063 --> 00:03:04.132
values that we want this
function to work with.

42
00:03:04.132 --> 00:03:09.014
And so the difference between these
words is essentially that when we're

43
00:03:09.014 --> 00:03:14.523
declaring the function and we're saying
okay, this function is gonna need an x and

44
00:03:14.523 --> 00:03:19.031
it's gonna need a y, we call those
the parameters of the function.

45
00:03:19.031 --> 00:03:23.089
And then when we pass in
actual values like 2 and 3,

46
00:03:23.089 --> 00:03:28.625
those are called the arguments passed
to the function, which are gonna

47
00:03:28.625 --> 00:03:34.821
get assigned to the parameters that we
described when we created the function.

48
00:03:34.821 --> 00:03:39.102
So you could think of these parameters or
what happens in this x,

49
00:03:39.102 --> 00:03:44.176
y here as sort of like mini-variables or
sort of pseudo-variables are what

50
00:03:44.176 --> 00:03:49.273
we are gonna call the values that get
passed in as arguments to the function.

51
00:03:49.273 --> 00:03:52.852
This is all just a little bit of
terminology, the words are not so

52
00:03:52.852 --> 00:03:57.298
important except insofar as you're going
along in your JavaScript journey and

53
00:03:57.298 --> 00:04:02.006
you're finding more resources, more
courses, more articles on MDN, whatever,

54
00:04:02.006 --> 00:04:03.888
you might hear these words used.

55
00:04:03.888 --> 00:04:08.577
Okay, now some functions don't even need
any values to do their job, like for

56
00:04:08.577 --> 00:04:12.699
example, here we have a function
getRandomNumber and it's using,

57
00:04:12.699 --> 00:04:16.560
you remember our Math.random
method that we looked at before?

58
00:04:16.560 --> 00:04:19.187
Does anybody remember
what Math.random does?

59
00:04:19.187 --> 00:04:19.911
&gt;&gt; Random number.

60
00:04:19.911 --> 00:04:22.048
&gt;&gt; A random number, specifically?

61
00:04:22.048 --> 00:04:25.103
&gt;&gt; Zero, one.
&gt;&gt; Between zero and one, yes, exactly.

62
00:04:25.103 --> 00:04:30.086
So right now, we have a getRandomNumber
function which is really

63
00:04:30.086 --> 00:04:35.251
just kind of a tiny little wrapper
around our Math.random method,

64
00:04:35.251 --> 00:04:38.168
which is going to give us a new number.

65
00:04:38.168 --> 00:04:42.572
And just like Math.random,
we don't need to give this function

66
00:04:42.572 --> 00:04:47.389
any values to do its job, it's just
gonna generate a new number for us.

67
00:04:48.700 --> 00:04:52.860
So in this case,
our function has no parameters.

68
00:04:52.860 --> 00:04:55.883
In between these parentheses when we
declare the function, there's nothing.

69
00:04:55.883 --> 00:04:59.681
And when we call the function,
we put nothing between the parentheses.

70
00:04:59.681 --> 00:05:04.173
So yes, so these parameters are the inputs
that our function expects, and

71
00:05:04.173 --> 00:05:07.322
the arguments that we pass
in are the actual values.

72
00:05:07.322 --> 00:05:08.903
So let's take a look at this example.

73
00:05:08.903 --> 00:05:13.489
I have a function here add3,
which is going to take in three

74
00:05:13.489 --> 00:05:18.367
different parameters with the very
boring names x, y, and z.

75
00:05:18.367 --> 00:05:23.439
And then it is going to log two things,
it's going to log the names

76
00:05:23.439 --> 00:05:29.542
of the parameters, and it's going to
log the values of the actual arguments.

77
00:05:29.542 --> 00:05:34.610
Note the difference in syntax here
between these two calls to console.log.

78
00:05:34.610 --> 00:05:39.380
So fun fact about console.log
is you can call console.log and

79
00:05:39.380 --> 00:05:45.140
pass in multiple arguments to console.log
using commas to separate them,

80
00:05:45.140 --> 00:05:48.560
and it will log them all
separated by spaces.

81
00:05:49.570 --> 00:05:51.300
Let's watch it in action.

82
00:05:51.300 --> 00:05:54.836
So this is gonna log the parameter
names and then the values and

83
00:05:54.836 --> 00:05:59.600
then it's going to return a sum,
we'll talk about returns in a second.

84
00:05:59.600 --> 00:06:04.150
Let's go back to our, Console.

85
00:06:09.031 --> 00:06:12.740
And we're going to declare
this function add3.

86
00:06:12.740 --> 00:06:17.454
So now, what JavaScript has done is
it's created a new variable add3 whose

87
00:06:17.454 --> 00:06:19.050
value is a function.

88
00:06:19.050 --> 00:06:24.274
So if I asked for add3 with no
parentheses, JavaScript is gonna say,

89
00:06:24.274 --> 00:06:28.003
yep, I know what add3 is,
and it's a function.

90
00:06:28.003 --> 00:06:32.356
Now, if I call add3 and capture that

91
00:06:32.356 --> 00:06:37.280
as a sum value, add3 is going to log out.

92
00:06:37.280 --> 00:06:42.710
My parameters are names x, y, z, and
I received the arguments 4, 5, and 6.

93
00:06:43.760 --> 00:06:46.785
And then the value of sum gonna be what?

94
00:06:46.785 --> 00:06:47.770
What do y'all think?

95
00:06:50.322 --> 00:06:51.163
[LAUGH]
&gt;&gt; 15.

96
00:06:51.163 --> 00:06:57.802
&gt;&gt; Indeed, so
what add3 did was a few different things.

97
00:06:57.802 --> 00:07:02.827
It logged a couple of things to
the console and it returned a value,

98
00:07:02.827 --> 00:07:07.511
which then I was able to capture
by assigning it to a variable.

99
00:07:12.348 --> 00:07:17.940
So we name parameters similarly
to how we name variables.

100
00:07:17.940 --> 00:07:22.812
So we should kinda follow the same
rules of thumb as we do when we're

101
00:07:22.812 --> 00:07:24.293
naming variables.

102
00:07:24.293 --> 00:07:27.372
What do you think happens if
I do the first thing here?

103
00:07:27.372 --> 00:07:31.322
This function, does this work where
in between the parentheses when I'm

104
00:07:31.322 --> 00:07:35.917
declaring this function, I'm putting
a literal string value, literally a value?

105
00:07:38.593 --> 00:07:39.620
Should we find out what happens?

106
00:07:41.280 --> 00:07:42.100
&gt;&gt; It should work, no?

107
00:07:42.100 --> 00:07:42.630
&gt;&gt; Guesses?

108
00:07:44.460 --> 00:07:48.130
&gt;&gt; I think you should be able to pass
a string as a parameter into a function.

109
00:07:50.420 --> 00:07:53.150
&gt;&gt; So we have some people saying
I think so, I think it'll work.

110
00:07:53.150 --> 00:07:54.225
Some people saying I
don't think it'll work.

111
00:07:54.225 --> 00:07:55.350
&gt;&gt; In chat, true.

112
00:07:55.350 --> 00:07:57.390
&gt;&gt; Let's find out, sorry?

113
00:07:57.390 --> 00:07:58.720
&gt;&gt; In chat, somebody said true.

114
00:08:00.180 --> 00:08:03.553
&gt;&gt; Okay, so it will output true,
let's find out.

115
00:08:03.553 --> 00:08:05.431
So does this work?

116
00:08:05.431 --> 00:08:09.840
Ugh, JavaScript returned a syntax error,
true, we should say,

117
00:08:09.840 --> 00:08:12.373
a syntax error, missing parameter.

118
00:08:12.373 --> 00:08:14.748
So JavaScript is actually looking for

119
00:08:14.748 --> 00:08:19.358
variable names in between those
parentheses when we declare a function.

120
00:08:19.358 --> 00:08:24.459
So if I try to give in an actual
value there instead of the name for

121
00:08:24.459 --> 00:08:29.466
a value that might get passed in
as a argument to the function,

122
00:08:29.466 --> 00:08:33.820
JavaScript doesn't like it,
so this does not work.

123
00:08:33.820 --> 00:08:34.953
Okay, how about this?

124
00:08:34.953 --> 00:08:38.902
[LAUGH] How about if I have
a variable that starts with a 1 or

125
00:08:38.902 --> 00:08:44.019
a parameter name that starts with a 1 and
ends with an exclamation point?

126
00:08:44.019 --> 00:08:45.680
Do you think this will work?

127
00:08:45.680 --> 00:08:46.820
&gt;&gt; Yeah.

128
00:08:46.820 --> 00:08:47.320
&gt;&gt; Yeah?

129
00:08:48.520 --> 00:08:51.778
So we talked briefly about variable
names earlier in the course,

130
00:08:51.778 --> 00:08:53.329
is this a valid variable name?

131
00:08:53.329 --> 00:08:54.310
&gt;&gt; No.
&gt;&gt; No, it's not.

132
00:08:55.520 --> 00:08:57.660
So let's see what JavaScript does.

133
00:08:57.660 --> 00:08:58.500
Let's see if it likes it.

134
00:08:59.630 --> 00:09:00.883
Oop, nope, this time,

135
00:09:00.883 --> 00:09:05.140
the error is even weirder, identifier
starts immediately after numeric literal.

136
00:09:05.140 --> 00:09:09.270
It's cuz it can't even parse
this as a name for a parameter.

137
00:09:09.270 --> 00:09:11.787
It's actually seeing the 1 and
thinking it's a literal 1, and

138
00:09:11.787 --> 00:09:15.390
then it's confused about what happens
afterwards, and so no, this doesn't work.

139
00:09:15.390 --> 00:09:20.343
So essentially, when you're declaring
a function, put valid variable names as

140
00:09:20.343 --> 00:09:24.818
the names of any parameters that you
might need for that function, cool?

141
00:09:24.818 --> 00:09:29.209
Okay, now,
another question we might have is like for

142
00:09:29.209 --> 00:09:32.645
example, add3, as its name indicates,

143
00:09:32.645 --> 00:09:38.980
expects three values coming in because
it's trying to add x to y to z.

144
00:09:38.980 --> 00:09:44.580
So what happens if we don't call
a function with its intended arguments?

145
00:09:46.830 --> 00:09:50.360
What happens if we call add3
with just 1 and 2, for example?

146
00:09:51.460 --> 00:09:52.507
Any guesses?

147
00:09:52.507 --> 00:09:53.860
&gt;&gt; Node reference.

148
00:09:53.860 --> 00:09:59.103
&gt;&gt; So node reference, meaning we
get something like an unexpected

149
00:09:59.103 --> 00:10:03.193
missing value in JavaScript we might say,
okay?

150
00:10:03.193 --> 00:10:05.260
So maybe we get like,
nope, something's wrong.

151
00:10:05.260 --> 00:10:08.806
I was expecting x, y, and z and
you didn't give me a z, and

152
00:10:08.806 --> 00:10:10.629
it's not gonna work, okay?

153
00:10:10.629 --> 00:10:12.280
Any other guesses what might happen?

154
00:10:12.280 --> 00:10:14.804
&gt;&gt; In chat,
a couple of people are saying an error.

155
00:10:14.804 --> 00:10:18.300
&gt;&gt; An error might happen, yes, so
that's basically more generally.

156
00:10:18.300 --> 00:10:21.544
Let's find out.

157
00:10:21.544 --> 00:10:24.520
[LAUGH] Well, we didn't get an error.

158
00:10:26.780 --> 00:10:32.136
The function ran and it said,
I received the arguments 1 2,

159
00:10:32.136 --> 00:10:35.880
and our good friend undefined.

160
00:10:35.880 --> 00:10:41.885
So JavaScript didn't mind that we called
this with the wrong number of arguments,

161
00:10:41.885 --> 00:10:45.160
it just said, well,
you didn't pass in a z.

162
00:10:45.160 --> 00:10:47.288
z is undefined then.

163
00:10:47.288 --> 00:10:51.833
And so the value of adding, what was it,

164
00:10:51.833 --> 00:10:56.245
1 + 2 + undefined is N-A-N or NaN,

165
00:10:56.245 --> 00:11:00.146
which stands for, anybody know?

166
00:11:00.146 --> 00:11:01.070
&gt;&gt; Not a number.

167
00:11:01.070 --> 00:11:08.374
&gt;&gt; Not a number,
which ironically, Is a number.

168
00:11:08.374 --> 00:11:14.360
[LAUGH] So NaN is something you might find
if things have gone wrong in your program.

169
00:11:14.360 --> 00:11:17.935
It's also what we get,
like let's say if we try to divide by 0 or

170
00:11:17.935 --> 00:11:22.640
something like that, when the math just
doesn't work out, like adding 1 and 2 and

171
00:11:22.640 --> 00:11:26.450
undefined, JavaScript's like
I don't know how to do that.

172
00:11:26.450 --> 00:11:28.961
But it doesn't error, it doesn't complain,

173
00:11:28.961 --> 00:11:33.350
it just returns a value that I wouldn't
expect because of that undefined value.

174
00:11:33.350 --> 00:11:38.113
So this is, again, a case of
JavaScript being super loosey-goosey

175
00:11:38.113 --> 00:11:43.202
with its types and with the things that
it expects and basically not caring

176
00:11:43.202 --> 00:11:48.146
that you essentially silently passed
in undefined as the third value.

177
00:11:48.146 --> 00:11:52.542
Now what about our
getRandomNumber function, which,

178
00:11:52.542 --> 00:11:56.290
let me just go back and
grab it so that we have it.

179
00:11:59.210 --> 00:12:03.566
So we had this getRandomNumber function,

180
00:12:03.566 --> 00:12:08.648
which returns our Math.random and
if we call it,

181
00:12:08.648 --> 00:12:13.494
we expect some kind of
number between 0 and 1.

182
00:12:13.494 --> 00:12:18.989
But what happens if we call it with some

183
00:12:18.989 --> 00:12:23.799
value that we didn't account for

184
00:12:23.799 --> 00:12:28.730
in the function declaration?

185
00:12:28.730 --> 00:12:30.329
&gt;&gt; It sort of turns optimus quick.

186
00:12:30.329 --> 00:12:32.035
&gt;&gt; Also maybe spoilers [LAUGH].

187
00:12:32.035 --> 00:12:36.364
So yes, spoilers is JavaScript don't care,
we gave it an extra

188
00:12:36.364 --> 00:12:41.191
value that it didn't have to pay
attention to and so it just ignored it.

189
00:12:41.191 --> 00:12:42.414
No error, no hey,

190
00:12:42.414 --> 00:12:46.750
are you using this function the way that
you expect to be using this function?

191
00:12:46.750 --> 00:12:47.478
Dear programmer,

192
00:12:47.478 --> 00:12:50.394
maybe you've misunderstood something
about how you wrote that function.

193
00:12:50.394 --> 00:12:53.080
No helpful thing like
that from JavaScript, no.

194
00:12:53.080 --> 00:12:55.906
Instead, it's just gonna go ahead and
do its job,

195
00:12:55.906 --> 00:13:01.550
ignoring the useless value that we passed
in, that we didn't capture as a parameter.

196
00:13:01.550 --> 00:13:05.157
So point being JavaScript is
very loosey-goosey when it comes

197
00:13:05.157 --> 00:13:08.357
to function arguments,
unlike some other languages,

198
00:13:08.357 --> 00:13:11.214
which will error or complain or
at least warn you or

199
00:13:11.214 --> 00:13:16.290
say something when you've passed in
an unexpected number of arguments.

200
00:13:16.290 --> 00:13:20.652
Now, there are things that you as a
programmer can do within your function to

201
00:13:20.652 --> 00:13:24.950
make sure that anybody calling that
function is using the correct number of

202
00:13:24.950 --> 00:13:25.719
arguments.

203
00:13:27.000 --> 00:13:32.010
But we're gonna leave that for
next steps in the JavaScript journey.

204
00:13:32.010 --> 00:13:36.906
But suffice it to say it's left up to the
coder to handle any mistakes like thiscuz

205
00:13:36.906 --> 00:13:39.650
JavaScript itself is not gonna do it for
you.

206
00:13:42.614 --> 00:13:47.242
So, yes, it's sort of almost like you
pass in no arguments and it's just like,

207
00:13:47.242 --> 00:13:50.800
well, I have no arguments,
to you not having any arguments.

208
00:13:50.800 --> 00:13:54.193
I don't mind, it's fine,
it's loosey-goosey.

