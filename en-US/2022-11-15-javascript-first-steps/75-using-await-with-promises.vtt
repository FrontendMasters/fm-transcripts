WEBVTT

1
00:00:00.056 --> 00:00:04.753
So this is the next thing we need to
wrap our heads around before we can ever

2
00:00:04.753 --> 00:00:08.539
forget our doggo that we've so
desperately want, okay?

3
00:00:08.539 --> 00:00:15.888
So yeah, so a weight tells JavaScript,
okay, don't be Joey.

4
00:00:15.888 --> 00:00:20.829
Don't be just like trying to go wait stop,
like the Spice Girl said, and

5
00:00:20.829 --> 00:00:25.365
wait for my unsynchronized operation
to be done before you go on and

6
00:00:25.365 --> 00:00:27.562
continue trying to run my code.

7
00:00:27.562 --> 00:00:32.084
So in the case of a promise,
what it does is it waits for

8
00:00:32.084 --> 00:00:38.517
the promise to be resolved to the value
that JavaScript is giving us an IOU for

9
00:00:38.517 --> 00:00:43.064
before it goes on and
continues running our program.

10
00:00:44.811 --> 00:00:50.817
So for example, when we call fetch,
we get a promise.

11
00:00:50.817 --> 00:00:56.837
And if we await, we put the word
await before our call to fetch.

12
00:00:56.837 --> 00:01:01.664
We're telling JavaScript, don't just give
me back that pending promise like you just

13
00:01:01.664 --> 00:01:03.499
did when I put it in with no await.

14
00:01:03.499 --> 00:01:09.858
Wait for the promise to be done, and
then give me the value of the promise,

15
00:01:09.858 --> 00:01:14.180
and in this case fetch
returns a response object.

16
00:01:14.180 --> 00:01:19.169
So this is going back to kind of like how
HTTP requests and responses work which is

17
00:01:19.169 --> 00:01:23.048
a little bit out of scope and
sort of more general web concept.

18
00:01:23.048 --> 00:01:26.947
But suffice it to say that
when we try to fetch a URL or

19
00:01:26.947 --> 00:01:31.498
when in my browser,
I just type in frontendmasters.com.

20
00:01:31.498 --> 00:01:36.924
The browser sends a request for
that resource at that location,

21
00:01:36.924 --> 00:01:39.939
and then it receives, hopefully,

22
00:01:39.939 --> 00:01:45.579
a response back with the webpage,
or with the hounds in this case.

23
00:01:45.579 --> 00:01:50.408
And so let's try now,
what happens if we use a weight.

24
00:01:50.408 --> 00:01:56.278
So now, if I use a weight,
I can then get the value returned or

25
00:01:56.278 --> 00:02:00.322
the value that that promise resolves to.

26
00:02:00.322 --> 00:02:04.150
In this case the value of the fetch
call returns a promise but

27
00:02:04.150 --> 00:02:08.208
what I really want is the value
that that promise is an IOU for and

28
00:02:08.208 --> 00:02:13.513
that's what await is gonna grab for me,
and it's going to tell JavaScript stop.

29
00:02:13.513 --> 00:02:18.169
Wait for that promise to resolve, and
then this whole await fetch is going to

30
00:02:18.169 --> 00:02:22.783
evaluate to a response, which I can
capture in my variable response here.

31
00:02:22.783 --> 00:02:23.757
So let's try it out.

32
00:02:25.624 --> 00:02:32.218
Okay, so now, we've actually got
something that looks more meaningful.

33
00:02:32.218 --> 00:02:36.112
It's still not a list of hound, though,
so we'll talk about that in a second.

34
00:02:36.112 --> 00:02:39.200
But now,
what we've got is a response object.

35
00:02:39.200 --> 00:02:44.322
And here, we're starting to see
some things that sound very HTTP.

36
00:02:44.322 --> 00:02:49.539
For example,
we have like a status 200 which I don't

37
00:02:49.539 --> 00:02:55.988
know if y'all remember my little
friend HTTP Cat 200 means okay.

38
00:02:55.988 --> 00:02:59.207
Success, all good.

39
00:02:59.207 --> 00:03:01.497
[LAUGH] So there could be other things,

40
00:03:01.497 --> 00:03:04.650
like 404 is another one
that you might have seen.

41
00:03:06.157 --> 00:03:08.682
Not found.

42
00:03:08.682 --> 00:03:11.975
&gt;&gt; [LAUGH]
&gt;&gt; A little treat for

43
00:03:11.975 --> 00:03:15.692
the cat people, cuz they've been
seriously underserved by my GIFs here.

44
00:03:15.692 --> 00:03:20.360
[LAUGH] So, for example,
it has a status back,

45
00:03:20.360 --> 00:03:24.571
and then it has some other stuff going on.

46
00:03:24.571 --> 00:03:29.496
So this is a response object,
which is JavaScript's representation

47
00:03:29.496 --> 00:03:34.258
of an HTTP response similar to how a HTTP,
sorry, an HTML element.

48
00:03:34.258 --> 00:03:37.436
Object is its representation
of something from the DOM.

49
00:03:39.071 --> 00:03:43.468
And what we really care about
here is in its body property,

50
00:03:43.468 --> 00:03:47.237
the response body,
is what we really care about,

51
00:03:47.237 --> 00:03:51.303
or as the Spice Girls remind us,
slam your body down.

52
00:03:51.303 --> 00:03:54.845
The body is what we really
want to be working with here,

53
00:03:54.845 --> 00:03:57.624
when we're trying to request a resource.

54
00:03:57.624 --> 00:04:00.450
But if we look back at our object, okay,

55
00:04:00.450 --> 00:04:05.368
we see there's a body property, but
it says it's a readable stream.

56
00:04:05.368 --> 00:04:06.119
Why don't realize?

57
00:04:06.119 --> 00:04:09.703
This is a stream of data that,
well, it's apparently readable,

58
00:04:09.703 --> 00:04:11.627
so there must be some way to read it.

59
00:04:11.627 --> 00:04:15.081
So what we need to do is we need to
read the data that's returned that

60
00:04:15.081 --> 00:04:17.681
that's part of this response or
that it's body.

61
00:04:17.681 --> 00:04:19.955
So in other words,
we need to slam the body down.

62
00:04:19.955 --> 00:04:24.923
[LAUGH] And
that's gonna be our next task now

63
00:04:24.923 --> 00:04:29.342
responses have a method called JSON.

64
00:04:29.342 --> 00:04:34.601
Response.JSON is going to,
Read that stream of

65
00:04:34.601 --> 00:04:40.629
bytes that is the body data and
parse it as a JSON object,

66
00:04:40.629 --> 00:04:45.503
which we said is what we
expect at the resource

67
00:04:45.503 --> 00:04:50.528
at this API endpoint
that we're looking for.

68
00:04:50.528 --> 00:04:53.434
So it's JSON object,
JavaScript object notation object.

69
00:04:53.434 --> 00:04:58.614
So this is just a conventional format
that JavaScript knows how to read.

70
00:04:58.614 --> 00:05:02.534
And the way it knows how to read
that is through this dot JSON

71
00:05:02.534 --> 00:05:06.147
property that's built into
response type objects.

72
00:05:07.577 --> 00:05:09.291
So let's try to do this now.

73
00:05:11.611 --> 00:05:15.619
Response.JSON, and
if you have a really, really good eye,

74
00:05:15.619 --> 00:05:20.720
you might be noticing something weird
here, but we can talk about in a second.

75
00:05:20.720 --> 00:05:25.429
So if I call that response.JSON,
gosh, another promise.

76
00:05:25.429 --> 00:05:28.762
And so this is an example of
what we were just talking about.

77
00:05:28.762 --> 00:05:32.119
Another operation that doesn't
involve any network activity.

78
00:05:32.119 --> 00:05:36.431
It doesn't involve me making
a telephone call to the dog API.

79
00:05:36.431 --> 00:05:41.072
It does however take some time for
JavaScript to go reading through all of

80
00:05:41.072 --> 00:05:44.815
those bytes and then making
sense of them as a JSON object.

81
00:05:44.815 --> 00:05:50.469
So .JSON Then on a response object is
also something that gives me an IOU for

82
00:05:50.469 --> 00:05:55.162
a value in asynchronous operation,
that gives me a promise.

83
00:05:55.162 --> 00:05:58.963
But maybe it doesn't take as much time
as let's say talking to the network.

84
00:05:58.963 --> 00:06:00.514
Question?

85
00:06:00.514 --> 00:06:04.343
&gt;&gt; Should we add a weight
in front of response.JSON?

86
00:06:04.343 --> 00:06:07.632
&gt;&gt; Well, gee, golly,
sounds like somebody's got it.

87
00:06:07.632 --> 00:06:08.238
Yeah.

88
00:06:08.238 --> 00:06:13.169
So again, a weight is our way of
telling JavaScript, hey, stop,

89
00:06:13.169 --> 00:06:15.546
wait for my promise to be done and

90
00:06:15.546 --> 00:06:20.584
then give me the value of the promise,
not just the promise itself.

91
00:06:20.584 --> 00:06:25.821
An IOU is useless to me, I can't throw
a ball to play fetch with an IOU.

92
00:06:25.821 --> 00:06:31.610
[LAUGH] I want the dogs, I want
the dogs list I don't want the IOU for

93
00:06:31.610 --> 00:06:36.779
the dogs list, so
yes we are going to use more awaits here.

94
00:06:36.779 --> 00:06:39.892
And it's starting to feel like
maybe this is getting frustrating,

95
00:06:39.892 --> 00:06:43.112
like we have a lot of stuff to work
through here and at a certain point you

96
00:06:43.112 --> 00:06:46.685
might want to give up like Gretchen
Wieners with trying to make fetch happen.

97
00:06:46.685 --> 00:06:50.076
And you might feel like Regina George is
saying stop trying to make this happen.

98
00:06:50.076 --> 00:06:52.238
I mean, girls, but don't give up.

99
00:06:52.238 --> 00:06:53.180
Let's not give up.

100
00:06:53.180 --> 00:06:54.783
We have our friend.

101
00:06:54.783 --> 00:06:57.281
Wait.
So let's try again.

102
00:06:57.281 --> 00:07:01.047
So, now what we've got, we're gonna
we're gonna have to start over,

103
00:07:01.047 --> 00:07:02.860
essentially, but that's okay.

104
00:07:02.860 --> 00:07:08.189
[LAUGH] We're going to
have to await the fetch.

105
00:07:08.189 --> 00:07:16.580
And then, await the response.json
in order to actually get our body.

106
00:07:16.580 --> 00:07:21.821
Finally, we will slam the body down,
so let's try this again.

107
00:07:21.821 --> 00:07:26.382
And, I'm just gonna reload here.

108
00:07:26.382 --> 00:07:29.025
Okay, so
now I'm gonna execute these separately.

109
00:07:29.025 --> 00:07:32.183
So, we're doing this the same time,
we've got response is a weight fetch.

110
00:07:32.183 --> 00:07:38.533
So response is a response object,
and then I'm going to call .JSON.

111
00:07:38.533 --> 00:07:44.082
Wait that excellent, excellent
detective work, folks in the chat.

112
00:07:44.082 --> 00:07:49.351
And then I can capture that
value as a variable like body.

113
00:07:49.351 --> 00:07:53.047
So now, okay, now, body is this object,

114
00:07:53.047 --> 00:07:59.004
that is actually what we expected,
which is what our browser found,

115
00:07:59.004 --> 00:08:03.647
when we went to that URL and
actually has our dog data.

116
00:08:03.647 --> 00:08:07.606
Finally, that is so fetch.

117
00:08:08.786 --> 00:08:12.719
Help you follow folks we're saving
grace because anyway I couldn't resist

118
00:08:12.719 --> 00:08:13.341
the fetch.

119
00:08:13.341 --> 00:08:15.257
So now we have some data.

120
00:08:15.257 --> 00:08:21.982
Success, hooray, fulfilled,
resolved, finally awaited.

121
00:08:21.982 --> 00:08:24.095
But now we have to do something with it.

122
00:08:24.095 --> 00:08:30.678
So, [LAUGH] our work has just begun, but
we got the data at least, all right?

123
00:08:30.678 --> 00:08:34.377
Let me pause here cuz this
is a lot of a waiting.

124
00:08:34.377 --> 00:08:41.618
[LAUGH] There's one tiny,
ginormous can of worms.

125
00:08:41.618 --> 00:08:46.573
I want to not open, but let you know is
out there as a can of worms in JavaScript.

126
00:08:46.573 --> 00:08:47.465
Yes, question.

127
00:08:47.465 --> 00:08:50.350
&gt;&gt; What can we do when our
fetch request throws an error?

128
00:08:50.350 --> 00:08:55.242
&gt;&gt; JavaScript does also give us tools for
being able to look out for

129
00:08:55.242 --> 00:08:58.673
the possibility that
we might get an error.

130
00:08:58.673 --> 00:09:02.686
And any time that we're fetching
something from the internet,

131
00:09:02.686 --> 00:09:07.216
it's possible that the website is down
that dog API has gone offline, or

132
00:09:07.216 --> 00:09:10.129
that they changed how
their URL system works.

133
00:09:10.129 --> 00:09:14.035
And the URL that I thought was gonna work
doesn't return what I thought it would

134
00:09:14.035 --> 00:09:16.833
anymore, or
any number of other things could go wrong.

135
00:09:16.833 --> 00:09:19.079
A shark could have chewed
through the cables.

136
00:09:19.079 --> 00:09:24.798
So we do wanna be aware of the fact
that something could go wrong here.

137
00:09:24.798 --> 00:09:28.108
And so far we've been writing very
optimistic code that assumes that

138
00:09:28.108 --> 00:09:29.600
everything's gonna be fine.

139
00:09:29.600 --> 00:09:34.631
So a little bit later, we're gonna
be talking about how we can handle

140
00:09:34.631 --> 00:09:39.691
errors in JavaScript, as it's also
called how we can catch errors.

141
00:09:39.691 --> 00:09:44.464
So there's a construct called try
catch that we're gonna look at

142
00:09:44.464 --> 00:09:48.213
a little bit later that is
gonna allow us to do this.

143
00:09:48.213 --> 00:09:51.458
&gt;&gt; What happens if we just use fetch?

144
00:09:51.458 --> 00:09:53.499
Do we just never get an answer?

145
00:09:53.499 --> 00:09:58.991
&gt;&gt; What happens if we just use Fetch,
do you mean like for

146
00:09:58.991 --> 00:10:04.620
example if we do like let,
new response equals fetch,

147
00:10:04.620 --> 00:10:08.521
&gt;&gt; No, no, maybe do the fetch the dog.

148
00:10:08.521 --> 00:10:09.994
&gt;&gt; Yeah, sure right.

149
00:10:09.994 --> 00:10:12.839
&gt;&gt; It's running on console, right?

150
00:10:12.839 --> 00:10:15.045
And there's a promise pending.

151
00:10:15.045 --> 00:10:16.650
&gt;&gt; Uh-huh.

152
00:10:16.650 --> 00:10:19.218
And then what do we do?

153
00:10:19.218 --> 00:10:21.095
How do we talk to that promise anymore?

154
00:10:21.095 --> 00:10:22.282
How do we,
&gt;&gt; It's just never gonna give

155
00:10:22.282 --> 00:10:22.859
us an answer.

156
00:10:22.859 --> 00:10:24.409
We just wait forever?

157
00:10:24.409 --> 00:10:26.849
&gt;&gt; Is it just gonna be pending forever?

158
00:10:26.849 --> 00:10:31.254
So, what's happening here,
is that since we didn't like

159
00:10:31.254 --> 00:10:35.938
capture this value at all,
we didn't assign it to a variable.

160
00:10:35.938 --> 00:10:41.960
We didn't like assign it to a property
of an object or something like that,

161
00:10:41.960 --> 00:10:48.670
like we don't have any way of pointing at
the promise that this fetch evaluated to.

162
00:10:48.670 --> 00:10:52.838
So what happens in our dev
tools in our console here is

163
00:10:52.838 --> 00:10:57.403
that JavaScript evaluated this code,
this line fetch.

164
00:10:57.403 --> 00:11:02.303
It saw that it evaluated to a promise and
at the time that evaluated it,

165
00:11:02.303 --> 00:11:07.471
the promise was in state pending, and
it gave me that back in the console.

166
00:11:07.471 --> 00:11:11.347
&gt;&gt; Now in the background,
somewhere that promise has gone ahead, and

167
00:11:11.347 --> 00:11:13.864
its lifetime is like
lived a million years.

168
00:11:13.864 --> 00:11:18.114
And maybe isn't a different state owl,
maybe or maybe not, we don't know, but

169
00:11:18.114 --> 00:11:20.612
now we don't really have
any way to talk to it and

170
00:11:20.612 --> 00:11:23.005
ask it hey promise, what's your state now?

171
00:11:23.005 --> 00:11:25.853
However, there is a way.

172
00:11:25.853 --> 00:11:29.027
So what we've been talking about is await,
because

173
00:11:29.027 --> 00:11:33.513
wait I think is the easiest way for
us to say hey, JavaScript stop, pretend,

174
00:11:33.513 --> 00:11:38.294
that this asynchronous operation, that
you're gonna go and do some time later.

175
00:11:38.294 --> 00:11:42.542
Pretend that it's synchronous, and
that we actually have to wait for

176
00:11:42.542 --> 00:11:45.575
it to be done before we keep
going on with our code.

177
00:11:45.575 --> 00:11:50.239
There is another way that
we can tell JavaScript,

178
00:11:50.239 --> 00:11:54.237
hey JavaScript when this promise is done,

179
00:11:54.237 --> 00:11:59.679
when it has fulfilled or
rejected, do something with it,

180
00:11:59.679 --> 00:12:03.478
and that is the then method on a promise.

181
00:12:03.478 --> 00:12:07.744
So we're not really gonna practice,
like working with this,

182
00:12:07.744 --> 00:12:11.778
because await I think makes it
easier to do a similar thing.

183
00:12:11.778 --> 00:12:18.237
So then was the earlier way of dealing
with promises where what happens is So

184
00:12:18.237 --> 00:12:22.759
we say, promise.then, and
we give it a callback.

185
00:12:22.759 --> 00:12:27.259
And usually,
the way the callback works is it takes in

186
00:12:27.259 --> 00:12:31.462
whatever the value that
the promise resolved to.

187
00:12:31.462 --> 00:12:35.873
And sorry, I'm saying callback because
we're writing a small anonymous function

188
00:12:35.873 --> 00:12:37.994
that's gonna execute some time later.

189
00:12:37.994 --> 00:12:42.302
We're telling JavaScript take
this function and call it back to

190
00:12:42.302 --> 00:12:47.167
me whenever this thing happens,
same as we did with our event handlers,

191
00:12:47.167 --> 00:12:50.218
where we also passed in
a callback function.

192
00:12:50.218 --> 00:12:56.346
So we'll say like something like
console.log value, for example.

193
00:12:56.346 --> 00:13:01.762
Now what should happen let's find
out is that JavaScript is gonna

194
00:13:01.762 --> 00:13:07.092
wait until it sees that this
promise has resolved or fulfilled.

195
00:13:07.092 --> 00:13:11.340
And then, it's gonna take whatever
value it fulfilled to pass it in

196
00:13:11.340 --> 00:13:15.885
to the little anonymous function I've
declared here with my arrow, and

197
00:13:15.885 --> 00:13:20.000
then do whatever I set to do,
which in this case was log the value.

198
00:13:20.000 --> 00:13:21.510
So let's try.

199
00:13:21.510 --> 00:13:26.122
So now, if we see this whole
thing resolved to a promise, and

200
00:13:26.122 --> 00:13:30.837
at the time that it evaluated
in the console, it was pending.

201
00:13:30.837 --> 00:13:34.698
But then a few instants later JavaScript,

202
00:13:34.698 --> 00:13:39.097
got the resolution got
the fulfilled value, and

203
00:13:39.097 --> 00:13:44.580
then called my callback which
console logged the response.

204
00:13:44.580 --> 00:13:49.019
So, there is another way to
work with these promises.

205
00:13:50.720 --> 00:13:52.145
Which is the then method.

206
00:13:52.145 --> 00:13:58.864
But if you're like me, it's maybe becomes
a little bit tricky to think about like,

207
00:13:58.864 --> 00:14:03.043
okay, give me a function
that I'm gonna wait free.

208
00:14:03.043 --> 00:14:05.985
I'm gonna give you a function you're
gonna wait to call it until you're

209
00:14:05.985 --> 00:14:06.961
done with the promise.

210
00:14:06.961 --> 00:14:11.427
Whereas if we use a weight, we can just
sort of pretend like that promise is just

211
00:14:11.427 --> 00:14:15.844
a regular function call that's gonna
produce a value, if that makes sense.

212
00:14:17.684 --> 00:14:22.213
Sorry, I should say, we can pretend that
the asynchronous operation like fetch,

213
00:14:22.213 --> 00:14:26.871
which returns a promise, is just a regular
function call that returns a value instead

214
00:14:26.871 --> 00:14:28.052
of an asynchronous.

215
00:14:28.052 --> 00:14:29.640
I owe you of a value.

216
00:14:29.640 --> 00:14:34.537
So, these are both options, and
you can read all about promises, and

217
00:14:34.537 --> 00:14:35.950
then in our BFF MDM.

218
00:14:38.281 --> 00:14:44.533
&gt;&gt; Could I write await in front of
any function, I want for to wait?

219
00:14:44.533 --> 00:14:47.477
&gt;&gt; Can you like, wait for, for example?

220
00:14:47.477 --> 00:14:48.788
&gt;&gt; Yes, you can't.

221
00:14:48.788 --> 00:14:49.484
&gt;&gt; You sure can?

222
00:14:49.484 --> 00:14:50.261
&gt;&gt; Okay.

223
00:14:50.261 --> 00:14:55.589
&gt;&gt; But, as we're gonna see in a second,
you can't write await just anywhere.

224
00:14:55.589 --> 00:14:57.023
I can write it in the console.

225
00:14:57.023 --> 00:15:01.585
I can write it in a few other places, but
I can't just throw away it around, but

226
00:15:01.585 --> 00:15:04.025
we're gonna talk about that in a second.

