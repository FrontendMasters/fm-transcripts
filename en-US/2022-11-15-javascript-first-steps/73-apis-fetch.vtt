WEBVTT

1
00:00:00.220 --> 00:00:03.760
We said that there are lots of things
that take a lot of time in JavaScript.

2
00:00:03.760 --> 00:00:08.226
One of them that is
particularly relevant and

3
00:00:08.226 --> 00:00:13.170
punny for
our dog mission today is fetching data.

4
00:00:13.170 --> 00:00:18.880
And like this, little dogs,
we need dog or whatever it is.

5
00:00:18.880 --> 00:00:22.482
It is using a computer
to do what it wants.

6
00:00:22.482 --> 00:00:23.547
And that's what we're gonna do.

7
00:00:23.547 --> 00:00:24.925
We are gonna use the computer,

8
00:00:24.925 --> 00:00:29.320
we’re gonna tell JavaScript to make
the browser fetch the data that we need.

9
00:00:29.320 --> 00:00:33.110
So let’s talk about how we
get data from the Internet.

10
00:00:33.110 --> 00:00:36.789
[LAUGH] URLs, we’ve seen them,
we’ve used them,

11
00:00:36.789 --> 00:00:41.210
I've told you to go to them
multiple times, so far.

12
00:00:41.210 --> 00:00:44.000
They point to certain
resources on the web.

13
00:00:44.000 --> 00:00:49.040
So for example this one points to,
it's cut off, but

14
00:00:49.040 --> 00:00:54.307
it points to a JPEG file
an image of a bluetick dog breed.

15
00:00:54.307 --> 00:00:59.337
I don't know that breed, but
apparently it looks like that it's cute,

16
00:00:59.337 --> 00:01:04.130
I think, anyway, so images or,
web pages or whatever we know URLs.

17
00:01:04.130 --> 00:01:08.936
And when we're writing code,
especially JavaScript

18
00:01:08.936 --> 00:01:13.748
web development code,
we also work with a lot of URLs.

19
00:01:13.748 --> 00:01:18.859
That are pointed to not maybe like
a webpage or an image or something that we

20
00:01:18.859 --> 00:01:24.809
care about, but even just data, just some
data that we care about some information.

21
00:01:24.809 --> 00:01:30.188
And API's or
application programming interfaces,

22
00:01:30.188 --> 00:01:37.770
are services that are exposing
a whole bunch of data at certain URLs.

23
00:01:37.770 --> 00:01:42.914
So, in web development, in JavaScript
coding out there in the world.

24
00:01:42.914 --> 00:01:49.075
We end up doing a lot of finding data
that we care about, or that we need for

25
00:01:49.075 --> 00:01:55.350
our program to work, from somewhere
else out there on the web like an API.

26
00:01:56.360 --> 00:02:00.799
So for example,
the very fun dog.ceo website has

27
00:02:00.799 --> 00:02:05.660
a dog API that not only serves
up cute dog pictures, but

28
00:02:05.660 --> 00:02:11.600
also serves up some information about for
example breeds.

29
00:02:11.600 --> 00:02:13.930
In fact, that's where I got
all of that information for

30
00:02:13.930 --> 00:02:15.129
that big long breeds array.

31
00:02:16.250 --> 00:02:18.218
And one of the things that we can do,

32
00:02:18.218 --> 00:02:21.701
APIs usually have a certain
structure that the API developer.

33
00:02:21.701 --> 00:02:25.710
Or the company, or what have you that
maintains the API will document and

34
00:02:25.710 --> 00:02:29.280
they'll tell you what
the structure of their URLs is.

35
00:02:29.280 --> 00:02:35.363
But in the case of dog ceo,
I can find data that I care about,

36
00:02:35.363 --> 00:02:41.205
like let's say a list of all
of the types of hound breeds,

37
00:02:41.205 --> 00:02:47.574
by going to the URL,
dog.ceo/api/breed/hound/list.

38
00:02:47.574 --> 00:02:52.705
And that is what's called
often an end point of an API.

39
00:02:52.705 --> 00:02:57.761
Meaning a URL within the API which is
a whole big set of different URLs,

40
00:02:57.761 --> 00:03:02.475
an endpoint is one of those URLs
that gives me a particular usually

41
00:03:02.475 --> 00:03:04.950
it's called a resource.

42
00:03:04.950 --> 00:03:09.426
In this case the resource
that I care about is a little

43
00:03:09.426 --> 00:03:14.211
JavaScript object,
that has some information about,

44
00:03:14.211 --> 00:03:18.810
in this case, a list, or
an array of types of hounds.

45
00:03:20.890 --> 00:03:25.125
So, and if we want to check in our
browser, I mean in our browser,

46
00:03:25.125 --> 00:03:29.028
we're used to going to web pages and
URLs all the time.

47
00:03:29.028 --> 00:03:30.700
That's not what I meant to copy.

48
00:03:33.030 --> 00:03:40.399
We can go to an API endpoint and
see what data that API returns.

49
00:03:40.399 --> 00:03:44.711
And depending on what browser you're
in this might look different.

50
00:03:44.711 --> 00:03:50.584
But if you can see here, when I enter
dog.ceo/api/breeds/hounds/list,

51
00:03:50.584 --> 00:03:54.100
Firefox displays
the information in this way.

52
00:03:54.100 --> 00:03:59.810
It shows me that the resource at
this endpoint is a JSON object,

53
00:03:59.810 --> 00:04:04.730
JSON stands for
JavaScript Object Notation.

54
00:04:04.730 --> 00:04:07.975
It's basically just a convention for
how we can represent objects that are very

55
00:04:07.975 --> 00:04:10.650
similar to the objects we've been
working with this whole time.

56
00:04:11.930 --> 00:04:16.564
So that we can kind of save
that object as a piece of

57
00:04:16.564 --> 00:04:20.531
text that I can then send across the wire.

58
00:04:20.531 --> 00:04:25.614
And my browser knows how to read that,
and parse it out and see that we've got

59
00:04:25.614 --> 00:04:30.870
an array in our message property that
has seven different breed strings in it.

60
00:04:32.460 --> 00:04:36.748
So suffice it to say, that so far we've
been working with data that we either

61
00:04:36.748 --> 00:04:40.470
hard coded,
we wrote it ourselves in our program.

62
00:04:40.470 --> 00:04:44.839
Or maybe we got it as the output
of some built in function,

63
00:04:44.839 --> 00:04:49.680
like document.queryselector or
something like that.

64
00:04:49.680 --> 00:04:53.834
But sometimes we need data from elsewhere,
on the web, and

65
00:04:53.834 --> 00:04:58.171
we can do that by accessing these
URLs that are API endpoints.

66
00:04:58.171 --> 00:05:02.322
Cool, so [COUGH].

67
00:05:02.322 --> 00:05:07.611
&gt;&gt; Could you do like a map or a filter
from an array to filter it further or.

68
00:05:07.611 --> 00:05:10.611
&gt;&gt; So, once we've got a resource
from an API endpoint,

69
00:05:10.611 --> 00:05:15.092
once you've got a chunk of data, in this
case, an object that looks like this.

70
00:05:15.092 --> 00:05:18.270
And we have this array
in our message property,

71
00:05:18.270 --> 00:05:23.044
once we've got it into our program,
we can do whatever we want with it.

72
00:05:23.044 --> 00:05:25.909
We can work with it,
we can assign it to a variable,

73
00:05:25.909 --> 00:05:30.190
we can work with the same way we've
been working with our hard coded arrays.

74
00:05:30.190 --> 00:05:34.165
Or with our arrays that are returned
from our built in functions and method.

75
00:05:34.165 --> 00:05:36.904
So, once it's in our JavaScript code,

76
00:05:36.904 --> 00:05:40.369
I should say once it's in
our JavaScript program,

77
00:05:40.369 --> 00:05:45.945
once it's been dynamically pulled in by
JavaScript, we can do whatever we want.

78
00:05:45.945 --> 00:05:50.073
We can filter it, we can map it,
we can push to it, we can pop from it,

79
00:05:50.073 --> 00:05:51.730
we can do whatever we want.

80
00:05:51.730 --> 00:05:53.590
If it's an array,
we can push and pop from it.

81
00:05:53.590 --> 00:05:56.728
Sometimes it's an object,
so we can drill down into,

82
00:05:56.728 --> 00:05:59.670
property.property.property.property.

83
00:05:59.670 --> 00:06:03.256
We can do whatever we want once we have it

84
00:06:03.256 --> 00:06:07.720
as an object in our running
JavaScript program.

85
00:06:09.450 --> 00:06:11.320
And that is exactly what we need to do.

86
00:06:11.320 --> 00:06:15.708
We need to tell JavaScript to go get some
data and pull it into our program, so

87
00:06:15.708 --> 00:06:17.160
that we can work with it.

88
00:06:19.240 --> 00:06:25.135
And the way that we can do that
is through a built in function,

89
00:06:25.135 --> 00:06:28.800
or it's often called an API itself.

90
00:06:28.800 --> 00:06:31.600
API is one of these very confusingly,

91
00:06:31.600 --> 00:06:36.424
one of these terms that's used to
mean a lot of different things.

92
00:06:36.424 --> 00:06:40.343
Or we say it's overloaded, the same way
that our plus operator is used to do a lot

93
00:06:40.343 --> 00:06:43.696
of different things, it's overloaded,
so is the term API [LAUGH].

94
00:06:43.696 --> 00:06:46.940
But in this case, the Fetch API
is also something you might hear.

95
00:06:46.940 --> 00:06:51.484
But suffice it to say,
let's say the fetch built in function,

96
00:06:51.484 --> 00:06:56.960
lets us load data from somewhere
on the internet using JavaScript.

97
00:06:56.960 --> 00:07:01.340
And what we very commonly do with
fetch is we load data from API's.

98
00:07:01.340 --> 00:07:07.200
We load data we care about, for example,
all of the hounds, from an API endpoint.

99
00:07:07.200 --> 00:07:09.737
We do this a lot as JavaScript developers,

100
00:07:09.737 --> 00:07:13.410
and not only API data, but
other stuff we can get to.

101
00:07:13.410 --> 00:07:17.051
Like we could get a whole HTML page and
work with it for example.

102
00:07:17.051 --> 00:07:21.420
But in this case we're gonna focus on
pulling objects off of the interwebs.

