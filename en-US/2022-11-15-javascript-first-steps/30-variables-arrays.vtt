WEBVTT

1
00:00:00.370 --> 00:00:03.885
Couple of good questions came up
that I wanna address around arrays.

2
00:00:08.138 --> 00:00:12.558
When we,
Declare variables pointing to arrays,

3
00:00:15.468 --> 00:00:21.348
We said that JavaScript creates, conjures
up, let's say, an array object and

4
00:00:21.348 --> 00:00:27.152
then does whatever we tell it in terms of
what should be pointing to that object.

5
00:00:27.152 --> 00:00:32.916
So let's look at an example and
think through what's gonna happen.

6
00:00:32.916 --> 00:00:37.676
So let's say I declare a variable called
array1 that's an array with 1, 2 and

7
00:00:37.676 --> 00:00:38.658
3 in it, yeah?

8
00:00:38.658 --> 00:00:41.966
Okay, so the value of array1, hopefully,

9
00:00:41.966 --> 00:00:45.805
unsurprising, is gonna be this array 1,
2, 3.

10
00:00:45.805 --> 00:00:51.788
Now, what happens if I declare a new
variable array2 and assign it to array1?

11
00:00:51.788 --> 00:00:56.510
What do you think the value of array2
is gonna be after I run this line?

12
00:00:59.892 --> 00:01:03.372
The value of array2,
we're gonna guess it's gonna be-

13
00:01:03.372 --> 00:01:04.955
&gt;&gt; The same array, the one, two, three.

14
00:01:04.955 --> 00:01:05.787
&gt;&gt; An array 1, 2, 3, yeah.
Okay, great.

15
00:01:05.787 --> 00:01:11.138
Now where things get tricky is
what happens now if I change or

16
00:01:11.138 --> 00:01:16.062
mutate array1,
let's say I put at array1 index 1,

17
00:01:16.062 --> 00:01:19.486
right now it's 2, as we expect, but

18
00:01:19.486 --> 00:01:25.181
let's say that I change whatever
is at index 1 and I make it 4.

19
00:01:25.181 --> 00:01:30.927
So now what do we expect
array1 is gonna be?

20
00:01:30.927 --> 00:01:32.195
&gt;&gt; One, four, three.

21
00:01:32.195 --> 00:01:32.963
&gt;&gt; 1, 4, 3.

22
00:01:32.963 --> 00:01:39.736
Now the question is what
is array2 gonna be?

23
00:01:39.736 --> 00:01:42.575
What do you think?

24
00:01:42.575 --> 00:01:46.055
Guesses?
1, 2, 3, so maybe, which we saw before,

25
00:01:46.055 --> 00:01:49.100
we saw earlier that array2 was 1, 2, 3.

26
00:01:49.100 --> 00:01:51.022
So maybe it's gonna still be that.

27
00:01:51.022 --> 00:01:52.325
Any other guesses?

28
00:01:53.716 --> 00:01:54.546
Let's find out.

29
00:01:57.871 --> 00:02:02.140
Array2 has changed also.

30
00:02:03.260 --> 00:02:08.966
Array2 is 1, 4, 3, not 1, 2,
3 as it was when we asked earlier.

31
00:02:08.966 --> 00:02:12.246
So what is going on here?

32
00:02:12.246 --> 00:02:13.472
Let's go to the whiteboard.

33
00:02:16.142 --> 00:02:25.273
So when we said let array1 equal array 1,
2, 3,

34
00:02:25.273 --> 00:02:31.093
JavaScript is gonna make
an array1 variable.

35
00:02:32.782 --> 00:02:35.994
It's gonna conjure up an array.

36
00:02:37.209 --> 00:02:41.120
And for now I'm just gonna put
some values in it with 1, 2, 3.

37
00:02:41.120 --> 00:02:42.810
This is shorthand for
all that stuff that we drew out earlier.

38
00:02:47.286 --> 00:02:48.630
Let me go back.

39
00:02:48.630 --> 00:02:49.710
Let's not do shorthand.

40
00:02:49.710 --> 00:02:50.987
Let's really talk about it.

41
00:02:50.987 --> 00:02:53.674
So JavaScript is gonna declare variables,

42
00:02:53.674 --> 00:02:58.549
it's gonna create a variable array1 and
then it's gonna conjure up an array.

43
00:02:58.549 --> 00:03:03.441
And that array is gonna have
certain indices, 0, 1, 2.

44
00:03:03.441 --> 00:03:08.595
And it's going to put
whatever we said to put

45
00:03:08.595 --> 00:03:13.622
in there, like the numbers 1, 2 and 3.

46
00:03:13.622 --> 00:03:19.224
Sorry, It's gonna

47
00:03:19.224 --> 00:03:24.120
point array1 at that array.

48
00:03:25.620 --> 00:03:27.853
So far so good.

49
00:03:27.853 --> 00:03:31.722
Now, when we say let array2 equal array1,
what's gonna happen?

50
00:03:35.520 --> 00:03:39.170
JavaScript is gonna create
a new variable array2.

51
00:03:39.170 --> 00:03:44.279
And then we're gonna say equals array1.

52
00:03:44.279 --> 00:03:48.952
Now what we said that happens after that
assignment operator, that equal sign, is

53
00:03:48.952 --> 00:03:53.644
that JavaScript is going to evaluate the
expression to the right of the equal sign.

54
00:03:53.644 --> 00:03:57.974
So whatever we put after the equal sign,
JavaScript is gonna evaluate it and

55
00:03:57.974 --> 00:03:59.744
figure out what that value is.

56
00:03:59.744 --> 00:04:03.178
And in this case, it's gonna say,
array2 equals array1.

57
00:04:03.178 --> 00:04:06.336
All right, let me go find array1, okay?

58
00:04:06.336 --> 00:04:11.376
It's a variable here,
it points to this array.

59
00:04:16.350 --> 00:04:21.586
And let me now create a new association,
a new link,

60
00:04:21.586 --> 00:04:27.655
a new pointer from array2 to
whatever the value of array1 is

61
00:04:27.655 --> 00:04:32.657
at this moment that I am
assigning this variable.

62
00:04:32.657 --> 00:04:37.541
So this means now that we
have two variables pointing

63
00:04:37.541 --> 00:04:39.873
at the same array value.

64
00:04:44.875 --> 00:04:49.745
Since arrays are mutable values,
they can be changed.

65
00:04:51.055 --> 00:04:55.120
So that means when I now say array1,

66
00:04:55.120 --> 00:05:00.769
brackets 1 equals 4,
what is JavaScript doing?

67
00:05:00.769 --> 00:05:09.176
Well, it's going in, it's changing what is
at array index one and it is making it,

68
00:05:13.594 --> 00:05:17.144
Now be the number four
instead of the number two.

69
00:05:17.144 --> 00:05:21.830
What happened though is that
I manipulated that same

70
00:05:21.830 --> 00:05:26.526
array that both of these
variables are pointing at.

71
00:05:26.526 --> 00:05:27.599
So now array2,

72
00:05:27.599 --> 00:05:32.981
we haven't done anything to this arrow
here that links array2 to this same array.

73
00:05:32.981 --> 00:05:36.548
That's still there,
we didn't change that at all,

74
00:05:36.548 --> 00:05:41.080
it's still pointing to the same
array that we have now messed with.

75
00:05:42.350 --> 00:05:45.190
And this is where mutable
data gets tricky, right?

76
00:05:45.190 --> 00:05:50.143
So this is part of the reason why
working with immutable data can

77
00:05:50.143 --> 00:05:55.283
be less dangerous, [LAUGH] let's say,
because in this case maybe

78
00:05:55.283 --> 00:06:00.063
I meant to only change the array
that array1 is pointing to.

79
00:06:00.063 --> 00:06:03.973
So maybe what I should have done is
actually created a whole new array for

80
00:06:03.973 --> 00:06:05.871
array2 that had the same values.

81
00:06:05.871 --> 00:06:08.150
And there are a few ways in
JavaScript we can do that.

82
00:06:08.150 --> 00:06:13.091
We're not gonna have time to talk about
the details, but suffice it to say that in

83
00:06:13.091 --> 00:06:18.249
this case, since I pointed both variables
at the same array, whenever I change it,

84
00:06:18.249 --> 00:06:23.286
that means that whatever the value is of
both of those variables is also changing.

85
00:06:23.286 --> 00:06:26.050
Now, interestingly, what do you think
happens if I use const instead of let?

86
00:06:27.306 --> 00:06:30.539
Do you think anything changes?

87
00:06:32.240 --> 00:06:33.634
I'm seeing some shaking heads.

88
00:06:33.634 --> 00:06:34.273
No, exactly.

89
00:06:34.273 --> 00:06:40.810
So remember all const does is it changes
whether or not we can change these arrows.

90
00:06:41.900 --> 00:06:45.151
So if I had declared const array1 and
const array2,

91
00:06:45.151 --> 00:06:48.125
that means I can never
reassign those pointers.

92
00:06:48.125 --> 00:06:50.555
I can never change what
those arrows point to but

93
00:06:50.555 --> 00:06:52.620
they still point to the same object, and

94
00:06:52.620 --> 00:06:56.417
I can mutate that object because it's
an array, and arrays are mutable.

95
00:06:56.417 --> 00:06:59.644
So even if I had used const,
the same thing would be true.

96
00:07:02.040 --> 00:07:07.925
Cool, awesome,
awesome question asked in the classroom.

97
00:07:07.925 --> 00:07:10.795
We also had another question asked
which was about const and let.

98
00:07:10.795 --> 00:07:16.980
Too, would you mind re asking, you had
asked me a question around const and let.

99
00:07:16.980 --> 00:07:19.636
&gt;&gt; I've always been told to use const for

100
00:07:19.636 --> 00:07:24.163
arrays,
&gt;&gt; So, should we always use const for

101
00:07:24.163 --> 00:07:25.910
arrays?

102
00:07:25.910 --> 00:07:29.119
The thing about const and
let affects the arrows,

103
00:07:29.119 --> 00:07:32.010
it doesn't affect what they point to.

104
00:07:32.010 --> 00:07:34.913
So whether it's a string or
whether it's an array or whatever,

105
00:07:34.913 --> 00:07:36.570
the rules are the same.

106
00:07:36.570 --> 00:07:39.554
I would not say that there is a rule
that if you're working with arrays,

107
00:07:39.554 --> 00:07:41.280
you have to use const, not true.

108
00:07:41.280 --> 00:07:45.752
Sometimes you might want
a variable that you need to

109
00:07:45.752 --> 00:07:50.232
change what it points at
throughout your program.

110
00:07:50.232 --> 00:07:54.500
But I would say that in general,
with let versus const, unless you have

111
00:07:54.500 --> 00:07:59.481
a good reason to expect that you're gonna
need to change one of these arrows later,

112
00:07:59.481 --> 00:08:04.463
that you're gonna need to maybe, based on
decisions you have to make in your code,

113
00:08:04.463 --> 00:08:08.480
which we're gonna look at later
when we talk about conditionals.

114
00:08:08.480 --> 00:08:12.901
That maybe at some point you might
need to change what array1 points at,

115
00:08:12.901 --> 00:08:16.670
unless you have a good reason
to expect that you're gonna need

116
00:08:16.670 --> 00:08:20.457
to change those arrows,
don't use let, use const instead.

117
00:08:20.457 --> 00:08:24.370
So I would say default to const
unless you have a good reason,

118
00:08:24.370 --> 00:08:26.075
in which case let is fine.

119
00:08:26.075 --> 00:08:30.699
But what the values are that you're
assigning those variables to don't

120
00:08:30.699 --> 00:08:35.194
really matter, let and const affect
the variables and their arrows.

121
00:08:35.194 --> 00:08:40.162
They don't affect the different types of
values you're working with cuz as we said,

122
00:08:40.162 --> 00:08:43.405
JavaScript does not have
a concept of a variable only for

123
00:08:43.405 --> 00:08:48.177
a particular type of value as some other
programming languages do in JavaScript.

124
00:08:48.177 --> 00:08:53.710
It doesn't care where those arrows
are pointing to, what type of thing it is.

125
00:08:53.710 --> 00:08:55.202
What it does care about is whether or

126
00:08:55.202 --> 00:08:57.930
not you're gonna need to
change those arrows later.

127
00:08:57.930 --> 00:09:01.965
So unless you expect you will use
const and make those arrows permanent,

128
00:09:01.965 --> 00:09:03.233
make them immutable.

