WEBVTT

1
00:00:00.000 --> 00:00:02.878
Do these do the same thing?

2
00:00:05.320 --> 00:00:09.544
And now, these are a couple of things
that we've seen so far, push and concat.

3
00:00:09.544 --> 00:00:14.211
So let's take a couple of minutes and
think about it, and

4
00:00:14.211 --> 00:00:17.530
then we'll come back and talk about it.

5
00:00:17.530 --> 00:00:19.749
And feel free to try it
out in your console.

6
00:00:23.548 --> 00:00:28.359
In this first example where we're
pushing something onto the array,

7
00:00:28.359 --> 00:00:32.932
we kind of saw this before, so
I'm maybe not gonna type it all out.

8
00:00:32.932 --> 00:00:38.492
But, Let's find out, what is the value of

9
00:00:38.492 --> 00:00:44.683
numbers1 after I push(4) onto the numbers
array that previously had 1, 2, 3?

10
00:00:44.683 --> 00:00:49.600
What does the value of
numbers1 then look like, yeah?

11
00:00:49.600 --> 00:00:51.624
&gt;&gt; It's an array of 1, 2, 3, 4.

12
00:00:51.624 --> 00:00:55.914
&gt;&gt; Okay, so as expected before,
we saw examples of this, right?

13
00:00:55.914 --> 00:00:59.323
When I call numbers1.push(4),

14
00:00:59.323 --> 00:01:05.293
it put something into the array
that I had with numbers1, right?

15
00:01:05.293 --> 00:01:10.493
So numbers1 now is different
than it was on the first line,

16
00:01:10.493 --> 00:01:15.287
numbers1 now has 4 in it,
also, so it has 4 things.

17
00:01:15.287 --> 00:01:20.033
And result1,
did folks look at the value of result1?

18
00:01:20.033 --> 00:01:21.743
What did we say push returns?

19
00:01:24.667 --> 00:01:28.045
Yeah, so in this case, it returns 4,
which is a little confusing,

20
00:01:28.045 --> 00:01:30.516
cuz it's also the number
that we pushed in there.

21
00:01:30.516 --> 00:01:34.082
But it returns the new length
of the array after it did

22
00:01:34.082 --> 00:01:38.390
the change that you asked for,
after it added something to it.

23
00:01:38.390 --> 00:01:42.570
Okay, now numbers2, this is a little
bit different, so let's talk about it.

24
00:01:47.121 --> 00:01:52.101
All right, so I've got my numbers2 array,
let me just declare this.

25
00:01:52.101 --> 00:01:54.320
So we said concat does what?

26
00:01:56.020 --> 00:01:59.634
Concat, we said it
concatenates two arrays, or

27
00:01:59.634 --> 00:02:02.110
it kind of merges them together.

28
00:02:02.110 --> 00:02:06.858
Okay, so now, if I run this concat,
the question is,

29
00:02:06.858 --> 00:02:10.589
what is the value of result2 gonna be now?

30
00:02:14.410 --> 00:02:19.739
So push returned the new length of
the array, what does concat return?

31
00:02:21.160 --> 00:02:24.403
Let's try it out, let's ask for result2.

32
00:02:24.403 --> 00:02:28.499
So result2 gave us this array
with four things in it,

33
00:02:28.499 --> 00:02:31.240
which is what we were trying to get.

34
00:02:31.240 --> 00:02:34.141
Question is, what happened to numbers2?

35
00:02:34.141 --> 00:02:37.621
Was numbers2 changed or unchanged?

36
00:02:37.621 --> 00:02:38.330
&gt;&gt; Unchanged.

37
00:02:38.330 --> 00:02:43.610
&gt;&gt; Unchanged, so if I ask for numbers2,
it still is just 1, 2, and 3.

38
00:02:45.640 --> 00:02:50.876
So concat did not actually
change the original array

39
00:02:50.876 --> 00:02:56.360
that I called it on, instead,
it created a new array.

40
00:03:01.047 --> 00:03:08.128
So let's go back to our whiteboard and
talk a little bit more about variables.

41
00:03:08.128 --> 00:03:13.956
So yesterday, We discussed

42
00:03:13.956 --> 00:03:19.481
how variables points to values, yeah?

43
00:03:19.481 --> 00:03:22.035
So when we

44
00:03:25.552 --> 00:03:30.062
Created our, what did I call it,
numbers2, all right,

45
00:03:30.062 --> 00:03:35.139
when we defined it, we said,
let numbers2 equals 1, 2, 3.

46
00:03:35.139 --> 00:03:37.623
Can anybody walk me through what happened?

47
00:03:40.595 --> 00:03:44.186
So we said,
let numbers2 equal array 1, 2, 3.

48
00:03:44.186 --> 00:03:46.891
The let part is going to tell JavaScript,

49
00:03:46.891 --> 00:03:52.680
hey, Make me a new variable,
call it numbers2.

50
00:03:54.190 --> 00:03:55.464
Okay, then what happens?

51
00:03:55.464 --> 00:03:57.660
Paul, do you wanna,
maybe, walk me through?

52
00:03:57.660 --> 00:04:02.639
&gt;&gt; Yeah, so,
it actually enters a new value in

53
00:04:02.639 --> 00:04:06.416
there of an array of 1, 2, 3.

54
00:04:06.416 --> 00:04:10.708
&gt;&gt; Okay, so it's gonna conjure up
a value somewhere, an array value,

55
00:04:10.708 --> 00:04:13.970
that has some stuff in it,
in this case 1, 2, 3.

56
00:04:13.970 --> 00:04:19.380
&gt;&gt; And then it's gonna do a pointer
from numbers2 to that new array.

57
00:04:19.380 --> 00:04:23.540
&gt;&gt; And then it's going to point
from numbers2 to this array.

58
00:04:25.770 --> 00:04:30.753
Okay, so this is essentially
what is happening when we think

59
00:04:30.753 --> 00:04:35.160
about it usually,
in our kind of our everyday lives.

60
00:04:36.830 --> 00:04:42.975
Another way, though, that we could
think about what's happening,

61
00:04:42.975 --> 00:04:49.236
is that actually, when I say, hey,
JavaScript, make me a new array.

62
00:04:49.236 --> 00:04:54.143
It's kind of creating an array
object with, I don't know,

63
00:04:54.143 --> 00:04:57.714
maybe just kind of
a notion of an array here.

64
00:04:57.714 --> 00:05:01.109
And then we're saying,
in that same line, we're saying,

65
00:05:01.109 --> 00:05:03.410
what we want in the array is 1, 2, and 3.

66
00:05:03.410 --> 00:05:08.613
And so there, it's kinda saying, okay,

67
00:05:08.613 --> 00:05:13.099
now I have some indices in the array.

68
00:05:14.640 --> 00:05:18.928
And this is going to correspond
to some numbers that I'm

69
00:05:18.928 --> 00:05:22.890
conjuring up elsewhere
in my concept of values.

70
00:05:22.890 --> 00:05:27.591
So, what we have is kind of an array
that each of the indices is going to

71
00:05:27.591 --> 00:05:30.400
point to a different value.

72
00:05:30.400 --> 00:05:34.185
And in JavaScript,
it sees this array as kind of one value,

73
00:05:34.185 --> 00:05:36.850
one mutable value that could be changed.

74
00:05:38.400 --> 00:05:44.180
So, what happens then,
when I say, numbers2.push(4)?

75
00:05:46.020 --> 00:05:51.829
Well, JavaScript is gonna say, okay,
numbers2, let me go see what that is,

76
00:05:51.829 --> 00:05:56.360
follows the arrow, finds this array,
and then it says push.

77
00:05:56.360 --> 00:06:01.340
Okay, let me add on a new index for
a new last thing, and

78
00:06:01.340 --> 00:06:07.961
insert a reference to whatever this
new value is, that I just pushed on.

79
00:06:12.120 --> 00:06:16.545
This is not going to change the object,
the array object here,

80
00:06:16.545 --> 00:06:19.979
though, array value that
numbers2 points to.

81
00:06:19.979 --> 00:06:22.275
It's still pointing to the same array,

82
00:06:22.275 --> 00:06:25.320
we've just changed the values
inside of that array.

83
00:06:27.870 --> 00:06:34.680
What happens when I call
numbers2.concat is different.

84
00:06:34.680 --> 00:06:37.731
In this case, when I call numbers2.concat,

85
00:06:37.731 --> 00:06:42.324
JavaScript is sort of saying, okay,
numbers2, let me go find that.

86
00:06:42.324 --> 00:06:44.830
Okay, this is this array.

87
00:06:44.830 --> 00:06:48.244
Sorry, so in our example,
we haven't added anything on.

88
00:06:48.244 --> 00:06:51.490
So numbers2 was 1, 2, 3.

89
00:06:51.490 --> 00:06:59.037
When I call concat, JavaScript is going
to conjure up a new array object,

90
00:06:59.037 --> 00:07:05.991
put in all of the stuff that was
there before in the numbers2 array.

91
00:07:05.991 --> 00:07:12.714
In this case, that's going to come up and
be these values,

92
00:07:12.714 --> 00:07:18.236
1, 2, and 3,
that were in the array before.

93
00:07:18.236 --> 00:07:23.021
And then we're going to concatenate
that with this little array

94
00:07:23.021 --> 00:07:26.387
that we had created,
which just had 4 in it,

95
00:07:26.387 --> 00:07:31.280
which only really exists in the time
that I'm running this code.

96
00:07:32.600 --> 00:07:35.394
And JavaScript is going to say, all right,

97
00:07:35.394 --> 00:07:38.500
now point me to whatever
value was in that array.

98
00:07:38.500 --> 00:07:42.677
So now we have a new object that has,

99
00:07:42.677 --> 00:07:46.851
at index 0, 1, at index 1, 2,

100
00:07:46.851 --> 00:07:51.469
at index 2, 3, and at index 3, 4.

101
00:07:51.469 --> 00:07:57.630
But it is a different object than
our original numbers2 object.

102
00:07:57.630 --> 00:08:01.682
And so, what we then did on
the rest of our line was we said,

103
00:08:01.682 --> 00:08:04.289
call that results, what did we call it?

104
00:08:04.289 --> 00:08:06.387
result2, And

105
00:08:06.387 --> 00:08:11.110
now result2 is gonna reference that
new object that JavaScript created.

106
00:08:12.590 --> 00:08:16.845
So this is getting a little bit
complex here, but suffice it to say,

107
00:08:16.845 --> 00:08:22.515
that in our JavaScript's brain, these
are two totally different operations.

108
00:08:22.515 --> 00:08:26.197
To us, they both result in
an array that has 4 things in it,

109
00:08:26.197 --> 00:08:30.118
but for JavaScript,
these are two totally different things.

110
00:08:30.118 --> 00:08:34.517
And it's important to note that
concat is not going to change

111
00:08:34.517 --> 00:08:39.097
anything about our original array object,
it stays the same.

112
00:08:39.097 --> 00:08:47.590
Whereas push is going to manipulate that
original array to be something else.

113
00:08:48.810 --> 00:08:51.387
If this is not feeling super natural,

114
00:08:51.387 --> 00:08:56.790
that's because computers don't think
like us, and that's totally normal.

115
00:08:56.790 --> 00:09:01.140
So we will get more and more used to this
as we work with more complex objects.

116
00:09:01.140 --> 00:09:03.683
But this has implications for

117
00:09:03.683 --> 00:09:09.300
what happens when we call
certain spells on these arrays.

118
00:09:09.300 --> 00:09:15.052
We need to make sure we know whether
we are manipulating the initial array,

119
00:09:15.052 --> 00:09:19.633
the original array, or
whether we're creating a new one.

120
00:09:19.633 --> 00:09:23.976
So push, for example,
is one that mutates the array.

121
00:09:23.976 --> 00:09:29.601
Or another word you might hear for this,
is that it changes the array in place.

122
00:09:29.601 --> 00:09:33.142
Meaning it changes the array
without touching it,

123
00:09:33.142 --> 00:09:37.022
the array stays in place,
the array stays where it was.

124
00:09:37.022 --> 00:09:43.607
But other actions like concat, create kind
of a new, we could say, copy of the array.

125
00:09:43.607 --> 00:09:48.336
Well, there's a little asterisk on that,
it's a little complicated.

126
00:09:48.336 --> 00:09:52.940
But, essentially, they create a new copy
of the array that gives us a new thing in

127
00:09:52.940 --> 00:09:57.497
the value universe, as opposed to messing
with the original thing that we had.

128
00:09:57.497 --> 00:10:03.413
And so, our good friend MDN is gonna
be the place to go if you wanna find

129
00:10:03.413 --> 00:10:11.410
out whether one of these string operations
changes the array, or gives you a new one.

130
00:10:11.410 --> 00:10:16.426
So, for example,
if we go through our concat documentation,

131
00:10:16.426 --> 00:10:21.345
it says, this method does not
change the existing array, but

132
00:10:21.345 --> 00:10:24.295
instead returns a new array, cool?

133
00:10:24.295 --> 00:10:29.893
We can have variables that can or
cannot be changed, themselves.

134
00:10:29.893 --> 00:10:35.047
The variable itself can or
cannot be reassigned to a new value.

135
00:10:35.047 --> 00:10:40.615
So let's walk through,
when we declare a variable with let,

136
00:10:40.615 --> 00:10:45.112
in the first example on line 1,
as we saw before,

137
00:10:45.112 --> 00:10:48.647
where we're creating a new variable,

138
00:10:48.647 --> 00:10:53.489
we're assigning it to the string,
original value.

139
00:10:53.489 --> 00:10:57.636
And then on the second line when I say,
letVariable equals string,

140
00:10:57.636 --> 00:11:02.391
"new value", after that runs,
what is the value of letVariable gonna be?

141
00:11:02.391 --> 00:11:03.206
&gt;&gt; New value.

142
00:11:03.206 --> 00:11:07.468
&gt;&gt; New value, okay,
now what happens in the second example,

143
00:11:07.468 --> 00:11:10.630
if I declare a similar
variable with const?

144
00:11:10.630 --> 00:11:14.050
What do you think is gonna happen
when I run that second example code?

145
00:11:15.450 --> 00:11:16.630
&gt;&gt; Error.

146
00:11:16.630 --> 00:11:17.453
&gt;&gt; Maybe an error.

147
00:11:17.453 --> 00:11:22.053
So we said that const
creates a variable that can

148
00:11:22.053 --> 00:11:27.008
never be changed,
variable itself is immutable.

149
00:11:27.008 --> 00:11:31.938
Or if we go back to our whiteboard,
we could say, when we had,

150
00:11:34.054 --> 00:11:43.517
Earlier, We had a letVariable,

151
00:11:45.958 --> 00:11:50.536
That we wanted to point to,
I don't know, some string.

152
00:11:50.536 --> 00:11:53.229
We'll just call it the string let, and

153
00:11:53.229 --> 00:11:56.990
we created a pointer from
letVariable to that string.

154
00:11:56.990 --> 00:12:01.008
And then when we reassigned
letVariable to, let's say,

155
00:12:01.008 --> 00:12:05.550
what's called new string,
I think, what happens?

156
00:12:05.550 --> 00:12:10.389
JavaScript conjures up the new string,
and then what happens?

157
00:12:10.389 --> 00:12:12.610
Can anybody remind me, Paul?

158
00:12:14.240 --> 00:12:16.770
&gt;&gt; Moves the pointer, so
it's pointing at that new variable.

159
00:12:16.770 --> 00:12:20.022
&gt;&gt; Exactly, so
it gets rid of the old pointer, and now,

160
00:12:20.022 --> 00:12:23.709
it's gonna create a new pointer or
a new link, we could say,

161
00:12:23.709 --> 00:12:27.340
between the letVariable name and
the new value.

162
00:12:27.340 --> 00:12:31.254
But we said that if we create
a variable with const,

163
00:12:32.904 --> 00:12:38.580
We have to declare and
assign the variable at the same time.

164
00:12:38.580 --> 00:12:43.595
So in this case, maybe we assigned
it to a string, or I think we called

165
00:12:43.595 --> 00:12:48.363
this original or something like that,
doesn't really matter.

166
00:12:52.820 --> 00:13:00.782
We created an association between
the constVariable and the, let me, sorry.

167
00:13:03.790 --> 00:13:09.106
We created an association between
the constVariable and the value that

168
00:13:09.106 --> 00:13:14.951
we assigned it to, that is sort of like
an indelible fact about this variable,

169
00:13:14.951 --> 00:13:21.258
it's kind of like part of the variable's
existence, that it points to that value.

170
00:13:21.258 --> 00:13:25.326
And so,
if then I try to reassign the variable,

171
00:13:25.326 --> 00:13:30.940
JavaScript is gonna say,
I can't do it, not gonna happen.

172
00:13:30.940 --> 00:13:36.142
This value is always gonna be the value
that it was when I assigned it,

173
00:13:36.142 --> 00:13:37.227
originally.

174
00:13:37.227 --> 00:13:41.857
So we could almost say that letVariables,
themselves, the variable and

175
00:13:41.857 --> 00:13:43.881
what it points to, is mutable.

176
00:13:43.881 --> 00:13:47.880
Whereas in constVariables,
it is not, we cannot change it.

177
00:13:47.880 --> 00:13:50.666
So the question is,
what happens when we try?

178
00:13:50.666 --> 00:13:55.809
And that's where we can find out by
messing with stuff in our console,

179
00:13:55.809 --> 00:13:58.950
our good old-fashioned trick here.

180
00:13:58.950 --> 00:14:02.864
So we have constVariable,
then we're gonna try to reassign it, and

181
00:14:02.864 --> 00:14:04.425
we're gonna get an error.

182
00:14:04.425 --> 00:14:08.639
JavaScript is like, I can't do that,
I can't reassign to a constVariable.

183
00:14:08.639 --> 00:14:11.580
It's just not gonna happen, cool?

184
00:14:11.580 --> 00:14:14.794
So JavaScript, in programming in general,

185
00:14:14.794 --> 00:14:19.442
the notion of mutability or
whether or not things can be changed,

186
00:14:19.442 --> 00:14:23.346
is really important to keep in mind and
to think about.

