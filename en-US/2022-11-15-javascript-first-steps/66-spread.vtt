WEBVTT

1
00:00:00.235 --> 00:00:01.582
One more fancy thing.

2
00:00:01.582 --> 00:00:05.455
While we're talking about fancy syntax,
we've talked about fancy syntax for

3
00:00:05.455 --> 00:00:09.109
array functions, we've talked about
fancy syntax for string literals.

4
00:00:09.109 --> 00:00:14.913
One more piece of fancy syntax related
to arrays and iterables more generally,

5
00:00:14.913 --> 00:00:19.505
like strings too, is something
in JavaScript called spread or

6
00:00:19.505 --> 00:00:23.856
the spread syntax, which is dot,
dot, dot, three dots.

7
00:00:23.856 --> 00:00:28.399
And I think this came up in a question
earlier if I'm remembering, and

8
00:00:28.399 --> 00:00:32.490
so hopefully whoever was asking
that earlier is still around.

9
00:00:32.490 --> 00:00:34.059
So here's another neat trick.

10
00:00:34.059 --> 00:00:38.647
Basically, what spread that is that it
lets us take the contents of something

11
00:00:38.647 --> 00:00:40.919
like an array and spread them around.

12
00:00:40.919 --> 00:00:46.376
So we take the items in the array and
spread them out like Regina George

13
00:00:46.376 --> 00:00:51.753
spreading pages from the burned
book all over school in Mean Girls.

14
00:00:51.753 --> 00:00:59.518
So for example, we could use this to
expand an array into another array.

15
00:00:59.518 --> 00:01:02.519
So for example,
here I have a couple of arrays.

16
00:01:02.519 --> 00:01:06.783
I have some old burned,
some old slang for burning somebody.

17
00:01:06.783 --> 00:01:10.708
Like, you're a square, or
like that's wack from back in the 90s.

18
00:01:10.708 --> 00:01:14.910
I have some new burns calling somebody
basic, dusty, or sus, what have you.

19
00:01:14.910 --> 00:01:18.768
And I could make a burn book
of all the burns I know

20
00:01:18.768 --> 00:01:23.705
by expanding both of these
arrays with the spread operator.

21
00:01:23.705 --> 00:01:28.633
And what this does is something very
equivalent to, remember our concat method?

22
00:01:28.633 --> 00:01:31.077
The concatenate two arrays?

23
00:01:31.077 --> 00:01:35.263
So depending on which one
feels more comfortable,

24
00:01:35.263 --> 00:01:41.492
this can be a more comfortable way to
concatenate an array onto another one,

25
00:01:41.492 --> 00:01:46.379
is we can expand the array
element with the dot, dot, dot.

26
00:01:46.379 --> 00:01:51.299
And what it does is essentially what
it's going to do is take the value of

27
00:01:51.299 --> 00:01:53.841
this array, which is this here, and

28
00:01:53.841 --> 00:01:58.351
it's going to take each thing
within the array, and it's almost

29
00:01:58.351 --> 00:02:03.205
as if we had written it out with commas
in between each of those things.

30
00:02:03.205 --> 00:02:08.449
So if I go back over to my console and
I run this,

31
00:02:08.449 --> 00:02:13.427
we'll see that burnBook, it's basically

32
00:02:13.427 --> 00:02:18.538
exactly the same as if I
had manually typed out

33
00:02:18.538 --> 00:02:24.075
each of those things with
commas inside of them.

34
00:02:24.075 --> 00:02:27.159
So the dot, dot, dot does that for us.

35
00:02:27.159 --> 00:02:30.008
It essentially says expand this array,

36
00:02:30.008 --> 00:02:34.948
spread the items of this array into
the context where I am using it, and

37
00:02:34.948 --> 00:02:39.635
one of the places I can use it is
inside brackets in order to put all of

38
00:02:39.635 --> 00:02:44.280
the items inside of that array
into this new array I'm creating.

39
00:02:44.280 --> 00:02:49.353
Okay, so another place that we can use
this is when we're passing arguments into

40
00:02:49.353 --> 00:02:54.592
a function, which is another place where
we might put values separated by commas.

41
00:02:54.592 --> 00:02:58.314
And so for example,
we had our push method,

42
00:02:58.314 --> 00:03:02.244
we can actually pass
multiple values in here.

43
00:03:02.244 --> 00:03:06.838
And so it's not the same as
our concat version earlier

44
00:03:06.838 --> 00:03:11.751
because what is the difference
between concat and push?

45
00:03:11.751 --> 00:03:14.169
What does push do that concat does not do?

46
00:03:14.169 --> 00:03:15.012
Anybody remember?

47
00:03:15.012 --> 00:03:18.944
&gt;&gt; Modifies the variable
&gt;&gt; Modifies the,

48
00:03:18.944 --> 00:03:22.890
when we say variable, we mean the?

49
00:03:22.890 --> 00:03:24.185
&gt;&gt; Values.

50
00:03:24.185 --> 00:03:25.713
&gt;&gt; Elements.

51
00:03:25.713 --> 00:03:27.504
&gt;&gt; The elements in the original array.

52
00:03:27.504 --> 00:03:29.326
It modifies the original array.

53
00:03:29.326 --> 00:03:34.389
Push mutates the array, changes
what's inside of the original array,

54
00:03:34.389 --> 00:03:36.224
concat creates a new one.

55
00:03:36.224 --> 00:03:41.416
But, so anyway, so push here,
if I have an array of skills like HTML,

56
00:03:41.416 --> 00:03:45.025
CSS, and JavaScript, and
I'm about to go on and

57
00:03:45.025 --> 00:03:49.535
JavaScript is now in there
because you all know JavaScript.

58
00:03:49.535 --> 00:03:54.457
And we wanna go on and
learn some new skills like React or

59
00:03:54.457 --> 00:03:59.165
TypeScript or Node,
which is back end JavaScript,

60
00:03:59.165 --> 00:04:03.554
we can call skills.push...newSkills, and

61
00:04:03.554 --> 00:04:11.380
this is gonna be equivalent to calling
skills.push(React, TypeScript, Node).

62
00:04:11.380 --> 00:04:13.851
So we're gonna expand all of those things.

63
00:04:13.851 --> 00:04:19.446
And then, similarly remember how we can
pass in commas to our console.log and

64
00:04:19.446 --> 00:04:21.496
put spaces between values.

65
00:04:21.496 --> 00:04:23.918
We could use the dot, dot, dot there,

66
00:04:23.918 --> 00:04:28.030
and we could log out on one line all
of the things separated by spaces

67
00:04:28.030 --> 00:04:32.160
instead of logging them as an array
with those brackets around it.

68
00:04:32.160 --> 00:04:37.797
So just to prove this to ourselves,
My gosh.

69
00:04:37.797 --> 00:04:41.303
To prove this to ourselves,
we can run this.

70
00:04:41.303 --> 00:04:43.398
Let me just do this separately, okay?

71
00:04:43.398 --> 00:04:48.944
So when we do skills.push...newSkills,
it returns 6.

72
00:04:48.944 --> 00:04:53.125
That's gonna be the new length
of the array that it modified.

73
00:04:53.125 --> 00:05:00.274
And so
skills now has all of that stuff in it.

74
00:05:00.274 --> 00:05:03.180
This is different than concat
cuz skills got changed.

75
00:05:03.180 --> 00:05:07.605
And then if I wanna
console.log skills here,

76
00:05:07.605 --> 00:05:12.482
I get them all printed out
on one line as opposed to if

77
00:05:12.482 --> 00:05:16.792
I had logged the array
without spreading it,

78
00:05:16.792 --> 00:05:20.437
it would log the array object itself.

79
00:05:20.437 --> 00:05:27.126
So what this is equivalent to is
like if I did console.log("HTML",

80
00:05:27.126 --> 00:05:31.815
"CSS", "JS") and so on and so forth, yeah?

81
00:05:31.815 --> 00:05:36.139
So spread is a fun little piece of syntax
that y'all might also run into and

82
00:05:36.139 --> 00:05:38.720
might find useful when you're like, ugh,

83
00:05:38.720 --> 00:05:43.349
I wish I didn't have to loop over this
array and pull out every single element.

84
00:05:43.349 --> 00:05:47.073
If you're passing in things
to either array brackets or

85
00:05:47.073 --> 00:05:51.431
arguments to a function or
a method like this, you can dot, dot,

86
00:05:51.431 --> 00:05:56.202
dot to just pass in all of those as if
they were with commas between them.

87
00:05:56.202 --> 00:05:57.343
Spread it out.

88
00:05:57.343 --> 00:06:02.512
We have done a bunch of stuff,
we have finished a project, look at us go.

89
00:06:02.512 --> 00:06:03.839
We have two projects, actually.

90
00:06:03.839 --> 00:06:07.508
We finished two projects,
Tic-Tac-Toe and our quiz.

91
00:06:07.508 --> 00:06:11.816
And we've learned a ton of stuff
including some very fancy syntax and

92
00:06:11.816 --> 00:06:16.420
lots of different ways to loop over
arrays and make decisions in our code,

93
00:06:16.420 --> 00:06:17.845
in our conditionals.

94
00:06:17.845 --> 00:06:22.435
We have the fancy syntax for the ternary
operator with the question mark and stuff.

95
00:06:22.435 --> 00:06:26.243
And we have fancy syntax for working with
strings with our template literals, and

96
00:06:26.243 --> 00:06:28.683
we have fancy syntax for
functions with our arrows.

97
00:06:28.683 --> 00:06:33.190
So we have a bunch of tricks
up our sleeve now as we

98
00:06:33.190 --> 00:06:37.604
continue our magical
learning journey here.

