WEBVTT

1
00:00:00.000 --> 00:00:04.713
So, there are a lot of other
useful tricks that arrays can do.

2
00:00:04.713 --> 00:00:08.110
We have a whole bunch of other
spells that we can cast on arrays.

3
00:00:08.110 --> 00:00:09.700
So here are a few more.

4
00:00:10.780 --> 00:00:13.021
Try them out,
try them out in your console,

5
00:00:13.021 --> 00:00:16.490
take a guess before you hit enter or
before you type it in.

6
00:00:16.490 --> 00:00:23.767
Take a guess as to what each of these is
going to produce or what you're gonna see.

7
00:00:23.767 --> 00:00:26.960
And we're gonna talk about it in a second.

8
00:00:31.915 --> 00:00:33.830
Okey-doke, so let's talk about it.

9
00:00:34.940 --> 00:00:38.306
So what do you think .sort does?

10
00:00:38.306 --> 00:00:44.810
It kind of does what it says on
the tin but to put words to it.

11
00:00:44.810 --> 00:00:46.059
&gt;&gt; Sorts alphabetically.

12
00:00:46.059 --> 00:00:50.434
&gt;&gt; So in this case since we have a bunch
of letters in our array or strings, right?

13
00:00:50.434 --> 00:00:53.089
It's going to sort them alphabetically.

14
00:00:53.089 --> 00:00:57.610
But this is a little bit tricky,
so let's talk about it.

15
00:00:57.610 --> 00:01:03.407
So if I call this sort on this CADB array,

16
00:01:03.407 --> 00:01:07.328
I'm gonna get the array a,

17
00:01:07.328 --> 00:01:11.090
b, c, d may be expected.

18
00:01:11.090 --> 00:01:18.525
What do you think happens if I do like 3,
4, 1, 2 sort?

19
00:01:18.525 --> 00:01:20.441
&gt;&gt; 1, 2, 3, 4.

20
00:01:20.441 --> 00:01:21.393
&gt;&gt; 1, 2, 3, 4.

21
00:01:21.393 --> 00:01:27.714
Okay, but
there are also some weird things like for

22
00:01:27.714 --> 00:01:32.424
example, if I do 100, 1, 10.

23
00:01:35.959 --> 00:01:41.641
We're going to get maybe what we'd expect,

24
00:01:41.641 --> 00:01:45.088
if I do 100, 2, 50.

25
00:01:49.702 --> 00:01:50.970
Is that what you'd expect?

26
00:01:53.050 --> 00:01:57.794
So what's actually happening
here is because again,

27
00:01:57.794 --> 00:02:00.991
JavaScript goes all loosey goosey,

28
00:02:00.991 --> 00:02:06.044
is it's actually going to sort
based on the stringiness or

29
00:02:06.044 --> 00:02:11.585
the sort of alphabetical order
of the things in the array.

30
00:02:11.585 --> 00:02:16.164
So for example, 1, 10 and
100 come out in the right order because.

31
00:02:18.202 --> 00:02:20.115
If we converted these all to strings.

32
00:02:27.919 --> 00:02:31.540
That is how they would be
ordered alphabetically, right?

33
00:02:31.540 --> 00:02:38.688
But the same is not true
if we converted 100,

34
00:02:38.688 --> 00:02:42.630
2 and 50, to strings.

35
00:02:43.670 --> 00:02:47.740
This is because 1 comes
before 2 alphabetically.

36
00:02:47.740 --> 00:02:51.081
So 100,
it's kind of like starting with A, and

37
00:02:51.081 --> 00:02:55.370
2 is sort of like starting with B,
and so on and so forth for 50.

38
00:02:55.370 --> 00:02:59.777
So, be a little bit aware that sort
behaves maybe differently than you'd

39
00:02:59.777 --> 00:03:04.980
expect in some cases, especially when
you're dealing with non-stringing values.

40
00:03:06.940 --> 00:03:07.769
Okay, great.

41
00:03:07.769 --> 00:03:12.148
How about this .join?

42
00:03:12.148 --> 00:03:14.494
Can anybody describe what
happens when we do this .join?

43
00:03:18.548 --> 00:03:21.450
&gt;&gt; Joins the variables
with whatever specified.

44
00:03:22.570 --> 00:03:27.570
&gt;&gt; So it joins the,
I'm gonna say values in the array.

45
00:03:27.570 --> 00:03:31.305
Cuz we haven't actually
assigned any variables here,

46
00:03:31.305 --> 00:03:36.280
joins the values in the array using
a string joiner that we pass in.

47
00:03:36.280 --> 00:03:41.635
So if we pass in lions and
tigers and, sorry, lions, tigers,

48
00:03:41.635 --> 00:03:46.687
bears my, and join them with a and
surrounded by spaces,

49
00:03:46.687 --> 00:03:53.985
we're going to get the straight one-string
lions and tigers and bears my, yeah?

50
00:03:53.985 --> 00:04:00.936
So this can be really useful for when
you don't wanna type out like let's say.

51
00:04:02.228 --> 00:04:06.918
Let's say I have my first name and
my last name.

52
00:04:06.918 --> 00:04:10.690
And I don't want to type out kind of,

53
00:04:10.690 --> 00:04:14.599
let's say, I don't wanna type out.

54
00:04:18.564 --> 00:04:20.196
Let me assign this to an array.

55
00:04:26.341 --> 00:04:29.720
Okay, so if I don't wanna type
out something like names.

56
00:04:29.720 --> 00:04:35.166
0, plus, space, plus, names,
1 to get my full name,

57
00:04:35.166 --> 00:04:42.412
it can be quicker to just say names.join
and put a space between them, boom.

58
00:04:42.412 --> 00:04:45.372
So join is a pretty handy,

59
00:04:45.372 --> 00:04:50.088
little spell or trick that arrays can do.

60
00:04:50.088 --> 00:04:51.705
And how about this last one, concat.

61
00:04:54.802 --> 00:04:58.860
What did folks find out happens here?

62
00:04:58.860 --> 00:05:03.125
Maybe the chat wants to chime in
with what concat has been doing, or

63
00:05:03.125 --> 00:05:04.430
they think will do?

64
00:05:16.262 --> 00:05:17.430
So we saw, yep.

65
00:05:18.750 --> 00:05:20.862
&gt;&gt; Joins the elements to the array.

66
00:05:20.862 --> 00:05:23.400
&gt;&gt; Joins the elements to array, okay.

67
00:05:23.400 --> 00:05:25.250
Yeah, or another word.

68
00:05:25.250 --> 00:05:28.432
So concat is short for
a word that we talked about yesterday.

69
00:05:28.432 --> 00:05:31.037
&gt;&gt; Adds 456 to the array.

70
00:05:31.037 --> 00:05:32.800
&gt;&gt; Adds 456 to the array.

71
00:05:32.800 --> 00:05:37.470
Okay, so we're gonna end up
with a bigger array, right?

72
00:05:37.470 --> 00:05:43.038
So concat, is gonna give us
an array that kind of squishes

73
00:05:43.038 --> 00:05:48.650
these two arrays together,
into a single array.

74
00:05:48.650 --> 00:05:52.490
And concat is short for a word that
we ran into with strings yesterday.

75
00:05:52.490 --> 00:05:56.040
Anybody remember a word we encountered,
concat?

76
00:05:56.040 --> 00:05:56.590
&gt;&gt; Concatenate.

77
00:05:56.590 --> 00:05:58.330
&gt;&gt; Tenate, concatenate.

78
00:05:58.330 --> 00:06:04.269
Exactly, so this concatenates or
joins together two different arrays,

79
00:06:04.269 --> 00:06:09.070
to give us one array with all
of the elements of both arrays.

80
00:06:10.350 --> 00:06:12.570
Another handy trick.

81
00:06:12.570 --> 00:06:13.070
Okay.

82
00:06:15.470 --> 00:06:20.510
Now, there are a lot of other
things that arrays can do.

83
00:06:20.510 --> 00:06:22.260
And so again, our friend MDN.

84
00:06:23.320 --> 00:06:26.782
If we go to MDN, and we type in array.

85
00:06:29.584 --> 00:06:34.715
We'll find a whole long list of methods
and things that we can do with array,

86
00:06:34.715 --> 00:06:38.403
there's a whole long list of
stuff that arrays can do,

87
00:06:38.403 --> 00:06:41.469
which we do not have time
to talk about all of.

88
00:06:41.469 --> 00:06:46.349
But you can go through and read more
about any of these magic tricks that

89
00:06:46.349 --> 00:06:50.496
they can do, and
also find out certain details about them.

90
00:06:50.496 --> 00:06:54.599
Like for example concat,
we can say it's used to merge two or

91
00:06:54.599 --> 00:06:57.266
more arrays and it returns a new array.

92
00:06:57.266 --> 00:07:01.824
We're gonna talk about what that means in
a second but so you can see examples, etc.

93
00:07:01.824 --> 00:07:05.762
So you can check out MDN for

94
00:07:05.762 --> 00:07:10.963
way more stuff that arrays can do.

95
00:07:10.963 --> 00:07:11.720
Cool?

96
00:07:13.309 --> 00:07:16.291
Cool, any questions so far?

97
00:07:16.291 --> 00:07:20.573
&gt;&gt; I couldn't use push instead of concat,
so push can only do only one?

98
00:07:20.573 --> 00:07:23.400
&gt;&gt; So, let's find out what happens.

99
00:07:23.400 --> 00:07:27.862
This is the best way to figure out
what stuff does, in my opinion,

100
00:07:27.862 --> 00:07:31.532
is to mess with stuff when
it's a non-crucial time.

101
00:07:31.532 --> 00:07:35.834
So since this is our time to experiment,
let's see what happens when we, if

102
00:07:35.834 --> 00:07:40.560
I put push here, I'm not gonna type it yet
because the browser is gonna spoiler it.

103
00:07:41.820 --> 00:07:47.175
We said push, when we were looking before,
and we said, okay,

104
00:07:47.175 --> 00:07:53.240
let's say, I do just push for,
what am I expecting to see when I do this?

105
00:07:53.240 --> 00:07:54.620
&gt;&gt; 1, 2, 3, 4?

106
00:07:54.620 --> 00:07:56.670
&gt;&gt; An array with 1, 2, 3, 4, yeah.

107
00:07:56.670 --> 00:07:57.870
Thank you.

108
00:07:57.870 --> 00:08:01.660
Oops sorry, no,
it's just actually [LAUGH].

109
00:08:01.660 --> 00:08:02.920
I'd have to capture the array.

110
00:08:04.530 --> 00:08:08.448
Sorry, so push is going to return the
value of the element that it just added,

111
00:08:08.448 --> 00:08:10.430
and not the value of the array.

112
00:08:10.430 --> 00:08:12.140
So first I have to capture the array.

113
00:08:13.420 --> 00:08:15.160
Double check that it's what I thought.

114
00:08:15.160 --> 00:08:17.200
So then if I do push for.

115
00:08:17.200 --> 00:08:20.130
Now if I ask for a,
I'll see that it has four things.

116
00:08:20.130 --> 00:08:26.931
Okay, now what happens if I do push and
then make a new array with,

117
00:08:26.931 --> 00:08:31.270
where are we at 5, 6, 7, let's say.

118
00:08:32.960 --> 00:08:35.970
So we said push adds an element
to the end of the array.

119
00:08:35.970 --> 00:08:37.170
So let's take a guess.

120
00:08:37.170 --> 00:08:38.710
What do you all think this is gonna do?

121
00:08:38.710 --> 00:08:39.280
We have a question.

122
00:08:39.280 --> 00:08:41.830
Maybe it's going to do
the same thing as the cat.

123
00:08:41.830 --> 00:08:42.700
&gt;&gt; Yeah.
&gt;&gt; Okay.

124
00:08:42.700 --> 00:08:43.270
&gt;&gt; Thank you, ma'am.

125
00:08:43.270 --> 00:08:45.160
&gt;&gt; Any other guesses?

126
00:08:45.160 --> 00:08:47.760
&gt;&gt; Does it put the array
in there as the last item?

127
00:08:47.760 --> 00:08:52.750
&gt;&gt; It might put the array 5, 6,
7 in there as the last item.

128
00:08:52.750 --> 00:08:57.776
Or it might put each of those things in
there as the last item, let's find out.

129
00:09:03.149 --> 00:09:08.380
Looks like we've now got an array with,
so, sorry.

130
00:09:08.380 --> 00:09:09.200
What did I say before?

131
00:09:09.200 --> 00:09:15.810
I might have said push returns the value
of the thing that we added, that's wrong.

132
00:09:15.810 --> 00:09:19.110
Push returns the new length of the array.

133
00:09:19.110 --> 00:09:20.645
Haven't had enough coffee yet.

134
00:09:20.645 --> 00:09:23.613
And that's why it returned 5 here,

135
00:09:23.613 --> 00:09:28.591
because it says now we've got
an array with five things in it,

136
00:09:28.591 --> 00:09:33.604
the numbers 1, 2, 3, 4,
and an array with 5, 6, 7.

137
00:09:33.604 --> 00:09:35.930
So this is what's called a nested array.

138
00:09:35.930 --> 00:09:39.377
Now we have an array within an array,
and we can have arrays,

139
00:09:39.377 --> 00:09:41.276
within arrays, within arrays.

140
00:09:41.276 --> 00:09:45.530
JavaScript doesn't care what kinds
of things you put in your arrays.

141
00:09:45.530 --> 00:09:50.390
So we can even put in arrays, objects,
all kinds of different stuff.

142
00:09:50.390 --> 00:09:55.190
So push and concat do work differently,
and they're going to do different things.

143
00:09:55.190 --> 00:09:59.745
Now, tomorrow we're gonna talk more about

144
00:09:59.745 --> 00:10:04.793
a fancy piece of JavaScript
syntax that we can use

145
00:10:04.793 --> 00:10:11.060
to extract the individual
elements from an array.

146
00:10:11.060 --> 00:10:15.906
That can make it a little bit easier
if you're trying to add multiple

147
00:10:15.906 --> 00:10:17.530
things from an array.

148
00:10:17.530 --> 00:10:20.780
So, don't wanna get into that right
now cuz it might distract us.

149
00:10:20.780 --> 00:10:26.695
But tomorrow, when we look later
at some fancy JavaScript syntax,

150
00:10:26.695 --> 00:10:31.883
we will find a shorthand way to
kind of get multiple elements

151
00:10:31.883 --> 00:10:36.991
out of an array so
that we can work with them individually.

