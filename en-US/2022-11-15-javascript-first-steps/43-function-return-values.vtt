WEBVTT

1
00:00:00.360 --> 00:00:01.430
Let's talk about return values.

2
00:00:01.430 --> 00:00:05.370
So we saw this return keyword.

3
00:00:05.370 --> 00:00:08.196
This creates a return statement.

4
00:00:08.196 --> 00:00:13.793
So when I say return some expression,
semi-colon, I'm saying, hey JavaScript,

5
00:00:13.793 --> 00:00:18.769
make this the value that this expression
evaluates to once you've received

6
00:00:18.769 --> 00:00:23.767
the given arguments and mapped them to
the parameters that I told you about.

7
00:00:23.767 --> 00:00:27.099
Make that value the output
of this function,

8
00:00:27.099 --> 00:00:30.088
the thing that the function gives back.

9
00:00:30.088 --> 00:00:33.916
And so that means that we can
capture that value by, for example,

10
00:00:33.916 --> 00:00:37.548
as we've seen a couple of times,
assigning it to a variable.

11
00:00:37.548 --> 00:00:43.255
So in this example, our function
square it takes one parameter,

12
00:00:43.255 --> 00:00:48.131
named x, and it returns
the value of the expression that

13
00:00:48.131 --> 00:00:52.096
we get when we use the star
operator on x and x.

14
00:00:52.096 --> 00:00:59.800
So we expect square of 3 to be 3 times 3,
which is 9.

15
00:00:59.800 --> 00:01:01.348
Yeah, question.

16
00:01:01.348 --> 00:01:04.123
&gt;&gt; Would it be different
than l console.log,

17
00:01:04.123 --> 00:01:06.825
x times x would it be
the same result there?

18
00:01:06.825 --> 00:01:09.748
&gt;&gt; Great question, let us find out.

19
00:01:09.748 --> 00:01:13.922
So I think the question is if we
have this function square, and

20
00:01:13.922 --> 00:01:18.999
let's use our original example square
here, which says return x times x.

21
00:01:18.999 --> 00:01:24.203
And then we do const 9 = square(3), and

22
00:01:24.203 --> 00:01:29.696
we asked for 9,
we have the number 9, yeah?

23
00:01:29.696 --> 00:01:38.735
Okay, now, Let's find out what
happens if we make a new function.

24
00:01:41.190 --> 00:01:46.329
I'm gonna call it, confusingly
because of math terms, log square,

25
00:01:46.329 --> 00:01:52.181
which is going to instead of returning,
it's going to console.log x times x.

26
00:01:52.181 --> 00:01:53.633
Is this what you meant?

27
00:01:53.633 --> 00:01:57.577
Okay, so now if I call
logSquare in the console on 3,

28
00:01:57.577 --> 00:02:00.392
I'm gonna see the value 9 print out.

29
00:02:00.392 --> 00:02:05.062
But what happens if I do const logNine,

30
00:02:05.062 --> 00:02:09.316
let's say, is logSquare(3).

31
00:02:11.769 --> 00:02:17.717
What happened essentially in
this case is a good question.

32
00:02:17.717 --> 00:02:21.902
So, let us see what happens when
we have a function like this,

33
00:02:21.902 --> 00:02:27.870
a function that doesn't return anything,
of which our logSquare is another example.

34
00:02:27.870 --> 00:02:31.652
So, here we have a similar one,
it's called, sayHello,

35
00:02:31.652 --> 00:02:36.661
it takes in a name and it logs out,
Hi, plus name, plus exclamation point.

36
00:02:36.661 --> 00:02:43.120
So if I say, sayHello(Marc),
I'm going to expect to hear, Hi, Marc.

37
00:02:43.120 --> 00:02:44.084
Anybody see The Room?

38
00:02:44.084 --> 00:02:46.303
No, it's movie reference, whatever.

39
00:02:46.303 --> 00:02:50.936
Now, the question is,
what is gonna happen to that value?

40
00:02:50.936 --> 00:02:56.014
So let's find out in our logSquare
example, very similar function.

41
00:02:56.014 --> 00:03:00.545
All right, so we printed out
9 to the console as expected.

42
00:03:00.545 --> 00:03:04.896
What is the value of log 9 gonna be,
do you think?

43
00:03:04.896 --> 00:03:05.843
Any guesses?

44
00:03:05.843 --> 00:03:08.034
Let's find out.

45
00:03:08.034 --> 00:03:09.228
&gt;&gt; Undefined.

46
00:03:09.228 --> 00:03:11.521
&gt;&gt; Log 9 is undefined.

47
00:03:11.521 --> 00:03:12.058
&gt;&gt; Because we never
passed in the parameter.

48
00:03:12.058 --> 00:03:14.187
&gt;&gt; Because we never, sorry?

49
00:03:14.187 --> 00:03:18.197
&gt;&gt; Because we never pass in
the parameter for logSquare.

50
00:03:18.197 --> 00:03:22.448
&gt;&gt; So it's not so
much about the parameter cuz actually

51
00:03:22.448 --> 00:03:27.387
logSquare had actually the very
same parameters as square.

52
00:03:27.387 --> 00:03:31.429
The difference is the missing
return statement.

53
00:03:31.429 --> 00:03:38.668
So every function in
JavaScript returns something.

54
00:03:38.668 --> 00:03:44.068
There is gonna be some value that
this function, when I call it,

55
00:03:44.068 --> 00:03:48.479
logSquare(3), is going
to evaluate to a value.

56
00:03:48.479 --> 00:03:52.652
And that value is gonna be
whatever the function returned.

57
00:03:52.652 --> 00:03:57.456
And so, in this case,
I didn't have a return statement.

58
00:03:57.456 --> 00:04:01.412
I did some other stuff, like console
log was doing other stuff, but

59
00:04:01.412 --> 00:04:03.572
it didn't have a return statement.

60
00:04:03.572 --> 00:04:09.133
And in JavaScript,
when we don't have a return statement,

61
00:04:09.133 --> 00:04:14.048
we get undefined as the return
value of the function.

62
00:04:14.048 --> 00:04:19.343
So it's essentially like JavaScript
always has a kind of default return

63
00:04:19.343 --> 00:04:25.266
undefined in every function unless you
specify what function it should return.

64
00:04:25.266 --> 00:04:26.584
Or, excuse me,

65
00:04:26.584 --> 00:04:32.444
unless you specify what value it should
return using the return keyword.

66
00:04:32.444 --> 00:04:37.718
So in this case, logSquare(3),
it printed 9 to the console,

67
00:04:37.718 --> 00:04:43.479
but it returned undefined,
because we never used that return keyword.

68
00:04:43.479 --> 00:04:49.512
So the value of logNine is whatever the
value that the logSquare(3) evaluates to,

69
00:04:49.512 --> 00:04:54.896
which is the return value of the function,
which in this case is undefined.

70
00:04:54.896 --> 00:04:57.669
Now what we could do is,

71
00:04:57.669 --> 00:05:03.499
let's say have
a logAndReturnSquare function,

72
00:05:03.499 --> 00:05:08.872
where we first log the square, And

73
00:05:08.872 --> 00:05:12.075
then return the square, for example.

74
00:05:16.220 --> 00:05:18.871
So if we now say,

75
00:05:20.853 --> 00:05:26.041
result is logAndReturnSquare[3],

76
00:05:26.041 --> 00:05:30.469
what do we expect is gonna happen?

77
00:05:30.469 --> 00:05:31.908
&gt;&gt; 9.
&gt;&gt; Any guesses?

78
00:05:31.908 --> 00:05:33.101
&gt;&gt; It's gonna be 9.

79
00:05:33.101 --> 00:05:34.903
&gt;&gt; Go ahead.
&gt;&gt; Our result's gonna be 9.

80
00:05:34.903 --> 00:05:38.343
&gt;&gt; So result is gonna be 9, and
is anything else gonna happen?

81
00:05:38.343 --> 00:05:39.269
&gt;&gt; Print 9.

82
00:05:39.269 --> 00:05:42.513
&gt;&gt; And it's also gonna print 9,
let's find out.

83
00:05:42.513 --> 00:05:47.674
So here we have result of,
sorry, we have 9 got printed.

84
00:05:47.674 --> 00:05:52.058
Now, we do see an undefined here, which
is confusing because that is gonna be

85
00:05:52.058 --> 00:05:56.588
the value of this whole statement,
which doesn't have a value in JavaScript.

86
00:05:56.588 --> 00:06:02.826
But if I ask for result, it did
indeed capture the return value of 9.

87
00:06:02.826 --> 00:06:07.826
Okay, so if you want your function
to give you a value that you

88
00:06:07.826 --> 00:06:11.667
can use later,
you wanna a return statement.

89
00:06:11.667 --> 00:06:14.280
That doesn't mean that there
aren't useful functions.

90
00:06:14.280 --> 00:06:18.741
And in fact, we're gonna do some that
don't have a return statement, because

91
00:06:18.741 --> 00:06:23.417
sometimes we actually want the function to
do other stuff then give us back a value.

92
00:06:23.417 --> 00:06:25.972
Maybe we wanna log things to the console,

93
00:06:25.972 --> 00:06:29.476
maybe we wanna change something
on the HTML DOM, right?

94
00:06:29.476 --> 00:06:33.808
So there are plenty of cases where
you're gonna have functions without

95
00:06:33.808 --> 00:06:38.356
return statements, and anytime that
you don't have a return statement,

96
00:06:38.356 --> 00:06:40.901
the implicit return value is undefined.

97
00:06:40.901 --> 00:06:43.440
I have one more question for you.

98
00:06:43.440 --> 00:06:47.547
What if I had a function
returnAndLogSquare,

99
00:06:47.547 --> 00:06:54.080
which looks similar to our earlier one but
with the lines reversed?

100
00:06:54.080 --> 00:07:00.170
So here we're gonna have a return x
times x and then console.log x times x.

101
00:07:00.170 --> 00:07:06.624
Yeah, okay, what happens if I
try to create that function,

102
00:07:06.624 --> 00:07:14.738
the browser's already giving me a warning
that there is unreachable code.

103
00:07:14.738 --> 00:07:19.565
And if we were to try to capture

104
00:07:19.565 --> 00:07:24.589
returnAndLogSquare(3) as

105
00:07:24.589 --> 00:07:28.653
a value called attempt.

106
00:07:28.653 --> 00:07:35.058
Notice what didn't happen when I called
that function, returnAndLogSquare,

107
00:07:35.058 --> 00:07:40.611
we didn't see our 9 print out,
Like we did before.

108
00:07:40.611 --> 00:07:44.941
Now, in this case, we're seeing a 9
because that is the value returned,

109
00:07:44.941 --> 00:07:47.431
which was the value
that we got in attempt.

110
00:07:47.431 --> 00:07:52.750
But we didn't see two 9s,
which is what we had before in logAnd,

111
00:07:52.750 --> 00:07:57.588
where'd it go, logAndReturnSquare,
where we had a 9 and

112
00:07:57.588 --> 00:08:00.813
then the return value is was not given.

113
00:08:00.813 --> 00:08:04.760
So, this warning,
unreachable code after return statement,

114
00:08:04.760 --> 00:08:07.831
is because essentially
JavaScript stops running

115
00:08:07.831 --> 00:08:12.376
your code inside of the function body
once it hits that return statement.

116
00:08:12.376 --> 00:08:16.780
So this line, console.log,
here, is never gonna run.

117
00:08:16.780 --> 00:08:19.744
JavaScript doesn't really complain
when you declare the function.

118
00:08:19.744 --> 00:08:23.065
Here my browser is trying to
help me out a little bit.

119
00:08:23.065 --> 00:08:26.734
It's like, hey, warning, you're doing
something you probably don't wanna do.

120
00:08:26.734 --> 00:08:31.958
But it's valid JavaScript,
it's not throwing an error.

121
00:08:31.958 --> 00:08:33.962
Yeah, question.

122
00:08:33.962 --> 00:08:39.358
&gt;&gt; We have people in the chat saying that
the return statement exits the function.

123
00:08:39.358 --> 00:08:42.853
&gt;&gt; Exactly, that's another way of saying,
yeah exactly,

124
00:08:42.853 --> 00:08:47.776
that's another way of saying that the
return statement tells JavaScript, hey,

125
00:08:47.776 --> 00:08:50.790
we're done with this function,
get out of here.

126
00:08:50.790 --> 00:08:54.270
Send out this value, this return value,
and then get out of here,

127
00:08:54.270 --> 00:08:56.083
exit the function, great point.

