WEBVTT

1
00:00:00.130 --> 00:00:04.602
So what I've said to you is that fetch,
which again, punny,

2
00:00:04.602 --> 00:00:08.472
because we're working with dogs,
but fetch goes and

3
00:00:08.472 --> 00:00:11.930
fetches a resource or
a piece of data from a URL.

4
00:00:13.270 --> 00:00:18.590
So let's go to our console,
And try to run this line.

5
00:00:21.030 --> 00:00:25.192
So the way that I call fetch is I
call fetch just like a function,

6
00:00:25.192 --> 00:00:30.160
it is just a built in function with params
and then the URL that I wanna find.

7
00:00:30.160 --> 00:00:34.170
And there's a bunch more
options that I could pass in.

8
00:00:34.170 --> 00:00:37.765
And if we wanna read all about it,
we can read about it on MDN,

9
00:00:37.765 --> 00:00:39.790
there's lots more details.

10
00:00:39.790 --> 00:00:43.038
But from now, let's just call
it with the name of this URL.

11
00:00:46.211 --> 00:00:48.255
What the crap is that?

12
00:00:48.255 --> 00:00:53.132
[LAUGH] So I called fetch on this URL,
and JavaScript gave me back

13
00:00:53.132 --> 00:00:59.700
something that's calling a promise,
and I sure don't see any hounds.

14
00:00:59.700 --> 00:01:01.432
I don't know about y'all but

15
00:01:01.432 --> 00:01:06.080
it is not the same as what we wanted here
which is afghan, basset, blood, etc.

16
00:01:07.190 --> 00:01:13.589
So what is going on and that is the next
thing we need to wrap our heads around.

17
00:01:13.589 --> 00:01:18.908
Promises, so
promises are something that comes into

18
00:01:18.908 --> 00:01:25.408
play in JavaScript when we are doing
things that take a long time,

19
00:01:25.408 --> 00:01:31.800
or looking for things that we
are going to need some time to find.

20
00:01:31.800 --> 00:01:35.552
And as Issa Rae is
hinting at when she says,

21
00:01:35.552 --> 00:01:38.898
I promise you can always be in my loop.

22
00:01:38.898 --> 00:01:41.968
Promises have to do with
that event loop and

23
00:01:41.968 --> 00:01:45.050
the asynchronous code that we talk about.

24
00:01:45.050 --> 00:01:49.519
Because promises are something that
comes into play when we're working with

25
00:01:49.519 --> 00:01:54.055
operations that take a long time like
fetch, which it might take a long time for

26
00:01:54.055 --> 00:01:57.165
me to go talk to the dog API and
come back with the data.

27
00:01:58.835 --> 00:02:03.509
So it takes a while for fetch and
many other things in JavaScript to do what

28
00:02:03.509 --> 00:02:08.920
it's trying to do, which is grab
the piece of information at this URL.

29
00:02:08.920 --> 00:02:13.362
And so what JavaScript does is
it kind of writes us an IOU for

30
00:02:13.362 --> 00:02:18.892
the actual data, the actual value of
the thing that we're looking for,

31
00:02:18.892 --> 00:02:21.448
because it doesn't have it yet.

32
00:02:21.448 --> 00:02:25.900
So it sort of says, I promise I'm
gonna go get you this value but

33
00:02:25.900 --> 00:02:27.421
I don't have it yet.

34
00:02:27.421 --> 00:02:32.377
So a promise is a construct
in JavaScript that lets

35
00:02:32.377 --> 00:02:36.866
us represent a value
that we don't have yet.

36
00:02:36.866 --> 00:02:38.977
And often, this comes up not exclusively,

37
00:02:38.977 --> 00:02:41.898
sometimes it comes up to things
that happen really quickly.

38
00:02:41.898 --> 00:02:45.391
But mostly, it becomes relevant when we're
talking about things that it's gonna take

39
00:02:45.391 --> 00:02:46.725
a while for us to get the value of.

40
00:02:48.555 --> 00:02:52.541
So we talk about having
a promise of a value, and

41
00:02:52.541 --> 00:02:56.140
promises can be in three possible states.

42
00:02:56.140 --> 00:03:02.510
So if you notice when I ran my code before
it said promise { &lt;state&gt;: " pending"}.

43
00:03:02.510 --> 00:03:07.060
And pending state is when a promise is
sort of like still waiting for the value.

44
00:03:07.060 --> 00:03:10.727
And so JavaScript is saying essentially
via that &lt;/state&gt; "pending"

45
00:03:10.727 --> 00:03:14.000
like hang tight, I promise I'm
gonna get this I'm working on it.

46
00:03:15.570 --> 00:03:19.070
Then, there are two other states
that we could have a promise in.

47
00:03:19.070 --> 00:03:22.950
One is called fulfilled, which you might
also hear the word resolved use a lot.

48
00:03:24.350 --> 00:03:29.190
There's some differences, but we can
think of them as equivalent for now,

49
00:03:29.190 --> 00:03:31.317
which basically means success.

50
00:03:31.317 --> 00:03:34.825
I finally got the value,
and we're all done.

51
00:03:34.825 --> 00:03:38.495
And then, there's another state that
promises could be in which is called

52
00:03:38.495 --> 00:03:41.540
rejected, which is sort of
like JavaScript saying, sorry.

53
00:03:42.710 --> 00:03:46.922
Something went wrong here, I couldn't get
the value, and I washed my hands of this,

54
00:03:46.922 --> 00:03:47.520
I'm done.

55
00:03:48.650 --> 00:03:52.961
This promise did not succeed,
so rejected, we could say.

56
00:03:52.961 --> 00:03:57.131
And sometimes, you'll hear the word
resolved to mean fulfilled, and

57
00:03:57.131 --> 00:04:01.858
sometimes you'll hear the word resolved
to mean either fulfilled or rejected,

58
00:04:01.858 --> 00:04:04.928
so there's a lot of confusing
terminology in here.

59
00:04:04.928 --> 00:04:09.844
But suffice it to say that a promise can
either be still in the works, pending, or

60
00:04:09.844 --> 00:04:11.088
it can be finished.

61
00:04:11.088 --> 00:04:12.744
And what we want usually is for

62
00:04:12.744 --> 00:04:15.867
the promise to be fulfilled
with the value that we want.

63
00:04:15.867 --> 00:04:17.300
And since it takes time for

64
00:04:17.300 --> 00:04:20.631
promises to resolve we say
promises are also asynchronous.

65
00:04:20.631 --> 00:04:21.663
Yeah, question.

66
00:04:21.663 --> 00:04:26.291
&gt;&gt; Are promises only use with API
call outs or will you see them and

67
00:04:26.291 --> 00:04:28.703
other long running processes?

68
00:04:28.703 --> 00:04:33.916
&gt;&gt; Yeah you can see promises
in other cases too.

69
00:04:33.916 --> 00:04:37.539
Fetch is one example of an operation or
a function that returns a promise,

70
00:04:37.539 --> 00:04:38.891
there's a lots of others.

71
00:04:38.891 --> 00:04:42.902
And in fact, we're gonna see
another one that doesn't involve

72
00:04:42.902 --> 00:04:46.392
talking to the network or
going and getting something,

73
00:04:46.392 --> 00:04:50.271
it's all happening locally but
it still takes a little time.

74
00:04:50.271 --> 00:04:56.500
So we will see another example, but
yes no, they do come up in other contexts.

75
00:04:56.500 --> 00:05:00.430
Fetch is just I think a great example of
something that is gonna take time to get

76
00:05:00.430 --> 00:05:01.860
stuff from the network.

77
00:05:01.860 --> 00:05:05.718
So what's happening basically is
like when we say, hey, JavaScript,

78
00:05:05.718 --> 00:05:06.990
I want this hound list.

79
00:05:07.990 --> 00:05:12.826
JavaScript, you're saying like, okay,
I got you, I'm adding this fetching,

80
00:05:12.826 --> 00:05:15.330
I'm gonna go do it, go get you that value.

81
00:05:15.330 --> 00:05:17.710
But meanwhile,
let me keep trying to run your code.

82
00:05:17.710 --> 00:05:21.480
JavaScript is like Joey and
friends, he's like, I want to go.

83
00:05:21.480 --> 00:05:26.290
JavaScript like I wanna keep going
through your code, don't make me stop and

84
00:05:26.290 --> 00:05:30.441
wait to get this data before running
through the rest of your code.

85
00:05:30.441 --> 00:05:36.387
However, unlike with something where we
don't wanna freeze the webpage, basically

86
00:05:36.387 --> 00:05:42.640
our program here, it can't really do
much without the dog data that we need.

87
00:05:42.640 --> 00:05:50.550
So sometimes, we do want JavaScript to
stop and wait in executing our code.

88
00:05:50.550 --> 00:05:53.748
And we wish that we could just
tell JavaScript like no, no, no,

89
00:05:53.748 --> 00:05:56.440
really wait for me, wait for
this value to come back.

90
00:05:56.440 --> 00:06:01.183
Wait for that promise to fulfill or to
resolve before you go on and try to keep

91
00:06:01.183 --> 00:06:05.926
running my code because if you keep
trying to run my code without that data,

92
00:06:05.926 --> 00:06:08.139
I can't do anything meaningful.

93
00:06:08.139 --> 00:06:13.790
So sometimes, we want JavaScript to stop
and wait for the promise to resolve,

94
00:06:13.790 --> 00:06:17.813
and that is where a friend of
the keyword await comes in,

95
00:06:17.813 --> 00:06:21.515
which as the spice girls say,
says stop right now.

96
00:06:21.515 --> 00:06:27.344
Thank you very much, I want you to wait
for this asynchronous operation to finish,

97
00:06:27.344 --> 00:06:31.857
I want you to wait for in this case,
the promise to be fulfilled.

