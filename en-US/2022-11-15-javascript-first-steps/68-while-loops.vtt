WEBVTT

1
00:00:00.130 --> 00:00:04.257
So, in order to start work
on our doggo fetching,

2
00:00:04.257 --> 00:00:08.350
we're going to talk about
another type of loop.

3
00:00:08.350 --> 00:00:12.456
So this is loop on loops,
you could say [LAUGH].

4
00:00:12.456 --> 00:00:17.339
And as Cardi B says, sometimes we have
to keep replaying and replaying and

5
00:00:17.339 --> 00:00:18.925
replaying something.

6
00:00:18.925 --> 00:00:21.716
And sometimes we don't want to,

7
00:00:21.716 --> 00:00:26.409
we want to not loop over
a certain number of iterations.

8
00:00:26.409 --> 00:00:30.565
We want to loop over and
over and over and over again,

9
00:00:30.565 --> 00:00:35.780
until something changes and
we want to stop looping.

10
00:00:35.780 --> 00:00:40.673
So, we have another construct for
loops in JavaScript called while loops.

11
00:00:40.673 --> 00:00:44.922
And while loops allow us to keep running
a chunk of code over and over and

12
00:00:44.922 --> 00:00:48.252
over again, replaying,
replaying, replaying it.

13
00:00:48.252 --> 00:00:51.901
Until a certain condition
that we give the loop,

14
00:00:51.901 --> 00:00:56.263
similar to a condition we give
our if statements, right?

15
00:00:56.263 --> 00:01:00.180
Until that condition is no longer true.

16
00:01:00.180 --> 00:01:03.563
So as long as the condition that
I give a while loop is true,

17
00:01:03.563 --> 00:01:08.054
the while loop is gonna keep replaying
that chunk of code inside of its block,

18
00:01:08.054 --> 00:01:10.670
inside of its curly braces.

19
00:01:10.670 --> 00:01:16.503
So in this case, I have a while loop
that is basically populating an array.

20
00:01:16.503 --> 00:01:20.089
I have an empty array that's called
five random numbers, which is kind

21
00:01:20.089 --> 00:01:23.331
of a misnomer at the beginning
because it has zero numbers in it.

22
00:01:23.331 --> 00:01:28.866
And then I have a while loop
that's basically saying,

23
00:01:28.866 --> 00:01:33.555
okay, while or
as long as the length of the five

24
00:01:33.555 --> 00:01:37.645
random numbers array is less than five,

25
00:01:37.645 --> 00:01:41.761
push a new random number into the array.

26
00:01:41.761 --> 00:01:46.684
So by the time this is done running,
my five random numbers will no

27
00:01:46.684 --> 00:01:51.890
longer be a lie, and we actually
will have five numbers in our array.

28
00:01:51.890 --> 00:01:55.530
So let's go to the console and
prove it to ourselves.

29
00:01:55.530 --> 00:02:02.250
Okay so, if I create my five random
numbers array, it's empty at the moment.

30
00:02:04.050 --> 00:02:06.970
And when I run my while loop,

31
00:02:06.970 --> 00:02:12.708
we're going to see something
else happen to the array.

32
00:02:12.708 --> 00:02:15.125
And now if I asked for
five random numbers,

33
00:02:15.125 --> 00:02:17.757
we can see that it actually
did do what I asked.

34
00:02:17.757 --> 00:02:22.483
It pushed five different random
numbers because it called math.random

35
00:02:22.483 --> 00:02:24.270
five times into the array.

36
00:02:25.520 --> 00:02:30.913
What do you think happens if I run it
again, if I run my while loop again.

37
00:02:33.314 --> 00:02:36.041
Am I gonna push five more
random numbers into the array?

38
00:02:38.075 --> 00:02:38.635
&gt;&gt; Yes.
&gt;&gt; No.

39
00:02:38.635 --> 00:02:42.019
&gt;&gt; I think so.
&gt;&gt; Yes, no, we have bets on both horses.

40
00:02:43.520 --> 00:02:48.213
So let's find out, let's run it,
see what happens, five random numbers.

41
00:02:48.213 --> 00:02:52.113
It still only has those five numbers, why?

42
00:02:52.113 --> 00:02:55.378
Because while loops care
about a condition, and

43
00:02:55.378 --> 00:03:01.207
the condition that I've given it here is
isfiverandomnumbers.length&lt;than five.

44
00:03:01.207 --> 00:03:06.241
If so, run the while loop,
run this chunk of code, and

45
00:03:06.241 --> 00:03:14.000
when I ran it that second time, even
before we ever did a new math.randomcall.

46
00:03:14.000 --> 00:03:20.812
The length of the array was already five,
so not less than five.

47
00:03:20.812 --> 00:03:25.045
So we didn't actually execute
the line of code in the while loop.

48
00:03:25.045 --> 00:03:32.411
So it's kind of, like a conditional
loop you could think of it as.

49
00:03:32.411 --> 00:03:37.080
While can be dangerous, so
if you like chaos and destruction and

50
00:03:37.080 --> 00:03:41.500
not being able to use your browser or
computer in some cases.

51
00:03:41.500 --> 00:03:45.873
Do not put a true value that
is always true, like for

52
00:03:45.873 --> 00:03:50.168
example the Boolean true
in the while condition.

53
00:03:50.168 --> 00:03:55.020
Because, what will happen is
since true is always true,

54
00:03:55.020 --> 00:04:02.419
JavaScript is just gonna keep blogging,
I am wasting resources infinitely forever.

55
00:04:02.419 --> 00:04:06.316
Until your browser and or
entire system crashes,

56
00:04:06.316 --> 00:04:10.862
or your browser says hey,
I'm gonna stop this JavaScript

57
00:04:10.862 --> 00:04:15.426
because it's doing something
they shouldn't be doing.

58
00:04:15.426 --> 00:04:18.974
So, if you want to watch
the world burn like Elmo, go for

59
00:04:18.974 --> 00:04:21.237
it but I do not recommend you copy and

60
00:04:21.237 --> 00:04:25.790
paste this line of code, I should have
disabled the copy button [LAUGH].

