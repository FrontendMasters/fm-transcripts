WEBVTT

1
00:00:00.000 --> 00:00:06.813
Hello okay so we were digging into
a HTML document in JavaScript.

2
00:00:06.813 --> 00:00:12.562
So we were on this Tic Tac Toe page and
we had shown that in the Inspector

3
00:00:12.562 --> 00:00:18.328
tab in our browsers dev tools we can
get a sense of what is in that page.

4
00:00:18.328 --> 00:00:24.450
So in here and yours might look a little
bit different both the JavaScript console

5
00:00:24.450 --> 00:00:30.043
and the Inspector might look slightly
different in different browsers.

6
00:00:30.043 --> 00:00:32.119
For example, I'm in Firefox right here.

7
00:00:32.119 --> 00:00:36.435
You might be in Chrome or Edge or
another different browsers, or Safari,

8
00:00:36.435 --> 00:00:40.347
and the dev tools in all of these
browsers are slightly different.

9
00:00:40.347 --> 00:00:44.575
But the contents of the page and
the objects that JavaScript sees and

10
00:00:44.575 --> 00:00:47.482
represents the page width
should be the same.

11
00:00:47.482 --> 00:00:52.269
So let's dig in a little bit, in
the inspector, we can do drill down into

12
00:00:52.269 --> 00:00:57.156
different elements and we can kinda get
a sense of what all is in this page.

13
00:00:57.156 --> 00:01:00.466
We've got some header h1, h2 elements,

14
00:01:00.466 --> 00:01:05.491
we've got some of those container divs,
some paragraphs, etc.

15
00:01:05.491 --> 00:01:09.227
Then, we've got a div
with some other divs.

16
00:01:09.227 --> 00:01:13.932
So just getting familiarized with
building our human mental model of

17
00:01:13.932 --> 00:01:15.482
what's in this page.

18
00:01:15.482 --> 00:01:19.516
What we're gonna do now is show how
if we go back to the console and

19
00:01:19.516 --> 00:01:23.104
we work with this document object,
which we can invoke or

20
00:01:23.104 --> 00:01:27.027
kinda call-up by entering
the word document in the console.

21
00:01:27.027 --> 00:01:32.110
We're going to be able to see
how JavaScript represents these

22
00:01:32.110 --> 00:01:38.671
same elements and the same content in
the page in its own own JavaScript anyway.

23
00:01:38.671 --> 00:01:40.653
So let's dig in.

24
00:01:40.653 --> 00:01:41.289
Okay, so

25
00:01:41.289 --> 00:01:46.469
we saw that the the document word by
itself is kinda a special built in object.

26
00:01:46.469 --> 00:01:47.635
We're gonna talk about objects later.

27
00:01:47.635 --> 00:01:53.318
But it's a built in object in JavaScript
that represents the whole document.

28
00:01:53.318 --> 00:01:58.078
So that is the entire HTML
document that we are working with.

29
00:01:58.078 --> 00:02:01.625
Any guesses what
document.title represents?

30
00:02:04.361 --> 00:02:05.408
&gt;&gt; The title of the document.

31
00:02:05.408 --> 00:02:07.372
&gt;&gt; The title of the document, excellent.

32
00:02:07.372 --> 00:02:12.318
So this is the page title,
if you want to try it out.

33
00:02:12.318 --> 00:02:17.308
So in this document or in this web page,
you'll notice that the in

34
00:02:17.308 --> 00:02:22.570
the browser tab or on the title bar
of the browser, you'll see a title

35
00:02:22.570 --> 00:02:28.229
that you can access that JavaScriptTacToe
title with document.title.

36
00:02:28.229 --> 00:02:30.163
And we're gonna talk
more about this dot and

37
00:02:30.163 --> 00:02:31.894
what is going on with these dots later.

38
00:02:31.894 --> 00:02:35.894
But this is how we can get
the title of the document.

39
00:02:35.894 --> 00:02:39.532
What about document.body?

40
00:02:39.532 --> 00:02:46.448
[LAUGH] This is perhaps unsurprisingly,
the body element in the HTML.

41
00:02:46.448 --> 00:02:51.567
So if we notice in our inspector,
we have all of the content that

42
00:02:51.567 --> 00:02:57.183
we really care about is usually
contained within this body element.

43
00:02:57.183 --> 00:03:01.791
There's also a head element that has
some other things, like for example,

44
00:03:01.791 --> 00:03:03.087
the document title.

45
00:03:03.087 --> 00:03:07.673
And so document.title is just kind of like
a nice little quick way of accessing that.

46
00:03:07.673 --> 00:03:11.580
But usually what mostly we're gonna be
concerned about is what's in the body of

47
00:03:11.580 --> 00:03:12.114
the page.

48
00:03:12.114 --> 00:03:16.853
So what is contained
within this body element

49
00:03:16.853 --> 00:03:21.849
which we can access by
typing document.body.

50
00:03:21.849 --> 00:03:28.189
And again, this might look slightly
different depending on your browser,

51
00:03:28.189 --> 00:03:34.244
but that will also give you a body
element which has a bunch of stuff in it.

52
00:03:34.244 --> 00:03:38.270
We're not going to worry
too much about right now.

53
00:03:38.270 --> 00:03:43.371
We can also use a special kind
of addon to a lot of the things

54
00:03:43.371 --> 00:03:48.385
we're gonna be working with
today called .children.

55
00:03:48.385 --> 00:03:53.800
Any guesses what
document.body.children would give us?

56
00:03:53.800 --> 00:03:58.712
Or perhaps review for folks who have
encountered the DOM before in JavaScript,

57
00:03:58.712 --> 00:04:00.660
&gt;&gt; The header in the divs.

58
00:04:00.660 --> 00:04:04.540
&gt;&gt; So in this case, the header and

59
00:04:04.540 --> 00:04:09.614
divs that we drew out before in our tree,

60
00:04:09.614 --> 00:04:13.647
thank you [LAUGH] and in different

61
00:04:13.647 --> 00:04:18.597
documents that might look different.

62
00:04:18.597 --> 00:04:23.276
So depending on what you have
in your particular page,

63
00:04:23.276 --> 00:04:29.397
document.body.children is going
to return some group of elements.

64
00:04:29.397 --> 00:04:30.243
In this case,

65
00:04:30.243 --> 00:04:35.121
it's something called an HTML collection
that has some other stuff inside of it.

66
00:04:35.121 --> 00:04:38.780
And we can sort of get a sense here
that there's like a header in there.

67
00:04:38.780 --> 00:04:42.950
There's this div with an ID
called board in there.

68
00:04:42.950 --> 00:04:47.368
And this is gonna be different on
different web pages, but in our page,

69
00:04:47.368 --> 00:04:51.711
which we looked at before, we had
a header and a div inside of the body,

70
00:04:51.711 --> 00:04:54.680
that is what we're gonna turn up here,
great.

71
00:04:54.680 --> 00:04:59.349
So, this is going to be all the elements
contained within, in this case, the body.

72
00:04:59.349 --> 00:05:03.371
And as we're gonna see later, we can use
.children on other elements to find out

73
00:05:03.371 --> 00:05:05.163
what else they have inside of them.

74
00:05:05.163 --> 00:05:10.588
So this is how we can kinda
drill down into the DOM tree.

75
00:05:10.588 --> 00:05:16.709
Okay, what about this one,
document.getelEmentById(board)?

76
00:05:16.709 --> 00:05:19.677
What do you think this is gonna give us?

77
00:05:19.677 --> 00:05:22.082
&gt;&gt; Is it the div that you created earlier?

78
00:05:22.082 --> 00:05:25.254
&gt;&gt; The div that we created, well,
we all ready had it kind of,

79
00:05:25.254 --> 00:05:27.101
it was all ready there in the page.

80
00:05:27.101 --> 00:05:35.214
But yes we have a div in our page that
has this attribute Id equals board.

81
00:05:35.214 --> 00:05:38.165
In this case represents this
little tic tac toe game board.

82
00:05:38.165 --> 00:05:42.843
But you might be working with all
kinds of different HTML elements here.

83
00:05:42.843 --> 00:05:48.121
And often, assigning an Id to an element
is a really great way to say,

84
00:05:48.121 --> 00:05:50.669
hey, this element is special and

85
00:05:50.669 --> 00:05:55.492
I want to be able to refer to it
by an individual indicator an Id,

86
00:05:55.492 --> 00:06:00.054
an identifier that picks out
only this element in the page.

87
00:06:00.054 --> 00:06:03.793
So Ids are supposed to be
unique to a single element.

88
00:06:03.793 --> 00:06:08.525
You ideally shouldn't have in your
HTML document multiple elements

89
00:06:08.525 --> 00:06:11.553
with the Id attribute
set to the same value.

90
00:06:11.553 --> 00:06:16.192
So in this case, so document,
sorry, just to make this

91
00:06:16.192 --> 00:06:21.228
a little bit easier to read here,
there's a fun little thing

92
00:06:21.228 --> 00:06:26.487
I can type in clear to reset kind
of clear out all of the history.

93
00:06:26.487 --> 00:06:29.752
So clear with two parentheses like that.

94
00:06:29.752 --> 00:06:33.471
We'll wipe out whatever
stuff I saw before.

95
00:06:33.471 --> 00:06:37.332
And so now if I enter
document.getElementById, and

96
00:06:37.332 --> 00:06:41.124
notice the capitalization
here that is important.

97
00:06:41.124 --> 00:06:46.412
So capital E, capital B capital I,
and then pass in the name or the Id,

98
00:06:46.412 --> 00:06:52.164
sorry, of a particular element that
will return whatever element that is.

99
00:06:52.164 --> 00:06:54.250
In this case, it's a div.

100
00:06:54.250 --> 00:06:58.975
In some other case,
it might be some other element, P for

101
00:06:58.975 --> 00:07:04.003
a paragraph for, an H1 or
whatever other element you want.

102
00:07:04.003 --> 00:07:08.200
So get element by Id is a really useful
way to pick out a particular element,

103
00:07:08.200 --> 00:07:10.343
an individual element from the page.

104
00:07:12.692 --> 00:07:17.191
So, if for whatever reason, you have two
elements with the same id, which again,

105
00:07:17.191 --> 00:07:21.906
you really shouldn't, but maybe somebody
else wrote the page and it's their fault.

106
00:07:21.906 --> 00:07:25.210
In this case, it'll give you the first
one it finds, that has that Id.

107
00:07:25.210 --> 00:07:27.623
But usually id's should be unique, so

108
00:07:27.623 --> 00:07:30.556
it should give you the one
element with this Id.

109
00:07:30.556 --> 00:07:35.275
And there is another handy little
invocation I can use to essentially use

110
00:07:35.275 --> 00:07:39.309
CSS selector syntax to pick out
certain elements of the page.

111
00:07:39.309 --> 00:07:45.723
So for example, the selector for an id is
this kind of hash, the number pound sign.

112
00:07:45.723 --> 00:07:50.684
So if I use a spell called
query selector in JavaScript

113
00:07:50.684 --> 00:07:55.979
document.querySelector, I
can enter in a CSS selector

114
00:07:55.979 --> 00:08:01.951
like #board to indicate I want
the element with the Id of board.

115
00:08:01.951 --> 00:08:05.207
So let's go back to our console here and
try that out.

116
00:08:05.207 --> 00:08:09.582
And it's going to pick out
the same element as get

117
00:08:09.582 --> 00:08:13.752
element by Id with just
the Id no hash returns.

118
00:08:13.752 --> 00:08:16.574
So these are equivalent.

119
00:08:16.574 --> 00:08:18.427
Cool, questions so far?

120
00:08:20.554 --> 00:08:26.882
Excellent, all right, so, sometimes we
want to pick out elements differently.

121
00:08:26.882 --> 00:08:33.858
Sometimes maybe we don't have an Id or we
wanna choose an element of a certain kind.

122
00:08:33.858 --> 00:08:37.038
So a certain type of element or
a certain tag for elements.

123
00:08:37.038 --> 00:08:40.727
So we also have the option
get elements by TagName.

124
00:08:40.727 --> 00:08:44.519
In this case, if I were to run
get element by TagName h1,

125
00:08:44.519 --> 00:08:48.391
what do you think this would
return on our Tic Tac Toe page?

126
00:08:48.391 --> 00:08:52.573
What would this pick out of the DOM?

127
00:08:52.573 --> 00:08:55.003
&gt;&gt; First header.

128
00:08:55.003 --> 00:08:58.289
&gt;&gt; In this case, what what is that
header just in our page here?

129
00:09:00.779 --> 00:09:02.928
&gt;&gt; Tic Tac Toe,
&gt;&gt; Tic Tac Toe, yes, so

130
00:09:02.928 --> 00:09:07.252
we have this h1 element that has
the text Tic Tac Toe inside of it.

131
00:09:07.252 --> 00:09:11.201
And if I type document
get elements by tag name,

132
00:09:11.201 --> 00:09:14.773
there's only one h1 element in the page.

133
00:09:14.773 --> 00:09:18.751
So when I, sorry,
get elements by tag name h1,

134
00:09:18.751 --> 00:09:23.409
I'm actually going to get
a collection cuz there might be

135
00:09:23.409 --> 00:09:28.666
multiple h1s in the page, but
in this case, this collection.

136
00:09:28.666 --> 00:09:33.225
If you'll notice it just has one h1
in it and it says its length is 1,

137
00:09:33.225 --> 00:09:36.380
cuz there's only one h1
element in this page.

138
00:09:36.380 --> 00:09:39.912
On a different page,
you might maybe have multiple h1 elements.

139
00:09:39.912 --> 00:09:43.881
Probably not because h1 should sort of
be the major thing stylistically but

140
00:09:43.881 --> 00:09:47.303
it's possible you'd have multiple
elements with the same tag.

141
00:09:47.303 --> 00:09:51.792
So this is going to pick out
all of the h1 elements and

142
00:09:51.792 --> 00:09:55.784
what if we were trying
to use that CSS version?

143
00:09:55.784 --> 00:09:58.952
What if we were trying to
use document query selector?

144
00:09:58.952 --> 00:10:03.559
What would be the CSS for this,
does anybody know how we could pick out

145
00:10:03.559 --> 00:10:07.306
all of the h1 elements in a page and
with a CSS selector?

146
00:10:10.506 --> 00:10:12.594
It's a little bit of a trick question,
cuz it's the same.

147
00:10:12.594 --> 00:10:17.495
[LAUGH] So in CSS, when we just type the
name of an element, that would select, or

148
00:10:17.495 --> 00:10:20.274
sorry, the tag of an element,
in this case,

149
00:10:20.274 --> 00:10:22.787
h1 that would select the h1 elements.

150
00:10:22.787 --> 00:10:25.276
And so in this case, unlike with the Id,

151
00:10:25.276 --> 00:10:29.523
where we only expect there to be one
element with that particular Id,

152
00:10:29.523 --> 00:10:33.794
we might have multiple elements
matching this this query selector.

153
00:10:33.794 --> 00:10:37.107
In this case, it's the h1 element
is what we're trying to select.

154
00:10:37.107 --> 00:10:43.245
And so, that's where instead of query
selector as we use for the Id example,

155
00:10:43.245 --> 00:10:48.250
we can use the spell,
document.query selector all to collect

156
00:10:48.250 --> 00:10:53.836
all of the objects of the elements of
a particular tag type in the page.

157
00:10:53.836 --> 00:10:57.513
So this is kind of equivalent
to get elements by tag name.

158
00:10:57.513 --> 00:11:00.400
And as we're talking through
this feel free to play around,

159
00:11:00.400 --> 00:11:03.299
try out different selectors,
try out different tag names.

160
00:11:03.299 --> 00:11:08.254
Just another way we can select things is
by the class that is assigned to them.

161
00:11:08.254 --> 00:11:15.352
So in HTML we have the concept
of a class attribute.

162
00:11:15.352 --> 00:11:20.851
Oops, so for example,
in our header here we have

163
00:11:20.851 --> 00:11:26.361
a p element inside of a div
with a class of player.

164
00:11:26.361 --> 00:11:31.108
And that's going to represent like in this
case it's just a little descriptor showing

165
00:11:31.108 --> 00:11:34.762
that I am the player assigned to
the letter x in our Tic Tac Toe game.

166
00:11:34.762 --> 00:11:38.130
And if I wanna pick out elements
with a particular class,

167
00:11:38.130 --> 00:11:40.805
I have this spell get
elements by class name.

168
00:11:40.805 --> 00:11:44.003
Does what it says on the tin as they say.

169
00:11:44.003 --> 00:11:50.296
So this is going to pick out all
the elements with that particular class.

170
00:11:50.296 --> 00:11:56.227
And we can prove that if you
don't believe me, I can show you.

171
00:11:56.227 --> 00:12:02.042
So if we do
document.getElementsByClassName player,

172
00:12:02.042 --> 00:12:10.285
I get a couple of player elements because
I have a player x is p1 and a player O p2.

173
00:12:10.285 --> 00:12:13.926
Mark and I are playing tic tac
toe in this example [LAUGH].

174
00:12:13.926 --> 00:12:19.628
Okay, we said previously
that we had a similar

175
00:12:19.628 --> 00:12:25.476
spell we could use called
queryselectorall and

176
00:12:25.476 --> 00:12:30.022
look at my browser being so helpful.

177
00:12:30.022 --> 00:12:32.792
That we said we could do like for example,

178
00:12:32.792 --> 00:12:36.126
we could get all of the h1
elements by doing that.

179
00:12:36.126 --> 00:12:41.785
Any idea what selector what CSS selector
we could use to get all of the elements

180
00:12:41.785 --> 00:12:47.117
with the class player, so the equivalent
to get elements by class name?

181
00:12:47.117 --> 00:12:48.991
&gt;&gt; ElementsByClassname.

182
00:12:48.991 --> 00:12:54.857
&gt;&gt; So we can use the same method that we
used before so this query selector all.

183
00:12:54.857 --> 00:12:59.398
We can use, the question is,
what do we pass in instead of that h1,

184
00:12:59.398 --> 00:13:04.182
what do we pass into select or
earlier we use the singular query selector

185
00:13:04.182 --> 00:13:07.317
with #board to get
the element with Id board.

186
00:13:07.317 --> 00:13:10.984
We use query selector all with
h1 to get the h1 elements.

187
00:13:10.984 --> 00:13:15.771
And to get all the elements of the
particular class we can use, yeah, Chan?

188
00:13:15.771 --> 00:13:18.083
&gt;&gt; They're share the same .player.

189
00:13:18.083 --> 00:13:21.721
&gt;&gt; Exactly, we can use the CSS selector
for a particular class is a dot, and

190
00:13:21.721 --> 00:13:23.105
then the name of the class.

191
00:13:23.105 --> 00:13:27.838
So this is just a little CSS
fun that we're having here.

192
00:13:27.838 --> 00:13:32.198
The point is that we can use the same
way that we in CSS interact with

193
00:13:32.198 --> 00:13:34.984
different types of elements in the page.

194
00:13:34.984 --> 00:13:36.299
We can use that in JavaScript.

195
00:13:36.299 --> 00:13:39.693
So if you're comfortable with CSS,
you've got a leg up.

196
00:13:39.693 --> 00:13:43.900
And if not, if you'd rather spell it
out what you're doing like for example,

197
00:13:43.900 --> 00:13:48.299
get elements by class name is maybe also
helpful mnemonic to remember what you're

198
00:13:48.299 --> 00:13:49.337
trying to do here.

199
00:13:49.337 --> 00:13:53.479
So whichever you're more
comfortable with is totally valid.

200
00:13:53.479 --> 00:13:54.760
You have lots of options,

201
00:13:54.760 --> 00:13:58.721
this is generally true in JavaScript there
is usually not just one way to do things

202
00:13:58.721 --> 00:14:01.535
there's usually 8000
different ways to do things.

203
00:14:01.535 --> 00:14:07.069
So everybody who writes JavaScript
kind of develops their own feel for

204
00:14:07.069 --> 00:14:11.498
how they like to write it and
it's a adventure.

205
00:14:11.498 --> 00:14:12.988
There are sometimes advantages and

206
00:14:12.988 --> 00:14:15.628
disadvantages which we can talk
about throughout the course.

207
00:14:15.628 --> 00:14:19.327
And in general in our JavaScript lives,
we'll discover as we go.

208
00:14:19.327 --> 00:14:22.920
But there are lots of different
ways to do the same thing.

209
00:14:22.920 --> 00:14:30.034
So just to prove that this works, we can
do document.query.SelectorAll, player.

210
00:14:30.034 --> 00:14:34.117
And remember there's look at
these quotes around these things.

211
00:14:34.117 --> 00:14:37.754
This is important because we're gonna talk
later about what that does in JavaScript.

212
00:14:37.754 --> 00:14:42.472
But so, if we put in quotes the the name
of an element that gives us all those

213
00:14:42.472 --> 00:14:47.040
elements dot and then the name of a class
gives us all the classes hash and

214
00:14:47.040 --> 00:14:49.270
the name of an Id gives us an Id etc.

