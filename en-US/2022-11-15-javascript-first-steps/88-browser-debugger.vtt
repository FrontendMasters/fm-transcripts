WEBVTT

1
00:00:00.000 --> 00:00:06.568
Another thing that we can do is use
the browser's built in debugger.

2
00:00:06.568 --> 00:00:11.072
So we have in our dev tools here,
we've seen so

3
00:00:11.072 --> 00:00:17.666
far we have our inspector,
where we can look at our HTML and our CSS.

4
00:00:17.666 --> 00:00:21.767
We have our console where we can talk
to JavaScript as we've been seeing.

5
00:00:21.767 --> 00:00:25.921
And we have a tab called debugger.

6
00:00:25.921 --> 00:00:31.081
What this does is,
it is really really handy feature

7
00:00:31.081 --> 00:00:36.139
built into most browsers like Firefox and
Chrome.

8
00:00:36.139 --> 00:00:40.298
Both have really great kind of
developer workflows for this.

9
00:00:40.298 --> 00:00:43.815
And what it does is, it lets us see all
of the code that our pages running,

10
00:00:43.815 --> 00:00:46.075
in this case it's coming
from this HTML file.

11
00:00:46.075 --> 00:00:48.938
But if we were working with
a bunch of different modules,

12
00:00:48.938 --> 00:00:51.692
we might be seeing those
different.js files in here.

13
00:00:51.692 --> 00:00:58.408
And it shows us the source code that we're
running through when we run this file.

14
00:00:58.408 --> 00:01:04.018
And so here for example, I'm trying
to load my doggo fetch page, and

15
00:01:04.018 --> 00:01:10.619
something is going wrong, I'm not getting
my doggo, my doggo is not fetching.

16
00:01:10.619 --> 00:01:14.102
So let's try to find out what is going on.

17
00:01:18.840 --> 00:01:26.280
So, one thing we can do in our code
is write a special keyword, debugger.

18
00:01:26.280 --> 00:01:29.147
And again,
this is maybe a temporary thing.

19
00:01:29.147 --> 00:01:32.603
But what we can do is if we
insert a debugger statement,

20
00:01:32.603 --> 00:01:36.227
which is just the word debugger and
a semicolon usually.

21
00:01:36.227 --> 00:01:41.778
What that does is it creates
what we call a breakpoint or

22
00:01:41.778 --> 00:01:45.407
a pause in our JavaScript program.

23
00:01:45.407 --> 00:01:51.053
And if we are running our code in
our browser with the debugger open,

24
00:01:51.053 --> 00:01:53.637
JavaScript will pause there.

25
00:01:53.637 --> 00:01:57.419
And let us look around and
see what's going on.

26
00:01:57.419 --> 00:02:00.626
So let's try to add one in our code,
something is going wrong.

27
00:02:00.626 --> 00:02:07.525
So let's go to our loadData function,
our loadQuizData function.

28
00:02:07.525 --> 00:02:12.265
Now we know that this line is
working because I see the words

29
00:02:12.265 --> 00:02:16.342
fetching doggo in my webpage,
so that happened.

30
00:02:16.342 --> 00:02:18.175
So something is going wrong after that.

31
00:02:18.175 --> 00:02:22.526
So why don't we just put a little debugger
statement right here, I'm gonna save.

32
00:02:22.526 --> 00:02:24.620
Now I'm going to go back to my,

33
00:02:24.620 --> 00:02:29.224
I'm loading this local file in my browser,
I'm going to refresh.

34
00:02:29.224 --> 00:02:33.795
And now we see this little message
paused on debugger statement.

35
00:02:33.795 --> 00:02:38.019
And in my debugger,
I see this big pause here, and

36
00:02:38.019 --> 00:02:42.946
I see that we are now at this
line of code 191 in our case,

37
00:02:42.946 --> 00:02:46.182
where I had that debugger statement.

38
00:02:46.182 --> 00:02:50.587
Okay, now there's a lot going on here,
so let's take a look.

39
00:02:50.587 --> 00:02:53.605
One of the things that we can
see here are, there's this, and

40
00:02:53.605 --> 00:02:56.113
it's slightly different
in different browsers.

41
00:02:56.113 --> 00:03:01.201
So right now I'm in Firefox, if you're in
Chrome it's gonna look slightly different.

42
00:03:01.201 --> 00:03:04.133
But the browsers all
have kind of concepts of

43
00:03:04.133 --> 00:03:08.262
being able to investigate what's
happening in our program.

44
00:03:08.262 --> 00:03:12.893
So, one thing we have here is what's
called the function call stack.

45
00:03:12.893 --> 00:03:17.983
Not getting into a ton of details about
this, but this is essentially JavaScript's

46
00:03:17.983 --> 00:03:22.582
notion of when I'm calling a function
within a function within a function.

47
00:03:22.582 --> 00:03:25.753
JavaScript stacks them up and
sort of says all right,

48
00:03:25.753 --> 00:03:28.791
right now we are in our module,
in our HTML module.

49
00:03:28.791 --> 00:03:31.862
And we are inside our
loadQuizData function,

50
00:03:31.862 --> 00:03:35.494
that is the function that's
currently being called.

51
00:03:35.494 --> 00:03:39.741
So that's what we say is at
the top of the call stack.

52
00:03:39.741 --> 00:03:42.565
Now we also have, we have a whole
bunch of other stuff going on.

53
00:03:42.565 --> 00:03:46.764
But one thing we have is,
here in Firefox we can see these,

54
00:03:46.764 --> 00:03:49.520
the scopes that are in play right now.

55
00:03:49.520 --> 00:03:51.718
So which variables are in play?

56
00:03:51.718 --> 00:03:55.854
And we have in this case,
we're inside our loadQuizData function.

57
00:03:55.854 --> 00:03:59.941
So we have our local
function scope with various

58
00:03:59.941 --> 00:04:04.546
values that we're gonna
have inside this function.

59
00:04:04.546 --> 00:04:09.238
So for example, it already knows because
it read ahead in our code a little bit, it

60
00:04:09.238 --> 00:04:13.862
already knows that we're about to declare
some new variables like doggo image,

61
00:04:13.862 --> 00:04:15.372
URL, and correct breed.

62
00:04:15.372 --> 00:04:18.675
But we haven't declared or
assigned values to them yet, so

63
00:04:18.675 --> 00:04:21.192
it shows them that they're uninitialized.

64
00:04:21.192 --> 00:04:25.459
But as we're running our code, we can
see the different values of things here.

65
00:04:25.459 --> 00:04:30.703
So let's go ahead,
what we're gonna do now we're paused, but

66
00:04:30.703 --> 00:04:35.667
what we wanna do is what's
called step through our program.

67
00:04:35.667 --> 00:04:41.409
So we wanna take it real slow, and
go one step at a time through our code and

68
00:04:41.409 --> 00:04:44.245
find out what JavaScript is doing.

69
00:04:44.245 --> 00:04:47.430
You'll notice in your
debugger some buttons, and

70
00:04:47.430 --> 00:04:52.393
they're gonna look slightly different
in different browsers that allow you to

71
00:04:52.393 --> 00:04:56.034
control the movements of
the debugger through your code.

72
00:04:56.034 --> 00:05:00.149
So one of them is going to be like
a play button that just says, hey,

73
00:05:00.149 --> 00:05:01.411
keep trying to run.

74
00:05:01.411 --> 00:05:07.066
And that's going to run
until the next breakpoint or

75
00:05:07.066 --> 00:05:12.086
the next debugger
statement that we've set.

76
00:05:12.086 --> 00:05:16.387
And another one that we're
going to have is to step over.

77
00:05:16.387 --> 00:05:17.655
Let's see if this shows up.

78
00:05:17.655 --> 00:05:25.156
It's called step over, meaning step into
the next line of code and try to run it.

79
00:05:25.156 --> 00:05:28.520
So let me move this down so we can see
a little bit more of our code here.

80
00:05:31.929 --> 00:05:36.474
Okay, so
if we step over this debugger line.

81
00:05:36.474 --> 00:05:42.997
Now we're gonna go to the next line and
JavaScript is going to do the next thing.

82
00:05:42.997 --> 00:05:49.867
And the next thing that it has to do
is await this fetch message call.

83
00:05:49.867 --> 00:05:53.474
And so nothing has really
changed in our scopes so far.

84
00:05:53.474 --> 00:05:58.137
Another option that we have in our
stepping through our debugger code when

85
00:05:58.137 --> 00:06:01.446
we're about to call
a function like fetchMessage,

86
00:06:01.446 --> 00:06:04.997
is we can do what's called
stepping into the function.

87
00:06:04.997 --> 00:06:07.705
So this is where we're not just
going to call the function,

88
00:06:07.705 --> 00:06:10.585
we're actually going to break
it down even further than that.

89
00:06:10.585 --> 00:06:15.334
And we're gonna step into
the fetchMessage function code.

90
00:06:15.334 --> 00:06:17.266
So if I now press Step in,

91
00:06:17.266 --> 00:06:22.236
it's going to advance JavaScript
into the next function call.

92
00:06:22.236 --> 00:06:23.784
So let me click that.

93
00:06:23.784 --> 00:06:29.912
Now we've jumped into our
fetchMessage function.

94
00:06:29.912 --> 00:06:33.588
And we haven't really done anything yet,
but

95
00:06:33.588 --> 00:06:38.688
if we look in our scopes,
we can see that we are now in a new scope.

96
00:06:38.688 --> 00:06:42.888
Now we're in the fetchMessage
function scope, and

97
00:06:42.888 --> 00:06:46.424
that's gonna have some other values here.

98
00:06:46.424 --> 00:06:52.339
And what we're trying to do is
understand what is going wrong,

99
00:06:52.339 --> 00:06:54.906
and so now we can see that for

100
00:06:54.906 --> 00:07:00.837
example inside of our fetchMessage
we had this parameter URL.

101
00:07:00.837 --> 00:07:04.642
And URL now has a value
inside of our function scope,

102
00:07:04.642 --> 00:07:08.290
inside of our fetchMessage
scope of this string.

103
00:07:08.290 --> 00:07:12.285
And if anybody has a really good eye,
maybe they can spot something.

104
00:07:12.285 --> 00:07:16.949
But for now, let's just say this is gonna
give us some information about what

105
00:07:16.949 --> 00:07:19.766
fetchMessage is seeing
that might be useful.

106
00:07:19.766 --> 00:07:23.089
So now the next thing JavaScript
is gonna do is try to call

107
00:07:23.089 --> 00:07:24.937
that fetch built in function.

108
00:07:24.937 --> 00:07:28.251
We don't really need to step into that
function because that's gonna be a lot of

109
00:07:28.251 --> 00:07:30.486
complicated stuff, and
we didn't write that code.

110
00:07:30.486 --> 00:07:34.633
So for now, we can pretty much
trust fetch is gonna do its job.

111
00:07:34.633 --> 00:07:38.800
But we can do is step over this function,
this next line of code or

112
00:07:38.800 --> 00:07:41.733
this next thing that
JavaScript is gonna do,

113
00:07:41.733 --> 00:07:46.530
which we want it to try to run this
line const response equals await fetch.

114
00:07:46.530 --> 00:07:47.492
Question.

115
00:07:47.492 --> 00:07:50.884
&gt;&gt; Name of the breed is missing.

116
00:07:50.884 --> 00:07:52.699
&gt;&gt; So the name of the breed is missing.

117
00:07:52.699 --> 00:07:57.811
So actually we were looking at

118
00:07:57.811 --> 00:08:05.175
a few different endpoints on this dog API.

119
00:08:05.175 --> 00:08:08.815
Let's look at the dog CEO API
documentation real quick.

120
00:08:12.653 --> 00:08:16.262
It's a fun one for projects and
for testing stuff out.

121
00:08:16.262 --> 00:08:22.738
So we had, for example, earlier been
looking at this kind of url, right?

122
00:08:22.738 --> 00:08:27.417
Like breed slash hound slash images or
in our case we were looking for,

123
00:08:27.417 --> 00:08:29.490
wow, that's a lot of images.

124
00:08:29.490 --> 00:08:31.041
Okay, okay, all right.

125
00:08:31.041 --> 00:08:35.365
[LAUGH] We were looking for
sub breeds for example earlier.

126
00:08:35.365 --> 00:08:40.074
So, we had used this endpoint of
slash breed slash hound slash list,

127
00:08:40.074 --> 00:08:43.499
where we did need to include
the name of the breed.

128
00:08:43.499 --> 00:08:48.818
But there's actually another
endpoint which is what

129
00:08:48.818 --> 00:08:55.552
we're using in our random guest
the dog page here which is our game,

130
00:08:55.552 --> 00:09:01.003
which is this endpoint to
fetch a single random image.

131
00:09:01.003 --> 00:09:05.937
And that was what was returning back
a JSON object with the message property

132
00:09:05.937 --> 00:09:08.062
being some specific image URL.

133
00:09:08.062 --> 00:09:12.987
Which we can then use as the source of
the image element that we're loading

134
00:09:12.987 --> 00:09:14.027
into our page.

135
00:09:14.027 --> 00:09:16.765
So this is the endpoint
that we're trying to hit.

136
00:09:16.765 --> 00:09:22.281
Does anybody notice anything
that's going on here.

137
00:09:22.281 --> 00:09:26.822
So the endpoint that we
need to hit is dog dot ceo

138
00:09:26.822 --> 00:09:31.723
slash api slash breeds
slash image slash random.

139
00:09:31.723 --> 00:09:39.215
If we go back into our debugger,
we can look at the URL value here.

140
00:09:39.215 --> 00:09:42.515
And we can even,
if we go into our console,

141
00:09:42.515 --> 00:09:45.925
right now we're paused in our JavaScript.

142
00:09:45.925 --> 00:09:51.191
We're paused in the middle, and we're in
the middle of this fetch message function.

143
00:09:51.191 --> 00:09:55.771
So we can access anything in that
function scope, even at the console.

144
00:09:55.771 --> 00:10:01.249
Now because we're paused, we're in matrix

145
00:10:01.249 --> 00:10:06.008
bullet time state of JavaScript here,

146
00:10:06.008 --> 00:10:09.769
so we can stop and look around.

147
00:10:09.769 --> 00:10:14.631
And so if anybody notices something
about this URL that we're trying to hit.

148
00:10:18.138 --> 00:10:20.424
We'll call it out in a second.

149
00:10:20.424 --> 00:10:24.487
But let's just double check what's
happening here, why this page isn't,

150
00:10:24.487 --> 00:10:27.817
what's happening where we're
hitting an error in this page.

151
00:10:27.817 --> 00:10:31.362
So what we're gonna do is we're just
gonna keep trying to run our code.

152
00:10:31.362 --> 00:10:35.939
So I'm going to use step over to
try to run the next line of code.

153
00:10:35.939 --> 00:10:41.823
And, a little error thing popped up here,

154
00:10:41.823 --> 00:10:44.911
and if I go to my console,

155
00:10:44.911 --> 00:10:49.926
I see that I get a 404 not found error.

156
00:10:49.926 --> 00:10:54.099
Which yeah,
we can check again on our httpcat404,

157
00:10:54.099 --> 00:10:56.736
means, a resource was not found.

158
00:10:56.736 --> 00:10:59.376
You've probably run into this
before when you find it,

159
00:10:59.376 --> 00:11:03.544
a lot of websites have a 404 page, that
says, no I couldn't find your web page.

160
00:11:03.544 --> 00:11:05.454
So this is that error,

161
00:11:05.454 --> 00:11:11.095
which means there is nothing at
the URL that we tried to fetch from.

162
00:11:11.095 --> 00:11:17.465
And so if we check this string, so the URL
string that we're trying to look for

163
00:11:17.465 --> 00:11:22.561
is dog dot ceo slash api slash
breeds slash image slash rando,

164
00:11:22.561 --> 00:11:27.951
instead of what the API documentation
says we should be getting,

165
00:11:27.951 --> 00:11:29.913
which is slash random.

166
00:11:29.913 --> 00:11:34.976
So somehow I accidentally
deleted a M from my URL here,

167
00:11:34.976 --> 00:11:38.945
and so there's nothing at that endpoint.

168
00:11:38.945 --> 00:11:42.793
That endpoint doesn't exist in this API,
there is no resource there.

169
00:11:42.793 --> 00:11:45.470
So we're getting this 404 error.

170
00:11:45.470 --> 00:11:49.974
Now this is just one example, and
we actually probably could have seen that

171
00:11:49.974 --> 00:11:54.063
error pop up in the console before anyway,
we had run the debugger.

172
00:11:54.063 --> 00:11:57.925
But just to show you that it
could have been something else,

173
00:11:57.925 --> 00:12:01.479
it could have been perhaps I
had an undefined somewhere

174
00:12:01.479 --> 00:12:06.284
that I can see by looking at my scopes and
seeing what is coming back there.

175
00:12:06.284 --> 00:12:08.534
And so we can set these breakpoints.

176
00:12:08.534 --> 00:12:12.206
One way that we can do it is
with that debugger statement.

177
00:12:12.206 --> 00:12:16.367
Another way that we can do
it is even if we don't wanna

178
00:12:16.367 --> 00:12:19.496
edit our code right in our JavaScript.

179
00:12:19.496 --> 00:12:23.832
So let's go back and
take out our debugger statement.

180
00:12:23.832 --> 00:12:24.489
Take it back out.

181
00:12:24.489 --> 00:12:27.075
So now if I run the page again,

182
00:12:27.075 --> 00:12:33.084
if I refresh Well,
if I finish running this page and

183
00:12:33.084 --> 00:12:37.689
then refresh, it didn't pause because
I have no debugger statement.

184
00:12:37.689 --> 00:12:39.834
I still got my error.

185
00:12:39.834 --> 00:12:45.117
So I could see in the console that there
was this network error of a 404 response.

186
00:12:45.117 --> 00:12:49.874
But I could also set a breakpoint
manually in the debugger

187
00:12:49.874 --> 00:12:53.949
tools by clicking on
the number of a line of code.

188
00:12:53.949 --> 00:12:58.376
And again, each browser has a slightly
different interface, but they all pretty

189
00:12:58.376 --> 00:13:02.177
much work this way, that you can click
on the number for a line of code.

190
00:13:02.177 --> 00:13:07.150
So, if I wanted to do the equivalent
thing of my the debugger

191
00:13:07.150 --> 00:13:11.339
statement that I set in
between these lines here.

192
00:13:11.339 --> 00:13:14.945
I can do that in the browser by
clicking on this line here, and

193
00:13:14.945 --> 00:13:18.715
we'll see it enter it's inserted
it's a little pause point.

194
00:13:18.715 --> 00:13:24.926
So, now If I rerun the page,
it's going to pause on that break point.

195
00:13:24.926 --> 00:13:29.408
So, we have two ways of setting
a break point, we can use the debugger

196
00:13:29.408 --> 00:13:34.380
statement in our code or we can set it
by clicking on the line in our debugger.

197
00:13:34.380 --> 00:13:34.995
Question?

198
00:13:34.995 --> 00:13:36.902
&gt;&gt; Sorry if you already fixed this but

199
00:13:36.902 --> 00:13:40.527
they're saying spelling incorrectly
spelled the word random.

200
00:13:40.527 --> 00:13:41.402
&gt;&gt; Exactly.

201
00:13:41.402 --> 00:13:42.042
&gt;&gt; Yeah.

202
00:13:42.042 --> 00:13:46.873
&gt;&gt; Yeah so this turns out to be the
problem here which we can see by looking

203
00:13:46.873 --> 00:13:47.551
at that.

204
00:13:47.551 --> 00:13:50.480
And here let's we can just do it again
just to show that it works the same even

205
00:13:50.480 --> 00:13:51.841
without our debugger statement.

206
00:13:51.841 --> 00:13:55.788
Now we're paused in the same
place that we were paused before,

207
00:13:55.788 --> 00:14:00.038
we're just using it by clicking
into the dev tools in the debugger.

208
00:14:00.038 --> 00:14:03.302
We clicked on a line of code
to set a breakpoint instead of

209
00:14:03.302 --> 00:14:06.576
using the debugger statement,
they do the same thing.

210
00:14:06.576 --> 00:14:13.606
So now I can again step over and see that.

211
00:14:13.606 --> 00:14:19.869
Sorry, let me reload, I actually wanted to
step into, I can step into fetchMessage.

212
00:14:19.869 --> 00:14:25.864
And in my scope of fetchMessage,
I can see that URL ends in rando,

213
00:14:25.864 --> 00:14:31.102
which I could also check by asking for
URL in the console.

214
00:14:31.102 --> 00:14:34.096
Because again,
we're paused inside the function,

215
00:14:34.096 --> 00:14:36.368
so we have access to the function scope.

216
00:14:36.368 --> 00:14:39.136
And I see oops, I forgot an M.

217
00:14:39.136 --> 00:14:42.683
So now I can go back to my file and

218
00:14:42.683 --> 00:14:47.882
put the M where it's supposed to be and
save.

219
00:14:47.882 --> 00:14:53.729
And now, if I reload the page Sorry,

220
00:14:53.729 --> 00:14:56.979
so right now I'm paused, so
JavaScript isn't gonna do anything.

221
00:14:56.979 --> 00:15:00.838
I can resume,
I can play through to the rest of

222
00:15:00.838 --> 00:15:04.403
my code by pressing the play button here.

223
00:15:04.403 --> 00:15:06.812
So now I'm gonna reload the page.

224
00:15:06.812 --> 00:15:10.892
Now that I've made my fix,
we're still paused on this break

225
00:15:10.892 --> 00:15:14.414
point because I didn't
remove the break point yet.

226
00:15:14.414 --> 00:15:19.795
But now,
if I step in to my fetchMessage function,

227
00:15:19.795 --> 00:15:25.562
I see that the URL now inside
of my fetchMessage scope.

228
00:15:25.562 --> 00:15:29.458
Just gotta move this up, so
we can see a little better,

229
00:15:29.458 --> 00:15:34.390
inside of my fetchMessage scope I now
see that the URL has that M on it.

230
00:15:34.390 --> 00:15:36.425
Okay, so we should be looking better.

231
00:15:36.425 --> 00:15:40.494
Let's try, let's step over this fetch and
make sure that we get back.

232
00:15:40.494 --> 00:15:44.028
So we were stepping through our function,

233
00:15:44.028 --> 00:15:48.847
we had finally stepped out of
the fetchMessage function.

234
00:15:48.847 --> 00:15:54.154
And so we stepped through,
now we see that the doggo

235
00:15:54.154 --> 00:16:01.694
image URL was set to an actual JPEG
image URL, which is what we expected.

236
00:16:01.694 --> 00:16:02.885
Great.

237
00:16:02.885 --> 00:16:07.721
So now feeling pretty confident
that the problem was solved,

238
00:16:07.721 --> 00:16:11.535
and we can continue with
the rest of our program.

239
00:16:11.535 --> 00:16:16.200
And so what is called resume the execution
of the program, I can tell JavaScript,

240
00:16:16.200 --> 00:16:19.241
okay, we're done pausing,
we're done stepping,

241
00:16:19.241 --> 00:16:21.421
we can just go ahead and keep running.

242
00:16:21.421 --> 00:16:23.936
And in fact,
I don't need my breakpoint anymore.

243
00:16:23.936 --> 00:16:26.435
So what I can do is remove my breakpoint,

244
00:16:26.435 --> 00:16:29.383
which I had set by clicking
on this line number.

245
00:16:29.383 --> 00:16:32.607
I can click on the line number
again to remove the breakpoint so

246
00:16:32.607 --> 00:16:35.779
that the next time I reload the page,
it won't pause there.

247
00:16:35.779 --> 00:16:40.035
And I can hit this Play button
to resume loading the page, and

248
00:16:40.035 --> 00:16:42.803
it runs through the rest of the script.

249
00:16:42.803 --> 00:16:51.240
And I get my adorable little doggo
which we saw [LAUGH] was an.

250
00:16:51.240 --> 00:16:56.087
So this is just a really to let you
know that the debugger is there to be

251
00:16:56.087 --> 00:17:00.850
your friend, to help you figure out
what is going on in your program

252
00:17:00.850 --> 00:17:05.209
which is especially useful
when we're working in modules.

253
00:17:05.209 --> 00:17:09.967
And we can't see those global scope
variables because the module has its

254
00:17:09.967 --> 00:17:10.747
own scope.

255
00:17:10.747 --> 00:17:14.920
If we pause in the execution
with the debugger breakpoint,

256
00:17:14.920 --> 00:17:18.431
we can examine the scope and
see what's going on.

257
00:17:18.431 --> 00:17:20.089
And so this can be a useful tool.

258
00:17:20.089 --> 00:17:24.514
But you can also console a log from within
a function to find out what is going on,

259
00:17:24.514 --> 00:17:26.442
and what the values of things are.

260
00:17:26.442 --> 00:17:29.924
Make sure you've got the right
strings that you thought you had, etc.

