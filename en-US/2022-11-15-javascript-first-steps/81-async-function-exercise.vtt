WEBVTT

1
00:00:00.073 --> 00:00:04.002
What we're gonna do now is we're
gonna together fill in the code that

2
00:00:04.002 --> 00:00:05.502
we already know how to do.

3
00:00:05.502 --> 00:00:08.962
We already know the procedure for
getting this data, and weighting it, and

4
00:00:08.962 --> 00:00:09.621
everything.

5
00:00:09.621 --> 00:00:14.396
We're gonna fill in TODO 3 to fill
in the body of this async function.

6
00:00:17.352 --> 00:00:21.969
Okay, so we have this two to three,
we have a fetchMessage (url).

7
00:00:21.969 --> 00:00:24.134
So, we've got our URL and

8
00:00:24.134 --> 00:00:30.148
we know how to fetch the resource at
that URL into a response, all right?

9
00:00:30.148 --> 00:00:35.032
So, we're gonna work through this,
you're gonna help me write out the thing

10
00:00:35.032 --> 00:00:39.621
that we've done like several times now,
how do I capture that response?

11
00:00:39.621 --> 00:00:42.791
Well, what function do we use
to get stuff from the internet?

12
00:00:42.791 --> 00:00:45.122
&gt;&gt; Fetch.
&gt;&gt; Fetch.

13
00:00:45.122 --> 00:00:49.655
So I'm gonna fetch the URL,
but I have to await the fetch.

14
00:00:49.655 --> 00:00:52.760
And then I wanna do something
with that value, so

15
00:00:52.760 --> 00:00:55.275
I'm going to capture it as a variable.

16
00:00:55.275 --> 00:00:58.766
Now yeah, we've been doing a lot of let's
around here and I've been not practicing

17
00:00:58.766 --> 00:01:02.132
what I preach of we don't need to reassign
this so we can use a const here, great.

18
00:01:02.132 --> 00:01:06.187
Okay, then I need some body.

19
00:01:06.187 --> 00:01:12.427
[LAUGH] So
how do I get the body of this response?

20
00:01:12.427 --> 00:01:14.275
One more time,
we've done it few times now.

21
00:01:14.275 --> 00:01:15.874
&gt;&gt; Response.json.

22
00:01:15.874 --> 00:01:17.228
&gt;&gt; Await.
&gt;&gt; It's also await.

23
00:01:17.228 --> 00:01:23.342
&gt;&gt; Await response.json,
which is gonna parse that body.

24
00:01:23.342 --> 00:01:28.964
And then we want just the message property
or the value of the message property.

25
00:01:28.964 --> 00:01:32.894
So, how do I do that
with my destructuring?

26
00:01:32.894 --> 00:01:33.520
&gt;&gt; Squiggly.

27
00:01:33.520 --> 00:01:34.907
&gt;&gt; Squigglies, yes.

28
00:01:34.907 --> 00:01:38.656
And I need my declaration keyword and
we've been using let, but

29
00:01:38.656 --> 00:01:40.050
I could also use const.

30
00:01:40.050 --> 00:01:43.253
So in the squigglies, I'm gonna
put the name of the property that

31
00:01:43.253 --> 00:01:44.713
I care about which is,
&gt;&gt; Message.

32
00:01:44.713 --> 00:01:48.254
&gt;&gt; (message) =
&gt;&gt; body.

33
00:01:48.254 --> 00:01:55.487
&gt;&gt; body, and
then I want to return the message, yeah.

34
00:01:55.487 --> 00:02:00.632
If this works,
I should be able to paste it in here.

35
00:02:00.632 --> 00:02:05.570
So now I should be able
to call fetchMessage

36
00:02:05.570 --> 00:02:09.828
on this URL, and is this gonna work?

37
00:02:09.828 --> 00:02:14.692
No, I have to add my friend await,
and my gosh,

38
00:02:14.692 --> 00:02:17.796
we got out the dogs we care about.

39
00:02:17.796 --> 00:02:21.691
[APPLAUSE] Yeah, you see that one only
took us a couple of minutes, nice.

40
00:02:21.691 --> 00:02:25.636
Okay, so now we've really
flexed our async muscles here.

41
00:02:25.636 --> 00:02:30.381
We've got a few different async
operations happening, fetching,

42
00:02:30.381 --> 00:02:35.123
parsing JSON, and we've returned
all of that in an async function,

43
00:02:35.123 --> 00:02:40.231
which means we have an async value there,
a promise that we need to await.

44
00:02:40.231 --> 00:02:41.444
Excellent work y'all.

45
00:02:41.444 --> 00:02:43.184
Any questions so far?

46
00:02:43.184 --> 00:02:43.919
&gt;&gt; Just to clarify.

47
00:02:43.919 --> 00:02:44.676
&gt;&gt; Yeah.

48
00:02:44.676 --> 00:02:50.183
&gt;&gt; When we use the function,
we have to say await name function.

49
00:02:50.183 --> 00:02:51.974
&gt;&gt; Well, we don't have to, but

50
00:02:51.974 --> 00:02:56.631
the thing is that similar to before when
we called fetch for the first time, if

51
00:02:56.631 --> 00:03:01.455
we call our fetchMessage function because
we declared it with async function.

52
00:03:01.455 --> 00:03:05.352
If I call fetchMessage,
what I get back is a promise.

53
00:03:05.352 --> 00:03:07.487
So we don't have to use await,

54
00:03:07.487 --> 00:03:12.262
but if we wanna do anything with
the value, we're gonna need await.

55
00:03:12.262 --> 00:03:14.293
So that is the difference there.

56
00:03:16.670 --> 00:03:18.216
Good question.

57
00:03:20.795 --> 00:03:23.728
Okay, yes.

58
00:03:23.728 --> 00:03:27.214
&gt;&gt; Since JavaScript is
single threaded natively and

59
00:03:27.214 --> 00:03:31.862
since it has outgrown the expectations
of the original designer,

60
00:03:31.862 --> 00:03:36.759
isn't it more performant and
easier if it were multithreaded without

61
00:03:36.759 --> 00:03:40.260
adding the fake multithreaded
of asynchronous?

62
00:03:40.260 --> 00:03:48.442
&gt;&gt; Yes, as we said, JavaScript can only do
one thing at a time, it's single threaded.

63
00:03:48.442 --> 00:03:52.576
&gt;&gt; And we're not getting into really the
computer science behind what that means

64
00:03:52.576 --> 00:03:56.909
exactly, and what threads are, and all
that stuff, but you can go read about it.

65
00:03:56.909 --> 00:03:59.832
What JavaScript was
originally intended to do and

66
00:03:59.832 --> 00:04:02.901
what it's doing now are two
very different things.

67
00:04:02.901 --> 00:04:07.564
And the complexity of programs that
JavaScript was originally designed to run

68
00:04:07.564 --> 00:04:12.436
was somewhere along the lines of log this
thing to the console when somebody clicks

69
00:04:12.436 --> 00:04:14.427
a button or something like that.

70
00:04:14.427 --> 00:04:18.556
It was very simple kind
of functionality or

71
00:04:18.556 --> 00:04:23.269
maybe change this,
send a submission of a form.

72
00:04:23.269 --> 00:04:28.211
Now we have entire, huge, complex programs
written in JavaScript where lots of

73
00:04:28.211 --> 00:04:30.182
different stuff is happening.

74
00:04:30.182 --> 00:04:35.166
And we really wish we could use all
of the computers like multicore

75
00:04:35.166 --> 00:04:40.328
processors that didn't even exist
in 1995 when we were running

76
00:04:40.328 --> 00:04:45.873
Netscape on our Apple whatever [LAUGH]
original max, I don't remember.

77
00:04:45.873 --> 00:04:48.148
And so yes, there is a big delta,

78
00:04:48.148 --> 00:04:52.460
a big difference between what
JavaScript is doing right now and

79
00:04:52.460 --> 00:04:56.706
the structure of JavaScript that
was created back in the day.

80
00:04:56.706 --> 00:05:02.019
So could there be a more efficient way to
re implement JavaScript that does not have

81
00:05:02.019 --> 00:05:06.947
this notion of asynchronous operations
that are pretending to be happening

82
00:05:06.947 --> 00:05:11.804
in the background where they're not
really happening in the background?

83
00:05:11.804 --> 00:05:16.208
And all of that comes down to this event
loop thing that we don't even know what it

84
00:05:16.208 --> 00:05:18.721
is, we're gonna go find
out about it later.

85
00:05:18.721 --> 00:05:22.652
Yes, theoretically, you could imagine
a different version of JavaScript that has

86
00:05:22.652 --> 00:05:24.104
totally different features.

87
00:05:24.104 --> 00:05:28.983
But here we are in this universe where
this is the JavaScript that we have, and

88
00:05:28.983 --> 00:05:30.559
this is how it works, and

89
00:05:30.559 --> 00:05:35.915
this is how web browsers have implemented
it in what's called JavaScript engines.

90
00:05:35.915 --> 00:05:41.462
So within your web browser,
there is an engine running JavaScript.

91
00:05:41.462 --> 00:05:43.839
In Chrome, it's called V8.

92
00:05:43.839 --> 00:05:47.161
In Firefox, it's called Spider Monkey.

93
00:05:47.161 --> 00:05:55.230
And there's different implementations of
JavaScript running JavaScript engines.

94
00:05:55.230 --> 00:05:58.601
And so you could imagine a different
one that works totally differently.

95
00:05:58.601 --> 00:06:01.083
But here we are,
we have these major web browsers,

96
00:06:01.083 --> 00:06:03.759
we have the major contexts
in which JavaScript is run.

97
00:06:03.759 --> 00:06:08.653
And we have the way that it thinks about
time and the asynchronous-ness and

98
00:06:08.653 --> 00:06:11.535
the event loop and
all that being part of it.

99
00:06:11.535 --> 00:06:14.104
And this is what we have to work with.

100
00:06:14.104 --> 00:06:16.379
And so yes, theoretically,
you can imagine and

101
00:06:16.379 --> 00:06:20.545
there's lots of interesting discussion out
there, I'm sure about all of the different

102
00:06:20.545 --> 00:06:24.288
ways that JavaScript could be doing
things differently and more efficiently.

103
00:06:24.288 --> 00:06:27.137
But, what we have is what we've got.

104
00:06:27.137 --> 00:06:31.512
[LAUGH] So, that's kind of a answer
to a good question that yes,

105
00:06:31.512 --> 00:06:36.140
there are alternate universes out
there probably where we're all

106
00:06:36.140 --> 00:06:41.030
writing way different JavaScript
in some other universe somewhere.

