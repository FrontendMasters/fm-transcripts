WEBVTT

1
00:00:00.000 --> 00:00:06.627
Another thing we're gonna need in order to
complete our tasks here, which is loops.

2
00:00:06.627 --> 00:00:10.837
So as Alexis from Schitt's Creek says,
I've done before, and I can do it again,

3
00:00:10.837 --> 00:00:12.743
and JavaScript says the same thing.

4
00:00:12.743 --> 00:00:18.003
Loops are how we can get JavaScript to
execute the same code multiple times.

5
00:00:18.003 --> 00:00:21.413
So earlier we were asking,
like how do we, for example,

6
00:00:21.413 --> 00:00:24.691
attach a similar event listener
to all of the buttons.

7
00:00:24.691 --> 00:00:27.314
We're going to do it with loops.

8
00:00:27.314 --> 00:00:32.664
Okay, so loops are a way to run
the same chunk of code over and

9
00:00:32.664 --> 00:00:35.131
over again in JavaScript.

10
00:00:35.131 --> 00:00:38.680
And another word for that,
that you might run into is iteration.

11
00:00:38.680 --> 00:00:43.046
So we are iteratively, we could say,
running the same piece of code,

12
00:00:43.046 --> 00:00:45.198
the same line of code in this case.

13
00:00:45.198 --> 00:00:49.177
So this is a,
[LAUGH] I could say traditional,

14
00:00:49.177 --> 00:00:52.859
what's called a for loop in JavaScript.

15
00:00:55.655 --> 00:00:57.737
And if we run this code.

16
00:01:00.768 --> 00:01:02.849
Let's make some space here.

17
00:01:02.849 --> 00:01:09.301
If we run this code, what we're
gonna to see is the same console.log

18
00:01:09.301 --> 00:01:14.318
of now doing rep run over,
and over, and over again.

19
00:01:14.318 --> 00:01:16.117
Okay, ready, ready to go to the gym?

20
00:01:17.248 --> 00:01:22.487
Boom, so what happened I ran,
I only typed that console.log,

21
00:01:22.487 --> 00:01:28.222
now doing rep once, but it logged
to the console ten different times.

22
00:01:28.222 --> 00:01:30.627
Like, do you even left bar?

23
00:01:30.627 --> 00:01:34.983
Anyway so, [LAUGH] what we've done is
we've told JavaScript to run the same line

24
00:01:34.983 --> 00:01:38.688
of code over and over and over again
without having to type it over and

25
00:01:38.688 --> 00:01:42.998
over again, which is great because
we're coders, and we hate typing stuff.

26
00:01:42.998 --> 00:01:48.785
[LAUGH] So, a traditional for
loop like this in JavaScript.

27
00:01:48.785 --> 00:01:52.660
It requires us to do three different
things within those parentheses.

28
00:01:52.660 --> 00:01:54.765
So we've got the keyword for.

29
00:01:54.765 --> 00:01:58.803
We've got those parentheses that kind of
like define how the loop is gonna run.

30
00:01:58.803 --> 00:02:03.509
And then, we have the curly braces
which say what's going to run each

31
00:02:03.509 --> 00:02:06.361
time this loop runs, so each iteration.

32
00:02:06.361 --> 00:02:09.289
And what's happening inside
of those parentheses,

33
00:02:09.289 --> 00:02:14.244
if you notice they're semicolons, we're
telling JavaScript three different things.

34
00:02:14.244 --> 00:02:18.594
First, we are declaring and
initializing, or kind of assigning,

35
00:02:18.594 --> 00:02:23.782
some kind of counter that's going to tell
us how many times we've run this loop,

36
00:02:23.782 --> 00:02:27.240
or what the value of a certain thing is,
for example.

37
00:02:27.240 --> 00:02:31.915
Then, we're going to give
a condition that JavaScript is gonna

38
00:02:31.915 --> 00:02:36.080
check to make sure it should
keep running the loop again.

39
00:02:36.080 --> 00:02:39.293
So in this case,
we have a counter that starts at 0.

40
00:02:39.293 --> 00:02:43.954
And we're gonna say JavaScript,
keep running this loop

41
00:02:43.954 --> 00:02:48.333
as long as the count is less than or
equal to an 100.

42
00:02:48.333 --> 00:02:52.932
As long as it's less than or equal to 100,
keep running, and each time you run, and

43
00:02:52.932 --> 00:02:55.326
this is the third thing
we're gonna tell it,

44
00:02:55.326 --> 00:02:57.739
is we're telling JavaScript how to change.

45
00:02:57.739 --> 00:03:02.718
And usually, we're going to increment or
add something to a counter.

46
00:03:02.718 --> 00:03:08.926
Each time you run, add, in this case, 10,
and usually we're adding one to a counter.

47
00:03:08.926 --> 00:03:13.516
So in this case, this for
loop is going to say, all right,

48
00:03:13.516 --> 00:03:18.879
JavaScript start at 0,
keep going until you've passed a 100.

49
00:03:18.879 --> 00:03:23.572
And each time you run this
code to console.log count,

50
00:03:23.572 --> 00:03:27.867
after you've run that,
add 10 to the counter.

51
00:03:27.867 --> 00:03:31.561
So effectively what this
does is it's going to,

52
00:03:34.645 --> 00:03:39.634
Count by 10s all the way up to 100.

53
00:03:39.634 --> 00:03:44.133
In our previous example, with our reps,

54
00:03:47.536 --> 00:03:50.733
We had a counter called rep.

55
00:03:52.289 --> 00:03:56.214
That we wanted the loop to keep going
as long as rep is less than 10.

56
00:03:56.214 --> 00:04:01.175
So we notice it doesn't get to the value
actually 10 cuz we don't have that

57
00:04:01.175 --> 00:04:05.298
less than or equals, and
we're adding 1 to the rep each time.

58
00:04:05.298 --> 00:04:12.123
Now, I haven't really talked about
this plus equals operator here,

59
00:04:12.123 --> 00:04:16.875
but any guess what that's doing,
plus equals?

60
00:04:16.875 --> 00:04:19.334
&gt;&gt; Increment the value of the counter.

61
00:04:19.334 --> 00:04:21.018
&gt;&gt; Exactly, it increments a value.

62
00:04:21.018 --> 00:04:24.385
So let's say I have a dogs,
a count of dogs,

63
00:04:24.385 --> 00:04:27.935
right now I have zero dogs,
I would like a dog.

64
00:04:27.935 --> 00:04:31.602
So if I say dogs plus equals 1,

65
00:04:31.602 --> 00:04:38.100
this is equivalent to saying
dogs equals dogs plus 1.

66
00:04:38.100 --> 00:04:40.790
So JavaScript is first going
to do the right-hand side,

67
00:04:40.790 --> 00:04:44.657
it looks at the current value of dogs, now
it's one because I changed it then it's

68
00:04:44.657 --> 00:04:47.253
going to add 1 to it and
assign that to be the new value.

69
00:04:47.253 --> 00:04:50.177
So now, dogs is 2 and

70
00:04:50.177 --> 00:04:56.194
+ = is a quick way of
doing that same thing.

71
00:04:56.194 --> 00:04:57.371
Cool.

72
00:04:57.371 --> 00:05:00.170
Okay, so
we see that + = a lot in our for loops.

73
00:05:01.913 --> 00:05:03.937
But you might be thinking,
wow, this is complicated.

74
00:05:03.937 --> 00:05:07.478
There's a lot of work to do to just like,
increase a number by one every time or

75
00:05:07.478 --> 00:05:08.525
something like that.

76
00:05:08.525 --> 00:05:11.917
So why would have to go and
make things so complicated?

77
00:05:11.917 --> 00:05:15.524
Like Admiral asked all of those years ago.

78
00:05:15.524 --> 00:05:20.547
Well luckily, because we're doing
JavaScript in the year 2022,

79
00:05:20.547 --> 00:05:21.809
we have options.

80
00:05:21.809 --> 00:05:27.654
So we also have another fancier for
loop called the for of loop.

81
00:05:27.654 --> 00:05:33.654
That lets us more easily iterate over
all of the items in a collection,

82
00:05:33.654 --> 00:05:38.751
like an array, let's say, or
the characters in a string.

83
00:05:38.751 --> 00:05:41.575
So for example,
if I have an array of numbers and

84
00:05:41.575 --> 00:05:44.693
I want to log out each of
those numbers from my array.

85
00:05:44.693 --> 00:05:49.698
With a traditional for loop,
I have to do it real complicated as,

86
00:05:49.698 --> 00:05:52.975
US coders and
Aval Levine both do not like.

87
00:05:52.975 --> 00:05:56.522
I have to declare a counter,
in this case, it's an index.

88
00:05:56.522 --> 00:05:57.765
It's gonna start at zero.

89
00:05:57.765 --> 00:06:02.629
I have to say, keep going as long as
the count index is less than the length of

90
00:06:02.629 --> 00:06:08.128
the numbers array, cuz that's how we'll
know we've reached the end of the array.

91
00:06:08.128 --> 00:06:12.794
And this is another fancy little operator,

92
00:06:12.794 --> 00:06:17.091
I++ is also incrementing this value.

93
00:06:17.091 --> 00:06:22.452
So, this is a another
incrementer operator here.

94
00:06:22.452 --> 00:06:27.789
And that whole thing we
can replace with this

95
00:06:27.789 --> 00:06:33.126
nice little pithy for
of loop that says for,

96
00:06:33.126 --> 00:06:39.053
let number n of the numbers
array log the value n.

97
00:06:39.053 --> 00:06:43.416
So these are both going to do the same
thing, but they're doing it in two

98
00:06:43.416 --> 00:06:47.731
different ways, so our for of loop,
sorry our traditional for loop.

99
00:06:50.382 --> 00:06:53.278
We've got our numbers, and
then we're gonna log out.

100
00:06:53.278 --> 00:06:58.044
We're gonna iterate over the indices
in the numbers array, and

101
00:06:58.044 --> 00:07:03.085
then we're gonna use that index to
pull out each thing in the array.

102
00:07:03.085 --> 00:07:07.707
But because we hate typing stuff,
we probably when we're trying to get

103
00:07:07.707 --> 00:07:12.189
things out of an array like this,
we're probably going to use oops.

104
00:07:14.582 --> 00:07:19.649
I'm probably going to use
our shorter friend, the for

105
00:07:19.649 --> 00:07:25.724
of loop, which is going to say for
each item of the array numbers.

106
00:07:25.724 --> 00:07:29.099
And we're gonna name that item n,
log that item out,

107
00:07:29.099 --> 00:07:33.607
and it's gonna do the same thing in
way less characters of typing code.

108
00:07:33.607 --> 00:07:35.226
Cool.

109
00:07:35.226 --> 00:07:37.437
So what we've got here is a,
it's called a four of loop.

110
00:07:37.437 --> 00:07:39.026
And yes, you sure can.

111
00:07:39.026 --> 00:07:42.461
Look it up on MDN and
read more about it if you'd like.

112
00:07:42.461 --> 00:07:46.769
We're not gonna talk about it, but
I just wanna say there's also a for

113
00:07:46.769 --> 00:07:49.558
in loop in JavaScript,
and it is different.

114
00:07:49.558 --> 00:07:53.392
It works differently, and
it's Usually not what we're gonna need.

115
00:07:53.392 --> 00:07:54.585
So you can look it up on MDN.

116
00:07:54.585 --> 00:07:59.246
But just if you've worked in another
language where you have a similar

117
00:07:59.246 --> 00:08:02.564
construct like this, but
it uses the keyword in,

118
00:08:02.564 --> 00:08:07.383
just know that in JavaScript, the thing
that you probably wanna do is for

119
00:08:07.383 --> 00:08:10.154
of, so just saying that as a watch-out.

120
00:08:10.154 --> 00:08:14.672
So, we said that we can do this for
items in an array.

121
00:08:14.672 --> 00:08:18.939
We can also use it for
characters in a string.

122
00:08:18.939 --> 00:08:24.760
So for example, if I do for
(let char of, the string "ALOHA"),

123
00:08:24.760 --> 00:08:29.374
and console.log my (char),
we're going to get,

124
00:08:33.072 --> 00:08:37.114
Each character logged out on its own line.

125
00:08:37.114 --> 00:08:40.919
So we said strings
are made up of characters,

126
00:08:40.919 --> 00:08:46.125
arrays are made up of items, and
the for of loop lets us pull out

127
00:08:46.125 --> 00:08:51.149
those smaller units that each
of these things is made up of.

128
00:08:51.149 --> 00:08:55.579
And the way that this works is for
loop works because strings and

129
00:08:55.579 --> 00:09:00.762
arrays are special types of things
that we call iterables in JavaScript,

130
00:09:00.762 --> 00:09:03.201
meaning we can iterate over them.

131
00:09:03.201 --> 00:09:08.588
They're made up of smaller things
that we know how to get out in order.

132
00:09:08.588 --> 00:09:13.966
Not everything in JavaScript is iterable
and so sometimes if you try a for

133
00:09:13.966 --> 00:09:18.904
of loop with some other entity that
is not iterable it won't work,

134
00:09:18.904 --> 00:09:21.837
or you'll get something unexpected.

135
00:09:21.837 --> 00:09:23.885
But suffice it to say that strings, and

136
00:09:23.885 --> 00:09:27.735
arrays are things that we're probably
going to be working with a lot, and

137
00:09:27.735 --> 00:09:30.738
those are both iterable, so
we can use them in for loops.

