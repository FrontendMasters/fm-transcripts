WEBVTT

1
00:00:00.078 --> 00:00:05.434
Now, we need to keep going, cuz so
far, so this would work for,

2
00:00:07.399 --> 00:00:10.947
If we have this

3
00:00:10.947 --> 00:00:18.346
.split("/")[4].

4
00:00:18.346 --> 00:00:22.975
If we only have one name in our breed,
we're done, right?

5
00:00:22.975 --> 00:00:24.462
Great, wonderful.

6
00:00:24.462 --> 00:00:28.569
But we might have the poodle
minus standard problem.

7
00:00:28.569 --> 00:00:32.120
So how did we go on and
solve the poodle minus standard problem?

8
00:00:33.456 --> 00:00:34.447
&gt;&gt; Split it again.

9
00:00:36.086 --> 00:00:40.612
Split it again, walk me through it.

10
00:00:40.612 --> 00:00:45.480
&gt;&gt; Let, I don't know, whatever,
I just said that they call it splitter.

11
00:00:45.480 --> 00:00:51.916
Let splitter = breed4.slipt
with a dash in the middle.

12
00:00:51.916 --> 00:00:53.247
&gt;&gt; So all on one line?

13
00:00:53.247 --> 00:00:55.387
&gt;&gt; Maybe split breed.

14
00:00:55.387 --> 00:00:59.302
&gt;&gt; So yeah, in this case, maybe we
could do, I don't know, splitBreed or

15
00:00:59.302 --> 00:01:00.536
something like that.

16
00:01:00.536 --> 00:01:05.032
So if the first one was unsplitBreed,
then the second one could be splitBreed,

17
00:01:05.032 --> 00:01:06.319
and this is just mine.

18
00:01:06.319 --> 00:01:08.547
As you build up your JavaScript foo here,

19
00:01:08.547 --> 00:01:11.484
you'll be figuring out your
own naming conventions.

20
00:01:11.484 --> 00:01:14.299
And if you're working at a company,
or working on a team, or

21
00:01:14.299 --> 00:01:16.122
a project like an open source project,

22
00:01:16.122 --> 00:01:19.186
they will have their own conventions
around how you name things.

23
00:01:19.186 --> 00:01:23.121
So we're not gonna totally get
into that kinda worms, but-

24
00:01:23.121 --> 00:01:27.907
&gt;&gt; It was unsplitBreed.split with a dash

25
00:01:27.907 --> 00:01:29.215
in there.

26
00:01:29.215 --> 00:01:31.060
&gt;&gt; With the minus?

27
00:01:31.060 --> 00:01:32.028
&gt;&gt; Yeah, minus, yeah.

28
00:01:32.028 --> 00:01:39.084
&gt;&gt; Great, okay, so now,
if we run this on "poodle-standard",

29
00:01:41.788 --> 00:01:45.713
split( "-"), we get "poodle" and
then "standard".

30
00:01:45.713 --> 00:01:48.868
And if we run it on beagle,
what do we get?

31
00:01:48.868 --> 00:01:50.519
&gt;&gt; Just one value.

32
00:01:50.519 --> 00:01:54.035
&gt;&gt; Just the one value, okay, cool, great.

33
00:01:54.035 --> 00:01:58.833
So this works in both cases,
except in the poodle-standard case,

34
00:01:58.833 --> 00:02:01.618
we have that second thing in the array.

35
00:02:01.618 --> 00:02:02.734
Sarah?
&gt;&gt; We can join them.

36
00:02:02.734 --> 00:02:09.237
&gt;&gt; So we could join them, for example,
with yeah, walk me through it.

37
00:02:14.302 --> 00:02:17.053
&gt;&gt; Could we just add it to
the end of the last sentence?

38
00:02:17.053 --> 00:02:20.457
&gt;&gt; Okay.

39
00:02:20.457 --> 00:02:24.636
&gt;&gt; .join, quote with a space between.

40
00:02:24.636 --> 00:02:26.397
&gt;&gt; Space, okay, great.

41
00:02:26.397 --> 00:02:31.020
So now we might wanna say it like
joinedBreed or something like that,

42
00:02:31.020 --> 00:02:34.936
just to indicate that we're
doing something different.

43
00:02:34.936 --> 00:02:37.775
I'm just renaming these
things as we go to try and

44
00:02:37.775 --> 00:02:40.614
be as verbose as possible
what we're doing, but

45
00:02:40.614 --> 00:02:44.859
it would work just fine if we said
let x equals, JavaScript don't care.

46
00:02:44.859 --> 00:02:53.283
So now, what we've got is let's say
poodle-standard.split("-").join(" "),

47
00:02:53.283 --> 00:02:56.663
so we've got now is poodle standard.

48
00:02:56.663 --> 00:03:02.401
Cool, except what we're ultimately
gonna need to do is compare these two,

49
00:03:02.401 --> 00:03:04.293
the breeds in our array.

50
00:03:04.293 --> 00:03:06.969
And the breeds in our array here and

51
00:03:06.969 --> 00:03:12.328
the name that we usually refer to
these poodles with is, where is it?

52
00:03:12.328 --> 00:03:16.462
It's hard to read,
there are so many things,

53
00:03:16.462 --> 00:03:21.826
is, Standard poodle is

54
00:03:21.826 --> 00:03:28.147
gonna be the name of the breed that we're
gonna be looking for in this breed list.

55
00:03:28.147 --> 00:03:33.647
So what we wanna do is reverse
the order of those two parts.

56
00:03:38.769 --> 00:03:46.873
There's lots of different ways we could do
this, but any, Anybody, Do something here?

57
00:03:46.873 --> 00:03:50.870
I have a question, how about
destructuring, can we just flex our

58
00:03:50.870 --> 00:03:55.898
destructuring muscle here and destructure
to pull some values out of this array?

59
00:03:55.898 --> 00:03:57.027
I see some nods.

60
00:03:57.027 --> 00:04:03.383
So Paul, you wanna walk me through
a destructuring you could do here?

61
00:04:03.383 --> 00:04:09.541
Maybe on our "poodle-standard".split("-"),

62
00:04:09.541 --> 00:04:17.466
is there a way that I could capture
the poodle value and the standard value?

63
00:04:19.336 --> 00:04:24.269
&gt;&gt; So this is an array, so, yeah, I mean,

64
00:04:27.250 --> 00:04:32.493
So it does matter the order,
and so you could do,

65
00:04:37.274 --> 00:04:40.664
Yeah, no, it's not coming, this is-.

66
00:04:40.664 --> 00:04:42.015
&gt;&gt; That's okay.

67
00:04:42.015 --> 00:04:44.135
So when we-.

68
00:04:44.135 --> 00:04:52.049
&gt;&gt; Could you iterate through the values in
the array to sort them descending somehow?

69
00:04:52.049 --> 00:04:56.621
What if you have three values in your
poodle standard black, I don't know, how

70
00:04:56.621 --> 00:05:01.549
would you know, in that case, which value
would wanna come first or second, right?

71
00:05:01.549 --> 00:05:05.464
&gt;&gt; Yeah, so just by convention, because
of the type of data that this API has,

72
00:05:05.464 --> 00:05:07.496
we're never gonna have more than two.

73
00:05:07.496 --> 00:05:10.570
We're only gonna have what I would
call a breed and then a sub-breed.

74
00:05:10.570 --> 00:05:13.636
So poodle is the breed and
then standard is the variety,

75
00:05:13.636 --> 00:05:16.911
let's say, breed and variety,
or breed and sub-breed.

76
00:05:16.911 --> 00:05:20.353
Or like Terrier West Island, or

77
00:05:20.353 --> 00:05:25.582
Terrier Jack Russell,
or something like that.

78
00:05:25.582 --> 00:05:28.056
Yeah, comment from the chat.

79
00:05:28.056 --> 00:05:34.277
&gt;&gt; We have a suggestion to do .reverse and
then .join,

80
00:05:34.277 --> 00:05:38.850
and also a destructuring a, b = b, a.

81
00:05:41.143 --> 00:05:47.672
So just saving the variable,
left side of the equal sign,

82
00:05:47.672 --> 00:05:52.334
[a, b], right side of the equal sign,

83
00:05:52.334 --> 00:05:57.417
[b, a], sort of swapping the variables.

84
00:05:57.417 --> 00:06:02.855
&gt;&gt; Okay, since we don't have values a and
b in our example here, I'm gonna

85
00:06:02.855 --> 00:06:09.006
just assume that what we're doing is we're
trying to assign a and b to the first and

86
00:06:09.006 --> 00:06:14.377
second elements in this array, like a,
b now as in the original order.

87
00:06:14.377 --> 00:06:17.537
And then we're saying we could make
an array now by putting them in

88
00:06:17.537 --> 00:06:18.405
the other order.

89
00:06:18.405 --> 00:06:20.438
Is that right, am I following here?

90
00:06:20.438 --> 00:06:24.166
So that now we have an array
of once we've destructured,

91
00:06:24.166 --> 00:06:27.050
this is how we could
destructure this here.

92
00:06:27.050 --> 00:06:31.969
And I might suggest maybe that instead of
a and b, we give it descriptive names,

93
00:06:31.969 --> 00:06:32.492
right?

94
00:06:32.492 --> 00:06:36.695
For example,
we could say breed and variety, or

95
00:06:36.695 --> 00:06:41.009
breed and sub-breed, or
whatever we want here.

96
00:06:41.009 --> 00:06:47.960
And so then, if we say variety, breed,
now we get them in the right order.

97
00:06:49.782 --> 00:06:52.738
And then we could do,
I think somebody said a join.

98
00:06:52.738 --> 00:06:57.916
Yep, we could do a join on that,
which if I don't pass it anything, it's

99
00:06:57.916 --> 00:07:03.696
gonna put a comma, but if I put a space,
now I've got my standard poodle, great.

100
00:07:03.696 --> 00:07:08.022
And there was another,
somebody said reverse, right?

101
00:07:08.022 --> 00:07:10.095
So there is an array,

102
00:07:15.371 --> 00:07:20.891
It's not what I meant to type in,
array reverse that we have,

103
00:07:20.891 --> 00:07:26.729
which reverses an array in place,
meaning it mutates the array,

104
00:07:26.729 --> 00:07:29.929
that will swap the order of things.

105
00:07:29.929 --> 00:07:35.236
So we could also use that,
And say, let's say,

106
00:07:38.511 --> 00:07:43.442
Okay,
"poodle-standard".split("-").reverse.

107
00:07:46.336 --> 00:07:47.901
First, I have to capture it.

108
00:07:47.901 --> 00:07:49.636
Sorry, what did I name this?

109
00:07:49.636 --> 00:07:54.410
Let's just call it, I don't know,

110
00:07:54.410 --> 00:08:03.343
splitArray is gonna be
"poodle-standard".split("-"),

111
00:08:03.343 --> 00:08:08.122
splitArray is poodle and standard.

112
00:08:08.122 --> 00:08:13.102
And then if we do splitArray.reverse,
now our splitArray,

113
00:08:13.102 --> 00:08:17.808
because it was in place,
now our splitArray is reversed.

114
00:08:17.808 --> 00:08:21.378
And now, similarly,
we can do the .join on it.

115
00:08:21.378 --> 00:08:25.407
So all of these options are good options,
okay?

116
00:08:25.407 --> 00:08:28.598
So we can see what we wanted to do here.

117
00:08:28.598 --> 00:08:35.690
We have, If we do,

118
00:08:43.941 --> 00:08:49.243
If we do our destructuring option,
just to flex our muscles here,

119
00:08:49.243 --> 00:08:52.662
so I'm gonna wait on
the join a little bit.

120
00:08:52.662 --> 00:08:54.368
Why don't we take that option?

121
00:08:54.368 --> 00:08:59.191
So we're gonna split the breed,
I'll call them breed and

122
00:08:59.191 --> 00:09:03.241
variety, or subbreed,
maybe, is more clear.

123
00:09:05.232 --> 00:09:09.718
And then, we could do,
we could return [subbreed,

124
00:09:09.718 --> 00:09:14.105
breed], put them in
the opposite order manually,

125
00:09:14.105 --> 00:09:18.409
because we know we're only
gonna have two things.

126
00:09:18.409 --> 00:09:22.181
But if in the hypothetical example
where we had more than two things,

127
00:09:22.181 --> 00:09:23.556
reverse could work too.

128
00:09:23.556 --> 00:09:28.591
Now, hopefully, we should have
a function that does what we want.

129
00:09:28.591 --> 00:09:33.439
Now, what about in the case
where is only one thing

130
00:09:33.439 --> 00:09:38.180
in the array,
where it's beagle, let's say?

131
00:09:38.180 --> 00:09:38.814
Let's find out.

132
00:09:38.814 --> 00:09:44.275
What I'm gonna do since this
doesn't really depend on anything,

133
00:09:44.275 --> 00:09:49.648
I can just copy paste it into my
console here, if it feels like it.

134
00:09:49.648 --> 00:09:54.662
Okay, so now, let's try getBreedFromURL,
and we're just gonna test it out on

135
00:09:54.662 --> 00:09:59.772
the one that we had tried so far, which we
should feel pretty confident will work.

136
00:10:02.179 --> 00:10:06.275
Okay, "standard poodle",
great, that case is handled.

137
00:10:06.275 --> 00:10:12.599
Now, we wanna try the example,
With beagle.

138
00:10:17.737 --> 00:10:22.442
Oops, too many quotes, too many quotes.

139
00:10:22.442 --> 00:10:28.351
Okay, so this one,
we've got a small problem.

140
00:10:31.431 --> 00:10:33.641
What's the problem here?

141
00:10:33.641 --> 00:10:34.731
&gt;&gt; Spacing.

142
00:10:34.731 --> 00:10:39.126
&gt;&gt; Spacing, so we have this extra space at

143
00:10:39.126 --> 00:10:44.602
the beginning of beagle,
which is there, why?

144
00:10:46.805 --> 00:10:48.457
&gt;&gt; Because of the join.

145
00:10:48.457 --> 00:10:49.393
&gt;&gt; That join, right?

146
00:10:49.393 --> 00:10:54.475
So when we did this destructuring,
we did let,

147
00:10:54.475 --> 00:10:59.685
I don't remember what we called them,
but [b,

148
00:10:59.685 --> 00:11:04.624
sb] = what was it, "poodle standard".

149
00:11:04.624 --> 00:11:11.161
No, sorry, it's gonna be beagle,
.split("-"),

150
00:11:11.161 --> 00:11:16.589
gosh, [brd,

151
00:11:16.589 --> 00:11:22.849
sbrd], okay, so now, breed is beagle,
but what is subbreed?

152
00:11:22.849 --> 00:11:23.800
What do you think?

153
00:11:25.974 --> 00:11:27.541
&gt;&gt; I think it's empty string.

154
00:11:31.187 --> 00:11:35.447
&gt;&gt; So it's actually gonna be JavaScript's
good old word for nothing is here.

155
00:11:35.447 --> 00:11:41.185
There is nothingness here, and
maybe you didn't intend that,

156
00:11:41.185 --> 00:11:44.703
so it's actually gonna be undefined.

157
00:11:44.703 --> 00:11:50.501
And then when we join undefined and
beagle, With a space,

158
00:11:50.501 --> 00:11:55.321
undefined gets stringified into nothing,
the empty string, but

159
00:11:55.321 --> 00:11:58.000
it's still joined with that space.

160
00:11:58.000 --> 00:12:01.591
So, now we need to handle that.

161
00:12:01.591 --> 00:12:02.168
&gt;&gt; Trim.

162
00:12:02.168 --> 00:12:07.023
&gt;&gt; Trim, so there is something called,
[INAUDIBLE], there's something called,

163
00:12:08.732 --> 00:12:14.824
String.trim, which removes whitespace
from both ends of a string.

164
00:12:14.824 --> 00:12:21.707
So this is just a new trick we can put
in our book of tools, our box of tools.

165
00:12:21.707 --> 00:12:27.212
[LAUGH] So what we could do is we can,
where's my tab?

166
00:12:29.905 --> 00:12:36.505
Call trim, and that will take off any
white space that might be on the edges.

167
00:12:36.505 --> 00:12:38.606
So that is definitely
one way we can do it.

168
00:12:38.606 --> 00:12:42.103
We can put .trim here.

169
00:12:43.978 --> 00:12:47.916
Okay, so
we are flexing a lot of muscles here.

170
00:12:47.916 --> 00:12:49.805
Yeah, question.

171
00:12:49.805 --> 00:12:55.934
&gt;&gt; Not a question, just if I were
doing this, I probably would have,

172
00:12:55.934 --> 00:13:01.845
even before the second let,
I would have done an if statement and

173
00:13:01.845 --> 00:13:05.912
just checked to see
the length of the array.

174
00:13:05.912 --> 00:13:10.901
And only done those next two things
if the array were greater than 1,

175
00:13:10.901 --> 00:13:12.201
the length of it.

176
00:13:12.201 --> 00:13:15.923
&gt;&gt; Right, so
we could do a conditional here.

177
00:13:15.923 --> 00:13:20.027
We could check if the length
of the array is 1, or

178
00:13:20.027 --> 00:13:23.544
we could check if subbreed is undefined.

179
00:13:23.544 --> 00:13:28.407
Or we could check if there's even a minus
in the string before we even split it, or

180
00:13:28.407 --> 00:13:29.559
whatever we want.

181
00:13:29.559 --> 00:13:31.238
We could do lots of different things here.

182
00:13:31.238 --> 00:13:36.260
So now that we're getting closer and
closer to real life of trying to program,

183
00:13:36.260 --> 00:13:39.542
we are seeing that
the possibilities go like this.

184
00:13:39.542 --> 00:13:43.704
There's so many choices, there's so many
different ways that we can write code, and

185
00:13:43.704 --> 00:13:45.997
everybody has their kind
of individual style.

186
00:13:45.997 --> 00:13:48.796
And JavaScript,
unlike some other languages,

187
00:13:48.796 --> 00:13:53.163
gives us so many different options for
how we work with things that, I mean,

188
00:13:53.163 --> 00:13:56.318
in all languages,
we have lots of different options.

189
00:13:56.318 --> 00:14:01.156
But in JavaScript, it feels like we
have even more options than usual, so

190
00:14:01.156 --> 00:14:02.806
we have so many choices.

191
00:14:02.806 --> 00:14:06.872
And then if you wanna see
another way you could do it,

192
00:14:06.872 --> 00:14:10.391
you can also check out
the finished version.

