WEBVTT

1
00:00:00.017 --> 00:00:06.899
Let's talk about what's going
on when we work with objects.

2
00:00:06.899 --> 00:00:08.546
Back to the whiteboard.

3
00:00:08.546 --> 00:00:13.798
So when I say,
let indecisive equal curly braces,

4
00:00:13.798 --> 00:00:19.307
lunch colon, string sandwich,
what is happening?

5
00:00:19.307 --> 00:00:20.854
Can anybody walk me through it?

6
00:00:20.854 --> 00:00:24.206
By now we're hopefully getting
a little bit in the swing of things.

7
00:00:24.206 --> 00:00:26.052
You wanna walk me through it?

8
00:00:26.052 --> 00:00:31.032
When I say let indecisive equal object,
sandwich.

9
00:00:31.032 --> 00:00:33.574
&gt;&gt; So variables can be indecisive.

10
00:00:33.574 --> 00:00:37.678
&gt;&gt; Okay, so
we're gonna create a new indecisive.

11
00:00:37.678 --> 00:00:38.965
&gt;&gt; Maybe I spelled it right, I don't know.

12
00:00:38.965 --> 00:00:41.716
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] The value is going to be

13
00:00:41.716 --> 00:00:42.991
the curly brackets.

14
00:00:42.991 --> 00:00:46.014
&gt;&gt; Okay, JavaScript is gonna
conjure up a new object,

15
00:00:46.014 --> 00:00:48.499
that's what the curly braces are saying.

16
00:00:48.499 --> 00:00:54.812
The curly braces are saying, hey,
JavaScript, this is an object value.

17
00:00:54.812 --> 00:01:00.172
And then because of the, let,
what have you, we're gonna point,

18
00:01:00.172 --> 00:01:04.325
right, from indecisive to this object,
exactly.

19
00:01:04.325 --> 00:01:07.990
Now the question is,
what's happening inside of that object?

20
00:01:07.990 --> 00:01:13.647
Well, similarly,
two arrays where we had indices pointing,

21
00:01:13.647 --> 00:01:18.462
numbers pointing to particular
values in the array.

22
00:01:18.462 --> 00:01:21.695
Now we have within this object,

23
00:01:21.695 --> 00:01:26.137
we kind of have separate pseudovariables.

24
00:01:26.137 --> 00:01:29.631
Which in this case,
like I have a lunch property,

25
00:01:29.631 --> 00:01:35.472
which is sort of a pseudovariable within
the object that points at a certain value.

26
00:01:35.472 --> 00:01:39.288
So in this case, gosh,
I don't remember, sandwich?

27
00:01:39.288 --> 00:01:44.850
[LAUGH] So
now what we have is a reference from

28
00:01:44.850 --> 00:01:50.729
our variable indecisive
to an object value.

29
00:01:50.729 --> 00:01:55.990
And that object value has some pointers,
in this case, one pointer,

30
00:01:55.990 --> 00:02:01.270
that's named lunch, that points
to a string value, that sandwich.

31
00:02:02.640 --> 00:02:07.545
Now what happens when I say,
indecisive.lunch, or

32
00:02:07.545 --> 00:02:12.123
when I ask JavaScript for
indecisive.lunch is,

33
00:02:12.123 --> 00:02:18.671
JavaScript is gonna first look at
the indecisive, follow that arrow.

34
00:02:21.355 --> 00:02:28.095
Find this object, and then the dot
is going to say, okay, JavaScript,

35
00:02:28.095 --> 00:02:33.415
now, on that object, look for
the pointer named lunch.

36
00:02:33.415 --> 00:02:38.780
So when I say, indecisive.lunch,
JavaScript is going

37
00:02:38.780 --> 00:02:43.922
to follow these arrows from
indecisive to the object,

38
00:02:43.922 --> 00:02:48.299
and from the objects
lunch arrow to sandwich.

39
00:02:48.299 --> 00:02:56.812
And so this whole thing is going
to evaluate to sandwich, yeah?

40
00:02:56.812 --> 00:03:05.000
Okay, so now we can probably figure
out what's gonna happen when we say,

41
00:03:05.000 --> 00:03:09.238
indecisive.lunch equals, tacos?

42
00:03:09.238 --> 00:03:10.637
[LAUGH] I think it was.

43
00:03:10.637 --> 00:03:15.495
When I say, indecisive,
my goodness, you get the idea,

44
00:03:15.495 --> 00:03:18.179
.lunch equals tacos in quotes.

45
00:03:21.422 --> 00:03:26.168
Can anybody walk me through what
they think is going to happen?

46
00:03:26.168 --> 00:03:28.059
Jason, would you mind
walking me through it?

47
00:03:28.059 --> 00:03:33.576
&gt;&gt; Sure, so it's going to look
at the indecisive variable,

48
00:03:33.576 --> 00:03:37.067
follow the arrows down to lunch, and

49
00:03:37.067 --> 00:03:41.812
then it's going to replace
sandwich with tacos.

50
00:03:41.812 --> 00:03:46.856
&gt;&gt; Exactly, so
it's now it's going to follow the arrow,

51
00:03:46.856 --> 00:03:51.471
find this arrow that points
that's called lunch,

52
00:03:51.471 --> 00:03:56.963
conjure up a new string value tacos,
and change this arrow,

53
00:04:00.509 --> 00:04:03.027
That's called lunch to point to tacos.

54
00:04:05.057 --> 00:04:07.474
And sandwich is forgotten.

55
00:04:09.294 --> 00:04:14.082
So now if I ask for indecisive.lunch,
JavaScript's gonna follow the arrows again

56
00:04:14.082 --> 00:04:16.722
and find a different
value than it did before.

57
00:04:19.415 --> 00:04:21.023
And what happens when I say,

58
00:04:24.065 --> 00:04:28.716
Indecisive.Snack equals

59
00:04:28.716 --> 00:04:34.178
[LAUGH] chips, great, thanks.

60
00:04:34.178 --> 00:04:37.105
[LAUGH] Whatever, doughnuts,
it did doesn't matter.

61
00:04:37.105 --> 00:04:41.798
So what happens when I say,
indecisive.Snack equals chips?

62
00:04:41.798 --> 00:04:43.488
&gt;&gt; OJ, you wanna talk me through it?

63
00:04:43.488 --> 00:04:48.603
&gt;&gt; Yep, it creates a new property for
the variable indecisive, or for

64
00:04:48.603 --> 00:04:54.096
object indecisive, and then it creates
a reference to the word shapes.

65
00:04:54.096 --> 00:05:00.328
&gt;&gt; Right, so it's gonna follow this arrow,
again, the indecisive,

66
00:05:00.328 --> 00:05:05.379
find that object,
create a new arrow what we'll name,

67
00:05:05.379 --> 00:05:09.890
snack, and conjure up the value,
I've asked for

68
00:05:09.890 --> 00:05:13.889
chips, and point that arrow at that value.

69
00:05:13.889 --> 00:05:17.650
&gt;&gt; Could you create an array
that acts like an object?

70
00:05:17.650 --> 00:05:20.032
&gt;&gt; That's a great question.

71
00:05:20.032 --> 00:05:21.330
&gt;&gt; Conceptually, very similar, right?

72
00:05:21.330 --> 00:05:26.565
&gt;&gt; [LAUGH] they
are conceptually very similar.

73
00:05:26.565 --> 00:05:30.867
Indeed, in fact, arrays are.

74
00:05:30.867 --> 00:05:31.936
&gt;&gt; Are an object?

75
00:05:31.936 --> 00:05:32.915
&gt;&gt; I mean, kind of.

76
00:05:32.915 --> 00:05:39.919
&gt;&gt; Let's go to our console.

77
00:05:39.919 --> 00:05:43.845
&gt;&gt; What's the operator that we can use to
find out what kind of thing a thing is?

78
00:05:43.845 --> 00:05:44.364
&gt;&gt; Typeof?

79
00:05:44.364 --> 00:05:47.243
&gt;&gt; Typeof, so if I do typeof,

80
00:05:47.243 --> 00:05:52.000
if I type it correctly,
if I do typeof snack,

81
00:05:52.000 --> 00:05:57.277
chips, it's an object as we'd expect,
right?

82
00:05:57.277 --> 00:06:00.730
What if I do typeof chips?

83
00:06:00.730 --> 00:06:01.980
Sorry, chips.

84
00:06:04.091 --> 00:06:09.661
Arrays are actually objects.

85
00:06:09.661 --> 00:06:11.217
I've been lying to you.

86
00:06:11.217 --> 00:06:14.977
In JavaScript basically,
everything that is not a primitive value,

87
00:06:14.977 --> 00:06:18.415
everything that's not a string,
or a number, or a Boolean, or

88
00:06:18.415 --> 00:06:21.751
the couple of other types that
we talked about, is an object.

89
00:06:21.751 --> 00:06:26.730
And so
arrays are just a special kind of object

90
00:06:26.730 --> 00:06:31.325
that has certain built-in properties.

91
00:06:31.325 --> 00:06:37.154
For example, it has numeric properties

92
00:06:37.154 --> 00:06:42.133
that I can access values in order.

93
00:06:42.133 --> 00:06:44.039
And those are what we call, indices.

94
00:06:44.039 --> 00:06:51.358
It also has a built-in length
property like we saw before.

95
00:06:51.358 --> 00:06:55.459
So if I ask for chips, tacos, 0,

96
00:06:55.459 --> 00:07:01.117
what's really happening is,
under the hood,

97
00:07:01.117 --> 00:07:05.785
JavaScript has an object with a pointer

98
00:07:05.785 --> 00:07:10.886
called 0 to the first thing in this array.

99
00:07:10.886 --> 00:07:15.052
So JavaScript is just doing some extra
work behind the scenes to make these

100
00:07:15.052 --> 00:07:19.689
brackets do some fancy stuff like create
an object with numeric indices that are in

101
00:07:19.689 --> 00:07:24.054
order, so that the things that I put in
those brackets show up in order in those

102
00:07:24.054 --> 00:07:24.687
numbers.

103
00:07:24.687 --> 00:07:27.985
But under the hood,
they're actually the same.

104
00:07:27.985 --> 00:07:29.268
And so here's a fun thing.

105
00:07:29.268 --> 00:07:34.600
This square brackets notation,
this works on objects too.

106
00:07:34.600 --> 00:07:37.124
So what was my object called, indecisive.

107
00:07:37.124 --> 00:07:43.172
We said that one way we can find
tacos is to say indecisive.lunch.

108
00:07:43.172 --> 00:07:48.610
But we can also find tacos [LAUGH]
by using our square brackets and

109
00:07:48.610 --> 00:07:53.029
using the name of the property
that we want to find.

110
00:07:55.525 --> 00:08:02.154
So this is very similar to how arrays let
us use the square brackets with a number,

111
00:08:02.154 --> 00:08:06.557
which is the name of the property
on the array object.

112
00:08:06.557 --> 00:08:11.638
&gt;&gt; Objects allow us to also use
the square bracket notation to

113
00:08:11.638 --> 00:08:16.718
access values at a named property
if we give the string name

114
00:08:16.718 --> 00:08:22.773
of that property inside those curly braces
&gt;&gt; It doesn't know how to associate those

115
00:08:22.773 --> 00:08:27.954
individual properties to a numeric number,
so you can't do indecisive zero, right?

116
00:08:27.954 --> 00:08:30.327
&gt;&gt; Let's find out, indecisive zero.

117
00:08:33.010 --> 00:08:35.209
Undefined.

118
00:08:35.209 --> 00:08:38.820
&gt;&gt; Because the object doesn't know
how to parse out a numeric index?

119
00:08:38.820 --> 00:08:43.199
&gt;&gt; Well, it's not so much that as
right now my indecisive object,

120
00:08:43.199 --> 00:08:46.051
it has two properties, lunch and snack.

121
00:08:46.051 --> 00:08:51.073
If I type, indecisive square bracket zero,

122
00:08:51.073 --> 00:08:56.756
JavaScript is looking for
a property named zero and

123
00:08:56.756 --> 00:09:00.864
it doesn't find one on this object.

124
00:09:00.864 --> 00:09:05.020
Whereas if I had,
do I still have array one?

125
00:09:05.020 --> 00:09:10.098
Array one, if I look at it, these indices,

126
00:09:10.098 --> 00:09:14.629
notice those colons, they're kind of

127
00:09:14.629 --> 00:09:19.318
the names of properties on that object.

128
00:09:19.318 --> 00:09:22.021
And length is another property
that arrays have, right?

129
00:09:22.021 --> 00:09:24.758
That's just built in that I get for
free when I use those square brackets.

130
00:09:24.758 --> 00:09:29.159
JavaScript does a bunch of work to create
this object with this length property and

131
00:09:29.159 --> 00:09:32.603
with the numeric index properties
of the things that I put inside

132
00:09:32.603 --> 00:09:33.971
those square brackets.

133
00:09:33.971 --> 00:09:38.538
So it's not so much that JavaScript
doesn't know how to look up

134
00:09:38.538 --> 00:09:43.364
a numeric property name,
it's more that when I declare objects,

135
00:09:43.364 --> 00:09:46.136
I am naming properties with strings.

136
00:09:46.136 --> 00:09:48.020
Whereas when I declare arrays,

137
00:09:48.020 --> 00:09:51.377
automatically JavaScript
is naming them numerically.

138
00:09:51.377 --> 00:09:52.616
Does that makes sense?

139
00:09:52.616 --> 00:09:54.010
Awesome, great question.

140
00:09:55.310 --> 00:10:00.322
So now we know two different ways to get
at our values out of an object and arrays.

