WEBVTT

1
00:00:00.000 --> 00:00:02.503
Okay, so let's put it to the test.

2
00:00:02.503 --> 00:00:06.974
We're gonna write a conditional
that looks at your two and

3
00:00:06.974 --> 00:00:09.711
maybe you have multiple names, but

4
00:00:09.711 --> 00:00:14.285
split your name into two parts,
let's say first and last.

5
00:00:14.285 --> 00:00:18.657
Or it can be [LAUGH],
your pet's name and your name,

6
00:00:18.657 --> 00:00:24.264
whatever you want, and
log a message saying which one is longer.

7
00:00:24.264 --> 00:00:30.198
And then try to write a function called
isEmpty, that takes in an array and

8
00:00:30.198 --> 00:00:34.600
tells you whether or
not that array has anything in it,

9
00:00:34.600 --> 00:00:38.642
whether or not that array is empty,
length zero.

10
00:00:38.642 --> 00:00:42.195
And then the last question I have for
you is,

11
00:00:42.195 --> 00:00:45.571
what is the truthiness of an empty array?

12
00:00:45.571 --> 00:00:48.415
And you can test it out by writing
a conditional in your console.

13
00:00:48.415 --> 00:00:51.628
So let's just do all this on
the console just to wrap our heads

14
00:00:51.628 --> 00:00:53.707
around conditionals and truthiness.

15
00:00:53.707 --> 00:00:58.478
Okay, so let us write a conditional
that logs a message saying

16
00:00:58.478 --> 00:01:02.167
whether your first name or
last name is longer.

17
00:01:04.023 --> 00:01:11.584
Who would like to walk me through, what
they would do to write this conditional?

18
00:01:11.584 --> 00:01:16.084
How about Jason,
do you wanna take a stab at it with me?

19
00:01:16.084 --> 00:01:20.918
&gt;&gt; Sure, so what I would do is I might

20
00:01:20.918 --> 00:01:25.770
set a variable for my firstName.

21
00:01:25.770 --> 00:01:32.252
&gt;&gt; Okay, so I'll use mine just while
I'm typing, okay, so firstName.

22
00:01:32.252 --> 00:01:33.296
Do you wanna do one for lastName too?

23
00:01:33.296 --> 00:01:34.698
&gt;&gt; Yea.

24
00:01:34.698 --> 00:01:35.640
&gt;&gt; Great.

25
00:01:39.300 --> 00:01:44.073
Okay.
&gt;&gt; Then my conditional would be,

26
00:01:44.073 --> 00:01:47.131
if,
&gt;&gt; If.

27
00:01:47.131 --> 00:01:51.491
&gt;&gt; First name
&gt;&gt; Okay, like this?

28
00:01:51.491 --> 00:01:55.163
Just if space firstName?

29
00:01:55.163 --> 00:01:56.014
&gt;&gt; Need a paren.

30
00:01:56.014 --> 00:01:58.673
&gt;&gt; Parens yeah exactly,
just just being a little pedantic

31
00:01:58.673 --> 00:02:01.570
on the syntax here because we
wanna wrap our heads around it.

32
00:02:01.570 --> 00:02:03.948
Okay, so if firstName.

33
00:02:03.948 --> 00:02:05.085
&gt;&gt; .length.

34
00:02:05.085 --> 00:02:08.926
&gt;&gt; Length, great.

35
00:02:08.926 --> 00:02:10.210
&gt;&gt; Is greater than.

36
00:02:10.210 --> 00:02:11.376
&gt;&gt; Greater than.

37
00:02:11.376 --> 00:02:12.556
&gt;&gt; lastName.length.

38
00:02:12.556 --> 00:02:14.306
&gt;&gt; lastName.length, yep.

39
00:02:14.306 --> 00:02:17.018
So remember, length tells us how
many characters are in a string.

40
00:02:17.018 --> 00:02:19.325
Okay, then?

41
00:02:19.325 --> 00:02:21.714
&gt;&gt; Then we'd have a curly brace.

42
00:02:21.714 --> 00:02:24.625
&gt;&gt; Curly braces,
our good friend that shows up in so

43
00:02:24.625 --> 00:02:27.333
many different places in JavaScript, yes.

44
00:02:27.333 --> 00:02:29.968
&gt;&gt; And I forget,
did we wanna say if it's returned true,

45
00:02:29.968 --> 00:02:32.158
if it's firstName is longer than lastName.

46
00:02:32.158 --> 00:02:35.720
&gt;&gt; We wanna, let's say log a message and
just say, firstName is longer.

47
00:02:35.720 --> 00:02:40.174
&gt;&gt; Okay, yeah, then it'll be console.log
text that's just saying that

48
00:02:40.174 --> 00:02:42.449
firstName is longer than lastName.

49
00:02:42.449 --> 00:02:47.333
&gt;&gt; Sure, we could say we could say just
like firstName is longer in a string.

50
00:02:47.333 --> 00:02:52.299
Or we can use our little comma friends
that we just found out, actually since we

51
00:02:52.299 --> 00:02:57.718
have variables for these things, we could
say, firstName is longer than lastName,

52
00:02:57.718 --> 00:03:01.885
for example, similarly to how
we did the numbers before, yeah?

53
00:03:01.885 --> 00:03:02.404
&gt;&gt; Yep.

54
00:03:02.404 --> 00:03:04.718
&gt;&gt; Great.
&gt;&gt; And then have an else.

55
00:03:04.718 --> 00:03:07.333
&gt;&gt; Okay let's do an else, yeah.

56
00:03:07.333 --> 00:03:10.170
&gt;&gt; That would just say console.log.

57
00:03:10.170 --> 00:03:13.231
&gt;&gt; So like this, else console.log.

58
00:03:13.231 --> 00:03:14.691
&gt;&gt; Then another open.

59
00:03:14.691 --> 00:03:16.709
&gt;&gt; Just like this?

60
00:03:16.709 --> 00:03:21.736
&gt;&gt; Well, I think if it's just a single
line, do we need a curly brace?

61
00:03:21.736 --> 00:03:28.485
&gt;&gt; So, yeah, it's flexible in JavaScript.

62
00:03:28.485 --> 00:03:32.615
Sometimes you'll see conditionals that
don't have curly braces around them.

63
00:03:32.615 --> 00:03:36.981
But I would say, when in doubt, let's put
curly braces around it to make it really

64
00:03:36.981 --> 00:03:39.973
clear that we have a different
block of code happening.

65
00:03:39.973 --> 00:03:43.560
You will though in your JavaScripted
ventures, reading other people's code,

66
00:03:43.560 --> 00:03:46.632
you'll sometimes see conditionals
that don't have curly braces.

67
00:03:46.632 --> 00:03:52.498
And in fact in a minute we're gonna look
at an even shorter way to write this out.

68
00:03:52.498 --> 00:03:55.255
But for now, yeah,
we will use our curly braces, and

69
00:03:55.255 --> 00:03:57.355
then I think I know where you're going.

70
00:03:57.355 --> 00:04:01.616
It would be, let's say,
lastName is longer than, or

71
00:04:01.616 --> 00:04:05.890
you could say firstName is
shorter than what have you.

72
00:04:05.890 --> 00:04:08.429
Okay, seem good?

73
00:04:11.026 --> 00:04:14.196
&gt;&gt; Yeah, okay, we got the semi colon.

74
00:04:14.196 --> 00:04:14.700
Yep, good.

75
00:04:14.700 --> 00:04:20.697
&gt;&gt; Awesome, Anjana is longer than Vakil,
it has six letters instead of five.

76
00:04:20.697 --> 00:04:23.428
Look at that, all right, great.

77
00:04:23.428 --> 00:04:28.169
Now, how about a function called isEmpty,

78
00:04:28.169 --> 00:04:35.216
which takes in an array and
returns true if the array is empty, and

79
00:04:35.216 --> 00:04:41.130
false if the array is not empty,
if it has things in it?

80
00:04:41.130 --> 00:04:44.038
Who would like to help me
take a stab at this one?

81
00:04:47.241 --> 00:04:48.039
Paul?

82
00:04:48.039 --> 00:04:53.916
&gt;&gt; Sure So,

83
00:04:56.643 --> 00:04:59.660
We want to create it as a function, right?

84
00:04:59.660 --> 00:05:00.904
&gt;&gt; We want a function, yeah.

85
00:05:00.904 --> 00:05:04.032
There's a few different ways we go up, a
couple of different ways we could do that.

86
00:05:04.032 --> 00:05:06.316
You get to pick because you're driving.

87
00:05:06.316 --> 00:05:11.727
&gt;&gt; All right, function,
Then is what was the.

88
00:05:11.727 --> 00:05:16.090
&gt;&gt; So we usually named functions like
this, that are telling us a true or

89
00:05:16.090 --> 00:05:20.830
false value we usually call it say name
them like, it's called a predicate

90
00:05:20.830 --> 00:05:25.592
basically, like isEmpty or is longer
than or something like that, yeah.

91
00:05:25.592 --> 00:05:27.128
So let's name it isEmpty.

92
00:05:27.128 --> 00:05:32.072
&gt;&gt; isEmpty, and
then give it the arguments.

93
00:05:32.072 --> 00:05:34.180
So let's just say array.

94
00:05:34.180 --> 00:05:37.864
&gt;&gt; Okay, right, so we're gonna say
we have a parameter called array.

95
00:05:37.864 --> 00:05:39.508
&gt;&gt; And then curly braces.

96
00:05:39.508 --> 00:05:42.415
&gt;&gt; Curlys, always with the curlys.

97
00:05:42.415 --> 00:05:44.403
&gt;&gt; And we need the if statement in there.

98
00:05:44.403 --> 00:05:46.871
&gt;&gt; So if.

99
00:05:46.871 --> 00:05:51.401
&gt;&gt; Then in it's got to
still have the parentheses.

100
00:05:51.401 --> 00:05:53.126
&gt;&gt; Parens, yeah.

101
00:05:53.126 --> 00:06:00.308
&gt;&gt; array.length is equals 0,

102
00:06:00.308 --> 00:06:05.198
tripled equals 0.

103
00:06:05.198 --> 00:06:08.437
And then, again, the curly.

104
00:06:08.437 --> 00:06:12.323
And then this would be a return true.

105
00:06:17.100 --> 00:06:23.266
And then you would have an else, and
then again curly braces and return false.

106
00:06:28.325 --> 00:06:30.589
&gt;&gt; Like this?

107
00:06:30.589 --> 00:06:32.225
&gt;&gt; Yes, I think that will do it.

108
00:06:32.225 --> 00:06:33.482
&gt;&gt; Let's do it, let's give it a shot.

109
00:06:33.482 --> 00:06:38.006
Okay, so now if I have isEmpty
on like an array with one, two,

110
00:06:38.006 --> 00:06:42.530
three, we should expect false
because there's stuff in it.

111
00:06:42.530 --> 00:06:47.040
And if I give it an empty array just the
two square brackets next to each other.

112
00:06:47.040 --> 00:06:48.423
JavaScript [LAUGH] is like what,

113
00:06:48.423 --> 00:06:51.766
are you sure you meant to make an empty
array really you don't want anything?

114
00:06:51.766 --> 00:06:53.780
All right, stop being so
helpful JavaScript, yes,

115
00:06:53.780 --> 00:06:54.910
I want an empty array, okay.

116
00:06:54.910 --> 00:06:59.082
True, good, great, wonderful.

117
00:06:59.082 --> 00:07:01.944
All right, now question,

118
00:07:01.944 --> 00:07:06.807
do you think an empty array is truthy or
falsy?

119
00:07:06.807 --> 00:07:13.359
So we said for example,
a non empty string is truthy.

120
00:07:13.359 --> 00:07:17.371
A number, if it's zero, it's falsy,

121
00:07:17.371 --> 00:07:21.390
what do you think about the empty array?

122
00:07:22.410 --> 00:07:25.430
This is just a guessing game,
and how could we find out?

123
00:07:25.430 --> 00:07:26.766
How can we test?

124
00:07:26.766 --> 00:07:32.159
Two, you looked like you had a thought?

125
00:07:32.159 --> 00:07:33.396
&gt;&gt; Should we write a conditional about it?

126
00:07:33.396 --> 00:07:35.801
&gt;&gt; Let's write a conditional about it,
yeah.

127
00:07:35.801 --> 00:07:40.945
So we wrote a function that tests
whether or not an array is empty.

128
00:07:40.945 --> 00:07:44.973
What we want to do now is use our
conditional syntax to find out,

129
00:07:44.973 --> 00:07:47.861
like the way that we did
a little bit earlier,

130
00:07:47.861 --> 00:07:50.901
we found out whether zero was truthy or
falsey.

131
00:07:50.901 --> 00:07:52.267
&gt;&gt; So we have to write it like that?

132
00:07:52.267 --> 00:07:53.066
&gt;&gt; Basically like this, yes.

133
00:07:53.066 --> 00:07:59.202
So let me, to help us out here I'm
gonna copy this one and we can edit it.

134
00:07:59.202 --> 00:08:05.677
So in this case, we're interested
in empty array instead of 0.

135
00:08:08.155 --> 00:08:12.235
And I just need to make one more change.

136
00:08:12.235 --> 00:08:13.576
&gt;&gt; The square bracket around the 0.

137
00:08:13.576 --> 00:08:17.070
&gt;&gt; Okay, so just the square brackets.

138
00:08:17.070 --> 00:08:21.364
Yeah, because if I had square brackets
around the 0, is that array empty?

139
00:08:21.364 --> 00:08:23.767
It has length one.

140
00:08:23.767 --> 00:08:25.356
It has one thing in it and it's zero.

141
00:08:25.356 --> 00:08:29.091
Yeah, but this now is a totally empty
array, it's just square brackets, so

142
00:08:29.091 --> 00:08:30.021
what do you think?

143
00:08:30.021 --> 00:08:31.310
Let's take bets.

144
00:08:31.310 --> 00:08:32.264
&gt;&gt; I think it's truthy.

145
00:08:32.264 --> 00:08:33.959
&gt;&gt; You think it's truthy?

146
00:08:33.959 --> 00:08:35.189
&gt;&gt; False.
&gt;&gt; Yeah, true.

147
00:08:35.189 --> 00:08:38.750
&gt;&gt; Maybe it's truthy, maybe it's falsy,
I think we have, I don't know,

148
00:08:38.750 --> 00:08:39.910
we have votes for both.

149
00:08:39.910 --> 00:08:42.258
I dunno what the chat thinks.

150
00:08:42.258 --> 00:08:44.870
Moment of truth, drum roll please.

151
00:08:46.270 --> 00:08:48.233
It's truthy.

152
00:08:48.233 --> 00:08:55.060
So objects are truthy,
and arrays are objects.

153
00:08:55.060 --> 00:08:59.420
What do you think about an empty string?

154
00:09:02.090 --> 00:09:06.065
&gt;&gt; I think it would be truthy as well,
you are not saying is nothing,

155
00:09:06.065 --> 00:09:08.683
you are just not passing anything into it.

156
00:09:08.683 --> 00:09:13.463
&gt;&gt; Okay, maybe it's truthy because it's
still a thing, it's still a string,

157
00:09:13.463 --> 00:09:18.110
it just has no characters in it, similar
to an empty array has no items in it.

158
00:09:19.190 --> 00:09:22.231
Any other bets being
placed on other horses?

159
00:09:22.231 --> 00:09:22.787
&gt;&gt; It's falsey.

160
00:09:22.787 --> 00:09:26.640
&gt;&gt; Okay, maybe it's falsey cuz I
don't know, there's nothingness.

161
00:09:26.640 --> 00:09:30.837
Sometimes these are just
arbitrary choices that JavaScript

162
00:09:30.837 --> 00:09:33.060
developers [LAUGH] have made.

163
00:09:33.060 --> 00:09:34.240
&gt;&gt; Someone in the chat says truthy.

164
00:09:34.240 --> 00:09:36.730
&gt;&gt; All right, we got votes for truthy.

165
00:09:36.730 --> 00:09:39.216
Moment of truthyness.

166
00:09:39.216 --> 00:09:41.283
Let's find out.

167
00:09:41.283 --> 00:09:43.380
Empty string is falsy.

168
00:09:45.700 --> 00:09:50.297
Do I have a strong explanation for
why empty arrays are truthy but

169
00:09:50.297 --> 00:09:52.180
empty strings are falsy?

170
00:09:52.180 --> 00:09:56.611
Well, I would just say that basically,
because the array is an object, and

171
00:09:56.611 --> 00:09:59.936
objects are kind of a corpulent
thing that sits around and

172
00:09:59.936 --> 00:10:03.881
we said it could have properties,
it could have index properties,

173
00:10:03.881 --> 00:10:06.609
things like that,
indices in the array case.

174
00:10:06.609 --> 00:10:08.720
Whereas an empty string,
it's never gonna change.

175
00:10:08.720 --> 00:10:14.250
Since strings are immutable, an empty
string is never gonna have stuff in it.

176
00:10:14.250 --> 00:10:16.775
An empty array we could push stuff into.

177
00:10:16.775 --> 00:10:18.887
So this is as close as I can get for

178
00:10:18.887 --> 00:10:24.225
a logical explanation to why empty arrays
are truthy but empty strings or falsy?

179
00:10:24.225 --> 00:10:28.542
But suffice it to say, be aware if
you're working with conditionals and

180
00:10:28.542 --> 00:10:32.381
you're passing in a value,
be aware of the truthiness, yeah.

181
00:10:32.381 --> 00:10:34.852
&gt;&gt; What about null or undefined?

182
00:10:34.852 --> 00:10:37.639
&gt;&gt; Let's find out.

183
00:10:37.639 --> 00:10:41.083
What do we think about null?

184
00:10:41.083 --> 00:10:45.647
The hardest part is typing.

185
00:10:45.647 --> 00:10:50.439
All right, who votes truthy?

186
00:10:50.439 --> 00:10:52.585
Nobody, who votes falsy?

187
00:10:52.585 --> 00:10:56.692
Everybody, yes, indeed it is falsy.

188
00:10:56.692 --> 00:11:03.233
And let's try with its cousin,
undefined, or sibling maybe.

189
00:11:08.306 --> 00:11:11.024
We could have made a function to do this,
but

190
00:11:11.024 --> 00:11:15.957
we did not, so that will be an exercise
for the later, undefined is also falsy.

191
00:11:15.957 --> 00:11:17.652
So nothingness is falsy.

192
00:11:17.652 --> 00:11:20.593
[LAUGH] In JavaScript
nothingness is falsy.

193
00:11:20.593 --> 00:11:23.591
Somethingness is what objects and
arrays have.

194
00:11:25.537 --> 00:11:29.580
All righty, questions so far?

195
00:11:29.580 --> 00:11:33.210
&gt;&gt; What if you feed in a string false?

196
00:11:33.210 --> 00:11:36.880
Would it still be truthy, false of
the strings gonna be truthy, right?

197
00:11:36.880 --> 00:11:38.120
&gt;&gt; Let's find out.

198
00:11:38.120 --> 00:11:40.790
&gt;&gt; Unless you're changing it to boolean,
let me know.

199
00:11:40.790 --> 00:11:44.951
&gt;&gt; Sometimes it's hard to
know when JavaScript is gonna

200
00:11:44.951 --> 00:11:50.340
try to trend change things to
another thing and when it's not.

201
00:11:50.340 --> 00:11:54.716
So the best way to find out is to double
check your understanding by asking

202
00:11:54.716 --> 00:11:56.165
JavaScript directly.

203
00:11:56.165 --> 00:11:58.757
So let's find out.

204
00:11:58.757 --> 00:12:02.290
And indeed it is a non empty string,
so it is truthy, yeah.

205
00:12:03.520 --> 00:12:05.990
&gt;&gt; Well, sure if you could
trick it maybe to do something.

206
00:12:05.990 --> 00:12:07.247
&gt;&gt; That that's a fun game.

207
00:12:07.247 --> 00:12:08.851
&gt;&gt; [LAUGH]
&gt;&gt; You can go home and

208
00:12:08.851 --> 00:12:13.640
try to trick JavaScript into thinking
truthiness of values is different.

