[00:00:00]
>> Okay, so now armed with these few spells and our good friend MDN always, so this time, it's less of a scavenger hunt and more of a task list, a to do list. We're gonna go through and we're gonna actually manipulate this page and make it individualized. So far we've been all looking at the same page.

[00:00:19]
Now we're going to customize our page for ourselves. So, if you're sitting here in the room, you're going to first of all change the player names to player one can be yourself and player two can be your closest neighbor next to you. And if you don't remember their name, ask them.

[00:00:36]
If you're following along at home, you can make player one yourself and then player two whoever is closest to you in the room you're in, or in your house, or a friend you just talked to on the phone, or whoever you want. Then as another fun add on, swap the symbols.

[00:00:53]
So right now player one has an x and player two has an o, swap them, so player one gets the o. And then change the subtitle of the page, right now it says, a game you know, change it to, a game you know and love. This is you mission should you choose to accept it.

[00:01:09]
So let's take five minutes and try to do that. We're back, with a different webpage than we had before, perhaps. How did this go? How are we feeling? Are we starting to feel the immense cosmic powers of our JavaScript spells? Little bit, at least for this one web page?

[00:01:33]
Okay, so how did you all decide to do this? For number one, changing the player names. We saw one example of changing first player name. So in mine, now it says Sofia and friends, can somebody else change it to their name? How about Jason, you look ready to change something.

[00:01:56]

>> I think I cheated. I went right into the document itself and changed all of the values.
>> All right, well, this is a totally legit thing. Since our dev tools let us edit HTML directly, one way we can change what's on the page is by going into our inspector tab, drilling into whatever we want and editing it as we see fit, right?

[00:02:27]
So that is perhaps cheating because we're not using JavaScript, but it gets the job done, so that's great. And now I have deleted a space the all important space. Okay, did anybody manage to use JavaScript to do the same thing?
>> I changed the game name using query selector h two.text content but then when I tried to do the same thing with p1-name, it says, do not set properties of no setting.

[00:02:59]

>> Errors, errors, JavaScript always is gonna complain when we're doing something so let's find out what happened here. So you typed document.?
>> QuerySelector.
>> QuerySelector.
>> Yep, p1-name.
>> p1-name.
>> Yep, dot-
>> And?
>> Xcontent.
>> Right now, we are noticing that we are missing something because right now if we stop here and we press enter, we see null.

[00:03:29]
And so now if I tried .textContent, JavaScript is like, no, I don't know what happened but something is wrong. So we're gonna talk about this later but there is something wrong here because we wanted an HTML element to come back from this. And instead we got something called null, which we're gonna talk about later about, what is null?

[00:03:49]
Is it related to undefined? What are they, do they do things for us, who knows? So, There is some small change we need to make. We figured out what it is OJ?
>> It's a hashtag.
>> It's a hashtag.
>> Why does it care?
>> If we put the hash there, now we get back the span element that we were expecting.

[00:04:12]
Does anybody know why do we need that hash? Can anybody recap or does anybody have a guess as to why it matters whether that hash is there? Yes, Paul.
>> I think that without the hash it's just looking for an element that named, and that's not an element, it's an ID.

[00:04:34]

>> Right, so in our HTML, we're looking for this span right here with the name inside of it. This has the id p1-name. And so it is the id attribute, and this is a kind of a special one, that we're looking for in this element. Now when we use querySelector, we said we're using CSS selectors or the type of selectors we use in CSS, to pull out elements from the page.

[00:05:07]
And the querySelector p1-name, JavaScript didn't complain, it didn't give an error. This is a valid thing I could pass in. But it's not going to return anything because querySelector p1-name is, as Paul pointed out, looking for an element that looks like this, has some kind of tag name p1-name.

[00:05:27]
Which even that minus is unexpected, that's not really what we're looking for. We could, for example, try the name of this, sorry, the type of this element, so the tag name itself would be a span. But we said that querySelector singular returned to the first element that matches.

[00:05:48]
So in this case, that's gonna give us the p1-symbol span because it occurs earlier in the document. And so that's gonna pick out that x which is not exactly what we want. So instead what we can use in this case, because there's an id on the element that we want on this particular span, we can kind of jump straight to that element using the id selector, which happens to be in CSS, it happens to be the # and then the text of the id or the content of the id.

[00:06:22]
So in this case #id_value and then in CSS, we would be using it kind of like at the beginning of some styling rules. In JavaScript with querySelector, we can use it to pick out the same element that CSS would pick out in a style sheet. So in this case, that's why these have different values.

[00:06:40]
So once we've got our querySelector p1-name, then in order to change the text, OJ, you wanna walk me through the rest of your solution there?
>> QuerySelector #p1-name.textcontent equals JSON. Text Content equals, well, I mean I guess in this case it would be whatever you want, so we can make it OJ.

[00:07:04]
And now the page has changed, cool? Cool, cool, cool. Cool, cool, cool. Awesome, all right. And we could do the same thing for the other player. Just really quickly, how would I change the player O? Yeah, Paul,
>> This is an excellent use of the up arrow.
>> [LAUGH] Indeed it is.

[00:07:25]
So I'm gonna press up arrow and fun fact, even if I clear, I can still use my up arrow to go back in history. So in this case, what should I change this to?
>> Just change the p1 to p2.
>> So we can press, make this p2-name and then the text content can be, why don't we make it you?

[00:07:49]
Like this?
>> Yep.
>> Beautiful, so now we have different players, excellent. Okay, now we already maybe got a little bit of a preview about the symbols here. How did we approach number two swapping the player symbols, the X and the O? So we know that the O will come first and the X will come second.

[00:08:10]
Can anybody walk me through this? So first we have to pick out the element containing each symbol. So let's try to go for the x first, right? Which we picked out before. If we remember, we saw that it is inside of another span which has an id on it, so that's handy.

[00:08:31]
So we can pick this out using the id p1 symbol. So can anybody just for variety's sake, walk me through another option I have other than using querySelector? Anybody remember? Yeah.
>> In chat they're using document.getElementById.
>> Excellent, so getElementById. And then the ID for the x, let's say, is p1 symbol.

[00:08:56]
And now I can already see my browser is being so helpful in the dev tools. It's already showing me, highlighting what element, it's showing span hash p1 symbol, meaning the span with ID p1 symbol. So we wanna pick out the symbol x, and we're gonna try to do it in a way that doesn't use querySelector just to stretch our JavaScript muscles a little bit.

[00:09:18]
So one of the suggestions made from the chat is to do document getElementById, and then the Id for the x there would be p1 symbol. And as you can see, the browser is already helpfully highlighting what element I'm picking out here, it's showing me there is a span hash p1 symbol meaning the span with id p1 symbol.

[00:09:43]
And so how do I now change this now to an o? Maybe the chat had already solved it in the messages there. So we do document.get element by ID quotes P1 symbol and then-
>> Text content,
>> Text content, I'm just tabbing to auto complete and then, Space, we want to change this, right?

[00:10:09]
So the spell that we used to do that was the equal sign and then whatever we want the content to be. In this case, we want to swap it to the other symbol, which is a letter O capital. So now we have two player O's. Once I run [LAUGH] this we have player O, player O, that's not helpful.

[00:10:24]
Let's swap the other one which, again, we can use our little shortcut up arrow to find the last command we entered. I'm just gonna go ahead and change this to p2-symbol to pick out the second line. And then this one similarly, we'll replace the O with an X and now they're in the other order.

[00:10:49]

>> Is there any fancy reverse functions that you could do, like dynamically reassign them in an order or no?
>> Is there a fancy function we could do? The answer is always yes, there's always something we could do. We could write our own function, let's say, that has some kind of representation of the two symbols and then reverses them.

[00:11:08]
Once we figure out JavaScript, we can make it do pretty much anything we want. Not always, there's an asterisk on that, but pretty much anything we want. But in this case, we're just trying to get these spells, kind of these different ways of interacting with the DOM really under our belts so that we feel confident working with the page and messing with it.

[00:11:30]
So that's why we're just kind of focusing on these getElementById, and querySelector, and textContent, and things like that. The last thing we wanted to do was change the subtitle of the page. Right now the subtitle page says, a game you know and we want it to say, a game you know and love.

[00:11:52]
So there's a couple of different ways I could do this, what options do I have? And can anybody think of a way to do this using a spell that we haven't used yet in this exercise that we saw briefly earlier? Where we add on to existing text content or in other words, append, To text content.

[00:12:21]
Did anyone use append in their solution to this exercise? I'm seeing some nodding. Sounds like maybe in the chats there were some uses of append.
>> Yeah, there's three different ways that people are adding.
>> Great, so let's see, what have we got here? Some examples or some options.

[00:12:39]
And again, there's lots of options.
>> So one person's using querySelector, header, space h2, and then append in quotes, space and space love.
>> So we can use querySelector, as we said, to pick out elements using CSS selectors. And so in this case, if we want to pick out the h2 element that is inside of the header, we can use header space h2.

[00:13:14]
This basically is sort of like getting more and more specific. It's saying in the header element, something that's an h2 element. And again, I can read all about this in MDN if I wanna read up on different selectors and how that syntax works, but this is a totally valid way to do it.

[00:13:28]
And I like it because we're discovering a new way to derail into it. And then what did we have Mark, sorry.
>> .append, in quotes.
>> .append, and then in quotes-
>> Space and space love.
>> Space and space love. Look at that. We've done it. And now if we drill into our HTML, we'll see if we go into this h2 element, we have, a game you know and love.

[00:13:57]
So additional text has been appended into the content of this element. Question.
>> This is probably beyond the scope of what you wanna talk about right now, but I did the append but I misspelled what I appended, is there any way to immediately roll back the previous command that you just did?

[00:14:15]

>> Interesting, is there a quick way to basically, no, I didn't wanna say a game you know and love because I actually hate tic tac toe. I wanna say a game you know and hate. Is there a quick way to edit that? I'm not familiar with a undo here.

[00:14:35]
Ctrl+Z isn't gonna work unfortunately. [LAUGH] But what we can do, we do know how to completely replace the text. That may be a great question, how do I completely replace this subtitle and change it to, a game you know and hate just to add a little negativity into our classroom, why wouldn't we want that?

[00:14:55]
Any guesses?
>> Yeah, I had to do that. So you just instead doing .append, you use the same old text content equals.
>> Right, so now we can just say, I totally messed up, I wanna change this entirely. Or maybe I wanna put it back to what it was before, a game you know?

[00:15:15]
And maybe I just wanna temper it a little bit. I only like it, don't love it. [LAUGH] So yeah, this is how we would have to do that. There's not a kind of a quick reverse operation kind of thing. These changes that we've made to the page, so now for example, the title is my page.

[00:15:36]
The player O comes first, the subtitle is different. The names are different, all of this stuff. These changes, They take place. They're things that I have carried out inside of this browser tab in the JavaScript console. So what do you think is gonna happen when, let's say, I refresh this page?

[00:16:02]
Am I gonna get the new content that we have here, or the old content that it had originally if I refresh? Guesses? Sorry.
>> Old content.
>> Old content is the guess. Let us check. Indeed, it has all gone away. All of my work lost. [LAUGH] It's very sad.

[00:16:25]
Because all of these changes, these are happening inside of this particular document object that I have here in my page, and that changes every time I load the page. So, these changes are not what we would call persistent, because if I reload the page, it's gonna be different.

[00:16:46]
If somebody else loads the same page from the same URL, they're gonna see something different. If let's say I changed the document title to New title, if I now even go into a separate tab and load the exact same URL, We'll notice it has the old title, even in just a different tab, same browser.

[00:17:16]
That's because each time the browser loads the page, it creates a new model of what is in this document. And that is going to be generated from whatever the source code of that page is that it finds when it goes to the URL for this page. We're gonna look at editing a file itself so that we can make sure that the changes that we're making and the things that we're doing are not just happening in this ephemeral state of the one time that we loaded this page in our browser in this one tab.

[00:17:49]
So that we can actually create a page that we can later, maybe, post on our website so everybody gets to see our beautiful JavaScript work. Or something that we can reload in our own browser and see the things that we wanted to be different. So that is a great point that Paul had made earlier in the break and just wanted to raise with you all.

