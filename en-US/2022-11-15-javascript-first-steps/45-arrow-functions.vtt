WEBVTT

1
00:00:00.000 --> 00:00:04.277
And there's actually another way that
we can make functions in JavaScript,

2
00:00:04.277 --> 00:00:09.276
that we call arrow functions, like our,
I don't know, everybody's favorite archer,

3
00:00:09.276 --> 00:00:10.424
Katniss Everdeen.

4
00:00:10.424 --> 00:00:16.007
[LAUGH] So arrow functions are so named,
because they use this operator or

5
00:00:16.007 --> 00:00:20.044
symbol here that is like,
it's called a fat arrow.

6
00:00:20.044 --> 00:00:21.512
It's the equal sign and

7
00:00:21.512 --> 00:00:25.777
then the greater than sign that sort
of makes a little arrow picture.

8
00:00:25.777 --> 00:00:31.130
And so the fat arrow here lets us
create what we call an arrow function,

9
00:00:31.130 --> 00:00:32.763
which is an unnamed or

10
00:00:32.763 --> 00:00:37.961
anonymous function that usually
doesn't have much code going on.

11
00:00:37.961 --> 00:00:44.165
So this is sort of a quick way to
create small simple little functions.

12
00:00:44.165 --> 00:00:49.772
So for example here, we have a function
that adds two numbers together, that is

13
00:00:49.772 --> 00:00:55.809
similar to our add function that we looked
at in examples earlier, but is anonymous.

14
00:00:55.809 --> 00:01:02.782
It doesn't have a name, and uses
the arrow syntax to declare the function.

15
00:01:02.782 --> 00:01:07.611
If we, If we assign this

16
00:01:07.611 --> 00:01:12.184
to a variable like add,
we essentially get the same thing,

17
00:01:12.184 --> 00:01:18.403
the same behavior as if we had declared
the function with the function keyword and

18
00:01:18.403 --> 00:01:22.627
with the return keyword,
and named the function add.

19
00:01:22.627 --> 00:01:26.202
So these two pieces of
code are equivalent,

20
00:01:26.202 --> 00:01:30.395
we could say So
let's break down what's happening.

21
00:01:30.395 --> 00:01:35.152
So in our function keyword,
function expression here,

22
00:01:35.152 --> 00:01:40.602
non-arrow, we add the name of
the function, the parameters and

23
00:01:40.602 --> 00:01:44.765
params, the curly braces,
the return keyword,

24
00:01:44.765 --> 00:01:49.346
and then the expression whose
value we want returned.

25
00:01:51.833 --> 00:01:54.997
In our arrow function,
we still have all that same stuff,

26
00:01:54.997 --> 00:01:59.011
it's just much shorter because we're
skipping some of these keywords.

27
00:01:59.011 --> 00:02:04.600
So the arrow is sort of doing the heavy
lifting of the function keyword.

28
00:02:04.600 --> 00:02:10.086
The assignment to the variable
add is doing the naming work.

29
00:02:10.086 --> 00:02:15.068
And then the params here to
the left of the arrow function

30
00:02:15.068 --> 00:02:19.318
are declaring the parameters
of the function.

31
00:02:19.318 --> 00:02:24.423
And on the right-hand side of
the arrow is the return value,

32
00:02:24.423 --> 00:02:29.339
which usually in arrow functions
is just one expression.

33
00:02:29.339 --> 00:02:33.923
So in this case, we're returning x + y,
so same in both cases.

34
00:02:33.923 --> 00:02:37.672
And if we wanna prove it,
we can go back to our console,

35
00:02:39.189 --> 00:02:42.716
We can, my goodness,

36
00:02:45.343 --> 00:02:49.589
We can declare our add,
and I hopefully haven't.

37
00:02:49.589 --> 00:02:51.510
We can check that add is a function.

38
00:02:51.510 --> 00:02:55.737
Yes, add is a function, and
we can check that it works as we expect.

39
00:02:55.737 --> 00:02:59.335
Indeed it does, cool?

40
00:02:59.335 --> 00:03:01.541
So this is a handy little syntax for

41
00:03:01.541 --> 00:03:06.650
when we just want a function that returns
a value and doesn't do anything else.

42
00:03:06.650 --> 00:03:11.700
It's not logging anything, it's not doing
any complicated math or manipulations.

43
00:03:11.700 --> 00:03:16.480
We only have one line of code in
the function and it is return statement,

44
00:03:16.480 --> 00:03:18.401
and it is returning a value.

45
00:03:18.401 --> 00:03:22.359
So this is a great little shorthand for

46
00:03:22.359 --> 00:03:29.917
when we have a simple function that
we just want to return a value, cool?

47
00:03:29.917 --> 00:03:34.670
And if this function only
takes in one parameter,

48
00:03:34.670 --> 00:03:39.083
I don't even need to go
to the trouble of typing

49
00:03:39.083 --> 00:03:43.172
parentheses around the input parameter.

50
00:03:43.172 --> 00:03:44.123
That's optional.

51
00:03:44.123 --> 00:03:47.689
I can have parentheses around the input,
but if it's only one thing,

52
00:03:47.689 --> 00:03:49.817
I don't even need to write parentheses.

53
00:03:49.817 --> 00:03:53.229
And as programmers,
we're often very lazy and

54
00:03:53.229 --> 00:03:58.006
we can't bear to spend more
milliseconds writing characters than

55
00:03:58.006 --> 00:04:01.944
we absolutely have to, so
some folks find this handy.

56
00:04:04.148 --> 00:04:10.739
And if we need multiple parameters,
we do have to enclose those parentheses.

57
00:04:10.739 --> 00:04:14.570
Because otherwise, JavaScript wouldn't
know that we're saying, kind of similar to

58
00:04:14.570 --> 00:04:17.534
how we group things when we're
doing math with our math operators.

59
00:04:17.534 --> 00:04:20.075
We're saying, hey,
this is the group of the parameters.

60
00:04:20.075 --> 00:04:23.177
And that's how we tell JavaScript,
everything to the left of the arrow in

61
00:04:23.177 --> 00:04:25.490
these parentheses,
these are the input parameters.

62
00:04:25.490 --> 00:04:28.193
And everything to the right of the arrow,

63
00:04:28.193 --> 00:04:32.300
this is the expression I want you
to return the value of, cool?

64
00:04:34.593 --> 00:04:37.288
Okay, questions so far?

65
00:04:39.045 --> 00:04:42.987
Yeah,
&gt;&gt; You can use the fat arrow with longer

66
00:04:42.987 --> 00:04:47.789
ones too and use parentheses or
curly braces, can't you?

67
00:04:47.789 --> 00:04:50.844
&gt;&gt; What a great point you make.

68
00:04:50.844 --> 00:04:56.966
If we do need to do more stuff in our
function than just return a value,

69
00:04:56.966 --> 00:05:03.935
we actually still can do that with arrow
functions by on the right-hand side,

70
00:05:03.935 --> 00:05:09.978
[LAUGH] on the right-hand side of
the arrow, putting curly braces.

71
00:05:09.978 --> 00:05:15.319
And that sort of gives us what we could
think of as a normal function body.

72
00:05:15.319 --> 00:05:19.620
So if we do wanna do other things,
like maybe console log something,

73
00:05:19.620 --> 00:05:24.067
let's say, before we return the value,
then we can use curly braces on

74
00:05:24.067 --> 00:05:27.728
the right of the arrow to
indicate a longer function body.

75
00:05:27.728 --> 00:05:33.900
But in that case, we need to remember
to return with a return keyword.

76
00:05:33.900 --> 00:05:38.820
So at this point, we're starting to
lose some of the value of switching

77
00:05:38.820 --> 00:05:43.576
to the arrow syntax to save key
strokes if that's what we're after,

78
00:05:43.576 --> 00:05:48.425
if we're code golfers, [LAUGH], but
we still can do this if we want to.

79
00:05:48.425 --> 00:05:49.215
Question.

80
00:05:51.265 --> 00:05:56.185
&gt;&gt; Is there something with this
keyword with arrow functions versus

81
00:05:56.185 --> 00:05:57.710
a normal function?

82
00:05:57.710 --> 00:06:00.149
&gt;&gt; Yes,
there is something with the this keyword.

83
00:06:00.149 --> 00:06:04.473
Yes, so there are other differences
between arrow functions and

84
00:06:04.473 --> 00:06:08.884
normal functions, let's say,
or function keyword functions.

85
00:06:08.884 --> 00:06:12.285
And one of the differences,
so remember earlier,

86
00:06:12.285 --> 00:06:16.566
we mentioned that this keyword
inside of methods, in objects.

87
00:06:16.566 --> 00:06:21.392
And this, as I said,
is a dangerous thing to work with,

88
00:06:21.392 --> 00:06:25.931
because sometimes it does
stuff you don't expect.

89
00:06:25.931 --> 00:06:28.882
And one of the things that's
complicated about this is that it

90
00:06:28.882 --> 00:06:32.247
behaves differently in arrow
functions than in function functions.

91
00:06:32.247 --> 00:06:35.493
So we're not really gonna go into
exactly how it's different and

92
00:06:35.493 --> 00:06:37.391
why and when and how to work with that.

93
00:06:37.391 --> 00:06:42.443
But our good old friend, MDN,
has all [LAUGH] of the information if you

94
00:06:42.443 --> 00:06:47.762
really wanna dig into how the this
keyword behaves differently inside of

95
00:06:47.762 --> 00:06:53.631
the body of an arrow function, versus
the body of a function keyword function.

96
00:06:53.631 --> 00:06:59.549
So there are other differences than just
the syntax between arrow functions and

97
00:06:59.549 --> 00:07:01.853
function keyword functions.

98
00:07:01.853 --> 00:07:04.472
But for the scope of this course and

99
00:07:04.472 --> 00:07:09.438
the in the interest of not giving
ourselves what we could call foot

100
00:07:09.438 --> 00:07:13.969
guns to trip ourselves up on,
we're not gonna get into it.

101
00:07:13.969 --> 00:07:17.689
But it's a good point, and
if it's something you wanna explore more,

102
00:07:17.689 --> 00:07:20.733
check out this,
that page on this that we linked earlier.

