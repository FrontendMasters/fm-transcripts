WEBVTT

1
00:00:00.000 --> 00:00:07.600
What we've got here, when I reload
my page is still nothing [LAUGH].

2
00:00:07.600 --> 00:00:12.309
Because, still I'm just declaring
functions render buttons is just

3
00:00:12.309 --> 00:00:14.474
a function it has to get called.

4
00:00:14.474 --> 00:00:19.879
And where that gets called is inside
of this render quiz function,

5
00:00:19.879 --> 00:00:25.396
which is another example of rendering
data that we need to the page.

6
00:00:25.396 --> 00:00:28.846
This one is going to take
in some kind of image URL,

7
00:00:28.846 --> 00:00:33.052
that's going to be what we
actually load the dog image from.

8
00:00:33.052 --> 00:00:35.803
A correct answer of
what breed that dog is.

9
00:00:35.803 --> 00:00:41.390
And then, an array of choices of
our all of our different reads or

10
00:00:41.390 --> 00:00:44.919
the few choices that we've pulled out.

11
00:00:44.919 --> 00:00:49.980
Where that function is called, if we look,
where are we actually rendering the quiz?

12
00:00:49.980 --> 00:00:55.978
If we're not, we're not actually rendering
the quiz yet, so we need to do that.

13
00:00:55.978 --> 00:00:58.757
And in order to render the quiz we need

14
00:00:58.757 --> 00:01:02.261
the data that this render
function requires.

15
00:01:02.261 --> 00:01:06.558
And that means we need to load
some data from the interwebs.

16
00:01:06.558 --> 00:01:09.069
In this case what we're doing,

17
00:01:09.069 --> 00:01:14.184
is we're using another an a sync
function called load quiz data,

18
00:01:14.184 --> 00:01:18.750
which is really similar to
our fetch message function.

19
00:01:18.750 --> 00:01:21.484
In fact,
it's using our fetch message function.

20
00:01:21.484 --> 00:01:28.039
To fetch something from this
URL called RANDOM_IMG_ENDPOINT,

21
00:01:28.039 --> 00:01:33.890
which if we look at it is another
endpoint on the dog CEO API,

22
00:01:33.890 --> 00:01:40.693
that is actually called
dog.ceo/api/breeds/image/random.

23
00:01:40.693 --> 00:01:45.960
And what this does,
is it gets me a URL to a totally

24
00:01:45.960 --> 00:01:50.720
randomly chosen dog of a certain breed.

25
00:01:50.720 --> 00:01:53.626
And notice that that
URL is of that format,

26
00:01:53.626 --> 00:01:58.077
that we learned how to parse we
wrote a function to parse earlier.

27
00:01:58.077 --> 00:02:04.110
So what we're doing, is we're asking
the dog.ceo API for a random image,

28
00:02:04.110 --> 00:02:09.875
which it's gonna give us back in
a message property of this JSON object.

29
00:02:09.875 --> 00:02:13.260
It's not gonna give us the image itself,
it's gonna give us the URL to the image.

30
00:02:13.260 --> 00:02:18.630
And then what we're doing, is we're
going to set that in our renderquiz,

31
00:02:18.630 --> 00:02:23.319
we're setting that on an image
element that we're creating, so

32
00:02:23.319 --> 00:02:27.180
that we can actually load
the image from that source.

33
00:02:27.180 --> 00:02:31.483
So, you can read through all this code on
your own to really understand what it's

34
00:02:31.483 --> 00:02:35.677
doing and you can look up on MDN the
different methods it's using and whatnot.

35
00:02:35.677 --> 00:02:39.676
But suffice it to say, very similar to
how we created our buttons it's creating

36
00:02:39.676 --> 00:02:42.620
an image element and
populating certain attributes.

37
00:02:42.620 --> 00:02:47.242
Including the source attribute of
an image element is what tells it what

38
00:02:47.242 --> 00:02:48.482
image to display.

39
00:02:48.482 --> 00:02:51.312
And then,
what it's doing is it's waiting for

40
00:02:51.312 --> 00:02:55.810
that image to load using an event
listener attached to the load event.

41
00:02:55.810 --> 00:03:00.320
So what we need to do now is we need to
actually call these two functions we need

42
00:03:00.320 --> 00:03:04.310
to load our quiz data, and
that's an asynchronous function.

43
00:03:04.310 --> 00:03:07.581
And then we need to render
our quiz with that data.

44
00:03:07.581 --> 00:03:13.057
And what this data returns is an array
of thing O's, of a dog image or

45
00:03:13.057 --> 00:03:18.150
URL, the correct answer, and
then the multiple choices using

46
00:03:18.150 --> 00:03:23.935
our two helper functions well,
our three helper functions actually.

47
00:03:23.935 --> 00:03:28.090
Fetch the message, get the breed from
the URL and get multiple choices.

48
00:03:28.090 --> 00:03:30.638
So we're actually doing most of this work.

49
00:03:30.638 --> 00:03:34.770
I just prewrote so that we wouldn't have
to a function that pulls it all together.

50
00:03:34.770 --> 00:03:38.903
What we need to do now is actually
hit run on our program and

51
00:03:38.903 --> 00:03:40.981
actually do all this stuff.

52
00:03:44.721 --> 00:03:48.467
So first thing we need to do is
asynchronously call the loadQuizData

53
00:03:48.467 --> 00:03:49.130
function.

54
00:03:51.350 --> 00:03:55.639
It's an async function, so we need to
make sure that we use what keyword?

55
00:03:55.639 --> 00:03:56.215
&gt;&gt; Await.

56
00:03:56.215 --> 00:03:58.080
&gt;&gt; Await, right.

57
00:03:58.080 --> 00:04:03.447
So we want to await our loadQuizdata.

58
00:04:03.447 --> 00:04:08.311
And this doesn't actually take in any
arguments because, it's using some

59
00:04:08.311 --> 00:04:13.650
of these constants, that we had declared
way up at the beginning of the file.

60
00:04:13.650 --> 00:04:17.223
Like all those breeds and
this URL is hard coded.

61
00:04:18.923 --> 00:04:19.745
Okay.

62
00:04:19.745 --> 00:04:24.055
&gt;&gt; But that function does return data,
do we need to capture that?

63
00:04:24.055 --> 00:04:29.135
&gt;&gt; We sure do,
we wanna use the data that this

64
00:04:29.135 --> 00:04:36.697
gives us back in order to populate
in order to render our quiz.

65
00:04:36.697 --> 00:04:39.042
How can we do that,
how can we capture this data.

66
00:04:39.042 --> 00:04:40.019
&gt;&gt; Destructuring.

67
00:04:40.019 --> 00:04:42.250
&gt;&gt; We could use destructuring, so

68
00:04:42.250 --> 00:04:45.977
what this returns is an array
with three things in it.

69
00:04:45.977 --> 00:04:52.309
So how can I capture the result of
awaiting this asynchronous load function?

70
00:04:54.178 --> 00:04:56.117
&gt;&gt; Do you use a constant in front of that.

71
00:04:56.117 --> 00:04:57.565
&gt;&gt; We can use const.

72
00:04:57.565 --> 00:04:59.421
&gt;&gt; And then the square brackets.

73
00:04:59.421 --> 00:05:02.252
&gt;&gt; Square brackets because it's
an array we're destructuring here.

74
00:05:02.252 --> 00:05:06.517
&gt;&gt; And then in there would be the three
that you have listed right there

75
00:05:06.517 --> 00:05:07.286
image URL.

76
00:05:07.286 --> 00:05:09.196
&gt;&gt; And we can name them
different things if we want,

77
00:05:09.196 --> 00:05:10.882
cuz all that we care
about is the order yep.

78
00:05:10.882 --> 00:05:17.780
So yeah correct answer and
choices yep, great.

79
00:05:17.780 --> 00:05:20.878
Okay, so
now we're gonna get those values but

80
00:05:20.878 --> 00:05:25.690
we still need to actually draw stuff and
add elements to the page.

81
00:05:25.690 --> 00:05:29.542
And to do that we're gonna
use our renderQuiz function,

82
00:05:29.542 --> 00:05:33.643
which takes in the URL,
the correct answer and the choices.

83
00:05:33.643 --> 00:05:37.743
So, on the next line I
can call render quiz

84
00:05:37.743 --> 00:05:42.203
with these values that I just got out,
yeah.

85
00:05:42.203 --> 00:05:43.952
&gt;&gt; Yes.

86
00:05:43.952 --> 00:05:46.099
&gt;&gt; Correct answer is the next one and
then choice.

87
00:05:47.480 --> 00:05:52.145
And if, the programming gods are with
us who knows if there's a missing

88
00:05:52.145 --> 00:05:55.042
parenthesis or something somewhere here.

89
00:05:55.042 --> 00:05:58.736
But if the programming gods are with
us and I save this file now.

90
00:05:58.736 --> 00:06:04.115
Open the file, file open in my y'all,

91
00:06:04.115 --> 00:06:08.111
we loaded this dog, he's so

92
00:06:08.111 --> 00:06:12.595
big because we did such a good job.

93
00:06:12.595 --> 00:06:16.774
And now there's a few different
options and this is a huge dog.

94
00:06:16.774 --> 00:06:17.750
So I have a guest but

95
00:06:17.750 --> 00:06:21.838
what do you think that we have options
we added buttons we added buttons y'all.

96
00:06:21.838 --> 00:06:25.834
Now the question is do the click handlers
work right, well they're not disabled at

97
00:06:25.834 --> 00:06:29.565
least these buttons so that's that's
a plus [LAUGH] but what should we guess.

98
00:06:29.565 --> 00:06:34.765
Anybody got a guess on what dog this?

99
00:06:34.765 --> 00:06:40.104
Yeah, well that's one of our options so
I heard Mastiff we want

100
00:06:40.104 --> 00:06:45.154
to guess Mastiff Green correct answer,
excellent job.

101
00:06:45.154 --> 00:06:49.569
Our click handler worked,
let's try again let's reload the page,

102
00:06:49.569 --> 00:06:51.940
okay smaller dog on this time [LAUGH].

103
00:06:51.940 --> 00:06:55.464
And I am not sure what this is but

104
00:06:55.464 --> 00:06:58.499
should we guess
&gt;&gt; That cam terroir again?

105
00:06:58.499 --> 00:07:00.929
&gt;&gt; I think everything gets the care and
again yep, sure is okay,

106
00:07:00.929 --> 00:07:03.947
we're too good at the game, we have to
check if our incorrect answer works.

107
00:07:03.947 --> 00:07:06.829
Okay, I'm pretty sure that
this is a Pomeranian so

108
00:07:06.829 --> 00:07:10.181
let's not get Pomeranian just
to test our click handlers,

109
00:07:10.181 --> 00:07:13.474
I have never actually heard
of this dog breed kuvaas.

110
00:07:13.474 --> 00:07:17.838
It worked, it told us that the answer I
clicked kuvaas was wrong with our red with

111
00:07:17.838 --> 00:07:21.031
our incorrect class which we
could have changed colors and

112
00:07:21.031 --> 00:07:22.871
it told us which one was correct.

113
00:07:22.871 --> 00:07:27.583
It added all of those did that nested
loop, that we implemented earlier.

114
00:07:27.583 --> 00:07:32.726
We have implemented
a dynamically loading website,

115
00:07:32.726 --> 00:07:36.726
that is fetching data from the internet,

116
00:07:36.726 --> 00:07:41.642
dynamically populating
the page with new elements

117
00:07:41.642 --> 00:07:46.115
which have event listeners
attached to them.

118
00:07:46.115 --> 00:07:49.686
And is responding to our user input.

119
00:07:49.686 --> 00:07:52.310
I mean, it's a very simple quiz game but

120
00:07:52.310 --> 00:07:55.780
it's actually doing
a ton of powerful stuff.

121
00:07:55.780 --> 00:07:59.900
And in order to do all that stuff,
we had to use asynchronous JavaScript.

122
00:07:59.900 --> 00:08:03.171
And this is possibly our
first week using JavaScript,

123
00:08:03.171 --> 00:08:06.810
our first time really wrapping
our heads around this stuff.

124
00:08:06.810 --> 00:08:12.388
And we've already got, a dynamic,
very kind of modern style,

125
00:08:12.388 --> 00:08:17.180
render, like load data and
then render it webpage.

126
00:08:17.180 --> 00:08:19.630
Now, did we write every single
line of this program ourselves?

127
00:08:19.630 --> 00:08:23.864
No but, all of the stuff that we do in
this program is very similar to the things

128
00:08:23.864 --> 00:08:28.690
that we did previously, just kind of
wrapped up in a little bit different way..

129
00:08:28.690 --> 00:08:32.539
So I really encourage you later
to go through and more carefully

130
00:08:32.539 --> 00:08:37.125
look through the code that's happening
here that we kind of glossed over.

131
00:08:37.125 --> 00:08:40.361
And maybe quiz yourself sort of
try to re implement some of it,

132
00:08:40.361 --> 00:08:43.551
see how you would do it and
compare it to the finished answer.

133
00:08:43.551 --> 00:08:48.125
And compare your solution in your local
file with my solution in the finished

134
00:08:48.125 --> 00:08:51.060
version, which you can
find on the course site.

135
00:08:51.060 --> 00:08:55.837
And continue digging, continue looking up

136
00:08:55.837 --> 00:08:59.848
things [LAUGH] on MDN, yes question.

137
00:08:59.848 --> 00:09:04.723
&gt;&gt; More of a reaction Alexandria
has given you rocket ship emojis.

138
00:09:04.723 --> 00:09:08.680
&gt;&gt; I give everyone huge
dog on scooter emoji.

139
00:09:08.680 --> 00:09:13.092
We started just getting started
just pushing ourselves and

140
00:09:13.092 --> 00:09:16.715
now we're just like this
amazingly fluffy dog.

141
00:09:16.715 --> 00:09:21.073
Just rocking it rolling our way through
JavaScript, so amazing job everybody,

142
00:09:21.073 --> 00:09:22.875
it's truly amazing job, yeah.

143
00:09:22.875 --> 00:09:29.051
&gt;&gt; A question, when you were populating
those possible choices from the breeds,

144
00:09:29.051 --> 00:09:34.140
was there a possibility that two
of the same values are returned?

145
00:09:34.140 --> 00:09:42.201
Or do you saw D dupe, the values that are
pushed into like those possible choices?

146
00:09:42.201 --> 00:09:46.002
&gt;&gt; So in this array, you just have to kind
of trust me that there's no duplicates,

147
00:09:46.002 --> 00:09:47.615
but that would be a fun exercise.

148
00:09:47.615 --> 00:09:50.437
Can you go through this breed's array and
guarantee or

149
00:09:50.437 --> 00:09:54.499
like prove to yourself that there are no
duplicates, that's a fun question.

150
00:09:54.499 --> 00:09:59.775
And then the question was when we did our
get multiple choices, how do we guarantee

151
00:09:59.775 --> 00:10:05.226
that we don't have to have the same choice
in those buttons, was that the question?

152
00:10:05.226 --> 00:10:06.076
&gt;&gt; Right.
&gt;&gt; Yeah, and

153
00:10:06.076 --> 00:10:10.676
that was why we did this, we went to
the trouble of doing this if conditional.

154
00:10:10.676 --> 00:10:15.089
Where we made sure that before
we push a potential choice,

155
00:10:15.089 --> 00:10:18.871
a candidate choice,
into the array, we check and

156
00:10:18.871 --> 00:10:24.021
make sure that choices does not
include that possibility already.

