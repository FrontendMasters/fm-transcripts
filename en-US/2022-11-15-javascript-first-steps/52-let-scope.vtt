WEBVTT

1
00:00:00.670 --> 00:00:01.499
We had a question.

2
00:00:01.499 --> 00:00:06.145
Is there some way to force
the variable I'm dealing

3
00:00:06.145 --> 00:00:09.602
with in my local scope of my function,

4
00:00:09.602 --> 00:00:15.343
to exist outside of it in the wider scope,
in the global scope.

5
00:00:15.343 --> 00:00:18.059
All right, that was the question
am I paraphrasing, okay.

6
00:00:18.059 --> 00:00:23.009
So let is one kind of hack we could
use to do something like this.

7
00:00:25.410 --> 00:00:32.653
But this can be kind of dangerous.

8
00:00:32.653 --> 00:00:33.587
So for example,

9
00:00:33.587 --> 00:00:37.471
let's say we have a variable called
feeling that has a value of free.

10
00:00:37.471 --> 00:00:43.980
Because it's a let variable,
that means I can change what it points to.

11
00:00:43.980 --> 00:00:47.855
So if I have a function
trap within that scope.

12
00:00:47.855 --> 00:00:52.681
I can do an assignment
to the variable feeling,

13
00:00:52.681 --> 00:00:57.628
which was created in
the outdoors global scope,

14
00:00:57.628 --> 00:01:01.383
and assign it to a new value boxed in.

15
00:01:01.383 --> 00:01:07.225
So now the question is outside of that
function, once I've run the function trap,

16
00:01:07.225 --> 00:01:11.493
what is going to happen when
I do console.log(feeling).

17
00:01:11.493 --> 00:01:12.815
What do you guess.

18
00:01:12.815 --> 00:01:13.480
&gt;&gt; Boxed in.

19
00:01:13.480 --> 00:01:14.090
&gt;&gt; Boxed in.

20
00:01:15.580 --> 00:01:17.300
Any other guesses?

21
00:01:17.300 --> 00:01:17.800
Let's find out.

22
00:01:19.560 --> 00:01:26.460
Oops, all right, so we have our feeling
free, just checking free, cool.

23
00:01:26.460 --> 00:01:28.390
We have our trap function.

24
00:01:28.390 --> 00:01:28.980
Nothing happened.

25
00:01:28.980 --> 00:01:30.130
Didn't call it yet.

26
00:01:30.130 --> 00:01:32.880
Let's call it, okay.

27
00:01:34.160 --> 00:01:38.070
And now let's check what feeling is,
it is indeed boxed in.

28
00:01:39.540 --> 00:01:42.527
Okay, let's go to the whiteboard and
talk about what just happened.

29
00:01:47.040 --> 00:01:49.930
So we had our global scope

30
00:01:53.359 --> 00:01:59.470
We declared a variable feeling and
what did this point to initially?

31
00:01:59.470 --> 00:02:05.763
&gt;&gt; [INAUDIBLE]
&gt;&gt; The string free, okay.

32
00:02:05.763 --> 00:02:10.690
And because it's let, we have a flexible
arrow here that can be changed.

33
00:02:10.690 --> 00:02:14.500
Then we had our function,
what was it called, trap?

34
00:02:16.250 --> 00:02:20.420
Which creates its own new scope
with tinted windows on it.

35
00:02:20.420 --> 00:02:27.355
But in this case, within there, we had
a reference to the variable feeling.

36
00:02:27.355 --> 00:02:31.611
We asked JavaScript,
give me the variable feeling.

37
00:02:31.611 --> 00:02:34.776
Because of the tinted
windows JavaScript says okay,

38
00:02:34.776 --> 00:02:37.500
I don't see any local variable feeling.

39
00:02:37.500 --> 00:02:39.350
So let me look out the windows.

40
00:02:39.350 --> 00:02:41.760
I find this variable feeling.

41
00:02:41.760 --> 00:02:42.857
Now I've got it.

42
00:02:42.857 --> 00:02:47.763
And then we said,
we gave an assignment to a new value.

43
00:02:47.763 --> 00:02:52.804
And when it runs that assignment,
JavaScript is gonna conjure

44
00:02:52.804 --> 00:02:57.191
up the whatever it was called,
boxed in the new value.

45
00:02:57.191 --> 00:03:00.885
And it's going to get rid
of our old association.

46
00:03:00.885 --> 00:03:05.394
Because feeling it found
in the global context and

47
00:03:05.394 --> 00:03:09.686
it can actually modify
what feeling points to,

48
00:03:09.686 --> 00:03:13.350
even though it's outside of its scope.

49
00:03:14.950 --> 00:03:19.543
So that change,
the pointer change from free to boxed in,

50
00:03:19.543 --> 00:03:24.437
is actually going to persist
outside of this function scope.

51
00:03:24.437 --> 00:03:29.114
So this is kind of a weird thing that
we need to be careful of when we're

52
00:03:29.114 --> 00:03:30.978
using variables with let.

53
00:03:30.978 --> 00:03:34.130
Which means that we can reassign them.

54
00:03:34.130 --> 00:03:37.608
Now, if we had tried this with const,
what would've happened?

55
00:03:41.830 --> 00:03:43.840
Error can't reassign,
can't reassign const.

56
00:03:43.840 --> 00:03:47.443
So wouldn't matter whether we were
inside or outside of the function.

57
00:03:47.443 --> 00:03:49.179
We can't reassign a const variable.

58
00:03:49.179 --> 00:03:51.128
Another reason why it's
often useful to use const.

59
00:03:51.128 --> 00:03:54.402
So that accidentally somebody
doesn't mess with your variables

60
00:03:54.402 --> 00:03:55.836
while you're not looking.

61
00:03:58.281 --> 00:04:02.510
Okay, any questions on that?

62
00:04:02.510 --> 00:04:05.090
&gt;&gt; But
isn't string immutable in JavaScript?

63
00:04:07.320 --> 00:04:07.960
&gt;&gt; Great question.

64
00:04:07.960 --> 00:04:10.731
So, yes, strings are immutable.

65
00:04:10.731 --> 00:04:16.224
Notice that we did not
change the free string.

66
00:04:16.224 --> 00:04:20.492
What changed was the pointer,
the arrow connecting

67
00:04:22.563 --> 00:04:27.717
The variable feeling to a value,
the arrow that JavaScript will

68
00:04:27.717 --> 00:04:33.670
then follow anytime we ask it to
evaluate the variable feeling.

69
00:04:33.670 --> 00:04:35.930
So initially it was
pointing out one string.

70
00:04:35.930 --> 00:04:41.361
We didn't change that string,
we conjured up a new string.

71
00:04:41.361 --> 00:04:49.790
Got rid of that old arrow and then created
a new arrow pointing to a different value.

72
00:04:49.790 --> 00:04:53.240
So we did not actually
modify the string free.

73
00:04:53.240 --> 00:04:56.462
We modified what the variable points to.

74
00:04:56.462 --> 00:05:01.300
And that was only possible because it
was a let variable, and not a const.

75
00:05:01.300 --> 00:05:02.270
Good stuff, all right.

76
00:05:02.270 --> 00:05:04.530
So this is scope.

77
00:05:04.530 --> 00:05:08.740
There is a lot more that can be
said about scope and JavaScript.

78
00:05:08.740 --> 00:05:10.090
There is a lot more.

79
00:05:10.090 --> 00:05:13.063
And as you dig deeper and deeper,
and deeper into JavaScript,

80
00:05:13.063 --> 00:05:15.827
you're going to run up against
other scope weirdnesses.

81
00:05:15.827 --> 00:05:21.755
So I highly encourage you all to continue
exploring that and doing some research.

82
00:05:21.755 --> 00:05:25.519
You can read about it on places like MDN,
you can read about it on,

83
00:05:25.519 --> 00:05:26.829
people blog about it.

84
00:05:26.829 --> 00:05:29.748
There's lots of other good resources
about scope in JavaScript,

85
00:05:29.748 --> 00:05:32.259
there are some other great
courses in FrontEnd Masters.

86
00:05:32.259 --> 00:05:35.555
Does that go more in depth
into how scope works.

87
00:05:35.555 --> 00:05:43.144
But this is just kind of a basic first
step with JavaScript scope, is to kind of.

88
00:05:43.144 --> 00:05:46.540
Think about it like every
time we create a function,

89
00:05:46.540 --> 00:05:51.719
we're creating a new limo with tinted
windows on it, that we can't look into.

90
00:05:51.719 --> 00:05:55.345
And that is going to affect which
variables we can reference,

91
00:05:55.345 --> 00:05:56.330
where and when.

92
00:05:56.330 --> 00:05:58.000
But we can see out of the limo.

93
00:05:58.000 --> 00:06:02.953
So that's why we were able
to modify our feeling that

94
00:06:02.953 --> 00:06:07.241
was declared outside
of this trap function.

95
00:06:07.241 --> 00:06:12.079
And it's also how we were able to,
in our isCorrect function.

96
00:06:12.079 --> 00:06:18.391
We were able to evaluate fact,
which was a variable declared

97
00:06:18.391 --> 00:06:23.729
in the wider context,
not inside of the function.

