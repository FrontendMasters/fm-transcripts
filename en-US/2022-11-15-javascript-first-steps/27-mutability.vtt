WEBVTT

1
00:00:00.130 --> 00:00:02.600
Before we go any further,
I wanna talk a little bit about mutation.

2
00:00:02.600 --> 00:00:08.313
So, I don't know folks who
are fans of the X-Men series,

3
00:00:08.313 --> 00:00:12.220
but yeah, grew up on this cartoon.

4
00:00:12.220 --> 00:00:19.448
Anywho, so just like in X-Men, some
things in the world can be mutated and

5
00:00:19.448 --> 00:00:23.828
some things are just
regular humans like us.

6
00:00:23.828 --> 00:00:28.939
So, in JavaScript certain
values behave differently than

7
00:00:28.939 --> 00:00:33.650
certain other values that
we might think are similar.

8
00:00:33.650 --> 00:00:37.570
So earlier we talked about
arrays versus strings.

9
00:00:37.570 --> 00:00:41.980
They have some stuff in common, like you
can use similar syntax to talk to them.

10
00:00:43.250 --> 00:00:47.200
But they're also different
in important ways.

11
00:00:47.200 --> 00:00:50.578
So, question for
y'all do these do the same thing?

12
00:00:50.578 --> 00:00:52.910
Let's talk about it.

13
00:00:52.910 --> 00:00:56.046
So in the first example,
I am on the first line, well,

14
00:00:56.046 --> 00:00:58.450
let's review concepts from yesterday.

15
00:00:58.450 --> 00:01:03.929
What am I doing in the first
line of this abcArray example?

16
00:01:03.929 --> 00:01:08.173
Can we just restate it using some of
the vocabulary we learned from yesterday.

17
00:01:08.173 --> 00:01:13.092
How about Paul can you just walk me
through what is this first line let

18
00:01:13.092 --> 00:01:14.880
abcArray do?

19
00:01:14.880 --> 00:01:19.200
&gt;&gt; You are declaring
a variable abc array and

20
00:01:19.200 --> 00:01:24.970
you're assigning the array
abc to that variable.

21
00:01:24.970 --> 00:01:26.340
&gt;&gt; Beautiful, thanks.

22
00:01:26.340 --> 00:01:31.550
So, in line one we are declaring and
assigning a variable abcArray.

23
00:01:31.550 --> 00:01:33.240
How about in line two?

24
00:01:33.240 --> 00:01:35.470
We kind of already saw this.

25
00:01:35.470 --> 00:01:36.540
So let's see Jason,

26
00:01:36.540 --> 00:01:40.490
can you walk me through what we're
doing in the second line, abcArray one?

27
00:01:40.490 --> 00:01:46.719
&gt;&gt; Yep, so we're focusing on
the second element in the array,

28
00:01:46.719 --> 00:01:52.550
which is b and
we're assigning a new value to that d.

29
00:01:52.550 --> 00:01:57.441
So the new array would be adc
&gt;&gt; Right, okay and then on the third line,

30
00:01:57.441 --> 00:01:59.480
I'm just asking for
what is the value of the new array?

31
00:01:59.480 --> 00:02:03.472
No, yes, exactly, and it's going to
hopefully because of the second line,

32
00:02:03.472 --> 00:02:04.630
it's going to be adc.

33
00:02:04.630 --> 00:02:06.431
So let's find out.

34
00:02:08.414 --> 00:02:12.221
Go back to our console and I'm just
gonna execute these one at a time.

35
00:02:15.054 --> 00:02:19.694
Okay, all right and now if I ask for
abcArray it is indeed adc.

36
00:02:19.694 --> 00:02:24.287
So what that second line did
that abcArray one equals d is,

37
00:02:24.287 --> 00:02:29.085
as we said before it replaced
that middle value in the array.

38
00:02:29.085 --> 00:02:31.398
Well, in this case it's the middle value.

39
00:02:31.398 --> 00:02:34.767
The value at index one in the array,

40
00:02:34.767 --> 00:02:40.510
we reassigned that spot in
the array to a new value.

41
00:02:40.510 --> 00:02:43.375
Okay, now how about in
the second example abcString.

42
00:02:44.597 --> 00:02:49.938
So similarly in the first line,
we're declaring a variable,

43
00:02:49.938 --> 00:02:54.284
we're assigning it a value and
in quotes "abc".

44
00:02:54.284 --> 00:02:58.950
This is a value of type String, right?

45
00:02:58.950 --> 00:03:02.240
Now what do you think
happened in the second line?

46
00:03:02.240 --> 00:03:04.818
What do you think it's gonna do, guesses?

47
00:03:04.818 --> 00:03:08.151
This abcString, bracket 1 = d.

48
00:03:08.151 --> 00:03:12.608
&gt;&gt; adc.
&gt;&gt; You think it's gonna replace?

49
00:03:12.608 --> 00:03:13.800
&gt;&gt; The b with the d.

50
00:03:13.800 --> 00:03:17.360
&gt;&gt; Replace the b so
we would then end up with a string adc.

51
00:03:17.360 --> 00:03:18.786
Okay, that's one guess, any other guesses?

52
00:03:22.321 --> 00:03:22.821
Let's find out.

53
00:03:25.836 --> 00:03:28.088
Okay, so now I'm gonna declare abcString.

54
00:03:30.117 --> 00:03:35.489
Okay, and now I'm gonna run
abcString 1 = d in the console.

55
00:03:35.489 --> 00:03:40.925
And it's gonna say, okay,
you asked me to do something with these,

56
00:03:40.925 --> 00:03:45.360
so this whole thing
evaluated to the value d.

57
00:03:45.360 --> 00:03:49.605
But now if I asked for abcString, sorry,

58
00:03:49.605 --> 00:03:54.467
that's abcArray,
abcString it is still abc.

59
00:03:54.467 --> 00:04:02.450
So that line abcString 1 = d
actually didn't do anything.

60
00:04:02.450 --> 00:04:06.464
It just evaluated to the value d and
it didn't throw any kind of error or

61
00:04:06.464 --> 00:04:09.401
anything because JavaScript is so
loosey goosey.

62
00:04:09.401 --> 00:04:12.960
That sometimes when we ask it to do
something that makes no sense or

63
00:04:12.960 --> 00:04:14.005
that it can't do.

64
00:04:14.005 --> 00:04:18.335
It just says no, I'm just gonna ignore
you, I'm just gonna keep going and

65
00:04:18.335 --> 00:04:22.942
not tell you anything about the fact that
the thing you thought you were trying to

66
00:04:22.942 --> 00:04:25.520
do didn't actually happen.

67
00:04:25.520 --> 00:04:31.850
So JavaScript did not do anything to the
abcString value, what is going on here.

68
00:04:33.180 --> 00:04:37.861
So what we have here is a difference
between what we call mutable data and

69
00:04:37.861 --> 00:04:39.900
immutable data.

70
00:04:39.900 --> 00:04:45.424
So mutable, basically means
can be mutated can be changed.

71
00:04:45.424 --> 00:04:50.129
And arrays in JavaScript
are the type of data that we can

72
00:04:50.129 --> 00:04:53.790
change as we go along in our program.

73
00:04:53.790 --> 00:04:57.630
So if we wanna swap out one
of the elements, no problem,

74
00:04:57.630 --> 00:05:01.062
if we wanna add elements on with our push,
spell,

75
00:05:01.062 --> 00:05:04.859
no problem if we want to pop elements off,
no problem.

76
00:05:04.859 --> 00:05:09.448
We can change the value of the array
over time in our programme, so

77
00:05:09.448 --> 00:05:13.460
the array is mutable, or
arrays in general are mutable.

78
00:05:14.640 --> 00:05:18.924
However, strings and
other primitive types like Boolean or

79
00:05:18.924 --> 00:05:21.703
numbers are immutable in JavaScript.

80
00:05:21.703 --> 00:05:27.270
Meaning they cannot be mutated they are
resistant to radioactive spider bites and

81
00:05:27.270 --> 00:05:29.455
whatever else we throw at them.

82
00:05:29.455 --> 00:05:32.960
They are am mixing my
Marvel metaphors here.

83
00:05:32.960 --> 00:05:39.641
But they are essentially values that once
JavaScript has conjured up the string abc,

84
00:05:39.641 --> 00:05:43.740
that string abc is always
going to be the string abc.

85
00:05:43.740 --> 00:05:46.349
I can't mess with it the way
that I can mess with an array

