WEBVTT

1
00:00:00.000 --> 00:00:04.940
So now, we need to start talking
about something that makes me

2
00:00:04.940 --> 00:00:08.082
wanna cry sometimes with JavaScript.

3
00:00:08.082 --> 00:00:09.520
I don't know about y'all.

4
00:00:09.520 --> 00:00:14.314
But like Cyndi Lauper,
time after time in JavaScript,

5
00:00:14.314 --> 00:00:18.705
the way time and
JavaScript work are complicated.

6
00:00:18.705 --> 00:00:24.051
And part of this is gonna be the answer to
the question, why is my get random element

7
00:00:24.051 --> 00:00:29.029
function not defined when I go into my
console when I load this file locally?

8
00:00:29.029 --> 00:00:33.336
The answer to that is a complicated answer
that we're gonna have to wrap our head

9
00:00:33.336 --> 00:00:35.279
around a few things to understand.

10
00:00:35.279 --> 00:00:39.539
And at the heart of all of
these things is asynchronous or

11
00:00:39.539 --> 00:00:42.176
synchronous code in JavaScript.

12
00:00:42.176 --> 00:00:48.456
So, I hope everybody is buckled up and
has their energy drinks with them and

13
00:00:48.456 --> 00:00:54.651
is armed with a lot of self-compassion for
this being a difficult thing.

14
00:00:54.651 --> 00:00:59.696
Because even folks like myself who've
been working with JavaScript for

15
00:00:59.696 --> 00:01:04.416
a long time find this like a tricky
concept to wrap our heads around.

16
00:01:04.416 --> 00:01:08.576
So do not worry if this starts to
break our brains a little bit,

17
00:01:08.576 --> 00:01:10.897
that means we're doing it right.

18
00:01:10.897 --> 00:01:16.138
You could say that time and
JavaScript are sort of frenemies.

19
00:01:16.138 --> 00:01:22.476
[LAUGH] They have to get along
because we live in universe.

20
00:01:22.476 --> 00:01:25.978
I mean, I don't totally understand
the physics of it, but time exists or

21
00:01:25.978 --> 00:01:29.253
at least we've all agreed that it exists,
and we all have watches and

22
00:01:29.253 --> 00:01:30.795
clocks that say that it exists.

23
00:01:30.795 --> 00:01:37.840
And so our programs also have to do things
over time, running code takes time.

24
00:01:37.840 --> 00:01:43.733
Now, usually, the code that we run in
JavaScript is really, really quick.

25
00:01:43.733 --> 00:01:47.795
If I do console.log,
this will print in a New York minute, and

26
00:01:47.795 --> 00:01:51.643
console.log, this will print
one New York minute later.

27
00:01:51.643 --> 00:01:54.600
Again, we said a New York
minute is an instant.

28
00:01:54.600 --> 00:02:00.108
We are gonna see this print out pretty
much instantaneously in a New York minute,

29
00:02:00.108 --> 00:02:03.834
because these are really,
really quick operations.

30
00:02:03.834 --> 00:02:08.469
So usually, JavaScript can just
run straight through our code,

31
00:02:08.469 --> 00:02:14.279
executing it line by line by line by line,
doing it one thing right after another,

32
00:02:14.279 --> 00:02:18.519
or as we sometimes say executing
that code synchronously.

33
00:02:18.519 --> 00:02:21.046
So one thing after another,
one thing at a time.

34
00:02:23.841 --> 00:02:28.443
But sometimes we need to do
something that takes a long time,

35
00:02:28.443 --> 00:02:34.682
maybe we asked JavaScript to run a while
loop over a million numbers or something.

36
00:02:34.682 --> 00:02:38.231
Or maybe we did some other things
that are gonna take a long time,

37
00:02:38.231 --> 00:02:40.220
which we can talk about in a minute.

38
00:02:40.220 --> 00:02:45.576
And if anybody remembers the theme song
to Dawson's Creek, I don't wanna wait for

39
00:02:45.576 --> 00:02:49.952
my life to be over before I get to
interact with my web browser again.

40
00:02:49.952 --> 00:02:55.075
If JavaScript stopped to wait for
a long, long, long-running operation

41
00:02:55.075 --> 00:03:00.460
because it's running in the web browser,
I wouldn't be able to do anything.

42
00:03:00.460 --> 00:03:03.094
I wouldn't be able to click on buttons.

43
00:03:03.094 --> 00:03:07.777
I wouldn't be able to be seeing other
stuff that's supposed to be changing on

44
00:03:07.777 --> 00:03:08.432
the page.

45
00:03:08.432 --> 00:03:09.944
So we don't wanna wait for

46
00:03:09.944 --> 00:03:13.465
JavaScript to be done with
something that takes a long time.

47
00:03:15.713 --> 00:03:19.861
And the thing about JavaScript is
unlike if folks have worked with other

48
00:03:19.861 --> 00:03:23.464
programming languages,
this might be a term you've heard.

49
00:03:23.464 --> 00:03:26.934
But unlike some other programming
languages, JavaScript really,

50
00:03:26.934 --> 00:03:28.499
there's an asterisk on this.

51
00:03:28.499 --> 00:03:33.420
But in general, JavaScript can
really only do one thing at a time.

52
00:03:33.420 --> 00:03:35.656
A phrase you might have
heard is single threaded.

53
00:03:35.656 --> 00:03:38.209
We're not gonna get into
the technicalities of what that means.

54
00:03:38.209 --> 00:03:43.841
But suffice it to say, just like
Lady Gaga says in her Telephone song,

55
00:03:43.841 --> 00:03:47.951
she says,
I cannot text you with a drink in my hand.

56
00:03:47.951 --> 00:03:52.887
JavaScript cannot do multiple
things at the same time,

57
00:03:52.887 --> 00:03:57.305
I cannot have a drink and
also text with that hand.

58
00:03:57.305 --> 00:03:59.428
Maybe someone really dexterous could,

59
00:03:59.428 --> 00:04:03.495
maybe some other programming language
could, but JavaScript and I cannot.

60
00:04:03.495 --> 00:04:06.728
So JavaScript can really
only do one thing at a time.

61
00:04:06.728 --> 00:04:11.628
So what happens is when we give JavaScript
a task that's gonna take a long time, for

62
00:04:11.628 --> 00:04:16.038
example, here in this code,
where we've got a console.log statement,

63
00:04:16.038 --> 00:04:19.474
that's a New York minute,
that doesn't take much time.

64
00:04:19.474 --> 00:04:23.224
But then we have a built-in
function called setTimeout,

65
00:04:23.224 --> 00:04:27.817
which what setTimeout does is it's
going to give it a little function,

66
00:04:27.817 --> 00:04:32.196
which we call a callback function,
similar to our event handlers.

67
00:04:32.196 --> 00:04:36.400
When JavaScript, we give it a function,
and then we say only run this after

68
00:04:36.400 --> 00:04:39.756
somebody clicked on something
I attached to listener two.

69
00:04:39.756 --> 00:04:43.463
JavaScript is going to do something
similar here, where it's gonna take

70
00:04:43.463 --> 00:04:46.765
that function and run it after
a certain number of milliseconds.

71
00:04:46.765 --> 00:04:49.760
So in this case,
a 1,000 milliseconds or one second.

72
00:04:49.760 --> 00:04:53.372
So, and
one second in computer time is forever.

73
00:04:53.372 --> 00:04:58.218
So this is gonna take forever as
far as JavaScript is concerned.

74
00:04:58.218 --> 00:05:01.533
And so
if we are then logging something else,

75
00:05:01.533 --> 00:05:07.031
what we want is we don't want JavaScript
to stop at that setTimeout line and

76
00:05:07.031 --> 00:05:11.766
freeze our web browser and make it so
we can't do anything else.

77
00:05:11.766 --> 00:05:17.073
So what JavaScript does is it takes that
timeout function that we gave it and

78
00:05:17.073 --> 00:05:22.628
it sort of adds it to, we could think of
it like a to-do list, a task list that it

79
00:05:22.628 --> 00:05:28.473
has somewhere in its internals that it's
remembering stuff it still needs to do.

80
00:05:28.473 --> 00:05:31.450
And it's gonna keep trying to
run the rest of our program.

81
00:05:31.450 --> 00:05:38.328
And say, all right, I'm gonna get to
that long task later, at some point.

82
00:05:38.328 --> 00:05:44.341
And a task like setTimeout
is gonna run asynchronously,

83
00:05:44.341 --> 00:05:51.619
meaning at a different time than kind
of where it appears in the code.

84
00:05:51.619 --> 00:05:55.813
So, synchronous meaning same time,

85
00:05:55.813 --> 00:06:00.407
asynchronous meaning not the same time.

86
00:06:00.407 --> 00:06:04.711
I find this terminology pretty confusing,
so if you do too, we're in the same boat.

87
00:06:04.711 --> 00:06:10.187
But the way this is usually used in
JavaScript is it means, is this code gonna

88
00:06:10.187 --> 00:06:15.594
run kind of as I see it in the program,
or is it gonna run at some other point?

89
00:06:15.594 --> 00:06:18.592
So let's find out what happens
when I run this code here.

90
00:06:18.592 --> 00:06:24.047
So if I run this code, let's see what
order we get these statements in.

91
00:06:27.356 --> 00:06:28.706
You see what happened there?

92
00:06:28.706 --> 00:06:30.076
Let's try it again.

93
00:06:33.943 --> 00:06:36.800
So because we set a timeout for 1 second,

94
00:06:36.800 --> 00:06:40.726
what happened was JavaScript
started running our code.

95
00:06:40.726 --> 00:06:44.436
This will print first, okay,
that seems pretty reasonable,

96
00:06:44.436 --> 00:06:46.397
then it added our console.log.

97
00:06:46.397 --> 00:06:50.417
This will print third to a to-do
list somewhere and said,

98
00:06:50.417 --> 00:06:53.710
hey, let me come back to
this after one second.

99
00:06:53.710 --> 00:06:56.444
Then it kept running our program, and

100
00:06:56.444 --> 00:07:01.410
it printed the final line of our code,
but the second thing to print.

101
00:07:01.410 --> 00:07:06.022
And then it even came back and
returned the value of this whole thing,

102
00:07:06.022 --> 00:07:08.339
which turned out to be undefined.

103
00:07:08.339 --> 00:07:12.908
And then finally, our second was up,
and it ran our function and

104
00:07:12.908 --> 00:07:15.877
a console.log, this will print third.

105
00:07:15.877 --> 00:07:19.715
So that middle line,
that runs asynchronously.

106
00:07:19.715 --> 00:07:24.039
And the reason that we want JavaScript
to work this way is because

107
00:07:24.039 --> 00:07:29.086
JavaScript doesn't have the ability
like some other languages to text and

108
00:07:29.086 --> 00:07:31.831
hold a drink in its hand at the same time.

109
00:07:31.831 --> 00:07:37.412
So what we have to do is text or
put the drink down on a table somewhere,

110
00:07:37.412 --> 00:07:41.664
then send our text, and
then pick the drink back up.

111
00:07:41.664 --> 00:07:44.913
And this is so
that our browser still gets to do stuff.

112
00:07:44.913 --> 00:07:49.477
So we can still click on things, and
we can still interact with our web pages,

113
00:07:49.477 --> 00:07:53.760
even though we know that there's some
other thing that we need to do later

114
00:07:53.760 --> 00:07:55.465
that's taking a long time.

115
00:07:57.755 --> 00:08:03.548
As I said, one of the hardest things in
my opinion to understand about JavaScript

116
00:08:03.548 --> 00:08:08.506
is how it works this way because it's
a kind of a unique model of time.

117
00:08:08.506 --> 00:08:13.155
[LAUGH] But some of the things that
work asynchronously in JavaScript or

118
00:08:13.155 --> 00:08:17.272
that take a lot of time are stuff
like waiting for user events.

119
00:08:17.272 --> 00:08:22.692
So essentially, what we did with that
event handler that we wrote before or

120
00:08:22.692 --> 00:08:27.855
the several event handlers that we've
seen so far is we gave JavaScript

121
00:08:27.855 --> 00:08:32.587
a function to go run at some point
later when the user has clicked on

122
00:08:32.587 --> 00:08:37.520
the thing we care about, or
when the user has moused over the thing.

123
00:08:37.520 --> 00:08:41.272
So we wrote the code at a particular
point in our program, but

124
00:08:41.272 --> 00:08:44.668
that's not necessarily when
it's going to execute.

125
00:08:44.668 --> 00:08:48.235
It's gonna execute later
when something else happens.

126
00:08:48.235 --> 00:08:52.335
Other stuff that takes time is
asking a user for something,

127
00:08:52.335 --> 00:08:56.110
when it says, hey,
where do you wanna save this file?

128
00:08:56.110 --> 00:09:00.400
Or hey, which file do you wanna
upload into this website?

129
00:09:00.400 --> 00:09:05.474
Or can I have permission
to record from your camera?

130
00:09:05.474 --> 00:09:08.062
Things like that, those take time.

131
00:09:08.062 --> 00:09:12.818
Another thing that takes time
that's gonna be relevant for

132
00:09:12.818 --> 00:09:19.299
our doggo game is it takes time to load
data from somewhere else on the interwebs.

133
00:09:19.299 --> 00:09:25.742
So if we want to, let's say, go find an
image somewhere out there on the Internet,

134
00:09:25.742 --> 00:09:31.264
it's gonna take a little bit of time for
JavaScript to say, okay,

135
00:09:31.264 --> 00:09:36.171
you're telling me to go find some image,
I'm gonna go get it.

136
00:09:36.171 --> 00:09:39.997
I'm gonna make a call to that person
who has that image, I'm gonna wait for

137
00:09:39.997 --> 00:09:43.397
them to respond to me, and
then I'm gonna give you the image back,

138
00:09:43.397 --> 00:09:44.996
that's gonna take some time.

139
00:09:44.996 --> 00:09:49.038
It has to maybe go all the way around
the world to find us the image we want of

140
00:09:49.038 --> 00:09:53.631
a doggo that's really special from a
different part of the world, I don't know.

141
00:09:53.631 --> 00:09:56.759
So that is something that is
gonna take a lot of time, and

142
00:09:56.759 --> 00:09:59.566
we need to handle
asynchronously in JavaScript.

143
00:10:01.973 --> 00:10:05.599
So another thing that takes
time in JavaScript is learning

144
00:10:05.599 --> 00:10:07.749
about asynchronous JavaScript.

145
00:10:07.749 --> 00:10:12.038
If you all walk away and have at least
your feet under you of like, okay,

146
00:10:12.038 --> 00:10:16.899
this is something that I don't totally
understand, but I know that I can get it,

147
00:10:16.899 --> 00:10:19.711
that is success as far
as I'm concerned here.

148
00:10:19.711 --> 00:10:21.750
I do not expect you all to
walk all right being like,

149
00:10:21.750 --> 00:10:24.695
I know everything there is to know
about asynchronous JavaScript because

150
00:10:24.695 --> 00:10:27.849
that takes a lot of time to really wrap
your head around what is happening here.

151
00:10:27.849 --> 00:10:31.767
And I haven't even explained really
how this works under the hood or

152
00:10:31.767 --> 00:10:35.765
why it works this way, but
there are some great resources out there.

153
00:10:35.765 --> 00:10:39.665
Of course, MDN has a guide on it,
but there's also a really, really,

154
00:10:39.665 --> 00:10:43.827
really great talk by Philip Roberts
about something called the event loop.

155
00:10:43.827 --> 00:10:47.922
And yes, event as in click events,
and mouse hover events, and whatnot,

156
00:10:47.922 --> 00:10:52.280
and anything else that's taking a long
time in JavaScript, like our timeout.

157
00:10:52.280 --> 00:10:56.473
So I highly recommend as optional
homework, you go check that out and

158
00:10:56.473 --> 00:10:59.088
read up more on asynchronous JavaScript.

159
00:10:59.088 --> 00:11:01.703
There's a lot of other resources courses,

160
00:11:01.703 --> 00:11:05.733
there's some courses on Frontend Masters
that really go into it and

161
00:11:05.733 --> 00:11:09.778
talk about different kind of models
of asynchronous programming.

162
00:11:09.778 --> 00:11:14.240
So we're gonna talk about it in a very
practical sense of how do we do the thing

163
00:11:14.240 --> 00:11:15.513
we're trying to do.

164
00:11:15.513 --> 00:11:20.185
But in terms of really getting the picture
of what JavaScript is doing when it

165
00:11:20.185 --> 00:11:24.419
comes to these long-running tasks and
how it's managing to text and

166
00:11:24.419 --> 00:11:29.104
drink at the same time or at least
pretend to, even though we can't really.

167
00:11:29.104 --> 00:11:31.891
That's something that's a little bit
out of the scope of this course.

168
00:11:31.891 --> 00:11:35.991
&gt;&gt; How much time do you allow for
asynchronous actions?

169
00:11:35.991 --> 00:11:37.700
&gt;&gt; How much time do you allow?

170
00:11:37.700 --> 00:11:42.721
Well, it really depends, which is
a frustrating answer to almost every

171
00:11:42.721 --> 00:11:47.514
question that it is an answer to,
which is a lot in computer science.

172
00:11:47.514 --> 00:11:52.024
It depends, but for
example, for our setTimeout,

173
00:11:52.024 --> 00:11:58.390
which we said we want this to wait
1,000 milliseconds or one second.

174
00:11:58.390 --> 00:12:02.861
That means we need to make,
we are telling JavaScript to wait 1,000

175
00:12:02.861 --> 00:12:07.408
milliseconds before it even tries to
run our little anonymous function,

176
00:12:07.408 --> 00:12:10.437
that console.log, and
this will print third.

177
00:12:10.437 --> 00:12:14.900
Which means it might even take
a little bit more than 1,000

178
00:12:14.900 --> 00:12:18.701
milliseconds before JavaScript
is able to get to it.

179
00:12:18.701 --> 00:12:23.436
Cuz we're basically saying, hey,
JavaScript, wait 1000 milliseconds and

180
00:12:23.436 --> 00:12:24.595
then try to do this.

181
00:12:24.595 --> 00:12:28.420
So we said that what it does is
sort of it adds it to a task list,

182
00:12:28.420 --> 00:12:32.845
a to-do list kind of that's related
to this event loop thing that I'm

183
00:12:32.845 --> 00:12:36.223
waving my hands at and
telling you to go look up later.

184
00:12:36.223 --> 00:12:38.999
It adds this timeout to a task list.

185
00:12:38.999 --> 00:12:43.457
But if there's a lot of other stuff on
that task list, then it might take it even

186
00:12:43.457 --> 00:12:47.796
more than 1,000 milliseconds before
it actually gets to run the code.

187
00:12:47.796 --> 00:12:52.207
So in terms of how much time we allow,
there's not a fixed answer.

188
00:12:52.207 --> 00:12:57.311
For example, if I am calling up a server
on the other side of the planet,

189
00:12:57.311 --> 00:13:02.330
how much time that's gonna take for
my browser to send a message across

190
00:13:02.330 --> 00:13:07.860
the interwebs to somewhere thousands and
thousands and thousands of miles or

191
00:13:07.860 --> 00:13:13.759
kilometers away, and then get an answer
back, that can depend on a lot of things.

192
00:13:13.759 --> 00:13:18.660
It can depend on what the person
who built that website that I'm

193
00:13:18.660 --> 00:13:23.294
talking to did on their end,
how fast it is, how slow it is.

194
00:13:23.294 --> 00:13:27.536
Could depend on whether
a shark has not chewed through

195
00:13:27.536 --> 00:13:30.841
a trans-oceanic data cable somewhere.

196
00:13:30.841 --> 00:13:32.846
It can depend on a lot of things.

197
00:13:32.846 --> 00:13:35.001
So there's not really a hard and
fast answer.

