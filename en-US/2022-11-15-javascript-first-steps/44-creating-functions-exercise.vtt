WEBVTT

1
00:00:00.025 --> 00:00:00.559
[LAUGH] So

2
00:00:00.559 --> 00:00:05.532
what we're gonna do now is just to stretch
our function muscles a little bit.

3
00:00:05.532 --> 00:00:09.034
Before we go back to our HTML file,
we're just gonna stay in the console cuz

4
00:00:09.034 --> 00:00:12.443
the console is still a nice place to
just test out things really quickly.

5
00:00:12.443 --> 00:00:17.484
So what we're gonna do is in the console
we're gonna declare three functions,

6
00:00:17.484 --> 00:00:21.640
multiply, yell, and
longerThan that do these various things.

7
00:00:21.640 --> 00:00:25.150
So multiply is gonna take in two numbers,
and return their product.

8
00:00:26.300 --> 00:00:30.255
Yell is gonna take in a lowercase
string or any string and

9
00:00:30.255 --> 00:00:32.620
log it in all caps to the console.

10
00:00:33.910 --> 00:00:38.141
And then longerThan is gonna
take in two arrays and

11
00:00:38.141 --> 00:00:43.088
return whether the first array
is longer than the second.

12
00:00:43.088 --> 00:00:46.581
Which is gonna require us to use
an operator that we saw earlier in

13
00:00:46.581 --> 00:00:47.301
the course.

14
00:00:49.147 --> 00:00:50.631
Cool?

15
00:00:50.631 --> 00:00:54.544
et's take a moment, give it a shot and
then we'll talk about the solutions

16
00:00:58.488 --> 00:01:03.145
Let us walk through our solutions to these
three functions we needed to implement,

17
00:01:03.145 --> 00:01:05.216
multiply, yell, and longerThan.

18
00:01:05.216 --> 00:01:06.920
So let's start with multiply.

19
00:01:06.920 --> 00:01:11.180
We're gonna take in 2 numbers,
we're gonna return their product.

20
00:01:11.180 --> 00:01:19.031
Who would like to walk me through how
they implemented this function, multiply?

21
00:01:19.031 --> 00:01:22.848
Two, do you wanna show me what you did?

22
00:01:22.848 --> 00:01:27.012
&gt;&gt; Function, multiply, parentheses, a ,b.

23
00:01:27.012 --> 00:01:28.614
&gt;&gt; Great.

24
00:01:28.614 --> 00:01:29.979
&gt;&gt; Curling.

25
00:01:29.979 --> 00:01:32.070
&gt;&gt; Right, outside the curly braces, yeah.

26
00:01:32.070 --> 00:01:35.974
&gt;&gt; Return a times b.

27
00:01:35.974 --> 00:01:40.032
&gt;&gt; Return a and then like star, right?

28
00:01:40.032 --> 00:01:42.125
b, semicolon.

29
00:01:42.125 --> 00:01:42.902
Great.

30
00:01:42.902 --> 00:01:50.245
So now, if I multiply,
I don't know, 2 and 3, I get 6.

31
00:01:50.245 --> 00:01:50.946
Great.

32
00:01:50.946 --> 00:01:54.963
Now we'll notice that when we
call multiply in the console,

33
00:01:54.963 --> 00:01:58.845
the browser is evaluating
this as an expression, right?

34
00:01:58.845 --> 00:02:02.485
So what happens when we call the function
with these two arguments and

35
00:02:02.485 --> 00:02:05.510
it's saying all the result of that,
return value is 6.

36
00:02:05.510 --> 00:02:06.189
Beautiful.

37
00:02:06.189 --> 00:02:10.103
Okay, how about yell?

38
00:02:10.103 --> 00:02:11.383
Paul, you wanna walk me through yell?

39
00:02:11.383 --> 00:02:13.730
Given a lowercase string
login in all caps?

40
00:02:15.000 --> 00:02:17.430
&gt;&gt; I started with const.

41
00:02:17.430 --> 00:02:17.930
&gt;&gt; Okay.

42
00:02:19.120 --> 00:02:21.970
&gt;&gt; Const yell equals function.

43
00:02:21.970 --> 00:02:22.593
&gt;&gt; Interesting.
So

44
00:02:22.593 --> 00:02:28.310
we're seeing a new way to declare
a function which is by assigning it.

45
00:02:28.310 --> 00:02:31.740
It's a function expression essentially
assigned to a variable, great.

46
00:02:31.740 --> 00:02:32.617
Okay, please continue.

47
00:02:32.617 --> 00:02:36.240
&gt;&gt; And
then in parentheses I just did saying-

48
00:02:36.240 --> 00:02:37.870
&gt;&gt; Saying, sure.

49
00:02:37.870 --> 00:02:40.888
&gt;&gt; And then in the curly braces,

50
00:02:40.888 --> 00:02:45.618
return saying.touppercase, and then the-

51
00:02:45.618 --> 00:02:51.860
&gt;&gt; Touppercase and then parens semicolon.

52
00:02:51.860 --> 00:02:52.750
Great.

53
00:02:52.750 --> 00:02:58.926
Okay, so now what we have is yell points
to a function, which in this case,

54
00:02:58.926 --> 00:03:04.025
and when we declared our function here,
it looks very similar

55
00:03:04.025 --> 00:03:09.125
to the way we've been declaring
functions so far, except for

56
00:03:09.125 --> 00:03:16.080
there is no name multiply here in
between the function and the parameters.

57
00:03:16.080 --> 00:03:20.099
So this is what we call an anonymous
function or an unnamed function

58
00:03:20.099 --> 00:03:25.583
expression, and these are two options that
are essentially equivalent for JavaScript.

59
00:03:25.583 --> 00:03:26.090
Great.

60
00:03:26.090 --> 00:03:31.862
So now if I yell, hello,
it logs out HELLO.

61
00:03:31.862 --> 00:03:34.130
Great, excellent.

62
00:03:34.130 --> 00:03:36.480
Okay, how about longerThan?

63
00:03:36.480 --> 00:03:40.030
Who would like to walk me through
their implementation for longerThan?

64
00:03:40.030 --> 00:03:44.699
So in this one little different,
we're gonna take in two arrays, and

65
00:03:44.699 --> 00:03:49.946
we're gonna return true or false whether
the first is longer than the second.

66
00:03:51.328 --> 00:03:53.535
Jason, did you wanna walk me through?

67
00:03:53.535 --> 00:03:54.908
&gt;&gt; Sure.
&gt;&gt; Your solution, [INAUDIBLE]

68
00:03:54.908 --> 00:03:56.002
&gt;&gt; I didn't type it out but

69
00:03:56.002 --> 00:04:00.962
I think I can just, [CROSSTALK]
&gt;&gt; So function longerThan,

70
00:04:00.962 --> 00:04:05.682
and then as our input parameters,

71
00:04:05.682 --> 00:04:09.273
we'll have, a1, a2.

72
00:04:09.273 --> 00:04:10.094
&gt;&gt; Sure.

73
00:04:10.094 --> 00:04:12.210
We get to name them as we say fit.

74
00:04:12.210 --> 00:04:13.460
So you could say array 1 or a 2.

75
00:04:13.460 --> 00:04:15.713
You could say left, right.

76
00:04:15.713 --> 00:04:20.160
You could say potato, [INAUDIBLE]
I don't know, whatever you want.

77
00:04:20.160 --> 00:04:21.430
Yeah, [LAUGH] great.

78
00:04:22.720 --> 00:04:25.800
&gt;&gt; And then we would have an if condition.

79
00:04:27.130 --> 00:04:28.193
&gt;&gt; Okay.

80
00:04:28.193 --> 00:04:29.170
&gt;&gt; Maybe there's a simpler way,
[CROSSTALK]

81
00:04:29.170 --> 00:04:30.657
&gt;&gt; We're getting advanced,

82
00:04:30.657 --> 00:04:34.544
we can totally do it with an f, but-
&gt;&gt; I don't know the exact syntax, but

83
00:04:34.544 --> 00:04:37.181
it may be that there's a better way or
a different way that you-

84
00:04:37.181 --> 00:04:38.830
&gt;&gt; There's multiple ways to do things.

85
00:04:38.830 --> 00:04:42.328
I would say if a1 length.

86
00:04:46.693 --> 00:04:49.553
Again, I don't know if
the syntax is right.

87
00:04:49.553 --> 00:04:53.920
But is greater than a2.length.

88
00:04:53.920 --> 00:04:59.688
&gt;&gt; What are we supposed to
return which is greater than,

89
00:04:59.688 --> 00:05:01.651
so we would say-
&gt;&gt; So

90
00:05:01.651 --> 00:05:05.320
we wanna return true if
a1 is longer than a2.

91
00:05:05.320 --> 00:05:06.119
&gt;&gt; Okay, then return true.
&gt;&gt; And

92
00:05:06.119 --> 00:05:10.803
we wanna return false if
a1 is not longer than a2.

93
00:05:10.803 --> 00:05:13.688
So return-
&gt;&gt; True.

94
00:05:13.688 --> 00:05:15.390
&gt;&gt; True.

95
00:05:15.390 --> 00:05:18.127
This is a sneak preview of some
stuff we're gonna see later.

96
00:05:20.466 --> 00:05:22.608
Okay, so this already-
&gt;&gt; So

97
00:05:22.608 --> 00:05:25.703
we're just gonna assume that one
is gonna be larger than the other?

98
00:05:25.703 --> 00:05:30.351
&gt;&gt; We're basically just going to
return true if a1 is longer than a2.

99
00:05:30.351 --> 00:05:32.960
&gt;&gt; Okay, else false.

100
00:05:32.960 --> 00:05:34.830
&gt;&gt; Okay, so then we can have-
&gt;&gt; Else will return false.

101
00:05:34.830 --> 00:05:39.120
&gt;&gt; An else, Return false.

102
00:05:39.120 --> 00:05:41.039
Now we're gonna talk about
if statements later.

103
00:05:43.070 --> 00:05:45.928
So now basically what I'd expect,

104
00:05:45.928 --> 00:05:50.976
this is now a function where
if I give it 1,2,3 and 1,2,

105
00:05:50.976 --> 00:05:55.730
two different arrays,
it should say true and vice versa.

106
00:05:55.730 --> 00:06:01.389
If I give it 1,2, and 1,2, they're
the same, it should be false or 1,2,3.

107
00:06:01.389 --> 00:06:03.020
The first one's shorter,
so it should be false.

108
00:06:03.020 --> 00:06:04.770
So this is totally valid.

109
00:06:04.770 --> 00:06:05.630
Totally valid, but

110
00:06:05.630 --> 00:06:08.623
it's using this if statement that
we haven't even talked about yet.

111
00:06:08.623 --> 00:06:11.549
We're gonna talk about in a little bit.

112
00:06:11.549 --> 00:06:14.330
There is another way
that we could do this.

113
00:06:14.330 --> 00:06:20.350
And that is basically related
to the value of this expression.

114
00:06:20.350 --> 00:06:25.695
So the greater than operator itself,

115
00:06:25.695 --> 00:06:29.035
if we have 1, 2, 3,

116
00:06:29.035 --> 00:06:34.900
length is greater than 1, 2 .length.

117
00:06:34.900 --> 00:06:41.255
The operator itself, is gonna return true,
or it's gonna evaluate to true.

118
00:06:41.255 --> 00:06:46.250
This expression is going to evaluate to
true, if that relationship holds, right?

119
00:06:46.250 --> 00:06:50.450
If the first thing is longer
are bigger than the second thing.

120
00:06:50.450 --> 00:06:55.104
So we could also as another way to do
this, we could have another function and

121
00:06:55.104 --> 00:06:59.630
maybe somebody else found a solution like,
I'll call it longer than 2.

122
00:07:00.780 --> 00:07:02.410
We can keep the parameter names the same.

123
00:07:04.230 --> 00:07:08.786
Did anybody have a different solution that
involves that greater than operator but

124
00:07:08.786 --> 00:07:10.030
not the if statement?

125
00:07:11.510 --> 00:07:15.885
&gt;&gt; a1.length greater than a2.length,

126
00:07:15.885 --> 00:07:20.058
I mean-
&gt;&gt; Okay a1.length greater than a2.length,

127
00:07:20.058 --> 00:07:20.882
like this?

128
00:07:20.882 --> 00:07:22.608
Well, return, right?

129
00:07:22.608 --> 00:07:24.845
&gt;&gt; Yeah return, yeah,
we can't forget our return.

130
00:07:24.845 --> 00:07:28.801
Right, so we can actually
just return the value of this

131
00:07:28.801 --> 00:07:32.155
expression because that
is basically gonna be

132
00:07:32.155 --> 00:07:37.060
the same as the true false kind of
choices that we've made before.

133
00:07:37.060 --> 00:07:40.999
Later when talk about if statements and
conditionals,

134
00:07:40.999 --> 00:07:46.887
we'll look at what we just did there, so
we can also have a longer than 2 function.

135
00:07:46.887 --> 00:07:49.940
What's happening?

136
00:07:49.940 --> 00:07:55.155
Let me go back up to my
call here longerThan2,

137
00:07:55.155 --> 00:07:59.716
should also return kind of as we expect,

138
00:08:04.061 --> 00:08:07.777
True, if the first thing is
longer than the second thing.

139
00:08:07.777 --> 00:08:08.277
Great.

140
00:08:09.810 --> 00:08:11.084
Okay, any questions so far?

141
00:08:14.009 --> 00:08:14.510
Okay.

142
00:08:16.130 --> 00:08:17.797
Now there is another
way that we can return.

143
00:08:17.797 --> 00:08:20.825
So far we've seen two ways
we can declare functions.

144
00:08:20.825 --> 00:08:25.121
We saw that we can do the function keyword
and then the name of the function and

145
00:08:25.121 --> 00:08:26.630
then the parameters.

146
00:08:26.630 --> 00:08:30.170
Or we saw that example where we had,

147
00:08:30.170 --> 00:08:34.360
const equals, let me see if I can find it.

148
00:08:34.360 --> 00:08:37.351
Const yell equals and then the function,

149
00:08:37.351 --> 00:08:40.948
expression that creates
an anonymous function.

