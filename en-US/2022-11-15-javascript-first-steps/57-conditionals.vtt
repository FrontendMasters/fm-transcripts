WEBVTT

1
00:00:00.060 --> 00:00:04.997
So let us go on now and talk about another
thing we gonna need in order to make

2
00:00:04.997 --> 00:00:10.430
a page work, which we looked at very
briefly earlier, which are conditionals.

3
00:00:11.520 --> 00:00:15.810
Now the Spice Girls song Wanna be
has a turn of conditionals in it.

4
00:00:15.810 --> 00:00:22.440
For example, they sing, if you wanna be
my lover, you gotta get with my friends.

5
00:00:22.440 --> 00:00:24.616
There's sort of an implied then there.

6
00:00:24.616 --> 00:00:27.964
Sometimes we say, if you wanna be my
love then you gotta get with my friends.

7
00:00:27.964 --> 00:00:31.349
And we wanna be able to talk to JavaScript
the same way the Spice Girls talk to

8
00:00:31.349 --> 00:00:31.953
us, right?

9
00:00:31.953 --> 00:00:37.931
We wanna be able to tell JavaScript
what happens under a certain condition.

10
00:00:37.931 --> 00:00:43.729
So if statements are the way
that we can tell JavaScript

11
00:00:43.729 --> 00:00:48.398
to only run code under
a certain condition.

12
00:00:48.398 --> 00:00:53.274
So for example, maybe the spice
girls wrote this code because in

13
00:00:53.274 --> 00:00:57.258
this if statement we have
imagined some object you.

14
00:00:57.258 --> 00:01:02.760
And if you has a property called you
WannaBeMyLover that is value of true.

15
00:01:02.760 --> 00:01:06.605
If that is true, if whatever is in
these parentheses after the F is true,

16
00:01:06.605 --> 00:01:08.127
we call that the condition.

17
00:01:08.127 --> 00:01:12.703
If that condition is true,
then whatever is between the curly

18
00:01:12.703 --> 00:01:16.664
braces after that condition,
JavaScript will run.

19
00:01:16.664 --> 00:01:21.546
So in this case the Spice Girl says
if the property you.wannaBeMyLover on

20
00:01:21.546 --> 00:01:23.130
the object you is true.

21
00:01:23.130 --> 00:01:27.885
Then the property gotta get
with my friends on the object

22
00:01:27.885 --> 00:01:31.820
you is also going to be set to true.

23
00:01:31.820 --> 00:01:35.950
Okay, so this is how we would encode
Spice Girls WannaBe in JavaScript,

24
00:01:35.950 --> 00:01:38.263
if we wanted to, which, of course I do.

25
00:01:38.263 --> 00:01:43.065
[LAUGH] So the idea is that
the code inside those curly braces

26
00:01:43.065 --> 00:01:47.186
it's only gonna happen if
the condition is true.

27
00:01:47.186 --> 00:01:51.295
They didn't really specify what happens
if you don't wanna be my lover,

28
00:01:51.295 --> 00:01:55.468
but, [LAUGH] we know that the only time
that you got to get with my friends is if

29
00:01:55.468 --> 00:01:56.882
you do wanna be my lover.

30
00:01:56.882 --> 00:02:03.989
[LAUGH] So there is another option that
we have if we want to say one thing or

31
00:02:03.989 --> 00:02:09.091
the other should happen
depending on a condition.

32
00:02:09.091 --> 00:02:12.510
We have an extra keyword we
can add in there called else.

33
00:02:12.510 --> 00:02:18.852
So we can combine if block with else
block, blocks are just the word for

34
00:02:18.852 --> 00:02:25.745
those chunks of code in the curly braces,
we talked briefly about earlier.

35
00:02:25.745 --> 00:02:29.472
So in this case,
does anybody know the line of the.

36
00:02:29.472 --> 00:02:32.187
[LAUGH] Spice Girls song WannaBe
that this is referring to?

37
00:02:32.187 --> 00:02:37.700
[LAUGH] So if you really bug me,
then I'll say goodbye.

38
00:02:39.240 --> 00:02:42.248
If you don't really bug me,
they didn't really specify what happens,

39
00:02:42.248 --> 00:02:44.040
but we could imagine that I'll say hello.

40
00:02:45.570 --> 00:02:51.131
And want to keep dating you I don't know,
[LAUGH] so this is how we can do one thing

41
00:02:51.131 --> 00:02:56.800
if the condition is true and a different
thing if the condition is false, okay?

42
00:02:56.800 --> 00:03:01.156
It is going to allow us to make
decisions in our code, basically.

43
00:03:01.156 --> 00:03:05.604
And sort of split, put a fork in the road
in front of JavaScript and say, hey,

44
00:03:05.604 --> 00:03:09.900
JavaScript, take a moment,
figure out if this condition is true.

45
00:03:09.900 --> 00:03:12.962
If it is go that way,
if it's not go this other way.

46
00:03:12.962 --> 00:03:19.399
So if the condition is true and
else is if it's false, cool?

47
00:03:19.399 --> 00:03:25.493
Okay, so let's take a look at this
one slightly less Poppi example.

48
00:03:25.493 --> 00:03:30.381
[LAUGH] What do you think is
gonna happen when this code runs?

49
00:03:30.381 --> 00:03:35.008
So if five is greater than four
console log greater than else

50
00:03:35.008 --> 00:03:36.869
console log less than.

51
00:03:39.460 --> 00:03:44.306
I'm hearing greater than that's because
we know numbers, we know how to count,

52
00:03:44.306 --> 00:03:48.185
thanks to Sesame Street,
that five should be greater than four.

53
00:03:48.185 --> 00:03:53.235
So let's prove it to ourselves,
let's go to our console and

54
00:03:53.235 --> 00:03:57.702
just run this and make sure yes,
we get greater than.

55
00:03:57.702 --> 00:04:00.668
And if I were to, let's say,

56
00:04:00.668 --> 00:04:06.143
change this to a less than,
we would expect less than.

57
00:04:06.143 --> 00:04:11.266
So this is the idea,
that we have the value of

58
00:04:11.266 --> 00:04:18.332
this expression in the parenthesis
evaluated to a boolean.

59
00:04:18.332 --> 00:04:21.355
And depending on whether that boolean
is true or false, whether the value of

60
00:04:21.355 --> 00:04:24.583
the expression in the parenthesis,
the condition expression is true or false.

61
00:04:24.583 --> 00:04:29.345
So we're gonna decide which of the if
block or the else block to do,

62
00:04:29.345 --> 00:04:30.460
cool, great.

63
00:04:33.200 --> 00:04:39.370
Now if we wanna get real fancy,
we can even chain most multiple else's and

64
00:04:39.370 --> 00:04:45.853
IFS together to have like multiple
different conditions that might happen.

65
00:04:45.853 --> 00:04:46.610
So for example,

66
00:04:46.610 --> 00:04:49.975
here I have a little function that I'm
declaring just to wrap this all up.

67
00:04:51.155 --> 00:04:55.558
This is called compare, and
it's taking in two things x and y,

68
00:04:55.558 --> 00:04:57.809
we could assume their numbers.

69
00:05:00.030 --> 00:05:07.073
And it is saying if x is greater than y,
then log out a message to that effect.

70
00:05:07.073 --> 00:05:12.160
Else, so if x is not greater than y,
then there are two possibilities, right?

71
00:05:13.440 --> 00:05:17.380
Either x is less than y or
x is equal to y.

72
00:05:19.110 --> 00:05:22.182
So what we've got is another if here we

73
00:05:22.182 --> 00:05:25.735
have an else if we can
chain them in this way.

74
00:05:25.735 --> 00:05:29.942
So that essentially if this is false,

75
00:05:29.942 --> 00:05:35.468
then this whole if else,
we're gonna jump into.

76
00:05:35.468 --> 00:05:41.470
And so now we're gonna have to look at
another condition see if that's true.

77
00:05:41.470 --> 00:05:43.238
If so then we're gonna do that and

78
00:05:43.238 --> 00:05:47.037
if that's not true either then we're
gonna fall into this final else.

79
00:05:49.579 --> 00:05:51.155
Make sense?

80
00:05:51.155 --> 00:05:56.531
Cool, and we could prove it to
ourselves if I go back to my console,

81
00:05:56.531 --> 00:05:59.360
declare this function.

82
00:05:59.360 --> 00:06:03.824
So now if I compare, yeah, three and two,

83
00:06:03.824 --> 00:06:07.428
what do you think is gonna happen?

84
00:06:11.049 --> 00:06:13.380
&gt;&gt; X is greater.

85
00:06:13.380 --> 00:06:16.652
&gt;&gt; We're gonna see that
is greater than message.

86
00:06:16.652 --> 00:06:19.389
Yes, three is greater than two,
great, okay?

87
00:06:19.389 --> 00:06:23.171
And if I put in two and
two, we should expect-

88
00:06:23.171 --> 00:06:24.881
&gt;&gt; Equal.

89
00:06:24.881 --> 00:06:29.350
&gt;&gt; Equal to because neither of those
two conditions that we had in here,

90
00:06:29.350 --> 00:06:30.976
neither of them is true.

91
00:06:30.976 --> 00:06:34.482
X greater than y, not true,
they're both two.

92
00:06:34.482 --> 00:06:35.761
Two is not greater than two.

93
00:06:35.761 --> 00:06:40.410
Also not sure that two is less than two,
so that means we fall into the third.

94
00:06:40.410 --> 00:06:42.550
How did it put a space between x and y?

95
00:06:42.550 --> 00:06:45.880
Great question, this is a fun
little trick in console logging.

96
00:06:45.880 --> 00:06:49.950
Any guesses what's doing the spacing
here in my console log statement?

97
00:06:49.950 --> 00:06:50.788
So let's take a look.

98
00:06:50.788 --> 00:06:58.554
So for example here, it logged three space
the string is greater than, and then two.

99
00:06:58.554 --> 00:07:01.380
And we can see because the three and
two are different that it's logging

100
00:07:01.380 --> 00:07:04.364
the numbers themselves I didn't like
turn them into strings or anything.

101
00:07:04.364 --> 00:07:10.755
Any guess what in this console log
statement here is doing that spacing?

102
00:07:10.755 --> 00:07:11.910
&gt;&gt; It's gotta be the comma.

103
00:07:11.910 --> 00:07:14.853
&gt;&gt; Commas, yeah, so
if I put commas in console log,

104
00:07:14.853 --> 00:07:19.828
this is another, a nice little feature of
the fact that JavaScript doesn't care how

105
00:07:19.828 --> 00:07:21.807
many arguments you give things.

106
00:07:21.807 --> 00:07:24.843
Is that I can just keep adding
commas to pass in more and

107
00:07:24.843 --> 00:07:27.285
more arguments to console log and it will.

108
00:07:27.285 --> 00:07:31.564
I logged them all out on
the same line with spaces, so

109
00:07:31.564 --> 00:07:34.585
fun little trick they're good eye.

110
00:07:34.585 --> 00:07:38.526
&gt;&gt; Wouldn't work if you just did
console log x is greater than y without

111
00:07:38.526 --> 00:07:40.264
the commas or would it break?

112
00:07:40.264 --> 00:07:42.369
&gt;&gt; Let's find out.

113
00:07:42.369 --> 00:07:46.813
Console log, I'm gonna do just two

114
00:07:46.813 --> 00:07:51.850
string is greater than less has spaces in

115
00:07:51.850 --> 00:07:56.750
it is greater than one let's find out.

116
00:07:56.750 --> 00:07:58.008
Syntax error, no,

117
00:07:58.008 --> 00:08:02.900
it does not work, JavaScript says when
it sees that space, it gets confused.

118
00:08:02.900 --> 00:08:05.620
It says,
I don't know how to interpret that.

119
00:08:05.620 --> 00:08:10.885
So, yeah, we need the commas,
if we have multiple things.

120
00:08:10.885 --> 00:08:15.069
The other thing I could do is I
could put them all in a string,

121
00:08:15.069 --> 00:08:19.424
like concatenate them all together
into a single string, but

122
00:08:19.424 --> 00:08:22.791
why type more quotation
marks than I need to do?

123
00:08:22.791 --> 00:08:27.213
As a lazy coder,
I don't wanna do that self, calm as it is.

124
00:08:27.213 --> 00:08:30.551
All right, great point, okay, so

125
00:08:30.551 --> 00:08:35.904
we said that the condition
evaluates to a boolean value.

126
00:08:35.904 --> 00:08:40.635
So usually, we're gonna be passing
in some kind of expression that

127
00:08:40.635 --> 00:08:44.542
evaluates like using one of
our comparison operators.

128
00:08:44.542 --> 00:08:49.529
For example, we saw the lessons and
the greater than we also have our triple

129
00:08:49.529 --> 00:08:52.951
equals a strict equality operator,
for example.

130
00:08:52.951 --> 00:08:57.419
So if we have some variable forecast,
and the forecast is rain,

131
00:08:57.419 --> 00:09:02.079
then we'll say remind people to
bring an umbrella, for example.

132
00:09:02.079 --> 00:09:08.105
What happens if we pass
in some other value?

133
00:09:08.105 --> 00:09:13.101
Well, our good friend JavaScript with
its loosey goosey type Venus is going

134
00:09:13.101 --> 00:09:17.954
to try to read that value as a boolean,
it's going to convert that value.

135
00:09:17.954 --> 00:09:22.214
Or we could say,
cast that value to a boolean and

136
00:09:22.214 --> 00:09:26.790
this brings up the notion of truthiness.

137
00:09:26.790 --> 00:09:30.962
So when a value gets turned into
a boolean, if it becomes true,

138
00:09:30.962 --> 00:09:35.710
we say that, that value is not the same
thing as the boolean value true.

139
00:09:35.710 --> 00:09:40.018
It's a different type of thing, but it
functions like the boolean value true, so

140
00:09:40.018 --> 00:09:41.150
we say it's truthy.

141
00:09:43.210 --> 00:09:46.610
Or if it functions like false,
we say it's falsey.

142
00:09:46.610 --> 00:09:50.728
So truthiness is something that
JavaScript is gonna try to determine

143
00:09:50.728 --> 00:09:54.067
the truthiness of any kind of
value that I pass in there.

144
00:09:54.067 --> 00:09:58.570
Or if I pass in an expression that
evaluates to a value other than a boolean,

145
00:09:58.570 --> 00:10:00.572
like a string or something else,

146
00:10:00.572 --> 00:10:05.018
then JavaScript is gonna say all right
is that value truthy or is it falsy?

147
00:10:05.018 --> 00:10:10.826
And then it's going to make a decision
accordingly, so for example, strings

148
00:10:10.826 --> 00:10:17.347
if they're non-empty if they have some
characters inside of them, they're truthy.

149
00:10:17.347 --> 00:10:22.747
So JavaScript will run that
console log line because I

150
00:10:22.747 --> 00:10:28.389
passed in a truthy value,
we can prove it to ourselves.

151
00:10:28.389 --> 00:10:31.973
This line will run, it sure did,

152
00:10:31.973 --> 00:10:36.464
so what do you think is gonna happen here?

153
00:10:36.464 --> 00:10:40.944
If I pass in the number zero,
do you think we'll hear zero is truthy or

154
00:10:40.944 --> 00:10:41.961
zero is falsy?

155
00:10:41.961 --> 00:10:43.093
&gt;&gt; Falsy.

156
00:10:43.093 --> 00:10:48.342
&gt;&gt; Falsy, let's double check.

157
00:10:48.342 --> 00:10:50.165
Zero is indeed falsy.

158
00:10:50.165 --> 00:10:54.365
So yeah, this is maybe
the truthiness is maybe the built in

159
00:10:54.365 --> 00:10:57.805
coalescing that we were
asking about earlier.

160
00:10:57.805 --> 00:11:00.337
&gt;&gt; Something exists,
we'll treat it as whatever.

161
00:11:00.337 --> 00:11:01.838
&gt;&gt; And it sort of depends.

162
00:11:01.838 --> 00:11:06.095
So it depends where in our program
this value this string or number or

163
00:11:06.095 --> 00:11:07.674
whatever it is shows up.

164
00:11:07.674 --> 00:11:13.107
But when it's in the place of a condition
in a conditional in an if statement,

165
00:11:13.107 --> 00:11:16.570
JavaScript is gonna look for truthiness.

166
00:11:16.570 --> 00:11:20.690
If we were using it elsewhere,
like in a arithmetic operation,

167
00:11:20.690 --> 00:11:24.369
JavaScript doesn't really
care about its truthiness.

168
00:11:24.369 --> 00:11:27.061
It's gonna look at its numbness.

169
00:11:27.061 --> 00:11:30.760
So it depends kind of where
this value shows up whether or

170
00:11:30.760 --> 00:11:34.709
not JavaScript is trying to
make it a boolean, make sense?

171
00:11:36.390 --> 00:11:41.382
Okay, so be careful because sometimes you
can be passing in what you thought was

172
00:11:41.382 --> 00:11:42.659
gonna be a boolean.

173
00:11:42.659 --> 00:11:44.917
And maybe you thought it was going
to be false or something, but

174
00:11:44.917 --> 00:11:47.143
it turns out it's actually a string and
so then it's truthy.

175
00:11:47.143 --> 00:11:51.240
And so this can be a gotcha sometimes
that trips us up as coders.

