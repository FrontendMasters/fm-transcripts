WEBVTT

1
00:00:00.000 --> 00:00:06.699
Let's move on and talk about another
thingy in the JavaScript universe,

2
00:00:06.699 --> 00:00:10.266
expressions, because like Madonna,

3
00:00:10.266 --> 00:00:14.384
we want to express
ourselves in JavaScript.

4
00:00:14.384 --> 00:00:20.394
Okay, so expressions, so far,
using our operators, we've seen things,

5
00:00:20.394 --> 00:00:25.111
we've seen snippets of JavaScript
code like this, right,

6
00:00:25.111 --> 00:00:30.577
like 4 / 2 * 10 or
"Frontend" + "Masters", or etc., etc.

7
00:00:30.577 --> 00:00:38.729
Or is 5 greater than 4 not strictly
equal to 3 greater than 4?

8
00:00:38.729 --> 00:00:40.767
Are these things values?

9
00:00:40.767 --> 00:00:42.326
What do y'all think?

10
00:00:42.326 --> 00:00:46.119
These snippets of JavaScript,
are they values?

11
00:00:46.119 --> 00:00:48.063
I'm seeing some nods.

12
00:00:48.063 --> 00:00:50.680
I'm seeing some skeptical faces.

13
00:00:50.680 --> 00:00:52.994
I can't read faces from the chat.

14
00:00:52.994 --> 00:00:59.495
But I'm seeing some quizzical looks,
some chin rubs.

15
00:00:59.495 --> 00:01:05.660
Hmm, it's kind of a trick question,
cuz, again, I'm just tricksy.

16
00:01:05.660 --> 00:01:07.578
But are these values?

17
00:01:07.578 --> 00:01:10.708
Well, sort of.

18
00:01:10.708 --> 00:01:14.829
These are expressions, so
all of those things, all of these little

19
00:01:14.829 --> 00:01:19.111
snippets of JavaScript using values and
operators are expressions.

20
00:01:19.111 --> 00:01:22.753
And we wouldn't say that
an expression is a value so

21
00:01:22.753 --> 00:01:26.903
much as we would say an expression
evaluates to a value, or

22
00:01:26.903 --> 00:01:31.578
another word you might hear is
an expression resolves to a value.

23
00:01:31.578 --> 00:01:35.297
Or we could say an expression
expresses a certain value,

24
00:01:35.297 --> 00:01:37.630
which is where the name comes from.

25
00:01:37.630 --> 00:01:40.784
That it's a way of essentially
at the end of the day,

26
00:01:40.784 --> 00:01:45.303
you are talking about a particular number,
a particular truth value, for

27
00:01:45.303 --> 00:01:47.761
example, a particular Boolean value.

28
00:01:47.761 --> 00:01:52.918
But the expression has more kind of
content to it, more information.

29
00:01:52.918 --> 00:01:55.938
And we have expressions in
natural language too, right?

30
00:01:55.938 --> 00:02:01.006
Like the amazing awesome twins movie
[LAUGH] New York Minute, the expression,

31
00:02:01.006 --> 00:02:06.096
a New York minute, in English,
in American English, at least, let's say.

32
00:02:06.096 --> 00:02:07.449
Have folks heard it,

33
00:02:07.449 --> 00:02:12.118
have folks heard the expression like,
be there in a New York minute?

34
00:02:12.118 --> 00:02:12.782
Not a little bit?

35
00:02:12.782 --> 00:02:17.999
Yes, okay, so Jason,
what is a New York minute?

36
00:02:17.999 --> 00:02:22.680
&gt;&gt; My understanding of it is it's
a very quick minute, very fast.

37
00:02:22.680 --> 00:02:23.957
&gt;&gt; Very fast, exactly.

38
00:02:23.957 --> 00:02:28.017
So we say because things in New York City
moves so fast and everybody walks so

39
00:02:28.017 --> 00:02:30.025
fast and things happen all the time.

40
00:02:30.025 --> 00:02:35.912
[LAUGH] Because things are happening so
quickly, this expression in English,

41
00:02:35.912 --> 00:02:40.103
in American English,
a New York minute means a second,

42
00:02:40.103 --> 00:02:43.686
or an instant, or
some very short unit of time.

43
00:02:43.686 --> 00:02:45.952
So this-three word expression,

44
00:02:45.952 --> 00:02:49.623
New York minute,
really means the value of an instant,

45
00:02:49.623 --> 00:02:54.249
like I'll be there in an instant,
I'll be there in a New York minute.

46
00:02:54.249 --> 00:02:56.895
So we have expressions
in natural language too.

47
00:02:56.895 --> 00:02:59.892
And similarly, JavaScript expressions,

48
00:02:59.892 --> 00:03:04.760
they equate to a particular value,
but there's kind of more going on.

49
00:03:04.760 --> 00:03:09.596
So when we're, for example, multiplying
and dividing and things like that,

50
00:03:09.596 --> 00:03:13.728
that is a longer expression which
evaluates to a particular value.

51
00:03:13.728 --> 00:03:18.551
And again, expressions are all
covered in detail on MDN,

52
00:03:18.551 --> 00:03:23.580
there's a whole guide to
learning more about expressions.

53
00:03:23.580 --> 00:03:29.603
But suffice it to say that these
things that we've been working with,

54
00:03:29.603 --> 00:03:34.607
these chunks of JavaScript
are what we call expressions,

55
00:03:34.607 --> 00:03:39.529
and they can go in places where
a value would be expected.

56
00:03:39.529 --> 00:03:48.209
So for example, we can pass them
in to maybe one of our spelf,

57
00:03:48.209 --> 00:03:52.477
like index of, for example.

58
00:03:52.477 --> 00:03:58.007
Or when we're asking,
does a string include the string

59
00:03:58.007 --> 00:04:03.420
Frontend Masters,
instead of an individual string,

60
00:04:03.420 --> 00:04:08.845
we can pass in a expression
that evaluates to a string.

61
00:04:08.845 --> 00:04:16.115
So for example, I could say,
FrontendMasters is a string.

62
00:04:16.115 --> 00:04:24.157
If I ask it does it
include "Front" + "end"?

63
00:04:24.157 --> 00:04:28.657
And it's going to say true, because what

64
00:04:28.657 --> 00:04:33.542
JavaScript sort of sees
in here is the value of

65
00:04:33.542 --> 00:04:38.556
this "Front" + "end" thing expression,

66
00:04:38.556 --> 00:04:43.075
I can now say, instead of thing or stuff.

67
00:04:43.075 --> 00:04:49.056
This expression evaluates to the value
Frontend, which then JavaScript

68
00:04:49.056 --> 00:04:55.331
can answer whether the string Frontend
Masters includes that string value.

69
00:04:55.331 --> 00:05:00.405
So this is all to say expressions are,
they function in the JavaScript

70
00:05:00.405 --> 00:05:05.919
universe as values, and we can use them
in places where we would use a value.

