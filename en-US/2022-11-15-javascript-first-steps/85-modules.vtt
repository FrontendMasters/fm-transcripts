WEBVTT

1
00:00:00.000 --> 00:00:05.718
Hi everybody we are back with a bonus
round of some JavaScript first steps or

2
00:00:05.718 --> 00:00:08.715
perhaps these are even indications for

3
00:00:08.715 --> 00:00:13.558
the next steps that we wanna take
into our JavaScript journey.

4
00:00:13.558 --> 00:00:17.837
So, so far in the course we have
built few different projects,

5
00:00:17.837 --> 00:00:20.504
we've been working with JavaScript,

6
00:00:20.504 --> 00:00:26.410
we've been looking at all of its different
ways of interacting with the webpage.

7
00:00:26.410 --> 00:00:29.386
We've been talking about
different types of syntax and

8
00:00:29.386 --> 00:00:33.690
different types of values and
how different parts of the language work.

9
00:00:33.690 --> 00:00:38.493
But of course as you go out and,
venture into the wilderness of the web,

10
00:00:38.493 --> 00:00:43.138
we will be running into some other
considerations around JavaScript

11
00:00:43.138 --> 00:00:47.540
that we haven't really had too
much time to talk about yet.

12
00:00:47.540 --> 00:00:52.057
So that's what I'd like to do now with
you all is talk about some things

13
00:00:52.057 --> 00:00:56.346
we're gonna run into when we
encounter JavaScript in the wild, or

14
00:00:56.346 --> 00:00:58.660
as Morpheus says in the real world.

15
00:00:59.910 --> 00:01:04.818
So there is, of course, a ton more we
could say about JavaScript than we have

16
00:01:04.818 --> 00:01:06.899
been able to say in this course.

17
00:01:06.899 --> 00:01:11.535
And for that you have so many other
awesome courses on FrontEnd Masters and

18
00:01:11.535 --> 00:01:16.319
all of the documentation on MDN and the
whole rest of the web community to help

19
00:01:16.319 --> 00:01:20.918
you get your feet wet with all kinds of,
other things about JavaScript.

20
00:01:20.918 --> 00:01:25.435
But there were a few concepts that I did
wanna just mention so that we can talk

21
00:01:25.435 --> 00:01:30.240
about a little bit here today, and that's
because they are gonna be relevant to

22
00:01:30.240 --> 00:01:34.495
how you're gonna be using JavaScript
in real life as a web developer.

23
00:01:34.495 --> 00:01:39.015
One cause have we discovered a little
bit of a hint act earlier when we're

24
00:01:39.015 --> 00:01:43.030
working on our doggo fetch project,
is the concept of modules.

25
00:01:43.030 --> 00:01:45.286
So let's take a minute and talk about it.

26
00:01:45.286 --> 00:01:49.485
So modules are a relatively
new development in

27
00:01:49.485 --> 00:01:53.792
JavaScript that essentially
let us take a big,

28
00:01:53.792 --> 00:01:58.863
big long program and
split it up across multiple files.

29
00:01:58.863 --> 00:02:03.485
So we have maybe started to
get to the point in our doggo

30
00:02:03.485 --> 00:02:08.020
fetch project where we have
a lot of things going on.

31
00:02:08.020 --> 00:02:09.878
We have a lot of different functionality,

32
00:02:09.878 --> 00:02:12.370
the code file is starting
to get pretty long.

33
00:02:12.370 --> 00:02:16.374
And the more and more complex your
JavaScript projects become and

34
00:02:16.374 --> 00:02:21.104
as we said JavaScript started out being
a language intended to just write a few

35
00:02:21.104 --> 00:02:26.810
lines of scripting code to add a little
bit of interactivity to a simple web page.

36
00:02:26.810 --> 00:02:33.192
And now, decades later, we have hugely
complex JavaScript project being

37
00:02:33.192 --> 00:02:39.080
written with huge teams split up
into different places in the world.

38
00:02:39.080 --> 00:02:42.216
And we all have to kind of work together
on these really massive JavaScript

39
00:02:42.216 --> 00:02:42.920
projects.

40
00:02:42.920 --> 00:02:48.605
So modules lets us take a big, big,
big JavaScript codebase like that and

41
00:02:48.605 --> 00:02:54.951
split it up into multiple files so that it
becomes a little bit easier to work with.

42
00:02:54.951 --> 00:03:00.330
So there are some differences
between module style JavaScript and

43
00:03:00.330 --> 00:03:06.094
the regular JavaScript that we had
sort of been looking at initially and

44
00:03:06.094 --> 00:03:08.989
one of those differences is await.

45
00:03:08.989 --> 00:03:13.714
So do you remember how when we tried to
run await at one point earlier, we ran

46
00:03:13.714 --> 00:03:18.889
into an error message that JavaScript
said wait, wait, wait, wait, wait, you

47
00:03:18.889 --> 00:03:25.000
can't just run await in any function, you
have to run await in an async function.

48
00:03:25.000 --> 00:03:30.079
So similarly to that,
JavaScript also complains if we try to use

49
00:03:30.079 --> 00:03:34.988
await outside of a function,
that's usually not possible.

50
00:03:34.988 --> 00:03:40.055
And so in our doggo quiz, we actually

51
00:03:40.055 --> 00:03:46.760
have an await here that
is outside of a function.

52
00:03:47.800 --> 00:03:51.609
It is just hanging out
outside of any function,

53
00:03:51.609 --> 00:03:57.050
it is what's called at the top level
of this program in this script.

54
00:03:58.440 --> 00:04:02.670
And usually,
this would be a problem for JavaScript.

55
00:04:04.250 --> 00:04:08.537
So, if we take a closer look
at our .doggo fetch file,

56
00:04:08.537 --> 00:04:13.573
we actually find that in our script tag,
we're not just working

57
00:04:13.573 --> 00:04:19.263
with a regular script tag or
&lt;script type="text/javascript"&gt;,

58
00:04:19.263 --> 00:04:22.824
we have &lt;script type=''module''&gt;.

59
00:04:22.824 --> 00:04:24.231
If we check this out here.

60
00:04:25.930 --> 00:04:30.830
We scroll up, we can double check for
ourselves in our code, there it is.

61
00:04:30.830 --> 00:04:36.807
So in our script tag, we had this special
designation that this is a module script.

62
00:04:36.807 --> 00:04:38.497
Now if we didn't have that.

63
00:04:40.448 --> 00:04:44.363
Usually, we would have just
kind of a script tag or

64
00:04:44.363 --> 00:04:50.998
maybe you've seen also script equals, and
then the string text slash JavaScript.

65
00:04:50.998 --> 00:04:56.610
So, if we try that,
if we take out our module designation,

66
00:04:56.610 --> 00:05:00.764
and we go back to our
local JavaScript file,

67
00:05:00.764 --> 00:05:07.310
we see this syntax error,
await is only valid in async functions.

68
00:05:07.310 --> 00:05:12.150
We ran into that earlier,
async generators and modules.

69
00:05:12.150 --> 00:05:18.746
So unless I designate and tell JavaScript
with that type equals module here,

70
00:05:18.746 --> 00:05:25.070
that this is not just a regular Java
script, but a JavaScript module.

71
00:05:25.070 --> 00:05:26.408
Unless I do that,

72
00:05:26.408 --> 00:05:32.550
JavaScript is not going to allow me
to await my loadQuizData function.

73
00:05:32.550 --> 00:05:37.422
So if I put that back in here now that
I make it a module again and save and

74
00:05:37.422 --> 00:05:41.286
reload, well,
something else is going wrong, but

75
00:05:41.286 --> 00:05:43.808
we'll talk about that in a moment.

76
00:05:43.808 --> 00:05:48.837
Okay, so one of the differences
between modules and regular JavaScript

77
00:05:48.837 --> 00:05:54.880
scripts is await, top level of await,
but another difference is scope.

78
00:05:54.880 --> 00:05:59.386
So we said that there's a few
different cases in JavaScript where we

79
00:05:59.386 --> 00:06:01.380
create a new scope.

80
00:06:01.380 --> 00:06:04.860
For example, functions were
one of those that we ran into.

81
00:06:06.080 --> 00:06:09.980
And another time that JavaScript
will create a new scope for

82
00:06:09.980 --> 00:06:12.740
us is when we have a module.

83
00:06:12.740 --> 00:06:17.720
So, earlier we tried to access the BREEDS

84
00:06:17.720 --> 00:06:22.701
constant variable that we had assigned to

85
00:06:22.701 --> 00:06:27.965
this long list of dog breeds,
in our earlier

86
00:06:27.965 --> 00:06:33.415
programs like the quiz.js for example.

87
00:06:33.415 --> 00:06:36.255
We had some things like option buttons,
right?

88
00:06:36.255 --> 00:06:44.191
Which when we went and we loaded our
local JavaScript quiz program here,

89
00:06:44.191 --> 00:06:49.137
I could still access
option buttons which was

90
00:06:49.137 --> 00:06:54.820
a variable that we had
declared in this script.

91
00:06:54.820 --> 00:06:57.858
But notice,
that's because this is not a module,

92
00:06:57.858 --> 00:07:00.930
this is just a regular JavaScript script.

93
00:07:00.930 --> 00:07:04.544
And so
I'm able to see into this script, and

94
00:07:04.544 --> 00:07:10.992
all of those variables that I declare
here, they are not in a different scope,

95
00:07:10.992 --> 00:07:15.600
they are still accessible to
me in my global scope here.

96
00:07:15.600 --> 00:07:19.389
But in doggo fetch,
since we have this module,

97
00:07:19.389 --> 00:07:24.883
I'm not able to access any of these
variables that I declare in here,

98
00:07:24.883 --> 00:07:28.217
they are local to the scope of the module.

99
00:07:28.217 --> 00:07:33.025
So again it's kind of like that module is
like this limo with tinted windows that

100
00:07:33.025 --> 00:07:35.500
Bart Simpson can't see into.

101
00:07:35.500 --> 00:07:37.992
So one of the other differences,

102
00:07:37.992 --> 00:07:42.889
other than top level await between
modules and scripts is scope.

103
00:07:42.889 --> 00:07:47.173
Now, I said earlier that the whole
reason modules exist is so

104
00:07:47.173 --> 00:07:50.711
that we can split our code
up into multiple files.

105
00:07:50.711 --> 00:07:54.504
But if we can't see into
the scope of a module,

106
00:07:54.504 --> 00:07:58.508
how can we use code from
another file in our file?

107
00:07:58.508 --> 00:08:02.602
And that is where import and
export statements come in.

108
00:08:02.602 --> 00:08:06.591
So you might run into these as you're
reading other people's JavaScript code

109
00:08:06.591 --> 00:08:09.250
around the web,
because these are becoming more and

110
00:08:09.250 --> 00:08:12.834
more useful that folks are splitting
up code into different modules.

111
00:08:12.834 --> 00:08:16.760
And so
you'll see things like export statements.

112
00:08:16.760 --> 00:08:22.793
So export from a module is sort
of like exposing a variable or

113
00:08:22.793 --> 00:08:25.820
a value, whatever it may be.

114
00:08:25.820 --> 00:08:29.514
It may be a constant value, might be
a function that you want people to be able

115
00:08:29.514 --> 00:08:32.198
to use, might be data,
it might be all kinds of stuff.

116
00:08:32.198 --> 00:08:37.272
So export what it does is it says,
hey, from this module,

117
00:08:37.272 --> 00:08:41.725
I wanna pop some values up
the roof of the limo here so

118
00:08:41.725 --> 00:08:45.785
that other people can see
them if they need to.

119
00:08:45.785 --> 00:08:50.330
And once we have a module
with some code where we've

120
00:08:50.330 --> 00:08:54.663
exported something,
we can in another module,

121
00:08:54.663 --> 00:09:00.220
import something that
the first module has exported.

122
00:09:00.220 --> 00:09:04.417
So that's how we can sort of
take advantage of code that

123
00:09:04.417 --> 00:09:06.980
is written in some other module.

124
00:09:08.200 --> 00:09:12.912
And we use our curly braces this looks
very much like the kind of destructuring

125
00:09:12.912 --> 00:09:14.980
syntax that we saw before.

126
00:09:14.980 --> 00:09:19.441
Because when we export something,
we're going to name certain value,

127
00:09:19.441 --> 00:09:21.800
certain variables essentially.

128
00:09:21.800 --> 00:09:25.492
Essentially what we're doing is creating
an object of exports that has some

129
00:09:25.492 --> 00:09:26.420
properties on it.

130
00:09:26.420 --> 00:09:31.015
In this case, it has a property
veryUsefulFunction that points at

131
00:09:31.015 --> 00:09:34.390
a function that doesn't do a ton,
but is there.

132
00:09:35.680 --> 00:09:40.709
And when we import, we sort of do
a kind of destructuring on that, and

133
00:09:40.709 --> 00:09:45.830
we say which variables, which properties,
or which exported things

134
00:09:45.830 --> 00:09:51.155
from the other module we would like to
pull in to this module that I meant.

135
00:09:52.767 --> 00:09:58.149
So what we end up with,
is a way to kind of talk between modules

136
00:09:58.149 --> 00:10:03.218
via this import and
export statement, sort of opening up

137
00:10:03.218 --> 00:10:08.407
the sunroof of our tinted windows limo and
our scope here.

138
00:10:08.407 --> 00:10:12.653
So we allow certain values to be exposed
but certain values but certain other

139
00:10:12.653 --> 00:10:16.785
values might still be local to the module
scope if they're not exported.

140
00:10:17.995 --> 00:10:21.948
So I've got here on our on our course,
materials page, so

141
00:10:21.948 --> 00:10:26.305
this is again
anjana.dev/javascript-first-steps.

142
00:10:26.305 --> 00:10:33.185
You'll notice a new option in our
Doggo Fetch here, a modular version.

143
00:10:33.185 --> 00:10:34.955
So let's take a look at this.

144
00:10:37.250 --> 00:10:42.190
Even in our local Doggo Fetch that we
were working in, we had one big module.

145
00:10:42.190 --> 00:10:45.150
That's how we were able
to use top level await.

146
00:10:45.150 --> 00:10:49.863
But in this version,
if I inspect what's going on here,

147
00:10:49.863 --> 00:10:55.079
I'll notice that now in this version,
I have two script tags.

148
00:10:56.480 --> 00:10:58.180
Let's take a look at the codes.

149
00:10:58.180 --> 00:11:03.748
So I'm going to save this as modular,

150
00:11:03.748 --> 00:11:09.321
and go over to my editor and open it up.

151
00:11:12.026 --> 00:11:14.129
So we can take a better look here.

152
00:11:14.129 --> 00:11:18.055
Okay, so this is the same program,
it's doing the same thing,

153
00:11:18.055 --> 00:11:21.050
I still have my functionality
that I had before.

154
00:11:21.050 --> 00:11:26.079
But if we scroll down we notice that
there's something a little bit different.

155
00:11:26.079 --> 00:11:31.158
So now I have two script
tags in my file here.

156
00:11:31.158 --> 00:11:36.480
And one is the same that we had before,
but this time I don't

157
00:11:36.480 --> 00:11:41.486
have any of my kind of little
helper functions there that

158
00:11:41.486 --> 00:11:47.688
were pulling in random elements from
an array or shuffling an array.

159
00:11:47.688 --> 00:11:52.720
They're no longer in the module that's
written in my DoggoFetch.html file,

160
00:11:52.720 --> 00:11:55.883
what I'm doing is I'm
actually importing them.

161
00:12:00.523 --> 00:12:05.087
What I'm doing is actually
importing them from another module.

162
00:12:05.087 --> 00:12:09.925
In this case, it's called 3-utilities.js.

163
00:12:09.925 --> 00:12:14.442
And I'm getting that involved here via
this other script tag that's saying, hey,

164
00:12:14.442 --> 00:12:18.500
there's another module that I
care about for this program.

165
00:12:18.500 --> 00:12:23.265
So that is loading,
another file that you can find here,

166
00:12:23.265 --> 00:12:29.815
this utilities file, on the course
materials page, which if we look at that,

167
00:12:29.815 --> 00:12:35.404
this is just a JavaScript file,
it ends in .js instead of .html.

168
00:12:35.404 --> 00:12:40.463
And this has essentially the functions
that we wrote earlier, that we had

169
00:12:40.463 --> 00:12:45.863
the helper function, some of them were
already written in a JavaScript file.

170
00:12:45.863 --> 00:12:50.629
And what we're doing is exporting
the things that we want

171
00:12:50.629 --> 00:12:55.294
people to be able to use from
this other utilities file,

172
00:12:55.294 --> 00:13:01.768
just because we don't want them to have
to be cluttering up our main program.

173
00:13:01.768 --> 00:13:04.011
These are utilities,
they're not super important,

174
00:13:04.011 --> 00:13:06.340
we just wanna be able to
use their functionality.

175
00:13:06.340 --> 00:13:10.510
We don't want to have so
much code in our one module.

176
00:13:10.510 --> 00:13:14.234
So what we're doing is we're
exporting three of these functions,

177
00:13:14.234 --> 00:13:16.392
getRandomElement, shuffleArray and

178
00:13:16.392 --> 00:13:20.080
getMultipleChoices from
this utilities module.

179
00:13:20.080 --> 00:13:25.164
And then in my main Duggo Fetch module,
I am importing those using

180
00:13:25.164 --> 00:13:30.720
that destructuring kind of syntax and
this special import statement.

181
00:13:32.040 --> 00:13:36.611
And so
now I'm able to call those functions like

182
00:13:36.611 --> 00:13:39.820
getRandomElement for example.

183
00:13:41.330 --> 00:13:46.460
Or shuffleArray or
getMultipleChoices I'm able to call those

184
00:13:46.460 --> 00:13:51.700
functions from within my module so
the whole thing still works.

185
00:13:53.570 --> 00:13:57.830
So this is how you might see code
split up in different places.

186
00:13:57.830 --> 00:14:03.216
So now there's a few more things
we could say about modules, for

187
00:14:03.216 --> 00:14:10.300
example, the reason that I'm showing you
these files hosted on anjana.dev here,

188
00:14:10.300 --> 00:14:17.590
is that if we were to try to do this in
a local file, the browser won't allow it.

189
00:14:17.590 --> 00:14:22.932
And this is because of some
browser security policies

190
00:14:22.932 --> 00:14:30.540
around how one file of code is able to
load in information from another file.

191
00:14:30.540 --> 00:14:34.448
So if I were to try to do
this in my local file,

192
00:14:34.448 --> 00:14:39.631
in my DoggoFetch.html that I'm
just opening at a file URL

193
00:14:39.631 --> 00:14:44.770
in my browser,
loading another module wouldn't work.

194
00:14:44.770 --> 00:14:48.355
It only works, if we're hosting them both

195
00:14:48.355 --> 00:14:53.030
from the same place on the interwebs,
let's say.

196
00:14:53.030 --> 00:14:57.140
So this is another difference
between modules and scripts.

197
00:14:57.140 --> 00:15:01.735
And there are a lot of other things that
we could say about modules, and of course,

198
00:15:01.735 --> 00:15:04.610
MDN has a whole bunch more
information about them.

199
00:15:04.610 --> 00:15:08.071
So if you want to dig in, you can
read a bit more about how they work.

200
00:15:08.071 --> 00:15:10.244
About some of the restrictions or

201
00:15:10.244 --> 00:15:15.917
some of the differences between a regular
JavaScript script and a JavaScript module.

202
00:15:15.917 --> 00:15:19.414
So the suffice it to say
that modules are kind of

203
00:15:19.414 --> 00:15:24.085
part of the the modern professional
web developer workflow.

204
00:15:24.085 --> 00:15:25.775
Because our programs are now so

205
00:15:25.775 --> 00:15:30.690
complex that it would be completely
impractical to have them all in one file.

206
00:15:30.690 --> 00:15:34.477
So you will see these import and
export statements more and

207
00:15:34.477 --> 00:15:37.878
more around the JavaScript
that you're reading and

208
00:15:37.878 --> 00:15:42.680
starting to work with as you get into
a professional level of JavaScript.

209
00:15:42.680 --> 00:15:46.169
And there's a lot more that we could
say about that modules in JavaScript

210
00:15:46.169 --> 00:15:46.910
as a whole.

211
00:15:46.910 --> 00:15:50.537
Could be a whole course in, and of itself
and so, there are some other courses on

212
00:15:50.537 --> 00:15:53.842
Frontend masters that go into this in
more detail that you can go ahead and

213
00:15:53.842 --> 00:15:54.565
explore next.

