WEBVTT

1
00:00:00.105 --> 00:00:07.754
Our first task in our Doggo Fetch
code base is going to be TODO 1.

2
00:00:07.754 --> 00:00:12.066
What we're going to do is similar
to our kind of five random numbers

3
00:00:12.066 --> 00:00:16.070
populating an array,
we're going to get multiple choices so

4
00:00:16.070 --> 00:00:21.469
that we can populate our different choice
buttons that we saw in our Doggo options.

5
00:00:21.469 --> 00:00:26.123
Right now we have no choices, so we're
gonna create some choices using a function

6
00:00:26.123 --> 00:00:28.495
getMultipleChoices using a while loop.

7
00:00:28.495 --> 00:00:30.977
If we go into our
Doggo Fetch HTML document,

8
00:00:30.977 --> 00:00:33.807
you can take a look at what
else is in here already.

9
00:00:33.807 --> 00:00:35.730
There's some utility functions.

10
00:00:35.730 --> 00:00:37.110
We're not gonna talk too much about them.

11
00:00:37.110 --> 00:00:39.338
This is a fun homework exercise to go and

12
00:00:39.338 --> 00:00:42.500
make sure you understand
what's happening here.

13
00:00:42.500 --> 00:00:46.277
But if you keep scrolling until you
see a to do, you'll see TODO 1.

14
00:00:46.277 --> 00:00:50.659
We have the bot, the declaration of
this function already done for us, so

15
00:00:50.659 --> 00:00:53.639
we know what it can expect
in terms of parameters.

16
00:00:53.639 --> 00:00:56.613
It's gonna be given
a few different things.

17
00:00:56.613 --> 00:01:02.656
It's gonna have some array that
includes a bunch of possible answers.

18
00:01:02.656 --> 00:01:05.672
One correct answer and a number n,

19
00:01:05.672 --> 00:01:10.772
which is gonna tell us how many
different choices we want.

20
00:01:10.772 --> 00:01:15.254
So our mission, should we choose to
accept it, is to use a while loop and

21
00:01:15.254 --> 00:01:19.368
a helper function that we have
up here called getRandomElement,

22
00:01:19.368 --> 00:01:23.595
which is sort of equivalent to our
kind of get random number thing.

23
00:01:23.595 --> 00:01:26.806
Or sort of, yeah, math.random,

24
00:01:26.806 --> 00:01:32.811
that's going to basically randomly
select a value from an array.

25
00:01:32.811 --> 00:01:38.070
So let's try to use getRandomElement and
a while loop to create an array

26
00:01:38.070 --> 00:01:43.417
of n choices from the array that I
passed in, making sure that the correct

27
00:01:43.417 --> 00:01:48.257
answer is in there, because we want
that to be one of the choices.

28
00:01:48.257 --> 00:01:51.322
It wouldn't be very nice if we
gave people three choices and

29
00:01:51.322 --> 00:01:52.746
none of them were correct.

30
00:01:52.746 --> 00:01:54.512
So that is our task.

31
00:01:54.512 --> 00:02:01.263
We can use this as kind of like
a benchmark of how while loops work.

32
00:02:01.263 --> 00:02:05.088
What we're doing in this while loop
is we're pushing stuff into an array.

33
00:02:05.088 --> 00:02:08.740
So we could follow a similar pattern,
for example.

34
00:02:08.740 --> 00:02:11.641
&gt;&gt; It's saying that you're
given three values, you're

35
00:02:11.641 --> 00:02:15.910
given the array of possible answers,
the correct answer, and the more choices.

36
00:02:15.910 --> 00:02:19.519
So you have the array right there, it's n.

37
00:02:19.519 --> 00:02:22.764
&gt;&gt; Yeah, and so the array,
just to give you all an idea,

38
00:02:22.764 --> 00:02:27.528
the array would be like a whole bunch of
the universe of possible choices that we

39
00:02:27.528 --> 00:02:29.642
could put in these three buttons.

40
00:02:29.642 --> 00:02:31.845
So in our case,
we're talking about dog breeds.

41
00:02:31.845 --> 00:02:34.991
So you may have noticed this really,
really,

42
00:02:34.991 --> 00:02:40.084
really long array up here of all the
possible dog breeds that we know about.

43
00:02:40.084 --> 00:02:43.447
So what we want is we don't wanna add,
I don't know, 100 something,

44
00:02:43.447 --> 00:02:45.528
however many things
there are in this array.

45
00:02:45.528 --> 00:02:50.284
We don't wanna add 100 different buttons
to the page, that would be not a fun game.

46
00:02:50.284 --> 00:02:53.292
So we just wanna narrow it down to three.

47
00:02:53.292 --> 00:02:56.619
And we wanna make sure that one
of them is the correct answer,

48
00:02:56.619 --> 00:02:59.962
which we're gonna receive as
an argument to this function.

49
00:03:02.342 --> 00:03:06.110
And in this case, well, I said three,
we're gonna narrow it down to n.

50
00:03:06.110 --> 00:03:10.394
But let's say I were to pass in and
ask you for three choices,

51
00:03:10.394 --> 00:03:15.938
I would want an array with three dog
breeds, one of which is the correct breed,

52
00:03:15.938 --> 00:03:19.320
and two of which are incorrect,
other breeds.

53
00:03:19.320 --> 00:03:23.072
But if I passed in n as five,
I would want an array with five breeds,

54
00:03:23.072 --> 00:03:25.960
one of which is correct and
four of which are wrong.

55
00:03:27.340 --> 00:03:29.336
Does that make sense?

56
00:03:29.336 --> 00:03:34.407
So what we're doing is we're kind of
getting multiple choice options for

57
00:03:34.407 --> 00:03:35.806
our question here.

58
00:03:35.806 --> 00:03:38.239
And we're using a while loop to do that.

59
00:03:38.239 --> 00:03:43.758
&gt;&gt; So the array we want to
return is array, right?

60
00:03:43.758 --> 00:03:47.270
&gt;&gt; So the array that we're
being passed in would be, for

61
00:03:47.270 --> 00:03:52.550
example, Maybe we should
rename this possibleChoices.

62
00:03:52.550 --> 00:03:55.874
So in this case,
it might be that huge list of dog breeds.

63
00:03:55.874 --> 00:03:58.053
Or maybe if it was my JavaScript quiz and

64
00:03:58.053 --> 00:04:02.346
I was changing it to multiple choice
instead of just true false, it could be,

65
00:04:02.346 --> 00:04:05.600
I don't know, an array of all
of the types in JavaScript.

66
00:04:05.600 --> 00:04:09.567
And I'm asking you to choose
the type of a certain value or

67
00:04:09.567 --> 00:04:12.469
something like that, we could imagine.

68
00:04:12.469 --> 00:04:17.376
&gt;&gt; Okay, so we're assuming that
those possible choices is an empty

69
00:04:17.376 --> 00:04:22.656
array at this point, and we want to
populate it with n possibilities.

70
00:04:22.656 --> 00:04:25.605
&gt;&gt; So possible choices is
not gonna be an empty array.

71
00:04:25.605 --> 00:04:27.935
I mean, we would expect it
not to be an empty array.

72
00:04:27.935 --> 00:04:29.335
It's JavaScript, so there's no guarantees.

73
00:04:29.335 --> 00:04:34.209
But we would expect it to be
an array of all the possibilities in

74
00:04:34.209 --> 00:04:38.543
the world that we could
possibly choose choices from.

75
00:04:38.543 --> 00:04:43.485
For example, if, in this case,
the array that's gonna be passed in, and

76
00:04:43.485 --> 00:04:47.887
we can we can find out how this
function is gonna be used in our code.

77
00:04:47.887 --> 00:04:52.002
If we look down,
later in the script, lower down,

78
00:04:52.002 --> 00:04:55.850
there is a function
that's loading quiz data.

79
00:04:57.100 --> 00:04:59.735
And what this is doing is it's going
to do a bunch of stuff that we haven't

80
00:04:59.735 --> 00:05:00.760
talked about yet.

81
00:05:00.760 --> 00:05:06.741
And it's going to get three choices,
including the correct dog breed,

82
00:05:06.741 --> 00:05:11.741
by selecting options from this long,
long, long list of dog

83
00:05:11.741 --> 00:05:17.440
breeds that we had up here that
we saved as the breeds element.

84
00:05:17.440 --> 00:05:20.850
&gt;&gt; Okay, I see where I was confused.

85
00:05:20.850 --> 00:05:24.580
&gt;&gt; Yeah, and this is all arbitrary.

86
00:05:24.580 --> 00:05:28.185
So if you find this way of
structuring the code base different,

87
00:05:28.185 --> 00:05:32.470
exercise to reader is to structure it
differently in your own version, but

88
00:05:32.470 --> 00:05:34.862
maybe after we walk through the example.

