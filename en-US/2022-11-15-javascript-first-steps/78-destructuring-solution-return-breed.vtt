WEBVTT

1
00:00:00.000 --> 00:00:04.150
So we are wielding our many tools in our

2
00:00:04.150 --> 00:00:08.829
increasingly large JavaScript toolbox.

3
00:00:08.829 --> 00:00:14.009
And in this case, we're wielding a lot of
string related methods, and we wanna try

4
00:00:14.009 --> 00:00:18.968
out some of our destructuring in order
to create this little utility function.

5
00:00:18.968 --> 00:00:25.678
So once again we want to take any URL,
which has this images.dog.ceo breeds and

6
00:00:25.678 --> 00:00:30.820
then either a two part name with
a minus in it or a one part name.

7
00:00:30.820 --> 00:00:36.793
And we wanna return either the one
part name or the two part name but

8
00:00:36.793 --> 00:00:41.471
split up the reversed so
that it's all one string.

9
00:00:41.471 --> 00:00:45.590
Okay, let us put our heads together and
figure out.

10
00:00:45.590 --> 00:00:47.552
There are many different ways
that we could do this, but

11
00:00:47.552 --> 00:00:49.782
let's figure out at least one way
that we can get through this.

12
00:00:49.782 --> 00:00:55.669
So would anybody like to share
with me where they started off?

13
00:00:55.669 --> 00:01:00.139
OJ, you said you got
&gt;&gt; I say let url equal, and

14
00:01:00.139 --> 00:01:04.886
then I'll put the url.split.

15
00:01:04.886 --> 00:01:06.000
&gt;&gt; Okay, so we're,

16
00:01:11.596 --> 00:01:16.837
We're doing url.split here, and then-
&gt;&gt; [COUGH] And

17
00:01:16.837 --> 00:01:20.548
then within double quotes I have a slash.

18
00:01:20.548 --> 00:01:21.960
&gt;&gt; A slash, okay.

19
00:01:21.960 --> 00:01:22.749
&gt;&gt; Yes.

20
00:01:22.749 --> 00:01:27.663
&gt;&gt; So one thing we could do is we
could split this URL on the slashes of

21
00:01:27.663 --> 00:01:29.764
which there are many here.

22
00:01:29.764 --> 00:01:32.434
And let's just in the we
do just wanna quickly see.

23
00:01:37.871 --> 00:01:44.228
What that would do, split on slashes.

24
00:01:44.228 --> 00:01:46.843
&gt;&gt; Yes.
&gt;&gt; So this gives us like a big long array

25
00:01:46.843 --> 00:01:48.244
with lots of stuff.

26
00:01:48.244 --> 00:01:53.329
&gt;&gt; [LAUGH] to URL and
square parenthesis for

27
00:01:53.329 --> 00:01:57.313
to pull out the name
&gt;&gt; Okay, and then we, yeah and

28
00:01:57.313 --> 00:02:02.011
then we look at this array, so
the first part we know that the chunks of

29
00:02:02.011 --> 00:02:06.713
meaning between these slashes
are gonna be pretty much consistent.

30
00:02:06.713 --> 00:02:11.281
Because we know the first part all the way
up through breeds is gonna be consistent.

31
00:02:11.281 --> 00:02:14.841
So then we just count,
okay, 0, 1, 2, 3, 4,

32
00:02:14.841 --> 00:02:17.555
is gonna be where the dog breed comes up.

33
00:02:17.555 --> 00:02:19.077
&gt;&gt; Yes.
Okay, now,

34
00:02:19.077 --> 00:02:21.093
&gt;&gt; So then I gonna go URL 4,

35
00:02:21.093 --> 00:02:24.072
position four in the array, right?

36
00:02:24.072 --> 00:02:28.341
To get the name of the dog or
the breed of the dog

37
00:02:28.341 --> 00:02:31.465
&gt;&gt; And then do you

38
00:02:31.465 --> 00:02:34.133
&gt;&gt; Well, [CROSSTALK] let's,

39
00:02:34.133 --> 00:02:37.845
I think let's flitter equals Url 4,

40
00:02:37.845 --> 00:02:42.027
and then I do another
split on that as well.

41
00:02:42.027 --> 00:02:42.700
&gt;&gt; Okay
&gt;&gt; [LAUGH].

42
00:02:42.700 --> 00:02:47.255
&gt;&gt; Okay, so lemme maybe call this,
I don't know, I could call it the-

43
00:02:47.255 --> 00:02:48.442
&gt;&gt; Splitter is what I call it.

44
00:02:48.442 --> 00:02:52.104
&gt;&gt; Splitter, okay,
we could call it, maybe, so

45
00:02:52.104 --> 00:02:57.065
again, naming things is subjective,
and whatever, I might.

46
00:02:57.065 --> 00:03:02.342
In my mind, splitter would be for
example this thing like the character that

47
00:03:02.342 --> 00:03:07.296
I pass in, that I'm splitting on,
so I might just say, I don't know.

48
00:03:07.296 --> 00:03:09.632
&gt;&gt; Url
&gt;&gt; Breed part or something.

49
00:03:09.632 --> 00:03:12.544
&gt;&gt; Sure.
&gt;&gt; Or something like that or breed

50
00:03:14.781 --> 00:03:20.527
Raw text or something like that, but
yeah, we can call it whatever we want.

51
00:03:20.527 --> 00:03:23.423
Now can I ask about this line here?

52
00:03:23.423 --> 00:03:30.123
So URL Was

53
00:03:30.123 --> 00:03:35.185
the name of the string passed
in to our function, that was

54
00:03:35.185 --> 00:03:42.372
the name of the parameter that was already
coded into this starter project here.

55
00:03:42.372 --> 00:03:46.642
So I might suggest that just so we don't
kind of confuse ourselves about what we're

56
00:03:46.642 --> 00:03:49.082
talking about when we're
talking about a URL.

57
00:03:49.082 --> 00:03:53.949
That we maybe named this to,
I don't know, URL array or

58
00:03:53.949 --> 00:03:58.723
URL split or URL parts maybe,
or something like that.

59
00:03:58.723 --> 00:04:02.637
Because it's going to be this array
of all these different things.

60
00:04:02.637 --> 00:04:07.219
So I might just suggest we try to think
about our naming here to make sure I'm

61
00:04:07.219 --> 00:04:08.760
missing my semicolons.

62
00:04:08.760 --> 00:04:13.244
To make sure that we are naming it
something that we're gonna be able to when

63
00:04:13.244 --> 00:04:14.747
we read this code later.

64
00:04:14.747 --> 00:04:18.307
After we've forgotten when we wrote it and
what we were doing in it or

65
00:04:18.307 --> 00:04:21.306
when we show it to our teammate or
our friend or whatever,

66
00:04:21.306 --> 00:04:25.191
that somebody else would be able to
sort of guess at what's going on here.

67
00:04:25.191 --> 00:04:29.572
Okay, great, so this, so

68
00:04:29.572 --> 00:04:35.174
far this gets us the
&gt;&gt; Poodle-standard

69
00:04:35.174 --> 00:04:38.103
&gt;&gt; Yeah, poodle- standard, okay, cool.

70
00:04:38.103 --> 00:04:44.099
Did anybody do anything different for
the beginning of this function?

71
00:04:44.099 --> 00:04:49.085
Yeah, just for variety sake not
because this is totally valid.

72
00:04:49.085 --> 00:04:52.745
&gt;&gt; I would have just combined those two,
those two don't need to be two separate

73
00:04:52.745 --> 00:04:54.594
statements use two
&gt;&gt; Okay

74
00:04:54.594 --> 00:04:58.244
&gt;&gt; Url.split with slash at the top and

75
00:04:58.244 --> 00:05:02.184
then in the square brackets 4
&gt;&gt; So we can also, we

76
00:05:02.184 --> 00:05:06.472
don't have to necessarily capture it as an
intermediate value, we can also do that.

77
00:05:06.472 --> 00:05:10.354
And then, what did you name this?

78
00:05:10.354 --> 00:05:12.189
&gt;&gt; Just temp name.

79
00:05:12.189 --> 00:05:15.330
&gt;&gt; Okay, so temp or something like that.

80
00:05:15.330 --> 00:05:22.078
Or you could call it I don't know, split
breed or something, whatever you want.

81
00:05:22.078 --> 00:05:28.901
So we can call it, let's call it
maybe we'll call it unsplit breed,

82
00:05:28.901 --> 00:05:33.725
because it might be like
poodle minus standard,

83
00:05:33.725 --> 00:05:39.629
which we still need to split up and
move around for example.

84
00:05:39.629 --> 00:05:43.323
I don't know, names are hard,
so it's up to you.

85
00:05:43.323 --> 00:05:44.894
So these are totally valid.

86
00:05:44.894 --> 00:05:46.629
Any other options?

87
00:05:46.629 --> 00:05:50.095
There are several but just curious.

88
00:05:50.095 --> 00:05:51.864
Anything from the chat?

89
00:05:53.647 --> 00:06:00.027
&gt;&gt; Little outside of the scope,
but image URL equals URL.search,

90
00:06:00.027 --> 00:06:05.252
and then the regular expression
slash breed slash I.

91
00:06:05.252 --> 00:06:10.706
&gt;&gt; Okay, yeah, so
we are using now string.search here,

92
00:06:10.706 --> 00:06:18.380
which is doing something a little bit
fancy that we haven't looked at before.

93
00:06:18.380 --> 00:06:21.816
Which is using what's
called regular expressions,

94
00:06:21.816 --> 00:06:26.711
which are very very powerful tools for
matching certain patterns and text.

95
00:06:26.711 --> 00:06:30.635
So we haven't covered this, but yes,
if you know regular expressions,

96
00:06:30.635 --> 00:06:33.929
maybe from other languages or
things that you've learned and

97
00:06:33.929 --> 00:06:37.306
you're comfortable with those,
you could totally use that.

98
00:06:37.306 --> 00:06:41.200
We're gonna maybe leave it out of our
example code because it's not something

99
00:06:41.200 --> 00:06:42.861
we've covered yet, but great.

100
00:06:42.861 --> 00:06:45.005
Okay, wonderful.

101
00:06:45.005 --> 00:06:51.963
There's another thing we could do
that is in the finished example,

102
00:06:51.963 --> 00:06:55.756
which is to split on a longer string.

103
00:06:55.756 --> 00:07:00.734
For example because I know that breeds

104
00:07:00.734 --> 00:07:05.408
is a word that's gonna be in my URL.

105
00:07:05.408 --> 00:07:11.515
I could even split on that or
on breeds slash,

106
00:07:11.515 --> 00:07:16.192
and then get two different parts.

107
00:07:16.192 --> 00:07:19.400
And then maybe take the second thing
of that and split on the slash or what?

108
00:07:19.400 --> 00:07:21.463
So there's lots of different
ways that you could do this.

109
00:07:21.463 --> 00:07:25.415
So our way of splitting on the dashes is
totally valid because then that means

110
00:07:25.415 --> 00:07:28.144
that we can pull out just
the poodle minus standard.

111
00:07:28.144 --> 00:07:29.181
Great, okay.

