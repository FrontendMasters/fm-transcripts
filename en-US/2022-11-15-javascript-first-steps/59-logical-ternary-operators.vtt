WEBVTT

1
00:00:00.049 --> 00:00:05.008
So, now, sometimes what we care about is
not the value that we have itself, but

2
00:00:05.008 --> 00:00:06.794
the opposite of that value.

3
00:00:06.794 --> 00:00:13.577
So, for example, if someone is around
you is false, then we might say,

4
00:00:13.577 --> 00:00:18.693
as Destiny's Child once did
if no one is around you, so

5
00:00:18.693 --> 00:00:24.811
if it is not true that someone is
around you, then you should say,

6
00:00:24.811 --> 00:00:30.855
baby, I love you, as we were told
in the epic song, Say My Name.

7
00:00:30.855 --> 00:00:35.917
So, sometimes we care about
the opposite of the value,

8
00:00:35.917 --> 00:00:41.734
and the exclamation point,
which is the logical NOT operator,

9
00:00:41.734 --> 00:00:45.520
gives us the opposite of a Boolean value.

10
00:00:45.520 --> 00:00:50.834
Or the opposite of the truthiness
of a another type of value.

11
00:00:50.834 --> 00:00:56.537
Cool, so we can use NOT to test
the opposite of something.

12
00:00:56.537 --> 00:00:59.775
And sometimes we care about
more than one value and

13
00:00:59.775 --> 00:01:03.566
we care about their kind of
the truthiness of both of them.

14
00:01:03.566 --> 00:01:07.201
So, for example,
if you're happy and you know it,

15
00:01:07.201 --> 00:01:10.101
that's when you should clap your hands.

16
00:01:10.101 --> 00:01:14.032
And so, to care about more than one value,

17
00:01:14.032 --> 00:01:17.866
we have some of these logical operators.

18
00:01:17.866 --> 00:01:22.030
So, NOT the NOT operator, the exclamation
point is a logical operator too,

19
00:01:22.030 --> 00:01:25.552
it operates on one value, or
we could say it's a unary operator,

20
00:01:25.552 --> 00:01:27.296
you might see that word around.

21
00:01:27.296 --> 00:01:31.785
And then this double and sign,
this double ampersand that is

22
00:01:31.785 --> 00:01:36.019
another operator that is what
we call a binary operator.

23
00:01:36.019 --> 00:01:41.388
Binary logical operator operates on two
values, and so these type of logical

24
00:01:41.388 --> 00:01:46.272
operators, let us make two boolean
values become one boolean value.

25
00:01:46.272 --> 00:01:51.518
The entire expression takes two
values looks at their truthiness and

26
00:01:51.518 --> 00:01:53.700
evaluates to true or false.

27
00:01:56.355 --> 00:01:58.709
So it's a little bit more
complicated than that but

28
00:01:58.709 --> 00:02:00.304
we can think of it that way for now.

29
00:02:00.304 --> 00:02:05.613
So logical and
is this double ampersand operator,

30
00:02:05.613 --> 00:02:11.176
and it is only going to be
true if both values are true.

31
00:02:11.176 --> 00:02:16.130
So what we have is a nice little
truth table here just showing if

32
00:02:16.130 --> 00:02:17.379
we have A and B.

33
00:02:17.379 --> 00:02:20.558
That is only going to be
true if both A is true and

34
00:02:20.558 --> 00:02:25.532
B is true if either one of them is false
or both of them are false, then A and

35
00:02:25.532 --> 00:02:29.222
and B, or we usually just say A and
B is gonna be false.

36
00:02:29.222 --> 00:02:36.124
There is a sibling operator to this one,
which I see some folks are nodding.

37
00:02:36.124 --> 00:02:42.235
We know the next thing we're
gonna need is maybe logical,

38
00:02:42.235 --> 00:02:47.970
or exactly and so
in JavaScript that is two of the pipe or

39
00:02:47.970 --> 00:02:53.581
kind of vertical line operator or
it is going to be true

40
00:02:53.581 --> 00:02:58.940
if either one of the values is true,
as long as one or

41
00:02:58.940 --> 00:03:04.208
both of the values is true A or
B is going to be true.

42
00:03:04.208 --> 00:03:08.824
The only time that it's gonna be false,
is if both of those values are false.

43
00:03:08.824 --> 00:03:09.982
So, you can just sort of,

44
00:03:09.982 --> 00:03:13.260
we'll be getting used to these if
you haven't encountered them before.

45
00:03:13.260 --> 00:03:17.583
If you've encountered operators
like this in other languages,

46
00:03:17.583 --> 00:03:19.397
it usually works the same.

47
00:03:19.397 --> 00:03:24.081
And there is also another operator in
JavaScript that it's not a logical

48
00:03:24.081 --> 00:03:26.078
operator to conditional, but

49
00:03:26.078 --> 00:03:30.376
it's a fast way of writing
conditionals and it's what we call, so

50
00:03:30.376 --> 00:03:35.254
we saw NOT is a unary operator it takes
one operand it operates on one thing.

51
00:03:35.254 --> 00:03:38.700
AND and OR are binary operators,
they operate on two things.

52
00:03:38.700 --> 00:03:44.706
And JavaScript has one ternary operator
that operates on three different values.

53
00:03:44.706 --> 00:03:50.138
And what this does it's a very quick
way of writing an if-else statement.

54
00:03:50.138 --> 00:03:54.934
So, in this case, we use a condition
expression same as we've

55
00:03:54.934 --> 00:03:58.288
been doing in our
[INAUDIBLE] if statements.

56
00:03:58.288 --> 00:04:03.448
And then we put a question mark
like saying, is this true?

57
00:04:03.448 --> 00:04:08.452
And after the question mark,
we put a value we want

58
00:04:08.452 --> 00:04:13.588
JavaScript to evaluate to
this whole expression.

59
00:04:13.588 --> 00:04:17.458
Is gonna become the value if
true if the condition is true.

60
00:04:17.458 --> 00:04:22.705
Then we have a colon and that's sort of
like our else keyword and then we have

61
00:04:22.705 --> 00:04:28.305
the value that we want this to become if
it's false, if the condition is false.

62
00:04:28.305 --> 00:04:29.684
So, for example,

63
00:04:29.684 --> 00:04:34.430
let's say I have a forecast variable
that could be sunny or rain or

64
00:04:34.430 --> 00:04:39.798
whatever and I want to know what my mood
is going to be based on the weather.

65
00:04:39.798 --> 00:04:41.360
I can do a line like this.

66
00:04:41.360 --> 00:04:47.203
I can say my mood, I'm going to assign it
to the value of this whole expression,

67
00:04:47.203 --> 00:04:50.358
that is created by this ternary operator.

68
00:04:50.358 --> 00:04:55.435
So JavaScript I want you to evaluate this
whole everything to the right of this

69
00:04:55.435 --> 00:05:00.528
single equal sign here all of this stuff
its gonna evaluate to a single value.

70
00:05:00.528 --> 00:05:04.760
And the way it's going to work is
JavaScript we're gonna ask it with

71
00:05:04.760 --> 00:05:06.096
that question mark,

72
00:05:06.096 --> 00:05:10.713
is this thing true is forecast triple
equals sunny is the forecast sunny?

73
00:05:10.713 --> 00:05:15.364
And if so, then this expression
will evaluate to the string happy,

74
00:05:15.364 --> 00:05:18.464
which is gonna get saved
to my mood variable,

75
00:05:18.464 --> 00:05:23.361
and if not if the forecast is not equal
to sunny then the whole expression

76
00:05:23.361 --> 00:05:27.300
is gonna evaluate to the value sad and
my mood will be sad.

77
00:05:27.300 --> 00:05:33.042
And this is equivalent to doing the same
thing if we were to declare a variable but

78
00:05:33.042 --> 00:05:37.001
not assign it and
then assign it in our if-else block.

79
00:05:37.001 --> 00:05:40.997
So, these are kind of
equivalent statements here.

80
00:05:40.997 --> 00:05:45.712
Cool, so, this ternary operator,
if it pops up a lot in kind of real-world

81
00:05:45.712 --> 00:05:50.653
JavaScript you'll see it all over the
place and so we're not necessarily gonna

82
00:05:50.653 --> 00:05:55.077
spend too much time with it but
it's something that you'll get more and

83
00:05:55.077 --> 00:05:59.530
more familiar with as you continue
adventuring into JavaScript land.

