WEBVTT

1
00:00:00.330 --> 00:00:04.480
So now we're going to
try out our new syntax.

2
00:00:05.600 --> 00:00:09.777
What we're gonna do is write very similar
functions to the three functions that we

3
00:00:09.777 --> 00:00:11.787
just wrote with the function keyword.

4
00:00:11.787 --> 00:00:14.655
Where we had multiply,
yell, and longer than.

5
00:00:14.655 --> 00:00:17.386
We're gonna write the functions divide,
whisper and

6
00:00:17.386 --> 00:00:20.415
shorterThan that kind of do
the opposite of those things.

7
00:00:20.415 --> 00:00:23.435
And this time when we
declare these functions,

8
00:00:23.435 --> 00:00:26.775
we're gonna use this arrow syntax, okay?

9
00:00:26.775 --> 00:00:29.062
So let's take a few minutes,
try to work through it and

10
00:00:29.062 --> 00:00:31.120
then we'll talk about
the solutions together.

11
00:00:31.120 --> 00:00:33.075
And this time you have to use arrows.

12
00:00:37.022 --> 00:00:40.221
So, this time we're doing,
instead of multiply we're doing divide and

13
00:00:40.221 --> 00:00:41.860
we're using arrows.

14
00:00:41.860 --> 00:00:43.652
So let's go back to our console,

15
00:00:43.652 --> 00:00:46.863
who would like to talk me
through their multiply solution?

16
00:00:46.863 --> 00:00:50.508
&gt;&gt; I think divide.

17
00:00:50.508 --> 00:00:53.614
&gt;&gt; Sorry, divide, their divide solution.

18
00:00:53.614 --> 00:00:55.370
[LAUGH] Yeah, OJ?

19
00:00:55.370 --> 00:01:00.518
&gt;&gt; const divide = (x,

20
00:01:00.518 --> 00:01:04.300
y) =&gt; x / y.

21
00:01:04.300 --> 00:01:06.718
&gt;&gt; x and then divide is which operator?

22
00:01:06.718 --> 00:01:09.200
&gt;&gt; /
&gt;&gt; / y like this?

23
00:01:09.200 --> 00:01:11.429
&gt;&gt; Yes.

24
00:01:11.429 --> 00:01:16.317
&gt;&gt; Okay and so now if I divide,
I don't know, 9/3, sorry,

25
00:01:16.317 --> 00:01:19.475
divide (9, 3) we should get 3 yes.

26
00:01:19.475 --> 00:01:24.037
And [LAUGH] 9/3 divided by
undefined is not a number.

27
00:01:24.037 --> 00:01:32.110
[LAUGH] Great, okay, how about the next
one was whisper, so, the opposite of yell.

28
00:01:32.110 --> 00:01:35.057
This time we're gonna take
in an uppercase string and

29
00:01:35.057 --> 00:01:38.732
log it in lowercase to the console
using an arrow function, Paul?

30
00:01:38.732 --> 00:01:43.118
&gt;&gt; Okay, so const whisper = and

31
00:01:43.118 --> 00:01:48.210
then in parentheses, (text).

32
00:01:49.280 --> 00:01:50.610
&gt;&gt; Sure.

33
00:01:50.610 --> 00:01:51.937
&gt;&gt; And then the =&gt;
&gt;&gt; Yep.

34
00:01:51.937 --> 00:01:56.970
&gt;&gt; And then it's text.toLowerCase
with parentheses.

35
00:01:56.970 --> 00:01:59.794
&gt;&gt; Like that, okay.

36
00:01:59.794 --> 00:02:05.410
&gt;&gt; Parenthesis, it didn't work.

37
00:02:05.410 --> 00:02:07.795
It just came out and said,
hey, this is a function.

38
00:02:07.795 --> 00:02:09.337
[LAUGH]
&gt;&gt; Yes, exactly So

39
00:02:09.337 --> 00:02:12.250
there's a difference between
properties and methods.

40
00:02:12.250 --> 00:02:15.620
We talked about properties on
objects point to things, right?

41
00:02:15.620 --> 00:02:19.763
And so when we use just the dot with
no parens, the dot and the name and

42
00:02:19.763 --> 00:02:20.505
no parens.

43
00:02:20.505 --> 00:02:23.497
We're pointing to the thing that this
property points to which is a function.

44
00:02:23.497 --> 00:02:28.360
If we wanna actually use that
function we have to use the parens.

45
00:02:28.360 --> 00:02:34.797
Okay, so
now this if I whisper("OMG") we're

46
00:02:34.797 --> 00:02:40.784
going to evaluate that
to the expression OMG.

47
00:02:40.784 --> 00:02:46.056
Which for example I could capture as,

48
00:02:46.056 --> 00:02:52.324
I don't know,
as a output as a new variable.

49
00:02:56.326 --> 00:03:03.538
Yes, so this is great for returning
the lowercase version of the string.

50
00:03:03.538 --> 00:03:08.940
But what I also asked us to do is
log it in lowercase to the console.

51
00:03:08.940 --> 00:03:11.536
So this would require us to do
something a little bit different.

52
00:03:11.536 --> 00:03:15.250
This is also a valid function, it just
does something a little bit different.

53
00:03:15.250 --> 00:03:16.890
This returns us the value.

54
00:03:16.890 --> 00:03:20.715
What if we wanted a version of this
function that doesn't actually return

55
00:03:20.715 --> 00:03:23.932
the value but logs it to the console
instead using a fat arrow?

56
00:03:23.932 --> 00:03:25.303
So I'm gonna make a whisper2.

57
00:03:27.626 --> 00:03:30.360
Any guess how we do that?

58
00:03:30.360 --> 00:03:32.090
Paul, do you wanna take a stab at it?

59
00:03:32.090 --> 00:03:36.550
&gt;&gt; So we're doing both, we're returning
and printing out, or just printing?

60
00:03:36.550 --> 00:03:38.410
&gt;&gt; We can just print out for now.

61
00:03:38.410 --> 00:03:44.305
&gt;&gt; Okay, so it's the same thing, you do
text, and then the fat arrow function, and

62
00:03:44.305 --> 00:03:50.098
then just console.log
&gt;&gt; Okay so console.log.

63
00:03:50.098 --> 00:03:53.200
&gt;&gt; And then the text.toLowerCase.

64
00:03:53.200 --> 00:03:56.130
&gt;&gt; toLowerCase, okay so

65
00:03:56.130 --> 00:04:02.920
now if I whisper2("OMG")
we get out the value.

66
00:04:05.000 --> 00:04:12.230
And in this case, the return value
of this function is gonna be what?

67
00:04:13.270 --> 00:04:17.851
If I were to do let
output1 = whisper("OMG"),

68
00:04:17.851 --> 00:04:21.297
what do you think output2 is gonna be?

69
00:04:21.297 --> 00:04:26.638
Undefined, okay.

70
00:04:26.638 --> 00:04:29.910
&gt;&gt; You ran the wrong one, you ran.

71
00:04:29.910 --> 00:04:32.990
&gt;&gt; I ran whisper instead
of [LAUGH] good call, okay.

72
00:04:32.990 --> 00:04:36.746
And this is why we use let is
because we can resign them.

73
00:04:36.746 --> 00:04:41.870
Okay, so now output2 should be
what we expect which is undefined.

74
00:04:41.870 --> 00:04:44.500
Okay, what if we wanted to do both?

75
00:04:44.500 --> 00:04:47.560
What if we wanted to both log and return?

76
00:04:47.560 --> 00:04:51.030
I see Jason nodding,
do you want to take a stab at this one?

77
00:04:51.030 --> 00:04:53.771
We could make a whisper3, let's say
&gt;&gt; Yeah, so we would-

78
00:04:53.771 --> 00:04:54.339
&gt;&gt; Sorry,

79
00:04:54.339 --> 00:04:57.780
I'm just gonna clear this out here.

80
00:04:57.780 --> 00:04:59.621
Okay, so whisper3.

81
00:04:59.621 --> 00:05:03.792
&gt;&gt; Yep, so basically the same
thing we had before with

82
00:05:03.792 --> 00:05:08.090
the exception of adding and
opening curly braces.

83
00:05:08.090 --> 00:05:09.730
&gt;&gt; Curly braces, exactly.

84
00:05:09.730 --> 00:05:14.030
So now I wanna do two things,
I wanna have multiple lines of code.

85
00:05:14.030 --> 00:05:15.939
So now I would have to do?

86
00:05:15.939 --> 00:05:20.753
&gt;&gt; You could console.log it here and
then you could, well actually,

87
00:05:20.753 --> 00:05:24.460
what I did was I assigned
it to a variable.

88
00:05:24.460 --> 00:05:27.753
Once I converted it to lowercase,
I put that as a variable.

89
00:05:27.753 --> 00:05:31.270
And then I console.log the variable and
then I returned the variable.

90
00:05:31.270 --> 00:05:35.500
&gt;&gt; Great, let's walk me through it just so
we can go through that a little slower.

91
00:05:35.500 --> 00:05:41.590
&gt;&gt; Sure, so const, whatever we want to
call it, lc for lowercase or whatever.

92
00:05:41.590 --> 00:05:42.634
&gt;&gt; Sure.

93
00:05:42.634 --> 00:05:45.306
&gt;&gt; = text.toLowerCase, yep.

94
00:05:45.306 --> 00:05:47.404
&gt;&gt; Okay.
&gt;&gt; So we would console.log,

95
00:05:47.404 --> 00:05:53.700
on the next one, we'd console.log and
then put lc, and then return lc.

96
00:05:53.700 --> 00:05:56.312
&gt;&gt; Right, so in this case,
if I wanna avoid repeating myself with

97
00:05:56.312 --> 00:05:59.370
text.toLowerCase, text.toLowerCase,
blah, blah, blah.

98
00:05:59.370 --> 00:06:01.845
We can use variables, that's exactly
what variables are great for

99
00:06:01.845 --> 00:06:03.160
is remembering the thing.

100
00:06:03.160 --> 00:06:06.350
And then I can reference that
variable in my function body.

101
00:06:06.350 --> 00:06:10.587
And we just need to remember that return
keyword if we're using a curly braces

102
00:06:10.587 --> 00:06:12.050
function body.

103
00:06:12.050 --> 00:06:18.648
So now if I do, let, I can't remember
what it was, result3 whisper3("OMG").

104
00:06:18.648 --> 00:06:25.792
So now I see OMG got printed out to
the console when I called whisper3 and

105
00:06:25.792 --> 00:06:30.400
result3 is also the value of the string.

106
00:06:30.400 --> 00:06:33.110
Great, excellent work, everybody.

107
00:06:33.110 --> 00:06:36.700
Okay, last one, shorterThan,
this is where we're gonna take 2 arrays.

108
00:06:36.700 --> 00:06:41.803
And in this one, I would say let's use
the approach where we're returning

109
00:06:41.803 --> 00:06:46.690
the value of the operator,
the expression using greaterThan.

110
00:06:46.690 --> 00:06:49.811
So, without trying to use the if else,

111
00:06:49.811 --> 00:06:53.885
can anybody walk me through
their solution, Chu?

112
00:06:53.885 --> 00:06:56.191
&gt;&gt; const shorterThan =
&gt;&gt; Sorry, one second,

113
00:06:56.191 --> 00:06:58.070
let me make some room here.

114
00:06:58.070 --> 00:07:02.280
Okay, const shorterThan =
&gt;&gt; = (a1, a2)

115
00:07:02.280 --> 00:07:07.610
&gt;&gt; a1, a2 great.

116
00:07:07.610 --> 00:07:08.724
&gt;&gt; =&gt;
&gt;&gt; =&gt;

117
00:07:08.724 --> 00:07:12.194
&gt;&gt; a1 &gt; a2.

118
00:07:12.194 --> 00:07:17.150
&gt;&gt; Okay, so a1 &gt; a2.

119
00:07:17.150 --> 00:07:19.381
Where in this case, these two items,

120
00:07:19.381 --> 00:07:22.602
which again JavaScript
doesn't care what we pass in.

121
00:07:22.602 --> 00:07:26.170
But we know that we're
gonna be passing in arrays.

122
00:07:27.230 --> 00:07:31.457
And what we just want to
do is make sure that the &gt;

123
00:07:31.457 --> 00:07:35.650
operator does what we expect on arrays.

124
00:07:35.650 --> 00:07:40.680
So what we want to know is how
many things are in the array?

125
00:07:40.680 --> 00:07:44.722
So let's try this out, shorterThan,

126
00:07:44.722 --> 00:07:50.363
what do we have, 1,2 and
I don't know 1,2,3.

127
00:07:50.363 --> 00:07:54.805
And in this case,
we're maybe getting something

128
00:07:54.805 --> 00:07:58.515
a little bit different than we expected.

129
00:07:59.645 --> 00:08:03.025
Let's figure out what's going on here.

130
00:08:03.025 --> 00:08:06.686
So if I have an array &gt; some other array,

131
00:08:06.686 --> 00:08:11.770
this this operator is not
working the way I expect it to.

132
00:08:11.770 --> 00:08:16.210
As it would for example if I asked if 4 or

133
00:08:16.210 --> 00:08:23.219
a silent 2 is &gt; sorry,
am I using the wrong direction, yes.

134
00:08:26.553 --> 00:08:28.670
Yeah, I think I typed this
wrong the first time.

135
00:08:28.670 --> 00:08:31.055
We want shorter than, so
we want to know if it's less than.

136
00:08:31.055 --> 00:08:33.410
[LAUGH] My bad.

137
00:08:33.410 --> 00:08:37.936
Let's try this this way,
okay so 1,2 &lt; 1,2,3.

138
00:08:37.936 --> 00:08:41.110
Okay, there we go [LAUGH]
that's what's happening.

139
00:08:41.110 --> 00:08:42.063
All right, great, so

140
00:08:42.063 --> 00:08:45.087
I think what happened is I just typed
the wrong character here, great.

141
00:08:45.087 --> 00:08:48.920
[LAUGH] It happens to the best of us.

142
00:08:48.920 --> 00:08:50.271
Did anybody have a different solution?

143
00:08:53.840 --> 00:08:54.660
Yeah.

144
00:08:54.660 --> 00:08:59.149
&gt;&gt; Can you use the .length to make
sure that you've got the actual

145
00:08:59.149 --> 00:09:00.679
length of the array?

146
00:09:00.679 --> 00:09:04.483
&gt;&gt; Yeah, so we could also use
the .length and in this case,

147
00:09:04.483 --> 00:09:07.036
I'm gonna write the right operator.

148
00:09:07.036 --> 00:09:11.529
[LAUGH] So we could use a1.length &gt;
is that what I did the first time?

149
00:09:11.529 --> 00:09:13.803
a2.length, is that what you meant?

150
00:09:13.803 --> 00:09:19.053
Great, and of course I didn't even
remember to name this shorterThan2,

151
00:09:19.053 --> 00:09:24.729
but thankfully JavaScript is reminding me
that I already declared a shorterThan.

152
00:09:24.729 --> 00:09:29.582
So I can't redeclare it, so
shorterThan 2, too short too furious,

153
00:09:29.582 --> 00:09:34.353
is going to be [LAUGH] let's say
if we do 1,2 and then 1,2,3, or

154
00:09:34.353 --> 00:09:38.325
1,3,3, it's also going to
return what we expect.

155
00:09:38.325 --> 00:09:42.654
And this time I typed the operator
in the right direction.

156
00:09:42.654 --> 00:09:46.642
So okay, so these are now equivalent,
essentially.

