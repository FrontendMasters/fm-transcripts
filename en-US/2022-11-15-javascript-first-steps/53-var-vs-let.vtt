WEBVTT

1
00:00:00.000 --> 00:00:01.238
We haven't talked too much.

2
00:00:01.238 --> 00:00:06.060
We mentioned briefly another
way to declare variables

3
00:00:06.060 --> 00:00:10.684
that's not let or const and
it is the key word, var.

4
00:00:10.684 --> 00:00:15.952
So, var is another way that I can

5
00:00:15.952 --> 00:00:21.816
declare variables in JavaScript.

6
00:00:21.816 --> 00:00:29.271
And var has different scoping
rules than let or const.

7
00:00:32.287 --> 00:00:36.913
We're not really gonna get into too
much of the intricacies of var and

8
00:00:36.913 --> 00:00:42.492
how it works and how to use it, because in
general, in our code, we should be moving

9
00:00:42.492 --> 00:00:48.109
towards always using either let or const
because var does some unexpected things.

10
00:00:48.109 --> 00:00:53.236
And let and const are newer
types of declaring variables,

11
00:00:53.236 --> 00:00:57.945
newer keywords let's say for
declaring variables,

12
00:00:57.945 --> 00:01:02.443
that introduce a new scope
restriction around when

13
00:01:02.443 --> 00:01:07.369
those variables are gonna be in play,
compared to var.

14
00:01:07.369 --> 00:01:12.138
So var should be something that we're
comfortable reading because we're

15
00:01:12.138 --> 00:01:16.830
gonna still find it a lot in examples,
in code that we find around the Web,

16
00:01:16.830 --> 00:01:19.649
other people's code, that sort of thing.

17
00:01:19.649 --> 00:01:24.479
But we're not going to
have much reason to wanna

18
00:01:24.479 --> 00:01:29.078
declare new variables
in our code using var.

19
00:01:29.078 --> 00:01:32.103
This is to say when it
comes to mutability,

20
00:01:32.103 --> 00:01:36.401
var variables are re-assignable
just like let variables.

21
00:01:36.401 --> 00:01:40.617
So newVariable = goodbye,

22
00:01:40.617 --> 00:01:45.536
is totally valid in var variables

23
00:01:45.536 --> 00:01:50.288
the same as it would be with let.

24
00:01:50.288 --> 00:01:54.645
Now, when it comes to functions we said
that like for example let variables

25
00:01:54.645 --> 00:01:59.014
because we can reassign them we can
mess with them inside of our functions.

26
00:01:59.014 --> 00:02:04.024
So, function mess with,

27
00:02:04.024 --> 00:02:08.806
we can have now setting,

28
00:02:08.806 --> 00:02:13.599
new variable to messed.

29
00:02:13.599 --> 00:02:18.506
So, now if I call and just to check, so
new variable once again was goodbye.

30
00:02:18.506 --> 00:02:25.703
Now, if I call mess with and I check
new variable again, it's been messed.

31
00:02:25.703 --> 00:02:30.296
So it works similar to let,
in function scope.

32
00:02:30.296 --> 00:02:32.351
Now, what I haven't talked about yet,

33
00:02:32.351 --> 00:02:35.201
is there is another way to
create a scope in JavaScript.

34
00:02:35.201 --> 00:02:39.431
There's a couple of ways, but
one of the other ways that

35
00:02:39.431 --> 00:02:43.935
we're gonna run into later is
what's called block scope.

36
00:02:43.935 --> 00:02:47.400
So what we've been looking at,
the examples we've been looking

37
00:02:47.400 --> 00:02:50.298
at with bankruptcy and
the planets and all this stuff,

38
00:02:50.298 --> 00:02:54.519
this is creating new scopes as function
scopes where when we create a function,

39
00:02:54.519 --> 00:02:56.608
we get a new scope in the function body.

40
00:02:56.608 --> 00:03:02.154
Block scope is another way that we
can declare scopes in JavaScript and

41
00:03:02.154 --> 00:03:05.544
it's using our friends the curly braces.

42
00:03:05.544 --> 00:03:10.094
And so, in JavaScript there is
a difference between var and

43
00:03:10.094 --> 00:03:16.278
let when it comes to how they
behave within blocks So,

44
00:03:16.278 --> 00:03:23.770
for example, when I say new variable
equals more mess here inside of a block,

45
00:03:23.770 --> 00:03:28.496
another thing with var is
that it doesn't really

46
00:03:28.496 --> 00:03:33.339
matter if you redeclare
the same variable over and

47
00:03:33.339 --> 00:03:37.626
over again whereas let works differently.

48
00:03:37.626 --> 00:03:44.236
So let's say I'm gonna do
a letvariable = original value and

49
00:03:44.236 --> 00:03:51.493
then within some curly braces I'm
gonna do let letvariable = new,

50
00:03:57.773 --> 00:03:59.777
Let behaves differently.

51
00:03:59.777 --> 00:04:04.512
So, what happened here is
that inside of the curly

52
00:04:04.512 --> 00:04:09.697
braces I created a new scope
as far as let is concerned,

53
00:04:09.697 --> 00:04:12.992
but not as far as var is concerned.

54
00:04:12.992 --> 00:04:17.631
So that is one difference between var and
let.

55
00:04:17.631 --> 00:04:22.173
And const also has what is called
block scoping like let does.

56
00:04:22.173 --> 00:04:26.390
But because we're not usually
reassigning const variables where

57
00:04:26.390 --> 00:04:31.067
we can't ever reassign const variables,
it doesn't trip us up as much.

58
00:04:31.067 --> 00:04:35.359
But with let because we can reassign, let,

59
00:04:35.359 --> 00:04:39.651
within a block scope and
get a new variable,

60
00:04:39.651 --> 00:04:45.103
it's essentially,
let's go back to our whiteboard,

61
00:04:45.103 --> 00:04:51.019
it's essentially the same thing
as in our planets example,

62
00:04:51.019 --> 00:04:55.085
were we had a global, what did we call it?

63
00:04:57.059 --> 00:05:03.468
Let variable that pointed to some
string original, I think we called it,

64
00:05:07.605 --> 00:05:12.811
And then when we created our curly
braces that gave us a new scope,

65
00:05:12.811 --> 00:05:17.449
that's called a block scope
that doesn't have a name, or

66
00:05:17.449 --> 00:05:22.276
anything, just it was curly braces,
and in there we created

67
00:05:22.276 --> 00:05:27.224
a different let variable,
which pointed to something else,

68
00:05:30.124 --> 00:05:35.093
The same way that we had our planets
in our function scope before.

69
00:05:35.093 --> 00:05:38.832
So now we have two different
variables in two different scopes.

70
00:05:38.832 --> 00:05:43.293
And so when we asked for the value outside
of the curly braces, when we asked for

71
00:05:43.293 --> 00:05:45.523
let variable JavaScript said, okay,

72
00:05:45.523 --> 00:05:50.137
I found this let variable in my global
scope following the arrow original value.

73
00:05:50.137 --> 00:05:56.587
With var when I had the var variable out
here, I can't remember what we called it,

74
00:05:56.587 --> 00:06:01.076
and it was pointing to something,
let's say original,

75
00:06:01.076 --> 00:06:05.937
inside of the blocks even though
I use that var keyword again,

76
00:06:05.937 --> 00:06:08.682
we didn't create a new variable.

77
00:06:08.682 --> 00:06:13.477
Instead what we did is we looked up
the old var variable in the outer scope.

78
00:06:13.477 --> 00:06:21.940
We gave it a new arrow
Pointing to a new value.

79
00:06:21.940 --> 00:06:26.527
And we actually change the value of
the variable in the global scope.

80
00:06:26.527 --> 00:06:28.792
So with respect to functions var and

81
00:06:28.792 --> 00:06:34.085
let work pretty similarly in terms of they
both behave with the new function scope.

82
00:06:34.085 --> 00:06:38.179
But with respect to block
scope in the curly braces,

83
00:06:38.179 --> 00:06:43.761
which is gonna come up a little bit
later when we have things like loops,

84
00:06:43.761 --> 00:06:49.065
for example, or IF statements,
which we're gonna look at later,

85
00:06:49.065 --> 00:06:54.276
in those cases the behavior of let and
var variables is different,

86
00:06:54.276 --> 00:06:57.195
they have different scoping rules.

87
00:06:57.195 --> 00:07:01.796
So, there might be some case in
the future in your JavaScript adventures,

88
00:07:01.796 --> 00:07:04.069
where you're, no, you know what?

89
00:07:04.069 --> 00:07:07.129
I really do want a var variable here,

90
00:07:07.129 --> 00:07:12.875
because I want that lack of block
scoping that var variables give me.

91
00:07:12.875 --> 00:07:16.078
But I think the chances of that
happening are pretty slim.

92
00:07:16.078 --> 00:07:19.981
And the chances of, oops, wait,
what do you mean it's actually didn't

93
00:07:19.981 --> 00:07:23.725
declare a new variable inside the block
it actually used the old variable.

94
00:07:23.725 --> 00:07:27.329
And, no, now, my value has changed
I didn't expect it to change,

95
00:07:27.329 --> 00:07:30.537
that chances of that happening
are way higher in my experience.

96
00:07:30.537 --> 00:07:35.091
So that's why in general,
I've been saying, think about let and

97
00:07:35.091 --> 00:07:38.196
const as being the way
to declare variables.

98
00:07:38.196 --> 00:07:42.940
And var as being like an archaic
JavaScript fact of history that you might

99
00:07:42.940 --> 00:07:47.451
see around sometimes like markings
carved into the wall of a cave that

100
00:07:47.451 --> 00:07:50.513
behaves differently in certain situations.

