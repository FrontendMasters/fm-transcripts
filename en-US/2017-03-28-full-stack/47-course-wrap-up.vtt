WEBVTT

1
00:00:00.390 --> 00:00:02.500
&gt;&gt; Jem: Yeah, that's it.

2
00:00:02.500 --> 00:00:05.730
Everybody now understands
how the Internet works.

3
00:00:05.730 --> 00:00:10.330
You have set up a domain, you've pointed
to a server, you set up that server,

4
00:00:10.330 --> 00:00:11.450
you set up a node server.

5
00:00:11.450 --> 00:00:15.200
You built a deploy system so that you can
push things to it from your Git repo;

6
00:00:15.200 --> 00:00:20.680
if you want to make your own repo and
just that node app will stay up forever.

7
00:00:20.680 --> 00:00:24.135
And it's just easier than to keep
rebuilding it every single time.

8
00:00:24.135 --> 00:00:24.641
Good work everybody.

9
00:00:24.641 --> 00:00:26.276
You did it.
&gt;&gt; Speaker 2: So

10
00:00:26.276 --> 00:00:32.700
aren't the standards around HDV2 and like
performance and all this kind of stuff.

11
00:00:32.700 --> 00:00:37.218
Isn't that really evolving right now,
because I feel like I don't,

12
00:00:37.218 --> 00:00:41.134
I hear like conflicting things
like bundling your scripts.

13
00:00:41.134 --> 00:00:46.032
You don't need to do that anymore or
just different performance stuff.

14
00:00:46.032 --> 00:00:48.567
How do you start about that?
&gt;&gt; Jem: So let me find,

15
00:00:48.567 --> 00:00:54.060
I'll show a demo which will
probably help a little bit better.

16
00:00:54.060 --> 00:00:58.272
It was a, what was it called?

17
00:00:58.272 --> 00:01:03.020
2 demo, Akamai.

18
00:01:07.370 --> 00:01:10.740
So Akamai has an excellent
example of why we use HTTP2.

19
00:01:12.570 --> 00:01:19.160
So the power of HTTP2 is that it can
process requests kind of in parallel.

20
00:01:19.160 --> 00:01:21.480
HTTP1 does one, then one,
then one, then one.

21
00:01:22.530 --> 00:01:24.040
HTTP2 does it in parallel.

22
00:01:24.040 --> 00:01:25.514
So the benefit of that is,

23
00:01:25.514 --> 00:01:29.876
it's actually faster not to bundle all
your scripts together into one file.

24
00:01:29.876 --> 00:01:31.714
Because in that case,
it's only one connection.

25
00:01:31.714 --> 00:01:34.638
Whereas we serve, say,
four different scripts,

26
00:01:34.638 --> 00:01:37.970
HTTP2 can pull them all
in at the same time.

27
00:01:37.970 --> 00:01:40.680
But as Mark was saying,
there is an overhead to doing that.

28
00:01:40.680 --> 00:01:44.830
It costs a certain amount of processing
time and RAM to make all these requests.

29
00:01:44.830 --> 00:01:48.437
So with HTTP2, you don't necessarily
wanna bundle it all together,

30
00:01:48.437 --> 00:01:51.033
but you don't wanna have
50 different bundles.

31
00:01:51.033 --> 00:01:55.836
That's gonna be very expensive.
&gt;&gt; Speaker 3: How would you be

32
00:01:55.836 --> 00:01:58.840
using HTTP2 versus HTTP1?

33
00:01:58.840 --> 00:02:02.090
Would all the websites using
HTTP2 start with HTTP2?

34
00:02:02.090 --> 00:02:03.662
&gt;&gt; Jem: No, great question,

35
00:02:03.662 --> 00:02:08.480
the easiest way to look at it,
is just open it up in Chrome Inspector.

36
00:02:08.480 --> 00:02:10.015
And we look at the Network tab,

37
00:02:10.015 --> 00:02:17.496
just refresh.
&gt;&gt; Jem: Scroll,

38
00:02:17.496 --> 00:02:22.190
I don't know why it just killed this,
close the console.

39
00:02:29.351 --> 00:02:30.154
&gt;&gt; Jem: That's weird,

40
00:02:30.154 --> 00:02:31.880
I don't know why it keeps closing.

41
00:02:34.200 --> 00:02:36.320
But in protocol it'll say HTTP2,

42
00:02:36.320 --> 00:02:39.900
and it lets you know that
you're on a HTTP2 connection.

43
00:02:41.460 --> 00:02:45.470
Let's see if I can look at
my own server configuration,

44
00:02:45.470 --> 00:02:50.530
I wanna say I have HTTP2 set up, maybe.
&gt;&gt; Speaker 3: So now as our next question,

45
00:02:50.530 --> 00:02:53.380
is there something that we can do to
make sure that we're using an HTTP2

46
00:02:53.380 --> 00:02:57.170
connection versus HTTP1?
&gt;&gt; Jem: So we can.

47
00:02:57.170 --> 00:03:01.128
In,
&gt;&gt; Jem: I guess I didn't do it for

48
00:03:01.128 --> 00:03:02.160
my own website yet.

49
00:03:02.160 --> 00:03:06.648
But in the server config for
your NGINX instead of using SSL,

50
00:03:06.648 --> 00:03:08.673
it's a little different.

51
00:03:08.673 --> 00:03:11.597
But you just put HTTP2 and it's now HTTP2.
&gt;&gt; Speaker 3: Just automatically?

52
00:03:11.597 --> 00:03:13.380
&gt;&gt; Jem: That's it.

53
00:03:13.380 --> 00:03:17.180
The only issue is at this point you need
to make sure node is using HTTP2 as well.

54
00:03:17.180 --> 00:03:20.370
Cuz remember, we're just tunneling
a connection through NGINX to node.

55
00:03:20.370 --> 00:03:22.140
So node needs to use HTTP2,

56
00:03:22.140 --> 00:03:26.370
that's why I didn't want to go down that
path, cuz it's a little more involved.

57
00:03:26.370 --> 00:03:30.290
Just like setting up an SSL certificate
is a little more involved as well,

58
00:03:30.290 --> 00:03:31.480
to do it properly.

59
00:03:31.480 --> 00:03:33.570
And that's more of an advanced class.

60
00:03:33.570 --> 00:03:36.254
But hopefully now you guys
have the tools to go out and

61
00:03:36.254 --> 00:03:38.340
do this yourselves if you wanted to.

62
00:03:38.340 --> 00:03:40.409
And I'm always around by
email if you run into issues.

63
00:03:41.430 --> 00:03:42.450
&gt;&gt; Speaker 3: In the index HTML,

64
00:03:42.450 --> 00:03:47.690
could you just throw in a link
to pull in the style sheet?

65
00:03:47.690 --> 00:03:50.420
Because I keep getting a 404 when
I check the network tab, and

66
00:03:50.420 --> 00:03:55.850
I wasn't sure if that was something
that maybe the app.js needs to serve up,

67
00:03:55.850 --> 00:03:58.810
or NGINX was.
&gt;&gt; Jem: That is a good point, let me.

68
00:04:00.360 --> 00:04:03.701
So yeah, just point to /static.

69
00:04:03.701 --> 00:04:06.823
CSS, and that's going to point
to your disk folder now, so

70
00:04:06.823 --> 00:04:08.269
it should serve properly.

71
00:04:08.269 --> 00:04:14.337
Good catch everybody.
&gt;&gt; Jem: And

72
00:04:14.337 --> 00:04:19.068
in our app, I'll make a few minor changes.

73
00:04:19.068 --> 00:04:23.080
In our app.json,
we need to add forever stopall.

74
00:04:24.430 --> 00:04:25.760
Before we start the app.

75
00:04:25.760 --> 00:04:28.860
So we're just gonna make sure all of our
forever processes before are killed.

76
00:04:30.700 --> 00:04:32.730
And I will post this up
later to GitHub just so

77
00:04:32.730 --> 00:04:35.140
everybody has a complete working demo.

78
00:04:35.140 --> 00:04:39.670
But for now, just add in your deploy
scripts, just add forever stopall,

79
00:04:39.670 --> 00:04:42.092
ampersand ampersand, the rest of it.

80
00:04:42.092 --> 00:04:46.559
Forever start app.js, etc, etc.
&gt;&gt; Speaker 2: And the app.js file.

81
00:04:46.559 --> 00:04:47.384
&gt;&gt; Jem: Exactly.

82
00:04:47.384 --> 00:04:53.889
And one more edit.
&gt;&gt; Jem: In

83
00:04:53.889 --> 00:04:57.700
our app.js file,
we just need to add this line in there.

84
00:05:00.130 --> 00:05:01.238
App use /static.

85
00:05:01.238 --> 00:05:03.130
And we're gonna serve from our

86
00:05:03.130 --> 00:05:08.125
dist folder.
&gt;&gt; Jem: So now we can take a look at our

87
00:05:08.125 --> 00:05:11.450
forever processes, just to make sure
we don't make the same mistakes.

88
00:05:11.450 --> 00:05:14.670
So if we say forever lists,
it'll tell us everything that's running.

89
00:05:14.670 --> 00:05:17.692
And there should only be one thing
running, and that's your current node app.

90
00:05:17.692 --> 00:05:19.725
So, we run, npm run deploy, now.

91
00:05:19.725 --> 00:05:25.850
It's gonna stop the current process and
then restart all of our processes.

92
00:05:25.850 --> 00:05:26.930
Which in this case is only one.

93
00:05:29.330 --> 00:05:30.500
See, npm run deploy.

94
00:05:31.700 --> 00:05:35.350
And we're just gonna
verify with forever list.

95
00:05:35.350 --> 00:05:35.930
What's up and running?

96
00:05:36.980 --> 00:05:41.750
And, only one thing.
&gt;&gt; Speaker 2: Then, you say you have many

97
00:05:41.750 --> 00:05:46.250
servers, would you run the deployment
from your laptop involving some SSH

98
00:05:46.250 --> 00:05:50.370
to deploy all different servers?
&gt;&gt; Jem: No, If I had many servers,

99
00:05:50.370 --> 00:05:54.150
there are tools that are much better for
deploying multiple servers.

100
00:05:54.150 --> 00:06:01.000
Ansable, Chef, Puppet, are all much
better tools for doing multiple servers.

101
00:06:01.000 --> 00:06:03.950
And actually bringing servers
online at the same time, and

102
00:06:03.950 --> 00:06:06.260
then taking them offline,
things like that.

103
00:06:06.260 --> 00:06:09.890
But if you're only doing one server
at a time, it's fine to SSH in.

104
00:06:09.890 --> 00:06:12.510
There's a tool called polysh,

105
00:06:12.510 --> 00:06:15.990
which means I can SSH into
multiple servers at the same time.

106
00:06:15.990 --> 00:06:19.220
And it'll actually copy my commands to
every single server, which actually,

107
00:06:19.220 --> 00:06:20.010
it's a pretty fun tool.

108
00:06:20.010 --> 00:06:21.913
Let me see if I have it installed.

109
00:06:21.913 --> 00:06:22.662
If I don't, I'm not gonna install it.

110
00:06:22.662 --> 00:06:25.650
Yeah, I don't have it installed.

111
00:06:25.650 --> 00:06:28.910
But polysh, if you have only
three servers, you can polysh and

112
00:06:28.910 --> 00:06:32.000
then edit every single
file simultaneously.

113
00:06:32.000 --> 00:06:37.630
It's pretty fun to do.
&gt;&gt; Speaker 2: Another question,

114
00:06:37.630 --> 00:06:41.470
so with what you've shown, you can serve
multiple websites on your NGINX server

115
00:06:41.470 --> 00:06:43.100
without putting them as sub domains.

116
00:06:44.100 --> 00:06:47.070
&gt;&gt; Jem: Right.
&gt;&gt; Speaker 2: Okay.

117
00:06:47.070 --> 00:06:48.490
You wanna just maybe explain?
&gt;&gt; Jem: Yeah,

118
00:06:48.490 --> 00:06:51.230
sorry, [LAUGH] whoever
asked that was correct.

119
00:06:51.230 --> 00:06:54.733
So let's see if there is,

120
00:06:54.733 --> 00:06:59.997
take a look at my other configuration.

121
00:06:59.997 --> 00:07:03.620
So this is my jemyoung.com
server configuration.

122
00:07:03.620 --> 00:07:05.734
Don't try to pull it up too much,
cuz it's fairly complicated.

123
00:07:05.734 --> 00:07:09.460
You can see I'm, NGINX has built
in proxying, things like that, so

124
00:07:09.460 --> 00:07:13.589
it can instantaneously serve things
rather than hitting an actual server.

125
00:07:13.589 --> 00:07:17.040
So in my case I'm using a Python
server instead of a node server.

126
00:07:17.040 --> 00:07:19.390
But the server name is important.

127
00:07:19.390 --> 00:07:24.598
So jemyoung.com and www.jemyoung.com
means that all requests to this

128
00:07:24.598 --> 00:07:29.974
particular IP are gonna hit this server
block because NGINX is listening for

129
00:07:29.974 --> 00:07:32.164
this particular domain name.

130
00:07:32.164 --> 00:07:33.747
But If we scroll down a bit.

131
00:07:33.747 --> 00:07:37.836
Let me see if I can find modblog.

132
00:07:41.608 --> 00:07:44.100
&gt;&gt; Jem: Port 80, I redirect.

133
00:07:44.100 --> 00:07:51.082
Yes, so here I have an entirely different
server in the same index integration blog.

134
00:07:51.082 --> 00:07:55.820
This time it's listening for
blog.jemyoung.com, and in this case,

135
00:07:55.820 --> 00:08:01.700
it's going to redirect to an SSL version,
but it's gonna redirect to a node server.

136
00:08:01.700 --> 00:08:04.250
So I'm running a Python server and
a node server.

137
00:08:04.250 --> 00:08:06.970
On the same,
in the same Nginx configuration.

138
00:08:06.970 --> 00:08:11.560
You actually run probably infinite,
maybe not infinite, but you can run many,

139
00:08:11.560 --> 00:08:12.930
many servers in one.
&gt;&gt; [INAUDIBLE]

140
00:08:12.930 --> 00:08:13.710
&gt;&gt; Jem: Yeah, close enough.

141
00:08:13.710 --> 00:08:18.490
You can run many, many types of
servers in one Nginx configuration.

142
00:08:18.490 --> 00:08:21.180
Generally not recommended,
but it's my server, so

143
00:08:21.180 --> 00:08:23.640
I don't necessarily follow best practices.

144
00:08:23.640 --> 00:08:27.344
But you generally for every server you
want a different Nginx configuration.

145
00:08:27.344 --> 00:08:29.496
It just makes it easier to reason it out.

146
00:08:29.496 --> 00:08:33.869
But, great questions.
&gt;&gt; Speaker 2: Can you give a quick

147
00:08:33.869 --> 00:08:36.682
overview of the how and why of HTTPS?
&gt;&gt; Jem: Yes,

148
00:08:36.682 --> 00:08:41.372
I wish we had time today to put that in,
but that's pretty advanced, so.

149
00:08:41.372 --> 00:08:45.491
Remember we talked about DNS,
how if someone changes the IP address of,

150
00:08:45.491 --> 00:08:50.030
let's say, jem.party to something else,
how would you know it's changed?

151
00:08:50.030 --> 00:08:51.280
Cuz your server doesn't show anything.

152
00:08:51.280 --> 00:08:53.110
It still shows jem.party.

153
00:08:53.110 --> 00:08:59.128
Well, HTTPS is a way of authenticating
who I am to the browser.

154
00:08:59.128 --> 00:09:03.959
So, in.
&gt;&gt; Jem: Let me just

155
00:09:03.959 --> 00:09:08.060
scroll up a bit.
&gt;&gt; Jem: So,

156
00:09:08.060 --> 00:09:10.911
on jemyoung.com, I'm listing on port 443.

157
00:09:10.911 --> 00:09:12.925
443 is the HTTPS server.

158
00:09:12.925 --> 00:09:15.560
Non-HTTPS is port 80.

159
00:09:15.560 --> 00:09:18.613
So, on this one, I'm listing HTTPS,
I have a bunch of cyphers,

160
00:09:18.613 --> 00:09:21.176
don't worry about any of this other stuff,
the keys.

161
00:09:21.176 --> 00:09:25.984
But just know that you're essentially
authenticating who you are.

162
00:09:25.984 --> 00:09:33.453
Think of, what's a good way of putting it.
&gt;&gt; Jem: The best

163
00:09:33.453 --> 00:09:37.900
way of putting it is there's something
called a certificate of authority.

164
00:09:37.900 --> 00:09:40.020
A certificate of authority says.

165
00:09:40.020 --> 00:09:41.070
It's kinda like the DMV.

166
00:09:41.070 --> 00:09:42.380
You go to the DMV to get a license.

167
00:09:42.380 --> 00:09:45.120
They say, well how do I know
you're actually Jem Young?

168
00:09:45.120 --> 00:09:48.410
You say, well I've got these papers
that show that I am who I say I am.

169
00:09:48.410 --> 00:09:49.300
They say, okay.

170
00:09:49.300 --> 00:09:51.500
They issue me a drivers license.

171
00:09:51.500 --> 00:09:53.920
So that's essentially what
a certificate of authority is.

172
00:09:53.920 --> 00:09:55.320
Think of it like the DMV.

173
00:09:55.320 --> 00:10:00.220
I do a bunch of handshakes, I send
a request to a certificate authority, and

174
00:10:00.220 --> 00:10:03.450
just says, I am who I say I am,
I own this domain.

175
00:10:03.450 --> 00:10:07.980
So I can handshake every time, and
when someone says, is this jemyoung.com?

176
00:10:07.980 --> 00:10:10.600
I just show them my driver's licence,
it says yes, this is,

177
00:10:10.600 --> 00:10:11.660
you are where you say you are.

178
00:10:11.660 --> 00:10:16.020
And that's kind of the simple
way of looking at HTTPS.

179
00:10:16.020 --> 00:10:17.020
And the why?

180
00:10:17.020 --> 00:10:18.690
Well, we learned DNS earlier,

181
00:10:18.690 --> 00:10:20.990
we learned it's important to
be where you say you are.

182
00:10:23.010 --> 00:10:25.770
Yeah.
That's kind of the how and why.

183
00:10:26.950 --> 00:10:30.860
We can save the how for
probably a more advanced class,

184
00:10:30.860 --> 00:10:33.330
it's a little bit more involved.

185
00:10:33.330 --> 00:10:35.751
But there's thing that's called acme-tin.

186
00:10:35.751 --> 00:10:37.695
It's probably the script I use for using,

187
00:10:37.695 --> 00:10:40.125
it's a wrapper on top
of the Let's Encrypt.

188
00:10:40.125 --> 00:10:43.716
So Let's Encrypt lets you make
a free HTTPS certificate.

189
00:10:43.716 --> 00:10:46.950
And acme-tiny's just a Python
wrapper on top of that.

190
00:10:46.950 --> 00:10:48.410
And it's a little bit of a setup,

191
00:10:48.410 --> 00:10:52.580
but it's worth it cuz you now
you have a nice lock icon.

192
00:10:52.580 --> 00:10:59.790
So, if I didn't expire, yeah,
I have a nice encrypted connection.

193
00:11:01.040 --> 00:11:04.423
Another benefit of HTTPS is
that everything's secure.

194
00:11:04.423 --> 00:11:07.697
So everything I send to the server,

195
00:11:07.697 --> 00:11:12.172
let's say I was making
a bunch of post requests,

196
00:11:12.172 --> 00:11:16.004
those are all encrypted using CLS, now.

197
00:11:16.004 --> 00:11:17.516
Actually, AES cipher.

198
00:11:17.516 --> 00:11:20.124
Yeah so it uses a, I'm sorry.

199
00:11:20.124 --> 00:11:27.730
Make that.
&gt;&gt; Jem: Much bigger.

200
00:11:27.730 --> 00:11:32.122
Max.
&gt;&gt; Jem: Let's take a look at

201
00:11:32.122 --> 00:11:32.730
the certificates.

202
00:11:34.980 --> 00:11:37.502
That's not very helpful, but we see,

203
00:11:37.502 --> 00:11:41.718
I can't zoom in on this window
unfortunately, this is OS level.

204
00:11:41.718 --> 00:11:47.181
But Let's Encrypt is the authority
that says I own jemyoung.com and

205
00:11:47.181 --> 00:11:49.453
this IP address is correct.

206
00:11:49.453 --> 00:11:52.118
And the bonus part is again,
just like an SSH tunnel,

207
00:11:52.118 --> 00:11:54.680
everything that I send down
the wire is encrypted.

208
00:11:54.680 --> 00:11:58.229
So, if someone's sniffing your traffic,
which is pretty easy to do.

209
00:11:58.229 --> 00:12:01.071
Let's say Mark wants to go
back to his hacker days and

210
00:12:01.071 --> 00:12:02.695
sniff all your credentials.

211
00:12:02.695 --> 00:12:06.654
Well, he can't do that with HTTPS because
it's all encrypted using an AES cipher,

212
00:12:06.654 --> 00:12:09.790
which is a very complex cipher,
to encrypt your code.

213
00:12:09.790 --> 00:12:13.750
And then, when it hits my server, because
I have the key, I can decrypt all that

214
00:12:13.750 --> 00:12:16.650
traffic, and I'm the only one in
the world that can decrypt that.

215
00:12:16.650 --> 00:12:19.410
Now, is HTTPS invulnerable to attacks?

216
00:12:19.410 --> 00:12:20.124
Well, no.

217
00:12:20.124 --> 00:12:23.291
Again, if someone really wants to get
your code, they're gonna get to it.

218
00:12:23.291 --> 00:12:26.256
Say, the NSA, or
something like that, but, for

219
00:12:26.256 --> 00:12:29.727
most commercial applications,
HTTPS is pretty secure.

220
00:12:29.727 --> 00:12:32.983
And you definitely,
definitely never shop on a website or

221
00:12:32.983 --> 00:12:36.450
put your credentials in to a site
that is not HTTPS encrypted.

222
00:12:36.450 --> 00:12:40.840
Cuz that just means your ISP,
the person that runs your router, your

223
00:12:40.840 --> 00:12:43.680
neighbor downstairs, they can sniff your
traffic and just pull out your credentials

224
00:12:43.680 --> 00:12:46.770
cuz it's all in plaintext, yeah?
&gt;&gt; Speaker 3: Yeah,

225
00:12:46.770 --> 00:12:52.690
there is a really interesting
project before each feedback.

226
00:12:52.690 --> 00:12:56.620
HTTPS was like mainstream.

227
00:12:56.620 --> 00:12:58.820
Or I should say it should've
been mainstream, but

228
00:12:58.820 --> 00:13:00.390
people weren't switching over.

229
00:13:00.390 --> 00:13:02.260
And it was like a plugin called Firesheep.

230
00:13:02.260 --> 00:13:03.470
Do you remember that?
&gt;&gt; Jem: Yes.

231
00:13:03.470 --> 00:13:04.053
Yeah.
&gt;&gt; Speaker 3: And so

232
00:13:04.053 --> 00:13:05.796
people would just install Firesheep.

233
00:13:05.796 --> 00:13:09.953
And then everybody in the room at
a conference would be like logging into

234
00:13:09.953 --> 00:13:11.488
Facebook without HTTPS.

235
00:13:11.488 --> 00:13:15.199
And they would just be like, got your
credentials, got your code key, got your,

236
00:13:15.199 --> 00:13:16.210
and all of this stuff.

237
00:13:16.210 --> 00:13:18.960
And it was just like yeah,
so never do anything.

238
00:13:18.960 --> 00:13:20.888
&gt;&gt; Jem: Let's see if I can.

239
00:13:20.888 --> 00:13:22.694
&gt;&gt; Speaker 3: Outside of HTTPS.

240
00:13:22.694 --> 00:13:26.152
I mean I could.
&gt;&gt; Jem: Let's see if I can sniff my

241
00:13:26.152 --> 00:13:26.780
traffic.

242
00:13:26.780 --> 00:13:31.800
Charles is a, it's a proxy for
modifying HTTP requests.

243
00:13:31.800 --> 00:13:33.440
I use it at work all the time.

244
00:13:35.120 --> 00:13:37.260
And, yes.

245
00:13:37.260 --> 00:13:39.930
That is what an encrypted
HTTPS connection looks like.

246
00:13:39.930 --> 00:13:41.210
It's just gibberish.

247
00:13:41.210 --> 00:13:42.615
Because it's all encrypted.

248
00:13:42.615 --> 00:13:46.212
Now, let's see if I can find
an unencrypted connection.

249
00:13:46.212 --> 00:13:51.476
Somewhere in here,
let's see if we go to maybe jem.party,

250
00:13:51.476 --> 00:13:59.474
that might show up.
&gt;&gt; Jem: Yeah,

251
00:13:59.474 --> 00:14:03.242
and see the entire response and
request is unencrypted, and I can read.

252
00:14:03.242 --> 00:14:03.746
&gt;&gt; Speaker 3: Yeah, so

253
00:14:03.746 --> 00:14:07.337
if you send your password, or
you send your credit card over the wire

254
00:14:07.337 --> 00:14:08.660
and-
&gt;&gt; Jem: Exactly.

255
00:14:08.660 --> 00:14:09.649
&gt;&gt; Speaker 3: You don't have HTTPS,

256
00:14:09.649 --> 00:14:12.110
it's just gonna look like that.
&gt;&gt; Jem: Exactly.

257
00:14:12.110 --> 00:14:14.220
&gt;&gt; Speaker 3: And anybody who is sniffing,

258
00:14:14.220 --> 00:14:17.775
and the thing is a lot of the times,
they're just logging the traffic.

259
00:14:17.775 --> 00:14:22.741
So your passwords or stuff are just
sitting in some random coffee shop's log

260
00:14:22.741 --> 00:14:26.176
or whatever.
&gt;&gt; Jem: It's [LAUGH] the equivalent

261
00:14:26.176 --> 00:14:28.051
of yelling across the Internet.

262
00:14:28.051 --> 00:14:31.807
Saying, hey my login's Jem123.

263
00:14:31.807 --> 00:14:33.260
If you don't use HTTPS.

264
00:14:33.260 --> 00:14:37.200
So I won't say it's
super trivial to set up.

265
00:14:37.200 --> 00:14:40.290
But at this level and the way everybody's
kind of flown through this class,

266
00:14:40.290 --> 00:14:43.110
everybody has the capabilities
now to set up HTTPS on their own.

267
00:14:43.110 --> 00:14:45.070
There are many, many tutorials.

268
00:14:45.070 --> 00:14:47.813
I recommend Let's Encrypt
because it's free, but

269
00:14:47.813 --> 00:14:52.450
I'm pretty sure Namesheep has their
own proprietary certificate authority.

270
00:14:52.450 --> 00:14:55.224
&gt;&gt; Speaker 3: It's getting easier.

271
00:14:55.224 --> 00:14:56.037
&gt;&gt; Speaker 2: Let's Encrypt's awesome.

272
00:14:56.037 --> 00:14:59.171
&gt;&gt; Speaker 3: With more and more services

273
00:14:59.171 --> 00:15:05.560
and more and more adoption to get set up.
&gt;&gt; Jem: Yeah,

274
00:15:05.560 --> 00:15:07.910
quick note on certificate authorities.

275
00:15:07.910 --> 00:15:08.960
They have to be trusted.

276
00:15:08.960 --> 00:15:14.250
So again, this requires
Let's Encrypt being entrusted that,

277
00:15:14.250 --> 00:15:16.713
yeah, this company is valid.

278
00:15:16.713 --> 00:15:18.210
There have been many instances,

279
00:15:18.210 --> 00:15:21.365
specifically some Chinese certificate
authorities that have been,

280
00:15:21.365 --> 00:15:23.830
their credentials have been
revoked by the internet.

281
00:15:23.830 --> 00:15:27.580
Because they're saying,
yeah, you're on google.com.

282
00:15:27.580 --> 00:15:28.447
Wink.

283
00:15:28.447 --> 00:15:29.991
And again, it's just a trust system.

284
00:15:29.991 --> 00:15:32.471
If you can't trust
the certificate authority,

285
00:15:32.471 --> 00:15:34.420
you can't trust the site you're on.

286
00:15:34.420 --> 00:15:37.320
Fortunately Google and
Mozilla are pretty aggressive about

287
00:15:37.320 --> 00:15:40.790
shutting down invalid certificate
authorities, but it is a danger, and

288
00:15:40.790 --> 00:15:42.350
it's a possible attack vector out there.

289
00:15:42.350 --> 00:15:43.530
And it's happened before.

290
00:15:43.530 --> 00:15:46.880
So you think you're on facebook.com, and
you're actually not on facebook.com.

291
00:15:46.880 --> 00:15:48.220
Even with the lock icon.

292
00:15:48.220 --> 00:15:51.650
So, nothing on the computer
is 100% secure.

293
00:15:53.120 --> 00:15:55.330
Hopefully that explains
a bit more about HTTPS.

294
00:15:56.810 --> 00:15:57.520
&gt;&gt; Speaker 2: This question,

295
00:15:57.520 --> 00:16:00.860
do you keep backups of your SSH keys,
like on a USB dongle or

296
00:16:00.860 --> 00:16:03.470
something?
&gt;&gt; Jem: Yes, I backup my,

297
00:16:03.470 --> 00:16:07.032
what do I back everything up to?

298
00:16:07.032 --> 00:16:13.055
It's one of the big
cloud backup providers.

299
00:16:13.055 --> 00:16:13.944
Box?

300
00:16:13.944 --> 00:16:15.541
What's that?
&gt;&gt; Speaker 2: Dropbox.

301
00:16:15.541 --> 00:16:16.591
&gt;&gt; Jem: No, not Dropbox,

302
00:16:16.591 --> 00:16:18.700
I do not use Dropbox to back up things.

303
00:16:18.700 --> 00:16:21.120
I forget the actual service,
it's on my home computer.

304
00:16:21.120 --> 00:16:22.179
It just runs in the background.

305
00:16:23.310 --> 00:16:23.930
And yes, thank you.

306
00:16:23.930 --> 00:16:29.220
I use Backblaze to automatically image,
not image, but it backs up all my folders.

307
00:16:29.220 --> 00:16:31.950
And I do keep a separate
copy of my private keys and

308
00:16:31.950 --> 00:16:36.450
public keys on a USB dongle,
disconnect it from my computer entirely.

309
00:16:36.450 --> 00:16:39.270
Because, again,
if you lose your user private key,

310
00:16:39.270 --> 00:16:41.430
you are locked out completely.

311
00:16:41.430 --> 00:16:44.834
But, great question.
&gt;&gt; Speaker 2: Can gzip and

312
00:16:44.834 --> 00:16:50.890
HTTPS coexist on nginx.
&gt;&gt; Jem: Yes, I believe you can do both.

313
00:16:50.890 --> 00:16:55.429
Now, the question is HTTP2 and
gzip, that's a good question.

314
00:16:55.429 --> 00:16:58.234
I believe you can still do both.

315
00:16:58.234 --> 00:17:04.054
But yeah, you can definitely do HTTPS and
gzip on nginx.

316
00:17:04.054 --> 00:17:07.369
For those who don't know gzip
is just a compression format for

317
00:17:07.369 --> 00:17:09.610
sending files on the internet.

318
00:17:09.610 --> 00:17:12.170
It's very, very well supported and

319
00:17:12.170 --> 00:17:17.054
by default I think gzip is on in nginx,
so you really don't turn it on.

320
00:17:17.054 --> 00:17:19.908
Let me make sure.

321
00:17:19.908 --> 00:17:21.225
We can take a look actually

322
00:17:39.001 --> 00:17:40.282
&gt;&gt; Jem: Maybe gzip is allowed by default.

323
00:17:49.263 --> 00:17:50.360
&gt;&gt; Jem: Might not be on by default.

324
00:17:50.360 --> 00:17:54.540
But the turn on gzip in nginx,
it's pretty easy.

325
00:17:56.730 --> 00:17:59.210
And I'm gonna Google how to do it cuz I
don't remember off the top of my head.

326
00:17:59.210 --> 00:18:03.900
But this is how I solve most of my
life's problems, by Googling it.

327
00:18:03.900 --> 00:18:11.207
Gzip, nginx.
&gt;&gt; Jem: And

328
00:18:11.207 --> 00:18:18.160
close this.
&gt;&gt; Jem: And DigitalOcean.

329
00:18:18.160 --> 00:18:19.655
I should've done another shoutout,

330
00:18:19.655 --> 00:18:23.249
DigitalOcean docs are phenomenal,
their tutorials.

331
00:18:24.610 --> 00:18:27.920
They really go step by step
they're much friendlier than

332
00:18:27.920 --> 00:18:28.860
most of the other tutorials.

333
00:18:28.860 --> 00:18:32.740
And honestly that's the one I use
if I'm confused about a topic.

334
00:18:32.740 --> 00:18:34.630
So for this one gzip.

335
00:18:35.830 --> 00:18:40.467
No, no,
this is way more complicated than I need.

336
00:18:40.467 --> 00:18:43.582
No, no.

337
00:18:43.582 --> 00:18:45.797
There we go.

338
00:18:45.797 --> 00:18:50.343
Start gzip on,
I knew it was something easy.

339
00:18:50.343 --> 00:18:52.575
So I was gonna run this.

340
00:19:03.566 --> 00:19:05.640
&gt;&gt; Jem: And let's pick a random spot.

341
00:19:05.640 --> 00:19:07.390
This is good enough.

342
00:19:07.390 --> 00:19:13.219
So, gzip, I believe it's just on,
or whatever.

343
00:19:13.219 --> 00:19:20.353
Yep.
&gt;&gt; Jem: And

344
00:19:20.353 --> 00:19:28.890
we'll restart nginx
&gt;&gt; Jem: And that's it.

345
00:19:28.890 --> 00:19:30.720
Let's turn on gzip and nginx.

346
00:19:30.720 --> 00:19:32.450
I'm surprised it's not on by default.

347
00:19:32.450 --> 00:19:33.030
I thought it was.

348
00:19:34.080 --> 00:19:37.010
Yeah, and now we can shave off
a few bytes off all of our

349
00:19:37.010 --> 00:19:41.470
requests.
&gt;&gt; Speaker 2: Another question.

350
00:19:41.470 --> 00:19:45.300
What he is saying is in that default
config file there is a note that says,

351
00:19:45.300 --> 00:19:48.570
you should disable gzip for SSL traffic.

352
00:19:48.570 --> 00:19:52.130
So he is asking, should I turn it on or

353
00:19:52.130 --> 00:19:55.270
not.
&gt;&gt; Speaker 3: You should not compress

354
00:19:55.270 --> 00:20:00.010
encrypted traffic That and
encrypt to compress traffic.

355
00:20:00.010 --> 00:20:01.740
Cuz it's like.
&gt;&gt; Jem: How would it know how

356
00:20:01.740 --> 00:20:02.370
to compress it?

357
00:20:02.370 --> 00:20:02.900
Yeah.
&gt;&gt; Speaker 2: No,

358
00:20:02.900 --> 00:20:07.150
it knows how to compress it,
it just might make it twice as long.

359
00:20:07.150 --> 00:20:09.050
&gt;&gt; Jem: Uncompressed as self traffic?

360
00:20:09.050 --> 00:20:11.270
&gt;&gt; Speaker 2: Yeah, because it's.

361
00:20:12.800 --> 00:20:17.050
If you encrypt a certain way,
then it expands the text.

362
00:20:17.050 --> 00:20:20.640
And if you compress that,
it might increase the compression.

363
00:20:20.640 --> 00:20:23.070
Now, the flat file for example.
&gt;&gt; Jem: That's true.

364
00:20:24.470 --> 00:20:26.600
Yes, I guess that's why it's not all by

365
00:20:26.600 --> 00:20:27.590
default anymore.
&gt;&gt; Speaker 2: Yeah.

366
00:20:27.590 --> 00:20:29.800
&gt;&gt; Jem: Because SSL is now the default for

367
00:20:29.800 --> 00:20:30.540
most browsers.
&gt;&gt; Speaker 2: Yeah.

368
00:20:30.540 --> 00:20:32.680
&gt;&gt; Jem: So, since we're not serving over

369
00:20:32.680 --> 00:20:38.400
SSL, we're okay to throw on gzip, but
again, we learn something every day.

370
00:20:38.400 --> 00:20:39.680
Again, I am no expert.

371
00:20:39.680 --> 00:20:41.390
I google just like the rest of you.

372
00:20:41.390 --> 00:20:42.843
I know a little something
about a little something.

373
00:20:42.843 --> 00:20:48.944
But, great tips.
&gt;&gt; Jem: Any other

374
00:20:48.944 --> 00:20:55.430
questions?
&gt;&gt; Speaker 3: Just a quick thing.

375
00:20:55.430 --> 00:20:57.150
So it's basically saying that even if you,

376
00:20:57.150 --> 00:21:01.200
well one it's saying that they recommend
you turn off the Droplet from the command

377
00:21:01.200 --> 00:21:03.910
line and not by the switch?
&gt;&gt; Jem: Really?

378
00:21:03.910 --> 00:21:05.280
&gt;&gt; Speaker 3: Yeah, and they also

379
00:21:05.280 --> 00:21:08.370
said that even though you turn it off,
you're still being billed for it.

380
00:21:08.370 --> 00:21:10.079
So then what's the point
in turning it off?

381
00:21:12.046 --> 00:21:14.381
&gt;&gt; Jem: That's true.

382
00:21:14.381 --> 00:21:17.160
I thought I read that they
don't bill you anymore.

383
00:21:17.160 --> 00:21:18.470
&gt;&gt; Speaker 3: I don't know.

384
00:21:18.470 --> 00:21:19.830
It's just the little pop-up
that came up for me,

385
00:21:19.830 --> 00:21:22.350
cuz they said that you
still are using up space.

386
00:21:22.350 --> 00:21:25.420
Cuz they're still charging
&gt;&gt; Speaker 2: For the droplets?

387
00:21:25.420 --> 00:21:27.000
I think they changed that now,

388
00:21:27.000 --> 00:21:30.390
even powered off you're getting charged.
&gt;&gt; Jem: Yeah, I thought

389
00:21:30.390 --> 00:21:33.210
they used to not charge you, but I think
they're charging you for the storage,

390
00:21:33.210 --> 00:21:35.010
not so much for the usage anymore.
&gt;&gt; Speaker 3: Okay

391
00:21:35.010 --> 00:21:36.420
&gt;&gt; Jem: The storage does cost

392
00:21:36.420 --> 00:21:39.260
a few dollars a month.
&gt;&gt; Speaker 2: It used to

393
00:21:39.260 --> 00:21:42.000
be you could spend a bunch,
then turn them off and you got no charges,

394
00:21:42.000 --> 00:21:44.660
but I think they did change something,
now there is a little charge still.

395
00:21:44.660 --> 00:21:45.830
You have to actually destroy them.

396
00:21:45.830 --> 00:21:49.680
Not to be not charged.
&gt;&gt; Jem: And I generally keep my server off

397
00:21:49.680 --> 00:21:53.720
if I don't need it just because there's
a lot more encrypting a server.

398
00:21:53.720 --> 00:21:57.444
I use on my personal server I
use a service, not a service,

399
00:21:57.444 --> 00:22:01.530
something called Fail2Ban
which is pretty popular.

400
00:22:01.530 --> 00:22:05.300
Fail2Ban means all those people attacking
my server, you have two tries to get

401
00:22:05.300 --> 00:22:08.860
a login right and
if not I ban your IP address for an hour.

402
00:22:08.860 --> 00:22:10.620
Actually, I have it set for day,
I'm pretty aggressive on it.

403
00:22:10.620 --> 00:22:15.630
And if you try it again within a certain
timeframe, you're banned for a year.

404
00:22:15.630 --> 00:22:19.020
Which is pretty strict, but
also means I can't mess with my logins.

405
00:22:19.020 --> 00:22:22.160
Cuz if I mess with my logins,
I can get locked out of my own server.

406
00:22:22.160 --> 00:22:24.226
That's why I VPN in and
then I would fix it.

407
00:22:24.226 --> 00:22:27.340
But, yeah,
I didn't wanna get into Fail2Ban,

408
00:22:27.340 --> 00:22:31.150
cuz that's a little bit more advanced
than the pretty basic class.

409
00:22:31.150 --> 00:22:35.380
But unless your server has Fail2Ban,
people are free to just keep trying and

410
00:22:35.380 --> 00:22:38.040
trying and trying and trying and
trying to break into your server.

411
00:22:38.040 --> 00:22:41.074
So it's something I recommend
if you're gonna [CROSSTALK].

412
00:22:41.074 --> 00:22:42.170
&gt;&gt; Speaker 3: The docs are pretty good.

413
00:22:42.170 --> 00:22:43.350
It's a pretty easy setup.

414
00:22:43.350 --> 00:22:44.900
But the docs are pretty good.
&gt;&gt; [INAUDIBLE]

415
00:22:44.900 --> 00:22:47.129
&gt;&gt; Jem: Yeah, and it's very commonly used.

416
00:22:48.510 --> 00:22:49.680
The docs are kind of old school.

417
00:22:49.680 --> 00:22:53.555
Let's see if I can, Fail2Ban.

418
00:23:00.035 --> 00:23:04.570
&gt;&gt; Jem: Yeah, it's.
&gt;&gt; Speaker 2: That's just

419
00:23:04.570 --> 00:23:06.670
Wikimedia?
&gt;&gt; Jem: Yeah.

420
00:23:06.670 --> 00:23:07.791
&gt;&gt; Speaker 3: Does DigitalOcean have

421
00:23:07.791 --> 00:23:11.594
a writeup on that?
&gt;&gt; Jem: That's a good question.

422
00:23:21.977 --> 00:23:23.272
&gt;&gt; Jem: Nice, DigitalOcean again,

423
00:23:23.272 --> 00:23:26.650
we really should get sponsored by
DigitalOcean, or I should get sponsored.

424
00:23:27.850 --> 00:23:29.170
All right, yeah.

425
00:23:29.170 --> 00:23:33.143
DigitalOcean has a tutorial on how
to setup Fail2Ban on Ubuntu 14.04.

426
00:23:33.143 --> 00:23:37.900
Which likely will work on Ubuntu 16,
but 14 is the,

427
00:23:37.900 --> 00:23:41.790
I believe it's the LTS version, which
means it's gonna be around for a while.

428
00:23:41.790 --> 00:23:44.625
Which is probably why most.
&gt;&gt; Speaker 2: Actually-

429
00:23:44.625 --> 00:23:46.429
16.04 is LTS as well.
&gt;&gt; Jem: Is it

430
00:23:46.429 --> 00:23:47.081
LTS?
&gt;&gt; Speaker 2: Yeah,

431
00:23:47.081 --> 00:23:47.805
yeah.
&gt;&gt; Jem: Okay.

432
00:23:47.805 --> 00:23:49.850
&gt;&gt; Speaker 2: The .04s are LTS.

433
00:23:49.850 --> 00:23:50.580
&gt;&gt; Jem: I did not know that.

434
00:23:51.840 --> 00:23:54.556
You are just killing it today, thank you.

435
00:23:54.556 --> 00:23:58.840
[LAUGH] All right, LCS just means
it's going to be well supported.

436
00:23:58.840 --> 00:24:02.880
So if you have a company that you're
processing credit card information or

437
00:24:02.880 --> 00:24:04.790
you have a real company
where you make real money.

438
00:24:04.790 --> 00:24:08.390
You want to use a stable version of
Ubuntu so you always want to use the LDS.

439
00:24:08.390 --> 00:24:12.640
The same with Node, Netflix would use
the LTS version of Node, as well.

440
00:24:12.640 --> 00:24:14.820
Which means we're not on the latest,
greatest, cutting edge, but

441
00:24:14.820 --> 00:24:16.160
we're on the most stable build.

442
00:24:17.540 --> 00:24:24.035
But this is great.
&gt;&gt; Jem: Yes,

443
00:24:24.035 --> 00:24:28.950
if you have a non toy site I
recommend installing Fail2Ban just to

444
00:24:28.950 --> 00:24:31.420
install Fail2Ban Configuration.

445
00:24:31.420 --> 00:24:35.047
I think the default
configuration is actually

446
00:24:35.047 --> 00:24:39.219
okay.
&gt;&gt; Jem: But yes.

447
00:24:50.843 --> 00:24:52.191
&gt;&gt; Jem: Any other questions?

448
00:24:55.689 --> 00:24:56.243
&gt;&gt; Jem: Nobody?

449
00:24:56.243 --> 00:24:58.330
All right, I didn't lose too many people.

450
00:24:58.330 --> 00:25:02.460
So I'm gonna push up
the updated code to the repo.

451
00:25:02.460 --> 00:25:03.560
The slides will up.

452
00:25:03.560 --> 00:25:05.640
I'll keep them perpetuity.

453
00:25:05.640 --> 00:25:06.840
And I'll update them,

454
00:25:06.840 --> 00:25:11.050
or maybe I'll throw in something
about Fail2Ban and further learnings.

455
00:25:11.050 --> 00:25:11.950
Where to go for SSL.

456
00:25:11.950 --> 00:25:13.085
How to set that up.

457
00:25:13.085 --> 00:25:18.010
Just so Jem.party is secured.

458
00:25:18.010 --> 00:25:20.405
Maybe I'll put a gif up there
next week when I get home.

459
00:25:25.848 --> 00:25:26.876
&gt;&gt; Jem: And

460
00:25:29.605 --> 00:25:30.780
&gt;&gt; Jem: Yeah, that's it.

461
00:25:30.780 --> 00:25:31.470
Thank you everyone.

462
00:25:31.470 --> 00:25:33.290
It's been an excellent class.

463
00:25:33.290 --> 00:25:34.900
The questions have been on point.

464
00:25:34.900 --> 00:25:37.810
And hopefully you kind of just

465
00:25:37.810 --> 00:25:43.170
dip your toes into the end of backend or
the full stack land.

466
00:25:43.170 --> 00:25:46.860
And you now feel comfortable at your
own job just stake in a server,

467
00:25:46.860 --> 00:25:50.980
telling a log file, you understand
what nginx is how to configure it.

468
00:25:50.980 --> 00:25:55.940
And you understand how to make an app
from literally from nothing to something.

469
00:25:57.090 --> 00:25:57.750
So thank you.

