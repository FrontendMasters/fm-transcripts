WEBVTT

1
00:00:00.260 --> 00:00:01.563
&gt;&gt; Jem: So last exercise.

2
00:00:01.563 --> 00:00:02.640
This is the last one.

3
00:00:02.640 --> 00:00:05.420
We're gonna put this all together, and

4
00:00:06.720 --> 00:00:11.330
have an entire deploy system,
and forever, and a gulp task.

5
00:00:11.330 --> 00:00:13.440
And it all points to your domain,
so you can edit freely, and

6
00:00:13.440 --> 00:00:15.850
then just run this task, and
it's gonna update for you automatically.

7
00:00:15.850 --> 00:00:19.750
It's gonna restart your server, so.
&gt;&gt; Speaker 2: Before we

8
00:00:19.750 --> 00:00:20.758
jump off here.
&gt;&gt; Jem: Yes.

9
00:00:20.758 --> 00:00:21.882
&gt;&gt; Speaker 2: Just noticing,

10
00:00:21.882 --> 00:00:25.690
what we're logging out
of that forever task is

11
00:00:25.690 --> 00:00:27.500
the standard output.
&gt;&gt; Jem: Yeah.

12
00:00:27.500 --> 00:00:29.264
&gt;&gt; Speaker 2: If the app.js writes

13
00:00:29.264 --> 00:00:33.840
the standard error,
is forever catching that?

14
00:00:33.840 --> 00:00:36.230
&gt;&gt; Jem: No, there's more advanced output.

15
00:00:36.230 --> 00:00:40.060
So we normally wanna do
forever-o to log output.

16
00:00:40.060 --> 00:00:44.080
There's a special log for error cases
as well, and that's a great point.

17
00:00:44.080 --> 00:00:47.310
But because this is pretty beginner, we're
just gonna keep the very basic level.

18
00:00:47.310 --> 00:00:49.826
I encourage everybody to
look up the forever docs,

19
00:00:49.826 --> 00:00:51.530
cuz they're much more advanced.

20
00:00:51.530 --> 00:00:55.627
We're gonna have a log for standard
output, a log for errors, a log for

21
00:00:55.627 --> 00:00:58.670
just what's happening in our Node app.

22
00:00:58.670 --> 00:01:00.540
But again, that's more advanced.

23
00:01:00.540 --> 00:01:05.610
But, as we learned, we wanna log all that
stuff independently cuz if it breaks,

24
00:01:05.610 --> 00:01:07.850
and it probably will break,
you wanna know why.

25
00:01:07.850 --> 00:01:08.490
Great question though.

26
00:01:09.730 --> 00:01:11.370
So we're gonna put this all together.

27
00:01:11.370 --> 00:01:13.310
There's numerous ways of doing this.

28
00:01:13.310 --> 00:01:15.230
We could have do a shell script.

29
00:01:15.230 --> 00:01:18.510
I prefer mpm scripts because
they're very straight forward.

30
00:01:18.510 --> 00:01:23.262
So in your package.json,
&gt;&gt; Jem: Don't worry,

31
00:01:23.262 --> 00:01:25.476
I'm gonna blow this up in a second.

32
00:01:25.476 --> 00:01:27.070
We're just gonna run,
we're just gonna script task.

33
00:01:27.070 --> 00:01:31.360
So when we run mpm run deploy,
it's gonna run gulp build and

34
00:01:31.360 --> 00:01:33.750
forever start, and all in one go.

35
00:01:36.050 --> 00:01:38.717
So I'll do that now.
&gt;&gt; Jem: So

36
00:01:38.717 --> 00:01:44.488
vi package.json.
&gt;&gt; Jem: Is

37
00:01:44.488 --> 00:01:48.124
that big enough?
&gt;&gt; Jem: And

38
00:01:48.124 --> 00:01:57.237
I'm just gonna delete that line.
&gt;&gt; Jem: And

39
00:01:57.237 --> 00:02:04.194
I'll just call this deploy.
&gt;&gt; Jem: So

40
00:02:04.194 --> 00:02:09.517
what we wanna do is we wanna run on gulp,
&gt;&gt; Jem: build

41
00:02:09.517 --> 00:02:13.547
I believe was the task name, yes.

42
00:02:13.547 --> 00:02:15.983
The &amp; just means whenever
gulp's done running,

43
00:02:15.983 --> 00:02:19.260
we're gonna run the next
command which is forever.

44
00:02:19.260 --> 00:02:23.889
So forever start app.js.
&gt;&gt; Speaker 2: So

45
00:02:23.889 --> 00:02:26.570
right now it says test,
we just deleted the test line and

46
00:02:26.570 --> 00:02:29.191
replaced with a deploy line?
&gt;&gt; Jem: Exactly, and

47
00:02:29.191 --> 00:02:33.234
we're logging as to forever and
forever.log.

48
00:02:46.319 --> 00:02:47.365
&gt;&gt; Jem: So now,

49
00:02:49.643 --> 00:02:51.673
&gt;&gt; Jem: I can run npm run,

50
00:02:51.673 --> 00:02:54.794
what did I call it, build?

51
00:02:54.794 --> 00:02:56.535
Or did I call it deploy?
&gt;&gt; Speaker 2: You called it deploy.

52
00:02:56.535 --> 00:02:58.156
&gt;&gt; Speaker 3: Is it gulp build?

53
00:02:58.156 --> 00:03:00.459
&gt;&gt; Jem: I called it deploy, right?

54
00:03:05.988 --> 00:03:09.110
&gt;&gt; Jem: And all said and done.

55
00:03:09.110 --> 00:03:13.080
So if you had a, yes?
&gt;&gt; Speaker 2: I was wondering,

56
00:03:13.080 --> 00:03:16.630
did we wired up so that the CSS and

57
00:03:16.630 --> 00:03:19.951
JS would be served by the-
&gt;&gt; Jem: I believe so,

58
00:03:19.951 --> 00:03:24.796
let me look at the index.html
&gt;&gt; Jem: I never

59
00:03:24.796 --> 00:03:28.209
did wire that up.
&gt;&gt; Speaker 2: And I don't think the config

60
00:03:28.209 --> 00:03:32.100
is gonna do it either.
&gt;&gt; Jem: No, it won't do it automatically.

61
00:03:32.100 --> 00:03:38.555
So in the index.html,
we just point to /dist/main.min.js,

62
00:03:38.555 --> 00:03:42.716
and our CSS file would be main.min.css.

63
00:03:42.716 --> 00:03:45.520
That would be how you wire it all up.

64
00:03:45.520 --> 00:03:46.200
Should add that in,

65
00:03:46.200 --> 00:03:49.566
but everybody's looking a little
bleary eyed at this point.

66
00:03:49.566 --> 00:03:52.507
But [LAUGH] thanks you are on point

67
00:03:52.507 --> 00:03:57.414
today.
&gt;&gt; Jem: Is

68
00:03:57.414 --> 00:04:01.410
there anything to be done about
DigitalOcean dropping idle terminals?

69
00:04:01.410 --> 00:04:05.790
Yes, that is configurable,
via whatever terminal you're using.

70
00:04:05.790 --> 00:04:09.260
So I'm using iTerm, and I have a set idle.

71
00:04:09.260 --> 00:04:14.200
So about every five seconds it just sends
keep alive connection to the server and so

72
00:04:14.200 --> 00:04:15.140
I stay connected all the time.

73
00:04:16.220 --> 00:04:17.597
But great question.
&gt;&gt; Speaker 2: So

74
00:04:17.597 --> 00:04:20.550
how did you run that once
you've added it to the package?

75
00:04:20.550 --> 00:04:23.265
&gt;&gt; Jem: You just run npm run

76
00:04:23.265 --> 00:04:24.659
deploy.
&gt;&gt; Speaker 2: Okay,

77
00:04:24.659 --> 00:04:26.840
cool.
&gt;&gt; Jem: And just runs.

78
00:04:32.769 --> 00:04:35.722
&gt;&gt; Jem: And so the earlier question, and

79
00:04:35.722 --> 00:04:40.687
I just wanna make sure
everybody gets everything down.

80
00:04:40.687 --> 00:04:44.662
This is the, let me see if I can find it.
&gt;&gt; Jem: I had it

81
00:04:44.662 --> 00:04:48.849
earlier.
&gt;&gt; Jem: So

82
00:04:48.849 --> 00:04:51.178
I remember the earlier question.

83
00:04:51.178 --> 00:04:55.044
It was why do we run things using
NGINX instead of using Node directly.

84
00:04:55.044 --> 00:04:58.410
Well on my jemyoung.com I'm
actually serving three websites.

85
00:04:58.410 --> 00:04:59.993
I'm serving magic8ball.co.

86
00:04:59.993 --> 00:05:04.073
I'm serving blog.jemyoung.com and
I'm serving jemyoung.com.

87
00:05:04.073 --> 00:05:07.494
But it's all running on the same server
and we could do that using NGINX.

88
00:05:07.494 --> 00:05:09.243
So my configuration for

89
00:05:09.243 --> 00:05:14.356
my magic8ball server just looks like that,
nothing special.

90
00:05:14.356 --> 00:05:18.986
But my configuration for
my main server, Grant,

91
00:05:18.986 --> 00:05:23.074
I'm using a SSL so
it's a bit more complex.

92
00:05:23.074 --> 00:05:24.359
Ignore all that, ignore all that.

93
00:05:26.820 --> 00:05:30.290
And here I'm using location blocks to
redirect everybody to the Google Docs.

94
00:05:32.910 --> 00:05:36.579
But that's why we're using NGINX, in
that we can just keep adding servers and

95
00:05:36.579 --> 00:05:39.037
servers and servers and
only using one main server.

96
00:05:39.037 --> 00:05:40.650
And that's the benefit.

