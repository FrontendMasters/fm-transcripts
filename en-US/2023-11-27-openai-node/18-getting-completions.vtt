WEBVTT

1
00:00:00.380 --> 00:00:04.173
And then from there we are going
to do our completions,

2
00:00:04.173 --> 00:00:08.800
which is very similar to the same
completions we have always done.

3
00:00:08.800 --> 00:00:13.417
There is really nothing like new here
other than the fact that we have this

4
00:00:13.417 --> 00:00:15.090
thing called functions.

5
00:00:15.090 --> 00:00:16.730
So, let's talk about that.

6
00:00:16.730 --> 00:00:21.414
So, const, what did I call it?

7
00:00:21.414 --> 00:00:22.120
Yeah, getCompletion.

8
00:00:22.120 --> 00:00:26.824
getCompletion, And

9
00:00:26.824 --> 00:00:32.453
this is gonna take in that message
that we'll use eventually,

10
00:00:32.453 --> 00:00:35.756
and then, what am I returning here?

11
00:00:35.756 --> 00:00:37.090
I was returning a response.

12
00:00:37.090 --> 00:00:40.365
I'll just say return openai.

13
00:00:40.365 --> 00:00:42.771
I'm sorry,

14
00:00:42.771 --> 00:00:51.970
openai.chat.completion.create like that.

15
00:00:51.970 --> 00:00:54.280
We do have to pick a specific model here.

16
00:00:54.280 --> 00:00:56.780
Not all models are equipped
with function calling.

17
00:00:58.530 --> 00:01:01.190
I think the one that I
picked here was turbo-0613.

18
00:01:01.190 --> 00:01:01.979
If you go look up.

19
00:01:03.509 --> 00:01:08.646
There are docs on function calling,
it says 4-0613 and 3.5,

20
00:01:08.646 --> 00:01:14.911
0613 have function calling capabilities
at the time of writing of this blog post.

21
00:01:14.911 --> 00:01:17.640
I think there's way more
now that have that, but

22
00:01:17.640 --> 00:01:19.580
I'm just gonna pick one of these.

23
00:01:19.580 --> 00:01:23.910
So I'll pick 3.5, 0631, I think everybody
should have access to that one.

24
00:01:23.910 --> 00:01:27.683
Four, you might have to be on
a premium plan, I'm not sure.

25
00:01:27.683 --> 00:01:33.985
So I'll pick that one, 3.5, 0613.

26
00:01:33.985 --> 00:01:34.983
&gt;&gt; Isn't that just one they introduced it?

27
00:01:34.983 --> 00:01:37.490
Shouldn't the newer
model still have it too?

28
00:01:37.490 --> 00:01:39.997
&gt;&gt; They did, yeah,
they introduced these models for

29
00:01:39.997 --> 00:01:42.749
the specifics of function calling,
yeah, 100%.

30
00:01:45.090 --> 00:01:49.905
Messages, there's just going to
be messages, nothing crazy there,

31
00:01:49.905 --> 00:01:51.360
and then functions.

32
00:01:51.360 --> 00:01:52.900
So this is where it's something new.

33
00:01:52.900 --> 00:01:55.050
So there's functions and
then there's function call.

34
00:01:55.050 --> 00:01:55.940
We'll talk about the two.

35
00:01:55.940 --> 00:01:57.170
For now, we're gonna do functions.

36
00:01:58.520 --> 00:02:03.420
Functions is just going to be
an array of objects that represent

37
00:02:03.420 --> 00:02:07.680
a schema in which there is
a function that GPT can call.

38
00:02:07.680 --> 00:02:14.460
This is just you describing
the capabilities of a function.

39
00:02:14.460 --> 00:02:20.270
So in this case, I'm teaching GPT like,
Hey, there's a function called calculate.

40
00:02:20.270 --> 00:02:21.920
Here's when you know you need to run it.

41
00:02:21.920 --> 00:02:26.868
You need to run this function if you
need to execute a math expression.

42
00:02:26.868 --> 00:02:28.540
Right, so let's do that.

43
00:02:28.540 --> 00:02:32.390
So I'll say name,
I'm gonna call it calculate.

44
00:02:33.610 --> 00:02:36.640
I'm calling it calculate because
it matches with this right here.

45
00:02:36.640 --> 00:02:38.405
It'll be a lot easier to
check that string and

46
00:02:38.405 --> 00:02:41.610
this object because they're the same
name but you can call whatever you want.

47
00:02:41.610 --> 00:02:43.233
It's easier to match that way.

48
00:02:43.233 --> 00:02:44.776
Alright, we got name, we got description.

49
00:02:44.776 --> 00:02:46.259
Description is important.

50
00:02:46.259 --> 00:02:47.970
These are like this is
you're gonna get this.

51
00:02:47.970 --> 00:02:52.400
This is the prompt that tells GPT if
it needs to run this function, so

52
00:02:52.400 --> 00:02:55.136
like describe what this function is for.

53
00:02:55.136 --> 00:02:57.888
So when GPT looks in its
bag of functions like,

54
00:02:57.888 --> 00:03:02.112
I need to do something You can like yeah
this one runs expressions I need to run

55
00:03:02.112 --> 00:03:05.901
an expression they asked me an expression
I need to run that function.

56
00:03:05.901 --> 00:03:12.344
So I'm gonna say run math,
expressions, right?

57
00:03:12.344 --> 00:03:17.688
Parameters are you
describing how you want GPT.

58
00:03:17.688 --> 00:03:20.937
Because when you've got to respond back
like here's the function I wanna run and

59
00:03:20.937 --> 00:03:22.702
here are the arguments you need to run it,
so

60
00:03:22.702 --> 00:03:25.951
I have to describe what those arguments
look like well my function takes an object

61
00:03:25.951 --> 00:03:27.751
with an expression that
should be a string.

62
00:03:27.751 --> 00:03:31.651
So that's what I'm gonna describe, so

63
00:03:31.651 --> 00:03:38.200
I'm gonna say parameters is a type
object and I can say properties,

64
00:03:40.569 --> 00:03:44.908
Right, and then for
this one is just expression like this.

65
00:03:44.908 --> 00:03:47.800
And then from there, that's an object
with a type and a description.

66
00:03:47.800 --> 00:03:48.990
This is also important too.

67
00:03:48.990 --> 00:03:52.770
So type is string for
obvious reasons, that's important.

68
00:03:52.770 --> 00:03:57.698
Description, this is you get
to get this is the prompt for

69
00:03:57.698 --> 00:04:00.889
this property, this is to tell GPT.

70
00:04:00.889 --> 00:04:02.662
How do you come up with this value?

71
00:04:02.662 --> 00:04:07.141
I think it could probably figure out
because I running a math expression.

72
00:04:07.141 --> 00:04:08.840
This is called expression.

73
00:04:08.840 --> 00:04:12.373
So, and this is a string so I probably
want you to give me an expression here,

74
00:04:12.373 --> 00:04:14.940
but you kind of wanna steer it right so
here I put.

75
00:04:14.940 --> 00:04:19.910
The math expression to evaluate,
like, and here's an example, right?

76
00:04:19.910 --> 00:04:24.760
So, like, I copied that, so
I could, like, there you go.

77
00:04:24.760 --> 00:04:31.010
The math expression to evaluate, like,
2 * 3 + 21 / 2 to the second power.

78
00:04:31.010 --> 00:04:31.860
I'm giving an example.

79
00:04:31.860 --> 00:04:34.859
I'm trying to, like, this is when you
would call this, and this is what.

80
00:04:36.000 --> 00:04:39.445
If you're going to call calculate, and
you're gonna pass me the expression

81
00:04:39.445 --> 00:04:43.150
property on this object, your expression
better looks something like this.

82
00:04:43.150 --> 00:04:44.820
This is what I expect it to look like.

83
00:04:44.820 --> 00:04:47.178
So I'm like guiding it right?

84
00:04:47.178 --> 00:04:48.270
Cool.
So we got that.

85
00:04:49.360 --> 00:04:55.700
The next thing I wanna do is here
you can say, where is it at?

86
00:04:55.700 --> 00:05:00.238
I think it's here, required?

87
00:05:00.238 --> 00:05:02.620
No, yeah, it is required.

88
00:05:02.620 --> 00:05:04.100
Yeah, it's in a parameter.

89
00:05:04.100 --> 00:05:06.941
Inside the parameters, I can say.

90
00:05:10.177 --> 00:05:16.404
Required like this, and I can say
the properties that are required.

91
00:05:16.404 --> 00:05:18.872
So in this case you when
you call this function,

92
00:05:18.872 --> 00:05:21.160
you have to pass the expression parameter.

93
00:05:21.160 --> 00:05:26.230
There's no alternative you have to never
call this function without this property.

94
00:05:26.230 --> 00:05:27.380
Otherwise, I cannot run this function.

95
00:05:27.380 --> 00:05:30.461
It's not it's not optional, right?

96
00:05:30.461 --> 00:05:37.570
So that's what required is, and then
of course we wanna put the temperature

97
00:05:37.570 --> 00:05:42.581
on zero because we need this
thing to do serious work.

98
00:05:42.581 --> 00:05:43.947
So put temperature on zero.

99
00:05:43.947 --> 00:05:45.850
And you can add as many
functions as you want.

100
00:05:46.920 --> 00:05:52.094
There's also another one called function
call and this is a way to force GPT,

101
00:05:52.094 --> 00:05:56.329
no matter what prompt they get,
to call this function by name.

102
00:05:57.550 --> 00:06:02.272
So in this case, if I were to put this,
it doesn't matter if the problem was like

103
00:06:02.272 --> 00:06:07.290
high, it has to call calculate and fit and
then calculate has to have an expression.

104
00:06:07.290 --> 00:06:09.970
So I don't know what it will put and
a temperate zone zero.

105
00:06:09.970 --> 00:06:12.470
So I really don't know what it would put,
we could try that out.

106
00:06:12.470 --> 00:06:14.360
But this is like forcing it.

107
00:06:14.360 --> 00:06:17.401
And this is actually a good hack to get
structured output from GPT is actually

108
00:06:17.401 --> 00:06:18.980
the best way to get structured output.

109
00:06:18.980 --> 00:06:21.980
So I use that to like,
because if you think about it,

110
00:06:21.980 --> 00:06:27.150
this forces GPT to always respond back
with structured output, and nothing else.

111
00:06:27.150 --> 00:06:29.536
So if you just need to get like
some structured output from GPT,

112
00:06:29.536 --> 00:06:32.237
you can do this hack, and then you just
never send back the results to GPT

113
00:06:32.237 --> 00:06:34.510
because you got back the structure
output that you want it.

114
00:06:34.510 --> 00:06:36.230
It's great for that.

115
00:06:36.230 --> 00:06:39.750
But that's,
that's like a some advanced hack.

116
00:06:39.750 --> 00:06:42.390
So cool.

117
00:06:42.390 --> 00:06:45.490
And then from there,
we just need to set up a loop.

118
00:06:47.010 --> 00:06:49.670
So we'll just say, you know, let response.

119
00:06:50.900 --> 00:06:53.880
And it will say, well, true.

120
00:06:53.880 --> 00:06:56.280
Don't blame me if your computer dies.

121
00:06:56.280 --> 00:06:58.040
I'm not responsible.

122
00:06:58.040 --> 00:07:03.283
And then we can say response,

123
00:07:03.283 --> 00:07:10.836
equals await, getCompletion like this,

124
00:07:10.836 --> 00:07:15.678
with the messages, cool.

125
00:07:15.678 --> 00:07:17.307
What you talking about?

126
00:07:17.307 --> 00:07:18.122
Why is that?

127
00:07:18.122 --> 00:07:19.076
&gt;&gt; The equal sign?

128
00:07:19.076 --> 00:07:21.320
&gt;&gt; Yeah, I'm like, whoa, there we go.

129
00:07:21.320 --> 00:07:23.700
I'm tripping out okay, there we go.

130
00:07:23.700 --> 00:07:28.344
And then from here what we need to
do is we can look at this property

131
00:07:28.344 --> 00:07:30.070
called finish reason.

132
00:07:30.070 --> 00:07:32.140
I talked about this earlier.

133
00:07:32.140 --> 00:07:36.459
GPT is done when it's finished reason to
stop just because it responded back on I

134
00:07:36.459 --> 00:07:37.780
mean, it's done.

135
00:07:37.780 --> 00:07:39.670
It might be in the middle
of a function call.

136
00:07:39.670 --> 00:07:41.888
It might be in the middle
of still generating but

137
00:07:41.888 --> 00:07:44.880
it stopped halfway through
because I ran out of tokens.

138
00:07:44.880 --> 00:07:47.790
It's only done when it says
my finish reason to stop.

139
00:07:47.790 --> 00:07:49.450
So that's when we'll break the loop.

140
00:07:49.450 --> 00:07:50.290
Right so we can do that.

141
00:07:50.290 --> 00:07:59.618
You can say, okay, cool if
response.choices0.finish_reason = stop,

142
00:07:59.618 --> 00:08:03.730
then we know we're done, right?

143
00:08:03.730 --> 00:08:07.380
And then from here,
they answered the question at this point.

144
00:08:07.380 --> 00:08:08.080
So let's log it.

145
00:08:08.080 --> 00:08:17.870
So log
response.choices[0].message.content.

146
00:08:17.870 --> 00:08:18.569
Let's log that you.

147
00:08:19.990 --> 00:08:22.240
And then we'll, we'll break this loop.

148
00:08:22.240 --> 00:08:23.110
We're done.

149
00:08:23.110 --> 00:08:26.100
That's our break case, okay?

150
00:08:26.100 --> 00:08:29.532
Otherwise, if they respond back
with a finished reason of, hey,

151
00:08:29.532 --> 00:08:33.170
I'm doing a function call, okay,
now we need to call that function.

152
00:08:33.170 --> 00:08:34.324
So let's do that.

153
00:08:34.324 --> 00:08:39.059
So elsif response.choices

154
00:08:39.059 --> 00:08:46.562
[0].message.function call, right?

155
00:08:46.562 --> 00:08:50.748
Or finish reason, I'm sorry, equals, or

156
00:08:50.748 --> 00:08:55.963
I guess it's not message,
it's just finish reason.

157
00:08:59.290 --> 00:09:03.170
Function underscore call, like that.

158
00:09:06.530 --> 00:09:09.560
Okay, come here.

159
00:09:09.560 --> 00:09:11.290
Thank you.

160
00:09:11.290 --> 00:09:13.894
So, if the fittest reason
is function call, as in,

161
00:09:13.894 --> 00:09:18.310
GPT is like, I need to actually make
a name, I need to make a function call.

162
00:09:18.310 --> 00:09:22.180
Based off the prompt that you gave me,
I need you to call a function for me.

163
00:09:22.180 --> 00:09:25.310
So what we need to do is just
get the name of that function,

164
00:09:25.310 --> 00:09:30.080
get the arguments of that function, go see
if we have a function with the same name.

165
00:09:30.080 --> 00:09:34.888
If so, parse those arguments,
call the function with those arguments,

166
00:09:34.888 --> 00:09:39.320
get the results of those functions,
and then pass it back up to GPT.

167
00:09:42.480 --> 00:09:45.053
I'll be passing that up just by
pushing to this message array,

168
00:09:45.053 --> 00:09:47.335
which then loops again, and
then it comes back up here,

169
00:09:47.335 --> 00:09:51.560
and it calls the completion again with new
messages, and then it'll run again, right?

170
00:09:51.560 --> 00:09:52.700
So let's do that.

171
00:09:52.700 --> 00:09:55.090
So let's get the function name,
and let's get the arguments.

172
00:09:55.090 --> 00:10:00.453
So function name = response.choices.

173
00:10:00.453 --> 00:10:03.710
I should have saved this in a variable,
honestly.

174
00:10:03.710 --> 00:10:08.502
I'm kinda regretting it now,
but I'm gonna stick

175
00:10:08.502 --> 00:10:13.186
to the script message.function-call.name,

176
00:10:13.186 --> 00:10:16.540
right, so that's the name there.

177
00:10:16.540 --> 00:10:23.243
And then the args are gonna be pretty
much that, which the arguments.

178
00:10:23.243 --> 00:10:24.871
So we got that.

179
00:10:28.026 --> 00:10:33.329
And then we find the one
that matches our function.

180
00:10:33.329 --> 00:10:34.240
So.

181
00:10:38.007 --> 00:10:44.876
FuncToCall = functions(fName)

182
00:10:46.341 --> 00:10:52.043
And then, arguments = JSON.parse,

183
00:10:52.043 --> 00:10:59.483
I guess I can't use arguments,
params, I guess.

184
00:11:01.468 --> 00:11:03.972
So we got to parse that because
it's gonna be a JSON string.

185
00:11:07.469 --> 00:11:09.035
And then let's actually call the function.

186
00:11:09.035 --> 00:11:17.177
So FuncToCall what the params boom.

187
00:11:17.177 --> 00:11:22.143
And from there like I said,
we got to add to the history,

188
00:11:22.143 --> 00:11:26.174
the results that the AI
responded back with.

189
00:11:26.174 --> 00:11:29.465
Remember the AI responded back with
a function call whose name is this whose

190
00:11:29.465 --> 00:11:30.640
argument is this?

191
00:11:30.640 --> 00:11:34.375
And then our answer to that function call,
which is also real function and

192
00:11:34.375 --> 00:11:37.580
the name of that function, but
then the string of fire result.

193
00:11:39.910 --> 00:11:40.630
So let's do that.

194
00:11:40.630 --> 00:11:45.516
So we'll say messages.push, role,

195
00:11:45.516 --> 00:11:50.698
assistant, content should be null, and

196
00:11:50.698 --> 00:11:55.890
then function underscore call, right?

197
00:11:55.890 --> 00:12:03.330
And then the name is function name and
then arguments are args.

198
00:12:07.132 --> 00:12:08.089
All right, so we added that.

199
00:12:08.089 --> 00:12:12.407
And then now our response,

200
00:12:12.407 --> 00:12:18.415
messages.push, role: 'user',

201
00:12:18.415 --> 00:12:23.695
name I'm sorry, role function.

202
00:12:23.695 --> 00:12:24.400
Yeah, sorry.

203
00:12:24.400 --> 00:12:25.610
I'm like, no, that doesn't make sense.

204
00:12:25.610 --> 00:12:28.451
Role function name is Fname, and

205
00:12:28.451 --> 00:12:34.148
then the content is gonna be
a stringified version of the results.

206
00:12:34.148 --> 00:12:40.090
So JSON.stringify result.

207
00:12:42.090 --> 00:12:43.760
Give me some results.

208
00:12:46.270 --> 00:12:47.870
Notice this result, never.

209
00:12:47.870 --> 00:12:51.070
Okay and
again this is gonna run on a loop right?

210
00:12:51.070 --> 00:12:54.480
So we push to this message
that comes back up here.

211
00:12:54.480 --> 00:12:56.823
It runs it again with
a new messages in it, and

212
00:12:56.823 --> 00:13:00.490
it should hit stop the second time and
respond back with an answer.

213
00:13:00.490 --> 00:13:03.673
So let's see how this works.

214
00:13:03.673 --> 00:13:08.024
So first things first,

215
00:13:08.024 --> 00:13:13.243
we can say node functions and

216
00:13:13.243 --> 00:13:18.463
then I'll say what is 10 *

217
00:13:18.463 --> 00:13:24.998
100 / 12 + 29 / 67 * 2.

218
00:13:24.998 --> 00:13:25.723
&gt;&gt; It's in quotes.

219
00:13:25.723 --> 00:13:30.801
&gt;&gt; I need quotes, I'm like,
whoa, that should have worked.

220
00:13:32.537 --> 00:13:33.613
There we go.

221
00:13:33.613 --> 00:13:37.980
Let's run that and math out of that.

222
00:13:37.980 --> 00:13:40.664
I must have imported that wrong.

223
00:13:40.664 --> 00:13:42.550
&gt;&gt; I think it's evaluates misspelled.

224
00:13:42.550 --> 00:13:44.361
&gt;&gt; Yeah, evalutate.

225
00:13:44.361 --> 00:13:49.621
&gt;&gt; You don't know how to evaluate [LAUGH]
&gt;&gt; I think you need to

226
00:13:49.621 --> 00:13:55.388
return the message in your get completion
function as well for the response.

227
00:13:55.388 --> 00:13:56.455
&gt;&gt; This?

228
00:13:56.455 --> 00:13:59.341
You are right there.

229
00:13:59.341 --> 00:14:01.340
&gt;&gt; Yeah evaluate.

230
00:14:01.340 --> 00:14:03.440
That's That's right.

231
00:14:05.210 --> 00:14:09.830
Look at a word so many times,
it is like doesn't look right.

232
00:14:09.830 --> 00:14:10.760
Okay, look, it looks like it ran.

233
00:14:10.760 --> 00:14:13.240
And we can test this out, right?

234
00:14:13.240 --> 00:14:15.319
Let's just log in here just to make sure.

235
00:14:17.498 --> 00:14:24.105
Hello, Yeah it ran that function, hello.

236
00:14:24.105 --> 00:14:26.493
You can see the result of it is this.

237
00:14:26.493 --> 00:14:30.139
So now if I ask you something
unrelated to this it should

238
00:14:30.139 --> 00:14:33.480
not run that function
because it didn't need to.

239
00:14:40.605 --> 00:14:43.846
Spooky, yeah, it didn't run that function.

240
00:14:43.846 --> 00:14:47.070
It didn't need to, because I didn't
ask it to like calculate something.

241
00:14:47.070 --> 00:14:48.860
So I didn't feel the need
to run that function.

242
00:14:48.860 --> 00:14:52.000
Succeed is pretty powerful.

243
00:14:52.000 --> 00:14:55.145
Or like, I don't know if people like
understand like the crazy stuff you could

244
00:14:55.145 --> 00:14:56.730
do with it like you can't do anything.

245
00:14:56.730 --> 00:14:59.810
And this function this is
an API call somewhere.

246
00:14:59.810 --> 00:15:01.610
This is a database call somewhere.

247
00:15:01.610 --> 00:15:06.415
I don't know, this is an insane thing.

