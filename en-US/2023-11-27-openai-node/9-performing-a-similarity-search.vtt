WEBVTT

1
00:00:00.110 --> 00:00:03.477
Okay, and
then let's create the search function.

2
00:00:03.477 --> 00:00:07.446
So search, it's gonna be async.

3
00:00:07.446 --> 00:00:11.053
It's gonna take in a query, like that.

4
00:00:11.053 --> 00:00:14.532
And then we can take an account.

5
00:00:14.532 --> 00:00:17.129
This is like,
how many results at most did you return?

6
00:00:17.129 --> 00:00:18.113
Let's default to 1.

7
00:00:22.097 --> 00:00:23.871
I don't know why I have
two equal signs here.

8
00:00:23.871 --> 00:00:24.764
That was weird.

9
00:00:24.764 --> 00:00:27.433
You have the count there.

10
00:00:27.433 --> 00:00:30.576
And then basically all we need
to do is create a store, and

11
00:00:30.576 --> 00:00:34.326
we're gonna run this function
here called the similaritySearch.

12
00:00:34.326 --> 00:00:41.077
So let's go back a second to,
let's go back to this right here.

13
00:00:41.077 --> 00:00:47.766
Okay, so a similarity search, again
that's like, okay, let's highlight this.

14
00:00:47.766 --> 00:00:49.257
That's a different language.

15
00:00:49.257 --> 00:00:50.888
All these are different languages?

16
00:00:54.486 --> 00:00:55.465
No, that's okay.

17
00:00:55.465 --> 00:00:56.185
Okay, I'm like what is this?

18
00:00:56.185 --> 00:00:59.946
Okay, so let's say the query was,
let me make that bigger.

19
00:01:04.085 --> 00:01:07.280
Let's say the query was, I don't know,

20
00:01:07.280 --> 00:01:11.948
trains, like, show me trains or
something like that.

21
00:01:11.948 --> 00:01:16.146
Or, okay, this result might come back
because it mentioned something about

22
00:01:16.146 --> 00:01:17.251
a railway, right?

23
00:01:17.251 --> 00:01:19.772
That's the semantics behind that.

24
00:01:19.772 --> 00:01:23.652
And, yeah, so in order to do that,

25
00:01:23.652 --> 00:01:30.638
I need to take the query that you are
sending and I need to throw it in here.

26
00:01:30.638 --> 00:01:33.021
I have to throw it in here, otherwise,

27
00:01:33.021 --> 00:01:35.925
I can't do math on how
close something is to it.

28
00:01:35.925 --> 00:01:40.305
So just like we are taking all these
documents and using this embeddings

29
00:01:40.305 --> 00:01:44.831
function to convert them to embeddings,
which are a list of vectors which

30
00:01:44.831 --> 00:01:49.294
are just an array of numbers, we have
to do the same thing with the query.

31
00:01:49.294 --> 00:01:53.452
The query also needs to be
converted to a list of numbers so

32
00:01:53.452 --> 00:01:57.264
we can throw it in the same
plot as these numbers, and

33
00:01:57.264 --> 00:02:01.701
compare them to see how close
they are to each other, right?

34
00:02:01.701 --> 00:02:04.316
So like, let's say that train lands here.

35
00:02:04.316 --> 00:02:09.887
Okay, if I had a train right here on
this mouse, this is really close to it.

36
00:02:09.887 --> 00:02:11.361
So let's return that, right?

37
00:02:11.361 --> 00:02:13.080
So that's how that works.

38
00:02:16.820 --> 00:02:18.254
Okay, so let's do that.

39
00:02:18.254 --> 00:02:24.032
So const store = await createStore()
This is gonna create our

40
00:02:24.032 --> 00:02:30.668
store which indexes our documents,
which creates embeddings for them.

41
00:02:30.668 --> 00:02:31.880
So now we have those.

42
00:02:31.880 --> 00:02:35.111
We have embeddings here, that's done.

43
00:02:35.111 --> 00:02:38.452
The next thing we need to do,
like I said, is this similaritySearch.

44
00:02:38.452 --> 00:02:45.183
There's many different algorithms that
calculates simulators very differently.

45
00:02:45.183 --> 00:02:49.774
I don't think I can even talk about
them all there, just beyond me.

46
00:02:49.774 --> 00:02:56.504
But one of the most popular ones
is the cosine similarity search.

47
00:02:56.504 --> 00:02:58.872
If you wanna read about that,
go read about it, but

48
00:02:58.872 --> 00:03:02.024
that's basically what this simulator
search is going to be doing.

49
00:03:02.024 --> 00:03:05.727
It's just doing math on these different
vectors and how close they are.

50
00:03:05.727 --> 00:03:07.489
So that's the search that we're gonna do.

51
00:03:07.489 --> 00:03:11.719
There's so many different types of them,
but I think that's what we get for

52
00:03:11.719 --> 00:03:13.915
free when we call a similaritySearch.

53
00:03:13.915 --> 00:03:21.214
So what we're gonna do is
return store.similaritySearch.

54
00:03:21.214 --> 00:03:24.915
We can actually even do
a similarity search with a score,

55
00:03:24.915 --> 00:03:29.402
which will return them ranked by how
relative they were to the query.

56
00:03:29.402 --> 00:03:34.282
So that's useful, so you can sort them on
your UI, like this is the one that's most

57
00:03:34.282 --> 00:03:37.717
likely versus not, so
you can do whatever you want there.

58
00:03:37.717 --> 00:03:39.581
We're just gonna do a similaritySearch.

59
00:03:39.581 --> 00:03:44.400
We're gonna pass in the query, And then,

60
00:03:44.400 --> 00:03:47.345
how many at most we want back?

61
00:03:47.345 --> 00:03:49.927
So what the similaritySearch is gonna do,

62
00:03:49.927 --> 00:03:54.961
it's gonna convert this query into an
embedding, just like this is an embedding.

63
00:03:54.961 --> 00:03:59.813
It's gonna perform that cosine
similarity search to see

64
00:03:59.813 --> 00:04:05.080
which one of these embeddings
are closest to this embedding.

65
00:04:05.080 --> 00:04:12.458
And it's going to return all the matching
documents that are closest to that.

66
00:04:12.458 --> 00:04:14.746
Does that make sense?

67
00:04:14.746 --> 00:04:16.100
Okay.

68
00:04:18.507 --> 00:04:23.506
Cool and then the last thing we need to
do is just search anything here, right?

69
00:04:23.506 --> 00:04:24.996
So let's try that.

70
00:04:24.996 --> 00:04:29.694
So I'll go on the next line,
and I'll say console.log.

71
00:04:29.694 --> 00:04:32.680
I'm going to await my search.

72
00:04:32.680 --> 00:04:35.421
And then let's search for something,
so we got some movies here.

73
00:04:35.421 --> 00:04:37.614
I want to,

74
00:04:39.341 --> 00:04:44.621
A movie that will make me

75
00:04:44.621 --> 00:04:49.906
feel like, I am crazy.

76
00:04:49.906 --> 00:04:53.251
[LAUGH] A movie that will make
me feel like I'm crazy, right?

77
00:04:53.251 --> 00:04:55.593
That's the type of movie I wanna find,
I'm in for that.

78
00:04:55.593 --> 00:04:58.504
Because actually I do movies
that make me feel like, okay,

79
00:04:58.504 --> 00:05:00.494
I doesn't like some of the best movies.

80
00:05:00.494 --> 00:05:02.724
So if this works, let's try to run it.

81
00:05:02.724 --> 00:05:08.035
So we'll say search, and you see,
I get back Shutter Island.

82
00:05:08.035 --> 00:05:13.204
Yeah, that movie is definitely gonna
make you feel absolutely insane, right?

83
00:05:13.204 --> 00:05:16.117
And you can see here's
the metadata associated with it,

84
00:05:16.117 --> 00:05:17.763
and here's the title, right?

85
00:05:17.763 --> 00:05:18.591
How did it know that?

86
00:05:18.591 --> 00:05:21.191
Well, I mean,
it says it's a mind bending plot.

87
00:05:21.191 --> 00:05:23.827
So yeah, that's probably gonna
make you feel crazy, right?

88
00:05:23.827 --> 00:05:26.339
So, let's try another one.

89
00:05:26.339 --> 00:05:28.343
I have Paw Patrol here, right?

90
00:05:28.343 --> 00:05:34.127
So if I wanna say something cute and

91
00:05:34.127 --> 00:05:37.124
fluffy, right?

92
00:05:37.124 --> 00:05:41.636
Something cute and fluffy, I don't think
I mentioned that anywhere in here.

93
00:05:41.636 --> 00:05:42.806
There's nothing cute and fluffy.

94
00:05:42.806 --> 00:05:47.682
I mean, there's no word of cute-
&gt;&gt; Little puppies.

95
00:05:47.682 --> 00:05:48.473
&gt;&gt; Anywhere, right?

96
00:05:48.473 --> 00:05:49.524
Just puppies, right?

97
00:05:49.524 --> 00:05:50.462
So let's see.

98
00:05:50.462 --> 00:05:53.343
I would imagine Paw Patrol is gonna come
out because all the other movies are like

99
00:05:53.343 --> 00:05:54.418
pretty intense in that list.

100
00:05:54.418 --> 00:05:57.736
Yeah, Paw Patrol does come back,
all right?

101
00:05:57.736 --> 00:05:59.274
That's pretty cool.

102
00:05:59.274 --> 00:06:03.194
You could not make something like this.

103
00:06:03.194 --> 00:06:05.822
I don't know,
just two years ago, this simple,

104
00:06:05.822 --> 00:06:08.145
it's just very simple
to be able to do that.

105
00:06:08.145 --> 00:06:13.421
And again, remember at its core,
we're just comparing numbers together.

106
00:06:13.421 --> 00:06:14.698
That's it.

107
00:06:14.698 --> 00:06:16.633
These things get turned into numbers.

108
00:06:16.633 --> 00:06:21.102
This query gets turned into numbers,
and we're seeing which group of numbers

109
00:06:21.102 --> 00:06:24.433
are closest to this group of
numbers when we plot them out.

110
00:06:28.542 --> 00:06:29.761
That's how that works, yes.

111
00:06:29.761 --> 00:06:32.576
&gt;&gt; And how does the count
factor into that result?

112
00:06:32.576 --> 00:06:35.615
&gt;&gt; Yeah, count just, yeah,
it's just like how many you want returned.

113
00:06:35.615 --> 00:06:39.572
So if I put three, I guess it's
gonna go try to find, I don't know,

114
00:06:39.572 --> 00:06:40.624
two more movies.

115
00:06:40.624 --> 00:06:43.448
I mean, it'll return all the movies, but

116
00:06:43.448 --> 00:06:46.907
it'll return them in order
of which is the closest.

117
00:06:46.907 --> 00:06:53.391
So if I put like 4, it'll give me a list
of the four closest movies, right?

118
00:06:53.391 --> 00:06:58.568
So I said, cute and fluffy, so
Paw Patrol was the strongest.

119
00:06:58.568 --> 00:07:03.647
Then stepbrothers, which is a funny movie,
then interstellar.

120
00:07:03.647 --> 00:07:04.768
Why did it say that?

121
00:07:04.768 --> 00:07:06.267
I don't know.

122
00:07:06.267 --> 00:07:07.205
And then Shutter Island.

123
00:07:07.205 --> 00:07:12.478
So yeah, I have something in here for
like, I'm like, how did it know?

124
00:07:12.478 --> 00:07:14.574
Because I guess this could
be like cute and fluffy,

125
00:07:14.574 --> 00:07:17.181
cuz if you've seen this movie is
like a brown family and stuff.

126
00:07:17.181 --> 00:07:18.117
I'm like, I didn't put that in there.

127
00:07:18.117 --> 00:07:21.097
So I was like, I got scared for
a little bit when they put that in there.

128
00:07:21.097 --> 00:07:24.013
But it doesn't mean that it's related,

129
00:07:24.013 --> 00:07:29.023
it's just like that's the third
closest one, it could be unrelated.

130
00:07:29.023 --> 00:07:31.724
But because I said give me
four it had to give me four.

131
00:07:31.724 --> 00:07:35.822
So even though it might be all the way
over there, that's the fourth closest one.

132
00:07:35.822 --> 00:07:38.541
So that's why I came back
&gt;&gt; Small dataset problems

133
00:07:38.541 --> 00:07:39.854
&gt;&gt; Small data set problems.

134
00:07:39.854 --> 00:07:41.642
Exactly, yeah.

135
00:07:41.642 --> 00:07:45.185
Cool, which is something you got
to like account for and like yeah,

136
00:07:45.185 --> 00:07:46.316
there's there's.

137
00:07:46.316 --> 00:07:49.055
So that' why I like doing
the one with a score.

138
00:07:49.055 --> 00:07:51.081
&gt;&gt; Yeah, the score would help that.

139
00:07:51.081 --> 00:07:55.971
&gt;&gt; Exactly,
you do like that swamp with a score here.

140
00:07:55.971 --> 00:07:59.051
You can filter out the ones that
don't have high enough score.

141
00:07:59.051 --> 00:08:00.798
You'd be like, you know what?

142
00:08:00.798 --> 00:08:06.325
If you might do like a delta, okay, grab
the score from the highest scoring one.

143
00:08:06.325 --> 00:08:11.290
And then anyone that is of delta
less than, some percentage or

144
00:08:11.290 --> 00:08:15.214
some value from the highest one,
exclude them.

145
00:08:15.214 --> 00:08:16.588
They're just too far.

146
00:08:16.588 --> 00:08:17.568
They're just way too far.

147
00:08:17.568 --> 00:08:20.887
So what is the difference between this and
the second one?

148
00:08:20.887 --> 00:08:24.349
Because you might go from here and then
you go here, and it's just like, okay,

149
00:08:24.349 --> 00:08:25.234
that's a big drop.

150
00:08:25.234 --> 00:08:25.891
Like, what is this?

151
00:08:25.891 --> 00:08:28.752
That's a whole point right there, right?

152
00:08:28.752 --> 00:08:32.903
This one from 77 to immediately 730.

153
00:08:32.903 --> 00:08:38.618
That tells me that like, this is nothing
like this one is such a big job.

154
00:08:38.618 --> 00:08:40.803
So I will probably just exclude these,

155
00:08:40.803 --> 00:08:44.059
cuz the difference between
these two is too high, right?

156
00:08:44.059 --> 00:08:48.006
There's a gap there,
so that's like one way.

157
00:08:48.006 --> 00:08:51.970
But it's like all these little things
that you have to do to account for that?

158
00:08:51.970 --> 00:08:58.708
I mean we did this and 59 lines of code,
if you just got rid of the movies,

159
00:08:58.708 --> 00:09:04.600
[LAUGH] it's just like two
functions it's just this that's it.

160
00:09:04.600 --> 00:09:09.338
That is insane to me that that's all
it took for me to be able to do this.

161
00:09:09.338 --> 00:09:10.129
So, yeah,

162
00:09:10.129 --> 00:09:15.678
I can't wait to see what people build when
everything just has all this stuff in it.

163
00:09:15.678 --> 00:09:18.210
So it's quite impressive.

