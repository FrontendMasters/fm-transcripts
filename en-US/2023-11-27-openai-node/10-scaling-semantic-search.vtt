WEBVTT

1
00:00:00.361 --> 00:00:05.229
Okay, let's talk about,
how do you deploy this?

2
00:00:05.229 --> 00:00:08.190
Okay, scaling semantic search,
couple things.

3
00:00:08.190 --> 00:00:10.095
So let's talk about the volume of data.

4
00:00:10.095 --> 00:00:14.861
So as you start to get more data
around what you need to index,

5
00:00:14.861 --> 00:00:19.445
handling that index just
becomes incredibly difficult.

6
00:00:19.445 --> 00:00:22.513
So right now, we had an array
of movies that we need to index.

7
00:00:22.513 --> 00:00:27.110
But what if the data which you need
to index is not static, it changes?

8
00:00:27.110 --> 00:00:31.385
So you have to keep creating indexes and
embeddings.

9
00:00:31.385 --> 00:00:34.920
And then how do you go back and
update data that was already turned

10
00:00:34.920 --> 00:00:38.271
into a vector because it got
updated in the original source?

11
00:00:38.271 --> 00:00:43.028
So keeping your vector database updated
with the fresh data also with new data,

12
00:00:43.028 --> 00:00:44.458
that's complicated.

13
00:00:44.458 --> 00:00:47.678
And then doing that at scale
when things need to move fast,

14
00:00:47.678 --> 00:00:51.422
how do you ensure that people
are querying against the latest data,

15
00:00:51.422 --> 00:00:54.789
cuz you have to account for
index times and things like that?

16
00:00:54.789 --> 00:00:58.054
Also, because you might
have more data to index,

17
00:00:58.054 --> 00:01:02.583
you run into things like rate limits
on the on the embedding API call.

18
00:01:02.583 --> 00:01:07.278
You run into all different scenarios
in which you have to consider because

19
00:01:07.278 --> 00:01:09.406
it might not work the first time.

20
00:01:09.406 --> 00:01:16.103
You also run into, if you think about it
like this, so I return back these results.

21
00:01:16.103 --> 00:01:20.230
These results don't have
that much stuff in them.

22
00:01:20.230 --> 00:01:25.837
But as, you add more, imagine this
page content had, I don't know,

23
00:01:25.837 --> 00:01:30.873
20,000 tokens in it, and
you want to return 6 of these,

24
00:01:30.873 --> 00:01:34.693
that's a lot to having to
deal with on a system.

25
00:01:34.693 --> 00:01:36.334
So you have to think about that.

26
00:01:36.334 --> 00:01:39.654
And when we talk about document QA,
you'll see that actually is a problem for

27
00:01:39.654 --> 00:01:40.740
the AI that it runs into.

28
00:01:40.740 --> 00:01:43.473
So got some problems there.

29
00:01:43.473 --> 00:01:46.296
The complexity of the queries.

30
00:01:46.296 --> 00:01:49.973
Sometimes the semantic search doesn't
work the way that you would think

31
00:01:49.973 --> 00:01:51.848
because a person can type anything.

32
00:01:51.848 --> 00:01:57.817
So I might ask something that has nothing
to do on which the index was built upon.

33
00:01:57.817 --> 00:01:59.925
So what do you get back?

34
00:01:59.925 --> 00:02:03.593
But if you made it in a way where it
always returns something because it's just

35
00:02:03.593 --> 00:02:04.954
finding the closest thing.

36
00:02:04.954 --> 00:02:08.057
So let's say it does find the closest
thing, but the closest thing is way over

37
00:02:08.057 --> 00:02:11.382
there because the query that someone
wrote, they're gonna get back a response.

38
00:02:11.382 --> 00:02:12.801
They're gonna be like,
what the hell is this?

39
00:02:12.801 --> 00:02:14.562
This is not what I was looking for.

40
00:02:14.562 --> 00:02:17.598
But that was the closest thing the index
had, so that's what you got back.

41
00:02:17.598 --> 00:02:19.635
So it makes it feel like
the search is broken.

42
00:02:19.635 --> 00:02:22.822
It's like this is literally,
I asked for dogs, and

43
00:02:22.822 --> 00:02:25.656
it returns something
about chocolate cakes.

44
00:02:25.656 --> 00:02:27.755
And you're like,
how is that the closest thing?

45
00:02:27.755 --> 00:02:28.404
Well, I don't know.

46
00:02:28.404 --> 00:02:30.702
Somehow it was based off
whatever query you wrote.

47
00:02:30.702 --> 00:02:34.332
You wrote, I don't know,
dogs that like treats.

48
00:02:34.332 --> 00:02:35.871
So it returned chocolate cakes.

49
00:02:35.871 --> 00:02:38.294
I don't know, it could have done anything.

50
00:02:38.294 --> 00:02:40.055
So it could feel broken.

51
00:02:42.240 --> 00:02:43.789
Consistency is a big thing.

52
00:02:43.789 --> 00:02:44.730
Computational cost.

53
00:02:44.730 --> 00:02:48.404
Yeah, having to embed, that costs money.

54
00:02:48.404 --> 00:02:51.189
And then all the problems
around embedding, like I said.

55
00:02:51.189 --> 00:02:54.780
And then having to make those
search queries, that costs money,

56
00:02:54.780 --> 00:02:56.357
all that stuff costs money.

57
00:02:56.357 --> 00:02:59.249
Storage overhead, I mean,
you're basically duplicating data, right?

58
00:02:59.249 --> 00:03:01.004
You're saving stuff in a vector database.

59
00:03:01.004 --> 00:03:05.434
You're also saving it in its source
in another database somewhere.

60
00:03:05.434 --> 00:03:08.619
You probably also have a cache somewhere,
like a Reddit,

61
00:03:08.619 --> 00:03:11.745
you have the same data in three or
four different places.

62
00:03:11.745 --> 00:03:17.797
Good luck, [LAUGH] and then, yeah,
trying to make retrieval faster.

63
00:03:17.797 --> 00:03:21.397
Right now, it was pretty fast, but
it normally is not gonna be that fast,

64
00:03:21.397 --> 00:03:22.746
because this is more data.

65
00:03:22.746 --> 00:03:27.546
There's more things to go through, there's
more embeddings in your database, so

66
00:03:27.546 --> 00:03:29.654
there's more vectors to consider.

67
00:03:29.654 --> 00:03:31.426
So it can go pretty slow, so

68
00:03:31.426 --> 00:03:35.522
you have to start thinking about,
how do I batch these things?

69
00:03:35.522 --> 00:03:39.692
And then scaling is always a concern
no matter what you're building.

70
00:03:39.692 --> 00:03:43.159
And then, yeah, so optimizing for
speed and accuracy.

71
00:03:43.159 --> 00:03:46.071
This is what most people
are trying to do right now.

72
00:03:46.071 --> 00:03:50.514
So they're trying to tune their things,
so fine tuning it on semantic things.

73
00:03:50.514 --> 00:03:54.838
So there's so many ways to do this.

74
00:03:54.838 --> 00:03:57.759
One of the ways you might do it
is a human and a loop approach,

75
00:03:57.759 --> 00:03:59.929
which is a type of reinforcement learning.

76
00:03:59.929 --> 00:04:02.284
You've probably done this on ChatGPT,
where it's like,

77
00:04:02.284 --> 00:04:04.887
if you get back a response,
you can put a thumbs up or thumbs down.

78
00:04:04.887 --> 00:04:08.083
That's reinforcement learning,
that's called human in a loop.

79
00:04:08.083 --> 00:04:11.789
There's a human involved that provides
some indication on whether or

80
00:04:11.789 --> 00:04:13.372
not this was the right thing.

81
00:04:13.372 --> 00:04:17.134
That correction then goes back into
the model, in which over time,

82
00:04:17.134 --> 00:04:18.526
it adjusts its weights.

83
00:04:18.526 --> 00:04:20.467
So therefore,
it's being tuned in real time.

84
00:04:20.467 --> 00:04:24.252
So that might be something you have to
do based off the results of your search

85
00:04:24.252 --> 00:04:26.488
like type in something, get back a result.

86
00:04:26.488 --> 00:04:28.032
Hey, was this the thing that you wanted?

87
00:04:28.032 --> 00:04:31.181
Or maybe you can imply that if they click
on the result, they type in something,

88
00:04:31.181 --> 00:04:32.638
you give them back a list of results.

89
00:04:32.638 --> 00:04:35.492
They click on the thing,
I guess that's the thing that they wanted,

90
00:04:35.492 --> 00:04:36.240
cool, thumbs up.

91
00:04:36.240 --> 00:04:38.759
Tell the model that that was right.

92
00:04:38.759 --> 00:04:42.142
Or they didn't click on something,
they type in something again, thumbs down,

93
00:04:42.142 --> 00:04:42.983
that didn't work.

94
00:04:42.983 --> 00:04:44.843
Or you manually ask them,
thumbs up, thumbs down.

95
00:04:44.843 --> 00:04:47.649
So that's one way to do
reinforcement learning.

96
00:04:47.649 --> 00:04:51.486
Yeah, there's a [LAUGH] lot of ways
to try to figure that out, and

97
00:04:51.486 --> 00:04:54.628
then take those learnings and
maybe even fine tune.

98
00:04:54.628 --> 00:04:59.823
If you realize that 90% of your searches
are about people trying to find a recipes,

99
00:04:59.823 --> 00:05:03.287
okay, fine tune your model on recipes and
go from there,

100
00:05:03.287 --> 00:05:05.828
and don't worry about the other 10%.

101
00:05:05.828 --> 00:05:07.403
So you got caching.

102
00:05:07.403 --> 00:05:10.342
Here's the feedback loop,
that's what I was talking about.

103
00:05:10.342 --> 00:05:11.696
Yeah, and then, of course, well,

104
00:05:11.696 --> 00:05:14.470
I guess you don't really have to worry
about this if you're using OpenAI.

105
00:05:14.470 --> 00:05:19.741
But if you have an open source model,
yeah, optimizing your bare metal GPUs and

106
00:05:19.741 --> 00:05:25.102
all the things around that, that's where
all your money is gonna go, for sure.

107
00:05:25.102 --> 00:05:29.402
But almost no one needs access to
GPUs right now unless you're building

108
00:05:29.402 --> 00:05:32.708
a foundational model or
you're training something.

109
00:05:32.708 --> 00:05:35.229
Unless you're a Stability AI or Anthropic,

110
00:05:35.229 --> 00:05:38.557
there are some startups out
there that need access to GPUs.

111
00:05:38.557 --> 00:05:43.020
But for the most part, people are just
using APIs like we're doing today.

112
00:05:43.020 --> 00:05:44.499
Cool, any questions on that?

113
00:05:48.650 --> 00:05:53.680
&gt;&gt; Are there are things to think about in
terms of if you have a broad data set,

114
00:05:53.680 --> 00:05:59.037
you wanna kind of filter that down to
certain aspects and build separate vector

115
00:05:59.037 --> 00:06:04.255
data stores based on the context of
the questions, or does that make sense?

116
00:06:04.255 --> 00:06:12.157
&gt;&gt; It does, so
a lot of vector stores have the concepts.

117
00:06:12.157 --> 00:06:14.961
They all call them something different,
but

118
00:06:14.961 --> 00:06:17.996
you can group indexes
based off certain things.

119
00:06:17.996 --> 00:06:24.143
Maybe it's a multi-tenet system, so
it's grouped based off customer IDs.

120
00:06:24.143 --> 00:06:27.342
Maybe it's grouped based
off of whatever you want.

121
00:06:27.342 --> 00:06:30.586
So you can group those indexes like that,
so that's one way.

122
00:06:30.586 --> 00:06:34.620
That way you're not creating the whole
database to find something specific.

123
00:06:34.620 --> 00:06:37.517
They have that.
And then I think they also have another

124
00:06:37.517 --> 00:06:41.453
level of grouping, but
it really depends on the database.

125
00:06:41.453 --> 00:06:44.874
And I don't know why I can't think
of the number one, let's find it.

126
00:06:44.874 --> 00:06:48.279
I'm just gonna type in vector database,
cuz I want you to see this, Pinecone.

127
00:06:48.279 --> 00:06:50.227
Wow, why can I not think of that?

128
00:06:50.227 --> 00:06:55.850
Insane, so Pinecone has, let's go see
if they talk about it here somewhere.

129
00:06:59.463 --> 00:07:02.637
Come on, show me the thing.

130
00:07:02.637 --> 00:07:06.247
Okay, do they have docs?

131
00:07:06.247 --> 00:07:08.903
Okay, here we go.

132
00:07:08.903 --> 00:07:12.011
They have the ability to do,

133
00:07:12.011 --> 00:07:17.844
let's go manage indexes,
to separate it like that.

134
00:07:17.844 --> 00:07:19.986
So let me see.

135
00:07:19.986 --> 00:07:22.647
So yeah, you can create an index,
you can give it a name.

136
00:07:22.647 --> 00:07:27.899
And then, Collections,
they call them collections.

137
00:07:27.899 --> 00:07:30.190
So you can have collections
within indexes,

138
00:07:30.190 --> 00:07:32.127
which you can separate even further.

139
00:07:32.127 --> 00:07:35.539
So an index might be for a customer, and
then for that customer, you might have

140
00:07:35.539 --> 00:07:39.057
different collections for different types
of data on what you need to search on,

141
00:07:39.057 --> 00:07:41.354
but every database is
different in how they do this.

142
00:07:41.354 --> 00:07:45.265
So that's just one example of it, yeah.

