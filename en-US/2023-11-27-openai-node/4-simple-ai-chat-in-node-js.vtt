WEBVTT

1
00:00:00.180 --> 00:00:02.909
All right, so, if you go to
the Simple chat UX section on here,

2
00:00:02.909 --> 00:00:04.880
I have most of the code here,
if not all of it.

3
00:00:04.880 --> 00:00:09.641
I think there's one part right here that I
guess I was going to put the code in here,

4
00:00:09.641 --> 00:00:11.170
but then I decided not to.

5
00:00:11.170 --> 00:00:12.360
I don't know, but we're still gonna do it.

6
00:00:12.360 --> 00:00:16.010
So you can follow along, but the best
thing is just to follow along with me.

7
00:00:16.010 --> 00:00:19.385
This is just here to reference
if you wanna catch up,

8
00:00:19.385 --> 00:00:24.000
also the repo is an exact replica of
everything that's in these notes.

9
00:00:24.000 --> 00:00:25.590
So you can look at that as well.

10
00:00:25.590 --> 00:00:29.185
But probably just follow along with me
because I'm probably gonna reference this.

11
00:00:29.185 --> 00:00:32.139
So I write it the exact way that I did so
there's no confusion, but

12
00:00:32.139 --> 00:00:33.410
I might get off track.

13
00:00:33.410 --> 00:00:34.890
I get off track a lot.

14
00:00:34.890 --> 00:00:36.645
So we will see.

15
00:00:36.645 --> 00:00:38.400
So let's do it.

16
00:00:38.400 --> 00:00:41.810
First thing I'm gonna do is,
I'm just gonna make another file.

17
00:00:41.810 --> 00:00:45.130
I'm just gonna call it chat.js.

18
00:00:45.130 --> 00:00:46.530
And I'm also gonna make another file.

19
00:00:46.530 --> 00:00:49.410
I'm just gonna call it openai.js.

20
00:00:49.410 --> 00:00:53.481
And I'm just going to move our
openai configuration in this file so

21
00:00:53.481 --> 00:00:56.180
we don't have to make
it every single time.

22
00:00:56.180 --> 00:00:59.930
I don't wanna make a new OpenAPI instance
every, we're gonna make a lot of examples.

23
00:00:59.930 --> 00:01:01.440
I just don't want to make
one every single time.

24
00:01:01.440 --> 00:01:03.520
So I'm just gonna make it once and
then we can export it.

25
00:01:03.520 --> 00:01:08.563
So I'm just gonna import dotenv here,
config,

26
00:01:08.563 --> 00:01:13.729
and then I'm going to
import OpenAI from openai,

27
00:01:13.729 --> 00:01:20.560
and I'm just gonna export const
openai = new OpenAI like this.

28
00:01:20.560 --> 00:01:21.180
There we go.

29
00:01:21.180 --> 00:01:25.332
So that way that's just there and
we don't have to make it every time.

30
00:01:30.558 --> 00:01:32.130
Okay, so inside of my chat,

31
00:01:32.130 --> 00:01:35.930
I'm just gonna import that openai
from the file that I just created.

32
00:01:37.780 --> 00:01:41.225
I also think because we're using type
modules you have to do the .js extension,

33
00:01:41.225 --> 00:01:42.400
otherwise it won't work.

34
00:01:43.590 --> 00:01:48.524
Pretty sure if you tried to import this
file without .js it'll break if type

35
00:01:48.524 --> 00:01:49.304
is module.

36
00:01:53.821 --> 00:01:54.613
Try and let me know.

37
00:01:54.613 --> 00:01:56.458
But I'm pretty sure at least
on this version of node,

38
00:01:56.458 --> 00:01:57.814
maybe they fixed it on other versions.

39
00:01:57.814 --> 00:02:00.839
On my version it will
break if you don't do .js.

40
00:02:00.839 --> 00:02:03.340
We also need to, wait,
no, it's built in now.

41
00:02:03.340 --> 00:02:06.300
I was gonna say we need
to install readline, but

42
00:02:06.300 --> 00:02:08.600
it's actually built into node now.

43
00:02:08.600 --> 00:02:12.030
So we can just import readline like this.

44
00:02:12.030 --> 00:02:18.190
So we say,
import readline from node:readline.

45
00:02:18.190 --> 00:02:21.089
Okay, if you're looking like,
what the hell is this,

46
00:02:21.089 --> 00:02:23.941
if you've never seen that before,
this is optional.

47
00:02:23.941 --> 00:02:25.600
This is something new in Node.

48
00:02:25.600 --> 00:02:27.756
This is basically saying, hey,

49
00:02:27.756 --> 00:02:32.220
I know that Node has some
internal package called readline.

50
00:02:32.220 --> 00:02:33.800
That's the one that I wanna import.

51
00:02:33.800 --> 00:02:36.982
And the reason this is great
is because there might be

52
00:02:36.982 --> 00:02:39.800
a package you installed called a readline.

53
00:02:39.800 --> 00:02:43.560
In fact, there was one, they had to
rename it because Node made one.

54
00:02:43.560 --> 00:02:47.593
So if there's an internal thing called
readline and there's also a package you

55
00:02:47.593 --> 00:02:50.860
have installed called readline,
which one is it gonna import?

56
00:02:53.540 --> 00:02:54.137
I don't know.

57
00:02:54.137 --> 00:02:56.389
So, yeah,
to get around that confusion you do that.

58
00:02:56.389 --> 00:02:59.026
So now it will always import
the one that's internal to node and

59
00:02:59.026 --> 00:03:00.931
not some third party
one that you installed.

60
00:03:00.931 --> 00:03:05.037
So you can actually put this node prefix
on every internal module that node has

61
00:03:05.037 --> 00:03:09.268
to force it to use that one versus trying
to figure out whether it's gotta import

62
00:03:09.268 --> 00:03:13.760
the one that's installed with
the same name or the internal one.

63
00:03:13.760 --> 00:03:18.434
Because some crazy person decided
to name their NPM package the same

64
00:03:18.434 --> 00:03:20.813
name as an internal node package.

65
00:03:20.813 --> 00:03:24.860
Could you imagine,
an NPM package called FS?

66
00:03:24.860 --> 00:03:25.970
Who would you do that?

67
00:03:25.970 --> 00:03:28.490
That's crazy, but people do it.

68
00:03:28.490 --> 00:03:32.073
So, all right, we got that.

69
00:03:32.073 --> 00:03:35.747
readline is just a way that allows
us to write text in our terminal and

70
00:03:35.747 --> 00:03:38.120
see text output, that's basically it.

71
00:03:38.120 --> 00:03:40.200
We're gonna use that.

72
00:03:40.200 --> 00:03:42.570
We already initialized this,
we're good to go.

73
00:03:42.570 --> 00:03:45.996
So now we just need to make
a new readline interface.

74
00:03:45.996 --> 00:03:51.151
So the way you can do that is I'm
just gonna say readline = create.

75
00:03:51.151 --> 00:03:56.520
Oops, readline.createInterface like this.

76
00:03:56.520 --> 00:04:00.673
And you can say input and
for the input, basically,

77
00:04:00.673 --> 00:04:05.370
we're gonna use process.stdin and
then stdout.

78
00:04:05.370 --> 00:04:11.440
This is just basically how a terminal
handles input and handles output.

79
00:04:11.440 --> 00:04:14.376
It's like a pipe through
which it can receive text and

80
00:04:14.376 --> 00:04:15.950
in which it can output text.

81
00:04:15.950 --> 00:04:20.126
We're basically binding that to
the inputs and outputs here.

82
00:04:20.126 --> 00:04:27.191
So input is stdin.

83
00:04:27.191 --> 00:04:28.691
Why did it bring that in like that?

84
00:04:28.691 --> 00:04:30.345
I didn't do process, that's right.

85
00:04:33.008 --> 00:04:39.528
Process .., and
then output, if I can type,

86
00:04:39.528 --> 00:04:44.425
is the process.stdout like that.

87
00:04:44.425 --> 00:04:46.288
So cool, now we have our interface.

88
00:04:48.921 --> 00:04:50.452
We can start making some chat stuff.

89
00:04:50.452 --> 00:04:54.462
So from there, what we wanna do is,

90
00:04:54.462 --> 00:04:59.543
I'm just gonna create
a helper function that

91
00:04:59.543 --> 00:05:06.510
wraps the call a call to the OpenAI API,
to make a new message.

92
00:05:06.510 --> 00:05:07.032
That way,

93
00:05:07.032 --> 00:05:10.700
we don't have to write this every single
time we want to make a new message.

94
00:05:10.700 --> 00:05:15.427
I'm just gonna create a wrapper around
that because that's annoying to write

95
00:05:15.427 --> 00:05:16.294
all the time.

96
00:05:16.294 --> 00:05:22.490
So newMessage, it takes a message, right?

97
00:05:22.490 --> 00:05:26.716
And then from here, we're just gonna say,
response or results,

98
00:05:26.716 --> 00:05:28.608
whatever you want to call it.

99
00:05:28.608 --> 00:05:33.683
This is gonna be async = await

100
00:05:33.683 --> 00:05:42.209
openai.chat.completions.create, right?

101
00:05:42.209 --> 00:05:46.860
Also, because we need to pass in
the entire history for everything,

102
00:05:46.860 --> 00:05:49.518
we're gonna take the history as well.

103
00:05:49.518 --> 00:05:56.851
So when we create this, we'll say model,
I'm still gonna use gpt-3.

104
00:05:56.851 --> 00:05:58.167
You can literally use whatever you want.

105
00:06:01.347 --> 00:06:05.326
And then I'm going to pass
in the messages here.

106
00:06:05.326 --> 00:06:09.129
The messages are gonna be a brand new
array of everything that came before, so

107
00:06:09.129 --> 00:06:10.600
the history.

108
00:06:10.600 --> 00:06:14.360
Plus your new message that
you passed in like this.

109
00:06:15.600 --> 00:06:19.370
New messages go on the end of the array,
not the beginning.

110
00:06:19.370 --> 00:06:21.614
You would not get the results
you wanted if you did that.

111
00:06:26.497 --> 00:06:28.680
All right, follow me so far?

112
00:06:28.680 --> 00:06:31.760
Okay, and then yeah,
we just wanna go ahead and

113
00:06:31.760 --> 00:06:34.390
just return the message object itself.

114
00:06:34.390 --> 00:06:36.255
So that's what I'll do.

115
00:06:36.255 --> 00:06:46.207
I'll say return
results.choices.[0].message.

116
00:06:51.566 --> 00:06:54.369
So basically the same thing
we did in the index file,

117
00:06:54.369 --> 00:06:57.210
nothing different here at this point.

118
00:06:57.210 --> 00:07:00.160
But the next thing we need to
do is we need to create like

119
00:07:00.160 --> 00:07:03.916
a loop that runs constantly so
we can keep having the conversation.

120
00:07:03.916 --> 00:07:07.536
Whereas before on our previous example,
we'd ask a question and it will stop,

121
00:07:07.536 --> 00:07:08.626
the process will stop.

122
00:07:08.626 --> 00:07:10.438
But we want it to keep going so

123
00:07:10.438 --> 00:07:14.679
we can keep the memory alive and
we can keep having a conversation.

124
00:07:14.679 --> 00:07:18.754
So that's basically what
we need to do next.

125
00:07:18.754 --> 00:07:23.537
But before we do that, I'm just
gonna create a function that formats

126
00:07:23.537 --> 00:07:26.181
the user input that someone types in.

127
00:07:26.181 --> 00:07:33.126
So we'll say const formatMessage.

128
00:07:33.126 --> 00:07:37.137
It takes in userInput,
which is just a string, right?

129
00:07:37.137 --> 00:07:43.447
And then it's just gonna return a new
object here that has role of user,

130
00:07:43.447 --> 00:07:50.731
and then content of the user input,
Like that.

131
00:07:54.083 --> 00:07:57.270
So if you're looking at like what is
going on here, if this looks new to you.

132
00:07:57.270 --> 00:08:01.400
This is just me doing an implicit return.

133
00:08:01.400 --> 00:08:06.074
If your arrow function only has one line
of code, you don't have to put the return

134
00:08:06.074 --> 00:08:11.260
statement and then because I wanna return
an object, I can wrap it in a parenthesis.

135
00:08:11.260 --> 00:08:12.454
So therefore I return an object.

136
00:08:12.454 --> 00:08:16.123
If I didn't have those parentheses, it's
thinking I'm making a function body and

137
00:08:16.123 --> 00:08:17.860
I get a syntax error.

138
00:08:17.860 --> 00:08:20.890
But if I put it in parentheses,
I'm saying return this object.

139
00:08:20.890 --> 00:08:22.071
So it's just a little shortcut.

140
00:08:28.455 --> 00:08:29.930
Cool, everybody follow me there?

141
00:08:31.660 --> 00:08:35.481
All right, so the next thing is we just
wanna create the main chat function,

142
00:08:35.481 --> 00:08:38.260
which is going to be the thing
that houses our loop.

143
00:08:38.260 --> 00:08:40.852
And this is where we try
to keep things going.

144
00:08:40.852 --> 00:08:44.812
So the way that that's gonna
work if you scroll down,

145
00:08:44.812 --> 00:08:48.337
this is where we're going
to keep our history.

146
00:08:48.337 --> 00:08:52.800
And then we're gonna have this start
function here that is recursive.

147
00:08:52.800 --> 00:08:54.420
And this is how we recreate our loop.

148
00:08:54.420 --> 00:08:58.840
We're just gonna use recursion as
a mechanism for keeping things going.

149
00:08:58.840 --> 00:09:00.160
And that's how it's gonna work.

150
00:09:00.160 --> 00:09:02.859
So if you've never done recursion before,
if you've done it, wow,

151
00:09:02.859 --> 00:09:03.930
when am I ever gonna use it?

152
00:09:03.930 --> 00:09:05.500
You're gonna use it right now.

153
00:09:05.500 --> 00:09:09.188
This is that one time ever in your life
that you're gonna use recursion and

154
00:09:09.188 --> 00:09:12.720
actually is beneficial and
hopefully won't crash your computer.

155
00:09:12.720 --> 00:09:17.411
Well, I guess recursion never really
crashes your computer because it

156
00:09:17.411 --> 00:09:21.018
reaches a call stack limit
whereas a while loop would.

157
00:09:21.018 --> 00:09:22.230
Cool, okay, so let's do that.

158
00:09:22.230 --> 00:09:23.668
So const chat and

159
00:09:23.668 --> 00:09:29.746
then underneath it I'm just gonna
call it chat eventually like that.

160
00:09:29.746 --> 00:09:33.310
And let's create our history,
which is just an empty array.

161
00:09:33.310 --> 00:09:35.980
But for now, let's prime
the system with a system message.

162
00:09:35.980 --> 00:09:39.630
So I'll say, role: 'system.

163
00:09:39.630 --> 00:09:41.830
Remember, this is
the origin story of the AI.

164
00:09:41.830 --> 00:09:44.680
So we always got to start off with that,
the origin story.

165
00:09:44.680 --> 00:09:48.720
So content role and content, and
then put whatever you want here.

166
00:09:48.720 --> 00:09:54.438
I'm just gonna keep what I always put,

167
00:09:54.438 --> 00:09:58.086
you are an AI assistant.

168
00:09:58.086 --> 00:10:04.111
Answer questions or else.

169
00:10:04.111 --> 00:10:05.690
I don't know,
whatever you want to put there.

170
00:10:05.690 --> 00:10:07.220
[LAUGH] You put whatever you want.

171
00:10:07.220 --> 00:10:08.340
That's the beauty of it.

172
00:10:08.340 --> 00:10:09.788
I wonder [LAUGH] what that's.

173
00:10:09.788 --> 00:10:13.390
I don't know what's gonna happen there,
but I kind of threatened it a little bit,

174
00:10:13.390 --> 00:10:14.090
so we'll see.

175
00:10:14.090 --> 00:10:17.049
I'm gonna get moderated.

176
00:10:17.049 --> 00:10:18.946
All right, so that's the backstory.

177
00:10:18.946 --> 00:10:20.460
Let me put a y there.

178
00:10:20.460 --> 00:10:25.496
And make another function here
called start, Inside of chat,

179
00:10:25.496 --> 00:10:29.877
and then underneath that I'll just kick
it off by calling start, that's the loop.

180
00:10:29.877 --> 00:10:34.546
All right, and then in here,
what we wanna do specifically is,

181
00:10:34.546 --> 00:10:38.730
we wanna go ahead and do this,
our readline.question.

182
00:10:38.730 --> 00:10:42.853
What this is gonna do is it's gonna prompt
a question in the terminal in which you

183
00:10:42.853 --> 00:10:44.094
can type something in.

184
00:10:44.094 --> 00:10:45.789
So let's do that.

185
00:10:45.789 --> 00:10:49.720
So I'll say rl.question.

186
00:10:49.720 --> 00:10:51.520
I'll prefix the question with you.

187
00:10:51.520 --> 00:10:55.008
So when we see it in a terminal,
we can see that this is our message, and

188
00:10:55.008 --> 00:10:57.330
then we'll see the log for
the AI's message.

189
00:10:57.330 --> 00:11:02.530
So I'll say You, takes a call back,
that's gonna be async,

190
00:11:02.530 --> 00:11:06.441
and you get back the user
input here like that.

191
00:11:11.468 --> 00:11:15.910
And then from this, we want a way to
exit out of this when we're done.

192
00:11:15.910 --> 00:11:18.360
So I'm just making a handler for that.

193
00:11:18.360 --> 00:11:21.680
So if you type in the word exit,
it'll close.

194
00:11:21.680 --> 00:11:22.560
That's basically it.

195
00:11:22.560 --> 00:11:28.845
So what I'll say is if
userInput.toLowercase === 'exit' or

196
00:11:28.845 --> 00:11:33.457
whatever word you wanna
use to close out of this.

197
00:11:33.457 --> 00:11:39.425
Then you can say rl.close and
then this is returned out of this.

198
00:11:39.425 --> 00:11:44.404
So this will end the session effectively,
just by typing the word exit.

199
00:11:49.212 --> 00:11:52.063
And then from here,
what we need to do is we need to format

200
00:11:52.063 --> 00:11:54.741
that user input because user
input is just a string.

201
00:11:54.741 --> 00:11:57.802
And we know that in order to send
a message it needs to be an object that

202
00:11:57.802 --> 00:11:59.326
has a role in a content property.

203
00:11:59.326 --> 00:12:02.395
And we have that function called
formatMessage that does just that.

204
00:12:02.395 --> 00:12:06.100
It takes a user input and
it converts it to the appropriate thing.

205
00:12:06.100 --> 00:12:07.218
So let's do that.

206
00:12:07.218 --> 00:12:12.933
So I'll say message = formatMessage takes

207
00:12:12.933 --> 00:12:17.882
in a userInput, right, we got that.

208
00:12:20.717 --> 00:12:25.556
And then from there, what I wanna do
is I want to call the OpenAI API with

209
00:12:25.556 --> 00:12:32.560
the current history, so everything that's
been said thus far, plus this new message.

210
00:12:32.560 --> 00:12:38.356
All right, then I wanna update my history
with the new message that I sent,

211
00:12:38.356 --> 00:12:41.940
plus the response that I got back.

212
00:12:41.940 --> 00:12:45.460
There's like a million ways to do this,
so I'm just doing it this way.

213
00:12:45.460 --> 00:12:48.240
So I'll say response = await.

214
00:12:50.060 --> 00:12:50.960
What did I call it?

215
00:12:50.960 --> 00:12:54.280
newMessage, Await newMessage.

216
00:12:54.280 --> 00:12:57.480
It takes in the current
history we have here.

217
00:12:57.480 --> 00:13:01.660
It takes in the newMessage we want to
send like that, so we get our response.

218
00:13:03.090 --> 00:13:06.624
And then we want to update our history,
so I'll say history.push.

219
00:13:06.624 --> 00:13:10.353
I wanna push in first the message
that we created from the user input.

220
00:13:10.353 --> 00:13:12.413
That needs to happen first.

221
00:13:12.413 --> 00:13:18.850
And then I want to push in the response
that we got back from openai.

222
00:13:18.850 --> 00:13:20.530
So I'm updating our history with that.

223
00:13:20.530 --> 00:13:25.696
So that way when this happens again, when
we pass in this history, it's been updated

224
00:13:25.696 --> 00:13:30.894
with these messages, which works because
history is outside of the start function.

225
00:13:30.894 --> 00:13:33.790
It's in a closure so it never gets erased.

226
00:13:33.790 --> 00:13:36.420
Cuz we're doing this inner function here,
so we got a closure there.

227
00:13:38.110 --> 00:13:41.730
And then from there, obviously we
want to log what the AI is saying.

228
00:13:41.730 --> 00:13:45.591
That's the whole point so let's do that.

229
00:13:47.820 --> 00:13:49.600
Console.log.

230
00:13:49.600 --> 00:13:54.300
I'm gonna add in some new lines here so
we can better see it.

231
00:13:54.300 --> 00:13:58.194
If you didn't know back
tick in means new line.

232
00:13:58.194 --> 00:14:00.739
Backtick in JavaScript means
escape this character,

233
00:14:00.739 --> 00:14:04.679
which means don't literally show this
character, it represents something else.

234
00:14:04.679 --> 00:14:08.731
So then I'll say AI, and
then here we can put the result.

235
00:14:08.731 --> 00:14:10.124
I'm actually just gonna
use backticks here.

236
00:14:13.493 --> 00:14:20.119
And the response here should just
be response.content, like that.

237
00:14:20.119 --> 00:14:22.770
Okay, and then we need to run this again.

238
00:14:22.770 --> 00:14:24.792
So we got to call start
again right underneath it,

239
00:14:24.792 --> 00:14:26.850
so that's the recursive loop.

240
00:14:26.850 --> 00:14:29.043
We gotta run this again because
now we want this to run again so

241
00:14:29.043 --> 00:14:31.310
we're getting asked another question.

242
00:14:31.310 --> 00:14:34.520
If we don't do this again, we won't
get prompted to ask another question.

243
00:14:34.520 --> 00:14:35.640
So you need to do that.

244
00:14:35.640 --> 00:14:40.197
And then obviously the initial
kickoff is down here.

245
00:14:40.197 --> 00:14:44.369
There's many different ways to do
recursion, I know the official way of this

246
00:14:44.369 --> 00:14:48.130
pattern, but it's just,
I call it the inner recursive function.

247
00:14:48.130 --> 00:14:50.343
I mean,
we could have made chat recursive too, but

248
00:14:50.343 --> 00:14:52.770
then we'd have this issue
with the history of closure.

249
00:14:52.770 --> 00:14:56.880
We had to put it up here somewhere and
then probably make it an object.

250
00:14:56.880 --> 00:14:57.608
It gets weird.

251
00:14:57.608 --> 00:14:59.950
So there we go.

252
00:15:02.112 --> 00:15:03.144
Okay, cool.

253
00:15:03.144 --> 00:15:09.810
And then lastly, you can just put a log at
the bottom before you call chat just so

254
00:15:09.810 --> 00:15:16.286
we know that, hey, it's ready to go and
you can hit exit when you're done.

255
00:15:19.188 --> 00:15:20.950
Otherwise, you're just looking
at a blank terminal and

256
00:15:20.950 --> 00:15:22.210
you won't know if it's working or not.

257
00:15:24.970 --> 00:15:27.346
Okay, let's try to run it.

258
00:15:27.346 --> 00:15:30.127
Maybe it works the first time.

259
00:15:30.127 --> 00:15:31.185
Maybe it doesn't.

260
00:15:31.185 --> 00:15:35.863
So I'll say, node chat.js.

261
00:15:35.863 --> 00:15:39.796
You can see right here, it says Chatbot
initialized, type exit to end the chat.

262
00:15:39.796 --> 00:15:41.250
That's a good sign.

263
00:15:41.250 --> 00:15:44.120
And then now you can see it's
prompting me to ask something.

264
00:15:44.120 --> 00:15:45.933
Let's test this out.

265
00:15:45.933 --> 00:15:49.645
Hi, my name is Scott.

266
00:15:49.645 --> 00:15:52.711
I hit Enter and it says, hello, Scott.

267
00:15:52.711 --> 00:15:53.778
It's nice to meet you.

268
00:15:53.778 --> 00:15:54.787
How can I assist you today?

269
00:15:54.787 --> 00:15:57.410
You can see now it's prompting me again.

270
00:15:57.410 --> 00:15:59.850
Now, just to test it, what is my name?

271
00:15:59.850 --> 00:16:02.980
Your name is Scott.

272
00:16:02.980 --> 00:16:04.730
Okay, it remembers.

273
00:16:04.730 --> 00:16:05.520
We're good now.

274
00:16:05.520 --> 00:16:09.944
So now we have an AI chat
interface that remembers things,

275
00:16:09.944 --> 00:16:13.980
whereas before, that was not the case.

276
00:16:13.980 --> 00:16:21.255
So, this is a quick little ChatGPT in your
terminal if you wanted to do something.

277
00:16:21.255 --> 00:16:23.820
I actually made something
like this similarly.

278
00:16:23.820 --> 00:16:28.778
And I use it over ChatGPT because I just
prefer using the terminal than I did going

279
00:16:28.778 --> 00:16:29.964
to the web outlet.

280
00:16:29.964 --> 00:16:32.425
This is just better for me, in my opinion.

281
00:16:32.425 --> 00:16:37.760
So, cool, and then if you wanna exit, you
can just type exit and then you're out.

282
00:16:37.760 --> 00:16:40.750
So yeah, obviously ChatGPT will be a
little more nuanced as far as its features

283
00:16:40.750 --> 00:16:43.192
and stuff, but the main part of
being able to chat to it, I mean,

284
00:16:43.192 --> 00:16:44.680
this is essentially it, right?

285
00:16:44.680 --> 00:16:46.070
And I think I'm gonna
add some new lines here.

286
00:16:46.070 --> 00:16:50.623
So it's right, not next to it.

287
00:16:50.623 --> 00:16:56.488
Yeah, that's basically and then eventually
like I said you will hit this point,

288
00:16:56.488 --> 00:16:59.293
depending on what model you choose of,

289
00:16:59.293 --> 00:17:03.981
it just won't remember anymore and
you'll have to handle that.

290
00:17:03.981 --> 00:17:05.239
So that's a constraint, and

291
00:17:05.239 --> 00:17:08.221
then we'll talk about some more of
the constraints in the next point.

292
00:17:08.221 --> 00:17:13.470
But I just want to make sure I handled
any questions here about this interface.

293
00:17:13.470 --> 00:17:18.451
I think the first time I did this I
thought, wow, this is not that hard,

294
00:17:18.451 --> 00:17:19.791
this makes sense.

295
00:17:19.791 --> 00:17:24.830
Because doing something like this before,
GPT came along, forget about it.

296
00:17:24.830 --> 00:17:26.860
This was not gonna happen.

297
00:17:26.860 --> 00:17:30.276
Can you imagine that company Intercom
having something like this when they

298
00:17:30.276 --> 00:17:31.210
first came out?

299
00:17:31.210 --> 00:17:33.531
It would be insane.

300
00:17:33.531 --> 00:17:35.330
It would be unheard of.

301
00:17:35.330 --> 00:17:38.390
But it was just really hard to do
that back then, if not impossible.

302
00:17:38.390 --> 00:17:42.440
And now anyone with
an API key can do this.

303
00:17:42.440 --> 00:17:45.770
And I don't know, 47 lines of code.

304
00:17:45.770 --> 00:17:50.588
It is kind of nuts and you don't need to
know anything about linear algebra or

305
00:17:50.588 --> 00:17:53.920
matrix math,
what you don't want to know about.

306
00:17:53.920 --> 00:17:57.310
So I thought that was pretty intense.

