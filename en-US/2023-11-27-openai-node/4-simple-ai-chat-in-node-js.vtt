WEBVTT

1
00:00:00.000 --> 00:00:02.442
We also need to, wait,
no, it's built in now.

2
00:00:02.442 --> 00:00:05.749
I was gonna say we need
to install readline, but

3
00:00:05.749 --> 00:00:11.220
it's actually built into Node now, so
we can just import readline like this.

4
00:00:11.220 --> 00:00:18.276
So we can say import readline
from 'node:readline'.

5
00:00:18.276 --> 00:00:20.645
Okay, if you're looking like,
what the hell is this?

6
00:00:20.645 --> 00:00:23.920
If you've never seen that before,
this is optional.

7
00:00:23.920 --> 00:00:25.140
This is something new in Node.

8
00:00:25.140 --> 00:00:27.298
This is basically saying, hey,

9
00:00:27.298 --> 00:00:31.770
I know that Node has some
internal package called readline.

10
00:00:31.770 --> 00:00:33.350
That's the one that I wanna import.

11
00:00:33.350 --> 00:00:37.921
And the reason this is great is because
there might be a package you installed

12
00:00:37.921 --> 00:00:39.070
called readline.

13
00:00:39.070 --> 00:00:39.850
In fact, there was one.

14
00:00:39.850 --> 00:00:42.615
They had to rename it
because Node made one.

15
00:00:42.615 --> 00:00:46.806
So if there's an internal thing called
readline and there's also a package you

16
00:00:46.806 --> 00:00:50.197
have installed called readline,
which one is it gonna import?

17
00:00:52.590 --> 00:00:53.230
I don't know.

18
00:00:53.230 --> 00:00:55.700
So, yeah, to get around that confusion,
you do that.

19
00:00:55.700 --> 00:00:58.085
So now it will always import
the one that's internal to Node and

20
00:00:58.085 --> 00:00:59.892
not some third-party
one that you installed.

21
00:00:59.892 --> 00:01:04.264
So you can actually put this node prefix
on every internal module that Node

22
00:01:04.264 --> 00:01:08.775
has to force it to use that one versus
trying to figure out whether it's got to

23
00:01:08.775 --> 00:01:13.101
import the one that's installed with
the same name or the internal one.

24
00:01:13.101 --> 00:01:15.820
Because some crazy person decided to

25
00:01:15.820 --> 00:01:20.652
name their NPM package the same
name as an internal node package.

26
00:01:20.652 --> 00:01:23.922
Could you imagine NPM package called FS?

27
00:01:23.922 --> 00:01:25.014
Who would do that?

28
00:01:25.014 --> 00:01:26.160
That's crazy.

29
00:01:26.160 --> 00:01:27.789
But people do it.

30
00:01:27.789 --> 00:01:31.740
So, all right, we got that.

31
00:01:31.740 --> 00:01:34.449
Readline is just a way that allows us to,
I don't know,

32
00:01:34.449 --> 00:01:36.820
write text in our terminal and
see text output.

33
00:01:36.820 --> 00:01:38.025
That's basically it, we're gonna use that.

34
00:01:40.153 --> 00:01:41.055
We already initialized this.

35
00:01:41.055 --> 00:01:41.610
We're good to go.

36
00:01:41.610 --> 00:01:45.326
So now we just need to make
a new readline interface.

37
00:01:45.326 --> 00:01:51.515
So the way you can do that is,
I'm just gonna say readline = create,

38
00:01:51.515 --> 00:01:56.132
oops, readline.createInterface, like this.

39
00:01:56.132 --> 00:01:57.634
And you can say input.

40
00:01:57.634 --> 00:02:04.420
And for the input, basically we're gonna
use process.stdin and then stdout.

41
00:02:04.420 --> 00:02:10.500
This is just basically, How a terminal
handles input and handles output.

42
00:02:10.500 --> 00:02:15.423
It's like a pipe through which it can
receive text, in which it can output text.

43
00:02:15.423 --> 00:02:19.630
We're basically binding that to
the inputs and outputs here.

44
00:02:19.630 --> 00:02:24.550
So input is stdin.

45
00:02:24.550 --> 00:02:28.009
Why did it bring that in like that?

46
00:02:28.009 --> 00:02:29.679
I didn't do process, that's right.

47
00:02:32.791 --> 00:02:38.782
Process.that and
then I'll put, If I can type,

48
00:02:38.782 --> 00:02:43.520
is the process.stdout, like that.

49
00:02:43.520 --> 00:02:45.568
So cool, now that we have our interface.

50
00:02:48.110 --> 00:02:49.958
We can start making some chat stuff.

51
00:02:49.958 --> 00:02:54.174
So from there, what we wanna do is,

52
00:02:54.174 --> 00:02:59.514
I'm just gonna create
a helper function that

53
00:02:59.514 --> 00:03:05.568
wraps a call to the OpenAI API
to make a new message.

54
00:03:05.568 --> 00:03:06.090
That way,

55
00:03:06.090 --> 00:03:09.986
we don't have to write this every single
time when you wanna make a new message.

56
00:03:09.986 --> 00:03:14.969
I'm just gonna create a wrapper
around that because that's

57
00:03:14.969 --> 00:03:17.616
annoying to write all the time.

58
00:03:17.616 --> 00:03:21.738
[LAUGH] So newNessage,
it takes a message, right?

59
00:03:21.738 --> 00:03:25.897
And then from here, we're just gonna say,
response or results,

60
00:03:25.897 --> 00:03:27.690
whatever you wanna call it.

61
00:03:27.690 --> 00:03:32.730
This is gonna be async = await

62
00:03:32.730 --> 00:03:41.815
openai.chat.completions.create, all right?

63
00:03:41.815 --> 00:03:44.975
Also, because we need to pass
in the entire history for

64
00:03:44.975 --> 00:03:48.080
everything, we're gonna
take the history as well.

65
00:03:49.150 --> 00:03:52.560
So when we create this, we'll say model.

66
00:03:53.780 --> 00:03:56.443
I'm still gonna use gpt-3.

67
00:03:56.443 --> 00:03:57.619
You can literally use whatever you want.

68
00:04:00.895 --> 00:04:04.450
And then I'm going to pass
in the messages here.

69
00:04:04.450 --> 00:04:10.055
The messages are going to be a brand new
array of everything that came before,

70
00:04:10.055 --> 00:04:14.901
so the history plus your new messages
that you pass in, like this.

71
00:04:14.901 --> 00:04:18.760
New messages go on the end of the array,
not the beginning.

72
00:04:18.760 --> 00:04:23.926
You would not get the results
you wanted if you did that.

73
00:04:25.987 --> 00:04:28.470
All right, follow me so far?

74
00:04:28.470 --> 00:04:31.410
Okay, and then yeah,
we just wanna go ahead and

75
00:04:31.410 --> 00:04:33.918
just return the message object itself.

76
00:04:33.918 --> 00:04:35.869
So that's what I'll do.

77
00:04:35.869 --> 00:04:45.250
I'll say return results.choices[0]message.

78
00:04:51.097 --> 00:04:54.209
So basically the same thing
we did in the index file,

79
00:04:54.209 --> 00:04:56.560
nothing different here at this point.

80
00:04:56.560 --> 00:05:01.029
But the next thing we need to do is need
to create a loop that runs constantly, so

81
00:05:01.029 --> 00:05:03.219
we can keep having the conversation.

82
00:05:03.219 --> 00:05:06.963
Whereas before on our previous example,
we'd ask the question, then it will stop,

83
00:05:06.963 --> 00:05:08.003
the process will stop.

84
00:05:08.003 --> 00:05:09.457
But we want it to keep going.

85
00:05:09.457 --> 00:05:13.730
So we can keep the memory alive and
we can keep having a conversation.

86
00:05:13.730 --> 00:05:18.065
So that's basically what
we need to do next.

87
00:05:18.065 --> 00:05:22.705
But before we do that, I'm just
gonna create a function that formats

88
00:05:22.705 --> 00:05:25.276
the user input that someone types in.

89
00:05:25.276 --> 00:05:32.614
So we'll say const formatMessage.

90
00:05:32.614 --> 00:05:36.554
It takes in user inputs,
which is just a string, right?

91
00:05:36.554 --> 00:05:43.146
And then it's just gonna return a new
object here that has role of user and

92
00:05:43.146 --> 00:05:49.841
then content of the userInput, Like that.

93
00:05:53.501 --> 00:05:55.322
So if you're looking at,
what is going on here?

94
00:05:55.322 --> 00:06:00.450
If this looks new to you,
this is just me doing a implicit return.

95
00:06:00.450 --> 00:06:03.472
If your arrow function
only has one line of code,

96
00:06:03.472 --> 00:06:06.286
you don't have to put
the return statement.

97
00:06:06.286 --> 00:06:10.318
And then because I wanna return an object,
I can wrap it in a parentheses, so

98
00:06:10.318 --> 00:06:11.957
therefore I return an object.

99
00:06:11.957 --> 00:06:16.218
If I didn't have those parentheses, it's
thinking I'm making a function body and

100
00:06:16.218 --> 00:06:17.306
I get a syntax error.

101
00:06:17.306 --> 00:06:19.449
But if I put it in parentheses,
I'm saying return this object.

102
00:06:19.449 --> 00:06:21.364
So it's just a little shortcut.

103
00:06:28.098 --> 00:06:30.971
Cool, everybody following me there?

104
00:06:30.971 --> 00:06:34.781
All right, so next thing is we just
wanna create the main chat function,

105
00:06:34.781 --> 00:06:37.350
which is gonna be the thing
that houses our loop.

106
00:06:37.350 --> 00:06:39.880
And this is where we try
to keep things going.

107
00:06:39.880 --> 00:06:44.065
So the way that that's gonna work,
if you scroll down,

108
00:06:44.065 --> 00:06:47.716
this is where we're gonna
keep our history, and

109
00:06:47.716 --> 00:06:52.813
then we're gonna have this start
function here that is recursive.

110
00:06:52.813 --> 00:06:53.472
And this is how we recreate a loop.

111
00:06:53.472 --> 00:06:57.567
We're just gonna use recursion as
a mechanism for keeping things going, and

112
00:06:57.567 --> 00:06:59.210
that's how it's gonna work.

113
00:06:59.210 --> 00:07:02.543
So if you've never done recursion before,
if you've done it, like, wow,

114
00:07:02.543 --> 00:07:03.738
when am I ever gonna use it?

115
00:07:03.738 --> 00:07:04.550
You're gonna use it right now.

116
00:07:04.550 --> 00:07:08.926
This is that one time ever in your life
that you're gonna use recursion and

117
00:07:08.926 --> 00:07:10.632
it actually is beneficial.

118
00:07:10.632 --> 00:07:11.770
And hopefully,
it won't crash your computer.

119
00:07:11.770 --> 00:07:16.164
Well, I guess recursion never really
crashes your computer because it reaches

120
00:07:16.164 --> 00:07:18.798
a call stack limit,
whereas while loop would.

121
00:07:18.798 --> 00:07:21.646
So cool, okay, so let's do that.

122
00:07:21.646 --> 00:07:25.113
So const chat, And

123
00:07:25.113 --> 00:07:29.020
then underneath it, I'm just gonna
call it chat eventually, like that.

124
00:07:29.020 --> 00:07:32.679
And then let's create our history,
which is just an empty array.

125
00:07:32.679 --> 00:07:35.020
But for now ,let's prime
the system with a system message.

126
00:07:35.020 --> 00:07:39.150
So I'll say role: 'system'.

127
00:07:39.150 --> 00:07:40.956
Remember, this is
the origin story of the AI.

128
00:07:40.956 --> 00:07:44.378
So we always gotta start off with that,
the origin story.

129
00:07:44.378 --> 00:07:48.130
So role and content, and
then put whatever you want here.

130
00:07:48.130 --> 00:07:53.935
I'm just gonna keep what I always put,
You are an AI assistant.

131
00:07:57.808 --> 00:08:03.428
Answer questions or else.

132
00:08:03.428 --> 00:08:05.499
I don't know,
whatever you want to put there [LAUGH].

133
00:08:05.499 --> 00:08:07.604
You put whatever you want,
that's the beauty of it.

134
00:08:07.604 --> 00:08:11.391
I wonder what that's, I don't know
what's gonna happen there, but

135
00:08:11.391 --> 00:08:14.164
I kinda threatened it a little bit,
so we'll see.

136
00:08:14.164 --> 00:08:15.465
I might get moderated.

137
00:08:15.465 --> 00:08:18.413
All right, so that's the back story.

138
00:08:18.413 --> 00:08:19.972
Let me put a y there.

139
00:08:19.972 --> 00:08:24.932
And we'll make another function
here called start, Inside of chat.

140
00:08:24.932 --> 00:08:27.965
And then underneath that,
I'll just kick it off by calling start.

141
00:08:27.965 --> 00:08:32.149
That's the loop, right?

142
00:08:32.149 --> 00:08:36.512
And then in here, what we wanna do
specifically is, we wanna go ahead and

143
00:08:36.512 --> 00:08:38.308
do our readline.question.

144
00:08:38.308 --> 00:08:42.438
What this is gonna do is it's gonna prompt
a question in the terminal in which you

145
00:08:42.438 --> 00:08:43.682
can type something in.

146
00:08:43.682 --> 00:08:45.169
So let's do that.

147
00:08:45.169 --> 00:08:49.166
So I'll say rl.question.

148
00:08:49.166 --> 00:08:50.570
I'll prefix the question with You.

149
00:08:50.570 --> 00:08:54.373
So when we see it in a terminal,
we can see that this is our message, and

150
00:08:54.373 --> 00:08:56.902
then we'll see the log for
the AI's message.

151
00:08:56.902 --> 00:09:01.724
So I'll say You, takes a callback,
that's gonna be async,

152
00:09:01.724 --> 00:09:06.066
and you get back the user Input here,
Like that.

153
00:09:11.346 --> 00:09:15.679
And then from this, we want a way to
exit out of this when we're done, so

154
00:09:15.679 --> 00:09:17.940
I'm just making a handler for that.

155
00:09:17.940 --> 00:09:21.230
So if you type in the word exit,
it'll close.

156
00:09:21.230 --> 00:09:22.110
That's basically it.

157
00:09:22.110 --> 00:09:28.560
So what I'll say is,
if (userInput.toLowerCase=== 'exit'),

158
00:09:28.560 --> 00:09:33.032
or whatever word you wanna
use to close out of this,

159
00:09:33.032 --> 00:09:38.870
then you can say rl.close, and
then this just return out of this.

160
00:09:38.870 --> 00:09:43.555
So this will end the session effectively,
just by typing the word exit.

161
00:09:48.709 --> 00:09:52.746
And then from here, what we need to do is
we need to format that userInput because

162
00:09:52.746 --> 00:09:54.211
userInput is just a string.

163
00:09:54.211 --> 00:09:55.964
And we know that in
order to send a message,

164
00:09:55.964 --> 00:09:58.560
it needs to be an object that has
a role and a constant property.

165
00:09:58.560 --> 00:10:01.812
And we have that function called
formatMessage that does just that.

166
00:10:01.812 --> 00:10:05.244
It takes a userInput and
it converts it to the appropriate thing.

167
00:10:05.244 --> 00:10:06.270
So let's do that.

168
00:10:06.270 --> 00:10:11.472
So I'll say, message = formatMessage,

169
00:10:11.472 --> 00:10:15.523
takes in the userInput, right?

170
00:10:15.523 --> 00:10:18.642
We got that?

171
00:10:20.262 --> 00:10:21.828
And then from there,

172
00:10:21.828 --> 00:10:27.048
what I wanna do is I want to call
the OpenAI API with the current history,

173
00:10:27.048 --> 00:10:32.361
so everything that's been said thus
far plus this new message, right?

174
00:10:32.361 --> 00:10:37.043
Then I wanna update my
history with the new message

175
00:10:37.043 --> 00:10:41.288
that I sent plus the response
that I got back.

176
00:10:41.288 --> 00:10:44.708
There's a million ways to do this,
so I'm just doing it this way.

177
00:10:44.708 --> 00:10:50.514
So I'll say response = await,
what did I call it?

178
00:10:50.514 --> 00:10:53.338
newMessage, await newMessage.

179
00:10:53.338 --> 00:10:56.530
It takes in the current
history we have here.

180
00:10:56.530 --> 00:10:59.950
It takes in the new message we wanna send,
like that.

181
00:10:59.950 --> 00:11:02.410
So we get our response.

182
00:11:02.410 --> 00:11:06.095
And then we wanna update our history,
so I'll say history.push.

183
00:11:06.095 --> 00:11:09.939
I wanna push in first the message
that we created from the userInput,

184
00:11:09.939 --> 00:11:11.540
that needs to happen first.

185
00:11:11.540 --> 00:11:18.114
And then I want to push in the response
that we got back from OpenAI.

186
00:11:18.114 --> 00:11:22.271
So I'm just updating our history with
that so that way when this happens again,

187
00:11:22.271 --> 00:11:26.009
when we pass in this history,
it's been updated with these messages.

188
00:11:26.009 --> 00:11:30.172
Which works because history is
outside of the start function.

189
00:11:30.172 --> 00:11:31.334
It's in a closure, so

190
00:11:31.334 --> 00:11:34.893
it never gets erased because we're
doing this inner function here.

191
00:11:34.893 --> 00:11:37.808
So we got a closure there.

192
00:11:37.808 --> 00:11:41.100
And then from there, obviously,
we want to log what the AI is saying.

193
00:11:41.100 --> 00:11:42.536
That's the whole point.

194
00:11:42.536 --> 00:11:45.032
So let's do that.

195
00:11:47.323 --> 00:11:53.359
Console.log, I'm gonna add in some new
lines here so we can better see it.

196
00:11:53.359 --> 00:11:57.625
If you didn't know,
backtick in means new line.

197
00:11:57.625 --> 00:12:00.407
Backtick in JavaScript means
escape this character,

198
00:12:00.407 --> 00:12:04.708
which means don't literally show this
character, it represents something else.

199
00:12:04.708 --> 00:12:08.083
So then I'll say AI, and
then here we can put the result.

200
00:12:08.083 --> 00:12:09.459
I'm actually just gonna
use backticks here.

201
00:12:12.678 --> 00:12:20.005
And the response here should just be
response.content, like that, okay?

202
00:12:20.005 --> 00:12:22.027
And then we need to run this again, so

203
00:12:22.027 --> 00:12:24.654
we gotta call start again
right underneath it.

204
00:12:24.654 --> 00:12:25.916
So that's the recursive loop.

205
00:12:25.916 --> 00:12:28.900
We gotta run this again because
now we want this to run again so

206
00:12:28.900 --> 00:12:30.370
we can ask another question.

207
00:12:30.370 --> 00:12:33.855
If we don't do this again, we won't
get prompted to ask another question.

208
00:12:33.855 --> 00:12:34.703
So we need to do that.

209
00:12:34.703 --> 00:12:37.188
And then, obviously,
the initial kickoff is down here.

210
00:12:39.769 --> 00:12:41.470
There's many different
ways to do recursion.

211
00:12:41.470 --> 00:12:44.891
I know the official way of this pattern,
but it's just,

212
00:12:44.891 --> 00:12:47.183
I call the inner recursive function.

213
00:12:47.183 --> 00:12:49.478
I mean, we could have made chat recursive,
too, but

214
00:12:49.478 --> 00:12:51.680
then we'd have this issue
with a history closure.

215
00:12:51.680 --> 00:12:56.691
We have to put it up here somewhere,
and then probably make it an object.

216
00:12:56.691 --> 00:13:01.605
It gets weird.
So there we go.

217
00:13:01.605 --> 00:13:04.549
Okay, cool, and then lastly,

218
00:13:04.549 --> 00:13:10.110
you can just put a log at the bottom
before you call chat just so

219
00:13:10.110 --> 00:13:13.724
we know that, hey, it's ready to go.

220
00:13:13.724 --> 00:13:17.230
And you can hit exit when you're done.

221
00:13:18.688 --> 00:13:22.113
Otherwise you're just looking
at a blank terminal, and

222
00:13:22.113 --> 00:13:25.299
you won't know if it's working or not.

223
00:13:25.299 --> 00:13:30.350
Okay, let's try to run it, maybe it
works the first time, maybe it doesn't.

224
00:13:30.350 --> 00:13:35.020
So I'll say node chat.js.

225
00:13:35.020 --> 00:13:38.279
And you can see right here,
it says Chatbot initialized.

226
00:13:38.279 --> 00:13:38.867
Type 'exit' in the chat.

227
00:13:38.867 --> 00:13:39.950
That's a good sign.

228
00:13:39.950 --> 00:13:43.458
And then now you can see it's
prompting me to add something.

229
00:13:43.458 --> 00:13:44.960
So let's test this out.

230
00:13:44.960 --> 00:13:49.494
Hi, my name is Scott.

231
00:13:49.494 --> 00:13:52.043
I hit Enter, and it says, Hello, Scott!

232
00:13:52.043 --> 00:13:53.189
It's nice to meet you.

233
00:13:53.189 --> 00:13:53.873
How can I assist you today?

234
00:13:53.873 --> 00:13:56.638
You can see now it's prompting me again.

235
00:13:56.638 --> 00:13:57.777
And I'll just attest it.

236
00:13:57.777 --> 00:14:01.579
What is my name?

237
00:14:01.579 --> 00:14:02.296
Your name is Scott.

238
00:14:02.296 --> 00:14:04.946
Okay, it remembers, we're good now.

239
00:14:04.946 --> 00:14:09.903
So now we have an AI chat
interface that remembers things,

240
00:14:09.903 --> 00:14:13.350
whereas before, that was not the case.

241
00:14:13.350 --> 00:14:20.620
So this is a quick little ChatGPT in your
terminal if you wanted to do something..

242
00:14:20.620 --> 00:14:25.033
I actually made something like this
similarly, and I use it over ChatGPT,

243
00:14:25.033 --> 00:14:28.755
cuz I just prefer using the terminal
than I did going to the Web.

244
00:14:28.755 --> 00:14:34.453
This is just better for me,
in my opinion, so cool.

245
00:14:34.453 --> 00:14:37.148
And then if you wanna exit, you can
just type exit and then you're out.

246
00:14:37.148 --> 00:14:38.055
So yeah, obviously,

247
00:14:38.055 --> 00:14:40.884
ChatGPT will be a little more nuanced
as far as its features and stuff.

248
00:14:40.884 --> 00:14:43.861
But the main part of being able to chat to
it, I mean, this is essentially it, right?

249
00:14:43.861 --> 00:14:49.340
And I think I'm gonna add some new lines
here, so it's, right, not next to it.

250
00:14:49.340 --> 00:14:54.202
But yeah, that's basically, and
then eventually, like I said,

251
00:14:54.202 --> 00:14:58.468
you will hit this point depending
on what model you choose,

252
00:14:58.468 --> 00:15:03.361
of it just won't remember anymore and
you'll have to handle that.

253
00:15:03.361 --> 00:15:04.776
So that's a constraint.

254
00:15:04.776 --> 00:15:09.128
And then, well, I'll talk about some more
of the constraints in the next point, but

255
00:15:09.128 --> 00:15:12.828
just wanna make sure I handled any
questions here about this interface.

256
00:15:12.828 --> 00:15:15.771
I think first time I did this, I thought,

257
00:15:15.771 --> 00:15:19.566
wow, this is not that hard,
[LAUGH] this makes sense.

258
00:15:19.566 --> 00:15:23.657
Because doing something like
this before GPT came along,

259
00:15:23.657 --> 00:15:26.839
forget about it,
this was not gonna happen.

260
00:15:26.839 --> 00:15:28.626
Can you imagine that company, Intercom,

261
00:15:28.626 --> 00:15:30.867
having something like this
when they first came out?

262
00:15:30.867 --> 00:15:31.757
It would be insane.

263
00:15:31.757 --> 00:15:34.132
It would be unheard of.

264
00:15:34.132 --> 00:15:37.866
But it was just really hard to do
that back then, if not impossible.

265
00:15:37.866 --> 00:15:42.516
And now,
anyone with an API key can do this in,

266
00:15:42.516 --> 00:15:46.108
I don't know, 47 lines of code.

267
00:15:46.108 --> 00:15:47.390
[LAUGH] It's kinda nuts.

268
00:15:47.390 --> 00:15:51.749
And you don't need to know anything
about linear algebra or matrix math,

269
00:15:51.749 --> 00:15:53.874
what you don't want to know about.

270
00:15:53.874 --> 00:15:57.760
So I thought that was pretty intense.

271
00:15:57.760 --> 00:16:02.794
&gt;&gt; What is the token count for
this chat so far, 4,000?

272
00:16:02.794 --> 00:16:04.661
&gt;&gt; The token count for this chat?

273
00:16:04.661 --> 00:16:10.271
Well, I know they're asking the limit for
this model, but I don't know the exact

274
00:16:10.271 --> 00:16:15.335
limit of the 3.5 Turbo model, but
I think it's less than 6k for sure.

275
00:16:15.335 --> 00:16:20.320
If you wanted to see how
much you've spent so

276
00:16:20.320 --> 00:16:23.688
far, inside of newMessage,

277
00:16:23.688 --> 00:16:28.824
you can just console.log results.usage.

278
00:16:28.824 --> 00:16:32.366
And you can look at it that way and
then do math on every single message and

279
00:16:32.366 --> 00:16:34.329
you'll see how much your tokens were.

280
00:16:34.329 --> 00:16:38.259
So if I did this, hello,

281
00:16:38.259 --> 00:16:42.760
that's how many tokens..

282
00:16:42.760 --> 00:16:46.139
We're using the prompt,
completion, stuff like that.

283
00:16:46.139 --> 00:16:49.210
And then I'm like, ok, make me some food.

284
00:16:54.178 --> 00:16:58.125
Yeah, and it can't, obviously,
it doesn't know how to make food, but

285
00:16:58.125 --> 00:16:59.279
we can teach it that.

286
00:16:59.279 --> 00:17:03.291
So yeah, you can just do that, and
then over time, you just collect this and

287
00:17:03.291 --> 00:17:07.576
do math, and you can figure out what your
cost is over the span of a conversation.

288
00:17:07.576 --> 00:17:12.218
&gt;&gt; The OpenAI dashboard will give you
a pretty real-time breakdown of your

289
00:17:12.218 --> 00:17:13.139
spend, too.

290
00:17:13.139 --> 00:17:15.952
&gt;&gt; There you go, OpenAI dashboard,
very good for that.

291
00:17:18.410 --> 00:17:23.395
But you shouldn't treat this as, if you
ever did, I don't know, smart contracts,

292
00:17:23.395 --> 00:17:26.387
you gotta think about the cost of gas and
slippage.

293
00:17:26.387 --> 00:17:28.952
It's not that mindset.

294
00:17:28.952 --> 00:17:35.130
That is the difference between a dollar or
a few thousands of dollars.

295
00:17:35.130 --> 00:17:40.330
This is the difference between a penny and
a fraction of a penny.

296
00:17:40.330 --> 00:17:41.538
So it's not something
you should think about.

297
00:17:41.538 --> 00:17:46.305
None of this stuff gets expensive
until you reach critical scale.

298
00:17:46.305 --> 00:17:51.029
And for this case, I wouldn't imagine
someone spending more than maybe

299
00:17:51.029 --> 00:17:54.599
a few cents today, and
that's what if they went nuts.

300
00:17:54.599 --> 00:17:55.781
So should be good.

