WEBVTT

1
00:00:00.000 --> 00:00:04.702
[MUSIC]

2
00:00:04.702 --> 00:00:06.053
&gt;&gt; Audience 1: So
we've got a key press stream,

3
00:00:06.053 --> 00:00:07.990
we can make a new stream
that's based off of it.

4
00:00:09.540 --> 00:00:12.290
So I just want to point out that
bottom line's a little gnarly

5
00:00:12.290 --> 00:00:14.640
because you have an IO kicked off.

6
00:00:14.640 --> 00:00:18.040
And then it returns an event stream
which we're gonna subscribe to, right?

7
00:00:18.040 --> 00:00:23.030
But that's okay, cuz what that does,
everything above that line that starts our

8
00:00:23.030 --> 00:00:28.690
app, that actually runs our app,
is going to pretty much return that type.

9
00:00:28.690 --> 00:00:31.030
And it's gonna be pure and
easy to work with and lots of fun.

10
00:00:31.030 --> 00:00:35.060
But that kickoff line's a little crazy
because it's like, hey, here's all

11
00:00:35.060 --> 00:00:40.270
the stuff we're honest about that's going
to happen in our site, or in our app.

12
00:00:40.270 --> 00:00:42.890
And now you have to deal with it,
and open it up and run it, and

13
00:00:42.890 --> 00:00:44.870
make sure that this all comes out.

14
00:00:44.870 --> 00:00:50.020
But the benefits of working in your app,
like that peer part, it's awesome.

15
00:00:50.020 --> 00:00:52.720
&gt;&gt; Joe Nelson: Yeah between pure and
impure it's really nice, we're writing

16
00:00:52.720 --> 00:00:57.060
a lot of checks so we got to cash in on
anything here really fully pull it out.

17
00:00:57.060 --> 00:01:00.510
So let's make another stream,
which is the value stream, I guess.

18
00:01:02.010 --> 00:01:07.010
Value stream will

19
00:01:07.010 --> 00:01:12.580
go from, I guess down again,
to the event stream of strain.

20
00:01:15.510 --> 00:01:20.287
And that would be var valueStream = it's
gonna be based off a key press string, but

21
00:01:20.287 --> 00:01:23.628
we're gonna map it to it,
I guess would be my feeling, and

22
00:01:23.628 --> 00:01:25.835
extract some things from the target.

23
00:01:29.202 --> 00:01:32.209
&gt;&gt; Audience 1: Yeah,
definitely want to get the target and

24
00:01:32.209 --> 00:01:34.001
the values, I know that.

25
00:01:34.001 --> 00:01:36.166
&gt;&gt; Joe Nelson: Let's see,
it was the value, and

26
00:01:36.166 --> 00:01:38.489
then you had to get the target first.

27
00:01:41.370 --> 00:01:43.140
&gt;&gt; Joe Nelson: And
that was off of key press stream.

28
00:01:44.403 --> 00:01:50.890
&gt;&gt; Audience 1: We're already
giving it that key press stream?

29
00:01:50.890 --> 00:01:52.100
I see what you're saying.

30
00:01:52.100 --> 00:01:53.050
You're gonna use that then, I see.

31
00:01:53.050 --> 00:01:54.160
&gt;&gt; Joe Nelson: I was gonna
make a new stream, and

32
00:01:54.160 --> 00:01:59.680
then just replace in our final line.

33
00:01:59.680 --> 00:02:01.466
&gt;&gt; Audience 1: Got it.
I just like the sound of my voice.

34
00:02:01.466 --> 00:02:02.881
&gt;&gt; Joe Nelson: [LAUGH] That's fine.

35
00:02:02.881 --> 00:02:05.830
Well, your voice is probably right here.

36
00:02:05.830 --> 00:02:07.460
Cannot get property value of undefined.

37
00:02:07.460 --> 00:02:10.870
We could put a log in here.

38
00:02:10.870 --> 00:02:13.060
See what kind of steps come through.

39
00:02:13.060 --> 00:02:14.280
&gt;&gt; Audience 1: Value stream.

40
00:02:14.280 --> 00:02:15.400
&gt;&gt; Joe Nelson: Or is it events target?

41
00:02:15.400 --> 00:02:16.890
&gt;&gt; Audience 1: Yeah.

42
00:02:16.890 --> 00:02:18.550
&gt;&gt; Joe Nelson: I don't think it.

43
00:02:18.550 --> 00:02:19.889
Yeah put a log, let's see what happens.

44
00:02:23.010 --> 00:02:26.580
It looks like it's [CROSSTALK]
&gt;&gt; Audience 1: We're not doing anything.

45
00:02:26.580 --> 00:02:28.020
There's just a syntax error or something.

46
00:02:28.020 --> 00:02:29.530
Let's see.

47
00:02:30.690 --> 00:02:36.830
We get the event, which returns us an io,
we call back the value stream.

48
00:02:36.830 --> 00:02:39.210
So key press stream is
going to get our search.

49
00:02:39.210 --> 00:02:40.590
&gt;&gt; Audience 2: We're letting
the map [INAUDIBLE] the other way.

50
00:02:41.690 --> 00:02:42.920
They're just Ws.

51
00:02:42.920 --> 00:02:43.680
That's right.

52
00:02:45.020 --> 00:02:47.830
&gt;&gt; Audience 1: So
you gotta map map, which-

53
00:02:47.830 --> 00:02:48.900
&gt;&gt; Joe Nelson: Actually compose I can

54
00:02:48.900 --> 00:02:50.320
map the composition, couldn't I?

55
00:02:50.320 --> 00:02:52.270
&gt;&gt; Audience 1: Yeah,
let's stick with map map now, though.

56
00:02:52.270 --> 00:02:55.580
See, it's kind of a cool
demonstration to be like, laws.

57
00:02:55.580 --> 00:03:00.490
&gt;&gt; Joe Nelson: Okay, fine.
Let's see if, before I even get laws,

58
00:03:00.490 --> 00:03:02.024
if we don't break the law.

59
00:03:02.024 --> 00:03:04.888
&gt;&gt; Multiple: [LAUGH]
&gt;&gt; Audience 1: Breaking the law.

60
00:03:04.888 --> 00:03:06.770
&gt;&gt; Joe Nelson: Breaking the law.

61
00:03:06.770 --> 00:03:08.940
So, it's a whole new
string that's all clear.

62
00:03:08.940 --> 00:03:10.870
You just change it out.

63
00:03:10.870 --> 00:03:16.238
Okay, now let's use the logs.

64
00:03:16.238 --> 00:03:19.070
&gt;&gt; Audience 1: So,
we don't need to map map.

65
00:03:19.070 --> 00:03:21.960
Because it's always gonna work like that.

66
00:03:21.960 --> 00:03:23.540
I would alias that to a function.

67
00:03:23.540 --> 00:03:26.190
It's kind of weird to have
it compose stuff in there.

68
00:03:26.190 --> 00:03:26.940
Maybe not, I don't know.

69
00:03:28.070 --> 00:03:29.994
You need an extra parameter.

70
00:03:29.994 --> 00:03:31.200
&gt;&gt; Joe Nelson: Do I?
See what this maps to.

71
00:03:32.550 --> 00:03:34.920
&gt;&gt; Audience 1: You got your open map,
open compose.

72
00:03:34.920 --> 00:03:35.940
&gt;&gt; Joe Nelson: Yeah, totally, I see.

73
00:03:37.140 --> 00:03:39.830
Map compose and then up here for map.

74
00:03:39.830 --> 00:03:41.500
&gt;&gt; Audience 1: Yeah,
usually I would just pull that out.

75
00:03:41.500 --> 00:03:44.010
You know, like a little helper that
says like target value or something?

76
00:03:45.610 --> 00:03:46.730
But I think it's totally
legit to be in line.

77
00:03:49.170 --> 00:03:52.890
&gt;&gt; [INAUDIBLE]
&gt;&gt; Joe Nelson: Okay,

78
00:03:52.890 --> 00:03:54.840
cool, so we're able to get values.

79
00:03:54.840 --> 00:03:58.770
Now we should, for each value we get,
kick off a search.

80
00:03:58.770 --> 00:03:59.700
This is quite a junk.

81
00:04:02.590 --> 00:04:03.550
What should happen first?

82
00:04:03.550 --> 00:04:04.530
You know what we should do?

83
00:04:04.530 --> 00:04:09.390
We should, for each one we get,
build up the URL that we're going need to.

84
00:04:09.390 --> 00:04:10.860
So we can have a URL stream.

85
00:04:10.860 --> 00:04:14.050
So the things that like not for
each thing I type it's going

86
00:04:14.050 --> 00:04:16.960
to correspond to something or
some api call I would make.

87
00:04:18.240 --> 00:04:26.030
So you can say like a URL stream,
and once again it's

88
00:04:26.030 --> 00:04:31.440
it seems like I guess we're just
carrying through the event stream.

89
00:04:31.440 --> 00:04:34.617
I'll say URL even though it's
just a string, just to remind me.

90
00:04:40.000 --> 00:04:43.388
&gt;&gt; Joe Nelson: Okay, alright I gave
myself a note because I didn't

91
00:04:43.388 --> 00:04:46.830
remember exactly what YouTube takes so-
&gt;&gt; Audience 1: Mims is

92
00:04:46.830 --> 00:04:48.580
complaining that this is hard to read.

93
00:04:48.580 --> 00:04:53.440
I would suggest moving the inner
composition into an actual composition, so

94
00:04:53.440 --> 00:04:55.650
it actually reads better.

95
00:04:55.650 --> 00:04:58.640
&gt;&gt; Joe Nelson: So
take this compose(map map out of here?

96
00:04:58.640 --> 00:05:00.970
&gt;&gt; Audience 1: Yeah, the inner compose.

97
00:05:00.970 --> 00:05:05.100
Like I would just compose map, just
let compose just let value get target,

98
00:05:05.100 --> 00:05:07.580
would be a function of like-
&gt;&gt; Joe Nelson: We could call it,

99
00:05:07.580 --> 00:05:11.260
yeah the function could go
from dom event Yeah value.

100
00:05:11.260 --> 00:05:12.130
To value.

101
00:05:12.130 --> 00:05:20.370
We should call it, like,
event value or something?

102
00:05:20.370 --> 00:05:20.870
&gt;&gt; Audience 1: Sure.

103
00:05:25.590 --> 00:05:27.476
&gt;&gt; Joe Nelson: Strings,
I guess they're gonna be strings.

104
00:05:27.476 --> 00:05:34.780
&gt;&gt; [INAUDIBLE]
&gt;&gt; Joe Nelson: Wait, actually.

105
00:05:39.280 --> 00:05:41.110
&gt;&gt; Audience 1: [INAUDIBLE].

106
00:05:41.110 --> 00:05:43.634
&gt;&gt; Joe Nelson: I'll leave that,
because we'll map that thing.

107
00:05:43.634 --> 00:05:46.480
&gt;&gt; Audience 1: I think usually rule
of thumb is you want to call map at

108
00:05:46.480 --> 00:05:47.200
the caller.

109
00:05:47.200 --> 00:05:50.310
You don't want to force some
weird type into the function.

110
00:05:50.310 --> 00:05:51.000
&gt;&gt; Joe Nelson: Yeah, totally.

111
00:05:51.000 --> 00:05:52.769
I mean the whole point
of part one was like,

112
00:05:52.769 --> 00:05:55.932
you make fewer things like that they
take a journey somewhere so [CROSSTALK].

113
00:05:55.932 --> 00:06:00.306
&gt;&gt; Audience 1: Into the map or
the journey to the factor.

114
00:06:00.306 --> 00:06:05.027
[CROSSTALK] Is anybody like
totally lost right now?

115
00:06:05.027 --> 00:06:06.370
Or are you guys kinda following?

116
00:06:07.840 --> 00:06:09.240
Semi?

117
00:06:09.240 --> 00:06:10.995
All right!
We did our job!

118
00:06:10.995 --> 00:06:13.710
&gt;&gt; Multiple: [LAUGH]
&gt;&gt; Audience 2: We're following but

119
00:06:13.710 --> 00:06:15.165
we're dropping bread crumbs.

120
00:06:15.165 --> 00:06:15.990
&gt;&gt; Joe Nelson: [LAUGH] Alright.

121
00:06:15.990 --> 00:06:16.610
&gt;&gt; Audience 1: Okay.

122
00:06:16.610 --> 00:06:18.200
&gt;&gt; Joe Nelson: And
the repository will be there.

123
00:06:18.200 --> 00:06:22.350
We're just in the there even though
I'm not doing it commit by commit.

124
00:06:22.350 --> 00:06:24.930
That does,
you can look at the diffs between them.

125
00:06:24.930 --> 00:06:27.270
&gt;&gt; Audience 1: Yeah we have
a different-looking project on the,

126
00:06:28.270 --> 00:06:31.380
we just kind of made things earlier
just to make sure it works.

127
00:06:33.100 --> 00:06:37.800
&gt;&gt; Joe Nelson: Okay, for
a URL stream, alright.

128
00:06:37.800 --> 00:06:39.250
Okay.
And so we need to see what is it

129
00:06:39.250 --> 00:06:40.790
that these search URLs look like.

130
00:06:42.680 --> 00:06:43.980
They look like that.

131
00:06:43.980 --> 00:06:47.148
&gt;&gt; Audience 1: Yeah [LAUGH].

132
00:06:47.148 --> 00:06:48.150
&gt;&gt; Joe Nelson: Cool.

133
00:06:48.150 --> 00:06:48.650
This one.

134
00:06:48.650 --> 00:06:52.268
I don't know if it matters to be point
phrased, just kind of a string thing, and

135
00:06:52.268 --> 00:06:54.210
a j query thing, and so I can say.

136
00:06:54.210 --> 00:06:55.080
Wait.

137
00:06:55.080 --> 00:06:57.850
&gt;&gt; Audience 1: Can we all get crazy
with monoides, but I don't want to.

138
00:06:57.850 --> 00:06:58.990
&gt;&gt; Joe Nelson: Yeah.

139
00:06:58.990 --> 00:07:02.019
We could say search for term.

140
00:07:04.434 --> 00:07:05.520
&gt;&gt; Joe Nelson: Or term URL.

141
00:07:07.710 --> 00:07:11.105
And that takes a term, which is a string,
and gives it over to URL.

142
00:07:15.038 --> 00:07:17.131
&gt;&gt; Joe Nelson: So
I was promising to get rid of names and

143
00:07:17.131 --> 00:07:18.980
there are plenty of names in here.

144
00:07:18.980 --> 00:07:23.112
But at least they're not,
maybe they are of a different sort, but

145
00:07:23.112 --> 00:07:25.747
they're not like a very lowest level.

146
00:07:25.747 --> 00:07:28.053
&gt;&gt; Audience 1: We're are gluing
together primitives to make

147
00:07:28.053 --> 00:07:32.072
our application-specific DSL that we're
just kind of putting together down at

148
00:07:32.072 --> 00:07:33.125
the bottom.

149
00:07:33.125 --> 00:07:33.625
&gt;&gt; Joe Nelson: Yeah.

150
00:07:42.130 --> 00:07:45.590
&gt;&gt; Joe Nelson: So
return this if you look it's like q= that.

151
00:07:45.590 --> 00:07:47.350
And there's this extra alt=json, so

152
00:07:47.350 --> 00:07:50.140
there's like a little helper we
can use for that, which plus.

153
00:07:52.320 --> 00:07:57.365
You give it a map of like q goes

154
00:07:57.365 --> 00:08:02.423
to term and alt goes to json.

155
00:08:02.423 --> 00:08:05.372
And it makes a query string out of it.

156
00:08:05.372 --> 00:08:07.023
&gt;&gt; Multiple: [INAUDIBLE]
&gt;&gt; Joe Nelson: What is?

157
00:08:07.023 --> 00:08:09.700
&gt;&gt; Multiple: [INAUDIBLE]
What is [INAUDIBLE]

158
00:08:09.700 --> 00:08:11.020
&gt;&gt; Joe Nelson: Yeah, I don't know what

159
00:08:11.020 --> 00:08:12.360
that word was.

160
00:08:12.360 --> 00:08:15.950
Okay, cool, so now we got term URL.

161
00:08:15.950 --> 00:08:19.710
Now our urlStream is going to
map over the original, but

162
00:08:19.710 --> 00:08:21.150
just turn it into that I suppose.

163
00:08:21.150 --> 00:08:22.963
So I compose.

164
00:08:22.963 --> 00:08:25.454
Are we inside of Monad?

165
00:08:25.454 --> 00:08:27.511
We're going to have to map again.

166
00:08:27.511 --> 00:08:34.120
&gt;&gt; Audience 1: We're going to get it down,
we're good.

167
00:08:34.120 --> 00:08:37.187
&gt;&gt; Joe Nelson: Okay, I'm going to
be mapping over the value stream.

168
00:08:37.187 --> 00:08:40.429
So now I have to begin now
like it's a new stream.

169
00:08:40.429 --> 00:08:41.900
&gt;&gt; Audience 1: Yeah,
so you're going to map,

170
00:08:41.900 --> 00:08:45.426
wait,
&gt;&gt; Joe Nelson: Term urlvalueStream, and

171
00:08:45.426 --> 00:08:47.562
then do a URL stream.

172
00:08:58.271 --> 00:08:58.840
&gt;&gt; Joe Nelson: Cool

