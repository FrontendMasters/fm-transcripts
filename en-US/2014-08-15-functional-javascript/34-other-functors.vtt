WEBVTT

1
00:00:00.000 --> 00:00:04.529
[MUSIC]

2
00:00:04.529 --> 00:00:06.820
&gt;&gt; Brian Lonsdorf: We'll
go over these pretty quick.

3
00:00:06.820 --> 00:00:11.202
It's about the same as every single
thing else that we have been looking at.

4
00:00:11.202 --> 00:00:13.810
But there are other functors out there.

5
00:00:13.810 --> 00:00:18.198
We've seen null checks and IO, and

6
00:00:18.198 --> 00:00:21.960
air handling with either.

7
00:00:21.960 --> 00:00:26.486
We have EventStreams which could be,
you could translate,

8
00:00:26.486 --> 00:00:30.350
a list,
an event you say add event listener.

9
00:00:30.350 --> 00:00:33.240
You can't compose add event listener,
that doesn't do anything.

10
00:00:33.240 --> 00:00:34.666
It's like run this function every time.

11
00:00:34.666 --> 00:00:37.429
Well, run this function every
time this thing happens,

12
00:00:37.429 --> 00:00:38.818
that sounds like a map to me.

13
00:00:38.818 --> 00:00:42.623
What if I compose an EventStream
of every click on the screen,

14
00:00:42.623 --> 00:00:44.169
then I can map over that.

15
00:00:44.169 --> 00:00:46.260
It's just the same as add event listener,
run this function.

16
00:00:46.260 --> 00:00:50.142
But I have an EventStream out of it,
and I can keep composing that.

17
00:00:50.142 --> 00:00:51.862
So let's look how that works.

18
00:00:51.862 --> 00:00:54.452
We use Bacon here, which is probably
the most popular except for

19
00:00:54.452 --> 00:00:57.480
RxJS, works similarly anyway,
different names.

20
00:00:59.450 --> 00:01:05.630
Bacon just has it's own weird API
to get click events and what not.

21
00:01:05.630 --> 00:01:06.910
That's one way to do it.

22
00:01:06.910 --> 00:01:10.360
This way is kinda neat,
cuz I don't have to get the element first.

23
00:01:10.360 --> 00:01:13.280
I can just say get all
the clicks on the document.

24
00:01:13.280 --> 00:01:18.805
And then we just say, yeah, hey,
anytime there's a click on the document,

25
00:01:18.805 --> 00:01:22.035
return me the ID with
the pound in front of it.

26
00:01:22.035 --> 00:01:24.369
So I get an EventStream of strings.

27
00:01:24.369 --> 00:01:30.169
Now, that top line where we actually
map the turning it into an ID,

28
00:01:30.169 --> 00:01:34.105
that would be the same
as add event listener,

29
00:01:34.105 --> 00:01:38.470
document click,
run this function, make an ID.

30
00:01:39.560 --> 00:01:44.148
But what we get with streams is a tangible
object just like we had with all

31
00:01:44.148 --> 00:01:47.524
the other functors that we can compose and
map over.

32
00:01:47.524 --> 00:01:50.273
So now we have this
EventStream of strings,

33
00:01:50.273 --> 00:01:52.960
cuz it transformed those clicks into IDs.

34
00:01:52.960 --> 00:01:58.604
And it's all lazy, nothing happens until
we call onValue down at the bottom,

35
00:01:58.604 --> 00:02:03.222
which kicks off a subscription,
really starts listening, and

36
00:02:03.222 --> 00:02:06.770
we'll run that for
every time that happens.

37
00:02:06.770 --> 00:02:07.840
Let's look at another example.

38
00:02:09.170 --> 00:02:13.690
So just like we're returning,
we're mapping those things into IDs,

39
00:02:13.690 --> 00:02:15.560
now we're actually running
query selectors on it.

40
00:02:15.560 --> 00:02:16.875
We can map again, right?

41
00:02:16.875 --> 00:02:18.770
Cuz it's still just an EventStream.

42
00:02:18.770 --> 00:02:21.370
That's what the _s is
supposed to kind of denote.

43
00:02:21.370 --> 00:02:24.410
So we've got this EventStream of IDs
coming through, and we can find them.

44
00:02:24.410 --> 00:02:25.990
Now we've got an EventStream of elements.

45
00:02:25.990 --> 00:02:29.612
So whenever you click something,
I get a element coming through.

46
00:02:29.612 --> 00:02:32.963
And down at the bottom,
I subscribe to it with onValue, and

47
00:02:32.963 --> 00:02:35.654
I'll just alert the innerHTML
of the element.

48
00:02:35.654 --> 00:02:37.580
And that's pretty neat.

49
00:02:37.580 --> 00:02:43.389
Notice that I could have just mapped
once and got the ID selector.

50
00:02:43.389 --> 00:02:44.520
But I'm mapping twice.

51
00:02:44.520 --> 00:02:45.640
It's like a composition, right?

52
00:02:45.640 --> 00:02:48.060
We talked about that a little bit map,
and map.

53
00:02:48.060 --> 00:02:52.100
And map is like a kind of
composition over functors.

54
00:02:52.100 --> 00:02:55.149
And you can kind of choose
which way to do it, but

55
00:02:55.149 --> 00:02:59.583
just know that every time you map over it,
you get a new EventStream.

56
00:02:59.583 --> 00:03:01.816
And here's kind of a crazier example,

57
00:03:01.816 --> 00:03:05.072
this is the last one I'll show
before we go on to the next.

58
00:03:05.072 --> 00:03:09.300
But maybe there's one more, yeah.

59
00:03:09.300 --> 00:03:12.840
The point of this one is to show that I
can keep mapping over this EventStream,

60
00:03:12.840 --> 00:03:15.620
and it just keeps
transforming the EventStream.

61
00:03:15.620 --> 00:03:17.690
So we've got these hovers, right?

62
00:03:17.690 --> 00:03:20.998
And I've got a stream of hovers,
and we'll get their IDs, and

63
00:03:20.998 --> 00:03:25.300
we'll turn it into query selectors
just like we did in the other example.

64
00:03:25.300 --> 00:03:30.330
And then we're gonna
actually get their post ID

65
00:03:30.330 --> 00:03:34.380
from the elements, and
then we'll get the API call.

66
00:03:34.380 --> 00:03:35.530
And none of it happens.

67
00:03:37.090 --> 00:03:38.279
It's all totally pure.

68
00:03:39.370 --> 00:03:42.550
So, you can you do crazy stuff like that.

69
00:03:42.550 --> 00:03:46.110
It's kind of the reactive FRP
stuff everybody's talking about.

70
00:03:46.110 --> 00:03:49.360
All this stuff is kind of wired together
that whenever some hover happens,

71
00:03:49.360 --> 00:03:50.930
the rest of it kicks off.

72
00:03:50.930 --> 00:03:54.222
Except nothing happens,
until I call onValue.

73
00:03:54.222 --> 00:03:55.442
&gt;&gt; Speaker 2: Hey, Brian.

74
00:03:55.442 --> 00:03:56.045
&gt;&gt; Brian Lonsdorf: Yo?

75
00:03:56.045 --> 00:03:56.575
&gt;&gt; Speaker 2: There was
a question in chat.

76
00:03:56.575 --> 00:04:00.700
What is this Bacon library that
has this from event target?

77
00:04:00.700 --> 00:04:03.533
&gt;&gt; Brian Lonsdorf: It's just
an EventStream library.

78
00:04:03.533 --> 00:04:05.244
There's RxJS, Bacon.

79
00:04:05.244 --> 00:04:11.158
There's bunch of libraries out there that
you can look up that have these things.

80
00:04:11.158 --> 00:04:13.056
&gt;&gt; Speaker 2: It's
basically event delegation,

81
00:04:13.056 --> 00:04:15.267
and all of the events
roll up into a stream.

82
00:04:15.267 --> 00:04:17.142
&gt;&gt; Brian Lonsdorf: Yeah,
but it's a object, so

83
00:04:17.142 --> 00:04:20.207
you can do crazy stuff-
&gt;&gt; Speaker 3: [CROSSTALK] Map over every

84
00:04:20.207 --> 00:04:24.459
event on the page that's
within the document.

85
00:04:24.459 --> 00:04:27.879
&gt;&gt; Brian Lonsdorf: That's right, and we'll
be going over some of the libraries, and

86
00:04:27.879 --> 00:04:32.079
you'll be able to take the GitHub code and
actually look at all these examples, and

87
00:04:32.079 --> 00:04:32.859
all the stuff.

88
00:04:32.859 --> 00:04:35.927
So, don't get too hung up on where
is that, I need that right now.

89
00:04:35.927 --> 00:04:36.869
Well, you'll get it.

90
00:04:36.869 --> 00:04:37.589
It's cool.

91
00:04:37.589 --> 00:04:42.082
[LAUGH] So, yeah,
notice I snuck a little future in there.

92
00:04:42.082 --> 00:04:43.565
We're about to talk about that.

93
00:04:43.565 --> 00:04:45.380
So we get the ProductById.

94
00:04:45.380 --> 00:04:50.050
The thing that I thought was important
to show was that this whole app won't

95
00:04:50.050 --> 00:04:54.230
run until a hover happens,
and I finally subscribe.

96
00:04:54.230 --> 00:04:56.850
Well, I just say alert, so
it's gonna alert whatever post or

97
00:04:56.850 --> 00:04:58.120
product comes through or whatever.

98
00:04:59.440 --> 00:05:03.040
All right, moving on, we're gonna do
examples of EventStreams and futures in

99
00:05:03.040 --> 00:05:05.870
a minute, and it's gonna feel exactly
like the other functors, so no big deal.

100
00:05:05.870 --> 00:05:08.610
I'll just do it them cuz we gotta hurry,
sorry.

101
00:05:10.650 --> 00:05:13.220
So we have this future
of an eventual value.

102
00:05:13.220 --> 00:05:16.490
This is just like a promise,
but it's lazy.

103
00:05:18.980 --> 00:05:22.150
So it's just like kinda IO in that way.

104
00:05:22.150 --> 00:05:26.535
It's got IO rolled into it, cuz when
are you going to get some future value and

105
00:05:26.535 --> 00:05:29.200
it's not gonna be IO?

106
00:05:29.200 --> 00:05:32.800
Like you're gonna read a file,
make an API call,

107
00:05:32.800 --> 00:05:36.040
I guess there's one case where you
have maybe a long running calculation.

108
00:05:36.040 --> 00:05:41.070
But nine times out of ten,
it's a future value that

109
00:05:41.070 --> 00:05:45.530
will be some side effect and it'll come
back eventually with a value, right?

110
00:05:45.530 --> 00:05:50.970
So just like EventStreams, just like IOs,
these things build up computations,

111
00:05:50.970 --> 00:05:55.200
and they don't run until you kick
it off with this fork method.

112
00:05:55.200 --> 00:05:57.924
So let's look at that.

113
00:05:57.924 --> 00:06:04.608
So if I do a http.get of posts,
that'll return me a future.

114
00:06:04.608 --> 00:06:09.085
And then we'll just map makeHtml
with the post from the future.

115
00:06:09.085 --> 00:06:13.460
[LAUGH] So this is the alternative

116
00:06:13.460 --> 00:06:17.630
to a callback, and
promises work the exact same way.

117
00:06:17.630 --> 00:06:23.850
If this returned a promise, I could map
make Html over the value inside of that.

118
00:06:23.850 --> 00:06:26.750
So it's just like then on a promise.

119
00:06:26.750 --> 00:06:31.130
The idea is that we map this
function over the eventual result.

120
00:06:33.230 --> 00:06:36.420
Now, this fork thing is
where it gets weird.

121
00:06:36.420 --> 00:06:39.460
The whole app is gonna look
like this stuff above here.

122
00:06:39.460 --> 00:06:43.260
But the very end of the line is gonna have
this fork of where you are either gonna

123
00:06:43.260 --> 00:06:48.490
have an error, or whatever the result
of this makeHtml, which is the page.

124
00:06:49.750 --> 00:06:53.020
That's an important concept
cuz futures will fail.

125
00:06:53.020 --> 00:06:54.890
There's a good chance your
future is gonna fail,

126
00:06:54.890 --> 00:06:58.970
whether it's an API call or reading a file
that might not be there, or whatever else.

127
00:06:58.970 --> 00:07:03.560
So, they've kind of rolled IO and
either into this one type kind of,

128
00:07:03.560 --> 00:07:08.995
where you're either gonna have
your error or your future value.

129
00:07:08.995 --> 00:07:11.982
And it's all lazy, I have to call fork.

130
00:07:11.982 --> 00:07:13.145
It's just like run IO.

131
00:07:13.145 --> 00:07:16.040
I say like, now do it.

132
00:07:16.040 --> 00:07:19.604
So let's look at the next one.

133
00:07:19.604 --> 00:07:24.586
Here we've got our, whoops, same idea.

134
00:07:24.586 --> 00:07:29.328
We're gonna get our post,
which is gonna return us a future.

135
00:07:29.328 --> 00:07:32.296
And then,
we're gonna map(createPage) over it.

136
00:07:32.296 --> 00:07:35.350
And we're gonna get the title of the post,
make some HTML, whatever,

137
00:07:35.350 --> 00:07:37.390
keep mapping things, doing whatever.

138
00:07:37.390 --> 00:07:42.000
And sure enough, down at the bottom,
we actually do some effect with it.

139
00:07:42.000 --> 00:07:43.620
We're gonna put it on the page.

140
00:07:43.620 --> 00:07:46.909
You can't just get the value now,
it's not gonna be there.

141
00:07:46.909 --> 00:07:49.461
You have to map things over it and
eventually use it.

142
00:07:49.461 --> 00:07:53.133
And that's an important
concept with any functor,

143
00:07:53.133 --> 00:07:56.982
is that at the end of the line,
this is the impure code.

144
00:07:56.982 --> 00:08:00.641
All this stuff on the that's your app, and
it's all pure, and it's all wonderful, and

145
00:08:00.641 --> 00:08:02.126
you can just treat it like it's there.

146
00:08:02.126 --> 00:08:06.649
Boom, you finally call it, and it's
either gonna blow up or not, all right?

147
00:08:06.649 --> 00:08:11.520
&gt;&gt; Speaker 2: People are confused where
the future is, but that's http.get.

148
00:08:11.520 --> 00:08:13.730
&gt;&gt; Brian Lonsdorf: Yes,
http.get is gonna return a future.

149
00:08:13.730 --> 00:08:15.220
I didn't actually, explicitly,

150
00:08:15.220 --> 00:08:17.770
make a future here, because it's
a little bit weird to look at.

151
00:08:17.770 --> 00:08:21.690
And I will guarantee you nine times out
of ten, even if you're using promises or

152
00:08:21.690 --> 00:08:25.780
whatever, the HTTP library,
or the read file, or

153
00:08:25.780 --> 00:08:29.438
the whatever you're using, is gonna return
you a promise or a future, or whatever.

154
00:08:29.438 --> 00:08:31.636
So you don't have to really be
making them all the time yourself.

155
00:08:31.636 --> 00:08:35.043
So just know that this return to future,
so you have to map over it.

156
00:08:35.043 --> 00:08:36.460
What else would we do?

157
00:08:36.460 --> 00:08:39.085
[LAUGH]
&gt;&gt; Speaker 2: They're wondering what what

158
00:08:39.085 --> 00:08:41.942
is this http.get library,
where is that coming from?

159
00:08:41.942 --> 00:08:44.111
&gt;&gt; Brian Lonsdorf: You guys,
it's not real.

160
00:08:44.111 --> 00:08:47.933
[LAUGH]
&gt;&gt; Speaker 3: It's pseudo code,

161
00:08:47.933 --> 00:08:49.068
[CROSSTALK] normally.

162
00:08:49.068 --> 00:08:51.003
&gt;&gt; Brian Lonsdorf: Yeah, hang on tight,
we're gonna do the demo soon,

163
00:08:51.003 --> 00:08:52.559
that's why I'm-
&gt;&gt; Speaker 3: [CROSSTALK] Sorry

164
00:08:52.559 --> 00:08:53.435
&gt;&gt; Brian Lonsdorf: Yeah, that's why

165
00:08:53.435 --> 00:08:57.433
I'm running through this really quickly,
it's cuz we're gonna go use the demo, and

166
00:08:57.433 --> 00:08:59.370
you'll see a real future and a real HTTP.

167
00:08:59.370 --> 00:09:03.290
And here, in the jsbin right here,

168
00:09:03.290 --> 00:09:06.690
I'm just gonna fake it with a set timeout,
but you can go look at that.

169
00:09:06.690 --> 00:09:10.590
I just wanted to point out this last one,
readFile.

170
00:09:10.590 --> 00:09:13.754
If you're in Node, this stuff is awesome.

171
00:09:13.754 --> 00:09:16.930
If you're in Node, everything is
asynchronous all the time, and

172
00:09:16.930 --> 00:09:18.490
it's a pain in the butt.

173
00:09:18.490 --> 00:09:22.485
And this stuff where you're saying,
hey, read the file and

174
00:09:22.485 --> 00:09:27.385
then map over it makes it so
much simpler than this callback hell.

175
00:09:27.385 --> 00:09:29.335
This solves that for you.

176
00:09:29.335 --> 00:09:33.026
And you can do a lot more
than just combine them.

177
00:09:33.026 --> 00:09:37.631
And they adhere to the functor and
we'll see monoid, implicative, and

178
00:09:37.631 --> 00:09:39.304
monad interface as well.

179
00:09:39.304 --> 00:09:41.866
So you can do all sorts of
crazy stuff with these things.

180
00:09:41.866 --> 00:09:46.540
&gt;&gt; Speaker 3: Isn't in Node there an easy
utility that you can wrap around native

181
00:09:46.540 --> 00:09:51.130
functions and get back a new
function that returns the functor?

182
00:09:51.130 --> 00:09:53.570
&gt;&gt; Brian Lonsdorf: Oftentimes,
promise libraries give you that.

183
00:09:53.570 --> 00:09:55.980
You could probably do
the same thing with futures.

184
00:09:55.980 --> 00:09:57.340
The difference between the promise and

185
00:09:57.340 --> 00:10:02.090
the future is the promise,
it's like you have to run it at the end.

186
00:10:02.090 --> 00:10:05.060
And that's this fork, error function,
or a success function.

