WEBVTT

1
00:00:00.000 --> 00:00:04.526
[MUSIC]

2
00:00:04.526 --> 00:00:08.210
&gt;&gt; Brian Lonsdorf: I lied,
container's actually called identity.

3
00:00:08.210 --> 00:00:12.370
So, we're gonna look at identity here and
just pretend it's container, okay?

4
00:00:14.110 --> 00:00:15.780
Same thing, different name.

5
00:00:16.860 --> 00:00:20.020
Okay, so let's do exercise one together.

6
00:00:20.020 --> 00:00:24.860
I run mine a little bit differently,
but same idea.

7
00:00:24.860 --> 00:00:29.462
We've got our test down here that's

8
00:00:29.462 --> 00:00:34.517
going to run our example and pass or not.

9
00:00:34.517 --> 00:00:41.255
So we have to define how how to,
yeah, yeah, we're gonna use add and

10
00:00:41.255 --> 00:00:47.180
map to make a function that
increments a value inside a functor.

11
00:00:47.180 --> 00:00:48.930
Does anybody want to give me some help?

12
00:00:48.930 --> 00:00:50.180
Does anybody kind of get this stuff?

13
00:00:52.596 --> 00:00:55.836
&gt;&gt; Brian Lonsdorf: [LAUGH] All right,
let's try it.

14
00:00:55.836 --> 00:01:00.090
Okay, so, and I strongly encourage
you to just open this up and

15
00:01:00.090 --> 00:01:03.481
just start playing with it,
start wailing on it.

16
00:01:03.481 --> 00:01:09.387
Like over here, I could say,
what if I have Identity of 3?

17
00:01:09.387 --> 00:01:11.818
It's this big gross thing, all right.

18
00:01:11.818 --> 00:01:14.412
Let me do toString on it,
so it looks nice.

19
00:01:14.412 --> 00:01:16.360
We have an Identity of 3, literally.

20
00:01:16.360 --> 00:01:18.510
How do I add 1 to that?

21
00:01:18.510 --> 00:01:23.124
I can't do add 1 with Identity of 3,
right?

22
00:01:23.124 --> 00:01:25.091
That's not gonna work.

23
00:01:25.091 --> 00:01:27.799
[LAUGH] cuz add is not defined.

24
00:01:27.799 --> 00:01:31.157
Now I get, 1Identity(3),
that doesn't work.

25
00:01:31.157 --> 00:01:34.527
I want to add 1 inside the Identity.

26
00:01:35.590 --> 00:01:37.820
We learned about this map
function a minute ago.

27
00:01:37.820 --> 00:01:39.820
So that's probably what it's gonna be.

28
00:01:39.820 --> 00:01:43.429
Does anybody wanna give me
a little help at this point?

29
00:01:43.429 --> 00:01:46.390
&gt;&gt; Brian Lonsdorf: Okay, we'll keep going.

30
00:01:46.390 --> 00:01:53.081
I want us to understand this, so don't let
me go on until we get this, all right?

31
00:01:53.081 --> 00:01:56.555
Somebody's asking what pointfree and
JS Bin is.

32
00:01:56.555 --> 00:02:01.473
Pointfree is a library that
implements the fantasy-land

33
00:02:01.473 --> 00:02:06.500
spec that we'll talk about later,
but in a pointfree way.

34
00:02:06.500 --> 00:02:07.610
Hey, hey, Valentine's has got it.

35
00:02:10.410 --> 00:02:11.595
So, am I saying your name right?

36
00:02:11.595 --> 00:02:14.824
[LAUGH] Like the saint, right?

37
00:02:14.824 --> 00:02:20.747
So we wanna map(_.add(1))
over Identity of whatever,

38
00:02:20.747 --> 00:02:24.444
I'm just writing it here so we can see.

39
00:02:24.444 --> 00:02:28.092
So that'll be, see,
it looks a little crazy like that,

40
00:02:28.092 --> 00:02:29.769
let me do a toString here.

41
00:02:29.769 --> 00:02:33.970
JS Bin outputs the whole thing for
some reason.

42
00:02:33.970 --> 00:02:36.820
If you did it in the console,
it would look a lot nicer.

43
00:02:36.820 --> 00:02:40.496
But we're gonna get Identity(4).

44
00:02:40.496 --> 00:02:41.620
This isn't the solution,

45
00:02:41.620 --> 00:02:46.360
I want a function that increments
a value inside any functor.

46
00:02:46.360 --> 00:02:47.484
Well, there it is,

47
00:02:47.484 --> 00:02:51.670
I'm just going to map(_.add(1))
over whatever functor comes in.

48
00:02:51.670 --> 00:02:55.757
So let's try this out, see if it works.

49
00:02:55.757 --> 00:02:56.940
Okay, exercise one is okay.

50
00:02:56.940 --> 00:02:59.660
So let's talk about that,
let's beat it up.

51
00:02:59.660 --> 00:03:02.230
Ask me questions, tell me why I'm wrong.

52
00:03:02.230 --> 00:03:06.160
Let's talk about it, [LAUGH] anybody?

53
00:03:06.160 --> 00:03:08.093
You there in the hoodie.

54
00:03:08.093 --> 00:03:10.282
[LAUGH]
&gt;&gt; Off Camera 1: [LAUGH]

55
00:03:10.282 --> 00:03:12.326
&gt;&gt; Brian Lonsdorf: He's not a plant.

56
00:03:12.326 --> 00:03:16.610
&gt;&gt; Off Camera 1: How is it,
I thought map took a lot of arguments?

57
00:03:16.610 --> 00:03:18.588
&gt;&gt; Brian Lonsdorf: Yeah,
no, no, it's curried.

58
00:03:18.588 --> 00:03:21.311
So we're only giving it one right here,

59
00:03:21.311 --> 00:03:25.890
just like add takes more than one
arguments, and that's curried.

60
00:03:25.890 --> 00:03:27.640
So we're mapping curried with add.

61
00:03:28.640 --> 00:03:32.990
Normally we'd do it like,
second argument, Identity(2), etc.

62
00:03:32.990 --> 00:03:35.220
So that's a great question.

63
00:03:35.220 --> 00:03:38.755
We just went over that in part one.

64
00:03:38.755 --> 00:03:41.055
[LAUGH] But part of, part of map,

65
00:03:41.055 --> 00:03:46.780
part of what everybody is hardwired to
think map does is run many times, right?

66
00:03:46.780 --> 00:03:48.438
Everybody's like, map will run many times.

67
00:03:48.438 --> 00:03:50.740
[LAUGH] And it doesn't.

68
00:03:50.740 --> 00:03:53.300
If you have an array of one item,
it runs once.

69
00:03:53.300 --> 00:03:55.950
If you have a container with
one thing in it, it runs once.

70
00:03:55.950 --> 00:03:59.760
If you have a maybe with one thing in it,
it's gonna maybe run that once.

71
00:03:59.760 --> 00:04:05.520
So think of it as,
map is not about iterating.

72
00:04:05.520 --> 00:04:09.970
It's about going inside of a object or
a data structure and

73
00:04:09.970 --> 00:04:16.350
running a function from within that data
structure on its properties or behavior.

74
00:04:18.620 --> 00:04:21.230
Identity will become
a little bit clearer later.

75
00:04:22.580 --> 00:04:27.364
The main thing to think about right now
is just like a neutral functor that

76
00:04:27.364 --> 00:04:32.000
you can play with and so you get a feel
for map, with no added behavior.

77
00:04:33.560 --> 00:04:35.480
So let's do another one, let's see.

78
00:04:35.480 --> 00:04:38.570
So I'm going to map this real function,
this is a little bit clearer.

79
00:04:38.570 --> 00:04:43.480
So I'm going to get x, and x will be
whatever's inside my identity, okay?

80
00:04:43.480 --> 00:04:47.640
And I'm going to do x.toUpperCase(),
awesome.

81
00:04:47.640 --> 00:04:50.733
This is gonna be the best.

82
00:04:50.733 --> 00:04:52.201
[LAUGH] And then I have my identity.

83
00:04:52.201 --> 00:04:56.815
Ident, I've lost how to spell identity.

84
00:04:56.815 --> 00:05:00.350
Identity, yeah.

85
00:05:02.180 --> 00:05:06.000
Of, let's do someString, all right.

86
00:05:08.990 --> 00:05:10.525
And, that didn't work.

87
00:05:10.525 --> 00:05:11.025
Gotta return, maybe?

88
00:05:12.152 --> 00:05:14.950
&gt;&gt; Brian Lonsdorf: Yeah, gotta return.

89
00:05:14.950 --> 00:05:17.439
Okay, let's do it over here on the left.

90
00:05:23.329 --> 00:05:24.574
&gt;&gt; Brian Lonsdorf: Yeah, this is awesome.

91
00:05:24.574 --> 00:05:27.293
&gt;&gt; Off Camera 1: You
should do it [INAUDIBLE].

92
00:05:27.293 --> 00:05:29.613
&gt;&gt; Brian Lonsdorf: Yeah, I'm just
gonna do over here and like name it.

93
00:05:29.613 --> 00:05:34.250
Do it, thing.

94
00:05:34.250 --> 00:05:36.320
All right, so it takes x.

95
00:05:36.320 --> 00:05:43.410
In this case,
let's make x firehose to commiserate.

96
00:05:43.410 --> 00:05:48.938
And then we'll return x.toUpperCase().

97
00:05:48.938 --> 00:05:50.580
All right.

98
00:05:50.580 --> 00:05:52.698
Now we run this.

99
00:05:52.698 --> 00:05:56.370
And you know what I'm gonna do?

100
00:05:56.370 --> 00:06:01.436
I'm gonna call toString
on thing at the end.

101
00:06:01.436 --> 00:06:05.953
Thing, thing isn't, thing is already
there, yeah, thing.toString.

102
00:06:05.953 --> 00:06:10.420
This, seriously,
having a call toString is not common,

103
00:06:10.420 --> 00:06:13.259
it's just because we're in JS Bin.

104
00:06:13.259 --> 00:06:15.859
Is this too low on the screen for
everybody?

105
00:06:18.230 --> 00:06:19.354
&gt;&gt; Off Camera 1: Is it too what?

106
00:06:19.354 --> 00:06:20.028
&gt;&gt; Brian Lonsdorf: Low
on the screen to see?

107
00:06:20.028 --> 00:06:22.822
&gt;&gt; Off Camera 1: It's fine.

108
00:06:22.822 --> 00:06:24.197
&gt;&gt; Brian Lonsdorf: Okay.

109
00:06:24.197 --> 00:06:25.307
So let's try a different one.

110
00:06:25.307 --> 00:06:29.014
So x became,
let's give ourselves some room here,

111
00:06:29.014 --> 00:06:33.999
x became firehose inside the map,
and it worked all inside Identity.

112
00:06:35.140 --> 00:06:38.130
So mapping this function over
identity of a firehouse.

113
00:06:39.230 --> 00:06:41.299
x became the firehose, we uppercased it.

114
00:06:41.299 --> 00:06:47.462
And then what we get is Identity with
the uppercase FIREHOSE in it, neat.

115
00:06:47.462 --> 00:06:51.280
[LAUGH] So
we ran a function inside of identity.

116
00:06:51.280 --> 00:06:52.750
Let's think of another example.

117
00:06:53.900 --> 00:06:59.503
Let's do, we'll do our array, why not?

118
00:06:59.503 --> 00:07:01.575
4, 3, 2, 1.

119
00:07:01.575 --> 00:07:03.090
And we'll just do reverse on that.

120
00:07:03.090 --> 00:07:06.850
The destructive impure reverse [LAUGH].

121
00:07:08.680 --> 00:07:10.940
So we'll do our thing.toString.

122
00:07:10.940 --> 00:07:13.100
There it is, it reversed it.

123
00:07:15.040 --> 00:07:16.525
Are you guys getting a little
bit of a feel for it?

124
00:07:16.525 --> 00:07:18.220
Are you playing with it?

125
00:07:18.220 --> 00:07:20.570
Or are you just staring at it and

126
00:07:20.570 --> 00:07:24.230
trying to understand why the hell
map is working on the Identity?

127
00:07:28.920 --> 00:07:32.727
&gt;&gt; Off Camera 2: We're having some
confusion in the chat on what thing is,

128
00:07:32.727 --> 00:07:35.080
what we're going over with that.

129
00:07:35.080 --> 00:07:35.630
&gt;&gt; Brian Lonsdorf: I'm sorry.

130
00:07:35.630 --> 00:07:39.952
It is our test function we're defining
to play with, because this is kind of

131
00:07:39.952 --> 00:07:44.220
hard to work in, so I'm gonna work over
here and then just run it over here.

132
00:07:45.480 --> 00:07:48.940
So it's actually not our test function,
to be honest,

133
00:07:48.940 --> 00:07:51.760
it's our, there it is,
now it's a function.

134
00:07:54.070 --> 00:07:59.889
So if I call test function with identity,

135
00:07:59.889 --> 00:08:02.561
yech, toString.

136
00:08:02.561 --> 00:08:09.280
Okay so, let's see,
let me think of one more example here.

137
00:08:09.280 --> 00:08:14.006
Because we've gotta,
I've gotta let you guys play with this.

138
00:08:14.006 --> 00:08:16.216
I gotta cut you free.

139
00:08:16.216 --> 00:08:17.198
You have to fly [LAUGH].

140
00:08:17.198 --> 00:08:23.391
Somebody asked, does Identity
act as a list within a map call?

141
00:08:23.391 --> 00:08:25.440
No it doesn't.

142
00:08:25.440 --> 00:08:28.060
There is no array going on here.

143
00:08:28.060 --> 00:08:32.620
This is a totally different
map than you're used to.

144
00:08:32.620 --> 00:08:39.218
So identity is just sitting
around something, anything.

145
00:08:39.218 --> 00:08:43.889
Let's make it, does anyone know the date,

146
00:08:43.889 --> 00:08:47.310
getDay or something like that?

147
00:08:47.310 --> 00:08:52.726
All right, so
now we're gonna map this over a new date.

148
00:08:52.726 --> 00:08:54.984
&gt;&gt; Brian Lonsdorf: See if that works.

149
00:08:54.984 --> 00:09:04.135
[LAUGH]
&gt;&gt; Brian Lonsdorf: That's weird,

150
00:09:04.135 --> 00:09:04.868
what'd I do?

151
00:09:04.868 --> 00:09:07.837
&gt;&gt; Off Camera 1: Did you run it first?

152
00:09:07.837 --> 00:09:09.497
&gt;&gt; Brian Lonsdorf: [LAUGH] good old.

153
00:09:09.497 --> 00:09:15.750
Wait, no, but it should already have run
the map over the identity of the new date.

154
00:09:15.750 --> 00:09:17.202
Did I do it wrong?

155
00:09:17.202 --> 00:09:21.194
Maybe I have to re, I see,
you've gotta run it to refresh it.

156
00:09:21.194 --> 00:09:22.534
toString of undefined.

157
00:09:22.534 --> 00:09:28.180
I don't know what the actual date
getDay function is, it doesn't matter.

158
00:09:28.180 --> 00:09:30.960
The point is that Identity
has anything inside it.

159
00:09:30.960 --> 00:09:33.150
It could be a date, x becomes the date.

160
00:09:33.150 --> 00:09:36.230
It could be a string, x becomes a string,
it could be whatever.

161
00:09:36.230 --> 00:09:40.270
Identity is like a list of one thing.

162
00:09:42.220 --> 00:09:47.630
So if I have 2,
I could make 2 plus 2, right?

163
00:09:47.630 --> 00:09:49.260
x becomes 2.
Does everybody see that?

164
00:09:51.210 --> 00:09:55.550
&gt;&gt; Off Camera 2: Hey, Brian, there's
a question from James M in chat on whether

165
00:09:55.550 --> 00:10:03.710
this, I think he means identity as kind of
like a with block in JavaScript or Python.

166
00:10:03.710 --> 00:10:04.620
&gt;&gt; Brian Lonsdorf: Don't
think of that way.

167
00:10:04.620 --> 00:10:06.037
You're just going to destroy your brain.

168
00:10:06.037 --> 00:10:11.000
[LAUGH] I mean, if that's the way
that makes sense to you, sort of, but

169
00:10:11.000 --> 00:10:15.000
I guess you can see that
you're getting the context.

170
00:10:15.000 --> 00:10:17.870
It's not going to change this,
if that's what you're worried about.

171
00:10:17.870 --> 00:10:20.320
We're not gonna use this at all,
which is pretty great.

172
00:10:20.320 --> 00:10:24.129
Except for
in inside the implementations of objects,

173
00:10:24.129 --> 00:10:26.623
which you don't have to deal with.

174
00:10:26.623 --> 00:10:27.850
Yay, no this!

175
00:10:27.850 --> 00:10:33.922
[LAUGH] So let's run this and try to do
this with a list here, just make sure.

176
00:10:33.922 --> 00:10:36.129
Okay, I get a 4 out,
because I called toString on it.

177
00:10:36.129 --> 00:10:37.287
&gt;&gt; Off Camera 3: I got a question, Brian.

178
00:10:37.287 --> 00:10:39.826
&gt;&gt; Brian Lonsdorf: Yo.
&gt;&gt; Off Camera 3: Are you showing Identity

179
00:10:39.826 --> 00:10:43.243
just because it's the easiest functor?

180
00:10:43.243 --> 00:10:47.550
Or is it something that you actually
use much compared to maybe [INAUDIBLE]?

181
00:10:47.550 --> 00:10:50.190
&gt;&gt; Brian Lonsdorf: Identity is cool
because what it does is allow you lift

182
00:10:50.190 --> 00:10:51.519
things into the functor world.

183
00:10:53.180 --> 00:10:55.250
Even if you don't want
any side effects with it,

184
00:10:55.250 --> 00:10:58.180
it can compose with other functors now.

185
00:10:58.180 --> 00:11:01.260
It's kind of the basis
of monad transformers.

186
00:11:01.260 --> 00:11:03.916
And you end up using it just like id.

187
00:11:03.916 --> 00:11:06.260
Like, when you see the id function,
you're like,

188
00:11:06.260 --> 00:11:08.165
what would I ever use the id function for?

189
00:11:08.165 --> 00:11:10.538
[LAUGH] And then you actually
start doing pointfree code, and

190
00:11:10.538 --> 00:11:12.020
you're like, I need that.

191
00:11:12.020 --> 00:11:15.929
So yeah, it's just like this neutral
functor if you need a functor and

192
00:11:15.929 --> 00:11:19.590
you don't want any side effects
to satisfy some type signature.

193
00:11:19.590 --> 00:11:24.043
Or let's say some jerk made their
function with map around it,

194
00:11:24.043 --> 00:11:26.910
without making it, calling map later.

