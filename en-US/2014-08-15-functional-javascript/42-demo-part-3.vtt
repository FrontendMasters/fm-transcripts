WEBVTT

1
00:00:00.000 --> 00:00:04.761
[MUSIC]

2
00:00:04.761 --> 00:00:08.107
&gt;&gt; Brian Lonsdorf: Okay, we're almost
ready for the magic, now we're gonna want

3
00:00:08.107 --> 00:00:11.970
some kind of, let's see, it would be
a future in there, because I was thinking

4
00:00:11.970 --> 00:00:15.773
of me and IO to make the call, but other,
it had to be an IO of either, or maybe,

5
00:00:15.773 --> 00:00:19.329
which is kind of a pain, and that's
a future supposed to wrap up I think.

6
00:00:22.010 --> 00:00:23.820
Okay, we'll call this one search.

7
00:00:26.220 --> 00:00:34.550
Search takes a URL and gives back, I don't
know if I call them videos or something.

8
00:00:34.550 --> 00:00:35.270
But they're not really.

9
00:00:35.270 --> 00:00:36.682
They're just the meditative for it.

10
00:00:36.682 --> 00:00:37.470
What should we call it?

11
00:00:40.700 --> 00:00:43.320
Here's a little, actually, that we can
like check out what this kind of looks

12
00:00:43.320 --> 00:00:45.510
like to get a feel for
like what is going on.

13
00:00:45.510 --> 00:00:50.316
What is our code need to do?
&gt;&gt; Speaker 2: You're gonna log the URLs?

14
00:00:50.316 --> 00:00:56.340
I just want to point out, there's
a question on why is this better, right?

15
00:00:56.340 --> 00:01:01.310
And it's because you can compose things,
really?

16
00:01:01.310 --> 00:01:02.580
I mean, that's the bottom line.

17
00:01:02.580 --> 00:01:05.700
If you see the power of composition,
of composing behaviors,

18
00:01:05.700 --> 00:01:08.290
composing functions,
composing these things into bigger things.

19
00:01:09.360 --> 00:01:10.220
And you get laws and

20
00:01:10.220 --> 00:01:13.580
properties, and you're totally
working against an interface,

21
00:01:13.580 --> 00:01:18.080
so they're swappable, substitutable,
everything turns out to be monad.

22
00:01:18.080 --> 00:01:21.779
So, if I make my own library that's been
strings, I can implement this interface,

23
00:01:21.779 --> 00:01:25.180
and you can swap [INAUDIBLE] for
it, and your app doesn't change.

24
00:01:25.180 --> 00:01:27.069
There's a ton of benefit.
&gt;&gt; Brian Lonsdorf: What's also

25
00:01:27.069 --> 00:01:27.650
[INAUDIBLE].

26
00:01:27.650 --> 00:01:33.030
I mean, we have, we're going to see,
at the end of our app here,

27
00:01:33.030 --> 00:01:35.602
we happen to kick stuff off,
we do the stuff,

28
00:01:35.602 --> 00:01:40.270
rather than actually
making the program happen.

29
00:01:40.270 --> 00:01:44.670
We could have sent back the pure stuff,
and then whoever's consuming our app

30
00:01:44.670 --> 00:01:48.520
could be, I like your YouTube thing, but
I'm a YouTube thing that I don't like

31
00:01:48.520 --> 00:01:50.910
filters out, bad results, or
some, whatever, I don't know,

32
00:01:50.910 --> 00:01:54.610
it's getting on top of our app that's
composing with it, rather than running it.

33
00:01:54.610 --> 00:01:57.620
At each stage, you're either something
pure that someone can mess with, or

34
00:01:57.620 --> 00:01:58.220
you can be run.

35
00:02:00.140 --> 00:02:01.720
Maybe that's an oversimplification, but

36
00:02:01.720 --> 00:02:04.240
that's my intuition of it.
&gt;&gt; Speaker 2: Yeah,

37
00:02:04.240 --> 00:02:07.890
being able to just keep building
upon smaller things and

38
00:02:07.890 --> 00:02:11.030
keep expanding it.
&gt;&gt; Brian Lonsdorf: Okay,

39
00:02:11.030 --> 00:02:13.669
search goes from URL to IO,
so what does this look like?

40
00:02:14.710 --> 00:02:19.550
Whatever each of these are called, there's
a feed that has, that's a weird API.

41
00:02:19.550 --> 00:02:21.445
&gt;&gt; Speaker 2: An interesting settings,

42
00:02:21.445 --> 00:02:22.828
sorry.
&gt;&gt; Brian Lonsdorf: Go ahead.

43
00:02:22.828 --> 00:02:24.973
&gt;&gt; Speaker 2: Everything in the pure part

44
00:02:24.973 --> 00:02:31.600
has the benefits of the pure stuff you're
talking about, portability we use.

45
00:02:31.600 --> 00:02:33.492
They're always on memorization and

46
00:02:33.492 --> 00:02:38.730
all that stuff.
&gt;&gt; Brian Lonsdorf: Okay, so entry.

47
00:02:38.730 --> 00:02:40.200
Does entry live inside of anything?

48
00:02:40.200 --> 00:02:41.262
It lives inside the feed.

49
00:02:41.262 --> 00:02:46.790
Okay, cool, cool.

50
00:02:46.790 --> 00:02:48.402
You know what I could do?

51
00:02:48.402 --> 00:02:53.460
I could do say search and review all the
results, just so we can do the API call.

52
00:02:53.460 --> 00:02:55.440
In fact,
it all should be a future of results.

53
00:02:55.440 --> 00:02:58.216
The future JSON, we say that.

54
00:02:58.216 --> 00:03:04.219
Okay.
&gt;&gt; Brian Lonsdorf: I

55
00:03:04.219 --> 00:03:07.450
may not need to do the function.
&gt;&gt; Speaker 2: So, what are we gonna do?

56
00:03:07.450 --> 00:03:09.130
We're going call-
&gt;&gt; Brian Lonsdorf: HTTP GET.

57
00:03:09.130 --> 00:03:09.769
&gt;&gt; Speaker 2: HTTP GET JSON.

58
00:03:11.070 --> 00:03:12.195
Yeah.
&gt;&gt; Brian Lonsdorf: Do we have that?

59
00:03:12.195 --> 00:03:15.910
Yeah, we put it http, or did we?

60
00:03:15.910 --> 00:03:18.597
No, we didn't.
&gt;&gt; Speaker 2: No, we didn't.

61
00:03:18.597 --> 00:03:23.230
[INAUDIBLE] HTTP call.
&gt;&gt; Brian Lonsdorf: The reason I can

62
00:03:23.230 --> 00:03:25.599
grab these things.
&gt;&gt; Speaker 2: [INAUDIBLE], No you don't,

63
00:03:25.599 --> 00:03:26.160
sorry.
&gt;&gt; Brian Lonsdorf: Yeah,

64
00:03:26.160 --> 00:03:29.139
that's all weird style.
&gt;&gt; Speaker 3: Hey, Brian,

65
00:03:29.139 --> 00:03:34.126
Raymond W is wondering, search shouldn't
really be considered memorizable,

66
00:03:34.126 --> 00:03:35.923
should it?
&gt;&gt; Speaker 2: It's all pure,

67
00:03:35.923 --> 00:03:40.663
if it gets a different input the next
time, if search is a different element

68
00:03:40.663 --> 00:03:46.800
the next time, it's all just going to be
for this input, I'll give you that output.

69
00:03:46.800 --> 00:03:51.495
So- Since you're going to
an external URL to get your output,

70
00:03:51.495 --> 00:03:55.770
that body can change, right?
&gt;&gt; Speaker 3: But we're not though.

71
00:03:55.770 --> 00:03:58.387
We're just getting a future
of a possible thing that will

72
00:03:58.387 --> 00:03:59.300
happen.
&gt;&gt; Brian Lonsdorf: Right.

73
00:03:59.300 --> 00:04:02.362
When you call here in the call search,
it doesn't do anything,

74
00:04:02.362 --> 00:04:04.950
it's just is here's the thing.

75
00:04:04.950 --> 00:04:08.510
It's the thing I always give you,
and when you call that thing,

76
00:04:08.510 --> 00:04:10.230
you get different results.
&gt;&gt; Speaker 2: Yeah.

77
00:04:10.230 --> 00:04:10.970
&gt;&gt; Brian Lonsdorf: But this function

78
00:04:10.970 --> 00:04:13.650
always gives you the same
little thing that it's,

79
00:04:13.650 --> 00:04:15.900
here's some of the fuse when you light it.

80
00:04:15.900 --> 00:04:17.795
It's all yours,
it's always the same, though.

81
00:04:17.795 --> 00:04:19.210
&gt;&gt; Speaker 2: [LAUGH] Exactly.

82
00:04:19.210 --> 00:04:20.650
But yeah, you'll just get a future of

83
00:04:20.650 --> 00:04:21.990
this particular API.
&gt;&gt; Brian Lonsdorf: Yeah.

84
00:04:23.860 --> 00:04:24.364
&gt;&gt; Speaker 2: And so,

85
00:04:24.364 --> 00:04:27.895
as you type different things in there,
that pure stream,

86
00:04:27.895 --> 00:04:32.362
the input pure part returns a new
function, cuz this new input will return

87
00:04:32.362 --> 00:04:36.912
a new future of a different URL.
&gt;&gt; Brian Lonsdorf: All right.

88
00:04:36.912 --> 00:04:40.167
So, we have [INAUDIBLE] API, got it,
that's right, it's kind of weird to do

89
00:04:40.167 --> 00:04:44.305
that, we have to compose.
&gt;&gt; Speaker 3: That's where you're saying

90
00:04:44.305 --> 00:04:51.250
there has some cache played stuff,
where you sound the same thing twice?

91
00:04:51.250 --> 00:04:52.980
That cache is the result.
&gt;&gt; Speaker 2: Yeah.

92
00:04:52.980 --> 00:04:53.634
&gt;&gt; Speaker 3: That's the return?

93
00:04:53.634 --> 00:04:55.312
&gt;&gt; Speaker 2: Minimalization, yeah,

94
00:04:55.312 --> 00:04:58.288
it'll just,
it can trade speed for memory and

95
00:04:58.288 --> 00:05:02.637
get played by taking the same search
results that should get the same

96
00:05:02.637 --> 00:05:05.420
exact future and the same.
&gt;&gt; Brian Lonsdorf: This thing isn't much

97
00:05:05.420 --> 00:05:09.160
to memorize, it doesn't have to do very
much, but if it was some kind of miracle

98
00:05:09.160 --> 00:05:12.230
function, something of a core science.
&gt;&gt; Speaker 2: Yeah.

99
00:05:12.230 --> 00:05:16.430
Yes, returning the same future every
time [LAUGH] there's a huge game, yeah.

100
00:05:16.430 --> 00:05:18.220
You expect her.
&gt;&gt; Brian Lonsdorf: So,

101
00:05:18.220 --> 00:05:22.250
I actually changed it from the URL,

102
00:05:22.250 --> 00:05:26.480
because if all it took was the URL,
it would be identical with HTTP go, so

103
00:05:26.480 --> 00:05:30.180
I had to first, it's going to take a term,
it runs it through term URL, so cool.

104
00:05:31.200 --> 00:05:34.910
I wonder what happened if we
just logged that, so we say.

105
00:05:34.910 --> 00:05:35.898
&gt;&gt; Speaker 2: We'll have a future,

106
00:05:35.898 --> 00:05:37.042
but nothing will happen,

107
00:05:37.042 --> 00:05:38.500
we'll see a future there.
&gt;&gt; Brian Lonsdorf: We could

108
00:05:38.500 --> 00:05:39.950
do a search string.

109
00:05:39.950 --> 00:05:42.145
The search stream.
&gt;&gt; Speaker 3: When do we fork and

110
00:05:42.145 --> 00:05:44.310
log the results?

111
00:05:44.310 --> 00:05:48.329
I'm not on value log,
now our value's going to get a future,

112
00:05:48.329 --> 00:05:50.730
right?
&gt;&gt; Speaker 2: I know we're

113
00:05:50.730 --> 00:05:53.370
going to change URL streams search.
&gt;&gt; Brian Lonsdorf: Or

114
00:05:53.370 --> 00:05:56.550
we could try to make
a whole new name stream,

115
00:05:56.550 --> 00:05:59.350
and not to search with URLs.
&gt;&gt; Speaker 3: It

116
00:05:59.350 --> 00:06:02.030
looks like search takes a term URL.
&gt;&gt; Brian Lonsdorf: You're

117
00:06:02.030 --> 00:06:02.940
right.
&gt;&gt; Speaker 2: Wait,

118
00:06:02.940 --> 00:06:06.010
I think it should be a URL stream, right?

119
00:06:06.010 --> 00:06:11.890
Wait a minute,
if we're already getting URLs, yeah.

120
00:06:11.890 --> 00:06:14.970
I already used, hang on.
&gt;&gt; Speaker 3: Shouldn't it be URL stream

121
00:06:14.970 --> 00:06:16.488
instead at the other?
&gt;&gt; Speaker 2: Yeah let's change term URL

122
00:06:16.488 --> 00:06:19.084
to URL stream.
&gt;&gt; Brian Lonsdorf: Yeah, this guy.

123
00:06:19.084 --> 00:06:21.583
&gt;&gt; Speaker 2: [INAUDIBLE] Stream of URLs

124
00:06:21.583 --> 00:06:23.940
going in there.
&gt;&gt; Brian Lonsdorf: Let's

125
00:06:23.940 --> 00:06:25.190
call it search stream then.

126
00:06:25.190 --> 00:06:29.629
I didn't even know what this is for, okay.
&gt;&gt; Speaker 2: So yeah, now we have to map,

127
00:06:29.629 --> 00:06:31.160
should we get over that stream?

128
00:06:31.160 --> 00:06:38.590
That's right.
&gt;&gt; Brian Lonsdorf: Now

129
00:06:38.590 --> 00:06:42.820
we have to map, okay All right, because
we are doing on this chaining line.

130
00:06:43.840 --> 00:06:44.655
&gt;&gt; Speaker 2: No, no, I'm sorry,

131
00:06:44.655 --> 00:06:46.890
up in your search stream
where you can pose HTTP.

132
00:06:46.890 --> 00:06:48.668
Should be good,
that URL streams are strange,

133
00:06:48.668 --> 00:06:53.227
you have to map they should get over it.
&gt;&gt; Brian Lonsdorf: Right,

134
00:06:53.227 --> 00:06:56.223
right, right.
&gt;&gt; Speaker 2: And we should be logging

135
00:06:56.223 --> 00:07:01.407
futures right now, but we might as
well just go one step further and

136
00:07:01.407 --> 00:07:06.130
just do fork log log.
&gt;&gt; Brian Lonsdorf: Let's see if it's not.

137
00:07:06.130 --> 00:07:09.255
Just a quick check.

138
00:07:09.255 --> 00:07:13.653
Yeah.
&gt;&gt; Speaker 3: What are we getting on

139
00:07:13.653 --> 00:07:18.198
this one?
&gt;&gt; Speaker 2: It's get,

140
00:07:18.198 --> 00:07:23.419
capital JSON, after get on

141
00:07:23.419 --> 00:07:28.445
HTTP for the JSON future.

142
00:07:28.445 --> 00:07:32.280
&gt;&gt; Brian Lonsdorf: Hey.
&gt;&gt; Speaker 2: So

143
00:07:32.280 --> 00:07:37.230
that on value where we log it,
we need to fork, or

144
00:07:37.230 --> 00:07:41.382
at least have to call on value.
&gt;&gt; Brian Lonsdorf: There's-

145
00:07:41.382 --> 00:07:42.380
&gt;&gt; Speaker 2: Cuz that'll subscribe to

146
00:07:42.380 --> 00:07:43.930
the event stream that comes out of the IO.

147
00:07:43.930 --> 00:07:47.060
And this is getting a little crazy.

148
00:07:47.060 --> 00:07:48.160
This is where you're,

149
00:07:48.160 --> 00:07:52.680
I have to deconstruct all these
peer types to get the values out.

150
00:07:52.680 --> 00:07:55.700
And that's, in my opinion worth it, but

151
00:07:55.700 --> 00:07:58.410
it's definitely back to
that discipline thing.

152
00:07:58.410 --> 00:08:02.760
For the all the peer stuff in your app,
being so nice and easy to work with, and

153
00:08:02.760 --> 00:08:05.780
you have to worry about your call
backs and everything poses, whatever.

154
00:08:05.780 --> 00:08:08.427
Down to the bottom you're,
I have to get it out.

155
00:08:08.427 --> 00:08:09.579
[LAUGH].

156
00:08:09.579 --> 00:08:10.510
And that's fine.

157
00:08:10.510 --> 00:08:14.320
It's one line because that's,
it always ends up as one line.

158
00:08:14.320 --> 00:08:16.090
There's only going to be one thing.

159
00:08:16.090 --> 00:08:18.400
I don't think you beyond
value returns anything.

160
00:08:18.400 --> 00:08:20.504
So you can't change fork it.

161
00:08:20.504 --> 00:08:26.195
Yeah.
&gt;&gt; Speaker 2: And

162
00:08:26.195 --> 00:08:31.580
fork takes a lot of one argument,
because the other log is already.

163
00:08:31.580 --> 00:08:34.004
I shouldn't have done it that way
&gt;&gt; Brian Lonsdorf: But

164
00:08:34.004 --> 00:08:36.950
what's the failure?
&gt;&gt; Speaker 2: I just bake

165
00:08:36.950 --> 00:08:38.260
logged as a failure.

166
00:08:38.260 --> 00:08:39.860
It should have taken two and

167
00:08:39.860 --> 00:08:42.640
a future, but a big login is the failure.
&gt;&gt; Brian Lonsdorf: Where does

168
00:08:42.640 --> 00:08:43.430
this come from?

169
00:08:43.430 --> 00:08:46.950
Does it come from one of your point three-
&gt;&gt; Speaker 2: It's right there on 19.

170
00:08:46.950 --> 00:08:50.038
&gt;&gt; Brian Lonsdorf: Not on fork-

171
00:08:50.038 --> 00:08:52.030
&gt;&gt; Speaker 2: Yeah, I would change 19 to

172
00:08:53.180 --> 00:08:58.000
error success and future, and
then just future, fork, error success.

173
00:08:58.000 --> 00:08:59.690
It's so much nicer.
&gt;&gt; Brian Lonsdorf: Wait,

174
00:08:59.690 --> 00:09:00.260
change it to what?

175
00:09:00.260 --> 00:09:01.275
Change it to success-

176
00:09:01.275 --> 00:09:03.160
&gt;&gt; Speaker 2: E-R-R-S-U-C.
&gt;&gt; Brian Lonsdorf: Error

177
00:09:05.000 --> 00:09:06.575
first?
&gt;&gt; Speaker 2: Yeah.

178
00:09:06.575 --> 00:09:07.370
&gt;&gt; Brian Lonsdorf: Cuz left and

179
00:09:07.370 --> 00:09:10.790
right, okay.
&gt;&gt; Speaker 2: Yeah, and then just insides.

180
00:09:10.790 --> 00:09:15.060
It's error, then success.
&gt;&gt; Brian Lonsdorf: Yeah, yeah,

181
00:09:15.060 --> 00:09:18.440
I always want to do it the other way,
okay.

182
00:09:18.440 --> 00:09:21.150
And you need a comma in
between suck in the future.

183
00:09:21.150 --> 00:09:23.190
The future sucks.
&gt;&gt; Speaker 2: Yeah,

184
00:09:23.190 --> 00:09:24.070
it does, doesn't it?
&gt;&gt; Brian Lonsdorf: [LAUGH]

185
00:09:24.070 --> 00:09:24.900
&gt;&gt; Speaker 2: Without a comma,

186
00:09:24.900 --> 00:09:26.960
it does, okay.
&gt;&gt; Brian Lonsdorf: So

187
00:09:26.960 --> 00:09:28.530
now log log at the bottom.

188
00:09:31.190 --> 00:09:31.690
Sweet.

189
00:09:32.820 --> 00:09:38.248
See some URLs, or some results.
&gt;&gt; Speaker 3: People are asking if it's,

190
00:09:38.248 --> 00:09:41.090
if there's an easier way to test along

191
00:09:42.140 --> 00:09:42.740
the way.
&gt;&gt; Brian Lonsdorf: There is.

192
00:09:42.740 --> 00:09:45.714
It's called a strong type system.
&gt;&gt; Speaker 2: [LAUGH] I mean,

193
00:09:45.714 --> 00:09:52.380
I gotta tell you, so there's the results
of the YouTube call, which is really cool.

194
00:09:52.380 --> 00:09:56.550
But typically, your app above
is all returning pure stuff.

195
00:09:56.550 --> 00:09:57.980
So, makes it dead simple.

196
00:09:57.980 --> 00:10:01.159
Everything takes an input and
returns an output.

197
00:10:01.159 --> 00:10:04.530
Have you ever had a test like a peer
function, you're like whatever, this is so

198
00:10:04.530 --> 00:10:07.230
much easier than mocking
a thousand things.

199
00:10:07.230 --> 00:10:13.140
So, if you decide to test out
of pure stuff Boyer going on.

200
00:10:13.140 --> 00:10:13.880
It's going to be so

201
00:10:13.880 --> 00:10:18.870
much easier than setting up objects all to
be in the right state now or in your test.

202
00:10:18.870 --> 00:10:23.411
That bottom thing is your kick offline
that actually opens up values and

203
00:10:23.411 --> 00:10:25.210
that stuff, but.
&gt;&gt; Brian Lonsdorf: All right,

204
00:10:25.210 --> 00:10:29.000
this is crazy, but each of these could
be tested individually easily and

205
00:10:29.000 --> 00:10:30.250
reproducible.
&gt;&gt; Speaker 2: Exactly,

206
00:10:30.250 --> 00:10:34.530
if you're saying the search streams to,
all these things were pushed out, so

207
00:10:34.530 --> 00:10:36.505
you get the stuff out of the times.

208
00:10:36.505 --> 00:10:38.767
[LAUGH] So, we're good.
&gt;&gt; Brian Lonsdorf: Cool, so

209
00:10:38.767 --> 00:10:40.240
we're getting all the stuff there.

