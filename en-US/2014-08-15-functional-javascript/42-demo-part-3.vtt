WEBVTT

1
00:00:00.000 --> 00:00:04.761
[MUSIC]

2
00:00:04.761 --> 00:00:08.107
&gt;&gt; Brian Lonsdorf: Okay, we're almost
ready for the magic, now we're gonna want

3
00:00:08.107 --> 00:00:11.970
some kind of, let's see, it would be
a future in there, because I was thinking

4
00:00:11.970 --> 00:00:15.773
of me and IO to make the call, but other,
it had to be an IO of either, or maybe,

5
00:00:15.773 --> 00:00:19.329
which is kind of a pain, and that's
a future supposed to wrap up I think.

6
00:00:22.010 --> 00:00:23.820
Okay, we'll call this one search.

7
00:00:26.220 --> 00:00:34.550
Search takes a URL and gives back, I don't
know if I call them videos or something.

8
00:00:34.550 --> 00:00:35.270
But they're not really.

9
00:00:35.270 --> 00:00:36.682
They're just the meditative for it.

10
00:00:36.682 --> 00:00:37.470
What should we call it?

11
00:00:40.700 --> 00:00:43.320
Here's a little, actually, that we can
like check out what this kind of looks

12
00:00:43.320 --> 00:00:45.510
like to get a feel for
like what is going on.

13
00:00:45.510 --> 00:00:48.230
What is our code need to do?

14
00:00:48.230 --> 00:00:50.316
&gt;&gt; Speaker 2: You're gonna log the URLs?

15
00:00:50.316 --> 00:00:56.340
I just want to point out, there's
a question on why is this better, right?

16
00:00:56.340 --> 00:01:01.310
And it's because you can compose things,
really?

17
00:01:01.310 --> 00:01:02.580
I mean, that's the bottom line.

18
00:01:02.580 --> 00:01:05.700
If you see the power of composition,
of composing behaviors,

19
00:01:05.700 --> 00:01:08.290
composing functions,
composing these things into bigger things.

20
00:01:09.360 --> 00:01:10.220
And you get laws and

21
00:01:10.220 --> 00:01:13.580
properties, and you're totally
working against an interface,

22
00:01:13.580 --> 00:01:18.080
so they're swappable, substitutable,
everything turns out to be monad.

23
00:01:18.080 --> 00:01:21.779
So, if I make my own library that's been
strings, I can implement this interface,

24
00:01:21.779 --> 00:01:25.180
and you can swap [INAUDIBLE] for
it, and your app doesn't change.

25
00:01:25.180 --> 00:01:26.490
There's a ton of benefit.

26
00:01:26.490 --> 00:01:27.650
&gt;&gt; Brian Lonsdorf: What's
also [INAUDIBLE].

27
00:01:27.650 --> 00:01:33.030
I mean, we have, we're going to see,
at the end of our app here,

28
00:01:33.030 --> 00:01:35.602
we happen to kick stuff off,
we do the stuff,

29
00:01:35.602 --> 00:01:40.270
rather than actually
making the program happen.

30
00:01:40.270 --> 00:01:44.670
We could have sent back the pure stuff,
and then whoever's consuming our app

31
00:01:44.670 --> 00:01:48.520
could be, I like your YouTube thing, but
I'm a YouTube thing that I don't like

32
00:01:48.520 --> 00:01:50.910
filters out, bad results, or
some, whatever, I don't know,

33
00:01:50.910 --> 00:01:54.610
it's getting on top of our app that's
composing with it, rather than running it.

34
00:01:54.610 --> 00:01:57.620
At each stage, you're either something
pure that someone can mess with, or

35
00:01:57.620 --> 00:01:58.220
you can be run.

36
00:02:00.140 --> 00:02:03.310
Maybe that's an oversimplification,
but that's my intuition of it.

37
00:02:03.310 --> 00:02:07.890
&gt;&gt; Speaker 2: Yeah, being able to just
keep building upon smaller things and

38
00:02:07.890 --> 00:02:10.560
keep expanding it.

39
00:02:10.560 --> 00:02:13.669
&gt;&gt; Brian Lonsdorf: Okay, search goes from
URL to IO, so what does this look like?

40
00:02:14.710 --> 00:02:19.550
Whatever each of these are called, there's
a feed that has, that's a weird API.

41
00:02:19.550 --> 00:02:22.212
&gt;&gt; Speaker 2: An interesting settings,
sorry.

42
00:02:22.212 --> 00:02:22.828
&gt;&gt; Brian Lonsdorf: Go ahead.

43
00:02:22.828 --> 00:02:27.584
&gt;&gt; Speaker 2: Everything in the pure
part has the benefits of the pure stuff

44
00:02:27.584 --> 00:02:31.600
you're talking about, portability we use.

45
00:02:31.600 --> 00:02:34.350
They're always on memorization and
all that stuff.

46
00:02:36.330 --> 00:02:38.730
&gt;&gt; Brian Lonsdorf: Okay, so entry.

47
00:02:38.730 --> 00:02:40.200
Does entry live inside of anything?

48
00:02:40.200 --> 00:02:41.262
It lives inside the feed.

49
00:02:41.262 --> 00:02:46.790
Okay, cool, cool.

50
00:02:46.790 --> 00:02:48.402
You know what I could do?

51
00:02:48.402 --> 00:02:53.460
I could do say search and review all the
results, just so we can do the API call.

52
00:02:53.460 --> 00:02:55.440
In fact,
it all should be a future of results.

53
00:02:55.440 --> 00:02:58.216
The future JSON, we say that.

54
00:02:58.216 --> 00:02:59.584
Okay.

55
00:03:04.152 --> 00:03:06.120
&gt;&gt; Brian Lonsdorf: I may not
need to do the function.

56
00:03:06.120 --> 00:03:07.450
&gt;&gt; Speaker 2: So, what are we gonna do?

57
00:03:07.450 --> 00:03:09.130
We're going call-
&gt;&gt; Brian Lonsdorf: HTTP GET.

58
00:03:09.130 --> 00:03:09.769
&gt;&gt; Speaker 2: HTTP GET JSON.

59
00:03:11.070 --> 00:03:12.195
Yeah.
&gt;&gt; Brian Lonsdorf: Do we have that?

60
00:03:12.195 --> 00:03:15.910
Yeah, we put it http, or did we?

61
00:03:15.910 --> 00:03:16.430
No, we didn't.

62
00:03:16.430 --> 00:03:18.597
&gt;&gt; Speaker 2: No, we didn't.

63
00:03:18.597 --> 00:03:22.049
[INAUDIBLE] HTTP call.

64
00:03:22.049 --> 00:03:23.993
&gt;&gt; Brian Lonsdorf: The reason
I can grab these things.

65
00:03:23.993 --> 00:03:25.958
&gt;&gt; Speaker 2: [INAUDIBLE],
No you don't, sorry.

66
00:03:25.958 --> 00:03:28.260
&gt;&gt; Brian Lonsdorf: Yeah,
that's all weird style.

67
00:03:28.260 --> 00:03:30.679
&gt;&gt; Speaker 3: Hey, Brian,
Raymond W is wondering,

68
00:03:30.679 --> 00:03:34.870
search shouldn't really be
considered memorizable, should it?

69
00:03:34.870 --> 00:03:38.631
&gt;&gt; Speaker 2: It's all pure, if it
gets a different input the next time,

70
00:03:38.631 --> 00:03:41.641
if search is a different
element the next time,

71
00:03:41.641 --> 00:03:46.800
it's all just going to be for
this input, I'll give you that output.

72
00:03:46.800 --> 00:03:51.495
So- Since you're going to
an external URL to get your output,

73
00:03:51.495 --> 00:03:53.805
that body can change, right?

74
00:03:53.805 --> 00:03:55.770
&gt;&gt; Speaker 3: But we're not though.

75
00:03:55.770 --> 00:03:58.999
We're just getting a future of
a possible thing that will happen.

76
00:03:58.999 --> 00:04:01.115
&gt;&gt; Brian Lonsdorf: Right.
When you call here in the call search,

77
00:04:01.115 --> 00:04:04.950
it doesn't do anything,
it's just is here's the thing.

78
00:04:04.950 --> 00:04:06.990
It's the thing I always give you, and

79
00:04:06.990 --> 00:04:09.910
when you call that thing,
you get different results.

80
00:04:09.910 --> 00:04:10.970
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Brian Lonsdorf: But this function

81
00:04:10.970 --> 00:04:13.650
always gives you the same
little thing that it's,

82
00:04:13.650 --> 00:04:15.900
here's some of the fuse when you light it.

83
00:04:15.900 --> 00:04:17.795
It's all yours,
it's always the same, though.

84
00:04:17.795 --> 00:04:19.210
&gt;&gt; Speaker 2: [LAUGH] Exactly.

85
00:04:19.210 --> 00:04:21.620
But yeah, you'll just get
a future of this particular API.

86
00:04:21.620 --> 00:04:22.120
&gt;&gt; Brian Lonsdorf: Yeah.

87
00:04:23.860 --> 00:04:26.742
&gt;&gt; Speaker 2: And so,
as you type different things in there,

88
00:04:26.742 --> 00:04:30.561
that pure stream, the input pure
part returns a new function,

89
00:04:30.561 --> 00:04:34.325
cuz this new input will return
a new future of a different URL.

90
00:04:36.578 --> 00:04:38.045
&gt;&gt; Brian Lonsdorf: All right.
So, we have [INAUDIBLE] API,

91
00:04:38.045 --> 00:04:41.830
got it, that's right, it's kind of
weird to do that, we have to compose.

92
00:04:41.830 --> 00:04:47.275
&gt;&gt; Speaker 3: That's where you're saying
there has some cache played stuff,

93
00:04:47.275 --> 00:04:51.250
where you sound the same thing twice?

94
00:04:51.250 --> 00:04:52.680
That cache is the result.

95
00:04:52.680 --> 00:04:53.634
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Speaker 3: That's the return?

96
00:04:53.634 --> 00:04:58.288
&gt;&gt; Speaker 2: Minimalization, yeah, it'll
just, it can trade speed for memory and

97
00:04:58.288 --> 00:05:03.019
get played by taking the same search
results that should get the same exact

98
00:05:03.019 --> 00:05:04.420
future and the same.

99
00:05:04.420 --> 00:05:06.940
&gt;&gt; Brian Lonsdorf: This thing isn't much
to memorize, it doesn't have to do very

100
00:05:06.940 --> 00:05:11.220
much, but if it was some kind of miracle
function, something of a core science.

101
00:05:11.220 --> 00:05:12.230
&gt;&gt; Speaker 2: Yeah.

102
00:05:12.230 --> 00:05:16.430
Yes, returning the same future every
time [LAUGH] there's a huge game, yeah.

103
00:05:16.430 --> 00:05:17.980
You expect her.

104
00:05:17.980 --> 00:05:22.250
&gt;&gt; Brian Lonsdorf: So,
I actually changed it from the URL,

105
00:05:22.250 --> 00:05:26.480
because if all it took was the URL,
it would be identical with HTTP go, so

106
00:05:26.480 --> 00:05:30.180
I had to first, it's going to take a term,
it runs it through term URL, so cool.

107
00:05:31.200 --> 00:05:34.910
I wonder what happened if we
just logged that, so we say.

108
00:05:34.910 --> 00:05:37.042
&gt;&gt; Speaker 2: We'll have a future,
but nothing will happen,

109
00:05:37.042 --> 00:05:38.240
we'll see a future there.

110
00:05:38.240 --> 00:05:39.950
&gt;&gt; Brian Lonsdorf: We
could do a search string.

111
00:05:39.950 --> 00:05:40.600
The search stream.

112
00:05:40.600 --> 00:05:44.310
&gt;&gt; Speaker 3: When do we fork and
log the results?

113
00:05:44.310 --> 00:05:49.850
I'm not on value log, now our value's
going to get a future, right?

114
00:05:49.850 --> 00:05:53.310
&gt;&gt; Speaker 2: I know we're going
to change URL streams search.

115
00:05:53.310 --> 00:05:56.550
&gt;&gt; Brian Lonsdorf: Or we could try
to make a whole new name stream,

116
00:05:56.550 --> 00:05:58.950
and not to search with URLs.

117
00:05:58.950 --> 00:06:01.740
&gt;&gt; Speaker 3: It looks like
search takes a term URL.

118
00:06:01.740 --> 00:06:02.730
&gt;&gt; Brian Lonsdorf: You're right.

119
00:06:02.730 --> 00:06:06.010
&gt;&gt; Speaker 2: Wait,
I think it should be a URL stream, right?

120
00:06:06.010 --> 00:06:11.890
Wait a minute,
if we're already getting URLs, yeah.

121
00:06:11.890 --> 00:06:13.990
I already used, hang on.

122
00:06:13.990 --> 00:06:15.520
&gt;&gt; Speaker 3: Shouldn't it be
URL stream instead at the other?

123
00:06:15.520 --> 00:06:17.040
&gt;&gt; Speaker 2: Yeah let's
change term URL to URL stream.

124
00:06:18.170 --> 00:06:19.084
&gt;&gt; Brian Lonsdorf: Yeah, this guy.

125
00:06:19.084 --> 00:06:23.320
&gt;&gt; Speaker 2: [INAUDIBLE]
Stream of URLs going in there.

126
00:06:23.320 --> 00:06:25.190
&gt;&gt; Brian Lonsdorf: Let's
call it search stream then.

127
00:06:25.190 --> 00:06:28.370
I didn't even know what this is for, okay.

128
00:06:28.370 --> 00:06:31.160
&gt;&gt; Speaker 2: So yeah, now we have to map,
should we get over that stream?

129
00:06:31.160 --> 00:06:31.960
That's right.

130
00:06:38.140 --> 00:06:41.530
&gt;&gt; Brian Lonsdorf: Now we have to map,
okay All right,

131
00:06:41.530 --> 00:06:42.820
because we are doing
on this chaining line.

132
00:06:43.840 --> 00:06:44.655
&gt;&gt; Speaker 2: No, no, I'm sorry,

133
00:06:44.655 --> 00:06:46.890
up in your search stream
where you can pose HTTP.

134
00:06:46.890 --> 00:06:48.668
Should be good,
that URL streams are strange,

135
00:06:48.668 --> 00:06:50.140
you have to map they should get over it.

136
00:06:52.656 --> 00:06:54.371
&gt;&gt; Brian Lonsdorf: Right, right, right.

137
00:06:54.371 --> 00:06:58.075
&gt;&gt; Speaker 2: And we should be
logging futures right now, but

138
00:06:58.075 --> 00:07:03.085
we might as well just go one step
further and just do fork log log.

139
00:07:03.085 --> 00:07:06.130
&gt;&gt; Brian Lonsdorf: Let's see if it's not.

140
00:07:06.130 --> 00:07:09.255
Just a quick check.

141
00:07:09.255 --> 00:07:09.863
Yeah.

142
00:07:10.927 --> 00:07:15.928
&gt;&gt; Speaker 3: What are we
getting on this one?

143
00:07:15.928 --> 00:07:21.149
&gt;&gt; Speaker 2: It's get, capital JSON,

144
00:07:21.149 --> 00:07:28.445
after get on HTTP for the JSON future.

145
00:07:28.445 --> 00:07:32.060
&gt;&gt; Brian Lonsdorf: Hey.

146
00:07:32.060 --> 00:07:35.130
&gt;&gt; Speaker 2: So
that on value where we log it,

147
00:07:35.130 --> 00:07:38.510
we need to fork, or
at least have to call on value.

148
00:07:40.480 --> 00:07:42.380
&gt;&gt; Brian Lonsdorf: There's-
&gt;&gt; Speaker 2: Cuz that'll subscribe to

149
00:07:42.380 --> 00:07:43.930
the event stream that comes out of the IO.

150
00:07:43.930 --> 00:07:47.060
And this is getting a little crazy.

151
00:07:47.060 --> 00:07:48.160
This is where you're,

152
00:07:48.160 --> 00:07:52.680
I have to deconstruct all these
peer types to get the values out.

153
00:07:52.680 --> 00:07:55.700
And that's, in my opinion worth it, but

154
00:07:55.700 --> 00:07:58.410
it's definitely back to
that discipline thing.

155
00:07:58.410 --> 00:08:02.760
For the all the peer stuff in your app,
being so nice and easy to work with, and

156
00:08:02.760 --> 00:08:05.780
you have to worry about your call
backs and everything poses, whatever.

157
00:08:05.780 --> 00:08:08.427
Down to the bottom you're,
I have to get it out.

158
00:08:08.427 --> 00:08:09.579
[LAUGH].

159
00:08:09.579 --> 00:08:10.510
And that's fine.

160
00:08:10.510 --> 00:08:14.320
It's one line because that's,
it always ends up as one line.

161
00:08:14.320 --> 00:08:16.090
There's only going to be one thing.

162
00:08:16.090 --> 00:08:18.400
I don't think you beyond
value returns anything.

163
00:08:18.400 --> 00:08:20.504
So you can't change fork it.

164
00:08:20.504 --> 00:08:22.883
Yeah.

165
00:08:25.942 --> 00:08:28.555
&gt;&gt; Speaker 2: And
fork takes a lot of one argument,

166
00:08:28.555 --> 00:08:31.580
because the other log is already.

167
00:08:31.580 --> 00:08:35.880
I shouldn't have done it that way
&gt;&gt; Brian Lonsdorf: But what's the failure?

168
00:08:35.880 --> 00:08:38.260
&gt;&gt; Speaker 2: I just
bake logged as a failure.

169
00:08:38.260 --> 00:08:42.300
It should have taken two and a future,
but a big login is the failure.

170
00:08:42.300 --> 00:08:43.430
&gt;&gt; Brian Lonsdorf: Where
does this come from?

171
00:08:43.430 --> 00:08:46.950
Does it come from one of your point three-
&gt;&gt; Speaker 2: It's right there on 19.

172
00:08:46.950 --> 00:08:52.030
&gt;&gt; Brian Lonsdorf: Not on fork-
&gt;&gt; Speaker 2: Yeah, I would change 19 to

173
00:08:53.180 --> 00:08:58.000
error success and future, and
then just future, fork, error success.

174
00:08:58.000 --> 00:08:59.520
It's so much nicer.

175
00:08:59.520 --> 00:09:00.260
&gt;&gt; Brian Lonsdorf: Wait,
change it to what?

176
00:09:00.260 --> 00:09:02.720
Change it to success-
&gt;&gt; Speaker 2: E-R-R-S-U-C.

177
00:09:02.720 --> 00:09:05.850
&gt;&gt; Brian Lonsdorf: Error first?

178
00:09:05.850 --> 00:09:06.575
&gt;&gt; Speaker 2: Yeah.

179
00:09:06.575 --> 00:09:09.310
&gt;&gt; Brian Lonsdorf: Cuz left and
right, okay.

180
00:09:09.310 --> 00:09:10.790
&gt;&gt; Speaker 2: Yeah, and then just insides.

181
00:09:10.790 --> 00:09:14.720
It's error, then success.

182
00:09:14.720 --> 00:09:18.440
&gt;&gt; Brian Lonsdorf: Yeah, yeah, I always
want to do it the other way, okay.

183
00:09:18.440 --> 00:09:21.150
And you need a comma in
between suck in the future.

184
00:09:21.150 --> 00:09:22.980
The future sucks.

185
00:09:22.980 --> 00:09:24.030
&gt;&gt; Speaker 2: Yeah, it does, doesn't it?

186
00:09:24.030 --> 00:09:24.900
&gt;&gt; Brian Lonsdorf: [LAUGH]
&gt;&gt; Speaker 2: Without a comma,

187
00:09:24.900 --> 00:09:26.650
it does, okay.

188
00:09:26.650 --> 00:09:28.530
&gt;&gt; Brian Lonsdorf: So
now log log at the bottom.

189
00:09:31.190 --> 00:09:31.690
Sweet.

190
00:09:32.820 --> 00:09:34.780
See some URLs, or some results.

191
00:09:36.610 --> 00:09:38.248
&gt;&gt; Speaker 3: People are asking if it's,

192
00:09:38.248 --> 00:09:42.350
if there's an easier way
to test along the way.

193
00:09:42.350 --> 00:09:44.235
&gt;&gt; Brian Lonsdorf: There is.
It's called a strong type system.

194
00:09:44.235 --> 00:09:47.285
&gt;&gt; Speaker 2: [LAUGH] I mean,
I gotta tell you, so

195
00:09:47.285 --> 00:09:52.380
there's the results of the YouTube call,
which is really cool.

196
00:09:52.380 --> 00:09:56.550
But typically, your app above
is all returning pure stuff.

197
00:09:56.550 --> 00:09:57.980
So, makes it dead simple.

198
00:09:57.980 --> 00:10:01.159
Everything takes an input and
returns an output.

199
00:10:01.159 --> 00:10:04.530
Have you ever had a test like a peer
function, you're like whatever, this is so

200
00:10:04.530 --> 00:10:07.230
much easier than mocking
a thousand things.

201
00:10:07.230 --> 00:10:13.140
So, if you decide to test out
of pure stuff Boyer going on.

202
00:10:13.140 --> 00:10:13.880
It's going to be so

203
00:10:13.880 --> 00:10:18.870
much easier than setting up objects all to
be in the right state now or in your test.

204
00:10:18.870 --> 00:10:23.411
That bottom thing is your kick offline
that actually opens up values and

205
00:10:23.411 --> 00:10:24.910
that stuff, but.

206
00:10:24.910 --> 00:10:26.250
&gt;&gt; Brian Lonsdorf: All right,
this is crazy, but

207
00:10:26.250 --> 00:10:29.805
each of these could be tested
individually easily and reproducible.

208
00:10:29.805 --> 00:10:32.810
&gt;&gt; Speaker 2: Exactly,
if you're saying the search streams to,

209
00:10:32.810 --> 00:10:36.505
all these things were pushed out, so
you get the stuff out of the times.

210
00:10:36.505 --> 00:10:38.390
[LAUGH] So, we're good.

211
00:10:38.390 --> 00:10:40.240
&gt;&gt; Brian Lonsdorf: Cool, so
we're getting all the stuff there.

