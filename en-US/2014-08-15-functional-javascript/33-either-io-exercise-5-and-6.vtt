WEBVTT

1
00:00:00.000 --> 00:00:04.672
[MUSIC]

2
00:00:04.672 --> 00:00:07.597
&gt;&gt; Brian Lonsdorf: Finally
this is the last example.

3
00:00:07.597 --> 00:00:09.570
So get this one.

4
00:00:09.570 --> 00:00:16.736
Okay, so this one is just like the others.

5
00:00:16.736 --> 00:00:18.032
I think.

6
00:00:18.032 --> 00:00:20.620
Let's say we want to get the Href,

7
00:00:20.620 --> 00:00:26.710
which is a secret io action that's going
to getHref, and then get the protocol.

8
00:00:26.710 --> 00:00:28.980
We'll just split it and
grab the first part of that.

9
00:00:28.980 --> 00:00:31.740
So I think just like every other one,

10
00:00:31.740 --> 00:00:38.170
we're just going to map get protocol and
getHref.

11
00:00:38.170 --> 00:00:43.110
I work from five, five worked.

12
00:00:43.110 --> 00:00:43.770
Cool.

13
00:00:43.770 --> 00:00:45.630
Just another example of the same thing.

14
00:00:47.910 --> 00:00:50.780
So, is this getting boring or
is this still interesting?

15
00:00:50.780 --> 00:00:54.510
Because it's still interesting,
I want to talk about it [LAUGH].

16
00:00:54.510 --> 00:00:56.400
I feel like it should be
boring at this point, though.

17
00:00:56.400 --> 00:00:58.000
We've got this IO which is a map over it,

18
00:00:58.000 --> 00:01:00.690
done.
&gt;&gt; Speaker 2: Mims W was wondering

19
00:01:00.690 --> 00:01:02.670
just for clarification sake,

20
00:01:02.670 --> 00:01:07.180
that the implementation of left
out map seems to not do anything.

21
00:01:07.180 --> 00:01:07.950
Is that right?

22
00:01:07.950 --> 00:01:09.870
Whatever function you put on it

23
00:01:09.870 --> 00:01:11.460
left to just-
&gt;&gt; Brian Lonsdorf: Just ignore

24
00:01:11.460 --> 00:01:11.995
it.
&gt;&gt; Speaker 2: Brings itself back out

25
00:01:11.995 --> 00:01:13.289
basically-.
&gt;&gt; Brian Lonsdorf: That's why this error

26
00:01:13.289 --> 00:01:16.308
message bubbles up through the rest
of your app and shows up at the end.

27
00:01:16.308 --> 00:01:20.583
It says I stopped running
your app because of this

28
00:01:20.583 --> 00:01:25.112
[LAUGH].
&gt;&gt; Brian Lonsdorf: In exercise six,

29
00:01:25.112 --> 00:01:26.720
this one's a little bit trickier.

30
00:01:28.600 --> 00:01:32.591
Let's just quickly run through it.

31
00:01:32.591 --> 00:01:33.524
Ha ha.

32
00:01:33.524 --> 00:01:36.140
Christian's got it.

33
00:01:36.140 --> 00:01:39.210
We got maybe here and we got an IO here.

34
00:01:40.420 --> 00:01:42.340
So let's talk about this one.

35
00:01:42.340 --> 00:01:44.890
This one's an interesting one.

36
00:01:44.890 --> 00:01:49.820
So we want to return the maybe
email from the cached user.

37
00:01:49.820 --> 00:01:52.150
We put the user in local storage.

38
00:01:52.150 --> 00:01:56.490
Json stringified this user, and so what we
want to do is get him out of storage and

39
00:01:57.900 --> 00:02:01.850
get his email, because it's George,
and he's a guy.

40
00:02:01.850 --> 00:02:05.410
[LAUGH]
So

41
00:02:05.410 --> 00:02:08.940
we start with compose kinda
figure that out by this point.

42
00:02:08.940 --> 00:02:12.290
So we'll get cash null returns us an IO so

43
00:02:12.290 --> 00:02:14.050
we can't use it yet
we have to map over it.

44
00:02:15.210 --> 00:02:16.330
So we're gonna map over it.

45
00:02:17.420 --> 00:02:19.920
But we wanna get this email right.

46
00:02:19.920 --> 00:02:21.514
So we'll get the email.

47
00:02:23.710 --> 00:02:25.500
And most of you might have done that,

48
00:02:25.500 --> 00:02:28.250
because every other example
is exactly like that.

49
00:02:28.250 --> 00:02:29.140
But there's a problem.

50
00:02:30.320 --> 00:02:33.510
Because, well, first of all,
it's JSON stringified,

51
00:02:33.510 --> 00:02:36.670
so you can't get the email on it,
so I want to compose that.

52
00:02:36.670 --> 00:02:39.364
Right?
So let's compose that and

53
00:02:39.364 --> 00:02:46.700
say getStringEmail as the composition
of get('email') and JSON.parse.

54
00:02:46.700 --> 00:02:48.300
So I'll map(getStringEmail).

55
00:02:48.300 --> 00:02:53.430
But even then it doesn't work and
the reason for

56
00:02:53.430 --> 00:02:57.050
that is that maybe comes back.

57
00:02:57.050 --> 00:02:59.950
For it's an IO of a maybe.

58
00:02:59.950 --> 00:03:05.580
So I have to map the IO,
then map the maybe to get to the email.

59
00:03:05.580 --> 00:03:06.430
That's kind of wild.

60
00:03:06.430 --> 00:03:09.242
Let's look at that and

61
00:03:09.242 --> 00:03:13.519
I get unexpected identify.
&gt;&gt; Speaker 3: Comma,

62
00:03:13.519 --> 00:03:20.290
comma before getCache.
&gt;&gt; Brian Lonsdorf: [SOUND] Thank you.

63
00:03:20.290 --> 00:03:26.225
Okay, but if I just did this, if I just
mapped getStringEmail, getStringEmail's

64
00:03:26.225 --> 00:03:31.603
gonna get a maybe given to it, because
that's what's inside the IO is a maybe.

65
00:03:31.603 --> 00:03:34.690
And we don't want to meet we want to
JSON parsing it will be like what.

66
00:03:34.690 --> 00:03:41.970
[LAUGH] So we actually have to map map
map over the IO the map over the maybe

67
00:03:41.970 --> 00:03:47.630
we're composing functors we have functors
and functors contacts and contacts.

68
00:03:47.630 --> 00:03:51.340
If I wanted to write that,
I could say this things type

69
00:03:53.500 --> 00:03:56.730
is the composition of maybe and IO.

70
00:03:56.730 --> 00:03:57.230
Go what?

71
00:03:58.630 --> 00:04:03.240
Well, it's actually an IO, maybe.

72
00:04:03.240 --> 00:04:04.430
The maybe of IO.

73
00:04:05.570 --> 00:04:06.970
Put it in an IO, then put it in a maybe.

74
00:04:06.970 --> 00:04:08.614
No, maybe IO, okay.

75
00:04:08.614 --> 00:04:14.120
[LAUGH]
Is an IO and maybe and

76
00:04:14.120 --> 00:04:19.320
I can map over that I have to map map
because I have to get into the IO.

77
00:04:19.320 --> 00:04:21.130
Then get into the maybe.

78
00:04:21.130 --> 00:04:22.870
IO takes care of the first
map it say okay,

79
00:04:22.870 --> 00:04:25.650
I'll run you maybe says okay
I'll run you if you're there.

80
00:04:25.650 --> 00:04:28.860
So we've composed behaviors

81
00:04:28.860 --> 00:04:31.730
lust like I want you guys to
think about this for a second.

82
00:04:31.730 --> 00:04:35.040
The first part of this class was about

83
00:04:35.040 --> 00:04:39.480
composing little bits of functions and
data to make and app up.

84
00:04:40.640 --> 00:04:45.770
Now we're composing full
on null checks and input,

85
00:04:45.770 --> 00:04:48.940
like pure IO, and error handling.

86
00:04:48.940 --> 00:04:52.710
We're about to compose more of these
behaviors, but I hope you can see that.

87
00:04:52.710 --> 00:04:55.690
We're actually composing things that

88
00:04:55.690 --> 00:04:59.890
don't feel like they could
possibly compose like a.

89
00:04:59.890 --> 00:05:03.150
You know like a null check like
if you know like well how does

90
00:05:03.150 --> 00:05:04.150
that compose of anything.

91
00:05:04.150 --> 00:05:06.766
Boom.
It does, so lazy computations,

92
00:05:06.766 --> 00:05:09.422
null checks, error handling, etc.

93
00:05:09.422 --> 00:05:12.219
Jessie says I don't have to map map.

94
00:05:12.219 --> 00:05:17.140
Or is he talking to somebody else?
&gt;&gt; Speaker 2: He's talking

95
00:05:17.140 --> 00:05:22.117
to Luke saying, when I have to map map,
or map map map, I'm going to question

96
00:05:22.117 --> 00:05:25.400
the usefulness of what this is.
&gt;&gt; Brian Lonsdorf: Yeah.

97
00:05:25.400 --> 00:05:26.400
And I'll talk about.

98
00:05:27.500 --> 00:05:31.370
You can solve there's monad
transformers and you can use lenses.

99
00:05:31.370 --> 00:05:32.700
There's all sorts of
different ways to do that.

100
00:05:32.700 --> 00:05:35.200
You're not going to be stuck
with map all the time.

101
00:05:35.200 --> 00:05:39.850
But what I'm saying is and
in fact, it doesn't matter.

102
00:05:39.850 --> 00:05:42.530
The point is that you're
composing behaviors.

103
00:05:42.530 --> 00:05:43.800
&gt;&gt; Speaker 4: Is that what flat map

104
00:05:43.800 --> 00:05:45.140
would be?
&gt;&gt; Brian Lonsdorf: Almost.

105
00:05:45.140 --> 00:05:46.270
&gt;&gt; Speaker 4: Almost.

106
00:05:46.270 --> 00:05:48.000
&gt;&gt; Brian Lonsdorf: Flat map.

107
00:05:48.000 --> 00:05:54.740
Works exactly that way if they're
the same type, so same functor.

108
00:05:54.740 --> 00:05:57.810
And we'll talk about that next,
but first we have to learn.

109
00:05:57.810 --> 00:06:03.530
[LAUGH] We have to learn two
more functors and will go quick.

110
00:06:03.530 --> 00:06:05.460
I hope this example wasn't too quick.

111
00:06:05.460 --> 00:06:09.040
But for the most part it's just
compose this function a map over it.

112
00:06:09.040 --> 00:06:12.190
Compose this function a map
over it etc and so on.

113
00:06:12.190 --> 00:06:15.590
The only difference is IO
has a special thing run it

114
00:06:18.570 --> 00:06:23.110
and this one has an IO with a maybe in it
which is the same junk composes function

115
00:06:23.110 --> 00:06:26.550
and that map over it, [LAUGH] You see.

116
00:06:26.550 --> 00:06:27.421
Anyway

