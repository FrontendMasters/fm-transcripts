WEBVTT

1
00:00:00.000 --> 00:00:04.503
[MUSIC]

2
00:00:04.503 --> 00:00:07.610
&gt;&gt; Brian Lonsdorf: I'm going to
go through Either kind of fast.

3
00:00:07.610 --> 00:00:12.720
What other talk was that, I don't know.

4
00:00:12.720 --> 00:00:15.920
Anyway, I gotta dim the screen so
I don't get distracted.

5
00:00:15.920 --> 00:00:20.309
Okay, so Either is just like Maybe but
it's used for error handling.

6
00:00:21.690 --> 00:00:27.370
Which is kind of neat, in a pure
functional way you can handle errors.

7
00:00:27.370 --> 00:00:34.360
Now, it's like maybe, but
we do have two subclasses this time.

8
00:00:34.360 --> 00:00:38.280
It's not gonna be just a maybe null or
maybe something else.

9
00:00:38.280 --> 00:00:43.460
And if you see other implementations of
maybe, you're gonna see just and nothing.

10
00:00:43.460 --> 00:00:45.660
And it's gonna look a lot
more like either here.

11
00:00:45.660 --> 00:00:47.140
So, let's look at how this works.

12
00:00:49.950 --> 00:00:56.620
Just like maybe in container, if I run
over right, the x becomes the two.

13
00:00:56.620 --> 00:00:57.850
And I add one to it.

14
00:00:57.850 --> 00:00:58.350
Beautiful.

15
00:01:00.000 --> 00:01:04.590
Left just like a maybe no it
does not run it at all but

16
00:01:04.590 --> 00:01:09.290
what's cool about a left is it
has some error message in it.

17
00:01:09.290 --> 00:01:10.460
Just kind of embedded in the type.

18
00:01:10.460 --> 00:01:12.450
It's not going on the function but
it will run the message,

19
00:01:12.450 --> 00:01:14.300
it will return it with a message in there.

20
00:01:14.300 --> 00:01:18.100
So I could use that for errors so I could
say if it's good keep running it with

21
00:01:18.100 --> 00:01:23.700
the value inside if not just return
a left with the error message in it and

22
00:01:23.700 --> 00:01:27.580
those two types map works
differently with both types.

23
00:01:27.580 --> 00:01:32.330
So if I decide somewhere
in my app to return a left

24
00:01:32.330 --> 00:01:34.930
boom app stops running altogether.

25
00:01:34.930 --> 00:01:39.870
Error message ends up
propagating to the end.

26
00:01:39.870 --> 00:01:44.970
Now we're just talking about that you may
or may not have the value in a maybe.

27
00:01:44.970 --> 00:01:48.970
You might have a left and you might
have a right, and you don't know.

28
00:01:48.970 --> 00:01:51.990
And you're telling your app that,
and your coding to that.

29
00:01:51.990 --> 00:01:56.470
You're writing a safe app Aware of
the fact that may or may not be there.

30
00:01:56.470 --> 00:02:00.570
Now if you say like, yeah,
I don't want that anymore.

31
00:02:00.570 --> 00:02:02.940
I want to go back to [LAUGH] how it was.

32
00:02:04.320 --> 00:02:07.220
You can go back to being unsafe and
you can get the value out.

33
00:02:07.220 --> 00:02:08.180
You really can.

34
00:02:08.180 --> 00:02:10.410
There are some functions
that will do that.

35
00:02:10.410 --> 00:02:14.210
There is a lowercase either that
takes two functions to run.

36
00:02:14.210 --> 00:02:16.370
One on If it's a left side.

37
00:02:16.370 --> 00:02:17.470
One of it it's a right side.

38
00:02:17.470 --> 00:02:20.160
It will actually pick apart the type and
get you back out.

39
00:02:20.160 --> 00:02:20.810
Same with maybe.

40
00:02:20.810 --> 00:02:24.510
It will take a function to run
if it's null or otherwise.

41
00:02:24.510 --> 00:02:26.030
Cuz sometimes you wanna take some action.

42
00:02:26.030 --> 00:02:28.010
You don't wanna just ignore
the rest of your app.

43
00:02:28.010 --> 00:02:32.060
You want to take some action if it's null,
or take some action if it's a left, but

44
00:02:32.060 --> 00:02:35.950
for the most part,
these abstractions are wonderful.

45
00:02:35.950 --> 00:02:38.460
And you shouldn't be using those
functions, that's the wrong way to do it,

46
00:02:38.460 --> 00:02:41.470
if you have to use one of those functions,
it's like 2% of the time.

47
00:02:41.470 --> 00:02:46.030
And you're probably doing it wrong unless
there's a specific action you want to

48
00:02:46.030 --> 00:02:47.599
take, and so
just return the error message.

49
00:02:49.670 --> 00:02:52.640
Okay.
So let's look at how this works a little

50
00:02:52.640 --> 00:02:58.870
bit more this should be kind
of easier to understand

51
00:02:58.870 --> 00:03:03.760
at this point it's just like a maybe
just like an identity just like a list.

52
00:03:03.760 --> 00:03:04.920
We're saying but

53
00:03:04.920 --> 00:03:07.660
it's a little bit more complicated
because there's two types involved.

54
00:03:07.660 --> 00:03:09.700
It's left and its right.

55
00:03:09.700 --> 00:03:13.160
So if I say he determine
the age of this user and

56
00:03:13.160 --> 00:03:15.300
then we'll add one to it because
I don't know what else to do.

57
00:03:15.300 --> 00:03:16.320
I'm bored.

58
00:03:16.320 --> 00:03:18.600
I've run out of examples
that are interesting.

59
00:03:18.600 --> 00:03:20.710
But the main thing is.

60
00:03:20.710 --> 00:03:25.370
It says if it does have an age return it,
and if it doesn't,

61
00:03:25.370 --> 00:03:28.520
tell us we couldn't get agent and
boom map just does the right thing.

62
00:03:28.520 --> 00:03:31.730
We're either going to add one to the age,
or we're not going to get anything out,

63
00:03:31.730 --> 00:03:33.555
and it's just going to return
that error message back.

64
00:03:33.555 --> 00:03:36.250
Do you guys see how that
works as an error handling?

65
00:03:36.250 --> 00:03:37.460
&gt;&gt; Speaker 2: Hey, Brian there's

66
00:03:37.460 --> 00:03:40.270
a couple of questions in chat here.

67
00:03:40.270 --> 00:03:42.600
One on what's right and left and

68
00:03:42.600 --> 00:03:46.000
whether they're part of the point freelib.
&gt;&gt; Brian Lonsdorf: Okay,

69
00:03:46.000 --> 00:03:49.130
all these libraries will be included
in the examples and in the demo app so

70
00:03:49.130 --> 00:03:50.900
you can look at them further.

71
00:03:50.900 --> 00:03:54.690
But these are two subclasses
of the either library.

72
00:03:54.690 --> 00:04:00.970
We're using folktale, just for
those who are impatient, for this one And

73
00:04:00.970 --> 00:04:06.160
so, yeah, it's folktales either library,

74
00:04:06.160 --> 00:04:10.852
two subclasses.
&gt;&gt; Speaker 2: There is another question,

75
00:04:10.852 --> 00:04:15.590
is right kinda like my func or
val while left is my val and

76
00:04:15.590 --> 00:04:18.170
my function.
&gt;&gt; Brian Lonsdorf: Hey, hey, hey, nice.

77
00:04:18.170 --> 00:04:24.650
No, I at some point put an either up.

78
00:04:24.650 --> 00:04:27.570
That was wrong and
it messed up a lot of people's brains.

79
00:04:28.680 --> 00:04:30.000
So, sorry about that.

80
00:04:31.080 --> 00:04:36.740
Either is specifically like left will
never run, it has the error in it.

81
00:04:36.740 --> 00:04:38.450
Right will always run.

82
00:04:38.450 --> 00:04:39.990
You're good.

83
00:04:39.990 --> 00:04:41.920
But it is a disjunction operator.

84
00:04:41.920 --> 00:04:43.710
You've got left or right.

85
00:04:43.710 --> 00:04:48.470
It's just that when you map over it,
you never run the left.

86
00:04:48.470 --> 00:04:51.570
So, it's disjunction in that right.

87
00:04:51.570 --> 00:04:55.040
You know what I'm saying,
it's the or in that sense,

88
00:04:55.040 --> 00:05:00.040
but why are they called left and right?

89
00:05:00.040 --> 00:05:00.883
I don't know.

90
00:05:00.883 --> 00:05:06.120
Anyway [LAUGH] Left and
right is, I should tell you.

91
00:05:06.120 --> 00:05:08.690
Left and right,
it either has two properties.

92
00:05:08.690 --> 00:05:09.640
It's left and it's right.

93
00:05:09.640 --> 00:05:11.360
It's x and y.
I don't know.

94
00:05:11.360 --> 00:05:13.750
So it's either the left side or
the right side of the either.

95
00:05:15.740 --> 00:05:17.899
If you think it is an or
operator, it's left or right.

96
00:05:18.930 --> 00:05:22.190
Okay, moving on I'm gonna spend too
much time on either because you kind of

97
00:05:22.190 --> 00:05:23.680
just understand that.

98
00:05:23.680 --> 00:05:26.900
Hey, it's gonna run on or right or
it's going to run errands not gonna run on

99
00:05:26.900 --> 00:05:32.470
the left and just remember the part
that top line And determine the age

100
00:05:32.470 --> 00:05:37.890
that if you wanted to run return a right
if, you wanted to stop or turn left.

101
00:05:37.890 --> 00:05:41.740
There's not much more to it and
the reason I spend so

102
00:05:41.740 --> 00:05:44.990
much time on it is when you're doing
the synchronous stuff which we are all

103
00:05:44.990 --> 00:05:49.520
the time always kind of isn't as useful
as when you're doing sequence stuff.

