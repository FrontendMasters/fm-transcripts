WEBVTT

1
00:00:00.000 --> 00:00:04.675
[MUSIC]

2
00:00:04.675 --> 00:00:05.920
&gt;&gt; Joe Nelson: So
what's our challenge here?

3
00:00:05.920 --> 00:00:11.790
Make a boolean function that says whether
a given person wrote any of the articles.

4
00:00:11.790 --> 00:00:12.810
Okay.

5
00:00:12.810 --> 00:00:17.710
So we already in the previous one made one
that shows us everyone who wrote articles.

6
00:00:17.710 --> 00:00:21.549
So we can use to build on that I guess,
would be one way to think of it.

7
00:00:23.800 --> 00:00:27.620
Was our first one,
actually we already defined it,

8
00:00:27.620 --> 00:00:29.460
it's called name, so
I guess we could use it here.

9
00:00:31.730 --> 00:00:37.920
See up at the top we have the solution to
challenge one is a function called names,

10
00:00:38.970 --> 00:00:42.420
that'll tell us the names of the people
who did the stuff, who wrote the stuff.

11
00:00:42.420 --> 00:00:46.840
So I think we could say contains.

12
00:00:48.070 --> 00:00:53.239
See we need to get
the array put into a thing.

13
00:00:53.239 --> 00:00:56.468
That's a good point-free way to do it.

14
00:00:56.468 --> 00:00:57.610
Compose in contains.

15
00:00:58.890 --> 00:01:05.104
Yeah, we could compose(_contains) okay,

16
00:01:05.104 --> 00:01:10.242
I don't know I think you're writing.

17
00:01:10.242 --> 00:01:13.832
Let's refractor,

18
00:01:13.832 --> 00:01:19.954
let's start like this function,

19
00:01:19.954 --> 00:01:25.653
name, and say return compose,

20
00:01:25.653 --> 00:01:30.099
contains name, names.

21
00:01:32.760 --> 00:01:34.100
It's got to be a way better way.

22
00:01:34.100 --> 00:01:34.820
Just thinking it through.

23
00:01:36.140 --> 00:01:43.010
&gt;&gt; Student: Hey Joe or Brian could we get
elaboration on what point free code means?

24
00:01:43.010 --> 00:01:47.304
&gt;&gt; Joe Nelson: Sure I'll
go back to a slide

25
00:01:47.304 --> 00:01:48.848
&gt;&gt; Student 2: Could we finish two first

26
00:01:48.848 --> 00:01:50.248
before we get to that?

27
00:01:50.248 --> 00:01:51.286
That's good from there.

28
00:01:51.286 --> 00:01:53.480
&gt;&gt; Joe Nelson: Alright, finish two.

29
00:01:53.480 --> 00:01:54.900
So, let's think how to make it pretty.

30
00:01:56.110 --> 00:01:57.600
I'm thinking a composition.

31
00:01:59.570 --> 00:02:01.413
&gt;&gt; Student: I don't think
there's a way to do this one.

32
00:02:01.413 --> 00:02:03.750
&gt;&gt; Joe Nelson: Wait, actually,
we could take out the article.

33
00:02:03.750 --> 00:02:06.968
Because what compose returns
as the function is waiting for

34
00:02:06.968 --> 00:02:09.038
what articles the name is expecting.

35
00:02:13.294 --> 00:02:15.480
&gt;&gt; Joe Nelson: You don't think
there's a point three way of saying?

36
00:02:15.480 --> 00:02:20.130
&gt;&gt; Student: No because the name I see
going to contains the really good if it's

37
00:02:20.130 --> 00:02:23.870
really good if you try to if you don't
make a commentator you do this you're just

38
00:02:23.870 --> 00:02:27.170
going to end up with weird crazy as you
just read the function of Definitely.

39
00:02:29.320 --> 00:02:30.465
&gt;&gt; Joe Nelson: So
let's see before i press run.

40
00:02:30.465 --> 00:02:31.598
It just seems to make sense.

41
00:02:31.598 --> 00:02:32.900
It is authored, you've given it a name.

42
00:02:36.050 --> 00:02:38.141
It's going to return a composition scale.

43
00:02:38.141 --> 00:02:42.810
It's going to return a function which
does names first on whatever it is given.

44
00:02:42.810 --> 00:02:46.420
So that means because names
is the last thing in compose.

45
00:02:46.420 --> 00:02:49.420
That means that's the first
thing that new arguments go into

46
00:02:50.620 --> 00:02:53.240
in the whole composed result.

47
00:02:53.240 --> 00:02:56.990
So names was expecting this kind
of object thing we had before.

48
00:02:56.990 --> 00:02:59.276
Which was articles.

49
00:02:59.276 --> 00:03:03.510
&gt;&gt; Student: [COUGH]
&gt;&gt; Joe Nelson: Cool.

50
00:03:03.510 --> 00:03:05.319
Let's see if it works then
we'll go over it again.

51
00:03:06.860 --> 00:03:09.840
&gt;&gt; Student: You're gonna have
to call it in a weird way,

52
00:03:09.840 --> 00:03:15.190
because if the returning a function,
isAuthor returns a functions.

53
00:03:15.190 --> 00:03:18.558
So, you have to close it and
reopen it when you call it.

54
00:03:18.558 --> 00:03:19.259
&gt;&gt; Joe Nelson: That's a pain.

55
00:03:19.259 --> 00:03:21.130
&gt;&gt; Student: Yeah,
I would mention that part.

56
00:03:21.130 --> 00:03:21.670
&gt;&gt; Joe Nelson: Just do it.

57
00:03:23.700 --> 00:03:25.505
And at that point.

58
00:03:44.331 --> 00:03:50.328
&gt;&gt; Joe Nelson: 25 seconds and I could
&gt;&gt; Student 2: You are returning

59
00:03:50.328 --> 00:03:55.310
the function instead of
the result it contains.

60
00:03:55.310 --> 00:03:56.160
&gt;&gt; Joe Nelson: Yeah I should do this.

61
00:03:56.160 --> 00:03:58.923
I should like-
&gt;&gt; Student: There you are.

62
00:04:04.724 --> 00:04:06.267
&gt;&gt; Student: Good.
&gt;&gt; Joe Nelson: Yay, new errors.

63
00:04:06.267 --> 00:04:12.099
How do we play this up like is there a way
that seems a little bit complicated?

64
00:04:12.099 --> 00:04:14.230
&gt;&gt; Student: The way we're dealing
with the would be composed.

65
00:04:15.600 --> 00:04:18.570
&gt;&gt; Joe Nelson: I thought like when
I originally made it such a safe.

66
00:04:18.570 --> 00:04:23.600
What the answer might come out
lies it was because I understood.

67
00:04:27.900 --> 00:04:29.604
&gt;&gt; Student: I mean I put it on one line.

68
00:04:29.604 --> 00:04:31.150
It seemed pretty straightforward to me.

69
00:04:31.150 --> 00:04:33.500
It was like run this composition.

70
00:04:35.980 --> 00:04:39.220
&gt;&gt; Joe Nelson: Okay,
well it does use composing and contains.

71
00:04:41.120 --> 00:04:43.990
And maybe I make a big deal of it because
its not as point free as I want to.

72
00:04:46.280 --> 00:04:49.580
So is author, you give it a name,
you give it articles.

73
00:04:49.580 --> 00:04:51.240
It does a couple things.

74
00:04:51.240 --> 00:04:57.229
It pulls the names out, it sends it into
contains with name, and so then that's it.

75
00:05:08.123 --> 00:05:10.111
&gt;&gt; Student: We're going to
see a whole bunch of compose.

76
00:05:10.111 --> 00:05:13.156
And it's gonna feel really useful
throughout the rest of this.

77
00:05:13.156 --> 00:05:17.874
But, if you're having some trouble
right now understanding why,

78
00:05:17.874 --> 00:05:20.038
what it does, ask questions.

79
00:05:20.038 --> 00:05:23.730
And if you're understood if you like why
is this important and why do I care,

80
00:05:23.730 --> 00:05:27.106
you will just see a bunch more examples
to answer that second question.

81
00:05:27.106 --> 00:05:30.391
&gt;&gt; Joe Nelson: Yeah, every challenge
to release at least I answered is not

82
00:05:30.391 --> 00:05:34.794
a compelling way I like yeah compose uses
everywhere like when I was calling like

83
00:05:34.794 --> 00:05:36.516
pass one function in another.

84
00:05:36.516 --> 00:05:39.946
But it's absolutely useful all the time,
like in effect,

85
00:05:39.946 --> 00:05:44.070
in a live demo that we're gonna make,
it's used a lot ineffectively.

