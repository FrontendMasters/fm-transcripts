WEBVTT

1
00:00:00.000 --> 00:00:04.404
[MUSIC]

2
00:00:04.404 --> 00:00:09.069
&gt;&gt; Brian Lonsdorf: Let's go over two and
then let people do three, basically,

3
00:00:09.069 --> 00:00:12.372
just kind of did it but
let's look at this.

4
00:00:12.372 --> 00:00:16.328
Let me make sure if I run it,
remember not to find.

5
00:00:16.328 --> 00:00:19.138
Good.
[LAUGH] All right.

6
00:00:19.138 --> 00:00:23.428
Undefined is not a function because I have
not defined the function, let's do that.

7
00:00:23.428 --> 00:00:27.805
So what my test is hey,
I'm actually expecting identity of do,

8
00:00:27.805 --> 00:00:30.410
which is the first thing in this list.

9
00:00:30.410 --> 00:00:34.642
And I'm gonna run it with xs,
which is an identity of this list, right?

10
00:00:34.642 --> 00:00:37.460
So, you don't have to
think too much about it.

11
00:00:37.460 --> 00:00:41.893
We wanna say, use head to get
the first element of the list, but

12
00:00:41.893 --> 00:00:45.084
we're going to map over
identity to do that.

13
00:00:45.084 --> 00:00:49.982
So, we're gonna map
head over the identity.

14
00:00:49.982 --> 00:00:52.572
Well, identity gets passed in.

15
00:00:52.572 --> 00:00:54.004
Is that what's tripping you guys up?

16
00:00:54.004 --> 00:00:55.366
&gt;&gt; Speaker 2: It was tricky for

17
00:00:55.366 --> 00:00:56.820
me [INAUDIBLE]
&gt;&gt; Brian Lonsdorf: Okay.

18
00:00:56.820 --> 00:01:02.884
&gt;&gt; Speaker 2: I tried with
actually using [INAUDIBLE]

19
00:01:02.884 --> 00:01:03.472
&gt;&gt; Brian Lonsdorf: Yeah,

20
00:01:03.472 --> 00:01:05.628
that makes a lot of sense.

21
00:01:05.628 --> 00:01:10.632
The reason I wanted to do this exercise.

22
00:01:10.632 --> 00:01:14.275
They're all making functions that
are not actually running functions and

23
00:01:14.275 --> 00:01:18.147
I'm running the function in the test which
I probably should have thought about

24
00:01:18.147 --> 00:01:22.284
a little bit more, but what's cool about
this is it doesn't have to take identity.

25
00:01:22.284 --> 00:01:25.948
You can take maybe,
you can take a list any functor.

26
00:01:25.948 --> 00:01:29.384
So of course, the functor has
to have a list inside it or

27
00:01:29.384 --> 00:01:32.299
else have a blog but
mapping over any functor,

28
00:01:32.299 --> 00:01:36.430
map is just going to dynamically
dispatch on any functor it gets.

29
00:01:36.430 --> 00:01:38.282
So, when I give an identity
of this it'll work.

30
00:01:38.282 --> 00:01:41.150
So, let's run that.

31
00:01:41.150 --> 00:01:45.670
But yeah, I could totally understand
why that tripped a lot of people up.

32
00:01:45.670 --> 00:01:47.552
What did I do wrong?

33
00:01:47.552 --> 00:01:51.064
Map head, great, yeah.

34
00:01:51.064 --> 00:01:52.374
Sorry about that.

35
00:01:52.374 --> 00:01:53.599
Did I not do one?

36
00:01:53.599 --> 00:01:56.496
We're gonna do one together, why not?

37
00:01:56.496 --> 00:01:58.985
[LAUGH] Sorry guys, did I miss that?

38
00:01:58.985 --> 00:02:00.592
&gt;&gt; Speaker 3: No, you did one already,-
&gt;&gt; Brian Lonsdorf: Okay.

39
00:02:00.592 --> 00:02:01.312
&gt;&gt; Speaker 3: And then you blew it away.

40
00:02:01.312 --> 00:02:02.130
&gt;&gt; Brian Lonsdorf: All right.

41
00:02:02.130 --> 00:02:03.112
That's right, okay.

42
00:02:03.112 --> 00:02:04.873
So we've got one in CU Ged.

43
00:02:04.873 --> 00:02:07.625
So, we're just going to map
out one with the map head.

44
00:02:07.625 --> 00:02:10.173
It's really not that difficult,
it's just like working with lists,

45
00:02:10.173 --> 00:02:12.520
but it's a different type, and
you're like why does that work?

46
00:02:12.520 --> 00:02:13.104
I don't like it.

47
00:02:13.104 --> 00:02:16.474
[LAUGH] Okay,

48
00:02:16.474 --> 00:02:22.962
got number three, I like it.

49
00:02:22.962 --> 00:02:25.129
So for a lot of people online,

50
00:02:25.129 --> 00:02:30.072
I don't know if there's a lot of
people in the chatroom or what, but

51
00:02:30.072 --> 00:02:34.867
if you're out there and
you're confused I'm here now and paid.

52
00:02:34.867 --> 00:02:37.532
[LAUGH] So, ask me.

53
00:02:37.532 --> 00:02:39.832
Questions or Joe?

54
00:02:39.832 --> 00:02:44.710
Wait another minute or
two before we do three.

55
00:02:44.710 --> 00:02:46.172
And then, how many exercises are there?

56
00:02:46.172 --> 00:02:47.844
&gt;&gt; Students: Four.

57
00:02:47.844 --> 00:02:50.260
&gt;&gt; Brian Lonsdorf: Okay, cool.

58
00:02:50.260 --> 00:02:51.420
I think one of them has like six.

59
00:02:51.420 --> 00:02:52.740
[LAUGH] We don't have to do them all.

60
00:02:52.740 --> 00:02:53.972
Yeah.

61
00:03:01.266 --> 00:03:08.272
&gt;&gt; Brian Lonsdorf: So we're using currying
partial application of map here with head,

62
00:03:08.272 --> 00:03:12.152
so I could write this another way to say

63
00:03:23.576 --> 00:03:28.763
&gt;&gt; Brian Lonsdorf: And that'll get me,
&gt;&gt; Brian Lonsdorf: That'll

64
00:03:28.763 --> 00:03:33.512
get me an identity a blah,
but up here we just partially

65
00:03:33.512 --> 00:03:37.544
applied it without calling
the whole thing and

66
00:03:37.544 --> 00:03:42.418
they could just use xs which
is an identity of this list.

67
00:03:42.418 --> 00:03:43.782
So, this will actually run it.

68
00:03:43.782 --> 00:03:48.894
This will return me a function that
takes an identity or some factor.

69
00:04:05.038 --> 00:04:07.264
&gt;&gt; Brian Lonsdorf: Take this opportunity
to talk about how much I love

70
00:04:07.264 --> 00:04:08.116
the Gin Blossoms.

71
00:04:13.008 --> 00:04:16.766
&gt;&gt; Brian Lonsdorf: Just telling Joe, came
on in the grocery store the other day,

72
00:04:16.766 --> 00:04:20.176
I was like, yeah [LAUGH] and
now I hate what I've become,

73
00:04:31.238 --> 00:04:31.803
&gt;&gt; Brian Lonsdorf: James,

74
00:04:31.803 --> 00:04:35.932
head is in ramda and
we've been using ramda this whole time.

75
00:04:35.932 --> 00:04:40.217
There is maybe one other function we might
see from it that hasn't been in the other

76
00:04:40.217 --> 00:04:40.846
examples.

77
00:04:40.846 --> 00:04:44.100
Sorry for not going over that,
it's just like first,

78
00:04:44.100 --> 00:04:46.940
you have to remember
creators in the chatroom.

79
00:04:52.394 --> 00:04:53.986
&gt;&gt; Brian Lonsdorf: I have
a 20 second delay, right?

80
00:04:53.986 --> 00:04:54.986
&gt;&gt; Speaker 3: Yeah.

81
00:04:54.986 --> 00:04:55.992
&gt;&gt; Brian Lonsdorf: All right
&gt;&gt; Speaker 3: So

82
00:04:55.992 --> 00:04:58.234
when you see they're chatting,
they're gonna hear your answer.

83
00:04:58.234 --> 00:05:00.418
&gt;&gt; Brian Lonsdorf: Do that, don't do that.

84
00:05:00.418 --> 00:05:04.298
[LAUGH] 20 seconds later.

85
00:05:11.353 --> 00:05:13.608
&gt;&gt; Speaker 3: Someone's asking,
what is [CROSSTALK]

86
00:05:13.608 --> 00:05:14.314
&gt;&gt; Brian Lonsdorf: Well,

87
00:05:14.314 --> 00:05:19.493
let me talk about, for
the people who are bored and,

88
00:05:19.493 --> 00:05:26.461
well other people are working,
there I'll ask theoretically here.

89
00:05:26.461 --> 00:05:30.736
Map lifted head into a functor context.

90
00:05:30.736 --> 00:05:32.588
You've raised this function,

91
00:05:32.588 --> 00:05:37.252
they just worked on something normal into
something that worked on a functor, so

92
00:05:37.252 --> 00:05:40.488
we've transformed this
function into a new function.

93
00:05:40.488 --> 00:05:45.475
That's kinda cool, just like a list,
if I have a function that just gets like

94
00:05:45.475 --> 00:05:48.875
I don't know,
running out of cheap easy examples.

95
00:05:48.875 --> 00:05:53.832
[LAUGH] But let's say, okay,

96
00:05:53.832 --> 00:05:58.591
let's just replace a's for

97
00:05:58.591 --> 00:06:01.574
b's and var abs.

98
00:06:01.574 --> 00:06:02.926
That's absolute value isn't it?

99
00:06:02.926 --> 00:06:09.644
[LAUGH] A4b, take it's s.

100
00:06:09.644 --> 00:06:10.916
I don't know, ramda get on it.

101
00:06:10.916 --> 00:06:12.439
Why isn't this in there?

102
00:06:12.439 --> 00:06:16.605
[LAUGH] Should be there.

103
00:06:16.605 --> 00:06:22.316
Anyway, so a4b,
this just works on a string, right?

104
00:06:22.316 --> 00:06:24.790
If I wanted to work on an array,

105
00:06:24.790 --> 00:06:28.897
I could lift it into an array
function by just boom.

106
00:06:28.897 --> 00:06:35.428
Now, a4b's works on an array
not just one value.

107
00:06:35.428 --> 00:06:38.319
We've broken the problem down into
each element we're just gonna run

108
00:06:38.319 --> 00:06:40.434
it on the one thing and
then we'll just map over it.

109
00:06:40.434 --> 00:06:42.956
If we need to,
now we've got double purpose.

110
00:06:42.956 --> 00:06:44.390
I could just call this in line.

111
00:06:44.390 --> 00:06:47.961
A lot of people don't do this right now
cuz they have the ceremony of the glue

112
00:06:47.961 --> 00:06:50.698
code in the names in the return
in the blah, blah, blah.

113
00:06:50.698 --> 00:06:54.656
I don't know, it's something
like Bill Cosby and your jello.

114
00:06:54.656 --> 00:06:59.620
[LAUGH] But the point is that map,
if you just surround a function now,

115
00:06:59.620 --> 00:07:01.770
you just partially apply it.

116
00:07:01.770 --> 00:07:04.561
Boom, now,
this function works on anything.

117
00:07:04.561 --> 00:07:06.145
&gt;&gt; Speaker 5: That could work on maybes?

118
00:07:06.145 --> 00:07:07.641
&gt;&gt; Brian Lonsdorf: That works on maybes,
identities, anything.

119
00:07:07.641 --> 00:07:10.590
So, hey, I need a null check.

120
00:07:10.590 --> 00:07:14.410
Wrap this thing in something,
now it's equipped with nulls, null checks,

121
00:07:14.410 --> 00:07:15.720
if it gets a null, maybe.

122
00:07:15.720 --> 00:07:17.296
It works on functors.

123
00:07:17.296 --> 00:07:21.313
Depending on the functor, this will
run many times, this might not run.

124
00:07:21.313 --> 00:07:23.618
This will run with no effects at all.

125
00:07:23.618 --> 00:07:28.930
&gt;&gt; Speaker 5: So when you use
the term lift, you're just saying

126
00:07:28.930 --> 00:07:34.890
take a standard function and
make it work with any form.

127
00:07:34.890 --> 00:07:35.553
&gt;&gt; Brian Lonsdorf: Yes.
Yes,

128
00:07:35.553 --> 00:07:38.634
sorry, someone, Mark G's talking,
I always have to pay attention.

129
00:07:38.634 --> 00:07:44.082
[LAUGH] So, that's exactly right.

130
00:07:44.082 --> 00:07:49.746
Look at the implementation
of map on Container.

131
00:07:49.746 --> 00:07:50.700
Look at that, where did F go?

132
00:07:50.700 --> 00:07:52.718
It went inside of the container.

133
00:07:52.718 --> 00:07:59.770
We've lifted it into the container and ran
the function from within the container.

134
00:07:59.770 --> 00:08:01.320
Same thing with maybe.

135
00:08:01.320 --> 00:08:02.158
Let's look at maybe.

136
00:08:02.158 --> 00:08:07.685
Hurry, hurry [LAUGH].

137
00:08:07.685 --> 00:08:11.023
But this one is more interesting, so

138
00:08:11.023 --> 00:08:16.514
one would look at this one and
say, we've lifted capitalize

139
00:08:16.514 --> 00:08:21.912
into the maybe context to run
it there it doesn't run here.

140
00:08:21.912 --> 00:08:24.488
It doesn't run capitalize on flamethrower,

141
00:08:24.488 --> 00:08:28.921
it runs capitalize on flamethrower inside
the maybe we've lifted it in there.

142
00:08:28.921 --> 00:08:37.273
[SOUND] [LAUGH] So the power of running
a function went from within a context,

143
00:08:37.273 --> 00:08:42.676
allows you to abstract
function application.

144
00:08:42.676 --> 00:08:44.176
You can do all sorts of crazy stuff.

145
00:08:44.176 --> 00:08:49.128
You can do type conversions and
you can run many times like a list.

146
00:08:49.128 --> 00:08:50.514
You can do maybe, maybe not.

147
00:08:50.514 --> 00:08:53.895
Now you have to obey the laws,
which we will look at and

148
00:08:53.895 --> 00:08:56.610
that kinda restricts what you can do here.

149
00:08:56.610 --> 00:09:01.698
But when you get the idea of map,
you get a pretty good intuition

150
00:09:01.698 --> 00:09:06.116
of it's map,
I'm just gonna go in there and map it.

151
00:09:06.116 --> 00:09:08.082
So, if you're working in Schola and
you get an option.

152
00:09:08.082 --> 00:09:11.252
You're like I want the thing
inside the option.

153
00:09:11.252 --> 00:09:13.010
You can't get the thing inside the option.

154
00:09:13.010 --> 00:09:15.949
You have to map over it.

155
00:09:15.949 --> 00:09:16.730
So yeah.

