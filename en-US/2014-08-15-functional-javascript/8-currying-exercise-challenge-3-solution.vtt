WEBVTT

1
00:00:00.000 --> 00:00:04.679
[MUSIC]

2
00:00:04.679 --> 00:00:07.339
&gt;&gt; Joe Nelson: So we did 1 and 2 and 3.

3
00:00:07.339 --> 00:00:10.460
What does 3 ask us to do?

4
00:00:10.460 --> 00:00:13.671
Create a function to find
the largest number in a list.

5
00:00:13.671 --> 00:00:15.400
And what are we allowed to use?

6
00:00:15.400 --> 00:00:16.340
This greater thing,

7
00:00:16.340 --> 00:00:19.939
which we just created, which returns
the greater of its two inputs.

8
00:00:21.070 --> 00:00:23.340
So it's saying we can
do this with currying.

9
00:00:23.340 --> 00:00:26.501
And one of the list functions,
map, filter, or reduce.

10
00:00:26.501 --> 00:00:30.350
Okay, well,
let's think about that first bit.

11
00:00:30.350 --> 00:00:32.280
Think that through first.

12
00:00:32.280 --> 00:00:35.100
So we want to find
the greatest number in a list.

13
00:00:36.380 --> 00:00:38.130
Okay, that kind of rules map out,
in my mind.

14
00:00:38.130 --> 00:00:40.740
Because if I'm given a list, and
I'm operating on each cell and

15
00:00:40.740 --> 00:00:41.430
making a new list.

16
00:00:41.430 --> 00:00:43.649
I don't want a new list,
I want the biggest thing in the list.

17
00:00:43.649 --> 00:00:45.070
So there goes map.

18
00:00:45.070 --> 00:00:46.390
Filter is almost there.

19
00:00:46.390 --> 00:00:50.120
What if we had a way to filter out
the ones that aren't the greatest?

20
00:00:50.120 --> 00:00:51.810
And it would give us
a list with one thing.

21
00:00:51.810 --> 00:00:53.170
And then we could take
the beginning of the list.

22
00:00:53.170 --> 00:00:57.110
It's kind of complicated,
whereas reduce is pretty good.

23
00:00:57.110 --> 00:00:59.030
Reduce is like rolling a snowball.

24
00:00:59.030 --> 00:01:02.280
You have this thing that you have
the beginning kernel of snow.

25
00:01:02.280 --> 00:01:05.247
And you roll it on the ground,
it gets bigger and bigger and accumulates.

26
00:01:05.247 --> 00:01:07.888
[LAUGH]
&gt;&gt; Joe Nelson: And

27
00:01:07.888 --> 00:01:10.520
what would the snowball be?

28
00:01:10.520 --> 00:01:12.509
Reduce is often used to
add numbers together.

29
00:01:12.509 --> 00:01:15.224
You would say, I start with zero.

30
00:01:15.224 --> 00:01:16.874
And then the numbers in the list,
I add them in.

31
00:01:16.874 --> 00:01:18.460
And that's that's my snowball growing.

32
00:01:19.460 --> 00:01:21.390
Here we have a greater thing.

33
00:01:21.390 --> 00:01:25.690
And in a way that Brian's gonna describe,
these things are,

34
00:01:25.690 --> 00:01:27.470
maybe this isn't a monoid, maybe it is.

35
00:01:27.470 --> 00:01:31.257
Max with numbers is a mathematical
structure that you gonna identify.

36
00:01:31.257 --> 00:01:33.620
When we're saying separate and
recognize them before.

37
00:01:33.620 --> 00:01:36.510
We're gonna start to recognize
mathematical structures.

38
00:01:36.510 --> 00:01:40.700
And seeing those structures that make you
think, I should be using a reduce here.

39
00:01:40.700 --> 00:01:41.860
But in this case, it is a reduce.

40
00:01:43.620 --> 00:01:48.434
Let's see, so
I'm gonna walk through what it would do.

41
00:01:48.434 --> 00:01:49.930
Why I am about to type
what I'm gonna type.

42
00:01:51.130 --> 00:01:55.740
Reduce takes a function that says,
given the snowball we've accumulated so

43
00:01:55.740 --> 00:01:59.230
far and the next flake it's
about to run over and pick up.

44
00:01:59.230 --> 00:02:00.520
How do we make the new snowball?

45
00:02:02.440 --> 00:02:04.760
And this max, this greater thing.

46
00:02:04.760 --> 00:02:07.350
If you'd been rolling over and
saying, every number I see.

47
00:02:08.630 --> 00:02:11.800
If I see a new number, and
I have the current winning number,

48
00:02:11.800 --> 00:02:14.270
we combine them to find
which is actually higher.

49
00:02:14.270 --> 00:02:15.232
And you keep doing that.

50
00:02:15.232 --> 00:02:19.169
So your snowball's really just one number
that's getting larger, and larger, and

51
00:02:19.169 --> 00:02:21.256
larger if it finds larger
things ahead of it.

52
00:02:22.640 --> 00:02:23.978
So we can reduce.

53
00:02:23.978 --> 00:02:26.400
You see how greater works, by the way?

54
00:02:26.400 --> 00:02:31.998
Let's check it out,
greater(1,2), greater(2,1).

55
00:02:31.998 --> 00:02:33.440
It just gives you the bigger number.

56
00:02:35.670 --> 00:02:36.963
So let's reduce on it.

57
00:02:38.709 --> 00:02:41.625
&gt;&gt; Joe Nelson: I'm trying to think
of the order that they do it.

58
00:02:41.625 --> 00:02:44.015
It's the function and the initial value.

59
00:02:44.015 --> 00:02:46.575
Is that what it would be in this thing?

60
00:02:46.575 --> 00:02:50.280
But wait, if I do this,
it's actually going to fail.

61
00:02:50.280 --> 00:02:51.324
Can we think of why?

62
00:02:51.324 --> 00:02:56.647
[LAUGH] We start with zero, and now we're
gonna start seeing things from the list.

63
00:03:00.150 --> 00:03:01.350
&gt;&gt; Joe Nelson: Or will it will fail?

64
00:03:01.350 --> 00:03:07.129
I'm thinking there could be
a problem with negative numbers.

65
00:03:11.654 --> 00:03:13.420
&gt;&gt; Joe Nelson: Yeah, yeah,
yeah, so we have two tests.

66
00:03:14.800 --> 00:03:16.240
So it passes the first test.

67
00:03:17.740 --> 00:03:19.680
But in the case when we passed in zero for

68
00:03:19.680 --> 00:03:23.960
the second test, zero is actually bigger
than any of the numbers in the list.

69
00:03:23.960 --> 00:03:25.510
So it de facto wins.

70
00:03:25.510 --> 00:03:28.450
It's like before you even started,
it's over.

71
00:03:28.450 --> 00:03:31.968
So that's why we're talking about
the negative infinity thing.

72
00:03:31.968 --> 00:03:35.574
If the way we reduce is to find new
kings of the hill, new bigger numbers,

73
00:03:35.574 --> 00:03:39.770
we wanna start with the weakest numbers
to be sure that everyone has a chance.

74
00:03:39.770 --> 00:03:41.938
Don't put it an insane
contender in to begin with.

75
00:03:41.938 --> 00:03:47.580
Negative infinity,
&gt;&gt; Joe Nelson: See,

76
00:03:47.580 --> 00:03:51.139
there you get your satisfaction
at the end, All tests pass.

77
00:03:51.139 --> 00:03:52.320
&gt;&gt; Co-Instructor: We did it.

78
00:03:52.320 --> 00:03:55.491
Did we go over Challenge 2?

79
00:03:55.491 --> 00:03:56.322
&gt;&gt; Joe Nelson: Let's see.

80
00:03:56.322 --> 00:03:59.745
I thought so, this is Challenge 2.

81
00:03:59.745 --> 00:04:03.734
To triple every number in a list?

82
00:04:03.734 --> 00:04:06.049
Yeah, like using a map and making
a triple, and putting them together.

83
00:04:07.760 --> 00:04:10.292
&gt;&gt; Co-Instructor: I was
just busy chatting jokes.

84
00:04:10.292 --> 00:04:11.790
[LAUGH].

85
00:04:11.790 --> 00:04:12.939
&gt;&gt; Joe Nelson: I see.

86
00:04:12.939 --> 00:04:17.708
[LAUGH] I wonder if now is
a good time to continue.

87
00:04:17.708 --> 00:04:21.131
[COUGH] It hard to feel
where everybody is.

88
00:04:21.131 --> 00:04:23.875
Is every one here good, thumbs up?

89
00:04:23.875 --> 00:04:26.497
That wasn't a lot of thumbs up.

90
00:04:26.497 --> 00:04:35.435
[LAUGH]
&gt;&gt; Co-Instructor: Does

91
00:04:35.435 --> 00:04:37.644
anybody need a reduce primer?

92
00:04:37.644 --> 00:04:39.682
Or does everybody understand reduce?

93
00:04:39.682 --> 00:04:41.893
Cuz we're gonna look
at those with monoids?

94
00:04:41.893 --> 00:04:43.422
&gt;&gt; Audience 1: It wouldn't hurt.

95
00:04:43.422 --> 00:04:44.228
[LAUGH]
&gt;&gt; Co-Instructor: All right,

96
00:04:44.228 --> 00:04:46.400
I'm just gonna do it quickly.

97
00:04:46.400 --> 00:04:49.470
Explicit function that
shows the accumulator.

98
00:04:49.470 --> 00:04:52.560
&gt;&gt; Joe Nelson: Could we make a new
thing that reduces something?

99
00:04:52.560 --> 00:04:53.534
Let's see, what else could we do?

100
00:04:53.534 --> 00:04:56.053
We could use adding numbers
together with reduce.

101
00:04:56.053 --> 00:04:57.900
I'm trying to think of
another good example.

102
00:04:57.900 --> 00:04:59.280
&gt;&gt; Co-Instructor: How about
concating a list, yeah.

103
00:04:59.280 --> 00:05:01.283
&gt;&gt; Joe Nelson: Concating a list, okay.

104
00:05:01.283 --> 00:05:03.690
Do we have-
&gt;&gt; Co-Instructor: Make map with reduce.

105
00:05:05.990 --> 00:05:07.016
&gt;&gt; Joe Nelson: Yeah, I'm trying to think.

106
00:05:07.016 --> 00:05:10.300
So we have concat, don't we?

107
00:05:10.300 --> 00:05:15.808
We have push,
that's kind of [INAUDIBLE] though.

108
00:05:19.214 --> 00:05:20.410
&gt;&gt; Joe Nelson: So how we do it?

109
00:05:20.410 --> 00:05:22.669
Our accumulator's got
a list going already and

110
00:05:22.669 --> 00:05:24.540
wants to put a new thing into that list.

111
00:05:26.660 --> 00:05:28.167
So let's think of how we do that.

112
00:05:28.167 --> 00:05:31.452
Our function-
&gt;&gt; Audience 1: Can you clear your

113
00:05:31.452 --> 00:05:34.280
screen so you start at the top?

114
00:05:34.280 --> 00:05:34.903
&gt;&gt; Joe Nelson: Yeah.

115
00:05:34.903 --> 00:05:36.410
&gt;&gt; Co-Instructor: You
might have to refresh.

116
00:05:36.410 --> 00:05:37.382
&gt;&gt; Joe Nelson: Let me just refresh.

117
00:05:41.660 --> 00:05:42.709
&gt;&gt; Joe Nelson: Yeah, okay.

118
00:05:45.037 --> 00:05:53.990
&gt;&gt; Joe Nelson: So the goal,
&gt;&gt; Joe Nelson: What is our goal?

119
00:05:53.990 --> 00:05:56.350
If we have a list,
to make another list that's the same?

120
00:05:56.350 --> 00:05:57.180
That's kind of a weird goal.

121
00:05:57.180 --> 00:05:59.570
&gt;&gt; Co-Instructor: Let's just
implement map with reduce.

122
00:05:59.570 --> 00:06:02.860
&gt;&gt; Joe Nelson: Implement map with reduce,
okay.

123
00:06:02.860 --> 00:06:07.421
&gt;&gt; Co-Instructor: Standard tidbit,
it reduces a catamorphism or a fold.

124
00:06:07.421 --> 00:06:10.887
&gt;&gt; Joe Nelson: Undefined, okay.

125
00:06:10.887 --> 00:06:12.493
So how this is gonna work?

126
00:06:12.493 --> 00:06:14.947
We have a list that's coming in.

127
00:06:14.947 --> 00:06:17.200
We have a function we
should apply to each thing.

128
00:06:19.380 --> 00:06:22.354
And we want to build up a new
list one at a time with it.

129
00:06:25.104 --> 00:06:29.090
&gt;&gt; Joe Nelson: So we'll reduce, I see.

130
00:06:30.580 --> 00:06:35.513
I'm going to make actually, until I figure
out how to do it without using arguments,

131
00:06:35.513 --> 00:06:37.030
using it with arguments.

132
00:06:37.030 --> 00:06:42.968
var newmap = function,
I'll try it with two.

133
00:06:42.968 --> 00:06:49.073
A function that takes what would I
like to do to this thing on the list.

134
00:06:54.600 --> 00:06:57.491
&gt;&gt; Joe Nelson: And inside,
we'll return reduce.

135
00:06:57.491 --> 00:07:01.470
&gt;&gt; Co-Instructor: Can you do a space,
or an error, or does it blow up?

136
00:07:01.470 --> 00:07:02.438
&gt;&gt; Joe Nelson: I think it blows up.

137
00:07:02.438 --> 00:07:03.113
&gt;&gt; Co-Instructor: All right.

138
00:07:03.113 --> 00:07:05.590
[LAUGH]
&gt;&gt; Joe Nelson: I wonder if I should write

139
00:07:05.590 --> 00:07:06.800
it in VIM or something or

140
00:07:06.800 --> 00:07:09.370
some other place, and
then in line and paste it in here.

141
00:07:11.150 --> 00:07:12.441
Let's do that.

142
00:07:20.380 --> 00:07:25.798
&gt;&gt; Joe Nelson: Okay, so we're gonna curry
this function that takes this, cool.

143
00:07:28.977 --> 00:07:33.673
&gt;&gt; Joe Nelson: All right,
full screen it, oops.

144
00:07:36.436 --> 00:07:41.266
&gt;&gt; Joe Nelson: So,
&gt;&gt; Joe Nelson: We're reducing with,

145
00:07:46.145 --> 00:07:46.988
&gt;&gt; Joe Nelson: Another function,

146
00:07:46.988 --> 00:07:48.428
which I think is the composition.

147
00:07:48.428 --> 00:07:51.301
[LAUGH] Hope this is useful.

148
00:07:51.301 --> 00:07:53.216
&gt;&gt; Co-Instructor: [LAUGH]
&gt;&gt; Joe Nelson: [LAUGH] With

149
00:07:53.216 --> 00:07:59.570
the composition of concat and
our thing we would like to do, I think.

150
00:07:59.570 --> 00:08:03.149
So we have something that's coming in,
let's see if it works.

151
00:08:10.300 --> 00:08:12.252
&gt;&gt; Joe Nelson: And
we're starting with an empty list, and

152
00:08:12.252 --> 00:08:13.742
we're starting actually with,

153
00:08:21.911 --> 00:08:24.030
&gt;&gt; Joe Nelson: This looks really iffy.

154
00:08:24.030 --> 00:08:25.290
&gt;&gt; Co-Instructor: Hey Joe,
I don't want to interrupt you, but

155
00:08:25.290 --> 00:08:26.920
I have a couple questions
once you're done.

156
00:08:28.290 --> 00:08:29.576
&gt;&gt; Joe Nelson: Actually,
let's take the questions.

157
00:08:29.576 --> 00:08:30.823
It's a good time right now.

158
00:08:30.823 --> 00:08:34.200
&gt;&gt; Co-Instructor: Now,
okay, Dominic L was asking,

159
00:08:34.200 --> 00:08:38.936
does reduce when not passed,
shoot, hold on.

160
00:08:38.936 --> 00:08:40.532
I'm typing, everyone.

161
00:08:40.532 --> 00:08:43.224
&gt;&gt; Multiple: [LAUGH]
&gt;&gt; Co-Instructor: Does reduce when not

162
00:08:43.224 --> 00:08:47.109
passed an init value not just start using
the first two values in that array?

163
00:08:47.109 --> 00:08:48.622
Isn't that how it's like,

164
00:08:50.328 --> 00:08:52.350
&gt;&gt; Co-Instructor: Array.prototype.reduce
works?

165
00:08:52.350 --> 00:08:58.630
You have previousVal, nextVal,
index and array or something, right.

166
00:08:58.630 --> 00:09:02.050
&gt;&gt; Audience 2: Yeah, I think I mean,
if you wanna get down to the, or

167
00:09:02.050 --> 00:09:03.427
you can answer that.

168
00:09:03.427 --> 00:09:07.976
But I just wanted to mention
that JavaScript's reduce,

169
00:09:07.976 --> 00:09:13.120
it gives you more stuff than
the normal other language reduce.

170
00:09:13.120 --> 00:09:17.900
Like it will pass in indexes
in the rest of the array.

171
00:09:17.900 --> 00:09:22.040
The main things to focus on is
the previousVal and currentVal, I think.

172
00:09:22.040 --> 00:09:26.241
That'll get you reduce across any
language, like the idea of the fold.

173
00:09:27.375 --> 00:09:32.092
&gt;&gt; Co-Instructor: Okay, and
Mims W was asking that the starting value

174
00:09:32.092 --> 00:09:36.380
that we were providing
seemed a little weird.

175
00:09:36.380 --> 00:09:40.575
Can we explain a little bit more about how
initial values should be used with reduce?

176
00:09:40.575 --> 00:09:46.118
&gt;&gt; Joe Nelson: So let's see, the,
&gt;&gt; Joe Nelson: Oops.

177
00:09:46.118 --> 00:09:48.802
&gt;&gt; Co-Instructor: Well, and
we're implementing the map in it.

178
00:09:48.802 --> 00:09:50.310
Do you wanna try to talk about that?

179
00:10:01.964 --> 00:10:03.368
&gt;&gt; Joe Nelson: Just trying to find it.

180
00:10:04.867 --> 00:10:06.800
&gt;&gt; Joe Nelson: Wait, so
the one in the exercise or

181
00:10:06.800 --> 00:10:09.208
the one we were trying to cobble together?

182
00:10:09.208 --> 00:10:12.740
&gt;&gt; Co-Instructor: We were
implementing map with reduce.

183
00:10:12.740 --> 00:10:16.970
And that's pretty clear on how
the iterator gets passed, or

184
00:10:16.970 --> 00:10:19.170
the accumulator gets passed through.

185
00:10:19.170 --> 00:10:22.170
The seed is just the very
first accumulator.

186
00:10:22.170 --> 00:10:24.510
So the empty list, I don't know,

187
00:10:24.510 --> 00:10:26.970
I feel like following through
with that really quickly.

188
00:10:26.970 --> 00:10:29.130
&gt;&gt; Joe Nelson: I feel like, number one,
this is probably incorrect.

189
00:10:29.130 --> 00:10:30.411
How does it look to you?

190
00:10:30.411 --> 00:10:33.160
&gt;&gt; Co-Instructor: I would write
a function instead of compose.

191
00:10:33.160 --> 00:10:34.572
&gt;&gt; Joe Nelson: Okay.

192
00:10:34.572 --> 00:10:36.952
&gt;&gt; Co-Instructor: It
takes its accumulator.

193
00:10:36.952 --> 00:10:40.030
&gt;&gt; Joe Nelson: What should
we call this thing?

194
00:10:43.042 --> 00:10:45.147
&gt;&gt; Joe Nelson: Add change to something,
add new?

195
00:10:45.147 --> 00:10:47.301
&gt;&gt; Co-Instructor: concatList or
something, I don't know.

196
00:10:47.301 --> 00:10:51.380
[LAUGH] Names,
that's why they don't want names.

197
00:10:51.380 --> 00:10:52.412
&gt;&gt; Joe Nelson: Yeah.

198
00:10:52.412 --> 00:10:54.520
&gt;&gt; Audience 3: One of the things
I'm going to admit to here.

199
00:10:54.520 --> 00:10:56.570
When you first were saying
you were going to do this,

200
00:10:56.570 --> 00:10:59.250
I thought about using
the push on the array.

201
00:10:59.250 --> 00:11:04.117
Because I'm JavaScript, which push,
and you're going into all these other

202
00:11:04.117 --> 00:11:07.150
functions that you
obviously know the library.

203
00:11:07.150 --> 00:11:13.206
And cuz okay, if you want to keep
adding on to an array through this,

204
00:11:13.206 --> 00:11:17.260
basically, make map with the reduce.

205
00:11:17.260 --> 00:11:19.780
I was thinking, well,
the input's an array and

206
00:11:19.780 --> 00:11:21.880
then I'm gonna push every element onto it.

207
00:11:21.880 --> 00:11:24.820
Was my initial thought, but

208
00:11:24.820 --> 00:11:28.820
you're going beyond that because
of your knowledge of the library.

209
00:11:28.820 --> 00:11:35.030
&gt;&gt; Joe Nelson: Also because even in
native JavaScript, there's .concat.

210
00:11:35.030 --> 00:11:39.080
What I don't like about push, I like it
in many ways, being imperative, I guess.

211
00:11:39.080 --> 00:11:39.660
&gt;&gt; Audience 3: Yep, yep.

212
00:11:39.660 --> 00:11:42.874
&gt;&gt; Joe Nelson: But
is that if I say [1,2,3].push(4),

213
00:11:42.874 --> 00:11:45.126
it returns 4 and not the new array.

214
00:11:45.126 --> 00:11:47.257
And it modifies the original array.

215
00:11:47.257 --> 00:11:49.712
So it's this weird changing thing.

216
00:11:49.712 --> 00:11:51.170
It doesn't even give you
back what it changed.

217
00:11:51.170 --> 00:11:52.156
It's really awkward.

218
00:11:52.156 --> 00:11:55.023
So if I was gonna try and
compose that with other things,

219
00:11:55.023 --> 00:11:59.241
it would break the string because it's not
giving you back the thing in progress.

220
00:11:59.241 --> 00:12:00.391
It just says, great, you pushed 4.

221
00:12:00.391 --> 00:12:03.224
It's like, I don't care about 4,
I care about this list that's happening.

222
00:12:03.224 --> 00:12:07.774
&gt;&gt; Co-Instructor: And
concat is pure, push is impure.

223
00:12:07.774 --> 00:12:10.149
Cuz it mutates the original, yeah.

