WEBVTT

1
00:00:00.000 --> 00:00:04.327
[MUSIC]

2
00:00:04.327 --> 00:00:06.646
&gt;&gt; Joe Nelson: So
we saw how to make a double function.

3
00:00:08.276 --> 00:00:11.700
&gt;&gt; Joe Nelson: So
here's the way that I solved one.

4
00:00:11.700 --> 00:00:14.480
So words, we have our split so
what does the challenge say?

5
00:00:14.480 --> 00:00:19.630
It says make a function called Words which
returns a list of words in a string.

6
00:00:19.630 --> 00:00:22.760
Use only the split function and currying.

7
00:00:22.760 --> 00:00:24.440
Now I guess what slightly confusing

8
00:00:25.600 --> 00:00:28.250
is the currying is not something
you have to go out and do.

9
00:00:28.250 --> 00:00:32.780
The currying is baked into split and
baked into a lot of these functions.

10
00:00:32.780 --> 00:00:35.759
So that if you know
a function has been curried,

11
00:00:35.759 --> 00:00:40.598
then you can say to yourself okay,
the docs say that this function takes two,

12
00:00:40.598 --> 00:00:43.222
three, four, however many arguments.

13
00:00:43.222 --> 00:00:46.309
But I'm free to give it one argument,
two, whatever at a time.

14
00:00:46.309 --> 00:00:50.641
You can give it fewer arguments and
it'll be behave and it'll be waiting for

15
00:00:50.641 --> 00:00:52.060
its next ones.

16
00:00:52.060 --> 00:00:55.060
So split takes two arguments,
what do I look for

17
00:00:55.060 --> 00:01:00.130
in the string to split around and then
give me the string and I'll do my thing.

18
00:01:00.130 --> 00:01:04.550
So I said okay, words, I called split.

19
00:01:04.550 --> 00:01:07.680
All I told it was here's what you
split around and because it's curried,

20
00:01:07.680 --> 00:01:10.230
it says okay,
I can work with that, I'm ready.

21
00:01:10.230 --> 00:01:12.700
Give me a string, I'm a new function,
I'm just waiting for a string.

22
00:01:12.700 --> 00:01:14.540
I know what to split around now.

23
00:01:14.540 --> 00:01:18.019
So I say words equals
split with one argument.

24
00:01:20.130 --> 00:01:24.180
&gt;&gt; Joe Nelson: So the beauty, I guess,
the reason we're including these

25
00:01:24.180 --> 00:01:29.200
exercises is to say you don't,
I named it here, I called it words.

26
00:01:29.200 --> 00:01:32.300
But sometimes you don't have to
make new functions to do things.

27
00:01:32.300 --> 00:01:33.170
You don't have to name them.

28
00:01:33.170 --> 00:01:34.890
You just use the ones you have but

29
00:01:34.890 --> 00:01:37.600
they're written in a way that they
can kind of be partially filled in.

30
00:01:39.010 --> 00:01:40.420
So, that's the first Challenge 1.

31
00:01:40.420 --> 00:01:44.610
&gt;&gt; Speaker 2: So, now the split,
that's not the JavaScript split, right?

32
00:01:44.610 --> 00:01:46.980
That's actually in the ramda library?

33
00:01:46.980 --> 00:01:47.860
&gt;&gt; Joe Nelson: Yeah, it is.

34
00:01:47.860 --> 00:01:49.320
&gt;&gt; Speaker 2: Okay.

35
00:01:49.320 --> 00:01:50.628
&gt;&gt; Joe Nelson: It is.
You could make a curried version of

36
00:01:50.628 --> 00:01:53.560
the JavaScript split if you wanted to,
but they've already done it.

37
00:01:53.560 --> 00:01:57.983
&gt;&gt; Speaker 2: Well, and that's part of
what I think's a little confusing is

38
00:01:57.983 --> 00:02:02.073
knowing okay,
this is actually something predefined for

39
00:02:02.073 --> 00:02:05.996
us in underscore dot,
although it's not underscore,

40
00:02:05.996 --> 00:02:11.272
it's the ramda which is currently
mapped to the underscore variable dot.

41
00:02:11.272 --> 00:02:14.034
And then on that ramda,
we're calling the split function,

42
00:02:14.034 --> 00:02:15.830
which has already been curried for us.

43
00:02:16.850 --> 00:02:17.940
&gt;&gt; Joe Nelson: Correct.

44
00:02:17.940 --> 00:02:18.606
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Joe Nelson: Yeah,

45
00:02:18.606 --> 00:02:22.710
yeah,so I guess some clues about
our vague intentions here.

46
00:02:22.710 --> 00:02:26.046
When you see underscores in the code,
like underscore.something, okay,

47
00:02:26.046 --> 00:02:27.380
that means it's been supplied to.

48
00:02:27.380 --> 00:02:32.790
And it's not from the underscore library,
it's just that we wired things up.

49
00:02:32.790 --> 00:02:34.560
Let's see if it's in our
set up code at the top.

50
00:02:36.100 --> 00:02:39.928
If it's not then it's in our HTML or
maybe it's in our, wait, yep,

51
00:02:39.928 --> 00:02:43.911
right up at the top [CROSSTALK] Line
one says, so when you include ramda.

52
00:02:43.911 --> 00:02:46.701
I think ramda works with like
AMD modules and stuff but

53
00:02:46.701 --> 00:02:49.960
I think it also exposes
this global called ramda.

54
00:02:49.960 --> 00:02:54.581
So I just assigned ramda to underscore
because I wouldn't want to type

55
00:02:54.581 --> 00:02:57.020
ramda.split, it's kind of long.

56
00:02:57.020 --> 00:03:01.110
Although it might have been
less confusing, so, yeah.

57
00:03:01.110 --> 00:03:01.765
&gt;&gt; Speaker 2: On this first one,
it would've. &gt;&gt; Joe Nelson: [LAUGH] On

58
00:03:01.765 --> 00:03:03.150
the first one?

59
00:03:03.150 --> 00:03:09.990
So yeah, things that have underscore
before them are from ramda.

60
00:03:09.990 --> 00:03:12.654
Okay, so we did the split thing,
that was number one.

61
00:03:12.654 --> 00:03:16.070
Challenge number two,
unless there a questions?

62
00:03:16.070 --> 00:03:19.576
Okay, create a function to triple every

63
00:03:19.576 --> 00:03:24.280
number in a list using only multiply and
map, cool.

64
00:03:24.280 --> 00:03:27.494
Well, we saw one way that
multiply was used with currying.

65
00:03:27.494 --> 00:03:31.122
We made a double function by passing
it two so that it's still waiting for

66
00:03:31.122 --> 00:03:34.600
another argument but
it's gonna multiply it by two.

67
00:03:34.600 --> 00:03:36.620
Well, we wanna triple
the things in a list so

68
00:03:36.620 --> 00:03:40.260
the first thing that comes to my mind is
I'm gonna modify the double thing and

69
00:03:40.260 --> 00:03:42.560
make a triple thing where
I just pass it three.

70
00:03:42.560 --> 00:03:43.920
Is there a question?

71
00:03:43.920 --> 00:03:47.970
&gt;&gt; Speaker 3: Yeah, Raymond W had
a question about whether we'll be talking

72
00:03:47.970 --> 00:03:49.950
about what the best order for

73
00:03:49.950 --> 00:03:55.655
supplying arguments to functions
is to support efficient currying.

74
00:03:55.655 --> 00:03:56.435
&gt;&gt; Speaker 4: That's a good
thing to talk about.

75
00:03:56.435 --> 00:03:58.233
&gt;&gt; Joe Nelson: Generally,
I mean, go ahead.

76
00:03:58.233 --> 00:03:59.111
&gt;&gt; Speaker 3: No, you go first.

77
00:03:59.111 --> 00:04:05.055
&gt;&gt; Joe Nelson: Okay, generally,
you let the argument be the last thing.

78
00:04:05.055 --> 00:04:09.375
Because if you could fill in some little
values like here we had, let me think,

79
00:04:09.375 --> 00:04:10.100
like split.

80
00:04:10.100 --> 00:04:14.960
I could have said now split
takes a string too, like map.

81
00:04:14.960 --> 00:04:17.005
No, that's a bad one too, like reduce.

82
00:04:17.005 --> 00:04:18.858
[LAUGH] I don't know.

83
00:04:18.858 --> 00:04:22.915
If something can take a function,
let it take that function last and

84
00:04:22.915 --> 00:04:25.200
let the little scalars be first.

85
00:04:25.200 --> 00:04:28.857
Because then, you could fill in
the scalars, you still have a function.

86
00:04:28.857 --> 00:04:30.464
&gt;&gt; Speaker 3: No, that's okay.

87
00:04:30.464 --> 00:04:32.310
&gt;&gt; Joe Nelson: No, that [LAUGH].

88
00:04:32.310 --> 00:04:34.679
&gt;&gt; Speaker 3: Basically,
the data you're operating on,

89
00:04:34.679 --> 00:04:37.868
like let's say you're getting
an API call of information.

90
00:04:37.868 --> 00:04:41.329
That's the thing you want to go last so
you can partially apply everything up to

91
00:04:41.329 --> 00:04:43.830
this point of the thing
that you don't have.

92
00:04:43.830 --> 00:04:46.980
You have other functions available so
you can combine them.

93
00:04:46.980 --> 00:04:51.067
And you have arguments like split space,
I have space, I can get that to split,

94
00:04:51.067 --> 00:04:52.779
but I don't have the string yet.

95
00:04:52.779 --> 00:04:57.157
So think about the thing that's gonna go
into your function as the thing you don't

96
00:04:57.157 --> 00:04:59.454
have, the data flowing through your app.

97
00:04:59.454 --> 00:05:00.280
That's the way I look at it.

98
00:05:00.280 --> 00:05:02.010
&gt;&gt; Joe Nelson: Right, right,
cuz the string, right.

99
00:05:02.010 --> 00:05:05.720
So in our words function,
it was nice that we could be like,

100
00:05:05.720 --> 00:05:06.770
I want to split on space.

101
00:05:06.770 --> 00:05:09.400
Space is a little thing,
I have it in hand.

102
00:05:09.400 --> 00:05:12.610
But a string, I'm not likely
to know what that string is.

103
00:05:12.610 --> 00:05:16.530
I'm splitting some kind of data, it's
given to me, it's something I don't know.

104
00:05:16.530 --> 00:05:21.180
So let the things you don't know be last
so you can fill in the things that you do.

105
00:05:21.180 --> 00:05:23.820
And then the remaining function is waiting
for the thing you don't know about.

106
00:05:23.820 --> 00:05:27.540
&gt;&gt; Speaker 2: So the currying, you're
supplying from the first argument forward?

107
00:05:27.540 --> 00:05:30.560
&gt;&gt; Joe Nelson: Right.
&gt;&gt; Speaker 2: So if I give it

108
00:05:30.560 --> 00:05:34.510
two arguments it will fill in those first
two and then the third one is unfound?

109
00:05:34.510 --> 00:05:37.660
&gt;&gt; Joe Nelson: Yeah, it keeps being
empty at the end, waiting at the end.

110
00:05:37.660 --> 00:05:41.450
&gt;&gt; Speaker 3: So, I mean one thing that's
really cool about that is if I want to

111
00:05:41.450 --> 00:05:46.510
make a function that replaces dashes for
slashes.

112
00:05:46.510 --> 00:05:51.700
I can give a replace my
dash comma slash and

113
00:05:51.700 --> 00:05:54.890
then the last argument would be string,
because I don't have my string yet.

114
00:05:54.890 --> 00:05:57.690
So I can just make a new
function out of some arguments.

115
00:05:57.690 --> 00:06:00.661
But if I had to have my string,
now I can't make that function.

116
00:06:00.661 --> 00:06:03.504
I actually have to go to a string and
call dot on it and

117
00:06:03.504 --> 00:06:08.140
that's the difference between your dot
syntax and your functional functions here

118
00:06:08.140 --> 00:06:12.797
that you can combine is if you don't have
your data yet, you can still build an app.

119
00:06:12.797 --> 00:06:19.320
But with the dot syntax you have to have
your data so you can call dot on it.

120
00:06:19.320 --> 00:06:22.160
It's still functional that way too,
by the way, I should mention that.

121
00:06:22.160 --> 00:06:26.468
It's just that it's a difference
between dots syntax and not dot syntax.

122
00:06:26.468 --> 00:06:28.360
&gt;&gt; Joe Nelson: So,
thinking about our triple listing again.

123
00:06:29.500 --> 00:06:31.070
Well, let's think about it.

124
00:06:31.070 --> 00:06:32.990
It's gonna act on a list,
that's one thing.

125
00:06:32.990 --> 00:06:34.680
But there's gonna be tripling.

126
00:06:34.680 --> 00:06:35.690
So, how would we triple?

127
00:06:35.690 --> 00:06:38.970
We'd say multiply three.

128
00:06:38.970 --> 00:06:43.010
It's a function still waiting for
its other argument, you hit it with three.

129
00:06:43.010 --> 00:06:44.620
Now we wanna do it to a list.

130
00:06:45.790 --> 00:06:50.260
And we take a list and make a new
list element by element with map.

131
00:06:51.590 --> 00:06:56.846
So we wanna call map and what is it
that we wanna do to each element?

132
00:06:56.846 --> 00:07:00.170
Well that's easy, we want to triple it and
we already have a triple function.

133
00:07:01.370 --> 00:07:03.090
So let's see if it actually passes.

134
00:07:14.593 --> 00:07:19.710
&gt;&gt; Joe Nelson: Wonder if there's
some stuff from earlier?

135
00:07:22.076 --> 00:07:23.836
&gt;&gt; Joe Nelson: Unexpected semicolon,
okay, let's see.

136
00:07:23.836 --> 00:07:32.958
&gt;&gt; [INAUDIBLE]
&gt;&gt; Joe Nelson: Yeah it's not,

137
00:07:32.958 --> 00:07:35.659
but maybe the actual real console does.

138
00:07:35.659 --> 00:07:39.639
&gt;&gt; Joe Nelson: Runner:62,

139
00:07:39.639 --> 00:07:45.368
that sounds, boy.

140
00:07:45.368 --> 00:07:50.807
Under max, I was playing around with
some other stuff, let's get rid of that.

141
00:07:52.277 --> 00:07:54.741
&gt;&gt; Joe Nelson: I had
begun typing that bit.

142
00:07:59.033 --> 00:08:01.470
&gt;&gt; Joe Nelson: There we go, okay,
so that made this one pass.

143
00:08:01.470 --> 00:08:03.604
So why did this happen and to recap.

144
00:08:03.604 --> 00:08:07.100
We wanted a thing that would
triple everything in a list.

145
00:08:07.100 --> 00:08:10.780
The way that you do things to things in a
list and give you a new list is with map.

146
00:08:10.780 --> 00:08:12.840
What would you like to do
to each thing in that list?

147
00:08:12.840 --> 00:08:14.450
We would like to triple it.

148
00:08:14.450 --> 00:08:21.229
So it's two couriers
just plowing together.

149
00:08:33.399 --> 00:08:37.173
&gt;&gt; Joe Nelson: Yeah, right, so if there's
some really complicated, gnarly stuff.

150
00:08:37.173 --> 00:08:40.865
As soon as you edit this jsbin,
you'll get your own number and

151
00:08:40.865 --> 00:08:44.702
you can just paste that in the chat and
we can look at it together.

152
00:08:47.685 --> 00:08:56.414
&gt;&gt; Speaker 3: Yeah,
do you want to look at this one together?

153
00:09:01.862 --> 00:09:02.921
&gt;&gt; Joe Nelson: Which one?

154
00:09:11.101 --> 00:09:16.238
&gt;&gt; Speaker 3: We're looking
at Valentine's in the chat,

155
00:09:16.238 --> 00:09:19.490
he just pasted in his jsbin.

156
00:09:19.490 --> 00:09:22.080
That'd be good to see what
challenges [INAUDIBLE].

157
00:09:25.520 --> 00:09:27.213
I think it's still you [CROSSTALK].

158
00:09:27.213 --> 00:09:28.009
Yeah.

159
00:09:28.009 --> 00:09:30.106
&gt;&gt; Joe Nelson: Wait,
it's over, okay, I'll read it.

160
00:09:30.106 --> 00:09:31.980
&gt;&gt; Speaker 2: Yeah, and
his failing example one.

161
00:09:31.980 --> 00:09:36.217
&gt;&gt; Speaker 3: Yeah, it's the way
the messages are kind of set up to show.

162
00:09:36.217 --> 00:09:39.808
&gt;&gt; Joe Nelson: [INAUDIBLE]
So

163
00:09:39.808 --> 00:09:44.386
that's jsbin-

164
00:09:44.386 --> 00:09:49.147
&gt;&gt; Speaker 3: D-E-Y-I-Q-I-J-U

165
00:09:49.147 --> 00:09:53.043
forward slash mark.

166
00:10:00.451 --> 00:10:02.400
&gt;&gt; Speaker 3: I think you're on output,
not content.

167
00:10:02.400 --> 00:10:03.071
&gt;&gt; Joe Nelson: Thanks.

168
00:10:09.219 --> 00:10:12.510
&gt;&gt; Speaker 3: So
looks like words were split with I.

169
00:10:12.510 --> 00:10:16.339
It's just a confusing,
the error syntax there,

170
00:10:16.339 --> 00:10:19.896
where the errors [CROSSTALK]
&gt;&gt; Joe Nelson: I see, I see, I see.

171
00:10:19.896 --> 00:10:25.154
So yeah, the error is confusing.

172
00:10:25.154 --> 00:10:28.160
The way I'm thinking about it though is
we should think about what split does.

173
00:10:28.160 --> 00:10:32.493
So when you look at the log,
you see how it's like

174
00:10:32.493 --> 00:10:36.943
the Mississippi is like m,
ss, ss, pp, blank?

175
00:10:36.943 --> 00:10:41.840
Split, the first thing you give
it is what to split around.

176
00:10:41.840 --> 00:10:48.080
So if I ask you to split around i,
if I had this thing, I'm calling it words.

177
00:10:48.080 --> 00:10:51.780
For every word in the list,
I want it to break that word apart.

178
00:10:51.780 --> 00:10:56.715
If I split on i and I put Mississippi in,
I wouldn't get an array of Mississippi,

179
00:10:56.715 --> 00:10:59.112
it should be splitting around spaces,

180
00:10:59.112 --> 00:11:00.121
or is it-
&gt;&gt; Speaker 3: Yeah,

181
00:11:00.121 --> 00:11:01.011
[INAUDIBLE]
&gt;&gt; Joe Nelson: Well,

182
00:11:01.011 --> 00:11:03.510
I'm wondering whether there's
some other reason this failing or

183
00:11:03.510 --> 00:11:04.726
if this is just the whole thing?

184
00:11:04.726 --> 00:11:07.690
&gt;&gt; Speaker 2: Well, 36 should have
a space not an I in the square.

185
00:11:07.690 --> 00:11:09.050
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Joe Nelson: I didn't know if it was

186
00:11:09.050 --> 00:11:10.370
a more subtle.

187
00:11:10.370 --> 00:11:14.070
So when you split around the thing
you want to split, yeah, there we go.

188
00:11:15.230 --> 00:11:18.998
&gt;&gt; Speaker 3: Well, the trouble with
Valentine was struggling on challenge two

189
00:11:18.998 --> 00:11:21.092
because challenge one was failing.

190
00:11:21.092 --> 00:11:25.947
But it thought, because the error message
showed up about one, two, three,it was,

191
00:11:25.947 --> 00:11:27.220
I don't know.

192
00:11:27.220 --> 00:11:30.775
I think it was more of a confusion around
the error message than the actual example.

193
00:11:30.775 --> 00:11:34.780
&gt;&gt; Joe Nelson: That's what I was
wondering, whether it was, yeah.

194
00:11:34.780 --> 00:11:36.448
So note to self, better test suite.

195
00:11:36.448 --> 00:11:37.068
&gt;&gt; Speaker 3: [LAUGH] yeah.

196
00:11:37.068 --> 00:11:39.582
&gt;&gt; Joe Nelson: [LAUGH] Next time.

197
00:11:39.582 --> 00:11:40.890
&gt;&gt; Speaker 3: Mine's gonna be horrible.

198
00:11:40.890 --> 00:11:43.260
You're just gonna be like,
what's happening?

199
00:11:43.260 --> 00:11:44.594
&gt;&gt; Joe Nelson: Yeah.
[LAUGH]

