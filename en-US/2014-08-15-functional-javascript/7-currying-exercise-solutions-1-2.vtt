WEBVTT

1
00:00:00.000 --> 00:00:04.327
[MUSIC]

2
00:00:04.327 --> 00:00:05.939
&gt;&gt; Joe Nelson: So
we saw how to make a double

3
00:00:05.939 --> 00:00:08.462
function.
&gt;&gt; Joe Nelson: So

4
00:00:08.462 --> 00:00:11.700
here's the way that I solved one.

5
00:00:11.700 --> 00:00:14.480
So words, we have our split so
what does the challenge say?

6
00:00:14.480 --> 00:00:19.630
It says make a function called Words which
returns a list of words in a string.

7
00:00:19.630 --> 00:00:22.760
Use only the split function and currying.

8
00:00:22.760 --> 00:00:24.440
Now I guess what slightly confusing

9
00:00:25.600 --> 00:00:28.250
is the currying is not something
you have to go out and do.

10
00:00:28.250 --> 00:00:32.780
The currying is baked into split and
baked into a lot of these functions.

11
00:00:32.780 --> 00:00:35.759
So that if you know
a function has been curried,

12
00:00:35.759 --> 00:00:40.598
then you can say to yourself okay,
the docs say that this function takes two,

13
00:00:40.598 --> 00:00:43.222
three, four, however many arguments.

14
00:00:43.222 --> 00:00:46.309
But I'm free to give it one argument,
two, whatever at a time.

15
00:00:46.309 --> 00:00:50.641
You can give it fewer arguments and
it'll be behave and it'll be waiting for

16
00:00:50.641 --> 00:00:52.060
its next ones.

17
00:00:52.060 --> 00:00:55.060
So split takes two arguments,
what do I look for

18
00:00:55.060 --> 00:01:00.130
in the string to split around and then
give me the string and I'll do my thing.

19
00:01:00.130 --> 00:01:04.550
So I said okay, words, I called split.

20
00:01:04.550 --> 00:01:07.680
All I told it was here's what you
split around and because it's curried,

21
00:01:07.680 --> 00:01:10.230
it says okay,
I can work with that, I'm ready.

22
00:01:10.230 --> 00:01:12.700
Give me a string, I'm a new function,
I'm just waiting for a string.

23
00:01:12.700 --> 00:01:14.540
I know what to split around now.

24
00:01:14.540 --> 00:01:18.019
So I say words equals
split with one argument.

25
00:01:20.130 --> 00:01:21.831
&gt;&gt; Joe Nelson: So the beauty, I guess,

26
00:01:21.831 --> 00:01:26.367
the reason we're including these
exercises is to say you don't,

27
00:01:26.367 --> 00:01:29.200
I named it here, I called it words.

28
00:01:29.200 --> 00:01:32.300
But sometimes you don't have to
make new functions to do things.

29
00:01:32.300 --> 00:01:33.170
You don't have to name them.

30
00:01:33.170 --> 00:01:34.890
You just use the ones you have but

31
00:01:34.890 --> 00:01:37.600
they're written in a way that they
can kind of be partially filled in.

32
00:01:39.010 --> 00:01:42.160
So, that's the first Challenge 1.
&gt;&gt; Speaker 2: So, now the split,

33
00:01:42.160 --> 00:01:44.610
that's not the JavaScript split, right?

34
00:01:44.610 --> 00:01:46.980
That's actually in the ramda library?

35
00:01:46.980 --> 00:01:47.860
&gt;&gt; Joe Nelson: Yeah, it is.

36
00:01:47.860 --> 00:01:49.520
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Joe Nelson: It is.

37
00:01:49.520 --> 00:01:52.000
You could make a curried version of
the JavaScript split if you wanted to, but

38
00:01:52.000 --> 00:01:54.311
they've already done it.
&gt;&gt; Speaker 2: Well, and

39
00:01:54.311 --> 00:01:59.068
that's part of what I think's
a little confusing is knowing okay,

40
00:01:59.068 --> 00:02:03.659
this is actually something predefined for
us in underscore dot,

41
00:02:03.659 --> 00:02:05.996
although it's not underscore,

42
00:02:05.996 --> 00:02:11.272
it's the ramda which is currently
mapped to the underscore variable dot.

43
00:02:11.272 --> 00:02:14.034
And then on that ramda,
we're calling the split function,

44
00:02:14.034 --> 00:02:15.830
which has already been curried for us.

45
00:02:16.850 --> 00:02:18.334
&gt;&gt; Joe Nelson: Correct.
&gt;&gt; Speaker 2: Okay.

46
00:02:18.334 --> 00:02:19.890
&gt;&gt; Joe Nelson: Yeah, yeah,so I guess

47
00:02:19.890 --> 00:02:22.710
some clues about our
vague intentions here.

48
00:02:22.710 --> 00:02:26.046
When you see underscores in the code,
like underscore.something, okay,

49
00:02:26.046 --> 00:02:27.380
that means it's been supplied to.

50
00:02:27.380 --> 00:02:32.790
And it's not from the underscore library,
it's just that we wired things up.

51
00:02:32.790 --> 00:02:34.560
Let's see if it's in our
set up code at the top.

52
00:02:36.100 --> 00:02:39.928
If it's not then it's in our HTML or
maybe it's in our, wait, yep,

53
00:02:39.928 --> 00:02:43.911
right up at the top [CROSSTALK] Line
one says, so when you include ramda.

54
00:02:43.911 --> 00:02:46.701
I think ramda works with like
AMD modules and stuff but

55
00:02:46.701 --> 00:02:49.960
I think it also exposes
this global called ramda.

56
00:02:49.960 --> 00:02:54.581
So I just assigned ramda to underscore
because I wouldn't want to type

57
00:02:54.581 --> 00:02:57.020
ramda.split, it's kind of long.

58
00:02:57.020 --> 00:03:00.593
Although it might have
been less confusing, so,

59
00:03:00.593 --> 00:03:01.318
yeah.
&gt;&gt; Speaker 2: On this first one,

60
00:03:01.318 --> 00:03:03.150
it would've.
&gt;&gt; Joe Nelson: [LAUGH] On the first one?

61
00:03:03.150 --> 00:03:09.990
So yeah, things that have underscore
before them are from ramda.

62
00:03:09.990 --> 00:03:12.654
Okay, so we did the split thing,
that was number one.

63
00:03:12.654 --> 00:03:16.070
Challenge number two,
unless there a questions?

64
00:03:16.070 --> 00:03:19.576
Okay, create a function to triple every

65
00:03:19.576 --> 00:03:24.280
number in a list using only multiply and
map, cool.

66
00:03:24.280 --> 00:03:27.494
Well, we saw one way that
multiply was used with currying.

67
00:03:27.494 --> 00:03:31.122
We made a double function by passing
it two so that it's still waiting for

68
00:03:31.122 --> 00:03:34.600
another argument but
it's gonna multiply it by two.

69
00:03:34.600 --> 00:03:36.620
Well, we wanna triple
the things in a list so

70
00:03:36.620 --> 00:03:40.260
the first thing that comes to my mind is
I'm gonna modify the double thing and

71
00:03:40.260 --> 00:03:42.560
make a triple thing where
I just pass it three.

72
00:03:42.560 --> 00:03:44.300
Is there a question?
&gt;&gt; Speaker 3: Yeah,

73
00:03:44.300 --> 00:03:47.970
Raymond W had a question about
whether we'll be talking

74
00:03:47.970 --> 00:03:51.820
about what the best order for
supplying arguments to functions

75
00:03:51.820 --> 00:03:56.253
is to support efficient currying.
&gt;&gt; Speaker 4: That's a good thing to talk

76
00:03:56.253 --> 00:03:57.333
about.
&gt;&gt; Joe Nelson: Generally, I mean,

77
00:03:57.333 --> 00:03:59.111
go ahead.
&gt;&gt; Speaker 3: No, you go first.

78
00:03:59.111 --> 00:04:01.129
&gt;&gt; Joe Nelson: Okay, generally,

79
00:04:01.129 --> 00:04:05.055
you let the argument be the last thing.

80
00:04:05.055 --> 00:04:09.375
Because if you could fill in some little
values like here we had, let me think,

81
00:04:09.375 --> 00:04:10.100
like split.

82
00:04:10.100 --> 00:04:14.960
I could have said now split
takes a string too, like map.

83
00:04:14.960 --> 00:04:17.005
No, that's a bad one too, like reduce.

84
00:04:17.005 --> 00:04:18.858
[LAUGH] I don't know.

85
00:04:18.858 --> 00:04:22.915
If something can take a function,
let it take that function last and

86
00:04:22.915 --> 00:04:25.200
let the little scalars be first.

87
00:04:25.200 --> 00:04:27.280
Because then,
you could fill in the scalars,

88
00:04:27.280 --> 00:04:29.233
you still have a function.
&gt;&gt; Speaker 3: No,

89
00:04:29.233 --> 00:04:30.714
that's okay.
&gt;&gt; Joe Nelson: No,

90
00:04:30.714 --> 00:04:33.869
that [LAUGH].
&gt;&gt; Speaker 3: Basically, the data you're

91
00:04:33.869 --> 00:04:37.868
operating on, like let's say you're
getting an API call of information.

92
00:04:37.868 --> 00:04:41.329
That's the thing you want to go last so
you can partially apply everything up to

93
00:04:41.329 --> 00:04:43.830
this point of the thing
that you don't have.

94
00:04:43.830 --> 00:04:46.980
You have other functions available so
you can combine them.

95
00:04:46.980 --> 00:04:51.067
And you have arguments like split space,
I have space, I can get that to split,

96
00:04:51.067 --> 00:04:52.779
but I don't have the string yet.

97
00:04:52.779 --> 00:04:57.157
So think about the thing that's gonna go
into your function as the thing you don't

98
00:04:57.157 --> 00:04:59.454
have, the data flowing through your app.

99
00:04:59.454 --> 00:05:00.834
That's the way I look at it.
&gt;&gt; Joe Nelson: Right, right,

100
00:05:00.834 --> 00:05:02.010
cuz the string, right.

101
00:05:02.010 --> 00:05:05.720
So in our words function,
it was nice that we could be like,

102
00:05:05.720 --> 00:05:06.770
I want to split on space.

103
00:05:06.770 --> 00:05:09.400
Space is a little thing,
I have it in hand.

104
00:05:09.400 --> 00:05:12.610
But a string, I'm not likely
to know what that string is.

105
00:05:12.610 --> 00:05:16.530
I'm splitting some kind of data, it's
given to me, it's something I don't know.

106
00:05:16.530 --> 00:05:21.180
So let the things you don't know be last
so you can fill in the things that you do.

107
00:05:21.180 --> 00:05:22.830
And then the remaining
function is waiting for

108
00:05:22.830 --> 00:05:23.931
the thing you don't know about.
&gt;&gt; Speaker 2: So

109
00:05:23.931 --> 00:05:26.662
the currying,
you're supplying from the first argument

110
00:05:26.662 --> 00:05:27.990
forward?
&gt;&gt; Joe Nelson: Right.

111
00:05:27.990 --> 00:05:30.560
&gt;&gt; Speaker 2: So if I give it

112
00:05:30.560 --> 00:05:32.870
two arguments it will fill
in those first two and

113
00:05:32.870 --> 00:05:35.650
then the third one is unfound?
&gt;&gt; Joe Nelson: Yeah, it keeps being empty

114
00:05:35.650 --> 00:05:38.180
at the end, waiting at the end.
&gt;&gt; Speaker 3: So,

115
00:05:38.180 --> 00:05:42.260
I mean one thing that's really cool about
that is if I want to make a function

116
00:05:42.260 --> 00:05:46.510
that replaces dashes for slashes.

117
00:05:46.510 --> 00:05:51.700
I can give a replace my
dash comma slash and

118
00:05:51.700 --> 00:05:54.890
then the last argument would be string,
because I don't have my string yet.

119
00:05:54.890 --> 00:05:57.690
So I can just make a new
function out of some arguments.

120
00:05:57.690 --> 00:06:00.661
But if I had to have my string,
now I can't make that function.

121
00:06:00.661 --> 00:06:03.504
I actually have to go to a string and
call dot on it and

122
00:06:03.504 --> 00:06:08.140
that's the difference between your dot
syntax and your functional functions here

123
00:06:08.140 --> 00:06:12.797
that you can combine is if you don't have
your data yet, you can still build an app.

124
00:06:12.797 --> 00:06:19.320
But with the dot syntax you have to have
your data so you can call dot on it.

125
00:06:19.320 --> 00:06:22.160
It's still functional that way too,
by the way, I should mention that.

126
00:06:22.160 --> 00:06:25.482
It's just that it's a difference
between dots syntax and

127
00:06:25.482 --> 00:06:26.660
not dot syntax.
&gt;&gt; Joe Nelson: So,

128
00:06:26.660 --> 00:06:28.360
thinking about our triple listing again.

129
00:06:29.500 --> 00:06:31.070
Well, let's think about it.

130
00:06:31.070 --> 00:06:32.990
It's gonna act on a list,
that's one thing.

131
00:06:32.990 --> 00:06:34.680
But there's gonna be tripling.

132
00:06:34.680 --> 00:06:35.690
So, how would we triple?

133
00:06:35.690 --> 00:06:38.970
We'd say multiply three.

134
00:06:38.970 --> 00:06:43.010
It's a function still waiting for
its other argument, you hit it with three.

135
00:06:43.010 --> 00:06:44.620
Now we wanna do it to a list.

136
00:06:45.790 --> 00:06:50.260
And we take a list and make a new
list element by element with map.

137
00:06:51.590 --> 00:06:56.846
So we wanna call map and what is it
that we wanna do to each element?

138
00:06:56.846 --> 00:07:00.170
Well that's easy, we want to triple it and
we already have a triple function.

139
00:07:01.370 --> 00:07:03.090
So let's see if it actually passes.

140
00:07:14.593 --> 00:07:17.284
&gt;&gt; Joe Nelson: Wonder if there's some

141
00:07:17.284 --> 00:07:23.047
stuff from earlier?
&gt;&gt; Joe Nelson: Unexpected semicolon,

142
00:07:23.047 --> 00:07:31.870
okay, let's see.
&gt;&gt; [INAUDIBLE]

143
00:07:31.870 --> 00:07:33.191
&gt;&gt; Joe Nelson: Yeah it's not, but

144
00:07:33.191 --> 00:07:39.639
maybe the actual real console does.
&gt;&gt; Joe Nelson: Runner:62,

145
00:07:39.639 --> 00:07:45.368
that sounds, boy.

146
00:07:45.368 --> 00:07:49.177
Under max, I was playing
around with some other stuff,

147
00:07:49.177 --> 00:07:54.226
let's get rid of that.
&gt;&gt; Joe Nelson: I had begun typing that

148
00:07:54.226 --> 00:07:59.568
bit.
&gt;&gt; Joe Nelson: There we go,

149
00:07:59.568 --> 00:08:01.470
okay, so that made this one pass.

150
00:08:01.470 --> 00:08:03.604
So why did this happen and to recap.

151
00:08:03.604 --> 00:08:07.100
We wanted a thing that would
triple everything in a list.

152
00:08:07.100 --> 00:08:10.780
The way that you do things to things in a
list and give you a new list is with map.

153
00:08:10.780 --> 00:08:12.840
What would you like to do
to each thing in that list?

154
00:08:12.840 --> 00:08:14.450
We would like to triple it.

155
00:08:14.450 --> 00:08:21.229
So it's two couriers
just plowing together.

156
00:08:33.399 --> 00:08:34.201
&gt;&gt; Joe Nelson: Yeah, right,

157
00:08:34.201 --> 00:08:37.173
so if there's some really complicated,
gnarly stuff.

158
00:08:37.173 --> 00:08:40.865
As soon as you edit this jsbin,
you'll get your own number and

159
00:08:40.865 --> 00:08:44.702
you can just paste that in the chat and
we can look at it together.

160
00:08:47.685 --> 00:08:52.263
&gt;&gt; Speaker 3: Yeah, do you want to look

161
00:08:52.263 --> 00:08:56.414
at this one together?

162
00:09:01.862 --> 00:09:02.921
&gt;&gt; Joe Nelson: Which one?

163
00:09:11.101 --> 00:09:14.752
&gt;&gt; Speaker 3: We're looking at Valentine's

164
00:09:14.752 --> 00:09:19.490
in the chat, he just pasted in his jsbin.

165
00:09:19.490 --> 00:09:22.080
That'd be good to see what
challenges [INAUDIBLE].

166
00:09:25.520 --> 00:09:27.213
I think it's still you [CROSSTALK].

167
00:09:27.213 --> 00:09:29.344
Yeah.
&gt;&gt; Joe Nelson: Wait, it's over, okay,

168
00:09:29.344 --> 00:09:30.558
I'll read it.
&gt;&gt; Speaker 2: Yeah, and

169
00:09:30.558 --> 00:09:33.418
his failing example one.
&gt;&gt; Speaker 3: Yeah, it's the way

170
00:09:33.418 --> 00:09:39.155
the messages are kind of set up to show.
&gt;&gt; Joe Nelson: [INAUDIBLE]

171
00:09:39.155 --> 00:09:44.386
So that's jsbin-

172
00:09:44.386 --> 00:09:49.147
&gt;&gt; Speaker 3: D-E-Y-I-Q-I-J-U

173
00:09:49.147 --> 00:09:53.043
forward slash mark.

174
00:10:00.451 --> 00:10:01.729
&gt;&gt; Speaker 3: I think you're on output,

175
00:10:01.729 --> 00:10:03.071
not content.
&gt;&gt; Joe Nelson: Thanks.

176
00:10:09.219 --> 00:10:10.661
&gt;&gt; Speaker 3: So looks like words were

177
00:10:10.661 --> 00:10:12.510
split with I.

178
00:10:12.510 --> 00:10:16.339
It's just a confusing,
the error syntax there,

179
00:10:16.339 --> 00:10:19.896
where the errors [CROSSTALK]
&gt;&gt; Joe Nelson: I see, I see, I see.

180
00:10:19.896 --> 00:10:25.154
So yeah, the error is confusing.

181
00:10:25.154 --> 00:10:28.160
The way I'm thinking about it though is
we should think about what split does.

182
00:10:28.160 --> 00:10:32.493
So when you look at the log,
you see how it's like

183
00:10:32.493 --> 00:10:36.943
the Mississippi is like m,
ss, ss, pp, blank?

184
00:10:36.943 --> 00:10:41.840
Split, the first thing you give
it is what to split around.

185
00:10:41.840 --> 00:10:48.080
So if I ask you to split around i,
if I had this thing, I'm calling it words.

186
00:10:48.080 --> 00:10:51.780
For every word in the list,
I want it to break that word apart.

187
00:10:51.780 --> 00:10:56.715
If I split on i and I put Mississippi in,
I wouldn't get an array of Mississippi,

188
00:10:56.715 --> 00:10:59.112
it should be splitting around spaces,

189
00:10:59.112 --> 00:11:00.121
or is it-
&gt;&gt; Speaker 3: Yeah,

190
00:11:00.121 --> 00:11:01.011
[INAUDIBLE]
&gt;&gt; Joe Nelson: Well,

191
00:11:01.011 --> 00:11:03.510
I'm wondering whether there's
some other reason this failing or

192
00:11:03.510 --> 00:11:06.221
if this is just the whole thing?
&gt;&gt; Speaker 2: Well, 36 should have a space

193
00:11:06.221 --> 00:11:08.020
not an I in the square.
&gt;&gt; Speaker 3: Yeah.

194
00:11:08.020 --> 00:11:09.050
&gt;&gt; Joe Nelson: I didn't know if it was

195
00:11:09.050 --> 00:11:10.370
a more subtle.

196
00:11:10.370 --> 00:11:13.395
So when you split around
the thing you want to split, yeah,

197
00:11:13.395 --> 00:11:16.575
there we go.
&gt;&gt; Speaker 3: Well, the trouble with

198
00:11:16.575 --> 00:11:21.092
Valentine was struggling on challenge
two because challenge one was failing.

199
00:11:21.092 --> 00:11:25.947
But it thought, because the error message
showed up about one, two, three,it was,

200
00:11:25.947 --> 00:11:27.220
I don't know.

201
00:11:27.220 --> 00:11:30.775
I think it was more of a confusion around
the error message than the actual example.

202
00:11:30.775 --> 00:11:31.939
&gt;&gt; Joe Nelson: That's what I was

203
00:11:31.939 --> 00:11:34.780
wondering, whether it was, yeah.

204
00:11:34.780 --> 00:11:37.068
So note to self, better test suite.
&gt;&gt; Speaker 3: [LAUGH] yeah.

205
00:11:37.068 --> 00:11:39.582
&gt;&gt; Joe Nelson: [LAUGH] Next time.

206
00:11:39.582 --> 00:11:40.890
&gt;&gt; Speaker 3: Mine's gonna be horrible.

207
00:11:40.890 --> 00:11:42.490
You're just gonna be like,

208
00:11:42.490 --> 00:11:43.565
what's happening?
&gt;&gt; Joe Nelson: Yeah.

209
00:11:43.565 --> 00:11:44.594
[LAUGH]

