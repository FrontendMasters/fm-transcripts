WEBVTT

1
00:00:04.820 --> 00:00:09.150
&gt;&gt; Brian Lonsdorf: Let's do exercise three
together and four is kind of a bonus.

2
00:00:09.150 --> 00:00:09.890
I should have put a star.

3
00:00:09.890 --> 00:00:14.780
I put a little star next to the bonus
ones, but it's not that hard.

4
00:00:14.780 --> 00:00:17.330
I'll let you guys work on four,
but it's definitely harder,

5
00:00:18.790 --> 00:00:24.000
because you have to write the maybe
yourself, like call it yourself.

6
00:00:25.960 --> 00:00:30.600
So we use safeGet and _.head again here
to find the first initial of the user.

7
00:00:33.544 --> 00:00:38.740
Did anybody have any snags
on this before I go into it?

8
00:00:38.740 --> 00:00:39.523
What's that?
Did you get

9
00:00:39.523 --> 00:00:40.650
a snag on it?
&gt;&gt; Speaker 2: Yeah.

10
00:00:40.650 --> 00:00:41.650
&gt;&gt; Brian Lonsdorf: What did you try?

11
00:00:41.650 --> 00:00:44.050
I'll write what you tried,
and we'll talk about it.

12
00:00:44.050 --> 00:00:47.082
&gt;&gt; Speaker 2: So, I wrote map, and

13
00:00:47.082 --> 00:00:52.706
then _.head comma safeGet.
&gt;&gt; Brian Lonsdorf: Comma-

14
00:00:52.706 --> 00:00:54.217
&gt;&gt; Speaker 2: SafeGet.

15
00:00:54.217 --> 00:00:56.189
&gt;&gt; Brian Lonsdorf: SafeGet.

16
00:00:56.189 --> 00:00:59.430
So close [LAUGH].

17
00:00:59.430 --> 00:01:01.050
We're, whoa, not my computer.

18
00:01:02.270 --> 00:01:08.050
We're mapping the _.head function
over the safeGet function here.

19
00:01:08.050 --> 00:01:12.167
You're so close,
we just have to compose them.

20
00:01:12.167 --> 00:01:16.836
Because we want to first
safeGet then get the _.head.

21
00:01:16.836 --> 00:01:18.510
Is that the answer?

22
00:01:18.510 --> 00:01:20.334
Let's see.
&gt;&gt; Speaker 2: Compose, then map,

23
00:01:20.334 --> 00:01:23.190
then _.head.
&gt;&gt; Brian Lonsdorf: What did I do?

24
00:01:25.750 --> 00:01:26.532
Let's see.

25
00:01:26.532 --> 00:01:28.628
Use safeGet-
&gt;&gt; Speaker 3: For safeGet,

26
00:01:28.628 --> 00:01:30.845
I gave it a parameter of name,
to tell it what-

27
00:01:30.845 --> 00:01:32.405
&gt;&gt; Brian Lonsdorf: Thank you guys.

28
00:01:32.405 --> 00:01:37.110
[LAUGH] I think I have a-
&gt;&gt; Speaker 3: Now see, now that's what I

29
00:01:37.110 --> 00:01:38.360
have but it doesn't work.
&gt;&gt; Speaker 2: Yeah,

30
00:01:38.360 --> 00:01:40.070
I get the same script error.
&gt;&gt; Speaker 3: Yeah.

31
00:01:40.070 --> 00:01:40.700
&gt;&gt; Brian Lonsdorf: Hold on, let me make

32
00:01:40.700 --> 00:01:41.720
sure.
&gt;&gt; Speaker 4: I wrap the compose around

33
00:01:41.720 --> 00:01:43.570
everything.
&gt;&gt; Speaker 2: Yeah, I did

34
00:01:43.570 --> 00:01:46.370
a wrap compose around a map of the _.head.
&gt;&gt; Speaker 3: And

35
00:01:46.370 --> 00:01:47.260
did that work?

36
00:01:47.260 --> 00:01:49.010
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Brian Lonsdorf: Okay.

37
00:01:49.010 --> 00:01:49.750
Sorry, guys.

38
00:01:50.880 --> 00:01:52.290
That's right, I'm backwards.

39
00:01:52.290 --> 00:01:54.550
So let's talk about this.
&gt;&gt; Speaker 3: Yes, because I'm confused.

40
00:01:54.550 --> 00:01:55.610
&gt;&gt; Brian Lonsdorf: Because I had a syntax

41
00:01:55.610 --> 00:01:56.149
error up there.

42
00:01:57.220 --> 00:01:59.380
Yeah, you should feel like a champion.

43
00:01:59.380 --> 00:02:01.462
This is a good one.
&gt;&gt; Speaker 3: [LAUGH]

44
00:02:01.462 --> 00:02:02.323
&gt;&gt; Brian Lonsdorf: Come on ramda,

45
00:02:02.323 --> 00:02:04.290
cheering for you.

46
00:02:04.290 --> 00:02:05.390
Example two is not defined.

47
00:02:05.390 --> 00:02:06.170
All right, get rid of that.

48
00:02:07.200 --> 00:02:08.520
There it goes.

49
00:02:08.520 --> 00:02:10.690
Okay, let's talk about this.

50
00:02:10.690 --> 00:02:16.460
Wait, expected, is this 3 3 okay.

51
00:02:16.460 --> 00:02:17.210
Okay cool.

52
00:02:18.540 --> 00:02:21.020
So let's talk about this.

53
00:02:21.020 --> 00:02:25.120
By the way, just so you guys understand,
I've got my exercise and

54
00:02:25.120 --> 00:02:29.830
description, some helper stuff and
data and then it's like start it, and

55
00:02:29.830 --> 00:02:31.730
just this is where it starts and
then the test.

56
00:02:31.730 --> 00:02:34.040
It's like that format on every single one.

57
00:02:34.040 --> 00:02:37.890
So when you see the ex3,
that's usually what you have to work on.

58
00:02:37.890 --> 00:02:41.300
The rest is just kind of noise but
helpful.

59
00:02:41.300 --> 00:02:42.510
So yeah, let's talk about this.

60
00:02:42.510 --> 00:02:45.710
What does safeGet do?

61
00:02:45.710 --> 00:02:51.390
SafeGet works just like get, but
it put it inside a maybe, right?

62
00:02:51.390 --> 00:02:53.230
Because you might not have a property.

63
00:02:53.230 --> 00:02:55.390
This user might not have a name.

64
00:02:55.390 --> 00:02:59.390
So, if I call safeGet('name') on user,

65
00:02:59.390 --> 00:03:01.300
it's going to return
me a Maybe right here.

66
00:03:01.300 --> 00:03:03.040
Do you guys see right here?

67
00:03:03.040 --> 00:03:08.639
We'll have a Maybe of ("albert").

68
00:03:10.690 --> 00:03:12.660
All right,
that's what's happening after the safeGet.

69
00:03:12.660 --> 00:03:15.960
And we have to map _.head over that,
we can't call _.head on the maybe,

70
00:03:15.960 --> 00:03:18.500
we have to call it on
the string inside the maybe.

71
00:03:18.500 --> 00:03:20.860
So we map over the maybe Albert.

72
00:03:20.860 --> 00:03:26.870
So, the point is that the first
function returns us a functor.

73
00:03:26.870 --> 00:03:29.390
The we map _.head over that functor.

74
00:03:29.390 --> 00:03:34.252
One cool thing to note is
if I just do null here,

75
00:03:34.252 --> 00:03:41.010
It's going to fail the test but
it's not going to blow up.

76
00:03:41.010 --> 00:03:43.080
Expected Maybe(A) to match Maybe(null).

77
00:03:43.080 --> 00:03:44.750
It never ran _.head.

78
00:03:44.750 --> 00:03:48.760
Now that'll save you giant stack traces.

79
00:03:48.760 --> 00:03:51.100
Whole things like let's say,
you don't have a current user and

80
00:03:51.100 --> 00:03:53.600
you don't want to display their
name if there's no current user.

81
00:03:53.600 --> 00:03:54.940
Drop them in a maybe and map over it.

82
00:03:54.940 --> 00:03:57.290
I don't know if they're there or not.

83
00:03:57.290 --> 00:04:01.162
But if they're not, I just won't run this.

84
00:04:01.162 --> 00:04:06.680
So, you essentially put it in the box,
like the maybe box and

85
00:04:06.680 --> 00:04:09.540
say, I don't know what's in this
box it may or may not be there.

86
00:04:09.540 --> 00:04:12.340
When you map over it,
it may or may not run, but

87
00:04:12.340 --> 00:04:16.940
that's very safe as a programmer to force

88
00:04:16.940 --> 00:04:21.650
the rest of your code to deal with the
fact that thing may or may not be there.

89
00:04:21.650 --> 00:04:23.360
Things can't just run on it anymore.

90
00:04:23.360 --> 00:04:24.890
It has to map over it, and

91
00:04:24.890 --> 00:04:30.700
you get a right time safety that
you don't get unless you do that.

92
00:04:30.700 --> 00:04:34.060
The rest of your code will now
not blow up from a random null.

93
00:04:34.060 --> 00:04:37.997
Or if you wrote a library and you returned
a maybe that one time that it returned

94
00:04:37.997 --> 00:04:41.890
a null and just blindsided the app,
like they would have had to deal with it.

95
00:04:41.890 --> 00:04:45.330
They would have had to map over it in
the first place when they wrote it

96
00:04:45.330 --> 00:04:47.028
rather than just getting
hit with a null later.

97
00:04:47.028 --> 00:04:56.164
Technically, compost.
&gt;&gt; Speaker 3: Yes.

98
00:04:56.164 --> 00:04:57.970
&gt;&gt; Brian Lonsdorf: You can, you can map,

99
00:04:57.970 --> 00:05:03.850
no, no, no, you can't,
because it is totally SchrÃ¶dinger's cat.

100
00:05:03.850 --> 00:05:09.377
You can't map over the safeGet
because it's not a maybe yet.

101
00:05:09.377 --> 00:05:15.380
SafeGet takes a user and
then returns a maybe of its name.

102
00:05:15.380 --> 00:05:16.790
It's not a maybe going into it.

103
00:05:16.790 --> 00:05:19.763
So, you don't have anything map
over you're just getting a user.

104
00:05:19.763 --> 00:05:21.250
Do you guys see that right here?

105
00:05:22.390 --> 00:05:28.034
When I compose what's coming in,
it starts out as a user right here and

106
00:05:28.034 --> 00:05:32.532
then after it gets through the safe maybe,
or safeGet,

107
00:05:32.532 --> 00:05:36.160
I have a maybe of user right about here.

108
00:05:36.160 --> 00:05:41.014
And then I have to map over that and
get the maybe.

109
00:05:41.014 --> 00:05:45.040
So, now lets get back to Albert.

110
00:05:45.040 --> 00:05:50.810
Okay, let's do the last one and
talk more about functors.

111
00:05:50.810 --> 00:05:52.150
Because we got to know them.

