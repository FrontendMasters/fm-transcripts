WEBVTT

1
00:00:00.000 --> 00:00:04.732
[MUSIC]

2
00:00:04.732 --> 00:00:09.310
&gt;&gt; Brian Lonsdorf: So you've seen Promise,
maybe EventStream, future IO.

3
00:00:10.490 --> 00:00:11.020
It's just map.

4
00:00:11.020 --> 00:00:15.190
I don't know why people have to
make up their own names and APIs.

5
00:00:15.190 --> 00:00:19.229
It's kind of frustrating, especially
when map has laws and intuitions and

6
00:00:19.229 --> 00:00:23.470
a whole mathematics behind it and
people are like, I don't know, subscribe.

7
00:00:23.470 --> 00:00:26.210
[LAUGH] You're like, God.

8
00:00:26.210 --> 00:00:31.294
And so there is a way to do it that will
guarantee that your library composes

9
00:00:31.294 --> 00:00:35.804
with other libraries and
there's a way to do it to where everybody

10
00:00:35.804 --> 00:00:40.460
doesn't have to read your documentation,
they just kinda know.

11
00:00:40.460 --> 00:00:42.840
Didn't you guys just kind of
know how to use event stream and

12
00:00:42.840 --> 00:00:44.786
IO eventually after you just see the map?

13
00:00:44.786 --> 00:00:47.670
Maybe it's returning something,
was map over it, whatever.

14
00:00:47.670 --> 00:00:49.090
That's all it is.

15
00:00:49.090 --> 00:00:52.120
So you feel it,
you know what's gonna happen,

16
00:00:52.120 --> 00:00:55.140
it's gonna be returning a new IO
with transform stuff or whatever.

17
00:00:57.140 --> 00:01:01.181
These laws and properties are actually
useful in your day to day code,

18
00:01:01.181 --> 00:01:02.730
there's a ton of them.

19
00:01:02.730 --> 00:01:03.640
Functors have laws,

20
00:01:03.640 --> 00:01:05.960
these are laws that you have to
obey when you're making a functor.

21
00:01:05.960 --> 00:01:08.840
And you know that identity and
composition?

22
00:01:08.840 --> 00:01:12.395
I don't know if you remembered but

23
00:01:12.395 --> 00:01:18.170
there's this thing about categories and
compose and category theory,

24
00:01:18.170 --> 00:01:23.140
those are the same laws just
in a different kind of way.

25
00:01:23.140 --> 00:01:25.930
The other had left and
right identity and sensitivity.

26
00:01:25.930 --> 00:01:30.860
This is kind of like the functor
playing off of those laws' laws.

27
00:01:30.860 --> 00:01:33.150
So it's connected to
compose in some way and

28
00:01:33.150 --> 00:01:35.205
we'll learn more about
that if I have time.

29
00:01:35.205 --> 00:01:38.320
[LAUGH] Somebody give me a Redbull.

30
00:01:39.730 --> 00:01:43.600
Here's just a quick look at
something interesting with the laws.

31
00:01:43.600 --> 00:01:49.000
I know that this diagram on the left is
just a cute drawing from a great blog

32
00:01:49.000 --> 00:01:54.760
post that kind of shows a more formal
category theory diagram might be.

33
00:01:54.760 --> 00:01:57.930
If I have a functor or if I have just
have a normal function from a to b,

34
00:01:57.930 --> 00:01:59.720
and those could be any type.

35
00:01:59.720 --> 00:02:02.070
So, in this case, that's reverse,
string to string.

36
00:02:02.070 --> 00:02:02.570
A is string.

37
00:02:02.570 --> 00:02:03.310
B is string.

38
00:02:03.310 --> 00:02:07.230
They don't have to be the same type and
that's why it just happens to be.

39
00:02:07.230 --> 00:02:13.755
Now, if I run reverse on bingo and
then I put it in my array, I get ognib.

40
00:02:13.755 --> 00:02:18.796
[LAUGH] And if i first put it in my array,
then f map over,

41
00:02:18.796 --> 00:02:24.910
fmap is map, I get functor map whatever,
I get the same result.

42
00:02:24.910 --> 00:02:29.850
Both take me to the same place, a to t fb,
t is our functor, b is inside it.

43
00:02:29.850 --> 00:02:35.649
So I get our array of string inside of it,
very interesting stuff.

44
00:02:36.650 --> 00:02:38.026
It's there for you to learn.

45
00:02:38.026 --> 00:02:40.170
They're in the slides,
you can look back at them.

46
00:02:40.170 --> 00:02:41.690
Here's another really interesting idea.

47
00:02:43.110 --> 00:02:47.777
We could actually do that composition and

48
00:02:47.777 --> 00:02:54.180
if you do a map map, that's the exact
same thing as mapping composing.

49
00:02:54.180 --> 00:02:56.750
If I go back to this law at the bottom,

50
00:02:56.750 --> 00:03:01.270
it says if I compose map map,
that's the same as map compose.

51
00:03:01.270 --> 00:03:05.650
And if I see that, literally see that line
in the code, I could always change it.

52
00:03:05.650 --> 00:03:09.980
You guys were writing that a minute ago,
compose map partially applied with F.

53
00:03:09.980 --> 00:03:12.370
I could just do map compose,
partially applies.

54
00:03:12.370 --> 00:03:14.550
So that is actually useful.

55
00:03:14.550 --> 00:03:17.410
It's right there in front your face.

56
00:03:19.100 --> 00:03:21.930
So the bottom one is way more efficient.

57
00:03:21.930 --> 00:03:25.680
If I have array of a billion things and
I map over it,

58
00:03:25.680 --> 00:03:29.050
and then I map over it,
that's gonna be really inefficient.

59
00:03:29.050 --> 00:03:32.440
But I know I can always just map
the composition over it once.

60
00:03:34.240 --> 00:03:36.790
Natural Transformations,

61
00:03:36.790 --> 00:03:39.810
tidbit of information,
shouldn't waste our time on it.

62
00:03:39.810 --> 00:03:42.890
But essentially you can take
one functor to another functor,

63
00:03:42.890 --> 00:03:45.770
if anybody cares about
a natural transformation.

64
00:03:45.770 --> 00:03:47.710
A lot of category theory cares about that.

65
00:03:47.710 --> 00:03:52.240
You can turn it maybe into a list
just by making a singleton list or

66
00:03:52.240 --> 00:03:53.640
a list with nothing in it.

67
00:03:53.640 --> 00:03:57.160
So that's a natural transformation
from a maybe to a list.

68
00:03:57.160 --> 00:04:00.240
And there's more laws [LAUGH] and
more diagrams.

69
00:04:00.240 --> 00:04:01.760
And it's really just connect the dots.

70
00:04:01.760 --> 00:04:04.239
You guys remember the dots,
they're just like, hey,

71
00:04:04.239 --> 00:04:07.159
this function goes to that dot and
that function goes to that dot.

72
00:04:07.159 --> 00:04:09.272
I can cut out the middle man and
just go straight to that other dot.

73
00:04:09.272 --> 00:04:11.610
I don't have to worry about
all the intermediate steps.

74
00:04:11.610 --> 00:04:16.121
This is that kinda of stuff but
with contexts and wrappers and

75
00:04:16.121 --> 00:04:18.250
mapping and it all relates.

76
00:04:19.460 --> 00:04:23.660
I'm not gonna go over like, it's not that
hard, you can look back at the examples.

77
00:04:23.660 --> 00:04:26.106
It's all very easy stuff but
once you build up and

78
00:04:26.106 --> 00:04:28.264
you just kind of know these simple truths.

79
00:04:28.264 --> 00:04:31.385
Okay, we're gonna do a fun
game to break it up.

80
00:04:31.385 --> 00:04:34.555
[LAUGH] Everybody's like, yay.

81
00:04:34.555 --> 00:04:39.757
[LAUGH] All right, so if I want to
make an API call with an ID and

82
00:04:39.757 --> 00:04:45.880
possibly retrieve a post,
would functors might be part of that?

83
00:04:45.880 --> 00:04:47.898
Does anybody have an idea,
just shout them out?

84
00:04:47.898 --> 00:04:50.986
&gt;&gt; Students: Maybe.

85
00:04:50.986 --> 00:04:52.843
&gt;&gt; Brian Lonsdorf: There's a maybe.

86
00:04:52.843 --> 00:04:56.663
And what about the API calls, can anybody?

87
00:04:56.663 --> 00:04:58.112
So was that IO?
&gt;&gt; Speaker 3: IO.

88
00:04:58.112 --> 00:04:59.460
&gt;&gt; Brian Lonsdorf: IO's good.

89
00:04:59.460 --> 00:05:00.743
Also do a future.

90
00:05:00.743 --> 00:05:03.693
I would've chose a future because
future because has IO in it but

91
00:05:03.693 --> 00:05:07.310
if it was a synchronous call,
IO would've been perfect.

92
00:05:07.310 --> 00:05:10.190
So I'm gonna Future of maybe,
these aren't right.

93
00:05:10.190 --> 00:05:11.308
You can do different things.

94
00:05:11.308 --> 00:05:12.100
You could've been,

95
00:05:12.100 --> 00:05:15.100
possibly retrieve it a post all you
do neither with an error message.

96
00:05:15.100 --> 00:05:16.290
I'm not saying this is the right answer.

97
00:05:16.290 --> 00:05:17.990
I'm just saying it's cool.

98
00:05:17.990 --> 00:05:19.709
You can mix and match these cards.

99
00:05:21.300 --> 00:05:24.120
How about I click a navigation link and

100
00:05:24.120 --> 00:05:26.850
insert the corresponding
HTML onto the page.

101
00:05:26.850 --> 00:05:32.488
So I'm gonna click a link and then we're
gonna set the HTML and we're gonna

102
00:05:32.488 --> 00:05:36.940
build the page and put, so we'll get this.
&gt;&gt; Speaker 4: EventStream.

103
00:05:36.940 --> 00:05:37.829
&gt;&gt; Brian Lonsdorf: EventStream,

104
00:05:37.829 --> 00:05:39.520
that's good.

105
00:05:39.520 --> 00:05:44.240
Anybody else?
&gt;&gt; Brian Lonsdorf: An EventStream and IO.

106
00:05:44.240 --> 00:05:46.250
There you go.

107
00:05:46.250 --> 00:05:47.270
Easy breezy.

108
00:05:47.270 --> 00:05:50.690
Putting it on the page
is definitely an IO,

109
00:05:50.690 --> 00:05:53.980
EventStream is lazy nothing,
happens to subscribe.

110
00:05:53.980 --> 00:05:57.320
But when you do subscribe,
you want to do some IO, right?

111
00:05:57.320 --> 00:05:59.565
Or you don't care, that's fine too.

112
00:05:59.565 --> 00:06:03.310
[LAUGH] If you don't want your thing to be
extended and that's the end of the line,

113
00:06:03.310 --> 00:06:05.749
just put it on the page and
you don't worry about it.

114
00:06:05.749 --> 00:06:07.388
One last one.

115
00:06:07.388 --> 00:06:12.273
Hey, if we want to submit
a form return errors or

116
00:06:12.273 --> 00:06:16.316
make a API call that will create a user.

117
00:06:16.316 --> 00:06:18.835
Let's see, did I word that correctly?

118
00:06:18.835 --> 00:06:23.745
[LAUGH] Submit a form,
return errors or make the call.

119
00:06:23.745 --> 00:06:26.593
&gt;&gt; Students: [INAUDIBLE]

120
00:06:26.593 --> 00:06:29.740
&gt;&gt; Brian Lonsdorf: I like that.

121
00:06:29.740 --> 00:06:33.138
The event stream could be
the submits on the form and

122
00:06:33.138 --> 00:06:37.496
then the either could be the I think
I did just a, hey, I did that.

123
00:06:37.496 --> 00:06:41.321
We've got a event stream in each future
and now notice these are different types,

124
00:06:41.321 --> 00:06:43.890
so we're gonna have to map, map, map that.

125
00:06:43.890 --> 00:06:47.502
And it has to be kinda clear
cuz you're saying, listen guys,

126
00:06:47.502 --> 00:06:52.690
I have three different functors, three
different contexts here that are nested.

127
00:06:52.690 --> 00:06:56.770
Now we talked a little bit briefly
about how you don't have to map,

128
00:06:56.770 --> 00:06:58.680
map, map,
you can define a lens to do that.

129
00:06:58.680 --> 00:07:00.500
I don't have time to go into them.

130
00:07:00.500 --> 00:07:05.250
But it's pretty great that you
can map three deep in contexts.

