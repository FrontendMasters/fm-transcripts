WEBVTT

1
00:00:00.000 --> 00:00:04.599
[MUSIC]

2
00:00:04.599 --> 00:00:10.650
&gt;&gt; Brian Lonsdorf: This is idea of map
that if you map over the container,

3
00:00:10.650 --> 00:00:17.653
you'll basically grab its value and
pass it to the function.

4
00:00:17.653 --> 00:00:23.434
See we've got, let me,
I like this, how do you,

5
00:00:23.434 --> 00:00:28.960
yeah, this s here is our flamethrower.

6
00:00:28.960 --> 00:00:29.620
See that?

7
00:00:29.620 --> 00:00:31.680
It pulls out the flamethrower and

8
00:00:31.680 --> 00:00:35.924
gives it to the function and now we can
capitalize cuz this s is just a string.

9
00:00:35.924 --> 00:00:38.740
So what we've done is
opened up our container and

10
00:00:38.740 --> 00:00:40.350
given its value to the function.

11
00:00:40.350 --> 00:00:44.280
Then it closes it back up.

12
00:00:44.280 --> 00:00:48.110
So let's look at that for
a minute and think it over.

13
00:00:48.110 --> 00:00:51.406
Does anybody have any questions or
are you kind of confused?

14
00:00:51.406 --> 00:00:56.242
Let's think about that.
&gt;&gt; Brian Lonsdorf: [LAUGH]

15
00:00:56.242 --> 00:00:58.345
You look really upset with that.

16
00:00:58.345 --> 00:01:02.721
[LAUGH]
&gt;&gt; Speaker 2: I guess

17
00:01:02.721 --> 00:01:05.313
the problem is it's mixing concept,

18
00:01:05.313 --> 00:01:10.173
because there's object-oriented
that we have to use because that's

19
00:01:10.173 --> 00:01:13.908
what JavaScript is underneath, right?
&gt;&gt; Brian Lonsdorf: Sure.

20
00:01:13.908 --> 00:01:17.088
&gt;&gt; Speaker 2: And then somehow we're

21
00:01:17.088 --> 00:01:21.565
making a functional,
&gt;&gt; Brian Lonsdorf: Just hang on to that.

22
00:01:21.565 --> 00:01:22.900
I'm just calling it the the same thing.

23
00:01:22.900 --> 00:01:29.780
We'll get to it, we'll trace, but the idea
is that, don't think of it as an object.

24
00:01:29.780 --> 00:01:32.780
Think of it as a container for
our string, and

25
00:01:32.780 --> 00:01:37.160
when we map over our container the string
goes into the function we're mapping over.

26
00:01:37.160 --> 00:01:41.540
We're just opening up our container,
giving its value to the function and so

27
00:01:41.540 --> 00:01:46.330
within that function I've got my string,
it's there and I can capitalize it.

28
00:01:46.330 --> 00:01:49.290
And then when we're done mapping
it goes back into the container.

29
00:01:49.290 --> 00:01:52.490
We're gonna look at another
example to probably clear this up.

30
00:01:52.490 --> 00:01:54.730
Yeah, I should mention that,
you don't need to write a full function.

31
00:01:54.730 --> 00:01:58.058
I just wanted to do that to show
you like it'll just populate,

32
00:01:58.058 --> 00:02:00.856
pass it right into the capitalize.
&gt;&gt; Speaker 3: Hey, Brian,

33
00:02:00.856 --> 00:02:06.680
there was a question if this is preferable
to using valueOf in your container object?

34
00:02:06.680 --> 00:02:07.927
&gt;&gt; Brian Lonsdorf: ValueOf,

35
00:02:07.927 --> 00:02:15.520
is a hack on JavaScript that you
can use to do some crazy stuff.

36
00:02:15.520 --> 00:02:20.282
But what I'm doing is I'm actually
assigning a property to my object and

37
00:02:20.282 --> 00:02:23.490
it's gonna make
the implementations easier.

38
00:02:23.490 --> 00:02:25.041
But if you guys want to experiment,

39
00:02:25.041 --> 00:02:27.690
I actually mentioned like
nobody is doing this right now.

40
00:02:27.690 --> 00:02:29.201
Get out there and play with it,

41
00:02:29.201 --> 00:02:33.255
get crazy cuz maybe valueOf will be the
solution that we've all been looking for.

42
00:02:33.255 --> 00:02:37.376
[LAUGH] So,
we're just using val as a convention.

43
00:02:37.376 --> 00:02:42.481
But look at the implementation
of map real quick and

44
00:02:42.481 --> 00:02:45.480
see I have to grab this.val.

45
00:02:45.480 --> 00:02:50.430
And that actually is, if you look at
map and you look at what's happening,

46
00:02:50.430 --> 00:02:54.010
we're literally running the function
on the value inside the container.

47
00:02:54.010 --> 00:02:55.000
That's what map is doing,

48
00:02:55.000 --> 00:02:58.500
it's running the function that's given
to it on the value inside the container.

49
00:03:00.000 --> 00:03:03.598
It's like it's saying what it's doing.

50
00:03:03.598 --> 00:03:06.635
We're gonna get more into the intuition
in what we're doing here.

51
00:03:06.635 --> 00:03:09.591
But yeah, play around with valueOf,
that's my answer.

52
00:03:09.591 --> 00:03:12.195
[LAUGH]
&gt;&gt; Speaker 2: So is the reason that we're

53
00:03:12.195 --> 00:03:16.820
doing this container so that we can
add functions into the prototype?

54
00:03:16.820 --> 00:03:19.090
The map for example.
&gt;&gt; Brian Lonsdorf: We will,

55
00:03:19.090 --> 00:03:20.702
that's exactly right.
&gt;&gt; Speaker 2: That's one of

56
00:03:20.702 --> 00:03:22.774
the things we're trying to get to.
&gt;&gt; Brian Lonsdorf: That's how we're

57
00:03:22.774 --> 00:03:24.560
going to get dynamic dispatch.
&gt;&gt; Speaker 2: Okay.

58
00:03:25.570 --> 00:03:30.190
&gt;&gt; Brian Lonsdorf: So this concept isn't

59
00:03:30.190 --> 00:03:31.350
foreign, right?

60
00:03:31.350 --> 00:03:32.950
Everybody knows how to map over an array.

61
00:03:32.950 --> 00:03:37.156
We were all just doing that, we have our
container of three, we map over it and

62
00:03:37.156 --> 00:03:37.691
add one.

63
00:03:37.691 --> 00:03:40.616
Or I shouldn't say container,
we have an array of three,

64
00:03:40.616 --> 00:03:42.242
we're mapping add one over it.

65
00:03:42.242 --> 00:03:45.320
We've got a container of three
we're mapping add one over it.

66
00:03:45.320 --> 00:03:49.242
Now, most people think of map and they're
like, iteration over a collection, for

67
00:03:49.242 --> 00:03:51.210
loop, I got what map does.

68
00:03:51.210 --> 00:03:55.630
That's just a specific
implementation of map on an array.

69
00:03:55.630 --> 00:04:00.660
We're gonna get into the general idea
of map that works on anything, and

70
00:04:00.660 --> 00:04:05.910
that container is just like a singleton
array, it's got a value in it.

71
00:04:05.910 --> 00:04:08.090
And we're gonna map a function over it.

72
00:04:08.090 --> 00:04:10.300
Are you guys good with me?

73
00:04:11.420 --> 00:04:12.070
Who's with me?

74
00:04:12.070 --> 00:04:15.220
[LAUGH] All right, stick with it.

75
00:04:15.220 --> 00:04:16.590
I'll show you why we're doing this.

76
00:04:16.590 --> 00:04:19.640
But right now, you're still
probably just like, that's stupid.

77
00:04:19.640 --> 00:04:24.420
[LAUGH] All right, so,
yeah, the true idea is

78
00:04:24.420 --> 00:04:29.870
you go inside an object and
you run a function from within the object.

79
00:04:29.870 --> 00:04:32.613
So we saw that function
run inside the container.

80
00:04:32.613 --> 00:04:34.253
This is Joe's slide, it's so cool.

81
00:04:34.253 --> 00:04:41.480
[LAUGH] Anyway, we go into our container.

82
00:04:41.480 --> 00:04:43.901
One thing that's important
to note about this is,

83
00:04:43.901 --> 00:04:46.850
is we've got, there's a lot going on
in the slide and we'll talk about.

84
00:04:46.850 --> 00:04:52.030
The top line here,
we have our container of one, two, three.

85
00:04:52.030 --> 00:04:56.080
We're gonna map reverse over it and
then map first over that, right?

86
00:04:56.080 --> 00:05:00.469
So what we're gonna do is basically,
when this goes into reverse,

87
00:05:00.469 --> 00:05:02.011
we get a reversed list.

88
00:05:02.011 --> 00:05:06.300
Oops, we get a reversed list.

89
00:05:06.300 --> 00:05:09.020
And then when we map over
that reversed list and

90
00:05:09.020 --> 00:05:11.680
grab first, we get the value of three.

91
00:05:11.680 --> 00:05:15.970
It's changing types inside the container.

92
00:05:15.970 --> 00:05:21.890
It cannot have a type that is like,
it's this container takes strings.

93
00:05:21.890 --> 00:05:22.870
Doesn't work.

94
00:05:22.870 --> 00:05:27.140
This container has to take any
value if it's gonna be mapped over.

95
00:05:27.140 --> 00:05:29.547
Notice how that's composition?

96
00:05:29.547 --> 00:05:31.246
Is that weird?

97
00:05:31.246 --> 00:05:35.353
That top line, left or right composition,
that's what we all wanted, right?

98
00:05:35.353 --> 00:05:40.810
[LAUGH] And there's actually laws that
enforce that, that is composition.

99
00:05:40.810 --> 00:05:44.570
There's some weird like theory behind
this stuff that we're gonna get into.

100
00:05:44.570 --> 00:05:47.440
But that's string that we can map,
and that's composition.

101
00:05:48.710 --> 00:05:52.160
Underneath that, we're gonna get
the length of the flamethrower and

102
00:05:52.160 --> 00:05:54.710
then add one to the length, so we get 13.

103
00:05:54.710 --> 00:05:58.706
So, it changed from a string to a number,
and then we added one to it.

104
00:05:58.706 --> 00:06:01.410
The top one changed from and
array to another array and

105
00:06:01.410 --> 00:06:02.880
we grabbed the first one.

106
00:06:02.880 --> 00:06:07.640
So, you can chain maps and the reason you
can chain maps is because it keeps putting

107
00:06:07.640 --> 00:06:10.320
it back in the container after you map,
right?

108
00:06:10.320 --> 00:06:14.540
Like if I map reverse over one,
two, three,

109
00:06:14.540 --> 00:06:17.230
I will get a container of three, two, one.

110
00:06:17.230 --> 00:06:19.700
And if I map first over
the container of three, two, one,

111
00:06:19.700 --> 00:06:20.870
I'll get a container of three.

112
00:06:20.870 --> 00:06:24.300
It just keeps putting it back into
the container, so you can keep mapping.

113
00:06:24.300 --> 00:06:27.730
It's kinda like when people return this,
so you can keep chaining.

114
00:06:27.730 --> 00:06:31.620
It's like, it's that, but in a more
functional sense cuz we're making copies

115
00:06:31.620 --> 00:06:32.880
we're not just returning this.

116
00:06:32.880 --> 00:06:34.820
That's something else I should mention,

117
00:06:34.820 --> 00:06:36.450
we're making copies of
container along the way.

118
00:06:36.450 --> 00:06:39.630
You could probably optimize, but I'm not
doing that, but I'm gonna be immutable.

119
00:06:39.630 --> 00:06:46.730
All right, so, we're gonna spend a lot
of time on functors, cuz you guys got

120
00:06:46.730 --> 00:06:51.436
to understand them or else you're gonna
not understand monads or applicatives.

121
00:06:51.436 --> 00:06:57.112
So it is a larger ghost.

122
00:06:57.112 --> 00:07:00.507
[SOUND] Sorry, I'm trying to like,
I'm getting distracted by the chat,

123
00:07:00.507 --> 00:07:01.950
maybe I should turn this down.

124
00:07:01.950 --> 00:07:09.200
[LAUGH] So what was the slide about?

125
00:07:09.200 --> 00:07:12.890
Yeah, I just wanted point out,
so like we saw before,

126
00:07:12.890 --> 00:07:17.400
we've got this map that takes its function
and its argument and we've got the map

127
00:07:17.400 --> 00:07:22.380
that we call dot on, that's why
we're not using underscore dot map,

128
00:07:22.380 --> 00:07:28.120
the bottom one, all it's doing is
turning around and calling .map for us.

129
00:07:28.120 --> 00:07:33.350
So the main difference here, these do
exactly the same thing, these two maps.

130
00:07:33.350 --> 00:07:36.330
But the main difference is
this one needs to exist.

131
00:07:36.330 --> 00:07:39.692
This Container(3) needs to exist so
I can call .map on it.

132
00:07:39.692 --> 00:07:45.580
This Container(3) doesn't need to, I could
just partially apply this map without one.

133
00:07:45.580 --> 00:07:47.640
Just like we've been
partially applying things and

134
00:07:47.640 --> 00:07:51.520
currying things,
the same difference whatever.

135
00:07:51.520 --> 00:07:53.390
Scott would get mad at me for that.

136
00:07:53.390 --> 00:07:57.980
[LAUGH] But the idea is that all
we're gonna do is to find a map

137
00:07:57.980 --> 00:08:00.060
that we can just call
dot on under the hood.

138
00:08:00.060 --> 00:08:01.353
Does everybody see that?

139
00:08:01.353 --> 00:08:05.370
It's second argument we
are just calling .map on it.

140
00:08:05.370 --> 00:08:09.512
This is gonna be a pattern too, just
throughout, like if you ever wanna make

141
00:08:09.512 --> 00:08:14.240
something more functional and point free
and composable, just take it's object last

142
00:08:14.240 --> 00:08:17.137
and call dot under it, under the hood.
&gt;&gt; Speaker 2: Did

143
00:08:17.137 --> 00:08:20.035
you say that the container didn't
need to exist in that second

144
00:08:20.035 --> 00:08:20.557
part?
&gt;&gt; Brian Lonsdorf: And

145
00:08:20.557 --> 00:08:23.393
the second line is partially
upon that cuz it's curry.

146
00:08:23.393 --> 00:08:27.445
So, I don't need a container for
it, it just be map by one.

147
00:08:27.445 --> 00:08:30.696
And the top one, what do I call dot on?

148
00:08:30.696 --> 00:08:32.239
I don't have the container,

149
00:08:32.239 --> 00:08:34.130
I can't call dot on anything.
&gt;&gt; Speaker 2: But

150
00:08:34.130 --> 00:08:38.190
when you _curry function,
you need something that has a map

151
00:08:38.190 --> 00:08:40.741
function in the prototype?
&gt;&gt; Brian Lonsdorf: I'm sorry,

152
00:08:40.741 --> 00:08:46.421
what I meant to say is the map since is
curry, I can just give it map add and

153
00:08:46.421 --> 00:08:51.160
I can partially apply it without
that second argument, but

154
00:08:51.160 --> 00:08:54.110
the top one it needs its.
&gt;&gt; Speaker 2: Okay.

155
00:08:54.110 --> 00:08:55.145
&gt;&gt; Brian Lonsdorf: And then that way,

156
00:08:55.145 --> 00:08:58.579
you can build for like machines
of just composing functions and

157
00:08:58.579 --> 00:09:03.550
stuff without getting our data first.
&gt;&gt; Brian Lonsdorf: All right, so

158
00:09:03.550 --> 00:09:06.936
here's some examples of our new map,
I just took the dot and

159
00:09:06.936 --> 00:09:11.341
now we're just using the normal map we've
always been using in this class but

160
00:09:11.341 --> 00:09:16.083
we're now using the underscore dot just,
and we're gonna call like, all right,

161
00:09:16.083 --> 00:09:18.370
what if our container matches cat?

162
00:09:18.370 --> 00:09:20.710
We can't just call match on catsup.

163
00:09:21.820 --> 00:09:23.590
We have to map that over it, right?

164
00:09:23.590 --> 00:09:25.190
Because it's inside the container.

165
00:09:25.190 --> 00:09:27.200
Match does not work with the container,

166
00:09:27.200 --> 00:09:31.260
it works with the string inside
the container, so we map over it.

167
00:09:31.260 --> 00:09:34.735
Just like if catsup was in a list or
an array and

168
00:09:34.735 --> 00:09:37.300
we wanted to map that match
function over the array,

169
00:09:37.300 --> 00:09:40.850
you can't just give an array to match, you
have to give the strings inside the array.

170
00:09:40.850 --> 00:09:46.990
So, you're basically mapping this function
over the value inside the container.

171
00:09:46.990 --> 00:09:49.985
So, let me know if how you
guys are feeling about this,

172
00:09:49.985 --> 00:09:52.875
cuz you have to do exercises in a minute
and I'm gonna be like, I'm not helping.

173
00:09:52.875 --> 00:09:59.002
[LAUGH] Compose underneath is
just going to reverse dog and

174
00:09:59.002 --> 00:10:02.966
grab the first, so we'll get the g.

175
00:10:02.966 --> 00:10:06.430
That's my favorite example of
reversing first to get last.

176
00:10:08.340 --> 00:10:12.780
So there's just a way to use map and
we could have just called the dot syntax.

177
00:10:12.780 --> 00:10:15.370
But this is kinda more composable
in our point free way here.

