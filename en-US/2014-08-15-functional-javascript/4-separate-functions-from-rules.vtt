WEBVTT

1
00:00:00.025 --> 00:00:04.840
&gt;&gt; [MUSIC]

2
00:00:04.840 --> 00:00:08.630
&gt;&gt; Joe Nelson: Next one is we separated
from the environment we separated mutation

3
00:00:08.630 --> 00:00:10.080
from calculation.

4
00:00:10.080 --> 00:00:15.780
We can even separate a function from rules
and it's useful to think about this.

5
00:00:15.780 --> 00:00:19.332
I mean ultimately the functions we write
are defined by rules in programming.

6
00:00:19.332 --> 00:00:23.976
But if we step back and think of them
not as the rules inside of them all

7
00:00:23.976 --> 00:00:26.770
things it does but just here's a thing.

8
00:00:26.770 --> 00:00:30.020
It's just passing things through and
it sends this point to this point.

9
00:00:30.020 --> 00:00:33.040
So thinking of it more like a noun
you can hold them in your hands.

10
00:00:33.040 --> 00:00:37.460
Just like you can add numbers you
can do things to functions the nouns

11
00:00:37.460 --> 00:00:41.010
they're not just there to doing I guess In
English there's run and there's running.

12
00:00:41.010 --> 00:00:41.790
You got a Jaren.

13
00:00:41.790 --> 00:00:44.390
But this is the Jaren way of
thinking about a function.

14
00:00:44.390 --> 00:00:45.310
So functions are nouns.

15
00:00:46.920 --> 00:00:49.440
So one way we could
think about a function.

16
00:00:49.440 --> 00:00:52.360
This is a part of MV5 in JavaScript.

17
00:00:52.360 --> 00:00:53.255
Is here's what it is.

18
00:00:53.255 --> 00:00:55.690
It does this stuff and
there is these weird variables.

19
00:00:55.690 --> 00:00:56.960
And numbers and stuff.

20
00:00:56.960 --> 00:01:00.400
Or you could think someone's
brought a huge platter to you.

21
00:01:00.400 --> 00:01:03.680
Of all the finite strings that
must be a big platter and

22
00:01:03.680 --> 00:01:07.640
associate with each string just
this tag of what MD5's do.

23
00:01:07.640 --> 00:01:10.635
The function is just the platter
of all the things that it does.

24
00:01:10.635 --> 00:01:13.245
So when we think about
it what it does in side,

25
00:01:13.245 --> 00:01:17.584
the way it operates is thinking
intentionally otherwise extensionally.

26
00:01:17.584 --> 00:01:23.161
So if we think about extensionally, we
can now make operations on functions and

27
00:01:23.161 --> 00:01:28.668
reason about what they do without caring
as much, what's happening inside.

28
00:01:28.668 --> 00:01:31.800
Just to keep it kind of mathy,
in case all this is kind of boring,

29
00:01:31.800 --> 00:01:35.700
if you don't know this bit but I wanted
to say that, it's a set theoretically.

30
00:01:36.880 --> 00:01:39.840
A function is a single
value collection of pairs.

31
00:01:39.840 --> 00:01:42.676
So, I said there's a platter and
there's a bunch of strings and

32
00:01:42.676 --> 00:01:45.156
a little tag on each string
that says here's my MD-5.

33
00:01:45.156 --> 00:01:47.164
That's the pairing going on.

34
00:01:47.164 --> 00:01:51.289
So if you had a function
that goes like this.

35
00:01:51.289 --> 00:01:54.233
The one on the left is a function,
I don't know everything,

36
00:01:54.233 --> 00:01:56.794
well I guess assuming it's
good in the dot dot dots.

37
00:01:56.794 --> 00:01:59.201
That's the part that we showed
is not making it not a function.

38
00:02:00.430 --> 00:02:05.580
But the bit on the right is certainly
not a function when you relate.

39
00:02:05.580 --> 00:02:06.960
So when you relate 1 in D.

40
00:02:06.960 --> 00:02:08.130
We're cool.

41
00:02:08.130 --> 00:02:12.060
That would mean relating them means you
could think it's drawn diagrammatically as

42
00:02:12.060 --> 00:02:14.070
one goes over to D.

43
00:02:14.070 --> 00:02:17.460
I relate 2 in B we're cool
that I relate 2 in C.

44
00:02:17.460 --> 00:02:21.270
But we're not cool because two is already
taken you need to be able to decide

45
00:02:21.270 --> 00:02:25.890
where it goes but as a set it
just means it's single value that

46
00:02:25.890 --> 00:02:30.090
the paired the first component of the pair
can never have two things that go with it.

47
00:02:31.600 --> 00:02:36.720
So thinking in terms of these
diagrams now that's I guess what.

48
00:02:36.720 --> 00:02:40.050
So there's another terminology
if you're not familiar with it.

49
00:02:40.050 --> 00:02:44.585
When we're looking at wait for the slide
when we're looking at the numbers,

50
00:02:44.585 --> 00:02:48.071
all the numbers or values of any
kind that you see in the pairs

51
00:02:48.071 --> 00:02:50.609
on the left hand side
is called the domain.

52
00:02:50.609 --> 00:02:55.128
And all the ones on the right hand side is
the range of the co-domain depending on

53
00:02:55.128 --> 00:02:56.690
the range could be bigger.

54
00:02:58.270 --> 00:03:03.250
So without ever just knowing those words,
domain is the things that are eligible to

55
00:03:03.250 --> 00:03:07.170
be put into the function and the range
are the things that it'll ever give you.

56
00:03:07.170 --> 00:03:10.500
Like some functions, squaring a number
will never give you a negative number.

57
00:03:10.500 --> 00:03:11.586
It's just not possible.

58
00:03:11.586 --> 00:03:16.558
So that's not in the range.
&gt;&gt; Joe Nelson: Knowing that

59
00:03:16.558 --> 00:03:20.871
let's pull it back into JS.

60
00:03:20.871 --> 00:03:26.046
It was cool thinking about it
mathematically it's a nice place to be,

61
00:03:26.046 --> 00:03:30.958
little quiet but this functions in
math we're taking one value and

62
00:03:30.958 --> 00:03:32.373
giving one value.

63
00:03:32.373 --> 00:03:33.163
But that's a pain.

64
00:03:33.163 --> 00:03:35.910
I have functions that take
a couple in programming.

65
00:03:37.430 --> 00:03:41.340
There's a technique where we can
separate the arity from the function.

66
00:03:41.340 --> 00:03:44.542
So that we can write functions
that take a lot of things but

67
00:03:44.542 --> 00:03:46.755
only give them arguments one at a time.

68
00:03:46.755 --> 00:03:48.590
And this thing knows how to deal with it.

69
00:03:48.590 --> 00:03:50.790
Here's one argument,
you take three and they'll say,

70
00:03:50.790 --> 00:03:53.600
okay I'm waiting when you give
me the next ones, I'm good.

71
00:03:53.600 --> 00:03:55.780
You can just remember that.

72
00:03:55.780 --> 00:03:57.890
Before getting into how that happens,

73
00:03:57.890 --> 00:04:01.690
let's see one way that
separating can remove names.

74
00:04:01.690 --> 00:04:04.410
Cuz we're saying,
once we separate to recognize,

75
00:04:04.410 --> 00:04:07.550
we're removing spurious names
that don't have to be there.

76
00:04:07.550 --> 00:04:11.810
So the arcs here's a thing that works
with some objects at the top we have

77
00:04:11.810 --> 00:04:13.220
this function it's gonna help us out.

78
00:04:14.360 --> 00:04:17.540
Real simple you give it a property name,
and an object and

79
00:04:17.540 --> 00:04:20.040
just looks it up in the object
it's like using dot.

80
00:04:20.040 --> 00:04:20.870
But when we write it.

81
00:04:20.870 --> 00:04:25.570
We make a function for as opposed to using
a language construct, you know it's funny

82
00:04:25.570 --> 00:04:28.050
you know you think I wanna language
if it let's me do a lot of things.

83
00:04:28.050 --> 00:04:30.560
This is great look at all
the stuff it gives me.

84
00:04:30.560 --> 00:04:34.420
But when you do with the language
you're not able to talk about it.

85
00:04:34.420 --> 00:04:36.660
You're not able to compose it together.

86
00:04:36.660 --> 00:04:38.480
So it's, cool, language does it.

87
00:04:38.480 --> 00:04:41.230
But then not cool that we
can control how it happens.

88
00:04:41.230 --> 00:04:43.500
So, when the language gives me dot,

89
00:04:43.500 --> 00:04:45.860
I can't do what you're about to
see at the bottom of the page.

90
00:04:45.860 --> 00:04:49.040
When I have a function called get,
we can use it.

91
00:04:49.040 --> 00:04:52.370
So assume we have this get thing,
it gets a property out of an object.

92
00:04:52.370 --> 00:04:54.140
And assume we just have a list of people.

93
00:04:54.140 --> 00:04:55.906
I guess it came back from some API or
something.

94
00:04:55.906 --> 00:04:59.280
It's JSON it's an array of
objects that have a name and

95
00:04:59.280 --> 00:05:01.870
I make a function called get person name.

96
00:05:01.870 --> 00:05:05.130
I give a person and it just I mean
super basic and opposed the name out.

97
00:05:06.260 --> 00:05:10.280
So then if we had a bunch of people
on our task was to get their names.

98
00:05:10.280 --> 00:05:17.800
We would map this function getpersonName
over people and we'd have their names.

99
00:05:17.800 --> 00:05:21.350
Another way is if we had magic and
that's more fun.

100
00:05:21.350 --> 00:05:22.700
So the magic.

101
00:05:23.890 --> 00:05:27.000
Okay we have get,
we gotta put two pieces together.

102
00:05:27.000 --> 00:05:29.680
At the top we have get,
takes two arguments.

103
00:05:29.680 --> 00:05:32.750
It takes the property, an object and

104
00:05:32.750 --> 00:05:35.710
down here I'm getting those
names again through the array.

105
00:05:35.710 --> 00:05:41.330
Just by saying map over the people and
get name, but you're like wait wait.

106
00:05:41.330 --> 00:05:46.048
Get takes two we just gave it one how's
this happening well that's magic.

107
00:05:46.048 --> 00:05:48.617
The second one is of course
map will go over and for

108
00:05:48.617 --> 00:05:53.040
each person it'll send it into this
thing this Frankenstein function.

109
00:05:53.040 --> 00:05:56.660
Which is Get,
it's a weird little copy of Get,

110
00:05:56.660 --> 00:06:00.360
that knows the name is baked into it but
it's waiting for the object.

111
00:06:01.840 --> 00:06:05.840
So if we did, If we had this kind of
magic and if we think about it that way,

112
00:06:05.840 --> 00:06:08.732
we don't have to write a function
called Get person's name.

113
00:06:10.360 --> 00:06:11.780
It's shorter you just say Get name.

114
00:06:13.100 --> 00:06:19.060
And in fact there's a little trick
about the order I put that in.

115
00:06:19.060 --> 00:06:22.920
I say get property object,
I didn't say get object property.

116
00:06:22.920 --> 00:06:27.520
Because if I said get object property,
I couldn't bake in the name

117
00:06:27.520 --> 00:06:29.850
because the first thing it's looking for
is the object.

118
00:06:29.850 --> 00:06:33.623
And oftentimes when we're mapping we
don't know what the objects are gonna be.

119
00:06:33.623 --> 00:06:37.573
So depending on the order of the arguments
It's going to work better with this

120
00:06:37.573 --> 00:06:39.554
magical technique called currying.

121
00:06:39.554 --> 00:06:41.520
That's gonna allow us to put
things in one at a time.

122
00:06:41.520 --> 00:06:45.420
And in fact Brian had a popular talk
about underscore, you're doing it wrong.

123
00:06:45.420 --> 00:06:46.431
And it is very much,

124
00:06:46.431 --> 00:06:50.480
because people don't use this style
thinking about functions as little nouns.

125
00:06:50.480 --> 00:06:55.500
And being able to compose them and
do stuff to them and curry them most

126
00:06:55.500 --> 00:06:58.890
JavaScript libraries the things are in the
wrong order so you can't do this stuff.

127
00:06:58.890 --> 00:07:02.274
So there's a set of libraries that we're
gonna show you that are gonna work

128
00:07:02.274 --> 00:07:03.088
better for this.

129
00:07:03.088 --> 00:07:05.400
Yeah.
&gt;&gt; Speaker 2: There's a question from

130
00:07:05.400 --> 00:07:06.458
Ballentine in chat.

131
00:07:06.458 --> 00:07:10.873
Would ES6 splat operator affect
in anyway the arity approach or

132
00:07:10.873 --> 00:07:13.770
magic on functions?
&gt;&gt; Joe Nelson: We're gonna look into

133
00:07:13.770 --> 00:07:15.280
one implementation of currying.

134
00:07:16.430 --> 00:07:20.100
And we'll see whether this implementation
I'll show you is affected.

135
00:07:20.100 --> 00:07:22.605
I can't think off the top
whether it would or wouldn't but

136
00:07:22.605 --> 00:07:24.458
when you see the example implementation.

137
00:07:24.458 --> 00:07:27.318
You have a feeling about it, Brian?
&gt;&gt; Brian: Yeah, I can say,

138
00:07:27.318 --> 00:07:31.290
I mean there's multiple
implementations and

139
00:07:31.290 --> 00:07:35.582
already this one creates
unnecessary closures.

140
00:07:35.582 --> 00:07:39.327
And functions take property so you can
actually bake the arguments into the or

141
00:07:39.327 --> 00:07:41.060
return a new function.

142
00:07:41.060 --> 00:07:42.300
Which would get rid of the closure.

143
00:07:43.450 --> 00:07:47.636
So yeah there's a bunch of different
implementations you could do for but

144
00:07:47.636 --> 00:07:51.397
it's good for the naive simple approach
right now and try to make it better

145
00:07:51.397 --> 00:07:56.510
[LAUGH] with everybody's help.
&gt;&gt; Joe Nelson: Okay so

146
00:07:56.510 --> 00:07:57.510
we talked about the magic.

147
00:07:59.990 --> 00:08:02.045
Boy.
I said magical spells were nice you know

148
00:08:02.045 --> 00:08:05.490
that they're always a little bit garbled
and the question for me is whether

149
00:08:05.490 --> 00:08:08.624
the curry what's more complicated
here this crazy thing or curry?

150
00:08:08.624 --> 00:08:09.854
And the fact that it looks so

151
00:08:09.854 --> 00:08:13.288
complicated is really just an artifact
that we're working in JavaScript.

152
00:08:13.288 --> 00:08:17.090
Other languages like Haskel,
cough cough, is like just does it.

153
00:08:17.090 --> 00:08:18.190
You know you don't have to think about it.

154
00:08:18.190 --> 00:08:19.780
But here, it's all right.

155
00:08:19.780 --> 00:08:20.920
We can do it.

156
00:08:20.920 --> 00:08:22.380
I'll just go over this really quickly and

157
00:08:22.380 --> 00:08:23.920
we can think about how this
one is implemented and

158
00:08:23.920 --> 00:08:28.650
like Brian said there may be other
approaches that aren't as unwieldy.

159
00:08:28.650 --> 00:08:32.290
But, I don't know this one seems kinda
bulletproof in some ways, so okay,

160
00:08:32.290 --> 00:08:34.390
cool curry what's it doing.

161
00:08:34.390 --> 00:08:38.310
It's taking a function and
ultimately what's it returning?

162
00:08:40.500 --> 00:08:46.090
Well is really two things it could be
doing line three, well it's returning

163
00:08:46.090 --> 00:08:50.400
another function on line two so you give
it a function it gives another function.

164
00:08:50.400 --> 00:08:51.890
Like a stunt double or something.

165
00:08:51.890 --> 00:08:55.685
It's this other function that's gonna, as
needed pretend to be your first one, but

166
00:08:55.685 --> 00:08:57.331
also kind of remember things for it.

167
00:08:57.331 --> 00:09:00.160
So in one case here's a function.

168
00:09:00.160 --> 00:09:01.570
What does it do?

169
00:09:01.570 --> 00:09:06.630
It checks to see whether
the arguments given to it are more or

170
00:09:06.630 --> 00:09:09.670
less than what the original
function expected.

171
00:09:09.670 --> 00:09:13.763
So it's kind of messed up in JavaScript
you get messed up is cool in this case you

172
00:09:13.763 --> 00:09:17.253
could ask how many arguments was
the function declared to accept.

173
00:09:17.253 --> 00:09:20.810
Of course in JavaScript you have another
pseudo array called arguments and

174
00:09:20.810 --> 00:09:21.831
you could take more.

175
00:09:21.831 --> 00:09:25.719
But if you least if you at least
declare your function is taking two

176
00:09:25.719 --> 00:09:31.150
they'll be a .length on it and I'll say
well I guess I stated that I take two.

177
00:09:31.150 --> 00:09:34.890
So this thing says I'm a new
function if I was given

178
00:09:34.890 --> 00:09:38.584
fewer arguments than the original
function given to me like wanted.

179
00:09:38.584 --> 00:09:43.580
I'm gonna keep note of what was given
to me and then return another function

180
00:09:43.580 --> 00:09:46.500
which is sorta me but
just waiting for the next ones.

181
00:09:46.500 --> 00:09:48.140
If you're given everything,

182
00:09:48.140 --> 00:09:51.900
that you ever needed that the original
ever needed It says well.

183
00:09:51.900 --> 00:09:55.690
Just pass it along I've no idea what
the original did, go to the original.

184
00:09:55.690 --> 00:10:01.498
So it's just that way of
delaying what happens as needed.

185
00:10:01.498 --> 00:10:06.860
Okay, so you feel pretty happy or
at least got a feel for it.

186
00:10:08.780 --> 00:10:09.530
We're gonna use it.

187
00:10:09.530 --> 00:10:13.400
So, even if you don't get in
the nuances of how it was written.

188
00:10:13.400 --> 00:10:14.760
You see how it's used, it's easy.

189
00:10:16.770 --> 00:10:20.200
So easy that we're going to go to our
next thing but before we do let's see

190
00:10:20.200 --> 00:10:23.110
I wanted to say right right
just to read just to reiterate.

191
00:10:24.580 --> 00:10:27.733
So we had our get thing right in
our this the same get function

192
00:10:27.733 --> 00:10:31.327
we had before on the top you give it
a property you give it an object but

193
00:10:31.327 --> 00:10:33.873
instead of saying function
get take the stuff.

194
00:10:33.873 --> 00:10:38.778
You say get, you're the curried form
of the function what you used to be,

195
00:10:38.778 --> 00:10:41.167
basically, all the stuff inside.

196
00:10:41.167 --> 00:10:44.863
And when you say curry around it,
that's gonna return you a new function and

197
00:10:44.863 --> 00:10:45.960
you're good.

198
00:10:45.960 --> 00:10:47.750
You can use it in the magical way.

199
00:10:47.750 --> 00:10:55.053
So you can say, names equals people,
oops, people get name.

200
00:10:55.053 --> 00:10:56.820
You just gave it one thing,
and it's going to take two.

