WEBVTT

1
00:00:00.000 --> 00:00:04.530
[MUSIC]

2
00:00:04.530 --> 00:00:07.452
&gt;&gt; Brian Lonsdorf: So I was just starting
with a little bit of a motivational

3
00:00:07.452 --> 00:00:09.420
example of compose.

4
00:00:09.420 --> 00:00:13.350
I'm gonna talk more about it,
I do wanna say I think this will work.

5
00:00:14.470 --> 00:00:20.450
From this point forward,
that's our best friend right there.

6
00:00:20.450 --> 00:00:25.860
Okay, we're not gonna be using _.compose,
_.map because

7
00:00:25.860 --> 00:00:30.810
I needed to define different versions
of that to work with type classes and

8
00:00:30.810 --> 00:00:33.850
categories and what not,
kinda dynamic dispatch stuff.

9
00:00:33.850 --> 00:00:41.310
So don't use the ramda_.map or
_.compose here on out.

10
00:00:41.310 --> 00:00:42.672
I'm sorry that's so confusing.

11
00:00:42.672 --> 00:00:48.065
[LAUGH] I mean use it when
you're working with a arrays or

12
00:00:48.065 --> 00:00:51.005
functions but don't use it.

13
00:00:51.005 --> 00:00:56.383
Yeah, anyway so I just wanted to point out
that, so like there are some questions

14
00:00:56.383 --> 00:01:00.284
in the chat that we launched about.
&gt;&gt; Speaker 1: Brian you didn't introduce

15
00:01:00.284 --> 00:01:04.259
yourself.
&gt;&gt; Brian Lonsdorf: I'm Brian,

16
00:01:04.259 --> 00:01:07.255
hey [LAUGH].
&gt;&gt; Speaker 1: What do you do,

17
00:01:07.255 --> 00:01:09.154
Brian?
&gt;&gt; Brian Lonsdorf: Let's see,

18
00:01:09.154 --> 00:01:13.388
I own a consulting company
called Loop/Recur and

19
00:01:13.388 --> 00:01:17.218
I teach functional
programming as a hobby and

20
00:01:17.218 --> 00:01:19.828
I'm glad to be here.
&gt;&gt; Speaker 1: Dr.Boolean.

21
00:01:19.828 --> 00:01:21.508
&gt;&gt; Brian Lonsdorf: [LAUGH] DrBoolean is me

22
00:01:21.508 --> 00:01:23.660
on Twitter, check it out.

23
00:01:23.660 --> 00:01:27.974
So let me just finish up part
one here with a quick last

24
00:01:27.974 --> 00:01:31.026
question that happened over lunch.

25
00:01:31.026 --> 00:01:34.619
Hi Manuel, [LAUGH].

26
00:01:34.619 --> 00:01:39.103
And the point is that you might wanna
use this when you're just kind of

27
00:01:39.103 --> 00:01:40.970
building up this function.

28
00:01:42.050 --> 00:01:45.660
So over here we have our
application that's going to

29
00:01:46.970 --> 00:01:48.980
first get an array by dashes.

30
00:01:48.980 --> 00:01:49.644
What does that mean?

31
00:01:49.644 --> 00:01:54.510
It's gonna split by dashes and
then we're gonna map the first upper.

32
00:01:54.510 --> 00:01:56.302
What is the first upper?

33
00:01:56.302 --> 00:01:59.970
The first upper is two upper and
grabbing the first character,

34
00:01:59.970 --> 00:02:04.190
or we could be way more efficient and
grab the first character and do two upper.

35
00:02:05.610 --> 00:02:11.170
The point is this should be,
this should read like a book.

36
00:02:11.170 --> 00:02:16.920
So the next thing is how about
instead of app will make this,

37
00:02:16.920 --> 00:02:22.441
getFirstUpperOfDashes, [LAUGH] and
then our app is now,

38
00:02:22.441 --> 00:02:28.890
this getFirstUpperOfDashes,
it's gonna try to auto complete.

39
00:02:28.890 --> 00:02:32.302
The composition of that and

40
00:02:32.302 --> 00:02:37.493
some other function maybe like take one or

41
00:02:37.493 --> 00:02:41.215
take two [LAUGH] take one said.

42
00:02:41.215 --> 00:02:46.072
So at that point what we're doing
here is building up a function from

43
00:02:46.072 --> 00:02:49.240
other functions there's no data going in.

44
00:02:49.240 --> 00:02:53.825
It's just like a machine that you kinda
drop a coin in and when you drop the coin

45
00:02:53.825 --> 00:02:58.075
in the coin being this argument that
goes in or up over here in the color.

46
00:02:58.075 --> 00:03:00.612
Over here it's just functions
being combined with

47
00:03:00.612 --> 00:03:04.506
other functions compose ability and
we're combining functions with data and

48
00:03:04.506 --> 00:03:07.530
we're combining functions with functions.

49
00:03:07.530 --> 00:03:11.402
One of the killer parts of compose
is if I ever really long compose,

50
00:03:11.402 --> 00:03:16.960
let me make sure this works before
I keep talking, there you go.

51
00:03:16.960 --> 00:03:22.130
If I'm like you know I didn't want to
take to get the head of that all right,

52
00:03:22.130 --> 00:03:24.900
and I'll run that and there we go.

53
00:03:24.900 --> 00:03:29.208
Well the point of this is
I've got three functions and

54
00:03:29.208 --> 00:03:34.385
I can grab any sub, like any group and
pull that out into its own.

55
00:03:34.385 --> 00:03:39.685
So I'll make this
innefficientHead [LAUGH],

56
00:03:39.685 --> 00:03:45.821
inefficientHead, I don't
know how JS been works,

57
00:03:45.821 --> 00:03:50.012
[LAUGH] we'll just find this first.

58
00:03:50.012 --> 00:03:55.311
So what I'm doing here is
just extracting method,

59
00:03:55.311 --> 00:04:00.253
quote-unquote and
into its own composition.

60
00:04:00.253 --> 00:04:05.091
And now, it still works but the point is
that when you glue functions together

61
00:04:05.091 --> 00:04:09.707
like this you can kinda just grab
the different parts, there's no data,

62
00:04:09.707 --> 00:04:12.549
there's no roots deep in your application.

63
00:04:12.549 --> 00:04:15.880
You're not depending on your
environment in implicit inputs.

64
00:04:15.880 --> 00:04:19.758
Everything Joe went over in the first
part is leading up to where like

65
00:04:19.758 --> 00:04:24.248
we should be comfortable with this right
here, cuz we're gonna go further and

66
00:04:24.248 --> 00:04:25.873
it's gonna get insane.

67
00:04:25.873 --> 00:04:29.158
Well looks like better over here, no it
doesn't, it looks like the same anyway.

68
00:04:29.158 --> 00:04:32.887
[LAUGH] You know what?

69
00:04:32.887 --> 00:04:38.530
There we go, yeah whatever.

70
00:04:38.530 --> 00:04:41.810
But the whole point is that
you make your grammar and

71
00:04:41.810 --> 00:04:45.710
then you use it as your application,
so what is my app do?

72
00:04:45.710 --> 00:04:49.240
Well it gets the first upper of dashes and
then it does this inefficientHead on it.

73
00:04:49.240 --> 00:04:52.400
And that's exactly what it's doing,
it's getting the first uppercase and

74
00:04:52.400 --> 00:04:54.340
it's doing some inefficientHead on it.

75
00:04:54.340 --> 00:04:59.450
And it's very readable and
very abstract and

76
00:04:59.450 --> 00:05:04.580
high level and declarative any of
this can change under the hood.

77
00:05:04.580 --> 00:05:08.970
So, and it's okay to use a function if you
need to, if this was really hard to write.

78
00:05:08.970 --> 00:05:13.720
Like just write a function here and
do it this way, no big deal.

79
00:05:14.820 --> 00:05:20.809
So let's use s substring, and
there we are cannot read toUpperCase,

80
00:05:20.809 --> 00:05:25.097
so I think I broke that, do this one.
&gt;&gt; Speaker 2: Yeah you got to return.

81
00:05:25.097 --> 00:05:26.352
&gt;&gt; Brian Lonsdorf: Thank you guys,

82
00:05:26.352 --> 00:05:29.525
that's what I heard you.
&gt;&gt; Speaker 2: [LAUGH]

83
00:05:31.271 --> 00:05:31.937
&gt;&gt; Brian Lonsdorf: So yeah, so

84
00:05:31.937 --> 00:05:33.871
that was just to kinda sum that up,

85
00:05:33.871 --> 00:05:37.830
maybe answer somebody's question
over lunch about why is this good?

86
00:05:38.840 --> 00:05:43.650
We use it and be like, my gosh,
this is super declarative and

87
00:05:43.650 --> 00:05:46.340
it's reading and like all I'm
doing is just composing bits and

88
00:05:46.340 --> 00:05:51.230
making this machine that's waiting for,
it's like It's like those

89
00:05:51.230 --> 00:05:55.680
vending machines where you put in
a quarter and you get out a result.

90
00:05:55.680 --> 00:05:58.590
That's what's happening,
where the hell is our quarter and

91
00:05:58.590 --> 00:06:01.220
w is our result and
it just goes through stuff.

92
00:06:01.220 --> 00:06:05.120
Now, there's different, this is kinda
beautiful, we wrote apps like this for

93
00:06:05.120 --> 00:06:09.000
like a year before we had any
idea of what a monad was.

94
00:06:09.000 --> 00:06:12.330
And it's JavaScript, it's loose, you don't
really need to worry about that so much.

95
00:06:12.330 --> 00:06:15.810
But there are so
many problems with doing it this way,

96
00:06:15.810 --> 00:06:19.650
if you don't know how to
compose bigger things.

97
00:06:19.650 --> 00:06:21.820
And that's what we're gonna
talk about in part two.

98
00:06:23.160 --> 00:06:26.290
So let's dive into it.

