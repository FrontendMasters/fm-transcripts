WEBVTT

1
00:00:00.000 --> 00:00:04.610
[MUSIC]

2
00:00:04.610 --> 00:00:06.640
&gt;&gt; Brian Lonsdorf: All right,
this one's pretty great.

3
00:00:06.640 --> 00:00:09.600
So here's what you're going
to see in your normal code.

4
00:00:09.600 --> 00:00:15.789
This is like what you're
gonna see on your day to day.

5
00:00:15.789 --> 00:00:20.710
And we're gonna say if we have a number,
we want to parse the end.

6
00:00:20.710 --> 00:00:22.360
Okay, well I know how to write that.

7
00:00:22.360 --> 00:00:25.080
I could say, well, I have parseInt.

8
00:00:26.950 --> 00:00:30.500
Okay, and what do I want to do?

9
00:00:30.500 --> 00:00:34.550
I want to compose that with
first put it in maybe, right?

10
00:00:34.550 --> 00:00:36.930
Because it may or may not be there.

11
00:00:36.930 --> 00:00:42.700
But then I have to map parseInt over it,
and see if this works.

12
00:00:42.700 --> 00:00:43.890
Hey, hey it worked.

13
00:00:43.890 --> 00:00:44.780
Let's make it weird.

14
00:00:46.930 --> 00:00:50.190
Things got weird,
then they got real weird.

15
00:00:50.190 --> 00:00:51.470
Come on, run it.

16
00:00:52.470 --> 00:00:53.260
There it goes.

17
00:00:53.260 --> 00:00:54.230
Expected 4 equals 43.

18
00:00:54.230 --> 00:00:57.980
I just like to fail it sometimes just
to know we're on the right track.

19
00:00:57.980 --> 00:00:58.710
It's a good little tip.

20
00:00:58.710 --> 00:01:00.330
You can just like mess with the test so

21
00:01:00.330 --> 00:01:03.560
you know that you did it right.

22
00:01:03.560 --> 00:01:04.250
&gt;&gt; Speaker 2: Hey, Brian.
&gt;&gt; Brian Lonsdorf: Yo.

23
00:01:04.250 --> 00:01:06.090
&gt;&gt; Speaker 2: We're getting asked for

24
00:01:06.090 --> 00:01:08.300
a more step by step breakdown
of how you're coming up

25
00:01:08.300 --> 00:01:09.570
with the solutions.
&gt;&gt; Brian Lonsdorf: Sure.

26
00:01:09.570 --> 00:01:10.290
&gt;&gt; Speaker 2: Having some

27
00:01:10.290 --> 00:01:12.610
trouble following.
&gt;&gt; Brian Lonsdorf: Okay, sure.

28
00:01:12.610 --> 00:01:20.495
So, with this example 4, I've recognized
a pattern that says if this value is here,

29
00:01:20.495 --> 00:01:25.139
I guess you more likely see
this if it's not equal,

30
00:01:25.139 --> 00:01:29.158
equal, null, &amp;&amp; it's not equal equal.

31
00:01:29.158 --> 00:01:33.719
But n is not equal equal undefined and

32
00:01:33.719 --> 00:01:39.470
we'll see this every
day in JavaScript code.

33
00:01:39.470 --> 00:01:43.520
People write this over and
over and over again.

34
00:01:43.520 --> 00:01:44.720
Then we want to do this.

35
00:01:46.550 --> 00:01:52.590
And we're saying like, okay, I know that
there's a pattern that captures this.

36
00:01:52.590 --> 00:01:53.650
I know that's called maybe.

37
00:01:53.650 --> 00:01:59.540
If I have an null check and I want to run
something if it's there, I will use maybe.

38
00:01:59.540 --> 00:02:00.440
Well how do I use maybe?

39
00:02:01.610 --> 00:02:04.030
Well I know I wanna put my value in it.

40
00:02:04.030 --> 00:02:05.160
That's an important part.

41
00:02:05.160 --> 00:02:07.510
Functions don't go to maybes,
values go into maybes.

42
00:02:08.980 --> 00:02:12.054
So if I have a Maybe (2),

43
00:02:12.054 --> 00:02:17.003
then if I can't parseInt the Maybe (2),

44
00:02:17.003 --> 00:02:21.570
I have to map parseInt the Maybe (2).

45
00:02:21.570 --> 00:02:25.980
Then all of put a string and
we're gonna Maybe (2).

46
00:02:27.230 --> 00:02:31.930
So I was just kind of pushed into
this solution because I said

47
00:02:31.930 --> 00:02:35.380
I have to put n in a maybe
because it might not be there.

48
00:02:35.380 --> 00:02:38.980
My value goes in the maybe,
in that container,

49
00:02:38.980 --> 00:02:42.430
and then when I map this function over it,
it checks it.

50
00:02:42.430 --> 00:02:44.560
I realize that the value's
in the container now so

51
00:02:44.560 --> 00:02:47.060
I have to map this function over it.

52
00:02:47.060 --> 00:02:51.848
Now the composition of these two things,
putting it in the maybe then mapping

53
00:02:51.848 --> 00:02:55.090
parseInt over it,
is kind of what we're looking for

54
00:02:55.090 --> 00:02:59.576
to gain a function instead of
just running it immediately.

55
00:02:59.576 --> 00:03:01.775
But you're gonna see
this a lot in your code,

56
00:03:01.775 --> 00:03:04.880
cuz most your code is going to
be making functions like that.

57
00:03:04.880 --> 00:03:07.830
You're not just going to be running things
left and right inside other functions.

58
00:03:07.830 --> 00:03:11.490
You gonna be composing and
combining things into new functions.

59
00:03:11.490 --> 00:03:14.695
All right.

60
00:03:14.695 --> 00:03:20.082
So that was 4.
&gt;&gt; Brian Lonsdorf: All right.

61
00:03:20.082 --> 00:03:21.634
How are we doing?

62
00:03:21.634 --> 00:03:25.353
Was that a better breakdown?
&gt;&gt; Speaker 2: I'll ask.

63
00:03:25.353 --> 00:03:26.554
&gt;&gt; Brian Lonsdorf: Break it down.

64
00:03:26.554 --> 00:03:28.781
&gt;&gt; [SOUND]

65
00:03:28.781 --> 00:03:33.871
&gt;&gt; Brian Lonsdorf: [LAUGH]

66
00:03:36.859 --> 00:03:37.584
&gt;&gt; Speaker 3: [INAUDIBLE] Create

67
00:03:37.584 --> 00:03:39.134
the logging function again.

68
00:03:39.134 --> 00:03:41.577
And I threw a log between
the map pareseInt and maybe and

69
00:03:41.577 --> 00:03:43.534
there was no output.
&gt;&gt; Brian Lonsdorf: Really?

70
00:03:43.534 --> 00:03:45.652
Right here?

71
00:03:45.652 --> 00:03:48.010
Let's do it.

72
00:03:48.010 --> 00:03:49.880
So here's our log function.

73
00:03:49.880 --> 00:03:55.410
I think in other ones I've defined this
for you just to help a little bit.

74
00:03:56.630 --> 00:04:00.940
We'll return to x so
it counts a log and return it.

75
00:04:00.940 --> 00:04:02.130
Now then we log in the middle.

76
00:04:04.630 --> 00:04:06.730
Yeah, this big junk.

77
00:04:06.730 --> 00:04:08.180
What is this thing?

78
00:04:08.180 --> 00:04:12.979
This is the JS Bin specific version
of an output of an object that I've

79
00:04:12.979 --> 00:04:15.642
never seen in any other interpreter.

80
00:04:15.642 --> 00:04:20.597
[LAUGH] But it says our value is 4 and
it's inside this giant object.

81
00:04:20.597 --> 00:04:27.780
So see, if I call toString on
this it'll look a lot nicer.

82
00:04:27.780 --> 00:04:29.127
There it is.

83
00:04:29.127 --> 00:04:31.368
So is it maybe the return x, or?
&gt;&gt; Speaker 3: No,

84
00:04:31.368 --> 00:04:34.291
I got that.
&gt;&gt; Brian Lonsdorf: Do

85
00:04:34.291 --> 00:04:37.757
you make any adjustment?
&gt;&gt; Speaker 3: Sure.

86
00:04:37.757 --> 00:04:38.367
&gt;&gt; Brian Lonsdorf: All right,

87
00:04:38.367 --> 00:04:42.787
let's do it.
&gt;&gt; Brian Lonsdorf: Get this guy.

88
00:04:42.787 --> 00:04:46.535
Okay, what's the letters?
&gt;&gt; Speaker 3: K-U-M-A-Q.

89
00:04:46.535 --> 00:04:48.338
&gt;&gt; Brian Lonsdorf: K-U-M-A-Q.

90
00:04:49.419 --> 00:04:50.502
&gt;&gt; Brian Lonsdorf: Yeah, there it goes.

91
00:04:50.502 --> 00:04:53.831
Fixes it.
It's got some value.

92
00:04:53.831 --> 00:04:56.014
&gt;&gt; Speaker 4: I created a arbitrary

93
00:04:56.014 --> 00:04:58.940
[SOUND]
&gt;&gt; Brian Lonsdorf: Okay, perfect.

94
00:04:58.940 --> 00:05:02.520
So exercise 5 says, so we're gonna log.

95
00:05:02.520 --> 00:05:05.035
Yeah, looks very close,
like exactly what I have.

96
00:05:05.035 --> 00:05:07.360
Let's see.

97
00:05:10.470 --> 00:05:11.929
Exercise 5.

98
00:05:11.929 --> 00:05:12.710
Log.

99
00:05:12.710 --> 00:05:14.338
I'm calling exercise 4.

100
00:05:14.338 --> 00:05:15.546
[LAUGH] Sorry, man.

101
00:05:15.546 --> 00:05:16.196
That's a bummer.

102
00:05:16.196 --> 00:05:17.360
[LAUGH]
&gt;&gt; Speaker 4: That's why you shouldn't

103
00:05:17.360 --> 00:05:19.330
grade exercise five.
&gt;&gt; Brian Lonsdorf: [LAUGH] Actually,

104
00:05:19.330 --> 00:05:21.590
when I was naming these,
I was like these are horrible names.

105
00:05:21.590 --> 00:05:25.480
Every time we rearrange it,
I have to rename every exercise.

