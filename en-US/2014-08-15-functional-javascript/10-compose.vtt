WEBVTT

1
00:00:00.000 --> 00:00:04.436
[MUSIC]

2
00:00:04.436 --> 00:00:06.080
&gt;&gt; Joe Nelson: As if it
wasn't academic enough,

3
00:00:06.080 --> 00:00:11.322
let's go back to weird noun-function land.
&gt;&gt; Joe Nelson: Okay, another

4
00:00:11.322 --> 00:00:17.890
trick that we do aside from carrying,
cuz since we're thinking about functions.

5
00:00:17.890 --> 00:00:20.491
We can think about functions as
just taking points to points and

6
00:00:20.491 --> 00:00:22.022
we don't care what happens inside.

7
00:00:22.022 --> 00:00:25.837
You can meld functions together in
the same way you can add numbers together,

8
00:00:25.837 --> 00:00:27.547
you can meld functions together.

9
00:00:27.547 --> 00:00:32.941
Where, I hesitate to walk
all the way over there,

10
00:00:32.941 --> 00:00:35.800
I'll use my mouse [LAUGH].

11
00:00:35.800 --> 00:00:40.121
So say we have three functions, f, g, h.

12
00:00:40.121 --> 00:00:45.095
The melding is written with a little
circle, it says do f then do g.

13
00:00:45.095 --> 00:00:46.860
What would it mean in terms of the points?

14
00:00:46.860 --> 00:00:49.522
And once we get through this,
we'll see how to use it in real code and

15
00:00:49.522 --> 00:00:50.656
how it makes stuff shorter.

16
00:00:50.656 --> 00:00:54.835
So,
&gt;&gt; Joe Nelson: G circle f is a new

17
00:00:54.835 --> 00:00:59.822
function, that's just what they call it,
they just name g circle f.

18
00:00:59.822 --> 00:01:01.699
And it's built out of f and g.

19
00:01:01.699 --> 00:01:04.248
And the way you find what it does
to the points, cuz remember,

20
00:01:04.248 --> 00:01:06.170
all we care about is what
does it do the points.

21
00:01:06.170 --> 00:01:09.052
We don't need to know what it does inside,
how it's implemented.

22
00:01:09.052 --> 00:01:11.690
We just follow through and just look.

23
00:01:11.690 --> 00:01:14.894
We see this first top thing in A,
if I were to do f,

24
00:01:14.894 --> 00:01:17.333
it would take it to the top thing in B.

25
00:01:17.333 --> 00:01:22.380
And then if I do g, it brings it
down to upper left territory in C.

26
00:01:22.380 --> 00:01:25.402
So when we merge these
functions together and

27
00:01:25.402 --> 00:01:28.343
have just one that does
one after the other,

28
00:01:28.343 --> 00:01:33.686
it should eventually take the top thing in
A and get it down to the upper left in C.

29
00:01:33.686 --> 00:01:37.370
And so that's our definition, yep,
that's where we're gonna send it.

30
00:01:37.370 --> 00:01:41.336
So then we do the same thing, the second
one goes to this middle-y one and

31
00:01:41.336 --> 00:01:44.210
that goes to also that same upper left,
and it does.

32
00:01:45.800 --> 00:01:48.750
And the bottom goes up here,
you just trace it through.

33
00:01:48.750 --> 00:01:50.370
So, cool, this is g circle f.

34
00:01:50.370 --> 00:01:53.630
Well, there's nothing to stop
you from continuing to do this.

35
00:01:53.630 --> 00:01:58.220
So, you think of if we wanted to
eventually meld h onto here too,

36
00:01:58.220 --> 00:01:59.420
we just keep following through.

37
00:01:59.420 --> 00:02:03.340
We say, where did g circle f,
take the top thing in A?

38
00:02:03.340 --> 00:02:08.690
It took it to this thing over there and
then h would take it up to the top.

39
00:02:08.690 --> 00:02:11.270
So when we go all the way through,
we cut out the middleman and

40
00:02:11.270 --> 00:02:12.740
go straight to the top.

41
00:02:12.740 --> 00:02:16.340
That's just the concept, it's following
through where the stuff goes.

42
00:02:16.340 --> 00:02:18.700
And you can make a JavaScript thing
that just follows it through.

43
00:02:18.700 --> 00:02:23.247
And we can start mushing stuff together,
and it's good, so.

44
00:02:23.247 --> 00:02:28.112
An aside, Brian's gonna do some even more
mathematical stuff where when we zoom

45
00:02:28.112 --> 00:02:32.720
out from the code and we've written
things of this kind of pure way.

46
00:02:32.720 --> 00:02:36.270
We start seeing similarities that
compose in much bigger ways than

47
00:02:37.290 --> 00:02:39.450
a lot of things that we're used to.

48
00:02:39.450 --> 00:02:40.927
In this future world,

49
00:02:40.927 --> 00:02:45.460
everything is contained in this
somewhat mathematical interface.

50
00:02:45.460 --> 00:02:49.430
So it's clearer when you use a foreign
library you've never seen before

51
00:02:50.520 --> 00:02:52.834
that it's going to compose and
work with yours.

52
00:02:52.834 --> 00:02:56.810
It gives you standard language because
you recognize it as a category.

53
00:02:56.810 --> 00:03:00.626
Either that or you had n conflicting
standards, and now you have n plus one.

54
00:03:00.626 --> 00:03:05.280
There's different ways to think about it,
I guess but, so that's just an aside.

55
00:03:05.280 --> 00:03:10.410
So we learned how to smash
things together and we also,

56
00:03:10.410 --> 00:03:14.992
so we thought,
how do we combine new functions?

57
00:03:14.992 --> 00:03:19.060
Do one function, do another, push them
together without even giving it a name.

58
00:03:20.690 --> 00:03:24.380
But we, without using this pattern,
without recognizing functions as being

59
00:03:24.380 --> 00:03:27.140
kind of math-y like this,
we tend to do it anyway.

60
00:03:27.140 --> 00:03:31.176
And do it with more names and do it
ad hoc and as the situation needs, so

61
00:03:31.176 --> 00:03:33.136
it uses unnecessary arguments.

62
00:03:33.136 --> 00:03:36.900
So for instance, we use these glue names.

63
00:03:36.900 --> 00:03:39.344
Say we had this situation, and
there's two things going on.

64
00:03:39.344 --> 00:03:43.890
Maybe there's this callback,
you say on error, I wanna do something.

65
00:03:43.890 --> 00:03:46.020
Maybe on error came from some library or
whatever.

66
00:03:46.020 --> 00:03:49.060
And when there is a problem,
call my thing back.

67
00:03:49.060 --> 00:03:50.220
So there's two things.

68
00:03:51.630 --> 00:03:54.240
The message extraction,
you're giving an error here, right.

69
00:03:54.240 --> 00:03:56.760
And you say get the message
off of the error.

70
00:03:56.760 --> 00:03:58.810
That's one concern in a way, pull it off.

71
00:03:58.810 --> 00:04:02.050
And another one is that
impure thing of logging.

72
00:04:03.380 --> 00:04:07.860
And so now, we had to make this whole,
I'd just be like function, error, error.

73
00:04:07.860 --> 00:04:12.410
Error's written three times here,
that just sounds kind of awkward.

74
00:04:12.410 --> 00:04:15.910
So, if we recognize that there's
a general way to combine the stuff,

75
00:04:15.910 --> 00:04:19.750
we don't need to make weird variables to
do it, to string it through like that.

76
00:04:19.750 --> 00:04:22.330
So let's think about how
it would be implemented.

77
00:04:22.330 --> 00:04:24.080
In this ideal world,
because we have currying,

78
00:04:24.080 --> 00:04:28.100
we can think about functions as
only taking one argument at a time.

79
00:04:28.100 --> 00:04:30.770
So compose, this is a simplified compose.

80
00:04:30.770 --> 00:04:34.950
Compose takes two functions,
I wrote it g, f rather than f, g.

81
00:04:34.950 --> 00:04:40.900
Because as we'll see down here,
the convention is that it strings things

82
00:04:40.900 --> 00:04:44.700
through the functions that are given
to compose from the last to the first.

83
00:04:44.700 --> 00:04:47.380
And there's another one that's not called
compose that goes the other way and

84
00:04:47.380 --> 00:04:49.690
it's escaping me, what it's called.

85
00:04:49.690 --> 00:04:51.310
But this one happens a lot.

86
00:04:51.310 --> 00:04:52.690
So how would compose work?

87
00:04:52.690 --> 00:04:55.000
We wanted to mash them together so we do.

88
00:04:55.000 --> 00:04:56.194
We say compose(g,

89
00:04:56.194 --> 00:05:00.419
f) is a new function which mathematically
would be written g circle f.

90
00:05:00.419 --> 00:05:01.797
But here, it just doesn't have a name.

91
00:05:01.797 --> 00:05:04.611
It takes a single value,
it sends it into f.

92
00:05:04.611 --> 00:05:09.380
It takes what f returned and sends it
through g, really simple, which is good.

93
00:05:10.800 --> 00:05:15.190
So here's an example of like a weird
little contrived composition.

94
00:05:15.190 --> 00:05:17.510
Say we had two functions,
one was called proper noun,

95
00:05:17.510 --> 00:05:19.339
the other was called reverse on strings.

96
00:05:20.500 --> 00:05:24.364
Proper noun capitalizes the first
letter and reverse just reverses.

97
00:05:24.364 --> 00:05:27.603
So here's how,
you take compose over here and

98
00:05:27.603 --> 00:05:33.000
you'd give it the single value hello
as it goes in like we wrote before.

99
00:05:33.000 --> 00:05:33.965
It'd be a function,

100
00:05:33.965 --> 00:05:37.088
you could pass another quote unquote
set of arguments to this thing.

101
00:05:37.088 --> 00:05:40.976
I could write take hello, it would send it
through properNoun at which point it would

102
00:05:40.976 --> 00:05:42.140
be Hello with a capital.

103
00:05:42.140 --> 00:05:44.760
And then send it through reverse and
it'd be reversed.

104
00:05:44.760 --> 00:05:48.190
And that's the version that would be
returned at the end of this whole thing.

105
00:05:48.190 --> 00:05:48.930
&gt;&gt; Speaker 2: Pipe is

106
00:05:48.930 --> 00:05:50.960
the reverse of.
&gt;&gt; Joe Nelson: What's it

107
00:05:50.960 --> 00:05:52.160
called?
&gt;&gt; Speaker 2: Pipe.

108
00:05:52.160 --> 00:05:52.770
&gt;&gt; Joe Nelson: Pipe.

109
00:05:52.770 --> 00:05:53.296
&gt;&gt; Speaker 2: Yeah.

110
00:05:53.296 --> 00:05:53.796
&gt;&gt; Joe Nelson: Nice.

111
00:05:53.796 --> 00:05:54.309
&gt;&gt; Speaker 3: Yeah,

112
00:05:54.309 --> 00:05:58.460
I think that's good to note.
If you know Unix pipes or

113
00:05:58.460 --> 00:06:02.310
it's just the flipped version, or
go right to left instead of left to right.

114
00:06:04.180 --> 00:06:06.500
Because the argument comes into the right.
&gt;&gt; Joe Nelson: [LAUGH] Yeah.

