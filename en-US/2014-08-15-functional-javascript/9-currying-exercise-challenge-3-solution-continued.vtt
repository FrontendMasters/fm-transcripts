WEBVTT

1
00:00:00.000 --> 00:00:04.550
[MUSIC]

2
00:00:04.550 --> 00:00:07.685
&gt;&gt; Speaker 2: I think we're just taking
our accumulator and our element.

3
00:00:10.413 --> 00:00:12.066
&gt;&gt; Speaker 2: I just want to concat them.

4
00:00:12.066 --> 00:00:15.914
&gt;&gt; Joe Nelson: I see, so we say acc,
actually we used the to concat,

5
00:00:15.914 --> 00:00:16.809
it just goes.

6
00:00:16.809 --> 00:00:20.049
ACC with the function
applied to the elements, so

7
00:00:20.049 --> 00:00:22.991
the changed element
because we are mapping.

8
00:00:22.991 --> 00:00:23.715
&gt;&gt; Speaker 2: That's right.

9
00:00:23.715 --> 00:00:25.050
&gt;&gt; Joe Nelson: I got to return I guess.

10
00:00:26.330 --> 00:00:30.590
So reduce, my tab is broken,

11
00:00:32.070 --> 00:00:35.200
list, wait a second we got to
get the real list in here,

12
00:00:35.200 --> 00:00:38.246
so reduce takes, yes, the initial value.

13
00:00:38.246 --> 00:00:39.323
&gt;&gt; Speaker 2: That'll do it.

14
00:00:39.323 --> 00:00:42.060
&gt;&gt; Joe Nelson: Yea, that'll do it,
I was thinking all like currying and

15
00:00:42.060 --> 00:00:43.850
not passing but it has to do it.

16
00:00:43.850 --> 00:00:45.688
Okay, let's join it up and try it out.

17
00:00:45.688 --> 00:00:47.621
That's pretty.

18
00:00:47.621 --> 00:00:49.710
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Joe Nelson: I guess, you know what?

19
00:00:49.710 --> 00:00:55.450
I can paste it into the other side, I'm
going to have to put it in the console.

20
00:00:55.450 --> 00:00:57.870
I could paste it in here,
I could have done that all along.

21
00:00:57.870 --> 00:01:02.370
Real smart, okay.

22
00:01:02.370 --> 00:01:04.770
&gt;&gt; Speaker 2: You could actually
paste it in the JavaScript, wait,

23
00:01:04.770 --> 00:01:06.595
no you can't because you don't have curry.

24
00:01:12.114 --> 00:01:14.316
&gt;&gt; Speaker 2: You didn't close the paren,
down at the very bottom.

25
00:01:14.316 --> 00:01:17.078
&gt;&gt; Joe Nelson: Wait, nope.

26
00:01:23.347 --> 00:01:28.922
&gt;&gt; Joe Nelson: Okay, newmap takes this

27
00:01:28.922 --> 00:01:33.703
function, add one.

28
00:01:33.703 --> 00:01:35.816
Let's cross our fingers.

29
00:01:35.816 --> 00:01:38.672
&gt;&gt; Speaker 2: I'm trying
to find another function.

30
00:01:38.672 --> 00:01:39.844
Add one gets.

31
00:01:45.348 --> 00:01:46.242
&gt;&gt; Speaker 2: That looks good.

32
00:01:53.219 --> 00:01:54.645
&gt;&gt; Speaker 2: So do we have any idea?

33
00:01:54.645 --> 00:01:55.149
&gt;&gt; Joe Nelson: I don't know.

34
00:01:55.149 --> 00:02:03.040
&gt;&gt; Speaker 2: [LAUGH] So
we're going to give modified.

35
00:02:03.040 --> 00:02:05.130
&gt;&gt; Joe Nelson: And
a lot of coding before noon.

36
00:02:05.130 --> 00:02:08.655
&gt;&gt; Speaker 2: Check out new map,
make sure new map's a function.

37
00:02:08.655 --> 00:02:13.243
[LAUGH]
&gt;&gt; Joe Nelson: Yeah.

38
00:02:19.675 --> 00:02:23.472
&gt;&gt; Speaker 2: So that's cool,
let's go through it.

39
00:02:23.472 --> 00:02:25.829
&gt;&gt; Speaker 3: Brian,
there's a question for you in chat.

40
00:02:30.786 --> 00:02:35.220
&gt;&gt; Speaker 2: It's not stack
tracing this thing either.

41
00:02:35.220 --> 00:02:36.520
&gt;&gt; Joe Nelson: Yes, I don't know how far-
&gt;&gt; Speaker 3: You could

42
00:02:36.520 --> 00:02:40.630
always fix it during the break and-
&gt;&gt; Joe Nelson: Yeah,

43
00:02:40.630 --> 00:02:42.238
that sounds about good.

44
00:02:42.238 --> 00:02:42.969
Because what was our goal?

45
00:02:42.969 --> 00:02:43.580
&gt;&gt; Speaker 3: That didn't go through.

46
00:02:43.580 --> 00:02:46.930
The goal was to explain
a reduce at a lower level.

47
00:02:46.930 --> 00:02:51.693
&gt;&gt; Joe Nelson: Yes, and hopefully-
&gt;&gt; Speaker 3: I think that mostly covers

48
00:02:51.693 --> 00:02:52.310
it.

49
00:02:52.310 --> 00:02:54.330
&gt;&gt; Speaker 2: Looking up underscore and

50
00:02:54.330 --> 00:02:58.000
then producing an example of
just kind of doing a sum.

51
00:02:58.000 --> 00:02:59.280
&gt;&gt; Joe Nelson: Nice.

52
00:02:59.280 --> 00:03:00.260
&gt;&gt; Speaker 2: Sum of an array,

53
00:03:00.260 --> 00:03:04.780
and they actually do a array of arrays,
and reducing it down to a single array.

54
00:03:04.780 --> 00:03:07.950
I think that kind of makes sense.

55
00:03:07.950 --> 00:03:12.380
I'm curious though, with all
the currying and all that kind of stuff,

56
00:03:12.380 --> 00:03:17.100
what you were talking about with
underscore, it starts the list.

57
00:03:17.100 --> 00:03:20.838
And you're saying ramda and
all these other ones want to start with

58
00:03:20.838 --> 00:03:25.389
the iterator first and then the memo and
then the list, so it's just in order of.

59
00:03:28.698 --> 00:03:30.935
&gt;&gt; Joe Nelson: Yes,
certainly the function you want to do.

60
00:03:30.935 --> 00:03:34.281
&gt;&gt; Speaker 2: Yes, because you don't have
ahold of the list when you're building

61
00:03:34.281 --> 00:03:37.915
your app, like the list isn't there yet,
but you do have your function and

62
00:03:37.915 --> 00:03:38.620
your c value.

63
00:03:41.720 --> 00:03:44.126
&gt;&gt; Joe Nelson: Okay, yes, we can fix this
over the break, that's not a problem.

64
00:03:44.126 --> 00:03:46.650
&gt;&gt; Speaker 3: Nathan
says underscore.concat.

65
00:03:46.650 --> 00:03:49.981
That's where you fit the-
[LAUGH] that's where it-

66
00:03:53.476 --> 00:03:56.591
&gt;&gt; Speaker 2: He changed his mind.

67
00:03:56.591 --> 00:03:57.858
&gt;&gt; Speaker 3: Nevermind.

68
00:03:57.858 --> 00:03:59.897
&gt;&gt; Speaker 2: He's having
trouble with ramda.

69
00:03:59.897 --> 00:04:03.670
&gt;&gt; Speaker 3: Well that's fine,
let's just run twice if it's not loading.

70
00:04:03.670 --> 00:04:05.918
&gt;&gt; Joe Nelson: Run it twice?
&gt;&gt; Speaker 2: Or, ramda, I mean.

71
00:04:05.918 --> 00:04:09.837
&gt;&gt; Joe Nelson: Hang on.

72
00:04:09.837 --> 00:04:12.700
&gt;&gt; Speaker 3: You guys want to move on or?

73
00:04:12.700 --> 00:04:17.050
&gt;&gt; Joe Nelson: Yes, we could do a simple
reduce example or move on, fix it.

74
00:04:17.050 --> 00:04:20.780
So we're trying to figure
out what does reduce do?

75
00:04:20.780 --> 00:04:25.580
And we thought this'll be kind of easy,
we can make one that does some list stuff.

76
00:04:25.580 --> 00:04:28.540
But it was a little more complicated, and
hopefully this helps to explain things or

77
00:04:28.540 --> 00:04:31.870
we can do some simpler reduce stuff too.

78
00:04:31.870 --> 00:04:33.960
We've got, here's our new map.

79
00:04:33.960 --> 00:04:37.590
New map is just supposed to do what a map
does and when I run it over here it does,

80
00:04:37.590 --> 00:04:41.570
so I say add 1 to 1,2,3 and we get 2,3,4.

81
00:04:41.570 --> 00:04:42.630
So that's good.

82
00:04:42.630 --> 00:04:46.360
What is it doing, how is it
implementing map in terms of reduce?

83
00:04:48.060 --> 00:04:52.240
All right, crucial line, this doesn't have
the lines enabled but there's not many,

84
00:04:52.240 --> 00:04:57.780
is reduce our concat list
starting with an empty list and

85
00:04:57.780 --> 00:05:01.080
then working off of the input that
was passed into the whole thing.

86
00:05:02.570 --> 00:05:05.300
So because it's really just
an implementation of map,

87
00:05:05.300 --> 00:05:08.490
it takes the function of what it
does to each thing in the list, and

88
00:05:08.490 --> 00:05:10.530
the list it does it to, called list.

89
00:05:13.350 --> 00:05:19.160
So, the real magic, I guess,
is how do you combine the list so far?

90
00:05:19.160 --> 00:05:21.700
Map always says,
how do I combine the things so

91
00:05:21.700 --> 00:05:26.040
far, with the new thing
with a way of combining it?

92
00:05:26.040 --> 00:05:30.640
So the way of combining it is concatList.

93
00:05:30.640 --> 00:05:34.546
It takes the stuff so far,
often called the accumulator, and

94
00:05:34.546 --> 00:05:37.640
a new thing like one element
that was given to it.

95
00:05:37.640 --> 00:05:40.896
The next thing in the original list,
and what does it do?

96
00:05:40.896 --> 00:05:46.020
It takes the things so far, and
this is just standard JavaScript, and

97
00:05:46.020 --> 00:05:49.540
concatenates an array because
concat puts arrays together.

98
00:05:49.540 --> 00:05:55.280
I hesitated to use push for the reasons we
discussed before, because push is impure,

99
00:05:55.280 --> 00:05:59.120
and because when you push on an array it
doesn't return the array in progress.

100
00:05:59.120 --> 00:06:01.700
It modifies some array and
gives you like what you pushed on.

101
00:06:01.700 --> 00:06:07.330
So we take the accumulator, what we have
so far, and we add a new array onto it.

102
00:06:07.330 --> 00:06:10.260
It's kind of cheap little array,
it's just an array of one thing.

103
00:06:10.260 --> 00:06:14.250
It's the function passed in applied to
the new element that is coming through.

104
00:06:14.250 --> 00:06:19.250
So concatList is an example of the type

105
00:06:19.250 --> 00:06:23.910
of thing that you'd give to reduce,
to tell it how to combine new and old.

106
00:06:23.910 --> 00:06:26.649
So that's of the essence of
reduce is building up a snowball.

107
00:06:30.179 --> 00:06:34.670
&gt;&gt; Joe Nelson: So,
this is now in this guy.

108
00:06:34.670 --> 00:06:39.860
I don't have the chat on the same
computer that I have the display on.

109
00:06:39.860 --> 00:06:44.991
So, if someone else could paste
it in there or whatever, G-U-V-O.

110
00:06:48.253 --> 00:06:49.250
&gt;&gt; Joe Nelson: And
you could play with that.

111
00:06:52.460 --> 00:06:55.720
In a way, I hesitate to spend
a whole lot more time on reduced,

112
00:06:55.720 --> 00:06:58.470
because of the three,
it's the one I think I use the least.

113
00:06:58.470 --> 00:07:03.543
And Brian has a lot of brain melting
stuff I want to get us to, so.

114
00:07:07.786 --> 00:07:08.640
&gt;&gt; Joe Nelson: Yeah, concat.

115
00:07:13.786 --> 00:07:15.550
&gt;&gt; Joe Nelson: Does concat
maybe not require there?

116
00:07:15.550 --> 00:07:18.196
I haven't tried that.

117
00:07:27.077 --> 00:07:29.425
&gt;&gt; Speaker 2: That's
going to haunt us today.

118
00:07:29.425 --> 00:07:30.516
[LAUGH]
&gt;&gt; Joe Nelson: Yes.

119
00:07:38.004 --> 00:07:41.227
&gt;&gt; Joe Nelson: Okay, so the standard
JavaScript one does not require if it sees

120
00:07:41.227 --> 00:07:44.280
a nom and it's not in the right,
it just pushes it off.

121
00:07:44.280 --> 00:07:47.010
&gt;&gt; Speaker 3: Somebody asked earlier

122
00:07:47.010 --> 00:07:50.006
how to explain reduce in
less than 140 characters.

123
00:07:50.006 --> 00:07:53.170
&gt;&gt; Joe Nelson: [LAUGH]
&gt;&gt; Speaker 3: But the idea

124
00:07:53.170 --> 00:07:57.680
of the catamorphism is that you have
an accumulator, it's an incursion pattern

125
00:07:57.680 --> 00:08:02.830
captured where it passes an accumulator
along with each element in the list.

126
00:08:02.830 --> 00:08:05.330
And you can do that,
you can do reduce that way,

127
00:08:05.330 --> 00:08:08.050
you can do map that way,
you can make sorts.

128
00:08:08.050 --> 00:08:10.484
You can do all sorts of stuff
with the catamorphisms.

129
00:08:10.484 --> 00:08:15.312
It's kind of like the mother of
recursion patterns captured in a high

130
00:08:15.312 --> 00:08:17.500
order function, or pattern.

131
00:08:17.500 --> 00:08:20.120
So reduce kind of captures the recursion.

132
00:08:20.120 --> 00:08:21.750
If anybody gets all like,

133
00:08:21.750 --> 00:08:25.440
you don't have tail recursion optimization
in JavaScript so you can't do this.

134
00:08:25.440 --> 00:08:26.800
Well it's, I mean it's just a pattern,

135
00:08:26.800 --> 00:08:30.310
you shouldn't really be doing recursion
explicitly these days anyway.

136
00:08:30.310 --> 00:08:33.276
They're already captured
higher order functions.

137
00:08:33.276 --> 00:08:37.900
Jeremy Givens has great paper called
Origami Programming, that kind

138
00:08:37.900 --> 00:08:42.929
of takes a stab at saying, stop doing
recursion and just bake it into patterns.

139
00:08:44.250 --> 00:08:44.890
Anyway, sorry.

140
00:08:44.890 --> 00:08:47.610
&gt;&gt; Joe Nelson: Yes, generally it
feels like when we're separating and

141
00:08:47.610 --> 00:08:50.443
recognizing, the same way you
don't want to write loops,

142
00:08:50.443 --> 00:08:53.290
raw recursion feels like
the functional version of loops.

143
00:08:53.290 --> 00:08:54.582
&gt;&gt; Speaker 3: Yes.
&gt;&gt; Joe Nelson: You have things that will

144
00:08:54.582 --> 00:08:55.357
just do it for you.

145
00:08:59.397 --> 00:09:02.529
&gt;&gt; Joe Nelson: So, I could just do one
more reduce right here, reduce add.

146
00:09:02.529 --> 00:09:09.280
I think we'd like some stuff up, but
I need also to give it a zero, maybe.

147
00:09:10.890 --> 00:09:14.886
So if I apply this thing,
I don't even have to name these things.

148
00:09:14.886 --> 00:09:17.156
1,2,3, do I get six?

149
00:09:17.156 --> 00:09:17.811
Actually.

150
00:09:21.735 --> 00:09:25.840
&gt;&gt; Joe Nelson: Yes, so reduce,
first thing, how do I combine stuff?

151
00:09:25.840 --> 00:09:28.180
Second thing, where do I start from?

152
00:09:28.180 --> 00:09:32.950
Because initially, you don't have
anything, and then the thing you pass in.

153
00:09:32.950 --> 00:09:35.800
So that's the essence of it,
just play with it.

154
00:09:35.800 --> 00:09:37.430
Like I said,
I don't tend to use it that much.

155
00:09:37.430 --> 00:09:39.132
Maybe Brian uses it more than I do.

156
00:09:39.132 --> 00:09:40.190
[LAUGH]
&gt;&gt; Speaker 4: Now,

157
00:09:40.190 --> 00:09:41.640
you have two parameter lists.

158
00:09:41.640 --> 00:09:43.230
Is that allowed in JavaScript?

159
00:09:43.230 --> 00:09:46.120
&gt;&gt; Joe Nelson: Is what?
&gt;&gt; Speaker 4: Two, you have the reduce

160
00:09:46.120 --> 00:09:49.568
with one parameter, and
then the array in a second parameter list.

161
00:09:49.568 --> 00:09:50.415
&gt;&gt; Joe Nelson: Yes.

162
00:09:50.415 --> 00:09:53.280
Here, this is the magic of curry.

163
00:09:53.280 --> 00:09:55.247
Curry is coming back-
&gt;&gt; [LAUGH]

164
00:09:55.247 --> 00:09:56.307
&gt;&gt; Joe Nelson: So, I said reduce

165
00:09:56.307 --> 00:09:57.090
two things.

166
00:09:57.090 --> 00:10:01.180
Reduce takes more than two things, but
it's secretly been curried by ramda.

167
00:10:01.180 --> 00:10:03.440
The underscore means it comes from ramda.

168
00:10:03.440 --> 00:10:06.270
Which means when I give it
fewer things that it expects,

169
00:10:06.270 --> 00:10:08.420
it's giving me back a new function.

170
00:10:08.420 --> 00:10:12.160
And to that new unnamed function,
I'm passing the array.

171
00:10:13.580 --> 00:10:18.060
&gt;&gt; Speaker 3: Hey, Joe, there was
a question, maybe you guys will get to it.

172
00:10:18.060 --> 00:10:19.790
It's kind of general.

173
00:10:19.790 --> 00:10:24.090
Mims is saying,
all of this is very academic and cool,

174
00:10:24.090 --> 00:10:27.300
but how am I going to use this for
real world applications?

175
00:10:27.300 --> 00:10:29.670
&gt;&gt; Joe Nelson: [LAUGH] Don't you worry.

176
00:10:29.670 --> 00:10:34.480
We're going to have to have examples
where- Because actually one point of this

177
00:10:34.480 --> 00:10:38.946
is, these functions are super pure and
academic and stuff, but in Part Two,

178
00:10:38.946 --> 00:10:43.040
the Voyage, they're going to be pulled
into the browser, downloading stuff,

179
00:10:43.040 --> 00:10:44.090
doing stuff.

180
00:10:44.090 --> 00:10:47.433
Our final demo is going to be
an actual search engine that finds

181
00:10:47.433 --> 00:10:49.700
YouTube videos and plays them and stuff.

182
00:10:49.700 --> 00:10:52.506
So, like it's never fear.

183
00:10:52.506 --> 00:10:57.850
&gt;&gt; Speaker 2: Well, in any case,
if you're making a four loop and

184
00:10:57.850 --> 00:11:00.730
starting off with an initial value,
there's always bits and

185
00:11:00.730 --> 00:11:05.460
pieces lying everywhere and
explicit imperative line steps of code.

186
00:11:05.460 --> 00:11:10.160
This is a declarative way to just say,
I don't care how you do it, just do it.

187
00:11:10.160 --> 00:11:12.360
&gt;&gt; Joe Nelson: And plus go to.

188
00:11:12.360 --> 00:11:13.670
I like it, it's kind of academic.

189
00:11:13.670 --> 00:11:17.280
I like my go to,
don't be academic about it.

190
00:11:17.280 --> 00:11:19.770
&gt;&gt; Speaker 2: [LAUGH].

191
00:11:19.770 --> 00:11:22.300
&gt;&gt; Joe Nelson: Okay, let's keep on going.

192
00:11:24.866 --> 00:11:26.096
&gt;&gt; Joe Nelson: That's a good example,
lots of stuff going on.

193
00:11:26.096 --> 00:11:30.975
&gt;&gt; Speaker 2: Sorry if I'm- tell
me if I'm just talking too much.

194
00:11:30.975 --> 00:11:32.699
[LAUGH]
&gt;&gt; Joe Nelson: No, it's good stuff.

195
00:11:32.699 --> 00:11:34.810
You'll get your chance to talk too,
you'll talk a lot.

196
00:11:34.810 --> 00:11:36.887
So here we go, currying.

197
00:11:36.887 --> 00:11:40.432
We used it, and we also kind of used
some of those basic functions too.

198
00:11:47.062 --> 00:11:50.115
&gt;&gt; Joe Nelson: It's kind of lagging.

199
00:11:50.115 --> 00:11:52.088
So to kind of recap some of the things we

200
00:11:52.088 --> 00:11:57.361
did,
&gt;&gt; Joe Nelson: Rather than having to make

201
00:11:57.361 --> 00:12:02.335
a function like this it says, words,
I take a string, and I do this stuff.

202
00:12:02.335 --> 00:12:05.820
And there's a return or there's
a function, it's just a lot to write.

203
00:12:05.820 --> 00:12:08.530
You say, words, it's split with space.

204
00:12:10.250 --> 00:12:12.320
Same result on either case, shorter.

205
00:12:15.220 --> 00:12:16.300
Once again, here's another one.

206
00:12:17.800 --> 00:12:24.420
So you could say, max,
reduce with greater negative infinity xs.

207
00:12:24.420 --> 00:12:27.650
So once again, there's a function and
there's a return.

208
00:12:27.650 --> 00:12:34.000
I guess that's especially silly, but yes.

209
00:12:34.000 --> 00:12:38.680
Or just it's that, it's reduced by what's
greater starting at the smallest number.

