WEBVTT

1
00:00:00.000 --> 00:00:04.465
[MUSIC]

2
00:00:04.465 --> 00:00:07.784
&gt;&gt; Joe Nelson: The first bit of
the silence is to omit needless names and

3
00:00:07.784 --> 00:00:12.444
the way we're going to do that is, like
I said, is through the separations and

4
00:00:12.444 --> 00:00:13.450
recognitions.

5
00:00:15.940 --> 00:00:20.120
So this is maybe a little small, I can
zoom in at time, so we can see it but

6
00:00:20.120 --> 00:00:22.750
this is an example of
the first type of separation.

7
00:00:22.750 --> 00:00:24.260
You'll be seeing these a lot.

8
00:00:24.260 --> 00:00:29.120
So the first separation we can do is to
think to ourselves we have functions and

9
00:00:29.120 --> 00:00:31.940
we would like to separate the things
the function is acting on.

10
00:00:31.940 --> 00:00:34.930
Its inputs from just random
things in the environment,

11
00:00:34.930 --> 00:00:38.055
like if your function wants to,
you can go ask for things.

12
00:00:38.055 --> 00:00:41.783
It can just go out there and
from the signature, from the arguments,

13
00:00:41.783 --> 00:00:43.980
it's not really apparent what it uses.

14
00:00:43.980 --> 00:00:49.310
It would be really cool if as we'll see
what it uses is it because it is explicit.

15
00:00:49.310 --> 00:00:54.300
So here we have two functions,
the one on the left is days, this month.

16
00:00:54.300 --> 00:00:58.210
So it does some day calculations, it
just tells you how many days in a month.

17
00:00:58.210 --> 00:00:59.480
But it has a secret input,

18
00:00:59.480 --> 00:01:03.470
which is time itself, which is kind
of weird way to think about it.

19
00:01:03.470 --> 00:01:06.630
Like if you varies like Ruby libraries
they have a thing called timecops.

20
00:01:06.630 --> 00:01:10.300
So if you wanna write a test to make that
test reproducible on a function that

21
00:01:10.300 --> 00:01:10.920
works with time.

22
00:01:10.920 --> 00:01:15.100
You have to like fake out the system
timer, just kidding, it's a year ago.

23
00:01:15.100 --> 00:01:17.550
I run my code, I hope it works.

24
00:01:17.550 --> 00:01:18.160
Instead of making it really explicit,

25
00:01:18.160 --> 00:01:19.180
like this one on the right always
works the same days in the month.

26
00:01:23.560 --> 00:01:27.290
Because you just give it
the year in the month.

27
00:01:27.290 --> 00:01:30.706
So this is our first going to be
our first coding experience, so

28
00:01:30.706 --> 00:01:32.452
you don't have to listen to me.

29
00:01:32.452 --> 00:01:37.570
We can go to jsbin/yoyip and
when you first go there

30
00:01:37.570 --> 00:01:43.190
don't worry it's going
to be totally blank.

31
00:01:43.190 --> 00:01:45.400
But it's all right that's
just the way it works.

32
00:01:45.400 --> 00:01:49.370
So I'm going to make this the smaller,
like close my mail and stuff.

33
00:01:49.370 --> 00:01:55.490
So here's how it looks blank scary but

34
00:01:55.490 --> 00:01:59.980
if you hover over the upper right,
it says Edit, see Edit in JS Bin.

35
00:01:59.980 --> 00:02:04.875
Now JS Bin has a lot of things we can look
at but for the purposes of what we're

36
00:02:04.875 --> 00:02:09.178
doing, we should just be seeing
the JavaScript and the Console.

37
00:02:15.149 --> 00:02:16.310
&gt;&gt; Joe Nelson: It's kind
of wrapping a little bit,

38
00:02:16.310 --> 00:02:18.690
I'll zoom in a little later
after I read the comments.

39
00:02:18.690 --> 00:02:23.530
So there's some tests in this file and
when you press the Run button,

40
00:02:23.530 --> 00:02:26.730
it's actually going to say
the tests are passing.

41
00:02:26.730 --> 00:02:30.730
But that's just because this test is
going to ask you to uncomment a line and

42
00:02:30.730 --> 00:02:34.630
when uncomment it as you'll see,
it's going to break.

43
00:02:34.630 --> 00:02:36.730
So just the gist of it and
then I'll let you read it.

44
00:02:37.910 --> 00:02:40.660
Is that we want to try
showing how a function,

45
00:02:40.660 --> 00:02:46.170
which very clearly separates its
inputs and acts, like reliably,

46
00:02:46.170 --> 00:02:51.150
on those inputs is really easy to
test compared to one that doesn't.

47
00:02:51.150 --> 00:02:56.700
So we have it in the file right now is
a way to test that days this month thing,

48
00:02:56.700 --> 00:02:59.540
so this code as normally as it is.

49
00:02:59.540 --> 00:03:02.089
I think the point of this
exercise is just to look at how

50
00:03:02.089 --> 00:03:05.960
we're testing the complicated one,
they're like we don't have to that.

51
00:03:05.960 --> 00:03:10.560
So it'll be your job to write the test for
the nice one,

52
00:03:12.090 --> 00:03:16.460
which is days in month at the bottom
of the file, so here's the structure.

53
00:03:16.460 --> 00:03:19.011
The top kind of gives you
an overview of what's going on.

54
00:03:21.574 --> 00:03:23.376
&gt;&gt; Joe Nelson: And
then there's something you have to do,

55
00:03:23.376 --> 00:03:26.550
and then there's background code and
you can look at it if you like as needed.

56
00:03:26.550 --> 00:03:32.700
Some of it's just boilerplate that's going
to make the stuff run, so give it a try.

57
00:03:32.700 --> 00:03:35.640
Try and read through the file and
just shout out any questions.

58
00:03:40.280 --> 00:03:43.906
&gt;&gt; Speaker 2: Adam is asking
what you do with the code.

59
00:03:43.906 --> 00:03:47.419
&gt;&gt; Speaker 3: There's a line down
the console right in the middle.

60
00:03:47.419 --> 00:03:50.672
Yeah, right in the middle
it says insert equal and

61
00:03:50.672 --> 00:03:53.619
it's pointing it out it's alt.testpass.

62
00:03:53.619 --> 00:03:56.311
Just to play around with that thing.

63
00:03:56.311 --> 00:03:59.893
&gt;&gt; Speaker 2: It's really just to get a
feel for JS then and play around with it.

64
00:03:59.893 --> 00:04:02.120
&gt;&gt; Joe Nelson: Yeah, that's mostly,
we're gonna be using this thing again.

65
00:04:02.120 --> 00:04:03.664
Some of the new exercises or

66
00:04:03.664 --> 00:04:07.102
the later exercises will be more
involved with test or fail.

67
00:04:07.102 --> 00:04:09.578
But this one is this line here,

68
00:04:09.578 --> 00:04:13.880
assert equal days in month equals,
we take this out.

69
00:04:16.646 --> 00:04:21.026
&gt;&gt; Joe Nelson: And the point is just to
fill these values in so that it passes.

70
00:04:21.026 --> 00:04:26.092
I mean ultimately it's just to say
the way we would test daysInMonth is as

71
00:04:26.092 --> 00:04:31.009
easy as saying assert that a certain
month and year is a certain value.

72
00:04:32.170 --> 00:04:34.558
We don't have to, like,
mock things the way we did above.

73
00:04:34.558 --> 00:04:41.410
&gt;&gt; Speaker 2: So,
if I assert 2014 March 31.

74
00:04:41.410 --> 00:04:45.550
Says, UNCOD expected 30.95 then
a whole bunch of numbers to equal 31,

75
00:04:45.550 --> 00:04:47.500
that's not rounding?

76
00:04:47.500 --> 00:04:50.770
&gt;&gt; Joe Nelson: So my own limitations,
there will be extra credit to fix that.

77
00:04:50.770 --> 00:04:52.706
But we could just pick
a different month I guess.

78
00:04:58.682 --> 00:05:01.120
&gt;&gt; Speaker 4: Which
assertion library is this?

79
00:05:02.367 --> 00:05:05.355
Just curious.
&gt;&gt; Speaker 2: Yeah, we're just really,

80
00:05:05.355 --> 00:05:07.166
stupid, simple.

81
00:05:07.166 --> 00:05:10.101
[CROSSTALK] It's my one function library.

82
00:05:10.101 --> 00:05:11.756
[LAUGH]
&gt;&gt; Speaker 3: There we go.

83
00:05:11.756 --> 00:05:12.338
&gt;&gt; Joe Nelson: It's called one search.

84
00:05:12.338 --> 00:05:14.598
&gt;&gt; Speaker 4: I'm good.

85
00:05:14.598 --> 00:05:15.730
&gt;&gt; Joe Nelson: Yeah.

86
00:05:15.730 --> 00:05:17.360
&gt;&gt; Speaker 4: So it's all it's
all everything that we're running

87
00:05:17.360 --> 00:05:18.700
is in this box.

88
00:05:18.700 --> 00:05:20.460
&gt;&gt; Joe Nelson: Pretty much except for
the stuff.

89
00:05:20.460 --> 00:05:24.225
Wait maybe maybe this one but another
ones who are going to put some libraries.

90
00:05:24.225 --> 00:05:29.670
&gt;&gt; Speaker 2: Requires that
you'll see a couple little.

91
00:05:29.670 --> 00:05:32.570
&gt;&gt; Joe Nelson: Ok this one's pretty basic.

92
00:05:32.570 --> 00:05:36.090
&gt;&gt; Speaker 4: So there's nothing
hidden other than what we see here.

93
00:05:36.090 --> 00:05:38.600
There's an HTML, the JavaScript.

94
00:05:38.600 --> 00:05:41.830
&gt;&gt; Joe Nelson: Yeah,
later ones will include other libraries

95
00:05:41.830 --> 00:05:45.690
using if you open the HTML you'll see I'm
just pulling in the screen kind of just

96
00:05:48.070 --> 00:05:52.490
how is everybody feeling
in the room about this one.

97
00:05:52.490 --> 00:05:56.500
&gt;&gt; Speaker 3: Do you guys understand Js
has been enough to like play around with

98
00:05:56.500 --> 00:05:59.331
it on is there something
we get from anybody?

99
00:06:01.757 --> 00:06:03.657
&gt;&gt; Joe Nelson: I guess if you tell
the point were you run it and

100
00:06:03.657 --> 00:06:07.107
you're getting some kind of air because
you're feeling something at least it's

101
00:06:07.107 --> 00:06:12.242
like yeah I kind of feel a lot
of feel stuff and [INAUDIBLE]

102
00:06:12.242 --> 00:06:14.360
Okay.

103
00:06:16.576 --> 00:06:21.202
&gt;&gt; Joe Nelson: Okay.

104
00:06:21.202 --> 00:06:25.710
[INAUDIBLE]
Okay, so

105
00:06:25.710 --> 00:06:27.110
that's the first kind of separation.

106
00:06:27.110 --> 00:06:27.709
There's gonna be a lot more.

107
00:06:29.660 --> 00:06:31.550
&gt;&gt; Speaker 2: Did you want to
walk through the solution?

108
00:06:31.550 --> 00:06:32.582
&gt;&gt; Joe Nelson: Yeah.
That's a good idea.

109
00:06:32.582 --> 00:06:36.360
&gt;&gt; [BLANK AUDIO].

110
00:06:36.360 --> 00:06:39.722
&gt;&gt; Joe Nelson: So my solution,
for the way I was thinking of it,

111
00:06:39.722 --> 00:06:44.490
was in order to test this thing,
we have to fill in some kind of value.

112
00:06:44.490 --> 00:06:47.210
So 2014, Let's not use the one that
made it round inappropriately.

113
00:06:47.210 --> 00:06:48.250
&gt;&gt; Speaker 2: [LAUGH]
One instead of three.

114
00:06:49.920 --> 00:06:52.830
&gt;&gt; Joe Nelson: If you like one
like thirty days had September, so

115
00:06:52.830 --> 00:06:57.350
it's 31 to be much easier for
the patient to take that stuff.

116
00:06:57.350 --> 00:07:01.910
&gt;&gt; Speaker 2: in a mile an hour
with a line calling from A to B.

117
00:07:03.930 --> 00:07:12.720
&gt;&gt; Joe Nelson: So, it's fast it's just
make sure the tests are 29 take of.

118
00:07:12.720 --> 00:07:17.070
So to test things that make that
behavior predictably arguments

119
00:07:17.070 --> 00:07:19.030
you just pass arguments of your choice.

120
00:07:19.030 --> 00:07:21.250
To test things that have secret inputs,

121
00:07:21.250 --> 00:07:23.670
you have to mark out
the secret inputs in some way.

122
00:07:23.670 --> 00:07:27.230
So you can like know what's happening
inside function to a greater degree.

123
00:07:29.560 --> 00:07:33.060
&gt;&gt; Speaker 2: It's also worth it to
mention that this one's probably way more

124
00:07:33.060 --> 00:07:37.750
likely to work both on the server and the
client and other JavaScript environments.

125
00:07:37.750 --> 00:07:42.230
Rather than one rooted in specific
secret input environment.

126
00:07:42.230 --> 00:07:43.990
&gt;&gt; Joe Nelson: Yeah absolutely.

127
00:07:43.990 --> 00:07:49.374
&gt;&gt; Speaker 2: There's a request for
you to speak up a little bit

128
00:07:49.374 --> 00:07:55.370
from you know [INAUDIBLE]
&gt;&gt; Joe Nelson: Yeah as Brian was saying.

129
00:07:55.370 --> 00:07:59.950
If you make your inputs more explicit
not only is it easier to test.

130
00:07:59.950 --> 00:08:03.790
But as the next few slides will show you
there are other benefits such as it's more

131
00:08:03.790 --> 00:08:06.040
likely to run in other places.

132
00:08:06.040 --> 00:08:08.730
So you can share your code
easier between the server and

133
00:08:08.730 --> 00:08:11.930
the client To the extent
that you can even if

134
00:08:11.930 --> 00:08:15.150
you're trying to use like a location
in the window or you just got a lock.

135
00:08:15.150 --> 00:08:16.270
You just don't have it but for

136
00:08:16.270 --> 00:08:19.370
other things it's better like time,
this would work anyway.

