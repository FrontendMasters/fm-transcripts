WEBVTT

1
00:00:00.000 --> 00:00:04.430
[MUSIC]

2
00:00:04.430 --> 00:00:08.590
&gt;&gt; Brian Lonsdorf: For exercise two,
we basically wanna do what we did up here.

3
00:00:08.590 --> 00:00:12.681
We wanna return a right or
a left based on the fact,

4
00:00:12.681 --> 00:00:17.180
if our length is greater than three, so
it's like a validation, if our length

5
00:00:17.180 --> 00:00:21.130
is greater than three we will return
a right otherwise we'll return a left.

6
00:00:21.130 --> 00:00:22.000
Okay.

7
00:00:22.000 --> 00:00:26.160
So We're going to return to right or
left and

8
00:00:26.160 --> 00:00:28.420
the left says it should
have this message in it.

9
00:00:28.420 --> 00:00:30.040
So my test passed.

10
00:00:30.040 --> 00:00:30.800
Okay.

11
00:00:30.800 --> 00:00:31.340
That part's done.

12
00:00:31.340 --> 00:00:34.140
And the right says it should have x in it.

13
00:00:34.140 --> 00:00:36.140
Okay.
That is easy enough.

14
00:00:36.140 --> 00:00:36.870
Now what I wanna do?

15
00:00:36.870 --> 00:00:39.220
I want to check if the length
is greater than three,

16
00:00:39.220 --> 00:00:40.640
I am going to return to the right.

17
00:00:40.640 --> 00:00:41.520
Okay.

18
00:00:41.520 --> 00:00:46.710
So if x is the length,
greater than three, Cool.

19
00:00:46.710 --> 00:00:48.320
I had trouble.
&gt;&gt; Speaker 2: I had to put in parenthesis,

20
00:00:48.320 --> 00:00:50.430
the precedence was weird.
&gt;&gt; Brian Lonsdorf: Thank you.

21
00:00:50.430 --> 00:00:51.660
&gt;&gt; Speaker 2: Screwed you up for a while.

22
00:00:51.660 --> 00:00:52.539
&gt;&gt; Brian Lonsdorf: Sorry about that one.

23
00:00:54.608 --> 00:00:55.939
&gt;&gt; Brian Lonsdorf: We could have done

24
00:00:55.939 --> 00:00:57.790
a if else too.

25
00:00:57.790 --> 00:01:01.080
But, there we go, exercise two passed.

26
00:01:01.080 --> 00:01:03.200
So all we did was write a validation
that returned a right or

27
00:01:03.200 --> 00:01:06.500
left, which is going to affect the rest
of our whole app from this point on.

28
00:01:06.500 --> 00:01:08.040
If they're not valid, it won't run.

29
00:01:10.620 --> 00:01:17.780
Now exercise three,
this one is pretty fun.

30
00:01:17.780 --> 00:01:22.144
We're going to save these, and
we'll see a console.log saved.

31
00:01:23.560 --> 00:01:30.420
Otherwise we won't, we wanna do, I don't
know if this was a weird one or not.

32
00:01:30.420 --> 00:01:32.400
So we're gonna call this string or

33
00:01:32.400 --> 00:01:36.640
call the it's our function
above we wanna use exercise

34
00:01:36.640 --> 00:01:41.210
two that we wrote ourself to see if
their length is greater in three or not.

35
00:01:41.210 --> 00:01:44.167
Okay, so
save them if it's greater than three.

36
00:01:44.167 --> 00:01:45.422
That's easy enough.

37
00:01:45.422 --> 00:01:50.990
Save over ex2, and the reason is
because ex2 will return to right or

38
00:01:50.990 --> 00:01:55.982
left if it's greater than three,
and then we'll save them or

39
00:01:55.982 --> 00:02:00.500
we won't based on that return to right or
left.

40
00:02:00.500 --> 00:02:05.120
So we just kind of extended our
computation to save if the validation was,

41
00:02:05.120 --> 00:02:09.380
we've done a validation here and
it'll save or it won't.

42
00:02:09.380 --> 00:02:12.650
I know I'm going really fast over these,
but

43
00:02:12.650 --> 00:02:18.060
are you guys kind of hanging in there or
you just like, god what's going on?

44
00:02:18.060 --> 00:02:19.750
How are we feeling at this point?

45
00:02:19.750 --> 00:02:21.730
I'm going really fast to
try to make up some time.

46
00:02:21.730 --> 00:02:23.280
Are you all right?

47
00:02:23.280 --> 00:02:25.710
All right.
You guys okay?

48
00:02:25.710 --> 00:02:28.590
I mean like if someone is like,
please help me, I will help you.

49
00:02:28.590 --> 00:02:30.800
[LAUGH] I'm not going
to just run through it.

50
00:02:30.800 --> 00:02:31.310
So, let me know.

51
00:02:32.950 --> 00:02:35.500
All right moving it.

52
00:02:36.610 --> 00:02:39.940
So last three, my god,

53
00:02:42.070 --> 00:02:46.930
exercise four just ask
us to get the texts.

54
00:02:46.930 --> 00:02:49.020
What is that gonna do?

55
00:02:50.460 --> 00:02:51.890
This one's interesting.

56
00:02:51.890 --> 00:02:53.250
Okay, this is IO.

57
00:02:53.250 --> 00:02:54.300
So what do we do for IO?

58
00:02:54.300 --> 00:02:57.316
Let's spend a little bit
more time on this one.

59
00:02:57.316 --> 00:03:03.132
We are going to,
it's gonna do this query selector, right?

60
00:03:03.132 --> 00:03:06.310
GetValue will do the query selector and
return me the value.

61
00:03:07.860 --> 00:03:14.500
So I wanna get the value from this text
input and then I wanna strip the spaces.

62
00:03:14.500 --> 00:03:15.630
Okay?

63
00:03:15.630 --> 00:03:21.140
Well just like always, we'll get our
value and that returns us an I O.

64
00:03:21.140 --> 00:03:24.130
So I have to map strip spaces over it.

65
00:03:24.130 --> 00:03:27.824
At this point you should be like, this
guy is just doing the same junk over and

66
00:03:27.824 --> 00:03:30.085
over again.
&gt;&gt; [INAUDIBLE]

67
00:03:30.085 --> 00:03:31.377
&gt;&gt; Brian Lonsdorf: Did it not work?

68
00:03:31.377 --> 00:03:32.493
Did I spell it wrong?

69
00:03:32.493 --> 00:03:36.210
Spaces, here it is.

70
00:03:36.210 --> 00:03:41.110
But the beauty in that, is map is so
generic that the type of container you

71
00:03:41.110 --> 00:03:44.980
put it in, you get different behaviors and
it's very useful.

72
00:03:46.200 --> 00:03:49.790
So now this is a pure function
that I have to run IO.

73
00:03:49.790 --> 00:03:55.000
If I don't ever run it,
I never get anything out, totally fine.

74
00:03:55.000 --> 00:03:59.290
I get an IO with this whatever
IO balance out of it.

75
00:03:59.290 --> 00:04:00.910
It's kind of weird.
&gt;&gt; Speaker 2: Is that is that in

76
00:04:00.910 --> 00:04:04.630
the output tab that's it's reading from?

77
00:04:04.630 --> 00:04:06.220
Is it reading from an actual text?
&gt;&gt; Brian Lonsdorf: Yeah,

78
00:04:06.220 --> 00:04:08.905
it's reading from these texts boxes.
&gt;&gt; Speaker 2: [CROSSTALK] looking things

79
00:04:08.905 --> 00:04:10.770
from a map but
it's really from a text book now.

80
00:04:10.770 --> 00:04:12.670
&gt;&gt; Brian Lonsdorf: Yeah, it's pretty neat.

81
00:04:12.670 --> 00:04:17.120
So it's purely reading from that,
and we have to tell it,

82
00:04:17.120 --> 00:04:21.980
man you've gotta run IO,
to actually kick this thing off.

83
00:04:21.980 --> 00:04:25.500
And that's cool because that means we
could write our full app without worrying

84
00:04:25.500 --> 00:04:31.130
about anything, and it'll just return,
we can just map and

85
00:04:31.130 --> 00:04:35.220
do other stuff to it and it's totally
fine till the end where we kick it off.

86
00:04:35.220 --> 00:04:36.430
We push those dominoes.

