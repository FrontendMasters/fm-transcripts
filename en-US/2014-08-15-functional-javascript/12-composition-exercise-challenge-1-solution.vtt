WEBVTT

1
00:00:00.079 --> 00:00:04.581
[MUSIC]

2
00:00:04.581 --> 00:00:07.300
&gt;&gt; Speaker 1: All right,
here's how number one works out.

3
00:00:07.300 --> 00:00:13.020
So our challenge is to return a list

4
00:00:13.020 --> 00:00:19.640
of author names in articles using get,
compose, and map, okay.

5
00:00:19.640 --> 00:00:23.666
So if we look back up,
where do the authors live, they live-

6
00:00:23.666 --> 00:00:25.724
&gt;&gt; Speaker 2: All right everybody,

7
00:00:25.724 --> 00:00:30.380
we are going to go over
the solution to number one and

8
00:00:30.380 --> 00:00:33.777
setup number two.
&gt;&gt; Speaker 1: Here we go, number one,

9
00:00:33.777 --> 00:00:37.760
get it right then we'll have
more knowledge for number two.

10
00:00:39.590 --> 00:00:46.800
So we want to pluck out, I guess I could
say it that way, the author names, cool.

11
00:00:46.800 --> 00:00:49.860
So we have an array, what's in the array?

12
00:00:49.860 --> 00:00:55.650
Objects, we want to get the author,
yes, but their name in particular.

13
00:00:55.650 --> 00:01:00.565
So when I hear something it says,
get me a list of

14
00:01:00.565 --> 00:01:04.770
blah that you've kind of pulled out of
some other blah, it calls to mind map.

15
00:01:05.790 --> 00:01:08.680
So the outermost thing is probably
like I want to map over some stuff.

16
00:01:10.080 --> 00:01:14.237
So, what is it that I want to do?

17
00:01:14.237 --> 00:01:16.550
How do I wanna transform
each thing in the array?

18
00:01:16.550 --> 00:01:22.850
Well, one thing I could do is like
get the author themselves out.

19
00:01:22.850 --> 00:01:27.930
So I could say get, or actually I may
not get, maybe the same, get author.

20
00:01:27.930 --> 00:01:30.823
This is not quite there, but
let's see what that does.

21
00:01:37.761 --> 00:01:39.295
&gt;&gt; Speaker 1: RAM does not define is what

22
00:01:39.295 --> 00:01:40.520
it does.
&gt;&gt; Speaker 2: [LAUGH] Keep it

23
00:01:40.520 --> 00:01:41.600
running a few times.
&gt;&gt; Speaker 1: Try it

24
00:01:41.600 --> 00:01:42.200
again.
&gt;&gt; Speaker 2: Just fix

25
00:01:42.200 --> 00:01:42.850
itself.
&gt;&gt; Speaker 1: It

26
00:01:42.850 --> 00:01:43.470
does?
&gt;&gt; Speaker 2: Yeah.

27
00:01:43.470 --> 00:01:45.462
&gt;&gt; Speaker 1: It must be JS bin like loads

28
00:01:45.462 --> 00:01:48.120
and runs these things.
&gt;&gt; Speaker 2: Yeah,

29
00:01:48.120 --> 00:01:50.870
and each time you change-
&gt;&gt; Speaker 1: Yeah.

30
00:01:50.870 --> 00:01:53.663
&gt;&gt; Speaker 2: Maybe that's what's

31
00:01:53.663 --> 00:01:56.500
happening.
&gt;&gt; Speaker 1: That's not good.

32
00:01:56.500 --> 00:01:57.365
Okay, anyway, so here we go.

33
00:01:57.365 --> 00:01:59.160
Uncut, so here's the deal.

34
00:01:59.160 --> 00:02:03.817
He wants to find, no,
that's different, yeah, yeah, yeah.

35
00:02:03.817 --> 00:02:06.370
These names equal object, object, object.

36
00:02:06.370 --> 00:02:07.640
Okay, we're almost there.

37
00:02:07.640 --> 00:02:11.700
You know, like we just mapped, instead of
getting the right thing, we got too much.

38
00:02:11.700 --> 00:02:14.080
We got the whole author, and
we just want the author's name.

39
00:02:15.310 --> 00:02:16.965
Well, let's go back down.

40
00:02:16.965 --> 00:02:23.100
Here it is, so I'm gonna put this on
another line, so we can kinda see it.

41
00:02:25.300 --> 00:02:27.000
We're mapping get author.

42
00:02:27.000 --> 00:02:30.230
It's true, but we have like
a process of things to do, and

43
00:02:30.230 --> 00:02:34.350
when you do one thing and feed it into
the next thing that's a composition.

44
00:02:34.350 --> 00:02:35.740
Or we could think of it as a composition.

45
00:02:35.740 --> 00:02:36.960
You could do all kinds of ways, but

46
00:02:36.960 --> 00:02:40.380
it's pretty clean this way.
&gt;&gt; Speaker 3: Actually,

47
00:02:40.380 --> 00:02:43.590
one thing that helped me was to
run that over in the console.

48
00:02:43.590 --> 00:02:46.142
Put that map just so
that you see the output.

49
00:02:46.142 --> 00:02:50.047
Because that's the hardest thing to
sometimes just imagine what it's

50
00:02:50.047 --> 00:02:51.750
doing.
&gt;&gt; Speaker 1: Good idea.

51
00:02:51.750 --> 00:02:53.390
&gt;&gt; Speaker 2: And if you have names.

52
00:02:53.390 --> 00:02:54.520
Name should be available right

53
00:02:54.520 --> 00:02:56.029
there on the right too
&gt;&gt; Speaker 3: And

54
00:02:56.029 --> 00:03:00.100
then you can can apply it to articles
&gt;&gt; Speaker 1: Right.

55
00:03:00.100 --> 00:03:09.429
And that helped me a lot.
&gt;&gt; Speaker 1: See,

56
00:03:09.429 --> 00:03:10.870
right, right, good call.

57
00:03:12.300 --> 00:03:15.596
Yeah, code speaks better than I do,
I like it.

58
00:03:15.596 --> 00:03:18.860
[LAUGH] Here's what that would do.

59
00:03:18.860 --> 00:03:22.108
If all we're doing is mapping get author,
we get a new array back,

60
00:03:22.108 --> 00:03:24.190
because the original thing was an array.

61
00:03:24.190 --> 00:03:29.080
And it has the authors, So
what would if we were considering

62
00:03:29.080 --> 00:03:32.830
each author in isolation,
what would we be doing to that?

63
00:03:32.830 --> 00:03:35.490
Now one thing we could do is map a map.

64
00:03:35.490 --> 00:03:36.550
It's kind of inefficient though,

65
00:03:36.550 --> 00:03:41.470
you have to go all the way through,
get down to the author, now wait a second.

66
00:03:41.470 --> 00:03:43.120
Yeah I guess, but

67
00:03:43.120 --> 00:03:47.070
another thing you could do is compose
what you're getting out of the things.

68
00:03:47.070 --> 00:03:48.280
So we've got an author, cool.

69
00:03:51.040 --> 00:03:54.910
And remember compose is right to left, so
the first thing it does is get the author,

70
00:03:54.910 --> 00:03:57.990
and we're gonna feed that into
getting the name of the author,

71
00:03:57.990 --> 00:04:03.650
because at this point we have their.
&gt;&gt; Speaker 3: I

72
00:04:03.650 --> 00:04:07.033
did the map of the map.
&gt;&gt; Speaker 1: That's one way I think

73
00:04:07.033 --> 00:04:08.055
there's like this.

74
00:04:08.055 --> 00:04:12.040
When you see the patterns, map versus
map with compose is called loop fusions.

75
00:04:12.040 --> 00:04:14.350
So when you like zoom out,
it's like, yeah.

76
00:04:14.350 --> 00:04:16.760
You can alway, and without hesitation,

77
00:04:16.760 --> 00:04:19.820
when you're working with pure functions,
convert one into the other and

78
00:04:19.820 --> 00:04:21.710
get an efficiency savings.
&gt;&gt; Speaker 3: Okay.

79
00:04:21.710 --> 00:04:22.803
&gt;&gt; Speaker 1: It's like, yeah,

80
00:04:22.803 --> 00:04:25.853
when things are like very nailed down,
I know what they do, and

81
00:04:25.853 --> 00:04:29.076
I have laws that they obey,
you can just transform your program and

82
00:04:29.076 --> 00:04:31.683
make it faster or simpler.
&gt;&gt; Speaker 2: And

83
00:04:31.683 --> 00:04:34.640
we'll talk about that in functors too.
&gt;&gt; Speaker 1: Yeah.

84
00:04:34.640 --> 00:04:35.140
&gt;&gt; Speaker 3: Okay.

85
00:04:36.540 --> 00:04:37.560
&gt;&gt; Speaker 1: Hopefully it runs.

86
00:04:39.680 --> 00:04:41.780
There you go.
&gt;&gt; Speaker 2: Yeah,

87
00:04:41.780 --> 00:04:42.309
cool.
&gt;&gt; Speaker 1: Didn't have an error.

88
00:04:43.560 --> 00:04:45.385
Whats wrong?
&gt;&gt; Speaker 2: You guys can tweet about

89
00:04:45.385 --> 00:04:47.957
like how exciting it is to
get a different error and

90
00:04:47.957 --> 00:04:50.600
like nobody would know that
unless they were a dev.

91
00:04:50.600 --> 00:04:55.941
You're like, yeah.
&gt;&gt; Speaker 1: It's so true.

92
00:04:55.941 --> 00:05:01.870
Okay so that's challenging.
&gt;&gt; Speaker 3: That

93
00:05:01.870 --> 00:05:03.450
we just assume that it's progress?

94
00:05:03.450 --> 00:05:04.485
&gt;&gt; Speaker 1: Yeah.
&gt;&gt; Speaker 2: Yeah.

95
00:05:04.485 --> 00:05:06.430
[LAUGH] Unless the system is broken.
&gt;&gt; Speaker 1: Yeah.

96
00:05:06.430 --> 00:05:07.000
&gt;&gt; Speaker 2: Yeah.

97
00:05:07.000 --> 00:05:08.520
&gt;&gt; Speaker 3: Statistic had a chapter

98
00:05:08.520 --> 00:05:12.750
that a successful test is one which fails.
&gt;&gt; Speaker 1: Yeah.

99
00:05:12.750 --> 00:05:14.220
&gt;&gt; Speaker 2: Something different.

100
00:05:14.220 --> 00:05:14.820
&gt;&gt; Speaker 1: So I wonder whether

101
00:05:14.820 --> 00:05:18.000
we just spend like five minutes on two and

102
00:05:18.000 --> 00:05:19.920
then we just give the solution to two?
&gt;&gt; Speaker 2: Yeah,

103
00:05:19.920 --> 00:05:21.150
part one ends right after.

104
00:05:21.150 --> 00:05:22.440
Coming up to the end of this, right?
&gt;&gt; Speaker 1: Yeah,

105
00:05:22.440 --> 00:05:25.170
I think we are coming up to the end of it.
&gt;&gt; Speaker 2: Yeah, so we're good.

106
00:05:25.170 --> 00:05:28.400
Because our demo is going to
be a lot less than two hours.

107
00:05:28.400 --> 00:05:32.725
So, we're going a half hour over than
what we scheduled, then we're good.

108
00:05:32.725 --> 00:05:33.463
&gt;&gt; Speaker 1: Cool.

109
00:05:33.463 --> 00:05:36.169
&gt;&gt; Speaker 3: Is there a hint you can give

110
00:05:36.169 --> 00:05:39.000
on two?
&gt;&gt; Speaker 1: Let's see, two.

111
00:05:39.000 --> 00:05:40.729
&gt;&gt; Speaker 3: Because Mark and

112
00:05:40.729 --> 00:05:44.260
I are stuck.
&gt;&gt; Speaker 1: [LAUGH] Let's see.

113
00:05:44.260 --> 00:05:48.680
Make a boolean function that says whether
a given person wrote any of the articles.

114
00:05:48.680 --> 00:05:49.320
&gt;&gt; Speaker 2: I can give a hint.

115
00:05:49.320 --> 00:05:52.265
You gonna need a function
wrapper around this one.

116
00:05:52.265 --> 00:05:54.530
&gt;&gt; Speaker 1: [LAUGH]

117
00:05:54.530 --> 00:05:55.910
I'm not sure if that means the same.

118
00:05:55.910 --> 00:05:57.670
You need a closure?
&gt;&gt; Speaker 2: Well,

119
00:05:57.670 --> 00:06:01.400
you're gonna,
it's not gonna be just map and compose.

120
00:06:01.400 --> 00:06:03.480
You're gonna need a function.

121
00:06:03.480 --> 00:06:07.220
That because of the way it composes
it needs some random arguments.

122
00:06:07.220 --> 00:06:09.740
It is actually a really
good demonstration of that.

123
00:06:09.740 --> 00:06:13.851
So you're going to need to write
a function, colon, parentheses, return,

124
00:06:13.851 --> 00:06:19.944
all that junk around this one.
&gt;&gt; Speaker 2: Scott S and

125
00:06:19.944 --> 00:06:23.924
Michael H mentioned they've
got some combinatory or

126
00:06:23.924 --> 00:06:28.611
combinators and RAM though that
you could use instead of four,

127
00:06:28.611 --> 00:06:32.933
which is kind of cool to know?
&gt;&gt; Speaker 1: Yeah, challenge three was

128
00:06:32.933 --> 00:06:37.566
just for the fun of it to be like how
point free, quote unquote, can you be?

129
00:06:37.566 --> 00:06:41.340
The idea that you can strip
arguments away and not name them.

130
00:06:42.870 --> 00:06:45.470
Sometimes it should be like
it's counterproductive.

131
00:06:45.470 --> 00:06:49.744
Sometimes it's really nice.
&gt;&gt; Speaker 2: Scott posted a cruel

132
00:06:49.744 --> 00:06:54.692
tidbit.
&gt;&gt; Speaker 1: Show that,

133
00:06:54.692 --> 00:06:57.430
we should probably show that later,
after the solution.

134
00:06:57.430 --> 00:07:01.690
Yeah I see.
&gt;&gt; Speaker 2: I don't know, you can get

135
00:07:01.690 --> 00:07:05.850
yourself into some serious problems
if you're like, must be point three.

136
00:07:05.850 --> 00:07:09.190
Point three is just a really good way
to like know you're on track writing

137
00:07:09.190 --> 00:07:10.000
declarative code.

138
00:07:10.000 --> 00:07:10.675
You're not making,

139
00:07:10.675 --> 00:07:15.100
you're pretty much on the right functional
track if you're writing compose a lot.

140
00:07:15.100 --> 00:07:18.276
But don't like force yourself to
write everything where you're,

141
00:07:18.276 --> 00:07:21.570
did we even mention what point three was?
&gt;&gt; Speaker 1: Only just

142
00:07:21.570 --> 00:07:24.670
now obliquely.
&gt;&gt; Speaker 2: Point three is you

143
00:07:24.670 --> 00:07:26.150
don't mention arguments at all.

144
00:07:26.150 --> 00:07:32.124
You just glue functions and data together
without ever receiving arguments.

145
00:07:32.124 --> 00:07:32.674
&gt;&gt; Speaker 1: Like a man or

146
00:07:32.674 --> 00:07:33.389
a cow or other.

147
00:07:33.389 --> 00:07:35.480
That is out of the picture.

148
00:07:35.480 --> 00:07:38.447
We have to get the error
you take the error out.

149
00:07:38.447 --> 00:07:41.250
&gt;&gt; Speaker 2: Yeah so,

150
00:07:41.250 --> 00:07:44.740
you can write all these point three and
you get a lot of benefits.

151
00:07:45.835 --> 00:07:52.030
Because, you're just combining things
generically without ever needing data.

152
00:07:52.030 --> 00:07:56.070
And you don't get tied into names
that make your program very specific.

153
00:07:57.730 --> 00:08:01.500
It's also really good indicator
that you're on the right track

154
00:08:01.500 --> 00:08:03.910
of functional programming,
and you're being declarative.

155
00:08:03.910 --> 00:08:08.043
You're forced to be declarative if
you're writing point three code.

156
00:08:08.043 --> 00:08:13.060
Which is, you're just saying,
here's a high order, do this.

157
00:08:13.060 --> 00:08:16.400
Don't say how to do it, just do it.
&gt;&gt; Speaker 3: So,

158
00:08:16.400 --> 00:08:19.420
I get that this gives us a lot of
terseness and maybe code sexiness.

159
00:08:19.420 --> 00:08:24.958
It gives you terseness, but what about
maintainability and scalability across

160
00:08:24.958 --> 00:08:28.226
teams with different levels of competence?
&gt;&gt; Speaker 2: So

161
00:08:28.226 --> 00:08:33.222
one thing that you gonna gain is you're
working at such a, if you go up to

162
00:08:33.222 --> 00:08:38.325
maybe the top example of just that
composer, the author, and the name.

163
00:08:38.325 --> 00:08:42.865
But so compose, map, split,
that doesn't say how to do anything.

164
00:08:42.865 --> 00:08:47.867
It's saying this function is
the composition of these two arguments and

165
00:08:47.867 --> 00:08:50.740
those just like in like SQL or something.

166
00:08:50.740 --> 00:08:54.625
Somebody can make map way more efficient,
compose way more efficient,

167
00:08:54.625 --> 00:08:57.690
split more efficient,
they could do all sorts of stuff.

168
00:08:57.690 --> 00:09:00.160
You haven't said how to do anything.

169
00:09:00.160 --> 00:09:01.860
You just said what needs to happen.

170
00:09:01.860 --> 00:09:05.170
We're going to compose these two things.

171
00:09:05.170 --> 00:09:07.820
And so length has a perfect definition of,

172
00:09:07.820 --> 00:09:09.350
almost reading to what
it's supposed to do.

173
00:09:09.350 --> 00:09:12.600
It says we'll split it on space and
map the size, and

174
00:09:12.600 --> 00:09:15.138
that's the composition of these things.

175
00:09:15.138 --> 00:09:18.970
So you're gonna have a much
more maintainable code base,

176
00:09:18.970 --> 00:09:22.640
because you're forced into
a very high level of coding.

177
00:09:22.640 --> 00:09:27.290
That gives you a lot of wiggle
room in implementation.

178
00:09:27.290 --> 00:09:32.560
But with the highest level of programming,
you're gonna have to fire the people

179
00:09:32.560 --> 00:09:36.890
who can't understand the approach [LAUGH].
&gt;&gt; Speaker 1: So basically, more or

180
00:09:36.890 --> 00:09:38.100
less everyone.
&gt;&gt; Speaker 2: Yeah.

181
00:09:38.100 --> 00:09:39.100
&gt;&gt; Speaker 1: There's different levels of

182
00:09:39.100 --> 00:09:43.090
obscurity though, if you're just
using like compose and map and stuff.

183
00:09:43.090 --> 00:09:46.104
It can read kinda nicely just
like you're looking on Unix.

184
00:09:46.104 --> 00:09:50.140
Do this, pipe into this,
pipe into this, just down the line.

185
00:09:50.140 --> 00:09:55.110
There's a presentation,
maybe the ramda creator can post.

186
00:09:55.110 --> 00:09:58.070
There was a great talk showing, like do
you want your code to look like this, and

187
00:09:58.070 --> 00:09:58.590
it was crazy.

188
00:09:58.590 --> 00:10:00.480
Or he like put it through
bunch of compositions.

189
00:10:00.480 --> 00:10:01.790
It was really clean.

190
00:10:01.790 --> 00:10:03.820
So I think it can look better and clearer.

191
00:10:03.820 --> 00:10:07.270
But like some of it's straining,
like at the bottom like use fork and

192
00:10:07.270 --> 00:10:09.310
when yeah that's kind of weird.

193
00:10:09.310 --> 00:10:14.190
It's just, there was just as an exercise
and like thinking about moving

194
00:10:14.190 --> 00:10:18.780
variables maybe not in the way that
you want all the time on that one.

195
00:10:18.780 --> 00:10:19.547
&gt;&gt; Speaker 2: Can I back up and

196
00:10:19.547 --> 00:10:21.503
say shouldn't find people like this?

197
00:10:21.503 --> 00:10:25.310
[LAUGH] I think there's a lot
of value to low level code and

198
00:10:25.310 --> 00:10:28.716
a lot of value to different
types of programming.

199
00:10:28.716 --> 00:10:31.587
This is just a way of programming in
a declarative fashion, so if you need that

200
00:10:31.587 --> 00:10:37.398
flexibility underneath you can get it.
&gt;&gt; Speaker 2: Okay, challenge two.

201
00:10:37.398 --> 00:10:38.809
Make a, okay.
&gt;&gt; Speaker 3: So,

202
00:10:38.809 --> 00:10:43.661
what you're saying is we
write the linked function and

203
00:10:43.661 --> 00:10:47.476
let the low level guys use it.
&gt;&gt; Speaker 2: Exactly, just like, hey,

204
00:10:47.476 --> 00:10:52.400
we write codes to make this way cooler or
make this math more efficient.

205
00:10:54.320 --> 00:10:59.243
And your application code just reads like
a DSL almost and the implementation code

206
00:10:59.243 --> 00:11:03.752
is, as long as your application is at
high level, everything could change

