WEBVTT

1
00:00:00.000 --> 00:00:04.443
[MUSIC]

2
00:00:04.443 --> 00:00:07.212
&gt;&gt; Joe Nelson: But as far as number two,
are we solid on that,

3
00:00:07.212 --> 00:00:10.407
aside from maybe it's not the best use for
a compose?

4
00:00:14.132 --> 00:00:15.066
&gt;&gt; Joe Nelson: No.

5
00:00:15.066 --> 00:00:17.284
[LAUGH]

6
00:00:24.039 --> 00:00:26.190
&gt;&gt; Joe Nelson: So, I'm trying to think,

7
00:00:26.190 --> 00:00:31.344
so, do we need an explanation again of,
how does isAuthor work?

8
00:00:31.344 --> 00:00:33.226
That's actually right.

9
00:00:33.226 --> 00:00:36.425
&gt;&gt; Off Camera 1: People like the fork
example, if you can go over it.

10
00:00:36.425 --> 00:00:38.112
&gt;&gt; Joe Nelson: Okay, cool.

11
00:00:38.112 --> 00:00:42.930
&gt;&gt; Off Camera 1: It is cool to be like,
whoa, you can do that?

12
00:00:42.930 --> 00:00:47.815
&gt;&gt; Joe Nelson: Okay, so
we want to take an average.

13
00:00:47.815 --> 00:00:51.195
And compose is kind of a pipeline,
where just using compose,

14
00:00:51.195 --> 00:00:53.215
it would be hard to take the average.

15
00:00:53.215 --> 00:00:56.606
Cuz the average,
you've got a list of numbers and

16
00:00:56.606 --> 00:01:00.503
you need two facts about it,
like the sum and the length.

17
00:01:00.503 --> 00:01:02.256
And you think, okay, I'll start composing.

18
00:01:02.256 --> 00:01:06.182
Like, I get my list of numbers,
which one do I want, how about the sum?

19
00:01:06.182 --> 00:01:08.784
And then whatever you're going to
feed that into, you're kind of stuck,

20
00:01:08.784 --> 00:01:10.370
because you don't have the length anymore.

21
00:01:10.370 --> 00:01:13.710
You have no idea what it was that was
fed into the beginning of the compose.

22
00:01:13.710 --> 00:01:18.197
So there's this fork thing, it says,
fork, you give it two functions, and

23
00:01:18.197 --> 00:01:20.421
I think a combining function lastly.

24
00:01:20.421 --> 00:01:22.860
Yeah, yeah, yeah, so you say,
okay, there's a fork in the road.

25
00:01:22.860 --> 00:01:24.590
It's like compose,

26
00:01:24.590 --> 00:01:30.060
the values come in, they get into fork,
and fork says, I've got two functions.

27
00:01:30.060 --> 00:01:33.690
I'm going to call this value that just
came in on both the functions, and

28
00:01:33.690 --> 00:01:36.480
then take the results of what
those functions gave back and

29
00:01:36.480 --> 00:01:38.900
give it to lastly,
this function called lastly.

30
00:01:41.470 --> 00:01:46.010
It's up to you how you write it, so
all these three things are up to you.

31
00:01:46.010 --> 00:01:48.000
The two functions that you
want to do on the input and

32
00:01:48.000 --> 00:01:49.310
how you combine it with lastly.

33
00:01:50.470 --> 00:01:53.733
So knowing that's how fork works,
let's see,

34
00:01:53.733 --> 00:01:57.800
the order it takes is lastly,
f, g, and then the mystery x.

35
00:01:57.800 --> 00:02:01.696
In fact, it's so much easier just to
look at it now that I think of it.

36
00:02:01.696 --> 00:02:02.606
Look at what it does.

37
00:02:02.606 --> 00:02:07.409
Fork, three functions and a value.

38
00:02:07.409 --> 00:02:13.170
It puts that value into both
the functions, and sends that into lastly.

39
00:02:13.170 --> 00:02:17.728
So if you have it in your tool belt,
this fork thing, you never have to,

40
00:02:17.728 --> 00:02:21.730
or I think there's less variables
you have to write in the future,

41
00:02:21.730 --> 00:02:22.500
you can just apply it.

42
00:02:22.500 --> 00:02:24.370
So what would average look like?

43
00:02:25.870 --> 00:02:30.139
The very worst way I can imagine, the most
procedural way is, I have a counter,

44
00:02:30.139 --> 00:02:31.430
I have a loop, I add up.

45
00:02:31.430 --> 00:02:34.670
I guess I could reduce, I could use sum,
that's a little better.

46
00:02:34.670 --> 00:02:36.840
And I do a couple steps and I return it.

47
00:02:36.840 --> 00:02:40.680
But we could just fork, fork.

48
00:02:41.970 --> 00:02:45.363
So lastly would be,
I forget if it divides,

49
00:02:45.363 --> 00:02:48.220
we may have to flip it, or divide by.

50
00:02:48.220 --> 00:02:51.345
There's two different ones to say,
the order that the arguments come in,

51
00:02:51.345 --> 00:02:53.140
is it the numerator or the denominator.

52
00:02:53.140 --> 00:02:55.313
We'll find out, or it'll be in the chat.

53
00:03:06.415 --> 00:03:08.329
&gt;&gt; Joe Nelson: Trying to think.

54
00:03:08.329 --> 00:03:14.546
So one of the arguments would be
composing the length with divides.

55
00:03:14.546 --> 00:03:16.369
&gt;&gt; Off Camera 2: Wouldn't your
lastly function be divides?

56
00:03:16.369 --> 00:03:18.127
It's the last thing you want to do.

57
00:03:18.127 --> 00:03:21.769
And then your two functions after
that would be sum and then size.

58
00:03:21.769 --> 00:03:24.793
&gt;&gt; Joe Nelson: Sum and size, totally.

59
00:03:24.793 --> 00:03:26.516
&gt;&gt; Off Camera 2: You wouldn't
be passing those into divide,

60
00:03:26.516 --> 00:03:27.704
the formula does that for you.

61
00:03:27.704 --> 00:03:29.864
&gt;&gt; Joe Nelson: Nice, just divides.

62
00:03:29.864 --> 00:03:32.216
&gt;&gt; Off Camera 1: [INAUDIBLE]
&gt;&gt; Joe Nelson: What's that?

63
00:03:32.216 --> 00:03:33.619
&gt;&gt; Off Camera 1: It's singular.

64
00:03:33.619 --> 00:03:39.438
&gt;&gt; Joe Nelson: Divide,
length, or is it size?

65
00:03:39.438 --> 00:03:45.852
&gt;&gt; Off Camera 1: Size, sums,
actually, first, and then size.

66
00:03:45.852 --> 00:03:47.841
Nice, very easy.

67
00:03:47.841 --> 00:03:48.896
&gt;&gt; Joe Nelson: That's kind of pretty,
I don't know.

68
00:03:48.896 --> 00:03:52.335
I guess maybe fork is
pretty cool if it works.

69
00:03:52.335 --> 00:03:54.365
All tests pass.

70
00:03:54.365 --> 00:03:59.626
&gt;&gt; Off Camera 3: What is,
if you go up to fork, the definition.

71
00:03:59.626 --> 00:04:04.691
That is the function
instance of functor or

72
00:04:04.691 --> 00:04:07.512
applicative functor?

73
00:04:07.512 --> 00:04:09.674
So it does actually really come in handy.

74
00:04:09.674 --> 00:04:12.192
[LAUGH]
&gt;&gt; Joe Nelson: You're saying this has

75
00:04:12.192 --> 00:04:14.475
a more general name, and
this is used in other places?

76
00:04:14.475 --> 00:04:16.110
&gt;&gt; Off Camera 3: Yeah,
if you think of f and

77
00:04:16.110 --> 00:04:20.960
g as a functor with something inside, and
to get it, you have to run the function.

78
00:04:22.290 --> 00:04:24.020
Then, we'll look at it later,

79
00:04:24.020 --> 00:04:26.900
but you run both functions to
get the applicative functor.

80
00:04:26.900 --> 00:04:30.561
And then you apply that lastly.

81
00:04:30.561 --> 00:04:33.714
So you lift lastly and you apply it to
the first steps to get the value out.

82
00:04:33.714 --> 00:04:36.167
And then you apply it to the g to get
the value out and you get [CROSSTALK].

83
00:04:36.167 --> 00:04:38.828
&gt;&gt; Joe Nelson: So most likely,
no one has to write this thing.

84
00:04:38.828 --> 00:04:40.870
&gt;&gt; Off Camera 3: Yes.
&gt;&gt; Joe Nelson: It's part of the monadical

85
00:04:40.870 --> 00:04:45.607
sort of applicative stuff you're going
to do later with Brian's journey.

86
00:04:45.607 --> 00:04:48.305
&gt;&gt; Off Camera 1: Yeah, I don't know if I'm
going to cover the function instance of

87
00:04:48.305 --> 00:04:49.660
applicatives, but that's it.

88
00:04:49.660 --> 00:04:52.723
&gt;&gt; Joe Nelson: [LAUGH] That's it.

89
00:04:52.723 --> 00:04:56.390
&gt;&gt; Off Camera 1: It's also
the S combinator, I think?

90
00:04:56.390 --> 00:04:58.434
No.

91
00:04:58.434 --> 00:05:00.931
&gt;&gt; Joe Nelson: Why don't we
pass the value x in for fork?

92
00:05:00.931 --> 00:05:03.070
Because fork is curried, so

93
00:05:03.070 --> 00:05:07.715
it doesn't require everything to be,
I think, let's see.

94
00:05:18.402 --> 00:05:21.041
&gt;&gt; Joe Nelson: Yeah, yeah,
yeah, so in the test,

95
00:05:21.041 --> 00:05:24.770
we say assertEqual 3 to
average of something.

96
00:05:24.770 --> 00:05:29.570
Now, average, as it stands, is forked
of this stuff, but it's curried, and

97
00:05:29.570 --> 00:05:31.550
it hasn't been given all
the arguments it needs yet, so

98
00:05:31.550 --> 00:05:33.690
it's a new function waiting to get it.

99
00:05:33.690 --> 00:05:35.974
That's why we didn't have to explicitly,
yeah, exactly.

100
00:05:43.565 --> 00:05:46.716
&gt;&gt; Joe Nelson: I'm assuming everyone's
reading the chats as well as I am, so

101
00:05:46.716 --> 00:05:48.388
I'm like responding to a ghost.

102
00:05:48.388 --> 00:05:49.109
And you're like, what's happening?

103
00:05:49.109 --> 00:05:51.002
[LAUGH]
&gt;&gt; Off Camera 1: [LAUGH]

104
00:05:55.765 --> 00:05:56.437
&gt;&gt; Joe Nelson: Okay, so those

105
00:05:56.437 --> 00:05:58.410
are the three, and
those are their answers.

