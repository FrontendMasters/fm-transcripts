WEBVTT

1
00:00:00.000 --> 00:00:04.714
[MUSIC]

2
00:00:04.714 --> 00:00:07.409
&gt;&gt; Brian Lonsdorf: I just wanted to tell
you guys, we're using a pattern from

3
00:00:07.409 --> 00:00:10.930
Category Theory and Category Theory can
tell you a lot about your programs.

4
00:00:10.930 --> 00:00:13.220
If you're composing them like this.

5
00:00:13.220 --> 00:00:15.140
You don't need to know so much of that,

6
00:00:15.140 --> 00:00:17.240
I'm not going to give you a test
on category theory later.

7
00:00:17.240 --> 00:00:21.110
I just wanted you guys to know that
that's an important concept, and

8
00:00:21.110 --> 00:00:24.120
if you learn it,
it's like learning more about add.

9
00:00:24.120 --> 00:00:26.160
You're like I didn't know
multiplication distributed over it.

10
00:00:26.160 --> 00:00:28.330
I don't need to know that to write my app,
but

11
00:00:28.330 --> 00:00:33.530
it was cool to have it there,
so let's talk about this.

12
00:00:33.530 --> 00:00:39.260
So, we basically built up apps like
Legos with functions combining

13
00:00:39.260 --> 00:00:43.880
with functions and data combining with
functions and composing everything right.

14
00:00:43.880 --> 00:00:48.183
Building new things from
simpler smaller things,

15
00:00:48.183 --> 00:00:51.900
what about null checks or about callbacks?

16
00:00:51.900 --> 00:00:54.380
What about error handling,
and side effects?

17
00:00:54.380 --> 00:00:56.840
The list goes on,
I could probably list this like 50 things.

18
00:00:56.840 --> 00:00:58.930
Things we have to deal
with every single day.

19
00:01:01.600 --> 00:01:06.810
So we're going to reintroduce objects,
but not in the way you think of them.

20
00:01:06.810 --> 00:01:12.390
So we're going to think of them as
containers or wrappers for values.

21
00:01:12.390 --> 00:01:17.350
Like, we're gonna take a number or
a string or a whatever and

22
00:01:17.350 --> 00:01:21.260
put it inside an object and
it's just gonna wrap that value.

23
00:01:21.260 --> 00:01:24.290
So we'll see that,
we're not gonna have methods.

24
00:01:24.290 --> 00:01:27.010
That sounds stupid but okay,
we're gonna have methods.

25
00:01:27.010 --> 00:01:27.790
I'm lying but

26
00:01:27.790 --> 00:01:32.340
think of it as not having methods and
we're not gonna think about these nouns.

27
00:01:32.340 --> 00:01:37.040
We're not gonna have a user object,
we're not going to have a blog object.

28
00:01:37.040 --> 00:01:41.930
We're going to have different kinds
of things that capture a behavior and

29
00:01:41.930 --> 00:01:45.340
then number 4,
you will be making your own very often.

30
00:01:45.340 --> 00:01:49.130
I'm going to say that now because
you probably won't for a while and

31
00:01:49.130 --> 00:01:54.110
once you get into the heavier architecture
design stuff you can start doing this.

32
00:01:54.110 --> 00:01:56.470
But, you can get very very far for

33
00:01:56.470 --> 00:01:59.860
very long without ever having to define
your own functor or something like that.

34
00:01:59.860 --> 00:02:03.570
So don't worry about
the implementation details or

35
00:02:03.570 --> 00:02:08.130
how do I make my own functors,
just be like here's some standard ones and

36
00:02:08.130 --> 00:02:09.770
they'll probably capture
everything I need anyway.

37
00:02:11.200 --> 00:02:18.797
Okay, so Container, [LAUGH] this is a
convention I'm going to use throughout and

38
00:02:18.797 --> 00:02:25.060
we've got this _Container,
that's an actual object.

39
00:02:25.060 --> 00:02:29.068
And then I've got a helper function
that creates it by calling new.

40
00:02:29.068 --> 00:02:31.480
And the whole point of that is
that we don't forget new and

41
00:02:31.480 --> 00:02:33.750
two because container is
a composable function now.

42
00:02:33.750 --> 00:02:36.200
It's just a constructor, so

43
00:02:36.200 --> 00:02:39.490
I don't have to drop new in
the middle of a compose somehow.

44
00:02:39.490 --> 00:02:41.550
I can just call a container as a function,

45
00:02:42.690 --> 00:02:47.075
so dang that Jamaican
food was good you guys.

46
00:02:47.075 --> 00:02:50.945
[LAUGH] Anyway down to the bottom so,

47
00:02:50.945 --> 00:02:55.860
what I want you to see
is that container of 3.

48
00:02:55.860 --> 00:03:01.180
That is literally what it is like you are
looking at a wrapper around the number 3.

49
00:03:01.180 --> 00:03:05.610
There is no like function call to return
something crazy or it's not going as

50
00:03:05.610 --> 00:03:09.620
a property of an object and then it's
gonna have different names for it stuff.

51
00:03:09.620 --> 00:03:12.950
We're really just putting
container around 3 and

52
00:03:12.950 --> 00:03:15.610
it's literally acting like
a wrapper container of it.

53
00:03:15.610 --> 00:03:20.270
It takes a little bit to kind of get
used to looking at that literally not

54
00:03:20.270 --> 00:03:22.910
in an object oriented sense, but

55
00:03:22.910 --> 00:03:25.530
down to the bottom is what
you'd see kinda in the console.

56
00:03:25.530 --> 00:03:29.780
Like we were assigning three to
an arbitrary property called val and

57
00:03:29.780 --> 00:03:35.570
we get our actual container back but
the container 3 part is important.

58
00:03:35.570 --> 00:03:37.950
Don't worry about the 3,
I just picked a random.

59
00:03:37.950 --> 00:03:40.746
[LAUGH] Does anyone have any
questions about this part?

60
00:03:40.746 --> 00:03:46.320
Online or our video froze, it's because I

61
00:03:46.320 --> 00:03:50.995
blew the minds of too many
people with my container.

62
00:03:50.995 --> 00:03:57.800
[LAUGH] Sorry, is everybody good?

63
00:03:57.800 --> 00:04:00.520
I saw a lot of people who
didn't have object or

64
00:04:00.520 --> 00:04:05.070
an experience in JavaScript and so
it may look a little foreign to you.

65
00:04:05.070 --> 00:04:10.570
That the top thing is a constructor

66
00:04:10.570 --> 00:04:14.800
function if you call it with new words it
really is just a constructor function and

67
00:04:14.800 --> 00:04:18.300
then our object comes out, okay.

68
00:04:20.410 --> 00:04:25.450
So we're gonna go into, all right, so
what if I capitalized flame thrower.

69
00:04:25.450 --> 00:04:29.630
[LAUGH] And I get a capitalized
flame thrower, that's great.

70
00:04:29.630 --> 00:04:32.230
I've got a function called capitalize,
I can use it all day long.

71
00:04:32.230 --> 00:04:35.609
I've got all these little functions I've
made based on other little functions,

72
00:04:36.730 --> 00:04:37.600
is it still frozen.?

73
00:04:39.360 --> 00:04:42.810
Okay, cool, so
based on other little functions,

74
00:04:42.810 --> 00:04:44.620
and I want to use those
functions everywhere.

75
00:04:44.620 --> 00:04:48.930
They're like my main jam, and
the point is that, is this red?

76
00:04:48.930 --> 00:04:52.570
&gt;&gt; Student: It locked up.

77
00:04:52.570 --> 00:04:54.135
&gt;&gt; Brian Lonsdorf: Why did I do?

78
00:04:54.135 --> 00:05:00.277
I hit it and my, all right when I said
main jam I was like [SOUND] [LAUGH].

79
00:05:00.277 --> 00:05:04.960
So, but what if I try to capitalize
a container of a flamethrower?

80
00:05:04.960 --> 00:05:06.310
It's not going to work, right?

81
00:05:06.310 --> 00:05:09.310
Capitalize works on
a string not a container.

82
00:05:09.310 --> 00:05:14.950
Functions don't take objects, they take
standard values usually or maybe this one

83
00:05:14.950 --> 00:05:17.990
takes an object but obviously it doesn't
because it takes a string right above it.

84
00:05:17.990 --> 00:05:21.750
So we want to capitalize or
flamethrower but

85
00:05:21.750 --> 00:05:24.250
we can't when we put it in
a container that's a bummer.

86
00:05:24.250 --> 00:05:27.640
Now you might be asking yourself why would
I put in a container that sounds crazy,

87
00:05:27.640 --> 00:05:31.090
but we'll get to that just hang
with me for a few more slides.

88
00:05:31.090 --> 00:05:34.050
We'll talk about why we're putting
flamethrower in a container,

89
00:05:34.050 --> 00:05:35.360
why would you put your flamethrower.

