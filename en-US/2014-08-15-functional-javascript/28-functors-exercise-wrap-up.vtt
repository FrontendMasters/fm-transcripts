WEBVTT

1
00:00:00.000 --> 00:00:04.582
[MUSIC]

2
00:00:04.582 --> 00:00:05.147
&gt;&gt; Speaker 1: Hey, Brian.

3
00:00:05.147 --> 00:00:06.444
&gt;&gt; Brian: Yo.

4
00:00:06.444 --> 00:00:11.324
&gt;&gt; Speaker 1: You've got one
question that asks if there's any

5
00:00:11.324 --> 00:00:14.933
way to get the value out of a functor?

6
00:00:14.933 --> 00:00:15.870
&gt;&gt; Brian: That's a great, great question.

7
00:00:15.870 --> 00:00:20.502
Let's move on-
&gt;&gt; Speaker 1: He requests to go over

8
00:00:20.502 --> 00:00:23.804
exercise three again cuz
someone's still stuck on it.

9
00:00:23.804 --> 00:00:25.775
&gt;&gt; Brian: Someone's still
stuck on exercise three?

10
00:00:25.775 --> 00:00:27.159
Let's see.
&gt;&gt; Speaker 1: You can go back to

11
00:00:27.159 --> 00:00:30.309
yours if you don't want to on mine.

12
00:00:30.309 --> 00:00:32.940
&gt;&gt; Brian: Yeah, here we go.

13
00:00:32.940 --> 00:00:34.110
Let's do that.

14
00:00:34.110 --> 00:00:36.110
I'm gonna talk about
getting the value out.

15
00:00:36.110 --> 00:00:39.070
In short, no.

16
00:00:39.070 --> 00:00:41.776
Why if it wasn't there
would it be there later?

17
00:00:41.776 --> 00:00:44.550
[LAUGH] You're like,
this might not be there.

18
00:00:44.550 --> 00:00:47.030
And then later you're like,
it's cool, it's there.

19
00:00:47.030 --> 00:00:48.130
Boom, right?

20
00:00:48.130 --> 00:00:51.420
If you're going to put it in a maybe,
it's not just gonna materialize later.

21
00:00:51.420 --> 00:00:53.210
If it's null here,
it's gonna be null there.

22
00:00:54.970 --> 00:00:59.480
And the point is, the reason for that is
not like you're mapping functions over it.

23
00:00:59.480 --> 00:01:02.550
Those functions won't run,
it just doesn't do anything.

24
00:01:02.550 --> 00:01:04.080
It just skips your whole
app at that point.

25
00:01:04.080 --> 00:01:06.440
Every time you map over,
it just doesn't do anything.

26
00:01:06.440 --> 00:01:09.914
So if you have a value that may be null,
and you put it in a maybe,

27
00:01:09.914 --> 00:01:13.656
you don't take it out because you're
just putting in something and

28
00:01:13.656 --> 00:01:15.510
taking it back out for no reason.

29
00:01:15.510 --> 00:01:19.480
You've lost all the benefit, you keep it
there to let everybody know it's there.

30
00:01:19.480 --> 00:01:24.980
And then eventually,
I'm answering the question about,

31
00:01:24.980 --> 00:01:26.470
do you get the value out of the maybe?

32
00:01:26.470 --> 00:01:28.420
Or how do you get
the value out of the maybe?

33
00:01:28.420 --> 00:01:33.370
You will eventually do something with it,
whether it's put it on a screen,

34
00:01:33.370 --> 00:01:39.440
log it out, fill in the URL bar,
something, make an API call.

35
00:01:39.440 --> 00:01:41.529
Something will happen with
the value inside the maybe.

36
00:01:42.800 --> 00:01:45.730
So when it gets there,
you either run it or you don't.

37
00:01:45.730 --> 00:01:48.810
But you don't take it out in
the middle of your composition.

38
00:01:48.810 --> 00:01:53.640
I was gonna go over three again, right?

39
00:01:55.540 --> 00:01:59.900
So let's do a step by
step one of this again.

40
00:01:59.900 --> 00:02:03.110
All right, so
example three asks us to do the same.

41
00:02:03.110 --> 00:02:04.220
I'm glad we're doing this, by the way.

42
00:02:04.220 --> 00:02:07.040
This is the hardest part of the class,
right here, right now.

43
00:02:07.040 --> 00:02:11.230
That's why I was so
serious about us knowing this,

44
00:02:11.230 --> 00:02:13.590
asking questions, spending our time on it.

45
00:02:13.590 --> 00:02:16.320
There's gonna be a ton more functors.

46
00:02:16.320 --> 00:02:19.180
There's nothing you need to know
more than I just map over it.

47
00:02:19.180 --> 00:02:20.288
Done, done, done.

48
00:02:20.288 --> 00:02:24.050
So all right,
we have safeGet and head, and

49
00:02:24.050 --> 00:02:28.740
we're gonna try to find
the first initial of the user.

50
00:02:28.740 --> 00:02:30.040
So what's happening?

51
00:02:30.040 --> 00:02:35.260
In our exercise three, we're getting
the user, which is this data right here.

52
00:02:35.260 --> 00:02:37.290
So we're gonna use
safeGet to get its name.

53
00:02:37.290 --> 00:02:44.020
So I know I need to call safeGet with
name to pull the name out of the user.

54
00:02:46.240 --> 00:02:49.920
If you hadn't been doing the other ones,
we have this get function, and

55
00:02:49.920 --> 00:02:53.630
this is just the safe version of that,
because it returns us a maybe.

56
00:02:53.630 --> 00:02:57.370
Because it might not be there whenever
you pluck the value, or get the value,

57
00:02:57.370 --> 00:03:00.890
or grab the property of the user.

58
00:03:00.890 --> 00:03:03.090
This name might not be there,
it might be null.

59
00:03:03.090 --> 00:03:06.310
&gt;&gt; Speaker 3: You said in the console,
the one you showed.

60
00:03:06.310 --> 00:03:09.780
&gt;&gt; Brian: Yeah, here it is, safeGet.

61
00:03:09.780 --> 00:03:15.410
Name on id two, three.

62
00:03:15.410 --> 00:03:20.564
There is no name there, ours, SafeGet.

63
00:03:20.564 --> 00:03:22.660
Do I have to run it first?

64
00:03:25.480 --> 00:03:26.330
There it is.

65
00:03:26.330 --> 00:03:27.410
We got a value of undefined.

66
00:03:27.410 --> 00:03:30.370
Let me call to string on that so
you guys can see it better.

67
00:03:30.370 --> 00:03:32.440
These two strings shouldn't be normal.

68
00:03:32.440 --> 00:03:33.650
Just want you guys to know that.

69
00:03:33.650 --> 00:03:40.341
It's just because we're in JS Bin,
but if we have a name.

70
00:03:40.341 --> 00:03:42.125
I don't know, Gman.

71
00:03:42.125 --> 00:03:46.297
[LAUGH]
So,

72
00:03:50.816 --> 00:03:51.368
&gt;&gt; Brian: Let's do my name.

73
00:03:55.305 --> 00:03:58.576
&gt;&gt; Brian: So maybe Brian, so we've got
this user with the name Brian, and

74
00:03:58.576 --> 00:03:59.432
we got the name.

75
00:03:59.432 --> 00:04:01.540
It comes out as maybe Brian.

76
00:04:01.540 --> 00:04:03.964
But if I gave the user with no name,
I got a maybe null.

77
00:04:03.964 --> 00:04:08.540
So safeGet, we'll put it in
a maybe because it knows it may or

78
00:04:08.540 --> 00:04:10.030
may not be there.

79
00:04:10.030 --> 00:04:13.990
That gives us a way to tell
the rest of our program and

80
00:04:13.990 --> 00:04:15.250
the rest of the programmers and

81
00:04:15.250 --> 00:04:19.940
our future self, this thing is going
to be null later, and I've marked it.

82
00:04:19.940 --> 00:04:22.502
I put it in this box that says
now everything's impossible for

83
00:04:22.502 --> 00:04:23.345
you to understand.

84
00:04:23.345 --> 00:04:27.400
So just kidding.

85
00:04:27.400 --> 00:04:31.460
[LAUGH] So we have safeGet.

86
00:04:31.460 --> 00:04:32.040
We've got the name.

87
00:04:32.040 --> 00:04:33.700
We've got this maybe Brian.

88
00:04:33.700 --> 00:04:36.173
Or maybe Albert, but what do I want to do?

89
00:04:36.173 --> 00:04:39.353
I want to call head to get
the first initial of that user.

90
00:04:39.353 --> 00:04:44.630
All right, cuz it'll grab the first thing,
so I want to call head on that.

91
00:04:44.630 --> 00:04:47.306
Well, that doesn't work,
because safeGet is a maybe Brian.

92
00:04:47.306 --> 00:04:52.660
I can't call head on a maybe Brian,
that doesn't work.

93
00:04:54.200 --> 00:04:55.790
I don't even know what that does.

94
00:04:57.080 --> 00:05:01.210
But I can map over it, there it is.

95
00:05:01.210 --> 00:05:04.820
I get b, again with these two strings.

96
00:05:05.910 --> 00:05:10.420
So it mapped Ted maybe over Brian, and

97
00:05:10.420 --> 00:05:16.706
the way that gives me safety is if I map
head over maybe null, nothing happens.

98
00:05:16.706 --> 00:05:21.334
If we call toString, maybe null,
it's fine, doesn't break.

99
00:05:21.334 --> 00:05:28.960
[LAUGH] So instead of head,
I have to map head over that, right?

100
00:05:28.960 --> 00:05:31.890
And something that's been
tripping us up throughout.

101
00:05:31.890 --> 00:05:36.860
But I'm glad, because, yeah, [LAUGH] I'm
glad because you guys are gonna have to

102
00:05:36.860 --> 00:05:39.590
hit this a lot if you're trying
to write programs like this.

103
00:05:39.590 --> 00:05:41.480
This is probably not the way to do this.

104
00:05:41.480 --> 00:05:46.385
You wanna partially apply map and
compose these things together, and

105
00:05:46.385 --> 00:05:48.210
it'll be run later.

106
00:05:48.210 --> 00:05:50.250
Everything will be run
later by the callers.

107
00:05:50.250 --> 00:05:53.000
You just wanna build up your app
of functions glued together.

108
00:05:53.000 --> 00:05:56.550
You don't wanna be running things left and
right while you're making your app.

109
00:05:56.550 --> 00:05:57.250
There you go.

110
00:05:57.250 --> 00:05:59.452
So that's our solution.

111
00:05:59.452 --> 00:06:05.770
So I wanna address one
thing before we go on.

112
00:06:05.770 --> 00:06:10.410
And that is that I was just,
what was your name?

113
00:06:10.410 --> 00:06:11.632
I forgot, the blue.

114
00:06:11.632 --> 00:06:12.367
&gt;&gt; Phil: Me?

115
00:06:12.367 --> 00:06:12.959
&gt;&gt; Brian: Yeah.

116
00:06:12.959 --> 00:06:13.719
&gt;&gt; Phil: Phil.

117
00:06:13.719 --> 00:06:17.969
&gt;&gt; Brian: I was just talking to Phil,
and we were talking about, so,

118
00:06:17.969 --> 00:06:22.729
first of all, almost always,
my app is just a bunch of functions,

119
00:06:22.729 --> 00:06:25.453
right, glued together, whatever.

120
00:06:25.453 --> 00:06:29.930
And I'm gonna get one piece
of data from outside.

121
00:06:29.930 --> 00:06:32.900
I'm not getting 16 different
inputs coming into my function.

122
00:06:32.900 --> 00:06:34.351
I'm just gonna get something.

123
00:06:34.351 --> 00:06:40.489
For instance,
let's say I'm gonna get an API call.

124
00:06:40.489 --> 00:06:45.469
Let's do API.get /users/3.

125
00:06:45.469 --> 00:06:49.250
So that's my input to my app.

126
00:06:49.250 --> 00:06:51.080
So I did an API call to get a user.

127
00:06:51.080 --> 00:06:52.140
Now I have data in my app.

128
00:06:52.140 --> 00:06:54.110
My app's come alive with this data.

129
00:06:54.110 --> 00:06:59.330
I'm not getting,
that's my entry point, and

130
00:06:59.330 --> 00:07:03.010
once I've got my data,
let's say that user might not be there.

131
00:07:03.010 --> 00:07:08.750
I'll just drop them in a maybe, or
her in a maybe, and then I'll map

132
00:07:08.750 --> 00:07:14.490
the rest of [LAUGH] my app over it.

133
00:07:14.490 --> 00:07:20.340
Maybe that's UsersController, whatever.

134
00:07:20.340 --> 00:07:25.610
But the point is,
once I map the rest of my app over that,

135
00:07:25.610 --> 00:07:29.078
it's either not gonna run at all,
or it's gonna run and that's it.

136
00:07:29.078 --> 00:07:35.220
So you're not dealing with maybe,
man, maybes all over the place.

137
00:07:35.220 --> 00:07:38.660
Once you map once, you really go to
the rest of your app, typically.

138
00:07:38.660 --> 00:07:39.850
Now I could do this, too.

139
00:07:39.850 --> 00:07:42.240
If I wanted it to,
I could map other stuff.

140
00:07:44.470 --> 00:07:47.000
But typically,
this is what it's gonna look like.

141
00:07:47.000 --> 00:07:49.590
You have the rest of your app to map over.

142
00:07:49.590 --> 00:07:51.890
If it's null, you don't wanna run it.

143
00:07:51.890 --> 00:07:57.970
Now one other thing that we were talking
about was, let me put a function here.

144
00:08:01.000 --> 00:08:03.800
I'd do it the other syntax way,
cuz it's easier, right?

145
00:08:05.450 --> 00:08:06.510
I'm a user here.

146
00:08:08.750 --> 00:08:11.060
Now I have a user,
I can be, var u is blah.

147
00:08:11.060 --> 00:08:13.539
And I can do imperative code.

148
00:08:13.539 --> 00:08:16.110
[LAUGH] But

149
00:08:16.110 --> 00:08:20.150
that's what I'm saying is now you have
your user for the rest of your stuff.

150
00:08:20.150 --> 00:08:21.260
If it's not there, if it's there.

151
00:08:21.260 --> 00:08:26.350
Well, I guess I have to put this in a
maybe, but we'll get to this in a second.

152
00:08:26.350 --> 00:08:29.690
But the idea is that you
don't have to be point free.

153
00:08:29.690 --> 00:08:33.740
You don't have to make it
without object or arguments.

154
00:08:33.740 --> 00:08:36.130
Your maybe value may be passed in there,

155
00:08:36.130 --> 00:08:39.330
and you can run the rest
of your app in here, too.

156
00:08:39.330 --> 00:08:42.003
So I can make some call to

157
00:08:42.003 --> 00:08:48.170
UsersController.renderIndex with my user,
done.

158
00:08:48.170 --> 00:08:49.470
Or if I wanted to get fancy,

159
00:08:49.470 --> 00:08:52.900
I could bring it back out to
being a first class function.

160
00:08:54.060 --> 00:08:54.560
And now we're good.

161
00:08:54.560 --> 00:08:59.190
All right, back to the presentation,
back to the future.

162
00:08:59.190 --> 00:09:05.080
&gt;&gt; Speaker 5: I had a couple questions
about that stuff that you just showed.

163
00:09:05.080 --> 00:09:05.630
&gt;&gt; Brian: Sure.

164
00:09:05.630 --> 00:09:08.422
&gt;&gt; Speaker 5: First is, what is API?

165
00:09:08.422 --> 00:09:14.241
And then, because the video was frozen,
and then the second is, yeah.

166
00:09:14.241 --> 00:09:15.738
&gt;&gt; Brian: Okay.

167
00:09:15.738 --> 00:09:17.900
&gt;&gt; Speaker 5: You can
answer that first and then.

168
00:09:17.900 --> 00:09:22.060
&gt;&gt; Brian: API was just a fictional API
library I was using to get some user from

169
00:09:22.060 --> 00:09:22.760
an API call.

170
00:09:22.760 --> 00:09:23.390
It's not real.

171
00:09:23.390 --> 00:09:25.440
[LAUGH] And the second one.

172
00:09:25.440 --> 00:09:29.190
&gt;&gt; Speaker 5: Paul Kimmel was asking,
doesn't the API being generally a sync,

173
00:09:29.190 --> 00:09:30.935
break the rules of statelessness?

174
00:09:32.660 --> 00:09:33.288
&gt;&gt; Brian: Hold on, my friend.

175
00:09:33.288 --> 00:09:36.012
&gt;&gt; Speaker 5: [LAUGH]
&gt;&gt; Brian: [LAUGH] You're this close.

176
00:09:36.012 --> 00:09:40.307
We're about to learn about
functors that run in the future.

177
00:09:40.307 --> 00:09:44.310
All right, so hang tight.

