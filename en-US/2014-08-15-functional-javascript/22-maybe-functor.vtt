WEBVTT

1
00:00:00.000 --> 00:00:04.531
[MUSIC]

2
00:00:04.531 --> 00:00:07.416
&gt;&gt; Brian Lonsdorf: So a functor,
you guys have just learned about functors.

3
00:00:07.416 --> 00:00:13.483
Any object or data structure that you can
map over, that implements a map function,

4
00:00:13.483 --> 00:00:17.340
and there are laws, so
it also has to obey these laws.

5
00:00:17.340 --> 00:00:20.377
But think of it as just,
if it has a map function it's, a functor.

6
00:00:20.377 --> 00:00:22.018
Unless you're jQuery and
you don't do it right.

7
00:00:22.018 --> 00:00:26.845
[LAUGH] Resig,
somebody went to the bathroom,

8
00:00:26.845 --> 00:00:31.919
I don't wanna wait,
in case they're pooping,

9
00:00:31.919 --> 00:00:36.590
but I feel like this
is a really important.

10
00:00:36.590 --> 00:00:41.920
Okay, so we have,
that was really embarrassing.

11
00:00:41.920 --> 00:00:43.510
I shouldn't have said that.

12
00:00:43.510 --> 00:00:46.881
Down to the bottom get
the get the name parts, cool.

13
00:00:46.881 --> 00:00:50.370
All right, I wanted to wait for you,
man, I didn't want you to miss this.

14
00:00:50.370 --> 00:00:53.090
Here's here, I just defined a functor.

15
00:00:53.090 --> 00:00:54.698
It's anything with a map method.

16
00:00:54.698 --> 00:01:01.003
All right, so, we've got a problem now.

17
00:01:01.003 --> 00:01:04.574
Let's put this into some real use,
not just put stuff into containers for

18
00:01:04.574 --> 00:01:05.158
no reason.

19
00:01:05.158 --> 00:01:08.870
Cuz container didn't do anything for us,
it just made things more complicated.

20
00:01:10.210 --> 00:01:15.040
So here we can actually get
an element with the query selector,

21
00:01:15.040 --> 00:01:17.930
so I pass the full name ID selector,

22
00:01:17.930 --> 00:01:21.780
into document query selector,
which will get the element.

23
00:01:21.780 --> 00:01:23.700
Then we'll get the value out of that.

24
00:01:23.700 --> 00:01:25.850
We'll call dot value on it, basically.

25
00:01:25.850 --> 00:01:30.780
And then, we're going to split
it on I guess, space, right?

26
00:01:30.780 --> 00:01:36.240
So whatever you type into first full name
will come back with like an array of your

27
00:01:36.240 --> 00:01:38.960
first, last, or middle or
something like that, right?

28
00:01:38.960 --> 00:01:42.300
So we're gonna name parts from this field.

29
00:01:43.350 --> 00:01:45.770
What if query,
what if it doesn't find full name?

30
00:01:45.770 --> 00:01:46.600
What's up.
&gt;&gt; Speaker 2: Hey, Brian,

31
00:01:46.600 --> 00:01:50.210
we got a couple questions from the chat.
&gt;&gt; Brian Lonsdorf: I'm glad, thank you,

32
00:01:50.210 --> 00:01:53.470
keep asking questions.
&gt;&gt; Speaker 2: All right,

33
00:01:53.470 --> 00:01:57.890
Danielle B is you can do a quick
definition again, on partial applications.

34
00:01:57.890 --> 00:02:01.728
She's not sure what that means.
&gt;&gt; Brian Lonsdorf: It's just giving

35
00:02:01.728 --> 00:02:05.477
a curried function,
less arguments than it takes.

36
00:02:05.477 --> 00:02:11.810
So you're partially applying it because
you're only giving it part of it.

37
00:02:11.810 --> 00:02:14.170
There is some technical details that
you may want to say kerning is this and

38
00:02:14.170 --> 00:02:15.172
partial application is that.

39
00:02:15.172 --> 00:02:18.610
I use them interchangeably,
it doesn't really matter to me.

40
00:02:18.610 --> 00:02:23.100
So yeah, you can you could just
give split, for instance, right

41
00:02:23.100 --> 00:02:27.580
there is being partially applied with
the space, instead of the whole thing,

42
00:02:27.580 --> 00:02:33.490
instead of the space in
the string which would run it.

43
00:02:33.490 --> 00:02:35.260
So what if it doesn't find?

44
00:02:36.730 --> 00:02:39.120
Is there other questions?
&gt;&gt; Speaker 2: There might have been but,

45
00:02:40.380 --> 00:02:43.930
do we query so
we don't have to check for existence?

46
00:02:43.930 --> 00:02:49.060
Or is the lack of existence check,
a result of query?

47
00:02:49.060 --> 00:02:51.203
&gt;&gt; Brian Lonsdorf: They don't relate.

48
00:02:51.203 --> 00:02:57.800
You query because you
want to concisely define,

49
00:02:57.800 --> 00:03:03.600
in a generic way,
a function by giving it some some data.

50
00:03:03.600 --> 00:03:06.650
Like if I wanted to,
right there on get value,

51
00:03:06.650 --> 00:03:11.360
I've made a new function by only
giving it its first argument.

52
00:03:13.300 --> 00:03:16.870
All right, so yeah, but
we're gonna get in the nulls.

53
00:03:16.870 --> 00:03:19.802
This is just the slide one of them
pesky nulls, there's another one.

54
00:03:19.802 --> 00:03:26.380
So if query selector doesn't find
full name, like if we misspell it or

55
00:03:26.380 --> 00:03:29.820
we forget that underscore,
it's gotta be null on getElement.

56
00:03:29.820 --> 00:03:33.530
And then when I call get value, it's
gonna be like, I can't get value of null.

57
00:03:33.530 --> 00:03:34.240
I'm just going to die.

58
00:03:34.240 --> 00:03:37.070
And if you try to split that,
it's just going to go down the tubes,

59
00:03:37.070 --> 00:03:38.490
down the drain right?

60
00:03:38.490 --> 00:03:40.976
Boom, is what I mean.

61
00:03:40.976 --> 00:03:43.639
[LAUGH]
So

62
00:03:43.639 --> 00:03:46.320
it blows up because there
needs to be a null check.

63
00:03:46.320 --> 00:03:49.670
Now, we could implement some crazy
function that wraps everything and

64
00:03:49.670 --> 00:03:53.930
say, all right, if it gets the value
combinator, check null first, and

65
00:03:53.930 --> 00:03:55.090
then run these functions.

66
00:03:55.090 --> 00:03:56.370
And that's possible, it's functional.

67
00:03:56.370 --> 00:03:57.060
Do it.

68
00:03:57.060 --> 00:04:01.360
But there's a cooler way that gives
you some theory and stuff behind it.

69
00:04:03.320 --> 00:04:05.900
Let's me our first functor.

70
00:04:05.900 --> 00:04:09.275
I made these baseball looking cards for
each one.

71
00:04:09.275 --> 00:04:11.258
[LAUGH] They're like from 1990,
1991 or something or 1989.

72
00:04:11.258 --> 00:04:12.275
Looks like Saved by the Bell.

73
00:04:12.275 --> 00:04:17.316
[LAUGH] Anyway, so
this is gonna capture a null check.

74
00:04:17.316 --> 00:04:20.186
This is, it's the maybe functor, right?

75
00:04:20.186 --> 00:04:24.575
The value may or may not be there,
and you can see a bunch of different

76
00:04:24.575 --> 00:04:28.579
implementations and scholar for
instance, it's option and

77
00:04:28.579 --> 00:04:33.770
you have some and none in high school
you're gonna have just and nothing.

78
00:04:33.770 --> 00:04:38.390
We gonna simplify this a bit by rolling
these subclasses and just the one type.

79
00:04:38.390 --> 00:04:42.420
Because it's easier to just
kind of grok at first, but

80
00:04:42.420 --> 00:04:45.570
later on it'll work, you'll get it works
like either, when we look at that.

81
00:04:46.710 --> 00:04:50.330
So the idea here is that, you may or
may not have a value in your container.

82
00:04:51.490 --> 00:04:54.320
Let's look at that.

83
00:04:54.320 --> 00:04:59.670
And again this is a little bit
of a simplified version, but

84
00:04:59.670 --> 00:05:02.899
all I'm doing is I took out the if
not null, and if not undefined.

85
00:05:04.390 --> 00:05:06.350
But right now it's just
checking if it's truthy.

86
00:05:07.810 --> 00:05:12.750
But the idea is that if it's there,
we're gonna apply the function and if not,

87
00:05:12.750 --> 00:05:14.560
we're just going to return null, whatever.

88
00:05:14.560 --> 00:05:15.060
Don't do it.

89
00:05:16.410 --> 00:05:18.800
So now if we map capitalize
over our flamethrower,

90
00:05:18.800 --> 00:05:20.980
we get is just like a container.

91
00:05:20.980 --> 00:05:23.390
But we have a null check in our map.

92
00:05:23.390 --> 00:05:26.780
It's gonna do an our null check
every time we map over it.

93
00:05:26.780 --> 00:05:28.610
So if we call capitalize a maybe null,

94
00:05:28.610 --> 00:05:31.940
it doesn't run it.
&gt;&gt; Speaker 3: So what you're saying is the

95
00:05:31.940 --> 00:05:35.540
underscore maybe is now your container.
&gt;&gt; Brian Lonsdorf: Yes.

96
00:05:35.540 --> 00:05:37.240
&gt;&gt; Speaker 3: You've redefined

97
00:05:37.240 --> 00:05:39.270
the container
&gt;&gt; Brian Lonsdorf: Yes, well in

98
00:05:39.270 --> 00:05:41.823
addition to container, I've defined maybe.
&gt;&gt; Speaker 3: Okay,

99
00:05:41.823 --> 00:05:43.400
in addition to that.
&gt;&gt; Brian Lonsdorf: And

100
00:05:43.400 --> 00:05:46.430
by the way, I have this underscore
maybe and then down there I'm just

101
00:05:46.430 --> 00:05:49.640
calling maybe without underscores, that's
my constructor helper the calls new.

102
00:05:51.050 --> 00:05:52.330
But this is pretty cool.

103
00:05:52.330 --> 00:05:52.960
Check this out.

104
00:05:54.930 --> 00:05:59.652
If you look at how we're calling this
function on the value inside the maybe,

105
00:05:59.652 --> 00:06:02.520
this.val is the property inside maybe,
we're in its prototype,

106
00:06:02.520 --> 00:06:06.045
we can look at its internal value and
decide whether or not to run this.

107
00:06:06.045 --> 00:06:09.170
We've abstracted function application.

108
00:06:09.170 --> 00:06:10.340
That is so powerful.

109
00:06:10.340 --> 00:06:13.476
We can say,
you wanna run this function on me?

110
00:06:13.476 --> 00:06:14.036
No.

111
00:06:14.036 --> 00:06:17.380
[LAUGH] So this is pretty great.

112
00:06:18.660 --> 00:06:22.780
Every step of the way, if you put your
value in a maybe, it will do a null check.

113
00:06:22.780 --> 00:06:25.550
And it won't run if it's null.

114
00:06:25.550 --> 00:06:30.420
Now, let's look at another example,
I suppose.

115
00:06:30.420 --> 00:06:31.850
This is one just using compose.

116
00:06:31.850 --> 00:06:36.140
So if we have this function,
that's just going to find the first match.

117
00:06:36.140 --> 00:06:40.430
And we do dogsup,
there is no match of cat and dogsup.

118
00:06:40.430 --> 00:06:44.030
So it blows up because we
can't call first or no.

119
00:06:44.030 --> 00:06:45.970
Are people still being tripped up?

120
00:06:45.970 --> 00:06:47.840
I know this is pretty new for you guys.

121
00:06:47.840 --> 00:06:50.520
You just saw compose,
you just saw partial application.

122
00:06:50.520 --> 00:06:51.720
We're using both.

123
00:06:51.720 --> 00:06:56.760
We're partially applying match,
which is waiting for a string to tell of.

124
00:06:56.760 --> 00:06:59.240
So it's gonna be a lot of new information.

125
00:06:59.240 --> 00:07:01.120
But I want you guys to
kind of get the stuff.

126
00:07:01.120 --> 00:07:01.940
Be able to take it home.

127
00:07:01.940 --> 00:07:04.190
Play with the, do the exercises.

128
00:07:04.190 --> 00:07:06.560
And get a real feel for it.

129
00:07:06.560 --> 00:07:09.060
But right now,
ask me if you have questions.

130
00:07:09.060 --> 00:07:10.890
We'll get through it.

131
00:07:10.890 --> 00:07:15.910
So if it blows up, right in between
that match and first, we stuck a maybe.

132
00:07:15.910 --> 00:07:17.031
And then we mapped first over it.

133
00:07:17.031 --> 00:07:18.379
Let's go back and forth a few times.

134
00:07:18.379 --> 00:07:21.605
All right, camera one, camera two,
camera one, camera two.

135
00:07:21.605 --> 00:07:25.475
I'll hold it on here for a minute,

136
00:07:25.475 --> 00:07:29.625
then go back so that everybody sees.

137
00:07:29.625 --> 00:07:33.233
[LAUGH]
&gt;&gt; Speaker 3: Wouldn't you want to somehow

138
00:07:33.233 --> 00:07:41.980
wrap what you're passing in?
&gt;&gt; Brian Lonsdorf: Well, dogsup is there.

139
00:07:41.980 --> 00:07:44.338
But the match may return a null.

140
00:07:44.338 --> 00:07:50.059
It might not match cat, which returns null
in JavaScript cuz match is, it'll either

141
00:07:50.059 --> 00:07:55.481
return the match or a null, or actually
returns an array of, anyway, or a null.

142
00:07:55.481 --> 00:07:57.625
Which is stupid cuz it should
just return empty array,

143
00:07:57.625 --> 00:07:59.310
it would have worked like maybe.

144
00:07:59.310 --> 00:08:05.370
But anyway, the point is that once, at
the point of when it becomes null, like at

145
00:08:05.370 --> 00:08:09.500
this point right here, I keep forgetting
about this wonderful green thing.

146
00:08:09.500 --> 00:08:12.255
So at this point right here,
we might have a null.

147
00:08:12.255 --> 00:08:16.080
So we're gonna drop it in the maybe
by running the maybe constructor.

148
00:08:16.080 --> 00:08:23.760
It's just, if we look a little bit back,
maybe is just a function, right?

149
00:08:23.760 --> 00:08:26.030
If I, down to the bottom,
where I put the flamethrower and

150
00:08:26.030 --> 00:08:29.000
maybe, I'm just calling
maybe with flamethrower.

151
00:08:29.000 --> 00:08:31.430
So I could just drop maybe in
the middle of a composition and

152
00:08:31.430 --> 00:08:33.820
whatever is there goes into maybe.

153
00:08:33.820 --> 00:08:38.410
So here, if match might return
a null in between match and first,

154
00:08:38.410 --> 00:08:42.300
and there's going to be null right here,
and it's blowing up my app.

155
00:08:43.460 --> 00:08:45.190
I could drop maybe in there,
and put it in there.

156
00:08:46.310 --> 00:08:50.460
And then I can map first over it,
because I can't call first on maybe.

157
00:08:50.460 --> 00:08:53.680
I have to map first over maybe.

158
00:08:53.680 --> 00:08:55.170
If I don't not first over maybe,

159
00:08:55.170 --> 00:08:57.818
first will be like I can't,
it'll be like bracket or something,

160
00:08:57.818 --> 00:09:00.990
cuz it's gonna get the string of
the object and try to be object, object.

161
00:09:00.990 --> 00:09:03.698
Anyway, so
the point is that you have a null, and

162
00:09:03.698 --> 00:09:06.222
we're gonna drop it in
maybe a map over that.

163
00:09:06.222 --> 00:09:08.150
We're gonna see this more and more.

164
00:09:09.180 --> 00:09:12.340
But we're about to do some exercises so
you guys can play with yourself.

165
00:09:12.340 --> 00:09:17.490
But we need to lock this down,
cuz this is easiest functor.

