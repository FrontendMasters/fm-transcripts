WEBVTT

1
00:00:00.060 --> 00:00:05.416
[MUSIC]

2
00:00:05.416 --> 00:00:08.929
&gt;&gt; Brian Lonsdorf: IO,
this one's pretty crazy.

3
00:00:08.929 --> 00:00:10.987
Are you guys ready for pure IO?

4
00:00:10.987 --> 00:00:17.013
[LAUGH] This is a functor, but
instead of a number or a string or

5
00:00:17.013 --> 00:00:23.140
a list inside it,
it's gonna put a function inside it.

6
00:00:23.140 --> 00:00:25.459
That's pretty crazy, all right [LAUGH].

7
00:00:25.459 --> 00:00:27.590
So it's like a computation builder.

8
00:00:27.590 --> 00:00:33.990
Every time you map over in IO, it's
gonna basically secretly compose inside.

9
00:00:33.990 --> 00:00:35.730
So we'll see it in action.

10
00:00:35.730 --> 00:00:37.080
This is gonna get crazy.

11
00:00:37.080 --> 00:00:42.260
But until now,
we've seen values that are just

12
00:00:42.260 --> 00:00:46.060
like kind of standard values that are data
in your app going through your app.

13
00:00:46.060 --> 00:00:49.660
IO is taking a function and
we'll look at that and

14
00:00:49.660 --> 00:00:52.100
it's gonna be a little bit
different in that regard.

15
00:00:52.100 --> 00:00:57.860
Okay but yeah you can use it
to obtain side effects and

16
00:00:57.860 --> 00:01:01.230
eventually it just returns your function,
you call runIO on.

17
00:01:01.230 --> 00:01:03.990
So, it's just like a lazy computation,
your app doesn't do anything,

18
00:01:05.910 --> 00:01:09.920
it just builds up a computation for
you then you run it.

19
00:01:09.920 --> 00:01:11.556
So yeah.

20
00:01:11.556 --> 00:01:18.728
Let's look at this, so if I have an IO of
a function that gets the e-mail's value.

21
00:01:18.728 --> 00:01:21.610
I probably should've used
document create selector.

22
00:01:21.610 --> 00:01:23.528
Anyway, I'm using jQuery here.

23
00:01:23.528 --> 00:01:26.959
So shout out to map rules.

24
00:01:26.959 --> 00:01:28.130
[LAUGH] So,

25
00:01:28.130 --> 00:01:33.950
the IO is taking a function that returns
us whatever is in the email field's value.

26
00:01:33.950 --> 00:01:40.520
Now, if I wanna say like welcome, whatever
your name is, I can cat welcome to.

27
00:01:40.520 --> 00:01:43.420
I have to map over it
because it's inside the IO.

28
00:01:43.420 --> 00:01:46.750
So what I'm doing is mapping
a function over the function.

29
00:01:46.750 --> 00:01:47.310
It's kind of weird.

30
00:01:47.310 --> 00:01:50.020
You don't think of it that way though.

31
00:01:50.020 --> 00:01:53.810
You map this function over
that eventual value, so it'd

32
00:01:53.810 --> 00:01:58.680
be the value of the email field just like
we've been seeing, that goes into concat.

33
00:01:59.770 --> 00:02:03.446
So we'll say like welcomesteve@foodie.net.

34
00:02:03.446 --> 00:02:08.760
[LAUGH] I don't know, so it builds up
a really lazy computation at the end.

35
00:02:08.760 --> 00:02:10.020
You call runIO with it.

36
00:02:11.310 --> 00:02:12.950
See another example.

37
00:02:12.950 --> 00:02:14.087
That's runIO.

38
00:02:14.087 --> 00:02:20.140
[LAUGH] You've made your
computation throughout your app.

39
00:02:20.140 --> 00:02:24.600
And instead of it running,
it just built more things up.

40
00:02:24.600 --> 00:02:26.490
And then, you finally call runIO with it.

41
00:02:28.070 --> 00:02:30.218
So let's see here.

42
00:02:30.218 --> 00:02:32.675
If I wanna get the preferences
out of a store,

43
00:02:32.675 --> 00:02:34.820
let's look at this part right up here.

44
00:02:36.530 --> 00:02:41.180
If I get the preferences out a store,
let's pretend this thing returns me an IO,

45
00:02:41.180 --> 00:02:44.440
like if I'm getting it out
of the local data storage or

46
00:02:44.440 --> 00:02:46.590
whatever, it's a secret input,

47
00:02:46.590 --> 00:02:51.950
it's input into my app that I have to be
honest about, I can't just be like magic.

48
00:02:51.950 --> 00:02:55.620
There's data somewhere, it just showed up.

49
00:02:55.620 --> 00:02:59.780
It should be known that this thing is
coming from the outside world into my app.

50
00:02:59.780 --> 00:03:04.477
And I wanna flag that by
the Store.get("preferences")

51
00:03:04.477 --> 00:03:06.974
will return me IO preferences.

52
00:03:06.974 --> 00:03:10.210
It's not just gonna return me
preferences right up off the bat.

53
00:03:10.210 --> 00:03:14.190
So nothing will happen when I run my app
which is really nice for testability,

54
00:03:14.190 --> 00:03:19.700
extendibility, I can keep building
upon my app without it ever running.

55
00:03:19.700 --> 00:03:22.540
So if I map, get the background color or

56
00:03:22.540 --> 00:03:27.060
parse those preferences because they
assume presumably adjacent string.

57
00:03:27.060 --> 00:03:29.520
And we get the background color.

58
00:03:29.520 --> 00:03:32.600
Now when I run my app, nothing happens.

59
00:03:32.600 --> 00:03:37.800
I get an IO and I have to run it,
then I get my background color.

60
00:03:37.800 --> 00:03:40.740
So it's just like everything else.

61
00:03:40.740 --> 00:03:43.120
There's an intuition here
that you can kind of go with.

62
00:03:43.120 --> 00:03:44.205
Go with your gut instinct.

63
00:03:44.205 --> 00:03:47.150
What's gonna happen,
if Store.get returns an IO and

64
00:03:47.150 --> 00:03:50.110
then map over to get the background color,
who cares what's going on?

65
00:03:50.110 --> 00:03:53.390
Like it's just gonna gave me the JSON and
I'll parse it, whatever.

66
00:03:53.390 --> 00:03:56.850
But at the end, we gotta do
a special runIO to kick it off.

67
00:03:57.910 --> 00:04:02.680
&gt;&gt; Speaker 2: So if I'm assuming,
you can embed IOs within other IOs?

68
00:04:02.680 --> 00:04:03.600
&gt;&gt; Brian Lonsdorf: Yeah.

69
00:04:03.600 --> 00:04:09.860
&gt;&gt; Speaker 2: And then if you do runIO
on the one that encloses other IOs.

70
00:04:09.860 --> 00:04:11.869
Does it recursively run?

71
00:04:11.869 --> 00:04:15.908
&gt;&gt; Brian Lonsdorf: It does not-
&gt;&gt; Speaker 2: Every time you go back an IO

72
00:04:15.908 --> 00:04:17.218
then you have to-
&gt;&gt; Brian Lonsdorf: Take next

73
00:04:17.218 --> 00:04:18.008
step, next step.

74
00:04:18.008 --> 00:04:19.731
&gt;&gt; Speaker 2: Yeah,
if it's a IO, then run it.

75
00:04:19.731 --> 00:04:20.783
&gt;&gt; Brian Lonsdorf: That is correct.

76
00:04:20.783 --> 00:04:21.283
But monad solved that.

77
00:04:23.834 --> 00:04:26.730
So functors are going to do that to you.

78
00:04:26.730 --> 00:04:29.739
As you use functors you 're gonna be like
uh-oh, I have a maybe, and a maybe, and

79
00:04:29.739 --> 00:04:31.650
a maybe, or an IO, and an IO, and an IO.

80
00:04:31.650 --> 00:04:35.330
And monads allow you to join
those together, so just have one.

81
00:04:35.330 --> 00:04:39.618
And if you end up with that,
run, stop, run, stop.

82
00:04:39.618 --> 00:04:43.030
&gt;&gt; Speaker 2: So you can combine
a bunch of IO to roll them up.

83
00:04:43.030 --> 00:04:46.040
And when you do runIO, it runs them all?

84
00:04:46.040 --> 00:04:48.720
&gt;&gt; Brian Lonsdorf: It's basically,
we'll get to it with monads.

85
00:04:48.720 --> 00:04:54.139
But the answer to your question is,
if more than one IO I can make it one IO.

86
00:04:54.139 --> 00:04:55.481
And then I just run one IO.

87
00:04:55.481 --> 00:04:58.174
&gt;&gt; Speaker 2: So
it's almost like the promise interface but

88
00:04:58.174 --> 00:05:00.598
you can embed promises within promises.

89
00:05:00.598 --> 00:05:02.232
&gt;&gt; Brian Lonsdorf: That's, ooh,
gosh, I just slapped that.

90
00:05:02.232 --> 00:05:06.080
Yeah that's exactly what this is,
it's like a promise.

91
00:05:06.080 --> 00:05:09.320
And you put your functions
in your promises.

92
00:05:09.320 --> 00:05:11.311
You say then do this,
then do that, then do that.

93
00:05:11.311 --> 00:05:12.498
&gt;&gt; Speaker 2: But promises run-
&gt;&gt; Brian Lonsdorf: They'll run

94
00:05:12.498 --> 00:05:13.022
immediately.

95
00:05:13.022 --> 00:05:14.628
&gt;&gt; Speaker 2: Right, immediately,

96
00:05:14.628 --> 00:05:17.849
[CROSSTALK] this is like
lazy loading promises.

97
00:05:17.849 --> 00:05:20.172
&gt;&gt; Brian Lonsdorf: Beautiful,
that's exactly what it is.

98
00:05:20.172 --> 00:05:22.010
I'm glad that you brought that up.

99
00:05:22.010 --> 00:05:23.713
Then we're gonna talk about, actually,

100
00:05:23.713 --> 00:05:26.282
I think we're gonna talk about it
right now or right after this.

101
00:05:26.282 --> 00:05:29.310
&gt;&gt; Speaker 3: Brian, before leave
that side, there was a question.

102
00:05:29.310 --> 00:05:34.040
Why don't we need to map
GET over JSON.parse?

103
00:05:34.040 --> 00:05:39.750
&gt;&gt; Brian Lonsdorf: Because we map get
background color over those preferences.

104
00:05:39.750 --> 00:05:46.035
So that map has opened up the IO and
passed the preferences into getBgColor.

105
00:05:46.035 --> 00:05:49.990
getBigColor just gets
the preferences right off the bat.

106
00:05:51.390 --> 00:05:53.780
So, it's like a thousand maybe,
no you map over it and

107
00:05:53.780 --> 00:05:56.010
the value inside the maybe
goes in the next thing.

108
00:05:56.010 --> 00:05:57.250
It's just like that.

109
00:05:57.250 --> 00:06:00.960
You don't really think about it
as having a function inside,

110
00:06:00.960 --> 00:06:04.720
don't worry about the implementation
details, just think about it as like.

111
00:06:04.720 --> 00:06:09.890
Return me an IO and i'll just eventually
map over the value it returns.

112
00:06:11.000 --> 00:06:12.970
So does that clear that up?

113
00:06:12.970 --> 00:06:16.592
You open up the IO and boom,
there's the preferences waiting for you.

114
00:06:16.592 --> 00:06:19.850
And you just give that to getBigColor,
which we'll parse.

115
00:06:19.850 --> 00:06:21.565
Preferences, if you get it from a store,

116
00:06:21.565 --> 00:06:24.320
I was just kinda showing that it's
probably gonna be JSON string.

117
00:06:24.320 --> 00:06:26.020
So we'll parse that JSON string.

118
00:06:26.020 --> 00:06:28.570
Plus there's an example
that's this exact thing.

119
00:06:28.570 --> 00:06:29.218
Don't look at it anymore.

120
00:06:29.218 --> 00:06:30.620
All right.

121
00:06:30.620 --> 00:06:32.809
[LAUGH] I wanted to,

122
00:06:32.809 --> 00:06:39.580
last thing before we do a couple
more exercises here and that is.

123
00:06:39.580 --> 00:06:40.700
We are running low on time.

124
00:06:40.700 --> 00:06:41.910
All right.

125
00:06:41.910 --> 00:06:48.570
Last thing here is that email_io has
an IO with a function inside it.

126
00:06:48.570 --> 00:06:52.800
But getValue calls this .toIO at the end.

127
00:06:52.800 --> 00:06:56.710
Now the difference is getValue

128
00:06:56.710 --> 00:07:00.100
is a function that will return
an IO of what that will do.

129
00:07:00.100 --> 00:07:01.820
Like it's basically like,
don't run this thing.

130
00:07:01.820 --> 00:07:04.870
Return me an IO of this thing.

131
00:07:04.870 --> 00:07:07.190
The top one just does it off the bat.

132
00:07:07.190 --> 00:07:09.530
The reason we have that
bottom helper here,

133
00:07:09.530 --> 00:07:15.060
is be able to be able to pass arguments
to the function inside the IO.

134
00:07:15.060 --> 00:07:19.240
Because if I didn't call toIO on the end,
it'd be very hard for

135
00:07:19.240 --> 00:07:21.110
me to get the selector in there.

136
00:07:21.110 --> 00:07:23.810
Anyway long story short, we're gonna
call toIO at the end of everything.

137
00:07:23.810 --> 00:07:27.280
Instead of wrapping it in IO,
just as a helper function

138
00:07:28.690 --> 00:07:32.030
that will help us get through things
without having problems with our units.

