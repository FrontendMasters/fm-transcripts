WEBVTT

1
00:00:00.000 --> 00:00:04.592
[MUSIC]

2
00:00:04.592 --> 00:00:06.317
&gt;&gt; Brian Lonsdorf: So
this is the introduction to monads.

3
00:00:06.317 --> 00:00:09.141
And we will do this in the next ten
minutes, so that's pretty great,

4
00:00:09.141 --> 00:00:12.580
okay.
&gt;&gt; Brian Lonsdorf: How's

5
00:00:12.580 --> 00:00:13.410
everybody feeling?

6
00:00:13.410 --> 00:00:15.021
Should we take a ten minute break?

7
00:00:15.021 --> 00:00:19.638
Okay, all right, let's do it.

8
00:00:19.638 --> 00:00:21.400
So we have of.

9
00:00:22.700 --> 00:00:27.411
Now, it takes an a and puts it in some
kind of type, some kind of container.

10
00:00:27.411 --> 00:00:29.970
Can you guys see that?
It's got an a, and now we have an F of a.

11
00:00:29.970 --> 00:00:34.944
Basically takes an a, puts it in
something, whether it's an identity or

12
00:00:34.944 --> 00:00:36.481
a Maybe or something.

13
00:00:36.481 --> 00:00:39.050
That's what of does.

14
00:00:39.050 --> 00:00:41.470
Why not just the constructor function,
you might ask?

15
00:00:41.470 --> 00:00:44.810
[LAUGH] Like, I have Maybe,
why don't I just put it in a Maybe?

16
00:00:46.170 --> 00:00:52.030
This function, of, is also known as pure,
or return, or unit, or point.

17
00:00:52.030 --> 00:00:54.557
It's a pointed functor.

18
00:00:54.557 --> 00:00:57.712
Anything that's a functor,
anything with a map method and

19
00:00:57.712 --> 00:00:59.550
an of method is a pointed functor.

20
00:01:00.880 --> 00:01:05.582
Now, you ask, why might I do of
instead of just put it inside

21
00:01:05.582 --> 00:01:10.676
the function itself, or
the constructor, just put in the box?

22
00:01:10.676 --> 00:01:11.800
Why not?

23
00:01:11.800 --> 00:01:16.445
Well, if I want to put
the future of this function,

24
00:01:16.445 --> 00:01:20.850
[LAUGH] of the future of dubstep,
which is inside.

25
00:01:22.690 --> 00:01:24.365
A future doesn't take that.

26
00:01:24.365 --> 00:01:26.689
The EventStream we went
over a little bit more.

27
00:01:26.689 --> 00:01:32.510
That EventStream is actually
expecting a DOM element or something.

28
00:01:32.510 --> 00:01:34.980
It doesn't really expect a function.

29
00:01:34.980 --> 00:01:37.400
But we wanna put a function inside it.

30
00:01:37.400 --> 00:01:40.450
And for reasons unknown right now.

31
00:01:40.450 --> 00:01:45.280
But the idea is that this of method
is better than a constructor.

32
00:01:45.280 --> 00:01:48.510
Because it'll put whatever
you have into the context.

33
00:01:48.510 --> 00:01:51.610
It doesn't even have to be what
it expected in the first place.

34
00:01:51.610 --> 00:01:56.458
So if I have, I don't know,
some crazy observable or something,

35
00:01:56.458 --> 00:01:59.350
and I wanna put something in it.

36
00:01:59.350 --> 00:02:03.231
This is better than
calling the observable.

37
00:02:03.231 --> 00:02:04.620
For Promise, for instance.

38
00:02:04.620 --> 00:02:06.422
If I want to put a two in a Promise.

39
00:02:06.422 --> 00:02:11.120
If I say Promise of two, I get a resolved
Promise that I can map over instantly.

40
00:02:11.120 --> 00:02:15.350
So it's better than the constructor for
lifting things into it.

41
00:02:15.350 --> 00:02:16.543
That's what a pointed functor does.

42
00:02:16.543 --> 00:02:19.070
And we'll use that with monads.

43
00:02:19.070 --> 00:02:20.557
Dun, dun, dun!

44
00:02:20.557 --> 00:02:25.752
[LAUGH] Just take it in.

45
00:02:25.752 --> 00:02:31.990
[LAUGH] So if you understand functors,
and I hope you guys are getting it.

46
00:02:31.990 --> 00:02:34.890
I hope you guys really kind of
feel the functor intuition.

47
00:02:37.560 --> 00:02:42.170
All this does is join them together,
stupid simple.

48
00:02:42.170 --> 00:02:46.746
A monad is a pointed functor
with an extra function called

49
00:02:46.746 --> 00:02:51.733
mjoin and/or chain.
&gt;&gt; Brian Lonsdorf: So

50
00:02:51.733 --> 00:02:56.623
the types of mjoin takes this, something
with a Container of a Container of a.

51
00:02:56.623 --> 00:02:58.046
It just give you a Container of a.

52
00:02:58.046 --> 00:03:00.700
We've got this nested thing
that returns me one thing.

53
00:03:00.700 --> 00:03:03.869
Notice those are the same containers,
they're both M.

54
00:03:03.869 --> 00:03:07.156
chain takes a function from
a to a Container b in a, and

55
00:03:07.156 --> 00:03:11.191
then returns you a Container b,
or Container of a to Container b.

56
00:03:11.191 --> 00:03:13.430
We'll look at that later.

57
00:03:13.430 --> 00:03:18.217
But there it is, a pointed functor plus
one of those functions equals a monad.

58
00:03:18.217 --> 00:03:21.803
Well, I say one of those functions cuz
you can define one function in terms of

59
00:03:21.803 --> 00:03:23.910
the other, which is pretty neat.

60
00:03:23.910 --> 00:03:28.110
So I think I still have
that aka from the last one.

61
00:03:28.110 --> 00:03:30.042
That's a mistake, we'll fix that.

62
00:03:30.042 --> 00:03:35.163
So if I call mjoin on
a (Container(Container(2))).

63
00:03:35.163 --> 00:03:36.154
I don't have the answer.

64
00:03:36.154 --> 00:03:37.960
I'll get a container of 2.

65
00:03:37.960 --> 00:03:40.115
I don't have two Containers anymore.

66
00:03:40.115 --> 00:03:44.990
It will flatten them like a list,
not bad, right?

67
00:03:44.990 --> 00:03:48.096
So a (Container(Container(2))),
and I mjoin it.

68
00:03:48.096 --> 00:03:49.115
I'll just get a Container of 2.

69
00:03:51.510 --> 00:03:52.800
So lets look at this.

70
00:03:52.800 --> 00:03:55.249
So if I find the order and
I have two Maybes,

71
00:03:55.249 --> 00:03:57.778
it's going to grab me
an order from the API.

72
00:03:57.778 --> 00:04:00.325
And then it's gonna grab
the tracking_id off of that.

73
00:04:00.325 --> 00:04:02.721
And I've got a Maybe and a Maybe.

74
00:04:02.721 --> 00:04:05.995
At this point, since both findOrder and

75
00:04:05.995 --> 00:04:12.075
getTrackingId both return Maybes,
findOrder gave me a Maybe of an order.

76
00:04:12.075 --> 00:04:15.959
Then I mapped over that and
got another Maybe, so

77
00:04:15.959 --> 00:04:18.816
I had a Maybe and a Maybe right here.

78
00:04:18.816 --> 00:04:22.100
So doing that, I have to map over the
first Maybe, map over to the second Maybe,

79
00:04:22.100 --> 00:04:24.200
and then render the template.

80
00:04:24.200 --> 00:04:26.320
This is common.

81
00:04:26.320 --> 00:04:28.712
If you start combining contexts and

82
00:04:28.712 --> 00:04:32.700
composing context,
this is will happen to you.

83
00:04:32.700 --> 00:04:35.806
I'm sorry, you have to give up there.

84
00:04:35.806 --> 00:04:39.590
[LAUGH] Or you don't,
you could just use this mjoin.

85
00:04:41.020 --> 00:04:43.170
That's it, that's all you need.

86
00:04:43.170 --> 00:04:47.520
So at the point where it gets nested,
we just join it.

87
00:04:47.520 --> 00:04:50.941
So this will take
a Maybe Maybe to just a Maybe.

88
00:04:50.941 --> 00:04:54.030
So you guys are familiar with listFlatten,
right?

89
00:04:55.060 --> 00:04:58.580
It's like you got lists, and lists, and
lists, and you just flatten into one list.

90
00:04:58.580 --> 00:05:02.600
Well, here we have a Maybe in a Maybe,
flatten into one Maybe.

91
00:05:02.600 --> 00:05:04.180
Who cares?

92
00:05:04.180 --> 00:05:05.328
Not that hard.

93
00:05:05.328 --> 00:05:07.180
And that's all monads are.

94
00:05:07.180 --> 00:05:08.939
And you don't even have to
think about it in advance.

95
00:05:08.939 --> 00:05:13.130
You're just like, no,
I'm nested, mjoin, done.

96
00:05:14.900 --> 00:05:15.550
So that's cool.

97
00:05:16.650 --> 00:05:18.080
Let's see another example.

98
00:05:18.080 --> 00:05:19.764
We've got two IOs.

99
00:05:19.764 --> 00:05:22.780
This getSearchTerm is gonna
get it out of the location,

100
00:05:22.780 --> 00:05:24.160
so we want to make sure it's safe.

101
00:05:24.160 --> 00:05:25.830
It's an IO, you don't wanna run it yet.

102
00:05:25.830 --> 00:05:28.117
We've got this set the input value, so

103
00:05:28.117 --> 00:05:32.633
if we grab the param off the location
query string, and we put it in the value.

104
00:05:32.633 --> 00:05:34.315
We got two IOs going on.

105
00:05:34.315 --> 00:05:35.730
We get our SearchTerm, map that.

106
00:05:35.730 --> 00:05:38.632
We've got an IO of an IO, right?

107
00:05:38.632 --> 00:05:44.610
Well, if I just, in here have to map runIO
over the first one, which is hilarious.

108
00:05:44.610 --> 00:05:47.470
And I end up with another IO that
I have to run, it just is weird.

109
00:05:47.470 --> 00:05:54.023
So here we just mjoin it, done.
&gt;&gt; Student: So that's just an additional,

110
00:05:54.023 --> 00:05:59.575
I don't know the word,
function I guess that you're passing

111
00:05:59.575 --> 00:06:03.180
that will get executed after the map.
&gt;&gt; Brian Lonsdorf: Yes.

112
00:06:03.180 --> 00:06:03.810
&gt;&gt; Student: You just toggled back and

113
00:06:03.810 --> 00:06:05.251
forth, I just wanted to make sure.
&gt;&gt; Brian Lonsdorf: Yeah,

114
00:06:05.251 --> 00:06:06.181
sorry.
&gt;&gt; Student: Yeah, so

115
00:06:06.181 --> 00:06:07.607
mjoin is being dropped in as a first or

116
00:06:07.607 --> 00:06:08.121
last.
&gt;&gt; Brian Lonsdorf: And

117
00:06:08.121 --> 00:06:11.002
look at the IO(IO(Dom)), IO(Dom).

118
00:06:11.002 --> 00:06:13.139
IO(IO(Dom)), IO(Dom).

119
00:06:13.139 --> 00:06:17.869
[LAUGH]
&gt;&gt; Student 2: Someone had a question about

120
00:06:17.869 --> 00:06:18.966
promises.

121
00:06:18.966 --> 00:06:25.280
He was saying they don't
resolve immediately.

122
00:06:25.280 --> 00:06:29.445
But yeah, they run immediately.
&gt;&gt; Brian Lonsdorf: I see.

123
00:06:29.445 --> 00:06:30.956
&gt;&gt; Student 2: So the differentiation

124
00:06:30.956 --> 00:06:34.815
between IO and Promise is that
IO doesn't run immediately.

125
00:06:34.815 --> 00:06:35.400
&gt;&gt; Brian Lonsdorf: But Promise is run

126
00:06:35.400 --> 00:06:36.653
immediately.
&gt;&gt; Student 2: Promise is run immediately.

127
00:06:36.653 --> 00:06:37.208
&gt;&gt; Brian Lonsdorf: That's fair,

128
00:06:37.208 --> 00:06:37.722
yeah, yeah.

129
00:06:37.722 --> 00:06:39.530
I wasn't careful with my words there,
yeah.

130
00:06:39.530 --> 00:06:42.992
Promise and
Futures here are like an IO-ish Promise,

131
00:06:42.992 --> 00:06:47.600
where it doesn't just start executing and
eventually run.

132
00:06:47.600 --> 00:06:52.370
But you're right, so to clarify.

133
00:06:52.370 --> 00:06:55.027
Yeah, so we just drop the mjoin in and
we're good.

134
00:06:55.027 --> 00:06:57.709
And if everybody knows how to do that,
you're using monads.

135
00:06:57.709 --> 00:07:02.366
Now you gotta point out that mjoin is just
like map in that it's going to just call

136
00:07:02.366 --> 00:07:04.604
whatever on whatever object it gets.

137
00:07:04.604 --> 00:07:08.660
If it gets a Maybe Maybe, it's gonna go to
Maybe and say, tell me how to join you.

138
00:07:08.660 --> 00:07:10.596
I don't know how to join you.

139
00:07:10.596 --> 00:07:15.110
So these things have to be monads as well,
right?

140
00:07:15.110 --> 00:07:17.190
Luckily, all the types we saw were, and

141
00:07:17.190 --> 00:07:19.820
just about every type will
be working with kind of is.

142
00:07:19.820 --> 00:07:21.400
But maybe not Either, yeah it is.

143
00:07:21.400 --> 00:07:22.130
It's a monad.

144
00:07:22.130 --> 00:07:26.284
Okay, so-
&gt;&gt; Student: Brian, there's a question.

145
00:07:26.284 --> 00:07:29.691
Moses is trying to clarify,
so is mjoin a monad, or

146
00:07:29.691 --> 00:07:33.580
is monad a result?
&gt;&gt; Brian Lonsdorf: I'm sorry.

147
00:07:33.580 --> 00:07:37.010
Maybe, EventStream, IO, those functors.

148
00:07:37.010 --> 00:07:38.910
Those are also monads.

149
00:07:38.910 --> 00:07:43.080
If we go back a few,
that's what a monad is.

150
00:07:43.080 --> 00:07:47.950
It's a functor that's pointed,
meaning it's a functor

151
00:07:47.950 --> 00:07:52.311
that has an of method and join method.
&gt;&gt; Student 2: Then mjoin just

152
00:07:52.311 --> 00:07:56.237
recursively calls them out, kind of.
&gt;&gt; Brian Lonsdorf: Sort of,

153
00:07:56.237 --> 00:07:59.748
like if you think about Maybe,
it would say, I have .val.

154
00:07:59.748 --> 00:08:03.142
And if it's not null,
I'll pass this value.

155
00:08:03.142 --> 00:08:04.770
It takes care of it for you.

156
00:08:04.770 --> 00:08:09.790
You just tell Maybe like, I've got a Maybe
and a Maybe, and I just want one Maybe.

157
00:08:09.790 --> 00:08:14.078
Can you tell me how to safely do your null
stuff and make sure there's only one?

158
00:08:14.078 --> 00:08:15.049
So it's two notes.
&gt;&gt; Student 3: So

159
00:08:15.049 --> 00:08:19.275
in that other example where we get triple
field, it'll take care of that too?

160
00:08:19.275 --> 00:08:20.771
&gt;&gt; Brian Lonsdorf: Triple, yeah,

161
00:08:20.771 --> 00:08:21.991
three things?

162
00:08:21.991 --> 00:08:24.010
That only happened.

163
00:08:24.010 --> 00:08:25.636
You have to mjoin twice.

164
00:08:25.636 --> 00:08:30.110
[LAUGH] No, that's not a big deal.

165
00:08:30.110 --> 00:08:35.214
Because there's ways to compose monads,
and we'll see that.

166
00:08:35.214 --> 00:08:37.995
So you're not typically
ever mjoining twice.

167
00:08:37.995 --> 00:08:41.575
[LAUGH] What's up?
&gt;&gt; Student: We're wondering,

168
00:08:41.575 --> 00:08:43.215
what's the point of an of method?

169
00:08:43.215 --> 00:08:46.762
What does it mean to have an of method?
&gt;&gt; Brian Lonsdorf: It is almost exactly

170
00:08:46.762 --> 00:08:49.110
like a constructor.

171
00:08:49.110 --> 00:08:53.540
But it puts a value into the context,

172
00:08:53.540 --> 00:08:55.730
not necessarily what
the constructor is expecting.

173
00:08:56.800 --> 00:09:00.180
So like I was saying with an EventStream.

174
00:09:00.180 --> 00:09:03.731
An EventStream of clicks is like,
what do you even,

175
00:09:03.731 --> 00:09:07.960
do I call the EventStream
constructor with my function?

176
00:09:07.960 --> 00:09:10.730
I don't understand what to put
in my EventStream constructor.

177
00:09:10.730 --> 00:09:13.250
Of lets you put anything in there.

178
00:09:13.250 --> 00:09:16.540
I could put the number two in
my EventStream constructor.

179
00:09:16.540 --> 00:09:20.410
So of will put anything
in your context for you.

180
00:09:20.410 --> 00:09:24.340
What it does is lift any value into an
EventStream and start working from that.

181
00:09:24.340 --> 00:09:25.760
And the EventStream needs
to know how to do that.

182
00:09:25.760 --> 00:09:27.478
That's what the of does.

183
00:09:27.478 --> 00:09:32.360
And this mjoin tells it how to,
if I have EventStream in an EventStream,

184
00:09:32.360 --> 00:09:34.919
just make it one.
&gt;&gt; Student: Would you

185
00:09:34.919 --> 00:09:37.107
ever use of if you had an unknown functor?

186
00:09:37.107 --> 00:09:38.930
Where you're like,
I don't know what this was.

187
00:09:38.930 --> 00:09:40.860
I don't know what constructor
to use to make another one,

188
00:09:40.860 --> 00:09:42.290
but I could make a value.
&gt;&gt; Brian Lonsdorf: That's

189
00:09:42.290 --> 00:09:43.970
a great question.

190
00:09:43.970 --> 00:09:47.770
In the Fantasy Land spec,
which is online on GitHub,

191
00:09:47.770 --> 00:09:51.620
that we've been all going off of,
it's basically the same spec.

192
00:09:51.620 --> 00:09:54.239
It's category theory stuff,
it's just they did it for JavaScript.

193
00:09:55.790 --> 00:10:00.930
And it says of should be on your
prototype, as well as your constructor.

194
00:10:00.930 --> 00:10:03.969
That way if I get a return type and
I don't even know what it is,

195
00:10:03.969 --> 00:10:05.530
I can call of on it.

196
00:10:05.530 --> 00:10:08.800
It's a dynamic way to put it
in whatever context I got.

197
00:10:08.800 --> 00:10:12.440
I don't need to hard-code my
type into this computation.

198
00:10:12.440 --> 00:10:15.960
I could get some value and
call of on it, which is really neat.

199
00:10:15.960 --> 00:10:17.940
So you can imagine that you're composing.

200
00:10:17.940 --> 00:10:21.853
And then you get some type, some functor,
I don't know which it is, but

201
00:10:21.853 --> 00:10:23.340
I'm going to call of on it.

202
00:10:23.340 --> 00:10:26.780
And I should point out that switching
functors changes your whole app.

203
00:10:26.780 --> 00:10:31.590
So if your app is working with the Future,

204
00:10:31.590 --> 00:10:34.140
switch your Future to a different library,
still works.

205
00:10:34.140 --> 00:10:35.104
Or switch it to a Maybe.

206
00:10:35.104 --> 00:10:37.200
Now it works with a Maybe,
it runs if it's there.

207
00:10:37.200 --> 00:10:42.010
So your app is generic enough to work on
any functor for the most part, usually.

208
00:10:42.010 --> 00:10:44.810
So unless you're calling
explicitly fork in your app,

209
00:10:44.810 --> 00:10:47.919
which you're probably doing
right after the very last line.

210
00:10:47.919 --> 00:10:54.710
All right, so let's look one or
two more examples and get into the code.

211
00:10:54.710 --> 00:10:55.970
It's not that hard.

212
00:10:55.970 --> 00:10:56.995
It's just drop mjoin in there.

213
00:10:56.995 --> 00:10:59.820
[LAUGH] So it's not that crazy.

214
00:10:59.820 --> 00:11:02.044
Functors were the hardest thing in
the class, and we got through it.

215
00:11:02.044 --> 00:11:03.047
You guys were alive.

216
00:11:03.047 --> 00:11:06.503
[LAUGH] Here's one where we read a file,
and

217
00:11:06.503 --> 00:11:11.409
then we upload it to the server
with this fictional httpGet.

218
00:11:11.409 --> 00:11:14.630
Which will return as a Future,
because it's going to the server.

219
00:11:14.630 --> 00:11:17.070
So, reads the file, goes to the server.

220
00:11:17.070 --> 00:11:19.780
We've got a Future in a Future,
we join them.

221
00:11:19.780 --> 00:11:20.517
I can fork once.

222
00:11:20.517 --> 00:11:22.812
I don't have to fork and
then fork the success.

223
00:11:22.812 --> 00:11:26.680
I don't know what to do with
the Future of a Future.

224
00:11:26.680 --> 00:11:27.560
Here's another one.

225
00:11:27.560 --> 00:11:30.593
Why don't I ask the user what they want?

226
00:11:30.593 --> 00:11:33.708
You can imagine in a console environment,
or a node or whatever.

227
00:11:33.708 --> 00:11:36.101
We'll ask the user what they want,
that's a Future value.

228
00:11:36.101 --> 00:11:38.187
Then we'll map read,
ask what file do you want.

229
00:11:38.187 --> 00:11:41.012
We'll map(readFile) over it, and
will join those two Futures.

230
00:11:41.012 --> 00:11:44.950
Then we'll send to the server, and
again, join those two Futures.

231
00:11:44.950 --> 00:11:50.680
[LAUGH] So you see this pattern of
every time you do a monadic action.

232
00:11:50.680 --> 00:11:54.640
That is, every time something returns
a Future that you're mapping over,

233
00:11:54.640 --> 00:11:57.320
you're nesting these Futures.

234
00:11:57.320 --> 00:12:03.590
And by joining them, you're putting
them back together into one.

235
00:12:03.590 --> 00:12:05.970
This is three nested callbacks.

236
00:12:05.970 --> 00:12:07.810
If you look at at node app,

237
00:12:07.810 --> 00:12:13.520
it would be this disgusting [INAUDIBLE]
inward avalanche towards the scroll bar.

238
00:12:14.890 --> 00:12:17.820
But right there it's just it looks
like it's not in the Future.

239
00:12:17.820 --> 00:12:20.605
It looks like this linear thing.
&gt;&gt; Student: Two question on this

240
00:12:20.605 --> 00:12:22.550
slide, Brian.

241
00:12:22.550 --> 00:12:27.800
Robbie V is asking, can you mjoin
funct doors of different types?

242
00:12:27.800 --> 00:12:30.532
Like maybe in an IO?
&gt;&gt; Brian Lonsdorf: You cannot,

243
00:12:30.532 --> 00:12:34.871
you need to use a lens or
a monad transformer, or

244
00:12:34.871 --> 00:12:39.440
another construct that
will allow you to do that.

245
00:12:39.440 --> 00:12:44.064
Typically, the solution would be to
make your own Maybe IO monad with

246
00:12:44.064 --> 00:12:45.587
a monad transformer.

247
00:12:45.587 --> 00:12:52.155
Or better yet, use the lens library
to just define a double map.

248
00:12:52.155 --> 00:12:56.898
But that's kinda beyond this class.
&gt;&gt; Student: Daniel B is asking,

249
00:12:56.898 --> 00:12:59.431
does fork return a Future?
&gt;&gt; Brian Lonsdorf: No,

250
00:12:59.431 --> 00:13:03.833
fork takes its success and error function.
&gt;&gt; Student: Okay, and

251
00:13:03.833 --> 00:13:06.607
it operates on a Future.
&gt;&gt; Brian Lonsdorf: Yes,

252
00:13:06.607 --> 00:13:09.319
it returns kind of null,
it's the end of the line.

253
00:13:09.319 --> 00:13:12.585
We're done there.

254
00:13:12.585 --> 00:13:16.170
Okay, one thing to point out,
did I have my code?

255
00:13:16.170 --> 00:13:17.946
Where is the example?

256
00:13:17.946 --> 00:13:22.995
It's there, yeah,
here's chain, just so you know.

257
00:13:22.995 --> 00:13:26.726
It's just fmap mjoin, not that hard.

258
00:13:26.726 --> 00:13:29.489
[LAUGH] Where fmap, mjoin, fmap, mjoin.

259
00:13:29.489 --> 00:13:34.599
All we had to do for
fmap mjoin was just chain it.

260
00:13:34.599 --> 00:13:36.624
And you've heard this as flatMap or bind.

261
00:13:36.624 --> 00:13:37.850
That's what chain is.

262
00:13:37.850 --> 00:13:40.364
So if you look at that,
now we ask the user.

263
00:13:40.364 --> 00:13:43.067
And we chain readFile and
chain sendToServer.

264
00:13:43.067 --> 00:13:46.835
And it's if you just drop in
replacement for fmap, mbind.

265
00:13:46.835 --> 00:13:49.227
And you'd see the same thing as flatMap.

266
00:13:49.227 --> 00:13:50.719
Different names, same stuff.

267
00:13:50.719 --> 00:13:55.607
The reason we call it chain in
the Fantasy Land spec is because if you do

268
00:13:55.607 --> 00:13:58.827
the dot syntax, it's literally chaining.

269
00:13:58.827 --> 00:14:02.411
[LAUGH] So yeah,
this is the same thing, but

270
00:14:02.411 --> 00:14:07.704
dot syntax versus the super sweet
functional point free stud.

271
00:14:07.704 --> 00:14:11.869
All right, [LAUGH] okay, so.
&gt;&gt; Group: [LAUGH]

272
00:14:11.869 --> 00:14:13.503
&gt;&gt; Brian Lonsdorf: One last thing I wanted

273
00:14:13.503 --> 00:14:17.123
to tell you guys before we
jump into the examples.

274
00:14:17.123 --> 00:14:19.490
mjoin is defined by chain(id).

275
00:14:19.490 --> 00:14:24.320
Basically, chain says, open up my monad,
open up my container and

276
00:14:24.320 --> 00:14:26.031
pass the value into it.

277
00:14:26.031 --> 00:14:27.695
And id just says, return the value.

278
00:14:27.695 --> 00:14:33.590
[LAUGH] So that's mjoin, whereas
chain says, first fmap, then mjoin.

279
00:14:33.590 --> 00:14:37.310
So both of those can be defined
in terms of each other.

280
00:14:37.310 --> 00:14:41.683
So any monad can be defined with
one of those two functions.

281
00:14:41.683 --> 00:14:45.014
And the other one is just defined
based on the other function.

282
00:14:45.014 --> 00:14:49.327
It's pretty neat, okay.
&gt;&gt; Student: Hey Brian, before we take off,

283
00:14:49.327 --> 00:14:54.181
Scott S wondered,
does Either dot of take two parameters?

284
00:14:54.181 --> 00:14:56.380
&gt;&gt; Brian Lonsdorf: That's totally smart.

285
00:14:57.560 --> 00:14:59.847
I think it only takes one.

286
00:14:59.847 --> 00:15:02.412
But I don't know that question and
that answer.

287
00:15:02.412 --> 00:15:04.984
I don't work with Eithers all that much,
that's why I always get it wrong.

288
00:15:04.984 --> 00:15:08.684
[LAUGH] So
we're into all this futuristic stuff.

289
00:15:08.684 --> 00:15:10.346
But yeah, that's a good question.

290
00:15:10.346 --> 00:15:14.033
You know what you could do is you could
always look up the Haskell definition, or

291
00:15:14.033 --> 00:15:15.530
Folktale is what we're using.

