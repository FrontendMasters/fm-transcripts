WEBVTT

1
00:00:00.000 --> 00:00:04.909
[MUSIC]

2
00:00:04.909 --> 00:00:08.502
&gt;&gt; Off Camera 1: Real quick.
We got some confusion here I think.

3
00:00:08.502 --> 00:00:13.172
I'm bored, so
we're calling fork on the future here but

4
00:00:13.172 --> 00:00:17.746
the earlier we defined the fork
function where we gave it

5
00:00:17.746 --> 00:00:21.566
lastly in the afternoon G and
had an x, right?

6
00:00:21.566 --> 00:00:22.658
&gt;&gt; Brian Lonsdorf: Yeah, yeah.
&gt;&gt; Off Camera 1: Different forks.

7
00:00:22.658 --> 00:00:24.004
&gt;&gt; Brian Lonsdorf: Different fork,
different fork.

8
00:00:24.004 --> 00:00:27.924
[LAUGH]
&gt;&gt; Off Camera 1: There's been some

9
00:00:27.924 --> 00:00:28.687
confusion there so.

10
00:00:28.687 --> 00:00:31.664
&gt;&gt; Brian Lonsdorf: I think this is
my most up to date monad example.

11
00:00:31.664 --> 00:00:33.197
But that's okay.

12
00:00:33.197 --> 00:00:35.934
&gt;&gt; Off Camera 2: You had one
slash one instead of slash three,

13
00:00:35.934 --> 00:00:38.180
which is what we came up with.

14
00:00:38.180 --> 00:00:43.015
&gt;&gt; Off Camera 2: You went to

15
00:00:43.015 --> 00:00:47.851
[INAUDIBLE]

16
00:00:47.851 --> 00:00:52.688
&gt;&gt; Brian Lonsdorf: While we.

17
00:00:52.688 --> 00:00:54.768
Here you go, cool.

18
00:00:54.768 --> 00:00:55.352
Perfect.

19
00:00:55.352 --> 00:00:58.807
I was like, my God, they're all done.

20
00:00:58.807 --> 00:00:59.722
Darn chick.

21
00:00:59.722 --> 00:01:01.953
Haha, pretty darn.

22
00:01:01.953 --> 00:01:06.358
[LAUGH] [LAUGH] All right, we got like-
&gt;&gt; Off Camera 2: Forward slash one is

23
00:01:06.358 --> 00:01:07.430
the answers!

24
00:01:07.430 --> 00:01:10.287
&gt;&gt; Brian Lonsdorf: We are just gonna kill,
because you guys know this.

25
00:01:10.287 --> 00:01:12.499
All right, lets talk about this.

26
00:01:12.499 --> 00:01:16.787
So, we're gonna start with
that last example we just did.

27
00:01:16.787 --> 00:01:22.535
We had a (safeGet)('address') and

28
00:01:22.535 --> 00:01:29.604
it's safe and
then it map(safeGet of the street.

29
00:01:29.604 --> 00:01:33.860
And so, we're traversing the address and
the street safely.

30
00:01:33.860 --> 00:01:36.489
The alternative to this code is,
if not null, do this.

31
00:01:36.489 --> 00:01:38.440
And then nested if not null, do this.

32
00:01:38.440 --> 00:01:39.580
And then.

33
00:01:39.580 --> 00:01:43.346
So we've got our street, and
then we want to get its name.

34
00:01:43.346 --> 00:01:46.569
So we'll, again,

35
00:01:46.569 --> 00:01:54.170
map(map(safeGet('name'), and link.

36
00:01:54.170 --> 00:01:57.484
And let's see if exercise one
is unhappy about something.

37
00:01:57.484 --> 00:02:00.742
&gt;&gt; Off Camera 1: You've
got three Ss in address.

38
00:02:00.742 --> 00:02:05.200
&gt;&gt; Brian Lonsdorf: We've got that,
and we've got one missing param.

39
00:02:06.650 --> 00:02:11.295
And also missing print there.

40
00:02:11.295 --> 00:02:13.200
Kicking butt, you guys [LAUGH].

41
00:02:13.200 --> 00:02:17.783
There we go, so expected maybe
Walnut Street to you people maybe, maybe,

42
00:02:17.783 --> 00:02:19.182
maybe Walnut Street.

43
00:02:19.182 --> 00:02:22.580
So, this is kind of a mess
here with all these maybes.

44
00:02:22.580 --> 00:02:27.212
Why don't we say at the first sign of
it getting nested, we'll mjoin it.

45
00:02:29.740 --> 00:02:30.898
&gt;&gt; Brian Lonsdorf: And
we get rid of one of these maps.

46
00:02:33.180 --> 00:02:34.378
&gt;&gt; Brian Lonsdorf: Let's
see what we get for that.

47
00:02:37.475 --> 00:02:39.203
&gt;&gt; Brian Lonsdorf: We're got a maybe,
maybe Walnut St.

48
00:02:39.203 --> 00:02:40.772
one less, we're getting there.

49
00:02:40.772 --> 00:02:49.150
[LAUGH] And then we'll mjoin here to
clear it all up and there it is, a pass.

50
00:02:49.150 --> 00:02:50.515
We just got one maybe.

51
00:02:50.515 --> 00:02:57.571
Now we just learned that map mjoin,
map mjoin, it's just chain.

52
00:02:57.571 --> 00:03:04.520
So it's called chain, here we go.

53
00:03:04.520 --> 00:03:08.420
And there it is, but
it's chaining through.

54
00:03:08.420 --> 00:03:10.106
Let's do another one.

55
00:03:10.106 --> 00:03:13.886
We've got two IOs.

56
00:03:13.886 --> 00:03:18.880
We'll just compose getHref
with mapping pureLog.

57
00:03:21.210 --> 00:03:25.972
And we will mjoin that,
that's all we gotta do,

58
00:03:25.972 --> 00:03:29.004
cuz we had to put in another IO.

59
00:03:29.004 --> 00:03:30.930
And that passes that.

60
00:03:30.930 --> 00:03:37.398
See if we can just call chain
here instead, there we go.

61
00:03:37.398 --> 00:03:41.160
And the last one says,
we've got two futures.

62
00:03:41.160 --> 00:03:47.513
We're just gonna basically get the post
and one thing to know about monads.

63
00:03:47.513 --> 00:03:53.290
Is we are nesting calls, so
we're saying first get the post,

64
00:03:53.290 --> 00:03:56.300
then get the comments, right?

65
00:03:58.850 --> 00:04:01.411
So first get the post,
then get the comments.

66
00:04:01.411 --> 00:04:05.390
Actually getComments takes an id,
so we get the id first.

67
00:04:08.880 --> 00:04:10.144
And then, yeah, that's it.

68
00:04:10.144 --> 00:04:11.941
And then we just mjoin.

69
00:04:11.941 --> 00:04:15.162
&gt;&gt; Off Camera 3: Hey Brian, there's
a request to slow down a little bit.

70
00:04:15.162 --> 00:04:16.692
&gt;&gt; Brian Lonsdorf: I'm sorry.

71
00:04:16.692 --> 00:04:21.464
We're seeing it's 4:11 and we still have
a real life example to do and I just,

72
00:04:21.464 --> 00:04:22.996
this is the last example.

73
00:04:22.996 --> 00:04:24.970
And I broke it anyway here.

74
00:04:24.970 --> 00:04:31.280
The point of this is you've been
seeing map this whole time, right?

75
00:04:31.280 --> 00:04:36.910
I mean we've been seeing
what map is doing.

76
00:04:36.910 --> 00:04:41.986
We're essentially just going inside the
future, and now we're running and we're

77
00:04:41.986 --> 00:04:46.865
getting another future inside that future,
and now we have a future of a future.

78
00:04:46.865 --> 00:04:51.230
So any time we have a future of a future,
we mjoin him and we're all good.

79
00:04:53.000 --> 00:04:55.640
And I think this will actually
work even though it shouldn't be.

80
00:04:55.640 --> 00:04:56.820
Yeah, that works.

81
00:04:56.820 --> 00:05:01.515
It should be getting the mapping
the address over the post.

82
00:05:01.515 --> 00:05:05.210
Yeah, so there's not really much to
it besides dropping mjoin at the end.

83
00:05:07.150 --> 00:05:12.481
Or instead of map mjoin,
whenever I see that, I can call chain.

84
00:05:12.481 --> 00:05:14.206
And all is well.

85
00:05:19.090 --> 00:05:21.822
&gt;&gt; Brian Lonsdorf: What is it, reading?

86
00:05:21.822 --> 00:05:24.119
When reading, can I essentially
ignore the chains and mjoins?

87
00:05:25.470 --> 00:05:29.343
Well, what they're telling you is saying,
we're gonna first get the post.

88
00:05:29.343 --> 00:05:31.877
Then we're gonna get the comments.

89
00:05:31.877 --> 00:05:34.560
Chain is telling you that.

90
00:05:34.560 --> 00:05:36.289
You're not just like,
get the post, get the comments.

91
00:05:36.289 --> 00:05:39.150
I don't know, [LAUGH] it's
telling you what's gonna happen.

92
00:05:40.840 --> 00:05:49.538
But there is a way to mcompose that will
compose two monadic actions together.

93
00:05:49.538 --> 00:05:54.943
And let me just finish up before
we do the demo by saying,

94
00:05:54.943 --> 00:06:00.586
there is more to the story than
I'm telling you right now.

95
00:06:00.586 --> 00:06:07.459
[LAUGH] And Monads have these same
laws and same paths to go through and

96
00:06:07.459 --> 00:06:12.200
just we're going to find them compose.

97
00:06:12.200 --> 00:06:14.930
Do you guys remember these category laws?

98
00:06:14.930 --> 00:06:17.410
Where we had functions we had composed,
right?

99
00:06:17.410 --> 00:06:21.639
And composed had left and
right identity and had associativity.

100
00:06:21.639 --> 00:06:24.698
And we saw those functor laws
are kind of playing off of those.

101
00:06:24.698 --> 00:06:27.190
Well, Monads form a category.

102
00:06:27.190 --> 00:06:31.851
They're their own type of composition, and
they have their own identity operator,

103
00:06:31.851 --> 00:06:35.555
namely the of part actually should
be m.of in the JavaScript spec.

104
00:06:35.555 --> 00:06:40.617
But the idea is that you have
a category of monadic stuff

105
00:06:40.617 --> 00:06:47.100
that has all the same laws that
apply to non monadic functions.

106
00:06:47.100 --> 00:06:51.480
And it's own world and it's got its own
rules and you can do all the same things.

107
00:06:51.480 --> 00:06:54.788
All those things that we could do
with normal functions and compose,

108
00:06:54.788 --> 00:06:56.110
we can do that with monads.

