WEBVTT

1
00:00:00.000 --> 00:00:04.478
[MUSIC]

2
00:00:04.478 --> 00:00:08.159
&gt;&gt; Joe: Okay some guidance
about how it works.

3
00:00:08.159 --> 00:00:12.996
At the beginning of this JS spin,
it gives an example of using,

4
00:00:12.996 --> 00:00:16.300
there's this function called multiply.

5
00:00:17.790 --> 00:00:19.024
It just works how you'd think.

6
00:00:19.024 --> 00:00:22.105
It takes A and B, and
it multiplies them together.

7
00:00:22.105 --> 00:00:25.120
But luckily multiply has been curried.

8
00:00:25.120 --> 00:00:29.620
Behind the scenes the library curried it,
so that we are able to make a new,

9
00:00:29.620 --> 00:00:34.070
so the first example that was
already done says how would we

10
00:00:34.070 --> 00:00:38.310
make a whole new function, without having
to write function that takes whatever,

11
00:00:38.310 --> 00:00:41.650
that would double a number using multiply?

12
00:00:41.650 --> 00:00:43.291
So multiply takes two things.

13
00:00:43.291 --> 00:00:48.480
We wanna make a new function that
doubles something and uses multiply.

14
00:00:48.480 --> 00:00:52.236
Because multiply is curried we
can give it one of its arguments.

15
00:00:52.236 --> 00:00:54.018
We could be like here you go, enjoy.

16
00:00:54.018 --> 00:00:56.530
Sail away and
be a new function that does things.

17
00:00:56.530 --> 00:01:01.374
So we set it on, thank you for
the line numbering tip, on line 20,

18
00:01:01.374 --> 00:01:05.320
actually line 18.

19
00:01:05.320 --> 00:01:05.987
We make the thing.

20
00:01:05.987 --> 00:01:06.955
We just say multiply.

21
00:01:06.955 --> 00:01:08.635
Give it one of its arguments.

22
00:01:08.635 --> 00:01:12.060
It originally expected two,
we gave it one, and

23
00:01:12.060 --> 00:01:13.380
now it's waiting for the next one.

24
00:01:13.380 --> 00:01:17.870
So now it's acting like doubles act is
a function that just takes one thing.

25
00:01:17.870 --> 00:01:23.790
And so when we say on 20,
console.log( double(13) ), we see 26.

26
00:01:23.790 --> 00:01:29.992
So it worked that way.
&gt;&gt; Joe: Now

27
00:01:29.992 --> 00:01:33.448
the challenge is to make one, let's see,

28
00:01:36.152 --> 00:01:40.215
&gt;&gt; Joe: that splits words.

29
00:01:40.215 --> 00:01:44.176
So there's a function called split.
&gt;&gt; Speaker 2: Okay,

30
00:01:44.176 --> 00:01:48.790
why don't we do that together?
&gt;&gt; Joe: I guess it was done with

31
00:01:48.790 --> 00:01:55.561
Mississippi or split groups.
&gt;&gt; Joe: Split takes two arguments,

32
00:01:55.561 --> 00:01:57.450
much like multiply does
if you think about it.

33
00:01:57.450 --> 00:01:59.190
It takes two arguments.

34
00:01:59.190 --> 00:02:01.650
The first is, what do I split around?

35
00:02:01.650 --> 00:02:06.200
If I give it a space, it looks in
a space b and says, there's a space.

36
00:02:06.200 --> 00:02:08.050
I'm gonna break this into
an array with a and b.

37
00:02:08.050 --> 00:02:11.610
If I'd given it a, b, c,
it's all breaking into three things.

38
00:02:11.610 --> 00:02:14.183
Anytime I see a space,
in fact it's really dumb.

39
00:02:14.183 --> 00:02:18.869
If I'd given it two spaces, it'd be like
there's a space in a, a space, nothing,

40
00:02:18.869 --> 00:02:22.190
another space,
it just breaks around spaces.

41
00:02:22.190 --> 00:02:26.910
So we would like to make
a function using curry and

42
00:02:26.910 --> 00:02:30.990
split that does what I just wrote here.

43
00:02:30.990 --> 00:02:33.209
It splits around spaces, and

44
00:02:33.209 --> 00:02:38.640
remember that just like in multiply we
can feed in one argument at a time.

45
00:02:40.120 --> 00:02:41.811
In fact I wonder if split
is already curried.

46
00:02:41.811 --> 00:02:44.020
It probably is.

47
00:02:44.020 --> 00:02:47.240
Wow that makes it [INAUDIBLE].
&gt;&gt; Speaker 2: [INAUDIBLE].

48
00:02:47.240 --> 00:02:48.152
&gt;&gt; Joe: Okay, so

49
00:02:48.152 --> 00:02:52.500
hopefully it's not
a spoiler at this point.

50
00:02:52.500 --> 00:02:56.300
We can just say because split and
it's kind are curried,

51
00:02:56.300 --> 00:02:58.570
because they came from a nice
library that automatically curries.

52
00:02:58.570 --> 00:03:02.940
I mean I could write it maybe explicitly,
but I could say split and

53
00:03:02.940 --> 00:03:06.430
only give it one argument and
see if it passes.

54
00:03:10.140 --> 00:03:11.310
Yeah, now we're on a different thing.

55
00:03:11.310 --> 00:03:12.390
The next one.

56
00:03:12.390 --> 00:03:16.920
So the the whole point of this,
even if you don't understand all

57
00:03:16.920 --> 00:03:21.210
the mechanisms of currying, is if you have
a function which has been curried, you can

58
00:03:21.210 --> 00:03:24.570
feel free to give it only some of its
arguments and you'll get a new function,

59
00:03:24.570 --> 00:03:27.720
like we did here when i created
this words function on line 36.

60
00:03:27.720 --> 00:03:31.280
I just gave split one thing, and

61
00:03:31.280 --> 00:03:33.790
it's ready to do the rest
of the thing it would do.

62
00:03:33.790 --> 00:03:34.611
Does that clear up?

63
00:03:34.611 --> 00:03:36.021
Let's see what we have in chat.

64
00:04:08.792 --> 00:04:12.552
&gt;&gt; Speaker 2: One gotcha on challenge 3 is

65
00:04:12.552 --> 00:04:18.663
the EAD is a number lower
the negative one [LAUGH]

66
00:04:18.663 --> 00:04:24.309
in your partial application or your-
&gt;&gt; Joe: Yeah, yeah.

67
00:04:24.309 --> 00:04:25.941
I touched it through that.
&gt;&gt; Speaker 2: [INAUDIBLE]

68
00:04:25.941 --> 00:04:26.725
&gt;&gt; Joe: Exactly.

69
00:04:26.725 --> 00:04:29.531
Luckily, If you're looking for
a really low number,

70
00:04:29.531 --> 00:04:32.521
JavaScript has negative infinity,
which is pretty low.

71
00:04:32.521 --> 00:04:34.760
[LAUGH]

72
00:04:44.200 --> 00:04:45.145
&gt;&gt; Speaker 2: You got it.

73
00:05:05.174 --> 00:05:06.928
&gt;&gt; Joe: All the authors of Round Up,

74
00:05:06.928 --> 00:05:12.400
I'm honored.
&gt;&gt; Speaker 2: Yeah ask Michael and Scott.

75
00:05:12.400 --> 00:05:13.681
They're in there.

76
00:05:13.681 --> 00:05:19.450
[INAUDIBLE]
[LAUGH] You don't need dots.

77
00:05:19.450 --> 00:05:20.500
You got the creators.

78
00:05:32.871 --> 00:05:34.493
&gt;&gt; Speaker 2: Let me do a walk around to

79
00:05:34.493 --> 00:05:36.776
make sure anybody is-
&gt;&gt; Joe: Thanks.

80
00:05:36.776 --> 00:05:38.601
&gt;&gt; Speaker 2: How're you doing, man?

81
00:05:38.601 --> 00:05:43.474
Are you getting it?
&gt;&gt; Speaker 3: It keeps getting errors

82
00:05:43.474 --> 00:05:45.070
farther down, right?

83
00:05:45.070 --> 00:05:46.520
That's what-
&gt;&gt; Speaker 2: Yeah, that's right.

84
00:05:46.520 --> 00:05:48.070
You're like-
&gt;&gt; Speaker 3: So you're not seeing

85
00:05:48.070 --> 00:05:49.880
things getting completed.
&gt;&gt; Speaker 2: I

86
00:05:49.880 --> 00:05:51.670
see what you're saying, yeah.

87
00:05:51.670 --> 00:05:55.005
So that Mississippi works, and
as you complete it you don't get the error

88
00:05:55.005 --> 00:05:55.740
[LAUGH].
&gt;&gt; Speaker 3: Correct.

89
00:05:55.740 --> 00:05:58.100
That's what I'm running into.
&gt;&gt; Speaker 2: One less error.

90
00:05:58.100 --> 00:05:59.960
Okay, so you're on max now.
&gt;&gt; Speaker 3: Okay.

91
00:05:59.960 --> 00:06:00.520
&gt;&gt; Speaker 2: Cool.

92
00:06:00.520 --> 00:06:05.270
And then same here,
you knocked out multiply around the x.

93
00:06:05.270 --> 00:06:06.970
Okay you might want to say
something about that, Joe.

94
00:06:06.970 --> 00:06:08.810
You'll see that errors just deplete.

95
00:06:08.810 --> 00:06:10.220
You won't see a success message if

96
00:06:11.240 --> 00:06:12.530
you pass it.
&gt;&gt; Speaker 4: Yeah.

97
00:06:12.530 --> 00:06:13.770
&gt;&gt; Joe: The homemade testing suite isn't

98
00:06:13.770 --> 00:06:16.570
so good I guess [LAUGH].
&gt;&gt; Speaker 2: Which threw me off

99
00:06:16.570 --> 00:06:17.960
&gt;&gt; Joe: You just gotta get used

100
00:06:17.960 --> 00:06:19.590
to success.
&gt;&gt; Speaker 2: You get no

101
00:06:19.590 --> 00:06:20.590
satisfaction.

102
00:06:20.590 --> 00:06:21.475
&gt;&gt; Speaker 4: Yes.
&gt;&gt; Joe: Yeah.

103
00:06:21.475 --> 00:06:22.000
&gt;&gt; Speaker 4: [LAUGH]

104
00:06:22.000 --> 00:06:23.799
&gt;&gt; Joe: You get no success you've

105
00:06:23.799 --> 00:06:25.261
completed-
&gt;&gt; Speaker 2: Red and

106
00:06:25.261 --> 00:06:26.537
less red.
&gt;&gt; Joe: Yeah.

107
00:06:26.537 --> 00:06:28.022
[LAUGH]

108
00:06:28.022 --> 00:06:29.333
&gt;&gt; Speaker 4: How you doing, man?

109
00:06:29.333 --> 00:06:31.773
You getting this okay?

110
00:06:31.773 --> 00:06:33.469
&gt;&gt; Speaker 2: Errors, work harder to fix

111
00:06:33.469 --> 00:06:38.752
those errors [CROSSTALK].
&gt;&gt; Joe: Yeah

112
00:06:38.752 --> 00:06:40.566
&gt;&gt; Speaker 4: Yeah, I think it's throwing

113
00:06:40.566 --> 00:06:46.842
people for a loop.
So, yeah you're on triple list,

114
00:06:46.842 --> 00:06:52.481
just gotta partially apply something

115
00:06:52.481 --> 00:06:57.425
that would triple.
[INAUDIBLE] So,

116
00:06:57.425 --> 00:07:02.840
he's saying one of the map filter reduce.

117
00:07:02.840 --> 00:07:05.104
Should I give a hint for three?
&gt;&gt; Joe: Yeah, let's-

118
00:07:05.104 --> 00:07:05.744
&gt;&gt; Speaker 4: Okay,

119
00:07:05.744 --> 00:07:09.801
three, you're gonna wanna use reduce, and

120
00:07:09.801 --> 00:07:14.410
something lower than negative
one cuz that got me.

121
00:07:14.410 --> 00:07:16.488
What's the actual lowest number?

122
00:07:16.488 --> 00:07:19.286
It's like number dot.
&gt;&gt; Joe: Should be just

123
00:07:19.286 --> 00:07:22.068
negative infinity.
&gt;&gt; Speaker 4: You just actually do

124
00:07:22.068 --> 00:07:24.179
a literal negative and the word infinity?
&gt;&gt; Joe: Yeah.

125
00:07:24.179 --> 00:07:24.807
&gt;&gt; Speaker 4: That's great.

126
00:07:24.807 --> 00:07:25.971
&gt;&gt; Joe: Yeah.

127
00:07:25.971 --> 00:07:26.528
&gt;&gt; Speaker 4: Awesome.

128
00:07:26.528 --> 00:07:28.001
&gt;&gt; Joe: It did something right.

129
00:07:28.001 --> 00:07:29.777
&gt;&gt; Speaker 4: How you doint over here?

130
00:07:29.777 --> 00:07:33.309
[CROSSTALK]
&gt;&gt; Joe: Okay that looks right.

131
00:07:33.309 --> 00:07:34.150
&gt;&gt; Speaker 4: This looks right?

132
00:07:34.150 --> 00:07:35.931
&gt;&gt; Joe: Yeah, I think you got it.

133
00:07:35.931 --> 00:07:38.520
&gt;&gt; [INAUDIBLE]

134
00:07:38.520 --> 00:07:39.667
&gt;&gt; Speaker 4: No because triple is

135
00:07:39.667 --> 00:07:42.972
a function, so now if you run
it with some other function or

136
00:07:42.972 --> 00:07:44.820
number it'll-
&gt;&gt; Joe: Okay.

137
00:07:49.456 --> 00:07:50.646
&gt;&gt; Speaker 3: Where do we find

138
00:07:50.646 --> 00:07:52.664
the arguments to reduce?

139
00:07:52.664 --> 00:07:56.023
Is there help some place on this library,
or do we have to go get-

140
00:07:56.023 --> 00:07:58.692
&gt;&gt; Joe: [CROSSTALK]

141
00:07:58.692 --> 00:07:59.212
Let's

142
00:07:59.212 --> 00:08:04.155
see.
&gt;&gt; Joe: That means

143
00:08:04.155 --> 00:08:08.671
that [CROSSTALK] is trying to reduce,
or maybe they already have.

144
00:08:08.671 --> 00:08:10.655
&gt;&gt; Speaker 3: Okay, so it's fold left.

145
00:08:10.655 --> 00:08:11.554
&gt;&gt; Joe: Yeah, I think so.

146
00:08:11.554 --> 00:08:13.306
Yeah.
&gt;&gt; Speaker 3: Is that what, okay.

147
00:08:13.306 --> 00:08:13.823
&gt;&gt; Joe: There it is,

148
00:08:13.823 --> 00:08:15.062
fold left is reduced.
&gt;&gt; Speaker 3: So

149
00:08:15.062 --> 00:08:17.480
[CROSSTALK] from right to left.
&gt;&gt; Joe: [CROSSTALK] Wait a second.

150
00:08:17.480 --> 00:08:19.915
&gt;&gt; Speaker 4: I'm gonna scroll this.

151
00:08:19.915 --> 00:08:20.999
&gt;&gt; Joe: How does reduce, yeah, yeah,

152
00:08:20.999 --> 00:08:22.403
fold left.
&gt;&gt; Speaker 4: But it's also a list so

153
00:08:22.403 --> 00:08:24.829
we're gonna have to map this
function over that list.

154
00:08:24.829 --> 00:08:26.070
&gt;&gt; Speaker 3: Okay.

155
00:08:26.070 --> 00:08:26.779
&gt;&gt; Speaker 4: So what other

156
00:08:26.779 --> 00:08:30.330
people are doing too, it's nice,
is you can hop in the console.

157
00:08:30.330 --> 00:08:35.462
You have everything available,
so you can just play with it.

158
00:08:35.462 --> 00:08:38.486
&gt;&gt; [INAUDIBLE]

159
00:08:38.486 --> 00:08:42.747
&gt;&gt; Speaker 4: How you doing man?

160
00:08:42.747 --> 00:08:48.491
Finished it.
&gt;&gt; [INAUDIBLE]

161
00:08:48.491 --> 00:08:49.663
&gt;&gt; Speaker 2: Thank you, yeah.

162
00:08:49.663 --> 00:08:55.458
That's a one off, it's not a-
&gt;&gt; Speaker 2: Yeah, killer.

163
00:08:55.458 --> 00:08:58.676
You got it.

164
00:08:58.676 --> 00:09:02.050
Yeah, you guys already, in the class does
everybody kind of know what currying is?

165
00:09:02.050 --> 00:09:05.910
We're kind of hitting everybody from all
different levels, so if you're bored,

166
00:09:05.910 --> 00:09:07.310
it's gonna get harder and harder and

167
00:09:07.310 --> 00:09:11.000
harder throughout so
[LAUGH] definitely ask questions.

168
00:09:11.000 --> 00:09:13.688
How are doing, man?
&gt;&gt; Speaker 4: Getting there, I think.

169
00:09:13.688 --> 00:09:16.080
&gt;&gt; Speaker 2: What are you looking at?

170
00:09:16.080 --> 00:09:17.667
&gt;&gt; Speaker 4: This one right here.

171
00:09:17.667 --> 00:09:19.583
So I'm just gonna map
the list to multiply.

172
00:09:19.583 --> 00:09:21.051
&gt;&gt; Speaker 2: You're totally right.

173
00:09:21.051 --> 00:09:23.308
The only thing is.

174
00:09:23.308 --> 00:09:25.959
Yeah, that's right.

175
00:09:25.959 --> 00:09:28.357
Is it working?

176
00:09:28.357 --> 00:09:30.004
_.net.

177
00:09:30.004 --> 00:09:33.129
Yeah, okay.
&gt;&gt; Speaker 4: Bring in, Node JS in.

178
00:09:33.129 --> 00:09:34.110
[LAUGH]
&gt;&gt; Speaker 2: Wait,

179
00:09:34.110 --> 00:09:35.211
I guess it does have JS in.

180
00:09:35.211 --> 00:09:37.737
All my examples have
a billion errors in it.

181
00:09:37.737 --> 00:09:39.997
&gt;&gt; Speaker 4: Same thing.

182
00:09:39.997 --> 00:09:41.208
&gt;&gt; Speaker 2: And you can actually,

183
00:09:41.208 --> 00:09:50.123
perfect.
&gt;&gt; Speaker 4: So looking at the test for

184
00:09:50.123 --> 00:09:56.001
calling it with just a list of numbers,
so you gotta give, it's gonna triple,

185
00:09:56.001 --> 00:10:00.997
so the number will just be three.
&gt;&gt; Speaker 2: That's what it is,

186
00:10:00.997 --> 00:10:03.915
okay.
&gt;&gt; Speaker 4: So that should do it.

187
00:10:03.915 --> 00:10:06.658
One handy tip is you can
also partially find that,

188
00:10:06.658 --> 00:10:09.020
because this a function that takes a list.

189
00:10:10.330 --> 00:10:11.260
I'm sorry.
Did that not work?

190
00:10:13.690 --> 00:10:19.760
It's.
&gt;&gt; Joe: See, if there's people online or

191
00:10:19.760 --> 00:10:24.370
here that are still curious about reduce,
I'll go through the other example.

192
00:10:24.370 --> 00:10:28.355
I'll type some stuff in the console,

193
00:10:28.355 --> 00:10:32.595
you can see, it'll show you in action.

194
00:10:32.595 --> 00:10:35.253
Make it a little bigger.
&gt;&gt; Speaker 4: So

195
00:10:35.253 --> 00:10:39.552
one thing to noticed is- Are you
looking at underscore or ramdas?

196
00:10:39.552 --> 00:10:41.740
Yeah, you're going to go to ramdas.

197
00:10:41.740 --> 00:10:43.265
It's different [LAUGH].

198
00:10:43.265 --> 00:10:44.942
I pasted in chat.

199
00:10:44.942 --> 00:10:49.340
It was also a link to it
on the GitHub page to

200
00:10:49.340 --> 00:10:54.538
the dots.
&gt;&gt; Joe: Try

201
00:10:54.538 --> 00:10:57.576
to think of a good problem example.
&gt;&gt; Speaker 4: Hey Joe,

202
00:10:57.576 --> 00:10:59.699
do you want to put the-
&gt;&gt; Joe: What's that?

203
00:10:59.699 --> 00:11:01.990
Put the carrot back?
&gt;&gt; Speaker 4: I think it is easier to

204
00:11:01.990 --> 00:11:05.857
just Google get a ramda, and
then theres a link to the docs.

205
00:11:16.220 --> 00:11:17.935
&gt;&gt; Speaker 4: But the arguments to map

206
00:11:17.935 --> 00:11:22.750
are clipped, so it's gonna take
the function then the list.

207
00:11:22.750 --> 00:11:27.467
That's what's going on.

208
00:11:27.467 --> 00:11:32.975
[INAUDIBLE]
because

209
00:11:32.975 --> 00:11:37.449
once we get this

210
00:11:37.449 --> 00:11:43.649
working [INAUDIBLE].

211
00:11:43.649 --> 00:11:47.278
One cool thing if you're looking at
triple list, if you know how to curry,

212
00:11:47.278 --> 00:11:49.466
you've got a function that takes a list,
and

213
00:11:49.466 --> 00:11:53.500
now a map can be partially applied
to be a function that takes a list.

214
00:11:53.500 --> 00:11:58.584
So you could just get rid of the whole
function wrapper and just partially apply

215
00:11:58.584 --> 00:12:04.270
that, cuz it's almost like you're
crossing this list and that list off.

216
00:12:04.270 --> 00:12:07.820
This is a function that takes a list
that passes that list to map.

217
00:12:09.020 --> 00:12:12.442
So if map was partially applied it
would just take the list directly and

218
00:12:12.442 --> 00:12:13.371
then work and run.

219
00:12:13.371 --> 00:12:17.124
So let's just give it a shot.
&gt;&gt; Joe: [CROSSTALK] Ramda doesn't load

220
00:12:17.124 --> 00:12:20.721
sometimes because we didn't require a JS.

221
00:12:20.721 --> 00:12:23.222
We just used the script tag.

222
00:12:23.222 --> 00:12:24.203
I don't know.

223
00:12:24.203 --> 00:12:29.460
You'd think it would load, but
if you refresh it'll eventually work.

224
00:12:29.460 --> 00:12:31.622
And I think if you just press run anyway,

225
00:12:31.622 --> 00:12:34.117
it'll be there despite the warning.
&gt;&gt; Speaker 4: Yeah,

226
00:12:34.117 --> 00:12:35.575
that should work.
&gt;&gt; Joe: Yeah, probably [CROSSTALK].

227
00:12:35.575 --> 00:12:37.101
&gt;&gt; Speaker 4: [CROSSTALK] talk about

228
00:12:37.101 --> 00:12:41.019
that for a second cuz that's confusing.
&gt;&gt; Joe: Sweet.

229
00:12:41.019 --> 00:12:42.734
&gt;&gt; Speaker 4: So since map is a function

230
00:12:42.734 --> 00:12:46.575
now that takes a list,
we're just gonna give it the list

231
00:12:46.575 --> 00:12:48.760
when we call it.
&gt;&gt; Joe: Okay.

232
00:12:48.760 --> 00:12:49.960
&gt;&gt; Speaker 4: Yeah, it's pretty crazy.

233
00:12:49.960 --> 00:12:53.820
So you're kinda pushing off
any data to the caller,

234
00:12:53.820 --> 00:12:57.199
and the beauty in that is you
don't have to call anything list.

235
00:12:57.199 --> 00:13:00.043
You just don't have to refer to that.
&gt;&gt; Joe: Okay.

236
00:13:00.043 --> 00:13:03.143
[LAUGH]
&gt;&gt; Speaker 4: How're you doing over here?

237
00:13:03.143 --> 00:13:05.006
&gt;&gt; Speaker 3: [CROSSTALK] to get more

238
00:13:05.006 --> 00:13:09.688
familiar with reduce, though.
&gt;&gt; Joe: Trying to figure it out, but

239
00:13:09.688 --> 00:13:14.670
I don't really understand how it's
working So the way the reduce is going

240
00:13:14.670 --> 00:13:19.350
is it's giving each an accumulator and
each argument to it and

241
00:13:19.350 --> 00:13:21.136
just building it up.
&gt;&gt; Speaker 4: So

242
00:13:21.136 --> 00:13:25.400
whatever it returns it's going
to keep as the accumulator for

243
00:13:25.400 --> 00:13:28.723
the next iteration.
&gt;&gt; Speaker 3: Hey Joe do you think we

244
00:13:28.723 --> 00:13:31.968
should walk through like-
&gt;&gt; Speaker 2: Yes

245
00:13:31.968 --> 00:13:33.404
&gt;&gt; Speaker 3: At least challenges one and

246
00:13:33.404 --> 00:13:36.526
two and then maybe give them
a little bit more time do three or

247
00:13:36.526 --> 00:13:37.800
something?
&gt;&gt; Joe: Yeah,

248
00:13:37.800 --> 00:13:38.923
that sounds good.
&gt;&gt; Speaker 4: Or,

249
00:13:38.923 --> 00:13:42.939
we could just walk through all three.
&gt;&gt; Joe: Sure, sure, okay.

