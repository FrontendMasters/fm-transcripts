WEBVTT

1
00:00:00.100 --> 00:00:05.010
Going back to our HTML that doesn't
look so weird like the other one.

2
00:00:05.010 --> 00:00:06.870
So it's just an HTML.

3
00:00:06.870 --> 00:00:11.030
So forget about the templates for
now we will see that later but

4
00:00:11.030 --> 00:00:12.610
the rest is just HTML.

5
00:00:12.610 --> 00:00:13.820
Nothing really important.

6
00:00:13.820 --> 00:00:15.570
I don't have any JavaScript file.

7
00:00:15.570 --> 00:00:18.196
The only JavaScript file
that I do have here.

8
00:00:18.196 --> 00:00:20.597
It's serviceworker.js.

9
00:00:20.597 --> 00:00:22.420
That is kind of empty.

10
00:00:22.420 --> 00:00:26.560
This is the one that is making
the magic for the installation,

11
00:00:26.560 --> 00:00:31.160
the PWA installation, okay,
that we won't cover today.

12
00:00:31.160 --> 00:00:33.610
But it's not even linked at this point.

13
00:00:33.610 --> 00:00:36.060
So you don't see any JavaScript file,
okay.

14
00:00:36.060 --> 00:00:39.090
But before adding some
JavaScript I start rendering this.

15
00:00:39.090 --> 00:00:42.550
And when I go to the console here,
and I start playing with the DOM.

16
00:00:43.670 --> 00:00:46.485
So we already mentioned that we have
the document, we have the window and

17
00:00:46.485 --> 00:00:48.120
we have the document.

18
00:00:48.120 --> 00:00:55.266
So for example, here I can ask for
the document to the web querySelector,

19
00:00:55.266 --> 00:01:00.000
and I can try to find here
all my header elements.

20
00:01:01.480 --> 00:01:04.510
And it's giving me the header element.

21
00:01:04.510 --> 00:01:09.856
So document.querySelector, it's actually
picking one element from the DOM.

22
00:01:09.856 --> 00:01:16.337
The first one in this case with that
selector and that's a tag selector, okay?

23
00:01:16.337 --> 00:01:20.895
So if we look at our code,
let me show you here.

24
00:01:20.895 --> 00:01:23.935
The header we have an h1, we have nav.

25
00:01:23.935 --> 00:01:28.855
And for example in the nav we have links,
these anchor elements that they have here,

26
00:01:28.855 --> 00:01:31.488
the links, they have a class, for example,

27
00:01:31.488 --> 00:01:35.240
they have different classes but
one is navlink.

28
00:01:35.240 --> 00:01:38.336
So i can actually go and say, okay,

29
00:01:38.336 --> 00:01:44.025
document.querySelector.navlink dot
because it's a class.

30
00:01:44.025 --> 00:01:47.860
And it's giving me only one link.

31
00:01:47.860 --> 00:01:49.320
Not both.

32
00:01:49.320 --> 00:01:51.410
Why?
Because I'm using querySelector.

33
00:01:51.410 --> 00:01:55.750
querySelector is always
giving you one element.

34
00:01:55.750 --> 00:02:00.362
This is actually a very common mistake
when you're doing VanillaJS that you

35
00:02:00.362 --> 00:02:04.050
forget that Query Selector
is giving you only one.

36
00:02:04.050 --> 00:02:09.010
But we have also querySelectorAll
that returns a NodeList of 2.

37
00:02:10.290 --> 00:02:14.340
So now I have both links.

38
00:02:14.340 --> 00:02:18.800
Okay, so
that's how you pick elements from here.

39
00:02:18.800 --> 00:02:23.964
And what if you do a querySelector or
querySelectorAll

40
00:02:23.964 --> 00:02:29.034
of something that doesn't
exist like .important?

41
00:02:29.034 --> 00:02:29.534
Null.

42
00:02:30.880 --> 00:02:34.005
Because I don't have any
node with that class.

43
00:02:34.005 --> 00:02:36.368
And what our querySelectorAll?

44
00:02:36.368 --> 00:02:42.230
It's an empty NodeList, like an empty
array, not null, and we mentioned that.

45
00:02:42.230 --> 00:02:46.150
When we are picking one element if
it's not there it will be null.

46
00:02:46.150 --> 00:02:48.652
If you're picking multiple elements,

47
00:02:48.652 --> 00:02:52.630
if no one has found is giving me
an empty array, not null, okay?

48
00:02:52.630 --> 00:02:58.430
So things to have in mind when
you're dealing with these things.

49
00:02:58.430 --> 00:03:06.640
And by the way, I'm always using the DOM
API over the document option, right?

50
00:03:06.640 --> 00:03:10.620
But that's not completely
the only way to do that.

51
00:03:10.620 --> 00:03:12.340
Let me show you this.

52
00:03:12.340 --> 00:03:18.260
Going back to the elements,
I have for example here a nav, right?

53
00:03:18.260 --> 00:03:23.460
And within the nav for
example I have span, okay?

54
00:03:23.460 --> 00:03:25.790
So we have nav, I have a span.

55
00:03:25.790 --> 00:03:27.370
So what if I wanna get to the span?

56
00:03:28.890 --> 00:03:32.625
Well, I can go to console and

57
00:03:32.625 --> 00:03:38.246
say document.querySelector(span).

58
00:03:38.246 --> 00:03:40.560
Okay, yeah, I got the span.

59
00:03:40.560 --> 00:03:45.555
It has an id, so
I can also say span with id badge.

60
00:03:45.555 --> 00:03:46.926
Is it working?

61
00:03:46.926 --> 00:03:52.135
Yes, I'm getting the object in return,
so it works,

62
00:03:52.135 --> 00:03:56.667
but we are making a query
in the whole document,

63
00:03:56.667 --> 00:04:00.035
which might be a good idea or not.

64
00:04:00.035 --> 00:04:05.245
In fact, most people complaining
on the performance on VanillaJS

65
00:04:05.245 --> 00:04:11.775
is because they're always querying
the document and not specific parts.

66
00:04:11.775 --> 00:04:18.404
I could say, for example, that I wanna
first get, in this case the nav.

67
00:04:18.404 --> 00:04:25.552
So I can do a querySelector and
get the nav element, okay, like so.

68
00:04:25.552 --> 00:04:28.918
I can store that into a variable and

69
00:04:28.918 --> 00:04:34.153
then I don't need to use
document.querySelector.

70
00:04:34.153 --> 00:04:39.186
I can use nav.querySelector
because the DOM API is not just

71
00:04:39.186 --> 00:04:46.310
available in the DOM document object,
also it's available in every DOM element.

72
00:04:46.310 --> 00:04:50.500
So now I can query only within the nav.

73
00:04:52.070 --> 00:04:53.070
Make sense?

74
00:04:53.070 --> 00:04:56.850
So yeah, we did two queries, but
of course, because it is a variable,

75
00:04:56.850 --> 00:04:59.730
this is like caching the reference.

76
00:04:59.730 --> 00:05:05.050
So I can then store that nav object and
use it many times later.

77
00:05:05.050 --> 00:05:10.680
To then find elements in that,
like fragment of the document.

78
00:05:10.680 --> 00:05:12.820
Remember that someone asked
about document fragment.

79
00:05:12.820 --> 00:05:16.211
Well, this is kind of the same idea
where document fragment is like

80
00:05:16.211 --> 00:05:18.070
a separate option.

81
00:05:18.070 --> 00:05:22.927
But we can then query for
specific parts of the documents.

82
00:05:22.927 --> 00:05:28.453
So we are narrowing the query for
being more performant, okay.

83
00:05:28.453 --> 00:05:33.430
So all the API that we have seen is
actually available on every node option,

84
00:05:33.430 --> 00:05:34.940
not just in document.

85
00:05:36.290 --> 00:05:41.670
So when you understand how this work,
your brain will start organizing.

86
00:05:41.670 --> 00:05:45.330
Okay, how can I do things in my page?

87
00:05:46.520 --> 00:05:50.049
Okay, mostly we, I mean we are going
to talk about performance and

88
00:05:50.049 --> 00:05:54.420
we're going to explain where and
which parts performance is an issue.

89
00:05:54.420 --> 00:05:57.700
Okay, but we want specifically today,

90
00:05:57.700 --> 00:06:03.686
like the most performant solution
because we are learning from scratch.

91
00:06:03.686 --> 00:06:06.286
It's better to learn
the basic concepts and

92
00:06:06.286 --> 00:06:08.753
then maybe get deeper into performance.

93
00:06:08.753 --> 00:06:12.478
But this is a very simple way
to understand the difference,

94
00:06:12.478 --> 00:06:16.860
sometimes searching the document
will take more time.

95
00:06:16.860 --> 00:06:20.660
Of course that different browsers we have
different techniques to make that faster.

96
00:06:20.660 --> 00:06:24.170
Anyway, you know that there are browsers
that are faster than other browsers.

97
00:06:24.170 --> 00:06:24.940
And why is that?

98
00:06:24.940 --> 00:06:27.560
Well, they implement things differently.

99
00:06:27.560 --> 00:06:33.080
For example, they might implement
different indexes on when you're searching

100
00:06:33.080 --> 00:06:38.126
with querySelector generally find
elements faster or things like that.

101
00:06:38.126 --> 00:06:42.835
You can also start your project
by creating references,

102
00:06:42.835 --> 00:06:48.327
like storing variables of all
the elements that you will use a lot so

103
00:06:48.327 --> 00:06:54.042
that you don't need to query those
objects with a kind of a lazy load.

104
00:06:54.042 --> 00:06:59.510
You can prefetch those queries beforehand,
okay, just by creating variables.

105
00:07:01.130 --> 00:07:01.720
Does it make sense?

106
00:07:03.910 --> 00:07:06.970
Okay, and
remember that we are querying here.

107
00:07:06.970 --> 00:07:10.770
We are working with the DOM,
not with our original HTML.

108
00:07:12.140 --> 00:07:16.980
So we are working with a dynamic
structure that we have in memory.

