WEBVTT

1
00:00:00.000 --> 00:00:02.945
Okay, so let's code this part.

2
00:00:02.945 --> 00:00:07.952
So we are going to create our router,
so we are going

3
00:00:07.952 --> 00:00:13.433
to create another service,
we can call that router.js

4
00:00:18.445 --> 00:00:25.610
I'm going to start with an object
pretty simple, with two functions init.

5
00:00:25.610 --> 00:00:30.336
You understand why we need an init and go,

6
00:00:30.336 --> 00:00:35.072
that will ask the router
to go to a new URL.

7
00:00:35.072 --> 00:00:40.400
These will receive a route,
an optional add to history,

8
00:00:40.400 --> 00:00:44.399
that we can say that by default it's true.

9
00:00:44.399 --> 00:00:46.037
Why is this?

10
00:00:46.037 --> 00:00:49.098
Because maybe we wanna change the page,
but

11
00:00:49.098 --> 00:00:52.664
we don't wanna change
the history in the browser.

12
00:00:52.664 --> 00:00:57.917
So we don't want the user to go back,
one example, a login form.

13
00:00:57.917 --> 00:01:00.700
So you're in a login form in
a single-page application.

14
00:01:00.700 --> 00:01:04.383
So you log in, username,
password, you log in but

15
00:01:04.383 --> 00:01:07.309
what happens if I press the back button.

16
00:01:07.309 --> 00:01:10.203
Should I go back to the login form?

17
00:01:10.203 --> 00:01:14.956
No, so in that case we say false
to the second argument, so

18
00:01:14.956 --> 00:01:19.806
then there will be no back
button available, maybe you have

19
00:01:19.806 --> 00:01:25.044
a logout button but
it's not just going back in history, okay?

20
00:01:25.044 --> 00:01:29.876
And then I'm going to export, default,

21
00:01:29.876 --> 00:01:35.122
this router, and
then I'm gonna inject this

22
00:01:35.122 --> 00:01:39.968
router as a global object in our app.js.

23
00:01:39.968 --> 00:01:44.794
So, similar to store, we are going
to say that we have a router coming

24
00:01:44.794 --> 00:01:49.135
from that router that we
are importing from the other module.

25
00:01:49.135 --> 00:01:51.690
It's empty so far, okay, it's okay.

26
00:01:55.310 --> 00:01:58.144
To see if this is doing something,

27
00:01:58.144 --> 00:02:04.026
something that they can do is
console.log going to into and the route.

28
00:02:04.026 --> 00:02:09.859
We can call this path if you like as well,
it's just the same.

29
00:02:13.239 --> 00:02:15.595
Okay.

30
00:02:15.595 --> 00:02:21.602
So, next step, we have these two links.

31
00:02:21.602 --> 00:02:25.342
When you click on those links if
you pay attention to the browser,

32
00:02:25.342 --> 00:02:28.889
mostly the refresh button and
the URL bar, it's reloading.

33
00:02:28.889 --> 00:02:31.975
You can see the refresh
button is changing with an X.

34
00:02:31.975 --> 00:02:37.197
So it's actually making a new
navigation to the server.

35
00:02:37.197 --> 00:02:40.521
So we don't want that,
we don't want links or

36
00:02:40.521 --> 00:02:46.509
links that we want to manage to go to the
server, okay, we don't want that, okay?

37
00:02:46.509 --> 00:02:50.882
So what we need to do
is to enhance those

38
00:02:50.882 --> 00:02:55.570
links, with JavaScript, with the DOM API.

39
00:02:55.570 --> 00:03:01.153
We wanna trap the click on those links,
the activation of those links.

40
00:03:01.153 --> 00:03:06.195
And we wanna tell the browser,
hey browser, don't go to the URL,

41
00:03:06.195 --> 00:03:10.981
I will do that, okay,
that's the next step, I wanna do that.

42
00:03:10.981 --> 00:03:16.057
I wanna take those links and
tell the browser

43
00:03:16.057 --> 00:03:20.593
not to use those links as usual, okay?

44
00:03:20.593 --> 00:03:26.506
So for that, we will do that in init,
within the init,

45
00:03:26.506 --> 00:03:31.392
if we go to index.html,
we can see that those

46
00:03:31.392 --> 00:03:36.409
links are currently
classified as navlinks,

47
00:03:36.409 --> 00:03:41.189
that's a class, it's a classification.

48
00:03:41.189 --> 00:03:46.456
So we can use the DOM API to
get elements by class name or

49
00:03:46.456 --> 00:03:53.495
using query selector and get those
links and see if we can enhance them.

50
00:03:53.495 --> 00:03:55.934
We can change its default behavior.

51
00:03:55.934 --> 00:03:56.896
Make sense?

52
00:03:56.896 --> 00:03:58.792
So how?

53
00:03:58.792 --> 00:04:04.451
Well, we can take, for
example document querySelectorAll,

54
00:04:04.451 --> 00:04:08.613
because we want many links,
not just one, and

55
00:04:08.613 --> 00:04:13.118
we will take all the links
with the class nav link.

56
00:04:13.118 --> 00:04:19.041
And because I'm using querySelectorAll,
it's a static node list.

57
00:04:19.041 --> 00:04:24.404
We can use modern techniques
such as foreach and

58
00:04:24.404 --> 00:04:30.838
I can say foreach link for
each anchor we can call it A or

59
00:04:30.838 --> 00:04:35.411
link that's actually each iteration.

60
00:04:35.411 --> 00:04:37.985
We are looping through all the links.

61
00:04:37.985 --> 00:04:44.379
We are going to add an event listener for
that link for the click, Event Handler.

62
00:04:47.200 --> 00:04:51.400
Again, if you feel is this is too verbose,

63
00:04:51.400 --> 00:04:57.713
you can trick the language quickly
to change the syntax of this.

64
00:04:57.713 --> 00:05:04.460
So far, what happens here is that now
we are within this event handler,

65
00:05:04.460 --> 00:05:09.078
we are in the click of
each of those links, okay?

66
00:05:09.078 --> 00:05:16.173
So the first thing that we want is to stop
the browser for making a new navigation.

67
00:05:16.173 --> 00:05:21.436
So every time you wanna
do that with vanilla.js,

68
00:05:21.436 --> 00:05:26.698
you need to talk to
the argument that you receive,

69
00:05:26.698 --> 00:05:30.981
the event has a prevent default method.

70
00:05:30.981 --> 00:05:37.003
And you can apply this on every DOM event,
not every event has something to prevent.

71
00:05:37.003 --> 00:05:41.689
But when you wanna prevent
the default behavior of the browser,

72
00:05:41.689 --> 00:05:43.701
you call prevent default.

73
00:05:43.701 --> 00:05:50.629
So if I do that, for example, and
then I do console.log link clicked.

74
00:05:50.629 --> 00:05:55.208
We are not calling the router yet,
so it's not going to work.

75
00:05:55.208 --> 00:05:56.966
So we're not calling init.

76
00:05:56.966 --> 00:06:00.872
Where do you feel it's
a good place to call init?

77
00:06:03.187 --> 00:06:05.581
DomContentLoader, so

78
00:06:05.581 --> 00:06:11.691
now that we have a router in
the app object, we can call init.

79
00:06:11.691 --> 00:06:16.689
In this case it's going
to initialize the router,

80
00:06:16.689 --> 00:06:20.177
and the router will, for example,

81
00:06:20.177 --> 00:06:24.722
go over all the links and
enhance those links.

82
00:06:24.722 --> 00:06:29.448
Now that we have that,
if I click on the links,

83
00:06:29.448 --> 00:06:33.693
I'm not seeing that refresh behavior and

84
00:06:33.693 --> 00:06:39.042
you can see in console.log,
it says link clicked.

85
00:06:39.042 --> 00:06:45.732
But more importantly,
the page is not being refreshed as before,

86
00:06:45.732 --> 00:06:51.595
because we are preventing
the default operation, okay?

87
00:06:51.595 --> 00:06:54.586
So what's the next step?

88
00:06:54.586 --> 00:07:00.992
Well we need to call router go so
he can go to the route.

89
00:07:00.992 --> 00:07:03.539
So how do I know where I am right now?

90
00:07:04.823 --> 00:07:05.745
Well.

91
00:07:06.860 --> 00:07:12.249
Let's look at the html,
the html has an h ref property,

92
00:07:12.249 --> 00:07:18.326
that has the target of the link,
that now we are preventing, so

93
00:07:18.326 --> 00:07:23.845
we are not going to that URL but
we can read that property.

94
00:07:23.845 --> 00:07:26.569
Okay, so
we're going to read that property.

95
00:07:26.569 --> 00:07:28.231
There are many ways to read the property.

96
00:07:28.231 --> 00:07:31.207
So let me show you a different
way to read the property.

97
00:07:31.207 --> 00:07:35.647
Just remember we are in
an event listener for the link,

98
00:07:35.647 --> 00:07:39.520
for the anchor element for
the a element.

99
00:07:39.520 --> 00:07:41.265
One way to get the URL.

100
00:07:43.353 --> 00:07:48.105
Is to take a.href, that's one way but

101
00:07:48.105 --> 00:07:52.143
I will show you a different ways.

102
00:07:52.143 --> 00:07:58.617
Another way is to use a.getAttribute.

103
00:07:58.617 --> 00:08:05.629
There is a DOM API, where you can
get attributes by their name.

104
00:08:05.629 --> 00:08:10.810
Is it the same, shouldn't use the same
variable name, is it the same?

105
00:08:10.810 --> 00:08:16.322
Kind of, kind of, this is the property and
this is the attribute.

106
00:08:16.322 --> 00:08:20.922
I'm not sure if you remember,
earlier that I mentioned that

107
00:08:20.922 --> 00:08:25.622
it's not exactly the same but
for this case, it's the same.

108
00:08:25.622 --> 00:08:28.389
Also, instead of using, by the way,

109
00:08:28.389 --> 00:08:34.108
can I use a as a variable within the event
handler that is a different function?

110
00:08:34.108 --> 00:08:39.095
So a,
it's a local variable to this function,

111
00:08:39.095 --> 00:08:43.722
function one, and
now I am in function two.

112
00:08:43.722 --> 00:08:48.175
Can I use local variable
from the outer function?

113
00:08:48.175 --> 00:08:52.767
Yes, that's a closure, okay,
that's known as a closure,

114
00:08:52.767 --> 00:08:58.437
anyway I'm not getting into those details
but instead of using a a closure.

115
00:08:58.437 --> 00:09:03.789
Instead of using a i can
also use event.target.

116
00:09:08.172 --> 00:09:12.519
Before you ask, I know there is another
one known as current target and

117
00:09:12.519 --> 00:09:14.445
they will explain that later.

118
00:09:14.445 --> 00:09:19.101
So, in this case,
is the target of the event, so

119
00:09:19.101 --> 00:09:23.418
this case the click
happen over one element,

120
00:09:23.418 --> 00:09:29.683
that's the target and
I subscribed the event over that element.

121
00:09:29.683 --> 00:09:34.948
So event.target is
the subject of my event.

122
00:09:37.700 --> 00:09:43.105
In this case for this particular case,
every option will work, okay?

123
00:09:43.105 --> 00:09:44.021
Makes sense?

124
00:09:44.021 --> 00:09:47.833
So I'm getting in this case
the hrefAttribute, for what?

125
00:09:47.833 --> 00:09:53.706
For getting the URL so
then we can call go over that URL.

126
00:09:57.189 --> 00:10:02.412
Just for that, we are upgrading the links,
the anchor elements.

127
00:10:02.412 --> 00:10:06.885
So when you click on a link,
I'm reading its href

128
00:10:06.885 --> 00:10:11.464
and passing that value into
my router go function,

129
00:10:11.464 --> 00:10:14.600
that later, it will do something.

130
00:10:16.719 --> 00:10:17.469
Make sense?

131
00:10:17.469 --> 00:10:22.579
So the only thing different
that I should see now is that

132
00:10:26.006 --> 00:10:31.117
Reloading, when I'm
clicking on those icons,

133
00:10:31.117 --> 00:10:35.238
I'm seeing going to/ going to order.

134
00:10:35.238 --> 00:10:39.043
So it's actually getting here,
getting into go.

135
00:10:39.043 --> 00:10:43.792
Again, I'm not creating
a router that is abstract,

136
00:10:43.792 --> 00:10:46.860
that will serve for every web app.

137
00:10:46.860 --> 00:10:50.394
I'm creating one from scratch
specifically for this web app,

138
00:10:50.394 --> 00:10:54.657
later that's an idea you can create
a more abstract router that is reusable.

139
00:10:54.657 --> 00:10:59.624
Okay, but I'm trying to teach
you how that works step by step,

140
00:10:59.624 --> 00:11:04.047
so then you can add more
abstraction layers on top of it.

141
00:11:04.047 --> 00:11:09.110
So one more thing in init
that we should do is to when

142
00:11:09.110 --> 00:11:14.791
we are initializing the app
is to check the initial URL.

143
00:11:14.791 --> 00:11:15.621
Why is that?

144
00:11:15.621 --> 00:11:21.897
Because maybe the user is loading
the app directly in /cart.

145
00:11:21.897 --> 00:11:26.673
So maybe we don't wanna start
always with the homescreen.

146
00:11:26.673 --> 00:11:28.556
Remember that we are a single
page application now.

147
00:11:28.556 --> 00:11:31.485
Even if it's the same index.html,

148
00:11:31.485 --> 00:11:36.396
maybe the user is directly because
the user has just copied and

149
00:11:36.396 --> 00:11:42.268
pasted the URL or someone send you
a text with a URL, and it's a deep link.

150
00:11:42.268 --> 00:11:47.349
To do deep linking into a single page
application means that we should

151
00:11:47.349 --> 00:11:51.904
start here, checking the current
path name of the location,

152
00:11:51.904 --> 00:11:56.571
that's the current URL and
asking the router to go to that URL.

153
00:11:56.571 --> 00:12:01.001
So based on the current URL,
it will load the homepage,

154
00:12:01.001 --> 00:12:04.314
the order menu or other sections, okay?

155
00:12:04.314 --> 00:12:05.181
Make sense?

156
00:12:05.181 --> 00:12:13.188
Again, this is not still doing anything
in the DOM and that's the next step.

157
00:12:13.188 --> 00:12:19.244
So the next step is to actually
do something where you go.

158
00:12:19.244 --> 00:12:21.657
So we are going to write
a lot of code here now.

159
00:12:21.657 --> 00:12:25.968
And again, the code that I'm going to
write is actually not reusable for other

160
00:12:25.968 --> 00:12:30.293
apps, because I wanna go step by step and
then you can add abstraction layers.

161
00:12:30.293 --> 00:12:32.669
You can create your own mini framework.

162
00:12:32.669 --> 00:12:37.327
So then you can create a router
that is multi-solution,

163
00:12:37.327 --> 00:12:40.538
multi-app, or you can use a library.

164
00:12:40.538 --> 00:12:45.386
There are a lot of mini libraries
that are solving this with just maybe

165
00:12:45.386 --> 00:12:46.818
1K of JavaScript.

166
00:12:46.818 --> 00:12:49.928
Instead of using like a big framework,

167
00:12:49.928 --> 00:12:53.613
you can just take a library just for
this part.

168
00:12:53.613 --> 00:12:58.677
So one of the things that we will
check is that we wanna add to history.

169
00:12:58.677 --> 00:13:00.376
So that's the second argument.

170
00:13:00.376 --> 00:13:05.016
If we wanna add to history,
we need to add to history and for

171
00:13:05.016 --> 00:13:08.164
that, we're going to use push state.

172
00:13:08.164 --> 00:13:11.384
And you can see here that I wasn't lying,

173
00:13:11.384 --> 00:13:15.341
that the second argument is called unused,
okay?

174
00:13:15.341 --> 00:13:19.445
So anyway you can pass an empty string or
no or anything we work.

175
00:13:19.445 --> 00:13:23.045
And the first one is data,
that says any, by the way,

176
00:13:23.045 --> 00:13:26.417
that's kind of a TypeScript annotation,
okay?

177
00:13:26.417 --> 00:13:28.437
Any means, anything.

178
00:13:28.437 --> 00:13:33.800
So we can pass, for example,
an object that will include

179
00:13:33.800 --> 00:13:38.940
the route inside, and
later we can add more metadata,

180
00:13:38.940 --> 00:13:43.440
for example,
we can pass on a scroll position.

181
00:13:43.440 --> 00:13:48.399
So then when we go back, we know where
the scroll, or we can make a lot

182
00:13:48.399 --> 00:13:53.373
of interesting things here but
right now we can pass just the route.

183
00:13:53.373 --> 00:13:57.002
I'm passing this as an object,
so, it's more future-proof.

184
00:13:57.002 --> 00:14:01.290
I mean, I can pass just the route
directly, I don't need an object wrapping

185
00:14:01.290 --> 00:14:04.919
the route, but yeah maybe in
the future we will add more things.

186
00:14:04.919 --> 00:14:08.235
An empty string, or null for unused and

187
00:14:08.235 --> 00:14:11.862
then the URL that is in
this case the route.

