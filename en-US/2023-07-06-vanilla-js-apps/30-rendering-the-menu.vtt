WEBVTT

1
00:00:00.310 --> 00:00:05.350
So we have the proxy, and
that proxy is broadcasting changes.

2
00:00:05.350 --> 00:00:11.150
So now let's go back a little
bit to our app.js file.

3
00:00:11.150 --> 00:00:13.280
And here, we were loading data.

4
00:00:13.280 --> 00:00:20.361
Remember, load data was actually going
to the API and storing the menu.

5
00:00:20.361 --> 00:00:27.060
And here, we don't see that as a consumer,
but it seems like we are using the proxy.

6
00:00:28.270 --> 00:00:34.590
When we change the menu, that proxy should
be broadcasting that there is a change.

7
00:00:34.590 --> 00:00:39.098
Well, because of that,
now we can go to, for

8
00:00:39.098 --> 00:00:44.082
example, our MenuPage.js, and somewhere,

9
00:00:44.082 --> 00:00:48.354
for example, in our connected callback,

10
00:00:48.354 --> 00:00:53.238
we can listen for
that event for appmenuchange.

11
00:00:53.238 --> 00:00:57.267
So when the menu changes,
I will call, for example,

12
00:00:57.267 --> 00:01:03.460
a render method that we to create just to
not do everything in that event handler.

13
00:01:05.360 --> 00:01:06.557
Make sense?

14
00:01:06.557 --> 00:01:11.859
So that means that we can
have a render method because

15
00:01:11.859 --> 00:01:16.890
the data has changed,
the menu is available.

16
00:01:16.890 --> 00:01:19.240
We can start rendering our user interface.

17
00:01:20.380 --> 00:01:24.825
And here, we are going to use a mix
of techniques, as I mentioned before.

18
00:01:24.825 --> 00:01:30.372
And for the techniques that are just the
same or just like writing a lot of code,

19
00:01:30.372 --> 00:01:35.439
we will probably switch to pasting
the code that we know it's working.

20
00:01:35.439 --> 00:01:39.187
The first time, I will type it completely
to explain what I'm doing, and

21
00:01:39.187 --> 00:01:43.010
then the second one, that is the same,
there is no need for that.

22
00:01:43.010 --> 00:01:49.560
So, first,
someone can be setting the menu as null.

23
00:01:49.560 --> 00:01:53.560
So I should check if there is a menu or
not.

24
00:01:53.560 --> 00:01:59.418
And if there is not a menu, maybe what
I want is to render a paragraph or

25
00:01:59.418 --> 00:02:03.660
an image, something saying loading, okay?

26
00:02:03.660 --> 00:02:07.819
So, in this case, I can take my root,
what is the root?

27
00:02:07.819 --> 00:02:12.751
The root is the shadow DOM, and

28
00:02:12.751 --> 00:02:16.364
search for an ID menu.

29
00:02:16.364 --> 00:02:20.229
I can use querySelector or
get element by ID, and

30
00:02:20.229 --> 00:02:24.295
change its inner HTML as,
for example, loading.

31
00:02:24.295 --> 00:02:30.409
This is one way, use innerHTML is a way
to change the content of something.

32
00:02:31.530 --> 00:02:36.007
So if the menu is null,
then it will say loading.

33
00:02:36.007 --> 00:02:39.660
If it's not null,
I will write a lot of stuff here.

34
00:02:41.220 --> 00:02:42.611
For example, first,

35
00:02:42.611 --> 00:02:47.529
let's analyze the structure because we
haven't seen that structure before.

36
00:02:48.720 --> 00:02:52.752
The menu.json looks like this,
it has, first,

37
00:02:52.752 --> 00:02:58.260
an array of categories,
like hot coffee, ice coffee, okay?

38
00:02:58.260 --> 00:03:02.800
And each category has a name and
an array of products.

39
00:03:02.800 --> 00:03:05.610
So we need to loop through this.

40
00:03:05.610 --> 00:03:07.490
So we're going to start
with categories first.

41
00:03:08.510 --> 00:03:11.698
We can use for each or for

42
00:03:11.698 --> 00:03:17.290
(let category of app.store.menu).

43
00:03:17.290 --> 00:03:21.608
And now, I can use innerHTML,
so I can create a long string,

44
00:03:21.608 --> 00:03:26.452
I can concatenate the string and
then set the innerHTML to the menu.

45
00:03:26.452 --> 00:03:30.941
Or just to do things in different ways,

46
00:03:30.941 --> 00:03:36.110
we can just create an li for
the category, and

47
00:03:36.110 --> 00:03:41.290
say document.createElement("li").

48
00:03:41.290 --> 00:03:47.701
And then for the li category,
we are going to create an h3 for

49
00:03:47.701 --> 00:03:53.630
the name of the category and
a list for products, okay?

50
00:03:54.660 --> 00:03:59.096
So I can do it with createElement,
so I can create an h3.

51
00:03:59.096 --> 00:04:02.613
Or in this case, because I think
it's pretty simple to understand,

52
00:04:02.613 --> 00:04:04.140
I'm going to use innerHTML.

53
00:04:05.420 --> 00:04:09.947
So I'm going to say that
we will have an h3 and

54
00:04:09.947 --> 00:04:15.558
then a list of products that
will have a class category.

55
00:04:17.796 --> 00:04:19.540
And that's all I need here.

56
00:04:20.900 --> 00:04:25.838
And finally, I will take the menu and

57
00:04:25.838 --> 00:04:32.980
I will append that
liCategory at the end of it.

58
00:04:32.980 --> 00:04:37.423
So for each category,
I'm creating a list item and an li,

59
00:04:37.423 --> 00:04:42.248
and inside the li, I have, one,
an h3 and a list of products.

60
00:04:42.248 --> 00:04:44.382
I'm mixing techniques here, okay?

61
00:04:44.382 --> 00:04:45.887
Remember that.

62
00:04:45.887 --> 00:04:49.463
For h3, I wanna put inside
the name of the category,

63
00:04:49.463 --> 00:04:54.355
I already have the name of
the category in category.name.

64
00:04:54.355 --> 00:04:59.776
So I can use the template here,
category.name,

65
00:04:59.776 --> 00:05:04.559
dollar sign, curly braces, expression.

66
00:05:04.559 --> 00:05:07.765
Category.name is the name
of the current category.

67
00:05:09.935 --> 00:05:10.475
Make sense?

68
00:05:14.931 --> 00:05:19.114
So now, coming back to the project,
I'm seeing this,

69
00:05:19.114 --> 00:05:24.670
which it's better than the violet
title that we had before, right?

70
00:05:24.670 --> 00:05:27.130
So, it worked.

71
00:05:27.130 --> 00:05:30.740
We are injecting the DOM dynamically.

72
00:05:30.740 --> 00:05:38.825
And if I inspect this,
I have a menu with four li's,

73
00:05:38.825 --> 00:05:44.207
each li with an h3 and an empty ul.

74
00:05:44.207 --> 00:05:45.830
Make sense?

75
00:05:45.830 --> 00:05:48.000
Do you have any question on this,
that code?

76
00:05:49.150 --> 00:05:54.500
So we are creating dynamically
HTML based on the menu.

77
00:05:54.500 --> 00:05:58.750
And by the way, we didn't realize
that actually our proxy worked.

78
00:06:00.400 --> 00:06:07.141
This happened because the event
appmenuchange was fired,

79
00:06:07.141 --> 00:06:13.083
and that triggered our render method and
it worked.

80
00:06:13.083 --> 00:06:18.378
And if someone is changing that menu
with a new version of the menu,

81
00:06:18.378 --> 00:06:23.049
it will trigger, again, render, Okay?

82
00:06:23.049 --> 00:06:28.470
Something that is not completely okay here
is that we are not clearing the menu.

83
00:06:28.470 --> 00:06:31.860
Remember I mentioned when you're
doing vanilla JS, this is important.

84
00:06:31.860 --> 00:06:37.770
When you're using appendChild before the
for, we should clear the contents, why?

85
00:06:37.770 --> 00:06:42.813
Because if not, for example,
we will still keep the original loading,

86
00:06:42.813 --> 00:06:48.410
because we will keep the previous content
and we are appending new elements.

87
00:06:48.410 --> 00:06:53.380
Well, you can clear this
up before doing that.

88
00:06:53.380 --> 00:06:54.243
And by the way,

89
00:06:54.243 --> 00:06:58.840
you can cache the menu if you want instead
of accessing querySelector every time.

90
00:07:01.750 --> 00:07:03.815
So now, what about the products?

91
00:07:03.815 --> 00:07:10.250
Because now I need to define the product,
each product inside here, okay?

92
00:07:10.250 --> 00:07:16.830
Well, instead of,
I'm talking about the li's that goes here.

93
00:07:18.000 --> 00:07:22.129
What I want for each item, for each row,

94
00:07:22.129 --> 00:07:26.512
I wanna create another component, okay?

95
00:07:26.512 --> 00:07:30.340
So we are going to create another
component similar to what you do in React

96
00:07:30.340 --> 00:07:34.668
or in Angular, you create the component
for each item, you have one for the list,

97
00:07:34.668 --> 00:07:36.270
and one for each component.

98
00:07:36.270 --> 00:07:39.400
I'm going to create a new component, okay?

99
00:07:40.440 --> 00:07:42.740
But, before actually
creating the component,

100
00:07:42.740 --> 00:07:46.100
let's try to understand
how I'm going to do that.

101
00:07:46.100 --> 00:07:50.128
So for example,
after we do that appendChild,

102
00:07:50.128 --> 00:07:55.667
I'm going to take the current category,
and for each products,

103
00:07:55.667 --> 00:08:02.740
I'm going to, for example, do a map or a
forEach, I'm sure you can use a for each.

104
00:08:04.780 --> 00:08:10.300
And you can say for each product,
I'm going to do something, what?

105
00:08:11.410 --> 00:08:14.021
Well, I'm going to create a new element,
okay?

106
00:08:14.021 --> 00:08:17.810
So I'm going to create an item element,
how?

107
00:08:17.810 --> 00:08:21.390
document.createElement.

108
00:08:21.390 --> 00:08:22.790
Of which type?

109
00:08:22.790 --> 00:08:24.120
A type that I'm going to create.

110
00:08:25.250 --> 00:08:27.840
Let's call that product-item.

111
00:08:28.890 --> 00:08:31.113
It doesn't exist yet, okay?

112
00:08:31.113 --> 00:08:31.666
Will it work?

113
00:08:31.666 --> 00:08:36.984
It will create that HTML tag, but the
browser will not know how to render that,

114
00:08:36.984 --> 00:08:39.898
so it will render nothing, okay, so far.

115
00:08:39.898 --> 00:08:44.322
So now what I need is to pass
the current product to that component so

116
00:08:44.322 --> 00:08:46.620
it can render the content, okay?

117
00:08:47.800 --> 00:08:52.840
So, for that,
I'm going to use dataset.product.

118
00:08:52.840 --> 00:08:55.680
And because it's an object,
I need to pass it as a string.

119
00:08:55.680 --> 00:08:58.530
This is not the only way to do that, okay?

120
00:08:58.530 --> 00:09:00.880
But, again,
I'm using different techniques.

121
00:09:00.880 --> 00:09:05.941
So I can stringfy, I can pass an ID also,
instead of the whole product, anyway.

122
00:09:05.941 --> 00:09:10.899
I try to show you different techniques.

123
00:09:10.899 --> 00:09:16.472
And then I need to attach this to the,
where I need to put this?

124
00:09:16.472 --> 00:09:19.585
Here, in this ul, okay?

125
00:09:19.585 --> 00:09:20.380
Makes sense?

126
00:09:20.380 --> 00:09:23.700
That ul is in file liCategory.

127
00:09:23.700 --> 00:09:29.116
So I can ask to the liCategory to find,

128
00:09:29.116 --> 00:09:33.008
by a selector, the ul, and

129
00:09:33.008 --> 00:09:40.310
then append the child item,
something like that.

130
00:09:41.370 --> 00:09:43.144
This is still not going to work,

131
00:09:43.144 --> 00:09:47.100
because we haven't registered
that custom element yet.

132
00:09:47.100 --> 00:09:50.050
But the idea,
I think the idea should work.

133
00:09:51.370 --> 00:09:55.592
So if I see this here, if I inspect this,

134
00:09:55.592 --> 00:10:00.809
I see a ul with a lot of product items,
each one with

135
00:10:00.809 --> 00:10:06.671
the data product inside
rendering nothing yet, okay?

136
00:10:06.671 --> 00:10:07.480
But it's okay.

137
00:10:09.130 --> 00:10:14.688
So the next step is to create the custom
element and register that element.

138
00:10:14.688 --> 00:10:16.050
Do you have any questions at this point?

139
00:10:16.050 --> 00:10:19.602
Does it make sense so far?

140
00:10:19.602 --> 00:10:20.102
Yeah.

141
00:10:21.870 --> 00:10:24.476
&gt;&gt; Does the shadow DOM
allow you to use local IDs?

142
00:10:24.476 --> 00:10:29.140
For example, is it valid to have two shadow
elements side by side with the same ID?

143
00:10:29.140 --> 00:10:32.057
&gt;&gt; Yes, because it's its own documents, so

144
00:10:32.057 --> 00:10:35.631
a shadow DOM has its own
document with its own rules.

145
00:10:35.631 --> 00:10:39.600
But so far,
we don't have a shadow DOM on that one.

146
00:10:39.600 --> 00:10:44.036
And I don't think I want shadow DOM for
the product item,

147
00:10:44.036 --> 00:10:49.220
just to show you that you don't need
to use a shadow DOM every time.

148
00:10:50.740 --> 00:10:55.170
So we will use shadow DOM for
each page component.

149
00:10:55.170 --> 00:10:59.390
But then, I wanna share the CSS
stylesheet, for example, for

150
00:10:59.390 --> 00:11:02.584
all the other web components
within that page.

151
00:11:02.584 --> 00:11:04.890
It's our decision, okay?

152
00:11:04.890 --> 00:11:07.730
So don't think that
shadow DOM goes always.

