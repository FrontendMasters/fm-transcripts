WEBVTT

1
00:00:00.000 --> 00:00:05.867
Okay, so to work with the DOM API,
we can select elements from the DOM.

2
00:00:05.867 --> 00:00:11.242
This is probably the,
if you have ever seen a JavaScript course,

3
00:00:11.242 --> 00:00:13.976
or if you have ever read a book, or

4
00:00:13.976 --> 00:00:19.178
even a blog post on JavaScript,
you have seen this basic part.

5
00:00:19.178 --> 00:00:21.959
You can select an element By its ID,

6
00:00:21.959 --> 00:00:26.519
the famous document get element by ID,
we'll get there.

7
00:00:26.519 --> 00:00:31.533
By Class Name, so when you want to pick
an element from the DOM you can pick them

8
00:00:31.533 --> 00:00:36.487
By ID, and for that you need an ID,
remember the ID in HTML is not mandatory.

9
00:00:36.487 --> 00:00:41.541
So if you don't set an ID of an element,
you can't get an element By ID.

10
00:00:41.541 --> 00:00:45.173
By Class Name,
in this case it's the class declaration.

11
00:00:45.173 --> 00:00:51.634
By Name, this is the name HTML attribute
that most of the time we use only for

12
00:00:51.634 --> 00:00:56.886
forms, but actually you can use
it on other element as well.

13
00:00:56.886 --> 00:01:01.813
Means not common, but some library or
some patterns will let you use that.

14
00:01:01.813 --> 00:01:06.174
By CSS Selector that is currently
today the most famous one,

15
00:01:06.174 --> 00:01:09.851
I mean, you picking element
by using a CSS Selector

16
00:01:09.851 --> 00:01:14.405
that matches that particular elements or
a group of elements.

17
00:01:14.405 --> 00:01:19.860
Or By Navigating the DOM Structure, so
instead of looking into the the HTML

18
00:01:19.860 --> 00:01:25.068
itself you can navigate the structure
because it's a tree structure.

19
00:01:25.068 --> 00:01:30.966
We have parents, have children, okay,
and we can navigate that structure.

20
00:01:30.966 --> 00:01:35.369
Yeah, it's a lot of work sometimes,
but sometimes it's better,

21
00:01:35.369 --> 00:01:36.924
it depends on the case.

22
00:01:36.924 --> 00:01:40.211
When selecting elements,
like I wanna get the IMG,

23
00:01:40.211 --> 00:01:43.648
I wanna get the link,
when selecting these elements,

24
00:01:43.648 --> 00:01:47.548
some functions will return one element and
only one element.

25
00:01:47.548 --> 00:01:51.357
The element typically
extends from HTMLElement.

26
00:01:51.357 --> 00:01:57.023
It can be A Live HTML Element Collection,
and the class, I mean,

27
00:01:57.023 --> 00:02:02.183
the type that we receive is
an instance of HTMLCollection.

28
00:02:02.183 --> 00:02:07.689
Live means that, for example,
if you're looping through those elements,

29
00:02:07.689 --> 00:02:12.771
and also at the same time you have
another code that is changing the DOM,

30
00:02:12.771 --> 00:02:15.837
it will change your collection on the fly.

31
00:02:15.837 --> 00:02:21.315
I mean, you're getting all the elements
with the class important and you're

32
00:02:21.315 --> 00:02:27.293
making a loop, for, looping through all
the elements with class equals important.

33
00:02:27.293 --> 00:02:33.388
While you are looping a new HTMLElement
appears in the DOM with class important.

34
00:02:33.388 --> 00:02:38.036
Well, you are changing
the collection that you're looping.

35
00:02:38.036 --> 00:02:42.174
But some other functions will
return a Static Element Collection,

36
00:02:42.174 --> 00:02:44.359
it's like a frozen at that moment.

37
00:02:44.359 --> 00:02:47.935
And in this case,
it's called a NodeList, so

38
00:02:47.935 --> 00:02:51.890
it's a different interface,
okay, a NodeList.

39
00:02:51.890 --> 00:02:57.764
So it depends on the function that you're
using, you can receive a NodeList or

40
00:02:57.764 --> 00:03:03.986
an HTMLCollection and the API is
available there is not the same, okay?

41
00:03:03.986 --> 00:03:07.495
So to get one element, typically today,

42
00:03:07.495 --> 00:03:12.860
we use getElementByID if it has an ID or
querySelector.

43
00:03:12.860 --> 00:03:18.512
There other ways, like first child in
case you are navigating through the DOM.

44
00:03:18.512 --> 00:03:22.736
But the most common are getElementByID and
querySelector.

45
00:03:22.736 --> 00:03:26.236
getElementByID is from the first
version of DOM, by the way,

46
00:03:26.236 --> 00:03:28.338
the DOM API has different versions.

47
00:03:28.338 --> 00:03:33.863
At this point, it doesn't matter, I mean,
in the W3C, we have different specs, okay?

48
00:03:33.863 --> 00:03:37.897
getElementByID is not exactly for
the original one, but

49
00:03:37.897 --> 00:03:42.108
from the 90s anyway,
getElementByID is from the 90s.

50
00:03:42.108 --> 00:03:48.732
querySelector is more modern has probably
today 15 years, something like that.

51
00:03:48.732 --> 00:03:54.768
querySelector will let you get the first
element matching a CSS Selector.

52
00:03:54.768 --> 00:04:00.747
So if you say h1, it will take the first
h1, if you have more than one,

53
00:04:00.747 --> 00:04:04.843
just the first one,
it will return one element.

54
00:04:04.843 --> 00:04:10.923
Have in mind, when you use these
functions that are returning one element,

55
00:04:10.923 --> 00:04:14.829
you can always get null in
case no node was found.

56
00:04:14.829 --> 00:04:17.713
So you're getting an elementByID and

57
00:04:17.713 --> 00:04:22.951
the ID does not exist in the HTML,
you get null, okay, makes sense?

58
00:04:22.951 --> 00:04:25.075
So here you have an example,

59
00:04:25.075 --> 00:04:30.041
this is a very basic JavaScript
like JavaScript 101 with a DOM.

60
00:04:30.041 --> 00:04:34.707
So you create a variable element
document.getElementById,

61
00:04:34.707 --> 00:04:36.650
you pass an Id as a string.

62
00:04:36.650 --> 00:04:40.997
And, so,
have in mind that element can be null,

63
00:04:40.997 --> 00:04:45.674
in case it doesn't exist
in the current DOM, okay?

64
00:04:45.674 --> 00:04:50.549
If it's querySelector, you pass
a CSS Selector such as in this case

65
00:04:50.549 --> 00:04:55.510
you will find, the first element
matching that selector it's a link

66
00:04:55.510 --> 00:05:00.407
that's within a header,
that is a direct descendant of a section.

67
00:05:00.407 --> 00:05:06.451
And then you can deal with that element,
you can change the contents,

68
00:05:06.451 --> 00:05:10.657
read the contents,
add attributes, and so on.

69
00:05:10.657 --> 00:05:15.524
To get multiple elements so
if you wanna get the collection

70
00:05:15.524 --> 00:05:20.293
of elements there are many
ways getElementsByTagName,

71
00:05:20.293 --> 00:05:26.676
getElementsByClassName, querySelectorAll,
and getElementsByName.

72
00:05:26.676 --> 00:05:30.671
This is not the full list,
it's probably the most common ones.

73
00:05:30.671 --> 00:05:35.659
And from this list
querySelectorAll is the only one

74
00:05:35.659 --> 00:05:39.839
giving you on a static collection, okay?

75
00:05:39.839 --> 00:05:44.679
And be in library static for
most situations Hegel argue that,

76
00:05:44.679 --> 00:05:49.261
it's not going to make a big
difference for most use cases.

77
00:05:49.261 --> 00:05:53.843
But we have a big difference, okay,
you will see that in a second.

78
00:05:53.843 --> 00:05:59.521
When you use functions returning multiple
elements, if there are no elements

79
00:05:59.521 --> 00:06:04.608
you won't get no, you will get
an empty array or an empty collection.

80
00:06:04.608 --> 00:06:10.382
And when I say array because sometimes
it's not really an array, okay,

81
00:06:10.382 --> 00:06:15.509
but it has an array like interface anyway,
on every situation.

82
00:06:15.509 --> 00:06:20.504
So for example,
here I'm using querySelectorAll,

83
00:06:20.504 --> 00:06:27.614
that receives also a CSS Selector,
but it's always returns a collection.

84
00:06:27.614 --> 00:06:34.412
In this case, it's given me
the list items of an ID nav-menu,

85
00:06:34.412 --> 00:06:39.948
okay, that's all,
it will give me a collection.

86
00:06:42.803 --> 00:06:46.907
This is a live collection,
getElementsByClassName,

87
00:06:46.907 --> 00:06:52.411
document.getElementsByClassName("importan-
t"); in this case,

88
00:06:52.411 --> 00:06:56.265
it will look for
elements with the important class.

89
00:06:56.265 --> 00:07:01.972
Here comes the weird part mostly
if you are coming from React or

90
00:07:01.972 --> 00:07:08.687
Angular or Vue where we are used to
use the latest version of ECMAScript.

91
00:07:08.687 --> 00:07:12.552
So HTMLCollections, so
the ones that are live,

92
00:07:12.552 --> 00:07:17.644
they don't have all the modern
Array interface, for example,

93
00:07:17.644 --> 00:07:22.190
filter, map, reduce,
forEach, we don't have that.

94
00:07:22.190 --> 00:07:28.190
So we are using getElementsByClassName
you cannot use filter or forEach.

95
00:07:28.190 --> 00:07:33.630
The only one from this list that
let us do that is querySelectorAll.

96
00:07:33.630 --> 00:07:39.504
So if you make a querySelectorAll,
even if you are passing a class name,

97
00:07:39.504 --> 00:07:43.934
so it will be similar to
getElementsByClassName, but

98
00:07:43.934 --> 00:07:50.702
that collection will have filter, map,
reduce, forEach, okay, makes sense?

99
00:07:50.702 --> 00:07:55.691
You can still wrap your live collection,
and have those methods,

100
00:07:55.691 --> 00:07:59.087
if you wrap them in
an array using Array from.

101
00:07:59.087 --> 00:08:05.046
So you pass Array from you pass the
documents getElementsByName collection,

102
00:08:05.046 --> 00:08:09.119
and then you can filter that
is a little hacky, okay?

103
00:08:09.119 --> 00:08:15.071
But if you're used to functional
programming in JavaScript and you'll see

104
00:08:15.071 --> 00:08:21.660
how that works is I'm gonna work with
getElementsByTagName initially, okay?

105
00:08:21.660 --> 00:08:24.898
So you need to wrap it into Array.from,

106
00:08:24.898 --> 00:08:29.864
char actually, for example,
you will filter, make sense?

107
00:08:31.406 --> 00:08:36.247
That's because originally
with the DOM API was created,

108
00:08:36.247 --> 00:08:39.422
we didn't have those array methods.

109
00:08:39.422 --> 00:08:43.872
So no one thought about that initially,
and they don't wanna change that

110
00:08:43.872 --> 00:08:47.480
implementation because we
want backward compatibility.

111
00:08:48.620 --> 00:08:54.173
So they don't change that part, but
the new part of the DOM API is different.

112
00:08:54.173 --> 00:08:59.880
But we can still wrap it and
modernize that API, that makes sense?

113
00:09:01.545 --> 00:09:08.871
Cool, and now that we have reference and
we will see this in action in a minute,

114
00:09:08.871 --> 00:09:13.644
when we have an element,
using getElementsById,

115
00:09:13.644 --> 00:09:18.203
getElementsByClassName or
any of the options.

116
00:09:18.203 --> 00:09:23.985
We can read and change attributes' values,
read and change styles,

117
00:09:23.985 --> 00:09:29.473
we can hook event listeners to that
element, we can add or remove or

118
00:09:29.473 --> 00:09:35.076
move children, read and change content,
and there are more APIs.

119
00:09:35.076 --> 00:09:40.084
In fact, new W3C APIs sometimes
are adding new properties and

120
00:09:40.084 --> 00:09:43.688
new methods or
new events to those elements.

121
00:09:43.688 --> 00:09:49.097
For example, drag and drop,
drag and drop or multi-touch for

122
00:09:49.097 --> 00:09:53.996
working with an iPad, for
example, or the pointer API,

123
00:09:53.996 --> 00:09:58.511
so you can work with an Apple pencil or
a Samsung pen.

124
00:09:58.511 --> 00:10:03.656
Those APIs are new W3C aspects
that are adding new interfaces,

125
00:10:03.656 --> 00:10:09.384
new methods, new event names,
new properties to these DOM elements.

