WEBVTT

1
00:00:00.180 --> 00:00:02.667
But before actually rendering the data,

2
00:00:02.667 --> 00:00:07.900
we need to solve one important part of
the app that has to do with routing.

3
00:00:07.900 --> 00:00:09.879
We're going to create
a single-page application.

4
00:00:09.879 --> 00:00:12.697
I mean, it's not mandatory,
we don't need to.

5
00:00:12.697 --> 00:00:16.641
We can create a multi-page application,
that is,

6
00:00:16.641 --> 00:00:21.657
you have multi HTML files,
different HTML files, the home page,

7
00:00:21.657 --> 00:00:25.530
the order,
each detail has different HTML files.

8
00:00:25.530 --> 00:00:27.850
But we are doing
a client-side application.

9
00:00:27.850 --> 00:00:34.014
We will do a single-page application,
which means we will have just one HTML,

10
00:00:34.014 --> 00:00:40.550
and with JavaScript, we will change
the contents of the page based on the URL.

11
00:00:40.550 --> 00:00:43.370
And we have at least for now two icons.

12
00:00:43.370 --> 00:00:47.600
We have this coffee icon and
we have this cart icon.

13
00:00:47.600 --> 00:00:53.056
They're not just icons, if I inspect them,
they are links, anchors.

14
00:00:53.056 --> 00:00:57.655
So actually, if I click Order,
I wanna go to the Orders section.

15
00:00:57.655 --> 00:01:02.302
And if I click Back in the coffee
when I go to the Home,

16
00:01:02.302 --> 00:01:06.646
to the menu so
we should navigate between pages.

17
00:01:06.646 --> 00:01:11.062
So let's get into that part,
how to do that part And

18
00:01:11.062 --> 00:01:14.060
how to understand how that works.

19
00:01:15.550 --> 00:01:18.792
So I'm going back to the slides for
a second and

20
00:01:18.792 --> 00:01:23.710
we're going to see how to navigate
between pages using the DOM.

21
00:01:23.710 --> 00:01:27.720
So, you understand the idea
we have different sections.

22
00:01:27.720 --> 00:01:29.820
And the idea is that I'm in Section 1.

23
00:01:29.820 --> 00:01:33.020
If I click on section 2,
I wanna change the section.

24
00:01:33.020 --> 00:01:38.362
If I click on section 3, I wanna see
section 3, so simple to understand.

25
00:01:38.362 --> 00:01:41.330
How to do that from a DOM point of view.

26
00:01:42.730 --> 00:01:46.653
One way is that every
time you change the page,

27
00:01:46.653 --> 00:01:53.920
you remove the previous page from the DOM,
and you inject a new page into the DOM.

28
00:01:53.920 --> 00:01:55.140
By the way, what's a page?

29
00:01:56.230 --> 00:01:59.320
It's a concept that we
are creating right now.

30
00:01:59.320 --> 00:02:04.950
It's not really a DOM concept, it's like
the service, it's just a design pattern.

31
00:02:04.950 --> 00:02:06.380
We call it a page.

32
00:02:06.380 --> 00:02:09.256
It can be also a route,

33
00:02:09.256 --> 00:02:14.990
a view. Just put any name,
it's an abstract concept.

34
00:02:14.990 --> 00:02:19.518
In this case, it will be a DOM element
that will render the contents of one

35
00:02:19.518 --> 00:02:21.460
particular section of my app.

36
00:02:23.150 --> 00:02:28.831
So one way is to remove from the DOM
one page and put the other one, okay?

37
00:02:28.831 --> 00:02:33.332
The other option is to
have all the pages in

38
00:02:33.332 --> 00:02:36.892
the DOM that then use hide and show.

39
00:02:36.892 --> 00:02:41.440
I'm not saying that one is better than
the other one, it depends on the case.

40
00:02:42.800 --> 00:02:46.511
So, quick example, so to,
finally understand this,

41
00:02:46.511 --> 00:02:51.910
if you wanna remove the previous page and
inject the new one, it may look like this.

42
00:02:51.910 --> 00:02:55.550
You have first a nav section
that it's always available.

43
00:02:56.700 --> 00:03:01.241
So that section is always available, and
then we have a section element, this case,

44
00:03:01.241 --> 00:03:04.890
Section 1,
because it's the one that we are seeing.

45
00:03:04.890 --> 00:03:10.235
If I click on the nav on Section 2,
I'm removing that section from the DOM and

46
00:03:10.235 --> 00:03:13.810
I'm adding another section element.

47
00:03:13.810 --> 00:03:15.566
So now I'm seeing Section 2.

48
00:03:15.566 --> 00:03:20.118
And of course,
the same if I do this on Section 3.

49
00:03:20.118 --> 00:03:20.935
Make sense?

50
00:03:20.935 --> 00:03:25.050
We remove elements from the DOM,
we put elements back.

51
00:03:25.050 --> 00:03:28.840
They can be a section, a div,
whatever HTML element you want.

52
00:03:30.150 --> 00:03:31.980
That's one technique.

53
00:03:31.980 --> 00:03:35.140
The other technique is to hide and show.

54
00:03:35.140 --> 00:03:39.890
In this case, the three sections
will always be in the DOM.

55
00:03:39.890 --> 00:03:45.237
I will just change visibility, for
example, using the HTML hidden attribute.

56
00:03:46.701 --> 00:03:50.689
So with hidden then you can say,
okay, if I'm in Section 1,

57
00:03:50.689 --> 00:03:55.772
that's the one without hidden, and
the other two are currently not visible.

58
00:03:55.772 --> 00:04:01.481
If I click Section 2, I'm just
changing attributes to show and hide.

59
00:04:03.176 --> 00:04:08.880
Yeah, this version might not be as
scalable if you have a large application.

60
00:04:10.520 --> 00:04:15.050
But again, not every app that we are doing
these days is a large application.

61
00:04:15.050 --> 00:04:21.487
So it's still a possibility that
can be really performant for

62
00:04:21.487 --> 00:04:26.082
some apps, so it depends on the app, okay?

63
00:04:26.082 --> 00:04:32.630
So we need to change the content of
the page based on what the user select.

64
00:04:32.630 --> 00:04:36.360
And typically, these days,
we call this a router.

65
00:04:36.360 --> 00:04:40.993
But that's another concept that
is not in the DOM, it's an idea,

66
00:04:40.993 --> 00:04:45.980
it's an abstract idea router,
a little tool that will make this work.

67
00:04:47.000 --> 00:04:49.070
Do we have a router in the DOM?

68
00:04:49.070 --> 00:04:51.098
No, a router in this case,

69
00:04:51.098 --> 00:04:56.200
it's something that we will
code using the DOM API's okay?

70
00:04:56.200 --> 00:04:58.466
But you will see it's actually
pretty simple, it's not so

71
00:04:58.466 --> 00:05:00.350
complicated these days.

72
00:05:00.350 --> 00:05:06.298
So we have the homepage where we will see
the menu of options for the coffee store.

73
00:05:06.298 --> 00:05:12.129
Then we may get into the details of one
particular product like cappuccino I wanna

74
00:05:12.129 --> 00:05:18.450
get and get the description or the new
cinnamon dolce latte with honey wherever.

75
00:05:18.450 --> 00:05:20.777
Well, we can read the description
calories, and for

76
00:05:20.777 --> 00:05:22.560
that we get into the details.

77
00:05:22.560 --> 00:05:27.376
Then we have the order,
where we will have the current

78
00:05:27.376 --> 00:05:31.670
state of my order with my shopping cart,
okay?

79
00:05:31.670 --> 00:05:36.420
So in our case,
we won't have multiple HTML files.

80
00:05:36.420 --> 00:05:38.216
So, we will use the DOM APIs and

81
00:05:38.216 --> 00:05:42.030
something known as web components
that we haven't covered yet.

82
00:05:43.560 --> 00:05:49.340
And we will use the History API to push
new entries to the navigation history.

83
00:05:49.340 --> 00:05:52.710
And here comes the magic part
that is actually pretty simple.

84
00:05:53.920 --> 00:06:00.220
So as a web developer, sometimes we think
that if we see a URL in the URL bar,

85
00:06:00.220 --> 00:06:07.330
that's because there is, I mean,
the web server has answer to that URL.

86
00:06:07.330 --> 00:06:10.370
Well, today, that's not always the case.

87
00:06:11.390 --> 00:06:17.170
With JavaScript using the History API,
you can fake the URL after the domain.

88
00:06:17.170 --> 00:06:19.235
You cannot fake the domain the host,

89
00:06:19.235 --> 00:06:23.790
you can fake the path wherever it
comes after the first forward slash.

90
00:06:23.790 --> 00:06:24.560
So you can fake it.

91
00:06:25.570 --> 00:06:29.760
And maybe in the server it's 404,
but you can change it.

92
00:06:30.940 --> 00:06:35.750
And not just you can change it,
you can listen for changes.

93
00:06:35.750 --> 00:06:40.526
So if the user is using the Back button,
then you can know that and

94
00:06:40.526 --> 00:06:46.570
know the current URL, even if that
URL does not exist on the server.

95
00:06:46.570 --> 00:06:53.110
So that's the History API, that's how we
build a router that it's really simple.

96
00:06:54.560 --> 00:06:55.940
So this is how it works.

97
00:06:55.940 --> 00:07:02.340
To push a new URL,
we use history.pushState.

98
00:07:02.340 --> 00:07:07.613
We pass an optional state object, that's
an object where we can pass metadata,

99
00:07:07.613 --> 00:07:10.560
you will see how to use that later.

100
00:07:10.560 --> 00:07:15.360
There is a second argument
that today in the spec

101
00:07:15.360 --> 00:07:20.010
is defined as unused, so we don't use it.

102
00:07:20.010 --> 00:07:25.082
So they have to do with the history of
the spec, but actually, that was a title.

103
00:07:25.082 --> 00:07:29.570
The string that was used as a title for
the history menu, blah, blah, blah..

104
00:07:29.570 --> 00:07:34.428
But finally, the spec,
meaning the folks working on the spec

105
00:07:34.428 --> 00:07:39.567
decided not to use that but
they didn't wanna remove that because

106
00:07:39.567 --> 00:07:44.251
of some browsers already
implemented that bla bla bla bla.

107
00:07:44.251 --> 00:07:47.513
Well, anyway we have the second
argument that we won't use or

108
00:07:47.513 --> 00:07:49.595
we can pass anything including null.

109
00:07:49.595 --> 00:07:56.608
And then the URL, the fake URL,
client-side only URL.

110
00:07:56.608 --> 00:08:01.298
And you will see that,
that will trigger a change in the URL.

111
00:08:01.298 --> 00:08:03.795
Is it changing the contents of the page?

112
00:08:03.795 --> 00:08:06.452
No, not at all, change the URL.

113
00:08:06.452 --> 00:08:12.042
It's up to us to capture that change
in the URL and maybe change the DOM.

114
00:08:12.042 --> 00:08:15.700
And that's the idea of building a router.

115
00:08:15.700 --> 00:08:19.911
And for that, here at the bottom,
the second part,

116
00:08:19.911 --> 00:08:24.998
is how you listen for
changes in the URL, it's just popstate.

117
00:08:27.005 --> 00:08:31.584
So, on the window,
every time the URL is changing,

118
00:08:31.584 --> 00:08:35.954
with a big warning that I
will tell you in a minute,

119
00:08:35.954 --> 00:08:39.093
we will get that event being fired.

120
00:08:39.093 --> 00:08:41.299
And we can get what's the current URL.

121
00:08:41.299 --> 00:08:44.141
And based on the current URL,

122
00:08:44.141 --> 00:08:49.265
we can decide which element to show,
hide or inject.

123
00:08:49.265 --> 00:08:50.281
Make sense?

124
00:08:50.281 --> 00:08:54.821
That's the idea, from an API point
of view, it's actually not so

125
00:08:54.821 --> 00:08:56.212
difficult, okay?

126
00:08:56.212 --> 00:09:01.340
Popstate won't be fire if the user
clicks on an external link or

127
00:09:01.340 --> 00:09:05.127
if the user goes and
changes the URL manually.

128
00:09:05.127 --> 00:09:09.380
Because if that happens, the browser
will initiate the new navigation and

129
00:09:09.380 --> 00:09:12.100
it's getting out of our web app.

130
00:09:12.100 --> 00:09:17.051
So this event handler only works when we

131
00:09:17.051 --> 00:09:22.610
are working with
the history in our own app.

132
00:09:22.610 --> 00:09:23.900
Does it make sense?

133
00:09:23.900 --> 00:09:27.943
Because we are still under
the umbrella of a browser, and

134
00:09:27.943 --> 00:09:31.490
the browser works with page navigations,
okay?

135
00:09:31.490 --> 00:09:36.051
So if the user clicks on google.com,
you won't get that history,

136
00:09:36.051 --> 00:09:41.491
because that means you're getting out of
your web app the browser will stop you,

137
00:09:41.491 --> 00:09:44.391
your router won't be able to detect that.

138
00:09:44.391 --> 00:09:49.359
By the way, the same happens on
React router or Angular router,

139
00:09:49.359 --> 00:09:53.599
you can't detect routes that
are outside of your app.

140
00:09:53.599 --> 00:09:57.192
So if you're creating
a single page application,

141
00:09:57.192 --> 00:10:00.040
you should set up your server properly.

142
00:10:01.270 --> 00:10:07.385
That means, that what happens if
the user tries, that fake URL or

143
00:10:07.385 --> 00:10:13.739
press refresh on a URL that is fake,
the server will return 404.

144
00:10:13.739 --> 00:10:16.373
So, typically when you're doing
a single page application,

145
00:10:16.373 --> 00:10:17.624
the same happens with React.

146
00:10:17.624 --> 00:10:21.570
So this is not specifically
a Vanilla.js problem,

147
00:10:21.570 --> 00:10:26.052
you need to set up your server so
every request, every URL,

148
00:10:26.052 --> 00:10:30.281
should forward to the index.html,
not redirect. Forward.

