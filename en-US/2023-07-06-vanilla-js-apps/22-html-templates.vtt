WEBVTT

1
00:00:00.410 --> 00:00:03.240
The other important part
is the template element.

2
00:00:03.240 --> 00:00:07.876
The template element is a fragment
of markup that can be cloned and

3
00:00:07.876 --> 00:00:12.766
inserted into the document at runtime
with the reusable HTML content

4
00:00:12.766 --> 00:00:17.200
that can be rendered and
modified dynamically.

5
00:00:17.200 --> 00:00:19.910
I'm not sure if you understood from there.

6
00:00:19.910 --> 00:00:25.970
But quickly, I'm not sure if you remember
that we have the template elements here.

7
00:00:27.100 --> 00:00:29.410
These are template elements.

8
00:00:29.410 --> 00:00:34.074
What's the template element,
a tag that the browser ignores completely.

9
00:00:34.074 --> 00:00:40.125
It's in the DOM but
it ignores what's inside.

10
00:00:40.125 --> 00:00:43.830
It says, I'm not gonna touch it,
I'm not going to render it.

11
00:00:44.880 --> 00:00:48.390
It's a template for
a JavaScript code that wants it.

12
00:00:50.040 --> 00:00:53.650
Before the template,
we were using some hacks.

13
00:00:53.650 --> 00:00:56.440
I'm not sure if we have seen these before,

14
00:00:56.440 --> 00:01:00.484
like script with a type wherever,
with a language wherever.

15
00:01:01.934 --> 00:01:03.220
Not sure if you have seen this.

16
00:01:04.630 --> 00:01:08.795
So because the browser was saying hey I
don't know that the scripting language

17
00:01:08.795 --> 00:01:11.010
the browser was ignoring that, okay?

18
00:01:11.010 --> 00:01:15.504
And then using the DOM API we
were getting the content and

19
00:01:15.504 --> 00:01:20.191
then using JSON.parse, or
Stringify, or wherever,okay.

20
00:01:20.191 --> 00:01:24.380
Well, we don't need to use those
hacks anymore, we use template.

21
00:01:24.380 --> 00:01:28.939
And then with the DOM API, we get the
contents of that template, we clone them,

22
00:01:28.939 --> 00:01:31.310
we create clones of them, that's it.

23
00:01:31.310 --> 00:01:32.272
Template and

24
00:01:32.272 --> 00:01:37.610
we are creating instances of that
template that we checked in a real DOM.

25
00:01:38.930 --> 00:01:40.090
Okay makes sense.

26
00:01:40.090 --> 00:01:48.820
So it's a way that we have to define the
HTML of a web component in the HTML file.

27
00:01:50.480 --> 00:01:54.828
Okay so similar to what Angular
things what a template is okay

28
00:01:54.828 --> 00:01:57.740
the thing here is that it goes in the DOM.

29
00:01:57.740 --> 00:02:01.105
So now I'm going back to one
of the questions that we

30
00:02:01.105 --> 00:02:03.936
had earlier about the fragment document.

31
00:02:03.936 --> 00:02:10.573
So a document fragment in the DOM, it's
something similar to what template is,

32
00:02:10.573 --> 00:02:14.590
is to create a DOM in memory
that is not a real DOM.

33
00:02:14.590 --> 00:02:17.436
It's like a virtual DOM, so
you can play with that, but

34
00:02:17.436 --> 00:02:20.360
it's not actually affecting the real DOM.

35
00:02:20.360 --> 00:02:25.450
And in that sort of things is
similar to what template is doing.

36
00:02:25.450 --> 00:02:26.850
So the template is pretty simple.

37
00:02:26.850 --> 00:02:27.960
We have already seen that.

38
00:02:27.960 --> 00:02:31.351
Typically, we set an ID
it's not mandatory, but

39
00:02:31.351 --> 00:02:35.570
because we will need to access
it later to clone it, we get it.

40
00:02:35.570 --> 00:02:37.660
And to clone it, typically,

41
00:02:37.660 --> 00:02:42.350
we do that in the connected callback
method of the custom element.

42
00:02:42.350 --> 00:02:46.573
We get the template with
get it getElementById or

43
00:02:46.573 --> 00:02:51.241
querySelectors or somehow,
we call content.cloneNode and

44
00:02:51.241 --> 00:02:56.369
then we append the content
the clone not the template.

45
00:02:57.370 --> 00:03:01.371
Because the template is like read-only and
parsed.

46
00:03:01.371 --> 00:03:06.040
Okay, so we clone it and
then we use it, that's how it works.

47
00:03:07.960 --> 00:03:14.210
By default, the nodes of our custom
elements are part of the same page DOM.

48
00:03:15.360 --> 00:03:20.120
So for example, CSS style declarations
applies to all the documents.

49
00:03:20.120 --> 00:03:20.970
What?

50
00:03:20.970 --> 00:03:22.580
Let me show you something.

51
00:03:22.580 --> 00:03:27.977
Let's say that we grade the template,
and the template has an e style

52
00:03:27.977 --> 00:03:33.390
declaration setting all the H1
as reds, because it has an H1.

53
00:03:34.680 --> 00:03:39.660
But by default, this style declaration
goes to the whole document, so

54
00:03:39.660 --> 00:03:44.972
outside of the template, and it's going
to change all the H1s in the page,

55
00:03:44.972 --> 00:03:47.380
not just the H1 of this template,

