WEBVTT

1
00:00:00.200 --> 00:00:05.819
So far we have then a basic router
working, so I can go here and there.

2
00:00:05.819 --> 00:00:09.151
We still miss one part,
because, if you remember,

3
00:00:09.151 --> 00:00:13.570
we will have three possible routes,
the other one, it's details.

4
00:00:13.570 --> 00:00:17.933
But for details we will have
a URLs that will look like this,

5
00:00:17.933 --> 00:00:21.510
like details and the ID of the product.

6
00:00:21.510 --> 00:00:24.709
And yeah,
case doesn't look like a good idea here.

7
00:00:24.709 --> 00:00:28.275
And I know what you're thinking,
or some of you are thinking,

8
00:00:28.275 --> 00:00:30.647
we can use regular expressions, we can.

9
00:00:30.647 --> 00:00:35.457
But I wanna start with something simpler,
much simpler than that.

10
00:00:35.457 --> 00:00:39.170
Because I'm not sure if all of you
are within regular expressions.

11
00:00:39.170 --> 00:00:44.725
So maybe we can start
with just a default here.

12
00:00:44.725 --> 00:00:52.460
And check with very basic JavaScript
if the route starts with.

13
00:00:52.460 --> 00:00:56.946
And we can say,
I think i will use product, not details,

14
00:00:56.946 --> 00:01:00.979
but anyway, it will work,
product- something.

15
00:01:00.979 --> 00:01:02.464
And in this case,

16
00:01:02.464 --> 00:01:08.316
we are going to create another page
element that will be just details.

17
00:01:08.316 --> 00:01:16.174
But we can't try this yet because we
don't have a link to product- something,

18
00:01:16.174 --> 00:01:21.352
unless we actually go to the URL and
try it manually.

19
00:01:21.352 --> 00:01:28.423
But anyway, I mentioned that there is an
ID there as well, so I should get that ID.

20
00:01:28.423 --> 00:01:31.755
By the way, it can also be forward slash,
doesn't need to be dash,

21
00:01:31.755 --> 00:01:34.162
it's up to you,
it can be forward slash as well.

22
00:01:34.162 --> 00:01:41.710
So you pick the URL pattern you want,
and we need to get the ID.

23
00:01:41.710 --> 00:01:44.280
So how can I get that parameter?

24
00:01:44.280 --> 00:01:47.593
It's an ID, a param ID, how can we get it?

25
00:01:47.593 --> 00:01:50.530
Well, string manipulation.

26
00:01:50.530 --> 00:01:52.850
Again, without regular expressions.

27
00:01:52.850 --> 00:01:57.068
So I can take a substring, And

28
00:01:57.068 --> 00:02:01.935
I will start from the last
index of a forward slash,

29
00:02:01.935 --> 00:02:07.060
or a hyphen,
whatever you use as a separator.

30
00:02:07.060 --> 00:02:12.780
+1, because we don't wanna
take that character.

31
00:02:12.780 --> 00:02:21.420
And then we need to pass that ID
somewhere somehow to the page element.

32
00:02:23.500 --> 00:02:25.872
We are not doing this part yet,

33
00:02:25.872 --> 00:02:30.590
we will in a couple of minutes,
but this is a product ID.

34
00:02:30.590 --> 00:02:32.678
So I mean, you might be thinking, well,

35
00:02:32.678 --> 00:02:35.310
why don't you change
the ID of the element?

36
00:02:35.310 --> 00:02:41.460
I could, but it's kind of weird
that on HTML you will have an ID.

37
00:02:41.460 --> 00:02:45.670
That is the ID of the database,
of the data source.

38
00:02:45.670 --> 00:02:51.068
So instead of doing this,
we should understand that DOM elements,

39
00:02:51.068 --> 00:02:56.560
they have a collection, an object,
that we can set both from HTML and

40
00:02:56.560 --> 00:03:01.695
JavaScript, for
custom properties and custom data.

41
00:03:01.695 --> 00:03:05.105
I'm not sure if you have ever
used that before on HTML.

42
00:03:06.395 --> 00:03:11.674
We are talking about the data attributes,
in JavaScript known as dataset.

43
00:03:11.674 --> 00:03:18.440
Basically every element has a dataset
option, and we can set the ID.

44
00:03:20.010 --> 00:03:24.650
This is not going to be
parsed by the browser,

45
00:03:24.650 --> 00:03:28.203
it's just for custom libraries.

46
00:03:28.203 --> 00:03:34.978
From an HTML point of view, it's like
setting here a data-id, that's the idea.

47
00:03:34.978 --> 00:03:37.984
And if you're coming from some libraries,
probably you are used to that.

48
00:03:37.984 --> 00:03:43.462
Because it's being used on some
libraries for setting up formatting and

49
00:03:43.462 --> 00:03:47.696
other stuff, for templating,
okay, for templates.

50
00:03:47.696 --> 00:03:49.115
So something like that.

51
00:03:52.090 --> 00:03:56.903
But okay, it works, I mean,
I can jump between my two pages.

52
00:03:56.903 --> 00:03:59.600
But what happens if I try the Back button?

53
00:04:00.700 --> 00:04:05.403
If I try the Back button,
the URL changes, but

54
00:04:05.403 --> 00:04:08.666
not the contents, why is that?

55
00:04:08.666 --> 00:04:13.318
And I can go forward, backward,
forward, and you can see, yeah,

56
00:04:13.318 --> 00:04:18.080
the URL changes based on my history,
but not the content.

57
00:04:18.080 --> 00:04:25.360
That's because we are not listening for
the popstate event yet, makes sense?

58
00:04:25.360 --> 00:04:29.823
So we are changing, we are pushing new
elements, but we're not listening for

59
00:04:29.823 --> 00:04:31.160
the URL.

60
00:04:31.160 --> 00:04:36.707
To do that, we will stay in Router.js,
but within init,

61
00:04:36.707 --> 00:04:41.816
we're going to add an event handler for
URL changes.

62
00:04:41.816 --> 00:04:47.903
And that's window.addEventListener for
popstate.

63
00:04:52.563 --> 00:04:57.182
This is going to be fired
every time the URL is changing

64
00:04:57.182 --> 00:05:01.198
based on a user interaction
with the history.

65
00:05:01.198 --> 00:05:05.270
And in this case, I can go to a URL.

66
00:05:05.270 --> 00:05:09.100
The problem is, where is the route?

67
00:05:10.750 --> 00:05:17.730
Some of you may think, well, look at
the host that we have, at the localhost.

68
00:05:19.620 --> 00:05:20.760
Let's do that again.

69
00:05:20.760 --> 00:05:24.450
Let's look at the history path name,
that's one option.

70
00:05:24.450 --> 00:05:29.668
But I'm not sure if you remember that
when we were pushing a new state,

71
00:05:29.668 --> 00:05:33.837
we had this object with a route,
remember this object?

72
00:05:33.837 --> 00:05:37.439
We can read that object here,
that's a place.

73
00:05:37.439 --> 00:05:43.403
The event that we received here
has the state object that we

74
00:05:43.403 --> 00:05:49.010
pushed earlier with all the properties,
make sense?

75
00:05:49.010 --> 00:05:51.650
So I can read that route object as well.

76
00:05:52.690 --> 00:05:54.316
And this is important,

77
00:05:54.316 --> 00:05:58.800
remember that we set up the second
argument with true as default?

78
00:05:58.800 --> 00:06:03.555
If the user is going back,
I don't want to add another history entry,

79
00:06:03.555 --> 00:06:06.020
it doesn't make any sense.

80
00:06:06.020 --> 00:06:12.150
So that's why we are going to use that
false value for that particular argument.

81
00:06:12.150 --> 00:06:14.167
This is the place where we use it.

82
00:06:15.799 --> 00:06:19.370
We just wanna go back, we don't
wanna add more entries in history.

83
00:06:20.500 --> 00:06:26.229
So with this in place,
Now I can go forward and

84
00:06:26.229 --> 00:06:29.867
going backward, and then, let me refresh.

85
00:06:34.043 --> 00:06:38.610
And you can see that it's
also changing the content.

86
00:06:39.750 --> 00:06:43.120
Yeah, I know the content
is still not what we want.

87
00:06:43.120 --> 00:06:48.890
But hey, we have a router
system working with vanilla JS.

88
00:06:48.890 --> 00:06:53.935
I think that from all the fears that
we get from developers on vanilla JS,

89
00:06:53.935 --> 00:06:56.640
routing is one of the biggest fears.

90
00:06:56.640 --> 00:07:00.850
But actually it's not a big deal
to implement your own router,

91
00:07:00.850 --> 00:07:03.200
it's really not complicated.

92
00:07:03.200 --> 00:07:07.160
It's not one of the most
complicated things of vanilla JS.

93
00:07:07.160 --> 00:07:13.158
It was eight years ago, ten years ago,
because that API was not available,

94
00:07:13.158 --> 00:07:16.547
or it was available only on some browsers.

95
00:07:16.547 --> 00:07:21.280
And there were some hacks that you had to
do with the hash and blah, blah, blah.

96
00:07:21.280 --> 00:07:23.140
Well, that's not the case anymore.

97
00:07:23.140 --> 00:07:26.821
This is actually working on Firefox,
Safari,

98
00:07:26.821 --> 00:07:32.446
Chrome in the past 10-15 versions,
so it's actually safe to use.

99
00:07:32.446 --> 00:07:36.850
It's not gonna work on
Internet Explorer 9, no, but yeah,

100
00:07:36.850 --> 00:07:41.440
typically no web app will work,
even YouTube is not working there.

101
00:07:41.440 --> 00:07:45.606
Just, this is completely off topic, but

102
00:07:45.606 --> 00:07:53.231
BlackBerry sent me a couple of tablets
like 10 years ago, 12 years ago.

103
00:07:53.231 --> 00:07:59.280
And I have like five of those tablets,
they have BlackBerry 10 as the OS.

104
00:07:59.280 --> 00:08:03.477
They have a browser,
it's a WebKit browser, HTML5 powered.

105
00:08:03.477 --> 00:08:07.150
But you can't even use YouTube these days,
so it's completely useless.

106
00:08:08.150 --> 00:08:14.972
So anyway, so we don't care about that
BlackBerry tablet, for web apps, at least.

107
00:08:14.972 --> 00:08:18.312
Maybe if it's Wikipedia,
text-based, it's fine, but yeah,

108
00:08:18.312 --> 00:08:21.220
we don't have users on
those devices anymore.

109
00:08:21.220 --> 00:08:26.661
And even if you have a React app, unless
you're adding a lot of polyfills and

110
00:08:26.661 --> 00:08:31.350
other libraries, it's not
compatible with IE anymore as well.

111
00:08:32.650 --> 00:08:39.247
Okay, so with that,
I think that we have the router ready.

112
00:08:39.247 --> 00:08:42.511
As ideas for adding more abstractions,

113
00:08:42.511 --> 00:08:48.372
maybe we can make a router reusable
by receiving a collection of routes.

114
00:08:48.372 --> 00:08:51.804
We can use regular expressions,
but it's not complicated,

115
00:08:51.804 --> 00:08:53.786
that's just programming, okay?

116
00:08:53.786 --> 00:08:56.241
It's not really about the DOM API.

