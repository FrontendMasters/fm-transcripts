WEBVTT

1
00:00:00.000 --> 00:00:03.571
Okay, so I still have one more thing for

2
00:00:03.571 --> 00:00:09.656
you that had to do with
reactivity also with proxies and

3
00:00:09.656 --> 00:00:14.683
because somethings that
sometimes we when we

4
00:00:14.683 --> 00:00:19.862
are doing vanilla JS we
miss from frameworks.

5
00:00:19.862 --> 00:00:23.600
The ability to do binding and
double bindings, okay?

6
00:00:23.600 --> 00:00:26.330
For example, if I have here a form,

7
00:00:26.330 --> 00:00:30.334
when you place an order,
the code to place an order,

8
00:00:30.334 --> 00:00:35.622
typically needs to go element by
element reading the value, right?

9
00:00:35.622 --> 00:00:40.527
So like document get element
by ID name.value document get

10
00:00:40.527 --> 00:00:43.575
element by ID phone.value, right?

11
00:00:43.575 --> 00:00:45.812
it's kind of, right?

12
00:00:45.812 --> 00:00:50.875
And when you have Angular or
React or Vue you

13
00:00:50.875 --> 00:00:56.056
can create like a data model and
assign the data model

14
00:00:56.056 --> 00:01:01.022
somewhere somehow or
have a double data binding.

15
00:01:01.022 --> 00:01:06.409
And can we do something like that in
vanilla JS like when you're typing

16
00:01:06.409 --> 00:01:12.728
something and you change the input that,
can we automatically update an object?

17
00:01:12.728 --> 00:01:17.141
And vice versa, if we change the object,

18
00:01:17.141 --> 00:01:21.942
can we have an automatic
change in the input?

19
00:01:21.942 --> 00:01:26.274
Well, yes, we can, and for that we can use
the same idea of a proxy or we can mix

20
00:01:26.274 --> 00:01:30.493
the proxy with other techniques, and
I'm going to do that with this form.

21
00:01:32.595 --> 00:01:40.090
That's the last chapter that I have here,
that is how we can do binding for forms.

22
00:01:40.090 --> 00:01:47.021
So for this, I'm going to create like a
data model object in our OrderPage.js and

23
00:01:47.021 --> 00:01:53.159
I'm not sure if you will like it because
I know it takes time to like this.

24
00:01:53.159 --> 00:01:58.835
I'm talking about the JavaScript
syntax to define private properties.

25
00:01:58.835 --> 00:02:02.137
So on OrderPage.js, it's a class,

26
00:02:02.137 --> 00:02:06.484
I'm going to do this,
have you used that before?

27
00:02:06.484 --> 00:02:12.469
Before that hash before a property,
that means it's a private property,

28
00:02:12.469 --> 00:02:17.611
so in TypeScript, this is going
to be like private user, okay?

29
00:02:17.611 --> 00:02:21.238
But this is not TypeScript,
this is JavaScript, plain JavaScript,

30
00:02:21.238 --> 00:02:22.164
it's just this.

31
00:02:22.164 --> 00:02:27.312
So then it's a private object data
model where we can actually have,

32
00:02:27.312 --> 00:02:33.436
the source of truth if you want to avoid
duplicating the data in different places,

33
00:02:33.436 --> 00:02:35.231
so we create an object.

34
00:02:35.231 --> 00:02:40.604
And then we wanna try to bind
automatically that object with the form

35
00:02:40.604 --> 00:02:46.918
in both ways, so if I change the object,
I want the form to receive the change and

36
00:02:46.918 --> 00:02:51.086
if I change the form I want
the object to get the data.

37
00:02:51.086 --> 00:02:56.187
So we are going to create a new
function here a new method on

38
00:02:56.187 --> 00:03:01.629
the OrderPage let me do that at the bottom
setFormBindings, okay?

39
00:03:01.629 --> 00:03:06.888
That receives a form and
it will try to do bindings, okay?

40
00:03:06.888 --> 00:03:14.165
Over that form, so we're going to set
what is known as a double binding, okay?

41
00:03:14.165 --> 00:03:16.530
Double data binding.

42
00:03:16.530 --> 00:03:21.790
So, how to do that, for example,
let's try to think about the proxy,

43
00:03:21.790 --> 00:03:28.035
so for example, I can take this.#user and
this is how it looks like this.#user.

44
00:03:28.035 --> 00:03:31.961
So I will take that #user and
I will say, you know what?

45
00:03:31.961 --> 00:03:37.492
I'm going to create a new Proxy from you,
and even here,

46
00:03:37.492 --> 00:03:43.033
replacing the original
property with a wrapper, okay?

47
00:03:43.033 --> 00:03:47.229
Of yourself, and
then we have the handler, remember,

48
00:03:47.229 --> 00:03:51.264
and the handler has traps,
so I'm going to trap set.

49
00:03:51.264 --> 00:03:54.758
Set receives a target a property and
a value and

50
00:03:54.758 --> 00:03:58.969
we're going to say here for
first because it's a set and

51
00:03:58.969 --> 00:04:03.460
we don't wanna validate it's
always the same thing here.

52
00:04:03.460 --> 00:04:07.591
We actually make the assignment, okay?

53
00:04:07.591 --> 00:04:08.643
Yeah, you wanna set the value?

54
00:04:08.643 --> 00:04:12.443
Yeah, let's set the value first,
and after that, I can, for example,

55
00:04:12.443 --> 00:04:13.808
say something like this.

56
00:04:13.808 --> 00:04:20.240
Let's take the form, the form is
something that we receive as an argument,

57
00:04:20.240 --> 00:04:24.974
and the DOM API has a way
to access us as a collection.

58
00:04:24.974 --> 00:04:31.748
All the elements of the form,
although not every HTML element,

59
00:04:31.748 --> 00:04:36.766
only the elements that are for
the form inputs,

60
00:04:36.766 --> 00:04:40.781
text areas selects, so in this case,

61
00:04:40.781 --> 00:04:45.941
I can say form elements form.elements,
okay?

62
00:04:45.941 --> 00:04:50.021
And elements, it's not just an array,

63
00:04:50.021 --> 00:04:55.901
it's also an object, so,
let me show you this in action,

64
00:04:55.901 --> 00:05:02.261
but also this will lead to some
special issues that we may have,

65
00:05:02.261 --> 00:05:07.070
so what if we want to get
the form in the console?

66
00:05:11.544 --> 00:05:17.656
How to do that, can we do document
querySelector and give me the form?

67
00:05:17.656 --> 00:05:21.716
It's null, why?

68
00:05:21.716 --> 00:05:24.765
Maybe you say,
maybe you forgot the form tag, well,

69
00:05:24.765 --> 00:05:27.767
let's say input we can see
the input on the screen, why?

70
00:05:27.767 --> 00:05:31.211
It's null, does anyone know?

71
00:05:31.211 --> 00:05:32.124
&gt;&gt; It's a shadow document.

72
00:05:32.124 --> 00:05:36.817
&gt;&gt; It's a shadow DOM, so
it's in the shadow DOM and

73
00:05:36.817 --> 00:05:42.099
here in the console we are at the top,
can you see that?

74
00:05:42.099 --> 00:05:46.626
So that's a problem that we have, so,

75
00:05:46.626 --> 00:05:51.014
we need to dig into, from the window,

76
00:05:51.014 --> 00:05:56.793
need to dig into the form
to try to get that, okay?

77
00:05:56.793 --> 00:06:00.768
If you inspect this, and
you get into the form here, okay?

78
00:06:00.768 --> 00:06:03.287
So the form is there, okay?

79
00:06:03.287 --> 00:06:08.427
So you say "hey,
we can store it as a global variable",

80
00:06:08.427 --> 00:06:14.985
and use these tricks here, and then,
yeah, we have temp 1 now, okay?

81
00:06:14.985 --> 00:06:20.680
Then temp 1 is a form,
that's one-way to get rid of that DOM,

82
00:06:20.680 --> 00:06:25.090
and I can show you from
here that I have elements.

83
00:06:25.090 --> 00:06:30.303
And elements,
it's a form control collection,

84
00:06:30.303 --> 00:06:35.017
and elements can also work with .syntax,
so

85
00:06:35.017 --> 00:06:39.373
.email, .name .phone, that's it.

86
00:06:39.373 --> 00:06:41.913
That's a very old DOM API by the way,

87
00:06:41.913 --> 00:06:46.998
that will let you jump through all these
elements and they're using their name,

88
00:06:46.998 --> 00:06:51.285
the name property as the name of
the property in JavaScript, okay?

89
00:06:51.285 --> 00:06:52.380
Makes sense?

90
00:06:52.380 --> 00:06:56.098
So I can get the phone like this,
and that's the input,

91
00:06:56.098 --> 00:07:00.767
and if I want the value, it's value,
so if I have a phone number here,

92
00:07:00.767 --> 00:07:03.872
I can say the form.element.phone.value.

93
00:07:03.872 --> 00:07:10.767
And I'm not sure if you know this, but in
JavaScript, instead of using the .syntax,

94
00:07:10.767 --> 00:07:17.107
you can also use the square bracket syntax
but with strings, did you know that?

95
00:07:17.107 --> 00:07:22.694
So based on that idea we can
make this auto binding solution,

96
00:07:22.694 --> 00:07:25.543
now going back to our code, and

97
00:07:25.543 --> 00:07:30.382
use form.elements subproperty.value=value.

98
00:07:30.382 --> 00:07:34.270
So we are not just setting
the value of my user,

99
00:07:34.270 --> 00:07:38.758
private property, but
also the value of the form, so

100
00:07:38.758 --> 00:07:45.070
every time you change the.#user,
we are also changing the form, okay?

101
00:07:45.070 --> 00:07:46.979
Does it make sense?

102
00:07:46.979 --> 00:07:52.864
So that's one-way,
we want two-way binding, that's one-way,

103
00:07:52.864 --> 00:07:59.542
how we make the other way, well, in this
case, we are going to talk to the form,

104
00:07:59.542 --> 00:08:03.957
and we're going to talk to
the elements of the form.

105
00:08:03.957 --> 00:08:09.828
And for each one, we're going to listen
for the change event, does it make sense?

106
00:08:09.828 --> 00:08:15.717
The problem is that this is
an array collection of which type?

107
00:08:15.717 --> 00:08:20.374
It was temp1.elements, an HTML
form controls collection it

108
00:08:20.374 --> 00:08:23.488
doesn't contain for example forEach.

109
00:08:25.634 --> 00:08:30.583
So we can do a normal for expression or

110
00:08:30.583 --> 00:08:34.575
we can wrap this in an array and

111
00:08:34.575 --> 00:08:39.857
then we can do for each up to you, okay?

112
00:08:39.857 --> 00:08:41.910
And then we say forEach element,

113
00:08:41.910 --> 00:08:46.836
forEach form element we are going to add
an event listener for the change event.

114
00:08:49.473 --> 00:08:50.564
Okay?

115
00:08:50.564 --> 00:08:54.956
And here, we're going to take our user and

116
00:08:54.956 --> 00:09:00.446
change the property for
element name, the value, so

117
00:09:00.446 --> 00:09:05.814
this is the two-way binding
if you change the form,

118
00:09:05.814 --> 00:09:08.996
we are changing the.#user.

119
00:09:08.996 --> 00:09:11.128
If you change the.#user,
you're changing the form.

120
00:09:11.128 --> 00:09:16.468
Some of you may be thinking, but
we have an infinite loop problem here,

121
00:09:16.468 --> 00:09:21.185
because if we change the.#user,
we are changing the form and

122
00:09:21.185 --> 00:09:25.289
then the form changing the.#user and
then the form.

123
00:09:25.289 --> 00:09:30.454
But that's not true,
because when you're changing form.elements

124
00:09:30.454 --> 00:09:34.655
from JavaScript, so
in this case, this code line 73,

125
00:09:34.655 --> 00:09:38.784
that's not triggering
a change event automatically.

126
00:09:38.784 --> 00:09:43.033
The change event in the DOM,
is triggered automatically and

127
00:09:43.033 --> 00:09:47.106
by default only if the user is
changing that in the UI, so

128
00:09:47.106 --> 00:09:53.460
when you are changing form.element from
JavaScript, you won't have that problem.

129
00:09:53.460 --> 00:09:54.748
Does it make sense?

130
00:09:54.748 --> 00:10:00.830
I'm not sure if it makes sense, but I
didn't write them that implementation W3C,

131
00:10:00.830 --> 00:10:07.015
so that's why we don't have that infinite
loop issue here, that kind of handshake.

132
00:10:07.015 --> 00:10:10.051
Okay, so why are we doing this?

133
00:10:10.051 --> 00:10:15.135
Well, first,
we should call setFormBindings somewhere,

134
00:10:15.135 --> 00:10:20.119
and we can call this here on render,
when we are rendering,

135
00:10:20.119 --> 00:10:25.119
or when we are constructing the form,
it doesn't matter.

136
00:10:25.119 --> 00:10:30.292
So we are going to call setFormBindings,
and we need to pass the form.

137
00:10:30.292 --> 00:10:35.308
Please remember,
don't use querySelector form we

138
00:10:35.308 --> 00:10:40.894
know it's not going to work
because we are in a shadow DOM so

139
00:10:40.894 --> 00:10:47.281
document is not what you want we
want this.root is the shadow DOM.

140
00:10:49.780 --> 00:10:51.962
Okay, makes sense?

141
00:10:51.962 --> 00:10:53.235
That's the Shadow DOM.

142
00:10:55.981 --> 00:10:56.937
Does it make sense?

143
00:10:59.883 --> 00:11:01.747
So how do we know if this is working?

144
00:11:01.747 --> 00:11:07.577
Every time we work with shadow DOM's
knowing if something is working or not,

145
00:11:07.577 --> 00:11:14.053
takes more time, because it's not easy to
inspect that okay, so how do we test this?

146
00:11:14.053 --> 00:11:17.075
First, we have a problem,
the problem that we have is that

147
00:11:17.075 --> 00:11:20.793
we are calling setFormBindings at
the beginning of the render method.

148
00:11:20.793 --> 00:11:25.620
And at that point we didn't load the
template yet, so we don't have the form,

149
00:11:25.620 --> 00:11:29.072
so the form is actually null
because it doesn't exist.

150
00:11:29.072 --> 00:11:32.682
So I need to move this
at the end of render.

151
00:11:32.682 --> 00:11:36.489
So to use this,
because we are using a private field,

152
00:11:36.489 --> 00:11:42.171
the.#user it's difficult to actually
debug or see that within the console.

153
00:11:42.171 --> 00:11:46.843
Because it's actually encapsulated
within a web component that is a shadow

154
00:11:46.843 --> 00:11:51.665
DOM component, so it's actually really
complicated to get into that value.

155
00:11:51.665 --> 00:11:57.550
So let's go and
use it directly within setFormBindings,

156
00:11:57.550 --> 00:12:04.764
we can also listen for an event for
when you click send the order, okay?

157
00:12:04.764 --> 00:12:10.999
So when you are here and you have a form,
we know that we have a place order button,

158
00:12:10.999 --> 00:12:17.163
so maybe you're thinking, well,
let's listen for the click of that button.

159
00:12:17.163 --> 00:12:24.143
But that's not how we want to do this
in HTML and vanilla JavaScript, why?

160
00:12:24.143 --> 00:12:29.603
For several reasons first if you're
on a mobile device typically you

161
00:12:29.603 --> 00:12:36.298
have a beautiful keyboard on the beautiful
keyboard, you have a go button or send.

162
00:12:36.298 --> 00:12:41.127
And if you click that the user expects
the form to be submitted the same if

163
00:12:41.127 --> 00:12:45.410
you press the Return or
Enter key in your keyboard on desktop.

164
00:12:45.410 --> 00:12:49.365
So instead of listening for
the click event of the button,

165
00:12:49.365 --> 00:12:53.010
we may want to listen for
the submit event of the form.

166
00:12:53.010 --> 00:12:58.045
There is going to be trigger,
if the submit button is clicked,

167
00:12:58.045 --> 00:13:02.605
or if you wanna submit the form
from a different way such as

168
00:13:02.605 --> 00:13:06.889
the virtual keyboard on the iPhone or
on the Android.

169
00:13:06.889 --> 00:13:11.411
So we're going to do something
where we submit, first,

170
00:13:11.411 --> 00:13:16.405
what we want is to stop the browser
to submit the form using GET or

171
00:13:16.405 --> 00:13:21.046
POST to the server,
that's the standard form behavior.

172
00:13:21.046 --> 00:13:24.838
And for that,
we have already used this before,

173
00:13:24.838 --> 00:13:29.373
we will call prevent default
event.preventDefault, so

174
00:13:29.373 --> 00:13:34.366
we won't want the the browser to
submit the form to the server and

175
00:13:34.366 --> 00:13:36.883
change our navigation, okay?

176
00:13:36.883 --> 00:13:41.881
Then we can make an alert or
in the future you can make a nicer

177
00:13:41.881 --> 00:13:46.679
UI using alert for
designs it's not a good idea, yeah?

178
00:13:46.679 --> 00:13:50.940
But yeah, I'm the trainer here and
I have the power to use alert, but

179
00:13:50.940 --> 00:13:54.614
have in mind that's not a good idea,
so I'm going to say for

180
00:13:54.614 --> 00:13:58.825
example, Thanks for your order,
and I wanna use the user's name.

181
00:13:58.825 --> 00:14:03.250
Should I go to the DOM and
listen for the input value?

182
00:14:03.250 --> 00:14:08.363
Now we did a double binding to our #user,

183
00:14:08.363 --> 00:14:13.331
so if this is working, I should be able to

184
00:14:13.331 --> 00:14:18.170
just say this.#user.name, okay?

185
00:14:18.170 --> 00:14:19.027
Something like that.

186
00:14:19.027 --> 00:14:24.806
And of course I can also say that, you
will receive your receipt at your email.

187
00:14:24.806 --> 00:14:26.661
So after doing that.

188
00:14:29.686 --> 00:14:32.724
We should clear the form, right?

189
00:14:32.724 --> 00:14:37.697
So we delete the.#user, the name,
so it's not, we clear the form.

190
00:14:37.697 --> 00:14:40.518
So, what if we just clear the user?

191
00:14:43.763 --> 00:14:45.438
Like the properties one by one.

192
00:14:48.807 --> 00:14:56.207
If the double binding works, it should
clear the form, does it make sense?

193
00:14:56.207 --> 00:15:01.144
So this is a quick way to check if
the double binding is working or

194
00:15:01.144 --> 00:15:05.073
not, and
here we have left to send the data to the server.

195
00:15:09.017 --> 00:15:11.096
Okay, make sense?

196
00:15:11.096 --> 00:15:12.860
So let's try this.

197
00:15:15.117 --> 00:15:19.153
I'm going to add some items to the cart,

198
00:15:19.153 --> 00:15:25.090
I'm getting here,
I'm going to type Max my phone number,

199
00:15:25.090 --> 00:15:29.271
my email, I'm going to place the order.

200
00:15:29.271 --> 00:15:34.992
Thanks for your order Max,
so that work, OK,

201
00:15:34.992 --> 00:15:40.001
the form is clear but just one part.

202
00:15:41.775 --> 00:15:48.618
And let's see what we have here,
the problem that we have in the proxy,

203
00:15:48.618 --> 00:15:53.522
if you look here,
it says trap returned falsish for

204
00:15:53.522 --> 00:15:59.253
the property phone or email,
so what's the problem here?

205
00:15:59.253 --> 00:16:05.175
It has to do with the proxy, remember I
mentioned this every time you call set,

206
00:16:05.175 --> 00:16:07.710
you need to return true or false.

207
00:16:07.710 --> 00:16:11.374
And if you don't return anything,
it's falsish by default,

208
00:16:11.374 --> 00:16:15.745
not false falsish, which means yeah,
you didn't tell us what happened?

209
00:16:15.745 --> 00:16:21.328
So that was the problem,
so try one more time.

210
00:16:28.557 --> 00:16:34.378
So Max, phone number,
email, place order OK,

211
00:16:34.378 --> 00:16:38.815
and now everything is cleared out, so

212
00:16:38.815 --> 00:16:45.073
this is the proof that our
double binding is working.

213
00:16:45.073 --> 00:16:49.219
Again, you may see that we have,
I don't know, 15 lines for

214
00:16:49.219 --> 00:16:52.740
the double binding, and
you may be thinking, well,

215
00:16:52.740 --> 00:16:57.372
that's easiest on whatever framework,
I'm not sure that's true.

216
00:16:57.372 --> 00:17:02.022
But anyway you can add abstraction
layers on top of that you can

217
00:17:02.022 --> 00:17:06.942
create a function you can create
a mini-library to make this even

218
00:17:06.942 --> 00:17:11.961
easier to make that double binding
between HTML and data objects.

219
00:17:11.961 --> 00:17:16.764
Using proxy for
data to HTML and using events,

220
00:17:16.764 --> 00:17:21.691
or even there are other
events like observers,

221
00:17:21.691 --> 00:17:26.003
APIs that we have available today to check

222
00:17:26.003 --> 00:17:30.822
changes in the HTML and
update the data model.

223
00:17:30.822 --> 00:17:36.997
So we still have one bug in our project,
so when we're getting into details or

224
00:17:36.997 --> 00:17:43.649
event cart, and we're going back to the
home, we don't see data, so why is that?

225
00:17:43.649 --> 00:17:48.554
If we go to MenuPage.js,
we're calling render only

226
00:17:48.554 --> 00:17:53.248
when the menu is changed,
So what's the problem?

227
00:17:53.248 --> 00:17:56.652
We loaded the menu once
when the page loaded for

228
00:17:56.652 --> 00:18:02.696
the first time when the on DOM content
loaded, so yeah, it worked the first time.

229
00:18:02.696 --> 00:18:07.553
But then the problem that we have is that
when we are disconnecting that page and

230
00:18:07.553 --> 00:18:12.117
connecting another instance of that page,
the data is already there, so

231
00:18:12.117 --> 00:18:13.461
it's not changing.

232
00:18:13.461 --> 00:18:18.679
So what I need is to just call
render the first time Without I mean

233
00:18:18.679 --> 00:18:23.907
on connectedCallback,
without waiting for another change.

234
00:18:23.907 --> 00:18:27.417
So every time you are connecting
this web component,

235
00:18:27.417 --> 00:18:32.255
I wanna render the data, not matter
is the data is changing or not, okay?

236
00:18:32.255 --> 00:18:34.872
What happens the first
time of this render?

237
00:18:34.872 --> 00:18:40.465
The menu will be null, so it will
render loading properly, it's going to

238
00:18:40.465 --> 00:18:46.888
be really faster we won't see it unless I
stopped the server or something like that.

239
00:18:46.888 --> 00:18:52.817
But now, I can go to the details,
I can go back to home and it works and

240
00:18:52.817 --> 00:18:58.331
go here, now we have full
navigation between the three pages,

241
00:18:58.331 --> 00:19:02.724
by the way,
I can also add items from the details.

242
00:19:02.724 --> 00:19:08.585
And here we are also going to the cart,
I can delete elements and

243
00:19:08.585 --> 00:19:15.452
our app is ready, our vanilla app is
ready, and it should be really fast.

244
00:19:15.452 --> 00:19:20.716
Because you've seen all the JavaScript
codes that we have written, it's more

245
00:19:20.716 --> 00:19:26.625
verbose than some frameworks, it depends
on the framework, actually, to be honest.

246
00:19:26.625 --> 00:19:29.951
But in terms of the code
that you are shipping,

247
00:19:29.951 --> 00:19:34.130
no in the code that you're writing,
yes, probably, and

248
00:19:34.130 --> 00:19:39.270
that's why I was mentioning that you
can add more abstraction layers.

249
00:19:39.270 --> 00:19:44.561
On top of this, to make things easier for
you when you understand what's going on.

