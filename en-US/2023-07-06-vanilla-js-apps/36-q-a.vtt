WEBVTT

1
00:00:00.210 --> 00:00:01.900
This is about the router.

2
00:00:01.900 --> 00:00:07.541
Yeah, right now in our, well,
at least maybe I messed up something but

3
00:00:07.541 --> 00:00:10.832
if I go into like
the actual URL section and

4
00:00:10.832 --> 00:00:15.370
do slash order I get
this route doesn't exist.

5
00:00:15.370 --> 00:00:18.506
The only way to solve that really
is at the serve side of it right,

6
00:00:18.506 --> 00:00:21.260
to update that it's not
&gt;&gt; So the problem is that,

7
00:00:21.260 --> 00:00:24.500
if I try it's not shorter for
you is not working.

8
00:00:24.500 --> 00:00:29.285
Why, the difference between your code and
my code is not the code,

9
00:00:29.285 --> 00:00:32.283
it's the web server that you're using.

10
00:00:32.283 --> 00:00:34.170
In fact, let me show you another.

11
00:00:34.170 --> 00:00:38.899
I'm using the web server that is here
in VS Code, let me try another one.

12
00:00:38.899 --> 00:00:42.588
I'm going to stop that web server and

13
00:00:42.588 --> 00:00:48.303
let me show you another web server for
example npx serve.

14
00:00:48.303 --> 00:00:52.468
This is a different server that has
a different default configuration,

15
00:00:52.468 --> 00:00:54.318
now it's localhost 3000.

16
00:00:54.318 --> 00:00:57.810
So if I try this,
let me open the same browser.

17
00:00:59.760 --> 00:01:05.380
So if I try this here, I mean it
works the same, works pretty well.

18
00:01:05.380 --> 00:01:10.265
But if I try, order and
refresh, I'm getting a 404.

19
00:01:10.265 --> 00:01:15.799
That's because this web server is
set up differently by default.

20
00:01:15.799 --> 00:01:19.215
So that's why when you are using
single page application or

21
00:01:19.215 --> 00:01:23.980
you are changing the router, you have
to set up your server for forwarding.

22
00:01:23.980 --> 00:01:26.980
The same happens if you're using React.

23
00:01:26.980 --> 00:01:30.845
I mean, they're React development
server works fine, but

24
00:01:30.845 --> 00:01:35.769
if you publish that the output folder
in an Apache you won't get that result,

25
00:01:35.769 --> 00:01:37.693
you will get the same 404.

26
00:01:37.693 --> 00:01:41.844
And for that you have to set
up your server that's how.

27
00:01:41.844 --> 00:01:45.768
In terms of client side,
if you wanna provide your own custom 404,

28
00:01:45.768 --> 00:01:47.880
it's just a default.

29
00:01:47.880 --> 00:01:50.250
So if you don't have a page element,

30
00:01:50.250 --> 00:01:53.830
defined by the router
is because it's a 404.

31
00:01:53.830 --> 00:01:55.680
So what do you wanna do here?

32
00:01:55.680 --> 00:02:02.876
Well, maybe you wanna do something similar
to this, or instead of append child.

33
00:02:02.876 --> 00:02:08.932
By the way, cache is actually here,
so I'm not gonna use cache.

34
00:02:08.932 --> 00:02:16.228
You can just do something like this,
inner HTML, oops, 404.

35
00:02:16.228 --> 00:02:20.936
Or you can create your
own elements such that so

36
00:02:20.936 --> 00:02:26.502
now this will work only with
broken client side links.

37
00:02:26.502 --> 00:02:31.771
Let's try this,
from JavaScript for example,

38
00:02:31.771 --> 00:02:37.296
from the console,
I will say, main, I'm sorry,

39
00:02:37.296 --> 00:02:44.129
I will say app.router.go to
somewhere that doesn't exist.

40
00:02:44.129 --> 00:02:48.926
So we get our own 404, client-size 404.

41
00:02:51.298 --> 00:02:59.239
.And then you can create another component
that will render 404 or wherever you want.

42
00:02:59.239 --> 00:03:02.788
Remember, that's like a fake URL.

43
00:03:02.788 --> 00:03:07.474
So if I refresh, it will make a new
page navigation to the server and

44
00:03:07.474 --> 00:03:10.670
that the server is the one returning 404.

45
00:03:10.670 --> 00:03:15.678
Some development servers by default
they forward you to the indexation,

46
00:03:15.678 --> 00:03:17.867
instead of giving you a 404.

47
00:03:17.867 --> 00:03:21.999
And remember when I'm saying forwarding,
I'm not saying redirecting, now,

48
00:03:21.999 --> 00:03:24.991
I'm not saying responding
with an HTTP 301 or 302.

49
00:03:24.991 --> 00:03:28.444
It would get something better than 404,
but

50
00:03:28.444 --> 00:03:31.995
you will go to the home,
you won't see the code.

51
00:03:31.995 --> 00:03:36.487
If you wanna refresh and still seeing
the code, then you need the forward.

52
00:03:36.487 --> 00:03:40.819
Forward means that the server will
just return the same index HTML on

53
00:03:40.819 --> 00:03:44.090
every URL that is not an email or
just another file.

54
00:03:45.840 --> 00:03:51.300
&gt;&gt; So how do you make the decision
about when to use vanillaJas and

55
00:03:51.300 --> 00:03:57.711
when to use library is a list of questions
to help you decide which to use.

56
00:03:57.711 --> 00:04:01.589
&gt;&gt; I think that the answer
to that it's similar to

57
00:04:01.589 --> 00:04:06.561
how to measure the time that he
will take the whole project or

58
00:04:06.561 --> 00:04:11.890
how to estimate the time or
even the price of a project.

59
00:04:11.890 --> 00:04:16.273
You will know the answer with
your experience, I mean,

60
00:04:16.273 --> 00:04:21.495
your experience will actually
growing up like if you are ChatGPT,

61
00:04:21.495 --> 00:04:24.960
okay, you will learn the answer with time.

62
00:04:24.960 --> 00:04:29.393
I'm not sure how we cease to
the final list of five questions

63
00:04:29.393 --> 00:04:34.660
that based on those answers,
you will know which one is better.

64
00:04:34.660 --> 00:04:39.616
So we can try to define questions that
will give you the right answer or

65
00:04:39.616 --> 00:04:43.472
based on the answers you
will give the final results.

66
00:04:43.472 --> 00:04:46.758
But at one point,
you will need to get experience, so

67
00:04:46.758 --> 00:04:50.775
you will need to make a lot of
mistakes using the wrong framework to

68
00:04:50.775 --> 00:04:54.260
understand why that was
the wrong decision.

69
00:04:54.260 --> 00:04:59.700
And this is like on everything
that we have on IT or

70
00:04:59.700 --> 00:05:04.476
even not on IT also,
I know Linux versus Mac

71
00:05:04.476 --> 00:05:09.260
versus window, things like that.

72
00:05:09.260 --> 00:05:13.656
Sometimes you need to try everything

73
00:05:13.656 --> 00:05:19.580
to understand what's best and what not.

74
00:05:19.580 --> 00:05:26.590
Because sometimes you get a lot of
recommendations from a lot of people.

75
00:05:26.590 --> 00:05:30.866
If you wanna start coding these days and
you ask people how to do that,

76
00:05:30.866 --> 00:05:34.109
you will receive a lot of
answers that they say, no,

77
00:05:34.109 --> 00:05:38.428
you have to read the book now forget
about books you need to do online.

78
00:05:38.428 --> 00:05:42.540
Now forget about online Worship or
Signature Boot Camp.

79
00:05:42.540 --> 00:05:47.511
Now forget about Boot Camps and you don't
know you need to find what's good for

80
00:05:47.511 --> 00:05:52.500
you probably not follow what other people
thinks because they are different.

81
00:05:52.500 --> 00:05:55.043
So you will find people saying no,
you must use React.

82
00:05:55.043 --> 00:05:58.460
Other people will say no, never React.

83
00:05:58.460 --> 00:06:03.770
And you shouldn't base your decisions
on other people's decision.

84
00:06:03.770 --> 00:06:10.370
So I think that it's good to maybe
do a worship on every framework.

85
00:06:10.370 --> 00:06:14.641
Thanks Ben, one day, on Frontend Masters
doing one worship and everything we're and

86
00:06:14.641 --> 00:06:18.470
then you can get the experience and
understand what's better.

87
00:06:18.470 --> 00:06:24.791
And you will have better
experience to actually decide,

88
00:06:24.791 --> 00:06:31.913
okay, now it's better and
of course, you will make mistakes.

89
00:06:31.913 --> 00:06:34.761
And that's okay,
it happens to every company.

90
00:06:34.761 --> 00:06:39.380
You will see lot of companies,
big companies say, no, we go full React.

91
00:06:39.380 --> 00:06:42.976
Two years later,
we are replacing this will, I don't know,

92
00:06:42.976 --> 00:06:47.370
whatever, and now we are replacing this,
and now we're doing Next.js.

93
00:06:47.370 --> 00:06:50.310
And now we're replacing this and
we're doing Quick.

94
00:06:50.310 --> 00:06:53.200
And now we are going back to HTML,
no JavaScript.

95
00:06:54.360 --> 00:06:58.490
So it happens because at one point,
no matter what you're doing,

96
00:06:58.490 --> 00:07:02.250
which tools are you using,
it will become a mess.

97
00:07:02.250 --> 00:07:03.744
So no matter what.

98
00:07:03.744 --> 00:07:10.642
So unless, or not unless, let's say at
least when you're doing Vanilla JS,

99
00:07:10.642 --> 00:07:16.510
the good part is that you're making
a high performance solution.

100
00:07:16.510 --> 00:07:20.075
So even if you made mistakes,
it's high performance, so

101
00:07:20.075 --> 00:07:22.200
your users will get a be a benefit.

102
00:07:22.200 --> 00:07:28.430
And at the end, performance is not
about us, it's about the user and

103
00:07:28.430 --> 00:07:33.490
even forget about the user,
it's about the business.

104
00:07:33.490 --> 00:07:38.289
Because if the user perceives
a better performance it has been

105
00:07:38.289 --> 00:07:41.794
proved that you will get more money,
I mean,

106
00:07:41.794 --> 00:07:47.904
your company will get more money wherever
your company is doing okay and yeah.

107
00:07:47.904 --> 00:07:52.060
&gt;&gt; Just a couple of resources
to note to check out.

108
00:07:52.060 --> 00:07:56.649
We have Lydia Haley's tour of
JavaScript pattern and React patterns.

109
00:07:56.649 --> 00:07:59.730
Of course, that covers a number of
different patterns people can use.

110
00:07:59.730 --> 00:08:06.006
And then also Mark Grabansky, CEO of
Frontend Masters, his GitHub repo has

111
00:08:06.006 --> 00:08:11.320
a Very popular to do MVC app that
is built in vanilla JavaScript.

112
00:08:13.310 --> 00:08:15.450
&gt;&gt; And
there is also a live version of that one.

113
00:08:15.450 --> 00:08:19.279
&gt;&gt; Yeah,
obviously take a look at our JavaScript

114
00:08:19.279 --> 00:08:22.270
learning
&gt;&gt; The whole JavaScript learning

115
00:08:22.270 --> 00:08:23.420
path in that way.

116
00:08:23.420 --> 00:08:26.720
You can spend a week a month,
how much time do you need?

117
00:08:27.930 --> 00:08:29.582
Yeah, there's a lot of courses there.

118
00:08:29.582 --> 00:08:30.379
&gt;&gt; There are a lot of courses there.

119
00:08:30.379 --> 00:08:31.758
Everything is a new tool.

