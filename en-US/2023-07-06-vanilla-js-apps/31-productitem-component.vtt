WEBVTT

1
00:00:00.730 --> 00:00:06.791
So I need to create then
product item within components,

2
00:00:06.791 --> 00:00:11.120
I'm going to create ProductItem.js.

3
00:00:11.120 --> 00:00:16.723
And this is one of the part where
I don't need to type it manually

4
00:00:16.723 --> 00:00:22.328
because it's a lot of things that
we have already seen before,

5
00:00:22.328 --> 00:00:26.981
so I will just jump into
the course documentation and

6
00:00:26.981 --> 00:00:29.867
copy and paste this one, okay?

7
00:00:29.867 --> 00:00:34.449
In this case,
we are in chapter 5, lesson 3,

8
00:00:34.449 --> 00:00:40.752
it's the product item,
items component and we have one ready for

9
00:00:40.752 --> 00:00:45.579
copy and paste and
we can analyze the code anyway.

10
00:00:45.579 --> 00:00:51.358
So, we have it's an HTMLElement,
so it's a custom element and

11
00:00:51.358 --> 00:00:58.004
we are registering that at the bottom,
which we know what that's doing.

12
00:00:58.004 --> 00:01:00.990
Constructor is actually
doing nothing at this point.

13
00:01:00.990 --> 00:01:05.063
I'm not creating a Shadow DOM, okay?

14
00:01:05.063 --> 00:01:09.080
Then on connected call back
I'm getting the template,

15
00:01:09.080 --> 00:01:14.297
cloning the template, appending
the template, we know how to do that.

16
00:01:14.297 --> 00:01:19.266
Then I'm parsing the JSON that
we set in the dataset, so

17
00:01:19.266 --> 00:01:24.024
we have the object back,
and I'm querying different

18
00:01:24.024 --> 00:01:28.695
parts of the template and
setting the text content.

19
00:01:28.695 --> 00:01:32.645
Nothing too fancy, just fill in the gaps.

20
00:01:32.645 --> 00:01:36.805
This is not the template HTML, no,

21
00:01:36.805 --> 00:01:41.532
we are filling each part individually.

22
00:01:41.532 --> 00:01:46.493
And then we have these event handlers
that I will explain in a minute, so

23
00:01:46.493 --> 00:01:48.904
why it's so complicated, okay?

24
00:01:48.904 --> 00:01:53.943
But let's say this and
see what happens now, oops.

25
00:01:57.069 --> 00:01:59.920
By the way, nothing happens.

26
00:01:59.920 --> 00:02:03.383
Does anyone know why?

27
00:02:03.383 --> 00:02:09.344
I need to import somewhere in
the execution chain product item JS,

28
00:02:09.344 --> 00:02:13.292
if not the browser will
never execute that.

29
00:02:13.292 --> 00:02:17.190
So I need to find app.js and

30
00:02:17.190 --> 00:02:22.623
add another import for ProductItem.

31
00:02:22.623 --> 00:02:26.049
So, now we have something different.

32
00:02:29.284 --> 00:02:35.343
Okay, so
automagically we have a list of categories

33
00:02:35.343 --> 00:02:40.171
with products inside, that looks good.

34
00:02:40.171 --> 00:02:43.632
&gt;&gt; Why aren't you parsing
the product via an attribute?

35
00:02:43.632 --> 00:02:44.704
&gt;&gt; I could-
&gt;&gt; You realize-

36
00:02:44.704 --> 00:02:45.743
&gt;&gt; Just to show you a different

37
00:02:45.743 --> 00:02:46.380
ways to do that.

38
00:02:46.380 --> 00:02:50.212
So, what are the other ways to
parse these as an attribute?

39
00:02:50.212 --> 00:02:55.044
For that the solution will be to go to my

40
00:02:55.044 --> 00:02:59.880
data item js and create the property.

41
00:02:59.880 --> 00:03:06.008
Basic JavaScript, not TypeScript, so
yeah, how do you set up a property?

42
00:03:06.008 --> 00:03:09.022
Like you don't unless
it's private with a hash,

43
00:03:09.022 --> 00:03:12.823
I'm not sure if you've seen that,
we will use that later, and

44
00:03:12.823 --> 00:03:16.507
then create a setter and a getter,
but not through data set.

45
00:03:16.507 --> 00:03:19.505
If you're using data set,
you must use a string.

46
00:03:19.505 --> 00:03:22.885
But if it's a property,
it's fine, you can parse it.

47
00:03:22.885 --> 00:03:25.448
Yeah, sure,
just to show you a different techniques.

48
00:03:27.402 --> 00:03:30.950
So what about the, if it says click?

49
00:03:30.950 --> 00:03:33.638
And this is something that
we haven't seen before.

50
00:03:33.638 --> 00:03:37.798
I mean, we've seen how to detect
click because it's an event listener.

51
00:03:37.798 --> 00:03:41.774
So we are taking the anchor
of my template and

52
00:03:41.774 --> 00:03:47.374
let's look at the templates first,
let's inspect it here.

53
00:03:48.680 --> 00:03:53.485
It's actually the anchor,
it's actually wrapping the image and

54
00:03:53.485 --> 00:03:57.188
the section that has to
deal with all information.

55
00:03:57.188 --> 00:04:01.139
So actually the link is a whole row, okay?

56
00:04:01.139 --> 00:04:04.202
The whole row is a link, okay?

57
00:04:04.202 --> 00:04:10.347
So the thing is that I can click like
there and it's actually doing something.

58
00:04:10.347 --> 00:04:15.475
Look at the URL,
it's going to product hyperlink 11.

59
00:04:15.475 --> 00:04:20.420
So it's going to the details for
some reason.

60
00:04:22.091 --> 00:04:25.227
Okay, so it's working that part.

61
00:04:25.227 --> 00:04:30.083
So, But

62
00:04:30.083 --> 00:04:34.450
we also have a button here and
we have a problem,

63
00:04:34.450 --> 00:04:38.171
the button is also within the same link.

64
00:04:38.171 --> 00:04:44.366
So when you click on the button,
the link event handler fires.

65
00:04:44.366 --> 00:04:46.001
Do you understand the problem?

66
00:04:46.001 --> 00:04:52.955
So the link is actually, in this case,
an element that includes a button.

67
00:04:52.955 --> 00:04:58.470
It doesn't seem like right initially,
but this is a pretty common pattern.

68
00:04:59.840 --> 00:05:01.500
So how to solve the problem with the DOM?

69
00:05:02.530 --> 00:05:07.640
Well, we could check event.target.

70
00:05:07.640 --> 00:05:13.043
So remember I mentioned before
that we do have two things,

71
00:05:13.043 --> 00:05:15.699
target and current target.

72
00:05:15.699 --> 00:05:18.270
I mentioned we will see that later.

73
00:05:18.270 --> 00:05:23.954
So, we are attaching an event listener
over the link, over the anchor, okay?

74
00:05:23.954 --> 00:05:28.560
That's actually current target,
it's going to be a link.

75
00:05:28.560 --> 00:05:30.272
And what about target?

76
00:05:30.272 --> 00:05:37.462
Target is actually the lower level
element where you clicked on.

77
00:05:37.462 --> 00:05:41.011
So if I click on Black Americano,
it's an H4.

78
00:05:43.134 --> 00:05:47.040
So the current target is still a because
it's actually the object where we

79
00:05:47.040 --> 00:05:49.260
are binding the event to.

80
00:05:49.260 --> 00:05:52.110
But this one, it can be anything,
so just the button.

81
00:05:53.540 --> 00:05:59.150
So then I'm very fine if the tag
name of the target is button.

82
00:05:59.150 --> 00:06:06.763
And if it's button we need to add it
to the cart, not go to the details.

83
00:06:06.763 --> 00:06:08.677
Does it makes sense?

84
00:06:08.677 --> 00:06:14.574
But that's that part, Okay?

85
00:06:16.932 --> 00:06:19.335
Cool, now the details is empty.

86
00:06:19.335 --> 00:06:21.863
So if I click here, it's empty.

87
00:06:21.863 --> 00:06:24.380
So we also need to create
the web component for that.

88
00:06:25.760 --> 00:06:30.921
But before a web component, in fact,
if we inspect this and we log into

89
00:06:30.921 --> 00:06:36.450
the body main, we see that in this case
we are using a different technique.

90
00:06:36.450 --> 00:06:39.169
We are not parsing the whole object,
we are parsing the ID.

91
00:06:39.169 --> 00:06:42.830
Again, just to show you different
ways to work with this.

92
00:06:42.830 --> 00:06:47.610
So we received the ID,
we need to find the ID somewhere.

93
00:06:47.610 --> 00:06:54.026
So what we need,
it's within Menu.js, a function,

94
00:06:57.158 --> 00:07:02.738
That will get a ProductById, okay?

95
00:07:02.738 --> 00:07:08.207
I'm using an async function and you say,
hey, that's a look like something for

96
00:07:08.207 --> 00:07:11.916
an async function,
it's verifying in a local array.

97
00:07:11.916 --> 00:07:17.028
Well, the thing is that what happens
if you're loading the details

98
00:07:17.028 --> 00:07:22.679
page initially by default, you didn't
pass through the whole homepage,

99
00:07:22.679 --> 00:07:26.551
for example, so
maybe we don't have yet the menu.

100
00:07:26.551 --> 00:07:30.925
So maybe we can check
if we do have a menu or

101
00:07:30.925 --> 00:07:35.957
if the menu is no,
we can maybe await for what?

102
00:07:35.957 --> 00:07:40.359
For raw data, that is our other function.

103
00:07:40.359 --> 00:07:47.585
Or we can use a gather with lazy load,
another way to solve the problem.

104
00:07:50.716 --> 00:07:56.833
And here we can use different
techniques to go faster with this,

105
00:07:56.833 --> 00:08:02.496
but just plain priming solving
is we are going to make this,

106
00:08:02.496 --> 00:08:08.727
we go through every category and
every product in that category,

107
00:08:08.727 --> 00:08:13.966
and we check if the ID is
the one that we are looking for.

108
00:08:13.966 --> 00:08:15.892
And in that case, we return that.

109
00:08:15.892 --> 00:08:17.565
And if not, we return null.

110
00:08:17.565 --> 00:08:21.147
Meaning, yeah, I don't have it,
pretty simple algorithm.

