WEBVTT

1
00:00:00.000 --> 00:00:04.325
Today we've covered Vanilla JS in general
with, I know, different techniques.

2
00:00:04.325 --> 00:00:09.700
But I didn't want to push my way of work,
but to follow me in the flow of

3
00:00:09.700 --> 00:00:15.755
thoughts and how to solve problems so
then you can create your own framework.

4
00:00:15.755 --> 00:00:17.207
We've seen the DOM API.

5
00:00:17.207 --> 00:00:22.354
Not the whole DOM API, it's huge,
but the most important part.

6
00:00:22.354 --> 00:00:24.120
The fetch, that was actually simple.

7
00:00:24.120 --> 00:00:28.610
Some design patterns we've seen, for
example, how you can broadcast your

8
00:00:28.610 --> 00:00:32.060
own custom events and
then how you listen to those events.

9
00:00:32.060 --> 00:00:34.441
Single page applications,
how to do the routing things.

10
00:00:34.441 --> 00:00:39.043
Web components and
the three parts of web components,

11
00:00:39.043 --> 00:00:44.052
custom elements,
the template element, and shadow DOM.

12
00:00:44.052 --> 00:00:49.500
And some ideas on how to use reactive
programming in Vanilla JavaScript.

13
00:00:49.500 --> 00:00:55.460
Again, you have small libraries that will
solve each of these issues differently.

14
00:00:55.460 --> 00:00:58.980
At the end,
they're using Vanilla JavaScript also.

15
00:00:58.980 --> 00:01:02.131
So you can take ideas from those
frameworks, from those libraries,

16
00:01:02.131 --> 00:01:03.990
you can use those libraries if you want.

17
00:01:05.050 --> 00:01:08.356
So let's go back to the main
fears of Vanilla JS, and

18
00:01:08.356 --> 00:01:10.773
let's try to see where we are, okay?

19
00:01:10.773 --> 00:01:12.814
Routing for single page applications.

20
00:01:12.814 --> 00:01:16.720
We've seen that that's not
really a big problem yet.

21
00:01:16.720 --> 00:01:20.210
The one that we have is really
concentrated in our project.

22
00:01:20.210 --> 00:01:22.964
We didn't use regular expressions, but

23
00:01:22.964 --> 00:01:25.960
adding that part is not really so
difficult.

24
00:01:27.040 --> 00:01:28.973
It's too verbose and time consuming.

25
00:01:28.973 --> 00:01:32.719
Yeah, maybe, it's up to you.

26
00:01:32.719 --> 00:01:38.731
And that brain icon I have there, it means
that it has to do with how you think,

27
00:01:38.731 --> 00:01:41.333
how do you want things to be done?

28
00:01:41.333 --> 00:01:45.548
And maybe you can create
your own mini-framework,

29
00:01:45.548 --> 00:01:50.280
mini-library, so
you don't have that part, okay?

30
00:01:50.280 --> 00:01:57.290
So by default Vanilla JS is not forcing
you into doing things in this way.

31
00:01:57.290 --> 00:02:01.480
State management, we've seen that
you can do things with arrays,

32
00:02:01.480 --> 00:02:04.945
global things,
you can have different patterns here.

33
00:02:04.945 --> 00:02:10.350
And again if you wanna use Redux or
any other design pattern for that, fine.

34
00:02:10.350 --> 00:02:13.310
At the end it's just design pattern,
abstractions, layers.

35
00:02:14.800 --> 00:02:19.740
Templating, we've seen basic templating,
how to use a template string.

36
00:02:19.740 --> 00:02:22.603
But for those of you that
are coming from React or Angular,

37
00:02:22.603 --> 00:02:26.850
you're expecting more from the template,
and there are ways to do that.

38
00:02:26.850 --> 00:02:31.313
So we've seen the basics, but using,
for example, literal strings,

39
00:02:31.313 --> 00:02:35.942
you can use tagged literal strings to
make things really, really useful.

40
00:02:35.942 --> 00:02:40.324
I'm not sure if you have heard
about lit-html, for example.

41
00:02:40.324 --> 00:02:46.736
lit-html is, it's a quick framework that
is, let me explain quickly how that works.

42
00:02:46.736 --> 00:02:49.870
The idea is that when you are,
for example,

43
00:02:49.870 --> 00:02:55.143
defining a template string like this one,
let me add this on the app.js.

44
00:02:55.143 --> 00:02:56.771
We don't get rid of that.

45
00:02:56.771 --> 00:02:59.301
So you can do something like this.

46
00:02:59.301 --> 00:03:02.190
I'm not saying this will work
because I'm not doing it fully.

47
00:03:02.190 --> 00:03:07.647
But you can have things like,
okay, have a paragraph.

48
00:03:07.647 --> 00:03:12.078
And I want the paragraph to have a style.

49
00:03:12.078 --> 00:03:17.387
And I want this style to have, here,
something coming from an object.

50
00:03:17.387 --> 00:03:21.613
This is not JavaScript, it's not React,
I'm not actually doing this,

51
00:03:21.613 --> 00:03:22.644
I'm doing this.

52
00:03:22.644 --> 00:03:27.870
And you say, okay, this is not gonna work,

53
00:03:27.870 --> 00:03:33.800
but I can pass this
template string to a tag.

54
00:03:33.800 --> 00:03:34.830
What's a tag?

55
00:03:34.830 --> 00:03:39.410
For example, something like this,
frontendmasters.

56
00:03:39.410 --> 00:03:41.100
And you say, okay, what's that?

57
00:03:42.240 --> 00:03:43.230
It's not a function.

58
00:03:43.230 --> 00:03:45.150
I'm not using parentheses, okay?

59
00:03:45.150 --> 00:03:50.910
So it doesn't look like a function call,
but it's actually a function.

60
00:03:50.910 --> 00:03:54.084
It's called a tag for template strings.

61
00:03:54.084 --> 00:03:56.727
The tag is going to
function with that name.

62
00:03:56.727 --> 00:03:58.959
Again, I'm not explaining this fully,

63
00:03:58.959 --> 00:04:01.456
I'm just giving you an idea
of what you can do.

64
00:04:01.456 --> 00:04:09.890
And this function will receive portions
of this string that you can process.

65
00:04:09.890 --> 00:04:14.838
So you can find with regular expressions,
for example, parts of that string and

66
00:04:14.838 --> 00:04:16.380
do something with that.

67
00:04:17.860 --> 00:04:23.500
So with this technique, lit-html is one,
there are many that are doing that, yeah?

68
00:04:25.780 --> 00:04:29.988
&gt;&gt; In some of our highly dynamic
components we started using

69
00:04:29.988 --> 00:04:34.898
lit-html cuz not only can you do
the kind of like click handlers and

70
00:04:34.898 --> 00:04:41.313
these kinds of things inside the template,
but it also has the intelligent updating.

71
00:04:41.313 --> 00:04:46.517
So if you throw it a very
giant template literal at, for

72
00:04:46.517 --> 00:04:52.286
instance, a table or a row, and
only one part of it changes,

73
00:04:52.286 --> 00:04:57.058
it will intelligently only
update that one part.

74
00:04:57.058 --> 00:04:59.327
And you can use things like repeat,

75
00:04:59.327 --> 00:05:03.182
which is kinda like React where
you can keep things in order so

76
00:05:03.182 --> 00:05:06.506
you're not doing unnecessary DOM-
&gt;&gt; Yeah, sure, so

77
00:05:06.506 --> 00:05:11.633
it's doing some of the things that other
libraries are doing, but it's lightweight.

78
00:05:11.633 --> 00:05:14.523
And it's just focusing on
this part of the problem,

79
00:05:14.523 --> 00:05:17.505
not the whole thing that React is solving.

80
00:05:17.505 --> 00:05:20.938
But if you look at how it looks like,
it looks like this.

81
00:05:20.938 --> 00:05:24.600
It has that html prefix
to the template string.

82
00:05:24.600 --> 00:05:28.356
And that's the one that's doing the magic,
such as reading this and

83
00:05:28.356 --> 00:05:32.440
making an event listener for
the click without a clickHandler, okay?

84
00:05:32.440 --> 00:05:38.324
So that magic that you can do
with tagged little strings is,

85
00:05:38.324 --> 00:05:42.795
I mean if you wanna do
it manually on your own,

86
00:05:42.795 --> 00:05:50.260
you have like an obstruction layer there,
not really so difficult.

87
00:05:50.260 --> 00:05:54.769
But it's a way that you have to improve
your templates if you don't like

88
00:05:54.769 --> 00:05:57.920
how the template work by default, okay?

89
00:05:57.920 --> 00:06:02.163
And, again, this version was not
really to be against libraries,

90
00:06:02.163 --> 00:06:04.850
is to understand how things work.

91
00:06:04.850 --> 00:06:09.287
So you can decide when to use a library or
a framework, and

92
00:06:09.287 --> 00:06:13.640
when to use mini libraries for
specific reasons.

93
00:06:13.640 --> 00:06:18.656
So then we can discuss forever,
if you add lit-html

94
00:06:18.656 --> 00:06:23.610
into your toolbox,
is that Vanilla JS or not?

95
00:06:23.610 --> 00:06:25.736
It doesn't matter actually, okay?

96
00:06:25.736 --> 00:06:27.089
So it doesn't matter.

97
00:06:27.089 --> 00:06:31.910
If it solves your issue, and
it's not adding performance penalty as

98
00:06:31.910 --> 00:06:36.829
you can have with full React
client-side application, it's fine.

99
00:06:36.829 --> 00:06:38.484
Again, if not,
you're reinventing the wheel.

100
00:06:38.484 --> 00:06:43.298
So that's okay,
we don't want you to reinvent the wheel.

101
00:06:43.298 --> 00:06:47.850
But if you find a wheel that
solves your problem, it's fine.

102
00:06:47.850 --> 00:06:52.997
The problem with some frameworks
is that it's not a wheel, right?

103
00:06:52.997 --> 00:06:58.299
It's a whole plane that you're adding,
just for a wheel, okay?

104
00:06:58.299 --> 00:07:02.492
That's the problem of a big framework or
library.

105
00:07:02.492 --> 00:07:06.169
So that was for the fear of templating.

106
00:07:06.169 --> 00:07:08.811
Complexity, I mean,

107
00:07:08.811 --> 00:07:14.660
I know what you feel right now,
was it so complex?

108
00:07:14.660 --> 00:07:16.799
I mean, if you look at the code right now,
is it complex?

109
00:07:16.799 --> 00:07:21.105
I'm not sure if complex is
actually what's going on.

110
00:07:21.105 --> 00:07:25.475
The problem is that when you don't know
the stuff, everything looks complex.

111
00:07:25.475 --> 00:07:30.299
And I know a lot of developers that
were developers when I started that

112
00:07:30.299 --> 00:07:35.430
didn't make the shift or
they stopped working as web developers.

113
00:07:35.430 --> 00:07:38.440
And they feel like React is complex.

114
00:07:38.440 --> 00:07:40.950
Because that has to do with ignorance.

115
00:07:40.950 --> 00:07:44.020
I mean, if you're ignorant of something,
it looks complex.

116
00:07:44.020 --> 00:07:45.740
It has to do with that.

117
00:07:45.740 --> 00:07:49.470
Reusable components, well,
we saw how to create web components.

118
00:07:49.470 --> 00:07:52.329
Yeah, you can decide it's better,
worse, but

119
00:07:52.329 --> 00:07:55.128
we can create reusable
components these days.

120
00:07:55.128 --> 00:08:00.908
Even you can export from Angular,
React, or Vue, web components as well.

121
00:08:00.908 --> 00:08:06.168
And you can use them as web
components in a Vanilla JavaScript.

122
00:08:06.168 --> 00:08:08.654
Fine, that's possible.

123
00:08:08.654 --> 00:08:14.264
How to maintain this also
has to do with your design

124
00:08:14.264 --> 00:08:19.219
patterns, how your way of thinking works.

125
00:08:19.219 --> 00:08:20.962
So it has to do with your work.

126
00:08:20.962 --> 00:08:24.335
Learning curve, well,
you did the workshop, you're still here,

127
00:08:24.335 --> 00:08:25.449
you didn't get away.

128
00:08:25.449 --> 00:08:32.773
So, I mean, I don't think it's bigger
than learning a framework, actually.

129
00:08:32.773 --> 00:08:38.281
Browser compatibility, everything that
we've seen today works everywhere.

130
00:08:38.281 --> 00:08:41.232
Maybe one specific part
that is not in Safari, but

131
00:08:41.232 --> 00:08:45.108
everything that we have already
implemented works everywhere.

132
00:08:45.108 --> 00:08:49.288
The only X that we have there,
so it's not really a big issue.

133
00:08:49.288 --> 00:08:52.759
The only problem is still,
if you have some banks,

134
00:08:52.759 --> 00:08:56.572
corporate governments,
they're still on IEEE 11.

135
00:08:56.572 --> 00:08:59.697
Well, you need to be very careful.

136
00:08:59.697 --> 00:09:02.132
The same will happen with React.

137
00:09:02.132 --> 00:09:06.676
So it's no different than React,
Angular, or View, okay?

138
00:09:06.676 --> 00:09:10.220
So it's not really, really a big deal.

139
00:09:10.220 --> 00:09:13.615
Reinventing the wheel every time,
again, that has to do with yourself,

140
00:09:13.615 --> 00:09:15.660
are you going to create
your own framework?

141
00:09:15.660 --> 00:09:19.700
Are you going to add abstractions
layers to what we have done today?

142
00:09:21.430 --> 00:09:23.370
Because it has to do with that.

143
00:09:23.370 --> 00:09:28.491
I have created, as I mentioned,
more than 100 web apps in Vanilla JS.

144
00:09:28.491 --> 00:09:31.441
And, yeah,
I wasn't reinventing the wheel every time.

145
00:09:31.441 --> 00:09:37.391
I was using my own ideas, again,
my own code, my little framework,

146
00:09:37.391 --> 00:09:42.739
my little utility functions to
avoid reinventing the wheel.

147
00:09:42.739 --> 00:09:47.500
But it's up to you, it's not something
that the platform will give you.

148
00:09:47.500 --> 00:09:52.170
It's up to the usage of best practices and
design patterns.

149
00:09:52.170 --> 00:09:53.801
Scalability is still,

150
00:09:53.801 --> 00:09:58.210
again, something that it depends
on how you're doing things.

151
00:10:00.350 --> 00:10:06.520
By default, if everything is chaos in your
code, yeah, it's going to be a problem.

152
00:10:06.520 --> 00:10:10.587
And that's why I know that some
companies when they decide to,

153
00:10:10.587 --> 00:10:15.746
we're going to use, and I'm hearing
this a lot, we're going to use Angular.

154
00:10:15.746 --> 00:10:19.072
Because we have TypeScript, it is forced.

155
00:10:19.072 --> 00:10:24.099
And it will force developers
to do things in this way,

156
00:10:24.099 --> 00:10:27.911
because if we give them freedom, okay?

157
00:10:27.911 --> 00:10:30.260
Everything is chaos.

158
00:10:30.260 --> 00:10:33.940
Well, it has to do with that,
with following rules, guidelines.

159
00:10:35.060 --> 00:10:36.135
So, yeah?

160
00:10:36.135 --> 00:10:39.878
&gt;&gt; We've never seen any large React or

161
00:10:39.878 --> 00:10:45.126
Angular code bases that are performant,
right?

162
00:10:45.126 --> 00:10:48.020
&gt;&gt; Yeah, that's a performance, yeah.

163
00:10:48.020 --> 00:10:53.344
&gt;&gt; I'm just saying, in general,
yeah, a lot of code bases can,

164
00:10:53.344 --> 00:10:56.362
no matter what tool you use-
&gt;&gt; Exactly,

165
00:10:56.362 --> 00:11:00.241
no matter what tool you use,
it will get the mess at one point, yeah.

166
00:11:00.241 --> 00:11:01.677
Yeah, that's true.

167
00:11:01.677 --> 00:11:06.529
So again, now that you know Vanilla JS,
you can decide to use lightweight

168
00:11:06.529 --> 00:11:09.829
libraries tools one by one,
based on your needs.

169
00:11:09.829 --> 00:11:11.730
That's okay, okay?

170
00:11:11.730 --> 00:11:14.580
You wanna use Redux because you like it,
go ahead.

171
00:11:14.580 --> 00:11:16.730
You don't need React, you can use Redux.

172
00:11:16.730 --> 00:11:19.160
You wanna use lit-html, that's okay.

173
00:11:19.160 --> 00:11:20.700
You wanna use a router.

174
00:11:20.700 --> 00:11:25.172
There are a lot of routers that
will give you more power without

175
00:11:25.172 --> 00:11:27.390
another UI framework.

176
00:11:27.390 --> 00:11:30.794
You need the UI framework
because you feel like you will

177
00:11:30.794 --> 00:11:33.400
have a lot of reactivity and data.

178
00:11:33.400 --> 00:11:36.020
Well, go ahead, use the framework.

179
00:11:36.020 --> 00:11:39.725
The problem is to decide a framework or
a library based on,

180
00:11:39.725 --> 00:11:43.670
that's the only thing I know and
that's why I'm picking it.

181
00:11:43.670 --> 00:11:45.291
That's the problem, okay?

182
00:11:45.291 --> 00:11:49.561
So now it's time for you to define
design patterns you prefer for

183
00:11:49.561 --> 00:11:55.190
everything that we have seen, and create
your own unique library for your needs.

184
00:11:55.190 --> 00:11:57.320
Maybe that's the way.

185
00:11:57.320 --> 00:12:00.729
And decide when to use that and
when not to use that.

186
00:12:00.729 --> 00:12:05.811
&gt;&gt; I'll just say, in general,
leading this company I

187
00:12:05.811 --> 00:12:11.594
find having small modules that
will live for a decade plus.

188
00:12:11.594 --> 00:12:18.062
That I'm not gonna have to NPM update and
then have everything break.

189
00:12:18.062 --> 00:12:23.219
I just find that it is a good use of
development resources, and granted I lead

190
00:12:23.219 --> 00:12:28.557
the company so I can say, hey, we're
building this in a certain way, right?

191
00:12:28.557 --> 00:12:33.199
Not only me coding but our developers,
but I do enjoy the fact that, well,

192
00:12:33.199 --> 00:12:34.978
if there's a new paradigm.

193
00:12:34.978 --> 00:12:38.458
So, for instance,
right now if you have an SPA React app,

194
00:12:38.458 --> 00:12:43.233
now everybody's saying, hey, now you
have to rewrite it next, or whatever.

195
00:12:43.233 --> 00:12:48.163
And then there's a continually, as you've
been in the industry for 20 plus years,

196
00:12:48.163 --> 00:12:51.471
you've seen the churn from
everybody was on AngularJS and

197
00:12:51.471 --> 00:12:56.222
then everybody moved to this, and then
moved to that, and it's a constant cycle.

198
00:12:56.222 --> 00:13:00.767
Which is great, keeps us employed,
we can keep building new things and

199
00:13:00.767 --> 00:13:02.880
new styles which I appreciate.

200
00:13:02.880 --> 00:13:08.775
But yeah, as an owner of a business
that's been in existence for

201
00:13:08.775 --> 00:13:15.560
over a decade, I appreciate that we can
just open up a module and it works.

202
00:13:15.560 --> 00:13:19.074
And if anything, JavaScript has
gotten better over the years,

203
00:13:19.074 --> 00:13:22.912
we can just swap out, a different way
of doing things with a new feature

204
00:13:22.912 --> 00:13:26.445
that does the same thing,
it's just clearer code or whatever.

205
00:13:26.445 --> 00:13:31.358
So yeah, that's my perspective, and I wish
more organizations would look at that

206
00:13:31.358 --> 00:13:35.098
as a potential path-
&gt;&gt; Yeah, talking with many organizations,

207
00:13:35.098 --> 00:13:38.597
what they say right now sometimes
is that it's difficult for

208
00:13:38.597 --> 00:13:40.733
them to hire Vanilla JS developers.

209
00:13:40.733 --> 00:13:44.624
So it's difficult to find
developers that knows or

210
00:13:44.624 --> 00:13:47.345
even wants to work with Vanilla JS.

211
00:13:47.345 --> 00:13:50.458
But mostly it has to do
with they don't know it.

212
00:13:50.458 --> 00:13:55.038
Because all the bootcamps and
all the new staff from education point of

213
00:13:55.038 --> 00:13:58.305
view in the past five years
were basically React.

214
00:13:59.640 --> 00:14:01.568
&gt;&gt; I'd agree there's definitely
a stigma around that.

215
00:14:01.568 --> 00:14:07.258
But from that perspective of hiring and
that kinda thing.

216
00:14:07.258 --> 00:14:10.284
But yeah, [LAUGH].

217
00:14:10.284 --> 00:14:13.297
&gt;&gt; Okay.
&gt;&gt; I'd say it's been a major win for

218
00:14:13.297 --> 00:14:20.170
us in terms of paying off in terms of
performance maintainability, etc., so.

219
00:14:22.930 --> 00:14:25.350
&gt;&gt; Any final question, online or here?

220
00:14:25.350 --> 00:14:26.938
No?

221
00:14:26.938 --> 00:14:29.753
Well, that's all then, thanks.

222
00:14:29.753 --> 00:14:34.627
&gt;&gt; [APPLAUSE]

