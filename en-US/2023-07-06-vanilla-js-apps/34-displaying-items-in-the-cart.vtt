WEBVTT

1
00:00:00.330 --> 00:00:03.048
So what's the last part?

2
00:00:03.048 --> 00:00:06.460
Finishing the order, okay?

3
00:00:06.460 --> 00:00:11.290
That is not really complicated,
it's more of the same thing.

4
00:00:11.290 --> 00:00:13.852
So, for finishing the cart,

5
00:00:13.852 --> 00:00:20.680
I also have something similar to
the home page that we have list items.

6
00:00:20.680 --> 00:00:27.390
So I also create a component for an order
item, so we have the design separately.

7
00:00:27.390 --> 00:00:33.825
So to finish the cart, if you're
following along using the documentation,

8
00:00:33.825 --> 00:00:39.180
we are now in fhapter five,
lesson seven, finishing the cart.

9
00:00:39.180 --> 00:00:40.670
So here you have the steps.

10
00:00:40.670 --> 00:00:42.368
This is also more copy and paste and

11
00:00:42.368 --> 00:00:46.249
then I will explain maybe something that
is different but it's kind of crazy.

12
00:00:46.249 --> 00:00:50.540
Another web component,
card item will not use Shadow DOM.

13
00:00:50.540 --> 00:00:55.629
Remember why I'm not using Shadow DOM
on these items that we are repeating,

14
00:00:55.629 --> 00:01:00.001
so we can share the document and
we can share CSS and everything for

15
00:01:00.001 --> 00:01:01.910
that particular page.

16
00:01:01.910 --> 00:01:04.757
It's not mandatory,
it's just one decision and

17
00:01:04.757 --> 00:01:08.570
a way to show you that you don't
need to use Shadow DOM everywhere.

18
00:01:09.980 --> 00:01:13.868
You decide on each web component
when to create a new document and

19
00:01:13.868 --> 00:01:17.830
when to share the document
with the rest of the HTML.

20
00:01:17.830 --> 00:01:20.356
So we are going to create CartItem.js.

21
00:01:22.913 --> 00:01:25.137
That's another web component,

22
00:01:25.137 --> 00:01:30.547
that doesn't have its own CSS because
it's sharing the CSS with its container.

23
00:01:33.209 --> 00:01:40.190
This one has nothing special,
it's just filling data, just that.

24
00:01:40.190 --> 00:01:43.569
It's reading the data differently,

25
00:01:43.569 --> 00:01:48.010
you will see in a minute
where this is coming from.

26
00:01:49.880 --> 00:01:54.210
That's cart item and
then we have order page, the whole page.

27
00:01:55.450 --> 00:01:56.870
So I'm going to copy this.

28
00:01:56.870 --> 00:02:02.730
It's long because it has also a form
that we will finish in a minute.

29
00:02:02.730 --> 00:02:06.770
So this is OrderPage.js.

30
00:02:06.770 --> 00:02:13.500
Go into paste OrderPage.js to
replace everything that I have here,

31
00:02:13.500 --> 00:02:17.453
and I'm going to get rid of the default.

32
00:02:19.594 --> 00:02:23.060
So let's see if that works and
then I will explain what's going on.

33
00:02:25.000 --> 00:02:28.778
So first, if I'm going to the cart,
it says your order is empty,

34
00:02:28.778 --> 00:02:30.990
so that's different, okay?

35
00:02:30.990 --> 00:02:32.850
Is different from before.

36
00:02:32.850 --> 00:02:37.583
We also need to solve a bag that we
have when we're going back to the home

37
00:02:37.583 --> 00:02:40.300
that we don't see the home, okay?

38
00:02:40.300 --> 00:02:43.250
So we need solved that problem later.

39
00:02:43.250 --> 00:02:47.119
Why the router is not rendering the home,
that's a buyer.

40
00:02:47.119 --> 00:02:51.216
So but if I add some feel it's either
black americano and two cappuccinos, so

41
00:02:51.216 --> 00:02:52.295
I have three items.

42
00:02:52.295 --> 00:02:56.521
If I'm going to the cart,
I see nothing, okay?

43
00:02:56.521 --> 00:03:02.680
But I'm seeing something, but I'm not
seeing the items, so let's inspect that.

44
00:03:02.680 --> 00:03:03.420
What's going on here?

45
00:03:04.610 --> 00:03:08.050
It's great in me to cart items,
not three, why?

46
00:03:08.050 --> 00:03:11.755
Because two were cappuccinos,
some of the same item which is okay,

47
00:03:11.755 --> 00:03:13.187
but why is not rendering?

48
00:03:16.439 --> 00:03:23.355
I'm not seeing the cart item rendering,
we already had that issue before.

49
00:03:23.355 --> 00:03:29.455
Every time you create a new web component,
you need to call that web component.

50
00:03:29.455 --> 00:03:32.117
And you say, yeah, but it's there.

51
00:03:32.117 --> 00:03:34.185
Yeah, but we don't have Webpack.

52
00:03:34.185 --> 00:03:37.503
We don't have any tool here that knows
that there is a JavaScript file that

53
00:03:37.503 --> 00:03:39.085
need to be executed.

54
00:03:39.085 --> 00:03:44.222
So the only way for the browser
to know at this point that there

55
00:03:44.222 --> 00:03:48.875
is a new web component register
is to import that here.

56
00:03:50.260 --> 00:03:52.477
If not, it's not going to work.

57
00:03:52.477 --> 00:03:55.977
And we don't get an error
because the browser says, okay,

58
00:03:55.977 --> 00:03:58.289
I will render this as an empty element.

59
00:03:58.289 --> 00:04:00.815
Okay, that's not actually an error.

60
00:04:00.815 --> 00:04:06.353
So in this case,
I'm going to add the cart item, like so.

61
00:04:06.353 --> 00:04:11.133
A way to avoid this issue,
there is a way, or a design pattern to

62
00:04:11.133 --> 00:04:16.291
avoid this problem forgetting
about importing the web component.

63
00:04:16.291 --> 00:04:21.462
And that is,
instead of calling the customElements

64
00:04:21.462 --> 00:04:26.760
define in each JavaScript file,
do that in app.js.

65
00:04:28.890 --> 00:04:33.964
So if you copy this into app.js,
somewhere, where you declare all

66
00:04:33.964 --> 00:04:39.676
your web components, you are forced to
import that and you will not forget.

67
00:04:39.676 --> 00:04:44.417
And also you are defining this in app.js
and not in a separate file, okay?

68
00:04:44.417 --> 00:04:47.675
But I did that because if
you're coming from a library,

69
00:04:47.675 --> 00:04:50.532
you're used to do the setup
in a different file.

70
00:04:50.532 --> 00:04:55.415
The problem with Vanilla JS is that
the browser doesn't know about all

71
00:04:55.415 --> 00:04:58.818
your files in the server,
you have to call them.

72
00:05:00.443 --> 00:05:05.319
Okay, so if you don't want to
have this problem, clone this,

73
00:05:05.319 --> 00:05:09.183
copy all the define
declarations to the app.js or

74
00:05:09.183 --> 00:05:12.778
to a JS specifically
targeting that purpose.

75
00:05:12.778 --> 00:05:19.194
So now we can add, again,
a couple of things here.

76
00:05:21.690 --> 00:05:25.077
And I can see the details,
two black americano,

77
00:05:25.077 --> 00:05:27.642
three cappuccinos, one cold brew.

78
00:05:27.642 --> 00:05:30.925
And if I delete one, it works.

79
00:05:30.925 --> 00:05:32.677
And also look at this.

80
00:05:32.677 --> 00:05:39.248
When we delete something,
it also updates the batch,

81
00:05:41.419 --> 00:05:45.004
Because actually now we have two
listeners for the same event.

82
00:05:45.004 --> 00:05:49.792
Because the order page
is also rendering when

83
00:05:49.792 --> 00:05:53.829
the appcart change, as the app.js.

84
00:05:53.829 --> 00:05:58.639
So we have here a component and
also an app.js that is global,

85
00:05:58.639 --> 00:06:01.605
listening for the same window event.

86
00:06:01.605 --> 00:06:04.471
If this was a document event,

87
00:06:04.471 --> 00:06:09.410
it's not gonna work because
of different DOM's.

88
00:06:09.410 --> 00:06:14.729
We have the original DOM and the Shadow
DOM, and then it's not going to be so

89
00:06:14.729 --> 00:06:20.238
simple as adding an event listener with
document add event listener, okay?

90
00:06:20.238 --> 00:06:21.153
Makes sense?

91
00:06:21.153 --> 00:06:23.795
You have any questions?

92
00:06:30.242 --> 00:06:31.037
Yeah.

93
00:06:31.037 --> 00:06:35.770
&gt;&gt; It's strange that the HTML is there,
but wasn't showing up.

94
00:06:35.770 --> 00:06:40.189
I don't understand why importing
the custom element does something to

95
00:06:40.189 --> 00:06:41.030
render it.

96
00:06:41.030 --> 00:06:42.324
In both cases, the HTML is there,

97
00:06:42.324 --> 00:06:45.370
it seems like something should
be displayed in the browser.

98
00:06:45.370 --> 00:06:46.330
&gt;&gt; So what's the problem?

99
00:06:46.330 --> 00:06:48.328
So let me show you this.

100
00:06:48.328 --> 00:06:55.391
So if I go to one of these templates,
now it can be the menu page templates and

101
00:06:55.391 --> 00:07:02.450
add in frontendmasters-genius-code,
that's an HTML element.

102
00:07:02.450 --> 00:07:07.560
So if I execute this, I don't see
the rendering, but it's in the DOM.

103
00:07:07.560 --> 00:07:09.630
Because that's how browsers work.

104
00:07:09.630 --> 00:07:14.284
And fortunately, let's say because
that's how we evolve HTML,

105
00:07:14.284 --> 00:07:19.202
are the new elements and older browsers
will still try to render that.

106
00:07:19.202 --> 00:07:23.911
So, here we have the
frontendmasters-genius-code, render, but

107
00:07:23.911 --> 00:07:26.080
of course, nothing is inside.

108
00:07:27.370 --> 00:07:30.413
So, the browser by default,

109
00:07:30.413 --> 00:07:35.294
will render that in the DOM,
but empty, okay?

110
00:07:35.294 --> 00:07:39.679
So it has no real rendering, but it's in
the DOM, it's not giving me an error,

111
00:07:39.679 --> 00:07:41.129
it's just rendering it.

112
00:07:41.129 --> 00:07:46.340
How the browser knows that there is
a class there that should be executed,

113
00:07:46.340 --> 00:07:50.641
because it's a web component or
actually a custom element.

114
00:07:50.641 --> 00:07:58.730
Well, you actually need to execute,
Define over custom elements.

115
00:07:58.730 --> 00:08:04.532
So if in the JavaScript execution runtime
process you didn't call the fine,

116
00:08:04.532 --> 00:08:07.310
the browser doesn't know about it.

117
00:08:08.520 --> 00:08:11.000
So this is an ECMAScript module.

118
00:08:12.290 --> 00:08:16.062
How does an ECMAScript module
call this to execute it?

119
00:08:16.062 --> 00:08:17.216
If you import it.

120
00:08:17.216 --> 00:08:22.928
When you, if I import in app.js one file,
even if, you can see it,

121
00:08:22.928 --> 00:08:29.159
I'm not sure if you'll see that on
the video but it's kind of grayed out.

122
00:08:29.159 --> 00:08:35.206
In VS code that says that case it's
like you're not using these objects,

123
00:08:35.206 --> 00:08:39.212
but actually what I want
is kind of a side effect.

124
00:08:39.212 --> 00:08:43.995
So a side effect of importing this
JavaScript file is that it's going to

125
00:08:43.995 --> 00:08:45.359
execute the files.

126
00:08:45.359 --> 00:08:49.357
An executing device will execute
custom elements that define.

127
00:08:49.357 --> 00:08:53.097
That's why if you don't
want to have that problem,

128
00:08:53.097 --> 00:08:56.505
one solution is to call
define somewhere else.

129
00:08:56.505 --> 00:09:00.545
For example, in app.js, or
in another JavaScript file that you

130
00:09:00.545 --> 00:09:04.591
call components.js, or
register.js, something like that.

131
00:09:04.591 --> 00:09:09.806
This is like on Angular, if you don't add
a component in the array of components,

132
00:09:09.806 --> 00:09:13.523
it's not gonna work,
something similar happens there.

133
00:09:13.523 --> 00:09:16.990
So there are some frameworks where
you have this problem as well,

134
00:09:16.990 --> 00:09:19.969
you have to register
the components that you wanna use.

