WEBVTT

1
00:00:00.220 --> 00:00:02.750
So my name is Maximiliano.

2
00:00:02.750 --> 00:00:08.220
I can go by Max, this is going to be
a workshop on vanilla JavaScript and

3
00:00:08.220 --> 00:00:10.724
why most of the time sometimes,

4
00:00:10.724 --> 00:00:16.450
maybe you don't need the library
that you want to use so hard.

5
00:00:16.450 --> 00:00:17.940
So really quickly about myself.

6
00:00:17.940 --> 00:00:20.080
So I'm a mobile web developer.

7
00:00:20.080 --> 00:00:26.875
So I have been doing HTML and
web apps since 1995 so the 96 actually.

8
00:00:26.875 --> 00:00:32.013
So that means that I've been using
vanilla Js for a while because we

9
00:00:32.013 --> 00:00:37.166
didn't have libraries or
frameworks like we have right now okay.

10
00:00:37.166 --> 00:00:42.419
So I will during the day I will explain
my experience doing a lot of web apps but

11
00:00:42.419 --> 00:00:45.868
roughly in terms of vanilla
JavaScript web apps so

12
00:00:45.868 --> 00:00:50.215
with different screens single
page applications and.

13
00:00:50.215 --> 00:00:56.788
And routing state management properly
I have done more than 100 web apps for

14
00:00:56.788 --> 00:01:02.878
different devices like even restricted
devices such as mobile phones.

15
00:01:02.878 --> 00:01:06.313
Even before the iPhone era, so

16
00:01:06.313 --> 00:01:11.477
really restricted phones and
even smart TVs.

17
00:01:11.477 --> 00:01:15.460
And then I have started doing mobile apps
as well, so I'm also a mobile developer.

18
00:01:15.460 --> 00:01:19.861
And I have authored a lot of books, you
can see there with a lot of translations

19
00:01:19.861 --> 00:01:22.120
and a lot of workshops and courses.

20
00:01:22.120 --> 00:01:26.260
So even here frontend masters you
will find several workshops and

21
00:01:26.260 --> 00:01:28.720
courses that I have developed.

22
00:01:28.720 --> 00:01:34.910
So I'm third on Twitter on many social
networks on my website is further depth.

23
00:01:34.910 --> 00:01:40.473
And I'm from Argentina I currently
live there so I'm from Buenos Aires.

24
00:01:40.473 --> 00:01:45.421
So what we're going to cover today so
we will be focusing on vanilla JS if

25
00:01:45.421 --> 00:01:49.801
you don't know what that is give
me one minute just one minute.

26
00:01:49.801 --> 00:01:55.009
But anyway that's actually working
with the browser's API and

27
00:01:55.009 --> 00:01:58.294
JavaScript without libraries, okay.

28
00:01:58.294 --> 00:02:03.369
And we will explain why we want that and
when maybe because I'm

29
00:02:03.369 --> 00:02:08.640
not here to like being a really
fan of vanilla JS for everything,

30
00:02:08.640 --> 00:02:14.050
but at least you will see that
many times it's a good idea.

31
00:02:14.050 --> 00:02:16.960
So we're going to talk about the DOM API.

32
00:02:16.960 --> 00:02:21.768
So the DOM and the DOM API, sometimes
it's where you're coming from libraries,

33
00:02:21.768 --> 00:02:23.880
such as React or Angular.

34
00:02:23.880 --> 00:02:28.682
And that's the only thing you know,
the DOM API looks a little scary.

35
00:02:28.682 --> 00:02:32.110
The DOM API,
the one I don't want to deal with that.

36
00:02:32.110 --> 00:02:35.520
Okay, we will deal with it,
that will use the Fetch API.

37
00:02:35.520 --> 00:02:40.020
That's probably something that you know,
because it's currently available unless

38
00:02:40.020 --> 00:02:44.890
you're doing only Angular, where you have
HTTP services there that will help you.

39
00:02:44.890 --> 00:02:47.952
Probably if you're coming from react or
view or other libraries,

40
00:02:47.952 --> 00:02:51.030
you probably have to
deal with the Fetch API.

41
00:02:51.030 --> 00:02:56.053
We will see different design
patterns am not here to advocate for

42
00:02:56.053 --> 00:02:58.479
one specific design pattern.

43
00:02:58.479 --> 00:03:03.883
So we will like mix and match different
design patterns on the same web app that's

44
00:03:03.883 --> 00:03:09.222
typically not the case in the real world
you pick like one design pattern or two.

45
00:03:09.222 --> 00:03:12.646
So but here we are going to
mix a couple So you will get

46
00:03:12.646 --> 00:03:17.200
a sense of different ways that you
have with Vanilla JS to do things.

47
00:03:18.550 --> 00:03:21.840
So we are going to create a single-page
application from scratch.

48
00:03:21.840 --> 00:03:25.160
The only thing that is already there for
you is HTML and CSS.

49
00:03:25.160 --> 00:03:26.580
So we're not going to deal with that.

50
00:03:26.580 --> 00:03:31.010
We will be focusing on JavaScript and
making that app work.

51
00:03:31.010 --> 00:03:35.800
We will talk about web components and
we will code web components.

52
00:03:35.800 --> 00:03:38.960
So we will see the standard
way to create components.

53
00:03:38.960 --> 00:03:43.790
If you're coming from a library, probably
you have heard the idea of a component.

54
00:03:43.790 --> 00:03:48.889
Okay, we're going to see how the standards
work today in most of the browsers.

55
00:03:49.980 --> 00:03:54.626
Routing, so we're going to see how
to do routing without React router,

56
00:03:54.626 --> 00:03:58.190
[LAUGH] without a router
module from your library.

57
00:03:58.190 --> 00:04:00.730
So we're going to just use the DOM API.

58
00:04:00.730 --> 00:04:03.723
You will see it's not so complicated and

59
00:04:03.723 --> 00:04:07.870
how to do reactive
programming in JavaScript.

60
00:04:07.870 --> 00:04:11.941
So things that we love frameworks and
libraries.

61
00:04:11.941 --> 00:04:16.553
If I change my state,
if I change the value of my variable,

62
00:04:16.553 --> 00:04:19.920
the UI will update automatically.

63
00:04:19.920 --> 00:04:24.630
So we're going to see how to do
that with plain JavaScript, okay?

64
00:04:24.630 --> 00:04:28.199
So that's what we're going to
cover during the rest of the day.

65
00:04:29.450 --> 00:04:33.197
So prerequisites on that url, firtman,

66
00:04:33.197 --> 00:04:38.025
that's my last name .github.io/vanila,
okay?

67
00:04:38.025 --> 00:04:45.730
You will find step-by-step guideline
if you wanna follow along.

68
00:04:45.730 --> 00:04:50.194
The workshop, also there you have
the slides, a copy of the slides

69
00:04:50.194 --> 00:04:55.071
in case also you wanna follow along or
you wanna download that for later.

70
00:04:55.071 --> 00:05:01.250
Later I will get into that URL and
we will see where we are on each step.

71
00:05:01.250 --> 00:05:06.841
Also by the end of the day on that URL,
you also have the final code working code,

72
00:05:06.841 --> 00:05:10.700
okay in case you wanna get it later, okay.

73
00:05:10.700 --> 00:05:15.770
Anyway, we are going to maybe 85% of
the workshop will be live coding.

74
00:05:15.770 --> 00:05:19.716
The rest will be slides on some theory,

75
00:05:19.716 --> 00:05:24.867
really theory but
explanations and discussions.

76
00:05:24.867 --> 00:05:30.187
For the coding part, I will be
pushing updates on GitHub as well,

77
00:05:30.187 --> 00:05:33.790
in case you want to follow along.

78
00:05:33.790 --> 00:05:35.940
So questions, yes, please.

79
00:05:35.940 --> 00:05:37.780
For those of you here, go ahead.

80
00:05:37.780 --> 00:05:42.500
Just ask any question, even if you feel
it's a very basic question, go ahead.

81
00:05:42.500 --> 00:05:46.445
&gt;&gt; Manipulating the DOM all the time
seems like not very productive,

82
00:05:46.445 --> 00:05:48.780
especially when building large apps.

83
00:05:48.780 --> 00:05:50.640
What's your opinion?

84
00:05:50.640 --> 00:05:55.398
&gt;&gt; Let's say that scalability
is one of the things that scare

85
00:05:55.398 --> 00:06:00.610
us the most when we are dealing
with vanilla JavaScript.

86
00:06:00.610 --> 00:06:05.656
So we need to understand how you're
manipulating the DOM because as

87
00:06:05.656 --> 00:06:11.685
I mentioned before there are many design
patterns to actually work with the DOM.

88
00:06:11.685 --> 00:06:15.935
And let's say that the simplest
way to manipulate the DOM,

89
00:06:15.935 --> 00:06:20.470
it's probably not performant for
large scale applications.

90
00:06:20.470 --> 00:06:24.370
That is like for those of you that
already know what I'm talking about,

91
00:06:24.370 --> 00:06:26.890
it can be just like changing innerHTML.

92
00:06:26.890 --> 00:06:31.855
Things like that may not scale well,
but we have to understand also that

93
00:06:31.855 --> 00:06:37.200
libraries and frameworks are not
changing the browsers and shine.

94
00:06:37.200 --> 00:06:42.100
So they're actually executing
the same JavaScript as we can, right?

95
00:06:42.100 --> 00:06:46.500
So we can also write things
with scalability in mind, and

96
00:06:46.500 --> 00:06:53.360
sometimes even simulating what libraries
are doing to make them more performant.

97
00:06:53.360 --> 00:06:56.870
So some people think that
libraries are magic and

98
00:06:56.870 --> 00:07:01.504
yeah they're not they're using
the DOM API's behind scenes.

99
00:07:01.504 --> 00:07:06.770
And they're adding design patterns
to make that things better and

100
00:07:06.770 --> 00:07:11.390
you maybe for your case,
one specific library is better.

101
00:07:12.700 --> 00:07:18.022
So I'm not here to tell you that you
must use Vanilla JS for everything or

102
00:07:18.022 --> 00:07:23.140
you must manipulate in the DOM
directly for every project.

103
00:07:23.140 --> 00:07:30.200
But after you understand at
least where are the API's?

104
00:07:30.200 --> 00:07:31.340
What are the possibilities?

105
00:07:31.340 --> 00:07:33.520
So these you can make a decision, okay?

106
00:07:33.520 --> 00:07:36.150
I don't wanna reinvent
the wheel in this case.

107
00:07:36.150 --> 00:07:38.900
So I'm going to use that library,
which is fine.

108
00:07:38.900 --> 00:07:42.886
But the problem is that when you make
a decision without the knowledge,

109
00:07:42.886 --> 00:07:46.938
you just use the library because that's
the only thing you know okay, so

110
00:07:46.938 --> 00:07:48.683
that's my take at this point.

111
00:07:48.683 --> 00:07:53.451
Okay, but I've done web apps,
as I mentioned before,

112
00:07:53.451 --> 00:07:57.610
that are fairly large
maybe in terms of screens,

113
00:07:57.610 --> 00:08:02.998
let's say let's measure this
in different kinds of screens.

114
00:08:02.998 --> 00:08:05.410
It was like a game.

115
00:08:05.410 --> 00:08:11.469
In terms of a screen, it was I think
around 80 different screens with forms and

116
00:08:11.469 --> 00:08:13.828
drag and drop and everything.

117
00:08:13.828 --> 00:08:19.036
That was an app with 10 million users and
it was working fine.

118
00:08:19.036 --> 00:08:23.915
Didn't have any issues in terms of
scalability and yeah, at one point you may

119
00:08:23.915 --> 00:08:29.720
think that I have created my own framework
and yeah, maybe that's the case.

120
00:08:29.720 --> 00:08:34.708
Okay, maybe I created like a custom
framework for that specific project.

121
00:08:34.708 --> 00:08:37.580
Yeah that may be the case for
some situations okay?

122
00:08:37.580 --> 00:08:38.617
That's my take for now.

