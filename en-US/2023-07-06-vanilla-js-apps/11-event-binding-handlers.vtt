WEBVTT

1
00:00:00.510 --> 00:00:03.520
So, of course that we need to do
something more interesting, okay?

2
00:00:03.520 --> 00:00:05.630
Not that one.

3
00:00:05.630 --> 00:00:09.458
But before doing that I wanna
go back to the slides and

4
00:00:09.458 --> 00:00:12.880
get a little deeper on Event Binding.

5
00:00:12.880 --> 00:00:16.400
Because we're going to
have more event binding.

6
00:00:16.400 --> 00:00:21.341
Right now we have only the add event
listener for DOM content loaded, but

7
00:00:21.341 --> 00:00:24.581
let's see more on the basics
of event binding so

8
00:00:24.581 --> 00:00:29.070
we will understand better
what we're going to do.

9
00:00:29.070 --> 00:00:33.211
Each DOM element has a list of possible
events that we can listen to, and

10
00:00:33.211 --> 00:00:35.260
there are a lot of events.

11
00:00:35.260 --> 00:00:40.600
For example we have load, click,
double click yeah I'm not sure who is

12
00:00:40.600 --> 00:00:46.835
double clicking on [CHUCKLE] elements on
the page but there is an event for that.

13
00:00:46.835 --> 00:00:50.759
Change this has typically
to do with form elements so

14
00:00:50.759 --> 00:00:54.336
when the contents of
that element is changing.

15
00:00:54.336 --> 00:00:59.758
For example you have a drop down list
select in HTML and the user is changing

16
00:00:59.758 --> 00:01:04.668
the selection well when that happens
a change event will be fired.

17
00:01:04.668 --> 00:01:10.631
We have keyboard events key up
key down key press mouse events,

18
00:01:10.631 --> 00:01:13.331
pointer and touch events for

19
00:01:13.331 --> 00:01:20.010
example on an iPad I can detect
multiple fingers on the screen.

20
00:01:20.010 --> 00:01:23.153
It's actually 11, don't ask me why 11 or

21
00:01:23.153 --> 00:01:26.297
where should they get
the 11 finger [LAUGH] but

22
00:01:26.297 --> 00:01:31.956
it detects 11 fingers on the screen and
for that you have the touch events, okay?

23
00:01:31.956 --> 00:01:36.327
On a phone it's typically five
it depends on the hardware but

24
00:01:36.327 --> 00:01:40.611
it is typically five, so
there are a lot of events we are not

25
00:01:40.611 --> 00:01:45.190
going to cover use all the events
in this particular project.

26
00:01:45.190 --> 00:01:49.840
But once you understand how to listen for
one event, you just need to go and

27
00:01:49.840 --> 00:01:52.890
learn the documentation
of the other events.

28
00:01:52.890 --> 00:01:56.784
The technique is the same technique
you have changed the event name And

29
00:01:56.784 --> 00:01:59.302
the properties that you
get from that event.

30
00:01:59.302 --> 00:02:02.595
We have a scroll,
we have focus events and

31
00:02:02.595 --> 00:02:07.540
more APIs in the W3C that are even
adding more events to the DOM.

32
00:02:08.790 --> 00:02:10.390
Okay, for example, drag and drop.

33
00:02:12.230 --> 00:02:14.320
Apple TV support.

34
00:02:14.320 --> 00:02:18.094
Okay, so
you can support streaming like casting,

35
00:02:18.094 --> 00:02:21.520
video to an Apple TV or to a Google Cast.

36
00:02:21.520 --> 00:02:25.510
And there are events that you
can that those are not standard.

37
00:02:25.510 --> 00:02:30.255
So there are specific to those platforms
that then you can bind events you know

38
00:02:30.255 --> 00:02:33.940
when an Apple TV appears
in the same network.

39
00:02:33.940 --> 00:02:38.080
So then you can show the icon to
the Apple TV icon on your video player.

40
00:02:39.160 --> 00:02:43.890
So if you have ever seen netflix.com
on the website, sometimes it detects

41
00:02:43.890 --> 00:02:48.520
when you have a Chromecast in the
same network or an Apple TV.

42
00:02:48.520 --> 00:02:53.660
Well, they're using DOM events APIs for
doing that.

43
00:02:53.660 --> 00:02:55.810
And some specific objects.

44
00:02:55.810 --> 00:03:00.397
They have a specific or special events
that are not suitable for all the events,

45
00:03:00.397 --> 00:03:05.140
for example, DOMContentLoaded is one that
is applied only to the window object.

46
00:03:07.030 --> 00:03:13.450
Or popstate is the one that we will
use probably in an hour or so.

47
00:03:13.450 --> 00:03:15.170
And those are just for the window.

48
00:03:15.170 --> 00:03:18.943
So if you try to listen for
those events on other elements,

49
00:03:18.943 --> 00:03:24.910
nothing will happen, because those
events are not being fired there, okay?

50
00:03:24.910 --> 00:03:29.737
The spec's naming pattern
is to use lowercase with no

51
00:03:29.737 --> 00:03:32.750
word separator for event names.

52
00:03:33.830 --> 00:03:35.370
We have seen one exception.

53
00:03:35.370 --> 00:03:37.370
DOMContentLoaded.

54
00:03:37.370 --> 00:03:41.285
That was not lowercased, why?

55
00:03:41.285 --> 00:03:42.452
Standards.

56
00:03:42.452 --> 00:03:46.450
Anyway, look at that event
that you have at the bottom.

57
00:03:46.450 --> 00:03:52.320
I think that's the Guinness
record on the largest event name.

58
00:03:52.320 --> 00:03:55.648
It's
webkitcurrentplaybacktargetiswirelesschan-

59
00:03:55.648 --> 00:03:57.060
ged.

60
00:03:57.060 --> 00:04:02.343
And that's the event name no Camel case,
no underscores, no hyphens

61
00:04:02.343 --> 00:04:08.624
that's the event that will tell you when
you are transmitting video to an Apple TV.

62
00:04:08.624 --> 00:04:12.172
When that Apple TV is off or
something happened in the network and

63
00:04:12.172 --> 00:04:13.890
it's not available anymore.

64
00:04:13.890 --> 00:04:18.370
So it's telling you that it's
changing wherever, okay?

65
00:04:18.370 --> 00:04:21.460
But you will see that most of
the events are using this technique.

66
00:04:22.670 --> 00:04:27.472
Also, for some reason,
also it's not completely,

67
00:04:27.472 --> 00:04:32.167
let's say,
following the same naming guideline,

68
00:04:32.167 --> 00:04:37.730
in terms of, if you're using for
example change or changed.

69
00:04:38.740 --> 00:04:40.910
So if you use ed or e.

70
00:04:41.950 --> 00:04:46.990
Most of the DOM APIs are not adding,
it's not clicked, it's click.

71
00:04:48.540 --> 00:04:51.670
It's not changed, is change.

72
00:04:51.670 --> 00:04:56.042
But when you are writing your own events,
or for example, in this case,

73
00:04:56.042 --> 00:05:00.702
WebKit, that's Apple, for Apple TV,
they're writing their own events,

74
00:05:00.702 --> 00:05:04.980
they're adding ed, or
even DomContentLoaded, unload.

75
00:05:04.980 --> 00:05:07.130
So, they're not following
the same naming guidelines

76
00:05:07.130 --> 00:05:08.190
here.

77
00:05:08.190 --> 00:05:13.928
Okay, but let's say 99% of
the event names are lowercased,

78
00:05:13.928 --> 00:05:17.050
no word separator, and no ed.

79
00:05:17.050 --> 00:05:20.260
So it's like, click, change.

80
00:05:23.010 --> 00:05:27.802
So to bind function to events in
DOM objects there are two ways,

81
00:05:27.802 --> 00:05:31.224
onevent properties and addEventListener.

82
00:05:31.224 --> 00:05:36.167
So far we've seen only addEventListener
but there is another one they say

83
00:05:36.167 --> 00:05:40.963
it's more classic in fact it's been
with Dom since the first version.

84
00:05:40.963 --> 00:05:43.606
AddEventListener is newer, anyway,

85
00:05:43.606 --> 00:05:49.420
newer I'm talking about the last 20 years,
but the other one is 25 years.

86
00:05:49.420 --> 00:05:50.370
That's the difference.

87
00:05:50.370 --> 00:05:54.860
Onevent means that you have
one property for every event.

88
00:05:55.980 --> 00:06:02.770
So instead of using load or
click, we can use onLoadOnClick.

89
00:06:02.770 --> 00:06:04.580
For those of you coming from React.

90
00:06:05.640 --> 00:06:09.963
You can feel that the on
naming pattern is also there,

91
00:06:09.963 --> 00:06:13.600
with a difference or with a twist.

92
00:06:13.600 --> 00:06:15.230
There you are using camel case.

93
00:06:16.720 --> 00:06:20.329
Onclick, the C is a capital C, and
react, I'm talking about react.

94
00:06:21.330 --> 00:06:27.350
Not on the DOM,
onclick everything is lowercase ,okay?

95
00:06:27.350 --> 00:06:32.567
So what's the difference well for
example here you have

96
00:06:32.567 --> 00:06:37.896
an example with an on. You
say element.oneventname and

97
00:06:37.896 --> 00:06:44.677
function it's a property this case for
example onclick onload, okay?

98
00:06:44.677 --> 00:06:47.437
Lowercase, all lowercase.

99
00:06:48.875 --> 00:06:54.615
The problem with using this technique
is that it's a property setter and

100
00:06:54.615 --> 00:07:00.073
getters If I assign twice different
functions to the same property,

101
00:07:00.073 --> 00:07:05.139
the only one that is going
to be fired is the last one.

102
00:07:05.139 --> 00:07:05.790
Okay?

103
00:07:05.790 --> 00:07:06.790
Because it's a property.

104
00:07:06.790 --> 00:07:10.035
You are setting, there is only place for
one eventHandler.

105
00:07:11.230 --> 00:07:16.355
An add event Listener,
is using the observer design pattern,

106
00:07:16.355 --> 00:07:22.351
also known as poly-subscribe, where
I can subscribe a lot of listeners or

107
00:07:22.351 --> 00:07:26.370
observers and all of them will be fire.

108
00:07:26.370 --> 00:07:30.080
So if I use this one,
only one element will be fired.

109
00:07:30.080 --> 00:07:34.896
So that's why today it's typically,
unless it's a very simple example,

110
00:07:34.896 --> 00:07:37.710
the very straightforward example.

111
00:07:37.710 --> 00:07:39.850
You don't wanna use the on properties.

112
00:07:40.950 --> 00:07:43.320
We wanna use addEventListener.

113
00:07:43.320 --> 00:07:46.740
That receives the event
name as a string argument.

114
00:07:47.980 --> 00:07:52.691
And then of course we can apply different
events to the same element with the same

115
00:07:52.691 --> 00:07:56.340
event handler or different event handlers.

116
00:07:56.340 --> 00:08:01.919
And if you apply to the same element
addEventListener with the same

117
00:08:01.919 --> 00:08:07.205
event name more than one,
all the handlers will be executed.

118
00:08:07.205 --> 00:08:12.977
So this is more interesting for
us when we are doing applications,

119
00:08:12.977 --> 00:08:18.660
because then we can listen for
example DOMContentLoaded twice.

120
00:08:20.260 --> 00:08:26.781
So window add event listener
DOMContentLoaded and

121
00:08:26.781 --> 00:08:31.025
why this is better well, first,

122
00:08:31.025 --> 00:08:35.220
we can separate concerns.

123
00:08:35.220 --> 00:08:39.790
So we can say okay,
let's first initialize this.

124
00:08:39.790 --> 00:08:42.375
Then I'm going to initialize the database,
and

125
00:08:42.375 --> 00:08:46.840
then I'm going to initialize the
connection to a web socket to the server.

126
00:08:46.840 --> 00:08:51.814
And we can do this in separate functions,
all of them will be fire and

127
00:08:51.814 --> 00:08:55.850
also they don't need to be
defined in the same js file.

128
00:08:57.480 --> 00:09:01.710
Now we're going to start adding more
JavaScript files in our project.

129
00:09:01.710 --> 00:09:06.553
And then I can listen for the same
event on the same object more than

130
00:09:06.553 --> 00:09:10.710
once without thinking,
did I already did that before?

131
00:09:10.710 --> 00:09:15.940
Maybe I already bound that,
so I cannot do that again.

132
00:09:15.940 --> 00:09:17.580
So it's more complicated.

133
00:09:17.580 --> 00:09:22.510
In this case, yeah, I wanna listen for
a click of the button.

134
00:09:22.510 --> 00:09:27.248
Go ahead if other if other parts
of your code is also listening for

135
00:09:27.248 --> 00:09:32.532
that that's fine, it will work anyway
everyone will get its execution

