WEBVTT

1
00:00:00.088 --> 00:00:02.540
So typically,
we are going to use addEventListener.

2
00:00:02.540 --> 00:00:07.705
And also, addEventListener supports
more advanced event handling.

3
00:00:07.705 --> 00:00:12.811
For example, we can pass a third
argument with some options.

4
00:00:12.811 --> 00:00:17.169
For example, one option is once,
that by default this is false.

5
00:00:17.169 --> 00:00:20.075
So typically, we set it as true.

6
00:00:20.075 --> 00:00:22.749
That means that the event
will be fired once.

7
00:00:22.749 --> 00:00:29.434
After it was fired once, the eventHandler
will be removed automatically.

8
00:00:29.434 --> 00:00:33.702
So if you add these to a click
eventHandler on your button,

9
00:00:33.702 --> 00:00:36.675
you click once you execute the handler.

10
00:00:36.675 --> 00:00:39.528
You click again, nothing will happen,
because the event was removed.

11
00:00:39.528 --> 00:00:43.412
Yeah, it's not suitable for a button,
but it might be suitable for

12
00:00:43.412 --> 00:00:47.111
other situations where you're
expecting that to happen once.

13
00:00:47.111 --> 00:00:52.452
So then you don't need to think
about removing the EventListener

14
00:00:52.452 --> 00:00:56.249
about leaking options, blah, blah, blah.

15
00:00:56.249 --> 00:01:01.041
Passive, I will try to
explain it really quickly.

16
00:01:01.041 --> 00:01:03.093
If you don't get it, it's fine, okay?

17
00:01:03.093 --> 00:01:07.063
But let me explain that with a scroll,

18
00:01:07.063 --> 00:01:11.789
since the simplest
example is with a scroll.

19
00:01:11.789 --> 00:01:17.806
Remember that I mentioned that we
are sharing the thread between my code and

20
00:01:17.806 --> 00:01:21.068
the browser, but it has to do with that.

21
00:01:21.068 --> 00:01:25.418
So what happens, for example,
if you are scrolling with your finger,

22
00:01:25.418 --> 00:01:30.200
you are scrolling your phone with your
finger, and there is a scroll event, so

23
00:01:30.200 --> 00:01:33.191
you can know when the user
is scrolling the page.

24
00:01:33.191 --> 00:01:39.374
But then, in the JavaScript code,
you are taking too much time from the CPU.

25
00:01:39.374 --> 00:01:44.065
Well, the browser has no time,
to actually show the page moving while

26
00:01:44.065 --> 00:01:48.465
you're moving your finger when you
are dragging your finger, okay?

27
00:01:48.465 --> 00:01:52.227
So because by default,
the browser will wait for

28
00:01:52.227 --> 00:01:56.374
your eventHandler to see if
you are changing the DOM.

29
00:01:56.374 --> 00:01:59.733
If you are changing the DOM,
then it needs to repaint,

30
00:01:59.733 --> 00:02:03.906
re-layout before actually moving
the layer, something like that.

31
00:02:03.906 --> 00:02:10.072
When you say passive, true, you are kind
of saying, hey, browser, you can safely do

32
00:02:10.072 --> 00:02:15.243
whatever you wanna do on the screen
that I'm not going to change the DOM.

33
00:02:15.243 --> 00:02:21.357
I'm simplifying this a lot, but just to
give you an idea of what this is, okay?

34
00:02:21.357 --> 00:02:26.759
So it's like saying, hey, you can
execute my EventListener passively,

35
00:02:26.759 --> 00:02:30.802
so don't wait for
it to finish before doing your stuff.

36
00:02:30.802 --> 00:02:35.010
It something like that, it's more complex
than that, but just to give you an idea.

37
00:02:35.010 --> 00:02:39.771
Anyway, there is an option the third
argument where you can execute some code.

38
00:02:39.771 --> 00:02:43.707
And also, we have removeEventListener.

39
00:02:43.707 --> 00:02:46.355
Why do you wanna remove EventListeners?

40
00:02:46.355 --> 00:02:51.194
Well, to avoid having connections
to things that you're not going to

41
00:02:51.194 --> 00:02:52.184
use anymore.

42
00:02:52.184 --> 00:02:57.283
This is only useful when you
are doing a single-page application,

43
00:02:57.283 --> 00:03:01.314
and you are adding and
removing elements on the page.

44
00:03:01.314 --> 00:03:07.126
Because I don't need to remove
the EventListener for DOM content loader.

45
00:03:07.126 --> 00:03:09.955
Or if you have a button or a link but

46
00:03:09.955 --> 00:03:15.123
it's always on the screen,
I don't need to unload my page.

47
00:03:15.123 --> 00:03:19.971
Because when the user is getting out of my
page navigation or closing the browser,

48
00:03:19.971 --> 00:03:24.840
I don't need to clean up my JavaScript,
everything will happen automatically.

49
00:03:24.840 --> 00:03:30.870
We don't clean up the Web app for
when the user gets out.

50
00:03:30.870 --> 00:03:33.109
That's not how a Web app works, okay?

51
00:03:33.109 --> 00:03:38.338
So we use these only when we
are injecting and removing elements.

52
00:03:38.338 --> 00:03:46.755
And we don't wanna get a lot of functions
in memory that we don't use anymore.

53
00:03:46.755 --> 00:03:49.175
Does it make sense?

54
00:03:49.175 --> 00:03:51.147
That's kind of the idea.

55
00:03:51.147 --> 00:03:52.902
And this is actually pretty cool.

56
00:03:52.902 --> 00:03:58.380
And it's an underused feature
that we're going to use it later.

57
00:03:58.380 --> 00:04:02.091
We can dispatch our own events.

58
00:04:02.091 --> 00:04:06.286
And not just for our own components
that we haven't created yet.

59
00:04:06.286 --> 00:04:11.437
We can dispatch events in the document,
in the Window object.

60
00:04:11.437 --> 00:04:15.295
So you create a new event
with your own name, and

61
00:04:15.295 --> 00:04:19.846
you're not forced to follow
the lowercase guideline.

62
00:04:19.846 --> 00:04:24.871
So it's just a string, and
dispatch that event over an element.

63
00:04:24.871 --> 00:04:29.538
And that element can be a button,
or it can be the document.

64
00:04:29.538 --> 00:04:33.977
So you can broadcast events
through the DOM API for

65
00:04:33.977 --> 00:04:37.895
anyone that wants to listen for
that event.

66
00:04:37.895 --> 00:04:42.569
Now, think about React Angular.

67
00:04:42.569 --> 00:04:49.283
This is kind of a context where you
can dispatch events over the context,

68
00:04:49.283 --> 00:04:54.126
and anyone in the DOM can
subscribe with a provider,

69
00:04:54.126 --> 00:04:57.003
and that's kind of that idea.

70
00:04:57.003 --> 00:05:02.249
So we can dispatch events
from anywhere in the page,

71
00:05:02.249 --> 00:05:06.312
and anyone can listen for those events.

72
00:05:06.312 --> 00:05:11.983
And that event is a JavaScript object,
so we can attach properties to it,

73
00:05:11.983 --> 00:05:15.463
metadata, or
we can even extend from event.

74
00:05:15.463 --> 00:05:20.913
We can create our own class,
extending from event

75
00:05:20.913 --> 00:05:25.987
with our own interface for
that event, okay?

76
00:05:25.987 --> 00:05:29.608
So we can hook into the DOM event API.

77
00:05:29.608 --> 00:05:33.772
I'm not saying that you must use that,
or you should always use this.

78
00:05:33.772 --> 00:05:38.682
It's just one technique that
we have available when you're

79
00:05:38.682 --> 00:05:40.809
doing Vanilla JS, okay?

80
00:05:40.809 --> 00:05:44.217
Cool, do you have any question?

81
00:05:44.217 --> 00:05:45.344
Yeah.

82
00:05:45.344 --> 00:05:46.751
&gt;&gt; I have two actually.

83
00:05:46.751 --> 00:05:50.623
So did you say that when DOM nodes
are removed from the DOM specifically,

84
00:05:50.623 --> 00:05:52.984
that the EventListeners aren't removed?

85
00:05:52.984 --> 00:05:56.587
Do you have to remove them manually?

86
00:05:56.587 --> 00:06:00.912
&gt;&gt; Let's review that part, because
there are several possibilities here.

87
00:06:00.912 --> 00:06:08.061
So if you remove an element from the DOM,
do we need to remove the EventListeners?

88
00:06:08.061 --> 00:06:09.809
It depends on what you wanna do.

89
00:06:09.809 --> 00:06:12.548
Because removing an element
from the DOM doesn't mean

90
00:06:12.548 --> 00:06:15.117
that you are not going to
use that element anymore.

91
00:06:15.117 --> 00:06:17.867
It means that you don't want
it on the screen right now.

92
00:06:17.867 --> 00:06:23.526
So remember,
a DOM element is a JavaScript object.

93
00:06:23.526 --> 00:06:25.483
It can be attached to the DOM or not.

94
00:06:27.351 --> 00:06:36.019
Maybe we can say, okay, what happens if
we delete that object, that DOM element?

95
00:06:36.019 --> 00:06:37.355
And that's a different situation.

96
00:06:37.355 --> 00:06:42.248
But removing something from the DOM
doesn't mean that you're throwing it away.

97
00:06:42.248 --> 00:06:45.087
You can still save that DOM element for
later usage.

98
00:06:45.087 --> 00:06:49.119
So then you don't wanna maybe
remove the EventListeners,

99
00:06:49.119 --> 00:06:53.969
because on the lifecycle of that element,
you will still use it later.

100
00:06:53.969 --> 00:06:55.180
Okay, makes sense?

101
00:06:55.180 --> 00:07:01.234
So, the thing is that, if you're not
going to use that element anymore,

102
00:07:01.234 --> 00:07:06.214
or if you delete the reference,
you use the delete keyword in

103
00:07:06.214 --> 00:07:10.922
JavaScript, what will happen
with the EventListener?

104
00:07:10.922 --> 00:07:13.192
Actually, it depends.

105
00:07:13.192 --> 00:07:16.426
It's not even a clear answer,
because it depends

106
00:07:16.426 --> 00:07:20.739
if you also have that EventListener
hooked somewhere else or not.

107
00:07:20.739 --> 00:07:24.173
So it's not so complicated, but
it is complicated actually.

108
00:07:24.173 --> 00:07:25.874
It's not so simple.

109
00:07:25.874 --> 00:07:30.734
But something that you can do is to
manage that yourself and say, okay,

110
00:07:30.734 --> 00:07:34.705
I'm going to remove the EventListener for
that element.

111
00:07:34.705 --> 00:07:40.593
But more important is that when you
don't need that EventListener anymore,

112
00:07:40.593 --> 00:07:45.212
let's say you have a button,
you have a help button, okay,

113
00:07:45.212 --> 00:07:49.397
that is on your page all the time,
but then you log out.

114
00:07:49.397 --> 00:07:55.639
When you log out, you need to
remove an EventListener from it.

115
00:07:55.639 --> 00:07:58.226
Because now you are logged out,
you don't wanna open a chat

116
00:07:58.226 --> 00:08:01.045
that connects to your account,
because now you are logged out.

117
00:08:01.045 --> 00:08:04.536
The button is still there, so you are not
removing the button from the DOM.

118
00:08:04.536 --> 00:08:09.654
It's not about the element itself,
it's about the use case.

119
00:08:09.654 --> 00:08:14.164
Now, there are one or more event listens
over that element that is still on

120
00:08:14.164 --> 00:08:16.732
the screen that you don't need anymore.

121
00:08:16.732 --> 00:08:19.334
So you remove the EventListener.

122
00:08:19.334 --> 00:08:23.086
That use case is more common, make sense?

123
00:08:23.086 --> 00:08:27.315
But yeah, the other problem is
what happens with typically custom

124
00:08:27.315 --> 00:08:32.221
elements that we put on the screen, and
then we'll remove from the screen and

125
00:08:32.221 --> 00:08:34.584
we won't use anymore later, okay?

126
00:08:34.584 --> 00:08:37.098
Cool, any other question?

127
00:08:37.098 --> 00:08:39.177
&gt;&gt; I have one more actually.

128
00:08:39.177 --> 00:08:39.757
&gt;&gt; Yeah, sure.

129
00:08:39.757 --> 00:08:47.179
&gt;&gt; When you have multiple EventListeners
for one event like load for example.

130
00:08:47.179 --> 00:08:48.210
&gt;&gt; Yeah.

131
00:08:48.210 --> 00:08:51.605
&gt;&gt; Did they fire synchronously
one after the other or?

132
00:08:51.605 --> 00:08:53.019
&gt;&gt; In JavaScript, nothing.

133
00:08:53.019 --> 00:08:55.882
So it depends on what
you mean by synchronous.

134
00:08:55.882 --> 00:09:00.556
But I guess that you're you're saying
if they being fired in parallel, okay,

135
00:09:00.556 --> 00:09:02.032
or something like that.

136
00:09:02.032 --> 00:09:05.231
In JavaScript, by default,
you have only one thread.

137
00:09:05.231 --> 00:09:09.000
So nothing will happen in parallel,
nothing.

138
00:09:09.000 --> 00:09:14.251
So no matter the question, everything
will happen sequentially, in sequence.

139
00:09:14.251 --> 00:09:19.266
So in this case,
when you have several EventListeners

140
00:09:19.266 --> 00:09:23.408
hooked to the same element
on the same event,

141
00:09:23.408 --> 00:09:27.673
the system will fire them in sequence,
okay?

142
00:09:27.673 --> 00:09:32.299
And if you need to do things in parallel,
in those EventHandlers,

143
00:09:32.299 --> 00:09:35.451
you need to work with workers,
web workers.

144
00:09:35.451 --> 00:09:39.022
But that's something that
you make on your own.

145
00:09:39.022 --> 00:09:43.379
It's not going to work automatically,
okay?

146
00:09:43.379 --> 00:09:46.331
But JavaScript is single
threaded by default, sorry.

147
00:09:46.331 --> 00:09:49.584
&gt;&gt; Is there a limit to how many
EventListeners can be honored?

148
00:09:49.584 --> 00:09:50.470
&gt;&gt; That's a good question.

149
00:09:50.470 --> 00:09:53.109
If they're limited,
how many EventListeners can you hook?

150
00:09:53.109 --> 00:09:55.624
Actually, it depends on
the implementation of every browser.

151
00:09:55.624 --> 00:09:59.308
I think there was someone doing a test,
and

152
00:09:59.308 --> 00:10:04.843
some browsers were crashing after 5000 or
something that.

153
00:10:04.843 --> 00:10:07.891
But I mean, in the real world, no.

154
00:10:07.891 --> 00:10:11.548
But there is always a limit,
because it has to do with memory and

155
00:10:11.548 --> 00:10:13.276
browsers implementations.

156
00:10:13.276 --> 00:10:19.046
But I'm not pretty sure right now, but I
don't think there is a limit in the spec.

157
00:10:19.046 --> 00:10:23.156
So but yeah, each browser might
implement the things differently.

158
00:10:23.156 --> 00:10:26.265
So they might have their own limits or
something like that,

159
00:10:26.265 --> 00:10:28.641
creating a DOM exception
when that happens.

160
00:10:28.641 --> 00:10:32.832
But it's not happening in the real world,
okay?

161
00:10:32.832 --> 00:10:36.157
Even really complex VR, games,

162
00:10:36.157 --> 00:10:41.392
somethings won't get into
that level of problems.

