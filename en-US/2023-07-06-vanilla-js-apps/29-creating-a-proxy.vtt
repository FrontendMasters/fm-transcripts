WEBVTT

1
00:00:00.000 --> 00:00:05.059
Well, now I need to do something
similar to an order page, okay?

2
00:00:05.059 --> 00:00:09.370
But yeah, we will do it directly when
we are filling the rest of the content.

3
00:00:11.010 --> 00:00:16.600
So the difference is that now
you see that little bar there.

4
00:00:16.600 --> 00:00:19.553
So that's loading the CSS and
doing something, and

5
00:00:19.553 --> 00:00:21.240
that the best coffee in town.

6
00:00:21.240 --> 00:00:28.440
It's something that I will delete from
my design because yeah, I don't like it.

7
00:00:28.440 --> 00:00:32.760
Okay, I'm still not seeing data, okay?

8
00:00:32.760 --> 00:00:37.017
So we have the template,
we have the web components, but

9
00:00:37.017 --> 00:00:40.600
we still need to make it work, okay?

10
00:00:40.600 --> 00:00:44.850
And for that,
we are jumping into the last section.

11
00:00:44.850 --> 00:00:49.187
So, look at this, we have already been
playing with this a couple of hours and

12
00:00:49.187 --> 00:00:54.160
we are not seeing anything, so
everything happens in our brain right now.

13
00:00:54.160 --> 00:00:56.780
So, but you will see that it will work.

14
00:00:58.350 --> 00:01:03.400
So the last section had to
do with reactivity, okay?

15
00:01:03.400 --> 00:01:05.470
Reactive Programming with Proxies.

16
00:01:05.470 --> 00:01:10.256
So we are going to learn our
last concept that will finally

17
00:01:10.256 --> 00:01:15.055
mix everything together and
will make everything work.

18
00:01:16.315 --> 00:01:18.955
So reactive programming with proxies.

19
00:01:18.955 --> 00:01:19.517
Let's see.

20
00:01:19.517 --> 00:01:21.130
What's a proxy?

21
00:01:21.130 --> 00:01:23.050
A proxy is a wrapper object.

22
00:01:23.050 --> 00:01:27.774
So it's a JavaScript object that acts as
a wrapper, that lets you intercept and

23
00:01:27.774 --> 00:01:32.076
modify operations performed on
the wrapped object, allowing you to add

24
00:01:32.076 --> 00:01:36.330
custom behavior or validation to
the objects properties and methods.

25
00:01:37.330 --> 00:01:38.790
Say what?

26
00:01:38.790 --> 00:01:43.619
It's a simple way that we have
in JavaScript to listen for

27
00:01:43.619 --> 00:01:45.540
changes in an object.

28
00:01:47.080 --> 00:01:54.240
So every time the data changes, we can
know, so we can react in consequence.

29
00:01:54.240 --> 00:01:55.840
It's like an event listener for data.

30
00:01:57.210 --> 00:01:57.710
Make sense?

31
00:01:59.270 --> 00:02:02.118
So for example, if we have an object,

32
00:02:02.118 --> 00:02:07.930
here is the original object with
a name and an age, we create a proxy.

33
00:02:07.930 --> 00:02:09.240
And it's pretty simple.

34
00:02:09.240 --> 00:02:10.670
We create new proxy.

35
00:02:10.670 --> 00:02:14.992
It receives the object that we
wanna observe and a handler,

36
00:02:14.992 --> 00:02:18.510
we will get into the handler in a minute.

37
00:02:18.510 --> 00:02:22.321
And then, for example,
we can get or set the age and

38
00:02:22.321 --> 00:02:26.575
we can use the object as if
it's the original object, but

39
00:02:26.575 --> 00:02:32.450
we are not talking to the original object,
we are talking to the proxy, okay?

40
00:02:32.450 --> 00:02:33.850
What about the handler?

41
00:02:33.850 --> 00:02:35.700
That's the second argument
that we have here.

42
00:02:35.700 --> 00:02:41.740
The handler, it's an object
with some special functions.

43
00:02:41.740 --> 00:02:42.670
For example, get.

44
00:02:43.940 --> 00:02:48.767
Get is a function that will be
executed every time someone

45
00:02:48.767 --> 00:02:53.470
is getting a property's
value from that object.

46
00:02:53.470 --> 00:02:59.057
So in this case we're asking,
if the property that is asking is the age,

47
00:02:59.057 --> 00:03:05.210
I will take the current value for
that property and I will add years old.

48
00:03:05.210 --> 00:03:12.630
So that's when you do console.log(s.age),
you see 30 years old.

49
00:03:12.630 --> 00:03:19.970
Not 30, because the proxy has added
some value on top of that object.

50
00:03:19.970 --> 00:03:20.662
Does it makes sense?

51
00:03:22.686 --> 00:03:27.520
It looks weird the first time you see it,
but it makes sense at one point.

52
00:03:27.520 --> 00:03:31.030
So this is kind of a getter for objects.

53
00:03:32.380 --> 00:03:35.812
The only difference is that
after you set up the object,

54
00:03:35.812 --> 00:03:39.420
you never need to use
the object directly anymore.

55
00:03:39.420 --> 00:03:42.910
You always need to use the proxy, okay?

56
00:03:42.910 --> 00:03:43.450
That's the idea.

57
00:03:43.450 --> 00:03:48.680
This is using a wrapper design pattern,
also known as a decorator.

58
00:03:48.680 --> 00:03:50.820
It's a decorator, okay?

59
00:03:50.820 --> 00:03:54.578
It's kind of a high order
function in some ways.

60
00:03:54.578 --> 00:04:02.310
So another usage of this, for example,
is that, and this is pretty cool.

61
00:04:02.310 --> 00:04:06.475
You can, for example, validate data types.

62
00:04:06.475 --> 00:04:08.914
For example, if the age is a number,

63
00:04:08.914 --> 00:04:15.025
maybe we wanna create an error when you
set something different, such as a string.

64
00:04:15.025 --> 00:04:19.658
Well, in this case, you create the handler
with the set function that checks

65
00:04:19.658 --> 00:04:22.452
if the property that
you're changing is age.

66
00:04:22.452 --> 00:04:26.914
And then if the value that you
wanna set is not a number,

67
00:04:26.914 --> 00:04:30.999
in that case, you throw an error,
an exception.

68
00:04:30.999 --> 00:04:33.249
And if you do that then,
you will get an error.

69
00:04:36.631 --> 00:04:41.100
Proxies work with objects.

70
00:04:41.100 --> 00:04:47.250
So you cannot do this with numbers,
or booleans, or strings.

71
00:04:47.250 --> 00:04:52.171
Strings, it's kind of, if you have those
situations, you can create the class and

72
00:04:52.171 --> 00:04:55.905
getters and
setters to do that directly with values.

73
00:04:55.905 --> 00:04:59.455
I know at this point you understand
why are we covering proxies yet?

74
00:05:00.575 --> 00:05:05.248
The thing is that the handler is the
object that we pass as the second argument

75
00:05:05.248 --> 00:05:06.645
of the proxy, right?

76
00:05:07.885 --> 00:05:11.526
That's an object that contains traps for
intercepting and

77
00:05:11.526 --> 00:05:16.115
customizing operations performed
on a JavaScript proxy option.

78
00:05:16.115 --> 00:05:17.615
Traps, what's a trap?

79
00:05:18.640 --> 00:05:22.895
A trap is a method on a proxy
handler that intercepts and

80
00:05:22.895 --> 00:05:25.680
customizes specific operations.

81
00:05:25.680 --> 00:05:29.730
So it's kind of that
event that we saw before.

82
00:05:29.730 --> 00:05:31.510
Where are the traps available?

83
00:05:31.510 --> 00:05:35.190
Get, when someone is getting
a value from a property?

84
00:05:35.190 --> 00:05:39.560
Set, when someone is changing
the value of a property.

85
00:05:39.560 --> 00:05:43.269
Has, when someone is checking
if a property is there or not,

86
00:05:43.269 --> 00:05:45.140
deleting the property.

87
00:05:45.140 --> 00:05:51.258
Apply is executed every time someone
is executing a function on that object.

88
00:05:51.258 --> 00:05:55.080
And we know we received the function name,
we received the arguments.

89
00:05:56.520 --> 00:06:00.581
A constructor, when someone is creating
a new instance of that object,

90
00:06:00.581 --> 00:06:04.387
getOwnPropertyDescriptor, defineProperty,
and so on, okay?

91
00:06:04.387 --> 00:06:08.757
So these are traps, so
methods, hooks, if you want,

92
00:06:08.757 --> 00:06:11.990
that you have over that wrapped object.

93
00:06:13.180 --> 00:06:14.540
And why are we seeing this?

94
00:06:16.330 --> 00:06:22.482
One of these traps is important for
us, set.

95
00:06:22.482 --> 00:06:27.540
Because set means that someone is
changing the value of a property.

96
00:06:27.540 --> 00:06:29.620
And what do we have here?

97
00:06:29.620 --> 00:06:33.220
Remember our store that
has two properties?

98
00:06:33.220 --> 00:06:37.527
What if we set the proxy and detect
whenever someone is changing the menu or

99
00:06:37.527 --> 00:06:39.970
whenever someone's changing the cart?

100
00:06:41.840 --> 00:06:48.378
If we do that then,
we can trigger updates in the UI.

101
00:06:48.378 --> 00:06:49.250
Makes sense?

102
00:06:49.250 --> 00:06:52.000
So we can say, hey,
someone has changed the menu.

103
00:06:52.000 --> 00:06:53.370
Someone has changed the cart.

104
00:06:53.370 --> 00:06:57.112
There is a new element or someone
has removed something from the cart.

105
00:06:57.112 --> 00:06:59.190
And we can trigger updates.

106
00:07:00.740 --> 00:07:04.760
So we can implement this kind
of reactive programming.

107
00:07:04.760 --> 00:07:08.155
Yeah, it doesn't look like Angular or
Vue or React, but

108
00:07:08.155 --> 00:07:11.290
they're using the same
techniques behind scenes.

109
00:07:12.850 --> 00:07:17.020
In fact, you can use libraries for
reactivity such as our RxJS.

110
00:07:17.020 --> 00:07:20.820
It's a library that offers you
more control over this, but

111
00:07:20.820 --> 00:07:22.880
we are using Vanilla.js here.

112
00:07:24.380 --> 00:07:31.540
So what if we create the proxy,
we can call this a proxy store,

113
00:07:31.540 --> 00:07:37.048
and we say that it's a new
proxy of that store and

114
00:07:37.048 --> 00:07:43.737
then a handler, Okay?

115
00:07:43.737 --> 00:07:48.079
And now, look at this,
instead of exporting the store, and

116
00:07:48.079 --> 00:07:52.440
this is similar to the idea of
a high order function in React.

117
00:07:53.700 --> 00:07:57.340
We can just export the proxy store.

118
00:07:57.340 --> 00:07:59.680
So the real store is kind of private.

119
00:08:01.390 --> 00:08:07.879
Everyone that wants to talk with our
store will do that through their proxy.

120
00:08:07.879 --> 00:08:09.860
Make sense?

121
00:08:09.860 --> 00:08:15.712
And on that proxy, we can, for
example, implement the trap for set.

122
00:08:15.712 --> 00:08:19.465
Set receives three arguments,

123
00:08:19.465 --> 00:08:24.330
the target object that is being changed,

124
00:08:24.330 --> 00:08:29.350
the property name, and the value, okay?

125
00:08:29.350 --> 00:08:35.590
In our case, we don't wanna validate data,
so it's not our purpose right now.

126
00:08:36.590 --> 00:08:42.560
So the first thing that we wanna do
here is we wanna apply the change.

127
00:08:42.560 --> 00:08:46.844
So we're going to say for the target
on that property, we're going to

128
00:08:46.844 --> 00:08:51.670
actually assign the value because we
are not creating a proxy for validation.

129
00:08:51.670 --> 00:08:55.104
We are getting a proxy for updating UI,

130
00:08:55.104 --> 00:08:59.620
broadcasting that someone
has been changed.

131
00:08:59.620 --> 00:09:03.782
There are many ways to
solve the next problem,

132
00:09:03.782 --> 00:09:08.488
is how we announce that
the data has changed, okay?

133
00:09:08.488 --> 00:09:12.278
We can implement the observer pattern,

134
00:09:12.278 --> 00:09:17.490
we can receive a callback,
just to mix techniques.

135
00:09:17.490 --> 00:09:22.691
So if the property is menu,
what I want is to

136
00:09:22.691 --> 00:09:27.750
announce that the menu has been changed.

137
00:09:29.040 --> 00:09:30.670
Announce to who?

138
00:09:30.670 --> 00:09:33.180
I don't know, whoever wants to know that.

139
00:09:33.180 --> 00:09:35.560
So I'm going to mix techniques here.

140
00:09:35.560 --> 00:09:40.015
And I'm going to dispatch an event over

141
00:09:40.015 --> 00:09:45.010
the window object,
a new event with a name.

142
00:09:46.950 --> 00:09:49.911
Can I call it change?

143
00:09:49.911 --> 00:09:51.720
What's changing?

144
00:09:51.720 --> 00:09:53.110
I don't know, right?

145
00:09:53.110 --> 00:09:55.470
So maybe menu change.

146
00:09:55.470 --> 00:10:00.450
Yeah, but how will we know in the future
if the window will not have a menu change?

147
00:10:00.450 --> 00:10:01.930
Well, maybe we can prefix that.

148
00:10:03.530 --> 00:10:04.130
It's a string.

149
00:10:04.130 --> 00:10:05.380
You can use any string, okay?

150
00:10:06.620 --> 00:10:08.790
Why window and not document?

151
00:10:08.790 --> 00:10:09.683
Does anyone know?

152
00:10:12.144 --> 00:10:14.140
I can use document as well, yeah?

153
00:10:14.140 --> 00:10:15.720
&gt;&gt; Because we now have two documents?

154
00:10:15.720 --> 00:10:19.444
&gt;&gt; Because we have two documents,
we have shadow DOMs,

155
00:10:19.444 --> 00:10:22.020
each one will have its own document.

156
00:10:22.020 --> 00:10:24.519
The window will be one for the whole app.

157
00:10:25.630 --> 00:10:26.930
This is like a global event.

158
00:10:26.930 --> 00:10:30.809
Again, I'm not saying that you
should do this in this way,

159
00:10:30.809 --> 00:10:34.860
it's one way to announce globally
that the menu has changed.

160
00:10:36.030 --> 00:10:39.110
If the property,
if the cart has switched, and

161
00:10:39.110 --> 00:10:42.960
you will see this in action in a minute,
or in 20 minutes.

162
00:10:44.190 --> 00:10:46.410
And something similar when
the cart has changed.

163
00:10:49.010 --> 00:10:51.650
Change or changed, up to you.

164
00:10:51.650 --> 00:10:54.256
And if you wanna use ED or
not, it's up to you.

165
00:10:56.951 --> 00:11:00.056
And this is important,
set should return true or

166
00:11:00.056 --> 00:11:04.990
false in case that you accepted the set or
not, right, something like that.

167
00:11:04.990 --> 00:11:07.710
So we accept the setter.

168
00:11:09.670 --> 00:11:14.690
But the important part here is that we
are not changing consumers of the store.

169
00:11:14.690 --> 00:11:17.480
We are just returning the proxy.

170
00:11:17.480 --> 00:11:20.344
That's why it's similar to
a high order component,

171
00:11:20.344 --> 00:11:22.390
in case you know that design pattern.

172
00:11:24.130 --> 00:11:26.846
So now everyone that is reading or

173
00:11:26.846 --> 00:11:31.220
storing data in our store
is going through the proxy.

174
00:11:32.230 --> 00:11:35.206
And the proxy will dispatch global or

175
00:11:35.206 --> 00:11:39.337
it will broadcast global
events on these changes.

