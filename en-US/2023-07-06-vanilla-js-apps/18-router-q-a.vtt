WEBVTT

1
00:00:00.650 --> 00:00:06.520
I think it was in menu, we defined
a function using the keyword function.

2
00:00:06.520 --> 00:00:10.443
And then in router,
we're using arrow functions,

3
00:00:10.443 --> 00:00:12.995
I know 90% [INAUDIBLE]
&gt;&gt; Yeah, so

4
00:00:12.995 --> 00:00:16.827
why are we using function here and
not here?

5
00:00:16.827 --> 00:00:20.555
I mean, the main difference here
that this is an object with methods.

6
00:00:21.695 --> 00:00:26.698
This is not an object,
which means that if I wanna convert this

7
00:00:26.698 --> 00:00:31.992
into an async function, I need to
create a variable or a constant and

8
00:00:31.992 --> 00:00:38.632
export that which is okay, this is more
moden, React, hey, something like this and

9
00:00:38.632 --> 00:00:43.740
also not equals, and
maybe I don't need the name, okay?

10
00:00:43.740 --> 00:00:46.834
So, in this case as I mentioned,

11
00:00:46.834 --> 00:00:51.808
I'm doing several design
patterns at the same time,

12
00:00:51.808 --> 00:00:56.354
I'm not recommending one or
the other, right?

13
00:00:56.354 --> 00:00:59.301
&gt;&gt; I was just more curious about like I
know arrow functions does binding a little

14
00:00:59.301 --> 00:01:00.828
bit differently than the keyword,
&gt;&gt; Yeah.

15
00:01:00.828 --> 00:01:04.080
&gt;&gt; And if there's any instance
where maybe it's safer to just,

16
00:01:04.080 --> 00:01:05.421
&gt;&gt; The binding difference has to do with

17
00:01:05.421 --> 00:01:06.075
the this object.

18
00:01:06.075 --> 00:01:07.542
&gt;&gt; Yeah.

19
00:01:07.542 --> 00:01:10.242
&gt;&gt; In this case,
because I'm not in an object,

20
00:01:10.242 --> 00:01:12.600
it is not going to make any difference.

21
00:01:12.600 --> 00:01:18.296
The problem is that when you are in
an object, like in this case,

22
00:01:18.296 --> 00:01:23.676
using arrow functions or
the function keyword will change,

23
00:01:23.676 --> 00:01:29.176
let's say the security of this
object within that function.

24
00:01:29.176 --> 00:01:34.529
From the outside, for
example, if I take the init,

25
00:01:34.529 --> 00:01:41.605
I should be able to say init.bind,
and then I can bind you a new this.

26
00:01:41.605 --> 00:01:44.569
If it's an arrow function,
it's not gonna work, but

27
00:01:44.569 --> 00:01:48.886
if it's a function with a keyword, it
will work, and I can change you the this,

28
00:01:48.886 --> 00:01:52.312
I can change you the context,
okay, that's the difference.

29
00:01:52.312 --> 00:01:58.812
For this particular situation, it's not
gonna make any lot of differences, okay?

30
00:01:58.812 --> 00:02:01.419
Do we have any other question in the chat,
I think?

31
00:02:05.425 --> 00:02:08.578
&gt;&gt; The menu is not modular
as it is right now,

32
00:02:08.578 --> 00:02:13.550
because it uses App as a dependency,
is this because of closure?

33
00:02:14.790 --> 00:02:18.220
&gt;&gt; In this case, well,
if you look at menu.

34
00:02:18.220 --> 00:02:23.180
Menu is not using, you're talking about
this App, okay, I get the question now.

35
00:02:23.180 --> 00:02:28.490
In this case here, that's correct, how
to solve the problem, abstraction layer.

36
00:02:28.490 --> 00:02:30.461
And again, as I mentioned before,

37
00:02:30.461 --> 00:02:34.604
I don't wanna add too many abstraction
layers at once because sometimes you

38
00:02:34.604 --> 00:02:40.000
don't get what's the abstraction layer and
what's the API or what's the technique.

39
00:02:40.000 --> 00:02:45.121
But in this case the way to solve that
is to, with different design patterns

40
00:02:45.121 --> 00:02:50.569
such as a factory or an abstract factory
and then you have an abstraction layer,

41
00:02:50.569 --> 00:02:53.935
so then load data doesn't
need to call App store.

42
00:02:55.195 --> 00:02:59.387
It can, one way to solve the problem is

43
00:02:59.387 --> 00:03:04.605
through events, callbacks, Dom events.

44
00:03:04.605 --> 00:03:10.497
It can also, instead of doing this,
it can just return the data so

45
00:03:10.497 --> 00:03:16.970
then we pass the responsibility of
storing this in the store back.

46
00:03:16.970 --> 00:03:22.778
And yeah, that's true, but again,
one of the, I don't wanna say problem,

47
00:03:22.778 --> 00:03:28.760
but one of the characteristics of
Vanilla JS is that you're in charge.

48
00:03:28.760 --> 00:03:32.600
So, you can make a lot of
decisions here and yeah,

49
00:03:32.600 --> 00:03:37.814
if we get 10 persons to look at that code,
we will probably receive

50
00:03:37.814 --> 00:03:43.510
30 different opinions, not 10,
30, on how to do this, okay?

51
00:03:43.510 --> 00:03:47.336
Which is okay, it is okay,
and that's why I mentioned,

52
00:03:47.336 --> 00:03:51.641
I already warned you, that we will
mix a lot of techniques here at

53
00:03:51.641 --> 00:03:55.507
once because I don't wanna
push you into one way, okay?

54
00:03:55.507 --> 00:03:58.512
Just pick the way that you prefer.

