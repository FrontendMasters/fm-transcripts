WEBVTT

1
00:00:00.416 --> 00:00:06.474
I think it was in menu, we defined
a function using the keyword function.

2
00:00:06.474 --> 00:00:09.258
And then in router we're
using arrow functions.

3
00:00:09.258 --> 00:00:11.991
I know 90%-
&gt;&gt; What

4
00:00:11.991 --> 00:00:12.763
will-
&gt;&gt; Yeah.

5
00:00:12.763 --> 00:00:16.709
&gt;&gt; So why I'm using function here and
not here, I mean,

6
00:00:16.709 --> 00:00:21.462
the main difference here is that
this is an object with methods.

7
00:00:21.462 --> 00:00:26.356
This is not an object, which means
that if I wanna convert this into an,

8
00:00:26.356 --> 00:00:31.844
in fact I need to create a variable or
a constant and export that, which is okay.

9
00:00:31.844 --> 00:00:39.074
This is more than React, hey,
something like this, and also not equals.

10
00:00:39.074 --> 00:00:43.226
And maybe I don't need the name, okay?

11
00:00:43.226 --> 00:00:47.700
So this case as I
mentioned I'm doing several

12
00:00:47.700 --> 00:00:52.301
design patterns at the same time,
like that.

13
00:00:52.301 --> 00:00:55.313
I'm not recommending one or
the other, right?

14
00:00:55.313 --> 00:00:58.305
&gt;&gt; I was just more curious about like
I know arrow functions as binding

15
00:00:58.305 --> 00:01:00.344
a little bit differently
than the keyboard.

16
00:01:00.344 --> 00:01:00.990
&gt;&gt; Yeah.
&gt;&gt; And

17
00:01:00.990 --> 00:01:03.851
if there's any instance where
maybe it's safer to do.

18
00:01:03.851 --> 00:01:06.081
&gt;&gt; The binding difference has
to do with the lease option.

19
00:01:06.081 --> 00:01:06.844
&gt;&gt; Yeah.

20
00:01:06.844 --> 00:01:09.940
&gt;&gt; In this case,
because I'm not in an object,

21
00:01:09.940 --> 00:01:12.549
it's not going to make a difference.

22
00:01:12.549 --> 00:01:17.982
The problem is that when you're
in an object like in this case,

23
00:01:17.982 --> 00:01:23.414
using arrow functions, or
the function keyword will change,

24
00:01:23.414 --> 00:01:29.066
let's say the security of the this
object within that function.

25
00:01:29.066 --> 00:01:34.333
From the outside, for
example, if I take the init,

26
00:01:34.333 --> 00:01:41.541
I should be able to say init.bind,
and then I can bind you and you this.

27
00:01:41.541 --> 00:01:44.506
If it's a narrow function,
it's not gonna work.

28
00:01:44.506 --> 00:01:48.876
But if it's a function with a keyword, it
will work, and I can change you the, this,

29
00:01:48.876 --> 00:01:50.780
I can change you the context, okay?

30
00:01:50.780 --> 00:01:52.047
That's the difference.

31
00:01:52.047 --> 00:01:57.600
For this particular situation, it's not
gonna make any lot of differences, okay?

32
00:01:57.600 --> 00:02:01.726
Do we have any other question in the chat,
I think.

33
00:02:05.373 --> 00:02:10.225
&gt;&gt; The menu is not modular as
it is right now because it uses

34
00:02:10.225 --> 00:02:14.454
app as a dependency is
this because of closure?

35
00:02:14.454 --> 00:02:18.611
&gt;&gt; In this case, well, the menu if
you look at menu, menu is not using,

36
00:02:18.611 --> 00:02:20.566
are you talking about this app?

37
00:02:20.566 --> 00:02:22.740
Okay, I get the question now.

38
00:02:22.740 --> 00:02:24.589
In this case, yeah, that's correct.

39
00:02:24.589 --> 00:02:26.758
How to solve the problem?

40
00:02:26.758 --> 00:02:27.998
An abstraction layer.

41
00:02:27.998 --> 00:02:32.897
And again, as I mentioned before, I don't
wanna add too many abstraction layers at

42
00:02:32.897 --> 00:02:37.244
once, because sometimes you don't
get what's the abstraction layer and

43
00:02:37.244 --> 00:02:39.732
what's the API or what's the technique.

44
00:02:39.732 --> 00:02:44.690
But in this case the way to solve that is
to like with different design patterns,

45
00:02:44.690 --> 00:02:47.288
such as a factory or an abstract factory.

46
00:02:47.288 --> 00:02:50.883
And then you are an abstraction layer, so

47
00:02:50.883 --> 00:02:54.898
then low data doesn't
need to call app store.

48
00:02:54.898 --> 00:02:59.265
It can, one way to solve the problem is

49
00:02:59.265 --> 00:03:04.326
through events, callbacks, DOM events.

50
00:03:04.326 --> 00:03:10.107
It can also instead of doing this,
it can just return the data.

51
00:03:10.107 --> 00:03:14.419
So then we pass
the responsibility of storing

52
00:03:14.419 --> 00:03:19.301
these in the store back,
and yeah, that's true.

53
00:03:19.301 --> 00:03:23.452
But again, one of the [SOUND]
I don't wanna say problem but

54
00:03:23.452 --> 00:03:28.398
one of the characteristics of
Vanilla JS is that you're in charge.

55
00:03:28.398 --> 00:03:31.395
So you can make a lot of decisions here.

56
00:03:31.395 --> 00:03:35.632
And yeah,
if we get 10 persons to look at that code,

57
00:03:35.632 --> 00:03:40.625
we will probably receive 30
different opinions, not 10,

58
00:03:40.625 --> 00:03:43.183
30, on how to do this, okay?

59
00:03:43.183 --> 00:03:49.343
Which is okay, and that's why I mentioned,
I already warned you, that we will mix

60
00:03:49.343 --> 00:03:55.504
a lot of techniques here at once because I
don't wanna push you into one way, okay?

61
00:03:55.504 --> 00:03:58.734
Just pick the way that you prefer.

62
00:03:58.734 --> 00:04:04.158
Okay, so
one more thing init that we should do is,

63
00:04:04.158 --> 00:04:12.184
when we are initializing the app is to
check the initial URL, why is that?

64
00:04:12.184 --> 00:04:17.784
Because maybe the user is loading
the app directly in /cart.

65
00:04:17.784 --> 00:04:22.385
So maybe we don't wanna start
always with the homescreen.

66
00:04:22.385 --> 00:04:24.242
Remember that we are a single
page application.

67
00:04:24.242 --> 00:04:27.428
Now, even if it's the same index HTML,

68
00:04:27.428 --> 00:04:32.020
maybe the user is directly
because the user has has copy and

69
00:04:32.020 --> 00:04:37.845
pasted the URL, or someone send you
a text with a URL and it's a deep link.

70
00:04:37.845 --> 00:04:42.777
And to do deep linking into
a single-page application means that we

71
00:04:42.777 --> 00:04:47.794
should start here, checking
the current path name of the location,

72
00:04:47.794 --> 00:04:52.568
that's the current URL, and
asking the router to go to that URL.

73
00:04:52.568 --> 00:04:56.851
So based on the current URL,
it will load the homepage,

74
00:04:56.851 --> 00:05:00.233
the order menu, or other sections, okay?

75
00:05:00.233 --> 00:05:01.459
Make sense?

76
00:05:01.459 --> 00:05:06.582
Again, this is not still
doing anything in the DOM,

77
00:05:06.582 --> 00:05:09.269
and that's the next step.

78
00:05:09.269 --> 00:05:12.826
So the next step is you
actually do something, where?

79
00:05:12.826 --> 00:05:17.676
In Go, so we are going to
write a lot of code here now.

80
00:05:17.676 --> 00:05:21.463
And again, the code that I'm going to
write is actually not reusable for

81
00:05:21.463 --> 00:05:22.155
other apps.

82
00:05:22.155 --> 00:05:26.381
Because I wanna go step by step, and
then you can add abstraction layers,

83
00:05:26.381 --> 00:05:28.711
you can create your own menu framework.

84
00:05:28.711 --> 00:05:35.071
So then you can create the router
that is multi-solution, multi-app.

85
00:05:35.071 --> 00:05:39.299
Or you can use a library,
there are a lot of mini libraries that

86
00:05:39.299 --> 00:05:42.891
are solving this with just
maybe 1K of JavaScript.

87
00:05:42.891 --> 00:05:49.776
Instead of using a big framework, you can
just take a library, just for this part.

88
00:05:49.776 --> 00:05:54.654
So one of the things that we will
check is that we wanna add to history.

89
00:05:54.654 --> 00:05:56.805
So that's the second argument.

90
00:05:56.805 --> 00:05:59.813
If we wanna add to history,
we need to add to history.

91
00:05:59.813 --> 00:06:04.104
And for that,
we're going to use push state.

92
00:06:04.104 --> 00:06:07.305
And you can see here that I was online,

93
00:06:07.305 --> 00:06:11.617
that the second argument is called unused,
okay?

94
00:06:11.617 --> 00:06:15.872
So anyway, you can pass an empty string,
or null, or anything will work.

95
00:06:15.872 --> 00:06:17.887
And the first one is data.

96
00:06:17.887 --> 00:06:22.423
That says any, by the way, that's kind
of a TypeScript annotation, okay?

97
00:06:22.423 --> 00:06:24.079
Any means anything.

98
00:06:24.079 --> 00:06:31.259
So we can pass, for example, an object
that will include the route inside.

99
00:06:31.259 --> 00:06:34.200
And later, we can add more metadata.

100
00:06:34.200 --> 00:06:39.232
For example,
we can pass on a scroll position.

101
00:06:39.232 --> 00:06:42.741
So then when we go back,
we know where the scroll,

102
00:06:42.741 --> 00:06:45.931
we can make a lot of
interesting things here.

103
00:06:45.931 --> 00:06:49.080
But right now we can pass just the route,
and

104
00:06:49.080 --> 00:06:53.095
passing this as an object,
so it's more future proof.

105
00:06:53.095 --> 00:06:55.424
I mean,
I got both shots the route directly,

106
00:06:55.424 --> 00:06:57.398
I only had object wrapping the route.

107
00:06:57.398 --> 00:07:01.019
But yeah, maybe in the future
we will have more things.

108
00:07:01.019 --> 00:07:04.476
An empty string or no for unused.

109
00:07:04.476 --> 00:07:07.938
And then the URL that is
in this case the route.

