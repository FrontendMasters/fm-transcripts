WEBVTT

1
00:00:00.490 --> 00:00:04.440
So now if I go to the home, I go to order.

2
00:00:04.440 --> 00:00:08.630
If you look at the URL, it says /order.

3
00:00:10.060 --> 00:00:13.740
Do we have that order file on the server?

4
00:00:13.740 --> 00:00:14.240
No.

5
00:00:15.300 --> 00:00:17.490
We can just fake the URL.

6
00:00:17.490 --> 00:00:18.900
That's history.pushState.

7
00:00:19.960 --> 00:00:22.110
You can parse anything here.

8
00:00:22.110 --> 00:00:24.238
And that's what you will see in the URL.

9
00:00:24.238 --> 00:00:29.520
You can even parse I will change this,
something like this,

10
00:00:29.520 --> 00:00:34.190
something/something-else/ and
then the route.

11
00:00:34.190 --> 00:00:38.050
And that's what you're
going to see in the URL.

12
00:00:40.000 --> 00:00:41.430
So, look at the URL now.

13
00:00:42.840 --> 00:00:45.350
Something/something-else.

14
00:00:45.350 --> 00:00:46.710
You are just faking.

15
00:00:47.770 --> 00:00:48.550
And it works.

16
00:00:48.550 --> 00:00:53.150
The relative will take whatever
string we pass as the URL.

17
00:00:55.790 --> 00:00:57.820
So it's actually interesting.

18
00:00:57.820 --> 00:00:58.931
So what do we need to do?

19
00:00:58.931 --> 00:01:00.707
Well, we need to use again,

20
00:01:00.707 --> 00:01:05.147
with an obstruction layer on top of
this we can have an array of routes and

21
00:01:05.147 --> 00:01:08.779
loop through an array but
I wanna keep things simple here.

22
00:01:08.779 --> 00:01:14.358
So I can just make a switch
over that route and say, okay,

23
00:01:14.358 --> 00:01:20.065
let's see if it's the forward slash or
else I will order.

24
00:01:20.065 --> 00:01:21.022
So these two first.

25
00:01:24.022 --> 00:01:27.739
I'm gonna do the break
because this is JavaScript.

26
00:01:27.739 --> 00:01:32.414
And what I need to do is to, for
example, do something with the DOM.

27
00:01:32.414 --> 00:01:40.026
Remember, we need to hide and show or
we need to inject new elements.

28
00:01:40.026 --> 00:01:44.580
I will pick for this part of
the workshop to use the technique of

29
00:01:44.580 --> 00:01:48.794
removing the old page and
injecting the new page, okay.

30
00:01:48.794 --> 00:01:53.336
So we're going to remove from the DOM and
put into the DOM.

31
00:01:53.336 --> 00:01:58.481
Where in the HTML for
that I have an empty main element.

32
00:01:58.481 --> 00:02:01.075
That looks pretty good for that, okay.

33
00:02:01.075 --> 00:02:03.709
So I'm going to take that main element and

34
00:02:03.709 --> 00:02:08.390
based on the URL I'm going to inject
DOM elements or remove DOM elements.

35
00:02:08.390 --> 00:02:10.600
It makes sense?

36
00:02:10.600 --> 00:02:15.108
So what I need after the switch, okay?

37
00:02:15.108 --> 00:02:21.070
So after the switch,
what I need is probably to add,

38
00:02:21.070 --> 00:02:23.924
take that main element.

39
00:02:23.924 --> 00:02:28.728
And I'm going to call appendChild
with the element that the switch

40
00:02:28.728 --> 00:02:30.457
has decided to render.

41
00:02:34.208 --> 00:02:34.810
Make sense?

42
00:02:34.810 --> 00:02:39.033
I'm probably going to refactor this
as we are adding more features, but

43
00:02:39.033 --> 00:02:40.568
that's kind of the idea.

44
00:02:40.568 --> 00:02:45.147
And because of that,
maybe we want to create a variable here.

45
00:02:45.147 --> 00:02:47.212
We can call this page element.

46
00:02:47.212 --> 00:02:49.117
We start with null.

47
00:02:49.117 --> 00:02:56.485
And then we append over the main element,
that page element.

48
00:02:56.485 --> 00:03:00.636
So what we need to do is to create
different elements based on the URL.

49
00:03:00.636 --> 00:03:05.600
For now, the first part will be to just

50
00:03:05.600 --> 00:03:09.641
create, for example titles.

51
00:03:09.641 --> 00:03:14.333
How to create an element in HTML,
document.Create.

52
00:03:14.333 --> 00:03:18.716
Create element receives the tag name.

53
00:03:22.464 --> 00:03:26.455
So I'm just creating an h1
that lives only in memory.

54
00:03:26.455 --> 00:03:28.182
Just in memory.

55
00:03:28.182 --> 00:03:33.928
But I can take that element and
change its text content and

56
00:03:33.928 --> 00:03:38.368
I can say,
this is the homepage or the menu.

57
00:03:38.368 --> 00:03:43.065
And for the order I can use something
similar but say this is the order,

58
00:03:43.065 --> 00:03:47.372
your order, we will replace that
later with something better.

59
00:03:50.450 --> 00:03:51.715
Is it done?

60
00:03:51.715 --> 00:03:54.221
Not yet, and
you will see the problem that we have,

61
00:03:54.221 --> 00:03:57.330
that is a pretty common problem
when you're doing VanillaJS.

62
00:03:57.330 --> 00:04:00.605
So that's why one asked
to get into the problem.

63
00:04:00.605 --> 00:04:04.965
So if we try this we can
see something like that,

64
00:04:04.965 --> 00:04:10.197
it says Menu, and if I go to the cart,
it says Your Order,

65
00:04:10.197 --> 00:04:14.134
if I go back here Menu, Your Order, Menu.

66
00:04:14.134 --> 00:04:17.937
This is a pretty common
problem in VanillaJS.

67
00:04:17.937 --> 00:04:20.900
When you are injecting new elements,
what's the problem?

68
00:04:20.900 --> 00:04:23.975
We are not removing the previous one.

69
00:04:23.975 --> 00:04:25.439
Makes sense?

70
00:04:25.439 --> 00:04:33.063
So we need to clear the container
before actually injecting new content.

71
00:04:33.063 --> 00:04:34.550
There are two ways to do that.

72
00:04:34.550 --> 00:04:39.160
The quick and dirty way,
okay, and the other one.

73
00:04:39.160 --> 00:04:44.396
So for this particular example,
both will work.

74
00:04:44.396 --> 00:04:48.794
I will show you both anyway.
Okay, so one way is before appending this

75
00:04:48.794 --> 00:04:52.382
child, clear this out, the quick and

76
00:04:52.382 --> 00:04:57.895
dirty way is we can take the main and
change its inner HTML.

77
00:04:57.895 --> 00:05:03.731
Be careful with capital H-T-M and
L, and just say empty string.

78
00:05:03.731 --> 00:05:08.394
This is a quick and
dirty way to delete everything in

79
00:05:08.394 --> 00:05:14.557
the main, Element.

80
00:05:14.557 --> 00:05:15.964
Why it's quick and dirty?

81
00:05:15.964 --> 00:05:18.011
Yeah, because it's a string, okay.

82
00:05:18.011 --> 00:05:24.858
If we have event listeners we are not
caring what's inside, and yeah.

83
00:05:24.858 --> 00:05:26.063
What is the other way?

84
00:05:26.063 --> 00:05:32.661
Well, the other way that we have is
that we could take the main element and

85
00:05:32.661 --> 00:05:37.434
there is a property that
will get us the child nodes.

86
00:05:37.434 --> 00:05:38.340
And also, we have children.

87
00:05:38.340 --> 00:05:41.470
What's the difference between
childNodes and children?

88
00:05:41.470 --> 00:05:42.273
Looks similar.

89
00:05:42.273 --> 00:05:46.974
Well, children will give you
an HTML collection, and childNodes,

90
00:05:46.974 --> 00:05:49.656
it's a NodeList of words blah, blah.

91
00:05:49.656 --> 00:05:50.542
What's the difference?

92
00:05:50.542 --> 00:05:57.690
ChildNodes will also give you comments
as objects and text assumption.

93
00:05:57.690 --> 00:06:01.095
For example, if I have here,
I have a node.

94
00:06:01.095 --> 00:06:03.444
It's the empty text.

95
00:06:03.444 --> 00:06:05.628
Even the newline character.

96
00:06:05.628 --> 00:06:10.857
So I'm talking about the difference
about this and this.

97
00:06:10.857 --> 00:06:16.864
Here I do have a node inside the list,
like a lot of spaces and characters.

98
00:06:16.864 --> 00:06:17.690
So I don't want that.

99
00:06:17.690 --> 00:06:22.846
I just want DOM elements so that's why
we use children and not childNodes.

100
00:06:22.846 --> 00:06:28.764
So anyway, you say children and sub
zero if we have one, so we should check

101
00:06:28.764 --> 00:06:34.118
if we have one, is the first DOM
element and we can ask for removal.

102
00:06:38.431 --> 00:06:42.581
Again, just showing you how
to live different ways.

103
00:06:42.581 --> 00:06:46.214
And by the way, can you see that we
are making the same inquiry twice.

104
00:06:46.214 --> 00:06:47.316
Well, we can cache that.

105
00:06:47.316 --> 00:06:47.986
How?

106
00:06:47.986 --> 00:06:51.132
Creating a variable or a constant.

107
00:06:51.132 --> 00:06:54.057
That is not really a constant,
it's an immutable variable, but that's for

108
00:06:54.057 --> 00:06:54.597
another day.

109
00:06:54.597 --> 00:06:58.299
So we do something like this, and

110
00:06:58.299 --> 00:07:03.333
that will improve
a little bit performance.

111
00:07:03.333 --> 00:07:08.097
For this example, it's not a big deal, and
some browsers are also optimizing this.

112
00:07:08.097 --> 00:07:11.143
So it's not going to change too much.

113
00:07:13.748 --> 00:07:18.855
But now at least when we are changing
the URLs, now it looks a little better.

114
00:07:21.054 --> 00:07:25.415
We still have a problem that what
happens if it goes to default,

115
00:07:25.415 --> 00:07:28.723
because I don't have,
like this will be null.

116
00:07:28.723 --> 00:07:33.195
So maybe we should check if we do
have a page element to render.

117
00:07:34.825 --> 00:07:37.816
If we don't have a page to render,

118
00:07:37.816 --> 00:07:42.467
it's because the router
didn't find a valid route.

119
00:07:42.467 --> 00:07:43.497
There are two options.

120
00:07:43.497 --> 00:07:51.035
Do nothing, send an error to the console,
or create a client-side 404 page.

121
00:07:51.035 --> 00:07:55.135
That will be another component say,
hey there is an error,

122
00:07:55.135 --> 00:07:56.860
that URL does not exist.

123
00:07:56.860 --> 00:07:59.395
Okay, one more small thing.

124
00:07:59.395 --> 00:08:03.818
After appending the child
it's a good idea when

125
00:08:03.818 --> 00:08:07.807
you're doing routers to set the scrollX.

126
00:08:10.164 --> 00:08:14.570
And scrollY to zero.

127
00:08:14.570 --> 00:08:15.864
Why?

128
00:08:15.864 --> 00:08:20.411
Because if not, when you have large
pages with lots of content and

129
00:08:20.411 --> 00:08:22.395
you are scrolling the page,

130
00:08:22.395 --> 00:08:27.615
when you change the route you will
still be at that scroll position, okay?

131
00:08:27.615 --> 00:08:32.493
And we wanna go to the top,
both horizontally and vertically.

