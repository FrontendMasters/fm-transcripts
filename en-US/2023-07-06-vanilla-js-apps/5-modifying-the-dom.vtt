WEBVTT

1
00:00:00.130 --> 00:00:03.102
So for example, if you wanna read or
change attributes of a DOM element,

2
00:00:03.102 --> 00:00:04.430
it's actually pretty simple.

3
00:00:04.430 --> 00:00:06.489
We just use dot syntax.

4
00:00:06.489 --> 00:00:11.175
So there is no need for special syntax,

5
00:00:11.175 --> 00:00:16.003
like using an '@' symbol or using colon.

6
00:00:16.003 --> 00:00:19.337
I mean, depends on different frameworks,
different ways to this, okay, but

7
00:00:19.337 --> 00:00:20.346
it's just dot syntax.

8
00:00:20.346 --> 00:00:26.236
We use JavaScript dot syntax
notation to change properties.

9
00:00:26.236 --> 00:00:31.279
So, and by the way, I'm here simplifying
this a little bit because actually,

10
00:00:31.279 --> 00:00:33.401
it's a little bit more complex.

11
00:00:33.401 --> 00:00:37.725
We have properties and HTML attributes,
and actually not the same.

12
00:00:37.725 --> 00:00:41.227
Later I will show you an example
when this is not exactly the same.

13
00:00:41.227 --> 00:00:44.095
But for now,
this is the first part of the workshop.

14
00:00:44.095 --> 00:00:45.814
Let's simplify this a little bit.

15
00:00:45.814 --> 00:00:50.169
And let's say that when you change the
property of the JavaScript DOM element,

16
00:00:50.169 --> 00:00:53.557
you are kind of changing the attribute,
the HTML attribute.

17
00:00:53.557 --> 00:01:00.258
And 99% of the properties have the same
name as the HTML attribute name.

18
00:01:00.258 --> 00:01:02.090
But there are a couple of exceptions.

19
00:01:02.090 --> 00:01:04.072
For example, class.

20
00:01:04.072 --> 00:01:09.229
Because class, the HTML class attribute,
is class name in JavaScript,

21
00:01:09.229 --> 00:01:13.901
that's because class,
it's a reserved keyword in JavaScript.

22
00:01:13.901 --> 00:01:16.933
So it can't be used as a property name.

23
00:01:16.933 --> 00:01:21.390
The other one is for,
when you have a label in HTML, label for.

24
00:01:21.390 --> 00:01:24.604
In JavaScript, it's not called for,
it's called htmlFor.

25
00:01:24.604 --> 00:01:29.344
And if you're coming from React, you're
probably used to that because React or

26
00:01:29.344 --> 00:01:32.343
other language,
because it's also JavaScript so

27
00:01:32.343 --> 00:01:35.494
they're also changing those properties,
anyway.

28
00:01:35.494 --> 00:01:39.221
To change the styles of a DOM element,

29
00:01:39.221 --> 00:01:43.773
we access the style object
of the DOM element.

30
00:01:43.773 --> 00:01:45.221
I'm talking about that object.

31
00:01:45.221 --> 00:01:49.618
So every DOM element has a style property,
and

32
00:01:49.618 --> 00:01:54.806
that style property have all
the CSS attributes on that

33
00:01:54.806 --> 00:02:00.350
particular browser available
as a JavaScript property.

34
00:02:00.350 --> 00:02:03.965
And in this case, have in mind,
we need to change the kebab syntax.

35
00:02:03.965 --> 00:02:09.638
That's the one with a hyphen, for
example, font-size or border-right-color.

36
00:02:09.638 --> 00:02:12.928
We change that to camel case, okay?

37
00:02:12.928 --> 00:02:16.349
So capital R, capital C, capital S.

38
00:02:16.349 --> 00:02:21.601
And again, most of the libraries that
you're used to are already doing that.

39
00:02:21.601 --> 00:02:23.885
So that's probably not new, okay?

40
00:02:23.885 --> 00:02:27.313
Because we cannot use a hyphen
in JavaScript in a property.

41
00:02:27.313 --> 00:02:30.461
That's why they had to make that change.

42
00:02:30.461 --> 00:02:36.300
And to listen for events,
we typically use addEventListener.

43
00:02:36.300 --> 00:02:42.777
The name of the event as a string and
a function, okay?

44
00:02:42.777 --> 00:02:44.167
So we take an element.

45
00:02:44.167 --> 00:02:45.301
It can be a button.

46
00:02:45.301 --> 00:02:46.851
It can be the whole document.

47
00:02:46.851 --> 00:02:50.877
It can be the window,
a list, a ul, anything,

48
00:02:50.877 --> 00:02:55.930
any object in the DOM structure
can have an event listener.

49
00:02:55.930 --> 00:02:58.952
It's addEventListener, event name.

50
00:02:58.952 --> 00:03:01.610
And then the handler, the function,

51
00:03:01.610 --> 00:03:05.361
can be a function that you declare there,
like this.

52
00:03:05.361 --> 00:03:10.557
It can be like a little function
that is typically pretty common.

53
00:03:10.557 --> 00:03:11.854
And, of course,

54
00:03:11.854 --> 00:03:16.877
these days you can use arrow functions
to declare the event handler.

55
00:03:16.877 --> 00:03:22.042
And the event handler receives
an argument with event metadata.

56
00:03:22.042 --> 00:03:24.188
We will use that later.

57
00:03:24.188 --> 00:03:27.077
But if you're not going to use it,

58
00:03:27.077 --> 00:03:32.755
you don't even need to define that
because this is JavaScript, and

59
00:03:32.755 --> 00:03:39.246
you're not forced to define labels or
variable names for all the arguments.

60
00:03:39.246 --> 00:03:42.053
Okay, so
you can just do something like this.

61
00:03:42.053 --> 00:03:49.476
And this is how, typically, event
handlers look like in JavaScript, okay?

62
00:03:49.476 --> 00:03:56.192
So, to access and edit the contents
of an HTML, so you have a paragraph.

63
00:03:56.192 --> 00:04:01.183
In the text of the paragraph,
you can change the text

64
00:04:01.183 --> 00:04:05.617
content property, the inner HTML property.

65
00:04:05.617 --> 00:04:08.935
The difference is that the first
one does not support HTML.

66
00:04:08.935 --> 00:04:15.646
So if you write HTML, you will
actually convert the less than and

67
00:04:15.646 --> 00:04:22.122
greater than symbols into
a Unicode representation in HTML.

68
00:04:22.122 --> 00:04:26.479
So you will actually see the HTML,
the user will see the HTML code.

69
00:04:26.479 --> 00:04:30.496
InnerHTML will actually
let you define HTML,

70
00:04:30.496 --> 00:04:36.779
you can define the whole web page in
an inner HTML property as a string, or

71
00:04:36.779 --> 00:04:43.286
you can use the DOM APIs to create new
nodes and we will see all the versions.

72
00:04:43.286 --> 00:04:46.315
We will play with all these
versions later, okay?

73
00:04:46.315 --> 00:04:51.650
So for example, in this case,
I'm getting an element by its ID,

74
00:04:51.650 --> 00:04:56.601
but using querySelector,
I know its ID because it's hash.

75
00:04:56.601 --> 00:05:03.419
So this is a CSS way to get an ID,
and I can read the text content,

76
00:05:03.419 --> 00:05:08.720
or I can change the text
content of that element.

77
00:05:08.720 --> 00:05:11.423
Very simple, it's just a property.

78
00:05:11.423 --> 00:05:13.958
With innerHTML, it's just the same.

79
00:05:13.958 --> 00:05:16.461
The difference is that
we can write the HTML.

80
00:05:16.461 --> 00:05:21.727
And most of the time these days, we use
the template strings of the backtick

81
00:05:21.727 --> 00:05:26.251
in JavaScript that will let us
even write multi-line strings.

82
00:05:26.251 --> 00:05:33.477
So I can write HTML, like so, like if
it's an HTML file directly in JavaScript.

83
00:05:33.477 --> 00:05:36.764
This is not JSX, okay,
because this is within a string,

84
00:05:36.764 --> 00:05:38.483
it's still a string, okay?

85
00:05:38.483 --> 00:05:42.773
But anyway, it kind of looks like JSX,

86
00:05:42.773 --> 00:05:48.234
the only problem is that
no one is going to validate

87
00:05:48.234 --> 00:05:53.579
if what we have inside
the string is valid or not.

88
00:05:53.579 --> 00:05:58.994
And with DOM API,
using the DOM API looks more verbose.

89
00:05:58.994 --> 00:06:01.152
So for example, in this case,

90
00:06:01.152 --> 00:06:05.142
we can create an H1 with
document.createElement H1.

91
00:06:05.142 --> 00:06:10.573
This is creating a new element,
a new h1 element in memory only for now.

92
00:06:10.573 --> 00:06:15.314
Then we change the text content
of that h1 in memory and

93
00:06:15.314 --> 00:06:20.054
we append that as a child to the element,
in this case,

94
00:06:20.054 --> 00:06:23.059
a header inside a section, okay?

95
00:06:23.059 --> 00:06:30.073
When we use appendChild,
In that case, it appears in the DOM.

96
00:06:30.073 --> 00:06:34.372
Not yet in the UI because we
are still executing code, okay?

97
00:06:34.372 --> 00:06:40.148
So when this thread is released, here,
when there is no more code to execute.

98
00:06:40.148 --> 00:06:44.635
In that case, the browser will say,
okay, let's see, we have a new h1.

99
00:06:44.635 --> 00:06:47.949
Let's render that, okay?

100
00:06:47.949 --> 00:06:51.274
And then we create another one,
in this case,

101
00:06:51.274 --> 00:06:56.752
a paragraph with its own text and we
are adding that also to the same element.

102
00:06:56.752 --> 00:07:03.948
So now we will end up with the same code
as this one, innerHTML, but differently.

103
00:07:03.948 --> 00:07:08.867
In this case, we wrote the h1 and
the paragraph as a string and

104
00:07:08.867 --> 00:07:14.844
this is going to be parsed by the browser
and it will create the nodes for me.

105
00:07:14.844 --> 00:07:20.073
Here, we are writing a string and
then the browser will pass that and

106
00:07:20.073 --> 00:07:23.113
it will create the DOM elements for me.

107
00:07:23.113 --> 00:07:26.411
And here I'm creating
the elements manually.

108
00:07:26.411 --> 00:07:29.464
Every technique has pros and cons, okay?

109
00:07:29.464 --> 00:07:31.360
Later we will use both and

110
00:07:31.360 --> 00:07:35.977
you will understand which one
is better for each situation.

111
00:07:35.977 --> 00:07:39.981
I'm not saying you need to
always use this one or that one,

112
00:07:39.981 --> 00:07:42.451
it's typically based on the case.

