WEBVTT

1
00:00:00.240 --> 00:00:04.600
But now it's time to fill these pages
with something more interesting.

2
00:00:04.600 --> 00:00:08.454
And that's the time to cover one
of the big topics of today, but

3
00:00:08.454 --> 00:00:12.980
you will see it's not difficult,
that's Web Components.

4
00:00:12.980 --> 00:00:17.259
We're going to make each
page its own component.

5
00:00:17.259 --> 00:00:21.862
Instead of just writing HTML,
instead of h1, we could just,

6
00:00:21.862 --> 00:00:26.485
put everything there, but
it's better to create a component.

7
00:00:26.485 --> 00:00:28.275
What's a Web Component?

8
00:00:28.275 --> 00:00:32.405
A modular reusable building block for
web development.

9
00:00:32.405 --> 00:00:37.803
It encapsulates a set of related
functionality and user interface elements.

10
00:00:37.803 --> 00:00:42.154
If you're coming from a library,
you know what a component is.

11
00:00:42.154 --> 00:00:47.058
Most of the UI libraries out there,
they're using the same concept, React,

12
00:00:47.058 --> 00:00:49.896
Angular, they all have components, okay?

13
00:00:49.896 --> 00:00:53.149
So on some libraries we also have

14
00:00:53.149 --> 00:00:57.972
components that are not
user interface based.

15
00:00:57.972 --> 00:01:01.068
Mostly on React, for example,
you have high order components.

16
00:01:01.068 --> 00:01:06.605
Another idea here is more
related to user interface.

17
00:01:06.605 --> 00:01:10.685
You can also create components
without user interface,

18
00:01:10.685 --> 00:01:14.685
it's possible, but not so
common for web components.

19
00:01:14.685 --> 00:01:19.798
So in short, it's your own custom
HTML tag element, that's the idea.

20
00:01:19.798 --> 00:01:23.675
So we can create our own HTML elements.

21
00:01:23.675 --> 00:01:27.637
Web Components is actually today
compatible with every browser.

22
00:01:27.637 --> 00:01:32.946
So that wasn't the case five years ago,
but it is right now.

23
00:01:32.946 --> 00:01:38.995
It's not actually one standard or
one spec, so it's like an umbrella term.

24
00:01:38.995 --> 00:01:44.198
Actually we have a set of standards
that can work separately or

25
00:01:44.198 --> 00:01:48.912
together, and
that's what we know as a web component.

26
00:01:48.912 --> 00:01:55.399
The first one is known as custom elements,
we will go one by one in details.

27
00:01:55.399 --> 00:02:00.103
HTML Templates, Shadow DOM,
and there is another one

28
00:02:00.103 --> 00:02:04.508
called Declarative Shadow DOM
that we won't use.

29
00:02:04.508 --> 00:02:08.788
Because it's really new in
terms of full compatibility,

30
00:02:08.788 --> 00:02:12.381
that means Safari has just
added support for it.

31
00:02:12.381 --> 00:02:19.437
So maybe we still need to wait a little
bit to get more Safari users into it.

32
00:02:19.437 --> 00:02:23.693
It's actually similar to the idea of
components of most of the libraries.

33
00:02:23.693 --> 00:02:27.620
And here comes the part that
some of you won't like,

34
00:02:27.620 --> 00:02:32.091
we have freedom of choice on how
to define them and use them.

35
00:02:32.091 --> 00:02:35.658
There is no single way to
create the Web Component.

36
00:02:35.658 --> 00:02:39.564
You understand the four, or
the three APIs that we will use,

37
00:02:39.564 --> 00:02:42.946
Custom Elements, Templates and
Shadow DOM, why?

38
00:02:42.946 --> 00:02:47.037
When you understand those, you're free to

39
00:02:47.037 --> 00:02:52.021
decide how to set up them,
how to define them, okay?

40
00:02:52.021 --> 00:02:54.479
So let's start with Custom Element.

41
00:02:54.479 --> 00:02:59.156
Custom Element is a way to define a new
reusable HTML element with custom behavior

42
00:02:59.156 --> 00:03:01.446
and functionality using JavaScript.

43
00:03:01.446 --> 00:03:08.518
But basically, it's the one that register
within the browser a new tag name, okay?

44
00:03:08.518 --> 00:03:12.451
That's all, this is how it works,
it's not really complicated.

45
00:03:12.451 --> 00:03:17.735
We need to create the class with a name,
any name will work, extending

46
00:03:17.735 --> 00:03:23.484
from HTMLElement, that's the interface
that is the base of DOM elements.

47
00:03:23.484 --> 00:03:29.021
And not just HTMLElement, you can extend
from HTMLHeadingElement, TableElement.

48
00:03:29.021 --> 00:03:33.948
So you can extend from anyone,
OOP, object-oriented programming,

49
00:03:33.948 --> 00:03:35.763
you are inheriting from.

50
00:03:35.763 --> 00:03:39.525
You typically have a constructor
that must call super.

51
00:03:39.525 --> 00:03:42.396
And that's all in terms of the class.

52
00:03:42.396 --> 00:03:47.749
And then you use the customElements API,
that is a global object

53
00:03:47.749 --> 00:03:53.713
in compatible browsers, where you
define an element name as a string.

54
00:03:53.713 --> 00:03:58.241
And the class,
that is your class name, that's all.

55
00:03:58.241 --> 00:04:03.432
After you do that, you are free to
use that element in HTML directly or

56
00:04:03.432 --> 00:04:05.951
to create one using the DOM APIs.

57
00:04:08.499 --> 00:04:11.149
So it's not complicated.

58
00:04:11.149 --> 00:04:16.550
So maybe you're thinking, but
I like React with functions,

59
00:04:16.550 --> 00:04:22.444
and yeah, well, here it must be
a class extending HTMLElement, okay?

60
00:04:22.444 --> 00:04:28.310
But you can create a factory
function that returns one of those.

61
00:04:28.310 --> 00:04:32.149
So again,
in terms of simplicity of the API,

62
00:04:32.149 --> 00:04:36.708
you can make it simpler if you want to,
if you need to.

63
00:04:36.708 --> 00:04:41.465
So one important thing that you
saw there is that the tag that

64
00:04:41.465 --> 00:04:45.666
we define must contain a hyphen,
it's mandatory.

65
00:04:45.666 --> 00:04:48.598
And this is to assure
future compatibility.

66
00:04:48.598 --> 00:04:53.498
Because if we call it,
I don't know, country selector,

67
00:04:53.498 --> 00:04:58.998
whatever, well, that's too word,
but let's say countries,

68
00:04:58.998 --> 00:05:04.205
how can we sure that HTML8 will
not have a countries HTML tag?

69
00:05:04.205 --> 00:05:06.967
So we cannot be sure for the future, and

70
00:05:06.967 --> 00:05:11.092
the idea is to create content
that will be future-proof.

71
00:05:11.092 --> 00:05:13.843
And the way to do that is the hyphen.

72
00:05:13.843 --> 00:05:19.481
It's like the W3C said, in the future,
we won't define HTML tags with a hyphen.

73
00:05:19.481 --> 00:05:25.454
So if it has a hyphen, it's a custom
thing, okay, that's the idea.

74
00:05:25.454 --> 00:05:29.879
So these elements can contain attributes,
and

75
00:05:29.879 --> 00:05:34.532
typically we define
the attributes with data-.

76
00:05:34.532 --> 00:05:39.374
So for example, I can have an element
with a language property or

77
00:05:39.374 --> 00:05:42.527
attribute, and we use data-language.

78
00:05:42.527 --> 00:05:47.327
And from inside,
we just use dataset, that object,

79
00:05:47.327 --> 00:05:50.325
that API, to access the values.

80
00:05:50.325 --> 00:05:54.333
It's an object, okay,
we are the element now.

81
00:05:57.119 --> 00:06:01.760
There is a lifecycle that is simpler
compared with other frameworks or

82
00:06:01.760 --> 00:06:03.815
libraries, but there is one.

83
00:06:03.815 --> 00:06:08.887
Well, we have the constructor where we
typically set up the initial state and

84
00:06:08.887 --> 00:06:10.690
event listeners for this.

85
00:06:10.690 --> 00:06:14.014
And then we have connectedCallback.

86
00:06:14.014 --> 00:06:19.569
The terminology is kind of weird
compared with other frameworks.

87
00:06:19.569 --> 00:06:23.603
But this is actually when the element
is added to the document.

88
00:06:23.603 --> 00:06:27.811
So this is where we know that our
component is now in the document.

89
00:06:27.811 --> 00:06:30.986
And because we have connectedCallback,
we have disconnectedCallback.

90
00:06:30.986 --> 00:06:33.308
We have a question, yeah.

91
00:06:33.308 --> 00:06:39.494
&gt;&gt; Is there a way to send an object or
something without having

92
00:06:39.494 --> 00:06:44.682
to serialize it,
to add it to the Web Component?

93
00:06:44.682 --> 00:06:46.478
&gt;&gt; You're talking about this here.

94
00:06:46.478 --> 00:06:49.133
The question is that,

95
00:06:49.133 --> 00:06:55.154
if the situation happens in HTML or
in JavaScript.

96
00:06:55.154 --> 00:06:59.043
If it happens in JavaScript,
because it's an object and

97
00:06:59.043 --> 00:07:03.268
you are extending from,
you can create your own properties.

98
00:07:03.268 --> 00:07:08.918
And even now on modern JavaScript,
you can even have a private property and

99
00:07:08.918 --> 00:07:12.334
then setters and
getters and all that stuff.

100
00:07:12.334 --> 00:07:17.270
The problem is with HTML,
HTML only accepts strings.

101
00:07:17.270 --> 00:07:21.093
So if you are going to
write that property,

102
00:07:21.093 --> 00:07:25.992
that added in HTML,
you must express that as a string.

103
00:07:25.992 --> 00:07:31.666
So you can't use something like JSX
where you open curly braces and

104
00:07:31.666 --> 00:07:37.047
you put the Bible inside,
in this case, HTML must be a string.

105
00:07:37.047 --> 00:07:41.769
But from a JavaScript point of view,
because it's a class, so in this class,

106
00:07:41.769 --> 00:07:45.218
you can add normal properties,
JavaScipt properties.

107
00:07:45.218 --> 00:07:48.278
And they can be functions,
they can be whatever you want,

108
00:07:48.278 --> 00:07:50.907
but you won't be able to
define values from HTML.

109
00:07:54.016 --> 00:07:58.378
So for the lifecycle,
then connectedCallback, to be honest,

110
00:07:58.378 --> 00:08:01.304
is the one that we will
use most of the time.

111
00:08:01.304 --> 00:08:05.741
Actually, what we are doing is we are
overriding that function from the super

112
00:08:05.741 --> 00:08:09.852
class on the super class is empty,
so we don't even need to call super.

113
00:08:09.852 --> 00:08:12.211
You can, [LAUGH] but it's empty.

114
00:08:12.211 --> 00:08:17.449
It's just like a hook that we
have within custom elements to

115
00:08:17.449 --> 00:08:23.859
do something when that component enters
the DOM or removed from the DOM.

116
00:08:23.859 --> 00:08:27.012
adoptedCallback, it's a weird name,

117
00:08:27.012 --> 00:08:33.052
this is when your component is moving
from one document to another document.

118
00:08:33.052 --> 00:08:38.448
And at first, we don't understand
how's that a possibility, okay?

119
00:08:38.448 --> 00:08:45.076
So it's not like we're moving from one
tab to another tab in the browser.

120
00:08:45.076 --> 00:08:47.723
Because in that case we're talking
about two different navigations,

121
00:08:47.723 --> 00:08:48.702
two different contexts.

122
00:08:48.702 --> 00:08:52.442
It's not that,
it's not drag and drop as well,

123
00:08:52.442 --> 00:08:56.831
it has to do with the next step
known as DOM shadow, okay?

124
00:08:56.831 --> 00:09:00.443
We will get there,
you will understand what option is there.

125
00:09:00.443 --> 00:09:05.014
So then we have attributeChangedCallback
that is pretty simple to

126
00:09:05.014 --> 00:09:07.145
understand based on the name.

127
00:09:07.145 --> 00:09:13.466
So every time there is a change in an
attribute, that function will be executed.

128
00:09:13.466 --> 00:09:16.393
And you will receive the name of
the attribute, the old value, and

129
00:09:16.393 --> 00:09:17.080
the new value.

130
00:09:19.171 --> 00:09:25.732
Okay, and
also we have something known as a slot.

131
00:09:25.732 --> 00:09:30.483
In our case, we won't use too much,
what's the slot?

132
00:09:30.483 --> 00:09:35.935
The slot is what, for example,
is called children or

133
00:09:35.935 --> 00:09:39.337
child props in other languages.

134
00:09:39.337 --> 00:09:44.487
It's when you have your
element in the template, so

135
00:09:44.487 --> 00:09:50.820
here I have my element, and
I have other elements within my tag.

136
00:09:50.820 --> 00:09:55.137
You can receive that, and
it's called the slot.

137
00:09:55.137 --> 00:09:57.684
And actually, you can have multiple slots.

138
00:09:57.684 --> 00:10:03.388
So you can let the consumer of your
component to define different slots.

139
00:10:03.388 --> 00:10:08.194
Like this is the header, this is the main
content, and this is the footer, okay?

140
00:10:08.194 --> 00:10:10.776
So you can have different slots, and

141
00:10:10.776 --> 00:10:15.952
then decide what to do with those
slots within your web component, okay?

142
00:10:15.952 --> 00:10:17.789
Now, just for you to know.

143
00:10:17.789 --> 00:10:21.829
And there is also something interesting,
but it's not available in Safari.

144
00:10:21.829 --> 00:10:27.741
So this is kind of the part that
we start saying don't use it yet,

145
00:10:27.741 --> 00:10:31.146
it's called customized builtins.

146
00:10:31.146 --> 00:10:37.682
The idea is that instead of using
the tag name, we can use other tags,

147
00:10:37.682 --> 00:10:43.333
like normal tags, and express,
I want this as my element.

148
00:10:43.333 --> 00:10:48.002
So it's like expressing to the browser,
hey, this div,

149
00:10:48.002 --> 00:10:50.300
I want you to use that class.

150
00:10:50.300 --> 00:10:55.130
So create an instance of that class
instead of the standard div, okay?

151
00:10:55.130 --> 00:10:57.387
It can be a list, ul.

152
00:10:57.387 --> 00:11:02.761
So then you say ul is equals, and
the name of your custom element.

153
00:11:02.761 --> 00:11:05.991
This is not available in Safari today, so

154
00:11:05.991 --> 00:11:09.788
in Safari you have to use
my-element as as a tag.

155
00:11:09.788 --> 00:11:11.379
So that's one part, custom elements.

