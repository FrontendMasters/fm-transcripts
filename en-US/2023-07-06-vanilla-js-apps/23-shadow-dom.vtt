WEBVTT

1
00:00:00.360 --> 00:00:03.320
So at first it's kind of, come on.

2
00:00:04.470 --> 00:00:07.180
That's the first reaction, come on.

3
00:00:07.180 --> 00:00:13.310
So because the solution for this is to
start adding classes to everything, right?

4
00:00:13.310 --> 00:00:18.800
Generating classitis, like the illness
of adding class to everything.

5
00:00:18.800 --> 00:00:21.090
Well, do you understand the problem?

6
00:00:21.090 --> 00:00:22.660
By default this is what happens.

7
00:00:23.680 --> 00:00:27.331
But fortunately,
we do have a solution for that, and

8
00:00:27.331 --> 00:00:31.170
that's the third and
last part of Web Components.

9
00:00:31.170 --> 00:00:32.950
That's Shadow DOM.

10
00:00:32.950 --> 00:00:36.266
Remember, these three aspects
are completely separated.

11
00:00:36.266 --> 00:00:37.826
In the timeline in history,

12
00:00:37.826 --> 00:00:41.211
they were added at different
moments in different browsers.

13
00:00:41.211 --> 00:00:44.020
Today all of them
are supporting everything.

14
00:00:44.020 --> 00:00:45.490
So we're good.

15
00:00:45.490 --> 00:00:49.922
Shadow DOM is a private, isolated DOM
tree within a web component that is

16
00:00:49.922 --> 00:00:52.840
separated from the main
document's DOM tree.

17
00:00:52.840 --> 00:00:56.960
You have your own DOM, your own document.

18
00:00:58.140 --> 00:01:03.215
And you remember that we have
this option to, like translate,

19
00:01:03.215 --> 00:01:09.730
adopt an element from another document,
we had a callback for that.

20
00:01:09.730 --> 00:01:13.411
This is the case where you have an element
that you're moving that element from

21
00:01:13.411 --> 00:01:15.240
a shadow DOM to another DOM.

22
00:01:15.240 --> 00:01:18.494
So, it's like having kind of an iframe,
but it's not really,

23
00:01:18.494 --> 00:01:21.140
the iframe has its own navigation.

24
00:01:21.140 --> 00:01:25.400
In this case, we don't have navigation,
just its own DOM.

25
00:01:25.400 --> 00:01:28.080
And we will see that
in action in a second.

26
00:01:28.080 --> 00:01:31.314
So the Shadow DOM then allows
more control over styling and

27
00:01:31.314 --> 00:01:34.350
encapsulation of functionality
of a custom element.

28
00:01:35.530 --> 00:01:40.445
By default, CSS that you declare
in the main DOM, in the outer DOM,

29
00:01:40.445 --> 00:01:45.140
in the global DOM won't be
applied to the Shadow DOM.

30
00:01:45.140 --> 00:01:48.989
Also that leads to some issues sometimes.

31
00:01:48.989 --> 00:01:53.800
So for example,
if you define a font style, a font family,

32
00:01:53.800 --> 00:01:58.035
it won't be applied
automatically to Shadow DOMs,

33
00:01:58.035 --> 00:02:02.000
because it's a different DOM,
has its own CSS.

34
00:02:02.000 --> 00:02:07.680
And CSS that you declare in the Shadow DOM
applies only there, not to the outside.

35
00:02:09.760 --> 00:02:14.910
There are ways with pseudo classes and
pseudo elements that

36
00:02:14.910 --> 00:02:20.730
let us communicate CSS between
the host and the Shadow DOM.

37
00:02:20.730 --> 00:02:25.520
We won't get too deep in that, okay, but
just for you to know that it's possible.

38
00:02:27.080 --> 00:02:30.590
The Shadow DOM can be open or closed.

39
00:02:30.590 --> 00:02:33.370
And that defines the visibility
from the outer DOM.

40
00:02:33.370 --> 00:02:39.510
So it's like creating a private
property in Java or C#, okay?

41
00:02:39.510 --> 00:02:43.218
In this case,
if you create an open Shadow DOM,

42
00:02:43.218 --> 00:02:46.390
the main DOM can get into the Shadow DOM.

43
00:02:48.110 --> 00:02:50.859
If you say closed, it cannot.

44
00:02:50.859 --> 00:02:57.110
Only JavaScript from that shadow
DOM can actually get that DOM.

45
00:02:57.110 --> 00:02:58.250
That does make sense.

46
00:02:58.250 --> 00:03:01.640
And that's a property that you use
when you create the Shadow DOM.

47
00:03:01.640 --> 00:03:02.240
We have a question.

48
00:03:02.240 --> 00:03:03.440
Yeah.

49
00:03:03.440 --> 00:03:07.936
&gt;&gt; Can we reference an HTML
file similar to Angular?

50
00:03:07.936 --> 00:03:08.960
&gt;&gt; That's a good question.

51
00:03:08.960 --> 00:03:14.775
So the question is if we can somehow
reference an external HTML file.

52
00:03:14.775 --> 00:03:18.608
I will answer fully the question
in a minute but for

53
00:03:18.608 --> 00:03:21.901
now let's say that the quick answer is no.

54
00:03:21.901 --> 00:03:28.794
And there was an API and spec for
doing that and was known as HTML imports,

55
00:03:28.794 --> 00:03:33.552
but let me show you how it looks like,
maybe here.

56
00:03:33.552 --> 00:03:39.880
And can I use HTML imports?

57
00:03:42.780 --> 00:03:44.420
Looks like this.

58
00:03:44.420 --> 00:03:49.440
And as you can see, at one point we
used to have green, but now it's red.

59
00:03:49.440 --> 00:03:53.235
So it's actually deprecated,
it was removed from the spec, and

60
00:03:53.235 --> 00:03:55.104
it's not gonna happen, okay.

61
00:03:55.104 --> 00:03:58.822
But that was the way to
include HTML documents for

62
00:03:58.822 --> 00:04:03.635
other HTML documents, for
example for using it as a template.

63
00:04:03.635 --> 00:04:07.520
That doesn't mean that we cannot do that,
in fact, we will see how to do that.

64
00:04:07.520 --> 00:04:10.380
But it's not like by the API.

65
00:04:10.380 --> 00:04:12.601
So there is no API or a spec to do that.

66
00:04:12.601 --> 00:04:17.314
So in this case, I'm setting all
the templates in the same HTML,

67
00:04:17.314 --> 00:04:21.100
but we could load these
templates from the outside.

68
00:04:21.100 --> 00:04:22.088
How?

69
00:04:22.088 --> 00:04:23.336
Manually.

70
00:04:23.336 --> 00:04:26.756
How, for example, with the Fetch API,

71
00:04:26.756 --> 00:04:30.687
instead of loading a JSON,
you can load HTML.

72
00:04:30.687 --> 00:04:33.060
It is not a problem.

73
00:04:33.060 --> 00:04:34.760
Then we can think about performance.

74
00:04:34.760 --> 00:04:36.140
What happens if it doesn't load?

75
00:04:36.140 --> 00:04:38.470
Yeah, we need to think
about lots of stuff.

76
00:04:38.470 --> 00:04:39.709
But yeah, you can do that.

77
00:04:42.470 --> 00:04:45.570
Okay, so Shadow DOM.

78
00:04:46.590 --> 00:04:48.390
This is how you create the Shadow DOM.

79
00:04:49.410 --> 00:04:53.290
You attach a Shadow DOM to the element.

80
00:04:54.640 --> 00:04:58.680
So this.attachShadow typically
we do that in the constructor.

81
00:04:58.680 --> 00:05:01.397
And we said the mode open or close.

82
00:05:01.397 --> 00:05:07.400
And typically we store that as
a property of the object to use later.

83
00:05:07.400 --> 00:05:13.718
It can be called root, root DOM,
root Shadow, Shadow root, different names.

84
00:05:13.718 --> 00:05:18.974
So then when you're
going to work with your

85
00:05:18.974 --> 00:05:23.646
own DOM now you don't append to this,

86
00:05:23.646 --> 00:05:29.170
you do that to the shadow DOM, make sense?

87
00:05:29.170 --> 00:05:34.390
Because you as web component
will be part of a bigger DOM.

88
00:05:34.390 --> 00:05:37.360
But now you have your
inner DOM inside you.

89
00:05:37.360 --> 00:05:43.986
So you need to work with your inner DOM,
that's called the Shadow DOM, okay.

90
00:05:43.986 --> 00:05:46.664
Now when you have a Shadow DOM,

91
00:05:46.664 --> 00:05:52.638
when you have this declaration of h1,
it applies only to this h1 and

92
00:05:52.638 --> 00:05:57.589
not for
other h1 that you may have on the page, okay.

93
00:05:58.970 --> 00:06:02.020
Which solves the biggest
issue that we saw before.

94
00:06:02.020 --> 00:06:06.005
So now when you have a style
declarations within a web component,

95
00:06:06.005 --> 00:06:09.390
if you enable Shadow DOM,
that is optional.

96
00:06:09.390 --> 00:06:15.045
If you create the Shadow DOM,
then Style Sheets will apply only there,

97
00:06:15.045 --> 00:06:19.350
which makes a cleaner CSS code and
cleaner HTML.

98
00:06:19.350 --> 00:06:22.782
Because you don't need to abuse on IDs and
classes,

99
00:06:22.782 --> 00:06:25.673
mostly if the components is pretty simple.

100
00:06:27.354 --> 00:06:30.876
Okay, makes sense?

101
00:06:30.876 --> 00:06:35.759
So, answering with more information
the question about where to define

102
00:06:35.759 --> 00:06:37.850
the HTML for custom elements.

103
00:06:37.850 --> 00:06:42.450
There are several alternatives, not one,
and it's up to us to make the decision.

104
00:06:43.610 --> 00:06:48.016
We can use the DOM API's and
do everything by hand,

105
00:06:48.016 --> 00:06:52.530
like creating the elements by hand,
or in HTML.

106
00:06:52.530 --> 00:06:54.390
We can use a template in the main HTML.

107
00:06:54.390 --> 00:06:56.560
That's the option that
seems like we have here.

108
00:06:57.590 --> 00:07:01.974
We can use an external HTML file that
was the question and load it with fetch.

109
00:07:01.974 --> 00:07:06.296
I'll bet you're thinking well, but
the first time I'm adding that element,

110
00:07:06.296 --> 00:07:10.180
well then we need to wait for the HTML
to load while it can be prefetched.

111
00:07:12.000 --> 00:07:17.260
We do have a preload link element,
I'm sure if you have used that.

112
00:07:17.260 --> 00:07:21.910
So you can prefetch in your HTML,
those external files.

113
00:07:21.910 --> 00:07:25.099
So then when the browser needs that,
it will be already in the cache.

114
00:07:27.450 --> 00:07:32.472
And when you have the data that is coming
from an external HTML, you can use

115
00:07:32.472 --> 00:07:38.440
inner HTML, something known as a DOMParser
that we won't cover in details today.

116
00:07:38.440 --> 00:07:43.864
But it's actually an object with
DOM API that will parse a string and

117
00:07:43.864 --> 00:07:49.770
returns a document fragment that
then you can inject in the real DOM.

118
00:07:49.770 --> 00:07:50.849
Something like that.

