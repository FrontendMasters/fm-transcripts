WEBVTT

1
00:00:00.370 --> 00:00:06.713
And also we have the Declarative
Shadow DOM, that today is the one that has

2
00:00:06.713 --> 00:00:11.816
just arrived to Safari, okay,
just arrived to Safari.

3
00:00:11.816 --> 00:00:16.493
And it's a way to define that you want
the Shadow DOM directly in the markup,

4
00:00:16.493 --> 00:00:17.895
not with JavaScript.

5
00:00:17.895 --> 00:00:23.422
When you create a template, you specify,
I want the Shadow DOM for this template.

6
00:00:23.422 --> 00:00:28.294
And that means that a server-side
rendering engine can declare a Shadow DOM

7
00:00:28.294 --> 00:00:32.493
directly in the HTML without
executing JavaScript, all right?

8
00:00:32.493 --> 00:00:37.509
So in the future,
it might be like a good way to create

9
00:00:37.509 --> 00:00:43.900
a Shadow DOM on web components,
but today it's still meh, okay?

10
00:00:43.900 --> 00:00:45.551
What about CSS?

11
00:00:45.551 --> 00:00:46.838
Cuz we haven't mentioned CSS.

12
00:00:46.838 --> 00:00:51.999
A web component typically has a CSS
attached, mostly if you're using

13
00:00:51.999 --> 00:00:58.312
Shadow DOM, because now we know that it's
not going to inherit CSS from the outside.

14
00:00:58.312 --> 00:01:02.642
Well, again, alternatives,
not one single way.

15
00:01:02.642 --> 00:01:07.642
You can use CSSOM APIs and
see what's that.

16
00:01:07.642 --> 00:01:11.048
That's a DOM, but for CSS.

17
00:01:11.048 --> 00:01:15.875
There is an API in JavaScript to
create style sheets with JavaScript.

18
00:01:15.875 --> 00:01:20.506
You can add a script to a template or
a style to a template,

19
00:01:20.506 --> 00:01:26.586
a link to an external file, or use
an external CSS file loaded with fetch and

20
00:01:26.586 --> 00:01:29.890
inject that in the Shadow DOM as a style.

21
00:01:29.890 --> 00:01:33.930
That's the version that we will use,

22
00:01:33.930 --> 00:01:39.497
not because it's the best one,
it's just one way.

23
00:01:39.497 --> 00:01:41.874
Yeah, question.

24
00:01:41.874 --> 00:01:46.229
&gt;&gt; Where's the link between template and
the custom element, so the styles and

25
00:01:46.229 --> 00:01:48.313
the template become encapsulated?

26
00:01:48.313 --> 00:01:51.893
&gt;&gt; So the question has to do with where
is the link between the template and

27
00:01:51.893 --> 00:01:52.993
the custom element?

28
00:01:52.993 --> 00:01:55.963
Actually, there is no link.

29
00:01:55.963 --> 00:01:57.725
We do that link.

30
00:01:57.725 --> 00:02:01.221
So we as developers of
the custom elements,

31
00:02:01.221 --> 00:02:05.669
we're going to load that template by ID,
for example.

32
00:02:05.669 --> 00:02:09.756
In fact, you can reuse the same
template for more than one custom element.

33
00:02:09.756 --> 00:02:12.143
That's why we need to clone it as well.

34
00:02:12.143 --> 00:02:17.735
So that's why a web component is actually
a set of completely separate APIs,

35
00:02:17.735 --> 00:02:21.099
that it becomes like a design pattern,
okay?

36
00:02:21.099 --> 00:02:25.643
Let's use these three APIs
to create web components.

37
00:02:25.643 --> 00:02:28.397
&gt;&gt; Yep.
&gt;&gt; When we clone the template,

38
00:02:28.397 --> 00:02:31.268
do we clone all the styles inside?

39
00:02:31.268 --> 00:02:34.074
&gt;&gt; You clone everything inside,
all the DOM inside.

40
00:02:34.074 --> 00:02:41.833
Yeah, the idea is because when you have
different instances of that element,

41
00:02:41.833 --> 00:02:46.372
you want each instance to
have its own Shadow DOM.

42
00:02:46.372 --> 00:02:48.137
&gt;&gt; Yep.

43
00:02:48.137 --> 00:02:54.727
&gt;&gt; Are classes required for components or
can we do a functional style?

44
00:02:54.727 --> 00:02:58.011
&gt;&gt; So classes are not require.

45
00:02:58.011 --> 00:03:05.107
So the object that you send here
must follow the HTML interface.

46
00:03:05.107 --> 00:03:08.977
So does it mean that it must
be a class declaration?

47
00:03:08.977 --> 00:03:11.467
No, there are other ways In JavaScript.

48
00:03:11.467 --> 00:03:15.934
Today, they will look like hacky
ways to some kind of injecting to

49
00:03:15.934 --> 00:03:20.746
an object a different prototype,
blah, blah, blah, blah, blah.

50
00:03:20.746 --> 00:03:26.692
So to answer quickly the question,
you can create your own mini-framework,

51
00:03:26.692 --> 00:03:32.108
mini-library, that can create web
components from a function, okay?

52
00:03:32.108 --> 00:03:35.778
But you have to do that,
you have to hack this a little bit.

53
00:03:35.778 --> 00:03:36.974
By the way, it's official,
it's not a hack.

54
00:03:36.974 --> 00:03:42.948
But it's not, by default,
a function in functional components and

55
00:03:42.948 --> 00:03:45.423
class components in React.

56
00:03:45.423 --> 00:03:50.324
So let's say that it must be
an object implementing an interface,

57
00:03:50.324 --> 00:03:54.270
and the way to do that in
modern JavaScript is a class.

58
00:03:54.270 --> 00:03:58.021
But also, we have classic ways to do that,

59
00:03:58.021 --> 00:04:03.248
that today looks a little weird,
but they are still there.

60
00:04:03.248 --> 00:04:06.185
So it's possible to change the style.

