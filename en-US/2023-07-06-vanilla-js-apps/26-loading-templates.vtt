WEBVTT

1
00:00:00.000 --> 00:00:02.912
But the next step is to load the template.

2
00:00:02.912 --> 00:00:06.976
We have a template, in fact let's look at
the templates now that we know better what

3
00:00:06.976 --> 00:00:08.092
we're dealing with.

4
00:00:08.092 --> 00:00:13.108
We have a menu page template that looks
like the template for the menu page.

5
00:00:13.108 --> 00:00:17.115
We have a product-item-template,
order-form-template,

6
00:00:17.115 --> 00:00:21.206
details-page-template, okay,
and cart-item-template.

7
00:00:21.206 --> 00:00:25.784
So we have at least details page and
menu page.

8
00:00:25.784 --> 00:00:28.494
Because we're going to mix things here.

9
00:00:28.494 --> 00:00:30.052
So let's start with menu page.

10
00:00:30.052 --> 00:00:35.882
And just for see if this works for now,
I can add here an H2, this is the menu.

11
00:00:35.882 --> 00:00:39.673
It won't look nice in my app, but
anyway, just to see something.

12
00:00:39.673 --> 00:00:41.575
I can add that to the template.

13
00:00:41.575 --> 00:00:44.460
So let's try to load that template first.

14
00:00:44.460 --> 00:00:47.750
So I will go where?

15
00:00:47.750 --> 00:00:54.167
To Components &gt; MenuPage.js and
I will start with the constructor.

16
00:00:54.167 --> 00:00:55.808
I will refactor this, okay?

17
00:00:55.808 --> 00:00:57.050
So have that in mind.

18
00:00:57.050 --> 00:01:01.471
So I'm going to then get
the template with the DOM API.

19
00:01:01.471 --> 00:01:06.512
So from the document,
I'm going to get an element by ID,

20
00:01:06.512 --> 00:01:10.512
okay, and the ID is menu-page-template.

21
00:01:10.512 --> 00:01:11.550
That's the ID, right?

22
00:01:11.550 --> 00:01:13.484
So that's my ID.

23
00:01:13.484 --> 00:01:14.452
That's the template.

24
00:01:14.452 --> 00:01:18.370
Should I go and
inject that template into my DOM?

25
00:01:18.370 --> 00:01:21.555
No, because the template is unusable.

26
00:01:21.555 --> 00:01:23.037
I have to clone it.

27
00:01:23.037 --> 00:01:26.771
I have to create a real
instance of the template.

28
00:01:26.771 --> 00:01:30.642
So to clone it,
typically we call that the content.

29
00:01:30.642 --> 00:01:35.406
I don't know why, I don't like the name,
but [LAUGH] it's like the best practice.

30
00:01:35.406 --> 00:01:38.170
You can say clone element or
something like that.

31
00:01:38.170 --> 00:01:43.512
We take template.content.cloneNode,

32
00:01:43.512 --> 00:01:49.602
and it's asking me if we
want a deep clone or not.

33
00:01:49.602 --> 00:01:50.505
What is that?

34
00:01:50.505 --> 00:01:56.627
If the template has inside other
elements and other templates.

35
00:01:56.627 --> 00:02:00.805
If we want to clone them
all with a deep cloning,

36
00:02:00.805 --> 00:02:04.258
typically it's through what we want.

37
00:02:04.258 --> 00:02:11.430
And then we can append
this child to ourself,

38
00:02:11.430 --> 00:02:16.534
the content, right, like so.

39
00:02:16.534 --> 00:02:22.016
Again, some of you were maybe thinking,
this is too verbose, right?

40
00:02:22.016 --> 00:02:25.649
Because yeah, we need to do both,
but this is OOP,

41
00:02:25.649 --> 00:02:28.196
you can create your own base class.

42
00:02:28.196 --> 00:02:32.788
That then your custom components
will extend from that will do all

43
00:02:32.788 --> 00:02:33.961
the heavy work.

44
00:02:33.961 --> 00:02:38.596
Once in the constructor for
all the other instances.

45
00:02:38.596 --> 00:02:39.396
Okay, does it make sense?

46
00:02:39.396 --> 00:02:42.823
So you can improve this with
more abstraction layers.

47
00:02:45.539 --> 00:02:53.762
So coming back here, so if we load this
in the browser, we get an error, why?

48
00:02:53.762 --> 00:02:57.630
The error says fail to
construct custom element.

49
00:02:57.630 --> 00:03:00.207
The result must not have children.

50
00:03:01.791 --> 00:03:04.053
He says what's that well that's a rule.

51
00:03:04.053 --> 00:03:08.709
When you're constructing
an element you cannot return to

52
00:03:08.709 --> 00:03:12.709
after the constructor you
cannot have children.

53
00:03:12.709 --> 00:03:15.314
Okay, so
how would you solve the problem one

54
00:03:15.314 --> 00:03:18.139
solution is a shadow DOM
that we will see later.

55
00:03:18.139 --> 00:03:22.586
Because if it's a shadow DOM,
you will add elements to the shadow DOM,

56
00:03:22.586 --> 00:03:24.749
not to yourself, so it will work.

57
00:03:24.749 --> 00:03:30.212
And the other one is to implement
the connected callback.

58
00:03:30.212 --> 00:03:35.163
How to do that, you just create
a method with that specific name.

59
00:03:35.163 --> 00:03:40.653
Be careful writing the name,
connectedCallback.

60
00:03:40.653 --> 00:03:47.678
So, and then we move that, the three
lines, to the connected callback.

61
00:03:47.678 --> 00:03:52.951
Remember, connected
callback is kind of When

62
00:03:52.951 --> 00:03:59.853
the component is attached to the DOM so
when we put in the DOM.

63
00:03:59.853 --> 00:04:05.066
In our case it will be when
the router creates the element and

64
00:04:05.066 --> 00:04:08.513
appends that to the main HTML element.

65
00:04:08.513 --> 00:04:10.749
Make sense?

66
00:04:14.305 --> 00:04:19.418
So now, if I'm going back,
this is what I see now.

67
00:04:19.418 --> 00:04:23.567
I see this is the menu,
okay, and what is that?

68
00:04:23.567 --> 00:04:26.196
Let's look at the DOM here.

69
00:04:26.196 --> 00:04:31.765
We have a menu page that has a string
menu, then H2 and a section with a URL.

70
00:04:31.765 --> 00:04:33.779
So this is the clone of the template.

71
00:04:33.779 --> 00:04:37.858
This menu that is here is
the one from the router.

72
00:04:37.858 --> 00:04:40.827
The text content that we
don't want anymore, but

73
00:04:40.827 --> 00:04:42.882
it's still there anyway, okay?

74
00:04:42.882 --> 00:04:47.866
So I'm going to remove those
text content because now we know

75
00:04:47.866 --> 00:04:51.198
how to load the content from a template.

76
00:04:54.627 --> 00:04:55.807
Okay, makes sense?

77
00:04:58.084 --> 00:05:04.259
And if we apply the same thing on
on the other components, okay?

78
00:05:04.259 --> 00:05:09.278
We will be ready for
seeing at least basic HTML.

79
00:05:09.278 --> 00:05:11.802
It's still HTML, but it's static.

80
00:05:11.802 --> 00:05:12.871
We're not rendering the data.

81
00:05:12.871 --> 00:05:14.119
That's the next step.

82
00:05:14.119 --> 00:05:15.383
Wait for it.

83
00:05:15.383 --> 00:05:23.409
So basically we could do
something similar on the rest,

84
00:05:23.409 --> 00:05:28.543
but let's first play with the DOM.

85
00:05:28.543 --> 00:05:33.407
You don't need to do this
because I will change that.

86
00:05:33.407 --> 00:05:37.134
I will delete that, by the way, but

87
00:05:37.134 --> 00:05:42.602
let's try to see what happens
if i change the color,

88
00:05:42.602 --> 00:05:45.974
let's use violet, of the h2.

89
00:05:45.974 --> 00:05:53.532
We are in a template so we are expecting
this h2 to be applied, which is true.

90
00:05:53.532 --> 00:05:59.315
But what happens if we
have an h2 also somewhere,

91
00:05:59.315 --> 00:06:02.354
like best coffee in town.

92
00:06:02.354 --> 00:06:06.933
So this h2 is completed out of the
template and out of the web components.

93
00:06:06.933 --> 00:06:08.559
It's also viovet.

94
00:06:08.559 --> 00:06:14.191
And it's kinda sss,
I'm not not expecting that to happen.

95
00:06:14.191 --> 00:06:21.040
So to solve that problem,
we need shadow DOM, okay, shadow DOM.

