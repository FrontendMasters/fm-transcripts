WEBVTT

1
00:00:00.290 --> 00:00:02.840
Why do we need to care about VanillaJS?

2
00:00:02.840 --> 00:00:03.960
So why?

3
00:00:03.960 --> 00:00:07.040
Why this is important today, this year?

4
00:00:07.040 --> 00:00:11.042
Well, first,
to add one more tool to your toolbox, so

5
00:00:11.042 --> 00:00:14.000
then you don't have just a hammer okay?

6
00:00:14.000 --> 00:00:15.482
So this is important.

7
00:00:15.482 --> 00:00:19.401
So to understand what
your library is doing.

8
00:00:19.401 --> 00:00:24.409
Or if a new version of the library
appears and now they have a new fancy way

9
00:00:24.409 --> 00:00:29.356
to do things, you will understand,
okay, it's better because of.

10
00:00:29.356 --> 00:00:31.858
You will understand why that's better.

11
00:00:31.858 --> 00:00:34.260
Okay, so you will understand your library.

12
00:00:35.350 --> 00:00:39.473
To extend your library with plugins,
add-ons, or

13
00:00:39.473 --> 00:00:43.440
change your library in case you need to.

14
00:00:43.440 --> 00:00:49.210
Because most of the time you need to
get out of the library sometimes.

15
00:00:49.210 --> 00:00:55.160
For example, if you are doing hardware
access, you're using platform API's.

16
00:00:55.160 --> 00:01:00.640
Sometimes you need to get out of
the library for some operations.

17
00:01:00.640 --> 00:01:02.570
And then you need to
come back to the library.

18
00:01:02.570 --> 00:01:05.563
Well, to understand how
to do that properly or

19
00:01:05.563 --> 00:01:10.551
to understand how to code properly that
part of your app that talks to the DOM,

20
00:01:10.551 --> 00:01:14.130
it's better to understand
what you're doing.

21
00:01:14.130 --> 00:01:16.740
Also to be a better web developer.

22
00:01:16.740 --> 00:01:20.980
And this is not just
because I know Vanilla JS.

23
00:01:20.980 --> 00:01:26.220
Okay, so this is something that you
will add to your profile on LinkedIn.

24
00:01:26.220 --> 00:01:30.399
And recruiters are actually taking that in
consideration when they are looking for

25
00:01:30.399 --> 00:01:31.650
web developers.

26
00:01:31.650 --> 00:01:37.090
If you know Vanilla JS, you have
more points in your profile, okay?

27
00:01:37.090 --> 00:01:39.990
Also you can mix these with libraries.

28
00:01:39.990 --> 00:01:44.186
When you're using a library such as Vue or
even React,

29
00:01:44.186 --> 00:01:48.945
you don't need to create your
whole application with React.

30
00:01:48.945 --> 00:01:52.045
React or View can just be like a little

31
00:01:52.045 --> 00:01:56.250
widget within Vanila JS
library when you need it.

32
00:01:58.030 --> 00:02:02.262
It doesn't need to be always
like the whole navigation is

33
00:02:02.262 --> 00:02:04.650
managed by the library, okay?

34
00:02:04.650 --> 00:02:06.544
So you can mix everything.

35
00:02:06.544 --> 00:02:10.481
Also, and probably the most
important part here is that

36
00:02:10.481 --> 00:02:15.710
FrontedMasters.com is Vanilla JS,
and that's why it's so fast.

37
00:02:15.710 --> 00:02:20.364
So if you have seen that it has
a really fast user experience,

38
00:02:20.364 --> 00:02:23.700
it's because it's Vanilla JS, okay?

39
00:02:23.700 --> 00:02:25.371
Maybe we need a plugin for

40
00:02:25.371 --> 00:02:30.556
the browser that will tell you when
you're on a website, this is Vanilla JS.

41
00:02:30.556 --> 00:02:34.977
So you get a vanilla icon or
something to know when you are in a React,

42
00:02:34.977 --> 00:02:39.257
application, a Vue application,
or a vanilla JS application.

43
00:02:39.257 --> 00:02:40.720
And also to use it.

44
00:02:40.720 --> 00:02:45.506
So I don't want you to take what
you will learn today just for

45
00:02:45.506 --> 00:02:48.420
the theory or just for history.

46
00:02:48.420 --> 00:02:50.990
So it's not for historical reasons.

47
00:02:50.990 --> 00:02:54.970
I want you to use it when you can, okay?

48
00:02:54.970 --> 00:03:00.186
And then you can create simple, fast
web apps with no CLI, no build process.

49
00:03:00.186 --> 00:03:03.567
Nothing,even if you want,
you can still use the old FTP,

50
00:03:03.567 --> 00:03:05.707
if you know what I'm talking about.

51
00:03:05.707 --> 00:03:10.880
Because that's something that most new
developers, they don't know what FTP is.

52
00:03:10.880 --> 00:03:15.094
Well, you don't need a PCAP,
you just do an HTML,

53
00:03:15.094 --> 00:03:19.604
a JavaScript file, and
you have an app up and running.

54
00:03:19.604 --> 00:03:21.710
Okay, just a matter of minutes.

55
00:03:21.710 --> 00:03:26.227
Yeah
&gt;&gt; I'll just say that people write into us

56
00:03:26.227 --> 00:03:31.153
constantly on our customer service or
Twitter or whatever,

57
00:03:31.153 --> 00:03:33.190
why is your site so fast?

58
00:03:33.190 --> 00:03:38.514
And yeah, it's because we mostly rely
on just server side rendering and

59
00:03:38.514 --> 00:03:45.340
then with data attributes, adding any kind
of behavior to the side that we need to.

60
00:03:45.340 --> 00:03:48.387
&gt;&gt; Yeah, in fact, some of the libraries,
for example, React,

61
00:03:48.387 --> 00:03:50.630
I'm not sure if you haven't seen this.

62
00:03:50.630 --> 00:03:51.846
Do we have any React developer here?

63
00:03:51.846 --> 00:03:55.395
Let's see, so most of you,
all of you actually.

64
00:03:55.395 --> 00:04:00.795
[LAUGH] So React has changed
its documentation lately.

65
00:04:00.795 --> 00:04:04.150
I think it was a month ago or
less than a month ago.

66
00:04:04.150 --> 00:04:07.777
And now,
they're not suggesting to you to use

67
00:04:07.777 --> 00:04:13.050
React client-side without
an additional framework.

68
00:04:13.050 --> 00:04:16.936
So they're not saying, hey,
yeah, you wanna use React,

69
00:04:16.936 --> 00:04:20.870
just use create React app and
do everything client-side.

70
00:04:20.870 --> 00:04:22.440
That's not the recommendation anymore.

71
00:04:22.440 --> 00:04:23.220
Is it still there?

72
00:04:23.220 --> 00:04:25.090
Yeah, it's one possibility.

73
00:04:25.090 --> 00:04:30.067
But they say, because now we have
a performance issue on the web,

74
00:04:30.067 --> 00:04:34.699
mostly because of the over usage
of client side frameworks.

75
00:04:34.699 --> 00:04:40.832
So things like Next JS or Quick or
other ideas are coming back to,

76
00:04:40.832 --> 00:04:46.071
okay, maybe we need to do
more server side rendering.

77
00:04:46.071 --> 00:04:50.782
Yeah, JavaScript is still useful,
but we don't need to

78
00:04:50.782 --> 00:04:55.801
rely everything on client side and
adding a lot of overhead.

79
00:04:55.801 --> 00:05:00.431
Mostly on the enterprise world,
it's common to hear like, yeah,

80
00:05:00.431 --> 00:05:03.026
we have five megabytes of JavaScript.

81
00:05:03.026 --> 00:05:04.509
It's not so big.

82
00:05:04.509 --> 00:05:07.374
What, five megabytes of
JavaScript is not so big?

83
00:05:07.374 --> 00:05:10.386
So on the enterprise world when
they're doing apps in Angular or

84
00:05:10.386 --> 00:05:14.194
something like that, they feel like five
megabytes of JavaScript is not so big.

85
00:05:14.194 --> 00:05:19.035
And that's a big problem,
okay, in terms of performance.

86
00:05:19.035 --> 00:05:23.325
Not just because of downloading the file,
that's not the biggest problem,

87
00:05:23.325 --> 00:05:26.190
but parsing and executing that file.

88
00:05:26.190 --> 00:05:29.573
And mostly if that's why
is rendering the UI,

89
00:05:29.573 --> 00:05:35.237
because that means that you won't see
anything until that part on executed.

90
00:05:35.237 --> 00:05:37.536
So even this is a discussion today.

91
00:05:37.536 --> 00:05:41.072
This is a tweet from yesterday,
okay, from Ben.

92
00:05:41.072 --> 00:05:45.136
He was saying, genuinely think that every
frontend developer should build their own

93
00:05:45.136 --> 00:05:48.024
framework at some point, and
that's actually Vanilla JS.

94
00:05:48.024 --> 00:05:52.718
Okay, building your own framework for
understanding what you're doing and

95
00:05:52.718 --> 00:05:54.677
why you're doing that, okay?

96
00:05:54.677 --> 00:05:58.575
Because that taught him more
that more JavaScript and

97
00:05:58.575 --> 00:06:01.615
Web APIs in a month, than years of React.

98
00:06:01.615 --> 00:06:05.154
So when you understand VanillaJS,
the DOM APIs,

99
00:06:05.154 --> 00:06:10.050
you understand what you're doing,
how you're doing that, okay?

100
00:06:10.050 --> 00:06:15.729
And Again, that will make you
a better React developer as well,

101
00:06:15.729 --> 00:06:19.935
because you will understand
how React works and

102
00:06:19.935 --> 00:06:26.050
how to do better things in React to
help React use better the DOM APIs.

103
00:06:27.410 --> 00:06:29.820
So main advantages of Vanilla JS,

104
00:06:29.820 --> 00:06:34.990
before actually getting into some code and
start coding our app.

105
00:06:34.990 --> 00:06:41.310
So lightweight, because yeah, you don't
have the overhead of the library.

106
00:06:41.310 --> 00:06:43.680
Today, some libraries
are better than that.

107
00:06:43.680 --> 00:06:45.155
You have tree shaking, so

108
00:06:45.155 --> 00:06:49.020
they can actually get rid of code
that you're actually not using.

109
00:06:49.020 --> 00:06:50.750
So it's getting better.

110
00:06:50.750 --> 00:06:56.780
But anyway, any library or framework
is sitting on top of the DOM API.

111
00:06:56.780 --> 00:07:02.620
So it's always something on top of,
that means you're adding more things.

112
00:07:02.620 --> 00:07:04.450
More control and power.

113
00:07:04.450 --> 00:07:07.670
And you know that with power we
have more responsibilities as well.

114
00:07:07.670 --> 00:07:10.390
And that's one of the disadvantages or
the fears.

115
00:07:10.390 --> 00:07:11.558
from some of you.

116
00:07:11.558 --> 00:07:16.777
That you need to make a lot of decisions
when you're doing Vanilla JS because,

117
00:07:16.777 --> 00:07:22.370
yeah, you're not forced to follow
the guideline from the library.

118
00:07:22.370 --> 00:07:24.950
And yeah,
you need to make a lot of decisions.

119
00:07:24.950 --> 00:07:26.530
Maybe that's life, right.

120
00:07:26.530 --> 00:07:30.740
So at least it's a good idea
to know many options so

121
00:07:30.740 --> 00:07:33.961
then you can make your own decisions.

122
00:07:33.961 --> 00:07:35.860
Simplicity of the code.

123
00:07:35.860 --> 00:07:40.720
Yeah, that might not be the case for
very large solutions.

124
00:07:40.720 --> 00:07:44.063
Flexibility, performance,
we have already been discussing and

125
00:07:44.063 --> 00:07:46.100
talking about performance.

126
00:07:46.100 --> 00:07:49.681
Compatibility is main advantage and say,

127
00:07:49.681 --> 00:07:54.760
I thought that that was a problem,
not really an advantage.

128
00:07:54.760 --> 00:07:59.300
Well, actually when you're
using Vanilla JS, okay,

129
00:07:59.300 --> 00:08:03.841
you don't need to think too
much about compatibility or

130
00:08:03.841 --> 00:08:09.253
dependencies or compatibility
on your server-side framework or

131
00:08:09.253 --> 00:08:12.460
even compatibility with the browser.

132
00:08:12.460 --> 00:08:17.270
We will get there about what we're going
to do today in terms of compatibility.

133
00:08:17.270 --> 00:08:20.160
It may be a joke, but it may be true.

134
00:08:20.160 --> 00:08:23.660
You won't have node modules, okay?

135
00:08:23.660 --> 00:08:30.030
So you won't have thousands of files
in that folder that looks like a mess.

136
00:08:31.060 --> 00:08:35.210
We know it works anyway,
but it's always, okay,

137
00:08:35.210 --> 00:08:38.403
a joke what happens with Node modules.

138
00:08:38.403 --> 00:08:43.055
So main fears of Vanilla JS that
you probably have, okay, and

139
00:08:43.055 --> 00:08:45.120
that's why you're here.

140
00:08:45.120 --> 00:08:45.981
So routing.

141
00:08:45.981 --> 00:08:51.960
That sounds like, but I like routing,
I like how React router works.

142
00:08:51.960 --> 00:08:56.420
Okay, in fact this is coming from
a survey that I did on Twitter.

143
00:08:56.420 --> 00:09:00.380
Okay, I did that a couple of times and
I gathered feedback from developers.

144
00:09:00.380 --> 00:09:02.410
I got, okay, what's the worst thing?

145
00:09:02.410 --> 00:09:06.860
What's your worst nightmare when
we are talking about Vanilla JS?

146
00:09:06.860 --> 00:09:12.110
Well, lack of routing,
that it's too verbose and time-consuming.

147
00:09:12.110 --> 00:09:14.619
That you need to write a lot.

148
00:09:14.619 --> 00:09:16.600
State management.

149
00:09:16.600 --> 00:09:18.690
So how to do state management.

150
00:09:18.690 --> 00:09:22.300
And sometimes we mix fears here.

151
00:09:22.300 --> 00:09:24.627
For example, state management,

152
00:09:24.627 --> 00:09:29.500
some libraries are not giving
you actually state management.

153
00:09:29.500 --> 00:09:32.170
I'm talking about global state management.

154
00:09:32.170 --> 00:09:35.120
They might give you component
based state management.

155
00:09:35.120 --> 00:09:38.330
And they have other libraries
attached that will do the same.

156
00:09:38.330 --> 00:09:45.550
That means that you can still use
Vanilla JS and use Redux, for example.

157
00:09:45.550 --> 00:09:47.790
You don't need React to use Redux.

158
00:09:47.790 --> 00:09:52.709
So if you like Redux,
you can use Redux on Vanilla JS.

159
00:09:52.709 --> 00:09:53.873
Okay, is it Vanilla JS?

160
00:09:53.873 --> 00:09:56.130
Well, we can see, okay?

161
00:09:56.130 --> 00:10:00.779
Again, this is not Boolean, being
Vanilla JS or not, but I'm saying that you

162
00:10:00.779 --> 00:10:04.739
don't always need to use all
the libraries that are like friends.

163
00:10:04.739 --> 00:10:09.030
You can just pick what you need for
that specific project.

164
00:10:09.030 --> 00:10:10.654
Templating.

165
00:10:10.654 --> 00:10:16.076
That's typically one of the biggest
fears when we get here,

166
00:10:16.076 --> 00:10:20.340
like JSX, lack of JSX,
or something similar.

167
00:10:20.340 --> 00:10:25.325
Templates in Angular, where where I
can have ng attributes in the middle

168
00:10:25.325 --> 00:10:28.280
of the HTML, and do something about that.

169
00:10:28.280 --> 00:10:29.280
Complexity.

170
00:10:30.420 --> 00:10:33.269
People think that it gets more complex,
but

171
00:10:33.269 --> 00:10:37.050
I think that that fear has
more to do with ignorance.

172
00:10:37.050 --> 00:10:40.721
Okay, that if you don't know something,
it looks complex.

173
00:10:42.654 --> 00:10:46.445
Not having reusable components.

174
00:10:46.445 --> 00:10:51.740
I'm not making a statement here, this is
just a list of fears from developers.

175
00:10:51.740 --> 00:10:57.180
How to maintain that in
the future looks like a problem.

176
00:10:57.180 --> 00:10:59.116
The learning curve.

177
00:10:59.116 --> 00:11:03.291
It's funny to you see that some people
think that the learning curve of

178
00:11:03.291 --> 00:11:07.846
Vanilla JS is much higher than the
learning curve of Angular, for example.

179
00:11:07.846 --> 00:11:12.865
And I've been playing with both and
I've been teaching on both.

180
00:11:12.865 --> 00:11:16.284
And i think that's exactly the opposite.

181
00:11:16.284 --> 00:11:21.739
The amount of concepts that you
need to understand from Angular,

182
00:11:21.739 --> 00:11:28.000
just for using one example,
it's probably 5x compared with vanilla JS.

183
00:11:29.240 --> 00:11:32.710
Browser compatibility,
that's typically a fear.

184
00:11:32.710 --> 00:11:40.070
But React is helping me solving browser
compatibility issues on the DOM.

185
00:11:40.070 --> 00:11:42.200
I've heard that a lot.

186
00:11:42.200 --> 00:11:45.799
Okay, that if you don't have React or
Angular or Vue, okay,

187
00:11:45.799 --> 00:11:49.746
your app will stop working on some
browsers because some browsers,

188
00:11:49.746 --> 00:11:51.980
I'm talking about modern browsers.

189
00:11:51.980 --> 00:11:53.240
I'm not even talking about Netscape.

190
00:11:54.290 --> 00:11:58.640
People think that maybe maybe your app
will not work in Safari if you're not

191
00:11:58.640 --> 00:12:02.280
using React because there is
like a magic idea going on.

192
00:12:02.280 --> 00:12:07.018
That React is actually
like wrapping the DOM API

193
00:12:07.018 --> 00:12:12.010
with tweaks for Safari or
things like that.

194
00:12:12.010 --> 00:12:16.113
I'm not saying that false or
true yet, but that's the feeling.

195
00:12:16.113 --> 00:12:21.630
And the freedom that we are going
to reinvent the wheel every time.

196
00:12:21.630 --> 00:12:24.910
That's probably one of
the fears that we have.

197
00:12:24.910 --> 00:12:26.530
Okay, and scalability.

198
00:12:26.530 --> 00:12:28.710
We already mentioned that.

199
00:12:28.710 --> 00:12:32.784
I'm not saying that we will solve all
the fears, or we will solve all these

200
00:12:32.784 --> 00:12:37.320
challenges, but at least we will see
what's true by the end of the day.

201
00:12:37.320 --> 00:12:38.280
What's true?

202
00:12:38.280 --> 00:12:41.450
What's actually an over reaction?

203
00:12:42.980 --> 00:12:47.571
What's false, okay, in this list,
&gt;&gt; What level

204
00:12:47.571 --> 00:12:51.380
of experience should I have coming into
this workshop with JavaScript itself?

205
00:12:53.130 --> 00:12:58.041
&gt;&gt; Just to understand the language, so
if you know how to write the class and

206
00:12:58.041 --> 00:13:03.130
you are confident writing Code,
JavaScript code, that would be enough.

207
00:13:04.900 --> 00:13:06.758
And even if, I mean,
if you know TypeScript but

208
00:13:06.758 --> 00:13:08.810
not JavaScript, it's going to be the same.

209
00:13:08.810 --> 00:13:09.400
Things like that.

210
00:13:12.120 --> 00:13:16.652
Anyway, most of the code that
I will write is also ready for

211
00:13:16.652 --> 00:13:21.580
copy and paste, if you want,
in the URL in the GitHub URL.

212
00:13:21.580 --> 00:13:25.161
So even in case you don't
wanna write the whole code,

213
00:13:25.161 --> 00:13:29.393
the code is there if you wanna
follow along or things like that.

214
00:13:29.393 --> 00:13:30.629
Okay, so.

215
00:13:32.273 --> 00:13:36.708
&gt;&gt; We're going to learn the tool and
you'll see when it's the best option.

216
00:13:36.708 --> 00:13:40.611
I already said that a couple of times,
but we want advocate here for

217
00:13:40.611 --> 00:13:42.645
using binaries on every project.

218
00:13:42.645 --> 00:13:44.736
Well, I won't advocate that.

219
00:13:44.736 --> 00:13:47.945
I want you to understand what it is.

220
00:13:47.945 --> 00:13:52.153
You have a working sample,
using different techniques

221
00:13:52.153 --> 00:13:56.990
is going to be little count,
yeah, little chaos there.

222
00:13:56.990 --> 00:14:03.750
But the idea is to show you different
patterns that you can use with this.

223
00:14:03.750 --> 00:14:06.650
And yeah, there will be more to see.

224
00:14:06.650 --> 00:14:11.814
When you have a complex application where
you're managing large amounts of data,

225
00:14:11.814 --> 00:14:16.017
mostly for example, when you have
a large list of things like that,

226
00:14:16.017 --> 00:14:18.320
that will need a special attention.

227
00:14:19.390 --> 00:14:20.960
But we'll start from scratch.

228
00:14:20.960 --> 00:14:24.427
So we're going to see the basics first.

