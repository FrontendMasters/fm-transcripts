WEBVTT

1
00:00:00.240 --> 00:00:06.814
Now, doing this, it will look
more similar to other languages.

2
00:00:06.814 --> 00:00:09.712
So, in other languages,

3
00:00:09.712 --> 00:00:14.466
typically, one file has its own context.

4
00:00:14.466 --> 00:00:18.930
In JavaScript, by default, if we are not
using modules, everything is global.

5
00:00:20.410 --> 00:00:25.723
And you may have conflicts between several
files using the same variable names for

6
00:00:25.723 --> 00:00:28.188
example, not when we are in modules.

7
00:00:28.188 --> 00:00:29.519
Make sense?

8
00:00:31.986 --> 00:00:37.368
So, now that means that now
we can go here and import for

9
00:00:37.368 --> 00:00:44.743
from Services/store.js we need to
express how do we wanna import that and

10
00:00:44.743 --> 00:00:49.560
because we use default
export I can just create,

11
00:00:51.982 --> 00:01:00.122
If I like this By the way you can
use semicolon or not it's up to you,

12
00:01:00.122 --> 00:01:05.013
because I'm old I'm used to
your semi colons on JavaScript, but

13
00:01:05.013 --> 00:01:10.280
you know that today's mostly if
you're not going to bundle this.

14
00:01:10.280 --> 00:01:12.407
Because when you bundle JavaScript and

15
00:01:12.407 --> 00:01:16.346
you compress the JavaScript not using
semicolons can lead to problems.

16
00:01:16.346 --> 00:01:18.510
But if you're going to ship
your JavaScript as it is.

17
00:01:20.140 --> 00:01:24.446
I prefer to still use
semicolons on this language.

18
00:01:24.446 --> 00:01:27.409
There are other languages
such as Kotlin or

19
00:01:27.409 --> 00:01:31.430
Swift where you have
semicolons optional as well.

20
00:01:31.430 --> 00:01:32.788
But I am on those languages.

21
00:01:32.788 --> 00:01:35.560
I don't use them, okay.

22
00:01:35.560 --> 00:01:38.335
So now that we have imported

23
00:01:38.335 --> 00:01:44.332
those that means that we can use them and
how I'm going to use them?

24
00:01:44.332 --> 00:01:49.830
For example, this store,
I want the store to be global.

25
00:01:49.830 --> 00:01:56.003
I wanna have one store per app, so
one store for the whole app, right?

26
00:01:56.003 --> 00:01:59.100
So it's right now global?

27
00:01:59.100 --> 00:02:02.320
No, it's not really
a global object right now.

28
00:02:02.320 --> 00:02:05.645
How can we because it's a module,
and because it's a module,

29
00:02:05.645 --> 00:02:08.160
it's not really a global variable.

30
00:02:08.160 --> 00:02:11.527
So something one pattern I'm not
saying it's the best pattern, or

31
00:02:11.527 --> 00:02:12.480
the only pattern.

32
00:02:12.480 --> 00:02:17.276
One pattern is to put talk
to the window object here,

33
00:02:17.276 --> 00:02:22.570
but typically only for
some special situations.

34
00:02:22.570 --> 00:02:26.308
So we are breaking the module for
one second.

35
00:02:26.308 --> 00:02:32.030
And we can create for example, an object
with a name app, or any other name.

36
00:02:32.030 --> 00:02:37.159
Okay, but app will work or myapp or Frontend
Masters app, wherever name you want to use.

37
00:02:37.159 --> 00:02:40.174
And then over that object
you can define for

38
00:02:40.174 --> 00:02:44.630
example, the store mean I don't
need to do this in this way.

39
00:02:44.630 --> 00:02:48.680
I can use just the JSON Syntax
if you want, but

40
00:02:48.680 --> 00:02:54.009
just to show you that we can
create an object and then later,

41
00:02:54.009 --> 00:02:59.781
hook into that object different ideas or
methods or functions.

42
00:02:59.781 --> 00:03:04.335
Now, every time I access
app.store anywhere,

43
00:03:04.335 --> 00:03:08.540
I'm accessing that singleton, okay?

44
00:03:08.540 --> 00:03:12.059
So before modules, everything was global.

45
00:03:12.059 --> 00:03:13.563
But with modules,

46
00:03:13.563 --> 00:03:18.680
this is one way to actually pick
what you want to make global.

47
00:03:18.680 --> 00:03:19.288
And it's better.

48
00:03:19.288 --> 00:03:24.548
It's a good practice best practice to
create an object and then hook everything

49
00:03:24.548 --> 00:03:29.493
to that object instead of creating a lot
of global variables that you don't

50
00:03:29.493 --> 00:03:34.490
know if they're going to make
conflicts with browser in the future.

51
00:03:34.490 --> 00:03:38.005
Okay, well, even app, you may say,
well, what happens in the future?

52
00:03:38.005 --> 00:03:42.160
There is a spec that is using
the app keyword for something else.

53
00:03:42.160 --> 00:03:45.240
Well, you can do a prefix here, so

54
00:03:45.240 --> 00:03:49.821
you can use underscore,
so it's up to you, okay?

55
00:03:49.821 --> 00:03:53.120
So that's the first part, okay?

56
00:03:53.120 --> 00:03:54.798
So, what's next so

57
00:03:54.798 --> 00:04:00.738
the next thing that we may want to do
is to load the data so to call the API.

58
00:04:00.738 --> 00:04:03.549
Okay, so we wanna call the API.

59
00:04:03.549 --> 00:04:07.979
The problem is that if I can
call the API from here I can

60
00:04:07.979 --> 00:04:12.129
because I imported that so
I can call fetch menu.

61
00:04:12.129 --> 00:04:15.010
And then it returns a promise.

62
00:04:15.010 --> 00:04:16.259
So I need to await for it.

63
00:04:16.259 --> 00:04:17.650
I create an async.

64
00:04:17.650 --> 00:04:21.061
I'm going to refactor this just to hum.

65
00:04:21.061 --> 00:04:23.820
So you know, and
then I have the menu, okay?

66
00:04:23.820 --> 00:04:25.686
So I create a constant with a menu.

67
00:04:25.686 --> 00:04:27.542
But I mean DOM content loaded.

68
00:04:27.542 --> 00:04:29.080
What should I do with the menu?

69
00:04:31.000 --> 00:04:32.406
So it's a local function.

70
00:04:32.406 --> 00:04:33.725
It's an event handler.

71
00:04:33.725 --> 00:04:39.251
I mean, I could render now,
my menu from here.

72
00:04:39.251 --> 00:04:40.226
I can do that.

73
00:04:40.226 --> 00:04:45.044
And that's one way, but
it's not really modular.

74
00:04:45.044 --> 00:04:49.631
If I'm when the DOM is loaded,
I go fetch the data and

75
00:04:49.631 --> 00:04:52.460
then render the data on the DOM.

76
00:04:52.460 --> 00:04:54.640
Can I do that?
Yes, I can.

77
00:04:54.640 --> 00:04:59.698
But we can do better and
doing better means that

78
00:04:59.698 --> 00:05:04.497
maybe we want to create
another service that

79
00:05:04.497 --> 00:05:09.554
will manage things around
in this case it can be

80
00:05:09.554 --> 00:05:14.633
the order things around
the menu itself okay?

81
00:05:14.633 --> 00:05:19.064
Things around working
with my data model and

82
00:05:19.064 --> 00:05:24.692
I'm not using any specific
design pattern like MVC MVVM

83
00:05:24.692 --> 00:05:32.120
you can use those if you want I'm
not saying no, you can use those.

84
00:05:32.120 --> 00:05:35.288
So for example, in this case,
I can create a new.

85
00:05:35.288 --> 00:05:39.310
You will finally understand why I'm
doing this in this way in a minute.

86
00:05:39.310 --> 00:05:40.460
I can create a new file.

87
00:05:40.460 --> 00:05:45.130
It can be order, it can be menu.

88
00:05:45.130 --> 00:05:49.635
You can change these names if you want,
it's up to you.

89
00:05:49.635 --> 00:05:54.342
In this case, I can create, I can export

90
00:05:54.342 --> 00:05:59.650
a function with a name low data for
the menu.

91
00:05:59.650 --> 00:06:02.181
So I mean, the menu.

92
00:06:02.181 --> 00:06:06.188
If you look here, I'm not creating
an object as I did before,

93
00:06:06.188 --> 00:06:09.360
just to show you a different
way of doing things.

94
00:06:09.360 --> 00:06:14.692
So API has an object,
store has an object here a menu I'm

95
00:06:14.692 --> 00:06:19.684
just creating a function and
exporting the function

96
00:06:19.684 --> 00:06:24.005
which one is better I don't
know is different okay.

97
00:06:24.005 --> 00:06:28.960
Just pick remember I mentioned it's going
to be a mix of different patterns here.

98
00:06:28.960 --> 00:06:33.400
So load data will actually go and
talk to the API.

99
00:06:33.400 --> 00:06:36.090
To talk to the API,
we need to import the API.

100
00:06:37.340 --> 00:06:43.049
Having mind if you're using VS code,
as I used to add the import

101
00:06:43.049 --> 00:06:48.004
that in the browser,
you must use the full URL/ VS Code

102
00:06:48.004 --> 00:06:52.997
says I want to import from API but
it doesn't say .js.

103
00:06:52.997 --> 00:06:54.630
So it's not going to work.

104
00:06:54.630 --> 00:06:59.307
You need to add the .js when
you're using Babel or TypeScript.

105
00:06:59.307 --> 00:07:03.640
Those tools will actually
make it work anyway.

106
00:07:03.640 --> 00:07:05.721
But not directly in the browser,

107
00:07:05.721 --> 00:07:09.075
we need to add the .js when
we are importing the file.

108
00:07:09.075 --> 00:07:12.520
So now I can call my fetch menu.

109
00:07:12.520 --> 00:07:14.420
And what do I need to do with that?

110
00:07:14.420 --> 00:07:16.350
Well remember that we have the store.

111
00:07:17.800 --> 00:07:24.514
Well we could talk to the store,
that now we have an app.store and

112
00:07:24.514 --> 00:07:29.760
say that hey we do have a new menu and
that menu is what

113
00:07:29.760 --> 00:07:34.667
we are receiving
asynchronously from the API.

114
00:07:34.667 --> 00:07:41.998
And because I have a wait, I also need to
upgrade my function to an async function.

115
00:07:46.669 --> 00:07:50.350
I'm just separating responsibilities.

116
00:07:50.350 --> 00:07:53.089
We can do everything in
the DOM content loaded.

117
00:07:53.089 --> 00:07:58.057
But in this way it will look better and
you will see that we

118
00:07:58.057 --> 00:08:02.622
will add more functions here for
different usage.

119
00:08:02.622 --> 00:08:10.244
So after I've done that now instead of
calling the API directly I'm going to just.

120
00:08:10.244 --> 00:08:15.401
Say hey, maybe what we want
if we want to load data and

121
00:08:15.401 --> 00:08:20.570
load data is a function that
is available in menu js.

122
00:08:23.150 --> 00:08:28.276
In case you're wondering why this
import has this syntax compare

123
00:08:28.276 --> 00:08:33.880
with the other one is because API and
a store were using export default.

124
00:08:33.880 --> 00:08:40.088
While a load data needs curly braces
because it's exporting the function,

125
00:08:40.088 --> 00:08:43.970
not as default and
you can export more than one.

126
00:08:45.592 --> 00:08:51.860
That's why it doesn't contain
curly braces API and store.

127
00:08:52.920 --> 00:08:56.422
I mean, so far,
it looks like pretty much the same thing.

128
00:08:56.422 --> 00:09:00.882
So we have, when the page loads,
we are starting app.js,

129
00:09:00.882 --> 00:09:03.827
we're calling load data in menu.js,

130
00:09:03.827 --> 00:09:08.840
load data is calling the API, and
it's storing that in the store.

131
00:09:10.730 --> 00:09:14.021
Probably you're thinking, but
how do I know if the store is changing?

132
00:09:14.021 --> 00:09:18.270
In terms of mean that
in terms of triggering

133
00:09:18.270 --> 00:09:22.820
updates in the UI, we will get there okay.

134
00:09:22.820 --> 00:09:28.298
So we will see how can we detect that has
changed without doing it manually, okay.

135
00:09:28.298 --> 00:09:35.510
We will talk about reactivity later how
can we react to the menu being changed?

136
00:09:35.510 --> 00:09:39.627
Okay, we will get there but for
now we are just chaining methods.

137
00:09:39.627 --> 00:09:41.940
Nothing more than that, okay.

138
00:09:41.940 --> 00:09:44.108
Nothing really interesting.

139
00:09:44.108 --> 00:09:45.990
But now, if I try this.

140
00:09:47.298 --> 00:09:49.500
That's where I said.

141
00:09:49.500 --> 00:09:53.580
It's here.
Let me pull this out.

142
00:09:53.580 --> 00:09:58.572
If I refresh now,
I don't see anything, which is okay.

143
00:09:58.572 --> 00:10:03.564
If I inspect, and they go to the console,

144
00:10:03.564 --> 00:10:07.700
I could check what my app has.

145
00:10:07.700 --> 00:10:09.434
And it has a store.

146
00:10:09.434 --> 00:10:14.320
And the store has an empty cart and
a menu and the menu has data.

147
00:10:16.290 --> 00:10:19.362
Okay, yeah, we're not rendering this yet.

148
00:10:19.362 --> 00:10:25.474
We will get there okay but that's one
part that it's kind of ready okay, so

149
00:10:25.474 --> 00:10:31.510
we have the data that's the first step
yeah it's in memory but it's there

