WEBVTT

1
00:00:00.080 --> 00:00:05.626
Well, as I mentioned before, I said
that this project has no JavaScript so

2
00:00:05.626 --> 00:00:09.157
far, so
I'm going to start working with that.

3
00:00:09.157 --> 00:00:14.575
So I will keep my Chrome there,
so we can have both

4
00:00:14.575 --> 00:00:19.861
at the same time, okay,
my code on my browser,

5
00:00:19.861 --> 00:00:24.639
so I'm not jumping between both options.

6
00:00:24.639 --> 00:00:29.208
The first thing that we need
to add is a JavaScript file.

7
00:00:29.208 --> 00:00:35.625
So if you have ever played with
Vanilla JavaScript few years ago,

8
00:00:35.625 --> 00:00:42.158
one of the scary parts is that you
need to have hundreds of scripts,

9
00:00:42.158 --> 00:00:47.545
one script declaration per
file that you need, okay?

10
00:00:47.545 --> 00:00:51.059
That was the problem,
yeah, it was a problem.

11
00:00:51.059 --> 00:00:56.027
That's why one of the reasons
of JavaScript bundling was that,

12
00:00:56.027 --> 00:01:00.636
not the most important reason,
was more for performance.

13
00:01:00.636 --> 00:01:06.921
But anyway, we were using tools to bundle
all my JavaScript files in one file,

14
00:01:06.921 --> 00:01:10.934
because we didn't have
context per file before.

15
00:01:10.934 --> 00:01:14.633
But today, we are using modern JavaScript.

16
00:01:14.633 --> 00:01:17.566
It's difficult to say modern JavaScript,
because what's modern?

17
00:01:17.566 --> 00:01:23.669
But anyway, today it's like post,
let's say, ES 2017.

18
00:01:23.669 --> 00:01:27.144
That is that we are using
ECMAScript modules,

19
00:01:27.144 --> 00:01:32.040
we are using async await,
we are using class declarations.

20
00:01:32.040 --> 00:01:38.556
So that's what we deal today
with modern JavaScript.

21
00:01:38.556 --> 00:01:44.439
Later today, I'm going to use also
one thing that is from ES 2019 and

22
00:01:44.439 --> 00:01:51.530
2020, but that is, anyway, compatible
with all the browsers these days.

23
00:01:51.530 --> 00:01:56.656
But despite that particular part,
the rest is actually today

24
00:01:56.656 --> 00:02:01.497
compatible with all the browsers,
but no, IE 9, okay?

25
00:02:01.497 --> 00:02:03.910
Yeah, it's not going to be
compatible with IE9, but

26
00:02:03.910 --> 00:02:05.810
we shouldn't care too much about that.

27
00:02:05.810 --> 00:02:11.389
So today, we don't need to create
one script tag per file, and

28
00:02:11.389 --> 00:02:17.937
we can still organize our code in
different files with ES modules, okay?

29
00:02:17.937 --> 00:02:19.730
So we're going to do that.

30
00:02:19.730 --> 00:02:22.604
So they're going to start, and by the way,

31
00:02:22.604 --> 00:02:26.735
this is actually a pretty common
pattern on libraries as well.

32
00:02:26.735 --> 00:02:28.830
You have an entry point.

33
00:02:28.830 --> 00:02:35.985
So the entry point is actually one file
that sometimes it's even called 'app,' okay?

34
00:02:35.985 --> 00:02:40.220
So I'm going to create an app.js file,
okay?

35
00:02:40.220 --> 00:02:44.300
So the app.js file is going
to be our entry point.

36
00:02:45.690 --> 00:02:49.838
So, that entry point,

37
00:02:51.928 --> 00:02:56.130
Which is just the only JavaScript
that we are gonna inject or

38
00:02:56.130 --> 00:02:58.831
we are going to reference in our HTML.

39
00:02:58.831 --> 00:03:02.950
So we are not going to add more scripts,
just app.js.

40
00:03:02.950 --> 00:03:07.616
And maybe we're thinking,
isn't it a good idea to

41
00:03:07.616 --> 00:03:12.729
create a scripts folder and
then add our scripts there?

42
00:03:12.729 --> 00:03:16.280
Well, I could argue that that's for
the past.

43
00:03:17.530 --> 00:03:21.004
I'm not sure if it's a good idea for
this case.

44
00:03:21.004 --> 00:03:22.723
You will see why in a second.

45
00:03:22.723 --> 00:03:27.601
I mean, it was common before to have
the styles folder, the scripts folder, and

46
00:03:27.601 --> 00:03:29.920
the image folder, or images folder.

47
00:03:31.060 --> 00:03:33.821
Well, today,
we can think this differently,

48
00:03:33.821 --> 00:03:36.800
more similar to what you
are used to with a library.

49
00:03:37.850 --> 00:03:42.719
So how many scripts, root scripts,

50
00:03:42.719 --> 00:03:46.480
will we have one app.js?

51
00:03:46.480 --> 00:03:50.160
Well, let's put it in the root,
it's only one file.

52
00:03:51.360 --> 00:03:56.229
The rest of the JavaScript file, I'm not
saying that we will write everything in

53
00:03:56.229 --> 00:04:00.670
one file, but the rest of the files
will be organized by kind of files.

54
00:04:00.670 --> 00:04:05.189
We are going to create components,
we are going to create services.

55
00:04:05.189 --> 00:04:11.190
And then we can have folder for those
ideas instead of the scripts folder that

56
00:04:11.190 --> 00:04:17.110
maybe it's a little bit outdated,
but again, this is just one solution.

57
00:04:17.110 --> 00:04:21.240
As I mentioned there,
you can make your own decision here.

58
00:04:21.240 --> 00:04:26.441
But I wanna emphasize that maybe that
decision of using a script folder,

59
00:04:26.441 --> 00:04:29.679
it's kind of from a different era,
okay, so

60
00:04:29.679 --> 00:04:33.450
it's not really what we're
used to use these days.

61
00:04:35.510 --> 00:04:42.229
So anyway, now, I'm going to create
the file that is empty right now.

62
00:04:42.229 --> 00:04:46.990
And my script tag, by the way,
is not finished yet.

63
00:04:46.990 --> 00:04:51.580
And so I wanna first because we
are doing Vanilla JS from scratch.

64
00:04:51.580 --> 00:04:56.781
And you might not know about this,
but do you know what happens

65
00:04:56.781 --> 00:05:01.683
in terms of performance with our
script as it is right now,

66
00:05:01.683 --> 00:05:05.600
like in a script with a source and
that's all?

67
00:05:07.990 --> 00:05:13.307
So when the browser is parsing
the HTML line by line, let's say,

68
00:05:13.307 --> 00:05:18.237
I'm simplifying, but
when it finds a script tag like that,

69
00:05:18.237 --> 00:05:22.700
it will stop parsing the rest
of the HTML at that point.

70
00:05:22.700 --> 00:05:28.455
It will download the JavaScript file,
it will execute the JavaScript file,

71
00:05:28.455 --> 00:05:33.339
and when it's done with that,
it will continue the rest, okay?

72
00:05:33.339 --> 00:05:38.196
That's why an completely
deprecated best practice today,

73
00:05:38.196 --> 00:05:43.144
so it's deprecated, but
a lot of people, I mean in college or

74
00:05:43.144 --> 00:05:47.142
in some trainings,
they're still saying this,

75
00:05:47.142 --> 00:05:51.829
that you should put your scripts
at the bottom of the body.

76
00:05:51.829 --> 00:05:52.808
Have you ever seen that?

77
00:05:52.808 --> 00:05:56.110
Well, that's deprecated,
you shouldn't be doing that.

78
00:05:56.110 --> 00:05:56.860
But why?

79
00:05:56.860 --> 00:06:02.181
The reason was to render the HTML,
and then the JavaScript file,

80
00:06:02.181 --> 00:06:07.750
because the browser was halting
the parsing at that point.

81
00:06:07.750 --> 00:06:11.500
So then you were seeing
an effect of a white page.

82
00:06:11.500 --> 00:06:15.513
You go to a URL and
you see white or blank for

83
00:06:15.513 --> 00:06:21.000
a lot of time before seeing
even the text of the page.

84
00:06:21.000 --> 00:06:25.344
Well, today,
we have some attributes that we can apply,

85
00:06:25.344 --> 00:06:30.397
such as defer or async, that the code
that you are doing from React or

86
00:06:30.397 --> 00:06:34.229
Vue or Svelte,
it's actually doing this, okay?

87
00:06:34.229 --> 00:06:36.060
So quickly, what's the difference?

88
00:06:36.060 --> 00:06:40.924
This is more for a performance workshop,
but let me give you the insights.

89
00:06:40.924 --> 00:06:45.959
Let's say that if you're
not sure which one to use,

90
00:06:45.959 --> 00:06:50.430
defer or async,
you should use defer, okay?

91
00:06:50.430 --> 00:06:53.170
So let's stay with defer as default.

92
00:06:53.170 --> 00:06:57.265
Defer, it's a Boolean attribute, so
I don't need to specify a value.

93
00:06:57.265 --> 00:07:01.570
Defer will actually do this.

94
00:07:01.570 --> 00:07:06.498
When the browser finds, it's parsing
the HTML, when it finds the script,

95
00:07:06.498 --> 00:07:08.429
it says, it says defer.

96
00:07:08.429 --> 00:07:13.214
Okay, because it's defer,
I will download the file in parallel, but

97
00:07:13.214 --> 00:07:18.348
I'm not going to wait, I will continue
parsing the rest of the HTML, okay?

98
00:07:18.348 --> 00:07:20.630
So it's not halting the parsing.

99
00:07:20.630 --> 00:07:24.402
When the whole parse operation finishes,

100
00:07:24.402 --> 00:07:29.230
at that moment,
it will execute the JavaScript file.

101
00:07:29.230 --> 00:07:37.008
So it will defer the execution
of that file for later, okay?

102
00:07:37.008 --> 00:07:40.783
So it's a good idea to have defer.

103
00:07:40.783 --> 00:07:46.207
When to use async, it's one or the other,
not both, it's one or the other.

104
00:07:46.207 --> 00:07:51.536
Async, today, is more suitable for
small scripts that really

105
00:07:51.536 --> 00:07:57.267
need to be executed as soon as possible,
for example, analytics,

106
00:07:57.267 --> 00:08:02.609
things that you need to send to
your server, things like that.

107
00:08:02.609 --> 00:08:05.234
Async will not halt the parsing,

108
00:08:05.234 --> 00:08:10.483
it will download the file in parallel,
but once the file is ready,

109
00:08:10.483 --> 00:08:15.376
it will halt the parsing and
execute the script at that point.

110
00:08:17.095 --> 00:08:22.884
So it's kind of in the middle between
the original script loading and defer.

111
00:08:22.884 --> 00:08:25.103
But by default, let's say we defer.

