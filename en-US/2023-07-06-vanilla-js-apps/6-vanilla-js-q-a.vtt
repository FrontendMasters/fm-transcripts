WEBVTT

1
00:00:00.360 --> 00:00:04.080
Things like append and appendChild,
assuming we'll cover that later?

2
00:00:04.080 --> 00:00:05.486
&gt;&gt; Yeah, we'll cover both of that later.

3
00:00:05.486 --> 00:00:10.435
But so appendChild,
in this case, it's taking one

4
00:00:10.435 --> 00:00:15.271
HTML element,
one element that we have in memory,

5
00:00:15.271 --> 00:00:19.420
and it's adding that as the last element.

6
00:00:19.420 --> 00:00:23.095
So in this case, I'm taking the h1, and

7
00:00:23.095 --> 00:00:28.980
it's adding that as the last inner
child of the element property.

8
00:00:28.980 --> 00:00:30.420
That in this case is this one.

9
00:00:30.420 --> 00:00:32.910
We're going to do that everything in code.

10
00:00:32.910 --> 00:00:36.490
There are other ways,
instead of appendChild we can use insert.

11
00:00:36.490 --> 00:00:40.415
In this case, we can insert that
in the middle, for example,

12
00:00:40.415 --> 00:00:44.530
not just at the end,
we can insert at first position.

13
00:00:44.530 --> 00:00:50.210
So there, as I mentioned before,
the API, the DOM API, it's not huge.

14
00:00:50.210 --> 00:00:56.160
But it's large enough to take a couple
of days to cover all the API.

15
00:00:56.160 --> 00:01:00.120
So we will cover here the most
important parts of that.

16
00:01:01.150 --> 00:01:06.046
But for example,
if you go to MDN, for example,

17
00:01:06.046 --> 00:01:09.272
and we search for appendChild,

18
00:01:09.272 --> 00:01:14.063
we will see here that we
are seeing that method.

19
00:01:14.063 --> 00:01:18.407
But at the left,
we have all the other methods available,

20
00:01:18.407 --> 00:01:22.672
in this case, for a node,
the interface, it's a node.

21
00:01:22.672 --> 00:01:27.169
So you look at this, so
we have here all these functions,

22
00:01:27.169 --> 00:01:33.566
then we have events, and properties.

23
00:01:33.566 --> 00:01:38.277
So there are many properties available,
many methods available.

24
00:01:38.277 --> 00:01:42.119
The DOM API is large, and
mastering the DOM API,

25
00:01:42.119 --> 00:01:47.760
it's actually good if you actually
wanna do a vanilla JS application.

26
00:01:47.760 --> 00:01:51.310
So we are doing this from a scratch,
so we are going step by step.

27
00:01:51.310 --> 00:01:56.790
And we will see the most important parts
of the API, but there are more, okay?

28
00:01:56.790 --> 00:02:00.740
There are more available in the DOM API,
makes sense?

29
00:02:00.740 --> 00:02:06.233
So later when we will see web components,
we're going to create web components.

30
00:02:06.233 --> 00:02:10.844
And you will understand what's
the difference between your current

31
00:02:10.844 --> 00:02:14.669
React components or
Vue components and web components.

32
00:02:14.669 --> 00:02:18.822
We will see which part of
the API we will use most, okay?

33
00:02:18.822 --> 00:02:24.384
And by the way, this is node, that is
an interface I didn't mention before,

34
00:02:24.384 --> 00:02:29.103
I mentioned HTML element,
that there is a whole structure here.

35
00:02:29.103 --> 00:02:32.095
We have HTML element, we have node, and

36
00:02:32.095 --> 00:02:35.618
then we have different
kinds of HTML elements.

37
00:02:35.618 --> 00:02:41.889
And each element, this is similar to
object-oriented programming, similar.

38
00:02:41.889 --> 00:02:46.009
Which means that each
class in the structure,

39
00:02:46.009 --> 00:02:51.140
it's adding more properties and
more methods.

40
00:02:51.140 --> 00:02:56.542
So it depends on, if you are taking
an HTML image element, it has methods from

41
00:02:56.542 --> 00:03:02.630
HTML image, methods from HTML element, and
method from node, and also from object.

42
00:03:02.630 --> 00:03:07.032
But anyway, we have that hierarchy,
typically you know OOP languages,

43
00:03:07.032 --> 00:03:09.100
also being applied in the DOM API.

44
00:03:10.620 --> 00:03:14.624
So that means that what we
are seeing here from a appendChild,

45
00:03:14.624 --> 00:03:17.090
here we see all the instance methods.

46
00:03:18.260 --> 00:03:23.166
One particular DOM element might have
more methods because the structure

47
00:03:23.166 --> 00:03:26.430
is more complex than just this one.

48
00:03:26.430 --> 00:03:27.350
Make sense?

49
00:03:27.350 --> 00:03:31.320
&gt;&gt; My biggest challenge is
architecting a vanilla JS web app.

50
00:03:31.320 --> 00:03:35.500
Will you discuss on
picking the best patterns?

51
00:03:36.640 --> 00:03:39.962
&gt;&gt; We will see during the rest
of the day different patterns.

52
00:03:39.962 --> 00:03:43.612
And we will discuss pros and
cons of each pattern.

53
00:03:43.612 --> 00:03:47.069
I don't feel that there is a single
answer, like a silver bullet,

54
00:03:47.069 --> 00:03:48.568
like, this is the way.

55
00:03:48.568 --> 00:03:51.826
I have my own preference
on some situations, but

56
00:03:51.826 --> 00:03:54.613
I don't wanna pass my preference to you.

57
00:03:54.613 --> 00:03:57.467
So I wanna show you different patterns.

58
00:03:57.467 --> 00:04:03.420
And that's why we're going to implement
different patterns as well in our project.

59
00:04:03.420 --> 00:04:08.154
So then if you know pros and cons, you
can pick whatever works best for you or

60
00:04:08.154 --> 00:04:09.720
for your team.

61
00:04:09.720 --> 00:04:14.498
Sometimes when you are working
with a team, with a company,

62
00:04:14.498 --> 00:04:20.940
that company creates a style guideline
when you are working with vanilla JS.

63
00:04:20.940 --> 00:04:22.813
And there you will explain,

64
00:04:22.813 --> 00:04:27.195
okay, we are going to use this
design pattern and that way of work.

65
00:04:27.195 --> 00:04:32.250
I don't think there is one that is like,
this is the one you have to use.

66
00:04:32.250 --> 00:04:34.301
So sometimes it's a matter of taste.

67
00:04:34.301 --> 00:04:38.490
And sometimes it's a matter of the kind
of project that you're building.

