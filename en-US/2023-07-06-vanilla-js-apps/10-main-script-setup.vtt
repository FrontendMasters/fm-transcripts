WEBVTT

1
00:00:00.000 --> 00:00:05.065
Now coming back here,
most of the time what

2
00:00:05.065 --> 00:00:10.134
we want is to work with the page, okay?

3
00:00:10.134 --> 00:00:14.999
We need to work with the patient and
actually,

4
00:00:14.999 --> 00:00:22.255
because this is going to be executed
after the parsing has finished.

5
00:00:22.255 --> 00:00:25.936
I could directly do things
like getElementByID, or

6
00:00:25.936 --> 00:00:28.790
getElementsByName or query selector.

7
00:00:28.790 --> 00:00:33.652
So I could do this in a defer script,
okay?

8
00:00:33.652 --> 00:00:38.039
So I can go and grab my nav, okay?

9
00:00:38.039 --> 00:00:40.410
Some things like that, I can do that.

10
00:00:40.410 --> 00:00:45.765
However, it's not a good practice, why?

11
00:00:45.765 --> 00:00:48.186
Because some browsers, I mean,

12
00:00:48.186 --> 00:00:52.681
it's not really happening in
the real world, but in theory,

13
00:00:52.681 --> 00:00:58.488
it might happen that some browsers are
still working in the creation of the DOM.

14
00:00:58.488 --> 00:01:01.022
So the parsing has finished, but for

15
00:01:01.022 --> 00:01:05.285
some reason that DOM structure
in memory is not finished yet.

16
00:01:05.285 --> 00:01:10.523
So that's why the window
object has an event that

17
00:01:10.523 --> 00:01:16.399
we can listen to that specifies
that the DOM is ready for

18
00:01:16.399 --> 00:01:22.278
manipulation, and
that happens always after defer,

19
00:01:22.278 --> 00:01:25.251
after my code is executed.

20
00:01:25.251 --> 00:01:30.058
So the event is known as

21
00:01:30.058 --> 00:01:34.618
DOM content loaded.

22
00:01:34.618 --> 00:01:38.714
And here we are going to
see that they were not,

23
00:01:38.714 --> 00:01:43.653
I mean the W3C spec is not
completely following the same

24
00:01:43.653 --> 00:01:47.877
naming guideline as for
the rest of the events.

25
00:01:47.877 --> 00:01:51.126
This is kind of an exception I will
get into that later but anyway.

26
00:01:51.126 --> 00:01:56.480
So actually I'm going to execute
something there, for example that code.

27
00:01:56.480 --> 00:02:00.915
And for now,
let's say console.log, my nav.

28
00:02:00.915 --> 00:02:04.816
So, meaning that to work with the DOM,

29
00:02:04.816 --> 00:02:10.138
it's better, To wait for the event.

30
00:02:14.740 --> 00:02:21.512
Before that event, the DOM objects that
you wanna manipulate might not be ready,

31
00:02:21.512 --> 00:02:26.434
might not be in memory, and
they may be in like weird state.

32
00:02:26.434 --> 00:02:31.890
So that's why most of the time,
we're going to use DOMContentLoaded.

33
00:02:31.890 --> 00:02:36.442
If you have ever played with
JavaScript like 10 years ago,

34
00:02:36.442 --> 00:02:41.182
15 years ago, you probably have
heard about the load event.

35
00:02:41.182 --> 00:02:46.167
That was the common scenario,
like in the IE era, Netscape and

36
00:02:46.167 --> 00:02:49.286
IE era, the load event is still there.

37
00:02:49.286 --> 00:02:53.221
Does anyone know the difference between
the load event and the DOMContentLoaded?

38
00:02:54.440 --> 00:02:55.995
I know the difference,
so I will explain that.

39
00:02:55.995 --> 00:02:59.615
[LAUGH] The load waits for

40
00:02:59.615 --> 00:03:05.234
everything in the page to be loaded.

41
00:03:05.234 --> 00:03:10.624
That means style sheets are loaded and
parsed, images are loaded,

42
00:03:10.624 --> 00:03:16.504
web fonts are loaded, videos
are loaded when everything is ready.

43
00:03:16.504 --> 00:03:23.053
If you wait for that, you're missing the
opportunity to manipulate the DOM earlier.

44
00:03:23.053 --> 00:03:26.134
And maybe the user is I mean,
if you have a video for example,

45
00:03:26.134 --> 00:03:29.819
maybe the video is still loading But
the user is trying to use the app, and

46
00:03:29.819 --> 00:03:33.282
it's not working because you
didn't execute the JavaScript yet.

47
00:03:33.282 --> 00:03:37.348
You didn't initialize the app because
you're waiting for the video to finish,

48
00:03:37.348 --> 00:03:38.977
which doesn't make any sense.

49
00:03:38.977 --> 00:03:43.679
So that's why we typically initialize
our app in DOM content loaded,

50
00:03:43.679 --> 00:03:45.841
that means as soon as possible.

51
00:03:45.841 --> 00:03:48.853
If the browser, after executing my code,

52
00:03:48.853 --> 00:03:53.214
is still downloading videos,
fonts, images, it's fine.

53
00:03:53.214 --> 00:03:56.816
In fact, that doesn't mean that
when DOM content loaded is fired,

54
00:03:56.816 --> 00:04:00.050
that doesn't mean that the user
has actually seen the page.

55
00:04:00.050 --> 00:04:03.870
In fact,
I'm pretty sure it's not seen the page.

56
00:04:03.870 --> 00:04:07.522
This event happens before rendering, but

57
00:04:07.522 --> 00:04:13.009
it means that the DOM in memory
is ready for us to manipulation.

58
00:04:13.009 --> 00:04:15.949
Manipulation means add some things, add

59
00:04:15.949 --> 00:04:19.500
event handlers, understanding
what's going on,

60
00:04:19.500 --> 00:04:23.082
adding a button hooking
an event to the button, so

61
00:04:23.082 --> 00:04:28.934
when it appears on the screen and the user
clicks on the button, it will work, okay?

62
00:04:28.934 --> 00:04:31.995
Makes sense?
So everything that you do for

63
00:04:31.995 --> 00:04:37.820
initialization, you do that in
DOM content loaded as an event.

64
00:04:37.820 --> 00:04:45.075
It's like what we typically use as
our initializer for the whole app.

65
00:04:45.075 --> 00:04:48.262
And by the way,
there are more events, I mean,

66
00:04:48.262 --> 00:04:53.603
in the life cycle of the page load, there
are more events that you can hook into,

67
00:04:53.603 --> 00:04:56.031
but they are not part of the DOM API.

68
00:04:56.031 --> 00:05:01.333
They're part of a performance navigation
API that is used for performance.

69
00:05:01.333 --> 00:05:04.559
So we are not going to cover that today,
but

70
00:05:04.559 --> 00:05:08.334
there are a lot of events
in terms of the timeline.

71
00:05:08.334 --> 00:05:12.190
When we are working with performance, you
can know when the rendering appear, for

72
00:05:12.190 --> 00:05:14.961
example, for when the user is
seeing a pixel on the screen.

73
00:05:14.961 --> 00:05:17.916
When the user is seeing
that's called first paint.

74
00:05:17.916 --> 00:05:22.634
You can know when the user has it's
actually seen the most important

75
00:05:22.634 --> 00:05:25.858
part of the page that can be an image or
a title,

76
00:05:25.858 --> 00:05:30.198
its first contentful paint,
the largest contentful paint.

77
00:05:30.198 --> 00:05:36.104
So there are a lot of events that
are not part of the DOM API.

78
00:05:36.104 --> 00:05:39.965
They're part of other APIs that
browsers might implement or not.

79
00:05:39.965 --> 00:05:44.909
Like typically Chrome implements all of
them, Firefox, and Safari, it depends.

80
00:05:44.909 --> 00:05:50.960
So, here, we are covering the DOM API,
that is an API that works everywhere,

81
00:05:50.960 --> 00:05:55.106
even in an old BlackBerry,
things like that, okay?

82
00:05:55.106 --> 00:05:59.323
So far nothing is on the screen yet,
but actually,

83
00:05:59.323 --> 00:06:04.636
I could take my nav for example,
and I can change its inner HTML.

84
00:06:04.636 --> 00:06:10.425
This is just for playing a little
bit I'm not going to use this.

85
00:06:10.425 --> 00:06:15.375
So I'm going to write a back tick here,
and I'm going to show

86
00:06:15.375 --> 00:06:20.421
you that I can write my own HTML,
like hello DOM like that, and

87
00:06:20.421 --> 00:06:26.466
you can see that on the screen I can
write HTML within a JavaScript string.

88
00:06:30.830 --> 00:06:32.620
You can see it's a string.

89
00:06:32.620 --> 00:06:33.580
When I'm saving this.

90
00:06:33.580 --> 00:06:38.616
This web server has live reload,
so every time I save.

91
00:06:38.616 --> 00:06:39.798
It works here.
I mean,

92
00:06:39.798 --> 00:06:44.627
you if I let's let's try
to analyze the DOM now.

93
00:06:44.627 --> 00:06:48.309
Anyway, this is not the code
that I want for my app.

94
00:06:48.309 --> 00:06:51.891
But now if I inspect my code,

95
00:06:51.891 --> 00:06:57.874
my nav originally have links and
a span, okay?

96
00:06:57.874 --> 00:07:01.783
Can you see that in my original HTML,
but they're not here anymore?

97
00:07:01.783 --> 00:07:06.805
My nav only has an H2 and
a paragraph, why?

98
00:07:06.805 --> 00:07:10.844
Because I changed the DOM
dynamically with JavaScript.

99
00:07:10.844 --> 00:07:16.305
When the DOM was ready, the original DOM
was ready, I replaced it completely, and

100
00:07:16.305 --> 00:07:21.778
now I have an H2 and a paragraph, and
that's because I'm using this code here.

101
00:07:24.813 --> 00:07:26.227
Okay, makes sense?

102
00:07:26.227 --> 00:07:28.891
By the way,
I'm using the backtick just for

103
00:07:28.891 --> 00:07:34.157
making a template string that can be multi
line, so it's easier to write HTML, okay?

104
00:07:34.157 --> 00:07:37.974
But it can be just a normal HTML as well.

