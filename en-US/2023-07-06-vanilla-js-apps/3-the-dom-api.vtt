WEBVTT

1
00:00:00.000 --> 00:00:05.489
So I want you to emphasize that warning,
okay?

2
00:00:05.489 --> 00:00:07.936
That this is not a common situations,

3
00:00:07.936 --> 00:00:11.992
that we are going to mix different
techniques at the same time.

4
00:00:11.992 --> 00:00:15.972
I mean, we can, it will work,
but you will see, for example,

5
00:00:15.972 --> 00:00:18.842
on doing reactive
programming with the DOM.

6
00:00:18.842 --> 00:00:21.363
We will see two or three techniques.

7
00:00:21.363 --> 00:00:26.196
Yeah, probably you pick one and
stick with that one for the whole project,

8
00:00:26.196 --> 00:00:28.432
but we will mix all of them, okay?

9
00:00:28.432 --> 00:00:33.363
So before seeing some code,
but now we will see code,

10
00:00:33.363 --> 00:00:38.075
but before working with our project,
let me go over

11
00:00:38.075 --> 00:00:43.023
some essentials,
talking about the DOM API, okay?

12
00:00:43.023 --> 00:00:45.047
So let's start defining the DOM.

13
00:00:45.047 --> 00:00:48.210
The DOM is the Document Object Model.

14
00:00:48.210 --> 00:00:53.392
And actually it's a representation
of the structure of a document in

15
00:00:53.392 --> 00:00:58.680
memory that will let us connect to
web pages, the HTML to JavaScript.

16
00:00:58.680 --> 00:01:04.000
It's actually a memory
representation of your HTML.

17
00:01:04.000 --> 00:01:05.251
Is that the API?

18
00:01:05.251 --> 00:01:06.722
No, that's the DOM.

19
00:01:06.722 --> 00:01:09.220
So the DOM isn't a structure in memory.

20
00:01:09.220 --> 00:01:13.761
That browsers are creating when
they are rendering a page, okay?

21
00:01:13.761 --> 00:01:14.703
That's the DOM.

22
00:01:14.703 --> 00:01:19.090
And the API, it's an API,
so a list of functions,

23
00:01:19.090 --> 00:01:24.399
properties available under
different objects that a browser

24
00:01:24.399 --> 00:01:29.721
is exposing to us so
we can manipulate, that's a structure.

25
00:01:29.721 --> 00:01:33.560
From an scripting language
that today is JavaScript.

26
00:01:33.560 --> 00:01:38.170
So we can change the structure in memory,
okay?

27
00:01:38.170 --> 00:01:43.292
We can change a property, we can add
an element to that structure in memory.

28
00:01:43.292 --> 00:01:50.099
And that will trigger an update in the
rendering HTML that you see on the screen.

29
00:01:50.099 --> 00:01:55.685
So talking,
this is actually quick and dirty,

30
00:01:55.685 --> 00:02:00.723
but it's like changing your HTML, okay?

31
00:02:00.723 --> 00:02:01.830
From JavaScript.

32
00:02:01.830 --> 00:02:07.629
Actually, we are not changing the HTML, we
are changing the DOM, but the browser is

33
00:02:07.629 --> 00:02:13.289
representing that change in the UI and it
looks like we are changing the HTML file.

34
00:02:13.289 --> 00:02:17.361
I mean the string, the HTML,
we are not changing that, okay?

35
00:02:17.361 --> 00:02:23.057
We are changing memory representation, but
it looks like we are changing the HTML.

36
00:02:23.057 --> 00:02:26.933
So the DOM API is
available in many options.

37
00:02:26.933 --> 00:02:31.625
And we're not going to
cover 100% of the DOM API,

38
00:02:31.625 --> 00:02:38.520
because it's really large, and there
are many things that I've never used.

39
00:02:38.520 --> 00:02:42.093
So there are many parts of the DOM API
that are very specific for

40
00:02:42.093 --> 00:02:45.473
some specific situations that
typically you don't use.

41
00:02:45.473 --> 00:02:51.458
So I'm not going to focus on like
being verbose on the all the DOM API.

42
00:02:51.458 --> 00:02:57.036
You have MDN and other places where
you can see everything in the DOM API.

43
00:02:57.036 --> 00:03:00.780
So I'm going to show you
what's most important.

44
00:03:00.780 --> 00:03:05.050
So we have for example,
the window global object.

45
00:03:05.050 --> 00:03:10.010
The window global object is,
in JavaScript the current global context,

46
00:03:10.010 --> 00:03:15.050
when you're running your scripts unless
we are talking about the worker,

47
00:03:15.050 --> 00:03:20.090
a web worker, a service worker or
other kind of workers that we have today.

48
00:03:20.090 --> 00:03:23.570
Unless we're talking about
workers those are threads.

49
00:03:23.570 --> 00:03:28.227
Every script that you have have
access to the global variable, and

50
00:03:28.227 --> 00:03:31.482
JavaScript goes to
the window global object.

51
00:03:31.482 --> 00:03:35.316
And most of the functions
that we will see later

52
00:03:35.316 --> 00:03:38.868
today are attached to that global option.

53
00:03:38.868 --> 00:03:42.410
The window represents the window.

54
00:03:42.410 --> 00:03:46.004
The problem is that the window
is not a clear concept this day.

55
00:03:46.004 --> 00:03:47.308
So what's a window?

56
00:03:47.308 --> 00:03:53.550
This comes from the 90s where
you have a window for one.

57
00:03:53.550 --> 00:03:58.863
So one page was loaded in one window,
if you wanna open two pages,

58
00:03:58.863 --> 00:04:02.154
you need to create a new browser window.

59
00:04:02.154 --> 00:04:04.679
We didn't have tabs at the time, okay?

60
00:04:04.679 --> 00:04:06.754
So we don't have that,
we didn't have tabs.

61
00:04:06.754 --> 00:04:11.823
So every page was actually on a window,
and one window, one page.

62
00:04:11.823 --> 00:04:13.203
This is not the case anymore.

63
00:04:13.203 --> 00:04:17.571
So it's an unclear concept these days,
okay?.

64
00:04:17.571 --> 00:04:23.277
But let's say that roughly it's like
a navigation, like a main navigation,

65
00:04:23.277 --> 00:04:27.520
but it's not still there because
we have iframes as well.

66
00:04:27.520 --> 00:04:31.636
When we have iframes like iframe
is a like HTML document or

67
00:04:31.636 --> 00:04:36.892
the within another document, well,
it gets more complicated, okay?

68
00:04:36.892 --> 00:04:37.979
But that's the window.

69
00:04:37.979 --> 00:04:40.023
Then we have the Document Object.

70
00:04:40.023 --> 00:04:45.525
That is more clear,
a document is a DOM, so a structure.

71
00:04:45.525 --> 00:04:52.111
Typically since the 90s, we used to
have only one document per window.

72
00:04:52.111 --> 00:04:56.388
So one HTML we are loading one HTML
if you have a link to another HTML,

73
00:04:56.388 --> 00:04:58.200
that's another document.

74
00:04:58.200 --> 00:05:03.616
So the only exception here were iframes or
even framesets originally,

75
00:05:03.616 --> 00:05:08.866
where in that case, we could load
more HTMLs at the same time, okay?

76
00:05:08.866 --> 00:05:13.657
But these days, and we will see
that later with web components,

77
00:05:13.657 --> 00:05:19.966
we can have more than one document in the
same page navigation even without iframes.

78
00:05:19.966 --> 00:05:23.566
And the document object
represents the current DOM,

79
00:05:23.566 --> 00:05:27.170
the Document Object Model,
that memory structure.

80
00:05:27.170 --> 00:05:29.280
Okay, that's the structure in memory.

81
00:05:29.280 --> 00:05:36.210
And then we have the domain API
available on every object in the DOM.

82
00:05:36.210 --> 00:05:39.924
So we will have one
object per HTML element.

83
00:05:39.924 --> 00:05:45.433
So every HTML element in your
web app will have an object.

84
00:05:45.433 --> 00:05:48.181
And that object, will have the DOM API.

85
00:05:48.181 --> 00:05:52.691
Or one part of the DOM API
is sitting there.

86
00:05:52.691 --> 00:05:57.287
So we can change things,
we can add, children,

87
00:05:57.287 --> 00:06:00.661
we can remove elements from there.

88
00:06:00.661 --> 00:06:05.542
And I'm saying there, other notes,
we won't get too deep in that part,

89
00:06:05.542 --> 00:06:10.060
but actually, when you have text nodes,
we have comments in HTML.

90
00:06:10.060 --> 00:06:13.797
Also, those elements that
they don't feel like objects,

91
00:06:13.797 --> 00:06:18.442
when you see the HTML, they're also
objects, and they have also an API.

92
00:06:18.442 --> 00:06:22.015
I mean, we don't typically want to
deal today at least with comments.

93
00:06:22.015 --> 00:06:24.307
I mean, if you have comments in your HTML,

94
00:06:24.307 --> 00:06:27.061
why do you wanna manipulate
that from JavaScript?

95
00:06:27.061 --> 00:06:31.300
It was a thing years ago to do some hacks,
okay?

96
00:06:31.300 --> 00:06:33.606
But not today.

97
00:06:33.606 --> 00:06:37.802
Anyway quick sample basic,
this is very basic I know, but

98
00:06:37.802 --> 00:06:41.840
some of you,
maybe the first time you're seeing this.

99
00:06:41.840 --> 00:06:46.664
Let's say we have that HTML,
that's an HTML file index.html file,

100
00:06:46.664 --> 00:06:48.970
we'll load that in the browser.

101
00:06:48.970 --> 00:06:56.458
With this file, each element will be
represented by an object of an interface.

102
00:06:56.458 --> 00:07:01.150
Let's say a class with
a name HTML element.

103
00:07:01.150 --> 00:07:03.881
That's the class name in JavaScript, okay?

104
00:07:03.881 --> 00:07:05.966
Originally, it was known as an interface.

105
00:07:05.966 --> 00:07:09.133
But if you're coming from TypeScript or
other languages,

106
00:07:09.133 --> 00:07:11.170
you will get better in the term class.

107
00:07:11.170 --> 00:07:14.029
So there is an HTML element, okay?

108
00:07:14.029 --> 00:07:17.861
And also, we have other elements
inheriting from that one.

109
00:07:17.861 --> 00:07:23.447
For example, we can have an HTML
image element that is the class or

110
00:07:23.447 --> 00:07:27.421
the interface when you have an AMG tag,
okay?

111
00:07:27.421 --> 00:07:31.297
These objects or these elements,
we have properties,

112
00:07:31.297 --> 00:07:34.929
instance properties and
methods to work with them.

113
00:07:34.929 --> 00:07:40.070
Changes in those properties will
trigger updating the user interface.

114
00:07:40.070 --> 00:07:44.260
And this is important,
when you're released the thread.

115
00:07:44.260 --> 00:07:51.269
So sometimes I hear from React developers
that they like the virtual DOM, okay?

116
00:07:51.269 --> 00:07:54.558
That's a concept that
doesn't exist a vanilla.js,

117
00:07:54.558 --> 00:07:57.067
a virtual DOM, so what's a virtual DOM?

118
00:07:57.067 --> 00:08:01.930
So virtual DOM in the case of React,
every library is different.

119
00:08:01.930 --> 00:08:06.894
It's actually like a clone of the DOM,
the real DOM, but

120
00:08:06.894 --> 00:08:11.145
managed completely by
the JavaScript library.

121
00:08:11.145 --> 00:08:14.383
It's just like an array,
it's a collection in memory.

122
00:08:14.383 --> 00:08:18.373
It has no direct relationship
with the real DOM.

123
00:08:18.373 --> 00:08:19.981
That's the virtual DOM.

124
00:08:19.981 --> 00:08:24.483
And some people think that,
well, it's better to work with

125
00:08:24.483 --> 00:08:29.001
the virtual DOM because then
React will update the real DOM.

126
00:08:29.001 --> 00:08:34.093
I mean, for example if you are making
ten changes at once, React

127
00:08:34.093 --> 00:08:40.239
will receive that only in the virtual DOM
and it will update the real DOM once.

128
00:08:40.239 --> 00:08:43.022
So it's more performant than vanilla.js.

129
00:08:43.022 --> 00:08:47.228
And my first reaction to
that is that's false,

130
00:08:47.228 --> 00:08:52.707
because if you're making ten
changes in the real DOM, okay?

131
00:08:52.707 --> 00:08:56.470
It won't trigger any updates
until you release the thread.

132
00:08:56.470 --> 00:08:59.159
So it will be kind of
similar in that case.

133
00:08:59.159 --> 00:09:04.739
You will release the thread,
and the layout changes.

134
00:09:04.739 --> 00:09:09.003
We will trigger when you release
a thread because you're competing,

135
00:09:09.003 --> 00:09:11.026
we have only one main thread, and

136
00:09:11.026 --> 00:09:15.090
our child script is competing with
the browser to use that thread.

137
00:09:15.090 --> 00:09:20.340
So if you're changing the same property,
in the real DOM ten times

138
00:09:20.340 --> 00:09:25.421
in the same execution,
the real DOM will just take the last one.

139
00:09:25.421 --> 00:09:29.168
So we will see on the page the last one.

140
00:09:29.168 --> 00:09:33.783
I'm simplifying this a little bit,
I'm not saying that this is the same as

141
00:09:33.783 --> 00:09:38.630
the virtual DOM in terms of performance,
but we have some things here in mind.

142
00:09:38.630 --> 00:09:44.004
Also, this might lead to some issues, and
I have these issues in my web apps a lot.

143
00:09:44.004 --> 00:09:46.868
And there was a trick before
that is a set timeout 0,

144
00:09:46.868 --> 00:09:49.220
I'm not sure if you have heard about that.

145
00:09:49.220 --> 00:09:52.036
Because you change something in the DOM,
and

146
00:09:52.036 --> 00:09:56.646
then you wanna use it immediately in
the same execution, and you can't.

147
00:09:56.646 --> 00:10:01.382
Because it's not yet,
we didn't leave enough time for

148
00:10:01.382 --> 00:10:05.020
the browser to actually make that change.

149
00:10:05.020 --> 00:10:09.079
So the trick was to create
the set timeout 0, and

150
00:10:09.079 --> 00:10:15.717
there is to defer an execution after
the browser was making the changes, okay?

151
00:10:15.717 --> 00:10:17.490
Anyway, we don't need to do it anymore.

152
00:10:17.490 --> 00:10:20.330
But just to let you know that happened.

153
00:10:20.330 --> 00:10:26.204
And we can listen to events happening in
that element and reacting consequences.

154
00:10:26.204 --> 00:10:29.964
Probably you have heard about
these you have seen this,

155
00:10:29.964 --> 00:10:33.009
the famous today add event listener, okay?

156
00:10:33.009 --> 00:10:38.918
So for example for this particular code
that you see there, we have the document.

157
00:10:38.918 --> 00:10:43.410
I'm simplifying this a little bit, but we
have the document the document will have

158
00:10:43.410 --> 00:10:47.466
the body and there is an HTML body
element, inheriting from HTML element.

159
00:10:47.466 --> 00:10:51.130
Then we have the header element inside,
okay?

160
00:10:51.130 --> 00:10:54.020
It's a child of the body, the header.

161
00:10:54.020 --> 00:10:57.716
Inside the header we have the h1,
the interface for

162
00:10:57.716 --> 00:10:59.990
the h1 is called HTML heading.

163
00:10:59.990 --> 00:11:02.790
So we don't have an HTML h1 heading.

164
00:11:02.790 --> 00:11:09.331
It's just a heading that will
be the interface for h1 to h6.

165
00:11:09.331 --> 00:11:12.155
We have the paragraph and
we have an image.

166
00:11:12.155 --> 00:11:18.260
And that's the DOM, that those
are objects in memory in JavaScript

167
00:11:18.260 --> 00:11:24.487
of one specific class,
each object having methods and properties.

168
00:11:24.487 --> 00:11:28.114
To work with those
elements from JavaScript,

169
00:11:28.114 --> 00:11:31.090
we can pick them from the current DOM.

170
00:11:31.090 --> 00:11:35.331
So I'm in JavaScript, so
I can pick one element from the DOM or

171
00:11:35.331 --> 00:11:40.074
we can create them from JavaScript,
and then inject them in the DOM.

172
00:11:40.074 --> 00:11:44.742
So if I wanna play with an image
like every five seconds I wanna

173
00:11:44.742 --> 00:11:47.222
change the source of the image.

174
00:11:47.222 --> 00:11:51.010
If I wanna change the photo, like
a photo gallery or something like that,

175
00:11:51.010 --> 00:11:52.425
how can I change the image?

176
00:11:52.425 --> 00:11:57.118
Well, I need a reference to that DOM
element for the for the img tag.

177
00:11:57.118 --> 00:12:01.796
So I can pick them from the DOM, or
I can create it on the fly with JavaScript

178
00:12:01.796 --> 00:12:06.801
creating a new object, for example, or
we will see different ways to do that.

179
00:12:06.801 --> 00:12:08.588
And then put it into the DOM.

180
00:12:08.588 --> 00:12:12.048
But we need a reference in
JavaScript to do that, okay?

181
00:12:12.048 --> 00:12:18.177
To have a reference and
we can read its contents.

182
00:12:18.177 --> 00:12:22.524
So when we have a reference, we can
read the content, change the content,

183
00:12:22.524 --> 00:12:23.910
remove it from the DOM.

184
00:12:23.910 --> 00:12:27.977
So I can take a reference
to an img tag and

185
00:12:27.977 --> 00:12:32.667
then remove it or
I can add new elements to it.

186
00:12:32.667 --> 00:12:37.820
So for example, back in our example,
if I get the reference

187
00:12:37.820 --> 00:12:42.664
to the HTML heading element,
the h1 from JavaScript,

188
00:12:42.664 --> 00:12:48.040
I can then delete that,
I can remove that object from the DOM.

189
00:12:48.040 --> 00:12:50.939
And if I remove that object from the DOM,

190
00:12:50.939 --> 00:12:54.875
it will trigger an update
after we release the thread.

191
00:12:54.875 --> 00:12:58.650
It will release an update and
it will remove the h1, so

192
00:12:58.650 --> 00:13:01.860
you won't see the h1 in
the browser anymore.

193
00:13:01.860 --> 00:13:06.319
It's like going to the DevTools,
inspecting the HTML and

194
00:13:06.319 --> 00:13:09.050
deleting the h1 manually, okay?

195
00:13:09.050 --> 00:13:15.607
If I take the img tag, you can see the img
tag right now has a hidden property set.

196
00:13:15.607 --> 00:13:19.878
Well, I can go when I get
the reference to that attribute for

197
00:13:19.878 --> 00:13:23.820
that img element,
I can change the hidden attribute.

198
00:13:23.820 --> 00:13:29.499
So if I change the hidden attribute,
I'm updating the contents

199
00:13:29.499 --> 00:13:34.458
of that HTML element it will
trigger a change in the URL.

200
00:13:34.458 --> 00:13:38.050
And also it's not just
playing with the current DOM.

201
00:13:38.050 --> 00:13:43.940
I can create a new HTML image element,
but we'll see how later.

202
00:13:43.940 --> 00:13:49.283
And then I can attach that
new element to the header,

203
00:13:49.283 --> 00:13:56.090
for example, and that will trigger
a new img element in your HTML.

204
00:13:56.090 --> 00:14:03.160
So that's the idea of how we
manipulate the content with vanilla.js.

205
00:14:03.160 --> 00:14:08.860
So if you're coming from React,
it's not like we have a state.

206
00:14:08.860 --> 00:14:10.820
It's not like we have a render method.

207
00:14:10.820 --> 00:14:15.260
No, we are talking directly
to that DOM structure.

208
00:14:15.260 --> 00:14:17.764
Yeah, question?

209
00:14:17.764 --> 00:14:20.824
What do you mean release the main thread?

210
00:14:20.824 --> 00:14:26.662
Release the thread, you can release the
thread in different ways in JavaScript,

211
00:14:26.662 --> 00:14:31.493
but the simplest way to understand
that is that your function ends.

212
00:14:31.493 --> 00:14:34.880
So you're executing some code,
because of some reason.

213
00:14:34.880 --> 00:14:39.830
Most of the time,
it's because you have an event listener.

214
00:14:39.830 --> 00:14:42.978
For example, you click on a button,
you are listening for that click event and

215
00:14:42.978 --> 00:14:43.847
you have a function.

216
00:14:43.847 --> 00:14:45.780
Well, at one point that function ends.

217
00:14:45.780 --> 00:14:47.072
When that function ends,

218
00:14:47.072 --> 00:14:50.606
you're releasing the thread because
there is no more code to execute.

219
00:14:50.606 --> 00:14:56.514
So the JavaScript engine says, or actually
the Shastin time compiler thinks,,

220
00:14:56.514 --> 00:15:01.235
there is no more code to execute,
so we are releasing the thread.

221
00:15:01.235 --> 00:15:05.060
And in that point,
there is a set of operations in order.

222
00:15:05.060 --> 00:15:07.730
And the browser will say, okay,
JavaScript, you finished.

223
00:15:07.730 --> 00:15:11.787
Okay, it's my turn now, and
now I will do relay out, re-render there,

224
00:15:11.787 --> 00:15:15.779
repaying, there are a couple of
processes there until it checks again if

225
00:15:15.779 --> 00:15:17.950
there are more JavaScript to execute.

226
00:15:17.950 --> 00:15:22.158
So talking this or
saying this in the quick and

227
00:15:22.158 --> 00:15:26.599
dirty way is when your
event handler finishes.

228
00:15:26.599 --> 00:15:30.931
When you have a function, so
if you have a while true in JavaScript,

229
00:15:30.931 --> 00:15:33.215
you're not releasing the thread.

230
00:15:33.215 --> 00:15:36.556
And most of the browser's
today after a couple of say,

231
00:15:36.556 --> 00:15:39.330
I think Firefox, I think it's two seconds.

232
00:15:39.330 --> 00:15:44.532
They will show you a message saying, hey,
this website is not responding anymore.

233
00:15:44.532 --> 00:15:47.570
Should we kill the child's grip or
something like that?

234
00:15:47.570 --> 00:15:52.978
Because if you don't release the thread,
and there is only one thread,

235
00:15:52.978 --> 00:15:56.800
the browser cannot render
anything on the screen.

236
00:15:56.800 --> 00:16:01.205
And when you are with your phone and
you are scrolling a website, and

237
00:16:01.205 --> 00:16:05.313
you feel that it's not scrolling,
that it's kind of shanky.

238
00:16:05.313 --> 00:16:09.146
That's because most of the time
there is a JavaScript code there,

239
00:16:09.146 --> 00:16:11.204
there is not releasing the thread.

240
00:16:11.204 --> 00:16:16.082
And because it's not releasing the thread,
the browser has no enough time

241
00:16:16.082 --> 00:16:21.050
to detect that you are scrolling and
to relay out the contents of the screen.

242
00:16:21.050 --> 00:16:25.926
So the thread is a big performance issue,
or understanding

243
00:16:25.926 --> 00:16:31.496
the thread is a big performance
issues that you need to understand.

244
00:16:31.496 --> 00:16:36.533
When you have things that will
take a lot of CPU time, you should

245
00:16:36.533 --> 00:16:42.733
move that into a new thread that in
JavaScript is known as a web worker, okay?

246
00:16:42.733 --> 00:16:44.364
And that's for a different day.

247
00:16:44.364 --> 00:16:49.076
If we find delete a note and
then try to retrieve it in the next line,

248
00:16:49.076 --> 00:16:50.519
where do we find it?

249
00:16:50.519 --> 00:16:55.084
If you're using the DOM API to
retrieve it won't be there because

250
00:16:55.084 --> 00:16:58.072
you'll remove it from the DOM structure,

251
00:16:58.072 --> 00:17:02.977
but the user is still seeing that
on the screen, that's the problem.

252
00:17:02.977 --> 00:17:06.502
So when you wanna show, I mean,
you wanna show a timer or

253
00:17:06.502 --> 00:17:11.452
something that is changing on the page,
you need to release the thread because

254
00:17:11.452 --> 00:17:14.383
if not,
the user will see the last state only.

255
00:17:14.383 --> 00:17:16.930
I think that probably will clarify that.

256
00:17:16.930 --> 00:17:20.050
So when you're working with the DOM API
without releasing the thread,

257
00:17:20.050 --> 00:17:22.027
you're working with the memory structure.

258
00:17:22.027 --> 00:17:24.170
So if you remove something
from the memory structure, and

259
00:17:24.170 --> 00:17:26.632
then you go through a structure and
see if it's there, it's not.

260
00:17:26.632 --> 00:17:29.912
Because you remove that
from the structure, but

261
00:17:29.912 --> 00:17:33.600
the user is still seeing that
while you are doing that.

262
00:17:33.600 --> 00:17:34.120
Okay, so

263
00:17:34.120 --> 00:17:38.420
the difference is that when you're
released the thread the browser will see.

264
00:17:38.420 --> 00:17:43.994
Now, if the what you see on
the screen matches the current DOM.

265
00:17:43.994 --> 00:17:48.833
It's like the diff that React is doing
between the vDOM and the virtual DOM and

266
00:17:48.833 --> 00:17:49.738
the real DOM.

267
00:17:49.738 --> 00:17:53.170
I'm simplifying, but
it's kind of similar idea.

268
00:17:53.170 --> 00:17:57.796
And then you will realize that there were
changes, and it will do a real layout and

269
00:17:57.796 --> 00:17:59.167
repaint on the screen.

270
00:17:59.167 --> 00:18:02.520
So in this case,
I'm not talking about the JavaScript, but

271
00:18:02.520 --> 00:18:05.367
I'm talking about the the UI,
what the user says.

272
00:18:05.367 --> 00:18:09.867
The user will not see the change
until you release the thread.

273
00:18:09.867 --> 00:18:14.103
And releasing the thread means
that stop executing code,

274
00:18:14.103 --> 00:18:18.517
just let the event handler finish it,
that's kind of idea.

