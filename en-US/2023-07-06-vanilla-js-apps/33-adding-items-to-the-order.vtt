WEBVTT

1
00:00:00.380 --> 00:00:06.030
The last part that we need is
to get the buttons to work.

2
00:00:06.030 --> 00:00:10.150
So we can add elements to the order and
then we can render the order.

3
00:00:11.640 --> 00:00:12.140
Make sense?

4
00:00:15.105 --> 00:00:19.451
So, we have a button here,
so I wanna click here and

5
00:00:19.451 --> 00:00:22.494
I wanna add something to the order.

6
00:00:22.494 --> 00:00:24.842
So, let's do that.

7
00:00:24.842 --> 00:00:30.676
For that,
we're going to create our final service,

8
00:00:30.676 --> 00:00:34.706
it's going to be called Order.js.

9
00:00:34.706 --> 00:00:39.072
In this case,
we're going to start with a function.

10
00:00:45.285 --> 00:00:49.445
Add to cart,
it's going to receive an id and

11
00:00:49.445 --> 00:00:54.287
it's going to add that
element to the cart, okay?

12
00:00:54.287 --> 00:00:57.582
So first, we receive an id,
we need the product.

13
00:00:57.582 --> 00:01:05.750
So we're going to call getProductById that
we have already created a few minutes ago.

14
00:01:05.750 --> 00:01:09.403
And that was,
I'm not sure if you remember,

15
00:01:09.403 --> 00:01:13.067
an async function, so
I need to await for it.

16
00:01:13.067 --> 00:01:18.226
After that, I need to check if I
already have that element in the cart.

17
00:01:18.226 --> 00:01:20.642
So if I'm adding a cappuccino,

18
00:01:20.642 --> 00:01:25.744
if it's the first cappuccino in the cart,
I need to add a new entry.

19
00:01:25.744 --> 00:01:30.733
If I already have a cappuccino, I need to
update the current entry from one to two

20
00:01:30.733 --> 00:01:32.978
cappuccinos, does it make sense?

21
00:01:32.978 --> 00:01:41.355
So I need to find from
app.store.cart.filter,

22
00:01:41.355 --> 00:01:46.420
let's call this prodInCart,

23
00:01:46.420 --> 00:01:50.135
swade it in a new line.

24
00:01:50.135 --> 00:01:55.321
I'm going to check if
the the product.id it's

25
00:01:55.321 --> 00:02:00.516
equal to the current id,
something like that.

26
00:02:00.516 --> 00:02:05.465
So, This is filtering,

27
00:02:05.465 --> 00:02:08.738
it's creating a new array,
filtering the results.

28
00:02:08.738 --> 00:02:14.282
So we're going to check,
it's a simple way, I can use also indexOf.

29
00:02:14.282 --> 00:02:18.310
But because it's a deep object,
it's a little bit more complicated.

30
00:02:18.310 --> 00:02:24.234
So I will check if I do have 1, it means
that that product is already in the cart.

31
00:02:27.244 --> 00:02:28.291
Make sense?

32
00:02:28.291 --> 00:02:32.240
In that case, I need to update, okay?

33
00:02:32.240 --> 00:02:36.428
So I need to update the current item.

34
00:02:36.428 --> 00:02:39.431
If not, it's a new one, so

35
00:02:39.431 --> 00:02:44.666
I need to take my cart and
let me start with this.

36
00:02:44.666 --> 00:02:47.834
I'm going to push, if this is wrong,
and I will explain why in a minute.

37
00:02:47.834 --> 00:02:52.965
So I need to push a new object that will
contain the product that I wanna add and

38
00:02:52.965 --> 00:02:55.772
the property quantity as 1 because it's

39
00:02:55.772 --> 00:02:59.239
the first cappuccino that
I'm adding to the cart.

40
00:02:59.239 --> 00:03:00.689
Why is this wrong?

41
00:03:00.689 --> 00:03:03.686
It's not wrong, but

42
00:03:03.686 --> 00:03:09.022
it's wrong in how we set up the proxy.

43
00:03:09.022 --> 00:03:12.501
And that's the tip, proxy, why is wrong?

44
00:03:12.501 --> 00:03:18.243
If we are pushing something new to
the array, are we changing the cart?

45
00:03:18.243 --> 00:03:20.500
Let's go back to the store.

46
00:03:20.500 --> 00:03:21.767
We have a proxy.

47
00:03:21.767 --> 00:03:26.790
In the proxy,
we check if the property cart has changed,

48
00:03:26.790 --> 00:03:31.195
but how we actually change
the current property?

49
00:03:31.195 --> 00:03:33.682
The cart this is still the same cart,

50
00:03:33.682 --> 00:03:38.427
we're changing the contents of
the cart but not the property itself.

51
00:03:38.427 --> 00:03:39.844
Does it make sense?

52
00:03:39.844 --> 00:03:44.550
So, because of that, and
by the way if you're using Redux or

53
00:03:44.550 --> 00:03:50.461
other state management solutions,
they typically have the same problem,

54
00:03:50.461 --> 00:03:56.393
and that's why you know we need to return
a new array, not change the array.

55
00:03:56.393 --> 00:03:58.227
Does it make sense?

56
00:03:58.227 --> 00:04:01.361
You can change this and
make it differently,

57
00:04:01.361 --> 00:04:03.925
I'm not saying this is the only way.

58
00:04:03.925 --> 00:04:10.296
Because of that,
now I don't wanna push here this.

59
00:04:10.296 --> 00:04:15.777
I'm going to create a new
array that will contain,

60
00:04:15.777 --> 00:04:22.290
will spread the current cart and
it will add that new option.

61
00:04:22.290 --> 00:04:28.636
So in this case, I'm assigning a new array
to the cart, so I'm changing the array.

62
00:04:32.302 --> 00:04:34.467
Does it make sense?

63
00:04:34.467 --> 00:04:37.688
Again, this is because how we set up this.

64
00:04:37.688 --> 00:04:40.820
You can also set up this
in a different way.

65
00:04:40.820 --> 00:04:46.755
Updating the current item is a little
bit more weird when you see that.

66
00:04:46.755 --> 00:04:50.784
So we also need to create a new cart.

67
00:04:50.784 --> 00:04:58.385
So one quick way to do that Is
to use map and then try to find,

68
00:05:03.089 --> 00:05:08.969
If the current id is the one that we
are adding, and if that's the case,

69
00:05:08.969 --> 00:05:14.073
we can do something like this,
so this is a ternary operator.

70
00:05:14.073 --> 00:05:21.942
If it's this, we're going to return
a new object with all the properties and

71
00:05:21.942 --> 00:05:26.675
quantity being the current
quantity plus 1.

72
00:05:26.675 --> 00:05:30.811
It looks a little weird, but if not,

73
00:05:30.811 --> 00:05:35.623
we are just returning
the product as it is.

74
00:05:35.623 --> 00:05:42.203
That's how you return a new
array with one element changed.

75
00:05:42.203 --> 00:05:46.603
This has nothing to do with Vanilla JS
it's just how we are dealing with data,

76
00:05:46.603 --> 00:05:49.597
data management,
data structures in JavaScript.

77
00:05:49.597 --> 00:05:53.673
Again, you can use the data library
if you want to make this simpler.

78
00:05:56.708 --> 00:06:01.841
So, now that we have this,
we can also add, this is add to cart just

79
00:06:01.841 --> 00:06:08.189
because we are here and we know that we
may need that, let's use remove from cart.

80
00:06:11.342 --> 00:06:16.365
And, again, we are not going to
remove one element from the cart,

81
00:06:16.365 --> 00:06:22.304
we're going to create a new cart to
trigger the update mechanism that we have.

82
00:06:24.661 --> 00:06:27.858
And it's going to be a filter.

83
00:06:27.858 --> 00:06:32.657
So we are going to check, If the id,

84
00:06:35.027 --> 00:06:42.405
Product id is not the one
that you wanna remove.

85
00:06:42.405 --> 00:06:49.194
So we are creating a new array,
removing the one with that id.

86
00:06:49.194 --> 00:06:49.842
Make sense?

87
00:06:49.842 --> 00:06:51.410
We are filtering the array.

88
00:07:00.947 --> 00:07:07.104
So now that we have the add to cart
method up and running, we should call it.

89
00:07:07.104 --> 00:07:12.530
We have two places, we have the menu and
also we have the details, okay?

90
00:07:12.530 --> 00:07:16.716
So we should call that on both places.

91
00:07:16.716 --> 00:07:19.745
So we have the details
page that has to do here.

92
00:07:19.745 --> 00:07:23.941
We just need to, Remove the comment.

93
00:07:26.531 --> 00:07:31.611
And by the way, add to cart needs to
be importer because it's a function,

94
00:07:34.469 --> 00:07:38.780
That we need to import from Order.js.

95
00:07:38.780 --> 00:07:46.315
We are using ES modules, nothing is global
here, so we need to import everything.

96
00:07:46.315 --> 00:07:51.424
And we can import everything because
we are exporting these functions,

97
00:07:51.424 --> 00:07:54.535
so they can be used from the outside,
okay?

98
00:07:54.535 --> 00:07:58.241
So that's the detail page,
and then we have menu page.

99
00:07:58.241 --> 00:08:06.074
Menu page, Is adding,
remember, product items.

100
00:08:06.074 --> 00:08:09.716
So we need to, product item,
if you remember,

101
00:08:09.716 --> 00:08:13.369
was another web component
that has a TODO here.

102
00:08:13.369 --> 00:08:14.872
So what's the TODO?

103
00:08:14.872 --> 00:08:19.025
We need to add to the cart and

104
00:08:19.025 --> 00:08:25.171
the id is actually product.id, okay?

105
00:08:25.171 --> 00:08:30.611
How do we know if this is
working without finishing

106
00:08:30.611 --> 00:08:35.023
the last section that is the order page?

107
00:08:35.023 --> 00:08:40.346
There is something interesting that
I have already set up in the HTML and

108
00:08:40.346 --> 00:08:41.774
you didn't know.

109
00:08:41.774 --> 00:08:46.825
We have this little icon here,
and there is a little span

110
00:08:46.825 --> 00:08:51.773
here going on in red color
that looks like an iOS badge.

111
00:08:51.773 --> 00:08:57.534
So, we can actually,
every time the cart is changing,

112
00:08:57.534 --> 00:09:03.181
we can change that even
before rendering the section.

113
00:09:03.181 --> 00:09:08.357
And to do that, we can do that in
app.js because this is like global,

114
00:09:08.357 --> 00:09:10.697
it's part of the navigation.

115
00:09:10.697 --> 00:09:16.849
So I'm going to add another EventListener
for the window, but not for

116
00:09:16.849 --> 00:09:21.968
a DOM content loader,
is going to be app.cart.change.

117
00:09:21.968 --> 00:09:24.099
That's my event, my custom event.

118
00:09:24.099 --> 00:09:28.112
So every time the cart is changing,
I want the app to do something.

119
00:09:28.112 --> 00:09:31.948
So this is kind of
reacting to data changes.

120
00:09:31.948 --> 00:09:36.143
Is one way to do reactive
programming in manage.js,

121
00:09:36.143 --> 00:09:40.162
not the only way,
maybe not the best way, one way.

122
00:09:40.162 --> 00:09:42.871
And here we are going to update the badge.

123
00:09:42.871 --> 00:09:47.311
The badge is just an element, so

124
00:09:47.311 --> 00:09:54.390
we are going to take ElementById,
take the badge.

125
00:09:54.390 --> 00:09:58.758
And we just need to take the current
amount of objects that we have in

126
00:09:58.758 --> 00:09:59.468
the cart.

127
00:09:59.468 --> 00:10:04.745
But the quantity,
it's not just app.store.cart.length.

128
00:10:04.745 --> 00:10:05.721
Why?

129
00:10:05.721 --> 00:10:10.793
Because that will give me how many
different items we have in the cart.

130
00:10:10.793 --> 00:10:14.771
But maybe we have 10 cappuccinos,
so I wanna see 10.

131
00:10:14.771 --> 00:10:20.259
So, the simplest way to do that in
functional programming is to use reduce,

132
00:10:20.259 --> 00:10:20.789
okay?

133
00:10:20.789 --> 00:10:26.928
It's not complicated, but
we have an accumulator and each item and

134
00:10:26.928 --> 00:10:31.989
we're going to say,
this is just simple programming,

135
00:10:31.989 --> 00:10:36.837
that we are accumulating
from every item the quantity

136
00:10:36.837 --> 00:10:40.842
starting with zero, something like that.

137
00:10:40.842 --> 00:10:42.397
That's our accumulator.

138
00:10:42.397 --> 00:10:48.286
So I'm going to take the textContent and
set this as quantity like that.

139
00:10:48.286 --> 00:10:52.279
And also,
I want to change the hidden property and

140
00:10:52.279 --> 00:10:56.092
say there's going to be
equals to quantity 0.

141
00:10:56.092 --> 00:11:00.281
Because if I don't have
any elements in the cart,

142
00:11:00.281 --> 00:11:05.085
if it's empty,
I don't wanna see 0 in the cart, okay?

143
00:11:05.085 --> 00:11:06.581
You will see that in action in a minute.

144
00:11:09.525 --> 00:11:14.775
So this is how we can use
DOM events to listen for,

145
00:11:14.775 --> 00:11:20.667
in this case, data changes and
react in consequence,

146
00:11:20.667 --> 00:11:24.656
some kind of global context events.

147
00:11:24.656 --> 00:11:28.627
Okay, so I'm trying this and I'm getting
errors, that's because of VS Code.

148
00:11:28.627 --> 00:11:34.952
VS Code, as I mentioned, it's not
adding .js when it's adding imports and

149
00:11:34.952 --> 00:11:39.447
that works with Webpack or
TypeScript, but not here.

150
00:11:39.447 --> 00:11:42.820
The other one that I
have is product item.js,

151
00:11:42.820 --> 00:11:45.943
I need to add the.js and
here we are again.

152
00:11:45.943 --> 00:11:51.061
So the idea is that if I click add,
automatically,

153
00:11:51.061 --> 00:11:54.519
look at the top right, I have a 1.

154
00:11:54.519 --> 00:12:01.554
And if I continue adding elements,
it actually works.

155
00:12:01.554 --> 00:12:03.944
So remember what's going on here.

156
00:12:03.944 --> 00:12:06.824
So add is calling add to cart.

157
00:12:06.824 --> 00:12:11.234
Add to cart is creating a new
array with the new cart and

158
00:12:11.234 --> 00:12:16.428
that because we have a proxy,
that proxy detects the change and

159
00:12:16.428 --> 00:12:22.113
it's broadcasting a DOM event over
the window that then we can listen

160
00:12:22.113 --> 00:12:28.900
in a lot of places in our app and mixing
several techniques at the same time, okay?

161
00:12:28.900 --> 00:12:29.867
But it works.

