WEBVTT

1
00:00:00.077 --> 00:00:05.587
The workshop's title is
a little clickbait, maybe,

2
00:00:05.587 --> 00:00:10.614
but it's true for
at least to try to hit your mind,

3
00:00:10.614 --> 00:00:15.546
okay, that maybe you
don't need that library.

4
00:00:15.546 --> 00:00:19.876
And I know that what you're thinking,
yeah, but I love React or

5
00:00:19.876 --> 00:00:24.890
Angular Or Vue or Svelte or
whatever library or framework you like.

6
00:00:24.890 --> 00:00:27.762
I've been doing workshops like
this one for a while now.

7
00:00:27.762 --> 00:00:32.807
So I mentioned that I have been
doing JavaScript since 1998,

8
00:00:32.807 --> 00:00:35.720
okay, so that's a lot of time.

9
00:00:35.720 --> 00:00:42.326
So I've seen a lot of errors
in the web development world.

10
00:00:42.326 --> 00:00:46.629
And maybe 10, 12 years ago, here,

11
00:00:46.629 --> 00:00:51.071
that slide would say, but I love jQuery.

12
00:00:51.071 --> 00:00:56.153
And this problem of overusing
libraries is not new.

13
00:00:56.153 --> 00:01:04.350
So it's okay if you love these libraries,
okay, it's not a problem.

14
00:01:04.350 --> 00:01:08.350
The problem is that when
you only have a hammer,

15
00:01:08.350 --> 00:01:11.954
you feel like everything is a nail, okay?

16
00:01:11.954 --> 00:01:18.830
And this is currently common,
I'm not sure if it's your case today here.

17
00:01:18.830 --> 00:01:22.466
But it's common today that we
have a lot of web developers

18
00:01:22.466 --> 00:01:26.026
that have appeared in the market
in the past five years,

19
00:01:26.026 --> 00:01:31.205
that they have just learned to create web
apps with a library or with a framework.

20
00:01:31.205 --> 00:01:36.660
Now, I'm not saying that's wrong,
but that's the only tool they have.

21
00:01:36.660 --> 00:01:39.922
So then,
when they need to create a new project,

22
00:01:39.922 --> 00:01:44.695
even if it's a very basic project,
I've seen even blogs, okay, that

23
00:01:44.695 --> 00:01:49.734
they were creating a new blog and they
use Create React App to create a blog.

24
00:01:49.734 --> 00:01:53.154
That's because that's
the only thing they know,

25
00:01:53.154 --> 00:01:55.786
that's the only tool chain they know.

26
00:01:55.786 --> 00:02:00.762
And the idea of this workshop is to
show you that there is a different world

27
00:02:00.762 --> 00:02:05.570
out there, that on some situations,
it might be a good idea.

28
00:02:05.570 --> 00:02:11.220
So I want you to have more tools,
not just the hammer, okay, make sense?

29
00:02:11.220 --> 00:02:14.103
So I want you to also love Vanilla JS.

30
00:02:14.103 --> 00:02:19.296
And again, I'm not saying that
you will start every new project

31
00:02:19.296 --> 00:02:26.126
with Vanilla JS starting tomorrow, but at
least you will have that tool available,

32
00:02:26.126 --> 00:02:32.377
and then you will make better decisions
in the future about which framework or

33
00:02:32.377 --> 00:02:37.320
which technique you will use for
every situation.

34
00:02:37.320 --> 00:02:41.121
Today, we are in the era
of microframeworks,

35
00:02:41.121 --> 00:02:46.298
microservices, micro apps,
this is also a new deal going on.

36
00:02:46.298 --> 00:02:51.239
Instead of large apps, we have micro
apps that we can deploy instantly in

37
00:02:51.239 --> 00:02:56.111
the cloud with, I don't know,
or with every other provider.

38
00:02:56.111 --> 00:02:57.525
We have a URL immediately.

39
00:02:57.525 --> 00:03:01.100
In five minutes,
we have a URL that is working, so

40
00:03:01.100 --> 00:03:05.369
we don't need to always create big,
large applications.

41
00:03:05.369 --> 00:03:10.030
Sometimes it's something very specific
that we can even convert into

42
00:03:10.030 --> 00:03:13.901
a progressive web app,
into a PWA, the user can install,

43
00:03:13.901 --> 00:03:17.779
they can work offline,
it's a very specific situation.

44
00:03:17.779 --> 00:03:24.065
And for those apps, for those micro apps,
Vanilla JS typically is good enough.

45
00:03:24.065 --> 00:03:29.290
So let's try to define first what's
Vanilla JavaScript or Vanilla JS.

46
00:03:29.290 --> 00:03:33.805
So it's the usage of the core language and
browser APIs to create web apps

47
00:03:33.805 --> 00:03:37.742
without any additional libraries or
frameworks added on top.

48
00:03:37.742 --> 00:03:40.766
And of course,
this is not Boolean, I mean like,

49
00:03:40.766 --> 00:03:43.432
this is Vanilla JS,
this is not Vanilla JS.

50
00:03:43.432 --> 00:03:48.300
It's actually a range of possibilities
in the middle, because yeah,

51
00:03:48.300 --> 00:03:53.167
maybe you're not using a big framework
such as Angular or Next.js, or

52
00:03:53.167 --> 00:03:56.512
you're not using a library
such as React or Vue.

53
00:03:56.512 --> 00:04:00.839
But you're still using some
open source micro libraries,

54
00:04:00.839 --> 00:04:04.993
or you're using TypeScript,
so you still need double or

55
00:04:04.993 --> 00:04:09.069
a TypeScript compiler to
transfer it into JavaScript.

56
00:04:09.069 --> 00:04:13.190
So there are still a range of
possibilities in the middle.

57
00:04:13.190 --> 00:04:17.417
So it's not like,
I don't wanna use anything, okay?

58
00:04:17.417 --> 00:04:21.424
Today, we will focus on
maybe the Boolean part,

59
00:04:21.424 --> 00:04:25.350
we will be just plain, plain JavaScript.

60
00:04:25.350 --> 00:04:30.822
And by the way, because I don't wanna
take anything for granted today,

61
00:04:30.822 --> 00:04:36.540
because I'm pretty sure that a lot
of people don't even ask about this.

62
00:04:36.540 --> 00:04:39.230
So they have seen the term
Vanilla JavaScript, but

63
00:04:39.230 --> 00:04:41.580
they don't understand why Vanilla.

64
00:04:41.580 --> 00:04:43.312
So let me even explain
that really quickly.

65
00:04:43.312 --> 00:04:47.709
So in software development,
it's not just in software development, but

66
00:04:47.709 --> 00:04:50.292
in particular, in software development,

67
00:04:50.292 --> 00:04:54.450
we've been using Vanilla as
a way to say completely plain.

68
00:04:54.450 --> 00:04:59.257
And this is coming from Italian ice cream,
from gelato,

69
00:04:59.257 --> 00:05:05.790
where the vanilla ice cream is the base
of most of the creamy ice creams.

70
00:05:05.790 --> 00:05:08.572
So the gelato is vanilla with something,
okay?

71
00:05:08.572 --> 00:05:13.595
So that's why the base one is vanilla,
and then we add flavors on top of that.

72
00:05:13.595 --> 00:05:17.038
So in software development,
when we say Vanilla,

73
00:05:17.038 --> 00:05:22.242
something like Vanilla JavaScript,
we are saying it's plain JavaScript,

74
00:05:22.242 --> 00:05:26.730
we are not going to add any
flavor on top of that, okay?

75
00:05:26.730 --> 00:05:28.679
So that's kind of the idea.

76
00:05:28.679 --> 00:05:30.296
And it's not new.

77
00:05:30.296 --> 00:05:34.856
As I mentioned before,
it has been a concept for

78
00:05:34.856 --> 00:05:39.302
a decade now, but
this is kind of a wavy thing.

79
00:05:39.302 --> 00:05:43.120
And I think that we are,
again, at the top of the wave,

80
00:05:43.120 --> 00:05:47.770
where a lot of people is,
again, talking about this.

81
00:05:47.770 --> 00:05:52.226
So let me show you something, I'm going
to get out of the slide for a minute,

82
00:05:52.226 --> 00:05:55.024
and I'm going to show you this website,
okay?

83
00:05:55.024 --> 00:05:56.917
This is vanilla-js.js.com.

84
00:05:56.917 --> 00:06:03.199
You can see, I mean,
it's not even HTTPS, okay, the website,

85
00:06:03.199 --> 00:06:08.699
so this is actually a website
from 12 years ago, okay?

86
00:06:08.699 --> 00:06:14.660
That at the time, it was like, wow,
look at this, Vanilla JS, and at the time,

87
00:06:14.660 --> 00:06:20.396
it was like a website selling a new
framework, this is the jQuery era, okay?

88
00:06:20.396 --> 00:06:25.008
Vanilla JS is a fast, lightweight,
cross-platform framework for

89
00:06:25.008 --> 00:06:29.629
building incredible,
powerful JavaScript applications, okay?

90
00:06:29.629 --> 00:06:34.245
And here, they were explaining the big
companies using this framework,

91
00:06:34.245 --> 00:06:38.496
okay, Facebook, Google, YouTube,
blah, blah, blah, blah.

92
00:06:38.496 --> 00:06:41.314
I think that all of them are still alive,
right?

93
00:06:41.314 --> 00:06:43.077
Yeah, kind of, yeah.

94
00:06:43.077 --> 00:06:47.165
Anyway, and you can see here if
you wanna download Vanilla JS,

95
00:06:47.165 --> 00:06:52.279
the framework, you can even pick the
portions of the framework that you want.

96
00:06:52.279 --> 00:06:57.373
So you want AJAX, that's the Fetch API,
Functions, a Math Library.

97
00:06:57.373 --> 00:07:02.459
And you have even here calculation of
how many bytes you will download if

98
00:07:02.459 --> 00:07:08.413
you add regular expressions or animations,
and everything is 0 bytes actually.

99
00:07:08.413 --> 00:07:12.391
So at one point, you start feeling
that something's wrong here,

100
00:07:12.391 --> 00:07:15.031
what's going on with this website, okay?

101
00:07:15.031 --> 00:07:18.452
Well, what's going on is that
this is just JavaScript,

102
00:07:18.452 --> 00:07:20.818
you don't need to download anything.

103
00:07:20.818 --> 00:07:23.255
That was the point of this website,

104
00:07:23.255 --> 00:07:29.354
to get into developers' mind with a new
framework, with a new fancy framework.

105
00:07:29.354 --> 00:07:34.904
Let's do that, it's faster than look at
the libraries at the time Dojo, Prototype,

106
00:07:34.904 --> 00:07:39.711
Ext JS, jQuery, YUI, MooTools, and
this is actually faster than that.

107
00:07:39.711 --> 00:07:43.129
I'm not saying that today
with the libraries,

108
00:07:43.129 --> 00:07:48.080
we are on the same kind of
comparison in terms of performance.

109
00:07:48.080 --> 00:07:51.381
But anyway,
this is an example that this is not new,

110
00:07:51.381 --> 00:07:55.780
the idea of pushing Vanilla JS,
it's been for a while.

111
00:07:55.780 --> 00:07:59.585
So after this, because at the time,
I remember that,

112
00:07:59.585 --> 00:08:04.407
when you were starting a new project,
you were creating index HTML.

113
00:08:04.407 --> 00:08:11.440
And the next step was to download jQuery
and add the script tag for jQuery.

114
00:08:11.440 --> 00:08:18.550
It doesn't matter what project were you
doing at the time, you were adding jQuery.

115
00:08:18.550 --> 00:08:21.772
And that's exactly the same
thing that is happening today.

116
00:08:21.772 --> 00:08:26.333
You start a new project, a new web app
project, and you start with the library or

117
00:08:26.333 --> 00:08:27.980
with the framework, okay?

118
00:08:27.980 --> 00:08:32.802
So I wanted to show you this because
it's just the history repeating itself.

119
00:08:32.802 --> 00:08:38.739
And we are back in that same position
where you always want a library, okay?

120
00:08:38.739 --> 00:08:43.331
And of course, we have fancy new
libraries every couple of month,

121
00:08:43.331 --> 00:08:47.763
okay, libraries or frameworks or
quicker, wherever, okay?

122
00:08:47.763 --> 00:08:52.714
We have new terms and
new names appearing all the time.

123
00:08:52.714 --> 00:08:58.639
So for example, here, we have a very
large table of, I don't know,

124
00:08:58.639 --> 00:09:03.748
maybe 50, 60 different
libraries that we can use today

125
00:09:03.748 --> 00:09:09.778
with the benchmark on different
situations, such as creating rows,

126
00:09:09.778 --> 00:09:14.816
replacing rows,
the benchmark in terms of performance.

127
00:09:14.816 --> 00:09:21.610
And here is Vanilla JS, and
all the rest are frameworks or libraries.

128
00:09:21.610 --> 00:09:26.230
We have some different ways to do
that with Vanilla, like WC, but

129
00:09:26.230 --> 00:09:31.188
most of these columns are different
libraries or frameworks, okay?

130
00:09:31.188 --> 00:09:33.620
So we have a lot.

131
00:09:33.620 --> 00:09:38.726
And yeah, in terms of performance,
you will probably find that if you're

132
00:09:38.726 --> 00:09:43.671
doing things correctly and
you understand performance in JavaScript,

133
00:09:43.671 --> 00:09:46.751
that is a whole completely
different topic,

134
00:09:46.751 --> 00:09:50.825
Vanilla JS will probably be
faster most of the time, okay?

135
00:09:50.825 --> 00:09:55.533
But because, again,
the libraries on top of Vanilla JS always,

136
00:09:55.533 --> 00:09:58.701
it's not changing the browser's engine,

137
00:09:58.701 --> 00:10:04.265
unless we are talking about something
with web assembly or things like that,

138
00:10:04.265 --> 00:10:09.130
that is not the case for
most of the UI libraries out there.

139
00:10:09.130 --> 00:10:13.037
It's not a web assembly approach
with maybe threads and workers.

140
00:10:13.037 --> 00:10:15.155
Unless we're talking about that,

141
00:10:15.155 --> 00:10:18.410
most of the libraries are sitting
on top of Vanilla JS.

142
00:10:19.620 --> 00:10:23.077
So at one point, it has to do with
understanding how that works,

143
00:10:23.077 --> 00:10:26.541
understanding performance, and
then writing the right code.

144
00:10:26.541 --> 00:10:29.227
Yeah, I know,
maybe you're thinking, well, but

145
00:10:29.227 --> 00:10:33.510
I need to write a lot of code sometimes,
yeah, we will get there.

146
00:10:33.510 --> 00:10:36.090
That might be the case on some situations,
and

147
00:10:36.090 --> 00:10:40.733
that's why a library might still be a good
idea sometimes, but not always, okay?

148
00:10:40.733 --> 00:10:44.375
So that's the point,
that's what I wanna highlight right now.

