WEBVTT

1
00:00:00.000 --> 00:00:02.575
So it's time to work in our app, so, so

2
00:00:02.575 --> 00:00:05.398
far we have been just
playing with the DOM.

3
00:00:05.398 --> 00:00:11.544
And the next step is to set up all
the data management that we will have.

4
00:00:11.544 --> 00:00:15.545
And that means, for
example, download the menu,

5
00:00:15.545 --> 00:00:20.676
the JSON that we have available,
and store that menu somewhere.

6
00:00:20.676 --> 00:00:27.103
And for that we will go to Chapter 2,
we're going to start with Lesson 3,

7
00:00:27.103 --> 00:00:32.014
the Creating Initial Services,
and what's a service?

8
00:00:32.014 --> 00:00:36.384
A service is nothing from
a JavaScript point of view.

9
00:00:36.384 --> 00:00:39.256
So in this case it's just a concept,

10
00:00:39.256 --> 00:00:43.990
a design pattern that we are defining,
it can have any name.

11
00:00:43.990 --> 00:00:47.229
So we don't have anything
known as a service in the DOM.

12
00:00:47.229 --> 00:00:50.139
But if you're coming, for
example, from Angular,

13
00:00:50.139 --> 00:00:54.814
probably you've heard the term service,
but on other libraries, you don't have.

14
00:00:54.814 --> 00:00:58.951
This is just, in this case, an object or

15
00:00:58.951 --> 00:01:04.329
a way to offer different
services to the app, okay?

16
00:01:04.329 --> 00:01:07.982
So in this case, what we're going
to create is a services folder.

17
00:01:07.982 --> 00:01:12.833
Remember that I mentioned that maybe we
don't wanna creating a scripts folder,

18
00:01:12.833 --> 00:01:15.484
maybe we wanna follow a different pattern.

19
00:01:15.484 --> 00:01:18.381
So I'm going to create a services folder,

20
00:01:18.381 --> 00:01:22.574
and inside that folder I'm going
to start with two services.

21
00:01:22.574 --> 00:01:26.062
An API that will be responsible for

22
00:01:26.062 --> 00:01:31.123
fetching the data from the network,
and a store.

23
00:01:31.123 --> 00:01:37.745
And the store object will store data that
in this case it's global to the app.

24
00:01:37.745 --> 00:01:39.722
This is just a concept, okay?

25
00:01:39.722 --> 00:01:43.333
You might have heard similar
concepts in some libraries,

26
00:01:43.333 --> 00:01:46.290
this is just a concept
that I'm applying here.

27
00:01:46.290 --> 00:01:49.946
So the store will store
the state of the app, and

28
00:01:49.946 --> 00:01:53.798
right now the state of
the app will contain a menu.

29
00:01:53.798 --> 00:02:00.380
That's the list of categories and
products inside each category,

30
00:02:00.380 --> 00:02:04.660
and the cart that we
start as an empty array.

31
00:02:04.660 --> 00:02:09.600
So I'm going to create these files, so

32
00:02:09.600 --> 00:02:12.451
I'm going to VS Code.

33
00:02:12.451 --> 00:02:14.842
And I'm going to create,

34
00:02:18.066 --> 00:02:22.629
A new folder, services.

35
00:02:22.629 --> 00:02:27.749
You may be thinking, well, maybe we
wanna put all these JavaScripty-based

36
00:02:27.749 --> 00:02:33.364
files in another folder, such as source,
yeah, you can do that, it's your code.

37
00:02:33.364 --> 00:02:37.655
And within here I'm going
to create API.js, and

38
00:02:37.655 --> 00:02:42.674
also Store.js, capital S,
actually, it's up to you.

39
00:02:42.674 --> 00:02:47.416
But you will see that I'm using here
capital S because I will create some

40
00:02:47.416 --> 00:02:49.322
kind of a singleton object.

41
00:02:49.322 --> 00:02:55.000
And sometimes when we are creating
singleton objects, we follow the class

42
00:02:55.000 --> 00:03:00.061
syntax of starting with capital,
but actually, it's up to you.

43
00:03:00.061 --> 00:03:06.160
So for the store, what we're going
to do is we're going to create,

44
00:03:06.160 --> 00:03:12.908
for now, just a constant, it will be
an object that will contain the menu.

45
00:03:12.908 --> 00:03:18.434
We start with null, that's how we
will know we are using JSON syntax,

46
00:03:18.434 --> 00:03:20.411
so you should use colon.

47
00:03:20.411 --> 00:03:24.512
We will use null when it means we
don't have it yet, for some reason,

48
00:03:24.512 --> 00:03:28.852
typically it's because it's still
loading or we haven't loaded yet.

49
00:03:28.852 --> 00:03:37.029
And then the cart as an empty array,
that's all.

50
00:03:37.029 --> 00:03:40.829
And we're going to use ES module,
ECMAScript modules.

51
00:03:40.829 --> 00:03:45.137
So that means that we don't know that yet,
so looking at the JavaScript file,

52
00:03:45.137 --> 00:03:47.308
we don't know if it's a module or not.

53
00:03:47.308 --> 00:03:52.485
But the module means that we don't
want this file to just be global.

54
00:03:52.485 --> 00:03:57.591
So this variable will be
local only to this file,

55
00:03:57.591 --> 00:04:00.714
that's the idea of a module.

56
00:04:00.714 --> 00:04:05.692
But I can export that store,
and I'm going to export

57
00:04:05.692 --> 00:04:11.020
that as the default object
that I'm exporting, okay?

58
00:04:11.020 --> 00:04:17.221
For now, just that will work, for the API,
I'm also going to create an object.

59
00:04:17.221 --> 00:04:24.040
By the way, should I create the class and
then an instance of that class?

60
00:04:24.040 --> 00:04:26.766
That's also possible, but because it's
a singleton and this is JavaScript,

61
00:04:26.766 --> 00:04:27.752
I can just create an object.

62
00:04:27.752 --> 00:04:31.626
I don't need to create the class first
to then create an instance of it.

63
00:04:31.626 --> 00:04:35.904
And in this case, I'm going to
set the property with the URL of

64
00:04:35.904 --> 00:04:40.611
the file that I will load,
in this case, it's data/menu.json.

65
00:04:43.653 --> 00:04:49.083
And then we'll create just a simple
method to actually fetch the menu,

66
00:04:49.083 --> 00:04:51.900
then later we can add more more APIs.

67
00:04:51.900 --> 00:04:56.490
So in this case,
it's going to be a function,

68
00:04:56.490 --> 00:04:59.680
I will use arrow function here.

69
00:04:59.680 --> 00:05:05.910
And what I want is to fetch to
make an HTTP request to the API.

70
00:05:05.910 --> 00:05:10.124
In this case the API is pretty simple,
it's just a get from a JSON file.

71
00:05:10.124 --> 00:05:13.890
So for
that I'm going to use the fetch API.

72
00:05:13.890 --> 00:05:17.708
So I'm going to fetch from the URL,

73
00:05:17.708 --> 00:05:23.319
I can use API URL, or
this URL in this case will work.

74
00:05:23.319 --> 00:05:27.830
The fetch API returns a promise,
it's promise-based.

75
00:05:27.830 --> 00:05:34.499
Because it's promise-based, I can use
then and catch, or I can use async await.

76
00:05:34.499 --> 00:05:38.291
So I think that async await
looks better in our code.

77
00:05:38.291 --> 00:05:42.464
So I'm going to upgrade my ideal
function that I have here,

78
00:05:42.464 --> 00:05:45.726
the arrow function,
to be an async function.

79
00:05:45.726 --> 00:05:50.281
So then I can await for the fetch and

80
00:05:50.281 --> 00:05:54.216
store their results like so.

81
00:05:54.216 --> 00:05:58.711
The result in the fetch API, it's actually

82
00:05:58.711 --> 00:06:03.824
an HTTP response,
it's not really the data yet.

83
00:06:03.824 --> 00:06:11.948
And one of the things that I can do is
I can also await for a JSON parsing.

84
00:06:11.948 --> 00:06:17.408
So if I use result.json
I'm actually saying

85
00:06:17.408 --> 00:06:22.158
I wanna parse the HTTP result as a JSON.

86
00:06:22.158 --> 00:06:27.314
And that's what we're going to return
to whoever is calling this API.

87
00:06:31.826 --> 00:06:33.435
And finally,
I'm going to export default.API.

88
00:06:33.435 --> 00:06:38.449
You will see that I will try to
keep things as simple as possible.

89
00:06:38.449 --> 00:06:44.274
And that's one of the key aspects of
being successful with vanilla JS.

90
00:06:44.274 --> 00:06:50.095
So being simple to understand what
you're doing in separate files and

91
00:06:50.095 --> 00:06:54.349
following your own guidelines to do that,
right?

92
00:06:54.349 --> 00:06:57.121
Because yeah,
we can add more abstractions,

93
00:06:57.121 --> 00:06:59.122
we can add abstractions layers.

94
00:06:59.122 --> 00:07:03.920
But for that, first it's important to
be confident on the platform itself

95
00:07:03.920 --> 00:07:06.983
first before adding more
abstraction layers.

96
00:07:06.983 --> 00:07:10.092
So now, these are two services.

97
00:07:10.092 --> 00:07:14.878
So where are we going to use
these services within app.js?

98
00:07:14.878 --> 00:07:20.152
The problem is that, well,
in app.js I'm going to clean this up,

99
00:07:20.152 --> 00:07:25.994
so I'm going to clear out the DOM content
loaded, and I will keep just one.

100
00:07:25.994 --> 00:07:30.603
How can I import my two services?

101
00:07:30.603 --> 00:07:36.596
At this point I cannot import them,
because to use ES modules,

102
00:07:36.596 --> 00:07:41.571
we all need to be within
the umbrella of a module, and

103
00:07:41.571 --> 00:07:44.300
this script is not a module.

104
00:07:44.300 --> 00:07:50.332
How can we convert or
upgrade that script into a module?

105
00:07:50.332 --> 00:07:52.167
It's actually pretty simple.

106
00:07:52.167 --> 00:07:55.009
In the HTML we have to
change the script title.

107
00:07:55.009 --> 00:08:02.078
And we are going to add the type property,
and we will use module as its value.

108
00:08:02.078 --> 00:08:06.626
So defining type module express that

109
00:08:06.626 --> 00:08:11.030
this app will be loaded as a module.

110
00:08:11.030 --> 00:08:15.727
Because of that, every variable that
we define in that JavaScript file

111
00:08:15.727 --> 00:08:20.284
will not be a global variable for
the whole page, just for that file.

112
00:08:20.284 --> 00:08:25.730
And that file can export and
import things from other files as well.

