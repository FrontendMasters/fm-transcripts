WEBVTT

1
00:00:00.350 --> 00:00:03.000
&gt;&gt; Brian Holt: So if you remember
correctly we were doing Redux and

2
00:00:03.000 --> 00:00:09.200
integrating here on the landing page and
we've now, quote unquote broken our input.

3
00:00:10.480 --> 00:00:14.200
Because we can type into it but
it's not actually changing it.

4
00:00:15.960 --> 00:00:19.400
But we wrote the action, we wrote
the action creator, we wrote the reducer,

5
00:00:19.400 --> 00:00:21.610
and we integrated it
with that route reducer.

6
00:00:21.610 --> 00:00:27.948
So now we have to take that last step
of dispatching an action to Redux.

7
00:00:27.948 --> 00:00:30.540
So let's go ahead and
go write that up right now.

8
00:00:32.070 --> 00:00:41.670
So let's go over to landing.js
&gt;&gt; Brian Holt: And

9
00:00:41.670 --> 00:00:43.170
we're gonna add a couple of things.

10
00:00:47.830 --> 00:00:56.090
&gt;&gt; Brian Holt: So we're gonna add a new
method here called handleSearchTermChange.

11
00:00:59.170 --> 00:01:00.620
That's gonna take in an event.

12
00:01:06.300 --> 00:01:11.140
&gt;&gt; Brian Holt: And so, something else
connected us for us automatically.

13
00:01:11.140 --> 00:01:13.360
We don't have to do
anything to opt into this.

14
00:01:13.360 --> 00:01:16.760
Is it injects an additional
prop called dispatch?

15
00:01:19.100 --> 00:01:23.900
We're just gonna use dispatch directly
to dispatch actions to Redux.

16
00:01:25.020 --> 00:01:27.040
I know some people frown on this but

17
00:01:27.040 --> 00:01:30.770
there's kind of a split
community on how to do this.

18
00:01:32.220 --> 00:01:34.210
Remember how we did
mapStateToProps down here?

19
00:01:34.210 --> 00:01:39.140
There's also mapDispatchToProps, which is
a second parameter that you'd put in here,

20
00:01:39.140 --> 00:01:40.570
mapsDispatchToProps.

21
00:01:40.570 --> 00:01:44.664
We're not gonna put it in there but you
can do a similar things where you actually

22
00:01:44.664 --> 00:01:48.650
make kind of like your own dispatching
functions, which then get injected.

23
00:01:48.650 --> 00:01:51.190
I find that a little too indirect.

24
00:01:51.190 --> 00:01:51.980
I don't see.

25
00:01:53.470 --> 00:01:55.080
Yeah, anyway we're not
gonna do it that way.

26
00:01:55.080 --> 00:01:59.120
So what we're actually gonna do is
we're just gonna use dispatch directly.

27
00:01:59.120 --> 00:02:04.860
So we can just say this.props.dispatch,
which again is coming from connect,

28
00:02:04.860 --> 00:02:07.470
it comes from here,
that's where dispatch comes from.

29
00:02:11.147 --> 00:02:13.001
&gt;&gt; Brian Holt: And then,
we're going to call,

30
00:02:13.001 --> 00:02:15.210
we'll come back to this in just a sec.

31
00:02:15.210 --> 00:02:20.214
We're gonna import up here
&gt;&gt; Brian Holt: That

32
00:02:20.214 --> 00:02:21.670
action creator that we wrote.

33
00:02:22.700 --> 00:02:28.555
So we're going to import setSearchTerm

34
00:02:28.555 --> 00:02:32.694
from ./actionCreators.

35
00:02:35.840 --> 00:02:37.211
&gt;&gt; Brian Holt: Then, down here,

36
00:02:37.211 --> 00:02:41.330
we're going to dispatch
the results of setSearchTerm.

37
00:02:43.040 --> 00:02:49.283
We're gonna pass in event.target.value.

38
00:02:55.214 --> 00:02:58.014
&gt;&gt; Brian Holt: And then, we also have to
put that as an on change for this input.

39
00:02:58.014 --> 00:03:07.617
So onChange= this.handleSearchTermChange.

40
00:03:18.058 --> 00:03:20.700
&gt;&gt; Speaker 2: Couple questions.

41
00:03:20.700 --> 00:03:24.607
For map state props, should they always
declare the state that they need?

42
00:03:27.114 --> 00:03:28.413
&gt;&gt; Brian Holt: Yes.

43
00:03:28.413 --> 00:03:31.676
[LAUGH]
&gt;&gt; Speaker 2: Follow on is that in big

44
00:03:31.676 --> 00:03:33.917
apps, can that get messy?

45
00:03:33.917 --> 00:03:35.008
&gt;&gt; Brian Holt: It does get messy,

46
00:03:35.008 --> 00:03:39.200
I guess technically you could
just return all of state here.

47
00:03:39.200 --> 00:03:41.870
And you would get the entire
state injected as props.

48
00:03:41.870 --> 00:03:43.560
I would assert that that is messier.

49
00:03:44.638 --> 00:03:50.130
That now every Redux connector component
has access to the entire state tree,

50
00:03:50.130 --> 00:03:52.010
and that is a mess.

51
00:03:52.010 --> 00:03:55.369
So it's better to be explicit and
say I require these things.

52
00:03:56.610 --> 00:03:59.140
So if you have really messy
map state to props, you

53
00:03:59.140 --> 00:04:02.480
might have a problem where you might wanna
split things into multiple components.

54
00:04:03.820 --> 00:04:04.522
Just a thought.

55
00:04:04.522 --> 00:04:05.144
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: But

56
00:04:05.144 --> 00:04:10.380
there also might be times where you
just need to do it, and that's okay.

57
00:04:10.380 --> 00:04:12.460
&gt;&gt; Speaker 2: Jack was asking about the,

58
00:04:12.460 --> 00:04:17.084
you had said earlier that we
would do data down and events up.

59
00:04:17.084 --> 00:04:17.606
&gt;&gt; Brian Holt: Mm-hm.
&gt;&gt; Speaker 2: And that

60
00:04:17.606 --> 00:04:18.980
was going to change?

61
00:04:18.980 --> 00:04:21.280
My response to that is
that it hasn't changed,

62
00:04:21.280 --> 00:04:25.130
it's just with Redux, you get
the data the date where you need it

63
00:04:25.130 --> 00:04:27.190
instead of having to parsing
it through all the layers.

64
00:04:28.200 --> 00:04:33.095
&gt;&gt; Brian Holt: Yes, so actions or
props down actions up.

65
00:04:33.095 --> 00:04:36.740
We are literally dispatching actions.

66
00:04:36.740 --> 00:04:39.190
So now it's just not
going up the Redux tree.

67
00:04:39.190 --> 00:04:41.520
What it's doing is it's
going into the Redux stack.

68
00:04:41.520 --> 00:04:43.693
But it's still props down, actions up.

69
00:04:45.630 --> 00:04:50.626
&gt;&gt; Speaker 2: He was asking,
&gt;&gt; Speaker 2: What's an example of

70
00:04:50.626 --> 00:04:51.320
deep nesting?

71
00:04:52.480 --> 00:04:54.750
And have you seen anything extremely deep?

72
00:04:54.750 --> 00:04:56.780
&gt;&gt; Brian Holt: Yeah, no, I mean if
you've worked with React any sort of

73
00:04:56.780 --> 00:04:58.910
amount of time you're definitely
gonna see the data towing problem.

74
00:05:00.130 --> 00:05:05.302
And I mean, my example is,
like ClientApp here we

75
00:05:05.302 --> 00:05:10.487
have two particular,
&gt;&gt; Brian Holt: Components

76
00:05:10.487 --> 00:05:12.390
that care about preload.shows.

77
00:05:12.390 --> 00:05:15.070
So this has to live at the router level.

78
00:05:15.070 --> 00:05:19.984
But imagine with search, say I had
like ten layers deep before you got

79
00:05:19.984 --> 00:05:23.895
to the show card,
would actually need to use the show.

80
00:05:23.895 --> 00:05:27.027
So it would have to be explicitly
passed down from each component

81
00:05:27.027 --> 00:05:28.020
to each component.

82
00:05:28.020 --> 00:05:31.139
That would be a data tunneling problem.

83
00:05:31.139 --> 00:05:34.927
&gt;&gt; Speaker 2: What do you think is too
deep before you start deciding to go to

84
00:05:34.927 --> 00:05:35.459
Redux.

85
00:05:36.740 --> 00:05:39.402
&gt;&gt; Brian Holt: I don't if I would
necessarily make that the deciding factor.

86
00:05:43.041 --> 00:05:46.912
&gt;&gt; Brian Holt: How many layers deep it
would probably be how wide the data has to

87
00:05:46.912 --> 00:05:51.953
go, how many different components you need
to access the same amount of data, and

88
00:05:51.953 --> 00:05:57.020
at that point centralizing your data to
one source of truth is a helpful paradigm.

89
00:05:59.080 --> 00:06:02.140
&gt;&gt; Brian Holt: But this is very
much a personal decision though.

90
00:06:02.140 --> 00:06:04.020
That's what I really wanna say.

91
00:06:04.020 --> 00:06:04.720
&gt;&gt; Speaker 2: Yeah.

92
00:06:04.720 --> 00:06:06.730
A different question.

93
00:06:06.730 --> 00:06:10.660
Do we need to know how maps data
props is implemented under the hood?

94
00:06:10.660 --> 00:06:12.510
&gt;&gt; Brian Holt: No, cuz I certainly don't.

95
00:06:17.220 --> 00:06:19.259
&gt;&gt; Brian Holt: The basic gist of what's
going on, let's see, where am I?

96
00:06:19.259 --> 00:06:23.948
I'm in landing,
is you've taken the full state,

97
00:06:23.948 --> 00:06:28.210
and you return a sub set
of state that you want.

98
00:06:28.210 --> 00:06:30.450
That's it.

99
00:06:30.450 --> 00:06:32.798
The end,
there's not anything more to it than that.

100
00:06:35.411 --> 00:06:39.467
&gt;&gt; Speaker 2: John was asking,
do we need to add dispatch,

101
00:06:39.467 --> 00:06:43.501
I guess it is, to prop types,
the linter is saying it's missing a prop.

102
00:06:43.501 --> 00:06:44.472
&gt;&gt; Brian Holt: We do.

103
00:06:51.988 --> 00:06:53.400
&gt;&gt; Brian Holt: I was getting there,
I promise.

104
00:06:54.960 --> 00:06:55.876
But that's fine.

105
00:06:59.512 --> 00:07:01.457
&gt;&gt; Brian Holt: So I'll save that.

106
00:07:03.930 --> 00:07:06.790
&gt;&gt; Brian Holt: And
now we've completed the whole loop.

107
00:07:06.790 --> 00:07:09.170
So let's go make sure it works first.

108
00:07:11.660 --> 00:07:15.830
Refresh the page, and
now you can actually modify it.

109
00:07:15.830 --> 00:07:19.644
Let's make sure I'm not having any,
yeah whatever it gets no connection,

110
00:07:19.644 --> 00:07:20.430
I don't care.

111
00:07:23.620 --> 00:07:29.880
I don't know what that actually is,
but anyway.

112
00:07:29.880 --> 00:07:33.500
Now, whatever is in this particular
input field is going to be a reflection

113
00:07:33.500 --> 00:07:36.720
of what's in Redux and
we're able to modify it via actions.

114
00:07:41.520 --> 00:07:44.860
So let's actually go draw out
the circle of everything that happens.

115
00:07:44.860 --> 00:07:45.365
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: Question?

116
00:07:45.365 --> 00:07:46.670
&gt;&gt; Speaker 2: Question.

117
00:07:46.670 --> 00:07:49.500
They would like a little more
explanation about dispatch itself.

118
00:07:51.710 --> 00:07:54.470
&gt;&gt; Brian Holt: I mean,
what dispatch is actually gonna do is?

119
00:07:57.470 --> 00:07:59.260
So let's go through the entire lifecycle.

120
00:07:59.260 --> 00:08:00.350
If it still doesn't make sense,

121
00:08:00.350 --> 00:08:03.920
then we can dwell a bit more
on the function of dispatch.

122
00:08:03.920 --> 00:08:11.170
But the TLDR is it takes,
it creates an action or

123
00:08:11.170 --> 00:08:14.650
rather, you create an action and
then you pass that into the root reducer.

124
00:08:17.250 --> 00:08:21.226
That's what dispatch does, is it
dispatches an action to the root reducer.

