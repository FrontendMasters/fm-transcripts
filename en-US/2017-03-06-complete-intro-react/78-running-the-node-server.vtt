WEBVTT

1
00:00:00.404 --> 00:00:02.200
&gt;&gt; Brian Holt: So now what we wanna do,

2
00:00:02.200 --> 00:00:07.140
over here I'm gonna run my npm run dev,
no I want watch.

3
00:00:07.140 --> 00:00:09.690
So I'm gonna go back to using watch,
I'm gonna stop using the dev server.

4
00:00:09.690 --> 00:00:16.371
So I'm gonna do npm run watch over here.
&gt;&gt; Brian Holt: And

5
00:00:16.371 --> 00:00:20.760
what I'm gonna do here instead, I gonna
make sure what version of Node I'm on.

6
00:00:20.760 --> 00:00:24.224
I'm on Node 7, right, so
make sure you're using a version above 4.

7
00:00:25.320 --> 00:00:30.132
And I'm gonna say node.
&gt;&gt; Brian Holt: First

8
00:00:30.132 --> 00:00:33.264
thing I have to say is,
I have to say NODE_ENV=server, right?

9
00:00:33.264 --> 00:00:36.640
Cuz I have to make sure that it's
in the correct Node environment.

10
00:00:36.640 --> 00:00:41.912
And then I'm gonna say, node server.js.

11
00:00:46.266 --> 00:00:48.420
&gt;&gt; Brian Holt: And what did I do here?

12
00:00:48.420 --> 00:00:54.980
Yes, we need to fix this too.
&gt;&gt; Brian Holt: So we have another problem.

13
00:00:54.980 --> 00:01:02.350
Here in app.js, I think,
we're doing these CSS imports.

14
00:01:02.350 --> 00:01:06.143
You can fix this so it runs on the server.

15
00:01:06.143 --> 00:01:08.670
But it's enough configuration and
burden and

16
00:01:08.670 --> 00:01:12.900
enough time that I don't think it's
worth spending time doing today.

17
00:01:12.900 --> 00:01:13.917
So we're not going to, so

18
00:01:13.917 --> 00:01:17.811
what we're going to do instead,
&gt;&gt; Brian Holt: Is we're just going to

19
00:01:17.811 --> 00:01:21.273
delete these, and we're just going
to put them into the index.html.

20
00:01:23.586 --> 00:01:24.466
&gt;&gt; Brian Holt: So,

21
00:01:24.466 --> 00:01:31.074
link /public/normalize.css.

22
00:01:33.819 --> 00:01:34.972
&gt;&gt; Brian Holt: And,

23
00:01:38.087 --> 00:01:41.201
&gt;&gt; Brian Holt: style.css.

24
00:01:41.201 --> 00:01:47.649
So you have to pull in another loader,
it's call Isomorphic Style Loader,

25
00:01:47.649 --> 00:01:52.050
that knows how to do both Node and
client side.

26
00:01:52.050 --> 00:01:54.728
It's unfun, I'll put it that way.

27
00:01:54.728 --> 00:01:59.070
And I don't think it's worthy of
spending a lot of time fixing right now.

28
00:02:04.679 --> 00:02:05.635
&gt;&gt; Brian Holt: Okay?

29
00:02:07.158 --> 00:02:08.852
&gt;&gt; Brian Holt: So now I have listening on

30
00:02:08.852 --> 00:02:09.989
port 5050.

31
00:02:09.989 --> 00:02:13.818
So now if I go to,
instead of 8080, to 5050,

32
00:02:19.144 --> 00:02:21.710
&gt;&gt; Brian Holt: I get my app still, and

33
00:02:21.710 --> 00:02:26.342
it still works.
&gt;&gt; Brian Holt: Let's check

34
00:02:26.342 --> 00:02:27.870
out why this is cool.

35
00:02:27.870 --> 00:02:35.348
So, if you go to View Source now,
&gt;&gt; Brian Holt: Look at everything

36
00:02:35.348 --> 00:02:40.700
that's coming back from the server.
&gt;&gt; Brian Holt: Right,

37
00:02:40.700 --> 00:02:47.394
look at everything that's coming back.

38
00:02:51.796 --> 00:02:58.199
Pretty compelling, I think.
&gt;&gt; Brian Holt: So,

39
00:02:58.199 --> 00:03:00.525
we can even go as far to say,

40
00:03:05.207 --> 00:03:08.588
&gt;&gt; Brian Holt: Bring up our dev tools, and

41
00:03:08.588 --> 00:03:15.740
say, Disable JavaScript.
&gt;&gt; Brian Holt: We

42
00:03:15.740 --> 00:03:18.020
can still navigate our entire app.

43
00:03:19.640 --> 00:03:24.408
Obviously it's not gonna be interactive,
but we can still navigate the app

44
00:03:24.408 --> 00:03:29.405
with no JavaScript.
&gt;&gt; Brian Holt: That's amazing,

45
00:03:29.405 --> 00:03:31.542
I didn't hear enough ohs and
ahs, seriously.

46
00:03:31.542 --> 00:03:35.397
[LAUGH] I think it's really cool,
that that still works.

47
00:03:41.444 --> 00:03:44.615
&gt;&gt; Brian Holt: Any questions about that?

48
00:03:44.615 --> 00:03:46.369
I think it's phenomenal.

49
00:03:46.369 --> 00:03:48.986
Don't get me wrong, I'm not going
to assert that it's easy, but

50
00:03:48.986 --> 00:03:51.977
I think it's phenomenal that there's not
a ton of line of codes to get that to

51
00:03:51.977 --> 00:03:55.083
work.
&gt;&gt; Brian Holt: But

52
00:03:55.083 --> 00:03:58.535
lets talk about why this
introduces additional complexity.

53
00:03:58.535 --> 00:04:02.215
Before we could pretty well assume
that we could use window.blah

54
00:04:02.215 --> 00:04:03.840
whenever we wanted to.

55
00:04:03.840 --> 00:04:05.840
Any sort of like DOM APIs or Ajax things,

56
00:04:05.840 --> 00:04:09.100
we didn't really have to care too
much where that stuff was happening.

57
00:04:09.100 --> 00:04:12.390
Now we have to be extremely careful that
we're not trying to reference the DOM

58
00:04:12.390 --> 00:04:14.710
where it won't necessarily be available.

59
00:04:14.710 --> 00:04:17.820
We can't make Ajax calls unless
we're sure that the DOM's available.

60
00:04:17.820 --> 00:04:19.916
There's additional considerations
everywhere that's like,

61
00:04:19.916 --> 00:04:23.300
okay this gonna be running both
in Node and in the browser, and

62
00:04:23.300 --> 00:04:25.220
we don't want to blow up our Node server,
right?

63
00:04:26.870 --> 00:04:28.314
All considerations that
we have to worry about

64
00:04:28.314 --> 00:04:33.180
now.
&gt;&gt; Brian Holt: Any questions?

65
00:04:33.180 --> 00:04:34.250
&gt;&gt; Speaker 2: There's a question from

66
00:04:34.250 --> 00:04:35.530
Anton.

67
00:04:35.530 --> 00:04:37.140
He got a warning message talking about,

68
00:04:37.140 --> 00:04:41.539
target node has markup rendered by React,
but there are unrelated nodes as well.

69
00:04:42.920 --> 00:04:46.615
And a follow on, this is most commonly
caused by white space inserted around

70
00:04:46.615 --> 00:04:49.110
server-rendered markup on localhost 5050.

71
00:04:50.330 --> 00:04:57.208
I guess you're probably getting it too.
&gt;&gt; Brian Holt: I don't think so.

72
00:04:57.208 --> 00:04:58.074
&gt;&gt; Speaker 2: No?

73
00:05:00.519 --> 00:05:01.801
&gt;&gt; Speaker 2: It's generally when

74
00:05:01.801 --> 00:05:05.820
you have your markup kind of broken
lines and that kind of stuff.

75
00:05:05.820 --> 00:05:07.120
&gt;&gt; Brian Holt: Yeah, so notice that

76
00:05:07.120 --> 00:05:08.900
there's no white space in here.
&gt;&gt; Speaker 2: Yeah,

77
00:05:08.900 --> 00:05:11.760
okay.
&gt;&gt; Brian Holt: So that's my guess.

78
00:05:11.760 --> 00:05:14.104
&gt;&gt; Speaker 2: All right.

79
00:05:14.104 --> 00:05:15.920
&gt;&gt; Brian Holt: Or it could be somewhere in

80
00:05:15.920 --> 00:05:19.723
that, but
it sounds like it's a white space problem.

81
00:05:19.723 --> 00:05:20.781
&gt;&gt; Speaker 2: Resolved.

82
00:05:20.781 --> 00:05:21.981
&gt;&gt; Brian Holt: Okay, so one thing I did

83
00:05:21.981 --> 00:05:22.881
want to show you,

84
00:05:22.881 --> 00:05:27.910
that's another thing we have to be very
careful about with server-side rendering.

85
00:05:27.910 --> 00:05:32.622
So inside of app.js, I'm just gonna
put a thing right here where it's

86
00:05:32.622 --> 00:05:37.585
just going to output Date.now.
&gt;&gt; Brian Holt: Or

87
00:05:37.585 --> 00:05:40.850
let's just do Math.random.

88
00:05:40.850 --> 00:05:43.670
So every time I render this it's
gonna be slightly different, right,

89
00:05:43.670 --> 00:05:46.640
because Math.random's gonna give
us a slightly different number.

90
00:05:46.640 --> 00:05:51.041
So that means what gets rendered on
the server is gonna be different than what

91
00:05:51.041 --> 00:05:55.030
gets rendered the first time that
React bootstraps on the server, or

92
00:05:55.030 --> 00:05:59.632
sorry in the browser.
&gt;&gt; Brian Holt: So now,

93
00:05:59.632 --> 00:06:04.033
if you look at your,
&gt;&gt; Brian Holt: It's gonna say, hey, React

94
00:06:04.033 --> 00:06:08.620
tried to reuse markup in the container,
but the checksum was invalid, right?

95
00:06:08.620 --> 00:06:09.240
Why is that?

96
00:06:10.440 --> 00:06:14.560
Well, Math.random got run in the server,
and that was one value.

97
00:06:14.560 --> 00:06:17.140
Then it sends it down the wire,
then it tries to run with that same

98
00:06:17.140 --> 00:06:20.260
function again, and it's gonna get
something slightly different, right?

99
00:06:20.260 --> 00:06:22.940
Because Math.random's gonna
be different on both sides.

100
00:06:24.400 --> 00:06:28.450
So what Reacts says is, well these
two things are not the same thing, so

101
00:06:28.450 --> 00:06:30.960
I'm gonna blow away everything
you rendered on the server, and

102
00:06:30.960 --> 00:06:33.100
rerender something entirely new.

103
00:06:33.100 --> 00:06:34.040
This is a problem, right?

104
00:06:34.040 --> 00:06:39.750
Because you essentially killed all of your
benefits by sending it down the wire.

105
00:06:39.750 --> 00:06:42.635
The benefits of server-side rendering.

106
00:06:42.635 --> 00:06:46.748
Server-side rendering is only beneficial
if React is able to reuse the markup that

107
00:06:46.748 --> 00:06:47.970
it got from the server.

108
00:06:47.970 --> 00:06:50.790
If it has to blow it away,
then you lost all your performance gains.

109
00:06:50.790 --> 00:06:54.999
So you also have to be careful that
what happens on the server is precisely

110
00:06:54.999 --> 00:06:58.457
the same thing that happens on
first render in the browser.

111
00:07:00.251 --> 00:07:00.922
&gt;&gt; Brian Holt: Does that makes sense?

112
00:07:00.922 --> 00:07:05.380
Does that make sense that I'm
getting this now with Math.random?

113
00:07:05.380 --> 00:07:07.837
Yeah, so you just have to be
careful of something like that.

