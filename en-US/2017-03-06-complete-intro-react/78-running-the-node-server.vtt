WEBVTT

1
00:00:00.404 --> 00:00:02.200
&gt;&gt; Brian Holt: So now what we wanna do,

2
00:00:02.200 --> 00:00:07.140
over here I'm gonna run my npm run dev,
no I want watch.

3
00:00:07.140 --> 00:00:09.690
So I'm gonna go back to using watch,
I'm gonna stop using the dev server.

4
00:00:09.690 --> 00:00:11.524
So I'm gonna do npm run watch over here.

5
00:00:16.180 --> 00:00:18.156
&gt;&gt; Brian Holt: And
what I'm gonna do here instead,

6
00:00:18.156 --> 00:00:20.760
I gonna make sure what
version of Node I'm on.

7
00:00:20.760 --> 00:00:24.224
I'm on Node 7, right, so
make sure you're using a version above 4.

8
00:00:25.320 --> 00:00:26.554
And I'm gonna say node.

9
00:00:29.848 --> 00:00:33.264
&gt;&gt; Brian Holt: First thing I have to say
is, I have to say NODE_ENV=server, right?

10
00:00:33.264 --> 00:00:36.640
Cuz I have to make sure that it's
in the correct Node environment.

11
00:00:36.640 --> 00:00:41.912
And then I'm gonna say, node server.js.

12
00:00:46.266 --> 00:00:48.420
&gt;&gt; Brian Holt: And what did I do here?

13
00:00:48.420 --> 00:00:50.569
Yes, we need to fix this too.

14
00:00:52.350 --> 00:00:54.980
&gt;&gt; Brian Holt: So we have another problem.

15
00:00:54.980 --> 00:01:02.350
Here in app.js, I think,
we're doing these CSS imports.

16
00:01:02.350 --> 00:01:06.143
You can fix this so it runs on the server.

17
00:01:06.143 --> 00:01:08.670
But it's enough configuration and
burden and

18
00:01:08.670 --> 00:01:12.900
enough time that I don't think it's
worth spending time doing today.

19
00:01:12.900 --> 00:01:13.917
So we're not going to, so

20
00:01:13.917 --> 00:01:17.811
what we're going to do instead,
&gt;&gt; Brian Holt: Is we're just going to

21
00:01:17.811 --> 00:01:21.273
delete these, and we're just going
to put them into the index.html.

22
00:01:23.586 --> 00:01:31.074
&gt;&gt; Brian Holt: So,
link /public/normalize.css.

23
00:01:33.819 --> 00:01:41.201
&gt;&gt; Brian Holt: And,
&gt;&gt; Brian Holt: style.css.

24
00:01:41.201 --> 00:01:47.649
So you have to pull in another loader,
it's call Isomorphic Style Loader,

25
00:01:47.649 --> 00:01:52.050
that knows how to do both Node and
client side.

26
00:01:52.050 --> 00:01:54.728
It's unfun, I'll put it that way.

27
00:01:54.728 --> 00:01:59.070
And I don't think it's worthy of
spending a lot of time fixing right now.

28
00:02:04.679 --> 00:02:05.635
&gt;&gt; Brian Holt: Okay?

29
00:02:07.158 --> 00:02:09.989
&gt;&gt; Brian Holt: So
now I have listening on port 5050.

30
00:02:09.989 --> 00:02:13.818
So now if I go to,
instead of 8080, to 5050,

31
00:02:19.144 --> 00:02:21.710
&gt;&gt; Brian Holt: I get my app still, and

32
00:02:21.710 --> 00:02:23.608
it still works.

33
00:02:25.538 --> 00:02:27.870
&gt;&gt; Brian Holt: Let's check
out why this is cool.

34
00:02:27.870 --> 00:02:34.720
So, if you go to View Source now,
&gt;&gt; Brian Holt: Look

35
00:02:34.720 --> 00:02:37.030
at everything that's coming
back from the server.

36
00:02:39.362 --> 00:02:47.394
&gt;&gt; Brian Holt: Right,
look at everything that's coming back.

37
00:02:51.796 --> 00:02:53.214
Pretty compelling, I think.

38
00:02:57.795 --> 00:03:00.525
&gt;&gt; Brian Holt: So,
we can even go as far to say,

39
00:03:05.207 --> 00:03:08.588
&gt;&gt; Brian Holt: Bring up our dev tools, and

40
00:03:08.588 --> 00:03:12.120
say, Disable JavaScript.

41
00:03:15.588 --> 00:03:18.020
&gt;&gt; Brian Holt: We can still
navigate our entire app.

42
00:03:19.640 --> 00:03:22.621
Obviously it's not gonna be interactive,
but

43
00:03:22.621 --> 00:03:25.758
we can still navigate
the app with no JavaScript.

44
00:03:28.557 --> 00:03:31.542
&gt;&gt; Brian Holt: That's amazing, I didn't
hear enough ohs and ahs, seriously.

45
00:03:31.542 --> 00:03:35.397
[LAUGH] I think it's really cool,
that that still works.

46
00:03:41.444 --> 00:03:44.615
&gt;&gt; Brian Holt: Any questions about that?

47
00:03:44.615 --> 00:03:46.369
I think it's phenomenal.

48
00:03:46.369 --> 00:03:48.986
Don't get me wrong, I'm not going
to assert that it's easy, but

49
00:03:48.986 --> 00:03:52.290
I think it's phenomenal that there's not a
ton of line of codes to get that to work.

50
00:03:54.929 --> 00:03:58.535
&gt;&gt; Brian Holt: But lets talk about why
this introduces additional complexity.

51
00:03:58.535 --> 00:04:02.215
Before we could pretty well assume
that we could use window.blah

52
00:04:02.215 --> 00:04:03.840
whenever we wanted to.

53
00:04:03.840 --> 00:04:05.840
Any sort of like DOM APIs or Ajax things,

54
00:04:05.840 --> 00:04:09.100
we didn't really have to care too
much where that stuff was happening.

55
00:04:09.100 --> 00:04:12.390
Now we have to be extremely careful that
we're not trying to reference the DOM

56
00:04:12.390 --> 00:04:14.710
where it won't necessarily be available.

57
00:04:14.710 --> 00:04:17.820
We can't make Ajax calls unless
we're sure that the DOM's available.

58
00:04:17.820 --> 00:04:19.916
There's additional considerations
everywhere that's like,

59
00:04:19.916 --> 00:04:23.300
okay this gonna be running both
in Node and in the browser, and

60
00:04:23.300 --> 00:04:25.220
we don't want to blow up our Node server,
right?

61
00:04:26.870 --> 00:04:28.504
All considerations that we
have to worry about now.

62
00:04:31.760 --> 00:04:33.180
&gt;&gt; Brian Holt: Any questions?

63
00:04:33.180 --> 00:04:35.530
&gt;&gt; Speaker 2: There's
a question from Anton.

64
00:04:35.530 --> 00:04:37.140
He got a warning message talking about,

65
00:04:37.140 --> 00:04:41.539
target node has markup rendered by React,
but there are unrelated nodes as well.

66
00:04:42.920 --> 00:04:46.615
And a follow on, this is most commonly
caused by white space inserted around

67
00:04:46.615 --> 00:04:49.110
server-rendered markup on localhost 5050.

68
00:04:50.330 --> 00:04:53.224
I guess you're probably getting it too.

69
00:04:56.504 --> 00:04:57.208
&gt;&gt; Brian Holt: I don't think so.

70
00:04:57.208 --> 00:04:58.074
&gt;&gt; Speaker 2: No?

71
00:05:00.519 --> 00:05:04.434
&gt;&gt; Speaker 2: It's generally when you
have your markup kind of broken lines and

72
00:05:04.434 --> 00:05:05.820
that kind of stuff.

73
00:05:05.820 --> 00:05:08.780
&gt;&gt; Brian Holt: Yeah, so notice that
there's no white space in here.

74
00:05:08.780 --> 00:05:10.090
&gt;&gt; Speaker 2: Yeah, okay.

75
00:05:10.090 --> 00:05:11.760
&gt;&gt; Brian Holt: So that's my guess.

76
00:05:11.760 --> 00:05:14.104
&gt;&gt; Speaker 2: All right.

77
00:05:14.104 --> 00:05:16.662
&gt;&gt; Brian Holt: Or
it could be somewhere in that, but

78
00:05:16.662 --> 00:05:19.723
it sounds like it's a white space problem.

79
00:05:19.723 --> 00:05:20.781
&gt;&gt; Speaker 2: Resolved.

80
00:05:20.781 --> 00:05:22.881
&gt;&gt; Brian Holt: Okay, so
one thing I did want to show you,

81
00:05:22.881 --> 00:05:27.910
that's another thing we have to be very
careful about with server-side rendering.

82
00:05:27.910 --> 00:05:29.402
So inside of app.js,

83
00:05:29.402 --> 00:05:34.827
I'm just gonna put a thing right here
where it's just going to output Date.now.

84
00:05:37.335 --> 00:05:40.850
&gt;&gt; Brian Holt: Or
let's just do Math.random.

85
00:05:40.850 --> 00:05:43.670
So every time I render this it's
gonna be slightly different, right,

86
00:05:43.670 --> 00:05:46.640
because Math.random's gonna give
us a slightly different number.

87
00:05:46.640 --> 00:05:51.041
So that means what gets rendered on
the server is gonna be different than what

88
00:05:51.041 --> 00:05:55.030
gets rendered the first time that
React bootstraps on the server, or

89
00:05:55.030 --> 00:05:56.361
sorry in the browser.

90
00:05:59.180 --> 00:06:00.734
&gt;&gt; Brian Holt: So now,
if you look at your,

91
00:06:02.525 --> 00:06:03.430
&gt;&gt; Brian Holt: It's gonna say,

92
00:06:03.430 --> 00:06:06.265
hey, React tried to reuse
markup in the container, but

93
00:06:06.265 --> 00:06:08.620
the checksum was invalid, right?

94
00:06:08.620 --> 00:06:09.240
Why is that?

95
00:06:10.440 --> 00:06:14.560
Well, Math.random got run in the server,
and that was one value.

96
00:06:14.560 --> 00:06:17.140
Then it sends it down the wire,
then it tries to run with that same

97
00:06:17.140 --> 00:06:20.260
function again, and it's gonna get
something slightly different, right?

98
00:06:20.260 --> 00:06:22.940
Because Math.random's gonna
be different on both sides.

99
00:06:24.400 --> 00:06:28.450
So what Reacts says is, well these
two things are not the same thing, so

100
00:06:28.450 --> 00:06:30.960
I'm gonna blow away everything
you rendered on the server, and

101
00:06:30.960 --> 00:06:33.100
rerender something entirely new.

102
00:06:33.100 --> 00:06:34.040
This is a problem, right?

103
00:06:34.040 --> 00:06:39.750
Because you essentially killed all of your
benefits by sending it down the wire.

104
00:06:39.750 --> 00:06:42.635
The benefits of server-side rendering.

105
00:06:42.635 --> 00:06:46.748
Server-side rendering is only beneficial
if React is able to reuse the markup that

106
00:06:46.748 --> 00:06:47.970
it got from the server.

107
00:06:47.970 --> 00:06:50.790
If it has to blow it away,
then you lost all your performance gains.

108
00:06:50.790 --> 00:06:54.999
So you also have to be careful that
what happens on the server is precisely

109
00:06:54.999 --> 00:06:58.457
the same thing that happens on
first render in the browser.

110
00:07:00.251 --> 00:07:00.922
&gt;&gt; Brian Holt: Does that makes sense?

111
00:07:00.922 --> 00:07:05.380
Does that make sense that I'm
getting this now with Math.random?

112
00:07:05.380 --> 00:07:07.837
Yeah, so you just have to be
careful of something like that.

