WEBVTT

1
00:00:00.000 --> 00:00:01.709
&gt;&gt; Brian Holt: So, let's do one more test.

2
00:00:01.709 --> 00:00:05.406
We wanna simulate if someone
searches that if that works.

3
00:00:05.406 --> 00:00:10.064
So, we're gonna run one more test,

4
00:00:10.064 --> 00:00:18.647
('Search should render correct
amount of shows based on search.

5
00:00:27.057 --> 00:00:30.253
&gt;&gt; Brian Holt: I'm gonna
make some searchWord,

6
00:00:30.253 --> 00:00:33.562
that's gonna be equal to 'house.

7
00:00:33.562 --> 00:00:34.915
In this particular case,

8
00:00:34.915 --> 00:00:38.053
you could make it something else
that you know the answer to.

9
00:00:38.053 --> 00:00:39.864
You're gonna say, const component.

10
00:00:42.532 --> 00:00:46.712
&gt;&gt; Brian Holt: = shallow(&lt;search /&gt;),

11
00:00:46.712 --> 00:00:51.974
then I'm gonna do a component.find and

12
00:00:51.974 --> 00:00:55.543
I'm gonna look for input.

13
00:00:55.543 --> 00:00:58.202
Typically, I would make this
more specific, but I know for

14
00:00:58.202 --> 00:00:59.595
a fact this has only one input.

15
00:00:59.595 --> 00:01:01.620
And by the end of the workshop,
there is still gonna be one input.

16
00:01:01.620 --> 00:01:06.072
So I'm just gonna go with that and

17
00:01:06.072 --> 00:01:11.956
I'm gonna do a simulate,
a change event and

18
00:01:11.956 --> 00:01:19.603
I'm gonna pass it my synthetic event,
target: value.

19
00:01:25.182 --> 00:01:26.329
&gt;&gt; Brian Holt: SearchWord.

20
00:01:35.461 --> 00:01:36.537
&gt;&gt; Brian Holt: Space.

21
00:01:41.615 --> 00:01:45.671
&gt;&gt; Brian Holt: So, it's basically
going to fire like an event.

22
00:01:45.671 --> 00:01:49.759
The caveat I wanna throw
out to you here is that

23
00:01:49.759 --> 00:01:53.642
Enzyme does not do event bubbling for you.

24
00:01:53.642 --> 00:01:56.040
So if you want to simulate a change event,

25
00:01:56.040 --> 00:01:59.330
you need to simulate it
at where the handler is.

26
00:01:59.330 --> 00:02:01.216
For the most part,
that's not really a problem.

27
00:02:01.216 --> 00:02:04.686
But if you're expecting it do event
bubbling, that can be quite frustrating.

28
00:02:04.686 --> 00:02:08.209
So, just keep in mind that
it does not bubble events.

29
00:02:08.209 --> 00:02:12.372
&gt;&gt; Speaker 2: Yeah, this is for
unit testing, not the other thing.

30
00:02:12.372 --> 00:02:13.262
&gt;&gt; Brian Holt: Yeah, integration testing.

31
00:02:13.262 --> 00:02:13.910
&gt;&gt; Speaker 2: Integration testing.

32
00:02:13.910 --> 00:02:15.597
Thank you.

33
00:02:15.597 --> 00:02:20.826
&gt;&gt; Brian Holt: And then I typically
would do this differently.

34
00:02:20.826 --> 00:02:23.661
But for the sake of time,

35
00:02:23.661 --> 00:02:28.800
I'm just gonna kind of
like copy some logic.

36
00:02:28.800 --> 00:02:33.400
I'm gonna put this filter statement here.

37
00:02:36.773 --> 00:02:39.750
&gt;&gt; Brian Holt: So, I'm just gonna
copy this straight out of search.

38
00:02:39.750 --> 00:02:41.772
Normally, I would abstract
this into another function.

39
00:02:41.772 --> 00:02:46.366
Import it into both places, so
that you're using the same logic.

40
00:02:46.366 --> 00:02:49.201
#toolazy, I'm not going to right now.

41
00:02:49.201 --> 00:02:54.047
So I'm gonna say, preload.shows.filter

42
00:03:05.042 --> 00:03:06.468
&gt;&gt; Brian Holt: This is
gonna be the same filter.

43
00:03:06.468 --> 00:03:10.605
This is gonna work the same way, but
you would just want the length of this.

44
00:03:17.272 --> 00:03:21.566
&gt;&gt; Brian Holt: And now you're gonna say,

45
00:03:21.566 --> 00:03:28.515
expect(component.find(ShowCard).length).t-

46
00:03:28.515 --> 00:03:34.459
oEqual(showCount).

47
00:03:39.768 --> 00:03:41.533
&gt;&gt; Brian Holt: Now you can get
more specific and say like,

48
00:03:41.533 --> 00:03:44.677
I specifically expect there to be House
of Cards and I expect there to be, and

49
00:03:44.677 --> 00:03:46.219
you can get more granular than that.

50
00:03:46.219 --> 00:03:52.134
But for the most part, the count, at least
for me is going to be a sufficient judge,

51
00:03:52.134 --> 00:03:56.104
but I kind of err on the side
of like let's write quick and

52
00:03:56.104 --> 00:04:00.181
easy tests that are have
strong correlation to working.

53
00:04:00.181 --> 00:04:02.692
And then if it breaks later,
let's write stronger tests.

54
00:04:06.868 --> 00:04:11.357
&gt;&gt; Brian Holt: So,
let me validate that this still works.

55
00:04:16.050 --> 00:04:17.838
&gt;&gt; Brian Holt: And
it failed, why did it fail?

56
00:04:21.657 --> 00:04:23.897
&gt;&gt; Brian Holt: It cannot restate.

57
00:04:23.897 --> 00:04:27.174
I said, state.searchTerm here.

58
00:04:27.174 --> 00:04:28.841
I actually just want searchWord.

59
00:04:32.815 --> 00:04:39.135
&gt;&gt; Brian Holt: SearchWord,
cuz there's no state here.

60
00:04:39.135 --> 00:04:46.331
We're just using the searchWord up here,
&gt;&gt; Brian Holt: So, let's try that again.

61
00:04:46.331 --> 00:04:47.770
The dangers of copy paste.

62
00:04:50.033 --> 00:04:50.901
&gt;&gt; Brian Holt: Now, it works.

63
00:04:52.322 --> 00:04:54.713
&gt;&gt; Brian Holt: Does anybody have
any questions of why that works or

64
00:04:54.713 --> 00:04:55.388
how it works?

65
00:05:03.555 --> 00:05:05.108
&gt;&gt; Brian Holt: It's kind
of an interesting test.

66
00:05:09.486 --> 00:05:14.048
&gt;&gt; Brian Holt: So,
I got like maybe three more tiny

67
00:05:14.048 --> 00:05:19.382
things to work and then we we'll be done.

68
00:05:19.382 --> 00:05:22.502
So what I've shown you is the,
in my opinion,

69
00:05:22.502 --> 00:05:27.234
the most compelling reason to use
Enzyme which is the shallow render.

70
00:05:27.234 --> 00:05:31.489
The nice thing about the shallow
render is it doesn't pull on JS DOM.

71
00:05:31.489 --> 00:05:32.582
It doesn't pull on a browser.

72
00:05:32.582 --> 00:05:34.081
It doesn't use Phantom or
anything like that.

73
00:05:34.081 --> 00:05:36.964
It's purely JavaScript and
it's really fast.

74
00:05:36.964 --> 00:05:40.008
These test that you see here
are running pretty fast.

75
00:05:40.008 --> 00:05:43.547
I run my test suite in 1.5 seconds,
that's not bad and

76
00:05:43.547 --> 00:05:47.550
that includes all the bootstrapping and
everything like that.

77
00:05:47.550 --> 00:05:51.962
So running the shallow renderer is like
no problem, let's do it a whole bunch.

78
00:05:51.962 --> 00:05:56.423
You can use it willy nilly and
you're not gonna slow down your tests.

79
00:05:56.423 --> 00:05:57.801
There is one level more.

80
00:05:57.801 --> 00:05:58.527
Sorry, go ahead.

81
00:05:58.527 --> 00:05:59.226
&gt;&gt; Speaker 2: I was going to.

82
00:05:59.226 --> 00:06:03.210
They question is what would you
recommend for an integration test?

83
00:06:03.210 --> 00:06:05.176
&gt;&gt; Brian Holt: I mean,
selenium, I suppose.

84
00:06:05.176 --> 00:06:09.138
I have a hard time saying,
I recommend selenium, but

85
00:06:09.138 --> 00:06:12.228
that just seems to be the de facto answer.

86
00:06:15.558 --> 00:06:19.547
&gt;&gt; Brian Holt: Or higher QA, that's
probably my better answer is higher QA.

87
00:06:19.547 --> 00:06:23.215
[LAUGH]
&gt;&gt; Brian Holt: I don't know if I have

88
00:06:23.215 --> 00:06:24.567
a good answer for that.

89
00:06:24.567 --> 00:06:26.338
We use selenium, I'll put it that way.

90
00:06:28.822 --> 00:06:33.283
&gt;&gt; Brian Holt: So, Enzyme has two
additional depths of rendering.

91
00:06:33.283 --> 00:06:38.360
One of them they just call it render, but
that's actually going to bring in JS DOM

92
00:06:38.360 --> 00:06:43.229
which has to bootstrap and JS DOM is like
a copy of the DOM, but on JavaScript.

93
00:06:43.229 --> 00:06:47.779
So it's not quite as bad as having this
like open Chrome or open Phantom or

94
00:06:47.779 --> 00:06:50.702
something like that, but it's pretty slow.

95
00:06:50.702 --> 00:06:55.500
So, you can greatly slow down
your tests by bringing in render.

96
00:06:55.500 --> 00:07:01.824
So I would recommend avoiding it, if you
can like at all costs like work really

97
00:07:01.824 --> 00:07:07.778
hard to make sure that you don't pull
the render like the normal render.

98
00:07:07.778 --> 00:07:09.703
It is like I said much slower and

99
00:07:09.703 --> 00:07:14.386
then there's one more that's even
slower than that, but gets even also.

100
00:07:14.386 --> 00:07:18.357
I guess the question is
why would you use render?

101
00:07:18.357 --> 00:07:21.387
If you need to interact with DOM APIs,

102
00:07:21.387 --> 00:07:26.027
if you need to do more crazy
things than we're doing here,

103
00:07:26.027 --> 00:07:31.993
usually it's to interact with DOM APIs,
then you need to bring in render,

104
00:07:31.993 --> 00:07:36.941
cuz the shallow render doesn't
have any DOM APIs available.

105
00:07:36.941 --> 00:07:41.543
And if you need to go full on static
rendering like completely render

106
00:07:41.543 --> 00:07:46.647
everything out and have all sort of
like DOM exploration available to you.

107
00:07:46.647 --> 00:07:50.957
You can actually use what
they call static rendering,

108
00:07:50.957 --> 00:07:56.107
which I think will also use JS DOM and
then it wraps cheerio on top of

109
00:07:56.107 --> 00:08:01.071
that which Cheerio is a great
library if you've ever used it for

110
00:08:01.071 --> 00:08:05.306
just doing like offline
stack analysis of your HTML.

111
00:08:05.306 --> 00:08:08.628
It has like a j quack interface to it.

112
00:08:08.628 --> 00:08:10.648
But again, even slower.

113
00:08:10.648 --> 00:08:14.082
I definitely recommend avoiding it,
if you can.

114
00:08:14.082 --> 00:08:17.193
&gt;&gt; Speaker 2: Do Jest and
Enzyme need to run in Phantom or anything?

115
00:08:17.193 --> 00:08:20.942
Cuz I noticed without any,
we didn't have to configure anything and

116
00:08:20.942 --> 00:08:22.049
no Phantoms run in.

117
00:08:22.049 --> 00:08:23.089
&gt;&gt; Brian Holt: Nope, it's just Jasmine.

118
00:08:23.089 --> 00:08:25.998
That's the only hidden dependency here.

119
00:08:25.998 --> 00:08:28.154
So, that's why it's pretty fast.

120
00:08:28.154 --> 00:08:34.665
Yeah, as much as you can avoid
bringing Phantom is a good thing.

121
00:08:34.665 --> 00:08:36.568
Yeah.
&gt;&gt; Speaker 2: Francoise asks a question.

122
00:08:36.568 --> 00:08:40.459
It seems Enzyme does more that Jest
when you use Jest versus Enzyme.

123
00:08:42.100 --> 00:08:44.362
My response was you use them together.

124
00:08:44.362 --> 00:08:45.140
&gt;&gt; Brian Holt: Use them together.

125
00:08:45.140 --> 00:08:49.323
I mean, Enzyme can be used with mocha like
my other workshop uses enzyme as well,

126
00:08:49.323 --> 00:08:51.121
the version one of this workshop.

127
00:08:51.121 --> 00:08:55.509
So if you're testing React components,
you just use Enzyme.

128
00:08:55.509 --> 00:08:58.372
That's almost 100% correlation.

129
00:08:58.372 --> 00:08:59.081
&gt;&gt; Speaker 2: Off topic question.

130
00:08:59.081 --> 00:08:59.915
&gt;&gt; Brian Holt: Sure.

131
00:08:59.915 --> 00:09:04.379
&gt;&gt; Speaker 2: Dinard is asking,
where do you follow new technologies and

132
00:09:04.379 --> 00:09:06.884
understand when to you use them?

133
00:09:06.884 --> 00:09:10.083
&gt;&gt; Brian Holt: I follow a lot of people on
Twitter which is a really crappy answer,

134
00:09:10.083 --> 00:09:12.140
because who do I follow on Twitter?

135
00:09:12.140 --> 00:09:14.337
People.

136
00:09:14.337 --> 00:09:15.759
But honestly, that's where I get it.

137
00:09:15.759 --> 00:09:18.442
I get water cooler talk at Netflix.

138
00:09:18.442 --> 00:09:20.144
Again, not helpful.

139
00:09:20.144 --> 00:09:25.464
So I don't read hacker
news as much these days,

140
00:09:25.464 --> 00:09:29.727
because everyone's a jerk on there.

141
00:09:29.727 --> 00:09:32.935
The subreddit for JavaScript on Reddit for
the most part, it's pretty good.

142
00:09:36.134 --> 00:09:37.587
&gt;&gt; Brian Holt: That's probably it and

143
00:09:37.587 --> 00:09:40.935
then just I play around on
stuff on the weekend for fun.

144
00:09:40.935 --> 00:09:44.150
&gt;&gt; Speaker 2: Do you have a list on
Twitter that you put your favorite

145
00:09:44.150 --> 00:09:44.868
people on?

146
00:09:44.868 --> 00:09:45.627
&gt;&gt; Brian Holt: I don't.

147
00:09:45.627 --> 00:09:50.952
Yeah, I have my thousand followers or
thousand people that I follow.

148
00:09:50.952 --> 00:09:51.639
Yeah.

149
00:09:54.957 --> 00:09:55.929
&gt;&gt; Brian Holt: It's 5,

150
00:09:55.929 --> 00:10:01.768
I have two more things to talk
about which should be pretty fast.

151
00:10:01.768 --> 00:10:04.543
&gt;&gt; Speaker 3: [INAUDIBLE] 20 minutes left,

152
00:10:04.543 --> 00:10:08.924
this is the left card to
talk all the way through.

153
00:10:08.924 --> 00:10:09.789
&gt;&gt; Brian Holt: Yes.

154
00:10:09.789 --> 00:10:12.028
&gt;&gt; Speaker 3: We're gonna have to take
a break if this goes more than 20.

155
00:10:12.028 --> 00:10:16.162
&gt;&gt; Brian Holt: Nope, I can do it like ten.

156
00:10:16.162 --> 00:10:21.545
So, just brief treatise.

157
00:10:21.545 --> 00:10:24.178
We'll save the rest of the questions for

158
00:10:24.178 --> 00:10:27.283
the end, but
I really don't do this very much.

159
00:10:27.283 --> 00:10:29.687
I don't really test my
react components that much.

160
00:10:29.687 --> 00:10:33.713
What I do is I abstract my modules out,
my business logic into modules and

161
00:10:33.713 --> 00:10:35.957
I just test the hell
out of the modules and

162
00:10:35.957 --> 00:10:39.328
I very rarely test the actual
react components themselves.

163
00:10:39.328 --> 00:10:43.679
Just because at Netflix we
do a lot of AB testing, so

164
00:10:43.679 --> 00:10:48.046
the amount of thrash we have
on markup is just huge.

165
00:10:48.046 --> 00:10:51.747
I'll push at the end, but
there's no more code to write today.

166
00:10:51.747 --> 00:10:55.101
So yeah, we'll be fast.

167
00:10:57.858 --> 00:11:01.216
&gt;&gt; Brian Holt: So that's just my
personal feeling on unit testing and

168
00:11:01.216 --> 00:11:05.162
I feel like that is controversial,
so take it with a bag of salt.

169
00:11:05.162 --> 00:11:09.270
But yeah, I don't do a lot of unit
testing on my React components.

