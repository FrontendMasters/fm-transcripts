WEBVTT

1
00:00:00.410 --> 00:00:03.120
&gt;&gt; Brian Holt: We're gonna move
on to universal rendering.

2
00:00:03.120 --> 00:00:06.240
So, taking our app,
rendering it on the server first, and

3
00:00:06.240 --> 00:00:07.650
then sending it down the wire.

4
00:00:07.650 --> 00:00:09.610
So, let's discuss why you wanna do that,

5
00:00:09.610 --> 00:00:11.010
cuz it sounds like a whole
lot of extra work.

6
00:00:12.070 --> 00:00:17.520
So, if I open my View Source here,
View Page Source.

7
00:00:17.520 --> 00:00:21.590
The page source for
this is index.html, right?

8
00:00:21.590 --> 00:00:23.556
Nothing happens here, there's nothing.

9
00:00:23.556 --> 00:00:26.127
And if I open this page
without JavaScript,

10
00:00:35.203 --> 00:00:36.515
&gt;&gt; Brian Holt: Disable JavaScript,

11
00:00:36.515 --> 00:00:37.346
right there.

12
00:00:53.561 --> 00:00:54.538
&gt;&gt; Brian Holt: Yeah, cuz I have to run dev

13
00:00:54.538 --> 00:00:59.681
again.
&gt;&gt; Brian Holt: So, if I run this

14
00:00:59.681 --> 00:01:04.860
without JavaScript, I should just get
a React has not yet rendered, right?

15
00:01:04.860 --> 00:01:08.360
Because if you send down this app,
it's an entire JavaScript app.

16
00:01:08.360 --> 00:01:11.310
It can't do anything if
JavaScript is disabled.

17
00:01:11.310 --> 00:01:13.660
Now, people disabling JavaScript,

18
00:01:13.660 --> 00:01:15.980
probably a pretty minuscule
amount of people these days.

19
00:01:15.980 --> 00:01:17.543
If you're gonna be on the web,
for the most part,

20
00:01:17.543 --> 00:01:19.540
you're gonna running JavaScript.

21
00:01:19.540 --> 00:01:22.300
However, where this becomes a problem
is if you're on a really slow

22
00:01:22.300 --> 00:01:23.370
connection, right?

23
00:01:23.370 --> 00:01:27.910
Like on shitty hotel Wi-Fi,
or you're in 2G, or

24
00:01:27.910 --> 00:01:32.040
you're in a foreign country that
has really bad Internet access.

25
00:01:32.040 --> 00:01:33.880
These are all common use places, right?

26
00:01:35.270 --> 00:01:39.620
So, what we want instead is we want to
send down the complete markup first for

27
00:01:39.620 --> 00:01:40.630
this initial page.

28
00:01:40.630 --> 00:01:45.464
So, this markup appears before
someone instantaneously, right?

29
00:01:45.464 --> 00:01:47.200
Then they look at this page, right,

30
00:01:47.200 --> 00:01:49.505
it's gonna take me at
least a second to discern.

31
00:01:49.505 --> 00:01:52.380
Okay, brand, okay, search.

32
00:01:52.380 --> 00:01:53.810
Okay, now I can search for a movie.

33
00:01:53.810 --> 00:01:56.870
So I'm gonna search for house, right?

34
00:01:56.870 --> 00:02:01.340
It's gonna take me a least a couple
seconds to put all those things together.

35
00:02:01.340 --> 00:02:05.060
Hopefully by the time that I've completed
that entire thought process, and

36
00:02:05.060 --> 00:02:08.000
I'm ready to interact with your page,

37
00:02:08.000 --> 00:02:10.490
everything will have been
loaded by that point, right?

38
00:02:10.490 --> 00:02:12.200
But it starts that process sooner.

39
00:02:13.350 --> 00:02:17.870
Rather than having to wait for
the JavaScript to download, for React to

40
00:02:17.870 --> 00:02:22.050
bootstrap, for your app to finish the
first render, for it to mount to the DOM,

41
00:02:22.050 --> 00:02:25.620
all these different steps, you want it
to be something's in front of you, okay?

42
00:02:25.620 --> 00:02:29.260
And then, React is gonna hurry and
bootstrap behind the scene.

43
00:02:29.260 --> 00:02:33.210
So any question about the process and
why we want to do universal rendering?

44
00:02:35.120 --> 00:02:37.060
So we want to send down complete mark-up.

45
00:02:37.060 --> 00:02:38.900
That's the point of universal rendering.

46
00:02:40.540 --> 00:02:42.410
So, it's gonna send down this mark up.

47
00:02:42.410 --> 00:02:44.632
This mark up is not going
to be interactive, right?

48
00:02:44.632 --> 00:02:47.665
Because there's no
JavaScript behind it yet.

49
00:02:47.665 --> 00:02:51.402
We want React to kind of like hurry up and
play catch up so

50
00:02:51.402 --> 00:02:54.751
that it can bootstrap
itself behind the scenes.

51
00:02:54.751 --> 00:03:01.365
So by the time someone's willing to
interact with it, the app is ready to go.

52
00:03:01.365 --> 00:03:02.851
Does that make sense?

53
00:03:02.851 --> 00:03:09.491
Okay, so I'm going to show
you how to do this with node.

54
00:03:09.491 --> 00:03:11.740
You obviously,
that this is a JavaScript application.

55
00:03:11.740 --> 00:03:13.670
Node is going to be
involved in here somewhere

56
00:03:13.670 --> 00:03:15.876
if you're gonna be able to do it.

57
00:03:15.876 --> 00:03:20.300
The way that we do it at Netflix is all
of our backend services, or many of our

58
00:03:20.300 --> 00:03:24.050
backend services are JVM based,
which obviously don't run JavaScript.

59
00:03:25.130 --> 00:03:29.520
So, we have a node server that
sits in front of our Java servers

60
00:03:29.520 --> 00:03:31.230
that then serve requests to people.

61
00:03:31.230 --> 00:03:33.070
So, people make requests against the node.

62
00:03:33.070 --> 00:03:35.991
We do all of our server side
rendering on our node server and

63
00:03:35.991 --> 00:03:37.309
then we send it back down.

64
00:03:37.309 --> 00:03:41.258
And our node server is actually what
talks to all of our different services.

65
00:03:41.258 --> 00:03:45.156
So, if you're on Python or Django or Ruby
or anything like that, that's how you're

66
00:03:45.156 --> 00:03:48.420
gonna have to do this if you want to
do this, which you should, I think.

