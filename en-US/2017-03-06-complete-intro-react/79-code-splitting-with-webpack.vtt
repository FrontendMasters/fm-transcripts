WEBVTT

1
00:00:00.670 --> 00:00:03.670
&gt;&gt; Brian: And now we're gonna do code
splitting, which is another really,

2
00:00:03.670 --> 00:00:04.430
really cool thing.

3
00:00:04.430 --> 00:00:09.276
But this is specific to Webpack but
it is surprisingly easy.

4
00:00:12.358 --> 00:00:14.821
&gt;&gt; Brian: So if we look at our app here,

5
00:00:14.821 --> 00:00:21.390
my last render had,
&gt;&gt; Brian: 1.4 megabytes of code.

6
00:00:21.390 --> 00:00:23.220
Now granted, this is the dev build, right?

7
00:00:24.300 --> 00:00:27.860
But nonetheless, that's really big, right?

8
00:00:27.860 --> 00:00:33.440
This is a stupid app, and it's
a megabyte of code, which is ridiculous.

9
00:00:33.440 --> 00:00:37.932
Furthermore, we have the interesting
problem that I load this page for

10
00:00:37.932 --> 00:00:40.120
the very first time, so
I load the landing page.

11
00:00:40.120 --> 00:00:41.960
I also get all of the code for
details, and

12
00:00:41.960 --> 00:00:47.100
I get all of the code for
search as well, which I don't need.

13
00:00:47.100 --> 00:00:48.930
I don't need those until later.

14
00:00:48.930 --> 00:00:53.767
So, it would be better if I could split
those up into different chunks that

15
00:00:53.767 --> 00:00:57.291
get loaded progressively,
as I browse it at the app.

16
00:00:57.291 --> 00:01:00.108
Luckily, Webpack kinda does this for
you for

17
00:01:00.108 --> 00:01:04.942
free, if you, kind of s ignal to Webpack,
here's a point where you can cut.

18
00:01:04.942 --> 00:01:07.089
And it's smart enough to figure out, okay,

19
00:01:07.089 --> 00:01:09.305
you cut off this part of
the dependency graph.

20
00:01:09.305 --> 00:01:12.530
So I'm just going to shove this,
everything that this depends on, and

21
00:01:12.530 --> 00:01:13.732
nothing else depends on.

22
00:01:13.732 --> 00:01:18.435
And I'll only load those when I need them.

23
00:01:18.435 --> 00:01:19.820
So, let's go give that a shot.

24
00:01:20.910 --> 00:01:22.610
So, go to Webpack.
&gt;&gt; Speaker 2: Quick question.

25
00:01:22.610 --> 00:01:24.710
Francois is asking basically,

26
00:01:24.710 --> 00:01:29.350
is universal rendering is one way to not
have to configure routes on the server.

27
00:01:29.350 --> 00:01:35.289
Are there other ways?
&gt;&gt; Brian: So yes.

28
00:01:35.289 --> 00:01:41.481
So one of the big wins I probably
should have hit on a little bit more.

29
00:01:41.481 --> 00:01:45.517
Is, notice that we didn't have to do
any sort of routing here on the server,

30
00:01:45.517 --> 00:01:49.250
that it's actually reading from
the routes from the browser.

31
00:01:49.250 --> 00:01:52.450
So, we wrote our routes once, and it
works both on the server and the client.

32
00:01:52.450 --> 00:01:55.320
That's a huge win, right?

33
00:01:55.320 --> 00:02:02.769
So, our friend is asking if there
are other ways to accomplish this.

34
00:02:02.769 --> 00:02:07.307
I think the only way that I can
conceivably think to accomplish that is

35
00:02:07.307 --> 00:02:11.370
that React router has another
way of configuring it.

36
00:02:11.370 --> 00:02:13.570
We configured it with the jsx way.

37
00:02:13.570 --> 00:02:16.650
There's also a way that you
can pass it a config object.

38
00:02:16.650 --> 00:02:21.210
And so you can config your routes there
and pass it to both in the client and

39
00:02:21.210 --> 00:02:22.630
the server and that would work as well.

40
00:02:25.870 --> 00:02:28.720
Other than that you would have to
duplicate the routes everywhere.

41
00:02:30.660 --> 00:02:33.940
That's all I can think of anyway,
or use another router.

42
00:02:33.940 --> 00:02:39.360
Yeah, if you don't have to
worry about react router,

43
00:02:39.360 --> 00:02:42.060
the server side rendering
code is even simpler, right?

44
00:02:42.060 --> 00:02:44.738
In fact I think I can show
you just super quick.

45
00:02:44.738 --> 00:02:50.016
This is another workshop

46
00:02:50.016 --> 00:02:54.544
I've given before.

47
00:02:54.544 --> 00:02:59.240
I just wanted to show you,

48
00:02:59.240 --> 00:03:03.515
completed, app.js.

49
00:03:03.515 --> 00:03:07.054
So this is using co-op,
which is an Express like.

50
00:03:07.054 --> 00:03:11.418
But this is it right here if you don't
have to worry about React Router,

51
00:03:11.418 --> 00:03:18.592
renderToString, send it down.
&gt;&gt; Brian: That's it,

52
00:03:18.592 --> 00:03:21.644
that's all the server side rendering
code if you don't have to worry about

53
00:03:21.644 --> 00:03:22.280
React Router.

54
00:03:23.670 --> 00:03:25.890
React Router just has a bunch
of additional concerns.

55
00:03:25.890 --> 00:03:26.597
&gt;&gt; Speaker 2: A question,

56
00:03:26.597 --> 00:03:29.562
will the server side rendering be good for
SEO as well?

57
00:03:29.562 --> 00:03:32.377
&gt;&gt; Brian: Yes, so yeah the Google bot can

58
00:03:32.377 --> 00:03:37.586
just pull down HTML and
it can do all its crawling of that.

59
00:03:37.586 --> 00:03:41.849
It doesn't have to know that
it was server side rendered or

60
00:03:41.849 --> 00:03:45.416
anything like that and
it makes SEO much better.

61
00:03:45.416 --> 00:03:47.271
It's actually probably
one of the biggest wins,

62
00:03:47.271 --> 00:03:54.339
I just don't think a lot about SEO.
&gt;&gt; Brian: All right,

63
00:03:54.339 --> 00:03:58.702
so let's go back to code splitting.
&gt;&gt; Brian: So

64
00:03:58.702 --> 00:04:00.972
come back to your Webpack config.

65
00:04:00.972 --> 00:04:03.536
The first thing you'll have to realize is
we're gonna start splitting our code into

66
00:04:03.536 --> 00:04:04.158
multiple bundles.

67
00:04:04.158 --> 00:04:08.900
But we have to let Webpack know, hey,
here's where you serve those bundles from.

68
00:04:08.900 --> 00:04:11.320
Right, cuz it's gonna
download the first bundle.

69
00:04:11.320 --> 00:04:14.230
And then you need to tell it
the additional bundles will be here to

70
00:04:14.230 --> 00:04:14.810
download them.

71
00:04:16.820 --> 00:04:21.099
So we just have to give it a public path,

72
00:04:21.099 --> 00:04:27.165
which mind you,
&gt;&gt; Brian: no, it's here in the output.

73
00:04:28.375 --> 00:04:31.716
So here, inside of output,
which is different than devServer.

74
00:04:31.716 --> 00:04:37.033
I know devServer has a public path,
but output also needs a public path,

75
00:04:37.033 --> 00:04:41.226
which is also the same thing.
&gt;&gt; Brian: So

76
00:04:41.226 --> 00:04:49.920
publicPath:/public/ inside
of the output config object.

77
00:04:51.910 --> 00:04:55.730
Again just letting Webpack know as once
you've downloaded this is where you get

78
00:04:55.730 --> 00:04:56.824
additional bundles.

79
00:05:06.329 --> 00:05:07.656
&gt;&gt; Speaker 2: Martin is wondering why is

80
00:05:07.656 --> 00:05:12.743
the async rating loading so slowly now?
&gt;&gt; Brian: I

81
00:05:12.743 --> 00:05:14.960
don't know if it's loading
any slower than it was.

82
00:05:16.300 --> 00:05:17.940
Check it and call your ISP.

83
00:05:17.940 --> 00:05:19.376
I'm just kidding.
Blame Comcast.

84
00:05:21.461 --> 00:05:22.647
&gt;&gt; Brian: Well, if you're

85
00:05:22.647 --> 00:05:26.370
loading the page,
it has to do service side rendering.

86
00:05:26.370 --> 00:05:30.800
It has to send it down the wire, it has
to load the HTML, parts the JavaScript.

87
00:05:30.800 --> 00:05:33.520
React has to bootstrap,
your app has to bootstrap.

88
00:05:33.520 --> 00:05:38.040
At that point component will call,
and it'll make that call.

89
00:05:38.040 --> 00:05:41.774
So that might be 20 milliseconds slower,
100 milliseconds slower,

90
00:05:41.774 --> 00:05:43.560
depending on your internet speed.

91
00:05:43.560 --> 00:05:47.936
So for me it's not perceivably any slower,

92
00:05:47.936 --> 00:05:51.964
but we're on fast wi-fi, so.

93
00:05:51.964 --> 00:05:57.035
But it could be a bit slower,
&gt;&gt; Brian: Or

94
00:05:57.035 --> 00:05:59.771
maybe OMDB is just being slower right now.

