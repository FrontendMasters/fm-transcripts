WEBVTT

1
00:00:00.420 --> 00:00:02.579
&gt;&gt; Brian Holt: So
let's go make that work Redux now.

2
00:00:04.610 --> 00:00:08.799
&gt;&gt; Brian Holt: Let's go to your store.js.

3
00:00:15.480 --> 00:00:16.708
&gt;&gt; Brian Holt: And we need to import.

4
00:00:19.015 --> 00:00:21.952
&gt;&gt; Brian Holt: Thunk from redux-thunk,

5
00:00:21.952 --> 00:00:26.810
I also thought that was a weird word,
thunk.

6
00:00:27.880 --> 00:00:34.600
We also need to get something else from
redux and it's called the applyMiddelware.

7
00:00:38.060 --> 00:00:38.795
As you may guess,

8
00:00:38.795 --> 00:00:41.499
it's a function that allow us to
modify the way that redux works.

9
00:00:45.289 --> 00:00:49.761
&gt;&gt; Brian Holt: Okay, so
above our type of business right here,

10
00:00:49.761 --> 00:00:54.683
we're gonna say
applyMiddleware(thunk) comma.

11
00:01:04.080 --> 00:01:05.406
&gt;&gt; Brian Holt: And now magically,

12
00:01:05.406 --> 00:01:10.087
Redux has the ability to understand
functions in addition to actions.

13
00:01:11.752 --> 00:01:13.160
&gt;&gt; Brian Holt: Or thunks, right?

14
00:01:13.160 --> 00:01:14.213
As is the case.

15
00:01:27.192 --> 00:01:28.149
&gt;&gt; Brian Holt: Any questions?

16
00:01:34.250 --> 00:01:40.100
&gt;&gt; Brian Holt: Okay, so
let's go to actions.js.

17
00:01:40.100 --> 00:01:41.790
What we're gonna do now
is we're gonna make it so

18
00:01:41.790 --> 00:01:44.760
we can add OMDB data to our Redux store.

19
00:01:46.110 --> 00:01:50.713
So we're gonna export a new link called

20
00:01:50.713 --> 00:01:56.030
ADD_OMDB_DATA = 'ADD_OMDB-DATA'.

21
00:01:56.030 --> 00:02:00.590
So first we need to create the synchronous
action to change our store.

22
00:02:00.590 --> 00:02:03.000
Because everything that's still modifies

23
00:02:03.000 --> 00:02:07.050
Redux directly has to go through
the same action process, right?

24
00:02:07.050 --> 00:02:11.080
Thunks themselves don't
actually modify the store.

25
00:02:11.080 --> 00:02:14.140
They still dispatch actions
which modify the store.

26
00:02:14.140 --> 00:02:17.730
They just dispatch actions later, right?

27
00:02:19.160 --> 00:02:21.640
It's kind of a delayed
dispatching of actions.

28
00:02:21.640 --> 00:02:23.452
It's not even kind of,
it's literally what it is.

29
00:02:23.452 --> 00:02:27.983
[LAUGH] Okay, so

30
00:02:27.983 --> 00:02:34.270
go to reducers.js.

31
00:02:34.270 --> 00:02:36.790
We're going to also import ADD_OMDB_DATA.

32
00:02:36.790 --> 00:02:42.158
ADD_OMDB_DATA.

33
00:02:42.158 --> 00:02:45.080
And we're gonna do OMDB_DATA.

34
00:02:48.915 --> 00:02:50.350
&gt;&gt; Brian Holt: And
it's gonna be an empty object.

35
00:02:53.300 --> 00:02:55.340
So every time that we
get a new TV show in,

36
00:02:55.340 --> 00:02:59.070
we're gonna set the key to be
equal to like 'tt12345', right?

37
00:02:59.070 --> 00:03:01.530
Whatever the OMDB data thing is.

38
00:03:01.530 --> 00:03:04.220
And this is going to be the data, right?

39
00:03:04.220 --> 00:03:06.710
It's gonna be another
object full of its data.

40
00:03:06.710 --> 00:03:10.080
That's what it's gonna look like, but for
now it's just going to be an empty object.

41
00:03:13.590 --> 00:03:14.090
Okay.

42
00:03:20.554 --> 00:03:25.542
&gt;&gt; Brian Holt: Then we're
going to create a new

43
00:03:25.542 --> 00:03:30.727
reducer called, addOMDBData.

44
00:03:34.128 --> 00:03:37.709
&gt;&gt; Brian Holt: Equals state, action,

45
00:03:41.387 --> 00:03:44.270
&gt;&gt; Brian Holt: Okay, const newOMDBData.

46
00:03:46.964 --> 00:03:47.542
&gt;&gt; Brian Holt: Equals object.

47
00:03:47.542 --> 00:03:54.293
We're gonna do object.assign(newOMDBData,

48
00:03:54.293 --> 00:03:57.351
state.omdbData).

49
00:04:00.648 --> 00:04:03.744
&gt;&gt; Brian Holt: And then,

50
00:04:03.744 --> 00:04:09.250
action.imdbID.

51
00:04:12.690 --> 00:04:19.430
&gt;&gt; Brian Holt: New omdb data,
not newOMDBData, action.omdbData.

52
00:04:23.798 --> 00:04:25.100
&gt;&gt; Brian Holt: Okay?

53
00:04:25.100 --> 00:04:31.139
So newOMDBData is going to be the new
value of this object right here, right?

54
00:04:36.930 --> 00:04:41.019
&gt;&gt; Brian Holt: If you've never
seen this square bracket syntax,

55
00:04:41.019 --> 00:04:46.057
this is just saying from my action,
I'm gonna get an imdbID and

56
00:04:46.057 --> 00:04:48.924
I want that to the key here, right.

57
00:04:48.924 --> 00:04:52.010
That's what the square brackets mean
if you've never seen that before.

58
00:04:54.250 --> 00:04:57.266
And then the value, so the key is imdbID,

59
00:04:57.266 --> 00:05:02.020
the value is omdbData

60
00:05:02.020 --> 00:05:06.590
which will both come from the action that
we will dispatch from our action creator.

61
00:05:08.230 --> 00:05:14.000
Okay, underneath that, we're gonna do
const newState equals a new object.

62
00:05:17.830 --> 00:05:24.800
I wanna say objects.assign newState,

63
00:05:24.800 --> 00:05:31.565
state, and omdbData to new omdbData,

64
00:05:31.565 --> 00:05:35.462
and return newState.

65
00:05:42.540 --> 00:05:45.051
&gt;&gt; Brian Holt: So we're just doing two
layers of merging here, that's all.

66
00:05:53.120 --> 00:05:54.555
&gt;&gt; Brian Holt: Any questions
about that reducer?

67
00:05:59.073 --> 00:06:00.530
&gt;&gt; Brian Holt: Just
doing some deep merging.

68
00:06:00.530 --> 00:06:02.990
That's really all there is to it.

69
00:06:02.990 --> 00:06:06.240
&gt;&gt; Speaker 2: You mentioned again with
the square brackets action.imdbID,

70
00:06:06.240 --> 00:06:08.790
assuming again that's,
&gt;&gt; Brian Holt: So

71
00:06:08.790 --> 00:06:11.528
let's say that the action came
in that looked like this, right?

72
00:06:11.528 --> 00:06:19.240
It'd be type ADD OMDB_DATA, right.

73
00:06:20.444 --> 00:06:24.870
The omdbData would be an object
full of lots of stuff,

74
00:06:24.870 --> 00:06:27.930
right, like poster, rating,
all that kind of stuff.

75
00:06:29.570 --> 00:06:33.540
And the imbdID will be
something like tt12345, right?

76
00:06:33.540 --> 00:06:36.170
Like a unique identifier for it.

77
00:06:38.620 --> 00:06:42.370
So what we wanna do is inside of our
store, we want to represent that as

78
00:06:42.370 --> 00:06:47.420
a giant key value store where
the key is tt12345, and

79
00:06:47.420 --> 00:06:52.432
the value is whatever omdbData was, right.

80
00:06:54.260 --> 00:06:57.898
So by saying,

81
00:06:57.898 --> 00:07:05.806
action.imdbID like that.

82
00:07:05.806 --> 00:07:08.887
&gt;&gt; Speaker 2: I see it's the object,
it's just the [CROSSTALK].

83
00:07:08.887 --> 00:07:11.440
&gt;&gt; Brian Holt: It's the output
of whatever that expression was.

84
00:07:11.440 --> 00:07:14.710
&gt;&gt; Speaker 2: Yep, okay.

85
00:07:14.710 --> 00:07:16.828
&gt;&gt; Brian Holt: And
then the OMDBData, right?

86
00:07:25.454 --> 00:07:28.370
&gt;&gt; Brian Holt: Okay, so now, we need
to go put a case in our route reducer.

87
00:07:28.370 --> 00:07:31.220
Case ADD_OMDB_DATA.

88
00:07:33.300 --> 00:07:41.488
&gt;&gt; Brian Holt: Return addOMDBData
with state and action.

89
00:07:51.489 --> 00:07:59.265
&gt;&gt; Brian Holt: Okay, so now our reducers
are capable of handling this new action.

90
00:08:01.155 --> 00:08:06.975
So now, we need to make that
work inside of action creators.

