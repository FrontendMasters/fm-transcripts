WEBVTT

1
00:00:00.360 --> 00:00:03.512
&gt;&gt; Speaker 2: If you deploy this
with browser to router production,

2
00:00:03.512 --> 00:00:06.603
then do you get your server
logs filled with 404s?

3
00:00:06.603 --> 00:00:11.467
Doesn't that add noise to server logs for
those whose job it is to analyze them?

4
00:00:11.467 --> 00:00:13.945
&gt;&gt; Brian: Don't use
webpack-dev-server in production,

5
00:00:13.945 --> 00:00:16.196
that's the answer to that question for
sure.

6
00:00:16.196 --> 00:00:18.972
&gt;&gt; Speaker 2: Okay, let's see,
Christopher's asking,

7
00:00:18.972 --> 00:00:21.330
the answer was what to skip passwords.

8
00:00:21.330 --> 00:00:24.197
That was just my thought.

9
00:00:24.197 --> 00:00:24.936
&gt;&gt; Brian: Okay.

10
00:00:24.936 --> 00:00:28.119
&gt;&gt; Speaker 2: All right, okay, and
then Gus is asking, where is data.json?

11
00:00:28.119 --> 00:00:33.215
&gt;&gt; Brian: It's in the public directory,
so public/data.json.

12
00:00:40.651 --> 00:00:41.433
&gt;&gt; Brian: Yeah, that's it.

13
00:00:41.433 --> 00:00:42.071
&gt;&gt; Speaker 2: Okay.

14
00:00:44.770 --> 00:00:45.611
&gt;&gt; Speaker 2: Thanks.

15
00:00:45.611 --> 00:00:46.111
&gt;&gt; Brian: Yep.

16
00:00:50.280 --> 00:00:56.992
&gt;&gt; Brian: So
let's go back to search.js, rather.

17
00:00:58.330 --> 00:01:00.760
Obviously, this is not a super
useful thing right now,

18
00:01:00.760 --> 00:01:02.261
it's just outputting JSON data,

19
00:01:02.261 --> 00:01:05.480
which our end users do not care about
JSON data as much as you think they do.

20
00:01:07.532 --> 00:01:11.083
&gt;&gt; Brian: So what we wanna do is we
wanna take each one of these titles, and

21
00:01:11.083 --> 00:01:13.700
we wanna make some markup for
each one of them.

22
00:01:15.612 --> 00:01:19.876
&gt;&gt; Brian: So what we need is some
sort of like ng repeat / #each,

23
00:01:19.876 --> 00:01:26.020
depending if you're coming from Ember or
Angular version for React, right?

24
00:01:26.020 --> 00:01:28.121
We wanna take this data structure and

25
00:01:28.121 --> 00:01:31.930
transform that data structure
into nice looking markup, right?

26
00:01:33.250 --> 00:01:34.340
Now if you're kinda following me,

27
00:01:34.340 --> 00:01:37.290
you should be hearing some
functional key words here.

28
00:01:37.290 --> 00:01:38.800
I have an array of something, and

29
00:01:38.800 --> 00:01:41.110
I wanna transform it into an array
of something else, right?

30
00:01:41.110 --> 00:01:44.890
That is just like the basis of
functional programming, right?

31
00:01:44.890 --> 00:01:49.000
You take one data structure and
you map it into another, right?

32
00:01:49.000 --> 00:01:51.639
That's just like functional 101.

33
00:01:53.400 --> 00:01:56.260
So that's exactly what you do with React,
right?

34
00:01:56.260 --> 00:01:58.220
If you remember back to
what we were doing before,

35
00:01:59.290 --> 00:02:05.710
if you give React an array of components,
it knows what to do with that, right?

36
00:02:05.710 --> 00:02:10.620
So if we take a data structure and
we map that into another data

37
00:02:10.620 --> 00:02:14.090
structure that is full of components,
React knows what to do with that.

38
00:02:15.400 --> 00:02:18.875
So we have preload.shows, I- I'm sorry,

39
00:02:18.875 --> 00:02:21.583
the following question to
that one about the 404s.

40
00:02:21.583 --> 00:02:22.120
Uh-huh.

41
00:02:22.120 --> 00:02:23.893
&gt;&gt; Speaker 2: I think, in production,

42
00:02:23.893 --> 00:02:27.205
do you have to add these
routes now to the server?

43
00:02:27.205 --> 00:02:32.056
&gt;&gt; Brian: So the answer is yes, you do.

44
00:02:32.056 --> 00:02:36.470
Your server definitely has to be aware
of where to route those requests.

45
00:02:36.470 --> 00:02:37.430
If you're doing Node,

46
00:02:37.430 --> 00:02:42.100
I will show you at the end of tomorrow
how to make Node work with that.

47
00:02:42.100 --> 00:02:44.010
If you're in another language,
you're on your own.

48
00:02:44.010 --> 00:02:45.350
I really couldn't say.

49
00:02:47.460 --> 00:02:51.720
Either use hash router or
duplicate your code, or

50
00:02:51.720 --> 00:02:57.154
there's a couple ways of doing it, but,
&gt;&gt; Brian: Yeah, good question.

51
00:02:57.154 --> 00:03:00.790
But one thing's that in
the webpack dev server docs,

52
00:03:00.790 --> 00:03:02.800
it says do not use this in production.

53
00:03:02.800 --> 00:03:04.270
That's the first thing it says in there.

54
00:03:07.313 --> 00:03:12.220
&gt;&gt; Brian: Okay, so,
&gt;&gt; Brian: Going back to,

55
00:03:12.220 --> 00:03:17.693
just to give you,
&gt;&gt; Brian: A brief 101 on

56
00:03:17.693 --> 00:03:24.070
functional programming, I'm just gonna
do it here inside of my browser.

57
00:03:25.180 --> 00:03:30.717
So I have var numbers = (1,

58
00:03:30.717 --> 00:03:33.822
5, 8, okay?

59
00:03:33.822 --> 00:03:37.260
So now I have x, or no numbers.

60
00:03:39.282 --> 00:03:40.237
&gt;&gt; Brian: And that's an array, right?

61
00:03:40.237 --> 00:03:45.823
And if I say,
&gt;&gt; Brian: Let's

62
00:03:45.823 --> 00:03:49.300
say I wanted to double each one of these,
so I had 2, 10, and 16, right?

63
00:03:49.300 --> 00:03:52.780
I could write a for loop that goes
over each one of those, doubles them,

64
00:03:52.780 --> 00:03:54.870
makes a new array, returns that, right?

65
00:03:54.870 --> 00:03:58.657
But there's another function called
map that takes a function and

66
00:03:58.657 --> 00:04:02.390
applies that to each individual's
element inside of the array.

67
00:04:04.370 --> 00:04:05.820
That's called map.

68
00:04:05.820 --> 00:04:09.450
So if I do numbers.map,

69
00:04:09.450 --> 00:04:14.080
then I provide to map a function that's
going to apply to each one of those.

70
00:04:14.080 --> 00:04:16.980
And whatever that function returns is
going to be the new element in that array.

71
00:04:19.120 --> 00:04:27.150
So if I say function[number]
(return number x 2,

72
00:04:32.152 --> 00:04:33.574
&gt;&gt; Brian: I get 2, 10, and 16.

73
00:04:33.574 --> 00:04:38.397
So to kind of just dissect
that a little bit further for

74
00:04:38.397 --> 00:04:42.375
those of you that are not
familiar with map.

75
00:04:42.375 --> 00:04:47.767
It takes this function right here,
right, or I can even say,

76
00:04:47.767 --> 00:04:51.926
var double equals that same function,
right?

77
00:04:56.592 --> 00:05:00.730
&gt;&gt; Brian: So now, if I say double5,
it's gonna return to me 10, right?

78
00:05:00.730 --> 00:05:06.970
And now I can say numbers.map(double),
and it's gonna

79
00:05:06.970 --> 00:05:11.560
apply that same function to every single
individual element in the array, right?

80
00:05:11.560 --> 00:05:15.280
This is like functional programming 101.

81
00:05:16.503 --> 00:05:18.790
&gt;&gt; Brian: So hopefully, that makes sense.

82
00:05:18.790 --> 00:05:21.328
Notice that we're not
modifying the original array.

83
00:05:21.328 --> 00:05:23.812
We're just taking that, and
we're creating a new number and

84
00:05:23.812 --> 00:05:25.928
creating a new array full
of the new numbers, okay?

85
00:05:25.928 --> 00:05:28.412
The only reason I stress that like that,

86
00:05:28.412 --> 00:05:32.440
a lot of people probably already
know that coming to this course.

87
00:05:32.440 --> 00:05:34.841
But if you don't get it, this gets
really confusing, really quickly.

88
00:05:34.841 --> 00:05:38.548
So, now that we have this
idea of map into our head,

89
00:05:38.548 --> 00:05:41.460
I have an array full of data, right?

90
00:05:41.460 --> 00:05:45.080
And I wanna map that data into components.

91
00:05:45.080 --> 00:05:48.631
So what I'm gonna do is preload.shows,
right,

92
00:05:48.631 --> 00:05:51.682
cuz that's the name of the array, .map.

93
00:05:56.416 --> 00:06:00.390
&gt;&gt; Brian: And
I'm gonna say function (show).

94
00:06:04.114 --> 00:06:06.490
&gt;&gt; Brian: So I know this gets a little
weird looking pretty quickly,

95
00:06:09.001 --> 00:06:10.510
&gt;&gt; Brian: But I'm gonna say return.

96
00:06:12.666 --> 00:06:13.455
&gt;&gt; Brian: And just for now,

97
00:06:13.455 --> 00:06:19.050
I'm gonna return h3,
&gt;&gt; Brian: With show.title.

98
00:06:24.678 --> 00:06:27.940
&gt;&gt; Brian: So I have preload.shows.map,
so it's gonna take shows.

99
00:06:27.940 --> 00:06:30.618
It's going to run this
function right here on each

100
00:06:30.618 --> 00:06:32.929
individual element inside of that array.

101
00:06:32.929 --> 00:06:37.268
And it's going to return a React component
based on each one of those elements in

102
00:06:37.268 --> 00:06:37.932
the array.

103
00:06:37.932 --> 00:06:40.402
And I'll end up with an array
of React components,

104
00:06:40.402 --> 00:06:42.830
which React knows what to do with, right?

105
00:06:42.830 --> 00:06:43.950
If I give it an array of components,

106
00:06:43.950 --> 00:06:45.760
it knows to display each
one of those in order.

107
00:06:48.480 --> 00:06:49.570
Cool, does that make sense?

108
00:06:53.322 --> 00:06:56.209
&gt;&gt; Brian: So
just to show you what that looks like and

109
00:06:56.209 --> 00:07:00.343
then I can probably push up
a branch after this, I refresh.

110
00:07:00.343 --> 00:07:04.340
I'm probably not running my,
I have to save first.

111
00:07:06.150 --> 00:07:09.730
Gratuitous parentheses around expression,
whatever.

112
00:07:09.730 --> 00:07:10.666
&gt;&gt; Speaker 2: In your map.

113
00:07:14.346 --> 00:07:14.968
&gt;&gt; Brian: That's what it is.

114
00:07:20.359 --> 00:07:20.859
&gt;&gt; Brian: Okay, cool.

115
00:07:23.501 --> 00:07:28.189
&gt;&gt; Brian: So now, I end up with each
one of the titles in an h3, right?

116
00:07:31.982 --> 00:07:33.970
&gt;&gt; Brian: Any questions about map?

117
00:07:33.970 --> 00:07:35.970
Map is really important to React.

118
00:07:35.970 --> 00:07:40.479
So that's why I stress making sure
that everyone understands what's going

119
00:07:40.479 --> 00:07:41.259
on with map.

120
00:07:42.465 --> 00:07:51.580
&gt;&gt; Brian: So.

121
00:07:53.160 --> 00:07:55.000
&gt;&gt; Speaker 2: Why the extra parenthesis?

122
00:07:55.000 --> 00:07:57.070
After map, you have two parentheses.

123
00:07:57.070 --> 00:07:58.820
&gt;&gt; Brian: Yeah, I know, I-
&gt;&gt; Speaker 2: There was a mistake.

124
00:07:58.820 --> 00:07:59.580
&gt;&gt; Brian: That was a mistake.

125
00:07:59.580 --> 00:08:00.903
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian: Which Linda told me to stop.

126
00:08:00.903 --> 00:08:01.661
&gt;&gt; [LAUGH]

127
00:08:17.707 --> 00:08:22.780
&gt;&gt; Brian: Yeah, you're probably gonna see
this big grossness here in the console.

128
00:08:22.780 --> 00:08:24.190
I'll talk about that in a sec.

129
00:08:24.190 --> 00:08:25.800
The warning on the console is expected.

130
00:08:34.417 --> 00:08:36.860
&gt;&gt; Brian: So, this is actually one
of the reasons I really like React.

131
00:08:38.870 --> 00:08:43.119
This preload.shows.map,
this is not a React thing, right?

132
00:08:43.119 --> 00:08:44.950
This is just JavaScript, right?

133
00:08:44.950 --> 00:08:47.750
This is normal functional programming.

134
00:08:47.750 --> 00:08:49.792
This is a skill that once you learn,

135
00:08:49.792 --> 00:08:54.356
the idea of mapping something from one
data structure to another is universal,

136
00:08:54.356 --> 00:08:58.580
not even just in JavaScript, but
across programming languages.

137
00:08:58.580 --> 00:09:02.000
I would assert that one of the most
fundamental changes in the way I have

138
00:09:02.000 --> 00:09:03.800
programmed is when I learned
how to do map, right?

139
00:09:04.998 --> 00:09:08.083
And I love that because that's
not a React specific skill,

140
00:09:08.083 --> 00:09:11.426
it's something I learned once and
I got to use forever, right?

141
00:09:11.426 --> 00:09:13.262
When you learn how to write an ng repeat,

142
00:09:13.262 --> 00:09:15.440
you just know how to write an ng repeat,
right?

143
00:09:15.440 --> 00:09:17.950
And that's kind of a bummer to me.

144
00:09:17.950 --> 00:09:21.790
And that kinda lends itself in React
that best practices in React for

145
00:09:21.790 --> 00:09:23.065
the most part, excuse me.

146
00:09:23.065 --> 00:09:25.872
[COUGH] Best practices in React are,
for the most part,

147
00:09:25.872 --> 00:09:27.650
just JavaScript best practices.

148
00:09:27.650 --> 00:09:31.440
And I think that's a pretty
powerful statement to make.

149
00:09:32.720 --> 00:09:36.760
It comes with being a pretty small
library that does one thing super well,

150
00:09:36.760 --> 00:09:38.110
maybe a few things super well.

151
00:09:40.290 --> 00:09:43.230
&gt;&gt; Speaker 2: Can you use arrow
function instead of function to map?

152
00:09:43.230 --> 00:09:44.805
&gt;&gt; Brian: Yep, I'm about to do that.

153
00:09:44.805 --> 00:09:46.230
&gt;&gt; Speaker 2: Mm-hm, okay, next question.

154
00:09:46.230 --> 00:09:49.727
Do you recommend to create another
component to create the child components

155
00:09:49.727 --> 00:09:52.084
with map or
just create them inside the parent map?

156
00:09:52.084 --> 00:09:53.218
&gt;&gt; Brian: I'm also about to do that.

157
00:09:53.218 --> 00:09:54.608
&gt;&gt; [LAUGH]
&gt;&gt; Brian: Yeah.

158
00:09:54.608 --> 00:09:59.700
&gt;&gt; [LAUGH]
&gt;&gt; Brian: So, to address the first one,

159
00:09:59.700 --> 00:10:03.170
I like arrow functions,
they're new to ES6.

160
00:10:03.170 --> 00:10:09.400
One of the stated goals of ES6 is to
never write the word function ever again.

161
00:10:09.400 --> 00:10:12.950
So we're gonna delete function and
put an arrow there.

162
00:10:14.900 --> 00:10:16.290
It's just another way to write function.

163
00:10:19.634 --> 00:10:22.660
&gt;&gt; Brian: You don't have to
do it this way, but you can.

