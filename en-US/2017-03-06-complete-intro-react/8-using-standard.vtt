WEBVTT

1
00:00:00.090 --> 00:00:02.300
&gt;&gt; Brian Holt: We're gonna start
working on some tooling stuff now,

2
00:00:02.300 --> 00:00:03.270
because tooling's fun.

3
00:00:04.550 --> 00:00:08.370
So the first one I'm gonna
do is here in the terminal,

4
00:00:08.370 --> 00:00:13.210
I'm just gonna use npm to
do my global installs.

5
00:00:13.210 --> 00:00:15.580
I think there's yarn add global,

6
00:00:15.580 --> 00:00:19.960
I just have historically have had problems
with it so far but npm works just fine.

7
00:00:19.960 --> 00:00:24.160
So I'm gonna do npm
install --global standard.

8
00:00:27.650 --> 00:00:30.540
And that's going to install
our linting tool for us.

9
00:00:33.580 --> 00:00:35.170
I already have it, so I'm not gonna do it.

10
00:00:37.220 --> 00:00:41.510
So let's talk about what standard is,
and why everyone gets so mad at me for

11
00:00:41.510 --> 00:00:42.850
using it, and why I just love it.

12
00:00:44.590 --> 00:00:48.840
So, for those of you that may
have written in Go before, or

13
00:00:48.840 --> 00:00:52.990
have looked at Go, there's just
a phenomenal tool called Go Format.

14
00:00:54.480 --> 00:00:57.420
And it's one of my favorite
parts about the Go community,

15
00:00:57.420 --> 00:00:59.750
not that I write a ton of Go.

16
00:00:59.750 --> 00:01:02.820
But, when you go into a Go Project,

17
00:01:02.820 --> 00:01:06.760
there's just zero discussion about
code style or linting rules or

18
00:01:06.760 --> 00:01:10.120
anything like that because there
is just one set of rules called.

19
00:01:10.120 --> 00:01:12.926
And it's Go Format and
everyone writes those rules and

20
00:01:12.926 --> 00:01:16.105
it's just universal accepted,
everyone writes Go Format.

21
00:01:20.394 --> 00:01:22.934
&gt;&gt; Brian Holt: A lot of us from
other communities like JavaScript,

22
00:01:22.934 --> 00:01:26.850
where we just bike shed the hell out
of every stupid little linting rule.

23
00:01:26.850 --> 00:01:29.690
Kind of look on it jealousy as like, these
people have nothing to bike shed about

24
00:01:29.690 --> 00:01:31.960
because there is always
the same set of rules.

25
00:01:31.960 --> 00:01:35.480
So, a really really smart guy,
his GitHub handle is Ferris, and

26
00:01:35.480 --> 00:01:37.152
I forgot what his real name is.

27
00:01:39.942 --> 00:01:41.720
&gt;&gt; Brian Holt: He's like,
I want this for us.

28
00:01:41.720 --> 00:01:44.450
So he created this
library called Standard.

29
00:01:44.450 --> 00:01:48.720
Which, in reality, is just ES Lint
with a standard set of rules.

30
00:01:48.720 --> 00:01:52.650
But the cool thing about Standard
is it's not configurable.

31
00:01:52.650 --> 00:01:56.410
There's zero configuration, so
there's just never ending argument.

32
00:01:56.410 --> 00:01:58.916
If there's Standard on a project,
you can't bike shed about it,

33
00:01:58.916 --> 00:02:00.546
because you can't configure it, right.

34
00:02:00.546 --> 00:02:03.698
It's just always the same set of rules.

35
00:02:03.698 --> 00:02:07.935
So people were actually super on board
with this when he kind of announced it,

36
00:02:07.935 --> 00:02:10.347
this is the same guy
that wrote WebTorrent,

37
00:02:10.347 --> 00:02:12.452
and some other really big libraries.

38
00:02:12.452 --> 00:02:19.171
So he's a super smart guy, but it actually
prohibits you from using semicolons.

39
00:02:21.032 --> 00:02:24.040
&gt;&gt; Brian Holt: Which really rubs a lot of
people the wrong way because people in

40
00:02:24.040 --> 00:02:26.660
JavaScript just love their semicolons.

41
00:02:26.660 --> 00:02:28.830
But he outlawed them using Standard.

42
00:02:28.830 --> 00:02:32.200
And so I think that's probably a big
reason why it hasn't been as adopted.

43
00:02:33.560 --> 00:02:36.650
But I like it,
a bunch of projects still do use it.

44
00:02:36.650 --> 00:02:39.160
It's okay,
you do not have to use semicolons.

45
00:02:39.160 --> 00:02:43.072
If you insist on using semicolons,
there is a project called semistandard.

46
00:02:43.072 --> 00:02:46.287
[LAUGH] Which is the same set of rules,

47
00:02:46.287 --> 00:02:50.790
except it enforces that
you must have semicolons.

48
00:02:50.790 --> 00:02:56.341
So, if I run standard right now on
my particular project, it's already

49
00:02:56.341 --> 00:03:03.270
pre-configured to just find a bunch of,
&gt;&gt; Brian Holt: A bunch of same defaults.

50
00:03:03.270 --> 00:03:05.230
Like it won't check your node
modules directory, right,

51
00:03:05.230 --> 00:03:07.060
cuz you don't wanna link
to other people's code.

52
00:03:07.060 --> 00:03:08.900
That doesn't make any sense.

53
00:03:08.900 --> 00:03:11.990
It'll automatically ignore bundles,
and builds, and

54
00:03:11.990 --> 00:03:14.660
a bunch of stuff like that just out
of the box, which is pretty cool.

55
00:03:16.300 --> 00:03:18.267
Okay, so if I run Standard again.

56
00:03:21.599 --> 00:03:23.340
&gt;&gt; Brian Holt: I have
a bunch of things and

57
00:03:23.340 --> 00:03:27.310
it's mostly saying that
React is not defined, right?

58
00:03:27.310 --> 00:03:30.200
That makes sense because we're pulling
in React globally cuz we're including

59
00:03:30.200 --> 00:03:31.730
a global build, right?

60
00:03:31.730 --> 00:03:33.530
So it's not going to be defined.

61
00:03:33.530 --> 00:03:36.900
So we have to somehow inform Standard,
in reality,

62
00:03:36.900 --> 00:03:40.940
ES Lint, that that's okay,
we expect that to happen.

63
00:03:42.470 --> 00:03:47.020
So what we're gonna do is we're
gonna come over to clientapp.js and

64
00:03:47.020 --> 00:03:54.020
we're gonna just put a little bit of
pragma at the top that says what is it?

65
00:03:54.020 --> 00:03:58.644
I've gotta remember,
global React and reactDOM.

66
00:04:01.799 --> 00:04:04.420
&gt;&gt; Brian Holt: So, it's just that
first line up there at the top.

67
00:04:04.420 --> 00:04:07.077
This is just letting ESLint know, hey,

68
00:04:07.077 --> 00:04:11.856
these are global variables I expect
them to be quote unquote undefined.

69
00:04:23.659 --> 00:04:25.860
&gt;&gt; Brian Holt: So now if I come
back over here and I run Standard.

70
00:04:30.749 --> 00:04:32.269
&gt;&gt; Brian Holt: It's going to say,

71
00:04:32.269 --> 00:04:36.477
hey, you need a new line at
the end of your page, right?

72
00:04:36.477 --> 00:04:37.580
Which is a pretty common thing.

73
00:04:38.800 --> 00:04:41.902
So I just go down here to the bottom.

74
00:04:41.902 --> 00:04:43.440
And actually, I'll even show you this.

75
00:04:45.920 --> 00:04:49.720
So it's saying, hey, you need a new
line at the end of your file.

76
00:04:49.720 --> 00:04:54.130
Standard can actually automatically
fix a bunch of these linting errors.

77
00:04:54.130 --> 00:04:58.341
So if I run standard --fix.

78
00:05:00.841 --> 00:05:05.306
&gt;&gt; Brian Holt: Now if I go over here now
there is a new line, it automatically put

79
00:05:05.306 --> 00:05:10.371
it there by itself, and now if I run
standard again, no linting errors.

80
00:05:13.410 --> 00:05:14.320
Which is pretty cool.

81
00:05:14.320 --> 00:05:18.125
Standard cannot fix all of your errors
obviously there are some that it

82
00:05:18.125 --> 00:05:19.554
would not know how to fix.

83
00:05:19.554 --> 00:05:22.495
But some of these things like you must
have a new line at the end of the file,

84
00:05:22.495 --> 00:05:24.880
it knows how to fix those,
you can just run fix and it works.

85
00:05:26.010 --> 00:05:26.532
Pretty cool right?

86
00:05:29.964 --> 00:05:33.213
&gt;&gt; Speaker 2: Do you
recommend standard fix?

87
00:05:33.213 --> 00:05:38.900
&gt;&gt; Brian Holt: I think now it used to
give me kind of derpy indentations.

88
00:05:41.382 --> 00:05:43.580
&gt;&gt; Brian Holt: I haven't seen that for
awhile, so sure.

89
00:05:43.580 --> 00:05:45.995
Give it a shot and if it blows up
everything, it's not my fault.

90
00:05:49.532 --> 00:05:53.360
&gt;&gt; Brian Holt: Like I said, a lot of stuff
It just doesn't know how to fix, right?

91
00:06:01.653 --> 00:06:04.203
&gt;&gt; Brian Holt: But yeah, like I said,
standard is just wrapped ESLint, so

92
00:06:04.203 --> 00:06:07.304
underneath the hood it's using ESLint
with a preset of configurations.

93
00:06:11.266 --> 00:06:14.308
&gt;&gt; Brian Holt: So yeah,
the real hero here is ESLint.

94
00:06:14.308 --> 00:06:18.238
Great project.

95
00:06:18.238 --> 00:06:25.632
Okay, so any questions before I move on?

96
00:06:25.632 --> 00:06:30.179
&gt;&gt; Speaker 2: There's a question from Enli
how does Pragma work is it different from

97
00:06:30.179 --> 00:06:31.034
use strict?

98
00:06:31.034 --> 00:06:32.484
&gt;&gt; Brian Holt: Yes.

99
00:06:34.224 --> 00:06:36.750
&gt;&gt; Brian Holt: When I say pragma,
I really just mean a comment at the top.

100
00:06:36.750 --> 00:06:40.260
That's a really stupid term for that.

101
00:06:40.260 --> 00:06:44.944
So,
&gt;&gt; Brian Holt: What I mean is that there's

102
00:06:44.944 --> 00:06:49.382
just a special comment at the top
of the page that lets ESLint know,

103
00:06:49.382 --> 00:06:52.130
ignore these particular errors.

104
00:06:52.130 --> 00:06:53.960
And there's a bunch of different
ones that you can use, and

105
00:06:53.960 --> 00:06:55.982
they're all in the ESS documentation
if you want to look them up.

106
00:06:57.798 --> 00:07:00.108
&gt;&gt; Brian Holt: The one I end up
using more than anything, though,

107
00:07:00.108 --> 00:07:02.170
is just the global ones
if I have any globals.

