WEBVTT

1
00:00:00.680 --> 00:00:06.283
&gt;&gt; Speaker 3: Question, is there a
difference between React.createElement and

2
00:00:06.283 --> 00:00:09.761
React.DOM.div, since React.DOM sits

3
00:00:09.761 --> 00:00:12.240
in a separate package now?
&gt;&gt; Speaker 4: I'm

4
00:00:12.240 --> 00:00:16.500
not sure I understand the question, if you
could take a look at it in the chat room.

5
00:00:16.500 --> 00:00:17.860
&gt;&gt; Brian Holt: I lost my computer, so, but

6
00:00:17.860 --> 00:00:20.810
I think I understand the question.
&gt;&gt; Speaker 4: Okay.

7
00:00:20.810 --> 00:00:23.660
&gt;&gt; Brian Holt: So, which is

8
00:00:23.660 --> 00:00:25.480
a salient point to bring up.

9
00:00:25.480 --> 00:00:31.040
If we come back here to my tile.js,
what is- remember this is being run

10
00:00:31.040 --> 00:00:34.550
through babble now, so this is actually
being transpiled to something different.

11
00:00:34.550 --> 00:00:37.400
Something that we don't actually
see unless you actually flip

12
00:00:37.400 --> 00:00:38.610
the compiled code.

13
00:00:38.610 --> 00:00:43.208
What this actually gets compiled into is

14
00:00:43.208 --> 00:00:49.342
React.createElement('div')
&gt;&gt; Brian Holt: Null,

15
00:00:49.342 --> 00:00:54.920
blah, right, whatever the children
of that particular element is.

16
00:00:57.300 --> 00:01:02.690
And all that React.DOM.div stuff is just,
it's the factory, right?

17
00:01:02.690 --> 00:01:05.149
It's just a thin wrapper that makes
it a little bit easier to write.

18
00:01:06.560 --> 00:01:08.607
So, this is what it's actually
being transpiled into.

19
00:01:10.597 --> 00:01:11.335
&gt;&gt; Brian Holt: And that's it,

20
00:01:11.335 --> 00:01:12.130
it's readable.

21
00:01:12.130 --> 00:01:13.000
You can actually go and read it.

22
00:01:13.000 --> 00:01:15.018
In fact, if you want to,
let's just go read it.

23
00:01:15.018 --> 00:01:20.456
See, bundle.
&gt;&gt; Brian Holt: And

24
00:01:20.456 --> 00:01:26.359
it's gonna be this.props.
&gt;&gt; Brian Holt: Title.

25
00:01:32.637 --> 00:01:33.565
&gt;&gt; Brian Holt: So, I must've built

26
00:01:33.565 --> 00:01:36.930
this for production, which is fun,
which is why this is not super readable.

27
00:01:38.810 --> 00:01:40.010
That's been went through uglifies.

28
00:01:40.010 --> 00:01:45.447
Anyway, a is going to be react I promise.
&gt;&gt; Brian Holt: That's what module is,

29
00:01:45.447 --> 00:01:46.990
but anyway.

30
00:01:46.990 --> 00:01:52.951
So, as doing createElement h1.
&gt;&gt; Brian Holt: Styles object.

31
00:01:52.951 --> 00:01:54.810
&gt;&gt; Brian Holt: this.props.title.

32
00:01:54.810 --> 00:01:56.030
This is the source map.

33
00:01:56.030 --> 00:01:56.870
That's what I'm looking at.

34
00:02:03.160 --> 00:02:08.574
Right, cuz it's gonna be anyway.
&gt;&gt; Brian Holt: We're

35
00:02:08.574 --> 00:02:09.670
looking at source maps.

36
00:02:11.070 --> 00:02:13.077
Anyway, so that's what's happening,
yeah, go ahead.

37
00:02:13.077 --> 00:02:15.030
&gt;&gt; Speaker 3: Another question.

38
00:02:15.030 --> 00:02:17.620
They wanna know if they can
remove the bar div in each

39
00:02:17.620 --> 00:02:18.875
one no?
&gt;&gt; Brian Holt: Yeah,

40
00:02:18.875 --> 00:02:24.051
please do.
&gt;&gt; Brian Holt: Yep,

41
00:02:24.051 --> 00:02:26.623
that's, you'll no longer do that.

42
00:02:34.681 --> 00:02:35.724
&gt;&gt; Brian Holt: Any other questions?

43
00:02:39.145 --> 00:02:39.689
&gt;&gt; Brian Holt: All right,

44
00:02:39.689 --> 00:02:42.411
I got like two more points to make,
and then we'll break for

45
00:02:42.411 --> 00:02:47.541
lunch.
&gt;&gt; Brian Holt: Yep,

46
00:02:47.541 --> 00:02:50.550
so let's go rewrite client.app real quick.

47
00:02:50.550 --> 00:02:53.669
So, you can drop that
div stuff right there.

48
00:02:53.669 --> 00:02:55.630
You can drop the MyTitleFactory as well.

49
00:02:58.000 --> 00:03:00.738
I showed you how to use create factory,
and you'll almost never use it, so

50
00:03:00.738 --> 00:03:04.354
[LAUGH].
&gt;&gt; Brian Holt: In fact I will venture

51
00:03:04.354 --> 00:03:08.404
to say, that certainly more than half
of React developers don't even know

52
00:03:08.404 --> 00:03:13.035
that there is a react.create.factory
method, because it's no longer useful with

53
00:03:13.035 --> 00:03:17.531
jsx.
&gt;&gt; Brian Holt: Okay,

54
00:03:17.531 --> 00:03:19.310
so I'm just gonna delete all that.

55
00:03:19.310 --> 00:03:23.506
I'm gonna put div.
&gt;&gt; Brian Holt: And

56
00:03:23.506 --> 00:03:28.039
then, what's cool is I made
this my title component, right?

57
00:03:28.039 --> 00:03:31.099
I can actually just write it as
if it was a real HTML element.

58
00:03:32.830 --> 00:03:39.842
And then I just give a properties,
again like, I would a normal HTML element.

59
00:03:39.842 --> 00:03:44.520
Props are cool,
color = 'rebeccapurple' and

60
00:03:44.520 --> 00:03:48.514
since there's no children inside of it,

61
00:03:48.514 --> 00:03:53.720
we're just going to make
it a self-closing tag.

62
00:03:53.720 --> 00:03:55.790
This is something that bears mentioning,

63
00:03:55.790 --> 00:03:59.650
I know a lot of us like to leave off
the slash on inputs, and stuff like that.

64
00:03:59.650 --> 00:04:01.800
In JSX it is no longer optional,

65
00:04:01.800 --> 00:04:05.510
you must put the closing tag
if it's a self-closing tag.

66
00:04:05.510 --> 00:04:10.440
Just get used to doing it.
&gt;&gt; Speaker 4: Can I ask you

67
00:04:10.440 --> 00:04:12.290
a question about that?
&gt;&gt; Brian Holt: Yeah.

68
00:04:12.290 --> 00:04:13.430
&gt;&gt; Speaker 4: Does it need the actual

69
00:04:13.430 --> 00:04:15.090
back slash?
&gt;&gt; Speaker 5: Yeah.

70
00:04:15.090 --> 00:04:16.220
&gt;&gt; Brian Holt: Yeah, must be

71
00:04:16.220 --> 00:04:17.290
there.
&gt;&gt; Speaker 4: Wow,

72
00:04:17.290 --> 00:04:19.940
okay.
&gt;&gt; Brian Holt: Yeah,

73
00:04:19.940 --> 00:04:22.480
that's a JSXism.
&gt;&gt; Speaker 4: Okay.

74
00:04:22.480 --> 00:04:23.680
&gt;&gt; Brian Holt: Furthermore, you can self

75
00:04:23.680 --> 00:04:25.950
close things that are not self closing.

76
00:04:25.950 --> 00:04:26.850
&gt;&gt; Speaker 5: Yeah.
&gt;&gt; Brian Holt: That is

77
00:04:26.850 --> 00:04:27.930
valid.
&gt;&gt; Speaker 4: Okay.

78
00:04:27.930 --> 00:04:28.570
&gt;&gt; Brian Holt: Whereas obviously

79
00:04:28.570 --> 00:04:29.770
that's not valid.

80
00:04:29.770 --> 00:04:32.670
HTML.
&gt;&gt; Speaker 4: Thank

81
00:04:32.670 --> 00:04:33.278
you.
&gt;&gt; Brian Holt: Yep.

82
00:04:38.069 --> 00:04:40.633
&gt;&gt; Speaker 6: So, the name of the element

83
00:04:40.633 --> 00:04:42.310
can be anything?

84
00:04:42.310 --> 00:04:43.610
It doesn't have to match what

85
00:04:43.610 --> 00:04:46.990
that variable name was earlier?
&gt;&gt; Brian Holt: My

86
00:04:46.990 --> 00:04:48.290
title?
&gt;&gt; Speaker 6: Yeah.

87
00:04:48.290 --> 00:04:49.280
&gt;&gt; Brian Holt: I mean, it needs to match

88
00:04:49.280 --> 00:04:51.860
this, right?
&gt;&gt; Speaker 6: Okay.

89
00:04:51.860 --> 00:04:53.052
&gt;&gt; Brian Holt: Cuz this is going to be

90
00:04:53.052 --> 00:04:57.029
the method that calls, right?,
because this is just a function, and

91
00:04:57.029 --> 00:05:00.807
it's gonna use that to create
a new component, right, so, yeah,

92
00:05:00.807 --> 00:05:07.340
it does have to match that.
&gt;&gt; Brian Holt: Good question.

93
00:05:07.340 --> 00:05:11.740
Another thing that bears mentioning,
it must be uppercased.

94
00:05:11.740 --> 00:05:15.430
It's not even a convention, they actually
made it a requirement now in React.

95
00:05:15.430 --> 00:05:17.940
If it's uppercase it's
a component that you created,

96
00:05:17.940 --> 00:05:22.180
if it's lowercase, that's literally
what it's going to output to the dom.

97
00:05:22.180 --> 00:05:22.790
Right?
So,

98
00:05:22.790 --> 00:05:24.900
it's literally going to
put a div on the dom.

99
00:05:26.830 --> 00:05:27.710
Why did they do that?

100
00:05:27.710 --> 00:05:29.450
Because web components, right?

101
00:05:29.450 --> 00:05:31.910
The web components are coming, so
we need to be able to do things like,

102
00:05:31.910 --> 00:05:34.460
x my component, right?

103
00:05:36.430 --> 00:05:39.370
Because we literally want x
my component up into the dom,

104
00:05:39.370 --> 00:05:42.137
right, because that's going
to be a web component.

105
00:05:42.137 --> 00:05:45.370
If you don't know what components are home
of the discussion go check it out.

106
00:05:45.370 --> 00:05:45.880
Super cool.

107
00:05:48.960 --> 00:05:52.370
But suffice to say, if it's your
component, must be upper case.

108
00:05:52.370 --> 00:05:55.360
If it's some, if it's literally what you
want to be put out to the dom like that's

109
00:05:55.360 --> 00:05:59.300
the tag name you want then do lower case.
&gt;&gt; Speaker 3: Oscar's

110
00:05:59.300 --> 00:06:03.359
asking why we're using create
class instead of the ES6?

111
00:06:04.930 --> 00:06:08.390
Extends reactor component.
&gt;&gt; Brian Holt: I'm teaching this way,

112
00:06:08.390 --> 00:06:10.890
because it's easier to teach.

113
00:06:10.890 --> 00:06:14.750
[LAUGH] There's three different
ways to create react components.

114
00:06:14.750 --> 00:06:18.230
I will eventually show you
all three of them, but

115
00:06:18.230 --> 00:06:22.480
we're starting with React createClass,
because that is the easiest to understand.

116
00:06:22.480 --> 00:06:25.167
And I try to work up from
easiest to understand to

117
00:06:25.167 --> 00:06:28.117
knowing all the [CROSSTALK].
&gt;&gt; Speaker 3: Do you use the es six

118
00:06:28.117 --> 00:06:32.020
version in your React code,
or do you use createClass?

119
00:06:32.020 --> 00:06:33.030
&gt;&gt; Brian Holt: I use createClass,

120
00:06:33.030 --> 00:06:34.760
cuz there's less to do.

121
00:06:34.760 --> 00:06:35.850
There's less boiler plate.

122
00:06:37.160 --> 00:06:40.349
I think, ES six classes
are the way that React is moving.

123
00:06:41.510 --> 00:06:44.830
Create class works for now.

124
00:06:44.830 --> 00:06:46.849
There's also going to be
stateless functional components,

125
00:06:46.849 --> 00:06:48.170
which we'll use as well.

126
00:06:48.170 --> 00:06:52.633
Which are actually probably
the best if it works for you.

127
00:06:52.633 --> 00:06:58.230
Good question.
&gt;&gt; Brian Holt: This, every,

128
00:06:58.230 --> 00:07:05.853
yeah, I need a peru.
&gt;&gt; Brian Holt: Okay,

129
00:07:05.853 --> 00:07:09.020
so let's go save that and
make sure that still works.

130
00:07:09.020 --> 00:07:13.290
Looks like everything's still running,
so refresh and we're still building.

131
00:07:13.290 --> 00:07:20.305
So, everything's still okay.
&gt;&gt; Brian Holt: Questions about this,

132
00:07:20.305 --> 00:07:21.480
what's going on here?

133
00:07:21.480 --> 00:07:25.447
This all make sense?
&gt;&gt; Brian Holt: So,

134
00:07:25.447 --> 00:07:28.387
now, that you're kinda starting to see
how these components start building, and

135
00:07:28.387 --> 00:07:29.690
becoming bigger and bigger things.

136
00:07:29.690 --> 00:07:31.610
Like my title could be
five more components,

137
00:07:31.610 --> 00:07:32.890
which could be five more components.

138
00:07:32.890 --> 00:07:35.780
You've got these fractal
trees of crazy stuff.

139
00:07:35.780 --> 00:07:36.673
But the nice thing is,

140
00:07:36.673 --> 00:07:39.461
they are still broken into bite sized
pieces that you can understand.

141
00:07:39.461 --> 00:07:42.420
And by separating these concerns into.

142
00:07:42.420 --> 00:07:46.822
Or separating these components into
packages, they are easier to maintain.

143
00:07:46.822 --> 00:07:48.382
One of the things to remember here,
is, like,

144
00:07:48.382 --> 00:07:50.060
what's actually happening
underneath the hood?

145
00:07:50.060 --> 00:07:52.740
This is just being compiled
to function calls, right?

146
00:07:52.740 --> 00:07:55.460
There is no black magic here.

147
00:07:55.460 --> 00:07:56.955
Now, that you've actually
written it by hand,

148
00:07:56.955 --> 00:07:59.567
you can see like,
&gt;&gt; Brian Holt: You know exactly what's

149
00:07:59.567 --> 00:08:00.090
going on.

150
00:08:01.650 --> 00:08:03.930
So, something that people initially
get frustrated with is like, well,

151
00:08:03.930 --> 00:08:09.590
I would like to put another div here,
and more mark up in here.

152
00:08:09.590 --> 00:08:11.750
But why doesn't this work?

153
00:08:11.750 --> 00:08:15.139
Why can't we have two siblings
be the top level component?

154
00:08:16.760 --> 00:08:22.270
Well, if you think about this in terms of
just being like function calls, right?

155
00:08:22.270 --> 00:08:25.420
This would be the same as saying return x,
y.

156
00:08:27.830 --> 00:08:29.880
That doesn't work in JavaScript, right?

157
00:08:29.880 --> 00:08:32.370
You have to have at least
one thing your returning.

158
00:08:32.370 --> 00:08:37.480
In other words you can only have one top
level div that you return, and that's it.

159
00:08:37.480 --> 00:08:42.990
So, I'm making a roundabout point that you
must return exactly one component, right?

160
00:08:42.990 --> 00:08:45.260
And that must be one top level component.

161
00:08:46.350 --> 00:08:49.544
So, what you'll see a lot of people do
is they just wrap everything in a div.

162
00:08:49.544 --> 00:08:50.930
And that's fine.

163
00:08:50.930 --> 00:08:52.638
If that's what you need to do,
then just do that.

164
00:08:52.638 --> 00:08:55.973
Yeah.
&gt;&gt; Speaker 4: Question from Dinarte

165
00:08:55.973 --> 00:09:00.916
wanting to know if there's any
recommendation on how to break your app

166
00:09:00.916 --> 00:09:02.273
into components.

167
00:09:02.273 --> 00:09:07.221
And if you're gonna cover this later.
&gt;&gt; Brian Holt: I'm

168
00:09:07.221 --> 00:09:10.550
sure I'll talk about it,
it's a good question.

169
00:09:10.550 --> 00:09:14.550
I think, many of times should
be intuitively obvious that have

170
00:09:14.550 --> 00:09:19.210
a separations of like this is a thing,
right and I can separate this concerns

171
00:09:19.210 --> 00:09:22.300
other thing then I can make it reusable,
or whatever, right?

172
00:09:23.690 --> 00:09:25.250
The only thing I would caution against is,

173
00:09:25.250 --> 00:09:28.760
that gets people breaking things into
absolutely tiny, itty bitty things.

174
00:09:28.760 --> 00:09:31.480
And usually that's not a good idea either.

175
00:09:31.480 --> 00:09:34.960
There's balance to be made there

176
00:09:34.960 --> 00:09:39.290
of decent robust pieces of code,
and being way too small.

177
00:09:39.290 --> 00:09:42.550
And the danger of going way too small
is it gets harder to reason about,

178
00:09:42.550 --> 00:09:44.470
and maintain and think about.

179
00:09:44.470 --> 00:09:47.380
But you also get a performance
hit if you start having

180
00:09:47.380 --> 00:09:49.310
way too many components, right?

181
00:09:49.310 --> 00:09:53.140
Cause if React has to keep track of
50,000 components instead of like 5,000,

182
00:09:53.140 --> 00:09:55.260
that makes a big difference.

183
00:09:55.260 --> 00:09:59.690
So, use your intuition, I guess.

184
00:09:59.690 --> 00:10:02.020
I think that's an age old question
of when do I separate something into

185
00:10:02.020 --> 00:10:02.950
a module, right?

