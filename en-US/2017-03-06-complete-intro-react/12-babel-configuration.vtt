WEBVTT

1
00:00:00.130 --> 00:00:04.810
&gt;&gt; Brian: So, Babel is a really awesome
tool that came out a couple years ago.

2
00:00:04.810 --> 00:00:07.990
It was called Six to Five for
a while and it was written

3
00:00:07.990 --> 00:00:12.635
by an Australian high school kid which
just makes me feel woefully inadequate.

4
00:00:12.635 --> 00:00:18.130
[LAUGH] And basically what it does
is it takes future JavaScript,

5
00:00:18.130 --> 00:00:22.470
right, ES6, which was at the time
future JavaScript, it still kind of is.

6
00:00:22.470 --> 00:00:26.667
And it compiles that down to es5,
which about 98 or

7
00:00:26.667 --> 00:00:30.412
97% of browsers today understand, right.

8
00:00:30.412 --> 00:00:35.151
So it takes this future JavaScript and
compiles it to older JavaScript.

9
00:00:36.720 --> 00:00:39.972
So that you can write the new syntax and
enjoy in all that funness and

10
00:00:39.972 --> 00:00:41.810
productivity benefits.

11
00:00:41.810 --> 00:00:45.980
And still ship code that can
run in every browser, right?

12
00:00:45.980 --> 00:00:48.580
I think all of us have
tried to ship code that

13
00:00:48.580 --> 00:00:51.760
doesn't work in this version of mobile
Safari or something stupid like that.

14
00:00:51.760 --> 00:00:53.346
I have, I have that problem a lot.

15
00:00:53.346 --> 00:00:55.261
More than I care to admit.

16
00:00:55.261 --> 00:00:58.780
So that's what six to five was.

17
00:00:58.780 --> 00:01:01.350
They decided that that
was too limited a scope,

18
00:01:01.350 --> 00:01:06.280
that the project itself was too useful to
just be limited to just Six to Five so

19
00:01:06.280 --> 00:01:10.240
they renamed it to Babel, and
basically made this platform for

20
00:01:10.240 --> 00:01:14.650
transforming one type of code
to another type of code, right?

21
00:01:14.650 --> 00:01:21.010
And that basically said okay,
here is these plugins.

22
00:01:21.010 --> 00:01:25.380
Transform this particular code in this
particular way to this output, right?

23
00:01:27.140 --> 00:01:32.550
So they did that, they included all
the plug ins to make es6 into es5, right?

24
00:01:32.550 --> 00:01:37.300
And that's all super useful, but they've
also now opened this platform up to be

25
00:01:37.300 --> 00:01:40.320
able to transform many
different types of code, right?

26
00:01:41.530 --> 00:01:45.970
So one of the things that they allow you
to do is they allow you to transform JSX,

27
00:01:45.970 --> 00:01:48.440
which I haven't talked about before but
we're about to talk about.

28
00:01:48.440 --> 00:01:50.350
Which is not standard JavaScript, right.

29
00:01:50.350 --> 00:01:52.860
It's not part of the JavaScript language,

30
00:01:52.860 --> 00:01:55.790
it will never be a part of
the JavaScript language.

31
00:01:55.790 --> 00:02:00.170
But they allow you to include these
kind of custom transforms yourself.

32
00:02:00.170 --> 00:02:03.670
I mean you can go as far to write your own
macros if that was something interesting

33
00:02:03.670 --> 00:02:08.960
to you, not that I would suggest it but
it's a very very powerful tool and

34
00:02:08.960 --> 00:02:13.960
surprisingly easy to write like I'm not
a big computer scientist by any mean,

35
00:02:13.960 --> 00:02:15.600
but writing a Babel
plug in is not too bad.

36
00:02:17.840 --> 00:02:20.276
So amazing tool.

37
00:02:20.276 --> 00:02:21.940
And that's what we're
going to be using today.

38
00:02:23.350 --> 00:02:28.530
And basically, if you're not using
Babel today in your production code,

39
00:02:28.530 --> 00:02:32.610
I would suggest it at least
exploring it for your team.

40
00:02:34.810 --> 00:02:35.970
I think it's pretty phenomenal.

41
00:02:37.340 --> 00:02:40.380
And I would say it's
battle tested to all hell.

42
00:02:40.380 --> 00:02:44.218
Like Netflix uses it in production,
Reddit used in production, basically every

43
00:02:44.218 --> 00:02:47.530
Silicon Valley company that I can
think of uses Babel in production.

44
00:02:47.530 --> 00:02:52.274
So it's okay, you can use it.

45
00:02:52.274 --> 00:02:55.244
Any questions about
theoretically what Babel is?

46
00:02:58.172 --> 00:03:00.567
&gt;&gt; Brian: Cool, so
the first thing we're gonna do,

47
00:03:00.567 --> 00:03:03.628
Babel ships with no
configuration of its own, right,

48
00:03:03.628 --> 00:03:08.018
it doesn't know, basically it's just
a dumb thing that doesn't do anything

49
00:03:08.018 --> 00:03:11.230
until you give it plugins to
transform the code, right?

50
00:03:11.230 --> 00:03:15.110
So you have to tell it like, hey,
I want you to transform the code in this

51
00:03:15.110 --> 00:03:18.390
particular way, which we need to give
it a configuration file to do that.

52
00:03:18.390 --> 00:03:23.510
So we're gonna create a new file,
inside of the complete intro to React

53
00:03:23.510 --> 00:03:29.065
root directory, and it's going to be
called .babelrc, you must call it that.

54
00:03:29.065 --> 00:03:32.130
.babelrc.

55
00:03:32.130 --> 00:03:35.480
Okay, save that.

56
00:03:35.480 --> 00:03:36.350
Yes.
Use dot.

57
00:03:38.070 --> 00:03:40.870
Okay, and it's going to be a JSON file.

58
00:03:40.870 --> 00:03:43.770
So you have to adhere to JSON standards.

59
00:03:45.040 --> 00:03:46.780
Okay, and
we are going to give it two presets.

60
00:03:49.282 --> 00:03:52.760
&gt;&gt; Brian: Okay, presets, and
that's gonna be an array.

61
00:03:54.180 --> 00:03:57.966
The first one is going to be react.

62
00:03:57.966 --> 00:04:04.290
And the second one is going to be another

63
00:04:04.290 --> 00:04:09.463
array, with "es2015",

64
00:04:09.463 --> 00:04:15.605
with an object "modules": false.

65
00:04:20.705 --> 00:04:24.900
&gt;&gt; Brian: So React has, or
sorry Babel has two concepts.

66
00:04:24.900 --> 00:04:28.320
It has the concept of a plugin and
it has the concept of a preset.

67
00:04:29.850 --> 00:04:33.520
And all a preset is,
is just a group of plugins.

68
00:04:33.520 --> 00:04:34.250
That's all it is.

69
00:04:35.490 --> 00:04:42.160
So in this particular case we have
es2015 which is all the transformations

70
00:04:42.160 --> 00:04:47.100
necessary to get from es5 to es6,
es6 to es5 rather.

71
00:04:47.100 --> 00:04:50.110
[COUGH]
So

72
00:04:50.110 --> 00:04:51.820
it includes all of those plugins, right?

73
00:04:51.820 --> 00:04:53.600
There's a plugin for generators.

74
00:04:53.600 --> 00:04:55.980
There's a plugin for arrow functions.

75
00:04:55.980 --> 00:04:58.280
There's a plugin for let and cons.

76
00:04:58.280 --> 00:05:01.580
There's a plugin for all of these
different transformations that need to

77
00:05:02.590 --> 00:05:04.620
happen to go from es6 to es5, right?

78
00:05:06.510 --> 00:05:08.030
It's very convenient to just throw,
it's like, hey,

79
00:05:08.030 --> 00:05:09.670
just give me everything from es2015.

80
00:05:11.070 --> 00:05:12.225
Don't do that in production.

81
00:05:12.225 --> 00:05:14.037
[LAUGH] This is okay for development.

82
00:05:18.268 --> 00:05:20.340
&gt;&gt; Brian: It's okay for development.

83
00:05:20.340 --> 00:05:22.290
But the reason why this is not okay for

84
00:05:22.290 --> 00:05:25.810
production, is it includes
a lot of polyfills.

85
00:05:25.810 --> 00:05:29.760
And a lot of extra code to get
that es six code working, and

86
00:05:29.760 --> 00:05:33.200
if you're not actively using that code,
you're just shipping crap down the wire.

87
00:05:33.200 --> 00:05:34.174
Which you don't wanna do, right?

88
00:05:34.174 --> 00:05:37.066
You wanna keep your production
bundles as small as possible.

89
00:05:37.066 --> 00:05:38.580
Like for example,

90
00:05:38.580 --> 00:05:44.220
this will include the generator
polyfill which is like 50 kilobytes?

91
00:05:44.220 --> 00:05:46.840
Something like that, which is just,
if you're not using it,

92
00:05:46.840 --> 00:05:48.379
then dear God don't ship it down the wire.

93
00:05:49.520 --> 00:05:55.121
So what you would do instead,
you would instead include plugins.

94
00:05:55.121 --> 00:05:57.360
You don't have to do this,
I'm just showing you.

95
00:05:57.360 --> 00:06:00.850
Which would be another array, and you

96
00:06:00.850 --> 00:06:04.220
would just put all the different plugins
that you actively want to include, right?

97
00:06:04.220 --> 00:06:05.910
And then don't include anything else.

98
00:06:07.840 --> 00:06:11.415
But because this is just a fun app in
we're just doing it because we wanna learn

99
00:06:11.415 --> 00:06:13.340
or we're just going to include all of it.

100
00:06:15.540 --> 00:06:16.800
Okay.

101
00:06:16.800 --> 00:06:19.650
What React is,
this is all of the JSX transformation so

102
00:06:19.650 --> 00:06:22.700
this is going to allow us to write
basically kind of an extended set of

103
00:06:22.700 --> 00:06:27.190
JavaScript, which is going to
compile down to readable ES5.

104
00:06:27.190 --> 00:06:29.920
And I will show you momentarily
what that actually is.

105
00:06:29.920 --> 00:06:34.770
But, suffice to say it's just another
group of plugins to get us to ES5.

106
00:06:36.310 --> 00:06:39.808
Okay, let's talk about this array since,
you didn't know I could talk for so

107
00:06:39.808 --> 00:06:41.567
much about six lines of code, did you?

108
00:06:41.567 --> 00:06:44.340
[LAUGH] I'm good at that.

109
00:06:44.340 --> 00:06:45.940
Okay, so
let's talk about this particular line.

110
00:06:47.860 --> 00:06:51.081
So when you give it an array,
this is just basically saying like,

111
00:06:51.081 --> 00:06:54.013
here's a configuration object
in addition to the preset,

112
00:06:54.013 --> 00:06:58.270
and we're gonna say, do not transform
the es6 module imports, right?

113
00:06:58.270 --> 00:07:01.570
The reason why we're doing this
is specifically for webpack two,

114
00:07:01.570 --> 00:07:05.120
because we want webpack two to take
care of the modules, and not Babel.

115
00:07:05.120 --> 00:07:07.680
Otherwise, Babel is going to take care
of your modules for you, which for

116
00:07:07.680 --> 00:07:09.190
the most part is fine.

117
00:07:09.190 --> 00:07:12.760
But specifically with web pack two,
and roll up js,

118
00:07:12.760 --> 00:07:15.730
if you're interested in that packager,
you want

119
00:07:15.730 --> 00:07:20.220
the packager to take care of the modules
because they can do tree shaking right?

120
00:07:20.220 --> 00:07:24.277
Which basically says only include
code that actually gets run.

121
00:07:24.277 --> 00:07:27.445
So that's why we're
doing the modules false.

122
00:07:27.445 --> 00:07:28.342
Yeah.

123
00:07:28.342 --> 00:07:32.449
&gt;&gt; Speaker 2: Travis is asking if you add
plugin then you're limiting it to just

124
00:07:32.449 --> 00:07:33.500
those plugins?

125
00:07:34.830 --> 00:07:36.830
&gt;&gt; Brian: Precisely,
which is exactly what you want.

126
00:07:39.950 --> 00:07:42.790
Okay, so modules false,
that's why you wanna do that.

127
00:07:42.790 --> 00:07:47.283
Otherwise, it's gonna be packaged
in such a way that Uglify

128
00:07:47.283 --> 00:07:49.582
cannot take out code, right?

129
00:07:49.582 --> 00:07:53.894
I mean, you want Uglify to be able to
strip out code that has no potential way

130
00:07:53.894 --> 00:07:55.200
of being run, right?

131
00:07:56.570 --> 00:07:59.720
So again,
this is going back to tree shaking.

132
00:07:59.720 --> 00:08:04.620
And tree shaking is another term that,
it is synonymous

133
00:08:04.620 --> 00:08:08.550
with live code inclusion, which is
different than dead code and elimination.

134
00:08:10.390 --> 00:08:11.480
There's a little nuance there.

135
00:08:11.480 --> 00:08:15.250
But also, I don't get why tree shaking and
a live code inclusion are the same thing.

136
00:08:15.250 --> 00:08:17.649
It seems like that's kind of counter
intuitive, but it is, I promise.

137
00:08:19.182 --> 00:08:22.950
That basically, Uglify is going
to go through your code and say,

138
00:08:22.950 --> 00:08:27.420
we can never go down this code path like,
based on what I can tell about this code.

139
00:08:27.420 --> 00:08:30.380
We're never gonna go down this code path,
and don't include any of this.

140
00:08:30.380 --> 00:08:32.200
So it only includes code
that can ever get run.

141
00:08:33.660 --> 00:08:35.440
So that's why we're doing this.

142
00:08:35.440 --> 00:08:36.687
Any questions about that?

143
00:08:36.687 --> 00:08:39.050
&gt;&gt; Speaker 2: So question from Bryan.

144
00:08:41.050 --> 00:08:43.900
Does the React preset work for production?

145
00:08:43.900 --> 00:08:44.410
&gt;&gt; Brian: Yeah.

146
00:08:44.410 --> 00:08:44.950
No, that one is fine.

147
00:08:46.350 --> 00:08:47.671
It's only like 4 or

148
00:08:47.671 --> 00:08:52.830
5 plugins whereas the es2015 one
is like 40 plugins or something.

149
00:08:52.830 --> 00:08:54.710
I'm making that up,
it's a large amount of plugins.

150
00:08:56.860 --> 00:08:57.630
That's a good question.

151
00:08:59.200 --> 00:09:03.050
Something else we're gonna
do real quick here, and

152
00:09:03.050 --> 00:09:05.420
I leave this up to you whether or
not you think it's a good idea or not.

153
00:09:05.420 --> 00:09:09.600
I'm gonna say "loose": true.

154
00:09:10.960 --> 00:09:13.100
Now what is loose?

155
00:09:13.100 --> 00:09:17.130
By default it shifts what these plugins

156
00:09:17.130 --> 00:09:21.580
that adhere to
the JavaScript's spec exactly.

157
00:09:21.580 --> 00:09:24.240
At the cost of making it much larger and
much slower,

158
00:09:24.240 --> 00:09:29.280
but it's going to adhere to every
last iota of this JavaScript spec.

159
00:09:29.280 --> 00:09:34.516
And when I say that, what happens
when you call array.iterator or

160
00:09:34.516 --> 00:09:38.700
array.from with a dom list that's empty,
right?

161
00:09:38.700 --> 00:09:42.800
These crazy, crazy edge cases
that they have to provide for but

162
00:09:42.800 --> 00:09:45.252
you're never gonna hit, right?

163
00:09:45.252 --> 00:09:50.410
So what loose does is it leaves
out all those crazy edge cases and

164
00:09:50.410 --> 00:09:53.580
just includes the fast smaller polyfills.

165
00:09:55.330 --> 00:10:01.340
I'm personally okay with this because it
cuts down on my bundle size a lot and

166
00:10:01.340 --> 00:10:04.315
I'm not going after
those crazy edge cases.

167
00:10:04.315 --> 00:10:07.891
I will say if you hit one of those crazy
edge cases, you will regret doing this.

168
00:10:07.891 --> 00:10:11.375
[LAUGH] So be careful.

169
00:10:11.375 --> 00:10:12.625
&gt;&gt; Speaker 2: Question from Michael,

170
00:10:12.625 --> 00:10:19.110
are you giving some error about unused
code when the tree shaking occurs?

171
00:10:19.110 --> 00:10:21.670
&gt;&gt; Brian: No,
cuz it's not really an error, right?

172
00:10:21.670 --> 00:10:25.540
For the most part,
you don't write code that's not included.

173
00:10:25.540 --> 00:10:27.170
if you're writing code
that's not included,

174
00:10:27.170 --> 00:10:30.310
you should just delete it, right?

175
00:10:30.310 --> 00:10:33.440
&gt;&gt; Speaker 2: The question might not
necessarily be specifically error, but

176
00:10:33.440 --> 00:10:35.890
message indication, something?

177
00:10:35.890 --> 00:10:36.500
&gt;&gt; Brian: I don't think so,

178
00:10:36.500 --> 00:10:39.120
because it's gonna be eliminating
a lot of code from your modules.

179
00:10:39.120 --> 00:10:40.220
Which is actually what you want.

180
00:10:40.220 --> 00:10:42.180
And I think that would be really noisy.

181
00:10:42.180 --> 00:10:43.170
So I don't think so.

182
00:10:43.170 --> 00:10:46.153
There might be some debug way to run
webpack, but I don't know what it is.

183
00:10:50.417 --> 00:10:53.510
&gt;&gt; Brian: So, a distinction I should make.

184
00:10:53.510 --> 00:10:55.500
We have kind of three tools at work here.

185
00:10:55.500 --> 00:10:59.670
We talked a little about webpack,
we talked a little bit about Babel, and

186
00:10:59.670 --> 00:11:03.880
then secretly there's also Uglify running
which webpack includes in and of itself.

187
00:11:05.410 --> 00:11:08.680
So you have Babel that transforms
your code from es6 to es5.

188
00:11:08.680 --> 00:11:12.680
By saying modules false we're saying hey,
leave the import statements alone and

189
00:11:12.680 --> 00:11:14.210
let webpack worry about that.

190
00:11:14.210 --> 00:11:16.590
So that's why I say modules
false it's like hey,

191
00:11:16.590 --> 00:11:17.600
you don't have to worry about this.

192
00:11:17.600 --> 00:11:21.010
I'm gonna let webpack worry about this.

193
00:11:21.010 --> 00:11:25.525
Webpack picks up and bundles all of your
code into such a way that it can still be

194
00:11:25.525 --> 00:11:30.178
run, and then what Uglify is going to to
is it's going to through and wipe out all

195
00:11:30.178 --> 00:11:35.275
the code that doesn't get used, and then
uglifies, concatenates, all that stuff.

196
00:11:35.275 --> 00:11:38.696
So, does that make sense kind of
the progressions of tools that's

197
00:11:38.696 --> 00:11:40.150
going on here?

198
00:11:40.150 --> 00:11:44.260
It's kind of convoluted and
not intuitively obvious,

199
00:11:44.260 --> 00:11:46.520
especially when something breaks and
you don't know which layer it broke in.

200
00:11:46.520 --> 00:11:50.940
But for the most part, you don't
have to care about Uglify, right?

201
00:11:50.940 --> 00:11:55.860
Uglify is just running in the wings and
is super old and super well-tested.

202
00:11:55.860 --> 00:11:57.180
So, it doesn't break.

203
00:11:57.180 --> 00:11:58.790
I've never had an Uglify problem before.

204
00:12:00.050 --> 00:12:00.580
But, yeah.

