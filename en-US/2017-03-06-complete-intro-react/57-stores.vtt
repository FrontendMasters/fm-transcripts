WEBVTT

1
00:00:00.270 --> 00:00:03.115
&gt;&gt; Brian Holt: Let's go create
another file called store.js.

2
00:00:07.999 --> 00:00:09.083
&gt;&gt; Brian Holt: Okay?

3
00:00:09.083 --> 00:00:12.280
And here we're gonna say,

4
00:00:12.280 --> 00:00:17.285
import { createStore } from 'redux'.

5
00:00:18.875 --> 00:00:25.198
&gt;&gt; Brian Holt: And
import rootReducer from,

6
00:00:25.198 --> 00:00:34.293
from './reducers'
&gt;&gt; Brian Holt: Okay.

7
00:00:34.293 --> 00:00:37.173
Then we're gonna say,

8
00:00:37.173 --> 00:00:42.950
const store = createStore(rootReducer).

9
00:00:42.950 --> 00:00:46.438
And then, export default store.

10
00:00:50.072 --> 00:00:53.430
&gt;&gt; Brian Holt: And
that is the most basic store, right.

11
00:00:53.430 --> 00:00:55.950
That's all you need to create a store.

12
00:00:55.950 --> 00:00:59.450
&gt;&gt; Speaker 2: All right, question
about sort of the shape of this thing.

13
00:00:59.450 --> 00:01:02.710
It might be easier to take a look
in the chat if you have it.

14
00:01:02.710 --> 00:01:06.420
Dan is asking about the structure
where you do the const,

15
00:01:06.420 --> 00:01:10.870
object, create store, and
then do the export default store,

16
00:01:10.870 --> 00:01:15.770
versus putting the export default up
where you're actually defining it.

17
00:01:17.890 --> 00:01:20.585
So essentially,
instead of having two lines.

18
00:01:20.585 --> 00:01:21.410
&gt;&gt; Brian Holt: Mm-hm.

19
00:01:21.410 --> 00:01:24.672
&gt;&gt; Speaker 2: Or two parts where
you export default afterwards.

20
00:01:27.353 --> 00:01:28.867
&gt;&gt; Speaker 2: You replace
the const store [CROSSTALK].

21
00:01:28.867 --> 00:01:29.606
&gt;&gt; Brian Holt: Yeah, gotcha.

22
00:01:29.606 --> 00:01:30.520
&gt;&gt; Speaker 2: With the export default.

23
00:01:30.520 --> 00:01:32.165
&gt;&gt; Brian Holt: I mean, you totally could,

24
00:01:32.165 --> 00:01:35.123
that's just preference on
how you want it to look.

25
00:01:37.721 --> 00:01:40.942
&gt;&gt; Brian Holt: It's just saying
specifically in reducers we could

26
00:01:40.942 --> 00:01:45.269
just say, essentially just say,
export default, up here, right?

27
00:01:48.094 --> 00:01:48.960
&gt;&gt; Brian Holt: Ex brought.

28
00:01:50.650 --> 00:01:51.410
Right?

29
00:01:51.410 --> 00:01:52.270
And get rid of this.

30
00:01:52.270 --> 00:01:53.160
&gt;&gt; Speaker 2: I do that all the time too.

31
00:01:54.410 --> 00:01:55.120
&gt;&gt; Brian Holt: It depends.

32
00:01:58.320 --> 00:01:59.580
Yeah, no I just I prefer-
&gt;&gt; Speaker 2: But

33
00:01:59.580 --> 00:02:02.260
I don't know if you have
an opinion of no opinion.

34
00:02:02.260 --> 00:02:04.810
&gt;&gt; Brian Holt: I don't know
I'm gonna go with no opinion.

35
00:02:04.810 --> 00:02:07.890
If I come across a code base where someone
does that, it doesn't bother me at all.

36
00:02:10.050 --> 00:02:11.770
This is just the way that I do it.

37
00:02:11.770 --> 00:02:14.390
I like having, I mean,
I don't know if I like.

38
00:02:14.390 --> 00:02:16.700
I'm just accustomed to
writing it this way.

39
00:02:19.920 --> 00:02:24.512
&gt;&gt; Speaker 3: In that case,
near the file, you'd just import

40
00:02:24.512 --> 00:02:29.670
reducers cuz there would be
no reducer method import?

41
00:02:29.670 --> 00:02:31.880
&gt;&gt; Brian Holt: So, what you would do here
with the [CROSSTALK] curly parentheses.

42
00:02:31.880 --> 00:02:34.482
&gt;&gt; Speaker 3: It stored it.

43
00:02:34.482 --> 00:02:36.660
&gt;&gt; Brian Holt: So,
this would work the same way.

44
00:02:36.660 --> 00:02:40.790
These two things would be the same.

45
00:02:40.790 --> 00:02:41.610
So.
&gt;&gt; Speaker 3: And then,

46
00:02:41.610 --> 00:02:43.270
over in store where you were.

47
00:02:43.270 --> 00:02:44.545
&gt;&gt; Brian Holt: Yeah,
you wouldn't change anything in store

48
00:02:44.545 --> 00:02:45.219
&gt;&gt; Speaker 3: Bringing in,

49
00:02:45.219 --> 00:02:47.140
you'd still import rootReducer?

50
00:02:47.140 --> 00:02:48.490
&gt;&gt; Brian Holt: Yep.

51
00:02:48.490 --> 00:02:51.290
So that's it,
I see the point you're making.

52
00:02:52.800 --> 00:02:55.920
This doesn't have to actually match
whatever comes from reducers,

53
00:02:55.920 --> 00:03:00.960
this can be called blah, right, and
this would just be called blah, right?

54
00:03:00.960 --> 00:03:03.800
It's not a named export
is what I'm getting at.

55
00:03:03.800 --> 00:03:06.060
So, you can actually export
it as a named export,

56
00:03:06.060 --> 00:03:08.393
which is exactly what create store is,
right?

57
00:03:08.393 --> 00:03:12.970
It says, export not default,
it says export CreateStore, and

58
00:03:12.970 --> 00:03:15.560
that how you gonna handle it,
cuz you know it's called createStore.

59
00:03:15.560 --> 00:03:17.890
That make sense?

60
00:03:17.890 --> 00:03:19.190
Yeah.

61
00:03:19.190 --> 00:03:24.120
But even this, you can say export
createStore as blah2, right?

62
00:03:24.120 --> 00:03:27.880
And now, it's not called createStore,
it's called blah2.

63
00:03:27.880 --> 00:03:32.394
But that's all ES6 module stuff.

64
00:03:36.005 --> 00:03:36.761
&gt;&gt; Brian Holt: Does that
answer your question?

65
00:03:36.761 --> 00:03:37.883
&gt;&gt; Speaker 3: Yes.

66
00:03:37.883 --> 00:03:39.008
&gt;&gt; Brian Holt: Cool.
Okay.

67
00:03:41.116 --> 00:03:43.950
&gt;&gt; Brian Holt: So now,
we have the hello world of store, right.

68
00:03:43.950 --> 00:03:45.070
And actually store it.

69
00:03:45.070 --> 00:03:48.860
The creation of store doesn't usually end
up being much more difficult than this.

70
00:03:48.860 --> 00:03:51.370
The only thing that will eventually
add back in here is you can

71
00:03:51.370 --> 00:03:52.519
have read X middlewares.

72
00:03:53.580 --> 00:03:56.910
Which I will explain when,
we're gonna use one later, but for

73
00:03:56.910 --> 00:04:01.156
now it sufficed to say this is
enough to get the basics of a store.

74
00:04:01.156 --> 00:04:04.509
Any questions?

75
00:04:12.780 --> 00:04:15.732
&gt;&gt; Brian Holt: Okay, so
I've shown you how to create stores and

76
00:04:15.732 --> 00:04:21.020
it's probably not a far leap to figure
out how to read from stores, right?

77
00:04:21.020 --> 00:04:25.060
But I have not, necessarily, talked
about how to modify the store yet, or

78
00:04:25.060 --> 00:04:25.980
at least how how to get there.

79
00:04:27.060 --> 00:04:30.160
Okay.
Or at least how to do it from

80
00:04:30.160 --> 00:04:32.200
the user-interface.

81
00:04:32.200 --> 00:04:36.800
So, what the interface is gonna do is the
interface is going to dispatch an action.

82
00:04:36.800 --> 00:04:40.000
It's gonna say, hey, redux, this happened,

83
00:04:40.000 --> 00:04:44.100
here's the data that go along with it,
you deal with it, right.

84
00:04:44.100 --> 00:04:47.600
So, you're gonna have action creators,
which are going to dispatch actions,

85
00:04:47.600 --> 00:04:49.930
which are then going to be
passed into the rootReducer,

86
00:04:49.930 --> 00:04:52.460
which is then going to
be dispatch to reducer,

87
00:04:52.460 --> 00:04:55.940
which is going to change the state,
which is gonna go back into the store.

88
00:04:55.940 --> 00:04:59.450
And then the store informs, React says,
okay, here is a new state and

89
00:04:59.450 --> 00:05:01.186
then you get a new nice interface.

90
00:05:03.334 --> 00:05:07.006
&gt;&gt; Brian Holt: So,
it's a very tight loop, right?

91
00:05:07.006 --> 00:05:08.966
It happens, right?

92
00:05:08.966 --> 00:05:13.430
And it's very easy to follow because
it always follows the same pattern,

93
00:05:13.430 --> 00:05:15.720
but as you might have noticed,
instead of calling setState,

94
00:05:15.720 --> 00:05:20.690
which was one step, we now have
seven steps to modifying State.

95
00:05:22.140 --> 00:05:23.530
So, complexity.

96
00:05:23.530 --> 00:05:26.450
We've added a bunch of complexity,
and so you have to ask yourself,

97
00:05:26.450 --> 00:05:28.330
is this complexity worth it to me and
to my app?

98
00:05:30.090 --> 00:05:30.590
Okay.

99
00:05:32.330 --> 00:05:35.250
So, we're going to go do each
one of those steps now, and

100
00:05:35.250 --> 00:05:37.508
it's a bit tedious, I admit.

101
00:05:37.508 --> 00:05:40.920
But, It's predictable,

102
00:05:40.920 --> 00:05:44.820
and I value predictability over
how tedious it is to write.

