WEBVTT

1
00:00:00.240 --> 00:00:02.380
&gt;&gt; Brian Holt: All right, unit testing.

2
00:00:02.380 --> 00:00:06.969
Like I said the former version of
this workshop v1 uses Mocha, Sinon,

3
00:00:06.969 --> 00:00:11.490
Chai, and then also Enzyme to do testing.

4
00:00:11.490 --> 00:00:15.980
None of that is outdated, like that's
still as of this moment in time and

5
00:00:15.980 --> 00:00:18.880
probably going forward,
since that's a pretty slow moving library.

6
00:00:20.180 --> 00:00:22.440
Doesn't really need to be fast
moving because it already does

7
00:00:22.440 --> 00:00:23.260
everything it needs to do.

8
00:00:24.680 --> 00:00:27.740
That's fully in date,
if you need to check that out, go do that.

9
00:00:27.740 --> 00:00:35.380
If your into Mocha, Chai, and
Sinon perfectly valid thing to do.

10
00:00:35.380 --> 00:00:39.820
But today we're going to
be talking about Jest.

11
00:00:39.820 --> 00:00:41.800
So Jest is a library that
came out of Facebook.

12
00:00:43.260 --> 00:00:46.600
And it came out,
I was still working at Reddit and

13
00:00:46.600 --> 00:00:49.290
we migrated our tests to be on Jest.

14
00:00:49.290 --> 00:00:51.560
It wasn't a big deal cuz
we were already on Jasmine.

15
00:00:51.560 --> 00:00:53.740
So if you've ever used
Jasmine unit testing,

16
00:00:53.740 --> 00:00:57.100
Jest encapsulates Jasmine for now.

17
00:00:57.100 --> 00:00:59.580
I've heard stirrings that they're
gonna move away from Jasmine, but

18
00:00:59.580 --> 00:01:01.322
that's a rumor.

19
00:01:01.322 --> 00:01:06.610
I was using Jest when I was at Reddit and
it was just when it first launched.

20
00:01:06.610 --> 00:01:13.070
And so, we migrated from our Jasmine
test to Jest and it was a nightmare.

21
00:01:13.070 --> 00:01:14.384
It was just a train wreck.

22
00:01:14.384 --> 00:01:20.060
The Jest that they released at that
time was, they took Jasmine and

23
00:01:20.060 --> 00:01:22.250
just bastardized it,
they just made it worse.

24
00:01:23.320 --> 00:01:27.327
And so, we ended up actually spending
time to migrate off of Jest.

25
00:01:27.327 --> 00:01:31.610
And I'm usually not one from,
like migrations usually go poorly,

26
00:01:31.610 --> 00:01:33.801
in my opinion, for the most part.

27
00:01:33.801 --> 00:01:37.554
But we actually did take
the time to migrate off on to

28
00:01:37.554 --> 00:01:41.601
Mocha.
&gt;&gt; Brian Holt: So when I heard that Jest

29
00:01:41.601 --> 00:01:46.260
was coming around and people started using
it again, maybe a couple month ago here.

30
00:01:46.260 --> 00:01:50.550
I was really skeptical, because I had
been burned personally, and deeply, and

31
00:01:50.550 --> 00:01:52.090
spiritually by Jest, previously.

32
00:01:52.090 --> 00:01:54.780
So I was just not very apt
to move to this new one.

33
00:01:54.780 --> 00:01:59.120
However, I got some nudgings and
eventually people said like, look,

34
00:01:59.120 --> 00:02:03.310
there's cool new features and
it's worth it and it's fast.

35
00:02:03.310 --> 00:02:06.180
All sorts of things,
things I was not expecting to hear.

36
00:02:07.510 --> 00:02:12.870
And then, I was tweeting with Kristoff,
who's one of the, I'm sure I'm saying

37
00:02:12.870 --> 00:02:17.140
his name wrong, but Kristoff, that's
one of the core maintainers of Jest.

38
00:02:17.140 --> 00:02:20.720
And he said that the only
thing that this Jest, and

39
00:02:20.720 --> 00:02:24.710
that Jest that I ran back then have
in common is the name and the logo.

40
00:02:24.710 --> 00:02:27.620
They've totally rewritten
it from the ground up.

41
00:02:27.620 --> 00:02:31.095
And he said that they almost called
it something different because so

42
00:02:31.095 --> 00:02:32.235
many people were so burned out.

43
00:02:32.235 --> 00:02:35.575
And he's like, but I love the name and
I love the logo, so we kept it.

44
00:02:35.575 --> 00:02:37.655
So if you've also been burned by Jess,

45
00:02:37.655 --> 00:02:39.755
know that this is actually
a totally separate library.

46
00:02:41.005 --> 00:02:45.060
It's still built on Jasmine, now luckily
Jasmine 2 which is a much better

47
00:02:45.060 --> 00:02:47.370
library to work with than Jasmine 1.

48
00:02:47.370 --> 00:02:50.748
But all the really crappy
parts of Jest 1 are not,

49
00:02:50.748 --> 00:02:53.410
I don't even know what version it was.

50
00:02:53.410 --> 00:02:55.110
But the previous version
of Jest are all gone.

51
00:02:55.110 --> 00:02:59.030
It used to do this crazy
auto-mocking behavior which was just

52
00:02:59.030 --> 00:03:00.225
really painful to deal with.

53
00:03:00.225 --> 00:03:04.110
This version Jest can, but
it's off by default and

54
00:03:04.110 --> 00:03:05.890
thank God, cuz it was just the worst.

55
00:03:08.530 --> 00:03:10.812
Seriously, I still have nightmares
of writing [CROSSTALK].

56
00:03:10.812 --> 00:03:12.356
&gt;&gt; Speaker 2: They're wondering if you'd

57
00:03:12.356 --> 00:03:13.344
really come out and

58
00:03:13.344 --> 00:03:16.050
tell us how you feel about technology.
&gt;&gt; Brian Holt: Yeah, no,

59
00:03:16.050 --> 00:03:18.790
I have no problems sharing my opinions.
&gt;&gt; Speaker 2: [LAUGH]

60
00:03:18.790 --> 00:03:21.280
&gt;&gt; Brian Holt: I have like PTSD from Jest.

61
00:03:22.360 --> 00:03:27.250
So yeah, but now it's really great.

62
00:03:27.250 --> 00:03:30.120
It's really cut down, it's a lot faster.

63
00:03:30.120 --> 00:03:34.330
It does a lot of really
really great things for you.

64
00:03:34.330 --> 00:03:39.210
And it has a lot of really,
really same defaults, which is good too.

65
00:03:39.210 --> 00:03:42.490
So, we're gonna write
a unit test real quick.

66
00:03:42.490 --> 00:03:45.585
And we're gonna write a snapshot test,
which is really,

67
00:03:45.585 --> 00:03:50.133
really new thing that Jest, I feel like
I'm saying really a lot, it's super weird,

68
00:03:50.133 --> 00:03:56.212
it's really weird.
&gt;&gt; Brian Holt: Jest

69
00:03:56.212 --> 00:04:00.660
came out with this idea of what's called
snapshot testing, which is a novel idea.

70
00:04:00.660 --> 00:04:04.560
Which I think is useful.

71
00:04:04.560 --> 00:04:07.430
I don't like writing tests, so
anything that writes tests for me,

72
00:04:07.430 --> 00:04:08.720
I'm just like, yeah.

73
00:04:08.720 --> 00:04:11.496
You write that test for
me, and it's awesome.

74
00:04:11.496 --> 00:04:16.180
So what Jest does is it renders your
component out, it dumps that to a file,

75
00:04:16.180 --> 00:04:19.590
and then it just compares
against that file in the future.

76
00:04:19.590 --> 00:04:23.130
So basically, you assure to yourself,

77
00:04:23.130 --> 00:04:26.840
this component is now well written,
this is the way I want it to look.

78
00:04:26.840 --> 00:04:29.600
Now I want you to write a unit test
to make sure that it continues

79
00:04:29.600 --> 00:04:30.500
looking like this.

80
00:04:31.690 --> 00:04:36.110
So in the future, it's gonna be compared
against that first state that you had.

81
00:04:36.110 --> 00:04:39.840
And so anytime that component changes,
you're gonna get a notification like hey,

82
00:04:39.840 --> 00:04:42.270
this change and it kind of gives
you like a git diff of like,

83
00:04:42.270 --> 00:04:45.290
this is what it was like before,
and this is what it is now.

84
00:04:45.290 --> 00:04:47.860
And if it looks good now you just
say cool, update my test and

85
00:04:47.860 --> 00:04:49.270
it just updates it.

86
00:04:49.270 --> 00:04:52.170
If it looks bad then you know that you had
a regression somewhere you can go fix it.

87
00:04:52.170 --> 00:04:54.199
So it's a really, really cheap test.

88
00:04:55.380 --> 00:04:56.960
Which is really easy to throw away.

89
00:04:56.960 --> 00:04:57.720
Which I think's really cool.

90
00:04:57.720 --> 00:05:00.110
God damn, I'm saying really again.

91
00:05:00.110 --> 00:05:04.834
I don't know what it is.
&gt;&gt; Brian Holt: So

92
00:05:04.834 --> 00:05:10.790
we're gonna create a file
called Search.spec.js.

93
00:05:10.790 --> 00:05:11.980
Why do I call it .spec?

94
00:05:11.980 --> 00:05:14.390
Because I've always called it .spec.

95
00:05:14.390 --> 00:05:19.280
The nice thing is that Jest will find
.spec.js files for you automatically.

96
00:05:19.280 --> 00:05:22.610
You don't have to configure it,
it just knows where to find it.

97
00:05:22.610 --> 00:05:26.949
I think it all does, does that as well for
.test.js and some other formats but

98
00:05:26.949 --> 00:05:33.150
that .spec.js is what I've always used.
&gt;&gt; Brian Holt: Another

99
00:05:33.150 --> 00:05:36.418
personal opinion here, you don't
necessarily have to subscribe to this but

100
00:05:36.418 --> 00:05:39.330
that's what we're gonna do for
this workshop.

101
00:05:39.330 --> 00:05:43.650
I like my tests living right alongside
the component that they test.

102
00:05:43.650 --> 00:05:47.460
So I have search.js and I have
search.spec.js in their same directory.

103
00:05:48.710 --> 00:05:53.000
I think that's useful because if
I'm browsing through the files and

104
00:05:53.000 --> 00:05:56.840
I see search, the first thing I wanna see
is the test research because that tells

105
00:05:56.840 --> 00:05:58.010
you how to use test.

106
00:05:59.330 --> 00:06:02.000
I think tests are useful as
a way of documentation as well.

107
00:06:03.300 --> 00:06:07.150
So it's really nice that they're
living right next to each other.

108
00:06:07.150 --> 00:06:11.783
Import React From 'react'.

109
00:06:15.370 --> 00:06:20.073
&gt;&gt; Brian Holt: Okay, import Search from

110
00:06:20.073 --> 00:06:23.500
'./Search'.

111
00:06:23.500 --> 00:06:31.010
And import renderer from
'react-test-renderer'.

112
00:06:31.010 --> 00:06:34.620
Which is a library provided by
Facebook that helps you do these kind

113
00:06:34.620 --> 00:06:35.810
of snapshot tests.

114
00:06:37.590 --> 00:06:43.309
And I'm just gonna say test.
&gt;&gt; Brian Holt: Search

115
00:06:43.309 --> 00:06:48.373
should,
&gt;&gt; Brian Holt: Or I'm

116
00:06:48.373 --> 00:06:54.949
just going to say Search snapshot test.
&gt;&gt; Brian Holt: And that takes a callback.

117
00:06:57.260 --> 00:07:03.075
I wanna say, const component

118
00:07:03.075 --> 00:07:09.589
= renderer.create(&lt;Search

119
00:07:09.589 --> 00:07:16.730
/&gt;).
&gt;&gt; Brian Holt: Const

120
00:07:16.730 --> 00:07:23.180
tree = component.toJSON().

121
00:07:23.180 --> 00:07:30.513
And, expect(tree).toMatchSnapshot.

122
00:07:33.950 --> 00:07:35.080
&gt;&gt; Brian Holt: That is it.

123
00:07:35.080 --> 00:07:40.190
That is how you write a Snapshot test.
&gt;&gt; Brian Holt: Doesn't

124
00:07:40.190 --> 00:07:41.330
even really seem fair, right.

125
00:07:41.330 --> 00:07:42.990
This doesn't really feel like a unit test.

126
00:07:42.990 --> 00:07:45.390
Typically you have to think like,
okay, well given this case,

127
00:07:45.390 --> 00:07:46.169
it needs to look like this.

128
00:07:48.090 --> 00:07:50.990
The first time it runs it's just gonna
say cool, I don't have a snapshot.

129
00:07:50.990 --> 00:07:54.960
Bam, just gonna dump it into a file and
this is my brand new snapshot.

130
00:07:54.960 --> 00:07:57.190
Every time thereafter it's just
going to compare real quick.

131
00:07:57.190 --> 00:08:00.700
I have this now, and
I had this previously, what changed?

132
00:08:00.700 --> 00:08:02.280
Nothing, cool, pass.

133
00:08:02.280 --> 00:08:06.400
If it doesn't pass, fails the test and
says, you changed here.

134
00:08:07.610 --> 00:08:09.010
Did you expect this to happen?

135
00:08:09.010 --> 00:08:12.260
If you do, you just rerun it with a flag
saying update my test, and it's done.

