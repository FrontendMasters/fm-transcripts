WEBVTT

1
00:00:00.230 --> 00:00:03.260
&gt;&gt; Brian Holt: We're gonna go create
our own higher order component now.

2
00:00:03.260 --> 00:00:11.600
Cuz what we eventually want to do is here
inside of app.js, we have this matches.

3
00:00:13.830 --> 00:00:19.960
But really what we want to do here
is we wanna have this AsyncRoutes

4
00:00:19.960 --> 00:00:24.920
that instead loading details
right away right upfront.

5
00:00:24.920 --> 00:00:29.160
We wanna tell it,
don't load details until you need to.

6
00:00:29.160 --> 00:00:30.070
That's what we wanna tell it.

7
00:00:31.890 --> 00:00:34.070
So the first thing we're gonna do is
we're gonna create a new component.

8
00:00:34.070 --> 00:00:40.680
And it's gonna be call AsyncRoute.js and

9
00:00:40.680 --> 00:00:45.440
what this is gonna do, is it's basically
going to allow us to show a loading state

10
00:00:45.440 --> 00:00:47.180
until we have the component loaded.

11
00:00:47.180 --> 00:00:48.390
And then, we're gonna show the component.

12
00:00:49.450 --> 00:00:52.040
So this is a higher-order component,
right?

13
00:00:52.040 --> 00:00:54.930
This component doesn't actually
display anything of it's own,

14
00:00:54.930 --> 00:00:57.170
it just encapsulates behavior.

15
00:00:58.500 --> 00:01:00.322
So, we're gonna import React from react.

16
00:01:06.262 --> 00:01:14.585
&gt;&gt; Brian Holt: From 'react'
const object = React.Proptypes.

17
00:01:20.375 --> 00:01:28.038
&gt;&gt; Brian Holt: And we're gonna say
const AsyncRoute = React.createClass.

18
00:01:30.938 --> 00:01:32.431
&gt;&gt; Brian Holt: propTypes.

19
00:01:36.850 --> 00:01:42.011
&gt;&gt; Brian Holt: Props are gonna be
an object of some description and

20
00:01:42.011 --> 00:01:46.700
then loading promise
will be another object.

21
00:01:46.700 --> 00:01:51.010
There probably is a proptype validation
out there that is a promise one,

22
00:01:51.010 --> 00:01:53.080
but I don't care so this is fine.

23
00:01:55.640 --> 00:01:57.090
It's going to be a get initial state.

24
00:02:00.050 --> 00:02:08.190
So, when very first load this component,
it's going to return loaded false.

25
00:02:09.360 --> 00:02:12.280
Right, because we're going to be using
this for asynchronously loading routes.

26
00:02:17.220 --> 00:02:18.360
Then compinentDidMount.

27
00:02:18.360 --> 00:02:27.990
So what's gonna happen is this acing crout
is going to be passed a promise right.

28
00:02:27.990 --> 00:02:33.260
The result of this promise is
the component we can use right.

29
00:02:33.260 --> 00:02:35.790
But we can't use it on the first try, so

30
00:02:35.790 --> 00:02:37.760
we have to wait until
it's finished loading.

31
00:02:37.760 --> 00:02:43.350
We're going to know when it's done loading
based on the promise that it's given us.

32
00:02:43.350 --> 00:02:50.895
So we're going to say
this.props.loadingPromise.then((module)).

33
00:02:55.620 --> 00:02:59.998
&gt;&gt; Brian Holt: So when this, when then
fires, it's going to hand us module and

34
00:02:59.998 --> 00:03:03.500
we're going to be able to
use module at that point.

35
00:03:06.424 --> 00:03:12.720
&gt;&gt; Brian Holt: So what we're gonna do is
we're gonna say this.component=module.

36
00:03:12.720 --> 00:03:16.270
So we're gonna store it on AsyncRoute.

37
00:03:16.270 --> 00:03:21.170
Notice we're not gonna
stick this on state.

38
00:03:21.170 --> 00:03:22.810
We're not gonna put in state.

39
00:03:22.810 --> 00:03:25.690
Because this isn't mutable after
we load it the first time, right?

40
00:03:25.690 --> 00:03:27.490
We're not gonna keep changing this, right?

41
00:03:27.490 --> 00:03:29.100
Once it's loaded, it's loaded, it's done.

42
00:03:29.100 --> 00:03:31.320
We don't have to worry about it, okay.

43
00:03:33.280 --> 00:03:39.410
Once we do that, then we're gonna
say this.setState({loaded: false}).

44
00:03:39.410 --> 00:03:44.630
The other thing is that, if we stick it on
State that means, every time that it goes

45
00:03:44.630 --> 00:03:48.590
to re-render, it's gonna check the entire
module, which might be very big, right?

46
00:03:48.590 --> 00:03:50.250
And we don't wanna do that.

47
00:03:50.250 --> 00:03:55.100
We only want it to have a fast re-render.

48
00:03:55.100 --> 00:03:57.730
So we're only going to stick render
on there instead of the component.

49
00:03:57.730 --> 00:04:00.430
Does that make sense, okay?

50
00:04:05.197 --> 00:04:07.900
&gt;&gt; Brian Holt: So that's what
component and mount's gonna do.

51
00:04:07.900 --> 00:04:09.470
Then on render.

52
00:04:12.494 --> 00:04:17.568
&gt;&gt; Brian Holt: What we're gonna
do down here is we're gonna say,

53
00:04:17.568 --> 00:04:23.471
if (this.state.loaded),
then we're going to return

54
00:04:23.471 --> 00:04:29.994
this.component_this.component_this.,
sorry,...

55
00:04:29.994 --> 00:04:35.568
this.props.props.

56
00:04:40.289 --> 00:04:41.280
&gt;&gt; Brian Holt: Okay?

57
00:04:41.280 --> 00:04:45.440
So if we have loaded
the module successfully,

58
00:04:45.440 --> 00:04:49.620
we're gonna instantiate this.component.

59
00:04:49.620 --> 00:04:52.500
So because we have a period in here,
it knows, okay,

60
00:04:52.500 --> 00:04:54.950
this is a java script object, right?

61
00:04:57.010 --> 00:04:58.930
Or a component we created ourselves.

62
00:05:00.120 --> 00:05:04.420
And then it's going to say, I'm going
to pass in those props that I get back.

63
00:05:04.420 --> 00:05:04.980
Yeah?

64
00:05:04.980 --> 00:05:07.420
&gt;&gt; Speaker 2: On line 17,
should it be true?

65
00:05:08.430 --> 00:05:09.146
&gt;&gt; Brian Holt: Yes, thank you.

66
00:05:13.597 --> 00:05:18.400
&gt;&gt; Brian Holt: Otherwise it's gonna
return some sort of loading state.

67
00:05:18.400 --> 00:05:20.320
So I'm just gonna give
it like a really dumb,

68
00:05:20.320 --> 00:05:23.740
just like it's gonna say loading in an h1.

69
00:05:23.740 --> 00:05:25.930
Be might have some fancy spinner here and
that will be fine.

70
00:05:30.511 --> 00:05:32.500
&gt;&gt; Brian Holt: So
does this make sense so far?

71
00:05:32.500 --> 00:05:34.200
If it's loaded, it shows the component.

72
00:05:34.200 --> 00:05:35.600
If not, it shows a loading state.

73
00:05:35.600 --> 00:05:37.430
That's all this does.

74
00:05:37.430 --> 00:05:42.900
And here we're just passing in whatever
props the async route got as props.

75
00:05:42.900 --> 00:05:45.229
And we just pass those on to
whatever the component was.

76
00:05:46.990 --> 00:05:48.920
Because we don't want
AsyncRoute to actually care,

77
00:05:48.920 --> 00:05:50.120
we want it to be very flexible.

78
00:05:50.120 --> 00:05:52.960
We want to be able to use this on
any route, not just one route.

79
00:05:55.800 --> 00:05:58.000
So now we have this AsyncRoute.

80
00:05:58.000 --> 00:06:01.600
Let's go plug it in and see if that all
makes sense as we plug it in together.

81
00:06:06.419 --> 00:06:08.750
&gt;&gt; Brian Holt: So
let's just go do one of them.

82
00:06:08.750 --> 00:06:10.090
I'm gonna do landing real quick.

83
00:06:11.530 --> 00:06:16.396
So go to ClientApp.Js,
sorry not ClientApp, but App.Js.

84
00:06:19.621 --> 00:06:23.300
&gt;&gt; Brian Holt: And
we're going to not import landing.

85
00:06:23.300 --> 00:06:24.940
We going to stop importing that.

86
00:06:24.940 --> 00:06:28.702
And we're going to import

87
00:06:28.702 --> 00:06:33.840
AsyncRoute from./AsyncRoute.

88
00:06:49.598 --> 00:06:55.490
&gt;&gt; Brian Holt: Okay, to make it so
that node doesn't fail on this.

89
00:06:55.490 --> 00:07:01.700
I'm just gonna say, if (global) so

90
00:07:01.700 --> 00:07:03.570
this is a dirty way to check
if you're a node or not.

91
00:07:03.570 --> 00:07:08.520
I don't suggest doing this in production
but this is going to work for our case.

92
00:07:08.520 --> 00:07:10.140
Globals like the window of node.

93
00:07:12.020 --> 00:07:16.930
global.System = { import }.

94
00:07:20.442 --> 00:07:26.110
&gt;&gt; Brian Holt: We're just basically just
kind of quote, unquote poly filling.

95
00:07:26.110 --> 00:07:29.760
There's a better, we're not poly
filling cuz we're not making this work,

96
00:07:29.760 --> 00:07:33.990
we're just saying don't fail
when this function's called.

97
00:07:36.851 --> 00:07:38.640
&gt;&gt; Brian Holt: And
then what we're gonna do here on landing.

98
00:07:40.070 --> 00:07:41.640
So we have this one right here.

99
00:07:41.640 --> 00:07:43.340
I'm gonna put this one on multiple lines.

100
00:07:51.890 --> 00:07:54.600
&gt;&gt; Brian Holt: So we're gonna abuse this
trick that we had to have down here.

101
00:07:54.600 --> 00:08:00.315
We're gonna say props, AsyncRoute

102
00:08:00.315 --> 00:08:06.270
props=props.

103
00:08:06.270 --> 00:08:09.340
So we're just passing in whatever
this got into AsyncRoute.

104
00:08:09.340 --> 00:08:17.275
And then we're gonna say
&gt;&gt; Brian Holt: component

105
00:08:20.579 --> 00:08:22.026
&gt;&gt; Brian Holt: No I called this not

106
00:08:22.026 --> 00:08:24.955
component, it's loadingPromise.

107
00:08:24.955 --> 00:08:32.636
loadingPromise=System.import.

108
00:08:32.636 --> 00:08:41.555
./Landing
&gt;&gt; Speaker 2: I

109
00:08:41.555 --> 00:08:46.529
think you need a scrolling
brace on a different place.

110
00:08:46.529 --> 00:08:49.540
Doesn't the loadingPromise
go with the AsyncRoute?

111
00:08:53.310 --> 00:08:54.070
&gt;&gt; Brian Holt: Yeah, it does.

112
00:09:06.175 --> 00:09:06.844
&gt;&gt; Brian Holt: Yep, okay.

113
00:09:13.837 --> 00:09:17.049
&gt;&gt; Brian Holt: And then that needs
to be closed as well, right.

114
00:09:23.946 --> 00:09:27.810
&gt;&gt; Brian Holt: Okay, so
let's unpack what's happening here, okay.

115
00:09:27.810 --> 00:09:30.070
This is just like one of those,

116
00:09:31.110 --> 00:09:36.099
literally a statement functional component
that's generating an AsyncRoute.

117
00:09:37.170 --> 00:09:40.240
We're passing whatever props
we're getting from Match

118
00:09:41.330 --> 00:09:44.960
into AsyncRoute and
loadingPromise right here.

119
00:09:44.960 --> 00:09:47.272
We're doing a system.import.

120
00:09:47.272 --> 00:09:52.570
So System.import is the new way of
doing asynchronous module loading.

121
00:09:52.570 --> 00:09:56.740
If you ever used require.ensure before,
that was the old way of doing it.

122
00:09:56.740 --> 00:10:00.250
System.import is the new way of doing it.

123
00:10:00.250 --> 00:10:05.450
And we're saying, hey,
asynchronously load ./Landing.

124
00:10:05.450 --> 00:10:09.190
This generates a promise,
whenever that promise is fulfilled,

125
00:10:09.190 --> 00:10:10.460
that's when it gives you that module.

126
00:10:12.380 --> 00:10:13.980
Okay we're passing that to AsyncRoute,

127
00:10:13.980 --> 00:10:17.820
which is either going to display
it if that promise has resolved.

128
00:10:19.340 --> 00:10:21.210
And until then it shows a loading state.

129
00:10:25.618 --> 00:10:27.130
&gt;&gt; Brian Holt: Now that's
all we have to do.

130
00:10:27.130 --> 00:10:30.098
At this point webpack is
smart enough to say, okay,

131
00:10:30.098 --> 00:10:32.830
I'm not gonna load landing right away.

132
00:10:32.830 --> 00:10:36.070
I'm gonna wait until
landing is requested and

133
00:10:36.070 --> 00:10:37.849
then I'm actually gonna go
to the server and grab it.

134
00:10:39.400 --> 00:10:41.260
And it's smart up to say like,

135
00:10:41.260 --> 00:10:44.730
okay landing is this big
dependency graph over here.

136
00:10:44.730 --> 00:10:46.060
I'm just gonna cut if off right there.

137
00:10:46.060 --> 00:10:51.720
So, like for example,
if I only require axios inside of Landing,

138
00:10:51.720 --> 00:10:54.870
it's also not gonna include
axios until I request Landing.

139
00:10:54.870 --> 00:10:57.710
So, it's gonna be smart enough to cut off
that entire part of the dependency graph.

140
00:10:59.580 --> 00:11:03.380
So this can actually be a pretty
substantial savings, yeah.

141
00:11:03.380 --> 00:11:06.977
&gt;&gt; Speaker 2: Richard is asking
if that component line 20 should

142
00:11:06.977 --> 00:11:09.273
get GetComponent() instead?

143
00:11:13.219 --> 00:11:14.492
&gt;&gt; Brian Holt: Should be GetComponent()?

144
00:11:23.792 --> 00:11:26.170
&gt;&gt; Brian Holt: I'm not sure
what he's talking about.

145
00:11:27.244 --> 00:11:27.890
GetComponent.

146
00:11:27.890 --> 00:11:31.900
That's the old react
router way of doing it.

147
00:11:31.900 --> 00:11:34.530
React router has no opinion on
doing asynchronous loading.

148
00:11:34.530 --> 00:11:37.050
No, it has no helpers.

149
00:11:37.050 --> 00:11:37.720
You're on your own.

150
00:11:39.140 --> 00:11:43.320
Yeah, so that's the old React router
way of handling asynchronous stuff.

151
00:11:44.680 --> 00:11:47.580
But thanks to this new way of doing it,
they don't have to worry at all about it.

152
00:11:47.580 --> 00:11:49.120
And it's totally on us to figure it out.

