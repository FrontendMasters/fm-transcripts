WEBVTT

1
00:00:00.470 --> 00:00:01.010
&gt;&gt; Brian Holt: So yeah,

2
00:00:01.010 --> 00:00:06.050
let's draw out piece of code by piece
of code exactly what's happening.

3
00:00:06.050 --> 00:00:08.070
So I have an interface, right?

4
00:00:08.070 --> 00:00:09.350
Right here in front of me.

5
00:00:09.350 --> 00:00:13.990
And I type the letter,
I don't know, f, right?

6
00:00:13.990 --> 00:00:18.269
That kicks off an event here on the input.

7
00:00:19.350 --> 00:00:24.520
onChange, it calls this method,
handleSearchTermChange, okay?

8
00:00:24.520 --> 00:00:27.480
handleSearchTermChange, we
take in that event,

9
00:00:27.480 --> 00:00:33.320
we pass the event.target.value ot
setSearchTerm which is our actionCreator.

10
00:00:33.320 --> 00:00:38.144
So go over to our actionCreator.
&gt;&gt; Brian Holt: setSearchTerm

11
00:00:38.144 --> 00:00:42.994
takes in a searchTerm, and
then, it returns an object,

12
00:00:42.994 --> 00:00:49.260
an action of type: SET_SEARCH_TERM,
which we defined in actions.js

13
00:00:49.260 --> 00:00:54.914
to literally just be this string, right?
&gt;&gt; Brian Holt: Okay,

14
00:00:54.914 --> 00:00:58.531
actionCreators and
then searchTerm: searchTerm,

15
00:00:58.531 --> 00:01:03.740
that's the actual value that
we're gonna be passing to Redux.

16
00:01:03.740 --> 00:01:08.110
Okay, so that we dispatch that function.

17
00:01:08.110 --> 00:01:13.150
So if we go back to landing,
which came from connect.

18
00:01:13.150 --> 00:01:17.290
Which is just a little tiny helper
method that came from ReactRedux.

19
00:01:17.290 --> 00:01:19.680
What this is going to do is
it's going to take this action.

20
00:01:19.680 --> 00:01:23.400
And it's going to hand
it to your rootReducer.

21
00:01:23.400 --> 00:01:25.239
So let's go to Reducers.

22
00:01:27.370 --> 00:01:30.180
So, it ends up here,
when you call it dispatch.

23
00:01:30.180 --> 00:01:32.200
Dispatch is going to do a little
bit of misdirection but

24
00:01:32.200 --> 00:01:37.110
what actually ends up happening, is
it's going to call your rootReducer with

25
00:01:37.110 --> 00:01:42.080
state and then the very same action
object that you passed to it, right?

26
00:01:42.080 --> 00:01:44.410
When we called dispatch,
we gave it an action,

27
00:01:44.410 --> 00:01:48.640
which came from our action creator, and
that's going to end up here as the action.

28
00:01:48.640 --> 00:01:51.925
Does that make sense?

29
00:01:51.925 --> 00:01:56.400
Okay, we're going to call a switch
based on the action type.

30
00:01:56.400 --> 00:02:00.430
So if it hits the case set search term,

31
00:02:00.430 --> 00:02:04.580
which is what came from actions,
this same one.

32
00:02:06.180 --> 00:02:10.250
And remember in action creator we
dispatched of type setSearchTerm so for

33
00:02:10.250 --> 00:02:14.690
the vector Reducers if it
matches setSearchTerm here

34
00:02:14.690 --> 00:02:20.180
of action type then it's going to
call the setSearchTerm Reducer, okay.

35
00:02:20.180 --> 00:02:24.160
So we come up here to
the setSearchTerm Reducer.

36
00:02:24.160 --> 00:02:26.590
It gets passed in the old state.

37
00:02:26.590 --> 00:02:32.110
The same action that we dispatched from
our action creator, it's going to create

38
00:02:32.110 --> 00:02:37.200
a new state with that search term mixed in
and we're going to return the new state.

39
00:02:37.200 --> 00:02:42.370
That gets passed back to the store and
this is now your new state.

40
00:02:42.370 --> 00:02:45.930
The other one gets thrown away,
it's gone forever and our new state,

41
00:02:45.930 --> 00:02:50.470
the store It's this new state that
we returned here from our Reducer.

42
00:02:50.470 --> 00:02:53.700
So this returns, and
it goes back to our rootReducer,

43
00:02:53.700 --> 00:02:57.660
which returns back to Redux, okay?

44
00:02:57.660 --> 00:03:00.680
Now Redux has a new store.

45
00:03:00.680 --> 00:03:04.750
Because we used that
provider to wrap Redux,

46
00:03:04.750 --> 00:03:08.100
or, yeah, to incorporate Redux into React,

47
00:03:09.130 --> 00:03:13.280
it has a subscription function
that reacts to subscribe to so

48
00:03:13.280 --> 00:03:19.180
anytime Redux gets a new store that says,
hey react I need you to update,

49
00:03:19.180 --> 00:03:23.280
by actually calling force update which
is the one that I showed you previously.

50
00:03:23.280 --> 00:03:28.154
So then react kicks off a re-render, it
says okay here is the new state re-render,

51
00:03:28.154 --> 00:03:31.795
your app re-renders and
you end up with a new user interface and

52
00:03:31.795 --> 00:03:35.868
that's when you finally see the f
show up inside of your application.

53
00:03:38.854 --> 00:03:41.399
&gt;&gt; Speaker 2: So the question is,

54
00:03:41.399 --> 00:03:45.000
two questions, actually.

55
00:03:45.000 --> 00:03:47.890
How would you write this thing

56
00:03:47.890 --> 00:03:52.800
using the MapDispatch toProps?
&gt;&gt; Brian Holt: Let's

57
00:03:52.800 --> 00:03:54.358
see if I can remember it
off the top of my head.

58
00:03:54.358 --> 00:03:59.496
No promises.
&gt;&gt; Brian Holt: So

59
00:03:59.496 --> 00:04:06.010
you write a const mapDispatchToProps

60
00:04:06.010 --> 00:04:10.894
dispatch and then return and

61
00:04:10.894 --> 00:04:17.330
object which has methods in it.

62
00:04:17.330 --> 00:04:21.670
So in this particular one,
we would have like a setSearchTerm,

63
00:04:23.580 --> 00:04:25.730
method, which would be a function.

64
00:04:25.730 --> 00:04:32.670
And then we call dispatch(setSearchTerm).

65
00:04:32.670 --> 00:04:37.755
So maybe you call something else like

66
00:04:37.755 --> 00:04:44.646
dispatchSetSearchTerm with
value search term,

67
00:04:44.646 --> 00:04:52.846
here you would map it here which
would be mat state to props so

68
00:04:52.846 --> 00:04:58.094
now both, I think this is close if this

69
00:04:58.094 --> 00:05:03.040
is not exactly, if this isn't it.

70
00:05:05.040 --> 00:05:07.680
Dispatch is the same function
that gets past this prop so

71
00:05:07.680 --> 00:05:08.830
you can treat it the same way.

72
00:05:10.230 --> 00:05:14.870
This now is this dispatchSetSearchTerm
is now injected as

73
00:05:14.870 --> 00:05:19.920
a property to whatever components,
in this case, landing.

74
00:05:19.920 --> 00:05:22.930
And then saying this.dispatch,

75
00:05:22.930 --> 00:05:26.750
what we would say is
this.props.dispatchSetSearchTerm.

76
00:05:26.750 --> 00:05:32.362
You would drop that part.
&gt;&gt; Brian Holt: Right,

77
00:05:32.362 --> 00:05:36.620
and then here you would say,
dispatchSetSearchTerm.

78
00:05:37.950 --> 00:05:41.375
So let's see if I can code
off the top of my head.

79
00:05:41.375 --> 00:05:44.120
[LAUGH] Refresh.

80
00:05:47.890 --> 00:05:49.020
Yeah that's actually it.

81
00:05:50.470 --> 00:05:54.250
It's ill-advised to code on the fly when
you're giving a workshop but nailed it.

82
00:05:55.660 --> 00:05:56.920
So that's how it looks.

83
00:05:56.920 --> 00:05:57.940
Why is this better?

84
00:05:57.940 --> 00:06:00.240
This is better because now it handles,

85
00:06:00.240 --> 00:06:04.390
this particular function right
here is a better interface.

86
00:06:04.390 --> 00:06:09.720
So now landing can be used outside of
Redux, right, it's not necessarily itself

87
00:06:09.720 --> 00:06:15.730
dependent on Redux, whereas before the
dispatch idea is a very Redux centric API.

88
00:06:17.060 --> 00:06:20.990
So you have to ask yourself,
do I want to move away from Redux.

89
00:06:20.990 --> 00:06:24.610
I would kind of argue that Landing is
already kind of tied to Redux despite

90
00:06:24.610 --> 00:06:29.840
the fact it doesn't necessarily must
be tied to Redux, personal decision.

91
00:06:30.890 --> 00:06:34.140
This is not typically the way I do it but
you can definitely do it this way.

92
00:06:34.140 --> 00:06:37.618
And I would probably even argue
this is maybe more common so

93
00:06:37.618 --> 00:06:42.010
pick your poison.
&gt;&gt; Speaker 2: Lots

94
00:06:42.010 --> 00:06:44.120
more questions.
&gt;&gt; Brian Holt: Okay.

95
00:06:45.600 --> 00:06:46.140
&gt;&gt; Speaker 2: Okay first

96
00:06:46.140 --> 00:06:50.400
one backing up quite away, is there ever a
situation where you would need to keep, or

97
00:06:50.400 --> 00:06:51.780
want to keep the old fate and

98
00:06:51.780 --> 00:06:56.081
how would you do that?
&gt;&gt; Brian Holt: I guess you would just

99
00:06:56.081 --> 00:06:58.700
keep it as a separate value in Redux,
right?

100
00:06:58.700 --> 00:07:02.830
So, maybe you have like new search and
old search term.

101
00:07:02.830 --> 00:07:06.180
And every time that someone calls
a Reducer you would just move

102
00:07:06.180 --> 00:07:08.679
new search to old search term, and
then you would keep new search term.

103
00:07:10.310 --> 00:07:12.540
But I mean, it's just an object, right?

104
00:07:12.540 --> 00:07:14.510
You can just put things on the object

105
00:07:14.510 --> 00:07:18.210
as a property.
&gt;&gt; Speaker 2: Okay,

106
00:07:18.210 --> 00:07:20.500
Martin has a long question, I think.

107
00:07:20.500 --> 00:07:24.640
Action creators, actions, and
Reducers are now in separate files.

108
00:07:24.640 --> 00:07:29.260
Looking at code organization, how do you
think of ideas such as dux where actions,

109
00:07:29.260 --> 00:07:31.760
action creators and
Reducers are organized together?

110
00:07:33.290 --> 00:07:36.820
And gave a long URL for discussion.
&gt;&gt; Brian Holt: I

111
00:07:36.820 --> 00:07:38.030
don't know if I have an opinion.

112
00:07:38.030 --> 00:07:43.250
I certainly don't know anything about
ducks, I'm not present with that.

113
00:07:43.250 --> 00:07:45.820
But I will say that there's
many ways to organize this.

114
00:07:45.820 --> 00:07:48.010
This is just the most common way and

115
00:07:48.010 --> 00:07:52.275
the personally successful
way I've done it, okay.

116
00:07:52.275 --> 00:07:54.060
[COUGH] So it looks like he
has a question real quick.

117
00:07:54.060 --> 00:07:56.910
And then we can come back.
&gt;&gt; Speaker 3: I was

118
00:07:56.910 --> 00:08:01.510
wondering if you could just talk real
quick again about the mapStateToProps.

119
00:08:01.510 --> 00:08:06.682
Like we're passing in state in there and
then that function gets passed to connect.

120
00:08:06.682 --> 00:08:10.670
Is state

121
00:08:10.670 --> 00:08:15.360
the props that are coming back from Redux?
&gt;&gt; Brian Holt: State is the entire state

122
00:08:15.360 --> 00:08:17.320
of your Redux store.
&gt;&gt; Speaker 3: Okay.

123
00:08:17.320 --> 00:08:18.930
&gt;&gt; Brian Holt: And then you're

124
00:08:18.930 --> 00:08:23.370
just returning the subset that this
particular component is tagged to.

125
00:08:23.370 --> 00:08:24.630
&gt;&gt; Speaker 3: Gotcha, thank

126
00:08:24.630 --> 00:08:25.960
you.
&gt;&gt; Brian Holt: Yep.

127
00:08:25.960 --> 00:08:26.670
&gt;&gt; Speaker 2: Okay, Christopher,

128
00:08:26.670 --> 00:08:28.200
wants to know where exactly

129
00:08:28.200 --> 00:08:29.589
we are invoking the rootReducer?

130
00:08:30.710 --> 00:08:32.320
&gt;&gt; Brian Holt: Where?
&gt;&gt; Speaker 2: Where?

131
00:08:32.320 --> 00:08:33.847
&gt;&gt; Brian Holt: We don't specifically

132
00:08:33.847 --> 00:08:36.220
invoke the rootReducer ourselves.

133
00:08:36.220 --> 00:08:39.997
We dispatch an action and then Redux
will invoke our root reducer for

134
00:08:39.997 --> 00:08:47.948
us.
&gt;&gt; Speaker 2: There's more,

135
00:08:47.948 --> 00:08:52.550
Bryan, can you explain
the whole loop again, please?

136
00:08:52.550 --> 00:08:54.930
Sorry.
&gt;&gt; Brian Holt: [LAUGH]

137
00:08:54.930 --> 00:08:57.870
I will give you the high level but

138
00:08:57.870 --> 00:09:00.820
if you need it again, I would say just
go back and watch the live video again,

139
00:09:00.820 --> 00:09:03.050
because it's a long explanation.

140
00:09:04.090 --> 00:09:09.520
But in the UI, we dispatch
an action using an action creator,

141
00:09:09.520 --> 00:09:11.951
which then lands in
the rootReducer via redux.

142
00:09:13.020 --> 00:09:18.450
rootReducer in Redux dispatches
that to another reducer,

143
00:09:18.450 --> 00:09:22.440
which modifies the state, returns the new
state, which gets stored back in Redux.

144
00:09:23.440 --> 00:09:25.310
Then you have your new state in Redux.

145
00:09:25.310 --> 00:09:29.704
Redux informs React that something has
changed, and React updates itself.

