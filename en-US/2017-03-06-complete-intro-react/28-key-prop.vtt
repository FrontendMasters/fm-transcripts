WEBVTT

1
00:00:00.300 --> 00:00:02.150
&gt;&gt; Brian Holt: Now let's go ahead and
fix this error down here.

2
00:00:03.380 --> 00:00:04.790
So it has this key error.

3
00:00:06.910 --> 00:00:10.045
So for the most part it reacts pretty
smart about the way it optimizes your

4
00:00:10.045 --> 00:00:10.614
code.

5
00:00:10.614 --> 00:00:14.400
And then using some interesting heuristics
it can kind of figure out a bunch of

6
00:00:14.400 --> 00:00:15.500
interesting parts about it.

7
00:00:17.560 --> 00:00:20.619
But this particular case is one
case that they kind of ask for

8
00:00:20.619 --> 00:00:22.343
your help to optimize your code.

9
00:00:25.230 --> 00:00:31.190
&gt;&gt; Brian Holt: So imagine we had
a sort on our different shows.

10
00:00:31.190 --> 00:00:35.215
So that we could sort by release date,
we could sort by

11
00:00:35.215 --> 00:00:41.450
rating, views, anything like that.

12
00:00:41.450 --> 00:00:43.570
So we were taking
the same bits of data and

13
00:00:43.570 --> 00:00:45.889
we are re-arranging it
into different pieces.

14
00:00:47.570 --> 00:00:50.960
Well, all React sees is on one render,

15
00:00:50.960 --> 00:00:55.040
I saw that I had House of Cards,
Daredevil, Orange is the New Black.

16
00:00:55.040 --> 00:00:56.890
I had all these different objects.

17
00:00:56.890 --> 00:00:59.770
And then on the re-render it sees
all of these things have changed.

18
00:00:59.770 --> 00:01:03.950
It has no idea that these things
are actually the same objects, but

19
00:01:03.950 --> 00:01:05.300
just in a different order.

20
00:01:05.300 --> 00:01:07.500
It has no handle, no way of knowing that.

21
00:01:08.550 --> 00:01:12.070
So what that actually means is it's
just going to blow up everything and

22
00:01:12.070 --> 00:01:13.090
then re-render everything.

23
00:01:15.270 --> 00:01:17.510
Now this ends up being kind of a problem.

24
00:01:17.510 --> 00:01:20.400
Because like these are kind
of simple components but

25
00:01:20.400 --> 00:01:23.620
emerges [INAUDIBLE] like deeply
nested huge amounts of components,

26
00:01:23.620 --> 00:01:25.635
lots of different really
bad things going on.

27
00:01:25.635 --> 00:01:28.508
Not really bad just really complex things.

28
00:01:28.508 --> 00:01:32.750
Destroying and re-rendering actually
ends up being really, really expensive.

29
00:01:34.540 --> 00:01:36.890
If you have ephemeral data,
it gets even worse.

30
00:01:36.890 --> 00:01:39.160
Then you have to make Ajax calls and
things like that.

31
00:01:40.410 --> 00:01:44.440
So what React asks you to do,
is it says, give me a key.

32
00:01:44.440 --> 00:01:48.820
That I could check, just do a shallow
check is key equal to key, yes.

33
00:01:48.820 --> 00:01:51.650
But now they're out of order, I'm just
going to take this and move it down here.

34
00:01:51.650 --> 00:01:54.040
And so it doesn't have to
recreate all of that DOM for you.

35
00:01:54.040 --> 00:01:56.900
Does that make sense of why key exists?

36
00:01:58.994 --> 00:02:03.470
&gt;&gt; Brian Holt: So if we go here
to ShowCard and we give it a key.

37
00:02:03.470 --> 00:02:06.940
We have to give it some unique identifier
that's always going to be the same, right?

38
00:02:06.940 --> 00:02:07.980
Just some sort of ID.

39
00:02:08.990 --> 00:02:13.450
So that each one of them has an imdbID,
which we can guarantee is unique for

40
00:02:13.450 --> 00:02:14.040
each one of them.

41
00:02:15.220 --> 00:02:17.260
You could give it the title
if you didn't have an imdb.

42
00:02:19.110 --> 00:02:22.250
But in this particular this is
an easy one for it to identify.

43
00:02:22.250 --> 00:02:24.390
So that's a good one to use,
so we'll use that one.

44
00:02:25.420 --> 00:02:32.930
So now if we save that and
refresh, now that warning's gone.

45
00:02:35.745 --> 00:02:39.410
&gt;&gt; Audience 1: So you mentioned that for
the key it has to be unique?

46
00:02:39.410 --> 00:02:44.896
So in this case, it would be a bad idea
to use the index parameter on a map.

47
00:02:44.896 --> 00:02:51.110
Because that might change if
that data changed at all.

48
00:02:51.110 --> 00:02:54.819
&gt;&gt; Brian Holt: So why that doesn't work
super well is if I have Daredevil at

49
00:02:54.819 --> 00:02:56.790
number one, right?

50
00:02:56.790 --> 00:02:58.070
And then I resort it and

51
00:02:58.070 --> 00:03:03.590
Daredevil is number five, that equality
check it's not gonna be the same, right?

52
00:03:03.590 --> 00:03:06.784
Furthermore it's gonna be bad because now
there's gonna be something else in number

53
00:03:06.784 --> 00:03:07.415
ones position.

54
00:03:07.415 --> 00:03:11.546
So there's no mapping from
the index to the object.

55
00:03:11.546 --> 00:03:17.640
So that's a poor key to use.

56
00:03:17.640 --> 00:03:20.657
&gt;&gt; Audience 1: Okay, first question is,
how long until the next break?

57
00:03:20.657 --> 00:03:24.005
Someone has to leave but
they want to wait till the next break.

58
00:03:24.005 --> 00:03:25.890
&gt;&gt; Brian Holt: [LAUGH] Give me 10 minutes.

59
00:03:25.890 --> 00:03:26.730
&gt;&gt; Audience 1: 10 minutes, okay great.

60
00:03:26.730 --> 00:03:31.420
Next question from Anton, this is a little
complicated so hopefully I'll get this.

61
00:03:31.420 --> 00:03:35.908
Is it a good idea to return the ShowCard
component in one line by using the arrow

62
00:03:35.908 --> 00:03:37.161
functions feature?

63
00:03:40.011 --> 00:03:41.470
&gt;&gt; Audience 1: The short
way of doing that?

64
00:03:41.470 --> 00:03:42.770
&gt;&gt; Brian Holt: Yeah, so

65
00:03:42.770 --> 00:03:48.350
what our friend is referring to,
is you can actually write this like this.

66
00:03:48.350 --> 00:03:48.850
Oops.

67
00:03:54.688 --> 00:03:58.180
&gt;&gt; Brian Holt: Is this okay?

68
00:03:58.180 --> 00:04:00.090
It's a little dense for my taste.

69
00:04:01.510 --> 00:04:05.670
But if you don't put curly
braces with arrow functions,

70
00:04:05.670 --> 00:04:06.910
there is an implicit return.

71
00:04:08.050 --> 00:04:09.260
So in this particular case,

72
00:04:09.260 --> 00:04:12.189
there's an implicit return
of show card as a component.

73
00:04:14.020 --> 00:04:14.670
Is that okay?

74
00:04:16.530 --> 00:04:19.800
Like I said, I feel it's just a little
dense for my taste, but it works.

75
00:04:22.570 --> 00:04:26.370
My mantra is always air on the side
of readability and maintainability.

76
00:04:26.370 --> 00:04:29.720
Because I wanna be able to look at this
and instantly understand what's going on.

77
00:04:29.720 --> 00:04:31.680
I don't have to unpack this in my mind.

78
00:04:31.680 --> 00:04:34.377
So I like arrow functions and
implicit returns.

79
00:04:34.377 --> 00:04:41.489
But just maybe not in this case cuz
I feel like this is too dense for me.

80
00:04:41.489 --> 00:04:45.115
&gt;&gt; Audience 1: Okay, they are asking
if you could recap the issue

81
00:04:45.115 --> 00:04:47.440
with key again please.

82
00:04:47.440 --> 00:04:47.940
&gt;&gt; Brian Holt: Yeah.

83
00:04:49.830 --> 00:04:54.550
So basically if we start rearranging
our ShowCards, we want React to

84
00:04:54.550 --> 00:04:58.190
very quickly be able to tell this
object and this object are the same.

85
00:04:58.190 --> 00:05:00.470
Despite the fact that before
this was index zero and

86
00:05:00.470 --> 00:05:02.880
next it was index ten, right?

87
00:05:02.880 --> 00:05:07.400
We want React to have a very quick way to
identify these two are the same object.

88
00:05:07.400 --> 00:05:10.350
So we basically say here's
a unique identifier.

89
00:05:10.350 --> 00:05:15.520
If you compare this and they're the same,
I guarantee you this is the same object.

90
00:05:15.520 --> 00:05:19.463
And so React is then able to do quick
comparisons to say, keep this DOM or

91
00:05:19.463 --> 00:05:20.730
don't keep this DOM.

92
00:05:21.980 --> 00:05:22.730
That's the gist.

93
00:05:26.087 --> 00:05:31.330
&gt;&gt; Audience 1: And the issue about using
just the index as opposed to an actual ID?

94
00:05:32.690 --> 00:05:35.600
&gt;&gt; Brian Holt: The reason you want to
do that is that if you start resorting

95
00:05:35.600 --> 00:05:38.760
things, their index is
not going to correlate.

96
00:05:38.760 --> 00:05:43.943
So if I have
&gt;&gt; Brian Holt: 'a',

97
00:05:43.943 --> 00:05:48.700
'b', 'c', right, and
all of a sudden I want to search.

98
00:05:48.700 --> 00:05:53.120
So this is going to be index zero.

99
00:05:53.120 --> 00:05:55.440
This is going to be index one and
this is going to be index two.

100
00:05:56.840 --> 00:06:00.882
On the next iteration I say hey
sort by reverse alphabetical order.

101
00:06:00.882 --> 00:06:07.203
This is going to be c, this is going
to be b, and this is going to be a.

102
00:06:09.589 --> 00:06:11.470
&gt;&gt; Brian Holt: And
those indexes still apply, right?

103
00:06:11.470 --> 00:06:13.790
On iteration one, a is zero, right?

104
00:06:13.790 --> 00:06:15.780
On the second iteration, c is zero.

105
00:06:15.780 --> 00:06:17.710
These are not the same strings.

106
00:06:17.710 --> 00:06:22.500
I need the key to always
correspond to the same object.

107
00:06:22.500 --> 00:06:24.810
So I need this a and
this a to be the same one.

108
00:06:25.830 --> 00:06:30.999
So that's why the key needs to be,
correspond to the same object always.

109
00:06:32.930 --> 00:06:35.860
&gt;&gt; Audience 1: Francois is having
an issue that their browser will not

110
00:06:36.930 --> 00:06:39.560
refresh if they are having
any linter errors.

111
00:06:40.690 --> 00:06:44.340
&gt;&gt; Brian Holt: Their browser won't refresh
if there's having any linter errors?

112
00:06:44.340 --> 00:06:46.240
The browser should refresh
if there's linter errors but

113
00:06:46.240 --> 00:06:49.960
if there's web pack errors,
Webpack won't build.

114
00:06:49.960 --> 00:06:54.015
And if web pack won't build then
you don't get any new code.

115
00:06:54.015 --> 00:06:56.570
You're stuck with the old code from
the last time you successively built.

116
00:06:57.890 --> 00:07:02.520
So my intuition tells me that that's not
a linter error, that's a Webpack error.

117
00:07:02.520 --> 00:07:05.550
Which means this is
probably a syntax error or

118
00:07:05.550 --> 00:07:08.030
something that basically Webpack
doesn't know how to build anymore.

119
00:07:08.030 --> 00:07:08.760
&gt;&gt; Audience 1: Yeah.

120
00:07:08.760 --> 00:07:11.659
They are saying they're seeing
a linter error in the browser.

121
00:07:13.516 --> 00:07:14.439
&gt;&gt; Brian Holt: That might happen.

122
00:07:22.952 --> 00:07:28.618
&gt;&gt; Brian Holt: All right, so
&gt;&gt; Brian Holt: I'm not,

123
00:07:28.618 --> 00:07:32.670
but I know it has the ability
to output those to the console.

124
00:07:33.690 --> 00:07:36.380
Which is a nice feature cuz then you
can see those errors in real time.

125
00:07:37.760 --> 00:07:42.850
&gt;&gt; Audience 1: Someone else is also saying
they got React prop types ES lint error.

126
00:07:42.850 --> 00:07:43.810
&gt;&gt; Brian Holt: Yeah I know,
I'm gonna fix those.

127
00:07:43.810 --> 00:07:45.040
&gt;&gt; Audience 1: Okay.

128
00:07:45.040 --> 00:07:48.580
&gt;&gt; Brian Holt: Let me go ahead and

129
00:07:48.580 --> 00:07:56.000
push up a new branch though.

130
00:07:57.271 --> 00:08:02.018
&gt;&gt; Audience 1: Donarte is asking if they
should call dumb components from inside

131
00:08:02.018 --> 00:08:04.450
other dumb components.

132
00:08:04.450 --> 00:08:06.920
Or use a smart component
to put everything together?

133
00:08:06.920 --> 00:08:11.040
&gt;&gt; Brian Holt: I don't know if
you can make that generalization.

134
00:08:11.040 --> 00:08:15.500
I'm assuming when they say smart or dumb,
that they're thinking stateless functional

135
00:08:15.500 --> 00:08:19.280
components versus reacts,
create class or something like that.

136
00:08:21.580 --> 00:08:22.550
My rule of thumb.

137
00:08:22.550 --> 00:08:25.070
And again I'll cover this tomorrow.

138
00:08:25.070 --> 00:08:29.790
Is use stateless functional components
when they fit and when they don't,

139
00:08:29.790 --> 00:08:32.060
use the other one you prefer.

