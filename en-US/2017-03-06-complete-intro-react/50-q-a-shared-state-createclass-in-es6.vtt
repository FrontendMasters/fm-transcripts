WEBVTT

1
00:00:00.660 --> 00:00:03.363
&gt;&gt; Brian Holt: So
I think we have one more thing to do, and

2
00:00:03.363 --> 00:00:06.160
then we're actually done coding our app.

3
00:00:06.160 --> 00:00:10.363
Our app will be complete, and
then we're gonna go back and refactor and

4
00:00:10.363 --> 00:00:11.354
include Redux.

5
00:00:15.226 --> 00:00:17.030
&gt;&gt; Brian Holt: So yeah, I'll finish this,
I'll push a new branch,

6
00:00:17.030 --> 00:00:18.570
and then I'll give you
a little bit of a break.

7
00:00:18.570 --> 00:00:19.804
And then we'll come back and do some more.

8
00:00:19.804 --> 00:00:20.461
&gt;&gt; Speaker 2: Question.

9
00:00:20.461 --> 00:00:21.260
&gt;&gt; Brian Holt: Sure.

10
00:00:21.260 --> 00:00:24.401
&gt;&gt; Speaker 2: Two questions, does this
pattern of passing down methods that

11
00:00:24.401 --> 00:00:27.530
modify state down components
happen a lot in React?

12
00:00:27.530 --> 00:00:30.291
&gt;&gt; Brian Holt: Everywhere,
all the time, extremely common.

13
00:00:30.291 --> 00:00:32.108
&gt;&gt; Speaker 2: Okay, Tom is asking,

14
00:00:32.108 --> 00:00:37.478
will createClass stay available
even when ES6 becomes default?

15
00:00:37.478 --> 00:00:40.044
&gt;&gt; Brian Holt: I think the answer
to that question is yes,

16
00:00:40.044 --> 00:00:44.770
because there's code bases like Netflix
where we use it everywhere, right?

17
00:00:44.770 --> 00:00:48.228
We use createClass,
we don't use the ES6 classes at all.

18
00:00:48.228 --> 00:00:50.283
And so as long as people like Netflix,

19
00:00:50.283 --> 00:00:52.991
where we can throw around
our weight a little bit.

20
00:00:52.991 --> 00:00:55.413
I think as long as we're around and
we keep doing it,

21
00:00:55.413 --> 00:00:57.350
they're gonna just keep supporting it.

22
00:00:57.350 --> 00:00:59.334
I think they were kind of
on the track to deprecate.

23
00:00:59.334 --> 00:01:02.123
A bunch of people were like,
woah, slow down, we like this.

24
00:01:02.123 --> 00:01:03.420
So just leave it in there.

25
00:01:04.440 --> 00:01:08.140
But at the same time,
the React library is getting bigger and

26
00:01:08.140 --> 00:01:09.210
it needs to get smaller.

27
00:01:09.210 --> 00:01:12.340
So there are certain things like
that that they could cut out.

28
00:01:12.340 --> 00:01:14.937
So suffice to say,
I don't see an end to it.

29
00:01:14.937 --> 00:01:16.350
They haven't announced an end to it.

30
00:01:17.640 --> 00:01:20.050
But they probably should settle on one.

31
00:01:20.050 --> 00:01:22.840
And if they're gonna settle on one,
it's probably gonna be ES6 classes.

32
00:01:22.840 --> 00:01:26.559
But that's years away, probably.

33
00:01:29.407 --> 00:01:30.417
&gt;&gt; Brian Holt: Good question.

34
00:01:30.417 --> 00:01:34.970
Other questions?

35
00:01:34.970 --> 00:01:37.674
Something that I definitely
will plug about React is,

36
00:01:37.674 --> 00:01:41.449
whenever they release kind of bigger,
quote unquote, breaking changes.

37
00:01:41.449 --> 00:01:43.759
I guess not quote unquote,
literally breaking changes.

38
00:01:45.000 --> 00:01:47.620
They generally ship a code mod with it so
that,

39
00:01:47.620 --> 00:01:49.740
I don't know if you're
familiar with code mods.

40
00:01:49.740 --> 00:01:56.000
But basically it's a AST transformer,
an abstract syntax tree transformer,

41
00:01:56.000 --> 00:01:59.660
that will transform your old
syntax into their new syntax.

42
00:01:59.660 --> 00:02:03.890
So it's an automatic refactor for you.

43
00:02:03.890 --> 00:02:07.310
And they're generally pretty awesome about
shipping those with every single release.

44
00:02:07.310 --> 00:02:10.210
Same thing with the React router
team is they're pretty good about

45
00:02:10.210 --> 00:02:12.280
including code mods with
all of their releases.

46
00:02:14.000 --> 00:02:16.882
So if something like that
where createClass went away,

47
00:02:16.882 --> 00:02:20.270
they would ship a code mod to
probably get you about 90% there.

48
00:02:20.270 --> 00:02:23.398
And the rest of the stuff you would
just have to slowly refactor out.

49
00:02:26.820 --> 00:02:27.982
&gt;&gt; Brian Holt: Code mods are amazing.

50
00:02:29.967 --> 00:02:33.510
&gt;&gt; Speaker 3: Is there a specific tool
you use to apply those to your code base?

51
00:02:33.510 --> 00:02:34.545
&gt;&gt; Brian Holt: Codemod.

52
00:02:34.545 --> 00:02:36.042
&gt;&gt; Speaker 3: Okay, there you go.

53
00:02:36.042 --> 00:02:40.480
&gt;&gt; Brian Holt: [LAUGH] Yeah no,
it's a tool from Facebook called Codemod.

54
00:02:48.556 --> 00:02:49.359
&gt;&gt; Brian Holt: Cool.

55
00:02:53.543 --> 00:02:57.160
&gt;&gt; Speaker 2: There is a question, but
I'm not quite sure I understand it.

56
00:02:57.160 --> 00:03:01.881
Denarte's asking, is there a limit
on passing down action to children?

57
00:03:04.896 --> 00:03:06.595
&gt;&gt; Speaker 2: Sorry, I got it.

58
00:03:06.595 --> 00:03:10.024
He or she means passing down functions.

59
00:03:11.790 --> 00:03:15.732
&gt;&gt; Brian Holt: I think the answer to that
question is you need to pass down as much

60
00:03:15.732 --> 00:03:17.274
as makes sense, right?

61
00:03:17.274 --> 00:03:23.827
There's no physical limitation,
there's no limit.

62
00:03:23.827 --> 00:03:27.549
But the simpler you can make
those interfaces, the better.

63
00:03:27.549 --> 00:03:32.419
So that's a really vague answer, but
it's kind of just do what's best for

64
00:03:32.419 --> 00:03:34.070
what the situation is.

65
00:03:34.070 --> 00:03:35.390
&gt;&gt; Speaker 2: I don't think
there is a limit per say.

66
00:03:35.390 --> 00:03:36.860
&gt;&gt; Brian Holt: No, there's no limit.

67
00:03:36.860 --> 00:03:38.226
&gt;&gt; Speaker 2: Right.
&gt;&gt; Brian Holt: Absolutely not, I mean,

68
00:03:38.226 --> 00:03:39.751
cuz it's really just an object, right?

69
00:03:39.751 --> 00:03:42.730
Is there a limit on how
big objects can be?

70
00:03:42.730 --> 00:03:44.650
Yes, but it's astronomically huge, so.

71
00:03:49.355 --> 00:03:52.650
&gt;&gt; Brian Holt: So hopefully that's
a sufficiently vague answer.

72
00:03:54.905 --> 00:03:58.698
&gt;&gt; Brian Holt: Okay, so.

73
00:04:00.602 --> 00:04:03.190
&gt;&gt; Brian Holt: Yeah,
we'll just, did I cut a branch?

74
00:04:03.190 --> 00:04:03.840
I did, didn't I?

75
00:04:03.840 --> 00:04:04.685
I did.

76
00:04:06.992 --> 00:04:12.529
&gt;&gt; Speaker 2: Is it possible to use
propTypes on stateless components?

77
00:04:12.529 --> 00:04:16.555
&gt;&gt; Brian Holt: Yes, same methodology
that you do it with a header.

78
00:04:18.685 --> 00:04:22.795
You declare the function, right, and
then you say function .propTypes = blah.

