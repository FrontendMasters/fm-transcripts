WEBVTT

1
00:00:00.450 --> 00:00:04.260
&gt;&gt; Brian Holt: Okay, so yeah,
going back to action creators.

2
00:00:05.670 --> 00:00:08.310
Yeah, and
then let's make it work in details.

3
00:00:10.470 --> 00:00:13.450
Okay, so
now we need to import connect at the top.

4
00:00:13.450 --> 00:00:20.829
Import { connect } from 'react-redux'.

5
00:00:24.424 --> 00:00:25.967
&gt;&gt; Brian Holt: And we also need to import

6
00:00:29.593 --> 00:00:32.920
&gt;&gt; Brian Holt: getOMDBDetails from

7
00:00:32.920 --> 00:00:37.359
'./actionCreators'.

8
00:00:43.480 --> 00:00:48.529
&gt;&gt; Brian Holt: Okay,
we're also gonna need func right there

9
00:00:48.529 --> 00:00:53.366
from PropTypes,
&gt;&gt; Brian Holt: And

10
00:00:53.366 --> 00:00:55.763
we're gonna need a couple
more prop types down here.

11
00:00:55.763 --> 00:01:01.444
We're gonna need an omdbData,
&gt;&gt; Brian Holt: One

12
00:01:01.444 --> 00:01:07.581
with a shape that includes imdbID: string

13
00:01:07.581 --> 00:01:12.874
as well as a dispatch which is a func.

14
00:01:20.506 --> 00:01:22.160
&gt;&gt; Brian Holt: We're gonna
drop getInitialState.

15
00:01:27.832 --> 00:01:30.170
&gt;&gt; Brian Holt: We're gonna drop
everything inside of componentDidMount.

16
00:01:32.440 --> 00:01:34.520
Instead, what we're gonna do is

17
00:01:36.480 --> 00:01:46.010
if this.props.omdbdata.imdbRating.

18
00:01:46.010 --> 00:01:50.620
So basically hey if I don't
already have information for

19
00:01:50.620 --> 00:01:53.510
the imdbrating that means I don't
have it yet back from the server.

20
00:01:53.510 --> 00:01:55.690
So you need to go ask for it.

21
00:01:55.690 --> 00:02:01.787
So what I'm gonna do here is I'm
gonna say this.props.dispatch,

22
00:02:01.787 --> 00:02:06.741
getOMDBDetails, with
this.props.show.imdbID.

23
00:02:12.767 --> 00:02:14.650
&gt;&gt; Brian Holt: Does that make sense?

24
00:02:14.650 --> 00:02:17.290
Because think of the use case, where
you go to the house of cards page and

25
00:02:17.290 --> 00:02:21.400
then go back to the search page, then
you go back to the house of cards again.

26
00:02:21.400 --> 00:02:23.264
You already have all that data in.

27
00:02:23.264 --> 00:02:27.431
So the second time you don't have to
request it because it's already going to

28
00:02:27.431 --> 00:02:29.242
be there the first time, right?

29
00:02:29.242 --> 00:02:32.623
Sorry, the second time.

30
00:02:32.623 --> 00:02:37.134
[LAUGH] We're probably coming on
a point for a coffee break for Brian

31
00:02:37.134 --> 00:02:40.296
&gt;&gt; Speaker 2: Could you circle back

32
00:02:40.296 --> 00:02:44.340
to the add omdbData again?

33
00:02:44.340 --> 00:02:45.815
&gt;&gt; Brian Holt: In the Action Creators?

34
00:02:45.815 --> 00:02:47.588
&gt;&gt; Speaker 2: No I think-
&gt;&gt; Brian Holt: Or in the reducers-

35
00:02:47.588 --> 00:02:49.512
&gt;&gt; Speaker 2: Yeah, reducer.

36
00:02:49.512 --> 00:02:54.561
Okay, so Amber's wondering if

37
00:02:54.561 --> 00:02:59.610
the signature is right on that.

38
00:03:03.170 --> 00:03:04.120
Amber, if you're listening,

39
00:03:04.120 --> 00:03:07.350
could you please,
tell which one you're talking about?

40
00:03:09.070 --> 00:03:10.960
&gt;&gt; Brian Holt: So
this is gonna be the newOMDBData, right?

41
00:03:10.960 --> 00:03:11.738
&gt;&gt; Speaker 2: Right.

42
00:03:11.738 --> 00:03:15.434
&gt;&gt; Brian Holt: Then we're going to merge
it infrom whatever we got back from

43
00:03:15.434 --> 00:03:16.020
the API.

44
00:03:16.020 --> 00:03:18.030
Then we're going to merge that
into the state object and

45
00:03:18.030 --> 00:03:19.630
we turn that as the new state.

46
00:03:19.630 --> 00:03:24.782
&gt;&gt; Speaker 2: Yeah, I think it
could be where you're calling that,

47
00:03:24.782 --> 00:03:27.807
not where you're defining it.

48
00:03:27.807 --> 00:03:30.090
You're calling it when you dispatch.

49
00:03:32.385 --> 00:03:36.400
&gt;&gt; Speaker 2: Which one?

50
00:03:36.400 --> 00:03:40.122
&gt;&gt; Brian Holt: In the Action Creators,
1.16 of Action Creators.

51
00:03:49.714 --> 00:03:51.931
&gt;&gt; Speaker 2: Yeah.
No, I see what they're saying.

52
00:03:51.931 --> 00:03:59.552
Yeah, this isn't supposed to be an object
&gt;&gt; Brian Holt: Yep,

53
00:03:59.552 --> 00:04:05.565
good catch, right, because this is just a
function, imdbID and omdbData right there.

54
00:04:08.398 --> 00:04:10.360
&gt;&gt; Brian Holt: Did someone else
point that out, originally?

55
00:04:10.360 --> 00:04:11.900
I just wasn't paying attention.

56
00:04:11.900 --> 00:04:14.856
I think so, I think the answer to that
is yes, someone else pointed it out.

57
00:04:17.119 --> 00:04:20.190
&gt;&gt; Speaker 2: Okay, so
we'll finish making this work, and

58
00:04:20.190 --> 00:04:24.932
before I get to the next section,
we'll take a coffee break for Brian.

59
00:04:24.932 --> 00:04:29.662
[LAUGH] Okay, so back to details.

60
00:04:33.722 --> 00:04:35.894
&gt;&gt; Speaker 2: So
if the data is not there request new data,

61
00:04:35.894 --> 00:04:38.259
if the data is there then
don't worry about it.

62
00:04:40.539 --> 00:04:44.829
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: The only thing we gotta

63
00:04:44.829 --> 00:04:50.770
change in render is rating now comes from,
&gt;&gt; Brian Holt: props,

64
00:04:50.770 --> 00:04:53.100
so I change both of those to props.

65
00:04:55.120 --> 00:04:58.490
So, if props at omdbid imdbRating.

66
00:04:58.490 --> 00:05:01.550
The rating is equal to this .props.

67
00:05:01.550 --> 00:05:03.166
So, these two right here have to change.

68
00:05:09.300 --> 00:05:13.001
&gt;&gt; Brian Holt: Okay, and
then, go down to the bottom.

69
00:05:15.732 --> 00:05:23.799
&gt;&gt; Brian Holt: And
we're going to say const mapStateToProps.

70
00:05:23.799 --> 00:05:29.400
State ownProps.

71
00:05:29.400 --> 00:05:32.180
So here's another little thing you can do.

72
00:05:32.180 --> 00:05:34.170
With mapStateToProps you can ask for

73
00:05:34.170 --> 00:05:39.924
a second parameter which is please give
me also the properties coming in for

74
00:05:39.924 --> 00:05:43.410
details, right.

75
00:05:43.410 --> 00:05:48.060
So details is also going to get imdbID,

76
00:05:48.060 --> 00:05:55.120
which I need to select the correct
show to provide to details, right?

77
00:05:55.120 --> 00:05:59.950
So this is just saying that please
give me in addition to the state of

78
00:05:59.950 --> 00:06:04.950
the reduct store, give me the props for
the react component.

79
00:06:04.950 --> 00:06:07.000
And that's what these own props are.

80
00:06:07.000 --> 00:06:08.760
Does that make sense?

81
00:06:10.020 --> 00:06:11.740
These are the props for
the react component.

82
00:06:16.070 --> 00:06:19.322
So const omdbData =

83
00:06:19.322 --> 00:06:27.744
state.omdbData[ownProps.show.imdbID] and

84
00:06:27.744 --> 00:06:33.107
then we're gonna do a turn area.

85
00:06:34.975 --> 00:06:39.167
&gt;&gt; Brian Holt: So a turn area is just a
really short way of doing a if statement,

86
00:06:39.167 --> 00:06:40.760
inside of JavaScript.

87
00:06:42.470 --> 00:06:48.385
So basically it's saying, if the
state.omdbDate exists, then give me that.

88
00:06:48.385 --> 00:06:54.220
Otherwise give me, I think it empty
object here, it's just empty objects.

89
00:06:56.840 --> 00:07:00.860
So if this first part is true,
then give me the first thing.

90
00:07:00.860 --> 00:07:05.220
If the first part here is false,
then give me the second part.

91
00:07:08.150 --> 00:07:08.726
You okay with that?

92
00:07:11.158 --> 00:07:15.441
&gt;&gt; Brian Holt: So you could totally write
this as an if statement if you wanted to.

93
00:07:15.441 --> 00:07:19.514
So if that,
&gt;&gt; Brian Holt: Then

94
00:07:19.514 --> 00:07:23.943
omdbData is equal to that, else,

95
00:07:23.943 --> 00:07:28.080
omdbData equals empty object.

96
00:07:32.370 --> 00:07:37.470
Well, I'll leave that up for a second,
but this little part right here and

97
00:07:37.470 --> 00:07:41.020
these lines right here do the same thing.

98
00:07:41.020 --> 00:07:43.973
&gt;&gt; Speaker 2: Looks like
you have a typo in 55.

99
00:07:43.973 --> 00:07:46.386
imdb should be imdbID.

100
00:07:46.386 --> 00:07:47.036
&gt;&gt; Brian Holt: Yep.

101
00:08:02.814 --> 00:08:05.826
&gt;&gt; Brian Holt: Yep, so
I'll just leave that commented out,

102
00:08:05.826 --> 00:08:07.687
if you wanna hold onto that.

103
00:08:11.586 --> 00:08:16.734
&gt;&gt; Brian Holt: Okay, and then we just need
to return an object of that omdbData.

104
00:08:24.985 --> 00:08:28.716
&gt;&gt; Speaker 2: Question, if you access
getState in the action creator is it

105
00:08:28.716 --> 00:08:32.756
possible to keep that logic there and
keep the component simple?

106
00:08:35.455 --> 00:08:39.297
&gt;&gt; Brian Holt: The answer is
you would have to restructure,

107
00:08:39.297 --> 00:08:42.641
I'm sure that you can get that to work.

108
00:08:42.641 --> 00:08:46.490
But the answer is, we're not always
going to call that action, right?

109
00:08:46.490 --> 00:08:50.076
Because on the second time,
we don't wanna call

110
00:08:50.076 --> 00:08:54.893
that action because we don't want
to request again from the API.

111
00:08:57.549 --> 00:08:58.671
&gt;&gt; Speaker 2: Broader question,

112
00:08:58.671 --> 00:09:02.990
can Redux be used to maintain data that
needs to be periodically refreshed?

113
00:09:02.990 --> 00:09:05.330
Like, for example, stock prices?

114
00:09:05.330 --> 00:09:07.800
In other words,
is there some kind of built-in support for

115
00:09:07.800 --> 00:09:11.479
calling the function like OMDBDetails
automatically every n minutes?

116
00:09:12.930 --> 00:09:14.490
&gt;&gt; Brian Holt: I mean,
there's JavaScript setInterval.

117
00:09:14.490 --> 00:09:18.174
[LAUGH] So no,
there's no periodic refresh.

118
00:09:18.174 --> 00:09:20.094
&gt;&gt; Speaker 2: No built in sort of thing,
right.

119
00:09:20.094 --> 00:09:21.510
&gt;&gt; Brian Holt: There's
nothing special there.

120
00:09:24.960 --> 00:09:30.256
I would probably use something like, Redux
observable would be a really good fit for

121
00:09:30.256 --> 00:09:33.400
that, because that does
periodics really well.

122
00:09:37.699 --> 00:09:42.549
&gt;&gt; Brian Holt: Okay, last thing, before I
forget, we're gonna do connect down here,

123
00:09:42.549 --> 00:09:48.276
connect()(Details),
&gt;&gt; Brian Holt: And

124
00:09:48.276 --> 00:09:50.346
we need to give it mapStateToProps.

125
00:09:58.562 --> 00:10:00.009
&gt;&gt; Brian Holt: Okay, so
let's go make sure this works.

126
00:10:00.009 --> 00:10:01.760
After that I'll push a branch.

127
00:10:05.080 --> 00:10:06.810
Get rid of that, refresh.

128
00:10:08.320 --> 00:10:12.639
Okay, so
now we're gonna go to House of Cards.

129
00:10:14.775 --> 00:10:16.980
&gt;&gt; Brian Holt: Notice
that this still shows up.

130
00:10:16.980 --> 00:10:18.058
But here's the beautiful part.

131
00:10:18.058 --> 00:10:20.170
If we're gonna watch
the Network tab down here.

132
00:10:22.550 --> 00:10:28.190
Network, just refresh that so
you can see what actually happens.

133
00:10:28.190 --> 00:10:31.030
So you can see this GET here
from the 304 right there.

134
00:10:34.220 --> 00:10:41.174
Now if I go back, and I click it
again it doesn't re-request it again.

135
00:10:41.174 --> 00:10:45.310
Whereas if I go to Daredevil,
I'll get another request down there.

136
00:10:45.310 --> 00:10:47.885
So that's the compelling
part here is that we're not

137
00:10:47.885 --> 00:10:49.800
re-requesting that data every single time.

138
00:10:49.800 --> 00:10:51.320
It's now built into our store.

139
00:10:51.320 --> 00:10:55.479
In fact if you want to see
that let's just bring that up

140
00:11:06.350 --> 00:11:12.346
&gt;&gt; Brian Holt: Where is our redux?

141
00:11:12.346 --> 00:11:14.450
My dev tools are having a hard time today.

142
00:11:14.450 --> 00:11:18.210
But you can actually look inside of the
Redux dev tools and you can see the state,

143
00:11:18.210 --> 00:11:20.990
and you can see all of these shows
being stored inside of Redux.

144
00:11:23.970 --> 00:11:28.210
We're now officially done writing
app code, just so you know.

145
00:11:28.210 --> 00:11:34.380
That's the complete introduction to
the client side react, client side Redux.

146
00:11:34.380 --> 00:11:38.780
You are well equipped to go out and
write like Netflix style apps.

147
00:11:38.780 --> 00:11:40.530
We don't really use much more than that.

148
00:11:41.710 --> 00:11:44.801
So you can pretty well build just about

149
00:11:44.801 --> 00:11:49.251
anything with the tools I've
showed you today so far.

150
00:11:49.251 --> 00:11:51.661
We're gonna do a little
bit more with testing,

151
00:11:51.661 --> 00:11:54.530
cuz we broke all of our
tests in the process.

152
00:11:54.530 --> 00:11:55.960
Go team.

153
00:11:55.960 --> 00:12:00.350
And so we're gonna do that,
we're gonna do universal rendering, so

154
00:12:00.350 --> 00:12:02.950
rendering our app with node.

155
00:12:04.100 --> 00:12:08.540
We're gonna do chunking with webpack.

156
00:12:08.540 --> 00:12:13.512
And then we're gonna do a little
fun experiment at the end to

157
00:12:13.512 --> 00:12:18.989
greatly reduce our file size with Preact,
but we'll get there.

158
00:12:18.989 --> 00:12:20.030
Did you have any questions?

