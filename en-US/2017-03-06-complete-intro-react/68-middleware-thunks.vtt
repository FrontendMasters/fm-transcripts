WEBVTT

1
00:00:00.200 --> 00:00:02.800
&gt;&gt; Brian Holt: So,
let's talk about async redux now.

2
00:00:02.800 --> 00:00:08.250
So, I've shown you, like,
top to bottom, like that is core redux.

3
00:00:08.250 --> 00:00:12.550
Redux doesn't really do much else,
in terms of redux itself.

4
00:00:14.220 --> 00:00:16.640
Like I said, it's a pretty small library.

5
00:00:16.640 --> 00:00:18.510
It carries a lot of overhead with it.

6
00:00:18.510 --> 00:00:21.270
And, like, now that you've seen it,
I hope that you see the value in it,

7
00:00:21.270 --> 00:00:24.340
because I've shown you
a really poor use case for it.

8
00:00:24.340 --> 00:00:27.280
A small application like this
has no business using redux.

9
00:00:28.580 --> 00:00:32.118
However, I hope if you see if you have
a huge app the central source of truth is

10
00:00:32.118 --> 00:00:33.130
a good thing to have.

11
00:00:36.520 --> 00:00:40.960
&gt;&gt; Brian Holt: So,
actions in redux are synchronous.

12
00:00:40.960 --> 00:00:45.980
Always, 100%, unless you modify redux
in some way to make it not synchronous.

13
00:00:45.980 --> 00:00:49.490
But by default,
with the way that redux comes today,

14
00:00:49.490 --> 00:00:53.400
with no other add-ons,
it's a synchronous experience.

15
00:00:53.400 --> 00:00:55.569
And there's no real way
to make it asynchronous.

16
00:00:56.980 --> 00:01:00.650
So let's go look at details real quick.

17
00:01:01.900 --> 00:01:07.340
So right now in componentDidMount
we do our axios call inside

18
00:01:08.400 --> 00:01:12.470
of details to get the information
that we need, right?

19
00:01:15.650 --> 00:01:18.210
Well, now that we have redux,
it would be better.

20
00:01:18.210 --> 00:01:21.330
Someone pointed out earlier that
if we go to house of cards,

21
00:01:21.330 --> 00:01:24.540
go back to the search page, and
then we go back to house of cards.

22
00:01:24.540 --> 00:01:26.830
We re-request it, right?

23
00:01:26.830 --> 00:01:30.820
But if we made that data live in redux,
we would not get that problem.

24
00:01:30.820 --> 00:01:34.700
Because redux lives beyond
those page navigations.

25
00:01:37.180 --> 00:01:38.820
So how do we do that?

26
00:01:38.820 --> 00:01:43.900
Well, answer one is what we could do is
we could leave everything the way it is.

27
00:01:43.900 --> 00:01:49.090
And instead of calling setState
here in the then from axios,

28
00:01:49.090 --> 00:01:53.667
well, what we could do instead,
is we could just call

29
00:01:53.667 --> 00:01:58.064
dispatch inside of the then
statement right here.

30
00:01:58.064 --> 00:01:59.790
I'm not really satisfied with that answer.

31
00:01:59.790 --> 00:02:03.610
I feel like that's kind of a data fetching
problem to hydrate what's in redux, and

32
00:02:03.610 --> 00:02:06.860
I feel like that should live
with the action creators, right?

33
00:02:06.860 --> 00:02:10.410
They should live within
redux not live in react.

34
00:02:10.410 --> 00:02:13.021
React should be more worried
about user interface stuff.

35
00:02:13.021 --> 00:02:17.150
All the data fetching should live within
redux if we're going to have redux, right?

36
00:02:17.150 --> 00:02:22.192
This is fine if all you have is react,
this is not fine if you have redux.

37
00:02:22.192 --> 00:02:22.814
Does that make sense?

38
00:02:22.814 --> 00:02:24.086
Do we follow?

39
00:02:24.086 --> 00:02:28.583
Okay,
&gt;&gt; Brian Holt: So there are several ways

40
00:02:28.583 --> 00:02:34.210
of making redux handle asynchronous action
by pulling in what are called middleware.

41
00:02:34.210 --> 00:02:37.290
Middleware is just augmenting
the ability of what redux can do.

42
00:02:38.440 --> 00:02:44.469
Right now, like I said, redux, all you
can do is dispatch actions, that's it.

43
00:02:45.700 --> 00:02:47.710
By adding a middleware you can make it so

44
00:02:47.710 --> 00:02:51.510
redux, you can dispatch other things
to redux besides just actions.

45
00:02:52.820 --> 00:02:56.690
There's redux promise,
where you can dispatch promises.

46
00:02:56.690 --> 00:02:59.300
There's redux observable where you

47
00:02:59.300 --> 00:03:02.350
can dispatch observables
written in Netflix, go team.

48
00:03:03.780 --> 00:03:07.440
There's also redux thunk where
you can dispatch functions.

49
00:03:08.540 --> 00:03:10.060
We're going to use redux thunk today,

50
00:03:10.060 --> 00:03:12.830
because that is definitely
easiest one to use.

51
00:03:14.000 --> 00:03:17.588
Thunk is another one of those stupid
computer science terms that sounds

52
00:03:17.588 --> 00:03:20.828
really complicated and
it's way simpler that actually seems.

53
00:03:20.828 --> 00:03:22.418
&gt;&gt; Speaker 2: Another Kyle Simpson gem.

54
00:03:22.418 --> 00:03:24.602
&gt;&gt; Brian Holt: Yeah He's fantastic,

55
00:03:24.602 --> 00:03:27.986
you should take his async-
&gt;&gt; Speaker 3: Rehinking

56
00:03:27.986 --> 00:03:30.640
asynchronous programming?

57
00:03:30.640 --> 00:03:32.880
&gt;&gt; Brian Holt: It's a fantastic class.

58
00:03:32.880 --> 00:03:36.090
&gt;&gt; Speaker 2: Question, more of an aside.

59
00:03:36.090 --> 00:03:41.276
Does Netflix use something like redis or
memcached between react and a database?

60
00:03:41.276 --> 00:03:44.810
&gt;&gt; Brian Holt: I'm sure the answer
to that question is yes.

61
00:03:44.810 --> 00:03:49.390
So my team doesn't directly deal
with those layers of caching.

62
00:03:49.390 --> 00:03:52.113
But there's so many teams at Netflix
using so many different ways of

63
00:03:52.113 --> 00:03:55.043
caching that I'm sure someone somewhere
is using both of those things.

64
00:03:57.666 --> 00:04:00.243
&gt;&gt; Brian Holt: We use a lot
of Cassandra specifically for

65
00:04:00.243 --> 00:04:04.300
those types of things, but
I'm sure we use other things as well.

66
00:04:08.389 --> 00:04:11.480
&gt;&gt; Brian Holt: So
let's talk about what a thunk is.

67
00:04:11.480 --> 00:04:13.370
I think the best way to
talk about thunks is for

68
00:04:13.370 --> 00:04:16.020
me to just show you here in the console.

69
00:04:19.950 --> 00:04:21.294
&gt;&gt; Brian Holt: Okay, clear.

70
00:04:23.084 --> 00:04:27.364
&gt;&gt; Brian Holt: Okay, so if I have const

71
00:04:27.364 --> 00:04:31.866
dollars = 10, okay?

72
00:04:31.866 --> 00:04:39.915
I have const conversionRate = 1.1.

73
00:04:39.915 --> 00:04:41.127
I'm making it up.

74
00:04:41.127 --> 00:04:45.351
I have no idea what the conversion rate
right now is for the dollar to the euro.

75
00:04:45.351 --> 00:04:52.177
And I say const euros =
dollars * conversionRate.

76
00:04:55.088 --> 00:04:59.995
&gt;&gt; Brian Holt: Now I have
the value of euros, 11, okay?

77
00:04:59.995 --> 00:05:01.800
Pretty straightforward so far.

78
00:05:03.560 --> 00:05:07.100
The problem is that with this abstract and
pointless example,

79
00:05:07.100 --> 00:05:11.654
Is that conversion rate is now set,
cuz I made it a const, right, it's 1.1.

80
00:05:11.654 --> 00:05:16.727
And every time I call that same formula,
&gt;&gt; Brian Holt: Dollars

81
00:05:16.727 --> 00:05:22.616
* conversionRate, dollars,
we get the same answer,

82
00:05:22.616 --> 00:05:28.150
and conversionRate can't fluctuate, right?

83
00:05:28.150 --> 00:05:31.016
But let's say I have access to
the conversion rate in real time, and

84
00:05:31.016 --> 00:05:32.939
I wanna be able to make
it update in real time.

85
00:05:32.939 --> 00:05:38.410
This abstraction falls apart because
I can't modify conversionRate.

86
00:05:38.410 --> 00:05:41.290
So wouldn't it be great if
conversionRate was some sort of

87
00:05:41.290 --> 00:05:44.250
thing that could fluctuate along with it?

88
00:05:44.250 --> 00:05:48.630
Well I can make conversionRate equal to

89
00:05:48.630 --> 00:05:53.281
a function that returns 1.1, right?

90
00:05:56.152 --> 00:06:01.365
&gt;&gt; Brian Holt: Well
&gt;&gt; Brian Holt: Fine, two.

91
00:06:04.584 --> 00:06:09.685
&gt;&gt; Brian Holt: So now I can call
dollars * conversionRate2() and

92
00:06:09.685 --> 00:06:11.960
invoke that function.

93
00:06:13.010 --> 00:06:17.686
So conversionRate2() is just
wrapping that value in a function.

94
00:06:17.686 --> 00:06:21.680
But now, conversionRate2() is this black
box that I can modify behind the scenes.

95
00:06:21.680 --> 00:06:25.339
Because if that's determined when I call
it, it's not determined when I define it.

96
00:06:25.339 --> 00:06:28.464
Does that make sense, that very small but

97
00:06:28.464 --> 00:06:33.980
important difference,
it's where that value is determined.

98
00:06:33.980 --> 00:06:37.840
ConversionRate2 is determined
when I call the function,

99
00:06:37.840 --> 00:06:42.479
whereas conversionRate1 is determined
when I created the variable.

100
00:06:44.400 --> 00:06:46.947
This is a very arbitrary
example that doesn't make a ton

101
00:06:46.947 --> 00:06:48.361
of sense in devtools, right?

102
00:06:48.361 --> 00:06:51.080
Cuz, well, whatever, you can just go
back and redefine it right there, right?

103
00:06:53.170 --> 00:06:56.920
But my point is is that
when it's determined,

104
00:06:56.920 --> 00:07:00.584
this is where 1.1 is determined, right?

105
00:07:00.584 --> 00:07:03.360
Because this is when that
function expression gets called.

106
00:07:03.360 --> 00:07:07.814
Whereas this one is determined up
here when I actually set const

107
00:07:07.814 --> 00:07:09.850
conversionRate = 1.1.

108
00:07:09.850 --> 00:07:12.810
This is called a thunk.

109
00:07:12.810 --> 00:07:16.060
This is a function that kind
of represents a value, right.

110
00:07:16.060 --> 00:07:19.051
And so, it can get determined,
quote unquote, lazily.

111
00:07:19.051 --> 00:07:23.850
It can get determined at a later point,
as opposed to essentially at compile time.

112
00:07:25.719 --> 00:07:27.032
&gt;&gt; Brian Holt: So
that's really all this is.

113
00:07:27.032 --> 00:07:28.808
That's all that a thunk is.

114
00:07:28.808 --> 00:07:33.230
It's basically just a function that allows
you to do things later, instead of now.

115
00:07:34.650 --> 00:07:37.550
So giving redux the ability
to understand thunks,

116
00:07:37.550 --> 00:07:40.740
you're basically saying, hey,
I need to determine something later.

117
00:07:40.740 --> 00:07:42.170
I don't wanna determine it now.

118
00:07:42.170 --> 00:07:46.774
And what's great about that is I can
make those later things be asynchronous,

119
00:07:46.774 --> 00:07:51.112
rather than being now, which is like
a synchronous here's your action.

120
00:07:51.112 --> 00:07:55.350
I wanna say, okay, here's a function,
call the function, and

121
00:07:55.350 --> 00:08:00.370
then some time the function is gonna
call you back and say something changed.

122
00:08:01.770 --> 00:08:05.950
If you wanna learn more about thunks and
other things like that, I would definitely

123
00:08:05.950 --> 00:08:09.490
again suggest the Frontend Masters,
Kyle Simpson, course on async.

