WEBVTT

1
00:00:00.620 --> 00:00:03.780
&gt;&gt; Brian Holt: Okay, so
we fixed our tests for React.

2
00:00:03.780 --> 00:00:08.647
Everything's good now.
&gt;&gt; Brian Holt: We're going to go

3
00:00:08.647 --> 00:00:12.995
to reducers now, and
we're going to test our reducers.

4
00:00:12.995 --> 00:00:17.415
Which I promise is much more pleasant, so

5
00:00:17.415 --> 00:00:24.581
reducers.spec.js.
&gt;&gt; Brian Holt: So

6
00:00:24.581 --> 00:00:30.406
one of the biggest advantages of using
Redux, if not the biggest advantage for

7
00:00:30.406 --> 00:00:34.210
using Redux,
is reducers are stupid easy to test.

8
00:00:34.210 --> 00:00:38.605
Because of the way that they work, they're
designed to be incredibly testable,

9
00:00:38.605 --> 00:00:40.524
which is awesome.

10
00:00:40.524 --> 00:00:41.820
They are fact so

11
00:00:41.820 --> 00:00:46.300
easy to test that the dev tools will
automatically generate tests for you.

12
00:00:46.300 --> 00:00:47.638
So we don't even have to write them,

13
00:00:47.638 --> 00:00:51.668
they're that easy to write.
&gt;&gt; Brian Holt: So,

14
00:00:52.948 --> 00:00:54.913
&gt;&gt; Brian Holt: What I want you to do is

15
00:00:54.913 --> 00:00:59.717
I want you to go to your app here,
and I need to run it,

16
00:00:59.717 --> 00:01:05.106
npm run dev.
&gt;&gt; Brian Holt: Okay,

17
00:01:05.106 --> 00:01:10.450
refresh the page.
&gt;&gt; Brian Holt: What I want you to

18
00:01:10.450 --> 00:01:16.025
do is I'm just gonna paste house in here.
&gt;&gt; Brian Holt: Okay,

19
00:01:16.025 --> 00:01:18.730
I'm gonna paste house in here.

20
00:01:19.730 --> 00:01:20.700
I'll refresh the page.

21
00:01:22.150 --> 00:01:25.880
Okay, so that was one atomic action.

22
00:01:25.880 --> 00:01:28.860
Went from nothing to having house, right?

23
00:01:28.860 --> 00:01:33.372
I can click on this right here,
&gt;&gt; Brian Holt: And

24
00:01:33.372 --> 00:01:37.790
see where it says Action,
State, Diff, and Test?

25
00:01:37.790 --> 00:01:42.544
Click on test,
&gt;&gt; Brian Holt: And it wrote a test for

26
00:01:42.544 --> 00:01:45.962
you.
&gt;&gt; Brian Holt: And

27
00:01:45.962 --> 00:01:49.190
you can also get this in Jest,
Mocha, Tape, or AVA.

28
00:01:50.490 --> 00:01:53.300
Since we're in Jest,
we're just gonna keep doing that.

29
00:01:53.300 --> 00:01:59.475
So I'm just going to copy,
&gt;&gt; Brian Holt: Paste.

30
00:01:59.475 --> 00:02:03.310
Let's get the, this path is wrong,

31
00:02:03.310 --> 00:02:10.188
./reducers.
&gt;&gt; Brian Holt: Bam, just wrote

32
00:02:10.188 --> 00:02:17.035
a test.
&gt;&gt; Brian Holt: There's

33
00:02:17.035 --> 00:02:19.698
one unforgivable thing
that this test has though,

34
00:02:22.569 --> 00:02:25.063
&gt;&gt; Brian Holt: Semi colons.

35
00:02:25.063 --> 00:02:32.939
[LAUGH]
&gt;&gt; Brian Holt: Yeah,

36
00:02:32.939 --> 00:02:35.810
I think there's a couple things
you have to fix in here so

37
00:02:35.810 --> 00:02:42.085
that it'll pass lint.
&gt;&gt; Brian Holt: Spaces,

38
00:02:53.660 --> 00:02:54.900
&gt;&gt; Brian Holt: Okay, I think that'll pass

39
00:02:54.900 --> 00:02:58.896
lint now
&gt;&gt; Brian Holt: So

40
00:02:58.896 --> 00:03:04.070
now if we run tests again,
&gt;&gt; Brian Holt: npm run

41
00:03:04.070 --> 00:03:10.186
test,
&gt;&gt; Brian Holt: Now we have four tests.

42
00:03:14.900 --> 00:03:17.343
&gt;&gt; Brian Holt: Another good one to run, so

43
00:03:17.343 --> 00:03:23.380
if I come back here to my,
&gt;&gt; Brian Holt: Dev tools, I click init.

44
00:03:25.240 --> 00:03:28.671
When your Redux store is starting up,

45
00:03:28.671 --> 00:03:33.588
it sends off this init action.
&gt;&gt; Brian Holt: Which

46
00:03:33.588 --> 00:03:37.542
is why it's important that you provide for
actions that you don't recognize, and

47
00:03:37.542 --> 00:03:40.800
it's also important that
you have a default state.

48
00:03:40.800 --> 00:03:42.063
And you can also write a test for

49
00:03:42.063 --> 00:03:47.355
it by clicking on this init.
&gt;&gt; Brian Holt: And

50
00:03:47.355 --> 00:03:50.745
grab the test,
&gt;&gt; Brian Holt: And

51
00:03:50.745 --> 00:03:58.616
that's another good one to have too.
&gt;&gt; Brian Holt: So I usually name these

52
00:03:58.616 --> 00:04:03.919
after the actions that they're testing.
&gt;&gt; Brian Holt: This was,

53
00:04:08.901 --> 00:04:10.032
&gt;&gt; Brian Holt: Set search term.

54
00:04:27.945 --> 00:04:28.536
&gt;&gt; Brian Holt: Okay.

55
00:04:33.611 --> 00:04:34.531
&gt;&gt; Brian Holt: But I mean, even look at

56
00:04:34.531 --> 00:04:35.825
these tests real quick, right.

57
00:04:35.825 --> 00:04:40.795
So you pull in a reducer,
&gt;&gt; Brian Holt: So a reducer,

58
00:04:40.795 --> 00:04:44.495
this is actually the root reducer
that it's pulling in, right?

59
00:04:44.495 --> 00:04:48.390
It's then dispatching a random
looking test to it, right?

60
00:04:48.390 --> 00:04:50.623
Some, or semi-random looking test, but

61
00:04:50.623 --> 00:04:53.122
this is the state that
it's dispatching to it.

62
00:04:53.122 --> 00:04:57.128
And then it's expecting to get
back a state that looks like

63
00:04:57.128 --> 00:05:00.797
that.
&gt;&gt; Brian Holt: So

64
00:05:00.797 --> 00:05:05.270
that's the nice thing about these reducers
is because there's no state with them.

65
00:05:05.270 --> 00:05:07.340
So it is just input output, and

66
00:05:07.340 --> 00:05:11.370
you don't have to worry about anything
in the middle, it's a total black box.

67
00:05:15.300 --> 00:05:16.070
Any questions about that?

68
00:05:16.070 --> 00:05:20.852
That make sense?
&gt;&gt; Brian Holt: If you want to, you can go

69
00:05:20.852 --> 00:05:27.126
and grab one for details as well.
&gt;&gt; Brian Holt: I need to run dev again.

70
00:05:45.770 --> 00:05:46.305
&gt;&gt; Brian Holt: This is one

71
00:05:46.305 --> 00:05:50.348
will be a little bit longer, but, right,
cuz this is everything that comes back

72
00:05:50.348 --> 00:05:54.554
from the API.
&gt;&gt; Brian Holt: But nonetheless,

73
00:05:54.554 --> 00:06:03.526
ADD_OMDB_DATA, and there it is.
&gt;&gt; Brian Holt: So

74
00:06:03.526 --> 00:06:05.940
I'm not gonna fix this,
cuz this definitely would not pass lint.

75
00:06:05.940 --> 00:06:08.963
Cuz standard like spaces
between all those things, and

76
00:06:08.963 --> 00:06:11.350
I'm way too lazy to go
do all that right now.

77
00:06:11.350 --> 00:06:14.110
But, that's how you would do it.

78
00:06:14.110 --> 00:06:16.957
And so now,
I want to get rid of that import as well,

79
00:06:16.957 --> 00:06:22.324
cuz you don't need that.
&gt;&gt; Brian Holt: If I

80
00:06:22.324 --> 00:06:28.675
do npm run test,
&gt;&gt; Brian Holt: Six tests,

81
00:06:28.675 --> 00:06:31.330
and I barely wrote any of them [LAUGH].

82
00:06:31.330 --> 00:06:34.006
Four of them,
the computer essentially wrote for me, so

83
00:06:34.006 --> 00:06:38.048
that's pretty great.
&gt;&gt; Brian Holt: Any

84
00:06:38.048 --> 00:06:40.735
questions?
&gt;&gt; Brian Holt: So

85
00:06:40.735 --> 00:06:43.560
typically you test the hell
out of your reducers.

86
00:06:43.560 --> 00:06:47.460
For every reducer you have you should
have a test, that's definitely a thing.

87
00:06:48.760 --> 00:06:53.760
You can test your action creators,
specifically the ones that if I

88
00:06:53.760 --> 00:06:58.680
pass it a search term like this,
I should get back an object like that.

89
00:06:58.680 --> 00:07:01.626
That's a pretty easy test to write,
but a pretty important one.

90
00:07:01.626 --> 00:07:06.923
The async,
like thunk action creators are a lot

91
00:07:06.923 --> 00:07:12.389
more difficult to test.
&gt;&gt; Brian Holt: It can be done,

92
00:07:12.389 --> 00:07:15.580
I just typically don't
to be totally honest.

93
00:07:15.580 --> 00:07:18.346
I'm more interested in the reducers, but-
&gt;&gt; Speaker 2: Functs

94
00:07:18.346 --> 00:07:21.175
should be pretty benign.

95
00:07:21.175 --> 00:07:24.871
I mean, it's just a function standing
in place of a value, usually.

96
00:07:24.871 --> 00:07:26.930
There shouldn't be a whole
lot of logic to test in them.

97
00:07:26.930 --> 00:07:27.614
&gt;&gt; Brian Holt: Sure, but,

98
00:07:27.614 --> 00:07:31.602
I mean, for example, our thunk calls
axios, right, which is gonna try and

99
00:07:31.602 --> 00:07:33.600
make an HTTP request.
&gt;&gt; Speaker 2: Right, but you wouldn't want

100
00:07:33.600 --> 00:07:37.330
to unit test that anyway.
&gt;&gt; Brian Holt: Right, I mean,

101
00:07:37.330 --> 00:07:38.190
I don't, right?
&gt;&gt; Speaker 2: [LAUGH]

102
00:07:38.190 --> 00:07:40.100
&gt;&gt; Brian Holt: But some people are intent

103
00:07:40.100 --> 00:07:41.670
on having 100% coverage.

104
00:07:41.670 --> 00:07:43.728
So it can be tested,

105
00:07:43.728 --> 00:07:49.460
it's just un-fun to test.
&gt;&gt; Speaker 2: Seems

106
00:07:49.460 --> 00:07:52.420
to having a slight
problem with their stuff.

107
00:07:52.420 --> 00:07:56.040
They're using jsx, I don't know.
&gt;&gt; Brian Holt: Jsx,

108
00:07:56.040 --> 00:07:58.210
like the file extension?
&gt;&gt; Speaker 2: Yeah.

109
00:07:58.210 --> 00:07:58.990
&gt;&gt; Brian Holt: So I don't

110
00:07:58.990 --> 00:08:01.969
think Jest automatically
picks up jsx file extensions.

111
00:08:03.220 --> 00:08:07.390
So first of all, if you just change
it to be js, it should just work.

112
00:08:07.390 --> 00:08:13.280
Otherwise you can configure Jest, and
I leave you to do that on your own terms.

