WEBVTT

1
00:00:00.270 --> 00:00:02.560
&gt;&gt; Brian Holt: So go over to ClientApp.js.

2
00:00:02.560 --> 00:00:05.820
We're gonna get rid of
all this stuff up here.

3
00:00:07.270 --> 00:00:11.903
So get rid of all the MyTitle
stuff cuz we're gonna import that.

4
00:00:11.903 --> 00:00:16.119
And then get rid of the h1 cuz
you don't need that either.

5
00:00:16.119 --> 00:00:24.115
And what we're gonna do up here is we're
gonna say import React from 'react',

6
00:00:24.115 --> 00:00:28.122
import ReactDOM from 'react-dom'.

7
00:00:28.122 --> 00:00:36.243
And import MyTitle from ./MyTitle.
&gt;&gt; Speaker 2: Brian.

8
00:00:36.243 --> 00:00:36.931
&gt;&gt; Brian Holt: Yeah.

9
00:00:36.931 --> 00:00:38.295
&gt;&gt; Speaker 2: We have a question about if

10
00:00:38.295 --> 00:00:42.574
you could explain the difference between
react and, excuse me, require and

11
00:00:42.574 --> 00:00:44.640
import.
&gt;&gt; Brian Holt: I mean,

12
00:00:44.640 --> 00:00:47.400
there are a bunch of fine
differences between the two.

13
00:00:48.790 --> 00:00:53.902
Particularly one is EF6 is static and

14
00:00:53.902 --> 00:00:56.945
CommonJS is dynamic.

15
00:00:56.945 --> 00:01:02.173
And all that means basically is with
static imports, you get the ability to do

16
00:01:02.173 --> 00:01:07.980
what's called static analysis which leads
to live code inclusion AKA tree shaking.

17
00:01:07.980 --> 00:01:12.260
Which basically means you can have your
code be analyzed and have it rip out

18
00:01:12.260 --> 00:01:15.800
all of the unneeded parts which actually
Webpack will do for you for free.

19
00:01:18.620 --> 00:01:22.320
Well, a combination of Webpack and
Uglify together will do that for you.

20
00:01:23.670 --> 00:01:25.690
Whereas require it's all determined.

21
00:01:26.950 --> 00:01:29.810
You can't statically analyze that

22
00:01:29.810 --> 00:01:33.040
which ends up meaning that if you include
something you have to include everything

23
00:01:33.040 --> 00:01:34.910
because you don't know if it's
gonna be included later or not.

24
00:01:35.930 --> 00:01:38.650
There's a bunch of other fine difference
but suffice to say, they more or

25
00:01:38.650 --> 00:01:41.337
less end up being very similar.
&gt;&gt; Speaker 2: People

26
00:01:41.337 --> 00:01:44.827
are getting syntax errors with the import.
&gt;&gt; Brian Holt: Yeah,

27
00:01:44.827 --> 00:01:45.819
I haven't gotten there yet.

28
00:01:45.819 --> 00:01:46.872
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: Yeah.

29
00:01:46.872 --> 00:01:47.483
Give me a sec.

30
00:01:47.483 --> 00:01:54.353
[LAUGH]
Save that.

31
00:01:54.353 --> 00:01:56.240
You're gonna import my
title from my title.

32
00:01:58.150 --> 00:02:01.210
And so now we have React being included.

33
00:02:01.210 --> 00:02:03.940
React dom being included which
is being used down here.

34
00:02:03.940 --> 00:02:07.590
And we have MyTitle, which is being
included from the other file, okay?

35
00:02:09.030 --> 00:02:11.046
Good so far?

36
00:02:11.046 --> 00:02:14.557
Cool, so now what we need to

37
00:02:14.557 --> 00:02:19.791
do,
&gt;&gt; Brian Holt: Is we're

38
00:02:19.791 --> 00:02:25.060
going to go run webpack.
&gt;&gt; Brian Holt: Yep so

39
00:02:25.060 --> 00:02:30.339
go to your terminal.
&gt;&gt; Brian Holt: And

40
00:02:30.339 --> 00:02:32.918
you're gonna say webpack, so

41
00:02:32.918 --> 00:02:37.630
first of all you're gonna need to npm and
globally install.

42
00:02:37.630 --> 00:02:43.032
Npm install --global, and I gotta go
make sure I get the right version,

43
00:02:43.032 --> 00:02:46.530
because it is important
which version you get.

44
00:02:46.530 --> 00:02:48.147
So do,

45
00:02:48.147 --> 00:02:57.322
webpack@v2.1.0-beta.25.

46
00:02:57.322 --> 00:03:02.882
I know [LAUGH] I know.
&gt;&gt; Brian Holt: But this

47
00:03:02.882 --> 00:03:09.832
is the version that we're gonna use today.
&gt;&gt; Speaker 3: Why

48
00:03:09.832 --> 00:03:13.803
don't we use yarn to install this stuff?
&gt;&gt; Brian Holt: You can I just had problems

49
00:03:13.803 --> 00:03:15.849
with it, with their global installs.

50
00:03:17.660 --> 00:03:18.380
But you can, I mean,

51
00:03:18.380 --> 00:03:24.399
suffice to say that it's interchangeable.
&gt;&gt; Brian Holt: They

52
00:03:24.399 --> 00:03:31.456
both pull from the same registry, so.
&gt;&gt; Brian Holt: Path

53
00:03:31.456 --> 00:03:33.592
of least resistance, I think.
&gt;&gt; Speaker 4: So

54
00:03:33.592 --> 00:03:37.420
we're just importing one component
into another component file and

55
00:03:37.420 --> 00:03:40.522
In a real environment and
we just have like one index file

56
00:03:40.522 --> 00:03:43.850
that's pulling in all of our components.
&gt;&gt; Brian Holt: I'd

57
00:03:43.850 --> 00:03:46.210
say in a real environment
you're gonna have

58
00:03:47.420 --> 00:03:49.430
one component that pulls in
multiple other components and

59
00:03:49.430 --> 00:03:52.280
inside of those components, it's gonna
pull in multiple other components, right?

60
00:03:52.280 --> 00:03:55.540
So, it's just components made out of
components made out of components, right?

61
00:03:56.880 --> 00:04:00.530
So, you're probably going to
eventually have one router file, right?

62
00:04:00.530 --> 00:04:02.510
That pulls in all the big components.

63
00:04:03.590 --> 00:04:05.790
But those won't necessarily
pull in the smaller components.

64
00:04:05.790 --> 00:04:09.767
Those other route components will pull in
their smaller components which will then

65
00:04:09.767 --> 00:04:13.720
pull in their smaller components.
&gt;&gt; Speaker 2: Question for Jonathan.

66
00:04:13.720 --> 00:04:17.015
Can we remove the react and
react dom scripts from index .HTML.

67
00:04:17.015 --> 00:04:19.835
&gt;&gt; Brian Holt: Yeah, we're getting there.

68
00:04:19.835 --> 00:04:24.485
[LAUGH] Okay, so

69
00:04:24.485 --> 00:04:28.425
let's see.

70
00:04:28.425 --> 00:04:32.521
We're gonna say web pack,
once you've done that, and

71
00:04:32.521 --> 00:04:38.550
then you have to give it an entry file,
which is going to be js/Client, App.js.

72
00:04:38.550 --> 00:04:42.660
So this is basically saying, hey webpack,
this is your front door, right?

73
00:04:42.660 --> 00:04:44.170
And a big key about your front door,

74
00:04:44.170 --> 00:04:46.960
quote unquote,
is it doesn't export anything, right?

75
00:04:46.960 --> 00:04:51.360
It's the first file that
webpack's gonna see.

76
00:04:51.360 --> 00:04:54.929
And then you're gonna tell it,
okay I want you to bundle this file, and

77
00:04:54.929 --> 00:04:56.430
then give me one output file.

78
00:04:56.430 --> 00:04:58.830
So you have to give it
a place to put your output.

79
00:04:58.830 --> 00:05:01.409
So you're gonna say public

80
00:05:01.409 --> 00:05:06.379
bundle.js,
&gt;&gt; Brian Holt: Bundle

81
00:05:06.379 --> 00:05:08.590
is just the name that
people usually call it.

82
00:05:08.590 --> 00:05:10.070
I would suggest sticking with that.

83
00:05:10.070 --> 00:05:11.019
You don't have to, but

84
00:05:11.019 --> 00:05:15.487
I would just suggest sticking with that.
&gt;&gt; Brian Holt: Okay, so

85
00:05:15.487 --> 00:05:19.969
if you run that, you should get
something that looks somewhat like that.

86
00:05:19.969 --> 00:05:22.668
That basically says hey,
I included my title.

87
00:05:22.668 --> 00:05:23.780
I included ClientApp.js and

88
00:05:23.780 --> 00:05:27.540
I included a whole lot more crap that
you don't really have to care about.

89
00:05:27.540 --> 00:05:29.707
But that's all the stuff that
React was pulling in for

90
00:05:29.707 --> 00:05:35.407
the most part.
&gt;&gt; Brian Holt: So

91
00:05:35.407 --> 00:05:39.090
you ended up with this 274 kilobyte file.

92
00:05:39.090 --> 00:05:41.410
Which probably seems like insanity to you.

93
00:05:41.410 --> 00:05:43.630
That's because it's fairly insane.

94
00:05:43.630 --> 00:05:47.362
But the reason is that we're
getting the unminified,

95
00:05:47.362 --> 00:05:50.870
ungzipped development build of React,
right?

96
00:05:50.870 --> 00:05:53.640
So it has a whole bunch of
debugging code included.

97
00:05:53.640 --> 00:05:56.480
When you built it for
production it'll be much smaller.

98
00:05:56.480 --> 00:05:58.210
In fact, we can just build it for
production right now.

99
00:05:58.210 --> 00:06:03.430
If you put -p, well, not only that.

100
00:06:03.430 --> 00:06:12.519
You have to say
NODE_ENV=production webpack -p.

101
00:06:12.519 --> 00:06:17.583
And that'll build it for production.
&gt;&gt; Brian Holt: You

102
00:06:17.583 --> 00:06:18.989
don't have to do that
if you don't want to.

103
00:06:18.989 --> 00:06:21.913
But I just wanted to show you
that there is a large difference,

104
00:06:21.913 --> 00:06:23.610
right now it's 148 kilobytes.

105
00:06:23.610 --> 00:06:25.090
It's much smaller.

106
00:06:25.090 --> 00:06:27.190
That still NG unzipped.

107
00:06:27.190 --> 00:06:29.110
So it'll get even smaller, right.

108
00:06:29.110 --> 00:06:32.850
So just don't worry too much about it now.

109
00:06:32.850 --> 00:06:36.827
That's all I wanted to say.
&gt;&gt; Brian Holt: And

110
00:06:36.827 --> 00:06:39.260
you also want the debugged
version right now.

111
00:06:39.260 --> 00:06:42.811
Because it React gives much better error
messages when it's in de bug mode.

112
00:06:45.660 --> 00:06:53.465
Any questions about the build so far?
&gt;&gt; Brian Holt: Okay.

113
00:06:56.905 --> 00:06:58.934
&gt;&gt; Brian Holt: So go to index.html.

114
00:07:00.945 --> 00:07:01.845
&gt;&gt; Brian Holt: Get rid of these three

115
00:07:01.845 --> 00:07:07.332
scripts right here.
&gt;&gt; Brian Holt: Say script

116
00:07:07.332 --> 00:07:14.395
source equals public/bundle.js.

117
00:07:14.395 --> 00:07:17.797
Now we don't have to include anything
else, we don't have to keep going and

118
00:07:17.797 --> 00:07:20.200
adding files or anything dumb like that.

119
00:07:20.200 --> 00:07:23.442
We only have to include one bundle file
ever and this is, and now we're done

120
00:07:23.442 --> 00:07:30.570
editing this for a long time.
&gt;&gt; Brian Holt: So if you save that.

121
00:07:32.780 --> 00:07:36.382
Come back to your browser and
you refresh, everything still works but

122
00:07:36.382 --> 00:07:44.117
we're only including one file.
&gt;&gt; Brian Holt: Any questions about that?

123
00:07:44.117 --> 00:07:45.645
Yeah?
&gt;&gt; Speaker 2: Enri is asking can

124
00:07:45.645 --> 00:07:50.460
components be pulled at runtime by
injecting the JavaScript, something

125
00:07:50.460 --> 00:07:54.503
like plugins pulled in at runtime.
&gt;&gt; Brian Holt: I

126
00:07:54.503 --> 00:07:58.770
think the answer to that question is yes,
using code splitting.

127
00:07:59.920 --> 00:08:04.302
You can basically tell a web pack, and
this is something we do tomorrow, but

128
00:08:04.302 --> 00:08:09.026
you can basically tell web pack here's a
bundle of code I don't need right away and

129
00:08:09.026 --> 00:08:11.580
I'm gonna inject this layer dynamically.

130
00:08:11.580 --> 00:08:13.820
And I will show you how to do
that at the end of tomorrow

