WEBVTT

1
00:00:00.270 --> 00:00:02.560
&gt;&gt; Brian Holt: So go over to ClientApp.js.

2
00:00:02.560 --> 00:00:05.820
We're gonna get rid of
all this stuff up here.

3
00:00:07.270 --> 00:00:11.903
So get rid of all the MyTitle
stuff cuz we're gonna import that.

4
00:00:11.903 --> 00:00:16.119
And then get rid of the h1 cuz
you don't need that either.

5
00:00:16.119 --> 00:00:24.115
And what we're gonna do up here is we're
gonna say import React from 'react',

6
00:00:24.115 --> 00:00:28.122
import ReactDOM from 'react-dom'.

7
00:00:28.122 --> 00:00:35.673
And import MyTitle from ./MyTitle.

8
00:00:35.673 --> 00:00:36.243
&gt;&gt; Speaker 2: Brian.

9
00:00:36.243 --> 00:00:36.931
&gt;&gt; Brian Holt: Yeah.

10
00:00:36.931 --> 00:00:40.466
&gt;&gt; Speaker 2: We have a question about if
you could explain the difference between

11
00:00:40.466 --> 00:00:43.080
react and, excuse me, require and import.

12
00:00:44.470 --> 00:00:47.400
&gt;&gt; Brian Holt: I mean, there are a bunch
of fine differences between the two.

13
00:00:48.790 --> 00:00:53.902
Particularly one is EF6 is static and

14
00:00:53.902 --> 00:00:56.945
CommonJS is dynamic.

15
00:00:56.945 --> 00:01:02.173
And all that means basically is with
static imports, you get the ability to do

16
00:01:02.173 --> 00:01:07.980
what's called static analysis which leads
to live code inclusion AKA tree shaking.

17
00:01:07.980 --> 00:01:12.260
Which basically means you can have your
code be analyzed and have it rip out

18
00:01:12.260 --> 00:01:15.800
all of the unneeded parts which actually
Webpack will do for you for free.

19
00:01:18.620 --> 00:01:22.320
Well, a combination of Webpack and
Uglify together will do that for you.

20
00:01:23.670 --> 00:01:25.690
Whereas require it's all determined.

21
00:01:26.950 --> 00:01:29.810
You can't statically analyze that

22
00:01:29.810 --> 00:01:33.040
which ends up meaning that if you include
something you have to include everything

23
00:01:33.040 --> 00:01:34.910
because you don't know if it's
gonna be included later or not.

24
00:01:35.930 --> 00:01:37.330
There's a bunch of other
fine difference but

25
00:01:37.330 --> 00:01:40.810
suffice to say, they more or
less end up being very similar.

26
00:01:40.810 --> 00:01:44.590
&gt;&gt; Speaker 2: People are getting
syntax errors with the import.

27
00:01:44.590 --> 00:01:45.819
&gt;&gt; Brian Holt: Yeah,
I haven't gotten there yet.

28
00:01:45.819 --> 00:01:46.385
&gt;&gt; Speaker 2: Okay.

29
00:01:46.385 --> 00:01:47.483
&gt;&gt; Brian Holt: Yeah.
Give me a sec.

30
00:01:47.483 --> 00:01:54.353
[LAUGH]
Save that.

31
00:01:54.353 --> 00:01:56.240
You're gonna import my
title from my title.

32
00:01:58.150 --> 00:02:01.210
And so now we have React being included.

33
00:02:01.210 --> 00:02:03.940
React dom being included which
is being used down here.

34
00:02:03.940 --> 00:02:07.590
And we have MyTitle, which is being
included from the other file, okay?

35
00:02:09.030 --> 00:02:11.046
Good so far?

36
00:02:11.046 --> 00:02:14.557
Cool, so now what we need to

37
00:02:14.557 --> 00:02:19.235
do,
&gt;&gt; Brian Holt: Is

38
00:02:19.235 --> 00:02:21.740
we're going to go run webpack.

39
00:02:24.300 --> 00:02:27.800
&gt;&gt; Brian Holt: Yep so go to your terminal.

40
00:02:30.063 --> 00:02:32.918
&gt;&gt; Brian Holt: And
you're gonna say webpack, so

41
00:02:32.918 --> 00:02:37.630
first of all you're gonna need to npm and
globally install.

42
00:02:37.630 --> 00:02:43.032
Npm install --global, and I gotta go
make sure I get the right version,

43
00:02:43.032 --> 00:02:46.530
because it is important
which version you get.

44
00:02:46.530 --> 00:02:48.147
So do,

45
00:02:48.147 --> 00:02:57.322
webpack@v2.1.0-beta.25.

46
00:02:57.322 --> 00:03:00.112
I know [LAUGH] I know.

47
00:03:02.497 --> 00:03:04.925
&gt;&gt; Brian Holt: But this is the version
that we're gonna use today.

48
00:03:09.609 --> 00:03:12.439
&gt;&gt; Speaker 3: Why don't we use
yarn to install this stuff?

49
00:03:12.439 --> 00:03:15.849
&gt;&gt; Brian Holt: You can I just had problems
with it, with their global installs.

50
00:03:17.660 --> 00:03:19.910
But you can, I mean,
suffice to say that it's interchangeable.

51
00:03:24.220 --> 00:03:25.880
&gt;&gt; Brian Holt: They both pull
from the same registry, so.

52
00:03:31.160 --> 00:03:33.460
&gt;&gt; Brian Holt: Path of least resistance,
I think.

53
00:03:33.460 --> 00:03:37.420
&gt;&gt; Speaker 4: So we're just importing one
component into another component file and

54
00:03:37.420 --> 00:03:38.806
In a real environment and

55
00:03:38.806 --> 00:03:43.660
we just have like one index file that's
pulling in all of our components.

56
00:03:43.660 --> 00:03:46.210
&gt;&gt; Brian Holt: I'd say in a real
environment you're gonna have

57
00:03:47.420 --> 00:03:50.470
one component that pulls in multiple other
components and inside of those components,

58
00:03:50.470 --> 00:03:52.280
it's gonna pull in multiple
other components, right?

59
00:03:52.280 --> 00:03:55.540
So, it's just components made out of
components made out of components, right?

60
00:03:56.880 --> 00:04:00.530
So, you're probably going to
eventually have one router file, right?

61
00:04:00.530 --> 00:04:02.510
That pulls in all the big components.

62
00:04:03.590 --> 00:04:05.790
But those won't necessarily
pull in the smaller components.

63
00:04:05.790 --> 00:04:09.767
Those other route components will pull in
their smaller components which will then

64
00:04:09.767 --> 00:04:11.480
pull in their smaller components.

65
00:04:11.480 --> 00:04:13.720
&gt;&gt; Speaker 2: Question for Jonathan.

66
00:04:13.720 --> 00:04:17.015
Can we remove the react and
react dom scripts from index .HTML.

67
00:04:17.015 --> 00:04:19.835
&gt;&gt; Brian Holt: Yeah, we're getting there.

68
00:04:19.835 --> 00:04:24.485
[LAUGH] Okay, so

69
00:04:24.485 --> 00:04:28.425
let's see.

70
00:04:28.425 --> 00:04:32.521
We're gonna say web pack,
once you've done that, and

71
00:04:32.521 --> 00:04:38.550
then you have to give it an entry file,
which is going to be js/Client, App.js.

72
00:04:38.550 --> 00:04:42.660
So this is basically saying, hey webpack,
this is your front door, right?

73
00:04:42.660 --> 00:04:44.170
And a big key about your front door,

74
00:04:44.170 --> 00:04:46.960
quote unquote,
is it doesn't export anything, right?

75
00:04:46.960 --> 00:04:51.360
It's the first file that
webpack's gonna see.

76
00:04:51.360 --> 00:04:54.929
And then you're gonna tell it,
okay I want you to bundle this file, and

77
00:04:54.929 --> 00:04:56.430
then give me one output file.

78
00:04:56.430 --> 00:04:58.830
So you have to give it
a place to put your output.

79
00:04:58.830 --> 00:05:01.409
So you're gonna say public

80
00:05:01.409 --> 00:05:06.379
bundle.js,
&gt;&gt; Brian Holt: Bundle

81
00:05:06.379 --> 00:05:08.590
is just the name that
people usually call it.

82
00:05:08.590 --> 00:05:10.070
I would suggest sticking with that.

83
00:05:10.070 --> 00:05:12.690
You don't have to, but
I would just suggest sticking with that.

84
00:05:14.910 --> 00:05:16.496
&gt;&gt; Brian Holt: Okay, so if you run that,

85
00:05:16.496 --> 00:05:19.969
you should get something that
looks somewhat like that.

86
00:05:19.969 --> 00:05:22.668
That basically says hey,
I included my title.

87
00:05:22.668 --> 00:05:23.780
I included ClientApp.js and

88
00:05:23.780 --> 00:05:27.540
I included a whole lot more crap that
you don't really have to care about.

89
00:05:27.540 --> 00:05:30.342
But that's all the stuff that React
was pulling in for the most part.

90
00:05:35.250 --> 00:05:39.090
&gt;&gt; Brian Holt: So
you ended up with this 274 kilobyte file.

91
00:05:39.090 --> 00:05:41.410
Which probably seems like insanity to you.

92
00:05:41.410 --> 00:05:43.630
That's because it's fairly insane.

93
00:05:43.630 --> 00:05:47.362
But the reason is that we're
getting the unminified,

94
00:05:47.362 --> 00:05:50.870
ungzipped development build of React,
right?

95
00:05:50.870 --> 00:05:53.640
So it has a whole bunch of
debugging code included.

96
00:05:53.640 --> 00:05:56.480
When you built it for
production it'll be much smaller.

97
00:05:56.480 --> 00:05:58.210
In fact, we can just build it for
production right now.

98
00:05:58.210 --> 00:06:03.430
If you put -p, well, not only that.

99
00:06:03.430 --> 00:06:12.519
You have to say
NODE_ENV=production webpack -p.

100
00:06:12.519 --> 00:06:14.182
And that'll build it for production.

101
00:06:17.469 --> 00:06:18.989
&gt;&gt; Brian Holt: You don't have
to do that if you don't want to.

102
00:06:18.989 --> 00:06:21.913
But I just wanted to show you
that there is a large difference,

103
00:06:21.913 --> 00:06:23.610
right now it's 148 kilobytes.

104
00:06:23.610 --> 00:06:25.090
It's much smaller.

105
00:06:25.090 --> 00:06:27.190
That still NG unzipped.

106
00:06:27.190 --> 00:06:29.110
So it'll get even smaller, right.

107
00:06:29.110 --> 00:06:32.850
So just don't worry too much about it now.

108
00:06:32.850 --> 00:06:33.780
That's all I wanted to say.

109
00:06:36.640 --> 00:06:39.260
&gt;&gt; Brian Holt: And you also want
the debugged version right now.

110
00:06:39.260 --> 00:06:42.811
Because it React gives much better error
messages when it's in de bug mode.

111
00:06:45.660 --> 00:06:47.030
Any questions about the build so far?

112
00:06:53.345 --> 00:06:53.845
&gt;&gt; Brian Holt: Okay.

113
00:06:56.905 --> 00:06:58.934
&gt;&gt; Brian Holt: So go to index.html.

114
00:07:00.945 --> 00:07:02.745
&gt;&gt; Brian Holt: Get rid of these
three scripts right here.

115
00:07:05.348 --> 00:07:09.978
&gt;&gt; Brian Holt: Say script source equals

116
00:07:09.978 --> 00:07:14.395
public/bundle.js.

117
00:07:14.395 --> 00:07:17.797
Now we don't have to include anything
else, we don't have to keep going and

118
00:07:17.797 --> 00:07:20.200
adding files or anything dumb like that.

119
00:07:20.200 --> 00:07:22.773
We only have to include one
bundle file ever and this is, and

120
00:07:22.773 --> 00:07:24.732
now we're done editing this for
a long time.

121
00:07:29.680 --> 00:07:30.570
&gt;&gt; Brian Holt: So if you save that.

122
00:07:32.780 --> 00:07:36.382
Come back to your browser and
you refresh, everything still works but

123
00:07:36.382 --> 00:07:38.100
we're only including one file.

124
00:07:42.300 --> 00:07:44.117
&gt;&gt; Brian Holt: Any questions about that?

125
00:07:44.117 --> 00:07:45.645
Yeah?
&gt;&gt; Speaker 2: Enri is asking can

126
00:07:45.645 --> 00:07:49.761
components be pulled at runtime
by injecting the JavaScript,

127
00:07:49.761 --> 00:07:52.802
something like plugins
pulled in at runtime.

128
00:07:54.426 --> 00:07:58.770
&gt;&gt; Brian Holt: I think the answer to that
question is yes, using code splitting.

129
00:07:59.920 --> 00:08:04.302
You can basically tell a web pack, and
this is something we do tomorrow, but

130
00:08:04.302 --> 00:08:09.026
you can basically tell web pack here's a
bundle of code I don't need right away and

131
00:08:09.026 --> 00:08:11.580
I'm gonna inject this layer dynamically.

132
00:08:11.580 --> 00:08:13.820
And I will show you how to do
that at the end of tomorrow

