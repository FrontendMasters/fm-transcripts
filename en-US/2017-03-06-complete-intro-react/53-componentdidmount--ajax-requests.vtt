WEBVTT

1
00:00:00.390 --> 00:00:05.140
&gt;&gt; Brian: We're gonna import axios, which
is just a promise based AJAX library.

2
00:00:05.140 --> 00:00:10.254
Okay, we're gonna give Details a state,
so we're gonna say getInitialState.

3
00:00:13.916 --> 00:00:17.784
&gt;&gt; Brian: Then we're going to return

4
00:00:17.784 --> 00:00:26.134
omdbData: Empty object.
&gt;&gt; Brian: And

5
00:00:26.134 --> 00:00:30.259
what we're gonna do after that is
we're gonna put a componentDidMount.

6
00:00:39.015 --> 00:00:43.881
&gt;&gt; Brian: So we're gonna

7
00:00:43.881 --> 00:00:47.998
say from here

8
00:00:47.998 --> 00:00:57.998
axios.get('http://www.omdbapi.com/?')

9
00:01:06.343 --> 00:01:09.342
=${}

10
00:01:12.860 --> 00:01:22.576
&gt;&gt; Brian: This.props.show.imdbID.

11
00:01:22.576 --> 00:01:23.940
That's right.

12
00:01:23.940 --> 00:01:28.480
Yep, we're gonna have to add that to the
propsTypes up here, so put that up here.

13
00:01:28.480 --> 00:01:35.007
imdbID, which is a string.
&gt;&gt; Brian: So

14
00:01:35.007 --> 00:01:41.815
first of all, big shout out to OMDb,
which is basically an API version of IMDb.

15
00:01:41.815 --> 00:01:43.360
The guy runs it on his own time,

16
00:01:43.360 --> 00:01:47.290
so I always encourage people to donate
to it, because it's completely free.

17
00:01:47.290 --> 00:01:50.310
We don't have to sign up for it,
we don't have to pass it a token.

18
00:01:50.310 --> 00:01:51.370
The guy is just awesome.

19
00:01:51.370 --> 00:01:55.567
So he, he or
she I don't know who it is, but

20
00:01:55.567 --> 00:01:59.999
has gracefully agreed to
allow us to use their

21
00:01:59.999 --> 00:02:04.484
API.
&gt;&gt; Brian: Okay, so

22
00:02:04.484 --> 00:02:09.670
we're gonna do that,
then this is going to return a promise.

23
00:02:09.670 --> 00:02:17.008
So what I'm going to do right after that
is I'm just going to say .then((response).

24
00:02:21.673 --> 00:02:24.067
&gt;&gt; Brian: We're gonna say this.setState.

25
00:02:28.395 --> 00:02:32.599
&gt;&gt; Brian: {omdbData: response.data},

26
00:02:38.265 --> 00:02:39.731
&gt;&gt; Brian: And we're gonna put a catch.

27
00:02:45.584 --> 00:02:47.584
&gt;&gt; Brian: And all we really wanna do is we

28
00:02:47.584 --> 00:02:54.680
just wanna say console.error.
&gt;&gt; Brian: ('axios error', error).

29
00:02:57.420 --> 00:03:00.400
It's just good to alert yourself
that something went wrong.

30
00:03:00.400 --> 00:03:04.756
Typically you would do more here, but
right now I wanna just debut it if it goes

31
00:03:04.756 --> 00:03:09.371
wrong.
&gt;&gt; Speaker 2: Raven is saying

32
00:03:09.371 --> 00:03:10.921
the same the query string should be,

33
00:03:10.921 --> 00:03:13.310
I can't read that exactly.
&gt;&gt; Brian: I.

34
00:03:13.310 --> 00:03:15.271
&gt;&gt; Speaker 2: i equals.

35
00:03:15.271 --> 00:03:16.062
&gt;&gt; Brian: Sorry.

36
00:03:24.728 --> 00:03:28.005
&gt;&gt; Brian: Yeah, omdb.com/?i=,

37
00:03:28.005 --> 00:03:29.782
I forgot the i.

38
00:03:48.382 --> 00:03:51.005
&gt;&gt; Brian: Okay, so what this is gonna do,

39
00:03:51.005 --> 00:03:53.731
this is going to go out to the API.

40
00:03:53.731 --> 00:03:57.127
It's gonna go grab the show
that we're interested in and

41
00:03:57.127 --> 00:03:59.890
it's going to return it back to us.

42
00:03:59.890 --> 00:04:02.797
And then this is going to set
it in the state in omdbData.

43
00:04:02.797 --> 00:04:05.068
This is going to have way more
than just the rating of the show,

44
00:04:05.068 --> 00:04:06.840
which is all we're going to use.

45
00:04:06.840 --> 00:04:09.000
But like say you wanted to update
the poster on the fly, and

46
00:04:09.000 --> 00:04:12.490
you wanted to update the trailer on the
fly, and the description, all that stuff

47
00:04:12.490 --> 00:04:17.610
you could do some sort of cool merge
to get updated data all the time.

48
00:04:19.220 --> 00:04:24.338
But right now we're just going to do,
&gt;&gt; Brian: Just

49
00:04:24.338 --> 00:04:26.650
the rating.
&gt;&gt; Speaker 2: So

50
00:04:26.650 --> 00:04:29.510
the first time it comes up it shows it.

51
00:04:29.510 --> 00:04:34.860
It does the call to get the data It does
a setState which forces a re-render.

52
00:04:34.860 --> 00:04:38.060
And then you're going to hit it again,
right?

53
00:04:38.060 --> 00:04:42.070
How's it not doing it if it's in a loop?
&gt;&gt; Brian: So componentDidMount gets called

54
00:04:42.070 --> 00:04:44.071
exactly once.
&gt;&gt; Speaker 2: Okay, so

55
00:04:44.071 --> 00:04:48.051
it's only if it mounts,
it's only a mount and not a render?

56
00:04:48.051 --> 00:04:49.593
&gt;&gt; Brian: Correct.

57
00:04:49.593 --> 00:04:51.146
&gt;&gt; Speaker 2: Okay, sorry.

58
00:04:51.146 --> 00:04:52.454
&gt;&gt; Speaker 3: Does componentDidMount get

59
00:04:52.454 --> 00:04:55.832
called then, subsequently,
like if you navigate to a different state,

60
00:04:55.832 --> 00:04:59.603
then back to this state it would be called
again, cuz it's gonna render it again?

61
00:04:59.603 --> 00:05:02.422
&gt;&gt; Brian: Yeah, so it's gonna request that

62
00:05:02.422 --> 00:05:07.582
data again from the API,
which we're going to fix with Redux.

63
00:05:07.582 --> 00:05:10.448
But that is astute,
because if we go to the search page and

64
00:05:10.448 --> 00:05:14.212
then back to the same page, we're gonna
request the same data over again,

65
00:05:14.212 --> 00:05:19.179
which kinda sucks.
&gt;&gt; Brian: Okay,

66
00:05:19.179 --> 00:05:23.998
so here inside of render,
&gt;&gt; Brian: We're gonna say let

67
00:05:23.998 --> 00:05:30.757
rating,
&gt;&gt; Brian: if

68
00:05:30.757 --> 00:05:40.757
(this.state.omdbData.imdbRating).

69
00:05:46.104 --> 00:05:50.011
&gt;&gt; Brian: So this is basically saying,
hey, if inside of omdbData,

70
00:05:50.011 --> 00:05:55.150
if you have an imdbRating that means
the data from the API has come back.

71
00:05:55.150 --> 00:05:57.990
So then we're gonna show you the rating,

72
00:05:57.990 --> 00:06:00.170
otherwise we're gonna show you
some sort of loading state.

73
00:06:01.260 --> 00:06:05.901
So if it's there then
it's going to be equal to

74
00:06:05.901 --> 00:06:09.842
an h3 with just that data inside of it.

75
00:06:09.842 --> 00:06:16.901
This.state.omdbData.imdRating.

76
00:06:23.334 --> 00:06:24.134
&gt;&gt; Speaker 2: You didn't close the curly

77
00:06:24.134 --> 00:06:25.394
brackets.
&gt;&gt; Brian: There it is,

78
00:06:25.394 --> 00:06:30.924
thank you.
&gt;&gt; Brian: else rating =,

79
00:06:30.924 --> 00:06:35.987
and we're gonna put up our spinner now.

80
00:06:35.987 --> 00:06:45.840
The img src='/public/img/loading.png'.

81
00:06:45.840 --> 00:06:48.595
Make sure you put your alt
text on there so it spins.

82
00:06:48.595 --> 00:06:54.811
[LAUGH] loading indicator.
&gt;&gt; Brian: Again,

83
00:06:54.811 --> 00:06:58.110
this is a horrible use of alt text.

84
00:06:58.110 --> 00:07:00.712
One should never target alt text.

85
00:07:00.712 --> 00:07:05.980
[LAUGH] And I'm just saying this is
ridiculous, please don't do this.

86
00:07:07.490 --> 00:07:09.794
This is just a horrible
abuse both of CSS and

87
00:07:09.794 --> 00:07:13.786
accessibility.
&gt;&gt; Brian: Okay, so

88
00:07:13.786 --> 00:07:17.090
now we have rating, which is going
to contain one of two components.

89
00:07:17.090 --> 00:07:19.697
It's either gonna be a loading state or

90
00:07:19.697 --> 00:07:23.175
it's going to be data that
we have back from the API.

91
00:07:23.175 --> 00:07:29.254
And then between year and poster,
we're gonna just throw that in there.

92
00:07:42.171 --> 00:07:43.091
&gt;&gt; Brian: Okay, so

93
00:07:43.091 --> 00:07:47.232
let's save that and make sure that works.

94
00:07:47.232 --> 00:07:49.284
If we come back to frontend Masters React,

95
00:07:49.284 --> 00:07:52.680
hit Refresh.
&gt;&gt; Brian: It's fast

96
00:07:52.680 --> 00:07:56.570
enough that we don't actually even see it,
the loading.

97
00:07:56.570 --> 00:07:58.380
But you can see right there that it's 8.3,

98
00:07:58.380 --> 00:08:01.050
which is live data back from the API,
which is pretty cool.

99
00:08:03.735 --> 00:08:05.722
I wonder if I can get it?

100
00:08:05.722 --> 00:08:09.415
Yeah, the PNG doesn't even load
before it comes back to the API.

101
00:08:09.415 --> 00:08:10.275
&gt;&gt; Speaker 2: You can slow it down if

102
00:08:10.275 --> 00:08:11.669
you use the dev tools.
&gt;&gt; Brian: Yeah,

103
00:08:11.669 --> 00:08:14.661
that's a good idea.
&gt;&gt; Brian: Performance,

104
00:08:14.661 --> 00:08:16.165
is that where I would do this?

105
00:08:16.165 --> 00:08:17.345
Or Network?
&gt;&gt; Speaker 2: No, I think it's,

106
00:08:17.345 --> 00:08:20.666
yeah.
&gt;&gt; Speaker 3: If you throw the setState at

107
00:08:20.666 --> 00:08:25.515
a time out, too,
you can kinda pause it for however long.

108
00:08:25.515 --> 00:08:27.984
&gt;&gt; Brian: Well, I got into something else.

109
00:08:27.984 --> 00:08:31.370
So I just switched to using
Firefox maybe a month ago.

110
00:08:31.370 --> 00:08:32.460
&gt;&gt; Speaker 3: I don't know Firefox tools

111
00:08:32.460 --> 00:08:33.571
at all.
&gt;&gt; Speaker 2: I think it's

112
00:08:33.571 --> 00:08:36.990
in the settings, isn't it?
&gt;&gt; Brian: I think it's in here.

113
00:08:36.990 --> 00:08:37.710
&gt;&gt; Speaker 2: Is there

114
00:08:37.710 --> 00:08:41.790
a little mobile icon or something?
&gt;&gt; Brian: Okay,

115
00:08:41.790 --> 00:08:43.289
so we'll try refreshing that.

116
00:08:45.190 --> 00:08:46.410
So Juan, this sucks.

117
00:08:46.410 --> 00:08:52.096
How long is this gonna take to load?
&gt;&gt; Speaker 2: We put it at least on 4G or

118
00:08:52.096 --> 00:08:55.840
something.
&gt;&gt; Brian: Yeah, there we go.

119
00:08:55.840 --> 00:08:56.656
&gt;&gt; Speaker 2: There we go, okay.

120
00:09:06.997 --> 00:09:07.800
&gt;&gt; Brian: There you go.

121
00:09:13.419 --> 00:09:15.110
&gt;&gt; Brian: [LAUGH] Man, I have so

122
00:09:15.110 --> 00:09:19.930
many horrific stories of how
I've abused the Chrome DevTools.

123
00:09:21.170 --> 00:09:24.060
I once left throttling on for
like, a month.

124
00:09:24.060 --> 00:09:28.290
So I was getting a 3G connection
on my laptop all the time, and

125
00:09:28.290 --> 00:09:30.960
I hated everyone and every website.

126
00:09:30.960 --> 00:09:32.658
That was bad.

127
00:09:32.658 --> 00:09:35.710
And when I found that I was like,
what have I been doing with my life?

128
00:09:35.710 --> 00:09:38.541
[LAUGH] I probably wasted like a week.
&gt;&gt; [LAUGH]

129
00:09:38.541 --> 00:09:39.877
&gt;&gt; Speaker 2: That's so

130
00:09:39.877 --> 00:09:43.110
bad.
&gt;&gt; Brian: Another horrible one is that you

131
00:09:43.110 --> 00:09:49.210
can turn off JavaScript with
the Chrome DevTools and it's only

132
00:09:49.210 --> 00:09:54.540
off when the DevTools are open, but
they don't reset that flag ever.

133
00:09:55.710 --> 00:10:01.150
So I was giving a workshop at AusCon,
and I was

134
00:10:01.150 --> 00:10:05.010
just having these crazy bugs, where all of
a sudden my app would just totally crash.

135
00:10:05.010 --> 00:10:07.280
And I was just like, what is going on?

136
00:10:07.280 --> 00:10:09.800
And then like it would work sometimes and
then it wouldn't work and

137
00:10:09.800 --> 00:10:10.490
I couldn't figure it out.

138
00:10:10.490 --> 00:10:13.610
And I realized that every
time I was opening and

139
00:10:13.610 --> 00:10:16.577
closing the DevTools
it would crash my app.

140
00:10:16.577 --> 00:10:18.640
[LAUGH] I mean,
I must have had that for a while, too.

141
00:10:18.640 --> 00:10:22.320
So, shit, it's just make sure
you turn off throttling and

142
00:10:22.320 --> 00:10:25.030
turn off disable JavaScript.

143
00:10:29.070 --> 00:10:33.320
Okay, any questions about axios, whatever?

144
00:10:33.320 --> 00:10:37.000
The doc's really great for axios,
so if you need that, go read that.

145
00:10:37.000 --> 00:10:41.465
But for componentDidMount,
AJAX requests, setState,

146
00:10:41.465 --> 00:10:47.250
conditionally showing components.
&gt;&gt; Brian: So

147
00:10:47.250 --> 00:10:51.542
I guess one thing that I'll throw out
there for specifically with doing

148
00:10:51.542 --> 00:10:56.477
componentDidMount and that way of doing
things, it forces you to show some kind of

149
00:10:56.477 --> 00:11:01.080
loading state when you're loading data,
and that's always a good thing.

150
00:11:02.140 --> 00:11:05.360
Like you want the users to feel like
your application is interactive

151
00:11:05.360 --> 00:11:07.571
before it's actually interactive, right?

152
00:11:07.571 --> 00:11:09.337
And so
that kind of forces you is like, okay,

153
00:11:09.337 --> 00:11:11.619
show them something then we're
gonna quickly load data.

154
00:11:11.619 --> 00:11:13.810
And then we're gonna
show you the real thing.

155
00:11:13.810 --> 00:11:17.320
And that's a positive pattern for
doing interfaces.

156
00:11:17.320 --> 00:11:19.715
And React kind of strongly
nudges you in that

157
00:11:19.715 --> 00:11:24.598
direction.
&gt;&gt; Brian: So something I'll just kind of

158
00:11:24.598 --> 00:11:28.660
throw out there real quick,
notice I used an arrow function here.

159
00:11:28.660 --> 00:11:32.140
Typically that's not a big deal, but
if you choose use function or not.

160
00:11:33.150 --> 00:11:34.420
However, it is in this case.

161
00:11:34.420 --> 00:11:37.780
If I'd put function here instead of
arrow function, this would break.

162
00:11:38.820 --> 00:11:39.920
Why?

163
00:11:39.920 --> 00:11:43.500
Well, it would break because,
what's this, right?

164
00:11:43.500 --> 00:11:46.489
That's a question you have to ask
yourself in JavaScript constantly.

165
00:11:48.831 --> 00:11:49.381
&gt;&gt; Brian: This,

166
00:11:49.381 --> 00:11:52.225
if you don't use an arrow function,

167
00:11:52.225 --> 00:11:55.900
is going to refer to the promise or
the window.

168
00:11:55.900 --> 00:11:57.490
I don't remember what it's gonna be.

169
00:11:57.490 --> 00:11:59.790
But it's not going to be Details, right?

170
00:11:59.790 --> 00:12:03.360
And it needs to be Details because
we wanna call setState on Details.

171
00:12:04.690 --> 00:12:07.896
By using the arrow function here
we're not creating new context,

172
00:12:07.896 --> 00:12:10.298
which is one of the features
of arrow function, so

173
00:12:10.298 --> 00:12:13.120
that it doesn't create new
context when you create them.

174
00:12:13.120 --> 00:12:16.290
So it's going to be whatever
the context it was called in.

175
00:12:16.290 --> 00:12:21.100
So it's called in componentDidMount,
componentDidMount's context is details and

176
00:12:21.100 --> 00:12:25.710
so that's why this.setState
works here with no magic, right?

177
00:12:27.490 --> 00:12:34.265
If this was function,
&gt;&gt; Brian: So

178
00:12:34.265 --> 00:12:38.946
you would either have to
do .bind(this) right here.

179
00:12:38.946 --> 00:12:40.336
That would work.

180
00:12:40.336 --> 00:12:41.910
You could use the self pattern.

181
00:12:41.910 --> 00:12:43.030
That would be fine, too.

182
00:12:44.250 --> 00:12:47.020
There's a couple different
ways to achieve that.

183
00:12:47.020 --> 00:12:49.410
But it's just really easy
with arrow functions.

184
00:12:49.410 --> 00:12:51.850
It specifically is convenient
with arrow functions.

185
00:12:54.010 --> 00:12:56.320
&gt;&gt; Speaker 2: Question, what are the

186
00:12:56.320 --> 00:13:02.492
advantages of using axios over fetch?
&gt;&gt; Brian: I

187
00:13:02.492 --> 00:13:04.680
don't know if I necessarily
have a great answer.

188
00:13:04.680 --> 00:13:08.400
It's just I've used axios for
such a long time I just keep using it.

189
00:13:08.400 --> 00:13:11.205
The nice thing about fetch,
is it's in the browser, right?

190
00:13:11.205 --> 00:13:13.692
So you just poly fill it and
you can use it, so

191
00:13:13.692 --> 00:13:16.760
fetch is a perfectly acceptable
way to do it as well.

192
00:13:16.760 --> 00:13:19.491
I just find axios really easy to use,
and I've also used it so

193
00:13:19.491 --> 00:13:20.736
much I know the entire API.

194
00:13:20.736 --> 00:13:24.774
[LAUGH] I don't really have
a better answer than that.

195
00:13:27.259 --> 00:13:29.637
&gt;&gt; Speaker 2: Gus was asking, with React,

196
00:13:29.637 --> 00:13:33.252
how you deal with FOUC,
so you never see React

197
00:13:33.252 --> 00:13:37.125
has not rendered on index.html?
&gt;&gt; Brian: Universal rendering,

198
00:13:37.125 --> 00:13:40.657
isomorphic rendering, server side
rendering, whatever you wanna call it.

199
00:13:40.657 --> 00:13:44.914
And we would do that maybe in an hour or
so

200
00:13:44.914 --> 00:13:47.551
we'll be doing that.
&gt;&gt; Speaker 2: Let's

201
00:13:47.551 --> 00:13:53.807
see.
&gt;&gt; Speaker 2: Things are bouncing.

202
00:13:53.807 --> 00:13:54.993
&gt;&gt; Speaker 2: Is axios, fetch,

203
00:13:54.993 --> 00:13:56.697
our React-based AJAX, or

204
00:13:56.697 --> 00:13:59.299
can be used with other frameworks?
&gt;&gt; Brian: Yeah,

205
00:13:59.299 --> 00:14:03.249
they are not necessarily tied to any
framework, they're just libraries.

