WEBVTT

1
00:00:00.330 --> 00:00:02.570
&gt;&gt; Brian Holt: I think I
already have Jest installed.

2
00:00:02.570 --> 00:00:05.332
I'm gonna use 15.1.1, but

3
00:00:05.332 --> 00:00:10.470
I think as long as you're like in the 15,
16 area, all this should work as expected.

4
00:00:13.328 --> 00:00:15.310
&gt;&gt; Brian Holt: Certainly
not lower than 15, okay?

5
00:00:17.360 --> 00:00:26.537
And I'm just gonna say jest
&gt;&gt; Brian Holt: Yeah,

6
00:00:26.537 --> 00:00:29.480
that's what I gotta do.

7
00:00:29.480 --> 00:00:33.070
So you're gonna fail your test and why?

8
00:00:33.070 --> 00:00:37.230
Well, you're gonna fail
on the modules keyword,

9
00:00:37.230 --> 00:00:44.310
because we specifically told
Babel to not compile modules.

10
00:00:44.310 --> 00:00:49.230
But the problem is Node doesn't
understand ES6 modules.

11
00:00:49.230 --> 00:00:53.637
So now we're kind of in this no mans
land of we wanna use ES6 modules, but

12
00:00:53.637 --> 00:00:56.621
we can't with Node, but
Jest is a Node process.

13
00:00:56.621 --> 00:00:57.990
So how do we fix that?

14
00:01:00.250 --> 00:01:03.646
Well, we can tell Babel that,

15
00:01:03.646 --> 00:01:07.310
when in a testing scenario,
please compile my modules.

16
00:01:08.890 --> 00:01:15.900
So, I want you to go to your Babel.rc,
okay?

17
00:01:15.900 --> 00:01:18.700
Underneath your presets what you're
gonna do is wanna give it an env,

18
00:01:21.480 --> 00:01:22.490
which is an object.

19
00:01:22.490 --> 00:01:29.422
And we're gonna say when in test we want
you to include this additional plugin.

20
00:01:29.422 --> 00:01:35.150
That's going to be "plugins":

21
00:01:35.150 --> 00:01:44.636
["transform"] es2015-modules-commonjs.

22
00:01:52.941 --> 00:01:53.635
&gt;&gt; Brian Holt: That make sense?

23
00:01:53.635 --> 00:01:56.799
So it's gonna apply this additional
transformation when in the test

24
00:01:56.799 --> 00:01:58.495
environment and not anywhere else.

25
00:02:06.259 --> 00:02:07.785
&gt;&gt; Brian Holt: Okay?

26
00:02:07.785 --> 00:02:14.941
So now, what we're gonna do is we're
gonna come back to our command line.

27
00:02:14.941 --> 00:02:20.041
I'm gonna say NODE_ENV,
this is for bash, by the way.

28
00:02:20.041 --> 00:02:22.770
If you're on like FISH or
ZSH, you are on your own.

29
00:02:22.770 --> 00:02:26.730
Well, I could probably tell you FISH,
I can't tell you how to do it with ZSH.

30
00:02:26.730 --> 00:02:30.360
But you're gonna say NODE_ENV=test.

31
00:02:30.360 --> 00:02:34.682
Whatever the case right now in time we
need your environmental variable of

32
00:02:34.682 --> 00:02:36.500
NODE_ENV to be equal to test.

33
00:02:39.610 --> 00:02:41.620
And we're gonna set a jest.

34
00:02:47.288 --> 00:02:49.080
&gt;&gt; Brian Holt: Did I not save that?

35
00:02:56.494 --> 00:02:59.380
&gt;&gt; Brian Holt: I ran into this last time.

36
00:02:59.380 --> 00:03:04.110
So one of the nice features,
typically, of Jest

37
00:03:04.110 --> 00:03:08.810
is that it will cache your Babel output so
it doesn't have to re-compile every time,

38
00:03:08.810 --> 00:03:12.090
until you change the Babel environment and
then it doesn't know what to do.

39
00:03:12.090 --> 00:03:18.693
So I think after I say jest,
is it noCache?

40
00:03:23.579 --> 00:03:26.065
&gt;&gt; Speaker 2: noCache,
you already ran past.

41
00:03:26.065 --> 00:03:26.725
&gt;&gt; Brian Holt: Did I?

42
00:03:26.725 --> 00:03:27.429
Okay.

43
00:03:27.429 --> 00:03:28.880
&gt;&gt; Speaker 2: Yeah, it's under --cache.

44
00:03:28.880 --> 00:03:35.065
&gt;&gt; Brian Holt: Jest, so same thing,
we just need to run it once with -noCache.

45
00:03:35.065 --> 00:03:40.825
&gt;&gt; Speaker 2: No,
it's --no-cache, lowercase.

46
00:03:44.554 --> 00:03:45.638
&gt;&gt; Brian Holt: So, there we go.

47
00:03:45.638 --> 00:03:49.130
Once you've cleared out the cache, then
you don't have to worry about it anymore.

48
00:03:50.190 --> 00:03:54.229
But if you do modify your Babel
environment, Jest could be problematic.

49
00:03:57.691 --> 00:04:01.087
&gt;&gt; Brian Holt: So it's gonna tell you,
hey, I wrote one new snapshot, and

50
00:04:01.087 --> 00:04:05.630
all your tests passed, because it's
always gonna pass the first time, right?

51
00:04:05.630 --> 00:04:07.242
&gt;&gt; Speaker 2: Gus is
asking to see the spec

52
00:04:07.242 --> 00:04:08.247
&gt;&gt; Brian Holt: Sure.

53
00:04:15.818 --> 00:04:18.703
&gt;&gt; Brian Holt: One thing you
might notice now, though,

54
00:04:18.703 --> 00:04:21.690
is you have this __snapshots__file.

55
00:04:21.690 --> 00:04:23.958
And this is actually
the output of your snapshot.

56
00:04:27.445 --> 00:04:28.317
&gt;&gt; Brian Holt: So you can look in it,

57
00:04:28.317 --> 00:04:30.890
this is what the markup
kind of looks like for it.

58
00:04:30.890 --> 00:04:32.190
So it's rendering everything out for you.

59
00:04:35.394 --> 00:04:36.717
&gt;&gt; Speaker 3: Do you store
these in version control?

60
00:04:36.717 --> 00:04:38.245
&gt;&gt; Brian Holt: Sorry?

61
00:04:38.245 --> 00:04:40.040
&gt;&gt; Speaker 3: Do you keep
these in version control?

62
00:04:40.040 --> 00:04:42.640
&gt;&gt; Brian Holt: Yes,
you should keep these in your repository.

63
00:04:42.640 --> 00:04:47.830
Because you want all of your teammates
to following the same snapshots too.

64
00:04:47.830 --> 00:04:49.139
&gt;&gt; Speaker 4: You're
kind of multiple states.

65
00:04:51.060 --> 00:04:51.819
&gt;&gt; Brian Holt: What's that?
&gt;&gt; Speaker 4: It's not

66
00:04:51.819 --> 00:04:54.050
possible to have multiple
states that are correct.

67
00:04:54.050 --> 00:04:55.910
&gt;&gt; Brian Holt: You can't, so
you would write multiple snapshots for

68
00:04:55.910 --> 00:04:56.850
each of those states.

69
00:04:56.850 --> 00:04:59.060
If that was something you
were interested in tracking.

70
00:05:02.532 --> 00:05:05.187
&gt;&gt; Brian Holt: But it should be
deterministic that every time you run it

71
00:05:05.187 --> 00:05:06.730
should have one stage, right?

72
00:05:06.730 --> 00:05:08.688
At least for
each test it should have one stage.

73
00:05:08.688 --> 00:05:10.270
&gt;&gt; Speaker 4: Or given input.

74
00:05:10.270 --> 00:05:12.292
&gt;&gt; Brian Holt: Unless it's showing
the date or something, but

75
00:05:12.292 --> 00:05:16.150
even then you'd want some environment for
it to be like one specific state.

76
00:05:16.150 --> 00:05:18.780
Or one specific date for that test, right?

77
00:05:18.780 --> 00:05:22.050
So it should be deterministic,
your test should be deterministic.

78
00:05:26.896 --> 00:05:30.750
&gt;&gt; Speaker 3: You mentioned
that JSON encapsulates Jasmine.

79
00:05:30.750 --> 00:05:34.510
I was just wondering, does that mean you
could basically just replace Jasmine

80
00:05:34.510 --> 00:05:38.040
with Jest,
if you had a bunch of Jasmine tests?

81
00:05:38.040 --> 00:05:40.632
&gt;&gt; Brian Holt: I don't know
if I'm ready to assert that,

82
00:05:40.632 --> 00:05:43.800
but I'm gonna assert that
it's pretty damn close.

83
00:05:43.800 --> 00:05:46.615
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Brian Holt: I don't know if it's

84
00:05:46.615 --> 00:05:50.390
drop-in, that's what I'm trying to say,
but it's probably pretty close.

85
00:05:50.390 --> 00:05:52.910
&gt;&gt; Speaker 4: So the only reason
this works is because we've got

86
00:05:52.910 --> 00:05:56.690
a static data file that's
the same every time?

87
00:05:56.690 --> 00:06:01.230
&gt;&gt; Brian Holt: Yep, so going back to this,
now I can run it as many times as I want.

88
00:06:01.230 --> 00:06:02.604
I don't have to put
the --no-cache in anymore.

89
00:06:02.604 --> 00:06:05.965
So NODE_ENV = jest, or test jest.

90
00:06:08.997 --> 00:06:10.050
&gt;&gt; Speaker 3: Can we do a push?

91
00:06:10.050 --> 00:06:13.410
&gt;&gt; Brian Holt: Yeah, momentarily.

92
00:06:13.410 --> 00:06:16.300
So it compared it again, right?

93
00:06:16.300 --> 00:06:19.930
And the snapshot matched, so
it just keeps doing that, right?

94
00:06:22.500 --> 00:06:26.237
And it'll pass,
cuz we haven't changed it all.

95
00:06:26.237 --> 00:06:30.340
So, let's actually go modify search.js so
it does fail.

96
00:06:30.340 --> 00:06:35.019
So I'm gonna change svideo
to be something else.

97
00:06:36.559 --> 00:06:40.510
&gt;&gt; Brian Holt: Okay, so
I've changed it to say something else now.

98
00:06:40.510 --> 00:06:42.948
And if I run NODE_ENV=test jest.

99
00:06:48.071 --> 00:06:50.795
&gt;&gt; Brian Holt: Now I get a failure that
says, hey, something changed since

100
00:06:50.795 --> 00:06:53.640
the last time I ran this snapshot,
gives you the whole output.

101
00:06:56.197 --> 00:06:59.581
&gt;&gt; Brian Holt: But
it's gonna tell you right here, hey,

102
00:06:59.581 --> 00:07:02.710
this is what my snapshot has, svideo.

103
00:07:02.710 --> 00:07:07.679
Now it has something else, I can't pass
this, I don't know what to do with this.

104
00:07:12.961 --> 00:07:17.561
&gt;&gt; Brian Holt: So, what you do with
this at this point you say, okay, well,

105
00:07:17.561 --> 00:07:22.610
this is actually what I expect,
I want it to say something else now.

106
00:07:22.610 --> 00:07:28.705
So I say, -u as saying, okay,
run this again, but update my snapshot.

107
00:07:30.035 --> 00:07:32.963
&gt;&gt; Brian Holt: And so you said,
okay, it updated one snapshot,

108
00:07:32.963 --> 00:07:34.370
because you told me to.

109
00:07:34.370 --> 00:07:36.690
And that's how you do it.

110
00:07:40.323 --> 00:07:44.430
&gt;&gt; Brian Holt: But let's go back and
change it back svideo.

111
00:07:44.430 --> 00:07:45.460
So if you run it without u,

112
00:07:45.460 --> 00:07:50.519
it's gonna fail again
&gt;&gt; Brian Holt: But now we want to update,

113
00:07:50.519 --> 00:07:54.881
so we'll give it back and
now we're in good shape again.

114
00:07:58.791 --> 00:08:03.065
&gt;&gt; Brian Holt: I think snapshot testing
is phenomenal, because it's free testing,

115
00:08:03.065 --> 00:08:04.390
right?

116
00:08:04.390 --> 00:08:09.090
They're not exactly the most robust,
best tests, but the fact that they are so

117
00:08:09.090 --> 00:08:10.270
cheap to write.

118
00:08:10.270 --> 00:08:12.830
Like, the test itself is what, four lines?

119
00:08:14.872 --> 00:08:18.250
&gt;&gt; Brian Holt: Three lines, three lines
of actual code to get that test, right?

120
00:08:18.250 --> 00:08:21.190
Writing a test in three lines
that tests all of the markup?

121
00:08:21.190 --> 00:08:23.250
Pretty compelling to me.

122
00:08:23.250 --> 00:08:25.025
And it's up to you to decide
if you think it's compelling.

123
00:08:27.445 --> 00:08:30.251
&gt;&gt; Brian Holt: But, like I said,
it doesn't really tell you too much, but

124
00:08:30.251 --> 00:08:31.690
it's just a good litmus test.

125
00:08:31.690 --> 00:08:34.910
And it's so cheap,
it's almost free to write.

126
00:08:34.910 --> 00:08:38.002
&gt;&gt; Speaker 2: Question, is there
a way to shorten that diff output so

127
00:08:38.002 --> 00:08:40.020
you get just a contextual diff?

128
00:08:40.020 --> 00:08:44.466
&gt;&gt; Brian Holt: Probably,
I wonder, jest --help.

129
00:08:51.346 --> 00:08:53.440
&gt;&gt; Brian Holt: It's got all sorts of
really interesting things in here.

130
00:08:55.927 --> 00:09:03.631
&gt;&gt; Brian Holt: --json,
&gt;&gt; Brian Holt: --debug, --coverage.

131
00:09:03.631 --> 00:09:04.548
&gt;&gt; Speaker 2: --onlyChanged?

132
00:09:04.548 --> 00:09:05.745
&gt;&gt; Brian Holt: --onlyChanged?

133
00:09:05.745 --> 00:09:08.579
&gt;&gt; Speaker 2: No.

134
00:09:08.579 --> 00:09:10.984
&gt;&gt; Brian Holt: No,
I mean the answer's probably,

135
00:09:10.984 --> 00:09:14.250
it has all sorts of really
interesting features.

136
00:09:14.250 --> 00:09:18.310
Another one that's really
interesting to me is --watch.

137
00:09:18.310 --> 00:09:20.810
So it's gonna be watch on the side, right?

138
00:09:20.810 --> 00:09:23.114
And every time that I change
something in my codes,

139
00:09:23.114 --> 00:09:25.053
let's say if I come back here to ShowCard.

140
00:09:25.053 --> 00:09:30.804
And say, yeah, this is now gonna say we're

141
00:09:30.804 --> 00:09:38.590
gonna have an h1 here that
says h1 something, and I save.

142
00:09:38.590 --> 00:09:40.980
It's going to rerun the test suite and
them I'm gonna get the answer, right?

143
00:09:42.773 --> 00:09:45.190
&gt;&gt; Brian Holt: But
it's just gonna keep re-running.

144
00:09:45.190 --> 00:09:46.760
And only, for the most part,

145
00:09:46.760 --> 00:09:50.643
I think it can run just the test that are
affected, which is interesting as well.

146
00:09:52.255 --> 00:09:56.066
&gt;&gt; Brian Holt: You can press a at any
time, it'll re-run all the tests.

147
00:09:56.066 --> 00:09:58.505
You can say run only ones that
have changed since last time.

148
00:10:00.055 --> 00:10:05.443
You can update if you press u,
you can press q to exit.

149
00:10:05.443 --> 00:10:07.275
So --watch is another
interesting tool as well.

