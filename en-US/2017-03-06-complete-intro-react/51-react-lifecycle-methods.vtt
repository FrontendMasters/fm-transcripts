WEBVTT

1
00:00:00.630 --> 00:00:03.060
&gt;&gt; Brian Holt: So
let's go back to details.

2
00:00:03.060 --> 00:00:06.060
We've gone this entire class,
we haven't talked about actually one of

3
00:00:06.060 --> 00:00:09.820
the more fundamental core concepts to
react, which is the life cycle methods.

4
00:00:11.100 --> 00:00:13.860
And we've dealt with one of them,

5
00:00:13.860 --> 00:00:18.990
which is get initial state, which is
whenever you first create a component,

6
00:00:18.990 --> 00:00:21.650
one of the first methods it
calls is get initial state.

7
00:00:21.650 --> 00:00:26.580
There's actually a couple other steps in
its lifecycle of a component that you can

8
00:00:26.580 --> 00:00:29.800
hook into to do very interesting things.

9
00:00:29.800 --> 00:00:32.070
So the first one definitely
is getInitialState,

10
00:00:32.070 --> 00:00:35.790
that's gonna be the first one
/constructor if you're using ES6 classes.

11
00:00:36.870 --> 00:00:39.980
The next one is called componentWillMount

12
00:00:39.980 --> 00:00:44.072
which gets called right before your
component gets put into the DOM.

13
00:00:44.072 --> 00:00:46.470
So if you need to do anything
before it's put into the DOM,

14
00:00:46.470 --> 00:00:47.980
this is the place that you
would typically do it.

15
00:00:49.450 --> 00:00:52.230
I will say that I almost
never use componentWillMount.

16
00:00:52.230 --> 00:00:55.610
That's usually not useful to me.

17
00:00:55.610 --> 00:01:00.910
The one that I use a lot and
you will use a lot is componentDidMount.

18
00:01:00.910 --> 00:01:03.030
So you call it right after
it gets put onto the DOM.

19
00:01:05.120 --> 00:01:07.330
OK so component did mount.

20
00:01:07.330 --> 00:01:10.260
That gets called right after
it gets put into the DOM.

21
00:01:10.260 --> 00:01:14.150
Now this is useful because we're gonna
talk about universal server side

22
00:01:14.150 --> 00:01:14.800
rendering of react.

23
00:01:14.800 --> 00:01:18.260
You can render your app entirely
on your node server and

24
00:01:18.260 --> 00:01:20.410
then send down the complete mark up.

25
00:01:20.410 --> 00:01:23.020
Supercool and
it's actually not super difficult to do.

26
00:01:24.840 --> 00:01:26.931
The nice thing is that componentWillMount,

27
00:01:26.931 --> 00:01:30.176
if anything needs to get run also in
the node environment, you put it in

28
00:01:30.176 --> 00:01:34.344
componentWillMount cuz componentWillMount
does get called in the node environments.

29
00:01:34.344 --> 00:01:37.970
ComponentWillMount does get
called in the node environment.

30
00:01:37.970 --> 00:01:41.060
ComponentDidMount does not get
called in the node environment.

31
00:01:41.060 --> 00:01:43.110
And I think that logically follows, right?

32
00:01:43.110 --> 00:01:45.840
It doesn't actually get put onto a DOM,
so it never gets called.

33
00:01:47.420 --> 00:01:50.180
So, let's talk about the things
that go into componentDidMount.

34
00:01:50.180 --> 00:01:52.070
&gt;&gt; Speaker 2: We've
actually done it before.

35
00:01:52.070 --> 00:01:56.830
Performance things, reasons for
did mount over will mount?

36
00:01:56.830 --> 00:01:59.150
&gt;&gt; Brian Holt: I can't think of any
perf reasons that you would do it.

37
00:01:59.150 --> 00:02:03.390
Other than like, again if you didn't want
to get called into the node environment.

38
00:02:03.390 --> 00:02:04.940
That's really the only consideration.

39
00:02:07.550 --> 00:02:12.280
But the thing that you can guarantee
in componentDidMount is the browser,

40
00:02:12.280 --> 00:02:14.440
the browser DOM APIs are available, right?

41
00:02:14.440 --> 00:02:17.330
Because if it gets mounted into the DOM
you can guarantee that the DOM isn't

42
00:02:17.330 --> 00:02:18.374
there, right?

43
00:02:18.374 --> 00:02:21.480
Whereas componentWillMount, you have
no guarantee that the DOM is available.

44
00:02:22.900 --> 00:02:25.370
So anything that you have to
interact with the DOM, right.

45
00:02:25.370 --> 00:02:27.880
For the most part, you don't directly
want to interact with the DOM when you're

46
00:02:27.880 --> 00:02:28.840
working with React.

47
00:02:28.840 --> 00:02:32.470
You want React to interact with the DOM,
and then you interact with React.

48
00:02:32.470 --> 00:02:34.040
That's generally the pattern.

49
00:02:34.040 --> 00:02:36.980
However this is web development,
things are messy.

50
00:02:36.980 --> 00:02:39.640
Sometimes you just have
to do things like that.

51
00:02:39.640 --> 00:02:41.420
So that's where you would do it,
is componentDidMount.

52
00:02:43.100 --> 00:02:45.920
You do AJAX in componentDidMount

53
00:02:45.920 --> 00:02:48.290
because first of all you
want to display something.

54
00:02:48.290 --> 00:02:51.340
They see something, whether that's
a loading stage or something like that.

55
00:02:52.500 --> 00:02:54.660
So that's why you want to
do an incomponented mount.

56
00:02:54.660 --> 00:02:58.230
You want to be able to see something and
then once you actually have the data come

57
00:02:58.230 --> 00:03:01.410
back from AJAX then you display
whatever you're looking for.

58
00:03:02.790 --> 00:03:05.290
So AJAX gets done in componentDidMount.

59
00:03:05.290 --> 00:03:08.484
If you need to integrate with jQuery
we talked a little bit about doing

60
00:03:08.484 --> 00:03:13.120
jQuery.payments you would do that
inside of componentDidMount.

61
00:03:13.120 --> 00:03:17.380
If you need to set up any side event
listeners, which again, suck, but

62
00:03:17.380 --> 00:03:20.437
if you need to,
you do that in componentDidMount.

63
00:03:22.469 --> 00:03:24.135
&gt;&gt; Brian Holt: Yeah,
if you're working with D3,

64
00:03:24.135 --> 00:03:26.460
you'll do a bunch of stuff
in componentDidMount.

65
00:03:28.830 --> 00:03:31.290
So, as you can see, there's a bunch
of uses for componentDidMount.

66
00:03:31.290 --> 00:03:33.370
That's why you often do have
to use componentDidMount.

67
00:03:34.460 --> 00:03:38.440
And then the last one is
componentWillUnmount.

68
00:03:38.440 --> 00:03:40.050
So, that's right before it leaves the DOM.

69
00:03:40.050 --> 00:03:43.560
And this is almost exclusively for
cleanup, right?

70
00:03:43.560 --> 00:03:46.110
So, if you put any DOM listeners on,
and you have to go remove them, or

71
00:03:46.110 --> 00:03:49.900
you have memory leaks,
anything else that you need to do,

72
00:03:49.900 --> 00:03:53.890
that you need to clean up before
you remove that component.

73
00:03:53.890 --> 00:03:56.952
&gt;&gt; Speaker 2: If you are using
something for like, a pub sub,

74
00:03:56.952 --> 00:04:02.590
is componentWillUnmount where you would
want to have it like, stop listening?

75
00:04:02.590 --> 00:04:03.760
&gt;&gt; Brian Holt: Yep, unsubscribe.

76
00:04:03.760 --> 00:04:05.020
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: Yep, absolutely.

77
00:04:06.660 --> 00:04:08.190
&gt;&gt; Speaker 2: Sublime tool question.

78
00:04:08.190 --> 00:04:08.690
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 2: Okay.

79
00:04:08.690 --> 00:04:12.773
They're not getting any auto completes for

80
00:04:12.773 --> 00:04:15.800
the HTML.
Is that supposed to be included in that

81
00:04:16.960 --> 00:04:17.490
whole thing?

82
00:04:17.490 --> 00:04:20.870
So he needs another package?

83
00:04:20.870 --> 00:04:24.900
&gt;&gt; Brian Holt: Yeah, I'm assuming,
well, auto completes.

84
00:04:24.900 --> 00:04:26.640
It depends on what kind of auto
complete you're talking about.

85
00:04:26.640 --> 00:04:27.400
If you're talking about emmet,

86
00:04:27.400 --> 00:04:31.940
specifically, there is
some configuration to it.

87
00:04:31.940 --> 00:04:36.530
And there's a stack overflow
question that I asked [LAUGH] that

88
00:04:36.530 --> 00:04:40.870
one of the authors of the packages comes
and tells me how to get emmet to work.

89
00:04:40.870 --> 00:04:42.319
So I would recommend checking that out.

90
00:04:43.470 --> 00:04:47.660
For everything else, I think there's
another package that someone else uses.

91
00:04:47.660 --> 00:04:49.255
And I don't recall what it is.

92
00:04:49.255 --> 00:04:55.561
[SOUND] But anyway,
there's more configuration to be done.

93
00:04:55.561 --> 00:04:56.480
Unfortunately I don't remember what it is.

94
00:04:59.933 --> 00:05:00.640
&gt;&gt; Brian Holt: Cool.

95
00:05:00.640 --> 00:05:02.995
Any questions so
far about life cycle methods?

96
00:05:06.603 --> 00:05:11.080
&gt;&gt; Brian Holt: So, there are a few
others that are much more niche.

97
00:05:11.080 --> 00:05:15.510
There's like getDefaultProps if for
whatever reason you needed default props.

98
00:05:15.510 --> 00:05:19.150
That's usually called at the root
level of your application.

99
00:05:21.400 --> 00:05:25.180
This can be useful for things like
dependency injection if you're into that.

100
00:05:25.180 --> 00:05:31.800
I am not so I typically don't but
this is somewhere that you could do it.

101
00:05:31.800 --> 00:05:34.410
I don't believe I've actually ever
shipped code with getDefaultProps.

102
00:05:34.410 --> 00:05:38.020
So that tells you how often it gets used.

103
00:05:38.020 --> 00:05:43.910
There is shouldComponentUpdate,
which I do use occasionally.

104
00:05:43.910 --> 00:05:47.729
That's almost exclusively used for,
I'm gonna say it's used exclusively for

105
00:05:47.729 --> 00:05:48.860
performance reasons.

106
00:05:50.300 --> 00:05:53.270
So the way that React tells if
the component used a update is

107
00:05:53.270 --> 00:05:54.400
it looks at it's state.

108
00:05:54.400 --> 00:05:57.649
And if the state has not been modified
from the last time it saw it, it says,

109
00:05:57.649 --> 00:05:58.680
cool nothing changed,

110
00:05:58.680 --> 00:06:02.309
I'm just not gonna even rerun the render
method because none of the state changed.

111
00:06:05.080 --> 00:06:08.560
But let's say you have deeply nested
data that has to go all the way in and

112
00:06:08.560 --> 00:06:12.090
check every tiny, little thing and
then come all the way back out.

113
00:06:12.090 --> 00:06:14.600
Right?
That's expensive as you might imagine.

114
00:06:16.220 --> 00:06:20.650
So if you're having a bunch of re-renders
being called on deeply nested data,

115
00:06:20.650 --> 00:06:21.890
that's gonna be slow.

116
00:06:21.890 --> 00:06:25.540
It's gonna slow down your re-renders and
it's gonna be visibly noticeable.

117
00:06:26.800 --> 00:06:30.950
So React kind of gives you an escape hatch
for that called shouldComponentUpdate.

118
00:06:30.950 --> 00:06:34.410
And if you are going to be better at
telling React to update than React itself

119
00:06:34.410 --> 00:06:37.352
will be, then that's when you kind
of lean on shouldComponentUpdate.

120
00:06:37.352 --> 00:06:42.050
So, for example, maybe you can
look at some id and say, okay,

121
00:06:42.050 --> 00:06:46.750
if just the id changed then
I know I need to update.

122
00:06:46.750 --> 00:06:49.750
But if the id didn't change then don't
bother looking at everything else.

123
00:06:49.750 --> 00:06:52.114
That's something you would
do in shouldComponentUpdate.

124
00:06:52.114 --> 00:07:00.770
Another thing is what happens if you have
a component that just never updates?

125
00:07:00.770 --> 00:07:05.120
Or should never update than you just say
shouldComponentUpdate, return false.

126
00:07:05.120 --> 00:07:06.930
And then it will never update ever.

127
00:07:08.020 --> 00:07:11.147
Question?
&gt;&gt; Speaker 2: Okay this is a remark coming

128
00:07:11.147 --> 00:07:14.940
back to the using AJAX in the didMount.

129
00:07:14.940 --> 00:07:16.050
&gt;&gt; Brian Holt: Mm-hm.
&gt;&gt; Speaker 2: Anton is asking,

130
00:07:16.050 --> 00:07:19.693
is it really better to make AJAX calls
in componentDidMount rather than

131
00:07:19.693 --> 00:07:21.450
componentWillMount?

132
00:07:21.450 --> 00:07:25.460
I heard that someone from React
community suggested to use timers

133
00:07:25.460 --> 00:07:29.880
in componentDidMountHook but
AJAX calls and componentWillNotHook?

134
00:07:31.830 --> 00:07:34.830
&gt;&gt; Brian Holt: Yeah, I mean I can see what
you're getting at because you wanna kick

135
00:07:34.830 --> 00:07:38.800
off those AJAX calls as soon as possible.

136
00:07:38.800 --> 00:07:44.050
Honestly, the difference between willMount
and didMount is gonna be in milliseconds,

137
00:07:44.050 --> 00:07:47.650
so I think you're taking the happy
path by just putting it in didMount.

138
00:07:47.650 --> 00:07:50.160
And your code looks better,
it's easier to read.

139
00:07:50.160 --> 00:07:52.470
If those milliseconds are precious and

140
00:07:52.470 --> 00:07:56.170
critical to you, then you can
do some more fancy-pants stuff.

141
00:07:56.170 --> 00:07:58.170
But I would argue that you
wouldn't do it in willMount,

142
00:07:58.170 --> 00:08:00.700
you would actually go even
further outside of that.

143
00:08:00.700 --> 00:08:04.250
And maybe doing it even before
React bootstraps, right?

144
00:08:04.250 --> 00:08:06.200
Because then you're gonna
cut out a bunch of time and

145
00:08:06.200 --> 00:08:09.030
then do some sort of like
side loading of cache.

146
00:08:09.030 --> 00:08:15.012
So my simple answer to that question is
that's definitely an advanced use case and

147
00:08:15.012 --> 00:08:19.100
I would not suggest going down
there unless you have to.

148
00:08:20.922 --> 00:08:23.880
&gt;&gt; Brian Holt: Going back
to shouldComponentUpdate.

149
00:08:25.330 --> 00:08:29.920
I recommend avoiding shouldComponentUpdate
until you absolutely must use it.

150
00:08:29.920 --> 00:08:31.570
React is really good at what it does.

151
00:08:31.570 --> 00:08:34.700
It's really good at finding difs and
being really fast about it, especially for

152
00:08:34.700 --> 00:08:35.380
shallow data.

153
00:08:35.380 --> 00:08:37.570
For like stuff that we've done here.

154
00:08:37.570 --> 00:08:42.420
Nothing we've done here should we ever
put shouldComponentUpdates because

155
00:08:42.420 --> 00:08:43.919
as-is is fast enough.

156
00:08:43.919 --> 00:08:47.302
The reason why I say that is you're going
to come back later to these components and

157
00:08:47.302 --> 00:08:48.872
you're going to update something and

158
00:08:48.872 --> 00:08:51.980
all of a sudden you're going to expect
it to change data in a different way.

159
00:08:51.980 --> 00:08:55.310
And if you have a shouldComponentUpdate
return false, your component's

160
00:08:55.310 --> 00:08:58.260
never going to update and you're going
to be like why is this not updating?

161
00:08:58.260 --> 00:09:00.840
I'm changing the data
why is it not updating?

162
00:09:00.840 --> 00:09:03.400
So it introduces these weird
bugs especially as you come back

163
00:09:03.400 --> 00:09:04.790
to maintain stuff.

164
00:09:04.790 --> 00:09:07.590
So it's like let's React do React,
right and

165
00:09:07.590 --> 00:09:10.990
then come back to fixing
that are the bottlenecks.

166
00:09:10.990 --> 00:09:14.971
This is also generally good programming
advice like don't introduce caching,

167
00:09:14.971 --> 00:09:17.605
don't introduce minimalization,
all that stuff,

168
00:09:17.605 --> 00:09:20.900
until you absolutely have to
because that stuff's hard, right?

169
00:09:20.900 --> 00:09:22.350
You ends up with bigger problems.

170
00:09:22.350 --> 00:09:25.030
Does that make sense?

171
00:09:27.170 --> 00:09:30.870
Something I'm not gonna show you today,
but one can look at later.

172
00:09:30.870 --> 00:09:34.750
There's a thing called the React
perf tools, which come from React.

173
00:09:34.750 --> 00:09:36.810
And you can actually visualize and

174
00:09:36.810 --> 00:09:42.720
see charts of where your application
is wasting render cycles.

175
00:09:42.720 --> 00:09:46.700
So it has three different metrics,
print inclusive, print exclusive, and

176
00:09:46.700 --> 00:09:48.360
print wasted.

177
00:09:48.360 --> 00:09:52.590
Print inclusive is going to
include life cycle methods.

178
00:09:52.590 --> 00:09:55.240
Print exclusive is going to
exclude life cycle methods.

179
00:09:55.240 --> 00:09:59.190
And print wasted is just going to show you
where you're literally just wasting time.

180
00:09:59.190 --> 00:10:03.490
You're literally just running renders
that are not doing anything or

181
00:10:03.490 --> 00:10:04.160
all that kind of stuff.

182
00:10:07.350 --> 00:10:11.640
This will be really telling of where you
should put in shouldComponentUpdate, so

183
00:10:11.640 --> 00:10:16.910
definitely dig into those, especially
if you have an app that's going slow.

184
00:10:16.910 --> 00:10:20.280
And one thing I'll definitely throw
out is avoid putting your SPGs

185
00:10:21.310 --> 00:10:22.669
as React components.

186
00:10:24.150 --> 00:10:27.160
SPGs tend to get complicated really
quickly, just cuz there's lots of lines

187
00:10:27.160 --> 00:10:29.660
and paths and shapes and
all sorts of stuff like that.

188
00:10:29.660 --> 00:10:31.364
There's cool stuff you can do with it,
right?

189
00:10:31.364 --> 00:10:35.310
React knows how to do SPG
cuz it's just XML, right?

190
00:10:35.310 --> 00:10:41.000
You can do JSX, SPGs, but
they tend to be slow.

191
00:10:41.000 --> 00:10:45.900
So if you're not doing any sort of like
direct manipulation of the SVG with React,

192
00:10:45.900 --> 00:10:48.120
I'd say, leave them outside of React.

193
00:10:48.120 --> 00:10:49.360
&gt;&gt; Speaker 3: Would you
go hardware acceleration?

194
00:10:51.520 --> 00:10:52.340
&gt;&gt; Brian Holt: No difference, right.

195
00:10:52.340 --> 00:10:54.510
The browser is still rendering
in SVG the same way.

196
00:10:55.730 --> 00:10:59.970
So, no that's however
the browser's doing it.

197
00:10:59.970 --> 00:11:02.330
This is just how it gets
to the browser eventually.

198
00:11:02.330 --> 00:11:04.364
&gt;&gt; Speaker 2: I'm not sure if
this one got asked already.

199
00:11:04.364 --> 00:11:07.466
Michael is asking does onEnter
still exist in React Router?

200
00:11:07.466 --> 00:11:07.966
&gt;&gt; Brian Holt: No.

201
00:11:12.350 --> 00:11:13.730
&gt;&gt; Brian Holt: Good question.

202
00:11:13.730 --> 00:11:18.240
I didn't do anything with animation so
you'd have to go look yourself.

203
00:11:18.240 --> 00:11:21.487
I don't believe it did make it, though.

204
00:11:24.249 --> 00:11:27.613
&gt;&gt; Brian Holt: Yeah, I think you would
just lean on the typical React lifecycles

205
00:11:27.613 --> 00:11:30.071
of how you would normally
do React animations.

