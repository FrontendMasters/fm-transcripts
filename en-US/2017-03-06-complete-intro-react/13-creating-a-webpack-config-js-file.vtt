WEBVTT

1
00:00:00.410 --> 00:00:04.002
&gt;&gt; Brian: All right.
So, now, we have Babel set up to run, or

2
00:00:04.002 --> 00:00:08.522
we have configure,
now we have to include it to learn.

3
00:00:08.522 --> 00:00:13.602
So, what we're gonna do is go back

4
00:00:13.602 --> 00:00:19.735
to you command line and say, webpack --

5
00:00:19.735 --> 00:00:24.834
module- bind = 'js=babel'.

6
00:00:24.834 --> 00:00:29.280
Then the same thing we had

7
00:00:29.280 --> 00:00:34.787
before js/ClientApp.js and

8
00:00:34.787 --> 00:00:39.059
public/bundle.js.

9
00:00:39.059 --> 00:00:44.210
To dissect this the module buying
the part that we add is just saying,hey,

10
00:00:44.210 --> 00:00:46.850
anytime you come across a .js file.

11
00:00:46.850 --> 00:00:50.269
Just go ahead and run that through Babel.

12
00:00:55.386 --> 00:00:59.530
&gt;&gt; Brian: And Babel specifically is
running what's called the Babel Loader.

13
00:00:59.530 --> 00:01:01.100
And I kind of alluded to this earlier, but

14
00:01:01.100 --> 00:01:06.160
what I'm getting at is there's a concept
of what's called a loader in Webpack.

15
00:01:06.160 --> 00:01:08.570
And that's just saying,
it's kind of a plug-in to say.

16
00:01:08.570 --> 00:01:11.340
Like, hey, here's a middle transform
I want you to run this through.

17
00:01:11.340 --> 00:01:14.320
It's just kind of like
an additional functionality.

18
00:01:14.320 --> 00:01:16.400
So, that's how you get that in there.

19
00:01:16.400 --> 00:01:17.550
They're called loaders.

20
00:01:20.270 --> 00:01:21.700
Okay, so, now,
we should be able to run this.

21
00:01:21.700 --> 00:01:24.110
It's going to take much
longer than it did before.

22
00:01:24.110 --> 00:01:25.910
Because now everything
is getting transformed.

23
00:01:29.510 --> 00:01:31.220
And that is not a slow process.

24
00:01:34.146 --> 00:01:34.646
&gt;&gt; Brian: Okay?

25
00:01:38.087 --> 00:01:40.520
&gt;&gt; Brian: So, now,
everything is being run through Babel.

26
00:01:42.860 --> 00:01:44.290
And now, we can start using ES6.

27
00:01:44.290 --> 00:01:45.380
We can start using JSX.

28
00:01:45.380 --> 00:01:46.790
All these things are available to us.

29
00:01:49.260 --> 00:01:54.690
Now, you could just go ahead and drop this
Webpack command into your MPM scripts.

30
00:01:54.690 --> 00:01:57.320
But what's actually and
better for us to do.

31
00:01:57.320 --> 00:02:02.060
Because we're going to start adding more,
and more options to this Webpack build.

32
00:02:02.060 --> 00:02:03.580
We're just going to make a config file.

33
00:02:03.580 --> 00:02:05.490
And that's a million
times easier to maintain.

34
00:02:05.490 --> 00:02:08.861
&gt;&gt; [COUGH]
&gt;&gt; Brian: Bless you.

35
00:02:10.716 --> 00:02:15.116
&gt;&gt; Brian: So, go create a new
file called webpack.config.js,

36
00:02:15.116 --> 00:02:22.055
we're gonna put that in the root directory
of your particular project, and save that.

37
00:02:25.517 --> 00:02:31.940
&gt;&gt; Brian: And what we're gonna do here
is we're going to make our config.

38
00:02:34.340 --> 00:02:38.330
So, const path equals required path.

39
00:02:38.330 --> 00:02:41.480
Path is just a,

40
00:02:44.730 --> 00:02:48.860
it's a node module that kind of helps
you resolve paths, so you don't have

41
00:02:48.860 --> 00:02:51.810
to do it by hand, it's just a really
useful thing that comes with node.

42
00:02:51.810 --> 00:02:52.850
If you have any more questions about it,

43
00:02:52.850 --> 00:02:54.280
you can just check out
the node docs on it.

44
00:02:55.650 --> 00:03:02.540
Okay, and then we're gonna say,
a module.exports equals an object.

45
00:03:02.540 --> 00:03:07.406
So, the reason why we're not doing,
we're doing common JS here, and

46
00:03:07.406 --> 00:03:12.286
not import export ES6 modules,
is this is only going to be run in node.

47
00:03:12.286 --> 00:03:16.535
And we could technically run this through
Babble, but it's like, five more steps to

48
00:03:16.535 --> 00:03:20.500
avoid writing import and, or avoid
writing require, and module that export.

49
00:03:20.500 --> 00:03:24.286
So, I just side step it, and
I just write it in the default note way.

50
00:03:28.103 --> 00:03:33.554
&gt;&gt; Brian: Okay, so,
module.exports equals this object,

51
00:03:33.554 --> 00:03:38.130
I'm gonna say, context:__dorname.

52
00:03:38.130 --> 00:03:42.234
This is just letting Webpack know,
whenever I run this command from

53
00:03:42.234 --> 00:03:46.678
anywhere inside of this project,
go back to the root directory.

54
00:03:46.678 --> 00:03:48.460
Cuz this __dirname, it's a node thing,

55
00:03:48.460 --> 00:03:52.310
it's just basically saying this
is where the project is from.

56
00:03:55.000 --> 00:03:58.373
Entry.
You have to tell it where to enter your

57
00:03:58.373 --> 00:04:03.840
project, and it's gonna be in
./js /ClientApp.js, right?

58
00:04:03.840 --> 00:04:05.109
That's the entry point to our app.

59
00:04:08.371 --> 00:04:09.290
&gt;&gt; Brian: Devtool.

60
00:04:11.120 --> 00:04:14.450
There's several different kind
of devtools you can put in here.

61
00:04:14.450 --> 00:04:18.746
This is a debugging tool to
help you Instead of seeing line

62
00:04:18.746 --> 00:04:22.333
50,000 of bundled up JS we want, right?

63
00:04:22.333 --> 00:04:26.980
We want to see that this is actually
a problem in my titled JS on line ten.

64
00:04:26.980 --> 00:04:29.350
So, source maps, right?

65
00:04:29.350 --> 00:04:34.150
So, if you want to put full source
maps here you can say, source-map.

66
00:04:34.150 --> 00:04:35.640
That's fine too.

67
00:04:35.640 --> 00:04:37.550
That takes a little bit longer to build.

68
00:04:37.550 --> 00:04:39.050
I'm very impatient.

69
00:04:39.050 --> 00:04:42.486
So, I put eval here,
which is a faster dirtier way of doing it.

70
00:04:42.486 --> 00:04:49.586
So, up to you whatever you wanna do.

71
00:04:49.586 --> 00:04:53.591
Output.

72
00:04:53.591 --> 00:04:55.670
You have to tell it where
to put to your output.

73
00:04:57.020 --> 00:05:01.792
So, the path of where we
want it to put is path.join.

74
00:05:01.792 --> 00:05:05.890
__dirname, /public.

75
00:05:12.849 --> 00:05:13.654
&gt;&gt; Brian: This makes sense, right?

76
00:05:13.654 --> 00:05:17.450
This is where you want
the bundle dot JS to go, and

77
00:05:17.450 --> 00:05:22.817
you call is bundle.js
&gt;&gt; Brian: But

78
00:05:22.817 --> 00:05:24.860
you could put whatever
here if you wanted to.

79
00:05:27.008 --> 00:05:27.921
&gt;&gt; Brian: Resolve.

80
00:05:31.641 --> 00:05:33.587
&gt;&gt; Brian: Extensions.

81
00:05:36.651 --> 00:05:42.606
&gt;&gt; Brian: And do .js and .json.

82
00:05:45.249 --> 00:05:48.261
&gt;&gt; Brian: So, if I say require
this file with no extension,

83
00:05:48.261 --> 00:05:53.770
this is the progression of file names it's
going to go through before it gives up.

84
00:05:53.770 --> 00:05:58.994
So, if I say, just for example,

85
00:05:58.994 --> 00:06:06.930
import Blah from ./
Blah with no extension.

86
00:06:06.930 --> 00:06:09.900
It's first going to check if there's
literally a file called .Blah with

87
00:06:09.900 --> 00:06:10.770
no extension.

88
00:06:10.770 --> 00:06:16.098
Then it's going to check is there a .js,
you know, blah.js, no, okay.

89
00:06:16.098 --> 00:06:19.660
Is there a blah.json, yes,
then it includes that, right?

90
00:06:19.660 --> 00:06:23.158
So, this is the progression that it's
gonna go through before it gives up.

91
00:06:23.158 --> 00:06:27.670
So, if I have three files .blah,
.js, .blah.json.

92
00:06:27.670 --> 00:06:29.910
One, name your files better.

93
00:06:29.910 --> 00:06:32.593
But two its gonna include
the one with no file extension.

94
00:06:36.509 --> 00:06:37.073
&gt;&gt; Travis: I have a question.

95
00:06:37.073 --> 00:06:37.597
&gt;&gt; Brian: Yeah.

96
00:06:37.597 --> 00:06:39.260
&gt;&gt; Travis: I'm Travis.

97
00:06:39.260 --> 00:06:41.309
Do you recommend dev tools for
production build?

98
00:06:42.450 --> 00:06:44.810
&gt;&gt; Brian: No, no,
you should not ship those,

99
00:06:44.810 --> 00:06:47.530
because they're way bigger
than they need to be.

100
00:06:47.530 --> 00:06:49.740
They usually end up being way
bigger than the files, right?

101
00:06:49.740 --> 00:06:52.036
So, yeah,
definitely don't do that in production.

102
00:06:52.036 --> 00:06:53.596
Good question.

103
00:06:55.671 --> 00:07:01.946
&gt;&gt; Brian: Stats, this is just what kind of
stuff do you want webpack to report on.

104
00:07:01.946 --> 00:07:08.170
Colors, hell, yeah, [LAUGH],
cuz I like colors, reasons.

105
00:07:08.170 --> 00:07:12.030
This is gonna tell you if
stuff fails why it failed.

106
00:07:12.030 --> 00:07:14.340
Very useful to know, chunks.

107
00:07:15.600 --> 00:07:17.180
We're gonna be doing chunking tomorrow,
but

108
00:07:17.180 --> 00:07:22.236
you want it to report on all
the different chunk data as well.

109
00:07:22.236 --> 00:07:28.820
Okay, and then lastly, module.

110
00:07:28.820 --> 00:07:31.300
This is actually one of
the most important things.

111
00:07:31.300 --> 00:07:36.390
This is basically all of the transforms
that you want Webpack to apply,

112
00:07:36.390 --> 00:07:39.290
and it's done by a series of rules.

113
00:07:41.230 --> 00:07:42.770
And I think, that kinda make sense, right?

114
00:07:42.770 --> 00:07:47.093
I says like, okay, if it passes this
rule then apply this transformation,

115
00:07:47.093 --> 00:07:48.659
that's the process here.

116
00:07:51.275 --> 00:07:53.468
&gt;&gt; Brian: Okay, so, and
it's just a series of objects, and

117
00:07:53.468 --> 00:07:55.260
we're just gonna include one right now.

118
00:07:55.260 --> 00:07:57.970
So, the first thing is you need
to give it some sort of test, or

119
00:07:57.970 --> 00:08:01.960
some way for it to tell if a file
is going to be included, or not.

120
00:08:01.960 --> 00:08:03.660
This can be a function.

121
00:08:03.660 --> 00:08:06.630
If you need to be that granular about,
which files are included and,

122
00:08:06.630 --> 00:08:08.580
which are not.

123
00:08:08.580 --> 00:08:14.580
I'm just gonna say, test, and
then you can give it a regX.

124
00:08:14.580 --> 00:08:17.850
I'm no means a regX master,
but I can write that.

125
00:08:20.090 --> 00:08:24.628
Which basically says, if it ends in js
then run it through whatever this is.

126
00:08:24.628 --> 00:08:30.060
&gt;&gt; Speaker 3: Dinarte is asking do you
recommend the new Webpack in new projects?

127
00:08:31.350 --> 00:08:33.830
&gt;&gt; Brian: I think, it's safe to
include even with the beta version.

128
00:08:36.250 --> 00:08:39.880
I mean, the guy that writes the project.

129
00:08:39.880 --> 00:08:45.680
Well, of many, the Larkin on Twitter,
I can't remember what his name is either.

130
00:08:47.620 --> 00:08:48.620
He said it's not changing.

131
00:08:48.620 --> 00:08:49.850
They're just trying to finish up the doc.

132
00:08:49.850 --> 00:08:51.615
So, I think Webpack 2 is ready to go.

133
00:08:53.982 --> 00:08:55.460
&gt;&gt; Brian: But you know what?
Tweet at him, ask him.

134
00:08:55.460 --> 00:08:56.828
[LAUGH] He knows better than I do.

135
00:08:56.828 --> 00:08:59.910
&gt;&gt; [LAUGH]
&gt;&gt; Brian: Okay, so.

136
00:08:59.910 --> 00:09:03.988
If it passes the test, then I want you to
run it through this particular loader,

137
00:09:03.988 --> 00:09:10.828
which is babel-loader.

138
00:09:10.828 --> 00:09:12.990
That makes sense, right?

139
00:09:14.700 --> 00:09:16.620
If it passes this test,
then run it through babel loader.

140
00:09:19.440 --> 00:09:21.310
Which is an npn module that we installed,
right?,

141
00:09:21.310 --> 00:09:23.490
we installed babel loader
when we said yarn.

142
00:09:25.000 --> 00:09:25.924
Do you have a question?

143
00:09:25.924 --> 00:09:29.520
&gt;&gt; Travis: Is Webpack meant
to replace grunt and gulp, or

144
00:09:29.520 --> 00:09:31.830
does it serve different purpose?

145
00:09:31.830 --> 00:09:34.250
&gt;&gt; Brian: It does serve
a slightly different purpose.

146
00:09:34.250 --> 00:09:39.570
So, grunt and gulp are what you would
call a task runner, and basically

147
00:09:39.570 --> 00:09:43.380
you set up all these different tasks,
and you just say grunt run built, right?

148
00:09:43.380 --> 00:09:46.550
And then grunt's gonna pull in browser fi,
it's gonna pull in web pack and

149
00:09:46.550 --> 00:09:48.174
run it through the build, right?

150
00:09:48.174 --> 00:09:51.380
So, Webpack, browser five, roll up,

151
00:09:51.380 --> 00:09:56.560
these are bill tools that are actually
going to, or I guess, transpilot no.

152
00:09:56.560 --> 00:10:01.370
What do you want, I guess I will call
it a bill tool or module bundler.

153
00:10:01.370 --> 00:10:02.850
Bundler, that's actually
what I want to call it.

154
00:10:04.100 --> 00:10:04.800
That make sense?

155
00:10:07.196 --> 00:10:09.239
&gt;&gt; [LAUGH] [INAUDIBLE]
&gt;&gt; Speaker 3: So,

156
00:10:09.239 --> 00:10:15.090
what would be comparable to Grunt, or
Gold Pier would be the MPM scripts part.

157
00:10:15.090 --> 00:10:17.837
Where we set up those tasks
in MPM scripts that get run,

158
00:10:17.837 --> 00:10:21.325
that's what would be more analogous
to what Gulp and Grunt fulfill.

159
00:10:24.945 --> 00:10:29.045
&gt;&gt; Brian: Okay, so, let's go run this,
and then once I make sure it works,

160
00:10:29.045 --> 00:10:31.185
then I'll push up the new branch.

161
00:10:33.275 --> 00:10:35.975
So, before I had to do Webpack blah,
blah, blah, blah.

162
00:10:35.975 --> 00:10:39.025
But now, I have this config file,
which will find it automatically.

163
00:10:39.025 --> 00:10:41.584
So, I can just run Webpack and
it should just work.

164
00:10:48.637 --> 00:10:51.280
&gt;&gt; Brian: Cool, so, now,
we get this bundle file.

165
00:10:51.280 --> 00:10:53.990
We can go check again to make
sure that it still works.

166
00:10:53.990 --> 00:11:01.513
Everything still works, so let me just
go ahead and push up this git add.

167
00:11:01.513 --> 00:11:05.733
Git checkout

168
00:11:05.733 --> 00:11:10.339
-b v2-3.

169
00:11:10.339 --> 00:11:14.698
Git commit -m "3" git push.

170
00:11:25.018 --> 00:11:27.783
&gt;&gt; Brian: I think, I have 68.

171
00:11:31.301 --> 00:11:33.991
&gt;&gt; Brian: Okay, so, now,
v2-3 is available for

172
00:11:33.991 --> 00:11:37.370
those of you that wanted to
get that new build config.

173
00:11:41.870 --> 00:11:42.580
Any questions?

174
00:11:44.490 --> 00:11:50.950
Webpack is a complicated beast, and it's
usually like, again, a pretty big point

175
00:11:50.950 --> 00:11:55.950
of annoyance for developers approaching
react, or anything in modern JavaScript.

176
00:11:57.290 --> 00:11:59.970
It is complicated, right?

177
00:11:59.970 --> 00:12:01.680
So, like if you feel
like it's complicated,

178
00:12:01.680 --> 00:12:04.120
you are correct in your assertion.

179
00:12:04.120 --> 00:12:06.330
But it is a really cool tool.

180
00:12:06.330 --> 00:12:07.860
With a bit of prodding,

181
00:12:07.860 --> 00:12:11.070
and massaging you can do really
cool stuff for your codes so.

182
00:12:11.070 --> 00:12:12.030
My God-
&gt;&gt; Travis: I'm a fan.

