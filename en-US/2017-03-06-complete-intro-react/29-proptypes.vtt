WEBVTT

1
00:00:00.510 --> 00:00:02.932
&gt;&gt; Brian Holt: So,
let's go do our PropTypes now.

2
00:00:02.932 --> 00:00:06.232
So notice we're getting this, npn run dev.

3
00:00:06.232 --> 00:00:08.680
We're getting a linter error that says,
hey, you don't have PropTypes.

4
00:00:08.680 --> 00:00:12.387
That's something that
standard react enforces.

5
00:00:12.387 --> 00:00:15.328
So, let's actually go talk
about what those are.

6
00:00:18.463 --> 00:00:19.427
&gt;&gt; Brian Holt: So.

7
00:00:22.972 --> 00:00:27.932
&gt;&gt; Brian Holt: What we're going to
say here is we're going to say,

8
00:00:27.932 --> 00:00:32.103
const a { string } = React.PropTypes and

9
00:00:32.103 --> 00:00:37.758
then we're gonna use that here
above render on prop types.

10
00:00:37.758 --> 00:00:42.302
So an easy thing to get caught
up on capital P PropTypes here,

11
00:00:42.302 --> 00:00:44.539
lowercase p propTypes here.

12
00:00:48.757 --> 00:00:50.310
&gt;&gt; Brian Holt: I'll
explain why momentarily.

13
00:00:52.952 --> 00:00:56.622
&gt;&gt; Brian Holt: So here you're basically
gonna say here are things I expect to get

14
00:00:56.622 --> 00:00:57.565
from my parent.

15
00:00:59.674 --> 00:01:02.815
&gt;&gt; Brian Holt: And
that's really all you're saying here.

16
00:01:02.815 --> 00:01:04.996
So, I expect to get a show
object from my parent.

17
00:01:04.996 --> 00:01:08.114
So I'm gonna say, show.

18
00:01:08.114 --> 00:01:09.539
I need shape here as well.

19
00:01:09.539 --> 00:01:10.738
So, shape.

20
00:01:14.406 --> 00:01:15.666
&gt;&gt; Brian Holt: And
I expect to get a shape.

21
00:01:15.666 --> 00:01:17.379
Shape is just a word for object.

22
00:01:20.382 --> 00:01:23.095
&gt;&gt; Brian Holt: And I expect to get
the poster, which is a string.

23
00:01:24.325 --> 00:01:27.192
I expect to get the title,
which is a string.

24
00:01:27.192 --> 00:01:30.983
I expect to get the year,
which is also a string and

25
00:01:30.983 --> 00:01:35.962
I expect to get the description
which as you may guess is a string.

26
00:01:39.985 --> 00:01:40.937
&gt;&gt; Speaker 2: Aren't we
in the wrong component?

27
00:01:40.937 --> 00:01:42.461
&gt;&gt; Brian Holt: We are.

28
00:01:42.461 --> 00:01:44.302
Thank you.

29
00:01:44.302 --> 00:01:46.804
&gt;&gt; Speaker 2: No problem.

30
00:01:46.804 --> 00:01:48.925
&gt;&gt; Brian Holt: Sorry,
we need to go to ShowCard.

31
00:01:48.925 --> 00:01:52.502
This is what happens when
you teach a class too long.

32
00:01:52.502 --> 00:01:56.765
So cut that, we'll just rewrite that.

33
00:01:56.765 --> 00:02:03.818
Go into ShowCard above render
put your PropTypes and

34
00:02:03.818 --> 00:02:08.624
we're gonna say, const { shape,

35
00:02:08.624 --> 00:02:14.889
string } = React.PropTypes, PropTypes.

36
00:02:22.927 --> 00:02:26.288
&gt;&gt; Brian Holt: So, show is an object.

37
00:02:26.288 --> 00:02:29.341
That has a poster, a title,
a year and a description in it.

38
00:02:32.000 --> 00:02:33.336
&gt;&gt; Brian Holt: Now, why this is cool?

39
00:02:33.336 --> 00:02:35.711
his is cool for several reasons.

40
00:02:35.711 --> 00:02:39.758
First and foremost, I would think
the best reason to do PropTypes, so

41
00:02:39.758 --> 00:02:41.548
I guess I should preface this.

42
00:02:41.548 --> 00:02:43.009
This is totally optional.

43
00:02:43.009 --> 00:02:48.100
React does not need PropTypes to run,
it's totally fine without them.

44
00:02:49.590 --> 00:02:54.349
Why PropTypes are a good thing in my
opinion is anyone that comes to look at

45
00:02:54.349 --> 00:02:58.886
ShowCard later, instantly knows
the contract for this component.

46
00:02:58.886 --> 00:03:01.435
That if they wanna go include ShowCard
somewhere else, it's like cool.

47
00:03:01.435 --> 00:03:06.164
All I have to give it is the show
that has these properties in it and

48
00:03:06.164 --> 00:03:07.662
done, that's it.

49
00:03:07.662 --> 00:03:13.492
We can even go so far as to say like
.isRequired and now it's going to error.

50
00:03:13.492 --> 00:03:14.140
Well, it's not gonna error.

51
00:03:14.140 --> 00:03:16.914
It's gonna warn, if it's not there.

52
00:03:16.914 --> 00:03:17.818
&gt;&gt; Speaker 2: Two questions.

53
00:03:17.818 --> 00:03:22.125
Marcus is asking,
since we now have flow support via Babel,

54
00:03:22.125 --> 00:03:25.850
isn't it much simpler to
use instead of PropTypes?

55
00:03:25.850 --> 00:03:26.370
&gt;&gt; Brian Holt: Yes.

56
00:03:26.370 --> 00:03:30.380
Well, I'm not gonna assert that type
checking is any sort of simple.

57
00:03:30.380 --> 00:03:32.470
I will assert that it's probably better.

58
00:03:34.310 --> 00:03:38.028
I will allude to it briefly tomorrow, but

59
00:03:38.028 --> 00:03:43.563
I purposely did not use Flow or
TypeScript for this workshop.

60
00:03:43.563 --> 00:03:48.967
&gt;&gt; Speaker 2: Next question, this is back
at the question about, hang on, it's.

61
00:03:51.640 --> 00:03:53.594
&gt;&gt; Speaker 2: About using ShowCard and

62
00:03:53.594 --> 00:03:57.696
calling that DOM component
smart component thing.

63
00:03:57.696 --> 00:04:02.898
The question is, it's more about,
should we have Showcard inside search or

64
00:04:02.898 --> 00:04:06.193
use props children on search and
past ShowCard?

65
00:04:09.851 --> 00:04:11.570
&gt;&gt; Brian Holt: Is props.children.

66
00:04:11.570 --> 00:04:13.756
&gt;&gt; Speaker 2: Not better.

67
00:04:13.756 --> 00:04:15.115
&gt;&gt; Brian Holt: No, not particularly.

68
00:04:15.115 --> 00:04:16.805
Yeah.

69
00:04:16.805 --> 00:04:21.148
&gt;&gt; Speaker 2: I'll ask them to
actually post a side by side example.

70
00:04:21.148 --> 00:04:21.761
&gt;&gt; Brian Holt: Sure.

71
00:04:21.761 --> 00:04:28.595
No, I'm having a hard time picturing that.

72
00:04:28.595 --> 00:04:36.286
So, couple of questions that
typically come up with PropTypes.

73
00:04:36.286 --> 00:04:39.734
Specifically in Netflix, we have a bit of
code that actually strips away PropTypes

74
00:04:39.734 --> 00:04:42.799
from its ship mount production,
just so nothing's going down the wire.

75
00:04:42.799 --> 00:04:43.672
Typically, it's small.

76
00:04:43.672 --> 00:04:47.881
Nothing size that you're only cutting
out like couple a hundred bytes,

77
00:04:47.881 --> 00:04:49.270
which is not a big deal.

78
00:04:50.790 --> 00:04:52.794
So, these are fine to send down the wire.

79
00:04:52.794 --> 00:04:58.503
And also when you're in production,
React does not check PropTypes.

80
00:04:58.503 --> 00:05:01.012
So it's only in development,
it actually check PropTypes.

81
00:05:01.012 --> 00:05:04.388
So these are actually fine to leave in,
you can leave them in always.

82
00:05:04.388 --> 00:05:07.391
If you're interested in cutting out
every single byte that you can,

83
00:05:07.391 --> 00:05:10.158
you can get something in your
build step that will remove them.

84
00:05:10.158 --> 00:05:12.422
That's fine too.

85
00:05:12.422 --> 00:05:14.834
Only that up to your discussion.

86
00:05:14.834 --> 00:05:18.042
That's not necessary React specific thing,
but

87
00:05:18.042 --> 00:05:20.721
I think they are a good thing personally.

88
00:05:20.721 --> 00:05:24.382
And just like our friend said,
once you start using Flow or

89
00:05:24.382 --> 00:05:27.594
TypeScript, you don't
need a prototypes at all,

90
00:05:27.594 --> 00:05:31.422
because it's gonna do way more
than ProtoTypes ever would.

91
00:05:31.422 --> 00:05:34.133
So I believe at Facebook,
they don't use prop types at all,

92
00:05:34.133 --> 00:05:35.795
because they have Flow everywhere.

93
00:05:39.011 --> 00:05:43.751
&gt;&gt; Brian Holt: But there's object, array,

94
00:05:43.751 --> 00:05:49.594
array of, string, Boolean number.

95
00:05:49.594 --> 00:05:56.074
There's a bunch of different
PropTypes that it can check for

96
00:05:56.074 --> 00:06:00.774
and like I said,
there is like is required if

97
00:06:00.774 --> 00:06:05.106
you want it to warn when it's not there.

98
00:06:05.106 --> 00:06:07.891
Let's just take a look at what
that actually might look like.

99
00:06:07.891 --> 00:06:11.425
So if I put like bool in here and I say,

100
00:06:11.425 --> 00:06:15.878
posters is a bool and
then I save and I refresh.

101
00:06:15.878 --> 00:06:17.980
We're gonna get a failed PropType.

102
00:06:17.980 --> 00:06:22.199
It's gonna say, hey, you told me you
expected this and I actually got this.

103
00:06:22.199 --> 00:06:27.822
It's just a really nice way to say,
okay, this is why this is going wrong.

104
00:06:27.822 --> 00:06:31.924
Does that make sense?

105
00:06:31.924 --> 00:06:33.641
So, there's no performance or
anything in here.

106
00:06:33.641 --> 00:06:41.070
This is just purely for documentation and
some weak type checking for you.

107
00:06:41.070 --> 00:06:43.230
So, there was a good question.

108
00:06:43.230 --> 00:06:45.349
It was like what shape was?

109
00:06:45.349 --> 00:06:47.161
I don't know if we got that on camera,
but I'm just gonna say that again.

110
00:06:47.161 --> 00:06:51.211
Shape is an object, but
specifically what shape is used for

111
00:06:51.211 --> 00:06:55.269
is an object that you're going
to describe the shape of it.

112
00:06:55.269 --> 00:06:57.559
That's why it's called the shape.

113
00:06:57.559 --> 00:07:03.081
You can actually say, object and
then just instead of all this stuff,

114
00:07:03.081 --> 00:07:07.394
you just say, object and
it's just a generic object.

115
00:07:07.394 --> 00:07:12.280
It doesn't actually care what's gonna
come into it, it's just object.

116
00:07:12.280 --> 00:07:15.514
If you're getting an object and you
don't know what it's going to look like,

117
00:07:15.514 --> 00:07:17.290
this is how you're going to declare that.

118
00:07:17.290 --> 00:07:19.959
But if you know what it looks like,
don't be lazy.

119
00:07:19.959 --> 00:07:23.932
Please declare everything in it,
that's what shape is for.

120
00:07:23.932 --> 00:07:25.486
It's the same thing with array.

121
00:07:25.486 --> 00:07:29.112
You can just say this is going to be
in array of stuff, but it's better if

122
00:07:29.112 --> 00:07:32.750
you know what to taught the array of
those options for me to use array of.

123
00:07:32.750 --> 00:07:35.734
It's like this is an array of string,

124
00:07:35.734 --> 00:07:41.258
this is an array of shape of law and
you can kind of go all the way down it.

125
00:07:41.258 --> 00:07:43.648
So yes, that's useful.

126
00:07:43.648 --> 00:07:46.406
&gt;&gt; Speaker 3: Is that before typescript,
or

127
00:07:46.406 --> 00:07:51.506
is typescript influence by that or
the other way around?

128
00:07:51.506 --> 00:07:53.496
&gt;&gt; Brian Holt: I think its a chicken and
egg value.

129
00:07:53.496 --> 00:07:55.933
Pascal, I think is
the answer to that question.

130
00:07:55.933 --> 00:07:58.813
That's the answer to all typing things,
I think.

131
00:07:58.813 --> 00:08:00.072
I don't know, to be honest.

132
00:08:02.812 --> 00:08:05.460
&gt;&gt; Brian Holt: I'm pretty
sure TypeScript came first.

133
00:08:05.460 --> 00:08:07.460
&gt;&gt; Speaker 2: Can you nest shape in shape?

134
00:08:07.460 --> 00:08:08.520
&gt;&gt; Brian Holt: Yes.

135
00:08:08.520 --> 00:08:10.320
Yep, it goes as deep as you want to.

