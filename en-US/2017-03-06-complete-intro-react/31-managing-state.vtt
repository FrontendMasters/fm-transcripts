WEBVTT

1
00:00:00.390 --> 00:00:02.920
&gt;&gt; Brian Holt: So
we're gonna talk about React State now.

2
00:00:02.920 --> 00:00:07.540
So so far, there's no
statefulness to this app, right?

3
00:00:07.540 --> 00:00:10.630
If you look at this, we've just
taken data, and we just display it.

4
00:00:10.630 --> 00:00:11.999
There's nothing happening.

5
00:00:11.999 --> 00:00:14.083
There's no interaction, right?

6
00:00:14.083 --> 00:00:18.720
And I'll say first of all that
state is the enemy of all apps.

7
00:00:18.720 --> 00:00:25.700
In the sense that, if you have a bug, it's
almost always a function of state, right?

8
00:00:25.700 --> 00:00:27.940
That you have some state
somewhere going haywire.

9
00:00:29.897 --> 00:00:33.010
&gt;&gt; Brian Holt: So React specifically
tries to address this by reducing

10
00:00:33.010 --> 00:00:35.670
the amount of places that
you can modify state.

11
00:00:37.460 --> 00:00:41.920
And by kind of tying one hand behind your
back, you're helping yourself out a lot.

12
00:00:41.920 --> 00:00:47.577
And this goes back to my analogy of-
&gt;&gt; Brian Holt: Or

13
00:00:47.577 --> 00:00:51.346
assertion that, if you see a bug on a page
with React, you know where to start.

14
00:00:51.346 --> 00:00:55.587
And the reason for that is the only
thing that can modify the state of

15
00:00:55.587 --> 00:00:58.035
a component is the component itself.

16
00:00:58.035 --> 00:01:02.071
Nothing else, no parent,
no child, no external forces.

17
00:01:02.071 --> 00:01:05.440
There's no sideways
modification of state in React.

18
00:01:05.440 --> 00:01:06.950
That if you have a problem with state,

19
00:01:06.950 --> 00:01:10.290
the only place it could have originated
from is within the component itself.

20
00:01:12.799 --> 00:01:14.800
&gt;&gt; Brian Holt: Okay, so
going back to React State.

21
00:01:16.850 --> 00:01:20.243
&gt;&gt; Brian Holt: Yeah, the way that
React limits its ability to have bugs,

22
00:01:20.243 --> 00:01:23.651
maybe just limit the surface
area where you can have bugs.

23
00:01:23.651 --> 00:01:26.660
It says, if you want to change the state,
it must happen in the component itself.

24
00:01:29.532 --> 00:01:32.438
&gt;&gt; Brian Holt: So if I have like
a child component, so for example,

25
00:01:32.438 --> 00:01:35.570
if I have state inside of search, right?

26
00:01:35.570 --> 00:01:38.300
ShowCard cannot modify
the state in search.

27
00:01:38.300 --> 00:01:41.650
If we have a problem with search,

28
00:01:41.650 --> 00:01:45.080
right, and something's going wrong
with the state inside of search.

29
00:01:46.130 --> 00:01:47.610
It definitely didn't come from ShowCard,

30
00:01:47.610 --> 00:01:51.500
because ShowCard has no ability to reach
into its parent and modify its state.

31
00:01:51.500 --> 00:01:54.375
It didn't come from client app,
which is what's including it.

32
00:01:54.375 --> 00:01:58.400
Because client app cannot reach
into search and modify its state.

33
00:01:58.400 --> 00:02:03.500
The only problem that it can have if it's
a state problem comes from search itself.

34
00:02:05.978 --> 00:02:06.478
&gt;&gt; Brian Holt: Right?

35
00:02:07.570 --> 00:02:11.820
And another peculiar way of doing
things that react that's kind of,

36
00:02:11.820 --> 00:02:15.990
I wouldn't say pioneered, but certainly
has pioneered on the front end space.

37
00:02:18.120 --> 00:02:23.945
So we have search, and search passes data
down into ShowCard via props, right?

38
00:02:23.945 --> 00:02:28.602
But notice ShowCard doesn't
pass anything back up.

39
00:02:28.602 --> 00:02:31.115
And that's by design, and it's on purpose,

40
00:02:31.115 --> 00:02:34.310
and there's actually really
no way to do it, right?

41
00:02:34.310 --> 00:02:37.206
So if I have something in ShowCard
that needs to get to search,

42
00:02:37.206 --> 00:02:38.721
there's no way to push data up.

43
00:02:38.721 --> 00:02:40.610
Data only flows down.

44
00:02:40.610 --> 00:02:42.520
This is called one way data flow.

45
00:02:42.520 --> 00:02:44.717
So if you hear the term
as applied to React,

46
00:02:44.717 --> 00:02:48.610
and now is being applied to Ember and
some of these other libraries.

47
00:02:48.610 --> 00:02:51.790
This is the idea of one way data flow that
data only flows down and never flows up.

48
00:02:53.540 --> 00:02:57.958
So what happens if I have data inside of
ShowCard that search needs to know about?

49
00:02:57.958 --> 00:03:01.802
Well, the way that you deal with that is
you take the data out of ShowCard and

50
00:03:01.802 --> 00:03:02.919
you put it in search.

51
00:03:02.919 --> 00:03:07.800
And then you pass it down into ShowCard,
right?

52
00:03:07.800 --> 00:03:11.880
So basically, if you have two components
that need to share some sort of amount

53
00:03:11.880 --> 00:03:15.750
of data, the common ancestor is
where that data is going to live.

54
00:03:15.750 --> 00:03:19.430
So if I had another thing called,
I don't know, ratings, right?

55
00:03:19.430 --> 00:03:21.570
And both of them needed data,

56
00:03:21.570 --> 00:03:24.270
then it would have to live
inside of search, right?

57
00:03:24.270 --> 00:03:27.273
Because there's no way to push
into siblings or push it up,

58
00:03:27.273 --> 00:03:28.304
it only flows down.

59
00:03:28.304 --> 00:03:31.906
This will become more concrete as we
actually write code with this, but

60
00:03:31.906 --> 00:03:34.140
just know that that's what's happening.

61
00:03:39.986 --> 00:03:42.350
&gt;&gt; Brian Holt: So
you might ask yourself, well,

62
00:03:42.350 --> 00:03:48.070
what happens if I have a button that needs
to modify the state of its parent, right?

63
00:03:48.070 --> 00:03:50.387
So I have a button that lives in a form.

64
00:03:50.387 --> 00:03:55.085
And the form is a child of some
parent greater form, right?

65
00:03:55.085 --> 00:03:57.189
Cuz that happens, right?

66
00:03:57.189 --> 00:04:00.295
That's obviously a real case
that we cannot side step.

67
00:04:00.295 --> 00:04:06.629
Well, the answer is we basically say,
okay child, here is a function.

68
00:04:06.629 --> 00:04:09.714
Call this function with
the data that you get, and

69
00:04:09.714 --> 00:04:13.230
then I will modify my own save personally.

70
00:04:13.230 --> 00:04:17.100
So basically,
you have the child that says, hey parent,

71
00:04:17.100 --> 00:04:20.670
I called your callback function with
this data cuz I had some event.

72
00:04:21.670 --> 00:04:22.750
Now it's your problem, right?

73
00:04:22.750 --> 00:04:24.670
I'm not gonna modify your state.

74
00:04:24.670 --> 00:04:25.730
You modify your own state.

75
00:04:26.980 --> 00:04:32.520
Well this will become more apparent
again as we write these sort of things.

76
00:04:32.520 --> 00:04:36.590
But for right now,
we're going to go to search JS.

77
00:04:36.590 --> 00:04:40.300
And we're going to make search
JS start having a bit of state.

78
00:04:43.408 --> 00:04:45.004
&gt;&gt; Brian Holt: Okay?
So I'm in search JS right now.

79
00:04:45.004 --> 00:04:48.310
And what I'm gonna do here is,
inside of search,

80
00:04:48.310 --> 00:04:52.030
before the pre-load part,
I'm going to add a header.

81
00:04:55.817 --> 00:04:58.750
&gt;&gt; Brian Holt: And
I'm going to give it an h1 with svideo.

82
00:05:01.426 --> 00:05:02.070
&gt;&gt; Brian Holt: Come on.

83
00:05:06.980 --> 00:05:13.075
&gt;&gt; Brian Holt: And
an input with type='text' and

84
00:05:13.075 --> 00:05:17.996
placeholder='Search'.

85
00:05:22.629 --> 00:05:26.985
&gt;&gt; Brian Holt: Okay, so
all I did was put a header on the page.

86
00:05:26.985 --> 00:05:29.358
&gt;&gt; Speaker 2: Creation,
I know we haven't gotten to Redux yet.

87
00:05:29.358 --> 00:05:32.510
But does the paradigm
change once we get there?

88
00:05:32.510 --> 00:05:34.320
Or can we think about it the same way?

89
00:05:34.320 --> 00:05:36.610
&gt;&gt; Brian Holt: Nope, it changes.

90
00:05:36.610 --> 00:05:38.881
&gt;&gt; Speaker 2: And after you, sorry, no.

91
00:05:38.881 --> 00:05:40.950
That's a response to someone else,
never mind.

92
00:05:40.950 --> 00:05:41.660
&gt;&gt; Brian Holt: Okay.
&gt;&gt; Speaker 2: Carry on.

93
00:05:42.730 --> 00:05:46.350
&gt;&gt; Brian Holt: Okay, so
we put this header on the page.

94
00:05:46.350 --> 00:05:50.240
And if we save that,
go back over here, and refresh.

95
00:05:50.240 --> 00:05:52.190
Everything broke,
cuz I stopped my server again.

96
00:05:54.020 --> 00:05:58.773
It should just have, anyway
&gt;&gt; Brian Holt: Refresh,

97
00:05:58.773 --> 00:06:01.750
okay, so now I have a nice
looking header on the page.

98
00:06:05.033 --> 00:06:07.014
&gt;&gt; Brian Holt: What did I,
that's the other thing I had to do.

99
00:06:07.014 --> 00:06:10.667
Is I have to put that inside of a div,
yep.

100
00:06:10.667 --> 00:06:13.324
So that your preload shows,
just put that inside of a div.

101
00:06:18.249 --> 00:06:22.863
&gt;&gt; Brian Holt: Cuz we don't want
those necessarily to be siblings for

102
00:06:22.863 --> 00:06:24.475
styling reasons.

103
00:06:24.475 --> 00:06:27.313
Cuz used Flexbox, cuz I was lazy.

104
00:06:30.010 --> 00:06:31.277
&gt;&gt; Brian Holt: That's the real reason for
that.

105
00:06:31.277 --> 00:06:33.292
Okay, so yeah,
if you put inside of this div,

106
00:06:33.292 --> 00:06:35.687
then you should still have
your nice looking styling.

107
00:06:40.603 --> 00:06:41.601
&gt;&gt; Brian Holt: Okay.

108
00:06:43.230 --> 00:06:44.730
&gt;&gt; Brian Holt: So
you have the search box on here.

109
00:06:44.730 --> 00:06:45.630
You can type things in it.

110
00:06:45.630 --> 00:06:47.700
But it's one of those things,

111
00:06:47.700 --> 00:06:53.125
like if a tree falls in the forest,
does it make a sound if no one was there?

112
00:06:53.125 --> 00:06:55.865
No one's listening to the events
coming off this input.

113
00:06:55.865 --> 00:06:57.085
No one's keeping track of it.

114
00:06:57.085 --> 00:07:01.465
So this is just literally an input box
in the page that no one cares about.

