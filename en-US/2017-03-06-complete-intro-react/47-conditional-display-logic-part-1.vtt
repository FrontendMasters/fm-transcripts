WEBVTT

1
00:00:00.420 --> 00:00:02.800
&gt;&gt; Brian Holt: So now, we want to
integrate this into search, right.

2
00:00:03.820 --> 00:00:06.020
Because we want to share
it across search and

3
00:00:06.020 --> 00:00:10.880
across details, but
we kind of have a bit of a problem, right.

4
00:00:10.880 --> 00:00:13.470
Because the header on

5
00:00:13.470 --> 00:00:16.470
search is slightly different than
the header that's going to be on details.

6
00:00:16.470 --> 00:00:19.410
So, we need this kind of
conditional ability to show some

7
00:00:19.410 --> 00:00:21.750
parts of the component onto search and

8
00:00:21.750 --> 00:00:24.490
show different parts of
the component on details.

9
00:00:24.490 --> 00:00:29.950
So, we're gonna make this kind of
conditional logic inside of search, sorry,

10
00:00:29.950 --> 00:00:30.590
inside of header.

11
00:00:32.470 --> 00:00:39.952
So, let's go back to,
let's see, into header.

12
00:00:39.952 --> 00:00:42.957
Header.js.

13
00:00:46.638 --> 00:00:50.398
&gt;&gt; Brian Holt: So, we're gonna show you
first of all one of the annoyances to me

14
00:00:50.398 --> 00:00:52.440
about ES6 classes.

15
00:00:52.440 --> 00:00:55.240
I would love to be able to put propTypes,
right here.

16
00:00:56.440 --> 00:01:00.510
Unfortunately, ES6 classes
don't have properties yet.

17
00:01:00.510 --> 00:01:05.500
There is no way to put properties
on header directly like this.

18
00:01:05.500 --> 00:01:09.980
So, the way you have
to do it is down here,

19
00:01:09.980 --> 00:01:16.511
after we're gonna say
Header.propTypes equals objects.

20
00:01:19.035 --> 00:01:23.399
&gt;&gt; Brian Holt: I find this kind of a gross
interface, but that's just the way it is.

21
00:01:24.780 --> 00:01:25.750
So, we are up here.

22
00:01:25.750 --> 00:01:30.014
We'll pull out func, bool and

23
00:01:30.014 --> 00:01:34.442
string, and we're gonna say,

24
00:01:34.442 --> 00:01:41.495
handleSearchTermChange, it's
gonna be a func,

25
00:01:41.495 --> 00:01:47.079
showSearchTerm, showSearch rather.

26
00:01:47.079 --> 00:01:51.258
It's going to be a bool, and

27
00:01:51.258 --> 00:01:57.360
searchTerm: it's going to be a string.

28
00:02:00.510 --> 00:02:03.350
So func, functions.

29
00:02:03.350 --> 00:02:06.000
The reason why they can't put function
there is you might've guessed,

30
00:02:06.000 --> 00:02:07.160
function is a reserved word.

31
00:02:08.320 --> 00:02:12.580
And I believe, bool is for
similar reasons is Boolean.

32
00:02:12.580 --> 00:02:14.276
Oops, that needs to be equals.

33
00:02:14.276 --> 00:02:17.569
React.propTypes.

34
00:02:22.691 --> 00:02:24.180
&gt;&gt; Brian Holt: This Boolean.

35
00:02:24.180 --> 00:02:27.135
&gt;&gt; Speaker 2: Diego's asking can
that be put into a constructor?

36
00:02:27.135 --> 00:02:32.473
&gt;&gt; Brian Holt: The answer is no.

37
00:02:32.473 --> 00:02:36.549
[LAUGHS] The reason why that can't be it,

38
00:02:36.549 --> 00:02:41.940
because this needs to go
on the static prototype.

39
00:02:41.940 --> 00:02:44.210
Which and this is how you put
it on the static prototype.

40
00:02:44.210 --> 00:02:48.280
If I put it inside the construction,
it's going to be on the instance.

41
00:02:48.280 --> 00:02:50.575
And it's a fine difference,
but it does make a difference.

42
00:02:57.710 --> 00:02:58.804
&gt;&gt; Brian Holt: That's a good question.

43
00:03:03.755 --> 00:03:08.240
&gt;&gt; Brian Holt: And we were using,
well actually, I don't.

44
00:03:08.240 --> 00:03:11.250
So one of the other differences,
I'm just going to tell you real quick.

45
00:03:11.250 --> 00:03:12.530
I don't think we'll actually see it,

46
00:03:12.530 --> 00:03:15.540
but we're used to seeing getInitialState,
right?

47
00:03:16.800 --> 00:03:19.430
That's not how ES6 components do it.

48
00:03:19.430 --> 00:03:21.425
They try and draw within the lines, and

49
00:03:21.425 --> 00:03:25.283
have a constructor,
&gt;&gt; Brian Holt: And

50
00:03:25.283 --> 00:03:31.107
the constructor gets passed props,
and then you have to say, super props.

51
00:03:32.837 --> 00:03:38.650
&gt;&gt; Brian Holt: And then, you say,
this.state equals blah, right?

52
00:03:38.650 --> 00:03:41.479
That's just how,
that how it works with ES6

53
00:03:41.479 --> 00:03:47.435
components,
&gt;&gt; Brian Holt: The other thing,

54
00:03:47.435 --> 00:03:49.560
I don't think you're actually gonna
see here, so say I had a method.

55
00:03:50.650 --> 00:03:53.360
This is the part that bugs me
the most about ES 6 components.

56
00:03:53.360 --> 00:03:56.436
Say, I had some method, right?

57
00:03:59.990 --> 00:04:01.841
&gt;&gt; Brian Holt: And
I wanna say, this.setState.

58
00:04:03.914 --> 00:04:05.790
&gt;&gt; Brian Holt: Blah goes to string, right?

59
00:04:05.790 --> 00:04:09.846
And then, I have this as like,

60
00:04:09.846 --> 00:04:14.846
onChange = Some this.someMethod.

61
00:04:19.002 --> 00:04:22.335
&gt;&gt; Brian Holt: So, here's my biggest
annoyance with ES6 components, and

62
00:04:22.335 --> 00:04:24.460
why I usually don't elect to use them.

63
00:04:25.770 --> 00:04:26.920
Some math, jeez.

64
00:04:28.490 --> 00:04:29.740
Okay, so some method.

65
00:04:32.020 --> 00:04:35.310
Whenever this onChange happens,
it's gonna call this method right here.

66
00:04:36.660 --> 00:04:40.420
When you use Reactor to create class it
does auto binding of context for you,

67
00:04:40.420 --> 00:04:46.330
so this is always going to refer
to Header, right, the component.

68
00:04:46.330 --> 00:04:49.600
And ES6 classes do not auto
bind your methods for you.

69
00:04:51.280 --> 00:04:56.720
So, you have to somehow get
that context to be correct.

70
00:04:56.720 --> 00:05:00.944
The quote, unquote easy way
to do this is .bind(this).

71
00:05:00.944 --> 00:05:04.600
However, this is super
imperformant because

72
00:05:05.660 --> 00:05:09.990
this render method gets called hundreds
of times, thousands of times, right?

73
00:05:09.990 --> 00:05:13.790
So, it's gonna call bind every single
time, and bind is not cheap, right?

74
00:05:15.010 --> 00:05:18.350
And so, what you actually have to
do is here, inside of your header,

75
00:05:18.350 --> 00:05:23.699
you just have to have a bunch
of these gross this.someMethod =

76
00:05:23.699 --> 00:05:30.600
this.someMethod.bind this, and then down
here you don't have to do that anymore.

77
00:05:30.600 --> 00:05:32.510
&gt;&gt; Speaker 3: Can't you, I mean-
&gt;&gt; Brian Holt: There's other way,

78
00:05:32.510 --> 00:05:34.656
you can do it with-
&gt;&gt; Speaker 3: Can you do stuff up to,

79
00:05:34.656 --> 00:05:39.148
I haven't done JavaScript, but
you do in a struct you say, self = this,

80
00:05:39.148 --> 00:05:43.270
and then, just use the close issue,
self.someMethod instead-

81
00:05:43.270 --> 00:05:43.978
&gt;&gt; Brian Holt: Yeah, but

82
00:05:43.978 --> 00:05:45.792
that's really gross too.

83
00:05:45.792 --> 00:05:48.609
[LAUGH] I mean there are other
tricks like that to get around it.

84
00:05:52.310 --> 00:05:56.700
&gt;&gt; Brian Holt: That self-pattern is kinda
frowned upon in the JavaScript community.

85
00:05:56.700 --> 00:05:57.920
&gt;&gt; Speaker 2: Comment from chat.

86
00:05:57.920 --> 00:06:00.580
They're talking about where
you're down at the bottom

87
00:06:00.580 --> 00:06:03.460
of where you're setting
the PropTypes on Header.

88
00:06:03.460 --> 00:06:06.640
Basically saying,
could this be put at the top?

89
00:06:06.640 --> 00:06:07.680
&gt;&gt; Brian Holt: Nope.

90
00:06:07.680 --> 00:06:10.490
&gt;&gt; Speaker 2: You have to define
the class before you can set

91
00:06:10.490 --> 00:06:14.140
the extra prop types, right?

92
00:06:14.140 --> 00:06:15.950
&gt;&gt; Brian Holt: Yeah, I've got to
remember what kind of hoist is on there.

93
00:06:15.950 --> 00:06:17.610
&gt;&gt; Speaker 2: Because this
doesn't do the right hoisting.

94
00:06:17.610 --> 00:06:20.771
&gt;&gt; Brian Holt: Yeah, it's not going
to hoist it, I don't believe.

95
00:06:24.212 --> 00:06:25.700
&gt;&gt; Brian Holt: I guess, we can try.

96
00:06:25.700 --> 00:06:28.160
Okay, so I'm gonna get rid of
all this grossness right here.

97
00:06:28.160 --> 00:06:29.070
Because we don't actually need it.

98
00:06:29.070 --> 00:06:30.973
I just wanted to demonstrate
to you the difference.

99
00:06:36.710 --> 00:06:41.022
&gt;&gt; Brian Holt: So, that's why I go,
I'll and answer the question, but

100
00:06:41.022 --> 00:06:46.305
this is why I go with createClass,
is that autobinding is just so nice.

101
00:06:46.305 --> 00:06:47.785
I don't have to worry about context,
right?

102
00:06:47.785 --> 00:06:53.219
And that to me that's worth,
I don't know, not using the ES6 classes.

103
00:06:56.380 --> 00:06:59.380
Okay, I don't think we can move it,
but we'll try.

104
00:07:03.630 --> 00:07:04.250
You know what?

105
00:07:04.250 --> 00:07:06.991
I think our link will yell at us.

106
00:07:06.991 --> 00:07:07.682
Maybe.

107
00:07:10.320 --> 00:07:10.936
&gt;&gt; Brian Holt: Maybe not.

108
00:07:14.430 --> 00:07:15.840
&gt;&gt; Brian Holt: Yeah, header's undefined.

109
00:07:15.840 --> 00:07:16.725
That's what you get.

110
00:07:21.156 --> 00:07:24.043
&gt;&gt; Brian Holt: I'm not sure of all the
hoisting rules that come with classes cuz

111
00:07:24.043 --> 00:07:26.889
I don't really like classes,
so I generally don't use them.

112
00:07:28.520 --> 00:07:32.670
&gt;&gt; Speaker 2: So, there's a whole
bunch of questions across about this.

113
00:07:32.670 --> 00:07:39.130
What does this.sum method equals this.sum
method.bind this exactly do internally?

114
00:07:41.060 --> 00:07:44.320
&gt;&gt; Brian Holt: All it's doing
is it's taking this.sum method,

115
00:07:44.320 --> 00:07:46.510
which is a method that we defined, right?

116
00:07:46.510 --> 00:07:49.910
And it's replacing it with a new method
with a bound context of what it was

117
00:07:49.910 --> 00:07:53.140
previously, which is abstract, I know.

118
00:07:53.140 --> 00:07:57.809
But there's nothing different than saying,

119
00:07:57.809 --> 00:08:02.484
var double = function
that takes in a number,

120
00:08:05.086 --> 00:08:06.992
&gt;&gt; Brian Holt: And returns num*2, right?

121
00:08:08.030 --> 00:08:12.100
Then I could say,
double = double.bind(this).

122
00:08:14.010 --> 00:08:17.480
So, bind is just, that's an ES5 function.

123
00:08:17.480 --> 00:08:19.720
That's not this, sorry.

124
00:08:19.720 --> 00:08:24.449
Double
&gt;&gt; Brian Holt: This is a stupid

125
00:08:24.449 --> 00:08:25.331
example, right?

126
00:08:25.331 --> 00:08:28.854
But now,
&gt;&gt; Brian Holt: No,

127
00:08:28.854 --> 00:08:29.945
you would do this, whatever.

128
00:08:32.285 --> 00:08:33.734
This is a bad example,
I'm gonna delete it.

129
00:08:35.843 --> 00:08:39.657
&gt;&gt; Brian Holt: But it's an ES5
method that just binds the context.

130
00:08:39.657 --> 00:08:42.027
So this,
whenever you call it in any context,

131
00:08:42.027 --> 00:08:47.397
always refers to whatever this
was when you called bind.

132
00:08:47.397 --> 00:08:48.657
That's the gist of it.

133
00:08:48.657 --> 00:08:53.030
If you want a more in-depth explanation, I
would say check out one of Kyle Simpson's

134
00:08:53.030 --> 00:08:57.360
courses on front end masters, read one
of his books, read a blog post on it.

135
00:08:57.360 --> 00:08:59.345
&gt;&gt; Speaker 4: ES6 stuff?

136
00:08:59.345 --> 00:09:00.473
&gt;&gt; Brian Holt: For bok.bind.

137
00:09:00.473 --> 00:09:01.414
&gt;&gt; Speaker 4: .bind, yeah.

138
00:09:01.414 --> 00:09:03.725
Advanced JavaScript
&gt;&gt; Brian Holt: Yeah, that's JavaScript.

139
00:09:07.041 --> 00:09:10.187
&gt;&gt; Speaker 2: Lots of questions
about possibly using arrow notation,

140
00:09:10.187 --> 00:09:12.180
it removes the bind issue.

141
00:09:12.180 --> 00:09:13.770
&gt;&gt; Brian Holt: Yeah, it does.

142
00:09:13.770 --> 00:09:17.620
But the issue is, that's not
officially part of JavaScript yet.

143
00:09:17.620 --> 00:09:25.030
So, you're getting into
the class properties, right?

144
00:09:25.030 --> 00:09:27.270
Class properties,
I don't believe are part of the spec yet.

145
00:09:27.270 --> 00:09:30.890
They're going to be part of the spec,
because, Lord knows, we need them.

146
00:09:30.890 --> 00:09:33.710
And if you use the arrow function,
you would side step this problem.

147
00:09:33.710 --> 00:09:38.250
But until we actually get
those natively available,

148
00:09:38.250 --> 00:09:42.030
I don't use them.

149
00:09:42.030 --> 00:09:45.220
&gt;&gt; Speaker 2: Yeah,
talking about using Babble stage two.

150
00:09:45.220 --> 00:09:46.810
&gt;&gt; Brian Holt: Yep, don't.

151
00:09:46.810 --> 00:09:52.140
That's why I, so, in stage two is fun for
messing around with, but dear God,

152
00:09:52.140 --> 00:09:57.280
do not ship stage two to production, or
else you're going to have a bad time.

153
00:09:57.280 --> 00:10:02.479
If you want a good story about that
you should tweet @jimyoung [LAUGH] and

154
00:10:02.479 --> 00:10:07.088
ask him about shipping stage zero code,
that's a good story.

