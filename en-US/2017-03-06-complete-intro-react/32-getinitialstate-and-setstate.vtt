WEBVTT

1
00:00:00.150 --> 00:00:02.940
&gt;&gt; Brian Holt: So, let's make React
actually keep track of that state.

2
00:00:02.940 --> 00:00:06.500
So, the first thing we wanna do is
we need to give it an initial state.

3
00:00:06.500 --> 00:00:10.365
So, above render put a function
called getInitialState.

4
00:00:16.679 --> 00:00:17.183
&gt;&gt; Brian Holt: I suppose

5
00:00:17.183 --> 00:00:21.974
something I didn't talk about with regards
to ES6, the syntax of declaring functions,

6
00:00:21.974 --> 00:00:24.570
this is called enhanced
object literal syntax.

7
00:00:25.740 --> 00:00:30.900
Most of us are used to seeing like that,
right.

8
00:00:30.900 --> 00:00:34.260
But I told you,
ES6 is about not writing function.

9
00:00:34.260 --> 00:00:36.550
So, they now allow you to
write that just like this.

10
00:00:36.550 --> 00:00:39.260
Same thing,
just need it a little bit shorter.

11
00:00:42.540 --> 00:00:47.140
Okay, so you have getInitialState and what
we're gonna do here it's going to return

12
00:00:47.140 --> 00:00:49.660
the first state of search you wanna have.

13
00:00:49.660 --> 00:00:54.100
So we're gonna say,
return an object with searchTerm

14
00:00:57.370 --> 00:01:00.640
of, I'm just gonna put
a random string here, so

15
00:01:00.640 --> 00:01:02.890
you can kinda see how this propagates out.

16
00:01:02.890 --> 00:01:04.550
Eventually, this will
just be empty string.

17
00:01:04.550 --> 00:01:07.907
But we're gonna say,
this is the default string.

18
00:01:12.537 --> 00:01:13.570
&gt;&gt; Brian Holt: Okay, so save that.

19
00:01:13.570 --> 00:01:17.380
So now, we have this bit of state
that's being tracked on search, right?

20
00:01:19.070 --> 00:01:24.160
And we're just going to
make input the value of

21
00:01:24.160 --> 00:01:29.760
input be this.state.searchTerm, right?

22
00:01:29.760 --> 00:01:35.300
So now, the value of input is always going
to correlate to what's in searchTerm.

23
00:01:38.710 --> 00:01:42.509
And just for demonstration purposes,
we'll change this back later, but

24
00:01:42.509 --> 00:01:44.677
I'm gonna make the h1 reflect it as well,

25
00:01:44.677 --> 00:01:51.104
this.state.searchTerm.
&gt;&gt; Brian Holt: Okay?

26
00:01:51.104 --> 00:01:56.710
So, if we save that,
&gt;&gt; Brian Holt: Come back over here.

27
00:01:56.710 --> 00:01:59.270
First of all, if you have your console
open, it's gonna yell at you for

28
00:01:59.270 --> 00:02:02.900
a good reason, but
it also says this is the default string.

29
00:02:02.900 --> 00:02:04.670
And if you come over here and

30
00:02:04.670 --> 00:02:07.236
say, this is the default string,
now try and type in it.

31
00:02:11.160 --> 00:02:16.042
Congratulations, you broke the browser.
&gt;&gt; Brian Holt: This is

32
00:02:16.042 --> 00:02:19.650
another big point of frustration for
new developers approaching React.

33
00:02:20.790 --> 00:02:23.140
Especially, if you're coming
from something like Angular or

34
00:02:23.140 --> 00:02:25.960
Ember, where the two way
data binding is free.

35
00:02:27.140 --> 00:02:30.140
It is not free in React and
that is also by design.

36
00:02:30.140 --> 00:02:33.060
Because if you've ever had a debugging
problem with two-way data binding,

37
00:02:33.060 --> 00:02:36.830
it is the worst because there's so
much magic going on there.

38
00:02:36.830 --> 00:02:44.003
And at least for me, when there's
problems with magic, it's really ungood,

39
00:02:44.003 --> 00:02:48.219
[LAUGH] to put it lightly.
&gt;&gt; Brian Holt: So,

40
00:02:48.219 --> 00:02:52.300
let's talk about why this doesn't change.

41
00:02:52.300 --> 00:02:54.270
Why specifically we broke an input.

42
00:02:54.270 --> 00:02:59.100
That's actually really hard to do it's
hard to break inputs with JavaScript.

43
00:03:01.010 --> 00:03:06.640
So, every time I punch a key into my
keyboard that fires off an event.

44
00:03:06.640 --> 00:03:09.670
And React is listening for
all of these events.

45
00:03:09.670 --> 00:03:13.950
And every time it kicks off an event,
React says, something happened.

46
00:03:13.950 --> 00:03:17.860
I'm gonna kick off a re-render and
this is all for free.

47
00:03:17.860 --> 00:03:20.750
This is all stuff that React
is just doing for you.

48
00:03:20.750 --> 00:03:22.970
So it says, cool, go ahead and
re-render search.

49
00:03:22.970 --> 00:03:25.990
It goes through and it says,
okay, I had this input and

50
00:03:25.990 --> 00:03:29.160
the value of this input is
this.state.searchTerm, right?

51
00:03:29.160 --> 00:03:30.410
And that's this right here.

52
00:03:32.070 --> 00:03:33.774
When we have these events,

53
00:03:33.774 --> 00:03:39.700
what is modifying search term?
&gt;&gt; Brian Holt: Nothing, right?

54
00:03:39.700 --> 00:03:41.820
Nothing modifies it, so
it just keeps staying the same.

55
00:03:41.820 --> 00:03:43.640
So, every time it kicks of a re-render,

56
00:03:43.640 --> 00:03:45.930
it just always gets re-rendered
back to the way it was.

57
00:03:47.760 --> 00:03:48.770
Hence, it never changing, right?

58
00:03:48.770 --> 00:03:50.990
So, every time you type,
nothing goes in there.

59
00:03:50.990 --> 00:03:53.770
So basically, you have to give it
a pathway to modify that state.

60
00:03:55.730 --> 00:03:58.780
Make sense?
&gt;&gt; Speaker 2: Is it literally like

61
00:03:58.780 --> 00:04:03.680
capturing the event and just like not
propagating it, just capturing it,

62
00:04:03.680 --> 00:04:07.440
so the browser doesn't get it?
&gt;&gt; Brian Holt: Yeah, I think, events don't

63
00:04:07.440 --> 00:04:12.720
escape react, so I don't believe you can
listen above and catch those events.

64
00:04:13.880 --> 00:04:16.580
It's by design like if you're
going to be using React,

65
00:04:16.580 --> 00:04:18.410
you should be using React, right?

66
00:04:18.410 --> 00:04:20.868
And you shouldn't be trying
to play on the outside of and

67
00:04:20.868 --> 00:04:24.165
feed stuff into React cuz that's just
gonna make things a lot worse than you

68
00:04:24.165 --> 00:04:30.984
want it to be.
&gt;&gt; Brian Holt: So,

69
00:04:30.984 --> 00:04:34.615
we have to give this input
an on change listener.

70
00:04:35.665 --> 00:04:37.085
So, we're just gonna say, onChange.

71
00:04:39.555 --> 00:04:43.690
I'm gonna say this.handleSearchTermChange.

72
00:04:46.860 --> 00:04:50.510
There's nothing special about
this particular method name.

73
00:04:50.510 --> 00:04:56.570
But I always call it that handlers,
handle blah, blah, blah, right?

74
00:04:56.570 --> 00:04:59.312
For me,
it's just a really useful way of knowing.

75
00:04:59.312 --> 00:05:05.145
Okay, this is a event handler.
&gt;&gt; Brian Holt: Okay,

76
00:05:05.145 --> 00:05:09.065
and then I'm going to create a method by
the same name, handleSearchTermChange,

77
00:05:09.065 --> 00:05:15.545
that takes in an event.
&gt;&gt; Brian Holt: Okay,

78
00:05:15.545 --> 00:05:20.643
this event technically is
a React synthetic DOM event,

79
00:05:20.643 --> 00:05:25.340
which is basically their
imitation of an event.

80
00:05:25.340 --> 00:05:30.980
However, its API is precisely the same
as the MDM normal browser event.

81
00:05:30.980 --> 00:05:32.764
So, you can just actually read the MDM and
go by that.

82
00:05:32.764 --> 00:05:35.750
But I just didn't want anyone
to be surprised by that.

83
00:05:38.680 --> 00:05:42.806
So, what I am going to do here
is I'm gonna say, this.setState,

84
00:05:45.330 --> 00:05:48.172
&gt;&gt; Brian Holt: ({searchTerm:

85
00:05:48.172 --> 00:05:52.437
event.target.value})

86
00:05:59.172 --> 00:06:00.858
&gt;&gt; Brian Holt: So, event.target.value.,

87
00:06:00.858 --> 00:06:05.011
this should probably look familiar to you
if you've written any sort of direct DOM

88
00:06:05.011 --> 00:06:08.940
manipulation before,
specifically with event listeners.

89
00:06:08.940 --> 00:06:13.008
This is just the API to pull
out whatever was in the input.

90
00:06:15.016 --> 00:06:16.537
&gt;&gt; Brian Holt: Okay?

91
00:06:16.537 --> 00:06:20.209
It's talking about this.setState,
this is the gateway,

92
00:06:20.209 --> 00:06:23.270
the only gateway to
modifying state in react.

93
00:06:23.270 --> 00:06:26.350
If you want to change
something up here in state,

94
00:06:27.350 --> 00:06:30.020
the only way to do it is
through the set state API.

95
00:06:31.380 --> 00:06:35.060
So, you just give it an API of it,
of basically your delta.

96
00:06:35.060 --> 00:06:37.180
Your dif,
the thing that you want to change.

97
00:06:37.180 --> 00:06:41.210
The reason why I say that, let's say if
I have another piece of state here like,

98
00:06:42.320 --> 00:06:45.440
sort ascending, something like that.

99
00:06:47.320 --> 00:06:48.860
This does a shallow merge for you.

100
00:06:48.860 --> 00:06:50.060
Basically, object that assigned.

101
00:06:50.060 --> 00:06:54.970
In fact, it might literally use object
data sign, so it will leave sort alone.

102
00:06:54.970 --> 00:06:57.710
You don't have to pass in the whole state.

103
00:06:57.710 --> 00:07:01.380
It's fine just give you the things
that you want to change.

104
00:07:01.380 --> 00:07:03.880
The only thing is that it
doesn't do a deep merge.

105
00:07:03.880 --> 00:07:07.280
So, if you have like deeply nested data,
you do have to worry about that yourself.

106
00:07:10.250 --> 00:07:12.540
Okay, so setState, that's how that works.

107
00:07:12.540 --> 00:07:14.123
You don't need to sort
there cuz we're not doing

108
00:07:14.123 --> 00:07:19.002
that.
&gt;&gt; Brian Holt: So,

109
00:07:19.002 --> 00:07:23.094
what setState will do is it will
update the state object and

110
00:07:23.094 --> 00:07:28.607
then it will kick off another re-render
and then you'll actually get these,

111
00:07:28.607 --> 00:07:31.800
the UI will reflect
whatever is in the state.

112
00:07:34.240 --> 00:07:39.483
So, if we save that and refresh,
now if you start messing

113
00:07:39.483 --> 00:07:47.166
around with this.
&gt;&gt; Brian Holt: All right,

114
00:07:47.166 --> 00:07:56.574
notice that this changes along with it.
&gt;&gt; Brian Holt: Right?

115
00:08:04.128 --> 00:08:05.477
&gt;&gt; Brian Holt: Any questions about that?

116
00:08:11.150 --> 00:08:12.589
&gt;&gt; Brian Holt: So, that's the thing to

117
00:08:12.589 --> 00:08:16.230
keep in mind is setState is
the gatekeeper to modifying state.

118
00:08:16.230 --> 00:08:21.082
There is no other way to do it.
&gt;&gt; Brian Holt: There's no

119
00:08:21.082 --> 00:08:23.130
other way you should do it, I should say.

120
00:08:23.130 --> 00:08:26.230
[LAUGH] Always put like
the asterisks at the end.

121
00:08:26.230 --> 00:08:26.830
I'll show you.

122
00:08:26.830 --> 00:08:28.010
You can do it this way.

123
00:08:29.840 --> 00:08:35.180
You can say this.state.searchTerm

124
00:08:35.180 --> 00:08:39.200
= event.target.value.

125
00:08:39.200 --> 00:08:40.820
There's no magic to what state is.

126
00:08:40.820 --> 00:08:42.530
It's literally just the object
that you're keeping in state.

127
00:08:42.530 --> 00:08:44.140
They're not keeping that from you.

128
00:08:44.140 --> 00:08:48.470
The problem with this is
no one's watching, right?

129
00:08:48.470 --> 00:08:50.881
No one's watching this.state for
changes, so

130
00:08:50.881 --> 00:08:53.362
it doesn't know that anything changed,
right?

131
00:08:53.362 --> 00:08:54.340
So, I modify this.

132
00:08:54.340 --> 00:08:56.260
It's not going to kick off a re-render.

133
00:08:56.260 --> 00:08:59.945
It did modify the state, but
now the state and the UI are out of sync,

134
00:08:59.945 --> 00:09:01.685
which is a bad thing, right?

135
00:09:01.685 --> 00:09:02.845
So you say, well how do I fix it?

136
00:09:02.845 --> 00:09:07.459
You can say, this.forceUpdate.
&gt;&gt; Speaker 2: Question.

137
00:09:07.459 --> 00:09:08.445
&gt;&gt; Brian Holt: Yeah.

138
00:09:08.445 --> 00:09:09.465
&gt;&gt; Speaker 2: Is there any shortcut for

139
00:09:09.465 --> 00:09:11.825
doing a deep merge in such state?

140
00:09:11.825 --> 00:09:15.715
Like using previous state and do object
assign with the previous state and

141
00:09:15.715 --> 00:09:17.185
then update the change?
&gt;&gt; Brian Holt: Yeah,

142
00:09:17.185 --> 00:09:18.097
that sounds pretty good to me.

143
00:09:18.097 --> 00:09:19.550
[LAUGH]
&gt;&gt; Speaker 2: [LAUGH] I

144
00:09:19.550 --> 00:09:23.310
think they're asking for a shortcut.
&gt;&gt; Brian Holt: There's no further shortcut

145
00:09:23.310 --> 00:09:26.644
to that.
&gt;&gt; Speaker 2: [LAUGH] Okay.

146
00:09:26.644 --> 00:09:27.980
&gt;&gt; Brian Holt: So, this forceUpdate,

147
00:09:27.980 --> 00:09:31.460
this ends up being bad because this says,
update right now.

148
00:09:32.570 --> 00:09:36.400
Something that's really nice React
will do for you behind the scenes.

149
00:09:36.400 --> 00:09:39.490
Notice I had an event, which would
normally kick off a re-render, but

150
00:09:39.490 --> 00:09:42.710
then I call setState right here, right?

151
00:09:42.710 --> 00:09:44.590
It's actually smart enough,
it being react,

152
00:09:44.590 --> 00:09:48.830
is smart enough to batch
that into one re-render.

153
00:09:48.830 --> 00:09:51.020
So basically, when you call setState,

154
00:09:51.020 --> 00:09:55.872
that's actually an asynchronous function
that's going to schedule an update.

155
00:09:55.872 --> 00:10:00.930
An event, it's going to empty that
buffer and into one setState, so that's

156
00:10:00.930 --> 00:10:04.930
only updating the bare minimum of things
possible to keep your app performing.

157
00:10:04.930 --> 00:10:07.750
As soon as you call this.forceUpdate,
it's just like a sledge hammer.

158
00:10:07.750 --> 00:10:08.820
So it's like, nope.

159
00:10:08.820 --> 00:10:10.790
Just update everything right now.

160
00:10:12.410 --> 00:10:15.845
So I would say, I'll be you a lot of
React developers don't even know that

161
00:10:15.845 --> 00:10:18.240
this.forceUpdate exists.

162
00:10:18.240 --> 00:10:21.080
Because you don't ever need it.

163
00:10:21.080 --> 00:10:24.375
Really ever.
The only time that you do, would ever use

164
00:10:24.375 --> 00:10:28.980
forceUpdate in a non bad way is if
you had to integrate with jQuery or

165
00:10:28.980 --> 00:10:30.120
something like that or D3.

166
00:10:30.120 --> 00:10:33.200
Actually, D3 would be really
a good example of that.

167
00:10:33.200 --> 00:10:36.550
Because you have D3, D3 needs to be
a master of some of its own data.

168
00:10:36.550 --> 00:10:38.600
And then,
it needs to tell React just like, hey,

169
00:10:38.600 --> 00:10:42.220
React I changed so much stuff and
I need you to like re-render.

170
00:10:42.220 --> 00:10:47.218
So D3 will call back out React and
say, force update.

171
00:10:47.218 --> 00:10:50.410
But integrating with other libraries
is pretty much the only reason I ever

172
00:10:50.410 --> 00:10:51.080
use force update.

173
00:10:53.210 --> 00:10:55.284
So, don't do this just use setState.

174
00:10:55.284 --> 00:10:57.370
Use setState all the time,
all over the place.

175
00:10:57.370 --> 00:11:00.273
It's the happy path just do that, but

176
00:11:00.273 --> 00:11:04.998
just note that force update is
available to you if you need it.

177
00:11:14.216 --> 00:11:14.992
&gt;&gt; Speaker 3: Are we gonna do

178
00:11:14.992 --> 00:11:18.427
any discussion of what actually
happens during a re-render,

179
00:11:18.427 --> 00:11:20.825
like the way the diffing algorithm works?
&gt;&gt; Brian Holt: No.

180
00:11:20.825 --> 00:11:24.630
&gt;&gt; Speaker 3: Okay.

181
00:11:24.630 --> 00:11:25.320
&gt;&gt; Brian Holt: But that brings up

182
00:11:25.320 --> 00:11:26.090
a saline point.

183
00:11:27.710 --> 00:11:29.060
Notice like I actually have,

184
00:11:29.060 --> 00:11:32.000
I don't think I said the word
virtual DOM at all today, right?

185
00:11:33.250 --> 00:11:35.170
Which when we have
a conversation about React,

186
00:11:35.170 --> 00:11:37.890
that almost is one of the first
things people brings up,

187
00:11:37.890 --> 00:11:41.890
it has the virtual DOM and my response to
that is, who gives a shit, I don't care.

188
00:11:43.260 --> 00:11:49.890
React virtual DOM makes, it doesn't
make React desirable it just makes it

189
00:11:49.890 --> 00:11:55.500
visible in my opinion and I thinks that's
pretty good assertion to make, right.

190
00:11:55.500 --> 00:11:58.910
It doesn't really matter what React
is doing underneath the hood, right?

191
00:11:58.910 --> 00:12:00.110
It just matter that it works and

192
00:12:00.110 --> 00:12:01.110
it's fast enough.
&gt;&gt; Speaker 4: So,

193
00:12:01.110 --> 00:12:05.830
let me ask you this if you ever run
into a problem where you needed a deep

194
00:12:05.830 --> 00:12:07.425
understanding of that to debug it?

195
00:12:07.425 --> 00:12:09.180
&gt;&gt; Brian Holt: Mm-mm.
&gt;&gt; Speaker 4: Never?

196
00:12:09.180 --> 00:12:09.950
&gt;&gt; Brian Holt: I don't think so.

197
00:12:09.950 --> 00:12:11.244
&gt;&gt; Speaker 4: That's impressive.

198
00:12:13.141 --> 00:12:13.943
&gt;&gt; Brian Holt: Yeah, that's a bunch

199
00:12:13.943 --> 00:12:16.060
of stuff about the virtual DOM,
I have no idea how it works.

200
00:12:16.060 --> 00:12:18.090
And it's about to totally
change when they move to fiber,

201
00:12:18.090 --> 00:12:22.430
the fiber architecture.
&gt;&gt; Speaker 4: Cool.

202
00:12:23.480 --> 00:12:24.100
&gt;&gt; Brian Holt: But this

203
00:12:24.100 --> 00:12:28.250
also brings up another good point of
how to think about writing components.

204
00:12:29.830 --> 00:12:34.670
If you think about writing jQuery code,
you basically have this kind of

205
00:12:34.670 --> 00:12:37.480
spaghetti code,
that kind of just like, I click this.

206
00:12:37.480 --> 00:12:38.530
This changes this variable.

207
00:12:38.530 --> 00:12:39.300
And then I click this.

208
00:12:39.300 --> 00:12:43.400
And it just kind of gets this built
up amount of state over time, right?

209
00:12:43.400 --> 00:12:46.340
And so, if you have to debug a problem
with a jQuery spaghetti code app.

210
00:12:46.340 --> 00:12:48.590
You kind of have to think
about your code and

211
00:12:48.590 --> 00:12:50.800
your state being modified over time,
right?

212
00:12:50.800 --> 00:12:54.600
And this time element makes understanding
what's happening in your app really,

213
00:12:54.600 --> 00:12:55.750
really, really difficult.

214
00:12:55.750 --> 00:12:59.380
It's probably, in my opinion,
the most difficult part about debugging

215
00:12:59.380 --> 00:13:02.810
a non-React app is you have to
worry about state over time.

216
00:13:04.380 --> 00:13:08.830
The way that React kinda sidesteps
this successfully is it says,

217
00:13:08.830 --> 00:13:12.080
we're going to eliminate
the time component from this.

218
00:13:12.080 --> 00:13:13.980
And basically you say, okay,

219
00:13:13.980 --> 00:13:18.920
given these props in this state,
my app looks like this.

220
00:13:18.920 --> 00:13:20.760
So, instead of worrying
about your app over time,

221
00:13:20.760 --> 00:13:24.650
you think given this snapshot,
this is what this app looks like.

222
00:13:26.140 --> 00:13:28.685
Right, so given these sets of props,

223
00:13:28.685 --> 00:13:34.510
I have this search component.
&gt;&gt; Speaker 2: Question,

224
00:13:34.510 --> 00:13:37.420
if I don't want to update my
search on every key press,

225
00:13:37.420 --> 00:13:40.340
would it be okay to use force update?
&gt;&gt; Brian Holt: If

226
00:13:41.620 --> 00:13:44.700
you don't want to update your state.
&gt;&gt; Speaker 2: On each key

227
00:13:44.700 --> 00:13:48.910
press.
&gt;&gt; Brian Holt: I'm gonna go with no.

228
00:13:48.910 --> 00:13:50.580
I don't think that's okay [LAUGH].

229
00:13:50.580 --> 00:13:53.640
I think that's a bad idea.
&gt;&gt; Speaker 2: All right, next question.

230
00:13:53.640 --> 00:13:55.531
Is there a way to stop the re-render for

231
00:13:55.531 --> 00:14:02.558
debugging purposes?
&gt;&gt; Brian Holt: Not that I'm aware of nor

232
00:14:02.558 --> 00:14:07.172
do I think you want to.
&gt;&gt; Brian Holt: I mean,

233
00:14:07.172 --> 00:14:10.500
I guess, use the the debugger,
right, use the browser debugger.

234
00:14:10.500 --> 00:14:13.040
That's probably what I would
say if that's important to you.

