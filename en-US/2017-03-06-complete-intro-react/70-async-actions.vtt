WEBVTT

1
00:00:00.246 --> 00:00:02.710
&gt;&gt; Brian Holt: So, yeah, let's go tie
all this up, and then, hopefully,

2
00:00:02.710 --> 00:00:05.860
if there's more questions, we can,
kind of, tie it all together.

3
00:00:05.860 --> 00:00:07.660
So, we're inside of Action Creators now.

4
00:00:07.660 --> 00:00:09.960
We need to add two action creators here.

5
00:00:09.960 --> 00:00:14.541
We need to add one for
our synchronise action,

6
00:00:14.541 --> 00:00:21.010
which is just going to be like
sending an object to Redux, right?

7
00:00:21.010 --> 00:00:24.100
And then,
we also need to do our async thunk.

8
00:00:24.100 --> 00:00:26.944
So let's do our synchronous one first,

9
00:00:26.944 --> 00:00:30.800
because it's going to look
a lot like setSearchTerm.

10
00:00:33.090 --> 00:00:35.559
&gt;&gt; Brian Holt: So
I'm going to do ADD_OMDBdata up here.

11
00:00:39.224 --> 00:00:44.170
&gt;&gt; Brian Holt: We're going to do export

12
00:00:44.170 --> 00:00:49.118
function addOMDBData,

13
00:00:49.118 --> 00:00:52.892
imdbID, omdbData

14
00:00:56.413 --> 00:01:00.909
&gt;&gt; Brian Holt: That's going to return type

15
00:01:00.909 --> 00:01:05.593
ADD_OMDB_DATA, imdbID,

16
00:01:05.593 --> 00:01:09.630
and omdbData, right?

17
00:01:09.630 --> 00:01:12.530
Looks almost exactly
the same as the other one.

18
00:01:13.750 --> 00:01:18.505
&gt;&gt; Speaker 2: Mark is asking, shouldn't we
just pass state.omdbData as the state for

19
00:01:18.505 --> 00:01:20.250
add_omdb_data reducer?

20
00:01:24.870 --> 00:01:27.560
&gt;&gt; Brian Holt: I don't understand
the question, one more time.

21
00:01:27.560 --> 00:01:32.780
&gt;&gt; Speaker 2: Shouldn't we just pass
state.omdbData as the state for

22
00:01:32.780 --> 00:01:38.022
the ADD_OMBD_DATA reducer
&gt;&gt; Brian Holt: Do you mean it's just

23
00:01:38.022 --> 00:01:46.122
sending that part of the state
instead of the entire state out there?

24
00:01:50.086 --> 00:01:54.722
&gt;&gt; [SOUND]
&gt;&gt; Brian Holt: Sorry.

25
00:01:54.722 --> 00:01:59.320
[LAUGH]
&gt;&gt; Brian Holt: Should we

26
00:01:59.320 --> 00:02:03.630
pass state.omdbData as the state for the?

27
00:02:03.630 --> 00:02:08.030
&gt;&gt; Speaker 3: Instead of add omdbData,
sending the entire state,

28
00:02:08.030 --> 00:02:11.860
he's saying,
why don't we just a portion of newState?

29
00:02:13.040 --> 00:02:15.650
But in redux you're supposed
to send the entire state.

30
00:02:15.650 --> 00:02:17.570
Not a portion of the state.

31
00:02:17.570 --> 00:02:18.820
&gt;&gt; Brian Holt: Okay.
I see where we're disconnecting here,

32
00:02:18.820 --> 00:02:19.470
so yes.

33
00:02:20.860 --> 00:02:21.800
So newState or

34
00:02:21.800 --> 00:02:24.960
state right here is literally
the entire state of the entire redux.

35
00:02:24.960 --> 00:02:26.680
&gt;&gt; Speaker 3: And
it's always supposed to be that way.

36
00:02:26.680 --> 00:02:29.310
It's never supposed to be
a portion of the state.

37
00:02:29.310 --> 00:02:31.030
&gt;&gt; Brian Holt: Yeah, it's never going
to be a portion of the state or

38
00:02:31.030 --> 00:02:31.630
anything like that.

39
00:02:31.630 --> 00:02:33.440
It's literally the entire state.

40
00:02:33.440 --> 00:02:35.060
&gt;&gt; Speaker 3: That breaks consistency.

41
00:02:35.060 --> 00:02:37.320
&gt;&gt; Brian Holt: Right, so you want to
be careful that you leave the rest of

42
00:02:37.320 --> 00:02:40.720
the state alone and you only modify
your corner your interested in, and

43
00:02:40.720 --> 00:02:43.520
then you return the entire universe,
right?

44
00:02:43.520 --> 00:02:44.750
So your handed the whole universe.

45
00:02:44.750 --> 00:02:50.100
You make your tiny little modification and
you return the new universe.

46
00:02:50.100 --> 00:02:53.410
Because if you don't return
the rest of the old universe,

47
00:02:53.410 --> 00:02:55.150
right, it just gets blown away.

48
00:02:55.150 --> 00:02:57.279
Which is exactly what
you don't want to do.

49
00:03:04.126 --> 00:03:07.188
&gt;&gt; Speaker 3: I think people are just
used to passing the only minimal

50
00:03:07.188 --> 00:03:10.706
amount of parameters until-
&gt;&gt; Brian Holt: Yeah, I mean, I like that

51
00:03:10.706 --> 00:03:15.185
mindset, right, that you're working with
the smallest amount of data possible.

52
00:03:17.784 --> 00:03:20.584
&gt;&gt; Speaker 3: But it doesn't work,
because you need to return the entire

53
00:03:20.584 --> 00:03:21.540
state
&gt;&gt; Brian Holt: Right,

54
00:03:21.540 --> 00:03:24.100
because you want these
functions to be repeatable,

55
00:03:24.100 --> 00:03:26.540
no side effects,
all that kind of good stuff.

56
00:03:29.750 --> 00:03:30.300
Cool.

57
00:03:30.300 --> 00:03:37.450
So, lets go back to action creators,
and we're going to do export

58
00:03:39.500 --> 00:03:44.980
function getOMDBDetails.

59
00:03:44.980 --> 00:03:49.130
And it's going to take an imdbID.

60
00:03:56.123 --> 00:03:58.438
&gt;&gt; Brian Holt: And
what this is going to do,

61
00:03:58.438 --> 00:04:02.110
this is going to be our Func creator,
right.

62
00:04:03.330 --> 00:04:09.456
So what's peculiar about funcs as opposed
to actions, these return objects, right?

63
00:04:09.456 --> 00:04:12.710
What a func creator is going to do
is it's going to return a function.

64
00:04:18.510 --> 00:04:26.559
So we're going to return
function dispatch, and getState.

65
00:04:29.137 --> 00:04:31.990
&gt;&gt; Brian Holt: Okay, so
the function returns a function.

66
00:04:31.990 --> 00:04:35.492
It's kind of weird, but
bear with me for a second,

67
00:04:35.492 --> 00:04:40.141
and I'll explain to you why that
weird contract works well, okay?

68
00:04:43.165 --> 00:04:46.930
&gt;&gt; Brian Holt: So dispatch, this is
exactly what you would expect it to be.

69
00:04:46.930 --> 00:04:50.380
This is how you dispatch
a object to Redux, right?

70
00:04:50.380 --> 00:04:54.880
This is the same dispatch we've
been working with inside of React,

71
00:04:54.880 --> 00:04:56.180
with React Redux.

72
00:04:57.530 --> 00:05:01.210
GetState is a function we're actually not
going to use here, but it's important, so

73
00:05:01.210 --> 00:05:03.310
I wanted to let you know that it exists.

74
00:05:03.310 --> 00:05:08.260
That if you need to do something based
on the current Redux store's data, you

75
00:05:08.260 --> 00:05:13.800
can call this get state function and it's
going to pass you the state from Redux.

76
00:05:14.970 --> 00:05:19.060
So it's a convenience feature if you
need to do something based on that.

77
00:05:20.460 --> 00:05:22.320
We don't need it, I just wanted to
let you know that it's available.

78
00:05:23.810 --> 00:05:24.790
Okay?
And then what we're going to do,

79
00:05:24.790 --> 00:05:29.850
is we're going to go to details.

80
00:05:30.970 --> 00:05:34.810
And we're just going to grab everything
that's in component in mount right here.

81
00:05:34.810 --> 00:05:37.649
So just copy and paste this axios stuff.

82
00:05:40.203 --> 00:05:45.380
&gt;&gt; Brian Holt: And go back to action
creators and just paste it in there.

83
00:05:48.470 --> 00:05:53.179
But instead of this.props.show,
we're going to drop that so

84
00:05:53.179 --> 00:05:55.280
it's just imdbID, right.

85
00:05:55.280 --> 00:05:56.880
It's going to refer to
the same one right here.

86
00:05:56.880 --> 00:06:00.434
And then instead of dispatch, sorry,

87
00:06:00.434 --> 00:06:05.010
instead of this.state,
we're going to dispatch,

88
00:06:10.198 --> 00:06:15.665
&gt;&gt; Brian Holt: imdbID and omdbData:

89
00:06:15.665 --> 00:06:20.271
response.data.

90
00:06:33.580 --> 00:06:34.080
&gt;&gt; Brian Holt: Okay.

91
00:06:37.830 --> 00:06:40.920
&gt;&gt; Brian Holt: So, let's talk
about what's going to happen here.

92
00:06:40.920 --> 00:06:48.570
Well, you call getOMDBDetails,
and you dispatch that to redux.

93
00:06:48.570 --> 00:06:52.710
Redux is going to call
the function that this returns.

94
00:06:52.710 --> 00:06:56.150
So redox is going to call this function,
right?

95
00:06:56.150 --> 00:07:00.820
You called this function, getOMDBDetails,
redux calls the inner function for

96
00:07:00.820 --> 00:07:03.020
you, okay?

97
00:07:03.020 --> 00:07:07.400
That's going to kick of this axios, which
we have to import, I forgot about that.

98
00:07:07.400 --> 00:07:08.220
Import that at the top.

99
00:07:10.980 --> 00:07:14.160
Import axios from axios.

100
00:07:16.700 --> 00:07:21.510
So redux calls this, axios is going to
do this thing it's going to call dot get

101
00:07:21.510 --> 00:07:25.070
which is a synchronous and takes some
time because it has to go out to the API

102
00:07:25.070 --> 00:07:30.750
servers and return, then once it
come back, it's going to dispatch

103
00:07:30.750 --> 00:07:35.080
this action,
that I did not call correctly.

104
00:07:35.080 --> 00:07:43.270
So dispatch, sorry, addOMDBData, right?

105
00:07:43.270 --> 00:07:45.200
So we're actually going to call
this one that we just created.

106
00:07:50.908 --> 00:07:54.374
&gt;&gt; Brian Holt: So that's what's actually
going to dispatch that action that gets

107
00:07:54.374 --> 00:07:55.840
thrown to the root reducer.

108
00:08:04.546 --> 00:08:05.550
&gt;&gt; Brian Holt: Does that makes sense?

109
00:08:05.550 --> 00:08:06.510
We follow so far?

110
00:08:11.016 --> 00:08:13.620
&gt;&gt; Brian Holt: So I'll show you how
to invoke this here in just a second.

111
00:08:13.620 --> 00:08:16.760
Because we still need to go actually
call that inside of details, right.

112
00:08:17.780 --> 00:08:19.970
But I just want to make sure
that it makes sense that,

113
00:08:19.970 --> 00:08:24.420
you call this function,
it returns this function right here.

114
00:08:24.420 --> 00:08:26.219
This one gets called by redux.

115
00:08:27.760 --> 00:08:28.830
This is going to happen, right?

116
00:08:28.830 --> 00:08:32.040
It's going to axios.get and
then once it's finished, but

117
00:08:32.040 --> 00:08:37.120
then it's finally going to dispatch
the action that we created up here.

118
00:08:37.120 --> 00:08:41.070
So we're not actually going to call
addaddOMDBData from within details,

119
00:08:41.070 --> 00:08:43.270
we actually technically don't
even have to export it.

120
00:08:45.570 --> 00:08:48.890
However, you just do,
you export all of your action creators.

121
00:08:48.890 --> 00:08:52.240
Because what happens later if we
want to synchronously do that.

122
00:08:52.240 --> 00:08:55.000
So, up to you though.

123
00:08:55.000 --> 00:09:00.140
I just choose to.

124
00:09:00.140 --> 00:09:01.050
Okay.

125
00:09:01.050 --> 00:09:02.907
Any questions before we go make it work?

126
00:09:06.847 --> 00:09:08.930
&gt;&gt; Brian Holt: So go back to details.

127
00:09:10.350 --> 00:09:13.860
&gt;&gt; Speaker 2: Does this
patch expect a function?

128
00:09:15.060 --> 00:09:20.970
Or if you just wanted to have it dispatch
just the object, could you do that?

129
00:09:20.970 --> 00:09:22.045
On line 16 there.

130
00:09:22.045 --> 00:09:24.090
&gt;&gt; Brian Holt: Mm-hm.

131
00:09:24.090 --> 00:09:27.606
&gt;&gt; Speaker 2: Is, so
dispatch is coming from,

132
00:09:27.606 --> 00:09:32.060
Redux is going to call dispatch, and
so does it always expect a function?

133
00:09:34.130 --> 00:09:35.170
&gt;&gt; Brian Holt: So-
&gt;&gt; Speaker 4: It's expecting

134
00:09:35.170 --> 00:09:36.440
an action, right?

135
00:09:37.800 --> 00:09:38.610
&gt;&gt; Brian Holt: An action, right?

136
00:09:38.610 --> 00:09:41.010
So, could you just do the action
here instead of the function?

137
00:09:41.010 --> 00:09:41.590
Absolutely.

138
00:09:41.590 --> 00:09:43.559
&gt;&gt; Speaker 4: Yeah,
if you didn't need to To do then.

139
00:09:43.559 --> 00:09:47.430
&gt;&gt; Brian Holt: Yes; I mean if nothing
ever, would ever call addOMBData,

140
00:09:48.940 --> 00:09:52.270
then you could just do
the action directly there.

141
00:09:52.270 --> 00:09:55.190
I just personally always
make that a function.

142
00:09:57.010 --> 00:09:58.480
Because then this is reuseable, right?

143
00:09:58.480 --> 00:10:00.020
And I don't have to care
about the shape of that,

144
00:10:00.020 --> 00:10:03.289
I just have to care about
what parameters I pass it.

145
00:10:04.580 --> 00:10:08.090
I find that to be a convenience,
but up to you.

146
00:10:08.090 --> 00:10:13.070
These are design decisions you can make.

147
00:10:13.070 --> 00:10:15.820
&gt;&gt; Speaker 2: Going back over to
the discussion about the state and

148
00:10:15.820 --> 00:10:21.920
what you're returning, Jacob said
you could use combine reducers too.

149
00:10:21.920 --> 00:10:22.630
&gt;&gt; Brian Holt: Yep, you can.

150
00:10:24.300 --> 00:10:27.110
So instead of the root reducer,
there's a convenience function called

151
00:10:27.110 --> 00:10:29.970
combined reducers, and
you're more than welcome to use it.

152
00:10:32.070 --> 00:10:36.080
&gt;&gt; Speaker 2: Amber's asking does add
omdbData take an object for args?

153
00:10:37.950 --> 00:10:40.450
&gt;&gt; Brian Holt: Does it take an object for
what?

154
00:10:40.450 --> 00:10:42.208
&gt;&gt; Speaker 2: For args, I guess arguments.

155
00:10:42.208 --> 00:10:43.006
&gt;&gt; Brian Holt: For args, sorry.

156
00:10:45.588 --> 00:10:54.110
&gt;&gt; Brian Holt: So
imdbID is going to be a string.

157
00:10:54.110 --> 00:10:57.460
And omdbData is going to be an object,
right.

158
00:10:57.460 --> 00:10:59.750
Are you talking about the action creator?

159
00:10:59.750 --> 00:11:01.310
I think there's also
a reducer called that.

160
00:11:03.000 --> 00:11:05.750
So there's the state and
the action here, as well, right?

161
00:11:05.750 --> 00:11:09.390
But this is the action we
create via the actionCreator.

162
00:11:11.070 --> 00:11:12.652
And yeah, this is the state.

