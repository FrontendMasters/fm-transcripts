WEBVTT

1
00:00:00.090 --> 00:00:02.786
&gt;&gt; Brian Holt: So
let's actually start talking about React.

2
00:00:02.786 --> 00:00:08.630
And we're gonna do something kind of
a-typical here with React in the sense of.

3
00:00:08.630 --> 00:00:11.329
Well just, for
those of you that are snooping right now,

4
00:00:11.329 --> 00:00:15.225
I'm ignoring those global installs,
I'm gonna come back to them later, okay?

5
00:00:15.225 --> 00:00:17.746
Because I know someone's thinking
about like, he skipped that,

6
00:00:17.746 --> 00:00:18.744
I'm doing it on purpose.

7
00:00:18.744 --> 00:00:21.480
Okay, so, React.

8
00:00:21.480 --> 00:00:26.470
Now I would say many React developers
even today people like me that have been

9
00:00:26.470 --> 00:00:31.510
writing React a long time don't know that
you don't need any tooling to write React.

10
00:00:31.510 --> 00:00:36.290
You can write React, just plain old
React today with no tooling whatsoever.

11
00:00:36.290 --> 00:00:39.030
That's exactly what we're
gonna start doing right now.

12
00:00:39.030 --> 00:00:42.914
Just to show you that there is no,
there is nothing behind the curtain,

13
00:00:42.914 --> 00:00:45.325
there is nothing mysterious going on here.

14
00:00:45.325 --> 00:00:49.178
This is really just a library that has
function calls that produces markup,

15
00:00:49.178 --> 00:00:50.091
the end, right?

16
00:00:50.091 --> 00:00:57.205
That's it, so yeah, no ES6,
no JSX, just barebone React.

17
00:00:57.205 --> 00:01:00.922
And we're gonna write that.
&gt;&gt; Brian Holt: So

18
00:01:00.922 --> 00:01:05.207
let's actually start addressing
why React is useful.

19
00:01:05.207 --> 00:01:06.783
Why are we pulling this library?

20
00:01:06.783 --> 00:01:11.544
What problem it's solving.
&gt;&gt; Brian Holt: I

21
00:01:11.544 --> 00:01:15.896
mentioned many of you are coming
from jQuery backgrounds,

22
00:01:15.896 --> 00:01:20.170
from Angular, Backbone, Ember, Knockout.

23
00:01:20.170 --> 00:01:25.094
I don't know, other libraries that
I can't think of right now, Cycle.

24
00:01:25.094 --> 00:01:30.638
If you're coming from Cycle and not
writing React already, then good for you.

25
00:01:30.638 --> 00:01:37.610
[LAUGH] So, yeah, we're gonna
start talking about what React is.

26
00:01:37.610 --> 00:01:39.600
React is just kind of a view library.

27
00:01:39.600 --> 00:01:41.620
Now, that's a gross simplification.

28
00:01:41.620 --> 00:01:45.710
It does a little bit more
than just a view library, but

29
00:01:45.710 --> 00:01:49.750
a good starting point for forming
your mental model of what React is,

30
00:01:49.750 --> 00:01:53.200
it's just thinking of it as the view
in the model view controller.

31
00:01:53.200 --> 00:01:58.640
Again gross simplification, but
that's a good place to start.

32
00:02:02.020 --> 00:02:05.660
And I guess it's kind of worth addressing
what happened to MBC in the front end.

33
00:02:05.660 --> 00:02:11.030
So, many of you come from
back-end type positions.

34
00:02:11.030 --> 00:02:14.766
Right, you've written Django or Rails or

35
00:02:14.766 --> 00:02:18.930
a play like some of these
different libraries.

36
00:02:18.930 --> 00:02:24.010
That aim to separate your concerns into
models, views and controllers, right.

37
00:02:24.010 --> 00:02:26.790
You have the model that talks to the
database, you have the view that actually

38
00:02:26.790 --> 00:02:29.270
talks to the client, and then you have
the controller that kind of wires up

39
00:02:30.610 --> 00:02:33.370
the talking between the models and
the views.

40
00:02:34.680 --> 00:02:36.847
That works phenomenally for
the back-end, right?

41
00:02:36.847 --> 00:02:39.791
Like that abstraction makes
a lot of sense because you have,

42
00:02:39.791 --> 00:02:43.760
this code definitely goes in the model,
this code definitely goes in the view.

43
00:02:43.760 --> 00:02:47.190
And we have this just like little
wiring layer between the two, right?

44
00:02:47.190 --> 00:02:48.030
Works amazing.

45
00:02:49.790 --> 00:02:53.620
Maintaining projects that are written
well in MBC in the back end is a joy.

46
00:02:55.370 --> 00:02:58.272
So people decided, okay,
can we take these kinda cool ideas and

47
00:02:58.272 --> 00:03:02.520
this good idea of separating concerns from
the backend into the front end, right?

48
00:03:02.520 --> 00:03:03.510
And we ended up with Backbone.

49
00:03:04.560 --> 00:03:05.669
And Backbone's a good library, right?

50
00:03:05.669 --> 00:03:08.540
If you have written any
amount of Backbone,

51
00:03:08.540 --> 00:03:12.421
it's usually not too bad until
things go wildly wrong, and

52
00:03:12.421 --> 00:03:16.080
then it's horrible and
people die and stuff like that.

53
00:03:16.080 --> 00:03:19.040
Just kidding.

54
00:03:19.040 --> 00:03:20.990
So we tried to take this
abstraction built for

55
00:03:20.990 --> 00:03:24.570
the server and we tried to kind of
shoehorn it into the front end.

56
00:03:24.570 --> 00:03:29.084
And we found out that this quickly
kind of falls apart because there's no

57
00:03:29.084 --> 00:03:32.932
true models, there's no true views,
and the controllers,

58
00:03:32.932 --> 00:03:38.118
these concerns kind of get blurry really,
really quickly of what should go where.

59
00:03:38.118 --> 00:03:40.277
And so you end up with these mixed
weird looking code basis and

60
00:03:40.277 --> 00:03:42.729
you know you have a problem, and
you don't know if it's in the view,

61
00:03:42.729 --> 00:03:45.671
you don't know if it's in the model,
you don't know if it's in the controller.

62
00:03:45.671 --> 00:03:47.881
And you end up with this really,
really hard to debug,

63
00:03:47.881 --> 00:03:49.139
really hard to read a project.

64
00:03:51.610 --> 00:03:56.517
So people kind of starting
exploring beyond backbone.

65
00:03:56.517 --> 00:03:59.247
Backbone was not necessarily the best
abstraction for the front end and so

66
00:03:59.247 --> 00:04:02.210
we started coming up with these
things like Angular and Ember.

67
00:04:02.210 --> 00:04:10.176
That's kind of start of shifting more
towards a UI type of concerns, right?

68
00:04:10.176 --> 00:04:13.660
And those were really great, too.

69
00:04:13.660 --> 00:04:15.565
But we still kind of end
up these problem with,

70
00:04:15.565 --> 00:04:20.180
I have this piece of code that needs to do
something and I don't know where it goes.

71
00:04:20.180 --> 00:04:23.420
So we discover that we have
problems with Ember and

72
00:04:23.420 --> 00:04:27.450
Backbone, I'm talking about older Ember,
older, sorry, older Angular,

73
00:04:27.450 --> 00:04:32.052
older Ember of I have this concern and
I don't know where it goes, right.

74
00:04:32.052 --> 00:04:33.984
I would say Ember is a little
bit on the better side of this,

75
00:04:33.984 --> 00:04:35.372
Angular is a little bit on the worse side.

76
00:04:35.372 --> 00:04:39.830
But when you have a concern and you don't
know where it goes, that's a real problem.

77
00:04:39.830 --> 00:04:41.501
One, for when you first write it but

78
00:04:41.501 --> 00:04:44.751
two, it's a bigger problem when
you have a problem with it, right.

79
00:04:44.751 --> 00:04:48.619
So I write this particular piece of code,
I put it on to the web I have a bug

80
00:04:48.619 --> 00:04:54.250
that if I don't instantly know where that
bug is going to be, that's a real problem.

81
00:04:54.250 --> 00:04:55.886
So let me give you an example.

82
00:04:55.886 --> 00:05:00.801
Let's say I had some sort of JavaScript
code that as soon as I clicked that

83
00:05:00.801 --> 00:05:05.000
React title,
that it pops something up, right?

84
00:05:05.000 --> 00:05:06.975
I don't know, something stupid like that.

85
00:05:06.975 --> 00:05:10.836
If this was written in older angular,
you can ask yourself, okay, so

86
00:05:10.836 --> 00:05:16.886
I have a problem with this particular,
&gt;&gt; Brian Holt: Piece of JavaScript,

87
00:05:16.886 --> 00:05:18.911
where does that JavaScript code live?

88
00:05:18.911 --> 00:05:20.079
Does it live in the directive?

89
00:05:20.079 --> 00:05:21.063
Does it live in the controller?

90
00:05:21.063 --> 00:05:23.724
Does it live in the other directive?

91
00:05:23.724 --> 00:05:25.145
Does it live in the scope?

92
00:05:25.145 --> 00:05:27.496
Does it live in the template?

93
00:05:27.496 --> 00:05:30.870
These are all perfectly viable places
where that particular piece of

94
00:05:30.870 --> 00:05:32.090
code could live.

95
00:05:32.090 --> 00:05:33.760
And that sucks, right.

96
00:05:33.760 --> 00:05:36.520
Because now you have to go check seven
places to try and find your boat.

97
00:05:38.580 --> 00:05:43.780
So, the smart people at Facebook/Instagram
at the time said this is a problem.

98
00:05:43.780 --> 00:05:49.980
We want our code to be have a well
defined place where logic goes and

99
00:05:49.980 --> 00:05:54.400
we want to have very easy
to follow code flows.

100
00:05:54.400 --> 00:05:57.678
They kind of took that whole
NBC idea as this is not good.

101
00:05:57.678 --> 00:06:00.990
We're not gonna follow this,
we're gonna go with something else.

102
00:06:00.990 --> 00:06:03.960
So they threw that all out and
they ended up with this kind of React idea

103
00:06:05.140 --> 00:06:09.200
that the best idea that people
have come up with so far for

104
00:06:09.200 --> 00:06:12.710
UIs is just the basic request
response cycle, right?

105
00:06:12.710 --> 00:06:15.360
You make a request to Web Server,
you get back a response, right?

106
00:06:15.360 --> 00:06:18.770
As a user, I make a request
by clicking on a button and

107
00:06:18.770 --> 00:06:21.080
I get a response by something
happening back at me.

108
00:06:21.080 --> 00:06:23.312
This request response cycle
made a lot of sense to

109
00:06:23.312 --> 00:06:26.125
people.
&gt;&gt; Brian Holt: So

110
00:06:26.125 --> 00:06:31.309
they kinda built on top of that and they
kinda arrived at the idea of one rather

111
00:06:31.309 --> 00:06:36.501
than trying to separate concerns out for
these different pieces of UI code.

112
00:06:36.501 --> 00:06:39.030
What we should do is we should
take all of the concerns.

113
00:06:39.030 --> 00:06:41.540
And shove them together for
very small pieces.

114
00:06:42.880 --> 00:06:46.546
So taking this example again
of this React headline

115
00:06:46.546 --> 00:06:51.090
right there.
&gt;&gt; Brian Holt: I'm going to take all

116
00:06:51.090 --> 00:06:54.605
of the concerns for this behavior,
for the mark up, for the,

117
00:06:54.605 --> 00:06:59.349
all that JavaScript, CSS, HTML, and
we're just going to shove it all together.

118
00:06:59.349 --> 00:07:04.430
And it's all going to be right there for
this very small component, right?

119
00:07:04.430 --> 00:07:08.630
So if I have a problem when I click on it,
the problem is right there, right?

120
00:07:08.630 --> 00:07:10.860
Because all of the code is right there.

121
00:07:10.860 --> 00:07:13.685
And so by knowing what the problem is.

122
00:07:13.685 --> 00:07:16.640
I also know where the code starts right.

123
00:07:16.640 --> 00:07:18.636
Now that code could
bring in other modules.

124
00:07:18.636 --> 00:07:21.253
But it gives you the start
of the trail right.

125
00:07:21.253 --> 00:07:25.323
The post on the trail says,
the debugging path lies this way.

126
00:07:25.323 --> 00:07:26.990
And it's dark and dreary and scary.

127
00:07:30.480 --> 00:07:34.428
So, yeah that's kinda the idea behind
React, is we're gonna take all of our

128
00:07:34.428 --> 00:07:37.486
concerns, and shove them together for
very small pieces.

129
00:07:37.486 --> 00:07:40.554
And then we're going to take
these different pieces, and

130
00:07:40.554 --> 00:07:44.320
we're going to build bigger, and
bigger applications as we go along.

131
00:07:45.760 --> 00:07:49.098
Question?
&gt;&gt; Speaker 2: Yeah it was just React

132
00:07:49.098 --> 00:07:52.568
versus Vue or Vu or whatever.
&gt;&gt; Speaker 3: Vue.

133
00:07:52.568 --> 00:07:53.802
&gt;&gt; Brian Holt: I would say the React

134
00:07:53.802 --> 00:07:58.453
versus Vue questions pretty similar
to the React versus Angular question,

135
00:07:58.453 --> 00:07:59.407
in my opinion.

136
00:07:59.407 --> 00:08:04.315
So it's just,
&gt;&gt; Brian Holt: I'd say Vue's

137
00:08:04.315 --> 00:08:05.560
a little bit lighter weight.

138
00:08:05.560 --> 00:08:11.010
It's really good for It's been
a long time since I worked in Vue.

139
00:08:11.010 --> 00:08:12.866
So I think my best
question is don't ask me.

140
00:08:12.866 --> 00:08:15.650
[LAUGH] That's not my best answer to that.

141
00:08:15.650 --> 00:08:18.900
My second answer is that I like I
had a very pleasant time writing it,

142
00:08:18.900 --> 00:08:21.040
and it seems like they're
going in a good direction.

143
00:08:21.040 --> 00:08:25.150
So check it out, I think that's
probably the best answer for that.

144
00:08:26.380 --> 00:08:27.700
Any other questions?
&gt;&gt; Speaker 4: Another

145
00:08:27.700 --> 00:08:29.050
question in the channel.

146
00:08:29.050 --> 00:08:34.130
Sanjay asks what, I don't know.

147
00:08:34.130 --> 00:08:37.520
Basically, mixing a react with jQuery.

148
00:08:37.520 --> 00:08:40.329
How to do it if we want to do it,
and those kinds of things.

149
00:08:40.329 --> 00:08:41.110
&gt;&gt; Brian Holt: One can, and

150
00:08:41.110 --> 00:08:42.110
one should not.

151
00:08:42.110 --> 00:08:46.994
[LAUGH] So, what one can do and what one
should do are totally different things.

152
00:08:46.994 --> 00:08:48.690
It can be done.

153
00:08:48.690 --> 00:08:50.473
And there's good examples of it.

154
00:08:50.473 --> 00:08:54.866
Like, for example Stripe has
a really cool Jquery library for

155
00:08:54.866 --> 00:08:58.170
formulating currencies and
stuff like that.

156
00:08:58.170 --> 00:09:00.860
I think it's called jquery.payments,
if I remember correctly.

157
00:09:00.860 --> 00:09:02.980
This was a while ago when I wrote this,
and

158
00:09:02.980 --> 00:09:06.210
I had to write a glue layer between
react and this j query plugin.

159
00:09:06.210 --> 00:09:09.870
And it can be done, it works okay,
it's just gross and

160
00:09:09.870 --> 00:09:14.110
messy, and It's a messy abstraction.

161
00:09:14.110 --> 00:09:18.270
So it can be done, but as soon as you
start writing React you should really try

162
00:09:18.270 --> 00:09:23.530
and pull all the other libraries
out of your particular application.

163
00:09:23.530 --> 00:09:24.860
So try and get rid of jQuery, try and

164
00:09:24.860 --> 00:09:27.110
get rid of Backbone,
all of those different things.

165
00:09:29.470 --> 00:09:32.880
I'd also not suggest trying
to marry React and Backbone.

166
00:09:34.520 --> 00:09:38.170
I've seen a lot of people trying
to do that with not great success.

167
00:09:38.170 --> 00:09:43.320
I will say a valid migration strategy if
you're on Backbone is to rip out the view

168
00:09:43.320 --> 00:09:49.500
layer of Backbone, put in React and then
slowly move everything else into React.

169
00:09:49.500 --> 00:09:53.030
But you need to have the goal of
migrating completely off Backbone.

170
00:09:53.030 --> 00:09:57.540
Don't try and
leave this gross hybrid out in production.

171
00:09:57.540 --> 00:09:58.140
That's a bad idea.

