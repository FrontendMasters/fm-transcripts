WEBVTT

1
00:00:00.510 --> 00:00:02.456
&gt;&gt; Brian: So we're finally on Redux.

2
00:00:02.456 --> 00:00:04.117
[LAUGH] It took us awhile, but

3
00:00:04.117 --> 00:00:07.450
there's actually a reason why
I structured it this way.

4
00:00:09.220 --> 00:00:12.020
Redux is a pretty big sledgehammer.

5
00:00:12.020 --> 00:00:15.260
Like it's a really heavy library.

6
00:00:15.260 --> 00:00:17.556
And it's not in the sense of page weight,
but

7
00:00:17.556 --> 00:00:20.948
it really is going to cause you to
refactor your application a lot.

8
00:00:20.948 --> 00:00:25.806
And it's over [COUGH] excuse me,
it's overkill for almost all apps or

9
00:00:25.806 --> 00:00:31.780
in other words, I don't use Redux that
much personally because it's way too much.

10
00:00:31.780 --> 00:00:35.720
Usually Redux does
everything sufficiently.

11
00:00:35.720 --> 00:00:39.360
Like everything I just showed you,
that's how I usually build apps.

12
00:00:39.360 --> 00:00:42.070
Until I get to a certain point
where I just can't manage all of

13
00:00:42.070 --> 00:00:44.150
my state that way, and
then I bring in Redux.

14
00:00:46.040 --> 00:00:49.255
Redux is a phenomenal library,
but even the creator, himself,

15
00:00:49.255 --> 00:00:52.950
Dan says, this is not for every app.

16
00:00:52.950 --> 00:00:54.790
In fact, this is not for most apps.

17
00:00:56.160 --> 00:00:59.740
So my suggestion to you, if you're
starting out building a new application,

18
00:00:59.740 --> 00:01:02.180
just start with React, Set State and

19
00:01:02.180 --> 00:01:04.280
Props is usually enough for
just about everything.

20
00:01:04.280 --> 00:01:07.190
It's a really predictable, explicit

21
00:01:09.380 --> 00:01:13.050
way of managing your state, and
React is really good at it.

22
00:01:13.050 --> 00:01:17.350
So that's my suggestion to all of you, is
start with React until you hit the point

23
00:01:17.350 --> 00:01:21.660
where you say, I can't do this anymore,
and then, we factor in to include Redux.

24
00:01:21.660 --> 00:01:25.540
And refactoring to include
Redux is not super difficult.

25
00:01:25.540 --> 00:01:28.930
And to prove that to you, we're gonna
refactor just a tiny bit of our app to use

26
00:01:28.930 --> 00:01:34.060
Redux instead of using reacts and
set state, and stuff like that.

27
00:01:34.060 --> 00:01:37.410
So let's talk about
what Redux actually is.

28
00:01:37.410 --> 00:01:44.550
Redux, itself, I like to say that
Redux is a simple but hard library.

29
00:01:44.550 --> 00:01:46.740
Simple in the sense that
there's not a lot to Redux.

30
00:01:46.740 --> 00:01:51.140
It's not a very big library, but actually
it's pretty difficult to get your mind

31
00:01:51.140 --> 00:01:54.180
fully around everything that's going on.

32
00:01:54.180 --> 00:01:57.930
There's a gist out there somewhere
that you can implement Redux in like

33
00:01:57.930 --> 00:01:59.180
80 lines of code.

34
00:01:59.180 --> 00:02:00.940
The entire library in 80 lines of code.

35
00:02:02.080 --> 00:02:04.690
Now, the library itself, what's on GitHub,
is much bigger than that but

36
00:02:04.690 --> 00:02:06.430
they include a bunch of
convenience methods.

37
00:02:06.430 --> 00:02:10.510
But the core part of Redux is,
there's not much to it.

38
00:02:12.710 --> 00:02:15.330
So it's a central repository
of all of your state.

39
00:02:17.300 --> 00:02:20.640
So instead of keeping your data in
like in each individual component,

40
00:02:20.640 --> 00:02:25.310
we just take all of that out and
we put it into one giant central store.

41
00:02:26.770 --> 00:02:27.670
Now, why would we do that?

42
00:02:27.670 --> 00:02:31.430
That seems to kinda go against everything
that I have just been telling you about.

43
00:02:31.430 --> 00:02:33.930
Well, sometimes having
components splits a cost,

44
00:02:33.930 --> 00:02:36.629
multiple components becomes
almost impossible to manage.

45
00:02:38.250 --> 00:02:41.310
Imagine that if you have to start
animating components across the page and

46
00:02:41.310 --> 00:02:45.620
they have to have multiple transition that
include multiple components all at once,

47
00:02:45.620 --> 00:02:50.000
it's really tough to orchestrate
that across components

48
00:02:50.000 --> 00:02:52.170
to the point that it's almost impossible.

49
00:02:52.170 --> 00:02:55.580
It's really hard for for components to
talk to each other and at by design.

50
00:02:56.660 --> 00:03:00.730
So instead of trying to make
this crazy pub-sub system or

51
00:03:00.730 --> 00:03:04.080
something crazy like that to do it,
what you do is you just

52
00:03:04.080 --> 00:03:08.190
externalize that all into Redux.
&gt;&gt; Speaker 2: Francois was asking,

53
00:03:08.190 --> 00:03:10.000
we hear about flux and redux.

54
00:03:10.000 --> 00:03:12.050
Can you talk about
the differences between the two?

55
00:03:12.050 --> 00:03:12.759
&gt;&gt; Brian: Yeah, I'm getting there.

56
00:03:14.860 --> 00:03:16.722
That's a good question.
&gt;&gt; Speaker 2: I'm just gonna hotkey that.

57
00:03:16.722 --> 00:03:17.873
&gt;&gt; [LAUGH]

58
00:03:17.873 --> 00:03:18.504
&gt;&gt; Brian: I'm getting there.

59
00:03:18.504 --> 00:03:23.505
[LAUGH] Yeah, I say that a lot,

60
00:03:23.505 --> 00:03:26.713
definitely true.

61
00:03:26.713 --> 00:03:27.630
Back to Redux.

62
00:03:27.630 --> 00:03:31.440
So you externalize all of
your state into Redux.

63
00:03:31.440 --> 00:03:35.580
And I'm saying Redux right now but
you can substitute Redux, flux,

64
00:03:35.580 --> 00:03:39.320
mobix into all these places that I
have currently set Redux so far.

65
00:03:40.600 --> 00:03:44.360
Anyway, you externalize all
of your state into Redux, and

66
00:03:44.360 --> 00:03:47.580
Redux is just like one central
repository for all of your data.

67
00:03:49.350 --> 00:03:53.510
So now when you have to do multiple state
changes across multiple components,

68
00:03:53.510 --> 00:03:57.380
because it all lives in one place,
pretty easy to do.

69
00:03:57.380 --> 00:03:58.760
Cuz it's all available
to you all the time.

70
00:04:00.130 --> 00:04:05.920
So that's kind of the value
proposition about Redux.

71
00:04:05.920 --> 00:04:07.730
You bring all of your
state into one place, and

72
00:04:07.730 --> 00:04:11.800
it's really easy to distribute
that across your app.

73
00:04:13.100 --> 00:04:17.170
But your trade off there is you now
have a hard dependency on Redux.

74
00:04:17.170 --> 00:04:22.547
And it's a lot less
obvious to read your code.

75
00:04:22.547 --> 00:04:25.446
You're gonna come in there,
you're gonna see this.props.something and

76
00:04:25.446 --> 00:04:28.010
you're not gonna know where
necessarily it came from.

77
00:04:28.010 --> 00:04:31.362
It's gonna come from Redux so that'll
become more concrete as we actually

78
00:04:31.362 --> 00:04:35.150
explore that.
&gt;&gt; Brian: So

79
00:04:35.150 --> 00:04:38.500
Redux is a predictable state container for
JavaScript apps.

80
00:04:38.500 --> 00:04:39.680
That's the best way to put it.

81
00:04:39.680 --> 00:04:41.580
It is not react specific.

82
00:04:41.580 --> 00:04:44.270
I think that's a pretty big key to note,
as well.

83
00:04:44.270 --> 00:04:45.510
Redux works with angular, too.

84
00:04:45.510 --> 00:04:48.220
It works with all these other libraries.

85
00:04:48.220 --> 00:04:50.779
It just happened to be
standardized with react first.

86
00:04:55.838 --> 00:04:57.650
&gt;&gt; Brian: So where did Redux come from?

87
00:04:57.650 --> 00:05:00.290
I think that's kind of an interesting
thing to note when you're talking

88
00:05:00.290 --> 00:05:00.814
about Redux.

89
00:05:00.814 --> 00:05:04.684
When Facebook launched React,
they kinda ran into,

90
00:05:04.684 --> 00:05:09.844
especially with animations,
animations are tough with React because

91
00:05:09.844 --> 00:05:14.675
of their kind of separate nature
of all the different components.

92
00:05:14.675 --> 00:05:17.381
Especially when they're
supposed to coordinate.

93
00:05:17.381 --> 00:05:19.613
There's a couple other reasons, as well.

94
00:05:19.613 --> 00:05:22.118
Like remember when we were doing shows and

95
00:05:22.118 --> 00:05:25.710
we had two different places
that wanted to read from shows.

96
00:05:25.710 --> 00:05:28.390
So we had to push it up
to a common ancestor.

97
00:05:28.390 --> 00:05:29.530
That happens a lot with Redux.

98
00:05:29.530 --> 00:05:32.020
It's a very common problem to have.

99
00:05:32.020 --> 00:05:35.438
And if you have to go through seven
different layers it comes a pain

100
00:05:35.438 --> 00:05:36.068
in the ass.

101
00:05:36.068 --> 00:05:42.025
It ends up saying this process

102
00:05:42.025 --> 00:05:46.323
gets passed to this.

103
00:05:46.323 --> 00:05:48.700
You have to do several layers deep.

104
00:05:48.700 --> 00:05:51.020
It's called the data tunneling problem,
and

105
00:05:51.020 --> 00:05:55.530
it's horrendous to deal with.
&gt;&gt; Speaker 2: Durante has a question.

106
00:05:56.940 --> 00:05:59.940
I think sort of back to
just the previous topic.

107
00:05:59.940 --> 00:06:03.505
Isn't harder to understand where there's a
bug since state isn't inside the component

108
00:06:03.505 --> 00:06:06.144
that you talked to that [CROSSTALK]
&gt;&gt; Brian: Yeah, absolutely,

109
00:06:06.144 --> 00:06:10.250
you lose that reliability for
debugging, which is also a problem.

110
00:06:12.230 --> 00:06:14.880
Sort of, cuz you're centralizing
your state in a different place.

111
00:06:14.880 --> 00:06:18.250
So if you have a state problem,
you still know that you start with Redux.

112
00:06:18.250 --> 00:06:20.950
So it just means that
there's a few extra steps.

113
00:06:22.170 --> 00:06:24.850
A few to quite a few
extra steps debugging.

114
00:06:25.860 --> 00:06:27.210
It's still predictable.

115
00:06:27.210 --> 00:06:28.840
It's still a good way of doing code.

116
00:06:28.840 --> 00:06:31.140
Like, I'm not trying to
rag on Redux at all.

117
00:06:31.140 --> 00:06:33.611
It's very good at what it does.

118
00:06:33.611 --> 00:06:35.930
But it just adds
complexity to your system.

119
00:06:37.100 --> 00:06:40.290
And that's like been the theme of this
entire workshop is like let's start with

120
00:06:40.290 --> 00:06:45.590
the simplest thing possible and let's
do the simple thing until it gets hard.

121
00:06:45.590 --> 00:06:48.540
Then, let's add complexity
to make it easier.

122
00:06:48.540 --> 00:06:52.970
That's kind of been then the factor,
refactor of this entire workshop.

123
00:06:52.970 --> 00:06:54.810
This is a big step.

124
00:06:54.810 --> 00:06:59.870
All these previous steps I feel like
are pretty no brainer, okay I understand

125
00:06:59.870 --> 00:07:04.700
why that's difficult, I understand why
I have this tool, let's just do it.

126
00:07:04.700 --> 00:07:05.630
This is a big step and

127
00:07:05.630 --> 00:07:09.560
this is one you need to ask yourself a lot
of questions before you take this step.

128
00:07:09.560 --> 00:07:13.940
It will become worth it if you have these
problems that I'm talking about and

129
00:07:13.940 --> 00:07:15.190
it's not worth it.

130
00:07:15.190 --> 00:07:19.843
If you don't have these problems.
&gt;&gt; Brian: So

131
00:07:19.843 --> 00:07:22.570
going to back to redux and flux.

132
00:07:24.080 --> 00:07:25.880
Facebook came up with this idea of well,

133
00:07:25.880 --> 00:07:29.440
why can't we take this same idea with
React and we have this one-way data flow.

134
00:07:29.440 --> 00:07:32.790
Cuz one-way data flow made
interfaces really easy.

135
00:07:32.790 --> 00:07:34.950
Why don't we kind of apply
that to statement management,

136
00:07:34.950 --> 00:07:37.692
as well?
&gt;&gt; Speaker 2: Question about does Netflix

137
00:07:37.692 --> 00:07:38.834
use Redux?
&gt;&gt; Brian: In some

138
00:07:38.834 --> 00:07:40.910
parts of the application.

139
00:07:40.910 --> 00:07:42.770
My team doesn't.

140
00:07:42.770 --> 00:07:44.770
That's because we built
relatively small apps, and

141
00:07:44.770 --> 00:07:47.368
we have many small apps.
&gt;&gt; Speaker 2: Is it because

142
00:07:47.368 --> 00:07:50.970
you don't need a Redux type component?
&gt;&gt; Brian: Yeah,

143
00:07:50.970 --> 00:07:53.280
it just would be giant overkill for
everything we do.

144
00:07:56.670 --> 00:07:59.890
So they introduced this idea Flux.

145
00:07:59.890 --> 00:08:02.390
This idea of one way data flow.

146
00:08:04.020 --> 00:08:05.130
And I'm not gonna get to much into it.

147
00:08:05.130 --> 00:08:07.260
You can go read the Flux ox.

148
00:08:07.260 --> 00:08:11.650
But it was a good idea it was
just no quite all the way there.

149
00:08:11.650 --> 00:08:13.262
It wasn't full flushed out.

150
00:08:13.262 --> 00:08:14.830
Like they didn't release a library.

151
00:08:14.830 --> 00:08:17.960
They just kinda released
this idea of the Flux idea.

152
00:08:17.960 --> 00:08:23.020
And then, a bunch of people did Fluxer,
Flimix, Alt.

153
00:08:23.020 --> 00:08:27.220
There are all these different libraries
that implement the flux pattern.

154
00:08:28.930 --> 00:08:31.960
Well, Dan Abramov, who's the guy that
wrote half the shit that we're using

155
00:08:31.960 --> 00:08:36.315
today, he did hot module reload,
he did redux,

156
00:08:36.315 --> 00:08:40.110
he did, and he now works at Facebook and
does other things, as well.

157
00:08:40.110 --> 00:08:41.400
He works on reactive self.

158
00:08:42.910 --> 00:08:46.050
He was preparing a talk,
I think it was for react Europe.

159
00:08:46.050 --> 00:08:50.400
And he wanted to just demonstrates some

160
00:08:50.400 --> 00:08:53.110
core concept about like hot module
reload and some other things like that.

161
00:08:53.110 --> 00:08:57.525
So he came up with the hot
reloadable Flux container and that

162
00:08:57.525 --> 00:09:00.650
kinda bore out Redux and that's actually
what we're going to be using today,

163
00:09:00.650 --> 00:09:02.550
it's still pretty much the same premise.

164
00:09:05.270 --> 00:09:08.820
So that's kind of like
Flux evolved into Redux.

165
00:09:08.820 --> 00:09:11.450
Redux is not Flux but everything,

166
00:09:11.450 --> 00:09:15.399
all those good ideas he just took
the best parts of Flux and made Redux.

167
00:09:16.660 --> 00:09:19.060
If you do flux it you end
up with a lot of complexity

168
00:09:20.200 --> 00:09:24.080
because with flux you have
multiple stores and so

169
00:09:24.080 --> 00:09:29.230
trying to find your data across multiple
stores ends up being really non intuitive.

170
00:09:29.230 --> 00:09:33.670
With redux everything just lives
in one central repository.

171
00:09:33.670 --> 00:09:36.890
You have exactly one place to start
which is always a good place to be

172
00:09:36.890 --> 00:09:37.410
with debugging.

173
00:09:41.960 --> 00:09:44.450
Let's go over what actually makes redux.

174
00:09:44.450 --> 00:09:46.372
Unless anyone has any
questions before I start?

175
00:09:53.763 --> 00:09:54.462
&gt;&gt; Brian: So again,

176
00:09:54.462 --> 00:09:58.386
I mentioned it I'm not gonna
be talking about Mob X today.

177
00:09:58.386 --> 00:10:01.320
I'm not gonna be talking about any
other kind of way of doing this

178
00:10:01.320 --> 00:10:02.560
Central State Repositories.

179
00:10:02.560 --> 00:10:03.600
You are welcome to check them out.

180
00:10:03.600 --> 00:10:05.220
They're all equally interesting.

181
00:10:06.460 --> 00:10:10.670
But Redux in my opinion is
probably the best place to start.

182
00:10:11.900 --> 00:10:13.610
It's the simplest.

183
00:10:13.610 --> 00:10:16.060
Mob X is even more complicated.

184
00:10:16.060 --> 00:10:17.620
But does even cooler stuff.

185
00:10:17.620 --> 00:10:18.530
I don't say even cooler stuff,

186
00:10:18.530 --> 00:10:23.980
but it does really cool stuff.
&gt;&gt; Speaker 2: Question from Craig,

187
00:10:23.980 --> 00:10:27.510
clarify data tunneling
is common in react or

188
00:10:27.510 --> 00:10:30.101
redux?
&gt;&gt; Brian: It's common in react and

189
00:10:30.101 --> 00:10:36.018
it's a problem that redux solves.
&gt;&gt; Brian: Just

190
00:10:36.018 --> 00:10:39.700
imagine if we had show cards and
the show cards had a title component and

191
00:10:39.700 --> 00:10:43.510
the title component had, I don't know,
something else inside of it.

192
00:10:43.510 --> 00:10:48.190
So we had to pass down title seven
different layers, that's annoying

193
00:10:48.190 --> 00:10:52.330
because now you have a hard dependency in
every one of those components of title.

194
00:10:52.330 --> 00:10:55.370
Each one has to receive title so
it can pass it down.

195
00:10:55.370 --> 00:10:56.450
That's annoying, especially for

196
00:10:56.450 --> 00:10:58.130
a component that doesn't
rely on being titled.

197
00:10:58.130 --> 00:11:01.250
It's just one of its
children relies on it.

198
00:11:01.250 --> 00:11:01.750
It's an issue.

199
00:11:03.040 --> 00:11:04.920
And so, that's what Redux solves here.

200
00:11:04.920 --> 00:11:08.760
Is it takes that out and so it makes it
just the component that needs it gets it.

201
00:11:08.760 --> 00:11:11.600
Any other ancestor components
don't necessarily have to keep it.

