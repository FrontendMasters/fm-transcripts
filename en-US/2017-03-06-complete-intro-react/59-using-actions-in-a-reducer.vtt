WEBVTT

1
00:00:00.340 --> 00:00:02.670
&gt;&gt; Brian: So this is a bare bones action.

2
00:00:02.670 --> 00:00:03.850
Bare bones action creator.

3
00:00:03.850 --> 00:00:08.940
Now we have to go make reducers know what
to do with the SET_SEARCH_TERM action.

4
00:00:10.290 --> 00:00:14.570
Let's go back to reducers.js, okay.

5
00:00:14.570 --> 00:00:16.386
We're gonna need an import
here at the top.

6
00:00:16.386 --> 00:00:18.761
Import { SET_SEARCH_TERM }

7
00:00:24.819 --> 00:00:29.370
&gt;&gt; Brian: From ./actions, okay.

8
00:00:29.370 --> 00:00:33.437
Now we need a case,

9
00:00:33.437 --> 00:00:39.540
sense search term, colon,

10
00:00:39.540 --> 00:00:45.550
return.
&gt;&gt; Brian: Let's see,

11
00:00:49.203 --> 00:00:51.293
&gt;&gt; Brian: Yeah, setSearchTerm,

12
00:00:51.293 --> 00:00:57.270
which is a reducer that we're about
to create, with state and action.

13
00:01:00.160 --> 00:01:03.430
So this is what I was talking about
when we're dispatching to another

14
00:01:03.430 --> 00:01:03.980
Reducer, right?

15
00:01:03.980 --> 00:01:08.150
So setSearchTerm is gonna be the exact
same contract as rootReducer, but

16
00:01:08.150 --> 00:01:12.400
it's only going to handle this
particular type of action.

17
00:01:12.400 --> 00:01:15.500
So we're gonna pass this same state
that we got up here from rootReducer,

18
00:01:15.500 --> 00:01:17.100
and the same action.

19
00:01:17.100 --> 00:01:20.280
And then we're going to let it,
it being setSearchTerm,

20
00:01:20.280 --> 00:01:22.430
handle the reduction, right?

21
00:01:22.430 --> 00:01:24.630
And then it's going to
return the result of that,

22
00:01:24.630 --> 00:01:27.810
which is going to be the new state, which
is going to be the state that we end up

23
00:01:27.810 --> 00:01:29.860
with.
&gt;&gt; Speaker 2: You just flip back to

24
00:01:29.860 --> 00:01:31.690
actions just for a quick second?

25
00:01:31.690 --> 00:01:33.180
&gt;&gt; Brian: Actions?
&gt;&gt; Speaker 2: Yeah.

26
00:01:33.180 --> 00:01:33.994
&gt;&gt; Brian: Yeah it's literally just that.

27
00:01:42.492 --> 00:01:44.870
&gt;&gt; Brian: Okay, back to Reducers.

28
00:01:44.870 --> 00:01:46.385
Now we need to go create
this method right here.

29
00:01:48.453 --> 00:01:50.995
&gt;&gt; Brian: So we're going to create another

30
00:01:50.995 --> 00:01:59.032
function called, const setSearchTerm,
&gt;&gt; Brian: = (state,

31
00:01:59.032 --> 00:02:04.793
action)
&gt;&gt; Brian: Okay,

32
00:02:04.793 --> 00:02:09.931
const newState equals empty objects.

33
00:02:13.140 --> 00:02:18.265
&gt;&gt; Brian: We're gonna do Object.assign

34
00:02:18.265 --> 00:02:21.116
newState, state

35
00:02:23.126 --> 00:02:31.977
&gt;&gt; Brian: searchTerm:action.searchTerm.

36
00:02:31.977 --> 00:02:39.331
return newState.
&gt;&gt; Brian: You'll

37
00:02:39.331 --> 00:02:42.264
find many reducers end up
looking very very similar to

38
00:02:42.264 --> 00:02:44.890
this.
&gt;&gt; Speaker 2: Just a question, why did you

39
00:02:44.890 --> 00:02:47.335
create the intermediate variable?
&gt;&gt; Brian: The new state?

40
00:02:47.335 --> 00:02:49.110
&gt;&gt; Speaker 2: Mm-hm.

41
00:02:49.110 --> 00:02:50.430
&gt;&gt; Brian: Because of the,

42
00:02:50.430 --> 00:02:52.620
how object assign works.

43
00:02:52.620 --> 00:02:57.900
Object assign modifies the first one.
&gt;&gt; Speaker 2: Yeah, but why did you create

44
00:02:57.900 --> 00:03:02.180
the intermediate variable, constant?
&gt;&gt; Brian: So why don't I

45
00:03:02.180 --> 00:03:04.074
just modify state and return state?
&gt;&gt; Speaker 2: No,

46
00:03:04.074 --> 00:03:06.531
why don't you just put the empty
object in new state and

47
00:03:06.531 --> 00:03:10.661
return from object?
&gt;&gt; Brian: Why don't I put

48
00:03:10.661 --> 00:03:12.790
searchTerm in here?

49
00:03:12.790 --> 00:03:15.398
Okay, so, are you saying why
don't I put searchTerm here?

50
00:03:15.398 --> 00:03:16.373
&gt;&gt; Speaker 2: No.

51
00:03:16.373 --> 00:03:18.340
&gt;&gt; Brian: Okay.

52
00:03:18.340 --> 00:03:19.290
&gt;&gt; Speaker 2: No,

53
00:03:19.290 --> 00:03:23.230
why do you need the constant
called newState.

54
00:03:24.990 --> 00:03:29.489
You can return directly from object.
&gt;&gt; Speaker 3: I

55
00:03:29.489 --> 00:03:34.176
think he's saying if you replace on line
9 newState with the empty braces and

56
00:03:34.176 --> 00:03:36.660
then return from there.
&gt;&gt; Speaker 2: Yeah, and

57
00:03:36.660 --> 00:03:40.465
then change newState in that same line,
line nine.

58
00:03:40.465 --> 00:03:44.720
Return newState, wait, excuse me,

59
00:03:44.720 --> 00:03:49.000
replace that with an empty object.
&gt;&gt; Brian: What is a return of Object and

60
00:03:49.000 --> 00:03:50.130
assign, that's my question.

61
00:03:50.130 --> 00:03:57.404
It might work.
&gt;&gt; Brian: What

62
00:03:57.404 --> 00:03:59.820
is this?
&gt;&gt; Speaker 3: We

63
00:03:59.820 --> 00:04:02.385
thought it was a [INAUDIBLE].
&gt;&gt; Speaker 2: Century Link.

64
00:04:02.385 --> 00:04:04.130
&gt;&gt; [INAUDIBLE]

65
00:04:04.130 --> 00:04:05.280
&gt;&gt; Speaker 2: No, I think you got someone

66
00:04:05.280 --> 00:04:07.810
else's.
&gt;&gt; Speaker 3: No, no, it's.

67
00:04:07.810 --> 00:04:13.939
Yeah, it's just been default [CROSSTALK].
&gt;&gt; Speaker 2: Yeah.

68
00:04:13.939 --> 00:04:15.270
&gt;&gt; Brian: Yeah, that's cool.

69
00:04:15.270 --> 00:04:16.475
&gt;&gt; Speaker 3: Time to buy the domain

70
00:04:16.475 --> 00:04:17.670
Object.assign.
&gt;&gt; Brian: Right?

71
00:04:17.670 --> 00:04:18.510
&gt;&gt; Speaker 2: Man.

72
00:04:18.510 --> 00:04:20.380
Seriously.
&gt;&gt; Speaker 3: Someone get on that.

73
00:04:20.380 --> 00:04:21.050
&gt;&gt; Speaker 2: So anyway,

74
00:04:21.050 --> 00:04:23.860
it's supposed to return whatever
the target was you sent in after the.

75
00:04:23.860 --> 00:04:24.510
&gt;&gt; Brian: Okay, fair enough.

76
00:04:25.600 --> 00:04:26.441
&gt;&gt; Speaker 3: Just point it

77
00:04:26.441 --> 00:04:29.190
the [INAUDIBLE] docs.
&gt;&gt; Speaker 2: Anyway, I thought you may

78
00:04:29.190 --> 00:04:33.220
have a research on that, if it's just, cuz
that's your style on that kind of thing.

79
00:04:33.220 --> 00:04:35.260
&gt;&gt; Brian: That's very cool.

80
00:04:35.260 --> 00:04:39.280
That's my style.
[CROSSTALK] I'm sorry to- No problem.

81
00:04:39.280 --> 00:04:39.817
&gt;&gt; Speaker 2: Have caused trouble.

82
00:04:42.174 --> 00:04:43.587
&gt;&gt; Brian: Only that way,

83
00:04:43.587 --> 00:04:46.774
cuz that's the way it is my notes.

84
00:04:46.774 --> 00:04:52.160
So anyway, this is a very
common way of doing a Reducer.

85
00:04:52.160 --> 00:04:56.210
We take newState,
which is gonna be a brand new object.

86
00:04:58.110 --> 00:05:01.770
And we're gonna assign everything
that state had previously

87
00:05:03.050 --> 00:05:04.980
cuz we don't wanna override other things.

88
00:05:04.980 --> 00:05:06.890
Cuz there might be tons
of other state in here.

89
00:05:06.890 --> 00:05:08.970
We don't wanna blow away
everyone else's state.

90
00:05:08.970 --> 00:05:12.890
We just wanna modify our little piece of
it, and then return the new object, right.

91
00:05:14.210 --> 00:05:18.400
And then this part, the only thing that
we wanna overwrite inside of state is

92
00:05:18.400 --> 00:05:21.140
the search term, so
that's why you had that last one.

93
00:05:22.360 --> 00:05:25.450
So if you're not familiar with how object
to assign works, It's basically going to

94
00:05:25.450 --> 00:05:30.040
take everything in the first subject,
right, so that just already exists.

95
00:05:30.040 --> 00:05:32.390
It's going to take everything that's
inside of this second object.

96
00:05:32.390 --> 00:05:36.590
So, if this had searchTerm and
a bunch of other particular state,

97
00:05:36.590 --> 00:05:40.020
it's going to merge all
that into newState, right?

98
00:05:40.020 --> 00:05:43.028
And then it's going to take
everything in this object, and

99
00:05:43.028 --> 00:05:46.688
merge that into this, right?
&gt;&gt; Brian: So

100
00:05:46.688 --> 00:05:49.707
if newState and
state both have SearchTerms in them,

101
00:05:49.707 --> 00:05:54.530
the one that's going to quote on quote
survive is going to be this one, right?

102
00:05:54.530 --> 00:05:55.961
Cuz that's the one
the furthest to the right.

103
00:05:58.574 --> 00:06:00.610
&gt;&gt; Brian: Does that make sense?

104
00:06:00.610 --> 00:06:03.060
Object at a sign,
I believe is in, is it ES6?

105
00:06:03.060 --> 00:06:07.510
I think it is an ES6,
I guess I have the docs up don't it?

106
00:06:07.510 --> 00:06:09.760
&gt;&gt; Speaker 2: Sorry, the object of sine,

107
00:06:09.760 --> 00:06:11.720
I believe is eight?

108
00:06:11.720 --> 00:06:15.080
2015?
&gt;&gt; Brian: Yes, yeah it came with ES6, so

109
00:06:15.080 --> 00:06:19.520
it is a new spec.
&gt;&gt; Speaker 2: Question, or request I'm

110
00:06:19.520 --> 00:06:25.208
a little lost with the flow of
files that we've created for

111
00:06:25.208 --> 00:06:31.240
the reducer, can you summarize?
&gt;&gt; Brian: The flow files?

112
00:06:31.240 --> 00:06:35.270
Just like the flow of how-
&gt;&gt; Speaker 2: I think just the process of

113
00:06:35.270 --> 00:06:37.730
creating them all.
&gt;&gt; Brian: Sure.

114
00:06:37.730 --> 00:06:42.820
I haven't fully closed the loop yet,
so if it's still not exactly apparent,

115
00:06:42.820 --> 00:06:45.030
the loop has not yet been closed.

116
00:06:45.030 --> 00:06:51.770
So I guess let's finish let's
close the loop and then we'll

117
00:06:51.770 --> 00:06:56.970
walk through literally line by line of the
code and figure our how everything moves.

118
00:06:58.390 --> 00:07:00.380
And then after that we'll
take out lunch break.

119
00:07:04.580 --> 00:07:09.641
Okay, so.
&gt;&gt; Brian: Yeah,

120
00:07:09.641 --> 00:07:12.920
let's focus here just a second on
the reducer just a little bit more.

121
00:07:14.300 --> 00:07:17.480
So again, this doesn't modify
any external state, right?

122
00:07:17.480 --> 00:07:21.030
So, one of the big keys to
reducers is that they don't,

123
00:07:21.030 --> 00:07:24.900
they reliably, given the same state and
given the same action,

124
00:07:24.900 --> 00:07:30.180
it performs the same operation
100 times out of 100.

125
00:07:30.180 --> 00:07:32.930
So it needs to be stateless in that sense.

126
00:07:32.930 --> 00:07:35.750
It needs to be pure,
it needs to have no side effects.

127
00:07:35.750 --> 00:07:39.610
However you want to refer to that,
that's what a reducer must be.

128
00:07:40.790 --> 00:07:43.980
Furthermore, it's imperative that you
don't actually just modify state and

129
00:07:43.980 --> 00:07:44.710
return state.

130
00:07:45.790 --> 00:07:51.170
The way that Redux tells that
if it has a modification is,

131
00:07:51.170 --> 00:07:56.010
it does a shallow comparison on
state versus the old state, right?

132
00:07:56.010 --> 00:08:00.190
So if I return the same state, it's gonna
say, okay, you returned the same state,

133
00:08:00.190 --> 00:08:02.780
I'm not gonna notify my
subscribers that anything changed.

134
00:08:03.900 --> 00:08:06.430
So in other words, React will never know.

135
00:08:06.430 --> 00:08:09.600
The only way that Redux informs
React that something changed

136
00:08:09.600 --> 00:08:12.530
is if it gets a new state,
a different object.

137
00:08:12.530 --> 00:08:14.410
So in this particular case newState.

138
00:08:15.720 --> 00:08:16.510
Does that follow?

139
00:08:16.510 --> 00:08:18.040
Does that make sense?

140
00:08:18.040 --> 00:08:22.380
So you must return a new object and
you must not modify the old object.

141
00:08:25.760 --> 00:08:26.490
It makes sense?

142
00:08:28.400 --> 00:08:30.700
So, that's the anatomy of a reducer.

143
00:08:30.700 --> 00:08:32.850
Some of them can get a little bit
more complex than that, but for

144
00:08:32.850 --> 00:08:37.250
the most part reducers themselves
are not terribly complicated.

145
00:08:37.250 --> 00:08:38.840
&gt;&gt; Speaker 2: A question,

146
00:08:38.840 --> 00:08:43.360
can you use the spread
operator instead of a sign?

147
00:08:43.360 --> 00:08:45.670
&gt;&gt; Brian: If you have object spread, or

148
00:08:45.670 --> 00:08:46.980
the object spread operator.

149
00:08:48.980 --> 00:08:55.010
So Object Spread Operator
is a part of VS 2017.

150
00:08:55.010 --> 00:08:58.600
Object Spread Operator.

151
00:09:03.200 --> 00:09:06.080
Yeah, Redux actually has part of that.

152
00:09:08.070 --> 00:09:16.328
Spread syntax, I always trust MDN.
&gt;&gt; Brian: Okay, that's fine, where is it?

153
00:09:20.703 --> 00:09:25.100
&gt;&gt; Brian: Anyway, it's not in ES 2015.

154
00:09:25.100 --> 00:09:28.419
It's not in ES6, so
that's why I don't default to using

155
00:09:28.419 --> 00:09:34.819
it.
&gt;&gt; Brian: But yes, if that is

156
00:09:34.819 --> 00:09:39.020
available to you and you feel comfortable
using it by all means, it's simpler.

157
00:09:41.000 --> 00:09:42.392
Or it's just less characters,

158
00:09:42.392 --> 00:09:47.108
I don't wanna assert it's simpler.
&gt;&gt; Brian: Any questions about Reducers,

159
00:09:47.108 --> 00:09:51.448
specifically
&gt;&gt; Brian: Does that make sense what

160
00:09:51.448 --> 00:09:56.039
a Reducer is, like what it does, like
it's compact, there is not much there but

161
00:09:56.039 --> 00:09:59.700
it is, there is a lot to unpack
there mentally what's going on.

