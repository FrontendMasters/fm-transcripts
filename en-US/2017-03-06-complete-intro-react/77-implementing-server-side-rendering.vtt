WEBVTT

1
00:00:00.310 --> 00:00:02.702
&gt;&gt; Brian Holt: So we have another problem.

2
00:00:02.702 --> 00:00:05.290
So go to Babble RC.

3
00:00:05.290 --> 00:00:07.656
So we need Babble to be
running on the server now,

4
00:00:07.656 --> 00:00:11.086
which is kind of a heavy handed thing
to do but necessary nonetheless.

5
00:00:11.086 --> 00:00:14.270
Because we're gonna be trying import
this code into a node environment.

6
00:00:15.280 --> 00:00:19.467
And unfortunately as of right now, well,

7
00:00:19.467 --> 00:00:26.111
Node doesn't speak jsx,
Node doesn't speak import statements.

8
00:00:26.111 --> 00:00:28.760
Node doesn't speak all of ES6 yet, so

9
00:00:28.760 --> 00:00:31.982
we need Babble to take
care of that stuff for us.

10
00:00:31.982 --> 00:00:35.380
We need Babble to transpile our codes so
that Node can understand it.

11
00:00:37.160 --> 00:00:42.760
So the only one that we're using right
now that we need to definitely enforce,

12
00:00:42.760 --> 00:00:48.190
that we're not already enforcing is that
this transform-es20150-modules-commonjs,

13
00:00:48.190 --> 00:00:50.110
we need that to also happen on the server.

14
00:00:51.840 --> 00:00:56.838
So just like we did for tests,
we're just going to copy and

15
00:00:56.838 --> 00:01:00.516
paste that, but change this to be server.

16
00:01:00.516 --> 00:01:06.759
And so on the server,
it'll run the es2015 transformation in

17
00:01:06.759 --> 00:01:11.897
addition to the es2015 suite and
the react suite.

18
00:01:11.897 --> 00:01:14.608
Right, but
we need to transpile those modules as well

19
00:01:20.399 --> 00:01:21.106
&gt;&gt; Brian Holt: Yup.

20
00:01:23.299 --> 00:01:28.920
&gt;&gt; Brian Holt: Okay, now we're ready
to start server side rendering.

21
00:01:30.010 --> 00:01:32.440
So go to server.js.

22
00:01:32.440 --> 00:01:36.200
And unfortunately,
this is just a lot of code all at once.

23
00:01:36.200 --> 00:01:39.890
It either works or it doesn't,
so let's make it work.

24
00:01:39.890 --> 00:01:48.015
First thing we're going to do is we're
going to do require ('babel-register').

25
00:01:48.015 --> 00:01:49.541
This is going to make is so

26
00:01:49.541 --> 00:01:53.622
our require statements are going
to be transpiled through Babel.

27
00:01:53.622 --> 00:01:54.750
A necessary evil.

28
00:01:54.750 --> 00:02:00.049
It's gonna slow down our server but
nonetheless, we still have to do it.

29
00:02:00.049 --> 00:02:03.227
The other thing to keep in mind
while you're writing this,

30
00:02:03.227 --> 00:02:05.834
this file server.js itself
is not transpiled so

31
00:02:05.834 --> 00:02:09.220
you have to write it in such a way
that you don't require Babel.

32
00:02:10.460 --> 00:02:14.643
You can ge around that if you
really feel like you need to.

33
00:02:14.643 --> 00:02:16.649
The one that people are tempted
to use is Babel node.

34
00:02:16.649 --> 00:02:20.760
And don't use Babel node in production,
ever, period, end of sentence.

35
00:02:20.760 --> 00:02:21.420
It's the worst.

36
00:02:21.420 --> 00:02:23.440
It's super slow.

37
00:02:23.440 --> 00:02:26.940
It's amazing for testing stuff,
but it's bad for production.

38
00:02:26.940 --> 00:02:28.807
So don't use Babel node in production.

39
00:02:31.463 --> 00:02:32.809
&gt;&gt; Brian Holt: I'm going
to pull an express.

40
00:02:34.800 --> 00:02:37.589
I point express because most
people already know it.

41
00:02:37.589 --> 00:02:39.780
It's a pretty simple web server.

42
00:02:39.780 --> 00:02:41.367
I don't care which one you use.

43
00:02:41.367 --> 00:02:43.684
You can use Happy, Happy is amazing.

44
00:02:43.684 --> 00:02:46.460
You can use Restify that's
what we use at Netflix,.

45
00:02:48.080 --> 00:02:49.989
Whatever works for you and

46
00:02:49.989 --> 00:02:54.687
here we just gonna do a tonne of
imports cuz we need a lot of stuff.

47
00:02:54.687 --> 00:03:03.410
ReactDOMServer =
require('react-dom/server').

48
00:03:03.410 --> 00:03:06.703
So instead of doing react-dom.render,

49
00:03:06.703 --> 00:03:11.189
we're gonna do react-dom/server
to render to string.

50
00:03:11.189 --> 00:03:14.915
So it's gonna render our entire
app out to a long string.

51
00:03:14.915 --> 00:03:16.928
And we're gonna ship that down as HTML.

52
00:03:21.198 --> 00:03:26.762
&gt;&gt; Brian Holt: Okay,
we're gonna get ReactRouter

53
00:03:26.762 --> 00:03:32.510
= require('react-router').

54
00:03:34.810 --> 00:03:36.426
And then we're gonna pull out.

55
00:03:39.390 --> 00:03:40.569
&gt;&gt; Brian Holt: The server router.

56
00:03:48.209 --> 00:03:54.011
&gt;&gt; Brian Holt: We're
going to bring in lodash,

57
00:03:54.011 --> 00:04:00.650
just for it's templeting function.

58
00:04:00.650 --> 00:04:03.915
We are going to bring in fs, which is
going to read from the file system.

59
00:04:03.915 --> 00:04:07.560
It's build into node.

60
00:04:07.560 --> 00:04:08.795
We're going to define a port.

61
00:04:11.260 --> 00:04:16.944
I'm gonna use 5050,
you can use whatever one you want.

62
00:04:16.944 --> 00:04:21.801
const baseTemplate is going to

63
00:04:21.801 --> 00:04:25.916
be = fs.readFileSync.

64
00:04:25.916 --> 00:04:28.016
This is gonna read something
from our file system and

65
00:04:28.016 --> 00:04:29.830
it's gonna block until it finishes.

66
00:04:29.830 --> 00:04:32.662
This is fine when you're doing
a start up for your server.

67
00:04:32.662 --> 00:04:35.207
Obviously, you don't wanna
block the thread very often.

68
00:04:38.515 --> 00:04:44.150
&gt;&gt; Brian Holt: const
template = _.template.

69
00:04:44.150 --> 00:04:47.490
Again, I'm not particularly interested
in the internals of how lodash

70
00:04:47.490 --> 00:04:48.330
template works.

71
00:04:48.330 --> 00:04:50.340
You can look at it on the docs
if you're interested.

72
00:04:50.340 --> 00:04:53.720
But suffice to say,
it's just a templating function.

73
00:04:53.720 --> 00:04:54.490
That's all it does.

74
00:04:56.740 --> 00:05:01.400
So it's going to read in base template,
which we imported right here,

75
00:05:01.400 --> 00:05:03.660
and it's going to create
a templating function.

76
00:05:03.660 --> 00:05:06.820
So that's what this template
function is right here.

77
00:05:06.820 --> 00:05:08.832
Lastly, we're going to bring in app.

78
00:05:11.491 --> 00:05:15.370
&gt;&gt; Brian Holt: Which is './js/App' which
is the one that we just broke out.

79
00:05:17.030 --> 00:05:22.310
But because we're now in,
that one is written in ES6 modules and

80
00:05:22.310 --> 00:05:24.420
we're doing common js here with require.

81
00:05:24.420 --> 00:05:27.649
You have to say .default.

82
00:05:29.970 --> 00:05:31.980
Right, because we export the fault.

83
00:05:31.980 --> 00:05:34.080
It's weird, but that's how you
inner operate between the two.

84
00:05:35.720 --> 00:05:37.142
Okay, we're gonna start a server.

85
00:05:42.950 --> 00:05:48.542
&gt;&gt; Brian Holt: We're gonna do some,
/public.

86
00:05:51.146 --> 00:05:58.238
&gt;&gt; Brian Holt: server.use/public.

87
00:05:58.238 --> 00:06:00.211
This is going to do some
static file serving.

88
00:06:03.482 --> 00:06:05.776
&gt;&gt; Brian Holt: ./public.

89
00:06:05.776 --> 00:06:09.916
So that's just saying, If anyone requests
something from public just serve it to

90
00:06:09.916 --> 00:06:11.482
them with the proper headers.

91
00:06:14.114 --> 00:06:19.747
&gt;&gt; Brian Holt: And
then we're going to say server.use((req,

92
00:06:19.747 --> 00:06:22.894
res)) request response.

93
00:06:22.894 --> 00:06:25.349
If you're interested in
learning more about node,

94
00:06:25.349 --> 00:06:28.370
take Kyle Simpsons phenomenal note course.

95
00:06:28.370 --> 00:06:30.200
I feel like I'm just an advertisement for
Kyle.

96
00:06:31.460 --> 00:06:32.020
That's okay.

97
00:06:32.020 --> 00:06:32.536
I'm okay feeling like that.

98
00:06:32.536 --> 00:06:36.173
&gt;&gt; Speaker 2: Well, actually,
the API design in Node course by

99
00:06:36.173 --> 00:06:39.921
Scott Moss is a little bit-
&gt;&gt; Brian Holt: More updated?

100
00:06:39.921 --> 00:06:43.259
&gt;&gt; Speaker 2: Well, no,
it's just like more beginner friendly.

101
00:06:43.259 --> 00:06:45.960
I mean, Kyle's is great too.

102
00:06:45.960 --> 00:06:47.061
But, yeah.

103
00:06:47.061 --> 00:06:48.217
It's a little bit.
&gt;&gt; Brian Holt: I haven't watched Scott's,

104
00:06:48.217 --> 00:06:49.498
but if you say it's good, then watch.

105
00:06:49.498 --> 00:06:50.238
&gt;&gt; Speaker 2: Watch Scott's.

106
00:06:50.238 --> 00:06:51.538
&gt;&gt; Brian Holt: Watch both, okay?

107
00:06:51.538 --> 00:06:53.130
Just watch both.
&gt;&gt; Speaker 2: [CROSSTALK] Is great.

108
00:06:53.130 --> 00:06:55.620
Yeah, no, they're both great courses.

109
00:06:55.620 --> 00:06:56.550
But I don't know.

110
00:06:56.550 --> 00:06:58.311
Scott's is a great intro.

111
00:06:58.311 --> 00:07:00.574
&gt;&gt; Brian Holt: Okay.
&gt;&gt; Speaker 2: If you wanna build APIs.

112
00:07:00.574 --> 00:07:01.233
&gt;&gt; Brian Holt: Cool.

113
00:07:06.266 --> 00:07:07.370
&gt;&gt; Brian Holt: Okay, so.

114
00:07:09.170 --> 00:07:14.550
We're telling it for
every request that what we're

115
00:07:14.550 --> 00:07:19.330
gonna do is we are gonna use
this particular function.

116
00:07:22.140 --> 00:07:25.031
Then here are ReactRouter we
are gonna do something called

117
00:07:25.031 --> 00:07:26.924
a createServerRenderContext().

118
00:07:26.924 --> 00:07:31.701
So this is the way that V4 ReactRouter
does it's server side rendering,

119
00:07:31.701 --> 00:07:33.330
it has a two pass system.

120
00:07:34.520 --> 00:07:36.470
What it's gonna do is it's gonna try and
render once.

121
00:07:36.470 --> 00:07:41.476
If any one side of that you render
a Redirect or you render a miss,

122
00:07:41.476 --> 00:07:45.093
it's going to return to
this in this context,

123
00:07:45.093 --> 00:07:48.700
hey I had a redirect, or hey I had a miss.

124
00:07:48.700 --> 00:07:55.721
It's then up to you to say okay,
one of those two things happened,

125
00:07:55.721 --> 00:08:01.338
I'm gonna render again either
to that redirected page or

126
00:08:01.338 --> 00:08:04.165
to the 405 page, right?

127
00:08:04.165 --> 00:08:07.805
If there's no redirect and there's no 404,

128
00:08:07.805 --> 00:08:14.360
then you just worked on the first time and
you just serve whatever was rendered.

129
00:08:14.360 --> 00:08:17.013
Since we are not doing redirects and
we are not doing misses,

130
00:08:17.013 --> 00:08:20.445
we don't actually have to do the second
pass, but that's how you would do it,

131
00:08:20.445 --> 00:08:23.115
is you would check to say
createServerRenderContext().

132
00:08:23.115 --> 00:08:24.041
Did you have a redirect?

133
00:08:24.041 --> 00:08:26.054
Did you have a 404?

134
00:08:26.054 --> 00:08:26.920
Yes or no?

135
00:08:26.920 --> 00:08:28.460
If you did, go do the right thing.

136
00:08:28.460 --> 00:08:30.889
If not, then just render the correct page.

137
00:08:30.889 --> 00:08:31.619
Does that make sense?

138
00:08:33.560 --> 00:08:36.712
It's all really well documented
in ReactRouter before docs, so

139
00:08:36.712 --> 00:08:39.129
just check if you're
interested in seeing that.

140
00:08:41.700 --> 00:08:47.294
&gt;&gt; Brian Holt: But since we don't
have to worry about that concern,

141
00:08:47.294 --> 00:08:52.903
we're just going to say
let body = reactDOMServer.

142
00:08:52.903 --> 00:08:55.757
Oops renderToString.

143
00:09:01.720 --> 00:09:05.953
&gt;&gt; Brian Holt: And here, we're gonna
do some plain old JavaScript react,

144
00:09:05.953 --> 00:09:10.105
which we already know how to do
because we did it yesterday.

145
00:09:10.105 --> 00:09:14.339
Which is gonna feel
burdensome after writing JSX.

146
00:09:14.339 --> 00:09:23.426
React.createElement(ServerRouter,

147
00:09:23.426 --> 00:09:28.978
{location: req.url,

148
00:09:28.978 --> 00:09:34.535
context: context}).

149
00:09:41.510 --> 00:09:46.132
&gt;&gt; Brian Holt: Okay, and
then inside of that server router we're

150
00:09:46.132 --> 00:09:50.120
gonna do a React.createElement(App).

151
00:09:54.860 --> 00:09:55.972
&gt;&gt; Brian Holt: I guess I
don't even need to do let.

152
00:09:55.972 --> 00:09:58.730
I can just say const right there,
so const.

153
00:10:02.130 --> 00:10:03.420
Does this look familiar?

154
00:10:03.420 --> 00:10:04.960
Do you remember doing this, right?

155
00:10:04.960 --> 00:10:07.300
So this is the old way that
we were writing Reacts,

156
00:10:07.300 --> 00:10:09.429
the way that we first did
it before we did JSX.

157
00:10:09.429 --> 00:10:11.910
It feels burdensome now, doesn't it?

158
00:10:11.910 --> 00:10:14.468
Like you get used to reading that JSX,
and then you look at that as,

159
00:10:14.468 --> 00:10:15.573
I don't like that anymore.

160
00:10:15.573 --> 00:10:17.987
[LAUGH] At least that's
how I feel about it.

161
00:10:22.170 --> 00:10:27.634
&gt;&gt; Brian Holt: So
the way that would look if this was JSX,

162
00:10:27.634 --> 00:10:33.101
it would be like ServerRouter location=

163
00:10:33.101 --> 00:10:38.420
{req.url} context= {context}.

164
00:10:43.789 --> 00:10:49.226
&gt;&gt; Brian Holt: &lt;app&gt;&lt;/app&gt;, right?

165
00:10:49.226 --> 00:10:49.970
That's how that would look.

166
00:10:52.780 --> 00:10:56.140
But we just wrote it in the other way.

167
00:10:56.140 --> 00:10:59.197
Good, does that make sense?

168
00:10:59.197 --> 00:11:05.905
Okay, cool.

169
00:11:05.905 --> 00:11:10.801
Okay, so, now body is going to
be a long string of the html

170
00:11:10.801 --> 00:11:14.390
output of our app after its first render.

171
00:11:14.390 --> 00:11:20.330
Now what we need to do is tamper
that inside of our index.html and

172
00:11:20.330 --> 00:11:21.220
send it down the wire.

173
00:11:23.170 --> 00:11:26.990
So we're gonna do res.write,

174
00:11:26.990 --> 00:11:31.519
then we're gonna say (template).

175
00:11:34.057 --> 00:11:35.503
&gt;&gt; Brian Holt: {body: body}).

176
00:11:39.970 --> 00:11:43.214
&gt;&gt; Brian Holt: So template is that
function that we determined up here.

177
00:11:43.214 --> 00:11:46.140
And base template is index.html.

178
00:11:46.140 --> 00:11:50.618
And all that body colon body stuff
is it says take my body variable and

179
00:11:50.618 --> 00:11:52.119
stick it right there.

180
00:11:52.119 --> 00:11:55.054
Yeah, good, cool.

181
00:11:58.650 --> 00:12:01.585
&gt;&gt; Brian Holt: And
then all you have to do is say is res.end,

182
00:12:01.585 --> 00:12:04.071
which is gonna actually send it down.

183
00:12:04.071 --> 00:12:09.186
And at the very bottom, you're gonna say

184
00:12:09.186 --> 00:12:15.190
console.log ('listening on port,PORT).

185
00:12:15.190 --> 00:12:19.838
And server.listen (PORT).

186
00:12:24.506 --> 00:12:27.090
&gt;&gt; Brian Holt: Okay, and that is it.

187
00:12:28.250 --> 00:12:30.165
That's how you server
side render right there.

