WEBVTT

1
00:00:00.410 --> 00:00:03.640
&gt;&gt; Brian Holt: Let's actually get started,
like what actually makes Redux, Redux.

2
00:00:03.640 --> 00:00:07.124
You're gonna have a data store, the data
store is where the central place for

3
00:00:07.124 --> 00:00:08.262
all of your state lives.

4
00:00:08.262 --> 00:00:15.910
But you cannot directly modify the store,
except in what's called a reducer.

5
00:00:15.910 --> 00:00:19.280
Now that's a intimidating word,
at least it was for me.

6
00:00:19.280 --> 00:00:23.990
Cuz when you say reducer, that's
meaningless jargon to me, personally.

7
00:00:25.340 --> 00:00:27.800
Cuz I don't come from a functional
background, which is where it comes from.

8
00:00:29.670 --> 00:00:34.940
But a reducer is probably something
you might have used before.

9
00:00:34.940 --> 00:00:37.830
So if you do array.reduce,

10
00:00:37.830 --> 00:00:43.770
the function that you pass to that
reduce call is called a reducer.

11
00:00:43.770 --> 00:00:49.430
If you ever used the reduce function call,
you've created a reducer before.

12
00:00:50.490 --> 00:00:55.560
So those are analogous concepts
just keep that in mind.

13
00:00:55.560 --> 00:01:01.230
What a reducer does, all a reducer
should do is it takes in state and

14
00:01:01.230 --> 00:01:03.109
an action and returns a new state.

15
00:01:04.540 --> 00:01:08.110
That's it, there's not much
more magic to it than that.

16
00:01:08.110 --> 00:01:10.650
Many reducers are as simple
as like three lines of code.

17
00:01:10.650 --> 00:01:12.800
In fact, most of them that we're
gonna write today are literally

18
00:01:12.800 --> 00:01:13.660
three lines of code.

19
00:01:15.530 --> 00:01:19.990
But it's key that we get here to
the functional programming paradigms here,

20
00:01:19.990 --> 00:01:23.770
that with a reducer, you're gonna take in
a state, you're gonna take in an action.

21
00:01:23.770 --> 00:01:25.680
You're not gonna modify
either one of these and

22
00:01:25.680 --> 00:01:29.030
you're not gonna have any side
effects from within your reducer.

23
00:01:29.030 --> 00:01:31.000
Meaning, you're not gonna
modify any external state.

24
00:01:31.000 --> 00:01:35.410
All you gonna do is you're gonna take
in this old state and then an action.

25
00:01:35.410 --> 00:01:39.480
You're gonna apply some transformation,
you're gonna modify the state in

26
00:01:39.480 --> 00:01:43.760
some different way, but you're not
gonna modify necessarily the old state.

27
00:01:43.760 --> 00:01:47.450
You're going to create a copy of
that state, the new state, and

28
00:01:47.450 --> 00:01:48.810
you're going to return that.

29
00:01:50.810 --> 00:01:52.510
So you have no side effects,

30
00:01:52.510 --> 00:01:56.940
side effects being that you don't modify
any state that lives on perpetually.

31
00:01:59.560 --> 00:02:03.289
&gt;&gt; Speaker 2: Question, does Redux do
any compression or memory optimization?

32
00:02:03.289 --> 00:02:03.937
&gt;&gt; Brian Holt: No.

33
00:02:05.979 --> 00:02:08.450
&gt;&gt; Brian Holt: No, you can.

34
00:02:08.450 --> 00:02:13.430
But Redux itself is just
a central repository for

35
00:02:13.430 --> 00:02:16.200
what ends up being a rather large object.

36
00:02:16.200 --> 00:02:21.220
That's really what Redux is,
is a fancy wrapper around an object.

37
00:02:22.610 --> 00:02:24.600
That is reductive as all get out.

38
00:02:26.570 --> 00:02:32.840
But that's maybe a good mental model to
start with, that it's just a big object.

39
00:02:32.840 --> 00:02:34.180
The store is a big object and

40
00:02:34.180 --> 00:02:38.920
then reducer just takes a big object,
does some transformation and

41
00:02:38.920 --> 00:02:42.760
creates a new copy of that object with the
new transformation and then returns that.

42
00:02:42.760 --> 00:02:46.030
And that's now the new object,
the new store.

43
00:02:48.020 --> 00:02:50.280
This is not very concrete yet but

44
00:02:50.280 --> 00:02:53.460
as we start writing hopefully you'll
understand a little bit more.

45
00:02:55.910 --> 00:03:01.750
So your store is going to have
what's called a root reducer.

46
00:03:02.980 --> 00:03:05.690
It's going to always call
the root reducer first.

47
00:03:06.790 --> 00:03:10.200
Now technically, you could just do all of
your logic inside of the root reducer.

48
00:03:10.200 --> 00:03:11.190
That's not a good idea.

49
00:03:11.190 --> 00:03:14.920
Typically, you wanna just
dispatch that to another reducer.

50
00:03:14.920 --> 00:03:18.874
So if you're coming
from a flux background,

51
00:03:18.874 --> 00:03:21.899
that's kinda like the dispatch.

52
00:03:21.899 --> 00:03:23.942
The dispatch is kinda
like the root reducer,

53
00:03:23.942 --> 00:03:27.677
it's not necessarily quite analogous,
but it kind of serves similar purposes.

54
00:03:27.677 --> 00:03:32.939
You get your root reducer called,
your root reducer dispatches to another

55
00:03:32.939 --> 00:03:38.300
reducer that does the transformation,
and then you end up with a new state.

56
00:03:40.590 --> 00:03:45.430
So let's actually go create
our route reducer real quick.

57
00:03:47.680 --> 00:03:52.922
So create a new file, save it,
and call it reducers.js.

58
00:03:52.922 --> 00:03:56.500
Notice I do lowercase r,
cuz this is not a component.

59
00:03:57.520 --> 00:03:59.640
That's why I do that.

60
00:03:59.640 --> 00:04:01.950
It's not a constructor or
anything like that.

61
00:04:01.950 --> 00:04:04.582
It's just a file with some logic in it.

62
00:04:06.385 --> 00:04:09.308
&gt;&gt; Brian Holt: Okay, reducers.js.

63
00:04:09.308 --> 00:04:12.450
First thing we're gonna do is we're
gonna create the DEFAULT_STATE.

64
00:04:12.450 --> 00:04:16.630
This is going to be the state
that it starts up with.

65
00:04:17.980 --> 00:04:20.860
This is like the getInitialState of Redux.

66
00:04:22.550 --> 00:04:26.230
So search term is going
to be an empty string.

67
00:04:26.230 --> 00:04:30.762
This is what we're gonna
migrate to the Redux,

68
00:04:30.762 --> 00:04:36.470
is our search term and
everywhere that keeps track of that.

69
00:04:36.470 --> 00:04:41.172
We are gonna have, const rootReducer,

70
00:04:41.172 --> 00:04:45.052
this is gonna be just a function.

71
00:04:45.052 --> 00:04:48.980
So your gonna say (state, action).

72
00:05:00.199 --> 00:05:03.633
&gt;&gt; Brian Holt: So usually your root
reducer ends up being a big switch

73
00:05:03.633 --> 00:05:04.479
statement.

74
00:05:04.479 --> 00:05:06.182
Now, I know someone's gonna ask this so

75
00:05:06.182 --> 00:05:09.290
I'm just gonna preempt
the question that's gonna come up.

76
00:05:09.290 --> 00:05:12.160
There is a function called
combine reducers that makes this

77
00:05:12.160 --> 00:05:14.170
root reducer stuff a bit easier.

78
00:05:14.170 --> 00:05:17.040
We're not gonna do it today, cuz I
think it's better that you explicitly

79
00:05:17.040 --> 00:05:20.030
understand what combined
reducers is replacing.

80
00:05:20.030 --> 00:05:24.610
So we're going to write our own root
reducer instead of using combine reducers,

81
00:05:24.610 --> 00:05:27.060
but feel free to check
that out on your own time.

82
00:05:27.060 --> 00:05:29.310
I don't actually remember it well
enough to write it on the fly,

83
00:05:29.310 --> 00:05:31.446
but it's not super complicated.

84
00:05:31.446 --> 00:05:37.369
Okay, switch (action.type).

85
00:05:41.545 --> 00:05:44.823
&gt;&gt; Brian Holt: So,
I don't use too many switch statement,

86
00:05:44.823 --> 00:05:47.250
but this is a really good time to.

87
00:05:48.340 --> 00:05:52.980
Every action is going to come in with
some sort of data associated with it.

88
00:05:52.980 --> 00:05:54.560
And it's always going
to come in with a type.

89
00:05:54.560 --> 00:05:56.670
Every action must have a type.

90
00:05:59.080 --> 00:06:02.460
And the type is going to
determine where you route it.

91
00:06:02.460 --> 00:06:05.790
So you're going to route it to this
reducer, or this reducer, or this reducer.

92
00:06:05.790 --> 00:06:08.210
So it kind of determines how it gets run.

93
00:06:10.620 --> 00:06:12.230
The first one that you're
always gonna write,

94
00:06:12.230 --> 00:06:14.990
there always must be
a default thing to do.

95
00:06:14.990 --> 00:06:17.372
So, you're gonna write, default:.

96
00:06:20.623 --> 00:06:23.048
&gt;&gt; Brian Holt: Which basically means hey,
you passed in an action type and

97
00:06:23.048 --> 00:06:24.820
I don't actually know what that does.

98
00:06:24.820 --> 00:06:29.100
I don't have a reducer for that, you need
to provide for that particular case.

99
00:06:29.100 --> 00:06:32.570
If you don't know what to do with it,
all you're going to do is return state.

100
00:06:35.040 --> 00:06:38.822
So state is going to be the state of
your redux store at any given time.

101
00:06:41.816 --> 00:06:44.748
&gt;&gt; Brian Holt: In this particular case
nothing changed, so we're just gonna

102
00:06:44.748 --> 00:06:48.320
say okay, the state of my state is
going to be the state that it was.

103
00:06:48.320 --> 00:06:51.070
Nothing changed so
just keep being whatever you were.

104
00:06:54.080 --> 00:06:56.920
The other thing that we
need to do is we need to

105
00:06:56.920 --> 00:06:59.640
have some default state when we start up.

106
00:06:59.640 --> 00:07:06.100
So what you could do is state = state or
DEFAULT_STATE.

107
00:07:06.100 --> 00:07:09.959
This is kind of the old way of doing it,
old way, quote unquote.

108
00:07:11.610 --> 00:07:14.960
If you're not coming from a JavaScript
background that might look a little weird.

109
00:07:14.960 --> 00:07:18.578
Really what that expands out to is,

110
00:07:18.578 --> 00:07:23.920
if (!state), then, state = DEFAULT_STATE.

111
00:07:23.920 --> 00:07:26.869
This is just a short hand for
JavaScripty way of writing that.

112
00:07:28.170 --> 00:07:29.900
Which we're abusing the or operator.

113
00:07:31.500 --> 00:07:33.120
I don't typically advocate for that, but

114
00:07:33.120 --> 00:07:36.430
that's a practice that's been around
JavaScript for a long time, so I do that.

115
00:07:36.430 --> 00:07:40.880
However, we're writing ES6, so
we can get even more clever than that.

116
00:07:41.880 --> 00:07:43.720
We can just say =DEFAULT_STATE,

117
00:07:43.720 --> 00:07:48.240
which basically says if this is undefined,
then it's this.

118
00:07:49.480 --> 00:07:50.760
And then we can just get rid of all that.

119
00:07:53.700 --> 00:07:55.175
That's called a default parameter.

120
00:08:01.125 --> 00:08:03.630
&gt;&gt; Brian Holt: Except I think
I have to put a space there.

121
00:08:03.630 --> 00:08:04.891
Or else the is gonna yell at me.

122
00:08:13.649 --> 00:08:17.756
&gt;&gt; Brian Holt: And
then down at the bottom,

123
00:08:17.756 --> 00:08:22.218
export default rootReducer.

124
00:08:22.218 --> 00:08:24.025
So, yeah?

125
00:08:24.025 --> 00:08:26.555
&gt;&gt; Speaker 3: Would it be
a good practice to define

126
00:08:26.555 --> 00:08:28.389
a default action as an empty object?

127
00:08:29.570 --> 00:08:33.179
&gt;&gt; Brian Holt: You should
always get an action.

128
00:08:33.179 --> 00:08:37.270
&gt;&gt; Speaker 3: I mean the parameter action,
like if you're using default arguments.

129
00:08:37.270 --> 00:08:39.890
Like, if you passed in something
that wasn't an object and

130
00:08:39.890 --> 00:08:42.330
then it tried to do
switch.type with that error.

131
00:08:42.330 --> 00:08:46.390
&gt;&gt; Brian Holt: Yeah,
I guess if that was a problem.

132
00:08:46.390 --> 00:08:53.090
But again you should never get a null or
undefined action.

133
00:08:53.090 --> 00:08:54.810
That should just not happen.

134
00:08:54.810 --> 00:09:01.610
Now, I'm never against making your
program more resilient to bad data.

135
00:09:01.610 --> 00:09:06.830
Because this is messy, shit happens,
but it should never happen.

136
00:09:08.090 --> 00:09:11.980
It's reliable enough that you can
sidestep it if you don't want to do that.

137
00:09:11.980 --> 00:09:15.480
&gt;&gt; Speaker 2: Question from Richard,
do you use data normalization, and

138
00:09:15.480 --> 00:09:17.870
when do you think data
normalization is required?

139
00:09:17.870 --> 00:09:23.010
&gt;&gt; Brian Holt: Definitely way
beyond the spec of this course.

140
00:09:23.010 --> 00:09:26.820
I mean obviously data normalization
is helpful in some regards.

141
00:09:26.820 --> 00:09:29.185
But, one,
I don't know if I know enough about, or

142
00:09:29.185 --> 00:09:32.883
if I have enough opinion about it to have
an intelligent conversation about it.

143
00:09:32.883 --> 00:09:37.293
But, there's plenty written on
normalization with Redux if

144
00:09:37.293 --> 00:09:39.510
you're interested about it.

145
00:09:41.810 --> 00:09:43.403
I would take a look at that.

146
00:09:46.487 --> 00:09:47.530
&gt;&gt; Brian Holt: Any other questions?

147
00:09:49.130 --> 00:09:50.837
Sorry for the crappy answer but

148
00:09:50.837 --> 00:09:54.129
it would take way longer to talk
about than we have time for.

149
00:09:57.618 --> 00:10:05.504
&gt;&gt; Brian Holt: So, this is like
the barebones, hello word reducer, right.

150
00:10:05.504 --> 00:10:08.670
This is at least the bare minimum
that you need to get up and running.

