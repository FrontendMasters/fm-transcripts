WEBVTT

1
00:00:00.120 --> 00:00:02.430
&gt;&gt; Brian: First thing,
I need you to be on Node.

2
00:00:02.430 --> 00:00:04.741
If you're above 4, then you're golden.

3
00:00:04.741 --> 00:00:08.070
I actually installed Node 7 yesterday,
so it'll be Node 7.

4
00:00:08.070 --> 00:00:12.404
But you can be on Node 6,
anything above 4, and you're good to go.

5
00:00:12.404 --> 00:00:13.762
You could even be an io.js.

6
00:00:13.762 --> 00:00:14.528
It would still work just fine.

7
00:00:14.528 --> 00:00:17.460
So we're not gonna be doing
anything too crazy with Node today.

8
00:00:17.460 --> 00:00:21.909
It just definitely has to be above 0.10.

9
00:00:21.909 --> 00:00:23.950
If you're on .10,
you're gonna have a bad time.

10
00:00:23.950 --> 00:00:27.060
If you're on .12,
you're gonna have a partially bad time.

11
00:00:27.060 --> 00:00:32.192
So just be above 4.
&gt;&gt; Brian: I use nvm.

12
00:00:32.192 --> 00:00:33.331
I strongly recommend it.

13
00:00:33.331 --> 00:00:34.859
You do not have to, but

14
00:00:34.859 --> 00:00:38.814
I found it to be a very useful tool.
&gt;&gt; Brian: And

15
00:00:38.814 --> 00:00:43.162
I think that they have fixed
using Homebrew for installation.

16
00:00:43.162 --> 00:00:47.460
But I have historically had problems
with installing Node via Homebrew.

17
00:00:47.460 --> 00:00:52.086
So if you did and you have
permission problems, that's likely

18
00:00:52.086 --> 00:00:57.097
the reason.
&gt;&gt; Brian: Cool, so

19
00:00:57.097 --> 00:01:04.137
yeah, I think I'm on 7.0.0 today for Node.
&gt;&gt; Brian: Okay,

20
00:01:04.137 --> 00:01:08.443
we're gonna use Yarn today,
because it's new and shiny and fun.

21
00:01:08.443 --> 00:01:11.203
[LAUGH] And that's kind of the point
of these workshops, is to use new and

22
00:01:11.203 --> 00:01:12.500
shiny and fun things.

23
00:01:12.500 --> 00:01:14.470
So let's talk about what Yarn is.

24
00:01:15.580 --> 00:01:20.710
Yarn came out maybe, I dunno,
a couple months ago, a month ago.

25
00:01:20.710 --> 00:01:25.940
And it kind of replaces npm for
doing installs.

26
00:01:25.940 --> 00:01:28.610
But let's actually dive
a little bit into that.

27
00:01:30.000 --> 00:01:34.236
So typically you would've been used to
seeing npm install --save react, right?

28
00:01:34.236 --> 00:01:36.790
Like that looks familiar
if you're a Node developer.

29
00:01:36.790 --> 00:01:40.970
That's just saying pull this off the npm
registry, install it on my computer.

30
00:01:40.970 --> 00:01:42.910
Or install it particularly
into this project,

31
00:01:42.910 --> 00:01:45.040
and then save that to my package.json.

32
00:01:45.040 --> 00:01:47.020
That's what that command does, right?

33
00:01:47.020 --> 00:01:49.640
So, instead of that,
you're going to run yarn add react.

34
00:01:49.640 --> 00:01:52.400
And that's gonna do
the same sort of thing.

35
00:01:52.400 --> 00:01:55.941
But the big difference is, is if you
actually go into our project here, so

36
00:01:55.941 --> 00:02:04.243
let's open our project.
&gt;&gt; Speaker 2: I have a question.

37
00:02:04.243 --> 00:02:05.393
And I'm not sure how it fits in, so

38
00:02:05.393 --> 00:02:06.710
I'm just gonna ask it.
&gt;&gt; Brian: Sure.

39
00:02:06.710 --> 00:02:07.969
&gt;&gt; Speaker 2: Richard is asking,

40
00:02:07.969 --> 00:02:11.456
can we use import and
still do server-side rendering?

41
00:02:11.456 --> 00:02:13.874
&gt;&gt; Brian: The answer is yes, and

42
00:02:13.874 --> 00:02:17.443
we will get there late tomorrow.

43
00:02:17.443 --> 00:02:23.045
But good question.
&gt;&gt; Brian: Okay,

44
00:02:23.045 --> 00:02:26.991
so we have our package.json here,

45
00:02:26.991 --> 00:02:30.813
which came with the start branch.

46
00:02:30.813 --> 00:02:36.020
So typically we would be doing all
these dependencies individually.

47
00:02:36.020 --> 00:02:37.025
I just did them all for you.

48
00:02:37.025 --> 00:02:40.056
Because there's a lot of them and
that would be a lot of installation.

49
00:02:40.056 --> 00:02:44.010
So typically you would come in here and
say, npm install, and

50
00:02:44.010 --> 00:02:46.910
get all the dependencies installed for
you.

51
00:02:47.920 --> 00:02:49.731
Instead we are gonna use yarn.

52
00:02:49.731 --> 00:02:54.607
And what yarn does that's peculiar
as compared to npm is npm installs

53
00:02:54.607 --> 00:02:56.385
are not deterministic.

54
00:02:56.385 --> 00:03:00.373
Which is just a really fancy computer
science term that just means that you

55
00:03:00.373 --> 00:03:04.700
can't run it from any state and
end up in the same state, right?

56
00:03:04.700 --> 00:03:08.590
So if I install partially some of these
dependencies and then go back later and

57
00:03:08.590 --> 00:03:12.500
install some different ones, and
then I do it a different way again,

58
00:03:12.500 --> 00:03:16.030
I'm not gonna end up with
the same node modules directly.

59
00:03:16.030 --> 00:03:18.340
It's gonna install them
in different structures.

60
00:03:18.340 --> 00:03:22.320
It's going to be different every
single time that I run it.

61
00:03:22.320 --> 00:03:26.877
Which, if anyone has ever dealt
with non-determinism in their app,

62
00:03:26.877 --> 00:03:28.740
that's just a non-start.

63
00:03:28.740 --> 00:03:32.370
Like it's a really, really bad thing to
not be able to reliably do the same thing

64
00:03:32.370 --> 00:03:33.300
every single time, right?

65
00:03:34.370 --> 00:03:38.640
So the smart people over at
Facebook said this is a problem.

66
00:03:38.640 --> 00:03:40.030
We need to fix this, right?

67
00:03:40.030 --> 00:03:45.065
So they came up with this Yarn
library that you can install these

68
00:03:45.065 --> 00:03:50.779
dependencies in any order, at any time,
in any way, shape, or form.

69
00:03:50.779 --> 00:03:54.501
And you always end up with the same
structure in the same way.

70
00:03:54.501 --> 00:03:59.340
And that's the core value proposition
of Yarn, is that it's deterministic,

71
00:03:59.340 --> 00:04:00.680
it's faster.

72
00:04:00.680 --> 00:04:05.635
Typically npm installs for a big project
like the Netflix project takes like

73
00:04:05.635 --> 00:04:09.760
two minutes to get through all
of its dependencies to install.

74
00:04:09.760 --> 00:04:12.826
Yarn does it in like 10 seconds,
12 seconds.

75
00:04:12.826 --> 00:04:15.300
And then if you get it cached,
it's even faster than that.

76
00:04:15.300 --> 00:04:19.210
So Yarn is fantastic for building apps.

77
00:04:19.210 --> 00:04:24.724
So if you have a Node project or
anything that has a package.json for

78
00:04:24.724 --> 00:04:28.320
an app, I highly suggest using Yarn today.

79
00:04:28.320 --> 00:04:32.180
It's stable, it's good,
it's really, really cool.

80
00:04:32.180 --> 00:04:33.740
Where Yarn kinda falls apart,

81
00:04:33.740 --> 00:04:38.750
because it has this locked down
dependency tree, is building libraries.

82
00:04:38.750 --> 00:04:44.480
Cuz you want libraries to be a little bit
fuzzier with which packages they pull in.

83
00:04:44.480 --> 00:04:49.203
The reason being is if I have a person
that's pulling in my library.

84
00:04:49.203 --> 00:04:53.177
And they have one version of Lodash, and
I'm using a different version of Lodash.

85
00:04:53.177 --> 00:04:57.520
And you don't want to have to include two
different Lodashs if you don't have to.

86
00:04:57.520 --> 00:05:00.160
So that kind of fuzzy
version matching that you

87
00:05:00.160 --> 00:05:03.340
get from npm is a little
bit better to work with.

88
00:05:03.340 --> 00:05:08.443
So I suggest using Yarn for apps,
not necessarily for libraries.

89
00:05:08.443 --> 00:05:10.604
What I was gonna show you
is this yarn.lock file,

90
00:05:10.604 --> 00:05:11.945
which is what Yarn generates.

91
00:05:11.945 --> 00:05:16.922
And you can see here,
[LAUGH] look how huge this is.

92
00:05:16.922 --> 00:05:18.858
This is all the dependencies for

93
00:05:18.858 --> 00:05:23.430
our particular project.
&gt;&gt; Speaker 2: So, I mean,

94
00:05:23.430 --> 00:05:26.530
maybe you don't know the Rails ecosystem,
but this is like Bundler, basically?

95
00:05:26.530 --> 00:05:29.092
Yarn is like Bundler?
&gt;&gt; Brian: I think that's an apt

96
00:05:29.092 --> 00:05:30.190
comparison.

97
00:05:30.190 --> 00:05:33.137
But not knowing enough about-
&gt;&gt; Speaker 2: Right, yeah, I'm sorry.

98
00:05:33.137 --> 00:05:33.645
&gt;&gt; Brian: But yeah,

99
00:05:33.645 --> 00:05:35.460
I think that sounds about right to me.

100
00:05:36.530 --> 00:05:41.960
I know when they built Yarn they brought
in Yehuda Katz, who did Cargo for Rust.

101
00:05:41.960 --> 00:05:43.961
I think he also worked on Bundler.

102
00:05:43.961 --> 00:05:46.594
But he's definitely the Rails guy,
right, or one of the Rails people.

103
00:05:46.594 --> 00:05:47.964
&gt;&gt; Speaker 2: Yeah.

104
00:05:47.964 --> 00:05:48.827
&gt;&gt; Brian: And he was one of

105
00:05:48.827 --> 00:05:51.660
the chief architects of how this works.

106
00:05:51.660 --> 00:05:54.020
So, yes, Yarn is awesome.

107
00:05:54.020 --> 00:05:56.608
I definitely suggest it.
&gt;&gt; Brian: So,

108
00:05:56.608 --> 00:05:59.950
yeah?
&gt;&gt; Speaker 2: Alexander asked a question.

109
00:05:59.950 --> 00:06:03.125
What is the stack used at
Netflix database backend and

110
00:06:03.125 --> 00:06:05.999
frontend?
&gt;&gt; Brian: That is a wildly complex

111
00:06:05.999 --> 00:06:08.640
question to answer.
&gt;&gt; Speaker 2: I would imagine, yeah.

112
00:06:08.640 --> 00:06:10.744
&gt;&gt; Brian: But to give you the too long,

113
00:06:10.744 --> 00:06:14.776
didn't read, version of it,
I work on the Node part,

114
00:06:14.776 --> 00:06:17.771
which is kind of the aggregation layer.

115
00:06:17.771 --> 00:06:22.010
And that's written in Restify, Node,

116
00:06:22.010 --> 00:06:25.957
we use React.
&gt;&gt; Brian: Yeah,

117
00:06:25.957 --> 00:06:27.350
Restify is probably
the most interesting part.

118
00:06:27.350 --> 00:06:29.950
And then we have a microservice
architecture that we just pull in from

119
00:06:29.950 --> 00:06:30.790
different services.

120
00:06:30.790 --> 00:06:33.580
And those, for the most part,
are written in JVM languages.

121
00:06:33.580 --> 00:06:36.090
And then they have their own databases,

122
00:06:36.090 --> 00:06:39.313
each one of them, so.
&gt;&gt; Speaker 2: Just a question on

123
00:06:39.313 --> 00:06:41.220
the yarn.lock file.

124
00:06:41.220 --> 00:06:44.579
How does that differ from
like an npm shrinkwrap?

125
00:06:44.579 --> 00:06:45.367
&gt;&gt; Brian: Yeah, so

126
00:06:45.367 --> 00:06:49.810
shrinkwrap kind of aims to
address the same problem.

127
00:06:51.740 --> 00:06:56.170
If you've ever had to deal with
committing and modifying shrinkwrap,

128
00:06:56.170 --> 00:06:59.121
it's problematic, to say the least.
&gt;&gt; Speaker 2: Yeah.

129
00:06:59.121 --> 00:07:01.515
&gt;&gt; Brian: And the Yarn file is much

130
00:07:01.515 --> 00:07:02.520
easier.

131
00:07:02.520 --> 00:07:04.600
I've never had to modify
a Yarn file by hand.

132
00:07:04.600 --> 00:07:07.338
And I definitely have had
to modify shrinkwrap by

133
00:07:07.338 --> 00:07:10.325
hand.
&gt;&gt; Brian: I guess my answer to

134
00:07:10.325 --> 00:07:13.563
that question is, I'm not sure
the internals of why they're different.

135
00:07:13.563 --> 00:07:17.164
But I will tell you that I
find Yarn works a lot better.

136
00:07:17.164 --> 00:07:19.163
&gt;&gt; Speaker 2: If you were to do a yarn add

137
00:07:19.163 --> 00:07:23.450
lodash, and
Lodash hadn't previously been there,

138
00:07:23.450 --> 00:07:27.550
does Yarn know to update the lock file?
&gt;&gt; Brian: Yes.

139
00:07:27.550 --> 00:07:28.985
&gt;&gt; Speaker 2: I've run into issues with

140
00:07:28.985 --> 00:07:31.540
shrinkwrap and, it's frustrating.
&gt;&gt; Brian: Yeah, no,

141
00:07:31.540 --> 00:07:34.960
the yarn.lock file,
you don't have to do anything for it.

142
00:07:34.960 --> 00:07:36.270
There's no special commands for it.

143
00:07:36.270 --> 00:07:39.493
It's automatically just kept up to
date every time you do a yarn blah.

144
00:07:39.493 --> 00:07:42.298
Like yarn remove,
yarn add automatically updates yarn.lock.

145
00:07:42.298 --> 00:07:43.303
&gt;&gt; Speaker 2: Thank you.

146
00:07:43.303 --> 00:07:44.251
&gt;&gt; Brian: Yep,

