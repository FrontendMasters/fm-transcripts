WEBVTT

1
00:00:00.380 --> 00:00:04.270
&gt;&gt; Brian Holt: Problem that we're gonna
run into here momentarily is that we wanna

2
00:00:04.270 --> 00:00:09.460
pull from that same preload JSON that
we've been using inside of search.

3
00:00:10.810 --> 00:00:15.270
Now, what we could do which if this was
a real app and I was really pulling from

4
00:00:15.270 --> 00:00:19.610
JSON data it would probably be okay to
just import that in two different places.

5
00:00:19.610 --> 00:00:22.153
However, assuming that
this came from an API,

6
00:00:22.153 --> 00:00:25.028
you don't wanna have to
request the same data twice.

7
00:00:25.028 --> 00:00:26.040
Does that make sense?

8
00:00:27.190 --> 00:00:31.080
So rather than trying to request twice,
a better thing that we could do is push up

9
00:00:31.080 --> 00:00:35.120
the data.json to a common
ancestor component and

10
00:00:35.120 --> 00:00:38.200
then have that data be passed
down to both components.

11
00:00:38.200 --> 00:00:38.772
So that's what we're gonna do.

12
00:00:38.772 --> 00:00:43.553
We're gonna refactor
Search.js to get it's shows

13
00:00:43.553 --> 00:00:47.800
from the router instead
of just importing it.

14
00:00:49.320 --> 00:00:54.355
So let's go ahead and
do that first, so let's go to

15
00:00:54.355 --> 00:01:02.506
clientapp.js
&gt;&gt; Brian Holt: And

16
00:01:02.506 --> 00:01:08.331
in here we're going to import
&gt;&gt; Brian Holt: Preload

17
00:01:08.331 --> 00:01:13.214
from ../public/data.json

18
00:01:13.214 --> 00:01:18.980
it'll find either one of those.

19
00:01:18.980 --> 00:01:21.601
We'll do it that way.

20
00:01:21.601 --> 00:01:24.500
&gt;&gt; Speaker 2: Could you
show details again, please?

21
00:01:24.500 --> 00:01:25.000
&gt;&gt; Brian Holt: Sure.

22
00:01:46.661 --> 00:01:49.349
&gt;&gt; Brian Holt: It's not really doing too
much right now like we're gonna go ahead

23
00:01:49.349 --> 00:01:51.080
and change everything here momentarily.

24
00:01:51.080 --> 00:01:52.799
So as longer as something
renders to the page,

25
00:01:52.799 --> 00:01:58.242
you're okay
&gt;&gt; Brian Holt: What it actually

26
00:01:58.242 --> 00:02:03.399
shows is not really important.

27
00:02:03.399 --> 00:02:09.079
So I'm gonna show you kind of
an advanced use case here of react but

28
00:02:09.079 --> 00:02:12.810
I think it's a little
easier if I show you.

29
00:02:13.940 --> 00:02:15.970
Kind of a basic example of it first.

30
00:02:17.800 --> 00:02:20.070
So actually let's go back
to details real quick.

31
00:02:21.950 --> 00:02:29.720
Notice that details has no state and
it's not even reading for props.

32
00:02:29.720 --> 00:02:33.610
It really is just a static component
that just spits out mark up right.

33
00:02:34.790 --> 00:02:38.530
But more importantly, it has no state that
it's keeping track of or manipulating,

34
00:02:38.530 --> 00:02:40.380
so you can say it's stateless.

35
00:02:42.000 --> 00:02:45.670
Why this is important is you can
actually just cut out this entire React

36
00:02:45.670 --> 00:02:47.770
createClass business.

37
00:02:47.770 --> 00:02:53.595
And we could just really say
const Details = function.

38
00:02:57.957 --> 00:03:01.050
&gt;&gt; Brian Holt: And this function just
returns like an h1 or something like that.

39
00:03:05.010 --> 00:03:09.790
So this function really just ends
up being like the render function.

40
00:03:09.790 --> 00:03:11.570
So it has no wrap around it.

41
00:03:11.570 --> 00:03:14.122
It's really just a function that returns.

42
00:03:14.122 --> 00:03:19.930
So now if I save this and come back over
here and refresh, notice this still works.

43
00:03:20.970 --> 00:03:24.250
This is called a stateless
functional component.

44
00:03:24.250 --> 00:03:25.230
I love these.

45
00:03:25.230 --> 00:03:29.360
I use them everywhere that I can because
by making these components simpler,

46
00:03:29.360 --> 00:03:31.210
first of all, it's easier to understand.

47
00:03:31.210 --> 00:03:33.730
You don't have to understand
the create class and the render,

48
00:03:33.730 --> 00:03:35.530
there's no object configuration.

49
00:03:35.530 --> 00:03:37.304
It's just a function.

50
00:03:39.947 --> 00:03:42.180
&gt;&gt; Speaker 3: Is this
like a static method?

51
00:03:42.180 --> 00:03:42.710
&gt;&gt; Brian Holt: Yeah.

52
00:03:42.710 --> 00:03:44.023
&gt;&gt; Speaker 3: Equivalent?

53
00:03:44.023 --> 00:03:45.600
&gt;&gt; Brian Holt: Yeah,
that's a good way to think about it.

54
00:03:46.600 --> 00:03:49.920
These can accept properties, so
if I pass properties down to details.

55
00:03:51.220 --> 00:03:54.740
Like you remember we have the params
on there that we saw earlier?

56
00:03:54.740 --> 00:03:58.229
So if I say, props.params.id,

57
00:03:58.229 --> 00:04:03.896
this'll actually output
whatever the ID is in the URL.

58
00:04:09.599 --> 00:04:13.218
&gt;&gt; Brian Holt: So
it can still accept properties,

59
00:04:13.218 --> 00:04:18.680
it just takes them as
an additional parameter.

60
00:04:18.680 --> 00:04:19.400
Yes?

61
00:04:19.400 --> 00:04:23.710
&gt;&gt; Speaker 2: Jack is asking, what
tells React that it is a create class?

62
00:04:23.710 --> 00:04:25.522
Jsx?

63
00:04:25.522 --> 00:04:28.260
&gt;&gt; Brian Holt: Tells it
that it is a create class.

64
00:04:28.260 --> 00:04:29.960
So this isn't being transpiled at all.

65
00:04:29.960 --> 00:04:31.190
It's really just a function.

66
00:04:34.640 --> 00:04:37.540
So there's three ways
to create components.

67
00:04:37.540 --> 00:04:38.630
I've shown you two, now.

68
00:04:38.630 --> 00:04:40.210
I've shown you the create class method.

69
00:04:41.930 --> 00:04:44.290
Which is the one that you use
if you need to use state and

70
00:04:44.290 --> 00:04:46.500
some other functionality like that.

71
00:04:46.500 --> 00:04:53.366
Or some of the life cycle methods,
which we haven't talked about yet.

72
00:04:53.366 --> 00:04:56.123
But then there's stateless functional
components which are really just

73
00:04:56.123 --> 00:04:56.794
a render method.

74
00:04:59.583 --> 00:05:01.966
&gt;&gt; Brian Holt: And React just knows
what to do with both of these.

75
00:05:05.035 --> 00:05:06.220
&gt;&gt; Brian Holt: Does this make sense?

76
00:05:06.220 --> 00:05:06.850
What's going on here?

77
00:05:08.750 --> 00:05:09.380
&gt;&gt; Speaker 4: What is it called again?

78
00:05:09.380 --> 00:05:10.809
A stateless?
&gt;&gt; Brian Holt: A stateless functional

79
00:05:10.809 --> 00:05:11.367
component.

80
00:05:15.808 --> 00:05:18.263
&gt;&gt; Brian Holt: Now,
we can kind of abuse this and

81
00:05:18.263 --> 00:05:21.680
get some really cool mileage out of this.

82
00:05:21.680 --> 00:05:23.540
And Lord knows that I
love to abuse things.

83
00:05:23.540 --> 00:05:26.110
So we're gonna go ahead and just do that.

84
00:05:26.110 --> 00:05:27.924
So you can drop this.

85
00:05:27.924 --> 00:05:29.390
Details will eventually have states.

86
00:05:29.390 --> 00:05:32.180
So you can put it back to the way it was.

87
00:05:32.180 --> 00:05:34.880
But I just wanted to demonstrate
to you how a stateless functional

88
00:05:34.880 --> 00:05:35.760
component works.

89
00:05:38.680 --> 00:05:41.824
So keeping this in mind,
we're gonna enact a client app.js.

90
00:05:46.200 --> 00:05:49.930
And we need to pass parameters to search.

91
00:05:49.930 --> 00:05:52.690
But search isn't actually being
instantiated here we're just passing it

92
00:05:52.690 --> 00:05:55.020
like a blueprint for a component.

93
00:05:55.020 --> 00:05:57.280
So this doesn't really work yet.

94
00:05:57.280 --> 00:06:01.770
We have no way to really pass parameters
directly to search and yet, we need to.

95
00:06:03.120 --> 00:06:09.280
While keeping in mind that can actually
just make functions that return mark up,

96
00:06:09.280 --> 00:06:13.500
we can kind of abuse that paradigm
to pass parameters to search.

97
00:06:14.570 --> 00:06:18.435
So instead of having directly putting
search here, let's actually put this in

98
00:06:18.435 --> 00:06:21.623
multiple lines so you can see what
I'm doing a little bit better.

99
00:06:25.321 --> 00:06:27.580
&gt;&gt; Brian Holt: For the record,
I do this all the time.

100
00:06:27.580 --> 00:06:29.609
This looks like bad HTML, but

101
00:06:29.609 --> 00:06:35.385
this is a ton easier to read when you're
passing 15 different kind of parameters.

102
00:06:35.385 --> 00:06:38.950
So now I have to pass something to search.

103
00:06:38.950 --> 00:06:43.270
So what I'm gonna do instead is I'm
gonna make a function inside of here,

104
00:06:43.270 --> 00:06:45.980
it's gonna be like anonymous
component out of here.

105
00:06:45.980 --> 00:06:50.948
So it's gonna be a function
that returns search,

106
00:06:57.455 --> 00:06:58.617
&gt;&gt; Brian Holt: This is the shorthand for

107
00:06:58.617 --> 00:06:59.613
writing a function,

108
00:06:59.613 --> 00:07:03.439
cuz there is an implicit return here
&gt;&gt; Brian Holt: So so far,

109
00:07:03.439 --> 00:07:04.840
this isn't really too cool.

110
00:07:06.540 --> 00:07:10.704
And just to rewrite this out so you can
see kinda verbosely what it's doing.

111
00:07:12.960 --> 00:07:15.440
&gt;&gt; Brian Holt: Some people get
caught up into the terse syntax.

112
00:07:15.440 --> 00:07:18.631
I don't want that to happen to you.

113
00:07:18.631 --> 00:07:21.446
Does that make a little bit more sense?

114
00:07:21.446 --> 00:07:23.700
That’s what’s happening, but okay.

115
00:07:28.398 --> 00:07:31.360
&gt;&gt; Brian Holt: But remember that this
component receives properties from

116
00:07:31.360 --> 00:07:32.760
the route that we need.

117
00:07:32.760 --> 00:07:36.280
We need to preserve that those
properties are getting passed through.

118
00:07:36.280 --> 00:07:38.900
Cuz right now we’re not passing
any properties to search, and

119
00:07:38.900 --> 00:07:43.480
we need to propagate whatever properties
that would have gone through the search.

120
00:07:43.480 --> 00:07:45.003
So we're gonna take in the props.

121
00:07:46.808 --> 00:07:50.066
&gt;&gt; Brian Holt: And then, you remember
that spread operator that I showed you?

122
00:07:50.066 --> 00:07:51.502
...props.

123
00:07:53.219 --> 00:07:55.870
&gt;&gt; Brian Holt: So this way, I don't
actually need to know what's in props.

124
00:07:55.870 --> 00:07:58.435
I'm just taking whatever props
I was going to be given and

125
00:07:58.435 --> 00:08:00.801
I'm going to pass them
directly through to search.

126
00:08:04.995 --> 00:08:09.150
&gt;&gt; Brian Holt: And then now I need to
pass this preload in there, as well.

127
00:08:10.370 --> 00:08:11.498
So now I can just do that right here.

128
00:08:16.281 --> 00:08:22.835
&gt;&gt; Brian Holt: preload.shows,
is that what I did?

129
00:08:22.835 --> 00:08:23.618
Yup.

130
00:08:33.172 --> 00:08:35.070
&gt;&gt; Brian Holt: So
this is a little clever, and

131
00:08:35.070 --> 00:08:38.805
this is definitely more of
an advanced used case with React.

132
00:08:38.805 --> 00:08:41.896
But I think it's pretty compelling.

