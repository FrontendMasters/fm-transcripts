WEBVTT

1
00:00:00.000 --> 00:00:03.502
[MUSIC]

2
00:00:03.502 --> 00:00:06.583
&gt;&gt; Kyle: Thought it'd be
useful to just very quickly

3
00:00:06.583 --> 00:00:11.520
circle back to kind of talk about this
notion of what a thunk really is.

4
00:00:11.520 --> 00:00:16.640
And actually it's not all of that, it's
not really all that special, it's just

5
00:00:16.640 --> 00:00:20.550
maybe a usage of the callback pattern
that we aren't terribly familiar with.

6
00:00:21.990 --> 00:00:26.830
Most of us probably at least have some
passing familiarity with closure.

7
00:00:26.830 --> 00:00:32.790
And that's really what the func is all
about is using closure to maintain state,

8
00:00:32.790 --> 00:00:35.190
now why is that so important?

9
00:00:35.190 --> 00:00:39.420
So some questions on the chat
before about what our thunks?

10
00:00:39.420 --> 00:00:42.340
Are they solving callback hell or
things like that?

11
00:00:42.340 --> 00:00:43.760
Well they're still callbacks so

12
00:00:43.760 --> 00:00:48.470
they're not fundamentally
changing that particular game.

13
00:00:48.470 --> 00:00:51.820
Callbacks aren't really I mean thunks
are not really adding anything

14
00:00:51.820 --> 00:00:55.330
to the equation in terms
of better trustability.

15
00:00:55.330 --> 00:00:59.940
Or even I mean they're a little bit
more reasonable I suppose this code

16
00:00:59.940 --> 00:01:05.350
is clearly a bit more reasonable than what
we had before with just regular callbacks.

17
00:01:05.350 --> 00:01:10.150
But it's not fundamentally more linear or
sequential, or synchronous in nature.

18
00:01:10.150 --> 00:01:14.220
So really hasn't moved
the ball much on that respect.

19
00:01:14.220 --> 00:01:17.000
So thanks really aren't specifically
about solving callback hell.

20
00:01:17.000 --> 00:01:20.570
But they do solve a really important
problem that sets us up for

21
00:01:20.570 --> 00:01:23.208
the rest of the stuff that we're
going to discuss in this workshop.

22
00:01:23.208 --> 00:01:28.110
And that's why,
I chose to spend time pushing on them,

23
00:01:28.110 --> 00:01:31.800
it's not just a trivia sort of thing
that they really are an important

24
00:01:31.800 --> 00:01:35.450
conceptual foundation upon which
we build the rest of stuff.

25
00:01:35.450 --> 00:01:38.560
So the major thing the major takeaway,
why is the thunk so

26
00:01:38.560 --> 00:01:40.570
important to me why should I care.

27
00:01:40.570 --> 00:01:43.690
And why should it be something
that's part of my arsenal of

28
00:01:43.690 --> 00:01:48.580
weapons that I used to take down
asynchronous programming issues?

29
00:01:48.580 --> 00:01:53.650
Well the reason for that is,
that by using the closure in the in

30
00:01:53.650 --> 00:01:57.810
the thunk pattern by using the closure
to maintain the state of something.

31
00:01:58.830 --> 00:02:04.260
We eliminate time as
a complecting factor of state.

32
00:02:04.260 --> 00:02:09.170
Time is the most complex factor
of state in your program.

33
00:02:09.170 --> 00:02:12.330
Understanding the order in
which things happen and

34
00:02:12.330 --> 00:02:16.380
the way things change over time is
the most complex part of your application.

35
00:02:16.380 --> 00:02:19.650
It's the hardest part for
us to reason about, is it impossible?

36
00:02:19.650 --> 00:02:23.220
Clearly not but it does make it harder.

37
00:02:23.220 --> 00:02:27.840
So if we can use this tool,
this notion of preserving state

38
00:02:27.840 --> 00:02:31.430
inside of this value wrapper
container that we call a thunk.

39
00:02:32.610 --> 00:02:37.320
We then are able to compose
these values together, and

40
00:02:37.320 --> 00:02:42.460
not worry about the ordering,
time becomes a non-issue.

41
00:02:42.460 --> 00:02:47.060
As you can see here with this code, I am
sequencing the thunk one thunk two and

42
00:02:47.060 --> 00:02:48.700
thunk three together.

43
00:02:48.700 --> 00:02:53.350
And we know already having
looked at the previous solution,

44
00:02:53.350 --> 00:02:55.370
hopefully that's fresh
enough in your minds.

45
00:02:55.370 --> 00:02:57.609
Having looked at this
solution we see that there is

46
00:02:58.910 --> 00:03:00.740
basically a race condition if you will.

47
00:03:00.740 --> 00:03:06.140
Between whether we ask for
the thunks response before it has it,

48
00:03:06.140 --> 00:03:09.440
or whether the response comes
back before it's been asked.

49
00:03:09.440 --> 00:03:13.980
There's a fundamental race condition
there, that's a time issue.

50
00:03:13.980 --> 00:03:19.590
That's a complexity issue that we had to
manage ourselves in the previous exercise

51
00:03:19.590 --> 00:03:21.440
by writing all that for loop crap and

52
00:03:21.440 --> 00:03:23.920
stuffing things inside
of a global variable.

53
00:03:23.920 --> 00:03:26.520
That complexity is something
that we had to solve ourselves

54
00:03:26.520 --> 00:03:28.220
this pattern solves that for us.

55
00:03:29.280 --> 00:03:34.380
It takes a value and eliminates the time
as the concern, it doesn't mean

56
00:03:34.380 --> 00:03:38.960
it eliminates all concerns but the most
complex of our concerns is eliminated.

57
00:03:38.960 --> 00:03:42.210
It's not even really eliminated,
it's just simply abstracted away.

58
00:03:42.210 --> 00:03:45.720
So it's not something we have to be
concerned about in the parts of our code

59
00:03:45.720 --> 00:03:49.610
where we're consuming these issues,
consuming these values.

60
00:03:49.610 --> 00:03:51.640
So we write the plumbing once if you will,

61
00:03:51.640 --> 00:03:55.000
the mechanism by which a thunk is
created as I showed you just there.

62
00:03:56.180 --> 00:04:00.100
And then where we use it, it's
the lines 41 through 50 that represent

63
00:04:00.100 --> 00:04:02.900
the bulk of our code that we write
over and over and over again.

64
00:04:02.900 --> 00:04:07.800
We write code to reason about asynchronous
actions that are occurring and

65
00:04:07.800 --> 00:04:11.810
this is the kind of code that is
significantly more reasonable.

66
00:04:11.810 --> 00:04:16.680
Than it was before because we don't
have to worry about time in this issue.

67
00:04:16.680 --> 00:04:21.070
That's what is so important and I'm
harping on this so much because I think

68
00:04:21.070 --> 00:04:24.260
the next topic that we're about to talk
about we're about to jump into promises.

69
00:04:24.260 --> 00:04:28.230
And I think the point has largely
been missed about why promises are so

70
00:04:28.230 --> 00:04:28.860
revolutionary.

71
00:04:30.460 --> 00:04:36.250
I think most people have focused
on promises as an API and

72
00:04:36.250 --> 00:04:37.780
to be honest with you?

73
00:04:37.780 --> 00:04:41.520
The API for promises is the least
interesting part to me.

74
00:04:43.110 --> 00:04:46.320
It's far more interesting
to me that promises

75
00:04:46.320 --> 00:04:49.470
are a qualification of this
pattern built in for us.

76
00:04:49.470 --> 00:04:53.140
So that we don't even really have to think
about it as much it's even there for

77
00:04:53.140 --> 00:04:54.830
us automatically.

78
00:04:54.830 --> 00:04:57.960
A qualification of this
pattern of managing state

79
00:04:57.960 --> 00:05:01.140
internal inside of a wrapper
in a time independent way.

80
00:05:02.300 --> 00:05:05.310
There is more to promises than that,
but the that in and

81
00:05:05.310 --> 00:05:07.570
of itself is revolutionary.

82
00:05:07.570 --> 00:05:11.320
That in and of itself is bringing to the
masses something which we could have been

83
00:05:11.320 --> 00:05:11.850
doing all along.

84
00:05:11.850 --> 00:05:12.480
But for

85
00:05:12.480 --> 00:05:16.250
whatever reason this wasn't something
that we spent time thinking about.

86
00:05:16.250 --> 00:05:19.490
I've written an awful lot of really bad
asynchronous code and I wish I could go

87
00:05:19.490 --> 00:05:23.600
back and fix all of that stuff to
have been using a pattern like songs.

88
00:05:23.600 --> 00:05:26.780
Because this would have been a lot
better than what I had before but

89
00:05:26.780 --> 00:05:27.860
it's not the end of the story.

90
00:05:27.860 --> 00:05:30.760
There's more to go,
much more to go in this workshop.

91
00:05:30.760 --> 00:05:33.760
So with that as our foundation is
a reminder of where we're at and

92
00:05:33.760 --> 00:05:35.970
why thunks are so important.

93
00:05:35.970 --> 00:05:38.090
Let's dive in and talk about promises.

