WEBVTT

1
00:00:00.000 --> 00:00:03.914
[MUSIC]

2
00:00:03.914 --> 00:00:07.971
&gt;&gt; Kyle Simpson: One abstraction that I've
observed as particularly useful is to

3
00:00:07.971 --> 00:00:12.820
think about things in terms of a sequence,
a sequence of events.

4
00:00:12.820 --> 00:00:16.620
My definition for a sequence is that it's
a list of automatically chained promises.

5
00:00:17.710 --> 00:00:20.360
We know that we can chain promises
together, I've shown you how to do that.

6
00:00:20.360 --> 00:00:21.960
It's pretty straightforward
once you learn it.

7
00:00:21.960 --> 00:00:25.260
Five minutes, you're an expert
at it like the rest of us.

8
00:00:25.260 --> 00:00:28.310
But as you start doing that,
dozens and hundreds and

9
00:00:28.310 --> 00:00:30.080
even thousands of times in a project,

10
00:00:30.080 --> 00:00:34.430
you start to wonder gee, do I really have
to create and return another promise?

11
00:00:34.430 --> 00:00:38.470
It gets a little bit tedious,
it gets a lot tedious.

12
00:00:39.890 --> 00:00:43.370
Years ago, I was an early adopter
of some of these concepts.

13
00:00:43.370 --> 00:00:46.176
I was working on promises
before we had a name for them.

14
00:00:46.176 --> 00:00:50.982
Like five, six years ago, prenode, we were
working on this concept of how to bring

15
00:00:50.982 --> 00:00:53.948
this stuff and
I was an early experimenter in this.

16
00:00:53.948 --> 00:00:56.327
And I decided that one
of the big problems was,

17
00:00:56.327 --> 00:00:58.645
I don't want to have to
remember to create and

18
00:00:58.645 --> 00:01:02.854
chain a promise when my assumption should
be, I'm always gonna do another step.

19
00:01:02.854 --> 00:01:06.905
Why not make it automatically create and
chain promises for me.

20
00:01:06.905 --> 00:01:11.101
So my early experiments into this five,
six years ago, before we had a name for

21
00:01:11.101 --> 00:01:15.362
promises, long before any of the existing
libraries that you've heard of were

22
00:01:15.362 --> 00:01:18.559
around, is I was creating a library for
that abstraction.

23
00:01:18.559 --> 00:01:24.150
And that library has gone through a lot
of revisions and several name changes.

24
00:01:24.150 --> 00:01:28.450
It eventually arrived at the name that it
currently goes by, which is asynquence

25
00:01:28.450 --> 00:01:32.541
which is the word asynch plus
the word sequence smushed together,

26
00:01:32.541 --> 00:01:36.390
mostly cuz there are no other good
names left [LAUGH] basically.

27
00:01:36.390 --> 00:01:38.460
Gotta come up with a unique name and
there were no other good names,

28
00:01:38.460 --> 00:01:40.545
but it does speak to what its purpose is.

29
00:01:40.545 --> 00:01:42.740
Its purpose is to present
you that abstraction,

30
00:01:42.740 --> 00:01:46.459
that notion of a sequence of a series
of automatically chained promises.

31
00:01:47.960 --> 00:01:52.113
You'll notice that I can do a chain just
like when you do with a promise chain, but

32
00:01:52.113 --> 00:01:54.836
there are some important differences here.

33
00:01:54.836 --> 00:01:58.830
On line 2, you'll notice that
my then function is passed

34
00:01:58.830 --> 00:02:03.620
in function callback that I call done,
just by convention, I call it done.

35
00:02:03.620 --> 00:02:05.500
That's our resolution trigger.

36
00:02:05.500 --> 00:02:09.190
So whenever that step on line 3
is complete, it calls done and

37
00:02:09.190 --> 00:02:12.240
that's what moves the sequence
onto its next step.

38
00:02:12.240 --> 00:02:15.680
The promise to handle all that
was created behind the scenes and

39
00:02:15.680 --> 00:02:18.640
automatically chained in so
I didn't have to worry about that part.

40
00:02:18.640 --> 00:02:21.980
I only needed to worry about when to
signal that it was time to move on

41
00:02:21.980 --> 00:02:22.530
to the next step.

42
00:02:24.520 --> 00:02:27.250
So their promises are absolutely
happening under the covers but

43
00:02:27.250 --> 00:02:31.210
it's abstracting some of
the tedious parts of that API.

44
00:02:31.210 --> 00:02:33.450
It's covering up some of the rough parts,

45
00:02:33.450 --> 00:02:38.560
it's doing error handling
in a more sensible way.

46
00:02:38.560 --> 00:02:43.198
Basically, the design of asynquence was
to make promises easier to reason about,

47
00:02:43.198 --> 00:02:44.200
easier to teach.

48
00:02:44.200 --> 00:02:45.966
That was the original design goal.

49
00:02:45.966 --> 00:02:49.450
At this point, asynquence is
actually quite a bit more than that.

50
00:02:49.450 --> 00:02:52.737
It still has the same notion of
a sequence and whatever, but

51
00:02:52.737 --> 00:02:56.897
I actually don't really use the sequence
nature of asynquence that much.

52
00:02:56.897 --> 00:03:00.493
Cuz these higher order patterns are also,
I think, much more interesting,

53
00:03:00.493 --> 00:03:04.284
the stuff that we're gonna get to
through the end of the workshop.

54
00:03:04.284 --> 00:03:08.160
But at its heart, all it takes to
make a sequence is to start chaining

55
00:03:08.160 --> 00:03:10.870
steps together just like you
would with a promise and

56
00:03:10.870 --> 00:03:12.780
letting it do some of that work for you.

57
00:03:12.780 --> 00:03:16.166
So line 2 is a .then,
that's just a regular step.

58
00:03:16.166 --> 00:03:19.500
But line 5 shows you that
I can create a gate step

59
00:03:19.500 --> 00:03:21.540
just like I can do a promise.all.

60
00:03:21.540 --> 00:03:25.230
But rather than having a function
that I return a promise.all from,

61
00:03:25.230 --> 00:03:29.610
which is super tedious, I just name
my steps based upon what they do.

62
00:03:29.610 --> 00:03:31.150
So in this API,

63
00:03:31.150 --> 00:03:36.070
it's called .gate and there's an alias to
.all if you prefer the word all to gate.

64
00:03:36.070 --> 00:03:39.250
You can use whichever one you want,
but it does exactly the same thing.

65
00:03:39.250 --> 00:03:45.190
It takes those two or however many
functions and runs them in parallel.

66
00:03:45.190 --> 00:03:47.460
Whenever all of them successfully
complete, it moves on.

67
00:03:51.394 --> 00:03:54.350
I am not going to try to convince or

68
00:03:54.350 --> 00:03:57.610
sell you that you should
switch to using asynsequence.

69
00:03:57.610 --> 00:04:02.430
However, I designed asynquence to
make this stuff easier to teach.

70
00:04:02.430 --> 00:04:04.640
So for the balance of this workshop,

71
00:04:04.640 --> 00:04:09.578
all the exercises that we're going to do
are going to rely upon using asynquence.

72
00:04:09.578 --> 00:04:12.948
So you only have to learn it just enough
to get through these exercises and

73
00:04:12.948 --> 00:04:15.613
if you never want to use it again,
that's totally fine.

74
00:04:15.613 --> 00:04:19.096
But it was important that we have one
thing to learn rather than having to

75
00:04:19.096 --> 00:04:21.920
learn 15 different
libraries to do this stuff.

76
00:04:21.920 --> 00:04:24.920
So asynquence will handle all
the stuff that we will talk about

77
00:04:24.920 --> 00:04:26.550
through the rest of the workshop.

78
00:04:26.550 --> 00:04:30.337
It's why I'm giving you a brief
introduction to the way that it works.

79
00:04:30.337 --> 00:04:34.760
[COUGH]
&gt;&gt; Kyle Simpson: Just as an example

80
00:04:34.760 --> 00:04:38.400
back to our silly calculating
the meaning of life.

81
00:04:38.400 --> 00:04:42.380
Here's asynquence's version
of meaning of life and

82
00:04:42.380 --> 00:04:45.850
you'll notice on line 8,
I'm using a step called a waterfall.

83
00:04:45.850 --> 00:04:49.160
That's another higher order
abstraction that we could define.

84
00:04:49.160 --> 00:04:51.706
What a waterfall is is
still a sequential series.

85
00:04:51.706 --> 00:04:55.480
It's not gonna do stuff in parallel,
still a sequential series, but

86
00:04:55.480 --> 00:04:58.060
it automatically collects
the output from each step and

87
00:04:58.060 --> 00:05:01.020
passes it on to the next and
the next and the next.

88
00:05:01.020 --> 00:05:03.530
So by the end, you have all
the outputs from all the steps.

89
00:05:04.650 --> 00:05:07.180
You don't have to manually collect
all those and pass them along,

90
00:05:07.180 --> 00:05:09.260
it automatically does that for you.

91
00:05:09.260 --> 00:05:10.540
So at the end on line 12,

92
00:05:10.540 --> 00:05:14.660
we get both num1 and
num2 from the two previous series steps.

93
00:05:16.240 --> 00:05:17.290
That's what I call a waterfall.

94
00:05:18.950 --> 00:05:21.022
Something I was doing fairly often and

95
00:05:21.022 --> 00:05:23.741
I was doing very manually
with other variables and

96
00:05:23.741 --> 00:05:27.898
I said let's make that into an abstraction
that we can add into the library.

97
00:05:27.898 --> 00:05:30.971
So asynquence ships with about 10 or

98
00:05:30.971 --> 00:05:35.401
15 core methods that
are the base ones that you need.

99
00:05:35.401 --> 00:05:40.533
And there's also an optional contrib
library with about 15 to 20 other

100
00:05:40.533 --> 00:05:46.002
optional step methods that you can add in
for all this other higher level stuff.

101
00:05:46.002 --> 00:05:49.118
We'll get into reactive programming and
CSP and

102
00:05:49.118 --> 00:05:51.474
other things later in the workshop.

103
00:05:51.474 --> 00:05:57.357
One other thing to point out, as you see
on line 12, I have a .seq step type.

104
00:05:57.357 --> 00:05:58.227
What's that all about?

105
00:05:58.227 --> 00:06:03.773
Well in the regular Promise library,
the then functions is polymorphic.

106
00:06:03.773 --> 00:06:08.215
That's a fancy way of saying it changes
its behavior based upon what you return,

107
00:06:08.215 --> 00:06:09.335
what you do with it.

108
00:06:09.335 --> 00:06:14.600
I tend to think that polymorphic
functions are a bit more confusing.

109
00:06:14.600 --> 00:06:18.360
So when I look at a then function, I don't
actually know is it returning an immediate

110
00:06:18.360 --> 00:06:21.640
value, is it rejecting,
is it returning a promise for something,

111
00:06:21.640 --> 00:06:24.940
I don't know what it's doing and
I have to inspect it more closely.

112
00:06:24.940 --> 00:06:29.985
The design of asynquence said, rather
than having one polymorphic function for

113
00:06:29.985 --> 00:06:33.810
everything, you name the step
based upon what the step does.

114
00:06:35.050 --> 00:06:37.080
So the sequence step,

115
00:06:37.080 --> 00:06:42.670
the .seq step, is expecting a sequence
back and a sequence is like a promise.

116
00:06:42.670 --> 00:06:44.990
So it's expecting
a promise back basically,

117
00:06:44.990 --> 00:06:49.500
which is why we return on line 15 just
like you do in a normal promise thing.

118
00:06:49.500 --> 00:06:54.510
If you do need to produce one externally
and return it, you use a .seq step.

119
00:06:54.510 --> 00:06:57.950
If you don't need to produce your own,
you use a .then step.

120
00:06:57.950 --> 00:07:02.740
If you need to do a synchronous step, like
you just need to print something out and

121
00:07:02.740 --> 00:07:07.480
you don't need to do anything
asynchronous, you use .val for the values.

122
00:07:07.480 --> 00:07:09.760
You inspect or transform a value.

123
00:07:09.760 --> 00:07:13.970
So basically, the design of this API
is such that each method name does

124
00:07:13.970 --> 00:07:18.910
one specific thing, and its named based
upon that expectation, rather than

125
00:07:20.190 --> 00:07:24.060
having to learn all the different
polymorphic behaviors of one method.

