WEBVTT

1
00:00:00.230 --> 00:00:06.340
&gt;&gt; Kyle Simpson: There
are several different

2
00:00:06.340 --> 00:00:12.200
ways that you could try to model what I
asked for from a stream's perspective,

3
00:00:12.200 --> 00:00:16.770
and I have attempted several
different ways of modeling this.

4
00:00:16.770 --> 00:00:20.390
And so, I'm gonna walk you through
one way of modeling it and

5
00:00:20.390 --> 00:00:25.370
then show you why that's not a good idea
and then show you a second way, okay.

6
00:00:25.370 --> 00:00:28.160
But that's not at all
the only ways to do it.

7
00:00:28.160 --> 00:00:32.320
There are different ways of thinking about
it and one of the things about becoming

8
00:00:32.320 --> 00:00:36.190
a good reactive programming
developer is understanding all

9
00:00:36.190 --> 00:00:38.980
the tools that are available to you
in understanding how we can mix and

10
00:00:38.980 --> 00:00:44.570
match these different higher level stream
operations to accomplish our goals.

11
00:00:44.570 --> 00:00:49.480
That is still a path that I am actively
learning on, to be completely honest.

12
00:00:49.480 --> 00:00:53.830
And I wouldn't in any way, shape or
form suggest that I'm a master of that.

13
00:00:53.830 --> 00:00:58.080
I am still trying to learn better how to
model these sorts of things in streams.

14
00:00:59.080 --> 00:01:03.510
So, one way of thinking about this is we
could think about the clicks as a single

15
00:01:03.510 --> 00:01:08.700
stream of data and the timer that's
marching as a second stream.

16
00:01:08.700 --> 00:01:13.290
And we could say what am I gonna do if
I compose those two streams together.

17
00:01:13.290 --> 00:01:15.480
So, let's start that and
let's see how that works.

18
00:01:15.480 --> 00:01:19.280
Let's call let's make one stream for
our clicks.

19
00:01:19.280 --> 00:01:21.140
And I showed you in
the slides that the simplest,

20
00:01:21.140 --> 00:01:26.980
easiest way to make an empty stream that
we can push data into is to say .of.

21
00:01:26.980 --> 00:01:33.640
And let's make another one for
the timer is ASQ.react.of.

22
00:01:33.640 --> 00:01:36.190
Let's just see how this works out for
us and see whether or not

23
00:01:40.090 --> 00:01:43.947
This is gonna be the path
that we wanna go down.

24
00:01:43.947 --> 00:01:50.270
So clicks, every time I get a click event,
I could say clicks.push and

25
00:01:50.270 --> 00:01:55.160
push an event into the end of the pipe,
into the end of the stream.

26
00:01:55.160 --> 00:01:58.600
And then, on the outside of it
I'm gonna receive that event,

27
00:01:58.600 --> 00:02:00.890
of course, that's one way of doing that.

28
00:02:00.890 --> 00:02:07.402
And I could set myself up an interval
to run every 1000 milliseconds.

29
00:02:09.460 --> 00:02:11.960
&gt;&gt; Kyle Simpson: And
I could push a timer of that down.

30
00:02:13.530 --> 00:02:17.250
In fact, you could say that's such a
common pattern I ought to have some little

31
00:02:17.250 --> 00:02:19.960
adapter for
pushing timer events down, right?

32
00:02:19.960 --> 00:02:24.230
So yeah, we might wanna create
ourselves a little utility for

33
00:02:24.230 --> 00:02:29.760
making a timer stream to
push timer events down.

34
00:02:29.760 --> 00:02:33.860
But maybe we're not going to push anything
that just the fact that there's an event

35
00:02:33.860 --> 00:02:37.870
that there's no data to push along so in
that called dot push was no events here.

36
00:02:37.870 --> 00:02:40.440
So now, I have two different streams and
I could think about

37
00:02:40.440 --> 00:02:45.500
what are my possible ways of merging two
streams into a synthetic third stream.

38
00:02:45.500 --> 00:02:50.900
Well, what I really want is
I want to send an event out

39
00:02:50.900 --> 00:02:55.070
whenever both of those
things have happened once.

40
00:02:55.070 --> 00:02:59.790
Or whenever there is an event ready
with both of those that's when I want

41
00:02:59.790 --> 00:03:03.130
my synthetic event to fire which is
gonna be my messages that go out.

42
00:03:03.130 --> 00:03:07.690
So, you could model this the same that
by the way it's called Zip in the reacts

43
00:03:07.690 --> 00:03:09.650
the reactive extensions world.

44
00:03:09.650 --> 00:03:12.270
You can used .zip if you like here or

45
00:03:12.270 --> 00:03:16.060
I like to call it dot all because it
is waiting for all of them to show up.

46
00:03:17.210 --> 00:03:22.100
So, we could model this is
saying ASQ.react.all And

47
00:03:22.100 --> 00:03:25.080
give it both streams give it
the clicks and the timer stream.

48
00:03:26.140 --> 00:03:29.720
And that's going to be
a NEWS STREAM that we call,

49
00:03:33.690 --> 00:03:35.770
I don't know I'm not coming
up with a good name for it so

50
00:03:35.770 --> 00:03:38.680
let's just call it ready I'm
ready to print out a message or

51
00:03:38.680 --> 00:03:42.490
maybe I'll just call it
the messages stream, okay.

52
00:03:42.490 --> 00:03:44.400
So that's my new messages stream, and

53
00:03:44.400 --> 00:03:48.000
I could say the messages
stream is going to receive

54
00:03:48.000 --> 00:03:53.050
an event every time there's something in
the queue from both of these two streams.

55
00:03:53.050 --> 00:03:54.280
That's when it's going to move on.

56
00:03:55.710 --> 00:03:59.700
But the thing that it's going to print out
or the thing that it's going to move on

57
00:03:59.700 --> 00:04:03.090
is going to be a combination
of an event object and

58
00:04:03.090 --> 00:04:05.620
an undefined value because I
don't push anything in here.

59
00:04:07.540 --> 00:04:12.960
So, I could subscribe to that stream by
saying every time a new event comes in.

60
00:04:12.960 --> 00:04:14.778
I know I'm gonna get some data in here but

61
00:04:14.778 --> 00:04:16.875
I actually don't really
care about the data.

62
00:04:21.574 --> 00:04:24.869
&gt;&gt; Kyle Simpson: So, I know that this val
function is gonna get called every time

63
00:04:24.869 --> 00:04:28.012
the message's synthetic stream
has something to give me.

64
00:04:28.012 --> 00:04:33.941
And I could take $.list and

65
00:04:33.941 --> 00:04:40.857
I could append to that list a Div,

66
00:04:40.857 --> 00:04:45.304
that says clicked for

67
00:04:45.304 --> 00:04:49.020
example, okay?

68
00:04:50.190 --> 00:04:51.170
Now, if you ran this code,

69
00:04:51.170 --> 00:04:54.240
you're going to get something
approximating what you were hoping for.

70
00:04:54.240 --> 00:04:57.630
But there's something deeper
here that I want us to

71
00:04:57.630 --> 00:05:00.410
begin to develop some instinct about.

72
00:05:00.410 --> 00:05:02.420
First of all,
did anybody try to go down this path?

73
00:05:02.420 --> 00:05:04.820
Is this the path that
you went down anybody?

74
00:05:04.820 --> 00:05:07.710
Okay, so you did.

75
00:05:07.710 --> 00:05:11.660
What's gonna happen here
is that we're pumping in

76
00:05:11.660 --> 00:05:15.680
the clicks into the end of this pipe and
there's nothing throwing away events.

77
00:05:17.720 --> 00:05:22.690
This isn't really sampling in the sense
that the stuff that we're not waiting for

78
00:05:22.690 --> 00:05:23.920
is getting thrown away.

79
00:05:23.920 --> 00:05:28.370
So, there's gonna be a queue inside
of here that's gonna be stacking up

80
00:05:28.370 --> 00:05:31.970
how many of those events are firing
is going to be stacking those up.

81
00:05:31.970 --> 00:05:34.880
So ,what would happen if you tried
this is if you click the button

82
00:05:34.880 --> 00:05:37.424
a whole bunch of times and
then stopped clicking.

83
00:05:37.424 --> 00:05:41.250
You're gonna start just seeing
the click happen once a second

84
00:05:41.250 --> 00:05:45.200
as it drains out that queue
of clicks that have piled up.

85
00:05:47.030 --> 00:05:50.480
Which isn't really exactly what
we're wanting we're wanting sampling

86
00:05:50.480 --> 00:05:52.230
which is dropping stuff isn't there.

87
00:05:52.230 --> 00:05:58.310
We see the conceptual problem there with
that particular stream operation because

88
00:05:58.310 --> 00:06:03.810
what we have available to us with the .zip
is it's not gonna drop stuff for us.

89
00:06:03.810 --> 00:06:06.700
That's not the definition of that
particular stream operation.

90
00:06:06.700 --> 00:06:08.830
&gt;&gt; Speaker 2: So,
this isn't like a hard observable and

91
00:06:08.830 --> 00:06:10.510
hacks chair
&gt;&gt; Kyle Simpson: So,

92
00:06:10.510 --> 00:06:13.930
RxJS does have a notion, I didn't wanna
get into all the complexities that.

93
00:06:13.930 --> 00:06:18.240
They do have a notion of hot
versus cold observables, and

94
00:06:18.240 --> 00:06:23.420
in RxJS terminology what that means is,
let me make sure I get this right.

95
00:06:23.420 --> 00:06:26.060
If you have a cold observable.

96
00:06:26.060 --> 00:06:31.440
Then, nothing goes into the stream unless
somebody is on the other end observing it

97
00:06:31.440 --> 00:06:32.960
and if you have a hot observable.

98
00:06:32.960 --> 00:06:36.670
I don't know I might be getting that
backwards but they do have this notion of

99
00:06:36.670 --> 00:06:40.960
dealing with this piling up of
events of nobody's observing it.

100
00:06:40.960 --> 00:06:43.780
But in our particular case,
it actually wouldn't matter because

101
00:06:43.780 --> 00:06:46.249
whatever whether you had a hot or
a cold observable here.

102
00:06:47.850 --> 00:06:50.545
You're still observing it on your .all.

103
00:06:50.545 --> 00:06:54.150
Your .zip is observing your observables.

104
00:06:54.150 --> 00:06:57.520
So, it wouldn't matter whether it was
cold or hot in this particular case.

105
00:06:57.520 --> 00:07:00.250
So, there is that world in RxJS.

106
00:07:00.250 --> 00:07:04.150
That's another one of those complexities
you have to learn when you learn RxJS is

107
00:07:04.150 --> 00:07:05.920
the difference between hot and
cold observables.

108
00:07:08.100 --> 00:07:13.040
Basically, I tried to remove as much of
that distinction from reactive sequences,

109
00:07:13.040 --> 00:07:15.670
because I find that to be
more complex than beneficial.

110
00:07:16.890 --> 00:07:21.320
But, okay, so this way of thinking about
things is not really accomplishing our

111
00:07:21.320 --> 00:07:24.570
overall goal of sampling with
throwing things away from the stream.

112
00:07:24.570 --> 00:07:28.660
Could we set ourselves up with another
thing that manually drains the stream?

113
00:07:29.980 --> 00:07:34.900
Like whenever this timer
fires we could manually dream

114
00:07:34.900 --> 00:07:38.190
drain the click stream until there
was one and push it back in.

115
00:07:38.190 --> 00:07:40.350
Yeah, we could go that direction.

116
00:07:40.350 --> 00:07:44.320
And I tried that one time I
actually did that I just would

117
00:07:44.320 --> 00:07:46.950
approximate this I was like
I'll drain the stream and

118
00:07:46.950 --> 00:07:50.370
then whatever that last one is I'll
push it right back again and then.

119
00:07:50.370 --> 00:07:54.870
So that is one way of going about it but
that's not really embracing the idiom of

120
00:07:54.870 --> 00:07:57.890
reactive programming the way
you probably want to, okay?

121
00:07:57.890 --> 00:08:00.390
So, the point I'm trying to make
is there's a lot of different ways

122
00:08:00.390 --> 00:08:02.470
to go out in this.

123
00:08:02.470 --> 00:08:04.550
I'm going to suggest to you

124
00:08:06.410 --> 00:08:09.810
another way of approaching this that
accomplishes our goal of sampling.

125
00:08:12.000 --> 00:08:13.200
So, what I'm gonna do.

126
00:08:13.200 --> 00:08:17.000
I'm still gonna have a clicks of it but
I'm not gonna do a timer stream.

127
00:08:17.000 --> 00:08:18.750
I am gonna do a messages stream.

128
00:08:22.510 --> 00:08:26.780
And I'm gonna keep track of the latest

129
00:08:26.780 --> 00:08:28.910
event message to come
down the click stream.

130
00:08:28.910 --> 00:08:31.410
I'm gonna keep track of
that in a free variable,

131
00:08:31.410 --> 00:08:32.870
in a variable that's in my closure.

132
00:08:32.870 --> 00:08:33.880
I'm just gonna call it latest.

133
00:08:35.550 --> 00:08:38.430
I could wrap that up inside
of its own enclosure,

134
00:08:38.430 --> 00:08:39.930
like we did in functional programming.

135
00:08:39.930 --> 00:08:43.970
I could make a pure wrapper around it, but
I'm being lazy here, and I'm just trying

136
00:08:43.970 --> 00:08:50.730
to illustrate a concept, that I could keep
track of the latest event that's happened.

137
00:08:50.730 --> 00:08:55.530
So for example,
what I could say is every time that

138
00:08:55.530 --> 00:08:59.540
this has happened,
I can say latest is equal to EVT.

139
00:08:59.540 --> 00:09:03.750
And then, inside of my set interval,

140
00:09:03.750 --> 00:09:09.870
not gonna be pushing on that anymore, but

141
00:09:09.870 --> 00:09:15.480
inside of my set interval, what I'm going
to do is if whenever this fires, if latest

142
00:09:15.480 --> 00:09:21.480
has been set, that is, I know that there's
a waiting click event in the queue.

143
00:09:21.480 --> 00:09:24.515
Then, I'm going to go ahead and
push into the messages queue.

144
00:09:26.716 --> 00:09:30.460
&gt;&gt; Kyle Simpson: And I'll just go
ahead and push the message clicked.

145
00:09:30.460 --> 00:09:33.448
That way I actually can
push that message along.

146
00:09:37.454 --> 00:09:41.513
&gt;&gt; Kyle Simpson: That part's not strictly
necessary, but it does illustrate the fact

147
00:09:41.513 --> 00:09:45.130
that I can make a stream with
other pieces of data in it.

148
00:09:45.130 --> 00:09:47.620
So, I'm gonna do that, and then I'm
going to reset latest back to null.

149
00:09:51.526 --> 00:09:54.887
&gt;&gt; Kyle Simpson: Which means the next time
the timer fires if no click is happen I'm

150
00:09:54.887 --> 00:09:56.930
just gonna go on past it.

151
00:09:56.930 --> 00:10:00.480
But if there's any click that's been
waiting that I'm basically gonna tell it,

152
00:10:00.480 --> 00:10:03.470
there is something waiting for
you go ahead and push out the message.

153
00:10:05.550 --> 00:10:11.000
So, I'm basically making
a boolean variable ish Into

154
00:10:11.000 --> 00:10:12.800
something I'm treating as a stream.

155
00:10:12.800 --> 00:10:16.670
Because in this particular case it's
easier to do a boolean operation than it

156
00:10:16.670 --> 00:10:19.410
is to do a boolean stream operation.

157
00:10:19.410 --> 00:10:23.890
There are ways to model boolean stream
operations, but they're much more complex.

158
00:10:23.890 --> 00:10:27.460
So, I don't think you should go down
that route when there's a simpler

159
00:10:27.460 --> 00:10:29.180
option available.

160
00:10:29.180 --> 00:10:33.200
This isn't maybe the most perfect and
pure reactive programming.

161
00:10:33.200 --> 00:10:38.230
But under the covers, if you have
a reactive utility like RXGS and

162
00:10:38.230 --> 00:10:40.950
I think they have
a sampled stream operation.

163
00:10:40.950 --> 00:10:42.760
They have a way to sample
a stream operation.

164
00:10:42.760 --> 00:10:44.320
Guess what they're doing?

165
00:10:44.320 --> 00:10:45.740
They're saving it into a variable,

166
00:10:45.740 --> 00:10:49.650
so we're just cutting out
the middleman and doing that ourself.

167
00:10:49.650 --> 00:10:51.787
&gt;&gt; Speaker 2: You wouldn't eclipse then,
would you?

168
00:10:51.787 --> 00:10:54.654
&gt;&gt; Speaker 3: Stream in, don't you?

169
00:10:54.654 --> 00:10:55.154
&gt;&gt; Speaker 2: Yeah.

170
00:11:02.619 --> 00:11:04.630
&gt;&gt; Kyle Simpson: So I know, okay, yes.

171
00:11:04.630 --> 00:11:08.360
So, my intended, I'm sorry I did get
a little slightly off track here.

172
00:11:08.360 --> 00:11:13.400
My intended thing was to not, too had here
I was trying to separate concerns and

173
00:11:13.400 --> 00:11:14.880
then I forgot to go back and do that.

174
00:11:14.880 --> 00:11:18.090
My intended thing was to observe
the clicks thing and set latest.

175
00:11:18.090 --> 00:11:19.680
So, I was going to observe
the clicks event and

176
00:11:19.680 --> 00:11:24.190
I don't want to be mixing my dom event
handling with my stream event handling.

177
00:11:24.190 --> 00:11:27.700
That's a mixture of concerns when
we want to keep things separate.

178
00:11:27.700 --> 00:11:30.140
The whole purpose of setting
up these streams is so

179
00:11:30.140 --> 00:11:36.000
that I can produce events in one stream
and observe them in a different place.

180
00:11:36.000 --> 00:11:39.070
In this different place which is line 20
of my code I don't know anything at all

181
00:11:39.070 --> 00:11:40.350
about where the clicks are coming from.

182
00:11:40.350 --> 00:11:44.190
I don't know what DOM element is
handling those, so I want to be able to

183
00:11:44.190 --> 00:11:48.590
observe that at a far, so that's where I'm
gonna observe the event happening here.

184
00:11:51.270 --> 00:11:52.332
And say latest is equal to event.

185
00:11:54.812 --> 00:11:57.430
&gt;&gt; Kyle Simpson: So basically,
think conceptually.

186
00:11:59.000 --> 00:12:01.390
There is a dividing line here where

187
00:12:01.390 --> 00:12:04.510
these are two entirely different
parts of our application.

188
00:12:04.510 --> 00:12:10.720
The production of our streams and the
consumption of our streams and down here.

189
00:12:10.720 --> 00:12:12.860
In these things we don't know anything
at all about the DOM elements

190
00:12:12.860 --> 00:12:13.460
that are occurring.

