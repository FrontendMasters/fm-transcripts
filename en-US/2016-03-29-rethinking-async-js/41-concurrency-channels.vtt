WEBVTT

1
00:00:00.000 --> 00:00:03.692
[MUSIC]

2
00:00:03.692 --> 00:00:06.747
&gt;&gt; Kyle: The last pattern
that I want to teach you is.

3
00:00:06.747 --> 00:00:12.630
And by the way, after I teach of this
last pattern there's a last exercise.

4
00:00:12.630 --> 00:00:15.710
So I'm gonna teach you
CSP in exercise nine.

5
00:00:15.710 --> 00:00:20.930
Exercise ten is a much more sophisticated
application that I've built,

6
00:00:20.930 --> 00:00:22.590
it's called a tale of three list.

7
00:00:22.590 --> 00:00:27.720
And your exercise there is going to be to
go back and revisit either reactive or

8
00:00:27.720 --> 00:00:31.250
CSP in the context of a much
more sophisticated application.

9
00:00:31.250 --> 00:00:35.150
So if you're looking for more practice on
that stuff, it's coming with exercise ten.

10
00:00:35.150 --> 00:00:37.740
So don't feel like that's the last
that we're gonna talk about it.

11
00:00:37.740 --> 00:00:38.910
But I want to shift gears and

12
00:00:38.910 --> 00:00:43.900
focus on our last major pattern
to introduce is called CSP.

13
00:00:43.900 --> 00:00:47.985
CSP is about modeling
concurrency with channels.

14
00:00:47.985 --> 00:00:53.210
We've modeled concurrency now three,
or four, or five different ways.

15
00:00:53.210 --> 00:00:55.340
This is another way of
modeling concurrency.

16
00:00:56.380 --> 00:00:58.860
And channels, if you wanna
think about what is a channel,

17
00:00:58.860 --> 00:01:01.500
a channel is kinda like a stream,
it's kinda like a pipe.

18
00:01:01.500 --> 00:01:04.300
Except there's one important
characteristic and

19
00:01:04.300 --> 00:01:08.300
that is that the pipe
has no buffer size and

20
00:01:08.300 --> 00:01:12.830
therefore has automatically built
into it this notion of back pressure.

21
00:01:12.830 --> 00:01:17.220
So if you've done stream space programming
before you've probably heard or

22
00:01:17.220 --> 00:01:19.410
read about this notion of back pressure.

23
00:01:19.410 --> 00:01:23.110
But to illustrate that I want
you to imagine that I have two

24
00:01:23.110 --> 00:01:24.584
different ends of a hose.

25
00:01:24.584 --> 00:01:27.292
One way over here and
then one way over here, and

26
00:01:27.292 --> 00:01:29.930
there's two people on either end.

27
00:01:29.930 --> 00:01:33.850
And they don't see each other, they don't
have any communication between each other.

28
00:01:33.850 --> 00:01:37.150
And then this guy on this
side says I'm gonna start

29
00:01:38.600 --> 00:01:40.270
pouring some water down through the hose.

30
00:01:40.270 --> 00:01:44.050
And the guy on the other end has the water
coming out and he's spraying it.

31
00:01:44.050 --> 00:01:48.230
At some point the guy who's spraying the
water says I don't want any more water.

32
00:01:48.230 --> 00:01:50.490
But he doesn't have
a communication with this guy,

33
00:01:50.490 --> 00:01:53.976
so how is he going to tell this
guy I don't want any more water?

34
00:01:53.976 --> 00:01:59.400
Well he's gonna cap off the hose so
that on the other end

35
00:01:59.400 --> 00:02:03.650
no more water can go in because
the hose is completely filled up.

36
00:02:03.650 --> 00:02:05.400
That's back pressure.

37
00:02:05.400 --> 00:02:08.270
That's a reverse way of communicating up

38
00:02:08.270 --> 00:02:12.590
from consumer to producer to say stop
producing cuz I don't want any more.

39
00:02:12.590 --> 00:02:14.970
Is everybody following me?

40
00:02:14.970 --> 00:02:17.830
This is like 50,000 foot view of stuff.

41
00:02:17.830 --> 00:02:20.730
Well there are places in
our applications where we

42
00:02:20.730 --> 00:02:23.580
don't have a direct connection
between producer and consumer.

43
00:02:23.580 --> 00:02:26.480
Because we've intentionally
kept them separate.

44
00:02:26.480 --> 00:02:31.440
But we do want to have a signal,
some way of signaling to the producer.

45
00:02:31.440 --> 00:02:35.800
I don't wanna take any more data on
this end, stop sending me stuff.

46
00:02:35.800 --> 00:02:39.284
In the RxJS world that's their distinction
between hot and cold observables,

47
00:02:39.284 --> 00:02:40.500
by the way.

48
00:02:40.500 --> 00:02:44.710
But converting between hot and
cold observables is not quite as clean and

49
00:02:44.710 --> 00:02:48.310
easy, at least in my practice,
as it might seem in theory.

50
00:02:48.310 --> 00:02:54.370
So another way of modeling that signal
is to use a channel in a CSP system.

51
00:02:54.370 --> 00:02:55.920
Because the channel, as I said,

52
00:02:55.920 --> 00:02:58.690
is like a pipe that can only
take one message at a time.

53
00:02:58.690 --> 00:03:00.890
And it automatically has back pressure,

54
00:03:00.890 --> 00:03:06.970
and what that means is you can't send me
something until I'm ready to take it.

55
00:03:06.970 --> 00:03:09.870
And I can't take something
until you're ready to send it.

56
00:03:09.870 --> 00:03:12.650
Is everybody following me?

57
00:03:12.650 --> 00:03:13.990
There's no queue there.

58
00:03:13.990 --> 00:03:16.690
It's one message that
transfers through the channel.

59
00:03:17.900 --> 00:03:20.630
So, it's this notion of blocking channels.

60
00:03:20.630 --> 00:03:24.650
Now CSP, it stands for
communicating sequential processes.

61
00:03:24.650 --> 00:03:28.722
This actually was a pattern
invented way back in the 60s.

62
00:03:28.722 --> 00:03:34.090
Guy named Hoare, he wrote this book called
Communicating Sequential Processes.

63
00:03:34.090 --> 00:03:36.830
It was a model for managing concurrency.

64
00:03:36.830 --> 00:03:42.260
Some of you may have heard of
the actor model of concurrency,

65
00:03:42.260 --> 00:03:45.970
and there's a close but
not direct relationship between the two.

66
00:03:45.970 --> 00:03:50.750
The major difference with actors, at least
from my research, the major difference

67
00:03:50.750 --> 00:03:53.830
with actors versus this thing that
I'm about to talk to you about.

68
00:03:53.830 --> 00:03:58.110
With actors when you send
a message it's asynchronous.

69
00:03:59.270 --> 00:04:00.560
You send a message and

70
00:04:00.560 --> 00:04:02.889
at some other point,
somebody on the other end picks it up.

71
00:04:03.890 --> 00:04:07.210
With CSP when you send a message
it's very synchronous.

72
00:04:08.210 --> 00:04:10.560
At least the semantics are,
it's very synchronous.

73
00:04:10.560 --> 00:04:13.320
When I wanna send a message there has
to be somebody on the other end that's

74
00:04:13.320 --> 00:04:14.018
ready to take it.

75
00:04:14.018 --> 00:04:18.180
Cuz my hose can only accept
one message at a time, okay.

76
00:04:18.180 --> 00:04:20.870
So that's the major difference
if you've heard about actors.

77
00:04:20.870 --> 00:04:24.990
It's the major difference between
synchronous message passing with CSP

78
00:04:24.990 --> 00:04:27.925
versus asynchronous message
passing with actors.

79
00:04:27.925 --> 00:04:30.781
So communicating sequential processes,
what is what does this all about?

80
00:04:30.781 --> 00:04:34.881
It's about modeling your
application with lots of tiny

81
00:04:34.881 --> 00:04:38.200
independent pieces that we call processes.

82
00:04:39.560 --> 00:04:45.930
And if JavaScript had full
&gt;&gt; Kyle: like threading to it,

83
00:04:45.930 --> 00:04:50.080
if we could do like you can in Node where
you can set up child processes and stuff.

84
00:04:50.080 --> 00:04:54.460
If we had full threading then every
independent piece would be on its

85
00:04:54.460 --> 00:04:58.650
own thread and it would be running
entirely independently of everybody else.

86
00:04:59.720 --> 00:05:03.510
Well that's great because a lot of
the times they are doing their own thing.

87
00:05:03.510 --> 00:05:07.050
But there are cases where
these two independent pieces

88
00:05:07.050 --> 00:05:09.360
need to coordinate with each other.

89
00:05:09.360 --> 00:05:12.420
So you have two different parts of your
application that are normally just kind of

90
00:05:12.420 --> 00:05:13.860
running doing their own thing.

91
00:05:13.860 --> 00:05:17.000
But there is a state in which they get
to where they say I need to communicate

92
00:05:17.000 --> 00:05:17.590
with this guy.

93
00:05:17.590 --> 00:05:20.860
And this guy gets to a state where he says
I need some information from that guy.

94
00:05:20.860 --> 00:05:22.440
So whatever they've been
doing independently,

95
00:05:22.440 --> 00:05:27.430
they get to a point where they
say we need to coordinate.

96
00:05:27.430 --> 00:05:31.102
And send a message in either direction,
or perhaps both, one message this way,

97
00:05:31.102 --> 00:05:31.970
one message back.

98
00:05:32.980 --> 00:05:36.330
And then as soon as the messages have
passed, they become unblocked and

99
00:05:36.330 --> 00:05:37.450
they go back to being independent.

100
00:05:38.986 --> 00:05:40.320
That's what we mean by processes,

101
00:05:40.320 --> 00:05:42.940
is that these things could
in theory run independently.

102
00:05:42.940 --> 00:05:45.010
Now we know within JavaScript,

103
00:05:45.010 --> 00:05:48.180
things aren't actually running
independently like that.

104
00:05:48.180 --> 00:05:51.640
But we have seen something today
that does sort of act like that.

105
00:05:51.640 --> 00:05:58.246
Does anybody know what I'm talking about?
&gt;&gt; Kyle: Didn't

106
00:05:58.246 --> 00:06:02.945
we see something today that sort of acts
like it can just block itself and not

107
00:06:02.945 --> 00:06:06.373
affect any of the rest of the application?
&gt;&gt; Speaker 2: [INAUDIBLE]

108
00:06:06.373 --> 00:06:07.570
&gt;&gt; Kyle: Generators, right?

109
00:06:07.570 --> 00:06:10.270
So what if I had a bunch of different
generators that were all running in

110
00:06:10.270 --> 00:06:13.380
different places, and they were
running independently with each other.

111
00:06:13.380 --> 00:06:16.110
And then at some point
two generators said hey,

112
00:06:16.110 --> 00:06:17.630
we need to coordinate with each other.

113
00:06:17.630 --> 00:06:22.060
So let's have a communication channel
where we can both block each other,

114
00:06:22.060 --> 00:06:24.130
both block waiting for
the other one to show up.

115
00:06:24.130 --> 00:06:27.220
And as soon as both of us of showed
up we can send a message back and

116
00:06:27.220 --> 00:06:28.580
then we can go back to being independent.

117
00:06:30.200 --> 00:06:33.770
That's really the conceptual basis for
CSP.

118
00:06:33.770 --> 00:06:37.770
And while that sounds fantastically
more complicated, it is.

119
00:06:37.770 --> 00:06:39.810
It's also fantastically more powerful.

120
00:06:40.890 --> 00:06:45.510
Because we can literally model every
independent piece of our application

121
00:06:45.510 --> 00:06:47.010
totally separate of everything else.

122
00:06:47.010 --> 00:06:51.390
And all we have to think about is when I
need a message I wait for the message.

123
00:06:51.390 --> 00:06:54.880
Or when I need to send a message I
wait for the sending of the message.

124
00:06:54.880 --> 00:06:57.300
And other than that we
have no understanding or

125
00:06:57.300 --> 00:07:00.000
knowledge whatsoever of any of
the other pieces of the system.

126
00:07:01.730 --> 00:07:06.220
So theoretically the implementation could
take each one of those little processes

127
00:07:06.220 --> 00:07:08.030
and put them on an entirely
separate thread.

128
00:07:08.030 --> 00:07:10.390
And the application would still
work exactly the same way.

129
00:07:12.270 --> 00:07:16.650
This model for concurrency, the CSP
model for concurrency, is so powerful.

130
00:07:16.650 --> 00:07:20.220
It is the model for concurrency
in the Go programming language.

131
00:07:20.220 --> 00:07:22.250
It's also what Clojure and
ClojureScript uses.

132
00:07:22.250 --> 00:07:25.420
So I'm not, it's not just me making
something up and saying it's cool.

133
00:07:25.420 --> 00:07:26.140
So really,

134
00:07:26.140 --> 00:07:30.450
really, really, super smart people have
said this is the way to do concurrency.

135
00:07:30.450 --> 00:07:33.860
And in Go they do have threads so
every Go, it's called a Go routine,

136
00:07:33.860 --> 00:07:37.690
every Go routine does end up spinning up
on its own entirely independent thread.

137
00:07:39.300 --> 00:07:42.340
It's one of the magic reasons why
Go has so much efficiency, so

138
00:07:42.340 --> 00:07:43.300
much performance to it.

139
00:07:43.300 --> 00:07:47.100
Because I'm able to spin up all these
different pieces of my application in

140
00:07:47.100 --> 00:07:47.860
separate threads.

141
00:07:47.860 --> 00:07:51.090
But I have a really simple way of
communicating between the two of them

142
00:07:51.090 --> 00:07:54.340
through blocking channels, okay.

143
00:07:54.340 --> 00:07:58.350
So let me try to illustrate
in code what that looks like.

144
00:07:58.350 --> 00:08:02.680
I make a channel like I
do up here on line 1.

145
00:08:02.680 --> 00:08:04.910
And then I have this process1,

146
00:08:04.910 --> 00:08:09.610
which is a generator cuz we're
expressing this in terms of JavaScript.

147
00:08:09.610 --> 00:08:11.830
He wants to send something
down the channel, so

148
00:08:11.830 --> 00:08:16.290
he uses a method called put, and he says
this is the channel I want to send it on.

149
00:08:16.290 --> 00:08:18.060
So we pass channel is the first, and

150
00:08:18.060 --> 00:08:21.340
then we pass the next argument is
a message that we want to send.

151
00:08:22.640 --> 00:08:25.340
You notice I'm using yield in
front of put, because I want for

152
00:08:25.340 --> 00:08:27.649
the process1 generator to pause.

153
00:08:28.720 --> 00:08:31.230
Until somebody on the other end
of that channel says I'm ready to

154
00:08:31.230 --> 00:08:32.000
take that message.

155
00:08:33.120 --> 00:08:34.630
So I say yield put,

156
00:08:34.630 --> 00:08:39.920
which locally blocks the process1 until
somebody else comes along and unblocks it.

157
00:08:41.390 --> 00:08:43.440
Then I have this other
process in my application,

158
00:08:43.440 --> 00:08:45.730
maybe in an entirely
different part of the app.

159
00:08:45.730 --> 00:08:50.300
He's running along and he says I
need a message from the ch channel.

160
00:08:50.300 --> 00:08:53.770
So he says I'm gonna yield on a take,
like I'm doing on line 10.

161
00:08:55.490 --> 00:09:00.940
It does not matter who gets there first.
&gt;&gt; Kyle: That's what's cool about it.

162
00:09:00.940 --> 00:09:03.950
I don't have to worry about whether or not
there's a message waiting for me or not.

163
00:09:03.950 --> 00:09:06.950
I just say I wanna take a message,
and I'll wait until one's ready.

164
00:09:06.950 --> 00:09:08.720
Maybe it's ready right now, great.

165
00:09:08.720 --> 00:09:11.130
If it's not, I'll just patiently wait.

166
00:09:11.130 --> 00:09:12.820
I wanna push a message down.

167
00:09:12.820 --> 00:09:15.130
I don't have to know whether or
not somebody's ready to get it or not.

168
00:09:15.130 --> 00:09:17.638
I'm just gonna wait until somebody's
ready to take my message.

169
00:09:17.638 --> 00:09:20.250
That's what lets them be so independent.

170
00:09:21.710 --> 00:09:24.670
Because the semantics of this
communication channel take care of that

171
00:09:24.670 --> 00:09:27.140
communication, that back pressure, for us.

172
00:09:27.140 --> 00:09:32.740
So whenever process2 gets to line 10 and
it says I'm ready to take it,

173
00:09:32.740 --> 00:09:35.410
immediately that message
transfers through the channel.

174
00:09:35.410 --> 00:09:36.930
And process2 is unblocked,

175
00:09:36.930 --> 00:09:40.590
and process1 is unblocked, and
then they just go on about their day.

176
00:09:40.590 --> 00:09:42.880
And then we get to line 5 and
we say wait a minute,

177
00:09:42.880 --> 00:09:44.510
I need a message from the channel.

178
00:09:44.510 --> 00:09:45.830
So I'm gonna wait again.

179
00:09:45.830 --> 00:09:48.997
And then process2,
he's running along and hey says hey,

180
00:09:48.997 --> 00:09:51.290
I've got a message to send on the channel.

181
00:09:51.290 --> 00:09:53.450
So I'm gonna wait until
somebody's ready to get it.

182
00:09:54.720 --> 00:09:57.310
And he sends a message
back up the channel.

183
00:09:57.310 --> 00:10:00.674
And then process1 is unblocked,
and then process2 is unblocked,

184
00:10:00.674 --> 00:10:02.190
and they go on about their day.

185
00:10:03.930 --> 00:10:07.020
So you can have hundreds of lines
of totally independent code that

186
00:10:07.020 --> 00:10:09.040
doesn't have to worry about
any other piece of the system.

187
00:10:09.040 --> 00:10:12.550
And the only part that has to
worry about it is when you know

188
00:10:12.550 --> 00:10:15.470
I've got a channel that
I need some data on, or

189
00:10:15.470 --> 00:10:17.950
I've got a channel that I
need to push some data along.

190
00:10:17.950 --> 00:10:20.030
I'm just gonna wait for
somebody to tell me that's okay.

191
00:10:21.760 --> 00:10:25.909
And underneath the covers this
abstraction, the CSP paradigm is what

192
00:10:25.909 --> 00:10:31.503
manages all that complexity for you.
&gt;&gt; Kyle: Okay,

193
00:10:31.503 --> 00:10:35.631
now the really,
really smart folks in Go, and Clojure,

194
00:10:35.631 --> 00:10:40.275
and ClojureScript,
they're pretty convinced this is the most

195
00:10:40.275 --> 00:10:45.770
powerful model invented to date for
concurrency management.

196
00:10:45.770 --> 00:10:49.600
And I'm not one to bet against them,
I think they're right.

197
00:10:49.600 --> 00:10:53.210
I do think this is the most powerful
pattern that I've ever seen or

198
00:10:53.210 --> 00:10:55.420
heard anybody talk about for
concurrency management.

199
00:10:57.130 --> 00:10:59.040
I'm fascinated by it, by the way.

200
00:10:59.040 --> 00:11:02.705
I've spent the last year researching
how to understand this deeper and

201
00:11:02.705 --> 00:11:05.860
seeing practical ways of applying
it to my user interfaces.

202
00:11:05.860 --> 00:11:08.760
And I've spent a year at it and
I still feel like I'm barely scratching

203
00:11:08.760 --> 00:11:10.824
the surface compared
to these smart people.

204
00:11:10.824 --> 00:11:14.590
That whole standing on the shoulders
of giants, I'm like clinging on for

205
00:11:14.590 --> 00:11:15.170
dear life.

206
00:11:15.170 --> 00:11:18.440
I don't even hardly know
the stuff that they know.

207
00:11:18.440 --> 00:11:23.280
But I'm convinced that there is
a whole lot here that we haven't even

208
00:11:23.280 --> 00:11:25.230
really uncovered and
scratched the surface with.

209
00:11:26.730 --> 00:11:31.040
So ClojureScript, guys that maintain
ClojureScript, specifically a guy named

210
00:11:31.040 --> 00:11:35.760
David Swanadet, I'm sorry David Nolan
who goes by Swanadet on Twitter.

211
00:11:35.760 --> 00:11:40.740
Super brilliant guy, every time I hear
him talk I'm just like how did I even,

212
00:11:40.740 --> 00:11:44.380
he just drops down this knowledge like
it's so easy and I'm learning so much.

213
00:11:45.590 --> 00:11:48.870
But he's got a UI framework called Om,
O-M.

214
00:11:48.870 --> 00:11:52.572
And its ClojureScript,
which ClojureScript is ported to Java,

215
00:11:52.572 --> 00:11:57.820
it's ClojureScript is Clojure that
can run in JavaScript in the browser.

216
00:11:57.820 --> 00:11:59.370
And they use this CSP all over the place,

217
00:11:59.370 --> 00:12:01.560
it models the entire
user interface in CSP.

218
00:12:01.560 --> 00:12:03.901
And he produces this, the most amazing and

219
00:12:03.901 --> 00:12:06.640
most performant user
interface I've ever seen.

220
00:12:06.640 --> 00:12:07.940
It's incredible.

221
00:12:07.940 --> 00:12:09.920
So I'm convinced that
there's a whole lot of,

222
00:12:11.255 --> 00:12:13.485
we haven't scratched the surface
of the capabilities of it.

223
00:12:13.485 --> 00:12:17.065
And that's why I'm trying to convince
people to think about this as well.

224
00:12:17.065 --> 00:12:22.955
This is another one of those tools to
start to model our applications around.

