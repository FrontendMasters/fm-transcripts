WEBVTT

1
00:00:00.000 --> 00:00:03.937
[MUSIC]

2
00:00:03.937 --> 00:00:06.229
&gt;&gt; Kyle Simpson: If we
look at exercise ten,

3
00:00:06.229 --> 00:00:10.418
simply all that I'm saying
with exercise ten is,

4
00:00:10.418 --> 00:00:16.118
I gave you the code from one of
the implementations is actually the.

5
00:00:18.549 --> 00:00:22.720
&gt;&gt; Kyle Simpson: I gave you the code
from the, which implementation?

6
00:00:22.720 --> 00:00:26.940
The asynquence flavored
implementation from the repo.

7
00:00:26.940 --> 00:00:28.360
So I've given you that code already,

8
00:00:28.360 --> 00:00:32.850
it's set up in this repo and
what this is asking you to do is first,

9
00:00:32.850 --> 00:00:36.939
to study the similarities and differences
between these five implementations.

10
00:00:38.090 --> 00:00:40.940
Shouldn't take you that much time to open
up because there's only two files that you

11
00:00:40.940 --> 00:00:45.650
should care about the ui.js and the
feeds.js, each of those implementations.

12
00:00:45.650 --> 00:00:47.860
So open up ui.js in those two, and

13
00:00:47.860 --> 00:00:50.290
look side by side look at
some of the differences.

14
00:00:50.290 --> 00:00:52.950
Study those differences just not deeply,
but

15
00:00:52.950 --> 00:00:55.160
just to get a rough sense
of how things are going.

16
00:00:56.450 --> 00:00:57.735
And then look at the ui and

17
00:00:57.735 --> 00:01:03.450
feeds js that's presented in this repo
that is in the exercise 10 folder.

18
00:01:03.450 --> 00:01:06.060
Which is the asynchronous flavored one.

19
00:01:06.060 --> 00:01:10.390
Now your task for the exercise,
should you choose to tackle it.

20
00:01:10.390 --> 00:01:12.910
Pick either one of reactive sequences or

21
00:01:12.910 --> 00:01:15.940
CSP, whichever one you like more
from what we just talked about.

22
00:01:15.940 --> 00:01:16.530
I don't care.

23
00:01:16.530 --> 00:01:21.150
Pick either one of those two and try to
turn the asequence flavored one that I've

24
00:01:21.150 --> 00:01:24.570
provided you into that abstraction.

25
00:01:24.570 --> 00:01:28.230
So try to take it and make it into
the observable reactive sequences one or

26
00:01:28.230 --> 00:01:31.910
try to make it into the CSP one,
whichever one you'd like.

27
00:01:31.910 --> 00:01:33.210
This is super challenging.

28
00:01:33.210 --> 00:01:35.330
I'll tell you that each
of those implementations,

29
00:01:35.330 --> 00:01:39.120
when I wrote them the first time,
took me days and days.

30
00:01:39.120 --> 00:01:43.270
So I'm not expecting you to get all the
way there to a full complete thing, but

31
00:01:43.270 --> 00:01:47.540
you also can cheat cuz I've provided
you the fixed versions on the repo, so

32
00:01:47.540 --> 00:01:48.870
if you need some hints.

33
00:01:48.870 --> 00:01:51.320
But really the point here is to
just spend the next few minutes,

34
00:01:51.320 --> 00:01:54.510
we'll probably break for 15 minutes or so.

35
00:01:54.510 --> 00:01:57.470
Take the next 15 minutes and
try to study these differences,

36
00:01:57.470 --> 00:02:02.120
try your hand at making some changes
to it that would be more reactive.

37
00:02:02.120 --> 00:02:05.010
And get a sense of what it's like to
do what we've practiced all along in

38
00:02:05.010 --> 00:02:09.060
this workshop, but doing so in the context
of a much more sophisticated app

39
00:02:09.060 --> 00:02:11.410
than our simple little promises demo.

