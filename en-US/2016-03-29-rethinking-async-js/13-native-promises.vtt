WEBVTT

1
00:00:00.000 --> 00:00:03.728
[MUSIC]

2
00:00:03.728 --> 00:00:04.540
&gt;&gt; Kyle: What is a promise?

3
00:00:05.600 --> 00:00:07.860
There are a multitude of different ways,

4
00:00:07.860 --> 00:00:11.380
several different ways that promises
are explained and I will choose two or

5
00:00:11.380 --> 00:00:16.750
three of those explanations here by
way of metaphor and illustration.

6
00:00:16.750 --> 00:00:20.470
Again, because it's more important to
me that you understand the concept

7
00:00:20.470 --> 00:00:24.670
behind promises first,
before understanding the API.

8
00:00:24.670 --> 00:00:28.910
It's the reverse of the way most
of this stuff is typically taught.

9
00:00:28.910 --> 00:00:32.100
But I want you to understand
why promises are so important.

10
00:00:32.100 --> 00:00:34.170
Because they're not perfect.

11
00:00:34.170 --> 00:00:37.400
And when there is some frustration with
the promise, or something that's weird,

12
00:00:37.400 --> 00:00:40.090
or there's some gotcha,
there are gotchas there.

13
00:00:40.090 --> 00:00:42.960
And when there's some gotcha down
the road and you're frustrated and

14
00:00:42.960 --> 00:00:44.290
you find yourself.

15
00:00:44.290 --> 00:00:44.890
Here's a clue.

16
00:00:44.890 --> 00:00:47.710
There's is such a thing as promises hell.

17
00:00:47.710 --> 00:00:49.295
If there's a call back sell,
there's a promise to sell.

18
00:00:49.295 --> 00:00:53.000
When you find yourself stuck in
promises hell in your cursing at them.

19
00:00:53.000 --> 00:00:56.319
I don't want you to turn around and
say, well I just get rid of problems.

20
00:00:57.780 --> 00:01:00.460
Need to understand why
they're more important,

21
00:01:00.460 --> 00:01:02.510
than just the usage of their API.

22
00:01:02.510 --> 00:01:05.530
If I could change it, there are some
things I would change about the API.

23
00:01:06.580 --> 00:01:08.350
But I wouldn't change
the fact that they're there.

24
00:01:08.350 --> 00:01:11.410
They are one of the most important
advances that we've made in

25
00:01:11.410 --> 00:01:14.879
codifying reasonable
asynchronous coding patterns.

26
00:01:16.130 --> 00:01:20.010
So, first let me give you
a scenario around promises.

27
00:01:20.010 --> 00:01:22.970
It's silly,
where it's early here together and

28
00:01:22.970 --> 00:01:25.970
I want to make sure that
we're all kind of awake.

29
00:01:25.970 --> 00:01:28.650
I see people sipping on coffee and
so have more coffee,

30
00:01:28.650 --> 00:01:32.330
cuz your brains are gonna have to fire
on all cylinders to get stuff today.

31
00:01:33.810 --> 00:01:35.640
But here's a silly metaphor
to explain to you.

32
00:01:35.640 --> 00:01:40.650
I walk up to the counter at my
favorite fast food restaurant, and

33
00:01:40.650 --> 00:01:42.400
I order a cheeseburger.

34
00:01:42.400 --> 00:01:45.450
So I asked the lady,
I'd like a cheeseburger and she says,

35
00:01:45.450 --> 00:01:47.050
that will be a $39.

36
00:01:47.050 --> 00:01:51.330
And so I hand her the money,
give her the $39.

37
00:01:51.330 --> 00:01:54.000
So I have begun the transaction
by ordering and

38
00:01:54.000 --> 00:01:55.580
giving some money for something.

39
00:01:55.580 --> 00:01:58.770
What am I expecting in
return of this transaction?

40
00:01:58.770 --> 00:02:00.770
I'm expecting a cheeseburger.

41
00:02:00.770 --> 00:02:03.070
But oftentimes,
I'm not handed a cheeseburger immediately.

42
00:02:03.070 --> 00:02:04.250
What instead am I given?

43
00:02:05.520 --> 00:02:10.090
A receipt, and importantly on that receipt
it has an order number on it, right?

44
00:02:10.090 --> 00:02:12.089
My order says, order number 317.

45
00:02:13.360 --> 00:02:16.230
So I take that receipt, and
I look at my order number, and

46
00:02:16.230 --> 00:02:20.620
that order number has become
a placeholder for my future cheeseburger.

47
00:02:22.470 --> 00:02:23.470
It is an IOU.

48
00:02:23.470 --> 00:02:26.172
It is a promise for a future cheeseburger.

49
00:02:26.172 --> 00:02:29.366
They owe me a cheeseburger
because I have given the money,

50
00:02:29.366 --> 00:02:31.660
I've started a transaction.

51
00:02:31.660 --> 00:02:34.770
Now, I don't have the cheeseburger yet,
I can't bite into it, but

52
00:02:34.770 --> 00:02:37.480
that doesn't mean I can't
begin to think about and

53
00:02:37.480 --> 00:02:40.990
reason about and
dream about my future cheeseburger.

54
00:02:42.940 --> 00:02:46.590
I can begin to think about it in my mouth
can begin to salivate and I can be in and

55
00:02:46.590 --> 00:02:50.350
have cheeseburgers dancing
in my head about how

56
00:02:50.350 --> 00:02:53.920
amazing this cheeseburger is gonna be,
I'm famished, I can't wait to eat it.

57
00:02:53.920 --> 00:02:57.350
I have something in my hand
that allows me to begin to

58
00:02:57.350 --> 00:02:59.709
reason about this cheeseburger,
even though I don't yet have it.

59
00:03:01.820 --> 00:03:05.169
And then those magical words, order 317.

60
00:03:05.169 --> 00:03:12.200
And I walk back up to the counter,
receipt in hand, order 317 printed on it.

61
00:03:12.200 --> 00:03:14.940
And I hand her my receipt, and
what do I now get in return?

62
00:03:15.970 --> 00:03:19.299
I now am exchanging that promise for
the value for the value itself.

63
00:03:21.440 --> 00:03:24.300
This is a silly metaphor, but
a metaphor nonetheless for

64
00:03:24.300 --> 00:03:27.310
what is happening with promises.

65
00:03:27.310 --> 00:03:32.030
Promises are a quantification
of the idea that we need a place

66
00:03:32.030 --> 00:03:37.110
holder to eliminate time is
the concern wrapped around the value.

67
00:03:38.590 --> 00:03:39.870
We need a container around it.

68
00:03:40.920 --> 00:03:44.230
In programming speak,
we call that a future value.

69
00:03:44.230 --> 00:03:48.860
It's a value that will eventually at
some unspecified point become fulfilled.

70
00:03:48.860 --> 00:03:49.770
But in the meantime,

71
00:03:49.770 --> 00:03:52.330
we still need to be able to reason
about it exactly the same way.

72
00:03:54.140 --> 00:03:56.860
Because we don't want to sit
around waiting and wondering and

73
00:03:56.860 --> 00:03:58.840
having all these forks of different logic.

74
00:03:58.840 --> 00:04:01.490
That's the complexity that makes our code.

75
00:04:01.490 --> 00:04:04.380
Hard to understand, hard to maintain,
hard to be bug free.

76
00:04:06.060 --> 00:04:09.330
So the promise becomes a container
that wraps around a value.

77
00:04:09.330 --> 00:04:12.590
If that promises come to
us primarily by way and

78
00:04:12.590 --> 00:04:14.860
they're not original to JavaScript.

79
00:04:14.860 --> 00:04:18.730
But they come to us primarily
by way of a language called E.

80
00:04:18.730 --> 00:04:22.020
One of the members of the TC 39 Committee,
Mark Miller.

81
00:04:22.020 --> 00:04:27.220
Is the creator of the E programming
language, and in E they have these things

82
00:04:27.220 --> 00:04:32.175
called futures, and in E a future is
literally replaced by it's value,

83
00:04:32.175 --> 00:04:37.215
it's literally exchanged by its value but
you can perform the operations

84
00:04:37.215 --> 00:04:42.361
that you would normally do against
that value directly, transparently.

85
00:04:42.361 --> 00:04:47.015
Even though the value isn't physically
there yet, you can begin to compose it,

86
00:04:47.015 --> 00:04:49.354
you can begin to perform operations on.

87
00:04:49.354 --> 00:04:52.865
We can get quite the same thing but
he said you know what,

88
00:04:52.865 --> 00:04:57.428
this is really powerful and we should
bring something to JavaScript that

89
00:04:57.428 --> 00:05:01.570
allows people to reason about
values it ignorance of the timing.

90
00:05:02.900 --> 00:05:07.340
Values are the important thing and
composing values is the important thing.

91
00:05:07.340 --> 00:05:11.950
If it sounds like it's kind of related to
functional programming, that's cuz it is.

92
00:05:13.550 --> 00:05:17.340
Not to throwback in those terms but
promises, not their API but

93
00:05:17.340 --> 00:05:20.040
their mechanism,
they're basically a monad.

94
00:05:21.810 --> 00:05:24.140
They're a functional programming concept.

95
00:05:24.140 --> 00:05:28.610
The API is not quite as clean as
a functional programmer would like and

96
00:05:28.610 --> 00:05:32.270
there have been experiments to
create other versions that are more

97
00:05:32.270 --> 00:05:35.530
functionally sound, but
the principle still the same.

98
00:05:37.020 --> 00:05:38.590
So if it sounds functional,
it's because it is.

99
00:05:40.290 --> 00:05:44.330
So that's one way of thinking about
a promise is that it's a future value.

100
00:05:44.330 --> 00:05:49.300
Another way of thinking
about a promise is that it

101
00:05:49.300 --> 00:05:52.880
an uninverts the paradigm
that we're traditionally used

102
00:05:52.880 --> 00:05:57.430
to interacting with some other mechanism
that's going to be asynchronous in nature.

103
00:05:57.430 --> 00:06:01.650
When I call some utility and I know
that utility's not going to finish now,

104
00:06:01.650 --> 00:06:03.570
it's going to finish at some later point.

105
00:06:05.110 --> 00:06:06.960
When I call that utility.

106
00:06:06.960 --> 00:06:08.920
How do I wait around to hear that?

107
00:06:08.920 --> 00:06:10.690
I have to give it a call back.

108
00:06:10.690 --> 00:06:13.340
I have to pass a call back in and
you remember I said,

109
00:06:13.340 --> 00:06:15.270
that's inversion of control.

110
00:06:15.270 --> 00:06:17.980
When I wrap up the second half
of my program in a callback and

111
00:06:17.980 --> 00:06:20.930
pass it to someone else,
I give them the continuation control.

112
00:06:22.310 --> 00:06:23.516
And I've inverted the control that I have.

113
00:06:23.516 --> 00:06:27.590
But what if we could
un-invert that paradigm?

114
00:06:27.590 --> 00:06:31.800
If we could, un-inverter rather
not inverted in the first place?

115
00:06:31.800 --> 00:06:34.330
Rather than passing
a call back to a utility,

116
00:06:34.330 --> 00:06:38.030
what if we could say something like,
I'm gonna call some function and

117
00:06:38.030 --> 00:06:40.810
I know it might take a while for
it to finish.

118
00:06:40.810 --> 00:06:42.270
I want you to return to me,

119
00:06:42.270 --> 00:06:44.920
when I call utility,
I want you to give me back something.

120
00:06:44.920 --> 00:06:46.480
I want you to give me an event listener.

121
00:06:47.970 --> 00:06:51.800
An event listener that I can
subscribe to a completion event.

122
00:06:53.140 --> 00:06:56.510
So I'll listen for the completion of
events and you just fire that event

123
00:06:56.510 --> 00:07:00.150
whenever you're good and ready, and I'll
be notified through this event listener

124
00:07:00.150 --> 00:07:02.570
that you've finished your work and
I'll know it's time to move on.

125
00:07:02.570 --> 00:07:07.170
In fact,
in addition to being a completion of that,

126
00:07:07.170 --> 00:07:08.670
I can also listen to an error event.

127
00:07:08.670 --> 00:07:12.280
If you had some errand to notify me or
other things that you want to notify me

128
00:07:12.280 --> 00:07:15.550
about, I could simply receiving
that listener back from you and

129
00:07:15.550 --> 00:07:19.890
I know that's a tried and true patterns
to receive something and listen to it.

130
00:07:21.040 --> 00:07:22.570
Listen subscribe to events on it.

