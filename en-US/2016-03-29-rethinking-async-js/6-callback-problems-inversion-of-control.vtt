WEBVTT

1
00:00:00.000 --> 00:00:03.952
[MUSIC]

2
00:00:03.952 --> 00:00:05.920
&gt;&gt; Kyle: So I've alluded to this already.

3
00:00:05.920 --> 00:00:12.520
Let's try to be more articulate about
the two major problems of callback hell.

4
00:00:12.520 --> 00:00:13.740
We saw the symptoms of them.

5
00:00:13.740 --> 00:00:17.830
The symptoms of callback hell where that
managing that times the complexity was

6
00:00:17.830 --> 00:00:19.360
rather awful.

7
00:00:19.360 --> 00:00:23.090
It's very manual,
it's very hard coded, hard to do.

8
00:00:23.090 --> 00:00:26.240
But there's something
deeper even than that.

9
00:00:26.240 --> 00:00:28.579
So to try to articulate
those two problems,

10
00:00:28.579 --> 00:00:32.374
I'm gonna have to take some conceptual
steps back a little further away

11
00:00:32.374 --> 00:00:36.522
from the code.
&gt;&gt; Kyle: First,

12
00:00:36.522 --> 00:00:41.240
I wanna talk to you about a principle
called inversion of control.

13
00:00:44.000 --> 00:00:46.050
By the way if you do a search for

14
00:00:46.050 --> 00:00:49.380
inversion of control you
gonna get lots of different

15
00:00:49.380 --> 00:00:53.920
answers in different software domains
as to what inversion of control means.

16
00:00:53.920 --> 00:00:58.020
So try not to confuse all those different
overloaded definitions with the one

17
00:00:58.020 --> 00:00:59.740
that I'm going to give you here.

18
00:00:59.740 --> 00:01:03.955
What I'm gonna give you here is
the inversion of control means.

19
00:01:03.955 --> 00:01:08.072
There's part of my program that
I'm in control of executing.

20
00:01:08.072 --> 00:01:12.676
And then, there's another portion of my
code that I'm not in control of executing.

21
00:01:12.676 --> 00:01:16.163
And the way that we express that is to
take the first half of my program that

22
00:01:16.163 --> 00:01:19.878
executes now and the second half of my
code that executes in the callback, and

23
00:01:19.878 --> 00:01:22.016
when I give that call
back to somebody else.

24
00:01:22.016 --> 00:01:25.969
That's what inverts the control and
it puts them in control of when and

25
00:01:25.969 --> 00:01:30.030
in what manner to execute
the second half of my program.

26
00:01:30.030 --> 00:01:33.020
That's all and
only what I mean by inversion of control.

27
00:01:34.240 --> 00:01:38.440
I'm going to assert to you that this is
one of the two evils of callback hell,

28
00:01:38.440 --> 00:01:39.880
this notion of inversion of control.

29
00:01:40.980 --> 00:01:43.660
So let's go back to this
fundamental setTimeout.

30
00:01:43.660 --> 00:01:47.540
There's a line 1 and a line 2, those
represent the first half of our program,

31
00:01:47.540 --> 00:01:50.920
lines three and four represent
the second half of our program.

32
00:01:50.920 --> 00:01:56.250
We are in control of lines 1 and
2, they're happening now.

33
00:01:56.250 --> 00:01:59.470
We are observing them happening now,
we are in control of them.

34
00:01:59.470 --> 00:02:04.390
Lines 3 and 4 are going to happen
at some unspecified later time and

35
00:02:04.390 --> 00:02:08.250
we are completely not in control
of how those lines, how and

36
00:02:08.250 --> 00:02:09.370
when those lines get executed.

37
00:02:11.180 --> 00:02:13.350
We have given that control
over to someone else,

38
00:02:13.350 --> 00:02:15.900
in this case it's the timeout utility.

39
00:02:15.900 --> 00:02:20.050
It is entirely in control of when and
if this ever even gets executed.

40
00:02:22.840 --> 00:02:27.020
Now, with a set timeout that's a built
in JavaScript engine facility and

41
00:02:27.020 --> 00:02:31.430
even though there's some weirdness
around timers we can all probably say

42
00:02:31.430 --> 00:02:34.880
we don't worry too much we don't
worry we don't have a trust issue.

43
00:02:35.910 --> 00:02:39.930
Around the time or not calling the call
back or doing something weird.

44
00:02:39.930 --> 00:02:41.490
So let me give you a slightly
different scenario.

45
00:02:42.720 --> 00:02:45.220
What if it's not the built in engine?

46
00:02:45.220 --> 00:02:46.540
What if it's some other utility,

47
00:02:46.540 --> 00:02:50.270
maybe even a utility that comes to
you by way of a third party library.

48
00:02:50.270 --> 00:02:53.470
Let me give you a scenario set
this up because I like to teach to

49
00:02:53.470 --> 00:02:56.100
silly metaphors and scenarios and things.

50
00:02:56.100 --> 00:02:58.870
So let's imagine that you are tasked with

51
00:02:58.870 --> 00:03:03.540
building an e-commerce engine for
your company.

52
00:03:03.540 --> 00:03:07.745
Your company sells high end
expensive TVs to celebrities.

53
00:03:07.745 --> 00:03:10.426
$10,000 TVs to celebrities.

54
00:03:10.426 --> 00:03:14.800
Your task of building the e-commerce
site that sells those to people.

55
00:03:14.800 --> 00:03:19.440
So you go through all the work of making
this e-commerce site all the cart and

56
00:03:19.440 --> 00:03:20.160
all that other stuff.

57
00:03:20.160 --> 00:03:24.770
And the very last step of the e-commerce
checkout, right is the person is clicking

58
00:03:24.770 --> 00:03:28.540
the checkout button you have a third
party utility like an omniture or

59
00:03:28.540 --> 00:03:29.140
something like that.

60
00:03:29.140 --> 00:03:34.100
They provided you some utility called
Track Checkout which you need to call with

61
00:03:34.100 --> 00:03:38.370
the details, the order details And
they will track that in the analytics so

62
00:03:38.370 --> 00:03:40.330
that your marketing folks
know what's happening and

63
00:03:40.330 --> 00:03:43.744
your product folks know what's happening.

64
00:03:43.744 --> 00:03:47.340
They're gonna track that
purchase info asynchronously,

65
00:03:47.340 --> 00:03:50.340
and then they're gonna call your call
back to let you know that it's time for

66
00:03:50.340 --> 00:03:53.730
you to go ahead and charge the customer's
credit card and print the thank you page.

67
00:03:54.900 --> 00:03:56.490
So it's the last step of the puzzle.

68
00:03:58.050 --> 00:04:00.980
Everything seems great you're right
this code is pretty straightforward,

69
00:04:00.980 --> 00:04:02.100
the API makes sense.

70
00:04:02.100 --> 00:04:05.090
I passed in this callback,
you test it against their test bed and

71
00:04:05.090 --> 00:04:06.890
everything works great.

72
00:04:06.890 --> 00:04:13.050
So you go live and day one, celebrity
start buying your awesome $10,000 TVs and

73
00:04:13.050 --> 00:04:15.810
everybody from the CEO all the way
down to you is happy at the company.

74
00:04:17.470 --> 00:04:21.130
So we fast forward in
the scenario six months.

75
00:04:21.130 --> 00:04:25.090
One morning before work, you're sitting in
a coffee shop casually sipping on a latte,

76
00:04:25.090 --> 00:04:27.540
and you get a call from your boss.

77
00:04:27.540 --> 00:04:33.480
And when you pick up,
your boss is not usual casual self.

78
00:04:33.480 --> 00:04:37.870
Complete panic can barely
forms full sentences.

79
00:04:37.870 --> 00:04:41.670
Says there's a major crisis,
huge PR problem.

80
00:04:41.670 --> 00:04:44.205
George Clooney tried to
buy a TV on our site and

81
00:04:44.205 --> 00:04:47.342
his credit card was charged five times for
the same TV and

82
00:04:47.342 --> 00:04:51.481
then he tweeted about it and now a bunch
of people are complaining about our

83
00:04:51.481 --> 00:04:55.521
side of all this huge PR nightmare,
you got to rush into work right now.

84
00:04:55.521 --> 00:04:57.958
Your head spinning you don't even
remember writing this code but

85
00:04:57.958 --> 00:04:59.750
you're rushing to work in your loses.

86
00:04:59.750 --> 00:05:03.230
Well, they've refunded his credit card but
we still have this huge PR

87
00:05:03.230 --> 00:05:07.250
nightmare that we are working through but
as engineers we've been told we have to

88
00:05:07.250 --> 00:05:10.790
figure out how this happened and
they sure it never happens again.

89
00:05:10.790 --> 00:05:11.580
Sound familiar to you.

90
00:05:11.580 --> 00:05:14.610
You've probably had your
own version of a fire

91
00:05:14.610 --> 00:05:17.040
that you get told you have to make
sure this never happens again.

92
00:05:18.940 --> 00:05:22.840
Sorry for your PTSD,
if I'm triggering memories for you.

93
00:05:24.060 --> 00:05:27.254
But we can identify with this
because this is our software works,

94
00:05:27.254 --> 00:05:31.203
works great until there's some huge fire
and then all of a sudden our eyes are open

95
00:05:31.203 --> 00:05:33.874
to a set of problems that we
didn't even know existed or

96
00:05:33.874 --> 00:05:37.863
maybe we thought existed but we really
hoped we'd never run into and then we did.

97
00:05:37.863 --> 00:05:40.350
In this case, you didn't even
realize there was a problem.

98
00:05:40.350 --> 00:05:43.120
There's no obvious clear
case of what the problem is.

99
00:05:43.120 --> 00:05:45.160
You don't even remember
writing the code but

100
00:05:45.160 --> 00:05:48.470
you go pouring over your code that
after you're looking through stuff,

101
00:05:48.470 --> 00:05:51.800
you arrive at this part of your code, you
see that's the only place where we charge

102
00:05:51.800 --> 00:05:54.730
the customer's credit card and
you turn a check.

103
00:05:54.730 --> 00:05:57.930
Could you maybe of like click the button
five times that you already have code in

104
00:05:57.930 --> 00:06:01.450
there to fix that and
like what could possibly be the problem?

105
00:06:02.660 --> 00:06:06.971
You arrive eventually at the conclusion
that there's no other possible way for

106
00:06:06.971 --> 00:06:10.250
the credit card to have been
charged five times other than for

107
00:06:10.250 --> 00:06:13.997
the truck checkout utility to have
called your call back five times.

108
00:06:13.997 --> 00:06:16.260
It's the only logical conclusion.

109
00:06:16.260 --> 00:06:17.720
You scour their documentation,

110
00:06:17.720 --> 00:06:20.710
there's not a single mention of them
calling your call back multiple times.

111
00:06:22.150 --> 00:06:23.380
So you call it Customer Support.

112
00:06:23.380 --> 00:06:26.600
You say, I got this huge PR issue,
I need you to help me out.

113
00:06:26.600 --> 00:06:30.480
Seems like this callback has
been called multiple times and

114
00:06:30.480 --> 00:06:32.070
I don't see any party or documentation.

115
00:06:32.070 --> 00:06:35.590
Well, the support representative
is similarly surprised,

116
00:06:35.590 --> 00:06:38.460
scours their documentation,
never heard of it, got no idea.

117
00:06:38.460 --> 00:06:41.740
So we'll escalate it,
talk to your support and

118
00:06:41.740 --> 00:06:43.280
we'll get back with you
with the resolution.

119
00:06:44.840 --> 00:06:48.350
You've got nothing else to do, so you go
over the day, come back the next morning

120
00:06:48.350 --> 00:06:52.750
and in your email first thing, you have
this long email, this long detailed email,

121
00:06:52.750 --> 00:06:55.490
is kinda like when a company
has a security breach and

122
00:06:55.490 --> 00:06:58.556
they put out their blog post that
shows how everything happened.

123
00:06:58.556 --> 00:07:02.620
They're like, at 9:02, we discovered this
and at 9:18 we shut this off Is this big

124
00:07:02.620 --> 00:07:05.750
long email describing everything, but
what it boils down to as they say this.

125
00:07:06.830 --> 00:07:10.770
Some of our engineers working on
an experimental branch of the code,

126
00:07:10.770 --> 00:07:14.360
where they were going to try to call
your callback, and if they didn't

127
00:07:14.360 --> 00:07:18.310
hear a successful return value from your
callback, they would try once per second

128
00:07:18.310 --> 00:07:23.460
for five seconds and then eventually
fail out, timeout after five seconds.

129
00:07:23.460 --> 00:07:24.810
Now, this was experimental code.

130
00:07:24.810 --> 00:07:27.110
It was never supposed to go live, but

131
00:07:27.110 --> 00:07:30.600
there was a breakdown in our process and
it accidentally went live.

132
00:07:30.600 --> 00:07:33.540
It was only live for
five minutes before we rolled it back,

133
00:07:33.540 --> 00:07:37.160
but it just happened to be the five
minutes that your site got caught in it.

134
00:07:37.160 --> 00:07:41.104
We've checked all of our processes,
we've implemented all this stuff, and

135
00:07:41.104 --> 00:07:43.388
we promise you this will
never happen again.

136
00:07:43.388 --> 00:07:47.568
That's the real solution, you print out
that email you take it your boss, you're

137
00:07:47.568 --> 00:07:51.610
like, this is what we got, they say it
was their fault they called or callback.

138
00:07:51.610 --> 00:07:55.840
Your boss looks at you and it's at this
point of the story that I want to ask you,

139
00:07:55.840 --> 00:07:58.470
what are the chances that your
bosses response is gonna be,

140
00:07:58.470 --> 00:08:01.437
what sounds good to me?
&gt;&gt; Speaker 2: [LAUGH]

141
00:08:01.437 --> 00:08:03.370
&gt;&gt; Kyle: I would say approximately zero.

142
00:08:05.140 --> 00:08:07.940
Because at this point what has
been exposed about your system is

143
00:08:07.940 --> 00:08:09.980
something you didn't even realize before.

144
00:08:09.980 --> 00:08:13.239
You did not realize that there was a trust
point when you passed in a callback.

145
00:08:13.239 --> 00:08:17.637
When you passed in a callback you
are trusting that that callback will be

146
00:08:17.637 --> 00:08:20.276
not called too many times or
too few times or

147
00:08:20.276 --> 00:08:25.111
whatever so they think well what I got to
do the fix is because your boss to me like

148
00:08:25.111 --> 00:08:29.420
you've got to make sure that
can never happen again.

149
00:08:29.420 --> 00:08:33.050
Well, the light bulb goes off in your head
and you say, I'm brilliant, I got an idea.

150
00:08:33.050 --> 00:08:34.380
I'll setup a Boolean flag.

151
00:08:34.380 --> 00:08:36.240
It'll start out as false.

152
00:08:36.240 --> 00:08:38.380
First time it goes through
I'll flip it to true, and

153
00:08:38.380 --> 00:08:41.520
I'll make sure that that darned thing
no matter how many times they call it,

154
00:08:41.520 --> 00:08:43.030
I'll only ever charge
the credit card once.

155
00:08:44.090 --> 00:08:45.830
Feel pretty good about yourself.

156
00:08:45.830 --> 00:08:47.700
You're like, this is awesome.

157
00:08:47.700 --> 00:08:51.601
So you check in that code,
you produce a test case for this.

158
00:08:51.601 --> 00:08:53.020
You go to the QA department.

159
00:08:53.020 --> 00:08:55.810
Now, I'm about to bash on a QA department,
but it's lovingly, so

160
00:08:55.810 --> 00:08:58.730
I apologize if you're in QA.

161
00:08:58.730 --> 00:09:00.010
Everybody loves QA.

162
00:09:00.010 --> 00:09:04.511
We love to hate them, but
we need QA, we need you.

163
00:09:04.511 --> 00:09:08.224
But you got to QA department
I got this fixed for the bug,

164
00:09:08.224 --> 00:09:11.542
here's the reproduced case,
blah, blah blah.

165
00:09:11.542 --> 00:09:14.140
And then, that QA person does
what they always annoyingly do.

166
00:09:14.140 --> 00:09:16.670
They ask you that question
that didn't even occur to you,

167
00:09:16.670 --> 00:09:18.730
you didn't want them to ask.

168
00:09:18.730 --> 00:09:22.290
Well, what about if they
never call our callback?

169
00:09:22.290 --> 00:09:23.580
Do we have any code in there for that?

170
00:09:27.020 --> 00:09:30.082
No [LAUGH], so
now you're starting to panic like, no,

171
00:09:30.082 --> 00:09:32.545
I don't have a solution for
that problem but

172
00:09:32.545 --> 00:09:36.087
I guess I could set up some kind
of time out for that or whatever.

173
00:09:36.087 --> 00:09:39.396
And then, he goes on he says what about
all the other places in our code that we

174
00:09:39.396 --> 00:09:40.140
use callbacks.

175
00:09:40.140 --> 00:09:42.610
Do we have fixes for all of this and
all of those places?

176
00:09:43.880 --> 00:09:45.480
And you get that blank
stare on your face and

177
00:09:45.480 --> 00:09:49.750
you're like, maybe I can slowly back away
and pretend I did not hear him say it.

178
00:09:49.750 --> 00:09:52.540
Maybe I just can pretend
I didn't hear any of this

179
00:09:53.570 --> 00:09:57.770
because all of a sudden what's been
exposed is how deep this rabbit hole goes.

180
00:09:57.770 --> 00:10:02.370
The trust issues that we're involved in
passing callback the inversion of control

181
00:10:02.370 --> 00:10:06.930
trust issues we were trusting that when we
pass a callback to some other utility and

182
00:10:06.930 --> 00:10:08.820
by the way it doesn't have
to be a third party utility,

183
00:10:08.820 --> 00:10:12.330
it could be somewhere else in your same
program even stuff that you wrote.

184
00:10:13.510 --> 00:10:16.820
But we pass it in and we trust that it
won't call too early, not too late,

185
00:10:16.820 --> 00:10:20.430
not too many times not too few times
won't lose out on any of the context it

186
00:10:20.430 --> 00:10:23.370
needs to pass and won't swallow any
errors that may have occurred and

187
00:10:23.370 --> 00:10:24.730
actually the list is goes on and
on and on.

188
00:10:26.000 --> 00:10:28.810
These are all things that you
have been implicitly trusting

189
00:10:28.810 --> 00:10:31.640
every single time you've ever
passed a callback anywhere in

190
00:10:31.640 --> 00:10:33.260
any JavaScript program
you've ever written.

191
00:10:35.010 --> 00:10:37.970
Until this moment, most of you have
probably never asked the question,

192
00:10:37.970 --> 00:10:40.639
what happens if this trust falls apart?

193
00:10:42.050 --> 00:10:46.090
It's interesting to me that developers are
actually pretty good at understanding why

194
00:10:46.090 --> 00:10:49.510
it's important to have that trust but
verify thing with what's passed in.

195
00:10:49.510 --> 00:10:53.250
Like, when you have a function that's
supposed to add two numbers, and

196
00:10:53.250 --> 00:10:56.450
you assert that they are actually numbers
before trying to add them together.

197
00:10:56.450 --> 00:10:59.120
We're pretty good at mindsets like that.

198
00:10:59.120 --> 00:11:02.650
And we've never once implemented
any notion of checking that

199
00:11:02.650 --> 00:11:05.890
our callbacks are behaving
the way that we expect.

200
00:11:05.890 --> 00:11:06.910
And so, we run into this problem.

201
00:11:08.190 --> 00:11:10.050
So this is how I would say it.

202
00:11:10.050 --> 00:11:12.670
If you've ever had a callback in any
JavaScript program that you've ever

203
00:11:12.670 --> 00:11:15.150
written and
you do not have a solution in place for

204
00:11:15.150 --> 00:11:17.620
every single one of these trust issues.

205
00:11:17.620 --> 00:11:20.540
That program currently has a bug even
if you've not been bitten by it yet.

206
00:11:22.250 --> 00:11:26.840
This is a fundamental deficiency in
callback design is that the callback

207
00:11:26.840 --> 00:11:32.140
itself does not have a solution,
there is no solution for

208
00:11:33.430 --> 00:11:37.960
this part of callback hell,
this inversion of control trust issue.

209
00:11:40.380 --> 00:11:44.060
Our particular one was not too many
times but there are quite a few others.

210
00:11:44.060 --> 00:11:48.066
So if you wanna scramble and solve every
one of those you might be able to come up

211
00:11:48.066 --> 00:11:52.260
with an ad hoc solution for every single
one of those impacts that one solution and

212
00:11:52.260 --> 00:11:56.293
then you gonna start thinking I've got
hundreds of callbacks in my program.

213
00:11:56.293 --> 00:11:59.410
We're gonna have to solve this
ad hoc in every single place.

214
00:11:59.410 --> 00:12:01.740
All of a sudden your codebase
just Boolean by three or four x.

215
00:12:03.210 --> 00:12:05.670
It's completely unmaintainable and
impractical at this point.

216
00:12:07.974 --> 00:12:10.230
We're gonna need something better,

217
00:12:10.230 --> 00:12:13.000
that's designed specifically to
solve all these trust issues.

