WEBVTT

1
00:00:04.090 --> 00:00:08.050
&gt;&gt; Kyle: Exercise two calls for you to do
the exact same thing as we did in exercise

2
00:00:08.050 --> 00:00:12.010
one, except now we're gonna use thunks,
okay?

3
00:00:12.010 --> 00:00:17.730
So if you open up the Read Me in the EX2,
we have the exact same set up.

4
00:00:18.860 --> 00:00:20.880
Should look the same to you.

5
00:00:20.880 --> 00:00:23.580
No complexities different.

6
00:00:24.930 --> 00:00:28.700
But it is this line right here,
line 23 in my code.

7
00:00:28.700 --> 00:00:30.680
That's the one I want to
call your attention to.

8
00:00:30.680 --> 00:00:35.150
The getFile function is
your thunk constructor.

9
00:00:36.680 --> 00:00:38.550
GetFile needs to produce a thunk.

10
00:00:40.100 --> 00:00:47.024
The question is, should your thunk be
lazy, or should your thunk be active?

11
00:00:47.024 --> 00:00:49.859
If your thunk is lazy,
are we going to be asking for

12
00:00:49.859 --> 00:00:52.298
files in parallel the way we want to or
not?

13
00:00:52.298 --> 00:00:58.880
If your thunk is active,
will be asking for them in parallel?

14
00:00:58.880 --> 00:01:02.780
Okay, so first task,
figure out how to make the thunk.

15
00:01:04.750 --> 00:01:08.760
And second task, which you may actually
want to do these in reverse order,

16
00:01:08.760 --> 00:01:12.890
is figure out how am I going to use
those things to sequence their outputs?

17
00:01:14.690 --> 00:01:16.400
So I'll give you five.

18
00:01:16.400 --> 00:01:19.056
Let's call it eight minutes to
play around with the stunt.

19
00:01:19.056 --> 00:01:21.500
Remember we're not using
any libraries here,

20
00:01:21.500 --> 00:01:26.260
we're just simply using the notions of
function in closure in a different way.

21
00:01:26.260 --> 00:01:28.230
You're not gonna need any
global variables here.

22
00:01:28.230 --> 00:01:31.310
So if you go down the route you did in
exercise one, you're doing it too hard.

23
00:01:31.310 --> 00:01:34.891
We'll see what you come up with.

24
00:01:34.891 --> 00:01:36.870
&gt;&gt; Speaker 2: Quick question.

25
00:01:36.870 --> 00:01:39.502
They're asking if you go over slide 40.

26
00:01:39.502 --> 00:01:41.054
&gt;&gt; Kyle: I did go over slide 40.

27
00:01:41.054 --> 00:01:43.011
&gt;&gt; Speaker 2: Again,
but did you review it?

28
00:01:43.011 --> 00:01:44.158
&gt;&gt; Kyle: Yes I did review.

29
00:01:44.158 --> 00:01:45.720
&gt;&gt; Speaker 2: Okay sorry.

30
00:01:45.720 --> 00:01:46.840
&gt;&gt; Kyle: I can review it one more time.

31
00:01:49.570 --> 00:01:53.460
The function created in line
seven is hard coded to know

32
00:01:53.460 --> 00:01:56.590
that the addAsync function
is what it's going to call.

33
00:01:56.590 --> 00:01:59.880
And it also knows two of the three
things that it's gonna pass in.

34
00:01:59.880 --> 00:02:02.460
It knows that it's going
to pass in a ten and a 15,

35
00:02:02.460 --> 00:02:05.300
but it doesn't know what
callback it's going to pass in.

36
00:02:06.440 --> 00:02:10.930
So it's hard coded to know addAsync and
ten and 15, and it's waiting for

37
00:02:10.930 --> 00:02:13.290
callback to be parameterized.

38
00:02:13.290 --> 00:02:16.050
We parameterize that call back on line 11.

39
00:02:16.050 --> 00:02:18.730
We passed in a call back to that thunk.

40
00:02:18.730 --> 00:02:22.230
That is what invokes the addAsync
function with ten, 15, and

41
00:02:22.230 --> 00:02:23.450
the callback we passed in.

42
00:02:25.670 --> 00:02:27.140
Line two sets up a timeout,

43
00:02:27.140 --> 00:02:30.530
and after a thousand milliseconds
it calls the callback passed in.

44
00:02:31.550 --> 00:02:34.610
Passing in the values that are at
the addition of ten and 15,

45
00:02:34.610 --> 00:02:36.740
which is the value 25.

46
00:02:36.740 --> 00:02:40.240
Which then comes back to line 11,
the parameter sum has the value of 25.

