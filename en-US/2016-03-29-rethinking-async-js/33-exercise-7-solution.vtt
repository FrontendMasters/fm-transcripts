WEBVTT

1
00:00:00.000 --> 00:00:04.152
[MUSIC]

2
00:00:04.152 --> 00:00:09.149
&gt;&gt; Kyle: Let's talk about how to use a
generator to solve our running example of

3
00:00:09.149 --> 00:00:11.530
parallel files ASAP rendering.

4
00:00:13.230 --> 00:00:16.250
First thing this get file
function is currently

5
00:00:16.250 --> 00:00:20.110
given to you with an ASQ
returning capability.

6
00:00:21.310 --> 00:00:24.510
Exactly the same thing could
happen if you return a Promise.

7
00:00:24.510 --> 00:00:28.780
So there's no reason you have to
do asynquence, sequences, here.

8
00:00:28.780 --> 00:00:32.980
Because the runner that I've provided
you is capable of understanding Promises

9
00:00:32.980 --> 00:00:35.220
equally well with sequences.

10
00:00:35.220 --> 00:00:38.100
I just started out there because
that's the place that we were

11
00:00:38.100 --> 00:00:39.620
at the end of the other exercise.

12
00:00:39.620 --> 00:00:42.450
But there is no requirement
that this is a sequence only.

13
00:00:42.450 --> 00:00:48.720
[COUGH] Okay, so
we're gonna do ASQ().runner.

14
00:00:48.720 --> 00:00:52.050
Remember I gotta put
this parentheses on here.

15
00:00:52.050 --> 00:00:55.180
You have to start a sequence cuz this
is a method of a sequence rather

16
00:00:55.180 --> 00:00:56.150
than a static function.

17
00:00:58.480 --> 00:01:03.070
And I'm gonna pass it
&gt;&gt; Kyle: A generator which

18
00:01:03.070 --> 00:01:05.902
I'll call main for now.

19
00:01:10.833 --> 00:01:12.700
&gt;&gt; Kyle: That's my basic set up.

20
00:01:13.970 --> 00:01:18.300
If you ended up after this class never
using asynquence again and you went and

21
00:01:18.300 --> 00:01:21.010
you used the co utility
guess what you're gonna do.

22
00:01:21.010 --> 00:01:25.434
You gonna replace that part with co and
if you ended up using the Q library

23
00:01:25.434 --> 00:01:28.919
you're gonna replace that
part with Q.spawn, okay?

24
00:01:28.919 --> 00:01:33.220
So every one of them has
the same utility on it.

25
00:01:33.220 --> 00:01:36.904
All the stuff that I'm teaching you
here is not asynquence specific.

26
00:01:38.780 --> 00:01:45.463
All right, now inside of our utility,
we need to call the getFile function and

27
00:01:45.463 --> 00:01:49.850
when it responds to us then
we need to print it out.

28
00:01:49.850 --> 00:01:54.528
So we could say, text1 = yield

29
00:01:54.528 --> 00:01:59.037
getFile("file1"); and

30
00:01:59.037 --> 00:02:03.206
then output(text1);.

31
00:02:03.206 --> 00:02:07.878
And then we could say text2 = yield

32
00:02:07.878 --> 00:02:15.058
getFile("file2"); and output(text2);.

33
00:02:15.058 --> 00:02:22.795
And then text3 = yield
getFile("file3"); and

34
00:02:22.795 --> 00:02:26.327
output(text3), and

35
00:02:26.327 --> 00:02:32.393
then output("Complete!"), okay?

36
00:02:32.393 --> 00:02:33.450
We could do that.

37
00:02:35.305 --> 00:02:38.450
Does everybody, before we answer
whether or not this is fully correct or

38
00:02:38.450 --> 00:02:40.570
the right way,
does everybody see how that would work?

39
00:02:41.710 --> 00:02:42.750
We're going to wait for

40
00:02:42.750 --> 00:02:45.361
text1 to get assigned until
after this request finishes.

41
00:02:45.361 --> 00:02:49.000
So that's what the yield
keyword is giving us here.

42
00:02:49.000 --> 00:02:51.700
We're yielding on this Ajax call.

43
00:02:52.840 --> 00:02:56.955
This is a Promise, so we're yielding
out the Promise the runner in

44
00:02:56.955 --> 00:02:59.870
asynquence knows what to do with
that Promise of that sequence and

45
00:02:59.870 --> 00:03:03.510
it waits resumes and
gives us the data back, okay?

46
00:03:03.510 --> 00:03:05.967
But now,
does anybody spot a problem with this?

47
00:03:05.967 --> 00:03:08.970
&gt;&gt; Speaker 2: It's not a request if it-
&gt;&gt; Kyle: Exactly,

48
00:03:08.970 --> 00:03:12.880
see we're not even calling this
one until after this one finishes

49
00:03:12.880 --> 00:03:15.179
have violates our in
parallel principle right.

50
00:03:16.380 --> 00:03:21.230
So, if you want to do sequentiality
in generators, it's pretty easy.

51
00:03:21.230 --> 00:03:24.940
You just put a function call after
a yield, and it's going to be sequential.

52
00:03:24.940 --> 00:03:28.940
But if you wanna do things in parallel,
you have to be ever so

53
00:03:28.940 --> 00:03:29.960
slightly more clever.

54
00:03:32.410 --> 00:03:33.320
So here's what we're gonna do.

55
00:03:34.840 --> 00:03:37.723
I'm going to take that getFile call and
move it up here.

56
00:03:43.512 --> 00:03:45.910
&gt;&gt; Kyle: And I'm gonna take that call.

57
00:03:47.290 --> 00:03:48.490
And I'm going to move it here.

58
00:03:49.890 --> 00:03:52.869
And you'll notice that I'm not putting
the yield keyword in those calls,

59
00:03:54.920 --> 00:03:55.880
that's on purpose.

60
00:04:00.470 --> 00:04:02.910
So now, if I requested all
three of them in parallel,

61
00:04:02.910 --> 00:04:07.325
does everybody see that, exactly the same
as it's been all day long, okay?

62
00:04:07.325 --> 00:04:11.163
Well now that I've got those getFile
calls, I don't need those anymore.

63
00:04:11.163 --> 00:04:13.395
So what am I gonna replace them with?

64
00:04:13.395 --> 00:04:18.654
I'm gonna replace them with the Promise,
all right?

65
00:04:25.086 --> 00:04:28.999
&gt;&gt; Kyle: So now we have request in
parallel sequencing their output.

66
00:04:35.562 --> 00:04:36.920
&gt;&gt; Kyle: Does everybody
see how I did that?

67
00:04:39.110 --> 00:04:40.099
Cuz the promises, what do they do?

68
00:04:40.099 --> 00:04:43.800
What is their most fundamental thing,
even thumps, what do they do?

69
00:04:45.530 --> 00:04:46.840
They eliminate the time state.

70
00:04:48.120 --> 00:04:50.870
So it doesn't matter when when these
are going to relatively finish,

71
00:04:50.870 --> 00:04:54.650
we're going to sequence their responses
based upon how we write the yield code.

72
00:04:56.570 --> 00:04:58.584
&gt;&gt; Speaker 3: Instead of
assigning the yield p1 to text1,

73
00:04:58.584 --> 00:05:01.840
could you just say output-
&gt;&gt; Kyle: I'm about to get there.

74
00:05:01.840 --> 00:05:05.830
I'm just asking to make sure everybody
understands this part, okay?

75
00:05:05.830 --> 00:05:07.790
Is there anybody that having
trouble understanding this part?

76
00:05:10.300 --> 00:05:15.410
All right, so now exactly as you just
said, I'm assigning this to a variable and

77
00:05:15.410 --> 00:05:17.230
then immediately printing the variable.

78
00:05:17.230 --> 00:05:17.909
Why do I need the variable.

79
00:05:17.909 --> 00:05:24.521
Why not just take this yield p1 and
put it right there and take that line out.

80
00:05:24.521 --> 00:05:31.734
And take this yield p2 and put it
right there and take those lines out.

81
00:05:31.734 --> 00:05:38.596
And take this yield p3 and put it
right there and take those lines out.

82
00:05:42.975 --> 00:05:43.860
&gt;&gt; Kyle: How cool is that?

83
00:05:45.470 --> 00:05:50.810
Compare that to what we've progressively
been building from where we started

84
00:05:50.810 --> 00:05:54.650
the beginning of this workshop with all
that ridiculous callback nightmare.

85
00:05:54.650 --> 00:06:00.250
Then thunks in Promises,
in map and reduce, in asynquence.

86
00:06:00.250 --> 00:06:02.240
We got better and better and better.

87
00:06:02.240 --> 00:06:05.290
But how many of you feel like we've
arrived at something a whole lot

88
00:06:05.290 --> 00:06:08.340
better than where we started, right?

89
00:06:08.340 --> 00:06:10.620
No new functionality whatsoever.

90
00:06:11.990 --> 00:06:13.860
Just an entirely different and

91
00:06:13.860 --> 00:06:18.680
better way of expressing the same code,
why does that matter?

92
00:06:18.680 --> 00:06:20.371
Because our code is
a form of communication.

93
00:06:20.371 --> 00:06:23.655
We need to communicate not only
with our other team members but

94
00:06:23.655 --> 00:06:26.570
with our future selves of
what the code supposed to do.

95
00:06:28.090 --> 00:06:29.290
This is more expressive.

96
00:06:29.290 --> 00:06:32.660
It's more understandable,
it's more readable, it's more learnable.

97
00:06:35.480 --> 00:06:39.021
Given the ability to write code like
that I cannot understand how I spent so

98
00:06:39.021 --> 00:06:40.974
many years writing all that other crap.

99
00:06:43.874 --> 00:06:45.277
&gt;&gt; Kyle: I wish I could go back and

100
00:06:45.277 --> 00:06:48.300
fix all those other bad
pieces of code that I wrote.

101
00:06:51.050 --> 00:06:52.500
Any questions about exercise seven?

102
00:06:56.470 --> 00:06:58.520
There's no other magic here.

103
00:06:59.870 --> 00:07:03.910
I'm going to challenge you to go back and

104
00:07:03.910 --> 00:07:08.230
reread through the slides,
and retry the exercises.

105
00:07:08.230 --> 00:07:10.430
But it really is as simple
as it looks right there.

106
00:07:12.470 --> 00:07:16.500
It really is as simple as asking myself,
do I need something to happen in parallel?

107
00:07:16.500 --> 00:07:19.830
If so, store those things into
intermediate Promises and

108
00:07:19.830 --> 00:07:21.810
then sequence their responses.

109
00:07:21.810 --> 00:07:24.910
Do I need to have them
happen sequentially?

110
00:07:24.910 --> 00:07:27.850
Make sure they show up after
yield keywords, that's it.

111
00:07:29.400 --> 00:07:34.020
And if you need higher levels
of abstraction like some

112
00:07:34.020 --> 00:07:38.430
of those abstractions we talked about with
Promise.at all or other things like that.

113
00:07:38.430 --> 00:07:42.270
Guess what you have access to all
that stuff these are just Promises.

114
00:07:42.270 --> 00:07:45.160
So you can use promise.all and
promise.raise in any of

115
00:07:45.160 --> 00:07:49.730
those other abstractions as necessary
because they all just produce promises.

116
00:07:49.730 --> 00:07:51.640
So you could do a yield promised.all.

117
00:07:52.830 --> 00:07:55.980
If you needed to wait on all three to
finish before moving on to the next step,

118
00:07:55.980 --> 00:07:57.250
just yield promised.all.

119
00:07:58.670 --> 00:08:01.790
If you need to only listen for
one or three to finish and

120
00:08:01.790 --> 00:08:04.430
you don't care which one happens first,
yield promised.raise.

121
00:08:05.560 --> 00:08:09.030
Or any of the other dozens of
abstractions that are out there.

122
00:08:09.030 --> 00:08:11.963
That's another benefit of weaving
Promises into the generator patterns,

123
00:08:11.963 --> 00:08:14.265
that we have access to all those
obstructions if we need it.

124
00:08:16.502 --> 00:08:19.765
&gt;&gt; Kyle: Any level of complexity that
you have in asynchronous programming

125
00:08:19.765 --> 00:08:21.171
can be woven into the style.

126
00:08:24.380 --> 00:08:27.169
&gt;&gt; Kyle: But you're not going to get
there unless you practice this, so

127
00:08:27.169 --> 00:08:30.429
I'm going to challenge you don't let
this be the last time you look at it,

128
00:08:30.429 --> 00:08:34.680
you walk away and you like, that's cool
but I'm still gonna do all the old stuff.

129
00:08:34.680 --> 00:08:36.520
It's time to up our game.

130
00:08:36.520 --> 00:08:41.460
It's time to practice and try to get
our brains wrap around this new style.

131
00:08:41.460 --> 00:08:44.630
I promise you, your team members and
your future self are gonna

132
00:08:44.630 --> 00:08:48.400
thank you the more effort you put in
making your code more reasonable.

133
00:08:52.510 --> 00:08:55.080
Okay, any more questions about
generators and Promises.

134
00:08:56.990 --> 00:08:57.720
How are we feeling so

135
00:08:57.720 --> 00:09:00.140
far feeling like your brains
are starting get a little bit mush.

136
00:09:01.670 --> 00:09:05.190
Okay, see a few in both directions.

137
00:09:05.190 --> 00:09:07.955
Yeah you might need a little bit
more caffeine that's cool, got it.

138
00:09:07.955 --> 00:09:10.550
We're gonna take a break.

139
00:09:10.550 --> 00:09:14.535
So go get yourself a recharge of your
caffeine your monster drink or whatever.

140
00:09:14.535 --> 00:09:17.370
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle: Because when we come back

141
00:09:18.500 --> 00:09:21.810
we're going to take the red pill and
go even further down the rabbit hole.

