WEBVTT

1
00:00:00.180 --> 00:00:03.719
[MUSIC]

2
00:00:03.719 --> 00:00:09.530
&gt;&gt; Kyle: Time to move in to some
really brain bending stuff.

3
00:00:09.530 --> 00:00:15.419
If you thought the stuff that
we went over was brain bending,

4
00:00:15.419 --> 00:00:17.967
buckle up your seat belt.

5
00:00:17.967 --> 00:00:18.911
Concurrency.

6
00:00:18.911 --> 00:00:21.194
That's what we've been talking
about this entire workshop.

7
00:00:21.194 --> 00:00:25.410
What was the poor man's definition for
what I meant by concurrency?

8
00:00:26.690 --> 00:00:28.910
Basically, managing the flow control.

9
00:00:28.910 --> 00:00:31.190
Managing all these things
that are happening and

10
00:00:31.190 --> 00:00:33.280
responding to things in the proper order.

11
00:00:36.370 --> 00:00:40.400
We know that Promises work when there's
a single request and a single response.

12
00:00:41.840 --> 00:00:45.780
What happens when the source of
our information that's coming,

13
00:00:45.780 --> 00:00:50.235
is actually a repeated stream
of information that's coming?

14
00:00:50.235 --> 00:00:53.995
Can we wire Promises into an event stream,
for example?

15
00:00:53.995 --> 00:00:57.895
Because frankly speaking,
if we really look at it, most of

16
00:00:57.895 --> 00:01:02.995
the asynchronicity that's happening in
our programs is actually event oriented.

17
00:01:02.995 --> 00:01:05.815
All of our UI is almost
entirely event oriented.

18
00:01:05.815 --> 00:01:07.295
It's events coming from the server.

19
00:01:07.295 --> 00:01:08.555
It's events coming from the user.

20
00:01:08.555 --> 00:01:09.539
We have events everywhere.

21
00:01:10.910 --> 00:01:15.220
Soon as you start trying to plug Promises
in you might start to see some issues.

22
00:01:16.980 --> 00:01:18.300
Let me try to illustrate that for
a moment.

23
00:01:18.300 --> 00:01:19.980
Let's say that I had
a button on my page and

24
00:01:19.980 --> 00:01:23.960
I wanted to represent the click of
that button by way of a promise.

25
00:01:25.040 --> 00:01:28.014
I already know I can construct
a promise like I'm doing on line 1.

26
00:01:29.230 --> 00:01:33.010
And I can set up my click
handler inside of it.

27
00:01:33.010 --> 00:01:35.170
I have button dot click.

28
00:01:35.170 --> 00:01:39.110
And I'm doing some extra logic just to
illustrate that there's extra steps that

29
00:01:39.110 --> 00:01:42.020
we might use,
I'm going to test its class name and if it

30
00:01:42.020 --> 00:01:46.100
matches that regular expression FUBAR
then I'm going to resolve the Promise.

31
00:01:46.100 --> 00:01:47.390
Otherwise I'm going to reject the Promise.

32
00:01:49.020 --> 00:01:51.490
And then down somewhere
else in my program,

33
00:01:51.490 --> 00:01:53.820
line 13 represents a different
place in my program,

34
00:01:53.820 --> 00:01:58.480
I'm going to respond to that Promise by
printing out whatever was clicked on.

35
00:01:58.480 --> 00:02:01.170
Now the spirit of this is that
every time I click on the button,

36
00:02:01.170 --> 00:02:05.970
I'm going to get either that I printed
it out or if I clicked a button that,

37
00:02:05.970 --> 00:02:08.680
I'm going to print out a className
if it matched FUBAR but

38
00:02:08.680 --> 00:02:10.990
if I clicked a button that didn't
have that, nothing would happen.

39
00:02:10.990 --> 00:02:12.670
That's the spirit of it.

40
00:02:12.670 --> 00:02:14.330
Does anybody spot
a problem with this code?

41
00:02:16.500 --> 00:02:17.180
What?

42
00:02:17.180 --> 00:02:18.620
&gt;&gt; Speaker 2: It's only gonna fire once.

43
00:02:18.620 --> 00:02:20.310
&gt;&gt; Kyle: Promises can
only be resolved once.

44
00:02:22.610 --> 00:02:24.880
The very first time you click a button,
whichever button it is,

45
00:02:24.880 --> 00:02:27.290
it's going to resolve or
reject the Promise.

46
00:02:27.290 --> 00:02:30.480
And every time else when you click
the button, nothing's gonna happen.

47
00:02:30.480 --> 00:02:34.570
Uh-oh, what do we do?

48
00:02:34.570 --> 00:02:38.840
How do we use Promises, we've built
ourselves up to Promises and generators.

49
00:02:38.840 --> 00:02:41.600
We've given ourselves several layers
of higher order abstractions.

50
00:02:42.820 --> 00:02:46.310
But now we're faced with an extremely
common thing that's gonna happen in our

51
00:02:46.310 --> 00:02:50.490
programs that is responding to events
repeated things that are happening and

52
00:02:50.490 --> 00:02:52.290
all of sudden Promises seem to fall apart.

53
00:02:52.290 --> 00:02:54.480
What do we do?

54
00:02:54.480 --> 00:03:00.300
Well, one thing you might do is to invert.

55
00:03:01.650 --> 00:03:03.270
You might say instead of
creating my Promise and

56
00:03:03.270 --> 00:03:05.310
then my button handler inside
do it the other way around.

57
00:03:05.310 --> 00:03:09.980
Make my button handler, click handler and
then create a Promise inside.

58
00:03:11.810 --> 00:03:14.290
What's gonna happen here is I'm
gonna get a whole new Promise for

59
00:03:14.290 --> 00:03:15.500
each event that's fired.

60
00:03:17.410 --> 00:03:18.090
That sounds great.

61
00:03:19.570 --> 00:03:20.930
Except, why?

62
00:03:22.790 --> 00:03:24.690
Because once the vents already been fired,

63
00:03:24.690 --> 00:03:26.300
then what's the purpose
of the Promise here.

64
00:03:27.450 --> 00:03:28.090
You see what I'm doing?

65
00:03:28.090 --> 00:03:31.919
I'm immediately resolving a Promise ,and
then immediately calling a dot then on it.

66
00:03:31.919 --> 00:03:34.840
How much sense does that make?

67
00:03:34.840 --> 00:03:38.515
There's something even deeper though,
because what we've really done when we

68
00:03:38.515 --> 00:03:41.541
inverted, we made that little simple
trick where I inverted it and

69
00:03:41.541 --> 00:03:44.208
I did one inside the other
instead of the other way around.

70
00:03:44.208 --> 00:03:47.916
Now we have conflated our
separation of concerns.

71
00:03:47.916 --> 00:03:52.198
In the previous code,
subtly I was able to set up

72
00:03:52.198 --> 00:03:57.030
my source in one location and
have my response to it.

73
00:03:57.030 --> 00:03:58.211
I was able to subscribe and

74
00:03:58.211 --> 00:04:01.020
I have my source to it in a different
location of my application.

75
00:04:01.020 --> 00:04:05.740
Those are two separate capabilities, but
when I invert, guess what's happened?

76
00:04:05.740 --> 00:04:09.740
I have to set up the source and
the subscription all in the same spot.

77
00:04:11.490 --> 00:04:13.840
I have conflated those two
responsibilities together.

78
00:04:13.840 --> 00:04:17.200
And you gonna have to jump through a whole
bunch of hoops to get those Promises

79
00:04:17.200 --> 00:04:18.800
out of your click handler.

80
00:04:18.800 --> 00:04:21.940
Every time he fired if you need those
Promises to respond in other places

81
00:04:21.940 --> 00:04:25.820
you're gonna have to save them off
into some shared closure variable or

82
00:04:25.820 --> 00:04:26.730
some ridiculous thing.

83
00:04:26.730 --> 00:04:29.950
And all of a sudden you're going to be
way back, right back at the beginning all

84
00:04:29.950 --> 00:04:36.570
the same problems of weirdness and
hard to understand code.

85
00:04:38.520 --> 00:04:42.547
Right off the bat we see that
Promises at least by themselves,

86
00:04:42.547 --> 00:04:46.115
are not going to model well
in an event oriented world.

87
00:04:46.115 --> 00:04:48.800
We're going to need something better.

88
00:04:50.850 --> 00:04:53.990
Now you could observe that

89
00:04:53.990 --> 00:04:58.620
actually that wasn't fundamentally
an asynchronous set of steps anyway.

90
00:04:59.630 --> 00:05:03.480
And we could fall back to things that are
a little more familiar to us like a list

91
00:05:03.480 --> 00:05:08.150
context where I put my event into
an array as I'm doing on 3 three and

92
00:05:08.150 --> 00:05:11.060
then I call maps and reduces and filters.

93
00:05:11.060 --> 00:05:13.250
You might go back to a synchronous
programming mindset and

94
00:05:13.250 --> 00:05:15.510
say, who cares about the promise.

95
00:05:15.510 --> 00:05:19.510
But we've still fundamentally
got an inverted system here,

96
00:05:19.510 --> 00:05:23.370
where the response to the event has to be
conflated with the setup for the event.

97
00:05:23.370 --> 00:05:26.654
We have producer and
consumer in the same spot.

98
00:05:26.654 --> 00:05:28.170
And that's not what we want.

99
00:05:28.170 --> 00:05:31.370
We need something to bridge the gap so
that we can separate those concerns.

