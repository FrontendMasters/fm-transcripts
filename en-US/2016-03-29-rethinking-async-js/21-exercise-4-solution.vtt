WEBVTT

1
00:00:00.000 --> 00:00:03.756
[MUSIC]

2
00:00:03.756 --> 00:00:07.024
&gt;&gt; Kyle: If we have something that
could be an arbitrary length,

3
00:00:07.024 --> 00:00:11.840
our go to tool as a JavaScript
programmer is often a list, an array.

4
00:00:11.840 --> 00:00:16.800
If I were to populate a list of
the URLs that I cared about handling

5
00:00:16.800 --> 00:00:22.620
into a an array,
I then immediately have access to

6
00:00:22.620 --> 00:00:28.140
those functional programming techniques
like map and reduce to transform,

7
00:00:28.140 --> 00:00:31.120
compose, exclude things
like this on this list.

8
00:00:32.980 --> 00:00:39.180
Let's try to change this list
of URLs to something else.

9
00:00:39.180 --> 00:00:42.230
Maybe we should get them into
being a list of promises.

10
00:00:43.730 --> 00:00:46.390
How do we transform?

11
00:00:46.390 --> 00:00:47.500
We call .map.

12
00:00:47.500 --> 00:00:51.380
Map is the utility that will
transform a list one to one.

13
00:00:51.380 --> 00:00:54.678
And we're going to need
a predicate function,

14
00:00:54.678 --> 00:00:58.726
which takes in some value and
gives us a new value back out.

15
00:00:58.726 --> 00:01:01.678
Anybody think of a function like that?

16
00:01:01.678 --> 00:01:06.340
How about the get file function?

17
00:01:06.340 --> 00:01:08.310
See how it takes a single value in and

18
00:01:08.310 --> 00:01:11.160
returns as a single value
out that's been transformed?

19
00:01:11.160 --> 00:01:13.760
In this case a promise
wrapped around the value.

20
00:01:13.760 --> 00:01:18.150
Great, and we also know that it's going to
go ahead make that AJAX call right away.

21
00:01:18.150 --> 00:01:20.080
Not only does the transformation, but

22
00:01:20.080 --> 00:01:25.550
it also takes care of making all three
of those requests in parallel for us.

23
00:01:25.550 --> 00:01:28.320
We simply pass the getFile
as our predicate to map.

24
00:01:29.480 --> 00:01:30.890
Excellent.
We've done the first step,

25
00:01:30.890 --> 00:01:32.320
which is to call all these things.

26
00:01:32.320 --> 00:01:34.380
And now we have a list of promises.

27
00:01:36.150 --> 00:01:39.590
None of them have any outputs,
sequenced in with them,

28
00:01:39.590 --> 00:01:41.780
and they're not sequenced together.

29
00:01:43.010 --> 00:01:46.990
Well we talked about a promise chain
is just a way to take one promise and

30
00:01:46.990 --> 00:01:52.720
return it from the resolved
handler of a previous promise.

31
00:01:52.720 --> 00:01:57.950
That's a method of composing promises,
is to chain them together.

32
00:01:58.990 --> 00:02:02.710
Well composition is handled by our
good friend the reduce function.

33
00:02:03.950 --> 00:02:09.250
If I call reduce, reduce takes
two parameters, two arguments.

34
00:02:09.250 --> 00:02:13.320
The first one is the predicate function,
so

35
00:02:13.320 --> 00:02:15.950
we're gonna have a function here called,

36
00:02:15.950 --> 00:02:20.500
let's just call it combine or maybe
we'll call it chain that sounds better.

37
00:02:20.500 --> 00:02:23.670
We'll call it chain actually no,
I'm gonna call it combine.

38
00:02:23.670 --> 00:02:25.170
Here I am being super indecisive and

39
00:02:25.170 --> 00:02:26.940
I'll tell you why I decided
not to call it chain.

40
00:02:28.430 --> 00:02:31.928
And then we are going to need an initial
value that's the second argument that gets

41
00:02:31.928 --> 00:02:32.872
passed or reduce.

42
00:02:34.520 --> 00:02:37.466
What's a good initial value for
a promise chain?

43
00:02:37.466 --> 00:02:42.240
How about an already resolved promise.

44
00:02:44.200 --> 00:02:48.180
You could manually do that,
by making a Promise here,

45
00:02:50.190 --> 00:02:55.720
that receives a resolve, and
actually calls the resolve right away.

46
00:02:57.360 --> 00:02:59.030
That's an immediately resolved Promise.

47
00:03:00.250 --> 00:03:01.060
Doesn't wait on anything.

48
00:03:02.320 --> 00:03:03.710
Turns out there's a shorthand way for

49
00:03:03.710 --> 00:03:07.810
that, some of you might have looked
that up or seen that in documentation.

50
00:03:07.810 --> 00:03:12.321
There's a shorthand built into the native
Promise API called Promise.resolve.

51
00:03:12.321 --> 00:03:15.710
Promise.resolve creates
a resolved Promise and

52
00:03:15.710 --> 00:03:19.460
if you pass anything into it it
resolves the Promise with that value.

53
00:03:19.460 --> 00:03:22.150
We don't care about any value here,
we just care about the fact that,

54
00:03:22.150 --> 00:03:25.470
that's a good initial value
to start chaining off of, so

55
00:03:25.470 --> 00:03:27.800
that's our initial value
as a resolved Promise.

56
00:03:29.500 --> 00:03:33.370
Now, combine needs to
take two arguments and

57
00:03:33.370 --> 00:03:37.950
what we call those of course, I think
it's better to change the names of these

58
00:03:37.950 --> 00:03:41.500
parameters to fit the context of what
you're doing so that your code makes

59
00:03:41.500 --> 00:03:45.770
more sense rather than always using
accumulator and current or something.

60
00:03:47.960 --> 00:03:51.700
What would the accumulator be
called most appropriately here?

61
00:03:52.800 --> 00:03:53.620
I would call it chain.

62
00:03:55.000 --> 00:03:57.250
That's why I didn't call
the function chain cuz I realized,

63
00:03:57.250 --> 00:03:59.760
I'm gonna call my accumulator chain.

64
00:03:59.760 --> 00:04:02.240
The very first time this
predicate is called,

65
00:04:02.240 --> 00:04:05.850
the chain is just gonna be that already
resolved initial value Promise.

66
00:04:06.930 --> 00:04:09.250
But it's going to continue
to be composed more and

67
00:04:09.250 --> 00:04:10.890
more of that chain as we go along.

68
00:04:10.890 --> 00:04:15.020
I'm going to call my accumulator chain and
I'm going to call my current value.

69
00:04:15.020 --> 00:04:17.540
PR for
it's the Promise that I'm dealing with.

70
00:04:18.830 --> 00:04:23.310
There's my two together, my chain and
my PR, now how am I going to compose them?

71
00:04:23.310 --> 00:04:26.980
If we think back to what we did in
exercise three, the way you compose one

72
00:04:26.980 --> 00:04:30.760
Promise to another was to return
the second one from the first.

73
00:04:30.760 --> 00:04:35.320
My chain needs to have a .then

74
00:04:40.000 --> 00:04:46.040
&gt;&gt; Kyle: That returns the pr.

75
00:04:46.040 --> 00:04:50.980
And that new operation has
produced a new chained Promise.

76
00:04:50.980 --> 00:04:52.839
I need to return that from my predicate.

77
00:04:56.851 --> 00:04:58.916
&gt;&gt; Kyle: Now that code will chain all for

78
00:04:58.916 --> 00:05:03.535
of the Promises together regardless
of how many Promises there are.

79
00:05:03.535 --> 00:05:06.180
It will create a big
old chain of Promises.

80
00:05:06.180 --> 00:05:07.630
Here's what that chain would look like.

81
00:05:08.790 --> 00:05:14.877
It would look like p1.then function

82
00:05:14.877 --> 00:05:19.631
return p2 .then function,

83
00:05:19.631 --> 00:05:23.063
return p3 and so on.

84
00:05:23.063 --> 00:05:25.664
We're part of the way there.

85
00:05:25.664 --> 00:05:27.072
But what are we missing?

86
00:05:27.072 --> 00:05:30.520
We're not sequencing in
the outputs into the chain.

87
00:05:31.610 --> 00:05:34.190
Where are those outputs going to go?

88
00:05:34.190 --> 00:05:36.604
They're going to go right here.

89
00:05:43.290 --> 00:05:47.735
&gt;&gt; Kyle: Now we're going to have a,
if I were to write this out.

90
00:05:47.735 --> 00:05:54.764
We have a Promise.resolve,
is our initial value,

91
00:05:54.764 --> 00:05:58.770
.then function return p1.

92
00:05:58.770 --> 00:06:03.617
And you notice I have
the immediate .then output on it.

93
00:06:17.214 --> 00:06:21.710
&gt;&gt; Kyle: Everybody see how I'm unrolling
that, what we're doing in the reduce?

94
00:06:21.710 --> 00:06:24.781
That's the visual unroll of what's
happening in our reduce, so

95
00:06:24.781 --> 00:06:25.900
it looks pretty good.

96
00:06:28.700 --> 00:06:32.360
One thing that's missing is we don't
have our complete statement on the end.

97
00:06:32.360 --> 00:06:34.429
What is the end result of our reduction?

98
00:06:34.429 --> 00:06:36.140
&gt;&gt; Speaker 2: A single value.

99
00:06:36.140 --> 00:06:37.719
&gt;&gt; Kyle: A single value but what is it?

100
00:06:40.280 --> 00:06:41.744
&gt;&gt; Kyle: It's our promise chain.

101
00:06:41.744 --> 00:06:43.830
What can we do?

102
00:06:43.830 --> 00:06:48.495
Just simply put another .then
on the end of our Promise, and

103
00:06:48.495 --> 00:06:50.795
output to complete message.

104
00:06:55.343 --> 00:06:57.085
&gt;&gt; Kyle: Yes?

105
00:06:57.085 --> 00:07:00.408
&gt;&gt; Speaker 2: The order for our two
events, the returning the Promise and

106
00:07:00.408 --> 00:07:01.482
doing the output.

107
00:07:01.482 --> 00:07:02.142
&gt;&gt; Kyle: Uh-huh.

108
00:07:02.142 --> 00:07:05.062
&gt;&gt; Speaker 2: Could be in the opposite
order like it wasn't our previous

109
00:07:05.062 --> 00:07:05.664
exercise?

110
00:07:05.664 --> 00:07:06.621
&gt;&gt; Kyle: No.

111
00:07:06.621 --> 00:07:10.043
Because if we did it in the previous
order, here's what that would do.

112
00:07:26.767 --> 00:07:29.180
&gt;&gt; Kyle: Do you spot the problem?

113
00:07:32.110 --> 00:07:33.050
What are we out putting here?

114
00:07:35.470 --> 00:07:37.904
An empty value from our initial Promise.

115
00:07:37.904 --> 00:07:39.661
What are we outputting here?

116
00:07:39.661 --> 00:07:40.762
p1.

117
00:07:40.762 --> 00:07:41.943
What are we out putting here?

118
00:07:41.943 --> 00:07:43.170
p2.

119
00:07:43.170 --> 00:07:44.567
Who's outputting p3?

120
00:07:44.567 --> 00:07:49.311
The ordering is absolutely necessary.

121
00:08:01.005 --> 00:08:02.810
&gt;&gt; Kyle: All right.

122
00:08:02.810 --> 00:08:05.930
That's a utility that we could write.

123
00:08:05.930 --> 00:08:08.820
You wouldn't want to write that code
over and over again, your maps and

124
00:08:08.820 --> 00:08:09.740
your reduces.

125
00:08:09.740 --> 00:08:13.687
But it's a utility we could wrap that up
into a utility where we pass it an array

126
00:08:13.687 --> 00:08:17.151
of values and we tell it to sequence
all these responses together and

127
00:08:17.151 --> 00:08:20.339
then we could reuse that utility
all throughout our program.

128
00:08:25.440 --> 00:08:29.502
&gt;&gt; Kyle: The value of being able to
understand our little helper friends like

129
00:08:29.502 --> 00:08:33.851
map and reduce and developing
an instinct for asking questions like,

130
00:08:33.851 --> 00:08:37.345
wait I'm fundamentally doing
something repetitively,

131
00:08:37.345 --> 00:08:41.788
why not just put that into a list context
and let the tools repeat it for me?

132
00:08:41.788 --> 00:08:43.983
Sometimes that's a for loop, but

133
00:08:43.983 --> 00:08:48.690
sometimes an even higher order pattern
like a map reduce will help us out.

134
00:08:51.962 --> 00:08:54.050
&gt;&gt; Kyle: Any questions
about exercise four?

135
00:08:56.785 --> 00:09:01.550
&gt;&gt; Speaker 3: One thing they're asking
if you go down to all the Promise.

136
00:09:01.550 --> 00:09:05.039
What would you name all of
those anonymous functions?

137
00:09:05.039 --> 00:09:08.665
&gt;&gt; Kyle: [LAUGH] Yeah well
in our silly example here,

138
00:09:08.665 --> 00:09:14.717
we don't really have a lot of context
to give us good naming for things.

139
00:09:14.717 --> 00:09:21.190
If I were gonna name this anonymous
function I would say, chainP1, chainP2,

140
00:09:21.190 --> 00:09:27.666
chainP3 because I would be describing
exactly what that function does no more or

141
00:09:27.666 --> 00:09:33.520
less, and what it does is to chainP2,
P1, P2 and P3 into the chain.

142
00:09:33.520 --> 00:09:36.520
Up here, if I wanted

143
00:09:36.520 --> 00:09:41.240
to name that anonymous function
I just call it chain p, chainPr.

144
00:09:44.490 --> 00:09:48.655
My instinct is to always try to find some
description for what the thing is doing,

145
00:09:48.655 --> 00:09:53.144
even if it's a very generic description,
that still better than the word anonymous.

146
00:10:04.536 --> 00:10:06.664
&gt;&gt; Kyle: Any other questions
about the exercise?

147
00:10:06.664 --> 00:10:08.986
Yes.

148
00:10:08.986 --> 00:10:12.096
&gt;&gt; Speaker 4: Do we get more
performance [INAUDIBLE] or

149
00:10:12.096 --> 00:10:16.149
any performance doing this map and
then reduce of or

150
00:10:16.149 --> 00:10:21.428
instead having the one we did in
the previous exercises where we and

151
00:10:21.428 --> 00:10:25.592
to give the,
you the Promises separate [INAUDIBLE].

152
00:10:25.592 --> 00:10:29.259
&gt;&gt; Kyle: And so the question is, is there
a performance difference not really.

153
00:10:29.259 --> 00:10:33.558
There's no real performance difference
this is the primary thing here is

154
00:10:33.558 --> 00:10:34.890
functionality.

155
00:10:34.890 --> 00:10:37.740
This is a mechanism by which

156
00:10:37.740 --> 00:10:41.790
we can have an arbitrarily long
list of URLs to weave together.

157
00:10:41.790 --> 00:10:46.070
Whereas in the previous example,
it's fixed at three.

158
00:10:46.070 --> 00:10:47.330
Because of the way that we wrote it.

159
00:10:47.330 --> 00:10:48.860
It's more functionality than performance.

160
00:10:51.780 --> 00:10:56.038
&gt;&gt; Kyle: Yeah, just as a general reminder,
if you're having problems with something

161
00:10:56.038 --> 00:10:59.842
that I've typed, it is entirely
possible that sometimes I flub up and

162
00:10:59.842 --> 00:11:01.790
I miss type something or whatever.

163
00:11:01.790 --> 00:11:03.460
But the exercise files,

164
00:11:03.460 --> 00:11:07.720
the exercise solution files have been
regularly tested they should work.

165
00:11:07.720 --> 00:11:10.600
Check yourself against what
you've got in the exercise file.

166
00:11:10.600 --> 00:11:13.040
That's usually a good place to
try to ferret out where there's,

167
00:11:13.040 --> 00:11:13.680
there might be an issue.

