WEBVTT

1
00:00:00.000 --> 00:00:03.889
[MUSIC]

2
00:00:03.889 --> 00:00:06.240
&gt;&gt; Kyle Simpson: So
it really is an uninversion of control.

3
00:00:06.240 --> 00:00:07.840
Now there's more to promises than that.

4
00:00:07.840 --> 00:00:12.750
And this does start to get a little
bit more into how do I use the API?

5
00:00:12.750 --> 00:00:15.880
This is normally where people
start learning promises.

6
00:00:15.880 --> 00:00:18.925
So I'm not neglecting
teaching you that part, but

7
00:00:18.925 --> 00:00:23.070
you'll notice that I built us
a foundation of concept first.

8
00:00:23.070 --> 00:00:25.090
Now that you understand why
promises are so important.

9
00:00:25.090 --> 00:00:28.110
Now you understand that the way that
they're designed is intentional,

10
00:00:28.110 --> 00:00:29.480
it's on purpose.

11
00:00:29.480 --> 00:00:30.600
There's a reason for it.

12
00:00:30.600 --> 00:00:33.430
It's not just that they don't
know how to design stuff.

13
00:00:33.430 --> 00:00:35.910
So let's talk about what they
do in terms of flow control.

14
00:00:35.910 --> 00:00:39.590
Because in our modern JavaScript programs,
it's very rarely the case,

15
00:00:40.810 --> 00:00:45.600
that we simply have a single step,
if then asynchronously.

16
00:00:45.600 --> 00:00:47.860
There's one action and
then when it's finished we move on.

17
00:00:49.290 --> 00:00:52.660
Most of our modern JavaScript programs,
most of you that are listening,

18
00:00:52.660 --> 00:00:55.800
are probably writing vastly
more sophisticated systems.

19
00:00:57.390 --> 00:01:00.390
These two things have to happen, and
whenever they finish, I move on to this.

20
00:01:00.390 --> 00:01:04.020
And then this third thing fires off here,
and then it comes back together.

21
00:01:04.020 --> 00:01:04.990
That's called flow control.

22
00:01:06.400 --> 00:01:09.830
Managing how all of those steps go through
your program is called flow control.

23
00:01:10.880 --> 00:01:13.840
We've seen flow control already,
we saw it with thunks.

24
00:01:13.840 --> 00:01:14.710
We saw it with callbacks.

25
00:01:15.903 --> 00:01:20.360
So what do promises offered
by a way of flow control?

26
00:01:20.360 --> 00:01:24.050
How do they allow us to do, cuz a promise
fundamentally is just an if then,

27
00:01:24.050 --> 00:01:27.310
it's a wait for this to finish and
then do the next thing.

28
00:01:27.310 --> 00:01:31.158
Well that's not useful to us unless
there's some way to compose promises

29
00:01:31.158 --> 00:01:34.230
together, I used word compose again.

30
00:01:34.230 --> 00:01:39.550
Compose promises together in a way
to to manage our flow control.

31
00:01:41.490 --> 00:01:44.880
So back to our friendly fun pseudocode.

32
00:01:44.880 --> 00:01:48.190
I'd like to be able to do the first thing,
and then when it's finished do the second

33
00:01:48.190 --> 00:01:50.840
thing, and when it's finished do the third
thing, and when it's finished complete.

34
00:01:50.840 --> 00:01:53.290
And by the way if there's any
error anywhere along that chain,

35
00:01:53.290 --> 00:01:54.520
I'd like to fail out to an error.

36
00:01:56.790 --> 00:02:00.290
That's the most basic sense
sequential flow control.

37
00:02:00.290 --> 00:02:03.150
How do promises allow us to
manage sequential flow control?

38
00:02:04.330 --> 00:02:05.450
The key characteristic.

39
00:02:06.940 --> 00:02:08.690
It's an API design decision.

40
00:02:10.080 --> 00:02:10.900
Chaining promises.

41
00:02:10.900 --> 00:02:14.810
I have one promise that
represents the first step.

42
00:02:14.810 --> 00:02:16.540
Another promise represents
the second step.

43
00:02:16.540 --> 00:02:18.578
Another promise represents the third step.

44
00:02:18.578 --> 00:02:22.270
And in anywhere along that chain, and
I'll show you how we chain on it together.

45
00:02:22.270 --> 00:02:25.160
But anywhere along that chain,
if an error happens, if

46
00:02:25.160 --> 00:02:30.095
a rejection of the promise happens rather,
we fail out to the rejection chain.

47
00:02:30.095 --> 00:02:32.320
Okay?

48
00:02:32.320 --> 00:02:33.790
So chaining promises,

49
00:02:33.790 --> 00:02:37.029
here's your key take away to understand
how chaining promises happen.

50
00:02:38.190 --> 00:02:42.160
The way you take a promise A and
chain it with a promise B,

51
00:02:42.160 --> 00:02:46.540
is that in the promise A, when you
set up event handler for a promise A.

52
00:02:47.930 --> 00:02:51.500
In that handler you return promise B.

53
00:02:52.860 --> 00:02:54.870
You return one promise,

54
00:02:54.870 --> 00:02:59.290
you return the second promise from
the success handler of the first promise.

55
00:03:00.970 --> 00:03:03.750
And magically they chained together.

56
00:03:03.750 --> 00:03:06.580
It's actually not so magical,
it's actually when you implement promise

57
00:03:06.580 --> 00:03:09.780
libraries, you find out it's
actually pretty complicated to do.

58
00:03:09.780 --> 00:03:13.350
But nonetheless it's been designed to do
that, we take care of that work for you.

59
00:03:13.350 --> 00:03:17.810
So that all you need to do
to make a series of chains,

60
00:03:17.810 --> 00:03:21.780
is to return one promise from
the success handler of the previous one.

61
00:03:21.780 --> 00:03:23.790
So do first thing is
gonna give us a promise.

62
00:03:23.790 --> 00:03:26.980
We set up a then handler,
we do whatever we need to do with that.

63
00:03:26.980 --> 00:03:29.940
And then we call doSecondThing.

64
00:03:29.940 --> 00:03:34.480
DoSecondThing makes another promise, and
you'll notice that we do, is we return it.

65
00:03:34.480 --> 00:03:38.930
And by returning it, it means that
the .then handler on line five, which

66
00:03:38.930 --> 00:03:43.480
would normally have proceeded immediately
after the handler from line two.

67
00:03:43.480 --> 00:03:45.578
It no longer is going
to proceed immediately.

68
00:03:45.578 --> 00:03:49.332
Instead the .then handler from
line five is going to wait for

69
00:03:49.332 --> 00:03:52.520
the promise returned on line three.

70
00:03:52.520 --> 00:03:54.070
It's going to chain those things together.

71
00:03:54.070 --> 00:03:58.050
It swaps it out underneath the covers and
handles all that complexity for you.

72
00:03:59.710 --> 00:04:04.600
So we can approximate a flow control
by chaining our promises together.

73
00:04:04.600 --> 00:04:06.260
Now, this could have
been done with thunks and

74
00:04:06.260 --> 00:04:07.490
it could have been done with callbacks.

75
00:04:07.490 --> 00:04:09.140
We've done this already.

76
00:04:09.140 --> 00:04:11.810
A sequential set of steps already,
you know what that looks like.

77
00:04:11.810 --> 00:04:15.490
And it often does pattern itself
in a nested series of callbacks.

78
00:04:17.040 --> 00:04:20.240
So one of the big things that people get
excited about with promises when they

79
00:04:20.240 --> 00:04:21.920
see example promise code,

80
00:04:21.920 --> 00:04:25.020
they get excited about this idea
that it's not nested anymore.

81
00:04:25.020 --> 00:04:26.770
It's organized into a vertical chain.

82
00:04:28.940 --> 00:04:30.819
That is the least
important part of promises.

83
00:04:32.420 --> 00:04:34.140
Not unimportant.

84
00:04:34.140 --> 00:04:35.370
It's the least important part.

85
00:04:36.790 --> 00:04:38.070
In fact I'll be honest with you,

86
00:04:38.070 --> 00:04:40.160
when I first started writing
promises this is all I did.

87
00:04:40.160 --> 00:04:43.850
I rewrote all of my asynchronous
code using promised chains,

88
00:04:43.850 --> 00:04:47.800
I became completely drunk on the idea that
that's the right way to write my code.

89
00:04:49.420 --> 00:04:53.570
And upon reflection a couple of years
later, I don't really use promise chains

90
00:04:53.570 --> 00:04:58.090
anymore, it's the least important part,
I could take it or leave it.

91
00:04:59.090 --> 00:05:01.480
Because it turns out there's better
ways of doing flow control, and

92
00:05:01.480 --> 00:05:03.290
we're gonna get to that
a little bit later.

93
00:05:03.290 --> 00:05:05.960
There's better ways of doing our
flow control than a promise chain.

94
00:05:05.960 --> 00:05:08.570
Is a promise chain better
than a thunk nested series?

95
00:05:08.570 --> 00:05:09.550
Yep.

96
00:05:09.550 --> 00:05:12.770
Is it better than whatever the crap
we call the callback stuff

97
00:05:12.770 --> 00:05:13.590
that we wrote before?

98
00:05:13.590 --> 00:05:15.150
Absolutely.

99
00:05:15.150 --> 00:05:15.650
It's better.

100
00:05:16.870 --> 00:05:18.520
But this isn't the important part.

101
00:05:19.660 --> 00:05:26.560
So, give me the immutability and the
safety and the trust, and I could leave.

102
00:05:26.560 --> 00:05:30.550
I could take or leave the flow control,
the chaining of promises.

103
00:05:30.550 --> 00:05:33.000
Now, I'd be remiss if I didn't
teach you how they work.

104
00:05:33.000 --> 00:05:35.540
So we are gonna spend a little bit of
time understanding promised chaining.

105
00:05:35.540 --> 00:05:38.570
But I just want you to know where
it sits within the whole scope and

106
00:05:38.570 --> 00:05:39.862
scheme of what we're talking about.

107
00:05:39.862 --> 00:05:41.551
You're gonna need to understand it,

108
00:05:41.551 --> 00:05:43.730
cuz you're gonna write
a lot of framework code.

109
00:05:43.730 --> 00:05:45.588
There's a lot of angulars and reacts,

110
00:05:45.588 --> 00:05:48.480
and all that are out there that
are gonna use promise chains.

111
00:05:48.480 --> 00:05:50.940
But I want you to remember
in the back of your head.

112
00:05:50.940 --> 00:05:53.175
Why using those promises is so important.

113
00:05:53.175 --> 00:05:56.110
It really has nothing to
do with the chaining stuff.

114
00:05:56.110 --> 00:05:56.610
Okay?

115
00:05:58.560 --> 00:06:01.810
Here's another example,
this one is using delay.

116
00:06:01.810 --> 00:06:05.580
So we're actually delaying based upon
times, and you could use that for

117
00:06:05.580 --> 00:06:07.146
an animation chain for example.

118
00:06:07.146 --> 00:06:10.200
People have written animations
with delays, and of course,

119
00:06:10.200 --> 00:06:11.230
works exactly the same way.

120
00:06:13.371 --> 00:06:16.530
&gt;&gt; Kyle Simpson: Back to that whole
calculating the meaning of life thing.

121
00:06:16.530 --> 00:06:19.255
Here is the meaning of life
represented as a promise chain.

122
00:06:19.255 --> 00:06:23.070
GetData(10) returns a promise

123
00:06:23.070 --> 00:06:26.890
that 1000 milliseconds from
now will resolve the promise.

124
00:06:26.890 --> 00:06:29.300
And you'll notice that promises
are not just about an if then, but

125
00:06:29.300 --> 00:06:31.436
they are about message passing as well.

126
00:06:31.436 --> 00:06:33.380
So when getData(10) finishes,

127
00:06:33.380 --> 00:06:36.180
it passes that data along to
the next step in the promise chain.

128
00:06:36.180 --> 00:06:37.770
And we get it in num1.

129
00:06:37.770 --> 00:06:41.981
And then when getData(30) finishes
a 1000 milliseconds from now,

130
00:06:41.981 --> 00:06:44.030
num2 is called with the value 30.

131
00:06:44.030 --> 00:06:48.310
And then when that promise resolves,
the answer is given that value.

132
00:06:49.420 --> 00:06:54.030
So the promise chain does propagate
data down from step to step to step,

133
00:06:54.030 --> 00:06:56.190
which is a really
important powerful thing.

134
00:06:56.190 --> 00:06:59.273
Promises not only represent flow control,
but

135
00:06:59.273 --> 00:07:02.750
they are also represent data
flow through our steps.

