WEBVTT

1
00:00:00.000 --> 00:00:04.191
[MUSIC]

2
00:00:04.191 --> 00:00:06.590
&gt;&gt; Kyle: Let's take stock of where
we've been through this workshop.

3
00:00:06.590 --> 00:00:08.770
There's an awful lot that we've gone over.

4
00:00:08.770 --> 00:00:10.230
Started at the beginning with callbacks.

5
00:00:10.230 --> 00:00:14.338
Looked at the disadvantages,
the shortcomings of callbacks and

6
00:00:14.338 --> 00:00:18.006
thinking about the call back hell,
it's this notion of.

7
00:00:21.122 --> 00:00:24.910
&gt;&gt; Kyle: Inversion of control and
non-local and non-sequential reasoning.

8
00:00:24.910 --> 00:00:27.470
We looked at thunks, and they didn't
really have any solutions to that.

9
00:00:27.470 --> 00:00:31.060
But thunks at least gave us
a conceptual underpinning for

10
00:00:31.060 --> 00:00:33.740
values that are time independent.

11
00:00:33.740 --> 00:00:35.860
Removing time as a state complexity.

12
00:00:36.990 --> 00:00:39.180
Thunks led us into our
discussion of promises.

13
00:00:39.180 --> 00:00:43.120
And promises are not only that, but
they are also a solution to inversion of

14
00:00:43.120 --> 00:00:47.920
control because the way they're built is
designed to create a trustable system and

15
00:00:47.920 --> 00:00:51.543
predictable system around
the way callbacks are behaving.

16
00:00:51.543 --> 00:00:56.860
Generators, generators are the other
part of callback hell being solved,

17
00:00:56.860 --> 00:00:59.810
giving us a localized pauseable stack.

18
00:00:59.810 --> 00:01:05.130
With local stack execution and local
error handling and that sort of thing.

19
00:01:05.130 --> 00:01:10.170
So we now have blocking sequential
synchronous looking code,

20
00:01:10.170 --> 00:01:14.160
that under the covers is factored away,
that the asynchronicity is happening.

21
00:01:15.610 --> 00:01:16.280
Those are great.

22
00:01:16.280 --> 00:01:17.240
That's our baseline.

23
00:01:17.240 --> 00:01:21.290
But then we say well how are we gonna
to adapt an event based programming,

24
00:01:21.290 --> 00:01:24.880
cuz there are lots of events that we
deal with in modern complex APIs.

25
00:01:24.880 --> 00:01:27.620
Well, turns out observables
are a great way of doing it.

26
00:01:27.620 --> 00:01:30.170
We looked at a lightweight version
of observables that I call

27
00:01:30.170 --> 00:01:31.090
reactive sequences.

28
00:01:32.120 --> 00:01:36.340
Finally the CSP go-routines is kind
of like, if observables are just over

29
00:01:36.340 --> 00:01:40.600
the horizon, CSP is the thing
that's coming on right behind it.

30
00:01:40.600 --> 00:01:42.900
So a couple years from now
everybody's going to be thinking wow,

31
00:01:42.900 --> 00:01:45.870
why didn't I get on the CSP train earlier.

32
00:01:45.870 --> 00:01:50.840
So, we've come a long way, and the point
that I wanna make with the slide is,

33
00:01:52.290 --> 00:01:57.400
there's no one item on this list that
replaces all the other items on the list.

34
00:01:57.400 --> 00:01:58.450
There's no silver bullet.

35
00:01:58.450 --> 00:01:59.320
There's no one thing.

36
00:01:59.320 --> 00:02:00.590
I hear this from time to time.

37
00:02:00.590 --> 00:02:05.240
I hear people in the reactive programming
world say, why do I ever need a promise,

38
00:02:05.240 --> 00:02:07.080
cuz I can model everything
with an observable.

39
00:02:08.410 --> 00:02:10.320
And I hear people in the CSP world saying,

40
00:02:10.320 --> 00:02:13.190
why do I ever need an observable cuz I
can model everything with the stream.

41
00:02:14.650 --> 00:02:19.300
I can see that to be a very immature,
naive way of looking at what we're doing.

42
00:02:19.300 --> 00:02:20.041
So the reason for this workshop.

43
00:02:20.041 --> 00:02:25.130
The reason this workshop exists is to show
you all of these different tools, and

44
00:02:25.130 --> 00:02:28.800
to have you come away with
a better appreciation for

45
00:02:28.800 --> 00:02:32.530
where they all fit in in the bigger
scheme of what we're building.

46
00:02:32.530 --> 00:02:35.760
No one tool here is gonna be
your solution from now on.

47
00:02:35.760 --> 00:02:39.830
But the collection of all these tools,
is a significant jump forward,

48
00:02:39.830 --> 00:02:41.468
not just a little bit.

49
00:02:41.468 --> 00:02:43.520
But orders a magnitude jump forward for

50
00:02:43.520 --> 00:02:47.448
your ability to expressively show
asynchronous coding in your programs.

51
00:02:50.796 --> 00:02:54.224
&gt;&gt; Kyle: So to really hammer
that point home, I built, so

52
00:02:54.224 --> 00:02:57.150
I don't know why I hit escape.

53
00:02:57.150 --> 00:02:59.590
I built a thing a couple of weeks ago and
released it,

54
00:02:59.590 --> 00:03:01.970
it's called A Tale of Three Lists.

55
00:03:01.970 --> 00:03:05.410
I'm gonna show you this demo, but
let me tell you why this thing exists.

56
00:03:07.530 --> 00:03:10.900
Anybody ever heard of
the to do MVC Project?

57
00:03:10.900 --> 00:03:12.940
Some of you are probably nodding
your heads, you've heard of it.

58
00:03:12.940 --> 00:03:17.100
What was the point of to do MVC was,
everybody that has their own special

59
00:03:17.100 --> 00:03:20.690
framework that they're like this
is the magical silver bullet.

60
00:03:20.690 --> 00:03:25.350
They got an opportunity to solve
the exact same problem using their code.

61
00:03:25.350 --> 00:03:28.960
Well now you have, I don't even
know how many like 30, 40, 100,000,

62
00:03:28.960 --> 00:03:31.610
who knows how many projects
that have been submitted there.

63
00:03:31.610 --> 00:03:34.420
Where everybody who has their
own special unicorn framework,

64
00:03:34.420 --> 00:03:38.394
gets to show off the way they
do it to do [INAUDIBLE] okay?

65
00:03:38.394 --> 00:03:40.950
But what about asynchronous programming?

66
00:03:40.950 --> 00:03:44.950
I decided to set out and create the to
do MVC for asynchronous programming.

67
00:03:44.950 --> 00:03:48.120
And that's what a tale of three lists is.

68
00:03:48.120 --> 00:03:51.570
It's a slightly more complex
than just a fubar kinda thing.

69
00:03:51.570 --> 00:03:53.870
It's more complex cuz
when I show you the demo,

70
00:03:53.870 --> 00:03:57.910
there's events firing all over the place,
and pauses and stuff like that.

71
00:03:57.910 --> 00:04:02.560
But then I went and implemented
the same demo seven different times,

72
00:04:02.560 --> 00:04:05.660
using seven different
asynchronous patterns.

73
00:04:06.880 --> 00:04:08.698
The stuff that we've gone
over in this workshop,

74
00:04:08.698 --> 00:04:12.830
I implemented the same code base,
side by side, seven different ways.

75
00:04:12.830 --> 00:04:15.960
And I'm open to contributions from
others who may have other patterns that

76
00:04:17.030 --> 00:04:19.360
have relative strengths and weaknesses.

77
00:04:19.360 --> 00:04:23.750
But the point is we now have seven side
by side code bases doing exactly the same

78
00:04:23.750 --> 00:04:26.040
task, but different ways
with different strengths and

79
00:04:26.040 --> 00:04:27.940
weaknesses, as a learning tool.

80
00:04:29.330 --> 00:04:30.790
And that's what I wanna get across.

81
00:04:30.790 --> 00:04:34.120
If you haven't heard anything else
I've said, be able to go through and

82
00:04:34.120 --> 00:04:36.870
say I see how the promises one works,
and then I come and

83
00:04:36.870 --> 00:04:40.644
look at the observables one, and I see
places where that's much more powerful.

84
00:04:40.644 --> 00:04:44.030
But there'll be places where
the observables have some awkwardness.

85
00:04:44.030 --> 00:04:46.480
And so we can go and
look at the CSP one and say,

86
00:04:46.480 --> 00:04:49.920
wow the CSP one is better at
that than the observables one.

87
00:04:51.370 --> 00:04:54.860
And the take away is,
find the best tools for

88
00:04:54.860 --> 00:04:57.730
any given part of your application and
apply them maturely.

89
00:04:59.260 --> 00:05:00.999
So, let me show you the demo real quick.

90
00:05:04.849 --> 00:05:06.410
&gt;&gt; Kyle: This is the repo by the way.

91
00:05:06.410 --> 00:05:11.690
So I'm actively open to other people
submitting and improving things.

92
00:05:11.690 --> 00:05:15.210
But here is the demo, and
this is the one using callbacks.

93
00:05:15.210 --> 00:05:17.175
But they all behave exactly the same, so.

94
00:05:20.755 --> 00:05:21.686
&gt;&gt; Kyle: So what this is,

95
00:05:21.686 --> 00:05:26.216
is there is a producer that's producing
messages every 50 milliseconds, and

96
00:05:26.216 --> 00:05:31.340
I have two different listeners that are
sampling that stream at different speeds.

97
00:05:31.340 --> 00:05:35.480
So over here I'm sampling at once every I
think 900 millisecond,s or something and

98
00:05:35.480 --> 00:05:37.380
over here every 600 milliseconds.

99
00:05:37.380 --> 00:05:38.890
I don't remember what the numbers are.

100
00:05:38.890 --> 00:05:42.680
But I'm sampling them at different
speeds and printing them into this list.

101
00:05:42.680 --> 00:05:47.270
In addition to them being sampled at
different speeds, I'm also listening to

102
00:05:47.270 --> 00:05:51.990
clicks on these, and when you click on
the item it adds it to your center list.

103
00:05:51.990 --> 00:05:57.220
So all of these streams or
firing at all these different times,

104
00:05:57.220 --> 00:06:00.800
and in addition if there's a duplicate
it gets marked off of our list.

105
00:06:00.800 --> 00:06:03.700
So this is just randomly
generating all these different

106
00:06:03.700 --> 00:06:05.750
messages that are being added to the list.

107
00:06:05.750 --> 00:06:08.110
Well now you're like well jeez,
I'm getting too many messages.

108
00:06:08.110 --> 00:06:08.720
I need to pause.

109
00:06:08.720 --> 00:06:12.470
So you can pause one or both of the lists.

110
00:06:13.720 --> 00:06:16.180
And when you pause both of the lists,

111
00:06:16.180 --> 00:06:20.500
now the producer who is producing
that message, he stops producing.

112
00:06:20.500 --> 00:06:22.950
Because if he kept producing and

113
00:06:22.950 --> 00:06:27.300
nobody was consuming, well now you'd be
wasting crazy amounts of battery power.

114
00:06:28.740 --> 00:06:32.830
So, it waits for
both consumers to be paused and

115
00:06:32.830 --> 00:06:36.230
it stops producing, and then once
one of them starts consuming again,

116
00:06:36.230 --> 00:06:38.070
he starts sending them out
every 50 milliseconds.

117
00:06:39.260 --> 00:06:43.824
So, the point that I'm making is if I
were to pull up the CSP one for example.

118
00:06:46.440 --> 00:06:49.870
It's the exact same behavior here but
implemented with CSP semantics.

119
00:06:49.870 --> 00:06:51.356
So if we run the CSP one.

120
00:06:51.356 --> 00:06:56.950
If I pause both of these lists, and
there's nothing happening in the app.

121
00:06:58.090 --> 00:07:05.180
We should be able to open up and
do a profile, a JavaScript CPU profile.

122
00:07:05.180 --> 00:07:08.301
And we should be able to see that nothing
is happening because everything has

123
00:07:08.301 --> 00:07:09.370
been paused.

124
00:07:09.370 --> 00:07:12.260
And in CSP that's super easy,
cuz if nobody is consuming

125
00:07:12.260 --> 00:07:15.510
then it doesn't matter how many times
you try to push something out, right?

126
00:07:15.510 --> 00:07:19.330
So that part I got for
free with the CSP implementation.

127
00:07:19.330 --> 00:07:22.290
Whereas with the callbacks you
had to do a lot more work.

128
00:07:22.290 --> 00:07:25.790
But let's collect the CPU
profile real quick.

129
00:07:25.790 --> 00:07:29.330
And I'll just let it run for
a couple of seconds as I'm talking.

130
00:07:29.330 --> 00:07:31.230
Nothing's happening in
the background of the page, so

131
00:07:31.230 --> 00:07:33.350
we should expect basically
an empty profile.

132
00:07:34.460 --> 00:07:36.828
And you'll notice that idle was
the only thing that was happening.

133
00:07:40.055 --> 00:07:43.618
&gt;&gt; Kyle: [COUGH] If you look at the delta,
the difference between the callback

134
00:07:43.618 --> 00:07:46.700
implementation, and
the CSP implementation.

135
00:07:46.700 --> 00:07:49.860
It takes a whole lot more work to
make that same capability happen.

136
00:07:50.970 --> 00:07:55.570
So this is a more sophisticated demo than
most people show off asynchronicity.

137
00:07:55.570 --> 00:07:59.220
And the reason I wanted to do that is,
it's really easy to miss the important

138
00:07:59.220 --> 00:08:01.620
details when you have trivial,
hello world examples.

139
00:08:01.620 --> 00:08:03.960
So I wanted to have something
that's more sophisticated,

140
00:08:03.960 --> 00:08:06.490
more real world looking-ish.

141
00:08:06.490 --> 00:08:09.480
Maybe not quite as sophisticated
as a To-Do app, but it's

142
00:08:09.480 --> 00:08:13.210
more real world-ish from the perspective
of events and asynchronous programming.

