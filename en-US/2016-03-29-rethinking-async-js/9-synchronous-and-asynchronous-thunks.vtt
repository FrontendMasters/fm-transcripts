WEBVTT

1
00:00:00.008 --> 00:00:03.802
[MUSIC]

2
00:00:03.802 --> 00:00:07.619
&gt;&gt; Kyle Simpson: All right, let's talk
about a pattern on top of callbacks.

3
00:00:07.619 --> 00:00:10.513
This has actually been around for
a really, really long time.

4
00:00:10.513 --> 00:00:14.553
It way predates JavaScript, this
terminology didn't even really exist in

5
00:00:14.553 --> 00:00:18.847
JavaScript until people started trying
to adopt this notion in JavaScript, and

6
00:00:18.847 --> 00:00:20.020
the word is Thunk.

7
00:00:20.020 --> 00:00:22.940
I have no idea where they
came up with this word,

8
00:00:22.940 --> 00:00:27.270
I don't know what they were smoking,
I wish I had some of it.

9
00:00:27.270 --> 00:00:31.270
It's a weird word, I don't even know what
its origin is, but I can describe to you

10
00:00:31.270 --> 00:00:35.030
what I think it is and
it's actually kind of deceptively simple.

11
00:00:35.030 --> 00:00:40.640
What a Thunk is from a synchronous
perspective, a Thunk is a function

12
00:00:41.700 --> 00:00:46.170
that has everything already that it
needs to do to give you some value back.

13
00:00:46.170 --> 00:00:49.560
You do not need to pass any arguments in,
you simply call it and

14
00:00:49.560 --> 00:00:50.680
it will give you a value back.

15
00:00:50.680 --> 00:00:51.460
Does that sound familiar?

16
00:00:51.460 --> 00:00:55.440
You remember how we were talking about
that before in a different workshop?

17
00:00:58.150 --> 00:01:02.226
A Thunk is just a function with some
closure state keeping track of some value,

18
00:01:02.226 --> 00:01:06.326
or values, and it gives you those things
back whenever you call the function.

19
00:01:08.291 --> 00:01:10.100
&gt;&gt; Kyle Simpson: Here's
a synchronous thunk.

20
00:01:10.100 --> 00:01:13.300
I've got an add function,
which expects an x and a y, and

21
00:01:13.300 --> 00:01:18.540
I make a thunk that calls the add function
and already has the 10 and the 15 in it.

22
00:01:18.540 --> 00:01:19.890
It's hard coded in this case.

23
00:01:21.300 --> 00:01:25.300
Every time I call like I do online, so
that's line 9 to call the add function,

24
00:01:25.300 --> 00:01:29.310
but every time I call line 9,
if I call func over and over and

25
00:01:29.310 --> 00:01:33.680
over again, I'm gonna get the same
value out every single time.

26
00:01:33.680 --> 00:01:35.470
So, now here's the important part.

27
00:01:35.470 --> 00:01:39.890
Func itself value, which is a function,

28
00:01:39.890 --> 00:01:43.470
it has become a container around
that particular collection of state.

29
00:01:44.680 --> 00:01:48.250
And that is now a container that I can
pass around anywhere in my program,

30
00:01:49.540 --> 00:01:51.930
as a container wrapped around that state.

31
00:01:51.930 --> 00:01:55.320
And any time I want to extract it,
I simply have to call that function and

32
00:01:55.320 --> 00:01:55.890
I get the value out.

33
00:01:55.890 --> 00:01:59.830
I don't have to pass the value or
the state itself.

34
00:01:59.830 --> 00:02:03.320
I passed the wrapper around that
state all around my program.

35
00:02:03.320 --> 00:02:07.140
So it becomes like a token that represents
this value and it's easy to get it out.

36
00:02:07.140 --> 00:02:08.607
All I have to do is execute
it to get the value out.

37
00:02:11.851 --> 00:02:15.193
&gt;&gt; Kyle Simpson: You may not realize
it yet, but that is the fundamental

38
00:02:15.193 --> 00:02:19.913
conceptual underpinning for what a promise
is, a wrapper around a value Here

39
00:02:19.913 --> 00:02:24.870
are the wrapper as a function in promises
it's a much more sophisticated thing.

40
00:02:26.360 --> 00:02:28.450
Was actually quite powerful to think about

41
00:02:29.850 --> 00:02:34.910
when we extend phones from the synchronous
nature into an asynchronous nature.

42
00:02:34.910 --> 00:02:37.760
This is a synchronous thunk and
that's the most common definition for

43
00:02:37.760 --> 00:02:40.130
them to find is that
it's a synchronous thing.

44
00:02:40.130 --> 00:02:41.530
What is an asynchronous thunk?

45
00:02:42.930 --> 00:02:46.370
Well, there's no right or
wrong definition here.

46
00:02:46.370 --> 00:02:51.270
But the most natural way that we could
define an asynchronous thunk is that it is

47
00:02:51.270 --> 00:02:55.652
a function that doesn't need any
arguments passed to it to do its job,

48
00:02:55.652 --> 00:02:59.981
except you need to pass it a callback so
that you can get the value out.

49
00:03:02.506 --> 00:03:05.200
&gt;&gt; Kyle Simpson: So that's what we're
gonna call an asynchronous thunk.

50
00:03:05.200 --> 00:03:08.380
So let's extend our synchronous
thunk to an asynchronous thunk.

51
00:03:08.380 --> 00:03:10.630
I have an add async function.

52
00:03:12.700 --> 00:03:14.990
It fakes some asynchronicity
with a set time out.

53
00:03:16.670 --> 00:03:18.920
Takes the callback that
you've passed in on line 1.

54
00:03:18.920 --> 00:03:21.210
On line 3, it calls it with the addition.

55
00:03:21.210 --> 00:03:28.380
So we make our thunk on line 7 with
addAsync, and we hard code (10, 15, cb).

56
00:03:28.380 --> 00:03:29.740
And on line 11,

57
00:03:29.740 --> 00:03:34.870
we have that value that thunk value
that we can pass around our function.

58
00:03:34.870 --> 00:03:37.210
And every time we call thunk and
pass in a callback,

59
00:03:37.210 --> 00:03:38.469
we know we're going to get our value out.

60
00:03:40.480 --> 00:03:43.790
But here's what's incredibly
powerful about this pattern.

61
00:03:43.790 --> 00:03:50.120
From the outside world we do not know nor
do we have to care whether that value

62
00:03:50.120 --> 00:03:53.460
is available immediately or whether it's
gonna take a while to get us that value.

63
00:03:53.460 --> 00:03:58.430
What difference is a make
to us we pass on a callback

64
00:03:58.430 --> 00:04:01.389
we know you'll call the callback
when you have a value ready for us.

65
00:04:02.510 --> 00:04:05.560
So the first time we call func and
we pass in a callback,

66
00:04:05.560 --> 00:04:09.140
it might have to do some significant work
to calculate the answer to your question.

67
00:04:09.140 --> 00:04:13.530
It might make some ajax call, and do some
other kind of crazy calculations, and

68
00:04:13.530 --> 00:04:14.780
it might take a while.

69
00:04:14.780 --> 00:04:20.180
And then it may decide to memorize
the answer to that question, so

70
00:04:20.180 --> 00:04:22.840
the next time you call it, it just
gives you the value back right away.

71
00:04:24.320 --> 00:04:29.101
But from the outside world does it
matter to us whatsoever how that works.

72
00:04:29.101 --> 00:04:34.431
What's happening here is that by wrapping
this function around the state and

73
00:04:34.431 --> 00:04:39.433
allowing it to be asynchronous in
nature we have essentially normalized

74
00:04:39.433 --> 00:04:44.770
time out of the equation we have
factored time out of the equation.

75
00:04:44.770 --> 00:04:49.350
We have produced a wrapper around the
value that has become time independent.

76
00:04:50.770 --> 00:04:52.800
It doesn't matter if
the value is there now or

77
00:04:52.800 --> 00:04:56.250
if it's gonna come later we still
use it in the exactly the same way.

78
00:04:59.440 --> 00:05:02.030
Hear this if you don't hear
anything else that I've said today.

79
00:05:02.030 --> 00:05:06.440
Time is the most complex Factor
of state in your program.

80
00:05:07.780 --> 00:05:11.200
Managing time is the most
complex state in your program.

81
00:05:11.200 --> 00:05:14.640
That's why this is huge to be able
to come up with a very simple,

82
00:05:14.640 --> 00:05:18.230
there's no libraries involved,
this is straight up core JavaScript.

83
00:05:18.230 --> 00:05:20.030
Just a different way of looking at and

84
00:05:20.030 --> 00:05:23.600
using the mechanisms that have been
available to us for all 20 years.

85
00:05:25.180 --> 00:05:28.480
We've taken this notion,
this fundamentally difficult

86
00:05:28.480 --> 00:05:33.930
thing to reason about called time and
we've eliminated it as a confusing factor.

87
00:05:33.930 --> 00:05:34.940
As a complicating factor.

88
00:05:34.940 --> 00:05:36.000
I have this thunk,

89
00:05:36.000 --> 00:05:39.712
it represents a value, I pass it
around whenever I want the value,

90
00:05:39.712 --> 00:05:43.639
I give it a call back and I get the value
out then that's all I have to do.

91
00:05:47.061 --> 00:05:49.494
&gt;&gt; Kyle Simpson: I can tell from your
faces that you're not realizing how

92
00:05:49.494 --> 00:05:51.550
groundbreaking that notion is.

93
00:05:51.550 --> 00:05:55.570
Okay but
that is one of the most important I

94
00:05:55.570 --> 00:06:00.080
couldn't believe when I recognized what
that meant I could not believe how far.

95
00:06:00.080 --> 00:06:02.400
I had gotten in JavaScript
without that realisation.

96
00:06:03.820 --> 00:06:04.760
It changed everything for me.

97
00:06:06.270 --> 00:06:10.130
And in fact it's what helped
me understand promises.

98
00:06:10.130 --> 00:06:12.620
I didn't fully understand
the conceptual basis for

99
00:06:12.620 --> 00:06:14.840
promises until I understood
what thunks were doing.

100
00:06:16.640 --> 00:06:21.430
Because we'll find out that a promise is
a time independent wrapper around a value.

101
00:06:21.430 --> 00:06:22.640
Just has a fancier API.

102
00:06:24.430 --> 00:06:28.522
So as I said earlier, I like to say that
thunks are promises without the fancy API.

103
00:06:30.505 --> 00:06:31.767
&gt;&gt; Kyle Simpson: Okay?

104
00:06:31.767 --> 00:06:35.320
Now There are some twists,

105
00:06:35.320 --> 00:06:38.030
there are some wrinkles that we
can throw into the situation.

106
00:06:39.800 --> 00:06:44.330
If I wanted to make a Thunk like give
myself a generalized utility for

107
00:06:44.330 --> 00:06:44.920
making Thunks.

108
00:06:46.040 --> 00:06:50.140
I can do all that old
crappy array stuff and.

109
00:06:50.140 --> 00:06:52.460
Pushing the arguments on and
calling apply.

110
00:06:52.460 --> 00:06:53.180
I could do it that way.

111
00:06:53.180 --> 00:06:58.670
And I could use it this way
as we see on line seven.

112
00:06:58.670 --> 00:07:01.390
So now I'm not manually making one but
I can make any thunk that I

113
00:07:01.390 --> 00:07:04.860
want by presetting the callback
as the first argument, and

114
00:07:04.860 --> 00:07:08.380
anything else that I pass, it's going
to get passed along to it always And

115
00:07:08.380 --> 00:07:09.640
that's how I could produce my thunk.

116
00:07:09.640 --> 00:07:12.410
So I could make myself a utility for
making these,

117
00:07:12.410 --> 00:07:16.820
which would be not fundamentally terribly
different from a promise constructor.

118
00:07:18.060 --> 00:07:20.130
makeThunk would be kinda
like a promise constructor.

119
00:07:20.130 --> 00:07:21.690
It's a constructor for thunks.

120
00:07:23.740 --> 00:07:26.050
Yes.
&gt;&gt; Speaker 2: Could you go through the, so

121
00:07:26.050 --> 00:07:30.680
when we talked about
the Problems of callback

122
00:07:32.410 --> 00:07:36.380
this inversion of control not to early,
not too late, not too many times.

123
00:07:36.380 --> 00:07:37.620
&gt;&gt; Kyle Simpson: Yup.

124
00:07:37.620 --> 00:07:44.970
&gt;&gt; Speaker 2: In just to stumble bit
on that with how the promise is.

125
00:07:44.970 --> 00:07:48.010
&gt;&gt; Kyle Simpson: We're not gonna we're
actually not gonna have any solution to

126
00:07:48.010 --> 00:07:49.870
inversion of control of that.

127
00:07:49.870 --> 00:07:50.810
&gt;&gt; Speaker 2: Yeah OK.

128
00:07:50.810 --> 00:07:53.110
&gt;&gt; Kyle Simpson: Promises are going
to solve the inversion of control.

129
00:07:53.110 --> 00:07:54.360
We're not quite there.

130
00:07:54.360 --> 00:07:56.290
&gt;&gt; Speaker 2: Yeah, okay.
That makes me more Yeah.

131
00:07:56.290 --> 00:07:58.110
&gt;&gt; Kyle Simpson: We haven't
solved conversion control yet.

132
00:07:58.110 --> 00:08:00.560
We're laying the conceptual
under pinning for

133
00:08:00.560 --> 00:08:02.430
promises and
that's why we're looking at that.

134
00:08:02.430 --> 00:08:03.980
&gt;&gt; Speaker 2: Yeah, I just wanted to cause

135
00:08:04.990 --> 00:08:09.400
that realization happened
earlier we're going to.

136
00:08:09.400 --> 00:08:14.260
Now getting at better understanding
what promises and just wasn't sure

137
00:08:15.330 --> 00:08:21.425
how much the fancy the is you know
solving our problems or how much is it.

138
00:08:21.425 --> 00:08:22.412
&gt;&gt; Kyle Simpson: Yeah, got it.

139
00:08:22.412 --> 00:08:26.040
The thunks really aren't
addressing inversion of control

140
00:08:26.040 --> 00:08:29.070
The nature of how promises are designed
are designed to solve that.

141
00:08:29.070 --> 00:08:30.190
So we'll get there okay.

142
00:08:33.120 --> 00:08:35.280
Your question about going
over Slide 39 again.

143
00:08:39.460 --> 00:08:40.720
This is a synchronous thunk

144
00:08:41.930 --> 00:08:45.950
as you can see I have an add
function that receives an X and a Y.

145
00:08:45.950 --> 00:08:51.450
And I make another function called thunk
Which doesn't need any arguments at all.

146
00:08:51.450 --> 00:08:54.340
Thunk can simply be called
because it is hard coded to

147
00:08:54.340 --> 00:08:56.440
know to call the add function on line six.

148
00:08:56.440 --> 00:09:02.010
And it's hard coded to know to pass in
the values 10 and 15, also on line 6.

149
00:09:02.010 --> 00:09:04.590
So everywhere we do
something like we do on

150
00:09:04.590 --> 00:09:06.780
line nine we're gonna get
the exact same value.

151
00:09:06.780 --> 00:09:11.280
That's a synchronous thunk Slide 40.

152
00:09:11.280 --> 00:09:13.740
The asynchronous version.

153
00:09:13.740 --> 00:09:20.360
Exactly the same concept except when we
need to pass in a call back to our thunk.

154
00:09:20.360 --> 00:09:24.190
So line 11, I can't just call thunk and
get the value as a return value.

155
00:09:24.190 --> 00:09:25.860
I have to call thunk and

156
00:09:25.860 --> 00:09:28.969
give it a call back which will
receive that value as I do on line.

157
00:09:36.450 --> 00:09:38.630
You're going to get a chance to
practice with thunks, I promise.

158
00:09:41.590 --> 00:09:44.150
All right.
So here's a rewriting of that

159
00:09:44.150 --> 00:09:48.580
silly running example, calculating
the meaning of life By using thunks.

160
00:09:48.580 --> 00:09:51.110
Now you know something slightly
different from what I did before.

161
00:09:51.110 --> 00:09:54.090
On lines one and two,
I precreates some thunks.

162
00:09:55.480 --> 00:10:01.260
I say that get ten needs to when it's
invoked call get data with the value ten.

163
00:10:02.320 --> 00:10:05.260
So line one is not actually
made that Ajax request yet.

164
00:10:05.260 --> 00:10:07.100
That's important understand.

165
00:10:07.100 --> 00:10:10.520
All we've done is create a wrapper that
when called will do that Ajax request.

166
00:10:12.530 --> 00:10:13.340
Okay.

167
00:10:13.340 --> 00:10:17.270
So I pre set up the get 10
in the get 30 thunks and

168
00:10:17.270 --> 00:10:20.610
I can start using them so
on line 4 I use it.

169
00:10:20.610 --> 00:10:22.850
Call get 10 give it a call back.

170
00:10:22.850 --> 00:10:27.070
I know a thousand milliseconds from now
number one will have the value 10 then I

171
00:10:27.070 --> 00:10:32.900
use the get 30 thunk on line 6 and there
is the line 9 I create another thunk.

172
00:10:32.900 --> 00:10:36.180
Why couldn't I create that thunk,
the one from line nine,

173
00:10:36.180 --> 00:10:38.250
why couldn't I pre create
that up on line three?

174
00:10:43.090 --> 00:10:47.060
Because it's temporarily dependent upon
the responses from the first two thunks.

175
00:10:47.060 --> 00:10:49.160
Does everybody see that.

176
00:10:51.000 --> 00:10:53.630
So that's why I had to defer
the creation of that particular thunk.

177
00:10:57.930 --> 00:11:03.330
Bottom line 13 I can simply call get
answer which is my thunk and I will

178
00:11:03.330 --> 00:11:07.420
retrieve that now get an answer happens
to be a container around that value and

179
00:11:07.420 --> 00:11:11.810
I can pass get an answer all over my
program and anybody that needs the meaning

180
00:11:11.810 --> 00:11:14.910
of life can simply call that give it
a callback and get the answer back.

181
00:11:16.320 --> 00:11:20.520
There's something really important to note
here as I said it's important to note that

182
00:11:20.520 --> 00:11:25.860
this particular expression of a thunk,
is what I guess I would call a lazy thunk.

183
00:11:25.860 --> 00:11:28.800
If I was really trying to come
up with some terminology for

184
00:11:28.800 --> 00:11:33.070
it's a lazy thunk in that
it doesn't do the work.

185
00:11:33.070 --> 00:11:34.450
Until you call it the first time.

186
00:11:37.150 --> 00:11:42.350
You could make an active thunk which did
the work and just held on to its response.

187
00:11:43.680 --> 00:11:46.320
So it did the work right away and
held on to the response.

188
00:11:46.320 --> 00:11:49.080
That is another way of doing a thunk.

189
00:11:49.080 --> 00:11:52.090
And I'm giving you a gigantic hint for
your upcoming exercise.

190
00:11:52.090 --> 00:11:54.890
&gt;&gt; Speaker 3: It's like deferring
a promise or something.

191
00:11:54.890 --> 00:11:56.220
&gt;&gt; Kyle Simpson: It's
a lot like a promise.

192
00:11:56.220 --> 00:11:58.840
That's what I'm saying these
are the conceptual underpinnings.

193
00:11:58.840 --> 00:12:01.660
So our current expression
of thunks is very lazy.

194
00:12:01.660 --> 00:12:04.700
It is possible to do
thunks in a different way.

195
00:12:04.700 --> 00:12:05.610
Which they are active.

196
00:12:05.610 --> 00:12:09.590
That means the first time they're called
they do the first time they're set up they

197
00:12:09.590 --> 00:12:13.280
do the work and they don't give you
the answer until you pass in the callback.

