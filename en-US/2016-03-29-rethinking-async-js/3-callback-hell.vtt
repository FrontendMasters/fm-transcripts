WEBVTT

1
00:00:00.006 --> 00:00:03.894
[MUSIC]

2
00:00:03.894 --> 00:00:06.220
&gt;&gt; Kyle Simpson: We're going to look
at some problems with callbacks.

3
00:00:06.220 --> 00:00:09.683
We're gonna get some practice with them
and then I'm going to articulate to you

4
00:00:09.683 --> 00:00:11.814
the real essence of what
callback hell is about.

5
00:00:11.814 --> 00:00:16.235
But I wanna look at some
issues with callbacks.

6
00:00:16.235 --> 00:00:23.560
So easiest, simplest expression of
a callback in an asynchronous fashion.

7
00:00:23.560 --> 00:00:27.070
We pass the function as
a callback to another utility.

8
00:00:27.070 --> 00:00:29.460
This one happens to be built in
to the JavaScript engine but

9
00:00:29.460 --> 00:00:31.740
it could have been some
other utility in our code.

10
00:00:31.740 --> 00:00:33.540
We pass the callback in.

11
00:00:33.540 --> 00:00:37.150
Now if we were to describe what this
function does or how this function

12
00:00:37.150 --> 00:00:40.609
operates, we might say something
to the effect of set up a timeout.

13
00:00:41.950 --> 00:00:45.340
And then after 1000 milliseconds
execute the console.log state.

14
00:00:47.110 --> 00:00:49.890
Most people would probably nod in
agreement that's roughly how we would

15
00:00:49.890 --> 00:00:52.150
describe the behavior of this program.

16
00:00:53.250 --> 00:00:56.179
Unfortunately that description
is fundamentally insufficient.

17
00:00:57.680 --> 00:01:02.091
There is a deep deficiency there,
in our ability to understand and

18
00:01:02.091 --> 00:01:06.440
reason about, and describe and
articulate what's happening.

19
00:01:06.440 --> 00:01:10.187
So one of the issues that we have
is that our brains are not actually

20
00:01:10.187 --> 00:01:12.999
working in the same way
that the code is working.

21
00:01:12.999 --> 00:01:16.964
But another thing to think about is this
function is oftentimes referred to as

22
00:01:16.964 --> 00:01:20.197
a continuation because there's
a first half of our program and

23
00:01:20.197 --> 00:01:21.972
a second half of our program here.

24
00:01:21.972 --> 00:01:25.385
May not be obvious to you but the first
half of your program is everything on

25
00:01:25.385 --> 00:01:28.479
the outside of the timeout including
the set timeout call itself.

26
00:01:28.479 --> 00:01:31.349
And the second half of your program
is everything inside of the callback.

27
00:01:32.520 --> 00:01:36.000
In essence there's
a general concept of a now,

28
00:01:36.000 --> 00:01:40.560
the stuff that's gonna happen
immediately right now, and a later.

29
00:01:40.560 --> 00:01:43.600
For some definition of later,
which we don't care about.

30
00:01:43.600 --> 00:01:45.750
We don't care what the real
definition of later is,

31
00:01:45.750 --> 00:01:49.006
we just know it's not immediately
after what I'm doing at the moment.

32
00:01:49.006 --> 00:01:53.750
There's some gap, and that gap
could be a zero millisecond delay,

33
00:01:53.750 --> 00:01:55.070
whatever that means.

34
00:01:55.070 --> 00:01:57.950
It could be waiting for an Ajax request,
it could be waiting for

35
00:01:57.950 --> 00:01:59.560
a message from a web worker.

36
00:01:59.560 --> 00:02:01.530
Who knows?

37
00:02:01.530 --> 00:02:04.400
But understanding this notion of now and
later, there's a first half and

38
00:02:04.400 --> 00:02:05.480
a second half.

39
00:02:05.480 --> 00:02:07.640
When we refer to functions
as continuations,

40
00:02:07.640 --> 00:02:12.110
what we mean is, we did the first
half of our program now, and

41
00:02:12.110 --> 00:02:14.640
we wrap the second half of
our program up in a callback.

42
00:02:15.680 --> 00:02:18.600
And we deferred that callback
to happen until later.

43
00:02:18.600 --> 00:02:22.000
And at that later moment,
we're going to pick up and

44
00:02:22.000 --> 00:02:24.951
continue our program
from where we left off.

45
00:02:24.951 --> 00:02:28.448
So that's where we get the term
continuations for callbacks.

46
00:02:31.641 --> 00:02:33.990
&gt;&gt; Kyle Simpson: How many of you have
heard that term callback hell before?

47
00:02:36.260 --> 00:02:39.800
I'm sure many of you will probably raise
your hands in the online chat as well.

48
00:02:39.800 --> 00:02:40.440
Callback hell,

49
00:02:40.440 --> 00:02:44.080
it's one of those shared things almost
like we could have a counseling session

50
00:02:44.080 --> 00:02:46.880
about all the nightmares that we've
had with callback hell, right?

51
00:02:46.880 --> 00:02:51.030
It's usually thought of as having
something to do with this idea of nesting.

52
00:02:51.030 --> 00:02:54.112
And that sometimes is referred to
as the pyramid of doom because

53
00:02:54.112 --> 00:02:56.800
that pyramidal shape,
triangular shape to our code.

54
00:02:58.960 --> 00:03:00.310
But is that we callback hell really is?

55
00:03:02.640 --> 00:03:05.978
I think it's much, much,
much deeper than that.

56
00:03:05.978 --> 00:03:09.144
I would go so far as to say, and
this isn't intended as an insult, but

57
00:03:09.144 --> 00:03:12.364
I would go so far as to say there's
an awful lot of my peers out there that

58
00:03:12.364 --> 00:03:16.150
have described callback hell as having to
do with the indentation in the nesting.

59
00:03:17.350 --> 00:03:19.990
My response is I don't think you've
thought very critically about what

60
00:03:19.990 --> 00:03:22.430
callbacks are really about and
callback hell is about.

61
00:03:22.430 --> 00:03:25.390
This is where I might differentiate
from some of my peers in that I'm much

62
00:03:25.390 --> 00:03:28.250
more focused on the concepts here,

63
00:03:28.250 --> 00:03:31.590
even than the actual
observations in the actual code.

64
00:03:31.590 --> 00:03:35.400
There's something
conceptually deficient here.

65
00:03:35.400 --> 00:03:37.920
There's two conceptually
deficient problems.

66
00:03:37.920 --> 00:03:40.890
I can start out proving to you that it
doesn't really have anything to do with

67
00:03:40.890 --> 00:03:45.350
nesting and indentation by
observing to you that this program

68
00:03:45.350 --> 00:03:48.160
does in fact suffer from callback hell.

69
00:03:48.160 --> 00:03:51.350
But I can rewrite this
program in a different style,

70
00:03:51.350 --> 00:03:53.520
sometimes referred to as
continuation passing style.

71
00:03:55.160 --> 00:03:59.210
And this code is not nearly as
obviously suffering from nesting and

72
00:03:59.210 --> 00:04:00.510
indentation problems, is it?

73
00:04:02.580 --> 00:04:06.370
We've used named function declarations
rather than inline function expressions.

74
00:04:06.370 --> 00:04:09.990
If you look really close you can still
see the fundamental nesting going on but

75
00:04:09.990 --> 00:04:13.030
we don't have the same
pyramidal shape to our code.

76
00:04:13.030 --> 00:04:16.680
And most people that took a glance at this
code would not naturally instinctively

77
00:04:16.680 --> 00:04:17.940
think callback hell.

78
00:04:19.550 --> 00:04:23.770
But that's why callback hell needs to have
a redefinition on our minds, because this

79
00:04:23.770 --> 00:04:27.320
code is every bit as susceptible to
callback hell as the previous code.

80
00:04:28.810 --> 00:04:32.580
Even though the style looks different,
it still has those same problems.

81
00:04:32.580 --> 00:04:35.800
We need a more nuanced, a deeper
view of what callback hell is about.

