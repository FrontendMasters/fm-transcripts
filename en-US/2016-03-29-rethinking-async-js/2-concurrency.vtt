WEBVTT

1
00:00:00.025 --> 00:00:03.984
[MUSIC]

2
00:00:03.984 --> 00:00:06.481
&gt;&gt; Kyle: That brings us to
this idea of concurrency.

3
00:00:06.481 --> 00:00:07.319
What does concurrency mean?

4
00:00:07.319 --> 00:00:11.520
A lot of people think concurrent means
two things happening at the same time.

5
00:00:11.520 --> 00:00:15.157
Again, it's one of those things if you
squint at it you might say, yeah, maybe

6
00:00:15.157 --> 00:00:18.875
they're kinda like the same but there's
an important nuance difference here.

7
00:00:18.875 --> 00:00:22.137
And by the way, if somebody wants
to object to my particular usage of

8
00:00:22.137 --> 00:00:25.820
the words, there's actually lots of
different meanings for these words.

9
00:00:25.820 --> 00:00:28.250
And it's hard to nail down
one particular thing, so

10
00:00:28.250 --> 00:00:31.850
I'm trying to be is consistent
within my own usage of these things.

11
00:00:31.850 --> 00:00:36.070
But there's actually, if you go and
read Wikipedia pages or other text on it,

12
00:00:36.070 --> 00:00:38.610
you'll find a whole range of
different opinions on these things.

13
00:00:38.610 --> 00:00:43.350
But my way of explaining to you what
concurrency is rather than saying with

14
00:00:43.350 --> 00:00:46.930
parallelism two things are happening at
the exact same instant, I would describe

15
00:00:46.930 --> 00:00:53.170
concurrency as two higher level tasks
happening within the same timeframe.

16
00:00:54.460 --> 00:00:56.954
So rather than an instant,
we're going to look at a timeframe.

17
00:00:56.954 --> 00:00:58.750
We're gonna say within this timeframe,

18
00:00:58.750 --> 00:01:01.700
two higher level operations
are going to occur.

19
00:01:01.700 --> 00:01:05.750
To understand the notion of higher
level items or higher level operations

20
00:01:05.750 --> 00:01:09.550
occurring, we also have to understand that
higher level, or what I might call macro

21
00:01:09.550 --> 00:01:14.920
level tasks can be broken up or thought of
as being broken up into micro level tasks.

22
00:01:16.210 --> 00:01:20.370
So here's a way to visualize the macro
level and the micro level, and

23
00:01:20.370 --> 00:01:21.576
how these things might go together.

24
00:01:21.576 --> 00:01:27.390
So the left-hand side we have this yellow
orange task, with a macro level task.

25
00:01:27.390 --> 00:01:30.551
Which is broken up into those
individual numbers, 1, 2, 3, 4.

26
00:01:30.551 --> 00:01:32.230
Which would be micro level tasks.

27
00:01:32.230 --> 00:01:34.600
These are my made up terms,
these aren't official terms.

28
00:01:34.600 --> 00:01:38.364
But macro level and micro level tasks.

29
00:01:38.364 --> 00:01:42.074
And then, on the right-hand side, we have
another macro level task represented by

30
00:01:42.074 --> 00:01:45.500
that blue green color, and
it's broken up into three pieces, 1, 2, 3.

31
00:01:45.500 --> 00:01:48.610
Now, for the easiness of math
I'm going to pretend and

32
00:01:48.610 --> 00:01:53.200
assume that each one of these micro level
tasks takes one full second to complete.

33
00:01:54.790 --> 00:01:59.320
So this overall system to do all of the
tasks it's going to take seven seconds,

34
00:01:59.320 --> 00:02:00.925
does everybody agree with that?.

35
00:02:00.925 --> 00:02:02.471
Cuz it's a single threaded system.

36
00:02:02.471 --> 00:02:05.120
Now, that could happen at
exactly the same moment.

37
00:02:05.120 --> 00:02:09.240
So those one second micro level tasks are
going to have to be scheduled in some way

38
00:02:09.240 --> 00:02:12.360
that all seven of them finish and
that's gonna take seven seconds.

39
00:02:12.360 --> 00:02:16.120
Let's pretend that the yellow orange
represents an Ajax request and

40
00:02:16.120 --> 00:02:18.060
response cycle.

41
00:02:18.060 --> 00:02:20.420
Fire off a request we
get a response back and

42
00:02:20.420 --> 00:02:24.490
let's pretend that the blue represents
a scroll that we scroll on the page and

43
00:02:24.490 --> 00:02:28.090
it repainted everything because we
scrolled to a new location of the page.

44
00:02:28.090 --> 00:02:32.630
These two operations have to
fundamentally happen on the same thread.

45
00:02:32.630 --> 00:02:36.789
The entire user interface of our browser
is happening on the same thread so

46
00:02:36.789 --> 00:02:41.753
our JavaScript, the garbage collector
the style engine, the repaint, everything,

47
00:02:41.753 --> 00:02:45.842
it's all happening on one thread which
means we kinda have to worry about

48
00:02:45.842 --> 00:02:50.297
contention and if you've ever had an
animation on your page have jitter in it.

49
00:02:50.297 --> 00:02:51.270
You know why that happened?

50
00:02:51.270 --> 00:02:56.468
Because something contended on the UI
thread at that moment your CSS engine

51
00:02:56.468 --> 00:03:01.676
was trying to your style your layout
engine was trying to repaint the page.

52
00:03:01.676 --> 00:03:05.350
It's a 60 frames a second way
that it's repainting your page.

53
00:03:05.350 --> 00:03:08.580
It tried to do that but at that exact
moment something else was running.

54
00:03:08.580 --> 00:03:10.070
So I had to wait an extra moment and

55
00:03:10.070 --> 00:03:13.670
that's what created that jitter,
single threaded.

56
00:03:13.670 --> 00:03:15.880
So if we have these higher level,

57
00:03:15.880 --> 00:03:18.990
macro level tasks that we
want to happen concurrently.

58
00:03:18.990 --> 00:03:22.700
I want the yellow and
the blue to happen at the same time.

59
00:03:22.700 --> 00:03:24.110
Why?

60
00:03:24.110 --> 00:03:25.998
Well, let's imagine they don't.

61
00:03:25.998 --> 00:03:30.705
One way of scheduling this system, one way
of scheduling this program is to do all of

62
00:03:30.705 --> 00:03:33.069
the yellow first and then all of the blue.

63
00:03:33.069 --> 00:03:35.160
What would that look like on our page?

64
00:03:35.160 --> 00:03:37.890
Ignoring the one second thing for
a moment, what it would look like on our

65
00:03:37.890 --> 00:03:42.550
page Is that it would look like I click
the button to make an Ajax request and

66
00:03:42.550 --> 00:03:45.070
while that was happening I
tried to scroll my page but

67
00:03:45.070 --> 00:03:48.470
everything was completely
frozen while that happened.

68
00:03:48.470 --> 00:03:53.230
And then, after it finished then it
sort of jumped back and caught up.

69
00:03:53.230 --> 00:03:57.350
Ways I precedent for that It's called
synchronous XHR, synchronous Ajax.

70
00:03:57.350 --> 00:04:00.070
One of the worst evils perpetrated
upon the web platforms.

71
00:04:00.070 --> 00:04:01.290
Terrible idea.

72
00:04:01.290 --> 00:04:04.640
There are people out there that
are crying and literally complaining

73
00:04:04.640 --> 00:04:08.830
on standards list saying,
how dare you take away my synchronous XHR?

74
00:04:08.830 --> 00:04:10.120
It's been deprecated and

75
00:04:10.120 --> 00:04:12.600
removed from the web platform
because it's a really bad idea.

76
00:04:13.670 --> 00:04:16.380
It's a terrible idea to schedule
it that way isn't it because

77
00:04:16.380 --> 00:04:19.690
even though the overall system
would still take seven seconds

78
00:04:19.690 --> 00:04:23.350
that particular choice of
scheduling those micro level tasks.

79
00:04:23.350 --> 00:04:26.040
Would feel terribly inefficient
does somebody agree with that

80
00:04:26.040 --> 00:04:27.720
just from a user experience perspective.

81
00:04:29.150 --> 00:04:32.150
If on the other hand we chose to
interleave these things together.

82
00:04:33.390 --> 00:04:34.990
Where one thing might be blocking so

83
00:04:34.990 --> 00:04:37.870
we can do something else while one thing
is blocking before it can move on to

84
00:04:37.870 --> 00:04:42.130
the next thing, if we chose to schedule
those things in an inner leaved fashion,

85
00:04:42.130 --> 00:04:44.810
the overall system might still
in fact take seven seconds.

86
00:04:46.190 --> 00:04:49.900
But the perception of the performance
is that things are gonna be happening

87
00:04:49.900 --> 00:04:53.210
in parallel really more importantly
we should be saying those things

88
00:04:53.210 --> 00:04:54.770
are happening concurrently.

89
00:04:54.770 --> 00:04:56.170
The Ajax and request and

90
00:04:56.170 --> 00:04:59.660
response is happening
concurrently with the repainting.

91
00:04:59.660 --> 00:05:02.920
Even though at any given instant only one
of those micro level tasks is occurring.

92
00:05:03.980 --> 00:05:08.343
So just to visualize that my fancy
animation took me about two hours to

93
00:05:08.343 --> 00:05:13.308
get right in Keynote, here's a way of
scheduling those micro level tasks onto

94
00:05:13.308 --> 00:05:16.864
that single thread in the middle
called the event loop.

95
00:05:16.864 --> 00:05:20.159
I don't know why it advance, the single
thread in the middle called the event loop

96
00:05:20.159 --> 00:05:22.450
that's what we call it in JavaScript.

97
00:05:22.450 --> 00:05:24.780
At any given instance only
doing one of those things.

98
00:05:24.780 --> 00:05:28.800
So when you have an Ajax
request that comes back and

99
00:05:28.800 --> 00:05:31.600
you need to fire the cal back for
a response.

100
00:05:33.810 --> 00:05:36.270
If at that moment somebody
is already executing.

101
00:05:37.480 --> 00:05:38.890
Nobody gets to cut in line.

102
00:05:40.550 --> 00:05:43.070
It's not like your response
callback gets to interrupt and say,

103
00:05:43.070 --> 00:05:44.710
it's time for me to run.

104
00:05:44.710 --> 00:05:45.510
You know what it does?

105
00:05:45.510 --> 00:05:47.390
It gets at the end of the line
just like everybody else.

106
00:05:48.500 --> 00:05:51.200
So when the garbage collector says,
I need to collect some garbage.

107
00:05:51.200 --> 00:05:54.370
And the style CSS repainter says,
I need to repaint the page.

108
00:05:54.370 --> 00:05:56.550
And the layout engines says,
I need to do some work.

109
00:05:56.550 --> 00:05:57.770
And the JavaScript engine,

110
00:05:57.770 --> 00:06:01.410
says I need to fire this response call
back in every single one of them.

111
00:06:01.410 --> 00:06:04.000
It's a first come first serve,
everybody gets at the end of the line.

112
00:06:04.000 --> 00:06:07.270
That is fundamentally
what the event loop is.

113
00:06:08.480 --> 00:06:12.138
Such is the high level view to
help you sort out what's going on.

114
00:06:12.138 --> 00:06:16.520
And the main point here is that
the scheduling of this is not always

115
00:06:16.520 --> 00:06:18.600
entirely within our control.

116
00:06:18.600 --> 00:06:22.790
Sometimes it's race conditions that
choose one versus the other happening.

117
00:06:22.790 --> 00:06:27.030
Not all that's happening, but there's
an awful lot of coordination necessary.

118
00:06:27.030 --> 00:06:29.410
Sometimes it's the coordination
of when things happen,

119
00:06:29.410 --> 00:06:33.360
but oftentimes it's the coordination
of responses to things happening.

120
00:06:34.730 --> 00:06:37.770
Cuz it's not always a very serial,
like do this and, and

121
00:06:37.770 --> 00:06:41.090
when that's finished do this and then when
that's an issue that oftentimes it's much

122
00:06:41.090 --> 00:06:45.400
more complex like hey go do
these three things in parallel.

123
00:06:45.400 --> 00:06:48.103
And then, when at least two of them
have finished you can move on and

124
00:06:48.103 --> 00:06:50.761
do this other thing and then when
that third one comes along you can

125
00:06:50.761 --> 00:06:52.428
branch out here and do this other thing.

126
00:06:52.428 --> 00:06:53.260
And before long.

127
00:06:53.260 --> 00:06:58.250
It's just crazy complex tree of different
states of things that could happen, and

128
00:06:58.250 --> 00:07:01.900
it's that complexity that we
have to manage in our programs.

129
00:07:01.900 --> 00:07:06.170
It's that complexity that begs for
us to have better patterns for

130
00:07:06.170 --> 00:07:07.480
concurrency management.

131
00:07:07.480 --> 00:07:11.070
That's what asynchronous programming is,
managing our concurrency.

132
00:07:12.880 --> 00:07:14.380
So that's a motivation for

133
00:07:14.380 --> 00:07:19.290
you from a philosophical and
conceptual basis of the motivation for

134
00:07:19.290 --> 00:07:24.770
why we go to the lengths that we do to
try to write the programs that we do.

135
00:07:24.770 --> 00:07:28.330
Everything that I'm gonna show you in
this workshop is something that could

136
00:07:28.330 --> 00:07:33.880
fundamentally be done with nothing but
the callback with no new functionality.

137
00:07:35.390 --> 00:07:39.900
But we're gonna see that the callbacks
fundamentally are Insufficient for

138
00:07:39.900 --> 00:07:41.910
expressing the higher and

139
00:07:41.910 --> 00:07:46.260
higher orders of complexity that our
modern JavaScript programs are doing.

140
00:07:46.260 --> 00:07:49.000
Our modern JavaScript programs
are falling all over themselves,

141
00:07:49.000 --> 00:07:50.820
because we need these
higher order patterns, and

142
00:07:50.820 --> 00:07:54.000
we're not disciplined enough to
learn them and implement them.

143
00:07:54.000 --> 00:07:56.570
We just keep doing the same thing we've
always done, because it always worked, and

144
00:07:56.570 --> 00:07:58.780
it always worked, and it always worked.

145
00:07:58.780 --> 00:08:03.260
This is a call to arms to say the new
baseline of competency as a JavaScript

146
00:08:03.260 --> 00:08:08.560
developers is to have a much more
sophisticated strategic and tactical

147
00:08:08.560 --> 00:08:12.440
approach to your concurrency management,
to your asynchronous programming.

