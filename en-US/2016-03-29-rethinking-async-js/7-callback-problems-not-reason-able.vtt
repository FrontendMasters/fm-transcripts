WEBVTT

1
00:00:00.000 --> 00:00:04.127
[MUSIC]

2
00:00:04.127 --> 00:00:06.685
&gt;&gt; Kyle: The second tenant of call back L.

3
00:00:06.685 --> 00:00:12.790
Well, I'm gonna fundamentally declare or
assert that callbacks are not reasonable.

4
00:00:14.930 --> 00:00:18.200
And I highlight reason to say suggest
I don't mean reasonable in the sense

5
00:00:18.200 --> 00:00:19.130
of like likeable.

6
00:00:19.130 --> 00:00:22.670
I mean reasonable,
they are not able to be reasoned about.

7
00:00:25.630 --> 00:00:26.460
Let me try to illustrate.

8
00:00:26.460 --> 00:00:28.470
How many of you have ever heard before or

9
00:00:28.470 --> 00:00:30.710
said before to yourself,
I'm a multitasker?

10
00:00:30.710 --> 00:00:32.556
Anybody ever say that before?

11
00:00:32.556 --> 00:00:33.632
It's pretty common.

12
00:00:33.632 --> 00:00:37.299
People talk about, I'm driving down
the street, I'm talking on the phone and

13
00:00:37.299 --> 00:00:41.017
texting, I have my laptop in the seat next
to me, and listening to the radio, and

14
00:00:41.017 --> 00:00:42.710
Mom is on the phone.

15
00:00:42.710 --> 00:00:45.260
Doing a whole bunch of
stuff on multitasking.

16
00:00:46.930 --> 00:00:47.750
Well that's nonsense.

17
00:00:47.750 --> 00:00:49.515
We're not actually multitaskers.

18
00:00:49.515 --> 00:00:50.955
At our highest level of cognition,

19
00:00:50.955 --> 00:00:52.972
which is the only part that
I care about right now.

20
00:00:52.972 --> 00:00:56.900
I'm not a neuroscientist, so I'm not
really speaking as a neuroscientist.

21
00:00:56.900 --> 00:00:59.600
But from what I know and
from what we can observe,

22
00:00:59.600 --> 00:01:05.070
at our highest level of cognition, our
brains are fundamentally single threaded.

23
00:01:05.070 --> 00:01:08.250
At any given instant our brain
is only thinking about and

24
00:01:08.250 --> 00:01:11.450
cognitively thinking
about one exact thing.

25
00:01:11.450 --> 00:01:14.186
Plenty of other parts of our brain are
taking care of all the other out of some

26
00:01:14.186 --> 00:01:16.550
of things like our heart and
breathing and all that other stuff.

27
00:01:16.550 --> 00:01:17.500
I'm not talking about that.

28
00:01:17.500 --> 00:01:20.703
I'm talking about the highest level
of cognition the part where we

29
00:01:20.703 --> 00:01:23.460
are intentionally planning and
thinking about things.

30
00:01:23.460 --> 00:01:27.610
And at that part we're only thinking
about one thing at that exact moment.

31
00:01:30.340 --> 00:01:33.910
So, let's imagine this
morning when you all woke up.

32
00:01:33.910 --> 00:01:37.790
This morning you thought to yourself,
I gotta planned out my day.

33
00:01:37.790 --> 00:01:42.190
So, when you woke up, you started planning
a day like, well I got to get some coffee,

34
00:01:42.190 --> 00:01:43.910
and I'll hop in the shower.

35
00:01:43.910 --> 00:01:48.290
And then I'll get in the car and drive
to work and then I'll head over to this

36
00:01:48.290 --> 00:01:53.390
workshop and you planned out your day in
a very sequential step by step fashion.

37
00:01:54.700 --> 00:01:57.410
Virtually all of us our brains
would say that's our brains work,

38
00:01:57.410 --> 00:01:59.800
we think about things in
a very sequential fashion.

39
00:01:59.800 --> 00:02:02.870
However, I'm also willing to
bet that virtually none of you

40
00:02:02.870 --> 00:02:05.860
had your morning play out
exactly the way you planned.

41
00:02:05.860 --> 00:02:09.730
You were up making some coffee and then
your mom called, so you got interrupted by

42
00:02:09.730 --> 00:02:12.890
that call that wasn't part of the plan and
then this other stuff happened and

43
00:02:12.890 --> 00:02:16.260
your car was out of gas and
your plan had to change.

44
00:02:16.260 --> 00:02:19.730
And thankfully you didn't have
when your mom called me like,

45
00:02:19.730 --> 00:02:22.360
well there's the whole day
shot I didn't plan for that.

46
00:02:22.360 --> 00:02:25.120
So, I better just go back to bed and
start of tomorrow.

47
00:02:25.120 --> 00:02:30.190
Your brain thankfully is interesting
a lot like the JavaScript engine,

48
00:02:30.190 --> 00:02:32.550
in that it can be interrupted event wise.

49
00:02:33.610 --> 00:02:37.560
Like an event, you can have an event fire
and it can choose to respond in a just.

50
00:02:39.080 --> 00:02:42.330
But that's not the part we care about,
the part that we care about here

51
00:02:42.330 --> 00:02:44.770
is the part of our cognition
where we planned things.

52
00:02:46.180 --> 00:02:49.640
And fundamentally, what I'm gonna argue
is that we naturally plan things and

53
00:02:49.640 --> 00:02:52.530
sequential synchronous
step by step fashion.

54
00:02:54.580 --> 00:03:01.410
So, if that's how we plan things,
that's also how we code, most naturally.

55
00:03:01.410 --> 00:03:02.430
Now I have a theory here.

56
00:03:02.430 --> 00:03:06.150
This is not a law, it's as close to as
proven a law as I can probably get.

57
00:03:06.150 --> 00:03:10.780
I have this theory that any
place where our brain diverges

58
00:03:10.780 --> 00:03:13.050
from the way the JavaScript engine works.

59
00:03:13.050 --> 00:03:15.800
At that moment where
the two diverged it is at

60
00:03:15.800 --> 00:03:17.590
that moment that bugs happen in our code.

61
00:03:19.720 --> 00:03:22.780
Wherever our brains diverged from
the way the JavaScript and yours.

62
00:03:22.780 --> 00:03:25.187
I can't do anything about how
the JavaScript engine works.

63
00:03:25.187 --> 00:03:27.360
It just works that way I can
teach you better about it,

64
00:03:27.360 --> 00:03:28.722
try to train your brains better.

65
00:03:28.722 --> 00:03:33.408
But I can also try to offer you patterns
that allow you to program more naturally

66
00:03:33.408 --> 00:03:37.750
like your brain, so that there
are hopefully less bugs in your program.

67
00:03:39.680 --> 00:03:42.668
That's basically my theory of teaching.

68
00:03:42.668 --> 00:03:47.295
How do I train you to write your code,
so that it works more like your brain so

69
00:03:47.295 --> 00:03:50.175
that there's less divergence and
less bugs.

70
00:03:50.175 --> 00:03:52.520
So, it's more reasonable,
it's more understandable.

71
00:03:53.790 --> 00:03:57.320
We see callback don't really offer
us much accordance in that way.

72
00:03:57.320 --> 00:04:00.730
Because we could think about it
from a pseudo task perspective

73
00:04:00.730 --> 00:04:02.814
like you know what I
love about pseudo code?

74
00:04:02.814 --> 00:04:07.870
Pseudo code awesome because you just get
to invent magical stuff out of thin air.

75
00:04:07.870 --> 00:04:09.930
I wish I could get paid to
write pseudo code all day,

76
00:04:09.930 --> 00:04:12.210
cuz it'd be the funnest job in the world.

77
00:04:12.210 --> 00:04:16.050
I get to invent stuff like on
line three where I invent pause.

78
00:04:16.050 --> 00:04:20.950
This magical thing that I invoke called
pause, which doesn't actually exist, but

79
00:04:20.950 --> 00:04:22.680
it doesn't matter cuz it's a pseudo code.

80
00:04:23.890 --> 00:04:26.320
And then, on line what is it,

81
00:04:26.320 --> 00:04:29.760
on line 9 I invent this other thing
that also doesn't exist called resume.

82
00:04:29.760 --> 00:04:34.480
I just magically pick up
where line 3 left off, right?

83
00:04:34.480 --> 00:04:36.730
That's how I'd write
this out in pseudo code.

84
00:04:36.730 --> 00:04:38.180
But as soon as a developer got hold of it,

85
00:04:38.180 --> 00:04:40.560
he'd say no no no, this,
you're just making stuff up.

86
00:04:40.560 --> 00:04:41.280
That's is not how it works.

87
00:04:41.280 --> 00:04:43.600
So, they'd begin to rearrange things, and

88
00:04:43.600 --> 00:04:46.112
they might rearrange
the pseudo code like that.

89
00:04:46.112 --> 00:04:50.430
And they say well, we can do this pause
and resume thing and then a pause and

90
00:04:50.430 --> 00:04:52.600
resume and see what we've done now?

91
00:04:52.600 --> 00:04:55.700
We've started to implement this
is a series of nested callbacks.

92
00:04:57.670 --> 00:05:01.970
Because callbacks alone that's
the only way for us to express and

93
00:05:01.970 --> 00:05:04.970
listen here's a here's a fancy term for
you.

94
00:05:04.970 --> 00:05:06.210
Temporal dependency.

95
00:05:07.870 --> 00:05:12.960
When one thing depends upon another thing
finishing before this thing can go,

96
00:05:12.960 --> 00:05:14.260
that's a temporal dependency.

97
00:05:16.020 --> 00:05:20.590
And the only way with callbacks for us to
express temporal dependency is nesting one

98
00:05:20.590 --> 00:05:23.990
inside of the other, the call to one
inside of the call to the other.

99
00:05:25.540 --> 00:05:27.550
Whether we do so
within line function expressions or

100
00:05:27.550 --> 00:05:29.230
with just the function calls.

101
00:05:29.230 --> 00:05:36.080
The only way to handle temporal dependency
in callback alone, is through nesting.

102
00:05:37.600 --> 00:05:39.620
Why is that such a problem?

103
00:05:39.620 --> 00:05:43.250
The reason it's such a problem is now your
brain doesn't get to linearly progress

104
00:05:43.250 --> 00:05:44.590
through the code.

105
00:05:44.590 --> 00:05:48.020
Your brain has to do what
I call non-local jumps.

106
00:05:48.020 --> 00:05:48.990
Here's a metaphor for you.

107
00:05:50.000 --> 00:05:52.420
How many of you remember way, way back.

108
00:05:52.420 --> 00:05:56.130
I'm talking like mid 80s,
the original Nintendo.

109
00:05:56.130 --> 00:06:00.628
And my favorite game of all time in
the original, and into Legend of Zelda.

110
00:06:00.628 --> 00:06:03.983
Anybody remember have to leave
the thing running forever and

111
00:06:03.983 --> 00:06:06.819
play it would take weeks
to play through whatever.

112
00:06:06.819 --> 00:06:10.283
You know what I loved about that game
though there is one part you would go

113
00:06:10.283 --> 00:06:10.934
into a cave.

114
00:06:10.934 --> 00:06:13.240
And all of the sudden the screen
would go completely black.

115
00:06:13.240 --> 00:06:16.180
Except for this tiny little circle around
link where he's holding his torch up.

116
00:06:17.570 --> 00:06:20.890
And you can see just a small little
portion of the map at any given moment.

117
00:06:20.890 --> 00:06:24.470
Now you can move link all over the cave
you could see the entire map but only this

118
00:06:24.470 --> 00:06:27.330
little circle at a time you could not
see the entire thing all at once.

119
00:06:28.900 --> 00:06:31.130
That's what modern JavaScript
programming is today.

120
00:06:31.130 --> 00:06:34.135
Modern asynchronous
JavaScript programming.

121
00:06:34.135 --> 00:06:37.221
Now this is not a knock on any individual
person listening to this to suggest that

122
00:06:37.221 --> 00:06:39.030
you are just fundamentally
bad programmers.

123
00:06:39.030 --> 00:06:41.280
We are all limited in this fashion,

124
00:06:41.280 --> 00:06:46.650
that the complexity of asynchronous flow
control that happens in our programs?

125
00:06:46.650 --> 00:06:49.970
There is no developer on your team that
understands all of those flow paths.

126
00:06:49.970 --> 00:06:53.500
It's just it's beyond our
capacity to understand.

127
00:06:53.500 --> 00:06:55.740
You might get step one,
then step two, then step three.

128
00:06:55.740 --> 00:06:58.630
But as soon as you get like step one,
two and three at the same time and

129
00:06:58.630 --> 00:07:02.250
when these two finish fire it off here and
there, you're completely lost.

130
00:07:02.250 --> 00:07:05.470
You can understand only just this
small little portion you get that and

131
00:07:05.470 --> 00:07:07.220
then you move over here and
you understand this part.

132
00:07:07.220 --> 00:07:09.710
And then you move over here and
you understand this part.

133
00:07:09.710 --> 00:07:14.023
And heaven forbid when those parts
are where the callbacks are jumping around

134
00:07:14.023 --> 00:07:16.021
between the files of your program.

135
00:07:16.021 --> 00:07:19.550
And you're fundamentally not able to plan
out your program the way your brain works.

136
00:07:21.030 --> 00:07:24.208
Cuz callbacks alone don't have
a way of expressing things,

137
00:07:24.208 --> 00:07:26.710
in a sequential synchronous
looking fashion.

138
00:07:28.630 --> 00:07:30.530
It seems like it's almost
impossible to do it.

139
00:07:30.530 --> 00:07:32.640
Doesn't it?
Doesn't that seem like almost a unicorn

140
00:07:32.640 --> 00:07:36.250
like there is no way to do asynchronous
coding in a synchronous fashion.

141
00:07:36.250 --> 00:07:40.260
That's like having false be true at
the same time, that seems impossible.

142
00:07:41.350 --> 00:07:44.680
When going all the trouble to talk
about this to suggest actually it is

143
00:07:44.680 --> 00:07:45.300
quite possible.

144
00:07:46.420 --> 00:07:47.690
But that's why we need a better pattern.

145
00:07:49.380 --> 00:07:53.310
Because what we need to do to solve
callback hell is to be able to express

146
00:07:53.310 --> 00:07:56.720
our code in a synchronous sequential
fashion the way our brains think.

147
00:07:56.720 --> 00:08:00.588
So, when we write code like that first
half of my program then the second

148
00:08:00.588 --> 00:08:01.687
half of my program.

149
00:08:01.687 --> 00:08:05.833
And we think to ourselves that it's
like blocking 1000 milliseconds.

150
00:08:05.833 --> 00:08:10.005
Which doesn't really exist in the
JavaScript engines is actually I'm gonna

151
00:08:10.005 --> 00:08:12.260
do a whole bunch other stuff during that.

152
00:08:14.180 --> 00:08:18.690
But we need to do is restore the ability
to express things in a synchronous

153
00:08:18.690 --> 00:08:24.425
sequential looking fashion.
&gt;&gt; Kyle: That's

154
00:08:24.425 --> 00:08:27.275
the other part of callback
hell that we need to

155
00:08:27.275 --> 00:08:31.480
fix to make our synchronous code
fundamentally more reasonable.

