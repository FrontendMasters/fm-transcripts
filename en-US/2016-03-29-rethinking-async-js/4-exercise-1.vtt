WEBVTT

1
00:00:00.000 --> 00:00:04.097
[MUSIC]

2
00:00:04.097 --> 00:00:06.390
&gt;&gt; Kyle: So
we're gonna do Exercise 1 okay.

3
00:00:06.390 --> 00:00:08.620
Now let me orient you to Exercise 1 and

4
00:00:08.620 --> 00:00:12.550
it's really important you get
this orientation solid right now.

5
00:00:12.550 --> 00:00:17.220
Because we are going to revisit this same
exercise all the way through seven, one,

6
00:00:17.220 --> 00:00:20.170
two, three, four, five, six,
seven is the exact same problem domain.

7
00:00:21.260 --> 00:00:25.350
Revisited in different asynchronous
patterns so starting out with Exercise 1.

8
00:00:25.350 --> 00:00:29.090
Let's open up the Read Me in the ex1.js.

9
00:00:29.090 --> 00:00:35.630
Let's try to get more familiar with
what this exercise is asking us to do.

10
00:00:35.630 --> 00:00:40.630
And honestly what it's asking us to do
is I've attempted to articulate a pretty

11
00:00:40.630 --> 00:00:44.820
common pattern that we run into especially
in the user interface of our systems.

12
00:00:46.030 --> 00:00:49.450
What you're going to be
asked to do is coordinate

13
00:00:49.450 --> 00:00:52.985
the responses to a set of fake AJAX calls.

14
00:00:52.985 --> 00:00:56.045
Fake AJAX calls cuz I don't want you to
worry about setting up your own servers or

15
00:00:56.045 --> 00:00:59.335
any of the stuff so
it's gonna pretend to do AJAX.

16
00:00:59.335 --> 00:01:02.725
And I've got random delays in there such
that every time you run your program

17
00:01:02.725 --> 00:01:04.675
you're gonna get different
behavior out of it.

18
00:01:04.675 --> 00:01:06.895
Just like you would in the real world,
okay?

19
00:01:06.895 --> 00:01:09.925
But these are fake AJAX they're not
actually making network calls but

20
00:01:09.925 --> 00:01:11.785
it actually doesn't matter
to us whether it's fake.

21
00:01:11.785 --> 00:01:17.725
What matters to us is that we want to
pretend as if we're making calls and

22
00:01:17.725 --> 00:01:21.983
respond to the sequence of
responses in a same way.

23
00:01:21.983 --> 00:01:26.156
And the way we want to respond to that is
we're going to request all three of them

24
00:01:26.156 --> 00:01:28.410
at the same time aka in parallel.

25
00:01:28.410 --> 00:01:31.610
We know we really should
use the term concurrent but

26
00:01:31.610 --> 00:01:35.300
in parallel we want to make the same three
responses at the same time, all right,

27
00:01:35.300 --> 00:01:37.240
same through request, at the same time.

28
00:01:37.240 --> 00:01:44.880
Now, when we get a response back from
file1 we want to print it right away.

29
00:01:44.880 --> 00:01:49.810
In fact, if we get file1 and
file2 back, but file3 is still waiting,

30
00:01:49.810 --> 00:01:51.830
we want to print file1 and
file2 right away.

31
00:01:51.830 --> 00:01:55.230
We want to render them as
soon as possible, why?

32
00:01:55.230 --> 00:01:58.710
User perception of performance.

33
00:01:58.710 --> 00:02:01.960
If we waited until all through,
we were back before we printed them,

34
00:02:01.960 --> 00:02:03.820
the user is going to feel
like the system is slower.

35
00:02:03.820 --> 00:02:07.510
But if we progressively run or whatever
we have they're going to feel like it's

36
00:02:07.510 --> 00:02:12.310
faster that's a really important
component of experiences user perception.

37
00:02:12.310 --> 00:02:16.160
Even if it takes the same amount of
time the perception is important but

38
00:02:16.160 --> 00:02:17.470
one additional wrinkle,

39
00:02:17.470 --> 00:02:20.040
which is I want to make sure that those
files print in the correct order.

40
00:02:21.370 --> 00:02:23.510
So if I file2 comes back right away and

41
00:02:23.510 --> 00:02:27.320
file1 is still pending,
don't print file2 yet.

42
00:02:27.320 --> 00:02:29.760
Wait until file1 gets there,
and then print both of them.

43
00:02:31.060 --> 00:02:35.000
So what we're wanting to do is
render ASAP but in the proper order.

44
00:02:36.430 --> 00:02:39.230
You see, there's a little bit of
a twist here and that's intentional and

45
00:02:39.230 --> 00:02:44.330
that's a generalized statement of a pretty
common pattern in user interface design.

46
00:02:44.330 --> 00:02:45.870
Doing multiple things in parallel,

47
00:02:45.870 --> 00:02:48.770
waiting for them to come back,
coordinating their responses,

48
00:02:48.770 --> 00:02:53.060
responding as soon as possible but
making sure things happen in a same order.

49
00:02:53.060 --> 00:02:55.770
That's what this exercise calls for
you to do.

50
00:02:55.770 --> 00:02:58.800
So let me orient you to ex1.js.

51
00:02:58.800 --> 00:03:01.810
You notice I have my fake AJAX,
it's mapping from

52
00:03:01.810 --> 00:03:06.290
URL like file one to some contents and
I've got some random delay in there.

53
00:03:06.290 --> 00:03:10.340
I've got an output utility which is
a convenient wrapper on the console along

54
00:03:10.340 --> 00:03:11.786
for you to use.

55
00:03:11.786 --> 00:03:16.240
Here's my getFile function it
makes that fake AJAX call and

56
00:03:16.240 --> 00:03:20.150
this is the part where you need to
start figuring out some code because

57
00:03:20.150 --> 00:03:23.320
it's pretty easy to call getFile
three times in parallel.

58
00:03:23.320 --> 00:03:28.580
I gave you that for free but the question
is not how to coordinate the requests.

59
00:03:29.660 --> 00:03:30.320
The question is,

60
00:03:30.320 --> 00:03:34.960
how do I properly coordinate the responses
and here is some hints for you.

61
00:03:34.960 --> 00:03:38.500
You're gonna have responses coming back,
because the randomized threads you can

62
00:03:38.500 --> 00:03:40.340
have them come back in
any particular order.

63
00:03:41.380 --> 00:03:43.100
Some of them might come back too early.

64
00:03:43.100 --> 00:03:46.180
Which means we're going to need
to have something hold onto

65
00:03:46.180 --> 00:03:47.360
some state for a while.

66
00:03:48.690 --> 00:03:51.620
You need some sort of global variable or
object or array or

67
00:03:51.620 --> 00:03:54.710
something to hold on the responses in
case you're not ready to print them.

68
00:03:56.660 --> 00:04:01.950
And you need to figure out of all all
these callbacks sharing over that or

69
00:04:01.950 --> 00:04:03.550
coordinating over that shared state and

70
00:04:03.550 --> 00:04:06.730
figuring out when it's okay to print
something and only printing it once.

71
00:04:06.730 --> 00:04:10.850
All right, so we're going to
take about I said five, we'll

72
00:04:10.850 --> 00:04:13.730
take ten minutes because I wanna make
sure everybody plays around with this.

73
00:04:13.730 --> 00:04:16.830
We'll take the ten minutes and
then we are gonna take an afternoon break

74
00:04:16.830 --> 00:04:18.920
after the ten minutes,
so we will come back.

75
00:04:18.920 --> 00:04:20.030
Talk through the solution and

76
00:04:20.030 --> 00:04:22.780
then that will be the time that
we take our afternoon break.

77
00:04:22.780 --> 00:04:26.850
But I want you to play around with
the pain of callbacks if you will

78
00:04:28.030 --> 00:04:32.650
by understanding just how hard it is to do
what should be sort of a simple use case.

79
00:04:32.650 --> 00:04:36.300
It's actually pretty difficult when you
have to manage all that state yourself

80
00:04:36.300 --> 00:04:36.810
through callbacks.

