WEBVTT

1
00:00:00.000 --> 00:00:03.852
[MUSIC]

2
00:00:03.852 --> 00:00:07.240
&gt;&gt; Kyle: Before the break we talked
about chaining promises together.

3
00:00:07.240 --> 00:00:12.520
But there's something fundamentally
limiting about this approach.

4
00:00:12.520 --> 00:00:15.770
The fundamental limitation of this
approach is that you have to know all of

5
00:00:15.770 --> 00:00:16.850
the promises in advance.

6
00:00:16.850 --> 00:00:21.190
You have to know how many steps
are in your flow control.

7
00:00:21.190 --> 00:00:24.760
Sometimes, and maybe even most of
the time, that is going to be the case.

8
00:00:24.760 --> 00:00:28.280
You're going to know, there's a discrete
set of steps that you can lay out.

9
00:00:28.280 --> 00:00:31.110
And you can chain your
promises together to

10
00:00:32.120 --> 00:00:35.040
approximate whatever flow
control is necessary.

11
00:00:35.040 --> 00:00:38.460
But there will be cases
where that won't be true.

12
00:00:38.460 --> 00:00:43.470
There will be cases where it's
impossible to predict author time,

13
00:00:43.470 --> 00:00:47.280
whether there might be three steps or
five steps or a thousand steps.

14
00:00:48.740 --> 00:00:53.320
And you probably don't wanna repeat
this pattern thousand times over.

15
00:00:54.560 --> 00:00:58.520
That's a lot of copy and pasting,
a lot of mistakes can be made,

16
00:00:58.520 --> 00:01:00.556
a lot of updates if you
have to tweak something.

17
00:01:00.556 --> 00:01:05.220
So, exercise four is going to ask us to

18
00:01:05.220 --> 00:01:07.750
change the way our brains are thinking
about it, at least a little bit.

19
00:01:09.020 --> 00:01:15.740
To try to understand how we might use
the functional nature of promises.

20
00:01:15.740 --> 00:01:18.071
The way that they work together,
the way that they compose.

21
00:01:18.071 --> 00:01:25.751
How might we use that in such
a fashion that we can get our.

22
00:01:29.549 --> 00:01:32.072
&gt;&gt; Kyle: Get our flow control
to be an arbitrary length,

23
00:01:32.072 --> 00:01:33.531
is what I'm trying to say.

24
00:01:33.531 --> 00:01:38.057
How can we get it to an arbitrary
length so that there could be one step,

25
00:01:38.057 --> 00:01:40.148
three steps, or 100 steps?

26
00:01:40.148 --> 00:01:42.778
So, we're gonna go and
open up exercise four.

27
00:01:47.129 --> 00:01:49.232
&gt;&gt; Kyle: I've already
given you the get file,

28
00:01:49.232 --> 00:01:51.670
cuz we've already implemented that part.

29
00:01:52.740 --> 00:01:57.720
But what I want you to do now is I want
you to think, what tools might I be

30
00:01:57.720 --> 00:02:02.623
able to use to create

31
00:02:02.623 --> 00:02:09.090
a list that could be arbitrarily long,
and still have all these actions occur?

32
00:02:09.090 --> 00:02:12.830
I'm trying very hard to give you hints
without giving you the full solution.

33
00:02:12.830 --> 00:02:17.460
So if you recall, we talked about
utility in a different workshop.

34
00:02:17.460 --> 00:02:20.289
We talked about utilities like map,

35
00:02:20.289 --> 00:02:24.036
which can take a list of values and
transform it.

36
00:02:24.036 --> 00:02:27.612
And we talked about
a utility called reduce,

37
00:02:27.612 --> 00:02:32.230
which can take a list of values and
compose them together.

38
00:02:34.190 --> 00:02:37.425
So if I had a list of URLs.

39
00:02:39.021 --> 00:02:41.680
&gt;&gt; Kyle: What could I transform
that list of URLs into?

40
00:02:43.700 --> 00:02:46.500
Maybe I could transform that list
of URLs into a list of promises.

41
00:02:46.500 --> 00:02:51.960
And if I had a list of promises, how might
I compose all those promises together?

42
00:02:53.870 --> 00:02:57.280
I could maybe do a reduction
on the list of promises and

43
00:02:57.280 --> 00:02:59.880
create an arbitrarily long promise chain.

44
00:03:01.500 --> 00:03:03.313
That's your exercise four.

45
00:03:03.313 --> 00:03:03.940
Have fun.

