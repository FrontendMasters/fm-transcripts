WEBVTT

1
00:00:00.000 --> 00:00:03.500
[MUSIC]

2
00:00:03.500 --> 00:00:07.440
&gt;&gt; Kyle Simpson: Member are from
a vent friend from the reactive side.

3
00:00:07.440 --> 00:00:10.390
Here's how we could set up an event
that listens for Dhamma vents.

4
00:00:10.390 --> 00:00:12.690
I mean a channel that listens for
dominance.

5
00:00:12.690 --> 00:00:17.380
I set up a channel on line two I
attach a click handler to it and

6
00:00:17.380 --> 00:00:21.090
you notice on line 4, I call put Async.

7
00:00:21.090 --> 00:00:22.920
Why am I not calling put?

8
00:00:22.920 --> 00:00:25.810
Well, cuz I'm not inside
of a generator right now.

9
00:00:25.810 --> 00:00:29.030
I'm inside of a click handler,
which is a plain old normal function.

10
00:00:30.330 --> 00:00:34.740
That putAsync would return me
a Promise if I wanted to listen to be

11
00:00:34.740 --> 00:00:36.590
told that the put had completed.

12
00:00:36.590 --> 00:00:38.690
But maybe I don't care
whether it completes.

13
00:00:38.690 --> 00:00:42.670
I'm just gonna put the event
object into the channel.

14
00:00:42.670 --> 00:00:47.570
And then there is a real legitimate
go routine that's waiting to hear for

15
00:00:47.570 --> 00:00:50.780
that message on line 12 he's
trying to take from that channel.

16
00:00:50.780 --> 00:00:54.555
So he just spinning in a while true
loop and each time you click that or

17
00:00:54.555 --> 00:00:56.158
each time you do that event.

18
00:00:56.158 --> 00:00:59.531
I'm going to take I'm going to get
notified by that by being able to take

19
00:00:59.531 --> 00:01:01.685
from the channel and
I'm gonna print it out.

20
00:01:01.685 --> 00:01:03.792
So what event am I doing, mousemove.

21
00:01:03.792 --> 00:01:08.512
But what this means is every time the
mousemove event fires as I move my cursor

22
00:01:08.512 --> 00:01:13.160
around on this element, I'm gonna send
a message down the channel that's

23
00:01:13.160 --> 00:01:17.180
the event object and print out the x,
y location in the console.

24
00:01:18.850 --> 00:01:23.027
So we gonna adapt to user interface
elements by having our events fire and

25
00:01:23.027 --> 00:01:24.884
pushing things down a channel.

26
00:01:24.884 --> 00:01:29.583
Does line 4 look an awful lot like
what we did with observables?

27
00:01:29.583 --> 00:01:32.930
We had a stream and
we were pushing events into a stream and

28
00:01:32.930 --> 00:01:37.940
somebody else was taking the events
off the stream and observing them.

29
00:01:37.940 --> 00:01:39.810
Is very similar concepts here.

30
00:01:39.810 --> 00:01:42.990
The major difference between
what we're modeling here and

31
00:01:42.990 --> 00:01:49.990
what we model with observables major
difference is back pressure, cuz we

32
00:01:49.990 --> 00:01:54.220
can model that I don't want you to send me
anything else until I'm ready to take it.

33
00:01:54.220 --> 00:01:55.700
That comes for free.

34
00:01:55.700 --> 00:01:56.930
We don't have to do any extra work.

35
00:01:56.930 --> 00:02:01.060
We don't have to convert our observable
from hot to cold to signal that, or

36
00:02:01.060 --> 00:02:02.360
anything crazy like that.

37
00:02:02.360 --> 00:02:07.991
We just don't take from the channel and
that's

38
00:02:07.991 --> 00:02:12.705
an automatic built in back pressure.
&gt;&gt; Speaker 2: So

39
00:02:12.705 --> 00:02:17.603
when you do take would you get
the most recent mouse event?

40
00:02:17.603 --> 00:02:21.970
Or would you get it?
&gt;&gt; Kyle Simpson: Yeah, in this case?

41
00:02:21.970 --> 00:02:22.610
&gt;&gt; Speaker 2: Yeah.

42
00:02:22.610 --> 00:02:23.348
&gt;&gt; Kyle Simpson: Every time the event

43
00:02:23.348 --> 00:02:25.655
fires, we're going to be putting
something into the stream.

44
00:02:25.655 --> 00:02:28.975
So you'd be taking them as fast,
and they could be piling up faster.

45
00:02:28.975 --> 00:02:32.359
But you notice we don't have any timeouts
here, so we're going to take them as

46
00:02:32.359 --> 00:02:33.594
fast as we possibly can.
&gt;&gt; Speaker 2: So

47
00:02:33.594 --> 00:02:36.894
putting putAsync then
overriding the previous one,

48
00:02:36.894 --> 00:02:38.960
is that the idea?
&gt;&gt; Kyle Simpson: No.

49
00:02:38.960 --> 00:02:40.115
&gt;&gt; Speaker 2: If you're not matching every

50
00:02:40.115 --> 00:02:42.429
single one, right?
&gt;&gt; Kyle Simpson: So every time it's going

51
00:02:42.429 --> 00:02:47.210
to try to put onto the channel, it's going
to say I can't put onto the channel yet

52
00:02:47.210 --> 00:02:50.060
because somebody is not
ready to take it yet.

53
00:02:50.060 --> 00:02:53.840
So I'm going to have,
let's say a bunch of mouse moves happened,

54
00:02:53.840 --> 00:02:58.600
a 100 mouse moves happen, but
the go routine had never fired a take yet.

55
00:02:58.600 --> 00:03:01.520
I have 100 separate waiting
Promises that were all

56
00:03:01.520 --> 00:03:04.340
in order going to try to push
their event down the stream but

57
00:03:04.340 --> 00:03:08.430
none of those events had been put on the
stream yet until the first take happens.

58
00:03:11.030 --> 00:03:14.310
So if I move my mouse real fast and
then this go routine happen.

59
00:03:14.310 --> 00:03:16.670
He would get all of those events and
print out all 100 of them.

60
00:03:18.710 --> 00:03:19.980
That's not throwing any events away.

61
00:03:22.900 --> 00:03:26.400
It's important to note that some
of the things here don't map

62
00:03:26.400 --> 00:03:30.750
perfectly to observable so for example
throwing away messages that we don't care

63
00:03:30.750 --> 00:03:33.260
about you're going have to
use something like alts.

64
00:03:33.260 --> 00:03:37.640
If you want this notion of being able
to have channels that you're not

65
00:03:37.640 --> 00:03:40.950
that you're sending stuff down that
nobody is on the other end listening to.

66
00:03:40.950 --> 00:03:43.650
You can make channels into
having a buffering mode so

67
00:03:43.650 --> 00:03:46.000
channels can have more
than buffer size one.

68
00:03:46.000 --> 00:03:47.509
So you could make them buffered and

69
00:03:47.509 --> 00:03:50.433
say I want to take ten of that sort
of time before I start listening.

70
00:03:50.433 --> 00:03:52.848
Lots of variations.

71
00:03:59.882 --> 00:04:00.813
&gt;&gt; Kyle Simpson: Just real quickly,

72
00:04:00.813 --> 00:04:01.806
just show you, CSP.

73
00:04:01.806 --> 00:04:05.201
I ported the same mechanism
into asynquence, again, so

74
00:04:05.201 --> 00:04:08.520
you don't have to go
learn some other library.

75
00:04:08.520 --> 00:04:10.150
You can do it all with the same library.

76
00:04:12.200 --> 00:04:13.730
You put go routines into runner.

77
00:04:14.960 --> 00:04:15.470
That's how you do it.

78
00:04:16.770 --> 00:04:20.620
So I have ASQ., basically ASQ.

79
00:04:20.620 --> 00:04:25.490
In front of every one of those
things that you've already seen.

80
00:04:25.490 --> 00:04:29.520
It's the exact same APIs that are in
the library but the namespace has ASQ.

81
00:04:29.520 --> 00:04:30.390
in front of all of them.

82
00:04:32.010 --> 00:04:33.511
Otherwise, it's exactly the same concept.

83
00:04:44.996 --> 00:04:48.120
&gt;&gt; Kyle Simpson: I almost skipped
over an important detail.

84
00:04:48.120 --> 00:04:50.790
Remember you were asking
earlier about global variables.

85
00:04:50.790 --> 00:04:53.090
I don't like the notion of
having global variables.

86
00:04:53.090 --> 00:04:56.080
So I automatically created a channel for
each go routine.

87
00:04:56.080 --> 00:05:00.140
There is one channel created
that they all get reference to.

88
00:05:00.140 --> 00:05:04.175
So they automatically have at least one
channel that they can all communicate on.

89
00:05:04.175 --> 00:05:07.060
And if you wanna make more
channels you can make channels and

90
00:05:07.060 --> 00:05:08.450
send them over the channel.

91
00:05:09.560 --> 00:05:11.239
So you don't have to use any
global variables at all.

92
00:05:17.340 --> 00:05:20.469
That's one difference with my
implementation versus the others.

93
00:05:20.469 --> 00:05:21.605
&gt;&gt; Speaker 3: In case,

94
00:05:21.605 --> 00:05:25.981
this ch is created for free or-
&gt;&gt; Kyle Simpson: It's created

95
00:05:25.981 --> 00:05:28.801
automatically by async ones.
&gt;&gt; Speaker 3: Not created somewhere else?

96
00:05:28.801 --> 00:05:30.419
&gt;&gt; Kyle Simpson: No it's created passed in

97
00:05:30.419 --> 00:05:31.010
for you.

98
00:05:34.910 --> 00:05:38.010
Because the assumption is every body
is gonna need at least one channel so

99
00:05:38.010 --> 00:05:41.050
let's go and create want to give it to
you, instead of making you make your own.

