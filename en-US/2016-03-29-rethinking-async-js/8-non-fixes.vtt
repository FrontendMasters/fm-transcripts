WEBVTT

1
00:00:00.000 --> 00:00:04.203
[MUSIC]

2
00:00:04.203 --> 00:00:07.630
&gt;&gt; Kyle: There's a bunch of Non Fixes
that have been attempted with callbacks.

3
00:00:07.630 --> 00:00:11.540
I call them Non Fixes cuz they're attempts
at fixing which actually did nothing but

4
00:00:11.540 --> 00:00:12.400
make it worse.

5
00:00:13.690 --> 00:00:20.520
So for example, in the callback world we
invented this pattern of split callbacks.

6
00:00:20.520 --> 00:00:23.550
If our problem that we're trying to solve
is that we've got an error that we don't

7
00:00:23.550 --> 00:00:27.330
wanna get swallowed in case there's
some problem with the main function,

8
00:00:27.330 --> 00:00:31.360
we're like I know I'll just pass
a separate callback for my errors.

9
00:00:31.360 --> 00:00:34.200
And that way if there is
some error at least I

10
00:00:34.200 --> 00:00:37.220
know that utility will have some way of
notifying me that there was a problem,

11
00:00:37.220 --> 00:00:41.190
all right, sounds good on the surface.

12
00:00:41.190 --> 00:00:44.530
Until you realize this actually
makes the trust issue a lot worse.

13
00:00:44.530 --> 00:00:47.350
Because now you have to ask yourself
what happens if they call neither of

14
00:00:47.350 --> 00:00:48.104
these functions?

15
00:00:48.104 --> 00:00:51.510
What happens if they call
both of these functions?

16
00:00:51.510 --> 00:00:54.480
Maybe they call the error first and
then the success.

17
00:00:54.480 --> 00:00:56.010
Or maybe they call the success first and
then the error.

18
00:00:56.010 --> 00:00:58.660
How is your program gonna handle that?

19
00:01:00.770 --> 00:01:03.500
I bet some of you have code like this and
you don't have any solution for that yet.

20
00:01:04.815 --> 00:01:06.820
It actually made the problem worse.

21
00:01:06.820 --> 00:01:08.450
There's more trust issues.

22
00:01:08.450 --> 00:01:12.430
So split callbacks while it sounded good
on the servers actually was a regression.

23
00:01:12.430 --> 00:01:16.000
It took us away from a good solution.

24
00:01:16.000 --> 00:01:19.717
In the node world, we invented what
often times referred to as node style,

25
00:01:19.717 --> 00:01:21.607
I like to call error first callbacks.

26
00:01:21.607 --> 00:01:25.350
Well let's go back to one callback,
two callbacks is crazy.

27
00:01:25.350 --> 00:01:27.100
Let's go back to one callback.

28
00:01:27.100 --> 00:01:31.460
But we'll reserve the first parameter
of that callback for the error signal.

29
00:01:32.780 --> 00:01:35.670
So if it's an error that we're signaling,
we'll always set that one and

30
00:01:35.670 --> 00:01:39.060
nothing else and if it's not
an error then we'll leave that.

31
00:01:39.060 --> 00:01:44.530
And so every single node callback that
you've ever written has this if else

32
00:01:44.530 --> 00:01:47.090
jazz going on in it,
where you're checking to see whether or

33
00:01:47.090 --> 00:01:48.180
not it's an error condition or not.

34
00:01:49.360 --> 00:01:52.250
So it seems like it solved the problem
about the split callbacks thing until

35
00:01:52.250 --> 00:01:55.390
you realize actually the same
questions occur here.

36
00:01:55.390 --> 00:01:59.232
What happens if the utility in question
does not behave the way you expect,

37
00:01:59.232 --> 00:02:02.530
what happens if it calls your call
back twice, once with the air and

38
00:02:02.530 --> 00:02:03.454
once with not the error.

39
00:02:03.454 --> 00:02:07.363
Or what happens if it calls with both
the error and the success parameters,

40
00:02:07.363 --> 00:02:09.920
how do you interpret
Interpret that situation?

41
00:02:11.550 --> 00:02:13.870
All the same trust issues are at play.

42
00:02:13.870 --> 00:02:17.490
We are not fundamentally in control
of the callback which means we have

43
00:02:17.490 --> 00:02:20.140
inverted all that control and
given it away to somebody else.

44
00:02:22.570 --> 00:02:23.810
So these are really non fixes.

45
00:02:26.000 --> 00:02:27.680
Now I've got a silly running example,

46
00:02:27.680 --> 00:02:30.840
how many of you recognize
the reference to the meaning of life?

47
00:02:30.840 --> 00:02:33.715
Hopefully I'm not so old that I'm the only
one that knows about Hitchhiker's Guide.

48
00:02:33.715 --> 00:02:38.211
If you don't know about that,
go read Wikipedia, something,

49
00:02:38.211 --> 00:02:40.200
get up to speed on it.

50
00:02:40.200 --> 00:02:44.790
Silly example calculating the meaning
of life using nested callbacks.

51
00:02:45.940 --> 00:02:48.043
Here's my think Ajax call,
my getData function.

52
00:02:48.043 --> 00:02:50.694
As it takes in a piece of data,
like a number, and

53
00:02:50.694 --> 00:02:55.031
then after a 1000 milliseconds,
it calls whatever callback I provided and

54
00:02:55.031 --> 00:02:57.660
just sends the data right back.

55
00:02:57.660 --> 00:03:01.995
So I pretend to ask for the answer,
the calculation of value 10.

56
00:03:01.995 --> 00:03:05.175
1000 milliseconds later, the function
is called and num1 is the value 10.

57
00:03:05.175 --> 00:03:07.655
Now x = 1 + 10.

58
00:03:07.655 --> 00:03:08.412
So x is 11.

59
00:03:08.412 --> 00:03:10.600
And then I make the call to 30.

60
00:03:10.600 --> 00:03:13.150
You notice that this
is sequential calling.

61
00:03:13.150 --> 00:03:17.230
I've nested these calls together because
they have a temporal dependency,

62
00:03:17.230 --> 00:03:20.219
I can't calculate 31 until
after I've calculated 11.

63
00:03:22.530 --> 00:03:25.681
And then after both of those have been
calculated, then I put the two together,

64
00:03:25.681 --> 00:03:26.588
meaning of life 42.

65
00:03:26.588 --> 00:03:33.740
I ask for that from to be computed in 1000
milliseconds later I get my answer back.

66
00:03:33.740 --> 00:03:34.748
Meaning of life 42.

67
00:03:34.748 --> 00:03:39.192
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Kyle: Yep sorry,

68
00:03:39.192 --> 00:03:43.400
we're talking about lines 5 and
lines 7 for the getData calls.

69
00:03:43.400 --> 00:03:45.450
Line 9 for
the getData call of meaning of life.

70
00:03:45.450 --> 00:03:48.553
And then finally the answer
is coming back on line 11.

71
00:03:48.553 --> 00:03:52.374
Thankfully mine only
took 1000 milliseconds or

72
00:03:52.374 --> 00:03:56.520
3 instead of trillions of years or
whatever.

73
00:03:56.520 --> 00:03:59.040
That would be a pretty big number for
the setTimeout.

74
00:04:01.480 --> 00:04:03.340
But you see here I have
the nested callbacks.

75
00:04:03.340 --> 00:04:08.960
And I have all the problems of, this is
non-local non-sequential reasoning even.

76
00:04:08.960 --> 00:04:11.680
Yes, vertically,
I can move through the pyramid.

77
00:04:11.680 --> 00:04:14.910
But what happens when I move one of
those callbacks into another module

78
00:04:14.910 --> 00:04:16.170
of my utility?

79
00:04:16.170 --> 00:04:20.689
Now I've got this non-local jump over
to some other location to understand

80
00:04:20.689 --> 00:04:21.968
what's happening.

81
00:04:21.968 --> 00:04:25.810
[COUGH] And I have all the trust
issues in inversion of control.

