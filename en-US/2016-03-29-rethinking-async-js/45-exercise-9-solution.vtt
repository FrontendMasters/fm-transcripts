WEBVTT

1
00:00:00.000 --> 00:00:03.847
[MUSIC]

2
00:00:03.847 --> 00:00:08.670
&gt;&gt; Kyle Simpson: CSP, probably for
several of you, a bit brain bending.

3
00:00:08.670 --> 00:00:13.830
Still brain bending for me, and I've
been at this for awhile, so that's okay.

4
00:00:13.830 --> 00:00:16.230
Don't run away from those things
that twist your brain a bit.

5
00:00:17.410 --> 00:00:20.130
My instinct is when I see something
that is twisting my brain, and

6
00:00:20.130 --> 00:00:23.730
I'm not really sure I understand it,
that's the thing I run towards

7
00:00:23.730 --> 00:00:25.760
because I feel like there's
probably something I'm missing and

8
00:00:25.760 --> 00:00:28.230
it's probably really, really powerful and
really, really useful.

9
00:00:28.230 --> 00:00:30.616
So I encourage you to embrace that.

10
00:00:30.616 --> 00:00:37.477
Rather than fully
&gt;&gt; Kyle Simpson: Fully

11
00:00:37.477 --> 00:00:42.014
develop the solution for you from scratch,
I'm going to switch over to

12
00:00:42.014 --> 00:00:46.326
the fixed version and just walk you
through the different pieces and

13
00:00:46.326 --> 00:00:50.183
why they're there,
partly that's just not to overwhelm so

14
00:00:50.183 --> 00:00:54.456
much and partly to save time, so
we can get on to our last exercise.

15
00:00:54.456 --> 00:00:58.580
All right, so what I'm first doing here,

16
00:00:58.580 --> 00:01:02.550
this should look familiar
from the reactive solution.

17
00:01:02.550 --> 00:01:05.600
I'm setting up a channel for
each of the clicks and messages.

18
00:01:05.600 --> 00:01:09.870
So I'm going to use channels for
my communication rather than observables.

19
00:01:11.040 --> 00:01:14.440
That should make pretty
straightforward sense and

20
00:01:14.440 --> 00:01:18.170
then I have my runner which is
going to run my two go routines.

21
00:01:18.170 --> 00:01:21.600
I'm gonna have one for
sampling the click events and one for

22
00:01:21.600 --> 00:01:23.140
logging out those click messages.

23
00:01:23.140 --> 00:01:25.054
So those are my to go
routines that are gonna run.

24
00:01:26.530 --> 00:01:31.190
Now I'm also going to listen
to the clicks from the button.

25
00:01:31.190 --> 00:01:33.840
So lets look at what
listen to clicks is doing.

26
00:01:33.840 --> 00:01:36.490
What I'm doing is I've got
a variable called queued click,

27
00:01:36.490 --> 00:01:38.580
it's kind of like what latest
was in the previous one.

28
00:01:38.580 --> 00:01:45.850
But queued click is going to keep
the return value from putAsync.

29
00:01:45.850 --> 00:01:50.090
Remember I said putAsync would return
as a promise that would let us know

30
00:01:50.090 --> 00:01:53.450
whenever the put had been
accepted by the channel.

31
00:01:53.450 --> 00:01:58.700
So I'm gonna take advantage of that and
say, I don't want to queue any more clicks

32
00:01:58.700 --> 00:02:01.280
until I know that the previous
one has already been accepted.

33
00:02:02.310 --> 00:02:07.510
So it's a way of sort of simulating in a
non go routine, that back pressure thing.

34
00:02:07.510 --> 00:02:11.840
So I'm gonna store it off into
a variable only if it hasn't been

35
00:02:11.840 --> 00:02:15.490
stored off in a variable, and I'm going
to listen to the completion of that and

36
00:02:15.490 --> 00:02:16.830
that's when I'm going to clear it out.

37
00:02:16.830 --> 00:02:20.610
So only one click event is going
to be able to go into the channel,

38
00:02:20.610 --> 00:02:24.512
be pending and waiting at a time
rather than them stacking up.

39
00:02:24.512 --> 00:02:28.940
That's how I'm gonna prevent that because
there really isn't a direct way or

40
00:02:28.940 --> 00:02:31.670
even a proper way of
draining out a channel.

41
00:02:32.760 --> 00:02:34.620
So you're not gonna wannna
go down that direction.

42
00:02:34.620 --> 00:02:37.030
So here rather than doing that,
I'm going to

43
00:02:37.030 --> 00:02:41.640
simulate the back pressure by just
knowing that it hasn't been received yet.

44
00:02:41.640 --> 00:02:45.850
If I were inside of a generator here,
I wouldn't need to be storing off and

45
00:02:45.850 --> 00:02:48.490
listening to a promise,
I would just yield on the put.

46
00:02:49.660 --> 00:02:53.550
But I'm not inside of a generator
because this function's being called by

47
00:02:53.550 --> 00:02:54.980
a click handler every time.

48
00:02:54.980 --> 00:02:58.640
So that's why I have to go the extra route
of dealing with something as a promise.

49
00:03:00.520 --> 00:03:03.090
This is one of the reasons
why I said earlier,

50
00:03:03.090 --> 00:03:06.220
that these higher level patterns even
though they're much more powerful and

51
00:03:06.220 --> 00:03:11.110
they do offer some really nice affordances
that the lower level patterns don't,

52
00:03:11.110 --> 00:03:13.930
they're not fully replacing
the lower level patterns.

53
00:03:13.930 --> 00:03:17.630
We still need to understand what a promise
is because there's gonna be times when

54
00:03:17.630 --> 00:03:21.420
a promise is gonna be useful
to accomplish something.

55
00:03:21.420 --> 00:03:27.610
So let's take a look at sample clicks.

56
00:03:27.610 --> 00:03:31.620
I'm gonna have a while true loop
spinning and I'm gonna take from a 1,000

57
00:03:31.620 --> 00:03:36.460
millisecond timeout channel And
I'm going to take from the clicks.

58
00:03:37.790 --> 00:03:40.000
So remember I'm only allowing
one click to go down.

59
00:03:40.000 --> 00:03:43.540
So I'm gonna sit here and wait until
there is a click ready for me and

60
00:03:43.540 --> 00:03:46.240
then I'm going to put a message out.

61
00:03:48.820 --> 00:03:50.930
And here's my log click.

62
00:03:50.930 --> 00:03:52.771
I'm going to sit here waiting for

63
00:03:52.771 --> 00:03:56.981
somebody to put something on to the
messages channel and I'm going to append

64
00:03:56.981 --> 00:04:03.164
what I get to the list.
&gt;&gt; Kyle Simpson: Not

65
00:04:03.164 --> 00:04:08.680
terribly dissimilar from our reactive
solution in terms of how we split it up.

66
00:04:10.460 --> 00:04:12.470
So hopefully that made at
least a little bit of sense.

67
00:04:14.200 --> 00:04:17.000
There is one difference that
I do wanna point out just in

68
00:04:17.000 --> 00:04:19.790
the interest of full transparency here.

69
00:04:19.790 --> 00:04:25.590
When we're sampling,
we're throwing away all old events and

70
00:04:25.590 --> 00:04:30.640
here, we are throwing away events by just
not even putting them into the queue.

71
00:04:30.640 --> 00:04:37.240
So we're actually storing the first
event that happened, whereas

72
00:04:37.240 --> 00:04:42.650
in the reactive observables thing, we were
keeping only the last event to happen.

73
00:04:42.650 --> 00:04:45.910
So if you had a thousand events
a thousand button clicks between now and

74
00:04:45.910 --> 00:04:47.650
the last time the timer fired.

75
00:04:47.650 --> 00:04:49.600
We only use the last event and

76
00:04:49.600 --> 00:04:54.840
here we're using the first event and
throwing away subsequent.

77
00:04:54.840 --> 00:04:57.450
So there is a slight
difference there conceptually.

78
00:05:00.840 --> 00:05:01.744
As with the reactive,

79
00:05:01.744 --> 00:05:05.410
there are 100 different ways that you
could've modelled this differently.

80
00:05:05.410 --> 00:05:09.520
Some of those may have ended up
producing different behaviors there, but

81
00:05:09.520 --> 00:05:13.080
I was going for the simplest way
to illustrate the same kinds of

82
00:05:13.080 --> 00:05:17.840
concepts here.

83
00:05:17.840 --> 00:05:19.443
So, questions about csp.

84
00:05:28.504 --> 00:05:31.920
&gt;&gt; Kyle Simpson: Maybe we're just in
that my brain is completely melted.

85
00:05:31.920 --> 00:05:35.220
I couldn't possibly formulate
a full English sentence anyway.

86
00:05:35.220 --> 00:05:38.780
I get there too, its no problem.
&gt;&gt; Speaker 2: I'm just trying to do

87
00:05:38.780 --> 00:05:41.660
something simple and it's not not working.

88
00:05:41.660 --> 00:05:45.607
So we could back up and say why can't I
just print something on the screen, but

89
00:05:45.607 --> 00:05:48.650
that seems to be like a waste
of everybody else's time.

90
00:05:48.650 --> 00:05:49.260
&gt;&gt; Kyle Simpson: Okay well,

91
00:05:49.260 --> 00:05:51.330
over a break or at the end or something,

92
00:05:51.330 --> 00:05:54.170
let's talk through it.
&gt;&gt; Speaker 3: Yeah,

93
00:05:54.170 --> 00:05:56.010
is it always used with generators or

94
00:05:56.010 --> 00:05:59.580
almost always used with generators?
&gt;&gt; Kyle Simpson: Generators are the way to

95
00:05:59.580 --> 00:06:02.900
model a Go routine most
directly in JavaScript.

96
00:06:02.900 --> 00:06:04.300
If you didn't use a generator,

97
00:06:04.300 --> 00:06:07.690
you'd be doing a lot of extra work to
make your own state machine stuff.

98
00:06:07.690 --> 00:06:10.940
And you wouldn't get the benefit
of that synchronous semantic

99
00:06:10.940 --> 00:06:12.790
the way you want.
&gt;&gt; Speaker 3: So

100
00:06:12.790 --> 00:06:16.620
the power comes from these channels
plus the generator together?

101
00:06:17.760 --> 00:06:19.710
&gt;&gt; Kyle Simpson: Yeah, yeah, exactly.

102
00:06:19.710 --> 00:06:23.325
If you already learned the power of
generators, which is the synchronous

103
00:06:23.325 --> 00:06:28.180
sequential-looking async, then you layer
on the semantic that channels give us,

104
00:06:28.180 --> 00:06:30.230
that blocking, back pressure semantic.

105
00:06:30.230 --> 00:06:31.840
That's what CSP is giving us.

106
00:06:40.970 --> 00:06:41.680
&gt;&gt; Kyle Simpson: All right,

107
00:06:41.680 --> 00:06:46.090
before we go on to our last exercise,
I wanted to just show you something.

108
00:06:46.090 --> 00:06:48.800
This is an in-process work of mine.

109
00:06:53.730 --> 00:06:57.970
I started about a year ago
thinking about this problem.

110
00:06:57.970 --> 00:07:01.100
When I first started getting into CSP, it
was one of the first things that occurred

111
00:07:01.100 --> 00:07:05.770
to me and then I realized very quickly
when I was implementing my own CSP stuff,

112
00:07:05.770 --> 00:07:08.700
how hard it would be to do this
thing that I had dreamed of doing.

113
00:07:09.720 --> 00:07:11.660
But I thought in the back of my head,
one of these days,

114
00:07:11.660 --> 00:07:14.670
I'll get around to trying my hand at it.

115
00:07:14.670 --> 00:07:17.760
And then about three months ago,

116
00:07:17.760 --> 00:07:23.230
I got invited to speak at a conference and
I was like, you know, I'm gonna propose

117
00:07:23.230 --> 00:07:27.970
that I talk to them about this moonshot
that I'm not even sure is possible.

118
00:07:27.970 --> 00:07:31.360
So I gave myself a deadline by
which I would have to do that and

119
00:07:31.360 --> 00:07:32.840
that deadline is a week from now.

120
00:07:34.370 --> 00:07:37.340
So what I'm gonna show you,
it's the first time I'm showing this,

121
00:07:37.340 --> 00:07:41.500
what I'm gonna show you is
a proof of concept for a solution

122
00:07:41.500 --> 00:07:47.350
to this idea that I came up with and
it's directly related to the CSP stuff.

123
00:07:47.350 --> 00:07:51.270
What's happening here in our CSP is
that we're modelling these generators,

124
00:07:51.270 --> 00:07:54.370
I mean we're modelling these
processes as generators

125
00:07:54.370 --> 00:07:58.680
within the same JavaScript program, which
is great because we get the independence,

126
00:07:58.680 --> 00:08:01.370
the semantics of blocking,
and all of that stuff.

127
00:08:01.370 --> 00:08:03.060
But from a performance perspective,

128
00:08:03.060 --> 00:08:05.140
these generators are not
running on separate threads.

129
00:08:06.940 --> 00:08:10.940
So we're not really getting the full
power of something like Go or

130
00:08:10.940 --> 00:08:12.490
Clojurescript the way they model stuff.

131
00:08:12.490 --> 00:08:16.500
We're not getting that because we're not
actually using multiple threads here,

132
00:08:16.500 --> 00:08:20.920
multiple processes, we're using one
single blocking JavaScript event.

133
00:08:22.110 --> 00:08:24.710
So about a year ago,
I was wondering to myself,

134
00:08:24.710 --> 00:08:30.840
I wonder what it would be like if I could
create a channel for usage with CSP,

135
00:08:30.840 --> 00:08:36.480
where the channel itself was implemented
as a bridge to a remote thread.

136
00:08:38.000 --> 00:08:41.520
What if I could have the same Go routine,
like the one that's on line 27 to 35.

137
00:08:41.520 --> 00:08:45.030
What if I can have that in the browser and

138
00:08:45.030 --> 00:08:50.110
then the ones from line 38 to 43,
would if it could be on the server?

139
00:08:51.860 --> 00:08:56.040
Two different go routines that could
communicate with each other exactly

140
00:08:56.040 --> 00:08:59.230
the same way using
the channel semantic and

141
00:08:59.230 --> 00:09:03.400
have the channel figure out how
to bridge across a remote wire.

142
00:09:05.270 --> 00:09:09.980
And I thought at first that sounds
not that hard and then as I got into

143
00:09:09.980 --> 00:09:13.760
the implementation of it, I was like
holy crap, that's really hard to do

144
00:09:13.760 --> 00:09:17.500
because there's a whole lot under the
covers just to make these channels work.

145
00:09:17.500 --> 00:09:19.130
This is not an easy implementation.

146
00:09:20.540 --> 00:09:22.530
So I put it off for months and
months and months and

147
00:09:22.530 --> 00:09:26.150
then I said three months ago I said,
I'm going to get around to trying.

148
00:09:26.150 --> 00:09:32.030
And at that point, I was about 30%
sure that it was even possible.

149
00:09:32.030 --> 00:09:34.320
I was like well, why not?

150
00:09:34.320 --> 00:09:38.260
Let's propose a conference talk and
see whether I can make it happen.

151
00:09:38.260 --> 00:09:40.830
If not,
I'll fall back on one of my other talks.

152
00:09:42.100 --> 00:09:43.050
So I've been working on it for

153
00:09:43.050 --> 00:09:46.960
the last several months in all
of my very limited free time.

154
00:09:46.960 --> 00:09:52.030
And about a week ago,
I got the first message to cross

155
00:09:52.030 --> 00:09:56.500
the thread barrier across the process
barrier, not between browser and server,

156
00:09:56.500 --> 00:10:00.040
but now that I've proven that I can do it
here, I can easily do it over the wire.

157
00:10:00.040 --> 00:10:03.500
When I started which I thought would be
a lot easier to develop is what if I could

158
00:10:03.500 --> 00:10:05.010
do this between the browser and

159
00:10:05.010 --> 00:10:09.850
a Web Worker, have a remote web worker
that I could spin up a Go routine in?

160
00:10:09.850 --> 00:10:11.630
And if I could do it in one of them,

161
00:10:11.630 --> 00:10:16.380
then I could spin up 10,000 Web Workers
with 10,000 independent Go routines and

162
00:10:16.380 --> 00:10:18.400
communicate with all of
them through channels.

163
00:10:18.400 --> 00:10:19.970
So my proof of concept was good.

164
00:10:19.970 --> 00:10:22.402
I could spin up a Web Worker
with a Go routine and

165
00:10:22.402 --> 00:10:27.460
spin up the browser with a Go routine and
have them do blocking communication.

166
00:10:27.460 --> 00:10:31.470
And what I decided to illustrate that with
is, I would have the Web Worker do some

167
00:10:31.470 --> 00:10:36.240
blocking activity like run a fore
loop all the way up to like 1

168
00:10:36.240 --> 00:10:40.180
trillion which would take several seconds,
which would block the Web Worker and

169
00:10:40.180 --> 00:10:43.740
if that code was running in a browser,
it would block up the browser page.

170
00:10:43.740 --> 00:10:47.430
So could I let that happen in a Web Worker
while my web page continued to be

171
00:10:47.430 --> 00:10:51.510
interacting, and then as soon as
the Web Worker was ready to take and

172
00:10:51.510 --> 00:10:54.310
send a message,
then the message would go through.

173
00:10:54.310 --> 00:10:59.750
So that was my proof of concept and
this is networking.

174
00:10:59.750 --> 00:11:04.550
So right now, the Web Worker is running
a loop up to 1 trillion and then there,

175
00:11:04.550 --> 00:11:07.930
whatever that number is and
then it sent me that message along.

176
00:11:07.930 --> 00:11:09.540
And while it was running
in the background,

177
00:11:09.540 --> 00:11:14.543
my browser remains
completely interactible.

178
00:11:15.700 --> 00:11:18.400
So that doesn't look impressive at all,
but holy crap,

179
00:11:18.400 --> 00:11:19.890
was that a lot of work to get!

180
00:11:19.890 --> 00:11:22.860
I mean I've spent months trying to
figure out how to get this to work and

181
00:11:22.860 --> 00:11:26.660
developing the protocols for the back and
forth messaging, because with CSP,

182
00:11:26.660 --> 00:11:28.980
you have to know that the message
got to the other side.

183
00:11:28.980 --> 00:11:33.250
So there has to be an ACK involved,
where you let it know and you don't know,

184
00:11:33.250 --> 00:11:34.430
when you're sending a message out,

185
00:11:34.430 --> 00:11:37.430
you don't know if somebody else is sending
a message in, and what's the sequencing.

186
00:11:37.430 --> 00:11:41.290
It was a lot more work than I thought,
but I finally got a proof of concept for

187
00:11:41.290 --> 00:11:44.760
remote CSP channels with JavaScript.

188
00:11:44.760 --> 00:11:48.180
So now with that protocol in place,
all you have to do is write a very simple

189
00:11:48.180 --> 00:11:53.170
wrapper for Web Workers, which I now have,
write another one for cross frame

190
00:11:53.170 --> 00:11:57.340
communications, write another one for
web socket communication to a server,

191
00:11:57.340 --> 00:12:00.040
basically any remote process
that you can dream up.

192
00:12:00.040 --> 00:12:05.510
You can now use a channel to send
CSP messages back and forth so.

193
00:12:05.510 --> 00:12:10.180
That's where I'm at with CSP, I'm trying
to dream up doing really powerful stuff

194
00:12:10.180 --> 00:12:14.450
like even having truly remote, truly
independent, truly threaded processes,

195
00:12:14.450 --> 00:12:18.620
even on Node where Go is
the one that kind of like wins

196
00:12:18.620 --> 00:12:21.876
in terms of being able to spin out
10,000 lightweight threads or whatever.

197
00:12:21.876 --> 00:12:26.940
It's not gonna be hard at all to spin
up an adapter for the child process and

198
00:12:26.940 --> 00:12:30.730
Node, so I'll be able to spin
up 10,000 child process threads,

199
00:12:30.730 --> 00:12:34.360
very lightweight and have each one of
them with their own Go routine and

200
00:12:34.360 --> 00:12:38.300
split up large amounts of work
into a very highly current system.

