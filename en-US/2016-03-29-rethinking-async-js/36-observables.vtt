WEBVTT

1
00:00:00.000 --> 00:00:03.782
[MUSIC]

2
00:00:03.782 --> 00:00:06.062
&gt;&gt; Kyle Simpson: Enter observables.

3
00:00:06.062 --> 00:00:11.930
Now, understand that Observables
are not a guarantee for JavaScript.

4
00:00:11.930 --> 00:00:15.240
Right now they are implemented
in user-land libraries, and

5
00:00:15.240 --> 00:00:18.370
there is a proposal for
Observables to land in the language.

6
00:00:19.560 --> 00:00:20.740
At some point,

7
00:00:20.740 --> 00:00:24.134
there was a strong feeling that they
might land in the ES7 time frame.

8
00:00:25.250 --> 00:00:29.990
As far as I'm aware, I don't think
that's actually gonna happen in the ES7,

9
00:00:29.990 --> 00:00:30.740
meaning ES2016.

10
00:00:32.970 --> 00:00:37.560
Because as far as I'm aware as of today,
I think the feature cut off for

11
00:00:37.560 --> 00:00:39.420
ES2016 is like next month.

12
00:00:41.150 --> 00:00:45.620
So Observables are on a good path and
there's a pretty good chance we're going

13
00:00:45.620 --> 00:00:48.430
to get something like this
natively in the language.

14
00:00:48.430 --> 00:00:51.220
It just might not be next month.

15
00:00:51.220 --> 00:00:53.240
So it might be a little bit further off.

16
00:00:53.240 --> 00:00:56.890
And that means that what we're
about to learn with Observables,

17
00:00:56.890 --> 00:01:02.030
we're learning based upon the semantics
of a particular library implementation.

18
00:01:02.030 --> 00:01:07.930
We don't have a very good sense of exactly
what they're going to be from a native

19
00:01:07.930 --> 00:01:11.310
primitive perspective,
like we did with promises.

20
00:01:11.310 --> 00:01:16.280
So the caveat here is the sorts of stuff
that we're about to talk about is subject

21
00:01:16.280 --> 00:01:20.190
to some flux, it's subject to some
evolution between now and the time that

22
00:01:20.190 --> 00:01:24.680
some final standard lands Observables may
end up being called something different.

23
00:01:24.680 --> 00:01:28.460
They might have a different looking API,
who knows, but

24
00:01:28.460 --> 00:01:33.630
right now there's a pretty
good library out there for

25
00:01:33.630 --> 00:01:38.500
Observables and it's called RX J.S. that's
our JavaScript library it's actually

26
00:01:39.670 --> 00:01:43.200
RX is the name of the library
read reactive extensions.

27
00:01:43.200 --> 00:01:46.260
It's made by the folks really
smart folks at Microsoft, and

28
00:01:46.260 --> 00:01:50.330
they've ported it to like a dozen or
a couple dozen different languages.

29
00:01:50.330 --> 00:01:53.190
So RXJS is the JavaScript port.

30
00:01:53.190 --> 00:01:54.010
It's in C.
Sharp,

31
00:01:54.010 --> 00:01:57.690
I think that's the original one, it's in
Java, it's in several other languages.

32
00:01:57.690 --> 00:02:01.010
So it's nice from
the consistency perspective,

33
00:02:01.010 --> 00:02:04.720
whatever language you work in there's
probably an RX library for it.

34
00:02:04.720 --> 00:02:05.860
Once you learn it,

35
00:02:05.860 --> 00:02:08.190
once you're gonna be able to use
it in lots of places that's good.

36
00:02:10.050 --> 00:02:13.760
But to understand what an observable is,
again from a conceptual perspective,

37
00:02:13.760 --> 00:02:17.000
see this is how I always teach,
I'm gonna teach you the API first,

38
00:02:17.000 --> 00:02:18.200
I wanna teach you the conceptuals.

39
00:02:19.490 --> 00:02:22.169
So let's talk about spreadsheets.

40
00:02:22.169 --> 00:02:24.440
Everybody loves spreadsheets, right?

41
00:02:24.440 --> 00:02:27.740
I just found some random
spreadsheet image on Google Images,

42
00:02:27.740 --> 00:02:30.560
cuz I don't have any good
ones to take of my own.

43
00:02:30.560 --> 00:02:34.760
I don't know what the spreadsheet is,
but it's pretty clear

44
00:02:34.760 --> 00:02:38.390
that this spreadsheet is illustrating
the concept that I want to get across.

45
00:02:38.390 --> 00:02:40.110
By the way,
this metaphor is not unique to me.

46
00:02:40.110 --> 00:02:41.220
So I've heard this from others.

47
00:02:41.220 --> 00:02:43.160
I just think it's a particularly
good one to start with.

48
00:02:44.280 --> 00:02:50.820
And observable is kind of like a chain
of calculated fields in a spreadsheet.

49
00:02:51.880 --> 00:02:55.350
So you know in spreadsheets
you can have data in a field.

50
00:02:55.350 --> 00:02:58.230
But you can also have a field,
which is a calculated field.

51
00:02:58.230 --> 00:03:01.235
It's calculated based upon the data
that's in some other field.

52
00:03:01.235 --> 00:03:04.292
So C1 might have the number ten in it,
and C2,

53
00:03:04.292 --> 00:03:09.330
right below it might be whatever
the values in there times two.

54
00:03:09.330 --> 00:03:14.779
So when I type in 10, then as soon as I
hit enter, immediately this field says 20.

55
00:03:14.779 --> 00:03:19.890
And I might have another field over here,
I might have D13 that says,

56
00:03:19.890 --> 00:03:24.245
D13 is the calculation of
three times whatever's in C2.

57
00:03:24.245 --> 00:03:28.577
So I changed this to 20, C1 becomes 20,

58
00:03:28.577 --> 00:03:33.830
C2 becomes 40, and D13 becomes 120, right?

59
00:03:33.830 --> 00:03:37.730
Do you see that the calculation
chain is a flow of data?

60
00:03:39.840 --> 00:03:44.760
We're setting up a flow of data
from an original source location to

61
00:03:44.760 --> 00:03:47.500
all these different places, where
we're doing something with that data.

62
00:03:47.500 --> 00:03:48.990
We're calculating something.

63
00:03:48.990 --> 00:03:51.310
We're subscribing to and
responding to that data.

64
00:03:52.410 --> 00:03:55.160
That's the genesis of this
notion of reactive programming.

65
00:03:55.160 --> 00:03:57.850
When we think about reactive
programming it is to say,

66
00:03:57.850 --> 00:03:59.940
the source of my data some of that source.

67
00:04:01.190 --> 00:04:05.320
But the data once I get that event, it's
going to go through a series of steps and

68
00:04:05.320 --> 00:04:09.260
some of those steps are going to
be direct like responsive just

69
00:04:09.260 --> 00:04:12.950
calculate something and
some of them might be asynchronous steps.

70
00:04:14.730 --> 00:04:19.023
The calculation of the data that goes
through the spreadsheet as you change one

71
00:04:19.023 --> 00:04:21.572
value, even though it
looks immediate to us.

72
00:04:21.572 --> 00:04:26.432
Each step it has to update all the fields
and then update all the fields and

73
00:04:26.432 --> 00:04:31.570
then update all the fields, so there
is some propagation delay if you will.

74
00:04:31.570 --> 00:04:35.820
But we can think about an observable or
rather reactive programming as a way to

75
00:04:35.820 --> 00:04:42.370
model a piece of data coming in one side,
that's from the producer.

76
00:04:42.370 --> 00:04:45.450
The event emitter, if you will,
coming in one side, and

77
00:04:45.450 --> 00:04:49.440
all the steps that it takes to
propagate its way through a system.

78
00:04:49.440 --> 00:04:51.360
It's a data flow mechanism, and

79
00:04:51.360 --> 00:04:54.960
data flow mechanisms are built from
the ground up to respond to events.

80
00:04:54.960 --> 00:04:58.520
So if we've got a vent oriented systems,

81
00:04:58.520 --> 00:05:00.450
this might be a really
good abstraction for us.

82
00:05:00.450 --> 00:05:02.430
Is everybody following where
I'm coming from conceptually.

83
00:05:04.930 --> 00:05:06.620
So we'll boil this down for you.

84
00:05:06.620 --> 00:05:11.720
An observable is an adapter
hooked onto an event source

85
00:05:12.930 --> 00:05:15.690
that produces a promise,
every time a new event comes through.

86
00:05:18.030 --> 00:05:23.380
But it does so in that separate way,
where I can set up my event source.

87
00:05:23.380 --> 00:05:27.701
And an entirely different part of my
location, I can declaratively say,

88
00:05:27.701 --> 00:05:29.032
what's my data flow?

89
00:05:29.032 --> 00:05:32.424
I don't have to conflate the two like
we're doing in those other examples,

90
00:05:32.424 --> 00:05:35.530
where I put the promise
inside of the event thing.

91
00:05:35.530 --> 00:05:40.090
I have an observable that represents my
data source and I can subscribe to that

92
00:05:40.090 --> 00:05:45.010
observable in one or more other locations
of my system in an entirely separate way.

93
00:05:45.010 --> 00:05:47.410
And it's going to magically
take care of all that

94
00:05:48.410 --> 00:05:51.170
creation of promises in the bridge and
the gap for us.

95
00:05:52.730 --> 00:05:57.370
So it's a way in programming to represent
what we can visually think about, or

96
00:05:57.370 --> 00:05:59.450
conceptually think about
from a spreadsheet.

97
00:05:59.450 --> 00:06:03.380
We can represent each one of those
different fields as a different step

98
00:06:03.380 --> 00:06:05.330
in a chain of response to an observable.

99
00:06:07.840 --> 00:06:12.320
So here's a quick example
of some code from our RxJS,

100
00:06:12.320 --> 00:06:17.300
you'll notice that you create an
observable using Rx.Observable.fromEvent.

101
00:06:17.300 --> 00:06:21.770
That's one of their many utilities they
provide and the way it's set up is,

102
00:06:21.770 --> 00:06:25.810
it takes the dawn elements an event name
it automatically hooks the event name

103
00:06:25.810 --> 00:06:28.900
to the dawn element and
every time one of those events fires

104
00:06:28.900 --> 00:06:32.170
it pumps another piece of data through
the chain, through the observable.

105
00:06:33.550 --> 00:06:36.700
So that's how we create
an observable from an event.

106
00:06:36.700 --> 00:06:40.320
There's about a dozen or so
different ways to make an observable.

107
00:06:40.320 --> 00:06:42.749
You can make one by
attaching it to an event.

108
00:06:42.749 --> 00:06:47.441
You can make a plain old simple observable
that you manually are gonna put some data

109
00:06:47.441 --> 00:06:49.957
through, you can attach it from a website,

110
00:06:49.957 --> 00:06:54.290
I mean there's a lot of different
ways to make observables.

111
00:06:54.290 --> 00:06:59.990
But I make an observable on line one, in
an entirely different part of my system.

112
00:06:59.990 --> 00:07:02.890
I can declare what all those steps are,

113
00:07:02.890 --> 00:07:05.910
what all the calculations of
the fields in my spreadsheet look like.

114
00:07:07.230 --> 00:07:10.250
Basically, I make a declarative
chain of the data flow.

115
00:07:11.400 --> 00:07:16.010
So every time an event comes in from the
DOM event, every time I click on a button

116
00:07:16.010 --> 00:07:21.240
that's a piece of data coming in and
it's going to flow through this chain.

117
00:07:21.240 --> 00:07:25.040
Now, we have utilities that
look familiar to us like map.

118
00:07:26.320 --> 00:07:30.460
Map in the synchronous sense went
over a whole array of the values.

119
00:07:30.460 --> 00:07:34.280
Map in the asynchronous event is just
invoked every time a new piece of data

120
00:07:34.280 --> 00:07:35.210
comes along.

121
00:07:35.210 --> 00:07:42.000
So you can actually think about an event
stream as a never ending array.

122
00:07:43.910 --> 00:07:48.580
And we can perform the same sorts
of list operations across time

123
00:07:48.580 --> 00:07:49.840
that we would do all together.

124
00:07:49.840 --> 00:07:53.130
That's why it was important for
us to understand maps and reduces and

125
00:07:53.130 --> 00:07:54.120
things like that.

126
00:07:54.120 --> 00:07:58.744
So here, we can map over an event stream
in much the same way conceptually that we

127
00:07:58.744 --> 00:08:01.722
could map over an array
that was already complete.

128
00:08:01.722 --> 00:08:04.314
It's just that every time
a piece of data comes through,

129
00:08:04.314 --> 00:08:06.316
we can do some sort of
transformation on it.

130
00:08:06.316 --> 00:08:11.206
And here the transformation is
I'm extracting the class name

131
00:08:11.206 --> 00:08:13.656
from the event object, okay.

132
00:08:13.656 --> 00:08:17.850
We can filter down, we can do
perform an exclusion on our list.

133
00:08:18.950 --> 00:08:20.870
And that's something interesting.

134
00:08:20.870 --> 00:08:26.370
Because fundamentally, fundamentally
this list is actually asynchronous.

135
00:08:26.370 --> 00:08:30.390
We can actually have steps in our
response that are asynchronous.

136
00:08:30.390 --> 00:08:31.840
Distinct until changed.

137
00:08:31.840 --> 00:08:34.440
It's an interesting one.

138
00:08:34.440 --> 00:08:39.530
What it says is, the first time a piece
of data comes through, let it go through.

139
00:08:39.530 --> 00:08:42.490
But if another one comes through the same
piece of data, don't let that go through

140
00:08:42.490 --> 00:08:46.960
because I've already seen that one,
but then if something new comes along.

141
00:08:46.960 --> 00:08:47.940
Let that one through.

142
00:08:48.940 --> 00:08:50.710
And if I keep getting
the same one of those,

143
00:08:50.710 --> 00:08:53.040
don't let any more
duplicates come through.

144
00:08:53.040 --> 00:08:56.880
So let's say, I have one that
the number one comes to the system and

145
00:08:56.880 --> 00:08:59.740
I got five of those, only the first one is
going to be let through in the next four

146
00:08:59.740 --> 00:09:01.110
going to be ignored.

147
00:09:01.110 --> 00:09:02.990
And then a two comes along.

148
00:09:02.990 --> 00:09:05.580
So I'm going to let the first
two come along at any duplicates

149
00:09:05.580 --> 00:09:06.660
are going to be ignored.

150
00:09:06.660 --> 00:09:08.300
What happens when another one comes along?

151
00:09:08.300 --> 00:09:12.200
I'm going to let a one one
more one come through and

152
00:09:12.200 --> 00:09:14.660
then ignore any duplicates that's
what the until changed is.

153
00:09:15.880 --> 00:09:21.360
So there's distinct which is just I only
want one ever of the thing and distinct

154
00:09:21.360 --> 00:09:25.430
until changed is distinct, and then I
reset every time a new value comes in.

155
00:09:25.430 --> 00:09:28.120
I reset what I'm remembering.

156
00:09:28.120 --> 00:09:31.370
So you notice in this chain, not all of my
events are going to make it to line 11.

157
00:09:31.370 --> 00:09:37.160
And that's totally okay, cuz we're
setting ourselves up with a data flow,

158
00:09:37.160 --> 00:09:39.790
just like we would in a spreadsheet.

159
00:09:42.210 --> 00:09:45.640
Subscribe is kind of like
the end of the chain.

160
00:09:45.640 --> 00:09:48.330
Subscribe is how you basically have

161
00:09:48.330 --> 00:09:52.380
a sort of synchronous response to
any events that are coming in.

162
00:09:52.380 --> 00:09:55.520
So there's more to it than that.

163
00:09:55.520 --> 00:09:59.240
But you notice that basically subscribe
is kind of like a synchronous thing.

164
00:09:59.240 --> 00:10:00.580
I'm not transforming any data,

165
00:10:00.580 --> 00:10:03.780
it's not really gonna show up in
the middle of my chain, probably.

166
00:10:03.780 --> 00:10:06.320
It's kinda be at the end of my chain,
it's when I and

167
00:10:06.320 --> 00:10:10.210
finally done with whatever the data is
through all of its transformations and

168
00:10:10.210 --> 00:10:12.290
filterings I arrived at some data.

169
00:10:12.290 --> 00:10:17.549
So at the end of my chain, I have
a subscribe of a piece of data that comes

170
00:10:17.549 --> 00:10:23.542
in and I can console.log it out.
&gt;&gt; Kyle Simpson: Okay.

171
00:10:25.310 --> 00:10:28.750
That's a real high level view of what
working with an observable is like.

172
00:10:28.750 --> 00:10:31.690
We have to make an observable some way and
we have utilities, and

173
00:10:31.690 --> 00:10:34.720
libraries that can do that for us, and
then we have to respond to observables.

174
00:10:35.900 --> 00:10:38.720
And it's appropriate, I think,
some people disagree with this, but

175
00:10:38.720 --> 00:10:42.340
I think it's appropriate to think
of an observable as a stream.

176
00:10:43.490 --> 00:10:46.000
It's a stream of data
that's gonna come through.

177
00:10:46.000 --> 00:10:49.040
It's being pumped by a set of events and
it's a stream of data that's coming

178
00:10:49.040 --> 00:10:52.068
through.
&gt;&gt; Kyle Simpson: So

179
00:10:52.068 --> 00:10:56.060
what about distinctUntilChanged,
I actually want you all to pop this up.

180
00:10:56.060 --> 00:10:57.980
You have in your slides the link or
you can just type,

181
00:10:57.980 --> 00:11:01.080
I love this website RxMarbles.com.

182
00:11:01.080 --> 00:11:04.961
Let's all take a look at RxMarbles.com,
I just get such a kick out of this web

183
00:11:04.961 --> 00:11:09.928
site.
&gt;&gt; Kyle Simpson: Let me quickly orient

184
00:11:09.928 --> 00:11:13.214
you, go ahead and click down on
the distinctUntilChanged which is just

185
00:11:13.214 --> 00:11:15.730
slightly down the list there on the left.

186
00:11:15.730 --> 00:11:17.440
Click on the distinctUntilChanged.

187
00:11:20.040 --> 00:11:21.750
And you'll notice that it's depicting for

188
00:11:21.750 --> 00:11:24.130
us what these marbles
these little bubbles here,

189
00:11:24.130 --> 00:11:28.200
kind of exactly we're talking about the
touch the stuff on the top is the input.

190
00:11:28.200 --> 00:11:30.188
And there's only one stream for this.

191
00:11:30.188 --> 00:11:34.576
And the stuff on the bottom is the output.

192
00:11:34.576 --> 00:11:38.180
And you notice what happens,
as I start to move these marbles around.

193
00:11:38.180 --> 00:11:42.760
What happens if I move this one over here,
the solid

194
00:11:42.760 --> 00:11:47.550
just disappear because the sequence
meant that it was just a duplicate.

195
00:11:47.550 --> 00:11:48.960
So we can move the marbles around and

196
00:11:48.960 --> 00:11:52.460
see how these different
stream operations operate.

197
00:11:53.470 --> 00:11:59.050
We're going to come back to RxMarbles and
look at more stream operations and

198
00:11:59.050 --> 00:12:02.420
a little bit, but you can notice
that probably about the top.

199
00:12:02.420 --> 00:12:06.180
I'd say maybe 30 or
40 of them are depicted here.

200
00:12:06.180 --> 00:12:08.110
Rx actually has probably like 150,

201
00:12:08.110 --> 00:12:12.000
maybe 200 different methods
it's a pretty big library.

202
00:12:12.000 --> 00:12:15.260
All told, if you've got everything,
I think it's something like 150,

203
00:12:15.260 --> 00:12:15.830
200k of JavaScript.

204
00:12:15.830 --> 00:12:17.160
So it's a pretty stout library.

205
00:12:17.160 --> 00:12:19.610
It takes a while to
learn all these things.

206
00:12:19.610 --> 00:12:23.380
I have not found any other resource
on the web that is better at learning

207
00:12:23.380 --> 00:12:27.730
than RxMarbles, I think you can probably
learn probably 50% of Observables

208
00:12:27.730 --> 00:12:31.280
by doing nothing but just playing
around with the bubbles on the screen.

209
00:12:31.280 --> 00:12:33.050
It's a really fantastic resource.

210
00:12:33.050 --> 00:12:33.940
Okay.

211
00:12:33.940 --> 00:12:37.460
Helps you visualize what's happening
with your different stream operations.

212
00:12:37.460 --> 00:12:39.500
So we'll come back to
distinct until change,

213
00:12:39.500 --> 00:12:41.680
I mean we'll come back to
RXmarbles here in a little bit.

214
00:12:41.680 --> 00:12:42.720
I just wanted to point that out to you.

