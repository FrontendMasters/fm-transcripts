WEBVTT

1
00:00:00.000 --> 00:00:03.858
[MUSIC]

2
00:00:03.858 --> 00:00:06.701
&gt;&gt; Kyle: So, back to our track
checkout if you recall from before,

3
00:00:06.701 --> 00:00:08.801
that silly scenario about the eCommerce.

4
00:00:08.801 --> 00:00:13.416
And rather than passing my callback in,
what if we were to modify that API such

5
00:00:13.416 --> 00:00:16.116
that it returns back
an event listener to us?

6
00:00:16.116 --> 00:00:18.072
As you see on line 11 I listen to,

7
00:00:18.072 --> 00:00:22.664
I receive a listener back from the track
check out function and then on line 13.

8
00:00:22.664 --> 00:00:28.200
I listen to the completion event and
when it finishes I move on.

9
00:00:28.200 --> 00:00:30.770
And I listen to the error event and
when it finishes I move on.

10
00:00:33.470 --> 00:00:36.760
Can you see how that is an inverted
the inversion of control or

11
00:00:36.760 --> 00:00:39.080
rather just simply retain control?

12
00:00:39.080 --> 00:00:42.620
Because now rather than passing
my call back into that utility,

13
00:00:42.620 --> 00:00:45.970
giving them the keys to the kingdom by
which they can do whatever they want and

14
00:00:45.970 --> 00:00:49.010
I can't trust that they won't
do what I don't expect.

15
00:00:50.190 --> 00:00:50.923
I've retained control.

16
00:00:50.923 --> 00:00:53.118
I've simply said no you just
give me an event listener,

17
00:00:53.118 --> 00:00:54.248
I'll figure out what to do.

18
00:00:54.248 --> 00:00:58.402
Well I'll listen for that event and
we could wire it such that we listen for

19
00:00:58.402 --> 00:01:02.423
the event and then unsubscribe to
the event the first time it happens for

20
00:01:02.423 --> 00:01:05.860
example, like we are in complete
control of that paradigm.

21
00:01:08.230 --> 00:01:12.770
So, we've normalized, we've brought
more sanity back to this process,

22
00:01:12.770 --> 00:01:14.340
rather than passing the call back in.

23
00:01:14.340 --> 00:01:16.670
That's an important
understanding of promises,

24
00:01:16.670 --> 00:01:19.470
is that they uninvert
the inversion of control problem.

25
00:01:21.740 --> 00:01:22.560
That's a big deal.

26
00:01:23.800 --> 00:01:26.410
That's not a small point,
that's one of the most important points.

27
00:01:28.090 --> 00:01:31.540
Promises were designed to un-invert
that inversion of control.

28
00:01:31.540 --> 00:01:36.430
Rather, to retain that control,
so that all of those trust issues

29
00:01:36.430 --> 00:01:41.100
that we were talking about before have an
ordered and patterned way of being solved.

30
00:01:41.100 --> 00:01:43.830
Now, we don't actually listen this way.

31
00:01:43.830 --> 00:01:46.140
This isn't how most APIs design, no.

32
00:01:46.140 --> 00:01:49.340
Although, it's an established pattern
that we can at least understand, but

33
00:01:49.340 --> 00:01:52.080
it's It's a metaphor for
thinking about a promise.

34
00:01:53.210 --> 00:01:55.657
A promise is like an event listener.

35
00:01:55.657 --> 00:02:00.792
But rather than there being a completion
event, we call that event the then event.

36
00:02:00.792 --> 00:02:03.510
And that's where we start to
talk about the API of a promise.

37
00:02:03.510 --> 00:02:05.140
So, in that truck checkout utility.

38
00:02:06.920 --> 00:02:10.610
Rather than receiving a callback as
a parameter we can simply create a promise

39
00:02:10.610 --> 00:02:13.780
as you see on line two on
constructing a promise instance.

40
00:02:13.780 --> 00:02:17.750
The constructor for the promise received
two methods the resolve and the reject.

41
00:02:17.750 --> 00:02:21.810
It's pretty clear what those
do by the way I named them.

42
00:02:21.810 --> 00:02:25.710
You call resolve if you wanna resolve the
promise if you want to fill it completely

43
00:02:25.710 --> 00:02:29.350
or correctly and you call reject
if you need to reject the promise.

44
00:02:29.350 --> 00:02:32.830
Back to my future cheeseburger
this is the only two options.

45
00:02:32.830 --> 00:02:36.820
Either I'm eventually gonna get my
cheeseburger or, the lady is going to call

46
00:02:36.820 --> 00:02:40.350
me back up to the counter and say this is
a tragedy but we are completely out of

47
00:02:40.350 --> 00:02:43.100
cheeseburgers, I'm gonna have
to give you your money back.

48
00:02:43.100 --> 00:02:44.430
This is the only two options, right?

49
00:02:45.510 --> 00:02:47.459
Either I get my cheeseburger or
get my money back.

50
00:02:48.480 --> 00:02:51.820
So, we can either fulfill the promise
calling resolve or we can reject it.

51
00:02:53.620 --> 00:02:56.720
Those are the only two outcomes
that a promise can have.

52
00:02:57.890 --> 00:03:01.550
So, whatever that magic is I'm alighting
that information because that isn't

53
00:03:01.550 --> 00:03:04.750
the important part but whatever that
logic is inside of track check out and

54
00:03:04.750 --> 00:03:06.319
even if it's a call resolve or reject.

55
00:03:08.020 --> 00:03:11.142
Now, you notice that we're
returning that promise instance, so

56
00:03:11.142 --> 00:03:14.500
when we return that promise instance
we're going to use it in our code.

57
00:03:15.850 --> 00:03:18.970
Just like I'm doing here on line
11 I receive a promise back and

58
00:03:18.970 --> 00:03:22.490
the notice our line 13 instead
of saying dot on completion.

59
00:03:22.490 --> 00:03:24.451
I'm saying dot then I'm registering for

60
00:03:24.451 --> 00:03:29.144
then event
&gt;&gt; Kyle: The then event is gonna be called

61
00:03:29.144 --> 00:03:33.860
when either resolve or
reject is fired against that promise.

62
00:03:33.860 --> 00:03:37.200
It will fire then event if
you will metaphorically and

63
00:03:37.200 --> 00:03:39.760
one of those two functions passed
into it's gonna get called.

64
00:03:39.760 --> 00:03:43.030
Finish will be called if the promise
was fulfilled successfully

65
00:03:43.030 --> 00:03:44.100
error if it was rejected.

66
00:03:46.110 --> 00:03:49.260
So, we have actually
a nice clean mechanism for

67
00:03:49.260 --> 00:03:51.960
being notified that it was either
a success or that it was a failure.

68
00:03:54.810 --> 00:04:02.160
It's incredibly important, step forward
for an inversion of inversion of control.

69
00:04:02.160 --> 00:04:07.528
Inversion of control is sometimes
used in an intentional way.

70
00:04:07.528 --> 00:04:12.435
Framework design author sometimes will
use in fact, inversion of control is one

71
00:04:12.435 --> 00:04:17.198
of the key characteristics that has
classically been used to define something

72
00:04:17.198 --> 00:04:21.815
as a framework as when it inverts control
when you pass in stuff in it calls for

73
00:04:21.815 --> 00:04:24.003
you instead of you calling things.

74
00:04:24.003 --> 00:04:27.939
I don't know how many of you are familiar
with some of those more classical

75
00:04:27.939 --> 00:04:32.513
thinkings about software design but that's
one of the characteristics that divides

76
00:04:32.513 --> 00:04:36.000
between a library a framework
is that inversion of control.

77
00:04:36.000 --> 00:04:38.750
So, some people will tell you that
inversion of control is an intentional

78
00:04:38.750 --> 00:04:39.870
design feature and

79
00:04:39.870 --> 00:04:42.969
I would tell you as far as asynchronicity
is concerned it's a terrible idea.

80
00:04:45.240 --> 00:04:48.190
Inversion of control is the path
to the dark side here it is

81
00:04:48.190 --> 00:04:51.740
the path by which we completely lose
all reasonability in our program.

82
00:04:53.260 --> 00:04:57.480
So, we are trying intentionally
actively on purpose

83
00:04:57.480 --> 00:05:00.840
to uninvert that paradigm to
bring it back into our control.

84
00:05:00.840 --> 00:05:03.210
That's what promises are doing for us.

85
00:05:03.210 --> 00:05:05.330
So, this isn't actually
about an API at all.

86
00:05:06.490 --> 00:05:09.380
This isn't about lack of indentation.

87
00:05:09.380 --> 00:05:11.500
In fact if you pay close attention,

88
00:05:11.500 --> 00:05:13.260
you notice there's still
a ton of callbacks here.

89
00:05:15.250 --> 00:05:18.180
In fact there's more callbacks
here than they were before.

90
00:05:18.180 --> 00:05:20.750
Wait a minute, hold up.

91
00:05:20.750 --> 00:05:24.880
I thought promises were all about solving
callback error, getting rid of callbacks

92
00:05:24.880 --> 00:05:28.510
how on earth are they fixing anything
if there's still callbacks involved?

93
00:05:30.030 --> 00:05:31.170
Really important question.

94
00:05:32.170 --> 00:05:35.760
If there's still callbacks involved
how does this promise system

95
00:05:35.760 --> 00:05:37.620
offer any solutions to us?

96
00:05:37.620 --> 00:05:40.100
You might ask and rightly so.

97
00:05:40.100 --> 00:05:42.610
But wait,
if I passed my callback into that promise,

98
00:05:42.610 --> 00:05:45.070
can't the promise just call
my callback a bunch of times?

99
00:05:46.330 --> 00:05:48.760
How can I trust the promise to
do what it's supposed to do?

100
00:05:50.350 --> 00:05:53.920
That's the most important question
that can be asked at this point.

101
00:05:53.920 --> 00:05:56.550
Because you need to understand
that promises were designed

102
00:05:56.550 --> 00:05:58.700
to instill trust into this transaction.

103
00:05:59.890 --> 00:06:05.400
The fundamental design principle
that they're only resolved once,

104
00:06:05.400 --> 00:06:07.450
they can only be resolved as a success, or

105
00:06:07.450 --> 00:06:11.660
an error the messages that get
passed to a promise are always kept.

106
00:06:11.660 --> 00:06:15.550
It becomes immutable,
exceptions are always caught and

107
00:06:15.550 --> 00:06:19.240
turned into errors that are always
observable there's nothing swallowed.

108
00:06:19.240 --> 00:06:21.540
If you choose not to observe
because you're lazy or

109
00:06:21.540 --> 00:06:25.230
you make a mistake, then it might look
like it was swallowed but it definitely

110
00:06:25.230 --> 00:06:28.475
was not swallowed in the sense that you
had no opportunity to observe them.

111
00:06:28.475 --> 00:06:31.280
This is a huge deal.

112
00:06:31.280 --> 00:06:35.750
This is a whole bunch of
sanity brought back to

113
00:06:35.750 --> 00:06:39.860
a process that has fundamentally
been rather hard to understand and

114
00:06:39.860 --> 00:06:42.850
rather hard to maintain for
the entirety of JavaScript history.

115
00:06:45.170 --> 00:06:48.620
So, here and we do start to see
some of the benefits of the API.

116
00:06:48.620 --> 00:06:52.570
These are things above and beyond this
notion of time independent state.

117
00:06:53.950 --> 00:06:55.979
I said that was important,
that's our foundation.

118
00:06:55.979 --> 00:06:59.094
Built upon that,
we have all of this trust added to it.

119
00:06:59.094 --> 00:07:02.761
And that is primarily the mechanism
in the API that we've been given,

120
00:07:02.761 --> 00:07:06.120
is designed to organize our
callbacks in that certain way.

121
00:07:06.120 --> 00:07:09.350
In fact, a third way of thinking
about what a promise is,

122
00:07:10.400 --> 00:07:11.630
is that it's a callback manager.

123
00:07:13.050 --> 00:07:17.766
It's a pattern for managing our
callbacks in a trustable fashion.

124
00:07:20.079 --> 00:07:20.980
&gt;&gt; Kyle: That's a big deal.

125
00:07:22.150 --> 00:07:24.490
That's why promises matter,
it's not really so

126
00:07:24.490 --> 00:07:27.230
much about whether you
like the shiny API or not.

127
00:07:27.230 --> 00:07:31.500
It's not really about whether you wanna
get rid of nesting or indentation.

128
00:07:31.500 --> 00:07:35.710
There is a promise hell and
it's easy to get into or no silver bullet.

129
00:07:37.030 --> 00:07:40.330
But there's a really important thing that
they've been designed to do that is to

130
00:07:40.330 --> 00:07:42.700
instill trust back into our systems.

131
00:07:42.700 --> 00:07:45.237
Even more than just trust in this way.

132
00:07:45.237 --> 00:07:49.873
Now that my value is immutable I mark that
one on purpose because now mind that my

133
00:07:49.873 --> 00:07:53.326
value is immutable from
the outside it cannot be changed.

134
00:07:53.326 --> 00:07:58.219
That means I can send that container to
any port of my system or even outside of

135
00:07:58.219 --> 00:08:02.422
my system to other third parties and
I can say, here is my value and

136
00:08:02.422 --> 00:08:07.790
I do not have to worry that they're gonna
change that value out from underneath me.

137
00:08:09.670 --> 00:08:11.940
Remember we talked about immutability
in the other workshop and

138
00:08:11.940 --> 00:08:13.420
how important that is.

139
00:08:13.420 --> 00:08:15.350
That's one of these fundamental import.

140
00:08:15.350 --> 00:08:19.170
In fact, one of the most important things
is that there are externally immutable.

141
00:08:20.290 --> 00:08:22.882
There's no action at
a distance concern here.

142
00:08:22.882 --> 00:08:26.994
If you don't know that phrase, action at
a distance, that's one of the evils of

143
00:08:26.994 --> 00:08:31.166
software architecture when you design
a system, where somebody else far away can

144
00:08:31.166 --> 00:08:34.028
do something that affects
you without you knowing him.

145
00:08:34.028 --> 00:08:34.950
It's a bad idea.

146
00:08:36.660 --> 00:08:38.370
Just as a little side note here.

147
00:08:38.370 --> 00:08:42.190
There are discussions happening around
promises that in a future version of

148
00:08:42.190 --> 00:08:45.720
JavaScript, we can make it this
notion of a cancellable promise.

149
00:08:48.290 --> 00:08:49.920
I'm not gonna go into all the politics and

150
00:08:49.920 --> 00:08:53.160
all the craziness that's
around cancelable promises.

151
00:08:53.160 --> 00:08:58.030
Just briefly to state to you, it's kind of
a tail wagging the dog as far as I see it.

152
00:08:58.030 --> 00:09:00.980
They have this other sort of thing
that they want to control and

153
00:09:00.980 --> 00:09:04.948
that thing that they want to
control only exposes promises.

154
00:09:04.948 --> 00:09:09.050
And so, let's make promises cancelable so
that we can control that thing.

155
00:09:10.300 --> 00:09:11.910
Instead of making that thing controllable.

156
00:09:13.110 --> 00:09:17.600
It's crazy to me but you know what's
bad about cancellable little promises?

157
00:09:17.600 --> 00:09:18.370
Action at a distance.

158
00:09:18.370 --> 00:09:21.650
I have a promise that's not yet resolved.

159
00:09:21.650 --> 00:09:25.010
I pass it to somebody else and
they can cancel it out from underneath me.

160
00:09:25.010 --> 00:09:29.011
What?
That's nonsense.

161
00:09:29.011 --> 00:09:32.859
That erodes the entire foundation
upon which these things are built.

162
00:09:34.220 --> 00:09:37.200
So, if you see me ranting about
cancellable promises this is why.

163
00:09:37.200 --> 00:09:40.370
I take it seriously because
this is an important thing.

164
00:09:40.370 --> 00:09:45.060
We shouldn't throw it away just because
we're drunk on this idea of pretty APIs.

