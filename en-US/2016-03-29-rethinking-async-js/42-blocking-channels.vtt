WEBVTT

1
00:00:00.000 --> 00:00:03.775
[MUSIC]

2
00:00:03.775 --> 00:00:06.150
&gt;&gt; Kyle Simpson: That's
a pretty simple example.

3
00:00:06.150 --> 00:00:09.220
How might we have a slightly
more complex one?

4
00:00:09.220 --> 00:00:13.200
This one, I've got csp in
front of everything because

5
00:00:13.200 --> 00:00:15.390
I'm now using a library.

6
00:00:15.390 --> 00:00:20.910
There are libraries for CSP, and
one of them uses the namespace csp for it.

7
00:00:20.910 --> 00:00:25.700
And you notice that we call it .go because
we're modeled off of that go routine

8
00:00:25.700 --> 00:00:29.870
mentality, the stuff that comes from
the GO language in from Closure script.

9
00:00:29.870 --> 00:00:33.910
So this is how I actually passed those two
generators to something that can do it.

10
00:00:33.910 --> 00:00:37.090
The previous code snippet just
pretended that somebody did it but

11
00:00:37.090 --> 00:00:39.300
this is a little bit further step along.

12
00:00:39.300 --> 00:00:40.340
It shows us how it would work.

13
00:00:40.340 --> 00:00:44.630
We would pass those generators
in to a method called Go and

14
00:00:44.630 --> 00:00:46.670
you notice now I have
a while true loop going.

15
00:00:47.670 --> 00:00:49.480
Which is gonna let those
things run forever.

16
00:00:50.950 --> 00:00:54.620
That's how you end up modeling
these independent processes that

17
00:00:54.620 --> 00:00:57.470
run your application as you end up
basically having every one of them with

18
00:00:57.470 --> 00:00:58.400
a while true loop in it.

19
00:00:58.400 --> 00:00:59.683
They're all running independently.

20
00:01:02.474 --> 00:01:04.889
&gt;&gt; Kyle Simpson: So
here I've got on line 1 through 5,

21
00:01:04.889 --> 00:01:09.429
I'm declaring a go routine that's
going to, every time somebody lets it

22
00:01:09.429 --> 00:01:13.770
it's gonna generate a new random
number and push it down the channel.

23
00:01:15.820 --> 00:01:20.500
It would like to do that as fast as
possible but if you'll notice the notion

24
00:01:20.500 --> 00:01:24.620
of this blocking channel is, it's going
to be, there is a back pressure here.

25
00:01:24.620 --> 00:01:28.440
It's not going to be allowed to push
anything down the channel at any faster

26
00:01:28.440 --> 00:01:34.030
speed than somebody on the other end
is consuming it, can you see that.

27
00:01:34.030 --> 00:01:38.770
So on the other end of the channel,
I have another go routine in an entirely

28
00:01:38.770 --> 00:01:43.015
different part of my application and
he's waiting every 500 milliseconds.

29
00:01:44.190 --> 00:01:47.880
And he's pulling something off
the channel once every 500 milliseconds.

30
00:01:47.880 --> 00:01:50.351
Does that sound familiar?

31
00:01:50.351 --> 00:01:52.800
Does that sound like a sampled stream?

32
00:01:52.800 --> 00:01:56.410
This is a way of modeling the sampled
stream through CSP semantics.

33
00:01:58.180 --> 00:02:00.740
So the guy up on line 3 is note

34
00:02:00.740 --> 00:02:03.700
able to push the random values any
faster than somebody is consuming.

35
00:02:03.700 --> 00:02:10.296
And the guy down on line 9 is consuming
them only once every 500 milliseconds.

36
00:02:10.296 --> 00:02:13.327
Well, the guy in line 9 has no idea
how those values are being produced or

37
00:02:13.327 --> 00:02:15.030
where they're coming from.

38
00:02:15.030 --> 00:02:18.210
The guy on line 3 has no
idea who's taking them.

39
00:02:18.210 --> 00:02:22.139
They're literally completely
independent sequential processes but

40
00:02:22.139 --> 00:02:25.879
they're able to coordinate through
blocking channel semantics.

41
00:02:31.190 --> 00:02:31.996
&gt;&gt; Kyle Simpson: Yes?

42
00:02:31.996 --> 00:02:36.406
&gt;&gt; Speaker 2: This should walking
through this just a little bit more and

43
00:02:36.406 --> 00:02:41.010
you might be doing it now but
there's the two takes, right?

44
00:02:42.110 --> 00:02:43.980
Yield on line-
&gt;&gt; Kyle Simpson: The first one

45
00:02:43.980 --> 00:02:44.980
on line 9, yep.

46
00:02:44.980 --> 00:02:49.420
&gt;&gt; Speaker 2: Line 9, that is taking
a value from the first function?

47
00:02:49.420 --> 00:02:51.265
&gt;&gt; Kyle Simpson: But
look where it's taking it from,

48
00:02:51.265 --> 00:02:53.355
because take always requires a channel.

49
00:02:53.355 --> 00:02:57.259
And what we're passing to it is a channel
that is created by the timeout function.

50
00:02:58.980 --> 00:03:04.020
So the time out utility which is
provided by this library creates

51
00:03:04.020 --> 00:03:08.220
a channel that won't push a message down
until after 500 milliseconds has passed.

52
00:03:09.470 --> 00:03:12.370
So we're basically saying I want
to take from that channel and

53
00:03:12.370 --> 00:03:16.740
I'm gonna wait until that
channel gives me something.

54
00:03:16.740 --> 00:03:17.350
That's a way for

55
00:03:17.350 --> 00:03:22.280
us to do the blocking semantics or
I mean the blocking the local.

56
00:03:22.280 --> 00:03:25.950
&gt;&gt; Speaker 2: Maybe I
missed what is the channel?

57
00:03:25.950 --> 00:03:28.688
&gt;&gt; Kyle Simpson: So
the first argument to the put and

58
00:03:28.688 --> 00:03:34.300
the take methods that we're
showing here is always a channel.

59
00:03:34.300 --> 00:03:37.247
So if I take from a channel
produced by the timeout method,

60
00:03:37.247 --> 00:03:39.652
it doesn't matter to me
what channel it is, but

61
00:03:39.652 --> 00:03:44.123
I know that that channel is not gonna send
me a message until after 500 milliseconds.

62
00:03:44.123 --> 00:03:47.080
&gt;&gt; Speaker 2: There's a channel
declaration ch above.

63
00:03:47.080 --> 00:03:50.530
&gt;&gt; Kyle Simpson: Yeah, it's like in
the previous slide, we made one here.

64
00:03:50.530 --> 00:03:54.540
These libraries have different
ways of making your channel so

65
00:03:55.630 --> 00:03:59.150
that's how you make a channel is
like up on line 1 for example.

66
00:03:59.150 --> 00:04:03.230
Here that channel,
we just know it exists in the ether.

67
00:04:03.230 --> 00:04:04.373
It came from somewhere.
&gt;&gt; Speaker 3: Channel is kind

68
00:04:04.373 --> 00:04:06.470
of a global though.

69
00:04:06.470 --> 00:04:09.730
You say they don't know about each other,
but somehow you have to have this global

70
00:04:09.730 --> 00:04:13.220
state that's-
&gt;&gt; Kyle Simpson: That's

71
00:04:13.220 --> 00:04:16.780
in my opinion one of the downsides
of this particular library.

72
00:04:16.780 --> 00:04:18.370
It assumes global variables.

73
00:04:19.460 --> 00:04:22.560
We'll see that other libraries
like mine don't do that.

74
00:04:24.010 --> 00:04:24.590
okay?

75
00:04:24.590 --> 00:04:28.628
But yes, that's a detail that you have
to figure out some way to transport

76
00:04:28.628 --> 00:04:30.789
the channel so that the two different.

77
00:04:30.789 --> 00:04:33.293
The only thing they have to know about
is they have to share a reference to

78
00:04:33.293 --> 00:04:33.810
the channel.

79
00:04:34.880 --> 00:04:39.656
There's lots of different ways that
you can do that global variables as

80
00:04:39.656 --> 00:04:41.338
just one of them, okay?

81
00:04:47.318 --> 00:04:49.251
&gt;&gt; Kyle Simpson: Last thing I
wanna show you, so the puts and

82
00:04:49.251 --> 00:04:50.973
takes are pretty straight forward but

83
00:04:50.973 --> 00:04:55.190
there are actually dozens of different
primitives that are defined here.

84
00:04:55.190 --> 00:04:57.590
Put and
take are by far the most commonly used.

85
00:04:57.590 --> 00:05:01.140
But there's another one that's pretty
commonly used, and it's called alts.

86
00:05:01.140 --> 00:05:06.415
Alts lets you define a list
of multiple channels and say

87
00:05:06.415 --> 00:05:12.265
I want to do some action on the first of
these channels that lets me do something.

88
00:05:12.265 --> 00:05:15.065
So you might have two channels
that you'd like to take from and

89
00:05:15.065 --> 00:05:18.395
one channel that you'd like to put on and
you don't care which of those three

90
00:05:18.395 --> 00:05:21.525
actions happens but you're just waiting
for somebody to unblocked you so

91
00:05:21.525 --> 00:05:22.935
that you can do something.

92
00:05:22.935 --> 00:05:25.320
So you pass in those instructions here.

93
00:05:25.320 --> 00:05:28.480
Because I'm just passing in three channels
the default is that I wanna take from

94
00:05:28.480 --> 00:05:29.690
those channels.

95
00:05:29.690 --> 00:05:33.900
But I could also pass in one channel where
I'm saying I wanna put to this channel.

96
00:05:33.900 --> 00:05:36.488
And it's not gonna get to channel 2 and

97
00:05:36.488 --> 00:05:40.140
channel 3 at all if channel 1
always has a message ready.

98
00:05:41.380 --> 00:05:45.340
So it's basically saying whichever one in
order that I specify them whichever one

99
00:05:45.340 --> 00:05:49.390
has something for somebody it's kind
of like a promised out rate sort of.

100
00:05:49.390 --> 00:05:53.330
So everyone has something for me,
then it's gonna unblock me and let me go.

101
00:05:53.330 --> 00:05:56.663
So this is a way to have lots of
different input channels coming in and

102
00:05:56.663 --> 00:05:59.362
being able to manage all of
those different channels.

103
00:06:08.833 --> 00:06:11.733
&gt;&gt; Kyle Simpson: That's just a silly
example I wanted to throw in it's one of

104
00:06:11.733 --> 00:06:15.810
the canonical examples for CSP, you notice
on line 1 I create a single go routine.

105
00:06:17.540 --> 00:06:20.960
And there on line 2 is where
I'm making a channel so

106
00:06:20.960 --> 00:06:24.830
you see csp.chan that's on make
a channel with this particular library.

107
00:06:24.830 --> 00:06:29.493
So I'm making a ping pong table for
my channel and notice lines 4 and

108
00:06:29.493 --> 00:06:33.800
5 are creating more go routines.

109
00:06:33.800 --> 00:06:38.010
I'm calling the go method and I'm passing
it a reference to another generator,

110
00:06:38.010 --> 00:06:40.569
the another go routine,
the generator that's on line 12.

111
00:06:42.530 --> 00:06:46.700
So I'm creating two instances
of my play or go routine, so

112
00:06:46.700 --> 00:06:49.090
now I have three go routines
happening at the same time.

113
00:06:49.090 --> 00:06:53.456
I have this main one, which is kind
of like the referee for the game and

114
00:06:53.456 --> 00:06:55.054
then I have two players.

115
00:06:55.054 --> 00:06:57.438
And I have a table which
represents my channel, and

116
00:06:57.438 --> 00:06:59.767
the way we're going to
trade information back and

117
00:06:59.767 --> 00:07:04.180
forth is that we're gonna trade a ball
back and forth across the channels.

118
00:07:04.180 --> 00:07:08.719
So the first player is called ping
in the second player is called pong.

119
00:07:08.719 --> 00:07:13.213
And you notice that the player on line
13 it set up with a while true loop.

120
00:07:13.213 --> 00:07:16.920
He says while I can keep going
which means basically forever.

121
00:07:18.200 --> 00:07:25.070
I am going to take from the tables so
I'm waiting for the ball to get hit to me.

122
00:07:25.070 --> 00:07:28.360
And as long as I didn't get
the message that my channel is closed,

123
00:07:28.360 --> 00:07:34.110
which tells me that the game is over, then
I'm going to update my hit count by one,

124
00:07:34.110 --> 00:07:37.150
print out the fact that I'm
the one hitting the ball.

125
00:07:37.150 --> 00:07:40.410
And then I'm gonna wait 100 milliseconds
to add a little bit of latency to

126
00:07:40.410 --> 00:07:44.600
the system, and then I'm gonna hit
the ball back to the other player.

127
00:07:44.600 --> 00:07:46.810
And that's line 22, and
I put the ball back.

128
00:07:48.220 --> 00:07:51.970
So these two different player
instances that trade the ball back and

129
00:07:51.970 --> 00:07:55.741
forth every 100 milliseconds
until the referee says game over.

130
00:07:55.741 --> 00:08:00.938
And that's what happens up on
line 9 after 1000 milliseconds

131
00:08:00.938 --> 00:08:05.684
the referee closes the table
channel says the game's over.

132
00:08:11.909 --> 00:08:15.750
&gt;&gt; Kyle Simpson: First time I saw this
example that's when I had that, what.

133
00:08:17.420 --> 00:08:21.801
I'd never seen anything like this before
and ever since then I've been fascinated

134
00:08:21.801 --> 00:08:25.870
and actively researching how can we take
that and make the programming that we

135
00:08:25.870 --> 00:08:29.877
do more reasonable, more understandable
by making things more modular and

136
00:08:29.877 --> 00:08:33.723
more independent, so we don't have so
much complexity in our systems.

