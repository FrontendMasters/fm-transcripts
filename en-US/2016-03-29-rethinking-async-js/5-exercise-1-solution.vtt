WEBVTT

1
00:00:00.000 --> 00:00:04.036
[MUSIC]

2
00:00:04.036 --> 00:00:08.720
&gt;&gt; Kyle: Let's talk through how we
might choose to solve this problem.

3
00:00:10.270 --> 00:00:14.450
When this callback is called we're
going to get a response back and

4
00:00:14.450 --> 00:00:17.840
because of closure we gonna know which
one of the three files it came from.

5
00:00:17.840 --> 00:00:18.540
Does everybody see that?

6
00:00:19.870 --> 00:00:25.750
So what I could do is I could have
a handle response function that I

7
00:00:25.750 --> 00:00:32.200
call out to with the file name and
the text that it got, okay?

8
00:00:32.200 --> 00:00:36.735
Now I could do that code directly inside
of here but I'm pushing it out to

9
00:00:36.735 --> 00:00:40.983
another function so that I have
a little bit less nesting going on.

10
00:00:40.983 --> 00:00:46.249
All right now, handle response receives

11
00:00:46.249 --> 00:00:50.311
a file name and some contents for

12
00:00:50.311 --> 00:00:55.132
the file, everyone following that?

13
00:00:55.132 --> 00:00:58.965
And what I'm going to need is
something in closing scope,

14
00:00:58.965 --> 00:01:02.722
in this case probably the global scope,
some variable,

15
00:01:02.722 --> 00:01:07.729
some object that is going to keep track
of the responses that have come back,

16
00:01:07.729 --> 00:01:11.983
in case I get a response back
earlier than I'm able to render it.

17
00:01:11.983 --> 00:01:13.670
Everybody with me on that?

18
00:01:15.370 --> 00:01:18.240
I might get a response back and be able
to immediately render it but I'm going to

19
00:01:18.240 --> 00:01:22.730
need something to hold on to the responses
that I get back that I can't yet render.

20
00:01:22.730 --> 00:01:27.890
And I'm going to need to be able to,
basically, iterate over that collection of

21
00:01:27.890 --> 00:01:32.930
responses when it is time to print things
out and print out whatever I've gotten.

22
00:01:32.930 --> 00:01:38.380
So the way I'm going to do that is
simply have a variable called responses,

23
00:01:38.380 --> 00:01:39.460
and we'll make it an object.

24
00:01:40.600 --> 00:01:43.670
This is not, by any means,
the only way to solve these exercises.

25
00:01:43.670 --> 00:01:45.560
As with almost everything
we do in these workshops,

26
00:01:45.560 --> 00:01:47.560
there's many different ways to slice it.

27
00:01:47.560 --> 00:01:50.910
I'm only walking you through one way
of modeling this mentally, okay?

28
00:01:52.510 --> 00:01:57.606
So handle response could

29
00:01:57.606 --> 00:02:03.930
say if responses of filename.

30
00:02:03.930 --> 00:02:07.320
That is an object whose
property is the filename,

31
00:02:07.320 --> 00:02:10.510
the URL that was used if
that's not already set.

32
00:02:13.500 --> 00:02:16.230
So maybe I would do that instead
of response as a filename,

33
00:02:16.230 --> 00:02:21.390
maybe I'll say if not
filename in responses.

34
00:02:21.390 --> 00:02:26.300
So I make sure for a fact that this
function is getting called with a response

35
00:02:26.300 --> 00:02:28.070
that I haven't yet seen.

36
00:02:28.070 --> 00:02:31.540
This takes care of maybe the function
somehow getting double called or

37
00:02:31.540 --> 00:02:33.020
whatever, right?

38
00:02:33.020 --> 00:02:35.810
So I'm gonna say this is a response
that I have not yet seen yet.

39
00:02:35.810 --> 00:02:43.010
So the first step is definitely
to add it to my object.

40
00:02:43.010 --> 00:02:44.405
I'm storing it into an object,

41
00:02:44.405 --> 00:02:50.692
okay?
&gt;&gt; Kyle: File name being the property

42
00:02:50.692 --> 00:02:55.520
location on the object, contents being the
value that I'm putting into the object.

43
00:02:57.480 --> 00:03:01.352
So if that was file1, if this was
the first time this is being called, and

44
00:03:01.352 --> 00:03:04.670
that was file1, I could iterate
over the stuff in responses.

45
00:03:04.670 --> 00:03:09.050
And if there was stuff to render,
I could immediately render it.

46
00:03:09.050 --> 00:03:11.480
Take it right back out of
the response's object.

47
00:03:12.950 --> 00:03:18.320
Or I might have just put file two in and
file one isn't yet there in which case

48
00:03:18.320 --> 00:03:23.120
I can't go on yet I just need to leave
it there and try it again later, okay?

49
00:03:23.120 --> 00:03:26.690
Keep in mind this handle
responsibility called all three times.

50
00:03:26.690 --> 00:03:29.890
So we called every single time we get an
AJAX response back is going to get called

51
00:03:29.890 --> 00:03:32.810
so it's going to have an opportunity
to be called for all three.

52
00:03:32.810 --> 00:03:36.690
But we're not sure which order there's six
different ways that this can happen or

53
00:03:36.690 --> 00:03:38.320
three different ways or whatever.

54
00:03:38.320 --> 00:03:40.150
There's a lot of different
ways this can happen and

55
00:03:40.150 --> 00:03:41.870
we're not sure which order
is going to happen and so

56
00:03:41.870 --> 00:03:45.810
we are trying to coordinate that or
normalizing that concurrency.

57
00:03:45.810 --> 00:03:50.270
So after I've made sure
that my response has been

58
00:03:50.270 --> 00:03:54.490
stored into my responses in the contents
have been stored in the responses.

59
00:03:54.490 --> 00:03:59.544
Now I could simply start
out with an array.

60
00:03:59.544 --> 00:04:03.900
Now, this is a simple
cheat way of doing it.

61
00:04:03.900 --> 00:04:08.090
There are, of course other ways
where I could've kept those in

62
00:04:09.980 --> 00:04:13.100
a external location in some way but

63
00:04:13.100 --> 00:04:16.900
I'm just trying to come up with
the simplest way of solving this problem.

64
00:04:16.900 --> 00:04:20.940
If I know what those URLs are, and I know
what order they're supposed to happen in.

65
00:04:20.940 --> 00:04:24.850
I could have produced this array by
the order that they were requested in,

66
00:04:24.850 --> 00:04:29.000
if that's what I wanted, again,
just taking the simple way.

67
00:04:29.000 --> 00:04:33.380
Let's assume that I know that file1,
file2, file3 need to happen in this order.

68
00:04:33.380 --> 00:04:36.730
So now I can just say, for( var i=0).

69
00:04:36.730 --> 00:04:41.788
I less than arr.length and
maybe instead of arr maybe I'll call this

70
00:04:41.788 --> 00:04:49.288
filenames.
&gt;&gt; Kyle: I++ so

71
00:04:49.288 --> 00:04:52.220
I'm going to look at file1.

72
00:04:52.220 --> 00:04:57.430
It's going to be filenames of i which the
first iteration is going to be file one.

73
00:04:57.430 --> 00:05:02.594
I'm gonna say if that is even

74
00:05:02.594 --> 00:05:06.910
the responses object.

75
00:05:06.910 --> 00:05:14.710
So filenames of i is in responses or
it's not in responses.

76
00:05:15.940 --> 00:05:18.610
Can anybody guess what I'm going
to do if it's not in responses?

77
00:05:20.450 --> 00:05:21.310
Break the for loop.

78
00:05:22.990 --> 00:05:24.410
Actually in this case for

79
00:05:24.410 --> 00:05:29.150
convenience sake I'm just gonna
return just completely empty out.

80
00:05:29.150 --> 00:05:33.340
So whichever case I'm in whether I'm
looking at file1 and it's not in there.

81
00:05:33.340 --> 00:05:36.130
Or I'm looking at file2 and it's not
in there, or I'm looking at file 3 and

82
00:05:36.130 --> 00:05:36.950
it's not in there.

83
00:05:36.950 --> 00:05:41.130
I've got nothing left to render on this
particular pass through my responses.

84
00:05:41.130 --> 00:05:45.510
Cuz I know if it's not there I'm
not gonna render anything else.

85
00:05:45.510 --> 00:05:47.870
So I can take advantage
of an early return here.

86
00:05:47.870 --> 00:05:49.029
If it is in there.

87
00:05:50.590 --> 00:05:58.720
I can say, if it's still.
&gt;&gt; Kyle: For example,

88
00:05:58.720 --> 00:06:04.338
I can say if it's still a truthy value,
or I could say if it's still a string.

89
00:06:04.338 --> 00:06:08.929
And you'll see why I'm
saying that in a moment.

90
00:06:10.320 --> 00:06:14.710
If it's still a string then I know
it's time to go ahead and render this.

91
00:06:15.890 --> 00:06:23.953
So I'll say filenames I'll say
responses of filenames of i.

92
00:06:23.953 --> 00:06:29.253
This one is going to need to be the same
things as responses of filenames of i.

93
00:06:30.990 --> 00:06:32.820
Now, now that I've rendered it.

94
00:06:32.820 --> 00:06:37.760
I want to leave the entry in there but
I want to mark it as having been rendered.

95
00:06:37.760 --> 00:06:41.665
So a simple way of marking it as having
been rendered is to change it from being

96
00:06:41.665 --> 00:06:42.223
the text.

97
00:06:51.015 --> 00:06:53.350
&gt;&gt; Kyle: To something like false.

98
00:06:53.350 --> 00:06:54.990
So the entry is still in the object,

99
00:06:54.990 --> 00:06:57.650
which means I'm not going to
try to readd it in there.

100
00:06:57.650 --> 00:07:01.040
But I'm not going to try
to re-render it over and

101
00:07:01.040 --> 00:07:04.530
over again, because it's going
to fail this typo check.

102
00:07:04.530 --> 00:07:07.420
There's a million different ways that you
could choose to implement this logic.

103
00:07:07.420 --> 00:07:09.990
I'm just showing you one
possible way of saying.

104
00:07:09.990 --> 00:07:12.548
I'm living over this list and I'm
checking to see whether I need to render

105
00:07:12.548 --> 00:07:16.748
something.
&gt;&gt; Kyle: At the end of this,

106
00:07:16.748 --> 00:07:21.816
if I have rendered all three of them,
&gt;&gt; Kyle: Then I can

107
00:07:21.816 --> 00:07:28.023
finally output my complete message.
&gt;&gt; Kyle: This

108
00:07:28.023 --> 00:07:31.700
function is gonna get called for
each of those three times.

109
00:07:31.700 --> 00:07:35.630
The happy path is that it gets
called once with file1 and

110
00:07:35.630 --> 00:07:38.150
then once with file2 and
then once with file3 and

111
00:07:38.150 --> 00:07:43.630
it never needs to get to this early return
thing and every needs to even store thing.

112
00:07:43.630 --> 00:07:47.677
But it might get called once with file3
first, and then once with file2 first, and

113
00:07:47.677 --> 00:07:51.667
then finally the third time with file1,
where it hasn't rendered anything yet.

114
00:07:51.667 --> 00:07:55.697
And that third time, when it goes to loop
through, it's going to say I do have

115
00:07:55.697 --> 00:07:59.640
a file1 render, I do have a file2 render,
I do have a file3.

116
00:07:59.640 --> 00:08:03.737
So which every way these come in,
I'm always going to render asap but

117
00:08:03.737 --> 00:08:06.153
only in the correct articulated order.

118
00:08:06.153 --> 00:08:08.406
Yes.
&gt;&gt; Speaker 2: So

119
00:08:08.406 --> 00:08:13.128
I maybe I understood
the params that went wrong but

120
00:08:13.128 --> 00:08:19.202
I thought you said you wanted to
do it by altering the callbacks or

121
00:08:19.202 --> 00:08:22.920
did you not say that?
&gt;&gt; Kyle: What do you mean?

122
00:08:24.850 --> 00:08:27.045
&gt;&gt; Speaker 2: So I was thinking maybe we

123
00:08:27.045 --> 00:08:32.374
would we have different callbacks for
all of the get files and

124
00:08:32.374 --> 00:08:36.674
then somehow we would audit them.
&gt;&gt; Kyle: We do have

125
00:08:36.674 --> 00:08:41.328
different callbacks for all the get giles.
&gt;&gt; Speaker 2: Okay,

126
00:08:41.328 --> 00:08:43.330
that's fine
&gt;&gt; Kyle: I'm not sure I understand what

127
00:08:43.330 --> 00:08:45.130
you mean.
&gt;&gt; Speaker 2: I

128
00:08:45.130 --> 00:08:49.840
wasn't expecting this intimidation.
&gt;&gt; Kyle: Did you solve it a different way?

129
00:08:49.840 --> 00:08:50.555
&gt;&gt; Speaker 2: No I couldn't.

130
00:08:50.555 --> 00:08:51.146
&gt;&gt; Kyle: Okay.

131
00:08:51.146 --> 00:08:51.906
&gt;&gt; Speaker 2: I was thinking

132
00:08:51.906 --> 00:08:56.276
more along the lines of Promises about the
start of the callback and something they

133
00:08:56.276 --> 00:09:00.110
couldn't come up with anything.
&gt;&gt; Kyle: Well the only way you're going to

134
00:09:00.110 --> 00:09:03.250
end up ordering the callbacks is
to have sequential requesting.

135
00:09:04.260 --> 00:09:07.739
Where you don't even request file2
until after file1 is finished.

136
00:09:07.739 --> 00:09:12.482
Which violates one of the fundamental
premises of the setup of the problem which

137
00:09:12.482 --> 00:09:13.980
is to call them in order.

138
00:09:15.260 --> 00:09:21.730
That's why that's there because it's easy
if you just wanna do serial requesting.

139
00:09:21.730 --> 00:09:25.920
But it's the parallel requesting that
causes this concurrency coordination

140
00:09:25.920 --> 00:09:29.220
to be more complex, okay?

141
00:09:29.220 --> 00:09:33.234
The point that's really being made here is
that three independent callbacks have to

142
00:09:33.234 --> 00:09:36.012
share some closure state even
if it's a global variable.

143
00:09:36.012 --> 00:09:40.260
They're gonna have to share some
closure state to coordinate themselves.

144
00:09:40.260 --> 00:09:42.350
That's just,
there's no other way around it.

145
00:09:43.510 --> 00:09:46.665
Whether it's the global state or whether
there's some other wrapper that variables

146
00:09:46.665 --> 00:09:48.128
passed to me no matter how you slice it.

147
00:09:48.128 --> 00:09:51.252
There gonna have to be some shared
variable cost all three callbacks.

148
00:09:51.252 --> 00:09:54.535
And they're gonna have to potentially
store something in that variable

149
00:09:54.535 --> 00:09:56.780
until it's time to come back and get it.

150
00:09:56.780 --> 00:10:00.010
That's what we mean by saying that
we're coordinating concurrency,

151
00:10:00.010 --> 00:10:02.359
is that we're managing that
time state complexity.

152
00:10:04.240 --> 00:10:08.640
And we can see that there's a solution to
it but I don't think anybody would argue

153
00:10:08.640 --> 00:10:12.360
that this is a good graceful
solution to it, right?

154
00:10:12.360 --> 00:10:13.830
It's ugly, right?

155
00:10:13.830 --> 00:10:15.490
But it gets the job done.

156
00:10:15.490 --> 00:10:19.086
And I can't tell you many hundreds of
times I've solved similar problems in

157
00:10:19.086 --> 00:10:22.174
the past where the only tool I had
available to me was functions and

158
00:10:22.174 --> 00:10:23.202
closure variables.

159
00:10:23.202 --> 00:10:28.040
So we can get the job done,
even complex certain areas.

160
00:10:28.040 --> 00:10:31.840
But this isn't the ideal pattern and
that's why I'm walking you through it.

161
00:10:31.840 --> 00:10:33.360
I'm showing you, first,

162
00:10:33.360 --> 00:10:37.523
the pain points that we've been dealing
with to motivate why we want better

163
00:10:37.523 --> 00:10:42.989
patterns.q Is everybody with me on that?
&gt;&gt; Kyle: Any

164
00:10:42.989 --> 00:10:44.760
other questions about exercise one?

165
00:10:47.770 --> 00:10:50.810
We're gonna get to come back to the exact
same problem domain over and over and

166
00:10:50.810 --> 00:10:52.050
over again, okay?

167
00:10:52.050 --> 00:10:55.080
You'll get better and
better at solving this problem with better

168
00:10:55.080 --> 00:10:59.716
patterns.
&gt;&gt; Speaker 3: By the way,

169
00:10:59.716 --> 00:11:05.346
I'm not convinced that you're going to
return at, like if it comes back file2,

170
00:11:05.346 --> 00:11:10.079
file1, file3 I think you might
get to complete even after file2,

171
00:11:10.079 --> 00:11:15.515
cuz won't it fall through?
&gt;&gt; Kyle: I'm sorry,

172
00:11:15.515 --> 00:11:19.619
what?
&gt;&gt; Speaker 3: Won't you get the complete

173
00:11:19.619 --> 00:11:24.910
if it comes back, let's say file2,
file1, and then file3.

174
00:11:24.910 --> 00:11:30.280
But after you get file2, it should print
out and fall down through the output

175
00:11:30.280 --> 00:11:35.080
complete and then so you get complete then
file3 should come back then get another

176
00:11:35.080 --> 00:11:40.673
complete.
&gt;&gt; Kyle: You're still loosing me,

177
00:11:40.673 --> 00:11:42.668
maybe over a break we can talk-
&gt;&gt; Speaker 3: Yeah.

178
00:11:42.668 --> 00:11:43.867
&gt;&gt; Kyle: I mean you can compare what I've

179
00:11:43.867 --> 00:11:45.653
typed here to what I typed
in the solution file.

180
00:11:45.653 --> 00:11:48.514
The solution file is objectively correct,
and

181
00:11:48.514 --> 00:11:53.377
maybe I missed something, but I'm pretty
sure one of those three passes is gonna

182
00:11:53.377 --> 00:11:56.470
hit that thing before it
hits the output complete.

183
00:11:56.470 --> 00:11:58.540
You're either gonna be able to go
through the entire for loop or

184
00:11:58.540 --> 00:12:01.840
you're gonna hit this case,
which stops it from getting to complete.

