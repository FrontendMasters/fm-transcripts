WEBVTT

1
00:00:00.000 --> 00:00:03.708
[MUSIC]

2
00:00:03.708 --> 00:00:07.698
&gt;&gt; Kyle Simpson: So
I'm going to open exercise 5 and

3
00:00:07.698 --> 00:00:15.811
then I'm going to split my view.
&gt;&gt; Kyle Simpson: And

4
00:00:15.811 --> 00:00:20.404
I'm going to open exercise
3 fixed on the side so

5
00:00:20.404 --> 00:00:25.904
that we can compare these two,
actually do that reverse.

6
00:00:29.440 --> 00:00:32.840
So we're going to try to do a side
by side comparison of what we were

7
00:00:32.840 --> 00:00:35.900
how we were solving Promises with how
we're gonna solve it with asynquence

8
00:00:35.900 --> 00:00:40.420
because the purpose of the exercise
that is to show you the similarities and

9
00:00:40.420 --> 00:00:45.874
show off a little bit of
how asynquence can improve.

10
00:00:45.874 --> 00:00:51.850
Okay, so
first of all we have the getFile function.

11
00:00:51.850 --> 00:00:55.580
And on the left you can see
that we're creating a Promise.

12
00:00:55.580 --> 00:01:00.120
So on the right we want to do something
very similar but a single step sequence

13
00:01:00.120 --> 00:01:04.390
is the same thing as a Promise,
roughly conceptually the same thing.

14
00:01:04.390 --> 00:01:09.135
So to create a single step asynquence,
we're gonna make call ASQ,

15
00:01:09.135 --> 00:01:13.798
the function ASQ, which receives
a callback that we need to call so

16
00:01:13.798 --> 00:01:18.814
that's much like the resolve callback
that we're getting over here.

17
00:01:18.814 --> 00:01:22.721
Let me zoom out just slightly so

18
00:01:22.721 --> 00:01:29.070
it's a little easier to
see more at a time, okay?

19
00:01:29.070 --> 00:01:32.260
And we're still going to
call the fake Ajax call.

20
00:01:34.190 --> 00:01:37.709
With the file URL in we're gonna
pass in done instead of resolve.

21
00:01:39.650 --> 00:01:43.270
So that's all we have to do to
make a single step asynquence

22
00:01:43.270 --> 00:01:49.210
call, in the most
traditional way possible.

23
00:01:49.210 --> 00:01:52.180
And you'll notice that it's basically
the same thing as the Promise

24
00:01:52.180 --> 00:01:54.380
except it's a little shorter and simpler.

25
00:01:54.380 --> 00:01:56.580
We're not calling the new keyword.

26
00:01:56.580 --> 00:02:00.490
We don't have some more
complicated set of resolve and

27
00:02:00.490 --> 00:02:05.470
reject that we're having to keep track of,
we just have the single callback for done.

28
00:02:06.530 --> 00:02:10.600
There are ways to signal errors, but you
don't have a separate callback for that.

29
00:02:10.600 --> 00:02:14.880
So well get too far into that, but
I do just want to quickly show you that

30
00:02:14.880 --> 00:02:18.780
the value of having a library is that
there are additional benefits that we can

31
00:02:18.780 --> 00:02:23.370
get so one of those benefits is that it's
such a common pattern to need to wrap

32
00:02:26.090 --> 00:02:28.540
like to create these wrapped utilities.

33
00:02:28.540 --> 00:02:33.800
Basically it's called lifting taking a
function that only receives callbacks and

34
00:02:33.800 --> 00:02:39.480
turning that into a function that
will return us asynquence or

35
00:02:39.480 --> 00:02:40.880
return as a Promise.

36
00:02:40.880 --> 00:02:45.070
So another way of doing that
same thing would have been

37
00:02:45.070 --> 00:02:47.195
to to make myself a getFile.

38
00:02:47.195 --> 00:02:55.060
And calling an ASQ.wrap utility
that exists in the library.

39
00:02:55.060 --> 00:02:59.070
Its job is to take a callback
expecting function and

40
00:02:59.070 --> 00:03:03.060
make it into a Promise expecting or
Promise returning function.

41
00:03:03.060 --> 00:03:06.931
So if we pass in fakeAjax to it.

42
00:03:06.931 --> 00:03:11.710
Now by default the assumption here
is that it treats callbacks as

43
00:03:11.710 --> 00:03:15.900
error first style, because that's
extremely common in the node world.

44
00:03:15.900 --> 00:03:20.150
In our particular case fakeAjax
is not error for style.

45
00:03:20.150 --> 00:03:23.410
So we don't wanna make that assumption.

46
00:03:23.410 --> 00:03:27.070
But in the most majority case
you're gonna be dealing with error

47
00:03:27.070 --> 00:03:30.340
first tile functions all over node or
other Angular libraries or

48
00:03:30.340 --> 00:03:34.460
whatever in which case,
you just call wrap and that's it.

49
00:03:34.460 --> 00:03:37.170
And now we have a getFile function,
I didn't need to do anything else.

50
00:03:37.170 --> 00:03:41.450
I now have the getFile function that will
return us in asynquence and that's done.

51
00:03:41.450 --> 00:03:44.750
You can configure this wrap to do
other things, and in this case,

52
00:03:44.750 --> 00:03:51.242
we're going to tell it that we
want to do a simplecb style

53
00:03:51.242 --> 00:03:56.380
wrapping because we're assuming
that the fakeAjax function

54
00:03:56.380 --> 00:04:00.040
that we're dealing with is a simple
callback rather than error first style so.

55
00:04:00.040 --> 00:04:02.580
Documentation on how you can
configure wrap a little bit.

56
00:04:03.610 --> 00:04:06.970
Most of the time you won't need to do any
configuration at all but it has the option

57
00:04:06.970 --> 00:04:11.480
of changing that wrapping behavior you
need but that one line there on line 22

58
00:04:11.480 --> 00:04:16.280
that's all I need to do to create
my wrapped getFile function.

59
00:04:16.280 --> 00:04:18.840
And I can call getFile
exactly the same way

60
00:04:18.840 --> 00:04:20.810
as I would expect to
be able to call it so.

61
00:04:20.810 --> 00:04:23.690
I just wanted to show off that there
are what there are some of those sorts of

62
00:04:23.690 --> 00:04:29.330
benefits from from asynchronous libraries
they can add these utilities on,

63
00:04:29.330 --> 00:04:33.030
on top of the normal course stuff and
help make some of these

64
00:04:34.670 --> 00:04:38.160
tasks that we do, these remedial tasks
a little bit more straight forward.

65
00:04:38.160 --> 00:04:41.000
Okay, so we'll just stick with
the easier to understand one but

66
00:04:41.000 --> 00:04:43.370
you can know that there
are things like wrapping.

67
00:04:43.370 --> 00:04:47.040
All right,
what about requesting the files at once?

68
00:04:47.040 --> 00:04:51.210
Well I'm gonna call mine s1 cuz
it's a sequence instead of p1 but

69
00:04:51.210 --> 00:04:54.150
is still fundamentally gonna
be a getFile call with file1.

70
00:04:55.590 --> 00:05:01.536
And s2 is getFile("file2") and

71
00:05:01.536 --> 00:05:07.861
s3 is getFile("file3"), okay?

72
00:05:07.861 --> 00:05:09.710
All right, so
that's pretty straightforward.

73
00:05:12.730 --> 00:05:14.160
Let's go to the chain and

74
00:05:14.160 --> 00:05:16.394
look at the difference in the in
the way the chains gonna work.

75
00:05:20.680 --> 00:05:24.943
We have an s1 that represents
the first step in our chains us going

76
00:05:24.943 --> 00:05:26.579
to the same thing as p1.

77
00:05:26.579 --> 00:05:32.373
Now in the asynquence API,
rather than calling a .then

78
00:05:32.373 --> 00:05:37.320
whenever we want to do
some asynchronous step.

79
00:05:37.320 --> 00:05:41.640
If we have asynchronous step,
which is what output is, we use .val.

80
00:05:41.640 --> 00:05:43.171
So I'm going to call .val, and

81
00:05:43.171 --> 00:05:48.014
pass an output.
&gt;&gt; Kyle Simpson: Remember this is to get

82
00:05:48.014 --> 00:05:52.201
away from the polymorphism that can
make APIs harder to learn instead,

83
00:05:52.201 --> 00:05:56.525
you just learn each step, and
it's clear that val is a synchronous step,

84
00:05:56.525 --> 00:05:58.724
as opposed to an asynchronous step.

85
00:05:58.724 --> 00:06:03.619
All right, so the next one,
I need to to link in the p2 step, right?

86
00:06:03.619 --> 00:06:09.600
Now, remember, I told you that we
have .seq for receiving sequences.

87
00:06:09.600 --> 00:06:12.889
So we could do .seq and

88
00:06:12.889 --> 00:06:17.875
return s2.
&gt;&gt; Kyle Simpson: Looks

89
00:06:17.875 --> 00:06:20.850
very similar to the way that
we do with Promise chain.

90
00:06:20.850 --> 00:06:26.680
One of the advantages of having
a Promise library to give you

91
00:06:26.680 --> 00:06:32.280
extra abstractions to remove some of these
paper cuts and other pointless overheads.

92
00:06:32.280 --> 00:06:35.390
Asynquence allows you to
just pass s2 directly.

93
00:06:36.510 --> 00:06:37.990
I'd love to have that
with the Promise chains.

94
00:06:37.990 --> 00:06:41.970
We don't have that but with a sequence
we can just pass s2 directly and

95
00:06:41.970 --> 00:06:45.457
so then we do .val(output).

96
00:06:45.457 --> 00:06:48.643
Then we do .seq(s3).

97
00:06:48.643 --> 00:06:50.722
Then we do .val(output).

98
00:06:51.880 --> 00:06:58.610
Then we do .val, output("Ccomplete!"),

99
00:06:58.610 --> 00:07:04.299
okay?
&gt;&gt; Kyle Simpson: In

100
00:07:04.299 --> 00:07:06.247
addition to making that observation,

101
00:07:06.247 --> 00:07:09.610
if I know that I can pass these
sequences directly into those steps,

102
00:07:09.610 --> 00:07:13.815
what that actually means is I don't even
need to store these in separate variables.

103
00:07:13.815 --> 00:07:19.970
I can literally take the getFile call,
replace s1.

104
00:07:19.970 --> 00:07:25.921
I can take this getFile call and
put it right in place of s2.

105
00:07:25.921 --> 00:07:28.676
And I can call this getFile call and

106
00:07:28.676 --> 00:07:34.451
put it right in place of s3.
&gt;&gt; Kyle Simpson: Get

107
00:07:34.451 --> 00:07:35.380
rid of those entirely.

108
00:07:36.820 --> 00:07:39.200
It's still making all three getFile calls.

109
00:07:39.200 --> 00:07:42.230
The one on line 29, one on line 31,
and the one on line 33,

110
00:07:42.230 --> 00:07:46.680
it's still making those all upfront, all
at once cuz they're still function calls.

111
00:07:46.680 --> 00:07:49.760
But those return values are immediately
piped into a chain, and

112
00:07:49.760 --> 00:07:52.530
the chain knows how to handle that and
sequence it into the proper order.

113
00:07:53.700 --> 00:07:56.300
So I don't even have to store
them in separate variables and

114
00:07:56.300 --> 00:07:59.100
make a function to return them, so
I just have it straightforward.

115
00:07:59.100 --> 00:08:01.930
So this is trying to illustrate one of
the points that I'm making, is that

116
00:08:01.930 --> 00:08:06.150
the value of a Promise library, whether
you like mine or not, I have no stake in

117
00:08:06.150 --> 00:08:10.130
whether you like this particular one, but
there's a bunch of great ones out there.

118
00:08:10.130 --> 00:08:13.640
The purpose of Promise libraries is to
make it easier to work with Promises, and

119
00:08:13.640 --> 00:08:16.910
I hope that you can see that what
we did on the right hand side Is

120
00:08:16.910 --> 00:08:21.180
quite a bit easier than what we had to do
the same equivalent on the left-hand side.

121
00:08:21.180 --> 00:08:24.681
That's the virtue of trying
to use Promise abstractions,

122
00:08:24.681 --> 00:08:29.441
is that they have the freedom to get rid
of some of the ugly bits, the rough edges,

123
00:08:29.441 --> 00:08:30.857
the weird corner case.

124
00:08:30.857 --> 00:08:35.475
They have the ability to kind of
pave over some of those things, and

125
00:08:35.475 --> 00:08:38.609
that's part of the design
philosophy behind

126
00:08:38.609 --> 00:08:41.642
asynquence, okay?
&gt;&gt; Speaker 2: I used then instead of

127
00:08:41.642 --> 00:08:46.790
sequence, what's the difference?
&gt;&gt; Kyle Simpson: The .then

128
00:08:46.790 --> 00:08:51.340
function will call it the function that it
receives and if it receives a function.

129
00:08:51.340 --> 00:08:57.298
It will call the function that it
receives and pass it a done call back.

130
00:08:57.298 --> 00:09:02.007
The .then keyword for

131
00:09:02.007 --> 00:09:06.990
legacy reasons is polymorphic
in the sense that

132
00:09:06.990 --> 00:09:11.140
if you use it incorrectly and pass it
a sequence, it will not choke at you.

133
00:09:11.140 --> 00:09:15.540
But the proper idiomatic usage is to call
the proper step for the proper thing.

134
00:09:15.540 --> 00:09:19.320
So the purpose of the .then step
is when you want to get the done

135
00:09:19.320 --> 00:09:23.910
function as a continuation and you can
use that continuation however you need.

136
00:09:23.910 --> 00:09:28.314
The purpose of the sequence step is that
you are going to make your own sequence

137
00:09:28.314 --> 00:09:30.019
and return it into the chain.

138
00:09:30.019 --> 00:09:30.800
That makes sense?

139
00:09:33.560 --> 00:09:38.100
And with five or ten minutes of practice
with my API you'll get the sense of,

140
00:09:38.100 --> 00:09:40.650
I use this step for
that purpose this step for that purpose.

141
00:09:40.650 --> 00:09:41.150
That's the goal.

