WEBVTT

1
00:00:00.000 --> 00:00:03.911
[MUSIC]

2
00:00:03.911 --> 00:00:04.960
&gt;&gt; Kyle: All right, so let's jump in.

3
00:00:04.960 --> 00:00:06.790
Let's talk about parallel versus async.

4
00:00:07.800 --> 00:00:11.580
Metaphorically, if we try to understand
what parallel is versus async,

5
00:00:11.580 --> 00:00:14.775
most people conflate those and think
that they're basically the same thing or

6
00:00:14.775 --> 00:00:18.670
JavaScripts version of parallel
is called async or whatever.

7
00:00:18.670 --> 00:00:20.100
It's not really the case.

8
00:00:20.100 --> 00:00:24.329
Only at the highest level if you
really squinted from 50,000 feet up.

9
00:00:24.329 --> 00:00:26.614
Might you look at parallelism and
asynchronicity and

10
00:00:26.614 --> 00:00:28.530
say they're the same thing.

11
00:00:28.530 --> 00:00:29.551
There's important differences.

12
00:00:29.551 --> 00:00:34.754
So let me give you metaphorically
how to kind of work through that.

13
00:00:34.754 --> 00:00:39.665
Parallelism versus non-parallelism,
which we'll sort of group asynchronicity

14
00:00:39.665 --> 00:00:43.730
into non-parallelism for
now and I'll explain that more.

15
00:00:43.730 --> 00:00:48.438
So non-parallelism would be
like you waiting in line at

16
00:00:48.438 --> 00:00:51.650
amusement park for a roller coaster.

17
00:00:51.650 --> 00:00:54.520
Lots of people in line and you finally
get up to the front of the line.

18
00:00:54.520 --> 00:00:58.420
There's a roller coaster there with 30
seats on it but they only let you on.

19
00:00:58.420 --> 00:01:01.230
And you're the only person that
can ride at any given point.

20
00:01:01.230 --> 00:01:04.820
So even though there's capacity for
30 people to ride, at any given moment,

21
00:01:04.820 --> 00:01:06.530
only one person is riding the ride.

22
00:01:08.210 --> 00:01:10.261
That would be non-parallel.

23
00:01:10.261 --> 00:01:12.270
We'll give those different
terms in a moment.

24
00:01:12.270 --> 00:01:15.110
They'd be non-parallel versus
if you waited in line.

25
00:01:15.110 --> 00:01:17.780
You got up there and then 30 people
loaded onto the roller coaster.

26
00:01:17.780 --> 00:01:19.260
And when the roller coaster is running,

27
00:01:19.260 --> 00:01:23.900
all 30 of you are experiencing the roller
coaster at exactly the same instant.

28
00:01:23.900 --> 00:01:24.900
That's more parallelism.

29
00:01:24.900 --> 00:01:28.990
So in a computing sense,
parallelism is expressed through threads.

30
00:01:28.990 --> 00:01:31.240
Most commonly expressed through threads.

31
00:01:31.240 --> 00:01:35.840
The idea that I could have one
thread on one CPU core in my system.

32
00:01:35.840 --> 00:01:36.990
And another thread.

33
00:01:36.990 --> 00:01:40.770
They're are kind of like queues of actions
that need to happen, or operations and

34
00:01:40.770 --> 00:01:41.900
need to happen.

35
00:01:41.900 --> 00:01:45.470
At any given instant, one core could
be doing one of those operations, and

36
00:01:45.470 --> 00:01:47.500
in exactly that same moment,

37
00:01:47.500 --> 00:01:50.250
another operation could be
happening on a different core.

38
00:01:50.250 --> 00:01:51.250
That's true.

39
00:01:51.250 --> 00:01:52.820
Honest to goodness parallelism.

40
00:01:54.380 --> 00:01:57.126
Now, even with the most powerful of
the machines that you may have out there.

41
00:01:57.126 --> 00:02:00.360
You may have a 16 core,
or maybe you have a 32.

42
00:02:00.360 --> 00:02:04.148
Most of us probably have 4,
8 cores in our computers.

43
00:02:04.148 --> 00:02:08.643
32 threads is not nearly enough to run a
modern operating system with the types of

44
00:02:08.643 --> 00:02:12.698
thing, the multitasking that we do
with running all the programs we run.

45
00:02:12.698 --> 00:02:17.236
Even your browser, your single browser
might take up 10 or 15 threads just for

46
00:02:17.236 --> 00:02:19.780
basic operations that
it does on a web page.

47
00:02:19.780 --> 00:02:22.340
So if you've ever opened up
the Task Manager of Chrome and

48
00:02:22.340 --> 00:02:27.370
seen all the processes that are running,
it runs an awful lot of stuff In parallel.

49
00:02:27.370 --> 00:02:31.510
So because we don't have infinite numbers
of cores, the operating system actually

50
00:02:31.510 --> 00:02:34.400
has a layer that we would
call sort of virtual threads.

51
00:02:34.400 --> 00:02:37.150
And it takes care of scheduling
the virtual threads.

52
00:02:37.150 --> 00:02:39.200
It can hand out tens
of thousands of those.

53
00:02:39.200 --> 00:02:42.270
And it takes care of trying to
schedule those across the cores so

54
00:02:42.270 --> 00:02:46.080
that they're happening as and
as much in parallel as possible.

55
00:02:46.080 --> 00:02:48.960
From the perspective of your programming,
you don't really care about that or

56
00:02:48.960 --> 00:02:50.720
even know what cores they're running on.

57
00:02:50.720 --> 00:02:55.260
You just assume that these two things are
on separate threads, that the operating

58
00:02:55.260 --> 00:02:57.690
system will do the right thing and
make sure that they're running separately.

59
00:02:59.260 --> 00:03:02.940
Right, so obviously parallelism
is about optimization, right?

60
00:03:02.940 --> 00:03:04.726
If I've got a bunch of things to do.

61
00:03:04.726 --> 00:03:09.600
I don't wanna wait to do the second set
of tasks until the first set of tasks is

62
00:03:09.600 --> 00:03:13.390
finished, if it's possible to do both at
the same time, if I can get done faster,

63
00:03:13.390 --> 00:03:14.250
that's much better.

64
00:03:14.250 --> 00:03:16.660
Parallelism is about optimization.

65
00:03:16.660 --> 00:03:18.170
All right, so that explains parallelism.

66
00:03:18.170 --> 00:03:20.090
What about asynchronicity?

67
00:03:20.090 --> 00:03:21.750
Well, asynchronicity,
the world that we live in,

68
00:03:21.750 --> 00:03:24.740
in asynchronicity,
moves us to a single thread.

69
00:03:25.840 --> 00:03:29.647
The programming inside of our JavaScript
runs entirely on a single thread even

70
00:03:29.647 --> 00:03:33.455
though the browser may have access to
multiple threads and even the JavaScript

71
00:03:33.455 --> 00:03:37.045
engine node for example could use
hundreds of threads in the background.

72
00:03:37.045 --> 00:03:40.780
But our program only
runs in a single thread.

73
00:03:40.780 --> 00:03:44.760
At any given instant there is only
one line of JavaScript running

74
00:03:44.760 --> 00:03:45.730
in the JavaScript engine.

75
00:03:46.830 --> 00:03:50.800
You could in theory spend multiple
instances of the JavaScript engine

76
00:03:50.800 --> 00:03:54.600
on entirely separate threads and
yes that would be that would look like

77
00:03:54.600 --> 00:03:58.190
multithreaded programming but they
couldn't communicate in any useful way.

78
00:03:59.500 --> 00:04:02.460
Web workers is an example of
trying to bridge that gap.

79
00:04:02.460 --> 00:04:05.940
Web workers is a way of spinning
up an entirely separate thread but

80
00:04:05.940 --> 00:04:09.100
that's not a JavaScript thing,
that's a browser thing.

81
00:04:09.100 --> 00:04:12.190
The web platform defines
the notion of web workers.

82
00:04:12.190 --> 00:04:14.130
Spins up in a whole separate thread,

83
00:04:14.130 --> 00:04:17.300
a whole separate instance
of the JavaScript engine.

84
00:04:17.300 --> 00:04:20.190
As JavaScript is concerned, those two
things don't know about each other

85
00:04:20.190 --> 00:04:23.670
they don't have any overlap, they're
not sharing variables, there's nothing.

86
00:04:23.670 --> 00:04:27.020
The good news is, we don't have to
worry about any of the nonsense that

87
00:04:27.020 --> 00:04:28.176
threaded programming as to where.

88
00:04:28.176 --> 00:04:30.720
We don't have to deal with new taxes and
semaphores and

89
00:04:30.720 --> 00:04:33.340
all of the craziness and
shared resource locking.

90
00:04:34.360 --> 00:04:37.460
We know that only one function
can be running in a given time.

91
00:04:37.460 --> 00:04:41.880
And if you have two separate JavaScript
engines running, it doesn't matter because

92
00:04:41.880 --> 00:04:44.230
they're not gonna be operating
over the same shared space anyway.

93
00:04:45.940 --> 00:04:49.550
Now, web workers fortunately do
give us a communication path

94
00:04:49.550 --> 00:04:51.230
through asynchronous events.

95
00:04:51.230 --> 00:04:54.830
So even though they are functionally
operating on independent threads.

96
00:04:54.830 --> 00:04:57.930
They cannot communicate in a threaded
fashion, they have to communicate back on

97
00:04:57.930 --> 00:05:00.350
that single threaded notion
through the event loop.

