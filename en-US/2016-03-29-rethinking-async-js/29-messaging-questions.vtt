WEBVTT

1
00:00:00.000 --> 00:00:03.648
[MUSIC]

2
00:00:03.648 --> 00:00:06.480
&gt;&gt; Kyle Simpson: I'm gonna run through
the arrows at least one more time,

3
00:00:06.480 --> 00:00:08.966
cuz I know it can be kind of confusing,
all right?

4
00:00:08.966 --> 00:00:09.732
Yes?

5
00:00:09.732 --> 00:00:10.891
&gt;&gt; Student: At this point,

6
00:00:10.891 --> 00:00:15.270
it said meaning,
it's printed out meaning of life 42?

7
00:00:15.270 --> 00:00:18.134
Or it said-
&gt;&gt; Kyle Simpson: After line four runs,

8
00:00:18.134 --> 00:00:21.929
we return the value out, and
it would say meaning of life, colon, 42.

9
00:00:21.929 --> 00:00:25.100
&gt;&gt; Student: 42, but run is not done yet.

10
00:00:25.100 --> 00:00:27.610
&gt;&gt; Kyle Simpson: The generator
would still be in a paused state.

11
00:00:27.610 --> 00:00:29.190
&gt;&gt; Student: Yeah, sorry,
the generator is not done yet.

12
00:00:29.190 --> 00:00:30.740
&gt;&gt; Kyle Simpson: Which actually
brings up a really good point,

13
00:00:30.740 --> 00:00:31.590
I'm glad you asked that.

14
00:00:31.590 --> 00:00:33.370
Generators do not have to ever finish.

15
00:00:34.840 --> 00:00:38.490
It's entirely okay for
you to only partially consume a generator.

16
00:00:38.490 --> 00:00:40.110
And then when you have
no more reference to it,

17
00:00:40.110 --> 00:00:42.300
it's just gonna get garbage
collected like any other value.

18
00:00:43.920 --> 00:00:45.790
Okay, so it's entirely okay to do that.

19
00:00:45.790 --> 00:00:50.366
As matter of fact, sometimes you're going
to design your generators to never finish.

20
00:00:50.366 --> 00:00:52.980
You know how

21
00:00:52.980 --> 00:00:57.230
bad it is usually looked at to put
a while true loop in your programming?

22
00:00:57.230 --> 00:01:00.753
Because while true is like, unless you
have a return or a break in there,

23
00:01:00.753 --> 00:01:02.720
a while true is gonna run forever, right?

24
00:01:03.810 --> 00:01:06.860
Actually it turns out if you put
a while true inside of a generator and

25
00:01:06.860 --> 00:01:08.450
you have a yield keyword in there,

26
00:01:08.450 --> 00:01:11.690
that's an entirely valid design that
you actually do pretty commonly.

27
00:01:12.770 --> 00:01:15.730
I like to say that generators are putting
the while true back into programming.

28
00:01:17.220 --> 00:01:19.762
Right?
Cuz you might wanna generator that every

29
00:01:19.762 --> 00:01:22.634
single time you call it,
maybe the while true loop,

30
00:01:22.634 --> 00:01:25.460
it's going to generate
a new unique ID every time.

31
00:01:25.460 --> 00:01:28.930
So every time I call next, I get a new
Unique ID and then it loops back and

32
00:01:28.930 --> 00:01:32.520
it waits again till I ask for
another value and another value.

33
00:01:32.520 --> 00:01:35.970
That's thinking of generators in the way
that, where their name comes from,

34
00:01:35.970 --> 00:01:41.110
that they are generating or producing
values for us from the outside world.

35
00:01:41.110 --> 00:01:43.460
So that's thinking about
a generator is a producer and

36
00:01:43.460 --> 00:01:45.370
I'm going to consume it
by calling dot next.

37
00:01:46.540 --> 00:01:48.060
From the asynchronous programming world,

38
00:01:48.060 --> 00:01:51.010
I've asked you to flip your
brains back the other way.

39
00:01:51.010 --> 00:01:54.210
So I've asked you to think more about
the inside of the generator, and

40
00:01:54.210 --> 00:01:56.020
not worry about what's
happening on the outside.

41
00:01:57.580 --> 00:01:59.420
But that's where
generators get their name,

42
00:01:59.420 --> 00:02:03.500
is that they produce an iterator
that can be can be consumed.

43
00:02:03.500 --> 00:02:06.700
&gt;&gt; Student 2: Quick question, why do you
put parentheses around the yield keyword?

44
00:02:06.700 --> 00:02:08.060
Does that do anything?

45
00:02:08.060 --> 00:02:10.060
&gt;&gt; Kyle Simpson: Grammatically
it's required.

46
00:02:10.060 --> 00:02:10.610
&gt;&gt; Student 2: Okay.

47
00:02:10.610 --> 00:02:14.060
&gt;&gt; Kyle Simpson: There are some weird
grammatic surrounds the yield keyword.

48
00:02:15.090 --> 00:02:18.840
So without getting on too much of a rabbit
trail there, if you study the ES6 grammar,

49
00:02:18.840 --> 00:02:22.970
the way yield is expressed,
in this particular case it's required.

50
00:02:25.630 --> 00:02:28.280
So that's an unfortunate
nuance of grammar.

51
00:02:30.020 --> 00:02:31.140
Yes.

52
00:02:31.140 --> 00:02:32.769
&gt;&gt; Student 4: There's
a couple questions there,

53
00:02:32.769 --> 00:02:34.790
saying what is line three waiting for?

54
00:02:34.790 --> 00:02:38.230
He thought you mentioned that line
three is waiting for ten to finish.

55
00:02:38.230 --> 00:02:40.520
&gt;&gt; Kyle Simpson: No, so
let me run through the arrows again and

56
00:02:40.520 --> 00:02:41.760
see if that answers that question.

57
00:02:43.490 --> 00:02:47.290
After line five,
none of the generator has started.

58
00:02:47.290 --> 00:02:51.230
We have an iterator for it,
wrapped around the function we call run.

59
00:02:52.290 --> 00:02:53.350
But it hasn't run yet.

60
00:02:53.350 --> 00:02:54.210
Nothing has happened.

61
00:02:54.210 --> 00:02:55.380
I could have called run.

62
00:02:55.380 --> 00:02:58.493
I could have called it step,
if that helps you understand it better.

63
00:02:58.493 --> 00:03:02.440
Cuz stepping is going to step
through it one at a time, okay?

64
00:03:02.440 --> 00:03:03.180
So we call line seven.

65
00:03:03.180 --> 00:03:06.020
We step into it, or
we start the running of it.

66
00:03:06.020 --> 00:03:10.722
We run the first part of the generator and
that's gonna transfer control to line two.

67
00:03:10.722 --> 00:03:14.000
Line two starts to execute,
runs across a yield keyword and

68
00:03:14.000 --> 00:03:16.926
says, I need a value here,
I'm going to wait.

69
00:03:16.926 --> 00:03:18.790
So I'm gonna return control and

70
00:03:18.790 --> 00:03:21.320
pause myself while you get
ready to answer my question.

71
00:03:22.360 --> 00:03:23.500
And I'll wait as long as it takes.

72
00:03:23.500 --> 00:03:26.770
In this case we synchronously
have an answer.

73
00:03:26.770 --> 00:03:29.440
We're going to send an answer
right back in with the value ten.

74
00:03:30.530 --> 00:03:33.960
So the value ten is an actual JavaScript
number, there's no specialty to it,

75
00:03:33.960 --> 00:03:35.530
it's just a number that we pass in.

76
00:03:35.530 --> 00:03:38.810
Could've been a string, could have been
an object, could have been anything.

77
00:03:38.810 --> 00:03:43.370
But it's a value that we pass in and
now it gets added to one and x equals 11.

78
00:03:43.370 --> 00:03:45.470
Then we move on to line three.

79
00:03:45.470 --> 00:03:48.300
Don't get confused by the arrows
we're still running the generator.

80
00:03:48.300 --> 00:03:49.620
We're on the line three.

81
00:03:49.620 --> 00:03:53.380
We start to run line three we
have var y equals one plus.

82
00:03:53.380 --> 00:03:55.520
And oops, there's another yield.

83
00:03:55.520 --> 00:03:58.060
So we need to pause again waiting for
control, so

84
00:03:58.060 --> 00:04:00.050
we are going to return
control to line eight.

85
00:04:01.480 --> 00:04:04.110
Which would mean that line eight
would get an object back with value

86
00:04:04.110 --> 00:04:05.000
undefined under false.

87
00:04:06.190 --> 00:04:07.210
At some later point,

88
00:04:07.210 --> 00:04:12.280
like line ten, we're going to
answer the pending paused question.

89
00:04:12.280 --> 00:04:14.890
The yield keyword from line three
is waiting for an answer, and

90
00:04:14.890 --> 00:04:18.470
we're going to give it that answer
by passing in the value 30.

91
00:04:18.470 --> 00:04:22.620
So the answer to the question is,
what is line three waiting on,

92
00:04:22.620 --> 00:04:24.800
it's waiting on the value
30 from line ten.

93
00:04:24.800 --> 00:04:29.660
Okay, that value comes in,
30 plus 1, we now have 31.

94
00:04:29.660 --> 00:04:31.050
X is 11, y is 31.

95
00:04:31.050 --> 00:04:35.210
We add those two together,
we get the value 42 on line four.

96
00:04:35.210 --> 00:04:39.860
And then we yield out that value,
42, back to line ten.

97
00:04:39.860 --> 00:04:44.130
It's a pause, resume, pause,
resume, pause, resume.

98
00:04:44.130 --> 00:04:48.710
And every pause is asking a question and
every resume is answering the question.

99
00:04:50.540 --> 00:04:51.040
Does that make sense?

100
00:04:52.520 --> 00:04:53.110
Yes?
&gt;&gt; Student 3: So we

101
00:04:53.110 --> 00:04:54.000
are paused on line four?

102
00:04:55.110 --> 00:04:57.130
&gt;&gt; Kyle Simpson: We're
currently paused on line four.

103
00:04:57.130 --> 00:04:58.990
Which is okay,
we can leave it in that state.

104
00:04:58.990 --> 00:05:02.030
On line 12 you could call
run again if you want.

105
00:05:02.030 --> 00:05:04.940
And you could even pass in a value and
it would go in, and

106
00:05:04.940 --> 00:05:07.450
the way we've written our generator we
don't do anything with it, but you could.

107
00:05:07.450 --> 00:05:10.780
And you can have a return key word on
line four and a half if you want and

108
00:05:10.780 --> 00:05:11.910
that would return a value.

109
00:05:11.910 --> 00:05:15.105
That's all totally valid,
but it's not required.

110
00:05:15.105 --> 00:05:18.137
You can partially consume this
generator if you need to.

111
00:05:18.137 --> 00:05:21.035
&gt;&gt; Student: So if you just put the y
through around then you could just

112
00:05:21.035 --> 00:05:22.956
constantly log the meaning of life.

113
00:05:22.956 --> 00:05:24.658
Next, next next, next, next, next.

114
00:05:24.658 --> 00:05:28.858
&gt;&gt; Kyle Simpson: Yep, exactly.

115
00:05:28.858 --> 00:05:32.602
&gt;&gt; Student 3: On line seven if
you passed in on the first one,

116
00:05:32.602 --> 00:05:38.177
if you're passing an initial value,
would it not break on line two?

117
00:05:38.177 --> 00:05:41.390
&gt;&gt; Kyle Simpson: No,
that's not what would happen.

118
00:05:42.570 --> 00:05:43.668
This is one of the.

119
00:05:45.919 --> 00:05:47.896
&gt;&gt; Kyle Simpson: Not so
wonderful parts of the design.

120
00:05:47.896 --> 00:05:54.020
As a VS6, if you pass in a value
to the initial dot next call,

121
00:05:54.020 --> 00:05:56.790
there is no yield keyword waiting for it.

122
00:05:56.790 --> 00:05:57.870
So that value just goes.

123
00:05:59.370 --> 00:05:59.870
Okay?

124
00:05:59.870 --> 00:06:01.910
Which is weird from
the outside perspective.

125
00:06:01.910 --> 00:06:04.920
It feels like there ought to be
some way to get a hold of it, and

126
00:06:04.920 --> 00:06:06.860
there is no way to get a hold of it.

127
00:06:06.860 --> 00:06:11.440
Many people including myself brought up
concerns about the inconsistency of that

128
00:06:11.440 --> 00:06:15.510
design quirk,
thinking that that would confuse people.

129
00:06:15.510 --> 00:06:20.136
There's a proposal ES7, of a way that you
would be able to get access to that value,

130
00:06:20.136 --> 00:06:21.775
not through a yield keyword.

131
00:06:21.775 --> 00:06:25.239
But at the moment as it stands,
don't send a value

132
00:06:25.239 --> 00:06:29.623
to the first dot next call because
it's just going to go [NOISE].

133
00:06:29.623 --> 00:06:35.340
That's an unfortunate,
weird quirk of the design.

134
00:06:35.340 --> 00:06:37.940
&gt;&gt; Student 2: On line four,
if you just do a return of x plus y,

135
00:06:37.940 --> 00:06:39.290
wouldn't that finish also?

136
00:06:39.290 --> 00:06:40.550
&gt;&gt; Kyle Simpson: It would
still do the exact thing.

137
00:06:40.550 --> 00:06:41.100
&gt;&gt; Student 2: Okay.
Then the-

138
00:06:41.100 --> 00:06:42.890
&gt;&gt; Kyle Simpson: But the generator would

139
00:06:42.890 --> 00:06:43.550
be fully complete.

140
00:06:43.550 --> 00:06:44.380
&gt;&gt; Student 2: Would be complete.

141
00:06:44.380 --> 00:06:45.570
&gt;&gt; Kyle Simpson: Yup.
&gt;&gt; Student 2: Okay.

142
00:06:45.570 --> 00:06:46.370
&gt;&gt; Kyle Simpson: That's exactly right.

143
00:06:46.370 --> 00:06:49.280
Okay, in the back.

144
00:06:49.280 --> 00:06:51.800
&gt;&gt; Student 4: They're asking in the chat,
on line two.,

145
00:06:51.800 --> 00:06:56.305
if that takes a long time before reaching
yield, but then you call run, but

146
00:06:56.305 --> 00:07:02.440
a call to run happens before that
finishes, what does that look like?

147
00:07:02.440 --> 00:07:06.190
&gt;&gt; Kyle Simpson: That's not possible with
JavaScript single threaded semantics.

148
00:07:06.190 --> 00:07:09.330
It's not possible for
you to try to start the generator twice,

149
00:07:09.330 --> 00:07:12.580
unless the generator from inside
of itself tried to call run.

150
00:07:13.710 --> 00:07:14.970
And if you did that you're
gonna get an error.

151
00:07:17.610 --> 00:07:21.280
But it's not possible for some other part
of your program to try to call run again.

152
00:07:21.280 --> 00:07:24.980
Because at any given moment only one line
of JavaScript is executing this is all

153
00:07:24.980 --> 00:07:26.760
still fundamentally single threaded.

154
00:07:28.490 --> 00:07:31.747
&gt;&gt; Student 4: And then they're also
following up with, use of a generator,

155
00:07:31.747 --> 00:07:33.660
can you us some real world examples?

156
00:07:34.810 --> 00:07:37.040
&gt;&gt; Kyle Simpson: We're getting there
with the asynchronous pattern.

157
00:07:37.040 --> 00:07:40.600
Okay, he real world example I'm going to
give you is how this is going to totally

158
00:07:40.600 --> 00:07:44.130
magically transform all of
our asynchronous programming.

159
00:07:44.130 --> 00:07:47.480
But there are other use cases
besides asynchronous programming,

160
00:07:47.480 --> 00:07:50.560
the most common of which is to
produce values as I was talking about.

161
00:07:50.560 --> 00:07:52.960
Flipping your mindset back to not
worrying about the inside and

162
00:07:52.960 --> 00:07:54.530
worrying about the outside.

163
00:07:54.530 --> 00:07:56.630
A generator is just a way
to produce an iterator.

164
00:07:56.630 --> 00:07:59.230
And if I wanted to iterate
through a set of values,

165
00:07:59.230 --> 00:08:02.990
I could have my generator sit there and
loop and yield those out to me.

166
00:08:02.990 --> 00:08:05.420
A generator is a way to iterate
over an object, for example,

167
00:08:05.420 --> 00:08:07.225
I could have an object
that's a data structure,

168
00:08:07.225 --> 00:08:12.230
with a bunch of values in it, and I could
define a generator as my iterator, and

169
00:08:12.230 --> 00:08:15.640
just yield out all my own
values in some special way.

170
00:08:15.640 --> 00:08:18.970
So there's ways to use generators
as iterator producers.

171
00:08:20.570 --> 00:08:23.740
I think that's the less
interesting usage of them.

172
00:08:23.740 --> 00:08:26.441
I think the asynchronous pattern that
we're heading towards is the more

173
00:08:26.441 --> 00:08:27.247
interesting usage.

174
00:08:30.018 --> 00:08:37.116
&gt;&gt; Student: Can you make it immediately
invoking to do that first one for you?

175
00:08:37.116 --> 00:08:38.862
&gt;&gt; Kyle Simpson: Can
a generator be an iffy?

176
00:08:38.862 --> 00:08:40.124
Absolutely.

177
00:08:40.124 --> 00:08:44.049
But you're not gonna wanna make
a generator an iffy unless you store that

178
00:08:44.049 --> 00:08:47.600
iterator because you're going
to need that iterator for later.

179
00:08:47.600 --> 00:08:48.250
So yes.

180
00:08:49.810 --> 00:08:50.880
&gt;&gt; Student 4: So
just kind of clarifying then,

181
00:08:50.880 --> 00:08:55.000
they're saying, so
the run is blocked until yield?

182
00:08:55.000 --> 00:08:55.570
&gt;&gt; Kyle Simpson: That is correct.

183
00:08:56.680 --> 00:08:58.630
Just that standard old,

184
00:08:58.630 --> 00:09:02.790
outside of the generato,r everything's
the same as it always was in JavaScript.

185
00:09:02.790 --> 00:09:03.490
Single threaded.

186
00:09:04.810 --> 00:09:06.735
When a call's running,
nothing else can run.

187
00:09:10.506 --> 00:09:13.087
&gt;&gt; Kyle Simpson: The only thing that
changes is what happens on the inside,

188
00:09:13.087 --> 00:09:14.359
the ability for it to pause.

189
00:09:18.219 --> 00:09:18.770
&gt;&gt; Kyle Simpson: Okay.

190
00:09:20.060 --> 00:09:23.470
So let's try to drive more, keep your
mind set up based on the inside, and

191
00:09:23.470 --> 00:09:26.360
don't worry so much about the stuff
on line seven through 11.

192
00:09:26.360 --> 00:09:29.120
Cuz that stuff is gonna end up being
plumbing that's hidden away in a library.

193
00:09:29.120 --> 00:09:31.730
The stuff we're gonna care about
is the stuff that's inside of

194
00:09:31.730 --> 00:09:32.600
the generator, okay?

