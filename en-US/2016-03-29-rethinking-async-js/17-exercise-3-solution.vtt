WEBVTT

1
00:00:00.000 --> 00:00:03.426
[MUSIC]

2
00:00:03.426 --> 00:00:08.455
&gt;&gt; Kyle Simpson: So let's talk about this
exercise from the perspective of promises,

3
00:00:08.455 --> 00:00:14.350
a new tool that we're learning to try to
help improve the way we solve the problem.

4
00:00:18.210 --> 00:00:23.470
Just as I was mentioning before,
our first step is to

5
00:00:23.470 --> 00:00:27.670
create the Promise in
the getFile function, okay?

6
00:00:27.670 --> 00:00:33.912
So we're going to need to return
what we create, so new Promise and

7
00:00:33.912 --> 00:00:39.714
our Promise function is gonna
receive a resolve and a reject.

8
00:00:44.169 --> 00:00:48.860
&gt;&gt; Kyle Simpson: Now we need to
make the fakeAjax call right away.

9
00:00:48.860 --> 00:00:52.650
So let's make the fakeAjax
call with our filename.

10
00:00:52.650 --> 00:00:56.414
And what callback do you suppose
we should provide to fakeAjax?

11
00:00:59.913 --> 00:01:02.169
&gt;&gt; Kyle Simpson: The resolve functions,
pretty straightforward, right?

12
00:01:03.950 --> 00:01:08.240
Now here we're not taking care of errors,
so actually just to keep things simple,

13
00:01:08.240 --> 00:01:11.560
I'm going to just leave off the reject
because we don't care about the error case

14
00:01:11.560 --> 00:01:15.930
but of course, if our Ajax function
had the ability to handle errors,

15
00:01:15.930 --> 00:01:18.503
we could wire up that error handling
through the reject function.

16
00:01:18.503 --> 00:01:22.224
So fakeAjax file and resolve,
pretty straightforward.

17
00:01:22.224 --> 00:01:24.949
Any questions about that part?

18
00:01:29.897 --> 00:01:30.432
&gt;&gt; Kyle Simpson: Yes.

19
00:01:30.432 --> 00:01:34.857
&gt;&gt; Speaker 2: In the real life situation,
we don't have to create a promise object

20
00:01:34.857 --> 00:01:38.824
of whatever we are going to get
[INAUDIBLE] should it be called,

21
00:01:38.824 --> 00:01:44.450
we're going to give us a promise
&gt;&gt; Kyle Simpson: So the question is, in

22
00:01:44.450 --> 00:01:49.860
real life, are we gonna have to make our
own promises and the answer is sometimes.

23
00:01:49.860 --> 00:01:54.119
Because sometimes, you're going to call a
utility that is already promise aware and

24
00:01:54.119 --> 00:01:55.970
gives you a great promise.

25
00:01:55.970 --> 00:01:59.120
Sometimes you're gonna call the utility
that gives you something that's kinda like

26
00:01:59.120 --> 00:02:03.710
a promise, but it isn't really and in the
promise world, we call that athenable and

27
00:02:03.710 --> 00:02:06.480
then you're gonna need to make
a promise that wraps around it.

28
00:02:06.480 --> 00:02:09.940
Sometimes you're going to have a callback
utility that's not even remotely

29
00:02:09.940 --> 00:02:10.740
promise aware, and

30
00:02:10.740 --> 00:02:14.060
you're gonna need to adapt that to
a promise, which is what we're doing here.

31
00:02:14.060 --> 00:02:17.950
We have a utility that doesn't know
about promises and we're adapting it.

32
00:02:17.950 --> 00:02:19.510
This pattern is called lifting.

33
00:02:19.510 --> 00:02:25.780
We are creating a promise aware utility
on top of the fakeAjax function.

34
00:02:25.780 --> 00:02:28.360
And in fact Promise libraries do offer

35
00:02:28.360 --> 00:02:30.720
utilities that will do
automatic lifting for you.

36
00:02:30.720 --> 00:02:34.240
They will create this wrapper
pattern that we're doing here and

37
00:02:34.240 --> 00:02:36.690
we're doing it manually,
so we can illustrate, but

38
00:02:36.690 --> 00:02:40.290
we'll see that Promise utilities
libraries out there, they do this for

39
00:02:40.290 --> 00:02:44.260
us because you don't want to be tripping
over doing that adaptation yourself.

40
00:02:44.260 --> 00:02:47.240
That's a repeatable pattern,
it belongs in a library.

41
00:02:50.320 --> 00:02:55.200
Okay, so we still want to call
the getFile function three times.

42
00:02:55.200 --> 00:02:56.110
Just like with Thunks,

43
00:02:56.110 --> 00:02:59.670
we're gonna get something back in
this case they're gonna be promises.

44
00:02:59.670 --> 00:03:06.303
I'm gonna say p1 = getFile ("file1") and

45
00:03:06.303 --> 00:03:10.996
p2 = getFile("file2") and

46
00:03:10.996 --> 00:03:15.539
p3 = getFile("file3").

47
00:03:15.539 --> 00:03:16.820
Great, awesome.

48
00:03:16.820 --> 00:03:19.490
So we've made those
three calls in parallel.

49
00:03:19.490 --> 00:03:20.790
What are we going to do with them?

50
00:03:20.790 --> 00:03:22.750
How are we going to
sequence their responses?

51
00:03:22.750 --> 00:03:26.710
That's the whole point of this exercise,
sequencing the responses.

52
00:03:26.710 --> 00:03:30.620
So, let's think about sequencing
our responses together.

53
00:03:31.810 --> 00:03:34.910
We know that p1 is at
some point gonna finish.

54
00:03:34.910 --> 00:03:39.031
We're assuming in this system,
that the promise always resolves, so

55
00:03:39.031 --> 00:03:41.680
at some point, its going to finish.

56
00:03:41.680 --> 00:03:49.050
So to respond to that finishing,
we can simply say p1.then.

57
00:03:49.050 --> 00:03:53.970
Now we know that the success handler
from p1 is going to receive the output

58
00:03:53.970 --> 00:03:58.880
that we gave it just like up here, our
Promise that result functions going to get

59
00:03:58.880 --> 00:04:03.420
past the response text and that will
then propagate into the Promise chain.

60
00:04:03.420 --> 00:04:06.992
So what we need here is a function
that can receive the text and

61
00:04:06.992 --> 00:04:11.430
print it out and
we have a utility called output.

62
00:04:11.430 --> 00:04:13.100
So we could do it like that but

63
00:04:13.100 --> 00:04:16.780
it turns out even easier since we
have a utility that already has that

64
00:04:17.950 --> 00:04:22.670
call signature, we can just simply pass
a reference to the output function.

65
00:04:22.670 --> 00:04:25.040
Not calling it,
don't put the parenthesis in there.

66
00:04:26.500 --> 00:04:29.510
You wanna pass a reference to
that function into the chain.

67
00:04:30.748 --> 00:04:34.410
Here, and now I want to make a really
important point about Promise chains

68
00:04:34.410 --> 00:04:37.150
from a style and readability perspective.

69
00:04:37.150 --> 00:04:40.530
You'll see tons and
tons of examples of promises where

70
00:04:40.530 --> 00:04:45.060
the way the promise chains are illustrated
is to use inline function expressions.

71
00:04:45.060 --> 00:04:48.777
In fact, this is one of the favorite
places that people like to

72
00:04:48.777 --> 00:04:53.394
pull out ES6 error functions and
put them as inline function expressions.

73
00:04:53.394 --> 00:04:55.330
I think this is a terrible idea,

74
00:04:55.330 --> 00:04:58.060
to put inline function expressions
all over your Promise chains.

75
00:04:59.240 --> 00:05:01.020
Use function declarations.

76
00:05:01.020 --> 00:05:02.390
The point of a Promise chain,

77
00:05:02.390 --> 00:05:06.200
if it has any point at all,
from a readability perspective, the only

78
00:05:06.200 --> 00:05:10.330
readability perspective is that you should
be able to easily vertically scan down and

79
00:05:10.330 --> 00:05:13.440
understand what the flow control is
like we did in that pseudo code.

80
00:05:14.610 --> 00:05:17.970
If your chain is littered with all kinds
of inline function expressions and

81
00:05:17.970 --> 00:05:19.420
weirdness and stuff like that,

82
00:05:19.420 --> 00:05:23.814
you've completely lost all the readability
advantages of the Promise chain.

83
00:05:25.090 --> 00:05:27.980
So I prefer to use
a function when I have one.

84
00:05:27.980 --> 00:05:30.840
That doesn't mean you won't ever
use a function expression, but

85
00:05:30.840 --> 00:05:34.380
I'm gonna say if there's an opportunity
to not use an expression and

86
00:05:34.380 --> 00:05:36.806
instead do a declaration,
it's better to go that way, okay?

87
00:05:36.806 --> 00:05:43.360
All right now, what we've said is whatever
Promise one finishes, we wanna output it.

88
00:05:43.360 --> 00:05:45.506
We have ensured that the Promise one,

89
00:05:45.506 --> 00:05:48.948
that the file one contents
are the first thing to be printed.

90
00:05:48.948 --> 00:05:52.290
So we've ensured just by
way of how this works.

91
00:05:52.290 --> 00:05:57.620
We know for a fact that we're going to be
printing in order just like with Thunks.

92
00:05:57.620 --> 00:05:59.360
What's the next step?

93
00:05:59.360 --> 00:06:02.580
Well your instinct might be to
say well I know that the way to

94
00:06:02.580 --> 00:06:07.360
change some promises together, is to
return one promise from another promise.

95
00:06:08.790 --> 00:06:13.430
So it would seem very attractive for
us to just pass in Promise two

96
00:06:13.430 --> 00:06:17.840
into the chain and make it so
that it wires it in and wanes.

97
00:06:17.840 --> 00:06:20.170
And I wish that's how Promises worked.

98
00:06:20.170 --> 00:06:23.260
I wish you could pass a Promise
in to the then method and

99
00:06:23.260 --> 00:06:25.530
have it automatically know what to do.

100
00:06:25.530 --> 00:06:28.600
Unfortunately, Promises
don't have that feature.

101
00:06:28.600 --> 00:06:35.898
So you have to pass in a function
that returns that Promise.

102
00:06:35.898 --> 00:06:39.770
Again, an example where people
use error functions all the time.

103
00:06:39.770 --> 00:06:42.580
Is this a case where I'd make
that into a function declaration?

104
00:06:42.580 --> 00:06:44.010
Perhaps.

105
00:06:44.010 --> 00:06:46.590
But for our purposes,
just to keep things clean,

106
00:06:46.590 --> 00:06:50.510
I'm going to use the function expressions,
but just with the admonition,

107
00:06:50.510 --> 00:06:53.720
you want to try to minimize the amount
of expressions in your flow control.

108
00:06:53.720 --> 00:06:59.290
And if you're gonna have them, by goodness
please make them like one liners.

109
00:06:59.290 --> 00:07:04.020
If you have 5, 10, 15, 100 line inline
expressions inside of your chains,

110
00:07:04.020 --> 00:07:05.930
that's a terrible idea, okay?

111
00:07:05.930 --> 00:07:08.710
But we've returned P two
from the chain which means

112
00:07:08.710 --> 00:07:13.400
that the very next step that happens here
is gonna magically be waiting on P two.

113
00:07:13.400 --> 00:07:14.270
Does everybody see that?

114
00:07:16.030 --> 00:07:17.896
So what do we want to do
after P two finishes?

115
00:07:17.896 --> 00:07:23.320
You wanna output again.

116
00:07:23.320 --> 00:07:25.563
And then you can probably
guess what happens next right.

117
00:07:25.563 --> 00:07:31.825
.then function, return p3 and

118
00:07:31.825 --> 00:07:35.861
then .then output.

119
00:07:35.861 --> 00:07:38.303
And finally .then, just for

120
00:07:38.303 --> 00:07:44.367
completeness sake with the other examples,
output a complete message.

121
00:07:50.863 --> 00:07:54.220
&gt;&gt; Kyle Simpson: There's our
flow control using promises.

122
00:07:55.570 --> 00:07:58.710
It's vertically oriented rather
than being nested together,

123
00:07:58.710 --> 00:08:01.580
certainly has increased
the readability factor by a bit.

124
00:08:04.070 --> 00:08:07.100
But that's the least important
part of what's happened.

125
00:08:07.100 --> 00:08:09.480
We've also introduced
all of the sanity and

126
00:08:09.480 --> 00:08:13.970
trust that comes from
the Promise mechanism.

127
00:08:13.970 --> 00:08:19.180
We can trust that if that fakeAjax utility
somehow misbehaves or is malicious or

128
00:08:19.180 --> 00:08:23.840
is hijacked or whatever,
we know that no matter what it does,

129
00:08:23.840 --> 00:08:28.321
if it calls that resolve 50,000 times,
we're only

130
00:08:28.321 --> 00:08:32.510
gonna get notified once because that's
the way the Promise system is built.

131
00:08:32.510 --> 00:08:37.140
So we've shifted our trust from
some untrustable third party

132
00:08:37.140 --> 00:08:40.800
into a very trustable system, in fact,
one that's built into the language.

133
00:08:40.800 --> 00:08:43.190
But even if it wasn't,
we know we can audit and

134
00:08:43.190 --> 00:08:45.830
trust the Promise system to
do what its supposed to do.

