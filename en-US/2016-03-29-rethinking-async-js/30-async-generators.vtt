WEBVTT

1
00:00:00.000 --> 00:00:03.837
[MUSIC]

2
00:00:03.837 --> 00:00:06.247
&gt;&gt; Kyle Simpson: Here's our
meaning of life running example,

3
00:00:06.247 --> 00:00:11.260
written a little bit more clearly to
prove this point about asking questions.

4
00:00:11.260 --> 00:00:12.890
Look at line 6.

5
00:00:12.890 --> 00:00:17.024
I say x is equal to 1 + and
then I make an AJAX call.

6
00:00:17.024 --> 00:00:22.640
And I yield while the AJAX
call is finishing, okay.

7
00:00:22.640 --> 00:00:26.160
That AJAX call, getData,
returns me nothing right away.

8
00:00:27.600 --> 00:00:31.640
But you'll notice that 1,000 milliseconds
after it runs, up on line two,

9
00:00:31.640 --> 00:00:34.890
what do we call up on line two?

10
00:00:34.890 --> 00:00:38.950
We call run to restart, to resume the
generator with the value that we got back.

11
00:00:40.430 --> 00:00:45.983
So after 1000 milliseconds, our fake AJAX
gives us the response from our AJAX call.

12
00:00:45.983 --> 00:00:48.140
And where does that value come back?

13
00:00:48.140 --> 00:00:50.170
Right back to the yield
expression on line 6.

14
00:00:50.170 --> 00:00:52.157
So we get the value 10 right back.

15
00:00:54.091 --> 00:01:00.792
&gt;&gt; Kyle Simpson: So what we have here is
synchronous looking asynchronous code.

16
00:01:03.227 --> 00:01:07.209
&gt;&gt; Kyle Simpson: We are able to block
locally inside of our generator as

17
00:01:07.209 --> 00:01:11.090
if there is some magical
pause resume thing.

18
00:01:11.090 --> 00:01:14.800
Because there is a pause resume now,
and it's the generator.

19
00:01:14.800 --> 00:01:18.759
The plumbing of the generator
is able to pause, wait for

20
00:01:18.759 --> 00:01:21.633
some other background thing to finish.

21
00:01:21.633 --> 00:01:25.270
And then resume with the value
that we were waiting for.

22
00:01:25.270 --> 00:01:31.950
So inside of our generator, line six
through eleven, that's our program logic.

23
00:01:31.950 --> 00:01:34.640
That's the stuff we write over and
over and over again.

24
00:01:34.640 --> 00:01:36.500
Lines one through three and line fifteen,

25
00:01:36.500 --> 00:01:40.550
that's all plumbing that gets hidden
away in some library somewhere.

26
00:01:41.620 --> 00:01:46.710
Our program logic,
our flow control looks like 6 through 11.

27
00:01:46.710 --> 00:01:51.980
Now, if you mentally picture that
compared to twenty slides ago or

28
00:01:51.980 --> 00:01:54.530
whatever, when we went
over the promise chain.

29
00:01:54.530 --> 00:01:57.750
Promise chains are a form of
flow control that ends up

30
00:01:57.750 --> 00:02:02.670
vertically orienting a bunch of
function calls into a promise chain.

31
00:02:02.670 --> 00:02:06.310
And if you think even further back, we had
thunks and they were nested together and

32
00:02:06.310 --> 00:02:09.180
callbacks, they had all
that kind of weirdness.

33
00:02:09.180 --> 00:02:11.560
So here we have flow control again.

34
00:02:11.560 --> 00:02:16.240
But what's so magic about this particular
flow control is that it looks synchronous.

35
00:02:18.170 --> 00:02:19.900
Why is that so important?

36
00:02:19.900 --> 00:02:21.190
Because that's the way our brains work.

37
00:02:23.020 --> 00:02:26.030
We don't have to have any of that
overhead, that boilerplate of passing

38
00:02:26.030 --> 00:02:28.850
things in as callbacks and
chaining things and returning.

39
00:02:29.920 --> 00:02:33.210
All that stuff gets hidden away,
it's an implementation detail.

40
00:02:33.210 --> 00:02:36.653
What we've done is taking
asynchronicity itself and

41
00:02:36.653 --> 00:02:41.178
factored it out as an implementation
detail that we do not care about.

42
00:02:44.761 --> 00:02:48.280
&gt;&gt; Kyle Simpson: I'm not really sure that
the full weight of what I just said is

43
00:02:48.280 --> 00:02:49.810
actually coming across.

44
00:02:51.380 --> 00:02:53.200
That's a huge deal.

45
00:02:54.390 --> 00:02:57.660
Taking asynchronicity itself and
factoring it out so

46
00:02:57.660 --> 00:02:59.991
that we don't have to worry about it.

47
00:03:02.156 --> 00:03:05.810
&gt;&gt; Kyle Simpson: We write synchronous,
sequential, blocking looking code.

48
00:03:05.810 --> 00:03:10.310
And we let the library
handle all of the ugly bits.

49
00:03:12.590 --> 00:03:17.255
&gt;&gt; Speaker 2: Does it get the same
performance like if it the getData,

50
00:03:17.255 --> 00:03:20.432
if it's not making an external call,

51
00:03:20.432 --> 00:03:25.913
it's a function in itself and
it's making some huge operation?

52
00:03:25.913 --> 00:03:28.202
Will it get the same performance
like if I do with a web worker or

53
00:03:28.202 --> 00:03:30.020
something where I have
to do an asynchronous-.

54
00:03:30.020 --> 00:03:36.120
&gt;&gt; Kyle Simpson: No, no, no, no, no, don't
get this confused with threads, okay.

55
00:03:36.120 --> 00:03:39.196
If the behavior is happening
in your JavaScript program,

56
00:03:39.196 --> 00:03:41.340
it is taking up the single event thread.

57
00:03:41.340 --> 00:03:45.359
This is not the same thing as
messaging out to a web worker.

58
00:03:45.359 --> 00:03:47.775
Could you message out to
a web worker on line two?

59
00:03:47.775 --> 00:03:48.480
Absolutely.

60
00:03:49.948 --> 00:03:54.260
But line 2 doesn't magically become like
a web worker just because you called it

61
00:03:54.260 --> 00:03:54.970
from a generator.

62
00:03:54.970 --> 00:03:59.300
There's still just one thread for
our JavaScript program to run.

63
00:03:59.300 --> 00:04:03.040
The only magic that's different here
than anything else you've ever written

64
00:04:03.040 --> 00:04:06.480
is the fact that line 6 through 11
get to magically locally block.

65
00:04:07.560 --> 00:04:11.120
We never had that capability
syntactically before.

66
00:04:11.120 --> 00:04:14.880
And now we have a syntactic
way of hiding away

67
00:04:14.880 --> 00:04:18.520
all of the complexity of a state machine,
an asynchronous state machine.

68
00:04:20.610 --> 00:04:22.990
So our code looks synchronous again.

69
00:04:22.990 --> 00:04:26.030
And not only does our regular
code looks synchronous,

70
00:04:26.030 --> 00:04:28.670
our error handling becomes
synchronous again.

71
00:04:28.670 --> 00:04:31.081
How do we do synchronous error handling,
what do we use?

72
00:04:35.270 --> 00:04:36.790
&gt;&gt; Kyle Simpson: Try, catch.

73
00:04:36.790 --> 00:04:39.610
You can wrap try catch around line 6.

74
00:04:39.610 --> 00:04:43.590
And if the AJAX under
the covers threw some error,

75
00:04:43.590 --> 00:04:46.670
that error is gonna come right back in and
get caught as a synchronous error.

76
00:04:46.670 --> 00:04:50.753
Because inside of the generator,
everything's back to normal, synchronous,

77
00:04:50.753 --> 00:04:53.191
blocking semantics
including error handling.

78
00:04:53.191 --> 00:04:57.403
So we get an asynchronous stack
that gets normalized back into

79
00:04:57.403 --> 00:05:00.567
a synchronous stack
inside of our generator.

80
00:05:00.567 --> 00:05:02.640
Yeah.

81
00:05:02.640 --> 00:05:03.205
&gt;&gt; Speaker 2: Line 11,

82
00:05:03.205 --> 00:05:08.007
console.log(answer)-
&gt;&gt; Speaker 2: So

83
00:05:08.007 --> 00:05:12.540
the logging wait until
x plus 1 is computed?

84
00:05:13.920 --> 00:05:16.310
&gt;&gt; Kyle Simpson: Line 11 doesn't
run until after line 8 is finished.

85
00:05:17.950 --> 00:05:20.986
Line 7 doesn't run until
after line 6 is finished.

86
00:05:22.826 --> 00:05:24.270
&gt;&gt; Kyle Simpson: Because
of that yield keyword.

87
00:05:24.270 --> 00:05:26.520
&gt;&gt; Speaker 2: But if I have line 12,

88
00:05:26.520 --> 00:05:29.700
that's console.log something else,
that would be printed.

89
00:05:29.700 --> 00:05:31.140
&gt;&gt; Kyle Simpson: Then
it's gonna go right away.

90
00:05:31.140 --> 00:05:33.380
We only pause at the yield keyword.

91
00:05:33.380 --> 00:05:35.807
Everything else keeps running
until the next yield keyword.

92
00:05:35.807 --> 00:05:38.096
Or until the end and then it finishes.

93
00:05:44.656 --> 00:05:47.869
&gt;&gt; Speaker 3: Technically, line 8,
you don't need to do a yield there

94
00:05:47.869 --> 00:05:51.820
because you're really not conceptually
fetching anything, right?

95
00:05:51.820 --> 00:05:53.270
That's just computing something local.

96
00:05:55.150 --> 00:05:57.390
&gt;&gt; Kyle Simpson: In all of our
running meaning of life example,

97
00:05:57.390 --> 00:05:59.450
we always externalized all three calls.

98
00:05:59.450 --> 00:06:00.000
&gt;&gt; Speaker 3: Okay.

99
00:06:00.000 --> 00:06:01.290
&gt;&gt; Kyle Simpson: So
I'm doing the exact same thing.

100
00:06:01.290 --> 00:06:05.010
We're pretending as if that string
needs to get sent off somewhere and

101
00:06:05.010 --> 00:06:09.010
localized into our own alien language or
whatever.

102
00:06:09.010 --> 00:06:12.584
And then it comes back to us, okay.

103
00:06:12.584 --> 00:06:14.500
Yes?

104
00:06:14.500 --> 00:06:19.094
&gt;&gt; Speaker 4: They're asking again,
on line 16, if they had put a run there,

105
00:06:19.094 --> 00:06:22.391
Would that execute after
calling setTimeout?

106
00:06:25.951 --> 00:06:29.421
&gt;&gt; Kyle Simpson: If on line
16 you put a run there,

107
00:06:29.421 --> 00:06:34.329
it would resume the generator
that's waiting on

108
00:06:34.329 --> 00:06:38.773
line 6 right away, not sending it a value.

109
00:06:38.773 --> 00:06:41.821
And when the setTimeout
tried to run call run,

110
00:06:41.821 --> 00:06:47.230
if the generator was not in a currently
paused state, that would create an error.

111
00:06:48.900 --> 00:06:52.143
So you do not want to try to have lots of
different people trying to resume your

112
00:06:52.143 --> 00:06:53.877
generator in lots of different places.

113
00:06:53.877 --> 00:06:55.810
That's a really terrible idea.

114
00:06:57.240 --> 00:06:58.660
The generator can only,

115
00:07:00.060 --> 00:07:02.920
only one thing can ever be happening
in JavaScript at any given time.

116
00:07:02.920 --> 00:07:05.710
So we don't have that problem.

117
00:07:05.710 --> 00:07:07.658
But you don't want to take
that iterator.next and

118
00:07:07.658 --> 00:07:10.570
have lots of different people calling it,
cuz you'll get out of sequence.

119
00:07:17.109 --> 00:07:20.320
&gt;&gt; Kyle Simpson: I see a question in here
about using promises in the generator.

120
00:07:20.320 --> 00:07:21.340
Hold on, we'll get there.

121
00:07:23.250 --> 00:07:24.560
I promise, we're almost there.

122
00:07:26.998 --> 00:07:30.170
&gt;&gt; Kyle Simpson: I just wanna let
a moment for this to sink in.

123
00:07:30.170 --> 00:07:33.390
Cuz this is like that holy crap moment.

124
00:07:33.390 --> 00:07:38.670
Like, whoa, I get to do synchronous
looking asynchronous programming?

125
00:07:40.998 --> 00:07:45.290
&gt;&gt; Kyle Simpson: I saw some people asking
earlier what are some use cases of this.

126
00:07:45.290 --> 00:07:47.860
The very first time I saw this was five or

127
00:07:47.860 --> 00:07:51.400
six years ago before there were
generators in the standard.

128
00:07:51.400 --> 00:07:54.080
Firefox put generators into their

129
00:07:54.080 --> 00:07:57.200
implementation of JavaScript
engine about a decade ago.

130
00:07:57.200 --> 00:08:00.200
And I was working at Firefox
on the developer tools team.

131
00:08:01.480 --> 00:08:04.899
And every time we would add
a feature to a developer tool,

132
00:08:04.899 --> 00:08:09.047
of course we needed a test case for
it, a test suite for some feature.

133
00:08:09.047 --> 00:08:13.030
And everything you do in the Firefox
browser that you're doing in JavaScript,

134
00:08:13.030 --> 00:08:14.348
it's all asynchronous.

135
00:08:14.348 --> 00:08:18.072
There's no synchronous anything,
every single API is asynchronous.

136
00:08:18.072 --> 00:08:22.330
Well, it gets really, really hard
to write asynchronous test cases.

137
00:08:22.330 --> 00:08:28.085
When every single like draw border and
then wait for that to happen.

138
00:08:28.085 --> 00:08:32.457
And the real problem is that none of those
calls, I mean, they're all asynchronous.

139
00:08:32.457 --> 00:08:34.900
But none of them have events to
let you know that they finished.

140
00:08:34.900 --> 00:08:38.717
So you literally are just like doing
setTimeout, I mean, it was crazy,

141
00:08:38.717 --> 00:08:41.420
terrible to write test
cases in that environment.

142
00:08:41.420 --> 00:08:45.610
Because it was asynchronicity without any
notification that the step had completed.

143
00:08:45.610 --> 00:08:49.670
So you can imagine that my
test cases were horrible.

144
00:08:50.830 --> 00:08:52.890
And then one day one of my
coworkers was like well,

145
00:08:52.890 --> 00:08:55.080
why don't you just rewrite
all with a generator?

146
00:08:55.080 --> 00:08:57.561
And I was like what?

147
00:08:57.561 --> 00:09:00.111
And I started reading through and
I was like, my God.

148
00:09:00.111 --> 00:09:02.671
I can write my test cases in
a synchronous fashion and

149
00:09:02.671 --> 00:09:07.380
let all that asynchronicity crap, all
the timeouts and stuff, hide that away?

150
00:09:07.380 --> 00:09:08.412
It changed everything.

151
00:09:10.501 --> 00:09:14.482
&gt;&gt; Kyle Simpson: I saw that years before
we ever got a hope of that landing as part

152
00:09:14.482 --> 00:09:16.580
of the JavaScript standard.

153
00:09:16.580 --> 00:09:18.377
But I've been a big fan for

154
00:09:18.377 --> 00:09:23.782
a long time because synchronous looking
async is that magical silver bullet.

155
00:09:23.782 --> 00:09:26.860
And you don't get those very often
in programming language design.

156
00:09:27.890 --> 00:09:30.126
Those magical silver bullets
that come out of nowhere.

157
00:09:34.113 --> 00:09:37.301
&gt;&gt; Kyle Simpson: So when I said
earlier that promises are great and

158
00:09:37.301 --> 00:09:40.117
promise chains give us some flow control.

159
00:09:40.117 --> 00:09:43.545
But, and I even said that I
did the asynquence library and

160
00:09:43.545 --> 00:09:45.051
gave me self sequences.

161
00:09:45.051 --> 00:09:50.860
And then I said that actually,
I don't use those anymore, this is why.

162
00:09:50.860 --> 00:09:54.880
Cuz I write a 100% of my asynchronous
code inside of generators.

163
00:09:56.380 --> 00:09:59.600
If you have the option of writing
synchronous looking async,

164
00:09:59.600 --> 00:10:02.610
why on earth would you ever want
to write a promise chain again?

165
00:10:02.610 --> 00:10:06.560
I don't know, I can't come up with
a single case why a promise chain would

166
00:10:06.560 --> 00:10:09.295
ever be what I wanna write,
when I have that option.

167
00:10:09.295 --> 00:10:15.190
So I've gone back and completely
rechanged my whole way of thinking.

168
00:10:15.190 --> 00:10:19.222
Once I got to understanding the power
of generators, I've gone back and

169
00:10:19.222 --> 00:10:21.481
completely changed my way of thinking.

170
00:10:21.481 --> 00:10:23.820
And now what I do is put
everything inside of a generator.

