WEBVTT

1
00:00:00.000 --> 00:00:04.485
[MUSIC]

2
00:00:04.485 --> 00:00:08.890
&gt;&gt; Kyle Simpson: Describing
this with the func term, right?

3
00:00:08.890 --> 00:00:14.730
So the Promise is
a function that has a value

4
00:00:14.730 --> 00:00:18.846
that then I can access on my-
&gt;&gt; Speaker 2: Do you really mean this,

5
00:00:18.846 --> 00:00:21.232
capital P promise?
&gt;&gt; Kyle Simpson: I think so.

6
00:00:21.232 --> 00:00:26.570
Okay, capital P,
Promise is built into Java Script.

7
00:00:26.570 --> 00:00:29.950
It is a constructor that has to
be called with the new keyword so

8
00:00:29.950 --> 00:00:32.770
that makes it very different from anything
we were talking about with funcs.

9
00:00:34.560 --> 00:00:37.210
The way you construct a Promise is to pass

10
00:00:37.210 --> 00:00:39.910
in a function which I've
called executor here.

11
00:00:39.910 --> 00:00:42.440
That's the terminology used in the spec.

12
00:00:42.440 --> 00:00:43.970
Whatever function you pass in and

13
00:00:43.970 --> 00:00:49.180
whatever it's called is going to
receive to function callbacks.

14
00:00:49.180 --> 00:00:55.940
Two utilities that you can use to handle
the resolution of your Promise resolved

15
00:00:55.940 --> 00:01:01.140
for fulfilling reject for rejecting.
&gt;&gt; Speaker 3: And

16
00:01:03.230 --> 00:01:08.190
so, I'm just want to take
this connected to the flow,

17
00:01:08.190 --> 00:01:13.610
cuz at some point when I call,
I pass at output, right?

18
00:01:13.610 --> 00:01:17.200
My promise has been returned, right?

19
00:01:17.200 --> 00:01:22.640
It's when it finishes its
work it will then know

20
00:01:22.640 --> 00:01:27.816
that I've registered output to it, right?

21
00:01:27.816 --> 00:01:32.236
And then you'd send, say,
okay, now I'm going to

22
00:01:32.236 --> 00:01:36.437
execute output because you registered.
&gt;&gt; Kyle Simpson: I think

23
00:01:36.437 --> 00:01:37.731
it's-
&gt;&gt; Speaker 3: The function to.

24
00:01:37.731 --> 00:01:38.715
&gt;&gt; Kyle Simpson: I think maybe I want

25
00:01:38.715 --> 00:01:42.958
one of the confusions I'm not sure, but I
think maybe part of the confusion here is

26
00:01:42.958 --> 00:01:46.990
you're trying to conflate the whole
process into one mental step.

27
00:01:46.990 --> 00:01:48.840
It's two entirely separate concerns.

28
00:01:50.090 --> 00:01:52.860
One concern is how
the Promise gets resolved,

29
00:01:52.860 --> 00:01:57.820
that's what I'm showing here on the line
25, line 25 is resolving the Promise.

30
00:02:00.550 --> 00:02:03.090
Don't think about how
a Promise is resolved,

31
00:02:03.090 --> 00:02:08.520
when you switch hats to think about how
you respond to a Promise resolution.

32
00:02:08.520 --> 00:02:11.400
You're going to get confused if you try
to think about those at the same time.

33
00:02:12.430 --> 00:02:16.360
Line 38 is a response to
a Promise resolution, and

34
00:02:16.360 --> 00:02:19.740
on line 38 who the hell
cares how it got resolved.

35
00:02:19.740 --> 00:02:21.170
Doesn't matter how it got resolved.

36
00:02:21.170 --> 00:02:24.900
All that matters is this is how I'm
declaring the response to a Promise.

37
00:02:25.970 --> 00:02:29.950
I would recommend keeping those two
completely separate in your mind.

38
00:02:29.950 --> 00:02:32.420
Cuz it seems like some of the questions
are kind of conflating when people

39
00:02:32.420 --> 00:02:35.280
are saying is this the resolve value or
whatever.

40
00:02:35.280 --> 00:02:38.770
That might be were some of the confusion,
is trying to keep those as one step.

41
00:02:38.770 --> 00:02:40.810
There are two entirely
separate capabilities.

42
00:02:42.020 --> 00:02:43.630
And that's important, by the way.

43
00:02:43.630 --> 00:02:45.010
That's a separation of concern.

44
00:02:45.010 --> 00:02:48.410
We should be able to think
about the response to a Promise

45
00:02:48.410 --> 00:02:51.740
entirely independently to
how a Promise gets resolved.

46
00:02:51.740 --> 00:02:52.900
&gt;&gt; Speaker 3: I just want to make sure

47
00:02:53.970 --> 00:02:57.470
the thing I have to tell myself is just
be ignorant of whatever is happening and

48
00:02:57.470 --> 00:02:59.328
just do this.
&gt;&gt; Kyle Simpson: That is absolutely not

49
00:02:59.328 --> 00:03:01.283
what I want.
&gt;&gt; Speaker 3: That's what I wanna avoid

50
00:03:01.283 --> 00:03:04.540
and so that's why I'm asking
to try to understand.

51
00:03:04.540 --> 00:03:06.010
&gt;&gt; Kyle Simpson: I absolutely that is

52
00:03:06.010 --> 00:03:10.080
the antithesis of everything I teach
I do not want the message to be,

53
00:03:10.080 --> 00:03:11.500
don't understand it.

54
00:03:11.500 --> 00:03:16.485
I want the message to be understand it
separately so here when I call resolve,

55
00:03:16.485 --> 00:03:21.469
I am telling the Promise that's a magical
function connected to the Promise I

56
00:03:21.469 --> 00:03:25.325
am telling the Promise under
the covers resolve yourself.

57
00:03:25.325 --> 00:03:29.831
And the response that a Promise does when
it is told to resolve itself is to go and

58
00:03:29.831 --> 00:03:33.113
look for anybody that's registered and
then handler and

59
00:03:33.113 --> 00:03:36.500
execute that then handler and
pass along its values.

60
00:03:36.500 --> 00:03:40.360
That's the sausage making of how
a Promise implementation is built.

61
00:03:40.360 --> 00:03:42.770
It's got an internal array
of then handlers and

62
00:03:42.770 --> 00:03:44.730
it loops through them.
&gt;&gt; Speaker 3: Yeah,

63
00:03:44.730 --> 00:03:46.560
that's what I was trying to
articulate earlier though.

64
00:03:46.560 --> 00:03:50.880
The output is in that set of things
that is done under the covers

65
00:03:50.880 --> 00:03:51.550
to.
&gt;&gt; Kyle Simpson: Yeah,

66
00:03:51.550 --> 00:03:55.180
I think maybe where I got where we were
getting confused as you were saying output

67
00:03:55.180 --> 00:03:57.665
is result, it's not.
&gt;&gt; Speaker 3: No, no, no, yeah.

68
00:03:57.665 --> 00:04:00.340
I said that earlier, that was-
&gt;&gt; Kyle Simpson: Resolve fires off

69
00:04:00.340 --> 00:04:03.240
an asynchronous action under the covers

70
00:04:03.240 --> 00:04:06.690
that tells it to go through a list of then
handlers that have been registered and

71
00:04:06.690 --> 00:04:08.909
one of those then handlers is
going to be the output function.

72
00:04:10.260 --> 00:04:13.520
And it will make sure to pass
the message along, okay?

73
00:04:13.520 --> 00:04:14.957
That's all implementation
inside of a Promise.

74
00:04:14.957 --> 00:04:17.785
And there are Promise libraries
that you could go and

75
00:04:17.785 --> 00:04:20.490
read that are spec compliant
Promise libraries.

76
00:04:20.490 --> 00:04:24.010
You can go and read and see how they do
those things, and I I recommend that.

77
00:04:24.010 --> 00:04:26.371
I wrote Promise libraries as
part of my understanding of

78
00:04:26.371 --> 00:04:30.999
promises.
&gt;&gt; Speaker 4: Are you gonna get to

79
00:04:30.999 --> 00:04:31.889
catching errors?

80
00:04:31.889 --> 00:04:34.658
There's some questions that-
&gt;&gt; Kyle Simpson: I don't really think

81
00:04:34.658 --> 00:04:37.691
we're gonna pay much attention to
catching errors at this particular point.

82
00:04:37.691 --> 00:04:39.126
&gt;&gt; Speaker 4: One of the questions was

83
00:04:39.126 --> 00:04:43.571
just, if you would put a catch at the end,
would that catch errors in any of

84
00:04:43.571 --> 00:04:45.188
the at ends?
&gt;&gt; Kyle Simpson: Yes,

85
00:04:45.188 --> 00:04:49.243
catch is a shorthand, okay?

86
00:04:49.243 --> 00:04:50.470
If I do a catch here.

87
00:04:51.650 --> 00:04:56.530
It would receive an error message anywhere
in this chain that created an error.

88
00:04:56.530 --> 00:04:59.930
Even if I did something, I should
have taken this out a long time ago,

89
00:04:59.930 --> 00:05:04.990
anything in this chain like if I
call a doesn't exist function.

90
00:05:07.214 --> 00:05:09.480
That's gonna throw a JavaScript
error because there is no doesn't

91
00:05:09.480 --> 00:05:10.750
exist function.

92
00:05:10.750 --> 00:05:14.400
That JavaScript error is going
to turn into of a rejection

93
00:05:14.400 --> 00:05:17.400
of the promise that was
returned to line 43.

94
00:05:17.400 --> 00:05:20.821
Because line 43 doesn't handle it and
line 44 doesn't handle it and

95
00:05:20.821 --> 00:05:24.130
line 47 doesn't handle it and
line 48 doesn't handle it.

96
00:05:24.130 --> 00:05:28.222
That rejection is going to propagate its
way all the way down the chain skipping

97
00:05:28.222 --> 00:05:31.820
all those other steps and
it will finally be caught here on line 51.

98
00:05:31.820 --> 00:05:35.694
And we'd get the JavaScript
exception printed here.

99
00:05:35.694 --> 00:05:40.300
The .catch is the same thing as a .then

100
00:05:40.300 --> 00:05:42.930
where we don't pass anything for
the success handler.

101
00:05:49.170 --> 00:05:51.390
So those two are functionally equivalent.

102
00:05:59.560 --> 00:06:06.550
Where and how often you register error
handlers is there is no hard and fast rule

103
00:06:06.550 --> 00:06:11.620
for this it's dependent upon the behavior
the intended behavior of your system.

104
00:06:11.620 --> 00:06:15.830
If I register to catch right here for
example,

105
00:06:19.050 --> 00:06:22.740
then what happens is once
a error has been caught.

106
00:06:22.740 --> 00:06:27.210
It's exactly synonymous to a try catch,
which means that it was caught and

107
00:06:27.210 --> 00:06:29.580
it allows the rest of the chain
to continue as normal.

108
00:06:31.210 --> 00:06:36.450
So if you want to recover from an error
at some point in your Promise chain,

109
00:06:36.450 --> 00:06:38.410
you can put an error handling there.

110
00:06:38.410 --> 00:06:43.260
If on the other hand your assumption
is that an error anywhere in the chain

111
00:06:43.260 --> 00:06:47.780
is a fatal unrecoverable condition and
we need to fall out of everything,

112
00:06:47.780 --> 00:06:52.355
then just put a catch at the end of
your chain or a mixture they're of.

113
00:06:53.810 --> 00:06:58.130
But there's no hard and fast rule to
answer that just you have to figure out.

114
00:06:58.130 --> 00:07:02.230
It's exactly the same as me telling you
to wrap a try catch around your whole

115
00:07:02.230 --> 00:07:03.200
function.

116
00:07:03.200 --> 00:07:06.260
Or do you warp a try catch around
every single line of your function?

117
00:07:06.260 --> 00:07:07.687
The answer to that question is up to you.

118
00:07:07.687 --> 00:07:13.256
And up to how you want to handle it.
&gt;&gt; Speaker 3: And the input to line 40

119
00:07:13.256 --> 00:07:19.531
the value would be the return
value from the catch.

120
00:07:19.531 --> 00:07:22.936
Right, catch is gonna return a value and

121
00:07:22.936 --> 00:07:27.863
that will then be the value passed to 40.
&gt;&gt; Kyle Simpson: Your error handler can

122
00:07:27.863 --> 00:07:31.191
return value that becomes the success for
the next step.

123
00:07:31.191 --> 00:07:36.399
The reason I didn't want to get
into error handling is because

124
00:07:36.399 --> 00:07:41.640
we get into a whole side rabbit
trail of complex issues.

125
00:07:41.640 --> 00:07:44.520
Those are things you'll discover
as you play more with Promises but

126
00:07:44.520 --> 00:07:48.580
I don't want us get too far off track and
understanding the overall pattern here.

127
00:07:48.580 --> 00:07:51.380
So you're gonna need to
practice with promises

128
00:07:51.380 --> 00:07:53.890
I have written about all
of this stuff in detail.

129
00:07:53.890 --> 00:07:57.660
I encourage you to go and read the books
and blogs that I've written about.

130
00:07:57.660 --> 00:08:00.290
These Promise issues and I do cover
error handling in exquisite detail.

131
00:08:06.313 --> 00:08:07.207
&gt;&gt; Kyle Simpson: All right,

132
00:08:07.207 --> 00:08:12.217
let's pop the stack back to where
we were before, just to make sure

133
00:08:12.217 --> 00:08:17.774
we're back on the same track,
p1 .then(output) .then return p2.

134
00:08:17.774 --> 00:08:20.051
.then(output) .then return p3.

135
00:08:20.051 --> 00:08:22.751
.then(output) then output complete.

136
00:08:22.751 --> 00:08:26.480
That's the canonical flow control here.

137
00:08:29.050 --> 00:08:34.532
Did we get the questions handled?
&gt;&gt; Speaker 4: I

138
00:08:34.532 --> 00:08:35.107
think so, it sounds like it.

139
00:08:35.107 --> 00:08:39.671
I think the biggest thing was that they
didn't understand what the promise API

140
00:08:39.671 --> 00:08:44.375
what that actually looked like and that
was where the resolve was actually coming

141
00:08:44.375 --> 00:08:52.463
from.
&gt;&gt; Kyle Simpson: Okay,

142
00:08:52.463 --> 00:08:59.640
this solution is nice,
it has an elegance to it.

143
00:08:59.640 --> 00:09:02.570
It's a vertically oriented
chain instead of a nesting,

144
00:09:02.570 --> 00:09:07.050
I mentioned to you that there
is such a thing as Promise hell.

145
00:09:07.050 --> 00:09:10.890
And one of the expressions of Promise
hell that you should be aware of,

146
00:09:10.890 --> 00:09:15.080
it's kind of what I was getting at
earlier about not conflating concerns.

147
00:09:15.080 --> 00:09:20.970
Another way of thinking about this
Promise chain is to say something like

148
00:09:20.970 --> 00:09:23.860
I'm going to call the output function for
text.

149
00:09:26.100 --> 00:09:34.522
And then I'm going to call p2.then
&gt;&gt; Kyle Simpson: And

150
00:09:34.522 --> 00:09:39.387
inside of that function I'm
going to output the text and

151
00:09:39.387 --> 00:09:46.331
then p3.then.
&gt;&gt; Kyle Simpson: And

152
00:09:46.331 --> 00:09:51.936
I'm going to output the text and

153
00:09:51.936 --> 00:09:55.270
output complete.

154
00:09:55.270 --> 00:09:59.668
Without me putting in the extra
curly brace and closing parentheses,

155
00:09:59.668 --> 00:10:03.693
that's a completely valid way
of expressing the flow control,

156
00:10:03.693 --> 00:10:06.164
it will have the exact same end result.

157
00:10:06.164 --> 00:10:09.723
This is a bad style,
this is a bad idiom, and

158
00:10:09.723 --> 00:10:15.980
this is one of the expressions when
people talk about Promise hell.

159
00:10:15.980 --> 00:10:21.180
If you find yourself back to the whole
nesting thing, you're missing the point.

160
00:10:21.180 --> 00:10:25.030
And the real point that you're missing
here is your return a Promise to get

161
00:10:25.030 --> 00:10:26.980
yourself back to the original chain.

162
00:10:28.520 --> 00:10:32.940
Instead of chaining off for the Promise
here return the Promise back to the main

163
00:10:32.940 --> 00:10:38.960
chain and
do your you're chaining vertically, okay?

164
00:10:38.960 --> 00:10:39.960
So be careful about that.

165
00:10:39.960 --> 00:10:42.720
It's very easy to fall back into that same

166
00:10:42.720 --> 00:10:47.720
temptation is what we've always done which
is I'm used to nesting things together.

167
00:10:47.720 --> 00:10:51.940
This is one of the ways you get yourself
back into what we call Promise hell.

