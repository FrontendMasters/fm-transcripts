WEBVTT

1
00:00:00.000 --> 00:00:03.968
[MUSIC]

2
00:00:03.968 --> 00:00:09.870
&gt;&gt; Kyle Simpson: A generator is a new
exotic form of function introduced in ES6.

3
00:00:09.870 --> 00:00:14.530
And we're going to look at
the actual mechanism first,

4
00:00:14.530 --> 00:00:17.650
understanding some of how it works and
that kind of thing.

5
00:00:17.650 --> 00:00:21.140
And at first as we're looking at it,
it's not gonna

6
00:00:21.140 --> 00:00:24.630
look like this has anything at all
to do with asynchronous programming.

7
00:00:24.630 --> 00:00:27.580
It's going to seem a bit strange and
out of place.

8
00:00:27.580 --> 00:00:29.571
I promise there's a reason
why we're going through it.

9
00:00:29.571 --> 00:00:34.310
This is a fundamental part
of the whole picture.

10
00:00:34.310 --> 00:00:38.485
If promises were about solving
the inversion of control issue in callback

11
00:00:38.485 --> 00:00:41.571
hell, generators are about
solving the non-local,

12
00:00:41.571 --> 00:00:43.855
non-sequential reasonability problem.

13
00:00:44.900 --> 00:00:48.140
So they are gonna provide us
a really powerful pattern for that.

14
00:00:48.140 --> 00:00:51.182
But we need to understand, we need to
kinda walk through the plumbing of

15
00:00:51.182 --> 00:00:53.070
the stuff to understand how it's working.

16
00:00:54.890 --> 00:00:58.980
One of the things that you may
not have ever realized about

17
00:00:58.980 --> 00:01:01.620
your assumptions with JavaScript.

18
00:01:01.620 --> 00:01:06.630
Is that all functions, all normal
functions have a characteristic of them

19
00:01:06.630 --> 00:01:11.590
which the fancy way of saying it is that
they have a run-to-completion semantic.

20
00:01:11.590 --> 00:01:14.720
What that means is that when
a function starts running,

21
00:01:14.720 --> 00:01:17.660
it will always run to
the end of that function and

22
00:01:17.660 --> 00:01:22.580
finish before any other function has an
opportunity to come in and start running.

23
00:01:22.580 --> 00:01:25.370
At any given moment,
only one function is actively executing.

24
00:01:25.370 --> 00:01:27.735
And that doesn't mean it can't
call to other functions.

25
00:01:27.735 --> 00:01:29.943
But it means that nobody can come in and

26
00:01:29.943 --> 00:01:33.756
pre-emptively interrupt this
function to run something else.

27
00:01:33.756 --> 00:01:36.590
It's a run-to-completion semantic.

28
00:01:36.590 --> 00:01:39.410
And that may seem very academic in nature,
but

29
00:01:39.410 --> 00:01:42.830
it's actually one of the most important
characteristics of JavaScript.

30
00:01:42.830 --> 00:01:46.480
It's what allows us to reason about
things in a single threaded fashion.

31
00:01:46.480 --> 00:01:50.740
Never having to worry about two functions,
one interrupting the other one and

32
00:01:50.740 --> 00:01:54.900
corrupting our shared memory in
ways that we don't understand.

33
00:01:54.900 --> 00:01:57.260
All the problems that you have to
deal with in threaded programming get

34
00:01:57.260 --> 00:02:01.930
introduced when you don't have that
run-to-completion semantic, okay?

35
00:02:01.930 --> 00:02:04.750
So it's one of the most fundamental
things that we've built all of

36
00:02:04.750 --> 00:02:08.420
our understanding on JavaScript over.

37
00:02:08.420 --> 00:02:13.263
So that might raise a few warning flags
in here when I tell you generators

38
00:02:13.263 --> 00:02:16.420
do not have a run-to-completion semantic.

39
00:02:17.760 --> 00:02:19.800
They're a different kind
of function altogether.

40
00:02:19.800 --> 00:02:21.340
It's a very different kind of beast.

41
00:02:22.734 --> 00:02:27.010
Now that's not designed to
introduce chaos into your program.

42
00:02:27.010 --> 00:02:30.500
It's designed to introduce
a behavior that we

43
00:02:31.610 --> 00:02:35.620
previously had to go to
a lot of work to simulate.

44
00:02:35.620 --> 00:02:39.960
So it's adding a syntactic sugar, if you
will, on top of a behavior that we would

45
00:02:39.960 --> 00:02:46.150
have had to spend quite a bit of time and
effort to try to emulate, okay?

46
00:02:46.150 --> 00:02:51.520
So, the thing that we are attempting to
create with the syntax of a generator,

47
00:02:51.520 --> 00:02:53.310
by the way JavaScript
didn't invent generators,

48
00:02:53.310 --> 00:02:55.030
they come from other
languages like Python.

49
00:02:55.030 --> 00:02:58.780
But the thing that we're trying to
create with the JavaScript generator,

50
00:02:59.810 --> 00:03:03.710
is a syntactic form of
declaring a state machine.

51
00:03:05.150 --> 00:03:09.730
State machines are, for those of you that
aren't aware, a way of having a patterned

52
00:03:09.730 --> 00:03:14.360
series of flow from one state to
another state to another state.

53
00:03:14.360 --> 00:03:19.070
And declaratively listing all those
states and those transitions out.

54
00:03:20.260 --> 00:03:23.220
So we can implement state
machines without generators.

55
00:03:23.220 --> 00:03:25.520
And I've done that many times.

56
00:03:25.520 --> 00:03:27.900
Some of you may have implemented
your own state machines.

57
00:03:27.900 --> 00:03:31.680
But you have to go to a lot of work,
and you have to end up using closure

58
00:03:31.680 --> 00:03:36.420
around a function to remember the state
as it gets recalled over and over again.

59
00:03:36.420 --> 00:03:39.100
And each time it's recalled it
remembers its previous state, and

60
00:03:39.100 --> 00:03:40.050
it does this transition.

61
00:03:40.050 --> 00:03:44.570
So it's possible but it's harder, and
it's a lot less clear what's going on.

62
00:03:44.570 --> 00:03:48.100
A generator is a syntactic
form of a state machine.

63
00:03:49.380 --> 00:03:50.160
And while that won't

64
00:03:50.160 --> 00:03:52.550
seem like that has anything to do
with asynchronous programming.

65
00:03:52.550 --> 00:03:55.790
It's actually a magical key
that will unlock one of our

66
00:03:55.790 --> 00:03:58.370
really important characteristics
that we're going for.

67
00:03:58.370 --> 00:04:02.810
So to get there, we wanna start looking
right at the very beginning at generators.

68
00:04:02.810 --> 00:04:06.030
And what we're gonna see is that there's
this new special keyword called yield.

69
00:04:07.140 --> 00:04:11.812
The yield keyword is kind of like
the Pause button on an old school VCR.

70
00:04:11.812 --> 00:04:16.576
You're watching a movie and you click
the Pause button, literally pauses

71
00:04:16.576 --> 00:04:21.503
right in mid-frame, nothing changes and
you can wait as long as you want to.

72
00:04:21.503 --> 00:04:24.580
And then you can come along later and
press the Play button and resume.

73
00:04:25.730 --> 00:04:29.170
So you can think of a generator
as a pausable function.

74
00:04:30.180 --> 00:04:33.930
A function that when it's running,
would run across a yield keyword and

75
00:04:33.930 --> 00:04:37.750
at that moment,
where ever the yield keyword shows up,

76
00:04:37.750 --> 00:04:39.770
even right in the middle of an expression.

77
00:04:41.130 --> 00:04:44.470
Everything just literally freezes,
it pauses.

78
00:04:44.470 --> 00:04:47.860
And the generator enters
this paused state.

79
00:04:47.860 --> 00:04:53.500
And it will wait for that pause state
indefinitely until some other actor

80
00:04:53.500 --> 00:04:57.740
comes along and says it's time to resume,
and they press the Play button again.

81
00:04:57.740 --> 00:05:00.840
So you can think about a generator
as a function that can pause and

82
00:05:00.840 --> 00:05:04.440
resume, pause and resume,
as many times as necessary.

83
00:05:06.300 --> 00:05:08.480
While a generator is paused,

84
00:05:08.480 --> 00:05:12.920
on the inside of the generator,
everything is completely blocked.

85
00:05:12.920 --> 00:05:14.600
Nothing is happening.

86
00:05:14.600 --> 00:05:17.440
But that's not blocking
the overall program.

87
00:05:17.440 --> 00:05:19.360
It's a localized blocking.

88
00:05:19.360 --> 00:05:21.350
Only inside of the generator.

89
00:05:21.350 --> 00:05:24.300
That's a really key issue, so even
though what I'm about to show you will

90
00:05:24.300 --> 00:05:29.110
look like we're creating a blocking sort
of a thing, it's extremely localized.

91
00:05:29.110 --> 00:05:30.900
It's not blocking the entire program.

92
00:05:32.200 --> 00:05:33.860
So, here's an example of a generator.

93
00:05:33.860 --> 00:05:38.450
You notice on line 1, we have that little
star symbol there because we need to

94
00:05:38.450 --> 00:05:42.960
introduce a different kind of function
with a different set of behavior to it.

95
00:05:42.960 --> 00:05:45.200
So there needs to be
a syntactic clue to the engine.

96
00:05:45.200 --> 00:05:47.410
This is a different sort of a thing.

97
00:05:47.410 --> 00:05:51.830
So its function*, that's how we
indicate that it's a generator.

98
00:05:51.830 --> 00:05:54.663
[COUGH] You'll notice on line 3 that
we have the yield keyword there.

99
00:05:54.663 --> 00:05:58.620
And that yield keyword
is the pause button.

100
00:05:58.620 --> 00:06:03.420
So it's like the generator gets
to decide when it wants to pause.

101
00:06:03.420 --> 00:06:06.620
Nobody on the outside gets to tell
the generator when to pause, so

102
00:06:06.620 --> 00:06:09.950
it cannot be pre-emptively interrupted.

103
00:06:11.160 --> 00:06:15.100
This is what we call
cooperative concurrency,

104
00:06:15.100 --> 00:06:17.940
rather than preemptive concurrency.

105
00:06:17.940 --> 00:06:20.290
So preemptive means somebody
else on the outside,

106
00:06:20.290 --> 00:06:24.140
some outside force can come in and
interrupt you at any given moment.

107
00:06:24.140 --> 00:06:28.100
That's the thing that causes chaos and
havoc in threaded languages.

108
00:06:28.100 --> 00:06:28.650
We don't have that.

109
00:06:28.650 --> 00:06:32.425
What we have is that the generator
gets to decide by virtue of calling

110
00:06:32.425 --> 00:06:36.380
a yield keyword, when and where and
in what manner it wants to yield itself,

111
00:06:36.380 --> 00:06:38.700
when it wants to pause itself.

112
00:06:38.700 --> 00:06:41.250
Now, another thing that's
different about a generator from

113
00:06:41.250 --> 00:06:43.236
the esthetic usage perspective.

114
00:06:43.236 --> 00:06:45.000
On line 7, when I call gen,

115
00:06:45.000 --> 00:06:48.090
I'm calling what normally looks
like just executing a function.

116
00:06:48.090 --> 00:06:52.208
And we typically would expect for
it to execute the whole thing, but

117
00:06:52.208 --> 00:06:55.325
actually none of the generator
runs at that point.

118
00:06:55.325 --> 00:06:59.471
Executing a generator does not
actually run any of its code,

119
00:06:59.471 --> 00:07:01.840
instead it produces an iterator.

120
00:07:04.472 --> 00:07:06.332
&gt;&gt; Kyle Simpson: Some of you
hopefully have heard about iterators.

121
00:07:06.332 --> 00:07:08.824
Iterators are a patterned
way of stepping through,

122
00:07:08.824 --> 00:07:11.570
typically stepping through a set of data.

123
00:07:11.570 --> 00:07:13.912
For example,
the results from a database query,

124
00:07:13.912 --> 00:07:16.215
you would step through
them one result at a time.

125
00:07:16.215 --> 00:07:18.601
You'd call .next, .next, .next, and

126
00:07:18.601 --> 00:07:22.960
keep getting value results from a list
until there were no results to come back.

127
00:07:22.960 --> 00:07:25.090
That's the iterator pattern.

128
00:07:25.090 --> 00:07:28.620
And iterators are something that we've
been able to do ourselves in JavaScript

129
00:07:28.620 --> 00:07:29.220
for a long time.

130
00:07:29.220 --> 00:07:32.900
But they've now been added directly as
first class citizens to the language.

131
00:07:32.900 --> 00:07:34.680
We can create our own, and

132
00:07:34.680 --> 00:07:37.590
we can use generators that
are produced by other mechanisms.

133
00:07:37.590 --> 00:07:42.958
In this case,
calling a generator produces an iterator.

134
00:07:42.958 --> 00:07:46.566
And the purpose of the iterator in
this case is not to step through data,

135
00:07:46.566 --> 00:07:50.310
but rather to step through the control
of our generator from the outside.

136
00:07:51.560 --> 00:07:53.730
So again,
we can't pause the generator, but

137
00:07:53.730 --> 00:07:57.780
we can ask the generator to
run until it wants to pause.

138
00:07:57.780 --> 00:08:01.382
And then when we call .next again, we can
resume it and then it'll pause again, and

139
00:08:01.382 --> 00:08:04.300
we can call .next and it'll resume,
and then it'll pause again.

140
00:08:04.300 --> 00:08:07.990
So here on line 7 when I called gen,
none of the codes run.

141
00:08:07.990 --> 00:08:12.420
But on line 8 when I call the first
.next call, I started up on line 2 and

142
00:08:12.420 --> 00:08:13.668
I start running the generator.

143
00:08:13.668 --> 00:08:17.090
So I'm gonna print out
the Hello that you see there.

144
00:08:17.090 --> 00:08:21.130
And when it gets to the yield keyword
on line 3, it's going to pause and

145
00:08:21.130 --> 00:08:24.240
return control back to line 8.

146
00:08:24.240 --> 00:08:28.970
Line 8 could then proceed immediately to
line 9 and call .next again and resume it.

147
00:08:28.970 --> 00:08:31.300
So you can synchronously step through it.

148
00:08:31.300 --> 00:08:32.770
But of course, there could be a break,

149
00:08:32.770 --> 00:08:36.700
there could be a gap, there could be
a delay in time between lines 8 and 9.

150
00:08:36.700 --> 00:08:42.700
And in that period of time, the overall
program continues to run without change.

151
00:08:42.700 --> 00:08:46.560
But what's different is that inside of
this generator, it's in this paused state.

152
00:08:47.600 --> 00:08:50.390
It's blocking, it's waiting for
somebody to come along and

153
00:08:50.390 --> 00:08:52.720
call the .next method again to resume.

