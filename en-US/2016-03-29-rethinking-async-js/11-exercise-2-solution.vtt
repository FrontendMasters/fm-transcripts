WEBVTT

1
00:00:00.025 --> 00:00:03.823
[MUSIC]

2
00:00:03.823 --> 00:00:07.310
&gt;&gt; Kyle: Judging from some of the looks
on the faces in the crowd here in person.

3
00:00:08.780 --> 00:00:09.990
This was challenging right?

4
00:00:11.350 --> 00:00:15.160
I promised that it would be challenging,
I didn't want to let you off easy.

5
00:00:15.160 --> 00:00:20.020
But actually you might kick yourself when
you realize how stupidly simple this is.

6
00:00:20.020 --> 00:00:22.720
It just requires you
to train your brain to

7
00:00:22.720 --> 00:00:24.380
think a little differently
about these problems.

8
00:00:24.380 --> 00:00:25.810
So here's what I'm gonna do.

9
00:00:25.810 --> 00:00:28.020
I'm actually gonna solve
the problem in reverse.

10
00:00:28.020 --> 00:00:31.370
Cuz I find it easier to
understand when I do that.

11
00:00:31.370 --> 00:00:33.910
So what I'm gonna do is I'm going
to assume that I have a getFile

12
00:00:33.910 --> 00:00:35.650
function that does that magic.

13
00:00:35.650 --> 00:00:38.170
And will come back and figure out
how to make it do that magic, but

14
00:00:38.170 --> 00:00:40.380
I'm gonna talk about
how I use the function.

15
00:00:41.520 --> 00:00:45.550
So I'm going to need to get
something back from getFile, and

16
00:00:45.550 --> 00:00:47.100
that thing that I get back is a thunk.

17
00:00:47.100 --> 00:00:50.498
And I'm gonna have three of them because
I'm gonna make three separate AJAX

18
00:00:50.498 --> 00:00:51.740
requests.

19
00:00:51.740 --> 00:00:57.482
So I'm gonna call it th1,
thunk one, is getFile, file1.

20
00:00:57.482 --> 00:01:02.567
And th2 is getFile,

21
00:01:02.567 --> 00:01:08.627
file2.
&gt;&gt; Kyle: And

22
00:01:08.627 --> 00:01:14.300
th3 is getFile, file3, okay?

23
00:01:16.760 --> 00:01:18.870
Now, that takes care of
making the request, but

24
00:01:18.870 --> 00:01:23.120
it doesn't take care of
coordinating their responses.

25
00:01:23.120 --> 00:01:24.184
So I'm going to coordinate their

26
00:01:24.184 --> 00:01:29.619
responses.
&gt;&gt; Kyle: Using

27
00:01:29.619 --> 00:01:32.320
exactly the way we know how thunks work.

28
00:01:32.320 --> 00:01:33.730
What is a thunk?

29
00:01:33.730 --> 00:01:34.910
It takes a callback, right?

30
00:01:34.910 --> 00:01:39.930
So I'm gonna call th1 and give it
a callback which gives me some text.

31
00:01:41.420 --> 00:01:43.770
And for just clarity's sake
I'm gonna call it text1.

32
00:01:43.770 --> 00:01:45.290
It doesn't matter what we call it.

33
00:01:46.410 --> 00:01:49.550
But I know that this callback will
be called when there is a text1

34
00:01:50.720 --> 00:01:51.490
to respond to.

35
00:01:51.490 --> 00:01:53.640
Does everybody agree with that?

36
00:01:53.640 --> 00:02:00.086
So I can simply output it at that point.
&gt;&gt; Kyle: And

37
00:02:00.086 --> 00:02:03.549
then I know I can call th2 and
pass in a callback.

38
00:02:09.764 --> 00:02:11.633
&gt;&gt; Kyle: And at this point I know I can

39
00:02:11.633 --> 00:02:16.291
print out the contents.
&gt;&gt; Kyle: And

40
00:02:16.291 --> 00:02:18.739
then I know I can call
th3 with a callback.

41
00:02:22.731 --> 00:02:25.277
&gt;&gt; Kyle: And print out the contents,

42
00:02:25.277 --> 00:02:30.412
oops.
&gt;&gt; Kyle: And

43
00:02:30.412 --> 00:02:36.063
finally print out my complete message.
&gt;&gt; Kyle: Okay,

44
00:02:36.063 --> 00:02:40.100
now if my thunk was lazy.

45
00:02:40.100 --> 00:02:45.850
Does everybody see why I would not be
making my AJAX request in parallel?

46
00:02:47.480 --> 00:02:51.610
If my thunks were lazy, if it did not
make this AJAX request until that point,

47
00:02:51.610 --> 00:02:54.670
it would not make that request
until after th1 had finished.

48
00:02:55.810 --> 00:02:57.050
Is that a valid solution?

49
00:02:57.050 --> 00:03:01.540
Yes, except for the fact that it violates
our principle of parallel requests.

50
00:03:01.540 --> 00:03:04.870
It would work, but it would not fulfill
the requirements of the problem.

51
00:03:04.870 --> 00:03:09.525
So the requirements of the problem are
going to ask us to somehow pull a rabbit

52
00:03:09.525 --> 00:03:13.075
out of the hat and create not
a lazy thunk, but an active thunk.

53
00:03:14.215 --> 00:03:15.595
Okay.

54
00:03:15.595 --> 00:03:18.385
But if we do have an active thunk,
can everybody see why this is

55
00:03:18.385 --> 00:03:22.195
always going to make sure that they
are responded to in the correct order?

56
00:03:23.635 --> 00:03:24.935
There's a couple of options here.

57
00:03:24.935 --> 00:03:30.300
If I run th1 and I print out the text for
one, and then I run th2.

58
00:03:30.300 --> 00:03:35.150
One option is that th2 is already ready
to go, it already has a response.

59
00:03:35.150 --> 00:03:38.390
In which case it's right away
gonna call me with text2,

60
00:03:38.390 --> 00:03:41.360
that's one option,
cuz it already had that one there.

61
00:03:41.360 --> 00:03:42.860
Another option is that it's not yet

62
00:03:42.860 --> 00:03:46.820
got the text2 ready,
which case I'm just gonna keep waiting.

63
00:03:46.820 --> 00:03:50.790
But in either case I know that once
it does fire I do have a text2.

64
00:03:50.790 --> 00:03:54.460
And once I get to th3 there's
only one of two options.

65
00:03:54.460 --> 00:03:56.300
Either th3 is already finished,

66
00:03:56.300 --> 00:03:59.900
in which case when I call it I'm gonna
get the value extracted right away.

67
00:03:59.900 --> 00:04:02.950
Or I'm not gonna get the value
extracted right away but

68
00:04:02.950 --> 00:04:04.870
I'll wait until I do have a value.

69
00:04:04.870 --> 00:04:09.140
So in all possible
combinations this expression,

70
00:04:09.140 --> 00:04:13.410
this nested callback expression,
is going to sequence my output.

71
00:04:13.410 --> 00:04:17.450
And I don't have to worry about any
kind of looping through some array or

72
00:04:17.450 --> 00:04:18.670
object to find stuff.

73
00:04:18.670 --> 00:04:20.872
I know that they're going to be
sequenced correctly as a result.

74
00:04:20.872 --> 00:04:23.470
Does everybody follow me
on that reasoning, okay?

75
00:04:26.330 --> 00:04:30.880
Whether you realize it or not,
that's a huge massive improvement over our

76
00:04:30.880 --> 00:04:34.680
previous, and we didn't invoke any kind
of library or any fancy thing at all.

77
00:04:34.680 --> 00:04:37.130
We're just using functions
in a different way.

78
00:04:37.130 --> 00:04:41.080
This blew me away when I first realized
that this was possible all along.

79
00:04:41.080 --> 00:04:43.460
Why on Earth did I write so many years,

80
00:04:43.460 --> 00:04:47.930
decades of crappy code not realizing
how to use my tools more effectively?

81
00:04:50.070 --> 00:04:54.030
Cuz this is significantly more clean and
understandable.

82
00:04:54.030 --> 00:04:57.230
It's not perfect, but it's way better
than what we wrote in exercise one.

83
00:04:58.990 --> 00:05:03.010
Now that I know that that's
what I need to come up with,

84
00:05:03.010 --> 00:05:05.900
I need to figure out whether
it's even possible to solve.

85
00:05:05.900 --> 00:05:08.710
This silver bullet, this active thunk.

86
00:05:10.360 --> 00:05:11.430
So here's how we're gonna do that.

87
00:05:12.850 --> 00:05:16.800
We're going to observe that there
are two possible cases for every thunk.

88
00:05:18.120 --> 00:05:22.800
First of all we know to be an active thunk

89
00:05:22.800 --> 00:05:26.002
we are going to need to call
the fake AJAX call right away.

90
00:05:26.002 --> 00:05:27.970
Does everybody agree with that?

91
00:05:27.970 --> 00:05:29.040
With the file URL, and

92
00:05:29.040 --> 00:05:35.390
we're going to need to pass it some
callback that gets a response.

93
00:05:35.390 --> 00:05:38.600
That's gonna have to happen right
at the time we call getFile.

94
00:05:38.600 --> 00:05:44.570
If that happens later then we have a lazy
thunk and we've failed our solution, okay.

95
00:05:44.570 --> 00:05:47.320
We also know that a thunk
has to return a function.

96
00:05:48.880 --> 00:05:51.407
And that function needs to receive
only one argument which is

97
00:05:51.407 --> 00:05:53.520
a callback.
&gt;&gt; Kyle: So

98
00:05:53.520 --> 00:05:57.210
everybody understand that reasoning?

99
00:05:59.200 --> 00:06:03.990
So with this setup we have line 24 and
line 28 need to get

100
00:06:03.990 --> 00:06:08.120
bridged together in some way.

101
00:06:08.120 --> 00:06:11.170
Either line 24 is going
to run before line 28,

102
00:06:11.170 --> 00:06:13.820
or line 28 is going to run before line 24.

103
00:06:13.820 --> 00:06:16.765
Those are the only two possible outcomes.

104
00:06:18.845 --> 00:06:20.245
So we need to bridge the two and

105
00:06:20.245 --> 00:06:24.415
we're gonna do that by looking
at both scenarios independently.

106
00:06:24.415 --> 00:06:30.485
So let's imagine for an example that
line 24 runs first, before line 28.

107
00:06:30.485 --> 00:06:35.170
So let's say line 24 has run,
that means we got the response back.

108
00:06:35.170 --> 00:06:36.960
But we have not yet called our thunk.

109
00:06:38.420 --> 00:06:40.130
We're gonna need to hold
onto that response,

110
00:06:40.130 --> 00:06:41.510
does everybody agree with that reasoning?

111
00:06:42.740 --> 00:06:43.890
So here's what I'm gonna do.

112
00:06:43.890 --> 00:06:47.350
I'm going to, in my closure,
have a variable called text.

113
00:06:48.640 --> 00:06:54.431
And what I'm going to
say is text = response.

114
00:06:54.431 --> 00:06:59.540
Now on line 30 now,
which was the previous line 28.

115
00:06:59.540 --> 00:07:05.700
When line 30 runs at a later time, I have
a callback and I have some response text.

116
00:07:06.910 --> 00:07:08.579
So couldn't I just say cb(text).

117
00:07:08.579 --> 00:07:11.930
Does everybody see how I did that?

118
00:07:13.950 --> 00:07:16.000
That's only one of our two scenarios but

119
00:07:16.000 --> 00:07:18.090
I just want you to understand
how we're bridging.

120
00:07:18.090 --> 00:07:22.000
In the one scenario we're
bridging by saving the text and

121
00:07:22.000 --> 00:07:24.840
then passing it into
the callback at a later time.

122
00:07:24.840 --> 00:07:28.320
Okay, now let me back up.

123
00:07:28.320 --> 00:07:35.740
Let's imagine that now instead that it's
line 30 that runs first, before line 26.

124
00:07:35.740 --> 00:07:39.760
So Line 30 gets a callback but

125
00:07:39.760 --> 00:07:43.970
we're not ready to use that callback yet,
are we?

126
00:07:43.970 --> 00:07:46.836
So what if we save it off,
what if we say fn =

127
00:07:46.836 --> 00:07:52.176
cb.
&gt;&gt; Kyle: And

128
00:07:52.176 --> 00:07:57.785
then when this line 26 runs I have
a callback to pass my stuff to, I can just

129
00:07:57.785 --> 00:08:03.413
simply pass response directly into fn.
&gt;&gt; Kyle: Does

130
00:08:03.413 --> 00:08:08.939
everybody see that?
&gt;&gt; Kyle: So in either of

131
00:08:08.939 --> 00:08:14.896
those two scenarios I have a way to bridge
the gap and that bridge is closure.

132
00:08:14.896 --> 00:08:18.495
Now I just need to put those
two solutions together, okay.

133
00:08:18.495 --> 00:08:21.154
So what I'm going to do,
I'll start back at scratch.

134
00:08:21.154 --> 00:08:26.601
What I'm going to do is set up an if
statement to ask for these two conditions.

135
00:08:26.601 --> 00:08:33.600
So on line 26 what I'm going
to ask is if fn has been set.

136
00:08:35.260 --> 00:08:37.580
Then I know that the other one
has been called first, right,

137
00:08:37.580 --> 00:08:39.530
cuz that's the only way it gets set.

138
00:08:39.530 --> 00:08:42.170
Which means I can simply call it
right away with what I just got.

139
00:08:44.010 --> 00:08:45.712
If fn has not been set,

140
00:08:45.712 --> 00:08:52.422
I need to save the response.
&gt;&gt; Kyle: Down here,

141
00:08:52.422 --> 00:08:54.400
we're gonna do the reverse if logic.

142
00:08:55.680 --> 00:09:01.950
If the text has been set, then I know
I can just go ahead and send it to cb.

143
00:09:03.310 --> 00:09:05.873
Otherwise, I need to save off my callback.

144
00:09:14.723 --> 00:09:15.930
&gt;&gt; Kyle: Few of you had that.

145
00:09:15.930 --> 00:09:17.858
I had that mine exploding like [SOUND].

146
00:09:17.858 --> 00:09:18.649
What?

147
00:09:18.649 --> 00:09:22.590
How has this been around and
I just never even knew it?

148
00:09:22.590 --> 00:09:26.010
Why didn't anybody ever teach me
this in all my years of JavaScript?

149
00:09:27.350 --> 00:09:28.500
I don't need some library.

150
00:09:29.520 --> 00:09:33.699
I just need to know how to better
use the tools I already have.

151
00:09:39.155 --> 00:09:40.586
&gt;&gt; Kyle: I've looked, and looked,

152
00:09:40.586 --> 00:09:45.190
and looked for a name for this pattern of
bridging the closure of these two states.

153
00:09:45.190 --> 00:09:48.640
And really, I've asked functional
programming developers and

154
00:09:48.640 --> 00:09:51.090
other people what do I call this pattern?

155
00:09:51.090 --> 00:09:53.130
Nobody has any good name for it.

156
00:09:53.130 --> 00:09:57.880
So I just call it active versus passive,
or active versus lazy thunks.

157
00:09:57.880 --> 00:10:00.380
Cuz I don't have any better term for it.

158
00:10:00.380 --> 00:10:02.070
But when I discovered
this a few years ago,

159
00:10:03.810 --> 00:10:05.350
I started using it all over the place.

160
00:10:05.350 --> 00:10:09.930
And in fact, I realized I'd already kind
of fumbled upon that solution before

161
00:10:09.930 --> 00:10:11.670
in some of my earlier libraries.

162
00:10:11.670 --> 00:10:15.450
Because I needed something like
a promise before I had promises.

163
00:10:15.450 --> 00:10:20.280
And I had accidentally stumbled upon
something kind of like this in the past.

164
00:10:20.280 --> 00:10:23.822
And then I realized, wow, that's actually
a pattern I use all over place inside of

165
00:10:23.822 --> 00:10:31.305
the various libraries there, right.
&gt;&gt; Kyle: So

166
00:10:31.305 --> 00:10:34.051
it's a more effective way
of using the callbacks and

167
00:10:34.051 --> 00:10:36.559
closures that we already
have in the language.

168
00:10:37.970 --> 00:10:39.100
And again, the take away.

169
00:10:40.130 --> 00:10:44.030
We have completely factored time
as a state out of the equation.

170
00:10:44.030 --> 00:10:44.990
We don't have to worry about it.

171
00:10:44.990 --> 00:10:50.070
We set this code up once,
this is like plumbing.

172
00:10:51.860 --> 00:10:55.269
This is the program code that we write
over, and over, and over, and over again.

173
00:10:56.460 --> 00:10:58.480
And this is the part where we
don't have to worry about time.

174
00:10:58.480 --> 00:11:02.010
Cuz that part's already
been taken care of for us.

175
00:11:03.550 --> 00:11:06.584
So it makes our code fundamentally
easier to reason about.

176
00:11:15.891 --> 00:11:16.878
&gt;&gt; Kyle: Okay,

177
00:11:16.878 --> 00:11:20.800
so
&gt;&gt; Kyle: that's thunks.

178
00:11:22.490 --> 00:11:27.800
The next step, when we get back together,
is to understand how promises

179
00:11:27.800 --> 00:11:32.010
add on to that pattern and
give us even more of a solution.

180
00:11:32.010 --> 00:11:34.600
Promises are not a replacement for thunks.

181
00:11:34.600 --> 00:11:38.640
Cuz inside of my libraries that I'm making
thunks, I mean that I'm making promises,

182
00:11:38.640 --> 00:11:39.160
I use thunks.

183
00:11:40.280 --> 00:11:41.830
Thunks are things that you can use,

184
00:11:41.830 --> 00:11:45.740
it's a very lightweight way of solving
asynchronous sequencing issues.

185
00:11:45.740 --> 00:11:49.940
Without having to invoke some
huge library or some crazy API or

186
00:11:49.940 --> 00:11:53.083
something like that, it's a very
lightweight, easy way of doing it.

187
00:11:53.083 --> 00:11:56.900
It's gonna take some practice to
wrap your brain around that pattern,

188
00:11:56.900 --> 00:11:58.090
it took me quite a bit of practice.

189
00:11:58.090 --> 00:12:02.750
Would highly encourage you between now and
the next time we get together for

190
00:12:02.750 --> 00:12:05.530
this workshop,
spend some time going back over that.

191
00:12:05.530 --> 00:12:06.970
Try that from blank file and

192
00:12:06.970 --> 00:12:10.010
see if you can recreate that same
reasoning that I just recreated.

193
00:12:11.470 --> 00:12:15.210
It'll make our exploration of promises
a lot more fruitful for you if you do.

