WEBVTT

1
00:00:00.000 --> 00:00:04.187
[MUSIC]

2
00:00:04.187 --> 00:00:05.149
&gt;&gt; Kyle: Yes.
&gt;&gt; Speaker 2: I don't

3
00:00:05.149 --> 00:00:08.490
feel like that this is
the correct behavior though.

4
00:00:08.490 --> 00:00:12.970
Cuz when you when click on a button, you
would think it would happen right away.

5
00:00:12.970 --> 00:00:19.090
And then as you're clicking it would
debounce a whole nother second.

6
00:00:19.090 --> 00:00:20.739
&gt;&gt; Kyle: Debouncing is
different than sampling.

7
00:00:21.970 --> 00:00:23.709
So we could have done an exercise for
debouncing.

8
00:00:23.709 --> 00:00:24.811
&gt;&gt; Speaker 2: Cuz this is like, no,

9
00:00:24.811 --> 00:00:27.537
I understand this follows
the pattern in the exercise.

10
00:00:27.537 --> 00:00:32.400
But I'm just saying in this scenario,
you have every second,

11
00:00:32.400 --> 00:00:35.400
it's dumping whatever it sees.

12
00:00:35.400 --> 00:00:36.360
&gt;&gt; Kyle: Yes.
&gt;&gt; Speaker 2: Right?

13
00:00:36.360 --> 00:00:37.190
&gt;&gt; Kyle: Yes.
&gt;&gt; Speaker 2: I mean

14
00:00:37.190 --> 00:00:38.710
kind of a clock, right?

15
00:00:38.710 --> 00:00:39.410
&gt;&gt; Kyle: Yes.
&gt;&gt; Speaker 2: But

16
00:00:40.420 --> 00:00:45.260
I would expect that when you click
it just operates right away.

17
00:00:45.260 --> 00:00:49.260
And then it sort of-
&gt;&gt; Kyle: Yeah.

18
00:00:49.260 --> 00:00:52.440
So what you're really asking about
has absolutely nothing to do

19
00:00:52.440 --> 00:00:53.180
with the programming.

20
00:00:53.180 --> 00:00:55.070
That's a user experience question.

21
00:00:55.070 --> 00:00:57.240
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Kyle: If you wanted the user experience

22
00:00:57.240 --> 00:01:00.580
of debouncing,
you would solve this a different way.

23
00:01:00.580 --> 00:01:04.735
I set it up because sampling is
easier to understand than debouncing.

24
00:01:04.735 --> 00:01:05.750
&gt;&gt; Speaker 2: Yeah, yeah, sure.

25
00:01:05.750 --> 00:01:08.490
&gt;&gt; Kyle: So I set it up that the exercise
is for you to learn about sampling.

26
00:01:08.490 --> 00:01:11.250
&gt;&gt; Speaker 2: I'm just wondering
how that would fit into the-

27
00:01:11.250 --> 00:01:12.520
&gt;&gt; Kyle: Where does sampling fit in?

28
00:01:13.540 --> 00:01:14.830
Is that what you're asking?

29
00:01:14.830 --> 00:01:19.623
&gt;&gt; Speaker 2: Yeah, just how you
would do it like that where you're

30
00:01:19.623 --> 00:01:23.884
debouncing with the variables rather than,
or

31
00:01:23.884 --> 00:01:26.990
maybe it's [CROSSTALK]
&gt;&gt; Kyle: It's hard to answer

32
00:01:26.990 --> 00:01:30.670
user experience questions in
the context of software development.

33
00:01:30.670 --> 00:01:37.110
But there are use cases for sampling and
there are use cases for event debouncing.

34
00:01:37.110 --> 00:01:40.250
And we would have solved this differently
if our use case was asking for

35
00:01:40.250 --> 00:01:42.300
the debouncing.

36
00:01:42.300 --> 00:01:43.273
&gt;&gt; Speaker 2: Sure.
&gt;&gt; Kyle: And RxJS, by the way,

37
00:01:43.273 --> 00:01:45.931
does provide a debouncing [CROSSTALK]
&gt;&gt; Speaker 2: I just haven't quite wrapped

38
00:01:45.931 --> 00:01:48.530
my head around building UIs this way.

39
00:01:48.530 --> 00:01:49.580
&gt;&gt; Kyle: That have sampling?

40
00:01:49.580 --> 00:01:50.700
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Kyle: Okay.

41
00:01:50.700 --> 00:01:54.260
&gt;&gt; Speaker 2: With stream, so I've never
actually built a whole Reactive interface.

42
00:01:55.280 --> 00:01:58.558
&gt;&gt; Kyle: Yeah, well basically,
just as with any software development,

43
00:01:58.558 --> 00:02:01.718
you're going to have a set of
user experience requirements and

44
00:02:01.718 --> 00:02:03.345
UI requirements handed to you.

45
00:02:03.345 --> 00:02:06.314
And as a developer you're gonna have
to say, what they're asking for

46
00:02:06.314 --> 00:02:07.080
is debouncing.

47
00:02:07.080 --> 00:02:10.580
So let me go find the appropriate
way to model debouncing.

48
00:02:10.580 --> 00:02:12.750
Or, over here they're asking for sampling,

49
00:02:12.750 --> 00:02:15.630
let me go solve this
with a sampling thing.

50
00:02:15.630 --> 00:02:18.400
So this exercise was purely about solving

51
00:02:18.400 --> 00:02:21.010
sampling as the operation
that we look for.

52
00:02:21.010 --> 00:02:23.950
And sampling is a valid thing
that you do in interfaces.

53
00:02:25.135 --> 00:02:28.361
Debouncing is also a valid
thing that you do.

54
00:02:28.361 --> 00:02:28.873
Does that makes sense?

55
00:02:28.873 --> 00:02:31.200
Okay.

56
00:02:31.200 --> 00:02:36.470
&gt;&gt; Speaker 3: Couldn't you just switch
instead of having that latest variable set

57
00:02:36.470 --> 00:02:44.180
on click, you would have it set
on it's set interval, r1ight?

58
00:02:44.180 --> 00:02:46.850
So that it's the second
that is getting flagged.

59
00:02:46.850 --> 00:02:51.920
And then every time you
have the click happen,

60
00:02:51.920 --> 00:02:55.480
you look to see,
do we have a second flag set?

61
00:02:55.480 --> 00:02:56.750
Then put it out right away.

62
00:02:56.750 --> 00:03:02.210
It would just be the event in the
different order for the flag being set.

63
00:03:03.250 --> 00:03:04.610
&gt;&gt; Kyle: I'm not gonna argue with you.

64
00:03:04.610 --> 00:03:07.530
I'm not entirely certain I agree,
but I'm not gonna argue with you.

65
00:03:07.530 --> 00:03:08.980
It might mean [INAUDIBLE]
&gt;&gt; Speaker 3: You could

66
00:03:08.980 --> 00:03:10.400
switch this logic around to.

67
00:03:11.600 --> 00:03:12.890
&gt;&gt; Kyle: Okay, sure.

68
00:03:12.890 --> 00:03:14.410
&gt;&gt; Speaker 3: You could get it working.

69
00:03:14.410 --> 00:03:14.930
&gt;&gt; Kyle: Okay, sure.

70
00:03:16.040 --> 00:03:17.240
Maybe you should do that as a bonus.

71
00:03:17.240 --> 00:03:19.998
Try to rework this as
debouncing instead of sampling.

72
00:03:19.998 --> 00:03:22.922
&gt;&gt; Speaker 4: Well, I'm going to have
to cuz one of the next interfaces I'm

73
00:03:22.922 --> 00:03:24.779
building-
&gt;&gt; Kyle: Is going to be that, yeah.

74
00:03:24.779 --> 00:03:25.467
&gt;&gt; Speaker 4: Yeah.

75
00:03:25.467 --> 00:03:25.994
&gt;&gt; Kyle: Okay.

76
00:03:25.994 --> 00:03:30.100
All right, good questions, though.

77
00:03:30.100 --> 00:03:31.514
Any other questions about exercise eight?

78
00:03:33.437 --> 00:03:36.556
&gt;&gt; Kyle: This is nowhere
near a comprehensive,

79
00:03:36.556 --> 00:03:41.410
two-day, deep dive into all
of Reactive programming.

80
00:03:41.410 --> 00:03:43.110
There's a whole other workshop for that.

81
00:03:43.110 --> 00:03:46.330
But what I wanted to get you to
the point of is understanding where it

82
00:03:46.330 --> 00:03:49.560
fits within the bigger scope
of what we do in our programs.

83
00:03:50.830 --> 00:03:55.110
Observables are about adapting
your event streams and

84
00:03:55.110 --> 00:03:57.620
modeling your data flow
in a declarative fashion.

85
00:03:57.620 --> 00:03:59.610
That's what observables are all about.

86
00:03:59.610 --> 00:04:03.720
So in the parts of your application that
need that, don't reach for a generator,

87
00:04:03.720 --> 00:04:07.230
don't reach for a promise, don't reach for
a thunk, don't reach for a callback,

88
00:04:07.230 --> 00:04:08.109
reach for an observable.

89
00:04:09.880 --> 00:04:13.170
Right, so
these are all different tools that fit in

90
00:04:13.170 --> 00:04:16.410
together to an application I said this
at the beginning of the workshop.

91
00:04:16.410 --> 00:04:20.350
I've never once built an application
that used exactly the same abstraction

92
00:04:20.350 --> 00:04:21.770
across everything.

93
00:04:21.770 --> 00:04:23.777
There's the right tool for
the right job so

94
00:04:23.777 --> 00:04:25.851
this is just one more
tool in your tool belt.

95
00:04:28.315 --> 00:04:28.891
&gt;&gt; Kyle: Did you have a question?

96
00:04:28.891 --> 00:04:29.739
Okay.

97
00:04:29.739 --> 00:04:32.059
&gt;&gt; Speaker 4: [INAUDIBLE]
&gt;&gt; Kyle: No problem.

98
00:04:32.059 --> 00:04:34.303
Okay, great.

99
00:04:34.303 --> 00:04:37.100
I want to point out one other thing.

100
00:04:37.100 --> 00:04:41.210
There were a couple questions about
the difference between using this and

101
00:04:41.210 --> 00:04:43.810
using RxJS.

102
00:04:43.810 --> 00:04:46.251
I'm not disparaging RxJS
in any way shape or form.

103
00:04:46.251 --> 00:04:50.870
I'm simply saying it's too much for
me to have ever tried to bite off.

104
00:04:50.870 --> 00:04:53.260
And eventually,
I was like I need something simpler.

105
00:04:53.260 --> 00:04:57.430
So that's why it ended up
landing in asynquence that way.

106
00:04:57.430 --> 00:04:59.840
I needed something that
was easier to teach.

107
00:04:59.840 --> 00:05:00.980
And if I had to teach you three or

108
00:05:00.980 --> 00:05:04.670
four different frameworks, you'd be even
more overwhelmed than you are already are.

109
00:05:04.670 --> 00:05:07.250
So, I'm trying to keep it
as simple as possible.

110
00:05:07.250 --> 00:05:10.760
But that's not to say in any way,
shape, or form that RxJS is bad,

111
00:05:10.760 --> 00:05:11.520
it's a great library.

112
00:05:12.550 --> 00:05:17.380
In addition to that, I would say you
don't have to choose between the two,.

113
00:05:17.380 --> 00:05:23.440
Because there is a to observable and a
from observable provided with my library.

114
00:05:23.440 --> 00:05:26.660
So if you have RxJS observables that
you're getting from some framework.

115
00:05:26.660 --> 00:05:30.122
And you want to use them in asynquence,
you can import them in and

116
00:05:30.122 --> 00:05:32.960
make a reactive sequence,
or the other way around.

117
00:05:32.960 --> 00:05:36.090
If you have a reactive sequence and
you want to make a real observable out of

118
00:05:36.090 --> 00:05:38.630
it for some reason,
you can do that as well.

119
00:05:38.630 --> 00:05:41.546
So you don't have to choose, and
the same is true of promises.

120
00:05:41.546 --> 00:05:46.667
There's a to promise and a promise
method to bring promises into React.

121
00:05:46.667 --> 00:05:51.320
So there's no real reason why you have
to draw some dividing line and say well,

122
00:05:51.320 --> 00:05:53.308
it's either asynquence or not.

123
00:05:53.308 --> 00:05:56.781
You can mix asynquence in with
any other mixed environment and

124
00:05:56.781 --> 00:05:59.670
should be able to go back and
forth transparently.

