WEBVTT

1
00:00:00.000 --> 00:00:04.100
[MUSIC]

2
00:00:04.100 --> 00:00:05.424
&gt;&gt; Kyle: Questions about exercise three.

3
00:00:05.424 --> 00:00:08.536
Yes?
&gt;&gt; Speaker 2: Well,

4
00:00:08.536 --> 00:00:12.410
I have p1 then functions, and

5
00:00:12.410 --> 00:00:17.450
then I have that under the options.

6
00:00:17.450 --> 00:00:25.920
I [INAUDIBLE].

7
00:00:25.920 --> 00:00:28.846
&gt;&gt; Kyle: So,
you're saying put the dot then here?

8
00:00:28.846 --> 00:00:30.822
&gt;&gt; Speaker 2: I put it under [INAUDIBLE].

9
00:00:30.822 --> 00:00:31.513
&gt;&gt; Kyle: Is that what you're saying?

10
00:00:31.513 --> 00:00:34.971
&gt;&gt; Speaker 2: [INAUDIBLE] Like that?

11
00:00:34.971 --> 00:00:40.250
[INAUDIBLE] Then functions, no,

12
00:00:40.250 --> 00:00:47.517
this happened then, functions output.
&gt;&gt; Kyle: You're

13
00:00:47.517 --> 00:00:50.120
saying you took this one out.
&gt;&gt; Speaker 2: Yes.

14
00:00:50.120 --> 00:00:51.757
&gt;&gt; Kyle: You did output text.

15
00:00:51.757 --> 00:00:52.647
&gt;&gt; Speaker 2: Yes, and

16
00:00:52.647 --> 00:00:54.755
then return p2.
&gt;&gt; Kyle: And

17
00:00:54.755 --> 00:00:59.920
then return p2 is that correct?
&gt;&gt; Speaker 2: Yeah.

18
00:00:59.920 --> 00:01:01.404
&gt;&gt; Kyle: Valid solution, but

19
00:01:01.404 --> 00:01:04.210
that's not as promise chain oriented.

20
00:01:06.310 --> 00:01:11.410
I would prefer to keep the output and
the chaining in separate places.

21
00:01:12.490 --> 00:01:14.030
Separate steps to reason about.

22
00:01:15.660 --> 00:01:19.590
This will functionally work, but this
isn't the style I would personally prefer.

23
00:01:19.590 --> 00:01:24.180
I prefer a style where the steps
are more explicitly separate.

24
00:01:24.180 --> 00:01:27.540
You wanna think about,
this is just general programming practice.

25
00:01:27.540 --> 00:01:30.000
Functions should be as
single purpose as possible.

26
00:01:31.100 --> 00:01:34.480
So, don't make a function that
does two entirely separate things,

27
00:01:34.480 --> 00:01:39.190
outputting the response from a previous
one, and sequencing in yet another thing.

28
00:01:39.190 --> 00:01:43.890
Those two tasks are separate concerns,
and they belong, in my opinion,

29
00:01:43.890 --> 00:01:48.900
a separate steps in the chain.
&gt;&gt; Speaker 3: So,

30
00:01:48.900 --> 00:01:51.633
you need to resolve the comma splice?

31
00:01:51.633 --> 00:01:55.310
And then you have two then statements for

32
00:01:55.310 --> 00:01:57.960
p1 there to result twice?
&gt;&gt; Kyle: No.

33
00:01:59.350 --> 00:02:04.700
The question was, if I said somewhere
else in my program, if I had another p1.,

34
00:02:04.700 --> 00:02:09.820
then logValue, for example.

35
00:02:09.820 --> 00:02:12.220
So now I have two p1.then's.

36
00:02:12.220 --> 00:02:14.729
I register two then handlers
on the same promise.

37
00:02:16.170 --> 00:02:19.860
That's not the same thing as off the
chain, cuz this is a different promise.

38
00:02:19.860 --> 00:02:25.560
But here, I have two then's handlers
registered in the same promise.

39
00:02:25.560 --> 00:02:27.560
Does resolve need to get called twice?

40
00:02:27.560 --> 00:02:28.720
Absolutely not.

41
00:02:28.720 --> 00:02:32.330
You call resolve once, and
the promise becomes resolved to that value

42
00:02:32.330 --> 00:02:37.120
immediately and forever immutable, no
matter whether you observe beforehand or

43
00:02:37.120 --> 00:02:39.510
after hand, and
no matter how many times you observe it.

44
00:02:39.510 --> 00:02:40.680
You're still going to get that same value.

45
00:02:40.680 --> 00:02:42.540
It's exactly like with our thunks.

46
00:02:42.540 --> 00:02:46.710
Every time we call the thunk, we're gonna
get that same 25 value out, for example.

47
00:02:46.710 --> 00:02:51.540
So here, only one resolve, and both log
value and output would get called with

48
00:02:51.540 --> 00:02:55.790
that value, as well as any future
times that we called p1.then.

49
00:02:55.790 --> 00:02:57.820
Yes?
&gt;&gt; Speaker 4: I'm a little confused about

50
00:02:57.820 --> 00:03:00.410
what the output returns so

51
00:03:00.410 --> 00:03:04.060
that you can chain it.
&gt;&gt; Kyle: Every time the then method,

52
00:03:04.060 --> 00:03:06.770
this is getting a little bit
into the implementation details.

53
00:03:06.770 --> 00:03:09.410
Every single time that
then method is called,

54
00:03:09.410 --> 00:03:11.413
it actually does return its own promise.

55
00:03:13.480 --> 00:03:16.460
So, when I chain right here on line 37,

56
00:03:16.460 --> 00:03:20.650
I am chaining off a new promise that was
created and returned by that method.

57
00:03:21.820 --> 00:03:27.310
That new promise is set to,
by default, be resolved immediately.

58
00:03:27.310 --> 00:03:32.000
Unless the previous step returns another
promise, in which case it sort of hijacks.

59
00:03:32.000 --> 00:03:36.030
That's that complicated under the cover
stuff that I said, seems simple and

60
00:03:36.030 --> 00:03:37.540
it's actually pretty complex.

61
00:03:37.540 --> 00:03:39.130
That part's handled for you.

62
00:03:39.130 --> 00:03:41.530
So, this is automatically
chaining off of a new

63
00:03:41.530 --> 00:03:43.960
promise.
&gt;&gt; Speaker 4: So,

64
00:03:43.960 --> 00:03:47.030
what would the input to that function be?

65
00:03:47.030 --> 00:03:49.920
Well, it would be-
&gt;&gt; Kyle: Because we don't return anything

66
00:03:49.920 --> 00:03:50.470
from output.

67
00:03:52.150 --> 00:03:56.944
If I returned something like, hello there,

68
00:03:56.944 --> 00:04:01.505
that value that I'm
returning from that promise

69
00:04:01.505 --> 00:04:05.960
would automatically get piped in and
come in here is an argument.

70
00:04:05.960 --> 00:04:09.308
But since I'm not returning
anything from output, nothing goes.

71
00:04:09.308 --> 00:04:10.264
&gt;&gt; Speaker 4: So it's undefined?

72
00:04:10.264 --> 00:04:11.398
&gt;&gt; Kyle: Well, it's the same,

73
00:04:11.398 --> 00:04:15.146
all JavaScript functions that don't have
a return are the same thing as return

74
00:04:15.146 --> 00:04:15.790
undefined.

75
00:04:18.780 --> 00:04:22.560
Yeah?
&gt;&gt; Speaker 5: They're asking,

76
00:04:22.560 --> 00:04:25.180
is the function or
passing to .then the value

77
00:04:25.180 --> 00:04:29.500
of result?
&gt;&gt; Kyle: No.

78
00:04:30.800 --> 00:04:32.390
I don't understand the question, but

79
00:04:32.390 --> 00:04:37.464
I know that that it's the answer is no.
&gt;&gt; Speaker 5: So, I think he is

80
00:04:37.464 --> 00:04:41.907
asking output, what is the value of that?
&gt;&gt; Kyle: I need to know a line number

81
00:04:41.907 --> 00:04:44.844
that somebody is asking about.
&gt;&gt; Speaker 5: I'm 36.

82
00:04:44.844 --> 00:04:45.360
&gt;&gt; Kyle: Line 36.

83
00:04:45.360 --> 00:04:47.252
What is the value of what?

84
00:04:47.252 --> 00:04:49.844
The value of the output function, or

85
00:04:49.844 --> 00:04:53.930
the value of the .then function?
&gt;&gt; Speaker 5: Where is the resolve

86
00:04:53.930 --> 00:04:57.890
defined?
&gt;&gt; Kyle: Resolve is defined here.

87
00:04:57.890 --> 00:05:02.080
It's passed into our promise
constructor by the promise mechanism.

88
00:05:02.080 --> 00:05:03.210
All we have to do is call it.

89
00:05:10.270 --> 00:05:12.497
&gt;&gt; Speaker 6: The previous example where

90
00:05:12.497 --> 00:05:17.110
you had a p1.then with log on the result.
&gt;&gt; Kyle: Uh-huh.

91
00:05:17.110 --> 00:05:17.962
&gt;&gt; Speaker 6: What's the order?

92
00:05:17.962 --> 00:05:21.125
Would it execute output first or

93
00:05:21.125 --> 00:05:24.850
log first?
&gt;&gt; Kyle: The order will be

94
00:05:24.850 --> 00:05:28.750
if you have two different then's on the
same promise, which is what we have here.

95
00:05:29.850 --> 00:05:34.310
Keep in mind line 39 is
not a .then on p1 anymore.

96
00:05:34.310 --> 00:05:36.390
It's on a different promise entirely.

97
00:05:36.390 --> 00:05:40.660
But line 38 and
line 35 are then's on the same promise.

98
00:05:40.660 --> 00:05:43.800
In those cases, they go in first,
registered first, executed order.

99
00:05:45.940 --> 00:05:49.495
You really should not pay any attention
to that sort of detail, though.

100
00:05:49.495 --> 00:05:51.150
&gt;&gt; Speaker 6: [LAUGH]

101
00:05:51.150 --> 00:05:51.900
&gt;&gt; Kyle: You really, really,

102
00:05:51.900 --> 00:05:54.120
really absolutely should not.

103
00:05:54.120 --> 00:05:57.900
Reason about what order something
was registered on the promise in,

104
00:05:57.900 --> 00:06:00.930
not that it's not reliable, it is,
that's guaranteed by the spec.

105
00:06:00.930 --> 00:06:03.360
This is terrible programming practice.

106
00:06:03.360 --> 00:06:07.300
That's way back to those pre functional
programming concepts that we're talking

107
00:06:07.300 --> 00:06:10.290
about where you can't understand
the state of your system,

108
00:06:10.290 --> 00:06:11.680
cuz you don't see it all at once.

109
00:06:12.730 --> 00:06:18.500
So, promises invite you to embrace
the idea that you are dealing with

110
00:06:18.500 --> 00:06:20.970
independent things that you shouldn't.

111
00:06:20.970 --> 00:06:26.140
You should not build dependency
between the resolution

112
00:06:26.140 --> 00:06:29.883
of promise handlers if you can avoid it.

113
00:06:35.335 --> 00:06:36.425
&gt;&gt; Speaker 6: Right there.

114
00:06:36.425 --> 00:06:39.433
He's kind of following up on his question,
but he's, I don't see where we pass

115
00:06:39.433 --> 00:06:42.830
the resolve value into the promise.
&gt;&gt; Speaker 5: That gives us-

116
00:06:42.830 --> 00:06:44.170
&gt;&gt; Kyle: The resolve value,

117
00:06:44.170 --> 00:06:47.070
I think maybe I'm just,
it's maybe being just,

118
00:06:48.990 --> 00:06:51.480
it's hard to understand the way
the questions are being asked.

119
00:06:51.480 --> 00:06:57.250
I think what's actually being asked is you
not seeing the fact that this on line 24,

120
00:06:57.250 --> 00:07:02.400
this resolve function is that
CB up here in our fake AJAX.

121
00:07:02.400 --> 00:07:05.600
And down here is where we're
calling the result function and

122
00:07:05.600 --> 00:07:09.900
passing text in.
&gt;&gt; Speaker 7: And that is output.

123
00:07:11.670 --> 00:07:13.094
Output is a function?
&gt;&gt; Kyle: No.

124
00:07:13.094 --> 00:07:13.956
&gt;&gt; Speaker 7: No?

125
00:07:13.956 --> 00:07:18.270
&gt;&gt; Kyle: No, no, no, no, no.

126
00:07:18.270 --> 00:07:20.785
Resolve is the thing that's
getting passed into fake Ajax.

127
00:07:23.973 --> 00:07:24.894
&gt;&gt; Kyle: Not output.

128
00:07:24.894 --> 00:07:28.790
&gt;&gt; Speaker 4: But we're passing

129
00:07:28.790 --> 00:07:34.108
the function.
&gt;&gt; Speaker 2: Function with

130
00:07:34.108 --> 00:07:39.500
the response and resolve with response.

131
00:07:39.500 --> 00:07:42.234
Does that make more sense?

132
00:07:42.234 --> 00:07:50.908
On line 24?
&gt;&gt; Kyle: Does that make it easier to

133
00:07:50.908 --> 00:07:57.240
understand?
&gt;&gt; Speaker 4: And

134
00:07:57.240 --> 00:08:01.259
result is not output.
&gt;&gt; Kyle: No, result comes from the promise

135
00:08:01.259 --> 00:08:06.232
constructor.
&gt;&gt; Kyle: This

136
00:08:06.232 --> 00:08:08.250
is built into JavaScript.
&gt;&gt; Speaker 4: Yep.

137
00:08:08.250 --> 00:08:09.740
&gt;&gt; Kyle: It produces a function that we

138
00:08:09.740 --> 00:08:10.790
happen to call resolve.

139
00:08:10.790 --> 00:08:12.970
We could call it Fubar if we wanted.
&gt;&gt; Speaker 4: Yep.

140
00:08:12.970 --> 00:08:14.370
&gt;&gt; Kyle: That's coming from JavaScript,

141
00:08:14.370 --> 00:08:16.280
not from us.
&gt;&gt; Speaker 4: Okay.

142
00:08:16.280 --> 00:08:18.290
&gt;&gt; Kyle: Output is being passed to

143
00:08:18.290 --> 00:08:21.740
the then function, which is happening
at an entirely different part of the-

144
00:08:22.740 --> 00:08:23.740
&gt;&gt; Speaker 5: I think they might

145
00:08:23.740 --> 00:08:26.630
be getting lost on the idea
of where promise comes from.

146
00:08:26.630 --> 00:08:29.260
And-
&gt;&gt; Kyle: It's built into JavaScript.

147
00:08:29.260 --> 00:08:30.410
&gt;&gt; Speaker 5: Right, I think that's

148
00:08:30.410 --> 00:08:35.200
where he's confused here.
&gt;&gt; Kyle: I

149
00:08:35.200 --> 00:08:38.220
don't know what else to say other than
to say it's built into JavaScript,

150
00:08:38.220 --> 00:08:42.540
that's where it comes from.
&gt;&gt; Speaker 5: ES 6.

151
00:08:42.540 --> 00:08:43.740
&gt;&gt; Kyle: It's built in the ES 6.

152
00:08:43.740 --> 00:08:48.959
That's correct.
&gt;&gt; Kyle: If

153
00:08:48.959 --> 00:08:52.000
one of the promises misbehaves and
fails, does it fail the whole flow?

154
00:08:52.000 --> 00:08:55.990
Yes, if p1 here were to somehow reject,

155
00:08:55.990 --> 00:09:00.670
then every one of these then handlers
that does not listen to the reject.

156
00:09:00.670 --> 00:09:04.470
They automatically have an implied reject
handler that just simply propagates it

157
00:09:04.470 --> 00:09:05.570
to the next step.

158
00:09:05.570 --> 00:09:08.610
So, that rejection would propagate
all the way down the chain.

159
00:09:08.610 --> 00:09:10.830
Since we never listen for the rejection,

160
00:09:10.830 --> 00:09:13.720
it would sort of just sit
there waiting to be observed.

161
00:09:13.720 --> 00:09:17.290
It's not really been swallowed,
it's there.

162
00:09:17.290 --> 00:09:21.560
But we are not passing in a rejection
handler to listen for it.

163
00:09:21.560 --> 00:09:23.590
&gt;&gt; Speaker 7: Is that a new rejection

164
00:09:23.590 --> 00:09:27.140
as it propagates through the then's?
&gt;&gt; Kyle: Yes.

165
00:09:27.140 --> 00:09:28.210
&gt;&gt; Speaker 7: So each one will get

166
00:09:28.210 --> 00:09:30.370
a new one.
&gt;&gt; Kyle: Yes, the default

167
00:09:30.370 --> 00:09:34.120
rejection handler, because we're not
passing in any rejection handlers.

168
00:09:34.120 --> 00:09:38.820
The default rejection handler receives
the rejection from the previous step and

169
00:09:38.820 --> 00:09:41.570
rejects.
&gt;&gt; Speaker 7: With the same parameter.

170
00:09:41.570 --> 00:09:42.218
&gt;&gt; Kyle: Same value.

171
00:09:42.218 --> 00:09:42.938
&gt;&gt; Speaker 7: Same value.

172
00:09:42.938 --> 00:09:43.438
Okay.

