WEBVTT

1
00:00:00.069 --> 00:00:03.837
[MUSIC]

2
00:00:03.837 --> 00:00:09.088
&gt;&gt; Kyle: So
I'm now going to open an exercise

3
00:00:09.088 --> 00:00:14.164
four fixed version on this side and

4
00:00:14.164 --> 00:00:19.253
I'm going to open up exercise 6.

5
00:00:19.253 --> 00:00:24.036
And again, show you the side by
side way of dealing with ex6.

6
00:00:24.036 --> 00:00:29.368
So, we still have our same get
file the way we did with ex5.

7
00:00:29.368 --> 00:00:34.668
But how are we going to
handle this map reduce thing.

8
00:00:34.668 --> 00:00:41.492
Well, I'm gonna start
with a list of "file1",

9
00:00:41.492 --> 00:00:46.908
"file two", "file three", okay?

10
00:00:46.908 --> 00:00:52.170
Now I'm still going to do a .map call and
call .map, this is the array map.

11
00:00:52.170 --> 00:00:54.800
Plain old normal array pass it getFile.

12
00:00:56.320 --> 00:00:58.760
And the end of that I now
have an array of sequences.

13
00:00:58.760 --> 00:01:02.066
Does everybody catch that it's
not an array of Promises anymore.

14
00:01:02.066 --> 00:01:03.770
It's an array of async sequences.

15
00:01:05.410 --> 00:01:08.180
And I want to turn those sequences

16
00:01:08.180 --> 00:01:10.660
into something that I can
chain into a sequence.

17
00:01:10.660 --> 00:01:13.160
So I could do a .reduce call here and

18
00:01:13.160 --> 00:01:18.820
take the exact same approach of
chaining things in with .seq and .val.

19
00:01:18.820 --> 00:01:20.920
So I could do exactly the same
thing I did in EX-4 and

20
00:01:20.920 --> 00:01:22.850
it would work exactly the same way.

21
00:01:25.060 --> 00:01:29.220
But there's an even easier way of doing
it by recognizing the fact that one of

22
00:01:29.220 --> 00:01:34.320
the virtues again of a Promise library
giving you some extra sugar if you will.

23
00:01:34.320 --> 00:01:39.530
One of the sugars is that the asynquence
methods at least some of the methods.

24
00:01:40.610 --> 00:01:43.870
Many of the methods will
receive multiple items

25
00:01:43.870 --> 00:01:46.636
as if you called the thing multiple times.

26
00:01:46.636 --> 00:01:49.880
So with .seq I can pass
multiple sequences into it and

27
00:01:49.880 --> 00:01:53.000
I don't have to call seq once for
each sequence.

28
00:01:53.000 --> 00:01:55.500
I can pass multiple sequences into it.

29
00:01:55.500 --> 00:01:57.499
So if I have this set of sequences here.

30
00:01:59.470 --> 00:02:05.540
I could just pass them
directly into a .seq call.

31
00:02:07.120 --> 00:02:12.780
Now unfortunately, it's not as simple as
that, because seq doesn't take a raise,

32
00:02:12.780 --> 00:02:16.620
cuz there's no way to know whether or
not you want that array to be a value or

33
00:02:16.620 --> 00:02:18.800
whether you want it to be
an array of sequences.

34
00:02:18.800 --> 00:02:20.680
So it's not polymorphic in that sense but

35
00:02:20.680 --> 00:02:25.370
with the ES6 all we need is the dot
dot dot to spread out in array.

36
00:02:25.370 --> 00:02:28.608
So we are spreading out
an array of sequences.

37
00:02:47.903 --> 00:02:49.947
&gt;&gt; Kyle: But
there's one last little detail here,

38
00:02:49.947 --> 00:02:52.800
which is we're not sequencing
in those outputs yet are we?

39
00:02:54.510 --> 00:02:59.460
So we could sequence in the outputs into
these individual sequences by recognizing

40
00:02:59.460 --> 00:03:04.160
that another transformation needs
to occur as I need to take each

41
00:03:04.160 --> 00:03:07.940
single step sequence and
turn it into a two step sequence.

42
00:03:07.940 --> 00:03:12.180
A sequence of waiting for the event,
waiting for the text and printing it.

43
00:03:12.180 --> 00:03:15.970
So I'm gonna do another .map call,
not to reduce but

44
00:03:15.970 --> 00:03:22.230
another .map call which takes a sequence.

45
00:03:25.010 --> 00:03:28.770
I'll call it sq just for
shortness and clarity.

46
00:03:28.770 --> 00:03:32.340
It takes a sequence and
needs to do a transformation on it, right?

47
00:03:32.340 --> 00:03:33.712
What's our transformation?

48
00:03:40.641 --> 00:03:42.140
&gt;&gt; Kyle: That would be a transformation.

49
00:03:43.250 --> 00:03:46.921
That will push that sequence
into the bigger sequence and

50
00:03:46.921 --> 00:03:51.490
push it into the bigger sequence and
push it into the bigger sequence.

51
00:03:51.490 --> 00:03:56.790
To make that further clear we're

52
00:03:56.790 --> 00:04:01.520
going to pass these as a set of functions
in this isn't strictly necessary but

53
00:04:01.520 --> 00:04:06.370
now this is a set of functions
being pushed into the seq so

54
00:04:06.370 --> 00:04:10.740
that they will be called at
the appropriate time, okay?

55
00:04:10.740 --> 00:04:14.840
So this would they should work without
the function wrapper here but just to make

56
00:04:14.840 --> 00:04:20.580
it clear we can turn this into a array
of functions that produce a sequence.

57
00:04:20.580 --> 00:04:23.780
That's what sequenced
traditionally expects.

58
00:04:23.780 --> 00:04:26.586
Or we can just simply turn it
into an array of sequences.

59
00:04:29.900 --> 00:04:32.910
&gt;&gt; Kyle: And what's gonna happen if,
actually, so let me back up.

60
00:04:32.910 --> 00:04:37.240
So what's gonna happen if we turn this
into an array of independent sequences

61
00:04:37.240 --> 00:04:41.230
is that we might get file2
printed before file1 because

62
00:04:41.230 --> 00:04:43.440
these are still independent sequences.

63
00:04:43.440 --> 00:04:46.610
The way we make them dependent is to
defer with the function wrappers and

64
00:04:46.610 --> 00:04:49.001
that was the purpose for
the function, okay?

65
00:04:49.001 --> 00:04:56.196
We've turned an array of strings
into an array of sequences and

66
00:04:56.196 --> 00:05:01.760
then we turn an array of
sequences into an array of

67
00:05:01.760 --> 00:05:07.130
functions that will
return those sequences.

68
00:05:07.130 --> 00:05:10.440
&gt;&gt; Speaker 2: My question is can we not
implement that previous one with the same

69
00:05:10.440 --> 00:05:14.720
map and defer it when we print the output.

70
00:05:14.720 --> 00:05:18.530
&gt;&gt; Kyle: The problem with Promises,
the reason why that technique doesn't work

71
00:05:18.530 --> 00:05:24.795
over here with Promises, is that they
can't accept multiple functions.

72
00:05:24.795 --> 00:05:28.670
Asynquence can accept multiple functions
and it knows what to do with it.

73
00:05:28.670 --> 00:05:32.558
But you can't do that over here, so
you actually have to manually chain them

74
00:05:32.558 --> 00:05:35.064
together which is why we
need to the reduce call.

75
00:05:35.064 --> 00:05:37.724
Reduce may work better for
your brain and if so that's great,

76
00:05:37.724 --> 00:05:39.730
you can do that with asynquence.

77
00:05:39.730 --> 00:05:43.091
But I'm just trying to show you that
we can get rid of the complexity

78
00:05:43.091 --> 00:05:45.680
of reduce and simply do two map calls.

79
00:05:45.680 --> 00:05:48.810
Taking advantage of the fact that we can
access receive an array of functions.

80
00:05:55.970 --> 00:05:56.730
Did I lose everybody?

81
00:06:00.890 --> 00:06:06.310
Can I get a thumbs up if it's making
at least half sense, okay, right.

82
00:06:06.310 --> 00:06:08.240
I get that there's a little
bit of complexity here.

83
00:06:08.240 --> 00:06:11.550
Nothing that I'm presenting to you should
be like immediately you're a master on it.

84
00:06:11.550 --> 00:06:15.630
This is all presenting you stuff that it's
giving you the inspiration to go dig and

85
00:06:15.630 --> 00:06:17.540
learn these things and practice them.

86
00:06:17.540 --> 00:06:19.267
There's no substitute for

87
00:06:19.267 --> 00:06:23.778
the practice to get to the point
where the stuff is comfortable, okay?

88
00:06:28.924 --> 00:06:33.673
&gt;&gt; Kyle: All right, so
that's exercise five and

89
00:06:33.673 --> 00:06:37.970
six our next topic of discussion.

90
00:06:37.970 --> 00:06:40.500
My last point to make.

91
00:06:40.500 --> 00:06:45.850
If you want to know more about asynquence,
more than even the documentation, I wrote

92
00:06:45.850 --> 00:06:50.020
two or three part blog series on it and
you can read more about asynquence and

93
00:06:50.020 --> 00:06:53.660
its design principles and
ways to think about using it.

94
00:06:53.660 --> 00:06:55.890
So if you're interested in
learning more be my guest.

95
00:06:55.890 --> 00:06:56.750
Feel free to read about them.

96
00:06:57.910 --> 00:07:02.190
Over the break, there were several
questions where it felt like I might have

97
00:07:02.190 --> 00:07:08.500
created a little bit of confusion at the
end of our discussion on ex6, exercise 6.

98
00:07:08.500 --> 00:07:10.920
So I wanted to circle back to that and
make sure I was a little bit clear.

99
00:07:10.920 --> 00:07:14.420
That way,
we didn't leave the confusion around it.

100
00:07:14.420 --> 00:07:18.340
At the outset, let me say that everything
that we're about to discuss is really

101
00:07:18.340 --> 00:07:21.010
more about JavaScript and
much less about asynquence.

102
00:07:21.010 --> 00:07:23.350
So this isn't some
complexity about asynquence.

103
00:07:23.350 --> 00:07:27.950
It's just understanding the mechanisms
that are are happening in JavaScript.

104
00:07:27.950 --> 00:07:31.660
But what I've done is I've sketched out
what we were originally talking about,

105
00:07:31.660 --> 00:07:35.930
which was over here on the right,
you can see that I'm returning directly

106
00:07:35.930 --> 00:07:41.050
the sequence with the val
output put onto it.

107
00:07:41.050 --> 00:07:45.150
So any time you're having trouble
picturing or understanding or

108
00:07:45.150 --> 00:07:50.310
sussing out what a map or map and
reduce or whatever it is doing.

109
00:07:50.310 --> 00:07:53.240
I encourage you to unroll that in
your mind at least unroll a few

110
00:07:53.240 --> 00:07:57.060
steps of it in your mind even
type it out that way you have

111
00:07:57.060 --> 00:07:58.740
a clearer picture of what's happening.

112
00:07:58.740 --> 00:08:02.850
[COUGH] So what I've done is
do that over here on the left.

113
00:08:02.850 --> 00:08:05.960
I've unrolled what was happening over
there on the right when we directly

114
00:08:05.960 --> 00:08:09.060
returned the sequence and val output.

115
00:08:09.060 --> 00:08:12.960
You notice that I start out
with an array of strings.

116
00:08:12.960 --> 00:08:16.970
This map call changes it
into an array of sequences.

117
00:08:16.970 --> 00:08:21.090
This map call changes it into
an array of other sequences.

118
00:08:21.090 --> 00:08:22.990
Sequences which have .val and output but

119
00:08:22.990 --> 00:08:26.340
there are still three independent
sequences, which means they're

120
00:08:26.340 --> 00:08:30.620
going to be able to independently proceed
and independence is not what we want here.

121
00:08:30.620 --> 00:08:34.750
We're trying to create dependence between
them so that they sequence correctly.

122
00:08:34.750 --> 00:08:37.020
So if we visualize what's
happening over here on the left,

123
00:08:37.020 --> 00:08:41.850
you can see that on it's like passing
in three independent sequences.

124
00:08:41.850 --> 00:08:45.260
So each one of those is able to go to
its output as soon as it finishes,

125
00:08:45.260 --> 00:08:47.650
which means we're not coordinating

126
00:08:47.650 --> 00:08:51.290
the s1 output to happen before
the s2 output before the s3 output.

127
00:08:52.970 --> 00:08:56.240
That's really all JavaScript,
that's got nothing to do with asynquence.

128
00:08:56.240 --> 00:08:59.790
It's just that these things these three
things are independent right now.

129
00:08:59.790 --> 00:09:01.730
And we want them to be dependent.

130
00:09:03.350 --> 00:09:05.621
Also to point out this dot, dot, dot.

131
00:09:05.621 --> 00:09:09.292
Its happening after we've produced
an array so I went ahead and

132
00:09:09.292 --> 00:09:13.241
put in the wrapping parentheses here
to make it clear that dot dot dot

133
00:09:13.241 --> 00:09:16.470
being used here is spreading out an array.

134
00:09:16.470 --> 00:09:17.900
So we started out with an array and

135
00:09:17.900 --> 00:09:21.540
we spread it out as a series
of actual arguments.

136
00:09:21.540 --> 00:09:24.640
If the .seq method took an array.

137
00:09:24.640 --> 00:09:29.577
Then everything that we did over here
would be exactly the same except we'd take

138
00:09:29.577 --> 00:09:30.467
out the...

139
00:09:30.467 --> 00:09:34.419
Sequence doesn't take an array because
there's no way polymorphically to know

140
00:09:34.419 --> 00:09:37.673
whether or not you intend that to
be a single value passed through or

141
00:09:37.673 --> 00:09:41.350
whether you intend it to be an array
of values to be interpreted.

142
00:09:41.350 --> 00:09:44.410
So because of that I said earlier,

143
00:09:44.410 --> 00:09:49.040
I don't like polymorphism I don't like
confusing conventional polymorphism.

144
00:09:49.040 --> 00:09:51.570
So it's just not polymorphic in that way.

145
00:09:51.570 --> 00:09:53.529
Meaning you can't pass on an array.

146
00:09:53.529 --> 00:09:55.320
You have to pass them in separately.

147
00:09:55.320 --> 00:09:59.350
The old school way as you'll see in
the solution files to use that apply.

148
00:09:59.350 --> 00:10:03.260
I'm trying to help you understand how
ES6 helps makes these things clear.

149
00:10:03.260 --> 00:10:06.670
So that's a spreading out an array and
it should be clear now that,

150
00:10:06.670 --> 00:10:11.120
that's why this is not sufficient,
cuz these are three independent sequences

151
00:10:11.120 --> 00:10:14.420
that will output independently,
and that's not what we want.

152
00:10:14.420 --> 00:10:16.710
So if we go back to where we did end up,

153
00:10:16.710 --> 00:10:21.300
which is that we're returning a function
that returns those sequences.

154
00:10:21.300 --> 00:10:24.500
Then the equivalent of what's
happening when we unroll it

155
00:10:24.500 --> 00:10:27.940
is that there are three independent
functions being passed in.

156
00:10:27.940 --> 00:10:32.486
So what we've done is start with
an array of strings produce an array of

157
00:10:32.486 --> 00:10:36.661
sequences and now we're mapping
that to an array of functions.

158
00:10:36.661 --> 00:10:41.037
And then we of course dot dot dot spread
out the array of functions as individual

159
00:10:41.037 --> 00:10:42.307
function arguments.

160
00:10:42.307 --> 00:10:45.690
So I have a function here,
a function here, and a function here.

161
00:10:45.690 --> 00:10:50.880
Now we do need to understand something
specific about how asynquence works.

162
00:10:50.880 --> 00:10:54.270
It shouldn't be confusing but it's
something we should call out specifically.

163
00:10:54.270 --> 00:11:00.150
And that is that most of the methods
that take one or more functions.

164
00:11:00.150 --> 00:11:05.100
If you pass two or three functions like
we're passing three functions here.

165
00:11:05.100 --> 00:11:08.440
The API will run the first function and

166
00:11:08.440 --> 00:11:11.890
then go on to the second function only
after the first one finished and so forth.

167
00:11:11.890 --> 00:11:13.790
So does everything serially.

168
00:11:13.790 --> 00:11:16.650
So these three functions even though
they're being passed into the same

169
00:11:16.650 --> 00:11:20.840
sequence method are still going to run
this one entirely to its completion,

170
00:11:20.840 --> 00:11:23.530
which means wait for
that sequence to finish.

171
00:11:23.530 --> 00:11:27.780
And then, run this function and
run that sequence entirely to completion.

172
00:11:27.780 --> 00:11:30.660
And then, this function and
that sequence entirely to completion.

173
00:11:30.660 --> 00:11:35.010
So that is the way to unroll what we've
produced over here on the right-hand side,

174
00:11:35.010 --> 00:11:37.440
is that we've created
a list of functions and

175
00:11:37.440 --> 00:11:40.340
spread those functions
out to the sequence call.

176
00:11:40.340 --> 00:11:45.768
And this, if that's confusing passing
multiple functions into .seq,

177
00:11:45.768 --> 00:11:51.296
you can also alternatively visualize
that as three separate .seq calls.

178
00:11:58.004 --> 00:12:00.540
&gt;&gt; Kyle: So
hopefully that makes it clearer.

179
00:12:00.540 --> 00:12:03.560
But each one of those is going
to happen in sequence, serially.

180
00:12:05.790 --> 00:12:08.370
Hopefully, that cleared up some of the
confusion that we might have wrought by

181
00:12:08.370 --> 00:12:12.490
trying to go through quickly
the throwaway parts of the solution for

182
00:12:12.490 --> 00:12:17.070
exercise six, and it makes it more
clear why we ended up over here.

183
00:12:17.070 --> 00:12:19.100
And again just to refrain.

184
00:12:19.100 --> 00:12:23.410
The vast majority of that is understanding
using JavaScript mechanisms.

185
00:12:23.410 --> 00:12:26.770
It has very,
very little to do with asynquence itself.

186
00:12:26.770 --> 00:12:31.320
The only part that's asynquence specific
is that it expects individual values and

187
00:12:31.320 --> 00:12:32.230
it will do them serially.

