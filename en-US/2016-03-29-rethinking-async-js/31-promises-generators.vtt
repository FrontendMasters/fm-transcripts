WEBVTT

1
00:00:00.000 --> 00:00:03.778
[MUSIC]

2
00:00:03.778 --> 00:00:06.703
&gt;&gt; Kyle: Now you notice that when
I call the getData function,

3
00:00:06.703 --> 00:00:08.790
it has no return value.

4
00:00:08.790 --> 00:00:10.960
So I'm technically yielding out undefined.

5
00:00:13.880 --> 00:00:17.250
That doesn't cause a problem
here because we have the getData

6
00:00:17.250 --> 00:00:22.180
wired specifically to call it.next.

7
00:00:22.180 --> 00:00:25.588
But there's an implementation
change that we can make,

8
00:00:25.588 --> 00:00:29.570
which is gonna reconfigure the way
all of this stuff is happening.

9
00:00:29.570 --> 00:00:33.770
From the inside, it's gonna look exactly
the same, but what we can observe here,

10
00:00:33.770 --> 00:00:37.790
which is actually kind of good that some
of these questions were being asked from

11
00:00:37.790 --> 00:00:38.346
the chat.

12
00:00:38.346 --> 00:00:43.057
Because what we can observe here is
we're still every bit as susceptible to

13
00:00:43.057 --> 00:00:46.000
callback hell as we always were,
aren't we?

14
00:00:46.000 --> 00:00:48.180
At least one of the things
of callback hell.

15
00:00:48.180 --> 00:00:50.000
We have an inversion of control issue,
don't we?

16
00:00:51.010 --> 00:00:55.150
Somebody can call it.next in a way
that we're not expecting and

17
00:00:55.150 --> 00:00:56.000
screw everything up.

18
00:00:59.250 --> 00:01:01.210
We still have an inversion
of control issue.

19
00:01:01.210 --> 00:01:05.370
We've solved the non-local,
non-sequential reasonability issue.

20
00:01:05.370 --> 00:01:09.510
But we have no solution
currently in this code base for

21
00:01:09.510 --> 00:01:12.340
the inversion of control
callback hell issue.

22
00:01:14.160 --> 00:01:15.020
So guess what we're gonna do?

23
00:01:16.680 --> 00:01:20.099
We're gonna put promises
together with generators.

24
00:01:21.720 --> 00:01:25.840
Promises are gonna solve our
inversion of control issue.

25
00:01:25.840 --> 00:01:27.090
Solve our trust issue.

26
00:01:27.090 --> 00:01:29.400
Solve our flow control control issue.

27
00:01:30.470 --> 00:01:36.140
Generators are gonna solve our non-local,
non-sequential reasonability issue.

28
00:01:36.140 --> 00:01:40.450
And the key recognition for this,
instead of yielding an undefined value,

29
00:01:40.450 --> 00:01:44.720
we're going to wire this up so
that we are going to yield a promise.

30
00:01:46.560 --> 00:01:48.491
Now I want you to think about this
conceptually before I show you

31
00:01:48.491 --> 00:01:49.190
any code, look at me.

32
00:01:50.540 --> 00:01:54.639
Inside of my code when I say yield and
I make an Ajax call,

33
00:01:54.639 --> 00:02:00.241
if that Ajax call returns me a promise for
it, am I yielding out its promise?

34
00:02:00.241 --> 00:02:04.296
Yes, so who's gonna get the promise
that I just yielded out?

35
00:02:08.144 --> 00:02:12.300
&gt;&gt; Kyle: Whoever is driving my
generator with its it.next call, right?

36
00:02:12.300 --> 00:02:16.000
So imagine there's some plumbing
somewhere which is gonna

37
00:02:16.000 --> 00:02:17.340
be in a framework or a library.

38
00:02:17.340 --> 00:02:20.880
But there's some plumbing
somewhere that says it.next, and

39
00:02:20.880 --> 00:02:23.460
what it gets back is a promise.

40
00:02:25.000 --> 00:02:26.180
So what's it gonna do with that promise?

41
00:02:27.640 --> 00:02:32.630
It's gonna say promise.then it.next.

42
00:02:32.630 --> 00:02:33.710
So here's how this works.

43
00:02:33.710 --> 00:02:37.960
We yield out a promise,
pausing and then we say .then and

44
00:02:37.960 --> 00:02:43.290
when the promise resolves,
we resume the generator.

45
00:02:43.290 --> 00:02:47.649
And then we yield and
pause and then and resume and

46
00:02:47.649 --> 00:02:50.632
yield and pause and then resume.

47
00:02:50.632 --> 00:02:52.017
That's how we make that magic work.

48
00:02:52.017 --> 00:02:55.800
That's how we wire promises
into the generator.

49
00:02:55.800 --> 00:02:59.770
We yield out promises and then
the promises resume the generator and when

50
00:02:59.770 --> 00:03:04.294
the promise has some value to pass along,
it passes it along to the it.next call.

51
00:03:05.980 --> 00:03:09.369
So that plumbing, that circular
plumbing that I'm talking about.

52
00:03:09.369 --> 00:03:12.913
You could write a utility to do that for
your generators.

53
00:03:12.913 --> 00:03:17.525
It's about 25, 30 lines of code to handle
all the little nuances in error handling

54
00:03:17.525 --> 00:03:18.926
and all that other stuff.

55
00:03:18.926 --> 00:03:19.610
You could do it.

56
00:03:21.100 --> 00:03:25.198
It's in my book, you can see the snippet
right there if you want to write your own.

57
00:03:25.198 --> 00:03:26.163
But you shouldn't have to.

58
00:03:26.163 --> 00:03:28.348
I want you to understand
the concept of what it's doing.

59
00:03:28.348 --> 00:03:32.058
It's yielding out a promise and resuming
a generator and yielding out a promise.

60
00:03:32.058 --> 00:03:34.357
I want you to understand that concept.

61
00:03:34.357 --> 00:03:38.634
But it's not practical for each of
you to go invent your own driver for

62
00:03:38.634 --> 00:03:39.900
these generators.

63
00:03:41.700 --> 00:03:45.876
So you're gonna need one that's
built into a library and

64
00:03:45.876 --> 00:03:50.190
it turns out asynquence has one,
Q has one, co has one.

65
00:03:50.190 --> 00:03:52.090
I mean, all the major libraries,

66
00:03:52.090 --> 00:03:55.050
they all have this,
cuz they all know that this is the most

67
00:03:55.050 --> 00:03:58.990
important pattern to land in JavaScript
programming in a really long time.

68
00:03:58.990 --> 00:04:01.040
So they all have these drivers,
mine's called runner.

69
00:04:01.040 --> 00:04:06.113
As you see on line 8, he passed
the generator to the runner method.

70
00:04:06.113 --> 00:04:08.948
And it automatically knows that
if you yield out a sequence or

71
00:04:08.948 --> 00:04:11.949
yield out a promise, it automatically
knows to wait for that and

72
00:04:11.949 --> 00:04:14.242
then resume and then wait for
it and then resume.

73
00:04:19.964 --> 00:04:24.317
&gt;&gt; Kyle: The main point of this
slide is to illustrate that

74
00:04:24.317 --> 00:04:29.094
the value of asynquence is
that a generator driving,

75
00:04:29.094 --> 00:04:34.839
like we're talking about,
is really just a step in a sequence.

76
00:04:36.450 --> 00:04:40.670
So I can put it right in the middle of
another sequence if I really needed to.

77
00:04:40.670 --> 00:04:44.630
That's why on line 16 I have another step
in my sequence that only fires after

78
00:04:44.630 --> 00:04:46.170
the generator is fully completed.

79
00:04:48.330 --> 00:04:52.329
So once you wrap your head around
the abstraction that asynquence provides,

80
00:04:52.329 --> 00:04:53.815
the sequence abstraction.

81
00:04:53.815 --> 00:04:56.708
Every single step in your sequence
becomes whatever you want it to be.

82
00:04:56.708 --> 00:05:00.773
Whether it's a generator run, or
a promise, or a reactive sequence or

83
00:05:00.773 --> 00:05:01.465
whatever.

84
00:05:12.696 --> 00:05:14.830
&gt;&gt; Kyle: This is why generators are so
powerful.

85
00:05:14.830 --> 00:05:19.917
Yeah, should have a few of those,
[SOUND] what?

86
00:05:19.917 --> 00:05:25.445
This is why generators are so powerful
cuz they completely change the game for

87
00:05:25.445 --> 00:05:28.089
how we write our asynchronous code.

88
00:05:28.089 --> 00:05:31.263
Remember what I said at the very beginning
of our workshop last time we were

89
00:05:31.263 --> 00:05:31.779
together?

90
00:05:31.779 --> 00:05:35.282
I said we're not talking about
introducing new functionality,

91
00:05:35.282 --> 00:05:39.380
we're talking about introducing
new expressivity, why?

92
00:05:39.380 --> 00:05:43.783
Because bugs happen when your brain
doesn't work like the code that you're

93
00:05:43.783 --> 00:05:44.408
writing.

94
00:05:44.408 --> 00:05:47.192
So we're trying to come
up with a pattern for

95
00:05:47.192 --> 00:05:50.970
writing code that works more
closely like our brains work.

96
00:05:50.970 --> 00:05:55.024
Do you see why this is so much better than
the callback hell that we've talked about

97
00:05:55.024 --> 00:05:58.038
or even the promise chains or
the thunk nesting or whatever?

98
00:05:58.038 --> 00:06:02.100
This is so much better because it
works the way our brains work.

99
00:06:03.130 --> 00:06:06.100
And because we weave in promises,
we get all the trustability

100
00:06:06.100 --> 00:06:08.670
the lack of inversion of control,
all that stuff's fixed.

101
00:06:08.670 --> 00:06:14.370
So we put those two together and we get,
finally, a solution a callback hell.

102
00:06:18.778 --> 00:06:23.612
&gt;&gt; Kyle: Now, this pattern is so
important that they've already

103
00:06:23.612 --> 00:06:28.550
advanced a proposal that's
a virtual certainty.

104
00:06:28.550 --> 00:06:32.966
They've advanced a proposal for
the next version of JavaScript to create

105
00:06:32.966 --> 00:06:37.680
another new type of function,
called an async function.

106
00:06:37.680 --> 00:06:39.680
That does exactly what I just showed you,
but

107
00:06:39.680 --> 00:06:42.460
without any library needing to drive it.

108
00:06:42.460 --> 00:06:43.412
Here's what it's gonna look like.

109
00:06:46.795 --> 00:06:50.540
&gt;&gt; Kyle: Instead of having
something like ASQ().runner, and

110
00:06:50.540 --> 00:06:56.479
passing in your generator, and then doing
a bunch of yield ajax(..) calls like that.

111
00:06:59.510 --> 00:07:03.475
That's what works now cuz you have
a library that will do all the plumbing

112
00:07:03.475 --> 00:07:03.999
for you.

113
00:07:03.999 --> 00:07:07.926
This new proposal says,
take out the library,

114
00:07:07.926 --> 00:07:11.077
just make an asynchronous function,

115
00:07:14.045 --> 00:07:17.600
&gt;&gt; Kyle: Like call it foo, for example.

116
00:07:17.600 --> 00:07:19.907
And just call foo.

117
00:07:19.907 --> 00:07:22.790
And now we use await instead of yield.

118
00:07:22.790 --> 00:07:25.924
Anybody in here have experience with C#?

119
00:07:25.924 --> 00:07:30.762
C# programmers, if you're listening in,
you'll recognize the async await.

120
00:07:30.762 --> 00:07:33.100
This is exactly async await from C#.

121
00:07:33.100 --> 00:07:35.380
We're codifying it into JavaScript.

122
00:07:35.380 --> 00:07:38.840
So it's exactly that pattern that I talked
about, about yielding a promise out, and

123
00:07:38.840 --> 00:07:40.290
resuming the generator.

124
00:07:40.290 --> 00:07:42.417
That old conceptual model
that we just talked about.

125
00:07:42.417 --> 00:07:46.292
But now, we don't even need a library, we
can just express it directly with syntax.

126
00:07:49.580 --> 00:07:53.880
&gt;&gt; Kyle: I'm 100% convinced,
this is the new baseline for

127
00:07:53.880 --> 00:07:58.844
understanding how to write
asynchronous code in JavaScript.

128
00:07:58.844 --> 00:08:02.130
This is where we all have to get to.

129
00:08:02.130 --> 00:08:04.030
I said the last time we were together.

130
00:08:04.030 --> 00:08:05.592
You don't get anything
else out of the workshop,

131
00:08:05.592 --> 00:08:08.010
you gotta get to this point
cuz it's the new baseline.

132
00:08:08.010 --> 00:08:12.750
It's the new level of competency that we
all have to wrap our brains around and

133
00:08:12.750 --> 00:08:16.020
is it gonna come like that overnight?

134
00:08:16.020 --> 00:08:18.390
No, it's gonna take some practice and
some work.

135
00:08:20.130 --> 00:08:22.191
But it's just so much better, it's so

136
00:08:22.191 --> 00:08:25.387
game changing compared to what
we've been doing all along.

137
00:08:25.387 --> 00:08:27.926
But the value,
I hope the value is evident,

138
00:08:27.926 --> 00:08:30.134
the value should be clearly worth it.

139
00:08:32.240 --> 00:08:32.874
&gt;&gt; Kyle: Yes?

140
00:08:32.874 --> 00:08:34.579
&gt;&gt; Speaker 2: They're asking
about the quality and

141
00:08:34.579 --> 00:08:37.722
speed of generators in transpiled code,
&gt;&gt; Kyle: [LAUGH]

142
00:08:37.722 --> 00:08:39.043
&gt;&gt; Speaker 2: Is it really slow?

143
00:08:39.043 --> 00:08:43.719
&gt;&gt; Kyle: [LAUGH] Transpiled
code is not great code.

144
00:08:43.719 --> 00:08:47.750
But transpiled code is no worse and

145
00:08:47.750 --> 00:08:52.893
often better than all
the really crappy code

146
00:08:52.893 --> 00:08:57.900
that you've been writing for 20 years.

147
00:08:59.250 --> 00:09:00.950
So is the transpiled code good?

148
00:09:01.970 --> 00:09:05.900
It's not as good as ES6, but it's probably
at least as good, if not much better,

149
00:09:05.900 --> 00:09:08.442
than the stuff that you
would have written yourself.

150
00:09:16.783 --> 00:09:20.426
&gt;&gt; Speaker 3: Is there a polyfill for
async in await?

151
00:09:20.426 --> 00:09:24.152
&gt;&gt; Kyle: These are syntax, so
they're not polyfill, they're transpiled.

152
00:09:24.152 --> 00:09:29.672
Babel does support ES7 async await.

153
00:09:36.121 --> 00:09:38.190
&gt;&gt; Kyle: Just as a quick side note.

154
00:09:38.190 --> 00:09:41.010
I like the async await syntax.

155
00:09:41.010 --> 00:09:44.060
I like the non-library version of this.

156
00:09:44.060 --> 00:09:47.210
Because any time we can do something
natively without a library.

157
00:09:47.210 --> 00:09:48.070
Yay, that's awesome.

158
00:09:49.720 --> 00:09:53.670
But there are some caveats that you
should be aware of with async functions

159
00:09:53.670 --> 00:09:56.820
that are not true of generators.

160
00:09:56.820 --> 00:09:59.930
So it's not just syntactic sugar.

161
00:10:01.530 --> 00:10:05.855
One of the major things, you member we
talked about cancelable promises earlier,

162
00:10:05.855 --> 00:10:07.723
and I said I'm not a big fan of them?

163
00:10:07.723 --> 00:10:12.935
Here's where they come from because
we're gonna make async functions,

164
00:10:12.935 --> 00:10:15.624
foo, when we call an async function,

165
00:10:15.624 --> 00:10:21.191
it's gonna return us a promise that lets
us know when that function finishes.

166
00:10:21.191 --> 00:10:26.149
An async function produces a promise that
gets resolved when the async function

167
00:10:26.149 --> 00:10:27.410
finishes, right?

168
00:10:28.490 --> 00:10:32.690
But here's the problem,
what if that async function is running and

169
00:10:32.690 --> 00:10:36.860
then some other external
influence says I need to abort.

170
00:10:39.070 --> 00:10:40.918
I need to cancel whatever it's doing.

171
00:10:40.918 --> 00:10:45.080
Maybe the asynch function is making some
really resource intensive long running

172
00:10:45.080 --> 00:10:48.998
Ajax call and downloading lots of records
and something else happens in your

173
00:10:48.998 --> 00:10:51.951
application and
you don't want that to happen any more.

174
00:10:51.951 --> 00:10:58.049
From the outside world, how do you
cancel a running async function?

175
00:10:59.905 --> 00:11:02.114
&gt;&gt; Kyle: The answer is you can't.

176
00:11:02.114 --> 00:11:05.884
There is no cancel method on
a running async function.

177
00:11:05.884 --> 00:11:07.620
So you know what they want to do?

178
00:11:07.620 --> 00:11:11.110
They wanna make the promise that
comes back from an async function,

179
00:11:11.110 --> 00:11:14.130
a cancellable promise so
that you can cancel the promise.

180
00:11:14.130 --> 00:11:19.510
And that will send the cancellation
message magically into the async function.

181
00:11:19.510 --> 00:11:23.170
This is an unbelievably, ridiculously,
stupid idea, in my opinion.

182
00:11:24.620 --> 00:11:28.580
They ought to have async functions return
something else that lets you control it

183
00:11:28.580 --> 00:11:30.570
and listen to the promise.

184
00:11:30.570 --> 00:11:32.590
I think it's a terrible idea
what they've come up with but

185
00:11:32.590 --> 00:11:34.950
that's what's almost
certainly gonna happen.

186
00:11:37.410 --> 00:11:42.060
Generators don't suffer that problem
cuz generators don't return promises,

187
00:11:42.060 --> 00:11:43.235
generators return iterators.

188
00:11:44.520 --> 00:11:46.080
Iterators give you control.

189
00:11:46.080 --> 00:11:47.380
I showed you the .next but

190
00:11:47.380 --> 00:11:53.170
there's also a .return which will
abort a generator in mid run.

191
00:11:53.170 --> 00:11:57.850
And there's a .throw, which can manually
send an error into a generator.

192
00:11:57.850 --> 00:12:01.770
So generators give you more control from
the outside than async functions do.

193
00:12:03.480 --> 00:12:05.110
It is for that reason,

194
00:12:05.110 --> 00:12:09.120
personally, I'm probably gonna keep
using generators most of the time.

195
00:12:10.240 --> 00:12:13.791
Every once in a while if there's a really
lightweight asynchronous process that I

196
00:12:13.791 --> 00:12:17.302
don't care about any external control,
I'll probably use an async function.

197
00:12:17.302 --> 00:12:20.514
But most of the time I'm probably
gonna keep using generators.

198
00:12:23.190 --> 00:12:27.717
&gt;&gt; Kyle: It's my own take because
I don't think cancellation is

199
00:12:27.717 --> 00:12:30.711
an important thing, a lot of times.

200
00:12:30.711 --> 00:12:33.538
And I don't think this design has
properly taken that into account.

201
00:12:33.538 --> 00:12:36.348
So that's my own little
personal take on it but

202
00:12:36.348 --> 00:12:40.392
to circle back to what we've been
talking about with asynquence.

203
00:12:42.294 --> 00:12:45.020
&gt;&gt; Kyle: I showed you that you
could pass in a generator.

204
00:12:47.470 --> 00:12:50.680
Guess what,
you can also pass in an async function.

205
00:12:52.280 --> 00:12:57.970
So if you did want to change, you can
do that if you want, it's totally fine.

206
00:12:57.970 --> 00:13:00.740
Asynquence knows how to handle an
asynchronous function just like it knows

207
00:13:00.740 --> 00:13:01.540
how to handle a generator.

