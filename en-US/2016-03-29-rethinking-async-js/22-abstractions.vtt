WEBVTT

1
00:00:00.000 --> 00:00:03.677
[MUSIC]

2
00:00:03.677 --> 00:00:06.109
&gt;&gt; Kyle: Promises,
pretty good at their core.

3
00:00:06.109 --> 00:00:10.740
But there's an awful lot of
Abstractions that were missing.

4
00:00:10.740 --> 00:00:14.730
And Abstractions are what are one of the
powerful tools that we use to make higher

5
00:00:14.730 --> 00:00:18.960
and higher order patterns that let us be
more and more expressive with our code.

6
00:00:18.960 --> 00:00:21.710
I want to talk to you about a few
Abstractions is the first couple

7
00:00:21.710 --> 00:00:26.380
are things that are built in directly
into the promise API in the browser.

8
00:00:26.380 --> 00:00:29.656
Then we'll talk about other Abstractions
that are available to us through third

9
00:00:29.656 --> 00:00:34.190
party and libraries that wrap and build on
top of promises with other Abstractions..

10
00:00:35.860 --> 00:00:37.325
The first one we can talk
about is Promise.all.

11
00:00:37.325 --> 00:00:41.649
Promise,all takes an array of promises.

12
00:00:41.649 --> 00:00:46.501
As you can see, you have an array
of promises that are coming

13
00:00:46.501 --> 00:00:51.620
from these doTask methods,
doTask1a, 1b and 1c.

14
00:00:51.620 --> 00:00:54.480
Now what it's going to do is
obviously all of those functions

15
00:00:54.480 --> 00:00:57.410
are being call which means
they're all producing promises.

16
00:00:57.410 --> 00:01:00.050
We can imagine that that's like
three independent AJAX calls

17
00:01:00.050 --> 00:01:00.830
happening all at once.

18
00:01:02.260 --> 00:01:04.470
And then we're going to wait for
all of those to finish and

19
00:01:04.470 --> 00:01:11.209
you'll notice that we get an array of
those results, passed into us on line 6.

20
00:01:12.430 --> 00:01:16.460
There array of results, will have
the array of results from each of those

21
00:01:16.460 --> 00:01:19.780
promises in the order they were
listed in the original array.

22
00:01:19.780 --> 00:01:21.740
Regardless of what order they finish in,

23
00:01:21.740 --> 00:01:23.890
they're in a predictable
order which is request order.

24
00:01:25.990 --> 00:01:29.470
This is allowing us to say,
I don't want to just wait for one promise.

25
00:01:29.470 --> 00:01:32.120
I've got three that need
to happen in parallel.

26
00:01:32.120 --> 00:01:35.109
And then I need to wait for
all of them to finish before moving on.

27
00:01:35.109 --> 00:01:39.949
You notice the Promise.all is giving us
a promise which were then [INAUDIBLE]

28
00:01:39.949 --> 00:01:41.091
off of on line 6.

29
00:01:41.091 --> 00:01:46.701
And what we're getting as the completion
result from that previous promise,

30
00:01:46.701 --> 00:01:51.546
is an array of all the results and
here I'm just a silly illustration

31
00:01:51.546 --> 00:01:55.760
I'm doing Math.max across
those three results.

32
00:01:55.760 --> 00:01:57.310
We might have been task 1a, 1b and

33
00:01:57.310 --> 00:01:59.650
1c might have been to
generate some random number.

34
00:01:59.650 --> 00:02:03.724
We're gonna ask for the maximum of
the three numbers that was generated and

35
00:02:03.724 --> 00:02:04.565
then return and

36
00:02:04.565 --> 00:02:08.977
pass that in to doTask2 and that returns
a promise which we can of course change.

37
00:02:08.977 --> 00:02:13.531
The point that we're making here, is that
each step in a promise chain can be as

38
00:02:13.531 --> 00:02:18.085
simple as, chaining in another promise,
can be as simple as just an immediate

39
00:02:18.085 --> 00:02:21.535
value that we return or
it could be something more complex,

40
00:02:21.535 --> 00:02:25.410
a higher order abstraction like
a Promise.call that we see here.

41
00:02:26.930 --> 00:02:31.050
Old school computer science terminology
we use for this we call this a gate.

42
00:02:32.380 --> 00:02:34.660
Whenever you have multiple
things happening,

43
00:02:34.660 --> 00:02:37.230
you do not know what order
they're gonna finish in, but

44
00:02:37.230 --> 00:02:40.290
all of them need to finish before
moving on, we call that a gate.

45
00:02:41.460 --> 00:02:44.530
The API here is Promise.all but
you can think of that as a gate.

46
00:02:46.560 --> 00:02:50.490
Now if any one of those three
promises creates a rejection,

47
00:02:50.490 --> 00:02:53.380
the main problem the one that
we're chaining off of on line six,

48
00:02:53.380 --> 00:02:55.890
that main promises immediately rejected.

49
00:02:55.890 --> 00:02:59.610
So .all requires successful completion.

50
00:02:59.610 --> 00:03:03.430
You could think of an abstraction where I
don't care about successful completion,

51
00:03:03.430 --> 00:03:06.780
I just need all of them to finish
either positively or negatively.

52
00:03:06.780 --> 00:03:08.970
And that would be a different abstraction.

53
00:03:08.970 --> 00:03:11.750
You can start to think there is actually
quite a few different abstractions that we

54
00:03:11.750 --> 00:03:12.650
can invent.

55
00:03:12.650 --> 00:03:16.740
You might invent an abstraction like I
want to be notified when the first one

56
00:03:16.740 --> 00:03:21.990
finishes or
when the first one finishes or fails.

57
00:03:21.990 --> 00:03:25.070
And that abstraction,
the one I just mention, which is

58
00:03:25.070 --> 00:03:29.900
I want to be notified whenever somebody
finishes or fails, that's called a race.

59
00:03:31.180 --> 00:03:35.920
We also have a utility called
Promise.race, takes an array of promises.

60
00:03:35.920 --> 00:03:40.704
And its definition is to say, I'm going to
wait for any resolution, whether that's

61
00:03:40.704 --> 00:03:44.757
a fulfillment or a rejection,
any resolution of any of these promises,

62
00:03:44.757 --> 00:03:47.813
whichever one crosses
the finish line first wins, and

63
00:03:47.813 --> 00:03:49.561
everybody else gets ignored.

64
00:03:49.561 --> 00:03:53.260
That's what Promise.race is about.

65
00:03:53.260 --> 00:03:57.290
Here I'm showing a timeout idiom,
because we didn't answer earlier.

66
00:03:57.290 --> 00:03:58.630
I kind of glossed over it,

67
00:03:58.630 --> 00:04:02.290
hoping that you would either ask or
at least remember at this point.

68
00:04:02.290 --> 00:04:04.850
We didn't ask, well, what happens
if my promise never gets resolved?

69
00:04:06.200 --> 00:04:09.475
The way you handle that is the way we
handle any asynchronous task that may

70
00:04:09.475 --> 00:04:12.387
never complete, which is to set
up some maximum timeout for it.

71
00:04:12.387 --> 00:04:17.132
Here, what I'm doing is I've got p on
line 4 representing the promise that I

72
00:04:17.132 --> 00:04:17.941
care about.

73
00:04:17.941 --> 00:04:23.053
And then I'm creating another promise on
line 5, which I don't really care about,

74
00:04:23.053 --> 00:04:27.400
it's just set up as a time bomb,
that after three seconds, it rejects.

75
00:04:29.480 --> 00:04:31.560
One of two things is going
to occur in this scenario.

76
00:04:31.560 --> 00:04:34.880
Either my promise is going to finish
in less than three seconds, and

77
00:04:34.880 --> 00:04:40.550
I'm going to get its result, and move on
to line 11, with a success on line 12, or

78
00:04:40.550 --> 00:04:44.790
the rejection promise is going to finish
first, in which case the other promise,

79
00:04:44.790 --> 00:04:47.540
whether it ever finishes or not,
we're going to ignore it, and

80
00:04:47.540 --> 00:04:51.820
we're going to move to line 13,
because this was a promise rejection.

81
00:04:51.820 --> 00:04:57.430
We're going to handle a time out error.
&gt;&gt; Speaker 2: If the time out happens,

82
00:04:57.430 --> 00:05:01.840
what happens to the original promise,
does it get garbage collected, or

83
00:05:01.840 --> 00:05:02.470
does it-
&gt;&gt; Kyle: Yes.

84
00:05:02.470 --> 00:05:03.830
&gt;&gt; Speaker 2: Stay around?

85
00:05:03.830 --> 00:05:06.350
It would potentially get flushed.
&gt;&gt; Kyle: Yep.

86
00:05:06.350 --> 00:05:07.260
&gt;&gt; Speaker 2: Okay, cuz there's no

87
00:05:07.260 --> 00:05:08.483
reference to it anymore.
&gt;&gt; Kyle: Yep, yep.

88
00:05:08.483 --> 00:05:11.732
Promise.race throws away anything,
once it finishes,

89
00:05:11.732 --> 00:05:16.812
it throws away all its references.
&gt;&gt; Kyle: [COUGH] Now this is not

90
00:05:16.812 --> 00:05:23.500
a terribly graceful piece of code to write
every time you wanna time out a promise.

91
00:05:23.500 --> 00:05:26.150
That would be nice if there was
some higher order obstruction for

92
00:05:26.150 --> 00:05:29.050
timing out promises, and
it turns out there is.

93
00:05:29.050 --> 00:05:32.603
Virtually every promise library out there
has something for timing out promises, and

94
00:05:32.603 --> 00:05:35.962
out of the covers they're doing something
roughly like what I'm talking about or

95
00:05:35.962 --> 00:05:40.492
setting up a race basically
&gt;&gt; Kyle: Promise.all and

96
00:05:40.492 --> 00:05:47.630
Promise.race shift natively with
the API that comes in the browser.

97
00:05:47.630 --> 00:05:51.950
But we can already start, and some of your
brains may already start to be thinking,

98
00:05:51.950 --> 00:05:54.530
what about this abstraction,
what about this abstraction?

99
00:05:54.530 --> 00:05:57.550
What about the one where it's
like I only care about the first

100
00:05:57.550 --> 00:06:00.180
one to successfully cross the finish line.

101
00:06:00.180 --> 00:06:02.820
We might call instead of calling that
a race we might call that first.

102
00:06:04.010 --> 00:06:07.010
There's an abstraction for that and
libraries provide those abstractions.

103
00:06:08.020 --> 00:06:13.340
What if I only care about the last one,
last one wins or we could call .last.

104
00:06:13.340 --> 00:06:17.000
What if I want to know
that all of them rejected.

105
00:06:17.000 --> 00:06:19.940
It's the inverse of Promise.all,
instead of all of them succeeding,

106
00:06:19.940 --> 00:06:21.470
I want to know of all of them reject.

107
00:06:23.000 --> 00:06:25.970
We could call that .none so
we could start to invent

108
00:06:25.970 --> 00:06:30.300
dozens of different abstractions that can
help us and these abstractions become Lego

109
00:06:30.300 --> 00:06:33.760
building blocks that we build our
more complex flow control center.

110
00:06:33.760 --> 00:06:38.520
Every single step in our chain can be
one of these abstracted steps instead of

111
00:06:38.520 --> 00:06:40.890
just a single,
if then sort of abstraction.

112
00:06:43.480 --> 00:06:45.770
You want to look for
those common abstractions and

113
00:06:45.770 --> 00:06:48.600
use them just like in functional
programming you wanna look for

114
00:06:48.600 --> 00:06:52.600
things like map and reduce and develop
an instinct for not reinventing the wheel,

115
00:06:52.600 --> 00:06:56.290
but using the wheel that's already been
invented and knowing how it works.

116
00:06:56.290 --> 00:06:59.030
You want to develop that same
instinct around promise abstractions.

117
00:07:00.320 --> 00:07:03.146
Rather than trying to invent your own
patterns, look for ones that have already

118
00:07:03.146 --> 00:07:07.780
been established and well worn.
&gt;&gt; Kyle: All right,

119
00:07:07.780 --> 00:07:14.005
more reading about promises, I promised,
I promised you, pun unintended.

120
00:07:14.005 --> 00:07:17.095
I promised you earlier that I
had written a bunch about this,

121
00:07:17.095 --> 00:07:21.895
this link at the top link is the first in
a five part blog post series that I wrote.

122
00:07:21.895 --> 00:07:25.160
It's pretty long, all about promises.

123
00:07:25.160 --> 00:07:28.090
And I talk about error handling and
all kinds of other things.

124
00:07:28.090 --> 00:07:29.720
I talk about cancelable promises.

125
00:07:29.720 --> 00:07:30.480
It's all in there.

126
00:07:30.480 --> 00:07:33.890
If you wanna read about promises in depth,
that's a blog post series.

127
00:07:33.890 --> 00:07:38.860
I've written about promises extensively
in the book series, both in the Async and

128
00:07:38.860 --> 00:07:40.990
performance book,
as well as the ES6 books, so

129
00:07:40.990 --> 00:07:42.300
there's plenty to read there about them.

130
00:07:43.750 --> 00:07:47.546
And if you want to use
promises in straight up native

131
00:07:47.546 --> 00:07:51.740
form in a polyfill fashion that is
to use them in older browsers but

132
00:07:51.740 --> 00:07:54.330
use them where there's no additions or
anything.

133
00:07:54.330 --> 00:07:56.660
I wrote a polyfill for
promises called native-promise-only.

134
00:07:57.930 --> 00:08:01.360
There are about a dozen or so
of this polyfills out there.

135
00:08:01.360 --> 00:08:04.610
One word of caution on looking for
promise polyfills.

136
00:08:04.610 --> 00:08:09.430
Something that kind of bothers me is that
there's quite a few libraries out there

137
00:08:09.430 --> 00:08:14.660
which claim to be promise polyfills,
really what they are promise libraries,

138
00:08:14.660 --> 00:08:19.320
that add a bunch of extra stuff on top of
the spec, add a bunch of extra helpers in.

139
00:08:19.320 --> 00:08:21.480
Am I against adding helpers?

140
00:08:21.480 --> 00:08:22.590
Absolutely not.

141
00:08:22.590 --> 00:08:25.810
I'm about to show you a library that
I wrote that adds a bunch of helpers.

142
00:08:25.810 --> 00:08:28.510
I'm a big fan of library helper's because
there's a lot of stuff we want to do

143
00:08:28.510 --> 00:08:29.600
with promises.

144
00:08:29.600 --> 00:08:31.490
Well I'm not a fan of his
adding a bunch of helpers and

145
00:08:31.490 --> 00:08:36.380
then claiming to be a polyfill, because
a polyfill is supposed to be nothing but

146
00:08:36.380 --> 00:08:37.950
the specification compliance.

147
00:08:39.370 --> 00:08:42.120
No cutting corners,
no adding extra stuff and

148
00:08:42.120 --> 00:08:45.060
there's a bunch of libraries out there
that sort of cut some corners and

149
00:08:45.060 --> 00:08:48.250
add some extra things in, and
still call themselves polyfills.

150
00:08:48.250 --> 00:08:50.050
Be cautious about looking for that.

151
00:08:50.050 --> 00:08:53.300
You can trust that native
promise only does nothing but

152
00:08:53.300 --> 00:08:55.920
implement the spec compliant
version of promise.

