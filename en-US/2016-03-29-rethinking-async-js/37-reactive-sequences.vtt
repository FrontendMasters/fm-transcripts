WEBVTT

1
00:00:00.025 --> 00:00:03.950
&gt;&gt; [MUSIC]

2
00:00:03.950 --> 00:00:07.910
&gt;&gt; Kyle Simpson: I did say that RxJS
is pretty well standardized it's

3
00:00:07.910 --> 00:00:08.950
a it's a really good idea.

4
00:00:08.950 --> 00:00:13.160
It's probably a pretty good sense of
what we're going to end up with or

5
00:00:13.160 --> 00:00:15.250
something very close to it.

6
00:00:15.250 --> 00:00:16.979
If we get observables in JavaScript.

7
00:00:18.910 --> 00:00:22.990
I've tried a number of times
to learn RxJS honestly I have.

8
00:00:25.340 --> 00:00:26.660
I've never had enough time

9
00:00:27.810 --> 00:00:32.410
to get through all of that documentation
the training courses I've gone through.

10
00:00:32.410 --> 00:00:36.810
It takes a lot of effort and,
comparatively speaking,

11
00:00:36.810 --> 00:00:41.830
if I try to analyze the asynchronous event
based coding that I do in my programs,

12
00:00:41.830 --> 00:00:46.060
there's actually kind of a small subset of
things that I really do on a common basis.

13
00:00:47.770 --> 00:00:52.860
So it occurred to me that if I'm already
pretty familiar with using asynquence for

14
00:00:52.860 --> 00:00:54.560
my generators and my promises,

15
00:00:54.560 --> 00:01:00.150
why not have reactive programming
capabilities with an asynquence.

16
00:01:00.150 --> 00:01:02.950
That actually fits pretty well ,because
I'm already dealing with sequences.

17
00:01:02.950 --> 00:01:06.928
That's my abstraction, so all I need to do
is be able to make repeatable sequences.

18
00:01:06.928 --> 00:01:11.149
And then it fits right in with the same
abstractions that have already created and

19
00:01:11.149 --> 00:01:13.819
all the same methods and
utilities that I've got,

20
00:01:13.819 --> 00:01:16.610
they all work on reactive as well.

21
00:01:16.610 --> 00:01:19.300
So what I did was add reactive
sequences to the library.

22
00:01:20.640 --> 00:01:23.830
For our purposes, rather than me trying
to get you bogged down into learning all

23
00:01:23.830 --> 00:01:28.870
the complexities of RxJS, I'm gonna show
you reactive sequences which work very,

24
00:01:28.870 --> 00:01:32.750
very similarly to the RxJS observables.

25
00:01:32.750 --> 00:01:36.000
And I'm actually gonna show you that you
can transparently go between the two.

26
00:01:36.000 --> 00:01:40.880
So, you can take in a reactive sequence
and make an RxJS observable and

27
00:01:40.880 --> 00:01:42.050
vice versa if you need to.

28
00:01:43.800 --> 00:01:48.740
But this is just like,
it's like the five or

29
00:01:48.740 --> 00:01:52.900
six most common ones you need put down and
inside of a tiny little implementation.

30
00:01:52.900 --> 00:01:56.085
So instead of having to
bring in a 200k library,

31
00:01:56.085 --> 00:01:58.660
you get this for like 3k in asynquence.

32
00:01:58.660 --> 00:02:03.010
So that's really all it is
trying to make it a little

33
00:02:03.010 --> 00:02:04.390
little easier to wrap your brain around.

34
00:02:06.120 --> 00:02:10.533
So I can make a utility like fromEvent
which looks exactly like the one

35
00:02:10.533 --> 00:02:15.480
provided by the observables that takes
an done element takes an event name and

36
00:02:15.480 --> 00:02:16.469
it attaches and

37
00:02:16.469 --> 00:02:21.896
here I'm using JQuery just to save room on
the slides of course we don't use JQuery.

38
00:02:21.896 --> 00:02:25.819
[COUGH] So from a vent utility
is how I make an observable and

39
00:02:25.819 --> 00:02:27.740
you see I do that on line 8.

40
00:02:27.740 --> 00:02:31.680
Now I'm gonna call mine I use the term
reactive sequence instead of observable

41
00:02:31.680 --> 00:02:33.190
I did that on purpose.

42
00:02:33.190 --> 00:02:35.730
Because it's not an observable

43
00:02:37.080 --> 00:02:42.140
it's isomorphic with observables
they can go back and forth.

44
00:02:42.140 --> 00:02:46.170
But it's not an observable it's my own
little thing it's a much smaller simpler

45
00:02:46.170 --> 00:02:50.230
thing so rather than calling it
an observable and having people complain

46
00:02:50.230 --> 00:02:54.650
that it doesn't do exactly the same
thing that our RxJS observables do.

47
00:02:54.650 --> 00:02:58.880
It's a reactive sequence, but
it's transparently very similar.

48
00:02:58.880 --> 00:03:00.220
So you can go back and forth.

49
00:03:00.220 --> 00:03:05.857
So I'm going to call it rsq, just to keep
things clear, it's a reactive sequence.

50
00:03:05.857 --> 00:03:10.857
And then you'll notice I just start
chaining off of it exactly like I do

51
00:03:10.857 --> 00:03:12.590
any other asynquence.

52
00:03:12.590 --> 00:03:15.293
Used .vals and .thens and .seqs.

53
00:03:15.293 --> 00:03:19.858
I can use .runners, I can use any
of the abstractions provided to me

54
00:03:19.858 --> 00:03:24.360
by the asynchronous library directly
off of a reactive sequence.

55
00:03:25.542 --> 00:03:30.000
And under the covers the reactive sequence
takes care of repeating all those steps

56
00:03:30.000 --> 00:03:31.970
every time a new piece of
data flows through, so

57
00:03:31.970 --> 00:03:34.380
you don't have to worry about
that whole repeating thing.

58
00:03:34.380 --> 00:03:36.950
It figures out how to repeat the chain
over, and over, and over again.

59
00:03:39.300 --> 00:03:42.849
You could sort of think about a reactive
sequences like a sequence template.

60
00:03:44.030 --> 00:03:48.490
You declare what the sequence template
looks like an asynquence will repeat,

61
00:03:48.490 --> 00:03:51.070
it will clone and repeat that
template every time it needs to.

62
00:03:56.320 --> 00:04:00.410
So that's a pretty lightweight way of
getting started playing with observables

63
00:04:00.410 --> 00:04:02.220
you don't need some big library.

64
00:04:02.220 --> 00:04:04.460
You just take knowledge
that you already have,

65
00:04:04.460 --> 00:04:07.700
a little bit of a knowledge about
asynquence, and hook it up.

66
00:04:07.700 --> 00:04:11.165
And the main thing,
as you can see up there on line 2,

67
00:04:11.165 --> 00:04:15.325
the main way we create a reactive
sequence is to say ASQ.react.

68
00:04:15.325 --> 00:04:17.980
And that gives us a function,
which I call proceed.

69
00:04:17.980 --> 00:04:19.870
And every time that thing is called,

70
00:04:19.870 --> 00:04:22.470
whatever you pass to it is data
that gets pumped down the chain.

71
00:04:23.870 --> 00:04:25.060
It's really pretty straightforward.

72
00:04:29.070 --> 00:04:33.610
I want to point out an alternate
implementation of that from event

73
00:04:33.610 --> 00:04:36.260
to show you a different way of
thinking about a reactive sequence.

74
00:04:36.260 --> 00:04:42.381
Here, I make an empty reactive
sequence by just saying ASQ.react.of

75
00:04:42.381 --> 00:04:47.796
with no data in it that's exactly
the same syntax as RxJS uses.

76
00:04:47.796 --> 00:04:52.287
They have a .of method that you can pass
nothing into it or pass data into it so

77
00:04:52.287 --> 00:04:54.120
it's exactly the same thing.

78
00:04:55.390 --> 00:04:59.840
But you notice that I have a push
method that I'm referencing on line 3.

79
00:04:59.840 --> 00:05:03.130
So you can manually pump data
into your reactive sequences

80
00:05:04.320 --> 00:05:05.350
which is what I'm doing here.

81
00:05:05.350 --> 00:05:08.820
I'm making the event binding
manually pump data and it's

82
00:05:08.820 --> 00:05:12.370
gonna accomplish exactly the same thing as
the code on the other side but it shows

83
00:05:12.370 --> 00:05:16.060
you the reactive sequences are things that
you can pump data into if you want to.

84
00:05:16.060 --> 00:05:19.199
I actually end up using that quite a bit.

85
00:05:27.190 --> 00:05:29.430
So here's a quick example.

86
00:05:29.430 --> 00:05:32.979
I make an empty sequence up
on line 1 called rsq1, and

87
00:05:32.979 --> 00:05:36.991
I make another one called rsq2,
which I preset some data in,

88
00:05:36.991 --> 00:05:42.182
I pre-pumped some data in three pieces
of data, three numbers, 1, 2, 3.

89
00:05:42.182 --> 00:05:44.930
And then I set myself up with an interval.

90
00:05:44.930 --> 00:05:45.960
So I'm just going to,

91
00:05:45.960 --> 00:05:49.580
every 500 milliseconds push some
more data down that stream.

92
00:05:49.580 --> 00:05:52.290
Each one of those streams,
I'm gonna push some numbers down.

93
00:05:52.290 --> 00:05:55.370
So those are starting out at 10 and 11
there on line 6 and 7, the values 10 and

94
00:05:55.370 --> 00:05:57.160
11 as they increment.

95
00:05:58.250 --> 00:06:01.070
Elsewhere in my program I'm
going to subscribe to those two

96
00:06:01.070 --> 00:06:02.900
observables those two reactive sequences.

97
00:06:04.030 --> 00:06:08.820
Line ten I subscribe to rsq1 and
I print out whatever I'm getting there and

98
00:06:08.820 --> 00:06:12.290
you notice if you follow the flow there
because rsq1 didn't have any data

99
00:06:12.290 --> 00:06:15.220
the first piece of data gets down
the stream is the value ten.

100
00:06:16.290 --> 00:06:20.090
And then 500 milliseconds later, it gets
the value 12, and then the value 14.

101
00:06:20.090 --> 00:06:25.060
What about rsq2 it already had
three pieces of data in the stream.

102
00:06:25.060 --> 00:06:29.250
So the 1, 2 and 3 are gonna come out
right away as we see on line 18.

103
00:06:29.250 --> 00:06:32.450
And then we're gonna start every 500
milliseconds getting the values 11, 13,

104
00:06:32.450 --> 00:06:33.200
15 and so forth.

105
00:06:35.820 --> 00:06:38.010
So these are just streams we
can pump data into them and

106
00:06:38.010 --> 00:06:40.390
get data out on the other end that's all.

107
00:06:40.390 --> 00:06:42.266
That's all it takes to understand
what's happening here.

108
00:06:51.298 --> 00:06:53.053
&gt;&gt; Kyle Simpson: Because these are just

109
00:06:53.053 --> 00:06:59.860
streams, we can define higher level
operations, the stream operations.

110
00:06:59.860 --> 00:07:02.490
This is maybe the most important thing
that I'm going to teach you about all of

111
00:07:02.490 --> 00:07:04.240
reactive programming.

112
00:07:04.240 --> 00:07:07.550
This is what really unlocks
the magic of reactive programming.

113
00:07:07.550 --> 00:07:11.190
If you think about them as streams,
we can define certain operations for

114
00:07:11.190 --> 00:07:13.170
composing streams together.

115
00:07:13.170 --> 00:07:16.272
So here I have two different streams,
I have an rsq1 and rsq2.

116
00:07:16.272 --> 00:07:18.450
They're both coming from
different DOM events.

117
00:07:18.450 --> 00:07:19.880
One of them is clicks on a button and

118
00:07:19.880 --> 00:07:23.200
one of them is key presses
in an input box, okay?

119
00:07:23.200 --> 00:07:25.200
We could individually
subscribe to those and

120
00:07:25.200 --> 00:07:27.360
be notified when any one
of those events happen.

121
00:07:27.360 --> 00:07:31.950
But what if I wanted to listen to a sort
of synthetic event stream that told me

122
00:07:31.950 --> 00:07:34.680
whenever those two things happened
at exactly the same time?

123
00:07:37.040 --> 00:07:40.960
I could listen for the .all operator.

124
00:07:40.960 --> 00:07:45.720
That's a stream operator that says
I'm only gonna fire an event on rsq3.

125
00:07:45.720 --> 00:07:49.460
Whenever I have an event from
all of my input streams.

126
00:07:50.600 --> 00:07:54.840
So if the key press happens first, I'm
gonna wait until I get the button click,

127
00:07:54.840 --> 00:07:58.100
and now that I have these two events
I'm gonna put those two together and

128
00:07:58.100 --> 00:08:00.280
fire them out on the rsq3 stream.

129
00:08:00.280 --> 00:08:03.070
So I've created a synthetic event stream

130
00:08:03.070 --> 00:08:05.750
based on the composition
of two lower level streams.

131
00:08:06.970 --> 00:08:12.565
That's .all, and by the way in RxJS
terminology .all is called .zip so

132
00:08:12.565 --> 00:08:14.380
in RxJS they have a zip.

133
00:08:15.720 --> 00:08:20.688
There's an alias if you like the RxJS
terms, you can use dot zip here, I just,

134
00:08:20.688 --> 00:08:22.813
zip is weird to me so I used .all.

135
00:08:22.813 --> 00:08:27.467
And there's another one called merge
in RxJS, which I called .any that says,

136
00:08:27.467 --> 00:08:29.898
I've got two or more incoming streams and

137
00:08:29.898 --> 00:08:34.180
I want to fire an event any time
I get anything from any of them.

138
00:08:34.180 --> 00:08:37.788
So just fire him out as quick as soon as I
get one from any stream fired it back out

139
00:08:37.788 --> 00:08:38.480
down the stream.

140
00:08:38.480 --> 00:08:41.810
And that's called the merge
in the arcs chance world.

141
00:08:43.560 --> 00:08:47.220
Here's the Rx marbles if you
want to go back and look.

142
00:08:47.220 --> 00:08:53.370
So zip is the RxJS terminology for
that stream operation.

143
00:08:53.370 --> 00:08:56.100
And you can see that one
comes out on one stream and

144
00:08:56.100 --> 00:08:58.419
A comes in another as soon as A shows up.

145
00:08:59.570 --> 00:09:05.260
An event is fired on the output stream
called 1 A with the data 1 A in it and

146
00:09:05.260 --> 00:09:08.190
then when 2 and
B show up then 2 B goes out.

147
00:09:08.190 --> 00:09:11.840
C and D come together but
we're still waiting on a 3 and

148
00:09:11.840 --> 00:09:14.340
then we get 3 C and 4 D.

149
00:09:17.600 --> 00:09:22.450
So that composite stream down
there is a higher order stream to

150
00:09:22.450 --> 00:09:26.020
defined as a composition of two or
more input streams.

151
00:09:27.270 --> 00:09:30.440
This is one of the most powerful
techniques that you can learn.

152
00:09:30.440 --> 00:09:33.710
Is understanding how to model the data
that's flowing through your app or

153
00:09:33.710 --> 00:09:36.540
operation, your application.

154
00:09:36.540 --> 00:09:38.190
As a series of stream operations

155
00:09:42.880 --> 00:09:47.010
without practicing what I'm saying
it's going to feel very esoteric and

156
00:09:47.010 --> 00:09:49.240
we are to you I understand that.

157
00:09:49.240 --> 00:09:53.340
But I promise you if you start practicing
orienting your application around

158
00:09:53.340 --> 00:09:57.070
asynchronous events and using these
higher order stream operations.

159
00:09:57.070 --> 00:09:59.130
It's like another set of
light bulbs go off in life.

160
00:09:59.130 --> 00:10:00.850
Wow, how did I ever get all?

161
00:10:00.850 --> 00:10:04.500
How do I ever get around not using
that as my way of modeling data flow?

162
00:10:06.910 --> 00:10:10.830
So it's right that people
are super excited about this

163
00:10:10.830 --> 00:10:12.320
reactive programming thing.

164
00:10:12.320 --> 00:10:15.690
It's gonna completely change a whole bunch
of really crappy stuff that we've been

165
00:10:15.690 --> 00:10:16.530
doing for a long time.

166
00:10:17.700 --> 00:10:22.330
The other workshops from Freddy Mausers
like Jeff's workshop, fantastic workshop.

167
00:10:22.330 --> 00:10:23.830
It's all in on observables.

168
00:10:23.830 --> 00:10:26.630
It's all observables all the time and
it's great.

169
00:10:26.630 --> 00:10:28.520
Netflix is using it, Microsoft's using it,

170
00:10:28.520 --> 00:10:31.560
everybody's really in on
this observables thing.

171
00:10:31.560 --> 00:10:33.870
So I think we should we
owe it some attention.

172
00:10:33.870 --> 00:10:36.100
We owe it our attention to kind
of learn that and see that.

173
00:10:36.100 --> 00:10:40.298
I think if promises and generators
represent the baseline, the thing that's

174
00:10:40.298 --> 00:10:44.379
right over the horizon is observables
are gonna be what everybody is using.

175
00:10:44.379 --> 00:10:46.734
It doesn't mean that promises
are gonna go away but

176
00:10:46.734 --> 00:10:50.480
it means that observables are going to be
a really powerful tool in our tool belt.

