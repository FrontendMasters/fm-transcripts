WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:39.152 --> 00:00:41.855
&gt;&gt; Kyle: As quick intro for
anyone that maybe joining us on video or

3
00:00:41.855 --> 00:00:44.783
someone that hasn't heard of me before,
just a quick intro,

4
00:00:44.783 --> 00:00:47.330
my name is Kyle Simpson known as getify.

5
00:00:47.330 --> 00:00:51.870
And I can be found getify at all
the major places like Twitter and

6
00:00:51.870 --> 00:00:56.650
GitHub, Gmail all those other places I
list this stuff because I encourage you

7
00:00:56.650 --> 00:00:59.450
to reach out and
provide feedback or ask questions.

8
00:00:59.450 --> 00:01:02.620
Be going back over the stuff particularly
the stuff that will be going through

9
00:01:02.620 --> 00:01:08.450
through the course of this workshop and
there's a lot of depth here especially

10
00:01:08.450 --> 00:01:13.300
as we get further into it it's the
exercises become extremely challenging.

11
00:01:13.300 --> 00:01:15.830
There are exercises that took
me weeks to work out, and

12
00:01:15.830 --> 00:01:17.810
then I'm expecting you to
do them in 20 minutes.

13
00:01:17.810 --> 00:01:20.171
So they're extremely
challenging on purpose.

14
00:01:20.171 --> 00:01:23.600
I'm just trying to push your
understanding of asynchronous patterns.

15
00:01:23.600 --> 00:01:26.523
So if you have questions about that or
if you're struggling with that,

16
00:01:26.523 --> 00:01:27.798
please feel free to reach out.

17
00:01:27.798 --> 00:01:29.330
I'd love to help you with that.

18
00:01:29.330 --> 00:01:31.670
Just real quickly,
I've done several open source projects,

19
00:01:31.670 --> 00:01:35.784
LABjs, script loader,
grips as a templating engine, asynquence.

20
00:01:35.784 --> 00:01:38.390
We're gonna spend a lot of time
talking about asynquence actually.

21
00:01:38.390 --> 00:01:41.040
But not because I'm trying
to sell you on that library,

22
00:01:41.040 --> 00:01:45.370
simply because it is designed to help make
asynchronous programming concepts easier

23
00:01:45.370 --> 00:01:49.560
to understand and manage in your brain is
designed to make them easier to teach.

24
00:01:49.560 --> 00:01:54.200
So you get some exposure to asynquences
as we go throughout this workshop.

25
00:01:56.090 --> 00:01:59.180
I am the head of curriculum for
Maker Square for

26
00:01:59.180 --> 00:02:01.440
about the last three or four months.

27
00:02:01.440 --> 00:02:03.960
Maker Square is a developer
engineer training school.

28
00:02:03.960 --> 00:02:07.720
We have campuses in Austin,
San Francisco, and Los Angeles, and

29
00:02:07.720 --> 00:02:09.970
we will be expanding, as well.

30
00:02:09.970 --> 00:02:12.980
We take you from junior level
status to intermediate status,

31
00:02:12.980 --> 00:02:15.430
and that's slightly different
than other schools.

32
00:02:15.430 --> 00:02:18.960
Which may say, we start you from nothing
and get you to junior level status for

33
00:02:18.960 --> 00:02:20.520
more on the higher end,

34
00:02:20.520 --> 00:02:24.550
we like to kind of think of ourselves more
like the MIT of these developer schools.

35
00:02:24.550 --> 00:02:28.730
So you start out at a higher level,
it's more as required of you but

36
00:02:28.730 --> 00:02:31.880
we also take you a lot further to
Full-Stack JavaScript school so

37
00:02:31.880 --> 00:02:35.240
we teach all the front end Frameworks
like the angulars and reacts and

38
00:02:35.240 --> 00:02:39.506
all the backend things like Mongo and
Node and Express and things like that.

39
00:02:39.506 --> 00:02:43.010
[COUGH] If you have any questions or

40
00:02:43.010 --> 00:02:46.980
thoughts about tech schooling or you know
somebody that's interested or has some

41
00:02:46.980 --> 00:02:50.390
questions please put them in touch with me
I'd love to chat with you more about that.

42
00:02:52.180 --> 00:02:56.201
I've written a series of books on
JavaScript called You Don't Know JS.

43
00:02:56.201 --> 00:02:59.338
A lot of what we're gonna talk about
today is covered in some way shape or

44
00:02:59.338 --> 00:03:00.290
form in those books.

45
00:03:00.290 --> 00:03:03.940
Particularly, the Async and
Performance book, as well as the ES6 book.

46
00:03:03.940 --> 00:03:07.500
You should be able to find quite a bit
of coverage of some of these topics

47
00:03:07.500 --> 00:03:08.530
in those books.

48
00:03:08.530 --> 00:03:13.560
The entire 6 book series 1,100 pages worth
is available for free online at GitHub.

49
00:03:14.630 --> 00:03:17.260
You don't know js.com
will redirect to that.

50
00:03:17.260 --> 00:03:18.240
You can also purchase them.

51
00:03:18.240 --> 00:03:19.970
They've been edited and
published through O'Reilly.

52
00:03:19.970 --> 00:03:22.580
So you can purchase them if
you're happy with that content.

53
00:03:23.580 --> 00:03:27.946
Today, we are going to talk
about asynchronous patterns.

54
00:03:27.946 --> 00:03:30.900
Now, I wanna explain right off
the bat that my approach to this,

55
00:03:30.900 --> 00:03:33.560
much like my approach to
the other things that I teach,

56
00:03:33.560 --> 00:03:39.430
is to first focus on the concept before
explaining the how to use something.

57
00:03:39.430 --> 00:03:42.270
That differs from some of
my peers who were first

58
00:03:42.270 --> 00:03:45.160
would present to you the API for
something and

59
00:03:45.160 --> 00:03:49.330
then maybe perhaps later, you might pick
up on some of the conceptuals behind it.

60
00:03:49.330 --> 00:03:52.820
I think it's more effective for you to
understand why you do something a certain

61
00:03:52.820 --> 00:03:57.560
way before actually getting too immersed
in the actual doing of the thing.

62
00:03:57.560 --> 00:03:58.690
So for example,

63
00:03:58.690 --> 00:04:02.680
some of you listening probably are already
at least somewhat familiar with promises.

64
00:04:02.680 --> 00:04:06.150
But I'm not sure everyone has had a very
good conceptual grounding in what

65
00:04:06.150 --> 00:04:09.680
a promise really is, and
why a promise is useful,

66
00:04:09.680 --> 00:04:14.680
cuz I see an awful lot of arguing about
promises in the open source community.

67
00:04:14.680 --> 00:04:18.820
And they seem to focus an awful
lot on bickering about the API for

68
00:04:18.820 --> 00:04:22.970
promises, and missing out on the deeper
point of why they even exist.

69
00:04:22.970 --> 00:04:26.440
So for each of the topics that we're gonna
go through today our goal is to build up

70
00:04:26.440 --> 00:04:31.400
a conceptual understanding first and
then in practice of why we do the thing,

71
00:04:31.400 --> 00:04:33.630
of doing the thing once
we know why we do it.

72
00:04:33.630 --> 00:04:37.103
So we're gonna actually start even
before we talk with some code.

73
00:04:37.103 --> 00:04:41.602
We're gonna start understanding a very
important distinction that is often

74
00:04:41.602 --> 00:04:42.394
conflated.

75
00:04:42.394 --> 00:04:47.050
We're gonna look at the notion of
parallelism versus asynchronicity.

76
00:04:47.050 --> 00:04:48.930
This is really speaking to
the idea of concurrency.

77
00:04:48.930 --> 00:04:52.300
So we're actually gonna dig into what
concurrency really means, specifically,

78
00:04:52.300 --> 00:04:54.380
what it means to a JavaScript developer.

79
00:04:54.380 --> 00:04:57.270
Cuz that is the motivation by which
we do all the rest of the things.

80
00:04:57.270 --> 00:05:01.550
Then we're gonna turn our attention to
callbacks, the most fundamental premise

81
00:05:01.550 --> 00:05:06.020
of all of, the fundamental unit
of asynchronous programming.

82
00:05:06.020 --> 00:05:09.160
And what we're really gonna
see is that callbacks,

83
00:05:09.160 --> 00:05:13.310
while capable of expressing
everything that we need.

84
00:05:13.310 --> 00:05:16.830
Have some very significant deficiencies.

85
00:05:16.830 --> 00:05:19.940
Two major deficiencies in fact

86
00:05:19.940 --> 00:05:23.040
that I would use to define
the notion of callback hell.

87
00:05:24.840 --> 00:05:29.260
Callback hell is thrown around an awful
lot and most people when I say that term

88
00:05:29.260 --> 00:05:33.478
What evokes in their mind is that it
has something to do with indentation,

89
00:05:33.478 --> 00:05:35.467
with nesting, things like that.

90
00:05:35.467 --> 00:05:39.451
What I'm gonna show you is that callback
hell is actually almost nothing to do with

91
00:05:39.451 --> 00:05:41.610
indentation and nesting.

92
00:05:41.610 --> 00:05:42.720
There's something much deeper,

93
00:05:42.720 --> 00:05:45.440
much more important to
understand about callback hell.

94
00:05:45.440 --> 00:05:48.360
So we're gonna look at callbacks and
look at how they work.

95
00:05:48.360 --> 00:05:53.120
First, we'll get some practice with them
just to understand that kind of some first

96
00:05:53.120 --> 00:05:56.660
first person experience with the pain of
that I'm sure you all have that already.

97
00:05:58.060 --> 00:06:01.987
But then we're gonna look at what
those problems are give them a name,

98
00:06:01.987 --> 00:06:05.060
give those pro gear the problems
callback hell a name.

99
00:06:06.260 --> 00:06:09.370
And that will be our motivation to why we
want to try to solve those problems with

100
00:06:09.370 --> 00:06:10.210
these higher order patterns.

101
00:06:11.720 --> 00:06:14.280
Another variation on callbacks that
we're going to look at which is kind of

102
00:06:14.280 --> 00:06:17.130
interesting it is not
gotten a lot of attention.

103
00:06:17.130 --> 00:06:20.160
Many of you may not even heard before but
thunks.

104
00:06:20.160 --> 00:06:23.440
Thunks are something that I even
just sort of recently myself and

105
00:06:23.440 --> 00:06:27.480
I recently I mean within the last year or
two, discovered this pattern and realized,

106
00:06:27.480 --> 00:06:31.470
wow, I really wish I had been able to
articulate that pattern years ago.

107
00:06:32.480 --> 00:06:35.630
Because, actually it's a really
good precursor to understanding

108
00:06:35.630 --> 00:06:37.380
what promises are about.

109
00:06:37.380 --> 00:06:41.030
So we'll look at thunks and we'll look
at why they are part of that tool,

110
00:06:41.030 --> 00:06:44.200
they're one of the little tools you
should have in your tool center.

111
00:06:45.350 --> 00:06:48.240
Having that conceptual understanding
of what a thunk really is and

112
00:06:48.240 --> 00:06:51.580
what it's useful for
that will bridge us into promises.

113
00:06:51.580 --> 00:06:54.790
In other words, thunks are kinda
like promises without the fancy API.

114
00:06:54.790 --> 00:06:58.810
So once we get the conceptual grounding
in thunks will understand why promises

115
00:06:58.810 --> 00:06:59.690
are useful.

116
00:06:59.690 --> 00:07:03.342
We'll look at the APIs for how to use
promises, we'll get some patterns for

117
00:07:03.342 --> 00:07:07.112
them all along the way every one of these
patterns we're going to be revisiting

118
00:07:07.112 --> 00:07:10.393
an exercise, the exact same exercise
over and over and over again.

119
00:07:10.393 --> 00:07:14.315
And you're gonna re-implement the solution
to that exercise using every single one of

120
00:07:14.315 --> 00:07:17.866
these patterns from callbacks all the way
up the goal there being that you will be

121
00:07:17.866 --> 00:07:21.470
fully understand you don't have to worry
about the problem domain anymore you be

122
00:07:21.470 --> 00:07:24.800
fully understanding the pros and
cons of each of these patterns.

123
00:07:24.800 --> 00:07:25.790
So that's how we'll go about it.

124
00:07:25.790 --> 00:07:27.700
So we're looking at promises.

125
00:07:27.700 --> 00:07:29.510
There were no good
generators in co-routines.

126
00:07:29.510 --> 00:07:33.160
And by the time we've looked at promises
in generators we actually will have

127
00:07:33.160 --> 00:07:38.550
a established two solid solutions to
those major issues of callback hell.

128
00:07:38.550 --> 00:07:40.900
That represents the baseline.

129
00:07:40.900 --> 00:07:44.207
The point at which if you're
ready to like tune me out.

130
00:07:44.207 --> 00:07:46.860
I have wronged you or
you're bored or whatever.

131
00:07:46.860 --> 00:07:47.960
You gotta get this part.

132
00:07:47.960 --> 00:07:49.980
You gotta get through the promises and
generators.

133
00:07:49.980 --> 00:07:53.780
That is the new baseline for competency.

134
00:07:53.780 --> 00:07:57.300
And asynchronous programming is
understanding what promises are,

135
00:07:57.300 --> 00:07:58.480
what generators are and

136
00:07:58.480 --> 00:08:02.980
why the two need to be mixed together
to solve the issues of callback call.

137
00:08:02.980 --> 00:08:05.410
That's the new standard for competency.

138
00:08:05.410 --> 00:08:08.590
So that's really if you get nothing
else out of the workshop I wanna make

139
00:08:08.590 --> 00:08:09.920
sure everybody gets to that point.

140
00:08:09.920 --> 00:08:12.400
So we'll spend plenty of time
making sure we get to that point.

141
00:08:13.740 --> 00:08:18.440
But that's not all because there's
more to asynchronous programming that

142
00:08:18.440 --> 00:08:20.500
those patterns aren't necessarily good at.

143
00:08:20.500 --> 00:08:22.550
There are more variations.

144
00:08:22.550 --> 00:08:24.490
Point that I'm making is,

145
00:08:24.490 --> 00:08:28.120
I have never once I've written a lot
of code in my 17 years in JavaScript.

146
00:08:28.120 --> 00:08:31.020
I've never once written
an entire program using exactly

147
00:08:31.020 --> 00:08:32.850
the same abstraction everywhere.

148
00:08:32.850 --> 00:08:34.530
There is no one silver bullet.

149
00:08:35.610 --> 00:08:40.030
Anytime somebody starts to tell me
something like X is the new Y, my BS radar

150
00:08:40.030 --> 00:08:43.240
goes off I'm like no it's probably not, as
matter of fact it's almost certainly not.

151
00:08:44.290 --> 00:08:47.540
There's no one silver bullet
that replaces everything else.

152
00:08:47.540 --> 00:08:50.650
So nothing that I'm teaching you today is
going to be replacing everything else that

153
00:08:50.650 --> 00:08:53.900
we've talked about rather you should
consider these things instead of all wars

154
00:08:53.900 --> 00:08:56.520
you can still should consider them ands.

155
00:08:56.520 --> 00:08:57.530
This is additive.

156
00:08:57.530 --> 00:09:01.950
These are additional tools additional
patterns and you can develop instincts for

157
00:09:01.950 --> 00:09:06.600
why one pattern is more well suited for
a particular set of problems.

158
00:09:06.600 --> 00:09:11.120
My programs try to efficiently use each of
these different patterns where necessary.

159
00:09:12.190 --> 00:09:14.910
Even things like callbacks and
thunks have their place.

160
00:09:14.910 --> 00:09:16.040
Promises have their place.

161
00:09:16.040 --> 00:09:17.720
Generators have their place.

162
00:09:17.720 --> 00:09:21.690
In addition, when we start dealing with
event streams we'll find that promises

163
00:09:21.690 --> 00:09:25.630
actually don't really give us a very
good solution when we start dealing with

164
00:09:25.630 --> 00:09:30.560
event oriented programming, what I call
event reactive a reactive sequences.

165
00:09:30.560 --> 00:09:32.160
That's also goes by the name observable.

166
00:09:32.160 --> 00:09:35.330
So if you've read anything,
there's been a buzz recently.

167
00:09:35.330 --> 00:09:39.680
There's quite a bit of information out
there about this notion of observables.

168
00:09:39.680 --> 00:09:41.980
There's a library from Microsoft called,
RXJS,

169
00:09:41.980 --> 00:09:46.640
one of the most common implementations
of the observable pattern.

170
00:09:46.640 --> 00:09:49.150
I'll show you what that
patterns about why it's useful.

171
00:09:49.150 --> 00:09:54.320
We will relate that back to in practice
with the expression of observables in

172
00:09:54.320 --> 00:09:56.690
asynchronous library cuz
that will be easier for

173
00:09:56.690 --> 00:10:00.620
us to play with without learning a huge
library with hundreds of methods.

174
00:10:00.620 --> 00:10:03.660
So a very small subsection of that
will play with an asynchronous that I

175
00:10:03.660 --> 00:10:07.460
call reactive sequences
does,basically the same thing.

176
00:10:07.460 --> 00:10:10.640
So that's a higher order pattern that
will help us, put all the other stuff

177
00:10:10.640 --> 00:10:14.800
that we've learned together in interesting
ways and solve event oriented programming.

178
00:10:14.800 --> 00:10:16.480
Event oriented asynchronous programming.

179
00:10:17.660 --> 00:10:21.590
And finally, the last pattern that
will look at very high level pattern.

180
00:10:21.590 --> 00:10:24.962
Hasn't gotten a lot of attention
recently but it's called CSP.

181
00:10:24.962 --> 00:10:27.820
It's stands for
communicating sequential processes.

182
00:10:27.820 --> 00:10:33.127
This is not a new concept actually it
was invented in the early 60s, and

183
00:10:33.127 --> 00:10:39.304
it was developed and thought about by some
really smart people way smarter than I am.

184
00:10:39.304 --> 00:10:43.940
So there's nothing new that I'm presenting
here no new information that hasn't been

185
00:10:43.940 --> 00:10:45.409
talked about for decades.

186
00:10:46.470 --> 00:10:51.040
But it almost feels like CSP is
on the cusp of a rediscovering.

187
00:10:51.040 --> 00:10:55.090
In particular because recently
we've seen some more popular,

188
00:10:55.090 --> 00:10:59.870
more mainstream type languages
adopt this model for concurrency.

189
00:10:59.870 --> 00:11:02.900
Namely the Go language
uses the CSP model for

190
00:11:02.900 --> 00:11:06.870
concurrency as well as closure and closure
script, closure script being the bridge

191
00:11:06.870 --> 00:11:10.560
that brings closure into the Into
the JavaScript world in the browser.

192
00:11:10.560 --> 00:11:13.550
So more and more people
are starting to move into the Go

193
00:11:13.550 --> 00:11:16.830
programming language world and
into Clojure and ClojureScript.

194
00:11:16.830 --> 00:11:21.030
And they're discovering that CSP is
this really powerful pattern for

195
00:11:21.030 --> 00:11:23.040
managing concurrency.

196
00:11:23.040 --> 00:11:25.540
And I have heard people on
the observable side for

197
00:11:25.540 --> 00:11:28.430
example tell me observables
are that silver bullet.

198
00:11:28.430 --> 00:11:31.061
You can model everything
with an observable.

199
00:11:31.061 --> 00:11:32.582
Yeah, kind of, maybe.

200
00:11:32.582 --> 00:11:34.526
There are some places
that it's really good and

201
00:11:34.526 --> 00:11:35.993
some places that it's not so good.

202
00:11:35.993 --> 00:11:38.441
And then, I've heard people say, well,

203
00:11:38.441 --> 00:11:43.004
you don't even need promises because you
can do everything with a CSP channel.

204
00:11:43.004 --> 00:11:46.119
But there's places where that's
useful in places where it's not so

205
00:11:46.119 --> 00:11:47.756
this is not an all or nothing thing.

206
00:11:47.756 --> 00:11:52.290
But CSP is a fundamentally rather
undiscovered, or rather untalked about,

207
00:11:52.290 --> 00:11:53.330
sort of pattern.

208
00:11:53.330 --> 00:11:58.570
But I'm kind of convinced that it
represents kind of the next next wave.

209
00:11:58.570 --> 00:12:02.700
If the big wave is observable,
if that's about to wash over us,

210
00:12:02.700 --> 00:12:05.990
the one after it is CSPs, so
I wanna be aware of those things and

211
00:12:05.990 --> 00:12:08.850
understand how all these
tools weave together.

212
00:12:08.850 --> 00:12:13.330
By the end of this will be we're working
through some rather challenging exercises

213
00:12:13.330 --> 00:12:17.364
trying to push our brains Into thinking
way beyond just a simple callback.

214
00:12:17.364 --> 00:12:19.050
So that's where we're
going with this workshop.

215
00:12:20.260 --> 00:12:22.890
If things seem too
simple at the beginning,

216
00:12:22.890 --> 00:12:25.560
I promise you by the end they'll be
plenty to be digging your teeth into.

