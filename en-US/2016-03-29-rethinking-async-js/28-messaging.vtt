WEBVTT

1
00:00:00.000 --> 00:00:03.874
[MUSIC]

2
00:00:03.874 --> 00:00:05.377
&gt;&gt; Kyle: This is going to feel strange and

3
00:00:05.377 --> 00:00:09.440
bizarre to those of you that haven't
worked with generators before.

4
00:00:09.440 --> 00:00:12.670
So, just like everything else,
what I'm suggesting to you is not

5
00:00:12.670 --> 00:00:15.600
in five minutes you're going to
be an expert on this pattern.

6
00:00:15.600 --> 00:00:19.090
But I'm trying to suggest to you,
if you trust me at all,

7
00:00:19.090 --> 00:00:22.840
trust me that this is where you should
spend a whole bunch of time thinking, and

8
00:00:22.840 --> 00:00:24.360
practicing, and reading,

9
00:00:24.360 --> 00:00:28.700
because it's going to change everything
that we do, with asynchronous programming.

10
00:00:28.700 --> 00:00:32.720
I'm 100% convinced it's one of the most
revolutionary changes to our language.

11
00:00:34.120 --> 00:00:36.370
That's why we spend
time thinking about it.

12
00:00:36.370 --> 00:00:37.240
Okay.

13
00:00:37.240 --> 00:00:43.150
So, if we can pause a generator while
it's running, it's also message passing.

14
00:00:44.340 --> 00:00:48.370
So here, I'm not just calling yield but
I'm actually calling yield with a value.

15
00:00:48.370 --> 00:00:52.320
In the previous case, when I showed
no value in the yield expression,

16
00:00:52.320 --> 00:00:54.270
it was assumed that I
was yielding undefined.

17
00:00:54.270 --> 00:00:57.270
But here I'm yielding actual
values like 1, 2, and 3, and

18
00:00:57.270 --> 00:01:04.200
you notice that when I call yield 1,
I return control back to line 9.

19
00:01:04.200 --> 00:01:08.950
By way of returning a value
.next returns as an object.

20
00:01:08.950 --> 00:01:10.200
That has two properties on it.

21
00:01:10.200 --> 00:01:14.040
It has a value property with
the value that was yielded, if any.

22
00:01:14.040 --> 00:01:19.020
And it has a done property that tells us
true or false is the generator complete.

23
00:01:20.440 --> 00:01:22.240
So that's where we get value: 1,
done: false.

24
00:01:23.590 --> 00:01:28.241
And then we can call .next again
right away or at some later time.

25
00:01:28.241 --> 00:01:34.280
And we're gonna get value: 2, done: falls,
and we want to call it again and yield 3.

26
00:01:34.280 --> 00:01:39.450
At that moment, it kind of looks to you
visually like the generator is done, but

27
00:01:39.450 --> 00:01:40.180
it's not really done.

28
00:01:41.190 --> 00:01:42.450
That's why we still get done: false,

29
00:01:42.450 --> 00:01:46.300
because technically it's paused
on that last expression.

30
00:01:46.300 --> 00:01:48.280
Even though visually,
we can look at the generator and

31
00:01:48.280 --> 00:01:52.230
say it's not going to do anything else,
technically it's still paused.

32
00:01:53.600 --> 00:01:56.290
Technically, you can still
do something with it.

33
00:01:56.290 --> 00:01:59.930
So that's why the fourth .next
down there on line thirteen

34
00:01:59.930 --> 00:02:03.100
would resume the generator
of the pause line four.

35
00:02:03.100 --> 00:02:04.630
Immediately, there is nothing else to do.

36
00:02:04.630 --> 00:02:06.970
It would finish, it would complete.

37
00:02:06.970 --> 00:02:10.760
And then we would get an object back
that there was no value given to us but

38
00:02:10.760 --> 00:02:11.730
there was a done: true.

39
00:02:13.370 --> 00:02:14.620
Now what about that value: undefined.

40
00:02:14.620 --> 00:02:16.570
Where do you suppose that comes from?

41
00:02:17.710 --> 00:02:21.330
Where it comes from is that in JavaScript,
all functions that don't have a return

42
00:02:21.330 --> 00:02:25.200
statement imply a return
undefined at the end.

43
00:02:25.200 --> 00:02:28.200
So, there's an implied return
undefined on line four and a half.

44
00:02:28.200 --> 00:02:31.430
Had we chosen to do a different
return value, like for example,

45
00:02:31.430 --> 00:02:36.210
return four,
we would have gotten value for done: true.

46
00:02:36.210 --> 00:02:39.640
On line 13.
Does that make sense?

47
00:02:39.640 --> 00:02:43.590
So, at any point when you do a return from
a generator, you immediately complete

48
00:02:43.590 --> 00:02:46.680
the generator, and whatever you've
returned is sent out as the value.

49
00:02:47.810 --> 00:02:51.090
But if you do a yield, the value is
sent out and you get a done: false.

50
00:02:52.830 --> 00:02:53.460
Yeah?

51
00:02:53.460 --> 00:02:58.120
&gt;&gt; Speaker 2: Can you iterate it, do a for
each as a collection and get the value and

52
00:02:58.120 --> 00:03:01.160
stuff moving one .next at a time?

53
00:03:01.160 --> 00:03:04.356
&gt;&gt; Kyle: I'm sorry,
maybe ask the question-

54
00:03:04.356 --> 00:03:05.767
&gt;&gt; Speaker 2: You're doing it.next,

55
00:03:05.767 --> 00:03:06.990
and you get the value.

56
00:03:06.990 --> 00:03:09.680
Then you do an iterator .next,
you get the next value?

57
00:03:09.680 --> 00:03:10.340
&gt;&gt; Kyle: Yeah.
&gt;&gt; Speaker 2: Instead,

58
00:03:10.340 --> 00:03:14.590
can we loop through,
like a four each loop, like a collection?

59
00:03:14.590 --> 00:03:17.120
&gt;&gt; Kyle: Can you automatically
run through a whole iterator?

60
00:03:17.120 --> 00:03:20.370
Absolutely, that's actually got nothing,
not specifically about generators.

61
00:03:20.370 --> 00:03:22.230
It's any iterator.

62
00:03:22.230 --> 00:03:24.020
Can be run through a loop.

63
00:03:24.020 --> 00:03:26.760
You could do your own
four eye loop like that.

64
00:03:26.760 --> 00:03:30.508
You could be looking for
the done: true thing,

65
00:03:30.508 --> 00:03:34.520
like a while loop looking for done: true.

66
00:03:34.520 --> 00:03:39.250
But there was a new looping style
added to ES6, specifically for

67
00:03:39.250 --> 00:03:42.091
consuming iterators, and
it's the four of loop.

68
00:03:43.470 --> 00:03:46.770
So, instead of four or four end,
we now have a four of loop.

69
00:03:46.770 --> 00:03:50.450
And if you give it an iterator,
even one from a generator,

70
00:03:50.450 --> 00:03:53.540
if you give it an iterator,
it will run the iterator to completion.

71
00:03:54.740 --> 00:03:57.690
And it automatically looks for
the done: false and all that stuff.

72
00:03:57.690 --> 00:04:00.500
So, if you want to consume an iterator
there is a looping syntax for it.

73
00:04:00.500 --> 00:04:03.068
So, that's a very synchronous
syntax which may or

74
00:04:03.068 --> 00:04:05.288
may not be what you want
with the generator.

75
00:04:11.338 --> 00:04:12.073
&gt;&gt; Kyle: All right, so

76
00:04:12.073 --> 00:04:15.960
this is clearly illustrating
that messages can be passed out.

77
00:04:15.960 --> 00:04:19.750
But, it turns out that this is not only
a one- way message passing, but actually

78
00:04:19.750 --> 00:04:24.210
they yield in the next pair together to
create a two-way message passing system.

79
00:04:24.210 --> 00:04:28.030
So, not only can we yield messages out,
but when we call the next method

80
00:04:28.030 --> 00:04:32.040
we can pass a message in, and
that message goes into the generator.

81
00:04:33.360 --> 00:04:37.670
I'm going to create a little helper for
myself just to save space on the slides.

82
00:04:37.670 --> 00:04:41.650
Don't get too wrapped up in what this is,
but it's wrapping around a generator.

83
00:04:41.650 --> 00:04:45.500
You see on line 2, I'm executing my
generator to produce an iterator.

84
00:04:45.500 --> 00:04:48.860
And then I'm returning a function that
every time that function gets called,

85
00:04:48.860 --> 00:04:54.040
it's going to call the iterators.next pass
in any arguments and return any value out.

86
00:04:54.040 --> 00:04:57.180
So, I'm just wrapping up the
interator.next ,something that's a little

87
00:04:57.180 --> 00:05:00.230
cleaner and easier to illustrate with.

88
00:05:00.230 --> 00:05:01.830
But any time you see the usage of this,

89
00:05:01.830 --> 00:05:04.997
you can just think it's just
calling.next under the covers, okay?

90
00:05:06.798 --> 00:05:09.160
&gt;&gt; Kyle: So this little helper.

91
00:05:09.160 --> 00:05:10.640
I'm gonna pass my generator to it,

92
00:05:10.640 --> 00:05:14.040
and what I get back is going
to be a thing I call run.

93
00:05:14.040 --> 00:05:15.560
So, run is a function.

94
00:05:15.560 --> 00:05:18.230
Every time I call run,
it's calling the iterators next.

95
00:05:18.230 --> 00:05:20.850
So whenever you see run,
this thing IT dot next.

96
00:05:22.810 --> 00:05:26.590
All right, so I haven't run anything
in my generator on line 1, but

97
00:05:26.590 --> 00:05:30.080
I've simply set up this
generator to be executed.

98
00:05:30.080 --> 00:05:33.960
And on line 7,
I'm going to call the first run.

99
00:05:33.960 --> 00:05:36.500
That's the first I teed up next call, and

100
00:05:36.500 --> 00:05:39.690
it's going to transfer
control up to line 2.

101
00:05:39.690 --> 00:05:44.100
Now on line two, it's going to start to
execute as a var X equals one plus and

102
00:05:44.100 --> 00:05:46.290
I see a yield expression.

103
00:05:47.510 --> 00:05:50.250
I cannot complete this
statement at this moment.

104
00:05:50.250 --> 00:05:53.180
So, I'm literally going to pause
the generator right in the middle of this

105
00:05:53.180 --> 00:05:58.320
statement, and wait for
somebody to resume me, okay.

106
00:05:58.320 --> 00:06:02.290
So, that yield keyword is going
to return control to line seven.

107
00:06:02.290 --> 00:06:07.480
Now, that value that came back the IT dot
next return value that we would see here

108
00:06:07.480 --> 00:06:09.670
would be an object that says,

109
00:06:09.670 --> 00:06:14.140
value undefined because we didn't
yield anything, done: false.

110
00:06:14.140 --> 00:06:15.523
Is everybody with me?

111
00:06:15.523 --> 00:06:17.420
Value undefined, done: false.

112
00:06:17.420 --> 00:06:20.355
Had we yielded something that would
have been value whatever we yielded and

113
00:06:20.355 --> 00:06:21.202
still done: false.

114
00:06:22.947 --> 00:06:26.054
&gt;&gt; Kyle: But here's where I want
to tweak your brain a little bit,

115
00:06:26.054 --> 00:06:29.683
because this is all about perspective
that helps you understand,

116
00:06:29.683 --> 00:06:31.980
gives you a path for understanding this.

117
00:06:33.200 --> 00:06:33.950
What I want you to do is,

118
00:06:33.950 --> 00:06:37.320
I want you to think about the perspective
not from the outside world.

119
00:06:37.320 --> 00:06:39.620
Because the outside world is how
we typically would think about it.

120
00:06:39.620 --> 00:06:42.800
We think about driving this
generator by our run calls.

121
00:06:42.800 --> 00:06:45.570
Want you to think about it
from the inside perspective.

122
00:06:45.570 --> 00:06:50.090
From what's happening in the generator
at the moment that I am online too ,and

123
00:06:50.090 --> 00:06:55.020
I encounter a yield keyword essential in
this yield keyword is asking a question.

124
00:06:56.250 --> 00:06:59.450
It is saying, I need some value here.

125
00:06:59.450 --> 00:07:03.210
It's like a placeholder that says,
I need some value and I don't have it yet.

126
00:07:04.400 --> 00:07:06.848
I'm going to wait around until
somebody gives me a value.

127
00:07:08.662 --> 00:07:11.320
&gt;&gt; Kyle: Because I obviously need
a value to finish the statement.

128
00:07:11.320 --> 00:07:12.810
Does everybody agree with that?

129
00:07:12.810 --> 00:07:15.030
Okay.
So, I'm simply going to pause waiting for

130
00:07:15.030 --> 00:07:18.670
a value, and I will tell you outside
world that I've asked a question.

131
00:07:18.670 --> 00:07:21.030
I am asking for you to give me a value.

132
00:07:21.030 --> 00:07:23.640
At some later point like line 8,

133
00:07:23.640 --> 00:07:27.560
we're going to answer that question
by sending a value back in.

134
00:07:27.560 --> 00:07:31.890
And that value 10,
will come in and will replace or

135
00:07:31.890 --> 00:07:35.220
complete that yield
expression with that value.

136
00:07:35.220 --> 00:07:37.560
So, now the generator can resume and

137
00:07:37.560 --> 00:07:41.370
it can finish its work cuz it says,
thank you for answering my question.

138
00:07:41.370 --> 00:07:44.120
The answer to my question was value ten.

139
00:07:44.120 --> 00:07:48.270
So, now I can add ten and
one together and x is 11.

140
00:07:48.270 --> 00:07:53.280
From the inside perspective,
that's the key perspective you wanna have.

141
00:07:53.280 --> 00:07:56.830
Don't think so much about what's happening
on the outside because the outside stuff

142
00:07:56.830 --> 00:07:59.580
is actually going to end up being
buried away in some library.

143
00:07:59.580 --> 00:08:01.380
It's the inside stuff that matters.

144
00:08:02.390 --> 00:08:04.640
It's what's happening on
the inside of the generator.

145
00:08:04.640 --> 00:08:06.250
I'm asking a question.

146
00:08:06.250 --> 00:08:08.000
Now, here I asked a very simple question.

147
00:08:08.000 --> 00:08:08.700
I just said yield.

148
00:08:08.700 --> 00:08:09.930
I said give me some value.

149
00:08:09.930 --> 00:08:14.090
But what if my question was
like making an AJAX call.

150
00:08:14.090 --> 00:08:16.380
And I said I need a response
from an AJAX call.

151
00:08:16.380 --> 00:08:17.610
And I don't know how
long it's going to take,

152
00:08:17.610 --> 00:08:20.580
but I'll just wait around
until you give me a response.

153
00:08:21.690 --> 00:08:23.265
So, we could have yielded an AJAX call.

154
00:08:23.265 --> 00:08:26.270
Okay.

155
00:08:26.270 --> 00:08:29.440
So, we've sent an answer
back in by way of value ten.

156
00:08:30.530 --> 00:08:32.720
X is now 11, we go to line three.

157
00:08:32.720 --> 00:08:37.300
We start executing like one plus and
then another yield keyword.

158
00:08:37.300 --> 00:08:40.320
So, we're asking another question,
which means we're gonna pause and

159
00:08:40.320 --> 00:08:43.230
wait for that answer, and we're gonna
return control back to line eight.

160
00:08:43.230 --> 00:08:49.754
Line eight is gonna say, is gonna have
an object value, undefined done: false.

161
00:08:49.754 --> 00:08:52.780
Just like line seven.

162
00:08:52.780 --> 00:08:56.850
At some later point,
we're gonna answer that pending question

163
00:08:58.580 --> 00:09:01.450
by passing in the value 30
as we're doing on line ten.

164
00:09:02.720 --> 00:09:04.560
So that value 30 is going to come back and

165
00:09:04.560 --> 00:09:07.550
complete the yield expression
that was waiting on line three.

166
00:09:08.850 --> 00:09:11.870
Now, 30 can be added to one,
and now y is 31.

167
00:09:11.870 --> 00:09:14.540
X was previously set to 11.

168
00:09:14.540 --> 00:09:18.060
And now, even though it's
confusing with all these arrows,

169
00:09:18.060 --> 00:09:21.370
line four is going to yield out a value.

170
00:09:21.370 --> 00:09:23.940
You see,
there is a value that I compute x plus y.

171
00:09:23.940 --> 00:09:27.360
It gets computed right away
which is the value 42.

172
00:09:27.360 --> 00:09:30.782
So, that's me asking
the question with the value 42.

173
00:09:32.647 --> 00:09:37.004
&gt;&gt; Kyle: So, I want to send out the value
42, and that's why I can say dot value,

174
00:09:37.004 --> 00:09:40.190
cuz I got an object that
said value 42 done: false.

