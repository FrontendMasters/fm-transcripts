WEBVTT

1
00:00:00.000 --> 00:00:04.187
[MUSIC]

2
00:00:04.187 --> 00:00:07.038
&gt;&gt; Kyle Simpson: Exercise eight is
designed to get you a little bit of

3
00:00:07.038 --> 00:00:10.222
practice playing around with
the notion of streams, and

4
00:00:10.222 --> 00:00:12.230
making your own stream responses.

5
00:00:12.230 --> 00:00:14.059
Let me quickly orient you exercise eight.

6
00:00:24.154 --> 00:00:27.221
&gt;&gt; Kyle Simpson: You'll notice that
exercise eight starts out with a button

7
00:00:27.221 --> 00:00:31.514
and a list, and you're gonna subscribe to
the click event we're using jQuery here

8
00:00:31.514 --> 00:00:33.000
just to make things simple.

9
00:00:33.000 --> 00:00:34.400
So you don't have to worry about DOMstuff.

10
00:00:34.400 --> 00:00:36.860
We're gonna subscribe to the click
event on that button, and

11
00:00:36.860 --> 00:00:38.150
then we're gonna do something.

12
00:00:39.910 --> 00:00:42.770
And it's that something that you're
gonna have to figure out how to do.

13
00:00:42.770 --> 00:00:46.399
But elsewhere in our app,
that is down on line nine,

14
00:00:46.399 --> 00:00:51.360
we're gonna listen to a sequence
that's gonna be a sampled sequence.

15
00:00:51.360 --> 00:00:52.070
So this is what I mean.

16
00:00:52.070 --> 00:00:54.270
Sampling is a time based thing.

17
00:00:54.270 --> 00:00:56.210
So let's say you click the button really,
really fast.

18
00:00:57.250 --> 00:01:01.230
I only wanna hear a single
event every 500 milliseconds.

19
00:01:01.230 --> 00:01:02.772
I wanna throttle that stream,

20
00:01:02.772 --> 00:01:06.656
so I'm gonna have a stream that's coming
fast to send in a bunch of data down.

21
00:01:06.656 --> 00:01:10.110
But I wanna create a composed stream that

22
00:01:10.110 --> 00:01:13.060
only sends me out an event
ever 500 milliseconds.

23
00:01:13.060 --> 00:01:16.650
And ignores and drops all those
repetitive ones that are coming too fast.

24
00:01:17.760 --> 00:01:20.880
And I wanna subscribe to
that sampled stream, and

25
00:01:20.880 --> 00:01:24.630
drop those messages into the list box.

26
00:01:24.630 --> 00:01:27.770
So just to show you visually
what you're gonna be expecting.

27
00:01:27.770 --> 00:01:31.320
Let me pop up the fixed version
of exercise eight, just so

28
00:01:31.320 --> 00:01:33.710
you visually understand what
you're trying to go for here.

29
00:01:35.670 --> 00:01:39.950
So if I click the click me,
it adds a single message to it.

30
00:01:39.950 --> 00:01:41.430
Click it again, it adds another message.

31
00:01:41.430 --> 00:01:43.040
But if I start clicking it really fast,

32
00:01:43.040 --> 00:01:45.794
you'll notice that I'm only getting
one event every 500 milliseconds.

33
00:01:47.140 --> 00:01:49.790
Okay, that's it, that's all we're doing.

34
00:01:49.790 --> 00:01:53.060
You play around with how you can set
yourself up with a set interval,

35
00:01:53.060 --> 00:01:56.350
and sample a stream and
see what you come up with.

36
00:01:56.350 --> 00:02:00.750
So we'll take about, let's call this 15
minutes for you to play around with this.

37
00:02:00.750 --> 00:02:01.310
It's not a lot of code.

38
00:02:01.310 --> 00:02:04.410
If you need some hints,
look at the fixed version.

39
00:02:04.410 --> 00:02:08.494
But this should get your brain starting
to think about events as our pattern

40
00:02:08.494 --> 00:02:09.231
for async.

