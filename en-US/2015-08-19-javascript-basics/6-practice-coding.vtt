WEBVTT

1
00:00:00.750 --> 00:00:04.200
&gt;&gt; Kyle Simpson: The next observation that
we wanna make, which follows along with

2
00:00:04.200 --> 00:00:08.960
this understanding of execution and
the fact that a program needs to get run,

3
00:00:08.960 --> 00:00:12.610
is that there is no substitution for
running these programs yourself.

4
00:00:12.610 --> 00:00:13.810
So while you will see me for

5
00:00:13.810 --> 00:00:18.270
the visual purposes, I'll do a lot
of code writing in my code editor.

6
00:00:18.270 --> 00:00:21.060
And in a code editor it's not
actually running anything for me.

7
00:00:21.060 --> 00:00:23.770
An IDE might but
there's no running environment here so

8
00:00:23.770 --> 00:00:25.710
it isn't checking my program.

9
00:00:25.710 --> 00:00:29.770
You're going to want to run
these sorts of programs

10
00:00:29.770 --> 00:00:32.000
in an actual JavaScript environment.

11
00:00:32.000 --> 00:00:36.350
And it turns out that one of the easiest
lowest hanging fruit ways of doing that

12
00:00:36.350 --> 00:00:39.850
is if you're in a browser
you can open up the console.

13
00:00:39.850 --> 00:00:41.800
So I'm using the Chrome browser.

14
00:00:41.800 --> 00:00:44.950
There's a question.

15
00:00:44.950 --> 00:00:49.710
Question in the chatroom is JavaScript
provides you an error on runtime, right?

16
00:00:49.710 --> 00:00:51.270
Javascript does both.

17
00:00:51.270 --> 00:00:55.650
It has both, what we call static errors,
that is, something where the compiler said

18
00:00:55.650 --> 00:00:58.670
hey that's invalid syntax,
you did something wrong.

19
00:00:58.670 --> 00:01:03.000
And it also has runtime errors,
where the syntax was correct but

20
00:01:03.000 --> 00:01:05.290
that you tried to do
something invalid with that,

21
00:01:05.290 --> 00:01:09.640
like you tried to assign to
something that was read-only.

22
00:01:09.640 --> 00:01:13.370
Or you tried to run something as
a function and it wasn't a function.

23
00:01:13.370 --> 00:01:17.380
Those are run time errors so
JavaScript has both.

24
00:01:17.380 --> 00:01:19.420
What's an interpreted
language in a nut shell?

25
00:01:20.430 --> 00:01:22.820
Yeah essentially,
it's gonna take it line by line.

26
00:01:22.820 --> 00:01:25.890
When it's on line three it doesn't
know what to expect of line four.

27
00:01:25.890 --> 00:01:28.290
A compiled language looks at and

28
00:01:28.290 --> 00:01:32.720
understands all four lines first
before trying to run the first line.

29
00:01:32.720 --> 00:01:35.350
So that it implies that there's
multiple passes happening.

30
00:01:38.470 --> 00:01:41.810
Okay, so if I'm in the Chrome
browser as you see here.

31
00:01:43.220 --> 00:01:46.972
Most people know about keyboard shortcuts,
if you get into development, so

32
00:01:46.972 --> 00:01:51.560
command option on a Mac and a Chrome
will pop up, your developer tools and

33
00:01:51.560 --> 00:01:54.320
I have mine set that it defaults
to popping up the console.

34
00:01:54.320 --> 00:01:58.550
If you are looking for a way to do it
manually you can come over here and

35
00:01:58.550 --> 00:02:01.080
in your chrome developer tools
there is a more tools and

36
00:02:01.080 --> 00:02:04.820
then you can go directly to your console
and it is going to do the same thing.

37
00:02:04.820 --> 00:02:08.700
Yours might pop up on the right hand side
it might pop up in a separate window

38
00:02:08.700 --> 00:02:13.256
I like to keep mine anchored into
the bottom of my browser window.

39
00:02:13.256 --> 00:02:16.440
But it doesn't really matter how it
looks up, how it shows up to you.

40
00:02:16.440 --> 00:02:19.360
Open up your JavaScript console and
you'll notice that it's kind of like

41
00:02:20.510 --> 00:02:24.420
we can just type some code in, it's
kind of inviting us like type some code.

42
00:02:24.420 --> 00:02:26.190
So we can literally just type some code.

43
00:02:26.190 --> 00:02:28.600
I could say something like a=2.

44
00:02:30.660 --> 00:02:31.570
And if I hit enter,

45
00:02:33.760 --> 00:02:38.150
it's actually gonna run that statement as
if that statement was a program, okay.

46
00:02:38.150 --> 00:02:41.118
Now I'm gonna refresh my environment and

47
00:02:41.118 --> 00:02:46.390
I'm gonna go back to this program here,
the a=2, and then the 2().

48
00:02:46.390 --> 00:02:51.700
And I'm gonna run this and what you're
gonna see when I try to run that program.

49
00:02:51.700 --> 00:02:53.570
Is that I get an error.

50
00:02:54.630 --> 00:02:56.980
This error says two is not a function.

51
00:02:58.530 --> 00:03:01.350
In other words,
it checked the program first.

52
00:03:01.350 --> 00:03:03.480
There's no a that has been run.

53
00:03:03.480 --> 00:03:07.360
It was invalid to try to
run two as a function.

54
00:03:07.360 --> 00:03:11.170
There's lots of other syntax errors
that we could come up with, okay?

55
00:03:11.170 --> 00:03:13.957
So for example, if I had 2 = 3, right,

56
00:03:13.957 --> 00:03:19.062
the value two on the left-hand side is
not something that can get assigned,

57
00:03:19.062 --> 00:03:23.160
it's not a variable, so
it can't get assigned something.

58
00:03:23.160 --> 00:03:28.240
So that is yet again an example
of something that can be caught

59
00:03:28.240 --> 00:03:31.580
kind of at the compiler phase you've
written something totally invalid.

60
00:03:31.580 --> 00:03:34.310
But here's something that can't be
caught at the compiler phase that has to

61
00:03:34.310 --> 00:03:35.390
be run time.

62
00:03:35.390 --> 00:03:40.540
If I say something like a( ),
open close parenthesis.

63
00:03:40.540 --> 00:03:45.860
What it cannot known is if at that exact
moment of my program is a function or

64
00:03:45.860 --> 00:03:47.870
not, it doesn't know that yet.

65
00:03:47.870 --> 00:03:51.230
So it has to try to run the program and
if it fails.

66
00:03:51.230 --> 00:03:54.397
In this case it's failing cuz there
isn't an a, that's a mistake.

67
00:03:54.397 --> 00:03:59.600
So let's make b and a and then let's
try that a ( ) and you'll notice

68
00:03:59.600 --> 00:04:06.250
that it fails as a type error because
a doesn't have a function value in it.

69
00:04:06.250 --> 00:04:09.220
If a had a function value in it,
then the function call would've worked.

70
00:04:09.220 --> 00:04:13.122
So that's what we meant between the
distinction between compiling something,

71
00:04:13.122 --> 00:04:17.020
knowing ahead of time that it's broken,
versus needing to try to run the program

72
00:04:17.020 --> 00:04:26.349
to find out if it works or not.
&gt;&gt; Kyle Simpson: Hopefully

73
00:04:26.349 --> 00:04:28.739
the most recent question in
the chat room has been answered.

74
00:04:30.150 --> 00:04:33.630
JavaScript catches invalid syntax
by compiling your program first and

75
00:04:33.630 --> 00:04:38.070
then executing the compiled code,
as opposed to a scripting language which

76
00:04:38.070 --> 00:04:40.480
can't catch the syntax errors
until it gets to them.

77
00:04:42.180 --> 00:04:49.210
Okay, so it's important to try from here
on out to run programs in an environment.

78
00:04:49.210 --> 00:04:53.380
And the easiest way for you to try that
is something like your developer console.

79
00:04:53.380 --> 00:04:57.520
There are other ways to do this,
there are sites like JSbin,

80
00:04:57.520 --> 00:05:01.230
JSfiddle and a dozen other ones out there,
that you can go to the site and

81
00:05:01.230 --> 00:05:03.220
type in some code, and run a program.

82
00:05:03.220 --> 00:05:04.570
Those ones are fine too.

83
00:05:04.570 --> 00:05:07.740
For our purposes,
I think the most basic is the best.

84
00:05:07.740 --> 00:05:09.470
Just try it in your console.

85
00:05:09.470 --> 00:05:13.000
So essentially what I'm asserting
here in the book is I'm saying,

86
00:05:13.000 --> 00:05:15.750
don't just take these things for granted.

87
00:05:15.750 --> 00:05:20.010
That if I say a equals two,
it works, try them yourself.

88
00:05:20.010 --> 00:05:25.010
One of the little kind of a tip
here is that you'll notice I

89
00:05:25.010 --> 00:05:30.020
can do a = 2 and if I hit Enter all
by itself it will run the program,

90
00:05:30.020 --> 00:05:34.040
but if I hit Shift Enter it
gives me a second line so

91
00:05:34.040 --> 00:05:39.020
I can keep going, I can enter in a multi
line program hitting Shift Enter and

92
00:05:39.020 --> 00:05:41.900
most of the developer consoles are kind
of like that you can do multi line.

93
00:05:41.900 --> 00:05:46.760
But in my case I'm going to prefer
to write my code in an editor, and

94
00:05:46.760 --> 00:05:50.470
copy and paste it in just so I don't have
to keep hitting Shift Enter and all that,

95
00:05:50.470 --> 00:05:54.320
so you can go either way, but knowing
about the Shift Enter technique is good.

96
00:05:58.430 --> 00:06:02.990
Okay, so in that case,
the question in the chat room is,

97
00:06:02.990 --> 00:06:06.805
if I try var a; a ().

98
00:06:06.805 --> 00:06:10.926
The reason you're

99
00:06:10.926 --> 00:06:16.690
getting that it's a number is
because your environment still has,

100
00:06:16.690 --> 00:06:19.460
a, assigned to value two from
when you typed it in earlier.

101
00:06:20.680 --> 00:06:22.870
So you've been noticing that
I've been refreshing, and

102
00:06:22.870 --> 00:06:24.220
I do that with my keyboard shortcut.

103
00:06:24.220 --> 00:06:27.820
I do CMD R in the browser in Chrome.

104
00:06:27.820 --> 00:06:30.250
To refresh an environment,
to start it over.

105
00:06:30.250 --> 00:06:33.040
So you can do that, or you can hit
the refresh button, or whatever.

106
00:06:33.040 --> 00:06:35.649
But making sure that you start
with a fresh environment

107
00:06:35.649 --> 00:06:38.597
[LAUGH] is a good way to avoid
the accidentally having it as value

108
00:06:38.597 --> 00:06:43.661
too.
&gt;&gt; Speaker 2: Question about

109
00:06:43.661 --> 00:06:46.240
running JavaScript from the command line?
&gt;&gt; Kyle Simpson: Yeah,

110
00:06:46.240 --> 00:06:49.210
there was a question about,
can JavaScript be run from a command line?

111
00:06:50.350 --> 00:06:53.460
There are command lines
execution environments,

112
00:06:53.460 --> 00:06:56.010
the most notable of which is node.

113
00:06:56.010 --> 00:06:59.770
Node is typically cited as kind of a
service side java script environment, but

114
00:06:59.770 --> 00:07:02.320
node can also run command line programs.

115
00:07:02.320 --> 00:07:06.400
So you could, if you had node installed,
you could run node minus e and

116
00:07:06.400 --> 00:07:09.079
give it a JavaScript program and
run it from the command line.

117
00:07:10.160 --> 00:07:14.170
Or node and give it a file name,
kinda like you talking about with JAVA.

118
00:07:14.170 --> 00:07:18.740
There are other JavaScript
environment outside of browsers, so

119
00:07:18.740 --> 00:07:22.560
a Rhino is one of them,
there is probably maybe three or

120
00:07:22.560 --> 00:07:24.290
four others that am forgetting
off the top of my head.

121
00:07:24.290 --> 00:07:27.840
There are some JavaScript
command line environments,

122
00:07:27.840 --> 00:07:32.940
the most common is definitely node, if you
wanna run JavaScript on the command line.

123
00:07:35.290 --> 00:07:39.240
Yeah, node i o j s, they're forked
versions of the same project.

124
00:07:39.240 --> 00:07:43.060
Looks like they're probably gonna come
back together in a few weeks or months.

125
00:07:43.060 --> 00:07:47.870
So, I'm using node to refer to that
whole family of server side JavaScript.

126
00:07:47.870 --> 00:07:52.080
And yes, node does have a REPL, which
looks a little bit like our thing here,

127
00:07:52.080 --> 00:07:54.290
it's like an actual environment.

128
00:07:54.290 --> 00:07:58.340
I can illustrate that real quick, cuz I
have node installed on my computer, so

129
00:07:58.340 --> 00:07:59.900
I can say node.

130
00:07:59.900 --> 00:08:03.832
And now I'm in a command line
environment where I can do var a = 2 and

131
00:08:03.832 --> 00:08:07.840
try to run the program and
I am going to get my errors.

132
00:08:07.840 --> 00:08:09.820
So note does have a ripple like that.

133
00:08:09.820 --> 00:08:16.153
But also it's a.
&gt;&gt; Kyle Simpson: If I

134
00:08:16.153 --> 00:08:21.093
had a file with that code in it,

135
00:08:21.093 --> 00:08:27.329
a =.
&gt;&gt; Kyle Simpson: I

136
00:08:27.329 --> 00:08:29.970
can't even type in VM anymore.

137
00:08:29.970 --> 00:08:33.930
Okay, so if I had a file called test.js,
and I said, nodetest.js,

138
00:08:33.930 --> 00:08:38.210
that's very similar to Java's
command line environment.

139
00:08:38.210 --> 00:08:39.640
So you can do those things.

140
00:08:39.640 --> 00:08:42.090
Or you can do node, I think it's minus e.

141
00:08:42.090 --> 00:08:48.103
And then give it a string of code
like a = 2, I think that works.

142
00:08:48.103 --> 00:08:50.940
Yeah, so minus e will evaluate
it from the command line.

143
00:08:50.940 --> 00:08:52.820
So there are command line environments.

144
00:08:52.820 --> 00:08:56.980
I would suggest it's probably better
to stick with your developer console

145
00:08:56.980 --> 00:08:58.600
while you're learning JavaScript.

146
00:08:58.600 --> 00:09:01.210
But there are command line environments
if you wanna play with them

