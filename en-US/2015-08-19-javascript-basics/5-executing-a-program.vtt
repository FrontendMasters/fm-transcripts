WEBVTT

1
00:00:00.195 --> 00:00:03.783
&gt;&gt; Kyle Simpson: Okay so let's go back to
the text, I know I kinda jumped around

2
00:00:03.783 --> 00:00:07.440
a little bit and I'll well let's
a get ourself back on track and

3
00:00:07.440 --> 00:00:10.773
make sure we understand that
we track back with the text.

4
00:00:10.773 --> 00:00:16.219
So, [COUGH] and the next topic
that's addressed is what we've

5
00:00:16.219 --> 00:00:23.249
only talked about so far, is how to think
about what a program is structured in.

6
00:00:23.249 --> 00:00:27.194
And maybe start to thinking our brains
about what we do if we wanted to do it,

7
00:00:27.194 --> 00:00:29.826
but it turns out that it's
much more important for

8
00:00:29.826 --> 00:00:33.982
the computer to run our program, in the
end than it is for us to run our program.

9
00:00:33.982 --> 00:00:36.852
So, it is that duality as
was brought up before,

10
00:00:36.852 --> 00:00:41.542
between needing to be able to look at a
program and understand what it should do,

11
00:00:41.542 --> 00:00:45.967
and then being able to rely upon the
computer to do what it actually must do.

12
00:00:45.967 --> 00:00:50.891
And those are two really important
halves of the brain, if you will.

13
00:00:50.891 --> 00:00:52.587
So executing a program,
what does that mean?

14
00:00:52.587 --> 00:00:57.432
Well, essentially it means,
turning the statements that we've written,

15
00:00:57.432 --> 00:01:00.934
like a equals b times 2,
into low level instructions,

16
00:01:00.934 --> 00:01:03.406
that a computer can do something with.

17
00:01:03.406 --> 00:01:06.173
The computer itself would look
at a equals b times 2 and

18
00:01:06.173 --> 00:01:07.689
have no idea what that meant.

19
00:01:07.689 --> 00:01:09.327
JavaScript knows what it means.

20
00:01:09.327 --> 00:01:12.056
JavaScript needs to translate
it into something else,

21
00:01:12.056 --> 00:01:15.944
that then can be translated and translated
further and further down the stack,

22
00:01:15.944 --> 00:01:18.439
until eventually,
you get to that series of 1s and

23
00:01:18.439 --> 00:01:21.357
0s and the computer says,
I know what to do with that.

24
00:01:21.357 --> 00:01:25.427
The 1 means put an electrical charge in
and the 0 means turn it off, and I can

25
00:01:25.427 --> 00:01:29.753
switch back and forth between 1's and
0s really fast, and run all those things

26
00:01:29.753 --> 00:01:33.777
through the circuitry in my computers CPU,
and out pops a number, right?

27
00:01:33.777 --> 00:01:38.378
So, it's this process of getting
something from this high level language,

28
00:01:38.378 --> 00:01:43.775
like JavaScript, this a equals b times 2,
which isn't exactly like natural language.

29
00:01:43.775 --> 00:01:48.238
It's not like I said it'd
be interesting if there was

30
00:01:48.238 --> 00:01:51.809
a programming language where I could say,

31
00:01:51.809 --> 00:01:56.125
set the variable a to the value 2, right?
&gt;&gt; Speaker 2: Cool.

32
00:01:56.125 --> 00:01:58.912
&gt;&gt; Kyle Simpson: There are languages that

33
00:01:58.912 --> 00:02:03.960
are even higher level, than JavaScript is.

34
00:02:03.960 --> 00:02:05.970
And so understanding that sort of,

35
00:02:05.970 --> 00:02:09.056
what we call it in programming
we call it abstraction.

36
00:02:09.056 --> 00:02:13.549
At this level,
it looks like an English sentence.

37
00:02:13.549 --> 00:02:16.813
There would have to be a translation
from that into something lower level cuz

38
00:02:16.813 --> 00:02:19.262
the computer would look at that and
equally be confused.

39
00:02:19.262 --> 00:02:27.410
So a translation level would go from that
to maybe something like a = 2, right.

40
00:02:27.410 --> 00:02:30.814
And then something would have to go
from a = 2 down into another layer,

41
00:02:30.814 --> 00:02:34.702
and we might be getting too far field, but
I just wanna make sure you understand.

42
00:02:34.702 --> 00:02:39.818
So the next layer down might be something
that people refer to as assembly language,

43
00:02:39.818 --> 00:02:44.809
which is still a high level language,
it's not a 1 and a 0 but it's lower level.

44
00:02:44.809 --> 00:02:49.509
And I don't even memorize assembly
language but it's something like mov

45
00:02:49.509 --> 00:02:54.509
a,2 or something like that or I think
it's 2,a or something like that, but

46
00:02:54.509 --> 00:02:59.585
that lower level thing is like, I got
these two different registers in memory or

47
00:02:59.585 --> 00:03:02.578
whatever and
move one into the other, right?

48
00:03:02.578 --> 00:03:07.533
And then finally, at the lowest level
of the stack its taken that thing down

49
00:03:07.533 --> 00:03:09.431
into a series of 1s and 0s.

50
00:03:09.431 --> 00:03:14.593
That's really, really long and that 1 in
0 string tells the computer what to do.

51
00:03:14.593 --> 00:03:19.301
So what we want, is we wanna figure out to
execute my program of course we don't need

52
00:03:19.301 --> 00:03:22.555
this top level, but
we definitely need this a = b level.

53
00:03:22.555 --> 00:03:27.270
We need something to convert it from
that layer down into the next layer.

54
00:03:27.270 --> 00:03:29.619
There'll be something else that
handles it on and on and on,

55
00:03:29.619 --> 00:03:31.054
however many steps it needs to take.

56
00:03:31.054 --> 00:03:33.460
But we need something to
do that first step, and

57
00:03:33.460 --> 00:03:37.794
that something is the JavaScript engine,
the thing that's built into our browser,

58
00:03:37.794 --> 00:03:40.644
the thing that you can invoke
in the developer console.

59
00:03:40.644 --> 00:03:42.826
If you were doing programming on a server,

60
00:03:42.826 --> 00:03:46.049
there's an environment where
JavaScript can run on a server.

61
00:03:46.049 --> 00:03:47.986
And I mean there's all
kinds of different places.

62
00:03:47.986 --> 00:03:51.850
JavaScript can run on watches and
inside of light bulbs, and whatever.

63
00:03:51.850 --> 00:03:55.322
But in every place that there is,
there's a JavaScript engine,

64
00:03:55.322 --> 00:03:57.214
that takes something like a = 2 and

65
00:03:57.214 --> 00:04:00.888
turns it into something that that
environment knows what to do with.

66
00:04:00.888 --> 00:04:03.163
And that's what we mean
by executing a program.

67
00:04:03.163 --> 00:04:07.551
It's taking that source code
that we've written in text form,

68
00:04:07.551 --> 00:04:13.254
converting it into something that the next
layer down knows what to do with, okay?

69
00:04:13.254 --> 00:04:16.764
Now, quick little kind
of myth busting thing.

70
00:04:16.764 --> 00:04:19.696
It is often said of
languages like JavaScript,

71
00:04:19.696 --> 00:04:21.979
that they are scripting languages.

72
00:04:21.979 --> 00:04:25.857
Of course the word script shows up in
JavaScript, so it's natural to assume,

73
00:04:25.857 --> 00:04:27.581
that it's a scripting language.

74
00:04:27.581 --> 00:04:34.800
And it's also often said that
scripting languages are interpreted.

75
00:04:34.800 --> 00:04:38.040
In other words, one statement at a time,
it works on that statement and

76
00:04:38.040 --> 00:04:40.914
then it goes to the next statement and
then the next statement.

77
00:04:40.914 --> 00:04:43.714
So when it's working on
the statement on line three,

78
00:04:43.714 --> 00:04:47.526
it has no idea what to expect of line
four cuz it hasn't gotten there yet.

79
00:04:47.526 --> 00:04:49.676
It's like if you're working
through a to-do list,

80
00:04:49.676 --> 00:04:51.872
and you're like I don't even
care about item two yet,

81
00:04:51.872 --> 00:04:55.090
cuz the top item on my to-do list is
the only thing I'm thinking about, right?

82
00:04:55.090 --> 00:04:59.782
Well, that's what we mean by interpreting,
and there are languages that are, in fact,

83
00:04:59.782 --> 00:05:03.322
interpreted like that,
that are interpreted line by line by line.

84
00:05:03.322 --> 00:05:07.069
An example of that might be something like
a command line scripting like Bash or

85
00:05:07.069 --> 00:05:07.653
whatever.

86
00:05:07.653 --> 00:05:09.239
It's not fully interpreted,

87
00:05:09.239 --> 00:05:13.693
there's a little bit of nuance there but
it's essentially interpreted line by line.

88
00:05:13.693 --> 00:05:18.121
And it's often times assumed
that JavaScript is the same way.

89
00:05:18.121 --> 00:05:21.131
It's often times assumed that JavaScript
interpreted with line one and

90
00:05:21.131 --> 00:05:24.544
then line two and then line three, there
have been many books that have said that.

91
00:05:24.544 --> 00:05:28.940
And it is true that in the very earliest
days of JavaScript it worked a lot

92
00:05:28.940 --> 00:05:29.981
more like that.

93
00:05:29.981 --> 00:05:33.887
It's definitely true that when Brandon
was first inventing it as a prototype,

94
00:05:33.887 --> 00:05:37.851
he didn't really have all the time to go
through all of these sophisticated stuff

95
00:05:37.851 --> 00:05:41.663
so he had to make just bank something out
quickly, and it cut a lot of corners.

96
00:05:41.663 --> 00:05:44.595
And so essentially, in the very
beginning it was kind of that way.

97
00:05:44.595 --> 00:05:47.865
But very quickly, JavaScript matured,
and by very quickly,

98
00:05:47.865 --> 00:05:52.062
I mean within those first couple of years,
JavaScript matured to the point where

99
00:05:52.062 --> 00:05:54.981
interpreting it wasn't really practical,
anymore.

100
00:05:54.981 --> 00:05:57.478
And yet, that myth propagates even today,
people say,

101
00:05:57.478 --> 00:05:59.206
JavaScript's a scripting language.

102
00:05:59.206 --> 00:06:01.747
It's interpreted, it's not.

103
00:06:01.747 --> 00:06:05.647
And the other option,
if it's not an interpreted language,

104
00:06:05.647 --> 00:06:10.299
the other thing that we talk about is
what's called a complied language.

105
00:06:10.299 --> 00:06:13.651
And what a compiled language and
an interpretative language,

106
00:06:13.651 --> 00:06:18.154
the way that they primarily differ, is not
the way you might think that they differ.

107
00:06:18.154 --> 00:06:22.946
So most people think of compilation as I'm
producing some physical series of 1s and

108
00:06:22.946 --> 00:06:26.924
0s and putting those into a file,
that I can send that series of 1s and

109
00:06:26.924 --> 00:06:31.599
0s to other people, and they don't need
to process it, they just need to run it.

110
00:06:31.599 --> 00:06:35.139
And they think about interpreted
languages as not doing that,

111
00:06:35.139 --> 00:06:39.301
that every time you wanna run it,
it has to reprocess from the beginning.

112
00:06:39.301 --> 00:06:44.351
So that's one way of thinking about
the difference between interpreting and

113
00:06:44.351 --> 00:06:47.459
compiled but
the more important distinction,

114
00:06:47.459 --> 00:06:51.809
the one that matters to JavaScript,
is that compilations means,

115
00:06:51.809 --> 00:06:55.399
that there is more than one
pass through your program.

116
00:06:55.399 --> 00:06:58.399
So when you put a program like this,
if that was in a file and

117
00:06:58.399 --> 00:07:01.461
you loaded that up into browser,
line one would never run,

118
00:07:01.461 --> 00:07:04.605
you'd immediately get an error
saying line two is invalid.

119
00:07:04.605 --> 00:07:08.238
Whereas if you put this into a scripting
language like a bash or something,

120
00:07:08.238 --> 00:07:10.902
line one would run and
then you get an error on line two.

121
00:07:10.902 --> 00:07:15.033
And that's the major distinction that we
wanna make between this compilation versus

122
00:07:15.033 --> 00:07:15.845
interpreting.

123
00:07:15.845 --> 00:07:18.806
The good news is that because
JavaScript's compiled,

124
00:07:18.806 --> 00:07:22.775
a lot of these mistakes that you can
make in your programming, are gonna get

125
00:07:22.775 --> 00:07:27.066
caught at the very beginning, before
you've had a chance to mess something up.

126
00:07:27.066 --> 00:07:31.036
You try to run your program and the first
thing that happens is it gets compiled.

127
00:07:31.036 --> 00:07:35.593
And if the compilation throws an error,
and says, hey, you've messed up,

128
00:07:35.593 --> 00:07:36.727
that's not good.

129
00:07:36.727 --> 00:07:40.057
Then you know what you need to fix,
it'll tell you, line two is invalid,

130
00:07:40.057 --> 00:07:44.180
two's not a function, or whatever.
&gt;&gt; Kyle Simpson: Okay,

131
00:07:44.180 --> 00:07:48.421
so that's the distinction we'll make,
and, we'll kind of leave it there.

132
00:07:48.421 --> 00:07:50.304
There's definitely more details,

133
00:07:50.304 --> 00:07:54.199
and I expound on that a lot more in the
scope and closures book in this series.

134
00:07:54.199 --> 00:07:56.133
But we'll kind of leave it for there,

135
00:07:56.133 --> 00:08:00.311
think of JavaScript more like a compiled
language than an interpreted language.

136
00:08:00.311 --> 00:08:05.016
And that is, it doesn't really matter that
JavaScript doesn't get put into binary

137
00:08:05.016 --> 00:08:07.678
form and
distributed the way the exe files are.

138
00:08:07.678 --> 00:08:11.722
What matters is that JavaScript
gets compiled for error checking.

