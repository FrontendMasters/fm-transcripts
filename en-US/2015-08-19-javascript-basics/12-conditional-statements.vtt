WEBVTT

1
00:00:00.450 --> 00:00:03.258
&gt;&gt; Kyle Simpson: We mentioned that there
was a kind of block called a conditional

2
00:00:03.258 --> 00:00:04.680
in if statement.

3
00:00:04.680 --> 00:00:08.080
Let's focus more specifically
on a conditional.

4
00:00:08.080 --> 00:00:11.786
If I have the var [COUGH]
a is equal to 10,

5
00:00:11.786 --> 00:00:16.582
and I wanna do something
only if a is greater than 5,

6
00:00:16.582 --> 00:00:20.402
then I put an if statement around a block.

7
00:00:20.402 --> 00:00:24.680
And here I say a is equal to a times 2.

8
00:00:24.680 --> 00:00:26.910
So I'm only doubling the a variable.

9
00:00:27.970 --> 00:00:31.580
I'm only doubling its value if it
was already greater than 5, for

10
00:00:31.580 --> 00:00:32.220
whatever reason.

11
00:00:33.310 --> 00:00:38.880
The if statement says, take this thing,
whatever this expression is,

12
00:00:38.880 --> 00:00:42.400
and figure out if it's true or false.

13
00:00:44.701 --> 00:00:48.704
&gt;&gt; Kyle Simpson: But there are statement
expressions that you can put there which

14
00:00:48.704 --> 00:00:50.970
are not already true or false.

15
00:00:50.970 --> 00:00:56.677
This one is, the greater than operator
always says that's either a true or false.

16
00:00:56.677 --> 00:01:01.070
So the result of that operator
is always either true or false.

17
00:01:02.240 --> 00:01:06.920
But there are certain expressions that
we could put here that would not result

18
00:01:06.920 --> 00:01:09.290
in true or false by themselves.

19
00:01:09.290 --> 00:01:11.100
For example, that expression.

20
00:01:12.170 --> 00:01:17.810
Which is extremely common in JavaScript,
people put in expression like if (a).

21
00:01:17.810 --> 00:01:20.969
The if statement still expects a true or
a false.

22
00:01:22.590 --> 00:01:26.201
And if you don't pass a true or
a false, guess what has to happen?

23
00:01:26.201 --> 00:01:30.310
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Kyle Simpson: It has to convert.

24
00:01:30.310 --> 00:01:33.540
Remember we talked about
type conversion before?

25
00:01:33.540 --> 00:01:36.750
And I showed you type conversion
with numbers and strings?

26
00:01:36.750 --> 00:01:40.330
Well, there's also type
conversion between any value and

27
00:01:40.330 --> 00:01:43.920
what's called a boolean value,
that is the true or the false value.

28
00:01:43.920 --> 00:01:50.730
So this variable gets converted either
to a true value or a false value.

29
00:01:50.730 --> 00:01:55.430
And the rules for how that conversion
happens are fairly straightforward.

30
00:01:55.430 --> 00:02:00.368
There's a list of values
defined in the JavaScript spec,

31
00:02:00.368 --> 00:02:03.104
which are called falsy values.

32
00:02:03.104 --> 00:02:06.590
Falsy, F-A-L-S-Y, okay?

33
00:02:06.590 --> 00:02:12.279
So falsy values are defined as these.

34
00:02:12.279 --> 00:02:15.526
0, negative 0, NaN,

35
00:02:15.526 --> 00:02:21.865
which is the not a number number,
empty string,

36
00:02:21.865 --> 00:02:26.990
false itself, null, and undefined.

37
00:02:26.990 --> 00:02:31.676
That list of values is the list
of falsy values in JavaScript.

38
00:02:34.264 --> 00:02:37.649
&gt;&gt; Kyle Simpson: And the easiest thing for
me to say is, the way you figure out

39
00:02:37.649 --> 00:02:42.323
if something is truthy, that is, that
it's gonna become true, or it's falsy,

40
00:02:42.323 --> 00:02:46.270
it's gonna become false,
is to just consult this list.

41
00:02:46.270 --> 00:02:49.010
Memorize the list and
then just mentally consult it.

42
00:02:49.010 --> 00:02:54.010
It is either a falsy value because
it's on this list, or the only other

43
00:02:54.010 --> 00:02:59.110
option is that it must be truthy, it must
behave as a true value when coerced.

44
00:03:00.990 --> 00:03:04.686
So essentially, you look at the list,
and if it's on the list, it's falsy,

45
00:03:04.686 --> 00:03:06.764
if it's not on the list,
it must be truthy.

46
00:03:11.216 --> 00:03:15.221
&gt;&gt; Kyle Simpson: So in our case, if that
was our list, let's scroll down now.

47
00:03:15.221 --> 00:03:19.557
In our case, the question that
we now ask is, let me scroll so

48
00:03:19.557 --> 00:03:21.949
I leave the list visible for you.

49
00:03:21.949 --> 00:03:27.380
In our case, is a truthy or falsey?

50
00:03:27.380 --> 00:03:30.340
&gt;&gt; Speaker 3: Truthy cuz it exists.

51
00:03:30.340 --> 00:03:31.920
&gt;&gt; Kyle Simpson: Why is it truthy?

52
00:03:31.920 --> 00:03:33.250
&gt;&gt; Speaker 3: Cuz you assigned it above.

53
00:03:34.350 --> 00:03:35.990
&gt;&gt; Kyle Simpson: Not because
I assigned it above, but

54
00:03:35.990 --> 00:03:38.700
because of what value it currently has.

55
00:03:38.700 --> 00:03:39.475
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Kyle Simpson: Okay,

56
00:03:39.475 --> 00:03:42.021
the value in a is the value 10.

57
00:03:42.021 --> 00:03:45.520
Is the value 10 on the falsy list?

58
00:03:45.520 --> 00:03:46.680
&gt;&gt; Speaker 3: No.

59
00:03:46.680 --> 00:03:48.690
&gt;&gt; Kyle Simpson: So
if it's not on the falsy list,

60
00:03:48.690 --> 00:03:51.640
it has to be conceptually
on the truthy list.

61
00:03:51.640 --> 00:03:55.440
And all we need to know for
now is that a falsy value

62
00:03:55.440 --> 00:04:00.220
becomes false when it has to be a boolean,
and a truthy value becomes true.

63
00:04:00.220 --> 00:04:05.950
So if I said if (a), then a becomes true,
and the if statement executes.

64
00:04:05.950 --> 00:04:09.430
Now what if a was 0, what would happen?

65
00:04:09.430 --> 00:04:13.296
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Kyle Simpson: The 0 value is a falsy

66
00:04:13.296 --> 00:04:16.450
value, so it would result in false.

67
00:04:16.450 --> 00:04:21.080
And the if statement would say,
if false, nope, not gonna do it.

68
00:04:21.080 --> 00:04:25.950
So it makes a conditional decision based
upon whether the expression you give it is

69
00:04:25.950 --> 00:04:26.877
true or false.

70
00:04:26.877 --> 00:04:29.180
&gt;&gt; Speaker 3: So
could a person say if a equal false?

71
00:04:30.500 --> 00:04:33.240
&gt;&gt; Kyle Simpson: You could compare
it directly to the true or

72
00:04:33.240 --> 00:04:37.480
the false value, like that or like that.

73
00:04:37.480 --> 00:04:39.947
I don't recommend it.

74
00:04:39.947 --> 00:04:40.960
&gt;&gt; Speaker 3: Okay.

75
00:04:40.960 --> 00:04:43.700
&gt;&gt; Kyle Simpson: There's lots of nuanced
reasons why I don't recommend it.

76
00:04:43.700 --> 00:04:44.679
We won't go into those weeds.

77
00:04:46.000 --> 00:04:48.578
There's a question in
the chat room about void 0.

78
00:04:48.578 --> 00:04:50.740
So void is an operator.

79
00:04:57.553 --> 00:04:59.518
&gt;&gt; Kyle Simpson: It's not
very commonly used, but

80
00:04:59.518 --> 00:05:05.220
it's an operator that everything that you
give it after the void becomes undefined.

81
00:05:05.220 --> 00:05:09.712
So if I said void 42, if you try
that expression in your browser,

82
00:05:09.712 --> 00:05:15.042
everybody try it, go to your console,
&gt;&gt; Kyle Simpson: Void

83
00:05:15.042 --> 00:05:17.390
42 gives us undefined.

84
00:05:18.720 --> 00:05:21.283
So no matter what you pass to void,
you get undefined back,

85
00:05:21.283 --> 00:05:23.505
which means void 0 also
gives you undefined back.

86
00:05:27.863 --> 00:05:30.950
&gt;&gt; Kyle Simpson: It's an operator,
just like plus or minus or whatever.

87
00:05:30.950 --> 00:05:34.340
It's just an operator that
voids out [COUGH] the value and

88
00:05:34.340 --> 00:05:35.680
leaves undefined in its place.

