WEBVTT

1
00:00:00.430 --> 00:00:02.084
&gt;&gt; Kyle Simpson: A statement,
what does that even mean?

2
00:00:02.084 --> 00:00:06.692
Well a statement is a coherent set
of those words and symbols that go

3
00:00:06.692 --> 00:00:11.750
together to express a single idea,
a single instruction, if you will.

4
00:00:11.750 --> 00:00:14.650
All those statements can
definitely be compound just like

5
00:00:14.650 --> 00:00:17.150
most of my sentences are quite compound.

6
00:00:17.150 --> 00:00:20.020
Statements can be compound and
they can perform more than one task, but

7
00:00:20.020 --> 00:00:25.400
typically there's a roughly one-to-one
match between a statement and

8
00:00:25.400 --> 00:00:27.220
a concept of what you wanna do.

9
00:00:27.220 --> 00:00:32.113
So if I look at this very first statement
that we see here, the a = b * 2,

10
00:00:32.113 --> 00:00:36.270
what I'll do is I'll try to take
these things from the book.

11
00:00:36.270 --> 00:00:38.600
And I'll try to expound upon
them here in my code editor so

12
00:00:38.600 --> 00:00:39.930
it's a little bit easier to read.

13
00:00:39.930 --> 00:00:44.320
So if we have a = b * 2,
this is a single statement.

14
00:00:44.320 --> 00:00:49.218
In JavaScript we recognize a single
statement most typically by the fact

15
00:00:49.218 --> 00:00:52.282
that it ends with this
semicolon character.

16
00:00:52.282 --> 00:00:56.177
Essentially, the semicolon is kinda like a
period at the end of an English sentence.

17
00:00:56.177 --> 00:00:58.685
It's like, I'm done,
I've made that sentence and

18
00:00:58.685 --> 00:01:01.038
I'm done,
I'm gonna go on to the next sentence.

19
00:01:01.038 --> 00:01:03.880
Not all statements require a semicolon.

20
00:01:03.880 --> 00:01:07.638
There will be certain forms of statements
that won't have an ending semicolon,

21
00:01:07.638 --> 00:01:09.160
although you can put them there.

22
00:01:09.160 --> 00:01:12.426
There's very few places that you
could not put a semicolon, but

23
00:01:12.426 --> 00:01:15.190
there are places where
they're not required.

24
00:01:15.190 --> 00:01:17.820
In fact, there's an awful lot of places
where they're not technically required,

25
00:01:17.820 --> 00:01:20.430
and some people like to leave out

26
00:01:20.430 --> 00:01:22.950
semicolons in all of these places and
assume.

27
00:01:22.950 --> 00:01:24.950
And you can do the same thing
in the English language.

28
00:01:24.950 --> 00:01:26.080
A lot of people do on Twitter.

29
00:01:26.080 --> 00:01:30.820
They write entire sentences,
and paragraphs worth of content

30
00:01:30.820 --> 00:01:33.240
with no punctuation,
no spaces, you know, whatever.

31
00:01:33.240 --> 00:01:36.770
The hashtag sentences that you've seen
where we have no punctuation or spaces.

32
00:01:36.770 --> 00:01:40.330
You can do that and
probably still get the point across.

33
00:01:40.330 --> 00:01:44.110
But I would encourage you as starting
out to be a bit more formal about.

34
00:01:44.110 --> 00:01:49.290
So put your semicolons in the places where
it makes sense to end that concept or

35
00:01:49.290 --> 00:01:50.510
that task.

36
00:01:50.510 --> 00:01:54.820
Here what we're doing is saying I
want to do a mathematic operation.

37
00:01:54.820 --> 00:01:58.430
So there's an assignment,
there's a math statement that's happening.

38
00:01:58.430 --> 00:01:59.240
Let's break that down.

39
00:01:59.240 --> 00:01:59.890
What does that mean?

40
00:01:59.890 --> 00:02:02.222
Well I see the number 2,
that's a literal value.

41
00:02:02.222 --> 00:02:06.130
It doesn't need to be interpreted
in any way, shape, or form.

42
00:02:06.130 --> 00:02:10.250
We just know it to be a value and
its intrinsic value is what we make sense.

43
00:02:10.250 --> 00:02:12.700
It is the mathematic number 2.

44
00:02:12.700 --> 00:02:16.900
We see that little asterisk symbol to
the left of it, and the asterisk symbol is

45
00:02:16.900 --> 00:02:22.100
the multiplication operator in most
languages, including JavaScript.

46
00:02:22.100 --> 00:02:25.056
And then to the left of
that we see the b variable.

47
00:02:25.056 --> 00:02:28.410
Now you notice I'm going in right to left
fashion and there's a slight reason why

48
00:02:28.410 --> 00:02:31.631
I'm doing that, which is nuanced, but
we'll come back to that in a moment.

49
00:02:31.631 --> 00:02:35.371
But there's a b operator there,
a b character there,

50
00:02:35.371 --> 00:02:37.330
and what does that signify?

51
00:02:37.330 --> 00:02:40.955
Well if it's not otherwise
a special recognized word,

52
00:02:40.955 --> 00:02:44.240
which we will call those keywords,
by the way.

53
00:02:44.240 --> 00:02:47.980
Keywords being the special recognized
things that a language says.

54
00:02:47.980 --> 00:02:54.860
So for example, for, F-O-R,
or function, F-U-N-C-T-I-O-N.

55
00:02:54.860 --> 00:02:56.710
Those are what we call keywords.

56
00:02:56.710 --> 00:03:00.100
And they're words that have
special meanings to the language.

57
00:03:00.100 --> 00:03:03.710
But the b character has no special
meaning to this JavaScript language.

58
00:03:03.710 --> 00:03:05.420
So if it doesn't have
a special meaning but

59
00:03:05.420 --> 00:03:08.180
it still looks like a word,
then it's a variable.

60
00:03:08.180 --> 00:03:09.370
It's called an identifier.

61
00:03:10.550 --> 00:03:11.160
And in this case,

62
00:03:11.160 --> 00:03:15.490
when an identifier is used in that
position as it is, it's representing,

63
00:03:15.490 --> 00:03:18.920
it's a symbolic representation
of something that holds a value.

64
00:03:18.920 --> 00:03:21.350
Now in our program we don't
see what value it has.

65
00:03:21.350 --> 00:03:25.280
So this isn't a complete program, because
the b variable would have had to been

66
00:03:25.280 --> 00:03:27.590
given some value for
this to make any sense.

67
00:03:27.590 --> 00:03:34.390
Let's pretend for the moment that the b
variable has the value 21 already in it.

68
00:03:34.390 --> 00:03:39.170
So what this statement says is,
go find that b variable, and

69
00:03:39.170 --> 00:03:41.810
the rules of how we find that are scope,
and we'll come back to those later.

70
00:03:41.810 --> 00:03:47.260
But go find that variable and go ask for
what its value is and pull that value out.

71
00:03:47.260 --> 00:03:50.090
So if we get the value 21 out,
multiply that by 2,

72
00:03:50.090 --> 00:03:54.780
and we'd get of course the value 42,
that special meaning of life value.

73
00:03:54.780 --> 00:03:57.010
I use that in most of my
examples just to be silly.

74
00:03:58.330 --> 00:04:01.010
But what we've done is
we've computed something on

75
00:04:01.010 --> 00:04:02.964
what we'd call the right-hand side.

76
00:04:04.660 --> 00:04:07.830
You know, hopefully I don't have to remind
you if you're having trouble with left and

77
00:04:07.830 --> 00:04:10.630
right, you remember just hold up
your left hand and make an L and

78
00:04:10.630 --> 00:04:11.380
that's your left, right?

79
00:04:11.380 --> 00:04:12.430
So, left and right.

80
00:04:12.430 --> 00:04:14.681
And I'm sorry, I'm silly because
I have a four year old son and

81
00:04:14.681 --> 00:04:17.910
a two year old daughter and we're
teaching them things like left and right.

82
00:04:17.910 --> 00:04:20.270
But on the right-hand side,
obviously, there's b * 2.

83
00:04:20.270 --> 00:04:24.020
So that b * 2, that's an expression
we'll come back to in a moment.

84
00:04:24.020 --> 00:04:27.550
And then on the left-hand side,
we have another variable called a.

85
00:04:27.550 --> 00:04:30.480
And in between the two we
have an equal statement.

86
00:04:30.480 --> 00:04:35.650
And that equal statement is a special
kind of operator that means assignment.

87
00:04:35.650 --> 00:04:39.593
So essentially what we're doing is we're
taking everything on the right-hand side,

88
00:04:39.593 --> 00:04:42.149
computing its final value,
whatever that might be, and

89
00:04:42.149 --> 00:04:45.810
then putting that final value into
the thing on the left-hand side.

90
00:04:45.810 --> 00:04:49.828
You can think about this as
right-hand side is the source value,

91
00:04:49.828 --> 00:04:53.400
and the left-hand side is the assignment.

92
00:04:53.400 --> 00:04:56.860
It's the target value,
it's the target location, if you will.

93
00:04:56.860 --> 00:04:59.776
So what I'm saying is,
compute the value on the right-hand side,

94
00:04:59.776 --> 00:05:03.950
which we said would be the value 42,
and assign it into the variable a.

95
00:05:03.950 --> 00:05:06.780
You can see why this, together,
it has several different

96
00:05:06.780 --> 00:05:09.280
little pieces that we had to parse out,
what are these things doing?

97
00:05:09.280 --> 00:05:14.670
But as a coherent grouping of things,
this is called a statement.

98
00:05:14.670 --> 00:05:17.160
And what we've done is compute
the value 42, an assignment.

99
00:05:17.160 --> 00:05:19.950
So we would actually call
this an assignment statement.

100
00:05:21.570 --> 00:05:23.720
Somebody says in the chatroom,
wow the very beginning.

101
00:05:23.720 --> 00:05:24.890
Yep, told ya.

102
00:05:24.890 --> 00:05:26.350
Very beginning, no experience.

103
00:05:26.350 --> 00:05:28.120
If we lose you or if we bore you,

104
00:05:28.120 --> 00:05:31.370
just hang on cuz I promise
we'll get further into stuff.

105
00:05:31.370 --> 00:05:33.770
So that's an assignment statement.

