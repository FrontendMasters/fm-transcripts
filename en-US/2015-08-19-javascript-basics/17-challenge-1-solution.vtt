WEBVTT

1
00:00:00.550 --> 00:00:03.090
&gt;&gt; Kyle Simpson: One of the items stated
that we wanted to set ourselves up a few

2
00:00:03.090 --> 00:00:03.680
variables.

3
00:00:03.680 --> 00:00:07.120
And I indicated that some of
them should be constants.

4
00:00:07.120 --> 00:00:10.940
If you have the advantage of using ES6,
which is,

5
00:00:10.940 --> 00:00:14.200
at the moment,
going to require using a transpiler,

6
00:00:14.200 --> 00:00:17.410
it's a tool that converts your code,
so it'll run in browsers.

7
00:00:17.410 --> 00:00:20.000
So, it's possible to do and
a lot of people are doing it.

8
00:00:20.000 --> 00:00:22.365
I encourage it if you're
writing JavaScript, but

9
00:00:22.365 --> 00:00:25.123
might be slightly overkill for
what we're talking about.

10
00:00:25.123 --> 00:00:29.370
So, either a var here or a const,
if you are using ES6, would have worked.

11
00:00:30.600 --> 00:00:33.470
If we put a var here instead of a const,
the only difference is that we're not

12
00:00:33.470 --> 00:00:36.370
going to get an error if we were to
accidentally change the variable.

13
00:00:36.370 --> 00:00:41.350
But, by convention, if you say var, and
you have an uppercase variable like that,

14
00:00:41.350 --> 00:00:45.110
by convention, people know,
don't ever assign to a thing.

15
00:00:45.110 --> 00:00:50.400
So, it's the difference between
a convention that signals what you want,

16
00:00:50.400 --> 00:00:53.030
versus the language actually enforcing it.

17
00:00:53.030 --> 00:00:55.530
So, even without the enforcement,
we can still get a long way.

18
00:00:55.530 --> 00:00:58.070
So you could have taken these as vars.

19
00:00:58.070 --> 00:01:03.770
Course my bank balance is something that
you would typically think of as changing.

20
00:01:03.770 --> 00:01:07.520
Biggest reason why I make this a variable
instead of a constant, it's a constant for

21
00:01:07.520 --> 00:01:09.410
the purposes of our program.

22
00:01:09.410 --> 00:01:11.610
That is that we don't
change our bank balance.

23
00:01:11.610 --> 00:01:14.210
But the biggest reason why I'd
make it a variable is because

24
00:01:14.210 --> 00:01:18.000
it might be the kind of thing that
you'd want to prompt a user for.

25
00:01:18.000 --> 00:01:20.780
So, if you were gonna try the prompting,
you were gonna do it.

26
00:01:20.780 --> 00:01:26.880
And it's an important note, by the way,
that constants have to have an assignment.

27
00:01:26.880 --> 00:01:30.165
So you can't say something, like,
if you're doing a real const,

28
00:01:30.165 --> 00:01:34.260
you can't say something like const foo,
because it doesn't have an assignment and

29
00:01:34.260 --> 00:01:36.180
it could never be given an assignment.

30
00:01:36.180 --> 00:01:38.738
So that has to be an explicit thing
that's getting assigned to it.

31
00:01:38.738 --> 00:01:42.958
All right, so here's my bank balance,

32
00:01:42.958 --> 00:01:46.940
that would be considered a variable.

33
00:01:46.940 --> 00:01:50.113
Now, my amount is gonna be kind
of my running total, if you will,

34
00:01:50.113 --> 00:01:51.750
of how much I've spent.

35
00:01:51.750 --> 00:01:53.550
We'll come back to
the functions in a minute.

36
00:01:53.550 --> 00:01:57.688
But the main meat of what I wanna do is,
I wanna loop through,

37
00:01:57.688 --> 00:02:01.584
as I hinted in that description,
I wanna loop through and

38
00:02:01.584 --> 00:02:05.255
keep doing something for
as long as I'm able to do it.

39
00:02:05.255 --> 00:02:08.519
So basically, I'm figuring out
what my purchase amount is,

40
00:02:08.519 --> 00:02:10.670
and I am being somewhat irresponsible.

41
00:02:10.670 --> 00:02:13.770
I'm just gonna keep spending until I don't
have any more in my bank account, right?

42
00:02:15.310 --> 00:02:20.694
So here, I'm going to say while the amount
is less than my bank balance, okay.

43
00:02:20.694 --> 00:02:24.990
So amount = amount + PHONE_PRICE,
is buying a new phone.

44
00:02:24.990 --> 00:02:29.420
And you notice my usage of comments here.

45
00:02:29.420 --> 00:02:33.390
In this comment, I didn't say add
the PHONE_PRICE to my current amount.

46
00:02:33.390 --> 00:02:36.550
'Cause that would be repeating
what the code already said.

47
00:02:36.550 --> 00:02:40.210
This was more a why, or a how,
kind of an explanation.

48
00:02:40.210 --> 00:02:42.110
Or, sort of a meta explanation.

49
00:02:42.110 --> 00:02:44.440
So I'm indicating here that
you're buying a new phone.

50
00:02:44.440 --> 00:02:46.750
Now, we want to know if we
can afford the accessory.

51
00:02:46.750 --> 00:02:50.940
I indicated, in that problem statement,
that you would want to be able to purchase

52
00:02:50.940 --> 00:02:53.435
an accessory,
like an extra charger or whatever.

53
00:02:53.435 --> 00:02:56.954
You'd want to purchase the phone
accessory for each phone,

54
00:02:56.954 --> 00:03:01.725
assuming that you haven't gone over a
certain threshold of your spending limit.

55
00:03:01.725 --> 00:03:06.163
So we had a threshold that we declared
as 200 dollars, and after that,

56
00:03:06.163 --> 00:03:10.110
we might buy phones, but
we wouldn't buy any more accessories.

57
00:03:10.110 --> 00:03:10.850
Okay?

58
00:03:10.850 --> 00:03:12.040
So just a simple little

59
00:03:13.360 --> 00:03:17.430
expression in code of how we might be
thinking about things in our mind.

60
00:03:17.430 --> 00:03:20.480
So as long as the running total amount
is less than our spending threshold,

61
00:03:20.480 --> 00:03:23.240
we do want to add in the accessory price.

62
00:03:23.240 --> 00:03:28.460
Otherwise we would just
keep going until the amount

63
00:03:28.460 --> 00:03:32.370
was not, until the amount went
greater than the bank balance.

64
00:03:34.880 --> 00:03:41.110
Now, amount, we don't want to forget
to pay the government, so we now say

65
00:03:41.110 --> 00:03:45.480
amount is equal to amount plus, and here
I call a function, I say calculate tax.

66
00:03:47.000 --> 00:03:53.310
So, that's a set of things that I might do
only once, or I might do multiple times.

67
00:03:53.310 --> 00:03:55.670
In this program, I'm only doing it once.

68
00:03:55.670 --> 00:04:00.120
But there's still value in putting
it in a function, because this code

69
00:04:00.120 --> 00:04:05.520
is more understandable than if I dropped
that same code directly in here.

70
00:04:05.520 --> 00:04:09.990
Because the name of the function
explains something about what I'm doing.

71
00:04:09.990 --> 00:04:14.330
I'm taking adv of the fact that I can name
this function something like calculateTax.

72
00:04:14.330 --> 00:04:18.410
Whereas, if I took just amount times 1.08,
or

73
00:04:18.410 --> 00:04:23.140
whatever I did, that would look less
reasonable, or it would make less sense.

74
00:04:23.140 --> 00:04:27.552
So another virtue of using
functions is that you could

75
00:04:27.552 --> 00:04:33.260
put in a name for

76
00:04:33.260 --> 00:04:37.690
that section of code that makes
the code more understandable.

77
00:04:37.690 --> 00:04:41.018
So, our calculateTax,
we take in an amount, and

78
00:04:41.018 --> 00:04:43.262
we multiply it by the TAX_RATE.

79
00:04:43.262 --> 00:04:45.770
So, TAX_RATE being set up as 0.08.

80
00:04:45.770 --> 00:04:48.850
So this tax amount is just the tax,

81
00:04:48.850 --> 00:04:53.850
the $12 or $8,
whatever it would end up being [COUGH].

82
00:04:53.850 --> 00:04:55.910
And we add that to our existing amount.

83
00:04:56.940 --> 00:05:00.010
And now, we then say,
your purchase amounts, so

84
00:05:00.010 --> 00:05:01.760
this is like the cash register.

85
00:05:01.760 --> 00:05:05.120
Your purchase amount,
and I call formatAmount.

86
00:05:05.120 --> 00:05:05.740
And the reason for

87
00:05:05.740 --> 00:05:10.440
that is, I want it to print out
a nicely printed US dollar figure.

88
00:05:10.440 --> 00:05:14.250
So we have, we're going to put
the dollar symbol in front of it.

89
00:05:14.250 --> 00:05:17.400
And then we want to call that
two fixed method to round it to

90
00:05:17.400 --> 00:05:18.740
a certain number of decimal places.

91
00:05:20.190 --> 00:05:22.430
So I'm calling that format amount.

92
00:05:22.430 --> 00:05:26.560
And then, finally,
as kind of an extra little flourish here,

93
00:05:26.560 --> 00:05:30.560
I would ask,
did I go over my bank balance?

94
00:05:30.560 --> 00:05:34.640
And if I did, I'm going to print out,
you can't afford this.

95
00:05:34.640 --> 00:05:37.510
Now, the way I've set up the program,
of course I've gone over my bank balance,

96
00:05:37.510 --> 00:05:41.740
because I didn't stop until I already went
over it, and then I had to add tax on.

97
00:05:43.020 --> 00:05:47.250
So, thankfully I am preventing myself
from completely running my bank account

98
00:05:47.250 --> 00:05:47.899
down to zero.

99
00:05:49.030 --> 00:05:51.912
But that just illustrates some of
these concepts that we talked about.

100
00:05:51.912 --> 00:05:55.060
You can see that there are conditionals
to help us make a decision.

101
00:05:55.060 --> 00:05:56.870
Should we do something or not.

102
00:05:56.870 --> 00:05:58.373
In this case, the decision is whether or

103
00:05:58.373 --> 00:06:02.761
not we print something.
&gt;&gt; Kyle Simpson: Here, the conditional

104
00:06:02.761 --> 00:06:06.900
is whether or not we do something extra
inside of this loop that's happening.

105
00:06:06.900 --> 00:06:10.560
Here, the conditional is deciding
if it's time to stop the loop, or

106
00:06:10.560 --> 00:06:12.050
if we should keep going.

107
00:06:12.050 --> 00:06:15.610
These functions are things that
we can call one or many times.

108
00:06:15.610 --> 00:06:19.466
They're a collection of things,
we can pass values in as we are doing,

109
00:06:19.466 --> 00:06:22.630
we can pass arguments in that
get set to these parameters.

110
00:06:22.630 --> 00:06:26.229
We can also take advantage of
return values to return things out.

111
00:06:26.229 --> 00:06:30.186
You'll notice that these two functions
don't make any changes to the variables

112
00:06:30.186 --> 00:06:31.069
outside of them.

113
00:06:32.310 --> 00:06:35.295
And that's actually an intentional
design decision on my part.

114
00:06:35.295 --> 00:06:39.252
Rather than me saying in here,
instead of saying return,

115
00:06:39.252 --> 00:06:44.200
I could have said something like amount
equals amount plus the tax rate.

116
00:06:44.200 --> 00:06:45.276
Right, I could have done that.

117
00:06:45.276 --> 00:06:46.985
But if I'd done it that way,

118
00:06:46.985 --> 00:06:51.920
I'd be making what's called a side effect
of a function call, which would work.

119
00:06:51.920 --> 00:06:55.540
We saw several examples of that earlier
with the foo and bar functions, but

120
00:06:55.540 --> 00:07:00.590
it's typically considered to be a less
graceful form of programming for

121
00:07:00.590 --> 00:07:02.620
your functions to have those side-effects.

122
00:07:02.620 --> 00:07:07.330
So you typically will think about a
function as being entirely self-contained.

123
00:07:07.330 --> 00:07:10.840
You pass in a value, or
multiple values if you need to.

124
00:07:10.840 --> 00:07:14.270
You get one return value out, and
everything that happens inside of

125
00:07:14.270 --> 00:07:18.420
the function is sort of self-contained,
and you don't make any changes outside.

126
00:07:18.420 --> 00:07:22.330
And you try not to rely upon stuff
outside of the function as well.

127
00:07:22.330 --> 00:07:25.831
Although there are cases where it's
inconvenient to pass in everything.

128
00:07:25.831 --> 00:07:29.963
So these are not hard and fast rules, but
just stylistically, you typically wanna

129
00:07:29.963 --> 00:07:33.990
design your functions to have as little
impact to the outside world as possible.

130
00:07:35.190 --> 00:07:37.150
There's one big caveat to that,

131
00:07:37.150 --> 00:07:40.630
which is not a topic that we're
gonna go heavily into right now.

132
00:07:40.630 --> 00:07:42.800
But there's one caveat to that,

133
00:07:42.800 --> 00:07:47.340
and that's the caveat that closure
is when you intentionally want for

134
00:07:47.340 --> 00:07:51.380
a function to remember stuff outside,
so that it can keep track of its state.

135
00:07:51.380 --> 00:07:56.420
So there is a design style or a feature
in JavaScript called closure, and

136
00:07:56.420 --> 00:07:58.110
we intentionally do that sort of stuff.

137
00:07:58.110 --> 00:08:01.856
And I covered that in basic detail
in chapter two of the book, so

138
00:08:01.856 --> 00:08:04.048
you can go further from this class and

139
00:08:04.048 --> 00:08:07.956
read about a basic expression of
how closure works in chapter 2.

140
00:08:07.956 --> 00:08:10.689
And I also have a full book about closure,
the scope and

141
00:08:10.689 --> 00:08:14.504
closures book is really kind of all
about that so there's plenty more to go.

142
00:08:14.504 --> 00:08:16.454
If you wanna learn more
about how that works,

143
00:08:16.454 --> 00:08:18.463
we definitely won't
worry too much about it.

144
00:08:18.463 --> 00:08:22.435
But there are places, just suffice it
to say, there are places where you

145
00:08:22.435 --> 00:08:26.370
intentionally do decide to have
a function rely on outside variables.

146
00:08:26.370 --> 00:08:28.020
Yeah let's see.
The question is-

147
00:08:28.020 --> 00:08:30.020
&gt;&gt; Speaker 2: 2 then just came in there at

148
00:08:30.020 --> 00:08:31.590
the bottom?
&gt;&gt; Kyle Simpson: Should a function always

149
00:08:31.590 --> 00:08:37.360
return a value, even if you don't
have return in the function?

150
00:08:37.360 --> 00:08:42.220
Functions only return an explicit
value if you actually say return.

151
00:08:42.220 --> 00:08:43.420
Normal functions, that is.

152
00:08:44.530 --> 00:08:47.395
If you call a function and
then you do not have a return,

153
00:08:47.395 --> 00:08:51.135
it sort of implies that there is
a return undefined at the end.

154
00:08:52.825 --> 00:08:55.604
But there is always a result
from a function called,

155
00:08:55.604 --> 00:08:59.660
it's either that implied undefined,
or whatever you explicitly return.

156
00:09:02.060 --> 00:09:07.090
And the question of should a function
always return, there are many functions

157
00:09:07.090 --> 00:09:09.920
that I write that it doesn't make
sense for them to have a return value.

158
00:09:09.920 --> 00:09:13.130
So, there's no should it have a return or
not.

159
00:09:13.130 --> 00:09:14.770
It should have a return
if that makes sense.

160
00:09:14.770 --> 00:09:18.380
In this case, it makes sense for both of
my functions to compute something and

161
00:09:18.380 --> 00:09:19.530
return a value.

162
00:09:19.530 --> 00:09:23.110
Sometimes you just have a function doing
something, that's a function that maybe

163
00:09:23.110 --> 00:09:26.170
has a side effect like it's
calling something or whatever, so.

164
00:09:26.170 --> 00:09:29.608
There's plenty of places where
return values don't make sense.

165
00:09:29.608 --> 00:09:32.780
Then, the next question was,
in the program, the amount is always going

166
00:09:32.780 --> 00:09:37.780
to be greater than the bank account, so
both the console logs will be printed.

167
00:09:37.780 --> 00:09:38.775
Why are we doing it?

168
00:09:38.775 --> 00:09:40.070
It's just a simple demo.

169
00:09:40.070 --> 00:09:44.705
I wanted to show you that [LAUGH] there's
a way to decide whether we are looping.

170
00:09:44.705 --> 00:09:48.498
We could have been more nuanced
about it and said, well,

171
00:09:48.498 --> 00:09:51.910
amount is less than bank
balance minus threshold.

172
00:09:51.910 --> 00:09:56.712
Or something like, we could have said
I want to spend until I've spent to

173
00:09:56.712 --> 00:10:01.070
where my threshold is under
$100 left to my bank account.

174
00:10:01.070 --> 00:10:03.070
We could've done it that way,
and then of course.

175
00:10:03.070 --> 00:10:07.793
But the point here was just to illustrate
the different ways that conditionals can

176
00:10:07.793 --> 00:10:13.959
be woven together in our program.
&gt;&gt; Kyle Simpson: The next question,

177
00:10:13.959 --> 00:10:19.420
why are you returning amount.tofixed
if you may purchase more than 1K or

178
00:10:19.420 --> 00:10:23.840
100, I guess he meant,
how the amount will be printed.

179
00:10:25.760 --> 00:10:31.200
So it's important to understand tofixed
two, that indicates decimal places,

180
00:10:31.200 --> 00:10:35.820
not digits in your number.

181
00:10:35.820 --> 00:10:42.670
So this only means that I wanna round and
pad my decimals to two decimal places.

182
00:10:42.670 --> 00:10:43.980
The amount on the left hand side,

183
00:10:43.980 --> 00:10:47.030
if I'd gone all the way up to five
thousand dollars, or five million dollars,

184
00:10:47.030 --> 00:10:49.890
or whatever, we can have as many
digits on the left hand side.

185
00:10:49.890 --> 00:10:52.678
There's another method called toprecision,

186
00:10:52.678 --> 00:10:57.217
if you want to actually restrict the
number of digits that show up in a number.

187
00:10:57.217 --> 00:10:59.422
For those of you that had science classes,

188
00:10:59.422 --> 00:11:02.681
you'll know about the difference
between precision and not.

189
00:11:02.681 --> 00:11:05.846
So there's a toprecision method
that can be used for that purpose.

190
00:11:05.846 --> 00:11:10.820
But here tofixed is only dealing with the
number of decimal places that we get out.

