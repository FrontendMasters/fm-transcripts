WEBVTT

1
00:00:00.540 --> 00:00:02.130
&gt;&gt; Kyle Simpson: The next
topic is operators, and

2
00:00:02.130 --> 00:00:05.650
we have dealt with operators
already in several places.

3
00:00:05.650 --> 00:00:09.460
We've had the plus and
the multiply, we've had the equals.

4
00:00:09.460 --> 00:00:11.050
We've already seen several operators.

5
00:00:11.050 --> 00:00:13.770
Turns out there's probably
about thirty-ish,

6
00:00:13.770 --> 00:00:17.580
something like that,
different operators defined in JavaScript.

7
00:00:17.580 --> 00:00:19.000
And I've got a listing here in the book.

8
00:00:19.000 --> 00:00:21.570
I'm not gonna bore you by giving
you every single one of them, but

9
00:00:21.570 --> 00:00:24.540
there's a whole bunch of different
operators that all do different things and

10
00:00:24.540 --> 00:00:26.520
if you want to read up on it,
you can read this.

11
00:00:26.520 --> 00:00:29.430
These are kinda the most
important ones and

12
00:00:29.430 --> 00:00:32.140
then there's even more listed
here on this MDN link.

13
00:00:33.200 --> 00:00:37.220
So being aware of what
operators are available to

14
00:00:37.220 --> 00:00:42.020
JavaScript is of course really Important
because you're gonna wanna do stuff and

15
00:00:42.020 --> 00:00:45.560
the stuff you're gonna wanna
do is gonna need tasks.

16
00:00:45.560 --> 00:00:50.150
There's gonna be places where there's
multiple ways to do the same thing.

17
00:00:50.150 --> 00:00:54.690
So, for example, this statement
right here, I'll copy that and

18
00:00:54.690 --> 00:00:57.030
put it in my code editor so
it's easier to read.

19
00:00:57.030 --> 00:01:00.159
This statement right here, A = A + 2.

20
00:01:00.159 --> 00:01:03.854
We can already kind of intuit that what
it's going to do first is get the value

21
00:01:03.854 --> 00:01:05.840
out of A, whatever it is.

22
00:01:05.840 --> 00:01:07.620
Add two to it.

23
00:01:07.620 --> 00:01:10.570
And then assign it back to the variable A.

24
00:01:10.570 --> 00:01:11.280
Okay?

25
00:01:11.280 --> 00:01:14.620
So in other words we're just
adding two into the current value.

26
00:01:14.620 --> 00:01:15.850
So that's one way of doing it.

27
00:01:15.850 --> 00:01:17.310
And that's a pretty clear way of doing it.

28
00:01:17.310 --> 00:01:21.600
But there are shortcut operators,
which some people like and

29
00:01:21.600 --> 00:01:23.650
some people feel are more complicated.

30
00:01:23.650 --> 00:01:25.970
But in this case there's
a shortcut operator.

31
00:01:25.970 --> 00:01:29.820
If you wanna take a variable and
add something to whatever is

32
00:01:29.820 --> 00:01:34.594
in the current variable, then a shortcut
operator is putting the plus and

33
00:01:34.594 --> 00:01:38.680
the equals together, and
then just whatever you wanna add on.

34
00:01:38.680 --> 00:01:41.680
And these will have
the exact same end result.

35
00:01:41.680 --> 00:01:46.900
They'll take whatever is in A currently,
add 2 to it, and put it back into A.

36
00:01:46.900 --> 00:01:50.960
So, turns out there's several different
ways to come at any given problem,

37
00:01:50.960 --> 00:01:54.530
knowing the different tools that you have,
you can choose.

38
00:01:54.530 --> 00:01:56.630
Now, again I kind of referred to,

39
00:01:56.630 --> 00:02:00.670
some people prefer line 1 and
some people prefer line 3.

40
00:02:00.670 --> 00:02:02.590
They both do the same thing.

41
00:02:02.590 --> 00:02:09.140
The question you should ask is which one
semantically means more what it's doing?

42
00:02:09.140 --> 00:02:16.295
And I would tend to say that even though
line 1 is more explicit, it actually

43
00:02:16.295 --> 00:02:21.600
might take a little bit more brain
power to understand line 1 than line 3.

44
00:02:21.600 --> 00:02:24.440
If you learn the line 3 operator you know

45
00:02:24.440 --> 00:02:27.710
that it just adds something
to my existing variable.

46
00:02:27.710 --> 00:02:31.620
And I don't have to think about
the step of pulling out the value now,

47
00:02:31.620 --> 00:02:33.390
it's current and adding it.

48
00:02:33.390 --> 00:02:36.370
I just say put another
two into the bucket.

49
00:02:36.370 --> 00:02:39.560
I've got a bucket of eggs,
put two more in, right?

50
00:02:39.560 --> 00:02:41.420
So line three, to me,

51
00:02:41.420 --> 00:02:46.756
is slightly more conceptually simple once
you learn that that's a shortcut operator.

52
00:02:48.140 --> 00:02:52.300
And looking at it in code, if my only
goal was to add 2 to whatever it is,

53
00:02:52.300 --> 00:02:55.250
I might prefer this line 3 over line 1.

54
00:02:55.250 --> 00:02:58.080
That, of course, might be quite
controversial cuz there might be

55
00:02:58.080 --> 00:03:02.370
people that vehemently believe that line
1 is way, way better and more sensible.

56
00:03:02.370 --> 00:03:07.480
So the point I'm illustrating
is that readability or

57
00:03:07.480 --> 00:03:14.420
understandability is inherently and
completely subjective.

58
00:03:15.910 --> 00:03:20.840
That statement of, make a readable
program, or make my code more readable.

59
00:03:20.840 --> 00:03:23.460
Those sorts of things
are thrown around an awful lot.

60
00:03:24.500 --> 00:03:27.680
Most of the time,
people don't have a precise meaning for

61
00:03:27.680 --> 00:03:29.470
what they mean for that.

62
00:03:29.470 --> 00:03:33.530
There is no precise definition
of what readable means.

63
00:03:33.530 --> 00:03:37.410
It's subjective, it's subjective to you,
and it's also subjective to the other

64
00:03:37.410 --> 00:03:39.940
people that you expect or
intend to read your program.

65
00:03:41.510 --> 00:03:43.324
Is there question here?
&gt;&gt; Speaker 2: They were just asking if

66
00:03:43.324 --> 00:03:44.400
minus equals-
&gt;&gt; Kyle Simpson: It's subtracting.

67
00:03:44.400 --> 00:03:47.460
Yep, minus equals does the same thing but
for subtraction.

68
00:03:47.460 --> 00:03:53.000
So minus equals would take a and
subtract it out, just like a = a- 2.

69
00:03:53.000 --> 00:03:56.190
So there are lots of operators
to learn in JavaScript.

70
00:03:56.190 --> 00:03:59.750
The major ones that we care
about are the equals operator,

71
00:03:59.750 --> 00:04:01.410
cuz we're gonna do a lot of assignments.

72
00:04:02.660 --> 00:04:04.180
And maybe the math operators,

73
00:04:04.180 --> 00:04:06.590
because that's just a simple
way of illustrating concepts.

74
00:04:06.590 --> 00:04:11.450
So the plus and the minus,
the asterisk for multiplication,

75
00:04:11.450 --> 00:04:12.920
the slash for division.

76
00:04:12.920 --> 00:04:15.380
Those ones are pretty important.

77
00:04:16.800 --> 00:04:21.000
And then all these other ones, like
another one that you'll probably want to

78
00:04:21.000 --> 00:04:23.700
learn is the double equals and
the triple equals.

79
00:04:23.700 --> 00:04:25.440
For our purposes at the immediate moment,

80
00:04:25.440 --> 00:04:28.594
they do the same thing which is
to check if something is equal.

81
00:04:28.594 --> 00:04:30.380
They are not the same, but for

82
00:04:30.380 --> 00:04:32.940
our purposes they compare,
they check equality.

83
00:04:34.170 --> 00:04:36.942
So over the break they
was some discussions and

84
00:04:36.942 --> 00:04:41.990
good discussions questions, in the chat
room, And i was just saying we're going to

85
00:04:41.990 --> 00:04:46.923
deal with the differences between using
var to declare variable and not using it.

86
00:04:46.923 --> 00:04:49.233
We are gonna cover those
differences in a little bit,

87
00:04:49.233 --> 00:04:52.390
that comes a little bit later in
the chapter, so we'll come back to it.

88
00:04:52.390 --> 00:04:57.122
But for now the only difference that
we saw was just a difference we

89
00:04:57.122 --> 00:05:01.081
could observe that var a = 3,
results in undefined,

90
00:05:01.081 --> 00:05:05.660
even though a has 3 in it,
the var part is undefined.

91
00:05:05.660 --> 00:05:07.690
Or the var part returns undefined.

92
00:05:07.690 --> 00:05:11.152
But later if we say a = 4,
or even just a = 3, but

93
00:05:11.152 --> 00:05:16.280
a = 4 we're taking a value and
making an assignment statement out of it.

94
00:05:16.280 --> 00:05:20.215
And that statement does have a return
value which the console finds, and

95
00:05:20.215 --> 00:05:21.569
helpfully prints out for

96
00:05:21.569 --> 00:05:24.440
us as the value 4.
&gt;&gt; Kyle Simpson: [COUGH] So

97
00:05:24.440 --> 00:05:27.770
that's just an observational difference
about the behavior of the console.

98
00:05:27.770 --> 00:05:31.560
It doesn't mean anything at all about
the appropriateness of using one or

99
00:05:31.560 --> 00:05:32.660
the other in your program.

100
00:05:32.660 --> 00:05:33.690
We'll come back to that later.

