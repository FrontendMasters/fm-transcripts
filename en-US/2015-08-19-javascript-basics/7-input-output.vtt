WEBVTT

1
00:00:00.660 --> 00:00:03.510
&gt;&gt; Kyle Simpson: Okay, we've got input and
output are the next topics.

2
00:00:05.360 --> 00:00:09.470
The most traditional of all outputs in
JavaScript is to do an alert statement,

3
00:00:09.470 --> 00:00:11.760
and that alert statement,

4
00:00:11.760 --> 00:00:16.950
which you can try yourself,
is you alert Hello World like that.

5
00:00:16.950 --> 00:00:21.660
That alert statement pops up a Pop-Up Box
in a JavaScript browser, but

6
00:00:21.660 --> 00:00:26.000
it's important to understand that
the alert function itself is

7
00:00:26.000 --> 00:00:27.810
not actually part of JavaScript.

8
00:00:27.810 --> 00:00:30.390
It's come from the browser, so

9
00:00:30.390 --> 00:00:33.930
alert itself it's not defined by
the JavaScript language or anything.

10
00:00:33.930 --> 00:00:35.970
It's given to you by the browser,

11
00:00:35.970 --> 00:00:40.030
and if you tried to run alert inside of,
say, Node, it may

12
00:00:40.030 --> 00:00:44.700
very well not have that because there's no
such thing as a pop-up box inside of Node.

13
00:00:44.700 --> 00:00:49.050
So, the much more common
way of doing output,

14
00:00:49.050 --> 00:00:54.110
that we can work with, as developers,
is actually the console.log statement.

15
00:00:54.110 --> 00:00:59.080
And console.log logs a message
to your console which happens

16
00:00:59.080 --> 00:01:01.970
very conveniently to be the thing
we're already working in.

17
00:01:01.970 --> 00:01:05.300
When I say console.log, I'm actually
gonna print that message right back

18
00:01:05.300 --> 00:01:09.290
into the console I'm already working in,
which is super convenient for us.

19
00:01:09.290 --> 00:01:13.270
So, from an output perspective,
you can be much more sophisticated like

20
00:01:13.270 --> 00:01:16.350
putting stuff on a page,
putting an input box on a page,

21
00:01:16.350 --> 00:01:19.790
and assigning a value to it, and
then its output in terms of visual.

22
00:01:19.790 --> 00:01:21.875
But, as a developer playing
around in the console,

23
00:01:21.875 --> 00:01:26.400
console.log is kind of the simplest
way to print out some messages.

24
00:01:26.400 --> 00:01:30.580
So, if I had a var a equals 2, and then I
wanted to print out the current value of

25
00:01:30.580 --> 00:01:35.210
a, I'd just say console of log and I'd
just give it the variable a, no quotes.

26
00:01:36.220 --> 00:01:41.544
And it prints out the value too.
&gt;&gt; Kyle Simpson: Another

27
00:01:41.544 --> 00:01:46.536
little thing that is kind of annoying
about these consoles is that you notice

28
00:01:46.536 --> 00:01:51.528
a lot of times you end up getting this
undefined being printed in weird places

29
00:01:51.528 --> 00:01:56.754
Console environment in your browser is
designed to take the very last statement

30
00:01:56.754 --> 00:02:02.620
expression in a program and evaluate it
for a value and then show you that value.

31
00:02:02.620 --> 00:02:04.160
So for example,
I'll get to the question in a minute.

32
00:02:04.160 --> 00:02:09.240
For example, if I say a equals 2, remember
that was an assignment expression?

33
00:02:09.240 --> 00:02:14.980
The result of an assignment expression
is the value that it was signed So

34
00:02:14.980 --> 00:02:20.910
the javascript engine just doesn't assign
it, but the console does one extra

35
00:02:20.910 --> 00:02:24.590
step which is to say whatever my last
statement is, give you that value back.

36
00:02:25.600 --> 00:02:26.940
So that's why it prints a 2 here.

37
00:02:28.320 --> 00:02:32.610
And in statements that have no return
value, you get something like undefined.

38
00:02:32.610 --> 00:02:36.960
Like, for example,
a var statement has No return value,

39
00:02:36.960 --> 00:02:38.900
and that's why we get undefined.

40
00:02:38.900 --> 00:02:42.570
There was a question.
&gt;&gt; Speaker 2: , Yeah, I was just

41
00:02:42.570 --> 00:02:45.180
wondering why it's undefined return.
&gt;&gt; Kyle Simpson: Hopefully I just

42
00:02:45.180 --> 00:02:46.130
answered that.

43
00:02:46.130 --> 00:02:49.300
[LAUGH] Because there are statement
expressions that have no return value.

44
00:02:52.220 --> 00:02:56.990
Okay, so that's our output that we'll use,
is consulConsole.log.

45
00:02:56.990 --> 00:03:01.140
Now we're not gonna input a lot but just
a side note, if you did want to receive

46
00:03:01.140 --> 00:03:06.310
input, a lot of times, most of the time,
you're writing that by having interactive

47
00:03:06.310 --> 00:03:11.080
elements on a form, on a page, where
people can type in their name or whatever.

48
00:03:11.080 --> 00:03:15.810
But again, if you're working purely in a
sort of command line-ish environment like

49
00:03:15.810 --> 00:03:20.720
this console Another way of receiving
input is the prompt statement.

50
00:03:20.720 --> 00:03:27.300
So we could say something like,
var age = prompt, which is a function.

51
00:03:27.300 --> 00:03:28.910
And we can give it a message to ask.

52
00:03:28.910 --> 00:03:31.330
So I can say, What is your age?

53
00:03:32.860 --> 00:03:36.300
That message that I ask is gonna pop
up in a pop up, when I hit enter.

54
00:03:37.730 --> 00:03:40.280
So we see here, What is your age?

55
00:03:40.280 --> 00:03:42.980
And it's given me an input box and
asked me to type in something.

56
00:03:42.980 --> 00:03:49.660
I just turned 35 a few weeks ago so
I will hit 35 and hit OK.

57
00:03:49.660 --> 00:03:54.830
Now that value goes back and
it has been assigned to this variable age.

58
00:03:54.830 --> 00:04:02.080
So if I then say
console.log(age) I'll get 35.

59
00:04:02.080 --> 00:04:03.480
So try that yourself.

60
00:04:03.480 --> 00:04:07.850
Try writing a prompt, asking a question,
giving it a value, and then testing

61
00:04:07.850 --> 00:04:10.410
the return result was assigned.
&gt;&gt; Speaker 2: So

62
00:04:10.410 --> 00:04:14.440
the question is is that value a string or
a number or what it is at this point?

63
00:04:14.440 --> 00:04:16.240
What if you wanted to make it a number?

64
00:04:16.240 --> 00:04:18.410
We'll probably get to that, right?
&gt;&gt; Kyle Simpson: We do get some value

65
00:04:18.410 --> 00:04:19.520
coersions in a little bit.

66
00:04:21.250 --> 00:04:23.930
The thing that comes back from
prompt is always a string.

67
00:04:23.930 --> 00:04:25.540
But it's easy to make
it into something else.

68
00:04:25.540 --> 00:04:28.130
Yeah.
&gt;&gt; Speaker 3: Do you not need a semicolon

69
00:04:28.130 --> 00:04:30.040
after the first statement?
&gt;&gt; Kyle Simpson: So

70
00:04:30.040 --> 00:04:33.290
that's an example of one where I
should have put one for clarity.

71
00:04:33.290 --> 00:04:35.770
I was lazy and silly and forgot it.

72
00:04:35.770 --> 00:04:38.950
So JavaScript is forgiving
in a lot of places.

73
00:04:38.950 --> 00:04:42.270
That's what I meant earlier when I said
that semicolons can be optional in a lot

74
00:04:42.270 --> 00:04:43.040
of places.

75
00:04:43.040 --> 00:04:46.150
It's forgiving and it tries to put
them in if you've forgotten them.

76
00:04:46.150 --> 00:04:50.234
I should, in proper coding,
have put a semicolon there.

77
00:04:56.207 --> 00:04:57.398
&gt;&gt; Kyle Simpson: Okay, hopefully,

78
00:04:57.398 --> 00:05:02.373
even if this is your first experience with
JavaScript, hopefully you're starting

79
00:05:02.373 --> 00:05:05.850
to get a slightly more Sense
of what we're gonna do.

80
00:05:05.850 --> 00:05:09.700
We're essentially gonna make some
variables that are symbolic containers

81
00:05:09.700 --> 00:05:11.110
that we can put values into.

82
00:05:11.110 --> 00:05:15.190
And we're just gonna figure out different
values and assign them back and forth.

83
00:05:15.190 --> 00:05:19.700
And maybe along the way we might
output some stuff with a console.log.

84
00:05:19.700 --> 00:05:24.120
And that essentially is the basics
of writing a JavaScript program.

85
00:05:24.120 --> 00:05:27.920
You can gets lot's more complex and write
JavaScript and manipulate the page and

86
00:05:27.920 --> 00:05:32.850
make network requests Ajax and all of that
stuff but none of that is necessary to

87
00:05:32.850 --> 00:05:36.800
learn the language JavaScript itself,
whats necessary here is to understand

88
00:05:36.800 --> 00:05:41.590
basic things like how to make a variable
how to put a value into it and so forth.

89
00:05:41.590 --> 00:05:47.206
So hopefully input and output will be
ways to explain some of this stuff.

