WEBVTT

1
00:00:00.330 --> 00:00:03.810
&gt;&gt; Kyle Simpson: A function is a way to
logically group a piece of code together,

2
00:00:03.810 --> 00:00:05.640
kinda like a block is.

3
00:00:05.640 --> 00:00:10.910
But a function also makes that block
of code something that you can call

4
00:00:10.910 --> 00:00:12.380
more than once.

5
00:00:12.380 --> 00:00:15.716
So it's kind of like a loop,
and it's kind of like a block.

6
00:00:15.716 --> 00:00:19.426
But it's not gonna run
forever like a loop does, and

7
00:00:19.426 --> 00:00:23.911
its not gonna run only once right
now like a regular block does.

8
00:00:23.911 --> 00:00:26.453
So it's kind of a third
different concept here.

9
00:00:26.453 --> 00:00:31.542
It's like putting a set of stuff into
this special location and being able to

10
00:00:31.542 --> 00:00:36.724
say as many times as I need it, I can just
call out to that stuff and it will run.

11
00:00:36.724 --> 00:00:39.210
I might need it once.

12
00:00:39.210 --> 00:00:40.670
I might need it five times.

13
00:00:40.670 --> 00:00:42.710
I might need to do it over and
over and over again.

14
00:00:42.710 --> 00:00:44.490
It doesn't really matter.

15
00:00:44.490 --> 00:00:48.700
We use the function to sort of logically
group a set of tasks together.

16
00:00:49.770 --> 00:00:52.020
So I have kind of a silly
running example in the book.

17
00:00:52.020 --> 00:00:56.324
If you've read any of the book, I have
the silly example of the phone store, or

18
00:00:56.324 --> 00:00:58.754
you're purchasing a phone, or whatever.

19
00:00:58.754 --> 00:01:00.139
So if you haven't read it,

20
00:01:00.139 --> 00:01:03.226
then you can go back and
understand what I'm talking about.

21
00:01:03.226 --> 00:01:06.710
But here, in this running silly example
I have, the phone store employee

22
00:01:06.710 --> 00:01:10.319
doesn't want to calculate all of
the taxes for your final purchase amount.

23
00:01:10.319 --> 00:01:14.165
When you're talking to her and you're
saying I wanna buy this phone and this

24
00:01:14.165 --> 00:01:18.451
accessory or whatever, she doesn't wanna
redo that on her calculator every time.

25
00:01:18.451 --> 00:01:23.215
That's a set of tasks that's repetitive
that's going to need to happen for

26
00:01:23.215 --> 00:01:26.830
pretty much every customer
that buys something.

27
00:01:26.830 --> 00:01:30.920
And so, there's almost certainly
a program that does that for

28
00:01:30.920 --> 00:01:32.275
her to check out programs.

29
00:01:32.275 --> 00:01:33.900
She can swipe your credit card,

30
00:01:33.900 --> 00:01:36.920
it automatically calculates how
much to charge and all of that.

31
00:01:36.920 --> 00:01:38.990
And that's conceptually
the same thing as a function.

32
00:01:38.990 --> 00:01:42.230
It's taking a specific set of tasks and

33
00:01:42.230 --> 00:01:45.400
putting it into a thing that
I can repeat on demand.

34
00:01:45.400 --> 00:01:49.380
Whenever I want it, I can just invoke it,
and say do that set of things, and

35
00:01:49.380 --> 00:01:51.040
it will just happen, okay?

36
00:01:51.040 --> 00:01:55.536
So [COUGH] the example that we see
here is I have a variable that I'm

37
00:01:55.536 --> 00:01:58.298
declaring with the value 99.99.

38
00:01:58.298 --> 00:02:00.930
That's the price of a phone.

39
00:02:00.930 --> 00:02:03.149
And I wanna print the amount.

40
00:02:03.149 --> 00:02:06.281
I could've put a console.log
statement here, right?

41
00:02:06.281 --> 00:02:09.856
I could've said console.log amount,
and it would've printed it.

42
00:02:09.856 --> 00:02:15.014
And then, I said amount equals amount
times 2, which doubles the value.

43
00:02:15.014 --> 00:02:17.284
And then,
I could've put another console.log.

44
00:02:17.284 --> 00:02:21.749
But as soon as I did that twice, as soon
as I typed the same thing twice into

45
00:02:21.749 --> 00:02:26.024
a program, I might start to ask
myself why am I repeating myself?

46
00:02:26.024 --> 00:02:29.548
&gt;&gt; Kyle Simpson: Could I take that
set of statements that I repeated and

47
00:02:29.548 --> 00:02:33.933
put that into a location and
give that location a special name, and

48
00:02:33.933 --> 00:02:37.876
whenever I want that stuff to happen,
just call it by name?

49
00:02:37.876 --> 00:02:39.299
That's what a function's doing.

50
00:02:39.299 --> 00:02:41.714
So what is my set of statements?

51
00:02:41.714 --> 00:02:43.588
It's just one statement in this case.

52
00:02:43.588 --> 00:02:48.683
But it's slightly more complex than
just calling console.log amount.

53
00:02:48.683 --> 00:02:52.480
You'll notice that I'm
also saying to fixed.

54
00:02:54.020 --> 00:02:58.030
Now, to fixed is a method that's
available to all numbers in JavaScript.

55
00:02:58.030 --> 00:03:00.960
And it essentially
formats them as a string

56
00:03:00.960 --> 00:03:03.070
with a certain number of
decimal places on it.

57
00:03:04.320 --> 00:03:05.355
Kind of like dollars, right?

58
00:03:05.355 --> 00:03:06.650
US dollars.

59
00:03:06.650 --> 00:03:11.990
So if I wanted to take the number 99.99,
or the number 199.98,

60
00:03:11.990 --> 00:03:16.652
and make it into a string that
absolutely had exactly two digits,

61
00:03:16.652 --> 00:03:18.879
then I could use the two fixed.

62
00:03:18.879 --> 00:03:20.750
Let me illustrate.

63
00:03:20.750 --> 00:03:25.836
What if I had the number
&gt;&gt; Kyle Simpson: 3.141519

64
00:03:25.836 --> 00:03:27.493
I can't remember.

65
00:03:27.493 --> 00:03:28.978
That's all I remember.

66
00:03:28.978 --> 00:03:33.450
1415926 or something like that, right?

67
00:03:33.450 --> 00:03:36.606
So that's the first several digits of pi.

68
00:03:36.606 --> 00:03:42.017
You'll notice I didn't win any pi
digit memory contest as a kid.

69
00:03:42.017 --> 00:03:45.300
Okay, that's the first
several digits of pi.

70
00:03:45.300 --> 00:03:48.277
But what if I wanted to print out that,

71
00:03:48.277 --> 00:03:53.220
let's assign that to some variable,
so let's assign it to a.

72
00:03:53.220 --> 00:03:59.298
What if I wanted to print out that value,
but only to two decimal places?

73
00:03:59.298 --> 00:04:03.345
Or let's actually say to
three decimal places.

74
00:04:03.345 --> 00:04:05.952
Well, I could say, a.toFixed 3.

75
00:04:05.952 --> 00:04:11.016
And you'll notice that I'm
not gonna get a number.

76
00:04:11.016 --> 00:04:16.074
I'm now gonna get a string,
the string 3.142.

77
00:04:17.601 --> 00:04:20.020
&gt;&gt; Kyle Simpson: So we rounded that digit.

78
00:04:20.020 --> 00:04:25.168
We rounded it by the fourth digit,
we rounded that third digit up to 2.

79
00:04:25.168 --> 00:04:29.897
So tofixed is a way to get a number
to a particular precision,

80
00:04:29.897 --> 00:04:33.258
to a particular number of decimal places.

81
00:04:33.258 --> 00:04:34.221
So nice and helpful.

82
00:04:34.221 --> 00:04:37.011
I almost always use this when I'm,

83
00:04:37.011 --> 00:04:43.340
the only place I hardly ever use it is for
printing out dollars and cents.

84
00:04:43.340 --> 00:04:47.057
Cuz another observation that
we could make is what if I had

85
00:04:47.057 --> 00:04:51.790
the variable a equals 3.5, and
I wanted to print that out as dollars?

86
00:04:51.790 --> 00:04:54.790
Well, it's missing a zero on the end,
right?

87
00:04:54.790 --> 00:04:59.613
If I just said console.log a
&gt;&gt; Kyle Simpson: And

88
00:04:59.613 --> 00:05:05.438
I only get 3.5,
which isn't as friendly for US dollars.

89
00:05:05.438 --> 00:05:09.724
So if I said console log A dot two fixed,
and

90
00:05:09.724 --> 00:05:13.189
I said give me two decimal places.

91
00:05:13.189 --> 00:05:16.357
You notice I get 3.50.

92
00:05:16.357 --> 00:05:21.980
&gt;&gt; Kyle Simpson: That's how I typically
use it is I use it to format US dollars.

93
00:05:21.980 --> 00:05:28.462
[COUGH] But that printAmount function is a
utility that I can repeat multiple times.

94
00:05:28.462 --> 00:05:33.353
And imagine how much more useful it would
be if instead of just one statement,

95
00:05:33.353 --> 00:05:35.157
if I had three or four or ten or

96
00:05:35.157 --> 00:05:39.464
20 or 100 statements that were
logicallconnected together.

97
00:05:39.464 --> 00:05:44.549
If it took five different things to do
to print out my amount, I would put all

98
00:05:44.549 --> 00:05:49.636
five on those in a function, and then
I would only be repeating the function

99
00:05:49.636 --> 00:05:54.282
call rather than repeating all of
its contents over and over again.

100
00:05:54.282 --> 00:05:58.994
So that's our primary benefit to
a function is being able to take

101
00:05:58.994 --> 00:06:00.828
a block of statements and

102
00:06:00.828 --> 00:06:06.172
collect it together into a repeatable
sort of named label, if you will.

103
00:06:06.172 --> 00:06:07.838
So a little 60-second homework.

104
00:06:07.838 --> 00:06:10.536
Declare yourself a function.

105
00:06:10.536 --> 00:06:15.143
Put a couple of statements in it,
whatever statements you want,

106
00:06:15.143 --> 00:06:18.175
like assignment statements or whatever.

107
00:06:18.175 --> 00:06:21.968
And repeat it a couple of
times in your console.

108
00:06:21.968 --> 00:06:25.740
&gt;&gt; Kyle Simpson: You might
have called your function foo,

109
00:06:25.740 --> 00:06:28.442
like I'm the habit of doing.

110
00:06:28.442 --> 00:06:31.925
And that might take a is
equal to a times 2.

111
00:06:31.925 --> 00:06:35.487
And a is equal to a plus 3.

112
00:06:35.487 --> 00:06:41.664
So we're gonna multiply it by 2,
and then add 3 to it.

113
00:06:41.664 --> 00:06:44.212
Those are my two statements.

114
00:06:44.212 --> 00:06:51.610
Now, If I start off with an a is
equal to 10, and I call foo once.

115
00:06:51.610 --> 00:06:53.030
And then I console.log(a).

116
00:06:53.030 --> 00:06:56.890
What would I be expecting
the output of this to be?

117
00:06:57.970 --> 00:07:01.020
Hopefully, you're awake enough
to do some basic math here.

118
00:07:01.020 --> 00:07:03.840
A [COUGH] starts out as 10, all right?

119
00:07:03.840 --> 00:07:06.790
The first time I call foo,
it's going to say that 10 times 2.

120
00:07:06.790 --> 00:07:09.010
So now, a is going to be 20.

121
00:07:09.010 --> 00:07:11.482
And then, we're gonna add 3 to it.

122
00:07:11.482 --> 00:07:15.144
So now, a is gonna be equal to 23.

123
00:07:15.144 --> 00:07:18.887
So we'd expect it to
print out the value 23.

124
00:07:18.887 --> 00:07:24.391
Now, if I call foo two more times,
and then I print out a again.

125
00:07:24.391 --> 00:07:27.862
I'll spare you the mental acrobatics.

126
00:07:27.862 --> 00:07:32.664
Let's just run it and
let's see what happens.

127
00:07:34.746 --> 00:07:39.066
&gt;&gt; Kyle Simpson: So
we know this one's gonna print out 23.

128
00:07:39.066 --> 00:07:43.017
This next one, what's it gonna print out?

129
00:07:45.610 --> 00:07:50.450
&gt;&gt; Kyle Simpson: So it was 23 times 2,
which was 46, plus 3 was 49.

130
00:07:50.450 --> 00:07:55.990
And then, 49 times 2 is 98, plus 3 is 101.

131
00:07:55.990 --> 00:07:57.270
Question?

132
00:08:03.130 --> 00:08:06.682
&gt;&gt; Kyle Simpson: Question was about
putting our functions before our

133
00:08:06.682 --> 00:08:07.574
variables.

134
00:08:07.574 --> 00:08:09.755
Did it matter if I did that or I did that?

135
00:08:09.755 --> 00:08:11.550
No difference to JavaScript.

136
00:08:11.550 --> 00:08:15.705
It goes back to that topic that
we kind of skirted by earlier,

137
00:08:15.705 --> 00:08:19.295
the topic of hoisting,
the topic of lexical scope.

138
00:08:19.295 --> 00:08:21.488
Scope enclosures, book covers it in-depth.

139
00:08:21.488 --> 00:08:25.480
The Advanced JavaScript training covers,
and in depth.

140
00:08:25.480 --> 00:08:29.890
But for our purposes, you can put
declarations in any place in your program.

141
00:08:29.890 --> 00:08:33.510
I typically put all of my declarations
at the top of my programs.

142
00:08:33.510 --> 00:08:36.640
I put all my functions at the top,
and then I put all my variables.

143
00:08:36.640 --> 00:08:38.590
That's my preferred style.

144
00:08:38.590 --> 00:08:42.410
But as long as all your variables are at
the top, you won't have any surprises.

145
00:08:42.410 --> 00:08:44.760
I mean, as long as all your
declarations are at the top,

146
00:08:44.760 --> 00:08:45.720
you won't have any surprises.

147
00:08:45.720 --> 00:08:48.704
&gt;&gt; Speaker 2: If you consistently do
that it makes it easier to maintain

148
00:08:48.704 --> 00:08:49.771
the program later.

149
00:08:49.771 --> 00:08:53.470
&gt;&gt; Kyle Simpson: That's generally
a good rule to have a consistent style,

150
00:08:53.470 --> 00:08:54.533
whatever it is.

151
00:08:54.533 --> 00:08:58.117
If your style is to put your functions at
the bottom and your variables at the top,

152
00:08:58.117 --> 00:08:58.816
that's fine.

153
00:08:58.816 --> 00:09:03.519
But it's a good idea to always be
consistent with that in your program.

154
00:09:06.360 --> 00:09:13.650
&gt;&gt; Kyle Simpson: Okay, now, functions can
also receive what are called parameters.

155
00:09:13.650 --> 00:09:16.220
So here, you notice I didn't
receive any parameter, but

156
00:09:16.220 --> 00:09:17.510
what if I received a parameter.

157
00:09:17.510 --> 00:09:19.670
If I had a parameter called b,

158
00:09:21.290 --> 00:09:24.990
that becomes a variable that's
accessible to me inside of the function.

159
00:09:24.990 --> 00:09:27.002
So I could take this value, right here.

160
00:09:27.002 --> 00:09:32.690
And instead of it being the literal value
3, I could have it be the variable b.

161
00:09:34.146 --> 00:09:36.267
&gt;&gt; Kyle Simpson: So
when I run this function now,

162
00:09:36.267 --> 00:09:40.286
its behavior is partially
dependent on what value I pass in.

163
00:09:40.286 --> 00:09:41.400
Does everybody see that?

164
00:09:41.400 --> 00:09:46.193
If I pass in a different value of b,
I get a different result out.

165
00:09:46.193 --> 00:09:50.057
Let's try it.
If I start out with a equals 10, and

166
00:09:50.057 --> 00:09:57.449
I say foo(3), and then I say
console.log(a), what are we expecting?

167
00:10:00.746 --> 00:10:03.437
&gt;&gt; Kyle Simpson: Same thing as before.

168
00:10:03.437 --> 00:10:05.540
We'd expect 23, right?

169
00:10:05.540 --> 00:10:10.600
a went from 10 to 20, and
then we added 3 to it and it became 23.

170
00:10:10.600 --> 00:10:14.400
But what happens if I put in 100 here?

171
00:10:17.260 --> 00:10:18.630
&gt;&gt; Kyle Simpson: Now we're expecting 120.

172
00:10:18.630 --> 00:10:21.430
Does everybody see that?

173
00:10:21.430 --> 00:10:25.730
So what I pass into my function changes
its behavior because there's a parameter

174
00:10:25.730 --> 00:10:27.340
that I'm passing in.

175
00:10:27.340 --> 00:10:28.400
By the way, a little nuance.

176
00:10:28.400 --> 00:10:30.910
It's not a big deal, but terminology.

177
00:10:30.910 --> 00:10:31.720
I mean,

178
00:10:31.720 --> 00:10:36.420
I think if you're learning things it's
important to learn correct terminology.

179
00:10:36.420 --> 00:10:40.660
When we call the function here, we
are passing in what's called an argument.

180
00:10:42.130 --> 00:10:43.245
&gt;&gt; Kyle Simpson: So you can have one or

181
00:10:43.245 --> 00:10:46.280
more arguments that you
pass into a function.

182
00:10:46.280 --> 00:10:52.480
But when we declare the function, and
we have these names like I can say b,

183
00:10:52.480 --> 00:10:56.550
and bar, and zaz, and whatever.

184
00:10:56.550 --> 00:11:00.670
These variables here
are called parameters.

185
00:11:02.000 --> 00:11:04.737
So in other words, there's a match,
a one to one match,

186
00:11:04.737 --> 00:11:08.400
between an argument that gets passed
in and the parameter in that position.

187
00:11:08.400 --> 00:11:13.269
A lot of people use arguments and
parameters interchangeably as meaning

188
00:11:13.269 --> 00:11:17.177
the same thing,
because they get assigned to each other so

189
00:11:17.177 --> 00:11:20.875
it seems like they could be
considered the same thing.

190
00:11:20.875 --> 00:11:26.240
To be completely specific on terminology,
it's an argument

191
00:11:26.240 --> 00:11:31.407
when you pass it in,
it's a parameter when you declare it.

192
00:11:31.407 --> 00:11:38.505
So this parameter b that we've got,
got assigned the argument 100.

193
00:11:38.505 --> 00:11:44.804
And then, we use that parameter as
a variable, and we've printed it out.

194
00:11:44.804 --> 00:11:46.539
So let's try this again.

195
00:11:46.539 --> 00:11:50.670
If i said foo(5) and foo(25) and foo(100).

196
00:11:50.670 --> 00:11:55.090
So I called foo three different times
with three different variables,

197
00:11:55.090 --> 00:11:57.970
all accumulating my results into this a.

198
00:11:57.970 --> 00:11:58.470
What's my end result gonna be?

199
00:12:01.230 --> 00:12:01.811
&gt;&gt; Kyle Simpson: Oops.

200
00:12:04.003 --> 00:12:07.821
&gt;&gt; Kyle Simpson: My end result
&gt;&gt; Kyle Simpson: The suspense is

201
00:12:07.821 --> 00:12:09.270
killing me.

202
00:12:09.270 --> 00:12:10.515
&gt;&gt; Kyle Simpson: 250.

203
00:12:12.003 --> 00:12:14.239
&gt;&gt; Kyle Simpson: Is there a question?

204
00:12:14.239 --> 00:12:18.708
&gt;&gt; Speaker 3: Asking about passing
a function as a parameter of

205
00:12:18.708 --> 00:12:21.194
another function.

206
00:12:21.194 --> 00:12:23.070
&gt;&gt; Kyle Simpson: So yes, you can.

207
00:12:23.070 --> 00:12:30.760
And then, the next answer that was
given might be slightly misleading.

208
00:12:30.760 --> 00:12:34.510
So let me just quickly divert into that.

209
00:12:35.730 --> 00:12:40.360
&gt;&gt; Kyle Simpson: If I called foo, let's
say I had two different functions here.

210
00:12:40.360 --> 00:12:45.490
&gt;&gt; Kyle Simpson: And
it doesn't matter what's in bar right now.

211
00:12:45.490 --> 00:12:48.240
If I said foo, and I gave it the name bar.

212
00:12:48.240 --> 00:12:49.417
I passed in bar.

213
00:12:49.417 --> 00:12:54.319
What I'm doing is getting the value
that is currently in bar.

214
00:12:54.319 --> 00:12:57.751
What is the value that's currently in bar?

215
00:12:57.751 --> 00:12:59.124
&gt;&gt; Kyle Simpson: It's a function.

216
00:12:59.124 --> 00:13:01.594
It's a function value.

217
00:13:01.594 --> 00:13:04.635
So I'm passing the function
as an argument, and

218
00:13:04.635 --> 00:13:07.900
it's getting assigned to the parameter b.

219
00:13:07.900 --> 00:13:10.540
So if I said plus b here, what is b?

220
00:13:11.840 --> 00:13:14.700
b's a function, which,
that's not really what we want.

221
00:13:14.700 --> 00:13:16.180
We wanted the thing to be called.

222
00:13:16.180 --> 00:13:21.640
I could call it here, and
whatever it returned, I'd get that value.

223
00:13:21.640 --> 00:13:25.630
But if you pass a function as a value,
it's just a function.

224
00:13:25.630 --> 00:13:29.501
If you call it,
&gt;&gt; Kyle Simpson: Then what it returns is

225
00:13:29.501 --> 00:13:32.451
what gets passed in as the argument.

226
00:13:32.451 --> 00:13:36.990
So there's the difference
between passing a function, and

227
00:13:36.990 --> 00:13:40.379
passing the result of a function call.

228
00:13:40.379 --> 00:13:43.541
&gt;&gt; Kyle Simpson: So
hopefully that clears up the questions

229
00:13:43.541 --> 00:13:46.532
that were being asked in the chat room.

230
00:13:49.897 --> 00:13:50.460
&gt;&gt; Kyle Simpson: Okay.

231
00:13:55.124 --> 00:13:57.249
&gt;&gt; Kyle Simpson: One last
detail on those functions.

232
00:13:57.249 --> 00:13:58.390
Let me back up.

233
00:13:58.390 --> 00:14:00.130
One last detail on those functions.

234
00:14:00.130 --> 00:14:02.650
These functions can return values as well.

235
00:14:02.650 --> 00:14:05.280
They can pass in values,
they can return values.

236
00:14:05.280 --> 00:14:09.095
So if I said return a divided by 2.

237
00:14:13.800 --> 00:14:18.778
&gt;&gt; Kyle Simpson: If I say var a equals 10,
and I call foo with 3,

238
00:14:18.778 --> 00:14:22.190
we know a is going to become what?

239
00:14:26.143 --> 00:14:27.400
&gt;&gt; Kyle Simpson: It's 23, right?

240
00:14:28.730 --> 00:14:33.604
But what if we took that return value and
assigned it to another variable?

241
00:14:33.604 --> 00:14:37.339
You see, when I invoke foo,
it's going to run.

242
00:14:37.339 --> 00:14:40.286
But then,
it's gonna return me a different value.

243
00:14:40.286 --> 00:14:44.948
In this case,
it's gonna compute 23 divided by 2.

244
00:14:44.948 --> 00:14:46.239
Which is?

245
00:14:47.608 --> 00:14:48.554
&gt;&gt; Kyle Simpson: 11.5.

246
00:14:48.554 --> 00:14:54.181
[LAUGH] So 11.5 is the thing
that's gonna come back and

247
00:14:54.181 --> 00:14:57.590
get assigned into the variable b.

248
00:14:57.590 --> 00:15:03.506
So if I say console.log(b),
I'm expecting to get 11.5.

249
00:15:03.506 --> 00:15:08.340
So if we take that program and
put it into our console.

250
00:15:10.983 --> 00:15:16.928
&gt;&gt; Kyle Simpson: We're expecting
both 23 and 11.5 to be printed out.

251
00:15:16.928 --> 00:15:20.572
And in fact, that's what we get.

