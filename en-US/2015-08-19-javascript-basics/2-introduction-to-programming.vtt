WEBVTT

1
00:00:00.440 --> 00:00:03.290
&gt;&gt; Kyle Simpson: Our goal
now is to jump right in, and

2
00:00:03.290 --> 00:00:07.520
where we're going to start is
Chapter 1 of the up and going book.

3
00:00:07.520 --> 00:00:10.742
So if you wanna follow along, again,
if you don't know js.com gets you to

4
00:00:10.742 --> 00:00:12.838
the repo, and
if you wanna follow along with us,

5
00:00:12.838 --> 00:00:15.010
essentially we're gonna
start from Chapter 1.

6
00:00:15.010 --> 00:00:18.208
I'm not gonna read word for
word the book to you, but

7
00:00:18.208 --> 00:00:22.652
i'm gonna try to distill the same
concepts that we deal with in the book.

8
00:00:22.652 --> 00:00:24.210
We'll try to go through those things.

9
00:00:24.210 --> 00:00:28.865
We'll take plenty of little mini breaks
after we've dealt with a concept or two,

10
00:00:28.865 --> 00:00:32.171
we'll take a little breaks,
and we'll have some time for

11
00:00:32.171 --> 00:00:33.930
you to practice these things.

12
00:00:33.930 --> 00:00:37.620
There is no substitute for
you typing this in yourself,

13
00:00:37.620 --> 00:00:41.540
either in your own code editor or
In the dev console of your browser.

14
00:00:41.540 --> 00:00:44.490
Trying each one of these things
yourself is really important.

15
00:00:44.490 --> 00:00:48.360
And that's true even if you already
come to the table with experience.

16
00:00:48.360 --> 00:00:51.200
Don't just forsake the things and
say, I get that.

17
00:00:51.200 --> 00:00:53.820
Definitely I encourage you to
follow along and participate.

18
00:00:53.820 --> 00:00:59.270
So we start this book series, the Up And

19
00:00:59.270 --> 00:01:01.530
Going book is conceptually
the first book of the series.

20
00:01:01.530 --> 00:01:02.640
This is the place to start,

21
00:01:02.640 --> 00:01:06.590
and it makes most sense to start
from literally the very beginning.

22
00:01:06.590 --> 00:01:10.565
So for those of you that don't really
have a lot of programming experience,

23
00:01:10.565 --> 00:01:12.614
let me try to dispel a couple of myths and

24
00:01:12.614 --> 00:01:15.858
fill in a couple of details that
you may not have heard before.

25
00:01:15.858 --> 00:01:19.873
So when people talk about programming,
when they talk about writing code,

26
00:01:19.873 --> 00:01:23.511
essentially what they're talking
about is typing into a text file,

27
00:01:23.511 --> 00:01:26.890
and that text file is referred
to as your source code.

28
00:01:26.890 --> 00:01:31.680
Now, the source code is
a set of special words, and

29
00:01:31.680 --> 00:01:35.470
phrases, and operators,
which are special characters.

30
00:01:35.470 --> 00:01:38.960
They're designed to give instructions
to the computer on what to do.

31
00:01:40.050 --> 00:01:45.049
But the symbols, and words, and phrases
that you put into that program are not

32
00:01:45.049 --> 00:01:49.066
actually in a form that the computer
can directly understand,

33
00:01:49.066 --> 00:01:50.834
it needs some assistance.

34
00:01:50.834 --> 00:01:55.193
And so there is a step after you write
these instructions into a text file,

35
00:01:55.193 --> 00:01:57.372
there is a step that comes along, and

36
00:01:57.372 --> 00:02:01.470
it goes by different names depending
on the context that you're in.

37
00:02:01.470 --> 00:02:06.420
But there's a step that essentially comes
along and converts the physical words,

38
00:02:06.420 --> 00:02:09.770
the readable code, as we would say,
that you've written,

39
00:02:09.770 --> 00:02:13.660
into a series of instructions that
the computer can actually understand.

40
00:02:13.660 --> 00:02:16.700
And those instructions are in
the form of binary, the ones and

41
00:02:16.700 --> 00:02:18.550
zeros strung together.

42
00:02:18.550 --> 00:02:22.270
So the first observation that I would
make, and I think this is an important one

43
00:02:22.270 --> 00:02:24.980
regardless of what level of
your experience in programming,

44
00:02:24.980 --> 00:02:29.810
is that the source code that you
write is not really for the computer.

45
00:02:29.810 --> 00:02:34.810
It's almost sort of a side artifact of
what the computer really cares about.

46
00:02:34.810 --> 00:02:37.850
There's a special program on your
computer, a compiler, or an interpreter,

47
00:02:37.850 --> 00:02:39.970
or something like that, that does care.

48
00:02:39.970 --> 00:02:43.280
But the overall computer system
doesn't care about the source code.

49
00:02:43.280 --> 00:02:48.870
And it is actually possible to
write a potentially infinite

50
00:02:48.870 --> 00:02:54.210
different set of source code files that
when boiled down to those ones and

51
00:02:54.210 --> 00:02:57.219
zeros would produce exactly
the same stream of ones and zeros.

52
00:02:58.280 --> 00:03:02.635
So if you could literally write an
infinite number of different programs that

53
00:03:02.635 --> 00:03:04.712
do the same thing for your computer,

54
00:03:04.712 --> 00:03:08.131
then what difference does it
make what source code we write?

55
00:03:08.131 --> 00:03:12.222
And that's the first big observation that
I'd like to make is that the difference is

56
00:03:12.222 --> 00:03:14.928
that source code is not for
the computer, I mean, yes,

57
00:03:14.928 --> 00:03:19.160
it's used by your compiler, but it's not
for the computer, it is for the developer.

58
00:03:20.210 --> 00:03:23.270
It is for you to be able to
look at what you've done and

59
00:03:23.270 --> 00:03:26.200
understand what your
program is intending to do.

60
00:03:26.200 --> 00:03:31.250
And it is also for other developers,
people on your team, your future self,

61
00:03:31.250 --> 00:03:34.620
if you come back six months later,
and you're looking at a program.

62
00:03:34.620 --> 00:03:39.370
You want to write the code in such a way
that it not only does the correct thing,

63
00:03:39.370 --> 00:03:41.550
but it also makes sense.

64
00:03:41.550 --> 00:03:43.250
That's an often overlooked topic.

65
00:03:43.250 --> 00:03:47.590
In fact, many times people come back after
having written a completely nonsensible

66
00:03:47.590 --> 00:03:52.640
program and try to sprinkle
in bits of sensibility to it.

67
00:03:52.640 --> 00:03:56.630
And I would encourage you to try to
strive to go in the opposite direction.

68
00:03:56.630 --> 00:04:01.160
Try to write everything that you write
in such a way that your future self,

69
00:04:01.160 --> 00:04:05.820
having no context and having completely
forgotten, having had many margaritas and

70
00:04:05.820 --> 00:04:09.750
many nights of sleep since, that you could
go back and look at that line of code and

71
00:04:09.750 --> 00:04:12.180
understand what it meant.

72
00:04:12.180 --> 00:04:13.390
What was it intending to do?

73
00:04:13.390 --> 00:04:16.540
What was its pros and its cons?

74
00:04:16.540 --> 00:04:23.130
Don't assume, if you think, I know this
variable can only ever have numbers in it.

75
00:04:23.130 --> 00:04:25.120
But if that's not obvious
from the line of code,

76
00:04:25.120 --> 00:04:27.990
then that's an assumption that you've
made that isn't obvious in the code and

77
00:04:27.990 --> 00:04:32.800
won't be obvious to another developer and
won't be obvious to your future self.

78
00:04:32.800 --> 00:04:36.760
So it's incredibly important to approach
writing source code from the perspective

79
00:04:36.760 --> 00:04:40.670
of the developer, more so
even than the perspective of the program.

80
00:04:40.670 --> 00:04:43.690
Of course, you have to write
syntactically correct code,

81
00:04:43.690 --> 00:04:47.000
you have to write code that works
the way the language expects.

82
00:04:47.000 --> 00:04:49.740
And we'll spend plenty of time
talking about that in a moment.

83
00:04:49.740 --> 00:04:53.480
But I did not wanna gloss over the fact
that the source code that you write is for

84
00:04:53.480 --> 00:04:54.700
developers.

85
00:04:54.700 --> 00:04:59.690
And there's lots of different things that
you can do, and it will be an ongoing

86
00:04:59.690 --> 00:05:04.550
process, you will never completely master
the skill of writing sensible programs.

87
00:05:04.550 --> 00:05:08.430
You can master the skill of
writing functional programs,

88
00:05:09.590 --> 00:05:11.140
with given enough practice.

89
00:05:11.140 --> 00:05:12.130
There's that old idiom,

90
00:05:12.130 --> 00:05:15.090
like 10,000 hours of practice
makes you an expert or whatever.

91
00:05:15.090 --> 00:05:16.080
I don't even know if that's true,

92
00:05:16.080 --> 00:05:19.220
but if it were true in some
respect to programming,

93
00:05:19.220 --> 00:05:24.470
it's possible to achieve a mastery over
the JavaScript programming language.

94
00:05:24.470 --> 00:05:27.957
I do not think it's possible to achieve
a mastery of a writing sensible code in

95
00:05:27.957 --> 00:05:29.684
JavaScript or in any other language.

96
00:05:29.684 --> 00:05:32.412
It is something you have to work at,
it's something you have to try,

97
00:05:32.412 --> 00:05:35.170
you have to practice,
you have to learn over periods of time.

98
00:05:35.170 --> 00:05:38.590
And I consider myself
particularly not good at this.

99
00:05:38.590 --> 00:05:42.310
Most of my effort in teaching
is not writing code,

100
00:05:42.310 --> 00:05:43.960
but writing code that's more teachable.

101
00:05:45.060 --> 00:05:47.020
And I struggle with that,
to be completely honest.

102
00:05:47.020 --> 00:05:50.060
I struggle to figure out how
can I rearrange this in a way,

103
00:05:50.060 --> 00:05:51.600
it's not just about what I call something,
but

104
00:05:51.600 --> 00:05:54.850
how can I rearrange this in a way
that actually makes sense to people?

105
00:05:54.850 --> 00:05:59.060
That fits the way our brains kind of
try to linearly process through stuff?

106
00:05:59.060 --> 00:06:02.620
That's a difficult process, so
it's not something I can just

107
00:06:02.620 --> 00:06:05.550
teach you as a road skill and
then you can be certified in it.

108
00:06:05.550 --> 00:06:08.375
But it's something I would
encourage you to not gloss over it,

109
00:06:08.375 --> 00:06:10.518
something that's very
important to try to do.

110
00:06:10.518 --> 00:06:14.355
[COUGH] So I already have started
to skip over some things, so

111
00:06:14.355 --> 00:06:16.060
let's fill in some gaps.

112
00:06:16.060 --> 00:06:18.270
When we talk about writing source code,

113
00:06:18.270 --> 00:06:22.030
there's a word that's
referred to which is syntax.

114
00:06:22.030 --> 00:06:26.170
And in more formal terms, there's a set
of rules that put that syntax together,

115
00:06:26.170 --> 00:06:28.330
and that set of rules
is called the grammar.

116
00:06:28.330 --> 00:06:31.530
So the syntax and the grammar together,

117
00:06:31.530 --> 00:06:35.630
fit together as how to
write a JavaScript program.

118
00:06:35.630 --> 00:06:39.220
It will tell you what are the valid
combinations of characters,

119
00:06:39.220 --> 00:06:42.010
the valid combinations of words
that you can put together

120
00:06:42.010 --> 00:06:43.580
to do what you wanna do with your program.

121
00:06:45.960 --> 00:06:50.860
So the syntax of a programming
language is much like the syntax for

122
00:06:50.860 --> 00:06:53.990
English or
whatever your native tongue may be.

123
00:06:53.990 --> 00:06:59.380
There are actual physical things that
you can do, there's punctuation marks

124
00:06:59.380 --> 00:07:03.510
in the English Language, like the comma,
and the period, and the exclamation mark.

125
00:07:03.510 --> 00:07:07.010
There are parts of phrases
that work together,

126
00:07:07.010 --> 00:07:11.020
like a word used as a verb versus a word
used as a noun, those sort of things.

127
00:07:11.020 --> 00:07:14.030
But the way you put those things
together into a phrase, and

128
00:07:14.030 --> 00:07:18.110
then put phrases together and
make a sentence, that's called grammar.

129
00:07:18.110 --> 00:07:21.840
And you maybe remember, back in school
you learned English grammar or whatever.

130
00:07:21.840 --> 00:07:24.860
So there's a very similar
concept in programming.

131
00:07:24.860 --> 00:07:27.800
Learning first the syntax and
then the rules of how to put the syntax

132
00:07:27.800 --> 00:07:32.740
together to make a coherent, what we call,
statement, that's what we call grammar.

133
00:07:32.740 --> 00:07:36.760
So I will put the word grammar and the
word syntax together from here on out, and

134
00:07:36.760 --> 00:07:39.020
I'll just use the word syntax,
most people do.

135
00:07:39.020 --> 00:07:43.520
But just so you understand, they're are
two different faces of the Rubik's Cube,

136
00:07:43.520 --> 00:07:45.580
if you will,
they're different parts of the same thing.

