WEBVTT

1
00:00:00.700 --> 00:00:02.030
&gt;&gt; Kyle: All right,
now, back to variables,

2
00:00:02.030 --> 00:00:07.470
we've mentioned this many times, but
we didn't explicitly define that.

3
00:00:07.470 --> 00:00:11.040
And here is where it matters,
if you put a var in front of something.

4
00:00:11.040 --> 00:00:17.390
So, if I have a program where
the very first line says a = 42,

5
00:00:17.390 --> 00:00:21.420
I'm assigning to a variable that
has never been formally declared.

6
00:00:21.420 --> 00:00:26.861
And assigning to a variable that's
never been formally declared,

7
00:00:26.861 --> 00:00:29.347
is a really, really bad idea.

8
00:00:29.347 --> 00:00:36.150
Every variable that you use in your
program should be formally declared.

9
00:00:36.150 --> 00:00:41.706
And it should be formally declared,
before the first time you use it.

10
00:00:41.706 --> 00:00:46.174
Okay, technically this program
formally declares a and

11
00:00:46.174 --> 00:00:49.533
uses it, but it makes use of this concept.

12
00:00:49.533 --> 00:00:55.566
Which we won't really get into here, it
makes use of this concept called hoisting.

13
00:00:55.566 --> 00:01:03.858
And it's a more confusing program even
though it's a correctly running program.

14
00:01:03.858 --> 00:01:06.325
&gt;&gt; Speaker 2: Like I say you should,
declares it after the scope tool.

15
00:01:06.325 --> 00:01:09.353
&gt;&gt; Kyle: Yeah, I cover hoisting
a lot more in the book on Scope and

16
00:01:09.353 --> 00:01:12.266
Closures, so
if you wanna get into the nuances of it.

17
00:01:12.266 --> 00:01:15.804
It has to do with the fact that this
program is gonna get compiled first.

18
00:01:15.804 --> 00:01:21.316
So it's gonna find that var
a before it tries to run anything,

19
00:01:21.316 --> 00:01:25.987
but this is a more confusing
version of the program.

20
00:01:25.987 --> 00:01:28.633
You would always want to prefer,
for less confusing programs,

21
00:01:28.633 --> 00:01:30.648
to write var a first before
you do an assignment.

22
00:01:30.648 --> 00:01:34.813
And you can optionally combine
those two into the same thing, but

23
00:01:34.813 --> 00:01:38.536
you would always wanna formally
declare every variable.

24
00:01:38.536 --> 00:01:41.610
And the way we typically do that
in JavaScript up to this point,

25
00:01:41.610 --> 00:01:43.190
is with the var keyword.

26
00:01:43.190 --> 00:01:48.700
There's two more coming in ES6,
one is called let, and

27
00:01:48.700 --> 00:01:50.930
the other one we mentioned
earlier is const.

28
00:01:53.720 --> 00:01:56.440
Let and
const are block scoping declarations,

29
00:01:56.440 --> 00:02:00.040
rather than a function scoping
declaration like var is.

30
00:02:01.250 --> 00:02:04.339
What that means has a whole
chapter [LAUGH] in the book, so

31
00:02:04.339 --> 00:02:06.126
I won't get into that too much.

32
00:02:06.126 --> 00:02:10.825
But those are the three ways that you
formally declare a variable in JavaScript.

33
00:02:10.825 --> 00:02:14.462
There's one other way to formally
declare an identifier, and

34
00:02:14.462 --> 00:02:16.528
that is to declare it as a function.

35
00:02:16.528 --> 00:02:20.482
And we haven't talked about functions yet,
but if I said function a,

36
00:02:20.482 --> 00:02:24.650
I'm declaring a variable called a,
which has this function value in it.

37
00:02:26.490 --> 00:02:30.040
So you always want to formally
declare your variables,

38
00:02:31.230 --> 00:02:32.700
in one of the ways that I just showed.

39
00:02:32.700 --> 00:02:34.434
Let me put those other ones by.

40
00:02:40.701 --> 00:02:44.003
&gt;&gt; Kyle: Those are the ways to
formally declare variables, and

41
00:02:44.003 --> 00:02:47.753
you're always gonna want to do
one of those in your programs.

42
00:02:47.753 --> 00:02:50.576
There's a notion in many programming
languages, and JavaScript is no different.

43
00:02:50.576 --> 00:02:57.055
That if I had a collection of statements,
like var a = 42,

44
00:02:57.055 --> 00:03:01.510
and foo (a / ), these are statements.

45
00:03:01.510 --> 00:03:08.926
And if I had a collection of statements
that represented a logical unit together.

46
00:03:08.926 --> 00:03:14.558
Then I could put those statements
together inside of a curly brace pair,

47
00:03:14.558 --> 00:03:18.790
like we see there, and
that's called a block.

48
00:03:18.790 --> 00:03:22.820
A block, essentially,
is a pairing of curly braces with one or

49
00:03:22.820 --> 00:03:23.880
more statements inside of it.

50
00:03:23.880 --> 00:03:28.561
Now this block is a completely
stand-alone, empty block,

51
00:03:28.561 --> 00:03:32.893
it doesn't mean anything
the way we've expressed it.

52
00:03:32.893 --> 00:03:36.346
It's a stylistic thing, it says these
two things belong together, and

53
00:03:36.346 --> 00:03:38.169
they're separate from other stuff.

54
00:03:38.169 --> 00:03:41.628
Like if you had a program
that looked like this,

55
00:03:41.628 --> 00:03:45.619
and you had stuff up here,
and you had stuff down here.

56
00:03:45.619 --> 00:03:50.992
You're stylistically signalling
these two things in between,

57
00:03:50.992 --> 00:03:53.245
they're kind of special.

58
00:03:53.245 --> 00:03:54.828
They're shut off, they're their own deal.

59
00:03:54.828 --> 00:03:58.025
So there's not any
functional difference here.

60
00:03:58.025 --> 00:04:02.654
But most of the time blocks are not
appearing by themselves like that,

61
00:04:02.654 --> 00:04:05.720
most of the time they
appear associated with.

62
00:04:05.720 --> 00:04:07.396
Another kind of a statement, so

63
00:04:07.396 --> 00:04:11.626
there's different kinds of statements
that have blocks associated with them.

64
00:04:11.626 --> 00:04:15.990
For example, which we'll into in
a little bit, the if statement.

65
00:04:15.990 --> 00:04:21.235
So if I wrote a statement
where I wanted to say,

66
00:04:21.235 --> 00:04:27.165
if a was greater than 10,
and attach a block to it.

67
00:04:27.165 --> 00:04:29.432
Then what I'm saying is,
look at this statement,

68
00:04:29.432 --> 00:04:31.234
and figure out if that's true or false.

69
00:04:31.234 --> 00:04:36.558
Is the value currently in a,
greater than 10, or not?

70
00:04:36.558 --> 00:04:39.015
It's only one of two
possible answers here.

71
00:04:39.015 --> 00:04:42.777
In our program we would have
had to declare the var a, and

72
00:04:42.777 --> 00:04:45.909
give it some useful
value like the value 42.

73
00:04:48.320 --> 00:04:50.660
And then give it some
other value down here.

74
00:04:50.660 --> 00:04:54.240
So if I said if a is greater than 10,
is the answer yes or no?

75
00:04:54.240 --> 00:04:57.010
&gt;&gt; Speaker 2: Yes, it's greater than 10.

76
00:04:57.010 --> 00:05:00.200
&gt;&gt; Kyle: Yes, it's greater than 10, so

77
00:05:00.200 --> 00:05:03.840
we would go into the block only if
we answered yes to this question.

78
00:05:03.840 --> 00:05:06.430
This asked a question,
we go into that block and

79
00:05:06.430 --> 00:05:10.040
do these things only if
the question answered, yes.

80
00:05:10.040 --> 00:05:14.650
In programming terms, yes and no
are actually what are called the values,

81
00:05:14.650 --> 00:05:16.690
true and false.

82
00:05:16.690 --> 00:05:21.710
So the question is is that statement true,
and the answer is, yes, it is true.

83
00:05:21.710 --> 00:05:25.330
So we would execute the stuff inside
of the block, otherwise we don't.

84
00:05:25.330 --> 00:05:28.830
So that's one way to attach a block
to something, is to an if statement.

85
00:05:28.830 --> 00:05:32.616
Another way to attach to
a block to a statement,

86
00:05:32.616 --> 00:05:37.364
is to have a loop, like a y loop,
or a 4 loop, or whatever.

87
00:05:37.364 --> 00:05:40.176
And we'll come to loops in just a moment,
but

88
00:05:40.176 --> 00:05:44.254
you notice that this block again,
it belongs to that statement.

89
00:05:44.254 --> 00:05:48.700
And it's only going to get executed
in the context of that statement.

90
00:05:48.700 --> 00:05:53.661
So it will only get executed if this
loop is going to happen, in this case,

91
00:05:53.661 --> 00:05:55.912
the loop is going to happen once.

92
00:05:55.912 --> 00:05:59.606
Because the first time we enter,
a is greater than 42, but

93
00:05:59.606 --> 00:06:01.496
immediately we set it to 10.

94
00:06:01.496 --> 00:06:05.879
So the next time we try to do this loop,
it's not going to keep going.

95
00:06:05.879 --> 00:06:11.284
Because a will no longer be greater
than 10, It will just be the 10 itself.

96
00:06:11.284 --> 00:06:13.987
If we have a block that's not
associated with anything,

97
00:06:13.987 --> 00:06:15.858
it means it's going to run every time.

98
00:06:15.858 --> 00:06:17.866
Or, we can attach a block to something,
and

99
00:06:17.866 --> 00:06:20.105
it means it's only going
to run conditionally.

100
00:06:20.105 --> 00:06:25.170
If that statement actually results
in something that we want to do.

101
00:06:25.170 --> 00:06:27.670
There's lots of places
where blocks can appear,

102
00:06:27.670 --> 00:06:30.480
blocks can also appear as
part of a function statement.

103
00:06:31.680 --> 00:06:37.290
So here that block of statements
only happens for this foo function.

104
00:06:38.890 --> 00:06:42.210
Probably don't wanna call recursively,
so I'll call a different function here.

105
00:06:42.210 --> 00:06:47.287
Now this block only happens if foo ever
gets called, so it doesn't run right away.

106
00:06:47.287 --> 00:06:50.173
But if later in a program I
try to invoke the function,

107
00:06:50.173 --> 00:06:54.041
then it would find that block and
it would run that block of code, okay?

108
00:06:54.041 --> 00:06:58.330
So just think conceptually, if I wrap
a curly brace pair around the set of code,

109
00:06:58.330 --> 00:07:00.648
I'm putting that as a collection of code.

110
00:07:00.648 --> 00:07:04.680
And then I can attach that block to
various different kinds of statements.

111
00:07:04.680 --> 00:07:06.720
And that will change how, and if, and

112
00:07:06.720 --> 00:07:10.300
when that block gets executed,
that's the major takeaway.

113
00:07:13.120 --> 00:07:16.310
&gt;&gt; Speaker 3: There is a question here
to the bottom, if you wanna read it.

114
00:07:17.960 --> 00:07:23.323
&gt;&gt; Kyle: Question was essentially,
you can declare a function like that, or

115
00:07:23.323 --> 00:07:28.718
you can declare a function-
&gt;&gt; Kyle: Like that,

116
00:07:28.718 --> 00:07:31.650
and technically there's a third variation.

117
00:07:31.650 --> 00:07:36.799
Which is to give it a name itself,
which doesn't have to be the same.

118
00:07:36.799 --> 00:07:40.595
Those are all functions,
those are not all function declarations.

119
00:07:40.595 --> 00:07:43.748
The first line is a function declaration,

120
00:07:43.748 --> 00:07:49.365
the next two are function expressions
attached to a variable declaration.

121
00:07:49.365 --> 00:07:52.340
There's a variety of
differences between these, and

122
00:07:52.340 --> 00:07:56.620
we'd get too far off track if worry too
much about those nuanced differences.

123
00:07:56.620 --> 00:08:01.651
So there's a variety of differences
between them, but the major takeaway here

124
00:08:01.651 --> 00:08:06.633
that you would want to-
&gt;&gt; Kyle: That you would

125
00:08:06.633 --> 00:08:11.457
wanna not forget, is that in all
three [COUGH] of these cases,

126
00:08:11.457 --> 00:08:14.593
the block is associated to a function.

127
00:08:14.593 --> 00:08:17.760
And the block will not run
unless you execute the function.

128
00:08:20.776 --> 00:08:24.211
&gt;&gt; Kyle: So the nuanced differences
between function declarations and

129
00:08:24.211 --> 00:08:27.783
variable declarations with
function expression assignments.

130
00:08:27.783 --> 00:08:29.978
Those nuanced differences are outside
our scope of discussion here.

131
00:08:29.978 --> 00:08:33.275
They are covered in depth
in the book series.

132
00:08:33.275 --> 00:08:34.185
So next steps,

133
00:08:34.185 --> 00:08:38.319
you would wanna pay more attention
to that reading through the books.

134
00:08:38.319 --> 00:08:41.263
They're also covered in my training,
my advanced JavaScript training.

