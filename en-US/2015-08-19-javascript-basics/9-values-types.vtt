WEBVTT

1
00:00:00.481 --> 00:00:03.278
&gt;&gt; Kyle Simpson: We've been throwing
around some concepts, and we wanna come

2
00:00:03.278 --> 00:00:07.170
back and layer those in, if there have
been some things that maybe were missed.

3
00:00:07.170 --> 00:00:12.130
If I have the value 42, and another

4
00:00:12.130 --> 00:00:16.360
way of expressing a value that looks very
similar is to put some quotes around it.

5
00:00:17.550 --> 00:00:21.790
These two values look like they are,
yeah, roughly the same.

6
00:00:23.070 --> 00:00:27.145
If we were to print out both of them,
they would both print out in the same way.

7
00:00:27.145 --> 00:00:28.677
They'd both say 42.

8
00:00:28.677 --> 00:00:32.323
They'd have the literal characters 4 and
2 after each other.

9
00:00:32.323 --> 00:00:36.550
But they are going to behave
differently in our JavaScript program.

10
00:00:36.550 --> 00:00:41.280
And that is because these values
are intrinsically of different types.

11
00:00:41.280 --> 00:00:42.250
And that word type,

12
00:00:42.250 --> 00:00:46.470
we don't mean physically putting
your fingers on keys on a keyboard.

13
00:00:46.470 --> 00:00:52.314
We mean it is an intrinsic behavior
of the value as expressed.

14
00:00:52.314 --> 00:00:56.498
So this 42 that we see
on line 1 is a number.

15
00:00:56.498 --> 00:01:02.947
And the 42 is what we call a string.

16
00:01:02.947 --> 00:01:08.580
And numbers have different behavior
associated with them than strings do.

17
00:01:08.580 --> 00:01:11.010
So, for example,
numbers are what we do math with.

18
00:01:11.010 --> 00:01:14.881
We can say 42 divided by 2,
and that gives us 21.

19
00:01:14.881 --> 00:01:18.595
Strings are what we do input and
output with.

20
00:01:18.595 --> 00:01:21.460
Strings are also how we
deal with characters.

21
00:01:21.460 --> 00:01:25.480
So, if I wanted to say what is
the first character of the string "42",

22
00:01:25.480 --> 00:01:31.655
that [0] could tell me that the first
character of it is the character "4".

23
00:01:31.655 --> 00:01:37.536
So the character "4" is the first
character in the string "42".

24
00:01:37.536 --> 00:01:40.855
Just like if I had a string "abc",

25
00:01:40.855 --> 00:01:47.170
the character at the 1 position
is the character b, okay?

26
00:01:47.170 --> 00:01:49.795
Strings are accessing things
character by character.

27
00:01:49.795 --> 00:01:51.940
Numbers are what we do math with.

28
00:01:51.940 --> 00:01:55.306
These different intrinsic behaviors
are important to keep in mind.

29
00:01:55.306 --> 00:01:59.209
Because if I express the number
42 in my JavaScript program,

30
00:01:59.209 --> 00:02:02.910
I am signaling that I intend to
use that in a mathematic way.

31
00:02:02.910 --> 00:02:08.290
And if I instead express "42" in
my program, I am expressing that I

32
00:02:08.290 --> 00:02:13.180
intend to use that in a string way, yeah?
&gt;&gt; Speaker 2: Is the use of

33
00:02:13.180 --> 00:02:18.134
single versus double quotes important?
&gt;&gt; Kyle Simpson: In JavaScript,

34
00:02:18.134 --> 00:02:22.529
strings can either be double quotes or
single quotes.

35
00:02:22.529 --> 00:02:25.938
You can't have double quote on
the beginning and single quote on the end.

36
00:02:25.938 --> 00:02:26.893
It has to match.

37
00:02:26.893 --> 00:02:28.950
But they can either be double quotes or

38
00:02:28.950 --> 00:02:32.900
single quotes in terms of your
de-limiting of a string literal.

39
00:02:32.900 --> 00:02:36.390
There is no difference whatsoever
functionally in JavaScript.

40
00:02:37.740 --> 00:02:42.150
In fact, stylistically the only
arguments that can ever be made are some

41
00:02:42.150 --> 00:02:44.980
people prefer the single quote
because it's less keystrokes for them,

42
00:02:44.980 --> 00:02:46.710
they do not have to hit Shift.

43
00:02:46.710 --> 00:02:49.600
Other people prefer the double
quote because it's more natural

44
00:02:49.600 --> 00:02:51.540
that they've done that in other languages.

45
00:02:51.540 --> 00:02:53.590
And it's purely a stylistic thing.

46
00:02:53.590 --> 00:02:56.720
Here's what I would say, never, ever mix.

47
00:02:58.050 --> 00:03:01.190
Do not have part of your
program using single quotes and

48
00:03:01.190 --> 00:03:03.740
part of your program using double quotes.

49
00:03:03.740 --> 00:03:05.740
Pick one, and I really don't care which.

50
00:03:05.740 --> 00:03:10.340
You can pick whichever one you want,
there's no difference, but pick one and

51
00:03:10.340 --> 00:03:12.790
stick with that consistently
throughout your program.

52
00:03:12.790 --> 00:03:16.494
You will see that I prefer double quotes.

53
00:03:16.494 --> 00:03:19.793
I use double quotes.
&gt;&gt; Kyle Simpson: Okay.

54
00:03:19.793 --> 00:03:24.747
[COUGH]
&gt;&gt; Kyle Simpson: These values have

55
00:03:24.747 --> 00:03:26.743
these different types.

56
00:03:26.743 --> 00:03:31.560
So if I said var a = 42,
I've got 42 that's in an a variable.

57
00:03:31.560 --> 00:03:34.030
Let me take off the var part
just to not confuse that now.

58
00:03:34.030 --> 00:03:35.750
So I'm just making an assignment.

59
00:03:35.750 --> 00:03:38.000
The a variable's gonna have the 42 in it.

60
00:03:38.000 --> 00:03:43.165
And if I wanted to print it out,
I can say, console.log(a).

61
00:03:43.165 --> 00:03:47.890
And you'll notice that the JavaScript
engine does print that out.

62
00:03:47.890 --> 00:03:53.124
If we try this program,
&gt;&gt; Kyle Simpson: You'll

63
00:03:53.124 --> 00:03:54.020
notice that see 42.

64
00:03:54.020 --> 00:03:58.070
But what happens if I send a = "42", and

65
00:03:58.070 --> 00:04:05.191
then I said console.log(a)?
&gt;&gt; Kyle Simpson: It's very subtle and

66
00:04:05.191 --> 00:04:08.250
difficult even on the projector to tell.

67
00:04:08.250 --> 00:04:10.955
But this one is printed
in blue characters, and

68
00:04:10.955 --> 00:04:13.331
this one is printed in black characters.

69
00:04:13.331 --> 00:04:17.479
Because the console is giving you
a very subtle hint that underlying what

70
00:04:17.479 --> 00:04:20.879
it's done, it was dealing with
the different value type.

71
00:04:22.010 --> 00:04:23.340
So it's important to understand.

72
00:04:23.340 --> 00:04:26.717
And it's not really incorrect in the book,
but

73
00:04:26.717 --> 00:04:32.551
there is a slightly misleading thing that
I'm gonna correct in a second edition.

74
00:04:32.551 --> 00:04:34.481
When it talks about console.log,

75
00:04:34.481 --> 00:04:38.335
it suggests that console.log
changes everything to a string.

76
00:04:38.335 --> 00:04:41.985
Actually, it doesn't really change it to a
string when you're running inside of your

77
00:04:41.985 --> 00:04:45.375
JavaScript engine,
it just prints out whatever thing you had.

78
00:04:45.375 --> 00:04:50.695
So that's why we see a slightly
different representation there.

79
00:04:50.695 --> 00:04:53.625
Which is what I meant, there are other
contexts that change things into strings.

80
00:04:53.625 --> 00:04:59.870
So, for example, saying alert(42), or
a variable with that number in it,

81
00:04:59.870 --> 00:05:02.410
changes it into a string so
that it can print it in the box.

82
00:05:03.570 --> 00:05:06.860
So we can't tell any difference inside of
an alert box, whether it had a number or

83
00:05:06.860 --> 00:05:09.880
a string, but we know under the covers
it needed a string to do it.

84
00:05:09.880 --> 00:05:18.632
So it actually converted into a string.
&gt;&gt; Kyle Simpson: So

85
00:05:18.632 --> 00:05:25.523
if I wanted the string representation of
this value, if I had it as a number and

86
00:05:25.523 --> 00:05:30.517
maybe then I later did some division,
I said a = a / 2.

87
00:05:30.517 --> 00:05:34.340
So now we know a is holding the value 21.

88
00:05:34.340 --> 00:05:39.708
And if I then wanted to do something
string oriented with it, like output, or

89
00:05:39.708 --> 00:05:44.520
getting at its character, or whatever,
I would need to convert it into a string.

90
00:05:45.770 --> 00:05:47.950
Convert from one type to another.

91
00:05:47.950 --> 00:05:51.050
And this conversion is common
in all programming languages.

92
00:05:51.050 --> 00:05:56.080
All programming languages
have a notion of conversion.

93
00:05:56.080 --> 00:05:59.630
In JavaScript, the word that
we use is slightly different.

94
00:05:59.630 --> 00:06:04.464
It's not conversion, it is coercion.

95
00:06:04.464 --> 00:06:08.698
And some people like to nit pick and say,
well, there's one thing that's conversion

96
00:06:08.698 --> 00:06:11.510
in JavaScript and
another thing that's coercion.

97
00:06:11.510 --> 00:06:16.610
I find it much easier to actually
distinguish between explicit and

98
00:06:16.610 --> 00:06:20.340
implicit rather than conversion and
coercion.

99
00:06:21.470 --> 00:06:26.810
So, an explicit conversion, one that it's
obvious that's what I'm trying to do,

100
00:06:26.810 --> 00:06:30.970
if I wanted to turn a into
its string representation,

101
00:06:30.970 --> 00:06:33.250
I could literally use the string function.

102
00:06:35.530 --> 00:06:36.590
And that's gonna convert.

103
00:06:36.590 --> 00:06:41.050
And if you have any experience in another
programming language where they do type

104
00:06:41.050 --> 00:06:45.290
casting or other forms of conversion,
that looks very similar.

105
00:06:45.290 --> 00:06:49.493
So I'm explicitly saying, take the thing
that's in a now, and if it's not a string,

106
00:06:49.493 --> 00:06:50.989
make it look like a string, and

107
00:06:50.989 --> 00:06:56.646
then assign that value back into a.
&gt;&gt; Kyle Simpson: So

108
00:06:56.646 --> 00:07:00.979
if we took this program,
if we put a console.log on it,

109
00:07:00.979 --> 00:07:06.348
if we took that program and we ran it,
&gt;&gt; Kyle Simpson: Are we

110
00:07:06.348 --> 00:07:11.291
expecting a blue number for the 21,
which would be that it's a number,

111
00:07:11.291 --> 00:07:15.690
or are we expecting black characters for
21 cuz it's a string?

112
00:07:16.860 --> 00:07:19.090
We'd be expecting black
because it's a string.

113
00:07:19.090 --> 00:07:20.790
And in fact, we get black.

114
00:07:20.790 --> 00:07:22.730
Again, it's really subtle on
the projector in the stream.

115
00:07:22.730 --> 00:07:24.660
But this is black 21,

116
00:07:24.660 --> 00:07:28.380
because it's actually a string
representation that I printed out.

117
00:07:28.380 --> 00:07:33.117
Exactly the same as if I had
said console.log("Hello World").

118
00:07:37.979 --> 00:07:39.088
&gt;&gt; Kyle Simpson: Okay?

119
00:07:39.088 --> 00:07:44.959
All right, so strings serve a purpose in
programs differently than numbers do,

120
00:07:44.959 --> 00:07:49.290
and converting between the two
is almost always required.

121
00:07:50.490 --> 00:07:56.550
We saw that we could say a = String(a)
to convert from anything into a string.

122
00:07:57.810 --> 00:07:59.130
If we wanted to go the other direction,

123
00:07:59.130 --> 00:08:03.170
like go from a string to a number, like
if we had another variable called b and

124
00:08:03.170 --> 00:08:07.020
we said b, then we could do the same
thing but with the number function.

125
00:08:07.020 --> 00:08:09.380
We could say Number(a).

126
00:08:09.380 --> 00:08:10.865
So now b is gonna be the number 21.

127
00:08:10.865 --> 00:08:18.083
And a is gonna be the string quote 21
&gt;&gt; Kyle Simpson: There's

128
00:08:18.083 --> 00:08:21.910
a question in the chat room
about changing things.

129
00:08:21.910 --> 00:08:26.423
This is a subtle point, which I don't
wanna belabor too much, which we'll

130
00:08:26.423 --> 00:08:30.811
actually get much more into when we
talk in the morning session of day two.

131
00:08:30.811 --> 00:08:34.520
When we talk about coercions and
all that stuff in much, much more detail.

132
00:08:34.520 --> 00:08:39.480
But, just as a brief answer, in
JavaScript, variables do not have types.

133
00:08:39.480 --> 00:08:41.820
There's no such thing as
a variable having a type.

134
00:08:41.820 --> 00:08:45.190
In JavaScript, the value has the type.

135
00:08:45.190 --> 00:08:49.555
So the value 42 or the value quote
42 is the thing with the type.

136
00:08:49.555 --> 00:08:52.317
And the variable,
the thing that we call a or

137
00:08:52.317 --> 00:08:56.900
b, it has no type,
it can have any value of any type in it.

138
00:08:56.900 --> 00:09:00.620
Whereas in other languages that
are called static languages,

139
00:09:00.620 --> 00:09:03.440
those languages you don't
declare a type on the value so

140
00:09:03.440 --> 00:09:07.200
much as you declare a type
on the variable itself.

141
00:09:07.200 --> 00:09:11.090
So in C, for example, if I say int a,

142
00:09:11.090 --> 00:09:16.210
I'm saying this variable container
must hold only ints, integers.

143
00:09:16.210 --> 00:09:20.480
So I'm typing the variable itself rather
than worrying about the type of the value.

144
00:09:20.480 --> 00:09:21.933
So it's just a distinction in JavaScript.

145
00:09:21.933 --> 00:09:26.906
And in other dynamic value
languages like JavaScript,

146
00:09:26.906 --> 00:09:31.874
we don't have a type for
the variable, we have a type for

147
00:09:31.874 --> 00:09:37.812
the value.
&gt;&gt; Kyle Simpson: The return

148
00:09:37.812 --> 00:09:40.440
of a variable color code matters.

149
00:09:40.440 --> 00:09:43.923
The only point that we are making here
is to understand if you're gonna program

150
00:09:43.923 --> 00:09:46.952
inside of the console,
understanding what the console's doing.

151
00:09:46.952 --> 00:09:52.630
It has special behaviors that are outside
of what JavaScript itself is doing.

152
00:09:52.630 --> 00:09:55.119
So here I'm just helping you
understand that the console,

153
00:09:55.119 --> 00:09:58.423
if you see blue characters, then the
console's telling you you had a number.

154
00:09:58.423 --> 00:10:02.320
And if you see black characters, the
console's telling you you had a string.

155
00:10:02.320 --> 00:10:05.520
That's just a subtle nuance of working
with the console, it does not matter

156
00:10:05.520 --> 00:10:11.909
actually to the JavaScript engine.
&gt;&gt; Kyle Simpson: Okay,

157
00:10:11.909 --> 00:10:16.099
so we're not gonna do much more
about coercions except for

158
00:10:16.099 --> 00:10:19.946
me to suggest that those two
that I showed you before,

159
00:10:19.946 --> 00:10:25.350
these are explicit, and
there are ways to do implicit coercions.

160
00:10:25.350 --> 00:10:29.250
So a way to go from a number to a string

161
00:10:30.500 --> 00:10:33.490
that is sort of a side effect
of some other operation,

162
00:10:33.490 --> 00:10:36.170
that's what I mean by implicit,
it's not obvious that you're doing it.

163
00:10:36.170 --> 00:10:40.140
So if I said something like,
right now we know a is the number 21.

164
00:10:40.140 --> 00:10:43.870
If I said a is equal to a + an empty

165
00:10:43.870 --> 00:10:48.683
string.
&gt;&gt; Kyle Simpson: Again, without getting

166
00:10:48.683 --> 00:10:53.311
too much into the weeds about how the plus
operator works, in this case, the plus

167
00:10:53.311 --> 00:10:58.640
operator wants to do string concatenation
instead of mathematic addition.

168
00:10:58.640 --> 00:11:02.840
And because one of these things
is not already a string,

169
00:11:02.840 --> 00:11:04.370
it has to make it into a string.

170
00:11:05.570 --> 00:11:09.330
So under the covers it's gonna do that
string a thing that I was showing you.

171
00:11:09.330 --> 00:11:12.140
But it's not obvious to
us that that's happening.

172
00:11:12.140 --> 00:11:16.240
And yet, if we try this program and

173
00:11:16.240 --> 00:11:23.102
do a console.log on that a variable, if we
try this program, we'll notice that we're

174
00:11:23.102 --> 00:11:26.880
gonna get those black characters cuz it's
going to have made it into a string value.

175
00:11:31.410 --> 00:11:34.115
Try that in your own console
to verify whether or

176
00:11:34.115 --> 00:11:36.354
not you have that third line end or not.

177
00:11:36.354 --> 00:11:39.062
You'll notice the difference
between getting black characters in

178
00:11:39.062 --> 00:11:40.804
your console or getting blue characters.

179
00:11:40.804 --> 00:11:44.060
Your question back there?
&gt;&gt; Speaker 3: Would there ever be a time

180
00:11:44.060 --> 00:11:48.800
where you would want something to
not change so it would be a final?

181
00:11:48.800 --> 00:11:53.410
And so even in an instance like
that it would give you an error,

182
00:11:53.410 --> 00:11:57.679
let's say,
instead of converting it behind the scene?

183
00:11:57.679 --> 00:12:00.580
Like you don't want that
to change in your program?

184
00:12:00.580 --> 00:12:01.760
&gt;&gt; Kyle Simpson: There's a question in

185
00:12:01.760 --> 00:12:04.350
the live room here about whether or

186
00:12:04.350 --> 00:12:09.880
not there's a notion of wanting a variable
to have sort of a final value in it.

187
00:12:09.880 --> 00:12:12.350
That is,
if you try to do something else and

188
00:12:12.350 --> 00:12:14.850
assign it a different value,
it would throw you an error.

189
00:12:14.850 --> 00:12:16.780
And there is actually that notion.

190
00:12:16.780 --> 00:12:21.730
As of ES6, the newest, latest, and
greatest JavaScript that's coming out.

191
00:12:21.730 --> 00:12:25.090
There's a notion, instead of using that
var keyword that I've talked about

192
00:12:25.090 --> 00:12:29.530
a couple of times, you can use const
to create what's called a constant.

193
00:12:29.530 --> 00:12:33.070
And other programming languages
also have a notion of a constant.

194
00:12:33.070 --> 00:12:35.629
So that's getting a little
out of our topic, but

195
00:12:35.629 --> 00:12:37.572
just to make sure we're clear on it.

196
00:12:37.572 --> 00:12:42.844
If I said var a = 42, I'm making an a that
can be changed as many times as I want.

197
00:12:42.844 --> 00:12:49.600
But if I said const a = 42, I'm making
an a that can never be changed again.

198
00:12:49.600 --> 00:12:52.870
And if I do a = 10,
it will either silently fail or

199
00:12:52.870 --> 00:12:54.708
actually throw me in error.

200
00:12:54.708 --> 00:12:58.930
And that depends on strict mode,
which we may cover later.

201
00:12:58.930 --> 00:13:02.975
But const is the way you make
a variable that can't be changed later.

202
00:13:02.975 --> 00:13:05.470
And that's only in the newest
versions of JavaScript.

