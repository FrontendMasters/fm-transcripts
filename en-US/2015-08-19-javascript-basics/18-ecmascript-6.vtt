WEBVTT

1
00:00:00.440 --> 00:00:04.430
&gt;&gt; Kyle Simpson: When will it
become standard to use const?

2
00:00:04.430 --> 00:00:08.196
It's already standard in the sense
that ES6 is already been,

3
00:00:08.196 --> 00:00:11.270
officially voted upon and
so const is happening.

4
00:00:11.270 --> 00:00:16.430
I mean there was one last official
vote that it'll in June of this year,

5
00:00:16.430 --> 00:00:18.980
to kinda give it the final
stamp of approval but

6
00:00:18.980 --> 00:00:24.160
it's virtual certainty ES6 will happen
as the standard is already written.

7
00:00:24.160 --> 00:00:27.510
And there are several
browsers that are already, so

8
00:00:27.510 --> 00:00:32.990
the new versions of Chrome Firefox,
IE; they all support it.

9
00:00:32.990 --> 00:00:36.360
If you're having to run code that's
running in older browsers, or

10
00:00:36.360 --> 00:00:41.323
you're trying to use ES6 features that
don't yet exist even in the newest

11
00:00:41.323 --> 00:00:45.530
of browsers, cuz they're still some
unimplemented features as of yet.

12
00:00:45.530 --> 00:00:49.060
If you're trying to do that, the bridge
is to use what's called a transpiler.

13
00:00:49.060 --> 00:00:52.905
It's a special kind of compiler that
takes your existing JavaScript code,

14
00:00:52.905 --> 00:00:56.210
say you write code that
has ES6 features in it.

15
00:00:56.210 --> 00:00:59.930
And it converts that code to something
that will run the same way but

16
00:00:59.930 --> 00:01:01.460
in older browsers.

17
00:01:01.460 --> 00:01:04.170
So, it goes through lots of
different tricks to figure that out.

18
00:01:04.170 --> 00:01:09.925
So, we won't belabor that point, but
I'll just quickly illustrate that,

19
00:01:09.925 --> 00:01:13.022
if we had, there's a tool called babel,

20
00:01:13.022 --> 00:01:17.370
that is probably one of
the more common transpilers.

21
00:01:17.370 --> 00:01:19.310
And if we had some code in babel.

22
00:01:19.310 --> 00:01:21.950
Let me try to zoom in, so
it's a little bit more readable.

23
00:01:21.950 --> 00:01:24.480
If we add some code in Babel that we
were trying to play around with and

24
00:01:24.480 --> 00:01:27.130
see what's the equivalent
if I wrote it in ES6,

25
00:01:27.130 --> 00:01:30.620
what's the equivalent of it in
something that runs in a browser.

26
00:01:30.620 --> 00:01:33.222
So if I say const x = 10.

27
00:01:33.222 --> 00:01:37.270
You'll notice over here that
they're not actually doing const,

28
00:01:37.270 --> 00:01:41.960
the thing that they're transpiling it to
is this other stuff where they're setting

29
00:01:41.960 --> 00:01:46.900
up different checks on it's behavior,
so that it's gonna behave

30
00:01:46.900 --> 00:01:51.410
almost identically to the way const
will work in a normal ES6 engine.

31
00:01:51.410 --> 00:01:55.050
So this is the code that's automatically
produced by this tool, and

32
00:01:55.050 --> 00:01:56.980
that's the code that you
would sort of compile and

33
00:01:56.980 --> 00:02:00.910
ship out to the browser,
while you would maintain your source code,

34
00:02:00.910 --> 00:02:04.920
and your repository or
whatever, would use the const.

35
00:02:04.920 --> 00:02:08.300
So you would author in ES6, and
you would, as a build step,

36
00:02:08.300 --> 00:02:11.510
you would transpile to something lower and
ship that out.

37
00:02:11.510 --> 00:02:15.190
So this is a pretty common practice
among JavaScript developers and

38
00:02:15.190 --> 00:02:18.690
applications, and
it's becoming even more so.

39
00:02:18.690 --> 00:02:23.040
This is kind of the new norm,
is that it's gonna be suggested that you

40
00:02:23.040 --> 00:02:28.090
do always write in the newest version of
JavaScript, and if you have to run your

41
00:02:28.090 --> 00:02:32.360
code in older browsers, which is the
reality for most of us, you just simply

42
00:02:32.360 --> 00:02:36.560
let a build step with this tool take
care of the implementation details.

43
00:02:36.560 --> 00:02:40.700
So we won't go into any more details about
how Babel works or what it does, but

44
00:02:40.700 --> 00:02:44.610
it's a very sophisticated program that's
able to figure all that stuff out for

45
00:02:44.610 --> 00:02:46.850
us, kind of let us not
have to worry about it.

46
00:02:49.300 --> 00:02:51.870
So basically take away here.

47
00:02:51.870 --> 00:02:55.110
You should if you gonna take
seriously writing Java script,

48
00:02:55.110 --> 00:02:59.100
if you gonna work in an environment write
it in an application, if that's your job,

49
00:02:59.100 --> 00:03:03.400
I'd recommend switching to ES6 now
which is gonna take learning ES6 so

50
00:03:03.400 --> 00:03:05.190
there is plenty of work to do there.

51
00:03:05.190 --> 00:03:06.540
But once you have learned it and

52
00:03:06.540 --> 00:03:10.450
implemented it, you just need a build
step with transpiler like Babel or

53
00:03:10.450 --> 00:03:14.660
something like that to take
care of the compilation, okay.

54
00:03:15.710 --> 00:03:17.900
So did I miss any more questions?

55
00:03:19.020 --> 00:03:21.630
Yeah, Babel does have
a lot of great examples.

56
00:03:21.630 --> 00:03:23.960
There's more than just Babel, I'm not
meaning to say that's the only tool.

57
00:03:23.960 --> 00:03:25.930
There's Tracer and a couple of other ones.

58
00:03:25.930 --> 00:03:28.580
But Babel's one of the more
popular ones these days.

59
00:03:28.580 --> 00:03:29.800
So it'd be a good place to start.

60
00:03:30.845 --> 00:03:36.138
Yeah, it was mentioned in the chat,
I just wanna make sure everybody sees,

61
00:03:36.138 --> 00:03:41.845
there are tools, if you're not really
serious about a full build step thing, but

62
00:03:41.845 --> 00:03:47.989
you just wanna play around with how ES6
works, there's tools like es6fiddle.net.

63
00:03:47.989 --> 00:03:52.675
And what this tool does, is,
it does the transpiling,

64
00:03:52.675 --> 00:03:55.900
the compiling behind the scenes.

65
00:03:55.900 --> 00:03:57.130
So it'll just run your code.

66
00:03:57.130 --> 00:04:04.100
So if I said something like const x =
10 and then I said console.log(x) and

67
00:04:04.100 --> 00:04:09.310
then I said x = 20 and console.log(x),

68
00:04:09.310 --> 00:04:12.930
the question is am I gonna get 10 and 20
or what's gonna, and the way it's gonna do

69
00:04:12.930 --> 00:04:17.850
it's gonna transpile that const so
that this state is not allowed.

70
00:04:19.760 --> 00:04:23.330
And you'll notice that we get
an error saying x is read only.

71
00:04:23.330 --> 00:04:27.800
So it's transpilled under the scenes, so
that I wasn't allowed to do line five.

72
00:04:28.980 --> 00:04:32.030
So you can play around with various
different ES6 features here and

73
00:04:32.030 --> 00:04:34.260
they got several built in examples.

74
00:04:34.260 --> 00:04:37.965
So if you wanted to learn what,
somebody asked earlier how do I do default

75
00:04:37.965 --> 00:04:42.630
parameters, well here's the syntax for
default parameters as of ES6.

76
00:04:42.630 --> 00:04:46.210
You just put an equals sign and
the value to assign a default burner.

77
00:04:46.210 --> 00:04:47.620
[COUGH] So

78
00:04:47.620 --> 00:04:51.570
you can play around with those if you're
interested in learning more about ES6.

79
00:04:51.570 --> 00:04:54.200
And as a reminder there is definitely

80
00:04:54.200 --> 00:04:56.700
an ES6 course available
from Frontend Masters.

