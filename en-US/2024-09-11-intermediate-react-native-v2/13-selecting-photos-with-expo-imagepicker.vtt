WEBVTT

1
00:00:00.120 --> 00:00:03.965
&gt;&gt; Kadi Kraman: So next up,
what would be handy is if we could store

2
00:00:03.965 --> 00:00:07.364
the plant's photo along with its details.

3
00:00:07.364 --> 00:00:11.356
So if we scroll down,
this is what we want to achieve.

4
00:00:11.356 --> 00:00:16.092
So we would like to have a plant
image here that we could pick, and

5
00:00:16.092 --> 00:00:21.909
we could save in our local storage or
in our storage in our file system.

6
00:00:21.909 --> 00:00:26.050
Yeah, we would like to have a plant image
here that we could pick that to go with

7
00:00:26.050 --> 00:00:27.134
the plant's name,

8
00:00:27.134 --> 00:00:30.856
so that would be a little bit more
useful than our placeholder image.

9
00:00:30.856 --> 00:00:35.239
So for this, we're going to use
the Expo ImagePicker library,

10
00:00:35.239 --> 00:00:39.783
and this provides access to the system
UIs for selecting images and

11
00:00:39.783 --> 00:00:42.242
videos from the phone's library.

12
00:00:42.242 --> 00:00:45.546
And you can actually also
use it to take photos.

13
00:00:45.546 --> 00:00:48.284
So if you want to update
this to take photos,

14
00:00:48.284 --> 00:00:51.244
there's some additional instructions here,

15
00:00:51.244 --> 00:00:55.618
we're going to just use the picking
an image from the gallery for now.

16
00:00:55.618 --> 00:00:59.409
But one thing to know that
if you are using the camera,

17
00:00:59.409 --> 00:01:02.620
then you need to request
permissions first.

18
00:01:02.620 --> 00:01:07.280
So there is a useCameraPermissions hook,
and

19
00:01:07.280 --> 00:01:12.664
I think this should be
a requestCameraPermissions.

20
00:01:12.664 --> 00:01:17.218
So before you get access to the user's
camera, you need to actually request

21
00:01:17.218 --> 00:01:21.005
access and you get this native
prompt from the user going like.

22
00:01:21.005 --> 00:01:24.233
Asking them whether they consent
to their camera to be used and

23
00:01:24.233 --> 00:01:28.279
then hopefully they say yes and they
grant permission and then you can use it.

24
00:01:28.279 --> 00:01:33.992
So for the ImagePicker, so
selecting images from the phone's library,

25
00:01:33.992 --> 00:01:38.140
you don't actually need
this permission prompt, so

26
00:01:38.140 --> 00:01:41.471
we'll keep it simple and use that for now.

27
00:01:41.471 --> 00:01:47.488
So let's npx expo install
expo imagepicker,

28
00:01:47.488 --> 00:01:54.440
I will npx expo start to
start my bundle again, yeah.

29
00:02:02.003 --> 00:02:06.442
&gt;&gt; Kadi Kraman: Okay, so what I'd like to
do is when the user taps on this Plantly

30
00:02:06.442 --> 00:02:10.720
image, you can make this UX
a little bit better to actually say

31
00:02:10.720 --> 00:02:15.102
a highlight of like student image,
but let's keep this info.

32
00:02:15.102 --> 00:02:18.227
So when a user taps on
this plant in the image,

33
00:02:18.227 --> 00:02:22.518
it will open the image gallery and
they could choose an image.

34
00:02:22.518 --> 00:02:26.225
So let's go to our new screen.

35
00:02:30.833 --> 00:02:34.012
&gt;&gt; Kadi Kraman: And for
this Plantly image, let's wrap this in,

36
00:02:34.012 --> 00:02:36.291
[COUGH] let's make this pressable.

37
00:02:36.291 --> 00:02:40.942
So let's use a touchable
opacity here instead of a view.

38
00:02:44.122 --> 00:02:49.773
&gt;&gt; Kadi Kraman: And
whenever I do use touchable opacity,

39
00:02:49.773 --> 00:02:55.585
I tend to change
the active opacity because

40
00:02:55.585 --> 00:03:00.589
I find this a little bit too intense,

41
00:03:00.589 --> 00:03:05.609
so let's do active opacity 0.8.

42
00:03:05.609 --> 00:03:10.691
I think that tends to look
a little bit nicer, a little bit.

43
00:03:10.691 --> 00:03:12.304
No, I accidentally took a picture.

44
00:03:14.323 --> 00:03:21.033
&gt;&gt; Kadi Kraman: And
let's add a handler function here as well.

45
00:03:21.033 --> 00:03:25.207
Let's do a handleChooseImage,

46
00:03:25.207 --> 00:03:29.682
and this will be an async function.

47
00:03:34.495 --> 00:03:37.722
&gt;&gt; Kadi Kraman: And when we press on here,

48
00:03:37.722 --> 00:03:43.010
let's do onPress, handleChooseImage.

49
00:03:46.300 --> 00:03:48.861
&gt;&gt; Kadi Kraman: So
first thing we'll do is,

50
00:03:48.861 --> 00:03:54.637
we are not going to implement this for
the web for the time being.

51
00:03:54.637 --> 00:04:00.691
So let's just do if platform,
&gt;&gt; Kadi Kraman: OS is

52
00:04:00.691 --> 00:04:06.953
the web,
&gt;&gt; Kadi Kraman: And

53
00:04:06.953 --> 00:04:14.061
we will just return out of it, otherwise,
we want to launch our ImagePicker.

54
00:04:14.061 --> 00:04:19.123
So let's import * as ImagePicker.

55
00:04:21.578 --> 00:04:29.689
&gt;&gt; Kadi Kraman: from expo-image-picker,
&gt;&gt; Kadi Kraman: And

56
00:04:29.689 --> 00:04:35.291
in our handleChooseImage,
we want to launch the image library.

57
00:04:35.291 --> 00:04:42.808
So let's do const result, so the result
will be the data, so the image URI.

58
00:04:44.168 --> 00:04:49.243
&gt;&gt; Kadi Kraman: And we will do await,
so this is an async function,

59
00:04:49.243 --> 00:04:53.610
and we will launch, sorry, ImagePicker,

60
00:04:53.610 --> 00:04:57.637
and we will launch image library async.

61
00:04:59.999 --> 00:05:03.278
&gt;&gt; Kadi Kraman: And
we can also pass in some properties.

62
00:05:03.278 --> 00:05:08.102
So mediaTypes, what are the kinds
of things that people can add here?

63
00:05:08.102 --> 00:05:13.209
So we don't want them to choose a video,
so let's just say

64
00:05:13.209 --> 00:05:18.332
that we want ImagePicker,
mediaTypeOptions, images.

65
00:05:18.332 --> 00:05:20.679
So we have an option for
images, videos or all.

66
00:05:20.679 --> 00:05:26.385
So in this case,
we just want images, launch that, so

67
00:05:26.385 --> 00:05:32.603
allowsEditing, so
this allows the user to crop the image.

68
00:05:32.603 --> 00:05:35.212
So when they open it
from the image library,

69
00:05:35.212 --> 00:05:38.251
they can also crop the image
to the specified size.

70
00:05:38.251 --> 00:05:40.931
So let's enable that, cuz that's fun.

71
00:05:40.931 --> 00:05:45.466
Aspect, so this,
I think it only affects Android, and

72
00:05:45.466 --> 00:05:50.685
you can set the aspect ratio for
the image that you're picking.

73
00:05:50.685 --> 00:05:57.071
So let's do just 1, so
it's a square image, and quality.

74
00:05:57.071 --> 00:06:00.067
So I think this is probably from 0 to 1.

75
00:06:00.067 --> 00:06:06.010
Yeah, so we want maximum quality,
so let's go for 1.

76
00:06:06.010 --> 00:06:11.783
So let's just console.log the result and
see what we get.

77
00:06:16.823 --> 00:06:18.979
&gt;&gt; Kadi Kraman: So here,
I'm on a simulator, so

78
00:06:18.979 --> 00:06:24.533
I have these beautiful pre-filled images,
and I'll choose this, and there we go.

79
00:06:24.533 --> 00:06:30.327
So I have, this result has an asset array.

80
00:06:30.327 --> 00:06:35.417
Actually, everyone has their
preferred console logging method.

81
00:06:35.417 --> 00:06:39.890
If I do a JSON, let's do JSON,

82
00:06:39.890 --> 00:06:45.747
stringify, and pass this result null.

83
00:06:45.747 --> 00:06:50.801
Has anyone ever used this function here
to do anything other than passing null?

84
00:06:50.801 --> 00:06:53.020
I have not.

85
00:06:53.020 --> 00:06:57.249
So let's render this a little bit better.

86
00:07:00.935 --> 00:07:04.382
&gt;&gt; Kadi Kraman: Let's use this image,
there we go.

87
00:07:04.382 --> 00:07:10.207
So we get an object that has a key for
assets,

88
00:07:10.207 --> 00:07:15.254
and then assets is an array of images.

89
00:07:15.254 --> 00:07:21.394
So this object has a URI,
which is the location

90
00:07:21.394 --> 00:07:26.440
of the file in my kind of cache folder.

91
00:07:26.440 --> 00:07:30.668
So this is important as well, so this
file that we're picking, so this isn't

92
00:07:30.668 --> 00:07:35.106
permanent, this is just a cached file, but
we can use it while the app is running.

93
00:07:35.106 --> 00:07:41.463
Let's add a useState here for
the image URI,

94
00:07:41.463 --> 00:07:46.147
so imageUri, setImageUri, and

95
00:07:46.147 --> 00:07:50.663
this will be a useState string,

96
00:07:50.663 --> 00:07:54.189
and it can be undefined.

97
00:07:54.189 --> 00:07:58.040
It starts off being undefined.

98
00:07:58.040 --> 00:08:03.229
And let's do if result is not canceled,

99
00:08:03.229 --> 00:08:10.096
if it's not canceled,
then let's do setImageUri,

100
00:08:10.096 --> 00:08:15.132
and this will be results.assets, and

101
00:08:15.132 --> 00:08:20.941
we'll just take the first asset and
its uri.

102
00:08:24.575 --> 00:08:29.437
&gt;&gt; Kadi Kraman: And now we want to
update our Plantly image to be able

103
00:08:29.437 --> 00:08:32.727
to render an image by URI instead.

104
00:08:32.727 --> 00:08:37.777
So this component,
let's parse an image URI.

105
00:08:37.777 --> 00:08:41.874
And go into the PlantlyImage component,

106
00:08:41.874 --> 00:08:47.257
update the prop, so
we can have an optional image URI,

107
00:08:47.257 --> 00:08:51.483
which is the string, and destructure it.

108
00:08:51.483 --> 00:08:56.333
And so in the source, we can do,

109
00:08:56.333 --> 00:09:00.825
if the image URI is provided,

110
00:09:00.825 --> 00:09:08.927
then it will be an object
with URI being the image URI.

111
00:09:08.927 --> 00:09:14.464
And then otherwise,
we render our Plantly placeholder.

112
00:09:18.558 --> 00:09:20.724
&gt;&gt; Kadi Kraman: So let's try that.

113
00:09:23.872 --> 00:09:25.577
&gt;&gt; Kadi Kraman: There we go,
that's updated.

114
00:09:25.577 --> 00:09:31.833
I think this looks a little bit big now,
my plant image had a lot of opacity,

115
00:09:31.833 --> 00:09:35.722
so let's add some styles
to add some padding.

116
00:09:35.722 --> 00:09:39.294
So maybe on the image,

117
00:09:39.294 --> 00:09:43.812
let's add a borderRadius.

118
00:09:45.877 --> 00:09:48.442
&gt;&gt; Kadi Kraman: 6, okay?

119
00:09:48.442 --> 00:09:51.130
And I can't actually add, or rather,

120
00:09:51.130 --> 00:09:56.017
I don't actually want to add any
bottom padding on this image component

121
00:09:56.017 --> 00:10:00.508
because it would then also affect
other places where it's used.

122
00:10:00.508 --> 00:10:05.176
So I think I'll add some padding
here in the PlantlyImage instead.

123
00:10:08.951 --> 00:10:14.662
&gt;&gt; Kadi Kraman: So this touchable opacity,
I mean, this style is called centered,

124
00:10:14.662 --> 00:10:21.559
but I'm just gonna go with it and add
a little margin bottom of, let's say, 24.

125
00:10:23.455 --> 00:10:26.957
&gt;&gt; Kadi Kraman: There you go,
just go around some space between them.

