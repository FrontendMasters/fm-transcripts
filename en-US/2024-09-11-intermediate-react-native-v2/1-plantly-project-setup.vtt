WEBVTT

1
00:00:00.000 --> 00:00:01.099
&gt;&gt; Kadi Kraman: In this course,

2
00:00:01.099 --> 00:00:04.790
we will be building our native
app on the local machine.

3
00:00:04.790 --> 00:00:09.721
So for this, you need to set up your
local native build environment.

4
00:00:09.721 --> 00:00:15.414
So you need specific special tools
to build the native app locally.

5
00:00:15.414 --> 00:00:18.218
For iOS, you need X code.

6
00:00:18.218 --> 00:00:21.484
X code is an app that's
available on the Mac App Store.

7
00:00:24.930 --> 00:00:28.684
&gt;&gt; Kadi Kraman: And if you don't have this
downloaded and you want to build your iOS

8
00:00:28.684 --> 00:00:33.377
app, this is only available on macOS, then
I recommend you start your download now

9
00:00:33.377 --> 00:00:37.562
because as you can see, it is a 3.5
gigabyte download, which is wild.

10
00:00:37.562 --> 00:00:41.684
And after you've downloaded it,
I would also open X code,

11
00:00:41.684 --> 00:00:44.742
just using command space and
type in X code.

12
00:00:44.742 --> 00:00:48.899
And the first time you open it,
it should also prompt you to install your

13
00:00:48.899 --> 00:00:52.039
simulators, which is another
couple of gigabytes.

14
00:00:52.039 --> 00:00:55.802
In order to build Android apps,
you need Android Studio.

15
00:00:55.802 --> 00:00:59.447
So this is available for
Mac windows, and Linux, and

16
00:00:59.447 --> 00:01:03.506
it is a smaller download, but
still worth starting early.

17
00:01:03.506 --> 00:01:07.566
The best instructions for how to set
up your Native Build environment are on

18
00:01:07.566 --> 00:01:09.957
the official React Native documentation.

19
00:01:09.957 --> 00:01:14.333
So if you go to reactnative.dev and
set up your environment,

20
00:01:14.333 --> 00:01:20.140
it has instructions on how to set up based
on your development operating system and

21
00:01:20.140 --> 00:01:22.603
T target of what you want to build.

22
00:01:22.603 --> 00:01:25.770
In this case, you will probably
have a node installed already but

23
00:01:25.770 --> 00:01:29.514
it will tell you all the other things you
need to install so in case of Android,

24
00:01:29.514 --> 00:01:30.800
you need to install Java.

25
00:01:30.800 --> 00:01:37.821
You need to set your environment variables
for Java, home is the lander studio, etc.

26
00:01:37.821 --> 00:01:41.788
So, I'm hoping to do a step by step
instruction on how to set up your build

27
00:01:41.788 --> 00:01:45.824
environment because it will differ
based on whether you're on Windows or

28
00:01:45.824 --> 00:01:46.750
Linux or Mac OS.

29
00:01:46.750 --> 00:01:50.373
And whether you're doing iOS and Android
and it will just take a really long time.

30
00:01:50.373 --> 00:01:54.502
So I recommend you download X code and
or Android Studio and

31
00:01:54.502 --> 00:02:00.073
then follow these instructions on
the official React Native documentation.

32
00:02:00.073 --> 00:02:03.610
We are in fact going to start
this workshop with Expo Go, so

33
00:02:03.610 --> 00:02:07.959
if you look at our topics, we're
going to do a development build here.

34
00:02:07.959 --> 00:02:12.299
So at this point, hopefully you have
your development environment set up.

35
00:02:12.299 --> 00:02:15.188
Let's start by creating
a brand new project.

36
00:02:15.188 --> 00:02:19.480
You will need to have node installed for
this so if you do node-V,

37
00:02:19.480 --> 00:02:24.477
then we're looking for a long-term
support version, so in case of nodes,

38
00:02:24.477 --> 00:02:28.168
the even-numbered versions
are long-term support.

39
00:02:28.168 --> 00:02:34.755
So 18 is getting a bit old now,
but 20, 22 in the future, 24, etc.

40
00:02:34.755 --> 00:02:38.038
I'm going to be using node 20.

41
00:02:38.038 --> 00:02:43.253
And secondly, regarding package managers,
all modern package managers are supported,

42
00:02:43.253 --> 00:02:47.400
so you can use npm, yarn-classic,
yarn-modern, pmpm, bun, etc.

43
00:02:47.400 --> 00:02:51.689
I'm going to be using yarn-classic,
but you can use any of these.

44
00:02:51.689 --> 00:02:56.996
But you can check the documentation if
you're using especially yarn-modern or

45
00:02:56.996 --> 00:03:01.456
pmpm or bun to see if there's any
caveats around the installation.

46
00:03:01.456 --> 00:03:05.984
So Yarn Classic is a little bit old now,
it's still popular among

47
00:03:05.984 --> 00:03:10.679
React Native developers and
that's actually because this plug and

48
00:03:10.679 --> 00:03:15.149
play model that Yarn 2 and
PMPM use was actually incompatible.

49
00:03:15.149 --> 00:03:20.359
Well it is incompatible with how
React Native native modules are required.

50
00:03:20.359 --> 00:03:22.474
So in our iOS and android directories,

51
00:03:22.474 --> 00:03:25.806
we tend to import specific files,
from our node modules, but

52
00:03:25.806 --> 00:03:29.861
the PMPM node linking model actually
gets rid of our node modules builder.

53
00:03:29.861 --> 00:03:32.276
So this will break there
is a workaround now.

54
00:03:32.276 --> 00:03:36.896
So if you have this config file by setting
the node link at the node modules, and

55
00:03:36.896 --> 00:03:41.656
it's the same for PMPM, using node linker
hoisted, then you can still use these

56
00:03:41.656 --> 00:03:46.513
package managers, but just FYI,
that's why I'm using Yarn 1, Yarn Classic.

57
00:03:46.513 --> 00:03:52.495
So the command to create a new
X-Wire app is npx create X-Wire app.

58
00:03:54.844 --> 00:03:59.258
&gt;&gt; Kadi Kraman: And to do-- help, it
will print out the usage information for

59
00:03:59.258 --> 00:04:00.354
this command.

60
00:04:00.354 --> 00:04:03.453
And mpx is a node package executor.

61
00:04:03.453 --> 00:04:06.677
You get mpx when you install nodes,
so it's part of node, and

62
00:04:06.677 --> 00:04:10.955
it lets you execute node packages without
installing them on your local machine.

63
00:04:10.955 --> 00:04:14.622
So here, by default,
if you just create X web,

64
00:04:14.622 --> 00:04:20.237
it will use a default template,
which has a bunch of code already set up.

65
00:04:20.237 --> 00:04:24.526
So it will have navigation set up,
it will have dark and light mode,

66
00:04:24.526 --> 00:04:26.423
it has a bunch of components.

67
00:04:26.423 --> 00:04:28.534
And it's just meant to
give you a head start so

68
00:04:28.534 --> 00:04:31.939
you have some code to start with and
you get an idea of where you can build.

69
00:04:31.939 --> 00:04:35.432
You could reset this template,
but in this case,

70
00:04:35.432 --> 00:04:39.182
let's just start with
a blank typescript template.

71
00:04:39.182 --> 00:04:43.288
And the other thing here It gives you
commands here on how to create this

72
00:04:43.288 --> 00:04:48.024
project on various package managers and
in our doc site are provided commands for

73
00:04:48.024 --> 00:04:49.224
Yarn, npm, pmpm.

74
00:04:49.224 --> 00:04:55.622
And bun to create an app called plantly
and trigger the default template.

75
00:04:55.622 --> 00:05:00.549
So I'm going to be using yarn and
this should trigger this choose

76
00:05:00.549 --> 00:05:06.130
a template prompt and I'm going to
choose a blank TypeScript template.

77
00:05:06.130 --> 00:05:10.131
Now you might be wondering whether you
have to use TypeScript and honestly,

78
00:05:10.131 --> 00:05:12.081
I'd very, very much recommend it.

79
00:05:12.081 --> 00:05:15.165
Most modern software projects
these days use TypeScript and

80
00:05:15.165 --> 00:05:18.739
it's very much become an industry
standard for JavaScript project.

81
00:05:18.739 --> 00:05:23.113
So it is good for your career usually it's
a learn TypeScript if you haven't yet.

82
00:05:23.113 --> 00:05:24.617
But if you really don't want to,

83
00:05:24.617 --> 00:05:27.046
you can choose a blank
TypeScript template instead.

84
00:05:27.046 --> 00:05:30.875
I'll be using TypeScript throughout
this course, but because TypeScript

85
00:05:30.875 --> 00:05:34.962
is additive, you could remove the typing
information and write in JavaScript.

86
00:05:34.962 --> 00:05:40.385
Now, this is some quick setup that I
always do whenever I start a new project,

87
00:05:40.385 --> 00:05:42.147
which is set up linting.

88
00:05:42.147 --> 00:05:44.334
So ESLint and Prettier go hand-in-hand.

89
00:05:44.334 --> 00:05:48.995
ESLint is a code linter and
Prettier is a code formatter.

90
00:05:48.995 --> 00:05:52.654
So ESLint tells you if you're
doing something incorrect and

91
00:05:52.654 --> 00:05:57.173
Prettier just formats your code so
you can focus on writing your code rather

92
00:05:57.173 --> 00:06:00.203
than worrying about where
your braces should go.

93
00:06:00.203 --> 00:06:06.891
From sdk50, there is a CLI command
that sets up ESLint for you.

94
00:06:06.891 --> 00:06:12.931
So if we cd into our newly created

95
00:06:12.931 --> 00:06:18.534
directory and npx expo lint.

96
00:06:18.534 --> 00:06:20.812
And because I don't have ESLint set up,

97
00:06:20.812 --> 00:06:24.977
It will prompt me if I want to install
ESL and configure it on this project.

98
00:06:24.977 --> 00:06:26.162
Let's choose yes.

99
00:06:40.266 --> 00:06:43.247
&gt;&gt; Kadi Kraman: Now when
I open this project,

100
00:06:43.247 --> 00:06:48.145
you see that it's created
this ESLint RC for us.

101
00:06:48.145 --> 00:06:54.132
I also want to set up prettier and for
this we need to install some libraries.

102
00:06:54.132 --> 00:06:59.256
So if you're using yarn, you want to use
this otherwise use NPX, explore, install.

103
00:07:02.898 --> 00:07:05.879
&gt;&gt; Kadi Kraman: And
we want to update our ESLint RC

104
00:07:05.879 --> 00:07:10.148
to include the Prettier plugin and
some rules.

105
00:07:17.994 --> 00:07:20.944
&gt;&gt; Kadi Kraman: Lovely and
the good thing about Prettier is that you

106
00:07:20.944 --> 00:07:24.106
get that all the pretty
arrows are all fixable, yeah.

107
00:07:24.106 --> 00:07:29.461
So now that I've added this, I'm expecting
to see some prettier errors here.

108
00:07:29.461 --> 00:07:32.907
And that's because Prettier
defaults to double quotes.

109
00:07:32.907 --> 00:07:36.522
The good thing is that we can run MPX.

110
00:07:39.076 --> 00:07:43.155
&gt;&gt; Kadi Kraman: We can run your
lint command with-- fix and

111
00:07:43.155 --> 00:07:46.691
it will automatically update these.

112
00:07:46.691 --> 00:07:49.412
So you'll then command was added
automatically to your scripts.

113
00:07:49.412 --> 00:07:55.694
So it would just be ESLint so it will
be mpm run lint or yarn lint or etc.

114
00:07:55.694 --> 00:07:58.096
To now run your project you
want to start the bundler.

115
00:07:58.096 --> 00:08:03.306
So as I mentioned earlier, we're going to
be using the Expo Go Standbox initially.

116
00:08:03.306 --> 00:08:08.830
So we want to run the start command
to start the metro bundler on here.

117
00:08:08.830 --> 00:08:15.580
So let's do yarn start or
you can do mpx expo start.

118
00:08:18.897 --> 00:08:22.982
&gt;&gt; Kadi Kraman: This will print out a QR
code that you can scan in with Expo Go.

119
00:08:22.982 --> 00:08:24.944
I'm gonna plug in my phone to show you.

120
00:08:24.944 --> 00:08:32.347
Okay, I'm gonna uninstall Expo go so
we're starting from scratch just in case.

121
00:08:32.347 --> 00:08:36.889
So on iOS you will go to the App Store,
search for Expo Go.

122
00:08:40.722 --> 00:08:42.937
&gt;&gt; Kadi Kraman: You want
to install the app.

123
00:08:45.666 --> 00:08:46.533
&gt;&gt; Kadi Kraman: And we'll open it.

124
00:08:48.875 --> 00:08:52.289
&gt;&gt; Kadi Kraman: So on iOS, you can
scan their QR code in app and actually

125
00:08:52.289 --> 00:08:57.278
originally Expo Go had this functionality,
but Apple wasn't happy about it.

126
00:08:57.278 --> 00:09:02.443
So now the way that you
open your app in Expo Go on

127
00:09:02.443 --> 00:09:07.753
iOS is you open your camera app and
then scan it.

128
00:09:07.753 --> 00:09:11.476
And then this will deep link into Expo Go.

129
00:09:11.476 --> 00:09:15.808
Now, if you've just installed it,
this won't work the first time, so

130
00:09:15.808 --> 00:09:18.578
I found that I need to
start quizzing the app and

131
00:09:18.578 --> 00:09:22.999
then you will prompt me if I want to
connect to devices on my local network.

132
00:09:22.999 --> 00:09:30.360
So I'll do allow and just do camera again.

133
00:09:35.857 --> 00:09:36.461
&gt;&gt; Kadi Kraman: Okay, so

134
00:09:36.461 --> 00:09:40.315
now this is my app from my local
dev server running on Expo Go.

135
00:09:40.315 --> 00:09:43.855
You need to make sure that your phone is
connected to the same Wi-Fi network as

136
00:09:43.855 --> 00:09:47.340
your computer and that's because this
bundling process is running on local

137
00:09:47.340 --> 00:09:49.257
host so
you need to be on the same network.

138
00:09:49.257 --> 00:09:52.127
If for some reason that isn't possible or

139
00:09:52.127 --> 00:09:56.975
it isn't working then you can actually
get around it by using tunnel.

140
00:09:56.975 --> 00:10:00.443
You can do mpx expo start --tunnel.

141
00:10:00.443 --> 00:10:04.890
The first time you run this, it will
prompt you to install an Ngrok package.

142
00:10:04.890 --> 00:10:11.874
But then what this does is that it exposes
this JavaScript bundle to a web API.

143
00:10:11.874 --> 00:10:15.998
So you could scan it and
run it without being on the same network.

144
00:10:15.998 --> 00:10:20.573
And this is actually a really cool because
it allows you, you could conceivably,

145
00:10:20.573 --> 00:10:25.082
if you're working with someone, let's
say in Australia and you're in the US,

146
00:10:25.082 --> 00:10:26.961
you could run a local dev server.

147
00:10:26.961 --> 00:10:31.406
You can give them the link and
they could run it on their phone,

148
00:10:31.406 --> 00:10:33.041
which is pretty cool.

149
00:10:33.041 --> 00:10:35.652
Let me just show you
this on Android as well.

150
00:10:43.677 --> 00:10:47.560
&gt;&gt; Kadi Kraman: There you go on my
android phone, let me just delete.

151
00:10:50.983 --> 00:10:54.336
&gt;&gt; Kadi Kraman: I still X forego, so
we're starting from the same point.

152
00:10:54.336 --> 00:10:57.397
So we're gonna go to the playstore.

153
00:10:58.432 --> 00:11:01.993
&gt;&gt; Kadi Kraman: And search for
Expo Go and install it.

154
00:11:10.152 --> 00:11:12.197
&gt;&gt; Kadi Kraman: And we open it.

155
00:11:12.197 --> 00:11:16.248
And you notice that on your Android phone,
you do have an option to scan

156
00:11:16.248 --> 00:11:20.999
the QR code in app because Android doesn't
have the same restriction than as iOS.

157
00:11:20.999 --> 00:11:25.815
So we'll go scan the QR code,
allow the permissions, and

158
00:11:25.815 --> 00:11:31.930
then we can scan this, and it will open
our local app on our Android phone.

159
00:11:35.403 --> 00:11:37.005
&gt;&gt; Kadi Kraman: Again If
this isn't working,

160
00:11:37.005 --> 00:11:40.146
make sure that you're on the same
network as your computer,

161
00:11:40.146 --> 00:11:43.553
and if it still isn't working,
then try the -- tunnel option.

162
00:11:43.553 --> 00:11:48.210
So it is actually quite especially common
on windows, we've found, because windows

163
00:11:48.210 --> 00:11:52.320
has a firewall, so the dev server
doesn't always get around the firewall.

164
00:11:52.320 --> 00:11:55.278
So you can change the firewall
to allow that port, but

165
00:11:55.278 --> 00:11:57.862
as a quick workaround
you can use -- tunnel.

166
00:11:57.862 --> 00:11:59.088
You can not use it,

167
00:11:59.088 --> 00:12:03.865
that will be preferred though because
it will be a bit faster on Logo host.

168
00:12:03.865 --> 00:12:10.297
And lastly, I'm going to be, it will be
handy for me to run this on a simulator.

169
00:12:10.297 --> 00:12:13.790
So I'm actually going to run this
locally instead of on a phone,

170
00:12:13.790 --> 00:12:15.806
so it'll be easier to screen share.

171
00:12:27.338 --> 00:12:27.925
&gt;&gt; Kadi Kraman: There we go.

172
00:12:31.108 --> 00:12:32.296
&gt;&gt; Kadi Kraman: So
this was our starting point.

