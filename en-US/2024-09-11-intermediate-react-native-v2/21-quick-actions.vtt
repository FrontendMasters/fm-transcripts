WEBVTT

1
00:00:00.160 --> 00:00:01.888
&gt;&gt; Kadi Kraman: For
the last bit of coding work,

2
00:00:01.888 --> 00:00:06.710
let's do something that very much wouldn't
be possible without development builds.

3
00:00:06.710 --> 00:00:10.680
We're going to add a quick
action to our app.

4
00:00:10.680 --> 00:00:15.369
So a quick action is basically a little
dev menu that opens when you press and

5
00:00:15.369 --> 00:00:17.430
hold your app icon.

6
00:00:17.430 --> 00:00:23.070
We scroll down to the quick action's demo
here, you'll see what it looks like.

7
00:00:23.070 --> 00:00:26.151
So, we're going to add
a little option here,

8
00:00:26.151 --> 00:00:30.470
where you can add a plant
directly from your home screen.

9
00:00:30.470 --> 00:00:34.837
So when you open this, it will open
the new plant module directly, and

10
00:00:34.837 --> 00:00:36.698
you can start filling it out.

11
00:00:40.113 --> 00:00:45.177
&gt;&gt; Kadi Kraman: For this,
let's install expo-quick actions

12
00:00:45.177 --> 00:00:50.249
with MPX expo-install expo-quick actions.

13
00:00:52.637 --> 00:00:57.204
&gt;&gt; Kadi Kraman: And for this,
we'll need to use the config plugin.

14
00:00:57.204 --> 00:01:01.906
So, recall that config plugin
is used to add things to

15
00:01:01.906 --> 00:01:05.601
your native project during pre-build.

16
00:01:05.601 --> 00:01:09.587
In this case,
we actually need the config plugin for

17
00:01:09.587 --> 00:01:13.101
this little leaf icon on Android.

18
00:01:13.101 --> 00:01:21.096
So, on iOS,
this leaf icon is an icon from SF Symbols.

19
00:01:21.096 --> 00:01:25.608
So the quick action items on
iOS use SF Symbol icons, and

20
00:01:25.608 --> 00:01:31.384
you can use any of the symbols that
are available here and a leaf exists.

21
00:01:33.932 --> 00:01:35.691
&gt;&gt; Kadi Kraman: For Android, however,

22
00:01:35.691 --> 00:01:39.725
we need to pass in an image
that gets bundled with the app.

23
00:01:46.959 --> 00:01:52.391
&gt;&gt; Kadi Kraman: So here is a leaf that I
made earlier, let's download the leaf.

24
00:01:58.547 --> 00:02:05.774
&gt;&gt; Kadi Kraman: And let's move it into our
assets folder, so it's in my downloads,

25
00:02:05.774 --> 00:02:11.765
move it into my assets folder,
and then in my app.json.

26
00:02:11.765 --> 00:02:16.950
So you should already have x-ray quick
actions here, so this would have been

27
00:02:16.950 --> 00:02:22.230
added automatically when we runthe
expogo still works with quick-actions.

28
00:02:22.230 --> 00:02:25.459
But we want to pass in some
additional parameters, so

29
00:02:25.459 --> 00:02:27.624
let's convert this into an array.

30
00:02:28.634 --> 00:02:34.299
The first item will be expo-quick-actions,

31
00:02:34.299 --> 00:02:39.255
and then the second will be an object, and

32
00:02:39.255 --> 00:02:42.369
it will be Android icons,

33
00:02:42.369 --> 00:02:47.104
you can pass in, you can do multiple.

34
00:02:47.104 --> 00:02:50.712
I will just do the one, and
we're going to name this leaf.

35
00:02:50.712 --> 00:02:57.941
So this name is what you're going
to be using to query it by.

36
00:02:57.941 --> 00:03:02.995
And we'll pass in a foreground image,

37
00:03:02.995 --> 00:03:07.284
and this foreground image will be

38
00:03:07.284 --> 00:03:12.184
the link to our leaf icon, so assets,

39
00:03:12.184 --> 00:03:17.391
leaf.png, and the background color,

40
00:03:17.391 --> 00:03:21.086
let's leave it at as white.

41
00:03:24.952 --> 00:03:26.073
&gt;&gt; Kadi Kraman: Lovely.

42
00:03:31.706 --> 00:03:36.854
&gt;&gt; Kadi Kraman: So now, we will need
to pre-build our projects again.

43
00:03:36.854 --> 00:03:43.069
So, every time you add a library or
edit anything in your app.json,

44
00:03:43.069 --> 00:03:48.106
you'll need to run pre-build
again to regenerate your

45
00:03:48.106 --> 00:03:53.408
native projects, and
then run iOS or run Android.

46
00:03:53.408 --> 00:04:00.644
So it is the script here
to rebuild the native apps.

47
00:04:03.548 --> 00:04:09.605
&gt;&gt; Kadi Kraman: So
let's do mpx expo prebuild clean.

48
00:04:09.605 --> 00:04:12.672
I will prebuild both at the same time.

49
00:04:12.672 --> 00:04:15.387
&gt;&gt; Speaker 2: We didn't have to do that
with expo go because that was already

50
00:04:15.387 --> 00:04:18.791
pre-built you were just using
the JavaScript bundle, that's the reason-

51
00:04:18.791 --> 00:04:19.359
&gt;&gt; Kadi Kraman: Exactly, so

52
00:04:19.359 --> 00:04:22.417
expo go has a bunch of libraries
already pre-installed ready to use.

53
00:04:22.417 --> 00:04:25.209
And that's why, for example here,

54
00:04:25.209 --> 00:04:28.992
if we started with a blank
typescript template and

55
00:04:28.992 --> 00:04:35.057
we converted it into a development
build and then loaded it on our app.

56
00:04:35.057 --> 00:04:39.760
And then, we installed expo router,
we would need to do a prebuilt.

57
00:04:41.007 --> 00:04:45.028
&gt;&gt; Kadi Kraman: So,
we didn't go because it was pre-installed.

58
00:04:45.028 --> 00:04:49.302
And that's actually also the reason
that when you're starting a new project,

59
00:04:49.302 --> 00:04:52.296
it makes sense for the first,
just a little bit of time,

60
00:04:52.296 --> 00:04:56.632
maybe a couple of hours or maybe a couple
of days when you're just getting started

61
00:04:56.632 --> 00:04:59.481
like installing a bunch of libraries.

62
00:04:59.481 --> 00:05:04.011
It is quite quick to do it in Expo Go for
that reason.

63
00:05:04.011 --> 00:05:07.956
And then, you read something like,
I need to use, I don't know,

64
00:05:07.956 --> 00:05:10.493
Expo Quick Actions, or Vision Camera, or

65
00:05:10.493 --> 00:05:15.471
Custom Fonts, or I want to actually see
an app icon instead of the Expo Go icon.

66
00:05:15.471 --> 00:05:17.201
And then you'll do a development build.

67
00:05:17.201 --> 00:05:20.268
But then,
by that point your project is mature and

68
00:05:20.268 --> 00:05:23.707
you're not rebuilding it natively so
often.

69
00:05:23.707 --> 00:05:26.197
So, once it's a mature project, you
will do it maybe a couple times a week.

70
00:05:31.500 --> 00:05:36.614
&gt;&gt; Kadi Kraman: And now,
we want to run Android and or run iOS.

71
00:05:36.614 --> 00:05:43.296
So mpx-expo, run android, and

72
00:05:43.296 --> 00:05:49.029
I will do iOS on another tab.

73
00:05:51.754 --> 00:05:55.775
&gt;&gt; Kadi Kraman: Okay, now we have both
our iOS and Android project rebuilt.

74
00:05:55.775 --> 00:06:00.639
Great, okay, so
now when we press and hold,

75
00:06:00.639 --> 00:06:05.445
this is what we're starting with.

76
00:06:05.445 --> 00:06:08.015
We just have our default options here.

77
00:06:09.305 --> 00:06:15.005
The way we add them is using
a use effect in a layout file.

78
00:06:16.045 --> 00:06:20.646
So let's go to our root layout file,
so app layout.

79
00:06:21.836 --> 00:06:24.370
And here, we want to add a use effect.

80
00:06:29.252 --> 00:06:34.170
&gt;&gt; Kadi Kraman: And we only want to run
this once when the app first loads.

81
00:06:34.170 --> 00:06:38.417
And let's import

82
00:06:38.417 --> 00:06:43.512
star as Quick Actions

83
00:06:43.512 --> 00:06:47.759
from expo-quick

84
00:06:47.759 --> 00:06:56.322
actions,
&gt;&gt; Kadi Kraman: And

85
00:06:56.322 --> 00:06:59.207
we'll do quick actions set tems, and

86
00:06:59.207 --> 00:07:05.172
this will take an array of the items you
want to add, so you can have multiples.

87
00:07:05.172 --> 00:07:09.733
I think there's recommendations to
not add more than three or four, so

88
00:07:09.733 --> 00:07:13.087
don't go crazy, but one or
two is definitely fine.

89
00:07:13.087 --> 00:07:18.656
So, this will actually
be an array of items,

90
00:07:18.656 --> 00:07:23.786
so we will add the title, add a plant, and

91
00:07:23.786 --> 00:07:32.157
the icon, so this is why we did our
whole adding of the Android icon.

92
00:07:32.157 --> 00:07:38.141
So we'll do, if platform.OS,
if we are on iOS,

93
00:07:38.141 --> 00:07:45.549
then we're going to use symbols
this is just special syntax,

94
00:07:45.549 --> 00:07:50.682
it's got autocomplete that's amazing.

95
00:07:50.682 --> 00:07:54.743
I was not expecting this,
so symbol leaf, well,

96
00:07:54.743 --> 00:07:59.013
it actually works as well,
this is amazing I guess.

97
00:07:59.013 --> 00:08:02.972
So this is one of the SF Symbols for iOS.

98
00:08:04.372 --> 00:08:07.332
And on Android, we are using leaf.

99
00:08:08.482 --> 00:08:16.104
And this leaf comes from our
config plugin, which is here.

100
00:08:16.104 --> 00:08:21.342
So this is what we named our special icon
that we passed in with the config plugin.

101
00:08:21.342 --> 00:08:22.543
So that's why we're using leaf.

102
00:08:24.982 --> 00:08:27.951
&gt;&gt; Kadi Kraman: Let's give it just an ID.

103
00:08:30.729 --> 00:08:31.690
&gt;&gt; Kadi Kraman: There we go.

104
00:08:31.690 --> 00:08:34.795
So, it does mean that the user
needs to open the app for

105
00:08:34.795 --> 00:08:37.330
the quick action to be configured.

106
00:08:37.330 --> 00:08:39.593
And that is to be expected,
that is totally fine.

107
00:08:39.593 --> 00:08:42.832
So, let's reload.

108
00:08:47.347 --> 00:08:50.658
&gt;&gt; Kadi Kraman: So
not sure if I ever mentioned it, but

109
00:08:50.658 --> 00:08:56.466
if I'm working on simulators,
then you use Ctrl command Z on iOS.

110
00:08:56.466 --> 00:09:01.525
And I think that's the shake gesture,
it will bring up the dev menu.

111
00:09:01.525 --> 00:09:03.509
So I think command R.

112
00:09:03.509 --> 00:09:08.756
No, command R records,
everyone's done that before,

113
00:09:08.756 --> 00:09:13.892
so I always use Ctrl Command Z,
it's just a reflex, but

114
00:09:13.892 --> 00:09:20.257
on Android emulator is actually
different it is Command M to reload.

115
00:09:20.257 --> 00:09:22.732
So that's a fun fact.

116
00:09:22.732 --> 00:09:26.256
Actually I have another fact about
these because I have both of these open

117
00:09:26.256 --> 00:09:27.572
right now.

118
00:09:27.572 --> 00:09:31.232
Who knows what's the difference
between a simulator and an emulator?

119
00:09:31.232 --> 00:09:36.102
So for our purposes, the thing that's
important is that an emulator emulates

120
00:09:36.102 --> 00:09:38.726
the whole hardware environment as well.

121
00:09:38.726 --> 00:09:43.590
Well including the restrictions so
an Android emulator will have as

122
00:09:43.590 --> 00:09:48.540
much memory as the actual Android
phone whereas an iOS simulator only

123
00:09:48.540 --> 00:09:53.748
simulates the iOS environment and
in our case the reason it's important

124
00:09:53.748 --> 00:09:58.354
is that actually it has access to
the underlying device memory so

125
00:09:58.354 --> 00:10:03.557
if you're ever debugging a memory
issue on iOS, then it is preferable to

126
00:10:03.557 --> 00:10:08.760
do it on an actual device because
the simulator will be more powerful than

127
00:10:08.760 --> 00:10:13.771
a real device of the same kind,
because it's using your max memory.

128
00:10:13.771 --> 00:10:16.792
So fun fact.

129
00:10:16.792 --> 00:10:21.976
Okay, so now we're instead of my
quick action, so if I press and

130
00:10:21.976 --> 00:10:27.847
hold, I'm actually seeing this add
a plant option, which is awesome.

131
00:10:28.897 --> 00:10:32.724
And then I open this and
it opens my app and

132
00:10:32.724 --> 00:10:36.897
not my add plant model, which is annoying.

133
00:10:38.157 --> 00:10:40.128
So So
how can I get it to open the new modal?

134
00:10:46.987 --> 00:10:50.706
&gt;&gt; Kadi Kraman: When we set the params,
set the items for the quick action.

135
00:10:50.706 --> 00:10:53.846
We can also give it additional params.

136
00:10:53.846 --> 00:10:57.643
So let's add a params
which is an object and

137
00:10:57.643 --> 00:11:01.558
let's give it an href
to where we want to go.

138
00:11:01.558 --> 00:11:08.178
In our case,
let's go to the new tab or new modal.

139
00:11:13.118 --> 00:11:18.132
And if you're not using expo router,
you can use hooks

140
00:11:18.132 --> 00:11:25.123
to manually hook into the event of
coming to the app from a quick action.

141
00:11:25.123 --> 00:11:27.964
But actually because
we're using Expo Router,

142
00:11:27.964 --> 00:11:32.863
we have a handy utility function
that handles this automatically.

143
00:11:32.863 --> 00:11:38.774
So we can use useQuick.

144
00:11:41.886 --> 00:11:45.087
&gt;&gt; Kadi Kraman: Okay,
I guess I'll have to import it manually.

145
00:11:45.087 --> 00:11:52.329
So we want to import useQuickActionRouting

146
00:11:52.329 --> 00:12:00.557
from expo-quick-action -actions/router.

147
00:12:02.746 --> 00:12:05.930
&gt;&gt; Kadi Kraman: And this is just
a convenience function specifically for

148
00:12:05.930 --> 00:12:07.682
expo router.

149
00:12:07.682 --> 00:12:13.272
And we call this, it's a hook, so
we call this in our route layout file.

150
00:12:14.302 --> 00:12:20.131
And if you pass in params with an href so
the naming is important here.

151
00:12:20.131 --> 00:12:22.712
Then it'll automatically
link to that page.

152
00:12:27.466 --> 00:12:32.027
&gt;&gt; Kadi Kraman: So let's make sure that we
reload it so that the effect has rerun.

153
00:12:39.367 --> 00:12:44.142
&gt;&gt; Kadi Kraman: Hopefully,
if I do add a plant it opens the modal.

154
00:12:45.532 --> 00:12:49.772
Let's try this on, whoops,
double click that instead.

155
00:12:49.772 --> 00:12:53.032
So let's try this on Android as well,
add a plant.

156
00:12:53.032 --> 00:12:54.095
It opens the modal.

157
00:12:54.095 --> 00:12:55.882
That's really exciting.

158
00:12:55.882 --> 00:12:59.764
So we've now deep linked into our
application from a quick action.

159
00:13:01.044 --> 00:13:07.144
I really love building this because
it's something that it feels so native.

160
00:13:07.144 --> 00:13:10.036
It's kind of amazing that we
built this with JavaScript.

