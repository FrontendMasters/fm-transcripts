WEBVTT

1
00:00:00.155 --> 00:00:04.509
&gt;&gt; Kadi Kraman: And finally, we need to
store our plants in our existing storage,

2
00:00:04.509 --> 00:00:08.022
so the same way that we did
with the onboarding state.

3
00:00:08.022 --> 00:00:12.686
And we want to display all the existing
plants in a list on the homepage.

4
00:00:12.686 --> 00:00:16.076
So, I could use the same store, but

5
00:00:16.076 --> 00:00:21.389
I think it's nice to keep
these separated if possible.

6
00:00:21.389 --> 00:00:24.802
So we'll create a new zustand store and

7
00:00:24.802 --> 00:00:30.914
we want to be able to see a list of
plants, so we want an array of plants.

8
00:00:30.914 --> 00:00:35.674
We want to water a plant, so
watering is going to be a time stamp, so

9
00:00:35.674 --> 00:00:38.572
we'll say a last watered at time stamp.

10
00:00:38.572 --> 00:00:43.491
And you want to be able to
remove a plant from our list.

11
00:00:43.491 --> 00:00:49.431
So let's go,
&gt;&gt; Kadi Kraman: To our storage.

12
00:00:49.431 --> 00:00:55.620
So we store, and let's create
a New File called plantsStore.

13
00:01:02.114 --> 00:01:06.433
&gt;&gt; Kadi Kraman: So this is quite a bit of
code and again I'm not going to live code

14
00:01:06.433 --> 00:01:11.505
it, so let's copy this file across and
let's look through what it does.

15
00:01:13.685 --> 00:01:16.182
So I've created a PlantType here, so

16
00:01:16.182 --> 00:01:20.394
each plant is going to have a unique id,
it's gonna have a name,

17
00:01:20.394 --> 00:01:24.778
it's gonna have a wateringFrequency
in days, which is a number.

18
00:01:24.778 --> 00:01:28.035
And then optionally
a lastWateredAtTimestamp,

19
00:01:28.035 --> 00:01:29.700
which will be a number.

20
00:01:29.700 --> 00:01:34.434
So it's optional because there will
be an initial state where it's never

21
00:01:34.434 --> 00:01:36.121
been watered or planned.

22
00:01:36.121 --> 00:01:40.665
And in our zustand state,
we're going to have our array of plants,

23
00:01:40.665 --> 00:01:45.862
which will be an array of these plant
types, which will be empty or have many.

24
00:01:47.022 --> 00:01:52.207
We have our function to add a plant,
which will take the values from this form,

25
00:01:52.207 --> 00:01:55.362
so the name and
the watering frequency in days.

26
00:01:56.612 --> 00:02:00.920
Then we have a function to
remove a plant by plantId and

27
00:02:00.920 --> 00:02:07.071
also water a plant by plantId which
will set this lastwateredAtTimestamp.

28
00:02:07.071 --> 00:02:09.494
I've also done something
a little bit cheeky here.

29
00:02:09.494 --> 00:02:14.674
So in real world applications
if you need unique Ids

30
00:02:14.674 --> 00:02:20.228
you could use a library so
nano id or native uuid.

31
00:02:20.228 --> 00:02:24.231
But in this case, I didn't want to
install a library, and I don't need

32
00:02:24.231 --> 00:02:29.338
these Ids to be globally unique, I just
need these to be unique in my phone.

33
00:02:29.338 --> 00:02:36.048
So I added a little functionality here for
managing the Ids in state.

34
00:02:36.048 --> 00:02:39.577
So this is just telling me
what the next Id I can use is.

35
00:02:39.577 --> 00:02:42.427
And every time I add a plant,
I increment it.

36
00:02:42.427 --> 00:02:48.612
So in this addPlant function I
just return the existing state,

37
00:02:48.612 --> 00:02:52.007
then I'll increment the next Id.

38
00:02:53.127 --> 00:02:57.812
And in the plants array I'll add
the new plant at the top of the list.

39
00:03:00.944 --> 00:03:04.989
&gt;&gt; Kadi Kraman: For the removePlant,
we return the state and

40
00:03:04.989 --> 00:03:09.897
then just filter out the plant
by Id that was passed in.

41
00:03:09.897 --> 00:03:15.593
And then for waterPlant we're going
to just map over the plant's array.

42
00:03:15.593 --> 00:03:20.451
And then if the plant is the one that
we're watering we're going to set the last

43
00:03:20.451 --> 00:03:22.961
watered timestamp to the current time.

44
00:03:22.961 --> 00:03:26.117
And lastly, same as we did
with our onboarding storage,

45
00:03:26.117 --> 00:03:28.370
I'm going to store it in AsyncStorage.

46
00:03:28.370 --> 00:03:31.633
But notice that the name of
our storage key is different.

47
00:03:31.633 --> 00:03:33.689
So this is now the plants store.

48
00:03:33.689 --> 00:03:37.471
So now we would like to
hook up creating plants.

49
00:03:37.471 --> 00:03:43.186
So in our app.new, so the new screen.

50
00:03:46.105 --> 00:03:49.369
&gt;&gt; Kadi Kraman: Our placeholder
here was a console.log.

51
00:03:49.369 --> 00:03:52.715
So after it's passed
all these validations,

52
00:03:52.715 --> 00:03:54.871
it will get to adding a plant.

53
00:03:54.871 --> 00:03:59.975
So let's do at plant, and this will be

54
00:03:59.975 --> 00:04:04.768
the usePlantStore from the stand.

55
00:04:04.768 --> 00:04:07.580
And we'll pick the state,

56
00:04:07.580 --> 00:04:13.455
we'll pick the addPlant
function from our plant store.

57
00:04:16.741 --> 00:04:19.779
&gt;&gt; Kadi Kraman: And here, we've already
checked that this days is a number.

58
00:04:19.779 --> 00:04:22.745
So, we can safely cast it into a number.

59
00:04:22.745 --> 00:04:29.226
So we'll do addPlant(name, Number (days)).

60
00:04:31.628 --> 00:04:34.255
&gt;&gt; Kadi Kraman: And once we've added it,
let's also close the model.

61
00:04:34.255 --> 00:04:37.482
So we'll use router, for
that, the router hooks.

62
00:04:37.482 --> 00:04:41.542
So let's do const router = useRouter.

63
00:04:45.967 --> 00:04:51.308
&gt;&gt; Kadi Kraman: And
down here we want to do router.navigate.

64
00:04:51.308 --> 00:04:53.367
And we'll just navigate
back to the index page.

65
00:04:58.560 --> 00:05:06.713
&gt;&gt; Kadi Kraman: So now let's do,
&gt;&gt; Kadi Kraman: Casper The Cactus.

66
00:05:08.614 --> 00:05:14.384
&gt;&gt; Kadi Kraman: I don't know how often you
watch your cactus three/four days, okay?

67
00:05:14.384 --> 00:05:19.411
So currently I've submitted this form,
but nothing is showing up because

68
00:05:19.411 --> 00:05:23.983
we haven't implemented our list
on plants yet, so let's do that.

69
00:05:23.983 --> 00:05:27.977
Open your theme file,
cuz we need to add a couple more colors.

70
00:05:27.977 --> 00:05:33.109
Let's do a colorBlack, which is

71
00:05:33.109 --> 00:05:38.248
just #000, and colorGrey.

72
00:05:40.725 --> 00:05:44.971
&gt;&gt; Kadi Kraman: So, I'm actually
using just this grey color, but

73
00:05:44.971 --> 00:05:50.222
you can also write out the hex code,
which is #808080.

74
00:05:56.395 --> 00:06:01.490
&gt;&gt; Kadi Kraman: So, in our plant store,
let's export the PlantType.

75
00:06:01.490 --> 00:06:04.587
So we could use it in our home screen.

76
00:06:04.587 --> 00:06:07.819
And for the plant card,
let me just show you what we're building,

77
00:06:07.819 --> 00:06:08.927
maybe this will help.

78
00:06:08.927 --> 00:06:10.159
So this is what we're building.

79
00:06:10.159 --> 00:06:12.141
So we're building a list of plants.

80
00:06:12.141 --> 00:06:13.810
So we want this little plant card, and

81
00:06:13.810 --> 00:06:15.851
we'll create a separate component for
that.

82
00:06:15.851 --> 00:06:22.309
So in your components,
let's create a PlantCard,

83
00:06:25.043 --> 00:06:27.538
&gt;&gt; Kadi Kraman: .tsx.

84
00:06:27.538 --> 00:06:33.492
And for this,
we can just copy this file again.

85
00:06:40.476 --> 00:06:41.495
&gt;&gt; Kadi Kraman: There we go.

86
00:06:41.495 --> 00:06:46.266
So one thing that I've added here that
I've not implemented yet is that for

87
00:06:46.266 --> 00:06:50.883
this plant card, we want to use the same
PlantlyImage as we did in our home

88
00:06:50.883 --> 00:06:53.093
screen and in the add plant model.

89
00:06:53.093 --> 00:06:56.971
But we kind of wanted to be smaller
because if every one of these were close

90
00:06:56.971 --> 00:06:59.461
to the size of the screen
that wouldn't work.

91
00:06:59.461 --> 00:07:05.395
So because we're using React we can
customize our PlantlyImage component

92
00:07:05.395 --> 00:07:11.626
to optionally take in a size prop, so
you could define what size it wants to be.

93
00:07:11.626 --> 00:07:13.232
So let's open the PlantlyImage.

94
00:07:16.069 --> 00:07:21.145
&gt;&gt; Kadi Kraman: And let's do a type
Props and we can pass in a size which is

95
00:07:21.145 --> 00:07:27.099
an optional hence the question mark,
it's an optional number.

96
00:07:30.966 --> 00:07:37.564
&gt;&gt; Kadi Kraman: And here we'll
de-structure size from the Props and

97
00:07:37.564 --> 00:07:43.866
for the image size we can
say that it will be size or,

98
00:07:43.866 --> 00:07:48.556
if this is false or null or undefined,

99
00:07:48.556 --> 00:07:52.390
then we'll go to our default.

100
00:07:53.730 --> 00:07:59.282
And finally, in our index page,
we want to render this list of plants.

101
00:07:59.282 --> 00:08:03.200
So let's go to tabs, index.

102
00:08:03.200 --> 00:08:06.647
And now we do have an array
of items to map over.

103
00:08:06.647 --> 00:08:11.138
So if we have an array of
items to map over to have

104
00:08:11.138 --> 00:08:16.105
a full screen list,
then we always use a FlatList.

105
00:08:16.105 --> 00:08:21.205
So let's do const plants and
get our plants from our zustand store.

106
00:08:22.326 --> 00:08:31.099
This will be usePlantStore((state)
=&gt; state.plants)).

107
00:08:31.099 --> 00:08:37.669
So this hopefully,
let's do a console.log just to validate.

108
00:08:37.669 --> 00:08:39.506
If I open my terminal.

109
00:08:43.262 --> 00:08:48.287
&gt;&gt; Kadi Kraman: So I've created a plant
here, so I have an array of one.

110
00:08:50.067 --> 00:08:51.202
&gt;&gt; Kadi Kraman: Let's add another plant.

111
00:08:51.202 --> 00:08:59.391
Let's do,
&gt;&gt; Kadi Kraman: Laura The Lilly.

112
00:09:03.622 --> 00:09:06.693
&gt;&gt; Kadi Kraman: I'm trying to remember
if Lilly is written with one l or two.

113
00:09:13.977 --> 00:09:15.128
&gt;&gt; Kadi Kraman: Apparently both are valid.

114
00:09:15.128 --> 00:09:16.845
&gt;&gt; Speaker 2: [LAUGH] I think it's one.

115
00:09:16.845 --> 00:09:20.786
&gt;&gt; Kadi Kraman: Okay,
it's one, I'm gonna with one.

116
00:09:20.786 --> 00:09:23.776
And I go with seven, okay, great.

117
00:09:23.776 --> 00:09:25.482
So we have two values here.

118
00:09:25.482 --> 00:09:28.846
So the data is definitely getting through,
understand?

119
00:09:28.846 --> 00:09:31.339
Let's render this in a FlatList.

120
00:09:31.339 --> 00:09:33.765
So a flat list is a virtualized list,

121
00:09:33.765 --> 00:09:36.896
whenever you want to map
over an array of items,

122
00:09:36.896 --> 00:09:42.481
you should never use array.map in React
Native, you should always use a FlatList.

123
00:09:42.481 --> 00:09:47.022
And now it's because it has optimized
handling if the amount of data

124
00:09:47.022 --> 00:09:51.335
that you render is too big to be
anywhere near the viewable area.

125
00:09:51.335 --> 00:09:56.045
So it actually,
if you're rendering like a thousand items,

126
00:09:56.045 --> 00:10:01.401
it doesn't render all thousand,
it renders some amount of screens.

127
00:10:01.401 --> 00:10:06.179
So let's return a FlatList.

128
00:10:09.564 --> 00:10:14.900
&gt;&gt; Kadi Kraman: And we'll pass in our
data which will be the plants array.

129
00:10:19.103 --> 00:10:22.138
&gt;&gt; Kadi Kraman: And renderItem.

130
00:10:22.138 --> 00:10:26.804
So this will be the render function for
each plant and

131
00:10:26.804 --> 00:10:32.013
it's a function and
you can destructure the item from it.

132
00:10:32.013 --> 00:10:38.806
So if we do item, then that's where
we get the each individual plant and

133
00:10:38.806 --> 00:10:44.140
we take this and
we render our newly created plantCard.

134
00:10:50.830 --> 00:10:55.730
&gt;&gt; Kadi Kraman: And
we pass in the plant as the item,

135
00:11:00.997 --> 00:11:02.244
&gt;&gt; Kadi Kraman: Okay?

136
00:11:02.244 --> 00:11:03.981
So this is looking good,

137
00:11:03.981 --> 00:11:08.380
you can do with some padding if
we were to match our design here.

138
00:11:08.380 --> 00:11:12.513
So in our styles I can actually
use this container style.

139
00:11:12.513 --> 00:11:19.725
So let's do style = styles.container.

140
00:11:19.725 --> 00:11:23.623
And we'll keep the flex one and
the background color,

141
00:11:23.623 --> 00:11:25.921
we don't need the align items.

142
00:11:25.921 --> 00:11:30.703
We also want to add some padding there but
recall that you should never

143
00:11:30.703 --> 00:11:35.247
add paddings or margins on the style
prop of the scroll elements.

144
00:11:35.247 --> 00:11:38.140
You want to use a contentContainerStyle.

145
00:11:40.816 --> 00:11:47.088
&gt;&gt; Kadi Kraman: This is
styles.contentContainer.

146
00:11:52.227 --> 00:11:56.184
&gt;&gt; Kadi Kraman: And we'll do a padding 12.

147
00:11:56.184 --> 00:12:01.104
And the reason you don't want to add
the padding 12 here is then when you have

148
00:12:01.104 --> 00:12:06.262
enough items to overflow from the screen
the bottom of the screen will be cut off.

149
00:12:06.262 --> 00:12:09.858
So that's why we're adding the padding
to the content container instead.

150
00:12:09.858 --> 00:12:14.788
So it's nice to add like a little
list empty component as well, so

151
00:12:14.788 --> 00:12:17.667
when we've not added any plants yet.

152
00:12:17.667 --> 00:12:21.325
So with FlatList you have some
convenience components so

153
00:12:21.325 --> 00:12:25.373
there is a ListEmpty, ListFooter,
ListHeader components.

154
00:12:25.373 --> 00:12:30.085
So ListFooter and ListHeader will be
rendered at the top or bottom of the file.

155
00:12:30.085 --> 00:12:34.684
And then the ListEmpty component
will be rendered automatically if

156
00:12:34.684 --> 00:12:37.595
the data that you're passing in is empty.

157
00:12:37.595 --> 00:12:41.834
So in this case, let's just use

158
00:12:41.834 --> 00:12:46.388
our PlantlyButton with a title and

159
00:12:46.388 --> 00:12:51.577
do "Add your first plant and onPress,

160
00:12:59.719 --> 00:13:02.404
&gt;&gt; Kadi Kraman: We'll need to use router,

161
00:13:02.404 --> 00:13:05.211
so const router UseRouter.

162
00:13:08.588 --> 00:13:15.178
&gt;&gt; Kadi Kraman: And onPress, we will
do a router.navigate to our new screen.

163
00:13:19.217 --> 00:13:24.198
&gt;&gt; Kadi Kraman: Okay, so this will
open the new plant model if our array

164
00:13:24.198 --> 00:13:29.193
is empty and
we can render all of our plants otherwise.

165
00:13:29.193 --> 00:13:33.832
So, one thing I want to draw your
attention to that I used in this

166
00:13:33.832 --> 00:13:38.490
plantllCard that I've not spoken
about before, is a shadow.

167
00:13:38.490 --> 00:13:43.581
So there's actually this
really useful website that is

168
00:13:43.581 --> 00:13:49.875
great to use if you're looking to
create a shadow with React Native.

169
00:13:49.875 --> 00:13:52.805
So these are all the shadow
props that you would use.

170
00:13:52.805 --> 00:13:57.123
And kind of manually playing around
with it I find quite tedious, so

171
00:13:57.123 --> 00:14:00.317
using this as a starting
point is really helpful.

172
00:14:00.317 --> 00:14:05.663
But one thing that you should know
when it comes to shadows is that

173
00:14:05.663 --> 00:14:10.819
these props only work on iOS,
and this only works on Android.

174
00:14:10.819 --> 00:14:15.653
So when we talk about shadow,
we're actually only affecting iOS.

175
00:14:15.653 --> 00:14:20.970
And on Android, the shadow effect
is achieved with the elevation.

176
00:14:22.360 --> 00:14:26.032
So they actually look
similar to us UI wise.

177
00:14:26.032 --> 00:14:32.509
So if I look at the examples screenshots
here, if I look at the screenshots here,

178
00:14:32.509 --> 00:14:36.912
so we have Android on the left and
then iOS on the right.

179
00:14:36.912 --> 00:14:40.926
So they actually look quite similar,
but they are using different props.

180
00:14:40.926 --> 00:14:45.113
So if you're creating a bunch of shadow
and you have not used elevation at all,

181
00:14:45.113 --> 00:14:47.471
then on Android, that will have no effect.

