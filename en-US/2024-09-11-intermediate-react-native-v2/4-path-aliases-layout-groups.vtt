WEBVTT

1
00:00:00.110 --> 00:00:04.629
&gt;&gt; Kadi Kraman: This part is optional but
in this course we are going to have like

2
00:00:04.629 --> 00:00:10.026
a pretty deeply nested root, like
a couple of really deeply nested files.

3
00:00:10.026 --> 00:00:13.209
And we're gonna have a couple
of top level folders that we

4
00:00:13.209 --> 00:00:15.150
need to import things from.

5
00:00:15.150 --> 00:00:18.070
So initially when I wrote this you
do end up with really long and

6
00:00:18.070 --> 00:00:20.428
tedious paths but
we don't need to suffer this.

7
00:00:20.428 --> 00:00:24.078
We're using a TypeScript, so
I recommend you set up the Path Alias.

8
00:00:24.078 --> 00:00:27.468
And this is actually set up to
using the default template.

9
00:00:27.468 --> 00:00:31.688
And we just don't have that because
we are using the TypeScript template.

10
00:00:31.688 --> 00:00:36.688
And basically all need
to do is update your TS

11
00:00:36.688 --> 00:00:40.616
config and add this path alias to.

12
00:00:40.616 --> 00:00:41.479
Well, whatever you want.

13
00:00:41.479 --> 00:00:42.792
Where can I keep it simple?

14
00:00:42.792 --> 00:00:45.157
You can add a part A, so
you can have multiple ones,

15
00:00:45.157 --> 00:00:47.090
you can add it to multiple folders, etc.

16
00:00:47.090 --> 00:00:50.285
But we are gonna just add
one top lower one, so

17
00:00:50.285 --> 00:00:54.510
that if you do @/,
it'll link to the root of the project.

18
00:00:55.850 --> 00:01:00.390
So I will copy this, go to our tsconfig.

19
00:01:07.500 --> 00:01:09.397
&gt;&gt; Kadi Kraman: Here we go.

20
00:01:09.397 --> 00:01:14.177
And now instead of doing theme,
we should be able to do @theme,

21
00:01:14.177 --> 00:01:18.147
because this will link to
the top of the directory.

22
00:01:18.147 --> 00:01:22.574
Obviously we are flat currently, but this
also means that when we refactor these

23
00:01:22.574 --> 00:01:27.328
components, these files, which we're going
to do, then when you move these files,

24
00:01:27.328 --> 00:01:29.171
this theme link will still work.

25
00:01:29.171 --> 00:01:32.111
So it's much it's very useful.

26
00:01:32.111 --> 00:01:35.341
And let's update the other
theme imports as well.

27
00:01:37.391 --> 00:01:41.053
Okay, next up let's talk
about layout groups.

28
00:01:41.053 --> 00:01:43.433
So our app is going to
have an onboarding step.

29
00:01:46.153 --> 00:01:50.718
So the user will be faced with a special
screen that opens only when they open

30
00:01:50.718 --> 00:01:53.263
the app for the very first time.

31
00:01:53.263 --> 00:01:56.146
We're not doing authentication
in this workshop, but

32
00:01:56.146 --> 00:02:00.144
you could use a very similar mechanism for
setting up authenticated routes.

33
00:02:00.144 --> 00:02:03.740
So we're going to do a check in -app
to check whether the user has gone

34
00:02:03.740 --> 00:02:06.530
through the onboarding flow,
and if they haven't,

35
00:02:06.530 --> 00:02:10.479
they'll see the onboarding screen
instead of seeing the app screen.

36
00:02:10.479 --> 00:02:13.744
So if you think about how auth works, it
is literally the same thing, so you could

37
00:02:13.744 --> 00:02:17.121
use the same mechanism, but you will check
whether the user has a valid auth state.

38
00:02:17.121 --> 00:02:23.373
So for this, we'll need to use groups.

39
00:02:23.373 --> 00:02:28.162
We need to have a full screen modal
that can render over the top of these

40
00:02:28.162 --> 00:02:29.713
bottom tabs.

41
00:02:29.713 --> 00:02:34.277
So if I defined a new modal
screen just in this app folder,

42
00:02:34.277 --> 00:02:40.947
then it will get rendered as a tab because
our layout here is a bottom tab's layout.

43
00:02:42.677 --> 00:02:46.317
So, in order to have a modal
rendered on top of our tabs,

44
00:02:46.317 --> 00:02:48.717
we need to use layout groups.

45
00:02:48.717 --> 00:02:54.577
So, folders that are surrounded in these
brackets are layout groups folders,

46
00:02:54.577 --> 00:02:59.396
the name of this folder isn't
included in the path of the screen.

47
00:02:59.396 --> 00:03:05.707
So in the HREF pop the screen and
they should don't show up in the root.

48
00:03:05.707 --> 00:03:10.435
So let's create a new folder called
tabs and it will be a grouping folder.

49
00:03:10.435 --> 00:03:14.672
You can actually call this whatever so it
is a convention that we call the tabs for

50
00:03:14.672 --> 00:03:17.709
the bottom tabs you could
literally call this whatever so

51
00:03:17.709 --> 00:03:19.937
the name of it doesn't actually matter.

52
00:03:21.474 --> 00:03:26.474
And let's move all of our
files into this tabs folder.

53
00:03:31.944 --> 00:03:35.685
&gt;&gt; Kadi Kraman: And
now in our top level app folder,

54
00:03:35.685 --> 00:03:40.435
let's create a new file called onboarding.

55
00:03:45.392 --> 00:03:47.085
&gt;&gt; Kadi Kraman: And
this will be a placeholder screen.

56
00:03:47.085 --> 00:03:49.035
So let's just copy the content from here.

57
00:03:58.374 --> 00:04:01.801
&gt;&gt; Kadi Kraman: And now we have
a layout file here with our tabs, but

58
00:04:01.801 --> 00:04:06.636
we don't have a layout file at the top,
so let's create one.

59
00:04:06.636 --> 00:04:08.178
So at the very top, let's do a layout.

60
00:04:13.946 --> 00:04:16.315
&gt;&gt; Kadi Kraman: So in our layout file,

61
00:04:16.315 --> 00:04:21.690
let's export default function,
call it layout.

62
00:04:21.690 --> 00:04:25.090
And we want to return a stack.

63
00:04:27.240 --> 00:04:30.391
So, we want to render both the tabs and

64
00:04:30.391 --> 00:04:36.010
your onboarding screen as a stack and
then we have a stack.screen.

65
00:04:36.010 --> 00:04:40.823
So, this will be a screen that
renders all of these tabs.

66
00:04:40.823 --> 00:04:44.836
All the bottom tabs.
So this is like one of our layouts,

67
00:04:44.836 --> 00:04:48.202
I will say name will be the tabs.

68
00:04:48.202 --> 00:04:53.245
So, notice that we're not doing tabs/index
because this has a layout file and

69
00:04:53.245 --> 00:04:58.043
then it will let this layout file
configure how everything is laid out.

70
00:04:58.043 --> 00:05:01.754
So, we can just link to
this folder instead It.

71
00:05:01.754 --> 00:05:05.834
And the other screen that we
have is our onboarding screen.

72
00:05:05.834 --> 00:05:08.481
So let's do name onboarding.

73
00:05:12.316 --> 00:05:12.816
&gt;&gt; Kadi Kraman: Okay.

74
00:05:16.494 --> 00:05:18.039
&gt;&gt; Kadi Kraman: Yes?
&gt;&gt; Speaker 2: So the only prerequisite for

75
00:05:18.039 --> 00:05:21.215
the taps, the name is
the parentheses that's it, you can,

76
00:05:21.215 --> 00:05:25.783
anything within that is, so you could have
named it whatever you want, like you said.

77
00:05:25.783 --> 00:05:26.981
&gt;&gt; Kadi Kraman: I could have
named it whatever you want.

78
00:05:26.981 --> 00:05:27.932
Yes, yes, correct.

79
00:05:27.932 --> 00:05:29.693
&gt;&gt; Speaker 2: And
that's the export router then?

80
00:05:29.693 --> 00:05:30.238
&gt;&gt; Kadi Kraman: It is, yes.

81
00:05:30.238 --> 00:05:32.113
Yeah, so it is a layout root.

82
00:05:32.113 --> 00:05:36.077
So I mentioned that everything,
like the root of your app,

83
00:05:36.077 --> 00:05:40.693
so the first screen that opens is
the index screen in your app folder.

84
00:05:40.693 --> 00:05:45.411
And you notice that there is no
index screen in our app folder,

85
00:05:45.411 --> 00:05:48.324
but you need to have an index path.

86
00:05:48.324 --> 00:05:53.246
So if you think of how these
files that we have now translate

87
00:05:53.246 --> 00:05:57.968
to file paths like HREFs,
we have like this index file is

88
00:05:57.968 --> 00:06:02.505
/index because it is
app/(tabs)/index right.

89
00:06:02.505 --> 00:06:07.005
App isn't included because
that's just our root,

90
00:06:07.005 --> 00:06:13.343
tabs is omitted because it's a grouping
root and index is the index root so

91
00:06:13.343 --> 00:06:18.984
this index file still resolves to
the main entry point in our app.

92
00:06:18.984 --> 00:06:21.029
&gt;&gt; Speaker 2: So if you didn't have
the parentheses there would Resolve

93
00:06:21.029 --> 00:06:23.184
[CROSSTALK] it would resolve
the It would part of the route.

94
00:06:23.184 --> 00:06:24.802
&gt;&gt; Kadi Kraman: Yes, correct.
Yeah, it would, and

95
00:06:24.802 --> 00:06:29.180
it would actually give us an error because
we no longer have a root index file.

96
00:06:29.180 --> 00:06:30.862
&gt;&gt; Speaker 2: Okay, interesting.

97
00:06:30.862 --> 00:06:33.446
&gt;&gt; Kadi Kraman: All right, so
now we actually get two headers, and

98
00:06:33.446 --> 00:06:37.597
this is very common when you are nesting
navigators because by default everything

99
00:06:37.597 --> 00:06:41.109
will have a header and
then we are going to hide one.

100
00:06:41.109 --> 00:06:47.179
In this case, let's hide the top one here
so we don't need one that says tabs.

101
00:06:47.179 --> 00:06:50.931
So let's add some options and

102
00:06:50.931 --> 00:06:55.142
we'll do headerShown: false.

103
00:06:59.141 --> 00:07:03.993
&gt;&gt; Kadi Kraman: Okay,
&gt;&gt; Kadi Kraman: .So,

104
00:07:03.993 --> 00:07:09.883
now we want to be able to check whether
the user has finished onboarding and

105
00:07:09.883 --> 00:07:13.642
if they haven't redirected onboarding.

106
00:07:13.642 --> 00:07:20.422
So by default, your app will open
the index roots, the root index file.

107
00:07:20.422 --> 00:07:25.375
So what we can do, actually the order
of rendering is going to be

108
00:07:25.375 --> 00:07:28.273
that it goes to this layout file, and

109
00:07:28.273 --> 00:07:33.615
then it goes to this layout file,
and then it goes to the index file.

110
00:07:33.615 --> 00:07:40.966
So we can intercept our rendering in
this layout file in our tabs directory.

111
00:07:40.966 --> 00:07:45.568
So I'm gonna code this for now, so

112
00:07:45.568 --> 00:07:51.439
let's do a const has finished on boarding,

113
00:07:51.439 --> 00:07:54.464
and let's say false.

114
00:07:56.522 --> 00:08:03.511
&gt;&gt; Kadi Kraman: And now we can use
a redirect component from expo router so

115
00:08:03.511 --> 00:08:09.772
we can do if the user
hasn't finished onboarding,

116
00:08:09.772 --> 00:08:15.304
then instead of returning
this tabs layout,

117
00:08:15.304 --> 00:08:19.689
we're going to return.a redirect

118
00:08:22.285 --> 00:08:25.299
And the HREF is going to
be our onboarding route.

119
00:08:31.205 --> 00:08:35.435
&gt;&gt; Kadi Kraman: So now when I reload
my app, it actually opens onboarding.

120
00:08:35.435 --> 00:08:41.711
And if I change this to true and
reload my app, it will open my app.

