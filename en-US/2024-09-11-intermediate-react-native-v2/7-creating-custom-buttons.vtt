WEBVTT

1
00:00:00.000 --> 00:00:03.813
&gt;&gt; Kadi Kraman: When we're creating
pressable elements in React Native,

2
00:00:03.813 --> 00:00:06.413
we often reach for a touchable opacity.

3
00:00:06.413 --> 00:00:10.259
I think this is a guilty pleasure
of many a React Native developer,

4
00:00:10.259 --> 00:00:14.931
where we use touchable opacity, but when
we know that actually we should be using

5
00:00:14.931 --> 00:00:19.766
this new pressable component instead,
the touchable opacity is so convenience.

6
00:00:19.766 --> 00:00:20.886
So why would you use pressable?

7
00:00:20.886 --> 00:00:22.974
And then define it ourselves.

8
00:00:22.974 --> 00:00:27.054
So we're going to actually create
a beautiful custom button using some

9
00:00:27.054 --> 00:00:31.814
of the functionalities of the Pressable
component, which is an example of what you

10
00:00:31.814 --> 00:00:35.972
can do, with pressable that you couldn't,
with touchable capacity.

11
00:00:35.972 --> 00:00:44.196
So let's start by creating a components
folder at our rooted project.

12
00:00:46.799 --> 00:00:50.499
&gt;&gt; Kadi Kraman: And
let's create a file called plantly button.

13
00:00:54.482 --> 00:00:57.710
&gt;&gt; Kadi Kraman: And this is actually
a convention again that I personally

14
00:00:57.710 --> 00:00:58.389
like to do.

15
00:00:58.389 --> 00:01:03.722
So when I have a new project and
oftentimes we have a button component

16
00:01:03.722 --> 00:01:09.161
that's specific to that project,
so might have different states.

17
00:01:09.161 --> 00:01:14.101
And I tend to call it like project
name button or client name button or

18
00:01:14.101 --> 00:01:15.757
something like that.

19
00:01:15.757 --> 00:01:20.575
And the reason for that is I find the
importing easier because if we just call

20
00:01:20.575 --> 00:01:25.029
it button, then you have lots of
competition in five competitions.

21
00:01:25.029 --> 00:01:28.703
So this is just a convention.

22
00:01:28.703 --> 00:01:32.533
To start with,
let's copy this plantly button here.

23
00:01:32.533 --> 00:01:36.326
This will just create

24
00:01:36.326 --> 00:01:41.807
a pressable with some styles.

25
00:01:41.807 --> 00:01:47.835
And let's actually also use it
straight away in our okay yeah.

26
00:01:47.835 --> 00:01:52.681
So I'll just tell the props so we have
a title prop and a non-press prop, and

27
00:01:52.681 --> 00:01:56.185
we're just rendering
a pressable with a text inside.

28
00:01:56.185 --> 00:01:58.026
And I have this onboarding page open.

29
00:01:58.026 --> 00:02:03.195
So let's also use it in on boarding.

30
00:02:03.195 --> 00:02:09.341
So instead of button,
let's call it plantly button.

31
00:02:09.341 --> 00:02:15.040
So we use the same props here,
which is handy,

32
00:02:15.040 --> 00:02:18.998
and same for our profile route.

33
00:02:18.998 --> 00:02:24.616
Let's rename this plantly button.

34
00:02:27.991 --> 00:02:32.408
&gt;&gt; Kadi Kraman: Okay so styling wise, I've
used the green color that we had before,

35
00:02:32.408 --> 00:02:35.836
added some padding horizontally,
vertically, and

36
00:02:35.836 --> 00:02:38.287
used my favorite border radius, 6.

37
00:02:38.287 --> 00:02:42.573
And because we have a dark brown
frack I used there a white text.

38
00:02:42.573 --> 00:02:47.108
Now the first thing we want to
do is have some haptic feedback.

39
00:02:47.108 --> 00:02:52.229
So whenever you press the button,
we want the phone to vibrate a little bit.

40
00:02:52.229 --> 00:02:58.972
So for that,
let's install expo haptics so we'll need.

41
00:03:02.847 --> 00:03:06.982
&gt;&gt; Kadi Kraman: NPX,
expo-install, expo-haptics.

42
00:03:10.538 --> 00:03:12.525
&gt;&gt; Speaker 2: Does your computer
vibrate in the emulator?

43
00:03:12.525 --> 00:03:17.662
&gt;&gt; Kadi Kraman: Unfortunately, it does
not so, haptics only work on phones.

44
00:03:17.662 --> 00:03:19.622
They actually don't work
on the web as well.

45
00:03:19.622 --> 00:03:24.627
So because we have added web support
we'll need to add a condition

46
00:03:24.627 --> 00:03:29.727
not to call the haptics on the web
because that will cause an error.

47
00:03:29.727 --> 00:03:35.695
So let's import import star

48
00:03:35.695 --> 00:03:42.664
as haptics from expo-haptics.

49
00:03:45.980 --> 00:03:47.252
&gt;&gt; Kadi Kraman: And then this onPress,

50
00:03:47.252 --> 00:03:49.676
let's pull this out to
a constant function.

51
00:03:49.676 --> 00:03:53.538
So we'll do const handlePress.

52
00:03:58.542 --> 00:04:01.905
&gt;&gt; Kadi Kraman: And we're we want
this to call on press of course so

53
00:04:01.905 --> 00:04:04.317
keep the existing functionality.

54
00:04:04.317 --> 00:04:08.745
But let's also do haptics impact async and

55
00:04:08.745 --> 00:04:12.928
let's just do a light haptic feedback.

56
00:04:12.928 --> 00:04:17.584
So haptics impact feedback style.

57
00:04:17.584 --> 00:04:21.876
And there's a couple that you can choose
for, but if we're putting it on our main

58
00:04:21.876 --> 00:04:26.061
button, we probably don't want it to be
pretty intense so just do a light one.

59
00:04:26.061 --> 00:04:29.278
And like I said,
this doesn't work on the web.

60
00:04:29.278 --> 00:04:32.978
So we should add,
because we have added web support,

61
00:04:32.978 --> 00:04:37.102
we should also add handling for
like to emit this on the web.

62
00:04:37.102 --> 00:04:44.775
So we can use the platform
form React Native and

63
00:04:44.775 --> 00:04:50.676
we'll do if the platform OS is web,

64
00:04:50.676 --> 00:04:55.618
is not web, so it's around.

65
00:04:55.618 --> 00:04:57.578
And if we're not on the web,

66
00:04:57.578 --> 00:05:02.657
then we're going to do the haptic
feedback otherwise, we just carry on.

67
00:05:02.657 --> 00:05:06.119
&gt;&gt; Speaker 3: Their performance hits
with using haptics within mobile phones,

68
00:05:06.119 --> 00:05:09.761
it says async, so I'm assuming it
pulls it out of like the rendering,

69
00:05:09.761 --> 00:05:10.893
it's not blocking.

70
00:05:10.893 --> 00:05:15.869
But is there a time when you
wouldn't use it because it might.

71
00:05:15.869 --> 00:05:19.593
&gt;&gt; Kadi Kraman: I think I'm pretty sure
on some phones the haptic feedback

72
00:05:19.593 --> 00:05:21.578
automatically gets stopped.

73
00:05:21.578 --> 00:05:24.142
I think on Android,
it gets stopped if you're low on battery.

74
00:05:24.142 --> 00:05:24.927
&gt;&gt; Speaker 2: Okay.

75
00:05:24.927 --> 00:05:29.359
&gt;&gt; Kadi Kraman: So I think there's
handling of it in your operating

76
00:05:29.359 --> 00:05:30.704
system level.

77
00:05:30.704 --> 00:05:34.243
But for you as a developer, you probably
want to just not go crazy cuz if every

78
00:05:34.243 --> 00:05:37.065
single thing you do creates
app-to-feedback in your app,

79
00:05:37.065 --> 00:05:38.411
users are gonna be annoyed.

80
00:05:38.411 --> 00:05:39.752
&gt;&gt; Speaker 2: Yeah
&gt;&gt; Kadi Kraman: And

81
00:05:39.752 --> 00:05:43.521
the last thing you wanna do is so
with touchable opacity,

82
00:05:43.521 --> 00:05:47.775
when we press the button,
then we'll get some opacity change.

83
00:05:47.775 --> 00:05:51.154
So opacity will change from like 1 to 0.8.

84
00:05:51.154 --> 00:05:55.454
I think by default it's probably 0.6 or
0.5 anyway.

85
00:05:55.454 --> 00:05:58.476
So something that you
can't do is go darker.

86
00:05:58.476 --> 00:06:03.627
So let's do that so
I've chosen another beautiful green color,

87
00:06:03.627 --> 00:06:06.166
which is here in the theme file.

88
00:06:06.166 --> 00:06:13.764
So this is leafy green so let's open our
theme file and then add the screen color.

89
00:06:20.219 --> 00:06:23.695
&gt;&gt; Kadi Kraman: And
let's add a style here for buttonPressed.

90
00:06:25.188 --> 00:06:31.095
&gt;&gt; Kadi Kraman: And
this will have a background color

91
00:06:31.095 --> 00:06:36.056
of theme.colorleafygreen.

92
00:06:36.056 --> 00:06:42.362
Right, so for pressable, for the styles,
cool that we can pass in a style object or

93
00:06:42.362 --> 00:06:47.968
a style array, but in case of a pressable,
we can also pass in a function.

94
00:06:47.968 --> 00:06:55.487
So here you can do a function and
return my default styles.

95
00:07:00.179 --> 00:07:02.362
&gt;&gt; Kadi Kraman: So
why would you do a function?

96
00:07:02.362 --> 00:07:06.269
In this function, you get access to
the current state of the button.

97
00:07:06.269 --> 00:07:11.561
So in particular,
you can know if the button is pressed.

98
00:07:11.561 --> 00:07:15.615
So for this reason what we can do
is if the button is currently being

99
00:07:15.615 --> 00:07:20.457
pressed,
&gt;&gt; Kadi Kraman: Then we can

100
00:07:20.457 --> 00:07:24.588
return an array of styles.

101
00:07:24.588 --> 00:07:29.571
So return our button style, but then
it will also return the button pressed

102
00:07:29.571 --> 00:07:36.510
style.

103
00:07:36.510 --> 00:07:39.755
&gt;&gt; Speaker 4: Does the order
matter in the array?

104
00:07:39.755 --> 00:07:46.025
&gt;&gt; Kadi Kraman: Yes, it does, yeah so the
letter style will override the former one.

105
00:07:46.025 --> 00:07:48.410
So in button,
we do have a background color.

106
00:07:48.410 --> 00:07:54.382
And then because we are adding button
pressed next, then this will overwrite.

107
00:07:54.382 --> 00:07:56.510
So now if I press this button,

108
00:07:56.510 --> 00:08:01.547
you can see that While it's being pressed,
it actually goes darker.

109
00:08:01.547 --> 00:08:03.254
So you can do a bunch of things here.

110
00:08:03.254 --> 00:08:09.589
A really common thing to do is you can
use reanimated to animate this button.

111
00:08:09.589 --> 00:08:14.919
So you can do that when you're pressing
it, it like scales down, for example.

112
00:08:14.919 --> 00:08:18.051
So you can do that with
like on press in and

113
00:08:18.051 --> 00:08:21.748
on press alt and
using very high to be animated.

114
00:08:21.748 --> 00:08:26.158
I do have an example of that, if you look
at the source code of the React Conf app.

115
00:08:26.158 --> 00:08:31.520
So, I think the icon buttons and also
the bookmark items are using pressable and

116
00:08:31.520 --> 00:08:34.653
are using this method
to animate the buttons.

