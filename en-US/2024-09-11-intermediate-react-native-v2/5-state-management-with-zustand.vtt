WEBVTT

1
00:00:00.000 --> 00:00:03.078
&gt;&gt; Kadi Kraman: So right now,
we have hard coded our state for

2
00:00:03.078 --> 00:00:05.597
whether the user has on board or not.

3
00:00:05.597 --> 00:00:09.271
This is obviously not what we're
going to do in our real application,

4
00:00:09.271 --> 00:00:11.714
we need to have some
kind of state management.

5
00:00:11.714 --> 00:00:13.656
Even at the intercourse,

6
00:00:13.656 --> 00:00:19.051
you saw us using async storage to
persist some data across app launches.

7
00:00:19.051 --> 00:00:21.827
And we're pretty much going
to do the same thing,

8
00:00:21.827 --> 00:00:24.748
but we're going to use
a state management library.

9
00:00:24.748 --> 00:00:29.302
And in pretty much all production, I would
say in most production applications,

10
00:00:29.302 --> 00:00:33.592
you are going to use a state management
library instead of using async storage

11
00:00:33.592 --> 00:00:34.261
manually.

12
00:00:34.261 --> 00:00:39.735
But most state management libraries
will use async storage under the hood,

13
00:00:39.735 --> 00:00:43.510
to actually persist your
data across app launches.

14
00:00:43.510 --> 00:00:46.718
So which state management library use,

15
00:00:46.718 --> 00:00:50.878
I'm not really advocating for
any particular one.

16
00:00:50.878 --> 00:00:53.977
There's a couple of popular examples here.

17
00:00:53.977 --> 00:00:57.061
So we have Redux, of course,
with Redux Toolkit,

18
00:00:57.061 --> 00:00:59.592
which is pretty lightweight these days.

19
00:00:59.592 --> 00:01:05.770
We have Zustand, which I think a lot
of people who were old school Redux

20
00:01:05.770 --> 00:01:13.011
users have migrated to Zustand because it
is quite an easy and natural migration.

21
00:01:13.011 --> 00:01:16.593
And we have Yotai, which is more
lightweight and hooks -based.

22
00:01:16.593 --> 00:01:19.512
So as I said, I'm not advocating for
any particular one,

23
00:01:19.512 --> 00:01:22.908
I recommend that if you're choosing
a state management library for

24
00:01:22.908 --> 00:01:25.605
your own project,
you just try out a couple of these.

25
00:01:25.605 --> 00:01:30.851
Or at least try out all three and choose
one that you and your team like, yes.

26
00:01:30.851 --> 00:01:34.303
&gt;&gt; Speaker 1: Do you automatically go to
a state management library when starting

27
00:01:34.303 --> 00:01:36.965
an app, or
do you rely on maybe optimizing second and

28
00:01:36.965 --> 00:01:40.613
maybe use I don't know if context is
popular in the react native world?

29
00:01:40.613 --> 00:01:41.421
&gt;&gt; Kadi Kraman: Yeah, for sure.

30
00:01:41.421 --> 00:01:46.451
So context is really good, really useful.

31
00:01:46.451 --> 00:01:51.383
If I need to persist data across app
launches, I would use a state management

32
00:01:51.383 --> 00:01:55.546
library just because I don't want
to handle the async storage,

33
00:01:55.546 --> 00:01:58.182
get from storage and save from storage.

34
00:01:58.182 --> 00:02:01.996
And I don't want to handle the sinking
because a state management library will do

35
00:02:01.996 --> 00:02:04.797
it for you and it will do it in
a more optimized way as well, so

36
00:02:04.797 --> 00:02:06.330
we're not saving all the time.

37
00:02:06.330 --> 00:02:10.055
&gt;&gt; Speaker 1: You said between app
launches, Is that what you said between?

38
00:02:10.055 --> 00:02:10.806
&gt;&gt; Kadi Kraman: Yes.
&gt;&gt; Speaker 1: Okay.

39
00:02:10.806 --> 00:02:15.766
&gt;&gt; Kadi Kraman: So basically in our case
we have this has finished onboarding

40
00:02:15.766 --> 00:02:16.646
boolean.

41
00:02:16.646 --> 00:02:19.500
And every time I close and
reopen in my app,

42
00:02:19.500 --> 00:02:24.909
this will be reset to true because it's
just a constant that I've defined here.

43
00:02:24.909 --> 00:02:28.300
Or in case I'm not even updating it,
it's just a constant.

44
00:02:28.300 --> 00:02:33.928
But what we want to do is that once
the user has finished onboarding,

45
00:02:33.928 --> 00:02:38.892
we will set this to true and
save it into our device storage.

46
00:02:38.892 --> 00:02:41.513
So that the next time the user
opens the app they don't have to do

47
00:02:41.513 --> 00:02:42.360
onboarding again.

48
00:02:42.360 --> 00:02:46.063
All right, so
let's install the Zustand library.

49
00:02:49.791 --> 00:02:55.604
&gt;&gt; Kadi Kraman: I'll try
to keep it in my VS Code.

50
00:02:55.604 --> 00:02:58.530
So I stop my server, install Zustand.

51
00:03:08.882 --> 00:03:13.473
&gt;&gt; Kadi Kraman: Okay, so let's create
a new folder in the top level.

52
00:03:13.473 --> 00:03:17.609
And we'll call it our store, and

53
00:03:17.609 --> 00:03:23.075
we'll put all our Zustands stores in here,

54
00:03:23.075 --> 00:03:29.587
and let's create a new
file called User Store.Ts.

55
00:03:29.587 --> 00:03:33.495
Now we want to, so
we're using TypeScript, so

56
00:03:33.495 --> 00:03:38.593
let's type our user store so
what we're going to implement.

57
00:03:38.593 --> 00:03:42.810
So a user store is going to have

58
00:03:42.810 --> 00:03:47.881
a Boolean as finished onboarding.

59
00:03:47.881 --> 00:03:54.666
This will be a Boolean that is mandatory,
and it's gonna have a function,

60
00:03:54.666 --> 00:03:58.773
to toggle this onboarding to true and
false.

61
00:03:58.773 --> 00:04:06.023
So toggle has onboarded,
&gt;&gt; Kadi Kraman: And

62
00:04:06.023 --> 00:04:10.740
this will be a function, and

63
00:04:10.740 --> 00:04:13.693
return nothing.

64
00:04:13.693 --> 00:04:16.939
So onboarded.

65
00:04:16.939 --> 00:04:21.425
Installing a spell check on my VS Code,
code has been incredibly handy,

66
00:04:21.425 --> 00:04:23.418
I make a lot of spelling errors.

67
00:04:23.418 --> 00:04:25.851
All right, so
this is what we're going to implement.

68
00:04:25.851 --> 00:04:34.573
So let's import create from Zustand.

69
00:04:39.534 --> 00:04:42.317
&gt;&gt; Kadi Kraman: And
we want to create our userStore.

70
00:04:42.317 --> 00:04:48.090
So we understand what you actually
export is a hook to your store.

71
00:04:48.090 --> 00:04:56.090
So export const useUserStore.

72
00:04:58.735 --> 00:05:02.771
&gt;&gt; Kadi Kraman: And we're going to create,
&gt;&gt; Kadi Kraman: So

73
00:05:02.771 --> 00:05:04.021
this will be a function.

74
00:05:04.021 --> 00:05:08.513
And we're going to, with TypeScript,
we're gonna pass our userStore in here.

75
00:05:08.513 --> 00:05:11.496
So just to define what
we're going to create.

76
00:05:11.496 --> 00:05:15.016
And then inside this,

77
00:05:15.016 --> 00:05:20.212
we're going to have a function.

78
00:05:20.212 --> 00:05:26.524
So this will have set to update the store,
and we'll have some initial, there we go.

79
00:05:26.524 --> 00:05:33.045
So this needs to return the object,
I think this is right.

80
00:05:33.045 --> 00:05:35.265
And we're gonna have our initial state.

81
00:05:35.265 --> 00:05:38.099
So has finished onboarding.

82
00:05:38.099 --> 00:05:41.597
Let's start with, false.

83
00:05:41.597 --> 00:05:46.684
And we'll do toggle has onboarded,
which will be a function.

84
00:05:50.191 --> 00:05:52.127
&gt;&gt; Kadi Kraman: We're gonna use this set,
so,

85
00:05:52.127 --> 00:05:55.443
this is how you update the state
of your zest and store.

86
00:05:55.443 --> 00:06:00.963
And then we can use set, so,
this will get the state.

87
00:06:04.518 --> 00:06:07.479
&gt;&gt; Kadi Kraman: And we're going to
return the new state of the store.

88
00:06:07.479 --> 00:06:12.744
So return,
let's spread the existing state,

89
00:06:12.744 --> 00:06:16.038
this is why it's like Redux.

90
00:06:16.038 --> 00:06:17.511
Feels right at home.

91
00:06:17.511 --> 00:06:21.671
hasFinishedOnboarding, and
this is toggle so

92
00:06:21.671 --> 00:06:27.079
we're just going to go to
state.hasFinishedOnboarding and

93
00:06:27.079 --> 00:06:29.783
then flip the Boolean, okay.

94
00:06:29.783 --> 00:06:34.189
So this is a little store where we
have our hasFinishedOnboarding,

95
00:06:34.189 --> 00:06:38.839
which is a Boolean, and then a function
to toggle it from true to false.

96
00:06:41.510 --> 00:06:45.418
&gt;&gt; Kadi Kraman: Now, in our layout file,

97
00:06:45.418 --> 00:06:51.992
instead of having this hard-coded value,

98
00:06:51.992 --> 00:06:57.501
let's do hasFinishedOnboarding,

99
00:06:57.501 --> 00:07:02.309
and this will be useUserStore.

100
00:07:02.309 --> 00:07:05.717
So the hook that we've just created and

101
00:07:05.717 --> 00:07:10.053
this takes a function,
where you get the state and

102
00:07:10.053 --> 00:07:15.226
then you pick the things you
want to include from the state.

103
00:07:15.226 --> 00:07:20.979
So we'll do a state hasFinishedOnboarding.

104
00:07:20.979 --> 00:07:25.029
So you could conceivably
create a hook here that

105
00:07:25.029 --> 00:07:28.885
just returns all of
the values in your state.

106
00:07:28.885 --> 00:07:33.237
But, I think the convention is to do
one value at a time just because to

107
00:07:33.237 --> 00:07:35.725
make it a bit optimizing for updating.

108
00:07:35.725 --> 00:07:40.906
So every time this store updates all
the functions that listen to this

109
00:07:40.906 --> 00:07:46.284
change would obviously,
all the components would get re-rendered.

110
00:07:46.284 --> 00:07:48.599
So if you're listening to
something that you're not using,

111
00:07:48.599 --> 00:07:50.252
it would get re-rendered unnecessarily.

112
00:07:50.252 --> 00:07:55.055
So that's where we're specifically
using this constant and

113
00:07:55.055 --> 00:07:58.483
picking out this hasFinishedOnboarding.

114
00:08:04.857 --> 00:08:11.299
&gt;&gt; Kadi Kraman: Okay, so let me,
&gt;&gt; Kadi Kraman: Start my bundle again.

115
00:08:23.177 --> 00:08:27.483
&gt;&gt; Kadi Kraman: Okay, so
let's go to our onboarding screen.

116
00:08:32.173 --> 00:08:36.370
&gt;&gt; Kadi Kraman: And in the screen, so
in the intercourse, it said that we almost

117
00:08:36.370 --> 00:08:41.216
never used the native button element
from but this is the moment.

118
00:08:41.216 --> 00:08:47.845
It is really useful for having some quick
buttons if you need to test things.

119
00:08:47.845 --> 00:08:53.149
So, let's replace this with a button,

120
00:08:53.149 --> 00:08:58.303
and title will be ''Let me in!''.

121
00:08:58.303 --> 00:09:04.839
And onPress,
we need to add this handlepress function.

122
00:09:10.255 --> 00:09:15.194
&gt;&gt; Kadi Kraman: So onPress, we're going
to call handlePress and in this function,

123
00:09:15.194 --> 00:09:20.132
we need to also hook into our start store,
but we want to get our toggle

124
00:09:20.132 --> 00:09:24.750
has on boarded function so
we could toggle it from false to true.

125
00:09:24.750 --> 00:09:30.383
So const
&gt;&gt; Kadi Kraman: ToggleHasOnboarded,

126
00:09:32.759 --> 00:09:35.791
&gt;&gt; Kadi Kraman: So be useUserStore from

127
00:09:35.791 --> 00:09:40.036
our store then we get the state and

128
00:09:40.036 --> 00:09:46.111
we pick out our toggle
has unboarded function.

129
00:09:46.111 --> 00:09:50.427
Right, so we press, we want to

130
00:09:50.427 --> 00:09:57.245
toggleHasOnboarding state
from true to false.

131
00:09:57.245 --> 00:10:01.886
Now if you do this,
you notice that nothing happens.

132
00:10:01.886 --> 00:10:06.771
And the reason is that this
layout file where we're doing

133
00:10:06.771 --> 00:10:09.837
the switch isn't being rendered.

134
00:10:09.837 --> 00:10:13.655
So if we work backwards, so
right now we're in this onboarding screen,

135
00:10:13.655 --> 00:10:15.415
this is what's being rendered.

136
00:10:15.415 --> 00:10:18.052
So if we work backwards
in order of rendering,

137
00:10:18.052 --> 00:10:20.489
we're getting this onboarding screen and

138
00:10:20.489 --> 00:10:24.900
then the layout screen that's in the same
folder so that's rendered first.

139
00:10:24.900 --> 00:10:29.711
So we're getting a layout on boarding so
none of this path is rendered at all.

140
00:10:29.711 --> 00:10:36.482
So for that reason we have to manually
navigate into our app as well.

141
00:10:36.482 --> 00:10:39.901
So for this we can use
programmatic navigation, so

142
00:10:39.901 --> 00:10:42.055
let's use the use router hook.

143
00:10:42.055 --> 00:10:45.402
So we'll do const router and

144
00:10:45.402 --> 00:10:50.566
we'll useRouter This is from Expo router.

145
00:10:50.566 --> 00:10:54.026
And after the toggle, we'll do router and

146
00:10:54.026 --> 00:10:58.847
you have a couple of navigation
application options here.

147
00:10:58.847 --> 00:11:01.787
The important ones, I guess, is back, so

148
00:11:01.787 --> 00:11:05.392
you can go to back to a previous
screen on your stack.

149
00:11:05.392 --> 00:11:10.765
You can do navigate, so
this will be navigating to a screen.

150
00:11:10.765 --> 00:11:15.841
You can do push,
which pushes the next screen onto a stack.

151
00:11:15.841 --> 00:11:18.036
And in our case,
we're actually going to use replace.

152
00:11:18.036 --> 00:11:22.748
So this will replace the current
between the stack or

153
00:11:22.748 --> 00:11:25.865
current stack with the next root.

154
00:11:25.865 --> 00:11:29.977
The reason we're doing replace, is that we
don't want the users to be able to swipe

155
00:11:29.977 --> 00:11:32.698
and go back to onboarding,
that doesn't make sense.

156
00:11:32.698 --> 00:11:36.793
So we want to actually replace
our stack with the home.

157
00:11:40.036 --> 00:11:44.736
&gt;&gt; Kadi Kraman: So now if I do let me in,
it actually opens our home screen and

158
00:11:44.736 --> 00:11:49.154
again for testing,
I've used toggle here on purpose so

159
00:11:49.154 --> 00:11:53.767
we could go back to onBoarding
which is handy for testing.

160
00:11:53.767 --> 00:12:01.188
So in our profile screen,
let's add a button here as well.

161
00:12:01.188 --> 00:12:04.557
So we'll use the same
button from React Native.

162
00:12:06.483 --> 00:12:12.429
&gt;&gt; Kadi Kraman: And let's do Button title,

163
00:12:12.429 --> 00:12:17.636
say Back to onboarding.

164
00:12:17.636 --> 00:12:21.312
And on press we will do const.

165
00:12:26.607 --> 00:12:31.905
&gt;&gt; Kadi Kraman: ToggleHasOnboarded,
this will be from our store again.

166
00:12:31.905 --> 00:12:38.070
So useUserStore and we'll go to the store,

167
00:12:38.070 --> 00:12:44.236
and we'll pick out the toggleHasOnboarded

168
00:12:44.236 --> 00:12:48.567
function, and then on press,

169
00:12:48.567 --> 00:12:53.745
we will toggle the onboarded state.

170
00:12:53.745 --> 00:12:57.019
Get rid of some styles we're not using,

171
00:12:57.019 --> 00:13:00.590
this is why I installed
that ESLint plugin.

172
00:13:00.590 --> 00:13:03.608
Here it is, lovely.

173
00:13:03.608 --> 00:13:07.436
And if I go to profile,
now if I go back to onboarding,

174
00:13:07.436 --> 00:13:10.511
this will open my onboarding state again.

175
00:13:10.511 --> 00:13:15.195
And finally,
you'll notice that our navigation here is

176
00:13:15.195 --> 00:13:17.838
maybe a little bit sub Optimal.

177
00:13:17.838 --> 00:13:21.042
We are navigating by
sliding in the screen and

178
00:13:21.042 --> 00:13:24.427
we can change the animation
of the navigation.

179
00:13:24.427 --> 00:13:28.303
So by default, we will,
because we're entering in a stack,

180
00:13:28.303 --> 00:13:30.624
it will just float in from the right.

181
00:13:30.624 --> 00:13:36.636
So if we go to the root layout file,
let's open the,

182
00:13:36.636 --> 00:13:43.619
let's go to the onboarding screen and
pass in some options.

183
00:13:43.619 --> 00:13:47.113
So firstly, cool.

184
00:13:47.113 --> 00:13:50.249
Well, that was silly of me.

185
00:13:50.249 --> 00:13:53.578
So firstly let's hide
the onboarding header.

186
00:13:53.578 --> 00:13:59.968
So we'll do a header shown,

187
00:14:02.890 --> 00:14:06.091
&gt;&gt; Kadi Kraman: And for the animation,

188
00:14:06.091 --> 00:14:09.778
let's do animation fade.

189
00:14:09.778 --> 00:14:14.036
Let's do animation fade for
the tabs there as well.

190
00:14:14.036 --> 00:14:17.435
So let me go back to onboarding.

191
00:14:17.435 --> 00:14:20.253
So now, when we toggle between them,

192
00:14:20.253 --> 00:14:24.216
the screens actually fade
into from one to the other,

193
00:14:24.216 --> 00:14:29.610
which this animation makes a lot more
sense when it comes to onboarding.

194
00:14:29.610 --> 00:14:31.978
But you can use a different
animation here and

195
00:14:31.978 --> 00:14:34.287
you can also configure custom animations.

