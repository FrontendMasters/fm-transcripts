WEBVTT

1
00:00:00.000 --> 00:00:04.186
&gt;&gt; Kadi Kraman: The thing you can do
is you can pass in URL parameters,

2
00:00:04.186 --> 00:00:05.218
that was it.

3
00:00:05.218 --> 00:00:10.159
So,
&gt;&gt; Kadi Kraman: What we could do is I was

4
00:00:10.159 --> 00:00:15.210
thinking, if we could deep
link into our plants page and

5
00:00:15.210 --> 00:00:18.546
then automatically posted a plant.

6
00:00:18.546 --> 00:00:22.332
So I don't know, let's say that you build
something where you do an email and

7
00:00:22.332 --> 00:00:25.084
you send a reminder saying
you should water your plant.

8
00:00:25.084 --> 00:00:29.459
And then you press water the plant and
it will deep link into your app, and

9
00:00:29.459 --> 00:00:32.829
it will use an action and
then when you open to this page,

10
00:00:32.829 --> 00:00:37.536
when you have the correct action,
it will automatically trigger the water.

11
00:00:37.536 --> 00:00:41.218
So I think that would be
an interesting use case.

12
00:00:41.218 --> 00:00:45.248
So how do we pass parameters?

13
00:00:45.248 --> 00:00:48.764
Let's use this URL scheme again.

14
00:00:48.764 --> 00:00:54.662
And I want to go to the first plant,
and we want to do action.

15
00:00:54.662 --> 00:00:59.576
But we can pass whatever here but
I'm gonna do an action water,

16
00:00:59.576 --> 00:01:03.391
so this will look like URL
parameters on the web.

17
00:01:03.391 --> 00:01:06.046
For this to work with the terminal,

18
00:01:06.046 --> 00:01:10.129
we need to escape this question mark,
I think, okay.

19
00:01:16.589 --> 00:01:18.255
&gt;&gt; Kadi Kraman: And open on iOS.

20
00:01:21.199 --> 00:01:24.132
&gt;&gt; Kadi Kraman: Okay, I think this did
nothing because it was already open.

21
00:01:28.527 --> 00:01:30.546
&gt;&gt; Kadi Kraman: Okay, perfect.

22
00:01:30.546 --> 00:01:33.826
So here, what we want,

23
00:01:33.826 --> 00:01:39.730
we want the LocalSearchParams, I think.

24
00:01:39.730 --> 00:01:44.124
Let's console.log these,

25
00:01:46.299 --> 00:01:51.607
&gt;&gt; Kadi Kraman: See what we get, so open.

26
00:01:53.886 --> 00:01:57.676
&gt;&gt; Kadi Kraman: I get nothing,
I think I need to not be on the screen for

27
00:01:57.676 --> 00:01:58.525
it to work.

28
00:02:02.906 --> 00:02:07.762
&gt;&gt; Speaker 1: I think there's semicolon
until the sense was complaining.

29
00:02:07.762 --> 00:02:14.381
&gt;&gt; Kadi Kraman: Semicolons should be okay,
okay, let me just, there we go.

30
00:02:14.381 --> 00:02:20.659
[LAUGH] It was actually rendered here, let
me start the bundle, so npx expo start.

31
00:02:20.659 --> 00:02:24.572
I think cuz I had two tabs running,
cuz I started iOS and

32
00:02:24.572 --> 00:02:26.966
Android builds at the same time.

33
00:02:26.966 --> 00:02:34.368
Okay, so now we're in the right place and
let's do a deep link.

34
00:02:49.604 --> 00:02:54.605
&gt;&gt; Kadi Kraman: Okay, so we are getting
action, water, plantId 1, so

35
00:02:54.605 --> 00:03:01.814
the same useLocalSearchParams gives us our
action that we passed in as URL param.

36
00:03:01.814 --> 00:03:06.901
So what we could do is we could
do a little useEffect here.

37
00:03:10.922 --> 00:03:15.157
&gt;&gt; Kadi Kraman: So,
&gt;&gt; Kadi Kraman: Like

38
00:03:15.157 --> 00:03:20.277
this
&gt;&gt; Kadi Kraman: And

39
00:03:20.277 --> 00:03:25.577
we can do if params.action,

40
00:03:25.577 --> 00:03:28.757
if this is water.

41
00:03:31.345 --> 00:03:39.437
&gt;&gt; Kadi Kraman: Then,
let's do waterPlant and plantId.

42
00:03:42.641 --> 00:03:47.139
&gt;&gt; Kadi Kraman: So this is complaining
because the plantId, okay.

43
00:03:47.139 --> 00:03:50.162
So this could be an array
of strings as well,

44
00:03:50.162 --> 00:03:52.878
so let's just add a if statement here.

45
00:03:52.878 --> 00:03:58.541
So if typeof plantId is a string and

46
00:03:58.541 --> 00:04:03.434
it should always be a string.

47
00:04:03.434 --> 00:04:05.822
There's some kind of caveat somewhere.

48
00:04:05.822 --> 00:04:07.766
Okay, then we water the plant.

49
00:04:07.766 --> 00:04:12.715
[COUGH] So this plant has just
been watered because I had this

50
00:04:12.715 --> 00:04:15.247
screen open where I added it.

51
00:04:15.247 --> 00:04:19.605
Okay, let's look at a plant
that's never been watered.

52
00:04:19.605 --> 00:04:24.555
Let's create a new plant, I Want Water.

53
00:04:30.637 --> 00:04:31.451
&gt;&gt; Kadi Kraman: There we go.

54
00:04:31.451 --> 00:04:36.623
So I'm using incremental number,
so this will be Id number 3.

55
00:04:36.623 --> 00:04:42.216
So this plant has never been watered,
look how sad it is.

56
00:04:42.216 --> 00:04:48.798
So let's here do plantId 3.

57
00:04:50.602 --> 00:04:53.335
&gt;&gt; Kadi Kraman: There we go, and
the last water that has been updated.

58
00:04:53.335 --> 00:04:57.372
So it looked at our action
from our URL params.

59
00:04:57.372 --> 00:05:02.348
And something that actually I
didn't talk about in this course,

60
00:05:02.348 --> 00:05:06.972
but you can pass in parameters
between screens the same way.

61
00:05:06.972 --> 00:05:12.318
So here what we do, let's look at
somewhere where we have a link,

62
00:05:12.318 --> 00:05:14.568
so in the PlantCard.tsx.

63
00:05:14.568 --> 00:05:21.264
Okay, so example here, we have an href,
so I could do action water here,

64
00:05:21.264 --> 00:05:27.424
but it's kind of an inconvenient
way to pass new arrow parameters.

65
00:05:27.424 --> 00:05:32.709
So usually, if you want to pass
parameters between screens,

66
00:05:32.709 --> 00:05:35.970
you would do pathname, then params.

67
00:05:35.970 --> 00:05:40.002
So you could do action, water.

68
00:05:44.106 --> 00:05:47.991
&gt;&gt; Kadi Kraman: So I've added this to
the PlantCard, so just for testing.

69
00:05:47.991 --> 00:05:52.096
I guess so it's 37, which is now.

70
00:05:52.096 --> 00:05:56.221
So every time I open a page,
it will immediately water the plant.

71
00:05:56.221 --> 00:05:58.598
This is obviously not what we want, but

72
00:05:58.598 --> 00:06:03.000
just to show you that these params do
work and this is how you pass them in.

73
00:06:03.000 --> 00:06:05.027
Change this back to what we had before.

74
00:06:08.310 --> 00:06:14.356
&gt;&gt; Kadi Kraman: And the other thing when
you want to test these on a real device,

75
00:06:14.356 --> 00:06:19.619
on iOS, it is actually, for
once on iOS it is simpler.

76
00:06:19.619 --> 00:06:25.154
If you open Safari, then you can

77
00:06:25.154 --> 00:06:30.894
write your URL scheme in here, so

78
00:06:30.894 --> 00:06:37.058
you can do plantly//plant/1.

79
00:06:37.058 --> 00:06:39.855
And you'll get this prompt saying,
do you wanna open plantly?

80
00:06:39.855 --> 00:06:44.053
And you say yes, and then it deep
links into it, which is pretty handy.

81
00:06:44.053 --> 00:06:49.620
On Android, deep linking is more annoying.

82
00:06:49.620 --> 00:06:53.695
So if you type this into Google Chrome,
it doesn't work.

83
00:06:53.695 --> 00:06:59.475
And usually, what I've found is you
need a link, like a tag to click.

84
00:06:59.475 --> 00:07:02.718
So this seems a bit silly, but
actually on a real device,

85
00:07:02.718 --> 00:07:05.910
I've found this quite handy,
I have a link somewhere.

86
00:07:05.910 --> 00:07:11.495
If you use one of these websites
where you can live code some HTML.

87
00:07:11.495 --> 00:07:14.670
So did I add this?

88
00:07:16.971 --> 00:07:18.621
&gt;&gt; Kadi Kraman: I thought
I added one here.

89
00:07:22.220 --> 00:07:23.661
&gt;&gt; Kadi Kraman: There we go.

90
00:07:23.661 --> 00:07:28.404
So a website like this where you could

91
00:07:28.404 --> 00:07:32.535
just do an a tag, we go Click me.

92
00:07:32.535 --> 00:07:37.899
And then this will have an href,
which will be like plants.

93
00:07:41.744 --> 00:07:46.366
&gt;&gt; Kadi Kraman: That
was plantly//plants/1.

94
00:07:46.366 --> 00:07:49.474
So then you open this on
your Android phone, and

95
00:07:49.474 --> 00:07:51.891
you clicked it, then it would work.

96
00:07:51.891 --> 00:07:55.194
So it's a bit of a workaround.

97
00:07:55.194 --> 00:07:58.592
&gt;&gt; Kadi Kraman: And
the other thing that's worth knowing, so

98
00:07:58.592 --> 00:08:03.658
this is the kind of a basic insecure
implementation of deep linking.

99
00:08:03.658 --> 00:08:07.704
And for secure and
more integrated deep linking,

100
00:08:07.704 --> 00:08:11.182
you could look at universal and app links.

101
00:08:11.182 --> 00:08:16.461
So this will make your deep links
integrated with your website.

102
00:08:16.461 --> 00:08:22.012
So you know when you have things like
open this page on a mobile app and

103
00:08:22.012 --> 00:08:24.116
you will deep link into it.

104
00:08:24.116 --> 00:08:27.682
So this is basically how you do it.

105
00:08:27.682 --> 00:08:32.607
And it's quite involved, it's not
really a easily workshopable topic,

106
00:08:32.607 --> 00:08:35.899
you need to have a hosted website for
this to work.

107
00:08:35.899 --> 00:08:39.732
And you add the specific
files onto your website and

108
00:08:39.732 --> 00:08:44.547
then register your domain as
an associated domain in your app and

109
00:08:44.547 --> 00:08:49.108
then your app knows that it can
deep link between the domain.

110
00:08:49.108 --> 00:08:54.139
And then it will automatically look at
whether specific schemes are handled.

111
00:08:54.139 --> 00:08:59.409
So this is the documentation if you
want to read more about how it works.

