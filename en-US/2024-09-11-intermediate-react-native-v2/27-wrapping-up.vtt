WEBVTT

1
00:00:00.000 --> 00:00:03.909
&gt;&gt; Kadi Kraman: All right, we have reached
the end, congratulations everyone.

2
00:00:03.909 --> 00:00:08.992
I hope this has been interesting and
insightful and has put

3
00:00:08.992 --> 00:00:15.849
you on the way to building your own
production-ready apps with React Native.

4
00:00:15.849 --> 00:00:22.268
I was trying to figure out what to put in
this final word section, and I'm I decided

5
00:00:22.268 --> 00:00:27.960
to just add links that came to mind as
interesting things to look at next.

6
00:00:27.960 --> 00:00:32.064
So if you learn to measure things and
you're like, what should I look at next?

7
00:00:32.064 --> 00:00:36.079
This is a selection, so
there's not a particular theme here,

8
00:00:36.079 --> 00:00:40.416
of React Native libraries and
websites that might be interesting.

9
00:00:40.416 --> 00:00:46.328
So I've added the expo documentation, so
we have a huge amount of documentation for

10
00:00:46.328 --> 00:00:49.824
various things that you
can do in React Native, so

11
00:00:49.824 --> 00:00:54.176
in particular things that you
can do with expo SDK libraries.

12
00:00:54.176 --> 00:01:01.723
One thing to reference especially is under
reference we have all the SDK libraries.

13
00:01:01.723 --> 00:01:06.686
So if you're wondering what's
possible to do with React Native,

14
00:01:06.686 --> 00:01:10.684
then it's handy to know
that these libraries exist.

15
00:01:10.684 --> 00:01:16.206
And similarly, I'd like to link to
the official React Native documentation.

16
00:01:16.206 --> 00:01:18.943
So especially if you go to Guides or
Components.

17
00:01:22.338 --> 00:01:24.638
&gt;&gt; Kadi Kraman: So
this is a really nice resource for

18
00:01:24.638 --> 00:01:27.561
everything that is built
into React Native.

19
00:01:27.561 --> 00:01:28.991
So we covered a lot of it,

20
00:01:28.991 --> 00:01:32.605
but if you're wondering what
else is built into React Native,

21
00:01:32.605 --> 00:01:37.464
this is a great resource to go through and
see what exists and what properties exist.

22
00:01:37.464 --> 00:01:39.527
Then we have React Native directory.

23
00:01:39.527 --> 00:01:45.779
So this is a place for searching for
React Native apps that exist.

24
00:01:45.779 --> 00:01:51.453
So if you want to let's do video you can
have video metadata video processing

25
00:01:51.453 --> 00:01:57.305
video player so it will show you like a
handy how many downloads how many stars so

26
00:01:57.305 --> 00:02:01.673
it is a nice resource for
finding React Native libraries.

27
00:02:01.673 --> 00:02:03.549
Then we have Ignite.

28
00:02:03.549 --> 00:02:06.449
So now that you know how
to build React Native apps,

29
00:02:06.449 --> 00:02:08.820
you might want to use a template instead.

30
00:02:08.820 --> 00:02:15.474
So Ignite is built by Infinite Red, who
are a React Native consultancy in the US.

31
00:02:15.474 --> 00:02:18.273
They are absolute pros when
it comes to React Native.

32
00:02:18.273 --> 00:02:20.847
And this is their template
that they use for

33
00:02:20.847 --> 00:02:24.148
their own consultancy
whenever they build projects.

34
00:02:24.148 --> 00:02:27.648
So it's basically has all
the usual suspects for

35
00:02:27.648 --> 00:02:30.217
like things that they usually use.

36
00:02:30.217 --> 00:02:35.893
It is using Expo under the hood as well or
rather it is using Expo.

37
00:02:35.893 --> 00:02:40.386
So if you want to create a new project and
you want to start with a template rather

38
00:02:40.386 --> 00:02:43.873
than from scratch then this
might be something to look into.

39
00:02:43.873 --> 00:02:46.596
Then I added a link to Maestro.

40
00:02:46.596 --> 00:02:49.959
So this is a nice UI testing library for
React Native.

41
00:02:49.959 --> 00:02:54.119
So you might have heard of Detox,
which is also an option, but

42
00:02:54.119 --> 00:02:58.759
Maestro is kind of a newer version and
I think this is a something worth

43
00:02:58.759 --> 00:03:03.017
looking into if you need to do
kind of end-to-end UI testing.

44
00:03:03.017 --> 00:03:07.917
Then we have reanimated and
react-navate-gesture-handler.

45
00:03:07.917 --> 00:03:12.689
So if you are looking to incorporate
animations into your app, so

46
00:03:12.689 --> 00:03:17.919
especially things like swipe to delete or
making your buttons larger.

47
00:03:17.919 --> 00:03:19.339
I think swipe to delete
is a great example.

48
00:03:19.339 --> 00:03:22.716
Or creating your own image zoom component,

49
00:03:22.716 --> 00:03:28.203
then these two libraries used together
are like a match made in heaven.

50
00:03:28.203 --> 00:03:32.105
Then I had to link to
react-native-vision-camera, which is just

51
00:03:32.105 --> 00:03:36.560
a cool new library that was recently
released that you might want to check out.

52
00:03:36.560 --> 00:03:40.439
And there's also react-native-skia that
lets you do 3D graphics in React Native.

53
00:03:40.439 --> 00:03:44.842
React-native-bootsplash lets you
do animated splash animation,

54
00:03:44.842 --> 00:03:49.175
so rather than a static image,
you can have it animate into your app.

55
00:03:49.175 --> 00:03:57.762
The flash-list which is a more optimized
list components if flat list isn't enough.

56
00:03:57.762 --> 00:04:01.503
Then there's native-wind, which is
like tailwind but for React Native.

57
00:04:01.503 --> 00:04:05.920
So we built we used the built-in
styles throughout this course, but

58
00:04:05.920 --> 00:04:10.565
now that you know the built-in styles,
if you would like to step back and

59
00:04:10.565 --> 00:04:15.459
use like a tailwind-ish styling system,
you could check out Native Wind.

60
00:04:15.459 --> 00:04:21.346
And finally, tamagui, I thought was a good
example of a styling library and a UI kit.

61
00:04:21.346 --> 00:04:24.709
So if you want to use some
built-in components with styling,

62
00:04:24.709 --> 00:04:27.370
this might be something
too worth checking out.

63
00:04:27.370 --> 00:04:31.102
Do you have any general best practices for
deploying apps for

64
00:04:31.102 --> 00:04:34.559
clients to either store or
how to manage client apps?

65
00:04:34.559 --> 00:04:39.271
Kinda, for client apps make the clients
get their own Apple developer and

66
00:04:39.271 --> 00:04:41.933
Google developer accounts, 100%.

67
00:04:41.933 --> 00:04:46.458
So if you're you could in theory
publish something yourself and

68
00:04:46.458 --> 00:04:51.233
then transfer the app, but
I've personally never done it before,

69
00:04:51.233 --> 00:04:55.193
and you just want the client
to manage both the expense.

70
00:04:55.193 --> 00:04:59.135
You want to make sure that they are
creating the app using their own company

71
00:04:59.135 --> 00:05:01.754
accounts so
they're doing a business account.

72
00:05:01.754 --> 00:05:06.630
So definitely get the client
to create the accounts and

73
00:05:06.630 --> 00:05:11.082
give you the admin user so
you can manage the apps.

74
00:05:11.082 --> 00:05:15.321
&gt;&gt; Speaker 2: Regarding the privacy
policy like for example does Google write

75
00:05:15.321 --> 00:05:20.197
the privacy policy for you or do you
have to write your own privacy policy?

76
00:05:20.197 --> 00:05:21.884
&gt;&gt; Kadi Kraman: You have to write you own.

77
00:05:21.884 --> 00:05:27.196
And I think it can be any URL,
so I don't think they check

78
00:05:27.196 --> 00:05:32.523
that you own the website other
than like a sanity check.

79
00:05:32.523 --> 00:05:34.803
So you can just do like
a little website or

80
00:05:34.803 --> 00:05:38.843
maybe you had like a public notion page,
I'm not sure that would work.

81
00:05:38.843 --> 00:05:42.539
But it needs to be a published URL,
so potentially you could do it on

82
00:05:42.539 --> 00:05:46.565
GitHub pages, I've never tried, but
it needs to be a public URL, yes.

83
00:05:46.565 --> 00:05:49.825
&gt;&gt; Speaker 2: Do you have any
suggestions or techniques for

84
00:05:49.825 --> 00:05:54.472
sending out major or
minor updates to the app after deployment?

85
00:05:54.472 --> 00:05:58.937
Like between EAS and Transporter, is one
easier than the other for iOS updates?

86
00:06:01.771 --> 00:06:05.240
&gt;&gt; Kadi Kraman: One is not easier
than the other, that's all,

87
00:06:05.240 --> 00:06:09.245
they do the same thing,
to be honest, under the hood.

88
00:06:09.245 --> 00:06:14.796
So something that we didn't cover here,
but something that you can do,

89
00:06:14.796 --> 00:06:20.165
which you can't do with Native apps,
is that you can actually deliver

90
00:06:20.165 --> 00:06:25.898
over-the-air updates to your apps
if it's a JavaScript-only update.

91
00:06:25.898 --> 00:06:29.030
So we have a library for that, CS updates,

92
00:06:29.030 --> 00:06:33.991
so you might have heard of Codebush
from AppCenter from Microsoft.

93
00:06:33.991 --> 00:06:38.633
So it is like Codebush, basically,
well it is the same kind of concept.

94
00:06:38.633 --> 00:06:42.149
So with React Native,
because our app is a native app,

95
00:06:42.149 --> 00:06:45.743
a JavaScript bundle,
then we are able to, in locally,

96
00:06:45.743 --> 00:06:50.186
we're developing as we're updating
JavaScript bundle on the fly.

97
00:06:50.186 --> 00:06:52.635
You can use a similar
kinda thing in production,

98
00:06:52.635 --> 00:06:55.156
you can swap out the JavaScript
bundle on the fly.

99
00:06:55.156 --> 00:06:57.882
And that's what ES update does.

100
00:06:57.882 --> 00:07:01.034
And this will be Pretty much instant, but

101
00:07:01.034 --> 00:07:06.890
it does come with a caveat around you
then, as a developer are responsible for

102
00:07:06.890 --> 00:07:11.958
not pushing updates that will go
against the app store's policy.

103
00:07:11.958 --> 00:07:17.589
So technically you could push an update
that completely changes your app UI,

104
00:07:17.589 --> 00:07:21.487
but if you do that,
you are violating the policies for

105
00:07:21.487 --> 00:07:24.449
both Apple App and Play Store actually.

106
00:07:24.449 --> 00:07:26.660
And if the reviewer spots it,

107
00:07:26.660 --> 00:07:32.245
they're likely to ask you to remove
all the dynamic updates from your app.

108
00:07:32.245 --> 00:07:36.404
So it's kind of fine to use it for,
like you mentioned,

109
00:07:36.404 --> 00:07:40.122
quick bug fixes if something
is really wrong, but

110
00:07:40.122 --> 00:07:45.079
it shouldn't be used for like very
large updates if you want to make

111
00:07:45.079 --> 00:07:48.911
sure you retain the ability
to use it in the future.

112
00:07:48.911 --> 00:07:51.438
&gt;&gt; Speaker 2: It's accessibility
built in to React Native or

113
00:07:51.438 --> 00:07:53.143
are there any best practices for

114
00:07:53.143 --> 00:07:57.198
making sure a native app is accessible
in the same way you would for a web app?

115
00:07:57.198 --> 00:07:58.920
&gt;&gt; Kadi Kraman: That is
a really great question.

116
00:07:58.920 --> 00:08:03.837
So there are accessibility features
built into react native, but

117
00:08:03.837 --> 00:08:06.134
they're a little bit hidden.

118
00:08:06.134 --> 00:08:11.610
There is a library, React Native AMA.

119
00:08:11.610 --> 00:08:16.522
So AMA stands for
accessible mobile applications, and

120
00:08:16.522 --> 00:08:21.747
it is the only library that I
know of that is specifically for

121
00:08:21.747 --> 00:08:24.691
accessibility in React Native.

122
00:08:24.691 --> 00:08:29.748
It has a bunch of documentation
that you can use to reference

123
00:08:29.748 --> 00:08:36.034
to like understand what the good
practices are, have this website here.

124
00:08:36.034 --> 00:08:41.400
You don't have to use
this library necessarily,

125
00:08:41.400 --> 00:08:48.310
but this is a really good resource
to show you what's possible.

126
00:08:48.310 --> 00:08:51.558
So for all pressable elements,
for example,

127
00:08:51.558 --> 00:08:56.476
adding this accessible true
accessibility label accessibility hint

128
00:08:56.476 --> 00:09:01.156
to make sure what gets read out
throughout during a screen reader.

129
00:09:01.156 --> 00:09:03.735
But then if you do wanna use this library,

130
00:09:03.735 --> 00:09:06.621
it basically wraps
the existing components.

131
00:09:06.621 --> 00:09:11.931
So you would import these components from
React Native AMA instead of React Native,

132
00:09:11.931 --> 00:09:15.988
and then it enforces you to write
certain accessibility props.

133
00:09:15.988 --> 00:09:21.289
And it also highlights
if you have a component

134
00:09:21.289 --> 00:09:27.299
that hasn't had direct
accessibility props set.

135
00:09:27.299 --> 00:09:28.988
I think that's pretty much it for me.

136
00:09:28.988 --> 00:09:32.004
Thank you very much for
joining me on this course.

137
00:09:32.004 --> 00:09:37.551
&gt;&gt; Audience: [APPLAUSE]

