WEBVTT

1
00:00:00.200 --> 00:00:04.520
&gt;&gt; Kadi Kraman: Now we're gonna look
at a couple of navigation methods.

2
00:00:04.520 --> 00:00:06.643
So first, let's look at bottom tabs.

3
00:00:06.643 --> 00:00:09.120
We wanna set up a bottom tab
navigator with two tabs.

4
00:00:10.440 --> 00:00:14.840
As I mentioned, every file in the app
folder is a screen of your app.

5
00:00:14.840 --> 00:00:18.200
And then the layout files describe
how the app should be laid out.

6
00:00:18.200 --> 00:00:23.114
So, to add a second screen,
let's do a new file in

7
00:00:23.114 --> 00:00:28.152
our app folder, and
let's call it profile.tsx.

8
00:00:31.776 --> 00:00:36.543
&gt;&gt; Kadi Kraman: In this case,
let's just copy this placeholder screen.

9
00:00:36.543 --> 00:00:41.022
So this will just render a view
with some center align text.

10
00:00:42.927 --> 00:00:45.827
&gt;&gt; Kadi Kraman: Now in our layout file,
right now,

11
00:00:45.827 --> 00:00:49.316
we are rendering these screens in a stack.

12
00:00:49.316 --> 00:00:53.731
So this profile screen, even though we
haven't rendered it, it actually exists in

13
00:00:53.731 --> 00:00:57.855
our state, we could navigate to it, but
we want to render this as bottom tabs.

14
00:00:57.855 --> 00:01:01.095
So let's do change this stack.

15
00:01:01.095 --> 00:01:03.415
So this was actually very difficult.

16
00:01:03.415 --> 00:01:06.502
This is something that would be very
difficult to do if you were not using

17
00:01:06.502 --> 00:01:07.465
Expo Router.

18
00:01:07.465 --> 00:01:12.940
But because we are, we just select all
these stacks and change them to tabs.

19
00:01:16.904 --> 00:01:18.041
&gt;&gt; Kadi Kraman: There we go.

20
00:01:21.864 --> 00:01:28.302
&gt;&gt; Kadi Kraman: And,
&gt;&gt; Kadi Kraman: Let's

21
00:01:28.302 --> 00:01:32.284
create another screen here for
the profile tab.

22
00:01:32.284 --> 00:01:35.856
So let's do profile and call it profile.

23
00:01:39.974 --> 00:01:41.660
&gt;&gt; Kadi Kraman: I think
I have three tabs here.

24
00:01:41.660 --> 00:01:43.752
I think this is a caching problem.

25
00:01:43.752 --> 00:01:49.965
So let's,
&gt;&gt; Kadi Kraman: Close the bundler,

26
00:01:49.965 --> 00:01:54.484
and npx expo start, and do reset cache.

27
00:01:58.722 --> 00:02:00.016
&gt;&gt; Kadi Kraman: And reload.

28
00:02:05.385 --> 00:02:08.160
&gt;&gt; Kadi Kraman: Okay, yes,
it was a caching problem.

29
00:02:08.160 --> 00:02:14.959
So you should have a two tab layout
with a home and a profile screen, yes.

30
00:02:14.959 --> 00:02:19.056
&gt;&gt; Audience 1: Are tabs registered without
even having to put them into the layout?

31
00:02:19.056 --> 00:02:22.356
&gt;&gt; Kadi Kraman: Yes, so that is because
that is actually a really great thing to

32
00:02:22.356 --> 00:02:23.425
call out.

33
00:02:23.425 --> 00:02:28.491
So if you used React Navigation
in the past, then you're thinking

34
00:02:28.491 --> 00:02:34.245
that the screens only exist if you
configured them in this layout file.

35
00:02:34.245 --> 00:02:35.645
And that is incorrect.

36
00:02:35.645 --> 00:02:41.002
The screens exist as soon as you
add them to the file system.

37
00:02:41.002 --> 00:02:45.924
So there is exactly one layout file
per folder, at most, one layout file,

38
00:02:45.924 --> 00:02:48.042
I guess I should say.

39
00:02:48.042 --> 00:02:51.767
If you have a layout file,
if I actually just did just tabs and

40
00:02:51.767 --> 00:02:55.512
didn't define the screens at all,
they would both be here.

41
00:02:56.762 --> 00:02:58.913
And if I add a third tab,
they would both be here.

42
00:02:58.913 --> 00:03:03.826
So this layout file tells you what the
screens inside this folder are going to

43
00:03:03.826 --> 00:03:04.910
be rendered as.

44
00:03:06.040 --> 00:03:08.581
And then the reason that
we're defining them is so

45
00:03:08.581 --> 00:03:11.080
that we could pass in additional options.

46
00:03:11.080 --> 00:03:15.996
So we can configure the title,
we can configure how it renders,

47
00:03:15.996 --> 00:03:18.917
we can add some header buttons, etc.

48
00:03:18.917 --> 00:03:21.683
And lastly,
let's add some icons to the bottom tabs,

49
00:03:21.683 --> 00:03:23.743
that's a pretty common layout as well.

50
00:03:23.743 --> 00:03:27.450
So we're going to be using
Expo vector icons for that.

51
00:03:27.450 --> 00:03:32.700
So Expo vector icons is built on top
of React Native vector icons and

52
00:03:32.700 --> 00:03:38.998
it's just a very handy library for quickly
getting vector icons into your app.

53
00:03:41.590 --> 00:03:47.211
&gt;&gt; Kadi Kraman: There is also this webpage
that lets you browse available icons.

54
00:03:47.211 --> 00:03:51.036
So if you want to do home,
let's say, you can search here and

55
00:03:51.036 --> 00:03:56.551
it gives you the instructions on how to
import the icon family and how to use it.

56
00:03:56.551 --> 00:03:58.978
Now let's install
the vector icons library.

57
00:04:07.858 --> 00:04:09.838
&gt;&gt; Kadi Kraman: And we start our bundler.

58
00:04:20.374 --> 00:04:21.924
&gt;&gt; Kadi Kraman: But
you can choose different icons.

59
00:04:21.924 --> 00:04:26.856
For me, I chose this little leaf.

60
00:04:26.856 --> 00:04:27.844
The leaf is not here.

61
00:04:29.334 --> 00:04:30.734
So I think it was this leaf.

62
00:04:32.194 --> 00:04:34.945
I'm trying to use the same exact
icons as I did in the example.

63
00:04:34.945 --> 00:04:39.080
Yes, so I've got this leaf from Entypo so

64
00:04:39.080 --> 00:04:45.199
we can import,
&gt;&gt; Kadi Kraman: The icon family and

65
00:04:45.199 --> 00:04:49.445
render it in a component.

66
00:04:49.445 --> 00:04:53.615
So this will be for our home tab bar.

67
00:04:53.615 --> 00:04:58.346
And in our options,
the way that we render a custom

68
00:04:58.346 --> 00:05:02.186
tab bar is we use a tab bar icon property.

69
00:05:03.226 --> 00:05:04.616
And this will be a function.

70
00:05:05.796 --> 00:05:09.408
And you can render whatever here, you
can render text, you can render a view.

71
00:05:09.408 --> 00:05:12.033
In this case, let's render this leaf.

72
00:05:19.974 --> 00:05:23.995
&gt;&gt; Kadi Kraman: Okay, and
I'll do the other one as well.

73
00:05:23.995 --> 00:05:29.918
So I think I used user from Feather.

74
00:05:36.946 --> 00:05:38.212
&gt;&gt; Kadi Kraman: There we go.

75
00:05:38.212 --> 00:05:41.333
I think I used this one, so
we'll copy this as well,

76
00:05:44.632 --> 00:05:46.509
&gt;&gt; Kadi Kraman: And for our profile page,

77
00:05:46.509 --> 00:05:54.736
we'll do tabBarIcon,
&gt;&gt; Kadi Kraman: And

78
00:05:54.736 --> 00:05:55.999
render this little icon.

79
00:05:58.671 --> 00:06:02.735
&gt;&gt; Kadi Kraman: Okay, so you'll notice
that the tab bar icons aren't changing

80
00:06:02.735 --> 00:06:04.748
color when we are navigating.

81
00:06:04.748 --> 00:06:08.102
And that's because we are not using
the shared color that is configured.

82
00:06:08.102 --> 00:06:13.023
So we can actually de-structure it
from this tab bar icon function.

83
00:06:13.023 --> 00:06:15.618
So we have size and color.

84
00:06:17.589 --> 00:06:20.841
&gt;&gt; Kadi Kraman: And
we can pass these into our icon component.

85
00:06:25.199 --> 00:06:28.710
&gt;&gt; Kadi Kraman: And
we'll do the same for the profile icon.

86
00:06:38.430 --> 00:06:42.488
&gt;&gt; Kadi Kraman: Okay, and then lastly,

87
00:06:42.488 --> 00:06:47.325
we can configure this color.

88
00:06:49.315 --> 00:06:53.704
&gt;&gt; Kadi Kraman: So,
&gt;&gt; Kadi Kraman: I've

89
00:06:53.704 --> 00:06:58.721
chosen this beautiful green color, so

90
00:06:58.721 --> 00:07:05.258
on the top level tabs,
you can do screenOptions and

91
00:07:05.258 --> 00:07:08.764
tabBarActiveTintColor.

92
00:07:10.997 --> 00:07:12.206
&gt;&gt; Kadi Kraman: And pass in the screen.

93
00:07:13.907 --> 00:07:16.377
&gt;&gt; Kadi Kraman: I noticed that
this will change the green for

94
00:07:16.377 --> 00:07:18.191
both of them as well as the text.

95
00:07:19.711 --> 00:07:21.742
And in this case I don't
think we need to text, so

96
00:07:21.742 --> 00:07:23.442
we can actually configure this as well.

97
00:07:23.442 --> 00:07:29.852
So we can do tabBarShowLabel to false.

98
00:07:33.424 --> 00:07:35.158
&gt;&gt; Kadi Kraman: To both home and profile.

99
00:07:37.000 --> 00:07:38.739
&gt;&gt; Kadi Kraman: And
then we just have to tap our icons.

100
00:07:39.759 --> 00:07:43.355
And the last thing, this is just
a tidy thing that I always do when I'm

101
00:07:43.355 --> 00:07:47.136
using built in styles is to
create a top level theme file.

102
00:07:47.136 --> 00:07:50.526
And then constant that we're
gonna use across our application,

103
00:07:50.526 --> 00:07:53.789
just pull them into a theme file so
we're not having to redefine

104
00:07:53.789 --> 00:07:57.137
the same hex code everywhere and
also makes it easier to change.

105
00:07:57.137 --> 00:08:02.349
So let's do an export const theme and

106
00:08:02.349 --> 00:08:09.251
let's pull this green color and
do colorGreen.

107
00:08:11.995 --> 00:08:14.689
&gt;&gt; Kadi Kraman: And
let's also do colorWhite.

108
00:08:16.187 --> 00:08:17.729
&gt;&gt; Kadi Kraman: So this will be fff.

109
00:08:19.937 --> 00:08:21.674
&gt;&gt; Kadi Kraman: And
this is a convention, but

110
00:08:21.674 --> 00:08:26.051
I pretty much use it on all my projects
if I'm using the built-in styles for

111
00:08:26.051 --> 00:08:28.707
React Native, and it's just really handy.

112
00:08:28.707 --> 00:08:33.814
Usually I actually do spacings here
as well, so I would do spacing10.

113
00:08:33.814 --> 00:08:35.179
Actually, I don't tend to use 10.

114
00:08:35.179 --> 00:08:40.870
Spacing12 would be 12, and then instead
of using 12 as a value in my styles,

115
00:08:40.870 --> 00:08:45.750
I would use it from the theme and
I do the same for the font family, etc.

116
00:08:45.750 --> 00:08:50.684
And it's just a nice overview, it makes
your app more consistent, because if you

117
00:08:50.684 --> 00:08:55.920
have spacing 12 and 16 defined here,
you're likely not going to do spacing 13.

118
00:08:55.920 --> 00:08:58.229
In this case,
we're just going to use it for the colors.

119
00:08:59.709 --> 00:09:05.520
And let's update our layout
to now use theme.colorGreen.

120
00:09:08.197 --> 00:09:11.689
&gt;&gt; Kadi Kraman: And I think we had
a color in our index file as well.

121
00:09:11.689 --> 00:09:15.111
So this will be theme.colorWhite.

122
00:09:17.866 --> 00:09:23.144
&gt;&gt; Kadi Kraman: And on profile,
let's do theme.colorWhite.

123
00:09:26.283 --> 00:09:27.050
&gt;&gt; Kadi Kraman: Lovely, so

124
00:09:27.050 --> 00:09:32.047
now we have a two tab layout without the
tab bar label but with two green icons.

125
00:09:33.995 --> 00:09:38.137
&gt;&gt; Audience 2: Can the label be
conditionally shown when the tab is

126
00:09:38.137 --> 00:09:38.913
active?

127
00:09:41.366 --> 00:09:45.848
&gt;&gt; Kadi Kraman: tabBarLabel,
&gt;&gt; Kadi Kraman: Yes, so

128
00:09:45.848 --> 00:09:51.908
there's a function here that I'm
assuming will render tab bar label,

129
00:09:51.908 --> 00:09:54.036
so if I render some text.

130
00:10:05.376 --> 00:10:10.454
&gt;&gt; Kadi Kraman: I was expecting this to,
it's because of the label shown false.

131
00:10:17.155 --> 00:10:18.786
&gt;&gt; Kadi Kraman: Okay, there we go.

132
00:10:18.786 --> 00:10:20.923
This actually does exactly
what you mentioned.

133
00:10:22.233 --> 00:10:25.133
So I've added it to Hello.

134
00:10:25.133 --> 00:10:30.123
And it's a tab bar label, and it only
shows when I'm highlighting over it.

135
00:10:30.123 --> 00:10:32.523
So you can use this tabBarLabel function.

136
00:10:32.523 --> 00:10:33.922
I think it has props as well.

137
00:10:33.922 --> 00:10:36.568
So the props that it has is like,
whether the tab bar is focused or

138
00:10:36.568 --> 00:10:39.905
whether you're currently hovering over it,
and then the color.

139
00:10:39.905 --> 00:10:41.174
That we're using it here.

140
00:10:43.178 --> 00:10:45.154
&gt;&gt; Audience 2: And
are you able to animate between tabs?

141
00:10:47.662 --> 00:10:53.645
&gt;&gt; Kadi Kraman: Yes, but you would build
your own, basically, so you can pass in.

142
00:10:53.645 --> 00:10:55.936
Yeah, I forget what
the function is exactly,

143
00:10:55.936 --> 00:10:59.832
but you can pass in a custom tab bar and
then you can do whatever you want with it.

144
00:10:59.832 --> 00:11:02.804
You can make it floaty,
you can make it animate.

145
00:11:02.804 --> 00:11:04.463
All the rules can go out the window.

