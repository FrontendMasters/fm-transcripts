WEBVTT

1
00:00:00.250 --> 00:00:03.613
&gt;&gt; Kadi Kraman: The last two topics that I
wanted to cover, we're obviously going for

2
00:00:03.613 --> 00:00:04.927
the heaviest topics last.

3
00:00:04.927 --> 00:00:09.831
But this is something that is
really important to understand as

4
00:00:09.831 --> 00:00:14.656
a native mobile developer,
especially coming from the web.

5
00:00:14.656 --> 00:00:19.561
And the reason I wanted to just cover
it briefly, at least shallowly,

6
00:00:19.561 --> 00:00:22.984
is because you don't
know what you don't know.

7
00:00:22.984 --> 00:00:26.870
And this is giving you an idea of what
build signing is and how it works, so

8
00:00:26.870 --> 00:00:30.376
that if this is the first time
you're hearing about it at least you

9
00:00:30.376 --> 00:00:31.994
know what's to Google next.

10
00:00:31.994 --> 00:00:38.073
In order for any apps to be installable on
a physical device they need to be signed.

11
00:00:38.073 --> 00:00:42.353
So build signing is a security
mechanism and the idea is, well,

12
00:00:42.353 --> 00:00:48.136
the goal is to protect users from
potentially malicious applications.

13
00:00:48.136 --> 00:00:50.644
Both iOS and
Android have build signing, but

14
00:00:50.644 --> 00:00:54.216
the process is completely
different between both of them.

15
00:00:54.216 --> 00:00:59.196
On Android, builds are signed
using an Android keystore.

16
00:00:59.196 --> 00:01:04.860
So this is a cryptographic container for
your keys.

17
00:01:04.860 --> 00:01:08.960
The keystore can be created on a Mac,
Windows, or Linux.

18
00:01:10.060 --> 00:01:16.610
And actually, if we look at our Android
build.gradle, we can see a keystore.

19
00:01:16.610 --> 00:01:20.876
So build.gradle is here.

20
00:01:21.996 --> 00:01:25.249
And if we look at the build config.

21
00:01:27.814 --> 00:01:31.526
&gt;&gt; Kadi Kraman: There you go, so
there is a debug keystore here.

22
00:01:31.526 --> 00:01:38.546
So this is the keystone necessary to run
this Android app on an Android device.

23
00:01:38.546 --> 00:01:43.370
So if you plugged your android phone into
your computer you could run this on your

24
00:01:43.370 --> 00:01:44.381
android phone.

25
00:01:44.381 --> 00:01:46.112
So it would build up a apk and

26
00:01:46.112 --> 00:01:49.735
you can also run it on an emulator
because of this reason.

27
00:01:49.735 --> 00:01:54.607
By the way we talk about like debug
keystores and upload keystores and

28
00:01:54.607 --> 00:01:57.641
production keystores release keystore.

29
00:01:57.641 --> 00:02:02.036
And when I first got started I
thought they were like different types

30
00:02:02.036 --> 00:02:06.817
of keystores but they're not,
it's like having a production API key and

31
00:02:06.817 --> 00:02:07.683
dev API key.

32
00:02:07.683 --> 00:02:11.230
They're the same kind of thing it's
just one you should keep more safe than

33
00:02:11.230 --> 00:02:12.191
the other.

34
00:02:12.191 --> 00:02:17.154
So for the release build you'd
usually create a separate keystore and

35
00:02:17.154 --> 00:02:19.864
we call it the upload keystore.

36
00:02:19.864 --> 00:02:24.572
So, originally, you would have a release
keystore for your release build, and

37
00:02:24.572 --> 00:02:29.144
then that's the one that you sign the
build that you upload to Google Play, and

38
00:02:29.144 --> 00:02:32.554
then you would always need to
sign with the same keystore.

39
00:02:33.784 --> 00:02:37.159
And a couple of years ago,
Google actually migrated off it, and

40
00:02:37.159 --> 00:02:39.780
they managed Google Managed Build Signing.

41
00:02:39.780 --> 00:02:41.530
You can opt out of it, but you shouldn't.

42
00:02:42.690 --> 00:02:46.953
The reason that this is really handy
is because previously, if you for

43
00:02:46.953 --> 00:02:49.130
some reason, lost this keystore.

44
00:02:49.130 --> 00:02:54.222
So say that you had someone build your app
ages ago, and they've left the company,

45
00:02:54.222 --> 00:02:59.196
and they were the only ones that had the
keystore, and you wiped their computer.

46
00:02:59.196 --> 00:03:02.709
There is no way to publish an update for
that app.

47
00:03:04.049 --> 00:03:08.025
So for that reason, well,
there are probably more reasons, but

48
00:03:08.025 --> 00:03:11.207
that was the main reason
that I think Google actually

49
00:03:11.207 --> 00:03:13.539
decided to take on the build signing.

50
00:03:13.539 --> 00:03:18.289
So now the actual production
keys are managed by Google.

51
00:03:18.289 --> 00:03:22.356
So you still need a keystone but we call
it the upload keystore because it is

52
00:03:22.356 --> 00:03:26.415
the keystore that Google validates
that this app came from you.

53
00:03:26.415 --> 00:03:31.095
So you still sign it, but it is not
the keystore used when signing a build

54
00:03:31.095 --> 00:03:37.265
delivered through Google play to the
user's device, so that's what that means.

55
00:03:37.265 --> 00:03:42.899
So nowadays if you use Google Manage build
signing and you lose your upload keystore.

56
00:03:42.899 --> 00:03:46.030
Then you have to contact customer support,
but

57
00:03:46.030 --> 00:03:51.949
it is possible to get this keystore reset
so you won't lose your app forever.

58
00:03:51.949 --> 00:03:55.959
On iOS, things are much more complicated.

59
00:03:57.759 --> 00:04:03.074
I think I was several years into
my React Native developer journey

60
00:04:03.074 --> 00:04:08.737
before I felt that I really
understand build signing on iOS.

61
00:04:08.737 --> 00:04:12.325
And these days,
I can write this down from memory, but

62
00:04:12.325 --> 00:04:17.395
I've had many goals of trying to explain
how it works because there's just so

63
00:04:17.395 --> 00:04:20.685
many bits and
it It feels unnecessarily complex.

64
00:04:21.775 --> 00:04:27.705
The main thing you need to know is that
there are three types of builds for iOS.

65
00:04:27.705 --> 00:04:33.115
There is a development build,
an ad hoc build, and a production build.

66
00:04:33.115 --> 00:04:40.799
So here is a graphic that I created to
try to illustrate the things that exist.

67
00:04:44.039 --> 00:04:46.919
So you will have an app ID.

68
00:04:46.919 --> 00:04:48.319
So this is something that we set up.

69
00:04:48.319 --> 00:04:52.759
We had to choose our app ID when we
run pre-build for the first time.

70
00:04:52.759 --> 00:04:56.519
And an app ID is a unique identifier for
your app.

71
00:04:57.629 --> 00:05:01.419
And it's usually like get reverse domain,
but you can call you can do it whatever,

72
00:05:01.419 --> 00:05:03.059
but it needs to be globally unique.

73
00:05:05.589 --> 00:05:12.129
And all these provisioning profiles that
you generate are tied to your app ID.

74
00:05:12.129 --> 00:05:15.041
So you can't sign a different build,

75
00:05:15.041 --> 00:05:20.688
a build with a different app ID using
This app's provisioning profiles.

76
00:05:23.068 --> 00:05:25.257
So we have three provisioning profiles and

77
00:05:25.257 --> 00:05:28.368
they correspond to the three
types of builds that you can do.

78
00:05:30.068 --> 00:05:33.498
The first one is the development build.

79
00:05:33.498 --> 00:05:36.978
And the development build,
you can only do it via Xcode.

80
00:05:36.978 --> 00:05:41.567
So if I open Xcode and I open, so

81
00:05:41.567 --> 00:05:49.272
it's open existing project and
code, plantly.

82
00:05:49.272 --> 00:05:53.302
So if you ever need to open
a React Native project in Xcode,

83
00:05:53.302 --> 00:05:57.742
the best thing to do is you just
select the whole iOS folder.

84
00:05:57.742 --> 00:06:01.317
Don't try to like figure out which file
to open, open the whole iOS folder and

85
00:06:01.317 --> 00:06:02.643
then it opens it correctly.

86
00:06:02.643 --> 00:06:07.958
So here,
if we go to the signing capabilities, but

87
00:06:07.958 --> 00:06:15.250
you do need to log in, and then if you
can log into any Apple ID account,

88
00:06:15.250 --> 00:06:19.720
it doesn't need to be delivered account.

89
00:06:19.720 --> 00:06:22.788
And then you get access
to this personal team and

90
00:06:22.788 --> 00:06:27.466
with this personal team you can do
a limited amount of development builds

91
00:06:27.466 --> 00:06:30.546
via Xcode and
that's the only way you can do it.

92
00:06:31.966 --> 00:06:35.767
It is restricted for example you can't
use push notifications with it so

93
00:06:35.767 --> 00:06:39.878
if you add push notifications to your app
you need to do a development build with

94
00:06:39.878 --> 00:06:42.333
A developer account,
so it is still limited.

95
00:06:46.075 --> 00:06:49.035
&gt;&gt; Kadi Kraman: Right, so
that is the development build.

96
00:06:49.035 --> 00:06:54.039
The ad hoc build allows installing
on specific iOS devices

97
00:06:54.039 --> 00:06:58.540
that need to be registered
on the App Store Connect.

98
00:06:58.540 --> 00:07:04.373
So you can have, I think,
up to 100 iOS devices at any one time.

99
00:07:04.373 --> 00:07:10.700
And devices have this UDID, which you
can get if you plug your phone in and

100
00:07:10.700 --> 00:07:15.057
look at the phone settings,
the stats in finder,

101
00:07:15.057 --> 00:07:19.403
you can find your udid and
you basically this.

102
00:07:19.403 --> 00:07:24.016
The devices by UDID will be tied
to this ad hoc certificate and

103
00:07:24.016 --> 00:07:26.639
they use it to sign your build, and

104
00:07:26.639 --> 00:07:31.443
then that build can be installed
on those particular devices.

105
00:07:34.323 --> 00:07:38.154
So for the ad hoc build,
we use the distribution certificate so

106
00:07:38.154 --> 00:07:40.670
these all go together, so there we go.

107
00:07:40.670 --> 00:07:42.796
So for development, so the one with Xcode,

108
00:07:42.796 --> 00:07:46.540
we use the development certificate and
development provisioning profile.

109
00:07:47.880 --> 00:07:50.993
And then for both ad hoc and
distribution builds, so

110
00:07:50.993 --> 00:07:55.170
these are the builds that are installable
stand alone without Xcode,

111
00:07:55.170 --> 00:07:59.060
you can download a bundle and
install the regular device.

112
00:07:59.060 --> 00:08:03.130
Those Both use the distribution
signing certificate.

113
00:08:03.130 --> 00:08:08.078
If you do use the EAS CLI,
I mentioned that it handles

114
00:08:08.078 --> 00:08:12.475
bill signing for you and
it is pretty magical.

115
00:08:12.475 --> 00:08:19.932
Let me just show you how it works.

116
00:08:26.156 --> 00:08:30.763
&gt;&gt; Kadi Kraman: So, one thing to note
that unless I add the simulator true,

117
00:08:30.763 --> 00:08:33.619
all builds, built using the ESCLI,

118
00:08:33.619 --> 00:08:39.071
including the development build,
are using the ad hoc certificate.

119
00:08:39.071 --> 00:08:40.799
Forget.

120
00:08:40.799 --> 00:08:46.343
This means that in order to build an iOS
build with EAS that runs on your device,

121
00:08:46.343 --> 00:08:49.199
you do need an Apple developer account.

122
00:08:51.429 --> 00:08:53.989
And this is because you
need Xcode to build it, so

123
00:08:53.989 --> 00:08:56.569
it's very difficult to do on the cloud.

124
00:08:56.569 --> 00:08:59.712
And again, this is why when
you're doing development locally.

125
00:08:59.712 --> 00:09:01.262
You don't have to have
a developer account.

126
00:09:01.262 --> 00:09:05.933
It is handy to be able to have your
local development environment set up so

127
00:09:05.933 --> 00:09:09.392
you don't need an apple developer account.

128
00:09:09.392 --> 00:09:15.008
So let's do a preview build.

129
00:09:15.008 --> 00:09:17.152
So we have ES already set up.

130
00:09:17.152 --> 00:09:22.565
So if I do eas build Profile

131
00:09:22.565 --> 00:09:28.238
preview and platform iOS.

132
00:09:28.238 --> 00:09:33.468
Before I trigger this, so
preview build will be this one.

133
00:09:33.468 --> 00:09:37.760
It needs a distribution certificate and
the ad hoc provisioning profile.

134
00:09:37.760 --> 00:09:45.674
So if I run this, it actually prompts me
to log into my Apple developer account.

135
00:09:50.350 --> 00:09:53.898
&gt;&gt; Kadi Kraman: And so something I
did cuz I've never run this before,

136
00:09:53.898 --> 00:09:58.701
it actually registered my bundle
identifier on App Store Connect for me.

137
00:09:58.701 --> 00:10:04.380
So now if I If I go back
to Certificates and

138
00:10:04.380 --> 00:10:09.332
Identifiers, then there you go.

139
00:10:09.332 --> 00:10:12.812
So we actually have our
new plantly identifier.

140
00:10:12.812 --> 00:10:17.283
So this is a prerequisite to being
able to generate any certificates,

141
00:10:17.283 --> 00:10:20.031
because they are tied against this app ID.

142
00:10:20.031 --> 00:10:24.057
And now this is asking if I
want to reuse a distribution

143
00:10:24.057 --> 00:10:27.181
certificate that I already have.

144
00:10:27.181 --> 00:10:29.101
So this is, again,
something to bear in mind.

145
00:10:29.101 --> 00:10:33.701
So usually each account should only
have one distribution certificate.

146
00:10:33.701 --> 00:10:37.713
So even if you have ten apps on
your Apple developer account, for

147
00:10:37.713 --> 00:10:41.073
distribution they should
use the same certificate.

148
00:10:44.357 --> 00:10:49.206
&gt;&gt; Kadi Kraman: And
now it's asking me want to reuse it?

149
00:10:49.206 --> 00:10:51.008
So let's say yes.

150
00:10:51.008 --> 00:10:55.808
Okay, so this is an ad hoc build,
and as I mentioned,

151
00:10:55.808 --> 00:11:02.784
you need to specifically say which
devices you want to include in it.

152
00:11:02.784 --> 00:11:05.324
So I've registered a bunch
of devices already.

153
00:11:07.974 --> 00:11:12.914
If you haven't, this will also
prompt you to register new devices.

154
00:11:12.914 --> 00:11:16.157
So you can do it via QR code or

155
00:11:16.157 --> 00:11:21.374
you can manually pass in a, Serial number.

156
00:11:24.400 --> 00:11:28.574
&gt;&gt; Kadi Kraman: So now this has created
my ad hoc provisioning profile.

157
00:11:32.778 --> 00:11:39.496
&gt;&gt; Kadi Kraman: And if I go here,
&gt;&gt; Kadi Kraman: So,

158
00:11:45.214 --> 00:11:46.186
&gt;&gt; Kadi Kraman: Okay, so

159
00:11:46.186 --> 00:11:50.563
I think it's not here until we've built.

160
00:11:54.795 --> 00:11:56.004
&gt;&gt; Kadi Kraman: There it is.

161
00:11:56.004 --> 00:11:58.787
Okay, so this is the one that was created.

162
00:11:58.787 --> 00:12:06.971
Another thing to bear in mind is that
when you use specific services on Apple.

163
00:12:06.971 --> 00:12:11.201
So if you build an app and
you need to add what's a common one here?

164
00:12:12.421 --> 00:12:18.096
I think like push notifications,
like on maps I think there is push Yeah,

165
00:12:18.096 --> 00:12:24.210
get push notifications, those are enabled
by default, sign in by Apple.

166
00:12:24.210 --> 00:12:29.220
So these are like specific,
we call them capabilities.

167
00:12:30.230 --> 00:12:35.592
Then these are registered in your app
identifier and you need to rebuild your

168
00:12:35.592 --> 00:12:41.477
app with the provisioning profile that's
been updated since these were changed.

169
00:12:41.477 --> 00:12:47.307
It's a bit tedious, if you're using eas
you shouldn't update this manually ever.

170
00:12:47.307 --> 00:12:51.128
And the great thing is that the next time
you build, if you add a new library or

171
00:12:51.128 --> 00:12:55.013
new capability, the next time you build,
it'll automatically CLI will say

172
00:12:55.013 --> 00:12:59.287
we've synced your capabilities, so
we'll do it automatically, which is great.

173
00:13:02.094 --> 00:13:07.414
And just to call that, so
I've used the cloud builds, but

174
00:13:07.414 --> 00:13:12.519
if you put--local at the end
of any eas build command,

175
00:13:12.519 --> 00:13:19.269
it will run on your local machine, so
it will do exactly the same thing if.

176
00:13:19.269 --> 00:13:23.960
Will do the credentials, it will ask me
to log into my Apple account and it will,

177
00:13:23.960 --> 00:13:27.589
there you go,
it actually syncs capabilities.

178
00:13:27.589 --> 00:13:32.334
So I'm going to say reuse
the profile instead of

179
00:13:32.334 --> 00:13:37.479
register new devices and
what is this saying?

180
00:13:37.479 --> 00:13:39.442
I don't have fastlane available.

181
00:13:39.442 --> 00:13:43.065
Android might probably work,
let me try Android.

182
00:13:47.078 --> 00:13:49.945
&gt;&gt; Kadi Kraman: So if you do have your
native build environment set up, so

183
00:13:49.945 --> 00:13:50.615
there we go.

184
00:13:50.615 --> 00:13:54.877
So these you can see that these steps
are the same as you would use on eas.

185
00:13:54.877 --> 00:13:58.274
So you do have your local
build environment set up.

186
00:13:58.274 --> 00:14:02.418
You can use the eas build commands
to manage your credentials and

187
00:14:02.418 --> 00:14:05.758
then run on your local machine and
not on the cloud.

188
00:14:05.758 --> 00:14:10.581
So you'll be paying anything for
it because for eas all the CLI tools

189
00:14:10.581 --> 00:14:15.918
are completely free, the only thing
you pay for is the build time.

190
00:14:15.918 --> 00:14:19.944
So if you're building on your local
machine or you can use this to build on

191
00:14:19.944 --> 00:14:23.452
your own infrastructure if you
can't use eas, then go for it.

