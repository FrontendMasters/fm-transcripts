WEBVTT

1
00:00:00.000 --> 00:00:03.923
[MUSIC]

2
00:00:03.923 --> 00:00:07.041
&gt;&gt; Kent C Dodds: This
is not crazy important.

3
00:00:07.041 --> 00:00:08.661
It's just good to know.

4
00:00:08.661 --> 00:00:11.285
If I were to try and run the tests now,

5
00:00:11.285 --> 00:00:17.073
gonna have a bit of a problem.
&gt;&gt; Kent C Dodds: And

6
00:00:17.073 --> 00:00:22.344
that is webpackJsonp is not defined,
that's because

7
00:00:22.344 --> 00:00:29.460
pretty much just the way that karma is
loading our stuff into the browser.

8
00:00:29.460 --> 00:00:36.120
It's not loading the code that's necessary
for this commons chunking to work.

9
00:00:36.120 --> 00:00:39.073
So, for example, actually,
if I just remove that.

10
00:00:39.073 --> 00:00:44.706
The vendor file, and try to load.

11
00:00:44.706 --> 00:00:46.564
Where did my stuff go?

12
00:00:46.564 --> 00:00:47.818
Right here.

13
00:00:47.818 --> 00:00:49.789
Gets disorganized.

14
00:00:49.789 --> 00:00:50.550
Try to load this.

15
00:00:50.550 --> 00:00:52.850
I'm going to get the same error,
Jsonp is not defined,

16
00:00:52.850 --> 00:00:57.570
and that's because it's the vendor chunk
that holds the Webpack runtime now.

17
00:00:57.570 --> 00:01:03.680
So, no longer is the Webpack
runtime living in app.

18
00:01:03.680 --> 00:01:05.810
So basically, like I said before,

19
00:01:05.810 --> 00:01:10.718
when you say comments chunk, I want to put
all the common stuff in the vendor file.

20
00:01:10.718 --> 00:01:12.960
One of the common things
is the Webpack runtime.

21
00:01:12.960 --> 00:01:16.213
So, it puts all the Webpack
runtime in the vendor file.

22
00:01:16.213 --> 00:01:19.067
And so, without loading the vendor file,
then I'm gonna have a problem, and

23
00:01:19.067 --> 00:01:21.630
in our test,
we're not loading the vendor file.

24
00:01:21.630 --> 00:01:23.150
But if you stop and

25
00:01:23.150 --> 00:01:26.490
ask yourself do I really need to
have comments tracking in my test?

26
00:01:26.490 --> 00:01:28.250
The answer is absolutely no.

27
00:01:28.250 --> 00:01:34.080
And so, you can, this is one of the
reasons why I created this Webpack plugin,

28
00:01:34.080 --> 00:01:36.970
or common config details.

29
00:01:36.970 --> 00:01:40.850
Cuz now you can just say if prod,
then we're gonna have this.

30
00:01:42.510 --> 00:01:44.750
So, it will only be defined and prod.

31
00:01:46.440 --> 00:01:51.135
One other problem that we run into though
is if you have one item in the plugins

32
00:01:51.135 --> 00:01:54.600
array that's undefined, then Webpack
is going to cry like a baby, and so,

33
00:01:54.600 --> 00:02:02.190
there is another util here called
remove empty that you can use.

34
00:02:02.190 --> 00:02:05.000
You just wrap your plugins array and
remove empty, and

35
00:02:05.000 --> 00:02:09.950
it will remove any empty plugins that
you have in that array, so that way,

36
00:02:09.950 --> 00:02:12.340
you can use these utilities,
like if prod and such.

37
00:02:15.470 --> 00:02:20.708
And then the test should hopefully work.
&gt;&gt; Kent C Dodds: Cuz now

38
00:02:20.708 --> 00:02:26.590
it's no longer chunking it in
the test environment, just for broad,

39
00:02:26.590 --> 00:02:33.470
boom.
&gt;&gt; Kent C Dodds: Everyone

40
00:02:33.470 --> 00:02:38.158
having fun?
&gt;&gt; Kent C Dodds: I'm thinking maybe

41
00:02:38.158 --> 00:02:42.427
a little bit, in a little bit
we'll maybe do some air squats,

42
00:02:42.427 --> 00:02:45.324
but I don't know.
&gt;&gt; Speaker 2: What do you mean by empty

43
00:02:45.324 --> 00:02:46.620
plugins?
&gt;&gt; Kent C Dodds: Empty plugins,

44
00:02:46.620 --> 00:02:47.208
good question.

45
00:02:47.208 --> 00:02:55.270
So, when I use ifProd,
this function will take two arguments.

46
00:02:55.270 --> 00:03:00.160
One of them is, well, here,
let me actually rewrite this.

47
00:03:00.160 --> 00:03:06.070
Using or not using the configure tells.

48
00:03:06.070 --> 00:03:11.230
And so, let's env.prod,
if it is, then let's just stick

49
00:03:11.230 --> 00:03:17.110
this right in here, otherwise undefined.

50
00:03:17.110 --> 00:03:18.209
That's essentially what it's doing.

51
00:03:19.490 --> 00:03:22.485
So, by, and I don't know about you, but

52
00:03:22.485 --> 00:03:27.886
this is why I like having the utils,
cuz I think this doesn't look as nice.

53
00:03:27.886 --> 00:03:31.896
But yes, so,
when it when env.prod is false,

54
00:03:31.896 --> 00:03:37.533
then you're gonna wind up with undefined,
and Webpack will cry.

55
00:03:37.533 --> 00:03:40.850
And so, you need to remove empty
before you send it to plugins.

56
00:03:40.850 --> 00:03:45.430
And if you want to, you can run, just to
see what the end result of everything is,

57
00:03:45.430 --> 00:03:48.851
you could run npm run build:dev, and

58
00:03:48.851 --> 00:03:54.380
then pass along env.debug,
cuz we added that earlier.

59
00:03:54.380 --> 00:03:59.600
And you'll see the output and the plugins,

60
00:03:59.600 --> 00:04:02.510
you'll see the progress plugin But

61
00:04:02.510 --> 00:04:07.560
you won't see the CommonsChunkPlugin,
because I was doing the dev mode.

62
00:04:08.910 --> 00:04:12.390
Alternatively, here,
let me get rid of this stuff.

63
00:04:12.390 --> 00:04:17.480
Alternatively, if I did, oops.
&gt;&gt; Kent C Dodds: Prod,

64
00:04:17.480 --> 00:04:22.502
or just regular build, then you're
gonna see the CommonsChunkPlugin.

65
00:04:22.502 --> 00:04:26.518
Right there.
&gt;&gt; Kent C Dodds: Fun stuff,

66
00:04:26.518 --> 00:04:29.120
any other questions about
what's going on here?

67
00:04:30.250 --> 00:04:34.984
Okay, well, a lot of questions, sorry
&gt;&gt; Speaker 2: Those first two, you covered

68
00:04:34.984 --> 00:04:39.349
those, so it's just that last one.
&gt;&gt; Kent C Dodds: Okay, so how do you,

69
00:04:39.349 --> 00:04:43.739
I'm not sure I understand, Martin.

70
00:04:43.739 --> 00:04:48.680
Let's see.
&gt;&gt; Kent C Dodds: Yeah,

71
00:04:48.680 --> 00:04:53.042
so generally,
you would probably want to put d3 and

72
00:04:53.042 --> 00:04:58.890
react in here, and by generally,
I mean yes, you would do that.

73
00:04:58.890 --> 00:05:00.980
I'm not sure why I didn't do that for
this x, or for

74
00:05:00.980 --> 00:05:02.780
this portion, but yeah, you would.

75
00:05:03.790 --> 00:05:07.030
You could do that and try it out and

76
00:05:07.030 --> 00:05:10.630
it should work, yeah.
&gt;&gt; Speaker 2: Wouldn't you have lost,

77
00:05:10.630 --> 00:05:13.624
cuz like the d3 in the reactor is
only used for the pie chart thing?

78
00:05:13.624 --> 00:05:14.560
&gt;&gt; Kent C Dodds: Yeah, so

79
00:05:14.560 --> 00:05:19.600
you could potentially lose some of that
I'm not sure how it was, how it would

80
00:05:19.600 --> 00:05:25.250
respond to that, maybe you would make
a special chunk for that or something.

81
00:05:25.250 --> 00:05:26.080
It's pretty magical.

82
00:05:26.080 --> 00:05:31.127
So yeah, you could give it a shot and
look at it, but I'm pretty sure

83
00:05:31.127 --> 00:05:36.905
it should work as you would expect,
I would expect it would, maybe not, no.

84
00:05:36.905 --> 00:05:40.642
Something to look at, good question.

85
00:05:40.642 --> 00:05:44.030
Other questions?
&gt;&gt; Speaker 3: So yeah, so in the vendor,

86
00:05:44.030 --> 00:05:49.670
you just list all the imports that you
want to have quick into the vendor.

87
00:05:49.670 --> 00:05:53.040
And okay, so that's explicit,
everything that's not in there goes into

88
00:05:53.040 --> 00:05:53.870
the app?
&gt;&gt; Kent C Dodds: Yeah.

89
00:05:53.870 --> 00:05:54.420
&gt;&gt; Speaker 3: Because that's-

90
00:05:54.420 --> 00:05:55.991
&gt;&gt; Kent C Dodds: Yep, and

91
00:05:55.991 --> 00:06:00.490
you can have all kinds of entries in here,
and there are actually several ways to

92
00:06:00.490 --> 00:06:02.960
accomplish commons chunking
with the CommonsChunkPlugin.

93
00:06:02.960 --> 00:06:06.666
It's got kind of a big API that you
can go look in the doc set later.

94
00:06:06.666 --> 00:06:12.540
But yeah, this is probably the simplest,
even though it's not very simple.

95
00:06:16.140 --> 00:06:21.010
And how do you test if karma doesn't
load vendor JS as reactors in there?

96
00:06:21.010 --> 00:06:24.540
So, yeah, good question,
as far as testing is concerned.

97
00:06:24.540 --> 00:06:30.960
So, if you remember,
this app module still actually does have,

98
00:06:30.960 --> 00:06:33.060
well, actually,
this is totally irrelevant.

99
00:06:33.060 --> 00:06:36.940
Entry doesn't matter
at all in the testing.

100
00:06:38.360 --> 00:06:42.650
In karma config, what matters is
what you specify as your files.

101
00:06:42.650 --> 00:06:48.100
And so, it's going to take each individual
file and resolve all of its dependencies

102
00:06:48.100 --> 00:06:55.100
totally outside of the idea of entry,
or what we're putting in vendor.

103
00:06:55.100 --> 00:06:57.020
Because we added this if prod stuff,

104
00:06:57.020 --> 00:07:00.880
it's also not going to care about
their common strength again either.

105
00:07:00.880 --> 00:07:05.440
It just resolves everything for us,
and in testing that, that's just fine.

106
00:07:05.440 --> 00:07:09.689
And we trust our tools to be able
to do everything else for us, and

107
00:07:09.689 --> 00:07:13.860
then we have end to end test of
make sure that the tools work too,

108
00:07:13.860 --> 00:07:18.175
so.
&gt;&gt; Kent C Dodds: Cool, so,

109
00:07:18.175 --> 00:07:22.614
any other questions, okay.
&gt;&gt; Speaker 2: Did you answer that one

110
00:07:22.614 --> 00:07:23.973
about testing of Carmen,

111
00:07:23.973 --> 00:07:26.132
Carmen doesn't load the banner JS.
&gt;&gt; Kent C Dodds: Yeah,

112
00:07:26.132 --> 00:07:27.139
just answered that one.
&gt;&gt; Speaker 2: And

113
00:07:27.139 --> 00:07:30.835
then what about Billy's one right
above there, that one popped in?

114
00:07:30.835 --> 00:07:31.336
&gt;&gt; Kent C Dodds: Okay,

115
00:07:31.336 --> 00:07:36.550
Billy is asking the CommonsChunk,
and chunks are evaluated by Webpack.

116
00:07:36.550 --> 00:07:39.440
How do I determine that
one module is common?

117
00:07:40.600 --> 00:07:47.908
So, you would explicitly decide that
yourself and put that in vendor.

118
00:07:47.908 --> 00:07:51.257
There are ways to specify, hey,

119
00:07:51.257 --> 00:07:56.380
Webpack, I don't know
what things are common.

120
00:07:56.380 --> 00:08:01.240
But just, and this would apply in
a situation where you have multiple

121
00:08:01.240 --> 00:08:03.430
apps that you're bundling for.

122
00:08:03.430 --> 00:08:06.890
But you'd say hey, take all of these apps.

123
00:08:06.890 --> 00:08:11.684
Whatever's coming between them,
make it come and chunks for those.

124
00:08:11.684 --> 00:08:13.008
And yeah, so that's totally possible.

125
00:08:13.008 --> 00:08:15.799
That's actually what we're doing at
PayPal, where we have multiple apps.

126
00:08:15.799 --> 00:08:21.347
In this app, we're mostly just doing this
to get our vendor away from our app,

127
00:08:21.347 --> 00:08:23.130
our app code.

128
00:08:23.130 --> 00:08:29.470
So, again, this is kind of a feature
that has a couple different faces.

129
00:08:29.470 --> 00:08:31.460
It depends on your needs for the app.

