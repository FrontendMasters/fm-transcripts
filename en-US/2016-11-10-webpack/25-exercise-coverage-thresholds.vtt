WEBVTT

1
00:00:00.830 --> 00:00:06.720
&gt;&gt; Kent C Dodds: With
the covering all of the files,

2
00:00:06.720 --> 00:00:11.660
we need some way to tell karma
to load all of the files, and

3
00:00:11.660 --> 00:00:18.490
then tell Webpack to instrument those for
coverage as well.

4
00:00:18.490 --> 00:00:24.650
So, this actually is a little bit more
on the boilerplate side to, yeah,

5
00:00:26.440 --> 00:00:32.350
I'm just going to give you
a couple of globs that's you.

6
00:00:37.050 --> 00:00:41.250
Yeah, okay, so,
let me just ask really quick.

7
00:00:41.250 --> 00:00:47.980
So, this is why, or having this
fileGlob in our files array right here,

8
00:00:47.980 --> 00:00:52.810
is what's instructing karma
to load our test files.

9
00:00:52.810 --> 00:00:57.622
But we want to also instrument our
source files, so could anybody tell me

10
00:00:57.622 --> 00:01:03.329
how I instruct karma to load source files,
as well as my test files?

11
00:01:07.130 --> 00:01:08.320
You can talk, it's okay.

12
00:01:08.320 --> 00:01:11.071
[LAUGH]
&gt;&gt; Speaker 2: To get your source files.

13
00:01:11.071 --> 00:01:12.216
&gt;&gt; Kent C Dodds: Yeah, I have [INAUDIBLE]

14
00:01:12.216 --> 00:01:13.019
source files and

15
00:01:13.019 --> 00:01:16.869
but we want to treat those a little bit
differently from our test files, right?

16
00:01:16.869 --> 00:01:21.119
We don't want to have those,
instrumental for coverage,

17
00:01:21.119 --> 00:01:25.850
we also don't,
I don't want to load our test files twice.

18
00:01:25.850 --> 00:01:29.700
And so, we're going to have a glob
that matches just our source files.

19
00:01:29.700 --> 00:01:36.130
And this glob took me probably too long to
to write, but I finally got it correct.

20
00:01:36.130 --> 00:01:37.770
So, I'm going to copy it.

21
00:01:37.770 --> 00:01:39.380
This is the wrong one.

22
00:01:42.310 --> 00:01:44.759
Just going to copy it from here,

23
00:01:44.759 --> 00:01:49.860
our source glob.
&gt;&gt; Kent C Dodds: So

24
00:01:49.860 --> 00:01:54.910
yeah, fun afternoon from yours truly.

25
00:01:54.910 --> 00:01:56.920
So, and I'm gonna rename this one,

26
00:01:56.920 --> 00:01:58.860
just to make it a little bit
more explicit what it is.

27
00:02:00.330 --> 00:02:05.340
And for both of these, I want them
both loaded into the browser, but

28
00:02:05.340 --> 00:02:07.570
I also want them both
pre-processed by Webpack.

29
00:02:08.860 --> 00:02:12.980
Because, well, oops.

30
00:02:12.980 --> 00:02:16.110
First of all,
some of them are like requiring CSS.

31
00:02:16.110 --> 00:02:20.350
And so, karma's gonna be like,
what the heck is that?

32
00:02:20.350 --> 00:02:23.590
And the fact that it's requiring anything,
karma's gonna have a hard time with.

33
00:02:23.590 --> 00:02:26.280
So, both of them need to be
included into the browser, and

34
00:02:26.280 --> 00:02:28.580
both of them need to be pre-processed.

35
00:02:28.580 --> 00:02:32.760
But by doing things this way, we're
only loading our test files once, and

36
00:02:32.760 --> 00:02:36.680
we're only instrumenting our source files.

37
00:02:36.680 --> 00:02:40.929
And that instrumentation is

38
00:02:40.929 --> 00:02:46.598
happening because this ignore here.

39
00:02:46.598 --> 00:02:49.379
Does that make sense for everybody?

40
00:02:49.379 --> 00:02:50.540
Okay, sweet.

41
00:02:51.770 --> 00:02:57.710
So, if we run our mpm t here,
let me open up the chat,

42
00:02:57.710 --> 00:03:01.628
if anybody online has questions,

43
00:03:01.628 --> 00:03:10.520
then we'll open up our coverage again.
&gt;&gt; Kent C Dodds: And

44
00:03:10.520 --> 00:03:15.000
now, in our source, we see something
that's a lot more helpful and interesting.

45
00:03:16.280 --> 00:03:20.340
We see that our app file
actually is pretty well covered.

46
00:03:20.340 --> 00:03:24.950
And that's because we're
getting kind of a side effect

47
00:03:24.950 --> 00:03:26.400
by doing things the way that we are.

48
00:03:26.400 --> 00:03:32.830
If you recall in our Bootstrap function,

49
00:03:32.830 --> 00:03:37.270
as soon as this function loads, it's
starting to do a bunch of side effects.

50
00:03:37.270 --> 00:03:41.360
And that's generally not a great idea for
your modules,

51
00:03:41.360 --> 00:03:45.490
most of the time, your model should
not do anything at the root level.

52
00:03:45.490 --> 00:03:49.160
This makes them harder to test, and there,

53
00:03:49.160 --> 00:03:52.160
it's a side effect of just requiring or
importing that module.

54
00:03:52.160 --> 00:03:54.050
You don't want to have those side effects.

55
00:03:54.050 --> 00:03:58.080
What you do instead is you bundle up
all that logic into a function, and

56
00:03:58.080 --> 00:03:58.750
you export that.

57
00:03:58.750 --> 00:04:01.110
And then it's a lot easier to test that.

58
00:04:01.110 --> 00:04:03.940
But for Bootstrap,
that's a little bit of an exception,

59
00:04:03.940 --> 00:04:07.944
because we want to actually do something
when the user loads the browser, right?

60
00:04:07.944 --> 00:04:10.713
We need something to
kick off the whole thing.

61
00:04:10.713 --> 00:04:15.666
And so, we start out with the Bootstrap
that ultimately is calling

62
00:04:15.666 --> 00:04:19.829
this Bootstrap function,
which is calling up on load.

63
00:04:19.829 --> 00:04:25.932
And that actually kind of explains why
our up JS file has pretty good coverage,

64
00:04:25.932 --> 00:04:28.070
because this is being run.

65
00:04:29.160 --> 00:04:33.490
I'm not entirely sure why these two lines
aren't getting covered, my guess is they,

66
00:04:34.640 --> 00:04:39.260
there's an error,
it's probably thrown right here.

67
00:04:39.260 --> 00:04:43.030
Somewhere down the tree that it's
blowing everything up, and so,

68
00:04:43.030 --> 00:04:45.460
the execution doesn't continue.

69
00:04:45.460 --> 00:04:47.270
That's likely what's happening.

70
00:04:47.270 --> 00:04:51.820
And so, because we don't want to have
these side effects, and we want to,

71
00:04:51.820 --> 00:04:57.450
like Bootstrap, we don't really care
as much about the logic in this file.

72
00:04:57.450 --> 00:04:59.190
We can exclude it with karma.

73
00:05:00.408 --> 00:05:02.931
But I'm gonna skip over that bit,

74
00:05:02.931 --> 00:05:08.509
because I think that you kind of get
the idea of what what we're trying to do.

75
00:05:08.509 --> 00:05:12.894
Yeah, there's one other thing
that I'm just going to show you,

76
00:05:12.894 --> 00:05:17.836
and we'll move on, and that is,
once you start tracking code coverage,

77
00:05:17.836 --> 00:05:22.566
you want to make sure that it doesn't
drop below a certain threshold.

78
00:05:22.566 --> 00:05:25.870
And so,
we're getting fairly good coverage.

79
00:05:25.870 --> 00:05:28.850
And so, we don't want our coverage
to drop below the threshold.

80
00:05:28.850 --> 00:05:32.560
We want people to continue to
contribute tests to our project.

81
00:05:32.560 --> 00:05:37.360
And so, the coverageReporter allows
you to specify a check object

82
00:05:37.360 --> 00:05:40.850
that you can set for
global coverage for your whole project.

83
00:05:40.850 --> 00:05:44.580
I want statements to not get below 11,
and branches to not go below zero, and

84
00:05:44.580 --> 00:05:45.660
functions, zero.

85
00:05:45.660 --> 00:05:49.730
And lines 11, of course, functions and
branches would never go below zero,

86
00:05:49.730 --> 00:05:50.780
that's impossible.

87
00:05:50.780 --> 00:05:56.880
So yeah, but from here on now,
if somebody gets,

88
00:05:56.880 --> 00:05:59.890
actually, let me just show you
an example of what it would look like,

89
00:06:01.090 --> 00:06:06.630
in a scenario where somebody adds
more code and doesn't add any tests.

90
00:06:06.630 --> 00:06:10.810
But I'm going to fabricate that scenario
by reducing or increasing our threshold,

91
00:06:10.810 --> 00:06:14.990
so, if I say 31, and

92
00:06:14.990 --> 00:06:22.280
then we run an PMT,
then we actually get it.

93
00:06:22.280 --> 00:06:25.490
Error, the script will fail, and so,
you can put this is part of your validate

94
00:06:25.490 --> 00:06:29.770
scripture, or whatever you're
using to do your building, and

95
00:06:29.770 --> 00:06:33.156
you can make sure that people don't submit
poor requests that will reduce coverage.

96
00:06:33.156 --> 00:06:38.780
So, and that, yeah.

97
00:06:38.780 --> 00:06:39.365
That is that.

98
00:06:39.365 --> 00:06:44.493
Any questions?

99
00:06:44.493 --> 00:06:47.489
Okay, sweet.

100
00:06:47.489 --> 00:06:51.220
So, and I'm waiting for
questions online too.

101
00:06:54.880 --> 00:07:00.077
The next thing that we're going
to totally skip over pretty much

102
00:07:00.077 --> 00:07:05.880
100% is migrating from require
statements to ES6 modules.

103
00:07:05.880 --> 00:07:08.910
If you want to learn about ES6 modules,
there are still tickets for

104
00:07:08.910 --> 00:07:10.930
sale at Midwest JS, and

105
00:07:10.930 --> 00:07:15.802
I'm gonna be giving a talk called more
than you want to know about ES6 modules.

106
00:07:15.802 --> 00:07:19.630
So you'll, yeah, it will be fun, and

107
00:07:19.630 --> 00:07:22.880
you can learn all that you
would have learned doing this.

108
00:07:22.880 --> 00:07:29.510
And you work yourself, so we'll skip
past that and jump into tree shaking.

109
00:07:29.510 --> 00:07:32.590
And now we're only a half
hour behind schedule, yeah?

110
00:07:32.590 --> 00:07:34.210
&gt;&gt; Speaker 2: One came in there about

111
00:07:34.210 --> 00:07:36.710
how do you ignore bender JS files?
&gt;&gt; Kent C Dodds: Yeah,

112
00:07:36.710 --> 00:07:38.740
it would be the same thing.

113
00:07:38.740 --> 00:07:43.060
So you would just add that to, actually,

114
00:07:43.060 --> 00:07:46.470
I should, I didn't actually show you
what that looks like that exclusion.

115
00:07:46.470 --> 00:07:49.860
So, you have this exclude in here, and so,

116
00:07:49.860 --> 00:07:53.910
you could have it exclude
anything in node modules.

117
00:07:53.910 --> 00:07:58.570
And yep, take care of that.

118
00:07:59.810 --> 00:08:02.920
So, Emmanuel is asking,
would file glob equals,

119
00:08:02.920 --> 00:08:05.220
well, Emanuel is asking
if this would work?

120
00:08:05.220 --> 00:08:09.840
That would not work because
it also matches tests.

121
00:08:09.840 --> 00:08:12.040
So, you don't want to load your
test twice in the browser,

122
00:08:12.040 --> 00:08:15.090
then you're gonna have twice
as many times running.

123
00:08:15.090 --> 00:08:19.901
So that would not be a good thing.

124
00:08:19.901 --> 00:08:24.896
So, but
you do want to have separate globs for

125
00:08:24.896 --> 00:08:29.892
each of them, so that,
for some reason now,

126
00:08:29.892 --> 00:08:37.392
I can't even remember why it's
important to have separate globs.

127
00:08:37.392 --> 00:08:42.100
Okay, yeah, so, Oscar is asking
where I am teaching ES6 modules?

128
00:08:42.100 --> 00:08:47.220
Here in town at Midwest JS,
if you can't make it then, I actually,

129
00:08:47.220 --> 00:08:52.670
you can go to talks.kentcdodds.com,
which will take you to my repo.

130
00:08:52.670 --> 00:08:59.850
And if you are diligent, you can see
the meetup talk that I actually did.

131
00:08:59.850 --> 00:09:01.090
There is a recording available.

132
00:09:02.170 --> 00:09:04.050
And so,
if you wanna see a recording of it.

