WEBVTT

1
00:00:00.000 --> 00:00:03.713
[MUSIC]

2
00:00:03.713 --> 00:00:06.956
&gt;&gt; Kent C Dodds: There are two other
really important concepts with how webpack

3
00:00:06.956 --> 00:00:08.940
accomplishes what it's doing.

4
00:00:08.940 --> 00:00:12.745
The first is loaders, and so,
if I wanted to write ES6 or

5
00:00:12.745 --> 00:00:16.930
TypeScript, then I would have a loader.

6
00:00:16.930 --> 00:00:19.527
So in this case, Babel,
or the TypeScript loader.

7
00:00:19.527 --> 00:00:21.112
There are six TypeScript loaders.

8
00:00:21.112 --> 00:00:25.090
I don't use TypeScript but I know that
one of them is starting to become king.

9
00:00:25.090 --> 00:00:28.439
I think it's like Awesome TypeScript
loader or something like that.

10
00:00:28.439 --> 00:00:33.567
But yeah, so we say okay, webpack I want
you to take all my JavaScript files and

11
00:00:33.567 --> 00:00:36.620
pipe them through this Babel loader.

12
00:00:36.620 --> 00:00:40.195
You don't use the word pipe, I shouldn't
use that word cuz it's like gulp word.

13
00:00:40.195 --> 00:00:40.988
&gt;&gt; Speaker 2: Stream.

14
00:00:40.988 --> 00:00:42.498
&gt;&gt; Kent C Dodds: Yeah, like stream it,

15
00:00:42.498 --> 00:00:47.101
yeah, you basically just load it,
load it through this Babel loader and

16
00:00:47.101 --> 00:00:51.000
then the Babel loader will spit
out JavaScript at the end.

17
00:00:51.000 --> 00:00:55.770
And then webpack will take that and
resolve all the dependencies and

18
00:00:55.770 --> 00:00:59.750
create the bundle for you,
same thing works with CSS.

19
00:00:59.750 --> 00:01:01.795
This is the CSS Modules logo.

20
00:01:01.795 --> 00:01:06.083
It doesn't have to be like CSS Modules,
but webpack enables CSS Modules and

21
00:01:06.083 --> 00:01:07.180
it's awesome.

22
00:01:07.180 --> 00:01:09.330
You should look into it later,
we're not gonna talk about it today.

23
00:01:10.620 --> 00:01:14.218
So you take your CSS and
you say, hey webpack,

24
00:01:14.218 --> 00:01:19.569
I want you to send that through
the PostCSS loader or the SaaS loader or

25
00:01:19.569 --> 00:01:23.552
whatever, whatever you
wanna author your CSS in.

26
00:01:23.552 --> 00:01:26.732
And it will spit out CSS for you and
then webpack will take that,

27
00:01:26.732 --> 00:01:30.640
resolve all the dependencies, and
then bundle it for you in your bundle.

28
00:01:30.640 --> 00:01:31.440
Yeah?

29
00:01:31.440 --> 00:01:35.560
&gt;&gt; Speaker 3: So if I am targeting ES6,
I don't need to run through Babel, right?

30
00:01:35.560 --> 00:01:36.250
&gt;&gt; Kent C Dodds: Yes, that's right.

31
00:01:36.250 --> 00:01:38.710
&gt;&gt; Speaker 3: But this is only if
I'm targeting today's browsers.

32
00:01:38.710 --> 00:01:42.254
&gt;&gt; Kent C Dodds: That's right, or ancient
browsers cuz most of today's browsers

33
00:01:42.254 --> 00:01:44.287
are pretty well compliant with ES6.

34
00:01:44.287 --> 00:01:49.527
Yeah, because Edge is almost 100% and
stuff.

35
00:01:49.527 --> 00:01:55.183
So good question, so yeah, and even if
you are targeting today's browsers,

36
00:01:55.183 --> 00:01:58.870
there are likely features
like async await maybe or

37
00:01:58.870 --> 00:02:02.780
some ES2016 features that you wanna use.

38
00:02:02.780 --> 00:02:07.590
Cuz we all know when you just wanna use
the exponentiation operator and yeah.

39
00:02:07.590 --> 00:02:10.687
&gt;&gt; Students: [LAUGH]
&gt;&gt; Kent C Dodds: [LAUGH] It's like 2,

40
00:02:10.687 --> 00:02:15.757
it saves you a couple characters
of math.pwo but anyway.

41
00:02:15.757 --> 00:02:17.598
&gt;&gt; Students: [LAUGH]
&gt;&gt; Kent C Dodds: [LAUGH] But

42
00:02:17.598 --> 00:02:23.019
it does include includes,
array includes and so that's kind of nice.

43
00:02:23.019 --> 00:02:27.595
Of course, that's poly fillable, but
anyway the point is that you're probably

44
00:02:27.595 --> 00:02:32.106
always going to be transpiling your
JavaScript whether it's from TypeScript or

45
00:02:32.106 --> 00:02:33.240
using Babel.

46
00:02:33.240 --> 00:02:38.945
Just because there will always be features
that are really nice to be using and

47
00:02:38.945 --> 00:02:44.227
it's kind of a given that you're
going to be using a toolchain anyway.

48
00:02:44.227 --> 00:02:49.660
May as well just stick Babel in there and
then so, images of the same thing.

49
00:02:49.660 --> 00:02:52.239
So remember that everything is a module,
so you can say,

50
00:02:52.239 --> 00:02:55.865
hey take all my image modules and load
them through a couple of webpack loaders.

51
00:02:55.865 --> 00:02:59.102
There's URLLoader or a file-loader and

52
00:02:59.102 --> 00:03:04.010
turn it into a Base64 string that
I can use in my application.

53
00:03:04.010 --> 00:03:09.308
Or if it's too big, then I just want a URL
for wherever that image is gonna be and

54
00:03:09.308 --> 00:03:14.791
webpack will give you a URL and make sure
that the image is accessible at that URL.

55
00:03:14.791 --> 00:03:18.910
So yeah,
that's the whole idea behind loaders.

56
00:03:18.910 --> 00:03:22.880
There are hundreds of loaders and
you can chain loaders together.

57
00:03:22.880 --> 00:03:26.930
So you could say, okay, I want you to take
my JavaScript and first load it through

58
00:03:26.930 --> 00:03:32.440
the eslint loader to lint all my code and
then pass the result of that.

59
00:03:32.440 --> 00:03:35.420
Which, actually, nothing has
changed as a result of that loader.

60
00:03:35.420 --> 00:03:38.580
Pass that onto the Babel loader and
then Babel will transpile it,

61
00:03:38.580 --> 00:03:43.620
and then that's the end of the chain and
then webpack will just use that.

62
00:03:43.620 --> 00:03:47.466
Or we'll look at chaining
a little bit with our CSS and

63
00:03:47.466 --> 00:03:52.082
I'll explain a little bit more
about how the CSS loader works and

64
00:03:52.082 --> 00:03:56.896
the style loader because they're
a little bit on the unique side.

65
00:03:56.896 --> 00:04:00.170
But yeah, chaining loaders,
that's really common.

66
00:04:00.170 --> 00:04:05.110
And loaders are how you take each file and
do something to it before webpack

67
00:04:05.110 --> 00:04:10.310
takes over and does some magic to
the resolution and bundling stuff.

68
00:04:10.310 --> 00:04:11.635
Any questions about loaders?

69
00:04:14.517 --> 00:04:18.690
&gt;&gt; Kent C Dodds: Okay, this is either
really good and you're all getting it,

70
00:04:18.690 --> 00:04:19.825
or you're shy.

71
00:04:19.825 --> 00:04:22.230
Yeah, we'll get a good cadence.

72
00:04:22.230 --> 00:04:24.524
Nothing from online, so keep going.

73
00:04:24.524 --> 00:04:28.280
So plugin side of things, yeah,

74
00:04:28.280 --> 00:04:33.490
plugins do everything else, so there are a
bunch of random words and stuff on there.

75
00:04:33.490 --> 00:04:38.473
We'll talk about some of these plugins but
the CommonsChunkPlugin,

76
00:04:38.473 --> 00:04:44.392
we'll use this to take things that we want
to have in a separate bundle altogether.

77
00:04:44.392 --> 00:04:48.103
So that when there are changes to our code
that separate bundle doesn't need to be

78
00:04:48.103 --> 00:04:50.760
changed and
the browser can keep that cache.

79
00:04:50.760 --> 00:04:53.770
Lodash, anybody use Lodash here?

80
00:04:53.770 --> 00:04:57.390
Yeah, awesome, and if you're at home you
can raise your hand and your wife's like,

81
00:04:57.390 --> 00:04:59.019
what the?

82
00:04:59.019 --> 00:05:00.520
[LAUGH] But yeah, so

83
00:05:00.520 --> 00:05:04.630
Lodash has a really cool plugin that
will really shrink the size of Lodash.

84
00:05:04.630 --> 00:05:09.940
Lodash is an enormous library and
it's enormously valuable but yeah,

85
00:05:09.940 --> 00:05:13.940
it's really big and so there's a really
cool plugin to shrink it considerably.

86
00:05:13.940 --> 00:05:15.890
Also, a Babel plugin as well to

87
00:05:17.660 --> 00:05:21.288
enable you to use tree-shaking which we'll
talk about later too, it's really cool.

88
00:05:21.288 --> 00:05:26.800
There's a GZip plugin,
which we won't use but it's interesting.

89
00:05:26.800 --> 00:05:32.899
We won't use it because we're deploying
to a service that GZips for us.

90
00:05:32.899 --> 00:05:37.972
The PrefetchPlugin, we actually won't use
that either because the Service Workers

91
00:05:37.972 --> 00:05:41.994
plugin that we're gonna use will
prefetch all of our chunks for us.

92
00:05:41.994 --> 00:05:43.346
It's going to be so cool!

93
00:05:43.346 --> 00:05:45.117
&gt;&gt; Students: [LAUGH]
&gt;&gt; Kent C Dodds: Hang on with me

94
00:05:45.117 --> 00:05:45.889
toward the end.

95
00:05:45.889 --> 00:05:49.137
When I realized it was doing this,
I was like what!

96
00:05:49.137 --> 00:05:52.017
Yeah, I'm really excited
to show you that one, yeah.

97
00:05:52.017 --> 00:05:55.700
&gt;&gt; Speaker 5: There was a question if
we'll be seeing an example of using

98
00:05:55.700 --> 00:05:57.570
webpack on CSS and images.

99
00:05:57.570 --> 00:05:58.140
&gt;&gt; Kent C Dodds: Yes.

100
00:05:58.140 --> 00:06:01.372
&gt;&gt; Speaker 5: Perfect.
&gt;&gt; Kent C Dodds: Well, on CSS there won't

101
00:06:01.372 --> 00:06:05.963
be any images yet but
we will be doing CSS.

102
00:06:05.963 --> 00:06:10.339
Talk to me after, whoever that was, and

103
00:06:10.339 --> 00:06:13.958
I can show you an example of that.

104
00:06:13.958 --> 00:06:16.470
It's fairly straightforward.

105
00:06:16.470 --> 00:06:19.240
You kind of write everything
the same way you normally would and

106
00:06:19.240 --> 00:06:20.268
you just add another loader.

107
00:06:20.268 --> 00:06:21.704
Good question.

108
00:06:21.704 --> 00:06:25.630
ExtractTextWebpackPlugin, we'll
talk about that.

109
00:06:25.630 --> 00:06:28.720
There's even a plugin to automatically
upload your bundle to S3,

110
00:06:28.720 --> 00:06:30.890
which that was kind of cool.

111
00:06:30.890 --> 00:06:36.850
The DedupePlugin is pretty
awesome because NPM

112
00:06:36.850 --> 00:06:41.400
kind of gets a bunch of flack for
having a whole bunch of little modules and

113
00:06:41.400 --> 00:06:45.220
then you install these little modules and
then you have duplications or something.

114
00:06:45.220 --> 00:06:48.966
So the npm-dedupe command will
kinda fix that problem and

115
00:06:48.966 --> 00:06:52.970
npm3 actually dedupes
your dependencies anyway.

116
00:06:52.970 --> 00:06:56.370
But to take it even a step further,
let's say you had two

117
00:06:56.370 --> 00:07:01.294
npm modules that copy pasted some code,
like some JavaScript file.

118
00:07:01.294 --> 00:07:05.820
The DedupePlugin would be able to tell
that those two files are the same and

119
00:07:05.820 --> 00:07:06.770
dedupe them.

120
00:07:06.770 --> 00:07:09.850
So it would say okay,
these are the same, I'll only use one.

121
00:07:11.030 --> 00:07:14.059
So I've seen that shrink my
build a little bit as well.

122
00:07:14.059 --> 00:07:19.082
So yeah, plugins are pretty much
responsible for optimizing your

123
00:07:19.082 --> 00:07:24.650
resulting bundle and then doing stuff
with the resulting assets as well.

