WEBVTT

1
00:00:00.000 --> 00:00:03.782
[MUSIC]

2
00:00:03.782 --> 00:00:08.984
&gt;&gt; Kent C Dodds: Tree Shaking is another
buzz word associated to webpack as

3
00:00:08.984 --> 00:00:16.580
far as I know the earliest bundler to do
tree shaking is a bundler called rollup.

4
00:00:16.580 --> 00:00:21.806
It's really interesting approach,
it doesn't do near the amount

5
00:00:21.806 --> 00:00:27.040
of things that webpack does, but
it's cool so you can look into it.

6
00:00:27.040 --> 00:00:32.850
But what tree shaking does,
Tobias who is the author of webpack said,

7
00:00:32.850 --> 00:00:37.179
tree shaking creates dead code,
I'll show you what that looks like.

8
00:00:38.250 --> 00:00:42.800
I say that tree shaking excludes exports
from modules where it can be detected,

9
00:00:42.800 --> 00:00:46.860
the export is not used,
Uglify then deletes the dead code.

10
00:00:46.860 --> 00:00:50.000
And so that's a lot of words and stuff.

11
00:00:50.000 --> 00:00:54.670
I'll demonstrate how that works but,
the whole why are around the tree shaking

12
00:00:54.670 --> 00:00:58.484
idea is, let's say that you
have lodash in your project.

13
00:00:58.484 --> 00:01:03.850
Lodash is an example of a really
useful module that is enormous, and so

14
00:01:03.850 --> 00:01:10.750
you want to avoid sending the entirety
of lodash to your users, if you can.

15
00:01:10.750 --> 00:01:13.790
And so let's say that you're only
using two methods from lodash.

16
00:01:15.490 --> 00:01:20.010
So it doesn't make a whole lot of
sense to send the entirety of lodash

17
00:01:20.010 --> 00:01:22.920
down to your users if you're
only using two methods.

18
00:01:22.920 --> 00:01:24.760
But with tree shaking,

19
00:01:24.760 --> 00:01:28.480
you could potentially just pull
the pieces out that you need.

20
00:01:28.480 --> 00:01:34.120
And then webpack will say okay, everything
else is gonna be dead code for this thing.

21
00:01:35.200 --> 00:01:38.210
So yeah, it's pretty handy.

22
00:01:38.210 --> 00:01:42.870
I should say that that example doesn't
actually work right now because lodash

23
00:01:42.870 --> 00:01:48.398
isn't authored in ES6 modules and
so webpack isn't

24
00:01:48.398 --> 00:01:53.900
able to detect whether certain
pieces of code are used.

25
00:01:53.900 --> 00:01:56.490
So, eventually that's likely to happen.

26
00:01:56.490 --> 00:02:01.779
If you want to save a lot of space
with lodash they're plug-ins and

27
00:02:01.779 --> 00:02:07.570
both babel and webpack plug-ins you
can use and save a lot of space.

28
00:02:07.570 --> 00:02:11.030
But inside of your own code,
you can benefit from this now.

29
00:02:11.030 --> 00:02:15.050
And as the community starts taking
more advantage of tree shaking,

30
00:02:15.050 --> 00:02:17.930
then more modules will expose
themselves as ES6 models and

31
00:02:17.930 --> 00:02:21.082
then you can start benefiting from tree
shaking from other people as well.

32
00:02:21.082 --> 00:02:23.108
&gt;&gt; Speaker 2: They had a question,

33
00:02:23.108 --> 00:02:27.161
just about are we treating
the test glob and

34
00:02:27.161 --> 00:02:30.220
source glob differently?
&gt;&gt; Kent C Dodds: Yeah,

35
00:02:30.220 --> 00:02:34.322
I think originally when I created
the workshop, the test glob and

36
00:02:34.322 --> 00:02:37.290
source glob were being treated
a little bit differently but

37
00:02:37.290 --> 00:02:41.740
now I'm pretty sure that it would work
without them being separate in Karma.

38
00:02:41.740 --> 00:02:44.390
So if somebody wants to try that out and
submit a pull request, that'd be sweet.

39
00:02:46.410 --> 00:02:50.280
Yeah, that would be cool.
&gt;&gt; Speaker 2: Follow up

40
00:02:50.280 --> 00:02:55.100
question the tree shaking,
is this something similar to UnCSS but for

41
00:02:55.100 --> 00:02:57.080
JavaScript?
&gt;&gt; Kent C Dodds: Yeah, good question.

42
00:02:57.080 --> 00:03:01.467
So UnCSS basically looks
at the CSS on your page and

43
00:03:01.467 --> 00:03:06.540
determines what CSS is not
being used on that page.

44
00:03:06.540 --> 00:03:10.440
And then you can remove that CSS code.

45
00:03:10.440 --> 00:03:10.940
It's similar.

46
00:03:13.180 --> 00:03:16.090
The same idea applies to
tree shaking where it can

47
00:03:16.090 --> 00:03:17.320
determine what's not being used.

48
00:03:17.320 --> 00:03:22.570
The cool thing about tree shaking is this
can happen statically and at bundle time.

49
00:03:22.570 --> 00:03:25.400
And so you don't have to like run
your app you don't have to do it

50
00:03:25.400 --> 00:03:29.240
like anything really special,
you just have to use ES6 modules and

51
00:03:29.240 --> 00:03:34.716
configure babel properly to not transpile
those so that webpack can deal with them.

52
00:03:34.716 --> 00:03:39.597
And then statically webpack will
just remove those from the exports

53
00:03:39.597 --> 00:03:44.490
which creates dead code and
then Uglify will remove that dead code.

