WEBVTT

1
00:00:00.000 --> 00:00:03.975
[MUSIC]

2
00:00:03.975 --> 00:00:06.720
&gt;&gt; Kent C Dodds: Okay, this is one
of the earliest features of Webpack.

3
00:00:06.720 --> 00:00:10.324
This is actually, this feature is
why Webpack was originally created.

4
00:00:10.324 --> 00:00:17.240
Tobias decided he needed some capability
to only load code when it was needed.

5
00:00:17.240 --> 00:00:21.200
And none of the bundlers
really handled that very well.

6
00:00:21.200 --> 00:00:23.490
You'd had to do a lot of stuff yourself.

7
00:00:23.490 --> 00:00:25.472
And so, he created bundler,

8
00:00:25.472 --> 00:00:31.120
this [LAUGH] amazing guy created
a bundler just to handle that use case.

9
00:00:31.120 --> 00:00:35.270
And so, you can imagine it like this.

10
00:00:35.270 --> 00:00:39.440
I'm on the mobile or
I want to go to Twitter.

11
00:00:39.440 --> 00:00:44.890
And so, I'm on my own mobile browser and
I say, okay, mobile.twitter.com.

12
00:00:44.890 --> 00:00:47.677
The last thing that I,
as a user, want to do is wait.

13
00:00:47.677 --> 00:00:52.740
And so, all that I care about is what's
gonna be on my screen when I get there.

14
00:00:52.740 --> 00:00:54.314
And so, what codes,

15
00:00:54.314 --> 00:01:00.272
the whole why around code splitting is get
things to the user as fast as possible.

16
00:01:00.272 --> 00:01:02.989
And that means as little code as possible,

17
00:01:02.989 --> 00:01:06.770
we should be sending as little
code as possible to the user.

18
00:01:06.770 --> 00:01:13.180
And so, when I log in, now, suddenly,
I need all of the code for the login.

19
00:01:13.180 --> 00:01:17.020
So, if this is like a single page out,
then, I need all of the code for

20
00:01:17.020 --> 00:01:20.086
the Twitter stream, and
I need the code for settings.

21
00:01:20.086 --> 00:01:23.356
And, well,
even potentially settings could be,

22
00:01:23.356 --> 00:01:26.400
yet, another area where
I load stuff in late.

23
00:01:26.400 --> 00:01:32.450
So, the whole idea around it is only
load the code that's needed for

24
00:01:32.450 --> 00:01:33.430
where the user is going.

25
00:01:34.520 --> 00:01:38.736
And so, that is totally possible and

26
00:01:38.736 --> 00:01:43.910
actually, fairly simple with Webpack.

27
00:01:43.910 --> 00:01:46.759
You'll notice over here
on this previous step,

28
00:01:46.759 --> 00:01:49.126
we're checking out a separate branch.

29
00:01:49.126 --> 00:01:55.020
So, originally, we went to tree shaking
branch to get the tree shaking stuff.

30
00:01:55.020 --> 00:01:59.480
We're actually skipping over another
branch because we're gonna actually

31
00:01:59.480 --> 00:02:04.020
considerably change the app in ways
that aren't totally relevant to you.

32
00:02:04.020 --> 00:02:09.160
So, we're actually adding
react in to the app now.

33
00:02:09.160 --> 00:02:14.580
Let's say that for some reason, if you
check out that branch and run the dev,

34
00:02:15.800 --> 00:02:21.150
stuff here, then,
you'll get a nice, new pie chart.

35
00:02:21.150 --> 00:02:29.382
You click on that and it will show
you a percent of your completed and

36
00:02:29.382 --> 00:02:34.900
incomplete tasks, which is kind of fun.

37
00:02:34.900 --> 00:02:40.030
And this is all using react-d3,
two enormous libraries.

38
00:02:40.030 --> 00:02:42.368
So, if I am on this, actually,

39
00:02:42.368 --> 00:02:46.196
if I look at my Network tab here,
I refresh the page.

40
00:02:46.196 --> 00:02:47.473
I'm not using the the chart.

41
00:02:47.473 --> 00:02:49.714
Maybe, I'm just coming here
to check off a quick to do.

42
00:02:49.714 --> 00:02:51.450
I don't care about that chart.

43
00:02:51.450 --> 00:02:54.492
I'm still loading 2.1 MB.

44
00:02:54.492 --> 00:02:59.072
This is in development, but in production,
that'll still be of considerable size,

45
00:02:59.072 --> 00:03:01.370
mostly, because of D3 and React.

46
00:03:01.370 --> 00:03:06.410
And so, I want to load this
stuff as late as possible,

47
00:03:06.410 --> 00:03:11.320
only when the user navigates to those,
to that graph.

48
00:03:13.150 --> 00:03:17.111
So, any questions about the why
behind me on code splitting?

49
00:03:17.111 --> 00:03:19.669
Makes sense?

50
00:03:19.669 --> 00:03:24.162
Okay, so, I should mention also, this
is one of the features that I actually,

51
00:03:24.162 --> 00:03:26.176
I think, I'd mentioned earlier,

52
00:03:26.176 --> 00:03:29.820
that you probably would have a hard
time doing with Angular one.

53
00:03:29.820 --> 00:03:32.710
Because Angular one needs all
modules defined up front.

54
00:03:32.710 --> 00:03:36.950
And all the components and
everything needs to be defined up front.

55
00:03:36.950 --> 00:03:40.690
And implementing code splitting
is not trivial with Angular one.

56
00:03:40.690 --> 00:03:42.690
I spent a week on it and it failed.

57
00:03:42.690 --> 00:03:47.500
So, you have to structure your
app in a really specific way.

58
00:03:47.500 --> 00:03:52.095
Something like Backbone or
React is a lot easier.

59
00:03:54.900 --> 00:03:56.371
Daniel U asked, Kent,

60
00:03:56.371 --> 00:04:01.458
can you give some advice on speeding up
Webpack with pre-fetched plugin or DLLs?

61
00:04:01.458 --> 00:04:02.465
Do you use any of these?

62
00:04:02.465 --> 00:04:05.150
I actually don't use
the prefetched plugin or DLLs.

63
00:04:06.540 --> 00:04:11.227
We will look into some sort of
alternative solutions a little bit later.

64
00:04:11.227 --> 00:04:18.706
And Henry is asking, is this features
the same as critical CSS path rendering?

65
00:04:18.706 --> 00:04:20.090
Not exactly.

66
00:04:20.090 --> 00:04:22.553
So, earlier, when you're talking
about how we got that flicker.

67
00:04:22.553 --> 00:04:26.793
And so, we just put the JavaScript
in the head to avoid the flicker.

68
00:04:26.793 --> 00:04:29.894
And that was kind of cheating because
you shouldn't do that cuz in a bigger

69
00:04:29.894 --> 00:04:33.346
application, the user is just going to see
a white screen until all the JavaScript

70
00:04:33.346 --> 00:04:34.510
and everything is loaded.

71
00:04:35.580 --> 00:04:39.530
So, it's better to just put the stuff
that's important in the head.

72
00:04:39.530 --> 00:04:40.590
So, it is a little bit different.

73
00:04:41.930 --> 00:04:44.870
You could potentially
accomplish the same thing.

74
00:04:46.090 --> 00:04:48.040
Once we get a little bit further along,

75
00:04:48.040 --> 00:04:51.260
you could use Webpack to
accomplish a critical CSS stuff.

76
00:04:53.300 --> 00:04:58.820
And you actually could use code
splitting to do that as well.

77
00:04:58.820 --> 00:05:01.230
Yeah, actually, and I think about it.

78
00:05:01.230 --> 00:05:04.340
Yeah, you could totally use code splitting
to just load the critical stuff first, and

79
00:05:04.340 --> 00:05:05.660
then, load the rest of your app later.

80
00:05:06.910 --> 00:05:10.842
And Webpack,
the answer is always yes with Webpack.

81
00:05:10.842 --> 00:05:11.344
&gt;&gt; Students: [LAUGH]

82
00:05:11.344 --> 00:05:11.970
&gt;&gt; Kent C Dodds: It's always yes.

