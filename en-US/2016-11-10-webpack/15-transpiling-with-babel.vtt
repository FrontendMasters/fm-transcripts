WEBVTT

1
00:00:00.000 --> 00:00:04.060
[MUSIC]

2
00:00:04.060 --> 00:00:07.211
&gt;&gt; Kent C Dodds: This is a part of that I
think you all will be really interested in

3
00:00:07.211 --> 00:00:09.230
and it's very specific to webpack.

4
00:00:09.230 --> 00:00:16.448
So, let me just catch myself up
on my notes here, very quick.

5
00:00:19.791 --> 00:00:23.277
&gt;&gt; Kent C Dodds: So, there are several
dependencies that we need to

6
00:00:23.277 --> 00:00:24.600
install for this.

7
00:00:24.600 --> 00:00:27.620
But this is gonna be our first
loader that we implement.

8
00:00:27.620 --> 00:00:32.505
So if you remember before,
we said that, for

9
00:00:32.505 --> 00:00:36.610
webpack to do its magic on
individual files, it uses loaders.

10
00:00:36.610 --> 00:00:41.510
And we say, okay, we want this ES6
file to be transpiled into ES5, so

11
00:00:41.510 --> 00:00:44.300
we can ship it to old browsers.

12
00:00:44.300 --> 00:00:51.780
So the way that we configure that here
is we say, module and that is an object.

13
00:00:51.780 --> 00:00:55.996
And this takes several properties to
configure how webpack resolves modules and

14
00:00:55.996 --> 00:00:58.237
what it does with with different modules.

15
00:00:58.237 --> 00:01:01.510
But one of those is a loaders array.

16
00:01:03.250 --> 00:01:09.200
Where we would put each one of the loaders
that we want to have applied to our files.

17
00:01:09.200 --> 00:01:14.312
A loader is an object that consists of
a couple properties that are important for

18
00:01:14.312 --> 00:01:17.070
it to know which files
to apply loaders to.

19
00:01:17.070 --> 00:01:20.610
And what loaders to apply
when it hits those files.

20
00:01:20.610 --> 00:01:25.460
The first property is the what
files to apply these loaders to.

21
00:01:25.460 --> 00:01:29.040
And that will be a test and
that's a regex and so

22
00:01:29.040 --> 00:01:32.050
we want this to apply to
all JavaScript files.

23
00:01:32.050 --> 00:01:35.580
So what's the common thing
about JavaScript files,

24
00:01:35.580 --> 00:01:38.830
like the one common thing
about all JavaScript files?

25
00:01:38.830 --> 00:01:40.532
Sorry, as far as the file
name's concerned?

26
00:01:40.532 --> 00:01:42.458
&gt;&gt; Students: .js.

27
00:01:42.458 --> 00:01:43.190
&gt;&gt; Kent C Dodds: .js, yeah.

28
00:01:43.190 --> 00:01:46.700
So anything that ends in .js, and

29
00:01:46.700 --> 00:01:52.560
we'll add the $ to say it ends in .js,
we're going to pipe through this loader.

30
00:01:52.560 --> 00:01:56.410
And then the loaders that we're going to
apply, we're only going to apply one,

31
00:01:56.410 --> 00:01:57.960
and that is babel.

32
00:01:59.890 --> 00:02:04.040
And then there's one other
problem with this and that is,

33
00:02:04.040 --> 00:02:07.258
once we start adding
dependencies from NPM,

34
00:02:07.258 --> 00:02:12.101
we're going to start transpiling
all of those also through babel.

35
00:02:12.101 --> 00:02:16.175
And if those library authors are doing
what they're supposed to be doing,

36
00:02:16.175 --> 00:02:20.080
they'll be transpiling it for
you before they publish it.

37
00:02:20.080 --> 00:02:25.210
And so, this is a wasted effort
on your part to transpile again.

38
00:02:25.210 --> 00:02:29.270
And so
you can say exclude: /node_modules/.

39
00:02:29.270 --> 00:02:33.992
So anything that has node modules in
the in the file path will be excluded

40
00:02:33.992 --> 00:02:36.280
from the transpilation process.

41
00:02:37.940 --> 00:02:40.905
And that's everything that we have to
change about our webpack config to get

42
00:02:40.905 --> 00:02:43.300
transpilation working.

43
00:02:43.300 --> 00:02:48.110
We have to also install
a couple dependencies.

44
00:02:48.110 --> 00:02:49.870
But you already have those installed,
so actually,

45
00:02:49.870 --> 00:02:54.030
you should be able to run webpack dev
server and everything should work.

46
00:02:54.030 --> 00:02:55.610
But does anybody have any questions?

47
00:02:58.700 --> 00:02:59.270
Okay, sweet.

48
00:02:59.270 --> 00:03:01.980
So we'll-
&gt;&gt; Speaker 3: A couple here.

49
00:03:01.980 --> 00:03:02.860
&gt;&gt; Kent C Dodds: Yeah.

50
00:03:02.860 --> 00:03:04.930
&gt;&gt; Speaker 3: They're asking
what branch that you're on.

51
00:03:04.930 --> 00:03:05.810
&gt;&gt; Kent C Dodds: Sorry.

52
00:03:05.810 --> 00:03:07.580
Yeah, I'm jumping around like crazy,
aren't I?

53
00:03:08.720 --> 00:03:12.640
I forgot the hotkey to
open another one of these.

54
00:03:12.640 --> 00:03:15.320
So right now it's on require-everything.

55
00:03:16.790 --> 00:03:21.780
If you look at the slides, that's
probably the best way to follow along.

56
00:03:21.780 --> 00:03:25.440
I'll copy the URL to the slide
that I'm on right now.

57
00:03:27.170 --> 00:03:32.450
And at the bottom of each
exercise slide is the next branch

58
00:03:32.450 --> 00:03:35.550
that you're going to be checking out.

59
00:03:35.550 --> 00:03:36.170
Yeah.
&gt;&gt; Speaker 3: And

60
00:03:36.170 --> 00:03:40.640
then the next question was, so
when webpack is parsing files looking for

61
00:03:40.640 --> 00:03:41.700
require import statements.

62
00:03:41.700 --> 00:03:45.170
Or I guess he's asking is that correct?

63
00:03:45.170 --> 00:03:47.940
So when it finds one, it looks for

64
00:03:47.940 --> 00:03:51.960
the thing named by the import require
in public path or node modules.

65
00:03:53.420 --> 00:03:55.481
And you might wanna read that, it's.

66
00:03:55.481 --> 00:03:56.350
&gt;&gt; Kent C Dodds: Yeah.

67
00:03:58.790 --> 00:04:02.613
Yeah, so
webpack resolves the requirement or

68
00:04:02.613 --> 00:04:08.480
import statements the same way
that the CommonJS spec specifies.

69
00:04:08.480 --> 00:04:12.340
And so if you're familiar with
node programming, then yeah,

70
00:04:12.340 --> 00:04:14.200
there are a couple of
things that determine this.

71
00:04:14.200 --> 00:04:17.850
So if I say require('lodash'),
and then it says okay,

72
00:04:17.850 --> 00:04:22.960
this isn't an absolute path, it's not a
relative path, it's just the module name.

73
00:04:22.960 --> 00:04:27.200
So I'm gonna look for the closest
node module's parent directory to me,

74
00:04:27.200 --> 00:04:29.770
that has a lodash module inside of it.

75
00:04:29.770 --> 00:04:34.770
So it will go into known modules here,
and it'll look, okay, find lodash for me.

76
00:04:34.770 --> 00:04:38.911
That's how it will resolve and then it
also actually uses like package Json to

77
00:04:38.911 --> 00:04:40.899
find the main and all kinds of stuff.

78
00:04:40.899 --> 00:04:45.409
I would recommend that everybody
learn about how dependency

79
00:04:45.409 --> 00:04:47.830
resolution works in CommonJS.

80
00:04:47.830 --> 00:04:50.220
That's really really valuable to know.

81
00:04:50.220 --> 00:04:54.240
So another way that you can do
this is require('./foo') and

82
00:04:54.240 --> 00:04:57.880
that will look relative to
the current file that you're in and

83
00:04:57.880 --> 00:05:02.550
find the file that's called foo.

84
00:05:02.550 --> 00:05:06.020
It'll look for foo.js,
that's the default extension, so

85
00:05:06.020 --> 00:05:08.880
you don't need to put
the extension there necessarily.

86
00:05:08.880 --> 00:05:12.670
And then there's another way that you can
do it and that's the absolute path and

87
00:05:12.670 --> 00:05:17.020
that will look for foo.js in
the root directory of your machine.

88
00:05:17.020 --> 00:05:19.670
So you pretty much never do this.

89
00:05:20.740 --> 00:05:23.074
Yeah.
&gt;&gt; Speaker 3: Why is the exclude value not

90
00:05:23.074 --> 00:05:24.030
in quotes?

91
00:05:27.280 --> 00:05:27.780
&gt;&gt; Kent C Dodds: Sorry?

92
00:05:28.860 --> 00:05:30.670
&gt;&gt; Speaker 3: The exclude value,
why is that not in quotes?

93
00:05:30.670 --> 00:05:31.680
&gt;&gt; Speaker 4: It's a regex.
&gt;&gt; Speaker 3: Regex.

94
00:05:33.220 --> 00:05:35.380
&gt;&gt; Kent C Dodds: Yes, it's a regex but
what is the question?

95
00:05:35.380 --> 00:05:36.564
&gt;&gt; Speaker 3: That was
the question sort of?

96
00:05:36.564 --> 00:05:38.334
&gt;&gt; Kent C Dodds: Yeah.
&gt;&gt; Speaker 3: And then another one is,

97
00:05:38.334 --> 00:05:42.074
isn't it redundant to name the file
webpack.config with babel and

98
00:05:42.074 --> 00:05:44.370
then also add it to the loader?

99
00:05:44.370 --> 00:05:45.234
&gt;&gt; Kent C Dodds: Yeah, good question.

100
00:05:45.234 --> 00:05:48.170
So I probably shouldn't have
done the whole babel thing.

101
00:05:48.170 --> 00:05:53.110
I thought it would be helpful,
but I knew it would be confusing.

102
00:05:53.110 --> 00:05:57.867
So the webpackconfig.babel is supposed
to just take your webpack configuration,

103
00:05:57.867 --> 00:06:02.790
in here, just this code, right here,
in this one file, and transpile it.

104
00:06:02.790 --> 00:06:04.990
It does nothing with
your source code at all.

105
00:06:06.220 --> 00:06:09.821
Sorry, that was a bad call, last night.

106
00:06:09.821 --> 00:06:11.660
[LAUGH] Okay any other questions?

107
00:06:11.660 --> 00:06:15.998
Has anybody got in the webpack server to
start running with this configuration?

108
00:06:15.998 --> 00:06:17.334
Okay, sweet.

109
00:06:17.334 --> 00:06:21.180
So you should be able to, whoops.

110
00:06:21.180 --> 00:06:22.518
You know what?

111
00:06:22.518 --> 00:06:28.171
We have one other thing
that we need to do,

112
00:06:28.171 --> 00:06:33.680
and that is we need to add a babelrc file.

113
00:06:33.680 --> 00:06:37.380
By default babel is going to
not do anything to your code.

114
00:06:37.380 --> 00:06:41.480
It's gonna take it, create an AST out of
it and then generate that back into code.

115
00:06:41.480 --> 00:06:43.000
It does nothing with it.

116
00:06:43.000 --> 00:06:46.569
And so
you need to add some configuration for

117
00:06:46.569 --> 00:06:51.584
babel to say these are are the features
of ES6 or ES2016 or

118
00:06:51.584 --> 00:06:55.745
even Stage 2 features
that aren't released yet.

119
00:06:55.745 --> 00:06:58.950
These are the things that
I want to have configured.

120
00:06:58.950 --> 00:07:03.870
And so I'm not actually going to go
through creating that because we

121
00:07:03.870 --> 00:07:05.263
are still behind.

122
00:07:05.263 --> 00:07:10.135
I'm going to show you what that looks like
and you can come back to it later and and

123
00:07:10.135 --> 00:07:11.310
try it out.

124
00:07:11.310 --> 00:07:14.810
But here,
I'll just create the file right here.

125
00:07:14.810 --> 00:07:19.061
It's in your root directory right
there with the cool logo if you've got

126
00:07:19.061 --> 00:07:20.183
my Adam plug-in.

127
00:07:20.183 --> 00:07:28.140
And then you would, oops, just take,
yeah, this is the configuration for it.

128
00:07:28.140 --> 00:07:29.550
You specify some presets.

129
00:07:29.550 --> 00:07:33.490
I wanna use the es2015 preset,
the es2016 preset.

130
00:07:33.490 --> 00:07:35.530
Sorry, ES6, ES2015, same thing.

131
00:07:35.530 --> 00:07:39.630
I called it ES6 because that's what it was
called before they changed the name and

132
00:07:39.630 --> 00:07:42.280
they can pry that from
my cold dead fingers.

133
00:07:42.280 --> 00:07:46.494
But I'm all onboard with ES2016 for
the two features that we got there.

134
00:07:46.494 --> 00:07:51.471
And then Stage 2 features, that includes
a sync away, trailing function,

135
00:07:51.471 --> 00:07:55.230
on parameter calls, and
arguments, and stuff.

136
00:07:55.230 --> 00:07:57.310
Cool stuff that we get.

137
00:07:57.310 --> 00:08:01.120
And here are the dependencies that
you need for all those things.

138
00:08:01.120 --> 00:08:05.940
So here's that es2015 preset,
es2016 preset and the Stage 2 preset.

139
00:08:07.786 --> 00:08:12.180
babel-core is a pure
dependency to babel-loader, so

140
00:08:12.180 --> 00:08:13.700
that's why you need to
have that installed also.

141
00:08:15.070 --> 00:08:23.400
And then babel-loader is tied
to this loaders: ( 'babel' ).

142
00:08:23.400 --> 00:08:27.430
So you need to have bbabel-loader
installed to use it right here.

143
00:08:27.430 --> 00:08:30.550
And also, as just kind of a fun fact,

144
00:08:32.530 --> 00:08:36.360
you can specify it like that as well,
those are equivalent.

145
00:08:36.360 --> 00:08:41.360
webpack will look up dash loader
in your dependencies as well.

146
00:08:41.360 --> 00:08:45.680
One other fun fact is if you do
want to write a custom loader for

147
00:08:45.680 --> 00:08:49.180
your project, then you can also
pass in another loader here.

148
00:08:49.180 --> 00:08:55.530
You could say resolve and
then ('./foo-bar/my-loader.js'), whatever.

149
00:08:55.530 --> 00:09:02.880
So it'd be the path to
the loader that you wanna use.

150
00:09:02.880 --> 00:09:06.276
Right here, we're not actually using
multiple loaders in this array, but

151
00:09:06.276 --> 00:09:07.187
for our CSS we will.

152
00:09:07.187 --> 00:09:08.690
And I'll show you that in a little bit.

