WEBVTT

1
00:00:00.000 --> 00:00:03.734
[MUSIC]

2
00:00:03.734 --> 00:00:06.580
&gt;&gt; Kent C Dodds: So
this is how Hot Module Replacement works.

3
00:00:06.580 --> 00:00:07.900
You have your bootstrap file, right?

4
00:00:07.900 --> 00:00:09.160
This is our entry.

5
00:00:11.100 --> 00:00:16.420
And it requires the app and
it requires helpers.

6
00:00:16.420 --> 00:00:19.930
And let's say that app gets updated.

7
00:00:19.930 --> 00:00:24.838
Like we're working on our stuff and
we say, oops,

8
00:00:24.838 --> 00:00:29.132
helpers.log('stuff'), whatever.

9
00:00:29.132 --> 00:00:34.680
Okay, then we save that and
we want to have our browser reload, right?

10
00:00:34.680 --> 00:00:36.840
We want to see what
happens when you do that.

11
00:00:36.840 --> 00:00:41.676
Probably, even more common would be
in an event handler or something,

12
00:00:41.676 --> 00:00:45.000
like ( 'view setsss' ), whatever.

13
00:00:45.000 --> 00:00:51.160
So normally what you have to do in
the web world is you hit Refresh and

14
00:00:51.160 --> 00:00:53.870
then set up the state properly so
you can see your updates.

15
00:00:55.300 --> 00:00:58.970
This isn't really that bad of
a workflow for something like this.

16
00:00:58.970 --> 00:01:03.070
But if you have, okay so,
I'm working on a modal.

17
00:01:03.070 --> 00:01:05.750
And inside of that modal,
I have to fill out this form and

18
00:01:05.750 --> 00:01:11.440
then I have to hit submit to see
what my code changes are doing.

19
00:01:11.440 --> 00:01:14.450
Then that can be kind of frustrating
because you have to fill out the form

20
00:01:14.450 --> 00:01:19.220
every single time, over and over again
to manually test what you're doing.

21
00:01:19.220 --> 00:01:23.360
So the cool thing about
Hot Module Replacement is it

22
00:01:23.360 --> 00:01:27.985
can take the module that you're working on
and it wraps something around it called,

23
00:01:27.985 --> 00:01:33.060
oops, that is a mistake,
that is not there.

24
00:01:33.060 --> 00:01:38.730
It wraps webpackHotUpdate over it.

25
00:01:38.730 --> 00:01:44.716
So anywhere that is requiring bootstrap.js
or anywhere that app.js is in use,

26
00:01:44.716 --> 00:01:49.460
is now actually going to be
requiring webpackHotUpdate.

27
00:01:49.460 --> 00:01:53.700
And webpackHotUpdate will
send updates to it as needed.

28
00:01:54.780 --> 00:01:57.500
So this is like,
you can look at the output and

29
00:01:57.500 --> 00:02:00.080
it kind of maybe sort of
makes sense a little bit.

30
00:02:00.080 --> 00:02:05.048
But basically what this amounts to
is when you make an update to this

31
00:02:05.048 --> 00:02:09.231
other component, it says hey,
this has been updated.

32
00:02:09.231 --> 00:02:12.120
Let me reload that module code and
you can rerun it.

33
00:02:14.350 --> 00:02:18.967
I think probably what would be more
instructive is to show an example

34
00:02:18.967 --> 00:02:20.023
of how to do it.

35
00:02:20.023 --> 00:02:24.634
And it's actually like, if you look at
the dev it's not a whole lot of stuff.

36
00:02:24.634 --> 00:02:29.280
On your dev script you add --hot.

37
00:02:29.280 --> 00:02:32.843
And then, well okay,
there is a a little bit of code, but

38
00:02:32.843 --> 00:02:37.600
this adds Hot Module Reloading or
Replacement to our entire app.

39
00:02:37.600 --> 00:02:43.590
So anywhere that we save a file,
it will get reloaded automatically.

40
00:02:45.080 --> 00:02:49.300
I don't know if I want to
spend the time to actually

41
00:02:49.300 --> 00:02:51.930
have everybody code this out necessarily.

42
00:02:51.930 --> 00:02:57.083
And so let's all go ahead and
we'll check out the next branch and

43
00:02:57.083 --> 00:03:00.050
we'll look at it together locally.

44
00:03:00.050 --> 00:03:04.897
So the next branch is

45
00:03:04.897 --> 00:03:10.630
FEM/01.6-hmr.

46
00:03:10.630 --> 00:03:12.637
And now if you run npm run dev,

47
00:03:12.637 --> 00:03:17.950
this is gonna run webpack-dev-server
with Hot Module Reloading turned on.

48
00:03:17.950 --> 00:03:20.710
Sometimes you'll see
something happen like this.

49
00:03:20.710 --> 00:03:24.430
You'll get tons of output
that says it's rebundling.

50
00:03:24.430 --> 00:03:27.240
I think that's one of the webpack 2
bugs that they're working on right now.

51
00:03:27.240 --> 00:03:30.131
But it doesn't affect anything
functionally, so don't worry about that.

52
00:03:30.131 --> 00:03:36.067
Okay, so here,
if you look at your console,

53
00:03:36.067 --> 00:03:42.920
you'll see a couple of
logs out here from HMR.

54
00:03:42.920 --> 00:03:46.380
We also have some logs from ourselves and
view set and

55
00:03:46.380 --> 00:03:48.870
then Hot Module Replacement enabled.

56
00:03:48.870 --> 00:03:53.340
So let's go ahead and
you can do this anywhere that you like.

57
00:03:53.340 --> 00:03:57.090
So change any file, hit the save button,
and go back to your app.

58
00:03:57.090 --> 00:04:04.720
It's actually probably more instructive
to have these in side by side windows.

59
00:04:04.720 --> 00:04:06.289
So that's what I'm gonna do really quick.

60
00:04:08.670 --> 00:04:10.216
We'll put this one right next to it.

61
00:04:13.825 --> 00:04:16.446
&gt;&gt; Kent C Dodds: Okay,
so I'm going to say,

62
00:04:16.446 --> 00:04:21.270
we'll go to our view.js,
I'm gonna look for all.

63
00:04:24.102 --> 00:04:25.478
Actually I think that's in the HTML.

64
00:04:35.783 --> 00:04:36.347
&gt;&gt; Kent C Dodds: Sorry,

65
00:04:36.347 --> 00:04:40.868
I did think of a good demo and
I've forgotten what the example was.

66
00:04:49.414 --> 00:04:53.070
&gt;&gt; Kent C Dodds: Bad me, okay,
I'm gonna pop up in the dev tools.

67
00:04:53.070 --> 00:04:56.555
And if I say ( 'view setssssssss' ) and
then I hit Save,

68
00:04:56.555 --> 00:05:00.330
then we're gonna get that
console log right there.

69
00:05:00.330 --> 00:05:01.809
Not as exciting a demo but

70
00:05:01.809 --> 00:05:06.473
you could potentially update the place
where this number is calculated here.

71
00:05:06.473 --> 00:05:09.840
And it will get updated without
actually refreshing the browser.

72
00:05:11.750 --> 00:05:14.940
This is a little bit more of
an exciting feature if you do have

73
00:05:14.940 --> 00:05:20.250
a situation where you have a modal and
a big form you have to fill out and stuff.

74
00:05:20.250 --> 00:05:24.930
You can see things updating without
that form getting cleared out.

75
00:05:24.930 --> 00:05:28.360
And so, yeah, you can

76
00:05:28.360 --> 00:05:32.290
potentially be working on a feature
without ever having to reload the browser.

77
00:05:33.930 --> 00:05:38.925
And so let's go ahead and just take a look
really quickly at the actual code used

78
00:05:38.925 --> 00:05:42.347
to accomplish Hot Module Reloading
in a single file.

79
00:05:44.204 --> 00:05:45.774
&gt;&gt; Kent C Dodds: You move this over.

80
00:05:48.466 --> 00:05:53.869
&gt;&gt; Kent C Dodds: So, yeah, what we're
doing here is we need to determine whether

81
00:05:53.869 --> 00:05:59.175
or not this is the first time
the browser is loading this module or

82
00:05:59.175 --> 00:06:02.150
if we're being hot reloaded.

83
00:06:02.150 --> 00:06:06.910
And so that's what this
reloading variable is set for.

84
00:06:06.910 --> 00:06:09.490
We say, if the document.readyState
is already 'complete',

85
00:06:09.490 --> 00:06:11.790
then we must be reloading.

86
00:06:11.790 --> 00:06:14.620
But then here we have
this if (module.hot),

87
00:06:14.620 --> 00:06:18.538
and this module object isn't just like,
where on earth does this thing come from?

88
00:06:18.538 --> 00:06:21.102
Just remember, module.exports,

89
00:06:21.102 --> 00:06:26.567
it's that same object that you're getting
in a in a regular CommonJS module.

90
00:06:26.567 --> 00:06:31.570
It's the one that webpack is using
to export your modules for you.

91
00:06:31.570 --> 00:06:36.950
So webpack just monkey patches
a variable called hot.

92
00:06:36.950 --> 00:06:41.540
So when you're running
webpack in hot mode.

93
00:06:42.600 --> 00:06:45.670
So we go to our package.json and again,

94
00:06:45.670 --> 00:06:50.450
it's right here, in our dev script,
where we say okay, turn on hot mode.

95
00:06:50.450 --> 00:06:52.790
You can do this also
in the webpack config.

96
00:06:52.790 --> 00:06:56.270
But you wouldn't wanna do this
normally like in productions,

97
00:06:56.270 --> 00:06:59.660
certainly not,
it's not a production feature.

98
00:06:59.660 --> 00:07:03.530
But when that is turned on,
then this code runs.

99
00:07:03.530 --> 00:07:06.150
When it's turned off,
then this code is deleted.

100
00:07:06.150 --> 00:07:10.020
It's turned into dead code and
then uglify will remove it.

101
00:07:10.020 --> 00:07:12.960
And so what normally will happen
is you'll get this code running,

102
00:07:12.960 --> 00:07:14.229
you'll get a console.info.

103
00:07:14.229 --> 00:07:18.857
But if you didn't want to have
that console info in production,

104
00:07:18.857 --> 00:07:22.120
you could easily work around that.

105
00:07:22.120 --> 00:07:26.072
And then ultimately what's
gonna happen is this bootstrap,

106
00:07:26.072 --> 00:07:28.967
is we're gonna say okay, on window, load.

107
00:07:28.967 --> 00:07:31.510
So this is exactly what we had
before was this bootstrap function.

108
00:07:32.590 --> 00:07:38.280
So when hot module reloading is turned on,

109
00:07:38.280 --> 00:07:44.420
then we're going to say, okay,
we'll accept this module itself.

110
00:07:44.420 --> 00:07:47.700
So there are actually
a couple of APIs into this.

111
00:07:47.700 --> 00:07:52.616
So if we wanted to do
something special for

112
00:07:52.616 --> 00:07:56.694
the app file, then we can do this.

113
00:07:56.694 --> 00:08:02.530
And then we get the newApp and
do stuff with app right there.

114
00:08:02.530 --> 00:08:06.690
But I want to accept all modules for
this project.

115
00:08:06.690 --> 00:08:10.962
And so I'm just gonna say accept pretty
much everything and what I get back is,

116
00:08:10.962 --> 00:08:13.420
all right,
I just get a call back with the Error.

117
00:08:14.440 --> 00:08:19.901
And so when anything is updated,
including this bootstrap file itself,

118
00:08:19.901 --> 00:08:23.171
then it's going to rerun this entire file.

119
00:08:23.171 --> 00:08:28.050
And it's going to say okay,
if I'm reloading then I'm gonna log out.

120
00:08:28.050 --> 00:08:29.824
That hey, I'm reloading, and

121
00:08:29.824 --> 00:08:33.780
I'm gonna call app.onLoad which is
gonna re-render the entire app.

122
00:08:33.780 --> 00:08:38.940
So it essentially does the same
thing that we're doing here already.

123
00:08:38.940 --> 00:08:45.830
But it will maintain the state
of the rest of our application.

124
00:08:45.830 --> 00:08:48.500
In a React context this
makes a lot more sense.

125
00:08:48.500 --> 00:08:53.161
This is actually why Dan Abramov or
Abbermoff created Redux,

126
00:08:53.161 --> 00:08:56.935
so that he could separate
his state from his view.

127
00:08:56.935 --> 00:09:01.302
So he could update his view all he wanted
and his state would stay preserved.

128
00:09:01.302 --> 00:09:06.120
And so Hot Module Replacement actually
really only caters to certain

129
00:09:06.120 --> 00:09:10.310
types of apps that have those
two kinds of things separate.

130
00:09:10.310 --> 00:09:14.620
Although, still it can be really
useful in other contexts as well.

131
00:09:14.620 --> 00:09:18.020
But that's one of the reasons why I
haven't really used it a whole bunch

132
00:09:18.020 --> 00:09:24.160
because you have to kind of form
your code around this feature.

133
00:09:24.160 --> 00:09:25.730
But once you have it, it's amazing.

134
00:09:25.730 --> 00:09:29.290
And if you are using React,

135
00:09:29.290 --> 00:09:34.550
then there's a transform,

136
00:09:34.550 --> 00:09:39.620
I think it's a babel transform for
React Hot Module Replacement that makes it

137
00:09:39.620 --> 00:09:42.910
a lot easier so
you don't have to do this stuff yourself.

138
00:09:42.910 --> 00:09:48.430
And one other thing, this works on Node,
as well with Express.

139
00:09:48.430 --> 00:09:50.830
And so
if you want to see an example of that,

140
00:09:50.830 --> 00:09:56.110
Eric Clemmons has a good example
right here that you can look at.

141
00:09:56.110 --> 00:10:01.420
Okay, so that was a lot of words,
I am open for questions now.

142
00:10:05.030 --> 00:10:08.570
&gt;&gt; Speaker 2: That only works if
you're running the webpack-dev-server?

143
00:10:08.570 --> 00:10:14.160
&gt;&gt; Kent C Dodds: Yes, in addition
to the hot command line flag, yeah.

144
00:10:14.160 --> 00:10:18.160
And you could also set that in
the webpack config as well.

145
00:10:21.630 --> 00:10:27.680
There are some places where people are
using the webpack-dev-server Node API and

146
00:10:27.680 --> 00:10:28.785
you set it there as well.

147
00:10:28.785 --> 00:10:33.353
But I don't think I've ever seen somebody
use it in the webpack config before.

148
00:10:33.353 --> 00:10:36.720
It's mostly CLI or
if you're using the Node package.

