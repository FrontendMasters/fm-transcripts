WEBVTT

1
00:00:00.000 --> 00:00:04.086
[MUSIC]

2
00:00:04.086 --> 00:00:06.300
&gt;&gt; Kent C Dodds: Let's talk
about Commons Chunking here.

3
00:00:06.300 --> 00:00:11.300
So again we're trying to optimize
the results of our web pack build,

4
00:00:11.300 --> 00:00:16.430
all of our bundles,
to be as small as possible but also

5
00:00:18.280 --> 00:00:22.880
make it so that the browser can cash
the assets for as long as possible.

6
00:00:22.880 --> 00:00:26.080
So say you have two files and

7
00:00:26.080 --> 00:00:30.880
one of them is, so
the user loads both of the files and

8
00:00:30.880 --> 00:00:35.280
then you change only one of them, now
the user only needs to load that one file.

9
00:00:35.280 --> 00:00:36.730
The other one is cached, right?

10
00:00:36.730 --> 00:00:41.160
So if you have some code that doesn't
change very frequently this would

11
00:00:41.160 --> 00:00:45.839
be a really good candidate for
putting it in the Commons Chunk, so

12
00:00:45.839 --> 00:00:49.890
that like any time you make changes to
this other code that does change more

13
00:00:49.890 --> 00:00:52.420
frequently people don't
have to re-download that.

14
00:00:52.420 --> 00:00:56.090
And so the browser has it in its cache and
it loads much faster.

15
00:00:56.090 --> 00:00:58.645
So that's the idea behind
behind Commons Chunking.

16
00:00:58.645 --> 00:01:03.935
Another kind of, to kind of
conceptualize it, you can have multiple

17
00:01:03.935 --> 00:01:08.945
apps that use the same common files,
like lodash would be a great example.

18
00:01:08.945 --> 00:01:11.535
I use lodash for every example.

19
00:01:11.535 --> 00:01:12.605
I should be more creative.

20
00:01:12.605 --> 00:01:17.590
jQuery, or React, or D3 some of

21
00:01:17.590 --> 00:01:22.730
these bigger things and vendor files
go really well as a Commons Chunk.

22
00:01:22.730 --> 00:01:27.205
So then here's all the like, this is
the bundle for app one, two, three,

23
00:01:27.205 --> 00:01:27.915
and four and

24
00:01:27.915 --> 00:01:32.911
those things are specific to these these
different apps or these different pages.

25
00:01:32.911 --> 00:01:36.511
But then this is the JavaScript
that's common between them and so

26
00:01:36.511 --> 00:01:39.464
the user goes to app one they
load all the app one code.

27
00:01:39.464 --> 00:01:42.530
Then they go to app two,
they only need to load the app.

28
00:01:42.530 --> 00:01:44.170
Well sorry, they go to app one,

29
00:01:44.170 --> 00:01:47.330
they load the app one code
as well as the common stuff.

30
00:01:47.330 --> 00:01:49.590
Then they go to app two,
they load the app two code but

31
00:01:49.590 --> 00:01:52.620
because they already went to app one
they don't need to re-download that.

32
00:01:53.740 --> 00:01:59.160
The alternative of course being that
app one itself has all of app one's

33
00:01:59.160 --> 00:02:03.790
code as well as all this common stuff and
that's kind of what we have right now.

34
00:02:03.790 --> 00:02:08.170
As if we had multiple apps or
something then we would like all of

35
00:02:08.170 --> 00:02:13.270
the all that stuff would be bundled
together into each individual app and

36
00:02:13.270 --> 00:02:18.050
so they'd have to download that much for
every single app that they go to.

37
00:02:18.050 --> 00:02:22.600
So this is a pretty common problem,
and I'm pretty certain

38
00:02:22.600 --> 00:02:26.900
like I can't think of a single type of
application where this wouldn't help.

39
00:02:28.700 --> 00:02:32.840
Yeah, pretty much no application
this could be beneficial.

