WEBVTT

1
00:00:00.218 --> 00:00:03.847
[MUSIC]

2
00:00:03.847 --> 00:00:07.578
&gt;&gt; Kent C Dodds: One thing that webpack
does is if you have images and CSS and

3
00:00:07.578 --> 00:00:12.375
stuff in the beginning when we see this
it's gonna all go into our bundle but

4
00:00:12.375 --> 00:00:14.690
we're gonna wanna split that out.

5
00:00:14.690 --> 00:00:17.379
So we get caching and stuff and
fonts won't be able to go into the bundle,

6
00:00:17.379 --> 00:00:19.270
we'll have to split those out.

7
00:00:19.270 --> 00:00:23.180
And so I don't want to litter my
root directory with the bundle and

8
00:00:23.180 --> 00:00:23.770
all that stuff.

9
00:00:23.770 --> 00:00:28.620
So the way that we're gonna tackle
that problem is we're going to add

10
00:00:28.620 --> 00:00:33.270
a path here to indicate the path
that we want this bundle to land in.

11
00:00:33.270 --> 00:00:36.770
And we're going, that needs to be an
absolute path so we're gonna use resolve.

12
00:00:36.770 --> 00:00:38.760
We're gonna get rid of that guy.

13
00:00:38.760 --> 00:00:41.510
And we're gonna resolve to
the dist directory, and

14
00:00:41.510 --> 00:00:43.500
you can call this build, or
you can call whatever you want.

15
00:00:43.500 --> 00:00:48.850
I like using the term dist,
distribution, and

16
00:00:48.850 --> 00:00:56.356
so that will make your bundle get
saved to a directory called dist.

17
00:00:56.356 --> 00:01:02.035
And so then when you, well, because it's
gonna be in a different place, we need

18
00:01:02.035 --> 00:01:07.810
to go to your index.html and update the
script for our bundle to be dist/bundle.

19
00:01:07.810 --> 00:01:12.189
And then you should be able to
run your webpack-dev-server or

20
00:01:12.189 --> 00:01:17.902
well you should be able to run your build
and then MPM start, and the app will load.

21
00:01:17.902 --> 00:01:23.870
But if you run webpack-dev-server right
now it's not going to work for you.

22
00:01:25.790 --> 00:01:29.810
Well if you run the build first and
then webpack-dev-server, it will work.

23
00:01:29.810 --> 00:01:32.322
Or it will look it'll work,
let me show you what I mean.

24
00:01:32.322 --> 00:01:37.440
So we'll go ahead and run the build:dev.

25
00:01:37.440 --> 00:01:42.500
And then we'll run npm run dev
to run our webpack-dev-server.

26
00:01:42.500 --> 00:01:44.860
And will refresh and
everything is working, right.

27
00:01:44.860 --> 00:01:49.480
But if I go to my bootstrap file and
update it to hello worlds.

28
00:01:49.480 --> 00:01:50.410
And I refresh it.

29
00:01:50.410 --> 00:01:55.480
That is not updating,
it still says simply, whoops, hello world.

30
00:01:55.480 --> 00:02:00.040
And the reason for that is webpack says,
anytime you get a request to where

31
00:02:00.040 --> 00:02:05.100
the bundle should be, I'm going to send
you the in memory bundle that I have.

32
00:02:05.100 --> 00:02:09.230
If it's not a request to
the bundle that I have, then I'm

33
00:02:09.230 --> 00:02:12.924
going to forge you onto the file system,
and serve up statically whatever that is.

34
00:02:14.080 --> 00:02:19.820
So it just so happens that when it goes to
get our bundle.js, it's gonna say, okay so

35
00:02:19.820 --> 00:02:24.830
that file I expect it to be at the root.

36
00:02:24.830 --> 00:02:28.590
In fact it says that in our output here.

37
00:02:30.890 --> 00:02:33.380
The result is served from /.

38
00:02:33.380 --> 00:02:38.701
And so if we actually go to bundle.js
here, then we're gonna find our bundle and

39
00:02:38.701 --> 00:02:42.317
this has all the webpack-dev-server
stuff in here.

40
00:02:42.317 --> 00:02:46.190
Somewhere in here it's hello worlds,
yeah, there's our module right there.

41
00:02:47.230 --> 00:02:51.820
Don't worry, you're not shipping all this
to production this is all dev stuff.

42
00:02:51.820 --> 00:02:56.784
And so yeah, it's serving the bundle from
/ but in our index.html we're looking for

43
00:02:56.784 --> 00:02:58.670
it from dist/bundle.js.

44
00:02:58.670 --> 00:03:05.800
So what it's actually serving us is
what we've built with build dev command.

45
00:03:05.800 --> 00:03:11.748
And so
what we need to do then is we're gonna

46
00:03:11.748 --> 00:03:16.350
go to our webpack config and
we need to say the public path

47
00:03:17.370 --> 00:03:22.176
is, /dist/.

48
00:03:22.176 --> 00:03:29.960
Actually some loaders use this to know
where to put image files or font files,

49
00:03:29.960 --> 00:03:33.520
and webpack-dev-server uses this to
know where to serve our bundle from.

50
00:03:35.810 --> 00:03:40.696
So then if we run, let's go ahead and
we'll delete the dist directory so

51
00:03:40.696 --> 00:03:45.260
that we're not fooled by that again,
and then we'll run npm dev and

52
00:03:45.260 --> 00:03:49.130
you should be able to load the app and
go to the bootstrap.

53
00:03:51.800 --> 00:03:53.250
And have that update also.

54
00:04:01.670 --> 00:04:05.100
So Irvin wants me to cover
my favorite Adam packages.

55
00:04:05.100 --> 00:04:08.640
Maybe sometime I'll
show you what I've got.

56
00:04:08.640 --> 00:04:18.292
I like Adam a lot
&gt;&gt; Speaker 2: Could

57
00:04:18.292 --> 00:04:19.968
you go back to your webpack config file?

58
00:04:19.968 --> 00:04:20.493
&gt;&gt; Kent C Dodds: Sure.

59
00:04:27.664 --> 00:04:32.520
&gt;&gt; Kent C Dodds: Has anybody seen webpack
validator help them out at all yet.

60
00:04:32.520 --> 00:04:33.044
A little bit.

61
00:04:42.266 --> 00:04:45.325
&gt;&gt; Kent C Dodds: So Billy's asking
if we're gonna use post CSS or

62
00:04:45.325 --> 00:04:47.419
another preprocessor like SAS.

63
00:04:48.720 --> 00:04:51.820
We're not actually,
which might be surprising cuz that's

64
00:04:51.820 --> 00:04:54.790
probably most of you want
to do something like that.

65
00:04:54.790 --> 00:05:00.530
The reason that we're not is because it's
pretty dead easy, or pretty simple, as

66
00:05:00.530 --> 00:05:05.310
far as all that you have to do, you just
install a loader, you add it to a loaders

67
00:05:05.310 --> 00:05:10.330
array that you're gonna see in a little
bit, and then you're pretty much good.

68
00:05:10.330 --> 00:05:13.470
You don't have to do too much,
you can configure it as well.

69
00:05:13.470 --> 00:05:19.180
But yeah I figured we could
focus on other things.

70
00:05:20.740 --> 00:05:22.150
And caching strategies,

71
00:05:22.150 --> 00:05:26.009
Daniel is asking about caching strategies
to speed up consecutive builds.

72
00:05:27.140 --> 00:05:30.360
So there are some things that you can do

73
00:05:30.360 --> 00:05:33.870
with Babel to cache your
Babel transpilation.

74
00:05:33.870 --> 00:05:37.050
I'm not gonna cover those things,
you can look at the dox for that.

75
00:05:38.970 --> 00:05:42.914
Yeah that I know that
webpack is also like that.

76
00:05:42.914 --> 00:05:45.670
The webpack team is working on
caching things themselves just

77
00:05:45.670 --> 00:05:46.570
automatically for you.

78
00:05:48.120 --> 00:05:49.920
So it'll speed things up even further.

79
00:05:51.500 --> 00:05:55.710
And why is the dist folder not
showing now, cuz I deleted it.

80
00:05:55.710 --> 00:05:59.913
So if I re-run the build, and
then it's gonna add that dist folder and

81
00:05:59.913 --> 00:06:03.974
that's ultimately I'm gonna ship
my dist directory to my CDN, but

82
00:06:03.974 --> 00:06:08.840
during development it doesn't appear
because it's being served up in memory.

83
00:06:11.046 --> 00:06:17.616
&gt;&gt; Kent C Dodds: Victor's asking if I can
show how I set up webpack-dev-server.

84
00:06:17.616 --> 00:06:24.530
It's actually just a dev script
with webpack-dev-server.

85
00:06:24.530 --> 00:06:26.598
We're gonna add some arguments
a little bit later, but

86
00:06:26.598 --> 00:06:28.494
right now it doesn't need
to be any more than that.

87
00:06:32.171 --> 00:06:37.955
&gt;&gt; Kent C Dodds: Yeah and the index.html
will be pointing to dist/bundle.js.

88
00:06:41.080 --> 00:06:45.666
&gt;&gt; Speaker 3: I was fighting npm issues,
the goal of this eventually is that all of

89
00:06:45.666 --> 00:06:49.410
those script tags above
bundle.js will be gone.

90
00:06:49.410 --> 00:06:50.690
&gt;&gt; Kent C Dodds: Yep, exactly.

91
00:06:50.690 --> 00:06:51.410
I'm glad that you asked that,

92
00:06:51.410 --> 00:06:54.640
cuz it reminded me of one other
thing that I wanted to touch on.

93
00:06:54.640 --> 00:06:59.732
How many people are hoping to
implement webpack in an existing app?

94
00:06:59.732 --> 00:07:04.650
Okay, are any of those apps just
using script tags right now?

95
00:07:04.650 --> 00:07:06.230
Okay.
Fun stuff right.

96
00:07:06.230 --> 00:07:07.390
That's awesome.

97
00:07:07.390 --> 00:07:12.596
If it's not, you're probably using
grunt or gulp to compile them, right.

98
00:07:12.596 --> 00:07:18.390
So, yeah, so part of the reason that
I'm showing you how to do it this way

99
00:07:18.390 --> 00:07:23.640
is because if you have in your mind some
idea that you can just take your app and

100
00:07:23.640 --> 00:07:26.300
spend two weeks working
on a rewrite to webpack.

101
00:07:26.300 --> 00:07:27.975
You are mistaken, that will fail.

102
00:07:27.975 --> 00:07:31.527
[LAUGH] So what the better approach of,

103
00:07:31.527 --> 00:07:37.870
it will not necessarily fail,
you're all successful people.

104
00:07:37.870 --> 00:07:43.710
But a better approach would be to iterate
on upgrading to using webpack and

105
00:07:43.710 --> 00:07:46.630
so, actually right now, well,

106
00:07:46.630 --> 00:07:50.710
once we add the production stuff,
that's what we're doing next.

107
00:07:50.710 --> 00:07:53.510
But once we add
the production build portion,

108
00:07:53.510 --> 00:07:55.300
then we could actually commit this and
ship it.

109
00:07:55.300 --> 00:07:58.300
And all you have to do is make sure
you run the webpack build before

110
00:07:58.300 --> 00:08:00.444
you ship it off to production.

111
00:08:00.444 --> 00:08:07.180
And so what's cool about that is, you can
spend a day, or even just an afternoon

112
00:08:07.180 --> 00:08:11.990
adding webpack to your process and
then you can iterate from there.

113
00:08:11.990 --> 00:08:15.265
The last thing that you want to have
happen is start working on a two week

114
00:08:15.265 --> 00:08:18.280
refactor to make this work.

115
00:08:18.280 --> 00:08:21.175
And then product comes and says my
goodness, we have this client, they're

116
00:08:21.175 --> 00:08:26.390
gonna buy if we can add this one feature
and you need to stop what you're doing.

117
00:08:26.390 --> 00:08:28.810
Then you come back to your refactor and
three weeks later and

118
00:08:28.810 --> 00:08:31.720
there merge conflicts everywhere and
you have to start over.

119
00:08:31.720 --> 00:08:37.840
So the better approach is to iterate or
refactoring.

120
00:08:37.840 --> 00:08:39.970
And so that's what exactly
what we're we're doing here.

121
00:08:41.380 --> 00:08:43.110
So glad that you asked that.

122
00:08:43.110 --> 00:08:46.340
Okay I think we're gonna move on,
any, yeah another question.

123
00:08:46.340 --> 00:08:49.290
&gt;&gt; Speaker 4: Can you explain one
more time why the reload didn't

124
00:08:49.290 --> 00:08:50.800
work unless you put in the publicPath?

125
00:08:52.000 --> 00:08:56.856
&gt;&gt; Kent C Dodds: Yeah so,
without publicPath then webpack-dev-server

126
00:08:56.856 --> 00:09:02.320
assumes that you want to serve
the bundle from just slash.

127
00:09:02.320 --> 00:09:05.470
To be perfectly honest with you,
I'm not sure why it doesn't just assume

128
00:09:05.470 --> 00:09:10.840
if I want my output file path to be in
dist that's where my result will be.

129
00:09:10.840 --> 00:09:14.300
I don't understand exactly
the intricacies behind that.

130
00:09:14.300 --> 00:09:18.790
But I do know that some loaders like
the file loader and the URL loader,

131
00:09:18.790 --> 00:09:24.090
also use publicPath to know
where to update URLs for files.

132
00:09:24.090 --> 00:09:28.760
I do know that also puclibPath
can be dynamic, and so

133
00:09:28.760 --> 00:09:31.960
if you shift some of
your assets to a CDN then

134
00:09:31.960 --> 00:09:36.660
you can dynamically set the publicPath so
it knows where to get those assets.

135
00:09:36.660 --> 00:09:40.020
So that's potentially the reason.

136
00:09:40.020 --> 00:09:43.440
But yeah, so the reason that it wasn't
updating was because you would run

137
00:09:43.440 --> 00:09:46.047
the build, and
it would build it to the dist directory.

138
00:09:46.047 --> 00:09:51.145
But then webpack would serve up its
in memory bundle to the / route,

139
00:09:51.145 --> 00:09:53.739
so not /dist/ but just /, and so

140
00:09:53.739 --> 00:09:59.240
what you would be getting is
the stale version of the bundle.

141
00:09:59.240 --> 00:10:00.300
Yeah.

142
00:10:00.300 --> 00:10:02.120
&gt;&gt; Speaker 5: One question
on webpack config.

143
00:10:02.120 --> 00:10:05.890
How do you know whether you needed
absolute path or relative path?

144
00:10:05.890 --> 00:10:09.320
Entry you have relative path is absolute.

145
00:10:09.320 --> 00:10:11.470
&gt;&gt; Kent C Dodds: Yeah
that's a great question.

146
00:10:11.470 --> 00:10:18.950
So, I wish that I could give
you a better answer than this.

147
00:10:18.950 --> 00:10:25.620
But probably the best way, even
validator's not gonna catch our context.

148
00:10:25.620 --> 00:10:28.190
If we do path though it'll
catch us on this one.

149
00:10:30.570 --> 00:10:31.130
Just kidding.

150
00:10:33.040 --> 00:10:37.090
Actually those things actually have
some other special properties.

151
00:10:37.090 --> 00:10:42.765
So as far as whether to know, docs,

152
00:10:42.765 --> 00:10:49.020
honestly yeah, and just experience.

153
00:10:49.020 --> 00:10:53.270
I know these things also because I
have the dev right in front of me, so

154
00:10:53.270 --> 00:10:54.260
that's helpful too.

155
00:10:54.260 --> 00:10:56.890
But yeah you'll want to check the docs.

156
00:10:56.890 --> 00:11:00.020
Then after we finish with
the production stuff,

157
00:11:00.020 --> 00:11:05.740
I'm gonna show you how to debug this
using Chrome Inspector and stuff.

158
00:11:05.740 --> 00:11:08.240
I'm really excited to show you that.

159
00:11:08.240 --> 00:11:11.060
And so yeah hopefully that
can also be helpful as well.

