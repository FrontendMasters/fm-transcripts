WEBVTT

1
00:00:00.000 --> 00:00:04.137
[MUSIC]

2
00:00:04.137 --> 00:00:07.340
&gt;&gt; Kent C Dodds: So Billy's asking
about hash as a service worker.

3
00:00:09.660 --> 00:00:14.110
Those hashes are invalidated
every time that, or

4
00:00:14.110 --> 00:00:15.970
are updated every time
you rerun the build.

5
00:00:15.970 --> 00:00:20.690
So you run the build,
the hashes get updated.

6
00:00:20.690 --> 00:00:25.160
The service worker gets
updated as well and

7
00:00:25.160 --> 00:00:28.850
then when it gets loaded into the browser,

8
00:00:28.850 --> 00:00:32.910
that script is going to take
this service record cache and

9
00:00:32.910 --> 00:00:37.762
remove anything that isn't in that
list of assets in the service worker.

10
00:00:37.762 --> 00:00:43.900
And so, basically it just takes care
of everything and then preloads

11
00:00:43.900 --> 00:00:48.100
all the new assets that it didn't have
before and it loads those into the cache.

12
00:00:48.100 --> 00:00:49.870
So it'll work offline.

13
00:00:49.870 --> 00:00:54.080
And then Alberto asks, what's
the advantage of creating a pre-deploy

14
00:00:54.080 --> 00:00:57.350
task instead of calling build and deploy.

15
00:00:57.350 --> 00:01:00.040
So you could totally do that.

16
00:01:00.040 --> 00:01:03.510
I like how npm scripts
kind of compose together.

17
00:01:03.510 --> 00:01:05.482
It makes sense in my mind but yeah.

18
00:01:05.482 --> 00:01:10.140
I don't really see anything
wrong with just doing like.

19
00:01:10.140 --> 00:01:15.410
You could totally just do, oops,

20
00:01:15.410 --> 00:01:18.910
npm run, build and deploy.

21
00:01:18.910 --> 00:01:19.619
Either way works.

22
00:01:20.710 --> 00:01:23.990
And then Danielle is asking, Kent,

23
00:01:23.990 --> 00:01:29.350
you mentioned you're using an alternative
solution to DLLs/prefetch.

24
00:01:29.350 --> 00:01:31.220
Can you tell a little bit more?

25
00:01:31.220 --> 00:01:36.730
That different solution is the offline
mode, so I don't need to prefetch modules.

26
00:01:36.730 --> 00:01:39.330
The idea behind the prevention
module is you're on the login page,

27
00:01:39.330 --> 00:01:41.400
go fetch the rest of this stuff.

28
00:01:41.400 --> 00:01:45.230
This offline plugin is doing that for me.

29
00:01:45.230 --> 00:01:49.480
Because I get to the login screen,
I get all the stuff that I need, and

30
00:01:49.480 --> 00:01:52.970
while I'm filling in the form,
it's pre-fetching all my stuff.

31
00:01:52.970 --> 00:01:57.170
So I don't need the pre-fetch plugin
when I'm using offline plugin.

32
00:01:57.170 --> 00:02:00.940
Although, if you do want to support
browsers that don't support service

33
00:02:00.940 --> 00:02:04.970
worker, and you you don't want

34
00:02:04.970 --> 00:02:09.570
to use app cache, then the prefetch
plugin could be useful in that scenario.

35
00:02:10.950 --> 00:02:13.150
But I don't have an example of that,
sorry.

36
00:02:14.230 --> 00:02:15.620
So Scott is asking,

37
00:02:15.620 --> 00:02:20.800
what are the main reasons you have
stopped using SAS in favor of actual CSS?

38
00:02:20.800 --> 00:02:26.240
So actually to be totally clear
I don't actually use actual CSS,

39
00:02:26.240 --> 00:02:28.160
I don't use CSS files anymore.

40
00:02:28.160 --> 00:02:32.030
So this is just my opportunity to
tell you about something that I love.

41
00:02:32.030 --> 00:02:35.950
It's Aphrodite, and
no it's not a woman, I am married.

42
00:02:35.950 --> 00:02:39.594
No, it is a library for CSS and JS.

43
00:02:39.594 --> 00:02:44.543
And the cool thing about it is,
so you're doing the CSS and

44
00:02:44.543 --> 00:02:48.886
JS that the React developers
have come to love, and

45
00:02:48.886 --> 00:02:53.130
some other communities
are starting to get into.

46
00:02:53.130 --> 00:02:55.860
But the cool thing about
it is that it doesn't have

47
00:02:55.860 --> 00:02:58.140
the drawbacks of in line styles.

48
00:02:58.140 --> 00:03:00.250
Some of the drawbacks of in line styles,
and

49
00:03:00.250 --> 00:03:06.880
by in line styling I mean a style you just
put right here, foo is bar, whatever.

50
00:03:06.880 --> 00:03:11.620
Some of the drawbacks are if you have
a long list and you put an inline style on

51
00:03:11.620 --> 00:03:15.680
every element in that list or even worse,
a grid and inline styles in every cell of

52
00:03:15.680 --> 00:03:19.840
that grid and elements inside those cells,
that's a performance drain big time.

53
00:03:19.840 --> 00:03:23.140
So that's yeah,
that's one area where it's really bad.

54
00:03:23.140 --> 00:03:27.690
Also to support stuff like hover States or
pseudo States and pseudo elements

55
00:03:27.690 --> 00:03:32.780
in media queries requires JavaScript tax
and dependencies on frameworks like React.

56
00:03:32.780 --> 00:03:37.110
So like Radium is a really
popular solution for CSS and JS.

57
00:03:37.110 --> 00:03:40.980
But it's dependent on React because it
has to hook into React lifecycle hooks to

58
00:03:40.980 --> 00:03:45.050
support pseudo elements,
pseudo states and media queries.

59
00:03:45.050 --> 00:03:51.320
So Aphrodite takes your JavaScript object
and generates actual CSS with it and

60
00:03:51.320 --> 00:03:56.010
it sticks it into a style
tag that it creates.

61
00:03:56.010 --> 00:03:59.990
And this happens dynamically if
performance becomes an issue with that

62
00:03:59.990 --> 00:04:04.750
dynamic in this, then you can do server
rendering and it's lightning fast.

63
00:04:06.970 --> 00:04:11.371
Javascriptair.com, most of it is using
Aphrodite because it works with server

64
00:04:11.371 --> 00:04:12.738
rendering really well.

65
00:04:12.738 --> 00:04:19.560
So there are lots of different things
about CSS and JS that I could talk about.

66
00:04:19.560 --> 00:04:26.250
One of my favorite parts about it is
the explicit dependency aspect of it.

67
00:04:26.250 --> 00:04:30.990
I just I really like that, CSS modules is
cool but it ties you down to a bundler.

68
00:04:30.990 --> 00:04:35.280
Javascriptair.com doesn't
use a bundler at all.

69
00:04:35.280 --> 00:04:40.390
It's all just statically generated it,
doesn't have a need for webpack cuz it's,

70
00:04:40.390 --> 00:04:43.730
you're not actually bundling assets,
you're just generating HTML.

71
00:04:43.730 --> 00:04:49.940
And so I don't have to use webpack to
get the value of explicit dependencies.

72
00:04:49.940 --> 00:04:55.930
The other thing is doing CSS and JS allows
you to use an actual language like a real

73
00:04:55.930 --> 00:05:02.120
language that's turning complete,
rather than something like CSS or

74
00:05:02.120 --> 00:05:07.300
SAS or Stylus that gives
the appearance of language but

75
00:05:07.300 --> 00:05:11.364
is not actually have all of the full
features that you could get in JavaScript.

76
00:05:11.364 --> 00:05:16.911
So, and then most people, when they think
about this, their mind is racing like,

77
00:05:16.911 --> 00:05:21.000
well, what about variables and what about
like sharing mixins and stuff like that?

78
00:05:21.000 --> 00:05:25.260
And I normally just say,
stop and hold on for a second.

79
00:05:25.260 --> 00:05:30.920
It's just JavaScript, so variables,
JavaScript has got them and mixins.

80
00:05:30.920 --> 00:05:36.030
Those are functions, and
sharing things from one file to another.

81
00:05:36.030 --> 00:05:37.940
Those are modules and so,

82
00:05:37.940 --> 00:05:41.160
once you start to think about it,
it becomes really awesome.

83
00:05:41.160 --> 00:05:44.390
And I seriously diverted from
the topic of webpack but

84
00:05:44.390 --> 00:05:45.540
this is something that I really love.

85
00:05:45.540 --> 00:05:48.701
So thanks for bearing with me.

86
00:05:48.701 --> 00:05:51.600
[LAUGH] So any other questions?

87
00:05:51.600 --> 00:05:57.230
We're pretty much, actually,
looks like Oscar has a question.

88
00:05:57.230 --> 00:06:00.540
This service worker is minified,
how do I get unminified to read it?

89
00:06:01.570 --> 00:06:07.360
I'm just guessing here, but
I'm fairly certain that if you run

90
00:06:08.630 --> 00:06:15.600
the build without the dash-P flag,
then it's not gonna minify anything.

91
00:06:16.730 --> 00:06:20.930
And I expect that you should be able to,

92
00:06:20.930 --> 00:06:25.336
or just nmp start.

93
00:06:25.336 --> 00:06:29.550
And we'll go to local host.

94
00:06:31.220 --> 00:06:35.110
And if we pop open Sources, Service.

95
00:06:37.280 --> 00:06:40.930
Actually, well, hold on.

96
00:06:40.930 --> 00:06:43.910
Just kidding, it looks like
it's minified in here as well.

97
00:06:43.910 --> 00:06:46.640
So maybe you could go
to the source code and

98
00:06:46.640 --> 00:06:49.610
look at what the service
worker looks like there.

99
00:06:49.610 --> 00:06:54.090
Hold on a second, that looks incorrect.

100
00:06:55.320 --> 00:07:00.990
Actually, sorry one other thing
that you need to do in here is

101
00:07:00.990 --> 00:07:04.160
fix the source maps in
your webpack config,

102
00:07:06.110 --> 00:07:08.730
&gt;&gt; Kent C Dodds: To use eval instead,

103
00:07:14.049 --> 00:07:15.791
&gt;&gt; Kent C Dodds: And then we, oops,

104
00:07:15.791 --> 00:07:21.121
run the build and I would expect
that it would be unminified and

105
00:07:21.121 --> 00:07:26.310
if it's not, then you can go
ask an issues on that project.

106
00:07:26.310 --> 00:07:29.568
So if you go to a service worker.

107
00:07:29.568 --> 00:07:34.230
Yes, still minified.

108
00:07:34.230 --> 00:07:36.740
Sorry, I guess I just really
care about minifying your stuff.

