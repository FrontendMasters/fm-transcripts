WEBVTT

1
00:00:00.000 --> 00:00:04.126
[MUSIC]

2
00:00:04.126 --> 00:00:07.087
&gt;&gt; Kent C Dodds: Maybe I'll slowly
start going through the solution and

3
00:00:07.087 --> 00:00:10.340
I'll stop at some point and
you can finish.

4
00:00:10.340 --> 00:00:12.650
So I'm just going to copy this.

5
00:00:14.340 --> 00:00:20.280
So we have system.import the thing I
want to import is this render file.

6
00:00:20.280 --> 00:00:25.430
That holds all the require statements and

7
00:00:25.430 --> 00:00:28.890
everything to the modules that
are huge that I don't wanna load yet.

8
00:00:30.930 --> 00:00:36.160
And then,
I'm just going to console.log thing.

9
00:00:36.160 --> 00:00:40.127
So whatever it is that's coming back from
that I'm also looks like render graph

10
00:00:40.127 --> 00:00:43.632
originally is taking graph area and
store whatever those things are.

11
00:00:43.632 --> 00:00:48.320
So I'm going to accept those
same things here graph area and

12
00:00:48.320 --> 00:00:53.665
store and then I'm going to find
all the render graph references and

13
00:00:53.665 --> 00:00:58.330
just replace those with load and
render graph.

14
00:00:58.330 --> 00:00:59.720
And I'll get rid of that import.

15
00:01:01.550 --> 00:01:08.640
And now from here, you actually might
not even need to restart your server.

16
00:01:08.640 --> 00:01:13.310
It will create the chunked bundle for
you or the Code Split bundle for you.

17
00:01:14.340 --> 00:01:15.650
So if I refresh now.

18
00:01:16.800 --> 00:01:20.480
If you look at the kilobytes here 370.

19
00:01:20.480 --> 00:01:24.449
That's down from 2.1 megabytes.

20
00:01:24.449 --> 00:01:27.857
Yeah, so most users won't have
to pay that price anymore,

21
00:01:27.857 --> 00:01:30.856
If I click on this It's not
actually going to work but

22
00:01:30.856 --> 00:01:35.919
what you'll notice Is we have this 1.8 MB
file that's loaded when I clicked on that.

23
00:01:35.919 --> 00:01:40.950
And that's because it's now
resolving that System.import.

24
00:01:40.950 --> 00:01:42.450
If we pop open our console here,

25
00:01:42.450 --> 00:01:46.920
we'll see this object that has
a default property called updateGraph

26
00:01:46.920 --> 00:01:50.530
that looks like maybe something we want.
&gt;&gt; Speaker 2: Are source maps gonna

27
00:01:50.530 --> 00:01:53.640
continue to work and everything?
&gt;&gt; Kent C Dodds: Yep, magic.

28
00:01:55.330 --> 00:01:58.960
Yeah, so, Thomas is wondering.

29
00:02:00.570 --> 00:02:02.620
Code splitting by importing
a react component and

30
00:02:02.620 --> 00:02:05.300
attaching it to the dom
on the graph area node.

31
00:02:05.300 --> 00:02:10.200
Well we cover an example of code splitting
when loading a react component via JSX,

32
00:02:10.200 --> 00:02:14.160
only when a component is
loaded in the componentry that

33
00:02:14.160 --> 00:02:16.080
it actually requests dependencies.

34
00:02:16.080 --> 00:02:21.863
Yes so you could do something like
that you could do the system.import

35
00:02:21.863 --> 00:02:27.547
call in a component like mount and
then you could until the resolution

36
00:02:27.547 --> 00:02:32.266
of that module happened you'd
just have like a loading.

37
00:02:32.266 --> 00:02:37.178
Or have the user click on something and
then as a response to them clicking

38
00:02:37.178 --> 00:02:42.169
on that thing it's a system import and
then you'd say set state this thing

39
00:02:42.169 --> 00:02:45.890
is now loaded and
then it renders the loaded thing.

40
00:02:45.890 --> 00:02:50.994
So yeah this would actually be
really trivial in react and

41
00:02:50.994 --> 00:02:57.640
Andreas asking used side by side with
HTTP2 aggressive splitting plug in.

42
00:02:57.640 --> 00:02:58.170
That's a great question.

43
00:02:58.170 --> 00:03:03.083
Andreas I'm afraid I don't know the answer
that question I think I've heard

44
00:03:03.083 --> 00:03:04.150
of that plug in.

45
00:03:04.150 --> 00:03:06.760
But I've never used it before so

46
00:03:06.760 --> 00:03:09.550
I'm going to just push this
along a little bit further.

47
00:03:09.550 --> 00:03:13.878
So we're going to say Thing.default.

48
00:03:13.878 --> 00:03:19.000
Because that looks like that's
the thing that we cared about.

49
00:03:19.000 --> 00:03:23.800
Now when I click it I see this update
graph thing that takes a node in a store.

50
00:03:23.800 --> 00:03:28.910
Presumably this graph area, that's a node,
that's what we were passing to it before.

51
00:03:28.910 --> 00:03:33.750
So actually before I
shouldn't have deleted that.

52
00:03:35.020 --> 00:03:40.250
This is what we had before, so
I'm gonna put it right here.

53
00:03:41.610 --> 00:03:46.060
And so it looks like
thing.default is renderGraph.

54
00:03:46.060 --> 00:03:49.142
So I'm gonna say renderGraph = thing.

55
00:03:49.142 --> 00:03:53.926
And then I'm going to use
render graph the same way I

56
00:03:53.926 --> 00:03:58.823
did before which was just
basically this except with

57
00:03:58.823 --> 00:04:03.290
render graph instead of
loading render graph.

58
00:04:03.290 --> 00:04:10.290
I save that, I keep refreshing by habit
but cuz [INAUDIBLE] HMR I don't need to.

59
00:04:10.290 --> 00:04:11.160
And that works.

60
00:04:13.210 --> 00:04:16.570
And so that's the basic solution,

61
00:04:16.570 --> 00:04:19.420
I probably wouldn't call
this thing thing but yeah.

62
00:04:21.860 --> 00:04:25.315
Now that's interesting
graphArea to create an upper

63
00:04:25.315 --> 00:04:30.936
scope.
&gt;&gt; Kent C Dodds: Not

64
00:04:30.936 --> 00:04:34.586
sure why that's there but whatever.

65
00:04:34.586 --> 00:04:40.220
Here we'll just call this node.
&gt;&gt; Kent C Dodds: Actually in,

66
00:04:40.220 --> 00:04:41.849
here's a question from.

67
00:04:41.849 --> 00:04:45.890
Is it possible to put a variable
inside the system import statement?

68
00:04:45.890 --> 00:04:48.420
Yes actually it is possible to do that.

69
00:04:48.420 --> 00:04:53.020
So I don't have an example of this,
but this is a, I should have,

70
00:04:53.020 --> 00:04:55.708
I should have made an example of
this cuz this is really really cool.

71
00:04:55.708 --> 00:04:59.780
So with web pack let's say that here,

72
00:04:59.780 --> 00:05:05.900
let me think let me show you
something else really quick.

73
00:05:05.900 --> 00:05:08.449
Gonna show you a different
example entirely.

74
00:05:08.449 --> 00:05:11.490
We're gonna check out.

75
00:05:11.490 --> 00:05:18.670
No, I think it was, was it workshop?
&gt;&gt; Kent C Dodds: No

76
00:05:18.670 --> 00:05:25.350
it is egghead goodness, now I can't
remember what my branching scheme was.

77
00:05:25.350 --> 00:05:30.410
I've used this same repo for
a lot of different things yeah.

78
00:05:30.410 --> 00:05:39.230
So we'll say get checkout
lesson/code-splitting and we'll force it.

79
00:05:39.230 --> 00:05:43.340
So this code splitting example is
totally different npn run dev.

80
00:05:43.340 --> 00:05:47.981
And apparently even

81
00:05:47.981 --> 00:05:54.536
the scripts are different.

82
00:05:54.536 --> 00:05:59.939
Npn start, cool, so then if I'm in here,

83
00:05:59.939 --> 00:06:02.658
whoops, something.

84
00:06:02.658 --> 00:06:04.750
All my dependencies are busted.

85
00:06:04.750 --> 00:06:07.720
So I can't show you the actual
running example but

86
00:06:07.720 --> 00:06:09.290
I can show you the source code.

87
00:06:09.290 --> 00:06:13.740
So in here we have this fax loader thing.

88
00:06:13.740 --> 00:06:15.270
And all my dependencies report.

89
00:06:16.800 --> 00:06:21.130
So you had a fax list, and

90
00:06:21.130 --> 00:06:25.830
the fact text, and whenever you
clicked on this fax list thing,

91
00:06:25.830 --> 00:06:30.140
then it would import a default fact and
set the fax text.

92
00:06:30.140 --> 00:06:33.700
And all the facts are is like, whoa.

93
00:06:33.700 --> 00:06:35.968
Click on one of the animals to
see an interesting fact, and so

94
00:06:35.968 --> 00:06:36.954
then there's gorillas.

95
00:06:36.954 --> 00:06:39.630
And holy be quiet.

96
00:06:39.630 --> 00:06:42.670
Gorillas can catch human colds and
other illnesses, fun, interesting.

97
00:06:42.670 --> 00:06:44.928
Well not fun, sorry gorillas.

98
00:06:44.928 --> 00:06:48.633
But yeah, what's cool about this
is let's say you had 500 of these,

99
00:06:48.633 --> 00:06:52.826
you wouldn't want to have some switch
statement that said okay, if it's the fact

100
00:06:52.826 --> 00:06:56.901
about gorillas, then I want you to
load this system.importfact/gorillas,

101
00:06:56.901 --> 00:06:59.220
that'd be really kind of sad.

102
00:06:59.220 --> 00:07:03.934
And so instead it can be dynamic and
what web pack is gonna do is

103
00:07:03.934 --> 00:07:08.833
it's gonna say okay based off
of the information you've given

104
00:07:08.833 --> 00:07:13.549
me here I know that the potential
possible code split items or

105
00:07:13.549 --> 00:07:16.900
bundles that could be possible from this.

106
00:07:16.900 --> 00:07:21.737
Our default fact gorillas grasshoppers
Index and worse ostriches, so

107
00:07:21.737 --> 00:07:26.815
I'm going to make a bundle for every
single one of those and so regardless of

108
00:07:26.815 --> 00:07:31.830
whatever case it may be there will
always be a bundle for an existing file.

109
00:07:33.040 --> 00:07:36.210
So excellent question so yeah.

110
00:07:36.210 --> 00:07:40.957
Actually in my example
I kind of go crazy or

111
00:07:40.957 --> 00:07:47.876
in my solution I kind of go crazy
with the de-structuring and

112
00:07:47.876 --> 00:07:52.772
I just say default whoops, render graph.

113
00:07:52.772 --> 00:07:56.280
Yep and that works.

114
00:07:56.280 --> 00:07:57.580
Who else has finished?

115
00:07:59.000 --> 00:08:00.942
Okay, sweet.

116
00:08:00.942 --> 00:08:04.590
I think we're about ready to move on
unless there are other questions.

117
00:08:04.590 --> 00:08:05.552
&gt;&gt; Speaker 3: Big question,

118
00:08:05.552 --> 00:08:10.214
the system import if it's already
downloaded it once it won't download it

119
00:08:10.214 --> 00:08:10.990
again.
&gt;&gt; Kent C Dodds: Yeah,

120
00:08:10.990 --> 00:08:11.960
good question actually.

121
00:08:11.960 --> 00:08:13.170
Yeah I'm glad that you asked that.

122
00:08:13.170 --> 00:08:13.900
Let me demonstrate that.

123
00:08:13.900 --> 00:08:19.200
So here if I've got everything
loaded that I need to.

124
00:08:19.200 --> 00:08:21.630
It's small as ever and it's awesome.

125
00:08:21.630 --> 00:08:22.880
Then I click on this.

126
00:08:22.880 --> 00:08:26.280
It pops open or it goes and
loads that other bundle.

127
00:08:26.280 --> 00:08:30.000
And the cool thing about this is it
it creates an entirely new file but

128
00:08:30.000 --> 00:08:30.980
I don't have to think about it.

129
00:08:30.980 --> 00:08:35.590
I don't care what it's called I don't care
where it lives, web pack will keep track

130
00:08:35.590 --> 00:08:40.620
of where the files are,
and it will just load it.

131
00:08:40.620 --> 00:08:45.040
And so
yeah it pulls in this 1.8 megabytes file.

132
00:08:45.040 --> 00:08:46.990
Then if I toggle this off and
toggle it on again.

133
00:08:46.990 --> 00:08:50.900
It knows it's already been loaded.
&gt;&gt; Speaker 3: So I was trying to cache it.

134
00:08:50.900 --> 00:08:51.940
&gt;&gt; Kent C Dodds: Yeah, yeah.

135
00:08:51.940 --> 00:08:53.625
So actually, I see.

136
00:08:53.625 --> 00:08:54.367
Yeah,good call.
&gt;&gt; Speaker 3: Yeah.

137
00:08:54.367 --> 00:08:56.580
&gt;&gt; Kent C Dodds: Yeah, no, you're good.

138
00:08:56.580 --> 00:08:58.690
So yeah webpack does that for you.

139
00:08:58.690 --> 00:09:01.790
The other cool thing about this
is you'll notice that there,

140
00:09:01.790 --> 00:09:03.580
some of these have a response.

141
00:09:03.580 --> 00:09:05.352
Oops, wrong focus.

142
00:09:05.352 --> 00:09:06.680
Some of these have a response of three or

143
00:09:06.680 --> 00:09:10.550
four that means that it's not modified and
the browser can get it from the cache.

144
00:09:10.550 --> 00:09:16.220
If I hit like a hard refresh then I get
200 from all these and I'll load it.

145
00:09:16.220 --> 00:09:18.450
Brand new as if I'd never seen it before.

146
00:09:18.450 --> 00:09:21.960
And then I do another refresh and
I'll see three or fours.

147
00:09:23.200 --> 00:09:27.990
So the one of the reasons why
code splitting is really great is

148
00:09:27.990 --> 00:09:32.990
because now if I make a change
to all of my app code but

149
00:09:32.990 --> 00:09:38.049
I don't change the way that this separate

150
00:09:38.049 --> 00:09:44.740
code splits, file,
any of that react stuff.

151
00:09:44.740 --> 00:09:49.520
Then I'm not gonna have to, well,
I'm not gonna have to force the users to

152
00:09:49.520 --> 00:09:54.198
download any extra stuff just because
I changed the other app code.

153
00:09:54.198 --> 00:09:56.262
That's not 100% the case.

154
00:09:56.262 --> 00:09:59.716
We do have to do a little bit more work,
but we're going to do that work and then,

155
00:09:59.716 --> 00:10:01.021
yeah, that will be the case.

156
00:10:01.021 --> 00:10:02.280
It's going to be super cool.

157
00:10:03.700 --> 00:10:07.490
Is asking is there a best practice as to
where you should define your split points.

158
00:10:07.490 --> 00:10:10.080
I'm guessing it would
be very app specific.

159
00:10:10.080 --> 00:10:11.820
Yes it is pretty app specific.

160
00:10:11.820 --> 00:10:14.390
But a really good place is at your routes.

161
00:10:14.390 --> 00:10:16.943
So if you're using a router, angular too,

162
00:10:16.943 --> 00:10:21.853
can totally do you leverage code splitting
and so you're using the angular router.

163
00:10:21.853 --> 00:10:22.949
Or an UI router for

164
00:10:22.949 --> 00:10:27.629
Angular 2 that's exactly where you do
code splitting even if you're using

165
00:10:27.629 --> 00:10:32.700
Angular 1 that would be the place to code
split if you wanted to venture and react.

166
00:10:32.700 --> 00:10:35.250
And then also like there are these
one off areas that you're

167
00:10:35.250 --> 00:10:38.530
like yeah we wanna use D3 in
this one section of our app and

168
00:10:38.530 --> 00:10:40.006
that's where you'd want
to do code splitting.

169
00:10:40.006 --> 00:10:46.938
So, cool.

170
00:10:46.938 --> 00:10:53.667
Let's see, our time is 2:30.

171
00:10:53.667 --> 00:10:58.453
Okay, we're gonna actually
fly by caching a little

172
00:10:58.453 --> 00:11:03.140
bit because lots of it is
just kind of boilerplate.

173
00:11:03.140 --> 00:11:05.610
It's more like you need to
conceptually understand it and

174
00:11:05.610 --> 00:11:11.700
then you can like you can pretty much
get it when you look at the code.

175
00:11:11.700 --> 00:11:17.470
So, yeah let's move right along.

176
00:11:21.380 --> 00:11:23.130
So let me explain Commons Chunking.

177
00:11:24.870 --> 00:11:27.470
So actually for the next.

178
00:11:27.470 --> 00:11:32.590
Actually for the rest of the time we're
going to spend optimizing our webpack

179
00:11:33.680 --> 00:11:36.680
configurations so that our app
will load faster for the user.

180
00:11:38.560 --> 00:11:41.970
And that's pretty much one of
the main things that you can do with

181
00:11:41.970 --> 00:11:44.410
with web pack as far as optimization goes.

