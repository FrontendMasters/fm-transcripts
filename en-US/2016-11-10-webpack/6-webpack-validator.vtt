WEBVTT

1
00:00:00.000 --> 00:00:03.833
[MUSIC]

2
00:00:03.833 --> 00:00:04.713
&gt;&gt; Kent C Dodds: So questions?

3
00:00:04.713 --> 00:00:05.753
Yeah?

4
00:00:05.753 --> 00:00:07.146
&gt;&gt; Speaker 2: Is there any reason for

5
00:00:07.146 --> 00:00:12.120
using module exports instead of the ES6
syntax on the webpack config file?

6
00:00:12.120 --> 00:00:13.580
&gt;&gt; Kent C Dodds: Yeah
that's a great question,

7
00:00:13.580 --> 00:00:18.490
it's mostly because I was trying to avoid
throwing too many concepts at you, but

8
00:00:18.490 --> 00:00:21.260
we're actually gonna be talking about
ES6 modules in the course anyways.

9
00:00:21.260 --> 00:00:25.200
So I should have, but
then the other thing is,

10
00:00:25.200 --> 00:00:30.370
if you don't have the Babel,
it's webpack.config.Babel.js,

11
00:00:30.370 --> 00:00:33.560
so if you don't have the Babel bit,
then that will totally break.

12
00:00:33.560 --> 00:00:37.310
And until last night, I was not
planning on adding the Babel bit.

13
00:00:37.310 --> 00:00:42.070
But I added the Babel stuff so
that if people didn't have Node six,

14
00:00:42.070 --> 00:00:47.100
then maybe hopefully they
wouldn't have any problems.

15
00:00:47.100 --> 00:00:50.904
But yeah, so you could totally
use ES6 modules in that file.

16
00:00:50.904 --> 00:00:55.722
&gt;&gt; Speaker 2: And then another one is just
they didn't catch what the reason was for

17
00:00:55.722 --> 00:00:59.030
putting Babel in that
web config file name?

18
00:00:59.030 --> 00:00:59.890
&gt;&gt; Kent C Dodds: Yeah, so

19
00:00:59.890 --> 00:01:03.910
by putting Babel in there webpack says
you want me to transpile this with Babel.

20
00:01:03.910 --> 00:01:05.440
And so it does.

21
00:01:05.440 --> 00:01:08.665
So it transpiles it with
Babel before requiring it,

22
00:01:08.665 --> 00:01:11.615
that way you can use the ES6 modules and
stuff.

23
00:01:11.615 --> 00:01:17.408
And if you're on, one thing in particular
I kept running into was in the course I

24
00:01:17.408 --> 00:01:23.990
do use this destructuring and Node 4 does
not support destructuring, Node 6 does.

25
00:01:23.990 --> 00:01:27.360
So that was kind of the last
thing that I was like okay,

26
00:01:27.360 --> 00:01:30.555
yeah I should probably have
this transpiled just in case.

27
00:01:30.555 --> 00:01:31.134
Yes.
&gt;&gt; Speaker 3: Does it

28
00:01:31.134 --> 00:01:33.980
matter where in the file
name that Babel exists?

29
00:01:33.980 --> 00:01:37.437
&gt;&gt; Kent C Dodds: I am pretty certain
that it does, it needs to be at the end,

30
00:01:37.437 --> 00:01:38.364
yeah last one.

31
00:01:38.364 --> 00:01:43.166
In a way it's a little fortuitous that
people are running into problems because

32
00:01:43.166 --> 00:01:46.720
it illustrates why this
next bit is valuable.

33
00:01:46.720 --> 00:01:51.300
So, oops, so the webpack configuration

34
00:01:51.300 --> 00:01:55.550
object is not the easiest thing in
the world to be perfectly honest, and

35
00:01:55.550 --> 00:02:01.000
it's being worked on, but until it is
even more amazing than it already is.

36
00:02:01.000 --> 00:02:05.144
We have this cool thing
called webpack-validator, and

37
00:02:05.144 --> 00:02:08.264
I think the latest version is 2.2.7.

38
00:02:08.264 --> 00:02:13.050
So you would normally just install that,
but you already have it, so.

39
00:02:14.470 --> 00:02:20.700
And then we're going to require it into
here, here I'm gonna put it up here.

40
00:02:20.700 --> 00:02:25.945
Or webpack-validator,
those require the webpack-validator.

41
00:02:25.945 --> 00:02:31.159
And then all that you do is stick
it inside your export around

42
00:02:31.159 --> 00:02:36.374
your normal object, so
you pass your configuration object

43
00:02:36.374 --> 00:02:43.090
to the webpack-validator function,
and I think I spelled it wrong.

44
00:02:43.090 --> 00:02:44.440
&gt;&gt; Speaker 2: But you were consistent.

45
00:02:45.970 --> 00:02:47.630
&gt;&gt; Kent C Dodds: There we go.

46
00:02:47.630 --> 00:02:50.360
So yeah you could think
of it like this as well.

47
00:02:50.360 --> 00:02:51.377
So you could say config.

48
00:02:56.497 --> 00:03:00.506
&gt;&gt; Kent C Dodds: So you could do it either
way, right now we're just doing it,

49
00:03:00.506 --> 00:03:03.220
wrapping it inline like that.

50
00:03:03.220 --> 00:03:07.010
But what this is going to do for you is
if some of you who are having trouble,

51
00:03:07.010 --> 00:03:11.770
if you do this then you hopefully
will get a useful error message, but

52
00:03:11.770 --> 00:03:16.310
let's say that I had a typo and
I said outputs.

53
00:03:16.310 --> 00:03:20.750
Then I rerun the build and
I'm gonna get a much more friendly

54
00:03:20.750 --> 00:03:24.500
outputs is not allowed where I can go
look up, okay why is outputs not allowed.

55
00:03:24.500 --> 00:03:26.354
It's because I spelled it wrong.

56
00:03:26.354 --> 00:03:30.755
And so the alternative to

57
00:03:30.755 --> 00:03:36.120
webpack-validator is this error
which is much less helpful.

58
00:03:37.290 --> 00:03:42.880
So yeah hopefully that catches some of
the errors that y'all have been seeing.

59
00:03:42.880 --> 00:03:45.550
Does anyone have any questions about that?

60
00:03:45.550 --> 00:03:48.680
&gt;&gt; Speaker 4: Was what was
the dependency again, and package?

61
00:03:48.680 --> 00:03:49.797
&gt;&gt; Kent C Dodds: Webpack-validator.

62
00:03:49.797 --> 00:03:50.597
&gt;&gt; Speaker 5: What version?

63
00:03:50.597 --> 00:03:52.130
2.2.7?

64
00:03:52.130 --> 00:03:52.750
&gt;&gt; Kent C Dodds: Yes.

65
00:03:54.250 --> 00:03:57.510
Yeah, you shouldn't have to actually
add it to your dependencies,

66
00:03:57.510 --> 00:03:59.830
because we're gonna check out
the next branch all together.

67
00:03:59.830 --> 00:04:03.110
We'll blow away all
the changes that you made.

68
00:04:03.110 --> 00:04:07.810
I realize that you're like this
is my baby code, but it's okay.

69
00:04:07.810 --> 00:04:10.660
We'll check out the next branch,
force all that so

70
00:04:10.660 --> 00:04:13.230
we're all on the same
baseline to continue on.

71
00:04:13.230 --> 00:04:18.053
And then, yeah, so
you don't actually need to put anything in

72
00:04:18.053 --> 00:04:21.977
your package JSON,
cuz it'll come later, yeah.

73
00:04:21.977 --> 00:04:24.959
&gt;&gt; Speaker 2: There's a quick
question in chat there on some syntax

74
00:04:24.959 --> 00:04:28.056
&gt;&gt; Speaker 6: Can you repeat that?

75
00:04:28.056 --> 00:04:31.137
&gt;&gt; Kent C Dodds: Yeah, yeah,
so the question is why const

76
00:04:31.137 --> 00:04:35.990
resolve with braces equals require path,
instead of var or let.

77
00:04:37.370 --> 00:04:41.690
So this is kind of a bigger subject
then the purpose of this workshop, but

78
00:04:41.690 --> 00:04:45.430
basically I prefer to use
const because it means that

79
00:04:45.430 --> 00:04:48.240
the binding to that
variable name is immutable.

80
00:04:48.240 --> 00:04:52.050
Not that the variable itself is immutable
but the binding, so that assignment.

81
00:04:52.050 --> 00:04:57.122
Meaning I can't come in here and
say resolve equals bar,

82
00:04:57.122 --> 00:05:02.209
that will be a runtime error or
even like a parsing error.

83
00:05:02.209 --> 00:05:06.101
And so what's nice about that is it
makes your code easier to read and

84
00:05:06.101 --> 00:05:10.790
think about when you're not reassigning
variables all over the place.

85
00:05:10.790 --> 00:05:13.460
And so there are some
situations where let is useful.

86
00:05:15.200 --> 00:05:17.850
I know that some people really like var.

87
00:05:17.850 --> 00:05:23.490
I'm a big fan of Kyle Simpson,
but this is one place where

88
00:05:23.490 --> 00:05:27.310
I just, I really prefer const because I
feel like it makes code easier to read.

89
00:05:28.350 --> 00:05:31.020
There are some places where it's block
scoping, it's kind of annoying and

90
00:05:31.020 --> 00:05:34.720
stuff I guess, but I kind of prefer the
block scoping that you get from lint and

91
00:05:34.720 --> 00:05:38.170
const and I prefer const because
you can't reassign variables.

92
00:05:38.170 --> 00:05:41.300
You have to think about it when you create
a variable that you're gonna reassign,

93
00:05:41.300 --> 00:05:43.290
so good question.

94
00:05:43.290 --> 00:05:46.200
And the reason that it is
with the braces is because

95
00:05:46.200 --> 00:05:48.637
your destructuring resolve out of path.

96
00:05:48.637 --> 00:05:54.483
So alternatively I could say
path equals require path and

97
00:05:54.483 --> 00:06:02.740
then I could say const resolved equals
passed.resolve, but that's no fun.

98
00:06:02.740 --> 00:06:07.395
And so, alternatively, also,
I could say, if it was a typing thing,

99
00:06:07.395 --> 00:06:13.155
if I didn't wanna type any more, then I'd
say resolve equals require path.resolve.

100
00:06:13.155 --> 00:06:15.860
But I like destructuring.

101
00:06:15.860 --> 00:06:19.510
I think it's a really declarative
way to get things out of objects.

102
00:06:19.510 --> 00:06:21.530
So all those things were equivalent.

103
00:06:21.530 --> 00:06:22.480
I just prefer it this way.

104
00:06:26.220 --> 00:06:30.240
And why do I use an arrow
function instead of an object, so

105
00:06:30.240 --> 00:06:35.190
this Alberto knows that
you can actually do this,

106
00:06:36.440 --> 00:06:39.930
and it works just fine,
works just the same.

107
00:06:39.930 --> 00:06:45.310
The difference being in the future, we're

108
00:06:45.310 --> 00:06:50.460
going to actually use an argument that
is passed to us in this arrow function.

109
00:06:50.460 --> 00:06:57.770
It makes having dev test and production
webpack configurations a lot easier.

110
00:06:57.770 --> 00:06:58.940
We'll see that a little bit later.

111
00:06:58.940 --> 00:07:00.495
Good question.

112
00:07:00.495 --> 00:07:01.400
&gt;&gt; Speaker 6: Kent?

113
00:07:01.400 --> 00:07:02.786
&gt;&gt; Kent C Dodds: Yes?
&gt;&gt; Speaker 6: As long as you're on

114
00:07:02.786 --> 00:07:05.726
the syntax, why are you using
the require instead of import?

115
00:07:05.726 --> 00:07:07.918
&gt;&gt; Kent C Dodds: Yeah,
yeah, so it was mostly,

116
00:07:07.918 --> 00:07:11.333
I kind of explained this
a little bit earlier, but

117
00:07:11.333 --> 00:07:16.808
it's mostly because I initially I didn't
wanna throw as many concepts at you.

118
00:07:16.808 --> 00:07:18.843
All of a sudden I'm throwing ES6 modules,

119
00:07:18.843 --> 00:07:22.930
obviously even throwing destructuring
was kind of throwing people for a loop.

120
00:07:22.930 --> 00:07:27.384
But yeah we're gonna be looking at a ES6

121
00:07:27.384 --> 00:07:32.240
modules eventually anyway so,
[SOUND] [LAUGH]

