WEBVTT

1
00:00:00.000 --> 00:00:03.772
[MUSIC]

2
00:00:03.772 --> 00:00:05.760
&gt;&gt; Kent C Dodds: So
now that we have our output file name,

3
00:00:05.760 --> 00:00:09.519
like webpack keeps telling us we need,
we're gonna run that script again.

4
00:00:09.519 --> 00:00:15.503
And now it says configuration file found,
but no entry configured.

5
00:00:15.503 --> 00:00:17.399
Okay, so we need an entry now.

6
00:00:17.399 --> 00:00:19.872
So let's actually go back to my slides,

7
00:00:19.872 --> 00:00:24.384
to talk about why entry matters.
&gt;&gt; Kent C Dodds: And

8
00:00:24.384 --> 00:00:26.324
then I'll give you a chance
to ask a couple questions.

9
00:00:26.324 --> 00:00:31.466
So the entry is our main method of
our app and it's responsible for

10
00:00:31.466 --> 00:00:36.960
requiring all the things that it needs,
all of its dependencies.

11
00:00:36.960 --> 00:00:39.490
And then webpack will resolve
those dependencies and

12
00:00:39.490 --> 00:00:43.580
spit out the resulting bundle, or
the resulting concatenated resolves,

13
00:00:43.580 --> 00:00:46.700
interesting file,
into the output that we specify.

14
00:00:46.700 --> 00:00:49.540
I think most of this will make more
sense when you can see what that result

15
00:00:49.540 --> 00:00:50.100
looks like.

16
00:00:51.290 --> 00:00:56.990
But, yeah, hopefully that's kind of
like explanatory of what the purpose

17
00:00:56.990 --> 00:01:03.000
of this output and this entry is all
about, why we use those those terms.

18
00:01:03.000 --> 00:01:05.302
So we'll go ahead and say entry.

19
00:01:05.302 --> 00:01:11.218
And actually we're going to provide
webpack with a bit of context for

20
00:01:11.218 --> 00:01:12.344
this entry.

21
00:01:12.344 --> 00:01:16.483
So all of our modules are in
the source directory, so

22
00:01:16.483 --> 00:01:20.560
that's the context for our source files.

23
00:01:20.560 --> 00:01:25.440
And so, for our context, context actually
needs to be an absolute path, so

24
00:01:25.440 --> 00:01:33.250
we're gonna say const resolve
= require('path').resolve.

25
00:01:33.250 --> 00:01:34.755
And if you're on Node 6
then you can do this fun

26
00:01:34.755 --> 00:01:38.162
stuff.
&gt;&gt; Kent C Dodds: So

27
00:01:38.162 --> 00:01:42.901
then we're gonna use resolve
to resolve directly to source.

28
00:01:42.901 --> 00:01:46.520
Let me just get rid of that, sorry.

29
00:01:48.340 --> 00:01:50.970
So if you are following along,
that's hopefully helpful, and

30
00:01:50.970 --> 00:01:55.690
our entry inside the source directory, in
that context, is this bootstrap.js file.

31
00:01:55.690 --> 00:02:02.741
So I'll say bootstrap.js
&gt;&gt; Kent C Dodds: Awesome,

32
00:02:02.741 --> 00:02:06.368
I'm almost to the point where
I'll let you loose on this.

33
00:02:06.368 --> 00:02:09.181
Whoops, that needs to be a relative path,
sorry.

34
00:02:09.181 --> 00:02:10.408
&gt;&gt; Speaker 2: There's a question,

35
00:02:10.408 --> 00:02:14.354
any reason that they're not getting
webpack errors in their terminal?

36
00:02:14.354 --> 00:02:16.640
A couple of people.
&gt;&gt; Kent C Dodds: Yeah,

37
00:02:16.640 --> 00:02:19.360
if you aren't seeing the webpack errors
that we were seeing earlier then that's

38
00:02:19.360 --> 00:02:20.820
probably a problem.

39
00:02:20.820 --> 00:02:24.989
This is one of those weird cases,
where errors indicate good things [LAUGH].

40
00:02:24.989 --> 00:02:29.072
So yeah if you're not just
keep following along, and

41
00:02:29.072 --> 00:02:32.632
hopefully magically it works.
&gt;&gt; Speaker 2: [LAUGH]

42
00:02:32.632 --> 00:02:33.307
&gt;&gt; Speaker 3: What was the error supposed

43
00:02:33.307 --> 00:02:35.497
to look like again?
&gt;&gt; Kent C Dodds: The errors were the ones

44
00:02:35.497 --> 00:02:40.150
that were like,
you need to have the output file name.

45
00:02:40.150 --> 00:02:43.114
And then it says,
you need to have an entry configured.

46
00:02:43.114 --> 00:02:46.983
And once you resolve those things,
you probably won't get this one unless you

47
00:02:46.983 --> 00:02:49.807
made the same mistake I did
where this wasn't relative.

48
00:02:49.807 --> 00:02:51.645
You'll get that one if
it was not relative.

49
00:02:51.645 --> 00:02:55.667
But once you get it working
this is what you should see.

50
00:02:55.667 --> 00:02:59.936
You'll see the time that it took,
you'll see the assets that were created.

51
00:02:59.936 --> 00:03:04.582
And the exciting bit is you'll
see this new file in your

52
00:03:04.582 --> 00:03:09.329
file system that's breaking
all your linting errors or

53
00:03:09.329 --> 00:03:12.666
linting rules, but it is your bundle.

54
00:03:12.666 --> 00:03:18.350
So I'll quickly explain what this
bundle is and then I'm gonna stop and

55
00:03:18.350 --> 00:03:24.426
let everybody work on it, and I'll be
available to answer some questions.

56
00:03:24.426 --> 00:03:30.590
So the bundle here is a bunch
of code that you didn't write,

57
00:03:30.590 --> 00:03:36.560
remember our entry is just
this file right here.

58
00:03:36.560 --> 00:03:39.869
This file has no explicit dependencies,
no require statements, or

59
00:03:39.869 --> 00:03:41.416
any kind of imports of any kind.

60
00:03:41.416 --> 00:03:47.082
And so you might be wondering so
what on Earth is all of this code?

61
00:03:47.082 --> 00:03:50.184
Well, webpack ships with a runtime.

62
00:03:50.184 --> 00:03:53.839
So webpack is gonna turn all
of your require statements, or

63
00:03:53.839 --> 00:03:55.448
your import statements,

64
00:03:55.448 --> 00:04:00.215
into what's called a webpack require
to resolve all the modules at runtime.

65
00:04:00.215 --> 00:04:07.188
And it needs a runtime to accomplish that
task, so that's what all of this code is.

66
00:04:07.188 --> 00:04:11.425
And then finally we get to
our little module right here.

67
00:04:11.425 --> 00:04:18.319
And it looks exactly as it was, it just
said, okay, take that and just plop it in.

68
00:04:18.319 --> 00:04:22.427
It will change some things,
if it finds import statements and

69
00:04:22.427 --> 00:04:27.140
things it'll change those to
work with the webpack runtime.

70
00:04:27.140 --> 00:04:30.330
But other than it's pretty much just
our code, we're not transpiling or

71
00:04:30.330 --> 00:04:31.140
anything at this point.

72
00:04:32.990 --> 00:04:35.890
So one interesting thing about this is,
remember,

73
00:04:35.890 --> 00:04:38.820
we have it in an immediately
invoked function expression.

74
00:04:38.820 --> 00:04:41.650
We don't need to do that anymore
because it's already in this closure.

75
00:04:41.650 --> 00:04:45.970
So already we can get rid of writing
some boilerplate code, which is cool.

76
00:04:45.970 --> 00:04:50.113
We'll do that a little bit later.

77
00:04:50.113 --> 00:04:51.347
And, yeah,
that's basically the whole idea.

78
00:04:51.347 --> 00:04:56.050
Sorry, one other thing that I want
to do and then I'll let you loose.

79
00:04:56.050 --> 00:05:03.857
Now that we have this bundling we can
change this bootstrap.js to bundle.js.

80
00:05:03.857 --> 00:05:09.474
And if we run npn start with that
change we can refresh this and

81
00:05:09.474 --> 00:05:16.985
the app still works, you should see view
set in the console and all of your to dos.

