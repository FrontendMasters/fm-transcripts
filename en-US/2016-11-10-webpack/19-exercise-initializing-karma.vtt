WEBVTT

1
00:00:00.000 --> 00:00:03.905
[MUSIC]

2
00:00:03.905 --> 00:00:06.160
&gt;&gt; Speaker 1: There was a quick question.
&gt;&gt; Kent C Dodds: Sure yeah.

3
00:00:06.160 --> 00:00:07.760
&gt;&gt; Speaker 1: Can this be used with

4
00:00:07.760 --> 00:00:12.130
Angular 1 apps?
&gt;&gt; Kent C Dodds: Yes it can.

5
00:00:12.130 --> 00:00:16.850
The problem with that you'll find with
an Angular 1 app is, often the state of

6
00:00:16.850 --> 00:00:22.010
the application lives throughout of
the code base, like it's everywhere.

7
00:00:22.010 --> 00:00:27.460
And so like when I say okay you can have
a model open with the form filled out.

8
00:00:27.460 --> 00:00:31.400
Well if the recompiling
the template is going to

9
00:00:31.400 --> 00:00:36.310
clear out that form then
that's not like super useful,

10
00:00:36.310 --> 00:00:41.870
it's almost like refreshing the page or
even recompiling the template will likely

11
00:00:41.870 --> 00:00:44.860
clear out the modal as well,
like it'll get rid of the model.

12
00:00:44.860 --> 00:00:50.397
So yeah, like I said at the beginning,
lots of the features that I'm talking

13
00:00:50.397 --> 00:00:56.036
about with WebPack are put well to some
applications and not as much to others.

14
00:00:56.036 --> 00:01:00.641
And so yeah, this is one where
like everybody really loves to

15
00:01:00.641 --> 00:01:05.443
talk about hot Mocha replacement and
it is really really cool.

16
00:01:05.443 --> 00:01:10.109
But it's like your application
has to be in a certain way for

17
00:01:10.109 --> 00:01:13.190
it to really be hugely beneficial.

18
00:01:13.190 --> 00:01:14.690
That's been my findings anyway.

19
00:01:16.180 --> 00:01:18.520
So I don't know if you get
a whole lot of bank for

20
00:01:18.520 --> 00:01:22.080
your buck on at Angular 1 app
with how much you're learning.

21
00:01:22.080 --> 00:01:23.700
I know that people do it.

22
00:01:23.700 --> 00:01:25.526
There are people in the world
who have done that.

23
00:01:28.040 --> 00:01:28.679
&gt;&gt; Kent C Dodds: Okay,

24
00:01:28.679 --> 00:01:30.710
any other questions?

25
00:01:30.710 --> 00:01:38.470
So, yeah testing, testing is
something that is really important.

26
00:01:38.470 --> 00:01:43.572
I am curious,
how many people here have like 50% code

27
00:01:43.572 --> 00:01:48.570
coverage on their applications?
&gt;&gt; [INAUDIBLE]

28
00:01:48.570 --> 00:01:49.290
&gt;&gt; Kent C Dodds: Yeah.

29
00:01:49.290 --> 00:01:50.270
Anybody with a hundred?

30
00:01:51.660 --> 00:01:54.161
Okay, good.
[LAUGH] You're wasting your time if you do

31
00:01:54.161 --> 00:01:59.440
one hundred percent code coverage, unit
test code coverage on the application.

32
00:01:59.440 --> 00:02:00.710
But 50% is pretty good.

33
00:02:01.920 --> 00:02:05.419
I generally like to stick around 70%
code coverage on applications and

34
00:02:05.419 --> 00:02:06.600
100% on open source.

35
00:02:06.600 --> 00:02:11.640
That's because open source it's
a lot easier, smaller modules,

36
00:02:11.640 --> 00:02:13.920
it's a lot easier to get 100%.

37
00:02:13.920 --> 00:02:16.324
Yes.
&gt;&gt; Speaker 3: Do you have any thoughts on

38
00:02:16.324 --> 00:02:21.393
line coverage verses branch coverage?
&gt;&gt; Kent C Dodds: Yeah.

39
00:02:21.393 --> 00:02:24.320
Line coverage basically,
it's like this line executed.

40
00:02:24.320 --> 00:02:26.640
That's all line coverage tells you.

41
00:02:26.640 --> 00:02:33.290
Branch coverage says, this if statements
alternate did not execute or this turnery

42
00:02:34.440 --> 00:02:39.890
like the turnery operator was always
false when you ran this code or whatever.

43
00:02:39.890 --> 00:02:42.860
I am under the impression
that I like to see as many

44
00:02:42.860 --> 00:02:45.049
lines of code run that are important
that they never break.

45
00:02:46.100 --> 00:02:50.446
So, like whether or not it's lines
of code or like a branch of,

46
00:02:50.446 --> 00:02:53.407
like whether or
not an if statement is run.

47
00:02:53.407 --> 00:02:56.340
I more care about like,
if this broke how better would that be?

48
00:02:57.500 --> 00:03:02.430
And that's why I try to focus
my efforts is where it'd be bad.

49
00:03:02.430 --> 00:03:03.079
Good question.

50
00:03:03.079 --> 00:03:04.992
Other questions?

51
00:03:04.992 --> 00:03:06.342
Okay, sweet.

52
00:03:06.342 --> 00:03:13.645
So, yeah we'll probably, lots of this
is just like setting up the stuffs.

53
00:03:13.645 --> 00:03:16.766
So I'm mostly gonna show you the code for
these.

54
00:03:16.766 --> 00:03:21.756
So, here we pretty much, right here
we're installing a couple dependencies

55
00:03:21.756 --> 00:03:26.990
karma-chrome-launcher and Mocha I don't
know how many people here use karma?

56
00:03:28.245 --> 00:03:31.760
Okay, so it's pretty ubiquitous to all,
I'll just briefly explain it.

57
00:03:32.790 --> 00:03:36.900
Karma is basically responsible for
running tests.

58
00:03:36.900 --> 00:03:38.167
So if you use Jasmine or

59
00:03:38.167 --> 00:03:41.383
Mocha they both have a CLA that
will run your test for you.

60
00:03:41.383 --> 00:03:46.342
But if you wanna run in an actual browser
they actually, I'm pretty sure they

61
00:03:46.342 --> 00:03:51.146
both have the ability to run it like, for
you to put script tags in an HTML and

62
00:03:51.146 --> 00:03:55.660
then you can open that index
HTML in a browser and stuff.

63
00:03:55.660 --> 00:03:59.350
But that's like kind of tedious to
have to refresh that and whatever.

64
00:03:59.350 --> 00:04:03.360
And so, karma makes it really easy to
load all of your like specify what

65
00:04:03.360 --> 00:04:06.950
files you want to have loaded into
a browser and run those for you.

66
00:04:06.950 --> 00:04:09.820
It has like a watch mode so
it would refresh the browser for you and

67
00:04:09.820 --> 00:04:15.070
refresh your files and then you can also
run across multiple browsers as well.

68
00:04:15.070 --> 00:04:19.410
So we're just using Chrome but you could
have, there's a Firefox launcher and

69
00:04:19.410 --> 00:04:23.880
a Safari launcher and
Internet Explorer launcher and

70
00:04:23.880 --> 00:04:27.220
who knows maybe a Brave launcher,
I don't know.

71
00:04:27.220 --> 00:04:30.590
But yeah, so karma,
that's karma's responsibility.

72
00:04:30.590 --> 00:04:34.150
It's loading files into a browser and
running and opening that browser for

73
00:04:34.150 --> 00:04:36.820
you, yeah.
&gt;&gt; Speaker 1: Question, why not Eva?

74
00:04:36.820 --> 00:04:39.210
Is that all you can [INAUDIBLE].
&gt;&gt; Kent C Dodds: All right so,

75
00:04:39.210 --> 00:04:40.460
Eva testing framework.

76
00:04:40.460 --> 00:04:43.300
It does not work in the browser,
it works just in node.

77
00:04:43.300 --> 00:04:46.130
And I like it a lot.

78
00:04:46.130 --> 00:04:49.101
It's great,
it's got a really fantastic API.

79
00:04:49.101 --> 00:04:55.580
And it only has a like a node CLI, so
you have to, like if you wanna test

80
00:04:55.580 --> 00:05:01.000
stuff that is using the DOM you have to
use like a DOM implementation like JS DOM.

81
00:05:01.000 --> 00:05:05.740
I'm using it in my project at work
right now and I love its API.

82
00:05:05.740 --> 00:05:09.250
One of the things that Eva
promises is performance,

83
00:05:09.250 --> 00:05:11.930
because node is single threaded.

84
00:05:11.930 --> 00:05:15.000
If you're running your mocha tests,
you're only running that on a single core.

85
00:05:15.000 --> 00:05:19.220
You have like eight, 1200 cores in your
machine, you're only using one of them.

86
00:05:19.220 --> 00:05:20.290
And so what?

87
00:05:20.290 --> 00:05:24.410
What Eva says,
okay we'll spawn a different process for

88
00:05:24.410 --> 00:05:27.680
every single test file that you have and
run the test in those processes.

89
00:05:27.680 --> 00:05:30.170
Those who send us back the results and
then we'll aggregate them for

90
00:05:30.170 --> 00:05:32.490
you in one thread.

91
00:05:32.490 --> 00:05:38.390
So, I have found that there's is a lot of
overhead with spawning those processes and

92
00:05:38.390 --> 00:05:41.020
it actually results in pretty
dead slow performance.

93
00:05:42.040 --> 00:05:44.610
So, I am currently

94
00:05:44.610 --> 00:05:49.740
working on migrating from Eva to
Mocha again, so which is really sad.

95
00:05:49.740 --> 00:05:53.467
I really like Eva a lot it's
API is really amazing but

96
00:05:53.467 --> 00:05:56.950
it's just too soft, yeah.
&gt;&gt; Speaker 1: Just a general question what

97
00:05:56.950 --> 00:05:58.833
about Headless Chrome?
&gt;&gt; Kent C Dodds: Yes,

98
00:05:58.833 --> 00:06:01.750
Headless Chrome is also
something coming up.

99
00:06:01.750 --> 00:06:05.560
I don't think that there's a launcher but
just to kind of explain Headless Chrome.

100
00:06:07.060 --> 00:06:09.960
So, what you're looking at right now

101
00:06:09.960 --> 00:06:14.700
is a head full chrome I guess it's
like there's a UI associated with it.

102
00:06:14.700 --> 00:06:18.290
So I've got buttons and
I can interact with the page here.

103
00:06:18.290 --> 00:06:20.860
So it pops open a window.

104
00:06:20.860 --> 00:06:24.926
There are also headless browsers,
probably the most common is PhantomJS.

105
00:06:24.926 --> 00:06:26.100
Anybody know PhantomJS?

106
00:06:26.100 --> 00:06:31.970
Okay, so this ones really
popular because setting up

107
00:06:31.970 --> 00:06:36.030
Chrome or Firefox on a CI server,
where you're running your test continues

108
00:06:36.030 --> 00:06:38.820
integration server,
can be a real pain in the rear.

109
00:06:38.820 --> 00:06:43.470
So you use PhantomJS which
is a headless browser which

110
00:06:43.470 --> 00:06:44.670
basically you just install it.

111
00:06:44.670 --> 00:06:47.210
You don't need to have like
a window pop up or anything,

112
00:06:47.210 --> 00:06:52.920
it just kind of is running node as
a separate process, it's pretty awesome.

113
00:06:52.920 --> 00:06:56.010
The problem with Phantom is until,

114
00:06:56.010 --> 00:07:00.080
I'm pretty sure that you 2.0 has been
released and there's been an update.

115
00:07:00.080 --> 00:07:04.349
But until recently it
supported ES3 which like we're

116
00:07:04.349 --> 00:07:07.980
all excited about is ES 2016, 2017.

117
00:07:07.980 --> 00:07:12.746
Yeah, it supported to ES3 not even to ES5
so you had to poly fill the dickens and

118
00:07:12.746 --> 00:07:14.940
it was just a real pain.

119
00:07:14.940 --> 00:07:17.710
So I haven't used Phantom for
a really long time.

120
00:07:17.710 --> 00:07:22.520
I'm pretty sure that 2.0 supports ES5 now,
but yeah.

121
00:07:22.520 --> 00:07:26.420
So Headless Chrome though is coming,

122
00:07:26.420 --> 00:07:30.730
I'm pretty sure in Canary right
now you can get a Headless Chrome.

123
00:07:30.730 --> 00:07:34.750
But I don't think, I looked around for
a karma-headless-chrome-launcher and

124
00:07:34.750 --> 00:07:35.870
I don't think that exists yet.

125
00:07:35.870 --> 00:07:38.460
So, if any of you all want to
build it that'd be awesome.

126
00:07:38.460 --> 00:07:39.900
I'd love it.

127
00:07:39.900 --> 00:07:41.790
Good questions, other questions?

128
00:07:43.260 --> 00:07:44.102
Okay, sweet.

129
00:07:44.102 --> 00:07:46.140
Am I talking too much?

130
00:07:46.140 --> 00:07:48.480
Okay, [LAUGH] hopefully
it's useful information.

131
00:07:48.480 --> 00:07:53.770
Okay so then we're also installing
karma-mocha and that gives

132
00:07:53.770 --> 00:07:58.720
us all the mocha Global's and make sure
that mocha is installed in our project.

133
00:07:58.720 --> 00:08:01.240
You may love that,
you may hate that, but yeah,

134
00:08:01.240 --> 00:08:04.310
then we have the mocha testing framework.

135
00:08:04.310 --> 00:08:10.520
I have to Project 2 have a couple
scripts that will use karma-start.

136
00:08:10.520 --> 00:08:16.220
And also a watch mode that uses
the test script, and forwards along

137
00:08:16.220 --> 00:08:22.450
a couple arguments, so that you can
have the tests run as you're developing.

138
00:08:22.450 --> 00:08:25.700
So if you're a fan of TDD,
that's what you're gonna wanna do.

139
00:08:25.700 --> 00:08:27.630
I am a fan of TDD.

140
00:08:27.630 --> 00:08:32.160
And then you run the update of
the validate script to also run our tests,

141
00:08:32.160 --> 00:08:32.947
because that makes sense.

142
00:08:32.947 --> 00:08:39.271
Okay, so then we also have this,
well I'll just show this,

143
00:08:39.271 --> 00:08:44.493
also we have
a src/controller.test.js file.

144
00:08:44.493 --> 00:08:48.489
So how many people here
have a test directory

145
00:08:48.489 --> 00:08:52.424
that mirrors their source directory?

146
00:08:52.424 --> 00:08:55.840
So all that, yeah okay,
so this is pretty common.

147
00:08:55.840 --> 00:08:58.280
You have like src/controller.js,

148
00:08:58.280 --> 00:09:02.780
you're gonna have a test/controller.js and
as your file system grows,

149
00:09:02.780 --> 00:09:06.240
both of those grow and supposedly
they're supposed to mirror each other.

150
00:09:06.240 --> 00:09:09.540
So if you move controller than you're
supposed to like in the source directory

151
00:09:09.540 --> 00:09:13.340
then you supposed to move
the controller in the test directory.

152
00:09:13.340 --> 00:09:17.450
This doesn't scale very well and
I'm not gonna like belabor you with

153
00:09:17.450 --> 00:09:20.020
my explanation cuz I have
a blog post about it.

154
00:09:20.020 --> 00:09:20.820
Ask me about it later.

155
00:09:20.820 --> 00:09:25.630
It's what code comments can teach
us about scaling code basis?

156
00:09:25.630 --> 00:09:27.240
I think that's what it's called.

157
00:09:27.240 --> 00:09:28.270
So you can look it up later.

158
00:09:28.270 --> 00:09:29.980
But-
&gt;&gt; Speaker 1: You're asking but

159
00:09:29.980 --> 00:09:34.362
what's that switch no
single run on line 46.

160
00:09:34.362 --> 00:09:36.997
&gt;&gt; Kent C Dodds: Yeah so, that?

161
00:09:36.997 --> 00:09:41.403
To be perfectly honest, I'm not entirely
sure why it needs both of these.

162
00:09:41.403 --> 00:09:46.315
To me it seems like it would make more
sense to just have like a --watch,

163
00:09:46.315 --> 00:09:50.581
but that's what you need to be
able to get watch mode running for

164
00:09:50.581 --> 00:09:54.858
karma.
&gt;&gt; Kent C Dodds: Yeah, so anyway you'll

165
00:09:54.858 --> 00:10:00.378
find that the test file is in line or
right next to the controller.js file and

166
00:10:00.378 --> 00:10:07.080
you can ask me later about why I co-locate
those things, but it's a good thing.

167
00:10:07.080 --> 00:10:13.630
But then finally you also have
your karma config, I'm not gonna,

168
00:10:13.630 --> 00:10:16.710
karma is an important tool but it's not
the tool that we're talking about today.

169
00:10:16.710 --> 00:10:18.495
And so you can look at that later.

170
00:10:18.495 --> 00:10:22.365
The most important part that you need to
care about are the files that we have here

171
00:10:22.365 --> 00:10:26.000
cuz we're gonna be making changes to that.

172
00:10:26.000 --> 00:10:30.690
Okay, so still,
right from here we don't actually have,

173
00:10:32.310 --> 00:10:36.560
well we do have actually tests running but
we don't have WebPack integrated,

174
00:10:36.560 --> 00:10:40.200
the test that will have running
is this a test that does nothing.

175
00:10:41.600 --> 00:10:43.380
It's just using the mocha API.

176
00:10:45.770 --> 00:10:48.540
Yeah, so I don't think it's super
valuable for you guys to or for

177
00:10:48.540 --> 00:10:50.180
you all to work on that right now.

178
00:10:51.530 --> 00:10:55.320
So, any other questions
before I move onto the next

179
00:10:55.320 --> 00:11:00.330
extremely short explanation, okay.

180
00:11:00.330 --> 00:11:04.377
Cool, so the next thing that we do is we
just are adding our assertion library

181
00:11:04.377 --> 00:11:06.730
probably just on this the same time.

182
00:11:06.730 --> 00:11:08.479
But we're using chai in this project.

183
00:11:10.680 --> 00:11:12.330
Adding that as our dependency.

184
00:11:12.330 --> 00:11:18.900
Adding karma-chai to get some, to get
it to the expect global in the browser.

185
00:11:18.900 --> 00:11:21.740
Then we're just expecting true to
be true and high to equal high.

186
00:11:21.740 --> 00:11:25.590
So just to verify that we have
our tests all set up and running.

187
00:11:25.590 --> 00:11:27.390
Any questions about that?

188
00:11:27.390 --> 00:11:27.890
Okay.

