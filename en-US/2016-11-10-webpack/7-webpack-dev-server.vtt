WEBVTT

1
00:00:00.000 --> 00:00:03.801
[MUSIC]

2
00:00:03.801 --> 00:00:06.390
&gt;&gt; Kent C Dodds: Let's look at
another problem to solve here.

3
00:00:06.390 --> 00:00:11.680
So it's really cool that we can
build our bundle and our app works.

4
00:00:11.680 --> 00:00:16.438
But running this command every single time
we make a change to the bootstrap.js file

5
00:00:16.438 --> 00:00:17.588
would be insanity.

6
00:00:17.588 --> 00:00:19.000
I wouldn't want to do that.

7
00:00:19.000 --> 00:00:23.725
And so you can actually, you don't
have to do this, but you can actually,

8
00:00:23.725 --> 00:00:27.860
with npm scripts pass additional
arguments to the script.

9
00:00:27.860 --> 00:00:31.800
And so by adding this -- here,

10
00:00:31.800 --> 00:00:34.840
anything else I pass here will
get forwarded on to the script.

11
00:00:34.840 --> 00:00:37.545
So here you see I do a whole
bunch of crazy stuff right there.

12
00:00:37.545 --> 00:00:40.210
Here, let me fix that.

13
00:00:40.210 --> 00:00:46.185
And if you look at the script that
npm runs, we'll take off the s there,

14
00:00:46.185 --> 00:00:51.778
then you'll see the npm runs webpack
with the thing that I passed.

15
00:00:51.778 --> 00:00:53.172
So that's an npm scripts thing.

16
00:00:53.172 --> 00:00:58.740
Yeah, my terminal thing is kind of funny.

17
00:00:58.740 --> 00:01:03.613
So if we say npm run build:dev and
then we will add the -s there to

18
00:01:03.613 --> 00:01:08.500
tell npm to be quiet, and
then we'll forward on watch.

19
00:01:08.500 --> 00:01:14.550
Then it will build our bundle and then
wait for us to make a change to the file.

20
00:01:14.550 --> 00:01:21.810
And the really cool thing about,
here, we'll say log ('foo').

21
00:01:21.810 --> 00:01:27.271
Log is a global function of, oops,
we need to start up our server share.

22
00:01:27.271 --> 00:01:29.276
What happened?

23
00:01:29.276 --> 00:01:29.860
There we go.

24
00:01:31.040 --> 00:01:32.010
So npm start.

25
00:01:34.300 --> 00:01:36.090
So now we get that log foo right there.

26
00:01:36.090 --> 00:01:40.957
I can change it to foos,
cuz I like foosball, and now it's foos.

27
00:01:40.957 --> 00:01:45.923
So the really cool thing about this is,
because webpack is in charge of all of our

28
00:01:45.923 --> 00:01:48.815
assets, when it sees
that a file was changed,

29
00:01:48.815 --> 00:01:53.780
it can just update that one file rather
than rebuilding the whole thing.

30
00:01:53.780 --> 00:01:55.740
And so it's lightning fast.

31
00:01:55.740 --> 00:01:57.940
This took seven milliseconds.

32
00:01:57.940 --> 00:02:02.540
I dare you to race webpack to your browser
to try and refresh it before it finishes.

33
00:02:03.800 --> 00:02:05.840
So, yeah, it is lightning fast.

34
00:02:05.840 --> 00:02:10.040
Even in a giant application updating
a single module is very fast,

35
00:02:10.040 --> 00:02:13.570
even with transpilation and
stuff, which is awesome.

36
00:02:15.130 --> 00:02:18.938
The reason that I'm doing all this in the
console right here is just to illustrate

37
00:02:18.938 --> 00:02:20.116
the point of watch mode.

38
00:02:20.116 --> 00:02:23.130
We're not going to use this ourselves.

39
00:02:23.130 --> 00:02:27.544
We're actually going to use a special
server that webpack provides for us,

40
00:02:27.544 --> 00:02:32.510
rather than our http server, because
it does a bunch of cool things for us.

41
00:02:33.860 --> 00:02:37.385
So we'll go into our package Json.

42
00:02:37.385 --> 00:02:41.380
We're gonna have another dependency that
you would normally just npm install.

43
00:02:41.380 --> 00:02:48.280
We'll say webpack-dev-server; and
we'll need a comma there.

44
00:02:48.280 --> 00:02:52.330
The latest version that we're going to
install, it needs to be the beta version,

45
00:02:52.330 --> 00:02:57.792
so it will be to 2.1.0-beta.0.

46
00:02:57.792 --> 00:03:03.830
And with that already installed,
we're going to add a dev script.

47
00:03:03.830 --> 00:03:06.430
It doesn't matter what order you put these
scripts in because, once we check out

48
00:03:06.430 --> 00:03:09.780
the next branch, it's all going to be
reset anyway, so just put it wherever.

49
00:03:11.400 --> 00:03:16.448
And then we'll say webpack-dev-server.
&gt;&gt; Kent C Dodds: And

50
00:03:16.448 --> 00:03:18.130
let me just make sure.

51
00:03:20.110 --> 00:03:25.058
Now if we run npm, and
we'll start that dev script,

52
00:03:25.058 --> 00:03:30.007
so npm run dev.
&gt;&gt; Kent C Dodds: Then we'll

53
00:03:30.007 --> 00:03:33.450
get a whole bunch of
output of all this stuff.

54
00:03:33.450 --> 00:03:37.350
What this is is it's saying,
here we have this asset called bundle.

55
00:03:37.350 --> 00:03:39.660
This is how big it is,
and all this information.

56
00:03:39.660 --> 00:03:42.560
And then here all the files
that are in that bundle.

57
00:03:42.560 --> 00:03:44.620
So here all the modules that are in it.

58
00:03:44.620 --> 00:03:47.438
Only one of these files
is actually our file.

59
00:03:47.438 --> 00:03:51.886
So the webpack-dev-server has a whole
bunch of modules that it's using to do its

60
00:03:51.886 --> 00:03:54.413
job to enhance your
development experience.

61
00:03:54.413 --> 00:03:59.124
And we'll see some of that when we start
talking about hot module replacement and

62
00:03:59.124 --> 00:04:03.278
stuff like that, which everybody is
excited about because it's one of

63
00:04:03.278 --> 00:04:06.230
the biggest buzzwords around webpack.

64
00:04:06.230 --> 00:04:07.390
But yeah, so

65
00:04:07.390 --> 00:04:12.630
now if we refresh our browser,
what we're actually hitting, whoops.

66
00:04:12.630 --> 00:04:14.150
Let me make sure that this is closed off.

67
00:04:16.390 --> 00:04:20.444
Close that out, restart my dev-server.

68
00:04:20.444 --> 00:04:25.249
And what we're actually hitting
now is the webpack server itself.

69
00:04:25.249 --> 00:04:28.450
And so there are a couple of
interesting and cool things about this.

70
00:04:28.450 --> 00:04:31.740
But let me show you one problem
that you might run into

71
00:04:31.740 --> 00:04:33.070
when you're playing around with this.

72
00:04:33.070 --> 00:04:37.700
And that is if I try to log ('hello
world') in this bootstrap file,

73
00:04:37.700 --> 00:04:39.110
it is gonna rebuild.

74
00:04:39.110 --> 00:04:42.020
And it does it very quickly,
again in 42 milliseconds.

75
00:04:43.260 --> 00:04:46.247
And then if I go in here,
I see hello world.

76
00:04:46.247 --> 00:04:47.679
Now that's not what I was expecting.

77
00:04:47.679 --> 00:04:48.800
It was supposed to be broken.

78
00:04:48.800 --> 00:04:52.218
So I did something [LAUGH]
to make it not be broken.

79
00:04:52.218 --> 00:04:54.106
It's magic!

80
00:04:54.106 --> 00:04:56.380
[LAUGH] That's funny.

81
00:04:56.380 --> 00:04:58.570
Okay, source bundle.

82
00:05:02.150 --> 00:05:07.390
Sorry, I skipped a step and
that's why it's working magically.

83
00:05:07.390 --> 00:05:08.720
So I'm actually gonna go ahead and

84
00:05:08.720 --> 00:05:13.120
stop right there and
give you an opportunity to catch up and

85
00:05:13.120 --> 00:05:18.160
ask any questions that you have before
we move onto that step that I skipped.

86
00:05:19.590 --> 00:05:21.140
Yeah, question.
&gt;&gt; Speaker 2: Question on

87
00:05:21.140 --> 00:05:23.990
will we look at different source maps?
&gt;&gt; Kent C Dodds: Yes,

88
00:05:23.990 --> 00:05:26.780
we will look at source maps.

89
00:05:26.780 --> 00:05:30.750
There are actually lots of different
combinations of source maps that you can

90
00:05:30.750 --> 00:05:33.240
use with webpack, and
it's kind of confusing.

91
00:05:33.240 --> 00:05:36.220
I've gone through all of them and

92
00:05:36.220 --> 00:05:39.680
found two that I like, one for
production and one for development.

93
00:05:39.680 --> 00:05:43.620
Those are the only two I care about,
so we'll look at those.

94
00:05:44.930 --> 00:05:48.900
Okay, Andres asked what should we do
if our HTML is coming from a CMS?

95
00:05:48.900 --> 00:05:50.410
Can we use webpack-dev-server?

96
00:05:50.410 --> 00:05:53.355
I should have specified
webpack-dev-server is not for production,

97
00:05:53.355 --> 00:05:58.110
webpack-dev-server, well,
it's for dev, for development.

98
00:05:58.110 --> 00:06:01.460
And so you use it because
it enhances your experience

99
00:06:01.460 --> 00:06:03.380
while you're developing pretty well.

100
00:06:03.380 --> 00:06:07.699
And then ultimately, you bundle and

101
00:06:07.699 --> 00:06:12.443
send your resulting bundle off to a CDN.

102
00:06:12.443 --> 00:06:17.958
If you're storing your HTML in a CMS,
you have to do things a little bit

103
00:06:17.958 --> 00:06:23.305
differently because that dependency
can't exactly be explicit.

104
00:06:23.305 --> 00:06:25.850
It sounds like it's coming
from somewhere else.

105
00:06:25.850 --> 00:06:31.510
And so you'll have to work around that
a little bit to make it work with webpack.

106
00:06:32.766 --> 00:06:36.410
But you'll pretty much be doing
the same thing you're doing now,

107
00:06:37.750 --> 00:06:40.030
that one part will be
outside the band of webpack.

108
00:06:43.170 --> 00:06:45.650
Does webpack-dev-server
use the bundle.js file?

109
00:06:45.650 --> 00:06:46.940
That is an excellent question.

110
00:06:46.940 --> 00:06:53.610
I will answer that, Irvin,
in the next little segment.

111
00:06:53.610 --> 00:06:56.220
It doesn't use the one that you generated.

112
00:06:56.220 --> 00:07:00.630
So, actually,
you can delete your bundle.js file here.

113
00:07:00.630 --> 00:07:03.170
And restart your webpack-dev-server, and

114
00:07:03.170 --> 00:07:06.370
you'll notice that it doesn't
actually generate that file again.

115
00:07:06.370 --> 00:07:08.770
And you go in here and it's still working.

116
00:07:08.770 --> 00:07:11.900
It's serving up the file from memory
because memory is much faster

117
00:07:11.900 --> 00:07:12.678
than file system.

118
00:07:12.678 --> 00:07:15.220
And so, yeah.

119
00:07:15.220 --> 00:07:20.260
And that's part of the reason why we
use webpack-dev-server in development,

120
00:07:20.260 --> 00:07:24.870
is so that we don't have to worry about
serving it up from the file system.

121
00:07:26.230 --> 00:07:26.888
Yeah?
&gt;&gt; Speaker 3: So

122
00:07:26.888 --> 00:07:30.795
is there a practical limit
to the size of app you can

123
00:07:30.795 --> 00:07:33.499
use this capability on?
&gt;&gt; Kent C Dodds: You're talking

124
00:07:33.499 --> 00:07:35.260
about the development side of things?
&gt;&gt; Speaker 3: Yeah,

125
00:07:35.260 --> 00:07:38.000
because it's fast but-
&gt;&gt; Kent C Dodds: Yeah,

126
00:07:38.000 --> 00:07:43.830
so as your app grows the bundling
piece can take a while.

127
00:07:43.830 --> 00:07:47.820
And especially if you had a lot of
pre-processors and stuff, lots of loaders,

128
00:07:47.820 --> 00:07:51.780
then it takes longer, and plugins and
things can slow things down too.

129
00:07:51.780 --> 00:07:54.330
So, yeah, I've had some really big apps

130
00:07:54.330 --> 00:07:58.920
using webpack that take
like 40 seconds to start.

131
00:07:58.920 --> 00:08:02.850
But once they're going,
the recompilation of

132
00:08:02.850 --> 00:08:07.020
individual files as you were
developing is lightning fast, still.

133
00:08:07.020 --> 00:08:09.310
Like, under 200 milliseconds.

134
00:08:09.310 --> 00:08:11.370
So I still can't get to
the browser fast enough.

135
00:08:11.370 --> 00:08:12.410
&gt;&gt; Speaker 2: This is cool.

136
00:08:12.410 --> 00:08:13.766
&gt;&gt; Kent C Dodds: I agree,

137
00:08:13.766 --> 00:08:17.331
I think it is cool, too.

138
00:08:17.331 --> 00:08:21.650
So Watson Deep asks does
webpack-dev-server work with other

139
00:08:21.650 --> 00:08:24.180
frameworks such as Express?

140
00:08:24.180 --> 00:08:25.249
Yes, it does.

141
00:08:25.249 --> 00:08:30.106
We're not going to be looking into that,
but webpack-dev-server does have

142
00:08:30.106 --> 00:08:33.870
a Node API that you can plug
in as a middleware in Express.

143
00:08:33.870 --> 00:08:38.029
And I'm doing it in PayPal, yeah?
&gt;&gt; Speaker 2: And

144
00:08:38.029 --> 00:08:42.140
a followup from that CMS question was, can
we use a loader to pull in that external

145
00:08:42.140 --> 00:08:47.399
HTML?
&gt;&gt; Kent C Dodds: Yeah,

146
00:08:47.399 --> 00:08:50.015
you might be able to use a loader to,

147
00:08:50.015 --> 00:08:55.370
because the loader runs at bundle time,
it's not a runtime thing.

148
00:08:55.370 --> 00:09:00.860
And so you could use a loader to take some
sort of special string or something and

149
00:09:00.860 --> 00:09:05.530
convert it into something that works for
your CMS, for example.

150
00:09:05.530 --> 00:09:08.100
Yeah, it's probably not the use case for
a loader.

151
00:09:09.110 --> 00:09:12.500
It really kind of depends on
the way that your CMS is set up.

152
00:09:12.500 --> 00:09:15.710
But yeah,
you can definitely make it work, but

153
00:09:15.710 --> 00:09:18.870
it's probably not going to be a loader.

