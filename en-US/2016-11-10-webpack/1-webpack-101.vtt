WEBVTT

1
00:00:00.000 --> 00:00:03.791
[MUSIC]

2
00:00:03.791 --> 00:00:06.840
&gt;&gt; Kent C Dodds: So WebPack 101,
why does this thing exist?

3
00:00:06.840 --> 00:00:11.008
Has anybody seen a project
that looks like this before,

4
00:00:11.008 --> 00:00:14.740
where you have script tags,
a ton of script tags?

5
00:00:14.740 --> 00:00:17.160
This is actually one of my old projects.

6
00:00:17.160 --> 00:00:20.750
It is a nightmare, [LAUGH]
to

7
00:00:20.750 --> 00:00:23.240
have to manage all of these script tags.

8
00:00:23.240 --> 00:00:27.570
And part of the reason that this is
such a terrible thing is because

9
00:00:28.840 --> 00:00:32.690
these scripts are running in order and
so you need to have them

10
00:00:33.920 --> 00:00:38.630
sorted in the way that they need to be so
that the app actually loads.

11
00:00:38.630 --> 00:00:40.630
If there's a dependency between
one script and another,

12
00:00:40.630 --> 00:00:45.450
you need to make sure that
the dependent scripts loads after.

13
00:00:45.450 --> 00:00:50.570
So yeah, this is one of the problems
that Webpack solves, for sure.

14
00:00:50.570 --> 00:00:56.870
Lots of you in the pre-event survey
mentioned that you're using Grunt or

15
00:00:56.870 --> 00:01:00.620
Gulp print now and
you want to compare Webpack with that or

16
00:01:00.620 --> 00:01:05.046
you want to see how they can work together
or see how you can avoid it all together.

17
00:01:05.046 --> 00:01:10.725
So with Webpack, I started using Webpack
just over a year and a half ago.

18
00:01:10.725 --> 00:01:16.470
And I went from nothing to
Grunt to Gulp to Webpack.

19
00:01:16.470 --> 00:01:21.760
And ever since I started using Webpack,
I haven't needed Grunt or Gulp at all.

20
00:01:21.760 --> 00:01:26.660
And the reason for that is if you try to
think of, what are some of the things that

21
00:01:26.660 --> 00:01:31.650
you do with Grunt or Gulp,
why are those things useful?

22
00:01:31.650 --> 00:01:35.140
Well, you're gonna concatenate
your JavaScript and minify it.

23
00:01:35.140 --> 00:01:37.140
You're going to do the same to your CSS.

24
00:01:38.420 --> 00:01:41.070
There are various things
that you're trying

25
00:01:41.070 --> 00:01:45.450
to do to generate optimized assets for
your web application.

26
00:01:45.450 --> 00:01:50.560
Right, so you have your JavaScript,
your CSS, even fonts, HTML,

27
00:01:50.560 --> 00:01:55.110
images, SPGs, everything,
all these assets for your application.

28
00:01:55.110 --> 00:01:59.926
The reason that with Webpack you don't
need these task runners anymore is because

29
00:01:59.926 --> 00:02:03.370
Webpack takes care of all of this for you.

30
00:02:03.370 --> 00:02:09.570
And what the way that it accomplishes this
is by turning everything into a module.

31
00:02:09.570 --> 00:02:14.190
You just think conceptually that,
yes JavaScript is a module like

32
00:02:14.190 --> 00:02:16.790
each file you can think of
as a module pretty easily.

33
00:02:16.790 --> 00:02:22.860
But CSS webpack considers CSS to be
a module just like a JavaScript file.

34
00:02:22.860 --> 00:02:27.980
So not only that, but
it also enables you to use common JS,

35
00:02:27.980 --> 00:02:31.430
AMD or yes, six imports.

36
00:02:31.430 --> 00:02:36.960
So these different module styles to
make your dependencies explicit.

37
00:02:36.960 --> 00:02:40.970
And that is really a powerful
concept as well because now it's not

38
00:02:40.970 --> 00:02:43.700
a matter of loading the right
scripts in the right order, but

39
00:02:43.700 --> 00:02:46.900
you just say this is my main file and
then it has dependencies.

40
00:02:46.900 --> 00:02:49.238
And all you care about is that main file.

41
00:02:49.238 --> 00:02:52.540
And then Webpack will fix it all up for
you and

42
00:02:52.540 --> 00:02:55.800
give you one file that you
just load into the browser.

43
00:02:55.800 --> 00:03:00.850
And then you can minify that in and
optimize that for delivery for

44
00:03:00.850 --> 00:03:01.470
your application.

45
00:03:02.890 --> 00:03:07.360
But it takes it a step further, like I
said, to CSS where CSS are modules and

46
00:03:07.360 --> 00:03:13.420
now you can take the CSS modules and
make those dependencies explicit.

47
00:03:13.420 --> 00:03:20.150
And same with fonts and with HTML and
images and spgs, everything is a module.

48
00:03:20.150 --> 00:03:23.480
And that's one of the most
important pieces of Webpack.

49
00:03:23.480 --> 00:03:25.120
Do I have any questions?

50
00:03:25.120 --> 00:03:25.867
&gt;&gt; Speaker 2: Typescript.

51
00:03:25.867 --> 00:03:28.948
&gt;&gt; Kent C Dodds: Yes,
a typescript would be a loader that would

52
00:03:28.948 --> 00:03:31.330
transpire down into JavaScript.

53
00:03:31.330 --> 00:03:32.380
Good question, yeah.

54
00:03:32.380 --> 00:03:34.448
&gt;&gt; Speaker 3: How are you
running the E to E tests?

55
00:03:34.448 --> 00:03:36.539
&gt;&gt; Kent C Dodds: End to end, E to E tests,

56
00:03:36.539 --> 00:03:41.947
those run kind of the same way
that you would with anything else.

57
00:03:41.947 --> 00:03:45.127
End to end tests shouldn't really care
about how you build your application or

58
00:03:45.127 --> 00:03:46.550
how it's bundled.

59
00:03:46.550 --> 00:03:49.940
End to end tests just say
load up this application.

60
00:03:49.940 --> 00:03:52.660
However it's built, that's irrelevant.

61
00:03:52.660 --> 00:03:53.740
Just load up the application.

62
00:03:53.740 --> 00:03:59.350
Start inputting forms, and
as far as integration and

63
00:03:59.350 --> 00:04:03.020
unit tests, we'll definitely
cover that in this workshop.

64
00:04:03.020 --> 00:04:03.560
Great question.

65
00:04:03.560 --> 00:04:04.270
Other questions?

66
00:04:06.280 --> 00:04:07.110
Anything from the chat?

67
00:04:09.820 --> 00:04:11.150
Okay, cool.

68
00:04:11.150 --> 00:04:14.910
Okay, sweet, so, yeah.

69
00:04:14.910 --> 00:04:19.680
So that's the basic idea of the most
fundamental piece of Webpack is you have

70
00:04:19.680 --> 00:04:22.020
all these assets for your web application.

71
00:04:22.020 --> 00:04:26.180
They are all modules,
you take those modules,

72
00:04:26.180 --> 00:04:33.270
make the dependencies between them
explicit through various module syntaxes.

73
00:04:33.270 --> 00:04:37.720
So CSS, there's a module syntax for
that, and JavaScript, obviously,

74
00:04:37.720 --> 00:04:40.820
common JS, AMD, or ES6 modules.

75
00:04:40.820 --> 00:04:42.790
So you'll make all those
dependencies explicit.

76
00:04:42.790 --> 00:04:45.840
Then Webpack will resolve all those
dependencies and spit out for

77
00:04:45.840 --> 00:04:48.810
you the static assets that you use for
your web application.

78
00:04:50.470 --> 00:04:52.600
This is a very fundamental
piece of Webpack,

79
00:04:52.600 --> 00:04:55.260
so I wanna make sure
everybody understands that.

80
00:04:55.260 --> 00:04:59.290
And it's a little bit different if
you were using Gulp or something.

81
00:04:59.290 --> 00:05:01.440
All of these different things
would be like totally separate.

82
00:05:01.440 --> 00:05:03.440
You'd say, Gulp,
go get me all my css files.

83
00:05:03.440 --> 00:05:04.650
I'm gonna do all this stuff.

84
00:05:04.650 --> 00:05:09.620
There's no notion of dependencies
between css and JavaScript.

85
00:05:09.620 --> 00:05:11.390
But with Webpack there is and
it's awesome.

