WEBVTT

1
00:00:00.000 --> 00:00:03.912
[MUSIC]

2
00:00:03.912 --> 00:00:08.270
&gt;&gt; Kent C Dodds: We left off talking
about adding testing to our project.

3
00:00:08.270 --> 00:00:11.844
And now we can write tests,

4
00:00:11.844 --> 00:00:14.840
in our controller tests we're
requiring that controller.

5
00:00:15.880 --> 00:00:20.240
We can expect that the controller exists,
which is a good thing.

6
00:00:20.240 --> 00:00:23.811
Like I said we're not gonna get
too far into writing tests,

7
00:00:23.811 --> 00:00:28.685
that would be a totally different subject,
but I think you can take it from here.

8
00:00:28.685 --> 00:00:33.662
But there's one other thing that I
found in my time with webpack that

9
00:00:33.662 --> 00:00:39.080
can be extremely difficult to do and
that is setting up code coverage.

10
00:00:39.080 --> 00:00:43.475
So does anybody wanna take a whack
at explaining what code coverage

11
00:00:43.475 --> 00:00:48.573
is?
&gt;&gt; Kent C Dodds: Nobody wants to,

12
00:00:48.573 --> 00:00:52.814
can anybody explain what code coverage is,
what it does, or even why it's useful,

13
00:00:52.814 --> 00:00:56.550
you don't have to explain how it works.
&gt;&gt; Student: It's like

14
00:00:56.550 --> 00:00:59.900
a way to check the lines of code
that have been touched by a test.

15
00:00:59.900 --> 00:01:01.700
&gt;&gt; Kent C Dodds: Yeah, yeah, so

16
00:01:01.700 --> 00:01:08.500
if you think about it conceptually
when I'm going through my like my app.

17
00:01:08.500 --> 00:01:13.141
When I load up the app, the browser is
going to run this code it's gonna say okay

18
00:01:13.141 --> 00:01:16.016
I'm gonna create a new controller, it's
gonna run this line, this line, this line,

19
00:01:16.016 --> 00:01:21.830
it'll run this line and then when this
new to do view action is called or

20
00:01:21.830 --> 00:01:24.120
that handler is called then this.

21
00:01:24.120 --> 00:01:27.740
This line will run and so
on and so forth, and so

22
00:01:27.740 --> 00:01:32.700
let's say that you had something in
your code like right now because this

23
00:01:32.700 --> 00:01:37.610
is not ES6 code we're saying
var that = this, right.

24
00:01:37.610 --> 00:01:42.785
So the actual code here is not
totally relevant, but if I said

25
00:01:42.785 --> 00:01:47.862
foo.bar and invoke that, I'm gonna have a
problem there because foo is not defined.

26
00:01:47.862 --> 00:01:52.510
Luckily ESLint is gonna let me know that,
but if I were running this in a browser or

27
00:01:52.510 --> 00:01:57.020
if I didn't run ESLint,
then I would never know

28
00:01:57.020 --> 00:02:01.000
that that's gonna blow up my program
until I ship it off to production.

29
00:02:01.000 --> 00:02:04.920
And so that's the value of code
coverage is it can tell you whether or

30
00:02:04.920 --> 00:02:08.170
not that code is gonna
blow up when it's run.

31
00:02:08.170 --> 00:02:12.610
Potentially, code coverage will not
tell you there are two different things.

32
00:02:12.610 --> 00:02:17.530
There's code coverage and data coverage,
and data coverage is arguably

33
00:02:17.530 --> 00:02:21.270
better because it's, and I don't even know
if it's a thing to be perfectly honest I'm

34
00:02:21.270 --> 00:02:24.465
just making it up, but it would be
better because it would tell you,

35
00:02:24.465 --> 00:02:27.900
okay this code has run this many
times with this type of data.

36
00:02:27.900 --> 00:02:32.020
So this is run with integers greater
than zero and integers less than zero.

37
00:02:32.020 --> 00:02:35.920
That would be even better because then
you could get a better idea of how your

38
00:02:35.920 --> 00:02:39.050
program responds to
different kinds of inputs.

39
00:02:39.050 --> 00:02:44.090
But the best we have right now is
whether or not lines, or run, or

40
00:02:44.090 --> 00:02:49.970
if statements were like fallen into or
the alternates were executed.

41
00:02:49.970 --> 00:02:54.160
And so that's what we're going to, that's
the problem we're going to be solving

42
00:02:54.160 --> 00:02:57.056
next is setting up the tooling for
code coverage.

43
00:02:57.056 --> 00:02:58.300
But I'm gonna go ahead and

44
00:02:58.300 --> 00:03:02.730
let people ask questions if you have
any about the value of code coverage.

45
00:03:02.730 --> 00:03:04.369
Or how it works.

46
00:03:06.240 --> 00:03:06.770
Okay.

47
00:03:06.770 --> 00:03:10.840
So let me really briefly, and

48
00:03:10.840 --> 00:03:14.190
if you're online and you have questions
feel free to ask and interrupt.

49
00:03:15.210 --> 00:03:20.734
Just really briefly I'm gonna
explain kind of how the tooling for

50
00:03:20.734 --> 00:03:24.060
code coverage in JavaScript works so.

51
00:03:25.720 --> 00:03:30.400
As far as I know there will
be a global variable created

52
00:03:31.590 --> 00:03:37.490
somewhere in our test that's called
coverage, and it's an object.

53
00:03:37.490 --> 00:03:42.940
And then that object has properties for
every single line,

54
00:03:42.940 --> 00:03:45.452
and branch and function in your program.

55
00:03:45.452 --> 00:03:51.000
And normally it'll be, I can't remember
exactly what the key is, but it's

56
00:03:51.000 --> 00:03:56.840
some crazy hash and the value would be
how many times that line of code was run.

57
00:03:56.840 --> 00:04:01.812
And so like in this case you'd say okay,
if we wanted to check that,

58
00:04:01.812 --> 00:04:03.924
this line, the line above.

59
00:04:03.924 --> 00:04:07.124
Well, so if this line was run that
means that this line was run and

60
00:04:07.124 --> 00:04:08.500
this line was run, right.

61
00:04:09.530 --> 00:04:11.470
Hopefully that makes sense.

62
00:04:11.470 --> 00:04:16.913
So then it would say okay we're
gonna take this and say ++.

63
00:04:16.913 --> 00:04:21.658
So that means okay, this line has run and
then we'll take some other one, and

64
00:04:21.658 --> 00:04:23.848
then say ++ and it goes through and

65
00:04:23.848 --> 00:04:27.866
adds this stuff to your code
everywhere inside of this function.

66
00:04:27.866 --> 00:04:30.693
If you had an if statement
then it'll run it inside,

67
00:04:30.693 --> 00:04:32.820
have it inside the if statement.

68
00:04:32.820 --> 00:04:37.847
If you, whoops, have a ternary
operator like const v = foo,

69
00:04:37.847 --> 00:04:43.554
foo otherwise bar whatever,
then it would say okay we'll add this and

70
00:04:43.554 --> 00:04:50.034
we'll do fancy JavaScript to make it so
that foo is what's resolved to there and

71
00:04:50.034 --> 00:04:56.158
bar, and of course each one of these
would be something totally separate.

72
00:04:56.158 --> 00:05:01.110
And so that's how this is what's
called instrumenting your code.

73
00:05:01.110 --> 00:05:03.830
For code coverage and
setting up the tooling.

74
00:05:03.830 --> 00:05:07.700
There's a bunch of tooling
to enable you to do that.

75
00:05:07.700 --> 00:05:10.540
But the challenge comes in

76
00:05:10.540 --> 00:05:14.990
the fact that we're using several other
tools in tandem with these other things.

77
00:05:14.990 --> 00:05:20.720
So one of the tools that makes
this challenging is Babel.

78
00:05:20.720 --> 00:05:24.240
So Babel is going to take our code and
transpile it.

79
00:05:24.240 --> 00:05:28.680
And what that results in often is
some code that we didn't write.

80
00:05:28.680 --> 00:05:33.780
So let's look at an example
of some Babel output here.

81
00:05:34.940 --> 00:05:37.310
Just what I have been here,
so this is react code.

82
00:05:37.310 --> 00:05:39.680
This is a lot of code
that we didn't write.

83
00:05:39.680 --> 00:05:44.540
And so if we said okay, take the output
of my Babel code and instrument that.

84
00:05:44.540 --> 00:05:49.277
Then we're going to get instrumentation
reports on generated code which will

85
00:05:49.277 --> 00:05:52.157
inflate or
deflate our code coverage results.

86
00:05:52.157 --> 00:05:56.217
The end result being inaccuracy and
something that changes even when

87
00:05:56.217 --> 00:06:00.767
our dependencies change and if Babel
changes the way that they do things, and

88
00:06:00.767 --> 00:06:06.230
so you want to instrument your source code
for coverage, not your transpiled code.

89
00:06:06.230 --> 00:06:08.850
And because of that it makes things
a little bit more complicated.

90
00:06:08.850 --> 00:06:15.290
Because you just have to be able to
somehow hook into pre-transpilation stuff.

91
00:06:15.290 --> 00:06:18.510
But nobody wants to write code
coverage stuff all over their code.

92
00:06:18.510 --> 00:06:20.090
That would be a bad idea for

93
00:06:20.090 --> 00:06:23.100
a lot of reasons,
not the least of which performance.

94
00:06:23.100 --> 00:06:27.510
So all of that to give
kind of a framework for

95
00:06:27.510 --> 00:06:31.710
why we even care about instrumenting
our code for coverage.

