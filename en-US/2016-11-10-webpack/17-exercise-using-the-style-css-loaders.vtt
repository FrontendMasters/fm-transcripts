WEBVTT

1
00:00:00.000 --> 00:00:04.060
[MUSIC]

2
00:00:04.060 --> 00:00:08.659
&gt;&gt; Kent C Dodds: Normally you would npn
install the loaders themselves and so,

3
00:00:08.659 --> 00:00:14.400
we'll go to, I'm just gonna go to
the package JSON and well, yeah forget it.

4
00:00:14.400 --> 00:00:19.970
You would install these loaders and
then in your web pack config,

5
00:00:19.970 --> 00:00:24.390
we're just gonna copy this loader that
we have and alter it a little bit.

6
00:00:24.390 --> 00:00:29.690
So this is just in our module loaders and
we'll add it for

7
00:00:29.690 --> 00:00:33.550
our test it's going to be all
files that end in CSS cuz for

8
00:00:33.550 --> 00:00:37.700
us we're just using CSS we're
not gonna use preprocessor.

9
00:00:39.340 --> 00:00:41.910
So we'll just say anything
that ends in .css

10
00:00:41.910 --> 00:00:44.190
I want to load through the css loader.

11
00:00:44.190 --> 00:00:47.770
But remember the next next thing after css
loader it needs to go through the style

12
00:00:47.770 --> 00:00:50.510
loader so it gets injected into the DOM.

13
00:00:50.510 --> 00:00:52.980
And this is maybe a little
counterintuitive but

14
00:00:52.980 --> 00:00:57.020
you might think that
style should go there.

15
00:00:57.020 --> 00:00:57.990
That's not actually how it works.

16
00:00:57.990 --> 00:01:00.150
It runs from right to left.

17
00:01:00.150 --> 00:01:05.406
So it'll first go through the css loader,
then it'll go through the style loader.

18
00:01:05.406 --> 00:01:11.340
And because the way that our project
is set up if we look in our index HTML

19
00:01:11.340 --> 00:01:17.389
we have this link for our index css,
for the css for our entire project.

20
00:01:18.550 --> 00:01:21.220
We don't want to exclude our node_modules.

21
00:01:21.220 --> 00:01:26.670
And actually, most of the time, for CSS,
if you're gonna be using node_modules,

22
00:01:26.670 --> 00:01:31.040
you don't want to exclude those
node_modules unless you're going to

23
00:01:31.040 --> 00:01:34.230
include link tags explicitly on your page.

24
00:01:34.230 --> 00:01:37.955
And so here, we're gonna remove
our exclude node_modules, whoops.

25
00:01:42.714 --> 00:01:44.683
&gt;&gt; Kent C Dodds: With
the dependencies installed and

26
00:01:44.683 --> 00:01:49.080
the loader specified that's all that you
need to start being able to require CSS.

27
00:01:50.190 --> 00:01:52.407
Any questions about that?

28
00:01:52.407 --> 00:01:57.377
Okay I'm trying to think of a good way to,

29
00:01:57.377 --> 00:02:03.820
practice but
I think it's fairly straightforward.

30
00:02:03.820 --> 00:02:09.415
The one other thing that we need to do
is now we're still loading this in our,

31
00:02:09.415 --> 00:02:10.810
the same way we were before.

32
00:02:10.810 --> 00:02:14.725
We're not actually explicitly
saying hey I want to

33
00:02:14.725 --> 00:02:18.921
require that CSS It's just
still in the regular HTML.

34
00:02:18.921 --> 00:02:23.904
And so in our app file where we have
all of the requires for our app,

35
00:02:23.904 --> 00:02:28.795
we're gonna add another require
up here that says require, and

36
00:02:28.795 --> 00:02:34.337
this harkens back to what we were
talking about how require is resolved.

37
00:02:34.337 --> 00:02:41.796
But it'll be todomvc-app-css /index.css.

38
00:02:45.469 --> 00:02:50.744
&gt;&gt; Kent C Dodds: So actually if
you run your def server right now,

39
00:02:50.744 --> 00:02:58.800
then you should be seeing a style
tag injected into your dom, oops!

40
00:02:58.800 --> 00:03:01.732
I have something on.

41
00:03:01.732 --> 00:03:03.970
I have the server running already.

42
00:03:08.440 --> 00:03:12.970
Okay, so you refresh here,
you go to your elements.

43
00:03:12.970 --> 00:03:17.933
In the head and you'll see we actually
have it loading twice once with that

44
00:03:17.933 --> 00:03:20.107
link tag we need to remove that.

45
00:03:20.107 --> 00:03:21.605
And then again with the style tag.

46
00:03:23.448 --> 00:03:26.121
&gt;&gt; Kent C Dodds: And
it's just injected right there.

47
00:03:26.121 --> 00:03:30.065
I am waiting for a specific question
that somebody is bound to ask, so

48
00:03:30.065 --> 00:03:34.360
I'm just gonna sit here and wait for
somebody to ask it [LAUGH] just kidding.

49
00:03:34.360 --> 00:03:39.390
Okay so the, yeah so
the question that I hear frequently

50
00:03:39.390 --> 00:03:44.460
about this is a question about performance
because this is happening at runtime.

51
00:03:44.460 --> 00:03:49.190
Let me show you where performance
actually becomes a real issue.

52
00:03:49.190 --> 00:03:51.980
And that is if I delete
this link tag here.

53
00:03:51.980 --> 00:03:57.015
So we're no longer loading it just
normally it's being loaded at runtime.

54
00:03:57.015 --> 00:04:00.645
And if you think about it it's being
loaded at the time that the script tag

55
00:04:00.645 --> 00:04:01.655
is being loaded right.

56
00:04:01.655 --> 00:04:06.599
Because that's where our CSS lives
now is inside of our bundle JS file.

57
00:04:06.599 --> 00:04:10.889
And so now if we refresh the page
you're gonna see this flicker and

58
00:04:10.889 --> 00:04:12.612
that is really annoying.

59
00:04:12.612 --> 00:04:15.695
You see that on like old bank websites and
stuff.

60
00:04:15.695 --> 00:04:20.656
Not on to do NVC and so there are a couple
of things that you can do to combat this.

61
00:04:20.656 --> 00:04:27.150
The proper solution would be to,
is anybody familiar with critical CSS?

62
00:04:27.150 --> 00:04:31.530
So critical CSS is a concept where you
take all of the CSS that's critical for

63
00:04:31.530 --> 00:04:34.720
rendering your page and
you put that in the head.

64
00:04:34.720 --> 00:04:38.074
And then you let everything else render
and then you load your JavaScript.

65
00:04:38.074 --> 00:04:43.003
So that makes things load really fast
without sacrificing having to load all of

66
00:04:43.003 --> 00:04:45.244
your JavaScript and everything for

67
00:04:45.244 --> 00:04:48.670
your app before the user
sees the rest of the page.

68
00:04:48.670 --> 00:04:51.800
So because this is such a small app and

69
00:04:51.800 --> 00:04:56.270
and like all critical CSS is different for
every application and stuff.

70
00:04:56.270 --> 00:04:59.320
We're going to just kind of
cheat a little bit here and

71
00:04:59.320 --> 00:05:02.550
we're going to stick our
scripts into the head.

72
00:05:03.730 --> 00:05:07.980
Which means that our JavaScript is loading
being parsed in the styles are being

73
00:05:07.980 --> 00:05:14.050
injected into the DOM before these
are even sees anything but a white screen.

74
00:05:14.050 --> 00:05:14.700
But because it's so

75
00:05:14.700 --> 00:05:19.390
small and because I'm running locally you
can't see anything, any flicker at all.

76
00:05:20.830 --> 00:05:21.960
Anyone have questions about that?

77
00:05:24.150 --> 00:05:30.140
Okay, hopefully we covered
loaders well enough that.

78
00:05:30.140 --> 00:05:35.063
Well let me just ask does anybody
want to have a little bit of

79
00:05:35.063 --> 00:05:38.091
time to practice this themselves?

80
00:05:38.091 --> 00:05:39.199
Okay, cool.

81
00:05:39.199 --> 00:05:45.292
So the branches exist and
the diffs are there for your perusal.

82
00:05:45.292 --> 00:05:48.150
I'm gonna move on because
we are still behind.

83
00:05:49.780 --> 00:05:51.780
Who here has heard of this?

84
00:05:51.780 --> 00:05:52.940
Hot Module Replacement?

85
00:05:54.060 --> 00:05:57.430
Yeah, so this is the thing that the react
community is bragging about, right?

86
00:05:57.430 --> 00:06:00.870
Because like they've had it for
a year or so or even more.

87
00:06:01.920 --> 00:06:06.140
I'll be honest, I actually don't
use hot module replacement myself.

88
00:06:06.140 --> 00:06:08.092
I've used it a couple of times.

89
00:06:08.092 --> 00:06:10.027
I don't use it in my app.

90
00:06:10.027 --> 00:06:13.807
But from what I understand, once you
start using it you can't go back, and

91
00:06:13.807 --> 00:06:16.330
it's totally amazing and
incredible and stuff.

92
00:06:17.560 --> 00:06:19.370
This app does have hot module replacement.

93
00:06:19.370 --> 00:06:20.759
Let me explain how it works a little bit.

94
00:06:22.060 --> 00:06:27.920
So we have our main module here,
is here actually

95
00:06:27.920 --> 00:06:31.840
sorry before we do that everybody can
go ahead and check out the next branch.

96
00:06:31.840 --> 00:06:36.170
It's FEM/01.5-css.

97
00:06:36.170 --> 00:06:38.857
&gt;&gt; Student: Before you do that somebody
just asking could you just show them

98
00:06:38.857 --> 00:06:39.981
the bundle js file now?

99
00:06:39.981 --> 00:06:42.880
&gt;&gt; Kent C Dodds: Yeah great thank you for
asking that, yeah.

100
00:06:42.880 --> 00:06:44.037
So if we build,

101
00:06:44.037 --> 00:06:49.739
we'll build the dev because the production
bundle will not be easy to read.

102
00:06:49.739 --> 00:06:55.921
But yeah, if we look at the bundle and
we find our todomvc.

103
00:06:55.921 --> 00:06:56.626
What was it called?

104
00:06:59.129 --> 00:06:59.791
&gt;&gt; Kent C Dodds: This thing.

105
00:07:04.172 --> 00:07:05.210
&gt;&gt; Kent C Dodds: So right here.

106
00:07:08.620 --> 00:07:11.412
Yeah, it's actually probably
still not easy to read.

107
00:07:11.412 --> 00:07:12.493
But actually,

108
00:07:12.493 --> 00:07:17.907
if we take off source maps then it might
be a little bit more straightforward.

109
00:07:23.945 --> 00:07:25.889
&gt;&gt; Kent C Dodds: So with that rebuilt.

110
00:07:30.005 --> 00:07:30.859
&gt;&gt; Kent C Dodds: Okay.

111
00:07:32.575 --> 00:07:36.423
&gt;&gt; Kent C Dodds: Even with that
it's not super helpful, but

112
00:07:36.423 --> 00:07:41.519
this is basically this is what
the CSS loader does to it is it

113
00:07:41.519 --> 00:07:48.066
creates a module that has a require
statement for this CSS based thing.

114
00:07:48.066 --> 00:07:53.195
Goodness yeah, yeah, it's kind of lots

115
00:07:53.195 --> 00:07:58.326
of this CSS stuff from the css-loader and

116
00:07:58.326 --> 00:08:07.270
the style loader, they actually
both add runtime to make it work.

117
00:08:07.270 --> 00:08:11.714
Right here is where your actual HTML
goes is inside of this exports.push.

118
00:08:11.714 --> 00:08:18.126
So it's like the export it is an array
where you have the module ID and

119
00:08:18.126 --> 00:08:22.870
the string of your CSS right inline there.

120
00:08:22.870 --> 00:08:27.490
We are actually going to talk about
how to extract that using the extract

121
00:08:27.490 --> 00:08:29.030
text plugin.

122
00:08:29.030 --> 00:08:33.880
So that you can leverage caching of that,
of your CSS assets and

123
00:08:33.880 --> 00:08:36.200
stuff that will come a little bit later.

124
00:08:38.140 --> 00:08:43.560
Yeah it's kind of like yeah it's doing
a lot of complexity stuff under the hood.

125
00:08:43.560 --> 00:08:48.650
So it luckily you don't have to really
worry about it because it just it works.

126
00:08:48.650 --> 00:08:51.120
I've never had a problem
with the style loader.

127
00:08:51.120 --> 00:08:53.510
Other than what I talked about
with the critical CSS stuff but

128
00:08:53.510 --> 00:08:56.670
that's a problem that you
have with CSS in general, so.

