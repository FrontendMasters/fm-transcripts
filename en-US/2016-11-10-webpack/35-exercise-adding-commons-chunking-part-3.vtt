WEBVTT

1
00:00:00.000 --> 00:00:04.114
[MUSIC]

2
00:00:04.114 --> 00:00:08.995
&gt;&gt; Kent C Dodds: The next piece of this
is actually we haven't quite accomplished

3
00:00:08.995 --> 00:00:12.820
all of our purposes as far
as caching is concerned.

4
00:00:12.820 --> 00:00:18.878
So we can configure our server and
to tell the browser,

5
00:00:18.878 --> 00:00:22.576
hey, this has been updated you.

6
00:00:22.576 --> 00:00:27.262
Or the browser can say, okay,
I need to update this resource every so

7
00:00:27.262 --> 00:00:28.280
now and then.

8
00:00:28.280 --> 00:00:31.400
It happens at the server
configuration level.

9
00:00:31.400 --> 00:00:34.020
It just tells the browser
how long to cache it.

10
00:00:34.020 --> 00:00:37.030
But what's even become a lot more

11
00:00:39.660 --> 00:00:44.010
prevalent as the better approach

12
00:00:44.010 --> 00:00:49.490
is that every single one of your assets
has a unique ID as part of its filename.

13
00:00:49.490 --> 00:00:52.644
And so, then you can configure
your server to say, hey,

14
00:00:52.644 --> 00:00:57.267
browser cache this for years, forever,
and you never need to re-download this.

15
00:00:57.267 --> 00:01:02.126
And then every single time you
re-bundle you, [COUGH] sorry,

16
00:01:02.126 --> 00:01:05.950
I'm starting to really lose my voice now.

17
00:01:05.950 --> 00:01:10.650
So then every single time that
you deploy a new version,

18
00:01:10.650 --> 00:01:17.462
it's a totally separate ID, totally
separate resource that the browser gets.

19
00:01:17.462 --> 00:01:20.855
And so when the browser says,
hey, give me your index.html,

20
00:01:20.855 --> 00:01:25.796
let me find the JavaScript files in there,
it's gonna say, this is a totally new URL.

21
00:01:25.796 --> 00:01:30.690
I've never seen it before and it can't
check the cache cuz it doesn't exist.

22
00:01:30.690 --> 00:01:35.190
And so what's nice about this is pretty
much just the fact that you can say,

23
00:01:35.190 --> 00:01:38.000
never try to fetch this
resource ever again.

24
00:01:39.520 --> 00:01:43.618
And so, yeah, so then you don't
have to even really worry about

25
00:01:43.618 --> 00:01:48.420
the cache and
the browser being outdated or invalid.

26
00:01:48.420 --> 00:01:51.830
It just is always cached.

27
00:01:51.830 --> 00:01:56.560
So to accomplish that,
we're going to utilize something called

28
00:01:56.560 --> 00:02:01.314
the chunk hash in our bundle filename.

29
00:02:02.430 --> 00:02:06.059
So let's see, what did I do?

30
00:02:06.059 --> 00:02:12.389
We have bundle.name,
we also have chunkhash.

31
00:02:12.389 --> 00:02:15.225
So there are a couple
things that you can have.

32
00:02:15.225 --> 00:02:17.015
I should've explained
this earlier with name.

33
00:02:17.015 --> 00:02:22.193
But you can have webpack interpolate
a couple of things in filename and

34
00:02:22.193 --> 00:02:27.900
path and publicPath, I think, and
a couple other places, I think.

35
00:02:27.900 --> 00:02:32.096
But yeah, filename it will do for
us and we'll just say chunkhash.

36
00:02:32.096 --> 00:02:37.669
And now if you run the build,
you're gonna get.

37
00:02:37.669 --> 00:02:39.686
Right now I'm running the prod build, but

38
00:02:39.686 --> 00:02:46.011
[SOUND],
&gt;&gt; Kent C Dodds: I should say

39
00:02:46.011 --> 00:02:50.141
prod actually does take a while and it's
because it's uglifying all of your code.

40
00:02:50.141 --> 00:02:53.406
We just uglified all of react and d3.

41
00:02:53.406 --> 00:02:57.110
So, it normally won't
take you quite that long

42
00:02:57.110 --> 00:02:59.470
when you're just doing
your development stuff.

43
00:02:59.470 --> 00:03:02.470
But yeah, if you look at the output now,

44
00:03:02.470 --> 00:03:07.166
you're gonna see a bunch of files
with the chunkhash in there.

45
00:03:07.166 --> 00:03:11.166
And so,
now every time you make a change to app,

46
00:03:11.166 --> 00:03:15.080
for example,
it's gonna update the app IDs.

47
00:03:15.080 --> 00:03:21.993
And so now that begs the question, okay,
so what are we gonna do in our index HTML?

48
00:03:21.993 --> 00:03:25.030
So should I just, okay, copy, paste that?

49
00:03:25.030 --> 00:03:29.410
Every single time that I go to update
stuff, probably not a good idea.

50
00:03:29.410 --> 00:03:34.391
So there's a plugin that will
generate our index HTML for

51
00:03:34.391 --> 00:03:38.437
us and
take the results of the Webpack build and

52
00:03:38.437 --> 00:03:42.401
all the assets and
stick those into our HTML.

53
00:03:42.401 --> 00:03:44.960
So that's what we're going to do next.

54
00:03:44.960 --> 00:03:47.290
Any questions before I continue on that?

55
00:03:47.290 --> 00:03:48.291
Yeah.

56
00:03:48.291 --> 00:03:51.000
&gt;&gt; Speaker 2: Is it possible to cache a
rendered version of react app in webpack?

57
00:03:52.190 --> 00:03:53.760
&gt;&gt; Kent C Dodds: That's
an interesting question.

58
00:03:53.760 --> 00:03:59.882
So basically, no.

59
00:03:59.882 --> 00:04:03.875
Well, I imagine that you could
do something interesting, but

60
00:04:03.875 --> 00:04:06.450
that you would not want to do it that way.

61
00:04:07.590 --> 00:04:13.070
Normally, if you wanted to send a rendered
version of a react app to the client,

62
00:04:13.070 --> 00:04:15.569
you would do this on the server,
so server side rendering.

63
00:04:17.170 --> 00:04:21.224
Yeah, to a cache,
a rendered version of a react app,

64
00:04:21.224 --> 00:04:27.531
unless your app was totally static and
didn't have any dynamic properties at all,

65
00:04:27.531 --> 00:04:32.596
then you could store it as a string and
then send that to the client.

66
00:04:32.596 --> 00:04:35.720
So that could potentially be possible.

67
00:04:35.720 --> 00:04:37.874
But I would recommend
against that approach.

68
00:04:37.874 --> 00:04:42.593
Probably overcomplicated and

69
00:04:42.593 --> 00:04:49.311
not really doing what you're looking for.

70
00:04:49.311 --> 00:04:53.408
Yeah, so Scott is asking if there's
a way we could kind of work around

71
00:04:53.408 --> 00:04:58.130
the limitation of our script tags and
the names of things and stuff.

72
00:04:58.130 --> 00:05:03.510
Unfortunately, Scott, we need to send
the index HTML to the client that

73
00:05:03.510 --> 00:05:06.840
has all the scripts in it that
we want to have them loading.

74
00:05:06.840 --> 00:05:07.400
And so, yeah,

75
00:05:07.400 --> 00:05:10.550
we are gonna use a plugin to do that and
it'll make our lives a lot easier.

76
00:05:14.530 --> 00:05:19.298
Let's see and Billy is asking how can
I just tell webpack to build the app

77
00:05:19.298 --> 00:05:21.061
entry but not the vendor?

78
00:05:21.061 --> 00:05:23.965
Billy, I imagine there's
a way to do that but

79
00:05:23.965 --> 00:05:26.496
I'm not certain off the top of my head.

80
00:05:26.496 --> 00:05:29.350
And we can chat later.

81
00:05:29.350 --> 00:05:31.180
I imagine there's a way.

82
00:05:31.180 --> 00:05:34.260
Okay, cool, so let's go ahead and

83
00:05:34.260 --> 00:05:38.950
get into adding this plug in so
that we can start using our app again.

84
00:05:40.190 --> 00:05:45.230
So this plugin is called
the html webpack plugin.

85
00:05:45.230 --> 00:05:49.440
And you install it the same way
that you install normal modules,

86
00:05:49.440 --> 00:05:50.830
except it's already installed for you.

87
00:05:50.830 --> 00:05:55.820
So we'll go to,
I'll just add this any arbitrary place.

88
00:05:55.820 --> 00:06:01.382
html-webpack-plugin.

89
00:06:01.382 --> 00:06:07.298
And the version that you all have on
your machines right now is 2.22.0,

90
00:06:07.298 --> 00:06:09.854
pretty sure that's the latest.

91
00:06:09.854 --> 00:06:13.962
And then with that installed,

92
00:06:13.962 --> 00:06:20.282
we'll say const Html WebpackPlugIn=require

93
00:06:20.282 --> 00:06:24.550
(html-webpack-plugin).

94
00:06:30.260 --> 00:06:33.860
And then we add that as just
a regular plugin like we have with

95
00:06:35.020 --> 00:06:36.269
these other items.

96
00:06:39.720 --> 00:06:44.780
With this one, it doesn't make
a difference whether it's prod not and

97
00:06:44.780 --> 00:06:47.700
so we don't need to wrap it in if prod.

98
00:06:47.700 --> 00:06:51.990
And we can say,
create a new HTMLWebpackPlugin.

99
00:06:51.990 --> 00:06:54.400
And actually, sorry,
I should be more specific.

100
00:06:54.400 --> 00:06:55.579
We want this in development.

101
00:06:56.920 --> 00:07:00.591
If we don't have it in development,
then we're gonna have a hard time.

102
00:07:00.591 --> 00:07:01.962
AKA, it will not work.

103
00:07:01.962 --> 00:07:06.150
So yeah, I don't think it makes
a difference that it's in test though.

104
00:07:06.150 --> 00:07:10.360
So you could actually say ifNotTest if
you want to but we're not going to.

105
00:07:11.500 --> 00:07:17.048
So then we'll say index.html is where
the template is going to reside.

106
00:07:17.048 --> 00:07:23.003
And for us, by default,
it'll inject all of our script tags and

107
00:07:23.003 --> 00:07:27.763
everything for us at the bottom of,
or in the body.

108
00:07:27.763 --> 00:07:32.188
That's where you should normally put stuff
but because we're doing some fancy things,

109
00:07:32.188 --> 00:07:36.090
or pretty much we're just being lazy,
we're gonna say inject into the head.

110
00:07:38.350 --> 00:07:45.020
And with that, we actually need
to make a couple other changes.

111
00:07:46.120 --> 00:07:52.345
So because right now we have our index
HTML at the root of our project.

112
00:07:52.345 --> 00:07:59.630
But the html webpack plugin resolves
the template based off of the context.

113
00:07:59.630 --> 00:08:04.575
And quite honestly, now it has turned
from the index HTML that we're

114
00:08:04.575 --> 00:08:08.167
shipping to browsers into
actually source code.

115
00:08:08.167 --> 00:08:10.689
And I mean that in every
sense of the word,

116
00:08:10.689 --> 00:08:14.160
it is now like something that
is used to generate our app.

117
00:08:15.500 --> 00:08:17.697
It's no longer something
that we ship directly.

118
00:08:17.697 --> 00:08:23.895
So we're gonna move our index
HTML to our source directory.

119
00:08:23.895 --> 00:08:29.460
Where the HTML Webpack plugin will grab it
and then stick it into our disk directory.

120
00:08:29.460 --> 00:08:36.009
So we'll change a couple of things about
the way how our start script works and

121
00:08:36.009 --> 00:08:40.762
stuff like that, and
there are a couple ways to do this.

122
00:08:40.762 --> 00:08:42.180
But that's what we're going to do.

123
00:08:42.180 --> 00:08:46.797
And because now the index HTML is in the
same place as it's gonna be in the disk

124
00:08:46.797 --> 00:08:51.583
directory just like our bundle, we can
now get rid of this public path as well.

125
00:08:51.583 --> 00:08:56.100
Because it's no longer the disk directory,
it's just a sibling.

126
00:08:56.100 --> 00:08:58.520
This will make a little bit more
sense when I actually run the build.

127
00:08:58.520 --> 00:09:05.940
So if we npm run build:dev and
we will build, build, build, build.

128
00:09:07.130 --> 00:09:10.460
And we have our index HTML right there.

129
00:09:10.460 --> 00:09:15.770
It gets the script tags
that we need it to.

130
00:09:15.770 --> 00:09:18.000
Looks like it has a bundle app and

131
00:09:18.000 --> 00:09:21.970
a bundle up with a name in it,
which is kind of not what I expected.

132
00:09:21.970 --> 00:09:25.092
Something's funny here, I know what it is.

133
00:09:25.092 --> 00:09:27.806
Because our template actually
has this script tag in it.

134
00:09:27.806 --> 00:09:30.207
So we need to get rid of that.

135
00:09:30.207 --> 00:09:35.408
And then if we ran, cuz our template
no longer needs the script tag,

136
00:09:35.408 --> 00:09:39.160
HTML webpack plugin is
going to inject it for us.

137
00:09:40.350 --> 00:09:44.530
And so that script tag, so here,
again, here's our template.

138
00:09:44.530 --> 00:09:47.820
This is just pretty much exactly what we
had before without the script tags in it.

139
00:09:49.180 --> 00:09:55.500
This is the result, the Webpack
plugin added this script tag for us.

140
00:09:55.500 --> 00:10:00.662
It adds the bundle app and
the bundle vendor for us.

141
00:10:00.662 --> 00:10:03.854
And with the correct hashes and
everything,

142
00:10:03.854 --> 00:10:09.317
now all we need to do is deploy this disk
directory and we're off to the races.

143
00:10:09.317 --> 00:10:13.665
One other thing that you'd want to think
about is having a script that'll copy this

144
00:10:13.665 --> 00:10:15.357
favicon to the disk directory.

145
00:10:15.357 --> 00:10:19.550
Webpack doesn't really do
anything with your favicons.

146
00:10:19.550 --> 00:10:24.106
That's one thing that Tabia said that he
wished that was more of a first class

147
00:10:24.106 --> 00:10:24.754
citizen.

148
00:10:24.754 --> 00:10:27.942
So pull requests are welcome I'm sure.

149
00:10:27.942 --> 00:10:32.046
But yeah,
actually if we go really quickly and

150
00:10:32.046 --> 00:10:38.784
update our package.json start script
to serve out the disk directory now,

151
00:10:38.784 --> 00:10:43.790
we should get a working
functioning app somewhere.

152
00:10:43.790 --> 00:10:45.546
There we go.

153
00:10:45.546 --> 00:10:46.301
Yeah?

154
00:10:46.301 --> 00:10:49.450
&gt;&gt; Speaker 2: They're asking why
are you're adding it in the head section?

155
00:10:49.450 --> 00:10:55.560
&gt;&gt; Kent C Dodds: Yeah, so if you recall
here, well, I'll demonstrate it again.

156
00:10:56.940 --> 00:11:01.510
If we go back to our webpack config and

157
00:11:01.510 --> 00:11:03.980
I remove that in the default
being at the end of the body.

158
00:11:05.270 --> 00:11:12.881
Actually, we'll just run dev,
same problem will occur here.

159
00:11:12.881 --> 00:11:21.424
Yeah, actually we're gonna address
that problem here in a little bit.

160
00:11:21.424 --> 00:11:28.626
We're gonna build dev [NOISE] and
then npm start.

161
00:11:28.626 --> 00:11:30.370
So you remember the flash?

162
00:11:30.370 --> 00:11:32.090
That's why we put it in the head.

163
00:11:32.090 --> 00:11:38.320
So this is the critical CSS thing and
the, yeah, making sure

164
00:11:38.320 --> 00:11:41.074
that the user has a good experience when
they load your app in the first place.

165
00:11:41.074 --> 00:11:43.250
So that's why we put it in the head.

166
00:11:43.250 --> 00:11:45.450
Generally, you wouldn't wanna do that.

167
00:11:45.450 --> 00:11:50.273
But that is application-specific
stuff anyway.

168
00:11:50.273 --> 00:11:55.208
Okay, great, so
with every new cool thing that we add,

169
00:11:55.208 --> 00:11:59.093
there's yet and a new problem to surmount.

170
00:11:59.093 --> 00:12:01.480
And one of them is our
developer experience.

171
00:12:01.480 --> 00:12:07.268
Now if we say npm run dev,
then we're going to get this error.

172
00:12:09.898 --> 00:12:13.254
&gt;&gt; Kent C Dodds: And that is cannot
use chunkhash for chunk in here,

173
00:12:13.254 --> 00:12:15.300
use hash instead.

174
00:12:15.300 --> 00:12:19.990
I actually don't know why that's a
problem, but I know how to get around it.

175
00:12:21.090 --> 00:12:23.957
So, this is another scenario where

176
00:12:23.957 --> 00:12:28.937
we don't really care to have
the chunkhash in developments.

177
00:12:28.937 --> 00:12:32.326
I don't care what these files
are called while I'm developing.

178
00:12:32.326 --> 00:12:36.110
I don't need my browser to cache these
things while I'm developing it, right?

179
00:12:36.110 --> 00:12:44.230
So I can just use these utils again to say
ifProd, then I want you to do this thing.

180
00:12:45.820 --> 00:12:49.879
Otherwise, I want it to
just be a bundle.[name].js.

181
00:12:52.494 --> 00:12:54.747
&gt;&gt; Kent C Dodds: And
that will solve the problem.

182
00:12:58.636 --> 00:13:03.111
&gt;&gt; Kent C Dodds: And we can go to
localhost and we have HMR enabled and

183
00:13:03.111 --> 00:13:09.892
all the fun stuff, loading the bundle
properly, or that code split bundle.

184
00:13:09.892 --> 00:13:11.260
And everything is good to go.

