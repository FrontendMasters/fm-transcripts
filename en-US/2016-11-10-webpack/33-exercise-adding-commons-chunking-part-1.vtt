WEBVTT

1
00:00:00.000 --> 00:00:03.860
[MUSIC]

2
00:00:03.860 --> 00:00:08.042
&gt;&gt; Kent C Dodds: Go ahead and
check out the next branch,

3
00:00:08.042 --> 00:00:11.860
it's 5.1-code-splitting.

4
00:00:14.000 --> 00:00:17.860
And this will get us all
up to speed together.

5
00:00:19.020 --> 00:00:24.235
Probably yeah, so what I'm gonna
do is I'm gonna go through and

6
00:00:24.235 --> 00:00:28.016
do some of this stuff and
you can follow along.

7
00:00:28.016 --> 00:00:33.001
Or I'll give you time after
to try to make it work or

8
00:00:33.001 --> 00:00:36.580
just play around with what we have.

9
00:00:37.590 --> 00:00:41.696
So the first couple of things
that we're going to need to do to

10
00:00:41.696 --> 00:00:45.319
get like commons chunking
working is let's identify

11
00:00:45.319 --> 00:00:49.199
the thing that probably won't
change very frequently.

12
00:00:49.199 --> 00:00:53.800
In our case we'll go
to our WebPack config.

13
00:00:53.800 --> 00:00:59.140
In our case the one thing that we're going
to specifically call out is if we go,

14
00:00:59.140 --> 00:01:01.708
sorry, to app.js.

15
00:01:01.708 --> 00:01:06.919
It's this the CSS file,
this is a like a vendor file.

16
00:01:06.919 --> 00:01:10.844
We don't update our dependencies as
frequently as we update our code and so

17
00:01:10.844 --> 00:01:14.500
vendor files are a really good
candidate for having a common string.

18
00:01:14.500 --> 00:01:19.003
So we don't have multiple apps like I had
in that graph, but we do have code that

19
00:01:19.003 --> 00:01:23.665
doesn't change as frequently and so this
is a good candidate for a common chunk.

20
00:01:23.665 --> 00:01:29.469
And so the way that you implement
like the commons chunk plugin,

21
00:01:29.469 --> 00:01:33.670
I wish was simpler but
it's not like super.

22
00:01:33.670 --> 00:01:37.060
There are a couple of things you have to
do and it doesn't altogether make sense.

23
00:01:37.060 --> 00:01:40.960
So we're going to actually change
the entry from a string to an object.

24
00:01:42.280 --> 00:01:47.253
And we're going to set our original
entry as app on that object.

25
00:01:49.941 --> 00:01:54.765
&gt;&gt; Kent C Dodds: And then we're going
to make another entry called vendor.

26
00:01:54.765 --> 00:01:59.565
And this is going to be an array of all
of the vendor modules that we want to

27
00:01:59.565 --> 00:02:02.126
have chunked into this vendor entry.

28
00:02:04.076 --> 00:02:08.305
&gt;&gt; Kent C Dodds: And for
us that's just going to be

29
00:02:08.305 --> 00:02:15.270
a todomvc-app-css/index.css,
so that module.

30
00:02:15.270 --> 00:02:20.974
And with that, you should be able to
actually run npm run build:dev or

31
00:02:20.974 --> 00:02:24.655
probably you can just do the build,
as well.

32
00:02:24.655 --> 00:02:29.040
Oops, right, yeah, then you're
gonna get this error, that's right.

33
00:02:32.010 --> 00:02:33.330
And I will show you how
to get around that.

34
00:02:33.330 --> 00:02:37.315
Anybody seeing this error right now?

35
00:02:37.315 --> 00:02:39.959
Okay, let me make this smaller.

36
00:02:51.637 --> 00:02:56.353
&gt;&gt; Kent C Dodds: One other thing that
we inherited when we chunked one of

37
00:02:56.353 --> 00:03:01.488
these branches was we actually
added a plug ins array here.

38
00:03:01.488 --> 00:03:04.368
Where we added a new progress bar plug in.

39
00:03:04.368 --> 00:03:08.980
I added that because our app
is quite a bit bigger now

40
00:03:08.980 --> 00:03:11.885
that we have react and D3 in it.

41
00:03:11.885 --> 00:03:16.943
And so as as you run the build you'll
see this build percentage thing.

42
00:03:16.943 --> 00:03:20.600
And if your screen is wide enough it'll
actually have a little ticker thing.

43
00:03:20.600 --> 00:03:24.180
And you notice that sometimes
it goes really far up, and

44
00:03:24.180 --> 00:03:25.170
then it jumps back down.

45
00:03:25.170 --> 00:03:29.750
It's almost like Windows telling you what
time it's going to be done with something.

46
00:03:29.750 --> 00:03:34.420
So the reason that happens is
the progress isn't always 100% certain.

47
00:03:34.420 --> 00:03:36.670
It's reporting progress
as it finds modules.

48
00:03:36.670 --> 00:03:40.205
So it might find a module that actually
imports a whole bunch of other modules and

49
00:03:40.205 --> 00:03:41.747
that's when progress goes down.

50
00:03:41.747 --> 00:03:43.187
So, it's kind of interesting, but

51
00:03:43.187 --> 00:03:45.609
it's nice to have something to
look at while it's building.

52
00:03:45.609 --> 00:03:49.639
[LAUGH] So,
it's just mostly aesthetically.

53
00:03:49.639 --> 00:03:53.336
Okay, you should probably have,

54
00:03:53.336 --> 00:03:58.070
yeah, let's silence the npn output here.

55
00:03:58.070 --> 00:04:01.313
So you should have this
error that says bundle,

56
00:04:01.313 --> 00:04:06.272
Conflict: Multiple assets emit to
the same file name 'bundle.js'.

57
00:04:06.272 --> 00:04:09.411
That's something that web pack validator
could probably give a nicer error

58
00:04:09.411 --> 00:04:10.210
message to for us.

59
00:04:10.210 --> 00:04:14.776
But basically, what the problem is
is now we have multiple entries.

60
00:04:14.776 --> 00:04:17.230
And so webpack is gonna say, okay for

61
00:04:17.230 --> 00:04:20.920
each one of the entries in here,
I'm going to webpackify them,

62
00:04:22.320 --> 00:04:27.170
no pun intended with browserfy,
and create a bundle for it.

63
00:04:27.170 --> 00:04:31.424
And then with each one of those it's
going to look at this output object,

64
00:04:31.424 --> 00:04:33.735
and determine what the name should be.

65
00:04:33.735 --> 00:04:35.942
Well, the filename for
both of these is going to be bundle so

66
00:04:35.942 --> 00:04:37.325
you're going to overwrite things.

67
00:04:37.325 --> 00:04:40.599
So that was nice of them at least to
throw us an error rather than just

68
00:04:40.599 --> 00:04:42.009
like overwriting the file.

69
00:04:43.030 --> 00:04:47.400
So what we need to do is make this bundle,
or this filename dynamic.

70
00:04:47.400 --> 00:04:51.510
And the way that you do that is
each file has a unique hash.

71
00:04:52.840 --> 00:04:58.194
Or actually, let's just use the name for
right now, we'll use hash later.

72
00:04:59.330 --> 00:05:05.340
And so now if you rerun it, you'll get
in your disk directory two bundles.

73
00:05:06.925 --> 00:05:08.551
Well, actually you'll get three,
one is for

74
00:05:08.551 --> 00:05:09.977
the code splitting that we had earlier.

75
00:05:13.954 --> 00:05:16.417
&gt;&gt; Kent C Dodds: Anybody
have those bundles yet?

76
00:05:16.417 --> 00:05:17.110
Awesome.

77
00:05:20.236 --> 00:05:24.650
Martin S is asking with different apps
do you mean just different pages?

78
00:05:24.650 --> 00:05:30.070
Martin, it kinda depends if you have a
single page app, then like that's one app.

79
00:05:30.070 --> 00:05:34.048
If you have like multiple pages
that each have their own entry and

80
00:05:34.048 --> 00:05:38.696
webpack, and so
this is actually a good case for that.

81
00:05:38.696 --> 00:05:43.318
In my app at work I actually
kind of share code base with

82
00:05:43.318 --> 00:05:48.165
a couple other teams who
are working on different apps.

83
00:05:48.165 --> 00:05:52.906
And they're totally separate pages, have
different index HTMLs and everything, but

84
00:05:52.906 --> 00:05:57.570
we're using the same webpack config
with the entry for each one of our apps.

85
00:05:57.570 --> 00:06:01.108
And so
then we can share code between the apps.

86
00:06:01.108 --> 00:06:06.850
And so like our low dash and our J query,
and our react is all shared between us.

87
00:06:06.850 --> 00:06:10.380
So as users navigate between
these different apps,

88
00:06:10.380 --> 00:06:12.730
they don't have to
redownload all that stuff.

89
00:06:12.730 --> 00:06:14.532
Good question, Martin.

90
00:06:14.532 --> 00:06:20.227
Okay, so, yeah, so
now we're generating these things.

91
00:06:20.227 --> 00:06:24.491
But if you if you run NPM start what

92
00:06:24.491 --> 00:06:29.373
it should do is it should load the app.

93
00:06:29.373 --> 00:06:32.530
But it's not all it's
loading like garbage.

94
00:06:32.530 --> 00:06:36.075
This is just our index HTML
it's failing to load bundle.js.

95
00:06:36.075 --> 00:06:41.705
That's because it's no longer called
bundle.js it's now called bundle.app.js.

96
00:06:41.705 --> 00:06:46.475
So one thing we could do is say okay let's
just update that to bundle.app.js and

97
00:06:46.475 --> 00:06:50.183
then also add bundle.vendor.js.

98
00:06:50.183 --> 00:06:54.426
Yeah, we could do that, but we're going
to do something a little bit different.

99
00:06:54.426 --> 00:07:00.180
Because things are about to change
with the way that we name these files.

100
00:07:02.180 --> 00:07:06.380
Sorry, Martin is asking, so
it doesn't make sense on one PSA?

101
00:07:06.380 --> 00:07:08.790
It actually does or SPA, yeah.

102
00:07:08.790 --> 00:07:13.078
So it actually does make sense to do this
still on a single page app because now

103
00:07:13.078 --> 00:07:16.035
you're separating your app
code from vendor code.

104
00:07:16.035 --> 00:07:19.095
And you update your app code more
often than vendor code and so

105
00:07:19.095 --> 00:07:21.110
the browser can cache the vendor code.

106
00:07:21.110 --> 00:07:22.190
So yeah you definitely,

107
00:07:22.190 --> 00:07:26.840
I can't think of a situation where
you wouldn't want to do this.

108
00:07:26.840 --> 00:07:33.100
And Daniel, he was asking do you need
the same top level or subdomains for this.

109
00:07:33.100 --> 00:07:37.668
I'm not sure I understand the question but
as far as static assets,

110
00:07:37.668 --> 00:07:43.055
they can be served from anywhere,
doesn't matter what their their domain is.

111
00:07:43.055 --> 00:07:48.615
As far as like making requests to servers
and stuff, if you're gonna do cross domain

112
00:07:48.615 --> 00:07:53.958
then you need like cross origin sharing
course across origin resource sharing.

113
00:07:53.958 --> 00:07:58.862
Cool, so, what we're

114
00:07:58.862 --> 00:08:03.037
going to do next is.

115
00:08:09.777 --> 00:08:15.210
&gt;&gt; Kent C Dodds: Okay, we're going
to add the commons chunk plugin now.

116
00:08:15.210 --> 00:08:22.340
So, if we go up here to the top
we're going to require webpack.

117
00:08:22.340 --> 00:08:25.100
So it actually does have a node
API that we're going to use.

118
00:08:25.100 --> 00:08:28.417
So I'll say webpack = require webpack.

119
00:08:28.417 --> 00:08:33.479
And the webpack has several
plugins on it that we can use.

120
00:08:34.740 --> 00:08:37.950
Lots of those are on
a property called optimize.

121
00:08:37.950 --> 00:08:41.120
And with plugins you create
new instances of plugins.

122
00:08:41.120 --> 00:08:45.100
And so
we'll go down here to our plugins array.

123
00:08:45.100 --> 00:08:49.095
And we'll add an item called

124
00:08:49.095 --> 00:08:56.120
newwebpack.optimize.CommonsChunkPlugin.

125
00:08:56.120 --> 00:09:04.720
And will configure it to
use the vendor entry.

126
00:09:04.720 --> 00:09:08.170
Like I said I kinda wish that this was
a little bit more straight forward

127
00:09:08.170 --> 00:09:11.989
than it is, yeah, it's unfortunate.

128
00:09:13.080 --> 00:09:16.910
So actually, I should back up and
explain why this is even necessary.

129
00:09:18.300 --> 00:09:21.310
So right now,
sorry I should leave that right there.

130
00:09:21.310 --> 00:09:25.009
So right now we have two entries and
so we have one for

131
00:09:25.009 --> 00:09:30.447
apps that's taking all the requires for
app and making that into a bundle.

132
00:09:30.447 --> 00:09:33.580
And we have another one for vendor and
that's taking all the vendor stuff.

133
00:09:33.580 --> 00:09:36.450
Well we haven't told
webpack until just now

134
00:09:36.450 --> 00:09:40.140
that we don't want app to
contain all the vendor stuff.

135
00:09:40.140 --> 00:09:44.200
It still has a require for it or
an import for it, and it should because it

136
00:09:44.200 --> 00:09:47.914
actually explicitly does depend on that
and we want that explicitness still.

137
00:09:50.470 --> 00:09:55.030
So what we're saying here is
hey commons chunk plugin,

138
00:09:55.030 --> 00:09:59.460
take that everything from the vendor entry
everything that's in that vendor entry

139
00:09:59.460 --> 00:10:01.470
like all the modules that are in there.

140
00:10:01.470 --> 00:10:04.956
I want you to make a commons
chunk out of that.

141
00:10:04.956 --> 00:10:09.880
So app doesn't have all that code in it.

142
00:10:09.880 --> 00:10:14.780
Like I said it's probably not the clearest
API in the world but now you know.

143
00:10:14.780 --> 00:10:18.090
So you go teach people that
would be a good thing.

144
00:10:19.940 --> 00:10:24.890
Yeah, so now actually if, well here,
let's just kind of explore for a second.

145
00:10:24.890 --> 00:10:28.872
Let's look before we rerun the build,
I'll just show you

146
00:10:28.872 --> 00:10:33.870
that in bundle app we do

147
00:10:33.870 --> 00:10:38.820
still have all the code for
it to do NVC app, css.

148
00:10:38.820 --> 00:10:46.620
If we save this and then re-run
with our new CommonsChunkPlugin,

149
00:10:46.620 --> 00:10:50.652
whoops, I just re-ran the server.

150
00:10:52.294 --> 00:10:57.400
We're gonna blow away that disk directory
and create it a new with an app

151
00:10:57.400 --> 00:11:01.390
that, if everything works,

152
00:11:02.550 --> 00:11:05.330
no longer actually has the code,
it just has a require for it.

153
00:11:06.570 --> 00:11:10.900
And so then we can take care
of loading that module.

154
00:11:12.060 --> 00:11:17.490
Or providing that module for webpack
to resolve and everything is great.

155
00:11:18.580 --> 00:11:22.040
So we do still have to provide
that module for webpack.

156
00:11:22.040 --> 00:11:27.680
So like I said this is kind of a longer,
more stuff.

157
00:11:27.680 --> 00:11:30.860
And one way that we could do that and
actually why don't we go ahead and

158
00:11:30.860 --> 00:11:34.660
do that right now as as an exercise.

159
00:11:34.660 --> 00:11:40.087
So go into your index HTML and
you're going

160
00:11:40.087 --> 00:11:45.362
to want to have the bundle.app in here and

161
00:11:45.362 --> 00:11:48.710
the bundle.vendor.

162
00:11:48.710 --> 00:11:51.370
That comes before it because
app depends on vendor.

163
00:11:51.370 --> 00:11:54.429
So remember how we were like sweet,
we're removing script tags in our HTML,

164
00:11:54.429 --> 00:11:56.740
well yeah we're adding
them back right now.

165
00:11:56.740 --> 00:12:00.550
Just for now though, don't worry,
it will be gone soon.

166
00:12:00.550 --> 00:12:02.038
But now if you run npn start,

167
00:12:02.038 --> 00:12:04.895
you should be able to load
the app without any trouble.

168
00:12:13.246 --> 00:12:14.483
&gt;&gt; Kent C Dodds: Whoops.

169
00:12:14.483 --> 00:12:18.435
&gt;&gt; Speaker 2: Somebody's asking does
the order of the plugins matter?

170
00:12:18.435 --> 00:12:20.930
&gt;&gt; Kent C Dodds: Order of
the plugins does sometimes matter.

171
00:12:24.020 --> 00:12:28.839
I think, I'm pretty sure, [LAUGH] I've
actually never run into a problem with it.

172
00:12:28.839 --> 00:12:30.440
But people have told me that it does.

