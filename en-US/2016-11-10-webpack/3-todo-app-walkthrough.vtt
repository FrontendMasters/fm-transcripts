WEBVTT

1
00:00:00.000 --> 00:00:03.824
[MUSIC]

2
00:00:03.824 --> 00:00:05.650
&gt;&gt; Kent C Dodds: Your scripts
should hopefully be done by now.

3
00:00:05.650 --> 00:00:08.670
So let's go ahead and explore things.

4
00:00:08.670 --> 00:00:15.200
So if you pop open your editor and
you're terminal and you run npm start.

5
00:00:15.200 --> 00:00:17.740
Actually Iet me.

6
00:00:20.250 --> 00:00:24.370
So, you should be on the original
project branch if you ran that

7
00:00:24.370 --> 00:00:26.407
script that's where you are.

8
00:00:26.407 --> 00:00:29.438
If you run get branch it should be
highlight, well I have a lot of branches

9
00:00:29.438 --> 00:00:32.040
on here but it should be
highlighting the one that you're on.

10
00:00:33.380 --> 00:00:39.660
Okay, so now you can run npm start and
this will start the http server for

11
00:00:39.660 --> 00:00:43.963
your app so
it's let me pop this open elsewhere.

12
00:00:43.963 --> 00:00:45.472
Yes question.
&gt;&gt; Mike: I've got a question in here

13
00:00:45.472 --> 00:00:47.780
are we going to talk about
code splitting with web pack.

14
00:00:47.780 --> 00:00:51.360
&gt;&gt; Kent C Dodds: Yes yes we
definitely will and true shaking and

15
00:00:51.360 --> 00:00:55.299
all the fun buzzworder things things that
people want to hear about these days.

16
00:00:56.470 --> 00:00:59.410
That are buzz worthy for
a reason, because they're cool.

17
00:00:59.410 --> 00:01:01.980
Okay, sorry, just arranging things.

18
00:01:01.980 --> 00:01:04.380
So yeah, you should be looking
at something like this,

19
00:01:04.380 --> 00:01:08.150
except you probably won't have
to do's already in there.

20
00:01:08.150 --> 00:01:11.270
So yeah, basically the functionality
of the app is fairly simple.

21
00:01:11.270 --> 00:01:14.990
You can say hello to people,

22
00:01:14.990 --> 00:01:20.150
say goodbye to people, smile, frown.

23
00:01:20.150 --> 00:01:21.500
Okay, so then I'm gonna frown.

24
00:01:22.700 --> 00:01:26.240
Okay, done that and
I'm gonna say hello, hello.

25
00:01:26.240 --> 00:01:30.685
Okay, and so then I can go to active and
I see the things that I have yet to do,

26
00:01:30.685 --> 00:01:31.473
completed.

27
00:01:31.473 --> 00:01:34.100
And you'll see that the URL is updating.

28
00:01:34.100 --> 00:01:37.170
As I navigate to these different things.

29
00:01:37.170 --> 00:01:40.650
There actually is a bug that I've
discovered, but it's hard to reproduce.

30
00:01:40.650 --> 00:01:45.847
So if you can find the bug and
submit a patch, that'd be awesome.

31
00:01:45.847 --> 00:01:47.430
And then we can also clear completed.

32
00:01:47.430 --> 00:01:49.420
There's the bug, well,
no, that's not the bug.

33
00:01:49.420 --> 00:01:50.910
There we go.

34
00:01:50.910 --> 00:01:54.450
So, yeah,
I need to give credit where credit is due.

35
00:01:54.450 --> 00:01:58.180
Because I did not build this app,
I do not have these design skills.

36
00:01:58.180 --> 00:02:00.580
And so this is the TodoMVC Project.

37
00:02:00.580 --> 00:02:02.840
Basically the whole
idea of the project is,

38
00:02:02.840 --> 00:02:07.010
let's take all the TodoMVC* frameworks,
and

39
00:02:07.010 --> 00:02:11.590
make, build the same app in them, so
you can kinda compare approaches.

40
00:02:11.590 --> 00:02:15.042
There has been a little bit of
criticism of this approach,

41
00:02:15.042 --> 00:02:17.163
because it's a pretty simple app.

42
00:02:17.163 --> 00:02:20.908
Things change considerably when
you get to like enormous apps, but

43
00:02:20.908 --> 00:02:25.112
I think it's a pretty good way to tell
whether you like the approach to things

44
00:02:25.112 --> 00:02:26.640
from certain frameworks.

45
00:02:28.120 --> 00:02:31.810
So this is a fork from a couple
like about a year ago actually

46
00:02:31.810 --> 00:02:34.479
that I changed a little bit for
our purposes.

47
00:02:35.480 --> 00:02:38.390
So that is the to do MVC
app that we'll be using.

48
00:02:39.650 --> 00:02:41.480
Let's take a look at the code
after this question.

49
00:02:41.480 --> 00:02:44.070
&gt;&gt; Mike: There was a question on
are there any of the features except

50
00:02:44.070 --> 00:02:46.100
tree shaking that are webpack 2 only?

51
00:02:46.100 --> 00:02:47.290
&gt;&gt; Kent C Dodds: Great question Martin.

52
00:02:47.290 --> 00:02:49.810
So there are several features and

53
00:02:49.810 --> 00:02:52.200
I will try to call them out
that are webpack 2 only.

54
00:02:53.690 --> 00:02:58.678
Like that and actually I'm pretty sure
at the end of the slides I have a link

55
00:02:58.678 --> 00:03:01.749
to it just that explain
all the differences.

56
00:03:01.749 --> 00:03:06.467
There aren't a ton there
are a couple API differences and

57
00:03:06.467 --> 00:03:12.951
there are yeah just a couple features
that web pack 2 that web pack 1 does not,

58
00:03:12.951 --> 00:03:18.668
the way that it does code splitting
is different, so good question.

59
00:03:18.668 --> 00:03:21.210
Yeah, and we will see those today,
Martin, cool.

60
00:03:22.730 --> 00:03:24.290
Any other questions
before I jump into code?

61
00:03:25.780 --> 00:03:29.471
Sweet, so the code, we'll start
with our package JSON actually.

62
00:03:29.471 --> 00:03:31.920
So we have a couple, one dependency here.

63
00:03:33.920 --> 00:03:39.096
We are depending on the app-css because
todomvc is more focused on the JavaScript

64
00:03:39.096 --> 00:03:43.683
portion of things and so they have
a common CSS module that we're using.

65
00:03:43.683 --> 00:03:48.998
And then we have some devDependencies
eslint, my own config, which is great and

66
00:03:48.998 --> 00:03:54.090
you should use it because no just kidding
you can do your own style and stuff.

67
00:03:54.090 --> 00:03:57.630
In fact the linting stuff
should only be linting for

68
00:03:57.630 --> 00:03:59.780
best practices in areas
not stylistic things.

69
00:03:59.780 --> 00:04:04.175
So you can feel free to use
semi-colons you're welcome.

70
00:04:04.175 --> 00:04:08.069
And then yeah just a couple other
dependencies ghooks you probably don't

71
00:04:08.069 --> 00:04:12.423
really need to worry about it was mostly
for my benefit while making the workshop.

72
00:04:12.423 --> 00:04:16.940
And then our scripts we're gonna become
really good friends with scripts today.

73
00:04:16.940 --> 00:04:24.181
We have a validate script that hopefully
if you run an npm run validate it

74
00:04:24.181 --> 00:04:29.264
doesn't produce any errors
if it does I am sorry.

75
00:04:29.264 --> 00:04:33.879
Cross-platform problems are hard
especially when you don't have a Windows

76
00:04:33.879 --> 00:04:34.519
machine.

77
00:04:34.519 --> 00:04:38.495
Linting luckily isn't really super
important for us right now, or for this

78
00:04:38.495 --> 00:04:43.029
workshop, so if somebody wants to submit a
patch to fix that problem that'd be great,

79
00:04:43.029 --> 00:04:46.180
but we don't actually need it desperately.

80
00:04:46.180 --> 00:04:49.900
The start is just going to
start up our HTTP server.

81
00:04:49.900 --> 00:04:52.640
So we'll be adding a bunch of
scripts to the scripts here.

82
00:04:52.640 --> 00:04:56.720
So let's take a look at our index HTML.

83
00:04:57.890 --> 00:05:03.420
We have it's actually pretty small,
52 lines of HTML and

84
00:05:03.420 --> 00:05:10.820
we have just our the most interesting
bit are the scripts here at the bottom.

85
00:05:10.820 --> 00:05:15.720
So we have Bootstrap which is loaded last
because everything else has to be loaded

86
00:05:15.720 --> 00:05:20.410
first because we care about that
in this current world of scripts.

87
00:05:20.410 --> 00:05:27.000
We also have our link tag here that
has an h ref to that shared CSS.

88
00:05:27.000 --> 00:05:31.304
And Henry is asking what
is the use of Ghooks.

89
00:05:31.304 --> 00:05:33.780
Go check out the N.P.N.
page for it's great.

90
00:05:33.780 --> 00:05:35.937
I like it a lot and I contribute to it but

91
00:05:35.937 --> 00:05:38.712
it's not really important
to that workshop so.

92
00:05:38.712 --> 00:05:42.159
&gt;&gt; Mike: There is one
question about that too.

93
00:05:42.159 --> 00:05:45.624
&gt;&gt; Kent C Dodds: Yeah any thoughts on the
effects of HTTP2 on module bundlers I'm

94
00:05:45.624 --> 00:05:49.089
under the impression that bundling
generally is aimed at getting

95
00:05:49.089 --> 00:05:50.614
around issues with HTTP 1.

96
00:05:50.614 --> 00:05:54.302
I'll go ahead and pause this and
answer that question Mike,

97
00:05:54.302 --> 00:05:56.037
that is a common question and

98
00:05:56.037 --> 00:06:01.220
lots of people think that HTTP2 is
the savior of the app builders of the web.

99
00:06:01.220 --> 00:06:05.030
And in many cases, it is, It helps.

100
00:06:06.270 --> 00:06:10.697
So the specific feature that Mike is
talking about is called I think it's

101
00:06:10.697 --> 00:06:15.562
multiplexing but basically the idea is
part of the problems with HTTP1 is every

102
00:06:15.562 --> 00:06:20.426
single thing that you go to get from
the server you have to have your own TCP

103
00:06:20.426 --> 00:06:24.518
handshake and you do a whole bunch
of stuff to go get that resource.

104
00:06:24.518 --> 00:06:28.318
And it's and so that's part of the reason
why having a lot of script tags is

105
00:06:28.318 --> 00:06:31.874
a problem because the browser can only
do like six of those at a time and

106
00:06:31.874 --> 00:06:34.632
it takes some time to load all those and
then you can and

107
00:06:34.632 --> 00:06:37.420
then you parse a JavaScript and
then you run it and so.

108
00:06:38.870 --> 00:06:41.877
So yeah HTTP2 is cool because
it can open up a connection and

109
00:06:41.877 --> 00:06:43.800
then just get all the stuff.

110
00:06:43.800 --> 00:06:50.298
So it's much faster and so
it's gonna be great whether you bundle or

111
00:06:50.298 --> 00:06:57.024
not, but the nice thing is that
actually bundling might not be optimal

112
00:06:57.024 --> 00:07:02.271
in that kind of scenario or
that's what people think.

113
00:07:02.271 --> 00:07:04.648
What I would say is benchmark it for
your app.

114
00:07:04.648 --> 00:07:08.567
But it's actually quite likely that
you will still want to bundle,

115
00:07:08.567 --> 00:07:13.238
because what you get from bundling, or
a big piece of what you get from bundling,

116
00:07:13.238 --> 00:07:17.452
is all of your JavaScript is in one
file and then you can g-zip that file.

117
00:07:17.452 --> 00:07:20.200
So that means is that you compress it.

118
00:07:20.200 --> 00:07:23.664
And so like the file size is much smaller.

119
00:07:23.664 --> 00:07:26.987
But if you have like a hundred or
if you're using NPM and

120
00:07:26.987 --> 00:07:30.710
you have dependencies and
NPM we love dependencies.

121
00:07:30.710 --> 00:07:34.870
You'll have hundreds of
separate JavaScript files.

122
00:07:34.870 --> 00:07:38.300
Even with HTTP2 and
all of it's magic and glory.

123
00:07:38.300 --> 00:07:43.650
Will probably not be faster at loading
that than it would be at loading one or

124
00:07:43.650 --> 00:07:46.250
two or maybe even ten G zipped files.

125
00:07:46.250 --> 00:07:49.106
And so you could say, well,
okay well just G zip everything.

126
00:07:49.106 --> 00:07:52.290
Well G zip doesn't do much
good if it's a small file and

127
00:07:52.290 --> 00:07:55.920
it needs to have,
like there's a threshold of how much

128
00:07:55.920 --> 00:08:00.760
content is in that file before G zip
actually starts providing benefits.

129
00:08:00.760 --> 00:08:05.832
And so it's not just so
clear cut and dry of whether or

130
00:08:05.832 --> 00:08:10.700
not HTTP2 is going to
solve all of our problems.

131
00:08:10.700 --> 00:08:14.130
I feel like I'll be
bundling probably forever

132
00:08:14.130 --> 00:08:17.750
even take electronics apps for example.

133
00:08:17.750 --> 00:08:22.376
So an electron app is
a native feeling app,

134
00:08:22.376 --> 00:08:26.240
just built with web technologies.

135
00:08:26.240 --> 00:08:29.980
I'm using an electron app right now,
this whole thing is built with JavaScript.

136
00:08:29.980 --> 00:08:31.673
Look at that, what?

137
00:08:31.673 --> 00:08:33.660
&gt;&gt; Students: [LAUGH]
&gt;&gt; Kent C Dodds: Yeah, so cool.

138
00:08:33.660 --> 00:08:38.470
And so one cool thing about electron apps
is you don't have to worry about bundling,

139
00:08:38.470 --> 00:08:40.260
because all the files are right there.

140
00:08:40.260 --> 00:08:44.463
But bundling in that scenario is useful
for shrinking down what you're actually

141
00:08:44.463 --> 00:08:48.726
sending to people to download because if
you don't do that then you're gonna have

142
00:08:48.726 --> 00:08:51.852
all the node modules in there
that you're sending with it.

143
00:08:51.852 --> 00:08:56.836
And I have to be honest one time I
published a nine megabyte gif in

144
00:08:56.836 --> 00:09:01.600
my node module, so
sorry everyone who is using that.

145
00:09:01.600 --> 00:09:05.960
I fix that later but yeah so you'll have,
sometimes people will publish test and

146
00:09:05.960 --> 00:09:10.200
they'll publish documentation and so
by bundling you can just say okay

147
00:09:10.200 --> 00:09:13.910
just get the stuff that actually
required and then even tree shake that.

148
00:09:13.910 --> 00:09:17.450
And now it's much smaller and
when people download my desktop app even

149
00:09:18.840 --> 00:09:23.320
that's much smaller less stuff to
parse through, ends up being faster.

150
00:09:23.320 --> 00:09:27.240
So we'll be bundling for a very long
time until there's like something

151
00:09:27.240 --> 00:09:29.940
even more game changing than HTTP2.

152
00:09:29.940 --> 00:09:32.720
I'm glad you brought that up, Mike,
cuz that's an important point.

153
00:09:32.720 --> 00:09:35.080
Any other questions?

154
00:09:35.080 --> 00:09:36.450
Okay, sweet.

155
00:09:36.450 --> 00:09:39.110
So just really quickly
continuing through this.

156
00:09:39.110 --> 00:09:42.294
We're going to get to code
here before too long.

157
00:09:42.294 --> 00:09:44.130
I'm gonna actually delete this, sorry.

158
00:09:45.960 --> 00:09:47.559
So we have our bootstrap,

159
00:09:47.559 --> 00:09:52.295
that's like our main method if you
think about it in non-JavaScript terms.

160
00:09:52.295 --> 00:09:56.642
Pretty much all other programming
languages have a main method,

161
00:09:56.642 --> 00:09:58.390
so this is pretty much it.

162
00:09:58.390 --> 00:10:03.196
We have our immediately
invoked function expression.

163
00:10:03.196 --> 00:10:07.640
And then we're calling a couple
global functions that we

164
00:10:07.640 --> 00:10:12.570
have defined here on
some global app object.

165
00:10:12.570 --> 00:10:15.380
And that is set somehow, somewhere, and
that's part of the problem that we're

166
00:10:15.380 --> 00:10:19.290
trying to solve with web pack,
is we want this dependency of app and

167
00:10:19.290 --> 00:10:23.870
this dependency of dollar
on to be more explicit.

168
00:10:23.870 --> 00:10:26.580
So quick question though, quiz.

169
00:10:27.940 --> 00:10:32.369
Who knows why we are doing an right
here in immediately invoked

170
00:10:32.369 --> 00:10:33.880
function expression?

171
00:10:35.050 --> 00:10:36.550
Anybody have any idea?

172
00:10:36.550 --> 00:10:38.416
Yes.
&gt;&gt; Speaker 4: We actually wanted to

173
00:10:38.416 --> 00:10:40.957
execute in real time as it's called.

174
00:10:40.957 --> 00:10:44.372
&gt;&gt; Kent C Dodds: Yeah, but why would I
need to do that because if I just did

175
00:10:44.372 --> 00:10:45.970
this right here.

176
00:10:45.970 --> 00:10:49.060
Wouldn't that like do
effectively the same thing?

177
00:10:49.060 --> 00:10:54.464
So the reason that we do this
is because back in olden

178
00:10:54.464 --> 00:11:00.508
times when we didn't have
awesome things like Webpack.

179
00:11:00.508 --> 00:11:04.829
What you could do is you could leak
variables onto the global scope and so

180
00:11:04.829 --> 00:11:09.296
what we're effectively doing here is
we say okay functions in JavaScript

181
00:11:09.296 --> 00:11:11.471
are where variables are scoped to.

182
00:11:11.471 --> 00:11:16.331
And so we're providing a closure to scope
all the variables that we would create in

183
00:11:16.331 --> 00:11:18.451
here so we say it like var foo = bar.

184
00:11:18.451 --> 00:11:21.200
And so
we don't want to leak those on Windows.

185
00:11:21.200 --> 00:11:24.266
Use strict actually solves lots
of lots of these problems for us.

186
00:11:24.266 --> 00:11:29.500
But yeah so are kind of a really common
thing and we'll be getting rid of that.

187
00:11:29.500 --> 00:11:33.570
We're also getting rid of use strict
through the course of this workshop.

