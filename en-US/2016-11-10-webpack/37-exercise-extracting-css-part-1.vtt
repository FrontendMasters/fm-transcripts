WEBVTT

1
00:00:04.100 --> 00:00:08.140
&gt;&gt; Kent C Dodds: We're gonna use
the extract text webpack plug in, and

2
00:00:08.140 --> 00:00:13.290
this actually is, we're going to
be using a version of this that

3
00:00:14.600 --> 00:00:18.800
has not actually been released yet
because it has a much nicer API.

4
00:00:18.800 --> 00:00:21.650
Before we do that actually though,
let's go ahead and

5
00:00:21.650 --> 00:00:24.870
check out that next branch
get on the same page.

6
00:00:29.260 --> 00:00:32.970
And then, we'll go to our

7
00:00:34.980 --> 00:00:37.640
package Jaison and
then we're going to install this plugin.

8
00:00:37.640 --> 00:00:42.750
So if you recall, we are right now,

9
00:00:42.750 --> 00:00:46.529
all that we are shipping to the browser
are a bunch of dot JS files

10
00:00:48.560 --> 00:00:50.780
and so all the CSS is being loaded

11
00:00:52.550 --> 00:00:57.110
into the browser via style
tag dynamically at run time.

12
00:00:57.110 --> 00:01:00.020
There are a couple drawbacks to this
approach a couple really nice things about

13
00:01:00.020 --> 00:01:06.110
this approach but because it's fairly
easy to add at this this plugin and

14
00:01:06.110 --> 00:01:08.930
we can start getting caching
on top of that as well.

15
00:01:08.930 --> 00:01:11.510
And then no flashing why not, let's do it.

16
00:01:12.550 --> 00:01:18.110
So one thing that we're gonna need,
is I mean, move this back to

17
00:01:19.970 --> 00:01:26.620
at some point in here we're gonna
have to extract text web pack plugin.

18
00:01:28.330 --> 00:01:35.560
And that is going to be 2.0.0-beta.3, so
it will believe is the latest beta and

19
00:01:36.740 --> 00:01:43.250
hopefully that beta will be officially
released soon and it likely will be.

20
00:01:43.250 --> 00:01:46.970
The reason that you're seeing lots of this
beta stuff is because webpack is in beta,

21
00:01:46.970 --> 00:01:52.350
as soon as it's out of beta like
the web pack dev server beta and

22
00:01:52.350 --> 00:01:57.135
that this beta will be
officially released as well and

23
00:01:57.135 --> 00:02:00.500
webpack 2 is gonna be
out of beta pretty soon.

24
00:02:00.500 --> 00:02:01.040
So yeah.

25
00:02:01.040 --> 00:02:05.660
Then we're going to obviously again unlike
with the and the rest of these plugins.

26
00:02:05.660 --> 00:02:09.527
We're going to require the extract text

27
00:02:09.527 --> 00:02:14.205
plugin.
&gt;&gt; Kent C Dodds: And

28
00:02:14.205 --> 00:02:19.330
we'll utilize that in our config.

29
00:02:19.330 --> 00:02:26.160
But this one's a little bit special
because it requires not only like

30
00:02:26.160 --> 00:02:30.610
a special plug-in behavior but it also has
a special loader that it requires as well.

31
00:02:30.610 --> 00:02:36.280
So, we're going to modify our loaders for
our CSS.

32
00:02:36.280 --> 00:02:36.780
here.

33
00:02:39.110 --> 00:02:43.700
So that the extract CSS
plugin can work for us.

34
00:02:45.160 --> 00:02:49.540
And like we're no longer gonna be using
the style loader to accomplish our task.

35
00:02:49.540 --> 00:02:52.960
Cuz the style loader's job was
to inject stuff into the DOM.

36
00:02:52.960 --> 00:02:56.210
As in style tags we don't
care about that anymore.

37
00:02:56.210 --> 00:03:03.820
We are all in with this ExtractTextPlugin
so just say that .extract.

38
00:03:03.820 --> 00:03:07.900
And what this is gonna do is we
give it a configuration object,

39
00:03:07.900 --> 00:03:12.630
and it'll return as a loader,
a lower function that this can use.

40
00:03:12.630 --> 00:03:17.860
We also need to either put
wrap this inside of an array,

41
00:03:17.860 --> 00:03:22.040
or change this from loaders to loader.

42
00:03:23.040 --> 00:03:26.020
Of course the Webpack- validator
would have caught that for

43
00:03:26.020 --> 00:03:29.950
us which is awesome but
I would just change it to loader.

44
00:03:31.120 --> 00:03:34.090
And will specify a fallback loader.

45
00:03:35.130 --> 00:03:38.630
I'm only saying this because
you might run into it yourself.

46
00:03:38.630 --> 00:03:41.880
I'm not sure when a fallback
loader would be necessary,

47
00:03:41.880 --> 00:03:45.540
but it's good to know that
there is one available.

48
00:03:45.540 --> 00:03:51.300
And then the loader that we
want to use for taking CSS or

49
00:03:51.300 --> 00:03:56.830
from taking our CSS files and converting
them into JavaScript modules as CSS.

50
00:03:56.830 --> 00:03:59.180
So if you're doing Stylus, or SaaS, or

51
00:03:59.180 --> 00:04:03.550
whatever, you would use those loaders,
to turn those into JavaScript modules.

52
00:04:05.950 --> 00:04:11.460
Actually, what you would probably do
is you would need to specify Stylus,

53
00:04:11.460 --> 00:04:16.800
and then also CSS, because Stylus is
just concerned with converting it.

54
00:04:16.800 --> 00:04:19.608
Compiling it down into C.S.S.,
I'm in then the C.S.S.

55
00:04:19.608 --> 00:04:22.210
loaders responsible for
making it a JavaScript module.

56
00:04:23.910 --> 00:04:26.750
Okay great, then there's one last
thing we need to do to make this work.

57
00:04:27.820 --> 00:04:33.190
And that is we specify
a new extract text plugin.

58
00:04:33.190 --> 00:04:37.700
And we specify the name that
we want our CSS file to have.

59
00:04:37.700 --> 00:04:43.695
And so in production we want to have,
like we'll just call it style or

60
00:04:43.695 --> 00:04:49.490
styles.the name of the entry or

61
00:04:49.490 --> 00:04:55.250
like whatever the name
of this bundle would be.

62
00:04:55.250 --> 00:05:00.290
And then the chunkhash,
because we want to say hey server,

63
00:05:00.290 --> 00:05:06.070
configure all browsers to never
invalidate this cache, and then say .css.

64
00:05:06.070 --> 00:05:08.720
But again, that's gonna fail on
us when we're developing, and so

65
00:05:08.720 --> 00:05:11.455
we'll say ifProd for that.

66
00:05:11.455 --> 00:05:16.518
And pass in styles.name.css, so

67
00:05:16.518 --> 00:05:21.420
that's what that will look like.

68
00:05:21.420 --> 00:05:24.170
And then from that
&gt;&gt; Speaker 2: You forgot you're closing

69
00:05:24.170 --> 00:05:27.400
paragraph on wrong way.
&gt;&gt; Kent C Dodds: Gracias,

70
00:05:27.400 --> 00:05:28.320
I put it right here.

71
00:05:30.370 --> 00:05:33.470
Thank you.

72
00:05:33.470 --> 00:05:34.400
Very good.

73
00:05:34.400 --> 00:05:37.400
So with that you should be able to run it.

74
00:05:37.400 --> 00:05:40.010
But we'll run the full prod build.

75
00:05:40.010 --> 00:05:41.520
Don't do that, npm run build.

76
00:05:43.540 --> 00:05:50.030
And what we'll get in the end is a dis
directory that has our index html,

77
00:05:50.030 --> 00:05:55.230
and all of our JavaScript stuff,
but also a CSS files,

78
00:05:55.230 --> 00:05:58.810
styles for the app,
styles for the vendor and

79
00:05:58.810 --> 00:06:03.260
now we can put, and actually we don't
even have to do anything about this.

80
00:06:03.260 --> 00:06:05.410
Those get put in as link tags for us.

81
00:06:06.520 --> 00:06:08.320
Because they issue now plug in.

82
00:06:08.320 --> 00:06:14.339
I'm pretty sure I didn't look
into this but I'm pretty certain.

83
00:06:14.339 --> 00:06:17.080
Okay let's just try it,
I might make a fool of myself here but

84
00:06:17.080 --> 00:06:20.950
I'm pretty certain that we could
just comment that out now.

85
00:06:20.950 --> 00:06:25.120
And put our CSS up at the top and
our JavaScript at the bottom.

86
00:06:25.120 --> 00:06:27.230
If it doesn't do that then I'm
sure there's a way to configure it

87
00:06:27.230 --> 00:06:29.500
to do that because that's
what you normally want to do.

