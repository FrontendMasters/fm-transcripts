WEBVTT

1
00:00:00.000 --> 00:00:03.887
[MUSIC]

2
00:00:03.887 --> 00:00:08.100
&gt;&gt; Kent C Dodds: Even with WebPack, this
is what our dependency tree looks like.

3
00:00:08.100 --> 00:00:11.000
It's just a bunch of random files
that may or may not be dependent,

4
00:00:11.000 --> 00:00:12.270
it's just script tags, right?

5
00:00:12.270 --> 00:00:16.950
We just are saying, okay, we replaced
our bootstrap JS with this bundle JS,

6
00:00:16.950 --> 00:00:20.010
it's really not getting us anything
from a dependency perspective.

7
00:00:20.010 --> 00:00:24.370
So this next module is about
making those dependencies

8
00:00:24.370 --> 00:00:26.090
a little bit more tied together.

9
00:00:27.240 --> 00:00:32.120
So the exercise was this and
we're gonna skip it because like I said,

10
00:00:32.120 --> 00:00:34.490
this one was a little bit more
monkey work set of things.

11
00:00:36.300 --> 00:00:39.035
But yeah, so here inside of our app,

12
00:00:39.035 --> 00:00:45.137
we identified all of the modules that this
app requires, this app module itself.

13
00:00:45.137 --> 00:00:51.683
And so, all of these modules attack
something onto the app global, right?

14
00:00:51.683 --> 00:01:00.150
So that's even, this app module itself
attacks on load, to the app global.

15
00:01:00.150 --> 00:01:03.755
And so what we're trying to do
is pull away from global's and

16
00:01:03.755 --> 00:01:06.420
well, eventually,
we'll pull away from global.

17
00:01:06.420 --> 00:01:09.840
You'll notice that we're still
putting stuff on the global, but

18
00:01:09.840 --> 00:01:13.780
at least where requiring
the specific files that we need and

19
00:01:13.780 --> 00:01:17.890
one thing that like is,

20
00:01:17.890 --> 00:01:22.410
like quite possibly happening in your
apps right now with Gulper Grant,

21
00:01:22.410 --> 00:01:25.650
is you have files in there that you're
concatenating with your whole app but

22
00:01:25.650 --> 00:01:27.920
are actually used by anything.

23
00:01:27.920 --> 00:01:31.338
That's something that can't happen with
WebPack because you have to explicitly

24
00:01:31.338 --> 00:01:31.889
require it.

25
00:01:31.889 --> 00:01:35.777
And if you have LinkedIn set up in place,
then it will help you like know when

26
00:01:35.777 --> 00:01:39.439
you're not actually using anything
from that, which is fantastic.

27
00:01:39.439 --> 00:01:43.338
And so, yeah, the goal of this one was to
remove the immediately invoked function

28
00:01:43.338 --> 00:01:45.840
expressions because we
don't need those anymore.

29
00:01:45.840 --> 00:01:50.980
Remember those are like inside of like
these are inside of a closure already, and

30
00:01:50.980 --> 00:01:56.362
then also to add require statements for
anywhere that actually requires anything.

31
00:01:56.362 --> 00:02:02.108
So any questions about that, like even
though we're skipping past this one,

32
00:02:02.108 --> 00:02:06.038
I do wanna open it up for
questions if anybody has any.

33
00:02:06.038 --> 00:02:10.680
I should probably talk about what this is,
but okay, yeah.

34
00:02:10.680 --> 00:02:15.700
So, let me just demonstrate for
you really quick

35
00:02:15.700 --> 00:02:19.310
why that path info is useful because
that is very specific to WebPack.

36
00:02:22.010 --> 00:02:29.410
So if I don't have the path info like
we did before, I'll comment that out.

37
00:02:29.410 --> 00:02:31.080
I'll run npm run dev.

38
00:02:33.590 --> 00:02:36.220
And then we refresh the browsers here.

39
00:02:36.220 --> 00:02:39.580
And if I look at the bootstrap
file now that I'm requiring stuff,

40
00:02:39.580 --> 00:02:43.230
you can see that WebPack is replacing
my required statements with WebPack

41
00:02:43.230 --> 00:02:45.990
require statements and
it's giving a number here.

42
00:02:45.990 --> 00:02:49.190
That is not at all useful to
me when I'm debugging stuff.

43
00:02:49.190 --> 00:02:53.070
I need to know like what is that like,
actually requiring, right?

44
00:02:53.070 --> 00:02:59.610
So, what the path info does is it's
going to give us a little comment,

45
00:02:59.610 --> 00:03:02.700
that will tell us what
that require was for.

46
00:03:02.700 --> 00:03:07.773
So, the reason that WebPack is putting
an ID in here is because as your

47
00:03:07.773 --> 00:03:13.030
application grows you're doing
more important require statements.

48
00:03:13.030 --> 00:03:16.678
That's a lot of strings and
that's potentially a lot of space and so

49
00:03:16.678 --> 00:03:20.971
it's doing an optimization just like,
to reduce the amount of space.

50
00:03:20.971 --> 00:03:25.945
And so that's why you have your
path info and we're using,

51
00:03:25.945 --> 00:03:28.450
if not prod from our FU tales.

52
00:03:28.450 --> 00:03:33.040
And so if you don't provide anything to
if not prod, it defaults to a boolean.

53
00:03:33.040 --> 00:03:36.640
So the path info value is true or false.

