WEBVTT

1
00:00:00.000 --> 00:00:04.373
[MUSIC]

2
00:00:04.373 --> 00:00:07.396
&gt;&gt; Kent C Dodds: Let's just quickly
take a look at the code, and

3
00:00:07.396 --> 00:00:11.793
then I will have an exercise for
you to do, code splitting yourself.

4
00:00:11.793 --> 00:00:14.680
So, what we have now
are a couple of things.

5
00:00:14.680 --> 00:00:17.725
We now have a CSS file for that.

6
00:00:17.725 --> 00:00:26.010
SVG, we have kind of restructured
things in our app a little bit.

7
00:00:26.010 --> 00:00:30.250
So now, on load,
we'll call this update to do, so

8
00:00:30.250 --> 00:00:34.640
I moved most of the to do code
into the todo.js file, and

9
00:00:34.640 --> 00:00:40.060
it also will add an event listener
on the tall graph button.

10
00:00:41.130 --> 00:00:46.930
That listens to click, so
that it will toggle your graph on and off.

11
00:00:46.930 --> 00:00:51.550
And then that toggle graph is new, whoops.

12
00:00:51.550 --> 00:00:55.890
If we go to graph index, and
this is where I say, again,

13
00:00:55.890 --> 00:00:58.350
that it's important to understand
how things are resolved.

14
00:00:59.760 --> 00:01:03.477
With a comma JS, or
ES6 imports as well, at least,

15
00:01:03.477 --> 00:01:08.050
the way that it's resolved with
Webpack is the same as comma JS.

16
00:01:09.850 --> 00:01:11.177
So, it will resolve.

17
00:01:11.177 --> 00:01:15.564
If you point to a directory, it will
resolve to the index JS of that directory,

18
00:01:15.564 --> 00:01:17.159
or if it has a packaged JSON,

19
00:01:17.159 --> 00:01:20.828
it will resolve to the main property
of that package JSON, what?

20
00:01:20.828 --> 00:01:24.470
That's how actually you know
modules work most of the time.

21
00:01:24.470 --> 00:01:28.180
But yeah, so here in this graph,
we have this rendered graph.

22
00:01:28.180 --> 00:01:33.220
Or, sorry, we have this toggle graph
function that will take care of

23
00:01:33.220 --> 00:01:35.280
a whole bunch of stuff that I
don't even want to talk about.

24
00:01:35.280 --> 00:01:38.350
Because it's a little bit on
the hacked together side.

25
00:01:38.350 --> 00:01:41.010
Just to show you how to use this stuff.

26
00:01:41.010 --> 00:01:45.240
But then there's this
render graph function.

27
00:01:45.240 --> 00:01:48.360
So far, we haven't seen any D3 or
React or anything.

28
00:01:48.360 --> 00:01:51.790
But it's the render graph function
that brings in all the heavy stuff.

29
00:01:51.790 --> 00:01:55.340
So, this is the stuff that we
want to load asynchronously.

30
00:01:55.340 --> 00:02:00.680
And here, we have our JSX
that everybody loves so much.

31
00:02:00.680 --> 00:02:01.850
How many people love JSX?

32
00:02:03.320 --> 00:02:05.258
Yeah, I love JSX.

33
00:02:05.258 --> 00:02:08.150
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kent C Dodds: Okay, now, it's great.

34
00:02:08.150 --> 00:02:11.630
Okay, so, this is pretty much, this file,

35
00:02:11.630 --> 00:02:16.690
if we could lazy load this file, then we
lazy load all of the other stuff as well.

36
00:02:16.690 --> 00:02:20.514
Because nothing else in our entire
app depends on these things.

37
00:02:20.514 --> 00:02:26.360
And so, this would be, another really
common case was, as if you have a router,

38
00:02:26.360 --> 00:02:33.050
and you can lazy load the different parts,
or the components for each route.

39
00:02:33.050 --> 00:02:37.850
And so, once the user gets there,
then load the stuff and show the user.

40
00:02:37.850 --> 00:02:40.450
And so, this is, in this application,

41
00:02:40.450 --> 00:02:43.300
this is the one file that we
wanna have is lazy loaded.

42
00:02:43.300 --> 00:02:46.280
And if we look at this,
there's only one place where this file is

43
00:02:46.280 --> 00:02:50.070
actually being used, and
it is in this graph/index.

44
00:02:50.070 --> 00:02:55.150
So, what we need to do, I'm gonna give
you some sudo code, is ultimately,

45
00:02:55.150 --> 00:02:57.000
we need to get rid of render graph.

46
00:02:57.000 --> 00:02:59.900
But we still need to be
able to call render graph

47
00:02:59.900 --> 00:03:02.680
in these three places
that it's being called.

48
00:03:02.680 --> 00:03:06.770
But we're going to call it a little
bit differently, we're going to say,

49
00:03:06.770 --> 00:03:14.910
let me just look at what I
called it in my notes, sorry.

50
00:03:16.810 --> 00:03:19.940
Yeah, I call it loadAndRenderGraph.

51
00:03:22.440 --> 00:03:28.530
And in here,
you're going to use the system API.

52
00:03:28.530 --> 00:03:30.720
So, I'm gonna just show you down here.

53
00:03:31.860 --> 00:03:36.950
The way that you lazy load code, and this
is this is actually ECMAScript standard.

54
00:03:36.950 --> 00:03:43.980
So, there's a new system API in ES6
where you can say system.import.

55
00:03:43.980 --> 00:03:47.440
And this is how you lazy load stuff,
as far as the standard is concerned,

56
00:03:47.440 --> 00:03:50.080
and Webpack just understands the standard.

57
00:03:50.080 --> 00:03:54.011
And so, we're gonna take
the thing you want imported, so

58
00:03:54.011 --> 00:04:00.760
import what you wanna import, whatever
it is, if it's relative, whatever, and

59
00:04:00.760 --> 00:04:04.580
what this does is return a promise, how
many people are familiar with promises?

60
00:04:04.580 --> 00:04:06.270
ES6 promises.

61
00:04:06.270 --> 00:04:12.940
Okay, so you can say var promise
equals that, or you can,

62
00:04:12.940 --> 00:04:18.117
and then you can say do stuff
on promise.then whatever.

63
00:04:18.117 --> 00:04:23.120
I just normally do it like this,
just right off of the promise itself.

64
00:04:23.120 --> 00:04:27.700
And then you're gonna get your,
the thing, whatever you would

65
00:04:27.700 --> 00:04:31.260
get it from a normal import,
that's what you're going to get here,

66
00:04:31.260 --> 00:04:36.570
except it's going to behave more like
a common JS import, unfortunately.

67
00:04:36.570 --> 00:04:38.900
I kind of wish that it didn't.

68
00:04:38.900 --> 00:04:42.310
So, what I want you to do,
as you're debugging,

69
00:04:42.310 --> 00:04:46.590
I would recommend that you console
about log(thing) right here, and

70
00:04:46.590 --> 00:04:49.100
pull that up in your browser and
see what that looks like.

71
00:04:49.100 --> 00:04:51.619
Pro tip, you're probably
going to want thing.default.

72
00:04:52.940 --> 00:04:54.520
Because it's the default export,

73
00:04:54.520 --> 00:04:57.440
I can explain that a little
bit later after the exercise.

74
00:04:57.440 --> 00:04:59.950
But that's probably what you're
gonna want, that's just a hint.

75
00:04:59.950 --> 00:05:04.810
And then you can use that thing to
do whatever you were doing before.

76
00:05:04.810 --> 00:05:07.636
So, basically copy this and
put it down here.

77
00:05:07.636 --> 00:05:13.610
Pretty much, so yeah, that's the exercise.

78
00:05:13.610 --> 00:05:15.000
And then you would replace,

79
00:05:15.000 --> 00:05:19.560
in here, you would replace all of the
render graphs with load and render graph.

80
00:05:20.750 --> 00:05:22.327
Does that make sense?

81
00:05:24.943 --> 00:05:29.020
&gt;&gt; Kent C Dodds: Okay, let's see how
things go, I am available for questions.

82
00:05:32.090 --> 00:05:35.150
&gt;&gt; Speaker 2: Did you cover
that export default question?.

83
00:05:35.150 --> 00:05:35.821
&gt;&gt; Kent C Dodds: Yeah.

84
00:05:38.813 --> 00:05:40.309
&gt;&gt; Kent C Dodds: Yeah, so Henry is asking,

85
00:05:40.309 --> 00:05:43.822
feel free to continue working
on the workshop, but right here,

86
00:05:43.822 --> 00:05:49.100
Henry is asking why is this all the way up
here, shouldn't that be the last thing?

87
00:05:49.100 --> 00:05:53.140
And that's a good point that
could be the last thing.

88
00:05:53.140 --> 00:05:58.590
I'm leveraging a feature of JavaScript
called function declaration hoisting.

89
00:05:58.590 --> 00:06:03.090
So, if you're familiar with hoisting of
variables, it's this, really, sometimes

90
00:06:03.090 --> 00:06:07.830
confusing and frustrating feature,
which is actually solved by a let and

91
00:06:07.830 --> 00:06:12.964
const, so I can say var foo, and
I can actually reference for you up here.

92
00:06:12.964 --> 00:06:14.610
And that totally works,

93
00:06:14.610 --> 00:06:18.860
and it's really kind of one of
the confusing parts of JavaScript.

94
00:06:18.860 --> 00:06:22.770
There is one exception to this and
that functions.

95
00:06:22.770 --> 00:06:27.813
So, actually, sorry, I didn't explain
that fully, so var foo equals bar.

96
00:06:27.813 --> 00:06:30.007
So I can reference foo up here, but

97
00:06:30.007 --> 00:06:33.425
it doesn't actually equal
bar until this line hits.

98
00:06:33.425 --> 00:06:36.780
And what actually,
what JavaScript is doing under the hood,

99
00:06:36.780 --> 00:06:39.811
it's hoisting all of your
declarations to the top, and

100
00:06:39.811 --> 00:06:42.534
then making the assignments
where you make them.

101
00:06:42.534 --> 00:06:46.912
So yeah, that's one of
the confusing parts of JavaScript.

102
00:06:46.912 --> 00:06:52.969
With function declarations though,
not only is the declaration hoisted,

103
00:06:52.969 --> 00:06:59.607
but also the definition, whatever you're
assigning it to, or what its value is.

104
00:06:59.607 --> 00:07:03.417
And so, because of that,
I can export the function itself,

105
00:07:03.417 --> 00:07:06.480
just like this above
where it's being used.

106
00:07:06.480 --> 00:07:10.050
I like to do that because I
like to keep all my imports and

107
00:07:10.050 --> 00:07:13.700
exports toward the top of the file,
so that when I open up the file,

108
00:07:13.700 --> 00:07:16.270
I see everything that I need to see for
that file.

109
00:07:16.270 --> 00:07:18.420
And I don't have to
search around the file.

110
00:07:18.420 --> 00:07:22.380
One thing that you'll see in lots of
code bases is a bunch of named exports

111
00:07:22.380 --> 00:07:24.860
throughout the file base right
next to functions and stuff.

112
00:07:24.860 --> 00:07:29.020
What that results in is you having to
traverse the file to figure out what does

113
00:07:29.020 --> 00:07:30.720
this module export?

114
00:07:30.720 --> 00:07:34.650
Whereas, if you put everything, actually
a good example of this would be helpers.

115
00:07:34.650 --> 00:07:38.400
Here I have my exports all
right up here at the top.

116
00:07:38.400 --> 00:07:43.240
I could just as easily say export and
export and so on and

117
00:07:43.240 --> 00:07:45.020
so forth, both are valid.

118
00:07:45.020 --> 00:07:48.550
But only one of those can I see
everything right at the top.

119
00:07:49.570 --> 00:07:52.010
So anyway, that's kind of a long story.

120
00:07:52.010 --> 00:07:54.310
Either way,
you can do it at the top or bottom.

121
00:07:54.310 --> 00:07:58.405
Just make try to make it consistent, and
only have one place, and I'll be happy.

122
00:07:58.405 --> 00:08:01.130
Yeah, you had a question or comment?

123
00:08:01.130 --> 00:08:02.780
&gt;&gt; Speaker 3: No, just stretched.

124
00:08:02.780 --> 00:08:03.918
&gt;&gt; Kent C Dodds: I have one too.

125
00:08:03.918 --> 00:08:08.229
[LAUGH] Cool, awesome.

126
00:08:08.229 --> 00:08:12.824
And Martin is asking is
this Webpack too exclusive?

127
00:08:12.824 --> 00:08:14.220
I only know require ensure.

128
00:08:14.220 --> 00:08:19.150
Yes, very good point, so,
you could with Webpack one,

129
00:08:19.150 --> 00:08:22.710
I don't believe that Webpack one
will ever get System.import,

130
00:08:22.710 --> 00:08:26.160
so if you're on a Webpack one,
you can say require.

131
00:08:26.160 --> 00:08:29.330
UPS require ensure.

132
00:08:29.330 --> 00:08:35.335
And actually, I don't even remember this
API, cuz I never successfully used it.

133
00:08:35.335 --> 00:08:38.794
But you can look up in the docs for
require ensure.

134
00:08:38.794 --> 00:08:43.461
One drawback for using require ensure
is yes, it does basically the same

135
00:08:43.461 --> 00:08:47.760
thing as System.import, but
there are actually two drawbacks.

136
00:08:47.760 --> 00:08:51.028
One, require ensure is not ECMA standard,
and so,

137
00:08:51.028 --> 00:08:53.470
it's never gonna end up in browsers.

138
00:08:53.470 --> 00:08:55.060
It does have a standard, but

139
00:08:55.060 --> 00:08:59.249
that standard doesn't have a way to handle
if there's a failure loading the module.

140
00:09:00.266 --> 00:09:05.490
Whereas, with System.import, because
it uses promises, that actually just

141
00:09:05.490 --> 00:09:11.710
comes naturally, because then you can just
say function onError and do stuff there.

142
00:09:12.800 --> 00:09:19.540
Or if you wanna .catch, which would
actually catch any errors here.

143
00:09:19.540 --> 00:09:24.467
So yeah, and so anybody get it working?

144
00:09:28.877 --> 00:09:30.938
&gt;&gt; Kent C Dodds: Okay,
you can continue working on it.

145
00:09:38.010 --> 00:09:42.127
&gt;&gt; Kent C Dodds: And actually, Tobias
said, I'm pretty sure he basically said,

146
00:09:42.127 --> 00:09:46.110
if you use only one feature of Webpack,
make it code splitting.

147
00:09:47.310 --> 00:09:49.020
He really likes code splitting a lot.

148
00:09:49.020 --> 00:09:50.045
That's why he created it.

149
00:10:02.821 --> 00:10:08.296
&gt;&gt; Kent C Dodds: Yes, so Scott is asking,
so, we have a default export right here,

150
00:10:08.296 --> 00:10:13.610
is it possible for us to also
have like named exports as well?

151
00:10:13.610 --> 00:10:17.110
Yes, that's totally possible,
and this is kind of weird,

152
00:10:17.110 --> 00:10:20.946
cuz I'm exporting toggleGraph as
default and as a named export.

153
00:10:20.946 --> 00:10:25.200
Normally wouldn't do that, but yeah,
the way that you would use that,

154
00:10:25.200 --> 00:10:30.628
if I wanted to import it,
I would say import toggle, whoops,

155
00:10:30.628 --> 00:10:35.639
toggleGraph from render,

156
00:10:35.639 --> 00:10:39.570
and I could, incidentally,
I could import the toggleGraph as well.

157
00:10:40.790 --> 00:10:44.920
Although, that would totally fail because
of the same name, but I could do as foo,

158
00:10:44.920 --> 00:10:47.040
and then that would work.

159
00:10:47.040 --> 00:10:49.140
But this kind of contracted example.

160
00:10:50.750 --> 00:10:55.490
So yeah, you can totally do default and
named exports.

161
00:10:55.490 --> 00:11:00.500
Just like you would with common JS, but
most of the time you're going to do one or

162
00:11:00.500 --> 00:11:01.230
the other, not both.

163
00:11:04.680 --> 00:11:11.632
And the best use case for
named exports is a utility function,

164
00:11:11.632 --> 00:11:18.100
our helpers, and pretty much everything
else is probably a default export.

165
00:11:18.100 --> 00:11:19.570
Makes it easier that way.

166
00:11:19.570 --> 00:11:20.550
&gt;&gt; Speaker 3: I do have a question.

167
00:11:20.550 --> 00:11:23.260
&gt;&gt; Kent C Dodds: Yeah.
&gt;&gt; Speaker 3: Where does system come from?

168
00:11:23.260 --> 00:11:27.380
&gt;&gt; Kent C Dodds: System will be a global
as soon as it's implemented in browsers.

169
00:11:27.380 --> 00:11:29.980
&gt;&gt; Speaker 3: Okay, but currently-
&gt;&gt; Kent C Dodds: Currently it's Webpack.

170
00:11:29.980 --> 00:11:31.988
So Webpack will transpile it.

171
00:11:31.988 --> 00:11:35.775
&gt;&gt; Speaker 3: Okay, but
is it part of ES2016?

172
00:11:35.775 --> 00:11:37.897
&gt;&gt; Kent C Dodds: Yeah, 2015, yeah.

173
00:11:37.897 --> 00:11:39.112
&gt;&gt; Speaker 3: It is?

174
00:11:39.112 --> 00:11:41.588
&gt;&gt; Kent C Dodds: Technically, yeah, so,

175
00:11:41.588 --> 00:11:46.930
this is kind of the funny
part of the whole ES6 thing.

176
00:11:46.930 --> 00:11:51.890
So you probably heard that Safari
announced that they're totally 100%

177
00:11:51.890 --> 00:11:56.210
ES6 compliant, which is really exciting,
except they can't load modules yet.

178
00:11:56.210 --> 00:12:00.970
And so, yes, they do have
implementation for the syntax.

179
00:12:00.970 --> 00:12:03.240
I'm not sure how valuable that is though,

180
00:12:03.240 --> 00:12:06.602
because there's no specification for
loading modules.

181
00:12:06.602 --> 00:12:11.245
And so, there is a specification for

182
00:12:11.245 --> 00:12:16.500
System.import, but
no browser is capable of actually

183
00:12:16.500 --> 00:12:20.650
doing anything with that,
because part of the question,

184
00:12:20.650 --> 00:12:24.900
that's still kind of in the air is what
does the browser do when it sees this?

185
00:12:26.110 --> 00:12:28.670
And how does it resolve that?

186
00:12:28.670 --> 00:12:32.470
Because that's a relative path to

187
00:12:32.470 --> 00:12:35.330
probably a file that doesn't
have an extension, right?

188
00:12:35.330 --> 00:12:40.960
So, you would have to write it like this,
or you would have to be an absolute URL

189
00:12:40.960 --> 00:12:45.090
to a specific file somewhere
that's on on your file system.

190
00:12:45.090 --> 00:12:49.550
But if you wanted to do this
with no module, for example,

191
00:12:49.550 --> 00:12:52.912
like react,
what does the browser do to that?

192
00:12:52.912 --> 00:12:56.820
Well, like in node,
it is gonna do its resolve stuff and

193
00:12:56.820 --> 00:12:58.260
find the known modules and stuff.

194
00:12:58.260 --> 00:13:01.020
The browser can't do that,
because it doesn't see your file system.

195
00:13:01.020 --> 00:13:04.720
And so, it's just gonna go
make a request for react, and

196
00:13:04.720 --> 00:13:05.940
nothing's going to come back.

197
00:13:05.940 --> 00:13:11.250
So, there's still a bit of a question
about whether how to handle these

198
00:13:12.850 --> 00:13:19.530
module loading, and hopefully it,
in some way, resembles common JS, and that

199
00:13:19.530 --> 00:13:23.220
somehow smart people figure out how to
do that, because it's really convenient.

200
00:13:24.440 --> 00:13:26.946
&gt;&gt; Speaker 3: I'm not finding
it in the specification.

201
00:13:26.946 --> 00:13:29.741
&gt;&gt; Kent C Dodds: Okay, let's go.

202
00:13:29.741 --> 00:13:31.772
&gt;&gt; Speaker 3: We can do this offline.

203
00:13:31.772 --> 00:13:35.887
&gt;&gt; Kent C Dodds: Yeah, yeah,
so, if you go to ES6 features,

204
00:13:35.887 --> 00:13:39.790
there is a module loader specification.

205
00:13:39.790 --> 00:13:41.551
Let me see if there's a link here, no.

206
00:13:41.551 --> 00:13:49.120
System.import is six spec.

207
00:13:49.120 --> 00:13:52.594
Yeah, so, this, actually,
this is a fantastic resource.

208
00:13:52.594 --> 00:13:57.712
If you go to get.io/es6features,
all one word,

209
00:13:57.712 --> 00:14:05.059
no capitals, that will take you to
a repo that has all the features in ES6.

210
00:14:05.059 --> 00:14:09.720
I believe tail calls was actually
ripped out of the ES6 spec last minute.

211
00:14:09.720 --> 00:14:13.260
But yeah, that this includes examples for
everything.

212
00:14:13.260 --> 00:14:13.778
It's awesome.

213
00:14:13.778 --> 00:14:19.600
But yeah there's, yeah,
we can look at this later.

214
00:14:19.600 --> 00:14:23.000
But yeah,
it was originally in the specification.

215
00:14:23.000 --> 00:14:24.470
I believe it's still in there.

