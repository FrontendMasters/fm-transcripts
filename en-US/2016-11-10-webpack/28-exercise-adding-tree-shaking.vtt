WEBVTT

1
00:00:00.000 --> 00:00:03.781
[MUSIC]

2
00:00:03.781 --> 00:00:07.058
&gt;&gt; Kent C Dodds: Let's take a look at what
our bundle looks while we're developing

3
00:00:07.058 --> 00:00:08.210
our code.

4
00:00:08.210 --> 00:00:13.490
And you all can follow along, and see what
this looks like in your own browsers too.

5
00:00:13.490 --> 00:00:15.060
So if we say npm run dev.

6
00:00:16.200 --> 00:00:19.550
Pull up our dev server,
where did my app go.

7
00:00:21.830 --> 00:00:30.960
So here I'm going to go into sources and
I'm gonna move this guy over.

8
00:00:30.960 --> 00:00:35.116
We're going to helpers, there are a bunch
of helpers in here that we're using,

9
00:00:35.116 --> 00:00:40.720
module.exports for, yeah.

10
00:00:40.720 --> 00:00:44.741
So, and this is actually transpiled code,

11
00:00:44.741 --> 00:00:50.175
because actually in this source
code we go to helpers.js,

12
00:00:50.175 --> 00:00:53.548
this is module exports equals.

13
00:00:53.548 --> 00:00:57.574
Actually I didn't check
out the next branch.

14
00:01:02.791 --> 00:01:04.381
&gt;&gt; Kent C Dodds: Hold on.

15
00:01:04.381 --> 00:01:05.298
Yeah.

16
00:01:05.298 --> 00:01:08.630
Okay, so now it's an export,
an ES6 export.

17
00:01:08.630 --> 00:01:09.860
Fun stuff.

18
00:01:09.860 --> 00:01:11.510
So now it is transpiled code.

19
00:01:11.510 --> 00:01:14.500
Well it was before, but
it's even more now somehow.

20
00:01:14.500 --> 00:01:18.510
And Babel is going to turn it
into something more like this,

21
00:01:18.510 --> 00:01:19.640
it's effectively the same thing.

22
00:01:19.640 --> 00:01:24.718
Babel transpiles the ES6
modules down to CommonJS,

23
00:01:24.718 --> 00:01:29.355
and then webpack after that
transpolation happens,

24
00:01:29.355 --> 00:01:32.830
webpack resolves all the dependencies for
us.

25
00:01:32.830 --> 00:01:37.030
And so it's exporting all these functions,
but what if I told you that

26
00:01:37.030 --> 00:01:41.150
there are two of these functions that
aren't in use anywhere in the code base?

27
00:01:41.150 --> 00:01:42.990
Would you be able to find them?

28
00:01:44.050 --> 00:01:48.000
Just raise your hand, how would you find
functions that aren't in use in the code

29
00:01:48.000 --> 00:01:50.310
base?
&gt;&gt; Speaker 2: Google search.

30
00:01:50.310 --> 00:01:51.430
&gt;&gt; Kent C Dodds: Yeah like find and

31
00:01:51.430 --> 00:01:53.184
replace or do a grip.

32
00:01:54.280 --> 00:01:56.456
Yeah, it's not easy to
do that with JavaScript.

33
00:01:56.456 --> 00:02:00.040
Maybe with TypeScript,
but yeah, with JavaScript,

34
00:02:00.040 --> 00:02:02.880
that's a difficult thing to do.

35
00:02:02.880 --> 00:02:08.630
So the cool thing with the ES6 modules
is that they're totally static, and so

36
00:02:08.630 --> 00:02:13.440
what that means is I can't dynamically
add things to the export and

37
00:02:13.440 --> 00:02:17.340
I can't dynamically make modifications
to what's being exported.

38
00:02:17.340 --> 00:02:19.860
It all has to happen in the text.

39
00:02:19.860 --> 00:02:23.360
What that means is you don't have
to run the application to know

40
00:02:23.360 --> 00:02:24.880
what's going to be exported.

41
00:02:24.880 --> 00:02:29.020
And so webpack is gonna look at this and
say okay, I see that this helpers module

42
00:02:30.190 --> 00:02:35.586
exports leftPad and remove and
all these other utility functions.

43
00:02:35.586 --> 00:02:37.910
And everywhere else in the application,
I'm gonna find,

44
00:02:37.910 --> 00:02:42.780
okay helpers is being used here and
it's using log, and it will go into here,

45
00:02:42.780 --> 00:02:45.780
helpers is being used here and
it's using those things.

46
00:02:45.780 --> 00:02:52.443
And so it can determine by itself that,
so let's see helpers,

47
00:02:52.443 --> 00:02:57.109
nowhere is anyone using remove or leftPad.

48
00:02:58.370 --> 00:02:59.570
Which I think is appropriate.

49
00:03:00.680 --> 00:03:04.210
So we can actually remove
that from our code base but

50
00:03:04.210 --> 00:03:08.850
we'd have to ourselves find that and
remove it manually.

51
00:03:08.850 --> 00:03:11.170
Because there's no way for

52
00:03:11.170 --> 00:03:13.448
anyone to be sure because of
JavaScript's dynamic nature.

53
00:03:13.448 --> 00:03:18.736
And so webpack can't do this yet
though, because webpack is using,

54
00:03:18.736 --> 00:03:26.110
or because we're using Babel to transpile
our ES6 module so it works in the browser.

55
00:03:26.110 --> 00:03:30.407
And so we're using the Babel ES2015
plugin, or preset,

56
00:03:30.407 --> 00:03:34.967
which includes a plugin to transpile
these modules to CommonJS.

57
00:03:34.967 --> 00:03:38.352
And so what we want to do is we
want to not have it transpile

58
00:03:38.352 --> 00:03:42.685
those modules just transpile
everything else except for the modules.

59
00:03:42.685 --> 00:03:47.012
And then webpack can take those modules
and resolve them just like it would with

60
00:03:47.012 --> 00:03:50.210
CommonJS, but
it can do some extra fancy things.

61
00:03:50.210 --> 00:03:56.110
And so if you've got your editor open,
this is a pretty simple change.

62
00:03:56.110 --> 00:04:02.420
If you go to .babelrc, and I'm just gonna
format this a little bit differently.

63
00:04:05.020 --> 00:04:09.310
So, to provide options to presets, or

64
00:04:09.310 --> 00:04:13.260
plugins, you take the item of
the array that you want to modify.

65
00:04:13.260 --> 00:04:16.620
So, we want to say hey ES2015,
I don't care about modules.

66
00:04:16.620 --> 00:04:20.360
So, we're gonna take that and
turn that into an array itself.

67
00:04:20.360 --> 00:04:25.080
And the first item of the array is
the name of the preset that you wanna use,

68
00:04:25.080 --> 00:04:28.940
the second item in the array are the
options that are passed to that preset.

69
00:04:28.940 --> 00:04:33.110
And this literally just happened
last week they added this,

70
00:04:33.110 --> 00:04:36.230
used to be you have to install
a different preset all together.

71
00:04:36.230 --> 00:04:39.660
But yeah so we'll say modules is false.

72
00:04:40.660 --> 00:04:42.780
And you can also say modules is UMD.

73
00:04:42.780 --> 00:04:47.320
Or modules is AMD or CommonJS, I'm
pretty sure those are the only options.

74
00:04:47.320 --> 00:04:52.010
But by doing that if you restart your
webpacks server cuz you've changed some

75
00:04:52.010 --> 00:04:56.930
configuration here,
then you go into your source files,

76
00:04:56.930 --> 00:04:58.860
you're gonna see something
quite different.

77
00:05:01.690 --> 00:05:07.020
The way that it has been implemented,
or transpiled,

78
00:05:07.020 --> 00:05:11.300
is very different and the way that
it's being transpiled is from webpack.

79
00:05:11.300 --> 00:05:16.040
And one cool thing here is you'll
see that you have something for

80
00:05:16.040 --> 00:05:18.180
QS and QSA, and all these are the ones.

81
00:05:18.180 --> 00:05:23.710
But then you'll see this comment that
says unused harmony export remove and

82
00:05:23.710 --> 00:05:25.520
unused harmony export leftPad.

83
00:05:27.070 --> 00:05:30.110
So those two modules aren't being
used anywhere in the code base,

84
00:05:30.110 --> 00:05:33.460
it was able to statically
analyze our code base to know.

85
00:05:33.460 --> 00:05:35.560
And that those aren't being in use, but

86
00:05:35.560 --> 00:05:38.500
one thing that it didn't do
that you might expect it would.

87
00:05:38.500 --> 00:05:44.570
Is it did not remove the code for
those functions from our module.

88
00:05:44.570 --> 00:05:48.050
The reason that it did that is because
that's not webpack's responsibility,

89
00:05:48.050 --> 00:05:53.660
it's just managing or
transpiling the imports and exports.

90
00:05:53.660 --> 00:05:58.400
And it leaves removing
this code to UglifyJS.

91
00:05:58.400 --> 00:06:03.179
Does everybody, or who knows what
UglifyJS is, and what its purpose is?

92
00:06:03.179 --> 00:06:08.352
Okay so, UglifyJS it's pretty
much the defacto minifier for

93
00:06:08.352 --> 00:06:15.030
JavaScript and it goes through your
JavaScript and it changes variable names.

94
00:06:15.030 --> 00:06:17.830
And it makes everything as
small as it possibly can.

95
00:06:17.830 --> 00:06:23.970
And its purpose is to make it
optimized for delivery to the browser.

96
00:06:23.970 --> 00:06:28.750
Because the JavaScript engine doesn't care
that this variable name is called array.

97
00:06:28.750 --> 00:06:31.970
It just cares that all of the instances
of this variable name are the same.

98
00:06:33.020 --> 00:06:37.160
And so you can change that to A and that
saves on characters which saves on bytes

99
00:06:37.160 --> 00:06:40.580
which saves on time for
the browser to load it.

100
00:06:40.580 --> 00:06:43.880
One of the other cool things
optimization that Uglify does is it

101
00:06:43.880 --> 00:06:46.780
identifies code that's
not being used anywhere.

102
00:06:46.780 --> 00:06:51.740
And so because webpack is saying
okay this module isn't being used.

103
00:06:51.740 --> 00:06:53.990
So I'm not going to add
a webpack require line for it.

104
00:06:55.840 --> 00:06:57.770
It's being exported but
it's not being used anywhere so

105
00:06:57.770 --> 00:06:58.890
I don't need to add that line.

106
00:07:00.240 --> 00:07:03.730
Then Uglify is gonna look through
this file and it's going to say,

107
00:07:05.020 --> 00:07:08.090
it's not in use anywhere so
I can safely delete this code and

108
00:07:08.090 --> 00:07:13.170
the program will be exactly the same as if
it were there, except it will be faster,

109
00:07:13.170 --> 00:07:17.090
less memory and less bytes for the user.

110
00:07:17.090 --> 00:07:18.480
Same thing will happen to leftPad.

111
00:07:20.370 --> 00:07:23.730
So yeah that's fun.

112
00:07:23.730 --> 00:07:26.470
Anybody have any questions
about how true shaking works or

113
00:07:26.470 --> 00:07:29.728
how to leverage it.
&gt;&gt; Speaker 3: There was a question if

114
00:07:29.728 --> 00:07:32.533
there is something similar for ES5.
&gt;&gt; Kent C Dodds: Yeah, so

115
00:07:32.533 --> 00:07:36.350
it is only possible to do this with ES6.

116
00:07:36.350 --> 00:07:40.840
However you don't have to author
all of your code using ES6.

117
00:07:42.110 --> 00:07:45.520
Webpack understands the ES6 module syntax.

118
00:07:45.520 --> 00:07:49.600
Webpack 2 does, this is not a webpack
1 feature, I should've mentioned that.

119
00:07:49.600 --> 00:07:53.320
And so you could author the rest
of your code base in ES5 and

120
00:07:53.320 --> 00:07:57.050
just do modules with ES6 and
webpack will transpile that for you.

121
00:07:58.970 --> 00:08:06.260
So with TypeScript I'm not certain of the
way to tell it to not transpile modules.

122
00:08:06.260 --> 00:08:10.370
I think with TypeScript 2 that's possible,
but I've not used TypeScript.

123
00:08:10.370 --> 00:08:15.230
So you'd have to look,
any other questions?

124
00:08:16.720 --> 00:08:21.010
Martin asked should I gzip Uglified code,
does that have measurable effects?

125
00:08:21.010 --> 00:08:24.340
Absolutely it does,
depending on the size of your program.

126
00:08:24.340 --> 00:08:28.420
But it's likely that even
if it's not enormous,

127
00:08:28.420 --> 00:08:31.300
you're still probably gonna save space.

128
00:08:31.300 --> 00:08:33.990
And it will, it'll still be smaller.

129
00:08:33.990 --> 00:08:37.850
And browsers are extremely fast at
uncompressing gzipped files so,

130
00:08:37.850 --> 00:08:40.030
you generally don't need
to worry about that.

131
00:08:41.060 --> 00:08:42.980
Yeah?
&gt;&gt; Speaker 3: The removal of code from

132
00:08:42.980 --> 00:08:47.290
Uglify, is that a standard feature of
Uglify, or is that an option you turn on?

133
00:08:47.290 --> 00:08:52.370
Cuz I've never seen that happen.
&gt;&gt; Kent C Dodds: I

134
00:08:52.370 --> 00:08:55.410
was under the impression that
it was a standard feature.

135
00:08:55.410 --> 00:08:59.000
We don't have to configure anything for
it to do it for us.

136
00:08:59.000 --> 00:09:01.960
All we have is that -p for webpack.

137
00:09:01.960 --> 00:09:06.370
And you can actually, I should should
mention also that with webpack

138
00:09:06.370 --> 00:09:09.160
all that it's doing is it's adding
plugins to your config for you.

139
00:09:09.160 --> 00:09:12.250
And so you could leave off the -p and
add those plugins yourself.

140
00:09:12.250 --> 00:09:16.180
And kind of tweaking a little bit
yourself, and you can look at the docs for

141
00:09:16.180 --> 00:09:18.940
those plugins.
&gt;&gt; Speaker 3: Was

142
00:09:18.940 --> 00:09:22.526
the output telling you that it
was removing that code though?

143
00:09:22.526 --> 00:09:24.660
Because wouldn't it make more sense
to see that once and then go and

144
00:09:24.660 --> 00:09:28.364
remove it yourself?
&gt;&gt; Kent C Dodds: Yeah good question.

145
00:09:28.364 --> 00:09:34.750
So, yeah generally if it's in your
own code yeah you'd want to see.

146
00:09:34.750 --> 00:09:37.810
Okay yeah there's no reason for
this code to exist anymore.

147
00:09:37.810 --> 00:09:41.150
And if I want it back, I have get so
I can find it, so yeah.

148
00:09:42.900 --> 00:09:48.280
As far as it logging out
maybe you could do that.

149
00:09:48.280 --> 00:09:49.510
I'm sure they'd love
a pull request [LAUGH].

150
00:09:51.560 --> 00:09:54.662
So yeah question.
&gt;&gt; Speaker 4: [INAUDIBLE]

151
00:09:54.662 --> 00:09:55.628
&gt;&gt; Kent C Dodds: Okay.

152
00:10:01.692 --> 00:10:02.720
&gt;&gt; Kent C Dodds: Yeah, so

153
00:10:02.720 --> 00:10:07.732
Uglify will recognize that okay, yeah, so,

154
00:10:07.732 --> 00:10:12.358
Scott is asking about effectively whether

155
00:10:12.358 --> 00:10:17.860
tree shaking works with
require statements.

156
00:10:17.860 --> 00:10:25.620
It does not so the fact of the matter is
it has to be ES6 modules for this to work.

157
00:10:26.920 --> 00:10:31.710
You can't use, because with require
you can do all kinds of really

158
00:10:31.710 --> 00:10:36.190
interesting things with your exports
object to monkey patch things onto it.

159
00:10:36.190 --> 00:10:38.699
So it's pretty much impossible to
statically analyze that stuff.

160
00:10:40.560 --> 00:10:45.610
Effectively or
safely you might be able to get, have fun.

161
00:10:45.610 --> 00:10:49.846
You could probably get a little ways
there, but yeah so it's gotta be ES6.

162
00:10:49.846 --> 00:10:53.010
I would actually be really impressed,
yeah.

163
00:10:53.010 --> 00:10:55.295
So you could probably get
a little ways there, but

164
00:10:55.295 --> 00:10:57.100
it'd be a little dangerous I think.

165
00:10:58.100 --> 00:11:00.860
Okay cool, so that's tree shaking.

166
00:11:00.860 --> 00:11:02.300
Was a little underwhelming?

167
00:11:02.300 --> 00:11:05.400
For me when I did it I was like
yeah that's a lot easier than I

168
00:11:05.400 --> 00:11:07.570
thought it was, yeah.

169
00:11:07.570 --> 00:11:13.080
So I thought it was this big dangerous
scary thing, but no that's pretty much it.

170
00:11:13.080 --> 00:11:16.400
Let me just take a look at.

171
00:11:19.580 --> 00:11:25.850
Okay, yeah so we are actually
in the dif here you can see.

172
00:11:26.880 --> 00:11:31.160
I'm actually removing log from helpers.

173
00:11:31.160 --> 00:11:34.590
Just to illustrate yet
another thing that can be removed.

174
00:11:34.590 --> 00:11:39.760
But yeah,
then we end up removing log and leftPad.

175
00:11:40.990 --> 00:11:47.400
But I leave remove in there because we're
gonna use it in one or two more steps.

176
00:11:47.400 --> 00:11:50.030
So we'll use it here in a little bit.
&gt;&gt; Speaker 5: But you didn't have to do

177
00:11:50.030 --> 00:11:52.900
that because for the tree shake.
&gt;&gt; Kent C Dodds: Yeah exactly.

178
00:11:52.900 --> 00:11:56.970
So I can I can fill my coat up with
all the garbage that I want to and

179
00:11:56.970 --> 00:12:00.250
my co-workers will hate me and
will all have a hard time maintaining it.

180
00:12:00.250 --> 00:12:02.970
But at least my users won't
have a problem with that.

181
00:12:02.970 --> 00:12:05.300
So yeah, good question.

182
00:12:06.920 --> 00:12:10.820
Okay, cool,
any last minute questions from anybody

183
00:12:12.710 --> 00:12:14.105
before we talk about code splitting?

184
00:12:14.105 --> 00:12:16.765
This one's fun.

185
00:12:16.765 --> 00:12:20.670
So, actually,

186
00:12:20.670 --> 00:12:26.620
does anybody wanna venture a guess at what
code splitting is and why you need it?

187
00:12:26.620 --> 00:12:27.720
Or where'd it be useful.

188
00:12:28.820 --> 00:12:30.280
Is there a question?

189
00:12:30.280 --> 00:12:31.670
Okay, that's fine.

190
00:12:31.670 --> 00:12:34.650
What happens when you don't
set modules to false?

191
00:12:34.650 --> 00:12:39.306
Well if you leave off modules false
then it's going to by default

192
00:12:39.306 --> 00:12:43.600
transpile it to CommonJS and hence webpack
won't be able to statically analyze it.

193
00:12:43.600 --> 00:12:45.730
So you don't get tree shaking,
effectively.

194
00:12:45.730 --> 00:12:50.630
You can set it to UMD,
which is universal module definition.

195
00:12:50.630 --> 00:12:54.340
I can't actually think of any use
case you do that in an application.

196
00:12:56.200 --> 00:12:57.670
Well I don't even need to explain it.

197
00:12:57.670 --> 00:12:59.310
You can look it up later, it's great.

198
00:12:59.310 --> 00:13:01.700
And then you can also set it to AMD and

199
00:13:01.700 --> 00:13:05.975
I can't imagine why you'd
ever wanna do that either, so

200
00:13:05.975 --> 00:13:10.685
yeah, pretty much just leave it alone or
set it to false.

201
00:13:10.685 --> 00:13:16.805
If you're bundling with webpack just take
advantage of the native transpolation.

