WEBVTT

1
00:00:00.080 --> 00:00:03.258
&gt;&gt; Marcy Sutton: Okay, so
I've got something that's opening that.

2
00:00:03.258 --> 00:00:07.074
I got the event to work, first of all,
now I need to make an assertion.

3
00:00:07.074 --> 00:00:13.440
So, I need to grab
the test ID off of here.

4
00:00:13.440 --> 00:00:15.700
So, it was dropped down item list.

5
00:00:17.184 --> 00:00:24.270
I'm gonna wait until I've actually
opened the thing, just to make sure.

6
00:00:25.960 --> 00:00:29.420
Maybe this is a case for breaking up
your test a little bit since I'm kind of

7
00:00:29.420 --> 00:00:32.270
mixing setup and
assertions into each other.

8
00:00:32.270 --> 00:00:35.730
But YOLO,
we're going to keep coming [LAUGH].

9
00:00:35.730 --> 00:00:37.549
So, let's do the drop down list.

10
00:00:38.590 --> 00:00:45.555
We'll do dropdown.getByTestId..

11
00:00:45.555 --> 00:00:53.134
I'll pass that string in for the drop down
item list, and then I am going to assert.

12
00:00:53.134 --> 00:00:54.839
And I actually want to go and get this.

13
00:00:54.839 --> 00:00:57.677
So, the first item,
the first list item and

14
00:00:57.677 --> 00:01:01.613
the first anchor inside of that
is what's getting focused.

15
00:01:01.613 --> 00:01:05.627
So, let's go look at what this gives me.

16
00:01:07.512 --> 00:01:12.104
&gt;&gt; Marcy Sutton: Let's see, getByTestId,
I'm gonna go refer to that API a little

17
00:01:12.104 --> 00:01:16.375
bit and just to make sure that is
gonna work the way that I want.

18
00:01:16.375 --> 00:01:18.095
So let's go back to Queries.

19
00:01:19.705 --> 00:01:21.011
TestId.

20
00:01:23.765 --> 00:01:24.953
&gt;&gt; Marcy Sutton: ByTestId.

21
00:01:24.953 --> 00:01:27.228
So, close out of this.

22
00:01:32.695 --> 00:01:37.615
&gt;&gt; Marcy Sutton: It should return
an element to me, doesn't really say,

23
00:01:37.615 --> 00:01:38.440
does it?

24
00:01:39.780 --> 00:01:44.688
It just says, here you go, and
doesn't really tell you what to expect.

25
00:01:44.688 --> 00:01:46.355
Here, returns an HTML element.

26
00:01:46.355 --> 00:01:47.600
Okay, so that's what we want.

27
00:01:47.600 --> 00:01:51.310
That means that I can run query selector
on it and go and find the children.

28
00:01:52.510 --> 00:01:57.819
So, I'm gonna say, const firstAnchor.

29
00:01:57.819 --> 00:02:03.920
And I'll say, dropdownList.querySelector.

30
00:02:05.100 --> 00:02:07.790
And I can just pass it an anchor directly.

31
00:02:07.790 --> 00:02:14.818
And then I can say,
expectfirstAnchor.toHaveFocus.

32
00:02:17.539 --> 00:02:19.090
&gt;&gt; Marcy Sutton: I love these mergers.

33
00:02:19.090 --> 00:02:21.770
It was huge pain to do
this before those existed.

34
00:02:21.770 --> 00:02:25.484
So if I run the test again,
wohoo, that worked.

35
00:02:25.484 --> 00:02:30.651
And maybe in the spirit of
test-driven development,

36
00:02:30.651 --> 00:02:36.391
I could go and verify, maybe I go and
hack this or something.

37
00:02:36.391 --> 00:02:40.198
So, tab index of negative one would
technically still be focusable

38
00:02:40.198 --> 00:02:42.750
because we're using
a script to send focus.

39
00:02:42.750 --> 00:02:45.640
Even though it would be taken
out of the normal tab order.

40
00:02:45.640 --> 00:02:51.500
So, to really test this and
make sure that it's really working,

41
00:02:51.500 --> 00:02:55.460
I can just do something really quick and
dirty and change this to a div.

42
00:02:55.460 --> 00:03:00.110
I like to make sure that it's doing what I
really expect cuz sometimes it'll pass and

43
00:03:00.110 --> 00:03:02.380
it's not actually working.

44
00:03:02.380 --> 00:03:03.280
And that did work.

45
00:03:03.280 --> 00:03:09.290
So, if I change that to a div,
we get that return state of,

46
00:03:09.290 --> 00:03:12.340
yeah, it can't focus that item
because it's not focusable.

47
00:03:12.340 --> 00:03:14.230
So that's pretty cool.

48
00:03:14.230 --> 00:03:19.020
If I go back and put this link back in,
run the test again.

49
00:03:19.020 --> 00:03:20.430
It's just good to verify.

50
00:03:20.430 --> 00:03:22.550
Yeah, so, awesome.

51
00:03:22.550 --> 00:03:23.980
It's pretty solid.

52
00:03:23.980 --> 00:03:27.180
I can assert that focus management and

53
00:03:27.180 --> 00:03:29.520
I feel much more confident
about that component.

54
00:03:30.970 --> 00:03:36.193
If I took a vacation and came back and
was a little rusty about how that worked.

55
00:03:36.193 --> 00:03:40.687
Or maybe my co-worker who's new to
accessibility was adding features to it or

56
00:03:40.687 --> 00:03:41.442
something.

57
00:03:41.442 --> 00:03:46.460
The test act as a contract for
your component APIs.

58
00:03:46.460 --> 00:03:49.890
And that's so powerful,
especially if you think of

59
00:03:49.890 --> 00:03:54.220
automation with continuous delivery and
continuous integration.

60
00:03:54.220 --> 00:03:57.750
You could prevent a deployment from
going out if there's a bad merge or

61
00:03:57.750 --> 00:04:00.630
something breaks this.

62
00:04:00.630 --> 00:04:03.417
It is, and we'll talk a little bit
about the different kinds of tests, but

63
00:04:03.417 --> 00:04:04.266
unit tests are great.

64
00:04:04.266 --> 00:04:07.430
Especially if you have these
reusable components that you used

65
00:04:07.430 --> 00:04:09.180
a bunch of different places.

66
00:04:09.180 --> 00:04:11.714
You can test those inputs,
test those APIs.

67
00:04:11.714 --> 00:04:16.470
We even highlighted that issue with
the items, maybe there is a more

68
00:04:16.470 --> 00:04:21.230
robust implementation of that component
that the test kind of highlighted.

69
00:04:21.230 --> 00:04:25.988
If someone goes to use it and they don't
pass in the items, should it warn you?

70
00:04:25.988 --> 00:04:27.640
I don't know, maybe.

71
00:04:27.640 --> 00:04:31.050
Maybe there's some kind of like,
we could use TypeScript or

72
00:04:31.050 --> 00:04:35.040
something and have it be like, eh,
you forgot the items, that could help.

73
00:04:35.040 --> 00:04:39.130
I mean, it just kind of uncovers these
issues where we otherwise, I don't know,

74
00:04:39.130 --> 00:04:40.220
we're kind of just winging it.

75
00:04:40.220 --> 00:04:44.330
And we don't really know how our
APIs might be used or misused.

76
00:04:44.330 --> 00:04:46.452
So I think that's super powerful.

77
00:04:46.452 --> 00:04:47.620
I'm pretty happy with that.

