WEBVTT

1
00:00:00.330 --> 00:00:03.450
&gt;&gt; Marcy Sutton: So, I'm really excited,
we're gonna talk about testing.

2
00:00:03.450 --> 00:00:07.120
And this is something that I've
really grown to see value in

3
00:00:07.120 --> 00:00:09.160
as a developer in my career.

4
00:00:09.160 --> 00:00:13.230
Once upon a time I was working at an
agency, I'm working on a widget over here,

5
00:00:13.230 --> 00:00:17.580
and this one page that we were supposed to
update, yeah, I forgot it was in use on

6
00:00:17.580 --> 00:00:21.074
another page and didn't tell our
QA team to go test that page.

7
00:00:21.074 --> 00:00:24.310
So, yeah, guess who shipped
broken things to production?

8
00:00:24.310 --> 00:00:27.660
And it really wasn't the QA person's
fault, they weren't looking for

9
00:00:27.660 --> 00:00:30.900
it on another page,
it was pretty much my fault.

10
00:00:30.900 --> 00:00:37.640
So, I think testing is a way to prevent
those failures, those failed builds,

11
00:00:37.640 --> 00:00:42.020
and staying late on a Friday at the office
trying to fix your mess you made cuz you

12
00:00:42.020 --> 00:00:45.020
deployed on a Friday, and
you don't have continuous deployment.

13
00:00:46.090 --> 00:00:49.080
So testing is just so
powerful to get that peace of mind,

14
00:00:49.080 --> 00:00:52.100
to bake that quality into your software.

15
00:00:52.100 --> 00:00:55.110
And for accessibility there's so
much potential,

16
00:00:55.110 --> 00:00:59.930
because you can bake that stuff in for
accessible patterns, these

17
00:00:59.930 --> 00:01:04.990
are supposed to work with the keyboard,
and if you break it, you break the build.

18
00:01:04.990 --> 00:01:08.603
So there's a lot of value in having
automated testing in general.

19
00:01:08.603 --> 00:01:13.165
And there's some great Frontend Masters
courses just on testing, but

20
00:01:13.165 --> 00:01:16.520
we're gonna look at it from
an accessibility lens.

21
00:01:16.520 --> 00:01:21.774
And we'll talk about Linting, unit tests,
integration and end-to-end test.

22
00:01:21.774 --> 00:01:26.449
Accessibility test API's, and
how they kind of factor into all of those.

23
00:01:26.449 --> 00:01:31.302
We'll touch briefly on continuous
integration, and then some manual and

24
00:01:31.302 --> 00:01:34.777
user testing,
because we can only automate so much.

25
00:01:34.777 --> 00:01:39.761
It's really amazing, and we can catch
some low hanging fruit, and automate it,

26
00:01:39.761 --> 00:01:42.770
and fail things from getting deployed.

27
00:01:42.770 --> 00:01:47.140
But that only goes so far, and we can test
manually, like we did with debugging,

28
00:01:47.140 --> 00:01:48.770
and to start the day.

29
00:01:48.770 --> 00:01:51.634
And then user testing is
a huge part of that as well.

30
00:01:51.634 --> 00:01:55.810
There's no substitute for
getting your product, or site, or app,

31
00:01:55.810 --> 00:01:58.402
in front of a user with
a disability early,

32
00:01:58.402 --> 00:02:02.900
because they might tell you something
that's a huge game changer.

33
00:02:02.900 --> 00:02:03.440
You're like, wow,

34
00:02:03.440 --> 00:02:06.950
I wish I would have known that earlier,
[LAUGH] well,you can do user testing.

35
00:02:08.460 --> 00:02:11.680
So Linting, this is a big area for
developers,

36
00:02:11.680 --> 00:02:16.560
because when we're coding, we hit save on
a file, or even just, typing in a file.

37
00:02:16.560 --> 00:02:20.830
I mean, we were using Linting to look at
that spread operator in the last section

38
00:02:20.830 --> 00:02:25.320
to see what is valid, and it can give
us some of that feedback of like,

39
00:02:25.320 --> 00:02:27.760
I typed this wrong, there's an error here.

40
00:02:27.760 --> 00:02:30.090
And I can figure that out
before I hit save and

41
00:02:30.090 --> 00:02:32.380
have to go over to the browser and
figure that out.

42
00:02:32.380 --> 00:02:36.080
So Linting has a role in
helping us catch errors early.

43
00:02:36.080 --> 00:02:42.170
And for accessibility we can use the
ESLint-plugin for JSX and accessibility.

44
00:02:42.170 --> 00:02:46.106
It is limited to sites that use ESLint and
JSX, but

45
00:02:46.106 --> 00:02:51.369
a lot of sites do these days,
a lot of React applications use this.

46
00:02:51.369 --> 00:02:56.980
Gatsby ships with an ESLint config
that comes with that installed.

47
00:02:56.980 --> 00:02:59.898
You might need to reconfigure
some of the rules.

48
00:02:59.898 --> 00:03:05.040
If you look in the Gatsby develop, when
I'm running that on the server locally,

49
00:03:05.040 --> 00:03:09.954
it's complaining about things that I
actually need to go report to them, but

50
00:03:09.954 --> 00:03:12.900
sometimes I don't agree with the findings.

51
00:03:12.900 --> 00:03:15.170
And so, what I can do about
that is reconfigure it.

52
00:03:15.170 --> 00:03:20.159
And I have some resource here from
the Gatsby site, I wrote about how to

53
00:03:20.159 --> 00:03:25.930
reconfigure ESLint, it would apply to
other sites too, not just Gatsby sites.

54
00:03:25.930 --> 00:03:32.139
Linting is great in the JSX or HTML space.

55
00:03:32.139 --> 00:03:35.502
Most times,
you're not loading CSS at that time, so

56
00:03:35.502 --> 00:03:39.690
you maybe aren't seeing that, or
even having other components,

57
00:03:39.690 --> 00:03:43.827
you might not be aware that
the rendered state of it is maybe fine.

58
00:03:43.827 --> 00:03:47.054
Maybe your complaining about something and
it's not a big deal, or

59
00:03:47.054 --> 00:03:49.570
it's missing something
that is a bigger deal.

60
00:03:49.570 --> 00:03:53.640
So, we can use Linting for some low
hanging fruit, but rendering does make

61
00:03:53.640 --> 00:03:57.290
a difference, and so, you kinda just
have to take that with a grain of salt.

62
00:03:59.170 --> 00:04:01.940
So some accessibility units.

63
00:04:01.940 --> 00:04:06.030
So Linting, that's a tool
that you can just install, so

64
00:04:06.030 --> 00:04:10.290
I'm not gonna go into it, I'd rather spend
the time working on automated tests.

65
00:04:10.290 --> 00:04:13.920
So I'm gonna talk to you kind of
about the line between unit test and

66
00:04:13.920 --> 00:04:16.820
integration test, and
kind of when would you write what.

67
00:04:18.040 --> 00:04:22.778
And, some of that's very subjective,
where that line for integration and

68
00:04:22.778 --> 00:04:27.220
end-to-ent test is, but let's look
at accessible units in unit test.

69
00:04:27.220 --> 00:04:29.720
These are mostly component level concerns,

70
00:04:29.720 --> 00:04:33.400
like the API for a component,
you pass in a prop,

71
00:04:33.400 --> 00:04:39.340
it puts that label into some button buried
in the tree of that component somewhere.

72
00:04:39.340 --> 00:04:42.610
That contract for that component
should have some unit tests.

73
00:04:42.610 --> 00:04:47.450
So, in isolation,
when we have that component,

74
00:04:47.450 --> 00:04:51.810
it has some tests that, it doesn't have
any outside inputs, it's not going and

75
00:04:51.810 --> 00:04:55.700
hitting the network, it's not
depending on some other component.

76
00:04:55.700 --> 00:04:59.500
We either need to stub things
that it does depend on,

77
00:04:59.500 --> 00:05:01.310
so that the test can still be isolated.

78
00:05:02.745 --> 00:05:05.395
That's probably the best approach,
I would say, is just try and

79
00:05:05.395 --> 00:05:10.575
limit all those dependencies, and
then you can just pass in inputs.

80
00:05:10.575 --> 00:05:13.175
So the inputs are what
you pass into a test,

81
00:05:13.175 --> 00:05:15.565
the variables that change its outcome.

82
00:05:15.565 --> 00:05:18.175
And then we're usually
asserting the outcome,

83
00:05:18.175 --> 00:05:22.460
the state that it ends up being when
we've passed in those specific inputs.

84
00:05:22.460 --> 00:05:23.860
An example would be,

85
00:05:23.860 --> 00:05:28.570
in our drop down widget when I
passed in the activator text.

86
00:05:28.570 --> 00:05:31.339
In a test I could pass in
any random string, and

87
00:05:31.339 --> 00:05:33.338
that's what we'll do in a test.

88
00:05:33.338 --> 00:05:35.781
And then I can assert that
that string matches, so

89
00:05:35.781 --> 00:05:38.220
it's very specific to the test.

90
00:05:38.220 --> 00:05:43.570
It is pretty robust, because
the test data is something I define,

91
00:05:43.570 --> 00:05:46.800
and it's not depending on
a real implementation.

92
00:05:46.800 --> 00:05:48.680
These unit tests are often headless,

93
00:05:48.680 --> 00:05:51.690
which means that they're not
technically rendered in a browser.

94
00:05:51.690 --> 00:05:56.640
So using things like JS DOM, that's
kind of an in memory representation of

95
00:05:56.640 --> 00:06:01.630
a web page, that means you
might have limited DOM APIs.

96
00:06:01.630 --> 00:06:05.387
It means that sometimes styles,
a certain focus styles might

97
00:06:05.387 --> 00:06:10.228
be a little funky because you aren't
rendering it like a normal page would, but

98
00:06:10.228 --> 00:06:12.626
it does enable fast changing of state.

99
00:06:12.626 --> 00:06:16.142
I can change the state of a component,
make sure that focus is going into it

100
00:06:16.142 --> 00:06:19.620
correctly, that it's getting labeled
correctly, things like that.

101
00:06:20.930 --> 00:06:25.600
So for accessibility unit tests, it's
really about component-specific behavior.

102
00:06:25.600 --> 00:06:29.776
You could test interaction and
focus APIs, so, like the drop down,

103
00:06:29.776 --> 00:06:32.733
making sure focus is send
to the right elements.

104
00:06:32.733 --> 00:06:37.402
Things like text alternatives, if you
have a custom icon button component, or

105
00:06:37.402 --> 00:06:41.303
a custom forum widget that's styled,
and you wanna make sure that

106
00:06:41.303 --> 00:06:45.154
the props you're passing in
are making it to the right elements.

107
00:06:45.154 --> 00:06:50.868
You wanna toggle ARIA states, that might
be a good thing to test for state.

108
00:06:50.868 --> 00:06:53.790
Cuz really what we're concerned
about is the outcome.

109
00:06:53.790 --> 00:06:55.330
So not the implementation, so

110
00:06:55.330 --> 00:07:00.220
not the internal state, but the component
that gets output on the other end.

111
00:07:00.220 --> 00:07:02.070
Does it have ARIA selected when it should?

112
00:07:02.070 --> 00:07:04.365
Does it have ARIA disabled when it should?

113
00:07:04.365 --> 00:07:05.840
And that sort of thing.

114
00:07:05.840 --> 00:07:09.340
And I have an article that I wrote linked
here called Writing Automated tests for

115
00:07:09.340 --> 00:07:12.910
Accessibility that goes much
deeper into a lot of these

116
00:07:12.910 --> 00:07:16.123
kind of the line between
different styles and tests.

