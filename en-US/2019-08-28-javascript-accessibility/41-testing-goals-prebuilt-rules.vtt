WEBVTT

1
00:00:00.100 --> 00:00:03.890
&gt;&gt; Marcy Sutton: So the biggest thing,
no matter what kind of test you're writing

2
00:00:03.890 --> 00:00:07.870
is that you should really focus on
the outcome and not the implementation.

3
00:00:07.870 --> 00:00:12.340
And there's lots of great things that
people have written about testing,

4
00:00:12.340 --> 00:00:16.390
methodologies, and
I know Kent C Dodds is a testing master.

5
00:00:16.390 --> 00:00:21.640
So definitely, if you're interested
in this area go learn from him.

6
00:00:21.640 --> 00:00:26.870
But yeah, this is the idea that you could
swap out your entire implementation and

7
00:00:26.870 --> 00:00:29.390
your test would still
pass which is amazing,

8
00:00:29.390 --> 00:00:31.690
that's such a cool feeling
to have that work.

9
00:00:31.690 --> 00:00:34.320
And if you're testing things for
accessibility,

10
00:00:34.320 --> 00:00:39.210
I mean, focus, there's slight variation
just depending on your design and

11
00:00:39.210 --> 00:00:40.580
depending on what you're building.

12
00:00:40.580 --> 00:00:45.130
But, I mean, if you're just restyling
something and your end user's not really

13
00:00:45.130 --> 00:00:49.700
supposed to know that it changed, that's
a good case for having these tests be kind

14
00:00:49.700 --> 00:00:54.060
of swappable or the code swappable
because the user contract for

15
00:00:54.060 --> 00:00:58.910
focus management and for accessibility
stuff should be unchanged theoretically.

16
00:00:58.910 --> 00:01:01.090
So that really applies for accessibility.

17
00:01:02.560 --> 00:01:05.920
So in this space, I guess this
applies to unit tests as well but

18
00:01:05.920 --> 00:01:07.930
especially in integration tests.

19
00:01:07.930 --> 00:01:10.010
If you use an accessibility testing API,

20
00:01:10.010 --> 00:01:12.620
you don't have to write
all of those rules.

21
00:01:13.640 --> 00:01:18.380
Trying to maintain color contrast rules,
I've worked on those, it's a lot of work.

22
00:01:18.380 --> 00:01:23.365
And there's a lot of changes to
specifications like HTML and Aria that

23
00:01:23.365 --> 00:01:28.958
people who are working on test frameworks
all the time are keeping abreast of.

24
00:01:28.958 --> 00:01:32.873
So that way you don't have to stay on top
of like, all right, what did the Aria

25
00:01:32.873 --> 00:01:36.928
working group decide for accessible
name calculation or something like that?

26
00:01:36.928 --> 00:01:38.807
That can change.

27
00:01:38.807 --> 00:01:41.597
I know for a fact the axe-core
team is keeping on top of that,

28
00:01:41.597 --> 00:01:44.830
so I don't have to any more,
which is pretty cool.

29
00:01:44.830 --> 00:01:48.880
So things like axe-core, that's a
JavaScript library that's open source that

30
00:01:48.880 --> 00:01:50.910
you could use in your unit tests.

31
00:01:50.910 --> 00:01:55.060
There is a cypress integration that
I think we already have installed, so

32
00:01:55.060 --> 00:01:56.900
we'll play with that.

33
00:01:56.900 --> 00:02:01.840
If you're using web driver, slimline web
driver, you can use axe-webdriverjs.

34
00:02:01.840 --> 00:02:05.070
The WAVE API is another
API that you could try.

35
00:02:06.130 --> 00:02:10.593
accessibilityjs is an API from GitHub.

36
00:02:10.593 --> 00:02:13.690
And then there's Lighthouse,
which uses axe.

37
00:02:13.690 --> 00:02:15.550
So it's kind of a similar approach.

38
00:02:15.550 --> 00:02:18.280
But if you were doing
a bigger suite of tests,

39
00:02:18.280 --> 00:02:22.621
you could theoretically use Lighthouse
to test for accessibility too.

40
00:02:22.621 --> 00:02:25.420
So as far as automation and

41
00:02:25.420 --> 00:02:30.380
accessibility, we can't catch everything,
I mentioned that a little earlier.

42
00:02:30.380 --> 00:02:34.310
But we can catch estimated about 30 to 50%

43
00:02:34.310 --> 00:02:38.650
of issues by volume for
accessibility issues.

44
00:02:38.650 --> 00:02:40.390
It really depends on the rule set.

45
00:02:40.390 --> 00:02:44.390
So if you're using something like pally
which uses HTML code sniffer by default,

46
00:02:44.390 --> 00:02:48.600
I believe that rule set will be
different than what axe would return or

47
00:02:48.600 --> 00:02:50.160
WAVE would return.

48
00:02:50.160 --> 00:02:53.420
And it's really a way to just catch

49
00:02:53.420 --> 00:02:57.490
some of those low hanging fruit
issues in an automated test fashion.

50
00:02:57.490 --> 00:03:00.900
So things that we were
finding in browser extensions

51
00:03:00.900 --> 00:03:04.370
having that baked in your automated
tests can be pretty cool.

52
00:03:04.370 --> 00:03:09.050
One caveat that I really wish would
evolve, maybe it will in the future but

53
00:03:09.050 --> 00:03:12.314
screen readers can't
actually be automated yet.

54
00:03:12.314 --> 00:03:15.210
Research project for someone, hint, hint?

55
00:03:15.210 --> 00:03:18.740
Maybe Python or NVDA is written in Python?

56
00:03:18.740 --> 00:03:20.115
I don't know.

57
00:03:20.115 --> 00:03:22.913
It would be really cool if
we could automate those and

58
00:03:22.913 --> 00:03:26.870
somehow assert that screen
reader output is what we expect.

59
00:03:26.870 --> 00:03:32.217
There is some cool stuff happening with
Puppeteer and the accessibility tree.

60
00:03:32.217 --> 00:03:35.775
But ultimately what I'm concerned with
is what the screen reader is doing,

61
00:03:35.775 --> 00:03:39.770
not what the accessibility tree is doing,
because they can differ.

62
00:03:39.770 --> 00:03:42.570
So yeah, just a note about screen
readers not being automated.

63
00:03:44.130 --> 00:03:48.990
But we really wanna write a combination
of tests to catch a variety of bugs,

64
00:03:48.990 --> 00:03:52.770
like having some unit tests for your
components, having some integration tests.

65
00:03:52.770 --> 00:03:56.480
They just do different things well,
and it's nice to have a variety.

66
00:03:56.480 --> 00:03:59.590
I guess if you could only choose one,
if you're gonna start somewhere,

67
00:03:59.590 --> 00:04:05.190
I'd probably start with integration test
just because it doesn't really matter what

68
00:04:05.190 --> 00:04:06.520
framework you're using or anything.

69
00:04:06.520 --> 00:04:10.210
You could use cypress with whatever,
basically.

70
00:04:10.210 --> 00:04:13.020
It's just looking at pages as rendered.

71
00:04:13.020 --> 00:04:15.990
So I'd probably start there,
it's also just a really great API.

