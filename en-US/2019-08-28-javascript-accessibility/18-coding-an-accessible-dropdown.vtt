WEBVTT

1
00:00:00.260 --> 00:00:04.390
&gt;&gt; Marcy Sutton: So in our application,
the drop down demos page,

2
00:00:04.390 --> 00:00:07.352
there is an example of, a drop down.

3
00:00:07.352 --> 00:00:13.220
That is completely broken now,
so that's fun.

4
00:00:13.220 --> 00:00:14.280
It doesn't work for everyone.

5
00:00:14.280 --> 00:00:17.210
It's equal opportunity and accessibility.

6
00:00:17.210 --> 00:00:22.577
So the idea here is it's really similar
to what we saw on the slack interface.

7
00:00:22.577 --> 00:00:24.140
It only works with the mouse.

8
00:00:24.140 --> 00:00:27.900
We don't really need that version,
we need the more accessible version.

9
00:00:27.900 --> 00:00:32.580
So let's go over to the code editor and
start working on that.

10
00:00:32.580 --> 00:00:37.450
So a quick tour around our application,
I'm gonna back out here.

11
00:00:37.450 --> 00:00:39.220
So at the root of this project,

12
00:00:39.220 --> 00:00:44.178
there's a number of Gatsby specific files,
like Gatsby-node.

13
00:00:44.178 --> 00:00:48.790
Gatsby-config, Gatsby-browser will talk
about Gatsby-browser a little bit later.

14
00:00:50.650 --> 00:00:53.440
His intro to Gatsby Course
would cover a lot more of this.

15
00:00:53.440 --> 00:00:55.820
So I'm not going to cover a lot of that.

16
00:00:55.820 --> 00:01:00.320
But the source directory is the part
that we mostly are concerned with.

17
00:01:00.320 --> 00:01:04.360
And in here, there are pages, templates.

18
00:01:04.360 --> 00:01:05.780
My slide deck is in here.

19
00:01:07.290 --> 00:01:12.170
The pages are probably like that and
components, I think are the most relevant

20
00:01:12.170 --> 00:01:17.550
for the exercises if you
wanna work in this project.

21
00:01:17.550 --> 00:01:24.860
So the drop down page is what Gatsby uses
to generate the pages on the website.

22
00:01:24.860 --> 00:01:27.980
So just by having
a drop-down page in here,

23
00:01:27.980 --> 00:01:31.510
it will create a route at
the page called drop-down.

24
00:01:31.510 --> 00:01:33.500
I didn't have to do any routing or
anything like that,

25
00:01:33.500 --> 00:01:36.420
it's all kind of handled by Gatsby.

26
00:01:36.420 --> 00:01:39.210
So on this page is where
I can import components.

27
00:01:39.210 --> 00:01:43.490
So with a lot of this stuff,
we can kind of spread the accessibility or

28
00:01:43.490 --> 00:01:48.350
inaccessibility around with components,
and the reusable and multiple pages.

29
00:01:48.350 --> 00:01:52.939
So that's how these pages work,
is that I have a bad drop down here.

30
00:01:52.939 --> 00:01:56.738
And then what will be a better drop down
because it's always a in the pursuit of

31
00:01:56.738 --> 00:01:59.740
accessibility, it can always be better.

32
00:01:59.740 --> 00:02:02.450
So I'm gonna go over to my components.

33
00:02:02.450 --> 00:02:08.230
So we've got this, this drop down version,
let's go scroll down.

34
00:02:08.230 --> 00:02:14.440
So in react, we have our logic and
our templating all together.

35
00:02:14.440 --> 00:02:17.030
Which some people like,
some people don't like.

36
00:02:17.030 --> 00:02:21.020
I like it a lot because it just cuts
down my back and forth between files.

37
00:02:21.020 --> 00:02:25.940
And so this mouse version,
I can look at it and

38
00:02:25.940 --> 00:02:29.910
see there's a span with an on click.

39
00:02:29.910 --> 00:02:32.930
So that's not focusable,
that's our first problem number one.

40
00:02:34.400 --> 00:02:37.880
The items that it opens up
are in a series of divs.

41
00:02:37.880 --> 00:02:41.825
So there's no nount for a screen reader of
how many items are in this drop down, so

42
00:02:41.825 --> 00:02:42.940
that could be better.

43
00:02:44.520 --> 00:02:48.810
And it's doesn't really have any focus
management or focus ability at all.

44
00:02:48.810 --> 00:02:55.090
So what I'm gonna do is go over to
in the better directory is where,

45
00:02:55.090 --> 00:02:58.960
so I have like the bad examples that
are what you shouldn't be doing.

46
00:02:58.960 --> 00:03:04.010
And then in the better folder is
where the the fixing it area will go.

47
00:03:04.010 --> 00:03:07.340
So I'm just gonna start
from a mostly clean slate.

48
00:03:07.340 --> 00:03:08.590
I've got this drop down.

49
00:03:09.830 --> 00:03:13.700
It's importing some CSS, so
I've got SAS here actually.

50
00:03:13.700 --> 00:03:18.260
And what I like about this is I can write
SAS, this project is importing it and

51
00:03:18.260 --> 00:03:19.730
converting it to regular CSS.

52
00:03:20.810 --> 00:03:25.640
And I personally really
like using CSS files.

53
00:03:25.640 --> 00:03:29.413
CSS and JS, as I mentioned,
is also really common.

54
00:03:29.413 --> 00:03:33.847
So there is some CSS here that, if I write
elements that match these selectors,

55
00:03:33.847 --> 00:03:38.060
I can just skip the styling part and
focus on the interaction part.

56
00:03:38.060 --> 00:03:41.790
So I'll keep that file open and
this dropdown.js.

57
00:03:41.790 --> 00:03:45.073
And I'm gonna start by
adding just the markup.

58
00:03:45.073 --> 00:03:48.067
Which is kind of my favorite
part of writing a component.

59
00:03:48.067 --> 00:03:53.300
Is just like the freedom of writing HTML
and not worrying about anything else.

60
00:03:53.300 --> 00:03:56.560
So I'm gonna create a button element for
our activator.

61
00:03:56.560 --> 00:04:02.280
So the part of the widget that I'm gonna
click on or focus on to open the thing.

62
00:04:02.280 --> 00:04:07.104
And I'm gonna make this dynamic
by adding some activator text.

63
00:04:07.104 --> 00:04:10.240
I'm gonna give it an empty
string as a default.

64
00:04:10.240 --> 00:04:13.530
Actually, let's call it
droppeddown just in case,

65
00:04:13.530 --> 00:04:18.580
when this component is initialized,
they don't pass in some text.

66
00:04:18.580 --> 00:04:19.340
I'm gonna do that.

67
00:04:20.740 --> 00:04:25.570
I'm also gonna pass some items because I
need the items to come from the outside.

68
00:04:25.570 --> 00:04:27.510
I'm gonna initialize it
with an empty array.

69
00:04:28.630 --> 00:04:33.990
And then in our button,
I will do activator text.

70
00:04:33.990 --> 00:04:38.575
And in react, you put it this
in between the curly braces and

71
00:04:38.575 --> 00:04:42.977
it will dynamically, so
if I pass in some other label from

72
00:04:42.977 --> 00:04:47.123
the outside it will just pass
it right into this spot.

73
00:04:47.123 --> 00:04:48.420
Okay, what else?

74
00:04:48.420 --> 00:04:50.480
So we've got our focus
double button element.

75
00:04:51.610 --> 00:04:56.110
I'm gonna indicate that it,
actually I'm gonna start with the list.

76
00:04:56.110 --> 00:05:02.700
So I've got the kind of control I'm gonna
click on and I wanted to open some items.

77
00:05:02.700 --> 00:05:05.450
So I'm gonna create an unordered list and

78
00:05:05.450 --> 00:05:08.440
inside of the list I'm gonna
add a number of items.

79
00:05:08.440 --> 00:05:10.700
So I've got that items array.

80
00:05:10.700 --> 00:05:15.397
If it's passing anything in I can
integrate on them with the map function

81
00:05:15.397 --> 00:05:19.247
and say, item in index says
arguments to the map function.

82
00:05:19.247 --> 00:05:25.327
This is ES6, which Gatsby is gonna
convert into ES5 JavaScript.

83
00:05:25.327 --> 00:05:27.724
So I can use the most modern
in JavaScript here and

84
00:05:27.724 --> 00:05:32.010
not really worry about backwards
competitors ability which is nice.

85
00:05:32.010 --> 00:05:39.540
So if I'm iterating over these items,
i can return a list item for each one.

86
00:05:39.540 --> 00:05:40.990
In react, we need to add a key.

87
00:05:40.990 --> 00:05:43.920
So I'm actually gonna use
that index from the map,

88
00:05:43.920 --> 00:05:48.950
since it's already giving me and
something that I can iterate on.

89
00:05:48.950 --> 00:05:53.890
So I've got this list item, inside of it,
I'm actually adding a list of links.

90
00:05:53.890 --> 00:05:57.940
So my drop down will have a list of
links that I can reach with the tab key.

91
00:05:57.940 --> 00:06:01.880
And the structure of these items.

92
00:06:01.880 --> 00:06:07.380
It's so it's an array of objects and
each object would have text and a URL.

93
00:06:07.380 --> 00:06:11.490
So I'm just gonna count on that
being here and say, item.url.

94
00:06:11.490 --> 00:06:16.930
And then inside of the link,
I will say item.txt.

95
00:06:16.930 --> 00:06:21.830
So I've got my button and my items.

96
00:06:21.830 --> 00:06:26.310
And I want to indicate that this
button is going to open these items.

97
00:06:26.310 --> 00:06:29.048
So I'm gonna say aria-haspopup,

98
00:06:29.048 --> 00:06:34.624
which is useful marker to put on things
like drop down trigger elements.

99
00:06:34.624 --> 00:06:36.538
Because in a screen reader it will say,

100
00:06:36.538 --> 00:06:39.496
like there's something
associated with this button.

101
00:06:39.496 --> 00:06:41.640
Like, there's a pop up here.

102
00:06:41.640 --> 00:06:44.350
So that means, when I click this thing,

103
00:06:44.350 --> 00:06:47.230
there's something associated with
it that I'm gonna interact with.

104
00:06:47.230 --> 00:06:48.824
So that's why I'm adding this attribute.

105
00:06:48.824 --> 00:06:56.158
So aria-haspopup, I'm gonna do
aria-controls which has mixed support.

106
00:06:56.158 --> 00:07:00.053
But what this will,
it will bind with the idea attribute of

107
00:07:00.053 --> 00:07:03.726
another element to create
a relationship using aria.

108
00:07:03.726 --> 00:07:07.858
So this is some accessibility
information that we can plug in here.

109
00:07:07.858 --> 00:07:12.284
I'm just gonna hard code this for
now, just to start and

110
00:07:12.284 --> 00:07:16.908
give that, I'm gonna give
this list an ID of dropdown1.

111
00:07:16.908 --> 00:07:22.231
Just cuz I'm in a server prototyping phase
of this, so I'm gonna say ID of dropdown1.

112
00:07:22.231 --> 00:07:27.580
So that will add that relationship between
the button and the unordered list.

113
00:07:27.580 --> 00:07:32.020
This button also needs some interaction,
so I'm gonna give it an on click.

114
00:07:32.020 --> 00:07:35.790
And then I'm gonna to write a click
handler function here in a second.

115
00:07:35.790 --> 00:07:37.080
Let's go up here in the top.

116
00:07:37.080 --> 00:07:41.820
So the way I've set up this component,
it's a stateless functional component.

117
00:07:41.820 --> 00:07:45.240
So it doesn't have things
like create class and

118
00:07:45.240 --> 00:07:48.870
in react to things like
life-cycle callback methods.

119
00:07:48.870 --> 00:07:53.760
I really love this way of working
because I can just focus on my markup

120
00:07:53.760 --> 00:07:58.684
in JSX here and then I can just write
some functions, and it's a lot simpler.

121
00:07:58.684 --> 00:08:04.490
So I'm gonna write a conts clickHandler,
so write this function.

122
00:08:04.490 --> 00:08:11.000
Using an arrow function,
I can pass an event attribute or argument.

123
00:08:11.000 --> 00:08:15.180
So I've got this clickHandler, now
that's defined, so that's a good start.

124
00:08:16.600 --> 00:08:22.473
Let's see,
I am going to use some reactive API.

125
00:08:22.473 --> 00:08:26.690
So useState, useRef and
useEffect are really useful.

126
00:08:26.690 --> 00:08:29.717
And since I've structured
my component like this,

127
00:08:29.717 --> 00:08:33.514
the stateless Functional Component I
can use these react hooks.

128
00:08:33.514 --> 00:08:35.800
And It's been a game changer for me.

129
00:08:35.800 --> 00:08:40.629
So let's go see what those look like.

130
00:08:40.629 --> 00:08:45.114
Reps are really useful in focus management
in react because you can mark an element

131
00:08:45.114 --> 00:08:48.970
as important for focus,
like this element I want to focus on.

132
00:08:48.970 --> 00:08:53.150
It keeps you from having to try and
go find a DOM element,

133
00:08:53.150 --> 00:08:57.580
like the React way is to use the API's,
use things like refs.

134
00:08:57.580 --> 00:08:59.870
So I'm gonna create a ref.

135
00:08:59.870 --> 00:09:03.437
Let's call it activatorRef.

136
00:09:03.437 --> 00:09:09.820
ActivatorRef, and I'll say useRef and
just pass it a null argument.

137
00:09:09.820 --> 00:09:15.020
And that is calling this React useRef that
I'm pulling out of the react package.

138
00:09:17.450 --> 00:09:20.809
Let's see, I'm gonna make another ref for
the the list.

139
00:09:20.809 --> 00:09:24.390
So that when I open it I
can send focus into it.

140
00:09:24.390 --> 00:09:28.730
So let's say dropdownListRef and
I like putting the name ref

141
00:09:28.730 --> 00:09:32.500
in the variable just so that I know that,
that's what that corresponds to.

142
00:09:32.500 --> 00:09:36.260
So we'll say useRef, null.

143
00:09:36.260 --> 00:09:38.580
I'm also going to handle some state.

144
00:09:38.580 --> 00:09:42.239
So I need to handle like the component
needs to be open, and closed.

145
00:09:42.239 --> 00:09:49.609
So let's say const, I'm gonna create like
an assign, an array here, and say isOpen.

146
00:09:49.609 --> 00:09:52.315
And this is some magic of the useState,

147
00:09:52.315 --> 00:09:57.568
I can put the thing I want to toggle which
is open and then a function to set it.

148
00:09:57.568 --> 00:10:04.100
And the [LAUGH] React hook for this for
useState just does it, it's awesome.

149
00:10:04.100 --> 00:10:10.520
So I could say useState, and if I wanted
to have a particular state at first,

150
00:10:10.520 --> 00:10:15.040
maybe it's not open to begin with,
that's what I would expect to see user.

151
00:10:15.040 --> 00:10:18.620
So I'm gonna say useState false,
and I'm gonna go

152
00:10:18.620 --> 00:10:22.680
bind this ref on the button that is
supposed to refer to with ref equals.

153
00:10:22.680 --> 00:10:28.075
And I'll say activateRef,
and the drop down list,

154
00:10:28.075 --> 00:10:32.008
I'm gonna add the drop downlistRef.

155
00:10:32.008 --> 00:10:37.314
Let's see, so what else do I need?

156
00:10:37.314 --> 00:10:39.250
I'm gonna add a className.

157
00:10:39.250 --> 00:10:41.760
If we go back to our CSS.

158
00:10:41.760 --> 00:10:47.820
I've got some CSS written already for
drop down activator, and then react.

159
00:10:47.820 --> 00:10:53.250
Because class is a reserve
word in react in particular.

160
00:10:53.250 --> 00:10:56.912
For us the class and name attribute,
that's how to keep react happy.

161
00:10:56.912 --> 00:11:01.777
But it will compile to the class at
class attribute when your HTML is all

162
00:11:01.777 --> 00:11:04.300
complete and beautiful.

163
00:11:04.300 --> 00:11:11.244
So we'll say dropdown- activator,
is that what I call it?

164
00:11:11.244 --> 00:11:15.710
And I can switch between tabs and VS code
with option command left and right arrows.

165
00:11:15.710 --> 00:11:17.990
That's something I use quite a bit.

166
00:11:17.990 --> 00:11:20.883
Okay, so
our button is looking pretty good.

167
00:11:20.883 --> 00:11:24.340
I'm gonna go add a className to the list.

168
00:11:24.340 --> 00:11:26.290
I think it's dropdownList.

169
00:11:29.630 --> 00:11:34.703
Item list, I knew that didn't seem
very consistent with my camel casing.

170
00:11:34.703 --> 00:11:36.340
And things, item list

