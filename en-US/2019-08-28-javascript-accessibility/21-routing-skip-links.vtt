WEBVTT

1
00:00:00.030 --> 00:00:01.830
&gt;&gt; Marcy Sutton: So client side routing.

2
00:00:01.830 --> 00:00:04.890
This is the next major topic
that we're going to cover.

3
00:00:04.890 --> 00:00:09.430
I have a GIF of grommets
shuffling through letters.

4
00:00:09.430 --> 00:00:13.053
Because I think of client side
routing as kind of a mail room where

5
00:00:13.053 --> 00:00:17.699
letters are coming in and they're being
delivered to their various recipients.

6
00:00:17.699 --> 00:00:22.927
Client side routing is JavaScript taking
control of the browser's history and

7
00:00:22.927 --> 00:00:27.620
matching URLs and URL fragments with
particular views in JavaScript.

8
00:00:27.620 --> 00:00:31.680
So doing that work that the browser
normally does for better or worse.

9
00:00:31.680 --> 00:00:34.260
And so it's doing that dynamic mapping.

10
00:00:34.260 --> 00:00:39.060
And I recently did some user testing
on accessible client-side routing.

11
00:00:39.060 --> 00:00:40.240
It's on the Gatsby blog.

12
00:00:40.240 --> 00:00:44.250
You can read all about the user
testing process, and what I uncovered.

13
00:00:44.250 --> 00:00:47.770
And that research I have
baked into these examples.

14
00:00:49.660 --> 00:00:54.650
So the approach that came out of that, so
with client side routing, focus management

15
00:00:54.650 --> 00:01:00.560
is often recommended, as the way to
guide the user through the application.

16
00:01:00.560 --> 00:01:03.775
So the page isn't refreshing, so

17
00:01:03.775 --> 00:01:07.100
then we're not kicking the user's
focus all the way back up to the top.

18
00:01:07.100 --> 00:01:10.950
Instead, we want to guide
them through the application.

19
00:01:10.950 --> 00:01:16.000
So if I click a link in the side bar,
like I've got a little nav diagram here.

20
00:01:16.000 --> 00:01:21.100
If I tabbed onto a list or
a link in that list and

21
00:01:21.100 --> 00:01:25.630
I hit the Enter key,
the graceful way to handle this

22
00:01:25.630 --> 00:01:30.260
in a web application would be to
send their focus to the new content.

23
00:01:30.260 --> 00:01:32.960
And that's been recommended
by a lot of people.

24
00:01:32.960 --> 00:01:37.490
What hasn't really been explored is
the user testing around that like

25
00:01:37.490 --> 00:01:40.570
the specific variations because
there are a number of them.

26
00:01:40.570 --> 00:01:46.880
So the recommendation that I'm making is
to add a skip link in the content area.

27
00:01:46.880 --> 00:01:48.400
So, you click on a link.

28
00:01:48.400 --> 00:01:52.370
There's another like skip link
something that's focusable.

29
00:01:52.370 --> 00:01:57.110
It's not super big like, it's not a rapper
element taking up the whole screen.

30
00:01:57.110 --> 00:01:58.220
It's a small item.

31
00:01:59.230 --> 00:02:02.310
As a skip link, it could send me
right back to the navigation so

32
00:02:02.310 --> 00:02:03.930
it's it serves a purpose.

33
00:02:04.990 --> 00:02:09.270
It works around a number of assistive
technology bugs that I found were rapper

34
00:02:09.270 --> 00:02:13.930
elements and react applications, for
whatever reason, just won't take focus and

35
00:02:13.930 --> 00:02:15.010
won't announce.

36
00:02:15.010 --> 00:02:17.410
Or they'll focus but
they won't announce the content.

37
00:02:17.410 --> 00:02:20.125
So this solution works around
a number of those problems.

38
00:02:20.125 --> 00:02:23.684
And for users of screen magnification,
when you're zoomed away in,

39
00:02:23.684 --> 00:02:27.430
that skip link is small enough that
you can see what you're focused on.

40
00:02:27.430 --> 00:02:32.970
So this is a boiling down this approach
of multiple disability viewpoints and

41
00:02:32.970 --> 00:02:35.280
different ways of navigating.

42
00:02:35.280 --> 00:02:37.803
Hopefully, into one
component that eventually,

43
00:02:37.803 --> 00:02:40.510
we might be able to bake this
in at the framework level.

44
00:02:40.510 --> 00:02:44.940
Or even web standards would be cool,
but this is pretty new research.

45
00:02:44.940 --> 00:02:50.950
So to walk through these steps, it's
a small UI control in each view target.

46
00:02:50.950 --> 00:02:52.875
I'm gonna label it with what it does.

47
00:02:52.875 --> 00:02:55.765
So in this case, a skip to navigation.

48
00:02:55.765 --> 00:02:58.495
We could also label it with
whatever content it's around.

49
00:02:58.495 --> 00:03:03.085
So maybe it's a portfolio page, and I
could say, portfolio, skip to navigation.

50
00:03:03.085 --> 00:03:06.165
What you display,
I can play with a little bit.

51
00:03:06.165 --> 00:03:09.440
That's where I'm gonna do some
more user research in the future.

52
00:03:09.440 --> 00:03:10.820
But for the mechanics,

53
00:03:10.820 --> 00:03:14.200
when the user clicks the link,
we're gonna move focus to that control.

54
00:03:15.400 --> 00:03:17.150
And for frameworks in JavaScript,

55
00:03:17.150 --> 00:03:22.790
some of the underlying technology that we
can use to handle these focus patterns.

56
00:03:22.790 --> 00:03:27.750
In React, we already saw refs, so that's
a really great API for handling that.

57
00:03:28.900 --> 00:03:34.514
There's a new some new directions in
React coming, things called focus scopes.

58
00:03:34.514 --> 00:03:37.540
I think that actually would have been
useful for our drop downs earlier.

59
00:03:37.540 --> 00:03:39.800
But we kept things a bit simpler.

60
00:03:39.800 --> 00:03:42.330
In view, there's a concept called refs.

61
00:03:42.330 --> 00:03:44.100
It's really similar to React ref.

62
00:03:44.100 --> 00:03:47.410
So you might use that for
panning focus around.

63
00:03:47.410 --> 00:03:50.500
In Ember, I asked on Twitter and
in the slides,

64
00:03:50.500 --> 00:03:55.070
I have a link to what people recommended
for how they're managing focus in Ember.

65
00:03:55.070 --> 00:03:58.550
Potentially, other framework
APIs like an Angular.

66
00:03:58.550 --> 00:04:03.510
And if you're writing a big web
application, this custom routing and

67
00:04:03.510 --> 00:04:04.460
handling focus,

68
00:04:04.460 --> 00:04:09.260
you might end up wanting to write
a like higher level focus manager.

69
00:04:11.150 --> 00:04:15.280
It's interesting approaches sort of
like custom for every application or

70
00:04:15.280 --> 00:04:16.620
every website.

71
00:04:16.620 --> 00:04:20.550
Just know that like you could abstract
some of these patterns into an API.

72
00:04:20.550 --> 00:04:24.965
If you have a long living web application,
that would be something that would be more

73
00:04:24.965 --> 00:04:29.270
robust and you could write automated tests
for it and all kinds of stuff like that.

74
00:04:30.870 --> 00:04:35.670
So I'm going to go implement this
routing approach that I've uncovered

75
00:04:35.670 --> 00:04:40.350
through research and you'll be
the first people to see this in action.

76
00:04:40.350 --> 00:04:44.440
And the long term goal is to try and
automate this for people.

77
00:04:44.440 --> 00:04:47.480
So like,
if a framework can make it really easy for

78
00:04:47.480 --> 00:04:50.410
us as developers to opt
into these patterns.

79
00:04:50.410 --> 00:04:51.680
That's what I'd like to get to.

80
00:04:51.680 --> 00:04:53.310
But that hasn't been invented yet.

81
00:04:53.310 --> 00:04:55.650
So we're gonna invent it right now.

82
00:04:55.650 --> 00:04:59.610
So I'm gonna go back
over to my application,

83
00:04:59.610 --> 00:05:01.840
to close out of this drop down stuff.

84
00:05:01.840 --> 00:05:04.870
So this is something that I'm
actually gonna pull up the app again.

85
00:05:06.690 --> 00:05:10.580
This is something that will
apply to this whole application,

86
00:05:10.580 --> 00:05:12.590
this whole Gatsby site that I've made.

87
00:05:12.590 --> 00:05:17.140
So right now I've got a skip link,
and it skips me into the main content.

88
00:05:17.140 --> 00:05:19.630
So it gets me over to this main region.

89
00:05:19.630 --> 00:05:24.230
If I use these links right now,
let's go back here.

90
00:05:26.280 --> 00:05:29.500
If I go to like the announcer demo page,
or, and

91
00:05:29.500 --> 00:05:33.920
you can see my, when I use a link
in this demos list in the sidebar.

92
00:05:33.920 --> 00:05:36.940
It's mimicking a traditional
browser refresh, and

93
00:05:36.940 --> 00:05:39.564
kicking my focus all
the way back up to the top.

94
00:05:39.564 --> 00:05:41.510
It's debatable,
whether you want to do that.

95
00:05:41.510 --> 00:05:44.220
I think for a simple site,
it's not a huge deal.

96
00:05:44.220 --> 00:05:48.810
If you're Gmail or Google Maps and
you get kick back to the top of

97
00:05:48.810 --> 00:05:52.850
the webpage every time you click a link,
it could be pretty irritating.

98
00:05:52.850 --> 00:05:57.759
So it would be better to handle focus
by sending it into the new content.

99
00:05:57.759 --> 00:05:58.680
So that's what I'm gonna do.

100
00:05:58.680 --> 00:06:02.150
I'm gonna write a component that
each one of the these headings

101
00:06:02.150 --> 00:06:05.290
is going to get a skip
link like in the diagram.

102
00:06:05.290 --> 00:06:07.489
I'm just gonna hard code it for now.

103
00:06:07.489 --> 00:06:09.153
I will make a reusable component but

104
00:06:09.153 --> 00:06:12.450
potentially this could be
abstracted further in the future.

105
00:06:12.450 --> 00:06:15.540
And then when I click these links,

106
00:06:15.540 --> 00:06:19.740
I'm going to leverage Gatsby's client
side routing, and send focus that way.

