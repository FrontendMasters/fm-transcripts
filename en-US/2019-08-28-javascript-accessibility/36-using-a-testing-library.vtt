WEBVTT

1
00:00:00.160 --> 00:00:03.530
&gt;&gt; Marcy Sutton: So for
unit testing I'm using Jest, and

2
00:00:03.530 --> 00:00:07.440
that's a test framework that's
really common in react applications.

3
00:00:07.440 --> 00:00:12.420
I'm going to go write some tests,
and the convention here is to use,

4
00:00:12.420 --> 00:00:16.630
I think it's double underscore
tests double underscore and

5
00:00:16.630 --> 00:00:18.410
you put it in the component directory.

6
00:00:18.410 --> 00:00:20.924
So really close to the component,

7
00:00:20.924 --> 00:00:24.930
not off to the side in some
standalone test directory.

8
00:00:24.930 --> 00:00:30.980
So the react testing library
is a really great resource.

9
00:00:30.980 --> 00:00:32.780
So testing library.

10
00:00:32.780 --> 00:00:36.663
There's things like Firing Events,
we're gonna use that.

11
00:00:36.663 --> 00:00:38.090
Using queries.

12
00:00:38.090 --> 00:00:43.093
So things like getBy, findBy, findAllBy,

13
00:00:43.093 --> 00:00:46.000
so think of like query select all,
that kind of thing.

14
00:00:46.000 --> 00:00:48.830
You can get ByLabelText.

15
00:00:48.830 --> 00:00:53.010
There's a lot of really good utilities in
here and they have examples of markup that

16
00:00:53.010 --> 00:00:58.140
you might be wanting to test and
then how to use the Jest,

17
00:00:58.140 --> 00:01:03.430
in the testing library specifically,
to go and do things, to assert things.

18
00:01:03.430 --> 00:01:04.910
The other one that I want to pull up,

19
00:01:04.910 --> 00:01:09.227
because I'm going to use it to
write these tests is jest-dom.

20
00:01:11.190 --> 00:01:14.970
And this is some add-ons.

21
00:01:14.970 --> 00:01:20.050
They are custom Jest matchers to test
the state of the DOM, and our little

22
00:01:20.050 --> 00:01:23.940
Gatsby application has these dependencies
already installed, so you can look at

23
00:01:23.940 --> 00:01:29.080
the package JSON file to see what's in
there, but these matchers are great.

24
00:01:29.080 --> 00:01:33.090
And the fact that they've, I think the
Gatsby docs prompted me to install this,

25
00:01:33.090 --> 00:01:35.060
so I already had it, which was great.

26
00:01:35.060 --> 00:01:40.182
But there's things like to be disabled
toBeEmpty toBeVisible, which would

27
00:01:40.182 --> 00:01:46.245
depend on CSS to be in there, toHaveClass,
that one's really useful, toHaveFocus, and

28
00:01:46.245 --> 00:01:51.287
so one, toContainElement, there’s
some really great matchers in here,

29
00:01:51.287 --> 00:01:56.520
and we’re going to use them to write
some classes for our dropdown component.

30
00:01:56.520 --> 00:01:58.000
So I’m going to go over there.

31
00:01:58.000 --> 00:01:59.720
Close out of this tab list.

32
00:01:59.720 --> 00:02:06.110
I might keep our little change to
the role to have two different examples.

33
00:02:06.110 --> 00:02:09.310
Actually let's pull out package JSON and
see what we've got in here.

34
00:02:09.310 --> 00:02:13.050
So dev dependencies is usually
where testing stuff lives,

35
00:02:13.050 --> 00:02:16.743
because I don't wanna ship it to ever
user, like they don't need that.

36
00:02:16.743 --> 00:02:20.060
[LAUGH] This is just for
development purposes.

37
00:02:20.060 --> 00:02:23.104
So I've got testing-library,
I've got Cypress, so

38
00:02:23.104 --> 00:02:25.189
we're gonna use that a little later.

39
00:02:25.189 --> 00:02:28.580
I've got jest-dom,
there’s some react findings in here.

40
00:02:28.580 --> 00:02:32.306
I've got the axe-core
library that we could use,

41
00:02:32.306 --> 00:02:37.160
babel-jest to make sure we can write
some modern code in our test to

42
00:02:37.160 --> 00:02:40.987
make it gets compiled to more,
I guess for testing.

43
00:02:40.987 --> 00:02:43.981
You don't care about that as much,
but it can be nice.

44
00:02:43.981 --> 00:02:48.076
We've got jest-transform-css.

45
00:02:48.076 --> 00:02:49.500
Yeah, there's lots of good stuff in here.

46
00:02:49.500 --> 00:02:53.650
So I'm going to go over to our components.

47
00:02:53.650 --> 00:02:55.130
So I've got these bad components.

48
00:02:55.130 --> 00:02:58.652
They don't have any tests,
cuz they're bad components, so

49
00:02:58.652 --> 00:03:01.445
by definition they don't
[LAUGH] have any tests.

50
00:03:01.445 --> 00:03:06.758
So in the test directory for the better
components, that's the convention too,

51
00:03:06.758 --> 00:03:11.070
like I have kind of have a big
collection of components in here, but

52
00:03:11.070 --> 00:03:15.998
sometimes you might group them by,
like the type of component would have its

53
00:03:15.998 --> 00:03:21.003
own directory and its own test folder,
and it's nice just to have the test and

54
00:03:21.003 --> 00:03:25.029
the thing you're testing in
a similar area of your code base.

55
00:03:25.029 --> 00:03:27.196
So I've got this dropdown, and

56
00:03:27.196 --> 00:03:32.666
the things that I want to test are like
the external API's definitely the start.

57
00:03:32.666 --> 00:03:38.028
That's more of a general testing thing,
like passing in a specific name.

58
00:03:38.028 --> 00:03:40.156
I could test the number of items.

59
00:03:40.156 --> 00:03:44.230
I'm going to focus more on the
accessibility things, and what we coded in

60
00:03:44.230 --> 00:03:48.632
here, and if I were doing this for real,
I probably would have started with test

61
00:03:48.632 --> 00:03:53.190
driven development, to start with the
test, but we're doing it the other way.

62
00:03:53.190 --> 00:03:54.810
That's okay too.

63
00:03:54.810 --> 00:03:59.400
So the button being focusable,
I think that's something that

64
00:03:59.400 --> 00:04:04.247
would be worth testing,
because it's sort of, it's part of this

65
00:04:04.247 --> 00:04:09.463
component that we want to make sure
that the user can reach and operate.

66
00:04:09.463 --> 00:04:14.140
I want this to be an isolated unit test,
so I think that's an okay thing to test.

67
00:04:14.140 --> 00:04:17.903
I don't have to write an integration
test to capture that.

68
00:04:17.903 --> 00:04:22.031
I do want to check that if I
interact with this button, and

69
00:04:22.031 --> 00:04:27.630
I can use that fire event to do it, I want
to make sure that it opens this list.

70
00:04:27.630 --> 00:04:31.260
So some things I could check for,
I could test for,

71
00:04:31.260 --> 00:04:35.040
this active class, that would work, but
it kind of depends on the implementation.

72
00:04:36.960 --> 00:04:42.052
It's something they do recommend
is adding some data attributes,

73
00:04:42.052 --> 00:04:45.461
data test IDs here, so
I'm gonna add those.

74
00:04:45.461 --> 00:04:50.198
Something that I could use that
might be less brutal than the active

75
00:04:50.198 --> 00:04:55.017
class would be, when this dropdown
opens I want to test that focus is

76
00:04:55.017 --> 00:04:59.753
set to the first item,
because that would assume that it's open,

77
00:04:59.753 --> 00:05:04.004
and it's visible, and
that that focus stuff is handling.

78
00:05:04.004 --> 00:05:08.753
That was happening with us effect so
the way it was coded means that that

79
00:05:08.753 --> 00:05:13.280
will only happen when
the dropdown has been activated.

80
00:05:13.280 --> 00:05:15.780
So that's a way that I can try and
write this test so

81
00:05:15.780 --> 00:05:20.320
that it's really focused on the outcome,
and less on the implementation,

82
00:05:20.320 --> 00:05:25.930
because if that CSS class has to change,
for some reason, surprise my test broke.

83
00:05:25.930 --> 00:05:29.120
So I think that's the approach
I'm gonna go with for this one.

84
00:05:29.120 --> 00:05:36.870
I'm gonna keep this dropdown file handy,
and the dropdown test.

85
00:05:36.870 --> 00:05:38.820
So I've got one test in here so far.

86
00:05:40.040 --> 00:05:43.901
This file imports react, and
imports the testing library,

87
00:05:43.901 --> 00:05:48.379
which comes with a render method,
and this fireEvent I could pull in.

88
00:05:48.379 --> 00:05:53.210
I import the component that I'm testing,
so the dropdown in this case.

89
00:05:53.210 --> 00:05:59.060
I've got this one test so far just
to check that if I pass in a prop,

90
00:05:59.060 --> 00:06:03.970
that this custom text ends up
in the page that's working okay,

91
00:06:03.970 --> 00:06:06.470
cuz if it wasn't getting passed off,
it just wouldn't be in the document.

92
00:06:06.470 --> 00:06:10.520
It would just kind of like get
lost in the JavaScript ether.

93
00:06:10.520 --> 00:06:18.004
So I think for this,
I'm going to say it('renders a focusable

94
00:06:18.004 --> 00:06:23.558
button that activates the dropdown', ().

95
00:06:25.644 --> 00:06:31.052
&gt;&gt; Marcy Sutton: So something I did notice
when I was working through this ahead

96
00:06:31.052 --> 00:06:37.195
of time was a bit of a gotcha that
the button here is using a click event.

97
00:06:37.195 --> 00:06:39.180
Because it's a button,
it can fire a click.

98
00:06:40.360 --> 00:06:43.420
It's not a div that required that
key listener like we talked about to

99
00:06:43.420 --> 00:06:44.860
start the day.

100
00:06:44.860 --> 00:06:48.279
So that means that if I'm testing for
something like on key up,

101
00:06:48.279 --> 00:06:50.925
like my fire event,
that's not going to match,

102
00:06:50.925 --> 00:06:55.650
because even though I'm using the keyboard
to do it, that's not how I bound my logic.

103
00:06:55.650 --> 00:06:59.996
So that affects how we read this test, and

104
00:06:59.996 --> 00:07:06.330
that ultimately would depend
on what events you've added,

105
00:07:06.330 --> 00:07:10.801
so I'm gonna just copy some of this stuff,

106
00:07:10.801 --> 00:07:14.916
the dropdown just to get it on the page.

107
00:07:14.916 --> 00:07:21.336
I'm gonna give it another text just so
that my things are different.

108
00:07:21.336 --> 00:07:27.231
So I've got this dropdown,
I'm actually going to,

109
00:07:27.231 --> 00:07:31.170
I had these all written yesterday.

110
00:07:31.170 --> 00:07:35.900
I want to go look at the docs for
a second and see what I'm going to use.

111
00:07:35.900 --> 00:07:43.170
So the queries for this, I'm going to
probably use the same API to get it,

112
00:07:43.170 --> 00:07:49.240
so getByText is probably fine, and that
will return the first matching node for

113
00:07:49.240 --> 00:07:53.570
query, so that means I can do
some interesting assertions here.

114
00:07:53.570 --> 00:07:55.920
So I think getByText is what I want.

115
00:07:55.920 --> 00:08:03.830
GetByText, so, I don't care about
the text though, I care about the node.

116
00:08:03.830 --> 00:08:10.846
I think the way that I did this was to add
a data, so I'm going to add a data-testid,

117
00:08:10.846 --> 00:08:15.657
and I'm going to say activator,
or how about dropdown,

118
00:08:15.657 --> 00:08:21.180
just, "dropdown-activator"
to be very explicit.

119
00:08:21.180 --> 00:08:28.304
I'm also going to add one here
on the list, so data-testid.

120
00:08:28.304 --> 00:08:31.612
I'm going to say "dropdown-itemList',
just so

121
00:08:31.612 --> 00:08:34.330
that I have some handles from the testing.

122
00:08:34.330 --> 00:08:36.720
These will get stripped out
once the page renders, so

123
00:08:36.720 --> 00:08:39.410
I don't need to worry about them like,
they are data attributes so

124
00:08:39.410 --> 00:08:42.480
they'd probably be fine, but
they won't end up in the rendered page.

125
00:08:42.480 --> 00:08:43.719
They're only for testing.

126
00:08:45.208 --> 00:08:50.100
&gt;&gt; Marcy Sutton: Okay, so
I've got this dropdown.

127
00:08:50.100 --> 00:08:54.770
I want to render, I think something we
could look at is the render method for

128
00:08:54.770 --> 00:08:56.090
this.

129
00:08:56.090 --> 00:08:56.898
Where does that live?

130
00:08:56.898 --> 00:09:03.241
So Setup, render, not on that page,
I'm just gonna search for

131
00:09:03.241 --> 00:09:07.829
it, cuz I wanna know
what that API looks like.

132
00:09:07.829 --> 00:09:11.931
So render creates a test render instance,
and

133
00:09:11.931 --> 00:09:15.834
I can pull out different
things off of this.

134
00:09:15.834 --> 00:09:17.992
So the getByText is the first thing.

135
00:09:17.992 --> 00:09:19.345
I don't really care about the text.

136
00:09:19.345 --> 00:09:25.681
I've already tested that, I care about
the node, so that's what I wanna get.

137
00:09:25.681 --> 00:09:30.835
I think I could probably
pull out the container,

138
00:09:30.835 --> 00:09:33.484
that looks pretty good.

139
00:09:33.484 --> 00:09:37.944
We should rarely use the container,
so maybe not.

140
00:09:37.944 --> 00:09:39.802
Debug, unmount.

141
00:09:41.617 --> 00:09:44.898
&gt;&gt; Marcy Sutton: It's funny how they show
an example, and then they're like, but

142
00:09:44.898 --> 00:09:46.609
you don't really wanna use that.

143
00:09:46.609 --> 00:09:47.947
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Marcy Sutton: Maybe wrapper,

144
00:09:47.947 --> 00:09:51.789
pass a react component as the wrapper
option to have it rendered around

145
00:09:51.789 --> 00:09:52.907
the inner element.

146
00:09:52.907 --> 00:09:55.229
Yeah, I don't really care about that.

147
00:09:55.229 --> 00:10:00.584
I just want a hold of the actual DOM node.

148
00:10:00.584 --> 00:10:07.670
So, here's an example where they've taken
container, they're converting it to JSON.

149
00:10:07.670 --> 00:10:09.250
Let's just play with it, see what it does.

150
00:10:10.380 --> 00:10:11.240
Container.

151
00:10:13.880 --> 00:10:19.470
Maybe I think,
I thought I could just say dropdown,

152
00:10:19.470 --> 00:10:24.910
and then just render it without pulling
that stuff off, and then I could say, so

153
00:10:24.910 --> 00:10:32.900
I wanna get to the dropdown.getByTestId,

154
00:10:32.900 --> 00:10:39.290
so I want that ('dropdown-activator'),
and then I really want to click that.

155
00:10:39.290 --> 00:10:45.185
So I can't really test its,
I guess I could focus it,

156
00:10:45.185 --> 00:10:50.949
like check if, and
maybe I do this like the activator

157
00:10:50.949 --> 00:10:56.975
could be const activator
= dropdown.getByTestId,

158
00:10:56.975 --> 00:11:01.560
and then if I did activator.focus(),

159
00:11:01.560 --> 00:11:06.014
like try and call a focus event on it, and

160
00:11:06.014 --> 00:11:11.264
this is where it depends
on your testing tools.

161
00:11:11.264 --> 00:11:15.260
Selenium web driver in Cyprus, for
example, if you try to send a focus event

162
00:11:15.260 --> 00:11:19.506
to a div that isn't focusable, they will
tell you that it's not focusable, but

163
00:11:19.506 --> 00:11:23.835
it does depend on the testing tool doing
that, and so that's not always the case.

164
00:11:23.835 --> 00:11:26.015
Jest does I think.

165
00:11:26.015 --> 00:11:30.941
So I want to expect(activator.focused),

166
00:11:30.941 --> 00:11:36.633
that was one of those matchers,
or was it is focused?

167
00:11:36.633 --> 00:11:39.220
ToBeFocused?

168
00:11:39.220 --> 00:11:42.603
ToBe-
&gt;&gt; Speaker 3: ToHaveFocus.

169
00:11:42.603 --> 00:11:44.295
&gt;&gt; Marcy Sutton: ToHaveFocus, thank you.

170
00:11:44.295 --> 00:11:49.210
Activator).toHaveFocus

