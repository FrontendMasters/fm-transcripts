WEBVTT

1
00:00:00.070 --> 00:00:02.750
&gt;&gt; Marcy Sutton: We've added accessibility
information and focus ability, but

2
00:00:02.750 --> 00:00:03.950
what about events?

3
00:00:03.950 --> 00:00:05.950
What if you wanna do
something with that button?

4
00:00:05.950 --> 00:00:08.290
It's not just gonna sit there and
not do anything.

5
00:00:09.400 --> 00:00:14.570
If I added a click event to an element
like a div, I could just add an onClick.

6
00:00:14.570 --> 00:00:16.906
This is react code here on the left.

7
00:00:16.906 --> 00:00:21.480
But a div will not react to
a click event by default.

8
00:00:21.480 --> 00:00:24.120
We actually have to make it work with
the keyboard with a key listener.

9
00:00:24.120 --> 00:00:29.572
So here I have onKeyDown, and
I can tab on to this button.

10
00:00:29.572 --> 00:00:34.585
The react code here is not bound.

11
00:00:34.585 --> 00:00:38.305
So if you're using Vanilla JavaScript,
you could write a,

12
00:00:38.305 --> 00:00:43.775
little JavaScript function and
have it react to these events.

13
00:00:43.775 --> 00:00:47.317
Just know that if you choose
a button element instead,

14
00:00:47.317 --> 00:00:49.479
you could skip a lot of that work.

15
00:00:49.479 --> 00:00:52.913
Look at how many lines it takes
to make an accessible div and

16
00:00:52.913 --> 00:00:54.720
you need the two events.

17
00:00:54.720 --> 00:00:58.416
Whereas, with a button element it
already has the roll of button,

18
00:00:58.416 --> 00:01:00.140
it already has focus ability.

19
00:01:00.140 --> 00:01:02.989
And I can use a click
handler just the one.

20
00:01:02.989 --> 00:01:07.478
So a button will fire with a click event,
whereas, a div needs both the click and

21
00:01:07.478 --> 00:01:09.230
the key listener.

22
00:01:09.230 --> 00:01:11.200
So something to pay attention to.

23
00:01:11.200 --> 00:01:11.950
Question.

24
00:01:11.950 --> 00:01:16.575
&gt;&gt; Speaker 2: Yeah, so I've read that it's
better to do onKeyUp so that people can

25
00:01:16.575 --> 00:01:23.210
exit or undo the accidental click
&gt;&gt; Marcy Sutton: Yeah, sure.

26
00:01:23.210 --> 00:01:28.842
&gt;&gt; Speaker 2: And I was also curious
if onClick does that by default.

27
00:01:28.842 --> 00:01:34.860
onClick means when they lift
their finger off the key.

28
00:01:34.860 --> 00:01:35.856
&gt;&gt; Marcy Sutton: It's good question.

29
00:01:35.856 --> 00:01:36.820
So yeah, good point.

30
00:01:36.820 --> 00:01:38.620
There are multiple key listeners.

31
00:01:38.620 --> 00:01:41.642
And key up might be the one
that you wanna reach for

32
00:01:41.642 --> 00:01:44.452
just based on how that will work for
the user.

33
00:01:44.452 --> 00:01:51.431
For our click event with the keyboard,
it fires an actual click event.

34
00:01:51.431 --> 00:01:55.463
If you really wanted to, you could
bind an onMouseDown and an onKeyUp and

35
00:01:55.463 --> 00:01:57.690
do slightly different things.

36
00:01:57.690 --> 00:02:01.710
I have found that just streamlining
it with the one click listener

37
00:02:01.710 --> 00:02:03.987
if you can on a button is just easier.

38
00:02:03.987 --> 00:02:05.512
It's less to manage,

39
00:02:05.512 --> 00:02:10.580
you run into less issues with screen
reader interaction modes on Windows.

40
00:02:11.940 --> 00:02:15.803
So you just wanna make sure that if
you're creating interactive things,

41
00:02:15.803 --> 00:02:17.997
that you're testing with the keyboard.

42
00:02:17.997 --> 00:02:21.897
This is where the keyboard
debugging would come in handy for

43
00:02:21.897 --> 00:02:23.855
a fully hooked up component.

44
00:02:23.855 --> 00:02:26.541
Whereas, if you are just
clicking with a mouse,

45
00:02:26.541 --> 00:02:30.290
you might never know that the div
doesn't fire from a key listener.

