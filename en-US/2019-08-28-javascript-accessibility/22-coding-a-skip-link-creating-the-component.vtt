WEBVTT

1
00:00:00.150 --> 00:00:03.740
&gt;&gt; Marcy Sutton: So to get started,
I'm gonna open up Gatsby browser,

2
00:00:04.860 --> 00:00:09.700
which every Gatsby site, you have the
ability to use this, it's not required.

3
00:00:09.700 --> 00:00:15.350
But this gives you some API handles on
what Gatsby's doing on the client side.

4
00:00:15.350 --> 00:00:21.270
There's also a Gatsby node which is stuff
for like building your content out.

5
00:00:21.270 --> 00:00:26.420
There's another file that I don't have
here but I could add is Gatsby-ssr.js,

6
00:00:26.420 --> 00:00:30.540
and that's to do special things for
the server rendered part.

7
00:00:30.540 --> 00:00:34.340
We're focused on the browser
client rendering part and

8
00:00:34.340 --> 00:00:40.330
in their APIs,
there is an on route update function and

9
00:00:40.330 --> 00:00:44.260
it gives me a handle on
the location that I'm at now.

10
00:00:44.260 --> 00:00:48.010
So the route changed, and
it will tell me the previous location.

11
00:00:48.010 --> 00:00:51.220
So if I click a link and
I'm going from page to page,

12
00:00:51.220 --> 00:00:55.600
I can tell whether I'm
loading a page like fresh.

13
00:00:55.600 --> 00:00:59.070
So if I go straight to a page, I probably
don't want to manage focus but if

14
00:00:59.070 --> 00:01:02.950
the users clicking links within the site,
that's when I wanna manage their focus.

15
00:01:02.950 --> 00:01:05.530
So I'm gonna use this on route update.

16
00:01:05.530 --> 00:01:09.880
And if I've got, if location.

17
00:01:11.000 --> 00:01:14.020
So I wanna check if the location,

18
00:01:15.950 --> 00:01:20.060
if previous location exists, so
in on the first view of a web page,

19
00:01:20.060 --> 00:01:22.260
previous location is
not going to be there.

20
00:01:24.850 --> 00:01:29.190
So prevLocation, that means that exists.

21
00:01:29.190 --> 00:01:31.790
I'm gonna add a little bit of logic here.

22
00:01:33.220 --> 00:01:38.320
The other parts of this that
I'm gonna work on include, so

23
00:01:38.320 --> 00:01:43.640
in the components for this application
there's the bad and better examples.

24
00:01:43.640 --> 00:01:45.960
And then there's this directory
called site-chrome and

25
00:01:45.960 --> 00:01:49.260
that's where everything that's
like the header of my application,

26
00:01:49.260 --> 00:01:51.900
the header of my slides,
those live over here.

27
00:01:51.900 --> 00:01:53.990
So I'm going to go pull up my header.

28
00:01:53.990 --> 00:01:59.582
And that's where in the application,
I have this skip to main link.

29
00:01:59.582 --> 00:02:01.884
Let's see what else do I want to pull up.

30
00:02:01.884 --> 00:02:04.020
Because that'll probably change.

31
00:02:04.020 --> 00:02:07.560
I want that skip to main to go to
this link that I'm going to create.

32
00:02:07.560 --> 00:02:09.700
So I'm gonna keep that open.

33
00:02:09.700 --> 00:02:12.460
I'm gonna create a new component.

34
00:02:12.460 --> 00:02:17.190
And I'm gonna put it I actually have
the file here and it's got stuff in it.

35
00:02:17.190 --> 00:02:24.050
So let's clear it out and
I'm gonna do import react from React.

36
00:02:25.580 --> 00:02:28.260
I'm going to use some CSS and JS here for

37
00:02:28.260 --> 00:02:31.390
this because I want this
component to be self contained.

38
00:02:31.390 --> 00:02:36.010
I don't want people who are consuming
it to also have to grab a CSS file.

39
00:02:36.010 --> 00:02:41.280
So from the component standpoint, I think
CSS and JS is a good choice for this.

40
00:02:41.280 --> 00:02:44.790
So I'm going to import
CSS from emotion core,

41
00:02:44.790 --> 00:02:47.870
which is a library I already have
installed in this application.

42
00:02:47.870 --> 00:02:52.530
That'll allow me to write CSS the way
that I want in this file, and

43
00:02:52.530 --> 00:02:55.040
it'll just be applied
to whatever we write.

44
00:02:55.040 --> 00:03:01.030
So I'm gonna write some styles here and
I can call this CSS method.

45
00:03:01.030 --> 00:03:04.310
And I pass it a template literal.

46
00:03:04.310 --> 00:03:10.150
So these till the characters in between
them, I can write multi line CSS.

47
00:03:10.150 --> 00:03:14.750
So, I'm gonna go apply some stuff.

48
00:03:14.750 --> 00:03:18.730
I have the headings that,
let's go back and look at the site, so

49
00:03:18.730 --> 00:03:20.300
this heading right here.

50
00:03:20.300 --> 00:03:23.880
I want to apply,
insert a link into the heading.

51
00:03:23.880 --> 00:03:26.890
So if I'm gonna position to
absolute off to the side,

52
00:03:26.890 --> 00:03:30.700
I need to wrap the parent
element with position relative.

53
00:03:30.700 --> 00:03:37.858
So I'm gonna add this through my
component and I'll say position relative.

54
00:03:37.858 --> 00:03:40.641
Let's see what else my route skip link.

55
00:03:43.264 --> 00:03:44.930
&gt;&gt; Marcy Sutton: I'm gonna
add some CSS for this.

56
00:03:44.930 --> 00:03:47.760
So that'll be positioned
absolute because I want it to be

57
00:03:47.760 --> 00:03:49.690
just off to the side of this heading.

58
00:03:50.830 --> 00:03:54.840
I'm going to give it
a display of inline block.

59
00:03:55.850 --> 00:03:59.860
I think with position absolute display
block might be fine, but I'll leave it.

60
00:03:59.860 --> 00:04:04.210
I'm going to say, margin left,
I'm going to give it a negative margin so

61
00:04:04.210 --> 00:04:06.254
that it'll be offset to the left.

62
00:04:06.254 --> 00:04:09.979
And that's something like the style of
where this link gets placed, you might

63
00:04:09.979 --> 00:04:14.400
want to play around with a little bit just
depending on your layout and your design.

64
00:04:14.400 --> 00:04:18.870
I think there is a way to make this
pleasing to people so it doesn't get

65
00:04:18.870 --> 00:04:22.560
turned off, [LAUGH] but you might
need to play around with it a little.

66
00:04:22.560 --> 00:04:25.150
By default,
I'm gonna make this opacity zero.

67
00:04:25.150 --> 00:04:27.330
So our styling that we heard earlier.

68
00:04:27.330 --> 00:04:32.104
That way, this link is rendered,
but when I focus on it,

69
00:04:32.104 --> 00:04:36.580
I'm going to change it so routeSkipLink.

70
00:04:36.580 --> 00:04:40.950
If I focus on it,
I'm also gonna make this work on hover.

71
00:04:40.950 --> 00:04:46.570
So if I say routeSkipLink:hover,
then I can change it to opacity 1.

72
00:04:46.570 --> 00:04:50.670
And so that's, this routeSkipLink
is going to be an anchor.

73
00:04:51.750 --> 00:04:56.740
And what I'm really concerned about is,
I'm gonna add a little icon.

74
00:04:56.740 --> 00:05:00.670
So in this case, it's a skip link,
I'm making a design choice here

75
00:05:00.670 --> 00:05:04.810
to show an arrow, instead of the word,
skip to navigation.

76
00:05:04.810 --> 00:05:08.553
I'm gonna add a label to it,
but this is where it,

77
00:05:08.553 --> 00:05:13.558
you can change it depending on what
your design team or you decide.

78
00:05:13.558 --> 00:05:21.440
So far this, I am going to add a pseudo
element for the before pseudo.

79
00:05:21.440 --> 00:05:24.815
And that's how I'm going
to insert a character and

80
00:05:24.815 --> 00:05:27.886
I don't have the key codes for
an arrow handy.

81
00:05:27.886 --> 00:05:29.660
So I'm just going to add a left caret.

82
00:05:30.810 --> 00:05:33.290
And I'm gonna give this display of block.

83
00:05:33.290 --> 00:05:37.360
So the display block and the content
property of a pseudo element will

84
00:05:37.360 --> 00:05:41.870
get it to show up and
it's a pretty useful tool.

85
00:05:41.870 --> 00:05:46.460
So we got some styling,
I'm gonna go add the component for this.

86
00:05:46.460 --> 00:05:51.210
So I'm gonna call this a RouteHeading,
so in my pages.

87
00:05:51.210 --> 00:05:55.180
And this is where the pages
are gonna start to come into play.

88
00:05:55.180 --> 00:05:57.210
So if I go look at each of these demos,

89
00:05:57.210 --> 00:06:00.970
right now I'm just using a native
heading element and each to.

90
00:06:00.970 --> 00:06:04.510
This is where I could use a custom
component that will insert the skip

91
00:06:04.510 --> 00:06:05.530
link for me.

92
00:06:05.530 --> 00:06:09.010
So that's where I'm gonna consume
this component that I'm writing.

93
00:06:09.010 --> 00:06:11.490
And I'm gonna call it a route heading.

94
00:06:11.490 --> 00:06:15.430
Cuz it's a special kind of heading
that's going to add this skip link and

95
00:06:15.430 --> 00:06:18.310
take focus when the conditions are right.

96
00:06:18.310 --> 00:06:21.430
So to make it super reusable,
I'm going to pass in the level.

97
00:06:21.430 --> 00:06:23.970
Because I don't know where
this is gonna get used.

98
00:06:23.970 --> 00:06:26.310
It might be in H1, it might be in H3.

99
00:06:26.310 --> 00:06:29.700
So I need to make that
heading level configurable.

100
00:06:29.700 --> 00:06:33.720
So I'm going to say level and
just start with one as a default value.

101
00:06:33.720 --> 00:06:39.588
I need to know what skip link target
I want to send that link back to.

102
00:06:39.588 --> 00:06:41.460
So when I land on a skip link,

103
00:06:41.460 --> 00:06:46.380
it's going to take me somewhere with
just a regular internal link in HTML.

104
00:06:46.380 --> 00:06:48.680
And I'm going to pass
through the child elements.

105
00:06:48.680 --> 00:06:51.350
So this is a component wrapper.

106
00:06:51.350 --> 00:06:54.408
If I have other things in my heading,
I want to preserve those.

107
00:06:54.408 --> 00:06:57.437
So I'm going to pass those
through as child props.

108
00:06:57.437 --> 00:07:02.504
And to get this component set up,
I'm going to create

109
00:07:02.504 --> 00:07:08.370
this dynamic heading in here
using these template literals.

110
00:07:08.370 --> 00:07:13.708
And I'm going to create a dynamic
component with a dynamic element name so

111
00:07:13.708 --> 00:07:16.690
I can pass this level in here.

112
00:07:16.690 --> 00:07:19.300
So it's a little bit of magic.

113
00:07:19.300 --> 00:07:24.657
The heading, so it'll turn into H
plus whatever, like H1, H2, H3.

114
00:07:24.657 --> 00:07:29.180
This is just making a more
reusable component here.

115
00:07:29.180 --> 00:07:32.340
And that's all I'm going to do for
some of this setup.

116
00:07:32.340 --> 00:07:35.432
Now I'm going to return
a heading component that we're

117
00:07:35.432 --> 00:07:37.949
creating with the level
that gets passed in.

118
00:07:37.949 --> 00:07:43.067
I'm gonna apply the styles that I set
up about with the CSS property and

119
00:07:43.067 --> 00:07:45.250
just pass the styles object.

120
00:07:45.250 --> 00:07:50.046
I'm gonna give it a class
name of route skip heading

121
00:07:50.046 --> 00:07:53.740
cuz that's what I called this up here.

122
00:07:53.740 --> 00:07:58.220
So to get that heading to be positioned
relative and these are handles that I have

123
00:07:58.220 --> 00:08:02.630
because I'm going to be using this custom
component instead of a raw heading.

124
00:08:03.770 --> 00:08:09.400
It'll still give me an actual HTML
heading but I'm going to work around

125
00:08:09.400 --> 00:08:13.070
some of that stuff.

126
00:08:13.070 --> 00:08:13.750
There we go.

127
00:08:13.750 --> 00:08:15.450
Okay, so inside of this heading,

128
00:08:15.450 --> 00:08:18.940
this is gonna give me that H2
back that I needed to begin with.

129
00:08:18.940 --> 00:08:21.510
This is where my custom
component's gonna come in, and

130
00:08:21.510 --> 00:08:24.160
that target ID that I'm passing in.

131
00:08:24.160 --> 00:08:30.730
So I am going to go find,
I need a template literal here.

132
00:08:30.730 --> 00:08:33.990
So I can add the string
of the hash character.

133
00:08:33.990 --> 00:08:36.750
So that, if you use an internal link and

134
00:08:36.750 --> 00:08:42.300
you match an ID of an element with an HF,
this will create that internal link.

135
00:08:42.300 --> 00:08:46.280
So I can actually link to any element
on a page by matching its ID.

136
00:08:46.280 --> 00:08:47.730
I'm going to use that here for
my skip link.

137
00:08:47.730 --> 00:08:50.840
And then I'm gonna pass in, the target ID.

138
00:08:52.040 --> 00:08:57.013
So this working is going to depend
on me passing in a valid I.D..

139
00:08:57.013 --> 00:09:00.518
And this is where if we end up
solving this at the framework level,

140
00:09:00.518 --> 00:09:04.557
maybe that could be more dynamic,
maybe it could look for nearby content.

141
00:09:04.557 --> 00:09:08.774
See where you came from like, maybe
this could get fancier later on but for

142
00:09:08.774 --> 00:09:13.210
the first version, think of this as
a prototype, I'm just gonna go for it.

143
00:09:13.210 --> 00:09:16.486
So I've got the href,
that will make it focusable, and

144
00:09:16.486 --> 00:09:21.099
it'll give me the skip link action,
which who doesn't love a good skip link?

145
00:09:21.099 --> 00:09:27.649
I'm gonna give this an ID
just to create one.

146
00:09:27.649 --> 00:09:30.253
This is where it could get
more dynamic later on but

147
00:09:30.253 --> 00:09:34.560
the way that these pages render, there's
only gonna be one of these per page.

148
00:09:34.560 --> 00:09:38.420
So having a single idea of skip
link in this case is gonna be fine.

149
00:09:38.420 --> 00:09:43.020
I'm gonna give it a class
name to match the route skip

150
00:09:43.020 --> 00:09:45.960
link CSS that we wrote above.

151
00:09:45.960 --> 00:09:48.450
And then I'm gonna give it an aria label.

152
00:09:48.450 --> 00:09:51.410
So that I'm rendering a little arrow icon.

153
00:09:51.410 --> 00:09:54.036
I need to give it some sort
of an accessible name so

154
00:09:54.036 --> 00:09:57.577
that screen readers when they land on it,
they know what it does.

155
00:09:57.577 --> 00:10:03.068
And this I'm gonna pass in skip two and
again because we're prototyping,

156
00:10:03.068 --> 00:10:08.746
I'm just gonna put in the target ID,
so in this case, it'll be navigation.

157
00:10:08.746 --> 00:10:11.789
I'm just gonna use that cuz I'm
skipping back to navigation.

158
00:10:11.789 --> 00:10:13.924
It's quick and dirty it'll work.

159
00:10:13.924 --> 00:10:16.317
And then inside of the link,

160
00:10:16.317 --> 00:10:23.210
there won't be any contents because
we're using aria label and CSS.

161
00:10:23.210 --> 00:10:25.690
But I do want to pass in the child props.

162
00:10:25.690 --> 00:10:29.850
So if that heading,
say the the H2 that I'm replacing,

163
00:10:29.850 --> 00:10:34.370
like maybe it had a span in it or
something for like styling purposes.

164
00:10:34.370 --> 00:10:37.240
That's where passing the children and
would be important.

165
00:10:37.240 --> 00:10:40.530
And then I'm going to export
default route heading, just so

166
00:10:40.530 --> 00:10:45.270
that I can get this component to
be something I can actually use.

167
00:10:45.270 --> 00:10:46.946
Make it part of my JavaScript bundle.

