WEBVTT

1
00:00:00.150 --> 00:00:01.640
&gt;&gt; Marcy Sutton: So accessibility.

2
00:00:01.640 --> 00:00:05.680
To me, this is all about making
the web more inclusive with and

3
00:00:05.680 --> 00:00:07.680
for people with disabilities.

4
00:00:07.680 --> 00:00:12.824
So including people with disabilities and
our user testing and our design reviews,

5
00:00:12.824 --> 00:00:17.686
working with people so that we're making
the most accessible projects we can.

6
00:00:17.686 --> 00:00:21.495
And, all the time, trying to make
things accessible regardless of whether

7
00:00:21.495 --> 00:00:26.050
we are working with people with
disabilities but that should be your goal.

8
00:00:26.050 --> 00:00:30.750
And a resource that I really like to learn
about how accessibility applies to all of

9
00:00:30.750 --> 00:00:33.730
us is
Microsoft's Inclusive Design Toolkit.

10
00:00:33.730 --> 00:00:36.201
And I have a link in the slides,

11
00:00:36.201 --> 00:00:41.729
it is a PDF download at
bit.ly/microsoft-inclusive-toolkit.

12
00:00:41.729 --> 00:00:45.893
And what I like about this resource is
they have a series of personas that talk

13
00:00:45.893 --> 00:00:50.210
about how accessibility can apply to
someone who has a permanent disability.

14
00:00:50.210 --> 00:00:54.910
Maybe you're blind from birth,
or maybe you break your arm or

15
00:00:54.910 --> 00:00:59.040
you had eye surgery, so more of
a situational or temporary disability.

16
00:00:59.040 --> 00:01:03.880
An inclusive design is the practice
that we're designing for

17
00:01:03.880 --> 00:01:07.550
all of these different scenarios and
personalities and

18
00:01:07.550 --> 00:01:11.000
just all the different ways
of life that humans have.

19
00:01:11.000 --> 00:01:14.250
And so being able to bake that into
our designs and our websites and

20
00:01:14.250 --> 00:01:17.600
our web applications, to me is amazing.

21
00:01:17.600 --> 00:01:20.040
Technology can be a big equalizer.

22
00:01:20.040 --> 00:01:23.340
But unfortunately,
it is not always top of mind.

23
00:01:23.340 --> 00:01:27.440
I hear a lot of people say,
it's not something we're strong at, and

24
00:01:27.440 --> 00:01:28.650
I'm pretty optimistic.

25
00:01:28.650 --> 00:01:32.440
I think we can learn and
we can do better with every commit and

26
00:01:32.440 --> 00:01:35.610
every pull request and
every project that we work on.

27
00:01:35.610 --> 00:01:40.185
So, don't get discouraged, just do it
a little bit as you go along, try and

28
00:01:40.185 --> 00:01:43.420
get better and
we'll make a big difference that way.

29
00:01:45.616 --> 00:01:47.481
&gt;&gt; Marcy Sutton: So
JavaScript applications,

30
00:01:47.481 --> 00:01:51.100
they're everywhere whether we like them or
not.

31
00:01:51.100 --> 00:01:54.395
So, some key aspects of JavaScript
applications are that they're

32
00:01:54.395 --> 00:01:55.690
client-rendered.

33
00:01:55.690 --> 00:02:00.590
So, where the application is taking over
from the browser in a lot of cases, so

34
00:02:00.590 --> 00:02:02.560
that there is no traditional page reload.

35
00:02:03.720 --> 00:02:07.900
That means JavaScript handling a lot of
routing, doing a lot of interactions.

36
00:02:07.900 --> 00:02:10.556
If you think of Facebook,
if you click a like button,

37
00:02:10.556 --> 00:02:12.394
it doesn't refresh the whole page.

38
00:02:12.394 --> 00:02:15.793
And users have come to expect
that sort of interaction.

39
00:02:15.793 --> 00:02:18.310
And that's really common with
JavaScript applications.

40
00:02:18.310 --> 00:02:20.600
And there's accessibility
implications with that.

41
00:02:21.840 --> 00:02:24.991
A lot of these apps are built with
frameworks like React, Vue, Ember,

42
00:02:24.991 --> 00:02:25.671
Angular.

43
00:02:26.910 --> 00:02:29.460
They're sometimes rendered
on the server as well.

44
00:02:29.460 --> 00:02:33.240
There might be a server rendering
component that we call hydration.

45
00:02:33.240 --> 00:02:36.580
What that means is that you
have an application that

46
00:02:36.580 --> 00:02:38.810
you can render without JavaScript on.

47
00:02:38.810 --> 00:02:42.704
And then when JavaScript is available and
the scripts download,

48
00:02:42.704 --> 00:02:46.472
it will actually hydrate your
app into a full web application.

49
00:02:46.472 --> 00:02:50.560
And that's what Gatsby does, and
we'll look a little bit at that later on.

50
00:02:50.560 --> 00:02:55.320
But I think of JavaScript applications as
being both challenges and opportunities.

51
00:02:55.320 --> 00:02:58.056
There's plenty of challenges,
but there's also opportunity.

52
00:02:58.056 --> 00:03:02.280
So, we're gonna focus on the opportunities
today, and a lot of the mechanics and

53
00:03:02.280 --> 00:03:07.020
some of the basic patterns that you should
be considering in your web applications.

54
00:03:07.020 --> 00:03:09.640
We definitely can't get to all of it and
we could go much,

55
00:03:09.640 --> 00:03:12.100
much deeper into a lot of these patterns.

56
00:03:12.100 --> 00:03:15.978
But I wanna show you the concepts that
you need to know if you're building

57
00:03:15.978 --> 00:03:17.961
an application for accessibility.

58
00:03:19.388 --> 00:03:22.060
&gt;&gt; Marcy Sutton: So here's what
we're gonna cover in this course.

59
00:03:22.060 --> 00:03:25.090
We'll start with accessibility
debugging to set you up for

60
00:03:25.090 --> 00:03:27.910
the rest of the things that
we'll do during the day.

61
00:03:27.910 --> 00:03:32.484
We'll get into accessibility in JavaScript
applications, and the big parts of that

62
00:03:32.484 --> 00:03:36.882
that I'm covering are focused management,
announcements for screen readers.

63
00:03:36.882 --> 00:03:42.677
Semantic HTML, unobtrusive motion and
animation, progressive enhancement.

64
00:03:42.677 --> 00:03:45.857
And then we'll do a bit of automated
testing later on with unit tests and

65
00:03:45.857 --> 00:03:46.812
integration tests.

66
00:03:46.812 --> 00:03:49.236
So that if you're doing all this work for
accessibility,

67
00:03:49.236 --> 00:03:51.850
you can ensure that it's
baked in your application.

68
00:03:51.850 --> 00:03:54.050
And, either a co-worker won't break it or

69
00:03:54.050 --> 00:03:57.480
you won't break it in case you
forgot how that feature worked.

70
00:03:57.480 --> 00:04:00.800
It's a bit of a contract that you
can build in your applications, and

71
00:04:00.800 --> 00:04:03.090
accessibility has a big part of that.

72
00:04:03.090 --> 00:04:06.620
And then we'll do some Q&amp;A I think
throughout but then especially at the end

