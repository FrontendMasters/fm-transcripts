WEBVTT

1
00:00:00.170 --> 00:00:02.410
&gt;&gt; Marcy Sutton: Okay,
so visible focus styles.

2
00:00:02.410 --> 00:00:06.750
Really useful for a lot of people, but
they're often turned off for everyone.

3
00:00:06.750 --> 00:00:09.920
The outline none or outline zero just for

4
00:00:09.920 --> 00:00:14.500
every focus in CSS,
we should really avoid.

5
00:00:14.500 --> 00:00:16.995
Instead, styling the hover and

6
00:00:16.995 --> 00:00:22.090
focus state to actually have
a visible focus style is fantastic.

7
00:00:22.090 --> 00:00:26.745
And it's worth mentioning as well,
that a lot of times that

8
00:00:26.745 --> 00:00:31.950
desire to suppress the outline
is coming from mouse users.

9
00:00:31.950 --> 00:00:37.040
And I would love it if this wasn't
the case, but when we are trying to please

10
00:00:37.040 --> 00:00:41.110
a lot people with a single interphase,
it's a really hard line to walk.

11
00:00:41.110 --> 00:00:46.770
So I am a big fan of tools like
focus visible, which is a proposed

12
00:00:46.770 --> 00:00:52.140
CSS selector that has a polyfill that
you can use, so you can use it now.

13
00:00:52.140 --> 00:00:56.770
And the way that it works is it's
really similar to CSS focus.

14
00:00:56.770 --> 00:00:58.660
But it uses some heuristics,

15
00:00:58.660 --> 00:01:03.000
like some additional information about how
the user is navigating through the page.

16
00:01:03.000 --> 00:01:04.460
Are they using their mouse?

17
00:01:04.460 --> 00:01:06.730
Are they using a keyboard or
a touch device?

18
00:01:06.730 --> 00:01:11.045
So this would be a web
standards based CSS selector

19
00:01:11.045 --> 00:01:15.485
that we can use to style for the mouse and
keyboard users a little differently.

20
00:01:16.585 --> 00:01:20.915
There is a JavaScript version of
the same idea called what input,

21
00:01:20.915 --> 00:01:22.475
that's a script that you can pull in.

22
00:01:24.855 --> 00:01:28.355
In focus visible polyfill case,
you just import the polyfill and

23
00:01:28.355 --> 00:01:30.100
then you can use the CSS.

24
00:01:30.100 --> 00:01:34.750
What inputs really similar, you import
the script in JavaScript somewhere and

25
00:01:34.750 --> 00:01:39.550
then in your CSS, you write these data,
what intent selectors.

26
00:01:39.550 --> 00:01:41.280
And when that script is loaded,

27
00:01:41.280 --> 00:01:44.590
you can actually change how
the styles are working.

28
00:01:44.590 --> 00:01:49.020
So mouse users, if they don't want focus,
we can suppress it.

29
00:01:49.020 --> 00:01:51.950
So these are tools to give us some more

30
00:01:51.950 --> 00:01:55.770
like hooks to style based on
how people's preferences are.

31
00:01:55.770 --> 00:01:59.960
But what I think would be the best
outcome, is if we had an operating system

32
00:01:59.960 --> 00:02:04.910
level preference that the user could say,
I want focus outlines all the time,

33
00:02:04.910 --> 00:02:08.920
just because it's really difficult
to please everyone with this.

34
00:02:08.920 --> 00:02:13.310
But if you're working with focus and
wanting to enable it a lot more,

35
00:02:13.310 --> 00:02:17.000
you might end up reaching for
tools like these just to make sure.

36
00:02:17.000 --> 00:02:18.730
Then you can add focus for

37
00:02:18.730 --> 00:02:24.050
things like, I'm scripting focus around
the application and I want to show it.

38
00:02:24.050 --> 00:02:26.840
So you know where you are when
I've moved your focus.

39
00:02:26.840 --> 00:02:28.430
Tools like this are really helpful for
that.

