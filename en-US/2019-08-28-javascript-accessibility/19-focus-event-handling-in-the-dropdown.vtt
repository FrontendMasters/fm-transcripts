WEBVTT

1
00:00:00.040 --> 00:00:02.890
&gt;&gt; Marcy Sutton: So,
our list is starting to look pretty good.

2
00:00:02.890 --> 00:00:06.790
I've got some relationships between
the button and the drop down.

3
00:00:08.430 --> 00:00:11.950
The mechanics of what I want to happen
are, when I click on this button,

4
00:00:11.950 --> 00:00:16.240
I want to change the state so that it
will toggle, it being open and closed.

5
00:00:16.240 --> 00:00:19.930
Because I could click the same button and
it should just open and close.

6
00:00:19.930 --> 00:00:24.380
When I open it, I want to send focus
to the first item in the drop down.

7
00:00:24.380 --> 00:00:28.910
Maybe there, I mean, theoretically, I've
seen especially in angular applications

8
00:00:28.910 --> 00:00:33.780
where maybe the button and the list are in
completely different parts of the DOM.

9
00:00:33.780 --> 00:00:37.970
And that's why it's important to send
focus to that drop down when it opens

10
00:00:39.110 --> 00:00:41.270
because you need to get
the user into the right spot.

11
00:00:42.300 --> 00:00:50.355
So, the click handler, I am going to call
this set IsOpen, I get my casing right.

12
00:00:50.355 --> 00:00:54.913
Set IsOpen and
just going to toggle IsOpen.

13
00:00:54.913 --> 00:00:59.068
And that should at least
bind the click part of this.

14
00:00:59.068 --> 00:01:05.800
The drop down list is what I'm going
to toggle the state, based on.

15
00:01:05.800 --> 00:01:08.570
So, I added a string for this className,

16
00:01:08.570 --> 00:01:13.200
I'm actually going to change it
to take some arguments here.

17
00:01:13.200 --> 00:01:18.830
So className, if I wrap this in
curly braces and add this Tilda

18
00:01:18.830 --> 00:01:22.710
character to start a template literal,
that's what that's called in JavaScript.

19
00:01:22.710 --> 00:01:27.200
Then I can add a string and
I can also add some dynamic stuff in here.

20
00:01:27.200 --> 00:01:31.210
So if I add dollar sign, curly braces,
I've kind of escaped out of the string and

21
00:01:31.210 --> 00:01:32.710
I can put logic in here.

22
00:01:32.710 --> 00:01:37.600
This is where this whole mechanics
of react in adding these attributes,

23
00:01:37.600 --> 00:01:39.580
that's why I like it so much.

24
00:01:39.580 --> 00:01:41.710
So I've got drop down list.

25
00:01:41.710 --> 00:01:47.110
I want to say if it's open, I'm gonna add,

26
00:01:47.110 --> 00:01:53.000
if the state variable is open,
I'm gonna add a class called active.

27
00:01:53.000 --> 00:01:55.760
And if it's not,
this is a ternary operator here so

28
00:01:55.760 --> 00:01:59.360
I can in line have like a NFL conditional.

29
00:01:59.360 --> 00:02:02.060
If it's not being toggled to be open,

30
00:02:02.060 --> 00:02:07.520
I'm gonna pass it an empty string, because
I don't want it to add a CSS class.

31
00:02:07.520 --> 00:02:12.570
So if I save that and I go back to
the browser, I can click it, so

32
00:02:12.570 --> 00:02:16.440
I've got this most basic behavior and
this is where most people stop.

33
00:02:17.520 --> 00:02:22.130
Sadly, like getting a button element
to toggle would be a huge win.

34
00:02:23.420 --> 00:02:27.330
I can at least do that, but
I'm not sending focus into the items.

35
00:02:27.330 --> 00:02:32.280
This is pretty good if the list
is right next to the button.

36
00:02:32.280 --> 00:02:34.950
So in that case like that's pretty good,
but

37
00:02:34.950 --> 00:02:41.060
I think I can do a little better by
forwarding you to this first item.

38
00:02:41.060 --> 00:02:45.520
And then the Escape key,
I wanna bind to close it.

39
00:02:45.520 --> 00:02:49.340
It's also debatable whether you wanna
use a focus trap here to trap focus.

40
00:02:49.340 --> 00:02:50.640
That's what GitHub did.

41
00:02:50.640 --> 00:02:54.290
We're not gonna go that far but
that's a decision that you could make,

42
00:02:54.290 --> 00:02:58.920
whether you want to make the user make
a choice before they can move on.

43
00:02:58.920 --> 00:02:59.940
It's sort of subjective.

44
00:02:59.940 --> 00:03:01.520
So let's go back here.

45
00:03:01.520 --> 00:03:04.680
And I'm gonna add an escape key listener.

46
00:03:04.680 --> 00:03:07.650
So let's do onKeyUp.

47
00:03:07.650 --> 00:03:13.300
Take your advice, Amy, and
we will add another function here.

48
00:03:13.300 --> 00:03:17.949
So let's do,
&gt;&gt; Marcy Sutton: I'm going to call it key

49
00:03:17.949 --> 00:03:22.130
handler, because the the handler
function doesn't.

50
00:03:22.130 --> 00:03:22.980
It's just a function.

51
00:03:22.980 --> 00:03:26.890
It'll be called no matter what he you hit.

52
00:03:26.890 --> 00:03:31.385
And so I'm going to go add that
right here with const keyHandler.

53
00:03:31.385 --> 00:03:35.105
I'm gonna add it in
the event argument here, so

54
00:03:35.105 --> 00:03:39.970
that I can get a handle on what
key did you actually press.

55
00:03:39.970 --> 00:03:45.190
And something I do a lot here is
I'll do console log event.key code.

56
00:03:45.190 --> 00:03:49.030
I think there's event.key,
there's different things that you can do.

57
00:03:49.030 --> 00:03:53.850
And when we get into the automated testing
section, this will become more important.

58
00:03:53.850 --> 00:03:59.670
But I'm just going to do event.key code,
so that way when I work on this and

59
00:03:59.670 --> 00:04:06.676
I open the developer tools, and
I get over to, let's go back.

60
00:04:06.676 --> 00:04:10.460
The skip link to get to the main
content is pretty useful.

61
00:04:10.460 --> 00:04:13.170
So if I hit the Escape key, that's 27.

62
00:04:13.170 --> 00:04:18.730
If I hit Enter, that's 13, but the escape
one is the one that we really want.

63
00:04:18.730 --> 00:04:21.978
So I'm gonna go back over here and say,

64
00:04:21.978 --> 00:04:27.910
if event.key code is 27
with the triple equals,

65
00:04:27.910 --> 00:04:32.650
then I can start and do,
I can do things to handle the Escape key.

66
00:04:35.060 --> 00:04:39.560
Let's say we could,
I'm gonna add one more thing here.

67
00:04:39.560 --> 00:04:43.680
If it is open, then I wanna close it.

68
00:04:43.680 --> 00:04:45.960
That's that's when
the Escape key's relevant.

69
00:04:45.960 --> 00:04:50.440
I don't want Escape to be the toggle, just
because that's not really a convention.

70
00:04:50.440 --> 00:04:57.850
So I could do setIsOpen to false,
just tell it, all right, you're done.

71
00:04:57.850 --> 00:05:01.820
&gt;&gt; Speaker 2: Key code is actually
deprecated so you should use key.

72
00:05:01.820 --> 00:05:02.720
&gt;&gt; Marcy Sutton: Key, okay.

73
00:05:02.720 --> 00:05:03.480
&gt;&gt; Speaker 2: Apparently.

74
00:05:03.480 --> 00:05:04.050
&gt;&gt; Marcy Sutton: Thank you.

75
00:05:04.050 --> 00:05:07.090
So that's where I've just been
doing the thing for so long.

76
00:05:07.090 --> 00:05:12.052
So let's do event.key and
let's go log that and see.

77
00:05:12.052 --> 00:05:15.567
I think I would have had to change that
eventually anyway because that doesn't

78
00:05:15.567 --> 00:05:16.908
work for automated testing.

79
00:05:16.908 --> 00:05:18.592
But old habits die hard.

80
00:05:18.592 --> 00:05:20.350
[LAUGH] So let's go.

81
00:05:20.350 --> 00:05:23.870
The nice thing I've got Gatsby Develop
running, so it hot reloaded the page and

82
00:05:23.870 --> 00:05:26.760
now I should be able to just hit escape.

83
00:05:26.760 --> 00:05:31.900
So key is the string name of the key,
not the key code.

84
00:05:31.900 --> 00:05:37.370
I think there's another, I think it's
event.code maybe for the key code.

85
00:05:37.370 --> 00:05:44.172
So in here, we can just say,
event.key equals escape.

86
00:05:44.172 --> 00:05:49.734
Event.code might be
a little bit more reliable.

87
00:05:49.734 --> 00:05:52.390
Just keep that,
I think that should be the same.

88
00:05:52.390 --> 00:05:57.370
So, now if I hit escape it has
matched my keyword interaction

89
00:05:57.370 --> 00:06:01.030
with the code to handle it and I can
tell it to do things like change state.

90
00:06:02.110 --> 00:06:05.420
So, now we've got the escape
key part working.

91
00:06:05.420 --> 00:06:13.150
The last thing to, before we break will
be to add that focus into the first item.

92
00:06:13.150 --> 00:06:15.900
So I've got a ref on the list.

93
00:06:15.900 --> 00:06:18.550
And this is again a bit
of a subjective thing, so

94
00:06:18.550 --> 00:06:23.090
one thing I could do here would be
to add a tab index of negative one.

95
00:06:23.090 --> 00:06:26.350
That would make this
list itself focusible.

96
00:06:26.350 --> 00:06:28.160
But I found through user testing and

97
00:06:28.160 --> 00:06:32.910
research, that sending focus to rapper
elements is actually not the best.

98
00:06:32.910 --> 00:06:36.890
It's better to send focus to
the first interactive thing,

99
00:06:36.890 --> 00:06:40.100
because then you could hit Enter,
you'd be there in the right spot.

100
00:06:40.100 --> 00:06:44.230
If a user is zoomed way in and
their focus outline is cut off,

101
00:06:44.230 --> 00:06:45.730
it's kind of confusing.

102
00:06:45.730 --> 00:06:50.380
So for that reason, I'm actually not
going to send focus to that list item.

103
00:06:50.380 --> 00:06:55.960
But where this gets a little tricky is
that our first list item is dynamic,

104
00:06:55.960 --> 00:07:00.070
and so there's probably multiple ways
that you could work around this.

105
00:07:00.070 --> 00:07:06.290
For my prototype here, I'm just going to
go find that, so I know the general area.

106
00:07:06.290 --> 00:07:11.880
I know that this drop down list is like
the rapper element, and I am admittedly

107
00:07:11.880 --> 00:07:15.570
going to go hack at this because
sometimes that's what you need to do.

108
00:07:15.570 --> 00:07:19.760
We need actually do a little bit more
set up to be able to interact with this

109
00:07:21.600 --> 00:07:22.380
the way that we want.

110
00:07:22.380 --> 00:07:26.310
So I'm gonna use another react
thing here called useEffect.

111
00:07:26.310 --> 00:07:31.210
This is another react hook that
I can pass a callback function.

112
00:07:31.210 --> 00:07:35.640
I'm going to make it
toggle on this isOpen.

113
00:07:35.640 --> 00:07:40.400
So you can pass it any state
variable that you're watching.

114
00:07:40.400 --> 00:07:44.480
You can also pass it an empty string or
sorry, an empty array and

115
00:07:44.480 --> 00:07:47.330
it will fire once when
the component loads.

116
00:07:47.330 --> 00:07:50.820
So in this stateless functional component,
that's really useful, but

117
00:07:50.820 --> 00:07:54.440
I'm actually going to watch it
based on whether it's open.

118
00:07:54.440 --> 00:07:56.210
And I can add a conditional here.

119
00:07:56.210 --> 00:08:01.180
So if it is open, and
I think in the hook I want,

120
00:08:01.180 --> 00:08:04.580
it's just going to pass this in,
I don't need to pass it again.

121
00:08:04.580 --> 00:08:07.850
So if it's open, then I'm gonna do stuff.

122
00:08:07.850 --> 00:08:11.270
If it's not open,
I'm gonna do other stuff.

123
00:08:11.270 --> 00:08:16.500
And something I haven't really talked
about yet is another convention, is when

124
00:08:16.500 --> 00:08:21.050
you open a drop down list, you kind of
expect to click outside of it and close.

125
00:08:21.050 --> 00:08:23.930
So we can do that in this
useEffect hook as well.

126
00:08:23.930 --> 00:08:27.340
So in this isOpen,
I'm gonna handle the focus first.

127
00:08:27.340 --> 00:08:30.920
So I've got drop down list ref.

128
00:08:30.920 --> 00:08:36.250
So when you have a ref, the EPI is to do
the ref that you've defined that current.

129
00:08:36.250 --> 00:08:39.760
And that will get you the actual
element that you can focus on.

130
00:08:39.760 --> 00:08:41.970
So if I were focusing on the list itself,

131
00:08:41.970 --> 00:08:44.951
I could say drop down
list ref.current.focus.

132
00:08:44.951 --> 00:08:50.510
In this case, current get's me the actual
down element, little trick I found.

133
00:08:50.510 --> 00:08:53.720
So I'm just gonna say, query selector.

134
00:08:53.720 --> 00:08:56.960
And I don't care if this is dirty,
I'm just doing it.

135
00:08:56.960 --> 00:08:59.670
I can get that first link in the list.

136
00:08:59.670 --> 00:09:04.780
And sometimes that's what you need because
the list or the link inside of there if

137
00:09:04.780 --> 00:09:08.770
I don't have control over that, but that's
where I want to send focus, that'll do it.

138
00:09:08.770 --> 00:09:13.790
So let's go look at that and
see how that worked.

139
00:09:13.790 --> 00:09:16.030
So that sent my focus into the first item.

140
00:09:16.030 --> 00:09:20.970
I don't have any CSS animation
here that I would need a delay,

141
00:09:20.970 --> 00:09:25.100
but the useEffect hook I found is
a really great way to work around

142
00:09:25.100 --> 00:09:29.480
animation that could delay that
being available to focus on.

143
00:09:29.480 --> 00:09:33.350
So another reason to use reactHooks.

144
00:09:33.350 --> 00:09:36.900
So the last thing we'll do is to bind

145
00:09:36.900 --> 00:09:39.820
up the functionality to close
it when you click outside.

146
00:09:40.940 --> 00:09:45.990
So to do that, when it's open,

147
00:09:45.990 --> 00:09:51.270
I'm gonna bind just a native
JavaScript function,

148
00:09:51.270 --> 00:09:53.060
which sometimes you have to do as well.

149
00:09:53.060 --> 00:09:54.890
It feels a little gross but
I'm just gonna do it.

150
00:09:54.890 --> 00:09:58.220
So outside of the scope
of my react application,

151
00:09:59.480 --> 00:10:02.860
you can just use vanilla JavaScript,
so that's what we're gonna do.

152
00:10:02.860 --> 00:10:06.720
I'm gonna say document.addEventListener
if it's open.

153
00:10:06.720 --> 00:10:09.960
And that's where I'm gonna
bind this mouse down.

154
00:10:11.440 --> 00:10:16.130
And I'm gonna give it
a clickOutsideHandler that I'll define in

155
00:10:16.130 --> 00:10:16.700
a second.

156
00:10:16.700 --> 00:10:22.310
And when I change, like if this
isOpen state variable changes and

157
00:10:22.310 --> 00:10:26.060
it's not open anymore,
I want to prevent a memory leak.

158
00:10:26.060 --> 00:10:30.420
So I'm going to go remove that event
listener, because react isn't gonna

159
00:10:30.420 --> 00:10:33.750
clean up these events for me, so
I have to manage that myself.

160
00:10:33.750 --> 00:10:37.420
Otherwise, so these are native
events here in JavaScript.

161
00:10:37.420 --> 00:10:40.270
React is using what's called
synthetic event otherwise, and

162
00:10:40.270 --> 00:10:43.970
this is something that you end
up playing around with a lot,

163
00:10:43.970 --> 00:10:48.080
because React has a virtual dome and
they are managing events for

164
00:10:48.080 --> 00:10:51.280
you so you don't have to worry
as much about memory leaks.

165
00:10:51.280 --> 00:10:53.490
But once you start doing
these funky things,

166
00:10:53.490 --> 00:10:58.410
kind of mixing native JavaScript in there,
you do have to worry about memory leaks.

167
00:10:58.410 --> 00:11:01.070
And those can cause issues.

168
00:11:01.070 --> 00:11:05.950
So let's go define this
clickoutsideHandler.

169
00:11:05.950 --> 00:11:08.430
I'm going to give it an event.

170
00:11:10.370 --> 00:11:13.470
Whether or not I need it,
I think I actually do in this case.

171
00:11:13.470 --> 00:11:16.719
So if I'm clicking outside of

172
00:11:18.100 --> 00:11:22.860
the component that I know about,
like I can ask it, like am I clicking, and

173
00:11:22.860 --> 00:11:27.880
is the event target matching anything
that I know about in this component.

174
00:11:27.880 --> 00:11:33.116
And if it doesn't,
that's when I'm gonna close.

175
00:11:33.116 --> 00:11:38.560
So if, and the thing we're gonna
work with here is event.target,

176
00:11:38.560 --> 00:11:42.520
this event object from JavaScript
is magical because it will tell you

177
00:11:42.520 --> 00:11:46.960
what element you clicked on,
what element you're dealing with here.

178
00:11:48.490 --> 00:11:53.650
So if I say dropdownListRef, if that

179
00:11:53.650 --> 00:12:01.570
element contains event.target, so
that's one use case, the actual.

180
00:12:01.570 --> 00:12:05.860
So if I click anywhere
outside of this list or

181
00:12:05.860 --> 00:12:09.650
the toggle button, so both of those
because they're separate elements,

182
00:12:09.650 --> 00:12:12.710
like if I click out here somewhere,
that's when I want this to match.

183
00:12:12.710 --> 00:12:14.990
So I'm gonna do both cases.

184
00:12:14.990 --> 00:12:20.690
I'm going to do activator and
I'm gonna wrap my code here.

185
00:12:20.690 --> 00:12:25.550
ActivatorRef.current.contains
event.target.

186
00:12:25.550 --> 00:12:29.990
If it's either one of those,
I'm just going to say, all right,

187
00:12:29.990 --> 00:12:31.530
skip it, don't do anything.

188
00:12:31.530 --> 00:12:35.220
Just return and
that will just like pass over these.

189
00:12:35.220 --> 00:12:36.660
Leave it like just drop the event.

190
00:12:36.660 --> 00:12:38.010
Don't do anything.

191
00:12:38.010 --> 00:12:44.950
But otherwise, I'm gonna say,
set is open to false and close it.

192
00:12:46.346 --> 00:12:50.030
So my useEffect, I can do two things,
handle focus when it opens or

193
00:12:50.030 --> 00:12:51.430
when a state thing changes.

194
00:12:51.430 --> 00:12:54.490
I can also do these kind of hacky events.

195
00:12:54.490 --> 00:12:55.800
Okay, what did I miss?

196
00:12:55.800 --> 00:12:59.700
I missed part of this function.

197
00:12:59.700 --> 00:13:03.790
So the arrow function is
replacing the word function, and

198
00:13:03.790 --> 00:13:06.180
it's pretty awesome for events.

199
00:13:06.180 --> 00:13:08.810
Okay, so now if I click anywhere out here,

200
00:13:10.410 --> 00:13:13.880
I can close it and
I can hit the Escape key.

201
00:13:13.880 --> 00:13:18.100
So you will notice my focus
outline is suppressed, and

202
00:13:18.100 --> 00:13:20.210
we talked about focus visible earlier.

203
00:13:20.210 --> 00:13:21.860
That's something I actually have in here.

204
00:13:21.860 --> 00:13:26.220
So if I use the mouse,
I don't see a focus outline.

205
00:13:26.220 --> 00:13:30.920
As soon as I use the keyboard again,
it will show the focus outline.

206
00:13:30.920 --> 00:13:36.900
So it's reacting to the users
what we call input modality.

207
00:13:36.900 --> 00:13:40.155
So yeah, that is our drop down component.

