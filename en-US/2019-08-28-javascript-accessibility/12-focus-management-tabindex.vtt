WEBVTT

1
00:00:00.140 --> 00:00:04.876
&gt;&gt; Marcy: Okay, so now it is time finally
we can move on to Intro to Accessibility

2
00:00:04.876 --> 00:00:06.982
in JavaScript Applications.

3
00:00:06.982 --> 00:00:09.450
it's what you've all
come here to learn about.

4
00:00:09.450 --> 00:00:11.960
But we needed to focus on debugging first.

5
00:00:11.960 --> 00:00:15.250
So that way when you're working
on things like focus management,

6
00:00:15.250 --> 00:00:19.670
live region announcements,
semantic HTML, unobtrusive motion and

7
00:00:19.670 --> 00:00:22.220
animation and progressive enhancement.

8
00:00:22.220 --> 00:00:28.250
That you have the tools to test the things
that you're working on focus management.

9
00:00:28.250 --> 00:00:29.770
This is a really big one,

10
00:00:29.770 --> 00:00:33.930
because of the way that JavaScript
applications are rendered on the client.

11
00:00:33.930 --> 00:00:38.460
So they're rendered with JavaScript
taking over the browser's history.

12
00:00:38.460 --> 00:00:43.110
And we need to move the users focus
as part of the interactions through

13
00:00:43.110 --> 00:00:44.280
the application.

14
00:00:44.280 --> 00:00:46.080
So that they're alerted to content.

15
00:00:47.400 --> 00:00:51.170
So that keyboard users are in
the right place in the application so

16
00:00:51.170 --> 00:00:53.350
that they're not behind a modal window.

17
00:00:53.350 --> 00:00:57.654
They're not stuck in some other part of
the web application that isn't active

18
00:00:57.654 --> 00:00:58.240
anymore.

19
00:00:58.240 --> 00:01:00.660
And we also need to announce,

20
00:01:00.660 --> 00:01:04.180
by moving focus that will announce
things in a screen reader.

21
00:01:04.180 --> 00:01:06.770
So it's kind of a two fold interaction.

22
00:01:06.770 --> 00:01:09.820
We're getting keyboard
users into the right place.

23
00:01:09.820 --> 00:01:14.430
We're also, by doing that often making
an announcement in a screen reader just by

24
00:01:14.430 --> 00:01:15.540
sending focus there.

25
00:01:16.820 --> 00:01:19.310
So yeah, it's a really big
topic in applications and

26
00:01:19.310 --> 00:01:23.980
some of the building blocks of this
are using reachable and operable elements.

27
00:01:23.980 --> 00:01:26.371
So making sure that you
can focus on things.

28
00:01:26.371 --> 00:01:29.723
Like we saw that slack drop down menu,
it wasn't reachable, so

29
00:01:29.723 --> 00:01:32.720
we couldn't even begin to
talk about focus management.

30
00:01:33.980 --> 00:01:37.470
You should be able to use the tab
key to reach this elements.

31
00:01:37.470 --> 00:01:39.950
So making them focusable by default.

32
00:01:39.950 --> 00:01:42.220
Often when we're opening
this interactive layers,

33
00:01:42.220 --> 00:01:46.260
a convention is to hit the escape key and
send you back where you came from.

34
00:01:46.260 --> 00:01:50.870
So that's often the case with models
that you can go back to get out of,

35
00:01:50.870 --> 00:01:53.560
if they're not forcing
you to make a decision.

36
00:01:53.560 --> 00:01:59.927
We also commonly use the arrow keys for
things like tab switchers and menus.

37
00:01:59.927 --> 00:02:03.575
Depending on how they're coded
having the arrow keys means that you

38
00:02:03.575 --> 00:02:07.863
could have one focusable control and the
arrow keys will move you around instead

39
00:02:07.863 --> 00:02:11.850
of having to hit tab a million times
to get through an interactive widget.

40
00:02:13.070 --> 00:02:16.020
A big part of this as well
as visible focus styles.

41
00:02:16.020 --> 00:02:19.506
And my own opinion of this
has evolved since I started.

42
00:02:19.506 --> 00:02:22.619
I used to feel that sending
focus around dynamically,

43
00:02:22.619 --> 00:02:26.460
that suppressing the visible
focus style was an important.

44
00:02:26.460 --> 00:02:30.120
However, once I got into user testing
with people with disabilities and

45
00:02:30.120 --> 00:02:36.210
I saw how a visible focus style can be
a game changer for using an interface.

46
00:02:36.210 --> 00:02:40.140
I think it is a really important aspect
of when we're scripting focus around

47
00:02:40.140 --> 00:02:41.300
like this.

48
00:02:41.300 --> 00:02:45.690
And then lastly, we talked about CSS and
and hidden content, and

49
00:02:45.690 --> 00:02:47.640
background layers is a big part of this.

50
00:02:47.640 --> 00:02:51.420
So we want to make sure that if
we open a layer on the screen

51
00:02:51.420 --> 00:02:53.360
that we're actually
disabling the background.

52
00:02:53.360 --> 00:02:55.050
Because that is something I see a lot.

53
00:02:55.050 --> 00:02:57.110
Especially with mobile dialogues and

54
00:02:57.110 --> 00:03:01.310
I'll show you a little demo example
that we get stuck back there.

55
00:03:01.310 --> 00:03:03.924
And if we aren't sending
focus in to the new content,

56
00:03:03.924 --> 00:03:07.192
It can just be really hard for
a user to figure out what's going on.

57
00:03:09.097 --> 00:03:12.783
&gt;&gt; Marcy: So the building block
that we're gonna start with,

58
00:03:12.783 --> 00:03:17.240
with focus management is tabindex and
it gets used and abused.

59
00:03:17.240 --> 00:03:20.610
So let's try and clear up some of
the confusion around tabindex.

60
00:03:20.610 --> 00:03:24.940
It's an HTML attribute that
makes elements focusable or not.

61
00:03:24.940 --> 00:03:26.570
If you use zero,

62
00:03:26.570 --> 00:03:31.290
it will make it focusable in the order
in the DOM that it's included.

63
00:03:31.290 --> 00:03:35.743
You can use tabindex of negative one
to remove something from the tab order.

64
00:03:35.743 --> 00:03:39.355
If it's a button or a link or something
that's focused a little by default,

65
00:03:39.355 --> 00:03:43.510
you can use tab index of negative
one to remove it from the tab order.

66
00:03:43.510 --> 00:03:46.240
You can also put that
on something like a div

67
00:03:46.240 --> 00:03:48.740
if you are gonna use JavaScript
to send focus to it.

68
00:03:48.740 --> 00:03:54.623
It would allow that on it to catch the
focus and we'd see some examples of that.

69
00:03:54.623 --> 00:03:58.279
And then tabindex you can also
put positive interger values.

70
00:03:58.279 --> 00:04:02.425
And AXE the browser extension was
warning us, about a tab index of one,

71
00:04:02.425 --> 00:04:04.920
I believe it was on the GitHub site.

72
00:04:04.920 --> 00:04:08.750
And that's because when you
put things in an order,

73
00:04:08.750 --> 00:04:12.750
then you have to manage the entire
page order and it's a huge pain.

74
00:04:12.750 --> 00:04:17.050
So let's click on this Demo Div and
start playing with tabindex in here.

75
00:04:17.050 --> 00:04:18.520
So this is just a div.

76
00:04:18.520 --> 00:04:20.650
It's styled to look like a button.

77
00:04:20.650 --> 00:04:23.230
I mean, probably I've seen that before.

78
00:04:23.230 --> 00:04:29.870
So this div, I'm gonna go and
add an attribute in the dev tools.

79
00:04:29.870 --> 00:04:33.650
So I can do tabindex of zero,
and hit Enter.

80
00:04:33.650 --> 00:04:37.190
And now I can actually reach this element.

81
00:04:39.190 --> 00:04:42.530
I can change it to negative one.

82
00:04:42.530 --> 00:04:44.230
i can't reach it again.

83
00:04:44.230 --> 00:04:45.630
It's sort of like the plane div.

84
00:04:45.630 --> 00:04:50.850
But if I click on it,
it will allow me to focus it.

85
00:04:50.850 --> 00:04:55.568
So it's got, let's see,
there's an outline.

86
00:04:55.568 --> 00:04:56.900
A rapper element.

87
00:04:56.900 --> 00:04:59.880
I'm gonna go back to this
element by clicking on it.

88
00:04:59.880 --> 00:05:01.980
And my tabindex was removed.

89
00:05:01.980 --> 00:05:02.690
That's what happened.

90
00:05:04.020 --> 00:05:05.700
Tabindex negative one.

91
00:05:06.820 --> 00:05:09.590
So now I am using a tool.

92
00:05:09.590 --> 00:05:10.780
Tell you about a little later, so

93
00:05:10.780 --> 00:05:13.560
we're not seeing the focus
outline when I click on it.

94
00:05:13.560 --> 00:05:16.140
But my focus is there
because if I hit tab again

95
00:05:16.140 --> 00:05:18.450
I'm in the next element in the tab order.

96
00:05:18.450 --> 00:05:25.469
If I add tabindex of one, so taking it
out of the order it was naturally in.

97
00:05:25.469 --> 00:05:29.664
It will now, I think it's actually
at the beginning of the page.

98
00:05:29.664 --> 00:05:31.680
Yeah, so it's coming first.

99
00:05:31.680 --> 00:05:34.656
So if you use any positive
tab index values,

100
00:05:34.656 --> 00:05:38.689
they will come before everything
in the natural tab order.

101
00:05:38.689 --> 00:05:43.030
Which if it's something in your footer,
you probably don't want to come first.

102
00:05:43.030 --> 00:05:46.410
So it's good to know,
what the tab order of your page.

103
00:05:46.410 --> 00:05:49.470
And I mention the Accessibility Insights
extension earlier,

104
00:05:49.470 --> 00:05:51.300
that's the great tool
of the test tabindex.

105
00:05:51.300 --> 00:05:54.440
So you can see the order as it goes along.

106
00:05:54.440 --> 00:05:57.490
And if we have more time to debug we would
look at every single one of those tools,

107
00:05:57.490 --> 00:06:00.190
but that's how you can debug tab order.

108
00:06:00.190 --> 00:06:01.320
And another mention,

109
00:06:01.320 --> 00:06:04.810
that screen readers you do not
have to make everything focusable.

110
00:06:04.810 --> 00:06:08.410
Because you can already navigate
with it like by headings and

111
00:06:08.410 --> 00:06:10.260
by different types of elements.

112
00:06:10.260 --> 00:06:13.180
So this is for interactive controls.

113
00:06:14.410 --> 00:06:18.198
So another layer to put on top
of this is that tabindex alone,

114
00:06:18.198 --> 00:06:22.230
you would rarely use it by itself,
maybe the negative one part.

115
00:06:22.230 --> 00:06:25.010
But if you're making something
interactive that's custom,

116
00:06:25.010 --> 00:06:27.030
you have to do a little bit more work.

117
00:06:27.030 --> 00:06:31.870
So I've added a role of button, and
an aria label attribute of close.

118
00:06:31.870 --> 00:06:36.170
And so that would take this,
what's normally a div, and

119
00:06:36.170 --> 00:06:38.580
add some accessibility information to it.

120
00:06:38.580 --> 00:06:43.010
So a div has no semantics by default,
and it's not focusable by default.

121
00:06:43.010 --> 00:06:47.360
But if I add,
lets go add some attributes here.

122
00:06:47.360 --> 00:06:53.000
So role of button, and you can make
up roles they're standard set.

123
00:06:53.000 --> 00:06:55.000
I've seen that happen before as well.

124
00:06:55.000 --> 00:06:59.816
So go refer to the Aria specification and
know we're your options are.

125
00:06:59.816 --> 00:07:04.567
So aria-label of close,
to give it some accessibility information.

126
00:07:04.567 --> 00:07:08.579
And then if i go to the accessibility
inspector it has changed the role

127
00:07:08.579 --> 00:07:12.746
of this div to a button and giving
it what's called an accessible name.

128
00:07:12.746 --> 00:07:17.833
And so that's really important if you're
playing with creating custom elements.

129
00:07:17.833 --> 00:07:21.580
You really want to make
sure you're going the full.

130
00:07:21.580 --> 00:07:25.048
And I also need to mention that if you
can use a button element to start with,

131
00:07:25.048 --> 00:07:25.885
start with that.

132
00:07:25.885 --> 00:07:27.700
And I will show you why in the next slide

