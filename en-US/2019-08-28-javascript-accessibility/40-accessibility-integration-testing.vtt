WEBVTT

1
00:00:00.008 --> 00:00:04.782
&gt;&gt; Marcy: But I wanna move on to another
type of testing, accessible pages.

2
00:00:04.782 --> 00:00:07.980
And so we were talking about units.

3
00:00:07.980 --> 00:00:12.350
What if you have multiple units on a page
that would change your testing approach?

4
00:00:12.350 --> 00:00:16.170
So, I think of accessible pages as really
being about the interoperability of

5
00:00:16.170 --> 00:00:17.210
components.

6
00:00:17.210 --> 00:00:20.950
And for accessibility that can
be important to handle focus,

7
00:00:20.950 --> 00:00:22.980
going from one component to another.

8
00:00:22.980 --> 00:00:24.490
Like our client side routing,

9
00:00:24.490 --> 00:00:27.228
that would be a good example
of something we could test.

10
00:00:27.228 --> 00:00:32.970
Because that's multiple components kind
of interoperating with each other.

11
00:00:34.240 --> 00:00:39.377
And this is really the space where we get
into integration and end-to-end test.

12
00:00:39.377 --> 00:00:41.860
And they're pretty synonymous to me.

13
00:00:41.860 --> 00:00:45.210
I think, maybe there is some
differing opinions about.

14
00:00:45.210 --> 00:00:47.880
If there's actually a difference
in definition for those two,

15
00:00:47.880 --> 00:00:50.580
but I use them interchangeably.

16
00:00:50.580 --> 00:00:52.280
And I think a lot of other people do, too.

17
00:00:52.280 --> 00:00:56.370
But the basic ideas here are that
these tests use real world browsers.

18
00:00:56.370 --> 00:01:01.880
So instead of headless browsers like JS
DOM, you're using a real browser instance,

19
00:01:01.880 --> 00:01:05.200
which is more like whatever
user would experience.

20
00:01:05.200 --> 00:01:08.580
It's a space to test document or
page level rules.

21
00:01:08.580 --> 00:01:13.921
So, things that only exist when you have
a full HTML web page that's rendered.

22
00:01:13.921 --> 00:01:17.549
That there are some things for
accessibility, there like page titles,

23
00:01:17.549 --> 00:01:18.510
things like that.

24
00:01:19.890 --> 00:01:22.566
Testing your widget interrop
like I mentioned and

25
00:01:22.566 --> 00:01:24.738
color contrast may be a good one to test.

26
00:01:24.738 --> 00:01:28.226
Because it's kind of
computationally intensive,

27
00:01:28.226 --> 00:01:33.233
it's often a site level thing like
testing the contrast of one component.

28
00:01:33.233 --> 00:01:36.054
Maybe if it's a component library,
I could see that,

29
00:01:36.054 --> 00:01:38.910
like one in the note that
all pass in isolation.

30
00:01:38.910 --> 00:01:41.200
But on most websites and web applications,

31
00:01:41.200 --> 00:01:44.670
color contrast would be
something across the whole site.

32
00:01:44.670 --> 00:01:48.680
And lastly, I find that these
styles of tests are great for

33
00:01:48.680 --> 00:01:52.830
flexibility with frameworks,
like when Angular 2 first came out.

34
00:01:52.830 --> 00:01:56.960
Their testing utilities were pretty
new and a little bit rough to use.

35
00:01:56.960 --> 00:02:01.640
Maybe the docks weren't quite there, and
so I could use Selenium WebDriver and

36
00:02:01.640 --> 00:02:06.410
Protractor aside from whatever the
framework was saying to use at that time.

37
00:02:06.410 --> 00:02:10.770
It's sort of one step removed from the
actual framework APIs and it gives us some

38
00:02:10.770 --> 00:02:16.190
flexibility in stable testing environments
so that we can write some tests.

39
00:02:16.190 --> 00:02:17.566
They end up being pretty portable, too.

40
00:02:17.566 --> 00:02:20.286
You could theoretically take the same

41
00:02:20.286 --> 00:02:25.760
integration test from a different
site if the conditions are right.

42
00:02:25.760 --> 00:02:30.006
And even, this is a good use case for
any kind of testing unit testing as well.

43
00:02:30.006 --> 00:02:33.924
That if you're really
writing your tests correctly,

44
00:02:33.924 --> 00:02:36.827
you should be able to do a whole rewrite.

45
00:02:36.827 --> 00:02:40.330
And if you're really focused on
the outcome, your test should still pass.

46
00:02:40.330 --> 00:02:43.060
And I think the React team did
that when they moved to Fiber.

47
00:02:43.060 --> 00:02:47.150
They had a lot of tests that they
were able to do a full rewrite and

48
00:02:47.150 --> 00:02:48.060
keep them passing.

49
00:02:48.060 --> 00:02:49.850
So, pretty fantastic.

50
00:02:51.100 --> 00:02:56.090
Here's an accessibility test example
from Selenium WebDriver, which is one.

51
00:02:56.090 --> 00:03:00.040
It's an MPM install away for
Selenium/WebDriver.

52
00:03:00.040 --> 00:03:01.988
And I can write some keyboard tests here.

53
00:03:01.988 --> 00:03:06.976
So in Selenium-land, I set up a driver,
which is a new Selenium instance, and

54
00:03:06.976 --> 00:03:08.699
I can tell it what browser.

55
00:03:08.699 --> 00:03:13.459
So here I am selecting Chrome, I tell
it to go and get a URL, in this case,

56
00:03:13.459 --> 00:03:15.422
local host port 4,000.

57
00:03:15.422 --> 00:03:20.178
That returns a promise, and
when that's done, that is my setup, so

58
00:03:20.178 --> 00:03:23.059
I've got the driver, I can run tests on.

59
00:03:23.059 --> 00:03:28.070
And in my test here I've got a test saying
it should change state with the keyboard.

60
00:03:28.070 --> 00:03:31.880
And this test is looking
at a custom radio switcher.

61
00:03:31.880 --> 00:03:34.800
It's from eBay's MIND Patterns project.

62
00:03:34.800 --> 00:03:41.410
And so I'm testing to make sure
that the aria-checked state,

63
00:03:41.410 --> 00:03:44.090
it's a state, not a property.

64
00:03:44.090 --> 00:03:49.460
That when I tell Selenium, I go send
the keys, go send it a space key.

65
00:03:49.460 --> 00:03:53.366
I wanna make sure that this custom
radio button would actually toggle that

66
00:03:53.366 --> 00:03:54.636
aria-checked state.

67
00:03:54.636 --> 00:03:56.617
So that's what this test is doing.

68
00:03:56.617 --> 00:04:02.235
And it's series of promises
that then chaining actions.

69
00:04:02.235 --> 00:04:06.957
And at the end I can assort that
the attribute that I've gotten,

70
00:04:06.957 --> 00:04:11.659
I get attribute with aria-checked,
that it will equal true.

71
00:04:11.659 --> 00:04:13.760
So, this is a good tool.

72
00:04:13.760 --> 00:04:16.140
It's maybe a bit more dated.

73
00:04:16.140 --> 00:04:18.170
I've used Selenium WebDriver a lot.

74
00:04:18.170 --> 00:04:20.999
And now that I have been
in other frameworks,

75
00:04:20.999 --> 00:04:24.585
I look at this, and
I'm like [SOUND] [LAUGH], to be honest.

76
00:04:24.585 --> 00:04:29.200
Because that's a lot of extra syntax
just to get the test to work.

77
00:04:29.200 --> 00:04:35.290
All of those all of the returning
the element and keeping that chain alive.

78
00:04:35.290 --> 00:04:40.460
It's a lot, the amount of time I
spent trying to get the API to work,

79
00:04:41.520 --> 00:04:44.830
just was so effortless,
I can't believe that worked.

80
00:04:44.830 --> 00:04:46.140
Selenium never goes that well.

81
00:04:46.140 --> 00:04:48.000
That's why I can't really
believe it worked that well.

82
00:04:49.000 --> 00:04:51.570
So, what I'm using instead now is Cypress.

83
00:04:51.570 --> 00:04:54.540
And our project that you
downloaded earlier in the day,

84
00:04:54.540 --> 00:04:56.050
that's why Cypress is in there.

85
00:04:56.050 --> 00:04:59.710
It's a pretty big download, so
that's kinda the cost of it.

86
00:04:59.710 --> 00:05:04.400
But it has a desktop interface that
you could do some testing with.

87
00:05:04.400 --> 00:05:07.150
I don't know about the accessibility
of the interface, but

88
00:05:07.150 --> 00:05:10.330
you can use it as just a run-once thing.

89
00:05:10.330 --> 00:05:13.170
So it doesn't open that interface.

90
00:05:13.170 --> 00:05:19.100
And in our application,
I'm gonna go to package.json.

91
00:05:19.100 --> 00:05:22.623
And here I've got some scripts for
Cypress, so

92
00:05:22.623 --> 00:05:28.220
the site open will call Cypress open,
cy:run is cy:run, Cypress run.

93
00:05:28.220 --> 00:05:32.930
And that's that opening the desktop
testing interface versus just running it

94
00:05:32.930 --> 00:05:39.050
on the command line, so
the use cases for that, the end-to-end.

95
00:05:39.050 --> 00:05:42.790
So, the command that I'm going to use to
run this, once I have some tests in here,

96
00:05:42.790 --> 00:05:46.570
is NPM run test:e2e.

97
00:05:46.570 --> 00:05:48.070
And you can call that whatever you want.

98
00:05:48.070 --> 00:05:53.480
It could be test:integration,
test:cypress, whatever you wanna call it.

99
00:05:53.480 --> 00:05:57.685
But there's another example here for
test:e2e:ci.

100
00:05:57.685 --> 00:06:01.829
And that's doing this one
off cy:run just like do it.

101
00:06:01.829 --> 00:06:04.312
So that way, if you're pushing
to GitHub or something, and

102
00:06:04.312 --> 00:06:07.690
you want it to run your tests, you don't
want it to get blocked on that interface.

103
00:06:07.690 --> 00:06:10.870
There's no person to interact
with the interface, right?

104
00:06:10.870 --> 00:06:12.370
So we need those two things.

105
00:06:12.370 --> 00:06:14.550
And that's what these do.

106
00:06:14.550 --> 00:06:17.480
That's why these scripts are both in here.

107
00:06:17.480 --> 00:06:20.790
But when I'm actively doing testing,
kind of as a human,

108
00:06:20.790 --> 00:06:25.060
not a machine,
I'm usually using the interface.

109
00:06:25.060 --> 00:06:28.020
But every now and then,
the one off runs are nice.

110
00:06:28.020 --> 00:06:31.880
And maybe part of a larger test suite,
that's what you would need.

111
00:06:31.880 --> 00:06:34.140
So, let's go back to our slide.

112
00:06:34.140 --> 00:06:39.510
So, in this example I'm using Cypress.

113
00:06:39.510 --> 00:06:44.470
So, the API for
the actual tests like describe and

114
00:06:44.470 --> 00:06:48.190
the it, that's a lot like other test
frameworks, so pretty intuitive.

115
00:06:48.190 --> 00:06:51.050
So, I'm gonna describe
some accessibility checks.

116
00:06:51.050 --> 00:06:54.930
This is referencing Cypress'
type script definitions.

117
00:06:54.930 --> 00:06:58.510
So that will give you some
autocomplete for the commands and

118
00:06:58.510 --> 00:07:01.650
give you some ideas about
what these commands are.

119
00:07:01.650 --> 00:07:03.310
So, before each test,

120
00:07:03.310 --> 00:07:08.220
I'm going to visit the homepage in this,
it's just the /route.

121
00:07:08.220 --> 00:07:11.220
I'm gonna wait 500 milliseconds.

122
00:07:11.220 --> 00:07:15.000
Just in case the page needs render,
sometimes gets the site's

123
00:07:15.000 --> 00:07:18.920
just like boot up time and
the test environment for some reason.

124
00:07:18.920 --> 00:07:22.040
I found that that wait
can help a little bit.

125
00:07:22.040 --> 00:07:27.503
And it's using the API,
not like a hacky set timeout or something.

126
00:07:27.503 --> 00:07:32.370
And in our test here, I'm saying it
checks if a footer link is focusable and

127
00:07:32.370 --> 00:07:34.460
has the correct attributes.

128
00:07:34.460 --> 00:07:37.780
So, using the Cypress API get all by text,

129
00:07:37.780 --> 00:07:42.450
I can just pass it a random string
to match something on the page.

130
00:07:44.180 --> 00:07:47.984
In this case, that's looking for
a link in the footer.

131
00:07:47.984 --> 00:07:51.430
So, maybe there's probably more
than one link on a page that says

132
00:07:51.430 --> 00:07:54.820
Gatsby on the Gatsby site, so
maybe this is a little brutal.

133
00:07:54.820 --> 00:08:00.990
But I could probably filter it further
if I'm writing test just for the footer.

134
00:08:00.990 --> 00:08:05.255
I could just use Cypress to go
find the footer element and

135
00:08:05.255 --> 00:08:07.960
then start looking inside of it.

136
00:08:07.960 --> 00:08:12.030
That would be scoped to this,
that section, and

137
00:08:12.030 --> 00:08:14.960
maybe that's how you group your test,
maybe not.

138
00:08:14.960 --> 00:08:20.030
But I'm going to use the focused to
return which element is focused,

139
00:08:20.030 --> 00:08:21.400
and then I can make assertion.

140
00:08:21.400 --> 00:08:24.893
So, I'm saying it should
have the text of Gatsby,

141
00:08:24.893 --> 00:08:28.894
it should have an attribute
with gatsbyjs.org.

142
00:08:28.894 --> 00:08:33.620
And it should not have a CSS
style of outline width of zero.

143
00:08:33.620 --> 00:08:37.739
And that last one depends on CSS and
JS being there, I believe,

144
00:08:37.739 --> 00:08:40.430
because that's how it's setting it.

145
00:08:40.430 --> 00:08:43.130
I'm not sure that that would
work with regular CSS, so

146
00:08:43.130 --> 00:08:45.150
that would be something to try.

147
00:08:45.150 --> 00:08:50.373
I just happen to know that gatsbyjs.org
does use that, but maybe not.

148
00:08:50.373 --> 00:08:51.280
We'll go play with it and see

