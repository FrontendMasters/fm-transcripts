WEBVTT

1
00:00:00.080 --> 00:00:02.050
&gt;&gt; Marcy Sutton: So our app for today.

2
00:00:02.050 --> 00:00:04.110
It's built with Gatsby and React.

3
00:00:04.110 --> 00:00:06.840
And you'll learn a little bit about
how Gatsby works if you're not

4
00:00:06.840 --> 00:00:08.390
familiar with that.

5
00:00:08.390 --> 00:00:13.660
Some things I like about Gatsby is that
it has this server rendering built in.

6
00:00:13.660 --> 00:00:17.470
So it's building with NodeJS,
you do a build.

7
00:00:17.470 --> 00:00:19.930
It will render these static pages.

8
00:00:19.930 --> 00:00:23.400
And then it has this client-rendering
component that will do that hydration.

9
00:00:23.400 --> 00:00:27.090
To turn these static web pages
into a React application.

10
00:00:27.090 --> 00:00:31.440
So it's great for interaction, sites where
you have a lot of interactivity, but

11
00:00:31.440 --> 00:00:33.390
you want that fast performance.

12
00:00:33.390 --> 00:00:35.500
It's a pretty great medium for that.

13
00:00:35.500 --> 00:00:40.380
So the output of HTML pages by default
was what won me over personally

14
00:00:40.380 --> 00:00:43.620
because not everyone has
JavaScript turned on or wants it.

15
00:00:43.620 --> 00:00:50.030
And we can have a good argument about
how much JavaScript is okay to require.

16
00:00:50.030 --> 00:00:55.325
I think for a lot of static websites, you
really want some of those static pages.

17
00:00:55.325 --> 00:00:58.420
And something else about this app is
that this slide deck is part of it.

18
00:00:58.420 --> 00:01:03.202
So once you pull it down, it includes
the application that we'll use as

19
00:01:03.202 --> 00:01:06.004
sort of a test sandbox and the slide deck.

20
00:01:07.735 --> 00:01:10.340
&gt;&gt; Marcy Sutton: So
it is now install time.

21
00:01:10.340 --> 00:01:13.684
I have this application up on GitHub,

22
00:01:13.684 --> 00:01:19.178
it is
github.com/marcysutton/js-a11y-workshop.

23
00:01:19.178 --> 00:01:23.710
So we'll take a few minutes, follow the
steps to download if you haven't already.

24
00:01:23.710 --> 00:01:28.781
Once you have this set up locally, you
can make changes and have it live reload.

25
00:01:28.781 --> 00:01:33.050
And then you can even play with the slides
if you want, to see how those work.

26
00:01:33.050 --> 00:01:36.120
The slides will always be
available on GitHub as well.

27
00:01:36.120 --> 00:01:39.952
So, some common issues that I
think may have come up for folks.

28
00:01:39.952 --> 00:01:43.450
If you are working with
an older version of node.

29
00:01:43.450 --> 00:01:46.460
You'll want to upgrade that,
probably to the latest.

30
00:01:46.460 --> 00:01:49.420
And when you do that,
if you delete your node modules folder and

31
00:01:49.420 --> 00:01:52.840
the package locked JSON file that it,
just delete it.

32
00:01:52.840 --> 00:01:55.810
Then regenerate with MPM install.

33
00:01:55.810 --> 00:01:58.570
That should work out some of those kinks.

34
00:01:58.570 --> 00:02:01.870
But we did all hit NPM to download
Cyprus at the same time so

35
00:02:01.870 --> 00:02:04.440
it might take a little while.

36
00:02:04.440 --> 00:02:06.690
Okay, so once you've got it up running.

37
00:02:06.690 --> 00:02:10.248
If you run NPX Gatsby develop
in the project directory,

38
00:02:10.248 --> 00:02:13.505
you can open it locally
at localhost:8000 and

39
00:02:13.505 --> 00:02:17.763
I'll talk a little bit later about
a different command we can run.

40
00:02:17.763 --> 00:02:21.439
But you can always reference
the slides online at

41
00:02:21.439 --> 00:02:25.657
marcysutton.github.io/js-a11y-workshop.

42
00:02:25.657 --> 00:02:28.370
In case you're having trouble,
you can follow along there.

43
00:02:28.370 --> 00:02:32.670
And a quick note that a11y is
a numeranim for accessibility.

44
00:02:32.670 --> 00:02:35.730
So the 11 letters in between the a and
the y.

45
00:02:35.730 --> 00:02:38.230
If you see that reference,
that's what that stands for.

46
00:02:40.650 --> 00:02:43.350
So, we're going to get
a couple of more tools.

47
00:02:43.350 --> 00:02:48.140
For any Windows users,
I don't see any here in the room, but

48
00:02:48.140 --> 00:02:52.780
for folks tuning into the course remotely,
if you're a Windows user getting

49
00:02:52.780 --> 00:02:56.650
the NVDA screen reader,
we have one in front, two, okay.

50
00:02:56.650 --> 00:02:59.850
Okay, we do have Windows and
it's super common.

51
00:02:59.850 --> 00:03:04.480
So if you are running Windows, getting
NVDA is a really great tool to have.

52
00:03:04.480 --> 00:03:08.200
It's a free and open source
screen reader built with Python.

53
00:03:08.200 --> 00:03:10.780
It's used by a lot of people
with disabilities and

54
00:03:10.780 --> 00:03:13.810
it's a fantastic testing tool to have.

55
00:03:13.810 --> 00:03:16.240
So if you can start downloading that.

56
00:03:16.240 --> 00:03:22.068
Also some extensions, the axe Chrome and
Firefox extensions are great to download.

57
00:03:22.068 --> 00:03:26.800
A very similar tool is the Accessibility
Insights extensions from Microsoft.

58
00:03:26.800 --> 00:03:29.013
That actually runs axe under the hood.

59
00:03:29.013 --> 00:03:32.178
So we'll do some debugging
with those tools.

60
00:03:32.178 --> 00:03:37.340
And on the landing page of
the application bundled in this project,

61
00:03:37.340 --> 00:03:41.100
there is a bunch of more testing tools
that you can go and play around with.

62
00:03:42.190 --> 00:03:47.514
So to show you that page, this is the app
that's running at localhost port 8000.

63
00:03:47.514 --> 00:03:51.690
So the landing page has a bunch of
resources, there's testing tools.

64
00:03:51.690 --> 00:03:55.048
Screen reader cheat sheets,
if you're new to that.

65
00:03:55.048 --> 00:03:59.751
Some accessibility docs for frameworks,
so specific frameworks like React,

66
00:03:59.751 --> 00:04:03.385
Ember, Angular has a new one,
it's amazing.

67
00:04:03.385 --> 00:04:04.542
React native, and

68
00:04:04.542 --> 00:04:08.820
Ionic Mobile Framework if you are in
the native accessibility space.

69
00:04:08.820 --> 00:04:10.395
We're not really going into that today.

70
00:04:10.395 --> 00:04:14.930
But I do have a link in the resources for
mobile accessibility at the W3C.

71
00:04:14.930 --> 00:04:17.919
If you're curious about how
accessibility applies to native mobile,

72
00:04:17.919 --> 00:04:19.765
you can learn about that.

73
00:04:19.765 --> 00:04:23.824
And I've got some books and other
resources that I keep around just because

74
00:04:23.824 --> 00:04:26.926
people always want to know,
where can I go to learn more?

75
00:04:26.926 --> 00:04:29.400
So you have a bunch of resources here.

76
00:04:29.400 --> 00:04:33.210
And if we look around this application in
the sidebar, we have a number of demos.

77
00:04:34.220 --> 00:04:37.876
You will see that there are the sort
of bad implementations,

78
00:04:37.876 --> 00:04:40.825
the things that I see out
in the wild quite often.

79
00:04:40.825 --> 00:04:45.909
And then the better regions are blank,
because that's where we will fill

80
00:04:45.909 --> 00:04:50.810
in more accessible examples,
as much as we can in the amount of time.

81
00:04:50.810 --> 00:04:54.413
Creating a production-ready component
takes quite a bit of time, so

82
00:04:54.413 --> 00:04:55.826
we'll get as far as we can.

83
00:04:55.826 --> 00:04:59.380
But I have the concepts listed here as
well just to have that in our minds,

84
00:04:59.380 --> 00:05:02.250
of like, okay,
I should be keeping those things in mind.

85
00:05:04.990 --> 00:05:09.750
So if you don't want to work with React,
I have a couple of options for you.

86
00:05:09.750 --> 00:05:13.670
You can play with a tool called Parcel,
and I love it for prototyping.

87
00:05:13.670 --> 00:05:17.830
So you can clone a scaffolding
project that I've set up.

88
00:05:17.830 --> 00:05:22.484
It's
github.com/marcysutton/parcel-prototype-s-

89
00:05:22.484 --> 00:05:23.970
caffold.

90
00:05:23.970 --> 00:05:29.270
And it will pull in Parcel for you and
it gives you the HTML file and script.

91
00:05:29.270 --> 00:05:32.690
And what I love about it is you can
go into the script in there and

92
00:05:32.690 --> 00:05:36.530
just run NPM or
NPM install from your command line.

93
00:05:36.530 --> 00:05:41.510
And then in the script, you can
import Angular, or import View, and

94
00:05:41.510 --> 00:05:44.110
you can also use projects like
create react app if you like.

95
00:05:44.110 --> 00:05:49.330
But this I love for prototyping because
you can pull in view libraries,

96
00:05:49.330 --> 00:05:53.593
like React, without the whole
build system components so

97
00:05:53.593 --> 00:05:56.030
you can get a little bit simpler.

98
00:05:56.030 --> 00:05:58.737
And so for prototyping,
it's just nice to keep it simple and

99
00:05:58.737 --> 00:06:01.960
know exactly what you've installed and
what you have going on.

100
00:06:01.960 --> 00:06:02.950
It will live reload.

101
00:06:02.950 --> 00:06:06.570
So if you make an edit to
the index HTML file or

102
00:06:06.570 --> 00:06:09.730
the script,
it will just reload it in your browser.

103
00:06:10.750 --> 00:06:12.030
Makes it pretty nice.

104
00:06:12.030 --> 00:06:15.254
Alternatively, you could use
something like Codepen or

105
00:06:15.254 --> 00:06:18.825
Codesandbox to not even worry
about doing any of this install.

106
00:06:18.825 --> 00:06:24.700
A lot of our examples that are the non
React examples I have are on Codepen.

107
00:06:24.700 --> 00:06:29.053
So prototyping I think is a really
important part of working in JavaScript

108
00:06:29.053 --> 00:06:33.824
applications because a lot of times the
build systems are so complex, and a lot of

109
00:06:33.824 --> 00:06:38.344
the tooling around it, that it's sort
of hard to just play around with a UI.

110
00:06:38.344 --> 00:06:40.966
And I think accessibility we
should be doing early on,

111
00:06:40.966 --> 00:06:44.710
especially if you can prototype
with a designer, maybe you pair up.

112
00:06:44.710 --> 00:06:48.770
And you can just work through
an accessible user interface in

113
00:06:48.770 --> 00:06:50.240
a prototype fashion.

114
00:06:50.240 --> 00:06:52.040
So I'm a big proponent of that,

115
00:06:52.040 --> 00:06:56.530
especially because we can work with
people who are stronger in HTML and

116
00:06:56.530 --> 00:07:00.410
CSS, by having this prototyping,
these roles on our teams.

