[00:00:00]
>> I am done, so let's start with a general Q&A. Cuz I know there's a lot of questions that are in the channel as well.
>> Do you think that there's still a job market for frontend specialists or are companies more interested in full stack engineers?
>> There will always be a job market for specialists of any kind.

[00:00:24]
I think this idea, like we said about the whole full stack thing being kind of treated as mythical. There's a big difference between generalist and full stack, being good at different, you could be a back end and be understanding of multiple co languages. You could be backend and be C# and go.

[00:00:44]
But it's a little different than I know the entire stack entirety. So being a full stack generalist, meaningful stack specialist is still very much in demand. Being a specialist of any type is in demand whether it's frontend, backend, DevOps, cloud native, iOS, mobile, being a specialist is always gonna be in demand.

[00:01:12]

>> Another question. This is about personal websites. Do you feel very creative websites work with a lot of animations or a game? Do you recommend going super creative and fancy or making it simple and focused on actual content that I want to present about myself?
>> As a junior, I do recommend the content-focused ones versus the very fancy ones as a junior.

[00:01:44]
Cuz your first focus is getting that role. I tend to see those more fancy ones for people that have already made a name for themselves or trying to make a much bigger name for themselves. And the portfolio is the show. So I don't recommend but as a junior, you don't want it to be like that, especially when you're trying to find a job.

[00:02:11]
And you're also risking using technologies that might break one day out of nowhere. I'm not a big fan of the super phaser five WebGL type websites cuz you never know what's gonna happen.
>> My question is, for finding these different open source opportunities, a lot of the times when I've been reviewing some of the feature and pull requests and that kind of thing.

[00:02:41]
A lot of them are a little bit too complex for myself as a beginner to really jump into and get into the weeds with. How do I identify the right opportunities and the right things where it's not something where something's deceptively simple. And then I end up wasting a whole bunch of time trying to do something that's probably outside of my skill set.

[00:03:02]

>> I have one better. What's stopping you from reaching out to whoever made that ticket or that issue and see if they could either walk you through the issue that they're having, or B, pair with you on an issue that you're having. So that way you could be the driver, they can be the I don't know what y'all call it in the civilian terms, we call it a, shooter-spotter in Vets Who Code.

[00:03:33]
Because well, we're comfortable with those terms, but I guess on a civilian term, you guys call it driver-
>> Co-pilot.
>> Co-pilot.
>> Driver navigator,.
>> Navigator, who's in that? Who uses a navigator? Everybody uses a Siri now, right? All right, cool, driver navigator, so-
>> Look at the screen cuz the other person needs to keep their eyes on the road.

[00:03:53]

>> No one's doing that [LAUGH]. Yeah, all right, so driver navigator, right? So since you're a junior, you're driving while the senior person is navigating. And that way you're understanding the problems that this open source issue has, while also taking the opportunity to learn more than coding, hard skill coding opportunity with someone else.

[00:04:21]
So that's what I would recommend first, before trying to identify. Instead of trying to identify a problem you can do on your own, try identify an opportunity to make it solve two to three birds with one stone, right? Now you solved collaboration, you're pairing, you're learning something new, someone is getting, you're networking, right?

[00:04:42]
You have all these things now that you just solved. Yes, sir.
>> So I was wondering about there's constantly new hot technology that's coming out. Like you were saying, Rust is a big new thing that's supposed to kind of take over according to Primeagen, right?
>> Yeah.
>> There's things like Svelte or Tailwind, and they're really hot on Twitter, but there's not much of a job market for those skills yet.

[00:05:15]
Is there a way to kind of differentiate what's worth learning skill-wise versus what's just the talk?
>> Ignore the noise. There used to be a term called signal versus noise. And I'm always looking for the signal versus the noise so while everybody's on Twitter talking about something exciting, I'm gonna pull up the exciting they're looking at.

[00:05:36]
I'm either gonna research it on LinkedIn or Indeed or somewhere, and I'm gonna look at the market. And if the market is not reflecting what the excitement on the Twitters are saying, I'm old, it's the Twitters now, I'm not going to pay any attention to what they say, right?

[00:05:55]

>> So unless you're seeing 30,000 open positions for Rust.
>> Not even 30,000, I'm talking closer to maybe, I'll just do a national search and I saw 30,000 and wouldn't even be worth coming having a conversation for it. Because 50 states, how many engineering jobs? Last time I checked, there's 17 million engineering jobs opening United States of America.

[00:06:21]
So 30,000 jobs of a language on a national search, I wouldn't even consider that for a conversation. I'm looking at it has to have at least anywhere from 75 to 100 before I'm starting to talk to my troops about it ,right? So it was a .NET role, .NET, that's a good one to go.

[00:06:46]
React, Node, if it was Python with Flask, or maybe Python with Django. We were talking about Angular, we were talking about I would do that even with View, I don't see enough data to make me want to trust giving people you should learn view. Like you said, if someone asked me about Java, I'd be like, yes, learn Java.

[00:07:13]
Cuz Java's been around forever and pretty much. If you have a hospital in your town, that means you have Java. So that means there's probably people that have gone in other companies and implemented Java everywhere, right? Java's a great language to learn. It has a great ecosystem with main impact just all the other stuff to learn, right.

[00:07:35]
That's something that the data shows, right? You have a college educational place or a hospital that's usually built around the tech sector ecosystem of your city. You're gonna have C# and Java. So those are two really trustworthy backends for you to go towards, right? Whereas we were talking, like I said, unfortunately, Go and Rust aren't up there yet when it comes to, okay, what's the trustworthiness of.

[00:08:05]
I'm talking to someone who has two kids and they're putting all their energy in learning how to code for a better life for their kids. Am I gonna recommend for them learn Go or Rust? And I couldn't do that in good faith, versus C#, .NET, and Java with Spring Boot.

[00:08:26]
Yeah, I can do that. Yeah, you should absolutely learn that your chances of getting a job is much higher, so.
>> So for someone changing industries, they don't have a good sense of what are the options. What are some indicators for the new person to see that I should be pursuing backend, I should be pursuing APIs.

[00:08:52]

>> I don't look at it like that, which you should be pursuing. First, you should be doing a research to see where is the most lucrative for your skill level. You're going to be entry level, you should know where entry level jobs are like. For instance, the chances of going entry level without any, zero technical experience anywhere in a cloud role or something, that's very small.

[00:09:18]
Whereas if you have experience in something, something some way, shape, or form of building in scripting or anything, your chances go up higher. But it's usually a mid tier job, right? Versus saying, I want to go backend and I want to go frontend. Okay, those both have entry level roles.

[00:09:39]
But now we're talking about DevOps, for instance. When you talk about DevOps, that's a slightly more senior role, than entry level and then when it comes to juniors, right? So that's like, okay, your chances are gonna go low. So that's where we have to have those type of conversations, not like which part do we really need?

[00:10:00]
All right, no, which is the best chances, and then we go off which part, right? API design is a part of backend, right? So you have to know, backend language in order to build APIs, right? You have to know Python. And you could do it with Python or you could just do Python Flask, right?

[00:10:18]
You have to do these to be able to build an API. You just can't do that solo by itself whereas just talking about API design by itself, that means what? Anybody can do that. So, I mean, not anybody can do that but anybody with any backend conversation can do that.

[00:10:38]
So you gotta learn backend first, right? You wanna do DevOps, you should probably learn a few backend languages, right? Because you need to learn about build pipelines and you probably should learn a lease AWS or Azure or maybe a little bit of both, right. And then from there you need to learn how to be able to connect a website to build pipelines from one of those to GitHub and so that people can see the builds and things based upon that.

[00:11:06]
It's a deeper conversation than just, hey, where do I learn, where do I start? And that's why you should research it, right? And do informationals, ask people, look for people in your community. It's not like how it was when I was growing up where all the people that know how to code were hidden, right?

[00:11:27]
I didn't even know the coding was a job till I was like 26, 27. I just thought people got an LLC and a website popped up. I was like, okay, that's cool. Now I know the difference, I know the facts, right? No, people built these things, right? So like they're not hidden anymore.

[00:11:47]
So have them do that research to figure out which path to go once they get beyond frontend or backend, right? What languages should you learn, that's more important than whether you should go frontend and backend. All right, you can't go wrong with JavaScript. But which jobs are hiring in your area, in your region, Angular or React.

[00:12:09]
Angular used to be very much a higher tier framework if you're in hospitals, colleges in your city, versus if you're in a more start-up friendly city, React was, right? If you're in a city that isn't a tech hub, but has tech jobs, then you're gonna have, like I said, Java Spring Boot.

[00:12:34]
You're gonna have C# and .NET, and you might have PHP as to prevalent backends. So even if you're backend, you might not want to be like backend learning TypeScript and Node. You want to be one of the other ones, right? So that's how you should be looking at it, and framing it, and thinking of it.

