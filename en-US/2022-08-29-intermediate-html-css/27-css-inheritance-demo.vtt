WEBVTT

1
00:00:00.660 --> 00:00:04.462
All right, so, we got a very basic
web page here to start to talk about

2
00:00:04.462 --> 00:00:07.030
inheritance, and
what we have going on here.

3
00:00:07.030 --> 00:00:09.499
So, always the best thing to do,

4
00:00:09.499 --> 00:00:14.100
any time you start to work with
CSS is to take a look at the HTML.

5
00:00:14.100 --> 00:00:19.596
Remember CSS is all about patterns and
finding patterns in the HTML.

6
00:00:19.596 --> 00:00:24.548
And we may find those patterns through IDs
and classes, but there's always a pattern

7
00:00:24.548 --> 00:00:29.050
in the HTML that we're trying to latch
on to in our CSS and apply styles.

8
00:00:29.050 --> 00:00:35.180
So, here we have an article, it has an ID
of Bob, we have an h1 for our title.

9
00:00:35.180 --> 00:00:38.133
We have a paragraph that
has a class of cloud,

10
00:00:38.133 --> 00:00:42.662
inside of that we have an image and
we have some text and we have a link.

11
00:00:42.662 --> 00:00:47.176
In our second paragraph we have a class
of tree, it has a strong in there,

12
00:00:47.176 --> 00:00:49.989
the strong has an ID,
we have a link in there.

13
00:00:49.989 --> 00:00:53.822
And then down at the bottom we
have a footer for the article,

14
00:00:53.822 --> 00:00:57.440
the footer has a link as well and
then we end our article.

15
00:00:58.710 --> 00:01:02.026
Okay, by the way those of
you who are thinking, hey,

16
00:01:02.026 --> 00:01:05.438
she's using a float,
isn't that kind of old school?

17
00:01:05.438 --> 00:01:08.034
Actually this is the reason
that floats were invented.

18
00:01:08.034 --> 00:01:11.246
Floats are all about taking an image.

19
00:01:11.246 --> 00:01:14.872
If my text was longer, it would
eventually wrap around this image and

20
00:01:14.872 --> 00:01:16.196
continue down the page.

21
00:01:16.196 --> 00:01:18.984
This is why we have floats inside of CSS,

22
00:01:18.984 --> 00:01:22.190
what is old school is using floats for
layout.

23
00:01:22.190 --> 00:01:24.875
So any time we were laying out
whole web pages in floats,

24
00:01:24.875 --> 00:01:29.270
we used to do that about ten years ago
because we didn't have any other options.

25
00:01:29.270 --> 00:01:32.719
That is the difference between
using floats in this context and

26
00:01:32.719 --> 00:01:34.550
using floats for layouts today.

27
00:01:35.960 --> 00:01:41.900
All right, so then for our CSS, we have
our border box styling to start with.

28
00:01:41.900 --> 00:01:45.928
I've declared the body
has an Arial font on it.

29
00:01:45.928 --> 00:01:50.519
And there's the information about
the image, we have a max width of 100%.

30
00:01:50.519 --> 00:01:53.789
That makes it flexible,
if the window gets smaller,

31
00:01:53.789 --> 00:01:55.903
the image will scale down in size.

32
00:01:55.903 --> 00:01:58.971
We floated it right and then we put
a little bit of margin on it so

33
00:01:58.971 --> 00:02:00.750
that the text doesn't run into it.

34
00:02:00.750 --> 00:02:05.959
So one of the things that you'll often
see me do is this exact declaration here,

35
00:02:05.959 --> 00:02:08.778
I've got the body with
a font family on it.

36
00:02:08.778 --> 00:02:13.799
So I've never actually said that the h1
should have an Arial font to it.

37
00:02:13.799 --> 00:02:18.350
I never said the paragraphs had
to have an Arial font to it.

38
00:02:18.350 --> 00:02:22.511
We just assume that they do, and perhaps
you have been coding for some time,

39
00:02:22.511 --> 00:02:27.326
you've never really thought about the fact
that you've not specifically telling each

40
00:02:27.326 --> 00:02:30.142
of these elements what kind
of font family to have.

41
00:02:30.142 --> 00:02:34.682
That is inheritance in action, it's kind
of like having someone come to your house,

42
00:02:34.682 --> 00:02:37.344
and you say,
please paint my entire house white.

43
00:02:37.344 --> 00:02:40.386
We don't have to say, paint the kitchen
white, paint the bathroom white,

44
00:02:40.386 --> 00:02:41.441
paint the bedroom white.

45
00:02:41.441 --> 00:02:47.199
We just say, paint the house white,
except for that bedroom I want it green,

46
00:02:47.199 --> 00:02:52.978
the wall in that bedroom I want it blue,
so we can specify exceptions to that.

47
00:02:52.978 --> 00:02:55.258
Likewise here we can do the same.

48
00:02:55.258 --> 00:03:00.539
As you have seen me demonstrate
before I could say for

49
00:03:00.539 --> 00:03:06.300
example h1, and
I could say font-family Times serif,

50
00:03:06.300 --> 00:03:11.580
and my h1 would change to a Times font,
you may say,

51
00:03:11.580 --> 00:03:17.235
well, okay,
Jen that's the last one here on the list.

52
00:03:17.235 --> 00:03:19.095
That's why that one wins.

53
00:03:19.095 --> 00:03:22.105
But I'm going to take this h1 and
move this up.

54
00:03:22.105 --> 00:03:28.127
So if we put this, I'll put it even right
here at the very top of my style sheet.

55
00:03:28.127 --> 00:03:34.094
And Bob Ross, more Bob Ross wisdom, is
still Times for its font, and the reason

56
00:03:34.094 --> 00:03:40.354
why is because we're very specific about
the element that we're trying to style.

57
00:03:40.354 --> 00:03:47.773
So here h1, we have body, article, h1,
and we're specifically targeting that h1.

58
00:03:47.773 --> 00:03:53.908
We're overriding the body which is simply
inheriting, but we're specifically calling

59
00:03:53.908 --> 00:03:59.247
out that h1 as the Times font, and that
is why it displays that way on the page.

60
00:04:02.334 --> 00:04:07.284
This will be true even if I did
something like this, I could say,

61
00:04:10.220 --> 00:04:15.290
Bob, the ID Bob,
which is on the article, and

62
00:04:15.290 --> 00:04:20.490
here I could say something
like font-family,

63
00:04:20.490 --> 00:04:23.480
our old friend Comic Sans.

64
00:04:26.748 --> 00:04:32.583
I think I have to do Comic Sans Ms.

65
00:04:35.596 --> 00:04:36.981
There we go.

66
00:04:36.981 --> 00:04:40.935
So, my ID of Bob has got
the Comic Sans font on it,

67
00:04:40.935 --> 00:04:45.671
and you can see here that it's
overwritten the body font.

68
00:04:45.671 --> 00:04:50.491
And that is because, once again,
although it doesn't show in code pen,

69
00:04:50.491 --> 00:04:53.080
remember the body element is assumed.

70
00:04:53.080 --> 00:04:58.602
So I'll just type one in here for
you so you can see it.

71
00:05:03.379 --> 00:05:08.241
Our body element was said to be Arial,
article with the ID of Bob is now set

72
00:05:08.241 --> 00:05:13.136
to be Comic Sans but the h1 still
comes later and it's showing as Times.

73
00:05:13.136 --> 00:05:17.789
So in this case we have an element
beating an ID, so to speak, and

74
00:05:17.789 --> 00:05:22.795
it's due to inheritance because
the inheritance is taking priority

75
00:05:22.795 --> 00:05:27.391
in this case over specificity,
and the cascade in some cases.

76
00:05:29.738 --> 00:05:34.556
And again, I've got the h1 coming later,
I can put it earlier.

77
00:05:34.556 --> 00:05:38.466
It will still win over my ID.

78
00:05:39.828 --> 00:05:40.328
Okay.

79
00:05:43.155 --> 00:05:47.780
That's all kind of ugly, so
let's just get rid of those.

80
00:05:47.780 --> 00:05:52.181
Then the last thing I wanna talk
about here is the difference

81
00:05:52.181 --> 00:05:56.240
between the universal selector and
the body element.

82
00:05:56.240 --> 00:05:59.462
So as you know in the display
part of your webpage,

83
00:05:59.462 --> 00:06:03.784
the body element encompasses
basically all of your visible HTML.

84
00:06:03.784 --> 00:06:07.384
The head element is gonna
encompasses your meta tags, and

85
00:06:07.384 --> 00:06:10.763
your titles, and
all the things that are basically for

86
00:06:10.763 --> 00:06:14.870
machines, not necessarily for
a visitor to your webpage.

87
00:06:14.870 --> 00:06:18.702
In this case, the body element is the one
that encompasses all that visible stuff.

88
00:06:18.702 --> 00:06:23.155
So oftentimes people will use,
instead of body,

89
00:06:23.155 --> 00:06:27.183
they will use star to set
their font family for

90
00:06:27.183 --> 00:06:30.271
all of these elements on the page.

91
00:06:30.271 --> 00:06:33.404
And you look at that and say, well,

92
00:06:33.404 --> 00:06:39.156
there's really no difference
between those two, but there is.

93
00:06:39.156 --> 00:06:46.550
The difference is here we are working with
a property, font family, that inherits.

94
00:06:46.550 --> 00:06:51.972
And so between body or
star there is in fact no difference,

95
00:06:51.972 --> 00:06:54.638
in the final result anyway.

96
00:06:54.638 --> 00:07:00.132
But with body, we go back to body here and
I add to this a border.

97
00:07:00.132 --> 00:07:05.550
1px solid red, border of course does
not inherit, so what do we get?

98
00:07:05.550 --> 00:07:10.390
We get a border around the body of the
webpage, remember that image is floated,

99
00:07:10.390 --> 00:07:12.424
we haven't cleared that float.

100
00:07:12.424 --> 00:07:16.053
And so the float is hanging
outside of the webpage right now.

101
00:07:16.053 --> 00:07:20.297
And I can go through how we can go
about clearing that if you like,

102
00:07:20.297 --> 00:07:22.980
but that that is what's going on there.

103
00:07:22.980 --> 00:07:27.953
So we have a single border because
the border property is not inherited.

104
00:07:27.953 --> 00:07:34.468
If I change body to the star property,
Notice

105
00:07:34.468 --> 00:07:40.640
that we now have all of the elements
on this webpage have a border on them.

106
00:07:40.640 --> 00:07:43.849
So what we've done instead of saying,

107
00:07:43.849 --> 00:07:48.420
we're going to set the Arial
font on the body element and

108
00:07:48.420 --> 00:07:53.674
just let inheritance work,
here we are specifically declaring

109
00:07:53.674 --> 00:07:59.730
a font family on every single element
inside of this particular webpage.

110
00:07:59.730 --> 00:08:04.730
So every element gets its own
special declaration for the font.

111
00:08:04.730 --> 00:08:09.477
Every element is now of course
also getting a border as well.

112
00:08:09.477 --> 00:08:11.636
So that's the difference
between those two.

113
00:08:11.636 --> 00:08:16.255
I usually prefer to let inheritance work,
and so I tend to use body.

114
00:08:18.532 --> 00:08:22.400
While we're here for those of you who
are wondering about clearing a float,

115
00:08:22.400 --> 00:08:23.317
we could do that.

116
00:08:23.317 --> 00:08:28.163
Normally what you would do is look at,
Here.

117
00:08:28.163 --> 00:08:32.692
We could look at the article for example
as a way we could clear on the article,

118
00:08:32.692 --> 00:08:34.993
we could clear on the cloud paragraph,

119
00:08:34.993 --> 00:08:39.130
just depends on where we wanna have
some of that extra space to appear.

120
00:08:39.130 --> 00:08:41.517
Let's say we wanna clear on the article.

121
00:08:44.972 --> 00:08:48.234
I know a lot of you are fans
of the overflow property,

122
00:08:48.234 --> 00:08:53.020
which is one way of doing this, but
there's a new way to do it as well.

123
00:08:53.020 --> 00:08:59.260
And this is with the display
flow-route property.

124
00:09:00.580 --> 00:09:03.288
And notice that that will
clear that float for you.

125
00:09:03.288 --> 00:09:09.898
Now, you have that image all encompassed
inside of this particular webpage.

126
00:09:11.982 --> 00:09:16.813
So, I hope that helped some,
in terms of clearing floats

127
00:09:16.813 --> 00:09:21.252
as well as a little bit of
basics about inheritance.

128
00:09:21.252 --> 00:09:22.954
Do we have any questions so far?

129
00:09:27.610 --> 00:09:31.420
&gt;&gt; Person said, nice,
haven't used floats in a long time.

130
00:09:31.420 --> 00:09:33.278
&gt;&gt; Yeah.

131
00:09:33.278 --> 00:09:37.200
[LAUGH] Okay.

132
00:09:37.200 --> 00:09:40.420
&gt;&gt; So, what's with the colon root?

133
00:09:40.420 --> 00:09:41.060
&gt;&gt; Colon root?

134
00:09:42.444 --> 00:09:44.335
Up here at the, yeah,
that's a good question.

135
00:09:44.335 --> 00:09:48.988
Okay, so colon root, so what is root?

136
00:09:48.988 --> 00:09:54.575
Remember that in CSS we think
of them as HTML elements.

137
00:09:54.575 --> 00:09:57.709
In JavaScript we think of these as nodes,
right?

138
00:09:57.709 --> 00:10:01.695
So we have body, the body element,
we have before and

139
00:10:01.695 --> 00:10:05.605
after the body element as
things that we can access.

140
00:10:05.605 --> 00:10:11.505
Root this is a pseudo class that
will access the route of the body,

141
00:10:11.505 --> 00:10:14.095
often that is HTML, right?

142
00:10:14.095 --> 00:10:19.209
The HTML element, that may be outside of
that if there's a node outside of that.

143
00:10:19.209 --> 00:10:23.438
The other thing that root does is
it has the specificity of a class.

144
00:10:23.438 --> 00:10:28.469
So it has a higher specificity than
just using a type selector like HTML or

145
00:10:28.469 --> 00:10:33.333
body and that may also help depending
on how you're writing your CSS,

146
00:10:33.333 --> 00:10:36.150
for declaring your various variables.

147
00:10:36.150 --> 00:10:39.868
So root, this route notation is
something that's kind of evolved,

148
00:10:39.868 --> 00:10:42.896
it's where we're gonna put
in our variables, right?

149
00:10:42.896 --> 00:10:48.229
So my specific red color is gonna be,

150
00:10:48.229 --> 00:10:52.020
whatever, ff0000.

151
00:10:52.020 --> 00:10:56.245
Then that is how most commonly
root is used these days, it's for

152
00:10:56.245 --> 00:10:59.389
holding globally scoped
variables in our CSS.

153
00:10:59.389 --> 00:11:02.601
Let's talk about visibility none,
I'm sorry,

154
00:11:02.601 --> 00:11:05.283
display none versus visibility hidden.

155
00:11:05.283 --> 00:11:07.730
Let's talk about the difference
between these two.

156
00:11:07.730 --> 00:11:13.559
I know you are familiar with display
none because it's a really popular one.

157
00:11:13.559 --> 00:11:18.638
If I said to my image here and I'm just
going to declare this as a separate

158
00:11:18.638 --> 00:11:22.968
declaration, display:none
,notice what happens here.

159
00:11:22.968 --> 00:11:27.915
The image disappears, the space that
the image occupied goes away, and

160
00:11:27.915 --> 00:11:32.471
we now have a very short little bit
of text that's here on the page.

161
00:11:32.471 --> 00:11:35.935
You probably have used display
none all over the place but

162
00:11:35.935 --> 00:11:40.050
you may not be aware of its cousin,
which is visibility.

163
00:11:40.050 --> 00:11:42.150
Visibility is inherited.

164
00:11:42.150 --> 00:11:45.099
And it has some interesting
characteristics when you use it here

165
00:11:45.099 --> 00:11:46.370
on the webpage.

166
00:11:46.370 --> 00:11:50.869
So instead of display none,
if I set this to visibility,

167
00:11:50.869 --> 00:11:53.226
actually let me remove that.

168
00:11:53.226 --> 00:11:56.999
Now the image is back, visibility: hidden.

169
00:11:59.268 --> 00:12:01.215
My image disappears, so

170
00:12:01.215 --> 00:12:06.140
notice that the space that that
image occupied is still there.

171
00:12:07.450 --> 00:12:09.034
So that's kind of fun and different.

172
00:12:09.034 --> 00:12:13.371
We have that space still there and
available for

173
00:12:13.371 --> 00:12:16.304
a different image for example.

174
00:12:16.304 --> 00:12:19.705
It's kind of like the difference between
absolute and relative positioning,

175
00:12:19.705 --> 00:12:21.340
they function in the same kind of way.

176
00:12:21.340 --> 00:12:25.291
When we do absolute positioning and
you move something on your webpage,

177
00:12:25.291 --> 00:12:29.891
the space that it occupied collapses, as
opposed to relative positioning where you

178
00:12:29.891 --> 00:12:32.936
move something on the page
with relative positioning,

179
00:12:32.936 --> 00:12:35.228
the space that it occupied remains open.

180
00:12:35.228 --> 00:12:42.637
So display none and visibility hidden
are similar types of properties to that.

181
00:12:42.637 --> 00:12:45.897
We could continue on with
this just to show you.

182
00:12:45.897 --> 00:12:49.670
If we chose one of our paragraphs here,
like the cloud,

183
00:12:49.670 --> 00:12:52.334
let's say that first paragraph here.

184
00:12:57.739 --> 00:13:02.214
Let's also make that visibility:hidden,
so you can see here that

185
00:13:02.214 --> 00:13:07.000
our space continues to be available and
for that image and for the text.

186
00:13:07.000 --> 00:13:09.337
If we change the size of the image,

187
00:13:09.337 --> 00:13:13.860
notice that all the compensation
is happening here on the screen.

188
00:13:13.860 --> 00:13:18.391
We're redrawing as if the image and
the text were still there.

189
00:13:18.391 --> 00:13:23.990
So visibility hidden is inherited
while display none is not.

190
00:13:23.990 --> 00:13:28.460
All right, and the last property
that I'd like to introduce to you,

191
00:13:28.460 --> 00:13:35.604
while we're here, Has to do with links.

192
00:13:35.604 --> 00:13:38.050
Now, I know you're really
familiar with links.

193
00:13:38.050 --> 00:13:43.497
Normally the way that we write links
these days is a' and we say something

194
00:13:43.497 --> 00:13:49.496
like color:red, and then we'll say
something like a:hover and we'll say,

195
00:13:55.881 --> 00:14:02.172
Text-decoration: none, great.

196
00:14:02.172 --> 00:14:08.190
So when I hover over my links, the text
decoration disappears, all is well.

197
00:14:08.190 --> 00:14:13.715
Normally we style this way because we
wanna have our unvisited link color and

198
00:14:13.715 --> 00:14:16.142
our visited link color the same.

199
00:14:16.142 --> 00:14:20.148
So A by itself encompasses all of those.

200
00:14:20.148 --> 00:14:24.570
But I'd like to point out that we
now also have a class for this.

201
00:14:24.570 --> 00:14:28.377
It is called the any-link class or sorry,

202
00:14:28.377 --> 00:14:33.242
pseudo class,
which will also style the link state and

203
00:14:33.242 --> 00:14:38.350
the visited link state
together as a single item.

204
00:14:38.350 --> 00:14:43.601
So, if you are having a specificity
problem somewhere along the way

205
00:14:43.601 --> 00:14:48.577
where your A style by itself is
getting overwritten in some way,

206
00:14:48.577 --> 00:14:54.220
that any-link pseudo class may also
be useful to you for styling links.

