WEBVTT

1
00:00:00.025 --> 00:00:03.030
There earlier we had a look
in depth at inheritance.

2
00:00:03.030 --> 00:00:05.780
The next thing I wanna
talk about is specificity.

3
00:00:05.780 --> 00:00:10.301
And this is a topic that you may
know something about already but

4
00:00:10.301 --> 00:00:14.055
we're going to drill into
this into great detail and

5
00:00:14.055 --> 00:00:18.250
take a look at how specificity
will work inside of our CSS.

6
00:00:19.310 --> 00:00:23.940
So let's start with our
definition from MDN.

7
00:00:23.940 --> 00:00:28.180
Specificity is the algorithm used
by browsers to determine the CSS

8
00:00:28.180 --> 00:00:32.570
declaration that is the most relevant
to an element, which in turn,

9
00:00:32.570 --> 00:00:35.994
determines the property
value to apply the element.

10
00:00:35.994 --> 00:00:38.408
So that is what we
are looking at today and

11
00:00:38.408 --> 00:00:41.177
I know that a lot of you
are familiar with this.

12
00:00:41.177 --> 00:00:45.554
Because as you are working away you
do things like add an ID to your

13
00:00:45.554 --> 00:00:48.554
selector in order to
make it more specific so

14
00:00:48.554 --> 00:00:53.440
that hopefully it will apply to
whatever it is you're trying to style.

15
00:00:53.440 --> 00:00:57.034
So that is the concept that
we're talking about here.

16
00:00:58.648 --> 00:01:04.236
In day one of boot camp, maybe possibly
day two, you were taught this,

17
00:01:04.236 --> 00:01:08.429
ID's always be classes,
always be type selectors,

18
00:01:08.429 --> 00:01:14.250
also those elements inside of your CSS,
that this is always true.

19
00:01:14.250 --> 00:01:15.865
And as we just showed,

20
00:01:15.865 --> 00:01:21.130
this is true until you're gonna factor
in the cascade and inheritance.

21
00:01:21.130 --> 00:01:25.584
So if we look at specificity in a vacuum
and pretend that inheritance and

22
00:01:25.584 --> 00:01:28.640
the cascade don't exist,
this is in fact true.

23
00:01:29.850 --> 00:01:34.020
But, of course, we can interfere with
this by adding in inheritance or

24
00:01:34.020 --> 00:01:37.842
lack of inheritance,
depending on how we've coded things, and

25
00:01:37.842 --> 00:01:40.840
by factoring in what's
going on with the cascade.

26
00:01:40.840 --> 00:01:45.077
So right now for
the purposes of learning specificity,

27
00:01:45.077 --> 00:01:50.396
we're gonna focus on this in a vacuum and
pretend that inheritance and

28
00:01:50.396 --> 00:01:54.288
the cascade do not work in
this world at the moment.

29
00:01:55.736 --> 00:02:00.257
While we are also discussing specificity
to sort of neutralize the cascade,

30
00:02:00.257 --> 00:02:03.662
we have to assume that all of
our styles are gonna originate

31
00:02:03.662 --> 00:02:05.834
from the same style sheet or source.

32
00:02:05.834 --> 00:02:09.694
So we are going to forget about the fact
that we have all of these style

33
00:02:09.694 --> 00:02:13.490
sheets coming in from all of
the different external style sheets,

34
00:02:13.490 --> 00:02:16.432
all of the embedded style sheets,
inline styles.

35
00:02:16.432 --> 00:02:19.293
We're gonna pretend none
of that exists just for

36
00:02:19.293 --> 00:02:24.056
the purposes of understanding specificity
because that is part of the cascade.

37
00:02:26.221 --> 00:02:29.394
So when we think about how
specific something is, there's

38
00:02:29.394 --> 00:02:34.292
actually a little bit of math that's done,
it's really easy, it's actually counting.

39
00:02:34.292 --> 00:02:40.888
And what we're going to do is for our
given selector we are going to analyze it.

40
00:02:40.888 --> 00:02:45.083
We are going to count how many
of each type of selector,

41
00:02:45.083 --> 00:02:49.930
components of that selector,
are contributed to it overall.

42
00:02:49.930 --> 00:02:54.281
So how many ID's do we have,
we're going to give that a number.

43
00:02:54.281 --> 00:02:58.253
We're going to look at how many
classes that we have, in this case,

44
00:02:58.253 --> 00:03:00.740
classes as you know and love them.

45
00:03:00.740 --> 00:03:03.243
But also lumped in here
are pseudo-classes,

46
00:03:03.243 --> 00:03:07.050
those are generally things that
start with the single colon.

47
00:03:07.050 --> 00:03:10.143
There are a lot of
pseudo-classes these days but

48
00:03:10.143 --> 00:03:15.390
some of the classic choices are,
link, visited, active, hover, focus.

49
00:03:15.390 --> 00:03:21.950
We saw a bunch of them, the nth child,
nth of type, those are pseudo-classes.

50
00:03:21.950 --> 00:03:23.780
And then we have attribute selectors.

51
00:03:23.780 --> 00:03:26.660
So all of the attribute selectors,
regardless of type,

52
00:03:26.660 --> 00:03:30.500
whether they are exact matches or
they're some of the substring variants,

53
00:03:30.500 --> 00:03:34.370
all of those attribute selectors
are included as part of that.

54
00:03:34.370 --> 00:03:37.670
And then finally,
we have our type selectors.

55
00:03:37.670 --> 00:03:41.884
Which is some kind of element,
right, p-body, for

56
00:03:41.884 --> 00:03:46.530
example, and all of those pseudo-elements.

57
00:03:46.530 --> 00:03:52.490
Generally speaking at this point in time,
pseudo-elements start with a double colon,

58
00:03:52.490 --> 00:03:55.437
double colon after, double colon before.

59
00:03:55.437 --> 00:04:00.147
But in previous versions
of CSS prior to CSS3,

60
00:04:00.147 --> 00:04:06.640
we had pseudo-elements but
they have only single colon to them.

61
00:04:06.640 --> 00:04:09.035
So sometimes you will see, for example,

62
00:04:09.035 --> 00:04:13.080
before written with a single
colon instead of a double colon.

63
00:04:13.080 --> 00:04:16.850
That is the reason why before is one
of the older pseudo-elements and

64
00:04:16.850 --> 00:04:19.710
some people will still write
it with a single colon.

65
00:04:19.710 --> 00:04:21.029
So watch for that,

66
00:04:21.029 --> 00:04:25.900
it can trip you up in determining
the specificity of a given selector.

67
00:04:27.090 --> 00:04:31.530
So those are the big rules when it
comes to figuring out specificity.

68
00:04:31.530 --> 00:04:33.620
Then we have all
the exceptions to the rules.

69
00:04:33.620 --> 00:04:36.320
So here's the way the exceptions work.

70
00:04:36.320 --> 00:04:40.197
First of all,
what has no specificity to it at all.

71
00:04:40.197 --> 00:04:45.139
When you see it in a selector,
we don't count any of them, these.

72
00:04:45.139 --> 00:04:50.765
That would be the universal selector,
the star and the where pseudo-class.

73
00:04:50.765 --> 00:04:55.562
Where itself counts for nothing,
any selector inside of the where

74
00:04:55.562 --> 00:05:00.800
parenthesis counts for nothing, so
it has no specificity whatsoever.

75
00:05:01.960 --> 00:05:07.389
We don't need to count in our specificity
calculations the parent child selector or

76
00:05:07.389 --> 00:05:11.602
the adjacent sibling selector or
the general sibling selector.

77
00:05:11.602 --> 00:05:15.334
We don't need to count those at all,
they may show up in a declaration,

78
00:05:15.334 --> 00:05:17.601
we can safely ignore them.

79
00:05:17.601 --> 00:05:23.065
Two big exceptions when you are thinking
about specificity are the not and

80
00:05:23.065 --> 00:05:25.600
is pseudo-classes.

81
00:05:25.600 --> 00:05:29.849
With these,
we don't count them as pseudo-classes, so

82
00:05:29.849 --> 00:05:34.280
we don't count them as not with
its number and is as a number.

83
00:05:34.280 --> 00:05:41.640
But inside of the parenthesis we do
count some portion of those selectors.

84
00:05:41.640 --> 00:05:47.697
And in the case of is we would take
the one with the highest specificity and

85
00:05:47.697 --> 00:05:49.795
the same is true for not.

86
00:05:49.795 --> 00:05:53.694
So whichever selector inside of the
parenthesis has the highest specificity,

87
00:05:53.694 --> 00:05:55.100
that is the one that counts.

88
00:05:56.490 --> 00:05:58.040
So let's see how this works.

89
00:05:59.080 --> 00:06:02.506
We're gonna calculate that
specificity by counting and

90
00:06:02.506 --> 00:06:07.086
then we're going to generate basically
what amounts to a 3-digit array.

91
00:06:07.086 --> 00:06:11.820
It's not a number like 100 or 120,

92
00:06:11.820 --> 00:06:18.999
it is an array of one dash one dash zero,
so think of it that way.

93
00:06:21.442 --> 00:06:26.369
Estelle Weyl has done a great
job of explaining this

94
00:06:26.369 --> 00:06:31.297
specificity work through
her CSS specificity page

95
00:06:31.297 --> 00:06:36.239
which you can get to by
going to specificity.com.

96
00:06:36.239 --> 00:06:39.429
It will walk you through
a lot of these calculations.

97
00:06:39.429 --> 00:06:43.358
At the end she throws in also
inline styling and bang important,

98
00:06:43.358 --> 00:06:46.429
which we're gonna talk
about a little bit later.

99
00:06:46.429 --> 00:06:51.290
It does need a little bit of an update now
with these new pseudo-classes for is and

100
00:06:51.290 --> 00:06:56.800
where, in particular, need to be reflected
on this and she says that's coming.

101
00:06:56.800 --> 00:07:01.253
But that is a great resource to take
a look at, to print out, to put by

102
00:07:01.253 --> 00:07:05.803
your desk if you need a reference
to remember exactly how this works.

103
00:07:07.596 --> 00:07:10.040
So let's do a few of these now.

104
00:07:10.040 --> 00:07:14.701
I'm gonna give you a selector, I've given
you the cheat sheet underneath and I want

105
00:07:14.701 --> 00:07:19.119
you to take a look at that selector and
see if you can calculate its specificity.

106
00:07:19.119 --> 00:07:22.270
So, for example, here is ul li a.

107
00:07:22.270 --> 00:07:26.352
Those are three type selectors,
so we have no ID's,

108
00:07:26.352 --> 00:07:31.177
no classes, three types selectors,
our number is 0-0-3

109
00:07:33.207 --> 00:07:38.230
Go onto another one,
we have div#anchor, one id,

110
00:07:38.230 --> 00:07:43.381
no classes, one type,
so our number is 1-0-1.

111
00:07:45.266 --> 00:07:53.226
A.bgcolor:hover, so we have a with a class
of background color in the hover state.

112
00:07:53.226 --> 00:07:57.523
So here we have no ID's,
we have a class of bgcolor,

113
00:07:57.523 --> 00:08:02.309
we have a pseudo-class of hover and
we have an a selector,

114
00:08:02.309 --> 00:08:06.533
just type selector, so
this would be 0-2-1.

115
00:08:08.806 --> 00:08:12.491
We get more complicated,
you might have something like this,

116
00:08:12.491 --> 00:08:15.143
ul li:nth-child (even) a:any-link.

117
00:08:16.295 --> 00:08:18.660
Count them up again, we have no IDs.

118
00:08:18.660 --> 00:08:22.220
We have two pseudo-classes,
any-link and nth-child.

119
00:08:22.220 --> 00:08:27.620
We have three HTML elements in
that type selectors, 0-2-3.

120
00:08:29.498 --> 00:08:33.980
Here's survey li + li : : first-letter.

121
00:08:33.980 --> 00:08:41.060
So first-letter is a pseudo-element, li of
course is a type selector survey is an ID.

122
00:08:41.060 --> 00:08:45.859
So that would be 1-0-3.

123
00:08:48.051 --> 00:08:53.056
Ul * a.active: link,
we're going to count those up,

124
00:08:53.056 --> 00:08:58.286
link is a pseudo-class,
active is a class, so that is 2.

125
00:08:58.286 --> 00:09:03.300
We have no IDs, we have ul and
a those are type selectors.

126
00:09:03.300 --> 00:09:06.768
And then remember the universal
selector counts for nothing, so

127
00:09:06.768 --> 00:09:08.224
our number is 0-2-2.

128
00:09:10.516 --> 00:09:13.520
Here's article:not(#beginning) h4.small.

129
00:09:13.520 --> 00:09:17.990
So beginning is an ID it's
inside of the not pseudo-class.

130
00:09:17.990 --> 00:09:21.850
We count beginning as an ID,
but we don't count not.

131
00:09:28.930 --> 00:09:31.075
So we have one ID, one class,
two HTML elements, so we have 1-1-2.

132
00:09:34.433 --> 00:09:36.110
What about where?

133
00:09:36.110 --> 00:09:40.439
So here with where we have it inside of
the parenthesis, we have a type selector,

134
00:09:40.439 --> 00:09:42.170
we have a class and we have an ID.

135
00:09:43.210 --> 00:09:47.680
Outside of it we have a type selector and
a pseudo-element.

136
00:09:47.680 --> 00:09:50.095
So how do we count this?

137
00:09:51.476 --> 00:09:56.600
It is actually going to be 0-0-2 remember
with where, it counts for nothing.

138
00:09:56.600 --> 00:09:58.533
Everything inside of
the parenthesis counts for

139
00:09:58.533 --> 00:10:00.640
nothing, where itself counts for nothing.

140
00:10:00.640 --> 00:10:05.258
It is 0-0-2, just the 2 for
the li and the marker.

141
00:10:06.974 --> 00:10:12.640
What about the same selector using is
instead, this is going to be different.

142
00:10:12.640 --> 00:10:17.160
We count the highest specificity
inside of the is parenthesis.

143
00:10:17.160 --> 00:10:21.282
So here we're going to count
the ID of important, but

144
00:10:21.282 --> 00:10:24.510
not the article, not the warning.

145
00:10:24.510 --> 00:10:27.520
So our number this time is 1-0-2.

146
00:10:30.262 --> 00:10:35.251
All right, so with that in mind as to
how we calculate our specificities,

147
00:10:35.251 --> 00:10:38.720
let's go take a look at some
of this inside of code.

