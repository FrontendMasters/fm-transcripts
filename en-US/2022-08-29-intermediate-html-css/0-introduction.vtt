WEBVTT

1
00:00:00.230 --> 00:00:03.384
Welcome everyone, my name is Jen Kramer.

2
00:00:03.384 --> 00:00:07.912
Today, we are going to be talking about
HTML semantics and CSS specificity and

3
00:00:07.912 --> 00:00:08.673
selectors.

4
00:00:08.673 --> 00:00:10.917
So we have a lot of topics to cover today,

5
00:00:10.917 --> 00:00:14.811
we're gonna talk all about the various
types of semantic HTML that can

6
00:00:14.811 --> 00:00:18.981
hopefully introduce you to a few elements
you might not have heard before.

7
00:00:18.981 --> 00:00:23.584
We're going to talk a lot about CSS
selectors and forming them, and

8
00:00:23.584 --> 00:00:24.727
what they mean.

9
00:00:24.727 --> 00:00:29.215
We're even going to get to some of
the new ones like where n is and has, and

10
00:00:29.215 --> 00:00:34.072
some other various ones along the way,
we're gonna talk about inheritance,

11
00:00:34.072 --> 00:00:36.150
specificity, and the cascade.

12
00:00:36.150 --> 00:00:40.670
So these are the three most
misunderstood concepts in CSS.

13
00:00:40.670 --> 00:00:46.045
And as such, this is really a course
about mechanics of CSS as opposed

14
00:00:46.045 --> 00:00:51.157
to how to make things pretty, and
so more on that in just a moment.

15
00:00:51.157 --> 00:00:55.976
So as you follow along here,
the course website is

16
00:00:55.976 --> 00:01:00.576
at semantics-selectors.css.education.

17
00:01:00.576 --> 00:01:04.716
Everything that I talked about today will
be there including a copy of the slides,

18
00:01:04.716 --> 00:01:08.383
all of the code pins that we're going
to work with, and links to GitHub.

19
00:01:08.383 --> 00:01:13.016
We'll actually only use GitHub and VS Code
towards the end of the course, where we

20
00:01:13.016 --> 00:01:17.536
get to the cascade and we have to talk
about different sources for stylesheets.

21
00:01:17.536 --> 00:01:20.560
Other than that, we're just pretty
much going to work in CodePen today.

22
00:01:22.307 --> 00:01:25.870
So as I said,
this is a course on CSS mechanics.

23
00:01:25.870 --> 00:01:30.062
And I have a number of other courses here
in the front-end masters library if you

24
00:01:30.062 --> 00:01:32.076
want to work more on making it pretty.

25
00:01:32.076 --> 00:01:35.292
So if you wanna work on that,
making it pretty stuff,

26
00:01:35.292 --> 00:01:40.223
the getting started with CSS course sounds
pretty simple, it is a project-based

27
00:01:40.223 --> 00:01:44.810
course where we start with an Adobe XD,
picture of how the site should look.

28
00:01:44.810 --> 00:01:46.954
We break it down into smaller pieces, and

29
00:01:46.954 --> 00:01:49.784
we put together the whole
webpage as a portfolio site.

30
00:01:49.784 --> 00:01:53.534
We're not really going to focus so
much on layouts or responsive design,

31
00:01:53.534 --> 00:01:56.860
they come up peripherally, but
it's not a focus of this course,

32
00:01:56.860 --> 00:02:00.426
if you want to learn more about that,
I have a course called CSS Grid and

33
00:02:00.426 --> 00:02:03.240
Flexbox for
responsive layouts version two.

34
00:02:03.240 --> 00:02:07.134
If you watch my initial version of it,
it was from like five years ago,

35
00:02:07.134 --> 00:02:11.226
the new version is completely updated
with all kinds of new material, and

36
00:02:11.226 --> 00:02:13.340
you will learn new things in that one.

37
00:02:13.340 --> 00:02:18.956
And then, finally, advanced techniques in
web dev specifically related to HTML and

38
00:02:18.956 --> 00:02:23.800
CSS, I have a course on that as well,
the advanced CSS layouts course.

39
00:02:23.800 --> 00:02:29.017
And, of course, that is from 2019, so
it's not going to have the very latest CSS

40
00:02:29.017 --> 00:02:34.088
selectors in it, but it does cover things
like CSS variables and calkin, doing all

41
00:02:34.088 --> 00:02:39.070
kinds of crazy math to create different
kinds of layouts for webpages, okay?

42
00:02:39.070 --> 00:02:43.575
Hopefully, that gives everybody a pretty
good overview of where else you can go if

43
00:02:43.575 --> 00:02:46.330
there are other things you
wanna learn about CSS.

44
00:02:48.120 --> 00:02:52.172
So let's start with what I see on Twitter
and probably what you see on Twitter too,

45
00:02:52.172 --> 00:02:56.460
which is that &lt;div&gt; is totally awesome and
we don't need anything else.

46
00:02:56.460 --> 00:02:58.728
It just does everything we need it to do,

47
00:02:58.728 --> 00:03:02.770
maybe the only other element
that we need is a span element.

48
00:03:02.770 --> 00:03:07.740
And there is a place for
absolutely everything on the web,

49
00:03:07.740 --> 00:03:14.443
you can find excuses to do absolutely
anything with the right kind of website.

50
00:03:14.443 --> 00:03:19.188
Even though, that blinking spinning stuff
does a really great thing on a hypnotist's

51
00:03:19.188 --> 00:03:21.788
website, so yes,
there may be plenty of use for

52
00:03:21.788 --> 00:03:25.041
divs and spans, but
there are better ways of doing things.

53
00:03:25.041 --> 00:03:29.306
And we should be making those choices
because HTML and CSS are two-thirds of

54
00:03:29.306 --> 00:03:34.036
the front-end, when we ignore them in
favor of just JavaScript, you're ignoring

55
00:03:34.036 --> 00:03:38.720
two-thirds of the tools that you have to
work with when working on the front-end.

56
00:03:40.070 --> 00:03:43.471
Other things that I hear online and
Twitter are that pick div and

57
00:03:43.471 --> 00:03:47.788
span are good enough to give me everything
that I want, and HTML styling sucks.

58
00:03:47.788 --> 00:03:52.616
I agree with you, we'll talk about
how we can get around that today.

59
00:03:52.616 --> 00:03:56.780
HTML is a relic of the 90s and we should
redesign the web to get rid of it,

60
00:03:56.780 --> 00:03:59.528
good luck with that,
30 years after launch.

61
00:03:59.528 --> 00:04:04.910
HTML and CSS should be in JavaScript,
I'll show you why they shouldn't.

62
00:04:04.910 --> 00:04:08.200
And also, code should be efficient and
performant, Mine is.

63
00:04:08.200 --> 00:04:12.310
A lot of people like to hinge on the topic
of performance as to why their JavaScript

64
00:04:12.310 --> 00:04:16.299
is superior, and that HTML and CSS
are somehow dragging down the webpage, but

65
00:04:16.299 --> 00:04:19.684
they are probably not the source
of your multi-megabyte files and

66
00:04:19.684 --> 00:04:23.830
all of the things that have to
execute to make your webpage work.

67
00:04:23.830 --> 00:04:26.611
I also hear things like CSS is stupid,
it's unpredictable,

68
00:04:26.611 --> 00:04:28.224
I never know what I'm going to get.

69
00:04:28.224 --> 00:04:32.252
I hope that by the end of today that
will no longer be an issue for you,

70
00:04:32.252 --> 00:04:36.721
it is very predictable, you can indeed
predict what you're going to get.

71
00:04:36.721 --> 00:04:39.129
Specificity and the cascade should die.

72
00:04:39.129 --> 00:04:43.487
They are one of the most wonderful parts
of CSS once you understand how they work

73
00:04:43.487 --> 00:04:47.733
and how to leverage them, it's amazing
the tricks that you can do with CSS.

74
00:04:47.733 --> 00:04:52.312
And long live classes,
the only part of CSS that makes sense,

75
00:04:52.312 --> 00:04:55.940
yes, classes are very useful on occasion.

76
00:04:55.940 --> 00:05:00.495
But I'm going to show you that
when you expand your repertoire

77
00:05:00.495 --> 00:05:04.875
in terms of CSS selectors that
are based on HTML semantics,

78
00:05:04.875 --> 00:05:09.890
you actually expand your depth of
what you can do on the front-end.

79
00:05:09.890 --> 00:05:13.459
You stick to just classes and divs and
spans, it's like having an old whole

80
00:05:13.459 --> 00:05:16.940
orchestra, but we're just gonna
focus on the violin section.

81
00:05:16.940 --> 00:05:19.699
Let's focus on the whole range and
depth of what we can do.

82
00:05:19.699 --> 00:05:23.686
And then, finally, CSS selectors are
deficient or performant like my classes,

83
00:05:23.686 --> 00:05:27.035
this has also been debunked,
I have some references for you on this,

84
00:05:27.035 --> 00:05:28.620
you can go do some more reading.

85
00:05:28.620 --> 00:05:32.793
If your page is not performing well,
a good place to sort of resize your

86
00:05:32.793 --> 00:05:36.740
images and all of the stuff
that's in your JavaScript files.

87
00:05:36.740 --> 00:05:40.326
Probably, those are going to be the things
that are causing your page to slow down

88
00:05:40.326 --> 00:05:41.710
long before your HTML and CSS.

89
00:05:43.820 --> 00:05:48.966
So as a result, because people put so
much emphasis on JavaScript, so

90
00:05:48.966 --> 00:05:54.025
little emphasis on HTML and CSS,
we wind up with examples like this,

91
00:05:54.025 --> 00:05:56.660
this is a CodePen that codes a link.

92
00:05:57.840 --> 00:06:02.567
And look how much code we had
to write in order to code a link

93
00:06:02.567 --> 00:06:07.110
because we did not know
the a element in HTML.

94
00:06:07.110 --> 00:06:12.816
And we have made it even accessible here
with our roll designation and so forth.

95
00:06:12.816 --> 00:06:16.324
I'm not saying this is good code but
this is why this happens,

96
00:06:16.324 --> 00:06:20.916
because people do not understand HTML and
do not know what's available to them.

97
00:06:20.916 --> 00:06:25.844
A good analogy to this is if we think
about the construction industry

98
00:06:25.844 --> 00:06:31.290
in a very high level,
we start with architecture and planning.

99
00:06:31.290 --> 00:06:33.474
They go in and play in a building,

100
00:06:33.474 --> 00:06:37.850
they pass it over to the construction
people via blueprints.

101
00:06:37.850 --> 00:06:40.278
The blueprints describe
what is going to be built,

102
00:06:40.278 --> 00:06:42.770
the construction people actually build it.

103
00:06:42.770 --> 00:06:45.888
If you take a look,
the architecture and planning and

104
00:06:45.888 --> 00:06:48.728
the blueprints are on one
side of this equation,

105
00:06:48.728 --> 00:06:52.344
the blueprints are the product
of what they do when they plan.

106
00:06:52.344 --> 00:06:56.411
And the construction people that is
where they start, so they overlap,

107
00:06:56.411 --> 00:06:58.620
they're in the middle of blueprints.

108
00:06:58.620 --> 00:07:03.517
The same thing is true here when we think
about the continuum of web development,

109
00:07:03.517 --> 00:07:08.053
we start with UX and UI and writing
content, then we go into HTML, CSS, and

110
00:07:08.053 --> 00:07:10.960
JavaScript, and so on and so forth.

111
00:07:10.960 --> 00:07:13.310
We have the same kind
of overlaps happening.

112
00:07:13.310 --> 00:07:17.650
We tend to think of UX UI and
content all together as a unit.

113
00:07:17.650 --> 00:07:20.454
So those people
are producing this content,

114
00:07:20.454 --> 00:07:25.399
along with their Figma prototypes and
whatever else, they're gonna pass that

115
00:07:25.399 --> 00:07:30.510
on over to the development team that
are going to put these things together.

116
00:07:30.510 --> 00:07:33.283
The overlapping part in the middle
is the content of the webpage.

117
00:07:33.283 --> 00:07:36.223
Content is the moment that we transition

118
00:07:36.223 --> 00:07:41.070
from planning a website
into building that website.

119
00:07:41.070 --> 00:07:45.580
And so we as developers, have a really
bad habit of not reading the content.

120
00:07:45.580 --> 00:07:49.750
It is whatever it is, we don't care
because we are so busy writing the code,

121
00:07:49.750 --> 00:07:52.250
and we are all guilty
of this including me.

122
00:07:52.250 --> 00:07:57.266
I would actually start to argue at
this point in time that content may

123
00:07:57.266 --> 00:08:02.546
be better delivered if it's actually
marked up by the UX UI team first,

124
00:08:02.546 --> 00:08:05.460
and then pass to the development team.

125
00:08:05.460 --> 00:08:08.280
And the reason why is we wind up
getting more semantics into it.

126
00:08:08.280 --> 00:08:12.229
And, of course, the development team
could add any additional dudes or

127
00:08:12.229 --> 00:08:16.390
classes that are needed in order to
completely lay out the page and so forth.

