WEBVTT

1
00:00:00.469 --> 00:00:05.754
If our body here on the page,
our declaration here on the page says that

2
00:00:05.754 --> 00:00:10.699
our font is Arial, what would happen
if I start by just saying ul?

3
00:00:10.699 --> 00:00:16.340
And I am going to put in a font-family for
this, probably something like times.

4
00:00:16.340 --> 00:00:21.131
What do you predict is going to happen
when I do that here on the page?

5
00:00:21.131 --> 00:00:24.494
How many people say the font stays Arial?

6
00:00:24.494 --> 00:00:29.699
How many people say the font goes to ul or
it goes to our times?

7
00:00:29.699 --> 00:00:33.507
Okay, everybody here on the page
says it goes to times, so

8
00:00:33.507 --> 00:00:37.644
let's make sure that that is true,
font-family: Times;.

9
00:00:37.644 --> 00:00:40.620
I'll even be lazy and
just do times like that.

10
00:00:44.905 --> 00:00:49.840
Okay, well, so it all went to times,
why did that happen?

11
00:00:49.840 --> 00:00:50.995
&gt;&gt; Specificity.

12
00:00:50.995 --> 00:00:53.118
&gt;&gt; Is it specificity?

13
00:00:53.118 --> 00:00:54.556
&gt;&gt; Am I misusing that?

14
00:00:54.556 --> 00:01:00.865
&gt;&gt; Specificity might be part of it, times
in the font-family property is inherited.

15
00:01:00.865 --> 00:01:05.822
We have our ul right here that
starts our entire list, and

16
00:01:05.822 --> 00:01:08.625
we just said ul should be times.

17
00:01:08.625 --> 00:01:16.112
So it's times, and it is then, therefore,
inherited by all of its children.

18
00:01:16.112 --> 00:01:19.730
So we have times being inherited
by the ordered list, see that,

19
00:01:19.730 --> 00:01:21.883
and the unordered lists inside of it.

20
00:01:21.883 --> 00:01:25.427
So it's not gonna select just the ul's and
not the ol's,

21
00:01:25.427 --> 00:01:29.476
it's gonna select the ul at the top,
and then due to inheritance,

22
00:01:29.476 --> 00:01:33.264
it's going to inherit the whole
way through the entire list.

23
00:01:33.264 --> 00:01:36.719
That's what's going on there, okay?

24
00:01:36.719 --> 00:01:41.302
Likewise, if we just said
something like color, oops,

25
00:01:41.302 --> 00:01:44.551
color: red; also one of my favorites.

26
00:01:44.551 --> 00:01:47.262
Everything is going to turn red,
except for the links.

27
00:01:47.262 --> 00:01:51.362
So that's why things tend
not to work as expected.

28
00:01:51.362 --> 00:01:53.077
It could be something like this.

29
00:01:53.077 --> 00:01:55.478
So that is just the ul by itself.

30
00:01:55.478 --> 00:01:58.257
Let's take a look at a class and
how a class works.

31
00:01:58.257 --> 00:02:01.857
I'm pretty sure you guys
know how this works.

32
00:02:01.857 --> 00:02:04.937
So if I just said .nested instead,

33
00:02:04.937 --> 00:02:09.260
then only my nested list
is going to inherit that.

34
00:02:09.260 --> 00:02:13.004
And again,
color: red is an inherited property.

35
00:02:13.004 --> 00:02:18.765
So because my li here has a class
of nested, the ol inside of it and

36
00:02:18.765 --> 00:02:25.294
the ul inside of that and the ol inside
of that, all of that will turn red.

37
00:02:25.294 --> 00:02:28.792
And then the last one, and
do I have an id in here?

38
00:02:28.792 --> 00:02:30.800
I do, I have a last id.

39
00:02:30.800 --> 00:02:34.720
So if I said my last
item had the color red,

40
00:02:34.720 --> 00:02:38.532
then the li with that id would have that.

41
00:02:38.532 --> 00:02:44.557
Okay, so this is probably the stuff
you're familiar with here, right?

42
00:02:44.557 --> 00:02:48.620
How many times can an id appear on a page?

43
00:02:48.620 --> 00:02:50.208
One time, right?

44
00:02:50.208 --> 00:02:54.582
So we can't reuse id's, they tend not to
really be used much in CSS styling for

45
00:02:54.582 --> 00:02:57.519
that reason,
tend to be used more with JavaScript.

46
00:02:57.519 --> 00:02:59.302
You can use them with CSS though.

47
00:02:59.302 --> 00:03:02.480
Now, it is possible to also
group together your selectors.

48
00:03:02.480 --> 00:03:07.618
And so we could do that, we could say,

49
00:03:07.618 --> 00:03:12.605
for example, our last, .nested.

50
00:03:12.605 --> 00:03:15.977
So these are comma separated,
these are groups together.

51
00:03:15.977 --> 00:03:20.802
So each one of these parameters
is evaluated independently, okay?

52
00:03:20.802 --> 00:03:23.492
So we evaluate last and we apply a color.

53
00:03:23.492 --> 00:03:26.534
We evaluate nested, we apply the color.

54
00:03:26.534 --> 00:03:30.972
They are not necessarily all
those things have to exist, so

55
00:03:30.972 --> 00:03:35.692
I could say, I don't know,
george, last and george, okay?

56
00:03:35.692 --> 00:03:41.681
Last is still gonna turn red,
george isn't anywhere on this page.

57
00:03:41.681 --> 00:03:47.623
But it's a legit CSS selector, and
CSS perfectly happy to ignore it.

58
00:03:47.623 --> 00:03:50.669
Just not there on the page, okay?

59
00:03:50.669 --> 00:03:54.998
So that is what a group
of selectors look like.

60
00:03:54.998 --> 00:03:56.962
You can make all of
those quite complicated.

61
00:03:59.737 --> 00:04:03.625
All right, then we start to
get a little bit crazier, and

62
00:04:03.625 --> 00:04:06.062
that is the descendant selectors.

63
00:04:06.062 --> 00:04:07.600
So what is a descendant selector?

64
00:04:10.991 --> 00:04:14.639
You wanna have a definition for
a descendant selector?

65
00:04:14.639 --> 00:04:18.337
&gt;&gt; Selecting something that's
exclusively a child of another element.

66
00:04:18.337 --> 00:04:19.822
&gt;&gt; Maybe, yeah.

67
00:04:19.822 --> 00:04:22.848
So let's talk about families.

68
00:04:22.848 --> 00:04:27.531
[LAUGH] Families are always a challenge.

69
00:04:27.531 --> 00:04:33.201
So, here at the very top of our family,
we have a ul, we have an immediate child.

70
00:04:33.201 --> 00:04:36.539
[COUGH] That's this first li right here,
okay?

71
00:04:36.539 --> 00:04:38.602
We also have a second child.

72
00:04:38.602 --> 00:04:40.631
That's the second li here.

73
00:04:40.631 --> 00:04:45.422
And we can simplify this just by turning
up the little triangles here in our

74
00:04:45.422 --> 00:04:47.673
HTML and looking at this, right?

75
00:04:47.673 --> 00:04:54.043
So this ul has one, two, three, four,
five, six, seven, eight children.

76
00:04:54.043 --> 00:04:56.595
Yeah, and they're all li's.

77
00:04:58.299 --> 00:04:59.898
So that is the first level,

78
00:04:59.898 --> 00:05:03.660
that's just directly a parent-child
relationship, right?

79
00:05:03.660 --> 00:05:07.522
What is the relationship of
these li's to each other?

80
00:05:07.522 --> 00:05:11.938
What would they be considered
to be in a family tree?

81
00:05:11.938 --> 00:05:14.153
&gt;&gt; Siblings?

82
00:05:14.153 --> 00:05:15.276
&gt;&gt; They are siblings, right?

83
00:05:15.276 --> 00:05:17.705
We have first siblings,
we have last siblings,

84
00:05:17.705 --> 00:05:19.552
we have all the siblings in between.

85
00:05:19.552 --> 00:05:21.225
So those are siblings, and

86
00:05:21.225 --> 00:05:25.026
we have siblings selectors that
are targeting those, okay?

87
00:05:25.026 --> 00:05:31.230
We also have,
just to remind you of this as well, right?

88
00:05:31.230 --> 00:05:37.224
So that second li has
some children as well.

89
00:05:37.224 --> 00:05:40.754
It's child is singular,

90
00:05:40.754 --> 00:05:45.412
has one child, it is an ol, okay?

91
00:05:45.412 --> 00:05:50.126
So what is the relationship
between this ul and this ol?

92
00:05:50.126 --> 00:05:55.494
What is the relationship between that
first ul and that ol there on line seven?

93
00:05:55.494 --> 00:05:56.506
&gt;&gt; Grandchildren.

94
00:05:56.506 --> 00:05:59.684
&gt;&gt; They're grandchildren, right, okay?

95
00:05:59.684 --> 00:06:01.222
So yes, that is absolutely true.

96
00:06:01.222 --> 00:06:04.911
In human families, they would be
grandchildren, here we just call them

97
00:06:04.911 --> 00:06:08.668
descendants, because after parents and
children, we just lose track.

98
00:06:08.668 --> 00:06:10.438
They're all descendants, okay?

99
00:06:10.438 --> 00:06:15.726
So that ol, this ul, and
all of its children, [LAUGH] and it's ol.

100
00:06:15.726 --> 00:06:20.637
And this a, if we go all the way
down here in line 15 in this a,

101
00:06:20.637 --> 00:06:27.415
it is related to that first ul,
they are descendants, Okay?

102
00:06:27.415 --> 00:06:31.956
That is useful to know because then we
start to write selectors based on that.

103
00:06:31.956 --> 00:06:37.031
So the selector that you write
all the time, That would

104
00:06:37.031 --> 00:06:42.352
look something like this,
let's say ul a, okay?

105
00:06:42.352 --> 00:06:45.224
So let's turn all of the links red, ul a.

106
00:06:45.224 --> 00:06:50.221
So, a is going to be descended from ul,
and this starts to bring in,

107
00:06:50.221 --> 00:06:54.274
one of the other things is
going to be on my gravestone.

108
00:06:54.274 --> 00:06:58.366
Which is that when you're
working with selectors,

109
00:06:58.366 --> 00:07:01.528
you want to read them from right to left,

110
00:07:01.528 --> 00:07:06.279
even though you're writing
them from left to right, okay?

111
00:07:06.279 --> 00:07:12.356
So, yes, we write it as ul a,
but the way we read this is for

112
00:07:12.356 --> 00:07:17.832
all a elements that
are descended from ul elements.

113
00:07:17.832 --> 00:07:20.955
In this case, we select all of the links
here because we determined all of them

114
00:07:20.955 --> 00:07:22.360
are related back to that first ul.

115
00:07:22.360 --> 00:07:28.495
How could we make this more
specific to nested unordered lists?

116
00:07:28.495 --> 00:07:33.123
Anyone have an idea how we could
make that more specific just to

117
00:07:33.123 --> 00:07:35.349
the nested unordered lists?

118
00:07:37.720 --> 00:07:40.014
You can think about this
one here on line 10.

119
00:07:40.014 --> 00:07:41.880
No, don't use the class.

120
00:07:41.880 --> 00:07:45.567
How can we make it more specific?

121
00:07:45.567 --> 00:07:52.312
So one way we could do that is we could
just line up more parameters here.

122
00:07:52.312 --> 00:07:55.096
We could say ul ul a, Right?

123
00:07:55.096 --> 00:07:56.772
So now, we have a pattern.

124
00:07:56.772 --> 00:08:00.827
So we're looking at a pattern of a ul,
that's the parent.

125
00:08:00.827 --> 00:08:05.447
We have a ul inside of that, and
then we have a link inside of that.

126
00:08:05.447 --> 00:08:07.488
So that's how we got there.

127
00:08:07.488 --> 00:08:13.793
Now, the ordered list also matches that
pattern, cuz we have a ul on line 4,

128
00:08:13.793 --> 00:08:18.352
we have a ul on line 10, and
we have a link on line 15.

129
00:08:18.352 --> 00:08:22.154
So that second link is
also fits that pattern.

130
00:08:28.582 --> 00:08:34.529
&gt;&gt; In chat,
we have ul descendant selector a.

131
00:08:34.529 --> 00:08:40.232
So they put ul.nested and ul, li a.

132
00:08:46.324 --> 00:08:47.490
&gt;&gt; Yeah,
&gt;&gt; My guess is.

133
00:08:47.490 --> 00:08:51.903
&gt;&gt; There are many guesses and
there's many ways to do this.

134
00:08:51.903 --> 00:08:54.694
With so many elements to choose from,

135
00:08:54.694 --> 00:08:58.717
we can write all kinds of
levels of selectors, right?

136
00:08:58.717 --> 00:09:02.451
I always write all kinds
of levels of selectors.

137
00:09:02.451 --> 00:09:06.495
Okay, so that is the concept
of a descendant selector.

138
00:09:06.495 --> 00:09:10.336
They have their space separated, and

139
00:09:10.336 --> 00:09:15.024
they line up here all in a row,
just like this.

140
00:09:15.024 --> 00:09:19.391
Now, we also have the, specifically

141
00:09:19.391 --> 00:09:24.173
a parent-child relationship, right?

142
00:09:24.173 --> 00:09:25.643
We talked about just a parent-child.

143
00:09:25.643 --> 00:09:33.041
So what if we were interested in,
let's say the, looking at my list here.

144
00:09:33.041 --> 00:09:37.277
Let's say we wanna select,

145
00:09:39.234 --> 00:09:44.221
The second ol right here, okay?

146
00:09:44.221 --> 00:09:46.850
So not the first ol but the second ol.

147
00:09:46.850 --> 00:09:50.486
Let's say we wanna select that,
how might we go about doing that?

148
00:09:59.171 --> 00:10:00.092
Anybody have any ideas?

149
00:10:03.627 --> 00:10:06.665
Sometimes it helps just to
sort of tidy up your HTML,

150
00:10:06.665 --> 00:10:09.372
you can always fold up
what's not important.

151
00:10:14.671 --> 00:10:19.382
&gt;&gt; Do we wanna target an ol, li, ol?

152
00:10:19.382 --> 00:10:23.435
&gt;&gt; Yeah.
&gt;&gt; That's descendant of a list item as to

153
00:10:23.435 --> 00:10:25.875
send them down the list.

154
00:10:25.875 --> 00:10:28.026
Ul, li, ol, excuse me.

155
00:10:28.026 --> 00:10:33.621
&gt;&gt; Okay, so, ul, li, ol,
that's what you're saying?

156
00:10:33.621 --> 00:10:34.143
&gt;&gt; Yeah.

157
00:10:34.143 --> 00:10:38.845
&gt;&gt; Okay, and let's say,
border: 1px solid blue.

158
00:10:43.547 --> 00:10:47.130
Okay, so that's not quite specific enough.

159
00:10:47.130 --> 00:10:48.500
What else could we do?

160
00:10:48.500 --> 00:10:50.351
There are many, many possibilities.

161
00:10:52.441 --> 00:10:58.916
So one thing we could try, we have a ul,

162
00:10:58.916 --> 00:11:03.636
we have an li, we have an ol.

163
00:11:07.716 --> 00:11:12.493
We have a ul, and we have an ol, right?

164
00:11:12.493 --> 00:11:16.212
What if we did ul, ol, ul, ol?

165
00:11:22.193 --> 00:11:27.557
Yeah, that's totally it, that's what
you meant, ul, ol, ul, ol, okay?

166
00:11:27.557 --> 00:11:31.446
So that's gonna put
a border around the list.

167
00:11:31.446 --> 00:11:36.823
What if I want a border around
the list items, what would I add?

168
00:11:36.823 --> 00:11:37.367
&gt;&gt; Li.
&gt;&gt; Li.

169
00:11:37.367 --> 00:11:40.832
Now, it's around the list items.

170
00:11:40.832 --> 00:11:45.121
See the difference, Okay?

171
00:11:45.121 --> 00:11:47.101
So you can string these things together.

172
00:11:47.101 --> 00:11:51.696
Now, obviously, this kind of pattern
matching, a takes a lot of time, right,

173
00:11:51.696 --> 00:11:55.025
which is part of the reason that
we love to you use classes.

174
00:11:55.025 --> 00:11:59.952
And B, what happens if that pattern
appears somewhere else on your page and

175
00:11:59.952 --> 00:12:03.327
then you wind up getting
some unexpected styling?

176
00:12:03.327 --> 00:12:06.737
Yes, yes to all of that,
that is absolutely true.

177
00:12:06.737 --> 00:12:11.691
If you were writing a custom webpage and
you have complete control over the HTML

178
00:12:11.691 --> 00:12:16.581
and complete control over the CSS,
this can feel a little bit sketchy to you.

179
00:12:16.581 --> 00:12:20.888
But I know there are many of you out
there who are working in WordPress,

180
00:12:20.888 --> 00:12:24.100
and sometimes you don't have
access to the HTML when

181
00:12:24.100 --> 00:12:27.172
you're winding up putting
in styling like this.

182
00:12:27.172 --> 00:12:30.634
You're working in Squarespace,
you're working in Wix,

183
00:12:30.634 --> 00:12:33.473
you're working in Webflow,
you're working in

184
00:12:33.473 --> 00:12:38.197
all kinds of different platforms where
maybe you don't have access to the HTML.

185
00:12:38.197 --> 00:12:41.881
You've got to work with the HTML you have,
not the HTML you wish you had.

186
00:12:41.881 --> 00:12:46.807
And so that's where sometimes these kinds
of really weirdo selectors can come

187
00:12:46.807 --> 00:12:47.860
in super handy.

188
00:12:47.860 --> 00:12:51.869
Because you're trying to target
some things on this page that

189
00:12:51.869 --> 00:12:54.345
you are just not able to do otherwise.

190
00:12:54.345 --> 00:12:57.480
I agree,
this gets a little bit ridiculous.

191
00:12:57.480 --> 00:13:03.040
But today, we are investigating what
we can, not necessarily what we should.

192
00:13:03.040 --> 00:13:07.463
That is the set of selectors that you are
probably most familiar with at this point

193
00:13:07.463 --> 00:13:07.994
in time.

194
00:13:07.994 --> 00:13:11.118
We had just HTML elements,
they're called type selectors.

195
00:13:11.118 --> 00:13:14.204
We had classes, we had id's,
we had groups of selectors, and

196
00:13:14.204 --> 00:13:15.728
we had descendant selectors.

197
00:13:15.728 --> 00:13:18.472
Those are probably five that
you were using most commonly.

198
00:13:18.472 --> 00:13:21.852
Very fast review of all those, and
then we're gonna come back and

199
00:13:21.852 --> 00:13:26.338
we're gonna get into our parent-child or
adjacent and general sibling selectors and

200
00:13:26.338 --> 00:13:27.580
attribute selectors.

