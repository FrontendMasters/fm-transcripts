WEBVTT

1
00:00:01.070 --> 00:00:06.420
&gt;&gt; Steve Kinney: And with that epic
buildup, I bring to you Service Worker.

2
00:00:06.420 --> 00:00:08.260
So far today,
we've worked with a web worker.

3
00:00:08.260 --> 00:00:11.350
We've acknowledged the existence
of shared workers, right?

4
00:00:11.350 --> 00:00:16.058
Just to remind you, a web worker is
one frame or page per web worker.

5
00:00:16.058 --> 00:00:18.938
If you had multiple tabs open and
you spun up a web worker,

6
00:00:18.938 --> 00:00:20.498
they would each get their own.

7
00:00:20.498 --> 00:00:22.487
A shared worker is a worker.

8
00:00:22.487 --> 00:00:27.030
If you have multiple tabs open to the same
origin, they can all share that worker.

9
00:00:28.420 --> 00:00:31.220
Service Worker is a little bit different,
right?

10
00:00:31.220 --> 00:00:34.400
And we've kind of danced around it,
we've laid a bunch of building blocks.

11
00:00:34.400 --> 00:00:39.171
And now, we have arrived to really
what makes most things that

12
00:00:39.171 --> 00:00:44.056
make a progressive web app a web
app start with Service Worker.

13
00:00:45.077 --> 00:00:46.259
&gt;&gt; Steve Kinney: Cool.

14
00:00:46.259 --> 00:00:50.098
&gt;&gt; Steve Kinney: Service Worker
&gt;&gt; Steve Kinney: We spawned,

15
00:00:50.098 --> 00:00:54.275
could say a word,
we spawned those web workers.

16
00:00:54.275 --> 00:00:57.345
And we spawned them and
we could terminate them, right?

17
00:00:57.345 --> 00:00:58.655
In our main thread.

18
00:00:58.655 --> 00:01:00.485
The main thread was still the boss.

19
00:01:00.485 --> 00:01:04.389
Service worker, I think the verb I want
you to think of is installed, right?

20
00:01:04.389 --> 00:01:08.195
And instal, if you think about other
platforms, mobile platforms and

21
00:01:08.195 --> 00:01:11.695
applications, install should
seem really interesting to you.

22
00:01:11.695 --> 00:01:14.330
I install stuff all the time on my phone.

23
00:01:14.330 --> 00:01:15.320
I install apps.

24
00:01:16.550 --> 00:01:17.610
Interesting.

25
00:01:17.610 --> 00:01:19.780
Now, that's an interesting
thought to think.

26
00:01:19.780 --> 00:01:21.300
On that note, let's talk about caching.

27
00:01:22.730 --> 00:01:24.800
So how does it normally work?

28
00:01:24.800 --> 00:01:27.030
We can check with a server, right?

29
00:01:27.030 --> 00:01:30.730
And here, we can have a web application
where there's an index dot HTML and

30
00:01:30.730 --> 00:01:32.590
it's super simple and
it calls an app dot js and

31
00:01:32.590 --> 00:01:34.930
an app dot CSS and it has a fancy logo.

32
00:01:36.420 --> 00:01:40.280
And the problem with caching
these resources is that

33
00:01:40.280 --> 00:01:41.920
they could've changed, right?

34
00:01:41.920 --> 00:01:46.435
You could've made some, let's say you had
an app that had a shopping cart that was

35
00:01:46.435 --> 00:01:48.710
lie, and
you decided to implement it, right?

36
00:01:48.710 --> 00:01:51.410
It would be cool if users
had that feature, right?

37
00:01:51.410 --> 00:01:54.926
Or your important bug fix, or
anything along those lines.

38
00:01:54.926 --> 00:01:59.526
So problem is app dot js, that app
dot js could be something different,

39
00:01:59.526 --> 00:02:03.450
app dot css could be something
different than it was before.

40
00:02:03.450 --> 00:02:05.483
We don't really know, right?

41
00:02:05.483 --> 00:02:06.927
So we have a bunch of
ways that we can check.

42
00:02:06.927 --> 00:02:09.509
We can be like hey, check with
the server to see if it's new, right?

43
00:02:09.509 --> 00:02:15.060
Let's see if it's like last modified tag
is if it's after the one I currently have.

44
00:02:15.060 --> 00:02:16.600
There's all sorts of ways.

45
00:02:16.600 --> 00:02:20.680
And a lot of this involves just completely
talking to the network a whole lot,

46
00:02:20.680 --> 00:02:21.580
has anything changed?

47
00:02:21.580 --> 00:02:24.510
I have this file,
is it still the right file?

48
00:02:24.510 --> 00:02:25.820
I don't know, can you tell me?

49
00:02:25.820 --> 00:02:28.130
I'm feeling very insecure about this.

50
00:02:28.130 --> 00:02:31.910
And so we keep talking to the server,
we keep trying to find out,

51
00:02:31.910 --> 00:02:35.640
the browser has cache, is that
still the one we should use or not?

52
00:02:35.640 --> 00:02:36.776
That's one way.

53
00:02:36.776 --> 00:02:40.110
Another way that you'll
see it a lot of times, and

54
00:02:40.110 --> 00:02:43.230
if you've worked with the Rails
application, you'll see it.

55
00:02:43.230 --> 00:02:48.360
You saw it in web pack files, is what we
do is we look at the contents of the file

56
00:02:48.360 --> 00:02:51.300
and we give it a unique name, right?

57
00:02:51.300 --> 00:02:55.864
So this HTML file is looking for
app-ab4182c dot js.

58
00:02:57.570 --> 00:03:02.270
If Mike makes no changes, right,
to that file, and we generate it again,

59
00:03:02.270 --> 00:03:05.890
it will be the same file,
you will get the same fingerprint on it.

60
00:03:05.890 --> 00:03:07.500
You'll get ab4182c.

61
00:03:07.500 --> 00:03:11.991
Which means if your index.html was
told for looking for app-ab4182c.js,

62
00:03:11.991 --> 00:03:13.172
it hasn't changed.

63
00:03:13.172 --> 00:03:15.640
Cuz it changed, it had a different number.

64
00:03:15.640 --> 00:03:19.510
If your index.html says go look for cdf,

65
00:03:19.510 --> 00:03:25.049
making up fake numbers on the fly is hard,
486, right?

66
00:03:25.049 --> 00:03:26.160
Well, that's a different file.

67
00:03:26.160 --> 00:03:27.570
We know not to load the one from cache.

68
00:03:27.570 --> 00:03:29.570
We're not even asking from
the one you have in cache.

69
00:03:29.570 --> 00:03:31.129
Go get this fresh one, right?

70
00:03:31.129 --> 00:03:34.020
So every time the content
of a URL changes,

71
00:03:34.020 --> 00:03:38.590
we know that is a different
resource than it was before.

72
00:03:38.590 --> 00:03:42.140
And so, we can say stuff like hey,
browser, hold on to this for a year.

73
00:03:43.190 --> 00:03:45.617
Now, you're getting the promises
the browser will listen to you.

74
00:03:45.617 --> 00:03:48.183
But can tell the browser
to do whatever you want.

75
00:03:48.183 --> 00:03:50.050
So we'll say hold on to this for a year.

76
00:03:50.050 --> 00:03:55.710
And as long as I'm asking for app-ab4182c,
get me that one again, right?

77
00:03:55.710 --> 00:03:58.810
If you already have it stored locally,
use that one.

78
00:03:58.810 --> 00:04:00.680
Don't fire a network request.

79
00:04:00.680 --> 00:04:07.268
But that all revolves on the index.html
being the keeper of truth, right?

80
00:04:07.268 --> 00:04:12.450
The index.html has to say all right, I'm
no longer asking for that original one.

81
00:04:12.450 --> 00:04:13.710
I'm now asking for a new one.

82
00:04:13.710 --> 00:04:16.412
Which means you know what you can't cache?

83
00:04:16.412 --> 00:04:17.017
&gt;&gt; Speaker 2: Index.html.

84
00:04:17.017 --> 00:04:19.962
&gt;&gt; Steve Kinney: Index.html cuz
it is the keeper of truth, right?

85
00:04:19.962 --> 00:04:23.760
And I don't know a lot about the web, but

86
00:04:23.760 --> 00:04:28.210
I do know that you need to load an HTML
file in order to have a web page, right?

87
00:04:28.210 --> 00:04:30.590
So there's some problems here as well.

88
00:04:30.590 --> 00:04:34.640
But if we have the page,
we know that the resources exist.

89
00:04:34.640 --> 00:04:38.320
And again, as we saw before,
we bake that checksum in there.

90
00:04:38.320 --> 00:04:40.340
These can be limiting, right?

91
00:04:40.340 --> 00:04:43.831
Timestamps and version change
notifications are not enough.

92
00:04:45.324 --> 00:04:47.590
&gt;&gt; Steve Kinney: There's no way for
us to figure out what to do.

93
00:04:47.590 --> 00:04:52.030
We're basically saying hey,
if I put everything this certain way,

94
00:04:52.030 --> 00:04:54.730
will you please behave the way I expect,
right?

95
00:04:54.730 --> 00:04:56.950
And that is the theme we'll see
at the very end of this workshop.

96
00:04:56.950 --> 00:05:02.730
Again, with a friend of
no one called appcache,

97
00:05:02.730 --> 00:05:07.590
where you just say cache these
things forever no matter what.

98
00:05:07.590 --> 00:05:13.731
And there is a narrow set of use
cases where that works for you.

99
00:05:13.731 --> 00:05:18.890
And a large minefield of areas where it
could accidentally blow up for you, right?

100
00:05:18.890 --> 00:05:22.253
Because okay, actually,
we needed to change index.html, and

101
00:05:22.253 --> 00:05:24.955
appcache is like hold on to
the one you have forever.

102
00:05:26.336 --> 00:05:28.210
&gt;&gt; Steve Kinney: No longer forever, right?

103
00:05:28.210 --> 00:05:29.824
I didn't mean forever when I said forever.

104
00:05:31.331 --> 00:05:32.373
&gt;&gt; Steve Kinney: Cool, and yeah,

105
00:05:32.373 --> 00:05:35.710
we'll talk a little more about
Appcache in a little bit.

106
00:05:37.060 --> 00:05:43.590
Now, a few years ago, there was this
idea of the extensible web manifesto.

107
00:05:43.590 --> 00:05:49.110
And the whole defined it which is hey,
web standards people's.

108
00:05:49.110 --> 00:05:52.560
Rather than sitting on ivory tower and
trying to come up an API that's

109
00:05:52.560 --> 00:05:57.230
gonna help us lowly developers,
why don't you give us lower level access?

110
00:05:57.230 --> 00:05:59.530
We know the apps that we're building.

111
00:05:59.530 --> 00:06:03.770
Give us the kind of tools to figure
out how to do stuff ourself and

112
00:06:03.770 --> 00:06:07.940
we will make the best decision for
our applications, right?

113
00:06:07.940 --> 00:06:12.918
So to really, to think about offline can
mean totally different things depending

114
00:06:12.918 --> 00:06:14.910
on what your application is.

115
00:06:14.910 --> 00:06:15.842
Like what parts should be offline?

116
00:06:15.842 --> 00:06:17.699
What parts should fail
if there's no network?

117
00:06:17.699 --> 00:06:21.275
Maybe you don't say I charged your credit
card if you literally didn't talk to

118
00:06:21.275 --> 00:06:22.480
the bank server, right?

119
00:06:22.480 --> 00:06:24.370
But you wanna put stuff in the cart for
later?

120
00:06:24.370 --> 00:06:25.450
Into it, right?

121
00:06:26.660 --> 00:06:27.960
Offline can mean different things.

122
00:06:27.960 --> 00:06:35.240
And to have this one size fits all rule
for how offline works, didn't work, right?

123
00:06:35.240 --> 00:06:40.260
So what we need is a high
degree of customability, right?

124
00:06:40.260 --> 00:06:42.720
We have different needs,
we need to do different things.

125
00:06:42.720 --> 00:06:47.286
And we need to do it based on not
some bespoke new syntax, some bespoke

126
00:06:47.286 --> 00:06:52.650
manifest that is totally different
from the things we're used to using.

127
00:06:52.650 --> 00:06:56.426
We have a really, really powerful
programming language with some really,

128
00:06:56.426 --> 00:06:58.910
really powerful asynchronous
constructs in it.

129
00:06:58.910 --> 00:07:01.948
Why don't you let us use that to access
these lower level things to build

130
00:07:01.948 --> 00:07:04.330
the tools that we actually need?

131
00:07:04.330 --> 00:07:07.510
And again, the answer for
that is our good friend Service Worker.

