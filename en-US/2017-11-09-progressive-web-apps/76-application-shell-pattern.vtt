WEBVTT

1
00:00:00.170 --> 00:00:03.120
&gt;&gt; Mike North: So
the last thing I want to talk about before

2
00:00:03.120 --> 00:00:05.450
we take some final
measurements on our app and

3
00:00:05.450 --> 00:00:10.030
wrap up is a high level patterns for
progressive web app architecture.

4
00:00:10.030 --> 00:00:14.430
So we've learned about a lot of different
ingredients that we can put together

5
00:00:14.430 --> 00:00:18.670
in order to make our app work offline,
background sync, notifications,

6
00:00:18.670 --> 00:00:23.730
terminate a service worker remotely,
using those sequel database that's

7
00:00:23.730 --> 00:00:30.010
right in our browser, but how do we like
adopt a pattern that we know works, right.

8
00:00:30.010 --> 00:00:31.200
We don't want to reinvent the wheel.

9
00:00:32.580 --> 00:00:36.340
So the first pattern I want to
talk about is called App Shell.

10
00:00:36.340 --> 00:00:40.280
And we've actually been sort
of using this the whole time,

11
00:00:40.280 --> 00:00:44.240
at least since we dealt with
enhanced client-side rendering.

12
00:00:44.240 --> 00:00:47.090
If you remember, we grabbed some HTML,

13
00:00:47.090 --> 00:00:50.760
found the stuff that is visible on
the screen no matter what URL we're on.

14
00:00:50.760 --> 00:00:52.020
We kind of started with that.

15
00:00:53.740 --> 00:00:57.630
And that would be, like, the shell,

16
00:00:57.630 --> 00:01:01.920
that is like the User interface
elements of our applications.

17
00:01:01.920 --> 00:01:04.790
At least the top level user interface,
right?

18
00:01:04.790 --> 00:01:07.860
No data is required in order for
that to be rendered, and

19
00:01:07.860 --> 00:01:12.900
that's why we were able to start with that
and get a sub one second initial paint.

20
00:01:14.080 --> 00:01:17.490
The second thing, the second part of this
is stuff that is drawn within the shell

21
00:01:17.490 --> 00:01:19.460
and that would be our grocery items,
right?

22
00:01:19.460 --> 00:01:23.394
If we start adding this stuff to our
grocery item database we'll see new things

23
00:01:23.394 --> 00:01:24.356
showing up there.

24
00:01:26.747 --> 00:01:29.511
&gt;&gt; Mike North: So
here's an example using Twitter Lite,

25
00:01:29.511 --> 00:01:34.220
which is a great progressive web app
that was released very recently.

26
00:01:34.220 --> 00:01:37.310
And they're doing well in
emerging markets with this,

27
00:01:37.310 --> 00:01:40.830
where there's a lot of reluctance
to install native apps on phones.

28
00:01:41.870 --> 00:01:46.750
And you can see here, we've got sort
of the shell, highlighted in orange.

29
00:01:46.750 --> 00:01:48.900
And those are just
the navigation elements,

30
00:01:48.900 --> 00:01:52.660
the core top-level actions
available on the bottom.

31
00:01:52.660 --> 00:01:56.190
And then the tweets,
that's the content that is rendered later.

32
00:01:56.190 --> 00:01:59.470
We need some dynamic thing,
in order for that to work.

33
00:02:01.340 --> 00:02:05.950
And in terms of, if you've ever built a
native mobile app, like often times you'll

34
00:02:05.950 --> 00:02:10.970
have that frame showing, your app
bar that'll render first, and then

35
00:02:10.970 --> 00:02:15.570
you'll kind of wait for your content to
come in and render that as a second step.

36
00:02:15.570 --> 00:02:17.389
This is just adopting that same pattern.

37
00:02:20.430 --> 00:02:26.510
So, it's pretty easy to see where the line
between the shell and the content is here.

38
00:02:28.420 --> 00:02:30.719
Mostly because we already
kind of extracted it out.

39
00:02:32.913 --> 00:02:36.477
&gt;&gt; Mike North: So the idea here is
that we can cache the App Shell with

40
00:02:36.477 --> 00:02:39.640
the Service Worker as we have been.

41
00:02:39.640 --> 00:02:44.470
But the key change that we can make
in order to truly adopt App Shell

42
00:02:44.470 --> 00:02:49.840
is that even in the event
that we're online,

43
00:02:49.840 --> 00:02:53.710
we will render that shell first
before going to the network

44
00:02:53.710 --> 00:02:58.150
to get like HTML content potentially
that we can render in the app.

45
00:02:58.150 --> 00:03:01.090
So in theory,
we don't have to have that bias.

46
00:03:01.090 --> 00:03:03.970
We just have to flip the bias essentially,
where for

47
00:03:03.970 --> 00:03:08.130
the index.html stuff,
we could hit the cache first and

48
00:03:08.130 --> 00:03:11.350
then only go to the network in
the event that the cache is empty.

49
00:03:11.350 --> 00:03:15.280
Because honestly,
index.html is not changing much.

50
00:03:15.280 --> 00:03:18.550
Now, in order for this to work,
you have to have a way of getting

51
00:03:18.550 --> 00:03:22.390
a new index.html to the browser,
in the background.

52
00:03:22.390 --> 00:03:26.060
Because if we were to use the cache first,
we'd be sort of in an app cache territory,

53
00:03:26.060 --> 00:03:30.260
where we're never seeing a new
version of our app deployed.

54
00:03:30.260 --> 00:03:34.360
We never like get rid of the cache,
we never find a new service worker so

55
00:03:34.360 --> 00:03:37.520
you wouldn't necessarily want to do that.

56
00:03:37.520 --> 00:03:40.990
But an interesting pattern that helps you
draw the line between stuff that you can

57
00:03:40.990 --> 00:03:44.640
show almost instantly verses things
that you must hit a server for

58
00:03:44.640 --> 00:03:45.610
in order to get new data

