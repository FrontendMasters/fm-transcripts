WEBVTT

1
00:00:00.190 --> 00:00:01.960
&gt;&gt; Steve Kinney: Let's
try to implement this.

2
00:00:01.960 --> 00:00:06.160
This is our service worker right now,
and it's still got all of our counts.

3
00:00:06.160 --> 00:00:12.490
We don't really need any of that, so
we'll go ahead and get rid of that.

4
00:00:12.490 --> 00:00:17.696
Which means we'll get rid of all the count
stuff in here, cuz that no longer works.

5
00:00:19.976 --> 00:00:26.120
&gt;&gt; Steve Kinney: So first thing we're
gonna need is that fallbackImage, right?

6
00:00:26.120 --> 00:00:30.924
Which in this case is
fallback grossrate-png.

7
00:00:30.924 --> 00:00:33.348
So we can restore that for ourselves.

8
00:00:33.348 --> 00:00:37.367
So we'll say const stuff,

9
00:00:37.367 --> 00:00:41.218
FALLBACK_IMAGE_URL.

10
00:00:41.218 --> 00:00:47.040
And I'm gonna cheat for moment cuz nobody
wants to watch me type a URL, sweet.

11
00:00:49.100 --> 00:00:53.090
So now I will just have access to it,
so I never have to type that again.

12
00:00:53.090 --> 00:00:58.514
So first thing we probably wanna do is we
don't need this function either, is when

13
00:00:58.514 --> 00:01:03.820
we first go ahead and
install the service worker.

14
00:01:03.820 --> 00:01:08.000
Like we now know that this service worker
is going to need this fallback image,

15
00:01:08.000 --> 00:01:09.650
right, it's going to rely on it.

16
00:01:09.650 --> 00:01:11.934
So we wanna make sure that it's cached.

17
00:01:11.934 --> 00:01:15.540
So what we'll do is when that happens,
we do need a cache name.

18
00:01:15.540 --> 00:01:18.550
And in a second,
I'll show you that we actually have some

19
00:01:18.550 --> 00:01:20.970
other ceremony around
this in this application.

20
00:01:20.970 --> 00:01:24.370
There's a folder with a bunch of cache
names to help us manage these things.

21
00:01:24.370 --> 00:01:26.930
Well let's start with
something really simple first.

22
00:01:26.930 --> 00:01:33.321
So we'll say const fallbackImage =,

23
00:01:33.321 --> 00:01:40.302
again, this can be any arbitrary string.

24
00:01:43.456 --> 00:01:43.956
&gt;&gt; Steve Kinney: Cool.

25
00:01:46.749 --> 00:01:48.181
&gt;&gt; Steve Kinney: We got that in place.

26
00:01:50.271 --> 00:01:54.090
&gt;&gt; Steve Kinney: Got a ESLint yelled
at for back text, tried to be fancy.

27
00:01:54.090 --> 00:01:56.180
All right, so we've got our cache name.

28
00:01:56.180 --> 00:01:59.730
And so what we wanna do now
is we want to open the cache.

29
00:01:59.730 --> 00:02:04.337
But normally when we want to make sure
something resolves or rejects and

30
00:02:04.337 --> 00:02:07.637
we want to make sure that
the process stays alive and

31
00:02:07.637 --> 00:02:11.355
doesn't get killed,
what kind of structure do we need?

32
00:02:11.355 --> 00:02:12.609
&gt;&gt; Speaker 2: waitUntil.

33
00:02:12.609 --> 00:02:14.853
&gt;&gt; Steve Kinney: We need event.waitUntil,
exactly.

34
00:02:14.853 --> 00:02:16.867
So bring in the event.

35
00:02:20.633 --> 00:02:24.518
&gt;&gt; Steve Kinney: And we'll say,
event.waitUntil, and

36
00:02:24.518 --> 00:02:30.230
event.waitUntil is going to
just simply take a promise.

37
00:02:30.230 --> 00:02:34.460
We know that caches.open
returns a promise.

38
00:02:34.460 --> 00:02:36.740
So this will work out really well for us.

39
00:02:36.740 --> 00:02:44.670
So we say caches.open,
we'll say fallbackImages, cool.

40
00:02:44.670 --> 00:02:48.970
And that again is going to go ahead and
return another promise.

41
00:02:50.000 --> 00:02:51.620
So we'll say, .then.

42
00:02:52.870 --> 00:02:55.753
And this will now be the given cache.

43
00:02:55.753 --> 00:02:59.420
We've opened the cache here it is,
we're ready to do stuff with it.

44
00:03:00.810 --> 00:03:02.465
No semicolon,
that's the mistake that I always make.

45
00:03:02.465 --> 00:03:07.287
Cuz I get semicolon happy but
I'm actually, an argument being passed to

46
00:03:07.287 --> 00:03:12.123
event.waitUntil, and that will blow
up my code, that's always fun.

47
00:03:12.123 --> 00:03:13.555
All right, neat.

48
00:03:13.555 --> 00:03:19.861
So what we wanna do is we wanna add
that fallbackImage url to the cache.

49
00:03:19.861 --> 00:03:27.316
So we'll say cache.add FALLBACK_IMAGE_URL.

50
00:03:27.316 --> 00:03:30.380
Let's actually take this first one for
a moment.

51
00:03:30.380 --> 00:03:32.725
We'll go ahead and we'll refresh this.

52
00:03:32.725 --> 00:03:35.454
I'm gonna open the tools to make
sure I have the newest, latest and

53
00:03:35.454 --> 00:03:36.590
greatest service worker.

54
00:03:39.267 --> 00:03:42.971
&gt;&gt; Steve Kinney: All right, and
let's check the application.

55
00:03:45.789 --> 00:03:50.180
&gt;&gt; Steve Kinney: Okay, and
if we go we can see that I've got cache.

56
00:03:50.180 --> 00:03:52.150
I'm interested in that.

57
00:03:52.150 --> 00:03:56.709
We've got a bunch of caches in here
&gt;&gt; Steve Kinney: Those are all of our

58
00:03:56.709 --> 00:03:58.302
cache images from playing around.

59
00:03:58.302 --> 00:04:00.856
Let's see, all right,
that's not super helpful,

60
00:04:00.856 --> 00:04:03.990
so let's ignore that for
a second cuz my font's a little too big.

61
00:04:03.990 --> 00:04:06.460
We'll point that out momentarily.

62
00:04:06.460 --> 00:04:09.740
So we're keeping the cache and
we're ready to rock and roll.

63
00:04:09.740 --> 00:04:14.520
Now what we need to do is intercept it.

64
00:04:14.520 --> 00:04:19.670
Now, it could be easy to say, yeah, I'll
do that all in the fetch EventListener.

65
00:04:19.670 --> 00:04:21.190
And that works.

66
00:04:21.190 --> 00:04:22.460
It's a great way to do it.

67
00:04:23.650 --> 00:04:28.820
But we can imagine as our progressive
web app gets a little sophisticated,

68
00:04:28.820 --> 00:04:33.379
making the fetch event handler a 200-line

69
00:04:33.379 --> 00:04:36.650
method is maybe not the greatest
thing in the world.

70
00:04:36.650 --> 00:04:39.602
And yesterday I showed you that, hey,

71
00:04:39.602 --> 00:04:43.370
if you have the service
worker in the same folder.

72
00:04:43.370 --> 00:04:45.577
Or in a folder near
your client JavaScript,

73
00:04:45.577 --> 00:04:49.350
you can just say the name of it and
it loads the service worker.

74
00:04:49.350 --> 00:04:52.040
And you might have looked at
our webpack configuration.

75
00:04:52.040 --> 00:04:53.770
You're like, if I can do that,

76
00:04:53.770 --> 00:04:58.840
why are you making me do this like import
with three different exclamation points?

77
00:04:58.840 --> 00:05:01.960
A lot for the same reason that
we do it in general, right?

78
00:05:01.960 --> 00:05:04.620
We wanna be able to break stuff
out into different files.

79
00:05:04.620 --> 00:05:08.230
Have a module system and webpack is very
good about bundling those things together.

80
00:05:08.230 --> 00:05:11.356
So by running it through webpack, I can
eventually even go a step further than

81
00:05:11.356 --> 00:05:15.180
what we're gonna do right now, and
break stuff out into different files.

82
00:05:15.180 --> 00:05:17.720
But we're gonna do the first,
most obvious thing,

83
00:05:17.720 --> 00:05:20.540
which is at least break this
out into a different function.

84
00:05:20.540 --> 00:05:25.415
And I feel like a good name for
this function could be something

85
00:05:25.415 --> 00:05:29.768
like,
&gt;&gt; Steve Kinney: Let's say

86
00:05:29.768 --> 00:05:33.013
it's like fetchImageOrFallback.

87
00:05:33.013 --> 00:05:35.216
It seems legit.

88
00:05:35.216 --> 00:05:37.580
And it will take some kind of fetchEvent,
right?

89
00:05:39.150 --> 00:05:44.071
Which will be the event that
eventually gets passed in here, cool.

90
00:05:44.071 --> 00:05:48.036
And now, there's a few things
that might be happening here,

91
00:05:48.036 --> 00:05:51.630
like we want to go ahead and
try to get the image, right?

92
00:05:51.630 --> 00:05:55.082
So we will return,

93
00:05:59.323 --> 00:06:04.040
&gt;&gt; Steve Kinney: A fetch of
that fetch event request.

94
00:06:04.040 --> 00:06:08.090
Cuz we saw that the event that goes
into the fetchEventListener has

95
00:06:08.090 --> 00:06:09.850
a request which is a request object.

96
00:06:09.850 --> 00:06:13.370
There is a URL and a method there, but
we know that with fetch, we can pass in

97
00:06:13.370 --> 00:06:16.310
a full request object and everything
will work the way that we expect it to.

98
00:06:16.310 --> 00:06:17.650
So we're gonna pass it along in there.

99
00:06:19.500 --> 00:06:22.050
In this case, we're also gonna give it,

100
00:06:22.050 --> 00:06:25.960
we'll pass it through and
we'll also say, hey listen.

101
00:06:28.050 --> 00:06:30.029
Just in case it is for
an external resource,

102
00:06:30.029 --> 00:06:37.278
we'll say,
&gt;&gt; Steve Kinney: mode: 'no-cors'.

103
00:06:37.278 --> 00:06:43.924
All right, so if that works out great and
we got an image, that seems cool.

104
00:06:45.778 --> 00:06:49.030
&gt;&gt; Steve Kinney: We'll take
the response that comes out, right.

105
00:06:49.030 --> 00:06:53.491
This is equivalent to
saying event.response.

106
00:06:57.138 --> 00:06:58.466
&gt;&gt; Steve Kinney: All right,
we have a response.

107
00:06:58.466 --> 00:07:06.350
Now with response, this is gonna resolve
even if we get a 404 not found, right?

108
00:07:06.350 --> 00:07:09.650
And in that case,
we probably wanna show the fallbackImage,

109
00:07:09.650 --> 00:07:13.150
the requested image that we literally,
we got to the network, great.

110
00:07:13.150 --> 00:07:17.615
But that image doesn't exist.

111
00:07:17.615 --> 00:07:22.560
Well in that case, we're probably going
to want to still serve the fallbackImage.

112
00:07:22.560 --> 00:07:25.770
So, with the response we can
look at the status code,

113
00:07:25.770 --> 00:07:27.060
we can look at also two things.

114
00:07:27.060 --> 00:07:31.538
There's also a nice little helper
called response.OK, right?

115
00:07:31.538 --> 00:07:35.170
And OK is any kind of positive
status code not a 400 or 500.

116
00:07:35.170 --> 00:07:38.540
Anything from 200 to the end of the 300s.

117
00:07:38.540 --> 00:07:46.576
So, we'll say is if response is not OK,
&gt;&gt; Steve Kinney: All right,

118
00:07:46.576 --> 00:07:51.400
what we're gonna do is we
will return the caches,

119
00:07:54.599 --> 00:07:56.794
&gt;&gt; Steve Kinney: The caches that match

120
00:08:00.388 --> 00:08:01.860
&gt;&gt; Steve Kinney: FALLBACK_IMAGE_URL.

121
00:08:01.860 --> 00:08:03.030
Let me scroll a little bit.

122
00:08:06.701 --> 00:08:08.310
&gt;&gt; Steve Kinney: I'll give it
a cache name to look in there.

123
00:08:10.260 --> 00:08:13.140
We could also open the cache and
look for it as well.

124
00:08:13.140 --> 00:08:15.856
This will actually just save
us a promise along the way.

125
00:08:21.800 --> 00:08:23.929
&gt;&gt; Steve Kinney: Fall back images, cool.

126
00:08:23.929 --> 00:08:28.366
So things go poorly and,
we get a 400 listen like,

127
00:08:28.366 --> 00:08:33.695
go ahead and get something out of
the cash and send it back to me.

128
00:08:33.695 --> 00:08:37.932
Otherwise, everything worked
out great from the network,

129
00:08:37.932 --> 00:08:42.179
then go head and give me that one
you got back for the network.

130
00:08:42.179 --> 00:08:44.890
That seem great,
send that response through.

131
00:08:44.890 --> 00:08:49.664
So basically, we are gonna send something
out to that network looking for

132
00:08:49.664 --> 00:08:54.840
that image, if the response is great like
the service worker open door policy.

133
00:08:54.840 --> 00:08:57.610
If something didn't go right.

134
00:08:57.610 --> 00:09:02.084
Then in that case what we're
going to do is we'll go ahead and

135
00:09:02.084 --> 00:09:05.962
get our fallback image out of cash and
send it along.

136
00:09:05.962 --> 00:09:08.192
Will simplify this in a second.

137
00:09:08.192 --> 00:09:13.126
We know that fetches we can we
move on to the catch method

138
00:09:13.126 --> 00:09:17.340
if there was no network request at all.

139
00:09:17.340 --> 00:09:20.018
So we couldn't, that case we
want to do the same thing we did

140
00:09:20.018 --> 00:09:27.678
before
&gt;&gt; Steve Kinney: And

141
00:09:27.678 --> 00:09:30.260
we will return the caches.

142
00:09:30.260 --> 00:09:36.283
The caches that match that fallback
image URL will give them [INAUDIBLE].

143
00:09:36.283 --> 00:09:40.069
All right, squiggly lines,
doesn't like my spacing.

144
00:09:42.019 --> 00:09:43.148
&gt;&gt; Steve Kinney: That's fine.

145
00:09:44.901 --> 00:09:46.396
&gt;&gt; Steve Kinney: I'm not fixing it.

146
00:09:46.396 --> 00:09:49.780
Cool, so we refresh this.

147
00:09:49.780 --> 00:09:54.570
What happens if I go ahead and,
let's take an image and let's break it.

148
00:09:56.150 --> 00:09:58.240
So we'll go ahead and we'll go to server.

149
00:10:00.090 --> 00:10:04.234
And go to the images and
which one are you?

150
00:10:07.685 --> 00:10:09.356
&gt;&gt; Steve Kinney: You're 435.

151
00:10:13.222 --> 00:10:14.649
&gt;&gt; Steve Kinney: So
let's find the very first one here so

152
00:10:14.649 --> 00:10:16.390
I don't have to go looking for
my broken image.

153
00:10:17.630 --> 00:10:18.820
And you know what?

154
00:10:18.820 --> 00:10:19.610
There you are.

155
00:10:20.820 --> 00:10:22.109
I'm gonna rename you.

156
00:10:25.959 --> 00:10:29.095
&gt;&gt; Steve Kinney: To not 435 effectively.

157
00:10:32.172 --> 00:10:35.600
&gt;&gt; Steve Kinney: And you can see
that we sent the network request.

158
00:10:35.600 --> 00:10:39.660
It couldn't find that one which
will give us a not okay response.

159
00:10:39.660 --> 00:10:44.580
And in that case we will go ahead and
grab the fallback image out of cache and

160
00:10:44.580 --> 00:10:46.100
serve that one instead.

161
00:10:46.100 --> 00:10:50.130
This is instead of like a broken image or
something along those lines.

162
00:10:50.130 --> 00:10:52.930
We can get a little bit more
advanced with caching strategies.

163
00:10:52.930 --> 00:10:56.950
Imagine we got those things originally
the last time we were online.

164
00:10:56.950 --> 00:11:03.560
What if we just store them all and said
like, hey, I know you're looking for 435.

165
00:11:03.560 --> 00:11:07.101
We couldn't find them or
in this case like for

166
00:11:07.101 --> 00:11:10.580
offline and we couldn't connect at all.

167
00:11:10.580 --> 00:11:11.740
I stored it last time.

168
00:11:11.740 --> 00:11:15.010
So do you want that one,
which for our tendering on?

169
00:11:16.120 --> 00:11:20.240
That is probably a legitimate
thing to do in this case.

170
00:11:22.110 --> 00:11:25.400
All right, few more things to look at.

171
00:11:25.400 --> 00:11:30.650
That lay again, keeping track of all the
strings will get you somewhat pretty far.

172
00:11:30.650 --> 00:11:32.740
You can also see another
strategy that we have here.

173
00:11:35.130 --> 00:11:38.890
Where we could do it, I keep a separate
file, and basically a constants file.

174
00:11:40.250 --> 00:11:45.060
So we'll have a cash name, we will prefix
it and everything along those lines and

175
00:11:45.060 --> 00:11:46.480
then way we can just require this image.

176
00:11:46.480 --> 00:11:48.830
We changed it all in one
place theoretically,

177
00:11:48.830 --> 00:11:50.710
and we do other things to manage cache.

178
00:11:50.710 --> 00:11:53.570
You'll see later when we can
remove all the unused caches and

179
00:11:53.570 --> 00:11:54.340
stuff along those lines.

180
00:11:54.340 --> 00:11:55.210
So right now.

181
00:11:55.210 --> 00:11:57.332
This is hard coded, if we go ahead and

182
00:11:57.332 --> 00:12:00.350
change that we need to
update everything manually.

183
00:12:02.440 --> 00:12:06.880
Let's actually remove caches that
we don't want, on activate as well.

184
00:12:08.600 --> 00:12:13.214
So here we added the fallback images
to the cache, that seems good.

185
00:12:13.214 --> 00:12:16.762
Let's also go ahead and say, hey,

186
00:12:16.762 --> 00:12:21.731
when you come alive let's
remove all of the caches

187
00:12:21.731 --> 00:12:27.010
that are not the fallback
image in this case.

188
00:12:27.010 --> 00:12:28.393
So we could say.

189
00:12:30.549 --> 00:12:31.942
&gt;&gt; Steve Kinney: When it comes alive.

190
00:12:38.454 --> 00:12:40.260
&gt;&gt; Steve Kinney: FallbackImages, cool.

191
00:12:41.260 --> 00:12:43.221
So we need caches.keys.

192
00:12:52.014 --> 00:12:55.418
&gt;&gt; Speaker 3: You did not call this
spreadsheet where you made your fallback

193
00:12:55.418 --> 00:12:55.960
method.

194
00:12:55.960 --> 00:12:57.837
&gt;&gt; Steve Kinney: Yeah.
&gt;&gt; Speaker 3: How did you still get that

195
00:12:57.837 --> 00:12:59.765
fallback image on the browser?

196
00:12:59.765 --> 00:13:01.198
&gt;&gt; Steve Kinney: That's a good question
&gt;&gt; Speaker 4: Yeah,

197
00:13:01.198 --> 00:13:03.541
I just wondered the same thing.

198
00:13:03.541 --> 00:13:04.320
[LAUGH]
&gt;&gt; Steve Kinney: Do we

199
00:13:04.320 --> 00:13:06.070
have an alt service-
&gt;&gt; Speaker 5: Do you have an alt service

200
00:13:06.070 --> 00:13:06.754
program still?

201
00:13:06.754 --> 00:13:07.333
&gt;&gt; Steve Kinney: I don't think so.

202
00:13:07.333 --> 00:13:08.900
Maybe if I reload and refresh.

203
00:13:08.900 --> 00:13:10.015
&gt;&gt; Speaker 4: I think we're good now.

204
00:13:10.015 --> 00:13:13.412
&gt;&gt; Steve Kinney: Okay.

205
00:13:13.412 --> 00:13:14.590
Yeah, we didn't actually call it.

206
00:13:15.700 --> 00:13:16.690
It's a good, good catch.

207
00:13:17.790 --> 00:13:19.690
Let's see,
do we have an old service worker-

208
00:13:19.690 --> 00:13:20.540
&gt;&gt; Speaker 3: I'm just looking for

209
00:13:20.540 --> 00:13:23.280
where you called so I was-
&gt;&gt; Steve Kinney: Yeah, yeah, no, no.

210
00:13:23.280 --> 00:13:26.213
So one quick notice
that we didn't call it,

211
00:13:26.213 --> 00:13:29.399
we might have an old
service worker installed.

212
00:13:29.399 --> 00:13:30.596
Let's see.

213
00:13:30.596 --> 00:13:33.367
&gt;&gt; Speaker 5: And
that machine you almost certainly do.

214
00:13:33.367 --> 00:13:35.650
&gt;&gt; Steve Kinney: Let's check
out our service work there.

215
00:13:35.650 --> 00:13:37.797
&gt;&gt; Speaker 5: Just go to clear storage.

216
00:13:37.797 --> 00:13:40.279
&gt;&gt; Steve Kinney: Yeah, [INAUDIBLE] I am.

217
00:13:40.279 --> 00:13:42.873
&gt;&gt; Speaker 5: That's it.

218
00:13:42.873 --> 00:13:47.494
&gt;&gt; Steve Kinney: Cool, all right,
so now it doesn't work, great,

219
00:13:47.494 --> 00:13:50.930
that is now what we actually expect.

220
00:13:50.930 --> 00:13:54.870
We had an old service worker which would
actually be a great Segway when Mike talks

221
00:13:54.870 --> 00:13:57.240
in a second about some of
the dangers of the service workers.

222
00:13:57.240 --> 00:14:00.420
We actually find ourselves slightly
trolled preparing for this,

223
00:14:00.420 --> 00:14:05.030
where our server was offline and we were
making changes and they weren't working.

224
00:14:05.030 --> 00:14:06.360
And we're like, why aren't they working?

225
00:14:06.360 --> 00:14:07.390
Because the servers not running.

226
00:14:07.390 --> 00:14:08.770
We just happen to have an offline app.

227
00:14:08.770 --> 00:14:10.390
So everything didn't blow up.

228
00:14:10.390 --> 00:14:13.480
And we were lulled into
a false sense of complacency.

229
00:14:13.480 --> 00:14:18.360
Which is again in the same way that you
will pass console log into a promise and

230
00:14:18.360 --> 00:14:20.690
be horrified when it returns undefined.

231
00:14:20.690 --> 00:14:25.760
This is a rite of passage for working
offline app, which is having a cache

232
00:14:25.760 --> 00:14:30.780
service work and acts like everything's
fine when in fact, things are not.

233
00:14:30.780 --> 00:14:34.780
So we've cleared it out, and
now we have a broken one.

234
00:14:34.780 --> 00:14:38.650
We will steal a little bit of code,
actually we can write it.

235
00:14:39.790 --> 00:14:42.400
Let's give ourselves a little
more space to work here.

236
00:14:42.400 --> 00:14:47.189
And we'll say,
&gt;&gt; Steve Kinney: We only wanna catch

237
00:14:47.189 --> 00:14:48.210
the images, right?

238
00:14:48.210 --> 00:14:53.090
Right now we have this function, and
we just put it in place for all requests.

239
00:14:53.090 --> 00:14:54.190
You're getting a fallback image for

240
00:14:54.190 --> 00:14:56.990
anything that doesn't work,
which is not great.

241
00:14:58.340 --> 00:14:59.540
So we've got acceptHeader.

242
00:15:01.190 --> 00:15:03.954
I will look at the event
that's being passed in here.

243
00:15:03.954 --> 00:15:11.280
Cool, event.request.headers,
and headers looks and

244
00:15:11.280 --> 00:15:15.330
feels like an object but is actually
built by the headers constructor.

245
00:15:15.330 --> 00:15:19.630
So it's not, you can't just say
headers and get the accept.

246
00:15:19.630 --> 00:15:22.990
It's actually, you need to use .get
to actually find it in that case.

247
00:15:25.070 --> 00:15:25.980
Cool.

248
00:15:25.980 --> 00:15:28.930
So this will be,
we'll say it like what for the request,

249
00:15:28.930 --> 00:15:30.100
like what are you expecting back.

250
00:15:31.700 --> 00:15:34.840
And we'll actually store on,

251
00:15:34.840 --> 00:15:38.709
we'll store the request URL just
to keep it easy for yourselves.

252
00:15:40.490 --> 00:15:43.900
In the same way that we store
the full long URL earlier.

253
00:15:43.900 --> 00:15:46.340
In a constant so
that our lines don't get too long.

254
00:15:46.340 --> 00:15:48.886
This is mostly for good code hygiene.

255
00:15:55.146 --> 00:15:57.553
&gt;&gt; Steve Kinney: We got
ourselves a URL object.

256
00:15:57.553 --> 00:16:00.597
All right, so

257
00:16:00.597 --> 00:16:06.390
If except header Except

258
00:16:06.390 --> 00:16:11.110
there is a long string of comma separated
of all the different types of accepts.

259
00:16:11.110 --> 00:16:16.628
So we're gonna say hey, if in there there
is image/star, so we're looking for

260
00:16:16.628 --> 00:16:21.273
some kind of image and we do IndexOf,
&gt;&gt; Steve Kinney: Is greater than

261
00:16:21.273 --> 00:16:24.632
equal to 0 or
you might like does not equal 1,

262
00:16:24.632 --> 00:16:29.214
whichever one makes you happier,
both will work in this case.

263
00:16:29.214 --> 00:16:34.220
So if this is a request that is
expecting some kind of image right,

264
00:16:34.220 --> 00:16:36.049
and what kind of image?

265
00:16:36.049 --> 00:16:39.325
All of our glossary image
happen to be in our

266
00:16:39.325 --> 00:16:43.698
assets under /images /all
those glossaries, right?

267
00:16:43.698 --> 00:16:45.978
So in the situation that it's our logo,

268
00:16:45.978 --> 00:16:49.075
we do not want to show them
a missing glossary, right?

269
00:16:49.075 --> 00:16:51.621
For your given app,
this will be different.

270
00:16:51.621 --> 00:16:54.921
It's all unique to what your
application is expecting, but

271
00:16:54.921 --> 00:16:58.910
in this one we know that all of our
glossaries are in the image directory.

272
00:16:58.910 --> 00:17:00.079
So we'll say request URL.

273
00:17:03.265 --> 00:17:04.619
&gt;&gt; Steve Kinney: Look at the path name,
right?

274
00:17:04.619 --> 00:17:08.981
So URL is just to helper that takes
a URL string, this new URL that you see

275
00:17:08.981 --> 00:17:12.850
on line 34, it takes URL string and
it breaks into an object.

276
00:17:12.850 --> 00:17:16.259
We can get the path name and
different parts of it.

277
00:17:16.259 --> 00:17:19.577
So we'll say requestUrl.pathname and
we look for

278
00:17:19.577 --> 00:17:22.671
the indexOf('/images/'), all right.

279
00:17:22.671 --> 00:17:29.355
So if this is in the URL,
&gt;&gt; Steve Kinney: And

280
00:17:29.355 --> 00:17:30.791
we'll go in the beginning of it, right?

281
00:17:30.791 --> 00:17:35.650
Cuz, yes, we know that our
application is very simple, right?

282
00:17:35.650 --> 00:17:38.971
But theoretically if you just say anywhere
in there there's a chance that you might

283
00:17:38.971 --> 00:17:40.829
have images somewhere else in there,
right.

284
00:17:40.829 --> 00:17:44.501
Let's be a little defensive,
our application is somewhat naive but

285
00:17:44.501 --> 00:17:52.058
we'll be okay, so, event.respondWith
&gt;&gt; Steve Kinney: And

286
00:17:52.058 --> 00:17:55.077
then what we'll do is,
now this is expecting a promise.

287
00:17:55.077 --> 00:17:59.015
If you look at fetchImageOrFallback,
it returns a fetch promise, right?

288
00:17:59.015 --> 00:18:01.697
We chain it,
it's promises all the way down the line.

289
00:18:01.697 --> 00:18:09.190
So what we can say is fetchImageOrFallback
and pass it that (event).

290
00:18:09.190 --> 00:18:11.908
I almost made that
semicolon mistake again.

291
00:18:11.908 --> 00:18:19.262
What's important here,
&gt;&gt; Speaker 3: You

292
00:18:19.262 --> 00:18:23.690
need to add a parenthesis in line 37.

293
00:18:26.057 --> 00:18:26.911
&gt;&gt; Steve Kinney: Yep.

294
00:18:29.710 --> 00:18:32.239
&gt;&gt; Steve Kinney: There's a few
that need to happen here.

295
00:18:32.239 --> 00:18:37.360
Typing and talking is difficult,
all right cool, and then not that.

296
00:18:37.360 --> 00:18:39.596
&gt;&gt; Speaker 6: Do you really
wanna index of twice on 36?

297
00:18:42.684 --> 00:18:43.184
&gt;&gt; Steve Kinney: Nope.

298
00:18:45.930 --> 00:18:48.550
&gt;&gt; Steve Kinney: So busy talking and
looking around thank you.

299
00:18:48.550 --> 00:18:53.035
Pair programming with 15 to 100 of your
best friends is a really good idea.

300
00:18:53.035 --> 00:18:56.060
You should all try it sometime.

301
00:18:56.060 --> 00:18:59.033
Cool, so we'll check it out.

302
00:18:59.033 --> 00:19:01.570
Now what you'll notice is this is an if,
there's no else.

303
00:19:01.570 --> 00:19:04.989
And what we saw with the console logs
when we did the exercise yesterday,

304
00:19:04.989 --> 00:19:08.259
is that should you not use
event.respondwith, it passes through.

305
00:19:08.259 --> 00:19:11.523
So this is only,
if these two conditions are met,

306
00:19:11.523 --> 00:19:16.062
then we will go ahead and
respond with this other image.

307
00:19:16.062 --> 00:19:19.230
All right, this now for
the live coding moment of truth.

308
00:19:21.496 --> 00:19:23.952
&gt;&gt; Steve Kinney: Let's clear
out that service worker again.

309
00:19:26.970 --> 00:19:29.078
&gt;&gt; Steve Kinney: Cannot create
property URL of undefined.

310
00:19:31.119 --> 00:19:34.390
&gt;&gt; Speaker 5: I think
that's kinda where I'm at.

311
00:19:34.390 --> 00:19:35.833
&gt;&gt; Steve Kinney: All right, let's see.

312
00:19:35.833 --> 00:19:36.638
&gt;&gt; Speaker 3: Event.request.

313
00:19:36.638 --> 00:19:40.705
&gt;&gt; Steve Kinney: Event.request,
whenever your student node programming,

314
00:19:40.705 --> 00:19:45.718
if you ever use express, every argument
passed in is request and response.

315
00:19:45.718 --> 00:19:48.121
But a lot people like to do RES and REQ.

316
00:19:48.121 --> 00:19:51.613
I've lost days of my life,
like not in a row but

317
00:19:51.613 --> 00:19:55.470
like cumulatively over
five minutes paper cuts.

318
00:19:55.470 --> 00:19:59.700
I have lost days of my life with
the fact that those words are similar.

319
00:20:02.419 --> 00:20:05.730
&gt;&gt; Steve Kinney: All right, so here we go.

320
00:20:05.730 --> 00:20:11.230
We definitely have a bug here,
we're getting lots of them, all right?

321
00:20:11.230 --> 00:20:13.086
Which is definitely not what we want.

322
00:20:13.086 --> 00:20:15.681
Cool, so we gotta debug up here.

323
00:20:15.681 --> 00:20:19.154
We got a function,
we're going to fetch it.

324
00:20:23.840 --> 00:20:26.600
&gt;&gt; Steve Kinney: Looks like we
only failed to load the 435, so

325
00:20:26.600 --> 00:20:28.399
we've got a logic error here.

326
00:20:28.399 --> 00:20:31.051
Let's see, ifresponse not ok.

327
00:20:39.680 --> 00:20:40.180
&gt;&gt; Steve Kinney: Do you see it?

328
00:20:42.113 --> 00:20:46.169
&gt;&gt; Speaker 3: Do you need an object
notation that responds in line 21?

329
00:20:46.169 --> 00:20:47.725
&gt;&gt; Steve Kinney: Pardon?

330
00:20:47.725 --> 00:20:50.480
&gt;&gt; Speaker 3: Do we need
that in an object or just-

331
00:20:50.480 --> 00:20:51.599
&gt;&gt; Steve Kinney: That is effectively

332
00:20:51.599 --> 00:20:55.886
event.reponse, we're just pulling
the response property off the event.

333
00:20:55.886 --> 00:20:58.971
&gt;&gt; Speaker 5: So let's trying doing
this in cors mode, just for fun.

334
00:20:58.971 --> 00:21:06.766
&gt;&gt; Steve Kinney: All right,
&gt;&gt; Steve Kinney: Now,

335
00:21:06.766 --> 00:21:09.774
it looks like I think we've
got a logic issue, right?

336
00:21:09.774 --> 00:21:13.800
Cuz the 435 is not found, but
it looks like we're pretty happy in here.

337
00:21:41.554 --> 00:21:48.469
&gt;&gt; Speaker 5: Cannot read
property 'ok' of undefined.

338
00:21:48.469 --> 00:21:49.579
&gt;&gt; Steve Kinney: All right.

339
00:21:52.757 --> 00:21:55.622
&gt;&gt; Steve Kinney: Let's take our cor back.

340
00:21:55.622 --> 00:22:00.925
&gt;&gt; Speaker 5: Sorry, so your fetch returns
a promise, that resolves to a response.

341
00:22:00.925 --> 00:22:04.660
So you should not destruct a response, so-
&gt;&gt; Steve Kinney: Keep going.

342
00:22:04.660 --> 00:22:08.297
&gt;&gt; Speaker 5: Actually you're correct,
that was destructure an assignment but

343
00:22:08.297 --> 00:22:09.900
that property was not there.

344
00:22:09.900 --> 00:22:11.390
&gt;&gt; Steve Kinney: All right, there we go.

345
00:22:11.390 --> 00:22:12.910
&gt;&gt; Speaker 5: That was-
&gt;&gt; Steve Kinney: Good catch.

346
00:22:12.910 --> 00:22:13.860
&gt;&gt; Speaker 5: You caught that one for
sure.

347
00:22:13.860 --> 00:22:15.083
[LAUGH]
&gt;&gt; Steve Kinney: Yeah,

348
00:22:15.083 --> 00:22:18.486
let's clean it up there,
all right, so now we have it.

349
00:22:18.486 --> 00:22:22.445
We can see that just this one that didn't
work out, we don't get the right image.

350
00:22:22.445 --> 00:22:27.188
Let's go offline for a second,
the whole page doesn't work, cool.

351
00:22:27.188 --> 00:22:32.348
Cuz we have not cached all of
the other assets in there, right?

352
00:22:32.348 --> 00:22:32.937
&gt;&gt; Speaker 5: As expected.

353
00:22:32.937 --> 00:22:35.474
&gt;&gt; Steve Kinney: As expected, so
we could theoretically add the rest

354
00:22:35.474 --> 00:22:38.472
of the pages in there but
right now our images will fall back but

355
00:22:38.472 --> 00:22:40.793
we need to figure out
some caching strategies.

356
00:22:40.793 --> 00:22:43.753
We need to figure out, how we handle
images that are not found, is different

357
00:22:43.753 --> 00:22:46.770
than how we handle the index which is
different than how we handle the script.

