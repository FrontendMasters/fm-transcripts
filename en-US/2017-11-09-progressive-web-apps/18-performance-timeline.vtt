WEBVTT

1
00:00:00.030 --> 00:00:03.443
&gt;&gt; Mike North: When thinking about how
we can improve the state of our app,

2
00:00:03.443 --> 00:00:07.552
currently if you were to right-click
on the app itself in View Source.

3
00:00:07.552 --> 00:00:10.856
You'll see we're basically
sending an empty index.html,

4
00:00:10.856 --> 00:00:12.961
there's nothing visible in the body.

5
00:00:12.961 --> 00:00:17.579
And we're waiting for
a client side JavaScript to be downloaded,

6
00:00:17.579 --> 00:00:19.565
parsed for that app to boot.

7
00:00:19.565 --> 00:00:24.366
And then it can start inserting elements
into the HTML which then our user can see.

8
00:00:24.366 --> 00:00:29.197
Basically, everything on the critical
path to our user being able to see stuff,

9
00:00:29.197 --> 00:00:29.729
right?

10
00:00:29.729 --> 00:00:32.273
We have to get the CSS,
we have to get the JavaScripts.

11
00:00:32.273 --> 00:00:36.374
We obviously needed the HTML in order
to know about those two things,

12
00:00:36.374 --> 00:00:37.583
the app has to boot.

13
00:00:37.583 --> 00:00:44.080
It's a lot of stuff that is in the way
of us loading really, really quickly.

14
00:00:44.080 --> 00:00:47.560
So as we start to chip away at
this problem and improve it.

15
00:00:47.560 --> 00:00:51.490
I want you to pay attention to the three
metrics that we talked about earlier.

16
00:00:51.490 --> 00:00:55.903
Time to like a meaningful paint
where the user feels like the app is

17
00:00:55.903 --> 00:00:57.195
starting to boot.

18
00:00:57.195 --> 00:00:59.925
The time to the app becoming interactive,
and

19
00:00:59.925 --> 00:01:03.150
the time to our dynamic data
being shown on the screen.

20
00:01:03.150 --> 00:01:06.858
And I've got a diagram
that we'll refer back to

21
00:01:06.858 --> 00:01:10.482
over the next day-and-a-half or two days.

22
00:01:10.482 --> 00:01:16.490
And it sort of represents our
progressive web app system as a whole.

23
00:01:16.490 --> 00:01:20.760
And we'll look at the things
that are in the way

24
00:01:20.760 --> 00:01:23.540
of us providing a nearly
instant boot time.

25
00:01:23.540 --> 00:01:24.847
Because that's where we're trying to go.

26
00:01:24.847 --> 00:01:29.648
We want this app to boot offline
regardless of the quality of Internet

27
00:01:29.648 --> 00:01:30.653
connection.

28
00:01:30.653 --> 00:01:36.861
And for it to be definitely under the two
second mark before we start seeing stuff.

29
00:01:36.861 --> 00:01:39.420
So here's our current state of affairs.

30
00:01:39.420 --> 00:01:46.046
We go and ask for index.html at localhost
3000 and it comes back with that file.

31
00:01:46.046 --> 00:01:49.603
And the browser starts reading through it,
parsing it,

32
00:01:49.603 --> 00:01:54.970
it's gonna encounter, maybe an external
style sheet and an external script.

33
00:01:54.970 --> 00:01:56.980
And we've probably,
if we're doing our job right,

34
00:01:56.980 --> 00:01:59.540
we've hosted those on a CDN,
a separate domain.

35
00:01:59.540 --> 00:02:01.270
So that's another roundtrip request.

36
00:02:01.270 --> 00:02:06.960
And the CSS is gonna come back first,
because on average it is smaller.

37
00:02:06.960 --> 00:02:11.330
Less than a quarter the size of
the average JavaScript payload.

38
00:02:11.330 --> 00:02:14.250
The JavaScript will come later,
and then it has to be parsed and

39
00:02:14.250 --> 00:02:15.690
the app has to boot.

40
00:02:15.690 --> 00:02:19.979
CSS also has to be parsed as well, but
the bar on this diagram would be so

41
00:02:19.979 --> 00:02:22.838
thin that you wouldn't
even be able to see it.

42
00:02:22.838 --> 00:02:25.060
It's a much simpler language, right?

43
00:02:25.060 --> 00:02:28.284
It's almost like key value pairs,
only three or

44
00:02:28.284 --> 00:02:33.649
four different types of objects we need
to represent to describe that language.

45
00:02:33.649 --> 00:02:40.090
And then at this point, we can have
sort of a non data-based First Paint.

46
00:02:40.090 --> 00:02:46.042
This is like the nav bar,
this is the stuff we don't need JSON for.

47
00:02:46.042 --> 00:02:50.444
The title of the app,
the cart icon, that's just SVG.

48
00:02:50.444 --> 00:02:53.049
Then we have to go to our API,
get some JSON back, and

49
00:02:53.049 --> 00:02:54.600
we can show data on the screen.

50
00:02:54.600 --> 00:02:56.130
So this is where we are right now.

51
00:02:56.130 --> 00:03:02.186
And the hope is as we make improvement,
I wanna see these icons move left, right?

52
00:03:02.186 --> 00:03:07.144
That represent faster boots,
less things in the way for

53
00:03:07.144 --> 00:03:11.691
our users to start working
with our applications.

54
00:03:11.691 --> 00:03:14.281
So if you've never used the PERF timeline,

55
00:03:14.281 --> 00:03:18.300
you're gonna get a little bit
of experience with the today.

56
00:03:18.300 --> 00:03:21.540
This is our current state of affairs and

57
00:03:21.540 --> 00:03:25.540
you can see this little like
film strip of screenshots here.

58
00:03:25.540 --> 00:03:31.610
Basically starts as pure white until this
JavaScript file completes downloading and

59
00:03:31.610 --> 00:03:33.840
this by the way,
this was on a 2G connection.

60
00:03:33.840 --> 00:03:37.804
So I've slowed it down to
make this point clearly, but

61
00:03:37.804 --> 00:03:42.987
basically nothing gets painted
until the JavaScript's downloaded.

62
00:03:42.987 --> 00:03:46.583
So this is proof that my claim,
that everything is in the way,

63
00:03:46.583 --> 00:03:50.820
all of the JavaScript, all of the CSS,
that's what we're looking at.

