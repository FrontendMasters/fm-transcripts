WEBVTT

1
00:00:00.179 --> 00:00:03.179
&gt;&gt; Steve Kinney: So the main thing we
talked about is that what makes a service

2
00:00:03.179 --> 00:00:06.790
worker really cool is that it can
intercept network requests, right?

3
00:00:06.790 --> 00:00:09.040
That is what gives us the ability to say,
hey,

4
00:00:09.040 --> 00:00:11.892
actually we would like to get
something from the network.

5
00:00:11.892 --> 00:00:13.549
We would like to get something from cache.

6
00:00:13.549 --> 00:00:15.870
We would like as Mike just
said have a fallback image.

7
00:00:15.870 --> 00:00:17.665
This is where the service
worker really shines.

8
00:00:17.665 --> 00:00:22.693
What we did yesterday was we had
a service worker that log stuff and

9
00:00:22.693 --> 00:00:27.640
that was neat, but kind of misses
the point of a service worker.

10
00:00:28.760 --> 00:00:34.493
And we saw that service workers
can add a event listener for

11
00:00:34.493 --> 00:00:40.460
a fetch and this would because
XHR uses fetch under the hood,

12
00:00:40.460 --> 00:00:46.199
loading images and
image check uses fetch under the hood.

13
00:00:46.199 --> 00:00:50.511
This will be pretty much all network
request that our application makes.

14
00:00:50.511 --> 00:00:53.029
And so we can just intercept
anything that its asking for.

15
00:00:53.029 --> 00:00:57.721
And again, reframing it in the fact that
we are trying build on applications that

16
00:00:57.721 --> 00:01:00.970
work on either on unreliable or
no network connection.

17
00:01:00.970 --> 00:01:04.259
We can see how this concept
of any network request for

18
00:01:04.259 --> 00:01:09.138
any kind of resource going to the service
worker can be incredibly powerful.

19
00:01:09.138 --> 00:01:15.425
The event that the fetch listener
received has a lot of properties.

20
00:01:15.425 --> 00:01:17.565
Let's just talk about a few of them.

21
00:01:17.565 --> 00:01:23.085
Event.request is that request object
that you passed into the fetch or

22
00:01:23.085 --> 00:01:25.939
that the browser passed it, right?

23
00:01:25.939 --> 00:01:27.650
We saw two examples yesterday.

24
00:01:27.650 --> 00:01:31.070
We saw an example where that was
a string and maybe an object options.

25
00:01:31.070 --> 00:01:35.055
We saw an example we could literally
construct a new request with a string and

26
00:01:35.055 --> 00:01:36.680
an object of options, right?

27
00:01:36.680 --> 00:01:40.561
That request is why we have
this event.request and

28
00:01:40.561 --> 00:01:44.720
that request has the properties
that we might expect.

29
00:01:44.720 --> 00:01:48.701
It has the URL like what URL you're
requesting, what method, right?

30
00:01:48.701 --> 00:01:51.280
You would access to the header and
so on and so forth.

31
00:01:52.480 --> 00:01:58.219
The other really powerful one on the event
object is this method called respondWith.

32
00:01:58.219 --> 00:02:01.252
So we receive an event that
has the request on it and

33
00:02:01.252 --> 00:02:06.095
we have this method called respondWith
which means that we could theoretically

34
00:02:06.095 --> 00:02:08.860
respond with something otherwise, right?

35
00:02:08.860 --> 00:02:12.966
We could create our own response object
be like, I know what you requested,

36
00:02:12.966 --> 00:02:14.390
here take this response.

37
00:02:15.450 --> 00:02:17.200
So what that could look like?

38
00:02:17.200 --> 00:02:20.550
So we will listen for fetch events.

39
00:02:20.550 --> 00:02:24.489
If the request URL is where
we are currently like for

40
00:02:24.489 --> 00:02:28.884
this current page respond with
a brand new response, but

41
00:02:28.884 --> 00:02:32.640
we'll set the body of hello
in paragraph tags and

42
00:02:32.640 --> 00:02:38.250
we'll set it as an HTML document and
I know that you requested this page.

43
00:02:39.650 --> 00:02:41.793
I'm not even going to go to the network.

44
00:02:41.793 --> 00:02:45.560
I'm going to just hand this back to you,
right?

45
00:02:45.560 --> 00:02:51.030
If we don't use event.respondWith,
it passes through to the network.

46
00:02:51.030 --> 00:02:55.213
So yesterday, we had
a self.addEventListener on fetch and

47
00:02:55.213 --> 00:03:00.469
we put in a console log that didn't
break our network connections, right?

48
00:03:00.469 --> 00:03:01.570
It went through the network.

49
00:03:01.570 --> 00:03:04.332
We just logged something on the way.

50
00:03:04.332 --> 00:03:06.819
In this case,
we are literally intercepting it.

51
00:03:06.819 --> 00:03:14.075
Crafting our own response and
sending it back to the browser.

52
00:03:14.075 --> 00:03:19.576
&gt;&gt; Speaker 2: One question,
since in this example we are sending HTML,

53
00:03:19.576 --> 00:03:24.292
can we assume that service
workers are more secure

54
00:03:24.292 --> 00:03:29.252
over the DOM that somebody
else may not have access?

55
00:03:29.252 --> 00:03:33.510
&gt;&gt; Steve Kinney: I mean, if it's user
data, you can't assume anything, right,?

56
00:03:33.510 --> 00:03:35.460
That is your code.

57
00:03:35.460 --> 00:03:40.140
&gt;&gt; Speaker 2: Sure, but for cross site
scripting or all that kind of attacks or

58
00:03:40.140 --> 00:03:41.533
changing some of.

59
00:03:41.533 --> 00:03:45.889
&gt;&gt; Steve Kinney: I don't think
you can assume that it's more.

60
00:03:45.889 --> 00:03:50.459
When you're dealing with arbitrary data,
you can't assume that it's safe.

61
00:03:50.459 --> 00:03:52.604
I would definitely sterilize in this case.

62
00:03:52.604 --> 00:03:57.272
&gt;&gt; Speaker 2: I mean, can a user or
a third party hack that

63
00:03:57.272 --> 00:04:02.089
service worker's code and inject bad HTM?

64
00:04:02.089 --> 00:04:03.482
&gt;&gt; Steve Kinney: So I can feel the Sun.

65
00:04:03.482 --> 00:04:05.378
&gt;&gt; Speaker 2: Yeah.

66
00:04:05.378 --> 00:04:10.782
&gt;&gt; Steve Kinney: You need to use
the same precautions here anywhere that

67
00:04:10.782 --> 00:04:16.304
you would use,
you'd be rendering user data in HTML and

68
00:04:16.304 --> 00:04:24.380
the typical convention is never trust
anything a user is capable of editing.

69
00:04:24.380 --> 00:04:27.949
Always sanitize it, always sanitize it.

70
00:04:27.949 --> 00:04:32.361
Most modern view layers like
React which we are using here,

71
00:04:32.361 --> 00:04:37.579
they offer some protection for
you in that they don't let you render.

72
00:04:37.579 --> 00:04:41.356
You could not change the name of
a grocery item to a script tag and

73
00:04:41.356 --> 00:04:44.930
trigger like the download,
and execution of that script.

74
00:04:44.930 --> 00:04:47.449
In this case,
there is no protection for you.

75
00:04:47.449 --> 00:04:51.439
Because we are not using a library,
like you are going to get this HTML here.

76
00:04:51.439 --> 00:04:57.503
So just be really careful when allowing
user values to be put into HTML,

77
00:04:57.503 --> 00:05:03.790
because that you have to treat it like
code, because it can contain code.

78
00:05:03.790 --> 00:05:07.222
&gt;&gt; Speaker 3: Yep,
it's not trusting user input.

79
00:05:07.222 --> 00:05:09.822
It's not unique to the DOM, right?

80
00:05:09.822 --> 00:05:15.259
In the same way, you wouldn't
trust it in a SQL query, right?

81
00:05:15.259 --> 00:05:19.544
It is effectively not trusting
users is this global truth of

82
00:05:19.544 --> 00:05:23.669
programming whether in Vasterdam,
whether in Vaxico.

83
00:05:23.669 --> 00:05:28.761
Anytime you're evaluating user data,
you'll never trust users.

84
00:05:28.761 --> 00:05:32.532
All right and the same is true in the
server's worker as it would be on the DOM,

85
00:05:32.532 --> 00:05:34.810
as it would be on the server
in all those cases.

