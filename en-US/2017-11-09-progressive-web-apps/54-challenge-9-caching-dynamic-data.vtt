WEBVTT

1
00:00:00.221 --> 00:00:05.145
&gt;&gt; Mike North: I hope that our first
big step into doing something really

2
00:00:05.145 --> 00:00:09.468
meaningful in the service worker,
precaching.

3
00:00:09.468 --> 00:00:14.121
I hope that's been interesting and
we're starting to understand

4
00:00:14.121 --> 00:00:18.201
the power of this new tool in
our web development toolbox.

5
00:00:18.201 --> 00:00:22.464
So this is actually the first
in a series of three exercises

6
00:00:22.464 --> 00:00:26.560
that will take us closer and
closer to working offline.

7
00:00:26.560 --> 00:00:31.433
And there are three patterns
that are regularly used

8
00:00:31.433 --> 00:00:35.973
in apps that are using
service workers today that

9
00:00:35.973 --> 00:00:40.413
embody this idea of
progressive enhancement.

10
00:00:40.413 --> 00:00:45.493
So in the event that this work that
we're doing with the Service Worker,

11
00:00:45.493 --> 00:00:51.005
it's not supported, all of these requests
will just go to the outside world.

12
00:00:51.005 --> 00:00:55.416
So this is something that we sort
of slip in underneath our app and

13
00:00:55.416 --> 00:01:00.235
it will have the effect of speeding
things up or allowing us to tolerate

14
00:01:00.235 --> 00:01:04.908
things that previously were intolerable,
like working offline.

15
00:01:04.908 --> 00:01:09.751
With that, let's move on to the next step
and when looking at these three steps,

16
00:01:09.751 --> 00:01:12.972
they're for
three different categories of assets.

17
00:01:12.972 --> 00:01:17.432
So exercise eight,
this is stuff you know about atbuild time.

18
00:01:17.432 --> 00:01:22.469
Next we're going to have a strategy for
dealing with JSON,

19
00:01:22.469 --> 00:01:25.904
dealing with some of this dynamic data.

20
00:01:25.904 --> 00:01:32.673
So our app is, it's actually not able to
boot without an Internet connection yet,

21
00:01:32.673 --> 00:01:37.622
that'll be the next step here,
I think we reordered these.

22
00:01:37.622 --> 00:01:42.421
But anyhow,
we need JSON in order to get that

23
00:01:42.421 --> 00:01:47.491
list of grocery items to
appear on the screen.

24
00:01:47.491 --> 00:01:51.211
So that's the second of three things
that we need in order to get online.

25
00:01:51.211 --> 00:01:54.971
The last being indexed at HTML,
if we can get JSON working and

26
00:01:54.971 --> 00:01:56.815
we have fallback images, and

27
00:01:56.815 --> 00:02:01.630
we have all of our JavaScript in CSS
handled already if we have pre-caching.

28
00:02:01.630 --> 00:02:05.044
Index.html is all that's left.

29
00:02:05.044 --> 00:02:10.078
So the caching strategy we're going to

30
00:02:10.078 --> 00:02:14.967
employ here is network, then cache.

31
00:02:14.967 --> 00:02:20.588
So we try to use the network first,
we have a bias for getting fresh data,

32
00:02:20.588 --> 00:02:25.196
fresh JSON, in the event that
the fetch doesn't work out,

33
00:02:25.196 --> 00:02:28.354
we want to use a cache copy of that thing.

34
00:02:28.354 --> 00:02:32.436
And what that involves is,
even if we do go out to the network,

35
00:02:32.436 --> 00:02:37.868
we wanna make sure that when that response
comes back and we say respond with this.

36
00:02:37.868 --> 00:02:41.214
We wanna make sure that we
also put it into the cache,

37
00:02:41.214 --> 00:02:45.720
so that's it there later if we need it,
if we need to fall back onto it.

38
00:02:45.720 --> 00:02:49.357
We wanna store these in a separate
cache than the precache responses.

39
00:02:49.357 --> 00:02:54.796
The reason is, occasionally there are use
cases for maybe our fallback images.

40
00:02:54.796 --> 00:02:58.535
That cache can hang around over
multiple versions of a service broker.

41
00:02:58.535 --> 00:03:05.111
This probably cannot, in fact, this is one
that we want to write over repeatedly.

42
00:03:05.111 --> 00:03:06.768
Every time we go out and get fresh data,

43
00:03:06.768 --> 00:03:08.787
we're gonna also update
what's in the cache.

44
00:03:08.787 --> 00:03:13.260
Even if it's the same thing,
it's harmless to do this because it is

45
00:03:13.260 --> 00:03:17.352
happening in another thread,
it basically comes at no cost.

46
00:03:17.352 --> 00:03:21.749
I say it comes at no cost because
your service worker is mostly idle.

47
00:03:21.749 --> 00:03:25.262
And so asking it to do things so
it's not competing for

48
00:03:25.262 --> 00:03:29.724
resources that are scarce,
which is our main application thread.

49
00:03:29.724 --> 00:03:33.870
So with that, I wanna make sure I set
you up for success in this exercise.

50
00:03:33.870 --> 00:03:36.819
And I wanna point out exactly
what we should be doing and

51
00:03:36.819 --> 00:03:38.817
where we should be putting our code.

52
00:03:41.398 --> 00:03:47.964
&gt;&gt; Mike North: So first and
foremost, what I want to do is,

53
00:03:47.964 --> 00:03:51.872
I want to look at our code.

54
00:03:55.864 --> 00:04:00.309
&gt;&gt; Mike North: So everything that
we're gonna be doing is gonna be stuff

55
00:04:00.309 --> 00:04:04.301
that's sort of stems from
the fetch handler here.

56
00:04:04.301 --> 00:04:07.021
With this kind of cache, it's sort of,

57
00:04:07.021 --> 00:04:12.069
think of it as like storing the most
recent copy of things that we've seen.

58
00:04:12.069 --> 00:04:18.086
There's no setup process, we sort of
just throw stuff in there as we see it.

59
00:04:18.086 --> 00:04:20.925
And if we look at the way
that this is structured and

60
00:04:20.925 --> 00:04:25.741
what your seeing here this has been pushed
to master in the Frontend Masters branch.

61
00:04:25.741 --> 00:04:29.891
Sorry, it's been pushed to get
on the Frontendmasters branch,

62
00:04:29.891 --> 00:04:33.293
you can see that we've got
like a multi teared thing.

63
00:04:33.293 --> 00:04:38.141
So first, we attempt to match
the request with something

64
00:04:38.141 --> 00:04:41.374
that is in the precache pile of stuff.

65
00:04:41.374 --> 00:04:45.151
And if we find it, we're gonna go ahead
and use it and proceed no further.

66
00:04:45.151 --> 00:04:48.723
That's the advantage of using return here,

67
00:04:48.723 --> 00:04:52.677
we're done,
this function is completed early.

68
00:04:52.677 --> 00:04:59.477
Here, we begin to handle stuff
that is kind of type specific.

69
00:04:59.477 --> 00:05:04.583
So I'm gonna actually clean
this up a little bit for

70
00:05:04.583 --> 00:05:09.947
our purposes, and
just combine this into one check.

71
00:05:09.947 --> 00:05:13.009
I'll repush this up, so no problem.

72
00:05:13.009 --> 00:05:17.035
And here's the kind of stuff that we'll
want to start doing in order to make our

73
00:05:17.035 --> 00:05:19.544
service worker a little
bit more maintainable.

74
00:05:25.202 --> 00:05:26.354
&gt;&gt; Mike North: Something like this.

75
00:05:30.573 --> 00:05:34.413
&gt;&gt; Mike North: So we're gonna kind
of have these little checks and

76
00:05:34.413 --> 00:05:37.463
flags that let us find where we wanna go.

77
00:05:37.463 --> 00:05:40.327
Up at the top before we
start responding to things.

78
00:05:40.327 --> 00:05:43.910
And then we can say if it's
a grocery image do that.

79
00:05:43.910 --> 00:05:51.130
Click else if isApi.Json.

80
00:05:51.130 --> 00:05:57.588
Return fetchApiJsonWithFallback,

81
00:05:57.588 --> 00:06:02.837
something like that, right?

82
00:06:02.837 --> 00:06:07.357
So you're gonna have this nice,
easy to read,

83
00:06:07.357 --> 00:06:14.939
high level function that kinda takes care
of routing stuff where it needs to go.

84
00:06:14.939 --> 00:06:18.719
And then we're gonna define
this function out here.

85
00:06:21.629 --> 00:06:26.810
&gt;&gt; Mike North: And
this simply needs to return a promise,

86
00:06:33.035 --> 00:06:34.782
&gt;&gt; Mike North: That resolves to

87
00:06:34.782 --> 00:06:36.159
a response.

88
00:06:36.159 --> 00:06:41.066
And so in here we're gonna either do,
we'll do something

89
00:06:41.066 --> 00:06:45.532
like,
&gt;&gt; Mike North: If this is an API call,

90
00:06:45.532 --> 00:06:47.681
actually that's already checked.

91
00:06:47.681 --> 00:06:50.633
We'll leave this as false for now.

92
00:06:52.699 --> 00:06:55.882
&gt;&gt; Mike North: All right,
it's up to you to figure this out,

93
00:06:55.882 --> 00:06:58.495
how to make an appropriate check, and

94
00:06:58.495 --> 00:07:04.312
the hint is probably qualitatively similar
to what we've done for image checking.

95
00:07:04.312 --> 00:07:07.896
All right, we checked the type,
like the accept header,

96
00:07:07.896 --> 00:07:11.055
we checked some part of
the path portion of the URL.

97
00:07:11.055 --> 00:07:15.324
Maybe there's some similarity with all
of our AP calls that we can use there.

98
00:07:15.324 --> 00:07:21.398
And here we're gonna say try
to go to the network for

99
00:07:21.398 --> 00:07:27.197
some json in the event
that it doesn't work out.

100
00:07:30.056 --> 00:07:31.168
&gt;&gt; Mike North: Serve from the cache.

101
00:07:34.031 --> 00:07:38.549
&gt;&gt; Mike North: And,
&gt;&gt; Mike North: Here,

102
00:07:38.549 --> 00:07:44.225
we can say this'll be sort of
a sub-path after this line.

103
00:07:44.225 --> 00:07:52.796
When it comes back, return that,
&gt;&gt; Mike North: That promise or,

104
00:07:52.796 --> 00:07:56.062
sorry, when it comes back, I'm trying
to write this in a way that it can be

105
00:07:56.062 --> 00:07:57.817
transformed into code really easily.

106
00:07:57.817 --> 00:08:03.363
When it comes back, begin the process
of putting it in the cache.

107
00:08:09.192 --> 00:08:16.498
&gt;&gt; Mike North: And then immediately,
&gt;&gt; Mike North: Return

108
00:08:16.498 --> 00:08:19.711
the original response.

109
00:08:26.441 --> 00:08:29.692
&gt;&gt; Mike North: And then resolve
the promise with the original response.

110
00:08:32.879 --> 00:08:36.220
&gt;&gt; Mike North: So
here's the reason I phrased it this way.

111
00:08:38.902 --> 00:08:44.056
&gt;&gt; Mike North: You have to remember
that like promises, they can resolve,

112
00:08:44.056 --> 00:08:48.515
but then they can actually
continue on doing stuff.

113
00:08:48.515 --> 00:08:53.456
So you can resolve with that response and
then begin some work that the service

114
00:08:53.456 --> 00:08:58.017
worker has to do what the application
may not care about at that moment,

115
00:08:58.017 --> 00:09:02.829
such as taking that response that's
already been heading back to the app.

116
00:09:02.829 --> 00:09:05.616
And like we wanna put that in or
cache for later.

117
00:09:05.616 --> 00:09:09.482
In terms of how we're going to figure
out how to put it in the cache,

118
00:09:09.482 --> 00:09:11.774
you're gonna do something like this.

119
00:09:11.774 --> 00:09:17.768
Caches.open(ALL_CACHES_Fallback).

120
00:09:21.688 --> 00:09:24.719
&gt;&gt; Mike North: And
then cache.add or addAll.

121
00:09:29.215 --> 00:09:33.462
&gt;&gt; Mike North: And
you'll pass that a request or

122
00:09:33.462 --> 00:09:37.106
URL, something like that.

123
00:09:39.955 --> 00:09:41.410
&gt;&gt; Mike North: Does that
make sense to everyone?

124
00:09:41.410 --> 00:09:44.578
I mean I'm trying not to
solve the problem for you but

125
00:09:44.578 --> 00:09:47.605
this is sort of the way I
would go about solving it.

126
00:09:47.605 --> 00:09:50.867
So I'm gonna quickly push this up to Git.

127
00:09:50.867 --> 00:09:54.525
Feel free to pull it down and
use this as your starting point or

128
00:09:54.525 --> 00:09:56.190
just refer to it on GitHub.

129
00:09:56.190 --> 00:09:59.125
But all of your work should
be done in this file.

130
00:09:59.125 --> 00:10:04.433
There's nothing in this caches
file that relates to falling back.

131
00:10:04.433 --> 00:10:07.706
So you're just gonna be dealing
with your Service Worker here.

132
00:10:07.706 --> 00:10:11.168
And again,
I hope you'll start to see similarities.

133
00:10:11.168 --> 00:10:14.722
We have one fallback, for images.

134
00:10:14.722 --> 00:10:18.624
And hopefully we'll start to see that
we can employ some of the things

135
00:10:18.624 --> 00:10:23.063
we've already learned, in order to have
slightly different strategies that

136
00:10:23.063 --> 00:10:24.894
are more appropriate for JSON.

137
00:10:24.894 --> 00:10:25.741
Any questions?

138
00:10:25.741 --> 00:10:31.145
&gt;&gt; Student: JSON responses in your API,
are you more apps to allow 404s,

139
00:10:31.145 --> 00:10:37.467
500s and such to fall through to the app,
and not pull those from cache?

140
00:10:37.467 --> 00:10:43.236
Because those are potentially,
the development would be super trolley,

141
00:10:43.236 --> 00:10:47.547
if you're returning from cache on a 500 or
a 404.

142
00:10:47.547 --> 00:10:49.356
&gt;&gt; Student2: Yeah.

143
00:10:49.356 --> 00:10:52.074
&gt;&gt; Mike North: So
here's my advice on status code.

144
00:10:52.074 --> 00:10:55.982
A 404 means resource not found.

145
00:10:55.982 --> 00:10:59.827
So the convention typically is if
you ask for a single resource, and

146
00:10:59.827 --> 00:11:03.348
that resource doesn't exist,
you should get a 404 back.

147
00:11:03.348 --> 00:11:08.451
So that would be like if we had a grocery
tile and no grocery items with that ID

148
00:11:08.451 --> 00:11:14.135
is known, and we're trying to get just
that one grocery, 404 is appropriate.

149
00:11:14.135 --> 00:11:19.612
A collection of resources should
never really return a 404.

150
00:11:19.612 --> 00:11:28.016
An empty collection is still a successful
return of a collection, it's just empty.

151
00:11:28.016 --> 00:11:32.826
It would be quite confusing to
other developers if you design

152
00:11:32.826 --> 00:11:37.551
a system where a 404 for
a list of groceries is possible.

153
00:11:37.551 --> 00:11:40.339
&gt;&gt; Student3: And if it's a 404,
it will never be in the cache.

154
00:11:40.339 --> 00:11:43.504
&gt;&gt; Mike North: Yes, exactly,
it never gets HTTP cached either,

155
00:11:43.504 --> 00:11:46.165
that's what you're talking about here.

156
00:11:46.165 --> 00:11:49.206
So we don't typically-
&gt;&gt; Student3: But it couldn't be in our app

157
00:11:49.206 --> 00:11:53.340
cache as well, because we'll
never might have retrieved it.

158
00:11:53.340 --> 00:11:56.539
&gt;&gt; Student: Unless it becomes a 404-
&gt;&gt; Mike North: You can cache a 404.

159
00:11:56.539 --> 00:11:57.347
&gt;&gt; Student: Later.

160
00:11:57.347 --> 00:12:00.100
&gt;&gt; Mike North: It's just a response.

161
00:12:00.100 --> 00:12:04.293
You can cache a 404, and
you might find, if we were to do that,

162
00:12:04.293 --> 00:12:05.760
that could be tricky.

163
00:12:05.760 --> 00:12:11.180
Because say we cache that 404,
that empty collection, and now,

164
00:12:11.180 --> 00:12:16.134
even if we handle that 404 as
an empty collection in our app,

165
00:12:16.134 --> 00:12:18.387
what if I add a new resource?

166
00:12:18.387 --> 00:12:22.545
Like add a new item, and
now we've cached that 404.

167
00:12:22.545 --> 00:12:26.625
Browsers don't typically cache
anything than successful status codes.

168
00:12:26.625 --> 00:12:28.874
For that matter, also keep in mind,

169
00:12:28.874 --> 00:12:33.602
we're constantly overwriting our fallback
cache as we see new JSON come in.

170
00:12:33.602 --> 00:12:39.245
And we're only using it in the event that
getting other data fresh is not possible.

171
00:12:39.245 --> 00:12:44.357
So it may be a little bit out of date,
but keep in mind the alternative is

172
00:12:44.357 --> 00:12:49.483
not get fresh data, the alternative
is our app does not work offline.

173
00:12:49.483 --> 00:12:50.843
&gt;&gt; Student: A lot of it, again,

174
00:12:50.843 --> 00:12:55.092
is very contextual to the application
that you're building.

175
00:12:55.092 --> 00:12:56.401
So if you imagine for

176
00:12:56.401 --> 00:13:01.567
a second that we are building a social
media application like Twitter, right?

177
00:13:01.567 --> 00:13:05.412
You could run into a situation where
you have a 404 resource that has been

178
00:13:05.412 --> 00:13:06.398
deleted, right?

179
00:13:06.398 --> 00:13:11.741
That's a very different situation from
a fallback image that you might have for

180
00:13:11.741 --> 00:13:13.107
an avatar, right?

181
00:13:13.107 --> 00:13:16.675
In those situations you might still want
to show the empty avatar versus a broken

182
00:13:16.675 --> 00:13:17.427
image, right?

183
00:13:17.427 --> 00:13:21.188
So it's very contextual to be like
given thing that you're doing in your

184
00:13:21.188 --> 00:13:22.429
application, right?

185
00:13:22.429 --> 00:13:24.007
&gt;&gt; Mike North: Yeah.
&gt;&gt; Student: So there's not a,

186
00:13:24.007 --> 00:13:26.742
here's one rule that fits everything.

187
00:13:26.742 --> 00:13:30.822
That's, again, the power of this when
you have this fine grain control.

188
00:13:30.822 --> 00:13:35.394
You're able to,
what is the expected user experience and

189
00:13:35.394 --> 00:13:39.511
use that a the basis for
how you handle these things.

190
00:13:39.511 --> 00:13:40.235
And again,

191
00:13:40.235 --> 00:13:45.244
having the full power of the JavaScript
programming language helps in this case.

192
00:13:45.244 --> 00:13:48.509
And so yeah, it all depends
on what exactly it is, right?

193
00:13:48.509 --> 00:13:51.414
Maybe we want to show,
if an image has been deleted,

194
00:13:51.414 --> 00:13:54.980
it might be appropriate to show
the fall back image in this case,

195
00:13:54.980 --> 00:13:58.835
versus some other resource,
is it more appropriate if it's paged?

196
00:13:58.835 --> 00:14:01.957
Is it more appropriate to say hey
this resource no longer exist, right?

197
00:14:01.957 --> 00:14:04.556
And those are like I think
very different in those cases.

198
00:14:04.556 --> 00:14:07.292
And there there are still status codes
that you would get back from a server,

199
00:14:07.292 --> 00:14:08.851
if there's a loss of connection, right?

200
00:14:08.851 --> 00:14:12.068
But they are different in maybe how you
choose to handle that user interface of

201
00:14:12.068 --> 00:14:12.922
your application.

202
00:14:12.922 --> 00:14:18.705
&gt;&gt; Mike North: But one one thing you'll
notice that's really consistent about what

203
00:14:18.705 --> 00:14:24.694
Steve and I have said, 404 indicates
a single resource is not found.

204
00:14:24.694 --> 00:14:30.267
That is not the same thing
as empty list of results.

205
00:14:30.267 --> 00:14:34.284
All right, with that, I just
re-pushed because I forgot I need to

206
00:14:34.284 --> 00:14:38.400
return a promise, I just kick off
a promise and forget to return it.

207
00:14:38.400 --> 00:14:40.930
So this is a great starting point.

208
00:14:40.930 --> 00:14:43.607
Sorry, I have to save it one more time.

209
00:14:43.607 --> 00:14:47.405
A great starting point for
the next exercise.

210
00:14:47.405 --> 00:14:52.496
And we're going to take
about 20 minutes for this.

211
00:14:52.496 --> 00:14:57.381
So the goal here is that now you
should be able to see that JSON

212
00:14:57.381 --> 00:14:59.939
is cached as you encounter it.

213
00:14:59.939 --> 00:15:04.769
So just loading the first page, you should
start to see that maybe eight different

214
00:15:04.769 --> 00:15:08.906
JSON requests and then being cached,
one per category of groceries.

215
00:15:08.906 --> 00:15:12.237
And that will allow you,
in the event that your network is offline,

216
00:15:12.237 --> 00:15:14.410
you can then reach in there and
retrieve it.

