WEBVTT

1
00:00:00.210 --> 00:00:05.090
&gt;&gt; Mike North: The last strategy here, and
this is probably one of the more complex

2
00:00:05.090 --> 00:00:09.160
generic strategies, strategies that
have a name, that are accepted as

3
00:00:09.160 --> 00:00:13.850
a pattern that we wanna use, it is
called the cache and update strategy.

4
00:00:15.280 --> 00:00:18.160
So here, the app says I want a resource,

5
00:00:18.160 --> 00:00:23.000
the cache goes and gets it for user.

6
00:00:23.000 --> 00:00:26.570
It goes,
makes a fetch to the outside world.

7
00:00:26.570 --> 00:00:30.040
And then when it comes back,
it's got this thing in the fallback cache.

8
00:00:31.940 --> 00:00:37.000
And then the twist on this
is remember that from our

9
00:00:37.000 --> 00:00:41.380
QR code exercise we have the ability
to post message to a worker,

10
00:00:41.380 --> 00:00:45.260
and for that worker to post
message back to the application.

11
00:00:45.260 --> 00:00:50.920
So in that case,
we can notify the app that a new

12
00:00:50.920 --> 00:00:56.350
resource is available, and the application
can handle that however is appropriate.

13
00:00:56.350 --> 00:01:00.820
So in the case of images, let's say
Frontend Masters has a service worker and

14
00:01:00.820 --> 00:01:04.220
they change all of the instructor photos.

15
00:01:04.220 --> 00:01:08.344
And for some reason, it's really
important for those to be live updated.

16
00:01:10.020 --> 00:01:13.840
You could ask for the instructor photo,
and it's gonna go and get.

17
00:01:13.840 --> 00:01:18.440
It's gonna say here's the cached one
that I've had for the past month.

18
00:01:18.440 --> 00:01:22.680
And while you do your thing,
I'm gonna go out to the Internet,

19
00:01:22.680 --> 00:01:27.410
fetch the new version of it, and
I'm gonna let you know when I have it.

20
00:01:27.410 --> 00:01:30.730
And at that point the app could say,
this image is here now.

21
00:01:30.730 --> 00:01:32.020
It's been updated.

22
00:01:32.020 --> 00:01:37.820
I'm now go and refresh that image and
render it on the screen.

23
00:01:37.820 --> 00:01:40.610
So some things are safe to
like swap out right away.

24
00:01:41.840 --> 00:01:42.955
Obviously, not okay for

25
00:01:42.955 --> 00:01:46.151
something like JavaScript cuz you
have scope to worry about and state.

26
00:01:49.820 --> 00:01:54.150
&gt;&gt; Mike North: So here is a rough idea
of the cache and the network strategy.

27
00:01:56.410 --> 00:02:03.490
Again, we are having a bias for
using the cache first,

28
00:02:03.490 --> 00:02:08.080
falling back to the network in the event
that the cache is not working out, right,

29
00:02:08.080 --> 00:02:14.910
with this fetchFromNetwork
in the cache handler, right?

30
00:02:14.910 --> 00:02:17.830
And actually, cache the network is
what you've already implemented.

31
00:02:17.830 --> 00:02:19.680
This is the one you're
already implemented.

32
00:02:19.680 --> 00:02:21.500
So this was the fallback image.

33
00:02:27.970 --> 00:02:32.722
&gt;&gt; Mike North: And here, so we had
a specific image that we were using for

34
00:02:32.722 --> 00:02:34.900
grocery images, right?

35
00:02:34.900 --> 00:02:38.060
We've matched that mime type and
had that images path as part of

36
00:02:38.060 --> 00:02:42.139
our test to see if this request is for
that specific kind of resource.

37
00:02:43.240 --> 00:02:47.480
This code right here you can copy and
paste, like the event.respondWith(.

38
00:02:47.480 --> 00:02:51.780
This could be a drop-in for you to
have 404 images of whatever you like.

39
00:02:51.780 --> 00:02:56.670
So this is one of the things
that older offline strategies,

40
00:02:56.670 --> 00:03:01.050
like AppCache, did not provide
us with a solution for, right?

41
00:03:01.050 --> 00:03:04.921
We were stuck with those empty
frames of images, and oftentimes,

42
00:03:04.921 --> 00:03:08.249
that would result in layout
shifting all over the place.

43
00:03:11.200 --> 00:03:14.420
&gt;&gt; Mike North: So with that, we've
learned a bunch of caching strategies.

44
00:03:16.210 --> 00:03:21.500
We need a means of
composing them together.

45
00:03:21.500 --> 00:03:27.044
And the two things I want you to remember
are the ability to check the URL for

46
00:03:27.044 --> 00:03:30.100
certain patterns, comparing origin.

47
00:03:30.100 --> 00:03:35.301
Right, so
we could do event.request origin,

48
00:03:35.301 --> 00:03:39.461
and that would give you, in our case,

49
00:03:39.461 --> 00:03:43.630
https://localhost:3000.

50
00:03:43.630 --> 00:03:46.468
So that's a useful check for
certain type of things.

51
00:03:46.468 --> 00:03:50.475
Usually for
these cash fall back situations,

52
00:03:50.475 --> 00:03:55.929
you only wanna deal with your
application assets in that case.

53
00:03:55.929 --> 00:03:58.109
And the second tool you're
gonna use is the acceptHeader.

54
00:03:58.109 --> 00:04:03.697
So here's a little cheat sheet for you
in an effort to give you a framework for

55
00:04:03.697 --> 00:04:08.764
putting something like this in your
fetch handler and then diverting

56
00:04:08.764 --> 00:04:14.645
out into specific scenario based methods
for handling those different cases.

57
00:04:18.900 --> 00:04:21.730
&gt;&gt; Mike North: So
in terms of my advice here like precache,

58
00:04:21.730 --> 00:04:25.786
I'm just recapping here cuz
we're about dive into exercise.

59
00:04:25.786 --> 00:04:28.670
Precache assets you know
about at build time.

60
00:04:31.850 --> 00:04:38.010
Cache on the fly and fall back to
assets that come from a database maybe.

61
00:04:38.010 --> 00:04:40.278
Our grocery images,
those come from a database.

62
00:04:40.278 --> 00:04:43.560
We don't know all of the URLs for
all of the grocery images.

63
00:04:43.560 --> 00:04:47.940
So those sort of as you encounter them,
store them for later.

64
00:04:49.460 --> 00:04:55.785
And then have a bias towards making
your app boot really quickly,

65
00:04:55.785 --> 00:05:02.310
and it's okay to trade a little bit
of freshness in order to get that.

66
00:05:02.310 --> 00:05:07.020
Because there's real business about you
tied to being able to boot quickly.

67
00:05:07.020 --> 00:05:11.650
And being one version out of date,
oftentimes, if you're building things in

68
00:05:11.650 --> 00:05:17.040
a way that is backwards compatible,
that shouldn't be a problem.

69
00:05:17.040 --> 00:05:19.450
I mean unless there's a security issue or
something like that.

70
00:05:19.450 --> 00:05:24.430
And we will talk about situations where
if you really need to push something out,

71
00:05:24.430 --> 00:05:25.920
you can override that.

72
00:05:25.920 --> 00:05:27.540
You can leave yourself
a little escape hatch.

