WEBVTT

1
00:00:00.250 --> 00:00:01.620
&gt;&gt; Steve Kinney: All right,
some considerations.

2
00:00:01.620 --> 00:00:03.950
You can't pass state then, right?

3
00:00:03.950 --> 00:00:07.740
You can't say, hey,
schedule this and take this object.

4
00:00:07.740 --> 00:00:10.730
Unfortunately, that's not how it works,
we don't pass state back and

5
00:00:10.730 --> 00:00:12.330
forth between our two threads.

6
00:00:12.330 --> 00:00:15.610
That is a world of sadness
waiting to happen.

7
00:00:15.610 --> 00:00:19.015
But you can use any of those
durable storage mediums,

8
00:00:19.015 --> 00:00:24.400
like Mike just showed IndexedDB, that's
a great option for keeping dynamic data.

9
00:00:25.770 --> 00:00:30.990
When your Service Worker attempts to sync,
it can read that data out of IndexedDB.

10
00:00:30.990 --> 00:00:34.200
Like I said before, if you register
multiple sync events it will do the most

11
00:00:34.200 --> 00:00:36.000
recent one, overwrite the previous.

12
00:00:36.000 --> 00:00:40.380
This is probably a good thing so
you don't accidentally favor,

13
00:00:40.380 --> 00:00:42.900
it's like six server request
favor in the same ones.

14
00:00:42.900 --> 00:00:44.220
But you have to think about this, right?

15
00:00:44.220 --> 00:00:45.860
It could be like, hey,

16
00:00:45.860 --> 00:00:48.560
I wanna read through all the ones
that haven't been synchronized.

17
00:00:50.300 --> 00:00:54.980
We said before, just like caching,

18
00:00:54.980 --> 00:00:59.520
just like intercepting network requests,
just like push notifications,

19
00:00:59.520 --> 00:01:05.890
there's no one-size-fits-all strategy for
implementing sync.

20
00:01:05.890 --> 00:01:08.960
It all depends on the use
case of your application.

21
00:01:08.960 --> 00:01:13.126
So there might be some cases where
you would probably wouldn't,

22
00:01:13.126 --> 00:01:16.470
like again again,
we said the idea of a credit card.

23
00:01:16.470 --> 00:01:19.830
You wouldn't, in those cases,
want to just say, yeah I got this, right,

24
00:01:19.830 --> 00:01:22.722
cuz then you have to provide
a user interface for

25
00:01:22.722 --> 00:01:25.500
cancelling it if they change their mind,
stuff along those lines.

26
00:01:25.500 --> 00:01:30.060
But there are certain things
that you can queue up.

27
00:01:30.060 --> 00:01:34.951
Cool, but I think one my favorites
is any kind of Twitter application.

28
00:01:34.951 --> 00:01:38.270
I can't write a tweet usually when
I'm offline, even on a native app.

29
00:01:38.270 --> 00:01:41.690
But I can go through and
favor a bunch of tweets.

30
00:01:41.690 --> 00:01:45.340
And if I'm offline,
the application doesn't say a word to me.

31
00:01:45.340 --> 00:01:48.100
It says yeah, favorative,
red heart into it.

32
00:01:49.180 --> 00:01:53.120
Later on, when this native app connects to

33
00:01:54.200 --> 00:01:57.859
server it will synchronize all
of those favorited tweets.

34
00:01:58.900 --> 00:02:03.140
For me as a user, I don't even notice.

35
00:02:03.140 --> 00:02:06.590
Let's take a look at a quick
example of background sync and

36
00:02:06.590 --> 00:02:08.430
one way that you could implement it.

37
00:02:08.430 --> 00:02:10.290
And again, this is a very naive example.

38
00:02:10.290 --> 00:02:14.900
To actually get it working in more than
a few minutes and more than a byte-size

39
00:02:14.900 --> 00:02:18.160
amount of code, there are little things
that we'll have to consider along the way.

40
00:02:18.160 --> 00:02:19.980
But let's actually see it in action.

41
00:02:21.940 --> 00:02:24.720
&gt;&gt; Speaker 2: Is it possible
to differentiate that you have

42
00:02:24.720 --> 00:02:31.160
an unresponsive server, or against
that you really do not have network?

43
00:02:32.210 --> 00:02:36.320
&gt;&gt; Steve Kinney: So there are ways for the
navigator to tell if it's online or not.

44
00:02:36.320 --> 00:02:39.430
So you do have that option.

45
00:02:39.430 --> 00:02:43.990
Again, the trickier to solve
is which our Jay calls LieFi

46
00:02:43.990 --> 00:02:46.880
which is a inconsistent
Internet connection.

47
00:02:46.880 --> 00:02:48.840
Those are the trickier problems to solve.

48
00:02:48.840 --> 00:02:52.270
No Internet connection,
somewhat easy problem to solve.

49
00:02:52.270 --> 00:02:54.640
Bad Internet connection is much harder.

