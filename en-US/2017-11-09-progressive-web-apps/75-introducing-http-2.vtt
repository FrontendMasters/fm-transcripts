WEBVTT

1
00:00:00.470 --> 00:00:05.710
&gt;&gt; Mike: All right, so as we approach
sort of the final punchline of this

2
00:00:05.710 --> 00:00:08.850
course here, I want to talk
a little bit about networking.

3
00:00:08.850 --> 00:00:12.070
We've done a lot to improve
the loading performance and

4
00:00:12.070 --> 00:00:16.127
the capabilities of our applications
through changing our own code.

5
00:00:16.127 --> 00:00:21.270
But we've still been using
a CTP 1,which for decades,

6
00:00:21.270 --> 00:00:28.810
that has been the foundation of how we
send web pages from servers to clients.

7
00:00:28.810 --> 00:00:32.414
And where we used to be looking
at Wikipedia articles,right,

8
00:00:32.414 --> 00:00:34.319
documents in the document view.

9
00:00:34.319 --> 00:00:38.542
And that was usually one
to three HTTP requests,

10
00:00:38.542 --> 00:00:43.280
like the idea of external style sheets,
that was a wild

11
00:00:43.280 --> 00:00:48.550
concept 20 years ago when
these standards were designed.

12
00:00:48.550 --> 00:00:50.340
Now things look very different.

13
00:00:50.340 --> 00:00:52.290
Now these rich clients
that we're building,

14
00:00:53.310 --> 00:00:57.840
they have a lot more resources and we're
trying to split things apart in such a way

15
00:00:57.840 --> 00:01:01.300
that users have to download
only what they need.

16
00:01:01.300 --> 00:01:06.326
And there are a lot more connections
going on than we used to see.

17
00:01:06.326 --> 00:01:11.320
HTTP/2 is the next generation of the HTTP

18
00:01:11.320 --> 00:01:16.240
protocol that aims to give us some
very meaningful improvements.

19
00:01:17.410 --> 00:01:22.919
So the first improvement you'll notice
is that this is fully multiplexed.

20
00:01:22.919 --> 00:01:27.440
Meaning we're not asking for files one
at a time with independent connections.

21
00:01:27.440 --> 00:01:29.660
We initiate a single connection and

22
00:01:29.660 --> 00:01:34.860
then we can receive multiple
independent files in parallel, right?

23
00:01:34.860 --> 00:01:38.190
So it's not like I wanna stream
you one piece of data and stop and

24
00:01:38.190 --> 00:01:38.869
here's another one.

25
00:01:41.030 --> 00:01:44.720
Servers can push responses
onto client caches.

26
00:01:44.720 --> 00:01:50.135
And what that means is,
you can think of it as, I ask a server for

27
00:01:50.135 --> 00:01:53.910
index.html, and
it's gonna send me the HTML.

28
00:01:53.910 --> 00:01:59.950
And before it even gets another word from
me, it'll start to send me the JavaScript,

29
00:01:59.950 --> 00:02:05.272
and maybe some images, and things that it
know corresponds to that HTML document.

30
00:02:05.272 --> 00:02:08.542
And basically by the time
the browser starts reading it,

31
00:02:08.542 --> 00:02:11.757
it's gonna say,
I need this piece of JavaScript.

32
00:02:11.757 --> 00:02:14.690
And it'll go and see that,
it's already on its way to me.

33
00:02:14.690 --> 00:02:19.090
It's halfway here, and
I just have to wait for it to arrive.

34
00:02:19.090 --> 00:02:23.820
So this really makes it so that you're no
longer waiting for that HTML document.

35
00:02:23.820 --> 00:02:27.630
Looking at that, figuring out what
additional resources you need to get.

36
00:02:27.630 --> 00:02:32.199
And its no longer sort of waterfall
approach to sending everything you need in

37
00:02:32.199 --> 00:02:34.320
order to get that page on te screen.

38
00:02:35.610 --> 00:02:40.670
That's what we mean by push,
a client ask for one thing you can send

39
00:02:40.670 --> 00:02:45.620
that think back and push three
other things, or n other things.

40
00:02:48.150 --> 00:02:52.269
So we already talked about some
problems with HTTP/1.1, and

41
00:02:52.269 --> 00:02:54.670
it's gotten a lot better, right?

42
00:02:54.670 --> 00:02:59.064
So the average connection now is much
better than it was 10 years ago.

43
00:02:59.064 --> 00:03:03.330
Round trip time is still
kind of where it's been.

44
00:03:03.330 --> 00:03:06.933
And in terms of thinking about mobile
networks, some rules of thumb are,

45
00:03:06.933 --> 00:03:08.569
if you're on an LTE connection.

46
00:03:08.569 --> 00:03:12.299
That is, a single digit number of
milliseconds of extra latency,

47
00:03:12.299 --> 00:03:17.810
round trip, relative to being on WiFi or
something, you've a little bit extra.

48
00:03:17.810 --> 00:03:24.650
For 3G, you add 1 to 300 milliseconds
of extra round trip time.

49
00:03:24.650 --> 00:03:27.248
And then if you're on 2G connection,

50
00:03:27.248 --> 00:03:30.730
that's like a full second
of extra round trip time.

51
00:03:30.730 --> 00:03:32.740
So we need a way that we're not

52
00:03:34.440 --> 00:03:37.300
having a serial chain of
multiple request back and forth.

53
00:03:37.300 --> 00:03:39.790
Because on older devices and
older networks,

54
00:03:39.790 --> 00:03:44.109
and on things that or
often like Li-Fi, right?

55
00:03:45.370 --> 00:03:49.069
We end up having really
inappropriate load times,

56
00:03:49.069 --> 00:03:53.896
upwards of 20 seconds just because it's so
much back and forth.

57
00:03:58.159 --> 00:03:59.547
&gt;&gt; Mike: And as I pointed out,

58
00:03:59.547 --> 00:04:04.180
I've had a lot of files here think
about all these grocery images.

59
00:04:04.180 --> 00:04:09.234
Right, the HTTP/1.1 approach would have
me making something like a sprite.

60
00:04:09.234 --> 00:04:14.130
Where I'd put all of those images
under one big mega image and use CSS

61
00:04:14.130 --> 00:04:17.430
background positioning or something to
try and consolidate those resources.

62
00:04:17.430 --> 00:04:21.126
I don't wanna do that, I wanna have
them all as original files, so

63
00:04:21.126 --> 00:04:22.582
I only send the one I need.

64
00:04:22.582 --> 00:04:27.439
And I shouldn't have to pay extra
bandwidth in order to get my

65
00:04:27.439 --> 00:04:30.610
number of requests down, right?

66
00:04:30.610 --> 00:04:34.560
Having my mega image that has 15
grocery items that I don't need,

67
00:04:34.560 --> 00:04:36.030
that should not be the solution.

68
00:04:36.030 --> 00:04:39.240
And HTTP/2 makes some
massive improvements there.

69
00:04:40.330 --> 00:04:45.165
So here's a waterfall of view, Steve,
do you remember which site this was?

70
00:04:45.165 --> 00:04:46.057
Dinosaur.js?

71
00:04:46.057 --> 00:04:47.993
&gt;&gt; Steve: That is FrontEndMasters.com.

72
00:04:47.993 --> 00:04:49.480
&gt;&gt; Mike: FrontEndMasters.com.

73
00:04:49.480 --> 00:04:52.930
114 independent requests in
order to get that page loaded.

74
00:04:52.930 --> 00:04:58.330
That's one per image, one per external
stylesheet, script, fav icon.

75
00:04:58.330 --> 00:04:59.960
All of these little things add up.

76
00:04:59.960 --> 00:05:03.750
If you're using WebApp manifest,
that is a separate request there.

77
00:05:03.750 --> 00:05:09.480
If you're using an AppCache,
that asset manifest is a separate request.

78
00:05:09.480 --> 00:05:11.200
It adds up really, really quickly.

79
00:05:11.200 --> 00:05:13.070
&gt;&gt; Steve: And
I will say that is like average.

80
00:05:14.330 --> 00:05:17.180
&gt;&gt; Mike: We're not trying to shame here,
this is a real number here.

81
00:05:17.180 --> 00:05:20.260
&gt;&gt; Steve: Most pages that I looked at for
this screenshot were in that same number.

82
00:05:20.260 --> 00:05:24.534
&gt;&gt; Mike: Absolutely, but it's pretty
terrifying when you think about

83
00:05:24.534 --> 00:05:27.527
the overhead for each connection, right?

84
00:05:27.527 --> 00:05:29.600
So what this has led to,

85
00:05:29.600 --> 00:05:35.530
the fact that we're building on
this same HTTP/1.1 protocol.

86
00:05:35.530 --> 00:05:37.663
We've been using it for

87
00:05:37.663 --> 00:05:43.750
many decades,is we've learned
to stick to certain conventions.

88
00:05:43.750 --> 00:05:48.185
And we've learned certain hacks
that we can use in order to avoid

89
00:05:48.185 --> 00:05:51.420
letting this hold us back too much.

90
00:05:51.420 --> 00:05:54.350
So one of them is reusing connections and

91
00:05:54.350 --> 00:05:59.620
that just means having many
things hosted on a single domain.

92
00:05:59.620 --> 00:06:02.330
So you can establish that TLS connection,
and

93
00:06:02.330 --> 00:06:05.440
get your DNS resolution out of the way,
and then hit that a few times.

94
00:06:07.200 --> 00:06:10.340
The modern browsers will
allow between six and

95
00:06:10.340 --> 00:06:13.790
nine simultaneous connections per domain.

96
00:06:13.790 --> 00:06:18.280
So if you need more than that 114, right?

97
00:06:18.280 --> 00:06:22.570
We need to shard our resources, so

98
00:06:22.570 --> 00:06:26.690
that we can download like two pieces
of JavaScript from this one thing and

99
00:06:26.690 --> 00:06:29.300
six images and time from this other thing.

100
00:06:29.300 --> 00:06:32.140
And if you look at something
like webpage test, and

101
00:06:32.140 --> 00:06:33.990
that was a screenshot
of webpage test there.

102
00:06:35.780 --> 00:06:38.039
And have a lot of images on
the screen that are all competing for

103
00:06:38.039 --> 00:06:38.748
this connection.

104
00:06:38.748 --> 00:06:41.389
You can actually watch that six start and

105
00:06:41.389 --> 00:06:45.240
then one has to finish
before the seventh begins.

106
00:06:45.240 --> 00:06:48.280
So it's almost like you have a pool and
you cannot go over six.

107
00:06:48.280 --> 00:06:50.690
This is really bad.

108
00:06:52.820 --> 00:06:58.100
&gt;&gt; Mike: So, the good news is that HTTP/2
from our standpoint as developers,

109
00:06:58.100 --> 00:07:02.100
is largely not something
that we need to worry about.

110
00:07:02.100 --> 00:07:08.300
All of the HTTP/1 work we've
done will also work in HTTP/2.

111
00:07:08.300 --> 00:07:12.605
This is really important for
adoption, because it means that

112
00:07:12.605 --> 00:07:17.173
companies like ACMI and
CloudFlare that can upgrade their CDNs.

113
00:07:17.173 --> 00:07:21.261
And they can start to roll this
stuff out without waiting for

114
00:07:21.261 --> 00:07:23.320
apps to retrofit something.

115
00:07:25.220 --> 00:07:31.070
All of your stuff should still work, but
the big differences here are that we can

116
00:07:31.070 --> 00:07:36.679
send multiple files over one connection
avoiding that repeated overhead.

117
00:07:36.679 --> 00:07:41.808
And we can bake information
that we know at build time

118
00:07:41.808 --> 00:07:47.056
about certain types of requests and
proactively push

119
00:07:47.056 --> 00:07:52.320
resources to the client that
we know are part of that.

120
00:07:52.320 --> 00:07:54.900
So if you've heard of code splitting or
route splitting,

121
00:07:54.900 --> 00:07:57.620
the idea of on an orders page,

122
00:07:57.620 --> 00:08:02.700
we need maybe some extra JavaScript there
or some style that only pertains to that.

123
00:08:02.700 --> 00:08:06.670
That would only be included if that's
what's going to be on the screen.

124
00:08:06.670 --> 00:08:11.770
And we can push that extra CSS file and
that extra JavaScript file.

125
00:08:11.770 --> 00:08:16.040
We can sort of slice
things up very smartly and

126
00:08:16.040 --> 00:08:21.750
not pay the typical price of having so
many different files to download.

127
00:08:21.750 --> 00:08:24.760
&gt;&gt; Speaker 3: You mean
instead of bundling but

128
00:08:24.760 --> 00:08:27.020
lazy loading different parts of the app.

129
00:08:27.020 --> 00:08:27.750
Is that what you mean?

130
00:08:27.750 --> 00:08:30.440
&gt;&gt; Mike: So bundling is important
because that's how we're going to get

131
00:08:30.440 --> 00:08:31.270
all of these files.

132
00:08:31.270 --> 00:08:34.252
But if you have 50 different
routes in your app,

133
00:08:34.252 --> 00:08:37.241
50 different meaningful
URLs that people had.

134
00:08:37.241 --> 00:08:42.178
You can end up with one JavaScript
file that represents the core

135
00:08:42.178 --> 00:08:45.990
stuff that you need regardless of route.

136
00:08:45.990 --> 00:08:48.900
And then a per route file

137
00:08:48.900 --> 00:08:53.790
that when combined with the core is like
everything you will need for that URL.

138
00:08:53.790 --> 00:08:57.800
When we start talking about
architecture patterns in a few minutes.

139
00:08:57.800 --> 00:09:01.310
That basically lets you get away with
sending, only if the JavaScript, and

140
00:09:01.310 --> 00:09:06.200
only if the CSS that's absolutely
needed from the server to the client,

141
00:09:06.200 --> 00:09:09.780
in order to get that page
rendered as quickly as possible.

142
00:09:09.780 --> 00:09:13.621
But that involves slicing things up
very cleverly, if that makes sense, and

143
00:09:13.621 --> 00:09:15.111
then lazily loading others.

144
00:09:19.140 --> 00:09:24.689
&gt;&gt; Mike: So this concept of
pipelining versus not pipelining,

145
00:09:24.689 --> 00:09:31.440
this is just the idea of this
concept of HTTP/2 push, right?

146
00:09:31.440 --> 00:09:36.040
So on the left with no pipelining,
this is the HTTP/1.1 idea.

147
00:09:36.040 --> 00:09:42.880
Where we kind of ask for index.html and
then we discover that we need the CSS.

148
00:09:42.880 --> 00:09:47.400
And only at that moment does
that new request go out.

149
00:09:47.400 --> 00:09:49.750
On the right, we know about these things.

150
00:09:49.750 --> 00:09:53.930
We've built the applications, and
we can package things together and

151
00:09:55.370 --> 00:09:58.310
we know exactly what's gonna be
required for our app to render.

152
00:10:00.390 --> 00:10:07.150
So, in terms of browser support,
this should be quite encouraging.

153
00:10:07.150 --> 00:10:10.620
This is something that has been
worked on for a long time.

154
00:10:10.620 --> 00:10:15.560
And it is supported basically
everywhere that you care about.

155
00:10:15.560 --> 00:10:19.750
Even looking at IE, because back to IE11.

156
00:10:19.750 --> 00:10:25.000
Often times the way you're gonna wanna set
this up, particularly if you use Node,

157
00:10:25.000 --> 00:10:28.835
it's not safe to have Node open
to a long living connection.

158
00:10:28.835 --> 00:10:31.195
Cuz remember we have one thread,

159
00:10:31.195 --> 00:10:35.080
it's not more safe to let
Node have a long connection.

160
00:10:35.080 --> 00:10:37.927
Where it's pipelining
a bunch of files back than it

161
00:10:37.927 --> 00:10:40.940
is to have it reading a QR code for
20 seconds.

162
00:10:40.940 --> 00:10:43.480
It's locked up and busy doing one thing.

163
00:10:43.480 --> 00:10:47.120
Which prevents it from
exercising its super power

164
00:10:47.120 --> 00:10:51.750
of doing a bunch of
multitasked tiny things that

165
00:10:51.750 --> 00:10:55.910
have a high degree of concurrency
even though there's no parallelism.

166
00:10:55.910 --> 00:11:01.630
So typically what you'll do is you'll
have HTTP/1.1 on your application server.

167
00:11:01.630 --> 00:11:06.090
And then you might have an Edge server,
like Engine X is a popular one.

168
00:11:06.090 --> 00:11:09.720
And that will act as what's
called an HTTP/2 proxy.

169
00:11:09.720 --> 00:11:14.500
And basically take care of
transforming the stuff in

170
00:11:14.500 --> 00:11:19.010
the data center into H2 pushes to clients.

171
00:11:19.010 --> 00:11:23.820
So oftentimes the browser will be able
to hit that with either protocol.

172
00:11:23.820 --> 00:11:29.757
And if they don't support the new stuff,
if you're using IE 10,

173
00:11:29.757 --> 00:11:34.448
often these proxies will
have no trouble just passing

174
00:11:34.448 --> 00:11:38.946
straight through and
stepping down to the 1.1.

175
00:11:38.946 --> 00:11:40.860
&gt;&gt; Speaker 3: So
this raises an important question.

176
00:11:40.860 --> 00:11:48.087
Not important, I mean it's interesting
to me that what is the adoption gap for?

177
00:11:48.087 --> 00:11:50.767
&gt;&gt; Mike: So
when you talk about an adoption gap,

178
00:11:50.767 --> 00:11:56.030
there are a couple of different
adoption things that need to happen.

179
00:11:56.030 --> 00:11:59.884
And in order for
us to really take advantage of HTTP/2,

180
00:11:59.884 --> 00:12:03.670
a lot of infrastructure
has to be converted over.

181
00:12:03.670 --> 00:12:07.380
The first adoption gap was
CDNs like Akamai, right?

182
00:12:07.380 --> 00:12:11.026
Where it doesn't matter were your
little Engine X server does what it's

183
00:12:11.026 --> 00:12:11.869
supposed to do.

184
00:12:11.869 --> 00:12:15.881
Or if you're on Amazon and
you've got an EC2 machine and

185
00:12:15.881 --> 00:12:20.490
you have installed an H2 server and
you're serving it up.

186
00:12:20.490 --> 00:12:23.470
If you're going through CloudFront or
going through their network

187
00:12:23.470 --> 00:12:28.587
infrastructure, if at any point along the
way there's something that only supports

188
00:12:28.587 --> 00:12:33.290
1.1, you're stepped back down to
1.1 when talking to that browser.

189
00:12:33.290 --> 00:12:38.200
So you need the devices to support it,
you need the Edge

190
00:12:38.200 --> 00:12:42.490
network technology to support it,
you need the CDNs to support it.

191
00:12:42.490 --> 00:12:46.219
And we are finally there.

192
00:12:46.219 --> 00:12:47.905
There's really no excuse for adoption,

193
00:12:47.905 --> 00:12:51.010
other than that developers need to
know how to take advantage of it.

194
00:12:51.010 --> 00:12:56.450
In most cases, if you're serving from CDN,
it's already using HTTP/2.

195
00:12:56.450 --> 00:12:58.942
But in terms of like asset serving layer,

196
00:12:58.942 --> 00:13:03.574
like this thing that we've been
hitting localhost 3000, that's where

197
00:13:03.574 --> 00:13:07.581
we need to start as developers
adopting technology like Webpack.

198
00:13:07.581 --> 00:13:12.224
And working things into it that
help us initiate the push,

199
00:13:12.224 --> 00:13:15.650
right, initiate that pipeline request.

200
00:13:15.650 --> 00:13:17.950
Cuz our CDN can't help us with that.

201
00:13:17.950 --> 00:13:20.740
That has to happen right at
the heart of the application

202
00:13:20.740 --> 00:13:23.280
as we serve up the next.html.

203
00:13:23.280 --> 00:13:24.770
&gt;&gt; Speaker 3: So
are there any good libraries,

204
00:13:24.770 --> 00:13:28.550
or is it like you still use the Webpack,
but you do things differently?

205
00:13:28.550 --> 00:13:32.010
&gt;&gt; Mike: So
if you use Firebase's style of coasting,

206
00:13:32.010 --> 00:13:37.010
all you need to do on your HTML documents
is add a couple little headers.

207
00:13:37.010 --> 00:13:39.800
You have to work with the link header and
you can go and

208
00:13:39.800 --> 00:13:41.140
look at the documentation for that.

209
00:13:41.140 --> 00:13:45.870
Or maybe in the Firebase course,
we may or may not have that in there.

210
00:13:45.870 --> 00:13:48.698
But it's pretty easy,and again,

211
00:13:48.698 --> 00:13:54.270
you just have to leave some clues and
then serve it up in HTTP/1.1.

212
00:13:54.270 --> 00:13:59.115
And then if you handle assembling
those clues like the special header,

213
00:13:59.115 --> 00:14:03.555
then at the CDN level,
Firebase's edge servers will take care of

214
00:14:03.555 --> 00:14:09.494
optimizing that and pushing the resources
that you specify in the headers.

215
00:14:09.494 --> 00:14:14.290
So really the adoption problem is over,
now it's

216
00:14:14.290 --> 00:14:18.650
about developers taking that next step and
taking advantage of what's available.

