WEBVTT

1
00:00:00.670 --> 00:00:03.981
&gt;&gt; Steve Kinney: So let's take a look,
and we'll go first to a good friend,

2
00:00:03.981 --> 00:00:06.710
Chrome, and
I have another glitch ready for us.

3
00:00:06.710 --> 00:00:08.590
And so this one is called dream catcher.

4
00:00:09.740 --> 00:00:13.364
I'm good at naming things, I don't
know if you all noticed that today.

5
00:00:44.901 --> 00:00:48.418
&gt;&gt; Steve Kinney: .me, cool, and this,

6
00:00:48.418 --> 00:00:53.609
when it loads, is an application for

7
00:00:53.609 --> 00:00:57.801
me to keep track of my dreams.

8
00:01:01.119 --> 00:01:03.211
&gt;&gt; Steve Kinney: And
what we'll do is we'll add a new dream.

9
00:01:08.727 --> 00:01:10.747
&gt;&gt; Steve Kinney: And
we'll submit that in there.

10
00:01:15.816 --> 00:01:20.786
&gt;&gt; Steve Kinney: And you see that I've

11
00:01:20.786 --> 00:01:24.928
added there, and

12
00:01:24.928 --> 00:01:31.010
everything works great.

13
00:01:31.010 --> 00:01:34.950
Let's go ahead and let's just imagine
that I don't have connectivity.

14
00:01:36.280 --> 00:01:37.980
Seems like a legitimate thing.

15
00:01:37.980 --> 00:01:39.860
I can go ahead and refresh this page.

16
00:01:40.870 --> 00:01:44.850
All right, everything works great, works
offline, as we've come to expect after

17
00:01:44.850 --> 00:01:49.540
our long hard two days of learning
how to build offline apps.

18
00:01:49.540 --> 00:01:53.559
All right, so
let's say what should my dream be?

19
00:01:58.159 --> 00:02:02.365
&gt;&gt; Speaker 1: [INAUDIBLE]
&gt;&gt; Steve Kinney: That dream is gone.

20
00:02:02.365 --> 00:02:05.280
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Steve Kinney: That dream is over.

21
00:02:05.280 --> 00:02:06.830
Don't get eaten by a spaghetti monster.

22
00:02:08.190 --> 00:02:12.760
And the way we've handled this
is we've said okay, added, neat.

23
00:02:14.070 --> 00:02:18.160
It hasn't, right, cuz I turned off Wi-fi,
that's not a thing.

24
00:02:18.160 --> 00:02:22.011
Let's actually turn it back on, cuz it
takes a second, and we'll reconnect.

25
00:02:24.864 --> 00:02:27.296
&gt;&gt; Steve Kinney: I can go ahead and
refresh the page, or

26
00:02:27.296 --> 00:02:31.943
if you don't believe me to see it's not
on the DOM, I can open up a new page

27
00:02:38.647 --> 00:02:40.540
&gt;&gt; Steve Kinney: And there it is, right?

28
00:02:40.540 --> 00:02:42.970
We had a sync event that happened.

29
00:02:42.970 --> 00:02:45.820
As soon as the browser reconnected,
it sent my sync event,

30
00:02:45.820 --> 00:02:48.390
we have it on the server, right?

31
00:02:48.390 --> 00:02:50.163
Let's go take a look at
what this code looks like.

32
00:02:52.843 --> 00:02:54.748
&gt;&gt; Steve Kinney: So
here's our service worker.

33
00:02:55.929 --> 00:02:59.710
&gt;&gt; Steve Kinney: Let's get all
the screen real estate we deserve here.

34
00:03:02.862 --> 00:03:06.194
&gt;&gt; Steve Kinney: And we cache the assets,
as we have come to expect,

35
00:03:06.194 --> 00:03:08.410
we cache the stylesheet.

36
00:03:08.410 --> 00:03:11.990
We have just an instance
of IndexedDB here, and

37
00:03:11.990 --> 00:03:15.260
some database abstractions of putting
stuff in the database and taking it back

38
00:03:15.260 --> 00:03:19.280
out again, right, that is all prior
art that we have seen earlier today.

39
00:03:20.320 --> 00:03:23.280
We will clear out previous
caches when that's happened.

40
00:03:24.390 --> 00:03:27.660
When we fetch,
we will see if we can get it from network.

41
00:03:27.660 --> 00:03:29.270
If not, we'll pull it from the cache.

42
00:03:31.470 --> 00:03:32.580
And if this looks like a lot,

43
00:03:32.580 --> 00:03:35.740
keep in mind that there are a lot
of console logs in here.

44
00:03:35.740 --> 00:03:38.030
When a sync event happens,
we'll go ahead and

45
00:03:38.030 --> 00:03:41.222
we'll get all of the dreams
from Indexed.DB, right?

46
00:03:41.222 --> 00:03:46.910
We're gonna filter out the ones that have
an unsynced = true property on them.

47
00:03:48.090 --> 00:03:50.680
And we'll use promise.all, and

48
00:03:50.680 --> 00:03:54.140
in this case it's a very simple server,
we'll send a bunch of POST requests

49
00:03:54.140 --> 00:03:57.360
which each one of those dreams that
have been unsynced to the server.

50
00:03:58.720 --> 00:04:04.690
If that is successful, we will update them
in the database as they are now synced.

51
00:04:04.690 --> 00:04:08.610
Whenever we do have network connection,
we are getting this source of truth again.

52
00:04:08.610 --> 00:04:11.000
If we do have a network connection and
we can hit that,

53
00:04:11.000 --> 00:04:15.610
we're gonna pull them all in, so
this will be everything from the server.

54
00:04:15.610 --> 00:04:20.280
A more robust mechanism,
we might go ahead and try to dif

55
00:04:20.280 --> 00:04:23.410
between ones that are there and ones from
the server, this is a very simple one.

56
00:04:23.410 --> 00:04:25.950
We'll take the server for
granted if we have it, but

57
00:04:25.950 --> 00:04:29.600
as soon as we connect we'll send
everything we have off to it.

58
00:04:29.600 --> 00:04:33.672
Looking at the client,
&gt;&gt; Steve Kinney: What I really want you to

59
00:04:33.672 --> 00:04:38.020
take away here is this is the original
implementation that was online only.

60
00:04:38.020 --> 00:04:42.570
They would click the button,
we would send a post request, and

61
00:04:42.570 --> 00:04:43.850
everything would work out great.

62
00:04:43.850 --> 00:04:45.260
This didn't work online.

63
00:04:45.260 --> 00:04:48.320
If we were offline it would just go and
everything would end.

64
00:04:49.630 --> 00:04:56.160
But in this case we're actually not
even initially sending a fetch request.

65
00:04:56.160 --> 00:04:57.170
What we're going to do

66
00:04:57.170 --> 00:04:59.190
is we're immediately going
to schedule a sync event.

67
00:05:00.320 --> 00:05:04.110
All right, we'll say if there's
a service worker, we'll go ahead and

68
00:05:04.110 --> 00:05:05.744
we'll pull out everything we need.

69
00:05:05.744 --> 00:05:07.445
We're gonna add it to
the page immediately,

70
00:05:07.445 --> 00:05:10.560
cuz the single event hasn't
really occurred yet.

71
00:05:10.560 --> 00:05:13.670
We're gonna optimistically assume
that everything went well and

72
00:05:13.670 --> 00:05:15.070
is displayed in the user interface.

73
00:05:15.070 --> 00:05:17.050
In the same way that if
I'm in a Twitter app and

74
00:05:17.050 --> 00:05:21.220
I hit the like button, it's like yeah,
you did it, you did the thing.

75
00:05:21.220 --> 00:05:24.630
Mark hasn't found out that
I liked his tweet yet, but

76
00:05:24.630 --> 00:05:27.550
as far as I'm concerned in my
interaction with the application,

77
00:05:27.550 --> 00:05:30.780
I have done my deed and
it has promised me that it will do it.

78
00:05:30.780 --> 00:05:34.020
And this is useful for
things that aren't detrimental.

79
00:05:34.020 --> 00:05:38.690
If my like to Mark's tweet doesn't go
through, I mean, he might be a little sad,

80
00:05:38.690 --> 00:05:41.590
he might be like that
was a pretty dank name.

81
00:05:41.590 --> 00:05:46.870
And I hope that he thought that I enjoyed
it, but it's not the end of the world.

82
00:05:46.870 --> 00:05:51.720
Instead we're scheduling a sync, we're
immediately gonna put it on the page, and

83
00:05:51.720 --> 00:05:54.060
then we'll handle everything
through this sync event.

84
00:05:54.060 --> 00:05:56.890
We'll just go through the database, we'll
filter out all the ones that haven't been

85
00:05:56.890 --> 00:06:00.420
synced as soon as we reconnect,
and we'll send them out, right?

86
00:06:00.420 --> 00:06:03.393
How you do this in your application
is gonna change, right?

87
00:06:03.393 --> 00:06:06.134
It depends on what you're
trying to implement, right?

88
00:06:06.134 --> 00:06:10.418
This is just a very simple
illustration of how this works and

89
00:06:10.418 --> 00:06:14.170
that the API is actually approachable,
right?

90
00:06:14.170 --> 00:06:18.650
If I told you hey, implement background
sync and you had not seen this info,

91
00:06:18.650 --> 00:06:21.380
you'd be like that is difficult,
I have no intention of doing it,

92
00:06:21.380 --> 00:06:23.550
I will use Firebase, thank you very much.

93
00:06:23.550 --> 00:06:26.200
Totally do it, there's a great
Frontend Master's course on it.

94
00:06:26.200 --> 00:06:29.887
But if you wanna do it from the service
worker and you have your own server, all

95
00:06:29.887 --> 00:06:34.260
these APIs are very approachable once you
understand that there are common patterns.

96
00:06:34.260 --> 00:06:38.210
Right, hopefully it almost seems
repetitive when we show you some of the,

97
00:06:38.210 --> 00:06:39.930
there is this event, you break stuff out.

98
00:06:39.930 --> 00:06:42.732
There are these common patterns
that once you've kind of grasped,

99
00:06:42.732 --> 00:06:44.610
how do you do is when
your application changes?

