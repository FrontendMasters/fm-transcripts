WEBVTT

1
00:00:00.270 --> 00:00:01.183
&gt;&gt; Steve Kinney: Hello everyone.

2
00:00:01.183 --> 00:00:02.060
My name is Steve.

3
00:00:02.060 --> 00:00:04.683
I'm a senior front end
engineer at SendGrid.

4
00:00:04.683 --> 00:00:06.318
We'll talk a little bit about Promises.

5
00:00:06.318 --> 00:00:13.060
Disclaimer, Promises are not specifically
a progressive Web App technology.

6
00:00:13.060 --> 00:00:18.880
However, they are littered
throughout progressive Web Apps.

7
00:00:18.880 --> 00:00:21.800
A lot of the other technologies that
we're gonna be using throughout

8
00:00:21.800 --> 00:00:26.270
the rest of this workshop
will use Promise-based APIs.

9
00:00:26.270 --> 00:00:29.220
So it makes sense to spend a little bit of
time just getting us all kinda caught up

10
00:00:29.220 --> 00:00:34.110
to speed on what exactly a Promise is,
and how they work, how to make them,

11
00:00:34.110 --> 00:00:38.090
how to receive them, how to use them,
all sorts of fun stuff like that.

12
00:00:38.090 --> 00:00:38.960
So here's the high level.

13
00:00:40.240 --> 00:00:43.460
Promises can be thought
of as an eventual value.

14
00:00:43.460 --> 00:00:46.031
You can almost think of it at
a very high level as an IOU.

15
00:00:46.031 --> 00:00:48.094
Like, I don't have your money yet,

16
00:00:48.094 --> 00:00:52.170
here is this piece of paper that signifies
one day I may or may not pay you.

17
00:00:52.170 --> 00:00:55.330
They are an abstraction around dealing
with asynchronous programming, right?

18
00:00:55.330 --> 00:00:57.270
If you think about it on a network level,
okay,

19
00:00:57.270 --> 00:00:59.390
get me that thing from the server, great.

20
00:01:00.970 --> 00:01:02.650
That's not instantaneous,
we don't have it yet.

21
00:01:02.650 --> 00:01:04.050
We have to send out a network request.

22
00:01:04.050 --> 00:01:08.154
There's even like the speed of light
is a limiting factor at that point.

23
00:01:08.154 --> 00:01:10.554
But we wanna know when we do
hear back from the network,

24
00:01:10.554 --> 00:01:14.320
we wanna know what that value's going
to be, so we can begin to work with it.

25
00:01:14.320 --> 00:01:18.460
A Promise could come back
from the network with stuff.

26
00:01:18.460 --> 00:01:20.960
It could also not, right?

27
00:01:20.960 --> 00:01:22.840
The network request never makes it there.

28
00:01:22.840 --> 00:01:26.540
The server says thanks but no thanks,
or you asked for the wrong thing.

29
00:01:26.540 --> 00:01:30.286
Right, there's two eventual
values that we can get to,

30
00:01:30.286 --> 00:01:34.434
we'll talk in a second, but
high level, good and not so good.

31
00:01:34.434 --> 00:01:35.570
You might have already used them.

32
00:01:35.570 --> 00:01:38.130
There are a lot of Promise
based APIs in the wild.

33
00:01:38.130 --> 00:01:40.524
This pattern has been around for decades.

34
00:01:40.524 --> 00:01:44.860
It's just getting a lot more popularity
now in the client side web ecosystem.

35
00:01:44.860 --> 00:01:49.030
If you've ever used the $.getJSON,
right, you can give that a callback.

36
00:01:49.030 --> 00:01:52.710
You can give it an object with
a bunch of options in it.

37
00:01:52.710 --> 00:01:57.310
But if you just assign that to a variable,
it effectively returns a jQuery.Deferred,

38
00:01:57.310 --> 00:01:59.780
which, for our purposes,
is like a Promise.

39
00:01:59.780 --> 00:02:02.430
Yeah?
&gt;&gt; Speaker 2: Are you calling callbacks

40
00:02:02.430 --> 00:02:04.078
and Promises basically the same thing?

41
00:02:04.078 --> 00:02:07.510
&gt;&gt; Steve Kinney: No, so callback,
you pass in a function.

42
00:02:07.510 --> 00:02:10.420
You're saying hey,
I'm going to ask you to go do this thing.

43
00:02:10.420 --> 00:02:13.832
When you're done, take this
function with you, call it, right?

44
00:02:13.832 --> 00:02:17.385
When we get it from a Promise we're
saying, hey, do that thing, give me

45
00:02:17.385 --> 00:02:21.620
something to hold onto while you go ahead
and do it, and eventually, we'll be that.

46
00:02:21.620 --> 00:02:25.410
So it's kind of the control is in
the opposite of directions, right?

47
00:02:25.410 --> 00:02:26.990
We're giving away our function,

48
00:02:26.990 --> 00:02:32.260
versus we're receiving a value
that has not come to be just yet.

49
00:02:33.510 --> 00:02:37.760
Cool and for our purposes, taking control
on our side where we can do things works

50
00:02:37.760 --> 00:02:41.508
out a lot better than callbacks,
which you can only have called once and

51
00:02:41.508 --> 00:02:42.904
stuff along those lines.

52
00:02:42.904 --> 00:02:45.914
And we'll kinda see as we
get into the examples.

53
00:02:45.914 --> 00:02:47.710
All right, here is a mental model.

54
00:02:47.710 --> 00:02:50.867
You have what we'll call
Schrodinger's mailbox.

55
00:02:50.867 --> 00:02:53.480
Inside of Schrodinger's mailbox,

56
00:02:53.480 --> 00:02:58.970
you either have that check you've been
waiting for, or an explosion emoji.

57
00:02:58.970 --> 00:03:03.910
So there's a firecracker in there, or
there's some bills I guess, either way,

58
00:03:03.910 --> 00:03:04.780
it's great.

59
00:03:05.860 --> 00:03:08.430
When we first make the network request,
we don't know.

60
00:03:08.430 --> 00:03:14.050
We don't know whether or not we're gonna
hear back from the network or not, right?

61
00:03:14.050 --> 00:03:15.720
We say that's in its pending state.

62
00:03:15.720 --> 00:03:17.990
The electrons are going
through the copper wire,

63
00:03:17.990 --> 00:03:20.210
they're headed towards
the server to find out.

64
00:03:20.210 --> 00:03:23.880
They're coming from, what was it, Dulles,
Virginia, that web page test starts?

65
00:03:23.880 --> 00:03:25.861
They're on their way to Minneapolis.

66
00:03:25.861 --> 00:03:28.750
They haven't made it there yet, we don't
know what the end result is gonna be.

67
00:03:28.750 --> 00:03:30.910
That's when the Promise
is in its pending state.

68
00:03:32.350 --> 00:03:35.180
If we hear back,
we know that the Promise has resolved.

69
00:03:35.180 --> 00:03:37.630
Here is the data that you
requested from the server.

70
00:03:37.630 --> 00:03:41.810
If something blows up along the way,
the Promise is said to be rejected.

71
00:03:41.810 --> 00:03:45.524
Once it moves into either the resolved or
the rejected state, that's it.

72
00:03:45.524 --> 00:03:48.716
The Promise is done,
you've gotten your value or

73
00:03:48.716 --> 00:03:51.689
your explosion in your mailbox,
either way.

74
00:03:51.689 --> 00:03:54.470
But we have reached a conclusion,
we now know what is in the mailbox.

75
00:03:54.470 --> 00:03:58.851
There's no closing the lid back on the
mailbox and starting over again, right?

76
00:03:58.851 --> 00:04:01.860
So a Promise is pending, and then it
reaches one of these two states and

77
00:04:01.860 --> 00:04:02.940
that's where it stays.

78
00:04:04.440 --> 00:04:07.890
So the basic use, right,
if we look at that top line there,

79
00:04:07.890 --> 00:04:11.130
we can say that we getJSON,
we assign it to a variable.

80
00:04:11.130 --> 00:04:14.052
Again, if you're using callbacks, you
would give a function as another argument,

81
00:04:14.052 --> 00:04:15.199
you'd give your function away.

82
00:04:15.199 --> 00:04:20.520
Here, we're saying give
me the eventual value.

83
00:04:20.520 --> 00:04:22.470
With that, we can say,
go to the network, and

84
00:04:22.470 --> 00:04:25.320
it's almost like thinking
about it in English, right?

85
00:04:25.320 --> 00:04:28.030
Hey, make this network request,
then, right, and

86
00:04:28.030 --> 00:04:30.580
the then method will be
when the promise resolves.

87
00:04:30.580 --> 00:04:33.490
If everything works out great,
then do this, right?

88
00:04:33.490 --> 00:04:37.200
So when our eventual value is no
longer eventual and it's just a value,

89
00:04:37.200 --> 00:04:44.350
we're able to pass it into the callback,
effectively, in the then method.

90
00:04:44.350 --> 00:04:48.885
If things go wrong, we catch that error
and we can either do something with it or

91
00:04:48.885 --> 00:04:51.015
show the appropriate UI, like hey,

92
00:04:51.015 --> 00:04:55.990
that network request you made didn't work
out so great, here's the error message.

93
00:04:55.990 --> 00:04:59.398
Versus, we did hear back from the network,
great,

94
00:04:59.398 --> 00:05:02.949
here's the data that you asked for
and we put it on the page.

95
00:05:04.662 --> 00:05:07.557
&gt;&gt; Steve Kinney: Finally, is in the spec,
but it's not actually shipped yet,

96
00:05:07.557 --> 00:05:10.710
there's a lot of things you
might wanna do either way.

97
00:05:10.710 --> 00:05:14.240
Mike talked before about putting up
a loader, that's a great UI pattern.

98
00:05:14.240 --> 00:05:18.120
For some reason, users really enjoy seeing
an indeterminate spinner that doesn't mean

99
00:05:18.120 --> 00:05:20.370
anything, versus nothing, right?

100
00:05:20.370 --> 00:05:23.360
Or a progress bar that just keeps going,

101
00:05:23.360 --> 00:05:25.570
that has the stripes that
just keep moving along.

102
00:05:25.570 --> 00:05:27.010
It's not actually moving towards anything.

103
00:05:27.010 --> 00:05:28.883
Users love that.

104
00:05:28.883 --> 00:05:32.733
And so whether the request comes back
successfully or whether it fails,

105
00:05:32.733 --> 00:05:35.395
you probably want to get
rid of that progress bar.

106
00:05:35.395 --> 00:05:40.196
This is a stage three in the proposal
process which means it is likely to be

107
00:05:40.196 --> 00:05:42.569
implemented but hasn't just yet.

108
00:05:42.569 --> 00:05:49.020
But this is just one other thing
to kind of be on the lookout for.

109
00:05:49.020 --> 00:05:53.360
Either way, you can see that this has

110
00:05:53.360 --> 00:05:56.830
happened when the promise has
been just effectively settled.

111
00:05:56.830 --> 00:06:01.309
Interesting thing about Promises
is that they can be chained.

112
00:06:01.309 --> 00:06:04.428
So you can say .then(),
you get the value from the Promise, and

113
00:06:04.428 --> 00:06:08.060
with this case,
we're imagining it's a network request.

114
00:06:08.060 --> 00:06:10.490
So you'll get the data you
got back from the network,

115
00:06:10.490 --> 00:06:12.380
it will be the value in there.

116
00:06:12.380 --> 00:06:16.730
You can do some stuff, right,
that's a very technical term.

117
00:06:16.730 --> 00:06:18.305
You do stuff, right, and

118
00:06:18.305 --> 00:06:22.042
then you can theoretically
pass that to another .then().

119
00:06:22.042 --> 00:06:26.690
If you have a Promise again at the end
that goes into the next .then().

120
00:06:26.690 --> 00:06:31.147
But if you use a regular value, like
a number or a string or a JSON object or

121
00:06:31.147 --> 00:06:34.801
a boolean that would effectively
be wrapped in a Promise and

122
00:06:34.801 --> 00:06:38.179
passed to the next one and
this seems like okay, neat.

123
00:06:38.179 --> 00:06:42.048
But it allows you to keep chaining
.then() .then() .then() without worrying

124
00:06:42.048 --> 00:06:43.590
about like did I return a Promise?

125
00:06:43.590 --> 00:06:45.537
Did I actually return
some other kind of value?

126
00:06:45.537 --> 00:06:48.210
They'll effectively be wrapped
in the Promise that for

127
00:06:48.210 --> 00:06:50.382
our purposes immediately resolves.

128
00:06:50.382 --> 00:06:53.430
Like we don't have to wonder if a 2 is
going to end in some kind of error.

129
00:06:53.430 --> 00:06:56.980
We're gonna know it's gonna be a 2.

130
00:06:56.980 --> 00:06:59.230
So this is kind of what
it'll look like in practice.

131
00:06:59.230 --> 00:07:03.360
We saw that $.getJSON from some endpoint.

132
00:07:03.360 --> 00:07:06.914
This could be like your thought leadership
blog that you've been working on.

133
00:07:06.914 --> 00:07:10.340
Or you're gonna shift some paradigms,
make some tastes.

134
00:07:10.340 --> 00:07:11.890
We can request from that endpoint,

135
00:07:11.890 --> 00:07:14.410
and we're gonna get back, we haven't
heard back from the network yet.

136
00:07:14.410 --> 00:07:15.860
Cool, so we hold onto it.

137
00:07:15.860 --> 00:07:19.300
When we get it,
we can start by console logging it,

138
00:07:19.300 --> 00:07:22.810
or you could also take that same
Promise cuz it's already resolved.

139
00:07:22.810 --> 00:07:26.800
Both of these will fire effectively at
the same time, technically not at the same

140
00:07:26.800 --> 00:07:29.440
time, but effectively for
our purposes at the same time.

141
00:07:29.440 --> 00:07:31.080
You can do multiple things with that data.

142
00:07:31.080 --> 00:07:33.410
With a callback,
you would have given away that function.

143
00:07:33.410 --> 00:07:35.990
You would had to do everything in that one
function cuz it would have been called

144
00:07:37.130 --> 00:07:38.430
when the network request came back.

145
00:07:38.430 --> 00:07:42.160
So Promises are cool, because you can
take that value and do multiple things.

146
00:07:42.160 --> 00:07:45.020
That value is under your control,
rather than you giving away the function.

