WEBVTT

1
00:00:00.110 --> 00:00:02.530
&gt;&gt; Steve Kinney: So
I mentioned promise chaining before.

2
00:00:02.530 --> 00:00:04.820
So let's talk a little
bit more about that.

3
00:00:04.820 --> 00:00:08.926
Whenever we call then, we can do whatever
we want that function as long as it

4
00:00:08.926 --> 00:00:12.719
returns a value, it will then be
passed to the next part of the chain.

5
00:00:12.719 --> 00:00:17.537
So we can see that second
example we receive a number and

6
00:00:17.537 --> 00:00:19.959
then we return num + 10.

7
00:00:19.959 --> 00:00:22.449
Then we process the next
part of the chain.

8
00:00:22.449 --> 00:00:27.389
It's gonna be whatever that original
number was, so 31 + 10, 41, right?

9
00:00:27.389 --> 00:00:31.999
We're going to then return a promise,
it's the same thing.

10
00:00:31.999 --> 00:00:36.070
Fun fact, because no matter what, I don't
care how many years you've been doing

11
00:00:36.070 --> 00:00:40.082
this, at one point, somewhere in then
chain you will put a console log in there,

12
00:00:40.082 --> 00:00:42.560
forgetting the console
log returns undefined and

13
00:00:42.560 --> 00:00:44.569
then you'll wonder why nothing works.

14
00:00:44.569 --> 00:00:47.470
And then we can just remember this
moment that we spent together, yep.

15
00:00:47.470 --> 00:00:52.240
I see some smiling, some nodding
like if it hasn't happen to you,

16
00:00:52.240 --> 00:00:57.451
it is a coming of age moment where you
know that you are within your craft.

17
00:00:57.451 --> 00:01:01.360
There you have great company cuz
it's happen to all of us, cool.

18
00:01:01.360 --> 00:01:03.962
When in doubt,
you can continue to kind of like,

19
00:01:03.962 --> 00:01:07.590
you could use the .then within
another one without chaining them.

20
00:01:07.590 --> 00:01:11.874
But this gives us the same effectively
like called call back hell or

21
00:01:11.874 --> 00:01:16.019
the pyramid of doom,
where your code starts eking to the right.

22
00:01:16.019 --> 00:01:17.694
This gets hard to deal with logically,

23
00:01:17.694 --> 00:01:21.010
when in doubt when we can stick to
a straight chain, that's what we wanna do.

24
00:01:21.010 --> 00:01:25.426
Because it is easier for us to reason
with, easier for us to troubleshoot,

25
00:01:25.426 --> 00:01:30.070
easier for us to catch errors, and
generally makes us happier people inside.

26
00:01:30.070 --> 00:01:32.858
Cool, so there's that 141 that came out.

27
00:01:32.858 --> 00:01:36.353
Well, Jake, because we're gonna be
chaining so many promises today,

28
00:01:36.353 --> 00:01:39.732
I do want to belabor this point for
a little bit, just so we can fully and

29
00:01:39.732 --> 00:01:41.940
completely understand what's happening.

30
00:01:41.940 --> 00:01:45.789
Promise.resolve It's kind of a helper,
in this case.

31
00:01:45.789 --> 00:01:49.751
Promise.resolve will take 2, and it will
effectively return a promise that is

32
00:01:49.751 --> 00:01:52.560
immediately resolved with,
anyone wanna take a guess?

33
00:01:52.560 --> 00:01:54.210
&gt;&gt; Speaker 2: 2?
&gt;&gt; Steve Kinney: 2, right, so

34
00:01:54.210 --> 00:02:00.149
if we said then, and console.logged it,
we would get that n as 2, right?

35
00:02:00.149 --> 00:02:01.839
So no surprises here.

36
00:02:01.839 --> 00:02:06.760
And just as we showed in the last slide,
we could return n + 1, we'll get 3.

37
00:02:06.760 --> 00:02:09.139
We can multiply that by 2, and get 6.

38
00:02:09.139 --> 00:02:12.990
And each time it goes through the chain,
we're getting the last result out.

39
00:02:12.990 --> 00:02:16.329
All right, we can console.log it again,
and now it's 36,

40
00:02:16.329 --> 00:02:18.030
cuz we went to the second power.

41
00:02:18.030 --> 00:02:23.020
But if we took that original promise, that
promise to resolve 2 again, we stored it?

42
00:02:23.020 --> 00:02:28.239
We stored it in the state it is when we
put it in that variable, so it's 2, right?

43
00:02:28.239 --> 00:02:32.040
So we started over, still 2.

44
00:02:32.040 --> 00:02:35.969
So it gives us a chance
to effectively work with

45
00:02:35.969 --> 00:02:39.209
asynchronous values on our own turf.

46
00:02:39.209 --> 00:02:41.579
And a little bit more as if
they were synchronous code.

47
00:02:41.579 --> 00:02:45.250
And there are great features coming
to a language that take promises and

48
00:02:45.250 --> 00:02:49.472
generators and try to do some hand waving
and hide the asynchronous parts away from

49
00:02:49.472 --> 00:02:52.285
you, so it looks a lot more
like synchronous code, and

50
00:02:52.285 --> 00:02:54.520
it's basically built on top of promises.

51
00:02:54.520 --> 00:03:00.115
99% of the time,
how do you know you have a promise?

52
00:03:00.115 --> 00:03:02.550
Because someone handed you a promise,
right?

53
00:03:02.550 --> 00:03:05.190
99% of the times you are a recipient
of somebody else's promise.

54
00:03:05.190 --> 00:03:07.760
You are recieving the promise,
you are not making them.

55
00:03:07.760 --> 00:03:11.149
But there are cases where you
might want to make a promise.

56
00:03:11.149 --> 00:03:15.709
A really great example,
you're dealing with some kind of API, and

57
00:03:15.709 --> 00:03:17.549
that API takes a callback.

58
00:03:17.549 --> 00:03:19.470
But the rest of your applications, right?

59
00:03:19.470 --> 00:03:23.760
Whether it'd be using the modern web
technologies and progressive web apps,

60
00:03:23.760 --> 00:03:26.497
your framework of choice
is expecting promises.

61
00:03:26.497 --> 00:03:32.371
So you might have to do the labor
in taking a callback and

62
00:03:32.371 --> 00:03:35.190
wrapping it in a promise.

63
00:03:35.190 --> 00:03:39.367
When you do that luckily you
are helped out by the browser which

64
00:03:39.367 --> 00:03:41.548
has made a promise instructor.

65
00:03:41.548 --> 00:03:43.350
So you wanna make a new promise?

66
00:03:43.350 --> 00:03:47.550
Good, let me introduce you to new promise.

67
00:03:47.550 --> 00:03:51.900
New promise takes a function,
which is okay, how does this promise work?

68
00:03:51.900 --> 00:03:55.251
What are the mechanics of this promise?

69
00:03:55.251 --> 00:03:59.182
What does it mean to be resolved or
rejected, right?

70
00:03:59.182 --> 00:04:04.849
By definition, we looked at that $ajax1 or
getJSON, what did it mean in that case?

71
00:04:04.849 --> 00:04:07.270
Well, did you get back
at 200 in some data?

72
00:04:07.270 --> 00:04:08.649
Then things went well.

73
00:04:08.649 --> 00:04:12.506
Did you either, network request timed
out or you received a 400 or 500 of it,

74
00:04:12.506 --> 00:04:15.608
things went poorly, that's what
it meant to resolve a rejected.

75
00:04:15.608 --> 00:04:18.939
But depending on what you're working with,
those could mean different things.

76
00:04:18.939 --> 00:04:22.669
If you're wrapping a node API,
it could be writing to the file system.

77
00:04:22.669 --> 00:04:23.604
Did you catch an error?

78
00:04:23.604 --> 00:04:25.562
Okay, then something didn't work out.

79
00:04:25.562 --> 00:04:29.059
It's gonna be very
customized to your use case.

80
00:04:29.059 --> 00:04:31.313
So when you pass that function,

81
00:04:31.313 --> 00:04:36.751
the promise constructor gives you
a resolve callback and a reject callback.

82
00:04:36.751 --> 00:04:40.132
You inside of this function deal with all
of the inner workings of what it means to

83
00:04:40.132 --> 00:04:41.250
be resolved or rejected.

84
00:04:41.250 --> 00:04:43.086
And when you figure that out,

85
00:04:43.086 --> 00:04:48.160
you simply pass the value that you would
like to go into the .then, into resolve.

86
00:04:48.160 --> 00:04:52.152
Or if things went wrong, you pass the
thing that went wrong into the reject, and

87
00:04:52.152 --> 00:04:55.204
you'll be able to catch that error and
deal with it, right?

88
00:04:55.204 --> 00:04:57.240
Well, actually be able to do
a little bit of this today.

89
00:04:57.240 --> 00:04:57.800
But again,

90
00:04:57.800 --> 00:05:01.160
I want you to catch this with this
syntax looks a little squarely to you.

91
00:05:01.160 --> 00:05:02.941
One, will get to practice it.

92
00:05:02.941 --> 00:05:06.550
Two, 99% of the time you will be
on the receiving end of promises.

93
00:05:06.550 --> 00:05:09.640
Somebody else will have done this.

94
00:05:09.640 --> 00:05:12.500
All right, need so we've passed
some numbers to some promises.

95
00:05:12.500 --> 00:05:15.052
That's really great.

96
00:05:15.052 --> 00:05:18.639
What is this actually look like
in practice and an application?

97
00:05:18.639 --> 00:05:21.440
All right, so
here's our thought leadership blog again.

98
00:05:21.440 --> 00:05:24.629
You just showed me this slide,
I'm building to something here.

99
00:05:24.629 --> 00:05:27.431
We could have a function
that renders a post, right?

100
00:05:27.431 --> 00:05:32.072
It take some object that's got a title and
it's got a body and

101
00:05:32.072 --> 00:05:37.270
we want to wrap it in the dom like
ceremony so we can put it on the page.

102
00:05:37.270 --> 00:05:41.610
If we were working with promises we could
say that might shorten my render post

103
00:05:41.610 --> 00:05:45.030
method up there,
cuz I got some big fonts right now, today.

104
00:05:45.030 --> 00:05:46.691
What we say is, hey, request.

105
00:05:46.691 --> 00:05:52.148
When you receive all the posts, use a map
to like take the array of posts and

106
00:05:52.148 --> 00:05:56.392
turn them all into the dom, so
we can put them on the page.

107
00:05:56.392 --> 00:05:59.835
And next you could then take those
rendered post, and do the next thing,

108
00:05:59.835 --> 00:06:02.433
append them to this part,
append them to the side bar,

109
00:06:02.433 --> 00:06:04.370
append them to the main body of the page.

110
00:06:04.370 --> 00:06:07.780
You can kind of slowly build
up the chain of actions.

111
00:06:07.780 --> 00:06:10.582
And if you name these
functions really well,

112
00:06:10.582 --> 00:06:15.830
you can have something like request post,
then render post, then add post to page.

113
00:06:15.830 --> 00:06:19.779
And the best thing you wanna do, the most
important programmer in the world,

114
00:06:19.779 --> 00:06:21.190
is you six months from now.

115
00:06:21.190 --> 00:06:24.276
When you go to getlame,
who wrote that terrible piece code, and

116
00:06:24.276 --> 00:06:27.531
you have to stare at yourself in
the mirror, and realize it was you,

117
00:06:27.531 --> 00:06:29.780
that had all that context
loaded in your head.

118
00:06:29.780 --> 00:06:34.310
And now six months later, you don't, and
you get blaming yourself for things.

119
00:06:34.310 --> 00:06:39.106
So it's really like a great API for
writing our code in a way that kind of

120
00:06:39.106 --> 00:06:44.659
reads like a resume request posts, then
render them, then add them to the page.

121
00:06:44.659 --> 00:06:46.934
Again, we briefly mentioned catch, but

122
00:06:46.934 --> 00:06:49.669
we haven't really seen it in action yet,
right?

123
00:06:49.669 --> 00:06:52.828
In this world,
we had a perfect network no matter what,

124
00:06:52.828 --> 00:06:55.060
we're going to get posts back from it.

125
00:06:55.060 --> 00:06:58.919
If only, I mean, if that would happen all
the time, I probably wouldn't have a job.

126
00:06:58.919 --> 00:07:02.730
The web is hard, hence,
we are all employable.

127
00:07:02.730 --> 00:07:06.618
All right, so here we say we'll
take our Promise.resolve(2),

128
00:07:06.618 --> 00:07:09.509
we'll add one to it and
then let's throw an error.

129
00:07:09.509 --> 00:07:11.129
No reason, right?

130
00:07:11.129 --> 00:07:14.493
It's Thursday,
we throw errors on Thursdays.

131
00:07:14.493 --> 00:07:19.140
And then we'll have the .then console log.

132
00:07:19.140 --> 00:07:22.908
In my day,
after walking uphill to school both ways,

133
00:07:22.908 --> 00:07:27.450
if you did not catch a error in a promise,
it just fell silently.

134
00:07:28.550 --> 00:07:31.156
And you would lose the better
part of your morning,

135
00:07:31.156 --> 00:07:33.469
trying to figure out
why is nothing working.

136
00:07:33.469 --> 00:07:37.145
Recent versions of Chrome, Firefox,
and Node, if a error is thrown at

137
00:07:37.145 --> 00:07:41.030
a Promise and you don't do anything
about it, it will at least yell at you.

138
00:07:41.030 --> 00:07:42.218
Your code won't break, so

139
00:07:42.218 --> 00:07:45.120
if you don't check the console
it's still blissful everywhere.

140
00:07:45.120 --> 00:07:48.720
But previous to that, if you did not catch
a promise it just went into the ether.

141
00:07:48.720 --> 00:07:52.120
Which is where I like most of my problems
to go, except when I have a deadline.

142
00:07:53.790 --> 00:07:55.930
So in this case we can catch the error.

143
00:07:55.930 --> 00:08:02.009
And you'll notice that my catch is on
line 5 but the error happens on line 3.

144
00:08:02.009 --> 00:08:04.981
As long as you have a catch
somewhere in that chain, right?

145
00:08:04.981 --> 00:08:09.980
You'll catch everything that goes
wrong before that point in that chain.

146
00:08:09.980 --> 00:08:13.200
Line 4 will never get called
because things went poorly.

147
00:08:13.200 --> 00:08:15.450
We'll kind of skip to line 5, right?

148
00:08:15.450 --> 00:08:21.000
Bad things happened to line 3,
do not pass go, do not collect $200.

149
00:08:21.000 --> 00:08:25.160
Skip line four, let's deal with that
error, and then get back to work.

150
00:08:25.160 --> 00:08:28.564
In this case,
we got a little too excited and

151
00:08:28.564 --> 00:08:32.710
we tried to catch that error
before it even happened.

152
00:08:32.710 --> 00:08:35.731
We're back to the situation where
the error would have gone uncaught.

153
00:08:38.880 --> 00:08:41.872
&gt;&gt; Steve Kinney: All right, there is
a situation though where you do wanna

154
00:08:41.872 --> 00:08:45.439
put a catch in the middle,
it's not always always put it at the end.

155
00:08:45.439 --> 00:08:48.874
It is most of the time put it at
the end because again you're usually on

156
00:08:48.874 --> 00:08:49.890
the receiving end.

157
00:08:49.890 --> 00:08:53.180
You just wanna know, hey,
I need to display some UI to the user.

158
00:08:53.180 --> 00:08:55.219
Things went poorly, I'm gonna try again.

159
00:08:55.219 --> 00:08:56.970
Do you wanna try again?

160
00:08:56.970 --> 00:08:58.900
Depending on the nature
of your application.

161
00:08:58.900 --> 00:09:01.690
But here's a little bit
of an extra example.

162
00:09:01.690 --> 00:09:06.890
Here in the first .then we're gonna
throw in an error we're gonna catch it,

163
00:09:06.890 --> 00:09:09.850
we'll consult error it, because why not?

164
00:09:09.850 --> 00:09:13.931
Let's just put it where only a developer
can see it, the user doesn't need to know.

165
00:09:13.931 --> 00:09:15.781
But then we can return and

166
00:09:15.781 --> 00:09:21.249
when we return in a catch that gets
wrapped into a promise that immediately

167
00:09:21.249 --> 00:09:26.379
resolves which is happy land which
means you can chain a .then to it.

168
00:09:26.379 --> 00:09:31.239
So it means in this case, we can have
an error, catch it, deal with it,

169
00:09:31.239 --> 00:09:33.440
and get the chain moving again.

170
00:09:33.440 --> 00:09:35.799
So this is effectively what
it would look like, right?

171
00:09:35.799 --> 00:09:39.776
We execute it, we did see the console
error, but then we did execute the next

172
00:09:39.776 --> 00:09:43.400
line, where we took that error and
we started with it again, right?

173
00:09:43.400 --> 00:09:46.670
Cuz there are some cases you're like,
listen, I know this went wrong.

174
00:09:46.670 --> 00:09:51.169
I have a backup plan,
execute the backup plan.

175
00:09:51.169 --> 00:09:53.380
A hint, we're gonna build offline apps.

176
00:09:53.380 --> 00:09:55.240
Sometimes you wanna go to the network.

177
00:09:55.240 --> 00:09:57.089
Sometimes the network is not there.

178
00:09:57.089 --> 00:09:59.020
Sometimes you have a backup plan,

179
00:09:59.020 --> 00:10:02.293
just to like foreshadow things
that are happening today.

180
00:10:02.293 --> 00:10:05.753
And with that, we're gonna take a minute
and turn it back over to Mike and

181
00:10:05.753 --> 00:10:08.308
he's gonna talk a little bit
about using promises and

182
00:10:08.308 --> 00:10:09.980
action with JavaScript workers.

