WEBVTT

1
00:00:00.000 --> 00:00:02.983
&gt;&gt; Mike North: The idea of server-side
rendering is you are not going to

2
00:00:02.983 --> 00:00:06.538
have static-hosting,
you're going to have a rendering server.

3
00:00:06.538 --> 00:00:11.836
And you're going to hit it, and depending
on the path of the request that comes in,

4
00:00:11.836 --> 00:00:14.577
a particular view is going to be rendered.

5
00:00:14.577 --> 00:00:19.141
And oftentimes you will even take
the users cookies into account, all right?

6
00:00:19.141 --> 00:00:20.664
So it could be, for

7
00:00:20.664 --> 00:00:25.921
this user show me the LinkedIn feed
with all of the articles in it.

8
00:00:25.921 --> 00:00:31.853
As soon as you start going into this area,
you have to have a keen awareness for

9
00:00:31.853 --> 00:00:37.606
what is the core JavaScript language,
versus things that are conventions

10
00:00:37.606 --> 00:00:43.293
generally available in JavaScript
environments, like set time bound.

11
00:00:43.293 --> 00:00:48.477
Versus things that our browser
only constructs like AJAX.

12
00:00:48.477 --> 00:00:52.738
If you need to use AJAX for something
like jQuery which depends on a full DOM

13
00:00:52.738 --> 00:00:57.706
implementation, your server side rendering
code is going to be really really slow.

14
00:00:57.706 --> 00:01:01.961
You have to bring in
like tons of stubbing and

15
00:01:01.961 --> 00:01:09.100
DOM simulation stuff to make that work
the way you would expect it to work.

16
00:01:09.100 --> 00:01:12.028
So we don't get anything
that's on the window object,

17
00:01:12.028 --> 00:01:14.533
we don't get Navigator
we don't get sensors.

18
00:01:14.533 --> 00:01:18.341
We don't get screen width and screen
height, those mean nothing, so if you have

19
00:01:18.341 --> 00:01:22.046
a pinterest layout where you have a
different number of columns on the screen.

20
00:01:22.046 --> 00:01:26.971
And there's really not
a good way to render that,

21
00:01:26.971 --> 00:01:30.965
at least the first time, on the server.

22
00:01:30.965 --> 00:01:35.677
And the typical approach there is to
remember what the user's window width

23
00:01:35.677 --> 00:01:37.779
used to be, put that in a cookie.

24
00:01:37.779 --> 00:01:42.054
And now subsequent requests can at
least have that as a starting point.

25
00:01:42.054 --> 00:01:45.833
Not a great solution, but
it's all we've got so far.

26
00:01:45.833 --> 00:01:51.389
Keep in mind that, this dramatically
slows down the initial HTML response.

27
00:01:51.389 --> 00:01:54.088
Wat's on the critical
path to returning HTML?

28
00:01:54.088 --> 00:01:58.372
Booting your app, going and getting data,
rendering all of those components,

29
00:01:58.372 --> 00:02:03.097
waiting for everything to settle, scraping
that HTML, building the response object,

30
00:02:03.097 --> 00:02:05.000
and sending it back to the browser.

31
00:02:05.000 --> 00:02:12.635
It is way,
way slower than rendering HTML with PHP.

32
00:02:12.635 --> 00:02:16.664
It is a lot of work that you need to do.

33
00:02:16.664 --> 00:02:21.184
But the advantage here is that we can,
when we make a request to this

34
00:02:21.184 --> 00:02:25.870
rendering server, its gonna like
inside the data centre really fast

35
00:02:25.870 --> 00:02:30.433
network request across the some
fibre optic cable, low latency.

36
00:02:30.433 --> 00:02:33.334
To assemble all the data it needs, and

37
00:02:33.334 --> 00:02:39.058
then we gonna have all three milestones
at the end of getting index.html.

38
00:02:39.058 --> 00:02:43.537
The idea is, even before we
download client side JavaScript,

39
00:02:43.537 --> 00:02:47.096
we've got our grocery
items already in the HTML.

40
00:02:47.096 --> 00:02:50.137
And the JavaScript comes down later and

41
00:02:50.137 --> 00:02:54.376
imperceptibly to the user,
it sort of just picks up and

42
00:02:54.376 --> 00:02:59.090
replaces the HTML with whatever
it needs to replace it with.

43
00:02:59.090 --> 00:03:05.027
And there's no blink or flash, but at
that point, the client side is in charge.

44
00:03:05.027 --> 00:03:09.267
And at this point it's just
sort of subsequent behavior.

45
00:03:09.267 --> 00:03:11.610
Subsequent things that
happen beyond that page.

