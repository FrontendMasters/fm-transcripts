WEBVTT

1
00:00:00.140 --> 00:00:04.220
&gt;&gt; Mike North: So we're going to implement
our enhanced client side rendering, and

2
00:00:04.220 --> 00:00:08.040
i wanna show you how to use
Chromes performance tab

3
00:00:08.040 --> 00:00:11.740
to get kind of get a handle
on our start and end point.

4
00:00:11.740 --> 00:00:16.120
So we can see exactly how much
we are improving our app.

5
00:00:18.190 --> 00:00:21.580
And the first thing we will
do is load our app as usual.

6
00:00:22.740 --> 00:00:24.570
We're just waiting for it to build, okay?

7
00:00:24.570 --> 00:00:25.880
So here we go.

8
00:00:25.880 --> 00:00:28.660
And I've got my Performance tab open here.

9
00:00:28.660 --> 00:00:31.430
I'm just gonna click this reload button.

10
00:00:32.720 --> 00:00:35.650
And you can see that tells
us it's profiling and

11
00:00:35.650 --> 00:00:39.350
you don't have to touch anything
it'll stop when it when it's ready.

12
00:00:39.350 --> 00:00:42.250
And if we open this up a little bit

13
00:00:42.250 --> 00:00:46.020
we can get a handle as to
like whats going on here.

14
00:00:46.020 --> 00:00:51.880
So actually let me,
let me do it with a clean cache.

15
00:00:53.486 --> 00:00:58.120
So I'm gonna hit shift and refresh and
it's actually gonna start profiling again.

16
00:00:58.120 --> 00:01:01.560
This time we're downloading, we should
be downloading fresh JavaScript, we are.

17
00:01:01.560 --> 00:01:03.230
There's my orange bar there.

18
00:01:03.230 --> 00:01:06.710
We're not serving it out
of the HTTP cache anymore.

19
00:01:06.710 --> 00:01:08.420
This is a fresh download.

20
00:01:08.420 --> 00:01:16.510
And if we look at screenshots,
&gt;&gt; Mike North: I guess, let's see.

21
00:01:17.680 --> 00:01:20.390
Maybe I need to do it one more time
because I didn't have that checked.

22
00:01:23.960 --> 00:01:28.970
They change this stuff a little
from version to version.

23
00:01:28.970 --> 00:01:32.910
Okay, so, I don't believe that.

24
00:01:41.390 --> 00:01:46.990
Okay, so this important to note,
does everyone see how like,

25
00:01:46.990 --> 00:01:52.210
my network tab on the bottom,
that is expanding and contracting.

26
00:01:52.210 --> 00:01:53.710
I'm just scrolling up and down.

27
00:01:54.810 --> 00:01:57.940
But the screenshots are not.

28
00:01:57.940 --> 00:02:02.270
So if you ever want to line up network
activity with the screenshots and

29
00:02:02.270 --> 00:02:05.490
the timeline above,
make sure that these little ticks for

30
00:02:05.490 --> 00:02:08.490
time are as lined up as you can make them,

31
00:02:08.490 --> 00:02:13.270
which would be like this is pretty close
over here, seeing the whole thing here.

32
00:02:13.270 --> 00:02:15.230
I was wondering why we were downloading.

33
00:02:15.230 --> 00:02:19.050
It looked like this like
we were rendering here,

34
00:02:19.050 --> 00:02:21.400
before the JavaScript is landing,
not possible.

35
00:02:21.400 --> 00:02:23.150
This is a real situation.

36
00:02:23.150 --> 00:02:26.320
Here's our download,
and if we looked here,

37
00:02:26.320 --> 00:02:32.030
you could probably see some parse time,
this is booting the app up, and so on.

38
00:02:32.030 --> 00:02:34.200
And then finally,
we get something on the screen.

39
00:02:34.200 --> 00:02:36.760
So we wanna show something that
is a little bit better than this.

40
00:02:36.760 --> 00:02:39.270
And to be honest,
we're serving off of localhost,

41
00:02:39.270 --> 00:02:41.670
we're not throttling
our network connection.

42
00:02:41.670 --> 00:02:43.690
We probably should to
get a good reading here.

43
00:02:43.690 --> 00:02:45.780
One more time for good measure.

44
00:02:45.780 --> 00:02:49.060
And now I'm dangerously in
between developers and lunch.

45
00:02:50.760 --> 00:02:51.450
&gt;&gt; Speaker 2: While he loads that,

46
00:02:51.450 --> 00:02:56.128
one thing I will say is it
might be in your heart,

47
00:02:56.128 --> 00:03:00.290
you're gonna think I can pinch to zoom
in cuz that's what you do on everything.

48
00:03:00.290 --> 00:03:01.670
That is not how it works on Chrome.

49
00:03:01.670 --> 00:03:05.105
So you probably can't see his hand,
but it is a scroll up and

50
00:03:05.105 --> 00:03:10.344
scroll down motion which you will
likely never actually internalize, so.

51
00:03:10.344 --> 00:03:16.633
&gt;&gt; Mike North: [LAUGH] So yeah,
good, thanks, thanks for that color.

52
00:03:16.633 --> 00:03:21.670
[LAUGH] So this is over a 3G connection,
so we've throttled the network down.

53
00:03:21.670 --> 00:03:26.050
I just did that in the Network tab here,
regular 3G.

54
00:03:26.050 --> 00:03:30.530
And when we look at performance we can
see that like this is us downloading

55
00:03:30.530 --> 00:03:35.660
the JavaScript, some of this little CPU
spike has to do with it being parsed and

56
00:03:35.660 --> 00:03:39.664
the app booting and only at about the 4 or

57
00:03:39.664 --> 00:03:43.650
3.8 second mark are we seeing
something show up on the screen.

58
00:03:43.650 --> 00:03:44.820
So let's do better than that.

59
00:03:44.820 --> 00:03:47.860
I'm going to go to my elements
tab just like I showed you.

60
00:03:49.040 --> 00:03:52.090
This root element, this is sort of
the container for our application.

61
00:03:52.090 --> 00:03:57.440
Most modern web UI frameworks,
they sort of have

62
00:03:57.440 --> 00:04:03.590
a target div or target element
inside which your app is rendered.

63
00:04:03.590 --> 00:04:07.960
React, Ember, Vue,
Angular 2, they all do this.

64
00:04:07.960 --> 00:04:10.360
So we're gonna grab
the contents of this thing.

65
00:04:11.460 --> 00:04:15.500
Edit as html,
actually first I'll delete this

66
00:04:16.560 --> 00:04:20.890
that the URL specific content just so
we can make it as easy as possible.

67
00:04:22.290 --> 00:04:24.260
Right there there's the home.

68
00:04:24.260 --> 00:04:28.380
Get rid of that so
here's what we want present for loading.

69
00:04:28.380 --> 00:04:31.200
Edit as html I'll copy it and

70
00:04:31.200 --> 00:04:35.500
then we'll go over here into our EJS and
inside this root,

71
00:04:35.500 --> 00:04:40.040
which initially was empty,
I'm gonna put all of that HTML there.

72
00:04:40.040 --> 00:04:41.490
Now we can clean it up.

73
00:04:41.490 --> 00:04:46.530
You can see there's, this is the result of
place holders so React can do it's proper

74
00:04:46.530 --> 00:04:52.220
bookkeeping and identify between these two
comments is a value that I can replace.

75
00:04:54.180 --> 00:04:59.080
Not yet optimized but you can see our
apps not it is re-rendered if we expect

76
00:04:59.080 --> 00:05:03.790
element sorry view source is what
we want to do we can see like

77
00:05:03.790 --> 00:05:09.630
where before after all of this css
we would have seen an empty root.

78
00:05:09.630 --> 00:05:14.210
Now we can see like this is that one line
of HTML just pasted everything there.

79
00:05:14.210 --> 00:05:15.900
It's not pretty but it works.

80
00:05:17.600 --> 00:05:22.576
And one more performance, run holding
down shift and refresh, so I go and

81
00:05:22.576 --> 00:05:26.440
fetch the JavaScript again,
so we can see the difference

82
00:05:31.345 --> 00:05:32.777
&gt;&gt; Mike North: Much, much better,

83
00:05:32.777 --> 00:05:38.480
we're actually below the one second
mark on 3G, that's pretty fantastic.

84
00:05:38.480 --> 00:05:42.050
And we could put a spinner in there, and
it would feel like this is a much faster

85
00:05:42.050 --> 00:05:45.362
loading app,
four seconds versus less than a second.

86
00:05:45.362 --> 00:05:48.020
I mean that's like more than a night and

87
00:05:48.020 --> 00:05:49.990
day difference,
it's like a different app here.

88
00:05:51.170 --> 00:05:55.391
So that is enhanced client-side rendering.

89
00:05:55.391 --> 00:06:00.530
This is very closely connected
to a concept we'll talk about

90
00:06:00.530 --> 00:06:03.770
tomorrow called
the App Shell architecture.

91
00:06:03.770 --> 00:06:07.065
It's the idea of a stateless
portion of your app and

92
00:06:07.065 --> 00:06:09.360
statefull content that's
rendered within it.

93
00:06:09.360 --> 00:06:12.820
I want you to put a mental bookmark here
because we're going to come back to it.

94
00:06:12.820 --> 00:06:16.910
This will be a very familiar
concept that we're going to reuse.

95
00:06:16.910 --> 00:06:17.910
&gt;&gt; Speaker 3: What was that called again?

96
00:06:17.910 --> 00:06:18.820
&gt;&gt; Mike North: Later on.

97
00:06:18.820 --> 00:06:20.480
App Shell.

98
00:06:20.480 --> 00:06:21.880
App Shell Architecture.

99
00:06:21.880 --> 00:06:27.170
So if you read through
progressive web apps on Google's

100
00:06:27.170 --> 00:06:30.000
web essentials documentation,

101
00:06:30.000 --> 00:06:33.935
this is one of the two architectural
patterns that they advocate for.

102
00:06:33.935 --> 00:06:40.460
And that is enhanced client side
rendering, a massive improvement.

103
00:06:40.460 --> 00:06:47.250
Like we took our first paint down
to like 20% of what it once was.

