WEBVTT

1
00:00:00.190 --> 00:00:01.988
&gt;&gt; Steve Kinney: Let's talk about,
for a second,

2
00:00:01.988 --> 00:00:03.979
how we used to do these kind of things.

3
00:00:03.979 --> 00:00:09.684
You might have noticed a somewhat of an
inside joke as we've gone through the day,

4
00:00:09.684 --> 00:00:13.750
which is kind of not being
particularly nice to AppCache.

5
00:00:13.750 --> 00:00:18.180
There is still a compelling reason why
you might consider using AppCache.

6
00:00:18.180 --> 00:00:21.695
If you look about service
worker enthusiasm,

7
00:00:21.695 --> 00:00:25.579
you see a lot of green,
you also see one yellow one.

8
00:00:25.579 --> 00:00:30.490
Which is, Safari is a not
unpopular mobile browser, right,

9
00:00:30.490 --> 00:00:33.140
it is installed on every iPhone.

10
00:00:33.140 --> 00:00:37.155
If you say, I'm going to install
Chrome on my iPhone, well,

11
00:00:37.155 --> 00:00:41.946
Apple's policies say that you still
have to use Safari under the hood, so

12
00:00:41.946 --> 00:00:45.289
Chrome on the iPhone is
Safari in Chrome clothing.

13
00:00:45.289 --> 00:00:49.104
So still the same rendering engine, so
it's not just like, I'll have my users

14
00:00:49.104 --> 00:00:52.780
install Chrome, and they will have
progressive web apps, it's still Safari.

15
00:00:52.780 --> 00:00:57.582
So there is an idea where we
might want to go ahead and like,

16
00:00:57.582 --> 00:01:00.341
I'm gonna implement AppCache.

17
00:01:00.341 --> 00:01:04.232
And the way you do that, is you
create this thing called a manifest,

18
00:01:04.232 --> 00:01:08.600
the manifest talks about all of the files
that you would like to have cached,

19
00:01:08.600 --> 00:01:12.854
seems legitimate, right, and
like maybe a fall through to the network.

20
00:01:12.854 --> 00:01:20.022
Aversion, this seems like okay I can just
do this and I'll support everything right?

21
00:01:20.022 --> 00:01:24.360
Everything will be great, here we'll
cache app.css, we'll cache app.js,

22
00:01:24.360 --> 00:01:28.651
everything else will go through the
network, we can actually have fallbacks.

23
00:01:28.651 --> 00:01:31.962
So if they try to go to
download-virus.html,

24
00:01:31.962 --> 00:01:37.199
we will fall back to not-available.html,
we can have a fallback image.

25
00:01:37.199 --> 00:01:40.121
Seems like I could just do this,
and skip everything Mike and

26
00:01:40.121 --> 00:01:42.200
Steve just showed me for
the last two days.

27
00:01:45.060 --> 00:01:48.998
&gt;&gt; Steve Kinney: Just for fun, when you
get home, you can Google Jake Archibald,

28
00:01:48.998 --> 00:01:51.439
we've mentioned him a few times today.

29
00:01:51.439 --> 00:01:55.359
He's one of the developer advocates
pushing service worker and AppCache.

30
00:01:55.359 --> 00:01:58.545
And you'll find
an insightful article that,

31
00:01:58.545 --> 00:02:02.230
I won't say the title of in
front of present company.

32
00:02:02.230 --> 00:02:08.654
So some tasting notes though, even the
HTML page isn't listed in the manifest.

33
00:02:11.370 --> 00:02:15.016
&gt;&gt; Steve Kinney: That one isn't there,
the page that associated become part of it

34
00:02:15.016 --> 00:02:18.349
as well, so it kind of grows
to expand everything in there.

35
00:02:18.349 --> 00:02:21.869
Anything in the AppCache is cache-only,
even if you're on a network.

36
00:02:21.869 --> 00:02:25.439
So if you think about that first example,
that Mike showed,

37
00:02:25.439 --> 00:02:28.309
where it's like,
no matter what we go to cache,

38
00:02:28.309 --> 00:02:32.730
Mike has been a very good job today
saying we are biased towards fresh data.

39
00:02:32.730 --> 00:02:37.390
AppCache does not share that
bias with you or that opinion,

40
00:02:37.390 --> 00:02:40.289
if something is cached, that is it.

41
00:02:40.289 --> 00:02:44.300
The cache will only update if
the text of the manifest is changed.

42
00:02:44.300 --> 00:02:46.689
That's why when you saw what we
showed before there was that v1,

43
00:02:46.689 --> 00:02:49.557
basically the way you update that manifest
is you just change that to some other

44
00:02:49.557 --> 00:02:50.220
number, right?

45
00:02:50.220 --> 00:02:55.888
And as long as any change,
that will change the manifest, but

46
00:02:55.888 --> 00:03:02.212
other than that, that user will
have whatever was in there forever.

47
00:03:02.212 --> 00:03:07.549
But even if you remove that, if you still
have something to the regular HTTP cache,

48
00:03:07.549 --> 00:03:10.690
all right,
we saw like you can say max age a year.

49
00:03:10.690 --> 00:03:13.963
You're not necessarily going
to get the newest version,

50
00:03:13.963 --> 00:03:17.319
you could get some other one
that's already in HTTP cache.

51
00:03:17.319 --> 00:03:19.694
And now you've changed the number,

52
00:03:19.694 --> 00:03:24.220
you don't know which users got
the fresh data and which ones didn't.

53
00:03:24.220 --> 00:03:26.337
The manifest could get cached as well,

54
00:03:26.337 --> 00:03:29.429
at which point they wouldn't
get a new manifest anyway.

55
00:03:29.429 --> 00:03:33.116
Because they'll go to get a manifest
they'll get the HTTP cached one,

56
00:03:33.116 --> 00:03:37.309
which they will have the same number and
they won't save the new one in that case.

57
00:03:37.309 --> 00:03:40.301
Non cached assets will not load at all,

58
00:03:40.301 --> 00:03:45.301
unless you accept them from
the manifest even if you're online.

59
00:03:45.301 --> 00:03:49.100
And there's no logic for them to fallback
if you aren't online the resources

60
00:03:49.100 --> 00:03:52.491
they're accepted in that network
they're just not available, and

61
00:03:52.491 --> 00:03:53.901
they will just fail to load.

62
00:03:53.901 --> 00:03:57.974
The most compelling reason why you
might not want to use AppCache,

63
00:03:57.974 --> 00:04:02.791
is this is the Mozilla documentation page
for it, and you can see a few things.

64
00:04:02.791 --> 00:04:08.141
One is that it is deprecated and
it gets the thumbs down emoji.

65
00:04:08.141 --> 00:04:12.651
And if you kind of look towards the lower
right there, you'll also see that using

66
00:04:12.651 --> 00:04:17.309
application caching feature described
here at this point is highly discouraged.

67
00:04:17.309 --> 00:04:22.180
And it goes on to say use
Service Workers instead, right?

68
00:04:22.180 --> 00:04:26.343
A lot of what we did in Service Worker
was learning from some of the problems

69
00:04:26.343 --> 00:04:30.576
that came from, we'll just give you
this very simple file where you have no

70
00:04:30.576 --> 00:04:35.231
introspection, and no programmatic access,
and no ability to control things.

71
00:04:35.231 --> 00:04:38.498
And well-meaning people
tried to get it right, but

72
00:04:38.498 --> 00:04:42.434
it's impossible to know all
the details of your application,

73
00:04:42.434 --> 00:04:46.685
all right, and that's a lot of
the power we see in these newer APIs.

