WEBVTT

1
00:00:05.397 --> 00:00:08.813
&gt;&gt; Steve Kinney: And that is the ability
to synchronize in the background.

2
00:00:08.813 --> 00:00:11.154
Cuz at this point in the workshop,

3
00:00:11.154 --> 00:00:15.930
I think we've spoiled the surprise
on how this is going to end for you.

4
00:00:15.930 --> 00:00:18.491
But it is a long bit of problem.

5
00:00:18.491 --> 00:00:22.409
The reason you'd want an app is cuz it can
go get your RSS feeds in the background,

6
00:00:22.409 --> 00:00:26.228
you get on a New York City subway train,
cuz we do that in Minneapolis, right?

7
00:00:26.228 --> 00:00:28.008
We get on New York City subway trains.

8
00:00:28.008 --> 00:00:29.968
They're above ground, they're great.

9
00:00:29.968 --> 00:00:32.680
And we don't have the data we need, right?

10
00:00:32.680 --> 00:00:34.600
And there's a lot of problems with this.

11
00:00:34.600 --> 00:00:37.967
So with a background sync we could
theoretically, we've talked a lot about

12
00:00:37.967 --> 00:00:41.193
getting resources, getting resources,
getting resources, right?

13
00:00:41.193 --> 00:00:45.818
We can cache the CSS file,
we can cache the JavaScript file.

14
00:00:45.818 --> 00:00:49.138
But what happens when we go to post or

15
00:00:49.138 --> 00:00:54.678
to put some data to the server
when there's no connection?

16
00:00:54.678 --> 00:00:55.901
It's just our app doesn't work.

17
00:00:55.901 --> 00:00:58.430
We've, again, ruined the illusion, right?

18
00:00:58.430 --> 00:01:02.415
And there's some cases where this is okay,
there's some cases charge my bank account.

19
00:01:02.415 --> 00:01:05.677
Listen, if we don't have a connection and
that doesn't happen, tell you what,

20
00:01:05.677 --> 00:01:06.357
don't do that.

21
00:01:06.357 --> 00:01:09.089
That's acceptable for
me not to be able to do,

22
00:01:09.089 --> 00:01:11.972
to publish my latest
thought leadership piece.

23
00:01:11.972 --> 00:01:14.179
Maybe that can't go to the server.

24
00:01:14.179 --> 00:01:18.827
But there's a lot that we still
can do when there is no Internet.

25
00:01:18.827 --> 00:01:22.954
And we've thought a lot about offline and
online, but

26
00:01:22.954 --> 00:01:27.273
it turns out that there is
a third class of connectivity.

27
00:01:27.273 --> 00:01:34.188
There's online and there's offline, and
then there's bad connection, right?

28
00:01:34.188 --> 00:01:38.647
Where you could say, hey, I'm gonna
send this and it takes so long and

29
00:01:38.647 --> 00:01:41.836
potentially times out
that it becomes unusable.

30
00:01:41.836 --> 00:01:45.531
I think both Mike and I have been
doing a lot of traveling lately,

31
00:01:45.531 --> 00:01:47.525
and when you travel, you get 2G.

32
00:01:47.525 --> 00:01:52.549
Which changes the way that you feel about
persistently fast Internet connections

33
00:01:52.549 --> 00:01:56.931
everywhere, where whatever you do,
it's just not going to work out.

34
00:01:56.931 --> 00:02:00.631
And if you think about it, this is
also an interesting problem because we

35
00:02:00.631 --> 00:02:02.766
force some caching mechanisms, right?

36
00:02:02.766 --> 00:02:05.875
We said hey, go hit the network.

37
00:02:05.875 --> 00:02:09.803
And if the network doesn't work out,
then go to the cache.

38
00:02:09.803 --> 00:02:13.389
That's wonderful if you
have no connection, right?

39
00:02:13.389 --> 00:02:17.640
Okay, I tried to connect, there was no
connection, give me the cache version.

40
00:02:17.640 --> 00:02:21.815
What if you have an abysmally
slow connection?

41
00:02:21.815 --> 00:02:26.185
Well, you wait, and wait,
and wait, and wait.

42
00:02:26.185 --> 00:02:30.832
Until either A, the merciful deities
of network connectivity time you out,

43
00:02:30.832 --> 00:02:34.333
or B, you just lose your mind and
close the application and

44
00:02:34.333 --> 00:02:36.781
go ahead and do something else, right?

45
00:02:36.781 --> 00:02:41.199
Those are the kind of two things that
could happen if you have an incredibly

46
00:02:41.199 --> 00:02:42.349
slow connection.

47
00:02:42.349 --> 00:02:46.277
The thing was, there are a bunch of
actions we could take in our applications.

48
00:02:46.277 --> 00:02:51.144
And like we said earlier, how this
manifests itself in your application

49
00:02:51.144 --> 00:02:54.671
depends on the application
that you're building.

50
00:02:54.671 --> 00:02:56.912
We'll take a look at some
examples in a little bit.

51
00:02:56.912 --> 00:02:59.072
So there's not off the shelf,
here's what you do.

52
00:02:59.072 --> 00:03:02.803
It is the interaction that you're trying
to optimize for is going to have,

53
00:03:02.803 --> 00:03:06.549
you have to think about what the use or
what you expect in these situations.

54
00:03:06.549 --> 00:03:10.952
But we know that we have ways of
doing stuff when the user isn't

55
00:03:10.952 --> 00:03:12.821
actively using the page.

56
00:03:12.821 --> 00:03:19.550
So couldn't we just cache those things and
tell the user listen, we've got your back.

57
00:03:19.550 --> 00:03:23.635
And I'll try to do it later,
or something like that.

58
00:03:23.635 --> 00:03:25.482
Well, well.

59
00:03:25.482 --> 00:03:27.435
No, we can.

60
00:03:27.435 --> 00:03:29.791
So think about here's a use case.

61
00:03:29.791 --> 00:03:32.166
Let's think about it from
the terms of the user, right?

62
00:03:32.166 --> 00:03:35.375
Logan has been using this native to-do
application for the last year and

63
00:03:35.375 --> 00:03:37.012
things have been going swimmingly.

64
00:03:37.012 --> 00:03:39.730
Whenever she's on the go and
needs to remember something do,

65
00:03:39.730 --> 00:03:41.098
she just jots it down, right?

66
00:03:41.098 --> 00:03:45.214
It's key she comes up with something,
she puts it in there,

67
00:03:45.214 --> 00:03:48.049
she's good to go and heads about her day.

68
00:03:48.049 --> 00:03:51.954
At the behest of her husband who's all
about the open Web, she decides to give

69
00:03:51.954 --> 00:03:56.000
some web-based application a shot,
and it doesn't really work out, right?

70
00:03:56.000 --> 00:03:58.983
She goes ahead and she finds this
application, she opens it online,

71
00:03:58.983 --> 00:04:00.635
it's a progressive web app, right?

72
00:04:00.635 --> 00:04:05.912
This is great, she can see her to-dos, the
subway train that doesn't exist in Denver.

73
00:04:05.912 --> 00:04:08.107
And she's like I've got this,
I'm going to put something in.

74
00:04:08.107 --> 00:04:11.849
Or maybe she's on her way to the mountains
or something along those lines.

75
00:04:11.849 --> 00:04:13.474
She can see them all, and so

76
00:04:13.474 --> 00:04:17.234
she's like I just remembered I
need to take Wes to the dentist.

77
00:04:17.234 --> 00:04:21.937
Fine, let's put it in the application.

78
00:04:21.937 --> 00:04:23.209
Let's wait.

79
00:04:23.209 --> 00:04:25.105
Let's see how it goes.

80
00:04:25.105 --> 00:04:28.082
This might go well.

81
00:04:28.082 --> 00:04:31.179
That face could be the face of
watching the network time out or

82
00:04:31.179 --> 00:04:33.438
just the face of it taking forever, right?

83
00:04:33.438 --> 00:04:34.448
Which we don't know,

84
00:04:34.448 --> 00:04:37.701
that's not the interaction that we
expect out of a to-do list, right?

85
00:04:37.701 --> 00:04:40.159
We just wanna put it in,
put it back in our pocket, and

86
00:04:40.159 --> 00:04:42.467
just assume that it's going to be there,
right?

87
00:04:42.467 --> 00:04:44.248
We don't have to wait on a native app.

88
00:04:44.248 --> 00:04:47.440
Why would we have to wait on a mobile app?

89
00:04:47.440 --> 00:04:50.283
With progressive web apps,

90
00:04:50.283 --> 00:04:55.619
one of the newer kids on
the block is background sync.

91
00:04:55.619 --> 00:04:59.413
Background sync allows us to defer
an action until we have a successful

92
00:04:59.413 --> 00:05:00.514
connection again.

93
00:05:00.514 --> 00:05:06.498
And so instead of maybe even making
the fetch request, we can schedule a sync.

94
00:05:06.498 --> 00:05:12.038
And if you have Internet, well, that's
great, you will then perform the sync.

95
00:05:12.038 --> 00:05:16.118
If you don't have Internet, that's fine,
the sync has been scheduled.

96
00:05:16.118 --> 00:05:19.431
We will wait until you have Internet,
and we will take a look,

97
00:05:19.431 --> 00:05:21.554
and we'll see if we can connect later.

98
00:05:21.554 --> 00:05:25.158
If not, we will try again,
and we will try again.

99
00:05:25.158 --> 00:05:30.427
It'll do you stuff like incremental back
off, so it won't continually thrash around

100
00:05:30.427 --> 00:05:35.427
trying, but will just wait until we have
a connection and then we'll try to do it.

101
00:05:35.427 --> 00:05:43.493
The way this works is we've used a lot of
navigator.serviceWorker.register, right?

102
00:05:43.493 --> 00:05:48.663
.register is a serviceWorker, fine,
and that happens to work out great.

103
00:05:48.663 --> 00:05:49.807
There already is one.

104
00:05:49.807 --> 00:05:52.280
It says, here is your registration.

105
00:05:52.280 --> 00:05:57.916
We also have its kind of sibling which
is navigator.serviceWorker.ready.

106
00:05:57.916 --> 00:06:03.219
And that will return a promise that will
give you the registration if there is one.

107
00:06:03.219 --> 00:06:08.325
And obviously, it will catch if there
isn't a serviceWorker installed.

108
00:06:08.325 --> 00:06:09.388
So we'll say hey,

109
00:06:09.388 --> 00:06:13.184
I would like to know about
the currently installed serviceWorker.

110
00:06:13.184 --> 00:06:14.480
You'll get that back.

111
00:06:14.480 --> 00:06:18.551
And then registration.sync.register.

112
00:06:18.551 --> 00:06:20.837
And then you can register
some name of your event.

113
00:06:20.837 --> 00:06:23.149
And this is an arbitrary string,
it all depends on your application.

114
00:06:23.149 --> 00:06:25.311
This is create to-do.

115
00:06:25.311 --> 00:06:29.055
It is favorite tweet,
something along those lines.

116
00:06:29.055 --> 00:06:31.143
It all depends, but
the string is up to you.

117
00:06:31.143 --> 00:06:32.591
It depends on your application.

118
00:06:32.591 --> 00:06:35.165
This is what it looks like in the browser.

119
00:06:35.165 --> 00:06:40.092
On the service worker side, very similar
to how we've handled fetch, and activate,

120
00:06:40.092 --> 00:06:43.682
and even push, right,
we just add a listener for a sync event.

121
00:06:43.682 --> 00:06:48.147
And this sync event will be fired
if you're online immediately or

122
00:06:48.147 --> 00:06:50.103
if not eventually, right?

123
00:06:50.103 --> 00:06:52.769
And this is where that tag comes
in because you could have many.

124
00:06:52.769 --> 00:06:56.904
Like every other kind of serviceWorker
API, there is one event you listen for

125
00:06:56.904 --> 00:06:59.765
and then you kind of have to
namespace it a little bit to

126
00:06:59.765 --> 00:07:01.372
kind of figure out which one.

127
00:07:01.372 --> 00:07:03.502
And that's where the tag comes in,

128
00:07:03.502 --> 00:07:07.912
where we gave it a name that arbitrary
string will get that as event.Tag.

129
00:07:07.912 --> 00:07:09.617
And you can break this out into functions.

130
00:07:09.617 --> 00:07:12.885
If you're using web pack,
you can break this out in other modules.

131
00:07:12.885 --> 00:07:15.312
We’ll use event.waitUntil.

132
00:07:15.312 --> 00:07:16.931
If you remember from earlier,

133
00:07:16.931 --> 00:07:20.864
event.waitUntil1 keeps this current
process alive until we're done.

134
00:07:20.864 --> 00:07:25.796
More importantly, it looks at
the promise that gets returned.

135
00:07:25.796 --> 00:07:28.578
If, let's say, you're scheduling a fetch.

136
00:07:28.578 --> 00:07:31.189
If that fetch resolves, well,

137
00:07:31.189 --> 00:07:35.359
the serviceWorker can assume,
I have done my job.

138
00:07:35.359 --> 00:07:39.787
I sent a fetch request,
it resolved, my job is done here.

139
00:07:39.787 --> 00:07:41.918
I do not need to do this sync event again.

140
00:07:41.918 --> 00:07:45.261
Syncs are a one-time thing.

141
00:07:45.261 --> 00:07:48.754
If it fails for some reason,
maybe it's still like, I'm online,

142
00:07:48.754 --> 00:07:50.545
I'm gonna try to do this.

143
00:07:50.545 --> 00:07:52.788
Timed out again, cool.

144
00:07:52.788 --> 00:07:57.068
That promise rejects and
the sync event is still valid.

145
00:07:57.068 --> 00:08:02.392
If you register another sync
event with the same tag,

146
00:08:02.392 --> 00:08:06.666
right, that will again replace this one.

147
00:08:06.666 --> 00:08:08.114
It's the same thing with notifications.

148
00:08:08.114 --> 00:08:11.500
A tag is a way for you not to double up or

149
00:08:11.500 --> 00:08:17.200
to duplicate notifications,
or in this case, sync events.

