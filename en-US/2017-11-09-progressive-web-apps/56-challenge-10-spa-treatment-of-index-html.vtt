WEBVTT

1
00:00:00.240 --> 00:00:03.470
&gt;&gt; Mike North: Here is the next
exercise that we're going to jump into.

2
00:00:03.470 --> 00:00:06.870
And this one is a little bit
easier than these last two.

3
00:00:06.870 --> 00:00:09.480
It's sort of the last piece of the puzzle.

4
00:00:11.630 --> 00:00:20.740
And it's interesting because it's handling
like one file but sort of not one file.

5
00:00:20.740 --> 00:00:23.840
And it has to do with the way
Single-page apps work.

6
00:00:23.840 --> 00:00:30.900
Single-page apps are hack, where we create
the illusion of like having addressable

7
00:00:30.900 --> 00:00:36.540
content at an app, but behind the scenes
we know these are not true page loads.

8
00:00:36.540 --> 00:00:40.240
These are not round trip
HTTP requests to a server.

9
00:00:40.240 --> 00:00:45.070
That we, like in the style that you'd
have if you have like a PHP app, where

10
00:00:45.070 --> 00:00:49.900
you go and get your PHP to generate some
HTML and provide it back to you, right.

11
00:00:49.900 --> 00:00:52.920
So, our address is changing,
our URL is changing.

12
00:00:52.920 --> 00:00:56.100
Different stuff is showing up on screen,
but really we only have

13
00:00:56.100 --> 00:01:01.250
one index.html file, and
everything else is sort of an illusion.

14
00:01:01.250 --> 00:01:06.090
It's an illusion, so that we align with
what users expect from the internet.

15
00:01:06.090 --> 00:01:08.990
Right, they expect that they should
be able to bookmark something.

16
00:01:08.990 --> 00:01:12.610
And go back to that book mark and
see what they had seen before.

17
00:01:12.610 --> 00:01:17.780
So, we have created an illusion, and that
has made life a little bit difficult here.

18
00:01:17.780 --> 00:01:22.090
Because all of the caching stuff we've
been working with so far is oriented

19
00:01:22.090 --> 00:01:29.746
towards true addressable resources like
a JSON document or an image at a URL.

20
00:01:29.746 --> 00:01:35.220
Here index.html like in terms of how your
browser sees it, that could be coming,

21
00:01:36.570 --> 00:01:40.430
that is represented by a variety of URL's.

22
00:01:40.430 --> 00:01:45.150
We have to serve up the same html
file regardless of what path

23
00:01:45.150 --> 00:01:47.610
the user is entering the app through.

24
00:01:47.610 --> 00:01:49.630
And in our client side,

25
00:01:49.630 --> 00:01:53.190
app will take care of rendering
the appropriate content for that thing.

26
00:01:54.560 --> 00:01:59.120
And I have given you here a variety of

27
00:02:00.880 --> 00:02:06.930
hints that will help you build
the correct caching logic.

28
00:02:06.930 --> 00:02:13.290
For index.html, I like to have this be
sort of the outer most caching logic.

29
00:02:13.290 --> 00:02:17.120
So we can even,
in our fetch event handler,

30
00:02:17.120 --> 00:02:22.430
before we even get to the event
respond with section that we have now.

31
00:02:22.430 --> 00:02:23.430
Above that,

32
00:02:23.430 --> 00:02:29.250
you could deal with the potential
encountering of an HTML request coming in.

33
00:02:29.250 --> 00:02:32.530
And in the event that you find one,
handle it return and

34
00:02:32.530 --> 00:02:35.040
you'll never reach all of the code
that we've written so far.

35
00:02:36.540 --> 00:02:41.250
Here are two constants that I suggest
you put up at the top of your app.

36
00:02:41.250 --> 00:02:44.130
The only reason that I have
the second line here is,

37
00:02:44.130 --> 00:02:49.940
occasionally you'll have like the need
to serve your app over https or http.

38
00:02:49.940 --> 00:02:54.446
This will just match like whatever
environment service worker

39
00:02:54.446 --> 00:02:58.441
happens to be in,
if that is operating over plain http,

40
00:02:58.441 --> 00:03:03.300
the index.html URL will have http,
otherwise it will have https.

41
00:03:05.000 --> 00:03:10.520
So, we have a URL there,
and that will help us

42
00:03:10.520 --> 00:03:15.940
understand what we need to use
when we reach into the cache.

43
00:03:15.940 --> 00:03:20.460
That is the true URL
of that HTML document.

44
00:03:20.460 --> 00:03:24.080
In terms of the cache API's point of view,
right?

45
00:03:24.080 --> 00:03:25.340
It just knows files.

46
00:03:26.790 --> 00:03:34.020
Now, down here at the bottom,
we've got two checks, the first one

47
00:03:34.020 --> 00:03:39.510
lets us use the Accept header to detect
whether this is an html request.

48
00:03:39.510 --> 00:03:43.300
And the second one lets us understand
whether this is a local request.

49
00:03:43.300 --> 00:03:49.800
So, we're not trying to go for
an HTML file for some other domain.

50
00:03:49.800 --> 00:03:52.690
Although the service worker
can't really do that, but

51
00:03:52.690 --> 00:03:56.980
you could have a Chrome
extension that has an HTML file.

52
00:03:56.980 --> 00:04:02.310
And you might have noticed if you
are debugging, you'll see like Chrome://.

53
00:04:02.310 --> 00:04:06.970
That request will go through your service
broker as well which is kind of strange.

54
00:04:06.970 --> 00:04:10.560
But this will let you filter out only
stuff that's on local host 3000 that is

55
00:04:10.560 --> 00:04:15.430
an HTML type.

56
00:04:15.430 --> 00:04:19.670
And in the event that you
hit those two conditions,

57
00:04:19.670 --> 00:04:23.940
we're going to basically do the same
thing that we do for dynamic data.

58
00:04:23.940 --> 00:04:27.590
We have a bias for
trying to get a new index.html,

59
00:04:27.590 --> 00:04:31.310
in the event that something goes wrong
we'll serve up the cached version.

60
00:04:32.330 --> 00:04:36.830
Right, so network fall back to
cache if something goes wrong.

61
00:04:36.830 --> 00:04:41.980
The one that it'll gotcha
I want to add to this.

62
00:04:41.980 --> 00:04:46.680
We have to cache that
index.html page from the start.

63
00:04:46.680 --> 00:04:50.300
We have to make it's there
when we get started.

64
00:04:50.300 --> 00:04:55.050
And there's a convenient place to add it.

65
00:04:55.050 --> 00:05:00.860
And that is in the caches file where
we have our pre caching logic.

66
00:05:00.860 --> 00:05:01.980
&gt;&gt; Speaker 2: They're not shared.

67
00:05:01.980 --> 00:05:02.480
&gt;&gt; Mike North: Thank you.

68
00:05:04.220 --> 00:05:08.610
We have our pre caching logic or
we're saying pre-cache static assets.

69
00:05:08.610 --> 00:05:12.252
And we have go and prefetch these files.

70
00:05:12.252 --> 00:05:16.428
If we then just to go down here and
say oops,

71
00:05:16.428 --> 00:05:20.380
go down here and say to pre fetch, push.

72
00:05:22.790 --> 00:05:27.059
&gt;&gt; Mike North: Something like that,
now your going to add the root like that

73
00:05:27.059 --> 00:05:30.406
index.html request to
the things that we go and

74
00:05:30.406 --> 00:05:33.810
fetch as the service worker is installed.

75
00:05:33.810 --> 00:05:37.800
By the time it activates,
your going to have an index.html in hand,

76
00:05:37.800 --> 00:05:42.240
so that from point on if the user goes
offline, when you try fetch to get your

77
00:05:42.240 --> 00:05:46.530
fresh index.html you will have something
there ready to fall back on too.

78
00:05:47.540 --> 00:05:52.843
So, this should be relatively simple and

79
00:05:52.843 --> 00:05:57.691
I like the pattern of superseding your

80
00:05:57.691 --> 00:06:03.449
existing logic, so just up here, you know,

81
00:06:03.449 --> 00:06:08.470
if html request, handle it, return.

82
00:06:08.470 --> 00:06:13.890
Something like that and then let
like you'll skip that chunk of logic

83
00:06:13.890 --> 00:06:16.869
in the event that you'd fall into some of
the other cases we've been working with.

84
00:06:19.120 --> 00:06:24.740
You will know, you have solved this
exercise when you can stop your server and

85
00:06:24.740 --> 00:06:25.870
your app continues to work.

86
00:06:27.990 --> 00:06:30.060
This will get us to fully offline.

