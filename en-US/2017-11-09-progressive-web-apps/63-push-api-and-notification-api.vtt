WEBVTT

1
00:00:00.390 --> 00:00:03.470
&gt;&gt; Mike North: All day,
we've been dealing with requests and

2
00:00:03.470 --> 00:00:09.096
we've gone deeper into requests than you
probably ever thought you would go, right?

3
00:00:09.096 --> 00:00:14.390
I mean, if you came in here thinking
Ajax was the primary tool of the trade,

4
00:00:14.390 --> 00:00:19.601
we've used Fetch just to such a high
degree that you really know the ins and

5
00:00:19.601 --> 00:00:21.980
outs of what's going on.

6
00:00:21.980 --> 00:00:24.560
But that's still only one direction,
right?

7
00:00:24.560 --> 00:00:27.807
Essentially we're telling
the server what we want, and

8
00:00:27.807 --> 00:00:29.640
it's sending stuff back to us.

9
00:00:29.640 --> 00:00:33.410
So the browser has still been initiating
all communication with the server.

10
00:00:34.750 --> 00:00:39.198
And if we think about the kinds
of needs that developers have,

11
00:00:39.198 --> 00:00:45.200
which have caused them to
want native platforms for

12
00:00:45.200 --> 00:00:49.380
their mobile experiences,
push notifications and

13
00:00:49.380 --> 00:00:54.040
the ability to send something initiated
at a server, that lands on a client.

14
00:00:55.280 --> 00:00:56.680
That is very high on the list.

15
00:00:58.682 --> 00:01:01.660
&gt;&gt; Mike North: Luckily there is
an effort to standardize this,

16
00:01:01.660 --> 00:01:04.850
it's a little bit fragmented right now.

17
00:01:04.850 --> 00:01:10.020
Web Push is the only thing even close
to a standard, I mean it is a standard.

18
00:01:10.020 --> 00:01:12.111
Safari has its own thing, but

19
00:01:12.111 --> 00:01:17.293
we're gonna look at Web Push because
it is gaining enough steam that it's

20
00:01:17.293 --> 00:01:22.489
highly likely it will become the de
facto solution for this kind of thing.

21
00:01:22.489 --> 00:01:27.263
So at it's core, the idea here
is that we can send something

22
00:01:27.263 --> 00:01:31.952
from a server to one or
more of a user's browsers, right?

23
00:01:31.952 --> 00:01:37.770
So we essentially ask them for
permission to push to their browsers.

24
00:01:37.770 --> 00:01:42.816
And part of the advantage of having
the service worker installed is we

25
00:01:42.816 --> 00:01:48.820
have something there waiting to handle any
of these events that may come through.

26
00:01:49.960 --> 00:01:54.420
Just like the way service workers
have been operating so far.

27
00:01:54.420 --> 00:01:57.860
Your tab does not have to be open in
order for them to get these events.

28
00:01:57.860 --> 00:02:02.871
And news sites really love to use this
stuff these days, where they will

29
00:02:02.871 --> 00:02:08.061
send notifications to you, and
try to re-engage you back into the site.

30
00:02:08.061 --> 00:02:11.469
They're trying to tell you they
have something for you, click here,

31
00:02:11.469 --> 00:02:12.579
look at this article.

32
00:02:12.579 --> 00:02:17.852
And that's one of the core tenants
of progressive web apps, right?

33
00:02:17.852 --> 00:02:20.549
You should be able to do something,
put it aside.

34
00:02:20.549 --> 00:02:24.177
And then if the app needs you to come
back or has something of interest,

35
00:02:24.177 --> 00:02:26.652
you should be able to come and
take care of that.

36
00:02:26.652 --> 00:02:29.339
And this is their two
components of this here.

37
00:02:29.339 --> 00:02:33.118
There's the act of being able to
send a signal to the browser and

38
00:02:33.118 --> 00:02:37.327
then notifications are sort of
an independent thing that you can use in

39
00:02:37.327 --> 00:02:40.990
response to one of those messages
that lends in the browser.

40
00:02:40.990 --> 00:02:44.290
So we're just gonna talk
about the mechanism at first.

41
00:02:44.290 --> 00:02:49.912
And after that, Steve's gonna go through
the visual notification that comes in and

42
00:02:49.912 --> 00:02:52.300
how that works so nicely with Push.

43
00:02:53.890 --> 00:02:58.710
So part of the standard involves
this concept of a push service.

44
00:03:00.030 --> 00:03:02.050
So here's the general idea.

45
00:03:03.070 --> 00:03:06.680
So we have multiple browsers,
and each vendor,

46
00:03:06.680 --> 00:03:11.690
each creator of these browsers, they
maintain, like when they add support for

47
00:03:11.690 --> 00:03:16.890
a web push to the browser, they will
as part of that create a push service.

48
00:03:16.890 --> 00:03:21.350
This is a server run by the,
you know Mozilla and Chrome, and like if

49
00:03:21.350 --> 00:03:26.290
Apple implements web push for Safari,
they will have one of these as well.

50
00:03:26.290 --> 00:03:30.531
And essentially these serve as the queues.

51
00:03:30.531 --> 00:03:35.390
They serve as a gateway where you can
send stuff to these things, and they're

52
00:03:35.390 --> 00:03:41.580
responsible for delivering that message
to the appropriate individual browser.

53
00:03:41.580 --> 00:03:46.280
This is very closely modeled off of the
way push notifications work in Android and

54
00:03:46.280 --> 00:03:46.930
iOS.

55
00:03:49.240 --> 00:03:51.710
So in general,

56
00:03:51.710 --> 00:03:56.810
you're going to request permission of
your user to send them notifications.

57
00:03:56.810 --> 00:04:00.630
And what you get as a result of
them granting that permission,

58
00:04:00.630 --> 00:04:03.900
are these objects called
PushSubscriptions.

59
00:04:03.900 --> 00:04:08.360
And that there, that has
the information that you need to prove

60
00:04:08.360 --> 00:04:11.870
that you're authorized to send
messages to that user's device.

61
00:04:14.010 --> 00:04:20.280
So then next what happens is we
take that PushSubscription and

62
00:04:20.280 --> 00:04:25.300
wrap it up package it with the message
that we wish to send to that browser.

63
00:04:25.300 --> 00:04:28.820
We send it to the push service and
then the push service is responsible for

64
00:04:28.820 --> 00:04:31.940
finding that browser and
making sure it gets the message.

65
00:04:31.940 --> 00:04:35.218
The browser has to be open in order for
this to work, but

66
00:04:35.218 --> 00:04:37.940
they don't have to be
in any particular tab.

67
00:04:37.940 --> 00:04:42.094
And in the future it's very likely that
browsers will have sort of a demon process

68
00:04:42.094 --> 00:04:44.370
that's always running in the background.

69
00:04:44.370 --> 00:04:47.154
So that even if like Chrome is closed,

70
00:04:47.154 --> 00:04:52.027
they have at least some small
foundational piece that can be used so

71
00:04:52.027 --> 00:04:56.920
that people can receive these
notifications at any time, right?

72
00:04:56.920 --> 00:05:00.448
Just like a native app would be able
to send notifications at any time.

73
00:05:01.871 --> 00:05:04.757
&gt;&gt; Mike North: So
it is not too complicated, but

74
00:05:04.757 --> 00:05:09.610
if you dive deeper into it,
it gets quite complicated.

75
00:05:10.820 --> 00:05:14.380
But the basic case
shouldn't be too difficult.

76
00:05:15.700 --> 00:05:18.990
So first we need
a ServiceWorkerRegistration object.

77
00:05:18.990 --> 00:05:23.520
This is the object that we get when
we register a ServiceWorker, and

78
00:05:23.520 --> 00:05:28.457
within the ServiceWorker,
we can access it using self.registration.

79
00:05:28.457 --> 00:05:32.368
And so that's, right there,
that's a promise that will resolve,

80
00:05:32.368 --> 00:05:34.940
and then I'll give you
access to this thing.

81
00:05:35.940 --> 00:05:41.110
So although it's not part of the standard,
one of the conventions that

82
00:05:41.110 --> 00:05:45.510
all modern browsers now that
support web push have adapted,

83
00:05:45.510 --> 00:05:49.420
is there's a single
permission that users grant.

84
00:05:49.420 --> 00:05:52.930
And that enables you
both to push non-visible

85
00:05:52.930 --> 00:05:55.620
messages that your service
worker will receive.

86
00:05:55.620 --> 00:05:59.330
And to show visual notifications

87
00:05:59.330 --> 00:06:03.280
which usually are closely
related to those messages.

88
00:06:06.790 --> 00:06:09.930
And you need the ServiceWorkerRegistration
in order to make that work.

89
00:06:09.930 --> 00:06:14.100
So let's look at how we make
use of this registration.

90
00:06:14.100 --> 00:06:18.210
And this is all inside
the registration handler here.

91
00:06:18.210 --> 00:06:23.150
We have this subscribeOptions object here.

92
00:06:23.150 --> 00:06:28.060
And there's something called a push
manager, and we ask the push manager

93
00:06:28.060 --> 00:06:32.910
to subscribe the user to notifications,
right?

94
00:06:32.910 --> 00:06:38.180
And this resolves, this promise
resolves to that PushSubscription.

95
00:06:40.300 --> 00:06:43.190
Let's look at the subscribe options here.

96
00:06:43.190 --> 00:06:46.450
So the first option we
get is userVisibleOnly.

97
00:06:46.450 --> 00:06:51.890
I have a false value here,
but Chrome currently,

98
00:06:51.890 --> 00:06:55.600
I believe only lets us register with true.

99
00:06:55.600 --> 00:07:00.010
Which means that we're only

100
00:07:00.010 --> 00:07:05.280
allowing push command that turns
into something visible for the user.

101
00:07:05.280 --> 00:07:08.560
Now, frankly,

102
00:07:08.560 --> 00:07:12.340
we are able to do things that are not
visible to the user, currently.

103
00:07:12.340 --> 00:07:15.790
And this option is part of the specs so
that may evolve at some point.

104
00:07:15.790 --> 00:07:20.550
But just know that we have to have that
value, userVisibleOnly at true for

105
00:07:20.550 --> 00:07:21.490
today's exercise.

