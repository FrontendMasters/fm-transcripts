WEBVTT

1
00:00:00.390 --> 00:00:08.600
&gt;&gt; Mike North: So Steve, the first place I
would like you to go is to the index.js.

2
00:00:08.600 --> 00:00:12.138
And we're going to set up a new,
it's right there on top.

3
00:00:12.138 --> 00:00:16.711
So we're gonna set up just like
that web app manifest on line 20.

4
00:00:16.711 --> 00:00:23.000
We're gonna set up a new import and
we're gonna just call it QR-worker.js.

5
00:00:23.000 --> 00:00:28.335
So essentially we're getting ready
to create a brand new file and

6
00:00:28.335 --> 00:00:32.894
we want to be able to just refer
to this file by name when we

7
00:00:32.894 --> 00:00:36.007
instantiate a new dedicated worker.

8
00:00:36.007 --> 00:00:39.895
Great, and
we need a JS extension there and

9
00:00:39.895 --> 00:00:44.650
then we need to create
the file in the client folder.

10
00:00:45.670 --> 00:00:46.890
And we'll start working in there.

11
00:00:50.590 --> 00:00:52.790
&gt;&gt; Steve: Client, right,
on the top, right there?

12
00:00:52.790 --> 00:00:53.899
&gt;&gt; Mike North: Yep, and
you file right in there.

13
00:00:57.460 --> 00:00:59.370
&gt;&gt; Mike North: Wonderful, all right.

14
00:00:59.370 --> 00:01:03.060
And Tim, we're gonna leave this blank for
now, put a pin in it.

15
00:01:03.060 --> 00:01:06.540
And I wanna go to a file called qrcode.js,
and

16
00:01:06.540 --> 00:01:09.010
this is where we said we were
gonna do most of the work here.

17
00:01:10.700 --> 00:01:14.235
Sorry, no dash in there, perfect.

18
00:01:14.235 --> 00:01:17.690
And ight at the bottom here,

19
00:01:17.690 --> 00:01:21.930
you can see we've got like begin main
thread solution, end main thread solution.

20
00:01:21.930 --> 00:01:23.970
If we were to do some
performance analysis and

21
00:01:23.970 --> 00:01:27.430
track down exactly where the problem
is happening, it is on line 93,

22
00:01:27.430 --> 00:01:32.940
it is that QR decode call and
is what's taking 20 seconds.

23
00:01:32.940 --> 00:01:33.810
That function call,

24
00:01:33.810 --> 00:01:37.110
it because in JavaScript like
functions run to completion,

25
00:01:39.050 --> 00:01:44.110
that's gonna go as long it has synchronous
work to do and it has a lot of it.

26
00:01:44.110 --> 00:01:46.659
Just think of it like the biggest for
loop that you've ever seen.

27
00:01:46.659 --> 00:01:51.364
There's nothing to, let it rest up and
draw another frame and

28
00:01:51.364 --> 00:01:52.999
allow you to scroll.

29
00:01:52.999 --> 00:01:57.599
So we're going to begin
our parallel solution.

30
00:01:57.599 --> 00:02:02.009
And we can just start that on line 95, cuz
eventually we're gonna end up moving it

31
00:02:02.009 --> 00:02:05.440
over, moving the stuff between
the comments into the worker.

32
00:02:05.440 --> 00:02:07.610
So let's create a new worker.

33
00:02:07.610 --> 00:02:12.670
And this can be let worker equal new

34
00:02:12.670 --> 00:02:17.950
worker and pass in,
I think it's QR-worker.js.

35
00:02:21.210 --> 00:02:22.820
I think either would have worked,
but you're good.

36
00:02:24.650 --> 00:02:29.874
All right, and what I'd like to
do now is I'd like to just send

37
00:02:29.874 --> 00:02:35.510
the workers something and
verify that I can catch it in the worker.

38
00:02:35.510 --> 00:02:41.486
So let's do worker.postmessage,
&gt;&gt; Mike North: And let's

39
00:02:41.486 --> 00:02:47.420
send it the image buffer that something
pass as an argument to on QR codes again.

40
00:02:47.420 --> 00:02:51.082
This is really the main piece
of data that we need, so

41
00:02:51.082 --> 00:02:56.662
if we were to study what's between the
comments there, image buffer is the only

42
00:02:56.662 --> 00:03:01.624
thing that comes from the outside,
you need to run that block of code.

43
00:03:01.624 --> 00:03:08.440
And then, let's save this file,
go over to the worker script.

44
00:03:08.440 --> 00:03:13.670
And in here,
we're gonna do self.onmessage.

45
00:03:13.670 --> 00:03:19.320
Self is almost like in a worker scope,
self, you can think of it like window.

46
00:03:19.320 --> 00:03:24.160
So it is a good practice,
window has always been this mysterious

47
00:03:24.160 --> 00:03:28.570
thing where anything that's on
window that's available as a global.

48
00:03:28.570 --> 00:03:33.220
I don't like that personally I'd
like to know where things come from.

49
00:03:33.220 --> 00:03:35.940
And so I always write self.onmessage.

50
00:03:35.940 --> 00:03:39.670
I think you could also just write on
message equals and it would work.

51
00:03:39.670 --> 00:03:43.631
The value of this property is going to
be a function that receives an event.

52
00:03:46.300 --> 00:03:52.267
&gt;&gt; Mike North: So it's gonna be on
message equals I wish it were this Steve,

53
00:03:52.267 --> 00:03:54.966
bu, [LAUGH] perfect arrow.

54
00:03:54.966 --> 00:03:59.370
And the first thing we'll do in here,

55
00:03:59.370 --> 00:04:04.197
I just wanna console.log event.data.

56
00:04:04.197 --> 00:04:10.140
All right, and go back to your QR code
JS comment out the sink solution.

57
00:04:10.140 --> 00:04:12.050
And we're gonna see how this thing works.

58
00:04:12.050 --> 00:04:13.911
&gt;&gt; Steve: The entire of it or?

59
00:04:13.911 --> 00:04:14.882
&gt;&gt; Mike North: Yes.

60
00:04:20.465 --> 00:04:21.313
&gt;&gt; Mike North: Great.

61
00:04:24.551 --> 00:04:26.700
&gt;&gt; Mike North: And now,
let's hit this QR code button.

62
00:04:26.700 --> 00:04:28.270
Did a refresh, Steve?

63
00:04:28.270 --> 00:04:29.710
&gt;&gt; Steve: I did not see it.

64
00:04:29.710 --> 00:04:31.250
&gt;&gt; Mike North: All code is defined,
that's fine.

65
00:04:31.250 --> 00:04:33.370
Do a hard refresh.

66
00:04:34.750 --> 00:04:35.830
Great, all right.

67
00:04:35.830 --> 00:04:37.360
Hit the QR code button on the top.

68
00:04:39.490 --> 00:04:44.770
And, [LAUGH] all right,
that's fine, that will work.

69
00:04:46.440 --> 00:04:48.250
Okay, so there's image data.

70
00:04:48.250 --> 00:04:49.655
We've successfully logged it out.

71
00:04:49.655 --> 00:04:53.663
Now you see that little violation
call back or violation warning there,

72
00:04:53.663 --> 00:04:58.470
that's telling us that even active reading
this huge file which is over 3 megabytes.

73
00:04:58.470 --> 00:05:01.750
That blew our budget for
our 13 milliseconds,

74
00:05:01.750 --> 00:05:06.580
so like a further optimization
we would begin to address that.

75
00:05:06.580 --> 00:05:09.910
We might have one worker read the file and

76
00:05:09.910 --> 00:05:14.070
then pass the file back to
the application thread,

77
00:05:14.070 --> 00:05:18.990
which would do an adjustment and then
say now decode it, something like that.

78
00:05:20.440 --> 00:05:23.600
In the meantime,
we actually know we're good to go.

79
00:05:23.600 --> 00:05:27.070
So let's go over to our QR worker JS.

80
00:05:27.070 --> 00:05:32.046
Actually, before you go, grab all that
stuff you have highlighted there,

81
00:05:32.046 --> 00:05:36.884
copy to the clipboard, go to QR worker,
paste it right where you're at.

82
00:05:38.647 --> 00:05:40.240
&gt;&gt; Mike North: And uncomment it.

83
00:05:40.240 --> 00:05:41.490
And then we're gonna need to go and

84
00:05:41.490 --> 00:05:44.928
grab that QR code import from
the other place where it used to be.

85
00:05:44.928 --> 00:05:50.890
I got my ultra annoying linting
rules there, there you go.

86
00:05:50.890 --> 00:05:55.820
So that's now an unused import,
and what Steve's doing right now,

87
00:05:55.820 --> 00:06:00.410
moving this into the worker,
he's reducing the size of the main

88
00:06:00.410 --> 00:06:04.069
application considerably
from 80KB to 60KB.

89
00:06:04.069 --> 00:06:10.950
And now we have to import one thing
that QR code string to object.

90
00:06:10.950 --> 00:06:16.140
So I deliberately put that function
there on line 11 to demonstrate like you

91
00:06:16.140 --> 00:06:21.090
can have modules in your application where
your worker needs one function from it and

92
00:06:21.090 --> 00:06:24.900
your application needs another
function from it, this is fine.

93
00:06:24.900 --> 00:06:26.486
This works just fine.

94
00:06:26.486 --> 00:06:31.060
So let's below that line
on line two do import and

95
00:06:31.060 --> 00:06:37.740
them a named import QR code
string to object, perfect.

96
00:06:37.740 --> 00:06:42.890
From I think it's dot slash.

97
00:06:42.890 --> 00:06:44.830
Wait where is this file, it's in client.

98
00:06:44.830 --> 00:06:46.730
Dot slash util slash QR code.

99
00:06:49.740 --> 00:06:52.520
All right, that should work

100
00:06:52.520 --> 00:06:55.279
as long as your js there is not
gonna make something that unhappy.

101
00:06:56.470 --> 00:06:57.580
&gt;&gt; Steve: It's very angry.

102
00:06:57.580 --> 00:06:58.150
&gt;&gt; Mike North: Yeah, yeah.

103
00:06:58.150 --> 00:06:59.586
Hard refresh.

104
00:07:01.953 --> 00:07:03.790
&gt;&gt; Mike North: And
now let's try the QR code.

105
00:07:07.810 --> 00:07:11.220
Now try to reference error
requires not defined.

106
00:07:11.220 --> 00:07:12.246
Interesting.

107
00:07:14.774 --> 00:07:16.140
&gt;&gt; Mike North: Why are we using a require?

108
00:07:17.464 --> 00:07:18.040
Us.

109
00:07:20.860 --> 00:07:23.070
&gt;&gt; Steve: I'm gonna guess it's babble.

110
00:07:25.940 --> 00:07:26.500
Okay.

111
00:07:28.720 --> 00:07:29.920
&gt;&gt; Mike North: I know the problem here.

112
00:07:29.920 --> 00:07:34.080
Go back to your index.js, so we're
using something called the file loader.

113
00:07:34.080 --> 00:07:38.400
And this is just like a A dumb thing that
we can use for images, any kind of file.

114
00:07:38.400 --> 00:07:41.080
I said dumb,
in that it doesn't care what the file is.

115
00:07:41.080 --> 00:07:42.800
Let's change it to the worker loader.

116
00:07:42.800 --> 00:07:49.000
And what that's gonna do, it will
actually process through this file and

117
00:07:49.000 --> 00:07:54.080
resolve any imports, and go and
bring in the appropriate stuff.

118
00:07:54.080 --> 00:07:57.290
So now it should work,
let's see if we can make it work.

119
00:07:57.290 --> 00:08:01.208
In image buffer is not defined.

120
00:08:01.208 --> 00:08:06.370
All right, the last thing that we need
to do here grab that event dot data

121
00:08:06.370 --> 00:08:10.590
that's below line five,
say let image buffer equal events.data.

122
00:08:15.860 --> 00:08:16.489
Great.

123
00:08:21.350 --> 00:08:22.364
&gt;&gt; Mike North: There we go.

124
00:08:22.364 --> 00:08:25.260
All right, and there's still something
we're gonna have to fix here.

125
00:08:25.260 --> 00:08:28.020
So I'm confident that we're
gonna get pretty far here.

126
00:08:29.280 --> 00:08:32.340
Line 14, we've got a resolve.

127
00:08:32.340 --> 00:08:36.830
We're not in the context of the promise
that this code used to live in.

128
00:08:36.830 --> 00:08:42.710
But the equivalent, the old school
pre-promises being part of JavaScript

129
00:08:42.710 --> 00:08:46.620
thing to do here would be to send
a message back to whatever created us.

130
00:08:46.620 --> 00:08:52.359
And that is done, so we're gonna replace
that line with a self.postMessage.

131
00:08:54.610 --> 00:08:57.780
And we're gonna pass
the result in as the message.

132
00:08:57.780 --> 00:09:02.960
And I actually like passing it in
under a top level key like data, so

133
00:09:02.960 --> 00:09:08.660
that we can just say like,
if data is in this object

134
00:09:08.660 --> 00:09:13.900
like if there is a truthy value for
data we know we're in a good situation.

135
00:09:13.900 --> 00:09:16.840
We can easily switch between error and
data.

136
00:09:16.840 --> 00:09:18.590
We should be good here now and

137
00:09:18.590 --> 00:09:22.960
if we go back to QR code JS
still all the way at the bottom.

138
00:09:25.330 --> 00:09:29.622
All right, so after we line 96
we're resented the image buffer,

139
00:09:29.622 --> 00:09:33.860
immediately thereafter now we're
gonna do worker.onmessage.

140
00:09:35.947 --> 00:09:38.946
&gt;&gt; Mike North: And
we're gonna say worker.onmessage

141
00:09:38.946 --> 00:09:41.852
equals,
&gt;&gt; Mike North: A function

142
00:09:41.852 --> 00:09:43.160
that takes an event.

143
00:09:44.420 --> 00:09:48.260
And event.data is what
we're interested in.

144
00:09:48.260 --> 00:09:50.850
And we're going to resolve
the promise with event.data.

145
00:09:54.249 --> 00:09:57.491
&gt;&gt; Mike North: All right,
let's see if we've nailed this one.

146
00:10:01.120 --> 00:10:04.593
&gt;&gt; Mike North: No more warnings,
hit it and

147
00:10:04.593 --> 00:10:12.070
enter,
&gt;&gt; Mike North: I

148
00:10:12.070 --> 00:10:19.590
need a badge to show up on the cart,
cannot read property to fixed.

149
00:10:19.590 --> 00:10:24.839
Let's see, what is going on here?

150
00:10:24.839 --> 00:10:30.106
Image data each child in array
iterates should have a unique key.

151
00:10:30.106 --> 00:10:31.554
&gt;&gt; Steve: That's a warning.

152
00:10:31.554 --> 00:10:34.855
I think this is our bigger concern.

153
00:10:34.855 --> 00:10:36.198
&gt;&gt; Mike North: Two fixed of undefined.

154
00:10:41.231 --> 00:10:46.619
&gt;&gt; Mike North: Can we log the QR
data before we, yep, perfect.

155
00:10:59.879 --> 00:11:02.820
&gt;&gt; Mike North: All right, it's decoding,
it's decoding, it's decoding.

156
00:11:05.590 --> 00:11:10.750
&gt;&gt; Mike North: And scroll up see where
we're at, there's is the object.

157
00:11:10.750 --> 00:11:15.572
We have to resolve with the property data,
so we wrapped it in this

158
00:11:15.572 --> 00:11:20.454
object under the top level key, and we're-
&gt;&gt; Steve: I think event.data.data

159
00:11:20.454 --> 00:11:21.261
in this case.

160
00:11:21.261 --> 00:11:21.908
&gt;&gt; Mike North: Yeah.

161
00:11:25.410 --> 00:11:26.180
&gt;&gt; Mike North: Interesting.

162
00:11:27.240 --> 00:11:28.750
&gt;&gt; Steve: So it's the data of the event.

163
00:11:28.750 --> 00:11:31.849
&gt;&gt; Mike North: Sure,
that's right, that's right.

164
00:11:31.849 --> 00:11:33.960
Okay, we've poorly chosen
our top level key.

165
00:11:33.960 --> 00:11:38.330
Event.data is where we'll find
the message that we sent.

166
00:11:38.330 --> 00:11:40.530
And that message has
a top level key of data,

167
00:11:40.530 --> 00:11:42.870
which is why I have to do data twice.

168
00:11:42.870 --> 00:11:46.304
We might choose to in this case
use result, something like that.

169
00:11:46.304 --> 00:11:48.329
[SOUND] There we go.

170
00:11:48.329 --> 00:11:50.950
We've got a badge on our cart.

171
00:11:50.950 --> 00:11:53.030
And if we open that up,
we should be able to see,

172
00:11:53.030 --> 00:11:55.430
like click on the cart icon,
there's our banana.

173
00:11:57.350 --> 00:12:01.790
So now,
we have offloaded this onto a worker.

174
00:12:01.790 --> 00:12:05.750
So Steve if you would please
open up the terminal with

175
00:12:05.750 --> 00:12:10.388
like a command tilde or something,
command backtick, perfect.

176
00:12:10.388 --> 00:12:17.989
Kill that, and
then do analyze equals true.

177
00:12:19.882 --> 00:12:23.479
&gt;&gt; Mike North: NPM run build:prod.

178
00:12:23.479 --> 00:12:28.100
So we started out at 80 kilobytes, and
I want us to now study where we're at.

179
00:12:28.100 --> 00:12:31.159
We're supposed to be keeping
track of how we progress here.

180
00:12:31.159 --> 00:12:34.552
This is gonna pop open in just a moment,
that nice tree graph,

181
00:12:34.552 --> 00:12:37.901
where we can see the size of our app and
how it's broken down.

182
00:12:37.901 --> 00:12:43.166
And what I want you to realize is if we
hover over app.js all the way at the top,

183
00:12:43.166 --> 00:12:47.390
it's clickable cool,
we're now at 64.99 kilobytes.

184
00:12:47.390 --> 00:12:50.416
So we went on a 15 kilobyte diet there,

185
00:12:50.416 --> 00:12:54.070
which is a big deal when
you're 80 kilobytes.

186
00:12:54.070 --> 00:12:59.319
I mean that is let's call it pretty
close to a fifth of the size of our app.

187
00:12:59.319 --> 00:13:05.130
And if you hear about this terminology
like route splitting or code splitting.

188
00:13:05.130 --> 00:13:10.240
This is in spirit is that same idea,
meaning until the user actually

189
00:13:10.240 --> 00:13:15.180
goes to that QR code feature, picks
an image, that image is the file that can

190
00:13:15.180 --> 00:13:18.550
actually be read, it's not like
there are any permissions problems.

191
00:13:18.550 --> 00:13:24.580
Only when we get to the point where
we've read it into this image buffer.

192
00:13:24.580 --> 00:13:29.480
Do we pay the price for downloading that
QR code library performing that work.

193
00:13:30.610 --> 00:13:35.480
So as opposed to just the act of
viewing the root screen of the app

194
00:13:35.480 --> 00:13:38.940
being the thing that causes
us to pay the price.

195
00:13:38.940 --> 00:13:39.780
&gt;&gt; Steve: To put it another way,

196
00:13:39.780 --> 00:13:43.060
like there's a huge chance that a user
is going to visit this page and

197
00:13:43.060 --> 00:13:47.000
never use the QR code feature
like most people and QR codes.

198
00:13:47.000 --> 00:13:49.830
And so why download that 15 kilobytes?

199
00:13:49.830 --> 00:13:53.220
Why download HCS as a payload
that's gonna take time to download,

200
00:13:53.220 --> 00:13:56.800
that's gonna take time to parse, that's
gonna move us between time to interactive,

201
00:13:56.800 --> 00:13:58.610
basically doing all this stuff.

202
00:13:58.610 --> 00:14:01.770
Right, we can just only get
that file if we need it.

203
00:14:01.770 --> 00:14:05.890
&gt;&gt; Mike North: Yep, so in summary, we've
taking something off the main thread.

204
00:14:07.030 --> 00:14:11.490
We have reduced the size of our app.

205
00:14:11.490 --> 00:14:14.270
We have allowed our app,

206
00:14:14.270 --> 00:14:16.770
our user to continue doing
whatever they were gonna do.

207
00:14:16.770 --> 00:14:21.130
They could have added three more items and
then the QR reading [INAUDIBLE] and

208
00:14:21.130 --> 00:14:22.930
it comes back and
it gets added to the cart.

209
00:14:25.090 --> 00:14:31.200
A question that a classic web developer
might be asking at this point is,

210
00:14:31.200 --> 00:14:33.660
why on earth would we have
a client doing this work?

211
00:14:34.840 --> 00:14:38.244
There are probably a hundred
libraries that we could use

212
00:14:38.244 --> 00:14:43.182
to have a our little Node.js API
doing the work to take this image,

213
00:14:43.182 --> 00:14:45.790
like am image upload and
it's gonna do its work.

214
00:14:45.790 --> 00:14:49.990
And it's gonna send it back and we would
not have to do all of these backflips.

215
00:14:49.990 --> 00:14:52.683
Well, when we're building
progressive web apps,

216
00:14:52.683 --> 00:14:55.080
we want this to be treated
like a thick client.

217
00:14:55.080 --> 00:14:57.928
And if a server is responsible for
doing that,

218
00:14:57.928 --> 00:15:00.930
now it does not work when it's offline,
right?

219
00:15:00.930 --> 00:15:04.383
So if you're building like
a progressive web delta app and

220
00:15:04.383 --> 00:15:09.033
you wanna be able to scan like snack
items, and then flush them through later,

221
00:15:09.033 --> 00:15:13.990
it's like we reconcile against credit
card information that's been collected.

222
00:15:13.990 --> 00:15:18.684
You want as much of that
to be transformed from raw

223
00:15:18.684 --> 00:15:23.160
data to refined data on
that device as you can.

224
00:15:23.160 --> 00:15:25.570
You want the client to be a sort
of a fully functional thing.

225
00:15:26.780 --> 00:15:30.380
As opposed to like outsourcing it
to a server at which point like

226
00:15:30.380 --> 00:15:35.620
when you're offline tough luck or the work
best we can do is hold onto the image.

227
00:15:35.620 --> 00:15:40.190
And raw images shot by phones these
days are like eight megabytes.

228
00:15:40.190 --> 00:15:41.750
So good luck with that.

229
00:15:41.750 --> 00:15:45.090
You can hold like three before
your browser will start

230
00:15:45.090 --> 00:15:48.250
pushing the oldest ones out.

231
00:15:48.250 --> 00:15:52.220
So I hope this sheds some light on
the fact that this is not that hard.

232
00:15:52.220 --> 00:15:53.760
We've wrapped it in a promise.

233
00:15:53.760 --> 00:15:56.329
We didn't have to touch
other parts of the app.

234
00:15:56.329 --> 00:16:02.917
It illustrates the power of a promise,
it illustrates how web workers,

235
00:16:02.917 --> 00:16:07.237
they have a little bit of
an antiquated API, but

236
00:16:07.237 --> 00:16:10.809
they're still incredibly powerful.

237
00:16:10.809 --> 00:16:14.484
The idea of paralyzing anything
that is hard work like this,

238
00:16:14.484 --> 00:16:18.600
other candidates would be like
Big CSV parsing on the string.

239
00:16:18.600 --> 00:16:22.230
And you can do client-side
gzip compression, right?

240
00:16:22.230 --> 00:16:25.480
So if you've got users uploading
a big text document and

241
00:16:25.480 --> 00:16:29.100
you wanna compress it on
the client because it maybe that

242
00:16:29.100 --> 00:16:34.030
network connection is very limited but
your device is reasonably powerful,

243
00:16:34.030 --> 00:16:38.880
like let's get that shrunk down
before we start using expensive data.

244
00:16:38.880 --> 00:16:42.600
So a lot of applications here and
people rarely reach for it.

245
00:16:42.600 --> 00:16:44.730
So I hope this gives you
the confidence to try it out.

