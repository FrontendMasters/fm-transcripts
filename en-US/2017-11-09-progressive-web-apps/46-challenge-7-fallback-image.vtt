WEBVTT

1
00:00:00.430 --> 00:00:04.390
&gt;&gt; Steve Kinney: So what we're gonna
implement is a fallback image.

2
00:00:04.390 --> 00:00:11.340
In this case, we might wanna say, hey,
go to the network, get me a given image,

3
00:00:11.340 --> 00:00:14.940
right, maybe The Beatles, maybe Oasis or
something along those lines.

4
00:00:14.940 --> 00:00:22.760
And if you cannot do that,
then I have this image for you.

5
00:00:22.760 --> 00:00:24.400
And this is a really good use case of,

6
00:00:24.400 --> 00:00:30.120
we might use this if we were building
a social media app or web insecurity app.

7
00:00:30.120 --> 00:00:35.060
We could theoretically have,
go get me this user's avatar, but

8
00:00:35.060 --> 00:00:39.480
if you can't,
here's that silhouette of a person.

9
00:00:39.480 --> 00:00:42.720
Right, and so if they are offline, and
in a perfect world we would have cached

10
00:00:42.720 --> 00:00:44.880
that user's avatar last
time we were online, but

11
00:00:44.880 --> 00:00:46.790
let's assume in this case that we haven't.

12
00:00:46.790 --> 00:00:50.310
We could say, go in,
see if you can get it.

13
00:00:50.310 --> 00:00:55.510
If you can't,
fall back to this other image, right?

14
00:00:55.510 --> 00:00:58.670
So going back, last time in that
glitch that we just looked at,

15
00:00:58.670 --> 00:01:03.290
we took a look at anything
massive beetles URL, right?

16
00:01:03.290 --> 00:01:08.272
In that case, we,
&gt;&gt; Steve Kinney: Said if you match that

17
00:01:08.272 --> 00:01:14.200
we're gonna go ahead and fetch
the oasis one and send it back to you.

18
00:01:14.200 --> 00:01:18.470
In this case, what we probably wanna
do is when this service worker loads,

19
00:01:18.470 --> 00:01:22.650
we likely want to add that
fallback image which is

20
00:01:22.650 --> 00:01:27.680
located at localhost:3100
/images/genericfallaback,.jpg.

21
00:01:27.680 --> 00:01:30.070
Let's store that in our cache, right?

22
00:01:30.070 --> 00:01:31.690
As soon as the service work installs.

23
00:01:33.440 --> 00:01:39.010
Then, if we make a request and
that fetch fails, right,

24
00:01:39.010 --> 00:01:42.570
but catch, right, cuz we know that fetches
only fail when there's a network error.

25
00:01:43.710 --> 00:01:49.022
Okay, why don't we respond
with going into the cache and

26
00:01:49.022 --> 00:01:52.681
getting that generic fallback image?

27
00:01:55.461 --> 00:02:00.049
&gt;&gt; Steve Kinney: Some little helpful
hints is you can't really just do it for

28
00:02:00.049 --> 00:02:01.800
everything, right?

29
00:02:01.800 --> 00:02:05.290
Cuz they requested JavaScript
here is the fallback image,

30
00:02:05.290 --> 00:02:08.980
that's not really a method for
happiness in your application.

31
00:02:08.980 --> 00:02:12.620
So again, this highlights the fact that
we have problematic access, right?

32
00:02:12.620 --> 00:02:16.770
We can take a look at the request,
we can see what it accepts, right?

33
00:02:16.770 --> 00:02:22.643
And images one of the request headers
is they accept image/ star/ PNG,

34
00:02:22.643 --> 00:02:24.190
JPEG, whatever.

35
00:02:25.430 --> 00:02:29.960
And if it's located in the image directory
for our assets we now know this is

36
00:02:29.960 --> 00:02:34.350
a probably a grocery item cuz that's just
the way the application is structured.

37
00:02:34.350 --> 00:02:36.600
Then that's where we can step in,

38
00:02:36.600 --> 00:02:40.800
figure out getting from the cache
something along those lines, right?

39
00:02:40.800 --> 00:02:42.760
So this is here for you as well.

40
00:02:42.760 --> 00:02:46.660
If you have the slides
open in a browser tab,

41
00:02:46.660 --> 00:02:49.210
just make sure that you refresh them
cuz we have updated them since then.

42
00:02:49.210 --> 00:02:52.900
If you don't see this slide,
just refresh and you will see it.

43
00:02:52.900 --> 00:02:57.879
But your mission,
&gt;&gt; Steve Kinney: We want to ideally store

44
00:02:57.879 --> 00:02:59.670
a fallback image.

45
00:02:59.670 --> 00:03:07.200
In the cache, when a network request
comes in, if we can't get to the image,

46
00:03:07.200 --> 00:03:10.730
we will go to the cache, get the fallback
image and send them that instead.

47
00:03:12.790 --> 00:03:15.420
If you want to test what it's
like to have no internet,

48
00:03:15.420 --> 00:03:17.640
you could theoretically turn off WiFi.

49
00:03:17.640 --> 00:03:22.050
That will work, if you go into
the application tab and service worker,

50
00:03:22.050 --> 00:03:27.650
right next to that update and
reload there is also an offline

51
00:03:27.650 --> 00:03:31.320
check box which will,
the rest of your internet work.

52
00:03:31.320 --> 00:03:35.230
But it will just tell Chrome at this
moment pretend I don't have internet.

