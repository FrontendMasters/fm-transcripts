WEBVTT

1
00:00:00.290 --> 00:00:04.410
&gt;&gt; Mike North: So looking at the code, the
first thing that we're going to need to do

2
00:00:04.410 --> 00:00:08.250
is, we could either look to the place
where I've told you you could find your

3
00:00:08.250 --> 00:00:15.220
vapid keys, which is in the private
folder, at this vapid.json file.

4
00:00:15.220 --> 00:00:18.160
Or you could import this
as a JavaScript module, and

5
00:00:18.160 --> 00:00:22.670
that's actually how we're
going to go about doing this.

6
00:00:23.700 --> 00:00:29.250
So we typically wanna ask for
permissions to send the users

7
00:00:29.250 --> 00:00:33.750
push messages at around the same place
we're registering the service worker.

8
00:00:33.750 --> 00:00:37.140
In this case, it's in app.jsx.

9
00:00:37.140 --> 00:00:41.900
We can import the the VAPID
keys just like this.

10
00:00:47.549 --> 00:00:51.601
&gt;&gt; Mike North: So you can import JSON
files just like you can import JavaScript

11
00:00:51.601 --> 00:00:52.650
files.

12
00:00:52.650 --> 00:00:56.339
So now that object has on it
the private and public key.

13
00:00:58.400 --> 00:01:02.758
&gt;&gt; Mike North: And we can then,
the next thing we need is this

14
00:01:02.758 --> 00:01:07.502
function that I handed you for
free, no charge.

15
00:01:07.502 --> 00:01:12.495
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Mike North: The one that converts

16
00:01:12.495 --> 00:01:16.599
the base 64 string into an integer array.

17
00:01:19.424 --> 00:01:20.749
&gt;&gt; Mike North: Let me just
find that real quick.

18
00:01:23.690 --> 00:01:24.539
&gt;&gt; Mike North: There we go.

19
00:01:25.801 --> 00:01:29.367
&gt;&gt; Mike North: So
we're gonna add that down here, or no,

20
00:01:29.367 --> 00:01:34.829
I think index.js is where we're
doing our service order stuff.

21
00:01:36.480 --> 00:01:37.990
There we go, perfect.

22
00:01:37.990 --> 00:01:39.510
So we'll add that function here.

23
00:01:40.700 --> 00:01:47.475
We can get rid of this VAPID import,
and put it here.

24
00:01:49.328 --> 00:01:50.210
&gt;&gt; Mike North: We've already got one.

25
00:01:53.520 --> 00:01:59.290
And now, we have to kinda deal with
our service worker registration here.

26
00:01:59.290 --> 00:02:03.540
So we've got it here,
it's been unused this whole time, and

27
00:02:03.540 --> 00:02:05.550
now we can finally do something with it.

28
00:02:05.550 --> 00:02:08.355
So we're gonna say return

29
00:02:08.355 --> 00:02:16.070
registration.pushManager.subscribe, and

30
00:02:16.070 --> 00:02:21.960
we'll pass in subscribeOptions, then
we'll flesh that object out in a moment.

31
00:02:23.310 --> 00:02:30.026
Just put it up here for the time being,
let subscribeOptions = empty object,

32
00:02:30.026 --> 00:02:36.660
and this thing returns a promise-
&gt;&gt; Mike North: Which

33
00:02:36.660 --> 00:02:39.509
resolves to a pushSubscription.

34
00:02:41.580 --> 00:02:45.010
&gt;&gt; Mike North: And what we wanna do with
that subscription is send it to our API.

35
00:02:45.010 --> 00:02:49.918
So we're gonna return a fetch
to the API end point that we

36
00:02:49.918 --> 00:02:52.224
have in the example here.

37
00:02:58.546 --> 00:03:00.925
&gt;&gt; Mike North: This is gonna be a post,
and

38
00:03:00.925 --> 00:03:06.004
we need to pass our JSON content
type header along with it.

39
00:03:13.543 --> 00:03:17.372
&gt;&gt; Mike North: Okay, and so now this
fetch should succeed, we need the body,

40
00:03:17.372 --> 00:03:18.105
of course.

41
00:03:20.895 --> 00:03:25.086
&gt;&gt; Mike North: And
we don't need to wrap this object in

42
00:03:25.086 --> 00:03:29.540
that data key as with the other requests.

43
00:03:29.540 --> 00:03:32.660
This one,
we can just pass straight through.

44
00:03:32.660 --> 00:03:38.050
And once this fetch is complete,
we should be good to go.

45
00:03:38.050 --> 00:03:42.450
So let's see if this works.

46
00:03:44.310 --> 00:03:47.629
We're going to stop our API and
restart it.

47
00:03:55.320 --> 00:04:01.649
&gt;&gt; Mike North: And we should see, when our
UI starts, a new record being created.

48
00:04:08.070 --> 00:04:10.500
&gt;&gt; Mike North: Let's see
what's going on here.

49
00:04:13.920 --> 00:04:15.489
&gt;&gt; Mike North: Interesting.

50
00:04:18.430 --> 00:04:20.480
&gt;&gt; Mike North: I don't think
I touched that kind of file.

51
00:04:20.480 --> 00:04:23.210
Let's see.
Do not touch a CSS file.

52
00:04:27.729 --> 00:04:30.250
&gt;&gt; Mike North: Let me just try
cleaning my build and starting over.

53
00:04:32.290 --> 00:04:34.530
&gt;&gt; Mike North: Let's just
look at this real carefully.

54
00:04:34.530 --> 00:04:35.378
It's a semicolon.

55
00:04:35.378 --> 00:04:38.264
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Mike North: Good old webpack,

56
00:04:38.264 --> 00:04:40.696
that is not useful feedback.

57
00:04:40.696 --> 00:04:42.526
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Mike North: Sorry, Sean.

58
00:04:42.526 --> 00:04:48.444
So now, we should,
when the new service worker takes control,

59
00:04:48.444 --> 00:04:56.100
let me make sure that I've got my
notification permissions turned off.

60
00:04:56.100 --> 00:05:00.250
Cuz last night,
I was going through this, and it

61
00:05:01.470 --> 00:05:05.710
probably still held the old state here.

62
00:05:05.710 --> 00:05:10.740
Let's see,
we're not using this URL to base 64 array.

63
00:05:10.740 --> 00:05:14.540
Let me make sure I use that properly,
we need our subscribe options,

64
00:05:14.540 --> 00:05:15.870
that's the last thing.

65
00:05:15.870 --> 00:05:20.358
So here, user visible only, true, and

66
00:05:20.358 --> 00:05:25.111
then we've got application server key and

67
00:05:25.111 --> 00:05:29.479
the value of that is the url to bay 64.

68
00:05:33.304 --> 00:05:40.275
&gt;&gt; Mike North: Array, and
we're gonna pass in VAPID.publicKey.

69
00:05:44.590 --> 00:05:45.460
&gt;&gt; Mike North: There we go,

70
00:05:45.460 --> 00:05:50.400
it is asking us, do we have
permission to give you notifications?

71
00:05:50.400 --> 00:05:52.209
So I'm just gonna clear this out here.

72
00:05:55.627 --> 00:05:58.943
&gt;&gt; Mike North: Clear, allow, okay, and

73
00:05:58.943 --> 00:06:03.760
we just persisted this thing here.

74
00:06:03.760 --> 00:06:06.040
So we've now got a course subscription.

75
00:06:07.630 --> 00:06:13.110
What I'm gonna do with that is
I just wanna save it for later.

76
00:06:13.110 --> 00:06:17.670
I'm ready to open up another text editor
just, or I can just do another tab.

77
00:06:20.940 --> 00:06:23.890
&gt;&gt; Mike North: Because I want
some of those values there for

78
00:06:23.890 --> 00:06:26.880
manually sending a message.

79
00:06:26.880 --> 00:06:32.490
And I'm gonna go to my service worker
now and implement a push handler.

80
00:06:36.870 --> 00:06:38.044
&gt;&gt; Mike North: Do it right above fetch.

81
00:06:39.580 --> 00:06:43.950
&gt;&gt; Mike North: addEventListener, push,
and that's gonna receive an event.

82
00:06:43.950 --> 00:06:47.080
That's a push event,
it's a little bit different.

83
00:06:47.080 --> 00:06:51.793
And for now-
&gt;&gt; Mike North: We'll grab the data

84
00:06:51.793 --> 00:06:52.890
property off of it.

85
00:06:56.320 --> 00:07:00.123
&gt;&gt; Mike North: And
we're just gonna console.log(data.text).

86
00:07:01.900 --> 00:07:03.100
&gt;&gt; Mike North: We'll see what happens.

87
00:07:04.550 --> 00:07:11.072
So in our service worker tools here-
&gt;&gt; Mike North: In

88
00:07:11.072 --> 00:07:16.018
the application tab, we've got a button
that we haven't really been pressing,

89
00:07:16.018 --> 00:07:19.470
and it is the push button, so
this emulates a push event.

90
00:07:19.470 --> 00:07:21.469
So I should be able to
hit this three times.

91
00:07:22.820 --> 00:07:26.480
Go to My Console, and you can see
three times I got this message.

92
00:07:26.480 --> 00:07:29.310
So that's a great way of simulating that

93
00:07:29.310 --> 00:07:31.520
things are working the way
that you expect them to work.

94
00:07:32.740 --> 00:07:39.863
Now, let's make something
here that's like textData =

95
00:07:39.863 --> 00:07:45.660
data.text if text data

96
00:07:45.660 --> 00:07:52.120
equals terminate, we'll add our
service worker kill switch here.

97
00:07:52.120 --> 00:07:54.020
They don't really care about the promise.

98
00:07:55.730 --> 00:07:57.090
We're not really waiting for anything.

99
00:07:57.090 --> 00:07:59.976
We're just saying go away, service worker.

100
00:08:03.800 --> 00:08:08.062
&gt;&gt; Mike North: All right, so
now, I'm just gonna keep this

101
00:08:08.062 --> 00:08:13.610
application tab open so
we can see what's going on.

102
00:08:13.610 --> 00:08:17.260
And I'm gonna carefully build that little
command that we were looking at before.

103
00:08:19.010 --> 00:08:27.070
So here, well, let's just start with
the cheat sheet, here's my command.

104
00:08:28.070 --> 00:08:30.597
And the first thing I need is an endpoint,
and

105
00:08:30.597 --> 00:08:34.003
that's part of this push
subscription object, here it is.

106
00:08:38.151 --> 00:08:39.665
&gt;&gt; Mike North: Grab the whole thing.

107
00:08:42.589 --> 00:08:44.036
&gt;&gt; Mike North: So there's the endpoint.

108
00:08:47.629 --> 00:08:51.230
&gt;&gt; Mike North: And
then we need a key and an auth.

109
00:08:51.230 --> 00:08:56.770
So this is generally the key, and

110
00:08:56.770 --> 00:09:02.020
this describes an elliptical curve
encryption key generation algorithm here.

111
00:09:02.020 --> 00:09:05.760
It's just, if you're used to JSON Web
Tokens, maybe you've seen that before.

112
00:09:06.910 --> 00:09:08.600
And then we get the auth value.

113
00:09:10.230 --> 00:09:13.370
And there's our payload, we'll leave
that alone, we'll leave this alone, and

114
00:09:13.370 --> 00:09:15.300
then we'll just need the VAPID stuff.

115
00:09:16.620 --> 00:09:18.120
Grab that here.

116
00:09:18.120 --> 00:09:19.340
There's the public key.

117
00:09:22.999 --> 00:09:24.010
&gt;&gt; Mike North: And the private one.

118
00:09:26.270 --> 00:09:29.956
And by the time you watch this video,
this will be a useless key,

119
00:09:29.956 --> 00:09:33.180
before you try to get fresh
with my push notifications.

120
00:09:37.160 --> 00:09:40.195
&gt;&gt; Mike North: So we should be able to
run this command, and what I expect,

121
00:09:40.195 --> 00:09:44.262
if you look carefully, on the right side,
I expect all of those links there to go

122
00:09:44.262 --> 00:09:47.820
grayed out, indicating that
the service worker is unregistered.

123
00:09:47.820 --> 00:09:48.555
So let's run it here.

124
00:09:53.011 --> 00:09:54.090
&gt;&gt; Mike North: What went wrong?

125
00:09:55.450 --> 00:10:00.760
I need to change one little thing here,
mail two, and then it should work.

126
00:10:01.830 --> 00:10:07.160
Needs to be a url, a mail two url,
there we go, they just grayed out.

127
00:10:07.160 --> 00:10:10.070
I have programatically
killed my service worker.

128
00:10:10.070 --> 00:10:12.290
This is something you could do,
remotely you could do it for

129
00:10:12.290 --> 00:10:15.950
all of your users if you
have a widespread problem,

130
00:10:15.950 --> 00:10:19.660
kick yourself out of progressive
web mode and fall back.

131
00:10:19.660 --> 00:10:23.610
So, a very useful tool to use.

132
00:10:23.610 --> 00:10:28.550
And with that, I wanna push this up,
and then Steve is gonna take over and

133
00:10:28.550 --> 00:10:31.940
start talking about how we can
take what we’ve built here and

134
00:10:32.990 --> 00:10:37.790
kind of use it to show users notifications
even when our browser tab isn't open.

135
00:10:37.790 --> 00:10:38.540
&gt;&gt; Speaker 2: One question.

136
00:10:38.540 --> 00:10:40.330
&gt;&gt; Mike North: Yes?
&gt;&gt; Speaker 2: In the registration process,

137
00:10:40.330 --> 00:10:45.130
you sent an EPI to the 3100
EPI subscription or

138
00:10:45.130 --> 00:10:46.230
whatever push subscription.

139
00:10:46.230 --> 00:10:48.080
What was that for?

140
00:10:48.080 --> 00:10:52.524
&gt;&gt; Mike North: So
If we think about the flow again,

141
00:10:52.524 --> 00:10:56.354
the-
&gt;&gt; Mike North: Our back end,

142
00:10:56.354 --> 00:10:58.780
like we need to store these subscriptions.

143
00:10:58.780 --> 00:11:05.080
Those subscriptions are means of directing
a piece of data to a particular user.

144
00:11:05.080 --> 00:11:11.720
Think of it like a GUID or
an IMEI if you're used to mobile devices.

145
00:11:11.720 --> 00:11:15.610
That represents a particular browser
on a particular user's machine, and

146
00:11:15.610 --> 00:11:18.740
without that, we have no way of routing
that message to the correct place.

147
00:11:18.740 --> 00:11:21.760
So we just persisted it in our database.

148
00:11:21.760 --> 00:11:26.780
You might have in your data structures,
you could have a user account has

149
00:11:26.780 --> 00:11:32.710
many push credentials and one might be
their Firefox, one would be their Chrome.

150
00:11:33.850 --> 00:11:38.330
And you could iterate over all of them and
send a message simultaneously to whatever.

151
00:11:39.940 --> 00:11:43.360
So your back end needs that
is the important thing.

152
00:11:43.360 --> 00:11:44.610
The front end requests it.

153
00:11:44.610 --> 00:11:48.280
But once it has it,
you've got to send it to some server so

154
00:11:48.280 --> 00:11:50.760
that the server can use it to
push something to the client.

155
00:11:50.760 --> 00:11:54.660
&gt;&gt; Speaker 2: Okay, but in this scenario,
the back end was not sending actually any

156
00:11:54.660 --> 00:11:58.560
push event to the push service.

157
00:11:58.560 --> 00:12:01.340
Rather, we use,
we did that from command line.

158
00:12:01.340 --> 00:12:01.930
&gt;&gt; Mike North: Correct.

159
00:12:01.930 --> 00:12:02.510
So.

160
00:12:02.510 --> 00:12:03.820
&gt;&gt; Speaker 2: To notify ourselves.

161
00:12:03.820 --> 00:12:06.210
&gt;&gt; Mike North: Without spoiling too much,
let me do something else here.

162
00:12:06.210 --> 00:12:08.990
I'm gonna set a quick little break point.

163
00:12:08.990 --> 00:12:13.740
And we've got a push listener here.

164
00:12:13.740 --> 00:12:16.100
I'm gonna just set one there,
and I'm gonna check out.

165
00:12:24.369 --> 00:12:25.295
&gt;&gt; Mike North: Come on now.

166
00:12:27.151 --> 00:12:27.997
&gt;&gt; Mike North: Check out.

167
00:12:29.391 --> 00:12:30.317
&gt;&gt; Mike North: Yes.

168
00:12:34.370 --> 00:12:36.510
&gt;&gt; Mike North: So, you should see
notifications coming through.

169
00:12:41.210 --> 00:12:42.938
&gt;&gt; Mike North: Right,
am I in do not disturb again?

170
00:12:42.938 --> 00:12:44.592
God damn it.

171
00:12:53.270 --> 00:12:57.514
&gt;&gt; Mike North: One last little hack,
only cuz Steve will need this for

172
00:12:57.514 --> 00:13:01.492
the next section,
I wanna make sure that it works.

173
00:13:04.519 --> 00:13:05.830
&gt;&gt; Mike North: Unserve.

174
00:13:08.859 --> 00:13:10.280
&gt;&gt; Mike North: That would be the problem.

175
00:13:10.280 --> 00:13:16.930
I had two of these running.

176
00:13:16.930 --> 00:13:18.710
&gt;&gt; Mike North: Check out, yes.

177
00:13:33.820 --> 00:13:36.420
&gt;&gt; Mike North: I'm not sure why
this break point's not been hit.

178
00:13:37.630 --> 00:13:42.040
Is it possible that, yeah,
I changed the service for a code.

179
00:13:42.040 --> 00:13:46.206
And it wasn't stopping there.

180
00:13:53.348 --> 00:13:55.115
&gt;&gt; Mike North: Let me kill
the service worker, restart it,

181
00:13:55.115 --> 00:13:56.099
make sure that it works.

182
00:14:01.751 --> 00:14:05.116
&gt;&gt; Mike North: Clear this.

183
00:14:10.691 --> 00:14:12.051
&gt;&gt; Mike North: Check out, yes.

184
00:14:20.981 --> 00:14:22.983
&gt;&gt; Mike North: It doesn't
seem to be working.

185
00:14:26.250 --> 00:14:29.830
&gt;&gt; Mike North: So the idea is we should
be able to send these notifications.

186
00:14:29.830 --> 00:14:33.850
I think I can just take away
the VAPID stuff and it should work.

187
00:14:33.850 --> 00:14:34.659
There, that will do it.

188
00:14:41.869 --> 00:14:43.775
&gt;&gt; Mike North: Now it
will definitely work,

189
00:14:43.775 --> 00:14:46.911
I wasn't using the VAPID
key on the server side.

190
00:14:46.911 --> 00:14:49.790
I must have pulled down
my own changes there.

191
00:14:49.790 --> 00:14:51.400
So now checkout, yes.

192
00:15:01.040 --> 00:15:02.040
&gt;&gt; Mike North: There we go.

193
00:15:02.040 --> 00:15:03.630
So now we've got this data.

194
00:15:03.630 --> 00:15:05.740
Here's the push message data.

195
00:15:05.740 --> 00:15:10.320
This originated from our API as
a result of checking out, and

196
00:15:10.320 --> 00:15:14.130
it is using the exact same library,
just not the CLI utility for

197
00:15:14.130 --> 00:15:17.650
it, but same core mechanism.

