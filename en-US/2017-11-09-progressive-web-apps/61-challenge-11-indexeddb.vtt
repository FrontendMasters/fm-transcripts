WEBVTT

1
00:00:00.480 --> 00:00:04.130
&gt;&gt; Mike North: I'd like us to try to
do something a little bit quick and

2
00:00:04.130 --> 00:00:06.370
dirty with IndexedDb.

3
00:00:06.370 --> 00:00:09.040
Now, we've got some extra ground to cover,
and

4
00:00:09.040 --> 00:00:13.530
I don't wanna teach you out of some
of the later exercises we have today.

5
00:00:13.530 --> 00:00:18.120
So I would encourage you to just, to

6
00:00:19.330 --> 00:00:22.490
at least do the first half of this and
maybe not worry about the second half.

7
00:00:22.490 --> 00:00:27.130
I will certainly do it in the solution,
but there are two steps here.

8
00:00:28.998 --> 00:00:32.830
&gt;&gt; Mike North: So,
&gt;&gt; Mike North: Here's step one.

9
00:00:35.290 --> 00:00:38.610
In the activate handler,
actually I should correct this,

10
00:00:38.610 --> 00:00:41.990
the install handler would be a more
appropriate place to put this.

11
00:00:41.990 --> 00:00:50.520
I want you to populate an IndexDb object
store with all of the grocery items.

12
00:00:50.520 --> 00:00:53.050
So there are actually
way more grocery items

13
00:00:53.050 --> 00:00:55.290
available from this API than
you're seeing on the screen.

14
00:00:56.780 --> 00:01:01.900
And there's a way you can,
you can just add this query param to

15
00:01:01.900 --> 00:01:05.320
this particular API end point,
and you will get lots of them.

16
00:01:05.320 --> 00:01:08.509
You will get, currently, I think
you're only seeing ten per category.

17
00:01:08.509 --> 00:01:12.699
This will show you a lot more,
and the idea here is that,

18
00:01:12.699 --> 00:01:15.552
as part of the installation process,

19
00:01:15.552 --> 00:01:20.290
we want to kinda populate IndexedDB
with all of those records.

20
00:01:23.860 --> 00:01:29.334
And also keep in mind that when you're,
oftentimes when you say,

21
00:01:29.334 --> 00:01:35.393
I'm just going to go one step back,
when we say create object store here,

22
00:01:35.393 --> 00:01:40.771
that is how you would typically
use this on upgrade needed handler

23
00:01:40.771 --> 00:01:46.360
here to ensure that stores exist
even if they're not found.

24
00:01:46.360 --> 00:01:48.830
So this would be a great
example to start from,

25
00:01:48.830 --> 00:01:52.071
along with the IDB
documentation on GitHub.

26
00:01:53.590 --> 00:01:59.310
So that's phase one, just to get
that IndexedDB populated with stuff.

27
00:02:00.830 --> 00:02:06.690
Phase two is gonna sort of unleash
the power of having that data there.

28
00:02:06.690 --> 00:02:11.470
So there are many, many grocery items
available from this API, and currently,

29
00:02:11.470 --> 00:02:16.190
we have this fallback image we use
in the event that we hit a 404.

30
00:02:16.190 --> 00:02:20.700
Because IndexedDb is available inside
our service worker, we can actually,

31
00:02:20.700 --> 00:02:23.540
in the event we find we
need a fallback image,

32
00:02:23.540 --> 00:02:29.570
we can use that URL to figure out which
item ID that image corresponds to.

33
00:02:29.570 --> 00:02:34.340
And we can look to IndexedDb to figure out
that, that is of the fruit category or

34
00:02:34.340 --> 00:02:35.940
of the vegetable category.

35
00:02:35.940 --> 00:02:39.170
That is why we have all of those
other fallback images there.

36
00:02:39.170 --> 00:02:44.070
So when I go through the solution, I wanna
actually not just populate the database,

37
00:02:44.070 --> 00:02:50.560
but I will use that information so that we
have category specific fallback images.

38
00:02:50.560 --> 00:02:54.380
This is something that you
could never do with Ab Cache.

39
00:02:54.380 --> 00:02:58.250
Right, this service worker is the first
thing available in the web technology

40
00:02:58.250 --> 00:03:02.420
world that would let you make that
kind of dynamic decision involving

41
00:03:02.420 --> 00:03:07.166
basically a proxy and a database in order

42
00:03:07.166 --> 00:03:10.810
to like customize the way those
kind of requests are handled.

43
00:03:10.810 --> 00:03:13.500
One last thing I wanna show you,
and sorry,

44
00:03:13.500 --> 00:03:17.170
I just realize I forgot it from the slide,
but I don't want you to attempt to

45
00:03:18.170 --> 00:03:22.835
power through it without knowing
all that you need to know.

46
00:03:22.835 --> 00:03:26.750
You do when you create
these object stores-

47
00:03:26.750 --> 00:03:27.250
&gt;&gt; Speaker 2: You're not sharing.

48
00:03:27.250 --> 00:03:27.910
&gt;&gt; Mike North: Thank you.

49
00:03:29.420 --> 00:03:33.210
When you create these object stores,
you need to make sure that you define what

50
00:03:33.210 --> 00:03:39.340
the ID, where the ID can be found on
these different types of objects.

51
00:03:39.340 --> 00:03:42.469
Let me find the example real quick.

52
00:03:42.469 --> 00:03:47.737
There we go.

53
00:03:47.737 --> 00:03:53.670
So this would be in
your upgrade hook here.

54
00:03:53.670 --> 00:03:56.730
You'll notice that we have key path of id.

55
00:03:56.730 --> 00:04:01.740
So that basically says,
I wanna put objects into the store.

56
00:04:01.740 --> 00:04:05.850
And you can expect to
find the primary key for

57
00:04:05.850 --> 00:04:09.010
these documents under
the property name id.

58
00:04:10.500 --> 00:04:14.970
So make sure you add that as an option
when you're creating your object store.

59
00:04:16.070 --> 00:04:17.600
This is a great read me by the way.

60
00:04:17.600 --> 00:04:20.520
I don't wanna attempt to copy and

61
00:04:20.520 --> 00:04:25.120
paste it into slides because it has
tons of examples for a key value store.

62
00:04:25.120 --> 00:04:31.150
This is almost like a little store
object that's wrapped around IndexedDB.

63
00:04:31.150 --> 00:04:37.660
So definitely take a look at this,
jakearchibald idb on GitHub.

64
00:04:37.660 --> 00:04:39.370
All of your answers are there.

65
00:04:39.370 --> 00:04:41.550
So let's take 20 minutes for this.

66
00:04:41.550 --> 00:04:44.132
I will go through the solution, and

67
00:04:44.132 --> 00:04:47.845
then the next topic we'll
be tackling is web push.

68
00:04:47.845 --> 00:04:52.849
We'll be sending, instead of pulling
stuff from a server onto the client,

69
00:04:52.849 --> 00:04:54.803
we'll push from the server so

70
00:04:54.803 --> 00:05:00.020
that we can tell clients to do things
even if your browser tabs are closed.

71
00:05:00.020 --> 00:05:02.640
&gt;&gt; Speaker 2: How do I
import idb into the-

72
00:05:02.640 --> 00:05:04.462
&gt;&gt; Mike North: Gonna port idb from idb.

73
00:05:04.462 --> 00:05:04.962
&gt;&gt; Speaker 2: Okay.

74
00:05:06.160 --> 00:05:08.970
&gt;&gt; Mike North: Yeah, so the question was,
how do we start using idb?

75
00:05:10.800 --> 00:05:11.540
Just like this.

76
00:05:14.549 --> 00:05:15.160
&gt;&gt; Mike North: There you go.

77
00:05:16.710 --> 00:05:18.550
And you can see we're
already starting to see,

78
00:05:18.550 --> 00:05:23.070
if you're using VSCode, you can
already see a type completion here.

79
00:05:24.240 --> 00:05:25.430
So you can explore the API.

