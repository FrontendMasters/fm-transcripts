WEBVTT

1
00:00:00.329 --> 00:00:03.050
&gt;&gt; Mike North: Let's see if we
can make this exercise work.

2
00:00:03.050 --> 00:00:07.509
We already, in the back-end,
it's a very rudimentary setup.

3
00:00:07.509 --> 00:00:12.936
But when you check out, when you complete
an order, after about ten seconds,

4
00:00:12.936 --> 00:00:17.708
you'll get a notification that your
grocer has started to shop, and

5
00:00:17.708 --> 00:00:20.890
started to pick your order up, right?

6
00:00:20.890 --> 00:00:25.342
So currently what's happening is it's
gonna go into the database, look for

7
00:00:25.342 --> 00:00:30.219
all of the push subscriptions, and it's
gonna send a notification to each of them.

8
00:00:30.219 --> 00:00:34.052
Currently there's nothing in this table so
it's iterating over an empty list and

9
00:00:34.052 --> 00:00:34.950
nothing happens.

10
00:00:34.950 --> 00:00:39.913
So, we want to add a record to this table,
and we can do so through the API,

11
00:00:39.913 --> 00:00:45.620
in your apiplayround.http, there's
an example of sending this request.

12
00:00:45.620 --> 00:00:49.111
Once you send that request over,
now when you check out,

13
00:00:49.111 --> 00:00:51.380
you should get a push notification.

14
00:00:51.380 --> 00:00:56.210
And you're going to want to, in your
service worker, just your SWJS file,

15
00:00:56.210 --> 00:00:59.605
you're gonna wanna add
an event listener like this,

16
00:00:59.605 --> 00:01:04.584
you could just start with a debugger in
there, and you should receive some data

17
00:01:04.584 --> 00:01:08.230
that represents what looks
like a little notification.

18
00:01:08.230 --> 00:01:14.933
So, I'm going to do this exercise
a little bit differently when I solve it,

19
00:01:14.933 --> 00:01:21.240
I will definitely stop and show that
we can get this notification here.

20
00:01:21.240 --> 00:01:25.347
There is one last service worker lesson I
wanna make sure that I teach you before I

21
00:01:25.347 --> 00:01:29.529
pass the ball back to Steve, and that is
the idea of having a kill switch, right?

22
00:01:29.529 --> 00:01:34.940
So, has anyone today like been fooled
a little by their service worker?

23
00:01:34.940 --> 00:01:38.220
Maybe you have [LAUGH], yes,
Steve right now all day.

24
00:01:38.220 --> 00:01:43.494
But these things can go wrong
sometimes and they're doing very

25
00:01:43.494 --> 00:01:48.779
critical things, and
if they make mistakes things can be bad.

26
00:01:48.779 --> 00:01:53.529
It's a good idea to have like
the ability to receive a push or

27
00:01:53.529 --> 00:01:59.609
some mechanism by which the service
worker basically unregisters itself,

28
00:01:59.609 --> 00:02:01.521
it uninstalls itself.

29
00:02:01.521 --> 00:02:05.017
So that you're not on the phone
with some user trying to tell them

30
00:02:05.017 --> 00:02:08.141
to open up Dev Tools and
click links and things like this.

31
00:02:08.141 --> 00:02:13.004
This is a way remotely get back
to non-progressive mode, and

32
00:02:13.004 --> 00:02:15.820
start from scratch, start clean.

33
00:02:15.820 --> 00:02:20.812
So, in this case, I'm gonna activate
this killswitch by way of a web push,

34
00:02:20.812 --> 00:02:24.640
and I'm gonna send just
the string TERMINATE in all caps.

35
00:02:24.640 --> 00:02:28.567
And I want when we get a message
that looks like that, for

36
00:02:28.567 --> 00:02:32.310
us to just call
self.registration.unregister.

37
00:02:32.310 --> 00:02:37.317
That's the equivalent of clicking
the unregister link in your

38
00:02:37.317 --> 00:02:42.145
service worker tab, so
we'll have the means of doing that.

39
00:02:42.145 --> 00:02:47.115
The one last thing I wanna
show you it's the method

40
00:02:47.115 --> 00:02:50.790
that I would use to fire that switch.

41
00:02:50.790 --> 00:02:55.367
So, this web push library is excellent and
it provides us on the CLI

42
00:02:55.367 --> 00:02:59.559
the ability to send a message
without going through our app.

43
00:02:59.559 --> 00:03:03.840
This is nice because I could terminate
a service worker without having to deploy.

44
00:03:03.840 --> 00:03:08.457
All right, I don't have to interact with
my application, just with the data itself,

45
00:03:08.457 --> 00:03:12.078
with the application itself,
with the keys, with the vapid keys.

46
00:03:12.078 --> 00:03:16.999
I can send something that looks like this,
and the browser will get it.

47
00:03:16.999 --> 00:03:19.570
It's just a matter of having
all of the right data.

48
00:03:19.570 --> 00:03:24.347
So you could obviously make this a lot
nicer and maybe have a little script that

49
00:03:24.347 --> 00:03:29.346
would talk to your database, and by user
ID terminate their service worker, and

50
00:03:29.346 --> 00:03:32.671
inside it would be assembling
all of this stuff here.

51
00:03:32.671 --> 00:03:35.440
But I just want you to know that
this is a nice flexible thing.

52
00:03:35.440 --> 00:03:40.109
And that having an off button
on your service you can use to

53
00:03:40.109 --> 00:03:44.110
remotely take a harmful one out,
is a good idea.

54
00:03:44.110 --> 00:03:47.608
Not necessarily to destroy the cache, but

55
00:03:47.608 --> 00:03:52.381
to set it back to unregistered so
it re-installs itself.

56
00:03:52.381 --> 00:03:58.340
All right, so with that,
let's try to create a push subscription.

57
00:03:58.340 --> 00:04:03.251
And then in our service worker,
setup something that listens for

58
00:04:03.251 --> 00:04:07.819
the push event, verify that we
can see this stuff coming in.

59
00:04:07.819 --> 00:04:09.502
And I'm gonna go through and

60
00:04:09.502 --> 00:04:13.440
implement the kill switch when we
come back in about 20 minutes.

