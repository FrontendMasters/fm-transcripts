WEBVTT

1
00:00:00.859 --> 00:00:05.058
&gt;&gt; Steve Kinney: We're going to kind of
recap some of the stuff from yesterday and

2
00:00:05.058 --> 00:00:08.497
talk a little bit more
about Service Worker 201.

3
00:00:08.497 --> 00:00:14.028
Generally speaking, some of these
things fall into that kind of thing we

4
00:00:14.028 --> 00:00:19.376
said the other day of, 90% of the time
these might not be things that

5
00:00:19.376 --> 00:00:24.470
you need until they're definitely
a thing that you need, right?

6
00:00:24.470 --> 00:00:26.969
But it is a certain amount of
restraint and thinking about it.

7
00:00:26.969 --> 00:00:28.691
They are not the immediate go-to.

8
00:00:28.691 --> 00:00:32.872
But there are certain things about Service
Workers that you can control that other

9
00:00:32.872 --> 00:00:36.279
solutions haven't given us
the ability to do in the past, right?

10
00:00:36.279 --> 00:00:37.239
And as I mentioned,

11
00:00:37.239 --> 00:00:41.322
Service Workers fit in really nicely with
this idea of the extensible web manifesto.

12
00:00:41.322 --> 00:00:46.197
Which is, give me low level access, give
me the ability to programmatically decide

13
00:00:46.197 --> 00:00:48.820
and change stuff based
on the needs of my app.

14
00:00:48.820 --> 00:00:52.073
Don't try to assume all web
apps must need this and

15
00:00:52.073 --> 00:00:55.080
try to come up with some panacea, right?

16
00:00:55.080 --> 00:01:01.523
So we have some fine-grained control
into the life cycle of Service Workers,

17
00:01:01.523 --> 00:01:07.088
where we can either introspect
where it is along it's upbringing,

18
00:01:07.088 --> 00:01:11.989
coming of age and
eventual retirement as a Service Worker.

19
00:01:11.989 --> 00:01:15.759
As well as being able to push an existing
Service Worker out of the way.

20
00:01:15.759 --> 00:01:17.049
We can control all those things.

21
00:01:17.049 --> 00:01:22.019
It doesn't always mean that we should,
it just means that we can, all right?

22
00:01:22.019 --> 00:01:25.919
So we do have this fine-grained
access that we can look at.

23
00:01:25.919 --> 00:01:30.094
And other technologies, we'll talk
a little bit about app cache later,

24
00:01:30.094 --> 00:01:31.451
didn't give us those.

25
00:01:31.451 --> 00:01:37.213
And sometimes not having that escape hatch
or fine-grained control can lead us to not

26
00:01:37.213 --> 00:01:42.350
being able to use the technology the way
that we need to for our application.

27
00:01:46.750 --> 00:01:49.627
&gt;&gt; Steve Kinney: So
the first one is on the install event,

28
00:01:49.627 --> 00:01:53.860
we know that a service worker,
when it's been installed,

29
00:01:53.860 --> 00:01:59.551
will wait until all of the browser windows
or frames have disconnected from it.

30
00:01:59.551 --> 00:02:03.071
When they've all disconnected,
then we know that it is safe for

31
00:02:03.071 --> 00:02:05.099
the new service worker to take over.

32
00:02:05.099 --> 00:02:08.528
However, there might be a situation
where that doesn't work for you.

33
00:02:08.528 --> 00:02:11.151
At which point you can
call event.skipWaiting,

34
00:02:11.151 --> 00:02:13.280
which does exactly what it sounds like.

35
00:02:13.280 --> 00:02:18.530
You skip waiting and
you push the existing service worker out.

36
00:02:18.530 --> 00:02:20.336
Now, this can be fraught with peril,

37
00:02:20.336 --> 00:02:24.067
because that service worker could have
been doing something very important.

38
00:02:24.067 --> 00:02:28.824
The client-side code that loaded that
service worker might not be the most

39
00:02:28.824 --> 00:02:30.495
recent version, right?

40
00:02:30.495 --> 00:02:32.344
We are showing you this for

41
00:02:32.344 --> 00:02:37.734
the sake of having a comprehensive look
at the abilities of service worker.

42
00:02:37.734 --> 00:02:43.644
Mike and Steve in no way endorse the use
of this without a really good reason.

43
00:02:43.644 --> 00:02:47.462
And we'll talk about some potentially
really good reasons later, but

44
00:02:47.462 --> 00:02:50.259
we will make this disclaimer
one more time, Mike and

45
00:02:50.259 --> 00:02:53.269
Steve do not endorse this
without a really good reason.

46
00:02:53.269 --> 00:02:57.931
But it exists, and there might be
a situation where you might need it.

47
00:02:57.931 --> 00:03:02.380
The other thing you can do is not only can
you push out an existing service worker,

48
00:03:02.380 --> 00:03:06.436
but on the activate stage, when a service
worker kinda takes the stage and

49
00:03:06.436 --> 00:03:08.923
becomes the new, active, service worker,

50
00:03:08.923 --> 00:03:13.112
there's the possibility if it is
the first service worker, for instance,

51
00:03:13.112 --> 00:03:17.519
that there are connected clients that
don't have a service worker currently.

52
00:03:17.519 --> 00:03:21.115
At which point it can tell the browser,
anything that doesn't have a service

53
00:03:21.115 --> 00:03:23.382
worker, hello,
I'm your service worker now,

54
00:03:23.382 --> 00:03:26.729
I'll be handling your network request,
thank you very much, right?

55
00:03:26.729 --> 00:03:29.489
So this will actually take it for
all current ones.

56
00:03:29.489 --> 00:03:34.118
We saw the life cycle, and
in the registration process we have

57
00:03:34.118 --> 00:03:40.453
the registration, which is the Service
Worker that we literally just registered.

58
00:03:40.453 --> 00:03:46.400
But we can also look at what
the installing Service Worker is.

59
00:03:46.400 --> 00:03:49.329
And if you remember the Chrome DevTools,
we're able to see that in the DevTools.

60
00:03:49.329 --> 00:03:52.499
We're able to see that we have
a Service Worker that's installing.

61
00:03:52.499 --> 00:03:54.039
We have a Service Worker that was waiting.

62
00:03:54.039 --> 00:03:56.459
We have a Service Worker that was active,
right?

63
00:03:56.459 --> 00:04:00.421
In our general programming, we have that
same introspection into what's going on in

64
00:04:00.421 --> 00:04:02.579
the life cycle of our service worker,
right?

65
00:04:02.579 --> 00:04:05.619
So there are situations where you
might wanna be able to check and see.

66
00:04:05.619 --> 00:04:10.379
And we have this fine-grain control over
everything happening with Service Worker.

67
00:04:10.379 --> 00:04:13.944
And we can see all those things
programmatically, which is really cool.

68
00:04:16.909 --> 00:04:19.939
&gt;&gt; Steve Kinney: At the same time,
we can also add events, right?

69
00:04:19.939 --> 00:04:24.441
In this case, we can add an event
listener for an update found, right?

70
00:04:24.441 --> 00:04:27.729
Okay, this service worker
has taken the stage, but

71
00:04:27.729 --> 00:04:32.899
maybe it wants to know about new service
workers that come onto the scene, right?

72
00:04:32.899 --> 00:04:36.713
There could be a situation where you can
make sense to be like, hey, there is a new

73
00:04:36.713 --> 00:04:40.881
service worker available, especially for
a particularly long-lived application.

74
00:04:40.881 --> 00:04:43.720
And we could, for instance,
listen for this event and

75
00:04:43.720 --> 00:04:45.519
present user interface, right?

76
00:04:45.519 --> 00:04:49.209
A new service worker's event available,
click here to update, right?

77
00:04:49.209 --> 00:04:52.550
And then we could theoretically have it
take the stage, so on and so forth, right?

78
00:04:52.550 --> 00:04:56.470
So we can hear about every new
service worker that comes and

79
00:04:56.470 --> 00:04:58.079
fire off events for it.

80
00:04:58.079 --> 00:05:02.129
For the new worker,
we can add a state change event, right?

81
00:05:02.129 --> 00:05:05.999
When your state changes,
I wanna be able to do stuff, right?

82
00:05:05.999 --> 00:05:08.630
Again, this is the 201 level,

83
00:05:08.630 --> 00:05:14.449
this is not probably your day-to-day
relationship with service worker.

84
00:05:14.449 --> 00:05:18.109
But the main thing that I want you to
get out of this is if there is a very

85
00:05:18.109 --> 00:05:21.963
particular need or use case, and
Mike's gonna talk about a few of those

86
00:05:21.963 --> 00:05:24.940
in a little bit,
that you have these tools available.

87
00:05:24.940 --> 00:05:27.460
You are not at the mercy
of service worker, right?

88
00:05:27.460 --> 00:05:29.970
You are in control, cool.

89
00:05:33.960 --> 00:05:37.640
&gt;&gt; Steve Kinney: We can also listen for
a service worker taking over, right?

90
00:05:37.640 --> 00:05:41.014
If the controller changed,
if this happens mid-process,

91
00:05:41.014 --> 00:05:44.000
we know that somebody
probably called skipWaiting.

92
00:05:44.000 --> 00:05:46.469
Right, so
these are some of the finer-grain ones.

93
00:05:46.469 --> 00:05:51.075
Again, 99% of the time, you're probably
not going to need them, but 1% of

94
00:05:51.075 --> 00:05:55.840
the time you're definitely maybe going
to need one of them, definitely, maybe.

95
00:05:55.840 --> 00:05:59.140
&gt;&gt; Speaker 2: Can you pass state from new
service worker to old service worker or

96
00:05:59.140 --> 00:05:59.921
vice-versa?

97
00:06:01.599 --> 00:06:03.153
&gt;&gt; Steve Kinney: The-
&gt;&gt; Speaker 2: [INAUDIBLE] transition.

98
00:06:03.153 --> 00:06:03.949
&gt;&gt; Steve Kinney: That's a good question.

99
00:06:03.949 --> 00:06:08.533
The existing service worker can
intercept the network request.

100
00:06:08.533 --> 00:06:14.509
And you could pull it off,
you probably shouldn't, right?

101
00:06:14.509 --> 00:06:19.033
Could you set stuff in an IndexDB and
then have one read it, yeah.

102
00:06:19.033 --> 00:06:21.336
I'm gonna say, don't.

103
00:06:21.336 --> 00:06:28.070
[LAUGH] Because at that point, you've
got changing state in the other one.

104
00:06:28.070 --> 00:06:32.908
I would say that, could you pull it off,
I could come up with ways that you could,

105
00:06:32.908 --> 00:06:35.124
and I don't endorse any any of them.

106
00:06:35.124 --> 00:06:39.435
&gt;&gt; Speaker 3: So let me just ask what kind
of state were you asking about there?

107
00:06:39.435 --> 00:06:40.757
&gt;&gt; Steve Kinney: Well,
I'm envisioning a controller change.

108
00:06:40.757 --> 00:06:44.791
And obviously there's the obvious, I'm
doing something, I have controller change,

109
00:06:44.791 --> 00:06:47.065
stop doing it,
don't attempt to complete it.

110
00:06:47.065 --> 00:06:50.276
&gt;&gt; Speaker 3: But I was wondering if
the use case for that listener was, I'm in

111
00:06:50.276 --> 00:06:54.322
the middle of something, here's what you
should do with it new service worker,

112
00:06:54.322 --> 00:06:56.788
cuz I've gotten halfway
through this process.

113
00:06:56.788 --> 00:06:59.560
&gt;&gt; Speaker 2: Steve's answer,
100% is correct in that case.

114
00:06:59.560 --> 00:07:02.682
&gt;&gt; Steve Kinney: [LAUGH]
&gt;&gt; Speaker 2: I only ask cuz state covers

115
00:07:02.682 --> 00:07:03.878
a lot of things.

116
00:07:03.878 --> 00:07:06.544
There are some situations, for example,

117
00:07:06.544 --> 00:07:10.330
we will soon be working with
the concept of a fallback image.

118
00:07:10.330 --> 00:07:14.610
So instead of getting the usual 404 image,
we can store something.

119
00:07:14.610 --> 00:07:19.070
Maybe that's something that's not changing
very often, that may be something that is

120
00:07:19.070 --> 00:07:22.640
sorted in memory over many different
versions of the service worker.

121
00:07:22.640 --> 00:07:24.430
So persisting that, and

122
00:07:24.430 --> 00:07:29.810
the kind of thing that Steve's gonna
talk about soon, that would be okay.

123
00:07:29.810 --> 00:07:34.686
But sort of state that relates to
the operation of that service worker,

124
00:07:34.686 --> 00:07:35.835
don't do that.

125
00:07:35.835 --> 00:07:37.985
&gt;&gt; Steve Kinney: Okay.
Anyway that you could do that would

126
00:07:37.985 --> 00:07:40.799
be a colossal hack and
you probably shouldn't, right?

127
00:07:40.799 --> 00:07:44.247
If it's designed not to let you,
if you're clever enough,

128
00:07:44.247 --> 00:07:48.720
you can find your way around that, but
it's definitely a potential sad path.

