WEBVTT

1
00:00:00.225 --> 00:00:03.104
&gt;&gt; Steve Kinney: The example I
just showed you is silly right?

2
00:00:03.104 --> 00:00:05.630
Why would you ever do that, right?

3
00:00:05.630 --> 00:00:07.160
If you wanted to respond on the page,

4
00:00:07.160 --> 00:00:10.530
why wouldn't just respond with that page,
right?

5
00:00:10.530 --> 00:00:15.181
The interesting part is like, okay,
a user made a request, figuring out what

6
00:00:15.181 --> 00:00:19.913
exactly we wanna send them is where I
think things get a little bit interesting.

7
00:00:19.913 --> 00:00:22.891
So we're gonna take a look
at an example together,

8
00:00:22.891 --> 00:00:25.328
this one's called intercepting fetch.

9
00:00:25.328 --> 00:00:26.362
And we'll,

10
00:00:40.272 --> 00:00:45.606
&gt;&gt; Steve Kinney: This is
intercepting-fetch@glitch.me,

11
00:00:45.606 --> 00:00:50.980
and we'll go ahead and,
&gt;&gt; Steve Kinney: Let

12
00:00:50.980 --> 00:00:56.865
me biggerize everything for you,
that's a technical term, biggerize.

13
00:00:59.053 --> 00:01:00.553
&gt;&gt; Steve Kinney: Cool.

14
00:01:02.558 --> 00:01:06.919
&gt;&gt; Steve Kinney: If we go in here,
we take a look at the code,

15
00:01:06.919 --> 00:01:09.962
we have a fetch event in here.

16
00:01:09.962 --> 00:01:13.898
We have some URLs, and
these are mostly stored in

17
00:01:13.898 --> 00:01:18.140
variables right now cuz
they're on Glitch's CDN.

18
00:01:18.140 --> 00:01:19.590
But they're very long, and

19
00:01:19.590 --> 00:01:24.840
you can assume that one is a URL
of a picture of the Beatles.

20
00:01:24.840 --> 00:01:33.030
The other one is a URL of a picture
of Oasis, like same thing, right?

21
00:01:33.030 --> 00:01:35.720
And we have this other remote image.

22
00:01:35.720 --> 00:01:41.610
And you can see, in this fetch event,
we'll console log the request.

23
00:01:41.610 --> 00:01:46.950
We'll say, hey, if the event's
request URL equals the Beatles,

24
00:01:46.950 --> 00:01:49.280
if they're looking for
a picture of the Beatles.

25
00:01:49.280 --> 00:01:54.280
In that case,
we will intercept the request and

26
00:01:54.280 --> 00:01:59.820
we'll respond with sending a network
request to go get a picture of Oasis

27
00:01:59.820 --> 00:02:01.980
instead and giving them that.

28
00:02:03.280 --> 00:02:06.590
So if we go back over,
I do need to clear out this service work.

29
00:02:06.590 --> 00:02:10.069
You can see that this
is a picture of Oasis.

30
00:02:13.316 --> 00:02:17.434
&gt;&gt; Steve Kinney: If we go to the
index@html we are definitely asking for

31
00:02:17.434 --> 00:02:20.039
a picture of the Beatles, right?

32
00:02:22.226 --> 00:02:23.885
&gt;&gt; Steve Kinney: We
intercept with the request.

33
00:02:23.885 --> 00:02:25.632
We said, I know what you asked for,

34
00:02:25.632 --> 00:02:28.791
let me go get this other thing from
the network and give it to you.

35
00:02:28.791 --> 00:02:30.777
If we threw in some different picture,

36
00:02:30.777 --> 00:02:36.568
if we threw in,
&gt;&gt; Steve Kinney: A picture

37
00:02:36.568 --> 00:02:41.367
of,
&gt;&gt; Steve Kinney: I can edit right now,

38
00:02:41.367 --> 00:02:42.400
log in later.

39
00:02:43.690 --> 00:02:46.167
If we place another image, well,
that wouldn't hit our IF statement, and

40
00:02:46.167 --> 00:02:47.690
it would go through to the network.

41
00:02:47.690 --> 00:02:50.762
But we have the ability to
write conditional logic.

42
00:02:50.762 --> 00:02:54.814
Hey, if it has this very particular URL,
like they want a picture of the Beatles,

43
00:02:54.814 --> 00:02:56.988
we're not giving a picture of the Beatles,

44
00:02:56.988 --> 00:02:59.365
we're giving them a picture of Oasis,
right?

45
00:02:59.365 --> 00:03:00.161
And you could write,

46
00:03:00.161 --> 00:03:02.915
you have the full power of the JavaScript
programming language with you.

47
00:03:02.915 --> 00:03:07.076
If you wanna say, if it contains the word
Beatles, guess what, and it is an image,

48
00:03:07.076 --> 00:03:09.345
you're getting a picture of Oasis, right?

49
00:03:09.345 --> 00:03:13.266
You can take the troll level very high
with this and write all this conditional

50
00:03:13.266 --> 00:03:17.840
logic to check, but we can basically
take any request that comes through.

51
00:03:17.840 --> 00:03:23.570
Either let it go through to the network
or, b, intercept it with something else.

52
00:03:23.570 --> 00:03:26.520
Right now we are making a different
network request and we're

53
00:03:26.520 --> 00:03:30.860
basically redirecting it and responding
with the thing that was redirected to.

54
00:03:30.860 --> 00:03:35.594
In a little bit, we'll talk about,
hey, last time you were online or

55
00:03:35.594 --> 00:03:38.658
when we load it,
we cached a bunch of things.

56
00:03:38.658 --> 00:03:42.247
Well, let's try to do the request,
if we can't do the request,

57
00:03:42.247 --> 00:03:44.224
here's a cached version, right?

58
00:03:44.224 --> 00:03:48.854
We can write this logic that says, we want
the most recent image, but if we can't,

59
00:03:48.854 --> 00:03:51.252
here's one that we already have, right?

60
00:03:51.252 --> 00:03:54.170
And a bunch of different things,
there's a lot of strategies around this.

61
00:03:54.170 --> 00:03:57.540
It's like, yeah, get me a thing, if I
can't get a thing, get the one from cache.

62
00:03:57.540 --> 00:04:01.149
That is one of the very
straightforward use cases, right?

63
00:04:01.149 --> 00:04:03.693
At one part we're gonna show
you all the different ways.

64
00:04:03.693 --> 00:04:05.688
Depending on what you're
trying to build for

65
00:04:05.688 --> 00:04:08.260
your app and depending on which
part of your application,

66
00:04:08.260 --> 00:04:11.740
you want to use a different strategy and
we'll talk about that in a little bit.

