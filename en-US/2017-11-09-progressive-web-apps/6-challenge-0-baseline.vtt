WEBVTT

1
00:00:00.070 --> 00:00:01.409
&gt;&gt; Mike: This is exercise zero.

2
00:00:01.409 --> 00:00:04.043
The purpose here is to make
sure we're all set up and

3
00:00:04.043 --> 00:00:07.480
that we can get sort of
a baseline reading on our app.

4
00:00:07.480 --> 00:00:11.020
So we spent a lot of time looking
at the README and making sure that

5
00:00:12.070 --> 00:00:15.170
we've tried to catch all of the software
packages you have to install.

6
00:00:15.170 --> 00:00:17.480
And by the time you're
watching this video course,

7
00:00:17.480 --> 00:00:20.840
it should be really finely tuned and
up to date.

8
00:00:20.840 --> 00:00:24.170
And then we can do a couple of
things once we're completely set up.

9
00:00:24.170 --> 00:00:27.823
And I'm gonna actually walk through
the setup process with you in case you're

10
00:00:27.823 --> 00:00:28.660
having trouble.

11
00:00:32.120 --> 00:00:37.053
Once we're set up with our TLS
certificate and ready to go,

12
00:00:37.053 --> 00:00:40.660
we can then build a version of our app.

13
00:00:40.660 --> 00:00:44.641
And that you will do
via npm run build:prod.

14
00:00:44.641 --> 00:00:49.539
And you can also build:dev,
the difference is one gets minified and

15
00:00:49.539 --> 00:00:55.370
optimized and the other is sort of meant
for your own benefit as a developer.

16
00:00:55.370 --> 00:00:58.460
So you'll notice that as you save files,

17
00:00:58.460 --> 00:01:04.230
if you're in development mode,
the page will automatically refresh.

18
00:01:04.230 --> 00:01:07.030
There is some code that has to
live in your browser to do that.

19
00:01:07.030 --> 00:01:10.290
You don't want that to be sent to
your users, it's kind of pointless.

20
00:01:10.290 --> 00:01:12.120
So that strips it all away.

21
00:01:12.120 --> 00:01:17.240
And you can also look at the file sizes
that come out of those production builds.

22
00:01:17.240 --> 00:01:20.770
And the important thing to look
at is the gzipped file sizes.

23
00:01:20.770 --> 00:01:24.750
We're gonna start out at about 85KB, and

24
00:01:24.750 --> 00:01:27.860
we will actually get
considerably smaller over time.

25
00:01:29.390 --> 00:01:34.600
If you use this environment
variable before making that build,

26
00:01:34.600 --> 00:01:39.940
you'll get some feedback
broken down by file size.

27
00:01:39.940 --> 00:01:45.750
Like what's the big stuff here, what's the
culprit that's taking up so much space?

28
00:01:45.750 --> 00:01:49.107
And then finally, to run your app,
you're gonna do ./run and

29
00:01:49.107 --> 00:01:51.545
then you can have a command
that follows that.

30
00:01:51.545 --> 00:01:54.530
And all day we gonna be
using serve as the command.

31
00:01:54.530 --> 00:01:57.710
There's an http2 option that you can use.

32
00:01:57.710 --> 00:02:03.600
And the http2 server we have in this
project is actually pretty slow.

33
00:02:03.600 --> 00:02:08.073
So we gonna look at that when it
comes to just studying the way

34
00:02:08.073 --> 00:02:09.866
the network operates.

35
00:02:09.866 --> 00:02:13.926
But it's not going to
improve our Lighthouse score.

36
00:02:13.926 --> 00:02:17.311
If we were to push it up to Firebase,
push our app up to Firebase,

37
00:02:17.311 --> 00:02:19.960
we would see they optimize
the hell out of it.

38
00:02:19.960 --> 00:02:22.020
We will see a massive improvement.

39
00:02:22.020 --> 00:02:25.390
Locally, it's hard to get all
of that working cause http2

40
00:02:25.390 --> 00:02:27.020
is a little bit complicated.

41
00:02:27.020 --> 00:02:34.420
So I want you to, over the course of
this class, to keep a text editor open,

42
00:02:34.420 --> 00:02:39.490
and exercise by exercise I want us to
just keep measuring as we go along.

43
00:02:39.490 --> 00:02:42.300
And I'm not telling you this
to pat myself on the back, but

44
00:02:42.300 --> 00:02:45.450
I've led you down a path that looks good.

45
00:02:45.450 --> 00:02:49.290
I want you to get in the habit
of testing as you make changes.

46
00:02:49.290 --> 00:02:51.720
Because when it comes to
progressive web apps,

47
00:02:51.720 --> 00:02:55.770
we always want to keep
things relatively small.

48
00:02:55.770 --> 00:03:00.050
We want to keep an eye on metrics because
things get a lot more complicated.

49
00:03:00.050 --> 00:03:03.370
This is not a document in
a document viewer any more.

50
00:03:03.370 --> 00:03:06.090
This is a rich application
on an application platform.

51
00:03:07.420 --> 00:03:11.200
So we'll continually test
our Lighthouse score,

52
00:03:11.200 --> 00:03:15.000
our gzipped app size, our time to first
paint, and our time to interactive.

