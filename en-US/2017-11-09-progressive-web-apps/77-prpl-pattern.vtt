WEBVTT

1
00:00:00.110 --> 00:00:03.338
&gt;&gt; Mike North: The second pattern
that I wanna talk about, and

2
00:00:03.338 --> 00:00:07.625
this isn't a choice between App Shell and
this other pattern.

3
00:00:07.625 --> 00:00:13.279
But it works well in terms of figuring out
how we set up our different resources.

4
00:00:13.279 --> 00:00:19.478
This is called PRPL and
again coined by Google Developer Advocate,

5
00:00:19.478 --> 00:00:23.300
think this was Addy that coined this one.

6
00:00:23.300 --> 00:00:27.873
And it's just an acronym that
represents four steps here,

7
00:00:27.873 --> 00:00:33.369
the first is to push the critical
resources for that URL to the browser.

8
00:00:33.369 --> 00:00:36.766
And this is where code splitting,
route splitting, and

9
00:00:36.766 --> 00:00:39.090
HTTP push is really important.

10
00:00:39.090 --> 00:00:43.490
We have critical CSS,
critical JavaScript for that URL.

11
00:00:43.490 --> 00:00:47.253
let's get that over the wire as
quickly as we can in parallel and

12
00:00:47.253 --> 00:00:49.820
have that page render as soon as possible.

13
00:00:49.820 --> 00:00:52.595
And at that point we can
render that initial route.

14
00:00:53.820 --> 00:00:57.733
So then we can, in the background,
pre-cache any remaining route.

15
00:00:57.733 --> 00:01:00.379
So this is where you would go and
in the background download

16
00:01:00.379 --> 00:01:03.949
additional fragments of your application
so they're available instantly.

17
00:01:03.949 --> 00:01:07.109
That would be kind of the like the
pre-caching that we've already been doing.

18
00:01:07.109 --> 00:01:09.720
Where we used that asset manifest.

19
00:01:09.720 --> 00:01:13.480
And then finally we'll lazy-load
the remaining routes when they're ready.

20
00:01:13.480 --> 00:01:18.250
And you wanna defer actually
evaluating the script because there

21
00:01:18.250 --> 00:01:22.500
is some cost for
taking text JavaScript files.

22
00:01:22.500 --> 00:01:25.165
And turning them into executable code.

23
00:01:25.165 --> 00:01:29.060
There's no need to pay that cost until
you're ready to actually use them.

24
00:01:29.060 --> 00:01:33.758
And so you can kinda keep them in
the cache, from the cache API and

25
00:01:33.758 --> 00:01:37.430
they're is sorta inert there,
it's just text.

26
00:01:37.430 --> 00:01:40.641
And then as you need them,
you can send a request for

27
00:01:40.641 --> 00:01:44.690
them in your service or
send it back to the application.

28
00:01:44.690 --> 00:01:50.299
And at that point it becomes code,
it's evaluated and you can use it.

29
00:01:50.299 --> 00:01:53.245
So these are the two goals of PRPL.

30
00:01:53.245 --> 00:01:57.568
We're trying to minimize the
time-to-interactive by shrinking the code

31
00:01:57.568 --> 00:02:00.009
that we send to the browser for
a given URL.

32
00:02:00.009 --> 00:02:04.969
It's shrinking the CSS so we're not
sending all of Twitter Bootstrap along.

33
00:02:04.969 --> 00:02:09.945
And we also wanna maximize our
caching efficiency by trying

34
00:02:09.945 --> 00:02:14.431
to ensure that we have
the most critical stuff first.

35
00:02:14.431 --> 00:02:17.896
So that if the user visits a page and
switches to another one.

36
00:02:17.896 --> 00:02:19.669
Like you have VIZ first and

37
00:02:19.669 --> 00:02:24.840
then you can worry about images in
other less prioritized resources later.

