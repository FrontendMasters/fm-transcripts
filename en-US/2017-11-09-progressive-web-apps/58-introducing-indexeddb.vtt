WEBVTT

1
00:00:00.400 --> 00:00:03.250
&gt;&gt; Mike North: Let's talk about
enriching this a little bit further.

2
00:00:03.250 --> 00:00:07.080
So right now we can view the app right?

3
00:00:07.080 --> 00:00:09.750
We can view the app offline.

4
00:00:09.750 --> 00:00:13.190
And this if we were building
like the New York Times or

5
00:00:13.190 --> 00:00:17.570
something like this where largely
you're just consuming content and

6
00:00:17.570 --> 00:00:22.260
it's like get requests like I only care
about get request mostly as a user.

7
00:00:22.260 --> 00:00:28.350
You could build be a pretty good product
without me having to manipulate things.

8
00:00:28.350 --> 00:00:33.590
But here we have like a cart and
not everything is on the screen here.

9
00:00:33.590 --> 00:00:38.560
So we might have a need to sort of store

10
00:00:38.560 --> 00:00:43.810
data in a different way so that we can
maybe queue things up so that we can

11
00:00:43.810 --> 00:00:48.040
flush them later on like save them to
the API in the event that we go online.

12
00:00:49.060 --> 00:00:54.750
And a foundational pillar
of that is IndexedDB.

13
00:00:56.850 --> 00:01:02.340
IndexDB is a no SQL database
that lives in your browser.

14
00:01:03.970 --> 00:01:08.820
So there are a couple of
things we look for in

15
00:01:08.820 --> 00:01:14.250
a great database like this, when we say
no SQL by the way, it's not relational.

16
00:01:14.250 --> 00:01:18.030
It's sort of document-based, so we can
store objects, and those objects can have

17
00:01:18.030 --> 00:01:22.640
IDs, but we kind of have some flexibility
around the structure of these things.

18
00:01:22.640 --> 00:01:26.520
Which is great,
because we've got these cart items, and

19
00:01:26.520 --> 00:01:31.400
we might just wanna put them somewhere and
retrieve them or query by attributes.

20
00:01:31.400 --> 00:01:35.590
But I don't really wanna
define a complex schema here.

21
00:01:35.590 --> 00:01:38.880
So here is some characteristics of
IndexedDB that make this really well

22
00:01:38.880 --> 00:01:42.350
suited for
solving some modern web problems.

23
00:01:42.350 --> 00:01:44.220
It's versioned and

24
00:01:44.220 --> 00:01:48.020
if you've ever written a desktop app
this is really important, right?

25
00:01:48.020 --> 00:01:53.200
So like it is not
an accident that you can in

26
00:01:53.200 --> 00:01:58.270
a recent version of Ms Word,
Open a Word97 document.

27
00:01:59.380 --> 00:02:04.760
The concept of what that document
is has evolved a lot over 20 years.

28
00:02:04.760 --> 00:02:09.420
But because of versioning,
the idea is you can identify that,

29
00:02:10.510 --> 00:02:13.520
here's a piece of data,
it might be quite old.

30
00:02:13.520 --> 00:02:19.270
Let's sort of identify what Version it is,
and then we know what to expect from it,

31
00:02:19.270 --> 00:02:24.500
and maybe we can upgrade it to the modern
Word document and then save it, right?

32
00:02:24.500 --> 00:02:27.740
So the same concept exists here,
because potentially,

33
00:02:27.740 --> 00:02:31.830
a user could visit your app,
you store something in an IndexedDb,

34
00:02:31.830 --> 00:02:35.400
and they don't come back for
a year and a half later.

35
00:02:35.400 --> 00:02:39.630
And so you've got this thing
hanging around in durable data.

36
00:02:39.630 --> 00:02:45.850
And you want to be able to have
a forward path to evolving what you

37
00:02:45.850 --> 00:02:50.550
store in IndexedDB while still making it
so this doesn't cause problems for users.

38
00:02:53.050 --> 00:02:54.740
Records are indexible.

39
00:02:54.740 --> 00:02:58.770
Which means if you have particular
queries that are common.

40
00:02:58.770 --> 00:03:03.130
In our case, you might notice that
grocery items have a category and you can

41
00:03:03.130 --> 00:03:06.920
drill into those categories and say show
me all the fruits and the vegetables.

42
00:03:06.920 --> 00:03:09.390
So you might find that hey,
we're often asking for

43
00:03:09.390 --> 00:03:12.620
a collection of fruits by category.

44
00:03:12.620 --> 00:03:16.890
You would have an index there which
basically says like as we add

45
00:03:16.890 --> 00:03:21.402
items to this data base,
hash them by categories so

46
00:03:21.402 --> 00:03:25.800
that it's very easy to kind of grab
the collection of them, you know,

47
00:03:25.800 --> 00:03:30.970
of that category and return them rather
than sort of exhaustively searching and

48
00:03:30.970 --> 00:03:32.609
doing that analysis on the fly.

49
00:03:34.540 --> 00:03:38.520
IndexedDB is worker friendly,
largely because it has an async API.

50
00:03:38.520 --> 00:03:42.530
It is not like local storage,
it is not like a cookie.

51
00:03:43.920 --> 00:03:47.680
It is durable just like local storage and
cookies and

52
00:03:47.680 --> 00:03:52.910
it plays by the same rules as many of
the web storage mechanisms we're used to.

53
00:03:52.910 --> 00:03:58.050
Meaning, you get one for
your domain, just like a cookie.

54
00:03:58.050 --> 00:04:02.985
Like you can't alter a Facebook
cookie unless you running code

55
00:04:02.985 --> 00:04:05.252
on a Facebook.com domain.

56
00:04:05.252 --> 00:04:09.910
IndexedDB supports values of many types,
including things that are really

57
00:04:09.910 --> 00:04:14.860
annoying to store in local storage like,
in our case, like what if

58
00:04:14.860 --> 00:04:19.735
a user was scanning QR codes and
we wanted to sort of store those images,

59
00:04:19.735 --> 00:04:25.160
cuz maybe they hit five or six images and
we've got our workers all qued up, but

60
00:04:25.160 --> 00:04:30.670
we want to hold on to them somewhere, in
case they close the app before we're done.

61
00:04:30.670 --> 00:04:33.920
You could store those as blobs here,
rather than what you'd have to do in

62
00:04:33.920 --> 00:04:38.670
local storage, like base 64 and
code that thing, at which point you would

63
00:04:38.670 --> 00:04:43.110
certainly be well over the maximum
allowable size in local storage.

64
00:04:45.050 --> 00:04:49.980
And just be aware, this is not MySQL,
this is not SQLite, this is not Postgres.

65
00:04:49.980 --> 00:04:53.450
We're not dealing really with tables here,
we're dealing with stores.

66
00:04:53.450 --> 00:04:59.030
And you basically kind of define
a document or object type

67
00:04:59.030 --> 00:05:03.710
in that case, grocery item, like that's
what we're going to be using today.

68
00:05:03.710 --> 00:05:08.690
And you'll have a store for grocery items,
that's as close as you get to a table.

69
00:05:10.640 --> 00:05:15.620
We're going to look at
IndexDB's raw API and

70
00:05:15.620 --> 00:05:20.250
then I'm going show you a modernized
library that is all ready installed in

71
00:05:20.250 --> 00:05:23.850
your projects, but
I would recommend using instead.

72
00:05:23.850 --> 00:05:25.400
And it's just a thin wrapper around it.

