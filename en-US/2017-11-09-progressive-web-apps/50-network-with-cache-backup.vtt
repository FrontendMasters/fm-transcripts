WEBVTT

1
00:00:00.000 --> 00:00:05.364
&gt;&gt; Mike North: Here is another strategy
called network with a cache backup.

2
00:00:05.364 --> 00:00:08.297
And in my service workers,

3
00:00:08.297 --> 00:00:13.404
I like to call this the fallback cache,
right?

4
00:00:13.404 --> 00:00:18.534
So this would be basically,
we have a bias for wanting fresh data.

5
00:00:18.534 --> 00:00:23.579
We're gonna try to use the network in
the event that something has gone wrong.

6
00:00:23.579 --> 00:00:26.437
Maybe it's taking too long,
maybe we're off the line.

7
00:00:26.437 --> 00:00:29.188
Only then will we fallback to the cache.

8
00:00:29.188 --> 00:00:33.907
This is a great strategy to use for
JSON get requests, right?

9
00:00:33.907 --> 00:00:36.704
Our list of groceries like
it would be great for

10
00:00:36.704 --> 00:00:41.593
us to know that a new item has been added
since the last time we alerted the screen.

11
00:00:41.593 --> 00:00:42.804
That would be ideal.

12
00:00:42.804 --> 00:00:45.464
In the event that we're offline,
that's off the table.

13
00:00:45.464 --> 00:00:48.238
But it would probably be fine for

14
00:00:48.238 --> 00:00:54.005
us to use a stored older version of
that JSON response in its place.

15
00:00:54.005 --> 00:00:55.445
It's like we use that and

16
00:00:55.445 --> 00:00:59.023
we fallback to that in the event
that we can't use fresh data.

17
00:01:01.802 --> 00:01:06.925
&gt;&gt; Mike North: So you can see here
that we're using this catch callback

18
00:01:06.925 --> 00:01:11.946
of the fetch promise,
the promise returned by fetch.

19
00:01:11.946 --> 00:01:13.096
In this case, so

20
00:01:13.096 --> 00:01:18.527
can anyone tell me in what situations
would we end up falling back to the cache?

21
00:01:21.205 --> 00:01:22.948
&gt;&gt; Mike North: All right, pardon.

22
00:01:22.948 --> 00:01:23.965
&gt;&gt; Speaker 2: A time out.

23
00:01:23.965 --> 00:01:26.231
&gt;&gt; Mike North: A time out, yes.

24
00:01:26.231 --> 00:01:29.396
And a certificate error, yes.

25
00:01:29.396 --> 00:01:32.308
Being offline, yes.

26
00:01:32.308 --> 00:01:34.561
How about a 404?

27
00:01:34.561 --> 00:01:39.040
No, so
like this would work in many situations.

28
00:01:39.040 --> 00:01:43.905
But in order to be complete like for
this also work for image fallback or

29
00:01:43.905 --> 00:01:48.772
something like that, we would need
to also add like something similar

30
00:01:48.772 --> 00:01:52.416
in the successful promise handler and
the dot then.

31
00:01:52.416 --> 00:01:58.011
And say, if the response is not okay,
also caches much this other thing.

32
00:01:58.011 --> 00:02:01.822
That would give us like
a complete fallback for

33
00:02:01.822 --> 00:02:07.501
anything other than successful
200 status code like responses.

34
00:02:10.245 --> 00:02:15.160
&gt;&gt; Mike North: So here is that looks like
in the conversation between the app and

35
00:02:15.160 --> 00:02:16.532
service worker.

36
00:02:16.532 --> 00:02:19.786
So the app says, it wants an item and

37
00:02:19.786 --> 00:02:25.004
the cache is gonna go and
fetch it and return it to the app.

38
00:02:25.004 --> 00:02:29.559
And typically,
what we're gonna do then is, well,

39
00:02:29.559 --> 00:02:32.606
first off, this is not fantastic.

40
00:02:32.606 --> 00:02:35.250
This looks like the default
behavior of fetch.

41
00:02:35.250 --> 00:02:38.430
I've asked the service worker to go and
get something from the internet, and

42
00:02:38.430 --> 00:02:39.180
give it back to me.

43
00:02:40.250 --> 00:02:41.496
We've had this.

44
00:02:41.496 --> 00:02:42.845
This is how AJAX works.

45
00:02:42.845 --> 00:02:46.560
This is how fetch works without
a service worker present.

46
00:02:46.560 --> 00:02:51.249
The benefit here is that we can add
imperative logic to this situation.

47
00:02:51.249 --> 00:02:58.462
For example, we could wrap the fetch
that we're sending to the outside world.

48
00:02:58.462 --> 00:03:02.300
Within our service worker,
we can wrap in a setTimeout.

49
00:03:03.470 --> 00:03:06.483
So that in the event that
something took too long,

50
00:03:06.483 --> 00:03:09.013
then we can use something from our cache.

51
00:03:09.013 --> 00:03:13.180
So this basically say,
we're in the middle of a deploy and

52
00:03:13.180 --> 00:03:16.417
we've just invalidated our whole CDN,
right?

53
00:03:16.417 --> 00:03:21.803
So now,, things are just taking
dramatically longer than typical.

54
00:03:21.803 --> 00:03:27.059
And in that situation with the proper
logic have all of your web clients

55
00:03:27.059 --> 00:03:32.049
out there kind of trading off and
wanting to have something quickly

56
00:03:32.049 --> 00:03:37.777
available rather than having the most
up-to-date version of something.

57
00:03:37.777 --> 00:03:41.729
And this is typically fine for
JSON responses and images, and

58
00:03:41.729 --> 00:03:42.946
things like that.

59
00:03:42.946 --> 00:03:45.298
Obviously, it doesn't
apply well to JavaScript.

60
00:03:45.298 --> 00:03:47.710
You want that to be fresh
most of the time and

61
00:03:47.710 --> 00:03:50.524
we're gonna have a different strategy for
that.

62
00:03:52.748 --> 00:03:57.151
&gt;&gt; Mike North: So in addition to being
able to cut things off if they take

63
00:03:57.151 --> 00:04:02.116
too long, we can, of course,
also in the event that something

64
00:04:02.116 --> 00:04:05.880
errors return a fallback image,
for example.

65
00:04:05.880 --> 00:04:09.025
So we've already kind of worked
with this strategy already.

66
00:04:09.025 --> 00:04:10.779
We just didn't know that it had a name.

67
00:04:13.287 --> 00:04:17.695
&gt;&gt; Mike North: So hopefully what you're
saying is like we're gonna end up

68
00:04:17.695 --> 00:04:23.701
composing a bunch of stuff together and
treat images one way, JSON another way.

69
00:04:23.701 --> 00:04:26.177
Our application assets third way.

70
00:04:26.177 --> 00:04:31.395
We'll pre-fetch those and have a bias for
serving them from the cache.

71
00:04:31.395 --> 00:04:35.614
So let's keep drilling a little
bit deeper in this and

72
00:04:35.614 --> 00:04:40.770
this is starting to approach more
of the pattern that we like to see

73
00:04:40.770 --> 00:04:46.415
when we're building service workers
have a little bit of complexity.

74
00:04:46.415 --> 00:04:51.117
You're gonna have two different flavors
of things kind of being the dominant

75
00:04:51.117 --> 00:04:54.311
stuff that's going on in
the fetch handler itself.

76
00:04:54.311 --> 00:04:57.564
You're gonna have like truthy or

77
00:04:57.564 --> 00:05:03.263
falsy variable that you can
use in order to switch things.

78
00:05:03.263 --> 00:05:05.042
Like is this an image?

79
00:05:05.042 --> 00:05:07.660
Is this a local request?

80
00:05:07.660 --> 00:05:10.773
The same origin that my service
worker is operating on.

81
00:05:10.773 --> 00:05:12.718
Is this an HTML request?

82
00:05:12.718 --> 00:05:17.651
Something like that and then you're
gonna have functions outside of it

83
00:05:17.651 --> 00:05:22.333
that you like, if you will let deal
with all of the cache matching and

84
00:05:22.333 --> 00:05:25.397
opening of caches, and pre-populating.

85
00:05:25.397 --> 00:05:28.570
You want those to be individual things.

86
00:05:28.570 --> 00:05:33.064
Additional benefit of that
is testing service workers.

87
00:05:33.064 --> 00:05:36.219
There is not really an amazing
story around this yet.

88
00:05:36.219 --> 00:05:41.621
But the more you can refractor out into
independent functions, the closer you're

89
00:05:41.621 --> 00:05:46.888
getting to unit testable code as opposed
to having to simulate that fetch event.

90
00:05:46.888 --> 00:05:50.009
And if all of your complexity
is tied up in that,

91
00:05:50.009 --> 00:05:54.849
you're basically in the worst kind of
testing scenario which is where you

92
00:05:54.849 --> 00:05:57.992
have to like programmatically
open a browser.

93
00:05:57.992 --> 00:06:02.159
You're using like Capybara or
Selenium, something like that.

94
00:06:02.159 --> 00:06:06.788
These are the slowest most heavy
weight test frameworks that

95
00:06:06.788 --> 00:06:11.690
really kind of simulate
the end-to-end experience right down

96
00:06:11.690 --> 00:06:14.968
to the browser internals itself, right?

97
00:06:14.968 --> 00:06:21.150
It just literally programmatically mouse
clicking on things in an open browser tab.

98
00:06:21.150 --> 00:06:25.650
We don't wanna be there, that is how you
end up with really long deploy times.

99
00:06:27.330 --> 00:06:31.680
So here's how we might take that
doSomethingWithData function and

100
00:06:31.680 --> 00:06:34.840
compose it together with this
cache then network strategy.

101
00:06:36.230 --> 00:06:42.411
So in this case, we're gonna go and
grab this JSON document.

102
00:06:42.411 --> 00:06:47.611
And when it comes back,
we're actually gonna return that and

103
00:06:47.611 --> 00:06:53.811
that sort of ends the thing that your
application is waiting for, right?

104
00:06:53.811 --> 00:06:59.933
So what that would mean is your
JSON is back in our application.

105
00:06:59.933 --> 00:07:01.931
Your grocery list is showing up.

106
00:07:01.931 --> 00:07:04.146
Keep in mind that this
is a separate thread.

107
00:07:04.146 --> 00:07:07.955
We can actually do something after
we return stuff to the application.

108
00:07:07.955 --> 00:07:12.550
And in this case, we're gonna say,
I went and got something.

109
00:07:12.550 --> 00:07:16.310
Here it is and
then while you do your thing,

110
00:07:16.310 --> 00:07:20.080
I'm gonna proceed to put it in
my fallback cache for later.

