WEBVTT

1
00:00:00.160 --> 00:00:04.520
&gt;&gt; Mike North: Let's implement
our own precaching, so

2
00:00:04.520 --> 00:00:07.780
we haven't dealt with this file yet,
it's been here this whole time.

3
00:00:07.780 --> 00:00:12.060
It's called asset manifest.json and
if you fetch this,

4
00:00:12.060 --> 00:00:14.940
in fact if you go into your dist
folder this file is probably there.

5
00:00:14.940 --> 00:00:21.620
So go ahead and open that up and you will
see that it is a flat JavaScript object.

6
00:00:21.620 --> 00:00:23.880
The keys are,

7
00:00:23.880 --> 00:00:28.480
they look similar to the file names
of important things in your project.

8
00:00:28.480 --> 00:00:35.180
The values are the true file
names of those built assets.

9
00:00:35.180 --> 00:00:36.406
So you can really,

10
00:00:36.406 --> 00:00:40.784
like we don't know what the true
file name of app.js ends up being.

11
00:00:40.784 --> 00:00:43.850
Because we get that fingerprint
built into the file name.

12
00:00:43.850 --> 00:00:49.111
This is sort of the way of taking
the fact that we know we need app.js,

13
00:00:49.111 --> 00:00:52.403
where is the file I have to go and
download?

14
00:00:52.403 --> 00:00:53.916
This is the way to do that.

15
00:00:53.916 --> 00:00:58.540
So, in short,
in the install event handler,

16
00:00:58.540 --> 00:01:01.631
we're gonna fetch this file.

17
00:01:01.631 --> 00:01:06.125
And once we get this, we're going
to use the contents of this file

18
00:01:06.125 --> 00:01:09.325
in order to make sure that,
at the very least.

19
00:01:09.325 --> 00:01:12.457
We precache the JavaScript for

20
00:01:12.457 --> 00:01:18.005
whatever the next version
of the app might be,right?

21
00:01:18.005 --> 00:01:24.368
And if you wanna go a little bit deeper,
you could do the JavaScript,

22
00:01:24.368 --> 00:01:28.549
the web app manifest,
and all of the images.

23
00:01:28.549 --> 00:01:33.349
And then in the activate handler you're
going to want to delete all of the old

24
00:01:33.349 --> 00:01:34.050
caches.

25
00:01:34.050 --> 00:01:39.550
Because this represents like
a new surface worker, rising and

26
00:01:39.550 --> 00:01:44.140
taking charge of the application.

27
00:01:44.140 --> 00:01:51.431
And there's a function for you that's
already built, it's in client/sw/caches.

28
00:01:51.431 --> 00:01:54.896
And I think it's called
delete unused caches, or

29
00:01:54.896 --> 00:01:58.040
clear unused caches, something like that.

30
00:01:58.040 --> 00:02:02.210
This is a really good generic
like utility method to use.

31
00:02:02.210 --> 00:02:05.730
So you basically pass it an array
of caches you wish to keep, and

32
00:02:05.730 --> 00:02:09.920
anything it finds that doesn't match that,
it will get rid of.

33
00:02:11.020 --> 00:02:13.855
In Steve's example, in the little glitch,

34
00:02:13.855 --> 00:02:17.818
you might notice that he's got
a cache name that has a v1 in it.

35
00:02:17.818 --> 00:02:21.910
So we gotta make sure that we version our
caches, so that we know what's new and

36
00:02:21.910 --> 00:02:22.654
what's old.

37
00:02:22.654 --> 00:02:26.705
We don't wanna keep writing
over the same stuff,

38
00:02:26.705 --> 00:02:30.970
cuz it makes it difficult for
us to manage failures.

39
00:02:30.970 --> 00:02:34.810
So let's say, for example, like version
two of our app is launched, and

40
00:02:34.810 --> 00:02:37.170
we're downloading all of
the assets to pre-cache.

41
00:02:37.170 --> 00:02:42.445
If we're overwriting the stuff that is
in version one of the app, when we fail,

42
00:02:42.445 --> 00:02:46.883
we've left the good service worker
that's currently in charge.

43
00:02:46.883 --> 00:02:50.370
With something that's halfway
between two versions of our app.

44
00:02:50.370 --> 00:02:54.704
So that's why we always wanna like,
when a service worker is deactivated,

45
00:02:54.704 --> 00:02:56.543
it's cache goes along with it.

46
00:02:56.543 --> 00:02:58.893
And then when that service
worker is activated,

47
00:02:58.893 --> 00:03:01.870
it's sort of in charge of
setting its own cache up.

48
00:03:01.870 --> 00:03:05.540
And these two are sort of
coupled together in that way.

49
00:03:05.540 --> 00:03:09.999
So in the activate handler, because we're
guaranteed to now have a good version of

50
00:03:09.999 --> 00:03:12.817
the app,
we've just downloaded it successfully.

51
00:03:12.817 --> 00:03:15.830
We will go and delete all of
the stuff we don't need anymore.

52
00:03:15.830 --> 00:03:17.360
And this is really powerful, right,

53
00:03:17.360 --> 00:03:21.600
because it means we always have
a good version of the app somewhere.

54
00:03:21.600 --> 00:03:23.680
When we start working towards offline,

55
00:03:23.680 --> 00:03:26.429
we have to have something
in memory at all times.

56
00:03:27.880 --> 00:03:29.850
Some version of the JavaScript
has to be there.

57
00:03:29.850 --> 00:03:33.720
And this means that we're
never leaping across some

58
00:03:33.720 --> 00:03:37.850
gap where a failure at some
point will cause us problems.

59
00:03:37.850 --> 00:03:41.323
Here it's almost like at a moment in time,

60
00:03:41.323 --> 00:03:46.348
we have both the old and
new version and we know that they work.

61
00:03:46.348 --> 00:03:50.680
In hand, and only then will we
get rid of the old version,

62
00:03:50.680 --> 00:03:53.050
there's no dangerous point.

63
00:03:53.050 --> 00:03:58.130
And then in the fetch handler,
we are going to use caches.match to

64
00:03:58.130 --> 00:04:04.970
try to serve these assets from
pre-cache falling back to fetch, right?

65
00:04:04.970 --> 00:04:07.831
We have a bias for serving instantly, and

66
00:04:07.831 --> 00:04:12.426
our backup plan is to go to the Internet
and get it over the network.

67
00:04:12.426 --> 00:04:15.294
But this will give us something
to talk about over lunch,

68
00:04:15.294 --> 00:04:18.080
we will have our first
caching strategy in place.

69
00:04:18.080 --> 00:04:20.226
Our app will boot much faster, and

70
00:04:20.226 --> 00:04:25.041
we're gonna work our way towards this
thing operating completely offline.

71
00:04:25.041 --> 00:04:27.590
That's where we're going
in the early afternoon.

