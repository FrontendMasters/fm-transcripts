WEBVTT

1
00:00:00.000 --> 00:00:04.059
&gt;&gt; Mike North: Let's put this into
practice in a more large-scale way.

2
00:00:04.059 --> 00:00:09.447
This is a very popular pattern that
will apply to our app in order

3
00:00:09.447 --> 00:00:14.642
to radically increase return
visits through time, right?

4
00:00:14.642 --> 00:00:18.046
As soon as the service
worker is activated,

5
00:00:18.046 --> 00:00:22.278
they're not going to have to
go to the outside world for

6
00:00:22.278 --> 00:00:26.890
JavaScript or CSS anymore,
regardless of the HTTP cache.

7
00:00:26.890 --> 00:00:29.239
And this is a technique
that we call pre-caching.

8
00:00:29.239 --> 00:00:34.474
So, let's imagine this as a sort of
a conversation between the cache,

9
00:00:34.474 --> 00:00:38.570
the service worker cache and
the application.

10
00:00:38.570 --> 00:00:41.621
So we begin by providing
the cache with some way

11
00:00:41.621 --> 00:00:45.779
of getting information about
resources we know at build time.

12
00:00:45.779 --> 00:00:49.202
These wouldn't be those
grocery images necessarily,

13
00:00:49.202 --> 00:00:53.857
because as we scale up to a million
groceries, those we'd wanna host on a CDN

14
00:00:53.857 --> 00:00:58.689
somewhere, and we might add a couple
more while the service worker is active.

15
00:00:58.689 --> 00:01:02.779
However, maybe the home screen icons,
we know about those at build time.

16
00:01:02.779 --> 00:01:07.006
We know about the JavaScript we built,
we know about the web app manifest,

17
00:01:07.006 --> 00:01:08.090
things like that.

18
00:01:08.090 --> 00:01:11.851
So those are sort of things that
are part of our application,

19
00:01:11.851 --> 00:01:15.710
they're the things that are in
the dist folder, if you will.

20
00:01:15.710 --> 00:01:19.959
So as part of the install process,
it's gonna go and

21
00:01:19.959 --> 00:01:22.670
download that stuff in advance.

22
00:01:22.670 --> 00:01:27.256
And then, by the time the app asks for
something it's going to return it

23
00:01:27.256 --> 00:01:31.010
immediately without going to
the outside world to get it.

24
00:01:31.010 --> 00:01:36.458
So essentially what this means, is if
you deploy a new version of your app and

25
00:01:36.458 --> 00:01:39.865
you have some logic in place for
pre-caching,

26
00:01:39.865 --> 00:01:45.759
your service worker will be sort of, we'll
call it version one of the app is live.

27
00:01:45.759 --> 00:01:51.030
As you deploy version two of the service
worker and your application,

28
00:01:51.030 --> 00:01:57.393
the service worker is gonna be installed,
right, while version one is still live.

29
00:01:57.393 --> 00:02:00.812
And it's gonna go and
download version two of your JavaScript.

30
00:02:00.812 --> 00:02:04.850
And then, when the user comes
back that will be ready to go.

31
00:02:04.850 --> 00:02:10.534
So, this is a great tradeoff between being
slightly out of date but that's the price

32
00:02:10.534 --> 00:02:15.510
you pay for a nearly instant boot,
because that script is already there.

33
00:02:15.510 --> 00:02:20.151
And these are generally like, you can
focus on the heaviest assets that are part

34
00:02:20.151 --> 00:02:23.000
of your app,
usually it's the script, right?

35
00:02:23.000 --> 00:02:24.368
Or maybe it's like,

36
00:02:24.368 --> 00:02:29.380
have you ever seen these sites that
have a fuzzed up background video?

37
00:02:29.380 --> 00:02:33.170
That is not a trivial amount
of data to go and get that.

38
00:02:33.170 --> 00:02:37.568
And so you might wanna say, we're only
gonna show that on the page, the next

39
00:02:37.568 --> 00:02:41.930
version of that, once we've downloaded
it in the background in advance.

40
00:02:41.930 --> 00:02:45.901
So it's no longer on the critical
path to that page load, right?

41
00:02:45.901 --> 00:02:50.766
You're sort of you're a little bit out of
date showing that old application until

42
00:02:50.766 --> 00:02:52.470
you got you're like ready.

43
00:02:52.470 --> 00:02:56.754
And need of app style like we're
installing the next version, and

44
00:02:56.754 --> 00:03:00.210
then the next time you launch
it you'll be good to go.

45
00:03:00.210 --> 00:03:04.904
&gt;&gt; Speaker 2: And downloading short
video files would be outside of that

46
00:03:04.904 --> 00:03:06.737
6% range for start.

47
00:03:06.737 --> 00:03:08.716
&gt;&gt; Mike North: The 6% range?

48
00:03:08.716 --> 00:03:13.256
&gt;&gt; Speaker 2: I think Steve mentioned-
&gt;&gt; Speaker 3: Chrome budgets you about 6%

49
00:03:13.256 --> 00:03:16.699
of available storage, officially.

50
00:03:16.699 --> 00:03:23.840
&gt;&gt; Mike North: So that can be
a reasonable amount for you to store.

51
00:03:23.840 --> 00:03:28.833
If your video, usually it's gonna
be like a low resolution video, and

52
00:03:28.833 --> 00:03:33.577
you've stripped the audio track away,
you might be able to get that

53
00:03:33.577 --> 00:03:38.010
down to the 11 megabyte mark and
that is gonna be in the range.

54
00:03:38.010 --> 00:03:41.389
Just to give you an idea, IndexedDB,
which we'll talk about later,

55
00:03:41.389 --> 00:03:42.890
you get about 50 megabytes.

56
00:03:42.890 --> 00:03:45.095
Local storage you get
about three megabytes,

57
00:03:45.095 --> 00:03:47.249
although it varies from
browser to browser.

58
00:03:47.249 --> 00:03:52.151
A cookie, you start getting funny looks
from other developers when you start to

59
00:03:52.151 --> 00:03:56.981
approach one megabyte, there's even
a word for them called super cookies and

60
00:03:56.981 --> 00:03:58.679
they're a bad, bad idea.

61
00:03:58.679 --> 00:04:02.647
But, this is in the 50 and up range,

62
00:04:02.647 --> 00:04:10.720
just because that 100% of which we get
6 is not usually a trivial amount.

63
00:04:10.720 --> 00:04:15.133
So it might be like Chrome can
cache half a gigabyte of data,

64
00:04:15.133 --> 00:04:17.969
that's for the HTTP cache and stuff.

65
00:04:17.969 --> 00:04:22.825
And there you've got where
that be 30 megs to work with.

66
00:04:27.965 --> 00:04:33.963
&gt;&gt; Mike North: Steve's put together a
great little demo of using the cache API.

67
00:04:33.963 --> 00:04:38.641
If you have the slides click on this link,
check out the glitch, and

68
00:04:38.641 --> 00:04:41.528
look at in particular the fetch handler.

69
00:04:41.528 --> 00:04:46.076
I'm gonna kick out to that so

70
00:04:46.076 --> 00:04:51.580
we can kinda take a look together.

71
00:04:58.530 --> 00:05:00.281
&gt;&gt; Mike North: So here's the glitch, and

72
00:05:00.281 --> 00:05:03.870
you see it's like Steve likes
the Beatles apparently.

73
00:05:03.870 --> 00:05:06.500
We're using the Beatles image again.

74
00:05:06.500 --> 00:05:09.730
And this is really
the interesting part to look at.

75
00:05:09.730 --> 00:05:13.815
The event respond with right here, so

76
00:05:13.815 --> 00:05:17.780
this as we know, it takes a promise.

77
00:05:17.780 --> 00:05:24.017
And what we're gonna do is, in the event
that we find something in the cash,

78
00:05:24.017 --> 00:05:30.741
right, which means that this, the promise
returned by cashes.match returns,

79
00:05:30.741 --> 00:05:35.140
that promise resolves to
a truthy response, right?

80
00:05:35.140 --> 00:05:37.880
It doesn't resolve the undefined.

81
00:05:37.880 --> 00:05:39.771
We will end up using that response,

82
00:05:39.771 --> 00:05:42.110
otherwise we will fall
back to the network.

83
00:05:42.110 --> 00:05:44.105
And in the install hook,

84
00:05:44.105 --> 00:05:49.150
he's got a list of assets he
knows about at build time, right?

85
00:05:49.150 --> 00:05:53.727
So he's got the style.css, and
client js, and the beetles url,

86
00:05:53.727 --> 00:05:56.280
which is this image that's on a CDN.

87
00:05:56.280 --> 00:06:00.803
So, as part of the install
process this service worker is

88
00:06:00.803 --> 00:06:05.517
guaranteed to go and get the stuff,
put it in the cache, and

89
00:06:05.517 --> 00:06:10.629
by the time it activates,
we know that this cache is populated.

90
00:06:10.629 --> 00:06:14.713
That is the point of having
the ability to use promises and

91
00:06:14.713 --> 00:06:17.360
have this multi-faced life cycle.

92
00:06:17.360 --> 00:06:21.900
The value of that is having a guarantee
that by the time we're in activate,

93
00:06:21.900 --> 00:06:24.291
install has completed successfully.

94
00:06:24.291 --> 00:06:29.282
And if something goes wrong,
like if we hit a four to four here, or for

95
00:06:29.282 --> 00:06:33.502
some reason there's a certificate error,
or whatever,

96
00:06:33.502 --> 00:06:36.020
you will never activate, right?

97
00:06:36.020 --> 00:06:40.080
The old service worker which activated
successfully because it installed

98
00:06:40.080 --> 00:06:42.470
successfully, that will remain in place.

99
00:06:42.470 --> 00:06:47.679
So this is also a safety
issue preventing potentially

100
00:06:47.679 --> 00:06:52.780
a bad worker from being
promoted to the active role.

101
00:06:52.780 --> 00:06:59.210
So this is a nice and
simple example of precaching, right?

102
00:06:59.210 --> 00:07:04.014
And we're going to in the next exercise
do something very similar to this,

103
00:07:04.014 --> 00:07:09.030
the only difference is I've made
it more of a real world scenario.

104
00:07:09.030 --> 00:07:12.916
In that we don't have this
hard coded array here,

105
00:07:12.916 --> 00:07:18.655
because remember we're using
the immutable content caching strategy,

106
00:07:18.655 --> 00:07:23.112
we have this fingerprints in
the name of our JavaScript.

107
00:07:23.112 --> 00:07:27.580
So we actually have to go in our service
worker, fetch a JSON file that has

108
00:07:27.580 --> 00:07:31.480
information about all of the stuff
that we should pre-cache.

109
00:07:31.480 --> 00:07:36.360
And you would do that fetch when
it comes back, use the contents of

110
00:07:36.360 --> 00:07:41.261
that JSON file to then add all of
the things that are appropriate.

111
00:07:41.261 --> 00:07:44.411
And you’ll have to sort
through a little bit cuz, for

112
00:07:44.411 --> 00:07:48.964
example there’s a source map there,
you may not wanna go and precache that.

113
00:07:48.964 --> 00:07:52.970
I mean, there may or
may not be harm to that, we’ll find out.

114
00:07:52.970 --> 00:07:58.091
Does that make sense to everybody?

115
00:07:58.091 --> 00:08:02.470
&gt;&gt; Speaker 4: Will call fetch
on each of the parameters?

116
00:08:02.470 --> 00:08:07.749
&gt;&gt; Mike North: Steve has been alluding
to this, and I just wanna reinforce it.

117
00:08:07.749 --> 00:08:12.403
When we talk about a request,
we can either build a request or

118
00:08:12.403 --> 00:08:17.440
we can use arguments that are passed
to the request constructor.

119
00:08:17.440 --> 00:08:23.841
And in this case, we know that when we
build the request we can pass it to URL,

120
00:08:23.841 --> 00:08:28.460
or we can give it an object
that has a URL property on it.

121
00:08:28.460 --> 00:08:33.790
So this here, we could add something here
like, or I can, I guess I can forget,

122
00:08:33.790 --> 00:08:38.087
but right at this cursor,
I could write new capital R request and

123
00:08:38.087 --> 00:08:42.010
be more deliberate and
explicit about constructing one.

124
00:08:42.010 --> 00:08:46.148
But, think of it as the same
things that you pass to fetch,

125
00:08:46.148 --> 00:08:50.549
you can use here, and
you can use in the request constructor.

126
00:08:50.549 --> 00:08:54.189
They're all sort of representations
of that object, and

127
00:08:54.189 --> 00:08:59.030
the full-fledged object will be created
on the fly for you inside this code.

