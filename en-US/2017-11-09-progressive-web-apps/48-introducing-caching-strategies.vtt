WEBVTT

1
00:00:00.060 --> 00:00:04.780
&gt;&gt; Mike North: Like Steve mentioned
with the extensible web manifesto,

2
00:00:04.780 --> 00:00:07.100
what we have learned so far.

3
00:00:07.100 --> 00:00:10.484
They've been the ingredients
that we can use

4
00:00:10.484 --> 00:00:14.854
to compose together a caching
strategy that works for us.

5
00:00:14.854 --> 00:00:18.984
And hopefully, this fallback image
exercise we just went through,

6
00:00:18.984 --> 00:00:20.559
helps us understand how.

7
00:00:20.559 --> 00:00:25.211
For that one particular case where we
want, in the event of a four four.

8
00:00:25.211 --> 00:00:29.558
Or potentially if it's taking a really
long time to download that image,

9
00:00:29.558 --> 00:00:32.170
we can handle that in a special way.

10
00:00:32.170 --> 00:00:34.010
But as you may suspect,

11
00:00:34.010 --> 00:00:39.833
we have to treat different resources
with different caching strategies.

12
00:00:39.833 --> 00:00:44.310
So I'm going to take us through
from some very rudimentary,

13
00:00:44.310 --> 00:00:47.950
almost to the point of
useless caching strategies.

14
00:00:47.950 --> 00:00:53.428
All the way to things that
are regular practices in large scale

15
00:00:53.428 --> 00:01:00.079
apps which employ a service worker in
order to improve their performance.

16
00:01:00.079 --> 00:01:05.777
And here's the first one,
this is probably the most useless one,

17
00:01:05.777 --> 00:01:10.270
and we call this the cache-only
caching strategy.

18
00:01:10.270 --> 00:01:13.902
And the idea here is that when
receive this fetch event,

19
00:01:13.902 --> 00:01:18.707
we're going to reach into the cache and
respond with whatever's there.

20
00:01:18.707 --> 00:01:23.097
So essentially we're never looking to
the outside network to see if there is

21
00:01:23.097 --> 00:01:24.150
new data.

22
00:01:24.150 --> 00:01:27.090
Now this may be useful, but
it would have to be for

23
00:01:27.090 --> 00:01:29.810
example, in this case of
this fall back image.

24
00:01:29.810 --> 00:01:31.660
If we put something in the cache and

25
00:01:31.660 --> 00:01:36.600
then maybe we only updated
it in the case of install.

26
00:01:36.600 --> 00:01:41.550
Like it's a resource, maybe it's a logo
that like, we don't expect to change ever.

27
00:01:41.550 --> 00:01:46.320
So we go and download it once and
then until we're in this mode where we

28
00:01:46.320 --> 00:01:51.450
want to clear up all of
the dirty old stale cache stuff.

29
00:01:51.450 --> 00:01:53.244
And repopulate from scratch,

30
00:01:53.244 --> 00:01:56.631
we're never going to look to
the outside to get this here.

31
00:01:56.631 --> 00:01:58.894
We're just going into the cache and

32
00:01:58.894 --> 00:02:02.069
you can see that is the only
thing we respond with.

33
00:02:04.139 --> 00:02:07.338
&gt;&gt; Mike North: So not incredibly useful,
although for things that are really,

34
00:02:07.338 --> 00:02:08.629
really, really static.

35
00:02:08.629 --> 00:02:14.479
Like maybe a logo that you don't
expect to change for years.

36
00:02:14.479 --> 00:02:21.930
It is the kind of thing that won't
necessarily work well for us.

37
00:02:21.930 --> 00:02:28.106
So here's sort of the opposite,
it is network-only.

38
00:02:28.106 --> 00:02:35.190
Also useless, because you can think
of this as the equivalent of a no-op.

39
00:02:35.190 --> 00:02:38.886
This is the equivalent
behavior we would get if we

40
00:02:38.886 --> 00:02:42.230
removed that line Event that respond With.

41
00:02:42.230 --> 00:02:47.712
Because in the absence of us
calling event respondWith,

42
00:02:47.712 --> 00:02:53.320
the default behavior is to sort
of let that fetch request.

43
00:02:53.320 --> 00:02:56.270
Pass straight through the service
worker to the outside world.

44
00:02:57.460 --> 00:03:01.272
The only effect that this will have is
that if you look in your network tab,

45
00:03:01.272 --> 00:03:04.670
you're gonna see little gears
next to those network responses.

46
00:03:04.670 --> 00:03:12.350
Because technically the service worker is
getting involved, but it is doing nothing.

47
00:03:12.350 --> 00:03:15.932
This is also like bringing a function
that returns undefined and

48
00:03:15.932 --> 00:03:18.002
you are actually return undefined.

49
00:03:18.002 --> 00:03:20.178
You don't need that line of code,

50
00:03:20.178 --> 00:03:23.569
because it is what will happen
in the absence of code.

51
00:03:25.420 --> 00:03:28.225
&gt;&gt; Mike North: So
these are sort of the two extremes,

52
00:03:28.225 --> 00:03:32.880
never looking to the network,
always looking to the network.

53
00:03:32.880 --> 00:03:37.878
But we can start to compose these
together to make them look a little bit

54
00:03:37.878 --> 00:03:39.329
more interesting.

55
00:03:39.329 --> 00:03:45.330
And as Steve pointed out in his
solution to the fallback image problem.

56
00:03:46.520 --> 00:03:50.897
We have to keep in mind we have
really one fetch event handler and

57
00:03:50.897 --> 00:03:55.620
things are gonna get pretty busy in
that function that we put there.

58
00:03:55.620 --> 00:04:00.249
So a great pattern is to sort of have
any checks that you do like this check

59
00:04:00.249 --> 00:04:02.110
against the accept header.

60
00:04:02.110 --> 00:04:06.220
To see if this is like the mimed
type of this thing as we desire for

61
00:04:06.220 --> 00:04:08.890
that to be an image that comes back.

62
00:04:08.890 --> 00:04:11.620
Those might be in the fetch handler and

63
00:04:11.620 --> 00:04:17.089
we should sort of delegate control of
actually doing the interesting work.

64
00:04:17.089 --> 00:04:21.610
To functions that are outside
of that fetch handler.

65
00:04:21.610 --> 00:04:25.097
So here's a simple example,
and we're not at the point yet

66
00:04:25.097 --> 00:04:28.749
where we can start refactoring
this out of the fetch handler.

67
00:04:28.749 --> 00:04:33.789
But this is what we call
a cache with a network backup.

68
00:04:33.789 --> 00:04:37.791
And this would basically mean that
if we find something in our cache,

69
00:04:37.791 --> 00:04:39.520
we will go ahead and use that.

70
00:04:39.520 --> 00:04:43.893
And we're using the logical OR
operator here, in order to.

71
00:04:43.893 --> 00:04:46.542
In the event that that response is falsey,

72
00:04:46.542 --> 00:04:51.040
which means that there's nothing in
the cache to satisfy that request.

73
00:04:51.040 --> 00:04:55.952
We're going to make a new request
to the outside world with

74
00:04:55.952 --> 00:04:59.380
that fetch(event.request) there.

75
00:04:59.380 --> 00:05:04.137
This might be useful in the event
that potentially we have some

76
00:05:04.137 --> 00:05:06.430
other logic somewhere else.

77
00:05:06.430 --> 00:05:12.630
That is caching things as we encounter
them, perhaps these grocery images, right?

78
00:05:12.630 --> 00:05:15.270
The first time we download
one of these images,

79
00:05:15.270 --> 00:05:18.110
we'll let that pass through
to the outside world.

80
00:05:18.110 --> 00:05:21.501
We'll return that response
using event.respondWith, but

81
00:05:21.501 --> 00:05:23.530
then we'll also sort of branch off.

82
00:05:23.530 --> 00:05:26.983
And we'll put that in the cache for
later, so the next time you ask for it,

83
00:05:26.983 --> 00:05:29.000
we can serve it up instantly.

84
00:05:29.000 --> 00:05:31.653
In that case you might have
a line of code like this,

85
00:05:31.653 --> 00:05:35.690
that tries to hit the cache because this
might be an image we've seen before.

86
00:05:35.690 --> 00:05:40.300
In the event that we haven't seen it,
go to the outside world and get it.

87
00:05:40.300 --> 00:05:42.600
So now we're starting to see that, hey,

88
00:05:42.600 --> 00:05:45.439
this would really speed
up those image downloads.

89
00:05:45.439 --> 00:05:50.197
You're only paying
the price of downloading

90
00:05:50.197 --> 00:05:53.835
it once per instance of the cache.

91
00:05:53.835 --> 00:05:56.190
At least until we clear it out and
start over.

