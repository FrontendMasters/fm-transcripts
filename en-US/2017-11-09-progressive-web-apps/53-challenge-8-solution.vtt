WEBVTT

1
00:00:00.260 --> 00:00:01.410
&gt;&gt; Mike North: All right, welcome back.

2
00:00:01.410 --> 00:00:02.750
First, an apology,

3
00:00:02.750 --> 00:00:07.370
there is a really like esoteric problem
that some of you may have run into.

4
00:00:07.370 --> 00:00:11.110
And hopefully, if you're watching on the
video course now, you did not hit this.

5
00:00:12.130 --> 00:00:18.180
But it involves course and
credential to requests.

6
00:00:18.180 --> 00:00:23.090
And it is one like intersection
of two concepts where

7
00:00:23.090 --> 00:00:27.730
it could lead to some unsafe situations,
and browsers protect us from that.

8
00:00:27.730 --> 00:00:30.440
But it may have been interfering
with our ability to go and

9
00:00:30.440 --> 00:00:33.540
get those fallback images.

10
00:00:33.540 --> 00:00:38.190
So I have here on MDN the text
that you can find later, so

11
00:00:38.190 --> 00:00:39.950
that we can read about it.

12
00:00:39.950 --> 00:00:44.360
The thing to search for
is credentialed requests and wildcards.

13
00:00:44.360 --> 00:00:49.070
And the idea here is that if you have a
wildcard course header which is basically

14
00:00:49.070 --> 00:00:54.768
that our little API is saying,
it is safe to hit me from any origin,

15
00:00:54.768 --> 00:00:59.540
including dangerous scammer.cc.net.

16
00:00:59.540 --> 00:01:03.680
And you would never want to do this
outside the context of a workshop.

17
00:01:03.680 --> 00:01:08.824
We have it this way so
that even if you wanna use 127.0.0.1 or

18
00:01:08.824 --> 00:01:13.357
localhost or lvh.me,
it will work for all of these things.

19
00:01:13.357 --> 00:01:16.187
However, the browser is
going to block us and

20
00:01:16.187 --> 00:01:20.654
unfortunately not give us a whole lot
of useful feedback about why it's

21
00:01:20.654 --> 00:01:25.960
blocking us because we are making
what is called a credential request.

22
00:01:25.960 --> 00:01:30.848
You may be making a credentialed
request meaning your cookies

23
00:01:30.848 --> 00:01:36.300
are passed along to the server as you
go and fetch one of those images.

24
00:01:36.300 --> 00:01:41.589
And when we get a response that
has a wild card course header,

25
00:01:41.589 --> 00:01:46.256
we're not allowed to let that
happen in the context of

26
00:01:46.256 --> 00:01:50.122
sending our cookies along for the ride.

27
00:01:50.122 --> 00:01:53.850
This is for your safety so
that I can't just make my own page with

28
00:01:53.850 --> 00:01:57.550
a bunch of Ajax in it that's gonna
talk to your online bank and

29
00:01:57.550 --> 00:02:01.290
your cookies going to authenticate you
as I do a whole bunch of bad stuff.

30
00:02:01.290 --> 00:02:03.460
So you may have run into that problem,

31
00:02:03.460 --> 00:02:06.510
I'm gonna show you how to
solve it really quickly.

32
00:02:08.580 --> 00:02:15.901
This actually pertained more to
the last exercise rather than this one,

33
00:02:15.901 --> 00:02:20.832
but we will go ahead and
catch up really quickly.

34
00:02:20.832 --> 00:02:28.320
So as we were looking for that fallback
image right here, there's our fetch right?

35
00:02:28.320 --> 00:02:31.606
Now you see here mine's working
because there's a fix for the API,

36
00:02:31.606 --> 00:02:33.228
it's been checked into master.

37
00:02:33.228 --> 00:02:36.195
You may not have pulled this in yet and
that's why you would hit this problem.

38
00:02:36.195 --> 00:02:41.493
The way we would make sure
that credentials were

39
00:02:41.493 --> 00:02:47.860
not sent along is like this,
credentials omit.

40
00:02:47.860 --> 00:02:50.686
So, for example,
you were seeing the fallback images for

41
00:02:50.686 --> 00:02:54.332
every single grocery item on the page,
this might have been your problem.

42
00:02:58.455 --> 00:03:04.910
&gt;&gt; Mike North: I'm gonna leave this in
here just in case people come across this.

43
00:03:04.910 --> 00:03:05.811
&gt;&gt; Speaker 2: What file is that?
&gt;&gt; Mike North: This is

44
00:03:05.811 --> 00:03:08.062
your service worker, SWs.

45
00:03:08.062 --> 00:03:12.080
And I'll say,
in case CORS wild card header.

46
00:03:15.650 --> 00:03:16.932
Sorry about that we fixed it but

47
00:03:16.932 --> 00:03:19.800
we forgot to let you know that there
was a problem and that we fixed it.

48
00:03:21.070 --> 00:03:25.030
With that, let's go into the solution for
a quick boot.

49
00:03:25.030 --> 00:03:29.017
So first thing I'm going to do is
grab this URL from asset manifest and

50
00:03:29.017 --> 00:03:31.790
I'm gonna try and
squeeze that as much as I can.

51
00:03:33.280 --> 00:03:37.300
And I like having this kind of thing,
like a very static-y or

52
00:03:37.300 --> 00:03:44.480
I like this should be a constant on
top of my service work or module.

53
00:03:45.530 --> 00:03:49.711
So asset manifest URL.

54
00:03:50.738 --> 00:03:53.630
&gt;&gt; Mike North: There we go.
All right, so the first thing I wanna do

55
00:03:53.630 --> 00:04:00.440
is I want to go ahead and populate,
I want to get the precache stuff ready.

56
00:04:00.440 --> 00:04:02.060
So I'm gonna do this in two phases.

57
00:04:02.060 --> 00:04:04.920
First, let's download everything we need.

58
00:04:04.920 --> 00:04:08.130
And then second,
I'm gonna worry about in my Fetch Handler,

59
00:04:08.130 --> 00:04:12.050
making some improvements so that I can
take advantage of those downloads.

60
00:04:12.050 --> 00:04:13.150
So let's proceed.

61
00:04:14.500 --> 00:04:17.560
Now we've run into
a situation where Steve and

62
00:04:17.560 --> 00:04:22.070
his solution for the fallback images,
he's put this promise in Wade Intel.

63
00:04:23.240 --> 00:04:26.970
Now we've reached the very common
situation where we need more than one

64
00:04:26.970 --> 00:04:28.560
thing we're waiting on.

65
00:04:28.560 --> 00:04:33.210
We basically want to kick off a bunch
of things in parallel, right?

66
00:04:33.210 --> 00:04:37.790
Go download that fallback image and
also download these assets I know about.

67
00:04:39.050 --> 00:04:40.700
We want them to happen in parallel.

68
00:04:40.700 --> 00:04:41.910
We have a nice little helper here.

69
00:04:42.940 --> 00:04:46.350
Promise that all takes
an array of promises and

70
00:04:46.350 --> 00:04:49.430
it will essentially wait for
everything to result.

71
00:04:49.430 --> 00:04:54.655
So we kick them all off,
as far as we're concerned at once,

72
00:04:54.655 --> 00:04:59.130
it will be kicked off in sequence very,
very close together.

73
00:05:00.440 --> 00:05:06.375
And now, so this is like promise
number one, get the fallback image.

74
00:05:06.375 --> 00:05:10.400
And then promise number two is populate

75
00:05:10.400 --> 00:05:16.040
the precache stuff and
that is gonna be its function, this

76
00:05:16.040 --> 00:05:21.180
is gonna get a little bit more involved
than Steve's little one line thing.

77
00:05:21.180 --> 00:05:25.210
So we don't want that complexity to
start cluttering our install handler.

78
00:05:28.070 --> 00:05:29.740
So we're just gonna call it that and

79
00:05:29.740 --> 00:05:35.160
we will add in argument as
we find that we need them.

80
00:05:38.490 --> 00:05:44.460
So the first thing is this is
gonna return a promise, right?

81
00:05:44.460 --> 00:05:47.260
And this is part of what's
gonna help us with,

82
00:05:47.260 --> 00:05:49.630
if you're interested in learning
more about Visual Studio code,

83
00:05:49.630 --> 00:05:53.940
you can see it's helping us see that
now it knows this returns a promise.

84
00:05:53.940 --> 00:05:57.230
If it returned like a string,
we might see,

85
00:05:57.230 --> 00:05:59.620
I guess it's not quite that smart yet.

86
00:05:59.620 --> 00:06:02.180
Sometimes you will see
like feedback saying,

87
00:06:02.180 --> 00:06:07.963
you probably don't wanna pass that
into the promised.all function.

88
00:06:07.963 --> 00:06:11.000
So step one, get the asset manifest,
how should I go and do that?

89
00:06:13.820 --> 00:06:14.666
&gt;&gt; Mike North: Fetch.

90
00:06:14.666 --> 00:06:18.347
Wonderful, so it's a get request,

91
00:06:18.347 --> 00:06:23.588
I'm not gonna worry about
any options passed to it.

92
00:06:23.588 --> 00:06:28.540
I don't think I'll need them,
so get the response,

93
00:06:28.540 --> 00:06:31.402
turn it into JSON, and then,

94
00:06:38.418 --> 00:06:43.552
&gt;&gt; Mike North: We've got jsonAssets or

95
00:06:43.552 --> 00:06:48.200
something like that.

96
00:06:51.140 --> 00:06:52.870
I'm just gonna put a debugger here so

97
00:06:53.940 --> 00:06:57.960
we can iteratively see what we're
working with as we go along.

98
00:06:57.960 --> 00:06:58.860
Let me make sure our server is up.

99
00:07:02.708 --> 00:07:03.667
&gt;&gt; Mike North: Refresh.

100
00:07:07.015 --> 00:07:09.050
&gt;&gt; Mike North: I don't wanna be offline.

101
00:07:12.800 --> 00:07:17.931
&gt;&gt; Mike North: It's just
building right now or

102
00:07:17.931 --> 00:07:20.977
it should be perm.

103
00:07:22.473 --> 00:07:25.568
&gt;&gt; Mike North: All right, I'm not sure,

104
00:07:25.568 --> 00:07:31.096
we'll clear the caches,
see what's going on.

105
00:07:31.096 --> 00:07:36.690
I'm getting an empty response,
&gt;&gt; Mike North: Don't see build error.

106
00:07:45.107 --> 00:07:47.680
&gt;&gt; Mike North: There you,
I'm not using https.

107
00:07:48.980 --> 00:07:49.480
There we go.

108
00:07:54.226 --> 00:07:55.976
All right, so now we're in this debugger.

109
00:07:55.976 --> 00:07:58.986
And here's what our asset
manifest looks like.

110
00:07:58.986 --> 00:08:02.066
This is how you want this object to look.

111
00:08:02.066 --> 00:08:07.070
So For our keys, we have things
that don't change, app.js that's

112
00:08:07.070 --> 00:08:12.850
always sort of we can call it
the canonical name of this resource.

113
00:08:12.850 --> 00:08:15.470
Right, it's how we would
refer to it as developers.

114
00:08:15.470 --> 00:08:19.480
In reality, when this is built,
we get that long fingerprint there so

115
00:08:19.480 --> 00:08:23.630
that we can use cache busting effectively.

116
00:08:23.630 --> 00:08:28.507
We can take advantage of this
immutable content passion strategy.

117
00:08:28.507 --> 00:08:33.320
And what these lessons to do is
like we know we want app.js,

118
00:08:33.320 --> 00:08:37.458
so we can now get the real
file name of that file, and

119
00:08:37.458 --> 00:08:41.460
now we have the ability to download it.

120
00:08:41.460 --> 00:08:46.353
So, I don't know if you look around and
saw that we might have a couple little

121
00:08:46.353 --> 00:08:51.351
clues here
&gt;&gt; Mike North: In here,

122
00:08:51.351 --> 00:08:53.484
there were a couple little helpers.

123
00:08:53.484 --> 00:08:58.501
If you were looking around and
you found like there was this clear method

124
00:08:58.501 --> 00:09:03.530
like remove unused caches, but
we've got an asset manifest URL here.

125
00:09:04.650 --> 00:09:06.350
We've got RESOURCES TO PRECACHE.

126
00:09:06.350 --> 00:09:09.579
So, if you looked at these,
they might be a sign that like,

127
00:09:10.740 --> 00:09:15.380
this might be like a wait
list of things to bring in.

128
00:09:16.730 --> 00:09:20.944
Right, it may be like,
this is the set of keys to look for

129
00:09:20.944 --> 00:09:23.384
in this asset manifest object.

130
00:09:24.659 --> 00:09:26.770
&gt;&gt; Mike North: And like those
are the things we should go and fetch.

131
00:09:28.260 --> 00:09:34.470
So, what I'm gonna do,
let's actually move this out to this other

132
00:09:34.470 --> 00:09:39.571
file since I have it sorta
half completed there, const.

133
00:09:39.571 --> 00:09:44.435
So I think this is the entry point here,
pre-fetched static assets.

134
00:09:46.040 --> 00:09:47.930
&gt;&gt; Mike North: We'll go through
it line by line, don't worry.

135
00:09:51.655 --> 00:09:56.673
&gt;&gt; Mike North: Sorry,
import from caches.js,

136
00:09:56.673 --> 00:10:00.140
move that up to the top.

137
00:10:09.822 --> 00:10:15.300
&gt;&gt; Mike North: Wonderful, all right,
so in here, this is where we enter.

138
00:10:15.300 --> 00:10:18.590
And ultimately,
like we're returning a promise as always.

139
00:10:18.590 --> 00:10:20.920
First thing we're gonna do
is fetch that manifest.

140
00:10:20.920 --> 00:10:24.750
We got response.json,
we've got our assetManifestJson.

141
00:10:24.750 --> 00:10:26.720
Now we need to do something with it.

142
00:10:26.720 --> 00:10:30.400
And, this list of little
regular expressions here,

143
00:10:30.400 --> 00:10:35.700
if you've used these before like this is
a good use of regular expressions, right?

144
00:10:37.250 --> 00:10:41.350
Because in this case, like,
I can get any of the images.

145
00:10:41.350 --> 00:10:43.260
Basically, this is the whole image folder.

146
00:10:43.260 --> 00:10:45.440
This will be all of my like,
launch images,

147
00:10:45.440 --> 00:10:48.080
I don't have to enumerate them one by one.

148
00:10:48.080 --> 00:10:50.130
So I've got those resources to cache and

149
00:10:50.130 --> 00:10:52.710
then I've got a little
helper function here.

150
00:10:52.710 --> 00:10:56.580
ShouldPrecacheFile, that looks
like it might be something we can

151
00:10:56.580 --> 00:10:59.720
use to check whether
like a given key in that

152
00:10:59.720 --> 00:11:03.940
asset manifest represents something that
we should bother to go and pre-fetch.

153
00:11:03.940 --> 00:11:08.401
So with that, we can do this toPrefetch.

154
00:11:10.836 --> 00:11:12.337
&gt;&gt; Mike North: This is gonna
end up being an array.

155
00:11:12.337 --> 00:11:17.286
That equals Object.keys, this is
the way we get the keys of an object,

156
00:11:17.286 --> 00:11:19.442
the innumerable properties.

157
00:11:19.442 --> 00:11:24.510
And we're going to start with
the assetManifestationJson.

158
00:11:24.510 --> 00:11:31.610
So what this we'll give us is basically
an array with app.css, css.map, and so on.

159
00:11:32.930 --> 00:11:35.054
So we're gonna enumerate over those keys.

160
00:11:37.198 --> 00:11:42.077
&gt;&gt; Mike North: And, we're going to use the
higher order function that's on arrays,

161
00:11:42.077 --> 00:11:44.040
it is called filter.

162
00:11:44.040 --> 00:11:47.653
And we basically pass in
the little tester function, and

163
00:11:47.653 --> 00:11:51.791
that's tested on each element in array and
we get back from this,

164
00:11:51.791 --> 00:11:55.794
a new array of all of those elements for
which that test passes.

165
00:11:55.794 --> 00:12:00.824
And conveniently,
shouldPrecacheFile that is already

166
00:12:00.824 --> 00:12:06.166
kind of aligned with the expected
convention for this test or

167
00:12:06.166 --> 00:12:11.104
function, function that
receives a single argument.

168
00:12:13.000 --> 00:12:17.188
&gt;&gt; Mike North: So now,
let's see where we left off here.

169
00:12:20.336 --> 00:12:24.297
&gt;&gt; Mike North: Sorry, so
one thing you'll be aware of is that,

170
00:12:24.297 --> 00:12:27.968
if you have a break point
in a service worker,

171
00:12:27.968 --> 00:12:32.910
you may find that it's kind of
difficult to escape from it.

172
00:12:32.910 --> 00:12:36.010
So this is your friend,
deactivate break point.

173
00:12:36.010 --> 00:12:40.480
So if you're stopped at a particular
place, and you wanna sort of

174
00:12:40.480 --> 00:12:44.480
play through and go and get the next
service worker, oftentimes he'll say like,

175
00:12:44.480 --> 00:12:49.280
forget about break points for now, proceed
and then turn it back on, start fresh.

176
00:12:50.690 --> 00:12:54.320
All right, so here, let's see what
to prefetch looks like, great.

177
00:12:54.320 --> 00:12:56.950
So that looks like a nice little
subset of those resources.

178
00:12:56.950 --> 00:12:59.120
We're not bothering with the source maps.

179
00:12:59.120 --> 00:13:02.890
That CSS file, it's not a trick but

180
00:13:02.890 --> 00:13:06.230
it's just there as bi-product
of the build process.

181
00:13:06.230 --> 00:13:10.530
We don't need the CSS files,
it's all baked into index.html,

182
00:13:10.530 --> 00:13:13.960
so now we've got a list
things to prefetch.

183
00:13:13.960 --> 00:13:19.234
Conveniently, these are already
in a form where we can pass

184
00:13:19.234 --> 00:13:24.731
them to the cache and say like,
go and get all of these things.

185
00:13:26.834 --> 00:13:32.589
&gt;&gt; Mike North: So the way we do this, we
need a new cache here and the convection

186
00:13:32.589 --> 00:13:39.730
here like this is me sharing patterns
that work in larger scale apps here.

187
00:13:39.730 --> 00:13:44.058
I've got like a very nice convention for
cache names here, so

188
00:13:44.058 --> 00:13:46.817
I could say, ALL CACHE that prefetch.

189
00:13:46.817 --> 00:13:50.370
And then when it gets like
a version prefetched cache,

190
00:13:50.370 --> 00:13:54.000
here is what those cache names looks like.

191
00:13:54.000 --> 00:13:58.034
If we go to Application&gt;Cache

192
00:13:58.034 --> 00:14:03.146
storage,
&gt;&gt; Mike North: I

193
00:14:03.146 --> 00:14:05.148
guess we don't have one yet,
we're about to.

194
00:14:06.679 --> 00:14:08.590
&gt;&gt; Mike North: It's
the first time we have one.

195
00:14:08.590 --> 00:14:12.379
So we're gonna say caches open and

196
00:14:12.379 --> 00:14:18.266
we pass in the cacheName,
ALL_CACHES.prefetch.

197
00:14:21.174 --> 00:14:22.880
&gt;&gt; Mike North: And that returns a promise.

198
00:14:24.170 --> 00:14:30.120
And that's gonna be,
&gt;&gt; Mike North: That one prefetchCache.

199
00:14:30.120 --> 00:14:33.140
So, can anybody think of
why I might wanna have

200
00:14:33.140 --> 00:14:36.990
multiple caches where I am keeping stuff,
as oppose to one big pile of data?

201
00:14:36.990 --> 00:14:39.618
&gt;&gt; Speaker 3: So that you can have
different strategies for different caches.

202
00:14:39.618 --> 00:14:44.281
&gt;&gt; Mike North: Okay, different strategies
for different caches, that's correct.

203
00:14:44.281 --> 00:14:47.690
Let me it some polish
on that correct point.

204
00:14:48.820 --> 00:14:52.810
Sometimes, why would we have an option
to take the whole set of caches and

205
00:14:52.810 --> 00:14:54.475
try match a request against that?

206
00:14:54.475 --> 00:14:59.295
Oftentimes, we want to try to match
a request against a specific cache, and

207
00:14:59.295 --> 00:15:01.490
then handle that appropriately.

208
00:15:01.490 --> 00:15:04.150
So we have different types of assets and

209
00:15:04.150 --> 00:15:09.308
we want the ability to have like multiple
different piles of things and say,

210
00:15:09.308 --> 00:15:14.157
is this request in any pile, but
rather, are you in the prefetch pile?

211
00:15:15.520 --> 00:15:20.777
&gt;&gt; Mike North: So now we've got
that prefetchCache and we can say,

212
00:15:20.777 --> 00:15:26.170
addAll, and
it's gonna take RequestInfo objects.

213
00:15:26.170 --> 00:15:29.956
This is Visual Studio
code's way of saying,

214
00:15:29.956 --> 00:15:33.650
anything we could pass
to fetch can go here.

215
00:15:33.650 --> 00:15:34.710
This could be URLs,

216
00:15:34.710 --> 00:15:37.800
these could be a request that you build,
anything like that.

217
00:15:37.800 --> 00:15:40.839
In this case, I kinda already got
something that looks appropriate here.

218
00:15:42.819 --> 00:15:47.320
&gt;&gt; Mike North: And, what is addALL return?

219
00:15:47.320 --> 00:15:50.370
No surprise, it returns a promise.

220
00:15:50.370 --> 00:15:52.952
So in the tool tip,
you see that promise boolean,

221
00:15:52.952 --> 00:15:56.536
that's just gonna tell us if things
were added successfully or not.

222
00:15:56.536 --> 00:15:59.161
But we wanna make sure
we've returned that so

223
00:15:59.161 --> 00:16:04.120
that when we eventually say Wait until
prefetch static assets are done,

224
00:16:04.120 --> 00:16:07.040
we'll wait for
the follow routine of logic to happen.

225
00:16:07.040 --> 00:16:09.954
One, we fetch the ASSET_MANIFEST,

226
00:16:09.954 --> 00:16:15.521
we do the potentially asynchronous
thing of converting that into JSON.

227
00:16:15.521 --> 00:16:19.974
Remember, it could be like a streaming
response, not in the case of JSON but

228
00:16:19.974 --> 00:16:23.331
we have to be prepared for
that possibility, all right.

229
00:16:23.331 --> 00:16:26.700
And then that will leave
us with assetManifest.Json.

230
00:16:26.700 --> 00:16:29.675
We're going to synchronously
filter through and

231
00:16:29.675 --> 00:16:33.285
find those appropriate assets
we want to Prefetch and then,

232
00:16:33.285 --> 00:16:38.482
we're going to asynchronously, again,
open the cache, the appropriately cache.

233
00:16:38.482 --> 00:16:42.730
And if it doesn't exist yet,
it'll be created for us on the fly.

234
00:16:42.730 --> 00:16:47.220
And then finally, the last asynchronous
step in the chain is we're going to

235
00:16:48.590 --> 00:16:53.100
basically create requests and begin the
process of adding all of these things to

236
00:16:53.100 --> 00:16:55.460
the cache, and wait for that to complete.

237
00:16:55.460 --> 00:16:59.718
So by the time this promise resolves,
we will have everything precached.

238
00:17:01.409 --> 00:17:03.602
&gt;&gt; Mike North: And
when I say asynchronous,

239
00:17:03.602 --> 00:17:10.092
when you're working in application land,
right, without a service worker.

240
00:17:10.092 --> 00:17:14.360
Most of your asynchronous stuff involves
talking to the outside world and

241
00:17:14.360 --> 00:17:19.670
asynchronous can be often synonymous
with taking a very long time.

242
00:17:19.670 --> 00:17:23.680
These promises can
resolve in micro seconds.

243
00:17:23.680 --> 00:17:28.140
So it may look like well, it's four
things in a row kind of in waterfall.

244
00:17:28.140 --> 00:17:29.948
It is a really short waterfall.

245
00:17:29.948 --> 00:17:34.740
So do not be concerned with
the number of steps in the chain.

246
00:17:34.740 --> 00:17:36.470
The total time elapsed is quite short.

247
00:17:38.220 --> 00:17:41.420
So we've got that in place and
let's see where we're at.

248
00:17:44.420 --> 00:17:48.562
&gt;&gt; Mike North: Update and
reload happen and we are loading,

249
00:17:48.562 --> 00:17:52.922
maybe we are at a break point,
let me make sure.

250
00:17:57.552 --> 00:18:01.521
&gt;&gt; Mike North: Network,
all right, so I've just loaded,

251
00:18:01.521 --> 00:18:05.076
let's take a look what's in the cache.

252
00:18:05.076 --> 00:18:09.239
Currently, there's little Chrome bug where
this little tool here does not update

253
00:18:09.239 --> 00:18:10.135
automatically.

254
00:18:10.135 --> 00:18:16.560
You have to explicitly refresh it and,
I've got a nice new cache created.

255
00:18:16.560 --> 00:18:20.690
It's called FEG-v2-prefetch.

256
00:18:20.690 --> 00:18:25.507
What this means is at the top of this
cache's file, I can increment this

257
00:18:25.507 --> 00:18:30.265
little number here, and all of
a sudden I'm working with version 3.

258
00:18:30.265 --> 00:18:33.859
And that would mean that when it comes
time for like a service worker to clean up

259
00:18:33.859 --> 00:18:36.840
all the old stuff,
all of the version 2 stuff go away.

260
00:18:36.840 --> 00:18:39.650
It's a very common convention
diversion your cache this way.

261
00:18:41.210 --> 00:18:50.143
And if you look at what's in there,
&gt;&gt; Mike North: Nothing is in there,

262
00:18:50.143 --> 00:18:51.948
all right, let's see what's going on.

263
00:18:55.434 --> 00:18:57.770
&gt;&gt; Mike North: Request
failed in service worker.

264
00:18:57.770 --> 00:19:02.188
Let's add a couple of
little debuggers here.

265
00:19:05.461 --> 00:19:07.926
&gt;&gt; Mike North: Registration is defined,
so that's no problem.

266
00:19:10.054 --> 00:19:14.740
&gt;&gt; Mike North: Gonna track this one down,
that's not useful for me, all right.

267
00:19:14.740 --> 00:19:18.570
We'll just put it in some of the places
that things could have gone wrong.

268
00:19:18.570 --> 00:19:22.180
So let's add a debugger,
we've already put a debugger here.

269
00:19:22.180 --> 00:19:25.520
We've seen this toPrefetch array.

270
00:19:25.520 --> 00:19:26.281
Let's try one there.

271
00:19:28.993 --> 00:19:31.176
&gt;&gt; Mike North: And then I'm gonna
bump the version of the cache just so

272
00:19:31.176 --> 00:19:32.038
we get a clean slate.

273
00:19:40.015 --> 00:19:42.190
&gt;&gt; Mike North: All right, so
there's the prefetchCache.

274
00:19:42.190 --> 00:19:47.792
There it is, and we're saying addAll
toPrefetch of that list of things.

275
00:19:47.792 --> 00:19:49.189
Looks okay to me.

276
00:19:54.277 --> 00:19:55.572
&gt;&gt; Mike North: Let's play through.

277
00:19:59.473 --> 00:20:00.383
&gt;&gt; Mike North: Interesting.

278
00:20:07.699 --> 00:20:09.529
&gt;&gt; Mike North: You know what it could be,

279
00:20:09.529 --> 00:20:14.350
let me check out these URLs one
more time with these paths.

280
00:20:14.350 --> 00:20:16.520
app.js okay, anyone spot what's wrong?

281
00:20:17.770 --> 00:20:21.603
I missed a step.

282
00:20:21.603 --> 00:20:23.650
&gt;&gt; Speaker 2: You don't
actually have your hash.

283
00:20:23.650 --> 00:20:27.040
&gt;&gt; Mike North: Yes,
I'm still using the keys of these objects.

284
00:20:27.040 --> 00:20:28.580
There is no file called app.js.

285
00:20:28.580 --> 00:20:31.460
There's app and then that fingerprint.js.

286
00:20:31.460 --> 00:20:35.750
So one last step here, and
I expect this will work.

287
00:20:35.750 --> 00:20:36.823
So we filter through and

288
00:20:36.823 --> 00:20:40.535
then the last thing is we're going to map
which is another higher order function.

289
00:20:40.535 --> 00:20:42.553
We're gonna take those keys and

290
00:20:42.553 --> 00:20:47.493
I'm just gonna use that ASSET_MANIFEST
object to convert them into values.

291
00:20:50.387 --> 00:20:51.390
&gt;&gt; Mike North: Just like that.

292
00:20:53.050 --> 00:20:54.643
All right, let's see where we're at.

293
00:20:57.544 --> 00:21:00.515
&gt;&gt; Mike North: And now,
I have to put it through,

294
00:21:03.816 --> 00:21:06.061
&gt;&gt; Mike North: prefetchCache to prefetch,

295
00:21:06.061 --> 00:21:07.951
that looks a lot better.

296
00:21:12.012 --> 00:21:13.133
&gt;&gt; Mike North: Let me get rid of this.

297
00:21:17.021 --> 00:21:19.221
&gt;&gt; Mike North: All right, let's check
out our cache and see where we're at.

298
00:21:28.122 --> 00:21:33.740
&gt;&gt; Mike North: There we go, v3 prefetch,
I incremented the cache, right?

299
00:21:33.740 --> 00:21:36.170
So, we've got these in here,
that's looking good.

300
00:21:36.170 --> 00:21:39.030
I wanna make sure that this
stuff gets cleaned up,

301
00:21:39.030 --> 00:21:41.110
really easy change that we can make.

302
00:21:41.110 --> 00:21:43.647
I just need this function here.

303
00:21:43.647 --> 00:21:47.360
I literally like copy and
paste this all over the place.

304
00:21:47.360 --> 00:21:49.800
There's a more efficient way to do this.

305
00:21:49.800 --> 00:21:54.304
But I do enjoy having this console log
where like, instead of going through and

306
00:21:54.304 --> 00:21:56.283
deleting the caches one at a time,

307
00:21:56.283 --> 00:21:59.301
that sort of accumulates
a list of things to delete.

308
00:21:59.301 --> 00:22:00.660
So you get some feedback here.

309
00:22:01.880 --> 00:22:05.826
And remember, it's happening in a separate
thread this is not going to like interfere

310
00:22:05.826 --> 00:22:07.348
with your boot time or anything.

311
00:22:07.348 --> 00:22:13.036
The install process of the service worker,
it kind of can take it sweet time.

312
00:22:13.036 --> 00:22:16.486
If it takes five seconds, all you need
is your user to be on the page for

313
00:22:16.486 --> 00:22:18.820
five seconds while the app
is already booted.

314
00:22:20.500 --> 00:22:24.610
So inactivate, we're going to

315
00:22:27.150 --> 00:22:34.092
say, we've created an event here and
by the time we've reached activate,

316
00:22:34.092 --> 00:22:38.480
we are assured that the prefetchCache
has been populated.

317
00:22:40.780 --> 00:22:44.808
So we're gonna say wait until
this takes a promise, and

318
00:22:44.808 --> 00:22:47.721
we're gonna say remove unused caches,

319
00:22:47.721 --> 00:22:52.707
we're gonna pass in all caches, and
I'll take care of that up here.

320
00:22:52.707 --> 00:22:54.370
Actually, it's all caches list.

321
00:22:56.380 --> 00:23:01.513
So, I've given you here
a good pattern to use.

322
00:23:01.513 --> 00:23:05.310
These constants and stuff,
they're at the top of that caches file.

323
00:23:06.480 --> 00:23:09.920
That will help you have some sanity
in your service worker design.

324
00:23:12.570 --> 00:23:17.050
And we don't need this anymore,
let's see where we at now.

325
00:23:17.050 --> 00:23:20.410
So now,
I'm gonna increment one more just for fun.

326
00:23:22.630 --> 00:23:27.008
And I expect when we look, we should see a
v4 but two and three should be cleaned up.

327
00:23:33.218 --> 00:23:34.600
&gt;&gt; Mike North: And there it is.

328
00:23:34.600 --> 00:23:37.260
So now at any given time,
we basically wait.

329
00:23:37.260 --> 00:23:40.150
We had v3,
it was there in case something failed.

330
00:23:40.150 --> 00:23:44.133
So we can keep using that until we
know that v4 has been downloaded and

331
00:23:44.133 --> 00:23:47.303
that sort of bundle of things
was intact and in memory.

332
00:23:47.303 --> 00:23:51.111
We hold on to be v3 but when we
reach that moment, get rid of v3 and

333
00:23:51.111 --> 00:23:54.320
everything else we're not using and
proceed onward.

334
00:23:56.850 --> 00:24:02.800
&gt;&gt; Speaker 2: So what happens if
you hit your Theoretical limit

335
00:24:02.800 --> 00:24:07.435
on the install because you have a service
worker that's got half of the limit.

336
00:24:07.435 --> 00:24:10.850
You're getting new assets in,
you cache too much and

337
00:24:10.850 --> 00:24:13.210
you never again attempt to install.

338
00:24:13.210 --> 00:24:17.440
Because the browser blew away
your cache and you've installed

339
00:24:17.440 --> 00:24:21.680
the service worker already, so
the install process doesn't happen again.

340
00:24:23.470 --> 00:24:25.463
I feel like I just spoke Klingon,
did that make sense?

341
00:24:25.463 --> 00:24:29.334
&gt;&gt; Mike North: Right, so
service worker is still active,

342
00:24:29.334 --> 00:24:34.684
your cache has reached the threshold
where it gets evicted.

343
00:24:34.684 --> 00:24:38.924
&gt;&gt; Speaker 2: And new guy comes in and
he hits the cache limit,

344
00:24:38.924 --> 00:24:43.908
blowing away all the cache
during the install process.

345
00:24:43.908 --> 00:24:48.352
&gt;&gt; Mike North: So I believe at
the time that a cache gets cleaned up,

346
00:24:48.352 --> 00:24:52.904
your service worker will
begin its life cycle again.

347
00:24:52.904 --> 00:25:00.420
So the cache API is designed to be used
in the install and activate hooks there.

348
00:25:00.420 --> 00:25:04.531
So at the time, where like if the browser
reaches a threshold and decides to

349
00:25:04.531 --> 00:25:09.100
squash your cache, you can be assured that
the next time your user visits your app,

350
00:25:09.100 --> 00:25:11.865
you're gonna be either in
one of two situations.

351
00:25:11.865 --> 00:25:15.810
Number one is they've never seen a service
worker before, and it's gonna activate in

352
00:25:15.810 --> 00:25:19.300
the background, but they'll get
no benefits of the cache there.

353
00:25:19.300 --> 00:25:22.745
Or two, no I believe that's
the only one they'll end up in.

354
00:25:22.745 --> 00:25:26.340
&gt;&gt; Speaker 2: If the cache blows
up the install process fails?

355
00:25:26.340 --> 00:25:29.198
&gt;&gt; Mike North: If the cache blows
up the install process fails,

356
00:25:29.198 --> 00:25:30.885
the cache blows up-
&gt;&gt; Steve Kinney: Yeah,

357
00:25:30.885 --> 00:25:32.960
cuz the promise will reject.

358
00:25:32.960 --> 00:25:37.598
&gt;&gt; Mike North: If the install,
those seem unrelated to me.

359
00:25:37.598 --> 00:25:40.815
&gt;&gt; Steve Kinney: So if you're returning
the promise on add all, if for

360
00:25:40.815 --> 00:25:45.687
some reason any of those adding to the
cache reject, the promise at all rejects.

361
00:25:45.687 --> 00:25:47.278
&gt;&gt; Mike North: Yeah,
if your promise fails,

362
00:25:47.278 --> 00:25:51.757
you don't successfully reach the activate
phase, that's the point of having that.

363
00:25:51.757 --> 00:25:54.434
&gt;&gt; Steve Kinney: Yeah, an interesting
point of color though is that again,

364
00:25:54.434 --> 00:25:58.230
going on this idea of giving programmers
low level primitives, right?

365
00:25:58.230 --> 00:26:02.535
That there is a quota API where you can
theoretically find out like how much

366
00:26:02.535 --> 00:26:05.120
storage am I allotted,
how much am I using?

367
00:26:05.120 --> 00:26:09.744
So ideally, if this is, I would
argue that for most use cases you're

368
00:26:09.744 --> 00:26:14.230
unlikely to butt up against this for
regular page assets, right?

369
00:26:15.780 --> 00:26:17.142
But in the situation where like,

370
00:26:17.142 --> 00:26:19.877
I'm working on something where
I'm worried about this, right?

371
00:26:19.877 --> 00:26:25.619
You could, in the active service worker,
be able to monitor how much am I using?

372
00:26:25.619 --> 00:26:29.022
And in the same way that you
would do in a native application,

373
00:26:29.022 --> 00:26:31.570
am I butting up against the threshold?

374
00:26:31.570 --> 00:26:33.510
Okay, what can I delete from cache?

375
00:26:33.510 --> 00:26:35.250
And you could handle
that programmatically.

376
00:26:35.250 --> 00:26:39.363
And that's really one of the great things
with the way this API was designed is

377
00:26:39.363 --> 00:26:43.830
that you have the ability to one,
introspect, and B, do something about it.

378
00:26:43.830 --> 00:26:47.360
And like there isn't a take this answer
off of the shelf and use it, right?

379
00:26:47.360 --> 00:26:50.230
Because especially it's like
a scaling issue, right?

380
00:26:50.230 --> 00:26:55.754
When you reach that level of problem,
it is very specific, right?

381
00:26:55.754 --> 00:26:58.260
So there is very rarely an off
the shelf solution for that.

382
00:26:58.260 --> 00:27:02.580
But you're able to kind of find out,
yeah, how much storage you have,

383
00:27:02.580 --> 00:27:07.406
how much you're using, and then depending
on the nature of your application,

384
00:27:07.406 --> 00:27:11.025
how you ended up in that situation,
be able to deal with it.

385
00:27:11.025 --> 00:27:15.244
The browser blowing stuff away is
not necessarily a threat to you,

386
00:27:15.244 --> 00:27:18.876
it's more of like a safeguard
in case you made boo-boo.

387
00:27:18.876 --> 00:27:22.100
[LAUGH] And so
that you don't eat up their entire disk.

388
00:27:22.100 --> 00:27:25.590
So it's basically an escape hatch
if things go horribly wrong.

389
00:27:25.590 --> 00:27:30.305
But it's not like this looming threat that
you could get cuz you have the ability to

390
00:27:30.305 --> 00:27:32.299
figure out those kinds of things.

391
00:27:32.299 --> 00:27:36.449
&gt;&gt; Mike North: It's also in case you
visit like thousands of websites and

392
00:27:36.449 --> 00:27:42.050
they each take up 100 megabytes each and
that potentially can be a problem.

393
00:27:42.050 --> 00:27:45.941
Especially on something like a Chromebook
that can affect performance or

394
00:27:45.941 --> 00:27:47.645
mobile device for that matter.

395
00:27:47.645 --> 00:27:52.030
Where people love to flirt with like
the total limit of their device.

396
00:27:52.030 --> 00:27:55.030
They only have a little
bit of memory free.

397
00:27:55.030 --> 00:27:57.440
I do want to make sure
we put a bow on this.

398
00:27:57.440 --> 00:28:02.287
In the event the browser decides to squash
your cache as a result of you reaching

399
00:28:02.287 --> 00:28:05.159
that threshold,
it is basically start over.

400
00:28:05.159 --> 00:28:08.766
So you're not in this partially
disrupted state, you're back to zero.

401
00:28:08.766 --> 00:28:13.136
And now the existing process
by which you would install

402
00:28:13.136 --> 00:28:17.061
the service worker from scratch,
begins anew.

403
00:28:17.061 --> 00:28:19.877
&gt;&gt; Steve Kinney: Assuming, of course
that you've programmed defensively.

404
00:28:19.877 --> 00:28:23.220
If you're doing cache fallback to network,
the cache got blown away,

405
00:28:23.220 --> 00:28:24.891
you will fall back to the network and

406
00:28:24.891 --> 00:28:27.468
you can theoretically then
put that back in the cache.

407
00:28:27.468 --> 00:28:30.928
If you're just always assuming
the cache is going to be there, well,

408
00:28:30.928 --> 00:28:32.348
then that's a bug, right?

409
00:28:32.348 --> 00:28:36.802
But yeah, that covers the strategies
Mike just went to over earlier.

410
00:28:36.802 --> 00:28:40.082
It's the kind of like defensively, so
you want that progressive web app.

411
00:28:40.082 --> 00:28:46.050
If no cache, I can progressively build it
back up again but I don't count on it.

412
00:28:46.050 --> 00:28:48.635
And that's the progressive in
the progressive web app in that case.

413
00:28:48.635 --> 00:28:53.471
&gt;&gt; Mike North: Yeah, and one more like
word of wisdom from someone that's been

414
00:28:53.471 --> 00:28:59.023
trolled by service workers more than I
hope any of you get trolled by them,

415
00:28:59.023 --> 00:29:00.746
start really simple.

416
00:29:00.746 --> 00:29:04.883
This is not the kind of thing
where you wanna just jump in and

417
00:29:04.883 --> 00:29:09.865
have one release where you're gonna
go from no service worker at all,

418
00:29:09.865 --> 00:29:15.030
to full offline pumping stuff in
the IndexDB with notifications.

419
00:29:15.030 --> 00:29:20.330
You wanna be conservative, and
so if you are doing things,

420
00:29:20.330 --> 00:29:27.220
the way I advise, by the time you're
even thinking about cache thresholds,

421
00:29:27.220 --> 00:29:31.460
you are a well seasoned
service worker expert.

422
00:29:31.460 --> 00:29:36.924
But just starting with a couple of
hundred kilobytes of JavaScript,

423
00:29:36.924 --> 00:29:42.288
for all of you that probably have not
put one of these on your app yet,

424
00:29:42.288 --> 00:29:47.184
you will, in all likelihood be
under the two megabyte mark for

425
00:29:47.184 --> 00:29:49.500
the total size of the cache.

426
00:29:49.500 --> 00:29:52.095
And start there, and
then as things evolve,

427
00:29:52.095 --> 00:29:54.497
then we can worry about that complexity.

428
00:29:54.497 --> 00:30:00.371
But start with tiny things, quick wins,
things that we'll speed stuff up but

429
00:30:00.371 --> 00:30:04.290
not maybe allow things to
work completely offline.

430
00:30:04.290 --> 00:30:10.702
And then iteratively move towards
the solution that's more comprehensive.

431
00:30:10.702 --> 00:30:15.261
So we have one last thing to do here,
our prefetch cache is populated,

432
00:30:15.261 --> 00:30:17.209
our fallback image is there.

433
00:30:17.209 --> 00:30:21.067
While Steve was talking, I kinda
changed the name of his cache just so

434
00:30:21.067 --> 00:30:23.870
that it is versioned along
with everything else.

435
00:30:23.870 --> 00:30:25.969
So now I've gone back to version one,

436
00:30:25.969 --> 00:30:30.562
as long as this is changing I just delete
anything that's not the current version,

437
00:30:30.562 --> 00:30:33.862
so I don't have to even increase it,
I can decrease it too.

438
00:30:33.862 --> 00:30:36.830
Now we just have to use
the stuff in the cache.

439
00:30:36.830 --> 00:30:39.965
So we're gonna go into our fetch
handler here, I can close this or

440
00:30:39.965 --> 00:30:42.190
collapse it cuz we don't
need that quite yet.

441
00:30:42.190 --> 00:30:44.950
Or we can just kind of leave it alone.

442
00:30:44.950 --> 00:30:48.698
And now we're in the situation if
you remember that slide where we had

443
00:30:48.698 --> 00:30:52.323
different MIME types and
we wanna handle that stuff differently.

444
00:30:52.323 --> 00:30:58.450
Prefetch I like to handle in
a slightly different way.

445
00:30:58.450 --> 00:31:02.903
I want, if it's possible,
to use something from the prefetch cache,

446
00:31:02.903 --> 00:31:04.770
let's go ahead and use that.

447
00:31:04.770 --> 00:31:09.572
And then all other strategies,
I like to sort of that to live in the,

448
00:31:09.572 --> 00:31:12.712
we have nothing in
the prefetch cache spot.

449
00:31:12.712 --> 00:31:16.950
So let me translate that nebulous
sentence into code for you.

450
00:31:18.572 --> 00:31:21.534
&gt;&gt; Mike North: So what we're gonna do is

451
00:31:21.534 --> 00:31:23.414
say,
&gt;&gt; Mike North: So

452
00:31:23.414 --> 00:31:27.463
we'll say event.respondWith, and

453
00:31:27.463 --> 00:31:32.650
we're gonna have a giant
mega promise here.

454
00:31:32.650 --> 00:31:37.910
So the first thing we're gonna
do is say caches.match, right?

455
00:31:37.910 --> 00:31:44.121
Just like, Steve has been using up
here and FALLBACK_IMAGEs here, right?

456
00:31:44.121 --> 00:31:51.368
And sorry, we need something else here,
&gt;&gt; Mike North: Great, and we're

457
00:31:51.368 --> 00:31:57.750
gonna do the same approach here where we
name the cache we're matching against.

458
00:31:57.750 --> 00:32:00.617
It's not good enough just
to say This is somewhere,

459
00:32:00.617 --> 00:32:02.780
it's the prefetch we're looking at.

460
00:32:03.900 --> 00:32:06.660
So we're saying, ALL_CACHES.prefetch,

461
00:32:06.660 --> 00:32:08.970
that'll give us the correct
version string.

462
00:32:10.520 --> 00:32:15.696
Sorry, wrong,
what goes in here is the request,

463
00:32:19.180 --> 00:32:20.730
&gt;&gt; Mike North: Something like that.

464
00:32:20.730 --> 00:32:26.032
All right, so and then we're going

465
00:32:26.032 --> 00:32:33.240
to return the response,
or proceed anywhere.

466
00:32:33.240 --> 00:32:37.002
Like, proceed to the next level down.

467
00:32:37.002 --> 00:32:39.164
So this is a pattern you'll
see all over the place, and

468
00:32:39.164 --> 00:32:40.910
let's see if we've already got it up here.

469
00:32:42.540 --> 00:32:46.060
Not yet, we didn't have
an opportunity to do it yet.

470
00:32:46.060 --> 00:32:51.100
We're taking advantage of the fact that
when you return a non promise value

471
00:32:51.100 --> 00:32:54.840
from your dot then call back,
it gets wrapped in a promise for us.

472
00:32:54.840 --> 00:33:01.100
So we can say return this response or
other promise, and regardless

473
00:33:01.100 --> 00:33:04.790
like we gonna get a promise that returns
the response as part of this chain.

474
00:33:06.150 --> 00:33:09.646
So in this case-
&gt;&gt; Speaker 2: Unless the second one

475
00:33:09.646 --> 00:33:11.165
rejects also.

476
00:33:11.165 --> 00:33:13.544
&gt;&gt; Mike North: But no matter what
we want to return a promise,

477
00:33:13.544 --> 00:33:18.010
like we want to ultimately, sorry, no
matter what we need to return a promise-

478
00:33:18.010 --> 00:33:19.247
&gt;&gt; Speaker 2: A response-

479
00:33:19.247 --> 00:33:20.687
&gt;&gt; Mike North: A results to response.

480
00:33:20.687 --> 00:33:21.940
&gt;&gt; Speaker 2: Okay.

481
00:33:21.940 --> 00:33:23.313
&gt;&gt; Mike North: Promise that
results to a response.

482
00:33:23.313 --> 00:33:25.250
&gt;&gt; Speaker 2: Because it always
returns something, right?

483
00:33:25.250 --> 00:33:27.603
&gt;&gt; Mike North: Yep, absolutely.

484
00:33:27.603 --> 00:33:28.690
&gt;&gt; Speaker 2: Okay.

485
00:33:28.690 --> 00:33:31.240
&gt;&gt; Mike North: Actually, the way this
is structured, I can't be quite so

486
00:33:31.240 --> 00:33:34.040
neat about it here but no worry.

487
00:33:34.040 --> 00:33:38.571
So if response we're gonna return,

488
00:33:38.571 --> 00:33:43.395
we're gonna let it just pass through,

489
00:33:43.395 --> 00:33:47.800
and then we can put this, and here.

490
00:33:47.800 --> 00:33:51.460
So one interesting thing
is that you don't,

491
00:33:51.460 --> 00:33:57.542
I find that I don't have to be quite so
defensive about the caches.match.

492
00:33:57.542 --> 00:34:03.320
Because it's gonna return you something or
return you undefined the catch handler is,

493
00:34:03.320 --> 00:34:07.260
that's a really strange thing
to hit from caches.match.

494
00:34:07.260 --> 00:34:11.400
It's gonna return you a value and
we can sort of proceed forward.

495
00:34:11.400 --> 00:34:14.120
So effectively here,
let me add some comments.

496
00:34:14.120 --> 00:34:20.450
Let's say, if a precached thing is found,
&gt;&gt; Mike North: Go with it.

497
00:34:21.530 --> 00:34:25.000
Otherwise,
&gt;&gt; Mike North: Let's dig deeper.

498
00:34:26.550 --> 00:34:31.260
So if we find images like
we'll go through that, and

499
00:34:31.260 --> 00:34:35.270
then we just need to sort of unpack
this from respond with here.

500
00:34:37.440 --> 00:34:39.620
So we're gonna return that.

501
00:34:39.620 --> 00:34:42.510
And then, otherwise,
if we get all the way down

502
00:34:42.510 --> 00:34:47.417
here,
&gt;&gt; Mike North: We'll

503
00:34:47.417 --> 00:34:49.990
just make the request
to the outside world.

504
00:34:49.990 --> 00:34:55.070
The reason I structure things this way is
you can only respond to requests once.

505
00:34:56.110 --> 00:34:58.100
You can only respond to requests once.

506
00:34:58.100 --> 00:35:02.511
So if we had what Steve's code
was completely reasonable here,

507
00:35:02.511 --> 00:35:03.825
structured as so.

508
00:35:03.825 --> 00:35:07.465
If you have like littered
event that respond with and

509
00:35:07.465 --> 00:35:11.189
scattered amongst all of
these little functions that

510
00:35:11.189 --> 00:35:15.673
you've broken your various mind
type specific handling into.

511
00:35:15.673 --> 00:35:19.911
It's very easy to kinda find that you're
trying to respond to something that has

512
00:35:19.911 --> 00:35:22.150
already been responded to.

513
00:35:22.150 --> 00:35:27.231
The way to save yourself from
this is to just say look our

514
00:35:27.231 --> 00:35:32.764
job is now to have some chain
of promise you things, right?

515
00:35:32.764 --> 00:35:37.399
That ultimately resolve to a response,
and we're gonna use that.

516
00:35:37.399 --> 00:35:42.581
So I've sort of unpacked events that
respond with that's now on the outside,

517
00:35:42.581 --> 00:35:44.945
and now instead we're returning.

518
00:35:45.995 --> 00:35:50.010
The benefit there is like
return terminate that function,

519
00:35:50.010 --> 00:35:52.508
like we're done with that, right?

520
00:35:52.508 --> 00:35:56.649
And so that is what makes it so that
we don't end up like continuing on and

521
00:35:56.649 --> 00:35:59.110
responding with something else.

522
00:35:59.110 --> 00:36:04.120
So it's sort of like these two
ideas are equal except one

523
00:36:04.120 --> 00:36:08.130
puts the brakes on things, and
lets us say like we're finished, right?

524
00:36:10.830 --> 00:36:14.820
But their consequences, now,
I'm obligated to explicitly go it and

525
00:36:14.820 --> 00:36:21.240
fetch in the event that like no other
caching strategy has met our needs.

526
00:36:23.790 --> 00:36:29.180
And let's look at where we at once
this reload, getting some errors,

527
00:36:29.180 --> 00:36:31.490
unused variables, that's fine.

528
00:36:31.490 --> 00:36:36.250
Okay, so if we look at our network tab,
click the JavaScript.

529
00:36:36.250 --> 00:36:38.740
Here is the big change that we see.

530
00:36:38.740 --> 00:36:43.150
So the app JavaScript file is
served from the service working.

531
00:36:43.150 --> 00:36:49.719
And although it is 372 milliseconds here,
let me expand this out.

532
00:36:53.455 --> 00:36:55.503
&gt;&gt; Mike North: Come on,
work with me, Chrome.

533
00:36:58.918 --> 00:36:59.465
&gt;&gt; Mike North: There we go.

534
00:37:05.324 --> 00:37:09.031
&gt;&gt; Mike North: Okay, so
Let me decode this for you.

535
00:37:11.158 --> 00:37:13.936
&gt;&gt; Mike North: So
this was the original download here,

536
00:37:13.936 --> 00:37:16.720
that was the content being downloaded.

537
00:37:16.720 --> 00:37:18.316
That's a fetch the outside world.

538
00:37:23.719 --> 00:37:28.010
&gt;&gt; Mike North: Interesting, let me do
some login, here's what I suspect.

539
00:37:28.010 --> 00:37:30.360
This is still taking way too long.

540
00:37:30.360 --> 00:37:32.746
I expect this number to be really small,
but

541
00:37:32.746 --> 00:37:35.855
everything's being handled
by the service worker now.

542
00:37:35.855 --> 00:37:40.548
I'm gonna put a debugger here, and

543
00:37:40.548 --> 00:37:45.563
see if we hit it for JavaScript files.

544
00:37:47.139 --> 00:37:52.225
&gt;&gt; Mike North: So
that's the index.html, that's fine.

545
00:37:55.957 --> 00:37:57.419
&gt;&gt; Mike North: Let me
put a watch in place.

546
00:38:04.809 --> 00:38:06.508
&gt;&gt; Mike North: Play, play, play.

547
00:38:11.046 --> 00:38:16.098
&gt;&gt; Mike North: So there's API calls
going out, that's that's some DevTools

548
00:38:16.098 --> 00:38:22.660
stuff going on the tell web pack knows to
refresh your screen, a chrome extension.

549
00:38:28.068 --> 00:38:30.646
&gt;&gt; Mike North: I need to do a refresh
here because like we're certainly past

550
00:38:30.646 --> 00:38:31.415
the JavaScript.

551
00:38:41.391 --> 00:38:48.555
&gt;&gt; Mike North: Play through,
all right, what's going on?

552
00:38:48.555 --> 00:38:54.859
Let me do a conditional break
point instead of this, the stuff.

553
00:39:01.329 --> 00:39:06.495
&gt;&gt; Mike North: Edit break points and
we're gonna say only stop here if

554
00:39:06.495 --> 00:39:11.900
event.request.url.indexOf (".js") &gt;= 0.

555
00:39:21.468 --> 00:39:24.040
&gt;&gt; Mike North: And
make sure we're not service worker reluct.

556
00:39:26.820 --> 00:39:31.090
Like we don't have something waiting,
we do.

557
00:39:31.090 --> 00:39:33.370
All right, there's our JavaScript.

558
00:39:34.430 --> 00:39:35.944
So let's see where this takes us.

559
00:39:44.184 --> 00:39:47.790
&gt;&gt; Mike North: So there's our response,
that looks like our JavaScript response.

560
00:39:47.790 --> 00:39:52.390
Maybe we just have a little like,
a stale service worker running the show.

561
00:39:52.390 --> 00:39:55.250
Let's look at our network tab,
uh-ha, here we go.

562
00:39:55.250 --> 00:39:57.030
That is way shorter.

563
00:39:57.030 --> 00:40:00.400
We just took the downloading process,
even from local hosts,

564
00:40:00.400 --> 00:40:03.210
this thing took 327 milliseconds.

565
00:40:03.210 --> 00:40:09.335
We brought it down to less than 10% of
the time it takes to download that file.

566
00:40:09.335 --> 00:40:14.355
Because it's really just like sitting
in memory waiting for us, right?

567
00:40:14.355 --> 00:40:18.502
And you can even see that there's
like it's broken down into us kind of

568
00:40:18.502 --> 00:40:23.088
waiting for the service worker to free
up functions run to completion there.

569
00:40:23.088 --> 00:40:24.643
They do anywhere else in JavaScript,

570
00:40:24.643 --> 00:40:27.190
they might be in the middle
of doing something else.

571
00:40:27.190 --> 00:40:30.510
And we sort of think of it
almost like a set timeout 0, or

572
00:40:30.510 --> 00:40:34.560
it says like soon,
please give me this asset.

573
00:40:34.560 --> 00:40:38.450
But this is a massive improvement,
this is a big improvement.

574
00:40:38.450 --> 00:40:42.056
And this kind of thing is one of
the early improvements you can

575
00:40:42.056 --> 00:40:46.454
make to your app to really take advantage
of the power of service workers.

576
00:40:46.454 --> 00:40:50.227
And to speed up everything but
the first boot time,

577
00:40:50.227 --> 00:40:54.980
the second through nth boot
time until you deploy again.

578
00:40:54.980 --> 00:40:58.240
Well actually, even after you deploy again
you've got your service worker downloading

579
00:40:58.240 --> 00:41:00.010
the next version in the background.

580
00:41:00.010 --> 00:41:04.920
So this really will
give that time to first

581
00:41:04.920 --> 00:41:10.620
paint for return visits, a huge boost.

582
00:41:10.620 --> 00:41:13.380
And that is the end of the exercise here.

583
00:41:13.380 --> 00:41:17.910
A little involved, and I don't,
let me just go back to the slid here so

584
00:41:17.910 --> 00:41:20.950
you can see what we've done here.

585
00:41:20.950 --> 00:41:23.480
So in short,
we've fetch in asset manifest,

586
00:41:23.480 --> 00:41:26.340
download a bunch of stuff that
we know about the build time.

587
00:41:26.340 --> 00:41:29.440
And the activate handler we
cleaned up anything that was old

588
00:41:29.440 --> 00:41:30.270
that we don't need again.

589
00:41:30.270 --> 00:41:33.578
And then finally,
in our fetch handler we kinda upgraded it.

590
00:41:33.578 --> 00:41:36.890
So beyond to just as fallback image thing.

591
00:41:36.890 --> 00:41:41.295
Now we're checking to see if we got
something that we prepared in advance that

592
00:41:41.295 --> 00:41:44.299
we can use rather than going
to the outside network.

593
00:41:44.299 --> 00:41:49.190
If you didn't follow along with this,
I would encourage you to like save

594
00:41:49.190 --> 00:41:53.534
your work, and maybe get reset
to the commit I'm about to push.

595
00:41:53.534 --> 00:41:57.462
Because we're gonna go deeper,
and deeper down this rabbit hole.

596
00:41:58.968 --> 00:42:02.343
&gt;&gt; Mike North: Ultimately,
dealing with the JSON, and then finally,

597
00:42:02.343 --> 00:42:05.520
index.html at which point
we'll be fully offline.

