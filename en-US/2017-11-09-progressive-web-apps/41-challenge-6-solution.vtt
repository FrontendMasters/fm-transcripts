WEBVTT

1
00:00:00.054 --> 00:00:04.380
&gt;&gt; Steve Kinney: Our mission was to
simply set up a service worker, right?

2
00:00:04.380 --> 00:00:08.752
We had some prior art in that glitch
where we could see one setup but

3
00:00:08.752 --> 00:00:14.018
it was like still our mission was then
to contextualize it in our application.

4
00:00:14.018 --> 00:00:16.955
So, we'll go through that together.

5
00:00:16.955 --> 00:00:19.042
And so the big question I have,

6
00:00:19.042 --> 00:00:23.070
does anyone remember where did
we setup that other worker?

7
00:00:24.200 --> 00:00:27.403
The QR code worker,
does anyone remember what file it was?

8
00:00:29.063 --> 00:00:32.408
&gt;&gt; Steve Kinney: Where we actually
registered it, where we imported it.

9
00:00:32.408 --> 00:00:33.748
&gt;&gt; Speaker 2: Index.js.

10
00:00:38.281 --> 00:00:41.780
&gt;&gt; Steve Kinney: Cool,
there it is, hanging out.

11
00:00:41.780 --> 00:00:45.867
So, this is a worker and again,
when we saw the super simple example,

12
00:00:45.867 --> 00:00:49.216
we saw that they just happened
to be a file there, right?

13
00:00:49.216 --> 00:00:54.830
And then when we called service
worker.register, we pulled that file.

14
00:00:54.830 --> 00:00:59.202
All of this like fanciness here is
just web pack integrating with our

15
00:00:59.202 --> 00:01:03.119
buiid tools cuz it's a little
like tedious to do otherwise.

16
00:01:03.119 --> 00:01:05.078
Like this looks tedious to me too,

17
00:01:05.078 --> 00:01:09.280
but you do it once and your built tools
take care for the rest of it, right?

18
00:01:09.280 --> 00:01:14.763
So in this case,
what we'll do is copy and paste that and

19
00:01:14.763 --> 00:01:20.255
we simply going to call it sw,
because my font is large.

20
00:01:20.255 --> 00:01:23.217
You'll notice that when I'm on my own
computer, I think I have plenty of space,

21
00:01:23.217 --> 00:01:24.890
and I like to give things long names.

22
00:01:24.890 --> 00:01:29.690
But when I'm using large fonts
some of that changes, cool.

23
00:01:30.745 --> 00:01:36.643
So, we've pulled it in, we have
access to it is in our build system,

24
00:01:36.643 --> 00:01:41.249
right, and
there's kind of two schools of thought.

25
00:01:41.249 --> 00:01:42.995
We could put it like when the app mounts.

26
00:01:42.995 --> 00:01:45.010
Let's just do it in this
file cuz we're here,

27
00:01:45.010 --> 00:01:47.758
unless Mike cuz you're gonna have
to inherit this far from me.

28
00:01:47.758 --> 00:01:49.460
Do you care if I put an index?

29
00:01:49.460 --> 00:01:51.950
Mike doesn't care,
Mike gives me permission, right?

30
00:01:51.950 --> 00:01:54.176
It's called teamwork, right?

31
00:01:54.176 --> 00:01:56.470
[LAUGH] Before you just flip
things in the code based,

32
00:01:56.470 --> 00:01:59.700
your preferences, you talk to people.

33
00:01:59.700 --> 00:02:02.590
So we've pulled this in,
let's make sure that we have that file.

34
00:02:04.480 --> 00:02:06.368
Looks like we do not,
so we have to make it.

35
00:02:08.606 --> 00:02:11.170
&gt;&gt; Steve Kinney: sw.js, and there it is.

36
00:02:11.170 --> 00:02:15.240
And we'll leave it blank for
a second, that seems good for now.

37
00:02:15.240 --> 00:02:18.861
First thing we're gonna do is, ideally,

38
00:02:18.861 --> 00:02:24.093
it might happen to be that people
who use the Safari web browser

39
00:02:24.093 --> 00:02:29.033
on their iOS devices and
their Macs might visit this page.

40
00:02:29.033 --> 00:02:31.020
So what's the first thing that
we should do in this case?

41
00:02:32.190 --> 00:02:32.864
&gt;&gt; Speaker 2: Check and see.

42
00:02:32.864 --> 00:02:33.855
&gt;&gt; Steve Kinney: Check to see, yeah.

43
00:02:33.855 --> 00:02:38.350
All right, let's not call,
if we say navigator.service worker and

44
00:02:38.350 --> 00:02:41.330
then something, you are gonna get
everyone's favorite error message

45
00:02:41.330 --> 00:02:45.160
in all of programming,
undefined is not a function.

46
00:02:45.160 --> 00:02:48.680
Yes, I know modern Chrome doesn't show it
like that anymore, but let me have this.

47
00:02:50.790 --> 00:02:58.965
Cool, so,
we'll say if serviceworker in navigator.

48
00:03:01.011 --> 00:03:05.193
&gt;&gt; Steve Kinney: So now we're in a special
safe place that will only execute if

49
00:03:05.193 --> 00:03:07.328
serviceworker is supported.

50
00:03:08.669 --> 00:03:10.862
&gt;&gt; Steve Kinney: And, we can go ahead and

51
00:03:10.862 --> 00:03:15.813
we'll say
navigator.serviceworker,register.

52
00:03:17.938 --> 00:03:19.063
&gt;&gt; Steve Kinney: Right,
this is saying like, hey,

53
00:03:19.063 --> 00:03:20.420
I would like to register a service worker.

54
00:03:21.535 --> 00:03:23.417
Okay, what service worker would you like?

55
00:03:23.417 --> 00:03:25.448
sw.js, please.

56
00:03:25.448 --> 00:03:30.702
All right, so we've ever read this
effectively will register it, right?

57
00:03:30.702 --> 00:03:34.279
Like we won't hear back, but
if like we ran this code and went and

58
00:03:34.279 --> 00:03:39.060
looked in the tools, we would see that we
have a service worker actually registered.

59
00:03:40.110 --> 00:03:45.388
Cool, but it does return our
good friend the promise and

60
00:03:45.388 --> 00:03:50.006
the argument that's
passed into that promise.

61
00:03:54.294 --> 00:03:56.970
&gt;&gt; Steve Kinney: Selling is hard.

62
00:03:56.970 --> 00:03:58.730
Is a registration, right?

63
00:03:58.730 --> 00:04:03.360
This is the registration of the service
worker in this case cuz things worked out.

64
00:04:03.360 --> 00:04:05.720
If it didn't work out, you wouldn't have
a registration, you'd have an error.

65
00:04:05.720 --> 00:04:09.180
But here we have the service
worker's registration.

66
00:04:09.180 --> 00:04:16.819
And, we could say something like,
&gt;&gt; Steve Kinney: Are there

67
00:04:16.819 --> 00:04:18.506
two Rs in register?

68
00:04:18.506 --> 00:04:21.103
Guess not, sweet.

69
00:04:22.836 --> 00:04:27.620
&gt;&gt; Steve Kinney: And, that will be enough
at this point, right, to get us going.

70
00:04:27.620 --> 00:04:32.217
And, so what we'll do is we'll go back
over to the frontend groceries' page, and

71
00:04:32.217 --> 00:04:35.251
registration defined but
never used, totally okay.

72
00:04:38.098 --> 00:04:38.843
&gt;&gt; Steve Kinney: And let's go into

73
00:04:38.843 --> 00:04:41.812
application,
&gt;&gt; Steve Kinney: And

74
00:04:41.812 --> 00:04:43.078
weÂ´ll go to service workers.

75
00:04:44.151 --> 00:04:48.905
&gt;&gt; Steve Kinney: And we can see that
service worker number 4453 is activated

76
00:04:48.905 --> 00:04:50.527
and running, neat.

77
00:04:50.527 --> 00:04:53.157
And you can see it was registered at 440.

78
00:04:53.157 --> 00:04:57.940
For those watching on the video,
it is for 440, cool.

79
00:04:57.940 --> 00:04:58.960
And, there it is.

80
00:04:58.960 --> 00:05:00.850
And we're going to do anything
because remember like,

81
00:05:00.850 --> 00:05:03.490
does anyone remember
what's in sw.js right now?

82
00:05:03.490 --> 00:05:05.411
&gt;&gt; Speaker 3: Nothing.
&gt;&gt; Steve Kinney: Nothing, right, so

83
00:05:05.411 --> 00:05:08.219
there's it is full proof and flawless.

84
00:05:08.219 --> 00:05:11.897
There's no way there are no bugs in
this code at all whatsoever cuz it's

85
00:05:11.897 --> 00:05:12.708
an empty file.

86
00:05:12.708 --> 00:05:16.525
But it is registered and ready to go.

87
00:05:16.525 --> 00:05:20.388
You can see that it is registered and
very fresh.

88
00:05:23.754 --> 00:05:28.700
&gt;&gt; Steve Kinney: Few tasting notes here,
right, one, it says registered again.

89
00:05:28.700 --> 00:05:32.291
It turns out that this promise will
resolve even if it's re-registering.

90
00:05:32.291 --> 00:05:36.010
If there's one already installed, like
we're still gonna count that as happy.

91
00:05:36.010 --> 00:05:40.210
Like, yes, you may be installed a new one,
but like it worked out.

92
00:05:40.210 --> 00:05:44.594
Other interesting to know is that that
was like literally the first thing that

93
00:05:44.594 --> 00:05:45.748
happened, right?

94
00:05:45.748 --> 00:05:50.636
Before we fetch anything else,
anything along those lines,

95
00:05:50.636 --> 00:05:53.552
the registration happened, cool.

96
00:05:53.552 --> 00:05:55.978
All right, so this is so far so good.

97
00:05:55.978 --> 00:05:58.103
&gt;&gt; Speaker 4: Why did it happen first?

98
00:05:58.103 --> 00:05:59.770
&gt;&gt; Steve Kinney: Because it-
&gt;&gt; Speaker 4: Service worker is

99
00:05:59.770 --> 00:06:00.430
already running?

100
00:06:00.430 --> 00:06:02.290
&gt;&gt; Steve Kinney: It pre-existed the page.

101
00:06:02.290 --> 00:06:06.010
&gt;&gt; Steve Kinney: Right, and
it happens at the very beginning.

102
00:06:06.010 --> 00:06:11.250
But even better, like just keep in
mind that timeline for right now.

103
00:06:11.250 --> 00:06:15.985
Here we'll say, we have different
events that could happen, right?

104
00:06:15.985 --> 00:06:19.200
We want to keep track of those counts,
that's our mission right now.

105
00:06:19.200 --> 00:06:24.011
And so let's make a,
&gt;&gt; Steve Kinney: Counts.

106
00:06:24.011 --> 00:06:30.671
And we'll say like,
keep track of installs, started at 0.

107
00:06:30.671 --> 00:06:36.467
We'll keep track of activations,
&gt;&gt; Steve Kinney: Start at 0,

108
00:06:36.467 --> 00:06:40.528
we keep track of fetches,
all right, why not?

109
00:06:40.528 --> 00:06:41.323
You only live once.

110
00:06:43.020 --> 00:06:44.970
&gt;&gt; Steve Kinney: Keep track of fetches,
that number is gonna be fun.

111
00:06:46.020 --> 00:06:48.813
All right, cool.

112
00:06:48.813 --> 00:06:51.738
And so we can say,
self which is the service worker and

113
00:06:51.738 --> 00:06:54.987
we can add event listener,
and let's listen for install.

114
00:07:02.045 --> 00:07:07.193
&gt;&gt; Steve Kinney: Cool, and
we will say this one console log,

115
00:07:07.193 --> 00:07:12.353
we can say ++ counts.installs, right?

116
00:07:12.353 --> 00:07:16.260
So I will increment it by one
every time that console logs it.

117
00:07:16.260 --> 00:07:18.870
So it will be 1, 2, 3 so on and so forth.

118
00:07:21.333 --> 00:07:23.844
&gt;&gt; Steve Kinney: And
we'll say, unactivate.

119
00:07:30.013 --> 00:07:32.504
&gt;&gt; Steve Kinney: Say activations,
and then,

120
00:07:39.339 --> 00:07:41.314
&gt;&gt; Steve Kinney: Let's say fetches, cool.

121
00:07:43.332 --> 00:07:48.030
&gt;&gt; Steve Kinney: So let's go ahead and
we'll just refresh this page.

122
00:07:48.030 --> 00:07:51.464
That's neat, what I should probably do is
prefix them with what actually happened.

123
00:07:54.229 --> 00:08:03.302
&gt;&gt; Steve Kinney: So let's say, install,
&gt;&gt; Steve Kinney: Activate And

124
00:08:03.302 --> 00:08:07.819
the real fun one cuz we're gonna fetch
every single one of these things,

125
00:08:07.819 --> 00:08:10.350
every single one of these items in here.

126
00:08:12.554 --> 00:08:13.293
&gt;&gt; Steve Kinney: Cool.

127
00:08:21.238 --> 00:08:24.158
&gt;&gt; Steve Kinney: And what we'll do now-
&gt;&gt; Speaker 4: So most of them are fetches.

128
00:08:24.158 --> 00:08:26.645
&gt;&gt; Steve Kinney: Yeah, cuz we're
fetching every single item on the page,

129
00:08:26.645 --> 00:08:28.025
every single one of those gifs.

130
00:08:28.025 --> 00:08:32.376
All right, I guess pngs of the tandoori
naan and the whole wheat bread and

131
00:08:32.376 --> 00:08:35.810
the wheat, there's a lot of
wheat happening right now.

132
00:08:35.810 --> 00:08:40.840
All of this wheat, each wheat is a fetch
to get that picture of the wheat.

133
00:08:40.840 --> 00:08:42.280
So let's go in the application.

134
00:08:43.840 --> 00:08:48.011
Let's turn off update on reload cuz we're
getting a fresh service worker on every

135
00:08:48.011 --> 00:08:52.634
reload
&gt;&gt; Steve Kinney: He

136
00:08:52.634 --> 00:08:57.604
said that's going up, we've 170, whoo hoo.

137
00:08:57.604 --> 00:09:02.743
We're up to 340, 425 and you know what
I'm gonna just close this page and

138
00:09:02.743 --> 00:09:07.500
check out I'm just gonna stare
at the beauty of this graph.

139
00:09:07.500 --> 00:09:09.000
I've closed all the pages, right?

140
00:09:09.000 --> 00:09:10.940
Like, memories gone,
I know how the web works.

141
00:09:10.940 --> 00:09:11.910
You close the page, it's gone.

142
00:09:11.910 --> 00:09:14.912
Let's go back to my frontend browser.

143
00:09:22.291 --> 00:09:28.325
&gt;&gt; Steve Kinney: It all stated memory, the
service worker exists beyond a web page.

144
00:09:28.325 --> 00:09:31.608
So that exists and
that's just an object in memory.

145
00:09:31.608 --> 00:09:35.639
We are gonna play with databases, we're
gonna play with all sorts of like manually

146
00:09:35.639 --> 00:09:39.571
programmatically managing the cache, but
we can see that we have this process.

147
00:09:39.571 --> 00:09:42.480
We could quit the Chrome and
come back to it, right?

148
00:09:42.480 --> 00:09:48.980
But we left all the tabs we should have
lost any local memory in that case.

149
00:09:48.980 --> 00:09:54.080
But this is a separate thread that
still exists and it's ready to go.

150
00:09:54.080 --> 00:09:56.050
And we can hold onto that state.

151
00:09:57.880 --> 00:10:02.043
&gt;&gt; Speaker 4: There's a complete
check down effect that all.

152
00:10:04.083 --> 00:10:05.452
&gt;&gt; Speaker 4: Shut down and restart.

153
00:10:05.452 --> 00:10:07.680
&gt;&gt; Steve Kinney: At this point,
Chrome is dead, right?

154
00:10:07.680 --> 00:10:09.830
We can turn off the computer.

155
00:10:09.830 --> 00:10:12.280
There will be things that we discuss
tomorrow that obviously won't work,

156
00:10:12.280 --> 00:10:14.750
like notifications and pushes.

157
00:10:14.750 --> 00:10:17.030
But go to Chrome, let's find out.

158
00:10:17.030 --> 00:10:19.400
Let's go to the same version
of Chrome open Canary,

159
00:10:19.400 --> 00:10:20.790
things will be a very different story?

160
00:10:20.790 --> 00:10:21.930
&gt;&gt; Mike: I think that's Canary.

161
00:10:21.930 --> 00:10:28.292
&gt;&gt; Steve Kinney: Yeah, go to this Chrome.

162
00:10:28.292 --> 00:10:30.330
Using other people's
computers is the best.

163
00:10:33.795 --> 00:10:38.600
[SOUND] that one did start a six
again I'll probably because, nope.

164
00:10:38.600 --> 00:10:40.067
&gt;&gt; Mike: So I can shed a little light

165
00:10:40.067 --> 00:10:40.665
on the-
&gt;&gt; Steve Kinney: Shed

166
00:10:40.665 --> 00:10:42.020
some light on me Mike.

167
00:10:42.020 --> 00:10:49.177
&gt;&gt; Mike: So why don't we keep
things in in memory and JavaScript?

168
00:10:49.177 --> 00:10:54.296
How long would you expect that to live
if I just had like, for x equals 65?

169
00:10:54.296 --> 00:10:57.413
&gt;&gt; Speaker 4: The length of time here,
there.

170
00:10:57.413 --> 00:10:58.163
&gt;&gt; Mike: Absolutely.

171
00:10:58.163 --> 00:11:03.500
So as long as that scope survives,
that memory is tied to that scope.

172
00:11:03.500 --> 00:11:11.460
In this case, that scope lives as long
as that session within Chrome lives.

173
00:11:11.460 --> 00:11:12.850
And when you kill Chrome,

174
00:11:12.850 --> 00:11:17.670
when you close the app and it start
it back up, the worker is registered.

175
00:11:17.670 --> 00:11:22.740
And so that script has been downloaded and
Chrome has held on to it and it'll kinda

176
00:11:22.740 --> 00:11:28.100
off stir back again, but any of that
volatile memory there has gone away.

177
00:11:28.100 --> 00:11:31.090
&gt;&gt; Speaker 6: So it doesn't
stabilize it or something to some?

178
00:11:31.090 --> 00:11:34.501
&gt;&gt; Mike: It does not take that closure and
persist it to memory and

179
00:11:34.501 --> 00:11:35.820
try to restore it.

180
00:11:35.820 --> 00:11:37.320
Just like in JavaScripit, right?

181
00:11:37.320 --> 00:11:42.170
We don't expect things that are just
like hanging around to live

182
00:11:42.170 --> 00:11:47.460
beyond the lifetime of that session
within our application, which is

183
00:11:47.460 --> 00:11:52.480
why you'd wanna process things to durable
medium of some sort of like, index dB.

184
00:11:52.480 --> 00:11:55.220
&gt;&gt; Steve Kinney: Seems like
a good place to store stuff.

185
00:11:55.220 --> 00:11:57.564
&gt;&gt; Mike: Yep, so
it's the same service worker.

186
00:11:57.564 --> 00:12:02.930
It's gonna start up again but
just think of it like, it's

187
00:12:02.930 --> 00:12:07.550
almost like you can have the same function
but invoke it a second time and that's

188
00:12:07.550 --> 00:12:12.120
like a new scope that you're getting for
that of the function that implication.

189
00:12:12.120 --> 00:12:15.170
So that number did not go up,
we're still at 4456.

190
00:12:15.170 --> 00:12:19.610
It's because it's the same,

191
00:12:19.610 --> 00:12:23.580
if you think of it it's like a reference
to that function it still that function.

192
00:12:23.580 --> 00:12:27.551
It's still a reference to
the same service worker, so

193
00:12:27.551 --> 00:12:32.812
if you know what an AST is like the post
code that is persistent to memory,

194
00:12:32.812 --> 00:12:38.990
but the scope of that particular use
of the code that is not persistent.

195
00:12:38.990 --> 00:12:42.342
However it does live beyond
lifetime of the tab,

196
00:12:42.342 --> 00:12:45.790
now it lives as long as
we keep Chrome open.

197
00:12:45.790 --> 00:12:50.940
And when we kill Chrome, now we lose that
and we can come back later on there.

198
00:12:50.940 --> 00:12:54.158
So you wouldn't wanna use this
way of like storing data for

199
00:12:54.158 --> 00:12:58.780
a long time any more than you use it in
your app to store data for a long time.

200
00:12:58.780 --> 00:13:02.310
&gt;&gt; Steve Kinney: It's not dissimilar from
thinking about like a server, all right?

201
00:13:02.310 --> 00:13:04.980
You can store some like variables, right?

202
00:13:04.980 --> 00:13:06.470
You're gonna lose them
when the server dies.

203
00:13:06.470 --> 00:13:08.390
That's why we put stuff in databases,
right?

204
00:13:08.390 --> 00:13:09.440
&gt;&gt; Speaker 6: It's only a session store.

205
00:13:11.160 --> 00:13:14.360
&gt;&gt; Mike: Only a few
session store were in RAM.

206
00:13:14.360 --> 00:13:15.550
&gt;&gt; Steve Kinney: Yeah, yeah.

207
00:13:15.550 --> 00:13:18.515
&gt;&gt; Mike: But if you were like using
Reddits for your session store,

208
00:13:18.515 --> 00:13:19.672
that's persistent.

209
00:13:19.672 --> 00:13:24.230
&gt;&gt; Speaker 6: So in this case, like has it
stored the entire school part only stores

210
00:13:24.230 --> 00:13:28.946
like can we control what we store like
are we just ligand like everything

211
00:13:28.946 --> 00:13:33.138
that in-scopeofficeworker.js,
it saves the whole thing.

212
00:13:33.138 --> 00:13:34.760
&gt;&gt; Mike: So the AST is stored.

213
00:13:34.760 --> 00:13:40.040
So we take that text for that swjs file,
parse it into JavaScript.

214
00:13:40.040 --> 00:13:44.960
We pay that price once and that data
structure which is the tree, is stored.

215
00:13:44.960 --> 00:13:49.183
But that has nothing to do
with using the service worker.

216
00:13:49.183 --> 00:13:55.344
It's almost like, it would be like
storing a reference to a function.

217
00:13:55.344 --> 00:13:58.729
That is not the same thing as
invoking that function and

218
00:13:58.729 --> 00:14:03.364
storing that scope of that particular
invocation of the function to disk,

219
00:14:03.364 --> 00:14:06.710
does that make sense, the difference?

220
00:14:06.710 --> 00:14:11.650
So we can always start it up again but
we've lost anything that

221
00:14:11.650 --> 00:14:16.730
was there in volatile memory,
the last time we were hanging around.

222
00:14:16.730 --> 00:14:21.110
Though the usefulness of what Steve has
set us up for here is to make the point

223
00:14:21.110 --> 00:14:27.840
that, it is volatile memory but
its lifetime is longer than the tab.

224
00:14:27.840 --> 00:14:33.220
It's now like having Chrome open,
that's your lifetime, right?

225
00:14:34.480 --> 00:14:35.600
And then it comes back.

226
00:14:35.600 --> 00:14:36.390
&gt;&gt; Steve Kinney: That's
a really good point.

227
00:14:36.390 --> 00:14:41.340
And then when we kinda reconvene tomorrow,
the game plan is we're gonna look at

228
00:14:41.340 --> 00:14:46.280
the cache API, and the cache API allows us
to actually have programmatic control of

229
00:14:46.280 --> 00:14:48.970
what the browser holds onto
in terms of resources.

230
00:14:48.970 --> 00:14:52.590
We look at index DB which is
a database-like level DB or

231
00:14:52.590 --> 00:14:56.660
Mongo where you can persist data in
between launches of Chrome, right?

232
00:14:56.660 --> 00:15:00.360
So we have the tools necessary
to do all of those things

233
00:15:00.360 --> 00:15:02.260
available from service worker.

234
00:15:02.260 --> 00:15:06.530
Service worker as I kind of open this
section with is like the crown jewel

235
00:15:06.530 --> 00:15:10.450
that gives us, brings all these
other technologies together for us.

236
00:15:11.840 --> 00:15:14.780
We can look at fetches and
analyze them, right?

237
00:15:14.780 --> 00:15:17.490
We can programmatically work with caches.

238
00:15:17.490 --> 00:15:19.414
We can store stuff in the database.

239
00:15:19.414 --> 00:15:23.320
All of those will be exactly as
we kind of expect them to, right?

240
00:15:23.320 --> 00:15:25.990
And it will exist outside of any
given one of our tabs, right?

241
00:15:25.990 --> 00:15:29.850
And there's some other really cool things,
I'm not gonna spoil the surprises yet.

242
00:15:29.850 --> 00:15:33.770
That by being in the background
independent of any tab

243
00:15:33.770 --> 00:15:34.810
that you're able to do both.

244
00:15:34.810 --> 00:15:39.363
That was a really good point about
the scope when you close Chrome as well.

245
00:15:39.363 --> 00:15:41.219
&gt;&gt; Mike: So
is there a way that we can poke around and

246
00:15:41.219 --> 00:15:42.714
scope other service providers?

247
00:15:42.714 --> 00:15:44.710
&gt;&gt; Steve Kinney: Yeah, so check this out.

248
00:15:44.710 --> 00:15:48.100
Go to console, you've got the top.

249
00:15:48.100 --> 00:15:49.060
Whoa, what's down here?

250
00:15:50.740 --> 00:15:53.390
It's a service, sw.js my friend.

251
00:15:53.390 --> 00:15:59.081
Number 4456, we go back like
all since like 4:44 PM today.

252
00:15:59.081 --> 00:16:03.903
And so now I am
&gt;&gt; Steve Kinney: Cool,

253
00:16:03.903 --> 00:16:07.630
and so if I say self,
&gt;&gt; Steve Kinney: There is my

254
00:16:07.630 --> 00:16:11.833
serviceWorker global scope,
&gt;&gt; Steve Kinney: And

255
00:16:11.833 --> 00:16:13.354
we could say, what do you want,
what should we type in here?

256
00:16:13.354 --> 00:16:15.290
&gt;&gt; Mike: Let's see counts,
can we see counts?

257
00:16:16.516 --> 00:16:18.012
&gt;&gt; Mike: No, no, maybe just counts.

258
00:16:18.012 --> 00:16:20.321
&gt;&gt; Steve Kinney: Yeah,
cuz we're in the context.

259
00:16:22.627 --> 00:16:27.133
&gt;&gt; Steve Kinney: Yeah
live coding fun times.

260
00:16:27.133 --> 00:16:29.420
&gt;&gt; Mike: You know if we
re-wrote that service worker so

261
00:16:29.420 --> 00:16:32.480
that we added counts to self,
then we would be able to do that.

262
00:16:33.880 --> 00:16:38.166
But it's in like top level module
scope basically at this point.

263
00:16:38.166 --> 00:16:40.167
&gt;&gt; Steve Kinney: But you can,
if there was code in here, so for

264
00:16:40.167 --> 00:16:43.439
instance let's actually give ourselves-
&gt;&gt; Mike: Once you un-register it

265
00:16:43.439 --> 00:16:45.301
programmatically in the console.

266
00:16:45.301 --> 00:16:53.032
&gt;&gt; Steve Kinney: Yeah, I'm also gonna-
&gt;&gt; Speaker 4: So

267
00:16:53.032 --> 00:16:54.302
what were you trying to do there?

268
00:16:54.302 --> 00:16:58.728
Just get account of total accounts?

269
00:16:58.728 --> 00:17:03.360
&gt;&gt; Mike: I was trying to get the object
we've defined starting on line 1.

270
00:17:03.360 --> 00:17:05.000
However, when all of that,

271
00:17:05.000 --> 00:17:09.980
you don't want to immediately invoke the
function expression is, it's like wraps.

272
00:17:09.980 --> 00:17:14.660
So it basically creates a private scope,
effectively that's what's happened here.

273
00:17:14.660 --> 00:17:18.720
So we can't get at that,
we would have to attach it to self.

274
00:17:20.000 --> 00:17:25.075
&gt;&gt; Speaker 4: So we can't go to
counts that fetches and count those.

275
00:17:25.075 --> 00:17:27.270
&gt;&gt; Mike: Nope, but
we could certainly attach it to self.

276
00:17:29.240 --> 00:17:33.820
Like the way we'd attach stuff to
Window and old JavaScript days.

277
00:17:33.820 --> 00:17:36.051
&gt;&gt; Steve Kinney: So
in terms of debugging it, though,

278
00:17:36.051 --> 00:17:39.397
you can see I did while Mike
was talking just a second ago,

279
00:17:39.397 --> 00:17:43.682
I created a function on self and
globally available called hello world.

280
00:17:43.682 --> 00:17:46.489
And you can see that when we
go into the developer tools,

281
00:17:46.489 --> 00:17:48.060
we can do it from the top level.

282
00:17:48.060 --> 00:17:50.488
&gt;&gt; Mike: This is interesting.

283
00:17:50.488 --> 00:17:52.923
&gt;&gt; Steve Kinney: Ooh, we got a friend.

284
00:17:52.923 --> 00:17:56.917
Our good friend,
the active one, number 4456,

285
00:17:56.917 --> 00:17:59.948
has a buddy hanging out with us, right?

286
00:17:59.948 --> 00:18:04.265
4459, who's installed and
waiting to show up on the scene.

287
00:18:09.483 --> 00:18:11.390
&gt;&gt; Steve Kinney: Which
is super interesting.

288
00:18:11.390 --> 00:18:14.710
So we're on 4459,
which is not the installed one.

289
00:18:14.710 --> 00:18:16.026
Go to 4456.

290
00:18:16.026 --> 00:18:17.357
&gt;&gt; Mike: So this is the activated one?

291
00:18:17.357 --> 00:18:18.183
&gt;&gt; Steve Kinney: Yeah.

292
00:18:18.183 --> 00:18:20.091
&gt;&gt; Mike: Self.Hello world.

293
00:18:20.091 --> 00:18:24.975
&gt;&gt; Steve Kinney: [CROSSTALK] But
I can enter the installed one and

294
00:18:24.975 --> 00:18:29.631
debug that one as well where
we had hello world, right?

295
00:18:29.631 --> 00:18:35.625
So if we go back over to application,
you can see the 4459 is ready and waiting.

296
00:18:35.625 --> 00:18:39.136
Without this checked, I can refresh this.

297
00:18:39.136 --> 00:18:41.120
It's still ready and waiting.

298
00:18:41.120 --> 00:18:43.360
It's still ready and waiting, right?

299
00:18:43.360 --> 00:18:45.525
But it will not be able
to take over until what?

300
00:18:45.525 --> 00:18:47.032
&gt;&gt; Group: Till you stop
the other one [CROSSTALK].

301
00:18:47.032 --> 00:18:50.498
&gt;&gt; Steve Kinney: Yeah, until I either
completely like close every tab

302
00:18:50.498 --> 00:18:53.973
currently accessing to it or
check this fine button.

303
00:18:53.973 --> 00:18:57.951
Which will as the as the overlay which you
actually can't see on that screen, but

304
00:18:57.951 --> 00:19:01.850
I can, you can see it just like very
light when I look at it from here.

305
00:19:01.850 --> 00:19:05.643
Force update servers
workaround page reload, and

306
00:19:05.643 --> 00:19:09.358
then if we click this,
who's gonna take charge?

307
00:19:09.358 --> 00:19:10.842
&gt;&gt; Group: 59.

308
00:19:10.842 --> 00:19:12.325
&gt;&gt; Steve Kinney: 59.

309
00:19:12.325 --> 00:19:13.648
&gt;&gt; Mike: We're getting a new one.

310
00:19:13.648 --> 00:19:16.680
&gt;&gt; Steve Kinney: Or
62 because I changed the file,

311
00:19:16.680 --> 00:19:22.430
service workers are fun so-
&gt;&gt; Mike: Let's uncheck it and reload.

312
00:19:22.430 --> 00:19:25.296
So now we've got another one waiting.

313
00:19:25.296 --> 00:19:26.056
&gt;&gt; Steve Kinney: Let's make a-
&gt;&gt; Speaker 4: So

314
00:19:26.056 --> 00:19:29.138
if you just hit stop there and
there's one waiting,

315
00:19:29.138 --> 00:19:33.590
will that other one just automatically
take over or does it have to reload?

316
00:19:33.590 --> 00:19:38.651
&gt;&gt; Mike: We need a navigation event
in order for something to be.

317
00:19:38.651 --> 00:19:40.619
&gt;&gt; Speaker 4: So
it has to reload, I gotcha.

318
00:19:40.619 --> 00:19:42.691
&gt;&gt; [INAUDIBLE].
&gt;&gt; Steve Kinney: Make some meaningless

319
00:19:42.691 --> 00:19:44.471
changes and head back.

320
00:19:51.342 --> 00:19:55.157
&gt;&gt; Mike: Great,
now if we go back to the console and

321
00:19:55.157 --> 00:20:00.175
get our active service worker set up,
activated one.

322
00:20:00.175 --> 00:20:09.046
And we can do
self.registration.unregister.

323
00:20:09.046 --> 00:20:11.000
&gt;&gt; Mike: And it returns a promise but
we don't care.

324
00:20:12.580 --> 00:20:15.169
Right now let's go and
look back at our Application tab.

325
00:20:16.210 --> 00:20:19.810
So now look on the right,
you see all of that ghosted out stuff.

326
00:20:19.810 --> 00:20:21.397
We can't click the Unregister link.

327
00:20:21.397 --> 00:20:27.518
It's been deleted, so we'll go
through an exercise tomorrow where

328
00:20:27.518 --> 00:20:32.591
like one of my service worker
war stories from LinkedIn.

329
00:20:32.591 --> 00:20:37.513
We need the ability if we push
a bad service worker to tell

330
00:20:37.513 --> 00:20:39.519
it to take itself out.

331
00:20:39.519 --> 00:20:44.156
And to basically make like,
progressively un-enhance the app so

332
00:20:44.156 --> 00:20:46.158
that we're back to normal.

333
00:20:46.158 --> 00:20:47.073
&gt;&gt; Steve Kinney: Progressive de-hancement.

334
00:20:47.073 --> 00:20:48.600
&gt;&gt; Mike: Progressive de-hancement, yeah.

335
00:20:48.600 --> 00:20:52.230
And so like this is a way we
can programatically say like,

336
00:20:52.230 --> 00:20:57.510
there's APIs for saying, relinquish
control and let the next one come in.

337
00:20:57.510 --> 00:21:01.590
But this one here was like,
all right, we're done like that.

338
00:21:01.590 --> 00:21:03.180
The next one didn't even take over.

339
00:21:03.180 --> 00:21:05.790
This is like we don't have
a service broker anymore.

340
00:21:05.790 --> 00:21:11.120
The next time it loads, if you go back
to the console, you would see no counts.

341
00:21:11.120 --> 00:21:14.230
Because it's a fresh page for you again.

342
00:21:14.230 --> 00:21:19.020
So we've got install and activate and
none of the fetch events were handled.

343
00:21:19.020 --> 00:21:21.580
Because the worker only

344
00:21:22.690 --> 00:21:27.430
became active after the app had booted,
if that makes sense.

345
00:21:27.430 --> 00:21:32.600
&gt;&gt; Speaker 6: When your newer one comes
in, the older one's state is lost, right?

346
00:21:34.220 --> 00:21:37.515
&gt;&gt; Mike: When a new service worker goes-
&gt;&gt; Speaker 6: That counter will be

347
00:21:37.515 --> 00:21:38.395
cleared.

348
00:21:38.395 --> 00:21:43.930
&gt;&gt; Mike: And that scope self, that's
a new self with each service worker.

349
00:21:43.930 --> 00:21:45.270
So the scope goes along with it.

350
00:21:47.270 --> 00:21:48.023
&gt;&gt; Speaker 6: One more question.

351
00:21:48.023 --> 00:21:51.439
You mentioned that service
workers can intercept requests.

352
00:21:51.439 --> 00:21:55.960
That's only mostly for the outbound
requests from the browser to the network.

353
00:21:57.520 --> 00:22:01.970
&gt;&gt; Mike: What kind of
request were you thinking of?

354
00:22:01.970 --> 00:22:06.056
&gt;&gt; Speaker 6: If you wanna ping a server
or something else, like from browser,

355
00:22:06.056 --> 00:22:10.964
or if you're trying to receive something
from the network without the browser

356
00:22:10.964 --> 00:22:11.878
being alive.

357
00:22:11.878 --> 00:22:13.627
&gt;&gt; Mike: So from server to client?

358
00:22:13.627 --> 00:22:14.379
&gt;&gt; Speaker 6: Yeah.

359
00:22:14.379 --> 00:22:16.750
&gt;&gt; Mike: So we call that web push.

360
00:22:16.750 --> 00:22:17.390
&gt;&gt; Speaker 6: Okay.

361
00:22:17.390 --> 00:22:19.860
&gt;&gt; Mike: And yes,
there is a way to intercept that.

362
00:22:19.860 --> 00:22:25.856
In fact, the browser doesn't have a way of
receiving that without a service worker.

363
00:22:25.856 --> 00:22:30.456
Service worker provides us what we need
in order to begin doing what you're

364
00:22:30.456 --> 00:22:31.487
talking about.

365
00:22:31.487 --> 00:22:35.302
&gt;&gt; Speaker 6: And in this push, not push,
whenever we are making that drop request,

366
00:22:35.302 --> 00:22:37.800
we are intercepting the fetch event.

367
00:22:37.800 --> 00:22:42.080
Do we get a callback when
the response come in as well?

368
00:22:44.840 --> 00:22:48.790
&gt;&gt; Mike: We can intercept
the fetch request, and

369
00:22:48.790 --> 00:22:50.640
you have a couple of options there.

370
00:22:50.640 --> 00:22:52.390
You can allow it to proceed.

371
00:22:53.670 --> 00:22:55.855
One thing you can do as we've done here,

372
00:22:55.855 --> 00:22:59.531
you'll notice that we have something
in that fetch event handler.

373
00:22:59.531 --> 00:23:05.831
But we're not really, we're clearly
not intercepting a fetch request.

374
00:23:05.831 --> 00:23:09.216
We haven't interfered with the app's
ability to go and get these images or

375
00:23:09.216 --> 00:23:10.353
the script or whatever.

376
00:23:10.353 --> 00:23:13.037
So you can leave things untouched, and

377
00:23:13.037 --> 00:23:17.930
there you don't really have a handle
on when things will get resolved.

378
00:23:17.930 --> 00:23:21.333
You can grab the request
off of that fetch event.

379
00:23:21.333 --> 00:23:24.951
And you can make your own call to fetch,
at which point fetch,

380
00:23:24.951 --> 00:23:28.028
as Steve went through that,
referred the promise.

381
00:23:28.028 --> 00:23:32.582
And so now, like often times what you
wanna do is allow the request to proceed,

382
00:23:32.582 --> 00:23:35.281
but then when it comes
back let's cache this.

383
00:23:35.281 --> 00:23:37.483
So that later if we need
the same file again,

384
00:23:37.483 --> 00:23:41.210
I'm just gonna serve it to you
without going out to the network.

385
00:23:41.210 --> 00:23:44.360
So you can let it parse through and
do something after, or

386
00:23:44.360 --> 00:23:49.460
you can not let it go to the outside
world and do whatever you wanna do.

387
00:23:49.460 --> 00:23:51.309
&gt;&gt; Steve Kinney: This is actually
the first topic we're gonna cover

388
00:23:51.309 --> 00:23:52.046
tomorrow morning.

389
00:23:52.046 --> 00:23:56.609
&gt;&gt; Mike: Yeah, okay, so
we need to describe one more API.

390
00:23:56.609 --> 00:24:00.149
Just gonna give everyone a crash
course in the cache API,

391
00:24:00.149 --> 00:24:04.521
which is basically how we persist
these requested response objects.

392
00:24:04.521 --> 00:24:05.021
&gt;&gt; Steve Kinney: Yep.

