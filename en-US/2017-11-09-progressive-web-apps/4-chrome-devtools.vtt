WEBVTT

1
00:00:00.730 --> 00:00:03.860
&gt;&gt; Mike North: And there is a great
DevTools course on Frontend Masters you

2
00:00:03.860 --> 00:00:04.440
should check out.

3
00:00:04.440 --> 00:00:06.763
But there are two areas I wanna focus on,

4
00:00:06.763 --> 00:00:11.212
in case some people have not seen that
one yet, two areas of Chrome DevTools.

5
00:00:11.212 --> 00:00:17.250
And Chrome is what we're gonna be working
with all day, in terms of developer tools.

6
00:00:17.250 --> 00:00:20.860
The first one I want you to pay
attention to is your Network tab.

7
00:00:20.860 --> 00:00:21.920
And it looks like this.

8
00:00:21.920 --> 00:00:25.050
I'm just gonna give you a quick
tour of what's going on here.

9
00:00:25.050 --> 00:00:28.285
So, you would do this up like,
I still use Inspect element,

10
00:00:28.285 --> 00:00:30.259
right-click anywhere on the page.

11
00:00:30.259 --> 00:00:34.230
Click Inspect element, a thing will
pop up on the bottom of your browser.

12
00:00:34.230 --> 00:00:38.640
And then click the Network tab on the top
of that new thing that popped up and

13
00:00:38.640 --> 00:00:41.170
you will see something
that looks like this.

14
00:00:41.170 --> 00:00:43.840
Now, you can set this up a number of ways,

15
00:00:43.840 --> 00:00:47.690
but I want us to pay attention
to a couple of things.

16
00:00:47.690 --> 00:00:52.090
First, we've got the name of requests
being sent out, and you can see that these

17
00:00:52.090 --> 00:00:58.330
look like API calls because you see
that /api in the grey text on the left.

18
00:00:58.330 --> 00:01:03.409
This is because I've used this top filter
here to filter for Only XHR, right?

19
00:01:03.409 --> 00:01:05.000
This is ajax.

20
00:01:06.030 --> 00:01:10.830
That filter box, by the way,
that can take either a string literal and

21
00:01:10.830 --> 00:01:14.910
it will go and look for
matches that match that string.

22
00:01:14.910 --> 00:01:17.370
You could also put a regular
expression in there.

23
00:01:17.370 --> 00:01:23.850
So this is great if you had some chatter
back and forth between two different

24
00:01:23.850 --> 00:01:28.450
system components and maybe you've
got a word send and a word receive.

25
00:01:28.450 --> 00:01:32.140
And you wanna sort of take away all of the
noise except those things that say send or

26
00:01:32.140 --> 00:01:33.090
receive.

27
00:01:33.090 --> 00:01:38.140
You could just write a regular
expression with an or operator in there.

28
00:01:38.140 --> 00:01:42.980
It would be,
slash send pipe receive slash.

29
00:01:42.980 --> 00:01:46.330
And that regex will be
honored in the filter.

30
00:01:47.970 --> 00:01:52.610
We've got a status where you see
your HTTP response status code,

31
00:01:52.610 --> 00:01:56.680
and these are 200s,
meaning everything looks good.

32
00:01:56.680 --> 00:02:01.310
For protocol here, we're gonna be
touching on HTTP/2 a little bit today.

33
00:02:03.030 --> 00:02:08.055
For the last, gosh,
30 years the web was operated on

34
00:02:08.055 --> 00:02:12.250
HTTP/1 and as our apps get more and

35
00:02:12.250 --> 00:02:16.070
more complicated it is necessary for
the standard to evolve.

36
00:02:16.070 --> 00:02:19.610
So, I want us to be able to
see the difference between

37
00:02:19.610 --> 00:02:21.180
those two types of requests.

38
00:02:22.220 --> 00:02:25.270
And then we've got this Size column.

39
00:02:25.270 --> 00:02:28.300
As we start to deal with
something called service workers,

40
00:02:28.300 --> 00:02:33.080
we'll be able to use this to identify what
is a request that's going to the outside

41
00:02:33.080 --> 00:02:38.820
world versus what's one
chunk of your app asking.

42
00:02:40.330 --> 00:02:42.480
We'll have two chunks
of our application and

43
00:02:42.480 --> 00:02:45.770
sort of one will send
the request to the other and

44
00:02:45.770 --> 00:02:49.120
the other will satisfy that request
instead of going to the outside world.

45
00:02:49.120 --> 00:02:52.240
That is the ultra high
level service worker idea.

46
00:02:52.240 --> 00:02:56.870
And then finally, we've got Time and
this Waterfall tick here.

47
00:02:56.870 --> 00:03:00.010
And the reason they're so
thin is that I have used

48
00:03:02.060 --> 00:03:06.430
this filter on the top, it's sort of
below this millisecond marks to sort of

49
00:03:06.430 --> 00:03:09.800
narrow the timeline to
a particular moment.

50
00:03:09.800 --> 00:03:14.390
But if you hover over these little
waterfall things you can see all

51
00:03:14.390 --> 00:03:19.070
of the time that you're spent waiting for
the browser to allow a request to go out.

52
00:03:19.070 --> 00:03:22.920
You can see DNS resolution,
you can see the overhead required for

53
00:03:22.920 --> 00:03:25.090
establishing a secure connection.

54
00:03:25.090 --> 00:03:28.390
So you can really drill down and
see what's going on there.

55
00:03:29.520 --> 00:03:33.440
So that's the Network tab, and
then there's this Performance tab.

56
00:03:33.440 --> 00:03:36.560
And we can think of this as
being divided into three chunks.

57
00:03:36.560 --> 00:03:43.370
The first is the timeline and
this is just sort of the superposition of

58
00:03:43.370 --> 00:03:48.633
how hard your CPU's working,
how much memory you're consuming,

59
00:03:48.633 --> 00:03:53.350
whether it's rendering that's taking
a lot of CPU versus computation.

60
00:03:54.620 --> 00:03:56.620
So that's on the top here.

61
00:03:56.620 --> 00:03:58.830
Below that we have network requests.

62
00:03:58.830 --> 00:04:01.320
And being able to see this
side by side is really useful.

63
00:04:02.570 --> 00:04:06.320
This is not the starting point
app that we're looking at.

64
00:04:06.320 --> 00:04:10.950
This is not a measurement of the app
as it is right now, in Master.

65
00:04:10.950 --> 00:04:15.610
What you would see, because of
this little screenshot film strip,

66
00:04:15.610 --> 00:04:18.600
right above the millisecond marks here,
you would see that this

67
00:04:18.600 --> 00:04:23.250
yellow bar in the network section, which
represents downloading the JavaScript.

68
00:04:23.250 --> 00:04:27.565
You'd have a completely blank screen until
that JavaScript landed, because that

69
00:04:27.565 --> 00:04:32.490
JavaScript is responsible for doing
100% of the visual stuff on the screen.

70
00:04:33.680 --> 00:04:38.478
But it's a great way to sort of see
the interaction between something

71
00:04:38.478 --> 00:04:43.040
came over the network,
then my cpu started working really hard.

72
00:04:43.040 --> 00:04:47.171
Then all of the animations on my page
started getting really choppy and

73
00:04:47.171 --> 00:04:49.700
I couldn't scroll smoothly.

74
00:04:49.700 --> 00:04:53.170
You wanna kinda see them all
side by side on one axis.

75
00:04:53.170 --> 00:04:57.760
And then below that we can see what
is called the flame chart, and

76
00:04:57.760 --> 00:05:04.490
this represents how much time each
function takes to be invoked.

77
00:05:04.490 --> 00:05:09.040
And if you hover over these little
sections here and you can zoom in and

78
00:05:09.040 --> 00:05:12.660
zoom out to sort of stretch this out and
focus on a particular area.

79
00:05:12.660 --> 00:05:17.530
You can see that some of them are really
thin and some of them are sort of fatter.

80
00:05:20.450 --> 00:05:25.780
We aspire to allow our web apps
to work at 60 frames per second.

81
00:05:25.780 --> 00:05:29.860
And that only allows us about
13 milliseconds maximum

82
00:05:29.860 --> 00:05:31.840
per function invocation.

83
00:05:33.060 --> 00:05:37.170
That is our budget, before we start
interfering with the ability to

84
00:05:37.170 --> 00:05:40.270
sort of scroll smoothly or
animate things on screen.

85
00:05:40.270 --> 00:05:46.760
In JavaScript we're working on one thread,
and everything we're doing is a very

86
00:05:46.760 --> 00:05:52.330
complicated process of bookkeeping and
adjusting this animation a little bit.

87
00:05:52.330 --> 00:05:55.250
And now let's do some
computationally intensive work and

88
00:05:55.250 --> 00:06:00.760
then draw one more frame of the animation,
it's a lot of multitasking.

89
00:06:00.760 --> 00:06:06.370
But this is where you can look to see if
there are massive performance issues and

90
00:06:06.370 --> 00:06:09.810
I'm going to walk you right
into a major performance issue.

91
00:06:09.810 --> 00:06:14.124
It's a function that takes
about 20 seconds to invoke, so

92
00:06:14.124 --> 00:06:19.809
it will be the obvious culprit when you
start doing this performance analysis.

93
00:06:19.809 --> 00:06:22.530
But knowing how to read this
flame chart is important.

94
00:06:22.530 --> 00:06:26.620
And we call it flames because
it's solid at the top,

95
00:06:26.620 --> 00:06:30.890
and it looks kind of like
fire as it comes down.

96
00:06:30.890 --> 00:06:35.970
You can think of it as a function
is one section of the flame chart,

97
00:06:35.970 --> 00:06:38.670
one row, or cell, I guess you can call it.

98
00:06:38.670 --> 00:06:43.130
And then any functions that it
invokes will be the next level down.

99
00:06:43.130 --> 00:06:45.660
So you can see that we start out course,
but

100
00:06:45.660 --> 00:06:48.500
then things sort of split up as
we go down and down and down.

101
00:06:48.500 --> 00:06:52.050
And so if you wanna figure out
what is causing this freeze,

102
00:06:52.050 --> 00:06:53.740
what is taking a long time?

103
00:06:53.740 --> 00:06:58.400
It would be a conspicuously wide bar, and
then you could sort of drill down and

104
00:06:58.400 --> 00:06:59.250
figure out.

105
00:06:59.250 --> 00:07:03.885
Well, when we get down to it,
I'm allocating a thousand arrays here,

106
00:07:03.885 --> 00:07:05.371
that's the problem.

107
00:07:05.371 --> 00:07:08.920
Maybe there is something we can do
to avoid that and make this faster.

108
00:07:08.920 --> 00:07:12.530
So these tools have been around for
a while.

109
00:07:12.530 --> 00:07:18.421
As we lean more on our client side apps,
as we try to push more responsibility

110
00:07:18.421 --> 00:07:23.301
in the direction of the browser,
this starts to become a must as

111
00:07:23.301 --> 00:07:28.109
supposed to something we look
at when we encounter a problem.

112
00:07:28.109 --> 00:07:31.648
You wanna keep an eye on this as you
develop rather than waiting until

113
00:07:31.648 --> 00:07:32.652
a problem occurs.

114
00:07:32.652 --> 00:07:36.769
Because oftentimes it's like a death
from a thousand paper cuts that makes

115
00:07:36.769 --> 00:07:37.560
things slow.

116
00:07:37.560 --> 00:07:42.937
And by the time things are slow,
there are 50 different

117
00:07:42.937 --> 00:07:47.540
tasks you have to perform
in order to speed it up.

