WEBVTT

1
00:00:00.210 --> 00:00:04.467
&gt;&gt; Steve: Here's an example and we're
purposely not using AJAX in this case.

2
00:00:04.467 --> 00:00:07.934
We'll go ahead and
fetch some file called beatles.jpg.

3
00:00:07.934 --> 00:00:11.792
And when that happens,
we do need to decode this response.

4
00:00:11.792 --> 00:00:15.321
Because fetch can handle
more than just text,

5
00:00:15.321 --> 00:00:17.952
we do need to tell it how to do that.

6
00:00:17.952 --> 00:00:20.487
What were you expecting, right?

7
00:00:20.487 --> 00:00:25.785
Okay, how we handle an image is different
than how we handle a string of text and

8
00:00:25.785 --> 00:00:28.617
we need to be aware of that and
tell fetch.

9
00:00:28.617 --> 00:00:32.861
Under the hood,
fetch actually streams the data through.

10
00:00:32.861 --> 00:00:35.675
So you can kinda get it as it
comes in rather than waiting for

11
00:00:35.675 --> 00:00:38.605
all of it with the exception of JSON,
because you need to have

12
00:00:38.605 --> 00:00:41.951
the entire object to see where it ends,
and stuff along those lines.

13
00:00:41.951 --> 00:00:45.099
And you could write your own
streaming decoder, right?

14
00:00:45.099 --> 00:00:48.252
You can write something as bytes come in,
you wanna do stuff with it.

15
00:00:48.252 --> 00:00:51.210
And if you have a very
specialized use case, I think.

16
00:00:51.210 --> 00:00:55.987
So a SendGrid, a user can upload
a CSV of all of their contacts

17
00:00:55.987 --> 00:00:59.092
the first time they start out, right?

18
00:00:59.092 --> 00:01:03.777
We might want to be able to like
parse those rows as they come in.

19
00:01:03.777 --> 00:01:07.503
That's a special use case that we
could write a decoder for that, but

20
00:01:07.503 --> 00:01:10.796
like the thing with making
promises versus receiving them.

21
00:01:10.796 --> 00:01:15.575
99.99% of the time, you're usually dealing
with some kind of text that's just

22
00:01:15.575 --> 00:01:18.395
a normal sized amount of text,
some kind of image.

23
00:01:18.395 --> 00:01:20.771
So I'm kinda JSON, right?

24
00:01:20.771 --> 00:01:23.924
You can get down in the weeds if you want,
but there are these helpers in here that

25
00:01:23.924 --> 00:01:26.960
will help you which I'll actually take
a look at the rest of them in a second.

26
00:01:28.280 --> 00:01:32.117
So yeah, we get, in this case,
the blob w hich is the image.

27
00:01:32.117 --> 00:01:35.104
We decode it and
then it's available for us.

28
00:01:35.104 --> 00:01:40.550
Now you could be like hey, why can't I
just take a string and put it in there?

29
00:01:40.550 --> 00:01:42.612
Well, we do have the full
response object and

30
00:01:42.612 --> 00:01:45.668
we're able to do that separately
from putting one of the widgets.

31
00:01:45.668 --> 00:01:48.202
We've loaded it outside
of making an image.

32
00:01:48.202 --> 00:01:51.930
If you were to put the string in,
then the browser would begin to load it.

33
00:01:51.930 --> 00:01:55.677
In this case, we have the full
response object and this URL,

34
00:01:55.677 --> 00:02:00.163
createObjectURL will create what we
would need to set into an image tag.

35
00:02:03.758 --> 00:02:06.071
&gt;&gt; Steve: Mike, do you have any questions?

36
00:02:06.071 --> 00:02:08.485
&gt;&gt; Mike: Yeah, well, it's not a question.

37
00:02:08.485 --> 00:02:11.462
I wanna be the non question person.

38
00:02:11.462 --> 00:02:14.127
I just wanna be clear that like for

39
00:02:14.127 --> 00:02:19.173
those browsers that have
implemented fetch, all requests for

40
00:02:19.173 --> 00:02:24.425
external resources go through
the same pathway that fetch uses.

41
00:02:24.425 --> 00:02:29.427
So when we're talking about,
you can use this function called fetch and

42
00:02:29.427 --> 00:02:34.183
you pass an URL, that same exact
pathway is used when you have a source

43
00:02:34.183 --> 00:02:39.040
attribute on an image tag or
a script tag for downloading JavaScript.

44
00:02:39.040 --> 00:02:41.549
Everything kind of goes
through that same pathway.

45
00:02:41.549 --> 00:02:45.121
So think of it like once a browser
has gotten through that point,

46
00:02:45.121 --> 00:02:47.313
fetches go one path for getting stuff.

47
00:02:47.313 --> 00:02:48.936
And that is by the way,

48
00:02:48.936 --> 00:02:54.072
why there is this reverse Polyfield
to like allow Ajax to keep working.

49
00:02:54.072 --> 00:02:57.640
But ultimately,
it's going through the same path as fetch.

50
00:02:58.640 --> 00:03:02.110
&gt;&gt; Steve: Put a mental bookmark on that,
cuz it's gonna become useful later.

