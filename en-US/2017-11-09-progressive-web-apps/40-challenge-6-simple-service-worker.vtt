WEBVTT

1
00:00:00.069 --> 00:00:03.100
&gt;&gt; Mike North: I'm gonna take you through
a little Simple Service Worker for

2
00:00:03.100 --> 00:00:06.020
a second here, and
you can actually access it here as well.

3
00:00:06.020 --> 00:00:11.790
And then what you're gonna do is you're
going to set up a Service Worker,

4
00:00:11.790 --> 00:00:15.896
not unlike the way you set
up that Web Worker before.

5
00:00:15.896 --> 00:00:22.016
And what we're gonna do is simply have it
maybe Console.log on it's installation or

6
00:00:22.016 --> 00:00:23.039
activation.

7
00:00:23.039 --> 00:00:27.829
And then I'm thinking every
time one of those is invoked,

8
00:00:27.829 --> 00:00:31.960
we'll just kinda keep
track of that number.

9
00:00:31.960 --> 00:00:36.692
And the reason that I want you to
do this is you'll be able to see

10
00:00:36.692 --> 00:00:41.697
that you can have it update a number and
console.log it, right?

11
00:00:41.697 --> 00:00:42.410
And that's cool.

12
00:00:42.410 --> 00:00:47.107
You'll see numbers incrementing
as you refresh, neat.

13
00:00:47.107 --> 00:00:51.432
But what you'll notice is that you'll
be able to close all the tabs,

14
00:00:51.432 --> 00:00:53.072
come back, do it again and

15
00:00:53.072 --> 00:00:57.790
the number's in the same place because
your service worker outlived you.

16
00:00:57.790 --> 00:01:01.337
Outlived your tabs,
hopefully it doesn't outlive you.

17
00:01:01.337 --> 00:01:05.280
It might.
[LAUGH] There's some slightly perilous

18
00:01:05.280 --> 00:01:06.569
situations.

19
00:01:06.569 --> 00:01:10.689
&gt;&gt; Speaker 2: Only if you use Elixir, then
your service worker outlives you, right?

20
00:01:10.689 --> 00:01:11.854
&gt;&gt; Mike North: Is this Elixir propaganda?

21
00:01:11.854 --> 00:01:14.237
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Mike North: All right, so

22
00:01:14.237 --> 00:01:17.583
I have this page over here and
it's a super simple service worker.

23
00:01:17.583 --> 00:01:19.700
In fact, it doesn't really do anything.

24
00:01:19.700 --> 00:01:22.786
That just happens to have a picture of
The Beatles, there's no real reason for

25
00:01:22.786 --> 00:01:23.599
that at this point.

26
00:01:27.725 --> 00:01:33.092
&gt;&gt; Mike North: But you can see that I'm
logging all this stuff to the console,

27
00:01:33.092 --> 00:01:35.632
from service-worker.js.

28
00:01:35.632 --> 00:01:40.369
And this is a glitch,
which means you can click on this remix.

29
00:01:40.369 --> 00:01:43.397
And you can see,
I have a server and some code, but

30
00:01:43.397 --> 00:01:46.730
you see client.js is way too small for
anyone to read.

31
00:01:49.030 --> 00:01:51.741
&gt;&gt; Mike North: It's the basic
service worker that we saw before.

32
00:01:51.741 --> 00:01:55.088
So we have serviceWorker navigator,
start by saying, okay, cool,

33
00:01:55.088 --> 00:01:57.769
you support serviceWorker,
go ahead and register it.

34
00:01:57.769 --> 00:02:01.892
If the registration is successful, we'll
say that and we'll show the registration.

35
00:02:01.892 --> 00:02:04.808
If not,
we'll say something went terribly wrong.

36
00:02:04.808 --> 00:02:10.839
In the serviceWorker, you can see I have
three events that I'm listening for.

37
00:02:10.839 --> 00:02:16.207
On install, I say,
something is installing, that seems good.

38
00:02:16.207 --> 00:02:22.070
On activate, I say, I am now the service
worker in charge, thank you very much.

39
00:02:22.070 --> 00:02:26.044
And then anytime a fetch is made,
now again,

40
00:02:26.044 --> 00:02:31.272
if this was a movie,
we'd have a flashback to Mike saying,

41
00:02:31.272 --> 00:02:37.254
every network request, even images,
are fetches under the hood.

42
00:02:37.254 --> 00:02:41.099
All right,
we're back into the current time again.

43
00:02:41.099 --> 00:02:45.299
And we can see that actually,
if you look at all the fetches happening,

44
00:02:45.299 --> 00:02:48.389
you'll see that image triggering a fetch,
right?

45
00:02:48.389 --> 00:02:51.301
You'll see fetching
the JavaScript triggering a fetch.

46
00:02:51.301 --> 00:02:56.630
You will actually see getting
the index.html triggering a fetch, right?

47
00:02:56.630 --> 00:02:59.698
Which is interesting,
because normally, we load the HTML,

48
00:02:59.698 --> 00:03:01.999
the HTML loads the JavaScript and
the images.

49
00:03:01.999 --> 00:03:06.839
Here even the getting the HTML page
goes pass to the service worker

50
00:03:06.839 --> 00:03:11.859
that existed long before that HTML
page was ever asked for, right?

51
00:03:11.859 --> 00:03:14.800
And it was already present
to intercept that.

52
00:03:14.800 --> 00:03:17.174
But this is also a really
good boilerplate for

53
00:03:17.174 --> 00:03:20.120
what the world's simplest
service worker looks like.

54
00:03:20.120 --> 00:03:24.774
As well as what the world's simplest,
too noisy in all these cases, but

55
00:03:24.774 --> 00:03:29.749
world's simplest version of what
a server worker registration looks like.

56
00:03:29.749 --> 00:03:35.250
Your job is to bring this
in to front-end grocer.

57
00:03:35.250 --> 00:03:38.430
At this point, all we wanna do
is register a service worker.

58
00:03:38.430 --> 00:03:40.720
Logging into the console is totally fine.

59
00:03:40.720 --> 00:03:44.362
And what we wanna do is maybe increment
a number of how many times it's been

60
00:03:44.362 --> 00:03:47.030
installed, or
how many times it's been activated.

61
00:03:47.030 --> 00:03:48.340
How you do that is up to you.

62
00:03:48.340 --> 00:03:50.628
You would do that in
the service worker file itself,

63
00:03:50.628 --> 00:03:53.232
because that is the one that
will exist outside of the page.

64
00:03:53.232 --> 00:03:54.880
And you just increment
those numbers each time.

