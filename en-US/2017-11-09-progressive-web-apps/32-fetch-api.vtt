WEBVTT

1
00:00:00.250 --> 00:00:03.463
&gt;&gt; Steve Kinney: So we have a new way of
fetching data in modern browsers, and

2
00:00:03.463 --> 00:00:05.087
it's called fetch, right?

3
00:00:05.087 --> 00:00:09.893
So we don't have to actually mention XML
anymore, and it's a new way of handling

4
00:00:09.893 --> 00:00:13.583
network requests, and
it's actually really interesting.

5
00:00:13.583 --> 00:00:17.247
You'll be like, is this some
fancy API over XML HTTP requests?

6
00:00:17.247 --> 00:00:21.347
It's actually not, it's actually
lower level in a lot of ways,

7
00:00:21.347 --> 00:00:25.832
and in browsers that support fetch,
XHR send actually uses fetch now.

8
00:00:25.832 --> 00:00:30.326
So it's like an inverted
obsolescence thing, right?

9
00:00:30.326 --> 00:00:33.728
Now XHR actually is an abstraction
over fetch, but fetch,

10
00:00:33.728 --> 00:00:38.354
first thing we might notice, one, I
didn't have to put nine different events,

11
00:00:38.354 --> 00:00:40.822
open stuff and
send it in some weird order.

12
00:00:40.822 --> 00:00:43.879
It has a promised based API,
which is pretty cool,

13
00:00:43.879 --> 00:00:47.790
we're gonna talk about that middle
line in there in a second, but

14
00:00:47.790 --> 00:00:52.288
it looks a lot like that dollar sign,
ajax or dollar sign get json, right?

15
00:00:52.288 --> 00:00:56.366
That case we wouldn't have that center
line with the then response json,

16
00:00:56.366 --> 00:00:59.877
I will talk about that we're just
gonna hand over for a second.

17
00:00:59.877 --> 00:01:02.654
But then we get the result and
we can do stuff with it, and

18
00:01:02.654 --> 00:01:05.629
that's really all we wanted to
do with it is stuff, right?

19
00:01:05.629 --> 00:01:08.489
It's supported in almost
all the major browsers and

20
00:01:08.489 --> 00:01:10.836
can be polyfilled in
the ones that are not.

21
00:01:10.836 --> 00:01:13.920
A polyfill is basically checks to
see if there's a fetch, if not,

22
00:01:13.920 --> 00:01:16.298
writes it in JavaScript so
guess what you have now?

23
00:01:16.298 --> 00:01:22.125
Fetch, and it's also Node.js friendly,
XMLHttpRequest doesn't exist a node,

24
00:01:22.125 --> 00:01:27.146
and as my kind of eluded to earlier,
doesn't exist in workers, right?

25
00:01:27.146 --> 00:01:31.138
And a thing that we're gonna
use today is workers, so

26
00:01:31.138 --> 00:01:36.459
this is a way to send ajax request or
send network request at this point,

27
00:01:36.459 --> 00:01:41.628
from any of our workers and we can
use it in the browser as well, cool.

28
00:01:43.454 --> 00:01:45.534
&gt;&gt; Steve Kinney: Also,
if you wanna think about the future,

29
00:01:45.534 --> 00:01:49.077
there is a syntax in JavaScript now
called async await that I kind of briefly

30
00:01:49.077 --> 00:01:51.117
mentioned when we talked about promises.

31
00:01:51.117 --> 00:01:54.897
What async await does is you just
say async before a function, and

32
00:01:54.897 --> 00:01:59.515
then anything that would return a promise,
you prefix with the await keyword.

33
00:01:59.515 --> 00:02:03.867
And what will happen is normally functions
run to completion in JavaScript which

34
00:02:03.867 --> 00:02:08.475
means, once you start a function, you're
going until you either, A, return, B,

35
00:02:08.475 --> 00:02:11.295
throwing error, or C,
hit the end of the function.

36
00:02:11.295 --> 00:02:15.486
This uses generators so you can pause
a function come back to it later, so,

37
00:02:15.486 --> 00:02:18.428
in this case we look at this
get data async function.

38
00:02:18.428 --> 00:02:22.122
All that makes this async functions
putting the word async before it,

39
00:02:22.122 --> 00:02:24.449
boom, you're using async functions now.

40
00:02:24.449 --> 00:02:27.895
We will try it cuz there is the issue that
the network could come back poorly and

41
00:02:27.895 --> 00:02:29.339
we do need to handle that error.

42
00:02:29.339 --> 00:02:33.517
But where it says const response, what
we're gonna do is we will go ahead and

43
00:02:33.517 --> 00:02:35.034
make the network request.

44
00:02:35.034 --> 00:02:39.225
As we said before we don't know when
it's coming back if it's coming back so

45
00:02:39.225 --> 00:02:42.708
we'll put this function on pause for
a second and we'll wait.

46
00:02:42.708 --> 00:02:47.566
When we hear back from the network,
we'll pick back up where we dropped off,

47
00:02:47.566 --> 00:02:51.700
and you can see that it has a very
synchronous looking model to it.

48
00:02:51.700 --> 00:02:55.337
It goes line by line, there's none of
this callbacks, or promise chaining, or

49
00:02:55.337 --> 00:02:57.105
anything along those lines one by one.

50
00:02:57.105 --> 00:02:59.036
Under the hood it is promises, but

51
00:02:59.036 --> 00:03:02.509
you can pretend that you don't
know about promises anymore.

52
00:03:02.509 --> 00:03:06.621
Which now you're all yeah,
just learned about promises, it's fine.

53
00:03:06.621 --> 00:03:13.040
So it looks like Ajax, and
it's got some subtle differences right?

54
00:03:13.040 --> 00:03:17.975
One dollar sign Ajax or any of
the other XHR based ways of doing that

55
00:03:17.975 --> 00:03:22.729
will reject the promise,
if you get a 400 or a 500 error,

56
00:03:22.729 --> 00:03:28.045
which is, we got to the server and
the server said go away, all right?

57
00:03:28.045 --> 00:03:32.877
Or the server like blew up and
like nothing happened, we'll say,

58
00:03:32.877 --> 00:03:37.642
reject the promise, it didn't work out,
fetch won't do that.

59
00:03:37.642 --> 00:03:42.626
You can check to see if everything okay,
if you got told by the server 400, 404,

60
00:03:42.626 --> 00:03:47.845
500, whatever, you can find that out, but
we're still gonna count that as success.

61
00:03:47.845 --> 00:03:53.198
We got to the server and
we made it back alive, success, right?

62
00:03:53.198 --> 00:03:56.140
So it'll only reject on a network failure,

63
00:03:56.140 --> 00:03:59.969
again we're in a workshop
about building offline apps.

64
00:03:59.969 --> 00:04:03.957
Seems like this is annoying that it
doesn't reject on a network request that

65
00:04:03.957 --> 00:04:07.570
was successful with the answer you
didn't like, but that is for us,

66
00:04:07.570 --> 00:04:11.184
qualitatively different than one
that didn't make it there at all,

67
00:04:11.184 --> 00:04:12.832
in how we handle these things.

68
00:04:12.832 --> 00:04:17.285
And by default Fetch does not send or
receive your cookies,

69
00:04:17.285 --> 00:04:21.038
and we'll kind of talk
a little about that later.

70
00:04:21.038 --> 00:04:27.687
So, Fetch can do a few more things though,
one, it can get more than just XML and

71
00:04:27.687 --> 00:04:32.052
JSON, we can also get all
sorts of other data types,

72
00:04:32.052 --> 00:04:36.238
we can get images,
we can get other script files.

73
00:04:36.238 --> 00:04:39.741
We can get videos,
stuff along those lines, right?

74
00:04:39.741 --> 00:04:43.826
Things that we, especially if you wanted
to pull a script you might try something

75
00:04:43.826 --> 00:04:47.908
like Json p or something along those lines
which is like a clever hack to try to pull

76
00:04:47.908 --> 00:04:51.569
this off, fetch is like no this can just
be like a thing we can handle it and

77
00:04:51.569 --> 00:04:52.738
you can do it for real.

78
00:04:52.738 --> 00:04:56.898
Basically anything that you would put
into like an image source attribute or

79
00:04:56.898 --> 00:05:00.603
script source, or anything along
those lines you can also fetch and

80
00:05:00.603 --> 00:05:03.730
put into those tags as well and
we'll see how that works.

81
00:05:03.730 --> 00:05:08.306
All right the three major things
that you need to know, one,

82
00:05:08.306 --> 00:05:11.007
how the actual fetch method works.

83
00:05:11.007 --> 00:05:16.356
Fetch it's both the method that
you can call fetch parentheses,

84
00:05:16.356 --> 00:05:18.406
as well as the fetch API.

85
00:05:18.406 --> 00:05:19.680
One has like a capital F,

86
00:05:19.680 --> 00:05:22.484
one has a lowercase f with
some parentheses next to it.

87
00:05:22.484 --> 00:05:26.463
It's okay to think of them at the same
thing but let's actually talk about

88
00:05:26.463 --> 00:05:29.622
the syntax as well as
the conceptual framework around it.

89
00:05:29.622 --> 00:05:33.185
Two is we'll talk a little bit about
configuring request objects and

90
00:05:33.185 --> 00:05:36.145
then working with the response
objects that we get back.

91
00:05:36.145 --> 00:05:40.288
In a normal XHR HTTP request, you
would've gotten back the JSON, the XML,

92
00:05:40.288 --> 00:05:44.304
really what you would have gotten was
a string that you would've turned in

93
00:05:44.304 --> 00:05:45.634
to JSON or XML, right?

94
00:05:45.634 --> 00:05:50.371
This way we're actually going to get
a full object that is all the parts of

95
00:05:50.371 --> 00:05:54.110
the response, what are the headers,
so on and so forth.

