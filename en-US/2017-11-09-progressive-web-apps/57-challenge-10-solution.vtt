WEBVTT

1
00:00:00.000 --> 00:00:03.910
&gt;&gt; Mike: The first thing we'll gonna
do is add a little enhancement

2
00:00:03.910 --> 00:00:06.160
on top of the last solution.

3
00:00:06.160 --> 00:00:11.081
So that we kinda put a bow on it, and
we get rid of the situation where we

4
00:00:11.081 --> 00:00:17.710
had kind of fallback images for everything
in the event that we turned out API off.

5
00:00:17.710 --> 00:00:24.270
And the solution here is, I'm sure there's
a smarter way to do it, but in the moment

6
00:00:24.270 --> 00:00:27.870
I'm just reaching for something that is
obvious, and easy to understand and read.

7
00:00:28.990 --> 00:00:31.940
And it's just going to involve
duplicating a little code.

8
00:00:31.940 --> 00:00:37.232
Now, let's look at the way that
we were handling JSON data here.

9
00:00:39.460 --> 00:00:42.990
&gt;&gt; Mike: So
we've got fetchApiDataWithFallback.

10
00:00:42.990 --> 00:00:47.990
And in many of the situations where
we're first fetching something and

11
00:00:47.990 --> 00:00:51.700
if it comes back and things didn't
work out, we then reach into the cash.

12
00:00:51.700 --> 00:00:56.820
Oftentimes if we get the response,
that's great, we just use it.

13
00:00:56.820 --> 00:00:59.340
In this case we are doing
some stuff beforehand.

14
00:00:59.340 --> 00:01:05.336
I'm just going to copy this and go up to
where we are handling our image stuff.

15
00:01:05.336 --> 00:01:08.056
And here we've got the request for
our image,

16
00:01:08.056 --> 00:01:10.707
here's the situation where we get a 404,

17
00:01:10.707 --> 00:01:16.470
here's the situation where things look
good, where we're getting the real image.

18
00:01:16.470 --> 00:01:20.970
I'm just going to paste this here,
and the only thing I have to

19
00:01:20.970 --> 00:01:25.010
do now is open the cache up so
that we get that cache, right?

20
00:01:25.010 --> 00:01:32.150
Remember, we had cache.open
around this whole function here.

21
00:01:32.150 --> 00:01:33.852
So I'm just going to
copy that line actually.

22
00:01:33.852 --> 00:01:36.606
Beep boop.

23
00:01:36.606 --> 00:01:44.200
And we will do something like this,
return that, it already has return.

24
00:01:44.200 --> 00:01:48.730
Return this thing, it's a promise, right?

25
00:01:48.730 --> 00:01:51.472
Inside the promise we
can paste this stuff.

26
00:01:54.114 --> 00:01:57.110
&gt;&gt; Mike: And at this point,
it should work.

27
00:01:57.110 --> 00:01:58.870
So, I'm gonna start the server back up.

28
00:02:00.840 --> 00:02:03.780
I'm gonna increment my cache,
actually it shouldn't even matter now.

29
00:02:03.780 --> 00:02:06.000
This kind of cache here,

30
00:02:06.000 --> 00:02:10.610
it's just sort of as things go through it,
we're storing it for later, right?

31
00:02:10.610 --> 00:02:13.110
We don't need the installation or
activation process.

32
00:02:13.110 --> 00:02:16.580
That might require us to
sort of bump a version here.

33
00:02:18.370 --> 00:02:19.480
So I fired it up.

34
00:02:22.790 --> 00:02:26.810
And it's building the app, and here we go.

35
00:02:26.810 --> 00:02:29.620
Okay, so
here's the fallback image that we expect,

36
00:02:29.620 --> 00:02:34.270
this little question mark up top,
and now we've seen all these images.

37
00:02:34.270 --> 00:02:35.110
I just want to go and

38
00:02:35.110 --> 00:02:40.300
look in my Application tab
here into the cache's section.

39
00:02:40.300 --> 00:02:43.900
Refresh it, and great.

40
00:02:43.900 --> 00:02:48.810
So now in my Fallback section,
not only do I have a lot of JSON here,

41
00:02:48.810 --> 00:02:54.534
these things that begin with API, but
I've got a ton of images below that.

42
00:02:54.534 --> 00:02:59.770
So now,
this is all the same category of data.

43
00:02:59.770 --> 00:03:04.650
It's stuff that we would prefer
to use the fresh version,

44
00:03:04.650 --> 00:03:08.690
if we lose a connection, we're gonna use
the stuff that we have kept for later.

45
00:03:08.690 --> 00:03:15.310
So now, kill the server,
start our npm run watch.

46
00:03:16.800 --> 00:03:19.733
Let it do its thing, and

47
00:03:19.733 --> 00:03:25.069
when I refresh,
&gt;&gt; Mike: Damn it.

48
00:03:30.070 --> 00:03:33.450
&gt;&gt; Mike: All right,
we're not gonna go down that rabbit hole.

49
00:03:33.450 --> 00:03:36.609
You had it working though,
so it is possible.

50
00:03:36.609 --> 00:03:39.300
I'm probably just missing
something obvious.

51
00:03:39.300 --> 00:03:43.870
That being said, the fallback image
makes this not a breaking issue here.

52
00:03:43.870 --> 00:03:49.538
Let me just,
&gt;&gt; Mike: I'm

53
00:03:49.538 --> 00:03:50.933
just gonna save this for later.

54
00:03:56.195 --> 00:03:59.630
&gt;&gt; Mike: All right, so now we're kind
of back to the starting point here.

55
00:03:59.630 --> 00:04:01.430
So now we're gonna go
through the solution for

56
00:04:01.430 --> 00:04:04.480
the index.html portion of this exercise.

57
00:04:04.480 --> 00:04:09.560
And the first thing I wanna
do is I wanna make sure that

58
00:04:09.560 --> 00:04:13.920
as part of the installation
process of the service worker,

59
00:04:13.920 --> 00:04:19.230
by the time it is activated,
we must have an index.html cached.

60
00:04:19.230 --> 00:04:24.280
That's one file that we are going
to use no matter what path

61
00:04:24.280 --> 00:04:27.710
a user enters our app through.

62
00:04:27.710 --> 00:04:31.238
So they might be on the /orders page where
they can see all of the orders that we

63
00:04:31.238 --> 00:04:32.340
have placed.

64
00:04:32.340 --> 00:04:36.540
We're still gonna reach for
just the regular index.html.

65
00:04:36.540 --> 00:04:40.610
So in this sense the way we
match something in the cache,

66
00:04:40.610 --> 00:04:42.160
it's gonna look a little bit different.

67
00:04:42.160 --> 00:04:44.450
And I want you to pay attention
to that part specifically.

68
00:04:45.990 --> 00:04:51.110
The easiest way, once we already have
a list of resources to precache,

69
00:04:51.110 --> 00:04:56.110
the easiest way to go about
adding index.html to that is

70
00:04:56.110 --> 00:05:01.450
to just push it right into this
toPrefetch array, and we're done.

71
00:05:03.540 --> 00:05:08.090
Now I'm going to have to
increment the cache version,

72
00:05:08.090 --> 00:05:10.550
just so that we get a fresh pass.

73
00:05:10.550 --> 00:05:15.010
Start the server up, and
let's think about what we wanna do next.

74
00:05:15.010 --> 00:05:20.811
So, we're gonna need a little bit
of logic in our service worker.

75
00:05:20.811 --> 00:05:25.831
And the suggestion I
made as we were setting

76
00:05:25.831 --> 00:05:31.131
this exercise up was that
we want to kinda just

77
00:05:31.131 --> 00:05:36.161
handle index.html cases and exit early.

78
00:05:40.078 --> 00:05:41.648
&gt;&gt; Mike: So it'll look like this.

79
00:05:45.482 --> 00:05:49.510
&gt;&gt; Mike: Handle it return,
something like that.

80
00:05:49.510 --> 00:05:52.392
Remember, it's not important what
we return from this function event.

81
00:05:52.392 --> 00:05:56.100
That respondWith, that is the main
thing that's interesting here.

82
00:05:57.140 --> 00:05:59.900
So basically we're just gonna exit early

83
00:05:59.900 --> 00:06:02.140
in the even that we're
handling this situation.

84
00:06:02.140 --> 00:06:05.660
And there's no special sauce here.

85
00:06:05.660 --> 00:06:10.194
These are just tools and rules of
thumb for managing complexity, right?

86
00:06:10.194 --> 00:06:13.070
Cuz a lot is going on
inside fetch at this point.

87
00:06:14.310 --> 00:06:15.840
Let's look back at the slides.

88
00:06:15.840 --> 00:06:20.700
So we have a couple little cheats here,
couple of suggestions.

89
00:06:20.700 --> 00:06:24.340
The first is these two constants.

90
00:06:24.340 --> 00:06:29.430
So I'm gonna put those at
the top of my service worker.js.

91
00:06:29.430 --> 00:06:32.620
That's gonna give us a URL for index.html.

92
00:06:32.620 --> 00:06:36.770
This is important because it's the key
we're going to use when we reach into

93
00:06:36.770 --> 00:06:37.710
the cache.

94
00:06:37.710 --> 00:06:41.710
We might get a request that comes in for
/orders,

95
00:06:41.710 --> 00:06:44.460
we're always reaching just for index.html.

96
00:06:44.460 --> 00:06:48.100
We kind of ignore the path because
we're dealing with the single page up.

97
00:06:48.100 --> 00:06:52.300
The path is an illusion from
an HTTP request standpoint,

98
00:06:52.300 --> 00:06:54.490
it's just that route page.

99
00:06:57.230 --> 00:07:01.160
So, the next thing we're gonna
steal from here is our two checks.

100
00:07:01.160 --> 00:07:05.630
I gave them to you because the point
is not to be tricky about this.

101
00:07:05.630 --> 00:07:09.989
And if you're like me, you probably
keep cheat sheet of things like this.

102
00:07:09.989 --> 00:07:14.889
So less chance of bugs if you're just
always are pulling it from the same place.

103
00:07:15.900 --> 00:07:18.380
You solve it once and then reuse it.

104
00:07:18.380 --> 00:07:23.420
Okay, if it's an HTML request,

105
00:07:23.420 --> 00:07:27.720
I'll just change that like here,
actually, to align with the slides.

106
00:07:27.720 --> 00:07:34.279
And there's our request, so
we have to add event.request.

107
00:07:34.279 --> 00:07:37.469
And if it's an HTML request and
isLocal, so

108
00:07:37.469 --> 00:07:42.110
if we're not dealing with
a Chrome extension or something.

109
00:07:42.110 --> 00:07:47.735
If you ever clicked on something
in Chrome up at the top

110
00:07:47.735 --> 00:07:52.969
where it'll open up
a little widget like this.

111
00:07:54.330 --> 00:08:01.510
That's an HTML document, you don't want to
be dealing with in your service worker.

112
00:08:03.820 --> 00:08:05.800
And that's why we're doing isLocal.

113
00:08:05.800 --> 00:08:09.133
So, we have a bias for

114
00:08:09.133 --> 00:08:14.516
responding with the fetch first.

115
00:08:17.825 --> 00:08:20.877
&gt;&gt; Mike: And
the nature of most static hosting for

116
00:08:20.877 --> 00:08:25.362
single page apps is you can hit
it with any path you want, and

117
00:08:25.362 --> 00:08:29.620
you're just gonna get the same
index.html page back.

118
00:08:29.620 --> 00:08:34.310
So it's fine to do the fetch part of

119
00:08:34.310 --> 00:08:39.550
this a neat way that we've been
working with all along, right?

120
00:08:39.550 --> 00:08:42.310
If you even pass /orders,

121
00:08:42.310 --> 00:08:47.410
if I were to curl that from the terminal,
I'd still get HTML back, it's fine.

122
00:08:49.110 --> 00:08:53.434
Now, if we get a response, that's great.

123
00:08:55.724 --> 00:09:02.160
&gt;&gt; Mike: If we run into a problem, we need
to deal with it a little bit differently.

124
00:09:05.260 --> 00:09:10.800
So here, we're going to return, actually,

125
00:09:10.800 --> 00:09:12.590
I can try to do it, well,
I'll do it like this.

126
00:09:13.840 --> 00:09:16.637
Return caches.match.

127
00:09:19.803 --> 00:09:24.060
&gt;&gt; Mike: INDEX.HTML_URL,
or INDEX_HTML_URL.

128
00:09:24.060 --> 00:09:27.800
So we're always reaching into
the cache for that same thing.

129
00:09:27.800 --> 00:09:29.890
This is the only time we've done this,

130
00:09:29.890 --> 00:09:32.630
everywhere else we've passed
the request object in.

131
00:09:32.630 --> 00:09:36.159
This is a unique thing about
dealing with single page apps and

132
00:09:36.159 --> 00:09:37.691
caching in index.html.

133
00:09:37.691 --> 00:09:41.109
And the last thing is I want
to specify which cache, and

134
00:09:41.109 --> 00:09:43.351
it's gonna be the prefetch cache.

135
00:09:43.351 --> 00:09:48.384
Cuz, remember, I added it to
the list of toPrefetch, that array.

136
00:09:54.972 --> 00:09:57.648
&gt;&gt; Mike: All right,
shall we take it for a spin?

137
00:10:00.464 --> 00:10:01.818
&gt;&gt; Speaker 2: Yes.

138
00:10:01.818 --> 00:10:03.035
&gt;&gt; Mike: [LAUGH]
&gt;&gt; Speaker 2: Thank you.

139
00:10:03.035 --> 00:10:05.794
&gt;&gt; Mike: [LAUGH]
&gt;&gt; Speaker 2: I thought

140
00:10:05.794 --> 00:10:07.320
someone else was going to say it.

141
00:10:07.320 --> 00:10:11.014
&gt;&gt; Mike: I wasn't moving until someone-
&gt;&gt; Speaker 2: [LAUGH]

142
00:10:11.014 --> 00:10:12.940
I figured, I allow you to keep going.

143
00:10:15.210 --> 00:10:17.250
&gt;&gt; Mike: All right, so here we go.

144
00:10:17.250 --> 00:10:18.137
We're online.

145
00:10:20.132 --> 00:10:22.071
&gt;&gt; Mike: So I'm gonna to Application,

146
00:10:22.071 --> 00:10:25.957
there's a nice little check box
here that lets us go offline.

147
00:10:30.161 --> 00:10:32.643
&gt;&gt; Mike: [SOUND] I'm gonna stop my server.

148
00:10:37.131 --> 00:10:38.418
&gt;&gt; Mike: And it still works,

149
00:10:38.418 --> 00:10:44.060
I'm gonna close code
&gt;&gt; Mike: And it still works.

150
00:10:45.300 --> 00:10:49.280
So we now have an offline application.

151
00:10:51.070 --> 00:10:55.680
Just keep in mind, I want you to
understand how far we've come here.

152
00:10:55.680 --> 00:10:58.620
Keep in mind we haven't really
touched all of the react

153
00:10:58.620 --> 00:11:00.810
stuff that you're seeing on the screen.

154
00:11:00.810 --> 00:11:05.240
And the big idea here is we have
added offline support by putting

155
00:11:05.240 --> 00:11:09.960
something underneath the application
rather than adding a whole bunch of

156
00:11:09.960 --> 00:11:15.370
complex sophisticated stuff
that is entangled with our app.

157
00:11:15.370 --> 00:11:18.200
This is a separate project.

158
00:11:18.200 --> 00:11:20.760
Think of it that way,
it's a separate project.

159
00:11:20.760 --> 00:11:22.869
Separate script that gets built.

160
00:11:22.869 --> 00:11:24.938
You can share modules, right?

161
00:11:26.136 --> 00:11:34.228
It's not even opened anymore.

162
00:11:34.228 --> 00:11:37.580
Although you have six modules and
grab stuff, utility functions and

163
00:11:37.580 --> 00:11:38.512
whatever we need.

164
00:11:38.512 --> 00:11:41.424
But in the end we're left with two

165
00:11:41.424 --> 00:11:46.850
largely decoupled things
that are working together.

166
00:11:46.850 --> 00:11:48.750
And if we took the service worker away,

167
00:11:48.750 --> 00:11:53.460
we'd be looking at the traditional
offline-asaur, right?

168
00:11:53.460 --> 00:11:56.430
So pretty big idea.

