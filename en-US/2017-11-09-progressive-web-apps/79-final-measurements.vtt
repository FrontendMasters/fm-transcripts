WEBVTT

1
00:00:00.330 --> 00:00:03.570
&gt;&gt; Mike North: I just want to take
a couple of last measurements of our app,

2
00:00:03.570 --> 00:00:06.210
now that it's in this good condition here.

3
00:00:06.210 --> 00:00:08.648
I'm gonna make a production
build of the app.

4
00:00:12.651 --> 00:00:15.969
&gt;&gt; Mike North: npm run build prod.

5
00:00:17.961 --> 00:00:21.718
&gt;&gt; Mike North: And we're going
to use a little HTTP2 server and

6
00:00:21.718 --> 00:00:26.494
we're gonna run Lighthouse again
just to see where we are at.

7
00:00:28.948 --> 00:00:35.835
&gt;&gt; Mike North: So the first thing
I wanna do is dist grep app.

8
00:00:48.600 --> 00:00:53.060
&gt;&gt; Mike North: So if we look at the size
of our app here, this is the Gzip size.

9
00:00:53.060 --> 00:00:57.851
Oops sorry, that's,
&gt;&gt; Mike North: We've got many

10
00:00:57.851 --> 00:01:00.010
builds in there.

11
00:01:00.010 --> 00:01:01.640
Let me just build it again real fast.

12
00:01:01.640 --> 00:01:07.050
So we should be at about 60 kilobytes,
which is pretty fantastic.

13
00:01:07.050 --> 00:01:10.650
We've come down from 80 to 64, should be.

14
00:01:10.650 --> 00:01:14.003
I mean, we've written some code since
then, so let's check it out to make sure.

15
00:01:17.077 --> 00:01:20.655
&gt;&gt; Mike North: So there's our GZIPed app.

16
00:01:23.415 --> 00:01:26.403
&gt;&gt; Mike North: [SOUND] Interesting,
lots of different versions here.

17
00:01:26.403 --> 00:01:31.820
So I believe it's this one here,
66, right, down from 80.

18
00:01:31.820 --> 00:01:37.808
And when we look at the Lighthouse score,
run serve http2.

19
00:01:39.594 --> 00:01:43.844
&gt;&gt; Mike North: Hopefully it has
improved substantially since our

20
00:01:43.844 --> 00:01:46.619
initial starting point of 34.

21
00:01:48.593 --> 00:01:52.040
&gt;&gt; Mike North: Wants to show
notifications, go nuts.

22
00:01:52.040 --> 00:01:55.830
Sure, I'm just gonna
refresh again just o make

23
00:01:55.830 --> 00:01:59.460
sure that our API has cached
everything that it needs to cache.

24
00:02:00.590 --> 00:02:02.334
And let's run it and see where we're at.

25
00:02:11.998 --> 00:02:15.650
&gt;&gt; Mike North: I'll run it twice,
we'll take the best of the two scores.

26
00:02:15.650 --> 00:02:17.875
[LAUGH] There's some noisy
stuff that can happen in there.

27
00:02:22.679 --> 00:02:26.712
&gt;&gt; Mike North: So it's receiving a stack
trace, which let's it know when certain

28
00:02:26.712 --> 00:02:31.330
events happened, making sure that
it works with the service worker.

29
00:02:31.330 --> 00:02:32.950
All right, so
we're at Progressive Web App 100.

30
00:02:32.950 --> 00:02:37.946
I think we can do better with performance
if we run it just one more time.

31
00:02:45.451 --> 00:02:48.872
&gt;&gt; Mike North: And it may be that our
images are coming in a little bit later,

32
00:02:48.872 --> 00:02:54.330
and that's causing it to keep the timer
running when we're beginning to paint.

33
00:02:54.330 --> 00:03:00.480
So the Lighthouse score is information,

34
00:03:00.480 --> 00:03:03.946
it's not a grade on your product.

35
00:03:03.946 --> 00:03:05.350
So we're gonna look at the film strip and

36
00:03:05.350 --> 00:03:07.430
see when things actually
started looking good.

37
00:03:07.430 --> 00:03:08.190
Hey, look at that.

38
00:03:09.480 --> 00:03:12.503
Turns out it was a little bit
better the second time around.

39
00:03:12.503 --> 00:03:14.670
87 performance, 100% progressive web app.

40
00:03:14.670 --> 00:03:16.300
We haven't done any
server-side rendering here,

41
00:03:16.300 --> 00:03:20.130
which would make that
performance number shoot up.

42
00:03:20.130 --> 00:03:24.149
Just if we look here,
it's saying 2.9 seconds,

43
00:03:24.149 --> 00:03:28.370
that's when we start to see all
the of data start coming in.

44
00:03:28.370 --> 00:03:30.820
That's cuz we're running a tiny
little node server here.

45
00:03:30.820 --> 00:03:34.092
Now, if that came in with the HTML
it would be down here at 1.4.

46
00:03:35.370 --> 00:03:39.410
Right, that would be way, way,
way faster, we'd be at 100 at that point.

47
00:03:39.410 --> 00:03:42.530
So this is a dramatic improvement and

48
00:03:42.530 --> 00:03:46.250
more closely resembles a native app
than a web application at this point.

49
00:03:46.250 --> 00:03:49.213
&gt;&gt; Steve Kinney: As Mike alluded to,
generally speaking,

50
00:03:49.213 --> 00:03:52.600
the number that matters is production,
right?

51
00:03:52.600 --> 00:03:56.717
The server you're serving it from when
you're running on your local machine,

52
00:03:56.717 --> 00:03:58.880
it's not production hardware, right?

53
00:03:58.880 --> 00:04:00.795
So keeping that in mind,

54
00:04:00.795 --> 00:04:05.553
that what your users experience
is what matters the most too.

55
00:04:05.553 --> 00:04:08.907
So that might be higher if it
was running on real servers and

56
00:04:08.907 --> 00:04:10.846
stuff along those lines as well.

57
00:04:10.846 --> 00:04:15.247
&gt;&gt; Mike North: Absolutely, all right,
thanks for attending the course, and

58
00:04:15.247 --> 00:04:20.380
I hope you can put some of those new
stuff into your apps as soon as possible,

59
00:04:20.380 --> 00:04:21.374
don't wait.

60
00:04:24.472 --> 00:04:28.346
&gt;&gt; Class: [APPLAUSE]
&gt;&gt; Mike North: [LAUGH]

