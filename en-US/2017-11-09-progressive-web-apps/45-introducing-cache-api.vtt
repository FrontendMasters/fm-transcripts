WEBVTT

1
00:00:00.360 --> 00:00:01.670
&gt;&gt; Steve Kinney: Talking
a little about cache, right?

2
00:00:01.670 --> 00:00:05.780
Cuz like, we don't have an offline app
yet, we are simply taking your request and

3
00:00:05.780 --> 00:00:07.560
giving back another request.

4
00:00:07.560 --> 00:00:12.489
That does not get us the progressive
web app stamp of approval, right?

5
00:00:12.489 --> 00:00:15.964
It doesn't work offline, we're just
sending pictures of oasis like giant

6
00:00:15.964 --> 00:00:19.030
trolls every time they ask for
a picture of The Beatles.

7
00:00:19.030 --> 00:00:24.670
Very cool, but not particularly useful for
building offline applications.

8
00:00:24.670 --> 00:00:31.130
The Cache API, again, follows this
same extensible web manifesto logic.

9
00:00:31.130 --> 00:00:33.425
We know that there is a cache.

10
00:00:33.425 --> 00:00:35.005
There's an HTTP cache, right?

11
00:00:35.005 --> 00:00:37.495
We saw that when we started looking
at service workers earlier.

12
00:00:37.495 --> 00:00:40.865
You can set max age of a year and
maybe the browser keeps it for

13
00:00:40.865 --> 00:00:42.945
a year, maybe it doesn't, right?

14
00:00:42.945 --> 00:00:44.975
You can say,
I would like these things to happen, but

15
00:00:44.975 --> 00:00:46.865
you don't have fine-grain control.

16
00:00:46.865 --> 00:00:52.630
You don't have programmatic access to make
decisions with the normal HTTP cache.

17
00:00:52.630 --> 00:00:57.770
The cache API gives us, again, in the same
way service worker gives us fine-grain

18
00:00:57.770 --> 00:01:02.460
control and programmatic JavaScript
access to intercepting network requests.

19
00:01:02.460 --> 00:01:05.639
The cache API gives us
fine-grain control and

20
00:01:05.639 --> 00:01:11.518
JavaScript access in the full JavaScript
programming language for managing cache.

21
00:01:11.518 --> 00:01:13.009
All right, so what does this look like?

22
00:01:15.140 --> 00:01:20.880
We have caches, which is globally
available, and you can open the caches and

23
00:01:20.880 --> 00:01:24.850
again, everything in a worker is
effectively asynchronous, right?

24
00:01:24.850 --> 00:01:28.350
So that time we spent
talking about promises

25
00:01:28.350 --> 00:01:32.910
is paying off in dividends right now
because most of these modern APIs,

26
00:01:32.910 --> 00:01:38.370
with one exception that we'll talk
about later, use a promise-based API.

27
00:01:38.370 --> 00:01:39.900
So we say caches open,

28
00:01:39.900 --> 00:01:44.390
we say what cache would you like to open,
this is an arbitrary string, right?

29
00:01:44.390 --> 00:01:49.030
In this case I've called it assets-v1,
you can call it sandwich.

30
00:01:49.030 --> 00:01:52.400
It doesn't matter,
it is simply a unique identifier for

31
00:01:52.400 --> 00:01:55.100
the set of caches that
you would like to open.

32
00:01:55.100 --> 00:01:57.020
Or they're giving cache that
you would like to open.

33
00:01:57.020 --> 00:02:01.110
When that happens, you return
a promise which is the cache, right?

34
00:02:01.110 --> 00:02:05.510
This would be the sandwich cache or
the assets-v1 cache in this case.

35
00:02:08.150 --> 00:02:11.320
You can tell your cache a bunch of
things that you would like it to hold on

36
00:02:11.320 --> 00:02:12.690
to, all right?

37
00:02:12.690 --> 00:02:15.480
Again, this is not like hoping that
the HTTP header was all right and

38
00:02:15.480 --> 00:02:16.840
the browser does the right thing.

39
00:02:16.840 --> 00:02:18.550
You are in control.

40
00:02:18.550 --> 00:02:23.100
So when a service worker installs,
we'll use this event waitUntil that we'll

41
00:02:23.100 --> 00:02:27.930
talk about in a second, and we'll open the
caches, we'll take the given caches again,

42
00:02:27.930 --> 00:02:32.378
this is assets-v1, and
we'll add three files to the cache.

43
00:02:32.378 --> 00:02:37.210
Index.html, style.css,
client.js in this case.

44
00:02:37.210 --> 00:02:42.067
These are just arbitrary files for a very
simple application and they will now,

45
00:02:42.067 --> 00:02:44.907
we know that they have
been added to the cache.

46
00:02:44.907 --> 00:02:49.708
If any of them have not been added to
the cache, this promise will fail, right?

47
00:02:49.708 --> 00:02:52.827
So it's not just like hope they were
added, hope everything worked out.

48
00:02:52.827 --> 00:02:57.410
It's like no, no, no, this promise will
reject if something didn't work out.

49
00:02:57.410 --> 00:02:58.900
We will know if something didn't work out.

50
00:02:58.900 --> 00:03:02.619
We can write a fallback if
something didn't work out.

51
00:03:02.619 --> 00:03:06.666
And we put there three strings, but
it's a lot like Fetch insofar that these

52
00:03:06.666 --> 00:03:09.460
strings are effectively request objects,
right?

53
00:03:09.460 --> 00:03:12.399
And we can add all, we'll take a look at
some of the other methods in a second.

54
00:03:13.760 --> 00:03:20.380
One strategy that you'll see sometimes is
this cache.add that's separate, right?

55
00:03:20.380 --> 00:03:25.800
The promise will only resolve or
reject if everything in that return

56
00:03:25.800 --> 00:03:29.438
resolves, or any of them reject,
all of them reject.

57
00:03:29.438 --> 00:03:34.680
If there's non-critical things, you can
also do it outside of the return promise.

58
00:03:34.680 --> 00:03:37.330
An example,
like why would you ever wanna use this.

59
00:03:37.330 --> 00:03:41.840
Let's say, you're making a game and
you might say like listen.

60
00:03:41.840 --> 00:03:46.810
We're not starting, like let's assume
that this thing did not install if we did

61
00:03:46.810 --> 00:03:49.235
not cache levels like 1 through 20.

62
00:03:49.235 --> 00:03:53.869
We can also try to cache like 23 through
40 as well but we don't necessarily,

63
00:03:53.869 --> 00:03:55.750
they're not critical.

64
00:03:55.750 --> 00:03:57.350
If you can cache them, great.

65
00:03:57.350 --> 00:04:01.140
If the service worker that's
lifetime times out, fine.

66
00:04:01.140 --> 00:04:02.530
If you can get them, cool.

67
00:04:02.530 --> 00:04:04.530
But anything in that return value,

68
00:04:04.530 --> 00:04:08.960
if it doesn't work out, the service
worker will not have installed.

69
00:04:11.030 --> 00:04:13.102
So yeah, this is like non-critical css,

70
00:04:13.102 --> 00:04:15.250
non-critical like things
that you could lazy load.

71
00:04:15.250 --> 00:04:17.990
If you get it now great,
otherwise use it later.

72
00:04:17.990 --> 00:04:19.056
So that waitUntil.

73
00:04:21.186 --> 00:04:26.021
&gt;&gt; Steve Kinney: If you've ever written
a asynchronous JavaScript test, you know

74
00:04:26.021 --> 00:04:31.980
that, in Mocha, you might have to say
done and then pass it in as an argument.

75
00:04:31.980 --> 00:04:36.032
And with that way the test doesn't
like complete because the asynchronous

76
00:04:36.032 --> 00:04:39.580
stuff hasn't come back yet,
event.waitUntil takes a promise and

77
00:04:39.580 --> 00:04:45.550
it will keep this service, this install
process alive until that promise resolves.

78
00:04:45.550 --> 00:04:50.070
Again, if the promise resolves in a happy
place, the service workers installed.

79
00:04:50.070 --> 00:04:54.000
If the promise rejects, we've assumed
that this service worker is bunk and

80
00:04:54.000 --> 00:04:56.280
we don't actually install it at all.

81
00:04:56.280 --> 00:04:58.970
So it gives you, one, the ability
to make sure like I'm doing some of

82
00:04:58.970 --> 00:05:01.010
the asynchronous things, give me time.

83
00:05:02.090 --> 00:05:05.117
And two, if things go wrong,
don't actually install me.

84
00:05:05.117 --> 00:05:07.370
I don't know what I'm doing.

85
00:05:07.370 --> 00:05:10.330
Let's wait until I configure this out.

86
00:05:10.330 --> 00:05:14.860
So we use it a lot for anything that
we want to, one, insure success or

87
00:05:14.860 --> 00:05:19.800
know about failure and b,
keep this process alive until it is done.

88
00:05:21.790 --> 00:05:29.670
So, I hinted this before, the Cache API
is effectively a key values storage.

89
00:05:30.750 --> 00:05:34.197
The keys are requests,
the values are responses.

90
00:05:36.130 --> 00:05:38.849
&gt;&gt; Steve Kinney: Which means that if
you say hey, I have this request,

91
00:05:38.849 --> 00:05:42.060
it's like yes, I already know
about these kinds of requests.

92
00:05:42.060 --> 00:05:45.030
I have one of them, here is this
response that I would like to give.

93
00:05:45.030 --> 00:05:47.570
Here's a response that I know about.

94
00:05:47.570 --> 00:05:51.920
And this plays really nicely
with the Fetch API, right?

95
00:05:51.920 --> 00:05:55.040
Which means the Fetch API has a request,
right?

96
00:05:55.040 --> 00:05:59.130
It got a request as part of the Fetch,
and so you can talk to the cache API.

97
00:05:59.130 --> 00:06:03.340
Listen, I got this request through Fetch,
do you know anything about this?

98
00:06:03.340 --> 00:06:07.652
Do you have anything stored for this, and
the Cache can go, those kind of requests,

99
00:06:07.652 --> 00:06:09.491
yeah, I know about those, right?

100
00:06:09.491 --> 00:06:14.370
Or it can be, I've never seen that
before in my life, so, sorry.

101
00:06:15.530 --> 00:06:16.520
Generally speaking,

102
00:06:16.520 --> 00:06:20.220
the only kinda things that we can
really cache are GET requests, right.

103
00:06:20.220 --> 00:06:22.800
You can't cache what happens
if a user sends data.

104
00:06:22.800 --> 00:06:25.380
So generally speaking,
these are GET requests.

105
00:06:25.380 --> 00:06:27.560
But thinking about it,
we'll see a lot of stuff in strings.

106
00:06:27.560 --> 00:06:30.090
If you see a string being
handed to the Cache,

107
00:06:30.090 --> 00:06:31.840
it's doing the same thing Fetch does.

108
00:06:31.840 --> 00:06:34.650
The kind of primitive under
the hood is this request object,

109
00:06:34.650 --> 00:06:37.440
and that's kind of like how
it all strings together.

110
00:06:37.440 --> 00:06:40.610
So we have a bunch of methods for
manipulating the cache.

111
00:06:42.190 --> 00:06:43.050
Cool.

112
00:06:43.050 --> 00:06:47.370
So we'll open this band-assets,
keep on our Beatles Oasis theme.

113
00:06:47.370 --> 00:06:50.690
And effectively the most,
the simplest one for

114
00:06:50.690 --> 00:06:54.480
putting something in the cache is this
very well-named method called put.

115
00:06:54.480 --> 00:06:57.190
And put takes two arguments.

116
00:06:57.190 --> 00:07:01.230
It will take a request and a response.

117
00:07:01.230 --> 00:07:05.940
And if it sees that request again it
will give you that response, right?

118
00:07:05.940 --> 00:07:10.550
Now, this is a perfect world where
I happen to have a response object

119
00:07:10.550 --> 00:07:14.160
just sitting around in my JavaScript
code that I could pass in.

120
00:07:14.160 --> 00:07:18.070
Likely, you don't have that yet, right?

121
00:07:18.070 --> 00:07:20.599
How do we normally grab
a hands on responses?

122
00:07:21.740 --> 00:07:22.580
Fetch, right?

123
00:07:22.580 --> 00:07:26.196
So normally it's like I
will Fetch something and

124
00:07:26.196 --> 00:07:29.558
I will get the response
back from the server.

125
00:07:29.558 --> 00:07:33.780
Basically, you get a Fetch and
then pass it in.

126
00:07:33.780 --> 00:07:35.170
There's a little helper called add.

127
00:07:37.550 --> 00:07:39.290
Add will just take a request.

128
00:07:40.390 --> 00:07:43.700
And it is effectively
the same as doing this.

129
00:07:43.700 --> 00:07:47.270
It's effectively the same of taking
the request, fetching the request,

130
00:07:47.270 --> 00:07:50.650
storing the response, and then putting
the request and the response then.

131
00:07:50.650 --> 00:07:54.010
So add takes one argument, but effectively
what it does, it goes ahead and

132
00:07:54.010 --> 00:07:57.360
then fetches it and
stores that response in there, right?

133
00:07:57.360 --> 00:07:59.430
So our cache is request and

134
00:07:59.430 --> 00:08:02.650
the associated responses at the time
that it was put into the cache.

135
00:08:04.230 --> 00:08:06.711
&gt;&gt; Speaker 2: Cache
match versus cache put?

136
00:08:06.711 --> 00:08:10.738
&gt;&gt; Steve Kinney: Cache match
will say are you in the cache?

137
00:08:10.738 --> 00:08:12.163
That's kind of like getting
something out of the cache.

138
00:08:12.163 --> 00:08:16.180
Cache add will take a request,
fetch the response,

139
00:08:16.180 --> 00:08:19.110
and put the request response pair in.

140
00:08:20.250 --> 00:08:25.417
Cache, yeah,
that should be put, thank you.

141
00:08:25.417 --> 00:08:27.979
[LAUGH] Minor tab, yeah,
that last line should be a put in there,

142
00:08:27.979 --> 00:08:28.840
instead of a match.

143
00:08:28.840 --> 00:08:33.420
A match, spoiler alert, will check to
see if something is in the cache, and

144
00:08:33.420 --> 00:08:34.710
then return you that response.

145
00:08:36.500 --> 00:08:42.100
So working with the cache,
there are two times that we might

146
00:08:42.100 --> 00:08:43.870
set up the cache in this case.

147
00:08:43.870 --> 00:08:45.550
We've talked about adding
stuff into the cache but

148
00:08:45.550 --> 00:08:46.970
we haven't really talked
about getting stuff out yet.

149
00:08:46.970 --> 00:08:49.600
The getting stuff out mostly
happens at fetches, right?

150
00:08:49.600 --> 00:08:51.820
Like, hey they asked for something.

151
00:08:51.820 --> 00:08:54.040
That is most likely when you
pull something out of the cache.

152
00:08:54.040 --> 00:08:54.840
But setting up the cache,

153
00:08:54.840 --> 00:08:58.180
we have two major times that
we might set up the cache.

154
00:08:58.180 --> 00:08:59.606
One, uninstall.

155
00:08:59.606 --> 00:09:03.448
So its new service worker is emerging and

156
00:09:03.448 --> 00:09:08.420
it basically is like okay,
I know that I need to cache

157
00:09:08.420 --> 00:09:13.640
the index.html,
the style.css, the script.js.

158
00:09:13.640 --> 00:09:17.280
I need to collect all these things
as part of me being a service worker

159
00:09:17.280 --> 00:09:20.820
is I have all these things, so
we set up all the things that

160
00:09:20.820 --> 00:09:24.030
this service worker needs to have in
cache in order to be able to do its job.

161
00:09:25.430 --> 00:09:28.990
What do you not want to do in
the install process is touch

162
00:09:28.990 --> 00:09:32.890
anything that the existing
service worker is using, right?

163
00:09:32.890 --> 00:09:38.029
This should be setting up what you need,
but not touching what anyone else needs.

164
00:09:39.270 --> 00:09:42.910
Activate, which means I am now
the service worker, right?

165
00:09:42.910 --> 00:09:46.703
Which means I no longer have
to care about anyone else,

166
00:09:46.703 --> 00:09:51.484
I am the service worker, which is
a great time to remove any cache that

167
00:09:51.484 --> 00:09:56.118
the current service worker doesn't
need that maybe old ones did.

168
00:09:56.118 --> 00:09:59.040
And this is where those cache
names become really important.

169
00:10:00.160 --> 00:10:03.672
Because this service
worker could be assets-v1.

170
00:10:03.672 --> 00:10:10.140
It sets everything up, it takes the stage,
a new service worker emerges.

171
00:10:10.140 --> 00:10:13.040
Maybe its cache name is asset-v2.

172
00:10:13.040 --> 00:10:14.570
It can set up the asset-v2 cache.

173
00:10:14.570 --> 00:10:16.660
And then what should it do
when it takes the stage?

174
00:10:17.880 --> 00:10:19.450
Remove then the assets-v1.

175
00:10:19.450 --> 00:10:21.025
What you don't wanna do is on install,

176
00:10:21.025 --> 00:10:24.700
let's get rid of the one that
the current service worker is using, no.

177
00:10:24.700 --> 00:10:25.810
The strings,

178
00:10:25.810 --> 00:10:30.050
those arbitrary strings, give us the
ability to name space the cache, right.

179
00:10:30.050 --> 00:10:33.900
So we can have this service worker's cache
versus another service worker's cache.

180
00:10:35.980 --> 00:10:38.210
So let's look at this with some code.

181
00:10:40.080 --> 00:10:43.810
Here we have a constant called
currentCache, again assets-v1,

182
00:10:43.810 --> 00:10:45.210
this is a string.

183
00:10:45.210 --> 00:10:49.656
A more advanced thing you could do is
if you had some build tools you could

184
00:10:49.656 --> 00:10:54.844
theoretically go if the service worker has
changed, let's update this to the hash

185
00:10:54.844 --> 00:10:59.909
that we saw in the file names to the build
process or something along those lines.

186
00:10:59.909 --> 00:11:01.877
And you'd do it dynamically.

187
00:11:01.877 --> 00:11:05.889
Or in a very simple application,
you can manually increment this.

188
00:11:05.889 --> 00:11:10.986
We'll say, okay, we're gonna install,

189
00:11:10.986 --> 00:11:18.437
wait, open the current cache,
add these three files in there.

190
00:11:18.437 --> 00:11:20.760
And this will set up
the initial service worker.

191
00:11:20.760 --> 00:11:24.790
Let's say we have a second one come and
it's now taking the stage.

192
00:11:24.790 --> 00:11:27.410
Its current cache is assets-v2.

193
00:11:27.410 --> 00:11:29.990
Again, like this is you might have
manually updated because you know it's

194
00:11:29.990 --> 00:11:32.380
doing different stuff with the caches.

195
00:11:32.380 --> 00:11:35.245
Basically, the easiest way to do it is

196
00:11:35.245 --> 00:11:39.920
caches.keys will give you
all of those strings.

197
00:11:39.920 --> 00:11:42.609
So in this case, assets-v1, assets-v2.

198
00:11:42.609 --> 00:11:45.920
It'll give you all of
the name spaces in there.

199
00:11:45.920 --> 00:11:48.510
And you can simply go
through all of them and

200
00:11:48.510 --> 00:11:53.650
say, I am now the service worker,
I use assets-v2.

201
00:11:53.650 --> 00:11:57.189
Anything that's in there, we can filter
through all of the other cache keys.

202
00:11:58.290 --> 00:12:02.320
If you're not the current one, I'm gonna
clean you up and get rid of you, right?

203
00:12:02.320 --> 00:12:03.400
So we go through all of them,

204
00:12:03.400 --> 00:12:08.950
we say if the name of that cache is not
the name of the current cache, cool.

205
00:12:08.950 --> 00:12:13.070
Make an array of all of those, go through
those and delete each one of those, so

206
00:12:13.070 --> 00:12:14.590
now you've cleaned up after yourself.

207
00:12:14.590 --> 00:12:17.840
Otherwise, you start taking up more and
more memory.

208
00:12:17.840 --> 00:12:21.004
How much memory you're
allotted in cache and

209
00:12:21.004 --> 00:12:25.342
index DB and all those things
varies from browser to browser.

210
00:12:25.342 --> 00:12:30.500
And even within browsers, varies
a little bit depending on disk space.

211
00:12:30.500 --> 00:12:34.516
So this number I can always change,
it's not actually in the spec.

212
00:12:34.516 --> 00:12:38.913
At this moment,
Chrome gives you per origin,

213
00:12:38.913 --> 00:12:43.020
6% of available storage space.

214
00:12:43.020 --> 00:12:47.280
You don't know what's 6% is,
[LAUGH] right, if it is like

215
00:12:47.280 --> 00:12:52.650
a older budget-priced phone,
probably not a lot.

216
00:12:52.650 --> 00:12:57.526
If it is a like, top of the line
phone you might have a whole lot,

217
00:12:57.526 --> 00:13:00.110
you don't really know, right?

218
00:13:00.110 --> 00:13:03.920
So you do need to be
judicious as you store stuff.

219
00:13:03.920 --> 00:13:09.480
Because if you start blowing your budget,
the browser will take care of this for

220
00:13:09.480 --> 00:13:12.625
you and
it will basically wipe you out completely.

221
00:13:13.725 --> 00:13:16.615
So you want to be 6%,
Jen always figures a lot.

222
00:13:16.615 --> 00:13:18.184
I think Firefox is 10%.

223
00:13:18.184 --> 00:13:21.631
Some other browsers might be a certain
number of megabytes, it varies and

224
00:13:21.631 --> 00:13:24.155
it could change cuz it's not in the spec.

225
00:13:24.155 --> 00:13:28.900
So generally speaking, as much as you need
and as little as you can get away with.

226
00:13:28.900 --> 00:13:31.080
&gt;&gt; Speaker 3: So if you go over
the browser sort of pick and

227
00:13:31.080 --> 00:13:33.320
choose what it drops
as you add new things?

228
00:13:33.320 --> 00:13:34.130
&gt;&gt; Steve Kinney: It will wipe you out.

229
00:13:34.130 --> 00:13:37.718
&gt;&gt; Speaker 3: It will go away, yep,
so you want to in a lot of cases

230
00:13:37.718 --> 00:13:42.403
that is still like a lot of stuff
that you would be caching, right?

231
00:13:42.403 --> 00:13:46.084
But yeah something to keep in mind.

232
00:13:46.084 --> 00:13:50.185
The really cool thing about the Cache API
is we've looked in the context of

233
00:13:50.185 --> 00:13:53.181
a service worker,
because that's our focus today.

234
00:13:53.181 --> 00:13:58.124
But you can also access the Cache API
from the browser as well,

235
00:13:58.124 --> 00:14:00.520
from the client-side code.

236
00:14:00.520 --> 00:14:03.436
And it's really interesting, so
you could implement stuff like save for

237
00:14:03.436 --> 00:14:05.130
offline where you have a link.

238
00:14:05.130 --> 00:14:09.390
Yeah, totally go fetch that, and
let's store it in the cache, right.

239
00:14:09.390 --> 00:14:13.350
So you can programmatically access
it from the main thread as well,

240
00:14:13.350 --> 00:14:14.310
which is really kinda cool.

