WEBVTT

1
00:00:00.400 --> 00:00:02.010
&gt;&gt; Mike North: Here is the exercise.

2
00:00:02.010 --> 00:00:06.810
So the story here is we've got our grocery
store, they have their standard inventory,

3
00:00:06.810 --> 00:00:10.620
but sometimes we get fresh stuff
that's coming out in front.

4
00:00:10.620 --> 00:00:17.530
And they might have little QR codes
that you can scan to maybe just pay for

5
00:00:17.530 --> 00:00:20.580
it with your account and
it will be delivered to your house later.

6
00:00:20.580 --> 00:00:23.690
But the idea is we wanna
use sensors on this device,

7
00:00:23.690 --> 00:00:27.190
in this case the camera,
to accomplish this.

8
00:00:27.190 --> 00:00:30.940
And this QR code reader,
the little button in the menu bar,

9
00:00:30.940 --> 00:00:34.990
it actually works right now, but
it works on the main thread.

10
00:00:34.990 --> 00:00:38.160
So you've got a file called banana,

11
00:00:38.160 --> 00:00:41.950
and depending on when you checked
it out it might be misspelled.

12
00:00:41.950 --> 00:00:49.542
But banana.png, it is a deliberately
large file with a rotated QR code.

13
00:00:49.542 --> 00:00:53.810
You should be able to click
on the QR code reader, and

14
00:00:53.810 --> 00:00:59.340
the way that mobile devices handle
a file input is they ask the mobile

15
00:00:59.340 --> 00:01:06.080
device to provide a picture in response,
like a regular HTML file input.

16
00:01:06.080 --> 00:01:09.820
You can provide a picture, and
we're going to, on the client,

17
00:01:09.820 --> 00:01:14.510
process this picture and add that item
to the cart that matches that QR code.

18
00:01:14.510 --> 00:01:18.950
So you should end up with a banana in
your cart after processing this image.

19
00:01:20.270 --> 00:01:23.660
But it is really really heavy work.

20
00:01:23.660 --> 00:01:26.830
So here I profiled it this morning.

21
00:01:26.830 --> 00:01:30.333
Does anyone remember what the budget for
our functions was that I talked about in

22
00:01:30.333 --> 00:01:32.550
terms of things that [CROSSTALK]
&gt;&gt; Speaker 2: 15 milliseconds.

23
00:01:32.550 --> 00:01:35.983
&gt;&gt; Mike North: All right, so
we're at 20,829 milliseconds,

24
00:01:35.983 --> 00:01:38.080
slightly over our frame budget.

25
00:01:39.510 --> 00:01:42.000
We're gonna wanna move this
off of the main thread.

26
00:01:42.000 --> 00:01:48.140
And if you tried this now with
the banana image, you'll see that

27
00:01:48.140 --> 00:01:53.500
if you try to scroll while that processing
is taking place, it's really stuttery.

28
00:01:53.500 --> 00:01:58.130
Like your browser's starting to freak out,
and it's not a good experience for

29
00:01:58.130 --> 00:01:58.830
your user.

30
00:01:59.960 --> 00:02:02.060
And there's really no
way to break this up,

31
00:02:02.060 --> 00:02:05.040
it is a single function
that takes 20 milliseconds.

32
00:02:05.040 --> 00:02:10.070
This is an awesome candidate for
doing in the background in parallel.

33
00:02:10.070 --> 00:02:14.960
Let the main thread relax,
let the user maybe go on to

34
00:02:14.960 --> 00:02:19.100
finding their next item to scan or
something like that.

35
00:02:19.100 --> 00:02:25.770
So here are some tips that you may
need in order to make this work.

36
00:02:25.770 --> 00:02:29.780
So we're gonna have to add a new file.

37
00:02:29.780 --> 00:02:33.560
You already added a web app manifest file,
so we're gonna follow that same pattern.

38
00:02:34.610 --> 00:02:38.520
This is not correct, I'm gonna
correct it right now really quickly.

39
00:02:38.520 --> 00:02:42.990
So we have to add that name attribute
as we learned, this is important,

40
00:02:42.990 --> 00:02:46.850
otherwise the name of the file
will be the hash of that file.

41
00:02:46.850 --> 00:02:50.120
We don't want that because we want to
be able to pass that file to our worker

42
00:02:50.120 --> 00:02:51.770
constructor.

43
00:02:51.770 --> 00:02:53.850
That needs to be really predictable,
what that is.

44
00:02:55.120 --> 00:03:00.834
And almost all the work you're gonna do
is going to be in this JavaScript file,

45
00:03:00.834 --> 00:03:03.180
it's client/util/qrcode.

46
00:03:03.180 --> 00:03:08.330
Right now there's a comment wrapping
the synchronous implementation of that.

47
00:03:08.330 --> 00:03:11.611
You really shouldn't have to
go outside of that area, but

48
00:03:11.611 --> 00:03:16.040
we're gonna basically
take that heavy work and

49
00:03:16.040 --> 00:03:21.010
do it in such a way where we
instead spin up a worker.

50
00:03:21.010 --> 00:03:26.770
And then use that message passing
that I showed you an example of,

51
00:03:26.770 --> 00:03:31.260
where we post message and the worker
will catch it in the on message.

52
00:03:31.260 --> 00:03:35.840
So the worker will end up doing the heavy
work, and then it'll send the result,

53
00:03:35.840 --> 00:03:40.610
which is just the string,
the QR code data, back to the host app.

54
00:03:42.030 --> 00:03:46.130
And I do want you to
do a production build,

55
00:03:46.130 --> 00:03:49.920
a minified build, before you
make this improvement and after.

56
00:03:49.920 --> 00:03:55.390
Because one of the advantages we're gonna
get is that we now we'll have removed

57
00:03:55.390 --> 00:04:01.130
the need to have this QR code library
as part of that core app.js file.

58
00:04:01.130 --> 00:04:05.130
Webpack is gonna wrap this
all up in the worker itself.

59
00:04:05.130 --> 00:04:10.010
And so our app size should drop from
about 80 kilobytes to 60 kilobytes,

60
00:04:10.010 --> 00:04:13.470
further improving our load time and
parse time metrics.

61
00:04:14.900 --> 00:04:19.530
So this is what you're gonna hopefully
end up with once we get done with this.

62
00:04:19.530 --> 00:04:23.930
Whereas before, let me skip back,
we had this big, solid,

63
00:04:23.930 --> 00:04:30.140
yellow thing where it's just taking 20
seconds to do this on the main thread.

64
00:04:30.140 --> 00:04:34.149
If you can see it here it's sort
of hashed out the yellow now and

65
00:04:34.149 --> 00:04:36.939
that represents that a worker is doing it.

66
00:04:36.939 --> 00:04:41.223
And below, in this middle section here,
you can see main with the green and

67
00:04:41.223 --> 00:04:41.860
yellow.

68
00:04:41.860 --> 00:04:44.976
That sort of does the initial
work of reading the file,

69
00:04:44.976 --> 00:04:49.653
creates something called an image buffer
that you don't need to worry about, and

70
00:04:49.653 --> 00:04:52.252
then passes that off to the worker or
thread.

71
00:04:52.252 --> 00:04:55.802
And all of that purple there,
that's all of that hard work being done in

72
00:04:55.802 --> 00:04:59.904
the background without interfering with
the main thread's responsibilities.

