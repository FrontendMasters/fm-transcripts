WEBVTT

1
00:00:00.038 --> 00:00:04.273
&gt;&gt; Mike North: So in thinking about
where we've come since the beginning,

2
00:00:04.273 --> 00:00:07.021
let's look back at this diagram here.

3
00:00:07.021 --> 00:00:09.749
So you remember we started
at client side rendering.

4
00:00:09.749 --> 00:00:12.889
We did enhanced client side rendering,
server side rendering,

5
00:00:12.889 --> 00:00:15.068
we started doing
progressive web app stuff.

6
00:00:15.068 --> 00:00:16.642
Here's where we are now.

7
00:00:16.642 --> 00:00:20.657
So when we first visit our app,

8
00:00:20.657 --> 00:00:25.599
the Service Worker is not active yet,

9
00:00:25.599 --> 00:00:28.696
so we would hit our CDN.

10
00:00:28.696 --> 00:00:35.112
This is our first visit and
according to app shell architecture here,

11
00:00:35.112 --> 00:00:41.648
even if we get index.html and
our shell HTML is a little bit different.

12
00:00:41.648 --> 00:00:45.522
We can, of course, make that something
that's done in the activate hook, right?

13
00:00:45.522 --> 00:00:48.698
Just another task that a service
worker does on its way to, or

14
00:00:48.698 --> 00:00:50.771
it would be the install hook, I guess.

15
00:00:50.771 --> 00:00:54.337
But it can send a request, and
we can store that in the cache and

16
00:00:54.337 --> 00:00:56.816
make it available for subsequent visits.

17
00:00:56.816 --> 00:01:01.485
Additionally we've had some experience
also in a ServiceWorker taking

18
00:01:01.485 --> 00:01:04.862
records from an API and
populating an XDB database.

19
00:01:04.862 --> 00:01:08.669
And that allows us to hold a huge amount
of data in a way that's structured and

20
00:01:08.669 --> 00:01:09.928
we can query against it.

21
00:01:09.928 --> 00:01:15.430
It's not just JSON responses where we
have to get the query params just right.

22
00:01:15.430 --> 00:01:18.721
We have to get all of
the path params just so

23
00:01:18.721 --> 00:01:22.211
in order to repeat that
exact same request.

24
00:01:22.211 --> 00:01:26.312
Here we can query against it, we can
generate new collections of data that

25
00:01:26.312 --> 00:01:29.300
we never asked an API for,
that's a huge advantage.

26
00:01:29.300 --> 00:01:34.301
So for return visits, we're going to hit
the Service Worker to get index.html,

27
00:01:34.301 --> 00:01:36.122
or shell.html in this case.

28
00:01:36.122 --> 00:01:40.660
It could purely be a construct that
the Service Worker takes care of,

29
00:01:40.660 --> 00:01:44.504
it's going to also get
the JavaScript in the CSS, right?

30
00:01:44.504 --> 00:01:48.869
Takes almost no time, remember, we reduced
our time to less than 10% as soon as we

31
00:01:48.869 --> 00:01:51.274
started pre-caching in our service worker.

32
00:01:51.274 --> 00:01:56.717
It went from, for JavaScript,
320 milliseconds to 23,

33
00:01:56.717 --> 00:02:01.041
and then at this point
we've got our first paint.

34
00:02:01.041 --> 00:02:03.880
We are interactive because
we've got JavaScript,

35
00:02:03.880 --> 00:02:06.598
the JavaScript still has to be parsed and
booted.

36
00:02:06.598 --> 00:02:09.755
And this is why we want a lazy load,
right?

37
00:02:09.755 --> 00:02:13.455
We don't want to pay the cost
of parsing and booting for

38
00:02:13.455 --> 00:02:15.874
more than we need at any given time.

39
00:02:15.874 --> 00:02:19.811
And then in the background, we can go and
fetch records from Index DB,

40
00:02:19.811 --> 00:02:22.572
and it's just a promise
that returns some data.

41
00:02:22.572 --> 00:02:25.957
Very similar to the way that Fetch works,
or Ajax,

42
00:02:25.957 --> 00:02:28.730
if you are still thinking in those terms.

43
00:02:28.730 --> 00:02:33.264
Here's the big takeaway, besides the fact
that we've hit all of these metrics.

44
00:02:33.264 --> 00:02:37.740
And those bars used to go all the way from
the left side of the screen to the right.

45
00:02:37.740 --> 00:02:39.511
If we draw this line here,

46
00:02:39.511 --> 00:02:44.035
we can see that we haven't actually
crossed from local to remote.

47
00:02:44.035 --> 00:02:47.972
So while we started, basically
crossing this line over and over for

48
00:02:47.972 --> 00:02:49.918
absolutely everything we need.

49
00:02:49.918 --> 00:02:55.375
Now, our app boots and starts showing
data regardless of network connection.

50
00:02:55.375 --> 00:03:01.466
We're showing stuff even
if we're on wifi or

51
00:03:01.466 --> 00:03:05.323
if we're on airplane mode.

52
00:03:05.323 --> 00:03:08.540
And then once we get online with
a background sync, we can hit our API.

