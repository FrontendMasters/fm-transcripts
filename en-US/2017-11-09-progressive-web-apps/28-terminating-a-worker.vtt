WEBVTT

1
00:00:00.350 --> 00:00:02.550
&gt;&gt; Mike North: One thing
that you'll need to know for

2
00:00:02.550 --> 00:00:05.980
this exercise we're gearing up for
here is how to terminate a worker.

3
00:00:05.980 --> 00:00:10.662
So once you get reference,
once you get an instance of this worker,

4
00:00:10.662 --> 00:00:15.118
you can call that terminate on it and
that will stop everything.

5
00:00:15.118 --> 00:00:18.735
If it is in the middle of
a function at that point,

6
00:00:18.735 --> 00:00:22.109
it may not continue
invoking that function.

7
00:00:22.109 --> 00:00:26.280
It is like a full-on slam the brakes,
we're done.

8
00:00:27.510 --> 00:00:32.121
So this is a good thing to
do if you're absolutely sure

9
00:00:32.121 --> 00:00:36.736
that your worker is done with
what it was set out to do.

10
00:00:36.736 --> 00:00:40.883
You would want to do this because
when you think about the overhead of

11
00:00:40.883 --> 00:00:44.229
spinning one of this things
up it's got its own scope,

12
00:00:44.229 --> 00:00:47.316
its got its own part of
the JavaScript event loop.

13
00:00:47.316 --> 00:00:51.540
The internal mechanism that it uses to
figure out which functions to call, and

14
00:00:51.540 --> 00:00:54.000
schedules that time out on its own.

15
00:00:54.000 --> 00:00:59.140
So there is a non-trivial overhead for
creating one of these things.

16
00:00:59.140 --> 00:01:04.010
The mental model I want you to use is,
it's on the order of

17
00:01:04.010 --> 00:01:07.600
somewhere between 100 and
1,000 function closures.

18
00:01:07.600 --> 00:01:10.120
So it is not a light thing.

19
00:01:10.120 --> 00:01:15.450
You don't wanna have 1,000 of these spun
up and to implement a parallel map, right?

20
00:01:15.450 --> 00:01:18.062
JavaScript is just not
designed to have tons and

21
00:01:18.062 --> 00:01:20.619
tons of workers functioning
at the same time.

22
00:01:20.619 --> 00:01:25.217
But if you have a task that you wanna
complete, and in our case it's,

23
00:01:25.217 --> 00:01:30.075
I have an image with the QR code in it,
find the QR code, decode it for me.

24
00:01:30.075 --> 00:01:33.881
It's a bunch of an image analysis and
like linear algebra,

25
00:01:33.881 --> 00:01:38.156
do that task, give me the data back,
then I can terminate worker.

26
00:01:38.156 --> 00:01:39.421
It's job is done.

27
00:01:39.421 --> 00:01:43.732
It's almost like a disposable thing.

28
00:01:43.732 --> 00:01:49.069
So we'll start talking about service
workers towards the end of the day,

29
00:01:49.069 --> 00:01:51.920
like when once it pass it back to Steve.

30
00:01:51.920 --> 00:01:56.946
Important to know that you cannot
terminate a service worker in this

31
00:01:56.946 --> 00:02:03.510
way because it is highly likely that doing
so would harm your user's experience.

32
00:02:03.510 --> 00:02:06.140
Because they need to be,
it is responsible for

33
00:02:06.140 --> 00:02:11.002
handling navigation events and
potentially satisfying HTTP requests.

34
00:02:11.002 --> 00:02:17.113
And there would be no way of knowing
whether it is safe to interrupt it.

35
00:02:17.113 --> 00:02:20.584
So you'd almost always end up
shooting yourself in the foot.

36
00:02:20.584 --> 00:02:24.011
So that API is actually
disabled in service workers.

37
00:02:26.460 --> 00:02:30.163
&gt;&gt; Mike North: And finally, I'm not
sure if I made this totally clear at

38
00:02:30.163 --> 00:02:35.485
the beginning, you can instantiate more
than one worker off of the same script and

39
00:02:35.485 --> 00:02:39.595
it will get their own scope,
each instance gets its own scope.

40
00:02:39.595 --> 00:02:41.589
&gt;&gt; Speaker 2: Except for
the original scope, right?

41
00:02:41.589 --> 00:02:45.379
So the original scope is still a linear
path, instantiate, instantiate,

42
00:02:45.379 --> 00:02:46.930
instantiate, instantiate.

43
00:02:46.930 --> 00:02:48.837
&gt;&gt; Mike North: So let's call it-
&gt;&gt; Speaker 2: Then they go off and

44
00:02:48.837 --> 00:02:50.226
do their thing and come back.

45
00:02:50.226 --> 00:02:52.146
&gt;&gt; Mike North: Let's call
it the application scope.

46
00:02:52.146 --> 00:02:56.925
Our app, that is one scope and
then each worker has its own scope.

47
00:02:56.925 --> 00:03:02.322
Even if it's the exact same file that
we're using to instantiate these workers.

48
00:03:02.322 --> 00:03:07.224
Right, maybe they each represent creating
a real time connection to something,

49
00:03:07.224 --> 00:03:11.639
we connect the three different services,
that could be the same JS file.

50
00:03:11.639 --> 00:03:16.767
A new worker means a new scope
&gt;&gt; Speaker 3: One question?

51
00:03:16.767 --> 00:03:18.175
&gt;&gt; Mike North: Yes?

52
00:03:18.175 --> 00:03:22.670
&gt;&gt; Speaker 3: In a mobile device,
if the user actually closes or

53
00:03:22.670 --> 00:03:29.987
terminates that app, or web page or
whatever, would the worker get killed and.

54
00:03:29.987 --> 00:03:34.668
&gt;&gt; Mike North: Indeterminate,
it is not, so there are several things

55
00:03:34.668 --> 00:03:39.083
that can happen, and
it depends on a mobile device.

56
00:03:39.083 --> 00:03:46.137
In Safari, if you're a mobile developer,
you kind of learn about these things so

57
00:03:46.137 --> 00:03:51.882
I can only speak to iOS cuz I don't
have deep Android familiarity.

58
00:03:51.882 --> 00:03:54.229
There are several different
modes you can go into.

59
00:03:54.229 --> 00:04:00.192
And I'm gonna call the first one sleep,
which is if the user sort of tabs away and

60
00:04:00.192 --> 00:04:05.378
then maybe they're just getting
a password and then they come back.

61
00:04:05.378 --> 00:04:08.161
Your worker has been
continuing the whole time.

62
00:04:08.161 --> 00:04:12.739
Think of it just like a stutter
in the execution of functions,

63
00:04:12.739 --> 00:04:18.208
you're sort of frozen while the user's
tabbing over and then come back.

64
00:04:18.208 --> 00:04:22.476
If the user goes away for
an extended period of time,

65
00:04:22.476 --> 00:04:27.036
think of that as hibernate
where we take all of that state

66
00:04:27.036 --> 00:04:31.319
it's not longer in fast memory,
we save it to disc.

67
00:04:31.319 --> 00:04:36.889
At which point,
your worker may have terminated, right?

68
00:04:36.889 --> 00:04:38.764
It may not be there.

69
00:04:38.764 --> 00:04:43.608
Like these things, the browser can
kill it whenever it wants basically.

70
00:04:43.608 --> 00:04:48.841
So you typically want to wrap these things
with a set timeout, or to periodically,

71
00:04:48.841 --> 00:04:52.953
a common pattern is ping-pong where
you send the worker a ping and

72
00:04:52.953 --> 00:04:54.251
you get a pong back.

73
00:04:54.251 --> 00:05:01.228
And on a mobile device, when you can
come back and say, are you still here?

74
00:05:01.228 --> 00:05:03.084
Answer me if you're still there.

75
00:05:03.084 --> 00:05:07.712
And that's a way that you
can verify it's there and

76
00:05:07.712 --> 00:05:14.580
then maybe create a new one passing
it state again so it can do it's job.

77
00:05:14.580 --> 00:05:18.040
But there is no standard that dictates
exactly how this should happen and

78
00:05:18.040 --> 00:05:22.850
it is different on iOS versus Android.

79
00:05:22.850 --> 00:05:27.245
iOS is very, very, very protective over
allowing anything at all to happen in

80
00:05:27.245 --> 00:05:29.520
the background, even native iOS apps.

81
00:05:29.520 --> 00:05:35.909
There are less than a dozen things
that you can do in the background,

82
00:05:35.909 --> 00:05:40.181
push notification, background download.

83
00:05:40.181 --> 00:05:42.550
You can play audio in the background.

84
00:05:42.550 --> 00:05:48.326
They added the ability to play video, but
only on 6 core, really powerful tablets.

85
00:05:48.326 --> 00:05:51.792
So they're gonna shut Safari down
whenever it's not in focus so

86
00:05:51.792 --> 00:05:53.470
that it doesn't eat battery.

