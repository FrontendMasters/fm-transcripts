WEBVTT

1
00:00:00.190 --> 00:00:04.564
&gt;&gt; Steve Kinney: So there's this thing
called CORS, and CORS is the first moment

2
00:00:04.564 --> 00:00:09.181
that aspiring front end engineers
realize that this might not be for

3
00:00:09.181 --> 00:00:14.218
them, which is they get some stuff
from a server, like their own server.

4
00:00:14.218 --> 00:00:18.939
They're yeah, I got I got data file
server, this web programming is the best,

5
00:00:18.939 --> 00:00:20.137
and then there's,

6
00:00:20.137 --> 00:00:25.094
now I'm going to have it hit the Twitter
API which is on a different origin, right?

7
00:00:25.094 --> 00:00:30.147
An origin is basically defined as,
it is the same protocol, so HTTP, HTTPS?

8
00:00:30.147 --> 00:00:35.221
The same subdomain, and domain,
and port, so different ports, or

9
00:00:35.221 --> 00:00:41.268
anything along those lines, if you
are talking to your own server, thumbs-up.

10
00:00:41.268 --> 00:00:44.629
If you're talking to somebody
else's server, right,

11
00:00:44.629 --> 00:00:49.600
they have to say they're okay, with this,
it's kinda like going into your house,

12
00:00:49.600 --> 00:00:51.718
it's okay, to go into your house.

13
00:00:51.718 --> 00:00:55.916
Going to other people's houses when you
haven't been invited is not very good,

14
00:00:55.916 --> 00:00:58.521
right, and generally speaking,
frowned upon.

15
00:00:58.521 --> 00:01:00.567
And the same is true with CORS, right,

16
00:01:00.567 --> 00:01:04.163
cuz you could theoretically request
sensitive data with Cookies and

17
00:01:04.163 --> 00:01:07.511
stuff along those lines, and
you could do some not nice things.

18
00:01:07.511 --> 00:01:11.437
So the browser doesn't let you do them
unless they have cleared this, right?

19
00:01:11.437 --> 00:01:16.796
But there's all sorts of things that
you can request from other servers,

20
00:01:16.796 --> 00:01:19.734
who amongst us hasn't gotten the URL for

21
00:01:19.734 --> 00:01:23.206
a dank meme and
dropped it into a message board?

22
00:01:23.206 --> 00:01:24.833
Did I just date myself there?

23
00:01:24.833 --> 00:01:31.675
Okay, so it's just me we can link
to images on remote servers.

24
00:01:31.675 --> 00:01:35.378
We can go ahead cuz we're lazy just
go ahead to the jQuery website,

25
00:01:35.378 --> 00:01:39.148
grab that CDN link and drop it into
the page, and we've got jQuery,

26
00:01:39.148 --> 00:01:41.680
clearly this is not always the case,
right?

27
00:01:41.680 --> 00:01:46.238
We were surprised when we couldn't hit
the Twitter API from our client side app,

28
00:01:46.238 --> 00:01:50.595
because we were used to just going on
W3Schools, grabbing some markup, and

29
00:01:50.595 --> 00:01:54.367
throwing it in our app, and
it just working half the time, right?

30
00:01:54.367 --> 00:01:57.471
So this is new and different for
us, so images are fine,

31
00:01:57.471 --> 00:02:00.972
right cuz there's no data in there for
us to read and work with,

32
00:02:00.972 --> 00:02:04.498
it's an image it's a video,
all of those things kind of work.

33
00:02:04.498 --> 00:02:09.792
So in fact we can theoretically and
we'll talk about how to do that get stuff

34
00:02:09.792 --> 00:02:15.776
from other domains if they are what we're
gonna call an opaque kind of data, right?

35
00:02:15.776 --> 00:02:18.230
But we can't see into them.

36
00:02:18.230 --> 00:02:24.778
&gt;&gt; Mike: So just to be clear this concept
has always existed, opaque responses.

37
00:02:24.778 --> 00:02:29.477
And one way you could see it is if
you got an image from a server that

38
00:02:29.477 --> 00:02:32.524
didn't have CORS headers on this image,

39
00:02:32.524 --> 00:02:37.310
you could not then take that image and
then write that to canvas and

40
00:02:37.310 --> 00:02:42.043
have your program analyse this
thing that was shown to the user.

41
00:02:42.043 --> 00:02:45.790
So it's almost like the users
are allowed to see it, but

42
00:02:45.790 --> 00:02:49.640
your code is not allowed to see
what was shown to the user.

43
00:02:49.640 --> 00:02:50.783
&gt;&gt; Steve Kinney: For safety reasons.

44
00:02:50.783 --> 00:02:56.273
&gt;&gt; Mike: For safety reasons, and here is
to reason why, cookies so by default,

45
00:02:56.273 --> 00:03:01.124
fetch aside, by default,
with AJAX and requesting images and

46
00:03:01.124 --> 00:03:06.265
things like that, like cookies
are sent along with each request.

47
00:03:06.265 --> 00:03:08.688
And so,
if you were logged into my site and

48
00:03:08.688 --> 00:03:12.710
cookies are the means by which I
authenticate and authorise people,

49
00:03:12.710 --> 00:03:17.418
now all I need to do is have an image of
your user profile, or something like that,

50
00:03:17.418 --> 00:03:21.889
and I might be able to tell, are you
an admin user, or are you a regular user?

51
00:03:21.889 --> 00:03:26.702
I could have some AJAX that
would be sending requests out,

52
00:03:26.702 --> 00:03:31.428
to transfer funds from your
bank account to another one.

53
00:03:31.428 --> 00:03:35.213
And the fact that you have a cookie for
that domain, and

54
00:03:35.213 --> 00:03:39.919
that's the way that that
authentication works, that can happen.

55
00:03:39.919 --> 00:03:44.935
Now those responses are opaque to us,
we can't know for

56
00:03:44.935 --> 00:03:50.070
a fact whether it completed,
but we can certainly do it.

57
00:03:50.070 --> 00:03:52.083
And that's why CORS headers,

58
00:03:52.083 --> 00:03:57.196
it is important if you're a front end
developer to know what your doing here and

59
00:03:57.196 --> 00:04:00.913
don't set them up the way this
example project is set up,

60
00:04:00.913 --> 00:04:05.815
which is a wildcard course header,
it's extremely permissive, right?

61
00:04:05.815 --> 00:04:10.347
The consequence of this for
a real app would be like I could

62
00:04:10.347 --> 00:04:14.880
send a link to Steve and
trick him into clicking on it, and

63
00:04:14.880 --> 00:04:21.035
he would order three tons of diapers to
be delivered to his house in two weeks.

64
00:04:21.035 --> 00:04:24.501
So definitely important
to pay attention to and

65
00:04:24.501 --> 00:04:29.090
learn more about it but
it is sort of been rethought and fetch and

66
00:04:29.090 --> 00:04:34.892
they got a second chance to define what
are the defaults, what should we allow,

67
00:04:34.892 --> 00:04:40.118
and now like have reason in this world,
and not only dangerous things.

68
00:04:40.118 --> 00:04:43.310
&gt;&gt; Steve Kinney: Yep, it's a real problem
for us at SendGrid, too cuz we have

69
00:04:43.310 --> 00:04:47.268
a product where they could upload
an HTML file that is their email, right?

70
00:04:47.268 --> 00:04:51.903
An attack vector would be, hey, if we
didn't sanitize all that stuff they could

71
00:04:51.903 --> 00:04:56.557
upload executable JavaScript, call up
support that has advanced permission.

72
00:04:56.557 --> 00:04:59.498
Have that send AJAX requests with
the cookie information and stuff,

73
00:04:59.498 --> 00:05:00.719
along those lines, right?

74
00:05:00.719 --> 00:05:02.387
So it's a very real problem,

75
00:05:02.387 --> 00:05:06.409
with XMLHttpRequest we were only
getting things that were not opaque.

76
00:05:06.409 --> 00:05:09.773
So we never thought about opaque
things in terms of these Asynchronous

77
00:05:09.773 --> 00:05:10.691
network request.

78
00:05:10.691 --> 00:05:14.268
They always exist to this Mike said,
but now it's the first time

79
00:05:14.268 --> 00:05:17.659
that we can actually fetch that,
one an unintentional pun.

80
00:05:17.659 --> 00:05:20.129
So now the time we can get
those things as well, so

81
00:05:20.129 --> 00:05:22.980
here's an example of how that
would work with an image.

82
00:05:22.980 --> 00:05:28.049
&gt;&gt; Student: So for each fetch request
now do we have to set course headers?

83
00:05:28.049 --> 00:05:30.394
&gt;&gt; Steve Kinney: If it's your own,
you do not,

84
00:05:30.394 --> 00:05:35.370
if it's something you expect to be opaque,
you need to say that.

85
00:05:35.370 --> 00:05:37.401
Which we'll take a look at in one second.

86
00:05:37.401 --> 00:05:42.062
So, here I'm building a thing where
I'm going to go get Mike's head shot

87
00:05:42.062 --> 00:05:46.583
from the Frontend Masters' website,
as you do, I call it Wednesday.

88
00:05:46.583 --> 00:05:47.900
&gt;&gt; Mike: Everybody does.

89
00:05:47.900 --> 00:05:50.390
&gt;&gt; Steve Kinney: Everyone does, who
amongst us was not doing that at lunch?

90
00:05:50.390 --> 00:05:51.880
&gt;&gt; Mike: It's the retina headshot too.

91
00:05:51.880 --> 00:05:54.502
&gt;&gt; Steve Kinney: Yeah,
it's the retina one, I got it at 2x,

92
00:05:54.502 --> 00:05:56.852
cuz I'm not sacrificing quality here.

93
00:05:56.852 --> 00:06:00.141
So I'll go fetch this URL, and
then when I get the response, I'm for

94
00:06:00.141 --> 00:06:04.001
some reason going to console log an image,
because I was not feeling eventful for

95
00:06:04.001 --> 00:06:06.068
a thing that wasn't going to work anyway.

96
00:06:06.068 --> 00:06:10.993
So you could see that I'm apparently
doing it from the dinosaur website, and

97
00:06:10.993 --> 00:06:14.251
the FrontendMasters website is like,
excuse me,

98
00:06:14.251 --> 00:06:18.213
you don't have the keys to this house,
please step outside.

99
00:06:18.213 --> 00:06:23.975
You cannot fetch this image, because we
didn't set any of those, we didn't say,

100
00:06:23.975 --> 00:06:29.515
hey, take it opaque, we don't have
the CORS permissions, so on and so forth.

101
00:06:29.515 --> 00:06:33.782
But if I went to the Nodejs webpage,
I just put an image tag in there, and

102
00:06:33.782 --> 00:06:37.928
I set the source attribute to the same
image, it would totally work.

103
00:06:37.928 --> 00:06:39.954
So why can't I do this in a fetch?

104
00:06:39.954 --> 00:06:44.591
I can, right, I just have to say
that the mode is no-cors, right?

105
00:06:44.591 --> 00:06:47.759
And that will give me an opaque version,
right?

106
00:06:47.759 --> 00:06:51.421
I couldn't request JSON like this,
along those lines but

107
00:06:51.421 --> 00:06:55.090
things I will get a version
that I cannot see into, right?

108
00:06:55.090 --> 00:06:59.798
We will say, that lost the slide in there.

109
00:06:59.798 --> 00:07:03.152
Yeah, the comment's right there,
I'm just not looking, you can see when I

110
00:07:03.152 --> 00:07:05.853
say console.log(resource.type),
it'll say opaque.

111
00:07:05.853 --> 00:07:09.789
Which means I can put it into
an image tag, but I cannot read it or

112
00:07:09.789 --> 00:07:11.136
do anything with it.

113
00:07:11.136 --> 00:07:15.382
I can use it as if it was an image
with a source attribute, right?

114
00:07:15.382 --> 00:07:20.774
If I were saying why can't I do that,
I can, but that's what I can do, cool.

115
00:07:20.774 --> 00:07:24.504
And so for the most part,
in a lot of our usage of fetch,

116
00:07:24.504 --> 00:07:30.184
we're gonna send a string as a URL, we can
send this object with some options in it,

117
00:07:30.184 --> 00:07:33.287
we can also build a request ourself,
right?

118
00:07:33.287 --> 00:07:38.240
So we can make a new request
object with a string, and

119
00:07:38.240 --> 00:07:41.626
an object full of options, right?

120
00:07:41.626 --> 00:07:46.040
You're like, why wouldn't I just do that
the way I was doing it before, noted.

121
00:07:46.040 --> 00:07:50.417
We can then take that request, and
we can pass into the fetch, and

122
00:07:50.417 --> 00:07:53.295
it will work exactly the same way, right?

123
00:07:53.295 --> 00:07:56.793
So and this is the same example
again with my no-cors in there,

124
00:07:56.793 --> 00:08:01.030
I can create the request, send it through,
I'll get the opaque response.

125
00:08:01.030 --> 00:08:04.821
I put this slide back up because
I want you to meditate for

126
00:08:04.821 --> 00:08:08.379
a second on the feeling you
have in your heart of why.

127
00:08:08.379 --> 00:08:12.164
Why would I create a request object
that has the same things that I

128
00:08:12.164 --> 00:08:13.997
would have passed into fetch?

129
00:08:13.997 --> 00:08:18.402
I'm not gonna answer that question for
you just yet, I'm just gonna ask you to

130
00:08:18.402 --> 00:08:22.236
think about it for a second,
there is this idea of a request object.

131
00:08:22.236 --> 00:08:26.988
It's not just we pass an a string, and
we pass in an object full of options, but

132
00:08:26.988 --> 00:08:30.876
when we do that, especially what
happens under the fetch hood,

133
00:08:30.876 --> 00:08:35.772
is it makes one of these request objects,
and these request objects are a thing,

134
00:08:35.772 --> 00:08:40.605
they are a thing that will show back up,
to kinda foreshadow how the story goes.

135
00:08:40.605 --> 00:08:43.866
Show back up later in our time together,
to lend a helping hand.

136
00:08:43.866 --> 00:08:49.395
But right now, it's that kind of,
the rule from storytelling don't feature

137
00:08:49.395 --> 00:08:54.441
a gun on the like mantle if it's not
gonna get used to the end of the book.

138
00:08:54.441 --> 00:08:56.821
And if you do it better get
used by the end of the book.

139
00:08:56.821 --> 00:08:59.894
This is our like foreshadowing for
a friend that will return,

140
00:08:59.894 --> 00:09:03.558
when we're hanging out with pit of
sharks of sharks that really just makes

141
00:09:03.558 --> 00:09:05.767
a whole bunch of movie metaphors together.

142
00:09:05.767 --> 00:09:07.855
Is after lunch, it's what you gotta do.

143
00:09:07.855 --> 00:09:10.598
&gt;&gt; Student2: At least
the sharks aren't jumping.

144
00:09:10.598 --> 00:09:11.859
&gt;&gt; Steve Kinney: What's that?

145
00:09:11.859 --> 00:09:12.803
&gt;&gt; Student2: So
at least the sharks aren't jumping.

146
00:09:12.803 --> 00:09:16.380
&gt;&gt; Steve Kinney: At least the sharks
aren't jumping cuz jumping

147
00:09:16.380 --> 00:09:21.309
sharks are dangerous and
they I got it [LAUGH] walked into it?

148
00:09:21.309 --> 00:09:25.345
Cool so here we can also create headers
if we wanted to like set contact link,

149
00:09:25.345 --> 00:09:28.752
we can like append different things
to the headers in our request

150
00:09:28.752 --> 00:09:31.550
when we get a response object,
we can read headers.

151
00:09:31.550 --> 00:09:35.029
So there are things that we might
want to do with this object,

152
00:09:35.029 --> 00:09:38.849
if this hurts your feelings,
you can also pass it in as an object and

153
00:09:38.849 --> 00:09:42.006
it will kind of create the headers for
you the same way.

154
00:09:42.006 --> 00:09:44.846
So we've talked a lot
about making requests, and

155
00:09:44.846 --> 00:09:48.305
which raises the question of
what about responses, right?

156
00:09:48.305 --> 00:09:52.899
Cuz ideally the request are only
a means to the end we're only

157
00:09:52.899 --> 00:09:57.057
making the requests cuz we
want the response, right?

158
00:09:57.057 --> 00:10:02.568
So we've kind of repeated repeatedly is
that it works with more than JSON XML and

159
00:10:02.568 --> 00:10:06.448
we do again need to talk about
what we're dealing with.

160
00:10:06.448 --> 00:10:10.341
In this case we'll take JSON,
we have a bunch of other options, right?

161
00:10:10.341 --> 00:10:15.042
We saw blob, JSON is like
please parse it as JSON, right?

162
00:10:15.042 --> 00:10:19.830
Text is, it's text, form data is
kind of cool, form data works for

163
00:10:19.830 --> 00:10:24.792
both requests and responses,
let's say you have a form on your page.

164
00:10:24.792 --> 00:10:28.990
You can actually say new form data and
give it the DOM node that has the form and

165
00:10:28.990 --> 00:10:32.616
it will get you all the data and
you can send it along to the server.

166
00:10:32.616 --> 00:10:37.252
If you got back to send anything back
to the server you could theoretically

167
00:10:37.252 --> 00:10:39.887
pass it back into data that you could use.

168
00:10:39.887 --> 00:10:45.031
All right, quick word and this is again
something that will appear later,

169
00:10:45.031 --> 00:10:49.848
is for a number of reasons, you can
only read the data out of a request or

170
00:10:49.848 --> 00:10:51.580
response once, right?

171
00:10:51.580 --> 00:10:55.532
After that it's okay I don't really
need to hold on to the same they've done

172
00:10:55.532 --> 00:10:58.333
the thing with it,
I can let all this information go.

173
00:10:58.333 --> 00:11:02.625
Which most of the time is exactly what
we want, some of the times you're like,

174
00:11:02.625 --> 00:11:06.007
hey actually I read it,
I'm gonna need to do something else or

175
00:11:06.007 --> 00:11:09.414
I think I'm gonna need to do
something else, we can clone it.

176
00:11:09.414 --> 00:11:12.032
We'll talk a little more about this later,
but

177
00:11:12.032 --> 00:11:15.640
first what we're gonna do is
we're going implement some fetch.

