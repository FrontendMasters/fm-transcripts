WEBVTT

1
00:00:00.360 --> 00:00:02.270
&gt;&gt; Steve Kinney: All right,
so we have two missions.

2
00:00:02.270 --> 00:00:06.562
Mission one, put stuff in the cart.

3
00:00:06.562 --> 00:00:09.041
And by put stuff in the cart,
we mean don't lie about it, right?

4
00:00:09.041 --> 00:00:11.390
Actually tell the server
to put it in the cart.

5
00:00:11.390 --> 00:00:13.630
Rather than going, yeah,
it's totally in the cart.

6
00:00:13.630 --> 00:00:17.470
Because if we go right now and
we check it out,

7
00:00:17.470 --> 00:00:20.380
we can put some stuff in the cart,
put in some of that,

8
00:00:20.380 --> 00:00:24.000
I'll put some of these other things in
here, some almond milk, some feta cheese.

9
00:00:24.000 --> 00:00:25.053
I'm gonna go wild.

10
00:00:25.053 --> 00:00:29.477
And then I'm gonna refresh the page.

11
00:00:29.477 --> 00:00:34.449
[SOUND] There's nothing in the cart
because I didn't actually do it.

12
00:00:34.449 --> 00:00:39.420
And so now our job is to tell
the server that we did it as well.

13
00:00:39.420 --> 00:00:46.530
So one of our goals was to take this lie,
this false promise.

14
00:00:46.530 --> 00:00:51.780
I mean they technically say it's a promise
but it is like a disingenuous promise.

15
00:00:51.780 --> 00:00:55.345
And replace it with a fetch call
that will return a promise and

16
00:00:55.345 --> 00:00:57.880
will return that instead,
which is did it work or did it not work?

17
00:00:57.880 --> 00:00:59.230
Here we're saying, it worked.

18
00:00:59.230 --> 00:01:02.950
We didn't do anything but
that nothing that we did, it worked.

19
00:01:02.950 --> 00:01:06.040
Right, here we're gonna say,
let's see, I'll try it out.

20
00:01:06.040 --> 00:01:08.130
Here's a promise, here's an IOU.

21
00:01:08.130 --> 00:01:11.724
It'll resolve when we hear back
from the server on whether or

22
00:01:11.724 --> 00:01:13.210
not it actually worked.

23
00:01:13.210 --> 00:01:20.911
All right, so I definitely
know that this is bogus, cool.

24
00:01:20.911 --> 00:01:25.710
So what I'm gonna do is I'll just comment
it out for now cuz I'm very cautious and

25
00:01:25.710 --> 00:01:28.690
will never actually delete code.

26
00:01:28.690 --> 00:01:31.620
I'm all about deleting code, I'm a liar.

27
00:01:31.620 --> 00:01:35.270
So return is some kind of fetch, right?

28
00:01:35.270 --> 00:01:38.820
We know that we wanna
fetch some kind of data.

29
00:01:38.820 --> 00:01:42.240
Scrolling around,
I can see that Mike was nice enough for

30
00:01:42.240 --> 00:01:45.100
bringing us an API endpoint.

31
00:01:45.100 --> 00:01:49.930
Which is, at this point, it reads
like basically it's localhost 3100.

32
00:01:49.930 --> 00:01:52.029
But I'll use that for now.

33
00:01:52.029 --> 00:01:54.746
I could also hard code in localhost 3100.

34
00:01:54.746 --> 00:01:57.040
We could actually see
it in the restore cart.

35
00:01:57.040 --> 00:02:00.450
We can see a fetch that was hidden
in there as a little trick for

36
00:02:00.450 --> 00:02:01.230
anyone looking around.

37
00:02:01.230 --> 00:02:02.790
There was a hidden fetch in there for you.

38
00:02:02.790 --> 00:02:07.500
So we actually start with that,
right, cuz that looks pretty similar.

39
00:02:07.500 --> 00:02:08.550
This is good, I like this.

40
00:02:08.550 --> 00:02:10.290
I want this, I'm taking this.

41
00:02:12.280 --> 00:02:13.510
What's the problem with taking this?

42
00:02:13.510 --> 00:02:14.810
Anyone have a lucky guess?

43
00:02:16.280 --> 00:02:18.648
Anyone want to ruin my day and
tell me what's gonna go wrong for me?

44
00:02:21.740 --> 00:02:23.560
&gt;&gt; Speaker 2: Your HTTP verb is wrong.

45
00:02:23.560 --> 00:02:30.670
&gt;&gt; Steve Kinney: Yeah, by default,
fetch will do its synonym get, right?

46
00:02:30.670 --> 00:02:32.289
But we don't want to get.

47
00:02:32.289 --> 00:02:34.053
Does anyone know what we wanna do?

48
00:02:34.053 --> 00:02:36.630
&gt;&gt; Speaker 2: Put.
&gt;&gt; Steve Kinney: Put, okay, so it's a good

49
00:02:36.630 --> 00:02:41.999
step in the right direction, but
it is not going to do the trick for me.

50
00:02:41.999 --> 00:02:44.043
But let's save it, and
let's be adventurous and

51
00:02:44.043 --> 00:02:48.837
see what happens
&gt;&gt; Steve Kinney: We could see

52
00:02:48.837 --> 00:02:50.130
that it completed.

53
00:02:50.130 --> 00:02:52.993
For instance, if I really wanted to,

54
00:02:52.993 --> 00:02:58.608
I could say then(data,
&gt;&gt; Steve Kinney: Whoa,

55
00:02:58.608 --> 00:03:03.970
that was fun, and
console.log(data), right?

56
00:03:03.970 --> 00:03:06.909
Clearly, this is not going
to be what I think it is.

57
00:03:06.909 --> 00:03:10.749
This is going to be all the stuff in
the cart, which is effectively nothing,

58
00:03:10.749 --> 00:03:13.930
because we don't have the ability
to put stuff in the cart yet.

59
00:03:17.539 --> 00:03:18.840
&gt;&gt; Steve Kinney: All right,
so put stuff in.

60
00:03:19.900 --> 00:03:22.460
You can see I got that
empty array in there.

61
00:03:22.460 --> 00:03:27.490
Okay, great, not so great,
but we'll go with it.

62
00:03:27.490 --> 00:03:31.270
All right, but we do have the basis
of what we need in this case.

63
00:03:31.270 --> 00:03:35.671
Anyone have a lucky guess on
how we might take this fetch?

64
00:03:35.671 --> 00:03:41.436
Right, cuz I gave it a URL,
what more could it possibly want?

65
00:03:41.436 --> 00:03:42.647
Lucky guesses?

66
00:03:42.647 --> 00:03:45.410
&gt;&gt; Speaker 2: An object.
&gt;&gt; Steve Kinney: An object of options.

67
00:03:47.600 --> 00:03:53.125
&gt;&gt; Steve Kinney: All right, and for
my own neuroses, there we go, cool.

68
00:03:53.125 --> 00:03:55.480
I don't actually even like that,
but we'll deal with it.

69
00:03:55.480 --> 00:03:59.100
All right, so how would we send something?

70
00:03:59.100 --> 00:04:02.950
We're passing some options,
what would it make sense to,

71
00:04:02.950 --> 00:04:05.170
if we wanna set the method to a put,
what might we try?

72
00:04:06.605 --> 00:04:08.440
&gt;&gt; Speaker 2: Setting
a method property to PUT.

73
00:04:08.440 --> 00:04:09.100
&gt;&gt; Steve Kinney: I like it.

74
00:04:09.100 --> 00:04:10.050
I like his thinking.

75
00:04:10.050 --> 00:04:13.570
[LAUGH] We can set a method to PUT.

76
00:04:14.980 --> 00:04:16.000
That seems good.

77
00:04:16.000 --> 00:04:17.130
I like that.

78
00:04:20.270 --> 00:04:21.740
&gt;&gt; Speaker 2: Need some data.

79
00:04:21.740 --> 00:04:23.070
&gt;&gt; Steve Kinney: Yeah, so
what are we putting is,

80
00:04:23.070 --> 00:04:25.930
I think, the next obvious question, right?

81
00:04:25.930 --> 00:04:30.050
And the reason that I didn't
comment this out before is,

82
00:04:30.050 --> 00:04:35.930
clearly, this cart store has
some idea of items, right?

83
00:04:35.930 --> 00:04:39.650
Seems like we should
send those to the server.

84
00:04:41.260 --> 00:04:43.270
I like this train of thought.

85
00:04:43.270 --> 00:04:44.750
All right, how might we do that?

86
00:04:46.830 --> 00:04:49.874
So requests, if I remember, like-
&gt;&gt; Speaker 2: Body?

87
00:04:49.874 --> 00:04:52.930
&gt;&gt; Steve Kinney: Body, they have
a head and they have a body, right?

88
00:04:52.930 --> 00:04:55.980
Seems like this data might be the what,
the head, right?

89
00:04:57.000 --> 00:05:02.020
The body,
it's too late in the afternoon for jokes.

90
00:05:02.020 --> 00:05:05.556
The body and what should the body be?

91
00:05:05.556 --> 00:05:07.288
&gt;&gt; Speaker 2: The items.
&gt;&gt; Steve Kinney: The set items,

92
00:05:07.288 --> 00:05:10.970
this may or may not work, we'll find out.

93
00:05:24.299 --> 00:05:25.720
&gt;&gt; Steve Kinney: That's strange.

94
00:05:25.720 --> 00:05:28.080
&gt;&gt; Speaker 2: It needs
a content type header.

95
00:05:28.080 --> 00:05:31.200
&gt;&gt; Steve Kinney: Interesting,
how am I gonna try to do that?

96
00:05:32.860 --> 00:05:33.640
&gt;&gt; Speaker 2: Headers.

97
00:05:33.640 --> 00:05:34.830
&gt;&gt; Steve Kinney: Headers,
okay that seems good.

98
00:05:35.930 --> 00:05:37.870
So we'll take some headers.

99
00:05:37.870 --> 00:05:42.743
It doesn't really matter the order here,
but again, all right,

100
00:05:42.743 --> 00:05:45.540
there are lots of different headers.

101
00:05:45.540 --> 00:05:48.506
It seems like I need, again,
to configure this request.

102
00:05:48.506 --> 00:05:51.950
What kind of header do I want again?

103
00:05:51.950 --> 00:05:52.450
&gt;&gt; Speaker 2: Content type.

104
00:05:52.450 --> 00:05:55.710
&gt;&gt; Steve Kinney: Content
type that seems good.

105
00:05:55.710 --> 00:05:58.229
What kind of content is this?

106
00:05:58.229 --> 00:06:00.829
&gt;&gt; Speaker 2: Application JSON.

107
00:06:00.829 --> 00:06:02.119
&gt;&gt; Steve Kinney: You know
the answers already, don't you?

108
00:06:03.330 --> 00:06:07.780
[INAUDIBLE] All right,
cool, put a comma in there.

109
00:06:07.780 --> 00:06:09.315
All right, now what do we have?

110
00:06:13.580 --> 00:06:18.332
&gt;&gt; Steve Kinney: All right,
seem to be rejected cannot read

111
00:06:18.332 --> 00:06:22.696
property map of undefined, strange.

112
00:06:22.696 --> 00:06:23.593
&gt;&gt; Speaker 2: [CROSSTALK]
&gt;&gt; Steve Kinney: Yep,

113
00:06:23.593 --> 00:06:26.670
because it doesn't know
how to deal with this.

114
00:06:33.920 --> 00:06:35.417
&gt;&gt; Steve Kinney: All right,
I'll try it again.

115
00:06:38.362 --> 00:06:39.090
&gt;&gt; Steve Kinney: Nope.

116
00:06:47.619 --> 00:06:50.050
&gt;&gt; Speaker 2: Sorry, if I'm cheating here.

117
00:06:50.050 --> 00:06:54.046
So the API example had
a top level key of data.

118
00:06:54.046 --> 00:06:54.805
&gt;&gt; Steve Kinney: Uh-huh.

119
00:06:57.198 --> 00:06:58.431
&gt;&gt; Steve Kinney: In the meantime.

120
00:06:58.431 --> 00:07:03.798
All right, so if we go back and
we take a look at our API playground,

121
00:07:03.798 --> 00:07:08.240
right, we can see that it's
expecting stuff to be in this data.

122
00:07:08.240 --> 00:07:09.280
Right, and we didn't do it.

123
00:07:09.280 --> 00:07:10.550
We just sent it in an array.

124
00:07:10.550 --> 00:07:14.400
We're like, here, and so likely what
the API is doing is it's saying,

125
00:07:14.400 --> 00:07:16.590
cool I got something
really excited about this.

126
00:07:16.590 --> 00:07:19.660
Let me go get the data key out of it and
it's an array.

127
00:07:19.660 --> 00:07:20.990
So you got back undefined.

128
00:07:20.990 --> 00:07:22.250
And let's map all of them now.

129
00:07:22.250 --> 00:07:27.699
And we called map on undefined,
and then sadness ensues, right?

130
00:07:31.087 --> 00:07:32.050
&gt;&gt; Steve Kinney: Cool.

131
00:07:35.560 --> 00:07:37.620
&gt;&gt; Steve Kinney: So what do we need to do?

132
00:07:39.310 --> 00:07:42.690
Looks like this is the culprit.

133
00:07:42.690 --> 00:07:47.140
It's expecting an object with a data key,
so.

134
00:07:47.140 --> 00:07:48.156
&gt;&gt; Speaker 2: Make
an object with a data key?

135
00:07:48.156 --> 00:07:50.155
&gt;&gt; Steve Kinney: Make an object with
a data key give the server what it wants.

136
00:07:50.155 --> 00:07:53.454
That's our job as front end developers.

137
00:07:53.454 --> 00:07:55.184
All right, I'm excited now.

138
00:07:55.184 --> 00:07:57.390
I think this is really where
things come together for us.

139
00:08:00.130 --> 00:08:04.020
Hey, hey, stuff went in there,
things were good, fetch complete.

140
00:08:04.020 --> 00:08:06.220
All right,
moment of truth I refresh the page.

141
00:08:08.710 --> 00:08:13.619
We could actually put stuff in
the cart in our shopping cart app.

142
00:08:13.619 --> 00:08:15.754
I will tell you that
this back end is fake,

143
00:08:15.754 --> 00:08:19.239
and you can't actually order groceries so
don't get too excited.

144
00:08:19.239 --> 00:08:21.035
But if this was a real app,

145
00:08:21.035 --> 00:08:25.480
we could totally put real
stuff into our fake app now.

146
00:08:25.480 --> 00:08:27.520
That said, we got something in the cart.

147
00:08:27.520 --> 00:08:28.610
I'm excited.

148
00:08:28.610 --> 00:08:29.870
Let's go ahead checkout.

149
00:08:29.870 --> 00:08:30.970
Yes, I'm sure.

150
00:08:30.970 --> 00:08:35.370
Boom, uncaught, cart store to
checkout not yet implemented.

151
00:08:36.490 --> 00:08:39.710
Somebody went home early for the weekend?

152
00:08:39.710 --> 00:08:40.300
So let's check it out.

153
00:08:40.300 --> 00:08:42.442
Let's look for, nope.

154
00:08:44.676 --> 00:08:47.810
&gt;&gt; Steve Kinney: doCheck out,
a-ha, well that makes sense.

155
00:08:47.810 --> 00:08:49.140
That explains the error message.

156
00:08:49.140 --> 00:08:53.288
doCheckout immediately
just throws an error.

157
00:08:53.288 --> 00:08:55.031
All right, so in this case,

158
00:08:55.031 --> 00:08:59.520
it's kind of like we're gonna repeat
a lot of the same logic here.

159
00:08:59.520 --> 00:09:04.730
What we wanna do is does anyone
remember the API for creating an order?

160
00:09:06.250 --> 00:09:07.690
&gt;&gt; Speaker 2: API/order.

161
00:09:07.690 --> 00:09:10.130
&gt;&gt; Steve Kinney: API/order,
what kinda method do I need?

162
00:09:10.130 --> 00:09:11.190
&gt;&gt; Speaker 2: POST.
&gt;&gt; Steve Kinney: It's a POST, right,

163
00:09:11.190 --> 00:09:13.650
cuz we're gonna create one.

164
00:09:13.650 --> 00:09:17.000
Cool, so what we'll do is,
when this happens,

165
00:09:17.000 --> 00:09:21.110
we'll return a new promise,
return new fetch, seems good.

166
00:09:23.260 --> 00:09:26.290
Look at that fancy API
endpoint that Mike made us.

167
00:09:26.290 --> 00:09:33.410
So we've got API endpoint, and
we know that that's api/order.

168
00:09:33.410 --> 00:09:38.490
All right, again, just firing this
off is gonna make what kinda request?

169
00:09:38.490 --> 00:09:39.960
&gt;&gt; Speaker 2: Get.
&gt;&gt; Steve Kinney: A get,

170
00:09:39.960 --> 00:09:41.930
that's not what we want.

171
00:09:41.930 --> 00:09:45.520
We want a method of?

172
00:09:45.520 --> 00:09:46.044
&gt;&gt; Speaker 2: Host.

173
00:09:46.044 --> 00:09:49.150
&gt;&gt; Steve Kinney: Host,
cool, all right, now again,

174
00:09:49.150 --> 00:09:53.240
a little bit of the same,
we're gonna send JSON.

175
00:09:53.240 --> 00:09:59.120
And we know it's gotta be in the body, so
there's not like a lot of incognita here.

176
00:09:59.120 --> 00:10:02.900
So we'll say, 'content-type'.

177
00:10:02.900 --> 00:10:04.349
&gt;&gt; Speaker 2: Headers object.

178
00:10:04.349 --> 00:10:05.122
&gt;&gt; Steve Kinney: Good catch.

179
00:10:08.210 --> 00:10:10.151
&gt;&gt; Steve Kinney: Got background music for
this?

180
00:10:13.600 --> 00:10:15.632
&gt;&gt; Steve Kinney: All right, and
it's 'application/json' again.

181
00:10:15.632 --> 00:10:17.399
Nothing's really changed
in this part of the app.

182
00:10:19.500 --> 00:10:23.106
&gt;&gt; Steve Kinney: All right, the other
thing we've given it the right headers,

183
00:10:23.106 --> 00:10:24.886
what else do we need to give it?

184
00:10:26.690 --> 00:10:27.940
&gt;&gt; Speaker 2: The stuff.

185
00:10:27.940 --> 00:10:29.790
&gt;&gt; Steve Kinney: The stuff
give it the stuff.

186
00:10:29.790 --> 00:10:31.176
That's the stuff key right.

187
00:10:31.176 --> 00:10:34.210
[LAUGH] We give it the body, and again,

188
00:10:34.210 --> 00:10:36.819
that is gonna be very similar
to what we had before.

189
00:10:38.920 --> 00:10:42.570
Except, this time we know that's
expecting a data keyword.

190
00:10:44.610 --> 00:10:45.660
I'll pass that in.

191
00:10:45.660 --> 00:10:49.360
Now when stuff happens,
there's a little bit more.

192
00:10:49.360 --> 00:10:53.300
Remember, if we go back to
the test that we were given,

193
00:10:54.750 --> 00:10:55.720
there's a little bit more to it.

194
00:10:56.890 --> 00:11:01.390
It says after the API call is completed,
call _restoreCart to update the client's

195
00:11:01.390 --> 00:11:04.860
view of any changes that might have
happened as a result of the order, right?

196
00:11:04.860 --> 00:11:07.280
And then theoretically,
we're gonna get back

197
00:11:07.280 --> 00:11:12.360
these new items that we can set to be
the new contents of the cart, right?

198
00:11:12.360 --> 00:11:15.080
So we're still gonna get
back some more stuff.

199
00:11:15.080 --> 00:11:15.900
So our job is done.

200
00:11:15.900 --> 00:11:16.970
We've created the order.

201
00:11:16.970 --> 00:11:18.829
There's more information
coming back at us now.

202
00:11:22.440 --> 00:11:24.122
&gt;&gt; Steve Kinney: Luckily for us, really,

203
00:11:24.122 --> 00:11:26.880
the hard work has already been done for
us.

204
00:11:29.693 --> 00:11:31.090
&gt;&gt; Steve Kinney: Take that.

205
00:11:31.090 --> 00:11:31.986
Take that with me.

206
00:11:31.986 --> 00:11:34.131
Thanks, Mike.

207
00:11:34.131 --> 00:11:36.859
[LAUGH] Cool.

208
00:11:42.670 --> 00:11:44.540
&gt;&gt; Steve Kinney: Right,
so what's happening here?

209
00:11:44.540 --> 00:11:50.980
Okay, if we have successfully,
in a fake server running on localhost,

210
00:11:50.980 --> 00:11:54.900
it's pretty hard to have a network error,
unless we turn the app offline.

211
00:11:54.900 --> 00:11:56.980
Wonder if that's gonna
happen at some point today.

212
00:11:56.980 --> 00:12:00.629
But right now we can assume
we're gonna be successful.

213
00:12:00.629 --> 00:12:05.331
And we'll go ahead and when that happens,
when we hear back from the network,

214
00:12:05.331 --> 00:12:08.551
either way,
it could have been a 404 or whatever.

215
00:12:08.551 --> 00:12:09.785
In this case, we're kind of naive.

216
00:12:09.785 --> 00:12:11.404
In a real robust application,

217
00:12:11.404 --> 00:12:15.870
you might handle permission denied
you didn't have access to that cart.

218
00:12:15.870 --> 00:12:19.340
We're keeping it simple cuz it's
not the total focus of today.

219
00:12:19.340 --> 00:12:23.040
We're gonna call this a store cart method,
which we'll take a look at a second.

220
00:12:23.040 --> 00:12:27.010
That returns a promise, right,
cuz that's gotta do some extra stuff.

221
00:12:27.010 --> 00:12:30.920
That's gonna have all of
the new items ready for us.

222
00:12:30.920 --> 00:12:33.300
And at that point,
we set that to be the items in the store,

223
00:12:33.300 --> 00:12:36.740
and we tell React, hey I've got new items.

224
00:12:36.740 --> 00:12:40.989
Change the UI to reflect that, and we can
see that when that happens, I can hit Yes.

225
00:12:42.890 --> 00:12:44.479
&gt;&gt; Steve Kinney: Not if you don't
save the file you can't do anything.

226
00:12:50.287 --> 00:12:52.510
&gt;&gt; Steve Kinney: Checkout, hit Yes.

227
00:12:52.510 --> 00:12:54.610
And we see my cart is,
at this point, empty.

228
00:12:56.020 --> 00:13:00.367
&gt;&gt; Speaker 2: Let's click on the little
top left icon when you're done here,

229
00:13:00.367 --> 00:13:02.308
the little grocery awning.

230
00:13:04.209 --> 00:13:05.700
&gt;&gt; Speaker 2: Yep.

231
00:13:05.700 --> 00:13:08.360
&gt;&gt; Steve Kinney: Look at that,
we've got a pending order, right?

232
00:13:08.360 --> 00:13:10.920
So our server works,
we have done the task.

233
00:13:11.960 --> 00:13:18.000
So that means that in a workshop
on progressive web apps,

234
00:13:18.000 --> 00:13:21.780
again, web apps that
feel like native apps.

235
00:13:21.780 --> 00:13:25.850
Native apps,
which a lot of times work offline.

236
00:13:25.850 --> 00:13:28.350
We have totally implemented
the ability to send network requests.

237
00:13:29.940 --> 00:13:31.588
Seem like there is more to this puzzle.

238
00:13:31.588 --> 00:13:34.934
Seems like we're not out of the woods yet
on this.

239
00:13:34.934 --> 00:13:39.657
We've managed to learn a new API for
sending network requests, right?

240
00:13:39.657 --> 00:13:43.165
And this API is foundational
to the next piece, but it is,

241
00:13:43.165 --> 00:13:45.679
again, we've been building up slowly.

242
00:13:45.679 --> 00:13:48.847
We understand that this idea of work
doesn't work on another thread.

243
00:13:48.847 --> 00:13:53.329
We understand this idea of using Fetch
to do low level network requests.

244
00:13:53.329 --> 00:13:55.604
Right, we understand this
idea of a Promise API.

245
00:13:55.604 --> 00:13:58.567
We've been building up and
building up and building up, right?

246
00:13:58.567 --> 00:14:01.589
And now it's the point we can actually
get to what I like to think of as

247
00:14:01.589 --> 00:14:03.880
the crown jewel of
progressive web applications.

