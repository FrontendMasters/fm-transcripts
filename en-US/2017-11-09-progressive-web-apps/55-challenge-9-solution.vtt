WEBVTT

1
00:00:00.290 --> 00:00:04.490
&gt;&gt; Mike North: So we're gonna go through
the solution to handling dynamic data and

2
00:00:04.490 --> 00:00:09.240
at the end of this, we're only
going to be left with index.html.

3
00:00:09.240 --> 00:00:13.960
We'll have some offline support for
everything except that.

4
00:00:13.960 --> 00:00:18.280
And that will be the last piece of
the puzzle that will get us to the point

5
00:00:18.280 --> 00:00:21.350
where we can turn our network
connection completely off and

6
00:00:21.350 --> 00:00:25.430
our app will still work as
we're used to seeing it.

7
00:00:25.430 --> 00:00:29.840
So the first thing I'm gonna

8
00:00:29.840 --> 00:00:34.270
start with here is the code.

9
00:00:34.270 --> 00:00:38.290
The first thing I'm gonna start
with here is I want to design

10
00:00:38.290 --> 00:00:41.150
something that handles
the API/Chase on here.

11
00:00:41.150 --> 00:00:45.260
Design a check that lets me
know as a request is coming in,

12
00:00:45.260 --> 00:00:46.810
what are we working with here?

13
00:00:46.810 --> 00:00:50.140
Is it JSON for an API?

14
00:00:50.140 --> 00:00:56.270
So the first thing I wanna do is,
I'm actually gonna do a sort of

15
00:00:56.270 --> 00:01:00.820
basic solution that solves this exercise
and I'm gonna enhance it one step further.

16
00:01:00.820 --> 00:01:04.710
Not introducing a new concept but
just being a little bit more thorough so

17
00:01:04.710 --> 00:01:09.280
I can get those grocery images as well,
cache them as we see them, right?

18
00:01:11.100 --> 00:01:18.600
So what I'm gonna do is I'll change
this variable name, is from API,

19
00:01:18.600 --> 00:01:23.720
and this makes it actually easy to
figure out what the solution here is.

20
00:01:23.720 --> 00:01:28.190
We're going to just look at the request,
path name.

21
00:01:28.190 --> 00:01:31.571
And instead of checking for images,

22
00:01:31.571 --> 00:01:35.940
I'm just gonna check for local host 3100.

23
00:01:35.940 --> 00:01:39.500
Anything coming from the API,
I'm just going to cash it.

24
00:01:39.500 --> 00:01:44.490
So basically like, and by the way,
this API is serving up the images as well.

25
00:01:44.490 --> 00:01:45.370
So this would be fine.

26
00:01:45.370 --> 00:01:48.880
And you can make this as
complex as necessary.

27
00:01:49.950 --> 00:01:54.970
Maybe you've got a CDN for your images,
your API is somewhere else, but

28
00:01:54.970 --> 00:01:59.680
oftentimes you want to treat
dynamic data all the same way,

29
00:01:59.680 --> 00:02:03.870
be it JSON or URLs to images
that are held somewhere else.

30
00:02:03.870 --> 00:02:08.854
You want those images that
are referred to by some database

31
00:02:08.854 --> 00:02:11.160
record to be treated like data.

32
00:02:12.890 --> 00:02:16.810
So now, down here we say,
if we're coming from the API,

33
00:02:16.810 --> 00:02:20.120
we're going to proceed
into this function here,

34
00:02:21.610 --> 00:02:27.450
fetch API data with fallback and
that's up here.

35
00:02:27.450 --> 00:02:30.760
So essentially like we've
wired up this placeholder and

36
00:02:30.760 --> 00:02:32.900
now our job is to flesh it up.

37
00:02:34.480 --> 00:02:41.910
And it's gonna involve opening this
cache and it's useful to kind of

38
00:02:41.910 --> 00:02:46.040
make this the outer promise because there
are two things that might happen here.

39
00:02:47.440 --> 00:02:51.650
We might reach into the cache because
we wanna serve a cache response like

40
00:02:51.650 --> 00:02:53.560
in the event that we're offline.

41
00:02:53.560 --> 00:02:56.617
And in the event that we're online,

42
00:02:56.617 --> 00:03:01.750
we're always writing over
slightly older data in the cache.

43
00:03:01.750 --> 00:03:05.384
We're always keeping
that entry up to date.

44
00:03:05.384 --> 00:03:09.490
So regardless, if we enter this function,
we're going to need that cache.

45
00:03:09.490 --> 00:03:12.124
So it makes sense to sort
of start by opening that.

46
00:03:13.617 --> 00:03:15.840
&gt;&gt; Mike North: So I'm actually
gonna put all of this in here.

47
00:03:15.840 --> 00:03:18.480
It's gonna sort of be one
promise that starts there.

48
00:03:20.270 --> 00:03:22.860
And there are a couple
different ways to do this.

49
00:03:22.860 --> 00:03:27.260
But we're gonna leave this cache alone for
the moment.

50
00:03:29.677 --> 00:03:36.270
&gt;&gt; Mike North: Now,
&gt;&gt; Mike North: The next

51
00:03:36.270 --> 00:03:41.770
thing we wanna do is we have to
attempt to make a fetch, right?

52
00:03:41.770 --> 00:03:45.000
So we have a BiOS for fresh new data.

53
00:03:45.000 --> 00:03:49.510
The only fall back in the event
that that doesn't work out, and

54
00:03:49.510 --> 00:03:56.640
we're going to,
we wanna fetch something send fetch out.

55
00:03:56.640 --> 00:04:01.117
Now in order to do that we need
the request, so now I'm just going to,

56
00:04:01.117 --> 00:04:04.996
looks like i'm passing the whole event in,
that's fine.

57
00:04:08.911 --> 00:04:11.438
&gt;&gt; Mike North: And I always like to
rename things like fetch event here,

58
00:04:11.438 --> 00:04:13.870
so we know like what kind of
event we're working with.

59
00:04:13.870 --> 00:04:16.740
There's several different flavors
of events in a service worker.

60
00:04:18.000 --> 00:04:20.560
Good to leave yourself clues and
bread crumbs.

61
00:04:21.650 --> 00:04:25.170
All right, so this is gonna end
up sending this request out, and

62
00:04:25.170 --> 00:04:25.940
what we're gonna get,

63
00:04:27.620 --> 00:04:31.040
what's gonna happen is we've got three
scenarios that we need to worry about.

64
00:04:31.040 --> 00:04:35.700
First is a successful response
in which case proceed.

65
00:04:36.970 --> 00:04:44.140
The next is a response
that is not successful,

66
00:04:44.140 --> 00:04:47.990
so that's still in the dark thin callback,
the promise handler.

67
00:04:49.130 --> 00:04:53.850
And the third situation
is the network is down.

68
00:04:53.850 --> 00:04:55.420
And there clearly we want to fall back.

69
00:04:57.170 --> 00:05:02.500
And for now, I'm gonna kinda ignore
the possibility that we might hit

70
00:05:03.510 --> 00:05:10.510
a 404 or
something with this kind of request.

71
00:05:10.510 --> 00:05:12.510
We're gonna have to fix
that later in order for

72
00:05:12.510 --> 00:05:17.830
our fallback images to work, but I'm just
gonna try to incrementally get there.

73
00:05:17.830 --> 00:05:24.859
So this is gonna return a response or
result to a response.

74
00:05:26.670 --> 00:05:33.180
And then, of course, we have our
cache which is gonna have some error.

75
00:05:33.180 --> 00:05:40.380
A quick side note, the errors that you
will catch here are often not useful for

76
00:05:40.380 --> 00:05:44.820
security reasons, so often it'll just say,

77
00:05:44.820 --> 00:05:50.470
the fetch was not successful which
that doesn't add any information.

78
00:05:50.470 --> 00:05:51.250
&gt;&gt; Speaker 2: The fetch
failed [CROSSTALK].

79
00:05:51.250 --> 00:05:54.473
&gt;&gt; Mike North: The fetch failed,
and the reason is,

80
00:05:54.473 --> 00:05:59.007
when we talk about an opaque response,
for example,

81
00:05:59.007 --> 00:06:06.560
you're not even entitled as the developer
of this app to know why that failed.

82
00:06:06.560 --> 00:06:08.354
Is it like a security issue?

83
00:06:08.354 --> 00:06:11.389
Is it that the Internet is down?

84
00:06:11.389 --> 00:06:14.535
All you know is you either
were not allowed to or

85
00:06:14.535 --> 00:06:20.690
circumstances prevented this operation
from completing one way or the other.

86
00:06:20.690 --> 00:06:24.240
So that's why I don't normally in
a catch you would not wanna just

87
00:06:24.240 --> 00:06:29.340
omit this argument here but
it's just generally useless.

88
00:06:29.340 --> 00:06:33.290
And that you know when this callback is
called, that the fetch did not succeed.

89
00:06:34.930 --> 00:06:42.966
All right, so in this case we're
just gonna return the response.

90
00:06:49.173 --> 00:06:51.280
&gt;&gt; Mike North: And
let me pause here for a moment.

91
00:06:51.280 --> 00:06:55.030
Instead of walking into a problem here,
I foresee one coming.

92
00:06:55.030 --> 00:06:59.990
So if we remember dealing with response
bodies, they're sort of disposable.

93
00:06:59.990 --> 00:07:01.560
You can only use them once.

94
00:07:01.560 --> 00:07:05.023
If I were to do this,
&gt;&gt; Mike North: And

95
00:07:05.023 --> 00:07:09.940
then try this,
&gt;&gt; Mike North: This line here would

96
00:07:09.940 --> 00:07:13.877
fail because I've already
consumed this response.

97
00:07:13.877 --> 00:07:16.620
I've sort of taken this raw data and
decoded it.

98
00:07:16.620 --> 00:07:19.460
I'm not entitled to go
about doing that again.

99
00:07:19.460 --> 00:07:22.500
And in this case,
we wanna use this response in two ways.

100
00:07:22.500 --> 00:07:24.650
Number one, return it to the app.

101
00:07:24.650 --> 00:07:27.550
Number two,
make sure it goes into our cache.

102
00:07:27.550 --> 00:07:29.428
So here's how we'll do that.

103
00:07:33.748 --> 00:07:37.775
&gt;&gt; Mike North: There's
our cloned response and

104
00:07:37.775 --> 00:07:42.530
then here we can say cache put request.

105
00:07:49.034 --> 00:07:50.518
&gt;&gt; Mike North: And cloned response.

106
00:07:55.030 --> 00:07:56.599
&gt;&gt; Mike North: All right, so.

107
00:07:57.870 --> 00:08:01.000
Let's add some comments so
we can describe what's going on here.

108
00:08:01.000 --> 00:08:06.395
Clone response so
we can return one and store one.

109
00:08:07.700 --> 00:08:10.438
&gt;&gt; Mike North: And here,
we're gonna use this put function,

110
00:08:10.438 --> 00:08:14.660
this is the first time we actually
experience it and written in code.

111
00:08:14.660 --> 00:08:16.960
Now you could have done cache.add.

112
00:08:16.960 --> 00:08:21.130
But that would have been
slightly less efficient in that

113
00:08:21.130 --> 00:08:22.750
a new request would go out.

114
00:08:22.750 --> 00:08:24.890
It's sort of like you're passing it a URL,

115
00:08:24.890 --> 00:08:30.122
acting as if we hadn't already
fetched that data a moment ago.

116
00:08:30.122 --> 00:08:33.546
Unlike,
&gt;&gt; Mike North: That would work,

117
00:08:33.546 --> 00:08:35.566
it is not optimal.

118
00:08:35.566 --> 00:08:39.610
So instead we're gonna use put, and
that's almost like you're gonna say,

119
00:08:39.610 --> 00:08:41.600
here's the request I sent out and

120
00:08:41.600 --> 00:08:45.190
the response I get back,
just put those in the cache directly.

121
00:08:45.190 --> 00:08:47.574
Don't bother doing the work
to fetch it fresh again.

122
00:08:50.770 --> 00:08:53.876
&gt;&gt; Mike North: Put the clonedResponse and

123
00:08:53.876 --> 00:08:58.023
request,
&gt;&gt; Mike North: In the cache, and

124
00:08:58.023 --> 00:09:00.333
then return the original.

125
00:09:03.800 --> 00:09:05.810
&gt;&gt; Mike North: In the event
that something goes wrong,

126
00:09:14.029 --> 00:09:16.058
&gt;&gt; Mike North: We're going to just go into

127
00:09:16.058 --> 00:09:19.970
this same cache and
take this request and match it.

128
00:09:19.970 --> 00:09:22.620
So hopefully that'll work.

129
00:09:22.620 --> 00:09:26.470
If there's something there,
it should work for us.

130
00:09:26.470 --> 00:09:30.550
Let's take a look at how
this ends up working out.

131
00:09:30.550 --> 00:09:35.672
First let's start up the server.

132
00:09:46.477 --> 00:09:51.600
&gt;&gt; Mike North: Okay, so we're getting
some errors here but this is fine.

133
00:09:51.600 --> 00:09:58.120
One is just a warning here,
the other is a 404 that we expect, right?

134
00:09:58.120 --> 00:10:00.910
That's our grocery image here.

135
00:10:00.910 --> 00:10:03.170
And if we look in our application tab and

136
00:10:03.170 --> 00:10:06.714
on the left go all the way down
to Cache and Cache Storage.

137
00:10:06.714 --> 00:10:10.015
Refresh it, open it up.

138
00:10:12.020 --> 00:10:16.276
&gt;&gt; Mike North: I expected, we've probably
got a Service Worker waiting to activate.

139
00:10:16.276 --> 00:10:17.219
No?

140
00:10:24.049 --> 00:10:25.261
&gt;&gt; Mike North: I'll take another look.

141
00:10:30.219 --> 00:10:31.820
&gt;&gt; Mike North: All my files are saved.

142
00:10:35.440 --> 00:10:37.839
&gt;&gt; Mike North: Save Fallback.

143
00:10:42.893 --> 00:10:47.985
&gt;&gt; Mike North: Interesting, you know
it's possible this is never triggering.

144
00:10:49.640 --> 00:10:53.459
&gt;&gt; Mike North: Let's make sure that our
little checker boolean is doing what it's

145
00:10:53.459 --> 00:10:54.739
supposed to be doing.

146
00:10:57.768 --> 00:11:01.470
&gt;&gt; Mike North: Never hit that break point,
interesting.

147
00:11:01.470 --> 00:11:07.948
So request URL path name
index of local host 3100.

148
00:11:07.948 --> 00:11:10.254
[LAUGH] There we go, that was the problem.

149
00:11:12.859 --> 00:11:15.427
&gt;&gt; Mike North: The path name is
just after the origin, right, so

150
00:11:15.427 --> 00:11:17.944
that would never contain the word,
local host.

151
00:11:19.260 --> 00:11:27.140
&gt;&gt; Mike North: And at this point,
activated and running, caches, refresh.

152
00:11:27.140 --> 00:11:28.590
Should have three in there now, we don't.

153
00:11:40.980 --> 00:11:42.399
&gt;&gt; Mike North: That was
probably the problem too.

154
00:11:46.546 --> 00:11:47.380
&gt;&gt; Mike North: Here we go.

155
00:11:47.380 --> 00:11:50.621
So it's from the API,
here's the event, and

156
00:11:50.621 --> 00:11:54.509
the request is,
&gt;&gt; Mike North: Cart items,

157
00:11:54.509 --> 00:11:57.690
we're looking for
the JSON for the cart items.

158
00:11:57.690 --> 00:12:00.120
Okay, we've straightened that out.

159
00:12:00.120 --> 00:12:03.450
And now hopefully you're seeing
debugging Service Worker is

160
00:12:03.450 --> 00:12:05.500
not harder than debugging your own code.

161
00:12:05.500 --> 00:12:10.870
You can set break points, you can use the
console to fit it around, you can sort of,

162
00:12:10.870 --> 00:12:15.600
with this little drop down here, you can
shift between the activated installed

163
00:12:15.600 --> 00:12:20.194
service worker and
you call functions directly.

164
00:12:20.194 --> 00:12:22.602
It's really pretty simple.

165
00:12:24.227 --> 00:12:25.869
&gt;&gt; Mike North: Okay?

166
00:12:25.869 --> 00:12:26.863
&gt;&gt; Mike North: Now, what's going on?

167
00:12:28.199 --> 00:12:30.660
&gt;&gt; Mike North: So I bet we're cached here.

168
00:12:30.660 --> 00:12:34.050
I suspect that this is
a cache logic error.

169
00:12:34.050 --> 00:12:36.654
So I think we'll see three here,
we still see two.

170
00:12:38.410 --> 00:12:42.899
&gt;&gt; Mike North: There it is, Service
Workers waiting to activate, there we go.

171
00:12:45.759 --> 00:12:50.780
&gt;&gt; Mike North: Finally Fallback cache,
and here are all my different URLs.

172
00:12:50.780 --> 00:12:54.056
They are API calls, right?

173
00:12:54.056 --> 00:12:58.317
And,
&gt;&gt; Mike North: Now,

174
00:12:59.459 --> 00:13:00.589
&gt;&gt; Mike North: If all is working,

175
00:13:00.589 --> 00:13:04.240
I can actually,
I wanna see if I can demonstrate this.

176
00:13:04.240 --> 00:13:06.330
It's an idea from
a student in the room here.

177
00:13:07.600 --> 00:13:11.240
So I've stopped the server, and I'm
only going to start the UI portion up so

178
00:13:11.240 --> 00:13:13.510
it will still serve up index start HTML.

179
00:13:14.940 --> 00:13:22.518
But our JSON API is going away, and
my hope is this will still work.

180
00:13:24.609 --> 00:13:29.760
&gt;&gt; Mike North: So npm run watch, that's
just the browser UI portion of things.

181
00:13:29.760 --> 00:13:35.413
If I refresh this,
&gt;&gt; Mike North: Hey,

182
00:13:35.413 --> 00:13:40.770
hey, it looks a little different,
but the data is there.

183
00:13:40.770 --> 00:13:41.695
Why does this look different.

184
00:13:44.090 --> 00:13:45.260
&gt;&gt; Mike North: Any ideas?

185
00:13:45.260 --> 00:13:46.790
Why am I not seeing my images?

186
00:13:46.790 --> 00:13:48.230
&gt;&gt; Speaker 2: Because
your server's offline.

187
00:13:48.230 --> 00:13:49.245
&gt;&gt; Mike North: My server's offline.

188
00:13:51.329 --> 00:13:56.261
&gt;&gt; Mike North: So we can,
&gt;&gt; Mike North: The server's offline, and

189
00:13:56.261 --> 00:13:59.326
I had not added those images to the cache.

190
00:13:59.326 --> 00:14:04.019
Now,
&gt;&gt; Mike North: I can enhance this a little

191
00:14:04.019 --> 00:14:08.890
bit, and I'm wanna have kill this and
start the API backup.

192
00:14:08.890 --> 00:14:13.340
So basically like what's happening here,
is grocery images are handled here,

193
00:14:14.940 --> 00:14:17.520
and then sort of the next level we go and

194
00:14:17.520 --> 00:14:21.230
start checking is,
are we coming from an API?

195
00:14:21.230 --> 00:14:27.510
So what we can do is, because we're
working with functions that return

196
00:14:29.110 --> 00:14:33.960
promises that resolve to responses,
they're like

197
00:14:33.960 --> 00:14:39.790
responses to be, we can actually
compose these together quite nicely.

198
00:14:39.790 --> 00:14:43.395
And if I were to take this boolean here,

199
00:14:43.395 --> 00:14:50.410
move it into fetchApiDataWithFallback,
we need to accept header as well.

200
00:14:56.730 --> 00:15:02.240
&gt;&gt; Mike North: And
we're gonna leave that right there.

201
00:15:02.240 --> 00:15:09.520
And so, here basically we need some
special treatment around the fetch.

202
00:15:09.520 --> 00:15:13.795
So, here we can say,

203
00:15:18.930 --> 00:15:22.246
&gt;&gt; Mike North: If it is a GroceryImage &amp;&amp;

204
00:15:22.246 --> 00:15:27.002
the response is not ok, we're going to

205
00:15:27.002 --> 00:15:32.564
return,
&gt;&gt; Mike North: Actually

206
00:15:32.564 --> 00:15:33.901
that logic's already built into this.

207
00:15:37.099 --> 00:15:40.870
&gt;&gt; Mike North: This is just a special
kind of fetch, which is actually great.

208
00:15:40.870 --> 00:15:43.111
So I can refactor this even better.

209
00:15:45.851 --> 00:15:50.150
&gt;&gt; Mike North: I'm gonna grab this,
fetchImageOrFall back.

210
00:15:50.150 --> 00:15:54.760
Collapse this down, so now all Api
related stuff goes down the same path.

211
00:15:55.970 --> 00:16:04.029
And up here we can say [BLANK
AUDIO] Fetch promise equals.

212
00:16:04.029 --> 00:16:09.819
It's like if it's a grocery
image that otherwise this.

213
00:16:09.819 --> 00:16:14.470
[BLANK AUDIO] I will straighten
this out a little bit.

214
00:16:14.470 --> 00:16:18.500
So if you're not familiar with this,
this is just a ternary operator.

215
00:16:18.500 --> 00:16:19.854
It's sort of an if else.

216
00:16:19.854 --> 00:16:24.660
So if this is a grocery image,
we are going to do this.

217
00:16:24.660 --> 00:16:29.732
Which has baked into it this idea of
trying the image first, falling back.

218
00:16:29.732 --> 00:16:32.676
Otherwise, we're just going
to do a normal fetch.

219
00:16:32.676 --> 00:16:35.920
And we can kinda wire that up here and

220
00:16:35.920 --> 00:16:40.362
have all of our existing
logic carry off of that.

221
00:16:42.194 --> 00:16:44.173
&gt;&gt; Mike North: So let's try again.

222
00:16:45.961 --> 00:16:49.156
&gt;&gt; Mike North: Actually, let me make
sure my new service worker gets

223
00:16:49.156 --> 00:16:52.500
loaded up here before we kinda
simulate the API outage.

224
00:16:58.560 --> 00:17:00.327
&gt;&gt; Mike North: And
we've got a couple problems.

225
00:17:00.327 --> 00:17:01.458
Let's see.

226
00:17:11.640 --> 00:17:13.494
&gt;&gt; Mike North: This request failed.

227
00:17:20.090 --> 00:17:21.323
&gt;&gt; Mike North: In _restoreCart.

228
00:17:21.323 --> 00:17:22.900
Cuz why?

229
00:17:33.700 --> 00:17:36.072
&gt;&gt; Mike North: Lemme just set a break
point in here to see what's going on.

230
00:17:51.475 --> 00:17:54.573
&gt;&gt; Mike North: Clear our storage out,
make sure everything is good.

231
00:17:55.830 --> 00:17:57.491
&gt;&gt; Mike North: All right,
so that's number one.

232
00:17:59.422 --> 00:18:03.578
&gt;&gt; Mike North: All right, so we never get
this response handler here, interesting.

233
00:18:08.739 --> 00:18:09.724
&gt;&gt; Mike North: There we go.

234
00:18:12.273 --> 00:18:15.732
&gt;&gt; Mike North: fetchEvent.request, so
I had a little syntax error there.

235
00:18:26.799 --> 00:18:31.180
&gt;&gt; Mike North: So
cannot read property indexOf of undefined.

236
00:18:31.180 --> 00:18:37.050
That is coming from here is grocery image.

237
00:18:37.050 --> 00:18:40.622
acceptHeader has to be
defined above isGroceryImage,

238
00:18:40.622 --> 00:18:43.054
cuz with let we don't have hoisting.

239
00:18:47.332 --> 00:18:48.920
&gt;&gt; Mike North: And
this has to be a fetchEvent.

240
00:18:51.206 --> 00:18:52.691
&gt;&gt; Mike North: Instead of just an event.

241
00:18:54.206 --> 00:18:56.525
&gt;&gt; Mike North: Now,
we're hitting this debugger, okay.

242
00:19:16.550 --> 00:19:21.100
&gt;&gt; Mike North: Okay, so it looks like it's
not interfering with the JSON anymore.

243
00:19:21.100 --> 00:19:23.690
So those responses are coming back.

244
00:19:23.690 --> 00:19:27.540
All of my images are still unhappy.

245
00:19:27.540 --> 00:19:31.701
So those requests are failed
because requestsUrl is not defined.

246
00:19:34.368 --> 00:19:35.865
&gt;&gt; Mike North: I am using that.

247
00:19:40.421 --> 00:19:42.498
&gt;&gt; Mike North: There's request URL.

248
00:19:43.567 --> 00:19:44.223
&gt;&gt; Mike North: Up here.

249
00:19:45.896 --> 00:19:47.678
&gt;&gt; Mike North: So
I need to just copy this over.

250
00:20:04.286 --> 00:20:07.409
&gt;&gt; Mike North: Event has to
be changed to fetchEvent.

251
00:20:16.455 --> 00:20:19.854
&gt;&gt; Mike North: All right, now we're
starting to get a little bit closer.

252
00:20:29.239 --> 00:20:33.180
&gt;&gt; Mike North: So I want to dive
into the images to make sure.

253
00:20:33.180 --> 00:20:35.640
Obviously, they're not
coming through here.

254
00:20:35.640 --> 00:20:40.735
I want to make sure we're getting
those where we should be getting them.

255
00:20:40.735 --> 00:20:43.263
So [INAUDIBLE] request.

256
00:20:43.263 --> 00:20:45.146
That looks correct.

257
00:20:46.947 --> 00:20:52.356
&gt;&gt; Speaker 2: Is gGroceryImage,
is that condition [INAUDIBLE] condition?

258
00:20:52.356 --> 00:20:54.054
&gt;&gt; Mike North: Yes, that could be.

259
00:20:55.300 --> 00:20:57.085
&gt;&gt; Mike North: Except header.

260
00:20:57.085 --> 00:20:59.240
So I can set a conditional break point for
that.

261
00:21:09.827 --> 00:21:15.794
&gt;&gt; Mike North: All right, so here we go,
and we've got a promise, and it's pending.

262
00:21:31.453 --> 00:21:34.628
&gt;&gt; Mike North: I just want to get
rid of one of those break points.

263
00:21:36.733 --> 00:21:37.680
&gt;&gt; Mike North: That one.

264
00:21:53.420 --> 00:21:55.098
&gt;&gt; Mike North: All right,
turn this back on.

265
00:21:57.206 --> 00:21:58.008
&gt;&gt; Mike North: Interesting.

266
00:21:58.008 --> 00:22:01.386
So that is never getting hit.

267
00:22:03.799 --> 00:22:05.798
&gt;&gt; Mike North: And
cache is not getting hit either.

268
00:22:08.302 --> 00:22:09.660
&gt;&gt; Speaker 2: The condition is wrong.

269
00:22:09.660 --> 00:22:11.836
&gt;&gt; Mike North: You think
the condition's wrong?

270
00:22:11.836 --> 00:22:15.826
&gt;&gt; Speaker 2: Yeah, after the ampersand,

271
00:22:15.826 --> 00:22:20.933
now go to the far right, that should be

272
00:22:20.933 --> 00:22:26.110
larger than 0, large or equal to.

273
00:22:26.110 --> 00:22:27.890
&gt;&gt; Mike North: Greater than or equal to.

274
00:22:27.890 --> 00:22:30.237
But the path name should still.

275
00:22:32.590 --> 00:22:35.192
&gt;&gt; Mike North: You should end up
with exactly 0 there, in theory.

276
00:22:42.323 --> 00:22:44.229
&gt;&gt; Mike North: Well,
I don't know what's going on here, but

277
00:22:44.229 --> 00:22:45.760
this was sort of an optimization.

278
00:22:45.760 --> 00:22:48.550
So I'm just gonna go ahead and
put this fetch back here

279
00:22:49.890 --> 00:22:54.770
to something that is hard to figure
out on the fly for some reason.

280
00:22:54.770 --> 00:22:56.739
So when I put this back,

281
00:22:56.739 --> 00:23:02.158
now we're letting images be
handled with the typical fallback.

282
00:23:02.158 --> 00:23:05.456
I'm not editing my code,
I'm editing it in the browser.

283
00:23:06.524 --> 00:23:09.057
&gt;&gt; Mike North: So
I'm just gonna back all this out so

284
00:23:09.057 --> 00:23:14.389
that I have those two different ways of
handling it inside the fetch handler.

285
00:23:16.689 --> 00:23:17.708
&gt;&gt; Mike North: Right here.

286
00:23:21.004 --> 00:23:23.360
&gt;&gt; Mike North: Which is fine,
we've just got fallback images.

287
00:23:23.360 --> 00:23:25.770
And that's one of the benefits
of having them there.

288
00:23:25.770 --> 00:23:27.410
Okay, so here, we're online.

289
00:23:27.410 --> 00:23:31.550
And if I kill the API again,
npm run watch.

290
00:23:31.550 --> 00:23:34.310
So now, we're just running the UI,
refresh.

291
00:23:35.664 --> 00:23:37.195
&gt;&gt; Mike North: It's just
building the UI right now.

292
00:23:45.295 --> 00:23:47.120
&gt;&gt; Mike North: Now it's
failing to fetch other things.

293
00:23:54.240 --> 00:23:55.140
&gt;&gt; Mike North: Interesting.

294
00:23:57.250 --> 00:24:00.462
All right, I'm just gonna
keep dragging this down here,

295
00:24:00.462 --> 00:24:03.953
so,
&gt;&gt; Mike North: If I look in my cache,

296
00:24:03.953 --> 00:24:07.960
I wanna make sure that
I've got stuff in there to

297
00:24:07.960 --> 00:24:12.279
satisfy those responses,
and my fallback cache.

298
00:24:13.280 --> 00:24:18.620
And I do, I see new stuff is being added,
those might be the images, and they are.

299
00:24:18.620 --> 00:24:22.464
I'm just gonna increment my cache,
just so I kind of blow it all away, and

300
00:24:22.464 --> 00:24:24.520
kinda get a chance to start fresh here.

301
00:24:26.852 --> 00:24:30.611
&gt;&gt; Mike North: And
I need the API to be running for that.

302
00:24:43.340 --> 00:24:45.707
&gt;&gt; Mike North: Okay, so
now I want to look into cache storage.

303
00:24:46.780 --> 00:24:47.490
Interesting.

304
00:24:49.980 --> 00:24:52.319
So I don't have my fallback
cache at all there.

305
00:24:56.090 --> 00:24:59.875
&gt;&gt; Mike North: Maybe, so it deleted my
old caches, let me make sure that my

306
00:24:59.875 --> 00:25:05.020
function here is still wired up as
it should be, and my service worker.

307
00:25:05.020 --> 00:25:09.979
So the one that we have been spending
time in, FetchApiDataWithCallback,

308
00:25:09.979 --> 00:25:11.687
there we go, is from API.

309
00:25:11.687 --> 00:25:14.299
Maybe I backed out, yep, there it is.

310
00:25:14.299 --> 00:25:20.140
I backed out my original fix for
that first problem.

311
00:25:24.889 --> 00:25:28.069
&gt;&gt; Mike North: And
now I think we'll be in a good state.

312
00:25:42.960 --> 00:25:47.510
&gt;&gt; Mike North: I might be
frozen at a breakpoint, I am.

313
00:25:47.510 --> 00:25:48.010
Okay?

314
00:25:48.010 --> 00:25:50.150
So there we are, and now.

315
00:25:51.460 --> 00:25:56.210
Let's try our one last attempt
to prove that this works.

316
00:26:02.840 --> 00:26:03.880
&gt;&gt; Mike North: There we go.

317
00:26:03.880 --> 00:26:09.020
Okay, so the JSON data is cached, that's
why we're seeing these grocery items here.

318
00:26:09.020 --> 00:26:15.100
The images are not, but we're falling back
to something a little bit more reasonable.

319
00:26:15.100 --> 00:26:19.842
Now, a further optimization for
this would be as we do these

320
00:26:19.842 --> 00:26:25.400
fallback images, as we go and
fetch the real ones successfully,

321
00:26:25.400 --> 00:26:29.960
we would want to put those in the same
fallback cache along with the JSON.

322
00:26:29.960 --> 00:26:33.190
And then our app would
be none the wiser that

323
00:26:33.190 --> 00:26:36.810
those were showing up instead of
the fallback images where it's possible.

324
00:26:36.810 --> 00:26:39.606
Right now we're getting
that 154 error count?

325
00:26:39.606 --> 00:26:45.940
Largely, that's 404's for the images, but
our app is not failing because of those.

326
00:26:45.940 --> 00:26:49.310
Those are 404's that are sort of been
handled inside the service work,

327
00:26:49.310 --> 00:26:51.720
our other app was not exposed to them.

328
00:26:51.720 --> 00:26:54.210
So we're getting really close.

329
00:26:54.210 --> 00:26:58.960
We are just index.html away
from this app working offline,

330
00:26:58.960 --> 00:27:03.050
where I'll be able to kill everything
else, close Visual Studio code, and

331
00:27:03.050 --> 00:27:07.240
the app still work, and that is in
fact the next item on our agenda.

