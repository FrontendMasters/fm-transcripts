WEBVTT

1
00:00:00.098 --> 00:00:04.468
&gt;&gt; Mike North: Now that we've had
a little refresher on promises,

2
00:00:04.468 --> 00:00:08.738
we're going to put them to
work in combination with

3
00:00:08.738 --> 00:00:12.930
something that is really powerful idea,
right?

4
00:00:12.930 --> 00:00:19.340
It's been around since i11, but
it is widely underutilized.

5
00:00:19.340 --> 00:00:22.910
So if promises are overutilized and
you see promises everywhere,

6
00:00:22.910 --> 00:00:27.650
even in places where it is potentially
not necessary to use them.

7
00:00:27.650 --> 00:00:28.800
This is,

8
00:00:28.800 --> 00:00:34.480
JavaScript workers are something that
could probably ease a lot of pain in apps.

9
00:00:34.480 --> 00:00:38.270
And people are, to some degree,
either afraid or

10
00:00:38.270 --> 00:00:44.250
not knowledgeable enough to figure out
a way to make this idea work for them.

11
00:00:45.420 --> 00:00:47.600
And here is the general idea.

12
00:00:47.600 --> 00:00:50.610
So JavaScript,
the way it works internally,

13
00:00:50.610 --> 00:00:55.490
you can think of it like a single
really awesome multitasker.

14
00:00:55.490 --> 00:00:59.550
So JavaScript has a great
concurrency story, but

15
00:00:59.550 --> 00:01:02.840
it is one thread that your
program is running on.

16
00:01:02.840 --> 00:01:06.985
And although we can send
out 15 Ajax requests, and

17
00:01:06.985 --> 00:01:11.370
they're all happening,
the browser is kind of taking that ask for

18
00:01:11.370 --> 00:01:15.270
some data at this URL and running with it,
and something's happening.

19
00:01:15.270 --> 00:01:19.035
You can think of that as almost like,
I've set an alarm,

20
00:01:19.035 --> 00:01:23.040
I've set a timer and
it's gonna go off in a couple minutes.

21
00:01:23.040 --> 00:01:27.252
Or I've,
&gt;&gt; Mike North: Ordered something on

22
00:01:27.252 --> 00:01:28.930
the phone and it'll come later.

23
00:01:28.930 --> 00:01:33.290
But at any given time, you're only one
person kicking off all of these things and

24
00:01:33.290 --> 00:01:35.660
then handling them when they complete.

25
00:01:35.660 --> 00:01:39.910
When we talk about parallel programming,
this is the idea, this is like two

26
00:01:39.910 --> 00:01:44.670
multitaskers doing things at the exact
same time in the same moment.

27
00:01:46.060 --> 00:01:48.455
That is the power of JavaScript workers.

28
00:01:48.455 --> 00:01:51.030
So when we create a worker, yes?

29
00:01:51.030 --> 00:01:53.495
&gt;&gt; Speaker 2: Two or n, like?

30
00:01:53.495 --> 00:01:54.197
&gt;&gt; Mike North: n.

31
00:01:54.197 --> 00:01:54.924
&gt;&gt; Speaker 2: Okay.

32
00:01:54.924 --> 00:01:59.280
&gt;&gt; Mike North: When you solve the problem
and you can get two, you can get N.

33
00:01:59.280 --> 00:02:02.990
So moving from one to two
is the big idea here,

34
00:02:02.990 --> 00:02:06.560
or one to n, as you readily point out.

35
00:02:06.560 --> 00:02:13.260
So we basically create a worker using this
worker constructor you see here, right?

36
00:02:13.260 --> 00:02:18.516
And the single argument that we pass to it
is the path where a script can be found,

37
00:02:18.516 --> 00:02:23.158
and this could be a URL, the script
could be it is yet to be downloaded.

38
00:02:23.158 --> 00:02:27.680
But it is sort of a self-contained
world in it and of itself.

39
00:02:27.680 --> 00:02:30.260
And this is good because
you want to have sort of

40
00:02:30.260 --> 00:02:33.990
pretty rigid walls in between these
different things that are running.

41
00:02:33.990 --> 00:02:38.880
For example, you can't really share
scope in between these without

42
00:02:38.880 --> 00:02:43.310
going through a little explicit
passing of information back and forth.

43
00:02:44.790 --> 00:02:47.900
When you create a worker,
you can send messages to it, and

44
00:02:47.900 --> 00:02:51.400
that worker can send messages
back to whatever created it.

45
00:02:51.400 --> 00:02:54.377
And in this case,
we're talking about a dedicated worker.

46
00:02:54.377 --> 00:02:58.600
We will add some nuance to
the problem in a moment.

47
00:02:58.600 --> 00:03:02.530
So this is what your application would
look like if you're creating a worker.

48
00:03:02.530 --> 00:03:08.840
Now, if we take a look at what might
happen inside worker JS, on the right

49
00:03:08.840 --> 00:03:13.930
side of the screen, for completeness,
that first line is just,

50
00:03:13.930 --> 00:03:17.280
we're getting a log function that
is doing our console logging.

51
00:03:17.280 --> 00:03:21.410
So I've made this a complete example,
but that's not meaningful here.

52
00:03:21.410 --> 00:03:26.214
And you can see that we have
a self.onmessage that we're defining, and

53
00:03:26.214 --> 00:03:29.142
we set the value of
onmessage to a function.

54
00:03:29.142 --> 00:03:31.959
And this function will be called whenever

55
00:03:31.959 --> 00:03:37.080
the host application sends something
to the worker via postMessage.

56
00:03:37.080 --> 00:03:40.071
So we send it an object and
it's going to retrieve.

57
00:03:40.071 --> 00:03:44.348
So the onmessage function
will be called with an event,

58
00:03:44.348 --> 00:03:50.718
just like if you've ever hooked up to an
input, an HTML input, you can usually find

59
00:03:50.718 --> 00:03:57.270
that there's this event that represents
some additional meta information.

60
00:03:57.270 --> 00:04:01.250
And on that event,
you can usually find the data of interest,

61
00:04:01.250 --> 00:04:02.660
something that has changed.

62
00:04:02.660 --> 00:04:06.772
So in this case, you'll get a single
argument in onmessage, and you'll just

63
00:04:06.772 --> 00:04:10.968
gonna wanna pluck the data attribute off
of that, and you'll get that object.

64
00:04:10.968 --> 00:04:14.728
And we're gonna console log fit like,
as the worker,

65
00:04:14.728 --> 00:04:19.224
I have received this data, and
in Chrome and in modern browsers,

66
00:04:19.224 --> 00:04:23.990
this will be mixed together with
your host applications log.

67
00:04:23.990 --> 00:04:26.240
You'll see it all there together.

68
00:04:26.240 --> 00:04:29.158
You may see a little gear next to it, and

69
00:04:29.158 --> 00:04:32.620
that represents that
this came from a worker.

70
00:04:32.620 --> 00:04:37.690
I will demonstrate how this works as
we spin up to the first exercise here.

71
00:04:38.790 --> 00:04:46.880
So then within this worker, we're going
to kick off this function doWork.

72
00:04:46.880 --> 00:04:50.290
And the important thing I want you to
see is that we're using setTimeout,

73
00:04:50.290 --> 00:04:53.680
which is available to us inside
the scope of this worker.

74
00:04:53.680 --> 00:04:58.771
And in two seconds, we're gonna take
the string that we were passed,

75
00:04:58.771 --> 00:05:04.662
and we're gonna uppercase it, and then
we're gonna send it back to the parent.

76
00:05:04.662 --> 00:05:10.200
And the parent is going to receive
it on the onmessage function here.

77
00:05:10.200 --> 00:05:14.610
So this is a little clunky,
we wish that this was written with

78
00:05:14.610 --> 00:05:18.851
a promise-based API or
even a true callback-based API.

79
00:05:18.851 --> 00:05:23.686
And you can see here,
we are assigning function values to

80
00:05:23.686 --> 00:05:29.520
special property names,
this seems very old to do it this way.

81
00:05:29.520 --> 00:05:34.640
And the reason is the standard
was invented in 2010, 2009,

82
00:05:34.640 --> 00:05:40.160
and promises were a thing,
it was like a jQuery feature or

83
00:05:40.160 --> 00:05:44.250
a Dojo feature, and
it was not part of the standard.

84
00:05:44.250 --> 00:05:50.994
So it's not all that refined, but
it is still really powerful idea here.

85
00:05:50.994 --> 00:05:56.159
And the power here has to do with the fact
that although computers are getting

86
00:05:56.159 --> 00:06:01.496
faster year over year, if you've ever
heard of this concept of Moore's law.

87
00:06:01.496 --> 00:06:06.373
It basically says like, over time,
the number of semiconductors we can pack

88
00:06:06.373 --> 00:06:09.970
into a chip,
I believe it doubles every seven years.

89
00:06:09.970 --> 00:06:14.166
The problem now is we're getting 10,
12 cores,

90
00:06:14.166 --> 00:06:17.895
the new Mac Pros,
they have 18 cores on them,

91
00:06:17.895 --> 00:06:22.668
and JavaScript can only run on
one of those at any given time.

92
00:06:22.668 --> 00:06:26.180
Your application is running on
one-eighteenth of that processor.

93
00:06:26.180 --> 00:06:33.170
And the ability to put things onto other
cores is an important way that JavaScript

94
00:06:33.170 --> 00:06:36.930
can kind of step forward, and then we can
take advantage of these advancements.

95
00:06:36.930 --> 00:06:40.140
So we're sort of scaling horizontally
at this point and not vertically.

96
00:06:40.140 --> 00:06:42.810
And it's really important that,
as a programming language,

97
00:06:42.810 --> 00:06:46.860
to stay relevant, we learn to take
advantage of all that unused capacity.

