WEBVTT

1
00:00:00.480 --> 00:00:03.430
&gt;&gt; Mike: As we start working with
these things, and as we move on and

2
00:00:03.430 --> 00:00:06.060
talk about the third
type of service workers,

3
00:00:06.060 --> 00:00:09.930
you'll notice that there are lots
of things that we can't do.

4
00:00:09.930 --> 00:00:14.400
And this is in order to make it so
that we are set up for

5
00:00:14.400 --> 00:00:19.300
success when building programs that
do multiple things in parallel.

6
00:00:19.300 --> 00:00:24.414
And my background, the first
programming language I learnt was C,

7
00:00:24.414 --> 00:00:28.465
and I brought a lot of
parallel programming in C++.

8
00:00:28.465 --> 00:00:32.043
And the idea there was you could
share state between things,

9
00:00:32.043 --> 00:00:36.533
but there are many places where you'd
basically have to slam on the brakes,

10
00:00:36.533 --> 00:00:38.728
wait for any stragglers to catch up.

11
00:00:38.728 --> 00:00:42.316
Then sync across all of
the processes that are running, and

12
00:00:42.316 --> 00:00:45.490
then you can sort of allow
everyone to push forward.

13
00:00:45.490 --> 00:00:48.260
So if it were a game it would be like

14
00:00:48.260 --> 00:00:53.150
all of the players must finish level
3 before any can proceed to level 4.

15
00:00:53.150 --> 00:00:57.900
And if those players are responsible for
say, allowing you to scroll smoothly

16
00:00:57.900 --> 00:01:03.140
through a webpage, that is now halted and
it's prevented from doing anything.

17
00:01:03.140 --> 00:01:04.900
So that won't work for JavaScript,

18
00:01:04.900 --> 00:01:09.970
and part of what happens here is we have
limitations in terms of what we can do.

19
00:01:09.970 --> 00:01:14.140
So that the majority of
the code that we write

20
00:01:14.140 --> 00:01:16.480
will kind of just work the way
we expect it to work, and

21
00:01:16.480 --> 00:01:21.680
you're not set up to the point where
you can cause deadlocks, for example.

22
00:01:23.390 --> 00:01:26.990
So the first thing you're gonna notice
is anything that has a synchronized API,

23
00:01:26.990 --> 00:01:29.370
like a local storage,
where you can just got an item and

24
00:01:29.370 --> 00:01:33.790
then in the next line of code you have
the value of that item in local stores.

25
00:01:33.790 --> 00:01:36.390
Anything synchronous is off the table.

26
00:01:36.390 --> 00:01:39.890
You cannot touch the DOM,
because that has a synchronous API, and

27
00:01:39.890 --> 00:01:42.650
you cannot touch cookies.

28
00:01:42.650 --> 00:01:46.920
Now, you could use that post
message on message dance

29
00:01:46.920 --> 00:01:51.580
to ask the application to read something
out of the cookie and then send it back.

30
00:01:51.580 --> 00:01:53.300
So there are workarounds, but

31
00:01:53.300 --> 00:01:59.260
you have to ultimately let the main
application thread do the work.

32
00:02:00.400 --> 00:02:05.630
You'll notice that we have properties
available called location and navigator.

33
00:02:07.050 --> 00:02:09.905
And while there are a location and

34
00:02:09.905 --> 00:02:14.285
navigator property on the window object,
these are slightly different.

35
00:02:14.285 --> 00:02:16.295
They're sort of whittled down so

36
00:02:16.295 --> 00:02:19.615
that they only do what you're
allowed to do in service workers.

37
00:02:19.615 --> 00:02:22.515
We do have setInterval and setTimeout,
which are really important, and

38
00:02:22.515 --> 00:02:23.755
we're gonna end up using them.

39
00:02:23.755 --> 00:02:27.475
We have fetch and Promise,
also really important.

40
00:02:27.475 --> 00:02:32.195
And then three things
that facilitate offline

41
00:02:32.195 --> 00:02:37.000
support, realtime pushing of
data from server to client,

42
00:02:37.000 --> 00:02:41.200
and IndexedDB, which we will
get to at the end of tomorrow.

43
00:02:41.200 --> 00:02:44.660
That is a no SQL database
that lives in the browser.

44
00:02:44.660 --> 00:02:46.910
If you've ever used MongoDB,

45
00:02:46.910 --> 00:02:50.830
you have something like MongoDB
in browsers since IE10.

46
00:02:52.410 --> 00:02:56.780
It sends IE11 polyfillable in IE10,
which is pretty amazing.

47
00:02:56.780 --> 00:02:58.760
And the reason indexedDB works and

48
00:02:58.760 --> 00:03:03.230
local storage does not is
indexedDB has an asynchronous API.

49
00:03:03.230 --> 00:03:04.790
So you ask it for data and

50
00:03:04.790 --> 00:03:09.200
provide it a call back which it will
invoke once the data is retrieved.

51
00:03:09.200 --> 00:03:13.196
And that can be managed with
multiple things happening at once.

52
00:03:13.196 --> 00:03:19.350
Basically you can wait for a function

53
00:03:19.350 --> 00:03:23.620
to run to completion and then eventually
get around to invoking that callback.

54
00:03:23.620 --> 00:03:27.360
So you can think of it almost
like local Ajax, right?

55
00:03:27.360 --> 00:03:31.270
You ask for something, and then shortly
after, he will get something back.

