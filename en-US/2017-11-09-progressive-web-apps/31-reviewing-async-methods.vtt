WEBVTT

1
00:00:00.390 --> 00:00:02.580
&gt;&gt; Steve: So we've talked about promises.

2
00:00:02.580 --> 00:00:06.772
We've seen how to use a promise to wrap
something that might be asynchronous,

3
00:00:06.772 --> 00:00:07.414
all right?

4
00:00:07.414 --> 00:00:09.427
And it's interesting,
like Mike was saying,

5
00:00:09.427 --> 00:00:12.160
someone might be like why wouldn't
you send that to the server?

6
00:00:12.160 --> 00:00:14.200
Why are you doing all of
this message to a thread and

7
00:00:14.200 --> 00:00:15.560
get a message back from a thread?

8
00:00:15.560 --> 00:00:17.900
Cuz that is totally different
than sending it to a server.

9
00:00:19.110 --> 00:00:22.050
So [LAUGH] yeah, so
it's the same amount of complexity,

10
00:00:22.050 --> 00:00:25.520
but you do get all of these advantages
of having client side, right?

11
00:00:25.520 --> 00:00:28.050
But sometimes you do
need to talk to a server,

12
00:00:28.050 --> 00:00:32.570
and we're gonna talk about
some patterns for that.

13
00:00:32.570 --> 00:00:39.874
Talking to servers has had a long storied
history in client-side engineering.

14
00:00:39.874 --> 00:00:43.409
Obviously, any time that
you think to yourself,

15
00:00:43.409 --> 00:00:47.289
the web is hard and, or
possibly broken irreparably.

16
00:00:47.289 --> 00:00:52.005
Remember that it is a document viewer from
the 1990s that we turned into the world's

17
00:00:52.005 --> 00:00:54.680
largest distributed platform.

18
00:00:54.680 --> 00:00:57.250
[LAUGH] Just remember that
nobody sold it to us.

19
00:00:57.250 --> 00:01:00.070
So originally, you requested a page,
you got a page.

20
00:01:00.070 --> 00:01:02.360
That was the promise that
Tim Burners-Lee gave you.

21
00:01:02.360 --> 00:01:04.870
Right, and
that's what you got in the early 90s.

22
00:01:06.160 --> 00:01:10.439
Then through some historical oddities,

23
00:01:10.439 --> 00:01:14.229
Microsoft gave us XHRHttpRequest,

24
00:01:14.229 --> 00:01:18.273
a story that I'm happy to share later.

25
00:01:18.273 --> 00:01:23.061
And this gave us the ability to fetch
additional data without dumping out

26
00:01:23.061 --> 00:01:26.132
the entire page and
getting a new one, right?

27
00:01:26.132 --> 00:01:29.326
And this was monumental,
this is a fundamental building

28
00:01:29.326 --> 00:01:32.649
block of the modern web,
that you don't toss out the entire

29
00:01:32.649 --> 00:01:37.130
page you had just to see if there's a new
email, or anything along those lines.

30
00:01:37.130 --> 00:01:41.270
But hey, ask the server anything new,
get it, put it on the page.

31
00:01:41.270 --> 00:01:43.750
It's the reason that you
have things like JML.

32
00:01:43.750 --> 00:01:47.670
You have almost all, well, we think
of web applications rather than pages

33
00:01:47.670 --> 00:01:52.470
are built on top of this horrid API.

34
00:01:52.470 --> 00:01:55.860
So this is the ancient way, and
if you've never seen this, one,

35
00:01:55.860 --> 00:01:57.290
thank your lucky stars.

36
00:01:57.290 --> 00:01:59.825
Because as soon as we could come up
with an abstraction around this we

37
00:01:59.825 --> 00:02:00.880
stopped doing it.

38
00:02:00.880 --> 00:02:05.990
But what you do is you
create a new XMLHttpRequest.

39
00:02:05.990 --> 00:02:07.300
Don't worry if you're getting JSON or

40
00:02:07.300 --> 00:02:11.660
anything else, it's an XMLHttpRequest,
cuz that was good naming.

41
00:02:11.660 --> 00:02:16.060
You would then open it with the method and
the URL that you wanted to retrieve.

42
00:02:16.060 --> 00:02:19.792
You would then set the response type,
and then you'd add two event listeners,

43
00:02:19.792 --> 00:02:23.860
an onload event listener, and
an onerror event listener.

44
00:02:23.860 --> 00:02:27.700
And you're arguing like hey,
it looks like you're using

45
00:02:27.700 --> 00:02:32.460
a feature from the early mid-2000s and
ES6 at the same time.

46
00:02:32.460 --> 00:02:33.762
It's hard to get all of this on a slide.

47
00:02:33.762 --> 00:02:35.168
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Steve: And

48
00:02:35.168 --> 00:02:39.089
then after you added all those event
listeners, you would go ahead and send it,

49
00:02:39.089 --> 00:02:42.660
which would then call one of
the above written event listeners.

50
00:02:42.660 --> 00:02:44.110
And you would write all
these lines every time.

51
00:02:45.490 --> 00:02:48.776
And so over time we've came up with
patterns to abstract around those,

52
00:02:48.776 --> 00:02:50.989
the first being the call back pattern,
right?

53
00:02:50.989 --> 00:02:54.946
How about you just give me a method and
a URL, I will do all of this and

54
00:02:54.946 --> 00:02:59.709
I will call whatever function you handed
me on the onload and onerrors, right?

55
00:02:59.709 --> 00:03:02.130
So we gave ourselves an abstraction.

56
00:03:02.130 --> 00:03:07.101
More recently we've had,
as we saw before, a promise-based API,

57
00:03:07.101 --> 00:03:11.316
but this is still an abstraction
around XMLHttpRequest.

58
00:03:11.316 --> 00:03:14.655
This has basically hid
all the gory details and

59
00:03:14.655 --> 00:03:18.840
gave you the exact same
thing with a nicer API.

60
00:03:18.840 --> 00:03:21.600
And there are some issues here we
don't have a lot of control over

61
00:03:21.600 --> 00:03:22.720
the request and response.

62
00:03:22.720 --> 00:03:25.740
We make one, can't really modify or
do anything with it.

63
00:03:25.740 --> 00:03:28.810
We get a response, but it's usually
just the JSON that came back, or

64
00:03:28.810 --> 00:03:30.914
the XML if you're unlucky.

65
00:03:30.914 --> 00:03:36.990
And it wasn't really made for

66
00:03:36.990 --> 00:03:40.460
what we're trying to do, you can only
get certain types of data types.

67
00:03:40.460 --> 00:03:43.260
Let's say, there are other things
you might wanna get from a server.

68
00:03:43.260 --> 00:03:48.080
Images, video,
literally anything that's just not XML or

69
00:03:48.080 --> 00:03:50.430
JSON, and
JSON's not even in the name, right,

70
00:03:50.430 --> 00:03:53.880
that just happens to be a lucky break
that you can also get JSON from it.

