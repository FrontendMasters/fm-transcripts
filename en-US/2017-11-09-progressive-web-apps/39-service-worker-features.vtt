WEBVTT

1
00:00:00.230 --> 00:00:02.751
&gt;&gt; Steve Kinney: So I've definitely
played the role of hype man for

2
00:00:02.751 --> 00:00:04.861
service worker for the last few minutes.

3
00:00:04.861 --> 00:00:07.510
So let's talk about what
a service worker actually is.

4
00:00:08.590 --> 00:00:13.560
So like web worker and shared worker,
service worker runs in its

5
00:00:13.560 --> 00:00:16.620
own thread separate from the main
thread that's doing all the rendering.

6
00:00:18.450 --> 00:00:20.120
Here's where it becomes interesting,

7
00:00:20.120 --> 00:00:23.980
service worker can
intercept network requests.

8
00:00:23.980 --> 00:00:27.566
Again think about it,
we've been talking about off line.

9
00:00:27.566 --> 00:00:31.169
A thing sitting separate from your
application that can intercept all

10
00:00:31.169 --> 00:00:35.260
your network request that you can program
like you would one of those web workers

11
00:00:35.260 --> 00:00:35.825
earlier.

12
00:00:35.825 --> 00:00:40.217
Right, seems like we can write logic
right, rather than, here's a manifest,

13
00:00:40.217 --> 00:00:43.657
I hope the browser did the thing
I think it was gonna do, right?

14
00:00:43.657 --> 00:00:47.270
We can use things like conditionals and

15
00:00:47.270 --> 00:00:51.870
functions to actually
determine these things.

16
00:00:51.870 --> 00:00:56.900
So, the request is gonna, like if you were
to turn the WiFi off on your computer

17
00:00:56.900 --> 00:01:02.010
right now and send a request, the browser
would still send it into oblivion.

18
00:01:02.010 --> 00:01:07.380
But it would send right, and
if you had a service worker,

19
00:01:07.380 --> 00:01:10.790
you're still sitting at the gates
before it gets out, right.

20
00:01:10.790 --> 00:01:15.757
It means your service worker theoritically
catch that and say like, doesn't

21
00:01:15.757 --> 00:01:20.887
look like we're online, or let me try and
I'll let you know how it goes, right.

22
00:01:20.887 --> 00:01:23.643
Using, I don't know,
some kind of asynchronous construct,

23
00:01:23.643 --> 00:01:27.310
where you give an eventual value and you
tell whether or not it works out or not.

24
00:01:27.310 --> 00:01:31.040
And what's even more incredible is,
somebody asked earlier,

25
00:01:31.040 --> 00:01:35.550
if you have a web worker and
you kill it, does it die?

26
00:01:35.550 --> 00:01:39.110
Well, if you kill it, it dies, if you kill
the actual tab around it, does it die?

27
00:01:39.110 --> 00:01:42.450
Well, eventually all
things come to an end.

28
00:01:42.450 --> 00:01:45.200
What's interesting about a service worker,

29
00:01:45.200 --> 00:01:48.167
is that it exists independent
of any of your tabs.

30
00:01:48.167 --> 00:01:52.380
Which means you can open up like six
of these front end grocers, right?

31
00:01:52.380 --> 00:01:53.820
And once we have service organized so

32
00:01:53.820 --> 00:01:56.740
you could close all of them,
guess what's still running?

33
00:01:57.840 --> 00:02:01.113
You haven't gotten rid of
the service worker, right,

34
00:02:01.113 --> 00:02:03.557
so it runs even when your app isn't open.

35
00:02:03.557 --> 00:02:06.127
Right, and when I say the word app,
you're like yeah,

36
00:02:06.127 --> 00:02:07.777
my Twitter app does it all the time.

37
00:02:07.777 --> 00:02:12.440
My RSS reader syncs stuff, right, but your
web applications don't do that, right?

38
00:02:12.440 --> 00:02:17.810
And so this kinda brings it up to this
level of parity with native applications.

39
00:02:17.810 --> 00:02:20.710
Except that you don't have to download
a 300 megabyte bundle every two

40
00:02:20.710 --> 00:02:22.250
weeks cuz there's a new update.

41
00:02:22.250 --> 00:02:26.199
You get all the advances of go to webpage,
have app, right?

42
00:02:26.199 --> 00:02:30.975
There's this great talk at Google where
they actually measured every step

43
00:02:30.975 --> 00:02:35.519
you had to take between you and
the app like you and downloading the app,

44
00:02:35.519 --> 00:02:38.350
you are less likely to download it, right?

45
00:02:38.350 --> 00:02:40.060
It's like every time I go to
a restaurant web page and

46
00:02:40.060 --> 00:02:44.340
they're like, download our app to see
the menu I don't want to do that.

47
00:02:44.340 --> 00:02:47.095
We get all the advances of
the web of go and see it, and

48
00:02:47.095 --> 00:02:51.604
I can run in the background and sync stuff
for you, and work when you're offline, and

49
00:02:51.604 --> 00:02:52.560
stuff like that.

50
00:02:54.541 --> 00:02:58.886
&gt;&gt; Steve Kinney: Cool, so service worker,
it's a programmable network proxy,

51
00:02:58.886 --> 00:03:04.410
that's the fancy way of saying
the hyperbolic stuff I said earlier.

52
00:03:04.410 --> 00:03:08.841
It's a JavaScript worker, it only
works over secure domains, right, and

53
00:03:08.841 --> 00:03:13.203
this is why when earlier today when
you’re doing this whole HTTPS dance and

54
00:03:13.203 --> 00:03:16.829
you’re like, I hate certificates
with like a burning rage.

55
00:03:16.829 --> 00:03:19.707
We’re like totally got to do it,
totally got to do it,

56
00:03:19.707 --> 00:03:23.040
it’s not cause we’re like
that security I mean Mike is.

57
00:03:23.040 --> 00:03:28.640
But, [LAUGH] generally speaking it's
because they only work on HTTPS.

58
00:03:28.640 --> 00:03:31.450
Because, think about this you have the
ability to run in the background, right,

59
00:03:31.450 --> 00:03:33.530
you have the ability to
intercept network requests.

60
00:03:33.530 --> 00:03:37.577
You know it be great if somebody else
didn't hijack that ability right, so

61
00:03:37.577 --> 00:03:41.496
we need to encrypt all the traffic so
we don't get man in the middled, and

62
00:03:41.496 --> 00:03:43.189
people can has all the access.

63
00:03:43.189 --> 00:03:45.431
So, service worker only works over HTTPS,

64
00:03:45.431 --> 00:03:49.580
which is why we had to go through
that song and dance in the beginning.

65
00:03:49.580 --> 00:03:54.044
It has a predictable life cycle
that we'll discuss in a second, and

66
00:03:54.044 --> 00:03:58.448
it is necessary for what we're
gonna call the modern offline web.

67
00:03:58.448 --> 00:04:02.545
So now it's just be like, yeah, here's
that page that I just happened to have,

68
00:04:02.545 --> 00:04:06.309
but to have an offline, not just web
page but an offline web application.

69
00:04:06.309 --> 00:04:09.603
So in a normal world,
things work like this, you have browser,

70
00:04:09.603 --> 00:04:13.582
you make network requests, things
work out great, or they don't, right?

71
00:04:13.582 --> 00:04:17.572
As most things in life, with a service
worker, it gets in the middle.

72
00:04:17.572 --> 00:04:21.388
It says, you wanna make a network request
application, you talk to me first, and

73
00:04:21.388 --> 00:04:23.620
I will figure out what we do about this,
right?

74
00:04:23.620 --> 00:04:25.330
And it could pass it on to the network,

75
00:04:25.330 --> 00:04:29.860
it could programmatically
work with the cache.

76
00:04:29.860 --> 00:04:32.420
It could do all sorts of things
that it can try to figure out.

77
00:04:32.420 --> 00:04:34.773
It could be like,
let me do a few things, and

78
00:04:34.773 --> 00:04:38.607
I'll get back to you on what worked
out best, but it sits in the middle.

79
00:04:38.607 --> 00:04:43.410
All right, so this is good, I've done a
good job of service worker-like salesman.

80
00:04:45.670 --> 00:04:48.723
Here's the, I'll start with enthusiasm, so

81
00:04:48.723 --> 00:04:53.163
I don't get super excited about
all the grain, this is enthusiasm.

82
00:04:53.163 --> 00:04:58.084
It is currently implemented in Chrome and
Firefox, Opera and

83
00:04:58.084 --> 00:05:04.440
Samsung Internet happen to share a render
engine with Chrome, so guess what?

84
00:05:04.440 --> 00:05:09.885
It's there, too, it is forthcoming
in Edge, and the fine folks

85
00:05:09.885 --> 00:05:16.131
on the Safari team have definitely
mentioned it in their five-year plan.

86
00:05:16.131 --> 00:05:18.895
&gt;&gt; [LAUGH]
&gt;&gt; Steve Kinney: The nice part about

87
00:05:18.895 --> 00:05:23.164
service worker, again that's like to
remind you like incase you got lost this

88
00:05:23.164 --> 00:05:25.930
is the workshop on
Progressive Web Application.

89
00:05:25.930 --> 00:05:27.530
What's the first word?

90
00:05:27.530 --> 00:05:29.929
Progressive right,
where have we heard that before?

91
00:05:31.467 --> 00:05:33.299
&gt;&gt; Speaker 2: Politics.

92
00:05:33.299 --> 00:05:36.950
&gt;&gt; Steve Kinney: Politics, where have
we heard that in terms of the Web?

93
00:05:36.950 --> 00:05:37.796
&gt;&gt; Speaker 3: Progressive enhancement.

94
00:05:37.796 --> 00:05:42.889
&gt;&gt; Steve Kinney: Progressive enhancement,
progressive enhancment is the idea

95
00:05:42.889 --> 00:05:48.651
that like new thing out on the web,
use it, right, except like, IE6.

96
00:05:48.651 --> 00:05:49.179
And like,

97
00:05:49.179 --> 00:05:53.115
the idea that like the site should still
work if you don't have the new hotness,

98
00:05:53.115 --> 00:05:56.849
but if you do have the new hotness,
it should work even better, all right.

99
00:05:56.849 --> 00:06:01.348
So a big part of progressive web apps is
like, they still work even if you like,

100
00:06:01.348 --> 00:06:03.529
I mean you don't reap the benefits but

101
00:06:03.529 --> 00:06:08.230
you can still have an application that
can be better if they support it, right?

102
00:06:08.230 --> 00:06:10.060
We do a little bit of feature detection,
right?

103
00:06:10.060 --> 00:06:13.760
So one thing I'm gonna do if you
look at that first if statement,

104
00:06:13.760 --> 00:06:18.810
if there is a service worker property
on the navigator object, right?

105
00:06:18.810 --> 00:06:22.630
Like in JavaScript if you say,
if you have a new object and

106
00:06:22.630 --> 00:06:27.390
it has keys A and B and you say,
object.c, you get back undefined.

107
00:06:27.390 --> 00:06:30.238
Undefined, happens to be falsy, right,

108
00:06:30.238 --> 00:06:33.330
this will actually return
false in this case.

109
00:06:33.330 --> 00:06:37.761
So if they don't have service worker,
don't run any of this code,

110
00:06:37.761 --> 00:06:40.420
you've now supported Safari, right.

111
00:06:40.420 --> 00:06:43.700
That is the end of your interaction if
we're in Safari, cuz Safari is like,

112
00:06:43.700 --> 00:06:47.130
yeah I don't support service worker,
and moving on, right.

113
00:06:47.130 --> 00:06:52.939
But for those enlightened browsers that do
support serviceWorker, now we say, okay,

114
00:06:52.939 --> 00:06:57.820
so I'm gonna call navigator.serviceWorker
cuz you told me you have it.

115
00:06:57.820 --> 00:07:04.150
And then we register a serviceWorker,
right, and it's service-worker.js.

116
00:07:04.150 --> 00:07:08.290
We've done some fanciness with webpack
today, although like Import, and you have

117
00:07:08.290 --> 00:07:13.500
seven exclamation points, and you name
the file the same thing over again, right?

118
00:07:13.500 --> 00:07:18.098
So the web pack builds the correct
file for you, but if you were just,

119
00:07:18.098 --> 00:07:22.302
crack open a folder, but
in app.js and a serviceworker.js,

120
00:07:22.302 --> 00:07:25.258
right, you could just say service worker.

121
00:07:25.258 --> 00:07:28.478
I wish that we all lived in a world where
we didn't need all these build tools

122
00:07:28.478 --> 00:07:29.568
all the time, but we do.

123
00:07:29.568 --> 00:07:34.339
But if you just making a very simple thing
right the goal of this course is how you

124
00:07:34.339 --> 00:07:38.838
build like real production level app,
so some of the tools are involved.

125
00:07:38.838 --> 00:07:43.135
But if you want to get started and
actually see some simple examples later

126
00:07:43.135 --> 00:07:46.517
where we just we just have some
files in a folder, right so

127
00:07:46.517 --> 00:07:48.250
you will see both of those.

128
00:07:48.250 --> 00:07:50.437
We'll say hey register, and

129
00:07:50.437 --> 00:07:55.437
like most promise like events it
will either work or it won't work.

130
00:07:55.437 --> 00:07:59.299
And if it does work we'll have the
registration of the service worker, and

131
00:07:59.299 --> 00:08:01.707
if not we will have
something that went wrong.

132
00:08:03.955 --> 00:08:06.967
&gt;&gt; Steve Kinney: There's a bunch of
ways to see the service workers on your

133
00:08:06.967 --> 00:08:11.612
system this is the old way, you can go
to Chrome://serviceworker-internals, and

134
00:08:11.612 --> 00:08:14.584
you can see all of the service
workers that are running.

135
00:08:14.584 --> 00:08:19.881
Newer versions of Chrome actually ship
with this application tab that Mike

136
00:08:19.881 --> 00:08:24.856
mentioned earlier, with the service
workers tab on my column there.

137
00:08:24.856 --> 00:08:31.344
And with that, you can actually see all
of the service workers for a given page.

138
00:08:31.344 --> 00:08:35.609
And there's a little show all in that top
column where you can see the update and

139
00:08:35.609 --> 00:08:37.170
reload check mark checked.

140
00:08:37.170 --> 00:08:40.440
That will show all the service
workers installed on your system.

141
00:08:40.440 --> 00:08:45.461
Later, when you go home, you can hit that
button and be horrified by the number

142
00:08:45.461 --> 00:08:50.428
of web applications that are running
even when you don't have any tabs open.

143
00:08:50.428 --> 00:08:51.704
And you can go sit there and

144
00:08:51.704 --> 00:08:55.189
do the cathartic exercise of
unregistering all of them because you're

145
00:08:55.189 --> 00:08:59.150
It's slightly uncomfortable
when you see that many of them.

146
00:08:59.150 --> 00:09:02.840
That's the thing,
[LAUGH] totally, what's that?

147
00:09:02.840 --> 00:09:03.595
&gt;&gt; Speaker 3: It's happening right now.

148
00:09:03.595 --> 00:09:07.063
&gt;&gt; Steve Kinney: Yeah shouldn't
have mentioned that until the end.

149
00:09:07.063 --> 00:09:08.745
Cool so they have a lifecycle, and

150
00:09:08.745 --> 00:09:13.090
it's not a different lifecycle than when
you download an app from the app store.

151
00:09:13.090 --> 00:09:17.987
It's installing, then it's installed, and
then you happily click on it cuz you wanna

152
00:09:17.987 --> 00:09:22.508
play whatever that new snake clone is,
and there you go, and then it's active.

153
00:09:22.508 --> 00:09:28.184
And once the Service Worker is active
as we just saw, it stays active, right?

154
00:09:28.184 --> 00:09:32.614
And it sits there, and basically until
another Service Worker comes to replace

155
00:09:32.614 --> 00:09:35.269
it, it will remain
installed in your browser.

156
00:09:37.103 --> 00:09:39.090
&gt;&gt; Steve Kinney: So why have a lifecycle?

157
00:09:39.090 --> 00:09:41.350
We didn't have lifecycle with web workers,
right?

158
00:09:41.350 --> 00:09:43.894
One, it's to make offline-first
something that's possible, right?

159
00:09:43.894 --> 00:09:47.701
We need to actually install it so
that when we leave,

160
00:09:47.701 --> 00:09:51.776
it stays around until someone
unregisters all of them.

161
00:09:51.776 --> 00:09:56.484
And there's a difference
between getting yourself ready.

162
00:09:56.484 --> 00:10:01.740
We're gonna see, Mike alluded to index DB,
a database or caches.

163
00:10:01.740 --> 00:10:05.428
A new service worker might have different
things it needs to prepare for itself.

164
00:10:05.428 --> 00:10:06.878
And you might wanna do that separately,

165
00:10:06.878 --> 00:10:09.380
and you don't wanna mess
with the active one.

166
00:10:09.380 --> 00:10:11.570
The active one is currently
intercepting stuff,

167
00:10:11.570 --> 00:10:12.820
you don't want the new one messing with.

168
00:10:12.820 --> 00:10:16.346
So there's this idea of hey,
I'm preparing to take over,

169
00:10:16.346 --> 00:10:19.957
you're currently running,
I'm not gonna get in your way.

170
00:10:19.957 --> 00:10:24.166
And that's seems so
we only have one active service worker.

171
00:10:24.166 --> 00:10:27.025
You can imagine, if two tabs are running
two different service workers,

172
00:10:27.025 --> 00:10:28.469
there's no rules anymore, right?

173
00:10:28.469 --> 00:10:32.239
It's the same, when Chrome has an update
for you, it basically says, hey,

174
00:10:32.239 --> 00:10:35.680
quit all instances of Chrome,
and you can have the new version.

175
00:10:35.680 --> 00:10:38.680
That is true for a service worker,
and we'll see that in a little bit.

176
00:10:38.680 --> 00:10:41.560
So this is kind of more granular,
we are installing, and

177
00:10:41.560 --> 00:10:44.027
there is an install event
that we can listen for.

178
00:10:44.027 --> 00:10:47.492
So when it's like, I'm getting
ready to install, we can listen for

179
00:10:47.492 --> 00:10:52.140
that install event, do some stuff,
then it's installed but not running.

180
00:10:52.140 --> 00:10:56.070
Then it's like, okay, if there is no
other service workers ready to take over.

181
00:10:56.070 --> 00:10:58.780
But if there is like, hey,
anything that I need to do before I like,

182
00:10:58.780 --> 00:11:02.020
as I'm taking the stage now,
anything I need to do?

183
00:11:02.020 --> 00:11:06.020
And then it's active and
it stays active until it is pushed out,

184
00:11:06.020 --> 00:11:08.530
until it is dethroned by
another service worker.

185
00:11:10.410 --> 00:11:15.700
Self which we saw in the web workers,
you can add event listeners and

186
00:11:15.700 --> 00:11:20.000
these will allow you to for
the first two of those red, salmony,

187
00:11:20.000 --> 00:11:22.420
red color boxes on the previous slide.

188
00:11:22.420 --> 00:11:25.570
Those will let you interject at
the installation process and

189
00:11:25.570 --> 00:11:26.830
the activation process.

190
00:11:27.850 --> 00:11:30.893
I'm not gonna talk about that third one,
I'm gonna let you look at it,

191
00:11:30.893 --> 00:11:33.962
internalize it, think about it and
we'll deal with it in a little bit.

192
00:11:33.962 --> 00:11:38.610
But looks like we can listen for
all sorts off fresh events that's cool.

193
00:11:38.610 --> 00:11:42.980
One of the trickier things, they can be
a little bit maddening when you're first

194
00:11:42.980 --> 00:11:45.494
getting comfortable
with service worker is.

195
00:11:45.494 --> 00:11:48.788
When you don't fully have your head
wrapped around the life cycle things

196
00:11:48.788 --> 00:11:52.041
that you think should work,
don't work the way you think they should.

197
00:11:52.041 --> 00:11:55.474
And there's nothing more frustrating in
programming than I believe it should be

198
00:11:55.474 --> 00:11:56.786
this way and it's not.

199
00:11:56.786 --> 00:11:58.590
Like there's a reason I
got into programming, so

200
00:11:58.590 --> 00:12:01.990
I could write some code and
have my will be done.

201
00:12:01.990 --> 00:12:06.688
So let's take a look about that,
so imagine this,

202
00:12:06.688 --> 00:12:12.388
you have a service worker
running now it's like V2, right?

203
00:12:12.388 --> 00:12:17.153
And you make it, you save it,
you refresh the page nothing changes,

204
00:12:17.153 --> 00:12:20.371
it's still your old service worker, right?

205
00:12:20.371 --> 00:12:26.621
Your new service workers can only
take over after all of the tabs and

206
00:12:26.621 --> 00:12:32.886
pages running that service worker
have relinquished it, right?

207
00:12:32.886 --> 00:12:37.788
If nobody is accessing anymore,
then the new one can step in, right, and

208
00:12:37.788 --> 00:12:39.980
this kinda makes sense.

209
00:12:39.980 --> 00:12:42.545
It's like I said, when Chrome autoupdates,

210
00:12:42.545 --> 00:12:46.902
where this can get a little confusing is
in the process of reloading a web page.

211
00:12:46.902 --> 00:12:50.905
First of all, there will be
the situation at one point when you,

212
00:12:50.905 --> 00:12:55.144
if you're like me and you have 75
tabs open across three windows.

213
00:12:55.144 --> 00:12:57.998
There will be one of them holding
onto your service worker,

214
00:12:57.998 --> 00:13:00.140
that will happen at one point to you.

215
00:13:00.140 --> 00:13:03.640
Shoot me a DM when it happens,
I'll send you an emoji, but

216
00:13:03.640 --> 00:13:06.580
the more common one is the case
where we reload a page.

217
00:13:06.580 --> 00:13:10.090
We're like I got one page,
I hit reload, what's the issue here?

218
00:13:10.090 --> 00:13:14.045
So our new service worker shows up on the
scene, and we're like, I reload the page.

219
00:13:14.045 --> 00:13:17.090
What actually happens
when you reload a page,

220
00:13:17.090 --> 00:13:20.916
is that the browser starts up
a second version of the page,

221
00:13:20.916 --> 00:13:25.950
connects it to the service worker,
and then gets rid of the old one.

222
00:13:25.950 --> 00:13:28.600
But that meant that during that process,

223
00:13:28.600 --> 00:13:31.340
there were two connected,
there was never zero connected.

224
00:13:31.340 --> 00:13:35.061
So what happened to your brand
new shiny service worker?

225
00:13:35.061 --> 00:13:38.313
Still waiting in the wings cuz
this is like, when is my time?

226
00:13:38.313 --> 00:13:41.956
People keep talking to the wall, the guy
in the stage right now won't stop talking,

227
00:13:41.956 --> 00:13:43.047
let me get back up there.

228
00:13:44.561 --> 00:13:46.310
&gt;&gt; Steve Kinney: And so
at that point, it doesn't work.

229
00:13:47.540 --> 00:13:52.400
If however, all of them disconnect,
so we get our new service worker,

230
00:13:52.400 --> 00:13:54.103
the other one goes away.

231
00:13:59.847 --> 00:14:03.530
&gt;&gt; Steve Kinney: And then connects,
then we get the fresh one, all right?

232
00:14:03.530 --> 00:14:05.620
So, this can be a little
bit problematic and

233
00:14:05.620 --> 00:14:08.980
you're like, hey,
I'm working on web applications.

234
00:14:08.980 --> 00:14:10.280
I'm reloading this page a lot,

235
00:14:10.280 --> 00:14:13.590
that's what I do for a living,
I change the code, I reload the page.

236
00:14:13.590 --> 00:14:16.190
That's what I do, I'm good at it,

237
00:14:16.190 --> 00:14:20.030
we actually see that there
are some options here.

238
00:14:20.030 --> 00:14:24.994
Here is the active one, you actually see
when there's another one running, and

239
00:14:24.994 --> 00:14:27.845
you see that there is one
waiting in the wings.

240
00:14:27.845 --> 00:14:31.326
All right, and you have some
that you can hit unregister and

241
00:14:31.326 --> 00:14:34.120
you can go ahead and
kick that one out manually.

242
00:14:34.120 --> 00:14:36.990
There's also some more
programmatic ways to do it.

243
00:14:38.180 --> 00:14:42.090
On the installation event,
if you say, skipWaiting,

244
00:14:42.090 --> 00:14:44.540
do you know what the service
worker's gonna do?

245
00:14:44.540 --> 00:14:45.905
It's gonna push out the current one.

246
00:14:48.976 --> 00:14:51.274
&gt;&gt; Steve Kinney: You probably shouldn't
do that I think in a slide or

247
00:14:51.274 --> 00:14:53.965
two I'm gonna say that we
regret showing you that.

248
00:14:53.965 --> 00:14:58.369
But in the sake of completeness,
you a can oust a service worker.

249
00:14:58.369 --> 00:15:01.762
If you say hey, that's not a thing
that I wanna do in general, but

250
00:15:01.762 --> 00:15:04.435
I only wanna one of them
working on the app, right?

251
00:15:04.435 --> 00:15:08.795
You do have these tools
that update on reload.

252
00:15:09.960 --> 00:15:13.540
Check that one right there and
then every time you reload the page,

253
00:15:13.540 --> 00:15:15.478
you will oust the current service worker.

254
00:15:15.478 --> 00:15:21.788
Also, Shift+Cmd+R, Shift+Ctrl+R I
believe will do the same thing.

255
00:15:21.788 --> 00:15:26.430
But if you just check that box in
your development, hit Cmd + R.

256
00:15:26.430 --> 00:15:27.989
&gt;&gt; Speaker 3: That'll do
a slightly different thing.

257
00:15:27.989 --> 00:15:32.250
That'll be a cache free brand new request,
and so

258
00:15:32.250 --> 00:15:39.650
you'll be in the first page view situation
there where the service worker is ousted.

259
00:15:39.650 --> 00:15:43.627
The new one is waiting until
everything disconnects.

260
00:15:43.627 --> 00:15:45.187
So you could do that,

261
00:15:45.187 --> 00:15:50.060
and then another refresh to allow
the service worker to activate.

262
00:15:50.060 --> 00:15:51.470
&gt;&gt; Steve Kinney: I don't want that,
that's why [CROSSTALK] box.

263
00:15:51.470 --> 00:15:52.893
&gt;&gt; Speaker 3: Yeah,
exactly, check the box.

264
00:15:52.893 --> 00:15:53.393
&gt;&gt; Steve Kinney: Cool.

