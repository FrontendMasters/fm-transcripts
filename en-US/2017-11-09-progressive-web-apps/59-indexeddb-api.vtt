WEBVTT

1
00:00:00.000 --> 00:00:00.727
&gt;&gt; Mike North: Here's,

2
00:00:00.727 --> 00:00:05.586
this is sort of like at a very high
level how things work with IndexedDB.

3
00:00:05.586 --> 00:00:07.031
You open a database and

4
00:00:07.031 --> 00:00:11.227
you open it by name,
you can have multiple IndexedDB databases.

5
00:00:11.227 --> 00:00:15.953
And when you open it, you kind of
declare that this application would

6
00:00:15.953 --> 00:00:20.201
like to open it and
the current version of this database is 1.

7
00:00:20.201 --> 00:00:23.465
So let's say the current
version of the database is 10.

8
00:00:23.465 --> 00:00:27.265
And if we find something
on disk that's a version 5,

9
00:00:27.265 --> 00:00:31.748
that lets us know well,
we have to migrate this thing forward.

10
00:00:31.748 --> 00:00:35.258
Maybe you've added a couple fields,
or created a new store, or

11
00:00:35.258 --> 00:00:36.955
changed the way indices work.

12
00:00:36.955 --> 00:00:41.254
That tells you sort of your target and
your current position, and

13
00:00:41.254 --> 00:00:44.078
now you know the path
that you have to take.

14
00:00:44.078 --> 00:00:49.332
And that brings us to onupgradeneeded,
so this event is fired in the event

15
00:00:49.332 --> 00:00:54.352
that what is found does not match
the version that you're asking for.

16
00:00:54.352 --> 00:00:55.745
Here, we're asking for version 1.

17
00:00:55.745 --> 00:01:00.254
Like, if we were asking for version
10 what we find on disk is version 9.

18
00:01:00.254 --> 00:01:02.982
That thing's gonna get called.

19
00:01:02.982 --> 00:01:06.622
And we'll drill into that more deeply.

20
00:01:06.622 --> 00:01:11.985
And then finally,
after the database has been opened, right,

21
00:01:11.985 --> 00:01:17.748
and the upgrade has completed,
basically taking what was stored and

22
00:01:17.748 --> 00:01:23.631
bringing it up to current, now we
can do stuff in this onsuccess hook.

23
00:01:23.631 --> 00:01:26.108
This is a really cool way of doing this.

24
00:01:26.108 --> 00:01:29.440
And I've had experience
working on desktop apps, and

25
00:01:29.440 --> 00:01:32.563
server-side apps that store data for
many years.

26
00:01:32.563 --> 00:01:35.378
That's in document format.

27
00:01:35.378 --> 00:01:40.220
There's a lot of value in this because
most of the code that you write is going

28
00:01:40.220 --> 00:01:41.516
to be in unsuccess.

29
00:01:41.516 --> 00:01:45.737
And you can take for granted that
by the time that is called you're

30
00:01:45.737 --> 00:01:48.597
working with an already updated database.

31
00:01:48.597 --> 00:01:52.022
You kind of bring it up to date and
then let's start working with it.

32
00:01:52.022 --> 00:01:55.044
Rather than having to have
a lot of complex switching.

33
00:01:55.044 --> 00:01:59.198
Like if you've ever dealt with maintaining
local storage data over long term,

34
00:01:59.198 --> 00:02:03.724
oftentimes you end up just throwing it out
the window, because you've changed the way

35
00:02:03.724 --> 00:02:07.394
you handle certain things,
which is not a good experience for users.

36
00:02:07.394 --> 00:02:08.967
So let's drill into these.

37
00:02:08.967 --> 00:02:13.602
Let's first focus on the onupgradeneeded.

38
00:02:13.602 --> 00:02:19.474
And this is the pattern I advise that you
use when you're upgrading a database.

39
00:02:19.474 --> 00:02:24.374
So, you can first see that we
get this thing called a DB,

40
00:02:24.374 --> 00:02:27.096
sort of a very central object.

41
00:02:27.096 --> 00:02:33.102
We will use this DB object quite a lot,
and that is available on,

42
00:02:33.102 --> 00:02:38.662
if we look back here,
open is the thing that we got from the,

43
00:02:38.662 --> 00:02:43.020
it is returned by this open function,
right?

44
00:02:43.020 --> 00:02:47.502
And once this function is called here,
you will find that there's

45
00:02:47.502 --> 00:02:52.156
something available on this open
object under the result property.

46
00:02:52.156 --> 00:02:54.761
Already you should be thinking
this is clunky as all hell,

47
00:02:54.761 --> 00:02:57.167
I should be getting this as
an argument to a function.

48
00:02:57.167 --> 00:02:59.795
The reason is IndexedDB is pretty old.

49
00:02:59.795 --> 00:03:04.818
It's been around since,
it is available in a genuine way

50
00:03:04.818 --> 00:03:09.646
all the way back to IE11 and
polyfillable in IE10.

51
00:03:09.646 --> 00:03:14.431
So like Promises were not at the heart
of what we were working on and

52
00:03:14.431 --> 00:03:19.912
you have to imagine that the standards
were developed long before IE 10 so

53
00:03:19.912 --> 00:03:25.480
it's like it feels old because it is old
and that's why I'm going to show you

54
00:03:25.480 --> 00:03:31.409
something that's a little nicer to work
with as we round things to the exercise.

55
00:03:31.409 --> 00:03:36.185
So we get the database
on this open object, and

56
00:03:36.185 --> 00:03:43.178
on this event what we can do is
basically switch on this old version.

57
00:03:43.178 --> 00:03:48.328
So the old version is what you're gonna,
that is where we

58
00:03:48.328 --> 00:03:54.566
find the version of the database
that was found on that user's disk.

59
00:03:54.566 --> 00:04:01.230
I advise a key switch upgrade pattern
here with no breaks, deliberately.

60
00:04:01.230 --> 00:04:05.268
The idea is if you have
8 different cases for

61
00:04:05.268 --> 00:04:08.988
8 different versions of the database.

62
00:04:08.988 --> 00:04:13.700
Each case statement can represent
an incremental upgrade from version

63
00:04:13.700 --> 00:04:16.615
1to version 2, version 2 to version 3.

64
00:04:16.615 --> 00:04:21.539
And essentially, a very old database
will sort of begin executing those steps

65
00:04:21.539 --> 00:04:26.241
1 by 1, beginning at the correct spot and
following all the way through to

66
00:04:26.241 --> 00:04:29.618
the bottom, and
then you're completely upgraded.

67
00:04:29.618 --> 00:04:34.386
This makes managing complexity a lot
easier, and it also keeps us honest

68
00:04:34.386 --> 00:04:39.013
about forward compatible, or
sorry backwards compatible changes.

69
00:04:39.013 --> 00:04:43.541
So you should never find yourself
committing new code that alters very old

70
00:04:43.541 --> 00:04:46.464
migrations from, if you're on version 10,

71
00:04:46.464 --> 00:04:51.597
you really shouldn't be mucking with the
code that takes version 2 to version 3.

72
00:04:51.597 --> 00:04:57.830
Unless there's a bug in that area,
that's pretty much set in stone.

73
00:04:57.830 --> 00:05:02.662
And now you should be always
just adding stuff to this.

74
00:05:02.662 --> 00:05:05.776
&gt;&gt; Speaker 2: Am I right in the assumption
that if you're on version 10,

75
00:05:05.776 --> 00:05:07.241
and the disk has version 1,

76
00:05:07.241 --> 00:05:10.920
you're gonna get 9 onupgradeneeded
events that fire sequentially?

77
00:05:10.920 --> 00:05:14.618
&gt;&gt; Mike North: No,
you're performing 1 upgrade, but

78
00:05:14.618 --> 00:05:19.907
you're gonna enter this switch and
fall through 9 cases.

79
00:05:19.907 --> 00:05:23.544
So the act of upgrading happens once.

80
00:05:23.544 --> 00:05:24.656
&gt;&gt; Speaker 2: Okay.

81
00:05:24.656 --> 00:05:27.643
&gt;&gt; Speaker 3: And the version
is that application's version or

82
00:05:27.643 --> 00:05:29.570
the IndexedDB's own version?

83
00:05:29.570 --> 00:05:36.238
&gt;&gt; Mike North: EVT.old version is the
version of the database found in storage.

84
00:05:36.238 --> 00:05:42.259
The number 1 that we passed in
here when we opened this thing.

85
00:05:42.259 --> 00:05:48.364
That is the application's like
most modern known version.

86
00:05:48.364 --> 00:05:54.492
So you'll be incrementing that up and
up and up as this database evolves.

87
00:05:54.492 --> 00:05:58.411
And you'll be adding more
cases here as well, so

88
00:05:58.411 --> 00:06:03.012
that's all I really have to
say about on Upgrade Needed.

89
00:06:03.012 --> 00:06:05.084
It's not incredibly complex.

90
00:06:05.084 --> 00:06:09.867
And if you've ever used
a server-side application

91
00:06:09.867 --> 00:06:13.895
that has a concept of database migrations.

92
00:06:13.895 --> 00:06:18.294
This is database migrations
in case switch form.

93
00:06:18.294 --> 00:06:22.156
So let's look at what we can
do in the unsuccess hook.

94
00:06:25.004 --> 00:06:29.137
&gt;&gt; Mike North: So we get that database
object, and we create a transaction.

95
00:06:29.137 --> 00:06:32.770
So here we're seeing that
IndexedDB is transactional.

96
00:06:32.770 --> 00:06:39.852
What this means is that we can attempt
to carry out a sequence of operations,

97
00:06:39.852 --> 00:06:44.954
and they will either complete or
nothing will happen.

98
00:06:44.954 --> 00:06:49.770
So, what I mean by that is either
the whole transaction will finish

99
00:06:49.770 --> 00:06:55.016
successfully or any partial work that
has been done will be rolled back.

100
00:06:55.016 --> 00:06:57.050
So it's sort of an all-or-nothing thing.

101
00:06:57.050 --> 00:07:00.781
Here's an example of a transaction that's
been happening behind the scenes in

102
00:07:00.781 --> 00:07:02.572
the app that we've been using so far.

103
00:07:02.572 --> 00:07:09.338
When you create an order, like all
the items are removed from the cart.

104
00:07:09.338 --> 00:07:14.204
So that creation of an order and
removal of 10 or so

105
00:07:14.204 --> 00:07:17.148
records that were cart items,

106
00:07:17.148 --> 00:07:23.162
those operations either all work or
the database is left as is.

107
00:07:23.162 --> 00:07:26.928
You're never gonna end up in a situation
where the order was created but

108
00:07:26.928 --> 00:07:28.642
we still have stuff in the cart.

109
00:07:28.642 --> 00:07:31.908
So this is great in
terms having guarantees

110
00:07:31.908 --> 00:07:36.088
about completing a multistep thing or
leave it alone.

111
00:07:36.088 --> 00:07:41.966
You're never caught with
a half complete situation.

112
00:07:41.966 --> 00:07:47.090
So once we create a transaction,
we can get on this transaction a store,

113
00:07:47.090 --> 00:07:50.116
and this is a collection of these objects.

114
00:07:50.116 --> 00:07:56.104
And at the end, we want to add this on
complete callback for the transaction, and

115
00:07:56.104 --> 00:08:02.027
essentially that will make sure that we
close the database up when we're done.

116
00:08:03.659 --> 00:08:08.201
&gt;&gt; Mike North: Here is an example of
stuff that we could do with records.

117
00:08:08.201 --> 00:08:13.279
So we've got, we can create an index,
we can put records into the store.

118
00:08:13.279 --> 00:08:16.203
You'll see that all
records will have an ID.

119
00:08:16.203 --> 00:08:19.172
This is very important,
you have to have an ID on records.

120
00:08:19.172 --> 00:08:24.106
And what we have here is
fields that can be nested,

121
00:08:24.106 --> 00:08:27.642
so we have name, first, and last.

122
00:08:27.642 --> 00:08:30.930
Name is an object here.

123
00:08:30.930 --> 00:08:35.190
And once we have an index, we can use that
index in order to retrieve records, so

124
00:08:35.190 --> 00:08:37.799
here's an example of
retrieving a record by ID or

125
00:08:37.799 --> 00:08:40.552
using this index that we
created on the first line.

126
00:08:42.527 --> 00:08:46.443
&gt;&gt; Mike North: And again, it's available
in a lot of different browsers.

127
00:08:46.443 --> 00:08:50.767
Opera Mini doesn't use it because
they tried to offload some

128
00:08:50.767 --> 00:08:55.105
Java execution onto servers and
that's sort of an oddball.

129
00:08:55.105 --> 00:08:59.471
But Chrome's had it for a very long time.

130
00:08:59.471 --> 00:09:02.760
This works on iOS Safari.

131
00:09:02.760 --> 00:09:05.959
In fact, Safari just shipped
IndexedDB 2 which is faster and

132
00:09:05.959 --> 00:09:08.120
offers some more features around query.

