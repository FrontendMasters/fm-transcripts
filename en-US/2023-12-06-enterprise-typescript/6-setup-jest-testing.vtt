WEBVTT

1
00:00:00.190 --> 00:00:04.271
The next thing we're gonna add to our
small library project is testing we're

2
00:00:04.271 --> 00:00:06.220
gonna have to install jest.

3
00:00:06.220 --> 00:00:08.820
And we'll install Babel as well.

4
00:00:08.820 --> 00:00:12.013
The reason we need Babel
in addition to jest,

5
00:00:12.013 --> 00:00:16.802
is we want to be able to run TypeScript
test files like test files that

6
00:00:16.802 --> 00:00:21.860
are TS files without having to go
through an explicit build step.

7
00:00:21.860 --> 00:00:26.004
Babel helps us sort of do that on
the fly where we can just run Jest and

8
00:00:26.004 --> 00:00:29.780
Babel will take care of transpiling
them into JavaScript and

9
00:00:29.780 --> 00:00:33.420
then Jest can run the tests and
we should be all good.

10
00:00:33.420 --> 00:00:36.070
So we have to install a couple
things in order to make this work.

11
00:00:37.150 --> 00:00:42.662
We're going to run yarn Add-d

12
00:00:42.662 --> 00:00:48.174
jest Babel/ core Babel preset

13
00:00:48.174 --> 00:00:53.686
env Babel preset typescript,

14
00:00:53.686 --> 00:01:00.691
just making sure I got all those and I did

15
00:01:06.425 --> 00:01:09.370
We should see some stuff pop up here.

16
00:01:09.370 --> 00:01:10.480
Boom, there it goes.

17
00:01:10.480 --> 00:01:13.540
Again, these are new, right?

18
00:01:13.540 --> 00:01:18.404
This is our nice yarn Plugin for
TypeScript that's bringing in those ad

19
00:01:18.404 --> 00:01:23.350
types packages for us automatically,
it's certainly not harmful I'm

20
00:01:23.350 --> 00:01:27.807
kind of just using Babel here as
a tool I'm not coding against it,

21
00:01:27.807 --> 00:01:32.266
I don't really need these types
you can safely delete those, but

22
00:01:32.266 --> 00:01:35.993
it's nice that it sort of
assumes that you want them and

23
00:01:35.993 --> 00:01:39.476
then you can sort of rip them
out if you if you know for

24
00:01:39.476 --> 00:01:43.898
sure how you're using this thing and
you don't need the types.

25
00:01:43.898 --> 00:01:47.380
So okay, we have just we
have the Bible stuff great.

26
00:01:47.380 --> 00:01:49.590
We next need to make a test file.

27
00:01:49.590 --> 00:01:52.740
So we're gonna make a folder called tests,
and

28
00:01:52.740 --> 00:01:56.057
then we're going to create
a file in that folder,

29
00:02:01.625 --> 00:02:09.030
Index.test.ts, and
look at that, we have a file.

30
00:02:09.030 --> 00:02:12.336
We're gonna go back to the website
cuz I've provided the tests for you.

31
00:02:16.303 --> 00:02:20.380
Here it is, index.test.ts.

32
00:02:25.805 --> 00:02:28.480
Paste that in and hit Save.

33
00:02:28.480 --> 00:02:32.914
So if we want to look at these,
here are some tests like a test module for

34
00:02:32.914 --> 00:02:37.801
the deferred class, where you know,
we make sure that it creates an instance

35
00:02:37.801 --> 00:02:42.340
of a promise and resolves the promise
when we call resolve and rejects.

36
00:02:42.340 --> 00:02:46.230
The problem is when we call reject and
should have the methods resolve and

37
00:02:46.230 --> 00:02:47.740
reject present.

38
00:02:47.740 --> 00:02:51.586
So now that I've put tests like that in so
that it's more obvious when [LAUGH] there

39
00:02:51.586 --> 00:02:55.377
are failures, like I've dropped a method
or something like that, and sorry,

40
00:02:55.377 --> 00:02:57.300
we can delete this comment at the top.

41
00:02:57.300 --> 00:02:59.210
That's that's not super necessary.

42
00:03:01.040 --> 00:03:03.090
Yeah, we'll fix that problem in the sec.

43
00:03:03.090 --> 00:03:05.340
And then here's the string
of my error function.

44
00:03:05.340 --> 00:03:07.700
We'd have a bunch of test cases for that.

45
00:03:07.700 --> 00:03:10.080
I'm just showing you enough of this.

46
00:03:10.080 --> 00:03:14.508
So, you know that it's like semi,
semi real.

47
00:03:14.508 --> 00:03:15.690
All right, we can close that.

48
00:03:15.690 --> 00:03:16.820
Now what's going on here?

49
00:03:18.980 --> 00:03:20.920
Yes Lint is unhappy with us.

50
00:03:20.920 --> 00:03:25.859
And it's saying that it
was configured to run on.

51
00:03:27.190 --> 00:03:32.658
Test slash index test TS but the tsconfig
that we're pointing to doesn't

52
00:03:32.658 --> 00:03:38.140
include this file, we're missing
this file like the tsconfig, right?

53
00:03:38.140 --> 00:03:40.520
It's true, it doesn't cover anything.

54
00:03:42.260 --> 00:03:43.599
There's no tests folder here.

55
00:03:45.300 --> 00:03:48.913
We're going to write a different
tsconfig for our tests,

56
00:03:48.913 --> 00:03:51.060
and this error should go away.

57
00:03:51.060 --> 00:03:55.703
There's something we need to do
in our original tsconfig, and

58
00:03:55.703 --> 00:03:58.480
that's add one option here.

59
00:03:58.480 --> 00:04:02.617
Forget where it is, so I might just
add it up at the top, there it is,

60
00:04:02.617 --> 00:04:04.180
composite true.

61
00:04:04.180 --> 00:04:09.062
So, this is a really cool option
that lets us have not just

62
00:04:09.062 --> 00:04:14.557
multiple tsconfig files, but
you sort of get pre built types and

63
00:04:14.557 --> 00:04:19.850
type information that can apply
to subparts of the project and

64
00:04:19.850 --> 00:04:23.070
other subparts of the project.

65
00:04:23.070 --> 00:04:26.580
So you're going to see a TS
build info file pop up.

66
00:04:26.580 --> 00:04:31.582
And this lets you not only have
differences in configuration throughout

67
00:04:31.582 --> 00:04:35.846
your project, but
really a much more modular architecture,

68
00:04:35.846 --> 00:04:41.380
where you don't have to pay the full
price of building your whole library.

69
00:04:41.380 --> 00:04:44.530
You could just rebuild the tests or
rebuild the source code,

70
00:04:44.530 --> 00:04:46.090
and it could be nice and fast.

71
00:04:48.780 --> 00:04:51.930
Yeah, so we're going to,
this is called project references, right?

72
00:04:51.930 --> 00:04:54.240
Like, we can refer to another project.

73
00:04:54.240 --> 00:04:59.402
In this case,
we're going to have the TypeScript, sorry,

74
00:04:59.402 --> 00:05:05.274
the tests area subproject refer to
a reference of the outer library,

75
00:05:05.274 --> 00:05:08.560
and it'll work out well for us.

76
00:05:08.560 --> 00:05:10.870
This will become more clear once
we put the other piece in place.

77
00:05:12.350 --> 00:05:15.497
Now, in our tests folder,
we should create a TS config, and

78
00:05:15.497 --> 00:05:17.369
this one's gonna be much simpler.

79
00:05:17.369 --> 00:05:19.420
We're going to write this one by hand.

80
00:05:22.820 --> 00:05:24.240
We'll just start with an empty object.

81
00:05:24.240 --> 00:05:26.770
The first thing we need is extends.

82
00:05:28.630 --> 00:05:30.440
And we're going to point to,
is this right?

83
00:05:30.440 --> 00:05:32.180
No, it's only one set of dot dots.

84
00:05:33.740 --> 00:05:37.770
So we're going to go from the tests
folder back to the library's root folder.

85
00:05:37.770 --> 00:05:42.020
And we'll say,
we extend this tsconfig.json.

86
00:05:42.020 --> 00:05:46.910
This means that all of the strict type
checking settings we have in there.

87
00:05:46.910 --> 00:05:48.410
The skip lib check thing.

88
00:05:48.410 --> 00:05:53.440
Like all the things we set up, they
will come along for the ride for free.

89
00:05:53.440 --> 00:05:57.418
Now we're going to define a reference,
a project reference, and

90
00:05:57.418 --> 00:05:59.200
this is what that looks like.

91
00:06:04.340 --> 00:06:08.686
So what we're saying here
is that in our tests,

92
00:06:08.686 --> 00:06:14.770
we want to import from something
as if it's a different library and

93
00:06:14.770 --> 00:06:20.964
the name of that thing is chat std lib and
where we can find the code for

94
00:06:20.964 --> 00:06:25.480
those imports is in that source folder.

95
00:06:25.480 --> 00:06:29.320
So this is kind of cool because
it lets us write our tests.

96
00:06:29.320 --> 00:06:34.220
In a very similar way to the way you'd
like externally refer to this to this

97
00:06:34.220 --> 00:06:39.199
library instead of having to go like dot
dot dot dot dot dot all the way out and

98
00:06:39.199 --> 00:06:44.111
then sort of go into the source folder So

99
00:06:44.111 --> 00:06:50.020
that's cool all right a couple compiler
options we have to define here.

100
00:06:52.180 --> 00:06:54.890
And the first one is types.

101
00:06:55.970 --> 00:06:58.670
We want to make sure that we
allow just types in here.

102
00:06:58.670 --> 00:07:02.220
And the second one is rootdir.

103
00:07:02.220 --> 00:07:04.830
We're going to say that dot dot.

104
00:07:06.610 --> 00:07:07.650
Here's the reason.

105
00:07:07.650 --> 00:07:09.274
Are we getting the problem here?

106
00:07:16.129 --> 00:07:18.250
Actually, maybe that's correct.

107
00:07:19.380 --> 00:07:20.320
We'll see where we're going here.

108
00:07:21.390 --> 00:07:23.359
It is, I should have it like this.

109
00:07:27.689 --> 00:07:29.090
Sorry, for the confusion there.

110
00:07:31.930 --> 00:07:33.660
This is not pointing to the source folder.

111
00:07:33.660 --> 00:07:38.298
This is pointing to where we
can find the package JSON and

112
00:07:38.298 --> 00:07:43.320
the root of the project,
the package manifest.

113
00:07:43.320 --> 00:07:47.220
We're going to use the main
field in our package JSON here.

114
00:07:48.300 --> 00:07:50.670
This will be where we're
getting our code from.

115
00:07:50.670 --> 00:07:54.041
The point of this,
what we're trying to accomplish,

116
00:07:54.041 --> 00:07:58.950
Going back to this tsconfig, we just want
to refer to this the same way a consumer

117
00:07:58.950 --> 00:08:01.250
of this library would refer to this.

118
00:08:02.850 --> 00:08:04.130
All right, rootdir.

119
00:08:05.210 --> 00:08:07.891
This needs to be the parent folder, and

120
00:08:07.891 --> 00:08:13.174
that's because the root directory has
to contain all the TypeScript files,

121
00:08:13.174 --> 00:08:17.890
like the source files that we're
kind of compiling against.

122
00:08:17.890 --> 00:08:20.670
And we're gonna be referring to
stuff in that source folder,

123
00:08:20.670 --> 00:08:22.980
I mean through the reference here.

124
00:08:22.980 --> 00:08:28.300
But we want sort of the outer
project to be considered the rooter.

125
00:08:28.300 --> 00:08:30.399
And then finally we need to include.

126
00:08:32.299 --> 00:08:37.231
And that's just gonna be dot everything
in the test folder is included like and

127
00:08:37.231 --> 00:08:42.162
what that means is this TS config applies
to this folder all of its sub folders,

128
00:08:42.162 --> 00:08:45.524
alright one more thing we need
to do before the test and

129
00:08:45.524 --> 00:08:48.615
that's take care of Babel so
we're going to do.

130
00:08:48.615 --> 00:08:52.305
Make a file in the root of
our project called .babelrc.

131
00:08:52.305 --> 00:08:56.429
And what we're trying to accomplish
here is we want Babel to take care of

132
00:08:56.429 --> 00:09:00.074
converting that TypeScript to
JavaScript behind the scenes so

133
00:09:00.074 --> 00:09:05.380
we don't have a separate building our
test step, which is kind of annoying.

134
00:09:05.380 --> 00:09:08.795
We can just have these TS files
to just run in jest we set this

135
00:09:08.795 --> 00:09:12.480
up once we forget about it,
and it should all still work.

136
00:09:12.480 --> 00:09:16.079
So I have a babelrc file now,
I'm gonna go back to the course website so

137
00:09:16.079 --> 00:09:18.650
I can get the contents of that file.

138
00:09:18.650 --> 00:09:19.550
It's right here.

139
00:09:19.550 --> 00:09:22.770
So we're just bringing
in some presets here.

140
00:09:22.770 --> 00:09:26.150
So we're saying, we're targeting note 18.

141
00:09:26.150 --> 00:09:28.940
So that's gonna affect how
Babel transforms our code.

142
00:09:28.940 --> 00:09:33.093
It's gonna make sure that if we have
any language features that we use,

143
00:09:33.093 --> 00:09:37.179
which are not available in node 18,
it'll compile those down and,

144
00:09:37.179 --> 00:09:39.410
introduce polyfills where it has to.

145
00:09:39.410 --> 00:09:44.065
And then this preset here is what tells
Babel to convert the TypeScript to

146
00:09:44.065 --> 00:09:48.030
JavaScript behind the scenes,
you won't see the JS files.

147
00:09:48.030 --> 00:09:55.400
It's just happening to your
benefit automatically.

148
00:09:56.670 --> 00:09:59.197
And this is it,
we're ready to run yarn test now.

149
00:10:05.759 --> 00:10:08.059
And look at that,we have
some tests running.

150
00:10:10.350 --> 00:10:16.820
This is a good lesson
here of auto-formatting.

151
00:10:16.820 --> 00:10:20.420
So we can see that, okay,
the tests are running.

152
00:10:20.420 --> 00:10:22.220
Some of them are passing.

153
00:10:22.220 --> 00:10:23.550
These two are failing.

154
00:10:23.550 --> 00:10:28.290
And in both cases,
there's a big little piece of white

155
00:10:28.290 --> 00:10:32.800
space preceding those,
those lines of text.

156
00:10:32.800 --> 00:10:37.633
So whenever I see something like this,
the first thing I think of

157
00:10:37.633 --> 00:10:42.019
is has something added space
in a tagged template string,

158
00:10:42.019 --> 00:10:46.582
thinking it can safely indent,
you know a word and in doing so

159
00:10:46.582 --> 00:10:51.147
it's like added spaces to the string So,
let's go check for

160
00:10:51.147 --> 00:10:56.010
that first in our tests, and
we can, I'll look at this in a sec.

161
00:10:56.010 --> 00:11:01.900
&gt;&gt; I don't know if it's
formatted differently for you.

162
00:11:03.690 --> 00:11:10.474
I had a couple of leading white spaces
inside of stringify error value.

163
00:11:10.474 --> 00:11:11.690
&gt;&gt; That's probably it.

164
00:11:13.230 --> 00:11:14.480
Thanks for catching that.

165
00:11:14.480 --> 00:11:16.870
Yeah, it's folded, I didn't see it.

166
00:11:16.870 --> 00:11:18.440
There it is, that's it .

167
00:11:18.440 --> 00:11:21.510
It's this right here It's
outside of the dollar sign.

168
00:11:21.510 --> 00:11:26.280
That is our culprit And
they'll all pass now, nope,

169
00:11:26.280 --> 00:11:30.738
they won't we have to build it and
then it'll pass

170
00:11:36.135 --> 00:11:39.120
Great, okay, so
clearly our tests are working effectively.

171
00:11:42.000 --> 00:11:43.690
We check down the bug, we fix it.

172
00:11:43.690 --> 00:11:49.520
So we had a question in chat asking us,
why do we need this babelrc?

173
00:11:49.520 --> 00:11:52.590
If we were to say we want to
write our tests in JavaScript.

174
00:11:53.950 --> 00:11:58.430
Like Jest understands these
JavaScript files, right?

175
00:11:58.430 --> 00:12:05.630
If you look in Jest's documentation,
it'll tell you, name of testfile.test.js.

176
00:12:05.630 --> 00:12:08.695
Jest does not understand files,

177
00:12:08.695 --> 00:12:13.770
like tests that are written
in TypeScript itself.

178
00:12:13.770 --> 00:12:18.459
Now you have a different option than
what we set up here If you could have

179
00:12:18.459 --> 00:12:23.627
a separate step where you'd create,
I don't know a folder called tests dash

180
00:12:23.627 --> 00:12:28.876
build, and you could have TypeScript,
compile your tests, and then produce

181
00:12:28.876 --> 00:12:34.940
the resultant JavaScript jest tests,
which just would be happy to run for you.

182
00:12:34.940 --> 00:12:39.850
This is an alternative approach where
we're using Babel to sort of Transform

183
00:12:39.850 --> 00:12:44.606
the TypeScript into the JavaScript just
once on the fly behind the scenes,

184
00:12:44.606 --> 00:12:46.810
you don't have to think about it.

185
00:12:46.810 --> 00:12:50.103
You don't have stuff in your folder
where you have to worry about like,

186
00:12:50.103 --> 00:12:51.190
I just changed my tests.

187
00:12:51.190 --> 00:12:54.530
I have to build them again,
so that I can then run them.

188
00:12:54.530 --> 00:12:56.927
You could write scripts around this and
stuff but like,

189
00:12:56.927 --> 00:13:00.970
what you're effectively doing there is the
same thing that Babel is doing for you.

190
00:13:00.970 --> 00:13:04.847
It's making sure that you can write,
just like, you know,

191
00:13:04.847 --> 00:13:09.410
the reason you use Babel for library
code or app code, you can use modern

192
00:13:09.410 --> 00:13:14.930
language features, maybe even things
that Node 18 doesn't support yet.

193
00:13:14.930 --> 00:13:16.764
You can use TypeScript, and

194
00:13:16.764 --> 00:13:21.733
then Babel is doing the job of taking
that You know, doing the type checking,

195
00:13:21.733 --> 00:13:26.320
emitting JavaScript behind the scenes
can think of it maybe maybe it's

196
00:13:26.320 --> 00:13:30.460
in a temp folder somewhere not
not really important where it is.

197
00:13:30.460 --> 00:13:32.280
Then just sucks that in and

198
00:13:32.280 --> 00:13:37.510
it's the JavaScript that just runs
it's actually not an attempt folder.

199
00:13:39.050 --> 00:13:43.373
Jest knows how to talk to Babel, and so
it's just sort of part of an in-memory,

200
00:13:43.373 --> 00:13:44.930
you know, build pipeline.

201
00:13:46.770 --> 00:13:48.557
So by the time Jest is running a test,

202
00:13:48.557 --> 00:13:51.480
it knows it's not like
loading a file from disk.

203
00:13:51.480 --> 00:13:54.490
It's taking the output from Babel,
and it's doing that.

204
00:13:54.490 --> 00:13:56.470
And then why we had babelrc here?

205
00:13:56.470 --> 00:13:58.099
Babel can be used for a lot of things.

206
00:13:59.220 --> 00:14:01.000
We're using it for
two specific things here.

207
00:14:01.000 --> 00:14:06.049
One is down leveling our code so that
anything that we would write which is only

208
00:14:06.049 --> 00:14:10.788
supported in node 20 or node 20,
yeah, like 21 or whatever it is,

209
00:14:10.788 --> 00:14:15.880
it's all sort of simplified down
to what node 18 could handle.

210
00:14:15.880 --> 00:14:20.911
An example of this would be if
we used private static fields

211
00:14:20.911 --> 00:14:26.180
like hashtag fields,
that's an ES 2022 feature.

212
00:14:26.180 --> 00:14:28.010
I don't believe Node 18 supports that.

213
00:14:29.160 --> 00:14:33.693
So this will take care of compiling
that down into something runnable and

214
00:14:33.693 --> 00:14:39.560
then this is telling Babel, all right,
after you've compiled things down.

215
00:14:39.560 --> 00:14:42.603
Also strip away the types,
like do the type checking and

216
00:14:42.603 --> 00:14:45.780
then strip away the types and
you should be good.

217
00:14:45.780 --> 00:14:50.245
And Rugmat is asking on Twitch,
does Yarn just automatically run Babel or

218
00:14:50.245 --> 00:14:51.840
how does that work?

219
00:14:51.840 --> 00:14:54.590
It's Jest that knows how
to interact with Babel.

220
00:14:55.760 --> 00:14:59.489
If Jest finds that Babel is
present in the project And

221
00:14:59.489 --> 00:15:05.580
that there's a .babelrc file, it will call
into Babel like it knows how to do that.

222
00:15:05.580 --> 00:15:10.568
But it relies on Babel to do
the TypeScript sort of inline

223
00:15:10.568 --> 00:15:12.380
compile on the fly.

224
00:15:13.620 --> 00:15:15.668
Yeah, and so another question we got,

225
00:15:15.668 --> 00:15:19.570
we just we just had to do a build
to make sure our tests pass.

226
00:15:19.570 --> 00:15:25.097
This is proof, that references kind of
operate the way the way I said they do,

227
00:15:25.097 --> 00:15:29.607
which means we're pointing to
a package JSON effectively like

228
00:15:29.607 --> 00:15:33.270
a folder in which you
can find a package JSON.

229
00:15:33.270 --> 00:15:36.706
So the fact that we needed to build
it means that when we're referring

230
00:15:36.706 --> 00:15:40.850
to when we're running our tests,
we're pointing at the dist folder.

231
00:15:40.850 --> 00:15:45.828
We're not pointing at our source code
TypeScript, we're loading things from

232
00:15:45.828 --> 00:15:51.160
the dist folder and we're benefiting
from these declaration files here.

233
00:15:51.160 --> 00:15:53.050
This is our type information.

234
00:15:53.050 --> 00:15:59.003
I wonder if this illusion

235
00:15:59.003 --> 00:16:04.674
is not too clever here.

236
00:16:04.674 --> 00:16:07.090
Now, it knows the source code is there.

237
00:16:07.090 --> 00:16:11.400
It must be in this,
like, tsbuildinfo file,

238
00:16:11.400 --> 00:16:16.820
where this is a bunch of hashed files and
things like that.

239
00:16:16.820 --> 00:16:19.682
So, yeah,
it's probably mapping through this,

240
00:16:19.682 --> 00:16:22.660
kind of like the way a source map would.

241
00:16:22.660 --> 00:16:27.620
To find that like index.ts is ultimately
where this comes from because this

242
00:16:27.620 --> 00:16:30.730
stuff in the build folder
came from index.ts.

243
00:16:32.144 --> 00:16:36.687
But like if we were to delete
stuff from the dist folder,

244
00:16:36.687 --> 00:16:39.390
our tests would not be happy.

245
00:16:39.390 --> 00:16:42.430
That's where they're
actually running code.

246
00:16:42.430 --> 00:16:47.333
Which is cool because like we're actually
running our public API surface not a bunch

247
00:16:47.333 --> 00:16:51.614
of stuff you know that's internally in
specific files it keeps us you know

248
00:16:51.614 --> 00:16:56.378
this is great for like integration testing
where you really want to get an accurate

249
00:16:56.378 --> 00:17:00.728
representation of like What is this
library look like what does it look like

250
00:17:00.728 --> 00:17:04.803
from the outside world what's its
contract with the outside world and

251
00:17:04.803 --> 00:17:07.260
that's what we're testing against here

