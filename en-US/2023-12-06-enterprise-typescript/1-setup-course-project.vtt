WEBVTT

1
00:00:00.000 --> 00:00:02.309
So with that let's get started.

2
00:00:02.309 --> 00:00:06.880
The first thing you'll need to set
up to get the workshop project is

3
00:00:06.880 --> 00:00:09.092
you'll need to install Volta.

4
00:00:09.092 --> 00:00:12.033
And if you've taken
the TypeScript Fundamentals course or

5
00:00:12.033 --> 00:00:13.975
the Intermediate TypeScript course,

6
00:00:13.975 --> 00:00:17.226
we'll be working in exactly the same
repo that you already have.

7
00:00:17.226 --> 00:00:19.811
So you may be able to get away
with skipping these steps.

8
00:00:19.811 --> 00:00:21.952
So, you install Volta.

9
00:00:21.952 --> 00:00:27.699
The purpose of Volta is to make sure we're
all using the same Node.js version and

10
00:00:27.699 --> 00:00:28.808
Yarn version.

11
00:00:28.808 --> 00:00:34.015
If you want to use NVM or
some other tooling, we're gonna be

12
00:00:34.015 --> 00:00:39.237
using Yarn 3.6.4 and
Node 18.18.2, I think.

13
00:00:39.237 --> 00:00:44.503
So if you can give yourself some assurance
that you're using those versions or

14
00:00:44.503 --> 00:00:49.467
if the project happens to work with
your yarn and your node that's great.

15
00:00:49.467 --> 00:00:54.384
But if you have problems running
the project the first thing I

16
00:00:54.384 --> 00:00:56.613
would do is install Volta.

17
00:00:56.613 --> 00:00:59.279
So these are the installation
instructions,

18
00:00:59.279 --> 00:01:02.566
be sure to look at the terminal
output from this command.

19
00:01:02.566 --> 00:01:05.190
And do anything that it
tells you to do at the end.

20
00:01:05.190 --> 00:01:08.410
Sometimes it asks you to put
something in your bashrc or

21
00:01:08.410 --> 00:01:11.703
your cshrc kind of depends
on what shell you're using.

22
00:01:11.703 --> 00:01:15.473
It may ask you to close your terminal and
reopen it so

23
00:01:15.473 --> 00:01:20.298
that little snippet that you drop
into your terminal like startup

24
00:01:20.298 --> 00:01:23.732
script will run and
everything will be set up.

25
00:01:23.732 --> 00:01:29.741
And then you should be able to run volta
install node and it should work like that.

26
00:01:29.741 --> 00:01:33.408
If that runs successfully
you have installed Volta and

27
00:01:33.408 --> 00:01:36.762
you really don't need to
think about it anymore.

28
00:01:36.762 --> 00:01:41.970
It's just gonna automatically
find the versions that

29
00:01:41.970 --> 00:01:47.861
should be using in this project repo and
it'll install them.

30
00:01:47.861 --> 00:01:55.778
So then you're gonna want to check out
the the git repo and it is on Github.

31
00:01:55.778 --> 00:02:00.430
It's
github.com/mike-northtypescript-courses.

32
00:02:00.430 --> 00:02:05.727
So if you were to go to this page,
you could follow

33
00:02:05.727 --> 00:02:12.329
the instructions here where you
clone it using SSH or HTTPS.

34
00:02:12.329 --> 00:02:15.546
If you have problems with SSH keys,
you get an error like that.

35
00:02:15.546 --> 00:02:21.936
Just clone it using HTTPS to be
git clone and then this URL.

36
00:02:24.619 --> 00:02:28.129
Then you'll enter that folder and
you'll run yarn so

37
00:02:28.129 --> 00:02:33.540
just like So if I just cloned it.

38
00:02:37.332 --> 00:02:42.135
You run yarn and you'll know you're using
a modern version of yarn if you see

39
00:02:42.135 --> 00:02:45.525
little codes like this at
the beginning of each line.

40
00:02:45.525 --> 00:02:50.885
If you don't see that, you're probably
using a 1.x version of yarn which is very,

41
00:02:50.885 --> 00:02:53.802
very different than
modern versions of yarn.

42
00:02:53.802 --> 00:02:55.830
It's literally a separate code base.

43
00:02:55.830 --> 00:02:58.092
It's a totally different project.

44
00:02:58.092 --> 00:03:00.912
Some of the commands have parody but

45
00:03:00.912 --> 00:03:05.239
modern yarn doesn't have yarn update,
for example.

46
00:03:05.239 --> 00:03:08.273
But it has a whole bunch
of other cool stuff,

47
00:03:08.273 --> 00:03:11.889
things that will be important for
us in this course.

48
00:03:11.889 --> 00:03:13.519
So you should be able to do this.

49
00:03:16.686 --> 00:03:24.856
3.6.4, 18.18.2 that's my node and
my yarn version.

50
00:03:24.856 --> 00:03:32.120
Dimitar in chat I see like it doesn't
work, Volta doesn't work in WSL Ubuntu.

51
00:03:32.120 --> 00:03:33.430
I'm surprised by that.

52
00:03:33.430 --> 00:03:39.677
I've used Volta there and
it seems to work well for me.

53
00:03:39.677 --> 00:03:46.699
It's possible I have something
already installed that makes it work.

54
00:03:46.699 --> 00:03:51.057
But, yeah modern versions of node and
yarn and it should work.

55
00:03:51.057 --> 00:03:53.559
The key thing I'm gonna insist on really,

56
00:03:53.559 --> 00:03:56.486
you shouldn't be sensitive
to the node version.

57
00:03:56.486 --> 00:04:00.323
As long as you're using a version
newer than 18 you should be fine.

58
00:04:00.323 --> 00:04:03.865
Make sure this doesn't begin with a one.

59
00:04:03.865 --> 00:04:06.909
If this begins with a one,
you're gonna have a bad time.

60
00:04:06.909 --> 00:04:09.814
If this begins with the three,
you will see what I see, right?

61
00:04:09.814 --> 00:04:14.518
And you'll get some benefit of yarn
plugins which are gonna do some

62
00:04:14.518 --> 00:04:18.303
cool stuff for us, but
you can survive without them.

63
00:04:18.303 --> 00:04:21.054
So while y'all are working on that,

64
00:04:21.054 --> 00:04:25.058
let's look at the project
we're gonna be building.

65
00:04:25.058 --> 00:04:26.844
It's a little Slack app.

66
00:04:26.844 --> 00:04:32.515
So Slack who here is anyone unfamiliar
with Slack in the classroom?

67
00:04:32.515 --> 00:04:35.101
Of course not, like it's very
common thing that people use.

68
00:04:35.101 --> 00:04:40.692
For thinking about domain modeling what
are the objects that are important for

69
00:04:40.692 --> 00:04:41.630
a Slack app?

70
00:04:41.630 --> 00:04:46.403
You've got like a message,
a channel, a user.

71
00:04:46.403 --> 00:04:51.121
You've got a team which contains many
channels, teams on the left channels here.

72
00:04:51.121 --> 00:04:56.215
Messages here, this is a user up top,
this like that's the username.

73
00:04:56.215 --> 00:05:00.068
So we're gonna be modeling all of those
things and creating interfaces for

74
00:05:00.068 --> 00:05:02.524
them and
sort of threading them through an app.

75
00:05:02.524 --> 00:05:08.891
Which currently is sort of just JavaScript
style throwing variables through and

76
00:05:08.891 --> 00:05:13.395
hoping that the fields are there
will tighten things up.

77
00:05:13.395 --> 00:05:19.611
And worth noting just to keep the project
simple like some stuff here doesn't work.

78
00:05:19.611 --> 00:05:24.381
You may be able to create messages,
I'm not sure, but that's not important for

79
00:05:24.381 --> 00:05:25.166
the course.

80
00:05:25.166 --> 00:05:29.472
So you can find this project in

81
00:05:29.472 --> 00:05:34.819
the course repo in packages, chat.

82
00:05:34.819 --> 00:05:42.026
So packages/chat that's where you'll find
the source code for the slack project.

83
00:05:42.026 --> 00:05:44.637
So we'll mostly be working in there and

84
00:05:44.637 --> 00:05:49.082
you'll see a file structure that
kind of looks like this, right?

85
00:05:49.082 --> 00:05:53.905
This is a reasonably
well-organized JavaScript project.

86
00:05:53.905 --> 00:05:57.432
We have a source folder that
contains all of our source code,

87
00:05:57.432 --> 00:06:01.179
an index.js entry point,
a folder for low-level utilities.

88
00:06:01.179 --> 00:06:05.167
These are functions that format dates,
things like that.

89
00:06:05.167 --> 00:06:09.865
We have a UI folder for React components
and then we have a data layer,

90
00:06:09.865 --> 00:06:14.320
which effectively the little
functions which when invoked go and

91
00:06:14.320 --> 00:06:16.357
fetch something from an API.

92
00:06:16.357 --> 00:06:19.296
And that API is gonna be
running on your machine.

93
00:06:19.296 --> 00:06:24.022
There's within this project
at the root level there's

94
00:06:24.022 --> 00:06:26.944
it's kind of a cool little setup.

95
00:06:26.944 --> 00:06:28.896
There's a db.json file.

96
00:06:28.896 --> 00:06:30.607
This is your database in here.

97
00:06:30.607 --> 00:06:33.739
It's like every single slack channel,
every single slack message.

98
00:06:33.739 --> 00:06:38.743
So this is a free standing project where
you're running your own database back end.

99
00:06:38.743 --> 00:06:41.638
We're not gonna get into those
too much but they are there.

100
00:06:41.638 --> 00:06:45.632
And of course we're gonna be
focusing mostly on the frontend.

101
00:06:45.632 --> 00:06:48.969
Yeah, sorry so you're going through this.

102
00:06:48.969 --> 00:06:52.332
There's the server and the database.

103
00:06:52.332 --> 00:06:58.769
So there's also an API examples file
which is kind of interesting to look at.

104
00:06:58.769 --> 00:07:06.270
So I'm here in my chat folder and
I have this API_EXAMPLES.http file.

105
00:07:06.270 --> 00:07:07.946
This here is just a text file but

106
00:07:07.946 --> 00:07:11.824
you may notice I've got this little
send request thing running on top.

107
00:07:11.824 --> 00:07:17.289
This is coming from REST Client.

108
00:07:17.289 --> 00:07:23.179
So if you're using VS Code, you'll
be fine if you're not using VS Code,

109
00:07:23.179 --> 00:07:26.032
like if you're a diehard Vim user.

110
00:07:26.032 --> 00:07:31.755
Respects you can you can learn
things that I can't learn.

111
00:07:31.755 --> 00:07:36.152
So, but this is what's generating
these little send request things.

112
00:07:36.152 --> 00:07:42.620
And if I go to packages/chat and
I run this projec we're running yarn dev.

113
00:07:42.620 --> 00:07:46.328
Is after I've run yarn to install
all the other dependencies.

114
00:07:46.328 --> 00:07:51.047
I shouldn't be able to click this, oops,

115
00:07:51.047 --> 00:07:54.990
all right maybe it's not working.

116
00:07:54.990 --> 00:08:00.714
Well it's not important but this is a
great way to have API documentation here.

117
00:08:00.714 --> 00:08:05.019
Maybe I'm running on a different
port at this point but

118
00:08:05.019 --> 00:08:09.899
this is sort of like a little mini
API doc, just as a text file.

119
00:08:09.899 --> 00:08:14.894
This is it's almost like
Postman where you're making

120
00:08:14.894 --> 00:08:17.507
a request to an API of sorts.

121
00:08:17.507 --> 00:08:23.045
Okay, with that let's get
hands on let's start building

122
00:08:23.045 --> 00:08:29.500
a TypeScript library from scratch,
zero to one is what I call this.

123
00:08:29.500 --> 00:08:30.913
&gt;&gt; This Volta thing's pretty cool.

124
00:08:30.913 --> 00:08:35.721
&gt;&gt; It is written in Rust,
and the cool thing about it

125
00:08:35.721 --> 00:08:40.529
is it will install if you like,
grab a project and

126
00:08:40.529 --> 00:08:46.300
I can show you where the Volta
stuff is in the package JSON.

127
00:08:46.300 --> 00:08:51.247
It's down here so Volta finds this and
you don't have either

128
00:08:51.247 --> 00:08:55.612
of these versions and
you just run like yarn install.

129
00:08:55.612 --> 00:08:59.441
It will download yarn 3.6.4 on the fly and

130
00:08:59.441 --> 00:09:04.166
then proceed with invoking
the command that you want it.

131
00:09:04.166 --> 00:09:05.103
&gt;&gt; That's so cool.

132
00:09:05.103 --> 00:09:07.496
&gt;&gt; No middle step so especially for

133
00:09:07.496 --> 00:09:12.466
things like GitHub Actions there's
a Volta GitHub Action there.

134
00:09:12.466 --> 00:09:17.621
You can sort of just toss Volta in
there and then all you need to worry

135
00:09:17.621 --> 00:09:23.348
about is this little bit in your
package.json and it will work properly.

136
00:09:23.348 --> 00:09:27.520
There's no separate line where you're like
go and obtain this thing and set it up and

137
00:09:27.520 --> 00:09:30.536
verify that the that's,
that versions puts up this thing.

138
00:09:30.536 --> 00:09:32.558
&gt;&gt; Yeah, that's huge for Github Actions.

139
00:09:32.558 --> 00:09:34.160
&gt;&gt; It is huge.

140
00:09:34.160 --> 00:09:39.969
I have this testing against multiple node
versions which is makes it really easy.

141
00:09:39.969 --> 00:09:44.213
And then the Volta action you can
even specify which node you want.

142
00:09:44.213 --> 00:09:48.813
So if you have like a matrix of node
compatibility testing you could say like

143
00:09:48.813 --> 00:09:49.914
do 18 and 20.

144
00:09:49.914 --> 00:09:53.879
You can check out the GitHub Actions
on this workshop project if you want

145
00:09:53.879 --> 00:09:55.147
to see how that works.

146
00:09:55.147 --> 00:09:59.115
I also have it testing against a range
of TypeScript compiler versions but

147
00:09:59.115 --> 00:10:00.528
that's not using Volta.

148
00:10:00.528 --> 00:10:05.228
Volta is just for
these kind of toolchain type things.

149
00:10:05.228 --> 00:10:09.438
So I'm just running to test TypeScript,

150
00:10:09.438 --> 00:10:17.154
I'm running like yarnadd_d across
the whole workspace, the whole repo.

151
00:10:17.154 --> 00:10:21.963
And that's what ends up bumping
TypeScript up or down so I can make sure

152
00:10:21.963 --> 00:10:26.868
it's not going to break with a new
versions of TypeScript but I love it.

153
00:10:26.868 --> 00:10:28.892
It's written in Rust so it's super snappy.

154
00:10:28.892 --> 00:10:30.630
It's like really, really fast.

155
00:10:30.630 --> 00:10:34.561
Doesn't really add much overhead at all
on top of what you'd expect to happen

156
00:10:34.561 --> 00:10:35.176
normally.

