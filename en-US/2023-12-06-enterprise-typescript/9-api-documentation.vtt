WEBVTT

1
00:00:00.240 --> 00:00:05.272
So, important to have clean git
history as we do this next thing.

2
00:00:07.351 --> 00:00:11.200
We're gonna add API documentation
on top of API Extractor.

3
00:00:11.200 --> 00:00:14.882
We already installed the tool
that we need for this,

4
00:00:14.882 --> 00:00:20.080
which was @microsoft/api-documenter,
and we're gonna run it now.

5
00:00:21.220 --> 00:00:27.470
Yarn, api-documenter markdown.

6
00:00:27.470 --> 00:00:32.338
That's the type of documentation we want.

7
00:00:32.338 --> 00:00:38.309
-i is for input,
temp -o is for output, docs.

8
00:00:39.600 --> 00:00:43.778
And if we look at what's in
this temp file or temp folder,

9
00:00:43.778 --> 00:00:48.060
there's our API report,
the markdown that we looked at.

10
00:00:48.060 --> 00:00:51.963
And look at this json.

11
00:00:51.963 --> 00:00:58.100
This is some meta information
here describing modifiers.

12
00:00:58.100 --> 00:01:02.496
All right, here's a package, chat
standard lib, and here's an entry point,

13
00:01:02.496 --> 00:01:07.560
here's a class, and it's called deferred,
here's a description of the class.

14
00:01:07.560 --> 00:01:13.500
So, if you wanted to write your own
documentation, you could read this file,

15
00:01:13.500 --> 00:01:20.270
it's a very nice organized way of sort
of articulating what's in that rollup.

16
00:01:20.270 --> 00:01:23.960
So, let's press enter and see what
the markdown version of this looks like.

17
00:01:25.550 --> 00:01:26.860
We should have a new docs folder.

18
00:01:27.940 --> 00:01:29.450
There it is.

19
00:01:29.450 --> 00:01:32.260
And I'm going to open up index.md.

20
00:01:32.260 --> 00:01:36.010
We'll preview this, just so
we can see it real well.

21
00:01:37.030 --> 00:01:39.996
And you see here,
we first got a list of packages.

22
00:01:39.996 --> 00:01:43.850
So, this is telling you maybe in a large
project you have many libraries, and

23
00:01:43.850 --> 00:01:46.330
this could be your entry point for them.

24
00:01:46.330 --> 00:01:49.650
If we go into that,
here are my classes, here's deferred.

25
00:01:49.650 --> 00:01:52.090
This is coming right
from my code comments.

26
00:01:52.090 --> 00:01:56.452
Here's my stringify error function with
a clear description that this is a beta

27
00:01:56.452 --> 00:01:59.050
thing, like it's a beta function.

28
00:01:59.050 --> 00:02:02.830
But if we click on that,
it will give us the type decoration and

29
00:02:02.830 --> 00:02:04.440
here are the parameters.

30
00:02:04.440 --> 00:02:06.160
This is the return type.

31
00:02:06.160 --> 00:02:11.141
And you can use JS.comments or
the same kinds of comments

32
00:02:11.141 --> 00:02:17.010
you're likely using to describe
your code as you do today.

33
00:02:17.010 --> 00:02:21.300
And this sort of gets spit out for
free as part of your build.

34
00:02:21.300 --> 00:02:24.798
Nice little banner up here that
even says it's a beta preview,

35
00:02:24.798 --> 00:02:26.340
maybe subject to change.

36
00:02:26.340 --> 00:02:28.284
I'm somewhere in that big config file,

37
00:02:28.284 --> 00:02:30.580
there's a way to even
customize this message.

38
00:02:32.280 --> 00:02:36.615
So, what I like about this is we can kinda
string it all together and make it so,

39
00:02:36.615 --> 00:02:38.587
when you're making a code change,

40
00:02:38.587 --> 00:02:42.340
the docs kind of update
automatically as part of your build.

41
00:02:42.340 --> 00:02:47.387
When you open a pull request, you get
the change to the public API surface,

42
00:02:47.387 --> 00:02:52.140
the change to the docs,
the code change, all coming in at once.

43
00:02:52.140 --> 00:02:57.240
And that lets you, in a large team, have
great conversations around like all right.

44
00:02:57.240 --> 00:02:59.583
You made a public API change.

45
00:02:59.583 --> 00:03:01.780
Did you think about what's going to break?

46
00:03:01.780 --> 00:03:03.270
Who consumes this?

47
00:03:03.270 --> 00:03:05.060
In what way did we change this?

48
00:03:05.060 --> 00:03:07.602
Is it a backwards compatible change, or

49
00:03:07.602 --> 00:03:11.140
are we gonna have to update
some things somewhere?

50
00:03:11.140 --> 00:03:14.347
And then the docs are there as well
where you can say, okay, well,

51
00:03:14.347 --> 00:03:16.595
so how are we explaining
this change to users?

52
00:03:16.595 --> 00:03:19.681
Like you're exposing a new class here,
what should it look like?

53
00:03:19.681 --> 00:03:24.237
But it's a much more holistic thing to
review than just like a couple lines of

54
00:03:24.237 --> 00:03:26.738
TypeScript code that are being altered.

55
00:03:26.738 --> 00:03:31.060
And because it's marked down
especially if you use GitHub.

56
00:03:31.060 --> 00:03:34.844
Markdown diffs have great support
even when it's like rendered,

57
00:03:34.844 --> 00:03:40.560
you'll get a little gutter like indication
that like this, this is the diff here.

58
00:03:40.560 --> 00:03:45.486
So, I like the kinds of code review
discussions that happen when all of

59
00:03:45.486 --> 00:03:48.003
this is sort of stitched together.

60
00:03:48.003 --> 00:03:50.290
Let's add some new NPM scripts.

61
00:03:50.290 --> 00:03:54.921
I've been getting some help from
class to make sure that I'm not

62
00:03:54.921 --> 00:03:59.656
forgetting to build before I run
my API docs and things like that.

63
00:03:59.656 --> 00:04:03.210
So, let's build three new scripts.

64
00:04:03.210 --> 00:04:11.030
One's gonna be API report, and
that's gonna be yarn, api-extractor run.

65
00:04:11.030 --> 00:04:14.188
We're not gonna have --local, and
I will show you why in a moment.

66
00:04:14.188 --> 00:04:19.710
Next, api-docs.

67
00:04:19.710 --> 00:04:24.391
And here, we're gonna have
the same command that I just ran.

68
00:04:26.509 --> 00:04:27.763
Right there at the bottom.

69
00:04:39.654 --> 00:04:41.390
Exactly the same as what we just ran.

70
00:04:43.470 --> 00:04:47.499
And finally, build-with-docs.

71
00:04:49.370 --> 00:04:55.539
And here we're just
gonna to do yarn build,

72
00:04:55.539 --> 00:05:01.610
yarn api-report, yarn api-docs.

73
00:05:01.610 --> 00:05:07.860
So, it's gonna do the build for us,
which will give us that updated index.dts.

74
00:05:07.860 --> 00:05:11.096
It's gonna run api-extractor which
will analyse our library, and

75
00:05:11.096 --> 00:05:13.350
it'll give us those nice rollup files.

76
00:05:13.350 --> 00:05:17.304
And it'll put the json
file into the temp folder,

77
00:05:17.304 --> 00:05:22.770
which this json file is the input for
the API documentation tool.

78
00:05:22.770 --> 00:05:26.010
And then finally,
it'll generate all of the markdown there.

79
00:05:26.010 --> 00:05:29.490
So with that,
I'm gonna make one more commit.

80
00:05:34.995 --> 00:05:36.890
And we're gonna do a sample code change.

81
00:05:36.890 --> 00:05:40.350
And then we're gonna run this command and
see what happens.

82
00:05:40.350 --> 00:05:46.433
We would see in a pull request if
someone were going to make a change,

83
00:05:46.433 --> 00:05:50.490
and we'll make a really
tiny little change,

84
00:05:50.490 --> 00:05:56.300
where in the stringifyError function,
which is an index.ts.

85
00:05:56.300 --> 00:05:59.460
We're just gonna make this
optional argument required.

86
00:06:00.710 --> 00:06:03.151
Just delete the question mark, save it.

87
00:06:04.690 --> 00:06:10.209
Yarn, build-with-docs.

88
00:06:10.209 --> 00:06:13.635
It's doing the build,
doing api-extraction,

89
00:06:13.635 --> 00:06:16.170
it's rendering new markdown docs.

90
00:06:16.170 --> 00:06:18.670
We got a little warning here.

91
00:06:18.670 --> 00:06:20.380
And this is what you
would see as a developer.

92
00:06:20.380 --> 00:06:26.778
So, I told you we'd discuss like,
what is the --local argument for

93
00:06:26.778 --> 00:06:32.201
api-extractor mean, and
the fact that we dropped it means

94
00:06:32.201 --> 00:06:37.970
it's not gonna automatically
update that ETC markdown file.

95
00:06:37.970 --> 00:06:39.560
This one here.

96
00:06:39.560 --> 00:06:40.710
This hasn't changed.

97
00:06:40.710 --> 00:06:42.780
Look at my gutter on the right.

98
00:06:42.780 --> 00:06:45.060
No indication of git changes here.

99
00:06:45.060 --> 00:06:49.806
But in the temp folder,
this is sort of like a staging area, and

100
00:06:49.806 --> 00:06:53.310
note that we don't have
a question mark here.

101
00:06:53.310 --> 00:06:58.420
This is not checked into git, so we're
not seeing a git diff of any kind here.

102
00:06:58.420 --> 00:07:02.177
But if we compare the two,
that one has no question mark,

103
00:07:02.177 --> 00:07:05.310
this one absolutely has a question mark.

104
00:07:05.310 --> 00:07:08.840
And we're being prompted,
if we really wanna make this change.

105
00:07:08.840 --> 00:07:13.160
To copy the temp, the file and
temp into the ETC folder.

106
00:07:13.160 --> 00:07:15.530
That's really what --local does.

107
00:07:15.530 --> 00:07:19.340
So, where might this behavior be useful?

108
00:07:19.340 --> 00:07:23.461
You might have in CI something
that would run this command, and

109
00:07:23.461 --> 00:07:25.340
at this point it would fail.

110
00:07:26.590 --> 00:07:30.755
You would say,
you have a code change that is not

111
00:07:30.755 --> 00:07:35.050
represented in the API surface report.

112
00:07:35.050 --> 00:07:37.300
There is a misalignment there.

113
00:07:37.300 --> 00:07:38.800
Sometimes you want that to fail.

114
00:07:38.800 --> 00:07:43.636
This would be what would catch a case
where someone just made the code change

115
00:07:43.636 --> 00:07:48.934
and then opened a pull request, and
it's they didn't run the api-extractor and

116
00:07:48.934 --> 00:07:51.890
they didn't run api-documenter.

117
00:07:51.890 --> 00:07:55.639
And that's valuable,
that's why I leave --local off here so

118
00:07:55.639 --> 00:07:59.470
that you'd make sure that this
command finishes successfully.

119
00:07:59.470 --> 00:08:00.070
It's failed.

120
00:08:01.750 --> 00:08:07.610
Well, sorry, there's you would configure
this being a failing error you can,

121
00:08:07.610 --> 00:08:10.106
in the config set it up to fail, but

122
00:08:10.106 --> 00:08:14.600
that's why omitting --local
would be of benefit here.

123
00:08:14.600 --> 00:08:16.760
So, we'll just do the manual step here.

124
00:08:22.899 --> 00:08:24.040
Okay?

125
00:08:24.040 --> 00:08:25.337
And now we can run this again.

126
00:08:27.568 --> 00:08:29.575
You probably don't have to
run it again this time,

127
00:08:29.575 --> 00:08:32.510
because it didn't actually fail,
it just showed a warning.

128
00:08:32.510 --> 00:08:37.720
But there's a lot of tunability in terms
of what's a warning and what's an error.

129
00:08:37.720 --> 00:08:41.626
And we can look at this is what the PR
would look like this these are the files

130
00:08:41.626 --> 00:08:45.420
that were touched so here of course
we have the code change, right?

131
00:08:45.420 --> 00:08:49.526
There's the removal of the question
mark this second argument is no longer

132
00:08:49.526 --> 00:08:50.185
optional.

133
00:08:50.185 --> 00:08:55.031
Here is how the API surface report change,
so this would be where you'd look you know

134
00:08:55.031 --> 00:08:58.442
maybe there are a bunch of
different changes in this PR, and

135
00:08:58.442 --> 00:09:03.038
maybe only one of them actually affects
the public API surface of this library.

136
00:09:03.038 --> 00:09:06.787
And as a code reviewer,
you would look at this and you would say,

137
00:09:06.787 --> 00:09:11.165
okay, if I can see exactly how consumers
of this library will be affected,

138
00:09:11.165 --> 00:09:12.987
this is a breaking change now.

139
00:09:12.987 --> 00:09:16.630
Anyone who depends on not needing
to pass that second argument,

140
00:09:16.630 --> 00:09:19.270
they're gonna need to
update their code now.

141
00:09:19.270 --> 00:09:20.390
So, let's talk about that.

142
00:09:20.390 --> 00:09:22.840
Maybe that's what we wanna do,
but who knows?

143
00:09:22.840 --> 00:09:27.816
And then finally,
there's the update to the markdown file,

144
00:09:27.816 --> 00:09:30.215
documenting this function.

145
00:09:30.215 --> 00:09:33.942
This is a nice complete code change here,

146
00:09:33.942 --> 00:09:38.207
docs API surface report and
the change itself.

147
00:09:40.623 --> 00:09:42.017
I'm gonna make a quick commit.

148
00:09:51.847 --> 00:09:54.570
And congrats,
we have a small working library.

149
00:09:54.570 --> 00:09:57.360
This is where we're gonna zoom out and
start working with the Slack app.

150
00:09:57.360 --> 00:10:00.620
But this is this is like zero to one.

151
00:10:00.620 --> 00:10:04.590
We built a library that that
compiled TypeScript to JavaScript.

152
00:10:04.590 --> 00:10:08.140
We have linting with ES lint with some
TypeScript specific rules in place.

153
00:10:08.140 --> 00:10:12.327
We have tests with Jess we brought in
Babel to sort of handle the TypeScript

154
00:10:12.327 --> 00:10:13.407
flavor of tests for

155
00:10:13.407 --> 00:10:17.710
us without requiring any special
build scripts or anything like that.

156
00:10:17.710 --> 00:10:21.786
We even took a little side journey and
looked at how we could have a nice

157
00:10:21.786 --> 00:10:25.798
like watch command using
concurrently TypeScript --watch, and

158
00:10:25.798 --> 00:10:27.540
just in watch mode.

159
00:10:27.540 --> 00:10:32.420
And then at the end here, we talked
about API surface change detection.

160
00:10:32.420 --> 00:10:36.611
And a nice, simple API documentation tool,
which if you're,

161
00:10:36.611 --> 00:10:41.577
if you're in a situation like what we
have here, and you're not really like

162
00:10:41.577 --> 00:10:46.157
publishing docs to a website or
something, you certainly could, but

163
00:10:46.157 --> 00:10:51.700
this is nice to just like having GitHub
as internal documentation for an app.

164
00:10:51.700 --> 00:10:55.515
And you can change where the docs are
written to so they're all in one place,

165
00:10:55.515 --> 00:10:57.920
and they can sort of be browsed together.

166
00:10:57.920 --> 00:11:03.238
But this is a great solution for
an app team that just wants encapsulation

167
00:11:03.238 --> 00:11:07.770
around different components of
their app as opposed to sort of

168
00:11:07.770 --> 00:11:12.890
an open-source library,
where you're publishing these docs.

169
00:11:12.890 --> 00:11:17.508
I use it for that too, but sometimes
people want a little more style and

170
00:11:17.508 --> 00:11:20.880
some docs that look a little
bit more interesting.

171
00:11:20.880 --> 00:11:21.870
These are super simple.

172
00:11:21.870 --> 00:11:24.730
They come straight from
TypeScript's type information.

173
00:11:24.730 --> 00:11:30.389
And I really love sort of the alpha-beta
DTS rollups, which let you evolve things

174
00:11:30.389 --> 00:11:36.229
in place, knowing how you're gonna affect
various different types of consumers.

