WEBVTT

1
00:00:00.360 --> 00:00:03.760
Okay, we're ready to create our
little bit of source code here.

2
00:00:03.760 --> 00:00:08.879
So going back to your terminal, or you
could do this in your editor if you want,

3
00:00:08.879 --> 00:00:11.533
we're gonna make a file called source.

4
00:00:11.533 --> 00:00:13.877
And we're gonna create a TypeScript file,

5
00:00:16.737 --> 00:00:21.034
Index.ts within that folder, here it is.

6
00:00:21.034 --> 00:00:26.142
And if you go to the course website,
definitely go to the course website for

7
00:00:26.142 --> 00:00:29.478
this, I have a bunch of
starter code over there.

8
00:00:33.279 --> 00:00:40.900
This whole thing, grab this and
drop it into that source code file.

9
00:00:40.900 --> 00:00:44.990
And we'll look at what these things do but
that's your starting point code.

10
00:00:44.990 --> 00:00:46.330
We have two things in this file.

11
00:00:47.840 --> 00:00:49.900
We have a function and a class.

12
00:00:51.320 --> 00:00:57.800
The function appears to take
an instance of the error class.

13
00:00:57.800 --> 00:01:00.266
And create a string representation of it.

14
00:01:00.266 --> 00:01:02.904
Maybe we're printing this out
to the console or something.

15
00:01:05.943 --> 00:01:10.807
Deferred, you can think of this
like an inside out promise

16
00:01:10.807 --> 00:01:15.980
where you have access to resolve and
reject from the outside.

17
00:01:17.270 --> 00:01:20.810
Just like a promise and
you also have access to the promise.

18
00:01:20.810 --> 00:01:24.860
So this is sometimes useful if you
wanna pass a promise around and

19
00:01:24.860 --> 00:01:27.485
let someone from the outside say when this

20
00:01:27.485 --> 00:01:32.139
work is done as opposed to the work
being represented inside the promise.

21
00:01:35.129 --> 00:01:38.633
These are two things that I sort of
pulled out at random from the chat app or

22
00:01:38.633 --> 00:01:40.134
will end up depending on this.

23
00:01:44.955 --> 00:01:47.239
It's time for us to try to build so

24
00:01:47.239 --> 00:01:51.903
actually you shouldn't have this
problem and I currently don't.

25
00:01:51.903 --> 00:01:56.126
There is no dist folder here,
I would delete any

26
00:01:56.126 --> 00:02:01.103
existing dist folder and
now I'm gonna run yarn build.

27
00:02:01.103 --> 00:02:01.784
Let's see what we get.

28
00:02:04.279 --> 00:02:09.282
A dist folder appears, it's dark gray here
which to me that means it's git ignored.

29
00:02:09.282 --> 00:02:12.144
That's how my face code is set up.

30
00:02:12.144 --> 00:02:15.155
We've got an index js.

31
00:02:15.155 --> 00:02:21.637
That's interesting, I didn't save
this file [LAUGH] or this one.

32
00:02:21.637 --> 00:02:28.040
[LAUGH] Not the first
time that's happened.

33
00:02:28.040 --> 00:02:29.530
Hey, there it is.

34
00:02:29.530 --> 00:02:36.270
So, here's our deferred class and
there is our stringifyErrorValue function.

35
00:02:36.270 --> 00:02:40.874
Note, we've got
exports.stringifyErrorValue here.

36
00:02:40.874 --> 00:02:45.342
We've got a stringifyErrorValue,
stringifyError and

37
00:02:45.342 --> 00:02:50.270
then we should have
exports.Deferred equals deferred.

38
00:02:50.270 --> 00:02:54.870
This is indicating that it's
a common JS module, right?

39
00:02:54.870 --> 00:02:57.734
We're not seeing any export default here.

40
00:02:57.734 --> 00:03:00.750
We said we were spitting
out CommonJS right here.

41
00:03:05.670 --> 00:03:10.450
And we could have it spit out other types
of modules if we wanted to, like AMD.

42
00:03:10.450 --> 00:03:13.110
That's interesting,
haven't seen those in a while.

43
00:03:15.260 --> 00:03:17.680
It's gonna see a lot of requires, yep.

44
00:03:17.680 --> 00:03:24.331
There you go, there's an AMD module But
we'll stick with CommonJS.

45
00:03:29.124 --> 00:03:30.480
So there we go.

46
00:03:30.480 --> 00:03:34.966
It's a great time to make
a git commit because our

47
00:03:34.966 --> 00:03:39.680
build is working and
make sure you add everything.

48
00:03:41.730 --> 00:03:46.678
You may notice that even though we're
within a sub part of our workshop project,

49
00:03:46.678 --> 00:03:52.290
the yarn.lock, there's one yarn.lock file,
it's at the root of our project.

50
00:03:52.290 --> 00:03:57.286
So don't fear in the habit of
doing something like this,

51
00:03:57.286 --> 00:04:02.720
that's not gonna catch the lock file,
just add everything.

52
00:04:02.720 --> 00:04:06.247
And we're just sanity checking this to
make sure that our dist folder is not in

53
00:04:06.247 --> 00:04:07.850
there, it's not there.

54
00:04:07.850 --> 00:04:10.698
This is our first time checking
in git ignore, so, great.

55
00:04:10.698 --> 00:04:17.278
We'll say, Build is working, great.

56
00:04:22.135 --> 00:04:25.635
Next up we'll install the linter eslint.

57
00:04:25.635 --> 00:04:31.524
So we're gonna go yarn add -D for
dev dependency, eslint.

58
00:04:34.665 --> 00:04:35.443
Did we do this already?

59
00:04:35.443 --> 00:04:36.570
I feel like we might have.

60
00:04:36.570 --> 00:04:38.709
Nope, that's new.

61
00:04:41.473 --> 00:04:44.963
Look at this, look what happened here.

62
00:04:44.963 --> 00:04:52.130
I said to install eslint and
I got @types eslint for free.

63
00:04:53.390 --> 00:04:57.602
What we're seeing here is a modern
version of yarn supporting

64
00:04:57.602 --> 00:05:00.359
a plugin that's doing some work for us.

65
00:05:00.359 --> 00:05:05.542
So you can install a yarn plugin.

66
00:05:05.542 --> 00:05:08.370
It's called their TypeScript plugin.

67
00:05:08.370 --> 00:05:10.510
It lives inside your repo.

68
00:05:10.510 --> 00:05:16.443
And the purpose of this particular
plugin is when you install a package,

69
00:05:16.443 --> 00:05:21.512
it will install the @types package
too which is kind of nice.

70
00:05:21.512 --> 00:05:26.829
And then it also will attempt to
match the same version constraint.

71
00:05:26.829 --> 00:05:29.852
So if I did this, please actually do this.

72
00:05:33.432 --> 00:05:38.812
Latest eslint seven, that's disappointing.

73
00:05:41.673 --> 00:05:42.533
I guess it doesn't do that.

74
00:05:42.533 --> 00:05:43.405
I guess it just goes for latest.

75
00:05:45.885 --> 00:05:47.383
We'll just do that.

76
00:05:47.383 --> 00:05:51.197
Eslint making me a liar.

77
00:05:51.197 --> 00:05:52.886
All right, we'll run Yarn one more time.

78
00:05:56.271 --> 00:06:00.410
Great, we've got eslint @types eslint.

79
00:06:01.720 --> 00:06:05.471
Now, we have a need for
another config file, right?

80
00:06:05.471 --> 00:06:10.789
Linters are tunable, you can decide
which rules you want, which rules you

81
00:06:10.789 --> 00:06:16.450
don't want, which files should various
things apply to and they're big.

82
00:06:16.450 --> 00:06:18.700
They have a lot of different options.

83
00:06:18.700 --> 00:06:21.601
Thankfully, we have a nice
little CLI option, yet

84
00:06:21.601 --> 00:06:24.308
again, to create a good starting point for
us.

85
00:06:24.308 --> 00:06:28.396
So, we're gonna run yarn eslint -- init.

86
00:06:31.417 --> 00:06:35.385
And we get a little choose your own
adventure CLI thing going on here where I

87
00:06:35.385 --> 00:06:38.469
can use my up and
down arrow keys to pick different stuff.

88
00:06:39.720 --> 00:06:42.370
So, here is what we're going to pick.

89
00:06:42.370 --> 00:06:46.570
And if you're still catching up,
look on the course website.

90
00:06:46.570 --> 00:06:50.820
The option that I'm going to choose
is listed very clearly there.

91
00:06:50.820 --> 00:06:53.720
So it's asking us how do
I want to use eslint?

92
00:06:53.720 --> 00:06:57.086
I would say detect syntax and
find problems.

93
00:06:57.086 --> 00:07:00.643
I tend to not pick this
option on the bottom.

94
00:07:00.643 --> 00:07:03.205
Code style,
I use something like prettier for and

95
00:07:03.205 --> 00:07:07.420
I would prefer that to be just like run as
something that happens before the build.

96
00:07:08.430 --> 00:07:13.209
I don't like when people are getting
errors because they didn't add a space

97
00:07:13.209 --> 00:07:17.329
before a brace or something like,
people can get error fatigue.

98
00:07:18.330 --> 00:07:22.960
And this is also part of having
useful constraints that aren't overly

99
00:07:22.960 --> 00:07:25.340
annoying and confining.

100
00:07:25.340 --> 00:07:28.576
So I just wanna use my linter to
check syntax and find problems.

101
00:07:28.576 --> 00:07:31.516
Code style I wanna handle not
by bugging developers, but

102
00:07:31.516 --> 00:07:35.191
by running a tool that autoformats all
of the code in a consistent way and

103
00:07:35.191 --> 00:07:38.944
they don't have to think about it,
they don't have to address errors.

104
00:07:38.944 --> 00:07:42.211
By the time they open a pull
request it's already taken care of.

105
00:07:45.206 --> 00:07:48.010
All right, what type of modules
are we using for this project?

106
00:07:48.010 --> 00:07:49.890
We're using JavaScript modules.

107
00:07:49.890 --> 00:07:53.030
Keep in mind, this is about your
source code, not your build output.

108
00:07:53.030 --> 00:07:56.770
We have CommonJS, build output, but
we're linting our source code and

109
00:07:56.770 --> 00:07:59.060
that's JavaScript modules.

110
00:07:59.060 --> 00:08:00.480
Which framework are we using?

111
00:08:00.480 --> 00:08:03.710
So, depending on your
choice you make here,

112
00:08:03.710 --> 00:08:09.575
ESLint will install a nice React.js plugin
that'll lint special React things or

113
00:08:09.575 --> 00:08:13.410
a Vue plugin that'll do that like lint for
Vue stuff.

114
00:08:15.040 --> 00:08:20.090
This is just a library, it's not React or
Vue, so we'll choose none of these.

115
00:08:20.090 --> 00:08:22.056
Does your project use TypeScript?

116
00:08:22.056 --> 00:08:22.680
You bet it does.

117
00:08:25.912 --> 00:08:27.320
Where does your code run?

118
00:08:27.320 --> 00:08:30.395
Be careful here, there's a little
different interaction you have to do.

119
00:08:30.395 --> 00:08:34.773
You can go down to node and
check that, this is a multi select.

120
00:08:34.773 --> 00:08:36.670
So you're gonna want to check both.

121
00:08:36.670 --> 00:08:38.160
You can also check neither.

122
00:08:39.210 --> 00:08:41.243
If you only checked one or the other,

123
00:08:41.243 --> 00:08:45.030
it would affect kind of
what you're allowed to do.

124
00:08:45.030 --> 00:08:49.386
So for example, if you're only
writing code for the browser,

125
00:08:49.386 --> 00:08:55.690
ESLint will set it up so you can't access
process.env to get environment variables.

126
00:08:55.690 --> 00:08:59.039
And if you're only running for
node it's gonna say,

127
00:08:59.039 --> 00:09:03.730
that window object is not there,
you can't reach for window.document,

128
00:09:03.730 --> 00:09:06.793
you're running in node JS,
there is no window.

129
00:09:06.793 --> 00:09:11.737
So I checked both of these which what
I'm trying to get to here is something

130
00:09:11.737 --> 00:09:15.167
that asked me to play by
regular JavaScript rules,

131
00:09:15.167 --> 00:09:19.498
something that can work equally
well in Node and in the browser.

132
00:09:19.498 --> 00:09:23.594
I'd like to start here because I don't
know how my module is going to be used.

133
00:09:23.594 --> 00:09:26.502
And if I make an assumption one way or
the other,

134
00:09:26.502 --> 00:09:29.431
I'm limiting what can be
done with this thing.

135
00:09:29.431 --> 00:09:34.381
Could be both, could be something used for
server-side rendering on the server and

136
00:09:34.381 --> 00:09:37.179
then in the browser for
the client-side code.

137
00:09:37.179 --> 00:09:39.840
All right, what format do I
want my config file to be in?

138
00:09:39.840 --> 00:09:42.810
You could have YAML, you could have
JSON or you could have JavaScript.

139
00:09:42.810 --> 00:09:45.157
We're gonna choose JavaScript.

140
00:09:47.412 --> 00:09:47.912
You'll see why in a moment.

141
00:09:50.093 --> 00:09:53.996
So, based on the choices that we made,

142
00:09:56.192 --> 00:10:01.340
We're getting a list of plugins that
ESLint is saying it wants to install.

143
00:10:01.340 --> 00:10:07.500
We've got the typescript-eslint plugin and
the typescript-eslint parser.

144
00:10:07.500 --> 00:10:08.670
And we would like to install those.

145
00:10:14.807 --> 00:10:18.423
Now I remember why ESLint 8 might be nice.

146
00:10:18.423 --> 00:10:20.429
It's installing with npm right now.

147
00:10:20.429 --> 00:10:22.233
I think if you were using ESLint 8,

148
00:10:22.233 --> 00:10:25.555
it would ask you which package
manager you wanna install it with.

149
00:10:25.555 --> 00:10:28.422
No worries,
we can take care of that by running yarn,

150
00:10:28.422 --> 00:10:31.751
just to make sure all of that's
represented in our lock file.

151
00:10:31.751 --> 00:10:34.429
It's gonna find those packages,
it's gonna take care of installing them.

152
00:10:36.454 --> 00:10:39.779
And we should see,
try not to save this file.

153
00:10:44.839 --> 00:10:47.910
Interesting, I'm just gonna
push past this error.

154
00:10:47.910 --> 00:10:49.390
I know exactly what's happening here.

155
00:10:51.240 --> 00:10:52.310
Let's actually resolve it.

156
00:10:52.310 --> 00:10:58.486
Let's use ESlint 8,
I'll explain what's going on here.

157
00:10:58.486 --> 00:10:59.902
So we're gonna have to run yarn again.

158
00:11:04.515 --> 00:11:09.123
It's gonna get ESlint 8, we're gonna
get a different set of questions,

159
00:11:09.123 --> 00:11:11.623
you can run yarn eslint -- init again.

160
00:11:11.623 --> 00:11:14.130
You're gonna get very,
very similar questions.

161
00:11:14.130 --> 00:11:18.883
So we're checking syntax,
finding problems, JavaScript modules,

162
00:11:18.883 --> 00:11:20.320
none of these.

163
00:11:20.320 --> 00:11:21.928
Yes, we're using TypeScript.

164
00:11:21.928 --> 00:11:28.250
Select both, JavaScript, there we go.

165
00:11:28.250 --> 00:11:29.670
Would you like to install them now?

166
00:11:29.670 --> 00:11:32.240
Not with npm, but
would you like to install them now?

167
00:11:32.240 --> 00:11:37.000
Yes, now it's gonna let us
pick our package manager.

168
00:11:37.000 --> 00:11:39.680
So I'll explain the thing we hit.

169
00:11:39.680 --> 00:11:45.868
It's a sneak preview of
where we're going with this.

170
00:11:45.868 --> 00:11:51.351
In one of our packages in here,
it's the chat package.

171
00:11:51.351 --> 00:11:58.394
In the package JSON, there's a piece
of syntax that npm is unhappy with.

172
00:12:03.430 --> 00:12:04.092
Is it here?

173
00:12:07.789 --> 00:12:10.814
Here it is,
npm doesn't know how to handle that,

174
00:12:10.814 --> 00:12:14.260
that is specifically
a yarn workspace's thing.

175
00:12:14.260 --> 00:12:18.296
So the fact that ESLint was not
giving me the option to choose yarn,

176
00:12:18.296 --> 00:12:21.410
that's where we ended
up with this problem.

177
00:12:21.410 --> 00:12:25.063
Another thing we could have done
is just manually install those two

178
00:12:25.063 --> 00:12:26.050
packages for us.

