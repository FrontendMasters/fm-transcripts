WEBVTT

1
00:00:00.102 --> 00:00:04.799
Before we move on to working in the chat
app, I just wanna talk a little bit

2
00:00:04.799 --> 00:00:09.190
about what we did in our tsconfig,
cuz we kind of glossed over that.

3
00:00:09.190 --> 00:00:13.326
And I'm gonna move a little bit quickly
here cuz I think we already covered some

4
00:00:13.326 --> 00:00:14.653
of these to some extent.

5
00:00:14.653 --> 00:00:20.766
But I'll sort of pause on ones that I
feel are particularly interesting and

6
00:00:20.766 --> 00:00:25.423
if you have questions about
what we can do in ts.config or

7
00:00:25.423 --> 00:00:30.870
what I think best practices are,
this would be a great time to ask.

8
00:00:30.870 --> 00:00:35.234
And of course noImplicitAny of this forces
any typed value to be explicitly typed

9
00:00:35.234 --> 00:00:35.757
as such.

10
00:00:35.757 --> 00:00:39.817
I think that early on in a, when you're
converting a JavaScript project to

11
00:00:39.817 --> 00:00:43.877
TypeScript, this makes a lot of sense
to relax, where you'd say, sure,

12
00:00:43.877 --> 00:00:46.655
I can have implicit anys
just from the start.

13
00:00:46.655 --> 00:00:51.757
But generally you wanna end up in
a place where this is switched on,

14
00:00:51.757 --> 00:00:54.774
meaning implicit anys are forbidden.

15
00:00:54.774 --> 00:00:56.467
And there's always an escape hatch here,
right?

16
00:00:56.467 --> 00:01:01.156
You can always explicitly type something
as any so there's never really a,

17
00:01:01.156 --> 00:01:04.607
something that's in your way
from enabling this role.

18
00:01:04.607 --> 00:01:08.703
There's something safe you can do
that will allow you to sort of

19
00:01:08.703 --> 00:01:11.716
turn this role on and so
you can hold the line and

20
00:01:11.716 --> 00:01:15.680
stop any new implicit anys from
being added to the codebase.

21
00:01:15.680 --> 00:01:20.030
noIimplicitThis we talked about this
a lot in the In the intermediate

22
00:01:20.030 --> 00:01:23.780
TypeScript course,
when we were dealing with this types,

23
00:01:23.780 --> 00:01:27.760
it just relates to functions that
require a special this type.

24
00:01:27.760 --> 00:01:31.548
And the classic example here is,
if you do add event listener,

25
00:01:31.548 --> 00:01:36.390
we have a button element,
we're adding an event listener for clicks.

26
00:01:36.390 --> 00:01:43.410
Note that this type in this function type,
it's the HTML button element itself.

27
00:01:43.410 --> 00:01:48.272
If in here we're like saying this.class
name, if you're gonna rely on

28
00:01:48.272 --> 00:01:52.670
this being a particular thing,
you need to be explicit about it.

29
00:01:52.670 --> 00:01:54.942
You're not allowed to
just reach into this and

30
00:01:54.942 --> 00:01:57.820
hope that it is what you wanted it to be.

31
00:01:57.820 --> 00:02:00.010
Not something you need to
worry about in class methods.

32
00:02:00.010 --> 00:02:05.285
It's taken care of for
you there AlwaysStrict,

33
00:02:05.285 --> 00:02:06.490
we don't need to talk about that.

34
00:02:06.490 --> 00:02:08.390
That's just JavaScript's use strict.

35
00:02:09.890 --> 00:02:13.827
strictBindCallApply, this is really for
just three methods on function,

36
00:02:13.827 --> 00:02:18.068
bind, call and apply, and it ensures that
they behave as you would hope they would

37
00:02:18.068 --> 00:02:19.989
behave in a strongly-typed world.

38
00:02:21.140 --> 00:02:22.920
Strict null checks, this is a big one.

39
00:02:22.920 --> 00:02:24.814
Without turning this one on,

40
00:02:24.814 --> 00:02:28.190
you're allowed to use null
in any TypeScript type.

41
00:02:28.190 --> 00:02:32.510
Null is an allowed value everywhere,
which is dangerous, right?

42
00:02:32.510 --> 00:02:36.628
This is one of the most low-level things
that you hope TypeScript takes care of for

43
00:02:36.628 --> 00:02:40.810
you, where you have confidence
whether something's there or not.

44
00:02:40.810 --> 00:02:44.292
So I, when I'm converting
a JavaScript codebase in TypeScript,

45
00:02:44.292 --> 00:02:46.500
I turn this on pretty early.

46
00:02:46.500 --> 00:02:50.835
It's one of the things that I'm
most eager to sort of root out any

47
00:02:50.835 --> 00:02:55.180
violators of this and
get some bug fixes in there.

48
00:02:55.180 --> 00:02:59.347
strictFunctionTypes, we talked about
this a lot in the last chapter of

49
00:02:59.347 --> 00:03:03.863
intermediate TypeScript where we
covered covariance and contravariance,

50
00:03:03.863 --> 00:03:08.600
without turning this on, function
types do not behave as you would hope.

51
00:03:08.600 --> 00:03:13.354
They are treated in a bivariate way,
which means if you have

52
00:03:13.354 --> 00:03:18.679
a callback type that needs to operate
on a base class of something,

53
00:03:18.679 --> 00:03:24.670
and it should be able to handle
all subclasses of that base class.

54
00:03:24.670 --> 00:03:29.042
Without turning this on,
you can do things like this,

55
00:03:29.042 --> 00:03:34.186
where we have an animal and dog and
cats are subtypes of animals.

56
00:03:36.452 --> 00:03:40.510
This here, I think I have
strictFunctionTypes on here, but

57
00:03:40.510 --> 00:03:44.820
if you had it disabled,
you'd be able to make this assignment.

58
00:03:44.820 --> 00:03:48.893
You'd say the function that takes
in a dog and assumes it's a dog,

59
00:03:48.893 --> 00:03:53.790
can be used in place for a function that
should be able to take any kind of animal.

60
00:03:53.790 --> 00:03:55.950
This is gonna be a problem, right?

61
00:03:55.950 --> 00:03:58.780
You're gonna start getting cats
passing into this function.

62
00:03:58.780 --> 00:04:01.330
TypeScript will not have warned
you that this is a thing.

63
00:04:01.330 --> 00:04:06.328
So it's specifically this kind
of undesired flexibility that

64
00:04:06.328 --> 00:04:09.950
strictFunctionTypes helps catch.

65
00:04:09.950 --> 00:04:14.208
And if you wanna learn more, the last
chapter of intermediate TypeScript,

66
00:04:14.208 --> 00:04:18.865
I think it's called type parameters and
variants, goes into this in some amount of

67
00:04:18.865 --> 00:04:22.145
detail, and
I think it's a really interesting concept.

68
00:04:22.145 --> 00:04:24.748
strictPropertyInitialization, so

69
00:04:24.748 --> 00:04:29.788
this is mainly class fields that you
get yelled at if you didn't certainly

70
00:04:29.788 --> 00:04:35.416
assign these fields of value by the time
the constructor finishes being invoked.

71
00:04:35.416 --> 00:04:41.350
Again, we cover this in intermediate
TypeScript where we talk about a rare case

72
00:04:41.350 --> 00:04:47.830
where, you, in a promise executor, the
callback you pass the promise constructor.

73
00:04:47.830 --> 00:04:54.029
If you are inside of that or initializing
class fields on the outer class.

74
00:04:54.029 --> 00:04:58.322
That's where you'd use the definite
assignment operator because that function

75
00:04:58.322 --> 00:05:02.300
is invoked synchronously, by the time
you get the instance of the promise,

76
00:05:02.300 --> 00:05:05.420
that promise executor is for
sure done invoking.

77
00:05:05.420 --> 00:05:09.350
But this is, very much related to
that definite assignment concept.

78
00:05:10.380 --> 00:05:14.437
So I would call these,
these are really, what do I call them?

79
00:05:14.437 --> 00:05:19.230
It's the basic, yeah,
this is just sort of strict mode.

80
00:05:19.230 --> 00:05:23.250
This is when you say strict true,
this is what you get.

81
00:05:23.250 --> 00:05:27.363
If we take things to the next level,
we can have TypeScript be the thing in our

82
00:05:27.363 --> 00:05:31.870
project that warns us about unused
local variables and unused parameters.

83
00:05:31.870 --> 00:05:34.140
I really like using TypeScript for this.

84
00:05:34.140 --> 00:05:36.140
You can set up ES lint to do it too.

85
00:05:36.140 --> 00:05:39.784
But it lets you have this convention
where you can prepend something with

86
00:05:39.784 --> 00:05:41.100
an underscore.

87
00:05:41.100 --> 00:05:45.170
And TypeScript will say, all right,
you know it's an unused parameter.

88
00:05:45.170 --> 00:05:47.282
And you've named the variable as such.

89
00:05:47.282 --> 00:05:51.308
And this is super easy,
super important when you have a callback.

90
00:05:51.308 --> 00:05:55.985
Where you take the first argument,
you ignore the second and then you take

91
00:05:55.985 --> 00:06:00.888
the third and you can just instead of
doing ES lint disabled stuff which will,

92
00:06:00.888 --> 00:06:03.088
that I'll ignore the whole line.

93
00:06:03.088 --> 00:06:06.785
For a particular rule, this is just
a very precise way of doing this and

94
00:06:06.785 --> 00:06:11.121
it's a well understood convention that
spans multiple programming languages.

95
00:06:11.121 --> 00:06:17.399
Prepended_ means either private or
I'm not using this.

96
00:06:17.399 --> 00:06:22.364
noImplicitReturns, this is not
necessarily about being explicit

97
00:06:22.364 --> 00:06:25.934
about functions returning a specific type,
but

98
00:06:25.934 --> 00:06:30.760
it's about all code paths
returning nothing or something.

99
00:06:30.760 --> 00:06:34.436
So if you had a function you're
calling and you had an if, and

100
00:06:34.436 --> 00:06:38.740
inside that if you return,
I don't know, an array of numbers.

101
00:06:38.740 --> 00:06:40.240
And then, you just leave it there, right?

102
00:06:40.240 --> 00:06:41.170
There's no else.

103
00:06:41.170 --> 00:06:43.160
There's no return at the bottom.

104
00:06:43.160 --> 00:06:44.790
This would yell at you about that.

105
00:06:44.790 --> 00:06:46.988
You either have to return explicitly,

106
00:06:46.988 --> 00:06:50.190
even if it's just return with
nothing after it, right?

107
00:06:50.190 --> 00:06:52.590
You're saying return nothing.

108
00:06:52.590 --> 00:06:55.267
You have to either do that
on all code paths, or

109
00:06:55.267 --> 00:06:59.900
it's a purely side effect function
that is never returning anything.

110
00:06:59.900 --> 00:07:03.060
This captures a lot of errors because
sometimes you just forgot to do something.

111
00:07:03.060 --> 00:07:06.965
And whenever you're returning that's an
indication that someone wants to consume

112
00:07:06.965 --> 00:07:08.630
what you're returning.

113
00:07:08.630 --> 00:07:12.629
And so often, this is a good chance to
return a null instead of undefined,

114
00:07:12.629 --> 00:07:16.644
cuz you're it's not the absence of
a return, you want something there.

115
00:07:16.644 --> 00:07:19.940
I told you about this one being
disabled as my preference.

116
00:07:19.940 --> 00:07:22.180
I'm okay with fall through cases and
switch.

117
00:07:22.180 --> 00:07:24.334
We can move on there.

118
00:07:24.334 --> 00:07:29.210
We talked about types,
we talked about strip internal.

119
00:07:29.210 --> 00:07:35.020
exactOptionalPropertyTypes is
interesting here.

120
00:07:35.020 --> 00:07:40.300
And what this stops you
from doing is this.

121
00:07:40.300 --> 00:07:43.641
So on this object here,
we have an optional volume property,

122
00:07:43.641 --> 00:07:45.180
which is a number.

123
00:07:45.180 --> 00:07:51.177
And we're setting it to undefined,
which you would think you could do, right?

124
00:07:51.177 --> 00:07:55.921
You can certainly find an undefined
value by accessing this property,

125
00:07:55.921 --> 00:07:57.671
if it's not set, right?

126
00:07:57.671 --> 00:07:58.470
It's optional.

127
00:07:58.470 --> 00:08:00.140
It could be undefined.

128
00:08:00.140 --> 00:08:06.300
But this is not a great practice because
you're not getting rid of this property.

129
00:08:06.300 --> 00:08:09.330
You are providing it with a value,
and that value is undefined.

130
00:08:09.330 --> 00:08:14.202
And so if you did, object.keys on
this thing, it would say, yeah,

131
00:08:14.202 --> 00:08:19.420
I have something for volume or
if you did object.hasOwnProperty for this.

132
00:08:19.420 --> 00:08:21.360
Do you have a volume property?

133
00:08:21.360 --> 00:08:24.430
It certainly does, and
it's containing an undefined.

134
00:08:25.590 --> 00:08:30.120
This is the better practice if you really
wanna get rid of something on an optional

135
00:08:30.120 --> 00:08:31.130
field like this.

136
00:08:31.130 --> 00:08:34.830
So I think this is a very
common sense thing to turn on.

137
00:08:34.830 --> 00:08:39.120
Anytime you see this here, is a good
indication you wanna move down here.

138
00:08:39.120 --> 00:08:39.833
But again,

139
00:08:39.833 --> 00:08:44.410
someone might be depending on that.keys
having a particular key in there.

140
00:08:44.410 --> 00:08:46.836
This is not one that you
could sort of say, I know for

141
00:08:46.836 --> 00:08:49.440
sure I'll never break anybody
by making this change.

142
00:08:49.440 --> 00:08:54.372
You are changing some things but
what I would tend to do is say I

143
00:08:54.372 --> 00:08:59.620
would give a prompt attention to
any kind of patterns like this.

144
00:09:02.545 --> 00:09:04.200
Yeah, here are the violators.

145
00:09:04.200 --> 00:09:08.451
Yeah, also a let key in, a for
in loop will also iterate over

146
00:09:08.451 --> 00:09:12.810
this volume property because
something's there, right?

147
00:09:14.640 --> 00:09:19.238
noUncheckedIndexAccess, in
a previous version of my TypeScript

148
00:09:19.238 --> 00:09:23.842
courses I used to say when you're
operating on a dictionary type.

149
00:09:23.842 --> 00:09:29.009
Make sure you account for the fact that
under a given key in a dictionary,

150
00:09:29.009 --> 00:09:31.910
you might find nothing, right?

151
00:09:31.910 --> 00:09:35.631
If it's a dictionary of
address book entries,

152
00:09:35.631 --> 00:09:40.840
If you just type it as index signature:t,
you're kind off saying

153
00:09:40.840 --> 00:09:46.513
that no matter what key you look up here,
you will always get a type back,

154
00:09:46.513 --> 00:09:51.050
and that's just not
the case with dictionaries.

155
00:09:51.050 --> 00:09:56.420
So I used to say make sure it's t or
undefined.

156
00:09:59.010 --> 00:10:01.400
But we don't have to do that anymore.

157
00:10:03.160 --> 00:10:07.894
So what we can see here, we have a little
bit of a combination of an index

158
00:10:07.894 --> 00:10:11.840
signature here with some known properties.

159
00:10:11.840 --> 00:10:14.650
So these will be present, for sure.

160
00:10:15.810 --> 00:10:20.334
Name, home phone, cell phone,
but you could have some other

161
00:10:20.334 --> 00:10:24.860
loosely structured details
about this phonebook entry, and

162
00:10:24.860 --> 00:10:28.270
they could be there or
they could not be there.

163
00:10:28.270 --> 00:10:29.300
We don't know for sure.

164
00:10:30.330 --> 00:10:34.360
So you can see when we access name,
we get the string.

165
00:10:34.360 --> 00:10:36.980
Office phone, we get string or undefined.

166
00:10:36.980 --> 00:10:41.440
So I don't have to put or
undefined right here.

167
00:10:41.440 --> 00:10:47.277
There's a compiler setting that says
whenever there is an index signature,

168
00:10:47.277 --> 00:10:49.620
no uncheckedIndexedAccess.

169
00:10:51.580 --> 00:10:53.742
The typescript will for you,

170
00:10:53.742 --> 00:10:59.030
indicate the possibility correctly
that something might not be there.

171
00:11:01.090 --> 00:11:06.316
All right, this is a very related compiler
setting that I think is quite nice.

172
00:11:06.316 --> 00:11:11.978
It forces you to use .notation like this,

173
00:11:11.978 --> 00:11:17.650
for accessing known properties, right?

174
00:11:17.650 --> 00:11:21.850
We know this is here, right?

175
00:11:21.850 --> 00:11:26.830
But it's gonna want you to right
square bracket notation to

176
00:11:26.830 --> 00:11:29.326
access object office phone.

177
00:11:29.326 --> 00:11:32.862
And this,
it's a great improvement to readability.

178
00:11:32.862 --> 00:11:35.538
So that you when you're
just looking at this code,

179
00:11:35.538 --> 00:11:38.342
maybe you import that interface
from another file and

180
00:11:38.342 --> 00:11:42.766
so you're not paying too much attention to
what's the definitely here thing versus

181
00:11:42.766 --> 00:11:47.050
what's the little extra thing that
could be there, could not be there.

182
00:11:47.050 --> 00:11:52.490
And if you have square bracket, you can
do this to excess properties, right?

183
00:11:52.490 --> 00:11:53.640
You don't have to use .notation.

184
00:11:53.640 --> 00:11:56.533
You can just treat it like
an associative array almost and

185
00:11:56.533 --> 00:11:58.049
pass the string in as the key.

186
00:11:59.510 --> 00:12:03.946
npImplicitOverride, we covered
this in TypeScript fundamentals,

187
00:12:03.946 --> 00:12:07.865
the override keyword,
it's relatively new to TypeScript.

188
00:12:07.865 --> 00:12:12.779
And it it sort of enforces that
when you're trying to shadow

189
00:12:12.779 --> 00:12:17.991
a base classe's method,
you must use the override keyword and

190
00:12:17.991 --> 00:12:23.031
this checks and
catches all sorts of refactoring problems.

191
00:12:23.031 --> 00:12:25.410
Where you change the name of a method.

192
00:12:25.410 --> 00:12:28.680
But something else like you didn't
change the subclass like this.

193
00:12:28.680 --> 00:12:31.040
You have the override keyword.

194
00:12:31.040 --> 00:12:32.900
This will, it'll catch it.

195
00:12:32.900 --> 00:12:38.406
And specifically what this rule does
is it, whenever you are shadowing

196
00:12:38.406 --> 00:12:43.652
a method of a subclass, it will say,
put the override method here.

197
00:12:43.652 --> 00:12:47.699
You should indicate you're overriding
a base class, and then in the future,

198
00:12:47.699 --> 00:12:50.472
someone comes along and
they change one or the other.

199
00:12:50.472 --> 00:12:55.184
And you're not in that shadowing situation
again, where you have two methods of

200
00:12:55.184 --> 00:12:59.150
the same name on the base class and
subclass, it'll bust you on it.

201
00:12:59.150 --> 00:13:02.447
It'll let you know that like, look,
you should refactor both or neither.

202
00:13:06.304 --> 00:13:11.031
I talked a little bit about viral options,
where if you're publishing a library,

203
00:13:11.031 --> 00:13:15.422
enabling any of these will effectively
force all consumers of your library to

204
00:13:15.422 --> 00:13:16.720
enable these as well.

205
00:13:18.770 --> 00:13:23.644
These effectively let you check your
types a little bit differently,

206
00:13:23.644 --> 00:13:28.434
but they will be the same types that
were bugging you before when these

207
00:13:28.434 --> 00:13:31.250
settings were turned off.

208
00:13:31.250 --> 00:13:34.602
So your declaration files
that your library spits out,

209
00:13:34.602 --> 00:13:39.610
it's quite possible they wouldn't have
worked unless you turned these flags on.

210
00:13:41.100 --> 00:13:42.870
And then once you turn the flags on,

211
00:13:42.870 --> 00:13:46.990
those declaration files still have to
work with every consumer of your library.

212
00:13:46.990 --> 00:13:49.600
That's what makes them viral.

213
00:13:49.600 --> 00:13:54.334
Meaning if one of your dependencies
uses these flags and needs these flags

214
00:13:54.334 --> 00:13:59.084
turned on to compile every, you have
to turn it on for your whole project.

215
00:14:03.663 --> 00:14:07.454
We talked about this in one
of the early courses, right?

216
00:14:07.454 --> 00:14:12.053
This option makes it so that caught things
are unknown, this prevents you from

217
00:14:12.053 --> 00:14:17.015
assuming that they're errors without doing
an instance of check, which is great.

218
00:14:17.015 --> 00:14:22.056
&gt;&gt; I'm getting a bunch of
TypeScript slash ESLint errors in

219
00:14:22.056 --> 00:14:27.096
my editor in the test file now
probably because we changed

220
00:14:27.096 --> 00:14:31.837
the stringify error to beta,
how would you fix this?

221
00:14:33.121 --> 00:14:34.760
&gt;&gt; Yeah that's a good question.

222
00:14:36.440 --> 00:14:39.050
I can show you exactly how I'd fix this.

223
00:14:39.050 --> 00:14:42.010
So let's verify that that's
exactly what we're getting.

224
00:14:42.010 --> 00:14:46.680
Hey, look at that,
no exported methods stringify error.

225
00:14:46.680 --> 00:14:49.780
This is because let's see if this
takes me to the declaration file.

226
00:14:49.780 --> 00:14:53.010
It does now,
these are the types that I'm consuming.

227
00:14:53.010 --> 00:14:56.290
This is the standard lib.d.ts file.

228
00:14:56.290 --> 00:15:01.072
So in this tsconfig,
what I can do is say sorry,

229
00:15:01.072 --> 00:15:05.147
it's in the compiler options, paths.

230
00:15:08.876 --> 00:15:13.610
''chat-stdlib'', I can say let's see.

231
00:15:13.610 --> 00:15:17.125
['' ../dist/chat-stdlib-beta.d.ts'']

232
00:15:22.702 --> 00:15:24.206
Something like that.

233
00:15:26.743 --> 00:15:31.390
So this is what a beta consumer
of your library would have to do.

234
00:15:31.390 --> 00:15:33.230
It would be a slightly different path,
right?

235
00:15:33.230 --> 00:15:36.268
They'd be looking into
their node modules folder.

236
00:15:36.268 --> 00:15:41.551
Be like Nodemodules//chat-stdlib/dist/give

237
00:15:41.551 --> 00:15:46.720
me the beta one,
I wanna use the beta types for this.

238
00:15:46.720 --> 00:15:51.171
So what you're saying here is TypeScript
shouldn't just try to be clever and

239
00:15:51.171 --> 00:15:54.468
resolve the types the way
everybody else would get them.

240
00:15:54.468 --> 00:15:59.830
What you're saying is for this library,
use that declaration file specifically.

241
00:16:01.440 --> 00:16:04.580
This is what I mean by
explicit opt-in to the beta.

242
00:16:04.580 --> 00:16:06.460
I can tell there's no more red title here.

243
00:16:07.600 --> 00:16:10.170
There's my stringify error
function coming through.

244
00:16:11.660 --> 00:16:13.200
So I've opted into the beta.

245
00:16:13.200 --> 00:16:16.769
This would be a great place where,
say you wanna use the private stuff for

246
00:16:16.769 --> 00:16:17.680
your tests.

247
00:16:17.680 --> 00:16:19.810
But you have control over it.

248
00:16:19.810 --> 00:16:21.688
It's not just sort of you get everything.

249
00:16:21.688 --> 00:16:28.630
And then, I prefer to have my tests sort
of, test a library from the outside.

250
00:16:28.630 --> 00:16:30.461
But through the beta
surface would be fine.

251
00:16:30.461 --> 00:16:31.860
Gotta have tests for your beta stuff.

