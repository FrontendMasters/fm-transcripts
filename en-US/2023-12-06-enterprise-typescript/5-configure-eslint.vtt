WEBVTT

1
00:00:00.000 --> 00:00:04.176
We have this nice eslint rc.js file.

2
00:00:04.176 --> 00:00:06.858
This is our eslint config.

3
00:00:06.858 --> 00:00:10.650
We're gonna make a couple changes here,
in the extends array.

4
00:00:10.650 --> 00:00:14.329
So it's giving us like
the recommended set of eslint rules.

5
00:00:14.329 --> 00:00:18.983
That's, that's what extends means here,
right?

6
00:00:18.983 --> 00:00:24.444
It lets you take in sort of
rule sets as a starting point.

7
00:00:24.444 --> 00:00:29.610
And then you can turn individual rules
on off, after opting into a rule set,

8
00:00:29.610 --> 00:00:34.309
so it's sort of like what's your
baseline which you can then tweak.

9
00:00:34.309 --> 00:00:39.114
So this is just general recommended
eslint plug, like best practices,

10
00:00:39.114 --> 00:00:42.199
which is for JavaScript and
TypeScript code.

11
00:00:42.199 --> 00:00:46.302
There's a TypeScript eslint
recommended set of things.

12
00:00:46.302 --> 00:00:49.677
I would recommend if you're
gonna include this one,

13
00:00:49.677 --> 00:00:52.380
you always include the second one as well.

14
00:00:52.380 --> 00:00:55.159
It sort of overrides some rules.

15
00:00:55.159 --> 00:00:58.838
In eslint, like, for example,
no unused variables.

16
00:00:58.838 --> 00:01:02.906
TypeScript has a way of doing
that through the compiler.

17
00:01:02.906 --> 00:01:08.749
If you remember, in our ts config we
had like no unused down here, right?

18
00:01:08.749 --> 00:01:12.625
So some of these things we want to
rely on TypeScript handling for us.

19
00:01:12.625 --> 00:01:14.917
So, it makes a lot of
sense to turn this on.

20
00:01:14.917 --> 00:01:22.466
There's there's a third one we want
to enable, plugin at TypeScript.

21
00:01:22.466 --> 00:01:24.183
There it is.

22
00:01:24.183 --> 00:01:26.285
So it's the same one is above.

23
00:01:26.285 --> 00:01:29.194
You're just adding these words.

24
00:01:29.194 --> 00:01:33.775
It's Typescript recommended,
requiring type checking.

25
00:01:33.775 --> 00:01:38.962
And the point of this rule set,
it's to include rules that actually

26
00:01:38.962 --> 00:01:43.517
use type information in order
to perform linting, right?

27
00:01:43.517 --> 00:01:49.574
For example, you could have rules
about forbidding explicit ns,

28
00:01:49.574 --> 00:01:55.534
and you can only find that
information through type-checking.

29
00:01:55.534 --> 00:01:57.523
So I tend to enable this one as well.

30
00:01:57.523 --> 00:02:01.450
Next, we're gonna and
look at the parser options.

31
00:02:01.450 --> 00:02:04.313
So this is another important change here.

32
00:02:04.313 --> 00:02:09.330
We have to tell because
eslint is using TypeScript to

33
00:02:09.330 --> 00:02:14.575
analyze code and
to provide information about types,

34
00:02:14.575 --> 00:02:20.174
we have to tell it where
the tsconfig is that we're using.

35
00:02:20.174 --> 00:02:25.465
So we're actually gonna
just write project true and

36
00:02:25.465 --> 00:02:30.283
we'll say tsconfig root dir and
then dir name.

37
00:02:30.283 --> 00:02:33.803
This is something that's available
in like all Node js modules,

38
00:02:33.803 --> 00:02:36.300
it's just a global value that's available.

39
00:02:36.300 --> 00:02:43.757
It's the current directory
of where the files located.

40
00:02:43.757 --> 00:02:47.452
So this will help eslint
find our tsconfig.

41
00:02:47.452 --> 00:02:50.130
Okay, two last adjustments
we have to make.

42
00:02:50.130 --> 00:02:53.043
There's a section called is
do we have it populated yet?

43
00:02:53.043 --> 00:02:54.005
Yes, we do.

44
00:02:54.005 --> 00:02:55.016
Overrides.

45
00:02:55.016 --> 00:03:00.168
So the purpose of overrides
is to describe local parts

46
00:03:00.168 --> 00:03:05.099
of our project where rules
may apply differently.

47
00:03:05.099 --> 00:03:10.319
So in this case, I've got this was
part of what was generated for me,

48
00:03:10.319 --> 00:03:15.630
right, I didn't write this this
was like when we did eslint--net.

49
00:03:15.630 --> 00:03:17.395
This is part of what that's been out.

50
00:03:17.395 --> 00:03:22.375
It's set up some special
rules that apply to this file

51
00:03:22.375 --> 00:03:25.593
that we're looking at right now.

52
00:03:25.593 --> 00:03:31.840
Node true is what's letting
us safely access dirname.

53
00:03:31.840 --> 00:03:33.445
We're gonna add another override here.

54
00:03:33.445 --> 00:03:37.016
It doesn't really matter where you add it,
in this case it doesn't matter, but

55
00:03:37.016 --> 00:03:39.445
just remember these are processed
from top to bottom.

56
00:03:39.445 --> 00:03:42.645
So in cases where overrides may overlap,
like if you said,

57
00:03:42.645 --> 00:03:46.806
here's a rule for all typescript files
in the project, and here's a rule for

58
00:03:46.806 --> 00:03:48.227
all files in this folder.

59
00:03:48.227 --> 00:03:53.493
Sometimes you might meet both conditions
and so you wanna arrange your override

60
00:03:53.493 --> 00:03:58.536
such that the first one that you want to
be checked is higher up in this array.

61
00:03:58.536 --> 00:04:04.605
So we're gonna say file, Tests,

62
00:04:04.605 --> 00:04:09.361
and I want to all TypeScript
files within a tests folder that

63
00:04:09.361 --> 00:04:12.605
we're about to create in the next step.

64
00:04:12.605 --> 00:04:17.714
Then for env, I want node true,

65
00:04:17.714 --> 00:04:23.405
and not Mocha true, but Jest true.

66
00:04:23.405 --> 00:04:26.540
Jest, if you've ever used it before,

67
00:04:26.540 --> 00:04:30.625
it comes with some function
names like describe and

68
00:04:30.625 --> 00:04:35.479
this will make sure that like
we get the types for jest there.

69
00:04:35.479 --> 00:04:41.953
And one last thing here in the rules for
eslint itself and

70
00:04:41.953 --> 00:04:47.751
this override here we want
to add two more things.

71
00:04:47.751 --> 00:04:54.897
You can copy this right from the course
website, oops, that is weird.

72
00:04:54.897 --> 00:04:58.113
I'll just go to the course
website over here,

73
00:04:58.113 --> 00:05:02.984
trying to copy paste from my iPad
like that's gonna work seamlessly.

74
00:05:02.984 --> 00:05:03.661
Here we go.

75
00:05:03.661 --> 00:05:07.581
These two lines, and
I'll explain what they do in a moment.

76
00:05:09.911 --> 00:05:14.539
Okay, the first line it
this actually disables,

77
00:05:14.539 --> 00:05:20.270
remember that that eslint entry
we added to extends requiring

78
00:05:20.270 --> 00:05:25.244
type checking this thing
up here this disables that.

79
00:05:25.244 --> 00:05:30.040
So it's nice to be able to say look across
my whole project in general I want to set

80
00:05:30.040 --> 00:05:33.048
of rules that require type
checking enabled, but

81
00:05:33.048 --> 00:05:35.142
in this one place, turn them off.

82
00:05:35.142 --> 00:05:39.273
I just don't want it yelling at
us about our eslint rc file and

83
00:05:39.273 --> 00:05:41.226
then no unsafe assignment.

84
00:05:41.226 --> 00:05:49.017
This is what would let you like assign an
any to a property We're turning that off.

85
00:05:49.017 --> 00:05:54.889
And we're now ready to lint, yarn, lint.

86
00:05:54.889 --> 00:05:57.551
We should see some errors.

87
00:05:57.551 --> 00:05:58.922
Two problems.

88
00:05:58.922 --> 00:06:00.155
We've got two problems.

89
00:06:00.155 --> 00:06:02.796
This means it's working.

90
00:06:02.796 --> 00:06:06.921
Nicely formatted indications
of what's going on.

91
00:06:06.921 --> 00:06:12.988
So let's in vs code, on a Mac,
at least I can command click and

92
00:06:12.988 --> 00:06:16.737
it'll take me to the file index.ts.

93
00:06:16.737 --> 00:06:18.334
Sorry, I'm gonna save this here.

94
00:06:20.590 --> 00:06:25.275
And let's find, I'm looking at this
little red dot in my gutter here.

95
00:06:25.275 --> 00:06:26.752
Okay, here's the problem.

96
00:06:26.752 --> 00:06:27.928
What's the problem?

97
00:06:27.928 --> 00:06:31.257
Invalid operand for a plus operation.

98
00:06:31.257 --> 00:06:35.391
Operands must be a number or string.

99
00:06:35.391 --> 00:06:36.395
And what type is it?

100
00:06:36.395 --> 00:06:38.897
It's an empty object.

101
00:06:38.897 --> 00:06:44.275
Folks who have taken the intermediate
TypeScript course, what's this type?

102
00:06:44.275 --> 00:06:48.163
Actually, the easier question is,
what can't this type be?

103
00:06:48.163 --> 00:06:50.009
It's almost a top type.

104
00:06:50.009 --> 00:06:51.308
&gt;&gt; Can't be null or undefined?

105
00:06:51.308 --> 00:06:52.325
&gt;&gt; Can't be null or undefined.

106
00:06:52.325 --> 00:06:57.018
So it's any non-null or
non-undefined value.

107
00:06:57.018 --> 00:07:00.203
You know, eslint's telling
us this might be an error.

108
00:07:00.203 --> 00:07:02.026
This seems weird.

109
00:07:02.026 --> 00:07:06.594
I can get rid of this error by
deliberately coercing it to a string.

110
00:07:08.610 --> 00:07:13.719
Do that, there are a couple of
other things I could do, but

111
00:07:13.719 --> 00:07:19.058
if I said, yeah, I do want this
to be serialized to a string.

112
00:07:19.058 --> 00:07:21.915
The string constructor takes in an any,
and so

113
00:07:21.915 --> 00:07:24.708
it's perfectly happy
to take this value in.

114
00:07:24.708 --> 00:07:25.897
Save that file.

115
00:07:25.897 --> 00:07:27.176
Let's run the linter again.

116
00:07:30.603 --> 00:07:32.041
And there we go.

117
00:07:32.041 --> 00:07:33.693
It seems to pass.

118
00:07:33.693 --> 00:07:36.012
This is a great time to make a git commit,

119
00:07:36.012 --> 00:07:39.026
because we have linting
working in our project now.

120
00:07:39.026 --> 00:07:41.537
So we had a couple questions online.

121
00:07:41.537 --> 00:07:45.798
First thing I wanna point out is,
somebody had trouble

122
00:07:45.798 --> 00:07:50.350
where they were seeing the linting
experience that I saw.

123
00:07:50.350 --> 00:07:55.150
In their terminal right where they
saw these, it's out of my buffer now,

124
00:07:55.150 --> 00:07:58.600
where they saw you know the lint
errors and the lines and

125
00:07:58.600 --> 00:08:02.445
the files that was all coming
as part of the terminal output.

126
00:08:02.445 --> 00:08:04.016
When they ran yard lint, but

127
00:08:04.016 --> 00:08:08.090
they didn't see the equivalent
experience in their visual studio code.

128
00:08:08.090 --> 00:08:13.110
And this is pretty common when you
are just adding linting to a project.

129
00:08:13.110 --> 00:08:18.116
So one of the big challenging things
in a large scale TypeScript project

130
00:08:18.116 --> 00:08:23.130
is watching various files for
different things gets quite expensive.

131
00:08:23.130 --> 00:08:26.911
So VS code doesn't pick up
immediately on the fact that like

132
00:08:26.911 --> 00:08:31.273
there's a new TypeScript file here and
there's a new eslint config and

133
00:08:31.273 --> 00:08:34.346
eslint has been installed
in this little folder.

134
00:08:34.346 --> 00:08:39.481
The solution for
that I'm doing command Shift+P,

135
00:08:39.481 --> 00:08:42.871
this usually solves the problem.

136
00:08:42.871 --> 00:08:47.329
You restart the eslint server,
you're turning it off and on again, and

137
00:08:47.329 --> 00:08:52.004
at that point, it's gonna begin by
taking a top-level examination of what

138
00:08:52.004 --> 00:08:56.847
are we dealing with here, and often
that'll get your CLI commands, eslint.

139
00:08:56.847 --> 00:09:02.558
And your in editor red squiggles under
your code, it'll get those in sync.

140
00:09:02.558 --> 00:09:05.331
Where you're seeing the same things,
which is great.

141
00:09:05.331 --> 00:09:10.126
VS Code has this great problems
tab where if I were to have

142
00:09:10.126 --> 00:09:14.835
some problematic syntax here,
it points it out here.

143
00:09:14.835 --> 00:09:20.245
It's important to keep your in
editor eslint working well.

