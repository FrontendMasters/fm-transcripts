WEBVTT

1
00:00:00.370 --> 00:00:05.690
So let's talk about that concept of
sort of locally patching imported types.

2
00:00:07.560 --> 00:00:12.105
And we're gonna take advantage
of the kind of the type

3
00:00:12.105 --> 00:00:16.651
acquisition step by step
process that we described,

4
00:00:16.651 --> 00:00:20.960
where you'd first look at specific paths.

5
00:00:20.960 --> 00:00:26.506
The same way that we use
that beta chat-stdlib file.

6
00:00:26.506 --> 00:00:29.466
We can use that same
approach to sort of override

7
00:00:29.466 --> 00:00:33.230
the types of things that we
import from other places.

8
00:00:33.230 --> 00:00:37.019
So, I've created here,
and please do the same,

9
00:00:37.019 --> 00:00:41.000
a folder called types in
the root of my chat project.

10
00:00:42.540 --> 00:00:44.751
And I'm gonna go into my tsconfig.

11
00:00:46.549 --> 00:00:51.115
And in here, now, you might wonder,

12
00:00:51.115 --> 00:00:54.552
do I want it to be a type root?

13
00:00:54.552 --> 00:00:56.910
Or do I want it to be something different?

14
00:00:56.910 --> 00:01:00.238
I'm gonna actually use
paths with this folder.

15
00:01:12.076 --> 00:01:13.644
So what we're saying here?

16
00:01:13.644 --> 00:01:17.976
If we think back to
the order of precedence for

17
00:01:17.976 --> 00:01:21.970
type acquisition, paths is number one.

18
00:01:21.970 --> 00:01:24.640
It is the first place
TypeScript will look.

19
00:01:25.710 --> 00:01:31.097
If we define this as a type root, we might
have other type roots, the @types folder.

20
00:01:31.097 --> 00:01:38.031
And this gives us a strictly higher
priority way of describing types.

21
00:01:38.031 --> 00:01:43.942
So let's go ahead and look at,
we're gonna make a little change here.

22
00:01:46.490 --> 00:01:52.261
We're gonna go to our networking.ts
file after we save this tsconfig,

23
00:01:52.261 --> 00:01:53.785
networking.ts.

24
00:01:53.785 --> 00:01:58.395
And instead of consuming this
HTTPError class from this

25
00:01:58.395 --> 00:02:02.133
local module here,
this is a CommonJS file.

26
00:02:02.133 --> 00:02:06.618
Just an example of CommonJS
interoping nicely with TypeScript,

27
00:02:06.618 --> 00:02:09.152
everything is compiling fine here.

28
00:02:09.152 --> 00:02:12.239
But instead of consuming that,

29
00:02:12.239 --> 00:02:17.968
let's consume it from a different module,
http-error.

30
00:02:19.744 --> 00:02:23.909
That is a real thing that I've
set up in the package.json.

31
00:02:26.658 --> 00:02:33.769
Just to show you that, Here it is.

32
00:02:33.769 --> 00:02:37.086
Don't worry about where this dependency
is coming from, we will get there.

33
00:02:37.086 --> 00:02:41.994
But just know that you should think of
it as being in your Node modules folder,

34
00:02:41.994 --> 00:02:42.606
almost.

35
00:02:46.770 --> 00:02:53.384
And if I hover over this, it says it can't
find a declaration file for this module.

36
00:02:53.384 --> 00:02:58.094
And because of that, HTTPError,
it doesn't have any type.

37
00:02:58.094 --> 00:03:04.763
So it's implicitly in any, which means,
down here when we're calling it,

38
00:03:04.763 --> 00:03:10.422
I'm getting no help making sure
that I'm using this correctly.

39
00:03:10.422 --> 00:03:15.409
So what we would do here is we would say,
I wanna fix this locally.

40
00:03:15.409 --> 00:03:19.347
I don't wanna go through creating
a new definitely-typed package.

41
00:03:19.347 --> 00:03:22.902
And figuring out how to add that,
and publishing it, and

42
00:03:22.902 --> 00:03:24.988
then pulling that version down.

43
00:03:24.988 --> 00:03:28.148
You wanna resolve this
as quickly as possible,

44
00:03:28.148 --> 00:03:30.523
this is part of operating at scale.

45
00:03:30.523 --> 00:03:36.010
We can't wait for
pull requests to be merged.

46
00:03:36.010 --> 00:03:41.332
We wanna fix changes locally, and
then out of band, so we unblock ourselves.

47
00:03:41.332 --> 00:03:46.822
And then we can get it patched,
bring it in, remove the workaround.

48
00:03:46.822 --> 00:03:50.994
And we've gotta keep everything
working productively here.

49
00:03:50.994 --> 00:03:54.024
So, okay, in our types folder,

50
00:03:54.024 --> 00:04:00.020
we're gonna create a declaration file,
http-error.d.ts.

51
00:04:00.020 --> 00:04:01.192
The name is important.

52
00:04:11.152 --> 00:04:16.807
And here, we're gonna say export class

53
00:04:16.807 --> 00:04:21.637
HTTPError, and I'm gonna save.

54
00:04:21.637 --> 00:04:23.396
And I'm gonna restart TypeScript.

55
00:04:29.610 --> 00:04:35.562
Hey, look at that in our tooltip,
class HTTPError.

56
00:04:35.562 --> 00:04:39.962
So, effectively, what we've done is,
in the tsconfig,

57
00:04:39.962 --> 00:04:45.770
because of what we added to paths,
whenever we're trying to acquire types for

58
00:04:45.770 --> 00:04:51.050
a module, the first place TypeScript
will look is in our types folder.

59
00:04:51.050 --> 00:04:55.589
And it will try to find
a module in here that

60
00:04:55.589 --> 00:05:00.668
matches what is being
attempted as an import.

61
00:05:00.668 --> 00:05:05.250
And if something is found there,
those are the types it uses.

62
00:05:05.250 --> 00:05:11.210
If something is not found there that
matches the name of the package,

63
00:05:11.210 --> 00:05:12.766
we keep looking.

64
00:05:12.766 --> 00:05:16.991
We go into Node modules, we go and
look at the @types folder in Node modules.

65
00:05:16.991 --> 00:05:19.858
I could demonstrate some
harmful stuff we could do here.

66
00:05:19.858 --> 00:05:23.788
It's, say, react.d.ts, and

67
00:05:23.788 --> 00:05:29.759
then we're gonna say,
export a Banana, and save.

68
00:05:29.759 --> 00:05:37.201
And now all of our UI code is gonna
be very unhappy, or it should be.

69
00:05:39.628 --> 00:05:42.892
Look, React.PropsWithChildren,
it doesn't exist.

70
00:05:42.892 --> 00:05:46.780
But, sure enough, React.Banana is there.

71
00:05:46.780 --> 00:05:51.470
So we'll delete that file,
that's probably not what we want.

72
00:05:51.470 --> 00:05:57.420
But that's an example of us
superseding what's in Node modules.

73
00:05:58.580 --> 00:06:01.604
It's important to be able to do
this to keep your team unblocked.

74
00:06:01.604 --> 00:06:05.810
Because you will find errors in types,
and you will need to patch things up.

75
00:06:05.810 --> 00:06:10.295
And this is a great way of doing it,
checking it in, and

76
00:06:10.295 --> 00:06:14.440
then be a good JavaScript
ecosystem citizen.

77
00:06:14.440 --> 00:06:18.757
See if you can get it pulled
into where it belongs.

78
00:06:18.757 --> 00:06:20.787
But that's not on the critical path,

79
00:06:20.787 --> 00:06:24.413
that's not part of what needs to
happen before you're unblocked.

80
00:06:24.413 --> 00:06:27.389
So we're not quite done yet.

81
00:06:27.389 --> 00:06:30.246
If we look down,
now that we have type checking,

82
00:06:30.246 --> 00:06:33.946
it's not just a zero-argument
constructor situation here.

83
00:06:33.946 --> 00:06:37.155
We need that response to come in
as an argument, and then a string.

84
00:06:37.155 --> 00:06:40.908
So we can just say constructor response.

85
00:06:45.081 --> 00:06:50.607
And then a description, that's a string.

86
00:06:50.607 --> 00:06:52.360
And there we go, error's gone.

87
00:06:53.420 --> 00:06:55.070
That's where our type
information's gotta go.

88
00:06:55.070 --> 00:06:58.850
If I do Cmd + click on this,
it'll just take me to this file.

89
00:06:58.850 --> 00:07:00.040
That's where the types are coming from.

90
00:07:02.000 --> 00:07:05.679
So two different ways we can
deal with pure type information.

91
00:07:05.679 --> 00:07:12.241
We looked at interfaces, which we model
as something that's part of our app.

92
00:07:12.241 --> 00:07:15.080
And then this,
I would say it's not part of our app.

93
00:07:15.080 --> 00:07:17.266
I mean, it's part of our repo.

94
00:07:17.266 --> 00:07:21.093
And it's necessary in order for
our app to compile, but

95
00:07:21.093 --> 00:07:26.646
nothing about what you see here will be
something that you'd ship with your app.

96
00:07:26.646 --> 00:07:29.865
And this is why I put it
in two different places.

97
00:07:29.865 --> 00:07:35.364
It makes it very clear, things that
you will distribute or deploy, versus

98
00:07:35.364 --> 00:07:41.586
things that are sort of type information
that's just required in order to compile.

99
00:07:44.585 --> 00:07:47.848
And run yarn type check, make sure we're
in a good state, and then we're good.

100
00:07:51.639 --> 00:07:52.768
We're getting there.

101
00:07:56.597 --> 00:07:59.637
Let's check those app,

102
00:07:59.637 --> 00:08:05.439
the error in src/types,
time to kick ESLint.

103
00:08:13.037 --> 00:08:14.968
Messages are declared here.

104
00:08:14.968 --> 00:08:20.770
TeamSelector.test, our tests have errors,
okay, let's see.

105
00:08:22.885 --> 00:08:25.264
Messages is missing in this type.

106
00:08:25.264 --> 00:08:28.924
Okay, TeamSelector,
what I would do here is I'd pick,

107
00:08:28.924 --> 00:08:32.601
cuz I don't wanna change my
tests just to make this pass.

108
00:08:32.601 --> 00:08:38.645
I'm just trying to describe my code,
I don't wanna alter tests.

109
00:08:38.645 --> 00:08:42.953
I should be able to not touch
the tests and get this code change.

110
00:08:42.953 --> 00:08:46.700
So let's look in our
TeamSelector component.

111
00:08:46.700 --> 00:08:50.680
Yep, so here, apparently,
we're gonna do a Pick.

112
00:08:53.760 --> 00:09:00.820
We can even do it this way,
Exclude&lt;keyof Iteam, 'messages'&gt;.

113
00:09:04.423 --> 00:09:08.627
So just to put that on another line.

114
00:09:08.627 --> 00:09:12.415
So we're saying this is a long type here.

115
00:09:12.415 --> 00:09:17.221
I would take feedback in a code
review that this is a very verbose

116
00:09:17.221 --> 00:09:19.136
way of expressing this.

117
00:09:19.136 --> 00:09:26.112
But what we're saying here is, I want
everything on ITeam, except for messages.

118
00:09:26.112 --> 00:09:29.090
And we're having to use Pick and Exclude.

119
00:09:29.090 --> 00:09:35.544
Everything on ITeam except for, this is
the subset of ITeam that is not messages.

120
00:09:35.544 --> 00:09:37.724
That's kind of the way
we're articulating this.

121
00:09:41.021 --> 00:09:46.899
And then it looks like we have
another thing of this nature,

122
00:09:46.899 --> 00:09:51.187
where, We're including id and

123
00:09:51.187 --> 00:09:55.990
username, and the test does not
want to have to include that.

124
00:09:55.990 --> 00:10:01.962
So here we do Pick&lt;IMessage&gt;, we'll just
do this a little more reasonably here.

125
00:10:05.408 --> 00:10:12.542
User or createdAt or body.

126
00:10:21.038 --> 00:10:23.461
Let's make sure there's not one more,
there is.

127
00:10:26.117 --> 00:10:33.584
All right, just for expedience here, I'm
just gonna put messages here, empty array.

128
00:10:42.897 --> 00:10:46.634
One more, we'll fix this the quick and
improper way as well.

129
00:11:00.729 --> 00:11:03.986
And it wants what, id,

130
00:11:10.417 --> 00:11:13.626
username, maybe both.

131
00:11:20.490 --> 00:11:23.781
And this, it wants createdAt.

132
00:11:23.781 --> 00:11:27.179
Yeah, so maybe changing that
contract was not ideal.

133
00:11:27.179 --> 00:11:31.304
But we're getting alerted to it
because TypeScript is doing the type

134
00:11:31.304 --> 00:11:32.306
checking here.

135
00:11:35.790 --> 00:11:36.496
Great.

136
00:11:46.232 --> 00:11:51.540
&gt;&gt; One question in the chat is,
could you have used Omit ITeam, messages?

137
00:11:51.540 --> 00:11:56.181
&gt;&gt; I totally could,
my brain doesn't jump straight to there,

138
00:11:56.181 --> 00:12:00.500
cuz Omit hasn't existed for
a crazy long time.

139
00:12:00.500 --> 00:12:06.470
I'd argue I did use Omit,
I just spelled it out more deliberately.

140
00:12:06.470 --> 00:12:10.355
But yes, absolutely,
that's a more concise way to write it.

141
00:12:10.355 --> 00:12:14.480
It's such a common thing to do that
they gave us a utility type for it.

