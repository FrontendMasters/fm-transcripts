WEBVTT

1
00:00:00.390 --> 00:00:04.860
The next topic we're gonna tackle
is type checking at runtime.

2
00:00:04.860 --> 00:00:08.860
And what I mean by this is
really just type guards.

3
00:00:08.860 --> 00:00:12.495
So performing full type
checking at runtime is like,

4
00:00:12.495 --> 00:00:18.740
it's possible there exist projects that
try to use TypeScript in order to do this.

5
00:00:18.740 --> 00:00:21.680
It is quite expensive,
it's very expensive.

6
00:00:21.680 --> 00:00:24.814
If you've ever used React PropTypes and

7
00:00:24.814 --> 00:00:30.160
scaled that up to a very large app,
it slows things down considerably

8
00:00:30.160 --> 00:00:35.900
because it's doing a lot of comparisons
against all types of values.

9
00:00:35.900 --> 00:00:38.228
Anytime you pass through
a component boundary,

10
00:00:38.228 --> 00:00:41.610
it's really having to do
a substantial amount of extra work.

11
00:00:41.610 --> 00:00:46.565
So this is a piece of type
checking we can do at runtime, and

12
00:00:46.565 --> 00:00:52.233
by that I mean a type guard is
where compile-time type information

13
00:00:52.233 --> 00:00:58.080
joins runtime behavior that
matches that type information.

14
00:00:58.080 --> 00:01:01.700
It's incredibly important
that these be good.

15
00:01:01.700 --> 00:01:05.798
This is a place for
imperfections in types or

16
00:01:05.798 --> 00:01:10.785
imperfections in checking
can result in code looking

17
00:01:10.785 --> 00:01:15.680
like it's OK and
having very mysterious behavior.

18
00:01:15.680 --> 00:01:20.946
So if you're gonna focus on
correctness in one place,

19
00:01:20.946 --> 00:01:23.700
focus on it for type guards.

20
00:01:25.090 --> 00:01:30.732
So what we wanna do here
is add some type checking

21
00:01:30.732 --> 00:01:36.970
to our data layer like
our source/data folder.

22
00:01:36.970 --> 00:01:39.210
And we did a little bit, right?

23
00:01:39.210 --> 00:01:43.883
We found that some of these files here.

24
00:01:46.471 --> 00:01:53.099
We have a return type here, but
effectively we're casting, right?

25
00:01:53.099 --> 00:01:57.760
We're saying here's the API call,
it returns a promise any.

26
00:01:58.850 --> 00:01:59.792
Here's an any,

27
00:01:59.792 --> 00:02:04.470
we can state that we are returning
a promise that resolves to an i channel.

28
00:02:04.470 --> 00:02:07.396
But are we really sure?

29
00:02:07.396 --> 00:02:15.400
And any works,
it works in that it could be anything.

30
00:02:15.400 --> 00:02:17.460
TypeScript's trying to be flexible here.

31
00:02:17.460 --> 00:02:22.218
But I want us to introduce some real
checking here as data enters our app to

32
00:02:22.218 --> 00:02:24.880
make sure that this is what we hope it is.

33
00:02:24.880 --> 00:02:30.758
And to start,
what we're gonna do is create another file

34
00:02:30.758 --> 00:02:35.785
in our source folder
called type-guards.ts.

35
00:02:35.785 --> 00:02:39.226
And we're gonna add
a couple of guards in here.

36
00:02:39.226 --> 00:02:40.961
We're gonna first say.

37
00:02:44.125 --> 00:02:45.613
Isteam.

38
00:02:57.854 --> 00:03:02.415
And if you use GitHub Copilot,
it's often pretty good at this,

39
00:03:02.415 --> 00:03:07.328
it's this is a terrible suggestion
[LAUGH] it's giving me right now.

40
00:03:07.328 --> 00:03:10.380
It's literally just casting Iteam.

41
00:03:12.490 --> 00:03:14.410
Yeah, that's pretty awful.

42
00:03:14.410 --> 00:03:19.789
Here's what we're gonna do instead,

43
00:03:19.789 --> 00:03:24.842
we're first gonana say if type of arg

44
00:03:24.842 --> 00:03:29.410
equals object, and let's see.

45
00:03:29.410 --> 00:03:34.373
Let's look pull up what
an Iteam looks like right here

46
00:03:34.373 --> 00:03:37.361
on the side, there it is, and.

47
00:03:40.664 --> 00:03:43.800
See this is a much better thing here.

48
00:03:43.800 --> 00:03:45.559
I still don't like the casting, but

49
00:03:45.559 --> 00:03:48.470
this is more along the lines of
what we're trying to do here.

50
00:03:50.610 --> 00:03:51.190
Get rid of this.

51
00:03:52.330 --> 00:03:54.153
So if it's an object.

52
00:03:56.439 --> 00:04:04.794
And typeof arg.icon

53
00:04:04.794 --> 00:04:10.768
URL And

54
00:04:10.768 --> 00:04:13.759
I think we'll have to do, and.

55
00:04:18.334 --> 00:04:20.523
There we go, sorry, it's.

56
00:04:23.035 --> 00:04:25.860
Tough to talk and type and
think at the same time.

57
00:04:25.860 --> 00:04:29.285
So I'm gonna just create
a bunch of those and

58
00:04:29.285 --> 00:04:33.000
we're gonna do this for
name and for channels.

59
00:04:34.230 --> 00:04:36.010
We'll do another check on channels here.

60
00:04:37.050 --> 00:04:38.216
So this will be name.

61
00:04:41.355 --> 00:04:45.718
This will be, sorry,
this will be channels.

62
00:04:49.160 --> 00:04:53.218
And then see icon URL name,
channels and Id.

63
00:04:55.883 --> 00:04:57.474
Add one more up here.

64
00:05:05.650 --> 00:05:08.639
And here we can change this to.

65
00:05:11.514 --> 00:05:13.019
IsArray(channels).

66
00:05:16.460 --> 00:05:19.687
We have to actually do the first
one first, that's right.

67
00:05:33.006 --> 00:05:39.279
There we go, okay, so effectively this is

68
00:05:39.279 --> 00:05:44.720
like an exhaustive check for ITeam.

69
00:05:44.720 --> 00:05:48.640
Now we could do something a bit more here.

70
00:05:48.640 --> 00:05:52.620
We're gonna build that out but this is
the pattern we kind of wanna follow here.

71
00:05:52.620 --> 00:05:54.940
So we could say return.

72
00:05:56.820 --> 00:06:01.308
And thanks to like early termination,
anything that doesn't really match this

73
00:06:01.308 --> 00:06:05.476
it'll short-circuit as soon as it
hit something that it's gonna break.

74
00:06:05.476 --> 00:06:09.516
So just to break this up so
people can see it more easily.

75
00:06:12.088 --> 00:06:17.420
That's kind of the pattern, we're
gonna do this just for one type here,

76
00:06:17.420 --> 00:06:22.498
and then we're gonna make an array,
like a typed array check as well.

77
00:06:25.109 --> 00:06:28.350
You could do this, of course,
for the other types, right?

78
00:06:28.350 --> 00:06:32.220
For ischannel, isteam,
something like that.

79
00:06:32.220 --> 00:06:37.827
So now I'm gonna do export
function is typed array.

80
00:06:37.827 --> 00:06:43.727
And we're gonna take an unknown
array as our argument,

81
00:06:43.727 --> 00:06:50.140
and a wow, now TypeScript's
getting a little more clever.

82
00:06:52.080 --> 00:07:00.778
So a guard which is a function
that returns something like that.

83
00:07:03.455 --> 00:07:05.967
We're gonna flesh this out here,
I still have to do stuff here.

84
00:07:05.967 --> 00:07:10.949
And then we're going to say, all right
we now know that this is an array

85
00:07:10.949 --> 00:07:14.665
of some sort, and
if we want this to be a typed array,

86
00:07:14.665 --> 00:07:17.890
we kind of need this to
be a generic function.

87
00:07:18.970 --> 00:07:23.680
So we'd say isTypedArray is generic
over the type of thing in the array.

88
00:07:23.680 --> 00:07:29.067
We take in an array of Ts,
we return an indication that

89
00:07:29.067 --> 00:07:37.010
arg is in fact an array of T sorry,
we would take an array of unknowns.

90
00:07:37.010 --> 00:07:39.448
Right, those are the things
that we have to test.

91
00:07:39.448 --> 00:07:41.365
Here's what our guard looks like.

92
00:07:44.239 --> 00:07:48.556
So we're gonna be able to infer
the thing we're checking for

93
00:07:48.556 --> 00:07:53.310
based on the guard and we can kind
of get to work implementing here.

94
00:07:53.310 --> 00:07:56.250
There's something I haven't done yet,
but I wanna leave it as a surprise.

95
00:07:57.770 --> 00:07:59.763
Well, and that is the implementation here.

96
00:08:02.053 --> 00:08:07.184
We check to see if it's an array,
and then array.every,

97
00:08:07.184 --> 00:08:14.114
it determines whether all the members
of an array satisfy the specified test.

98
00:08:19.806 --> 00:08:21.331
This wouldn't.

99
00:08:23.372 --> 00:08:25.009
I guess this would work but

100
00:08:25.009 --> 00:08:29.784
there's something we could do to make
this even a little bit more rigorous.

101
00:08:34.619 --> 00:08:40.563
We can say, I don't just want you to pass
me a function that returns a Boolean,

102
00:08:40.563 --> 00:08:45.985
I want you to pass me a function that's
actually a type guard for type T.

103
00:08:48.349 --> 00:08:53.533
Of course, this is a subset of
what we had there before, right,

104
00:08:53.533 --> 00:08:58.636
it's a special Boolean,
a Boolean that has special meaning.

105
00:09:02.879 --> 00:09:06.097
So what this will let us
do something like this.

106
00:09:18.459 --> 00:09:23.370
Just this is a demo we'll bring it back
into the code in a more meaningful way.

107
00:09:24.800 --> 00:09:27.248
And see people like furiously
cutting things down.

108
00:09:34.609 --> 00:09:38.727
Did we do something wrong here?

109
00:09:38.727 --> 00:09:45.031
Isteam is typed array, team array.

110
00:09:51.401 --> 00:09:52.869
That's interesting.

111
00:09:56.223 --> 00:09:58.964
&gt;&gt; I think if you provided
the right argument.

112
00:09:58.964 --> 00:10:03.969
&gt;&gt; I have to, yeah, I don't get
inference cuz this is not a type param.

113
00:10:05.600 --> 00:10:10.160
What if we did this to force it to
infer based on the return type?

114
00:10:11.490 --> 00:10:12.650
Hey, there we go.

115
00:10:13.700 --> 00:10:18.570
So, [LAUGH] this is a really
subtle piece of behavior here.

116
00:10:18.570 --> 00:10:22.920
I add this and as this function,
it's going through,

117
00:10:22.920 --> 00:10:26.120
it's trying to figure out what T is.

118
00:10:26.120 --> 00:10:32.190
The first thing it's gonna hit is to test,
and it'll say, hey, you gave me unknown.

119
00:10:32.190 --> 00:10:37.240
But if I type it like this, it won't be
able to infer anything based on this.

120
00:10:37.240 --> 00:10:41.906
It'll just look at the return type of
the type guard, not the Boolean, but

121
00:10:41.906 --> 00:10:43.770
the thing it is checking for.

122
00:10:45.030 --> 00:10:47.470
So that's what gets us this result.

123
00:10:47.470 --> 00:10:52.060
See, it's an Iteam array compared to this.

124
00:10:55.380 --> 00:10:58.469
It's an array of unknowns,
cuz it was like, well,

125
00:10:58.469 --> 00:11:02.700
I will just use the argument you're
taking in, and this is an unknown.

126
00:11:04.700 --> 00:11:05.689
That's a tricky one.

127
00:11:08.792 --> 00:11:12.720
Okay, now we actually,
this is a really useful type guard.

128
00:11:12.720 --> 00:11:16.990
We can scan through an array,
apply a type guard to each member.

129
00:11:16.990 --> 00:11:20.240
We have a nice concise
syntax that we can use here.

130
00:11:20.240 --> 00:11:23.220
Let's go back,
let's find a place where we can use this.

131
00:11:23.220 --> 00:11:27.969
So we can go into our data layer,
maybe our teams.ts.

132
00:11:27.969 --> 00:11:31.140
And we've got to get all teams here,
right?

133
00:11:31.140 --> 00:11:36.279
Makes an API call, returns a promise
that resolves to something like to any.

134
00:11:36.279 --> 00:11:38.444
What we can do here is add a .then,

135
00:11:38.444 --> 00:11:41.820
remember applying type
guards you are running code.

136
00:11:43.080 --> 00:11:44.229
We'll call this.

137
00:11:49.149 --> 00:11:54.258
Maybe teams or response data.

138
00:11:57.879 --> 00:12:03.401
If is typed array,
pass in the response data.

139
00:12:11.809 --> 00:12:13.749
And what's the problem here?

140
00:12:14.969 --> 00:12:16.779
We're not always returning.

141
00:12:24.462 --> 00:12:29.333
Something like that,
we didn't import this I suspect.

142
00:12:33.779 --> 00:12:38.490
So look at that response data going in,
it's an any coming out.

143
00:12:38.490 --> 00:12:40.820
It's an array of iteams.

144
00:12:40.820 --> 00:12:46.951
Ultimately, what this whole
chain ends up returning

145
00:12:46.951 --> 00:12:52.548
is a promise that resolves
to an array of Iteams.

146
00:12:57.209 --> 00:13:00.613
And this, by the way, gives us a much
better clue as to what we're caching here,

147
00:13:00.613 --> 00:13:02.380
like what's happening here.

148
00:13:02.380 --> 00:13:08.369
And so we know this is now a promise
that resolves to an array of Iteams.

149
00:13:11.338 --> 00:13:15.624
So now this function, it actually
lives up to what it's supposed to be,

150
00:13:15.624 --> 00:13:17.750
cuz we added a nice type guard here.

151
00:13:20.160 --> 00:13:24.652
All paths lead to returning an array
of Iteams regardless of whether you get

152
00:13:24.652 --> 00:13:26.588
the cache hit or the cache miss.

