WEBVTT

1
00:00:00.025 --> 00:00:03.862
Let's get started with building
our own TypeScript library.

2
00:00:03.862 --> 00:00:06.486
And we're going to do it right
inside the workshop project.

3
00:00:06.486 --> 00:00:07.686
You should have installed Volta.

4
00:00:07.686 --> 00:00:09.068
Here are the instructions.

5
00:00:09.068 --> 00:00:13.809
Here's instructions for Windows subsystem.

6
00:00:13.809 --> 00:00:16.758
For Linux, actually, it's the same
command you should be able to run.

7
00:00:16.758 --> 00:00:23.278
If you're using PowerShell,
you'd download an MSI package.

8
00:00:23.278 --> 00:00:27.344
It's kind of, you're taking on
some challenges if you wanna do

9
00:00:27.344 --> 00:00:30.977
JavaScript development on like,
windows without WSL.

10
00:00:30.977 --> 00:00:35.100
Cuz sometimes, like NPM scripts
will assume you're running in a,

11
00:00:35.100 --> 00:00:37.282
like a ICS compliant environment.

12
00:00:37.282 --> 00:00:41.721
Something like just RM won't work
as far as I know in PowerShell.

13
00:00:41.721 --> 00:00:46.041
So, I would recommend
Windows subsystem for Linux.

14
00:00:46.041 --> 00:00:49.069
WSL two is crazy fast.

15
00:00:49.069 --> 00:00:50.686
It's awesome and it's there.

16
00:00:50.686 --> 00:00:51.764
So use it.

17
00:00:51.764 --> 00:00:56.034
You may need to run volta install and then
request a specific node in yarn version.

18
00:00:56.034 --> 00:00:57.580
This is something you would run globally.

19
00:00:57.580 --> 00:01:02.911
So this is not saying I want to pin a
given version in a particular project, but

20
00:01:02.911 --> 00:01:08.077
this is sort of like download, obtain and
use this node in yern@ version,

21
00:01:08.077 --> 00:01:13.100
and there's a separate command in
there you can use to change defaults.

22
00:01:13.100 --> 00:01:17.372
So, hopefully you've
cloned the project repo.

23
00:01:17.372 --> 00:01:23.235
You ran yarn inside the repo so
that it would instal all the dependencies.

24
00:01:23.235 --> 00:01:27.580
And now we're ready to begin our library.

25
00:01:27.580 --> 00:01:31.182
So I'm gonna switch over to VS code so
we can make this together.

26
00:01:38.235 --> 00:01:41.603
And that'll be the branch I use for
this project.

27
00:01:41.603 --> 00:01:45.186
So I'm going to enter the packages folder.

28
00:01:45.186 --> 00:01:48.670
Sorry, I'll start out at the root.

29
00:01:48.670 --> 00:01:52.516
I'm at the root of the project
right now as you should be.

30
00:01:52.516 --> 00:01:58.006
Let's go into packages,
and then within packages,

31
00:01:58.006 --> 00:02:03.506
we're gonna make a directory
called chat-stdlib.

32
00:02:03.506 --> 00:02:08.059
This will eventually become something
we import into our chat app and

33
00:02:08.059 --> 00:02:11.514
we're gonna put some code
in there with some tests,

34
00:02:11.514 --> 00:02:15.046
with some linting, and
this will come full circle and

35
00:02:15.046 --> 00:02:20.405
we'll bring this thing that we're building
into that Slack app in a later step.

36
00:02:20.405 --> 00:02:25.025
Oops, sorry, I have the folder there.

37
00:02:25.025 --> 00:02:29.322
This is the proof that I actually tried
this stuff and ensured that it works.

38
00:02:29.322 --> 00:02:32.866
Okay, so let's enter this folder.

39
00:02:38.665 --> 00:02:42.265
And now,
I'm gonna run a command using npx.

40
00:02:44.327 --> 00:02:48.036
Who knows what npx does?

41
00:02:48.036 --> 00:02:49.234
Yes sir.

42
00:02:49.234 --> 00:02:55.150
&gt;&gt; It invokes the bin for a particular

43
00:02:55.150 --> 00:03:00.454
node package without having to

44
00:03:00.454 --> 00:03:06.779
have a package.json and invoke it.

45
00:03:06.779 --> 00:03:08.854
&gt;&gt; Exactly.
&gt;&gt; npm run.

46
00:03:08.854 --> 00:03:14.177
&gt;&gt; Exactly, so what this lets you do is,
first of all, NPX is useful when

47
00:03:14.177 --> 00:03:20.067
you're running an NPM package that has
some sort of executable script in it.

48
00:03:20.067 --> 00:03:25.281
So you wouldn't want to do
like NPX low dash, right?

49
00:03:25.281 --> 00:03:29.892
NPX lodash would download lodash
on the fly, and it would say,

50
00:03:29.892 --> 00:03:33.894
run a command called low dash
from the lodash package,

51
00:03:33.894 --> 00:03:37.902
and you'd get an error saying,
well, let's try it.

52
00:03:37.902 --> 00:03:39.923
Why imagine what the error is gonna be?

53
00:03:42.752 --> 00:03:44.663
Could not determine executable to run.

54
00:03:44.663 --> 00:03:51.637
There's no executable in this package,
but gitignore has an executable.

55
00:03:54.123 --> 00:03:55.446
So we could do this.

56
00:03:55.446 --> 00:03:59.816
So this is equivalent to like running npm

57
00:03:59.816 --> 00:04:05.471
installed-g gitignore like
go grab the package for

58
00:04:05.471 --> 00:04:10.626
me and
then running the gitignore executable.

59
00:04:10.626 --> 00:04:13.905
So this is like a CLI package
that's published on npm.

60
00:04:13.905 --> 00:04:17.475
So we can prove that this works
by writing npx gitignore --help.

61
00:04:17.475 --> 00:04:22.543
We should see some reasonable,
oops, maybe not.

62
00:04:22.543 --> 00:04:26.601
An unexpected,
a wrong flag provided maybe,

63
00:04:26.601 --> 00:04:30.461
maybe ---help isn't a supported here.

64
00:04:30.461 --> 00:04:31.281
Let's just try it.

65
00:04:31.281 --> 00:04:33.593
Let's pretend we went to
the documentation and

66
00:04:33.593 --> 00:04:35.919
we looked at what this
gitignore package does.

67
00:04:35.919 --> 00:04:39.983
It turns out this creates
a dot gitignore file for us.

68
00:04:39.983 --> 00:04:45.273
And you can provide it the name of
like a language or a framework.

69
00:04:45.273 --> 00:04:49.676
And so this is going to create an awesome
gitignore for like JavaScript and

70
00:04:49.676 --> 00:04:50.677
Node projects.

71
00:04:50.677 --> 00:04:55.165
You could use Python here or
Golang or whatever you want, but

72
00:04:55.165 --> 00:04:58.597
it knows sort of based
on that type of project,

73
00:04:58.597 --> 00:05:03.455
what are the common folders that
shouldn't be checked into Git.

74
00:05:03.455 --> 00:05:08.155
If we look at our folder here, I'm
gonna close this up, chat standard lib.

75
00:05:08.155 --> 00:05:08.799
Look at this,

76
00:05:08.799 --> 00:05:11.983
it's got like a bunch of yarn specific
stuff that it's gonna ignore.

77
00:05:11.983 --> 00:05:18.679
It's got code coverage that it's gonna
ignore, grunt files, Bower components.

78
00:05:18.679 --> 00:05:21.708
This is all very
JavaScript specific stuff.

79
00:05:21.708 --> 00:05:24.360
Node and jspm modules.

80
00:05:24.360 --> 00:05:27.029
Ts build info that's
a type of build cache.

81
00:05:27.029 --> 00:05:30.114
So we're gonna see that
pop up in our repo today.

82
00:05:30.114 --> 00:05:34.338
It's very good that we're ignoring that
this is all stuff that should not be

83
00:05:34.338 --> 00:05:35.467
checked into lint.

84
00:05:35.467 --> 00:05:36.270
So there we go.

85
00:05:36.270 --> 00:05:41.949
We have a great gitignore file that
handles everything we care about and more.

86
00:05:41.949 --> 00:05:45.441
Like, all of this stuff is great.

87
00:05:45.441 --> 00:05:47.074
Some VS Code specific stuff.

88
00:05:47.074 --> 00:05:51.284
So, every language has
a bespoke gitignore like this.

89
00:05:51.284 --> 00:05:57.222
&gt;&gt; Chad said, didn't know this, super cool
and useful to save some time for show.

90
00:05:57.222 --> 00:06:00.117
&gt;&gt; Yep, it's more things.

91
00:06:00.117 --> 00:06:04.324
This will contain more things than you
will think of if you hand draw gItignore.

92
00:06:04.324 --> 00:06:08.987
And remember, once you accidentally
check things in to git depending on your

93
00:06:08.987 --> 00:06:13.305
settings, you may not actually get
to remove those from your git repo.

94
00:06:13.305 --> 00:06:14.576
They're still in your history.

95
00:06:14.576 --> 00:06:17.575
There's still, you know, things that
you potentially have to check out.

96
00:06:17.575 --> 00:06:22.561
So now the next step we're gonna take
is we want to package JSON here.

97
00:06:22.561 --> 00:06:29.862
And we could hand roll that too, but yarn
provides a great command here, yarn init.

98
00:06:29.862 --> 00:06:31.823
And I'm gonna run --yes.

99
00:06:31.823 --> 00:06:36.670
So if you ran yarn init without --yes, it
would ask you a bunch of questions about,

100
00:06:36.670 --> 00:06:38.528
what's your entry point file?

101
00:06:38.528 --> 00:06:40.170
What do you want the name
of your package to be?

102
00:06:40.170 --> 00:06:42.365
What's the initial version?

103
00:06:42.365 --> 00:06:46.413
What kind of license do you
want in your package JSON?

104
00:06:46.413 --> 00:06:50.605
We're just gonna have it go through and
make some reasonable assumptions,

105
00:06:50.605 --> 00:06:52.382
give us a really simple result.

106
00:06:52.382 --> 00:06:53.678
And this is all it did.

107
00:06:53.678 --> 00:06:57.844
So we have a package JSON now, but
it told us exactly what it is.

108
00:06:57.844 --> 00:07:02.232
So we have a name and then it's put, this
is like just a yarn feature where it keeps

109
00:07:02.232 --> 00:07:04.766
track of what package
manager you wish to use.

110
00:07:04.766 --> 00:07:07.154
We don't need to worry about that.

111
00:07:07.154 --> 00:07:09.813
But now we have package JSON.

112
00:07:09.813 --> 00:07:12.911
And we're going to add
a couple things to this.

113
00:07:12.911 --> 00:07:21.568
So first, we need a, we need to indicate
like the entry point of our package.

114
00:07:21.568 --> 00:07:23.657
And we're gonna do that with main.

115
00:07:23.657 --> 00:07:28.649
Dist/index.js, we're gonna end up having

116
00:07:28.649 --> 00:07:33.770
TypeScript source code
in a folder called SRC.

117
00:07:33.770 --> 00:07:37.268
And we're gonna have
the build output in dist.

118
00:07:37.268 --> 00:07:42.059
And if you were to look through that
gitignore file we just created,

119
00:07:42.059 --> 00:07:46.684
it's so common to have a folder
called dist that you don't want to

120
00:07:46.684 --> 00:07:51.077
check in to your git the like
it's already get ignored for us.

121
00:07:51.077 --> 00:07:57.701
All right, we're also gonna add,
we will add a license.

122
00:07:57.701 --> 00:07:59.493
And this we're gonna say no license.

123
00:08:02.535 --> 00:08:07.647
If you wanted to make this MIT license,
you do this whenever you want, for this

124
00:08:07.647 --> 00:08:12.924
context here where we're sort of including
this library as part of a larger app.

125
00:08:12.924 --> 00:08:16.025
This is never gonna really
get published to NPM, so

126
00:08:16.025 --> 00:08:18.197
we're not gonna worry about this.

127
00:08:18.197 --> 00:08:20.046
In fact, we could ensure that.

128
00:08:23.344 --> 00:08:26.370
I don't have this in the instructions,
but it shouldn't be harmful.

129
00:08:26.370 --> 00:08:27.105
Private true.

130
00:08:27.105 --> 00:08:29.630
What does private mean?

131
00:08:29.630 --> 00:08:32.848
If set to true,
NPM will refuse to publish it.

132
00:08:32.848 --> 00:08:37.333
Now we have a safeguard
ensuring that someone will have

133
00:08:37.333 --> 00:08:41.143
to remove this line in
order to make this work.

134
00:08:41.143 --> 00:08:43.983
All right,
GitHub copilot knows where I'm going next.

135
00:08:43.983 --> 00:08:48.046
[LAUGH] We're gonna create some scripts.

136
00:08:48.046 --> 00:08:51.869
So I'm just gonna change
these around a little bit.

137
00:08:51.869 --> 00:08:56.863
So for build, we're gonna run yarn tsc,
I don't know if this

138
00:08:56.863 --> 00:09:01.582
is necessary anymore, but
it's certainly not harmful.

139
00:09:01.582 --> 00:09:06.454
Yarn tsc gives me confidence and I'm
running the TypeScript compiler version

140
00:09:06.454 --> 00:09:10.377
in this repo, the right version
of this TypeScript compiler.

141
00:09:10.377 --> 00:09:15.259
Sometimes my experience has been that it
could just be with older versions of yarn.

142
00:09:15.259 --> 00:09:20.768
If I were to just do this and maybe I like
forgot to install TypeScript in this repo

143
00:09:20.768 --> 00:09:26.443
or something, it might run like a globally
installed version of TypeScript, and

144
00:09:26.443 --> 00:09:31.565
I have been trolled and confused by
that kind of problem enough in my life.

145
00:09:31.565 --> 00:09:35.328
I've decided I'd never
want that to happen again.

146
00:09:35.328 --> 00:09:39.746
Let's get rid of this cuz that's
not how we're gonna do start.

147
00:09:39.746 --> 00:09:41.825
We can take care of test here, though.

148
00:09:41.825 --> 00:09:44.894
We're gonna do the same thing here,
yarn, jest.

149
00:09:44.894 --> 00:09:46.244
We haven't installed jest yet.

150
00:09:46.244 --> 00:09:49.988
We will, we're just taking care of
all of our yarn scripts up front.

151
00:09:52.818 --> 00:09:57.568
Okay, we're gonna have actually
don't think we need the dev script.

152
00:09:57.568 --> 00:10:01.851
There's one in the notes, but
I don't think we really need it.

153
00:10:01.851 --> 00:10:03.322
We do need a lint script.

154
00:10:06.459 --> 00:10:08.496
I tend to just put them
in alphabetical order.

155
00:10:08.496 --> 00:10:10.394
Cuz then when you code auto format,

156
00:10:10.394 --> 00:10:14.649
you don't get what a bunch of thrash where
someone has to stare at it and be like.

157
00:10:14.649 --> 00:10:20.992
Something change here or is it just
shifting lines so yarn eslint and

158
00:10:20.992 --> 00:10:26.334
then we're gonna say we want
to lint the source folder and

159
00:10:26.334 --> 00:10:31.454
we want JavaScript and
TypeScript files to be linted,

160
00:10:31.454 --> 00:10:34.374
this is just file extensions.

161
00:10:36.158 --> 00:10:39.187
Eslint was built for
JavaScript originally,

162
00:10:39.187 --> 00:10:43.146
I think it's still by default
Lint's JavaScript only, but

163
00:10:43.146 --> 00:10:47.663
this is one way to get it to sort of
start paying attention to ts files.

164
00:10:47.663 --> 00:10:48.277
And that's it.

165
00:10:48.277 --> 00:10:51.759
So if we were to describe what
each of these scripts does,

166
00:10:51.759 --> 00:10:53.724
this should build the project.

167
00:10:53.724 --> 00:10:55.428
This should lint the project, right?

168
00:10:55.428 --> 00:10:58.469
Checking for code style, best practices,

169
00:10:58.469 --> 00:11:01.846
things that sort of go
beyond the type checking.

170
00:11:01.846 --> 00:11:07.037
And this should run tests, like we're
gonna have a test that's written

171
00:11:07.037 --> 00:11:11.644
with Jest as the runner, and
this will make sure that that runs.

172
00:11:11.644 --> 00:11:15.347
Make sure you save this
file at this point.

173
00:11:15.347 --> 00:11:22.653
Because now we're gonna do something with
Volta to that will modify package JSON.

174
00:11:22.653 --> 00:11:28.403
So make sure you're in this
chat standard lib folder,

175
00:11:28.403 --> 00:11:33.038
and you're gonna run Volta Pin node@lts.

176
00:11:33.038 --> 00:11:37.913
The latest lts of Node is Node 18.18.2.

177
00:11:37.913 --> 00:11:43.089
If you look at Node's release and
versioning policy,

178
00:11:43.089 --> 00:11:48.826
they always recommend you use
the latest lts in production,

179
00:11:48.826 --> 00:11:51.878
not the latest version of Node.

180
00:11:51.878 --> 00:11:56.134
And then yarn@ latest

181
00:11:56.134 --> 00:12:01.286
major version of, sorry,

182
00:12:01.286 --> 00:12:07.565
latest minor version of yarn 3.

183
00:12:07.565 --> 00:12:12.493
You can think of these just like sort of
package JSON style versioning constraints.

184
00:12:12.493 --> 00:12:17.320
You run that, and
we should see something pop up here.

185
00:12:17.320 --> 00:12:23.092
If we see an error and it relates to
networking, it may be because Volt has

186
00:12:23.092 --> 00:12:29.350
not been fetching node packages this
morning, like bundles of node and yarn.

187
00:12:29.350 --> 00:12:31.422
And I suspect that's
what's happening here.

188
00:12:34.067 --> 00:12:36.530
Should be nearly instant, so
I'm gonna try it one more time.

189
00:12:38.690 --> 00:12:46.278
All right, normally this would work, but
I'm gonna do manually what this would do.

190
00:12:46.278 --> 00:12:47.810
And it should be fine.

191
00:12:47.810 --> 00:12:52.116
We can go to the root level package
JSON of the workshop project.

192
00:12:52.116 --> 00:13:00.856
Grab this, we're just gonna paste
that into our libraries package JSON.

193
00:13:04.156 --> 00:13:04.854
Copy.

194
00:13:08.153 --> 00:13:08.985
Paste.

195
00:13:14.238 --> 00:13:19.000
So the reason I'm doing this is
you potentially could end up like,

196
00:13:19.000 --> 00:13:23.422
if you want to upgrade Node in
a large scale piece of software,

197
00:13:23.422 --> 00:13:27.420
let's say this is like
a Node.js backend of some sort,

198
00:13:27.420 --> 00:13:32.295
like it's big API, you might wanna
test different Node versions.

199
00:13:32.295 --> 00:13:36.012
Locally in little sub parts
of your of your repo and

200
00:13:36.012 --> 00:13:40.890
you could start bumping this up to 20 and
see how that works out.

201
00:13:40.890 --> 00:13:44.897
And then this would let you run
tests in that new node version and

202
00:13:44.897 --> 00:13:49.751
things like that without having to
necessarily like change the whole repo.

203
00:13:49.751 --> 00:13:54.305
This is gonna be a common theme we have
here where we don't wanna be changing

204
00:13:54.305 --> 00:13:57.921
settings or having like big
switches that were flipping for

205
00:13:57.921 --> 00:14:00.902
a project of like 100,000 lines of code.

206
00:14:00.902 --> 00:14:04.461
You wanna be sort of operate locally and
validate,

207
00:14:04.461 --> 00:14:09.284
and then start to apply that change
more broadly and validate there.

208
00:14:09.284 --> 00:14:12.594
We don't like big banks,
they're risky, and

209
00:14:12.594 --> 00:14:18.232
if they don't work out You
can create stoppage for

210
00:14:18.232 --> 00:14:22.920
every contributor to the team and when
that number is big, it's a big problem

