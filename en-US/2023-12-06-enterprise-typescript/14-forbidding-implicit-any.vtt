WEBVTT

1
00:00:00.790 --> 00:00:05.727
Alright, step three, the third step we're
gonna take on is forbidding implicit

2
00:00:05.727 --> 00:00:07.830
entities in our project.

3
00:00:07.830 --> 00:00:12.679
So I'm gonna close all my editors
here just to give us some more space,

4
00:00:12.679 --> 00:00:14.420
that's great.

5
00:00:14.420 --> 00:00:19.508
We're gonna go to our TS config,
and we're gonna say

6
00:00:19.508 --> 00:00:25.500
no implicit any true, so
there's just like a negative there,

7
00:00:25.500 --> 00:00:30.477
right, we're saying forbid
implicit entities and

8
00:00:30.477 --> 00:00:33.999
let's just run your own type check.

9
00:00:42.681 --> 00:00:46.440
Whoa, that's a lot 59 errors and 20 files.

10
00:00:46.440 --> 00:00:48.330
We're gonna go to each of these 20 files.

11
00:00:48.330 --> 00:00:50.530
No, we're not going to do that.

12
00:00:50.530 --> 00:00:55.624
This is a great opportunity to demonstrate
how we can look at something like this and

13
00:00:55.624 --> 00:01:00.710
say if it seems too big, it's more than
I want to take on in a poll request.

14
00:01:00.710 --> 00:01:05.306
We're gonna make this change
locally like within one folder and

15
00:01:05.306 --> 00:01:08.760
demonstrate how we can we can do that.

16
00:01:08.760 --> 00:01:14.360
And, it becomes more approachable that,
you can do this across many days or

17
00:01:14.360 --> 00:01:17.685
many weeks,
however long you want to take but

18
00:01:17.685 --> 00:01:22.870
it lets us have a tighter TypeScript
config just in one part of our app.

19
00:01:22.870 --> 00:01:27.246
So I think where I wanted to have
a start was the utils folder again,

20
00:01:27.246 --> 00:01:31.173
principle of starting with
low level stuff first, right?

21
00:01:31.173 --> 00:01:35.509
So in our utils folder,
I want you to create a new TS config.

22
00:01:40.932 --> 00:01:45.812
This is gonna be very similar compared
to what we did when we had a TSconfig in

23
00:01:45.812 --> 00:01:49.697
our tests folder, and
we're gonna start out the same way.

24
00:01:49.697 --> 00:01:55.664
Not exclude,
extends this is a new feature by the way,

25
00:01:55.664 --> 00:02:00.730
relatively modern TypeScript feature.

26
00:02:00.730 --> 00:02:03.280
You can extend multiple things now.

27
00:02:03.280 --> 00:02:07.800
So you could have a TS config that
just represents your strict type

28
00:02:07.800 --> 00:02:11.662
checking stuff, and
then one that sort of represents,

29
00:02:11.662 --> 00:02:16.676
let's say you have different module
formats that you're publishing,

30
00:02:16.676 --> 00:02:21.960
you wanna build common JS and
then you wanna build ES native ES modules.

31
00:02:21.960 --> 00:02:25.724
So it's sometimes useful to be able
to extend for multiple things,

32
00:02:25.724 --> 00:02:29.300
they just sort of layer on top of
each other in order, so why not?

33
00:02:29.300 --> 00:02:31.230
We'll use that syntax
even though we have one.

34
00:02:31.230 --> 00:02:34.938
But this is another helpful thing for
large,

35
00:02:34.938 --> 00:02:40.891
large projects that you can sort of
break your TS config up into pieces and

36
00:02:40.891 --> 00:02:43.930
compiler options, just one thing.

37
00:02:47.530 --> 00:02:52.242
We're gonna remember to turn it off
to have it no longer turned on in

38
00:02:52.242 --> 00:02:55.450
a root-level TS config, comment that out.

39
00:02:59.141 --> 00:03:06.110
One more line,
include this folder, all right?

40
00:03:06.110 --> 00:03:07.904
So once you've done that,

41
00:03:07.904 --> 00:03:12.433
we can run a command that will just
type check within this one folder.

42
00:03:16.351 --> 00:03:21.846
Tsc -P for project,
src/utils so we're just saying

43
00:03:21.846 --> 00:03:26.750
like just just type check
that one folder for me.

44
00:03:26.750 --> 00:03:31.126
We're just trying to get that
happy with this more strict role.

45
00:03:33.587 --> 00:03:37.694
Did I put this in the wrong place,

46
00:03:37.694 --> 00:03:42.253
U-T-I-L-S, tsconfig.json.

47
00:03:45.590 --> 00:03:46.578
Did I save it?

48
00:03:53.075 --> 00:03:55.544
&gt;&gt; I think you're in utils
in your test folder.

49
00:03:55.544 --> 00:04:00.464
&gt;&gt; [LAUGH] I am, thank you.

50
00:04:00.464 --> 00:04:03.300
Oops, we'll put it in
the real utils folder.

51
00:04:05.350 --> 00:04:08.676
This is why I create things on the CLI
[LAUGH] ,so that I don't get screwed up

52
00:04:08.676 --> 00:04:10.110
like that.

53
00:04:10.110 --> 00:04:17.140
All right, there we go,
that's a computer doing things.

54
00:04:17.140 --> 00:04:22.720
All right, we got 11 errors and 4 files
way better than 59 errors across 20 files.

55
00:04:22.720 --> 00:04:26.920
So great, so let's look at networking
like what's happening here.

56
00:04:26.920 --> 00:04:33.430
We should really be in this mode
are focused on a specific task.

57
00:04:33.430 --> 00:04:38.277
We're putting reasonable type
information in place if it's easy

58
00:04:38.277 --> 00:04:42.177
to understand what a type
should be forgiving value.

59
00:04:42.177 --> 00:04:46.996
Or if it seems complicated and
we don't know the answer yet,

60
00:04:46.996 --> 00:04:51.638
we kick out and we say,
I'll put an explicit, any there.

61
00:04:51.638 --> 00:04:56.060
That's totally fine in this step you're
just trying to get rid of the implicit

62
00:04:56.060 --> 00:04:56.980
eddies.

63
00:04:56.980 --> 00:05:01.472
So this, we got some types here.

64
00:05:05.597 --> 00:05:09.420
There's my request info and my request
a knit, which should be optional.

65
00:05:10.650 --> 00:05:15.520
And I can delete this stuff now,
it would compile if I left this in but

66
00:05:15.520 --> 00:05:20.562
just for readability, I don't like
to leave both types on the code and

67
00:05:20.562 --> 00:05:22.390
types in the comments.

68
00:05:22.390 --> 00:05:26.440
They can get out of sync super easily and

69
00:05:26.440 --> 00:05:31.240
cause many WTF, so okay that's networking.

70
00:05:31.240 --> 00:05:34.337
And I'm just looking at these,
see this get Json get Json, so

71
00:05:34.337 --> 00:05:37.140
those are probably things
I already just fixed.

72
00:05:37.140 --> 00:05:42.620
Let's look at errors.ts,
error description I have isn't any here.

73
00:05:44.070 --> 00:05:49.520
It looks like what I'm doing
is just like persisting it as.

74
00:05:49.520 --> 00:05:55.550
Serializing it into a template string and
it has the word description in it.

75
00:05:57.670 --> 00:06:02.657
So I'm torn here I could put in any that's
technically what's in the Jas doc types or

76
00:06:02.657 --> 00:06:04.180
I could put a string.

77
00:06:04.180 --> 00:06:06.400
I think I'm gonna put a string here.

78
00:06:06.400 --> 00:06:10.945
It's a fairly small risks
to take then error,

79
00:06:10.945 --> 00:06:15.497
let's look at this, stringify error value.

80
00:06:15.497 --> 00:06:18.110
We're checking to see if
it's an instance of error.

81
00:06:18.110 --> 00:06:21.887
So at the very least, it could be
an error but also something else,

82
00:06:21.887 --> 00:06:25.798
because why would I have to check to
see if it's an instance of error,

83
00:06:25.798 --> 00:06:27.770
if I knew it was an error coming in?

84
00:06:29.900 --> 00:06:33.210
I'm gonna go ahead and say, let's see
if an unknown will work well here.

85
00:06:35.020 --> 00:06:36.500
Can someone tell me what unknown is?

86
00:06:38.410 --> 00:06:39.378
&gt;&gt; Is it generic?

87
00:06:39.378 --> 00:06:42.457
&gt;&gt; Not quite.

88
00:06:42.457 --> 00:06:44.910
&gt;&gt; It's exactly what it sounds like.

89
00:06:44.910 --> 00:06:47.726
You don't know what it's gonna be,
so we have to check.

90
00:06:47.726 --> 00:06:52.466
&gt;&gt; There you go it's kinda like any but
it's opaque,

91
00:06:52.466 --> 00:06:57.976
we can't use it until we check
it out like until we inspect it

92
00:06:57.976 --> 00:07:04.724
use a type card like this right here
it's unknown and down here, white.

93
00:07:07.148 --> 00:07:12.120
There it's an error, so here it's unknown,
here it's an error, right?

94
00:07:12.120 --> 00:07:14.990
Now we're in the else from the unknown.

95
00:07:14.990 --> 00:07:18.959
So we know it's not an instance of error,
but TypeScript doesn't give us a good way

96
00:07:18.959 --> 00:07:22.270
to say, look, it could be anything,
but not an instance of error.

97
00:07:22.270 --> 00:07:25.080
Like there's no way to
describe that in TypeScript.

98
00:07:26.560 --> 00:07:28.250
Cool, so maybe that worked out.

99
00:07:28.250 --> 00:07:30.860
We'll have to see how
the tests work out here.

100
00:07:30.860 --> 00:07:34.800
Here we've got error,
we'll use that type here.

101
00:07:36.100 --> 00:07:39.880
And the return type is a string,
so I'll put that in as well.

102
00:07:39.880 --> 00:07:42.759
I like explicit return
types on my function.

103
00:07:45.220 --> 00:07:47.600
Okay, making some progress here.

104
00:07:47.600 --> 00:07:54.470
Let's look at deferred,
just more JSDoc stuff I got to copy down.

105
00:07:54.470 --> 00:07:58.923
It would be totally appropriate for some
of these if you just didn't have the JSDoc

106
00:07:58.923 --> 00:08:01.517
information here,
you could just make it any.

107
00:08:01.517 --> 00:08:05.180
You might choose to do that if I'm
moving a little fast for you here.

108
00:08:05.180 --> 00:08:11.114
There's plenty of stuff,
plenty of extra steps,

109
00:08:11.114 --> 00:08:15.810
right, this is like the path I gave you.

110
00:08:15.810 --> 00:08:20.725
It's an 11 step process where eventually
you're gonna get bugged about explicit

111
00:08:20.725 --> 00:08:24.822
NES and then you could come back here and
provide a more explicit type.

112
00:08:24.822 --> 00:08:29.134
We're really just trying to get
a new compiler setting in there and

113
00:08:29.134 --> 00:08:30.828
then squash the errors and

114
00:08:30.828 --> 00:08:36.065
then you just trust that as we turn up the
strictness both in ESLint and TS config.

115
00:08:37.770 --> 00:08:40.796
Anything that you sort of like
punted on where you just said,

116
00:08:40.796 --> 00:08:42.120
they could put it any here.

117
00:08:42.120 --> 00:08:44.441
Eventually you'll be
bugged to get rid of that.

118
00:08:46.713 --> 00:08:47.740
And run this one more time.

119
00:08:47.740 --> 00:08:53.542
So you were at, not quite api.ts.

120
00:08:53.542 --> 00:08:54.879
What do we got going on here?

121
00:08:57.118 --> 00:08:58.192
An interesting one,

122
00:08:58.192 --> 00:09:01.960
here's another example of me using
like a more complicated type in JSDoc.

123
00:09:03.090 --> 00:09:06.580
I've got like an object type
here with fields on it.

124
00:09:06.580 --> 00:09:12.625
So I'm just gonna bring this in,
get data, I'm gonna bring this object in,

125
00:09:12.625 --> 00:09:16.351
I'm gonna have to delete
all these asterisks.

126
00:09:25.065 --> 00:09:28.850
Cool, so there's my options object.

127
00:09:31.150 --> 00:09:34.271
Promise is yelling at me here,
I'll get to that in a second.

128
00:09:38.192 --> 00:09:42.512
Let's look lower here,

129
00:09:42.512 --> 00:09:47.253
there's an implicit any.

130
00:09:47.253 --> 00:09:50.355
Okay, I'm gonna choose
to make these enemies

131
00:09:50.355 --> 00:09:53.535
like I don't know what
JSON data is going to be,

132
00:09:53.535 --> 00:09:58.400
I have to look pretty hard at this
promise, it's a very abstract thing.

133
00:09:58.400 --> 00:10:02.969
This is like something built on top
of React use effect that goes and

134
00:10:02.969 --> 00:10:07.537
fetches data for me and set some
state using a state senator that's

135
00:10:07.537 --> 00:10:11.942
passed into it once the API calls
come back up It's not obvious,

136
00:10:11.942 --> 00:10:15.890
looking at this,
what these types should be.

137
00:10:15.890 --> 00:10:20.870
We're going for any,
it's fine at this stage.

138
00:10:20.870 --> 00:10:22.670
Don't let the perfect be
the enemy of the good.

139
00:10:22.670 --> 00:10:28.340
And then finally, promise takes a type
param here, and we're not giving it one.

140
00:10:28.340 --> 00:10:30.615
What should we give this
promise as its type param?

141
00:10:34.693 --> 00:10:36.660
&gt;&gt; I gave mine unknown.

142
00:10:36.660 --> 00:10:43.624
&gt;&gt; Let's try an unknown,
hey, appears to work.then.

143
00:10:47.730 --> 00:10:53.719
So, this is coming in, actually I can
delete these now, I bet, let's see.

144
00:10:53.719 --> 00:10:58.255
Yep, JSON data is an unknown,
it's no longer an implicit any,

145
00:10:58.255 --> 00:10:59.944
get rid of this one too.

146
00:10:59.944 --> 00:11:05.975
Awesome, that's great, and
again, we have just been,

147
00:11:05.975 --> 00:11:13.130
we've been working with type annotations,
function signatures.

148
00:11:13.130 --> 00:11:18.670
We have not really altered the way code
works at all here, that's your goal.

149
00:11:18.670 --> 00:11:21.160
It doesn't always turn out this clean, but

150
00:11:21.160 --> 00:11:24.820
you wanna minimize the degree
that you have to change code.

151
00:11:24.820 --> 00:11:26.280
We did change it a little bit.

152
00:11:26.280 --> 00:11:31.426
You remember when we this used to be if,
like, AppContainer triple equals false,

153
00:11:31.426 --> 00:11:35.616
that's the kind of thing where if
you do like 50 of those in one PR,

154
00:11:35.616 --> 00:11:38.640
a couple of them will screw stuff up.

155
00:11:38.640 --> 00:11:43.460
Because it feels like you're
just playing Whack a Mole.

156
00:11:43.460 --> 00:11:48.080
And you can think of it as,
I'm making all of these things better,

157
00:11:48.080 --> 00:11:53.548
all 50 of them, but somewhere, someone was
passing in a zero or an empty string and

158
00:11:53.548 --> 00:11:58.038
they thought that it's better to
sort of be more careful about that.

159
00:11:58.038 --> 00:12:03.223
And to try to add the type information,
and then later you can come in and

160
00:12:03.223 --> 00:12:07.470
alter the behavior more carefully,
see where we're at?

161
00:12:12.599 --> 00:12:15.640
Great, type checking passed.

162
00:12:17.590 --> 00:12:20.925
So we got a couple choices here and
for the purpose of time,

163
00:12:20.925 --> 00:12:22.980
I'm gonna have a bias towards one.

164
00:12:25.160 --> 00:12:26.950
I'll just tell you what I would do next.

165
00:12:28.250 --> 00:12:32.635
I would make a commit,
open a PR, get this merged in,

166
00:12:32.635 --> 00:12:38.287
make I would take this tsconfig.json and
I would literally just drag

167
00:12:38.287 --> 00:12:45.360
it into this data folder where we would
start to add more type information.

168
00:12:45.360 --> 00:12:48.710
And I would just do another
PR straight from there.

169
00:12:48.710 --> 00:12:50.990
It's a lot more of the same
stuff that we've been doing.

170
00:12:50.990 --> 00:12:54.190
I'm not sure it's super valuable that
we all go through and do it together.

171
00:12:54.190 --> 00:12:58.296
Now here you can see,
like this is an untyped thing.

172
00:12:58.296 --> 00:13:00.590
It's an object that needs a type.

173
00:13:00.590 --> 00:13:02.600
It's being used as
a dictionary apparently.

174
00:13:04.010 --> 00:13:08.971
We could totally get in there and do that,
but it's just a lot of the same of

175
00:13:08.971 --> 00:13:13.670
looking at the implementation
of the function, how's it used?

176
00:13:13.670 --> 00:13:16.690
What's a safe type that I can put on it?

177
00:13:16.690 --> 00:13:18.910
Let's not perturb the way the code works.

178
00:13:18.910 --> 00:13:23.390
Let's just describe the types,
check it in, move on.

179
00:13:25.340 --> 00:13:30.307
And you could ask you could add this
command to your CI or something you'd say

180
00:13:30.307 --> 00:13:35.269
I wanna check this in and I also want the
bill to only pass If everything in this

181
00:13:35.269 --> 00:13:40.330
folder continues to work this way,
it continues to pass with this tsconfig.

182
00:13:41.340 --> 00:13:46.055
Why that's beneficial is somebody else
might be currently working on adding

183
00:13:46.055 --> 00:13:50.404
something new to the utils folder,
and you can protect your progress by

184
00:13:50.404 --> 00:13:54.700
checking in that tsconfig and
by making sure that this runs.

185
00:13:54.700 --> 00:13:58.740
All right, it means that, okay,
they're gonna they're gonna

186
00:13:58.740 --> 00:14:03.441
check their code in they're gonna open
up a PR like this is where depending on

187
00:14:03.441 --> 00:14:08.151
how you have things set up it could
fail and everything's merged together.

188
00:14:08.151 --> 00:14:11.729
But if you force people to
rebase before merging their PR,

189
00:14:11.729 --> 00:14:15.770
they'd get in your change,
CI would run, it would fail.

190
00:14:15.770 --> 00:14:19.729
And then they'd be, they'd say, it looks
like I have to change some things here,

191
00:14:19.729 --> 00:14:21.950
I'm gonna make you commit and
we'll move on.

192
00:14:23.890 --> 00:14:28.722
And if you want more practice, feel free
to go in and do a little more conversion,

193
00:14:28.722 --> 00:14:29.230
right?

194
00:14:31.790 --> 00:14:33.070
It just takes a little while longer.

