WEBVTT

1
00:00:01.260 --> 00:00:02.947
Yes, sir.

2
00:00:02.947 --> 00:00:05.706
&gt;&gt; So in the past, for
typing react components,

3
00:00:05.706 --> 00:00:09.952
I've just used an interface called
props at the top of the component and

4
00:00:09.952 --> 00:00:13.664
not use the React.FC,
is there an advantage to typing that?

5
00:00:13.664 --> 00:00:16.791
It's a functional component
instead of just the props.

6
00:00:16.791 --> 00:00:18.876
&gt;&gt; Can you talk me through what you do?

7
00:00:18.876 --> 00:00:21.971
I'm not sure I understand,
like an interface called props?

8
00:00:21.971 --> 00:00:22.527
&gt;&gt; Yep.

9
00:00:22.527 --> 00:00:24.642
And then-
&gt;&gt; Like that?

10
00:00:24.642 --> 00:00:29.962
&gt;&gt; Whatever props I'm passing in,
I would just type it in the parentheses

11
00:00:29.962 --> 00:00:33.360
of the function instead of the,
&gt;&gt; Over here.

12
00:00:33.360 --> 00:00:40.209
&gt;&gt; Yep, so-
&gt;&gt; Is this with TypeScript or React props?

13
00:00:40.209 --> 00:00:41.606
&gt;&gt; This is with TypeScript.

14
00:00:41.606 --> 00:00:46.907
So the Squiggly braces
channel would equal props-

15
00:00:46.907 --> 00:00:48.059
&gt;&gt; Llike this?

16
00:00:48.059 --> 00:00:52.311
&gt;&gt; Yeah, colon props.

17
00:00:52.311 --> 00:00:54.056
&gt;&gt; This will also work.

18
00:00:54.056 --> 00:00:54.683
&gt;&gt; Just give it.

19
00:00:54.683 --> 00:00:55.692
&gt;&gt; Yeah.

20
00:00:55.692 --> 00:00:57.441
&gt;&gt; Can I show you where it won't work?

21
00:00:57.441 --> 00:00:58.280
&gt;&gt; Yeah.

22
00:00:58.280 --> 00:01:04.378
&gt;&gt; This works a fair bit of the time
more than half, I would say.

23
00:01:04.378 --> 00:01:05.380
Let's look at loading.

24
00:01:06.720 --> 00:01:11.640
So we've got a message that's a string,
and we don't have a good type here.

25
00:01:11.640 --> 00:01:16.620
Let's say message string,
we can give it a nice type there.

26
00:01:16.620 --> 00:01:17.785
Format, please.

27
00:01:21.238 --> 00:01:27.934
Cool, let's add our props
interface here and it's just this.

28
00:01:31.825 --> 00:01:32.659
Oops, sorry.

29
00:01:35.647 --> 00:01:40.388
So we can just delete this.

30
00:01:46.233 --> 00:01:48.400
Sorry, you wanted this here, props.

31
00:01:51.340 --> 00:01:54.432
We're already seeing a problem.

32
00:01:54.432 --> 00:01:57.740
The fact that we're using children
means this approach won't work.

33
00:01:57.740 --> 00:02:00.860
Any time you're using children,

34
00:02:00.860 --> 00:02:05.603
you're gonna wanna use
the built-in React types.

35
00:02:05.603 --> 00:02:08.526
Given, I wasn't doing
React.props with children and

36
00:02:08.526 --> 00:02:11.084
wrapping it around
the props interface before.

37
00:02:11.084 --> 00:02:16.240
But the approach of just inlining it,
it works as long as you're

38
00:02:16.240 --> 00:02:21.503
only taking props in as arguments,
not children but just props.

39
00:02:21.503 --> 00:02:26.354
And, you know, TypeScript's smart
enough to know that you're returning

40
00:02:26.354 --> 00:02:30.998
a JSX fragment from loading,
even without this type information here.

41
00:02:30.998 --> 00:02:37.171
There's your JSX element, so this matches
like a childless React component.

42
00:02:37.171 --> 00:02:40.804
You can just infer your way to it,
you know what's being returned,

43
00:02:40.804 --> 00:02:44.654
you know what you're taking it as
an argument, it's perfectly fine.

44
00:02:44.654 --> 00:02:50.233
But as soon as children are involved
you're gonna want to do it that way,

45
00:02:50.233 --> 00:02:51.336
so we'd say.

46
00:02:51.336 --> 00:02:56.183
&gt;&gt; What I would do with the interface
would just add children in the interface

47
00:02:56.183 --> 00:02:59.229
of props, and
then you can put react node, and

48
00:02:59.229 --> 00:03:04.175
it will know that the children are they
will know what he's talking about.

49
00:03:04.175 --> 00:03:05.719
So you can still use children with it?

50
00:03:05.719 --> 00:03:06.437
&gt;&gt; You could.

51
00:03:06.437 --> 00:03:09.459
&gt;&gt; Yeah.
&gt;&gt; Let's look at what react with child

52
00:03:09.459 --> 00:03:10.053
props.

53
00:03:10.053 --> 00:03:15.136
&gt;&gt; You could also type
the puram not as your props,

54
00:03:15.136 --> 00:03:18.451
props with children of props.

55
00:03:18.451 --> 00:03:18.964
&gt;&gt; There you go.

56
00:03:18.964 --> 00:03:20.781
&gt;&gt; So props as the generic argument there.

57
00:03:20.781 --> 00:03:25.626
&gt;&gt; Yep, that's that's just what I was
going towards because effectively

58
00:03:25.626 --> 00:03:29.369
props with children is doing
what you're describing.

59
00:03:29.369 --> 00:03:32.037
So if we do it this way,
just to finish the example.

60
00:03:40.198 --> 00:03:44.402
React props with children props,
everything's happy,

61
00:03:44.402 --> 00:03:47.499
I don't see channel TSX lighting up here.

62
00:03:47.499 --> 00:03:54.910
&gt;&gt; And if we look at this, here's your P,
P is unknown, and look at that.

63
00:03:54.910 --> 00:03:56.941
You've been doing it the whole time.

64
00:03:56.941 --> 00:03:59.223
I mean, what you've been doing is correct.

65
00:03:59.223 --> 00:04:00.275
&gt;&gt; Yeah.

66
00:04:00.275 --> 00:04:02.874
&gt;&gt; This is just a name thing
that also does the same thing.

67
00:04:02.874 --> 00:04:05.583
&gt;&gt; Just more work for what I was doing.

68
00:04:05.583 --> 00:04:06.797
&gt;&gt; More work?

69
00:04:06.797 --> 00:04:09.101
Yeah, this is a long
thing to type out too,

70
00:04:09.101 --> 00:04:11.353
I just don't think either is incorrect.

71
00:04:11.353 --> 00:04:16.212
However, I do know that if React ever
changes the way you describe children,

72
00:04:16.212 --> 00:04:20.249
in terms of the types,
I'll get that benefit cuz I'm consuming

73
00:04:20.249 --> 00:04:24.159
it directly from React whereas,
it's possible elsewhere.

74
00:04:24.159 --> 00:04:27.652
There have been times where
React kind of changes things.

75
00:04:27.652 --> 00:04:31.964
There was a time I don't know if it was
like 16 to 17 where you had to call

76
00:04:31.964 --> 00:04:35.999
super in like, pass an argument into
super or something like that for

77
00:04:35.999 --> 00:04:37.554
class based components.

78
00:04:37.554 --> 00:04:41.503
Sometimes they change things up and
if I grabbed their types and

79
00:04:41.503 --> 00:04:46.663
feed it right back to them, I think that
maximizes the chance for compatibility.

80
00:04:46.663 --> 00:04:50.716
But nothing what you're describing, like
nothing you're saying, seems harmful or

81
00:04:50.716 --> 00:04:51.611
short-sighted?

82
00:04:51.611 --> 00:04:55.428
It's literally the same thing,
just expressed a different way.

83
00:04:55.428 --> 00:05:00.351
&gt;&gt; One possibly minor advantage to long
handing it the way that you have been

84
00:05:00.351 --> 00:05:02.663
is you can make children-
&gt;&gt; Defined.

85
00:05:02.663 --> 00:05:05.969
&gt;&gt; Mandatory-
&gt;&gt; Yep.

86
00:05:05.969 --> 00:05:10.675
&gt;&gt; If you need it for like a header,
it doesn't make sense to have

87
00:05:10.675 --> 00:05:12.625
an empty header-
&gt;&gt; Like if-

88
00:05:12.625 --> 00:05:15.848
&gt;&gt; Want children pass to you, so?

89
00:05:15.848 --> 00:05:19.192
&gt;&gt; Yeah, it would give you
at the call site, you know,

90
00:05:19.192 --> 00:05:23.543
some feedback that you can't use
it as a self-closing component.

91
00:05:24.825 --> 00:05:27.779
Yeah, just different anyways,
the skin and cat.

92
00:05:27.779 --> 00:05:32.647
I don't like naming my interfaces props,
though, I will tell you that [LAUGH]

93
00:05:32.647 --> 00:05:33.223
&gt;&gt; Why?

94
00:05:33.223 --> 00:05:37.888
&gt;&gt; Because sometimes I want to grab this
type and use it on the calling side, so

95
00:05:37.888 --> 00:05:41.455
I can create a variable that
represents all of the props.

96
00:05:41.455 --> 00:05:47.333
I'm passing into a component,
and I want to be able to do this.

97
00:05:47.333 --> 00:05:51.756
And now if I'm importing a bunch of
different things called props I ended

98
00:05:51.756 --> 00:05:55.032
up having to do,
I have to alias every single import.

99
00:05:55.032 --> 00:06:03.766
I would rather just prefix this with
the component name or something like that.

100
00:06:08.003 --> 00:06:12.908
We'll leave this like this
totally valid way to do okay,

101
00:06:12.908 --> 00:06:16.801
just making sure I'm
staying on track here.

102
00:06:16.801 --> 00:06:22.543
We don't have to go like all the way
through here, it's just more of the same

103
00:06:22.543 --> 00:06:27.765
where we would, here we could just
say something like that, right?

104
00:06:27.765 --> 00:06:33.683
And as we're doing this, some things may
flare up, and yeah, this is a much faster.

105
00:06:37.258 --> 00:06:43.597
But I don't think they will, Actually,

106
00:06:43.597 --> 00:06:47.957
I'm losing the thing that I was
trying to do here, which was,

107
00:06:49.513 --> 00:06:54.881
Making sure I don't expose things to
the wholesale representation of things,

108
00:06:54.881 --> 00:07:00.101
but I think you'll probably get this
approach and how we continue to do this.

