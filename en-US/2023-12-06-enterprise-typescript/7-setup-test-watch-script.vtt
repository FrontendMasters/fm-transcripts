WEBVTT

1
00:00:00.490 --> 00:00:04.466
Would you recommend adding a build step
to the test script in package.json?

2
00:00:04.466 --> 00:00:06.740
&gt;&gt; Yeah, I might.

3
00:00:06.740 --> 00:00:08.301
So your question is,

4
00:00:08.301 --> 00:00:13.370
would I add a build script before
running tests in my package.json?

5
00:00:13.370 --> 00:00:16.020
I could, that seems like a good idea.

6
00:00:18.280 --> 00:00:19.440
There you go.

7
00:00:19.440 --> 00:00:22.985
Yeah, this is a nice little ergonomic
improvement where I can run yarn test.

8
00:00:25.709 --> 00:00:30.678
Now, if I've already done a build, for
example, this will do a double build,

9
00:00:30.678 --> 00:00:35.600
but it's pretty quick, given that
we have this tsbuildinfo file here.

10
00:00:35.600 --> 00:00:37.590
It'll look at the source code.

11
00:00:37.590 --> 00:00:42.226
It'll compare all of the hashes it has for
the various files.

12
00:00:42.226 --> 00:00:47.130
And that'll let it avoid
doing too much work.

13
00:00:48.310 --> 00:00:49.911
It's not starting from scratch.

14
00:00:49.911 --> 00:00:55.027
This is sort of,
think of it like a build cache where it

15
00:00:55.027 --> 00:01:02.450
knows the current builds represents
a certain checksum on the source files.

16
00:01:02.450 --> 00:01:03.570
It's a great suggestion.

17
00:01:03.570 --> 00:01:07.144
&gt;&gt; Is there a way to get watch
working with this, like test watching?

18
00:01:07.144 --> 00:01:13.470
Or is that kind of lost with
the need to transpile the tests?

19
00:01:13.470 --> 00:01:16.080
&gt;&gt; You mean like incremental compiles?

20
00:01:16.080 --> 00:01:17.670
&gt;&gt; Yeah, like jest watch.

21
00:01:20.040 --> 00:01:22.100
&gt;&gt; You could.

22
00:01:23.680 --> 00:01:25.500
You'd need to do two things, though.

23
00:01:25.500 --> 00:01:28.173
I'll show you the two parts.

24
00:01:28.173 --> 00:01:30.570
I could try to do this live here.

25
00:01:32.090 --> 00:01:32.950
Let's try it.

26
00:01:32.950 --> 00:01:33.920
Let's try it.

27
00:01:33.920 --> 00:01:36.933
So, I would break this up.

28
00:01:36.933 --> 00:01:41.925
I'd say, I'd have two commands.

29
00:01:46.203 --> 00:01:47.883
Now, by the way, let me first say,

30
00:01:47.883 --> 00:01:51.357
we're getting a little bit beyond
the simplest possible library setup.

31
00:01:51.357 --> 00:01:54.837
But this is an interesting
direction we can go in here.

32
00:01:54.837 --> 00:01:56.213
I'll take this side trip for sure.

33
00:01:59.955 --> 00:02:03.250
Okay, so what we wanna do
is have two commands here.

34
00:02:03.250 --> 00:02:05.120
We wanna watch the build.

35
00:02:05.120 --> 00:02:07.280
And we wanna watch tests.

36
00:02:07.280 --> 00:02:12.194
So I think what we would end up doing is,
here,

37
00:02:12.194 --> 00:02:15.473
we'd say yarn tsc --watch.

38
00:02:15.473 --> 00:02:21.137
And I actually like to do this too,
preserveWatchOutput.

39
00:02:21.137 --> 00:02:25.241
Without this, well,
let's face the problem first, and

40
00:02:25.241 --> 00:02:28.270
I think we might all
agree to add it back in.

41
00:02:33.471 --> 00:02:36.780
So what's happening here is
we're watching for file changes.

42
00:02:36.780 --> 00:02:41.572
So if I were to go to my index.ts,
and let's say I rename this class.

43
00:02:41.572 --> 00:02:42.497
And I hit Save.

44
00:02:46.384 --> 00:02:49.853
I want something that'll cause an error,
how about this?

45
00:02:53.895 --> 00:02:58.059
So you're gonna see some
type checking errors here,

46
00:02:58.059 --> 00:03:00.935
they look a lot like linting errors.

47
00:03:00.935 --> 00:03:03.869
And it's telling us that
this type checking failed.

48
00:03:03.869 --> 00:03:06.728
And then we could reverse this change,
and we could hit Save.

49
00:03:06.728 --> 00:03:08.397
And it'll be happy again.

50
00:03:08.397 --> 00:03:10.433
But every time I save, I lose.

51
00:03:10.433 --> 00:03:15.255
It's like clearing out the terminal and
you're starting fresh.

52
00:03:15.255 --> 00:03:17.489
And I prefer to keep that around.

53
00:03:17.489 --> 00:03:22.592
So I add preserveWatchOutput,
which will help this.

54
00:03:22.592 --> 00:03:27.080
Or you can see we delete this and
hit Save, and put it back and hit Save.

55
00:03:27.080 --> 00:03:30.290
And you can see here we can still
scroll up and see this stuff, right?

56
00:03:30.290 --> 00:03:34.030
I don't like tools that get
rid of my terminal buffer.

57
00:03:34.030 --> 00:03:35.020
That's useful stuff.

58
00:03:35.020 --> 00:03:37.860
Please don't throw it away.

59
00:03:37.860 --> 00:03:39.990
So that's one thing we would need to do.

60
00:03:39.990 --> 00:03:44.960
And then, why don't you, so
you've used jest watch mode before?

61
00:03:44.960 --> 00:03:46.636
What's the command I would use for that?

62
00:03:46.636 --> 00:03:50.257
yarn jest --watch?

63
00:03:53.335 --> 00:03:55.320
Co-pilot thinks so too.

64
00:03:55.320 --> 00:03:59.108
Okay, now let's try that.

65
00:04:03.430 --> 00:04:05.907
Hey, okay, no tests related to files.

66
00:04:05.907 --> 00:04:06.811
So I'm gonna make a change.

67
00:04:11.105 --> 00:04:12.628
There it goes, it's running my tests.

68
00:04:12.628 --> 00:04:15.198
I touched my tests and they end up saving.

69
00:04:15.198 --> 00:04:19.380
So we have two things.

70
00:04:19.380 --> 00:04:22.301
We're watching our build source code.

71
00:04:22.301 --> 00:04:25.755
And we're watching our tests and

72
00:04:25.755 --> 00:04:30.448
running jest, whenever we touch our tests.

73
00:04:30.448 --> 00:04:32.031
We could do something like this.

74
00:04:32.031 --> 00:04:38.922
We could split our terminal and say like,
yarn watch-build, and then hit Enter.

75
00:04:38.922 --> 00:04:44.011
And yarn, watch-tests.

76
00:04:44.011 --> 00:04:47.260
And this will be okay.

77
00:04:47.260 --> 00:04:50.253
You're gonna hit race conditions
here where you touch a file and

78
00:04:50.253 --> 00:04:52.145
then change your tests really quickly.

79
00:04:52.145 --> 00:04:56.150
And maybe the build hasn't finished yet
on the left side or the right side.

80
00:04:56.150 --> 00:04:58.340
But they're both working for
you here, right?

81
00:04:58.340 --> 00:05:01.268
If we change this,
there are tests running.

82
00:05:01.268 --> 00:05:04.591
And if we were to go back here,
let me save that again.

83
00:05:04.591 --> 00:05:10.643
Go back here, and
let's change function name, like that.

84
00:05:12.982 --> 00:05:15.058
Jest hasn't picked up on it again.

85
00:05:15.058 --> 00:05:16.620
Hasn't picked up on it yet.

86
00:05:16.620 --> 00:05:18.451
I'm getting a type checking error here.

87
00:05:22.376 --> 00:05:25.768
I'm sure there's a way to set this up,
but.

88
00:05:25.768 --> 00:05:27.410
Was that test failing before?

89
00:05:27.410 --> 00:05:29.315
Let's change it back.

90
00:05:31.283 --> 00:05:33.743
And change it again.

91
00:05:33.743 --> 00:05:35.093
All right, hitting Save.

92
00:05:40.155 --> 00:05:44.040
No tests found related to files
changed since last commit.

93
00:05:44.040 --> 00:05:48.333
You know what we probably need to do here.

94
00:05:53.435 --> 00:06:01.357
I bet there's a way to tell Jest to watch,
A set of files.

95
00:06:01.357 --> 00:06:03.992
Watch files for changes.

96
00:06:03.992 --> 00:06:05.090
Watch all.

97
00:06:06.920 --> 00:06:08.390
How do we tell it what to watch?

98
00:06:09.600 --> 00:06:10.928
I think that's pretty
much all you would need.

99
00:06:14.820 --> 00:06:17.410
But I would look at the docs here.

100
00:06:17.410 --> 00:06:22.013
I'm not really super
prepared to discuss this.

101
00:06:22.013 --> 00:06:25.659
But I'll tell you what I would look for
here.

102
00:06:25.659 --> 00:06:29.733
If you can tell jest to watch
a certain set of files, and

103
00:06:29.733 --> 00:06:35.856
that includes the dist folder, then you
get away from that nasty race condition.

104
00:06:35.856 --> 00:06:40.180
So what would happen is anytime
something in the dist folder or

105
00:06:40.180 --> 00:06:43.268
the tests change, jest would sort of bump.

106
00:06:43.268 --> 00:06:45.850
It would automatically
run the tests again.

107
00:06:45.850 --> 00:06:50.013
Right now, the functions
underneath the tests have changed.

108
00:06:50.013 --> 00:06:53.623
Jest is not watching for that,
it hasn't run the tests again.

109
00:06:53.623 --> 00:07:00.108
But if we were to go in here and
just, I'm not watching anymore.

110
00:07:00.108 --> 00:07:02.698
We would hit Save here, or
we're running the tests now.

111
00:07:08.352 --> 00:07:09.620
It'll fail, right?

112
00:07:09.620 --> 00:07:12.570
The next time it attempts to
run the tests, it'll fail.

113
00:07:12.570 --> 00:07:14.750
So, let's put that aside.

114
00:07:14.750 --> 00:07:16.724
I'm sure there's a configure option there,
but

115
00:07:16.724 --> 00:07:19.400
I don't wanna spend your time looking for
it.

116
00:07:19.400 --> 00:07:22.580
Let's talk about how we can get all
of this working with one command.

117
00:07:22.580 --> 00:07:25.090
That, that I can certainly talk about.

118
00:07:25.090 --> 00:07:27.200
So I'll kill this, and I'll kill this.

119
00:07:27.200 --> 00:07:31.921
We're gonna install another package here,

120
00:07:31.921 --> 00:07:34.906
yarn add -D concurrently.

121
00:07:41.765 --> 00:07:43.700
This is a great little CLI.

122
00:07:46.040 --> 00:07:51.189
Okay, the way concurrently
works is you give it,

123
00:07:51.189 --> 00:07:54.621
I'll close this one on the left so

124
00:07:54.621 --> 00:07:59.296
we can see the terminal
output more clearly.

125
00:08:00.452 --> 00:08:05.308
You give it a couple CLI commands to run,
and it will sort of run them in parallel.

126
00:08:05.308 --> 00:08:08.834
So, here's an example, let's see.

127
00:08:11.622 --> 00:08:14.040
Yeah, we'll follow this example here.

128
00:08:14.040 --> 00:08:17.410
So, we give it a couple of arguments,
we'll start basic here.

129
00:08:18.500 --> 00:08:21.401
In our package.json,
we can create a new script called watch.

130
00:08:33.793 --> 00:08:35.370
Does it have an example with a dash here?

131
00:08:49.949 --> 00:08:51.131
There we go.

132
00:08:51.131 --> 00:08:55.990
So, we're just gonna list
commands that we wanted to run.

133
00:08:55.990 --> 00:08:59.356
We're gonna put them in single quotes,
cuz you want a string of five Es.

134
00:08:59.356 --> 00:09:00.757
So it's yarn concurrently,

135
00:09:00.757 --> 00:09:03.736
and then this is one thing that
you would type in your terminal.

136
00:09:03.736 --> 00:09:05.458
Another thing you would
type in your terminal.

137
00:09:08.319 --> 00:09:12.430
We're gonna call right back out to
the individual watch commands here.

138
00:09:12.430 --> 00:09:20.010
There's a convention you could use, like,
npm: watch stars, like this, right?

139
00:09:21.270 --> 00:09:26.580
It's gonna kind of cause a little bit of a
mess, if we keep them separate like this.

140
00:09:26.580 --> 00:09:29.890
What I'm about to do is I'll have
them render in different colors.

141
00:09:29.890 --> 00:09:35.233
We can give them titles, but
if you say run everything that's dev- *,

142
00:09:35.233 --> 00:09:40.920
you lose the ability to sort of sort
them in a particular order and so on.

143
00:09:40.920 --> 00:09:41.953
So let's see what happens.

144
00:09:46.663 --> 00:09:50.890
Oops, yarn, I didn't save.

145
00:09:50.890 --> 00:09:51.393
yarn watch.

146
00:09:55.986 --> 00:09:57.780
And here's concurrently doing its thing.

147
00:09:57.780 --> 00:10:03.490
You see the 0 and the 1,
this is watch build.

148
00:10:03.490 --> 00:10:05.720
This is watch test.

149
00:10:05.720 --> 00:10:09.992
And if we look back at
the CLI output here.

150
00:10:09.992 --> 00:10:13.787
If we go back to Help,
we can name these things.

151
00:10:13.787 --> 00:10:14.982
Where's the example of names?

152
00:10:22.180 --> 00:10:26.130
-c for colors, we could add that
real quick while we're here.

153
00:10:27.850 --> 00:10:29.542
So I'll just do that.

154
00:10:29.542 --> 00:10:30.697
Single quotes again.

155
00:10:30.697 --> 00:10:31.887
So I'll just do red and blue.

156
00:10:34.247 --> 00:10:36.039
And then I think it's -n for name.

157
00:10:36.039 --> 00:10:37.490
Just wanna make sure there's names.

158
00:10:38.730 --> 00:10:42.278
So we'll add this just as is.

159
00:10:42.278 --> 00:10:45.304
Probably -n will work too.

160
00:10:45.304 --> 00:10:50.381
We'll just call it TS and JEST in caps.

161
00:10:50.381 --> 00:10:52.064
So they look real nice in square brackets.

162
00:10:52.064 --> 00:10:57.832
So just to show you the whole string here,
yeah, that's it.

163
00:10:57.832 --> 00:11:02.441
So it looks like a lot of different
stuff going on, but it's concurrently.

164
00:11:02.441 --> 00:11:06.278
And then at the end,
it takes as many arguments as you want for

165
00:11:06.278 --> 00:11:10.502
commands to run in parallel,
even if they don't return, right?

166
00:11:10.502 --> 00:11:13.265
That's part of the point of concurrently.

167
00:11:13.265 --> 00:11:16.877
You can run things that return,
if you wanted to.

168
00:11:16.877 --> 00:11:20.275
I don't know, if you do a build and
then you have multiple test suites and

169
00:11:20.275 --> 00:11:23.693
you want them to spin up on a bunch of
different cores, you could do that.

170
00:11:23.693 --> 00:11:27.054
And then as long as these
things are of the same length,

171
00:11:27.054 --> 00:11:32.360
splitting by comma, as the number of
scripts you provide, it should all work.

172
00:11:32.360 --> 00:11:33.470
So let's run yarn watch one more time.

173
00:11:38.007 --> 00:11:38.850
Hey, look at that.

174
00:11:38.850 --> 00:11:40.209
We've got TS and we've got jest.

175
00:11:40.209 --> 00:11:43.610
And it's super clear
what's happening here.

176
00:11:43.610 --> 00:11:46.860
Concurrently is a great little tool for
this kind of thing.

177
00:11:46.860 --> 00:11:49.177
There are other options you can use so

178
00:11:49.177 --> 00:11:54.130
that you can control at what point
does this yarn watch command exit.

179
00:11:54.130 --> 00:11:59.409
Is it when any one of the commands I
tried to invoke fails and blows up?

180
00:11:59.409 --> 00:12:01.605
Or is there a primary thing that,

181
00:12:01.605 --> 00:12:05.457
I look to that primary task as
that's what I should watch?

182
00:12:05.457 --> 00:12:11.598
That's what I should consider to be,
if that exits 0 or 1, I will exit 0 or 1.

183
00:12:11.598 --> 00:12:13.644
A lot of different options here.

184
00:12:13.644 --> 00:12:17.933
And this has been an incredibly stable
tool over quite a few years where it's

185
00:12:17.933 --> 00:12:21.564
sort of, it does this simple thing
that it is very good at doing.

186
00:12:21.564 --> 00:12:24.370
And it hasn't changed much,
but it's super useful.

187
00:12:24.370 --> 00:12:25.180
I use this all the time.

188
00:12:26.670 --> 00:12:29.122
So now you could throw other
things in here if you wanted to,

189
00:12:29.122 --> 00:12:30.113
as many other scripts.

190
00:12:30.113 --> 00:12:35.087
You could have linting working, every
time you hit Save, it would lint as well.

191
00:12:35.087 --> 00:12:35.968
We have a question from online.

192
00:12:39.840 --> 00:12:43.720
&gt;&gt; What is your thoughts on using Prettier
to fix some of these formatting issues?

193
00:12:47.020 --> 00:12:50.110
&gt;&gt; Prettier is good for
fixing some of these formatting issues.

194
00:12:50.110 --> 00:12:55.612
I wanna see whether Prettier was actually
the root cause here for my problem.

195
00:13:01.710 --> 00:13:03.446
Yep, I would recommend Prettier.

196
00:13:03.446 --> 00:13:06.650
I was looking to see whether
this indent hopped back in.

197
00:13:06.650 --> 00:13:15.509
Let's see what VS Code's,
Regular formatter does.

198
00:13:15.509 --> 00:13:18.220
Yep, I don't know how
that space got in there.

199
00:13:18.220 --> 00:13:21.928
I love using Prettier for
this kind of thing.

200
00:13:21.928 --> 00:13:24.573
You could also put Prettier
in concurrently, by the way.

201
00:13:24.573 --> 00:13:27.137
You save a file, it'll rewrite the file.

202
00:13:27.137 --> 00:13:31.755
Now, careful there, because you might
have unsaved changes and other files.

203
00:13:31.755 --> 00:13:36.317
It can get a little weird,
so use it tastefully.

204
00:13:36.317 --> 00:13:39.250
But it's great for
sort of inlining a bunch of things.

205
00:13:39.250 --> 00:13:42.804
And just tying back to the idea
of working with large teams,

206
00:13:42.804 --> 00:13:46.780
enterprise scale TypeScript,
this lets you help people.

207
00:13:46.780 --> 00:13:50.327
If you had a dozen people
contributing to a project,

208
00:13:50.327 --> 00:13:54.090
you would get them used
to running yarn watch.

209
00:13:54.090 --> 00:13:56.601
And if you're sort of the maintainer
that's deciding like,

210
00:13:56.601 --> 00:13:59.077
here's how we're building,
here's how we're linting.

211
00:13:59.077 --> 00:14:01.960
We're dropping TypeScript
as the compile tool.

212
00:14:01.960 --> 00:14:06.630
Maybe we're trying SWC,
which is a Rust equivalent here.

213
00:14:06.630 --> 00:14:08.867
You could do all of that and

214
00:14:08.867 --> 00:14:14.680
everyone's still running yarn watch
at a sort of a platform level,

215
00:14:16.911 --> 00:14:21.100
Change what's being watched, or
when do we terminate the command?

216
00:14:21.100 --> 00:14:21.830
That kind of thing.

217
00:14:23.180 --> 00:14:26.709
&gt;&gt; Someone is recommending using TS node-
&gt;&gt; Yeah.

218
00:14:26.709 --> 00:14:29.030
&gt;&gt; To watch both at the same time.

219
00:14:29.030 --> 00:14:32.630
&gt;&gt; You could run TS node to
watch both at the same time.

220
00:14:32.630 --> 00:14:37.444
What you would lose there is
referring to the actual dist folder.

221
00:14:37.444 --> 00:14:41.224
You'd be testing against sort of
the individual modules of your source

222
00:14:41.224 --> 00:14:42.300
folder there.

223
00:14:42.300 --> 00:14:45.470
That's the approach
I've seen with TS node.

224
00:14:45.470 --> 00:14:47.376
I think what you really want,

225
00:14:47.376 --> 00:14:52.256
to get all of the benefits I've described
here, you just want jest to be able

226
00:14:52.256 --> 00:14:57.250
to rerun the tests whenever anything
in the dist folder changes.

227
00:14:57.250 --> 00:15:00.938
If you get that, I don't think
there's much of a downside here.

228
00:15:00.938 --> 00:15:03.677
TS node would let you have no build,
right?

229
00:15:03.677 --> 00:15:06.231
It will have nothing to
do with that dist folder.

230
00:15:06.231 --> 00:15:12.250
And remember how I told you,
we strip internal, right?

231
00:15:12.250 --> 00:15:15.089
This file here, this function here,

232
00:15:15.089 --> 00:15:19.357
this should not be visible to
consumers of this library.

233
00:15:19.357 --> 00:15:24.134
If we look at our declaration file here,

234
00:15:24.134 --> 00:15:28.355
Stringify error value is not here.

235
00:15:28.355 --> 00:15:29.362
It has been stripped out.

236
00:15:33.979 --> 00:15:35.900
So, we wanna maintain that.

237
00:15:35.900 --> 00:15:38.760
Let's see if I'm actually
right about this.

238
00:15:39.920 --> 00:15:40.980
Can I grab this?

239
00:15:40.980 --> 00:15:42.121
See, look at that.

240
00:15:42.121 --> 00:15:46.763
If you're using TS node,
you would be able to import this.

241
00:15:46.763 --> 00:15:50.875
You're running tests against secret
internal things within the library.

242
00:15:50.875 --> 00:15:54.486
So, I'm not saying it's a bad solution.

243
00:15:54.486 --> 00:15:59.480
I'm saying it is substantively different
than what we're setting up here.

244
00:15:59.480 --> 00:16:04.705
I want to test only those things that my
library consumers will be able to access.

245
00:16:04.705 --> 00:16:07.084
And what I'm seeing here is I get that.

246
00:16:07.084 --> 00:16:11.902
But if I'm running tests that take all of
the source files in my src folder, and

247
00:16:11.902 --> 00:16:13.367
that's the approach.

248
00:16:13.367 --> 00:16:17.911
Usually with TS node, right, you just
run all of that node stuff directly,

249
00:16:17.911 --> 00:16:20.570
of the TypeScript directly.

250
00:16:20.570 --> 00:16:23.480
You'd be able to import this and
someone will write a test for it.

251
00:16:23.480 --> 00:16:27.698
And now, you start having a lot of
sensitivity around your tests to

252
00:16:27.698 --> 00:16:31.238
internals, which you should
be able to evolve those and

253
00:16:31.238 --> 00:16:36.061
change those, cuz they're not gonna
necessarily affect your customers,

254
00:16:36.061 --> 00:16:39.252
and not have to update tons and
tons of your tests.

