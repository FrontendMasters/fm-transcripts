WEBVTT

1
00:00:00.220 --> 00:00:04.759
The next topic we're gonna dig into,
and it's gonna be over several chapters

2
00:00:04.759 --> 00:00:09.228
because this is a really important thing
to know how to do when managing a large

3
00:00:09.228 --> 00:00:14.300
TypeScript project at scale, like how
do you convert a project to TypeScript?

4
00:00:14.300 --> 00:00:18.899
And for those of you that already
have a TypeScript project, too,

5
00:00:18.899 --> 00:00:24.485
we're really talking about how do you
continue to evolve a project to stronger,

6
00:00:24.485 --> 00:00:28.260
stricter typing, and stricter linting.

7
00:00:28.260 --> 00:00:31.323
Everyone is probably in a position where,

8
00:00:31.323 --> 00:00:35.832
unless you started out with every
single thing in TypeScript,

9
00:00:35.832 --> 00:00:40.099
with all your lint rules cranked
up to maximum strictness.

10
00:00:40.099 --> 00:00:44.916
Lots of cases, you're sort of in some
middle state where you wish you could

11
00:00:44.916 --> 00:00:48.675
tune things up a little bit more and
always trying to do it.

12
00:00:48.675 --> 00:00:54.048
But we're just gonna start that
whole story of incremental

13
00:00:54.048 --> 00:01:01.689
stronger typing from the very beginning
where we have duck typing with JavaScript.

14
00:01:01.689 --> 00:01:08.115
So, the key thing here is
do it in small passes.

15
00:01:08.115 --> 00:01:14.234
Don't try to do it all at once and
here are my three big tips.

16
00:01:14.234 --> 00:01:17.450
So first, stay focused on specific tasks.

17
00:01:18.880 --> 00:01:21.965
Particularly if you really like types,
It's so

18
00:01:21.965 --> 00:01:24.147
tempting to try to look at a file and

19
00:01:24.147 --> 00:01:29.285
make it a strongly typed as you possibly
could, and then move on to the next file.

20
00:01:29.285 --> 00:01:34.201
The danger here is that you can end up
changing the behavior of code through

21
00:01:34.201 --> 00:01:35.716
improving the types.

22
00:01:35.716 --> 00:01:37.987
It's really easy for bugs to sneak in.

23
00:01:37.987 --> 00:01:42.758
So especially at the very beginning of
this journey, like where we're typing

24
00:01:42.758 --> 00:01:47.601
things as any, sometimes we know that I
should probably create an interface for

25
00:01:47.601 --> 00:01:51.890
this thing and just having the restraint
to make incremental passes.

26
00:01:51.890 --> 00:01:55.009
So, it's almost like you're doing
small layers of improvement.

27
00:01:55.009 --> 00:01:58.580
Even though you know you
wanna go to a great place,

28
00:01:58.580 --> 00:02:04.124
just stay disciplined about completing
tasks and get there slow and steady.

29
00:02:04.124 --> 00:02:05.866
Make sure you have a solid test suite,
right?

30
00:02:05.866 --> 00:02:10.156
We talked about how sometimes there's
the possibility of values being null, and

31
00:02:10.156 --> 00:02:13.029
your JavaScript code might
not handle that properly.

32
00:02:13.029 --> 00:02:18.460
But sometimes fixing that problem like
it'll change your runtime behavior.

33
00:02:18.460 --> 00:02:22.922
And if you have no test coverage, It's
really hard to catch things like that.

34
00:02:24.342 --> 00:02:29.476
The way you achieve stronger typing,
it's not very often the case

35
00:02:29.476 --> 00:02:34.253
that you can avoid perturbing
the way the code behaves at all.

36
00:02:34.253 --> 00:02:36.169
You got to make some changes, right?

37
00:02:36.169 --> 00:02:39.006
Like introducing a type guard,
for example,

38
00:02:39.006 --> 00:02:44.042
that's like a new function that ends up
being invoked, and it exists at runtime.

39
00:02:44.042 --> 00:02:47.469
And then, finally, don't let
the perfect be the enemy of the good.

40
00:02:47.469 --> 00:02:50.642
Take advantage of the whole one of
the big benefits of TypeScript,

41
00:02:50.642 --> 00:02:52.690
it's not supposed to feel like a rewrite.

42
00:02:52.690 --> 00:02:55.536
It's not like you have
a big Ruby code base, and

43
00:02:55.536 --> 00:02:59.180
you're trying to rewrite it in Java or
something like that.

44
00:02:59.180 --> 00:03:04.168
There's been a lot of hard work that
has gone into making TypeScript

45
00:03:04.168 --> 00:03:08.118
something that you can sort
of digest in small bites.

46
00:03:08.118 --> 00:03:14.410
Don't forget that, and don't forget to
benefit from that, it's a good thing.

47
00:03:14.410 --> 00:03:19.009
All right, I [LAUGH] used to have what
I called a three-step approach, and

48
00:03:19.009 --> 00:03:20.949
it's not really three steps.

49
00:03:20.949 --> 00:03:23.914
Step one and two are nice and
approachable, and

50
00:03:23.914 --> 00:03:28.005
step three was like and then do the rest,
do all the other things.

51
00:03:28.005 --> 00:03:30.759
So, I have gotten a lot
more detailed here.

52
00:03:30.759 --> 00:03:32.760
We're gonna talk about this, and together,

53
00:03:32.760 --> 00:03:35.079
we're not gonna do every
single one of these things.

54
00:03:35.079 --> 00:03:37.936
But I made these 11 steps now.

55
00:03:37.936 --> 00:03:43.381
I made this mostly so that you can take it
home you can study it if you're trying to

56
00:03:43.381 --> 00:03:49.099
figure out where you are on this roadmap
of getting to stronger and stronger types.

57
00:03:49.099 --> 00:03:54.350
It's something that you could sort
of look at with some suggestions for

58
00:03:54.350 --> 00:03:59.689
orders of doing things, turning on
certain linting rules one at a time,

59
00:03:59.689 --> 00:04:02.154
and fixing all those things bit.

60
00:04:02.154 --> 00:04:09.460
So we're gonna get through step 5 for
sure, yes.

61
00:04:09.460 --> 00:04:13.728
And then the reason I stopped there
is cuz it's a lot of the same,

62
00:04:13.728 --> 00:04:19.183
where you add a new linting rule or fix a
compiler, turn on a compiler setting, and

63
00:04:19.183 --> 00:04:24.899
then things will light up and we'll go and
address those, but you're in that cycle.

64
00:04:24.899 --> 00:04:29.728
At that point, and it's just sort of like
methodical work to get there, like, I

65
00:04:29.728 --> 00:04:34.864
don't have any special tips that I haven't
written down in this list for that piece.

66
00:04:34.864 --> 00:04:39.095
So, step one this is like
a small step as I can make it.

67
00:04:39.095 --> 00:04:42.685
You wanna get TypeScript into
your build toolchain, and

68
00:04:42.685 --> 00:04:46.811
we're gonna do that without even
renaming our files to ts files.

69
00:04:46.811 --> 00:04:52.329
We have some good js dot comments
that have type information in them.

70
00:04:52.329 --> 00:04:56.367
TypeScript will use that where it can, and

71
00:04:56.367 --> 00:05:02.100
this is sort of the maximally
relaxed mode we can operate in.

72
00:05:02.100 --> 00:05:05.549
Then we're gonna rename all
of our files from js to ts.

73
00:05:05.549 --> 00:05:06.258
Don't worry.

74
00:05:06.258 --> 00:05:08.004
I've written a script for
you that will do this.

75
00:05:08.004 --> 00:05:11.975
You're not gonna be going to 50 files and
changing their extensions.

76
00:05:11.975 --> 00:05:16.843
But just the idea that something becomes
a type script file that will require us

77
00:05:16.843 --> 00:05:21.209
to fix some more things because not
everything can be type-checked.

78
00:05:21.209 --> 00:05:25.469
In the typescript way,
purely using JsDoc types.

79
00:05:25.469 --> 00:05:30.356
So we'll fix a couple of things there, so

80
00:05:30.356 --> 00:05:33.719
don't forget to read this.

81
00:05:33.719 --> 00:05:37.303
Start with TypeScript in the most
permissive possible mode.

82
00:05:37.303 --> 00:05:39.801
We will allow implicit endings.

83
00:05:39.801 --> 00:05:44.803
Step 3 is getting rid of implicit endings,
and this, I think, is one of

84
00:05:44.803 --> 00:05:50.969
the most important things to enable early
because it's part of observability, right?

85
00:05:50.969 --> 00:05:56.687
Meaning handling errors properly so
you don't get square bracket object,

86
00:05:56.687 --> 00:06:02.863
object serialized into Splunk, or whatever
you're using to track User errors.

87
00:06:02.863 --> 00:06:08.449
Having that early in the process gives you
more safety for the rest of the process.

88
00:06:08.449 --> 00:06:11.418
And this is where I recommend bringing
in definitely typed packages.

89
00:06:11.418 --> 00:06:15.138
Although we may bring in earlier,
these are missing types for

90
00:06:15.138 --> 00:06:18.509
JavaScript libraries that
are already in our project.

91
00:06:18.509 --> 00:06:23.109
We'll talk a little more about
definitely typed, but for now, I'll just

92
00:06:23.109 --> 00:06:28.093
say they're community author types that
are meant to sort of match a JS library.

93
00:06:28.093 --> 00:06:33.020
Very much the same thing as
in our little library here.

94
00:06:33.020 --> 00:06:37.877
They're just this declaration
file handwritten to match this,

95
00:06:37.877 --> 00:06:43.899
which would be like, Lodash would publish
this or something like that or React.

96
00:06:43.899 --> 00:06:47.169
Step four is where we're gonna
start doing some domain modeling.

97
00:06:47.169 --> 00:06:52.665
We're gonna model re-create interfaces for
channel and message and team and user and

98
00:06:52.665 --> 00:06:57.494
start threading those through some
React components and things like that.

99
00:06:57.494 --> 00:07:02.089
And then finally, we're working on
Boolean expressions like Boolean logic.

100
00:07:02.089 --> 00:07:05.345
Text to see whether something's defined or
undefined and

101
00:07:05.345 --> 00:07:09.997
how Nullish values are treated, and then
we'll move on cuz everything else here is

102
00:07:09.997 --> 00:07:12.999
just sort of enable a compiler setting or
a lint rule.

103
00:07:12.999 --> 00:07:15.953
And we keep going and going and going, but

104
00:07:15.953 --> 00:07:19.510
you get to a really strict
place by the end of this.

105
00:07:19.510 --> 00:07:24.044
So I would still I feel like even beyond
step 5, this is a pretty good roadmap.

106
00:07:24.044 --> 00:07:27.128
And I looked at the way,
like some of the Git history for

107
00:07:27.128 --> 00:07:31.506
large TypeScript projects I've
contributed to, and this is like roughly.

108
00:07:31.506 --> 00:07:34.436
This isn't the way I had
done it in the past, but

109
00:07:34.436 --> 00:07:38.979
it's the way I wish I had done it, cuz
I can see a lot of scrambling in places

110
00:07:38.979 --> 00:07:41.354
where I switch the order around here.

