WEBVTT

1
00:00:00.340 --> 00:00:03.980
&gt;&gt; Mike North: The last topic I wanna
talk to you about is tests for types.

2
00:00:03.980 --> 00:00:08.140
Specifically, I want to focus
on writing negative test cases.

3
00:00:08.140 --> 00:00:11.960
It's quite easy to write positive
test cases for type information.

4
00:00:11.960 --> 00:00:16.646
And you could argue that the jest
tests we've already been writing

5
00:00:16.646 --> 00:00:18.493
are positive test cases.

6
00:00:18.493 --> 00:00:21.710
They have to compile
their TypeScript files.

7
00:00:21.710 --> 00:00:26.511
And so we make sure that the things
that should compile properly do

8
00:00:26.511 --> 00:00:28.005
compile properly.

9
00:00:28.005 --> 00:00:30.603
But what about cases where we wanna say,

10
00:00:30.603 --> 00:00:34.968
here's an example of something that
the types should catch for me.

11
00:00:34.968 --> 00:00:39.089
This is a mistake that
should not be compilable.

12
00:00:39.089 --> 00:00:43.025
It's important that we we have
those kinds of tests as well,

13
00:00:43.025 --> 00:00:48.523
because sometimes bugs can happen where
types turn into enemies inappropriately.

14
00:00:48.523 --> 00:00:51.817
We would say that's like
an inappropriate widening of types.

15
00:00:51.817 --> 00:00:56.413
You lose your type safety and
of course all your tests compile like ne's

16
00:00:56.413 --> 00:01:00.873
are perfectly happy to let a lot of
things compile, too many things.

17
00:01:00.873 --> 00:01:05.831
So we'll go through an example of how
we can write some negative test cases.

18
00:01:05.831 --> 00:01:09.708
There are two tools that I like using for
this, for

19
00:01:09.708 --> 00:01:14.603
different reasons although one
is sort of very established and

20
00:01:14.603 --> 00:01:18.039
not doing much and
the other is catching up.

21
00:01:18.039 --> 00:01:22.998
So it may be that the second tool I'm
gonna talk to you about is sort of

22
00:01:22.998 --> 00:01:25.186
the one that ends up winning.

23
00:01:25.186 --> 00:01:27.683
But the first tool is called DTS lint.

24
00:01:27.683 --> 00:01:31.869
And DTS is like a declaration file.

25
00:01:31.869 --> 00:01:37.389
So where this is used most is
in the definitely typed repo.

26
00:01:37.389 --> 00:01:43.659
All the tests for definitely typed
types are written to run in DTS lint.

27
00:01:43.659 --> 00:01:47.925
So we're gonna go ahead and install it,
we still can use it locally and

28
00:01:47.925 --> 00:01:52.062
there are some benefits but
that'll be the first thing that we try.

29
00:01:52.062 --> 00:01:56.853
And the benefits there are that
it automatically downloads

30
00:01:56.853 --> 00:02:02.140
different compiler versions and
tests them against your types.

31
00:02:02.140 --> 00:02:08.171
So you could say, for example, this
should work in TypeScript version 3.4,

32
00:02:08.171 --> 00:02:13.862
and it'll check out version 3.4,
3.5, .6, .7, .8, .9.

33
00:02:13.862 --> 00:02:18.401
All the 4.x releases,
all the stable 5.x releases, and

34
00:02:18.401 --> 00:02:23.830
it'll run your test file against each
one of those to give you confidence

35
00:02:23.830 --> 00:02:28.636
that if you're publishing a library and
you wanna make sure that

36
00:02:28.636 --> 00:02:33.819
whole range continues to work,
definitely typed is great for that.

37
00:02:33.819 --> 00:02:38.519
Definitely typed also automatically
tests against nightly TypeScript builds.

38
00:02:38.519 --> 00:02:43.680
So it's a great way to know if there's
sort of breakage headed on its way to you.

39
00:02:43.680 --> 00:02:47.488
I have filed a lot of bug
reports against TypeScript that

40
00:02:47.488 --> 00:02:51.387
before they ever affected
the apps that I was caring for.

41
00:02:51.387 --> 00:02:55.710
And having a nightly build
to test against is great.

42
00:02:55.710 --> 00:02:57.779
That's exactly what
Microsoft wants you to do.

43
00:02:57.779 --> 00:03:01.120
It's part of keeping that
feedback loop nice and tight.

44
00:03:02.360 --> 00:03:04.417
Although I said it isn't doing much,

45
00:03:04.417 --> 00:03:09.189
meaning new features haven't been added in
a long time, Microsoft uses this heavily.

46
00:03:09.189 --> 00:03:13.650
And it's so ingrained and definitely
types that I really can't imagine

47
00:03:13.650 --> 00:03:16.949
how they would stop making
sure it continues to work.

48
00:03:19.138 --> 00:03:23.969
&gt;&gt; Mike North: So, concerns with this,
it's very particular of how it's set up.

49
00:03:23.969 --> 00:03:25.609
When you're testing,

50
00:03:25.609 --> 00:03:30.125
you end up really making assertions
against stringified types.

51
00:03:30.125 --> 00:03:34.678
So sometimes you're really writing
assertions in comments and

52
00:03:34.678 --> 00:03:38.471
even just getting the spacing
between things wrong,

53
00:03:38.471 --> 00:03:43.714
which would not really be important
in code, it'll still fail the test.

54
00:03:43.714 --> 00:03:47.712
So you have to understand what its
conventions are and align with them.

55
00:03:50.061 --> 00:03:54.189
&gt;&gt; Mike North: All right, the other
library that I like using is tsd.

56
00:03:54.189 --> 00:03:55.691
And let's take a look at that.

57
00:03:55.691 --> 00:03:59.929
So tsd is a much more modern project.

58
00:03:59.929 --> 00:04:02.729
You can see there's a lot of
active contributors to it.

59
00:04:02.729 --> 00:04:08.091
And the way they would help you,
they would have you write your tests

60
00:04:08.091 --> 00:04:12.985
are really using types,
not magic comets where you are sort of

61
00:04:12.985 --> 00:04:18.351
asserting that the stringfield type
matches a particular thing but

62
00:04:18.351 --> 00:04:22.048
you can use generics to
write your assertion.

63
00:04:22.048 --> 00:04:27.986
You are expecting the return type
of concat to be of type string.

64
00:04:27.986 --> 00:04:33.076
So these types are easier to maintain,
they're a lot more flexible,

65
00:04:33.076 --> 00:04:37.229
they're less likely to change
from version to version.

66
00:04:37.229 --> 00:04:40.349
When we're talking about
stringified types,

67
00:04:40.349 --> 00:04:45.498
sometimes TypeScript it'll just change
how they present a particular type.

68
00:04:45.498 --> 00:04:49.247
Where one release they might,
when you say, the key of this interface,

69
00:04:49.247 --> 00:04:51.398
they might enumerate all of the fields and

70
00:04:51.398 --> 00:04:55.947
in the next they'll just say, I'm just
gonna call this key of the interface name,

71
00:04:55.947 --> 00:04:59.229
and that that changes how you'd
have to write your assertion.

72
00:04:59.229 --> 00:05:02.210
But this is much more flexible and

73
00:05:02.210 --> 00:05:07.009
does not require the stringfield
type kind of thing.

74
00:05:07.009 --> 00:05:10.709
So there are a couple of
different assertions you can make,

75
00:05:10.709 --> 00:05:15.752
like expect assignable, expect error,
and it's quite well thought through.

76
00:05:17.729 --> 00:05:22.194
&gt;&gt; Mike North: You can even assert that
things should remain deprecated so

77
00:05:22.194 --> 00:05:28.365
you can catch if somebody tries to remove
a deprecation tag on a particular thing.

78
00:05:28.365 --> 00:05:34.393
This is a great thing for asserting that
something handles a value exhaustively,

79
00:05:34.393 --> 00:05:39.109
it was returning and never,
that means there's nothing left,

80
00:05:39.109 --> 00:05:41.398
a lot of valuable things here.

81
00:05:41.398 --> 00:05:45.475
So let's take a look at both.

82
00:05:45.475 --> 00:05:48.314
So, we wrote this function, isTypedArray.

83
00:05:48.314 --> 00:05:52.119
It was kind of an interesting type guard,
and we wanna make

84
00:05:52.119 --> 00:05:56.946
sure that it works the way it's supposed
to work in different scenarios.

85
00:05:56.946 --> 00:06:02.223
So, the first thing we're gonna have to do

86
00:06:02.223 --> 00:06:07.510
is create a new folder
in our tests folder.

87
00:06:07.510 --> 00:06:10.997
So we're gonna call it types/dtslint, and

88
00:06:10.997 --> 00:06:15.686
we'll create a bunch of files in there,
these files above.

89
00:06:15.686 --> 00:06:18.817
So I'm gonna go and

90
00:06:18.817 --> 00:06:24.307
make that folder and chat tests.

91
00:06:26.126 --> 00:06:27.296
&gt;&gt; Mike North: Make sure.

92
00:06:30.601 --> 00:06:32.621
&gt;&gt; Mike North: Some of this is
gonna seem a little bit funky,

93
00:06:32.621 --> 00:06:34.813
but that's just the way
it is with this package.

94
00:06:34.813 --> 00:06:36.096
This is like this thing.

95
00:06:38.835 --> 00:06:42.439
&gt;&gt; Mike North: Chat tests typesdtslint.

96
00:06:42.439 --> 00:06:43.799
Okay, there we go.

97
00:06:43.799 --> 00:06:48.619
So we're gonna get our tsconfig.json.

98
00:06:48.619 --> 00:06:50.680
There's the contents of it.

99
00:06:50.680 --> 00:06:53.119
I'm gonna grab that and move it over.

100
00:06:53.119 --> 00:06:59.084
We have to fix the thing or
two, check it out together.

101
00:06:59.084 --> 00:07:02.415
Okay, just making sure that this
is the right tsconfig.json.

102
00:07:02.415 --> 00:07:05.746
I'm gonna Command click on it and
we get here.

103
00:07:05.746 --> 00:07:06.643
That looks good.

104
00:07:10.135 --> 00:07:12.442
&gt;&gt; Mike North: And then let's make
sure this source folder works.

105
00:07:12.442 --> 00:07:16.309
So that would take us up one up one.

106
00:07:16.309 --> 00:07:19.238
I think we need one more hop.

107
00:07:19.238 --> 00:07:22.329
So this would take us into tests.

108
00:07:22.329 --> 00:07:23.631
Nope, this should be good.

109
00:07:25.977 --> 00:07:30.049
&gt;&gt; Mike North: All right, one more file
we have to add in there, tslint.json.

110
00:07:30.049 --> 00:07:34.199
This is a linter that was
originally written for TypeScript.

111
00:07:34.199 --> 00:07:39.450
It predates ESLint having
great TypeScript support.

112
00:07:39.450 --> 00:07:42.059
It is far less popular
than ESLint right now.

113
00:07:42.059 --> 00:07:44.519
I would advise that you use ESLint.

114
00:07:44.519 --> 00:07:47.104
But DTSLint is built on top of this.

115
00:07:47.104 --> 00:07:48.654
You don't get to make a choice here.

116
00:07:50.973 --> 00:07:53.737
&gt;&gt; Mike North: So TSLint.

117
00:07:59.755 --> 00:08:07.055
&gt;&gt; Mike North: Great,
&gt;&gt; Mike North: So

118
00:08:07.055 --> 00:08:11.252
now what we're gonna do is we're
gonna create a declaration file.

119
00:08:14.836 --> 00:08:17.461
&gt;&gt; Mike North: Now I'm actually gonna
open up a DefinitelyTyped repo.

120
00:08:17.461 --> 00:08:20.376
It's a great reference to look at
when you're creating one of these.

121
00:08:22.541 --> 00:08:24.650
&gt;&gt; Mike North: So
let's just do definitely.

122
00:08:25.960 --> 00:08:27.477
Chai is fine.

123
00:08:30.263 --> 00:08:32.614
&gt;&gt; Mike North: And
we'll look up at the top of this file.

124
00:08:35.337 --> 00:08:35.879
&gt;&gt; Mike North: Actually,

125
00:08:35.879 --> 00:08:39.030
we don't even need that special stuff
at the top of the file anymore.

126
00:08:39.030 --> 00:08:43.990
Let's look at our package.json here and
make sure that we got everything we need.

127
00:08:43.990 --> 00:08:45.503
Probably don't need the owners.

128
00:08:51.062 --> 00:08:52.873
&gt;&gt; Mike North: Let's look
in this folder real quick.

129
00:08:58.547 --> 00:09:03.295
&gt;&gt; Mike North: Just gonna check these out,
that seems fine, tsconfig.

130
00:09:05.499 --> 00:09:09.738
&gt;&gt; Mike North: Seems fine,
enumerate files here, and

131
00:09:09.738 --> 00:09:13.890
here's what the tests look like.

132
00:09:13.890 --> 00:09:18.020
So let's give this a try.

133
00:09:18.020 --> 00:09:22.993
We can maybe take advantage of references
that we have already available to us

134
00:09:22.993 --> 00:09:25.080
in the outer tests folder.

135
00:09:25.080 --> 00:09:32.318
So what we want here is something like,
&gt;&gt; Mike North: Like this

136
00:09:32.318 --> 00:09:39.791
and,
&gt;&gt; Mike North: type-guards.

137
00:09:45.240 --> 00:09:46.314
&gt;&gt; Mike North: isTypedArray.

138
00:09:48.395 --> 00:09:50.417
&gt;&gt; Mike North: Great,
we have the function here.

139
00:09:56.559 --> 00:09:59.316
&gt;&gt; Mike North: I don't actually think
we'll need the node types in here, so

140
00:09:59.316 --> 00:10:01.500
we can probably just have
that be the first line.

141
00:10:02.890 --> 00:10:03.718
Okay, and

142
00:10:03.718 --> 00:10:09.241
now what I wanna do is I'm actually
gonna have to export this like that.

143
00:10:12.711 --> 00:10:14.834
&gt;&gt; Mike North: I told you we'd
be doing some wacky stuff here.

144
00:10:17.064 --> 00:10:20.540
&gt;&gt; Mike North: Okay,
now let's look back at the tests for chai.

145
00:10:20.540 --> 00:10:23.853
So they've got chai-tests.

146
00:10:23.853 --> 00:10:29.719
So we're gonna do chat-tests.d.ts.

147
00:10:34.479 --> 00:10:39.194
&gt;&gt; Mike North: Part of why we're doing
this is dtslint wants sort of a root

148
00:10:39.194 --> 00:10:43.150
declaration file that
represents the library.

149
00:10:44.200 --> 00:10:45.925
So this is still here.

150
00:10:45.925 --> 00:10:49.040
We're effectively
re-exporting that symbol.

151
00:10:49.040 --> 00:10:54.604
Dtsflint wants to regard something as
sort of like where it can find the types,

152
00:10:54.604 --> 00:10:57.743
like within this types-dtsflint folder.

153
00:11:05.429 --> 00:11:07.058
&gt;&gt; Mike North: Let me see
if it's in the project.

154
00:11:09.417 --> 00:11:11.710
&gt;&gt; Mike North: Okay, it's not here,
so we're gonna have to do.

155
00:11:11.710 --> 00:11:13.690
Make sure I know where I am.

156
00:11:13.690 --> 00:11:16.040
Yarn add -D dtslint.

157
00:11:23.292 --> 00:11:24.207
&gt;&gt; Mike North: Cool.

158
00:11:32.687 --> 00:11:36.197
&gt;&gt; Mike North: So what it's doing now, now
that I ran this command, yarn dtslint and

159
00:11:36.197 --> 00:11:39.945
then the path to that folder we created,
you can see in the background it's

160
00:11:39.945 --> 00:11:43.230
downloading a bunch of
different TypeScript versions.

161
00:11:43.230 --> 00:11:47.508
It's gonna hold these in a cache called
.dts, which is great, because if you use

162
00:11:47.508 --> 00:11:52.010
this across a bunch of projects, it's
not storing them on a per project basis.

163
00:11:52.010 --> 00:11:54.740
If you use GitHub Actions,
this would be a great thing to cache.

164
00:11:55.820 --> 00:11:57.079
And now, let's see,

165
00:11:57.079 --> 00:12:00.929
it's taking issue with a bunch of
different stuff that's going on.

166
00:12:02.350 --> 00:12:05.641
Errors in TypeScript 3 for
external dependencies.

167
00:12:12.656 --> 00:12:13.980
&gt;&gt; Mike North: Why don't we just do this?

168
00:12:13.980 --> 00:12:17.328
Why don't we just drop the type in here?

169
00:12:17.328 --> 00:12:21.448
I would normally add this into the project
after we've sort of swatted away at a lot

170
00:12:21.448 --> 00:12:25.226
of the strictness work, gone through
that full list of different things.

171
00:12:25.226 --> 00:12:28.566
But we can do just fine this way.

172
00:12:31.833 --> 00:12:32.919
&gt;&gt; Mike North: So there's our type.

173
00:12:35.631 --> 00:12:39.993
&gt;&gt; Mike North: This is just quite a bit
of work that we would have to do between

174
00:12:39.993 --> 00:12:45.483
where we're at and being able to regard,
&gt;&gt; Mike North: Being

175
00:12:45.483 --> 00:12:48.080
able to get TSLint happy with this.

176
00:12:48.080 --> 00:12:50.710
So isTypedArray, let's run this again.

177
00:12:59.499 --> 00:13:01.131
&gt;&gt; Mike North: Still
giving us those errors?

178
00:13:07.337 --> 00:13:08.950
&gt;&gt; Mike North: No,
we're not gonna include source.

179
00:13:08.950 --> 00:13:10.080
That's how we can stop that.

180
00:13:12.460 --> 00:13:16.240
It's just a totally different linter
with totally different rules.

181
00:13:16.240 --> 00:13:20.811
Kinda have to kick this thing
a little bit until you get it to

182
00:13:20.811 --> 00:13:23.251
where it wants to help you out.

183
00:13:26.570 --> 00:13:30.180
&gt;&gt; Mike North: Okay, this is better.

184
00:13:31.610 --> 00:13:34.450
So it's saying this file should
not end with a blank line.

185
00:13:34.450 --> 00:13:36.260
Okay, that's pretty picky.

186
00:13:36.260 --> 00:13:38.275
File should end with a new line.

187
00:13:40.022 --> 00:13:42.922
&gt;&gt; Mike North: Just wanna get it into
a good baseline, then we can write a test.

188
00:13:57.793 --> 00:13:59.246
&gt;&gt; Mike North: Did I not save things?

189
00:14:02.044 --> 00:14:03.253
&gt;&gt; Mike North: New line here.

190
00:14:08.352 --> 00:14:11.383
&gt;&gt; Mike North: I'll just start disabling
rules if this bugs us too much longer.

191
00:14:30.702 --> 00:14:35.085
&gt;&gt; Mike North: Okay, this threw an error,
we're going to disable the rule.

192
00:14:48.073 --> 00:14:51.709
&gt;&gt; Mike North: This is gonna convince
all you all to use TSD cuz the setup for

193
00:14:51.709 --> 00:14:54.129
that is night and day compared to this.

194
00:14:55.640 --> 00:14:57.810
Okay, we're in a working state now.

195
00:14:57.810 --> 00:15:01.656
So in our test,
our chat-test, we could say,

196
00:15:06.436 --> 00:15:08.148
&gt;&gt; Mike North: isTypedArray, and

197
00:15:08.148 --> 00:15:15.002
we're going to pass in an unknown array,
and here we'll say toTest: unknown.

198
00:15:21.763 --> 00:15:22.760
&gt;&gt; Mike North: Something like that.

199
00:15:27.902 --> 00:15:30.323
&gt;&gt; Mike North: Sorry,
arrow functions index here.

200
00:15:39.051 --> 00:15:40.792
&gt;&gt; Mike North: Let's break
this out as a separate value.

201
00:15:46.863 --> 00:15:48.303
&gt;&gt; Mike North: Something like that.

202
00:16:04.190 --> 00:16:06.133
&gt;&gt; Mike North: Fine,
if it really wants me to export it.

203
00:16:06.133 --> 00:16:08.669
All right, here's the numberGuard.

204
00:16:08.669 --> 00:16:10.225
isTypedArray.

205
00:16:10.225 --> 00:16:13.274
Statements are not allowed
in ambient contexts.

206
00:16:21.818 --> 00:16:28.436
&gt;&gt; Mike North: I wonder if I,
&gt;&gt; Mike North: Else, I'm still here.

207
00:16:28.436 --> 00:16:30.935
This should be a ts file, not a dts file.

208
00:16:35.134 --> 00:16:36.053
&gt;&gt; Mike North: That's important.

209
00:16:38.291 --> 00:16:42.156
&gt;&gt; Mike North: And then this is gonna
complain about not being initialized,

210
00:16:42.156 --> 00:16:43.127
which is fine.

211
00:16:43.127 --> 00:16:47.077
And we can just say numberGuard.

212
00:16:50.504 --> 00:16:54.944
&gt;&gt; Mike North: Returns that,
and we'll implement it, typeof,

213
00:16:54.944 --> 00:16:58.668
there you go, toTest === 'number'.

214
00:16:58.668 --> 00:17:06.974
So isTypedArray, we can see it returns
this type, arg is number array.

215
00:17:06.974 --> 00:17:15.616
So we could do,
&gt;&gt; Mike North: Something like that,

216
00:17:15.616 --> 00:17:19.125
and let's run dtslint,
see if it's happy, it's probably.

217
00:17:20.818 --> 00:17:21.812
&gt;&gt; Mike North: We gotta return this.

218
00:17:27.400 --> 00:17:29.623
&gt;&gt; Mike North: I'll cancel that,
cuz it won't be successful there.

219
00:17:32.697 --> 00:17:34.808
&gt;&gt; Mike North: So I expect this to pass.

220
00:17:44.359 --> 00:17:46.415
&gt;&gt; Mike North: Consecutive
blank lines are forbidden.

221
00:17:46.415 --> 00:17:50.488
This is an example of not

222
00:17:50.488 --> 00:17:55.177
having too many opinions.

223
00:17:55.177 --> 00:18:00.290
Missing whitespace on line 8, comment must

224
00:18:00.290 --> 00:18:06.215
start with a space,
file should end with a new line.

225
00:18:06.215 --> 00:18:08.924
I would recommend turning
a lot of that stuff off,

226
00:18:08.924 --> 00:18:11.254
cuz we're playing whack-a-mole here.

227
00:18:22.835 --> 00:18:26.773
&gt;&gt; Mike North: Okay, TypeScript@5.3
expected type to be: arg is number[] and

228
00:18:26.773 --> 00:18:27.699
got: boolean.

229
00:18:29.349 --> 00:18:33.459
&gt;&gt; Mike North: So this is an example of
where the tooltip we're getting is quite

230
00:18:33.459 --> 00:18:36.056
different from what dtslint is seeing.

231
00:18:38.184 --> 00:18:43.756
&gt;&gt; Mike North: Where would the last
whitespace be, missing whitespace, 17:7.

232
00:18:47.542 --> 00:18:48.822
&gt;&gt; Speaker 2: After the comma?

233
00:18:48.822 --> 00:18:49.939
&gt;&gt; Mike North: Yes, that would be it.

234
00:18:52.040 --> 00:18:53.440
There we go, finally.

235
00:18:53.440 --> 00:18:55.703
If we had this as something different,
you would see.

236
00:18:55.703 --> 00:18:58.583
I mean, this is an example of
a failure where it's like, I got this,

237
00:18:58.583 --> 00:18:59.690
it should have been this.

238
00:18:59.690 --> 00:19:05.037
So you could write a bunch of these with
the special ExpectType comments here,

239
00:19:05.037 --> 00:19:06.990
and that would work nicely.

240
00:19:08.360 --> 00:19:12.810
I mean, if it would work,
once you wrestle it into submission.

241
00:19:12.810 --> 00:19:14.772
We're now gonna install tsd, and

242
00:19:14.772 --> 00:19:18.060
it's comparatively much
easier to set up and use.

243
00:19:18.060 --> 00:19:21.542
And we're gonna add some type-based
assertions just sort of at the bottom

244
00:19:21.542 --> 00:19:23.100
of one of our just tests.

245
00:19:23.100 --> 00:19:27.115
The downside here, of course, is we're not
gonna get the benefit of testing our types

246
00:19:27.115 --> 00:19:29.428
against multiple different
compiler versions.

247
00:19:29.428 --> 00:19:32.961
But it's perfectly good,
especially if you're dealing with an app.

248
00:19:32.961 --> 00:19:37.132
And you don't need to be worried about
supporting different range of versions,

249
00:19:37.132 --> 00:19:38.187
it can do just fine.

250
00:19:38.187 --> 00:19:40.377
So I'm gonna make a quick git commit.

251
00:19:47.586 --> 00:19:53.528
&gt;&gt; Mike North: Great, and then we're gonna
add a package to chat, yarn add -D tsd.

252
00:19:58.666 --> 00:20:03.596
&gt;&gt; Mike North: And we're gonna go back
to our tests, in the utils folder,

253
00:20:03.596 --> 00:20:04.785
for example.

254
00:20:04.785 --> 00:20:08.422
We could just write,
let's deal with this date test here.

255
00:20:08.422 --> 00:20:15.662
We can import {expectType} from 'tsd'.

256
00:20:15.662 --> 00:20:19.391
And then here we can
write expectType&lt;string&gt;.

257
00:20:19.391 --> 00:20:23.015
And then we can pass in our
formatTimestamp function here,

258
00:20:23.015 --> 00:20:27.370
just getting rid of the extra syntax
at the end, another parenthesis.

259
00:20:28.670 --> 00:20:32.668
And we expect this to be a string,
if it were a number we expected,

260
00:20:32.668 --> 00:20:34.865
you can see that this will light up.

261
00:20:34.865 --> 00:20:39.951
And so this serves as a nice
assertion to make sure

262
00:20:39.951 --> 00:20:45.173
that things work the way
you would expect them to.

263
00:20:45.173 --> 00:20:48.650
You'd usually use this to get a lot
of confidence around utility types or

264
00:20:48.650 --> 00:20:52.900
type guards or things like that, where
a lot of generics are floating around.

265
00:20:52.900 --> 00:20:57.605
And again, the point here is to catch
things that should not compile.

266
00:20:57.605 --> 00:20:58.898
Your just tests,

267
00:20:58.898 --> 00:21:04.599
the conventional tests that you would
write won't really help you with that.

