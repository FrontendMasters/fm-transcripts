WEBVTT

1
00:00:00.000 --> 00:00:04.463
Hi, I'm Mike North, I'm a principal
staff engineer at Stripe, and

2
00:00:04.463 --> 00:00:07.348
welcome to Enterprise-Scale TypeScript.

3
00:00:07.348 --> 00:00:12.009
This course is a great course for
those looking to lead, or help lead,

4
00:00:12.009 --> 00:00:16.042
a team of developers who
are working on a sizeable codebase.

5
00:00:16.042 --> 00:00:19.282
What does the word enterprise
mean in the course title here?

6
00:00:19.282 --> 00:00:24.511
Well, just think of it as a project
that's grown large enough that no

7
00:00:24.511 --> 00:00:29.571
one person could sort of keep their
entire codebase in their head.

8
00:00:29.571 --> 00:00:33.508
Remember all of the different conventions
and nuances in all of the different areas.

9
00:00:33.508 --> 00:00:39.166
Once it grows beyond a certain size,
you can't have the person

10
00:00:39.166 --> 00:00:44.307
that knows everything,
no one person can hold that all.

11
00:00:44.307 --> 00:00:48.151
Another thing that sort of indicates
you've reached enterprise scale is you

12
00:00:48.151 --> 00:00:51.594
have multiple teams that are involved
in the evolution of a project.

13
00:00:51.594 --> 00:00:54.466
So sometimes when
a company gets big enough,

14
00:00:54.466 --> 00:00:59.529
they'll have sort of an infrastructure
team that deals with sort of the nuts and

15
00:00:59.529 --> 00:01:03.329
bolts of how the project is built and
how things are tested.

16
00:01:03.329 --> 00:01:06.748
And maybe they're also worried
about performance a little bit.

17
00:01:06.748 --> 00:01:10.319
And then you have product teams that
are looking to add features to something.

18
00:01:10.319 --> 00:01:15.547
And when you have multiple teams
working in one codebase like that,

19
00:01:15.547 --> 00:01:17.850
you've taken on more scale.

20
00:01:17.850 --> 00:01:22.280
And there are new challenges that
start to emerge as a result of that.

21
00:01:22.280 --> 00:01:26.750
And the third thing is,
you know you've reached kind of a sizable

22
00:01:26.750 --> 00:01:31.629
project when you get the sense that
if everybody does their own thing and

23
00:01:31.629 --> 00:01:34.962
if people are left without
helpful guardrails,

24
00:01:34.962 --> 00:01:39.621
the codebase will become inconsistent and
unmanageable, right?

25
00:01:39.621 --> 00:01:43.671
If everyone can add their
own dependencies at a whim,

26
00:01:43.671 --> 00:01:48.351
or if you end up with lots of
duplicate code all over the place,

27
00:01:48.351 --> 00:01:51.322
things can become a little bit gnarly.

28
00:01:51.322 --> 00:01:56.333
And it's tough to solve that problem
once you already have that problem.

29
00:01:56.333 --> 00:01:57.168
And inevitably,

30
00:01:57.168 --> 00:02:00.622
you will have some degree of that
problem when you have a sizable project.

31
00:02:00.622 --> 00:02:06.626
But that's how you know you're not dealing
with a small project anymore, right?

32
00:02:06.626 --> 00:02:12.071
So in the spirit of that, we're gonna
talk about a couple things we're

33
00:02:12.071 --> 00:02:18.087
sort of optimizing for when we think
about larger scale TypeScript projects.

34
00:02:18.087 --> 00:02:20.485
Productivity is really important, right?

35
00:02:20.485 --> 00:02:25.748
If a build is broken,
if nobody can work on the project, and

36
00:02:25.748 --> 00:02:30.697
you have 30 or 50 or 100 or
several hundred people

37
00:02:30.697 --> 00:02:36.384
contributing to a thing,
that's a big deal to stop progress for

38
00:02:36.384 --> 00:02:40.732
all of the developers,
that's pretty costly.

39
00:02:40.732 --> 00:02:45.722
When you're trying to sort of put helpful
guardrails in place around your project,

40
00:02:45.722 --> 00:02:50.168
you have to think about bouncing opinions
about how things should be done.

41
00:02:50.168 --> 00:02:54.840
But not be so rigid that the developers
that are contributing to a project,

42
00:02:54.840 --> 00:02:57.968
they feel like they have no flexibility,
right?

43
00:02:57.968 --> 00:03:02.386
You can't take away artistic license.

44
00:03:02.386 --> 00:03:04.486
Sometimes when things are so
constrained and so

45
00:03:04.486 --> 00:03:08.013
opinionated, people feel like they have
to wrestle against the constraints.

46
00:03:08.013 --> 00:03:11.304
As opposed to them sort of
being there in a helpful way,

47
00:03:11.304 --> 00:03:13.965
but you sort of still
have room to maneuver.

48
00:03:13.965 --> 00:03:17.868
Enterprises care a lot about designing for
a long shelf life, right?

49
00:03:17.868 --> 00:03:23.676
Rewrites are incredibly expensive,
and projects evolve over time, right?

50
00:03:23.676 --> 00:03:28.320
It's very common for
a large-scale project to sort of exist for

51
00:03:28.320 --> 00:03:32.284
a period of time,
where new technologies come and go.

52
00:03:32.284 --> 00:03:37.157
And maybe a web framework
becomes no longer workable, and

53
00:03:37.157 --> 00:03:42.837
you sort of have to adopt a new
framework in pieces across a project.

54
00:03:42.837 --> 00:03:47.105
We wanna make sure we design for that,
because with the large-scale project,

55
00:03:47.105 --> 00:03:50.113
that's a massive investment for
a company sometimes.

56
00:03:50.113 --> 00:03:53.330
Not just in terms of the work
it took to get there, but

57
00:03:53.330 --> 00:03:57.589
just the number of people operating on it,
it's much more sizable.

58
00:03:57.589 --> 00:04:00.400
And then finally,
managing complexity is a big deal.

59
00:04:00.400 --> 00:04:03.697
Because when you have more code,

60
00:04:03.697 --> 00:04:08.880
more contributors,
all of the sort of combinations

61
00:04:08.880 --> 00:04:13.965
of different things start
to become interesting.

62
00:04:13.965 --> 00:04:18.744
And so, the ability to sort of have
encapsulated chunks of an app that you can

63
00:04:18.744 --> 00:04:20.995
sort of build and test on their own.

64
00:04:20.995 --> 00:04:24.169
And then compose those together
to make a larger project.

65
00:04:24.169 --> 00:04:30.655
That lets you have nice boundaries around
things and nice testable units of code,

66
00:04:30.655 --> 00:04:35.169
not just everything lumped
together in one big project.

67
00:04:35.169 --> 00:04:40.776
So the course goals, so we're going to
create a library together from scratch.

68
00:04:40.776 --> 00:04:43.090
It's gonna be right inside
the course repo, and

69
00:04:43.090 --> 00:04:46.600
we're gonna go through where the repo
is and how to install it in a moment.

70
00:04:46.600 --> 00:04:50.933
But we're gonna create it from
scratch because I'd like to share

71
00:04:50.933 --> 00:04:54.566
kind of how I approach setting
something like that up.

72
00:04:54.566 --> 00:04:59.376
With a minimal set of libraries
that gets us linting, testing,

73
00:04:59.376 --> 00:05:02.593
API docs, all of the basics for a library.

74
00:05:02.593 --> 00:05:08.001
Without having to opt into a bunch of sort
of heavyweight, high-complexity tools.

75
00:05:08.001 --> 00:05:09.564
So we'll go through that process.

76
00:05:09.564 --> 00:05:14.946
We'll migrate a non-trivial JavaScript
codebase from JavaScript to TypeScript.

77
00:05:14.946 --> 00:05:19.677
In this case, it's going to be like
a simplified version of Slack,

78
00:05:19.677 --> 00:05:24.580
where right now the current state
in the repo, it's all JavaScript.

79
00:05:24.580 --> 00:05:31.096
There are missing @types packages,
if you're familiar with what those are.

80
00:05:31.096 --> 00:05:34.119
I have a particular process
that I'm gonna teach you for

81
00:05:34.119 --> 00:05:35.863
going through that migration.

82
00:05:35.863 --> 00:05:38.642
And there are a couple
deliberate things that we end up

83
00:05:38.642 --> 00:05:40.323
fixing each step along the way.

84
00:05:40.323 --> 00:05:45.439
So we can appreciate the kind of things
you would take on in that process.

85
00:05:45.439 --> 00:05:50.191
We'll look at how to keep pace with
new TypeScript compiler versions as

86
00:05:50.191 --> 00:05:51.229
they come out.

87
00:05:51.229 --> 00:05:54.799
So TypeScript does not
follow semantic versioning.

88
00:05:54.799 --> 00:05:59.592
And it's understandable,
maintaining a project like TypeScript,

89
00:05:59.592 --> 00:06:03.664
where people depend on existing
behavior of the compiler.

90
00:06:03.664 --> 00:06:10.164
And there's no denoting, like, well, this
is a public API thing that you're seeing,

91
00:06:10.164 --> 00:06:14.513
versus this is just behavior
that happens to work this way.

92
00:06:14.513 --> 00:06:18.250
So every middle digit release
of TypeScript comes with

93
00:06:18.250 --> 00:06:20.209
a list of breaking changes.

94
00:06:20.209 --> 00:06:24.755
In practice, this doesn't hurt so
much, right?

95
00:06:24.755 --> 00:06:29.751
But the larger your project gets and
the more of TypeScript's

96
00:06:29.751 --> 00:06:35.819
capabilities you start using,
the greater your exposure is to breakage.

97
00:06:35.819 --> 00:06:39.899
So it's important to
know how to keep pace,

98
00:06:39.899 --> 00:06:44.545
or how to know when a breaking
change is coming in.

99
00:06:44.545 --> 00:06:46.414
And how to address it, or

100
00:06:46.414 --> 00:06:51.050
decide that you wanna stay on
a particular compiler version.

101
00:06:51.050 --> 00:06:54.285
We'll develop an in-depth
understanding of strictness.

102
00:06:54.285 --> 00:06:57.751
This means both your TSConfig and
a linter,

103
00:06:57.751 --> 00:07:01.223
which is ESLint that we're gonna be using.

104
00:07:01.223 --> 00:07:05.287
How can we sort of start in a very
flexible mode, and then incrementally

105
00:07:05.287 --> 00:07:09.779
ratchet up strictness, so that we're not
trying to sort of flip a big switch.

106
00:07:09.779 --> 00:07:12.378
And say we're going from very flexible,

107
00:07:12.378 --> 00:07:15.431
almost any piece of
JavaScript would work mode.

108
00:07:15.431 --> 00:07:20.473
To I wrote this from
the beginning in TypeScript, and

109
00:07:20.473 --> 00:07:25.746
I have all the settings cranked
up as high as they can go.

110
00:07:25.746 --> 00:07:29.292
There is value in being able to
sort of slowly ratchet it up.

111
00:07:29.292 --> 00:07:31.259
So we'll talk about all
of those options there.

112
00:07:34.035 --> 00:07:36.869
I'm gonna skip that bullet point up here,
cuz we're not gonna get to that.

113
00:07:36.869 --> 00:07:41.220
But we'll use Yarn's built-in support for
workspaces.

114
00:07:41.220 --> 00:07:44.545
So anyone here work on a monorepo before,

115
00:07:44.545 --> 00:07:48.349
where you have multiple
packages in a project?

116
00:07:48.349 --> 00:07:51.547
Anyone use Lerna for a monorepo?

117
00:07:51.547 --> 00:07:57.538
So with modern Yarn, you don't really
need Lerna for all of the things anymore.

118
00:07:57.538 --> 00:08:03.094
I find I only reach for Lerna if I need
to version packages automatically, right?

119
00:08:03.094 --> 00:08:07.231
In lockstep sort of step up
the versions of everything.

120
00:08:07.231 --> 00:08:12.095
If you're just building an app and
you wanna have just various chunks of code

121
00:08:12.095 --> 00:08:16.199
that sort of operate like libraries
within the app's Git repo,

122
00:08:16.199 --> 00:08:20.923
Yarn does everything you need, and
we're gonna explore how that works.

123
00:08:20.923 --> 00:08:25.723
How you can start to take chunks of an app
and sort of factor it out into a little

124
00:08:25.723 --> 00:08:29.548
library-like thing,
which is treated like a dependency,

125
00:08:29.548 --> 00:08:32.710
but it's all sort of wired
up in your one Git repo.

126
00:08:32.710 --> 00:08:37.168
So what should you already
know when taking this course?

127
00:08:37.168 --> 00:08:41.561
Well, first, you should have a good
understanding of modern JavaScript.

128
00:08:41.561 --> 00:08:46.410
I strongly recommend taking
the TypeScript Fundamentals course.

129
00:08:46.410 --> 00:08:49.709
That will make sure you know, I'm gonna
be throwing around types today, and

130
00:08:49.709 --> 00:08:51.302
I'll explain what they're doing.

131
00:08:51.302 --> 00:08:57.921
But I'm not gonna explain the why or
necessarily go too deep into the syntax.

132
00:08:57.921 --> 00:09:00.029
So you should understand that.

133
00:09:00.029 --> 00:09:06.582
You should understand how to manage
dependencies with a tool like NPM or Yarn.

134
00:09:06.582 --> 00:09:09.220
You should conceptually
understand how linting works.

135
00:09:09.220 --> 00:09:12.935
We'll go through every single
step of setting up ESLint.

136
00:09:12.935 --> 00:09:18.674
But we won't go in depth into
sort of what a linter does and

137
00:09:18.674 --> 00:09:25.623
why you would need to include one
in your app, those kinds of things.

138
00:09:25.623 --> 00:09:30.683
You should understand semantic
versioning and the concept of how

139
00:09:30.683 --> 00:09:35.743
the number of a dependency might change,
in order to communicate

140
00:09:35.743 --> 00:09:40.633
a level of risk that people
are taking as they take in a package.

141
00:09:40.633 --> 00:09:45.369
And then finally, you should be familiar
working with some basic shell scripts.

142
00:09:45.369 --> 00:09:49.875
We're gonna be doing a little bit
of work in NPM scripts, right?

143
00:09:49.875 --> 00:09:57.362
The scripts object in package.json,
and it's helpful to know how to and

144
00:09:57.362 --> 00:10:01.840
two scripts together, that kind of thing.

