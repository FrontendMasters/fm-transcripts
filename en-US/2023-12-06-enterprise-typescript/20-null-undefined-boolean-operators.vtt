WEBVTT

1
00:00:00.310 --> 00:00:05.139
All right, next up, and we're gonna
just do another small-scale pass

2
00:00:05.139 --> 00:00:09.030
here where we're just focusing
in on a subpart of the app.

3
00:00:09.030 --> 00:00:11.910
We'll focus on the same subpart,
just like the utilities folder.

4
00:00:13.290 --> 00:00:16.810
This is where we're gonna start
to apply ESLint rules and

5
00:00:16.810 --> 00:00:19.750
crank up the strictness
from that standpoint.

6
00:00:19.750 --> 00:00:23.150
And it's a combination of TSConfig and
ESLint.

7
00:00:23.150 --> 00:00:28.995
So we'll enable strictNullChecks,
exactOptionalPropertyTypes in TSConfig,

8
00:00:28.995 --> 00:00:31.920
and then we'll enable this ESLint rule.

9
00:00:31.920 --> 00:00:36.164
And the new thing we're learning here is,
we already know how to

10
00:00:36.164 --> 00:00:40.260
focus a set of compiler flags
on a folder in a project, right?

11
00:00:40.260 --> 00:00:44.660
We put a new TSConfig in there,
and then we can run tsc -P and

12
00:00:44.660 --> 00:00:48.359
point to the folder and
it'll just compile that.

13
00:00:48.359 --> 00:00:51.180
We did that with no implicit any, right?

14
00:00:51.180 --> 00:00:53.100
We just did that on the utils folder.

15
00:00:53.100 --> 00:00:54.898
We'll do the same thing here,
it's a little different.

16
00:00:54.898 --> 00:00:59.754
But this is another great skill to
have where you can sort of tighten

17
00:00:59.754 --> 00:01:04.191
up strictness locally, and
then hold your ground, right?

18
00:01:04.191 --> 00:01:08.110
You can get it into a state you want it
to be in, and that's the new baseline.

19
00:01:08.110 --> 00:01:10.070
Those are the new rules for
that part of the project.

20
00:01:11.920 --> 00:01:13.470
All right, let's get started.

21
00:01:13.470 --> 00:01:16.790
Let's first make the compiler
setting changes.

22
00:01:16.790 --> 00:01:20.350
So strictNullChecks and
exactOptionalPropertyTypes.

23
00:01:20.350 --> 00:01:27.672
So we're gonna go back to our TSConfig
file in the utils folder, here it is.

24
00:01:27.672 --> 00:01:35.642
strictOptional,
exactOptionalPropertyTypes,

25
00:01:35.642 --> 00:01:37.580
there it is, true.

26
00:01:39.380 --> 00:01:42.334
And then the other flag
is strictNullChecks.

27
00:01:44.909 --> 00:01:49.060
True, so we already know how this works.

28
00:01:49.060 --> 00:01:54.479
We're gonna run tsc -P, point to this
folder, and it'll tell us what's up.

29
00:02:05.009 --> 00:02:08.140
Nothing, we got by clean this time.

30
00:02:08.140 --> 00:02:11.203
There's nothing,
we weren't able to turn these flags on.

31
00:02:11.203 --> 00:02:14.015
And through what we've done already today,

32
00:02:14.015 --> 00:02:18.388
we may have addressed all of the things
that could have made this fail.

33
00:02:18.388 --> 00:02:20.600
So let's focus on the ESLint side.

34
00:02:20.600 --> 00:02:23.059
I'm just gonna grab the name
of this ESLint rule.

35
00:02:24.230 --> 00:02:26.850
And we're gonna go to
our outer ESLint config.

36
00:02:26.850 --> 00:02:28.240
So this is a little bit different.

37
00:02:28.240 --> 00:02:33.274
It does not involve us having to create
a different config file for this folder.

38
00:02:33.274 --> 00:02:42.090
And that is because ESLint gives us this
overrides array, starts up here, right?

39
00:02:42.090 --> 00:02:44.630
Look at how many lines of
config we have inherited.

40
00:02:44.630 --> 00:02:48.811
Override is where a lot of
important stuff happens.

41
00:02:48.811 --> 00:02:53.966
And the idea behind overrides is
you specify some set of files or

42
00:02:53.966 --> 00:02:57.477
folders, you can use globs here, right?

43
00:02:57.477 --> 00:03:02.990
And you can define rule sets
that are used for those files.

44
00:03:02.990 --> 00:03:07.248
You can enable or
disable certain rules that happen here.

45
00:03:07.248 --> 00:03:11.753
And so, we're just gonna create
a new override for the utils,

46
00:03:11.753 --> 00:03:15.840
like source/utils, and
we'll add this one rule to it.

47
00:03:15.840 --> 00:03:18.441
And we'll be able to run yarn lint,

48
00:03:18.441 --> 00:03:22.190
it'll just treat that folder
in a more strict way.

49
00:03:23.190 --> 00:03:24.730
You just add it right at the top.

50
00:03:24.730 --> 00:03:28.037
So it's a new object,
and we could say files.

51
00:03:30.560 --> 00:03:36.269
And we'll say its source/utils/**.ts,

52
00:03:36.269 --> 00:03:42.420
yeah, that's great, something like that.

53
00:03:42.420 --> 00:03:49.489
You could even have a little
set of braces here to say tsx,

54
00:03:49.489 --> 00:03:54.660
mts, cts, any kind of TypeScript file.

55
00:03:54.660 --> 00:03:58.069
A React TypeScript file,
a common JS TypeScript file,

56
00:03:58.069 --> 00:04:02.430
a native ES module TypeScript file,
this should apply to all of those.

57
00:04:03.600 --> 00:04:05.061
And then we're gonna say rules.

58
00:04:10.789 --> 00:04:14.320
Strict-boolean-expressions, and
we'll say error.

59
00:04:16.420 --> 00:04:19.359
Generally, I think there are a variety
of different things you can use for

60
00:04:19.359 --> 00:04:20.870
what you put over here.

61
00:04:20.870 --> 00:04:22.890
I tend to use error, warn, and off.

62
00:04:22.890 --> 00:04:26.687
I think you can use numbers as well,
like 2, 1, and 0, but

63
00:04:26.687 --> 00:04:29.329
this is how I tend to do it,
more readable.

64
00:04:33.219 --> 00:04:38.220
Okay, let's run yarn lint and
see what happens.

65
00:04:49.027 --> 00:04:54.520
We got a couple errors, or a couple lint
violations, two problems in one file.

66
00:04:55.830 --> 00:04:58.220
So let's check it out, what's up here?

67
00:05:00.030 --> 00:05:03.931
This rule requires strictNullChecks
compiler option to be turned on in order

68
00:05:03.931 --> 00:05:05.720
to function properly.

69
00:05:05.720 --> 00:05:11.278
Hmm, let's bump ESLint and TypeScript.

70
00:05:15.348 --> 00:05:16.690
Hey, it's better now.

71
00:05:18.270 --> 00:05:20.470
Don't forget to try that first.

72
00:05:20.470 --> 00:05:26.539
I've chased my tail so many times just
to realize that turning it off and

73
00:05:26.539 --> 00:05:31.220
on again caused something
to pick up new state here.

74
00:05:31.220 --> 00:05:34.870
So, great, we do have TSConfig
with strictNullChecks turned on.

75
00:05:34.870 --> 00:05:38.756
ESLint, in fact, is gonna check
to make sure that requirement,

76
00:05:38.756 --> 00:05:42.091
which is necessary for
this rule we just started to use.

77
00:05:42.091 --> 00:05:44.822
It's gonna make sure that
the TSConfig lines up for

78
00:05:44.822 --> 00:05:46.544
where we have that rule scoped.

79
00:05:46.544 --> 00:05:49.999
They're both on the utils folder,
so we're okay.

80
00:05:49.999 --> 00:05:54.020
But it would bug you if you sort of
cast a wide net with the rule, but

81
00:05:54.020 --> 00:05:57.399
strictNullChecks is only enabled for
a couple files.

82
00:05:57.399 --> 00:05:59.230
It will tell you about that.

83
00:05:59.230 --> 00:06:02.885
Okay, unexpected nullable
string value in a conditional,

84
00:06:02.885 --> 00:06:05.548
please handle the nullish and empty cases.

85
00:06:05.548 --> 00:06:13.150
And it's reminding me that this
is a nullable thing, right?

86
00:06:13.150 --> 00:06:19.516
It could be undefined, and
I can handle that this way.

87
00:06:19.516 --> 00:06:24.879
Instead of using or
to express my default here,

88
00:06:24.879 --> 00:06:32.650
I can use nullish coalescing,
question mark, question mark.

89
00:06:32.650 --> 00:06:37.261
Down here, This is an unknown,

90
00:06:37.261 --> 00:06:40.370
error is an unknown, we typed it as such.

91
00:06:40.370 --> 00:06:47.240
And it's saying, we need a comparison,
or we need a typecast of some sort.

92
00:06:47.240 --> 00:06:49.130
So what should we do here?

93
00:06:50.490 --> 00:06:52.080
It's another trick question.

94
00:06:52.080 --> 00:06:53.309
We have some options.

95
00:06:58.818 --> 00:07:01.945
I mean, at this point,
we kind of just wanna serialize it,

96
00:07:01.945 --> 00:07:05.420
we wanna coerce it to a string,
whatever it is.

97
00:07:05.420 --> 00:07:08.139
Cuz we've already checked to see
if it's an instance of Error.

98
00:07:11.430 --> 00:07:16.797
We have to return, the whole point of
this is to return some stringish value.

99
00:07:19.102 --> 00:07:21.850
We cast it to any,
that's not gonna be great.

100
00:07:24.163 --> 00:07:25.680
How about that?

101
00:07:25.680 --> 00:07:30.290
Not new,
pass it through the String constructor.

102
00:07:30.290 --> 00:07:34.610
We solved this problem,
by the way, earlier in the course.

103
00:07:34.610 --> 00:07:37.271
Cuz this is one of those functions
that's in our little library.

104
00:07:37.271 --> 00:07:42.050
We're gonna switch and
start depending on that library in just

105
00:07:42.050 --> 00:07:45.396
two chapters from now, right near the end.

106
00:07:47.330 --> 00:07:50.400
Okay, so I think that's it,
I think we should be good.

107
00:07:50.400 --> 00:07:53.610
yarn lint should return
no errors at this point.

108
00:07:54.650 --> 00:07:58.737
So that's an example of us being
able to focus linting in and

109
00:07:58.737 --> 00:08:02.509
to be more strict on a couple files or
a couple folders.

110
00:08:02.509 --> 00:08:05.588
And I think this is even
better than TypeScript,

111
00:08:05.588 --> 00:08:09.281
cuz imagine we started to take
on the data folder, right?

112
00:08:09.281 --> 00:08:14.450
We could just add it to this files array,
source/data/something.

113
00:08:14.450 --> 00:08:17.160
We don't need to have all these
TSConfigs floating around.

114
00:08:18.460 --> 00:08:19.920
We could just kind of do it that way.

115
00:08:21.670 --> 00:08:25.936
You could do that with
TSConfig as well by saying,

116
00:08:25.936 --> 00:08:31.735
I include a bunch of different stuff,
but it's not as nice as this.

117
00:08:31.735 --> 00:08:34.343
You don't have as much
fine-grained control over like,

118
00:08:34.343 --> 00:08:36.160
disable this one little thing, right?

