WEBVTT

1
00:00:00.000 --> 00:00:03.586
Next, we're going to install
the TypeScript compiler, so here we go.

2
00:00:03.586 --> 00:00:10.007
Yarn add -D for devDependency,

3
00:00:10.007 --> 00:00:16.892
typescript@5.3.0-beta.

4
00:00:16.892 --> 00:00:20.764
What I would prefer you do if
you're doing this at home, and

5
00:00:20.764 --> 00:00:25.735
it's later than the recording, I would
want you to do something like this.

6
00:00:25.735 --> 00:00:31.290
~5.3.0, that'll get you
the latest TypeScript 5.3.

7
00:00:31.290 --> 00:00:35.680
We're explicitly specifying
this just cuz we're using this.

8
00:00:35.680 --> 00:00:40.263
I expect 5.3 to be cut like
next week as a stable release.

9
00:00:40.263 --> 00:00:42.976
So this is a very refined beta.

10
00:00:46.793 --> 00:00:50.650
Great, and we can see evidence
that it was installed right here.

11
00:00:50.650 --> 00:00:52.595
Okay, so we have TypeScript installed.

12
00:00:52.595 --> 00:00:54.637
Now, we need a tsconfig file, right.

13
00:00:54.637 --> 00:00:57.377
This is what we use to configure.

14
00:00:57.377 --> 00:00:59.486
How TypeScript compiles our code.

15
00:00:59.486 --> 00:01:03.204
And this is another big JSON file
that if we were to create it by hand,

16
00:01:03.204 --> 00:01:04.267
we certain could.

17
00:01:04.267 --> 00:01:09.393
But if you've done this enough
that you've memorized all of

18
00:01:09.393 --> 00:01:14.527
the different keys that you wanna apply,
maybe you do that.

19
00:01:14.527 --> 00:01:20.483
Here's what I tend to do, yarn tsc --init,

20
00:01:20.483 --> 00:01:25.847
this is what I was getting --init from.

21
00:01:25.847 --> 00:01:30.278
You run that And here's your output here.

22
00:01:30.278 --> 00:01:32.860
It said it created a new tsconfig with,
and

23
00:01:32.860 --> 00:01:35.385
then a bunch of different settings here.

24
00:01:35.385 --> 00:01:38.599
And it gives you a link where you
can learn more about tsconfig.

25
00:01:40.914 --> 00:01:43.387
I saw a reaction in class
that this seems to be it.

26
00:01:43.387 --> 00:01:47.489
&gt;&gt; I was just surprised by it not
only filled in those defaults.

27
00:01:47.489 --> 00:01:52.429
But every other possible compiler
option with a comment about what that

28
00:01:52.429 --> 00:01:54.081
compiler option does.

29
00:01:54.081 --> 00:01:56.246
It was just a surprise is all.

30
00:01:56.246 --> 00:01:57.510
&gt;&gt; It's a surprise.

31
00:01:57.510 --> 00:02:01.461
So, for one it's a lot in this file.

32
00:02:01.461 --> 00:02:04.806
If you're just starting
out with TypeScript or

33
00:02:04.806 --> 00:02:07.490
it's nice to have the comments here.

34
00:02:07.490 --> 00:02:09.672
This isn't adding any
weight to your project.

35
00:02:09.672 --> 00:02:16.052
It does, every single option
commented out lets you uncomment it.

36
00:02:16.052 --> 00:02:18.270
There are a couple things
in here I don't like, and

37
00:02:18.270 --> 00:02:20.135
I'm gonna explain why I don't like them.

38
00:02:20.135 --> 00:02:25.360
So we're gonna begin the process of going
through and changing some of these things.

39
00:02:25.360 --> 00:02:27.930
And I've arranged these
changes from top to bottom so

40
00:02:27.930 --> 00:02:29.594
you can just follow along with me.

41
00:02:29.594 --> 00:02:31.958
If you're looking on the course website,

42
00:02:31.958 --> 00:02:35.182
they're also arranged like
section by section, right.

43
00:02:35.182 --> 00:02:42.322
So we're gonna start with the target
property and move down from there.

44
00:02:42.322 --> 00:02:49.155
So for the target this describes
the target JavaScript language version.

45
00:02:49.155 --> 00:02:54.330
So a great way to think about this is like
before ES2017, there was no async await.

46
00:02:54.330 --> 00:02:56.831
And that means TypeScript's build output.

47
00:02:56.831 --> 00:03:00.500
Will not use the async or await keyword.

48
00:03:00.500 --> 00:03:05.600
They'll have an elaborate polyfill
that makes that code run as it should.

49
00:03:05.600 --> 00:03:11.421
But it's not true async and await, as in
you won't see that in the output code.

50
00:03:11.421 --> 00:03:14.519
So we're gonna bump this up to 2022.

51
00:03:17.496 --> 00:03:21.367
Next we're gonna go into this
section called modules down here.

52
00:03:21.367 --> 00:03:25.734
And commonjs is what we want here for
the modules.

53
00:03:25.734 --> 00:03:27.944
We're gonna define a rootDir.

54
00:03:27.944 --> 00:03:33.412
And this is important because it
affects auto imports a little bit and

55
00:03:33.412 --> 00:03:37.855
in effect, sort of If you
were to publish this package.

56
00:03:37.855 --> 00:03:44.690
You don't wanna be like library
name/source/module name.

57
00:03:44.690 --> 00:03:47.480
You just wanna be like
library name/module name.

58
00:03:47.480 --> 00:03:50.060
So we're gonna make that change by saying,
look,

59
00:03:50.060 --> 00:03:51.990
the src folder is where all my code is.

60
00:03:51.990 --> 00:03:56.862
Next, we're going to
uncomment this types array.

61
00:03:56.862 --> 00:03:59.720
Feel free to think that
I'm a little OCD here.

62
00:03:59.720 --> 00:04:03.392
What we're saying here
is we have to specify

63
00:04:03.392 --> 00:04:07.770
the type packages that
are allowed in this project.

64
00:04:07.770 --> 00:04:11.977
Normally, you'd be able to access
anything in your package JSON.

65
00:04:11.977 --> 00:04:15.066
If you have an at types package,
which we'll talk about later,

66
00:04:15.066 --> 00:04:18.750
type information you download for
a library that is written in JavaScript.

67
00:04:18.750 --> 00:04:21.807
It doesn't publish its own types.

68
00:04:21.807 --> 00:04:24.720
Normally, you'd have access to
everything in your package JSON.

69
00:04:24.720 --> 00:04:31.850
What I don't like about that is that,
let's say we download the types for

70
00:04:31.850 --> 00:04:36.110
Jest, which we wanna
use only in our tests.

71
00:04:36.110 --> 00:04:40.553
TypeScript will kinda let you import
the Jest library in your live

72
00:04:40.553 --> 00:04:44.771
application like it's easy to
sort of cross the wires there.

73
00:04:44.771 --> 00:04:48.591
And being explicit about this like
it can become unmanageable for

74
00:04:48.591 --> 00:04:51.311
projects with tons and
tons of dependencies.

75
00:04:51.311 --> 00:04:56.130
But it's I like to at least start
out with a library like this.

76
00:04:56.130 --> 00:05:00.099
Having very deliberate control
over what my dependencies are.

77
00:05:00.099 --> 00:05:03.823
And that way, I don't sort of write
the name of a function and then.

78
00:05:03.823 --> 00:05:07.071
Not looking closely enough and
I auto-import it, and

79
00:05:07.071 --> 00:05:10.890
it ends up being like something I
just use for build or for tests.

80
00:05:10.890 --> 00:05:15.659
I don't necessarily want all of that
to go along with my published code.

81
00:05:15.659 --> 00:05:20.686
The next thing we'll change it's in
another section here in the emit section.

82
00:05:20.686 --> 00:05:27.420
So this set of compiler options describes
how TypeScript emits your code.

83
00:05:27.420 --> 00:05:33.059
Right, what ends up in that dist folder?

84
00:05:33.059 --> 00:05:38.734
We're going to enable declarations,
which means our TypeScript

85
00:05:38.734 --> 00:05:44.113
source code will compile out to
not only runnable JavaScript.

86
00:05:44.113 --> 00:05:48.662
But you'll get the types that represent
that JavaScript side-by-side in

87
00:05:48.662 --> 00:05:49.736
the dist folder.

88
00:05:49.736 --> 00:05:52.458
By default, you don't get these.

89
00:05:52.458 --> 00:05:55.658
You can opt in by enabling
declaration true.

90
00:05:55.658 --> 00:05:58.034
We're gonna define the outDir.

91
00:05:58.034 --> 00:06:03.440
This is the build output Dir,
and we're gonna make this dist.

92
00:06:03.440 --> 00:06:05.918
StripInternal is interesting.

93
00:06:05.918 --> 00:06:13.746
We'll talk more about this when we deal
with something called API extractor.

94
00:06:13.746 --> 00:06:15.782
Which is super useful for libraries,

95
00:06:15.782 --> 00:06:18.460
we're going to deal with
it in this project here.

96
00:06:18.460 --> 00:06:23.850
You can add a JSDoc
comment tag at internal

97
00:06:23.850 --> 00:06:28.015
to like a function for example.

98
00:06:28.015 --> 00:06:32.609
And what this does is it makes sure
that anything you've marked as

99
00:06:32.609 --> 00:06:36.630
internal will be stripped out
of the type declarations.

100
00:06:36.630 --> 00:06:40.732
This is useful because sometimes you wanna
export a function and it's just there,

101
00:06:40.732 --> 00:06:43.440
maybe it's just there for
testing purposes, right.

102
00:06:43.440 --> 00:06:48.375
So that in your test harness, you can call
into this thing and maybe it's sort of.

103
00:06:48.375 --> 00:06:52.591
I don't know, maybe you use a date in
the function that's publicly called.

104
00:06:52.591 --> 00:06:56.935
And you want some inner part of that
logic where you provide a date.

105
00:06:56.935 --> 00:07:01.419
So you can write a nice stable
test that will not have

106
00:07:01.419 --> 00:07:04.664
the randomness of the now date in it.

107
00:07:04.664 --> 00:07:08.248
But this will let you kind of
expose things technically out of

108
00:07:08.248 --> 00:07:11.909
the package without them ending
up in your declaration file.

109
00:07:11.909 --> 00:07:15.726
EsModuleInterop they
have this set to true.

110
00:07:15.726 --> 00:07:20.298
Cuz their typed script
wants to sort of get people

111
00:07:20.298 --> 00:07:25.217
moving towards the MGS,
the ES module file format.

112
00:07:25.217 --> 00:07:29.854
I think this is an appropriate
setting to leave enabled for an app.

113
00:07:29.854 --> 00:07:33.858
For a leaf level dependency, meaning
something that nothing else depends on.

114
00:07:33.858 --> 00:07:40.156
I tend to leave this false and it's
because if you enable this in the library.

115
00:07:40.156 --> 00:07:47.668
And when you enable this, you're almost
saying MyTypes normally would not work.

116
00:07:47.668 --> 00:07:49.585
They would not compile.

117
00:07:49.585 --> 00:07:54.641
But if I enable this flag,
MyTypes will compile.

118
00:07:54.641 --> 00:07:59.024
And what ends up happening is
you generate types in many

119
00:07:59.024 --> 00:08:03.610
cases where anyone else who
needs to compile their code.

120
00:08:03.610 --> 00:08:07.129
Which includes your types,
if they depend on your library,

121
00:08:07.129 --> 00:08:09.064
they also must turn this flag on.

122
00:08:09.064 --> 00:08:13.366
And when I'm writing libraries,
I don't like to force my consumers

123
00:08:13.366 --> 00:08:16.640
to change their tsconfig
just to make my stuff work.

124
00:08:16.640 --> 00:08:21.863
So I tend to leave this off for
libraries specifically.

125
00:08:21.863 --> 00:08:23.477
Completeness, okay,

126
00:08:23.477 --> 00:08:27.920
I really don't know why they leave
this set to true, by default.

127
00:08:27.920 --> 00:08:31.325
SkipLibCheck, let's look at what this is.

128
00:08:31.325 --> 00:08:35.890
It says skip type
checking all .d.ts files.

129
00:08:35.890 --> 00:08:39.017
Effectively, if you
leave this set to true.

130
00:08:39.017 --> 00:08:43.640
You will not, like,
if there are type errors that appear in

131
00:08:43.640 --> 00:08:49.016
declaration files within your node
modules folder, ignore those.

132
00:08:49.016 --> 00:08:53.898
And that may seem not so
harmful in the beginning, right.

133
00:08:53.898 --> 00:08:57.329
It's tempting when you see those those
like type checking errors in your node

134
00:08:57.329 --> 00:08:58.130
modules folder.

135
00:08:58.130 --> 00:09:01.673
It's tempting to just wanna turn this
on and say, well, if I turn this on,

136
00:09:01.673 --> 00:09:03.381
I won't get these errors anymore.

137
00:09:03.381 --> 00:09:07.405
But remember,
type checking is a holistic operation.

138
00:09:07.405 --> 00:09:11.660
You want the types in your code to work
very nicely with types in library code.

139
00:09:11.660 --> 00:09:14.847
In the fundamentals, and
intermediate TypeScript courses,

140
00:09:14.847 --> 00:09:17.805
we talked about different ways
of structuring your code.

141
00:09:17.805 --> 00:09:20.624
Can make errors appear
in different places.

142
00:09:20.624 --> 00:09:23.335
There are different ways of writing code.

143
00:09:23.335 --> 00:09:27.155
That sometimes it would make an error
like a type checking error pop up in

144
00:09:27.155 --> 00:09:28.565
the node modules folder.

145
00:09:28.565 --> 00:09:32.694
When really you need to adjust your
app code in order to make it work.

146
00:09:32.694 --> 00:09:37.313
So I tried to leave this set to false,

147
00:09:37.313 --> 00:09:42.980
I don't like skipLibCheck for that reason.

148
00:09:42.980 --> 00:09:47.371
I want there to be no compile errors
in this whole list of operation.

149
00:09:47.371 --> 00:09:50.536
Which includes MyTypes,
my dependencies types,

150
00:09:50.536 --> 00:09:54.518
all of that ends up being the code
that I ship to my users, right.

151
00:09:54.518 --> 00:09:58.538
So I tend to leave this set to false.

152
00:09:58.538 --> 00:10:02.106
I want no errors anywhere
if I can get away from it.

153
00:10:02.106 --> 00:10:02.896
You get away with it.

154
00:10:02.896 --> 00:10:05.148
I've never actually found
a need to turn this on.

155
00:10:05.148 --> 00:10:08.770
If your node modules types
are objecting to something,

156
00:10:08.770 --> 00:10:12.169
it could be a sign you're
using a dependency realm.

157
00:10:12.169 --> 00:10:15.697
One more section here that
we kinda skipped over.

158
00:10:15.697 --> 00:10:20.291
But I wanted to do this last cuz it's
kind of one of the more interesting ones,

159
00:10:20.291 --> 00:10:22.070
that type checking section.

160
00:10:22.070 --> 00:10:29.334
So this is where we're going to enable
some nice strong type checking.

161
00:10:29.334 --> 00:10:32.588
As I would if I were writing
a TypeScript library from scratch.

162
00:10:32.588 --> 00:10:34.409
This is not my starting point,

163
00:10:34.409 --> 00:10:38.202
if I'm trying to convert a JavaScript
code base to TypeScript.

164
00:10:38.202 --> 00:10:43.524
I start with a much less restrictive type
checking configuration in that case.

165
00:10:43.524 --> 00:10:48.129
But here, we're just gonna enable a couple
things that kind of make a lot of sense.

166
00:10:48.129 --> 00:10:53.057
So we'll enable no implicit and we'll
talk about each of these in detail and

167
00:10:53.057 --> 00:10:55.221
what they do in the next chapter.

168
00:10:55.221 --> 00:10:58.548
UseUnknownInCatchVariables we'll
turn that on.

169
00:10:58.548 --> 00:11:01.805
No unused locals and
parameters will turn that on.

170
00:11:04.823 --> 00:11:10.142
ExactOptionalPropertyTypes will
turn that on.

171
00:11:10.142 --> 00:11:13.133
And then noImplicitReturns turn that on.

172
00:11:13.133 --> 00:11:16.891
I leave this one off like no
fall through cases and switch.

173
00:11:16.891 --> 00:11:22.043
I think this is a taste thing
I would never judge anyone for

174
00:11:22.043 --> 00:11:26.778
preferring to say I don't
like fall through cases.

175
00:11:26.778 --> 00:11:30.811
And switch meaning like a case clause
where you don't have a break at

176
00:11:30.811 --> 00:11:31.674
the end of it.

177
00:11:31.674 --> 00:11:35.234
I consider that to be
kind of like a feature.

178
00:11:35.234 --> 00:11:37.134
Sometimes you can design things that way.

179
00:11:37.134 --> 00:11:40.013
Some might argue that.

180
00:11:40.013 --> 00:11:43.021
You really have to look at all of the case
clauses to make sure you understand

181
00:11:43.021 --> 00:11:43.798
what's going on.

182
00:11:43.798 --> 00:11:50.379
But this is up to taste as far as I'm
concerned noUncheckedIndexedAccess.

183
00:11:50.379 --> 00:11:56.077
NoImplicitOverride and
noPropertyAccessFromIndexSignature.

184
00:11:56.077 --> 00:12:02.355
I left some of these unchecked because we
could enable no implicit this as well.

185
00:12:02.355 --> 00:12:06.482
These things are included in strict.

186
00:12:06.482 --> 00:12:07.693
You could turn them on.

187
00:12:07.693 --> 00:12:10.859
It's not harmful but it's redundant.

188
00:12:10.859 --> 00:12:12.684
Strict covers those things.

189
00:12:12.684 --> 00:12:18.096
You notice how they're the words that
are the options starting with strict.

190
00:12:18.096 --> 00:12:22.945
It makes it easy to remember,
it's very rare for

191
00:12:22.945 --> 00:12:26.148
new things like this to appear.

192
00:12:26.148 --> 00:12:32.656
I think this one was one of the more
recent ones, which was TypeScript 2.8.

193
00:12:32.656 --> 00:12:37.319
That's like one of the last times
they added something in strict mode.

194
00:12:37.319 --> 00:12:40.605
So, like point being.

195
00:12:40.605 --> 00:12:45.394
If you enable this, it's like
a pretty stable set of things, and

196
00:12:45.394 --> 00:12:51.153
a lot of the new options end up being like
things you have to explicitly turn on.

197
00:12:51.153 --> 00:12:53.400
Always strict, this is not strict mode.

198
00:12:53.400 --> 00:12:56.963
This is JavaScript, use strict.

199
00:12:56.963 --> 00:13:02.367
But because of the type of modules we're
outputting, it's implicitly strict mode.

200
00:13:02.367 --> 00:13:06.383
There is no, we're saying ES 2022,

201
00:13:06.383 --> 00:13:12.366
like everything after ES 2015
must be using strict mode.

202
00:13:12.366 --> 00:13:14.870
You can't have classes unless
you're in strict mode.

203
00:13:14.870 --> 00:13:20.978
It's this turning this on would
mean you're writing some seriously,

204
00:13:20.978 --> 00:13:22.722
or disabling this.

205
00:13:22.722 --> 00:13:29.190
Would mean you're writing some
really old Javascript for IE 10.

206
00:13:29.190 --> 00:13:35.414
Let's add one more thing to
the bottom here, and it's include.

207
00:13:35.414 --> 00:13:39.908
And this describes the code that
we want to be type checked.

208
00:13:39.908 --> 00:13:46.005
So we'll add our src folder there cuz
that's where our source code is gonna be.

209
00:13:46.005 --> 00:13:47.731
We're gonna add one more file here.

210
00:13:52.165 --> 00:13:57.005
We're gonna, we have an ESLintConfig
that's gonna appear when we install

211
00:13:57.005 --> 00:13:59.737
our linter, and it's a JavaScript file.

212
00:13:59.737 --> 00:14:04.925
And adding it here,
because our ESLintConfig is gonna want to

213
00:14:04.925 --> 00:14:10.130
look at our TypeScript tsconfig,
we should include it here.

214
00:14:10.130 --> 00:14:14.453
And once we have the ESLintConfig in
place, I'll just, to show what happens,

215
00:14:14.453 --> 00:14:15.560
I'll delete this.

216
00:14:15.560 --> 00:14:20.406
And we'll see that it'll light up and
say, I'm a JavaScript file, and

217
00:14:20.406 --> 00:14:21.765
I should be linted.

218
00:14:21.765 --> 00:14:26.244
But I'm not in the js campaign.

