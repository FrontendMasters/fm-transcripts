WEBVTT

1
00:00:00.720 --> 00:00:03.030
All right, type acquisition.

2
00:00:03.030 --> 00:00:05.920
So this is an interesting concept where,

3
00:00:05.920 --> 00:00:08.980
how do we find the right types for
a library?

4
00:00:08.980 --> 00:00:11.446
We already dealt with this in one place,
do you remember?

5
00:00:11.446 --> 00:00:18.138
When we pointed our tests for the chat
standard library that we made, and

6
00:00:18.138 --> 00:00:23.660
we said, I want to use that
specific declaration file.

7
00:00:23.660 --> 00:00:29.650
So we were jumping in at the top
level of type acquisition.

8
00:00:29.650 --> 00:00:33.280
Top level meaning it's the first
place type script looks.

9
00:00:33.280 --> 00:00:36.499
It checks there first and
if it finds types,

10
00:00:36.499 --> 00:00:42.650
that match what it's looking for,
doesn't bother looking anywhere else.

11
00:00:42.650 --> 00:00:47.375
And it's nice and convenient that
there's sort of a very accessible place

12
00:00:47.375 --> 00:00:51.125
like a developer overridable
place where you can just say,

13
00:00:51.125 --> 00:00:55.475
don't look in the node modules folder,
don't look anywhere else,

14
00:00:55.475 --> 00:00:59.290
here's what I want you to use for
this thing.

15
00:00:59.290 --> 00:01:04.335
So if it doesn't find something in
your paths object in your tsconfig,

16
00:01:04.335 --> 00:01:06.340
it'll look at type roots.

17
00:01:06.340 --> 00:01:09.710
So this is another thing that you could
put if you wanted to in your tsconfig.

18
00:01:09.710 --> 00:01:18.180
You could do this, and you could provide
a bunch of different things in here.

19
00:01:18.180 --> 00:01:21.940
Copilot is spoiling my surprise here.

20
00:01:21.940 --> 00:01:27.300
The typeRoot that is in there by default
is in your node modules folder at types,

21
00:01:27.300 --> 00:01:29.220
so it's definitely typed.

22
00:01:29.220 --> 00:01:37.090
And this tells you why we can import
a module like prop types, right?

23
00:01:37.090 --> 00:01:41.240
That's a package that you use with
React sometimes or just React, right?

24
00:01:41.240 --> 00:01:45.140
You might wonder, like, how does
TypeScript find that apt types folder?

25
00:01:45.140 --> 00:01:50.200
Well, it treats it almost like
a root folder here, right?

26
00:01:50.200 --> 00:01:55.970
It treats at types like a root folder,
and then the sub folder within apt types.

27
00:01:55.970 --> 00:02:00.211
That's where it looks for the package name
like React, or React DOM, or jQuery, or

28
00:02:00.211 --> 00:02:01.800
whatever it is.

29
00:02:01.800 --> 00:02:04.050
You could add more
typeRoots if you wanted.

30
00:02:05.560 --> 00:02:09.852
And that would be another place that
TypeScript would look up to try to

31
00:02:09.852 --> 00:02:13.700
acquire the right type declarations
to match a given import.

32
00:02:13.700 --> 00:02:16.010
And this is just for types, right?

33
00:02:16.010 --> 00:02:19.747
This is not where we're
looking like node modules and

34
00:02:19.747 --> 00:02:25.400
node type module resolution, that's
still where we find the code to run.

35
00:02:25.400 --> 00:02:27.608
We're strictly talking about
finding type information.

36
00:02:31.429 --> 00:02:35.186
The next thing down is
explicit module declarations.

37
00:02:35.186 --> 00:02:40.707
So this, This would be like,

38
00:02:40.707 --> 00:02:44.565
in one of your TypeScript files
you have declare a module or

39
00:02:44.565 --> 00:02:47.810
in a declaration file you
have declared module.

40
00:02:50.330 --> 00:02:54.704
This is less common to see although we
looked at an example in the intermediate

41
00:02:54.704 --> 00:02:58.205
TypeScript course,
which I call the type registry pattern,

42
00:02:58.205 --> 00:03:00.446
which involved module declarations.

43
00:03:00.446 --> 00:03:02.830
But that is the third thing here.

44
00:03:02.830 --> 00:03:07.590
And then finally, I mean, this is really
a type root thing, but it'll look for

45
00:03:07.590 --> 00:03:13.390
custom type roots, and then finally it
falls back to the default type root here.

46
00:03:13.390 --> 00:03:20.870
If you want, you can use --traceResolution
when running TSC, and it will tell you.

47
00:03:22.110 --> 00:03:26.238
It'll print like almost debug information,
where it's looking for types and

48
00:03:26.238 --> 00:03:27.600
it didn't find it there.

49
00:03:27.600 --> 00:03:29.831
And so it's moving on to
this next place and like up,

50
00:03:29.831 --> 00:03:32.680
I found something here and
I'm gonna use these types.

51
00:03:32.680 --> 00:03:37.491
This is super helpful in cases
where you're not getting

52
00:03:37.491 --> 00:03:40.470
what you thought you would get.

53
00:03:40.470 --> 00:03:43.237
Like you have an import and
you're wondering,

54
00:03:43.237 --> 00:03:47.942
gosh, I think I have a declaration file
for this, or I thought I downloaded an app

55
00:03:47.942 --> 00:03:51.630
types package for this,
cuz it's kind of a black box, right?

56
00:03:51.630 --> 00:03:53.860
All you see is your imports not working.

57
00:03:53.860 --> 00:03:55.680
You thought you set everything up.

58
00:03:55.680 --> 00:04:00.400
This is super helpful and you can sort of,
I always pipe this to a file, but

59
00:04:00.400 --> 00:04:05.520
you can make sense of the output of
this command, and debug that way.

60
00:04:05.520 --> 00:04:08.800
There's also a prioritization
based on file types.

61
00:04:08.800 --> 00:04:13.410
So, if you have a TS and
a TSX file and a JS file and DTS file,

62
00:04:13.410 --> 00:04:18.025
all with the same file name,
just differing extensions,

63
00:04:18.025 --> 00:04:21.132
the TS file takes precedence over TSX,

64
00:04:21.132 --> 00:04:26.590
which takes precedence over JavaScript and
declaration file.

65
00:04:26.590 --> 00:04:30.670
These would be together, JS and
DTS together, right, a pair.

66
00:04:30.670 --> 00:04:34.225
Kind of like in our dist folder,
we have the index JS, index DTS.

67
00:04:36.511 --> 00:04:39.800
We talked a little bit about
Yarn's TypeScript plugin.

68
00:04:39.800 --> 00:04:42.374
I don't think I need to
talk about this again,

69
00:04:42.374 --> 00:04:45.550
except to say it downloads
the app type packages for you.

70
00:04:48.210 --> 00:04:50.778
&gt;&gt; Would you still separate
declaration files for

71
00:04:50.778 --> 00:04:53.420
internal tools that do
not have to be published?

72
00:04:55.450 --> 00:04:56.700
&gt;&gt; That's a good question.

73
00:04:59.510 --> 00:05:02.267
I'm gonna interpret that two ways,
answer it two ways.

74
00:05:02.267 --> 00:05:05.793
If it were like a CLI,
I might not worry about declaration files,

75
00:05:05.793 --> 00:05:07.970
there's no consumer of that.

76
00:05:07.970 --> 00:05:12.386
But if it's an internal tool,
that has some programmatic API.

77
00:05:12.386 --> 00:05:18.065
If you can consume it as a module,
you can import it into another JS file or

78
00:05:18.065 --> 00:05:20.780
a TS file, I published the types.

79
00:05:22.220 --> 00:05:23.500
Sorry, there's one exception.

80
00:05:24.890 --> 00:05:29.711
Sometimes, like if it's a library that
I'm in the middle of converting from

81
00:05:29.711 --> 00:05:31.491
JavaScript to TypeScript,

82
00:05:31.491 --> 00:05:36.450
I will abstain from publishing types
until I'm happy with the types.

83
00:05:36.450 --> 00:05:40.554
So in those cases I would like to cut
those out of the build before publishing,

84
00:05:40.554 --> 00:05:43.776
because I don't want to publish
types that advertise that,

85
00:05:43.776 --> 00:05:46.700
like you can pass a bunch of
anys into these functions.

86
00:05:47.880 --> 00:05:51.660
I believe that as soon as you
publish a declaration file,

87
00:05:51.660 --> 00:05:55.300
you are stating what the public
API of your library is.

88
00:05:56.390 --> 00:06:00.909
It's the stuff that's gonna be
popping up offering type of heads

89
00:06:00.909 --> 00:06:03.702
autocompletes in a user's editor, and

90
00:06:03.702 --> 00:06:09.387
I would rather provide nothing at all than
provide something that is misleading.

