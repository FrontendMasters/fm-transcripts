WEBVTT

1
00:00:00.000 --> 00:00:06.857
All right, now,
a little written content here.

2
00:00:06.857 --> 00:00:09.142
So let's talk about declaration files.

3
00:00:09.142 --> 00:00:11.965
These are those .d.ts files.

4
00:00:11.965 --> 00:00:15.985
They contain no runnable code,
no JavaScript.

5
00:00:15.985 --> 00:00:20.653
I'm just gonna pull one up so that we can
look at it, it'll be the one that we built

6
00:00:20.653 --> 00:00:25.979
together, chat-stdlib, dist.

7
00:00:25.979 --> 00:00:31.449
We'll go with this beta one, and
I'll get rid of that and this.

8
00:00:31.449 --> 00:00:33.725
So this is interesting, right?

9
00:00:33.725 --> 00:00:37.000
We're saying, there's this function thing.

10
00:00:37.000 --> 00:00:39.211
There's a function, but
there's no function body.

11
00:00:39.211 --> 00:00:43.647
In fact, I'd be yelled at,
I'm not allowed to have something in here,

12
00:00:43.647 --> 00:00:45.845
like console.log, cannot do it.

13
00:00:47.589 --> 00:00:51.549
This is an implementation.

14
00:00:51.549 --> 00:00:55.957
Implementations are not
allowed in ambient contexts.

15
00:00:55.957 --> 00:01:00.478
So we would call declaration
files ambient types,

16
00:01:00.478 --> 00:01:04.689
it just means it's just
the type information.

17
00:01:04.689 --> 00:01:06.400
Now, why this distinction?

18
00:01:06.400 --> 00:01:09.420
Why are we saying these are not
exactly the same thing or

19
00:01:09.420 --> 00:01:10.939
not always the same thing?

20
00:01:10.939 --> 00:01:15.327
You could go into this src file,
this ts file, and

21
00:01:15.327 --> 00:01:18.369
you could do something like this.

22
00:01:27.393 --> 00:01:29.040
No, this is easier.

23
00:01:39.549 --> 00:01:44.729
Just making something
interesting that proves,

24
00:01:44.729 --> 00:01:47.450
did I have to export here?

25
00:01:47.450 --> 00:01:55.361
Yep, okay, and now I could do window.my,
It's not gonna do that for me.

26
00:01:58.479 --> 00:02:00.410
Sorry, I have to do it a different way.

27
00:02:06.957 --> 00:02:11.840
So we're taking advantage of open
interfaces here, and we're saying,

28
00:02:11.840 --> 00:02:15.869
I wanna add something to window
called mySpecialProperty.

29
00:02:15.869 --> 00:02:19.306
So we've used an open interface
on window here, and look,

30
00:02:19.306 --> 00:02:22.689
I can hover over this, and
mySpecialProperty is in here.

31
00:02:22.689 --> 00:02:27.449
This here we would also
describe as an ambient context.

32
00:02:40.569 --> 00:02:44.529
So eslint is objecting before Typescript
even gets a chance to start working on

33
00:02:44.529 --> 00:02:45.309
these things.

34
00:02:45.309 --> 00:02:50.910
But these are also ambient types,
they're also declaration space.

35
00:02:50.910 --> 00:02:54.315
I'll call this implementation space,

36
00:02:54.315 --> 00:02:59.021
where you can actually have
assignments of variables,

37
00:02:59.021 --> 00:03:03.239
give them values,
they're not holding a value.

38
00:03:03.239 --> 00:03:06.525
Now, part of what's
confusing about this is,

39
00:03:06.525 --> 00:03:10.889
I'll leave this in common to that just so
you can find it later.

40
00:03:10.889 --> 00:03:15.853
Part of what's confusing is you can
end up with things in here that

41
00:03:15.853 --> 00:03:17.846
kind of look value-ish.

42
00:03:17.846 --> 00:03:19.484
You could do this.

43
00:03:24.799 --> 00:03:26.459
Something like that.

44
00:03:31.578 --> 00:03:32.898
Well, how about this?

45
00:03:39.863 --> 00:03:41.293
Am I allowed to do that?

46
00:03:43.283 --> 00:03:45.153
Okay, I can't do that either.

47
00:03:54.761 --> 00:03:58.602
Interesting, I could do it
with the namespace, but

48
00:03:58.602 --> 00:04:02.267
part of what takes a little
bit of getting used to is

49
00:04:02.267 --> 00:04:06.829
what you're allowed to do in
this space and what you're not.

50
00:04:06.829 --> 00:04:10.327
So you can have imports,
you can have exports.

51
00:04:10.327 --> 00:04:14.496
When you're declaring a class here,
it looks like you're declaring a class

52
00:04:14.496 --> 00:04:17.779
similar to if we were to look
at the source code here, right?

53
00:04:17.779 --> 00:04:22.347
We've still got class Deferred and
we've got all of these fields, and

54
00:04:22.347 --> 00:04:23.959
they look very similar.

55
00:04:23.959 --> 00:04:26.112
But you can have a constructor here,

56
00:04:26.112 --> 00:04:30.974
you're just simply defining that I have
a class, there's an interface stacked on

57
00:04:30.974 --> 00:04:35.992
top of it that represents an instance of
the class, it's just the type information.

58
00:04:39.500 --> 00:04:41.270
Sorry, I wanna try one more thing.

59
00:04:46.134 --> 00:04:49.729
That looks like an assignment, doesn't it?

60
00:04:49.729 --> 00:04:52.623
Sorry, this is what I was
trying to recall earlier.

61
00:04:52.623 --> 00:04:56.129
It's not, though,
it's just saying foo is of type 6,

62
00:04:56.129 --> 00:04:58.625
it's literally the same thing as this.

63
00:04:58.625 --> 00:05:03.749
You can just do things with literal
types that way for some reason.

64
00:05:03.749 --> 00:05:09.286
So you can't have statements,
only expressions.

65
00:05:09.286 --> 00:05:12.355
You can't have anything reassignable.

66
00:05:12.355 --> 00:05:13.779
I don't think you can do that.

67
00:05:13.779 --> 00:05:17.090
No, you can, was wrong there.

68
00:05:17.090 --> 00:05:24.339
And, One of the things you have to be
careful of, it's manually authoring these.

69
00:05:24.339 --> 00:05:27.400
Sometimes you have no other choice,
if you're working

70
00:05:27.400 --> 00:05:31.111
with a JavaScript library that has
no types associated with it yet,

71
00:05:31.111 --> 00:05:33.537
odds are you'll have
to write one of these.

72
00:05:33.537 --> 00:05:38.662
But it is far better to have one that's
sort of generated from TypeScript code,

73
00:05:38.662 --> 00:05:42.649
it just ensures that there's
parody between the two things.

74
00:05:42.649 --> 00:05:48.294
Speaking of manually written declaration
files being a tough thing to maintain,

75
00:05:48.294 --> 00:05:51.419
let's talk about community written types.

76
00:05:51.419 --> 00:05:54.475
So there's a git repo
called DefinitelyTyped.

77
00:05:54.475 --> 00:05:59.784
Okay, so here's DefinitelyTyped, and
let's look at this type's folder.

78
00:05:59.784 --> 00:06:03.100
I wonder whether GitHub
can handle this now.

79
00:06:03.100 --> 00:06:07.982
Sorry, it truncated it to 1000 files,
which it means

80
00:06:07.982 --> 00:06:13.479
folders in this context, and
it had to drop 7,723 folders.

81
00:06:13.479 --> 00:06:17.909
And if we look down here, let's see
if we can find something interesting.

82
00:06:17.909 --> 00:06:24.384
Alt, here's angular, anchor-js.

83
00:06:24.384 --> 00:06:27.344
There's a lot of different types here.

84
00:06:29.544 --> 00:06:37.064
Await-promises, autoprefixer, babel-core.

85
00:06:39.819 --> 00:06:43.840
Just looking for something that's gonna be
a little bit more familiar to everybody.

86
00:06:49.239 --> 00:06:52.099
&gt;&gt; Is this the repo when
you install @types?

87
00:06:52.099 --> 00:06:53.629
&gt;&gt; It is absolutely that repo.

88
00:06:53.629 --> 00:07:00.909
So let me go to this one, and then I'm
just gonna manually change the URL.

89
00:07:00.909 --> 00:07:02.689
We're gonna look at Reacts types.

90
00:07:02.689 --> 00:07:08.939
This is gonna be a little bit of,
gonna be scary.

91
00:07:08.939 --> 00:07:10.289
Not trying to jump scare anyone.

92
00:07:10.289 --> 00:07:11.859
So here's your warning.

93
00:07:11.859 --> 00:07:15.779
But if we look at these,
these are handwritten.

94
00:07:15.779 --> 00:07:20.539
And you can see here,
here's a namespace for React.

95
00:07:20.539 --> 00:07:22.782
Here's this type called ElementType.

96
00:07:22.782 --> 00:07:28.297
So here's some utility types that
they've built, a RefObject, a LegacyRef,

97
00:07:28.297 --> 00:07:34.680
ElementRef, ReactElement, right?

98
00:07:34.680 --> 00:07:37.045
There's some JSX-related types in here.

99
00:07:37.045 --> 00:07:42.916
These are meant to mirror the things
that you get from React.js,

100
00:07:42.916 --> 00:07:47.827
a React child that feels like
it's probably a member of

101
00:07:47.827 --> 00:07:52.329
the children object,
a fragment, a React node.

102
00:07:52.329 --> 00:07:55.340
Look at all these,
you can render a string or ReactElement.

103
00:07:55.340 --> 00:07:59.135
This is probably something
that you can spit out in JSX,

104
00:07:59.135 --> 00:08:02.223
something you could
return from an element.

105
00:08:02.223 --> 00:08:06.012
createFactory, so now we're getting into
functions that you can use in React.

106
00:08:06.012 --> 00:08:12.746
createElement, this is the way
you bootstrap your React app,

107
00:08:12.746 --> 00:08:17.459
but they're just function declarations.

108
00:08:17.459 --> 00:08:24.305
And this, if we hit Blame,
please don't make me a liar, React.

109
00:08:24.305 --> 00:08:29.049
But if this is most definitely typed
packages, it's written by tons and

110
00:08:29.049 --> 00:08:30.855
tons of different people.

111
00:08:30.855 --> 00:08:34.098
So you've got a bunch of
community contributors here,

112
00:08:34.098 --> 00:08:38.170
individually authoring different lines,
making different fixes.

113
00:08:38.170 --> 00:08:42.509
They're doing their best to try to keep
this lined up with the React library.

114
00:08:42.509 --> 00:08:46.749
When you have @types/react,
this is what you're getting.

115
00:08:46.749 --> 00:08:49.285
You're getting these declaration files,
and

116
00:08:49.285 --> 00:08:52.970
there's a lot of hard work that goes
into these to keep them lined up.

117
00:08:52.970 --> 00:08:57.207
So look here,
we've got even React v16, v17.

118
00:08:57.207 --> 00:08:59.238
V15 is in there.

119
00:08:59.238 --> 00:09:04.668
And if we look at their package.json,
they might even have types versions.

120
00:09:07.449 --> 00:09:09.914
Let's check that out if it's here,
maybe not.

121
00:09:11.599 --> 00:09:13.739
Owners, there it is.

122
00:09:13.739 --> 00:09:19.475
So here, this is a field you can
add to a package.json, that says,

123
00:09:19.475 --> 00:09:25.012
depending on which TypeScript
compiler version you're using,

124
00:09:25.012 --> 00:09:28.854
I have a different declaration file for
you.

125
00:09:28.854 --> 00:09:32.071
I can have a legacy file that works for
TypeScript 3,

126
00:09:32.071 --> 00:09:35.159
and a very modern one that works for
TypeScript 5.

127
00:09:35.159 --> 00:09:39.878
And this is a big important part of making
sure that this package here is gonna

128
00:09:39.878 --> 00:09:42.399
work for a wide range of people, right?

129
00:09:42.399 --> 00:09:44.170
You still need to get those bug fixes in.

130
00:09:44.170 --> 00:09:50.775
But it's very manual work,
where let's see if we look at V17,

131
00:09:50.775 --> 00:09:56.434
they might have a bunch of
different versions in there.

132
00:09:59.299 --> 00:10:02.347
They've structured this one
a little bit differently, but yeah,

133
00:10:02.347 --> 00:10:03.639
here's the ts5.0 ones.

134
00:10:03.639 --> 00:10:08.737
It's common to see in these
that they'll sort of import

135
00:10:08.737 --> 00:10:15.140
the legacy types as a starting point and
then add new stuff on top of it.

136
00:10:15.140 --> 00:10:18.825
So there's import React from ./,
where's the index?

137
00:10:18.825 --> 00:10:20.260
Do we just look at this?

138
00:10:22.213 --> 00:10:26.999
PropTypes, yeah,
these are in all likelihood importing.

139
00:10:26.999 --> 00:10:31.589
It looks like we're consuming it from
this library, from prop-types, but

140
00:10:31.589 --> 00:10:33.507
this is just types in this file.

141
00:10:33.507 --> 00:10:39.951
Where this is really coming from in
all likelihood is @types/prop-types,

142
00:10:39.951 --> 00:10:44.748
which is another folder in this project,
it's this one.

143
00:10:50.866 --> 00:10:55.739
So you're importing PropTypes, but
it's just the types you're dealing with

144
00:10:55.739 --> 00:10:59.169
cuz that's all that can be
in these declaration files.

145
00:10:59.169 --> 00:11:02.269
So why am I bothering to
tell you about these?

146
00:11:04.254 --> 00:11:11.099
Well, first off, it's a great project,
it's managed by the TypeScript core team.

147
00:11:11.099 --> 00:11:14.020
And when I say manage,
they built a lot of tooling

148
00:11:14.020 --> 00:11:17.663
around it to make sure that
things get published right away.

149
00:11:17.663 --> 00:11:22.447
And they even have a policy,
where if somebody submits

150
00:11:22.447 --> 00:11:27.647
a change to the types,
the people who are listed as owners,

151
00:11:27.647 --> 00:11:32.223
which is gonna be up at
the top of their index file.

152
00:11:32.223 --> 00:11:34.952
Maybe they have a different,
it's in the package.json now.

153
00:11:34.952 --> 00:11:37.573
Sorry, it's been a while
since I contributed to this.

154
00:11:37.573 --> 00:11:40.174
So if I submitted a change to types here,

155
00:11:40.174 --> 00:11:45.313
these three people would get mentioned
in a GitHub comment on the poll request.

156
00:11:45.313 --> 00:11:50.867
And they'd have a few days to come in and
either provide feedback saying,

157
00:11:50.867 --> 00:11:57.243
I want changes, or this looks good, but
it defaults to letting changes go through.

158
00:11:57.243 --> 00:12:00.956
It seems a little scary and
it's a little bit, but

159
00:12:00.956 --> 00:12:06.882
trust that the types that lots and lots of
people use have a long list of owners and

160
00:12:06.882 --> 00:12:10.434
they know how this works and
they'll respond.

161
00:12:10.434 --> 00:12:13.141
But it also means that
if you find a library,

162
00:12:13.141 --> 00:12:17.471
like type definitions that are abandoned,
you're not at a dead end.

163
00:12:17.471 --> 00:12:21.937
You can add yourself as an owner
if you want to take them over,

164
00:12:21.937 --> 00:12:25.540
and you can start to help
maintain these things.

165
00:12:25.540 --> 00:12:28.175
There's another challenge
around definitely typed, and

166
00:12:28.175 --> 00:12:29.499
it has to do with versioning.

167
00:12:29.499 --> 00:12:33.094
So if you look at the versions
of the @types packages,

168
00:12:33.094 --> 00:12:38.191
you may have noticed this, even today
as we were installing a couple of them.

169
00:12:38.191 --> 00:12:44.357
Version number of @types package matches
version number of the thing, the types

170
00:12:44.357 --> 00:12:50.093
describe, which makes it very easy to
know which thing to install, right?

171
00:12:50.093 --> 00:12:52.072
You want those numbers to line up.

172
00:12:52.072 --> 00:12:55.165
We would call that lockstep versioning,
right?

173
00:12:55.165 --> 00:12:59.769
A new patch release comes out in Facebook,
sorry, in React,

174
00:12:59.769 --> 00:13:05.094
@type/react releases another version
of the types to include that.

175
00:13:05.094 --> 00:13:08.548
But the thing is,
sometimes the types themselves break, or

176
00:13:08.548 --> 00:13:12.901
they introduce breakage, or they drop
support for old compiler versions.

177
00:13:12.901 --> 00:13:17.782
And my argument here is we end
up with more bits of information

178
00:13:17.782 --> 00:13:22.579
than you can capture in a semantic
versioning number here.

179
00:13:22.579 --> 00:13:27.669
You need to truly capture that in order
to really communicate risk, right?

180
00:13:27.669 --> 00:13:31.809
The types, there are bug fixes
that are specific to the types.

181
00:13:31.809 --> 00:13:37.034
And every time those are merged, a release
is automatically cut, a number ticks up.

182
00:13:37.034 --> 00:13:40.834
And so
one thing I'd suggest you be careful with,

183
00:13:40.834 --> 00:13:45.267
if you hit errors relating to
definitely typed packages,

184
00:13:45.267 --> 00:13:48.540
just understand that this is how it works.

185
00:13:48.540 --> 00:13:54.753
And that sometimes big changes to
those @types packages can happen.

186
00:13:54.753 --> 00:13:57.725
They'll drop support for
an older compiler version.

187
00:13:57.725 --> 00:14:00.452
But it'll look just
like a patch release or

188
00:14:00.452 --> 00:14:05.533
a middle-digit release because they
really prioritize lining up with version

189
00:14:05.533 --> 00:14:10.461
numbers of the library that they describe
over, communicating breaking and

190
00:14:10.461 --> 00:14:13.905
non-breaking changes
within the @types package.

191
00:14:13.905 --> 00:14:18.572
It's a hard problem to solve,
you'd need at least

192
00:14:18.572 --> 00:14:23.029
a five component number
to really communicate.

193
00:14:23.029 --> 00:14:26.432
It's like major of library,
minor of library,

194
00:14:26.432 --> 00:14:30.339
major of types, minor of types,
something like that.

