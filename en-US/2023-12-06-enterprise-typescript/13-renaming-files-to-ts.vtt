WEBVTT

1
00:00:00.240 --> 00:00:03.645
The next thing we're gonna do with
our chat project is rename all

2
00:00:03.645 --> 00:00:06.115
of the JavaScript files
to TypeScript files.

3
00:00:06.115 --> 00:00:08.280
A couple type errors are gonna pop up,

4
00:00:08.280 --> 00:00:11.470
this is sort of the next wave
of things we need to fix.

5
00:00:11.470 --> 00:00:14.935
We'll address those, we'll make a commit,
and then we'll move on.

6
00:00:14.935 --> 00:00:17.725
So I'm gonna close all my tabs here.

7
00:00:17.725 --> 00:00:20.544
The reason being,
the JS files are going to disappear.

8
00:00:20.544 --> 00:00:23.666
When you have tabs open with JS files and
you rename them with script

9
00:00:23.666 --> 00:00:26.733
like we're gonna run,
it's easy to accidentally hit Save, and

10
00:00:26.733 --> 00:00:30.885
then you've sort of got the JavaScript and
TypeScript, it's not great.

11
00:00:30.885 --> 00:00:38.130
So rather than ask you how
to do the renaming by hand,

12
00:00:38.130 --> 00:00:47.533
you can just run node
scripts/rename-to-ts.mjs, and Enter.

13
00:00:52.098 --> 00:00:56.574
Cool, this has renamed everything.

14
00:00:56.574 --> 00:00:57.677
Well, a lot of things.

15
00:01:01.161 --> 00:01:05.800
Actually, it hasn't even picked
up on all the changes yet.

16
00:01:05.800 --> 00:01:07.030
No, it has, good.

17
00:01:08.100 --> 00:01:11.297
I missed the little r here for,
[LAUGH] renamed.

18
00:01:11.297 --> 00:01:13.557
So we've got everything
in our data folder,

19
00:01:13.557 --> 00:01:16.834
we've got all of our React components,
they're TSX files now.

20
00:01:16.834 --> 00:01:20.330
Here's our utils folder,
which is sort of low level utilities.

21
00:01:20.330 --> 00:01:24.760
Look, even our tests have been renamed,
as well as the snapshots.

22
00:01:25.960 --> 00:01:27.980
And here's some more tests here.

23
00:01:27.980 --> 00:01:31.130
So I wanna make a Git commit right now.

24
00:01:31.130 --> 00:01:35.303
And the reason is, if we were to go and
start changing these files,

25
00:01:35.303 --> 00:01:39.849
there's a point where Git starts to
think that this is like the removal of

26
00:01:39.849 --> 00:01:43.700
the old file and
an addition of a totally new TS file.

27
00:01:43.700 --> 00:01:46.903
And I think there's value in
preserving Git history so

28
00:01:46.903 --> 00:01:51.580
that you can track history all the way
back to when it was written in JavaScript.

29
00:01:51.580 --> 00:01:55.520
This is another big important thing for
large-scale projects, right?

30
00:01:55.520 --> 00:01:59.161
You don't wanna make this change,
and then bugs start popping up.

31
00:01:59.161 --> 00:02:03.737
And maybe you wanna run like Git bisect to
try to track when the bug was introduced,

32
00:02:03.737 --> 00:02:06.190
but your Git history
is sort of disjointed,

33
00:02:06.190 --> 00:02:08.266
it's worth it to preserve history.

34
00:02:19.735 --> 00:02:23.366
Cool, and see all these nice
little rename things here?

35
00:02:23.366 --> 00:02:25.100
That's what you want.

36
00:02:25.100 --> 00:02:27.720
We're gonna make a commit,
and now we can do changes.

37
00:02:27.720 --> 00:02:32.691
But now, forever, Git will understand
that this was a shift over.

38
00:02:35.111 --> 00:02:37.529
There's one more change
that we need to make,

39
00:02:37.529 --> 00:02:40.014
we could have made it
before we made the commit.

40
00:02:40.014 --> 00:02:42.233
And that's that we have to
change the entry point.

41
00:02:42.233 --> 00:02:47.805
In the case of Parcel that I'm
using here to build this project,

42
00:02:47.805 --> 00:02:50.601
index.html is my entry point.

43
00:02:50.601 --> 00:02:54.320
And this is what we're gonna
need to change right here.

44
00:02:54.320 --> 00:02:55.305
That's a JS file.

45
00:02:56.996 --> 00:02:59.585
There's a TS file.

46
00:02:59.585 --> 00:03:02.056
And this should work.

47
00:03:04.756 --> 00:03:09.326
I have it a little different in the course
notes where I have type=text/javascript,

48
00:03:09.326 --> 00:03:12.091
but this should be fine,
just to leave it like this.

49
00:03:14.938 --> 00:03:18.220
And now that we've made that change,
just for fun,

50
00:03:18.220 --> 00:03:20.912
I'm gonna amend it to my previous commit.

51
00:03:27.489 --> 00:03:28.878
Cuz it kinda belongs there.

52
00:03:32.672 --> 00:03:34.895
Part of the JS to TS rename.

53
00:03:36.976 --> 00:03:44.478
Let's run yarn type check and yarn test.

54
00:03:44.478 --> 00:03:46.270
Type check and test.

55
00:03:46.270 --> 00:03:50.577
It's gonna run our Jesttests that are in
this repo for us, they were already there.

56
00:03:53.285 --> 00:03:55.725
Okay, we got a couple
of things popping up.

57
00:03:55.725 --> 00:03:59.370
So let's investigate these one by one.

58
00:03:59.370 --> 00:04:01.702
And again, I'm scanning through here and

59
00:04:01.702 --> 00:04:05.930
I wanna find the lowest level pieces
of code that I can start with first.

60
00:04:05.930 --> 00:04:10.410
I see a couple of things in the utils
folder and the data folder.

61
00:04:10.410 --> 00:04:12.354
In this project specifically,

62
00:04:12.354 --> 00:04:17.106
you all would know best in your respective
projects, but we all have a sense for

63
00:04:17.106 --> 00:04:21.644
what are like the low level, format
a date into a string kind of functions.

64
00:04:21.644 --> 00:04:24.539
And then React components are sort of
higher level where they're grabbing node

65
00:04:24.539 --> 00:04:26.916
modules, they're grabbing those
date formatting things, and

66
00:04:26.916 --> 00:04:28.315
they're putting them all together.

67
00:04:28.315 --> 00:04:30.317
So, let's start here.

68
00:04:30.317 --> 00:04:35.359
So we have one error here,
const d=new Deferred().

69
00:04:35.359 --> 00:04:39.768
Says it expected 1 argument but got 0.

70
00:04:39.768 --> 00:04:43.118
And it looks like we've had
a constructor argument here for

71
00:04:43.118 --> 00:04:45.266
deferred that we haven't provided.

72
00:04:45.266 --> 00:04:47.843
So let's take a look at deferred.

73
00:04:47.843 --> 00:04:52.765
Well, it turns out we're not
even using this description,

74
00:04:52.765 --> 00:04:55.283
we're not using it anywhere.

75
00:04:55.283 --> 00:05:00.298
But I'm gonna follow the practice
that I would advise you all follow,

76
00:05:00.298 --> 00:05:03.443
which is it's tempting to remove this, but

77
00:05:03.443 --> 00:05:07.871
we're trying to perturb this
project as little as possible.

78
00:05:07.871 --> 00:05:11.659
And so what we can do here is just say,
let's make it optional,

79
00:05:11.659 --> 00:05:14.160
even though it's unused.

80
00:05:14.160 --> 00:05:18.360
Let's pretend it might not be,
but let's make it optional.

81
00:05:18.360 --> 00:05:22.840
We're really trying to avoid changing
the resultant code that spits out,

82
00:05:22.840 --> 00:05:26.290
the JavaScript code that
comes out of this process.

83
00:05:26.290 --> 00:05:31.030
Anytime you do that,
you run the risk of introducing a bug.

84
00:05:31.030 --> 00:05:34.072
And it's not that we shouldn't fix this,
but

85
00:05:34.072 --> 00:05:37.896
it should be fixed separately
from this conversion step.

86
00:05:42.937 --> 00:05:44.306
Something like that.

87
00:05:44.306 --> 00:05:49.850
Now, you may notice, let's see,
look at that, see description: any.

88
00:05:51.030 --> 00:05:55.596
What we're seeing here is that, since
we've converted this to TypeScript now,

89
00:05:55.596 --> 00:05:59.010
this type information
from JSDoc is ignored.

90
00:05:59.010 --> 00:06:03.474
And it may seem like it would be useful
to, like still pay attention to it here,

91
00:06:03.474 --> 00:06:06.600
but imagine a world where we
have something like this.

92
00:06:08.620 --> 00:06:10.403
How do we reconcile that like,

93
00:06:10.403 --> 00:06:13.980
which type information should
TypeScript pay attention to?

94
00:06:15.520 --> 00:06:18.440
Sometimes the docs are built
based on this, right?

95
00:06:18.440 --> 00:06:23.207
So really, it's just saying, look, you
can define types right in the code now,

96
00:06:23.207 --> 00:06:25.760
that's where you should be doing it.

97
00:06:25.760 --> 00:06:29.548
So you'll see a couple occurrences
here where we're gonna

98
00:06:29.548 --> 00:06:31.980
have to just bring this into our code.

99
00:06:33.150 --> 00:06:37.180
And by the way, this type checked as
a JavaScript file before because this was

100
00:06:37.180 --> 00:06:39.350
optional with the square brackets here.

101
00:06:41.000 --> 00:06:45.288
It just failed to type check once we said
it's a mandatory argument you got to

102
00:06:45.288 --> 00:06:45.898
provide.

103
00:06:47.805 --> 00:06:49.136
Does everyone understand why?

104
00:06:49.136 --> 00:06:55.190
Do you understand the difference between
it being this, and it being optional?

105
00:06:56.340 --> 00:06:57.617
We could have done this.

106
00:06:59.832 --> 00:07:02.997
We're just obligated to
explicitly provide something.

107
00:07:02.997 --> 00:07:06.046
Undefined could be something we provide,
right?

108
00:07:06.046 --> 00:07:10.795
But I don't wanna change that
invocation of deferred either,

109
00:07:10.795 --> 00:07:14.746
I want this to become a string,
an optional string.

110
00:07:14.746 --> 00:07:17.357
And we can get rid of this
just to avoid confusion.

111
00:07:20.796 --> 00:07:22.562
Wow, my hotkey.

112
00:07:26.334 --> 00:07:29.818
I'm putting my fingers
all over the place here.

113
00:07:31.493 --> 00:07:39.087
Okay, sorry, we'll keep the word
description here, that's better.

114
00:07:39.087 --> 00:07:44.980
Okay, this file looks good now,
let's look at our api.ts, that looks good.

115
00:07:44.980 --> 00:07:48.310
I don't see any red errors
on the header here.

116
00:07:48.310 --> 00:07:52.118
Let's look at error.ts, seems good.

117
00:07:52.118 --> 00:07:54.620
Networking, seems good.

118
00:07:54.620 --> 00:07:57.878
All right, let's run our type check
again just to see how we're doing.

119
00:08:02.827 --> 00:08:07.834
Okay, so we're good on the utils folder,
now, let's look at data.

120
00:08:10.079 --> 00:08:14.468
So here, what's this happening here?

121
00:08:14.468 --> 00:08:18.800
API call, an argument for
init was not provided.

122
00:08:18.800 --> 00:08:23.825
Hey, it's another thing that TypeScript
no longer understands is optional,

123
00:08:23.825 --> 00:08:24.879
that's my bet.

124
00:08:27.030 --> 00:08:27.730
Let's go and look.

125
00:08:28.880 --> 00:08:31.280
Let's click into API call.

126
00:08:31.280 --> 00:08:34.813
Sure enough, this has square brackets.

127
00:08:34.813 --> 00:08:40.991
So I'm just gonna bring this type
in to the code, kinda like that.

128
00:08:40.991 --> 00:08:46.900
And then the string, put it for path.

129
00:08:46.900 --> 00:08:49.646
Let's see,
I'm gonna type check one more time.

130
00:08:49.646 --> 00:08:54.840
If we get lucky,
we might fix a lot of things.

131
00:08:54.840 --> 00:08:56.910
Three errors in two files.

132
00:08:56.910 --> 00:09:02.970
Okay, again, starting with the principle
of lower level file first,

133
00:09:02.970 --> 00:09:05.093
let's look at channel.

134
00:09:05.093 --> 00:09:07.918
All right, loading.

135
00:09:07.918 --> 00:09:12.177
It is the same error we were seeing
before, we solved it with JSDoc,

136
00:09:12.177 --> 00:09:14.067
JSDoc types are ignored now.

137
00:09:14.067 --> 00:09:19.575
We're just gonna have to bring
this into TypeScript world.

138
00:09:22.247 --> 00:09:23.509
Something like that.

139
00:09:23.509 --> 00:09:25.889
Get rid of the comment,
run it one more time.

140
00:09:27.460 --> 00:09:28.630
There are my tests running.

141
00:09:28.630 --> 00:09:33.116
The fact that I'm seeing my test run means
that the type checking passed, right,

142
00:09:33.116 --> 00:09:35.300
cuz that's this is the command.

143
00:09:35.300 --> 00:09:38.449
Yarn type check has to pass for
the test to run.

144
00:09:38.449 --> 00:09:44.047
And they ran, and of course,
there is a test for deferred, right?

145
00:09:44.047 --> 00:09:47.490
So here you can see we've got
a version that passes a string.

146
00:09:47.490 --> 00:09:50.500
There's probably one,
it always passed a string in.

147
00:09:50.500 --> 00:09:53.446
And so it seems like our tests
really wanted to pass this string.

148
00:09:53.446 --> 00:09:55.541
We didn't have to touch our tests.

149
00:09:55.541 --> 00:09:56.757
As far as we can tell,

150
00:09:56.757 --> 00:10:00.860
most of what we did was bring
JSDoc types into TypeScript code.

151
00:10:00.860 --> 00:10:07.320
One of the things we lost as we started to
ignore JSDoc is optionality of properties.

152
00:10:07.320 --> 00:10:12.465
And so, I would say this was a nice
disciplined conversion step where

153
00:10:12.465 --> 00:10:18.510
we didn't, it's very low risk that we
perturbed code more than we should have.

154
00:10:19.650 --> 00:10:21.680
This is where I would make a Git commit.

155
00:10:23.010 --> 00:10:24.020
We've completed step two.

156
00:10:24.020 --> 00:10:27.655
We've renamed our files to TS and
made the necessary adjustments.

