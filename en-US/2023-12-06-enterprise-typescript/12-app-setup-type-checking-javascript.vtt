WEBVTT

1
00:00:00.000 --> 00:00:07.907
So we're gonna be operating in your
workshop repo in the packages/chat folder.

2
00:00:07.907 --> 00:00:11.102
That's the Slack app.

3
00:00:11.102 --> 00:00:13.282
Let's go through the basics
of how to use this thing.

4
00:00:19.989 --> 00:00:21.166
I'm gonna make a quick commit.

5
00:00:41.707 --> 00:00:44.695
Just in case my computer melts or
something.

6
00:00:44.695 --> 00:00:47.676
I don't like holding on to code for
too long.

7
00:00:47.676 --> 00:00:54.936
All right, so we're in this chat folder,
so you should be able to run yarn dev.

8
00:00:54.936 --> 00:01:00.234
And then after some build happens,
may take longer than what you're seeing

9
00:01:00.234 --> 00:01:05.199
on my screen cuz I have some cached
build stuff that was already there for

10
00:01:05.199 --> 00:01:09.693
me, you should eventually see
serving on localhost 3000.

11
00:01:12.469 --> 00:01:15.737
And if you click that,
you should see a Slack app.

12
00:01:15.737 --> 00:01:18.481
So first, we need to get
TypeScript into our tool chain.

13
00:01:18.481 --> 00:01:22.775
And let's just check our devDependencies,
it might already be in here.

14
00:01:22.775 --> 00:01:23.678
It is, okay.

15
00:01:23.678 --> 00:01:28.147
So I took care, there is one copy of
TypeScript installed in this whole

16
00:01:28.147 --> 00:01:32.787
workspace, it's the same thing used
by all of the different packages.

17
00:01:32.787 --> 00:01:36.271
So I just put this here to make
sure that we got that benefit,

18
00:01:36.271 --> 00:01:38.861
we're using the same version everywhere.

19
00:01:38.861 --> 00:01:41.718
So let's go into the tsconfig for
this project.

20
00:01:47.258 --> 00:01:53.038
The thing we're gonna add here, so
note that I already have allowJS here,

21
00:01:53.038 --> 00:01:56.912
which allows JavaScript
to be part of my program.

22
00:01:56.912 --> 00:02:01.026
checkJS will say, I want to get errors,

23
00:02:01.026 --> 00:02:06.238
type errors in the JavaScript
files if they exist.

24
00:02:06.238 --> 00:02:09.271
If you say allowJS,
you could just import JavaScript files,

25
00:02:09.271 --> 00:02:11.381
you can use things from JavaScript files.

26
00:02:11.381 --> 00:02:13.946
But TypeScript won't look
inside those files and

27
00:02:13.946 --> 00:02:17.011
give you feedback about what works and
what doesn't work.

28
00:02:18.783 --> 00:02:21.877
So I would argue TypeScript's
already part of our tool chain, but

29
00:02:21.877 --> 00:02:24.101
it's not doing any
type-checking right now.

30
00:02:24.101 --> 00:02:29.140
In our src folder, it's a 100%
JavaScript in here, everything is JS.

31
00:02:30.696 --> 00:02:37.369
So let's add checkJs true, And hit Save.

32
00:02:39.661 --> 00:02:42.468
And we should see some errors.

33
00:02:42.468 --> 00:02:44.994
One way we can do this is by running,

34
00:02:44.994 --> 00:02:49.980
if we kill this server by hitting
Ctrl + C, we can run yarn typecheck.

35
00:02:49.980 --> 00:02:55.055
We could also open up some of these
files and we'd see some errors.

36
00:02:55.055 --> 00:02:58.856
But this is a command I wrote so
we could see this real easy.

37
00:02:58.856 --> 00:03:00.132
You might wonder,

38
00:03:00.132 --> 00:03:04.055
why do I have a typecheck script
instead of a build script?

39
00:03:04.055 --> 00:03:08.570
Well, this is an example of
a project where I have something

40
00:03:08.570 --> 00:03:11.747
called parcel doing the building for me.

41
00:03:11.747 --> 00:03:20.169
So the typecheck command runs tsc
directly with dash dash no emit.

42
00:03:20.169 --> 00:03:24.262
So it's doing all of the work that
would be necessary to do the compile,

43
00:03:24.262 --> 00:03:28.304
but it's not putting any files in
a dist folder or anything like that.

44
00:03:28.304 --> 00:03:31.203
Cuz I don't wanna build the whole project,

45
00:03:31.203 --> 00:03:34.657
there's Gatsby behind
the scenes doing some work.

46
00:03:34.657 --> 00:03:36.414
It takes a little while to build.

47
00:03:36.414 --> 00:03:40.134
It's useful to have a typecheck
function like this so

48
00:03:40.134 --> 00:03:43.531
that you can sort of quickly
swat at type errors.

49
00:03:43.531 --> 00:03:46.250
So we have 6 errors in 3 files,
let's take a look.

50
00:03:46.250 --> 00:03:50.507
And I'm just looking at these to see
what the names of the files are.

51
00:03:50.507 --> 00:03:55.739
I want to start from the deepest files,
the things that

52
00:03:55.739 --> 00:04:00.757
have the fewest imports,
and sort of work my way up.

53
00:04:00.757 --> 00:04:04.662
It's possible to do it in any order,
but if you do it from the top down,

54
00:04:04.662 --> 00:04:08.655
sometimes you end up having to loop
back to the top and fix other things.

55
00:04:08.655 --> 00:04:13.431
So I kind of just try to start
with leaf level dependencies,

56
00:04:13.431 --> 00:04:15.829
just in terms of the modules.

57
00:04:15.829 --> 00:04:18.563
If you made a paragraph of modules and
their imports,

58
00:04:18.563 --> 00:04:22.655
I wanna start with the things that are at
the very lowest level and work my way up.

59
00:04:22.655 --> 00:04:24.949
So let's start with channel.

60
00:04:24.949 --> 00:04:31.070
I left some hints in the notes, let's look
at those before we get too deep into this.

61
00:04:37.131 --> 00:04:39.979
Just so
we don't have to hunt around too much.

62
00:04:39.979 --> 00:04:42.839
First off,
maybe you put this on your clipboard.

63
00:04:42.839 --> 00:04:49.943
This is a React functional component
type that could have children,

64
00:04:49.943 --> 00:04:56.324
the children property,
with no specific type for props yet.

65
00:04:56.324 --> 00:05:00.419
So if we find things that
are objecting to children,

66
00:05:00.419 --> 00:05:04.057
this is a very,
very basic type to put in here.

67
00:05:04.057 --> 00:05:08.133
If you haven't taken the fundamentals or
intermediate course,

68
00:05:08.133 --> 00:05:13.106
these are type params between, sorry,
between these little angle brackets.

69
00:05:13.106 --> 00:05:15.934
But that's all this is,
it's a React functional component.

70
00:05:15.934 --> 00:05:18.502
And then here's a little
pattern around useState.

71
00:05:18.502 --> 00:05:21.294
Do you have question
about the first piece?

72
00:05:21.294 --> 00:05:27.571
&gt;&gt; It just looks like, is a combination
of JSDoc and TypeScript syntax, is that?

73
00:05:27.571 --> 00:05:28.586
&gt;&gt; It does look like that.

74
00:05:33.000 --> 00:05:39.347
If you took the intermediate course,
where we talked about declaration merging,

75
00:05:39.347 --> 00:05:44.253
where you can have a value and
a type piggybacking on each other.

76
00:05:44.253 --> 00:05:46.801
There are some types that are sort

77
00:05:46.801 --> 00:05:51.172
of arguably making their way
into our JavaScript files.

78
00:05:51.172 --> 00:05:56.197
React has types on it,
and now that TypeScript's

79
00:05:56.197 --> 00:06:00.034
part of our program, we can use this.

80
00:06:00.034 --> 00:06:03.986
Remember, we're inside
a comment context here.

81
00:06:03.986 --> 00:06:08.531
This isn't new code that JavaScript
needs to know how to run, but it's

82
00:06:08.531 --> 00:06:13.788
TypeScript that's looking at the types
here and using them to check out our code.

83
00:06:13.788 --> 00:06:18.757
So you can write a wide range of
TypeScript type information in this

84
00:06:18.757 --> 00:06:19.832
JSDoc stuff.

85
00:06:19.832 --> 00:06:24.038
You may be used to seeing a string here or
something like that, but

86
00:06:24.038 --> 00:06:26.808
you can put whatever
type you want in here.

87
00:06:26.808 --> 00:06:28.968
If you import something
that has an interface,

88
00:06:28.968 --> 00:06:30.649
you can use that interface in JSDoc.

89
00:06:30.649 --> 00:06:35.048
So the second thing I wanna point
out here is React.useState.

90
00:06:35.048 --> 00:06:38.574
So initially, useState, you'd begin with

91
00:06:38.574 --> 00:06:43.506
an undefined state if you don't
put something into useState.

92
00:06:43.506 --> 00:06:49.365
So we may need to fix that because React,
or this list and setList things,

93
00:06:49.365 --> 00:06:55.527
these are gonna start objecting to us
using the state, us working with this.

94
00:06:55.527 --> 00:06:58.902
This isn't an array, it's an undefined, so

95
00:06:58.902 --> 00:07:04.102
we'll need to do something there with
JSDoc in order to make that work.

96
00:07:04.102 --> 00:07:07.696
So with that, I'm gonna put this on
my clipboard, and let's get started.

97
00:07:09.789 --> 00:07:12.571
And here's that useState problem.

98
00:07:12.571 --> 00:07:16.789
So if we go up here to
the top of Channel.jsx,

99
00:07:16.789 --> 00:07:20.791
you can see we don't
get a type error here.

100
00:07:20.791 --> 00:07:26.925
We got it lower down, saying,
map does not exist on never.

101
00:07:26.925 --> 00:07:31.725
Never just means this has been narrowed to
the point where TypeScript says this is

102
00:07:31.725 --> 00:07:36.405
an impossible value, you shouldn't even
be able to get to this piece of code.

103
00:07:36.405 --> 00:07:42.052
And part of that is because
messages starts out as undefined,

104
00:07:42.052 --> 00:07:44.881
which is always a falsy value.

105
00:07:44.881 --> 00:07:49.752
And look at this, we have a little
thing that says, if it's falsy,

106
00:07:49.752 --> 00:07:52.662
anything falsy, we're gonna return.

107
00:07:52.662 --> 00:07:55.309
And so our TypeScript's wondering like,

108
00:07:55.309 --> 00:08:00.393
what could you possibly find useful about
referring to messages below line 19?

109
00:08:00.393 --> 00:08:05.949
You've determined that you should
always exit if the types are right.

110
00:08:05.949 --> 00:08:09.295
If it's really undefined,
you should kick out of the function here.

111
00:08:09.295 --> 00:08:13.125
So why are you trying to reach for
a length property here?

112
00:08:13.125 --> 00:08:16.996
There should be no messages
happening at that point.

113
00:08:16.996 --> 00:08:20.556
We're gonna need to make
a little adjustment here, and

114
00:08:20.556 --> 00:08:24.202
what I'm gonna do is I'm gonna
create an initial value.

115
00:08:28.562 --> 00:08:32.925
And you could decide
what you wanna do here.

116
00:08:32.925 --> 00:08:35.100
Let's start with this.

117
00:08:35.100 --> 00:08:38.704
You could start it as null or
undefined or even an empty array, but

118
00:08:38.704 --> 00:08:40.021
here's what we can do.

119
00:08:40.021 --> 00:08:48.037
type, any or null.

120
00:08:48.037 --> 00:08:50.049
Let's check out this thing.

121
00:08:50.049 --> 00:08:54.374
Hey, it's an array of anys,
which could potentially be null.

122
00:08:54.374 --> 00:08:59.229
Anyone have an idea of why we're not
seeing the null piece over here?

123
00:09:02.730 --> 00:09:03.701
It's kind of odd.

124
00:09:03.701 --> 00:09:09.678
Let's delete the any array,
let's see if it maintains the null.

125
00:09:09.678 --> 00:09:11.177
Well, it's good there.

126
00:09:17.404 --> 00:09:18.559
What if we did this?

127
00:09:24.709 --> 00:09:28.517
It's like 49 is a subset of numbers,
so we may as well just say,

128
00:09:28.517 --> 00:09:32.284
it's like this value can be any number,
but it can also be 49.

129
00:09:32.284 --> 00:09:38.870
Well, that's included in number,
we don't need to say the 49 at this point.

130
00:09:38.870 --> 00:09:43.191
So what's happening here is we
have strictNullChecks turned off.

131
00:09:43.191 --> 00:09:46.467
Null is an allowed value in any type.

132
00:09:46.467 --> 00:09:50.729
And so it's saying, all right,
you gave me an array, any array,

133
00:09:50.729 --> 00:09:52.798
an array containing anything.

134
00:09:52.798 --> 00:09:59.828
And because null can be part of all types,
that's just in any array.

135
00:09:59.828 --> 00:10:04.975
Null is already in there, just like
42 is already in the number, right?

136
00:10:04.975 --> 00:10:06.996
That's what we're seeing here.

137
00:10:06.996 --> 00:10:11.276
I'll leave it this way, cuz eventually,
we'll turn that flag on, and

138
00:10:11.276 --> 00:10:15.575
then there will be a distinction here
between is it an array or is it null?

139
00:10:15.575 --> 00:10:17.216
We're gonna pass this into useState.

140
00:10:19.496 --> 00:10:22.665
And here's our messages value here.

141
00:10:22.665 --> 00:10:24.850
We're getting nothing
yelling at us about length.

142
00:10:24.850 --> 00:10:27.971
We're getting nothing yelling
at us about map down here.

143
00:10:27.971 --> 00:10:29.940
So we've addressed that piece, but

144
00:10:29.940 --> 00:10:32.806
I see that we're having
problems with loading here.

145
00:10:32.806 --> 00:10:37.990
Property children is missing in,
then it looks like kind of some

146
00:10:37.990 --> 00:10:44.618
representation of the props I'm passing
in here, if you've used React before.

147
00:10:44.618 --> 00:10:47.188
It's missing,
which is required in this other type.

148
00:10:47.188 --> 00:10:53.145
So let's go into Loading, and
it turns out we have children here, right?

149
00:10:53.145 --> 00:10:58.127
And what we can do is just add
the thing that's on our clipboard,

150
00:10:58.127 --> 00:11:02.293
which it read saying,
React.PropsWithChildren.

151
00:11:02.293 --> 00:11:06.852
Children, it's gonna be
present on this type.

152
00:11:09.799 --> 00:11:11.093
Interesting that it's not.

153
00:11:14.772 --> 00:11:20.153
This should be enough to make it work, but
that's not really the type I passed in.

154
00:11:20.153 --> 00:11:22.613
Maybe PropsWithChildren defaults to any,
who knows.

155
00:11:24.634 --> 00:11:27.220
All right, so
no more errors in Channel that I can see.

156
00:11:27.220 --> 00:11:29.368
Let's run typecheck again,
see where we're at.

157
00:11:33.225 --> 00:11:36.787
I'll open up this one, we haven't
touched it, so this is probably up.

158
00:11:36.787 --> 00:11:41.507
I bet it was the loading problem
popping up here yet again.

159
00:11:41.507 --> 00:11:42.935
1 error in 1 file.

160
00:11:42.935 --> 00:11:46.458
Okay, what do we got here?

161
00:11:46.458 --> 00:11:51.161
Man, in our JavaScript code,
we had a really troubling error,

162
00:11:51.161 --> 00:11:55.354
where we tried to get a DOM
element with getElementById.

163
00:11:55.354 --> 00:11:59.778
And then we compared it to false to see
if the element's present or not, and

164
00:11:59.778 --> 00:12:01.546
that's not how we do things.

165
00:12:01.546 --> 00:12:07.572
We gotta say, Oops,
that was a double if, though.

166
00:12:11.403 --> 00:12:13.154
That's a much better check there.

167
00:12:13.154 --> 00:12:18.647
So this is an example of something
that was tolerated with allowJS but

168
00:12:18.647 --> 00:12:23.297
it wasn't picked up until we
had real typechecking here.

169
00:12:23.297 --> 00:12:25.930
Now, we should be able to typecheck.

170
00:12:27.894 --> 00:12:32.162
We can run our app after these passes and
make sure that it actually works.

171
00:12:35.074 --> 00:12:37.159
It's running on 3000.

172
00:12:39.244 --> 00:12:42.717
Refresh, there it is, all good.

173
00:12:42.717 --> 00:12:45.294
So we've completed step one.

174
00:12:45.294 --> 00:12:49.093
React is now typechecking things,
it's typechecking our JavaScript.

175
00:12:49.093 --> 00:12:52.585
A lot of what I'm benefiting
from is things like this, right?

176
00:12:52.585 --> 00:12:56.761
And if I hover over these,
you'll recognize these as interfaces and

177
00:12:56.761 --> 00:12:57.701
type aliases.

178
00:12:57.701 --> 00:13:04.852
They're part of the fetch API, and so
I have access to them in this file.

179
00:13:04.852 --> 00:13:08.086
This is how you denote
an optional property here,

180
00:13:08.086 --> 00:13:11.251
although I'm not sure it's, there it is.

181
00:13:11.251 --> 00:13:14.213
See, look, look at init with
the question mark after it.

182
00:13:14.213 --> 00:13:18.623
Square brackets means optional in JSDoc.

183
00:13:18.623 --> 00:13:25.890
So even if maybe your team's not ready
to fully commit to using TypeScript,

184
00:13:25.890 --> 00:13:30.328
you can get a lot of
value out of js.comments.

185
00:13:30.328 --> 00:13:33.339
And it lets you sort of
hold your ground and

186
00:13:33.339 --> 00:13:39.121
get to a closer place where enabling
TypeScript using TS files would be easier.

