WEBVTT

1
00:00:00.150 --> 00:00:02.290
With the previous section,
you should have this setup.

2
00:00:02.290 --> 00:00:03.690
Hopefully everyone has this setup.

3
00:00:03.690 --> 00:00:07.905
So now we're gonna need to do the exact
same thing to trunk, except for

4
00:00:07.905 --> 00:00:09.550
we want to have D and E.

5
00:00:09.550 --> 00:00:12.570
This time I do want you
to edit the README file.

6
00:00:12.570 --> 00:00:16.257
The README file will contain
three changes now A, D, and E,

7
00:00:16.257 --> 00:00:20.552
then we'll have a second file called
second.md that's only on foo.

8
00:00:20.552 --> 00:00:23.923
So, to be able to make these changes,
you first have to check out trunk.

9
00:00:25.193 --> 00:00:28.413
Now you need to make these
changes one at a time onto trunk.

10
00:00:28.413 --> 00:00:32.944
So I'll use the identical process here,
I'll do D and

11
00:00:32.944 --> 00:00:36.391
this is gonna go to README, I will add it,

12
00:00:36.391 --> 00:00:41.627
I'll commit it with the message D,
very important to do that.

13
00:00:41.627 --> 00:00:46.723
I will now add the next commit which
is gonna be E, add it to README,

14
00:00:46.723 --> 00:00:51.451
stage it, and
then commit it with the same message.

15
00:00:51.451 --> 00:00:55.528
So now if I were to do a git log,
I'll do one line this time,

16
00:00:55.528 --> 00:00:59.715
you will see trunk points to E,
which has D and A in the past.

17
00:00:59.715 --> 00:01:03.314
Did you know you can use Git
log with the branch name?

18
00:01:03.314 --> 00:01:06.664
So I can do foo and you'll see foo CBA.

19
00:01:06.664 --> 00:01:09.124
Perfect.
So we have these two setups now.

20
00:01:09.124 --> 00:01:11.774
I can see trunk is correct,
I can see foo is correct.

21
00:01:11.774 --> 00:01:14.074
And I have this setup right here.

22
00:01:14.074 --> 00:01:16.654
So now it's time to merge
these two together.

23
00:01:17.764 --> 00:01:20.378
There's actually two
different ways you can do it.

24
00:01:20.378 --> 00:01:21.518
There's merge and there's rebase.

25
00:01:21.518 --> 00:01:25.578
We'll go over rebase at some point, but
we're gonna start first with merge.

26
00:01:25.578 --> 00:01:29.698
Now, remember, a commit is just a set
of changes in the entire code base at

27
00:01:29.698 --> 00:01:32.138
a specific point in time.

28
00:01:32.138 --> 00:01:36.197
And if you have work on one branch and
you need to get it over to another branch,

29
00:01:36.197 --> 00:01:37.518
we're gonna use merge.

30
00:01:37.518 --> 00:01:40.186
Now, the thing about merge
that's a little bit confusing,

31
00:01:40.186 --> 00:01:43.546
is that when you use merge,
you can have kinda two different outcomes.

32
00:01:43.546 --> 00:01:46.966
You can have one that has a merge commit,
and one that doesn't have a merge commit.

33
00:01:46.966 --> 00:01:50.431
And you've probably experienced this where
sometimes you merge and you have to input

34
00:01:50.431 --> 00:01:53.576
a message and then sometimes you merge and
you don't have to input a message.

35
00:01:53.576 --> 00:01:57.456
And there's a very specific reason why,
because it depends on your history.

36
00:01:57.456 --> 00:01:58.876
We'll go over that in just a little bit.

37
00:01:58.876 --> 00:02:01.689
We'll create the two
situations which exist.

38
00:02:01.689 --> 00:02:03.240
So what is a merge?

39
00:02:03.240 --> 00:02:06.013
A merge is just attempting to
combine two histories that may or

40
00:02:06.013 --> 00:02:07.500
may not have diverged.

41
00:02:07.500 --> 00:02:09.660
Diverging means like how we set it up.

42
00:02:09.660 --> 00:02:13.952
A is in the past, and we both share A,
but there could be zero or

43
00:02:13.952 --> 00:02:17.850
more commits in both branches
that cause us to diverge.

44
00:02:19.610 --> 00:02:24.289
Now, whenever you are merging, git uses
something called the best common ancestor,

45
00:02:24.289 --> 00:02:27.019
which is gonna be
the first in common commit.

46
00:02:27.019 --> 00:02:30.759
So for us, we have ABC and we have ADE.

47
00:02:30.759 --> 00:02:32.619
A is the best common ancestor.

48
00:02:32.619 --> 00:02:35.452
In the docs, you'll often see it's
called the merge base, and so

49
00:02:35.452 --> 00:02:37.739
really it's just the first
thing that's in common.

50
00:02:37.739 --> 00:02:41.358
So if you were to walk up the tree, if you
were to think about you having to write

51
00:02:41.358 --> 00:02:43.977
this algorithm,
you literally start at each commit and

52
00:02:43.977 --> 00:02:47.003
you just keep on walking the parents
with a hash map, by the way.

53
00:02:47.003 --> 00:02:49.203
You'd wanna use a hash map here,
unironically.

54
00:02:49.203 --> 00:02:53.004
You'd use a hash map to contain, or really
a set, to contain all the things you've

55
00:02:53.004 --> 00:02:56.173
seen up to this point, all the commits
you've seen up to this point.

56
00:02:56.173 --> 00:02:59.416
And the first time you have
something that is in common,

57
00:02:59.416 --> 00:03:02.448
you've just found
the best common ancestor.

58
00:03:02.448 --> 00:03:03.878
Funny enough, it's always a hash map.

59
00:03:03.878 --> 00:03:05.688
I don't know why, but it just always is.

60
00:03:05.688 --> 00:03:10.490
Anyways, Git then takes these two commits
that you have, checks out the merge

61
00:03:10.490 --> 00:03:15.437
base or the best common ancestor, then
plays those commits on top of it, creates

62
00:03:15.437 --> 00:03:21.164
a new commit called a merge commit, and
that will actually have two parents.

63
00:03:21.164 --> 00:03:25.586
You'll have one parent from one branch,
and one parent from another branch,

64
00:03:25.586 --> 00:03:27.134
and that is a merge commit.

65
00:03:27.134 --> 00:03:30.959
And so this happens, that's what you'll
get a message cuz you have two different

66
00:03:30.959 --> 00:03:33.594
diverging branches, so we'll go over that.

67
00:03:33.594 --> 00:03:34.304
Here we go.

68
00:03:34.304 --> 00:03:35.564
All right, how to merge very, very easy.

69
00:03:35.564 --> 00:03:38.714
You have a target branch,
which is the branch you are on and

70
00:03:38.714 --> 00:03:41.799
you have a source branch,
the one you wish to merge with,

71
00:03:41.799 --> 00:03:45.675
and the source branch is gonna be
the one that you provide the name.

72
00:03:45.675 --> 00:03:46.715
This is how I think about it.

73
00:03:46.715 --> 00:03:50.225
At least I think this is probably
the the easiest way to think of it.

74
00:03:50.225 --> 00:03:52.975
And so you'll do git merge
the branch you wish to bring onto

75
00:03:52.975 --> 00:03:54.445
the one you're currently on.

76
00:03:55.855 --> 00:03:56.845
So let's do it.

77
00:03:56.845 --> 00:03:59.292
Now, let's merge foo onto trunk.

78
00:03:59.292 --> 00:04:03.143
But remember we don't want to
ruin our current trunk state, so

79
00:04:03.143 --> 00:04:06.789
I want you to check out a branch
called trunk-merge-foo.

80
00:04:09.285 --> 00:04:15.619
So I'm gonna go get check out,
trunk-merge-foo.

81
00:04:15.619 --> 00:04:16.189
Have my new branch.

82
00:04:16.189 --> 00:04:20.536
Remember dash v just creates a new branch,
if it doesn't exist.

83
00:04:20.536 --> 00:04:21.459
Awesome.

84
00:04:21.459 --> 00:04:23.609
So now I'm gonna go git-merge-foo.

85
00:04:25.029 --> 00:04:28.021
There we go.
We're presented this menu saying, hey,

86
00:04:28.021 --> 00:04:30.719
we need you to merge this together.

87
00:04:30.719 --> 00:04:32.389
We want you to add a commit message.

88
00:04:32.389 --> 00:04:35.949
It's been auto merged for you, but
we still need a commit message.

89
00:04:37.149 --> 00:04:42.109
So remember a commit is a series of
changes, that represents the entire state

90
00:04:42.109 --> 00:04:46.226
of the repo, plus an author plus
a message and time as well.

91
00:04:46.226 --> 00:04:49.556
You probably see something like
this merged made by ORT strategy.

92
00:04:50.886 --> 00:04:51.916
That's relatively new.

93
00:04:51.916 --> 00:04:55.281
I think at one point it was, it used to
say like a three-way commit strategy, and

94
00:04:55.281 --> 00:04:57.026
now it's changed into the ORT strategy.

95
00:04:57.026 --> 00:04:58.686
I don't know when that change happened.

96
00:04:58.686 --> 00:04:59.875
I don't know what ORT stands for.

97
00:05:01.435 --> 00:05:03.455
I should have probably read that,
but I just didn't.

98
00:05:03.455 --> 00:05:06.889
I know I read it up on what was
different about it, but well,

99
00:05:06.889 --> 00:05:10.975
here we are, the old ORT strategy,
the one we're all familiar with.

100
00:05:10.975 --> 00:05:12.805
It's practically like a Hashmap.

101
00:05:12.805 --> 00:05:15.865
All right, so when we're done,
I want you to use git.log.

102
00:05:15.865 --> 00:05:19.314
So everyone that has just merged,
use git.log and see what happens.

103
00:05:19.314 --> 00:05:28.081
So I'm gonna go scroll down here And
I also want you to use the term parents.

104
00:05:28.081 --> 00:05:30.386
When you do git.log, or git.log.

105
00:05:30.386 --> 00:05:32.811
When you do git log,
I want you to add dash dash parents.

106
00:05:32.811 --> 00:05:36.401
So let's show the parents
commits along with everything.

107
00:05:36.401 --> 00:05:41.296
So I'm gonna go get log,
one line, graph parents.

108
00:05:43.787 --> 00:05:49.927
So you can see right here
the merge commit has two parents.

109
00:05:49.927 --> 00:05:52.612
If you look at this ID, the SHA,

110
00:05:52.612 --> 00:05:58.396
you'll realize this is trunk where
trunk is currently pointing to.

111
00:05:59.529 --> 00:06:03.469
When you look at this one, this is
where foo is currently pointing to.

112
00:06:03.469 --> 00:06:04.603
This is C.

113
00:06:04.603 --> 00:06:08.839
This is E.

114
00:06:08.839 --> 00:06:10.112
And then now with the graph,

115
00:06:10.112 --> 00:06:13.309
it's able to draw this nice graph
because it has all that information.

116
00:06:13.309 --> 00:06:16.951
It's able to walk back the graph and
be able to display it for you so

117
00:06:16.951 --> 00:06:19.614
you can actually see in
line what is happening.

118
00:06:19.614 --> 00:06:20.456
So there you go.

119
00:06:20.456 --> 00:06:21.406
That's pretty neat, right?

120
00:06:21.406 --> 00:06:24.204
By the way, log totally underrated,
super cool.

121
00:06:24.204 --> 00:06:27.296
Super cool utility to kinda
know some of the things to use.

122
00:06:28.326 --> 00:06:30.022
So there we go.
We can see that it happened,

123
00:06:30.022 --> 00:06:32.336
we can see it in the past, fantastic.

124
00:06:32.336 --> 00:06:36.636
We already read those lines,
so we'll just get past it.

125
00:06:36.636 --> 00:06:39.338
All right, now I want you to
create the following git setup.

126
00:06:39.338 --> 00:06:43.857
I want you to check out trunk,
then I want you to check out a new

127
00:06:43.857 --> 00:06:48.302
branch called Bar and
I want you to add two commits, x and y.

128
00:06:48.302 --> 00:06:52.147
And x and y please put
the changes into a bar.md file or

129
00:06:52.147 --> 00:06:55.778
just some other file that's not README.

130
00:06:55.778 --> 00:06:56.762
I used bar.md.

131
00:07:00.099 --> 00:07:01.313
So I'll do it with you.

132
00:07:01.313 --> 00:07:07.819
Get checkout trunk,
get checkout, dash b bar.

133
00:07:07.819 --> 00:07:11.898
I'm gonna echo in x into bar.md.

134
00:07:11.898 --> 00:07:15.248
I'm gonna add it, I'm gonna commit it.

135
00:07:15.248 --> 00:07:19.843
And I'm gonna do it again with y.

136
00:07:22.348 --> 00:07:24.796
Anyway, so
we've now created this right here.

137
00:07:24.796 --> 00:07:26.216
It's pretty straightforward.

138
00:07:26.216 --> 00:07:30.056
All you have to do is just check out bar,
add the two commits.

139
00:07:30.056 --> 00:07:33.906
This is almost identical to what I just
got done doing on the screen, pretty easy.

140
00:07:33.906 --> 00:07:35.306
So we should now have
the exact same thing.

141
00:07:35.306 --> 00:07:38.196
We should be able to use git log to
see that we've done this correctly.

142
00:07:38.196 --> 00:07:40.575
So I'll do it right now and
we'll use the exact same thing.

143
00:07:40.575 --> 00:07:43.705
Get log that we're always using with
one line and we can erase parents.

144
00:07:43.705 --> 00:07:48.111
You don't really need to know parents,
but you can see here,

145
00:07:48.111 --> 00:07:49.985
bar is at Y, trunk is at E.

146
00:07:51.025 --> 00:07:54.891
Can you say anything that's unique about
this situation that wasn't unique in Foo,

147
00:07:54.891 --> 00:07:56.835
or that was different in Foo, shall I say?

148
00:07:58.215 --> 00:08:01.312
What's different between this setup
versus what was done with Foo and Trunk.

149
00:08:02.322 --> 00:08:05.572
Foo and trunk both diverged.

150
00:08:07.502 --> 00:08:12.029
In this situation,
bar is the only one that has diverged.

151
00:08:12.029 --> 00:08:15.682
It's best common ancestor
is the tip of trunk.

152
00:08:17.882 --> 00:08:22.414
It's very important thing to remember,
or to observe, shall we say.

153
00:08:22.414 --> 00:08:25.674
So now let's merge bar onto trunk.

154
00:08:25.674 --> 00:08:26.994
So do the exact same thing.

155
00:08:26.994 --> 00:08:30.415
And this time we do not create a separate
branch, just checkout trunk and

156
00:08:30.415 --> 00:08:32.274
merge bar onto it.

157
00:08:32.274 --> 00:08:35.601
So I'm go go get checkout trunk,
get merge bar.

158
00:08:39.507 --> 00:08:42.829
And you'll notice this time
there's no commit message.

159
00:08:42.829 --> 00:08:43.939
Why is there no commit message?

160
00:08:45.419 --> 00:08:51.629
Again, the best common ancestor was the
tip of the branch you were merging onto.

161
00:08:51.629 --> 00:08:57.029
Which means that it can just take
the commits and just update the pointer.

162
00:08:57.029 --> 00:09:00.261
That's all, it doesn't have to do any
sort of merging, it already works,

163
00:09:00.261 --> 00:09:01.633
you've already resolved any.

164
00:09:01.633 --> 00:09:04.746
Conflict, it can just simply
fast forward the merge.

165
00:09:04.746 --> 00:09:08.340
So you'll often see in the documentation
where it says ff-merge,

166
00:09:08.340 --> 00:09:11.871
it literally means you have a linear
history with no divergence and

167
00:09:11.871 --> 00:09:15.102
you can just simply take the commits and
update the pointer.

