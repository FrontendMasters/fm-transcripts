WEBVTT

1
00:00:00.000 --> 00:00:05.562
I will now do this, so I'm gonna go like
this, git cat file -p and print it out.

2
00:00:05.562 --> 00:00:07.183
Look at this, it has a tree.

3
00:00:07.183 --> 00:00:08.280
Well, what's a tree?

4
00:00:08.280 --> 00:00:11.674
It has the author,
it has the committer, it has the time.

5
00:00:11.674 --> 00:00:13.781
It has, I don't know, 0600 on it.

6
00:00:13.781 --> 00:00:16.721
It has my friendly message
involved right here.

7
00:00:16.721 --> 00:00:18.128
Where's our commit though?

8
00:00:18.128 --> 00:00:19.639
This doesn't tell me anything.

9
00:00:19.639 --> 00:00:23.051
So there's another SHA here, so
I'm just gonna grab that SHA,

10
00:00:23.051 --> 00:00:25.337
whoopsies, and I'm gonna just put it in.

11
00:00:25.337 --> 00:00:27.399
Look at this.

12
00:00:27.399 --> 00:00:32.556
Again, something that looks like
file permissions, blob, another SHA,

13
00:00:32.556 --> 00:00:36.760
and look at that, the name of
the file we just got done adding.

14
00:00:36.760 --> 00:00:39.822
So kinda looks like we can
kind of walk through git and

15
00:00:39.822 --> 00:00:41.920
we can find the file that is stored.

16
00:00:41.920 --> 00:00:44.879
So I'm gonna go here now, and
I'm gonna do the exact same thing.

17
00:00:44.879 --> 00:00:46.264
I'm gonna print out that.

18
00:00:46.264 --> 00:00:48.473
And look at that, hello frontend masters.

19
00:00:48.473 --> 00:00:50.489
I was able to go all the way down and

20
00:00:50.489 --> 00:00:55.241
drill to the exact point of the change
we've made by starting with the git sha.

21
00:00:55.241 --> 00:00:57.237
This is very, very important.

22
00:00:57.237 --> 00:01:01.259
Now there's some really good key
terms here that you need to know.

23
00:01:01.259 --> 00:01:04.398
First off,
you'll notice that there's a tree, right?

24
00:01:04.398 --> 00:01:07.042
You see the term tree being printed out.

25
00:01:07.042 --> 00:01:11.862
The easiest way to think about
tree is a tree is a directory.

26
00:01:11.862 --> 00:01:15.756
It contains a set of files or
more directories.

27
00:01:15.756 --> 00:01:19.774
A blob, which you saw right here,
is a file.

28
00:01:19.774 --> 00:01:23.106
And so that's kind of the mentality
you should have if you ever look or

29
00:01:23.106 --> 00:01:24.663
peruse through these commits.

30
00:01:24.663 --> 00:01:28.178
And we will actually use
this information later and

31
00:01:28.178 --> 00:01:32.930
restore stuff that we've lost by
knowing this kind of information.

32
00:01:32.930 --> 00:01:35.501
So anyways, there we go, we were able
to go all the way down to the bottom.

33
00:01:35.501 --> 00:01:41.124
So that means our SHA contained a tree,
and that tree contained our file,

34
00:01:41.124 --> 00:01:45.025
and that file contained
the entirety of that file,

35
00:01:45.025 --> 00:01:49.030
not just our changes, but
the entirety of the file.

36
00:01:49.030 --> 00:01:52.436
So here you go, very key concepts,
make sure you know that.

37
00:01:52.436 --> 00:01:54.318
Big takeaway, git does not store diffs.

38
00:01:54.318 --> 00:01:58.263
And we're gonna prove that,
it stores the entirety of stuff.

39
00:01:58.263 --> 00:02:01.247
And so
I want you to just take a moment and

40
00:02:01.247 --> 00:02:05.784
remember this SHA,
maybe by the first couple characters.

41
00:02:05.784 --> 00:02:07.753
Mine's ec3, you just remember yours.

42
00:02:07.753 --> 00:02:09.397
This is the SHA to the file.

43
00:02:09.397 --> 00:02:12.601
This is a very important part right here.

44
00:02:12.601 --> 00:02:14.473
All right, so
we're gonna do something else.

45
00:02:14.473 --> 00:02:18.107
I want you to create a second file and
I want you to commit it and

46
00:02:18.107 --> 00:02:19.395
call it second.md.

47
00:02:19.395 --> 00:02:23.178
Whatever text you want,
just create something.

48
00:02:23.178 --> 00:02:24.461
So I'll do the exact same thing.

49
00:02:31.614 --> 00:02:36.133
All right, fantastic,
hopefully everyone mostly got that done.

50
00:02:36.133 --> 00:02:37.811
Just make it a quick, easy change.

51
00:02:37.811 --> 00:02:43.102
By the way, I do want you, if you're using
some sort of command line utility or

52
00:02:43.102 --> 00:02:49.057
you're using your editor, if you're using
VS Code or Vim, don't use the git client.

53
00:02:49.057 --> 00:02:50.859
Right now,
we're gonna stay all in the command line.

54
00:02:50.859 --> 00:02:51.779
And I want you to be there for

55
00:02:51.779 --> 00:02:53.984
a reason cuz you want to understand
what's actually happening.

56
00:02:53.984 --> 00:02:56.690
Cuz when you use something
like Fugitive for Vim,

57
00:02:56.690 --> 00:03:01.276
it's literally just translating your
actions into these command line arguments.

58
00:03:01.276 --> 00:03:05.407
So I just want you to understand
what's happening here.

59
00:03:05.407 --> 00:03:07.115
All right, explore your new commit.

60
00:03:07.115 --> 00:03:09.838
What can you say about
first.md in your new commit?

61
00:03:09.838 --> 00:03:11.845
Cuz we didn't touch first.md, did we?

62
00:03:11.845 --> 00:03:16.593
We didn't, we just simply added
a new file and then committed it.

63
00:03:16.593 --> 00:03:20.140
So can you find first.md
in your new commit?

64
00:03:20.140 --> 00:03:21.139
By the way, a little fun fact,

65
00:03:21.139 --> 00:03:23.344
you get the first seven characters
right here whenever you commit.

66
00:03:23.344 --> 00:03:28.245
So you can actually copy that and
go git cat file -p, throw that in there.

67
00:03:28.245 --> 00:03:32.082
All right, notice something a little
different here, we have a tree, again,

68
00:03:32.082 --> 00:03:34.851
remember this is your folder,
but we also have a parent.

69
00:03:34.851 --> 00:03:38.629
And notice that that is the SHA for my
first commit, it will be the SHA from your

70
00:03:38.629 --> 00:03:41.842
first commit, you can start seeing
how this graph is being born.

71
00:03:41.842 --> 00:03:44.679
Your first one doesn't have the parents,
the next one does, and

72
00:03:44.679 --> 00:03:47.474
from here on out they'll all have
parents or multiple parents.

73
00:03:47.474 --> 00:03:51.960
Second, let's take this tree and
I'm going to cat this out.

74
00:03:51.960 --> 00:03:53.776
Git cat, there we go.

75
00:03:53.776 --> 00:03:55.765
Now look at that.

76
00:03:55.765 --> 00:03:58.084
I actually have out,
I actually committed out.

77
00:03:58.084 --> 00:04:00.920
Remember when I showed you the log,
I didn't look at what I was doing,

78
00:04:00.920 --> 00:04:02.233
I accidentally committed out.

79
00:04:02.233 --> 00:04:06.211
Mistakes were made, but either way,
you see this right here,

80
00:04:06.211 --> 00:04:09.379
you see that I have both my first and
now my second.

81
00:04:09.379 --> 00:04:14.652
But remember this very important part,
look at what first is.

82
00:04:14.652 --> 00:04:18.946
It's the same SHA that it
had in the previous commit.

83
00:04:18.946 --> 00:04:24.786
Meaning our commits store pointers
to the entire contents of that file.

84
00:04:24.786 --> 00:04:29.586
So we did not update first, therefore
this next commit contains first, but

85
00:04:29.586 --> 00:04:32.362
it contains a pointer
to the exact version.

86
00:04:32.362 --> 00:04:37.171
That means at any point in time, you only
need one commit to rebuild your repo, and

87
00:04:37.171 --> 00:04:40.112
you can completely rebuild
everything about it.

88
00:04:40.112 --> 00:04:42.073
Because that is how it works,

89
00:04:42.073 --> 00:04:47.571
is that every single commit stores the
entirety of the state, not a differential.

90
00:04:47.571 --> 00:04:49.976
And this is a very
important point about git,

91
00:04:49.976 --> 00:04:52.834
cuz it just helps you
understand git fundamentally.

92
00:04:52.834 --> 00:04:56.497
And so as you use merge and
rebase and all these other commands,

93
00:04:56.497 --> 00:04:58.932
it's just good to know this, all right?

94
00:04:58.932 --> 00:05:03.442
I mean, there's absolutely no reaction
right now with the live audience,

95
00:05:03.442 --> 00:05:07.112
which makes me think maybe this
isn't as cool as I think it is.

96
00:05:07.112 --> 00:05:10.960
I mean, I thought this was so
cool and you guys are.

97
00:05:10.960 --> 00:05:12.322
&gt;&gt; Still processing.

98
00:05:12.322 --> 00:05:14.706
&gt;&gt; Okay, any questions about this?

99
00:05:14.706 --> 00:05:19.901
Okay, how about I'll invert it,
does this generally make sense?

100
00:05:19.901 --> 00:05:22.857
Even if you don't understand
how the compression works,

101
00:05:22.857 --> 00:05:24.192
how does it look up stuff?

102
00:05:24.192 --> 00:05:26.824
Do you at least understand
that git stores these files,

103
00:05:26.824 --> 00:05:29.963
stores them as a bunch of these
really long strings of characters.

104
00:05:29.963 --> 00:05:33.217
And those long strings of characters
contain every last change of your repo?

105
00:05:33.217 --> 00:05:33.782
Question?

106
00:05:33.782 --> 00:05:38.575
&gt;&gt; So the first two characters
of a commits SHA is then

107
00:05:38.575 --> 00:05:43.027
placed where those blobs are for
each file, so

108
00:05:43.027 --> 00:05:48.636
that that points to the commit
that it was last updated in?

109
00:05:48.636 --> 00:05:50.130
&gt;&gt; Effectively, yes.

110
00:05:50.130 --> 00:05:55.032
And so you can see right here,
if I look at that, ec.

111
00:05:55.032 --> 00:05:58.506
If I go ls git/objects, you'll see, ec.

112
00:05:58.506 --> 00:06:02.437
So you actually see that it
literally is storing each thing and

113
00:06:02.437 --> 00:06:03.729
then it build it up.

114
00:06:03.729 --> 00:06:10.133
Every tree contains effectively one or
more blob, is the way to look at it.

115
00:06:10.133 --> 00:06:14.208
That's why you can't
commit an empty folder.

116
00:06:14.208 --> 00:06:17.052
Have you ever created a folder and
then nothing shows up?

117
00:06:17.052 --> 00:06:18.898
That's why,
cuz the tree has to have something.

118
00:06:18.898 --> 00:06:21.895
&gt;&gt; And Richard says,
is this like a linked list?

119
00:06:21.895 --> 00:06:25.063
&gt;&gt; That's a good way to think about it,
it's like a linked list.

120
00:06:25.063 --> 00:06:29.954
The problem about a linked list thought is
that a linked list contains a node that

121
00:06:29.954 --> 00:06:31.487
points to the next node.

122
00:06:31.487 --> 00:06:34.288
But git,
you could have more than one parent.

123
00:06:34.288 --> 00:06:39.348
It's an acyclic graph that happens to
be linear, is probably the best way to

124
00:06:39.348 --> 00:06:44.504
look at it, is that there is an unironic
order to git, which is time, right?

125
00:06:44.504 --> 00:06:48.054
So as time marches forward,
every commit you make is ordered that way.

126
00:06:48.054 --> 00:06:52.021
That's actually an extremely important
point to make sure you have in your head.

127
00:06:52.021 --> 00:06:55.761
Cuz when we do bisecting,
time is a very important aspect to it and

128
00:06:55.761 --> 00:06:58.009
why bisecting works very, very well.

129
00:06:58.009 --> 00:07:01.664
If you've never used bisect, I'm very
sorry if you've ever had to find when

130
00:07:01.664 --> 00:07:05.450
a bug happened and you didn't know that
this tool exists, so we'll go over it.

131
00:07:05.450 --> 00:07:07.977
All right, so what was the problem?

132
00:07:07.977 --> 00:07:09.761
Okay, we already went through this.

133
00:07:09.761 --> 00:07:12.218
Awesome, fantastic, you get it.

134
00:07:12.218 --> 00:07:14.590
Hopefully this does make git
feel less magical, though.

135
00:07:14.590 --> 00:07:18.181
I want git to feel magical
because it works so well,

136
00:07:18.181 --> 00:07:23.540
not because it's mysterious, and
that's where you want magic to happen.

137
00:07:23.540 --> 00:07:27.509
You want it to be a great product,
not mysterious that it actually works.

138
00:07:27.509 --> 00:07:30.232
Sometimes it's mysterious that it
actually works cuz you programmed it and

139
00:07:30.232 --> 00:07:33.221
you're shocked that you can build anything
that big, that's a different story.

140
00:07:33.221 --> 00:07:35.746
The previous chief product
officer at Netflix said,

141
00:07:35.746 --> 00:07:38.169
I'm surprised Netflix even works at all,
right?

142
00:07:38.169 --> 00:07:41.073
Because at the end of the day, it's
a whole bunch of people building something

143
00:07:41.073 --> 00:07:43.451
and somehow it all works together,
so it's always fantastic.

144
00:07:43.451 --> 00:07:47.285
Remember, every single program you'll ever
write can be broken down to a bunch of if

145
00:07:47.285 --> 00:07:49.828
statements, for loops,
and variable declarations.

146
00:07:49.828 --> 00:07:51.289
That's it, that's all you're doing.

147
00:07:51.289 --> 00:07:54.727
If you really break it down,
it's just a bunch of go to statements and

148
00:07:54.727 --> 00:07:56.877
procedural code, that's all you write.

149
00:07:56.877 --> 00:08:00.426
And so no matter how fancy,
no matter how much elixir you use,

150
00:08:00.426 --> 00:08:04.261
it's all just really simple go to
statements at the end of the day.

151
00:08:04.261 --> 00:08:05.882
All right, this is just for you guys,

152
00:08:05.882 --> 00:08:07.966
I'm going to do a little
quick thing right here.

153
00:08:07.966 --> 00:08:11.090
I'm gonna go like this,
mkdir, how about source,

154
00:08:11.090 --> 00:08:14.725
git status, git status,
you'll notice nothing shows up.

155
00:08:14.725 --> 00:08:18.969
I'm going to go vim source, and
we're gonna create a file in here,

156
00:08:18.969 --> 00:08:23.218
how about index.js for all my TS,
we're just so awesome, right?

157
00:08:23.218 --> 00:08:25.633
Okay, I'm gonna have
an empty file in there.

158
00:08:25.633 --> 00:08:29.500
Git status, you'll see that it's right
there, git add this, git status,

159
00:08:29.500 --> 00:08:31.355
git commit foo, I'll do foo again.

160
00:08:31.355 --> 00:08:38.887
And I have this right here, and I'm gonna
go git cat-file -p and print it out.

161
00:08:38.887 --> 00:08:42.026
Again, parent previous commit, tree,

162
00:08:42.026 --> 00:08:45.892
I'm gonna go into the tree,
git cat file-p tree.

163
00:08:45.892 --> 00:08:47.659
Look at this, we got our blobs.

164
00:08:47.659 --> 00:08:51.355
But there you go, another tree right here,
and that tree is a folder.

165
00:08:51.355 --> 00:08:54.139
So that means if I take this tree and

166
00:08:54.139 --> 00:08:58.460
go git-cat file that tree,
you'll see index.ts.

167
00:08:58.460 --> 00:09:02.649
It's literally just storing a bunch of
pointers describing the state of git,

168
00:09:02.649 --> 00:09:06.471
just really to drive that home,
just so everyone really understands.

169
00:09:06.471 --> 00:09:10.428
You could probably build a command-line
tool that cats out a commit,

170
00:09:10.428 --> 00:09:11.979
parses out these strings.

171
00:09:11.979 --> 00:09:14.473
And you could probably
rebuild the repo yourself,

172
00:09:14.473 --> 00:09:16.505
just from knowing how to use git cat file.

173
00:09:16.505 --> 00:09:20.211
You could actually rebuild the entire
state of it by just walking blobs and

174
00:09:20.211 --> 00:09:21.837
trees and making directories.

175
00:09:21.837 --> 00:09:24.604
It's really not that magic,
just feels magic.

