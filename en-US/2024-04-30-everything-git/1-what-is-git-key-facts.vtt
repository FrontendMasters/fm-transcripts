WEBVTT

1
00:00:00.000 --> 00:00:03.303
Git is a distributed version control,
which is much, much different,

2
00:00:03.303 --> 00:00:06.784
at one point in time, we used to have
a centralized version control system.

3
00:00:06.784 --> 00:00:10.702
Which meant that I would check out file A,
and if I happened to go on vacation,

4
00:00:10.702 --> 00:00:15.002
you could just never edit file A, that was
mine, it's mine until I check it back in.

5
00:00:15.002 --> 00:00:19.812
And this is most people's development
style up until until we started having

6
00:00:19.812 --> 00:00:21.372
distributed versions.

7
00:00:21.372 --> 00:00:24.738
There's a bunch of different kind of
iterations on distributed version

8
00:00:24.738 --> 00:00:26.998
controls, but
git seems to be the most popular,

9
00:00:26.998 --> 00:00:29.606
I think at one point Linus got
really angry and wrote it.

10
00:00:29.606 --> 00:00:33.673
I'm sure it has some very similar
JavaScript-like story where in 10 days out

11
00:00:33.673 --> 00:00:36.233
came the greatest version control ever,
right?

12
00:00:36.233 --> 00:00:39.897
I don't know the actual behind the scenes
story other than it came out right

13
00:00:39.897 --> 00:00:41.246
around like 2005 ish.

14
00:00:41.246 --> 00:00:45.584
So it's not that new but
it's also not that old comparatively,

15
00:00:45.584 --> 00:00:50.083
the thing that's awesome about git
is that you have your version,

16
00:00:50.083 --> 00:00:55.327
your version doesn't have to represent
the reality of some remote version.

17
00:00:55.327 --> 00:01:00.788
It's just your version until you wish
to update it to you wish to save,

18
00:01:00.788 --> 00:01:04.872
and so that will that's what makes git so
dang good.

19
00:01:04.872 --> 00:01:09.623
In git there's two levels of commands,
there's the porcelain commands and

20
00:01:09.623 --> 00:01:13.642
then the plumbing commands,
I think they're probably going for

21
00:01:13.642 --> 00:01:16.581
an image of a toilet,
maybe a bathtub or a sink.

22
00:01:16.581 --> 00:01:21.583
I'm not really sure why they chose to
go with that, I would have probably

23
00:01:21.583 --> 00:01:26.590
chosen something a little bit more
elegant, but anyways, here we are.

24
00:01:26.590 --> 00:01:29.181
We're gonna to go over mostly
porcelain commands, but

25
00:01:29.181 --> 00:01:30.733
we will get down to the plumbing.

26
00:01:30.733 --> 00:01:35.358
We will try to understand how git works
and hopefully the big takeaway from this

27
00:01:35.358 --> 00:01:39.158
course is that you understand
how git's data structure works.

28
00:01:39.158 --> 00:01:43.420
So that way, you don't feel confused
when you use it, when you use rebase or

29
00:01:43.420 --> 00:01:46.366
you revert or
you cherry-pick any of those things.

30
00:01:46.366 --> 00:01:49.517
You understand how these things work and

31
00:01:49.517 --> 00:01:53.416
therefore it's simple,
nothing hard about it.

32
00:01:53.416 --> 00:01:55.778
Some key terms,
I'm gonna use the term repo,

33
00:01:55.778 --> 00:01:59.048
a repo simply means a project
tracked by git, it's a folder, or

34
00:01:59.048 --> 00:02:02.703
I use folder because I grew up with
Windows, that's just how it works.

35
00:02:02.703 --> 00:02:05.272
It's a directory on some of,
some people call it a directory and

36
00:02:05.272 --> 00:02:06.904
are offended when I use the term folder.

37
00:02:06.904 --> 00:02:10.605
Either way you'll see me use those two
terms but, a repo is just simply something

38
00:02:10.605 --> 00:02:13.940
with a git folder in it, that means
it's being tracked actively by git.

39
00:02:13.940 --> 00:02:17.240
If you're on Windows,
I don't know exactly how it looks,

40
00:02:17.240 --> 00:02:19.888
if you're on just actual Windows,
not WSL2.

41
00:02:19.888 --> 00:02:24.086
And so I assume, it's probably the same
thing some sort of hidden folder that

42
00:02:24.086 --> 00:02:27.462
exists on Windows that tracks
all your stuff, I don't know.

43
00:02:27.462 --> 00:02:32.233
A commit is just simply a point in time
representing the project in its entirety,

44
00:02:32.233 --> 00:02:37.016
now for those that are somewhat familiar
with git that might be a bit surprising.

45
00:02:37.016 --> 00:02:39.858
You probably think that
it stores differentials,

46
00:02:39.858 --> 00:02:42.509
it's here's from one change to the next,
no.

47
00:02:42.509 --> 00:02:46.315
Every single commit is
the entirety of the code base, and

48
00:02:46.315 --> 00:02:49.977
it can be regenerated from that one and
single commit.

49
00:02:49.977 --> 00:02:54.524
So, kind of always a little bit of
a shocker, and a commits are often denoted

50
00:02:54.524 --> 00:02:58.872
by a 40 character a through f 0
through 9 hexadecimal kind of string.

51
00:02:58.872 --> 00:03:03.522
And that's gonna be based off
the contents of the change, the author,

52
00:03:03.522 --> 00:03:05.162
the time, everything.

53
00:03:05.162 --> 00:03:11.085
I'll often use the term index, this can be
kind of interchangeably used with staging,

54
00:03:11.085 --> 00:03:15.908
staging is the area in which you
prepare the changes you wish to commit.

55
00:03:15.908 --> 00:03:19.268
And when you commit anything
in the staging area or

56
00:03:19.268 --> 00:03:21.428
the index will be committed, so

57
00:03:21.428 --> 00:03:26.397
if you have un staged items they won't
be committed they'll remain red.

58
00:03:26.397 --> 00:03:30.740
That's why you can kinda of pick one file
to commit, not the other one, it's because

59
00:03:30.740 --> 00:03:34.737
there is a staging area, and here's
a nice little thing from the GitHub blog.

60
00:03:34.737 --> 00:03:38.910
I think this does probably a better
job than I did, I'll probably toss out

61
00:03:38.910 --> 00:03:42.476
the term squash at point,
which really means to take a commit or

62
00:03:42.476 --> 00:03:45.187
to take two commits and
turn it into one commit.

63
00:03:45.187 --> 00:03:48.299
That's squashing it by one level,
you can take n commits and

64
00:03:48.299 --> 00:03:52.093
turn it into n minus 1 or less commits,
that would be an act of squashing.

65
00:03:52.093 --> 00:03:56.808
If I say the term work tree, working tree,
main working tree, this is your git repo,

66
00:03:56.808 --> 00:04:01.208
you'll see it a lot in the documentation,
this term working tree all the time.

67
00:04:01.208 --> 00:04:04.436
Working tree is just the fancy term for
your stuff,

68
00:04:04.436 --> 00:04:08.731
it's what is being tracked by git and
has some sort of history in it.

69
00:04:08.731 --> 00:04:12.446
I'll use the term untracked,
staged, and tracked,

70
00:04:12.446 --> 00:04:17.150
I could use effectively,
let's go to xcali draw for a quick second.

71
00:04:17.150 --> 00:04:21.497
But the easiest way to describe it is that
the at some point when you're using git,

72
00:04:21.497 --> 00:04:23.645
there exists all of your files, right?

73
00:04:23.645 --> 00:04:27.956
You haven't done anything, you haven't
added it, this is the untracked kind of

74
00:04:27.956 --> 00:04:31.967
region, then at some point, you're
going to want to start tracking them.

75
00:04:31.967 --> 00:04:34.452
And so you track them by adding
them to the index, and so

76
00:04:34.452 --> 00:04:37.170
that's why when I say staging,
this is what I mean by that.

77
00:04:37.170 --> 00:04:41.760
Let me get a better color, let's call it,
I guess brown, we'll go with brown,

78
00:04:41.760 --> 00:04:45.149
that's a pretty nice color,
so this is your staging area.

79
00:04:45.149 --> 00:04:49.585
Staging is just simply get being ready,
and this is always every single flow

80
00:04:49.585 --> 00:04:54.529
you'll ever have, you'll have some sort
of untracked file that becomes staging.

81
00:04:54.529 --> 00:04:58.626
And then once it becomes staging, it's
gonna go one more time when you commit,

82
00:04:58.626 --> 00:05:01.269
and then it's fully tracked
by git with a history.

83
00:05:01.269 --> 00:05:05.154
And so it's kind of a three step
process anytime you're using git, and

84
00:05:05.154 --> 00:05:09.588
you should just have this in your head,
this is kind of the process you'll have.

85
00:05:09.588 --> 00:05:12.289
And so if you don't have this
kinda picture in your head,

86
00:05:12.289 --> 00:05:15.555
I think you'll find git to be more
difficult, you have not tracked,

87
00:05:15.555 --> 00:05:17.554
I'm tracking, but I'm not committed.

88
00:05:17.554 --> 00:05:20.841
I'm committed, and long as you kinda look
at it in that way, it will make sense.

89
00:05:20.841 --> 00:05:22.704
Once you've added a file,

90
00:05:22.704 --> 00:05:27.645
then you get new possibilities because
git know that it already exists,

91
00:05:27.645 --> 00:05:32.512
so when you add a change, you're in
this tracked but not staged cycle.

92
00:05:32.512 --> 00:05:36.201
Makes things a little bit easier to think
about if you just always keep that picture

93
00:05:36.201 --> 00:05:37.537
in your head, all right, and

94
00:05:37.537 --> 00:05:41.141
then let's say we've already talked
about all three of those, so fantastic.

95
00:05:41.141 --> 00:05:44.088
Some key facts about git is
that git is an acyclic graph,

96
00:05:44.088 --> 00:05:46.031
if you don't want an acyclic graph,

97
00:05:46.031 --> 00:05:49.749
take free data structures course
on front-end masters, am I right?

98
00:05:49.749 --> 00:05:53.350
Everybody, front-end
masters.com/courses/algorithms,

99
00:05:53.350 --> 00:05:56.120
you may have heard of it,
it's pretty fantastic.

100
00:05:56.120 --> 00:06:00.321
In git, every commit is a node in
the graph, and each pointer is a child

101
00:06:00.321 --> 00:06:04.812
parent relationship, meaning that you
can have more than one parent, but

102
00:06:04.812 --> 00:06:07.034
you cannot have a cycle in the graph.

103
00:06:07.034 --> 00:06:10.305
I wouldn't even know how you would
commit a cycle in the graph,

104
00:06:10.305 --> 00:06:12.290
it just doesn't even make any sense.

105
00:06:12.290 --> 00:06:16.656
If you delete untracked files, they
are just lost forever, that is your bad,

106
00:06:16.656 --> 00:06:18.851
there's that hilarious GitHub post.

107
00:06:18.851 --> 00:06:23.199
Where someone yells about losing 5,000
files because they didn't realize that

108
00:06:23.199 --> 00:06:26.711
if you don't have something tracked,
it will go bye-bye forever.

109
00:06:26.711 --> 00:06:32.663
So make sure you know that about git,
if you delete a file, that could be it,

110
00:06:32.663 --> 00:06:39.183
goodbye, second, always man git dash,
start there, read the friendly manual.

111
00:06:39.183 --> 00:06:43.666
Most of it's pretty good, some of it still
sucks, I actually don't even understand,

112
00:06:43.666 --> 00:06:45.179
when I read a man git dash tag,

113
00:06:45.179 --> 00:06:48.292
I still don't really know what's
happening when I read it.

114
00:06:48.292 --> 00:06:50.656
It's kind of, it just,
it feels strange to read, so

115
00:06:50.656 --> 00:06:54.238
sometimes you gotta go on the internet,
but for the most part it's pretty good.

116
00:06:54.238 --> 00:06:58.009
I know that a lot of you probably
just have these five commands.

117
00:06:58.009 --> 00:07:02.870
Who here, has more than those
five commands just right here?

118
00:07:02.870 --> 00:07:08.212
Okay, we're looking at about 50%,
maybe, maybe 50-ish percent, so this

119
00:07:08.212 --> 00:07:13.496
is kind of the typical git experience,
push, pull, add, commit, and status.

120
00:07:13.496 --> 00:07:17.017
You don't know anything else, and
you use it until it messes up, and

121
00:07:17.017 --> 00:07:20.130
then you go on the internet,
and someone suggested ref log.

122
00:07:20.130 --> 00:07:24.505
You don't know what happened, use ref log
and somehow everything sort of is fixed,

123
00:07:24.505 --> 00:07:28.154
but you have this deep dark feeling,
that one day you'll do it again.

124
00:07:28.154 --> 00:07:31.960
And it's just right around the corner and
it's probably rebase right?

125
00:07:31.960 --> 00:07:36.596
It's probably involving rebase someone
told you to do that and I hate your life,

126
00:07:36.596 --> 00:07:37.898
that is a, just life.

127
00:07:37.898 --> 00:07:42.089
Fetch could be in here as well, but
it's fetch still, anyways, everything else

128
00:07:42.089 --> 00:07:46.039
mysterious painful in this course my goal
is either you have zero knowledge or

129
00:07:46.039 --> 00:07:47.337
around that knowledge.

130
00:07:47.337 --> 00:07:51.651
And we want to take it a step further to
where you can use most features of git

131
00:07:51.651 --> 00:07:52.217
easily.

132
00:07:52.217 --> 00:07:57.127
The reality is if you're comfortable with
rebase, re-re-re-ref-log-log, catfile,

133
00:07:57.127 --> 00:07:59.965
config, and reset,
this course might not be for you.

134
00:07:59.965 --> 00:08:03.400
Just real talk, if you're already
pretty that far into git,

135
00:08:03.400 --> 00:08:06.652
I don't think you're gonna get
a whole bunch out of this.

136
00:08:06.652 --> 00:08:10.408
And so, I don't want you to get your hopes
up that we're actually gonna be making

137
00:08:10.408 --> 00:08:13.736
git, we're gonna be going over it and
making you practically useful.

138
00:08:13.736 --> 00:08:18.339
Because the hardest part about working on
a job is usually never the code itself,

139
00:08:18.339 --> 00:08:22.076
it's the poor decisions you've
made in the past about the code.

140
00:08:22.076 --> 00:08:26.698
And then second, working with some sort
of version control with everybody else.

141
00:08:26.698 --> 00:08:29.924
So once you get past that first part about
you being a bad programmer, don't worry,

142
00:08:29.924 --> 00:08:32.120
I'm a bad programmer too,
we're all bad programmers.

143
00:08:32.120 --> 00:08:37.059
But after that, it's just being able to be
effective with 40 people all committing

144
00:08:37.059 --> 00:08:40.161
to one codebase and
there's a lot of strategy there.

145
00:08:40.161 --> 00:08:43.789
And the worst part is when you have to
revert, and no one has a git policy, and

146
00:08:43.789 --> 00:08:46.987
it becomes impossible to revert
your change due to merge commits.

147
00:08:46.987 --> 00:08:50.633
How many different little tiny
commits that are all interleaved, and

148
00:08:50.633 --> 00:08:52.053
it becomes a nightmare, so

149
00:08:52.053 --> 00:08:55.974
we're gonna to hopefully have some sort
of sense about git by the end of this

