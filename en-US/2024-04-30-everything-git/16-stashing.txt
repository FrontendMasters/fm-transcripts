[00:00:00]
>> We are at this point where you have a change you've made locally, and now you have a change you need to pull in from remote. What do you do? Typically, most people say stash it. You can technically commit and rebase. And then you have your commit on top, but you've pulled in the changes that you need.

[00:00:16]
And so you do have options here, but there is a third option, which we'll talk about later, which is worktrees, which is my favorite way to do this. But for now, we're gonna actually start talking about stash. So for those that don't know anything about stash, stash takes every tracked change by git inside the index and the working tree and stores them kind of into a special area, the work in progress area, the stash area.

[00:00:36]
And you can think of stash like a stack of temporary changes. This is from the man page, using git stash when you record the current state of the working directory and the index, but wants to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match HEAD commit.

[00:00:55]
All right, so pretty straightforward. Stash is a stack, right. I wanna make sure I say that multiple times, it's just a stack of changes. All right, so operation, you can push to your stash by executing git stash. You can even give a friendly message with -m. So this right here would stash, but with message.

[00:01:18]
Stashes can be listed out with git list, or git stash list, and git show with an index as well. Show will just show the changes, or the diff, whereas list will list out the amount of stashes you have. You can pop the latest stash with git stash pop.

[00:01:35]
You can pop at an index with --index. So if you want the third stash in, you can just --index 3. Or I think it might be zero base, I forget if it's zero or one base. I assume everything's zero base unless you're using Lua. So we'll just say --2 for the third option.

[00:01:50]
All right, man git stash is your friend. If you forget how it works, again, use the friendly manual. Love the friendly manual. Read the friendly manual, that's what RTFM stands for, by the way, so if you ever see it on the Internet, just remember it's the friendly manual.

[00:02:03]
All right, so problem, we're gonna use trunk, and I want you to create an upstream change. Remember this is gonna be in hello-git. Just create a file called upstream and put upstream change into it. Then in remote, I want you to do a downstream change in the README, okay?

[00:02:21]
So remember these are two different files, and I want you to do it like this. So I will literally copy this. I'm gonna go to hello-git, just execute that git add this, git commit upstream. Then I'm gonna do this one right here. So I just don't mess it up.

[00:02:43]
Look at that. All right, there we go. So now remote has a change. Dang it, git checkout trunk. There we go. Look at that. All right, there we go. And then add this thing and then commit this thing. There we go, okay. So make sure you do it to trunk, as I stated explicitly in the instructions and would never accidentally deviate from said things.

[00:03:15]
All right, so now, actually did deviate. I said don't commit. By the way, the second one, don't commit the changes. Did anyone commit the changes in remote-git? You committed it? Do git reset --soft HEAD~1. I'll do it too. Git reset --soft HEAD~1. There we go. Now I have that lovely little change right here, and trunk is now pointing one step back.

