[00:00:00]
>> Right, Stash is not that great, right? We've all used stash? Were we all happy with it? No you weren't happy with it, okay? You weren't happy at all. You now want to be happy, though. So we're going to be happy by using work trees. So work trees.

[00:00:17]
So the best way to describe is like a little story, right? You're on a worktree, foo_bar, you're making the greatest progress ever. You're in flow state, everything's going great. But then, emergency situation is needed on main, some sort of bug there, so what do you do? Well, typically, we've been doing the whole like git add, throw everything into the stash, switch the branches, make the changes, and then come back or we could commit it and pull it and try to figure out what's wrong.

[00:00:39]
We need to do something right? Well, what's a little bit nicer is worktrees, lemme show you how they work. First off, a work tree, often when we say this phrase, what we mean is a linked working tree. It's not your main tree, the main tree is the one you you create when you do a get innit or a git clone.

[00:00:57]
Those are the main working trees. A linked working tree, is just simply a branch from your main tree, in its own state. Remember, every commit can rebuild the entirety of a repo. Very very important you understand that one point because this is where it's really used right here.

[00:01:14]
And it's a little bit different because the .git folder is not a folder, it's just a file. So, Let's do a little bit of this okay?. First off you can do a git worktree add <path>. The base name of the path will be used as the branch name.

[00:01:26]
If you don't know what basename is, basename/foo/bar/baz. So this will automatically use your path as a branch name. You can also add in the branch name if you want it or you can just let it auto do it. Git worktree list will list out your available work trees.

[00:01:44]
If you wanna delete it, you can just delete the work tree folder and then call worktree prune, or you can actually do a worktree remove on the folder and it will do that. Depending on how you want to go about it, it can do either of. The benefits is that it's super cheap to make, pretty much like I said, pretty much as cheap as a branch.

[00:02:04]
The real big con with the worktree is if there's high branch setup cost. So like if you NPM install everything JS and it takes way too long to do anything, well that's a problem, right? And so if you have to build like a Rust project and it takes minutes upon minutes, you'll find yourself a little bit more hesitant to use them depending on how long it takes.

[00:02:25]
So, we're gonna create a work tree in Hello Git and I want to use foo bar as the last item in the path. So it creates the branch foo-bar. My suggestion is just go back one folder, from your root of hello git and just use the just use dash, dash or ../foo- bar.

[00:02:43]
And when we're done, check out the Git folder. So I'm gonna go like this, I'm going to go git worktree add../foo-bar. I think it probably already exists. Nice, it doesn't. Let's go. There we go, we prepared a new worktree and it's been checked out at this point right here.

[00:02:59]
So it created a new branch at this current point, which means if I open up foobar, you'll notice I'm in a repo. I can tell that I'm in a Git repo, cuz I have this nice little thing right here. If I go git log, you can see revert E.

[00:03:11]
A + 9, merge, you can see all of our commits in here. We're in the same repo, just on a different branch. Now here's the best part about that. Let's cat out the git log or the git folder, remember, it's not a folder anymore. It actually just tells you, the file just simply says, hey, I belong here.

[00:03:31]
And so it tells you where the main working tree is, cuz this is a linked working tree, which means that if I go like this, them, let's see, I wanna make sure I'm not actually accidentally getting out over my skis here. Yeah, I'm gonna do one little quick thing, it's not in the notes, but we'll just do it right here.

[00:03:50]
If I go like this, if I go foo, put in some changes right here and go git status and go git commit, put in a little change really quickly. Then I'm gonna go back to Hello Git, if I go, if I go get log foobar, my changes right there, right?

[00:04:07]
Cause it's a linked working tree, it's just another, you just have another entrance into your folder. So that way you can actually have two running copies, right? So you could actually have your feature development and then just like mainline over here. And so that way you can always, you only have like two folders you're really working on.

[00:04:21]
So anytime you need to like update code or do some sort of like emergency switch, you can do that and just leave your working tree in whatever state it's in, and then you never really switch branches. So the idea is that branch switching is almost like an anti-pattern.

[00:04:33]
Instead you just use worktrees constantly to build everything, and that way you never have to undo stashing just does not exist, you just simply have the file or the the branch out as its own folder with its own state and then when you're done you just prune it you got you just get rid of it.

[00:04:49]
And so that's kind of like the idea, like the ideal idea but you know you can also just have like two versions of itself where you switch branches all you want, there's some moves. And so if i go like this git worktree list, it'll tell me my two work trees, I have my main working tree right here, and then I have this one, which is my linked working tree, foobar.

[00:05:09]
Pretty cool, I like this one, I really do like him. Now, remember, there's two ways you can delete them, of course, so that means I can go rm -rf ../foo-bar. And once I do that, if I go worktree list, you'll see right here, it knows that this thing no longer exists.

[00:05:32]
And you're probably thinking, how does it know that it no longer exists? It means not only is there a link from your linked working tree to your main line, your main line must also have that information out to the linked worktree. I'm not sure if I know where it is, honestly, just off the top of my head I think I do.

[00:05:45]
I bet, totally pre-planned. Then you can see work trees, right? So you can actually see it right here, so you can see, here it is. That, you can see what head it's supposed to be at. You can see the git dir. So you'll notice that this is no longer a thing.

[00:05:59]
It probably just stats out the file and notices if the file's missing. It just says, hey, this is a prunable worktree, you've already deleted it. And so that's how it effectively is able to understand that I've deleted it outside of git, so now I can just go get worktree prune and if I go get work tree list, it's gone, right?

[00:06:16]
Awesome, I mean I think it's great. I really like that, I love work trees. They're absolutely fantastic, they just solve that one really annoying problem of having to switch things, stash things, commit things early. Any of that, all right. All right we can, yeah, I mean we can get worktree remove.

[00:06:35]
We don't need that, we don't need to do that one too. I do love work tree stuff, they're just my favorite. There is also end files are really painful. So if you have an end file, if it's checked into the repo, which would be a little unusual, if that's the case, then you're fine.

[00:06:50]
But if it's not checked into the repo, then you have like this whole, like copying of your end file around node modules goes great. It just builds really fast so that just works out, but everything else kind of tends to be a little bit more of pain that way, so just something to think about.

