[00:00:00]
>> Do you feel more powerful now as you're Git knowledge growing hopefully? Well now we're gonna talk about remote Git, right? Often we need changes that have been created by our fellow frenemies. Frenemies, of course is because they make code and it hurts your feelings or hurts productions feelings, and but how do we get their changes into our repo?

[00:00:17]
How do we push our changes to their repo? Here's one thing that kind of I guess will surprise most people, is that it doesn't have to be remote. It doesn't have to be on GitHub. I know that might be strange because often when people think of git, they think of GitHub.

[00:00:35]
They don't actually think of git as its own thing and then GitHub as a means to store git they think of GitHub as git. So you may have never really used git as remote like, you just probably have never done this. Why would you have the same thing twice?

[00:00:51]
A remote is just simply a copy of the repo somewhere else, that's it. So I want you to create a new folder, wherever you create folders, let's call it remote git, and I want you to initialize it with git Init. So I'll jump in here and go, I'll go to my personal directory, I'll make there remote-git, and then I'll go into remote-git.

[00:01:17]
There we go. And I'll go git Init, there we go. It's own repo right now. Remember, this is distributed version control, okay? The files can be on other people's computers too. And so, let's add a remote to hello git. So, adding a remote goes git remote add the name of the remote and then some sort of url of some sort.

[00:01:46]
It can be an SSH item, it can be just a path on your computer. So let's add hello-git as the remote. By the way, you should name it origin. The authority repo is typically named origin, so I'll do it right now. I'll go git remote add origin, and then I'll just literally go back, back /hello-git.

[00:02:13]
I can check it out with git remote-v, there we go. You can see that the other repo is just simply a relative file. So hopefully everyone did that. Git remote- v will just verbosely list out all of your remotes. You can also just do git remote, but I don't find that very useful, right like that.

[00:02:31]
I didn't do anything there. And so if you do the- v, it will also give you the path. So if you have GitHub, you'll see the GitHub address when you do a -v. Gitism, typically this is how I set up the naming for my repos, is if I have only a singular authoritative repo, meaning that there is mine plus the one I'm pushing up to, say on GitHub, then I'll call that one origin.

[00:02:54]
If I have a fork of the authoritative repo, so this is typical when you're at like a job, you have your main one and then you have your fork. I typically call my fork origin and the authoritative one, the true one, the one true repo, I call that one upstream.

[00:03:09]
That you'll see that a lot people will call it upstream. Sometimes instead of using origin I use me cuz it's just I don't know, it's kinda fun. Git pushed me, it's fun. I just thought it was, I just think it's stupid and fun. So there's me. That's what you know, and so that's kind of like my general naming convention is to use origin for the authoritative one, unless if it's a personal fork and then do upstream for the authoritative one, all right?

[00:03:34]
You'll notice our default branch remained it's trunk again, right? We didn't set the option again. We didn't do anything, it just keeps on remaining. So now trunk was yet again, even though this is a very different trunk. This trunk right here is from the default naming. Now we need to merge the changes from hello-git into our new repo remote-git.

[00:03:55]
So we're gonna do that, but first we need to fetch. We need to fetch because we want to be able to get all that object information from hello-git. So if we go here and I go find .git, you'll notice that it's just, again, this pristine empty one. Whereas if I do that in hello-git, find .git, well, it has a lot of stuff in there, right?

[00:04:16]
So I want all of that in remote git, so to do that you need to be able to execute git fetch. Git fetch will fetch your remotes changes, and it'll put it inside the git state management. I bet you can even find where it stores things. So I'll go like this git fetch.

[00:04:36]
And you'll see look at that I got bar, I got foo, I got foo-rebase-trunk, trunk, trunk-merge-foo, we got all of those branches when I did that fetch, okay? Cool, now I'm up-to-date, right?
>> No.
>> No, great job. I love this. This is fantastic, all right? So let's use git log and verify that the remote trunk has been correctly merged into our git state.

[00:05:03]
So I'll go like this, git log, our branch doesn't even have any commits yet. So our trunk is still diverging from hello-git. The reason why is we've only fetched the changes, we haven't merged the changes into ours. We haven't updated anything. That's why often when you pull, you'll see update with fast forward if you have your main line, cuz you don't make changes to your main line cuz you're all great engineers, I can tell right away.

[00:05:26]
No one's doing that, right? No one's doing merge, right? Okay, so anyways, right now we just haven't done, we haven't updated anything. Okay, so that means we need to do something, but by the way, remember, you can always do a git log. So I can go, git log origin name, which, or sorry, not origin name, remote name, which is origin, and then do any branch name, right?

[00:05:50]
Because we've fetched everything in so we can actually see the log of other remotes. So I can go origin trunk, and there we go. Definitely my best work at the end of this. It's fantastic. XYEDA, awesome. If you did one line and I actually pasted one line in there, I paste the wrong thing and they're actually executed one line.

[00:06:12]
That's what it should look like. All right, awesome. You can validate. This is true, when you look right here, you'll notice that trunk is 9b6e43. I can go to hello-git and do git-log -1, 9b6e, same commit shot, right? It now exists on two computers or in two repos.

[00:06:36]
So there we go, okay, we are now kind of in line. If you wish to see what branches came down with with git fetch, you can do a git branch -a. So if I go back to remote git and I go git branch -a, you'll see all branches.

[00:06:53]
And so the ones that start with remotes those are all the remote branches. Then you'll have any of your local ones right now we have nothing. We just have the default empty one that has no commits to it. So we have no branches effectively and just a bunch from the remote, all right?

[00:07:06]
So let's update trunk with origin/trunk and then let's use git log to see those commits have been merged. So what do we do here?
>> Pull origin trunk.
>> We can get pull origin trunk, true. We also have all those changes. So we can just git merge origin, the remote trunk.

[00:07:30]
Now that I've merged those changes from my internals, which I just got done fetching from another repo, I can use git log one line and look at that. My trunk now points to the same spot that this trunk does.

