WEBVTT

1
00:00:00.090 --> 00:00:03.135
All right, so to create a conflict, the
easiest way to do that is you just have to

2
00:00:03.135 --> 00:00:04.870
make two changes that
cannot be reconciled.

3
00:00:04.870 --> 00:00:09.388
In other words, just change the same
line to two different things.

4
00:00:09.388 --> 00:00:13.152
So the problem, let's create
a conflict in both remote and hello.

5
00:00:13.152 --> 00:00:15.270
To do this, we need to create
a commit in both of them.

6
00:00:15.270 --> 00:00:17.692
And so we're gonna use trunk for
both repos.

7
00:00:17.692 --> 00:00:25.125
We're gonna do an A +1 to hello and
an A +2 to remote.

8
00:00:25.125 --> 00:00:26.047
And this will be in the README.

9
00:00:26.047 --> 00:00:28.002
So they both have A at the first line.

10
00:00:28.002 --> 00:00:29.242
So it'll create the same change in both.

11
00:00:29.242 --> 00:00:31.192
Let me just make sure
that I don't do anything.

12
00:00:31.192 --> 00:00:31.892
Okay, good.

13
00:00:31.892 --> 00:00:33.472
So let's do that now.

14
00:00:33.472 --> 00:00:35.092
So I'm gonna first start off in hello.

15
00:00:35.092 --> 00:00:36.252
I'm gonna go to the README.

16
00:00:36.252 --> 00:00:39.370
I'm gonna add A + 1, save that,

17
00:00:39.370 --> 00:00:44.112
git add this, git commit,
and then I'll do A + 1.

18
00:00:44.112 --> 00:00:49.265
So I have the same message so
we kind of know what we're working with.

19
00:00:49.265 --> 00:00:52.257
And then I'll jump over here to remote and
do the exact same thing, right?

20
00:00:52.257 --> 00:00:58.146
We're gonna go in here, A + 2,
save that, git add this, git commit 2.

21
00:00:58.146 --> 00:00:59.347
There we go.

22
00:00:59.347 --> 00:01:03.509
We have now created the situation in
which we are going to conflict and

23
00:01:03.509 --> 00:01:08.632
now we just need to simply pull hello-git
onto remote and it should cause conflict.

24
00:01:08.632 --> 00:01:10.482
So git pull.

25
00:01:10.482 --> 00:01:11.212
There we go.

26
00:01:11.212 --> 00:01:13.742
We now have the official conflict.

27
00:01:13.742 --> 00:01:17.162
It's hurting us emotionally,
but it's fantastic.

28
00:01:17.162 --> 00:01:18.492
So what is a conflict?

29
00:01:18.492 --> 00:01:22.605
It may not be obvious what is in
the conflict because often whenever you're

30
00:01:22.605 --> 00:01:26.995
pulling changes, well, it's unlikely
that it's one file that's changed.

31
00:01:26.995 --> 00:01:30.464
Usually you're pulling a whole bunch
of commits from other people and

32
00:01:30.464 --> 00:01:33.166
you get the big list of things
that have been changed and

33
00:01:33.166 --> 00:01:35.535
you get one file in there
that's conflicting.

34
00:01:35.535 --> 00:01:38.871
And so using just this message
right here to find which one,

35
00:01:38.871 --> 00:01:40.801
kind of a pain to do, right?

36
00:01:40.801 --> 00:01:45.339
That's why git status is a little bit
easier cuz you'll get something like this,

37
00:01:45.339 --> 00:01:46.272
both modified.

38
00:01:46.272 --> 00:01:48.255
And you can see that means it
does not know how to resolve it.

39
00:01:48.255 --> 00:01:51.225
It can just tell you, hey,
both the one you're on and

40
00:01:51.225 --> 00:01:56.517
the one you're pulling into have a change
here and we don't know how to resolve it.

41
00:01:56.517 --> 00:02:01.122
Yeah, by the way, you could always abort
these type of things by doing a git

42
00:02:01.122 --> 00:02:04.646
merge --abort or a git rebase abort,
just so you know.

43
00:02:04.646 --> 00:02:07.994
And technically a git revert abort,
git cherry pick abort,

44
00:02:07.994 --> 00:02:10.566
any of them that you
have that availableness.

45
00:02:10.566 --> 00:02:13.221
I think with Stash, you can't abort
that one, if I'm not mistaken,

46
00:02:13.221 --> 00:02:15.606
there's some other technique
you're gonna have to do there.

47
00:02:15.606 --> 00:02:18.806
I can't remember with Stash, but
I'm pretty sure you can't with Stash.

48
00:02:18.806 --> 00:02:21.761
All right, so to resolve a conflict,
let's open up the the README and

49
00:02:21.761 --> 00:02:23.325
let's look at what's inside of it.

50
00:02:23.325 --> 00:02:27.516
So here it is for convenience, but for
me, I like to look at things with vim.

51
00:02:27.516 --> 00:02:32.888
Notice that we have head with a bunch of
arrows, the change we made in remote,

52
00:02:32.888 --> 00:02:37.035
a bunch of equal signs,
the change that's up on hello git.

53
00:02:37.035 --> 00:02:40.757
And then of course,
this was some sort of sha, 7b00.

54
00:02:40.757 --> 00:02:45.157
If I jump over to hello and
go git log-1, you'll see 7b00.

55
00:02:45.157 --> 00:02:46.034
It's this commit,

56
00:02:46.034 --> 00:02:49.347
it's letting you know which commit
you're currently resolving against.

57
00:02:50.667 --> 00:02:55.599
So when I go here, what this says to me,
or what it's trying to convey to

58
00:02:55.599 --> 00:02:59.795
you is that from this place to
the equal sign is your change and

59
00:02:59.795 --> 00:03:03.965
from the equal sign to this
is this commits change.

60
00:03:03.965 --> 00:03:07.095
And so
now you need to pick which one you want.

61
00:03:07.095 --> 00:03:11.811
Technically, I could delete this, this and
this and have them both if I really

62
00:03:11.811 --> 00:03:16.395
wanted to, or I could just have hello,
or I could just have remote, right?

63
00:03:16.395 --> 00:03:18.365
You get to choose how
you want to resolve it.

64
00:03:18.365 --> 00:03:22.674
That's why if you've ever noticed whenever
you're using some sort of visual program,

65
00:03:22.674 --> 00:03:24.225
you'll get to select one side or

66
00:03:24.225 --> 00:03:27.286
the other and then you have in
the middle the ability to edit it.

67
00:03:27.286 --> 00:03:32.256
It is because often a conflict isn't as
simple as choosing one side or the other.

68
00:03:32.256 --> 00:03:35.826
It's you kind of have to mash them
together and make sure things work.

69
00:03:35.826 --> 00:03:38.236
All right, anyways, spend all that.

70
00:03:38.236 --> 00:03:40.696
All right, so validate your sha.

71
00:03:40.696 --> 00:03:41.926
We already validated the sha.

72
00:03:43.880 --> 00:03:46.864
All right, so we are conflicted and
we want to resolve it.

73
00:03:46.864 --> 00:03:50.787
Use the status message to identify
which one, we already did that and

74
00:03:50.787 --> 00:03:53.890
let's choose our remote-git change, okay?

75
00:03:53.890 --> 00:04:00.410
So that means you want to keep the one
between head and the equal sign or A + 2.

76
00:04:00.410 --> 00:04:02.304
So we're gonna keep the remote-git change.

77
00:04:02.304 --> 00:04:04.774
So this is the final
state we should be into.

78
00:04:04.774 --> 00:04:07.064
Make sure my notes actually agree with me.

79
00:04:07.064 --> 00:04:09.404
Yeah, okay, whew, right?

80
00:04:09.404 --> 00:04:11.734
Make sure you pretty much end
the file looking like this.

81
00:04:11.734 --> 00:04:15.050
I'm not gonna delete the line that I have
right here because I just don't want to

82
00:04:15.050 --> 00:04:16.504
play with history at all.

83
00:04:16.504 --> 00:04:20.624
I want everything to keep on going there,
but normally I feel the need to delete it.

84
00:04:20.624 --> 00:04:22.701
And just in case you all feel
the same need that I need,

85
00:04:22.701 --> 00:04:24.812
just letting you know
why I'm not deleting it.

86
00:04:24.812 --> 00:04:25.602
All right, so there we go.

87
00:04:25.602 --> 00:04:27.682
We have resolved the conflict.

88
00:04:27.682 --> 00:04:30.202
If I go git status,
it still says the same thing.

89
00:04:30.202 --> 00:04:32.261
We need to resolve this conflict still,
right?

90
00:04:32.261 --> 00:04:34.583
Even though I've deleted
all the conflicting lines,

91
00:04:34.583 --> 00:04:35.752
git has not moved forward.

92
00:04:35.752 --> 00:04:38.592
It doesn't just move forward automagically
when none of those lines are left.

93
00:04:38.592 --> 00:04:43.195
It waits for you to tell it,
I'm ready for you to move forward.

94
00:04:43.195 --> 00:04:46.724
Right, let's just make sure
I've done all the right things.

95
00:04:46.724 --> 00:04:48.259
So let's commit the merge now.

96
00:04:48.259 --> 00:04:50.501
So all we have to do is do
a little quick git add and

97
00:04:50.501 --> 00:04:53.489
then we get to commit it with
whatever message we want, right?

98
00:04:53.489 --> 00:04:58.305
So I'll just say merged in upstream.

99
00:04:58.305 --> 00:05:00.129
There we go.
We've merged in upstream.

100
00:05:00.129 --> 00:05:01.349
We've resolved the conflict.

101
00:05:01.349 --> 00:05:05.940
We had to do it manually,
had to choose whatever side we wanted and

102
00:05:05.940 --> 00:05:09.792
we happen to choose our remote side,
not a hello side.

103
00:05:09.792 --> 00:05:15.889
Fantastic, just absolutely so
happy right now, geez.

104
00:05:15.889 --> 00:05:19.787
All right, I forgot to put the status.

105
00:05:19.787 --> 00:05:20.815
That's so sad.

106
00:05:20.815 --> 00:05:25.025
If you execute status, so one thing here,
we'll look at it right here.

107
00:05:25.025 --> 00:05:28.483
If I were to do status before
I committed the change,

108
00:05:28.483 --> 00:05:32.105
when I added the README,
the README went away.

109
00:05:32.105 --> 00:05:32.745
Why is that?

110
00:05:34.125 --> 00:05:35.245
It's not on the status anymore.

111
00:05:36.395 --> 00:05:38.005
It's quite simple.

112
00:05:38.005 --> 00:05:39.865
There's no change, right?

113
00:05:39.865 --> 00:05:43.878
We kept our change from remote,
therefore, by resolving this conflict,

114
00:05:43.878 --> 00:05:47.339
we're still in a state that
needs to be committed.

115
00:05:47.339 --> 00:05:49.909
We just have no change.

116
00:05:49.909 --> 00:05:52.120
It's just an empty commit, right?

117
00:05:52.120 --> 00:05:53.803
There's nothing there.

118
00:05:53.803 --> 00:05:57.339
It's kind of a little fun fact.

119
00:05:57.339 --> 00:05:59.499
Anyways, we can use git log
to kind of look into it.

120
00:05:59.499 --> 00:06:03.324
So if you go like this, git log, you'll
see, okay, we see the merge upstream.

121
00:06:03.324 --> 00:06:07.506
We actually see where our origin
trunk is currently pointing to.

122
00:06:07.506 --> 00:06:09.233
We see our change.

123
00:06:09.233 --> 00:06:11.852
If we do git,
this is where graph gets really cool.

124
00:06:11.852 --> 00:06:14.237
If you do it with graph,
you can actually see, okay,

125
00:06:14.237 --> 00:06:15.728
now I can see that this happened.

126
00:06:15.728 --> 00:06:17.818
I can see this is a merge
commit with two parents.

127
00:06:17.818 --> 00:06:19.558
You can see which parents are which.

128
00:06:19.558 --> 00:06:21.708
There's our upstream one.

129
00:06:21.708 --> 00:06:23.215
Here's our last commit down here.

130
00:06:23.215 --> 00:06:24.916
So you can kind of look at them.

131
00:06:24.916 --> 00:06:27.686
I also think it's kind of neat that
there's two zeroes right here and

132
00:06:27.686 --> 00:06:30.016
two zeroes right here,
and two zeroes right here.

133
00:06:30.016 --> 00:06:30.626
Feels weird to me.

134
00:06:30.626 --> 00:06:31.506
I love those kind of things.

135
00:06:31.506 --> 00:06:32.006
I don't know why.

136
00:06:32.006 --> 00:06:34.446
I just find it very entertaining
when shows are close to each other.

137
00:06:34.446 --> 00:06:38.593
I don't know, kind of weird guy,
but, all right.

138
00:06:38.593 --> 00:06:41.390
So two conflicts are better than one,
right?

139
00:06:41.390 --> 00:06:43.400
I agree, but
we're not gonna do this quite yet.

140
00:06:43.400 --> 00:06:47.390
So what I want you to do is I want
you to make a change to bar and

141
00:06:47.390 --> 00:06:52.150
I want you to pull in the change
into the remote, that's it.

142
00:06:52.150 --> 00:06:53.530
Very, very simple change.

143
00:06:53.530 --> 00:06:54.190
That's it.

144
00:06:54.190 --> 00:06:57.680
So I'm just gonna even copy this one
a no conflict change to bar, dang it.

145
00:06:59.080 --> 00:07:06.466
So I'm gonna go back to hello change bar,
git add this, git commit, a change to bar.

146
00:07:07.806 --> 00:07:08.736
Very, very simple, right?

147
00:07:09.866 --> 00:07:13.426
We're gonna do that, remember,
in our upstream, in hello.

148
00:07:14.556 --> 00:07:19.176
For those that are wondering what I'm
doing right here, this little maneuver

149
00:07:19.176 --> 00:07:23.732
here, when you do echo anything, you
are echoing it out to the standard out.

150
00:07:23.732 --> 00:07:27.052
In all kind of programs running, there's
a standard in, there's a standard out.

151
00:07:27.052 --> 00:07:30.042
I can redirect any output to a file.

152
00:07:30.042 --> 00:07:34.222
Two things mean that I not only redirect
it to a file, but I append it to the end.

153
00:07:34.222 --> 00:07:35.901
So just in case you forgot about that,

154
00:07:35.901 --> 00:07:39.783
it's just when you're doing these little
exercises, it makes things really, really

155
00:07:39.783 --> 00:07:43.052
easy to just do this because I don't
need to open the file and then edit it.

156
00:07:43.052 --> 00:07:47.152
And then close the file and
save and go through all of it.

157
00:07:47.152 --> 00:07:49.372
I'll just put the standard
out right into the file.

158
00:07:50.422 --> 00:07:52.572
So now let's pull in
the change into the remote.

159
00:07:53.632 --> 00:07:56.413
So I'm gonna jump over here and
go git pull.

160
00:07:59.461 --> 00:08:01.645
And look at that.

161
00:08:01.645 --> 00:08:03.716
We have diverging histories, right?

162
00:08:07.303 --> 00:08:12.670
Right, yeah,
cuz I have my change that I merged in.

163
00:08:12.670 --> 00:08:13.515
There was a conflict.

164
00:08:13.515 --> 00:08:14.835
I changed that conflict.

165
00:08:14.835 --> 00:08:18.925
I never told hello git or
the upstream about this conflict.

166
00:08:18.925 --> 00:08:20.525
I never pushed any change for it.

167
00:08:20.525 --> 00:08:22.505
So now, every time I make a change,

168
00:08:22.505 --> 00:08:26.148
I have to do a merge commit cuz
we have different histories.

169
00:08:26.148 --> 00:08:31.020
So this is where things can quickly
get a lot of extra commits in life

170
00:08:31.020 --> 00:08:33.293
cuz now we just have even more.

171
00:08:33.293 --> 00:08:37.234
Every time I pull in a change now,
if I pull in one change at a time,

172
00:08:37.234 --> 00:08:39.185
I'll get two commits per pull.

173
00:08:39.185 --> 00:08:43.994
So this is where the thing starts to
get kind of annoying with merge even

174
00:08:43.994 --> 00:08:48.408
though some people really like it,
I'm just not a big fan of it.

175
00:08:48.408 --> 00:08:50.502
There we go.

176
00:08:50.502 --> 00:08:52.982
So this will keep on going over and
over again by the way.

177
00:08:52.982 --> 00:08:55.632
So if we look at our graph by the way,
our graph looks so good.

178
00:08:55.632 --> 00:08:57.482
One line graph, just so sweet.

179
00:08:57.482 --> 00:09:01.402
Look at that little trapezoidal
type figure going on right there.

180
00:09:01.402 --> 00:09:03.479
But you can see that
every time it does that,

181
00:09:03.479 --> 00:09:06.470
we're just gonna have to keep
on doing these little merge fix.

182
00:09:06.470 --> 00:09:08.920
Also, it's like Google colors, strange.

183
00:09:08.920 --> 00:09:11.120
Okay, all right, takeaways.

184
00:09:11.120 --> 00:09:13.870
Once you resolve a conflict and
you don't merge it back up,

185
00:09:13.870 --> 00:09:16.350
you're gonna have problems over and
over again.

186
00:09:16.350 --> 00:09:19.938
Anytime you're diverging in history,
you're just gonna have merge conflicts or

187
00:09:19.938 --> 00:09:21.794
merge commits every single time you pull.

188
00:09:21.794 --> 00:09:25.484
So keep yourself in sync as much
as possible, it avoids these.

189
00:09:25.484 --> 00:09:28.695
Let's do a conflict, but
this time let's do it with rebase.

190
00:09:28.695 --> 00:09:31.415
Cuz remember, rebase is
fundamentally different than merge.

191
00:09:31.415 --> 00:09:34.507
Merge finds the best common ancestor,
replays those things,

192
00:09:34.507 --> 00:09:36.675
creates a merge commit, and that's that.

193
00:09:36.675 --> 00:09:40.445
Whereas rebase will actually move
your changes forward to the tip and

194
00:09:40.445 --> 00:09:44.865
then replay a change at a time which means
that different things can happen during

195
00:09:44.865 --> 00:09:45.581
a conflict.

196
00:09:46.711 --> 00:09:49.599
Again, I wanna make sure
everybody remembers,

197
00:09:49.599 --> 00:09:54.820
with rebase moves everything forward plays
the commits one at a time, very important.

198
00:09:54.820 --> 00:09:58.626
Which means it also checks
out the target branch or

199
00:09:58.626 --> 00:10:01.351
the source branch then replays it.

200
00:10:01.351 --> 00:10:02.575
It's very important to remember that.

201
00:10:02.575 --> 00:10:05.834
Because it's gonna kind
of see how this works.

202
00:10:05.834 --> 00:10:09.204
All right, so
now here's another interesting thing.

203
00:10:09.204 --> 00:10:12.584
Let's pretend that C and G had a conflict.

204
00:10:12.584 --> 00:10:13.294
We had to resolve it.

205
00:10:14.494 --> 00:10:19.304
What happened if we get another change
upstream and then we rebase again?

206
00:10:20.694 --> 00:10:26.517
Are we gonna get another conflict
Why should we or why should we not?

207
00:10:31.044 --> 00:10:33.672
&gt;&gt; Do you still have the conflicting
change that still gonna conflict?

208
00:10:33.672 --> 00:10:36.363
&gt;&gt; Yeah, cuz remember,
we take our commits,

209
00:10:36.363 --> 00:10:40.871
we then check out the branch we're trying
to rebase on, we go to the end and

210
00:10:40.871 --> 00:10:43.073
we replay our commits one at a time.

211
00:10:43.073 --> 00:10:46.122
Which means if we replay
a commit that conflicts,

212
00:10:46.122 --> 00:10:49.398
it will conflict again and
again and again and again.

213
00:10:49.398 --> 00:10:52.018
Now there is a resolution around this.

214
00:10:52.018 --> 00:10:56.239
It's in that, it's a such an unheard-of
option that you can even use it in

215
00:10:56.239 --> 00:10:59.388
a sentence to somebody's face and
they won't even know

216
00:10:59.388 --> 00:11:03.847
you are telling them the solution
because of how fun it is, all right?

217
00:11:03.847 --> 00:11:05.492
It's just the best.

218
00:11:05.492 --> 00:11:07.132
All right, so let's do this again.

219
00:11:07.132 --> 00:11:09.076
It's fun, we're a masochists,
we're computer scientists.

220
00:11:09.076 --> 00:11:10.967
We gotta make sure that we
experience this over and over again.

221
00:11:10.967 --> 00:11:15.738
I just wanna make sure that, yeah, so
the first thing we wanna do is let's make

222
00:11:15.738 --> 00:11:19.257
sure we first have no more merge commits,
any more of that.

223
00:11:19.257 --> 00:11:21.841
So let's get our branch
in sync with hello.

224
00:11:21.841 --> 00:11:24.591
So I'm gonna push from
remote to hello right now.

225
00:11:24.591 --> 00:11:26.341
We don't want any more merge commits.

226
00:11:26.341 --> 00:11:29.152
So push git push.

227
00:11:29.152 --> 00:11:31.857
Does anyone know what happened here?

228
00:11:31.857 --> 00:11:34.335
You probably got the same error
if you've been paying attention.

229
00:11:37.850 --> 00:11:41.377
Read the error message,
read the friendly manual, as they say.

230
00:11:41.377 --> 00:11:42.557
Read the friendly error.

231
00:11:43.747 --> 00:11:45.387
I'm trying to push to trunk.

232
00:11:47.537 --> 00:11:52.780
What am I currently checked
out on in hello-git, trunk.

233
00:11:52.780 --> 00:11:55.632
Do you think it'd be good if you were
programming and someone could push to

234
00:11:55.632 --> 00:11:58.258
your branch in such a way that would
change it out of underneath you?

235
00:11:58.258 --> 00:11:59.466
What could possibly go wrong?

236
00:11:59.466 --> 00:12:00.375
We're doing it live.

237
00:12:00.375 --> 00:12:03.145
This is like hot reloading,
but of your entire code base.

238
00:12:03.145 --> 00:12:07.275
So instead, you probably want
to go get checkout bar, go back,

239
00:12:07.275 --> 00:12:10.645
then push it, which works perfectly fine.

240
00:12:10.645 --> 00:12:12.115
Then you can get checkout trunk.

241
00:12:13.285 --> 00:12:13.955
There you go.

242
00:12:13.955 --> 00:12:14.905
Think about that.

243
00:12:14.905 --> 00:12:16.465
GitHub has to do the same thing, right?

244
00:12:16.465 --> 00:12:20.182
They can't have trunk checked out
in whatever way they're managing

245
00:12:20.182 --> 00:12:23.533
your repo up there,
it would have the exact same problem.

246
00:12:23.533 --> 00:12:28.113
It's kind of like a fun little
don't do that type thing.

247
00:12:28.113 --> 00:12:31.504
Anyways, it's just a problem you pretty
much never run into, cuz normally you

248
00:12:31.504 --> 00:12:35.503
don't have two of the exact same repos
on your machine that you're pushing to.

249
00:12:35.503 --> 00:12:36.623
Fun little experience right there.

250
00:12:36.623 --> 00:12:38.283
All right, awesome.

251
00:12:38.283 --> 00:12:40.897
I just wanted to go over
that just because it's fun.

252
00:12:40.897 --> 00:12:43.085
If you looked at it,
you'd see this remote rejected.

253
00:12:43.085 --> 00:12:44.628
It's currently checked out.

254
00:12:44.628 --> 00:12:45.728
It tells you right there in the air.

255
00:12:45.728 --> 00:12:46.898
Just kind of hard to see.

256
00:12:46.898 --> 00:12:47.917
All right, so we did all that.

257
00:12:47.917 --> 00:12:49.424
We changed branches, fantastic.

