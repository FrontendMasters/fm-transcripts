WEBVTT

1
00:00:00.177 --> 00:00:02.978
This will be kind of a weird tasks to do,
but it'll be fun.

2
00:00:02.978 --> 00:00:05.728
What I want you to do is I want
you to create a branch called baz.

3
00:00:05.728 --> 00:00:08.153
I think currently we are on foo.

4
00:00:08.153 --> 00:00:10.182
You can create on whatever you want.

5
00:00:10.182 --> 00:00:12.412
It doesn't matter about
the the baz branch or

6
00:00:12.412 --> 00:00:16.063
branching off of once you create a branch
or I guess I say do it off of trunk.

7
00:00:16.063 --> 00:00:16.903
It really doesn't matter.

8
00:00:16.903 --> 00:00:21.444
But let's just for now, just say create
a branch off of trunk called baz.

9
00:00:21.444 --> 00:00:25.027
Add one commit to baz and
do it in a new file, right?

10
00:00:25.027 --> 00:00:27.530
Don't do it in read me,
do it in a new file.

11
00:00:27.530 --> 00:00:31.527
Switch back to trunk and then delete baz.

12
00:00:31.527 --> 00:00:36.129
And then I want you to bring baz
back to life from just the sha.

13
00:00:38.381 --> 00:00:41.612
And we can discuss how you do that,
so first do the first three, and

14
00:00:41.612 --> 00:00:45.047
then we'll kind of talk more about
this last one, and I'll join you.

15
00:00:45.047 --> 00:00:51.210
I'll go git checkout trunk,
git checkout -bbaz,

16
00:00:51.210 --> 00:00:55.130
echo, bazzy, to baz, git add,

17
00:00:55.130 --> 00:01:00.312
git commit, definitely my best work here,

18
00:01:00.312 --> 00:01:05.934
git checkout trunk,
git branch -Delete baz.

19
00:01:05.934 --> 00:01:09.635
Dang it, I just lost all that work.

20
00:01:09.635 --> 00:01:12.535
And, darn it,
I just lost all my history too.

21
00:01:12.535 --> 00:01:16.007
I could have probably recovered it if I
didn't Ctrl + L but now look at this,

22
00:01:16.007 --> 00:01:17.921
I'm up a river without a paddle, right?

23
00:01:17.921 --> 00:01:20.885
Well, hopefully you don't think that.

24
00:01:20.885 --> 00:01:23.756
I think this is a fun kind
of exercise to go on.

25
00:01:23.756 --> 00:01:27.171
So let's first use Reflog and
let's recover our sha.

26
00:01:27.171 --> 00:01:31.973
So what I'll do is I'll go like this, git
reflog, I know it's in the last couple, so

27
00:01:31.973 --> 00:01:36.176
why not just do a -5 so you don't see
your entire history and look at this,

28
00:01:36.176 --> 00:01:37.678
definitely my best work.

29
00:01:37.678 --> 00:01:39.200
Okay that's the shop.

30
00:01:39.200 --> 00:01:45.633
We have the sha from that commit,
which means what can we do with a sha?

31
00:01:45.633 --> 00:01:46.810
&gt;&gt; Hook it up.

32
00:01:46.810 --> 00:01:48.559
&gt;&gt; Rebuild the whole repo.

33
00:01:48.559 --> 00:01:53.258
&gt;&gt; We can rebuild the entire repo just
from this one little tiny sha, right?

34
00:01:53.258 --> 00:01:57.887
Remember git cat-file -p,
this, look at that.

35
00:01:57.887 --> 00:01:59.039
It's right there.

36
00:01:59.039 --> 00:02:02.724
It's still in Git just because we deleted
the branch did not mean we deleted what

37
00:02:02.724 --> 00:02:03.610
you just changed.

38
00:02:03.610 --> 00:02:09.984
It's in git, the files are in
the computer, as a wise man once told me.

39
00:02:09.984 --> 00:02:14.324
&gt;&gt; So if you delete a baz branch because
there's still that snippet of history in

40
00:02:14.324 --> 00:02:18.865
your local computer, is there any instance
where you can delete the branch using

41
00:02:18.865 --> 00:02:23.498
the good get CLI-d but also delete it from
the source of truth in the .git folder?

42
00:02:23.498 --> 00:02:24.225
&gt;&gt; There might be.

43
00:02:24.225 --> 00:02:27.073
I've never actually tried that so
I have no idea.

44
00:02:27.073 --> 00:02:29.412
My guess is no.

45
00:02:29.412 --> 00:02:33.194
But there's a ton of options, so it also
wouldn't be surprising if you could,

46
00:02:33.194 --> 00:02:33.765
all right?

47
00:02:33.765 --> 00:02:34.599
Yes, there is?

48
00:02:34.599 --> 00:02:37.587
Okay, yeah.

49
00:02:37.587 --> 00:02:40.881
People are saying there is,
but I have no idea.

50
00:02:40.881 --> 00:02:42.630
Never trust the Internet.

51
00:02:42.630 --> 00:02:43.661
Trust the man page.

52
00:02:43.661 --> 00:02:44.606
I bet you it's in there.

53
00:02:44.606 --> 00:02:48.767
All right, problem, with our sweet
knowledge of how git plumbing works,

54
00:02:48.767 --> 00:02:52.996
can you retrieve the contents of the
commit using our super awesome powers to

55
00:02:52.996 --> 00:02:54.068
grab our baz.md?

56
00:02:54.068 --> 00:02:55.701
Can you do that?

57
00:02:55.701 --> 00:03:01.054
You have the sha,
try to get out what was in baz.md,

58
00:03:01.054 --> 00:03:04.833
not from your memory, but from git.

59
00:03:04.833 --> 00:03:10.171
So we can use git cat file -p with that,
I can go into the tree,

60
00:03:10.171 --> 00:03:15.816
git cat-file -p that,
I can see my little baz file right there,

61
00:03:15.816 --> 00:03:22.095
and then I can git cat-file -p,
that thing, and look at that, bazzy.

62
00:03:22.095 --> 00:03:26.777
I recovered it walking the sha's
all the way to the exact file.

63
00:03:26.777 --> 00:03:31.103
So I could take this, and I could cat
that, and I could pipe that into baz.md,

64
00:03:31.103 --> 00:03:34.250
and then I could get status,
and look at that, git diff,

65
00:03:34.250 --> 00:03:38.345
we actually don't have anything in
there because it hasn't been added.

66
00:03:38.345 --> 00:03:42.692
We could add that and
then git diff staged.

67
00:03:42.692 --> 00:03:45.959
And look at that, there's bazzy,
it's a new file right here.

68
00:03:45.959 --> 00:03:48.010
My goodness, I've just recovered it.

69
00:03:48.010 --> 00:03:50.859
And I feel like a hacker, right?

70
00:03:50.859 --> 00:03:52.909
I mean, there is actually
easier ways to do this, but

71
00:03:52.909 --> 00:03:54.239
that was just kind of fun, right?

72
00:03:54.239 --> 00:03:58.034
Peer wizardry, you do this at your job,
you're getting a promotion.

73
00:03:58.034 --> 00:04:00.626
Just right off the bad, Brent, CTO,

74
00:04:00.626 --> 00:04:05.334
Frontend Masters will just hire you
as the new CTO, just doing this.

75
00:04:05.334 --> 00:04:07.710
All right, let's not use the internals.

76
00:04:07.710 --> 00:04:08.940
Is there another way?

77
00:04:08.940 --> 00:04:10.493
I mean, it's great flexing, right?

78
00:04:10.493 --> 00:04:13.708
You should always flex that work when
you can, but maybe you don't have to.

79
00:04:13.708 --> 00:04:16.051
Is there a easier way to do this?

80
00:04:16.051 --> 00:04:20.457
Well, you can always just do the,
unfortunately the,

81
00:04:20.457 --> 00:04:23.378
hair hot, I'll go with git reflog.

82
00:04:23.378 --> 00:04:27.612
And we just have this thing out right here
&gt;&gt; In chat someone

83
00:04:27.612 --> 00:04:32.418
mentioned cherry-pick
&gt;&gt; Right, so

84
00:04:32.418 --> 00:04:37.471
one thing I can do if I really
wanted that change in trunk,

85
00:04:37.471 --> 00:04:40.331
I could git merge just that sha.

86
00:04:40.331 --> 00:04:41.588
I already have the sha, right?

87
00:04:41.588 --> 00:04:42.879
I could just bring it in.

88
00:04:42.879 --> 00:04:45.561
Git still has the state,
boom, look at that.

89
00:04:45.561 --> 00:04:46.659
Baz is now in trunk.

90
00:04:46.659 --> 00:04:48.127
Wow, that was magical, right?

91
00:04:48.127 --> 00:04:49.800
We didn't have to do all
that hacker man stuff.

92
00:04:49.800 --> 00:04:52.795
We just simply needed the sha and
then we can just merge it into trunk.

93
00:04:52.795 --> 00:04:54.812
Now I have baz right there.

94
00:04:54.812 --> 00:04:57.254
It's just right there.

95
00:04:57.254 --> 00:04:59.125
Kind of interesting, right?

96
00:04:59.125 --> 00:05:00.658
You might not have seen that one coming.

97
00:05:03.104 --> 00:05:04.333
So we can do that.

98
00:05:04.333 --> 00:05:07.098
But there is a problem with merge.

99
00:05:07.098 --> 00:05:09.390
What happened if there was a lot
of diverging that happened?

100
00:05:09.390 --> 00:05:13.268
What happen if there was
a bunch of commits in betwixt,

101
00:05:13.268 --> 00:05:17.919
my trunk head and that commit,
what would happen if we merged it?

102
00:05:17.919 --> 00:05:20.292
We'd all that history, right?

103
00:05:20.292 --> 00:05:24.669
Cuz it's gonna try to find what does it do
again, it walks back, it finds the merge

104
00:05:24.669 --> 00:05:29.113
base or the best common ancestor, and then
it replays all of those potentially into

105
00:05:29.113 --> 00:05:33.136
a third branch and then does a merge
commit if the histories have diverged.

106
00:05:33.136 --> 00:05:37.468
So you may not want to do all that,
right, that may be kind of a pain,

107
00:05:37.468 --> 00:05:41.119
maybe you just want that commit and
not everything else.

108
00:05:41.119 --> 00:05:43.807
Well, I don't know if you
know about cherry-pick,

109
00:05:43.807 --> 00:05:47.110
probably have never even heard
the term until this exact moment.

110
00:05:47.110 --> 00:05:52.790
But cherry-pick allows you to take
just one or more commits specifically.

111
00:05:52.790 --> 00:05:53.739
Cherry-pick is fantastic.

112
00:05:53.739 --> 00:05:57.375
I've used this probably as,
one of my 20% commands,

113
00:05:57.375 --> 00:05:59.662
I probably have used this the most.

114
00:05:59.662 --> 00:06:04.115
It's just because anytime I have just that
change, I don't want to merge, I just want

115
00:06:04.115 --> 00:06:08.155
this one diff cherry-pick it in and
it works with remotes, it's fantastic.

116
00:06:08.155 --> 00:06:11.574
As long as you are up to date with your
remote and you have all the changes from

117
00:06:11.574 --> 00:06:15.450
them, you can just cherry-pick a singular
commit into your project if you need to.

118
00:06:15.450 --> 00:06:17.794
It does require your
working tree to be clean.

119
00:06:17.794 --> 00:06:20.758
Remember working tree is just
the state of your project,

120
00:06:20.758 --> 00:06:24.896
your everything that's been tracked by
Git, so no changes to your working tree

121
00:06:24.896 --> 00:06:28.372
and then you can cherry-pick and
no changes to your index either.

122
00:06:28.372 --> 00:06:31.860
Sometimes if you have like index problems
you can it will say no index against

123
00:06:31.860 --> 00:06:32.740
the staging area.

124
00:06:32.740 --> 00:06:36.572
Remember, it's not necessarily
your working tree.

125
00:06:36.572 --> 00:06:42.250
So there you go, so, git cherry-pick,
try it, if you haven't done it, see

126
00:06:42.250 --> 00:06:48.031
if you can cherry-pick the change of baz
into trunk, if you did not merge it in.

127
00:06:48.031 --> 00:06:52.171
Cuz I know some of you aren't
necessarily following, if you didn't,

128
00:06:52.171 --> 00:06:54.311
you can do that, pretty fantastic.

129
00:06:54.311 --> 00:06:59.106
So, all you have to do is of course,
get cherry-pick and the shell, and

130
00:06:59.106 --> 00:07:01.157
it will just merge it right in.

131
00:07:01.157 --> 00:07:02.635
Fantastic.

132
00:07:02.635 --> 00:07:07.011
A really real talk it is like
by far one of the my most used

133
00:07:07.011 --> 00:07:10.446
commands is cherry-pick, absolutely.

134
00:07:10.446 --> 00:07:12.615
Just has saved my bacon more than once,

135
00:07:12.615 --> 00:07:16.888
cuz have you ever had like a change that
has diverged so bad due to something and

136
00:07:16.888 --> 00:07:20.474
then you just git the merge
conflict is just incomprehensible.

137
00:07:20.474 --> 00:07:21.502
And this has happened to me.

138
00:07:21.502 --> 00:07:23.449
And luckily,
you've made some small commits and

139
00:07:23.449 --> 00:07:24.802
you haven't made one big commit.

140
00:07:24.802 --> 00:07:28.524
You're like, I'm just gonna take out
these two things, play them over here and

141
00:07:28.524 --> 00:07:30.121
then try to rebuild the rest of it.

142
00:07:30.121 --> 00:07:34.129
I've been in a situation where there was
such a bad divergence that the only way

143
00:07:34.129 --> 00:07:36.982
forward was to actually just
hand move things over, and

144
00:07:36.982 --> 00:07:38.513
that was with cherry-pick.

145
00:07:38.513 --> 00:07:41.292
It was fantastic, I'm not gonna draw it
out I think everybody understands this

146
00:07:41.292 --> 00:07:42.548
we've talked about it quite a bit.

