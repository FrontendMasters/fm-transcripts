WEBVTT

1
00:00:00.100 --> 00:00:01.556
We're gonna go into git branching.

2
00:00:01.556 --> 00:00:06.950
First off, you should not develop
everything on the main line, okay?

3
00:00:06.950 --> 00:00:10.415
That'd be kinda crazy if all you ever did
is just simply use whatever your main

4
00:00:10.415 --> 00:00:12.565
line is and
just put all of your changes on that.

5
00:00:12.565 --> 00:00:16.800
But I'm gonna be a little honest with
you guys, when it's just my project,

6
00:00:16.800 --> 00:00:19.160
I only develop on main and that's it.

7
00:00:19.160 --> 00:00:20.619
That's all there is to it.

8
00:00:20.619 --> 00:00:23.666
But if I'm working with somebody else,
you should branch.

9
00:00:23.666 --> 00:00:27.009
Branches are pretty much cheap,
they're almost free.

10
00:00:27.009 --> 00:00:29.546
So you can create as many
of them as you'd like, and

11
00:00:29.546 --> 00:00:34.059
it's really not gonna create a problem for
you, for your system, for memory.

12
00:00:34.059 --> 00:00:38.099
Again, every branch will be pointing to a
commit, which will contain the entirety of

13
00:00:38.099 --> 00:00:41.897
your repo, but they're free,
almost at the exact same time.

14
00:00:41.897 --> 00:00:43.007
We'll find out why.

15
00:00:43.007 --> 00:00:44.934
Since we're on a new repo,
let's create our initial commit.

16
00:00:44.934 --> 00:00:47.917
Cuz remember, whenever you start a repo,
there's no commits in there.

17
00:00:47.917 --> 00:00:49.889
So it's empty,
you can't even create a branch right now,

18
00:00:49.889 --> 00:00:50.937
things are all goofed up.

19
00:00:50.937 --> 00:00:52.517
So let's just create a quick change.

20
00:00:52.517 --> 00:00:56.634
And I want you to have a README.md
with one line, put A in there, and

21
00:00:56.634 --> 00:00:58.596
then with a commit message of A.

22
00:00:58.596 --> 00:01:02.580
It's very important that you use these
commit messages more than anything else,

23
00:01:02.580 --> 00:01:06.675
because if you don't, you will probably
get a little bit confused with the course,

24
00:01:06.675 --> 00:01:07.758
so I'll do it, too.

25
00:01:07.758 --> 00:01:12.183
README.md, I'll put in a nice little A.

26
00:01:12.183 --> 00:01:14.652
Git add this, git status, git commit.

27
00:01:14.652 --> 00:01:17.013
By the way,
always use status before you commit.

28
00:01:17.013 --> 00:01:20.515
Make sure you don't accidentally, say,
commit and outfile by accident while

29
00:01:20.515 --> 00:01:23.552
teaching a course on git and
showing people how to properly use it.

30
00:01:23.552 --> 00:01:27.242
And of course, message A cuz we
want to keep track of this, okay?

31
00:01:27.242 --> 00:01:28.440
So there we go.

32
00:01:28.440 --> 00:01:31.088
You can do a little quick git log and
see, look at that.

33
00:01:31.088 --> 00:01:34.988
Hey, fantastic.

34
00:01:34.988 --> 00:01:41.064
All right, so let's create a branch and
we're gonna call this branch, foo.

35
00:01:41.064 --> 00:01:42.400
Why, cuz I say so.

36
00:01:42.400 --> 00:01:45.144
I know some people hate foo and
bar as example things.

37
00:01:45.144 --> 00:01:46.149
I love foo and bar, okay?

38
00:01:46.149 --> 00:01:49.037
I don't know why everyone has to
hate foo and bar, it's fantastic.

39
00:01:49.037 --> 00:01:52.884
All right, git branch foo,
this is how you create a branch.

40
00:01:52.884 --> 00:01:54.404
We just created it right now.

41
00:01:55.734 --> 00:01:57.424
Was this your expectation
when you create a branch?

42
00:01:59.744 --> 00:02:00.244
Yes or no?

43
00:02:02.304 --> 00:02:03.369
&gt;&gt; Yes, but I'm used to it.

44
00:02:03.369 --> 00:02:04.560
&gt;&gt; Yes, cuz you're used to it.

45
00:02:04.560 --> 00:02:06.684
That's actually the proper
answer right there.

46
00:02:06.684 --> 00:02:09.229
If you're new to git,
that was a weird experience.

47
00:02:09.229 --> 00:02:11.964
You just created a branch and
nothing happened, right?

48
00:02:11.964 --> 00:02:14.114
You're just still sitting there,
you're on trunk.

49
00:02:14.114 --> 00:02:14.729
Where am I?

50
00:02:14.729 --> 00:02:16.174
Why did this happen?

51
00:02:16.174 --> 00:02:17.284
I wanna go home.

52
00:02:17.284 --> 00:02:19.219
Well, guess what?
You already are at home.

53
00:02:19.219 --> 00:02:23.984
The thing is that when you create a
branch, it creates a branch at the commit

54
00:02:23.984 --> 00:02:28.219
you're currently on, but
it does not switch branches.

55
00:02:28.219 --> 00:02:30.541
There's actually a couple ways you can,
first off,

56
00:02:30.541 --> 00:02:33.989
you can check out any branch you have so
I can actually execute git branch.

57
00:02:33.989 --> 00:02:35.549
You should do this right now.

58
00:02:35.549 --> 00:02:38.935
Use git branch, check it out.

59
00:02:38.935 --> 00:02:43.327
I talk about log as well, so
you can go git branch, check that out,

60
00:02:43.327 --> 00:02:47.265
you see I'm still on trunk,
but I do have a foo now.

61
00:02:47.265 --> 00:02:51.974
If you go git log, you'll see head
points to trunk, that's where I'm at,

62
00:02:51.974 --> 00:02:53.456
but there's also foo.

63
00:02:53.456 --> 00:02:56.912
Foo's at the exact same place,
cuz remember when you create a branch,

64
00:02:56.912 --> 00:02:59.476
it branches off wherever you're at.

65
00:02:59.476 --> 00:03:01.526
At this moment, very important.

66
00:03:01.526 --> 00:03:03.308
Some people only know that by accident.

67
00:03:03.308 --> 00:03:06.036
They haven't really ever thought about it,
but yes,

68
00:03:06.036 --> 00:03:08.781
it's literally pointing to
the same commit, right?

69
00:03:08.781 --> 00:03:09.655
We've already talked about it.
By the way,

70
00:03:09.655 --> 00:03:11.836
the asterisk is the one that's
telling you where you're at.

71
00:03:11.836 --> 00:03:13.124
If you don't have colors,

72
00:03:13.124 --> 00:03:16.490
if it's not green, the asterisk is
supposed to be the one, all right?

73
00:03:16.490 --> 00:03:18.089
Let's do a little bit of git foo.

74
00:03:18.089 --> 00:03:19.638
Can you find your branch
details in docket.

75
00:03:25.090 --> 00:03:29.806
See, look, take a moment, explore.

76
00:03:31.253 --> 00:03:32.217
&gt;&gt; Refs heads foo.

77
00:03:35.776 --> 00:03:39.850
&gt;&gt; Give you a little hint,
go check out refs, so I'll go like this.

78
00:03:39.850 --> 00:03:45.886
Git/refs/heads/foo/trunk look at that.

79
00:03:45.886 --> 00:03:48.306
So I can actually cat that out.

80
00:03:48.306 --> 00:03:50.786
Hey, that's my zsh.

81
00:03:50.786 --> 00:03:55.422
The branch is just exists in this
heads folder as just a zsh so

82
00:03:55.422 --> 00:03:59.211
that git,
remember what did we do with a shot?

83
00:03:59.211 --> 00:04:04.519
When I can add a file of a zsh,
right, I go git cat-file -p.

84
00:04:04.519 --> 00:04:06.283
It then shows my tree, right?

85
00:04:06.283 --> 00:04:09.253
So this is how git kinda understands and

86
00:04:09.253 --> 00:04:13.757
is able to build the state of
your repo based off of a branch.

87
00:04:13.757 --> 00:04:17.351
A branch is just a zsh,
a zsh is the state of your repo.

88
00:04:17.351 --> 00:04:20.943
It's not a differential, that's why it's
always able to do it and do it so fast.

89
00:04:20.943 --> 00:04:24.793
That's why branches are effectively free,
it's just 40 characters in the file.

90
00:04:26.573 --> 00:04:29.783
Name, so it's like 45 characters for
our case.

91
00:04:29.783 --> 00:04:31.692
Anyways, so
if you want to switch branches,

92
00:04:31.692 --> 00:04:34.073
you can actually do git switch or
checkout.

93
00:04:34.073 --> 00:04:36.803
I'm just used to using checkout,
so I just use checkout.

94
00:04:36.803 --> 00:04:38.338
You can use switch if you want to.

95
00:04:38.338 --> 00:04:42.670
There are effectively identical for the
standard cases I read on the internet, so

96
00:04:42.670 --> 00:04:43.802
it must be true.

97
00:04:43.802 --> 00:04:45.977
That checkout is more versatile but

98
00:04:45.977 --> 00:04:49.745
I only use checkout to create a branch or
to switch to a branch or

99
00:04:49.745 --> 00:04:54.162
to do something with merge conflicts
which we'll talk about later.

100
00:04:54.162 --> 00:04:58.012
So pretty much, I just use it for
the most basic operations.

101
00:04:58.012 --> 00:04:59.651
And so, switch to branch foo.

102
00:05:00.731 --> 00:05:05.371
So I'll go git check out foo
look at that we're on branch

103
00:05:05.371 --> 00:05:10.191
foo how fantastic, t's beautiful, right?

104
00:05:10.191 --> 00:05:13.604
There we go, it even tells you you've
switched to branch foo awesome, all right?

105
00:05:13.604 --> 00:05:16.188
So now that you're in foo let's create
another commit with the message B.

106
00:05:16.188 --> 00:05:19.342
Again please follow along with the exact,
name, messages,

107
00:05:19.342 --> 00:05:20.988
very, very important, okay?

108
00:05:20.988 --> 00:05:24.678
So we're gonna create B, and
then we're gonna also create C.

109
00:05:24.678 --> 00:05:25.528
So I'll do that with you.

110
00:05:25.528 --> 00:05:27.948
And when we're finished,
let's look at the log.

111
00:05:27.948 --> 00:05:30.220
So I'm gonna go Vim README.

112
00:05:30.220 --> 00:05:34.668
I'm gonna create B, git status,
see that it's there.

113
00:05:34.668 --> 00:05:36.979
Git add, git status,
make sure I have it right.

114
00:05:36.979 --> 00:05:38.278
If you wanna get into that habit.

115
00:05:38.278 --> 00:05:41.596
It's a good habit and then B,
very important, okay?

116
00:05:41.596 --> 00:05:45.496
And then I'll just echo C into README,
just to make it easy,

117
00:05:45.496 --> 00:05:47.796
cuz I already know what I'm doing.

118
00:05:49.826 --> 00:05:52.020
And then there we go, C.

119
00:05:55.177 --> 00:05:59.851
Arrow, arrow just means pipe out
whatever output into a file,

120
00:05:59.851 --> 00:06:03.826
don't overwrite the file,
add it to the end.

121
00:06:03.826 --> 00:06:05.976
It's just a pen to a file,
for those that don't know.

122
00:06:05.976 --> 00:06:11.141
So let's use git log and see if we have
this successful setup right here, right?

123
00:06:11.141 --> 00:06:13.116
This is hopefully our setup right here.

124
00:06:14.366 --> 00:06:18.186
A points to trunk or
trunk points to A and foo points to C.

125
00:06:18.186 --> 00:06:22.929
So if I go in here and just go git log,
you'll see right here,

126
00:06:22.929 --> 00:06:25.177
foo is C, A is trunk.

127
00:06:25.177 --> 00:06:29.467
Fantastic, we have built
that graph in git.

128
00:06:29.467 --> 00:06:33.195
If you do git log with a graph, you'll
see this nice straight line cuz, well,

129
00:06:33.195 --> 00:06:35.887
our history is pretty
uninteresting right now.

130
00:06:35.887 --> 00:06:36.897
Nothing to it.

131
00:06:36.897 --> 00:06:39.899
I don't know if I save this yet,
we can also add one line,

132
00:06:39.899 --> 00:06:42.290
tends to make things
look a little bit nicer.

133
00:06:42.290 --> 00:06:44.364
You don't have to look at
like the entirety of it.

134
00:06:44.364 --> 00:06:47.500
I think at some point I start using
it within this presentation, but

135
00:06:47.500 --> 00:06:50.197
just makes life a little bit easier.

136
00:06:50.197 --> 00:06:52.293
Already went all over this, great time.

137
00:06:52.293 --> 00:06:53.377
Look, there it is.

138
00:06:53.377 --> 00:06:55.043
One line, if you haven't,
try out all three options.

139
00:06:55.043 --> 00:06:55.807
It's fantastic.

140
00:06:55.807 --> 00:06:59.126
All right, so you can delete
branches with -d or capital D,

141
00:06:59.126 --> 00:07:03.242
the capital D is if you're not in sync
with your track branch on the remote.

142
00:07:03.242 --> 00:07:04.406
I don't think I go over that.

143
00:07:04.406 --> 00:07:05.311
Don't worry about that.

144
00:07:05.311 --> 00:07:08.455
You mostly won't ever run into that for
the most part.

145
00:07:08.455 --> 00:07:09.094
But you can delete branches.

146
00:07:09.094 --> 00:07:12.860
That's probably the only important
thing if you forget man git- delete or

147
00:07:12.860 --> 00:07:16.326
git -branch you'll be able to find
out more information about it and

148
00:07:16.326 --> 00:07:18.439
why you have to use capital D, all right?

149
00:07:18.439 --> 00:07:19.529
So commits are locked in.

150
00:07:19.529 --> 00:07:21.331
So now that we have a branch
full of changes, what do we do?

151
00:07:23.481 --> 00:07:24.671
Anybody?

152
00:07:24.671 --> 00:07:25.571
&gt;&gt; Merge.

153
00:07:25.571 --> 00:07:26.117
&gt;&gt; Merge.
Hey,

154
00:07:26.117 --> 00:07:28.697
that's like foreshadowing practically,
all right?

155
00:07:28.697 --> 00:07:31.540
So prerequisite long as you have this
setup right here, we can continue.

156
00:07:31.540 --> 00:07:33.241
I assume everybody has this set up.

157
00:07:33.241 --> 00:07:34.791
So let's go problem.

158
00:07:34.791 --> 00:07:37.370
Start off by creating more commits and
adding them to trunk.

159
00:07:37.370 --> 00:07:43.990
So I want you to create commits D and
E to trunk the same way we added B and C.

160
00:07:43.990 --> 00:07:46.050
So this is really the end
state that I want to see.

161
00:07:46.050 --> 00:07:51.930
I wanna see two branches that have
diverged, ABC for foo, ADE for trunk.

162
00:07:53.470 --> 00:07:55.589
I'll do it myself.
Git checkout trunk.

163
00:07:58.974 --> 00:07:59.879
D to README.

164
00:08:06.231 --> 00:08:10.701
E to README added committed with
you make sure you proper message

165
00:08:10.701 --> 00:08:14.274
this one it just makes life
easier to follow along.

166
00:08:15.945 --> 00:08:21.582
There we go and I can do a nice little
git log one line and you can see EDA.

167
00:08:26.609 --> 00:08:28.143
All right, fantastic.

168
00:08:28.143 --> 00:08:29.444
You should have these
two lines now set up.

169
00:08:29.444 --> 00:08:32.111
This is your following repo setup.

170
00:08:34.244 --> 00:08:38.290
You can check logs to make sure you have
that and make sure your trunk is EDA.

171
00:08:39.941 --> 00:08:41.468
All right, so merge and rebase.

172
00:08:41.468 --> 00:08:47.133
Remember, a commit is just the entire
code base at a specific point in time.

173
00:08:47.133 --> 00:08:48.286
We have worked on, it's on another branch.

174
00:08:48.286 --> 00:08:49.627
We need to get back to trunk.

175
00:08:49.627 --> 00:08:52.943
One of the couple ways you
can do that is with merge.

176
00:08:52.943 --> 00:08:54.543
Merge is one strategy.

177
00:08:54.543 --> 00:08:59.081
It has slightly different outcomes
depending on how the history of

178
00:08:59.081 --> 00:09:01.859
the two branches are currently in.

179
00:09:01.859 --> 00:09:04.712
And so that's where merge can
get a little bit confusing for

180
00:09:04.712 --> 00:09:07.749
people is cuz you don't always
get the same result with merge.

181
00:09:08.779 --> 00:09:09.332
So what is merge?

182
00:09:09.332 --> 00:09:12.473
Merge is attempting to combine two
histories together that have diverged at

183
00:09:12.473 --> 00:09:13.409
some point.

184
00:09:13.409 --> 00:09:17.194
There's something called
the best common ancestor or

185
00:09:17.194 --> 00:09:21.139
it will be referred to often
as the merge base in the docs,

186
00:09:21.139 --> 00:09:25.742
that just simply means the first
known in common parent.

187
00:09:25.742 --> 00:09:32.705
So since it goes A, B, C for foo and A,D,E
for trunk, A is the best common ancestor.

188
00:09:32.705 --> 00:09:34.837
They're both branched off as one point.

189
00:09:36.736 --> 00:09:40.619
Git then when it tries to merge, we'll
find the best common ancestor, and then it

190
00:09:40.619 --> 00:09:44.223
will play your commits from both branches
onto this best common ancestor and

191
00:09:44.223 --> 00:09:45.371
create a merge commit.

192
00:09:45.371 --> 00:09:47.930
That's why you see these merge commits,

193
00:09:47.930 --> 00:09:52.336
it's because it needs to combine
both D and E and B and C together.

194
00:09:52.336 --> 00:09:55.948
And then you'll get like
a little commit message and

195
00:09:55.948 --> 00:09:58.586
an opportunity to time all together.

196
00:09:58.586 --> 00:10:01.002
So, merge is quite simple.

197
00:10:01.002 --> 00:10:03.673
Your branch that you're on is your target,

198
00:10:03.673 --> 00:10:08.219
the branch you're going to merge into it,
I will often call it the source or

199
00:10:08.219 --> 00:10:11.412
the target branch or
people think it's the target.

200
00:10:11.412 --> 00:10:14.273
It's not the target the source branch,
that's what you're merging onto your

201
00:10:14.273 --> 00:10:16.272
target branch is the one
you're currently on.

202
00:10:16.272 --> 00:10:19.069
So it's kinda like a slight flip
in your head, when you do it.

203
00:10:19.069 --> 00:10:20.314
It just so no one gets confused.

204
00:10:20.314 --> 00:10:24.309
And this is how you merge just git merge,
branch branch name.

205
00:10:24.309 --> 00:10:27.559
So, I want you to merge foo onto trunk.

206
00:10:27.559 --> 00:10:28.862
But when you do it,

207
00:10:28.862 --> 00:10:33.598
please create a new branch first off
of trunk called trunk merge foo.

208
00:10:33.598 --> 00:10:37.979
And when you're done, use git log to
see the state of trunk merge foo.

209
00:10:39.409 --> 00:10:42.091
I'll join you cool, and
then I'm gonna go git checked out B,

210
00:10:42.091 --> 00:10:43.805
I always do this to create a new branch.

211
00:10:43.805 --> 00:10:47.616
You can actually do git switched,
or git branch or

212
00:10:47.616 --> 00:10:53.613
git swish switch-C branch and that
will create the branch as it switches.

213
00:10:53.613 --> 00:10:57.935
So identical, just different options
because you know why haven't

214
00:10:57.935 --> 00:11:02.041
been the same [LAUGH] why would
you actually have a -B, all right?

215
00:11:02.041 --> 00:11:03.122
Foo already exists cool git check out foo,
all right?

216
00:11:03.122 --> 00:11:06.779
Awesome, git logged,
sorry that we have to redo this part, so

217
00:11:06.779 --> 00:11:09.548
I'm just gonna pretend
like this is brand new.

218
00:11:12.627 --> 00:11:17.900
It see it wasn't me or it was me the
killer was in the room this whole time.

219
00:11:17.900 --> 00:11:21.615
I actually put it right here, there you
go, see, but then when we go down here,

220
00:11:21.615 --> 00:11:25.331
notice that I put it right there, my bad
on that one really quickly here, just so

221
00:11:25.331 --> 00:11:26.181
I don't forget.

222
00:11:28.861 --> 00:11:34.873
Let's see,
let's go into branching, README,

223
00:11:34.873 --> 00:11:40.465
let's go right here and
then go, there we go.

224
00:11:41.575 --> 00:11:50.015
That will fix the problem when
I push it up, here not fixed.

225
00:11:51.425 --> 00:11:54.141
That's how you do proper message
by the way if anyone's wondering.

226
00:11:54.141 --> 00:11:56.663
So here in about a couple
moments that will be up and

227
00:11:56.663 --> 00:12:00.341
then this page will refresh and
everyone will be on the same page, okay?

228
00:12:00.341 --> 00:12:02.209
Good, I just wanted us all
to be on the same page.

229
00:12:03.339 --> 00:12:05.103
Fantastic, I don't know how long it takes.

230
00:12:05.103 --> 00:12:06.759
I think it takes two minutes for
it to build, so.

231
00:12:06.759 --> 00:12:11.232
All right, so don't add it to read
me by the way, everybody, so.

232
00:12:11.232 --> 00:12:14.481
All right, so now let's actually
add some commits to foo.

233
00:12:14.481 --> 00:12:15.926
We're gonna add two commits, B and C.

234
00:12:15.926 --> 00:12:19.788
Make sure you actually use B and C cuz
it makes everything easier to use and

235
00:12:19.788 --> 00:12:23.657
I have a small typo right here saying,
add the changes to README.

236
00:12:23.657 --> 00:12:26.887
Don't add them to README,
add them to a new file.

237
00:12:26.887 --> 00:12:29.966
I called the file second and
so you can do the same thing.

238
00:12:33.793 --> 00:12:37.497
All right, then we'll go from here.

239
00:12:37.497 --> 00:12:40.593
All right, so I'll go echo B into second,
remember that.

240
00:12:41.914 --> 00:12:47.250
Git add, Git commit -B and
I'll do it again with C.

241
00:12:52.475 --> 00:12:55.114
Fantastic, now I have
two commits into foo.

242
00:12:55.114 --> 00:12:57.024
We'll do a git log just to prove it.

243
00:12:57.024 --> 00:13:00.448
ABC right here, awesome.

244
00:13:00.448 --> 00:13:02.148
I'll give everyone a moment to catch up.

245
00:13:03.706 --> 00:13:06.614
All right, so you should now
have the repo set up like this.

246
00:13:06.614 --> 00:13:09.056
A should contain trunk,
B and C should be foo.

247
00:13:09.056 --> 00:13:15.278
We can go git log, just verify that
as a trunk set A foo, is that C.

248
00:13:15.278 --> 00:13:18.215
Awesome, foo C there we go.

249
00:13:18.215 --> 00:13:20.567
This is what I pretty
much executed right here.

250
00:13:20.567 --> 00:13:21.987
We added those two things.

251
00:13:21.987 --> 00:13:24.947
And when we do the log,
you can see trunks down here.

252
00:13:24.947 --> 00:13:28.609
Foo up here, remember your commits
won't match my commits totally normal.

253
00:13:28.609 --> 00:13:32.247
Again, totally based off of time,
author everything.

254
00:13:33.357 --> 00:13:34.746
Remember, you can delete branches.

255
00:13:34.746 --> 00:13:36.784
I don't know if you know that,
you do the D command.

256
00:13:36.784 --> 00:13:39.837
We will actually use it later,
I'm just putting it in here.

257
00:13:39.837 --> 00:13:41.559
Just remember that -d, deletes a branch.

258
00:13:41.559 --> 00:13:44.824
I always use capital D because
I don't want it to have to try

259
00:13:44.824 --> 00:13:48.307
to check against the origin to see,
can I delete this branch?

260
00:13:48.307 --> 00:13:50.556
Is it up to date with what
I'm tracking against?

261
00:13:50.556 --> 00:13:52.556
We'll go over tracking and
all that later on,

262
00:13:52.556 --> 00:13:55.356
but I just use capital D
whenever I'm deleting something.

263
00:13:55.356 --> 00:13:56.632
Old habits, all right?

264
00:13:56.632 --> 00:13:59.836
So now we have a branch full of changes.

265
00:13:59.836 --> 00:14:00.708
What do we do next?

266
00:14:02.560 --> 00:14:03.465
&gt;&gt; Merge.

267
00:14:03.465 --> 00:14:05.710
Merge, did I hear merge?

268
00:14:05.710 --> 00:14:10.136
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] absolutely, we gotta merge it.

