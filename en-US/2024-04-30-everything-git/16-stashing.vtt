WEBVTT

1
00:00:00.080 --> 00:00:03.183
We are at this point where you have
a change you've made locally, and

2
00:00:03.183 --> 00:00:06.170
now you have a change you
need to pull in from remote.

3
00:00:06.170 --> 00:00:07.220
What do you do?

4
00:00:07.220 --> 00:00:09.521
Typically, most people say stash it.

5
00:00:09.521 --> 00:00:12.850
You can technically commit and rebase.

6
00:00:12.850 --> 00:00:14.166
And then you have your commit on top, but

7
00:00:14.166 --> 00:00:16.000
you've pulled in
the changes that you need.

8
00:00:16.000 --> 00:00:19.693
And so you do have options here, but there
is a third option, which we'll talk about

9
00:00:19.693 --> 00:00:22.911
later, which is worktrees,
which is my favorite way to do this.

10
00:00:22.911 --> 00:00:25.064
But for now, we're gonna actually
start talking about stash.

11
00:00:25.064 --> 00:00:27.774
So for those that don't
know anything about stash,

12
00:00:27.774 --> 00:00:31.904
stash takes every tracked change by git
inside the index and the working tree and

13
00:00:31.904 --> 00:00:36.299
stores them kind of into a special area,
the work in progress area, the stash area.

14
00:00:36.299 --> 00:00:41.733
And you can think of stash like
a stack of temporary changes.

15
00:00:41.733 --> 00:00:42.997
This is from the man page,

16
00:00:42.997 --> 00:00:46.729
using git stash when you record the
current state of the working directory and

17
00:00:46.729 --> 00:00:50.053
the index, but wants to go back
to a clean working directory.

18
00:00:50.053 --> 00:00:52.782
The command saves your local
modifications away and

19
00:00:52.782 --> 00:00:55.582
reverts the working directory
to match HEAD commit.

20
00:00:55.582 --> 00:00:57.353
All right, so pretty straightforward.

21
00:00:57.353 --> 00:00:58.927
Stash is a stack, right.

22
00:00:58.927 --> 00:01:02.927
I wanna make sure I say that multiple
times, it's just a stack of changes.

23
00:01:02.927 --> 00:01:09.677
All right, so operation, you can push
to your stash by executing git stash.

24
00:01:11.177 --> 00:01:14.077
You can even give
a friendly message with -m.

25
00:01:15.257 --> 00:01:18.414
So this right here would stash,
but with message.

26
00:01:18.414 --> 00:01:22.386
Stashes can be listed out with git list,
or git stash list,

27
00:01:22.386 --> 00:01:25.017
and git show with an index as well.

28
00:01:25.017 --> 00:01:27.736
Show will just show the changes,
or the diff,

29
00:01:27.736 --> 00:01:32.027
whereas list will list out
the amount of stashes you have.

30
00:01:32.027 --> 00:01:35.267
You can pop the latest
stash with git stash pop.

31
00:01:35.267 --> 00:01:37.883
You can pop at an index with --index.

32
00:01:37.883 --> 00:01:41.713
So if you want the third stash in,
you can just --index 3.

33
00:01:42.993 --> 00:01:45.683
Or I think it might be zero base,
I forget if it's zero or one base.

34
00:01:45.683 --> 00:01:47.862
I assume everything's zero
base unless you're using Lua.

35
00:01:47.862 --> 00:01:50.103
So we'll just say --2 for
the third option.

36
00:01:50.103 --> 00:01:52.054
All right, man git stash is your friend.

37
00:01:52.054 --> 00:01:55.403
If you forget how it works,
again, use the friendly manual.

38
00:01:55.403 --> 00:01:57.013
Love the friendly manual.

39
00:01:57.013 --> 00:02:00.165
Read the friendly manual, that's
what RTFM stands for, by the way, so

40
00:02:00.165 --> 00:02:03.540
if you ever see it on the Internet,
just remember it's the friendly manual.

41
00:02:03.540 --> 00:02:07.288
All right, so problem,
we're gonna use trunk, and

42
00:02:07.288 --> 00:02:10.129
I want you to create an upstream change.

43
00:02:10.129 --> 00:02:12.390
Remember this is gonna be in hello-git.

44
00:02:12.390 --> 00:02:16.772
Just create a file called upstream and
put upstream change into it.

45
00:02:16.772 --> 00:02:21.138
Then in remote, I want you to do
a downstream change in the README, okay?

46
00:02:21.138 --> 00:02:24.693
So remember these are two different files,
and I want you to do it like this.

47
00:02:24.693 --> 00:02:27.642
So I will literally copy this.

48
00:02:27.642 --> 00:02:32.564
I'm gonna go to hello-git, just execute

49
00:02:32.564 --> 00:02:37.358
that git add this, git commit upstream.

50
00:02:39.944 --> 00:02:41.310
Then I'm gonna do this one right here.

51
00:02:41.310 --> 00:02:43.125
So I just don't mess it up.

52
00:02:43.125 --> 00:02:44.072
Look at that.

53
00:02:48.397 --> 00:02:50.565
All right, there we go.

54
00:02:50.565 --> 00:02:54.550
So now remote has a change.

55
00:02:54.550 --> 00:02:57.303
Dang it, git checkout trunk.

56
00:02:57.303 --> 00:02:57.803
There we go.

57
00:02:59.383 --> 00:03:00.573
Look at that.

58
00:03:00.573 --> 00:03:02.048
All right, there we go.

59
00:03:02.048 --> 00:03:05.587
And then add this thing and
then commit this thing.

60
00:03:05.587 --> 00:03:06.553
There we go, okay.

61
00:03:06.553 --> 00:03:11.721
So make sure you do it to trunk, as I
stated explicitly in the instructions and

62
00:03:11.721 --> 00:03:15.312
would never accidentally
deviate from said things.

63
00:03:15.312 --> 00:03:16.267
All right, so now, actually did deviate.

64
00:03:16.267 --> 00:03:17.424
I said don't commit.

65
00:03:17.424 --> 00:03:19.347
By the way, the second one,
don't commit the changes.

66
00:03:19.347 --> 00:03:20.852
Did anyone commit
the changes in remote-git?

67
00:03:20.852 --> 00:03:22.771
You committed it?

68
00:03:22.771 --> 00:03:26.976
Do git reset --soft HEAD~1.

69
00:03:29.379 --> 00:03:29.988
I'll do it too.

70
00:03:29.988 --> 00:03:33.414
Git reset --soft HEAD~1.

71
00:03:34.604 --> 00:03:35.534
There we go.

72
00:03:35.534 --> 00:03:38.427
Now I have that lovely little
change right here, and

73
00:03:38.427 --> 00:03:40.476
trunk is now pointing one step back.

