WEBVTT

1
00:00:00.200 --> 00:00:04.247
Honestly logs searching tends
to be a drag often doesn't work.

2
00:00:04.247 --> 00:00:08.089
If I can spend one minute looking at the
logs to find a bug that could take me two

3
00:00:08.089 --> 00:00:12.471
hours to find, of course, I'll always make
that trade off while shot in the dark, but

4
00:00:12.471 --> 00:00:14.837
most of the time you have
to do this git bisect.

5
00:00:14.837 --> 00:00:16.990
Okay, good.
Sometimes I have like spelling work

6
00:00:16.990 --> 00:00:21.184
problems and specifically bisect, I can
never tell if I've spelt it correctly or

7
00:00:21.184 --> 00:00:21.993
incorrectly.

8
00:00:21.993 --> 00:00:25.733
Bisect works by searching through,
gits commits for you and

9
00:00:25.733 --> 00:00:30.498
you get to mark if something's good or
bad, however you decide it's good and

10
00:00:30.498 --> 00:00:35.579
bad, and then it will do the legwork to
determine which commit you should look at.

11
00:00:35.579 --> 00:00:37.828
So it's pretty clever.

12
00:00:37.828 --> 00:00:40.616
There's some unique properties
that make this true.

13
00:00:40.616 --> 00:00:41.585
All commits are ordered.

14
00:00:41.585 --> 00:00:42.367
I've been saying this.

15
00:00:42.367 --> 00:00:47.896
I intentionally said this, is that
the order of commits is effectively time,

16
00:00:47.896 --> 00:00:50.742
which means that if I go back one commit,

17
00:00:50.742 --> 00:00:53.873
that commit should be
further back in time.

18
00:00:53.873 --> 00:00:55.479
And so
you can kind of see how that would work.

19
00:00:55.479 --> 00:01:00.002
That means if I go halfway back,
I've gone halfway through effectively our

20
00:01:00.002 --> 00:01:04.115
project's life cycle of some sort,
if they're evenly spaced out.

21
00:01:04.115 --> 00:01:08.648
So everything is in order, which means
it kind of acts like an ordered array,

22
00:01:08.648 --> 00:01:09.289
correct?

23
00:01:09.289 --> 00:01:09.953
In some sense, yeah.

24
00:01:09.953 --> 00:01:12.262
It's like an ordered array.

25
00:01:12.262 --> 00:01:13.758
Another thing that you need to have for

26
00:01:13.758 --> 00:01:15.637
bisect is that you need
to know the two changes.

27
00:01:15.637 --> 00:01:19.088
It doesn't matter how far apart they're,
let's just say you know that it's

28
00:01:19.088 --> 00:01:22.919
currently broken, so you go back 1000
commits and it's working, that's fine.

29
00:01:22.919 --> 00:01:26.389
You just need a point in time
in which there's two changes.

30
00:01:26.389 --> 00:01:27.018
That's it.
So,

31
00:01:27.018 --> 00:01:30.996
let's talk about property one cuz
I think it's really interesting.

32
00:01:30.996 --> 00:01:36.539
If it currently fails, and you go back
10 commits, and it's still failing.

33
00:01:36.539 --> 00:01:39.687
What can you say about the going back
9 commits is gonna pass or fail?

34
00:01:39.687 --> 00:01:41.520
&gt;&gt; Fail.

35
00:01:41.520 --> 00:01:44.109
&gt;&gt; How about eight commits?

36
00:01:44.109 --> 00:01:46.845
Fail, seven commits, fail, six,
five, four, three, two, one.

37
00:01:46.845 --> 00:01:48.970
All of them are going to fail, right?

38
00:01:48.970 --> 00:01:51.992
That's the idea of git bisect
is that due to time and

39
00:01:51.992 --> 00:01:56.633
assuming that the bug isn't some weird
hyzen bug floating in and out of space,

40
00:01:56.633 --> 00:02:00.037
you should be able to quickly
go to the correct solution.

41
00:02:00.037 --> 00:02:05.713
So to kind of put it visually, if you had
commit A and commit B and you have no idea

42
00:02:05.713 --> 00:02:10.887
where it's failing at, if you pick
the middle commit C and you test it.

43
00:02:13.059 --> 00:02:16.724
If C works,
what can you say about this graph.

44
00:02:20.131 --> 00:02:25.281
&gt;&gt; The problem lies between C,
I think, whatever followed it.

45
00:02:25.281 --> 00:02:27.488
&gt;&gt; C, and B, right?

46
00:02:27.488 --> 00:02:30.579
You've cut the space in half where
the problem could be, right?

47
00:02:30.579 --> 00:02:31.131
Yay.

48
00:02:31.131 --> 00:02:32.520
Or yeah.

49
00:02:32.520 --> 00:02:35.093
The problem lies by, to say it inverted,

50
00:02:35.093 --> 00:02:38.190
A through C is good and
this other side is unknown.

51
00:02:38.190 --> 00:02:41.234
And so the exact opposite's true
given the exact same situation again.

52
00:02:41.234 --> 00:02:43.235
If C fails, what can we say?

53
00:02:43.235 --> 00:02:47.572
Well, we can say that between C and
B, it's bad.

54
00:02:47.572 --> 00:02:51.144
Between C and A, we just don't know yet,
so we don't know if it's good or bad.

55
00:02:51.144 --> 00:02:55.718
We just know it's bad at C, so
it's bad all the way up to B.

56
00:02:55.718 --> 00:03:01.653
That means we can cut half
the space every single search.

57
00:03:01.653 --> 00:03:05.901
This is the fundamental for binary search.

58
00:03:05.901 --> 00:03:07.557
If you think about a binary tree,

59
00:03:07.557 --> 00:03:10.586
walking binary tree is the exact
same principle in general.

60
00:03:10.586 --> 00:03:14.030
This we're just doing it
with commits instead.

61
00:03:14.030 --> 00:03:19.004
&gt;&gt; Does using bisect make an argument
against rebase since it needs to be

62
00:03:19.004 --> 00:03:19.783
in order?

63
00:03:19.783 --> 00:03:21.799
&gt;&gt; No
&gt;&gt; Rebates.

64
00:03:21.799 --> 00:03:23.090
It's about your history of your branch.

65
00:03:23.090 --> 00:03:25.434
I mean, you,
you've moved your stuff forward, but

66
00:03:25.434 --> 00:03:28.313
at some point it's committed and
it's in the branch or it's in.

67
00:03:28.313 --> 00:03:32.972
So yeah, if you move your stuff forward
and you test it and it's still broken,

68
00:03:32.972 --> 00:03:36.503
then [SOUND] it's broken until
you find the working commit,

69
00:03:36.503 --> 00:03:38.781
it doesn't really change anything.

70
00:03:38.781 --> 00:03:41.375
Alright, by the way,
I don't know if you know this, but

71
00:03:41.375 --> 00:03:43.550
Front End Masters has
a free algorithm course.

72
00:03:43.550 --> 00:03:45.224
I heard the guy that teaches it,
it's pretty cool.

73
00:03:45.224 --> 00:03:46.731
That's what I've been told.

74
00:03:46.731 --> 00:03:50.909
Kind of sounds like Gilbert Gottfried
though, or Charlie Day, Wish Charlie Day.

75
00:03:50.909 --> 00:03:54.046
Yeah, that's another one that someone said
to me and it really hurt my feelings.

76
00:03:54.046 --> 00:03:56.509
&gt;&gt; [LAUGH]
&gt;&gt; Anyways, it's fully free.

77
00:03:56.509 --> 00:03:58.452
Hashtag ad everybody, hashtag ad.

78
00:03:58.452 --> 00:03:59.705
Okay, so some pros.

79
00:03:59.705 --> 00:04:01.488
You don't need to know
anything about the bug.

80
00:04:01.488 --> 00:04:05.888
You don't need to rely on commit messages
you don't need to rely on anything other

81
00:04:05.888 --> 00:04:08.836
than a way to test to see if
it is working or not working.

82
00:04:08.836 --> 00:04:12.894
The fastest way to search assorted space
is via cutting the space in half every

83
00:04:12.894 --> 00:04:16.829
single time there's not a faster way
unless if you have some sort of hash map

84
00:04:16.829 --> 00:04:20.524
in which you know where the good and
better unless it's hash mapping.

85
00:04:20.524 --> 00:04:24.789
You don't have to search only for a bug,
say there's a performance regression.

86
00:04:24.789 --> 00:04:26.392
Say there's a performance improvement.

87
00:04:26.392 --> 00:04:28.926
Say there's anything and
you want to find it happening.

88
00:04:28.926 --> 00:04:31.868
If you have a test that you can prove
that it does and doesn't happen,

89
00:04:31.868 --> 00:04:34.579
you can bisect your way to
the commit that changed, whatever.

90
00:04:34.579 --> 00:04:38.054
So it's a way to do change
detection more than anything else.

91
00:04:38.054 --> 00:04:41.466
The only con is that if it
takes a lot of time to test and

92
00:04:41.466 --> 00:04:45.114
you could do some alternative
means to find the change,

93
00:04:45.114 --> 00:04:49.612
maybe a quick log search would be your
best friend just to give a shot in

94
00:04:49.612 --> 00:04:54.924
the dark as opposed to having to deal with
bisect for hours if it takes a long time.

95
00:04:54.924 --> 00:04:56.064
Anyways, so you get the idea.

96
00:04:56.064 --> 00:04:58.460
So when you cut space in half,
it's log of n.

97
00:04:58.460 --> 00:05:01.122
So it takes seven searches
to go through 128 commits,

98
00:05:01.122 --> 00:05:03.237
one search to go through one commit,
right?

99
00:05:03.237 --> 00:05:05.959
So it doesn't grow very fast at all.

100
00:05:05.959 --> 00:05:06.981
Grows logarithmically.

101
00:05:06.981 --> 00:05:08.289
It's very fantastic.

102
00:05:08.289 --> 00:05:12.388
All right, so the basics of bisect,
all you do is you say, get bisect start.

103
00:05:12.388 --> 00:05:15.426
Then you say, get bisect bad saying,
hey, the current commits bad.

104
00:05:15.426 --> 00:05:17.879
Then you select a good commit.

105
00:05:17.879 --> 00:05:21.660
And then at that point you test and
you just tell it whether it's good or bad.

106
00:05:21.660 --> 00:05:26.251
Just start checking out stuff until it
gets to the exact point in which it found

107
00:05:26.251 --> 00:05:26.968
the error.

108
00:05:26.968 --> 00:05:30.926
So you just keep on doing this over and
over again until it stops.

109
00:05:30.926 --> 00:05:32.178
So we're gonna do the exact same thing.

110
00:05:32.178 --> 00:05:35.033
We're gonna take the first commit of the
repo and the current tip of master, and

111
00:05:35.033 --> 00:05:36.659
we're gonna try to find
where does it break.

112
00:05:36.659 --> 00:05:41.028
So, git bisect start,

113
00:05:41.028 --> 00:05:46.710
step 1, then get bisect bad.

114
00:05:46.710 --> 00:05:50.691
So I'm saying this commit
is the bad commit.

115
00:05:50.691 --> 00:05:52.980
Now we need to get the very
first commit of the repo.

116
00:05:52.980 --> 00:05:54.639
There's a lot of different ways to do it.

117
00:05:54.639 --> 00:05:57.083
So I'll just go like this,
git log or one line.

118
00:05:57.083 --> 00:05:59.238
This is just very, very easy.

119
00:05:59.238 --> 00:06:01.784
There it is right there.

120
00:06:01.784 --> 00:06:06.921
So I'll just copy this
one out the b56ed57and

121
00:06:06.921 --> 00:06:10.721
then go git bisect good right there.

122
00:06:10.721 --> 00:06:14.865
So I'm just gonna search the entire
repo from beginning to end.

123
00:06:14.865 --> 00:06:15.453
There we go.

124
00:06:15.453 --> 00:06:20.047
It says bisecting 11 revisions,
roughly four steps.

125
00:06:20.047 --> 00:06:22.301
So, is this one good or bad?

126
00:06:22.301 --> 00:06:25.658
I'll go like this, NPM run test
&gt;&gt; I wanna say binary search so

127
00:06:25.658 --> 00:06:27.657
much when you're talking about that.

128
00:06:27.657 --> 00:06:29.275
I was just like, it's right there.

129
00:06:29.275 --> 00:06:29.902
&gt;&gt; It's right there.
&gt;&gt; [LAUGH]

130
00:06:29.902 --> 00:06:32.234
&gt;&gt; All right, look at that, it failed.

131
00:06:32.234 --> 00:06:36.689
Okay, by the way, NPM run, it doesn't run
it once it just keeps it on watch mode

132
00:06:36.689 --> 00:06:39.300
because Vitest default
apparently is watch.

133
00:06:39.300 --> 00:06:43.767
So, that means we need to go,
git bisect bad.

134
00:06:43.767 --> 00:06:45.388
And there it goes.

135
00:06:45.388 --> 00:06:47.233
There's five provisions left.

136
00:06:47.233 --> 00:06:49.264
Roughly three steps.

137
00:06:49.264 --> 00:06:49.845
Look at that.

138
00:06:49.845 --> 00:06:50.547
This one passed.

139
00:06:50.547 --> 00:06:51.422
Fantastic.

140
00:06:51.422 --> 00:06:55.529
So I'll say, git bisect good.

141
00:06:55.529 --> 00:06:56.992
All right, two revisions left.

142
00:06:56.992 --> 00:06:59.142
Roughly two steps.

143
00:06:59.142 --> 00:06:59.968
Let's run test.

144
00:06:59.968 --> 00:07:01.591
All right, look at that, it passed.

145
00:07:01.591 --> 00:07:04.478
So we'll do a little git bisect good.

146
00:07:04.478 --> 00:07:08.069
And now there are zero revisions left.

147
00:07:08.069 --> 00:07:09.766
This is the last step.

148
00:07:09.766 --> 00:07:11.035
I'll run it once more,

149
00:07:11.035 --> 00:07:14.338
and now either the commit I'm on
is the good one or the bad one.

150
00:07:14.338 --> 00:07:16.077
And so it's able to tell if it's good,

151
00:07:16.077 --> 00:07:19.938
that means the next commit over is the bad
one, the offending commit, the bad change.

152
00:07:19.938 --> 00:07:24.288
Or this is the offending change and so
be able to tell with this last test.

153
00:07:24.288 --> 00:07:28.560
I refuse to get rebased this therapy is

154
00:07:28.560 --> 00:07:33.239
we will experience the weight together.

155
00:07:33.239 --> 00:07:37.171
All right, so this one failed so

156
00:07:37.171 --> 00:07:42.560
I just gotta go like
this git bisect bad and,

157
00:07:42.560 --> 00:07:45.340
[FOREIGN] right there.

158
00:07:45.340 --> 00:07:47.729
It says it right here.
It says apparently zero steps left which

159
00:07:47.729 --> 00:07:49.053
is a little suspicious.

160
00:07:49.053 --> 00:07:53.622
Okay, well we gotta run
the test once more apparently.

161
00:07:53.622 --> 00:07:56.052
I'm not exactly sure why
this one went this way.

162
00:07:56.052 --> 00:08:00.068
In all the times I did it,
it was actually done after four of them.

163
00:08:00.068 --> 00:08:04.481
But I guess we're gonna wait,

164
00:08:04.481 --> 00:08:10.437
one last 30 seconds for k 972 FA2A.

165
00:08:12.956 --> 00:08:17.342
Well look at that, git bisect bad.

166
00:08:17.342 --> 00:08:20.970
So it tells you right here,
this one is what went wrong,

167
00:08:20.970 --> 00:08:24.382
and this is the commit,
in fact, which went wrong.

168
00:08:24.382 --> 00:08:28.946
So I was able to go through and we're able
to kind of find where the problem was.

169
00:08:28.946 --> 00:08:30.048
But here's the deal.

170
00:08:30.048 --> 00:08:32.575
Was that kind of annoying,
like not a fun experience?

171
00:08:32.575 --> 00:08:34.914
I'm gonna scroll all the way through this.

172
00:08:34.914 --> 00:08:36.080
You can automate it.

173
00:08:36.080 --> 00:08:41.471
So we'll let's do it again, but
this time said the word run to it.

174
00:08:41.471 --> 00:08:45.497
Okay, so I'm gonna go here and
I'm gonna go,

175
00:08:45.497 --> 00:08:49.436
let's see, git status, git bisect reset.

176
00:08:49.436 --> 00:08:51.693
We're back at the tip.

177
00:08:51.693 --> 00:08:55.282
So now we just gotta go like this,

178
00:08:55.282 --> 00:08:59.515
git bisect start, git bisect bad, and

179
00:08:59.515 --> 00:09:05.169
git bisect good right here,
then go git bisect run.

180
00:09:05.169 --> 00:09:06.705
And then I think it's, what is it?

181
00:09:06.705 --> 00:09:12.005
It's node modules

182
00:09:12.005 --> 00:09:16.646
bin by test run.

183
00:09:16.646 --> 00:09:22.914
If you do dash dash run it doesn't try to
watch therefore we'll just quit, right?

184
00:09:22.914 --> 00:09:29.167
We'll do that, and
now all we have to do is just wait.

185
00:09:29.167 --> 00:09:31.145
It's a little bit of waiting.

186
00:09:31.145 --> 00:09:33.741
By the way, I see some people saying
they didn't know that this existed.

187
00:09:33.741 --> 00:09:37.064
This is why it's really good to
always just do a quick little

188
00:09:37.064 --> 00:09:40.458
run through of the friendly manual or
a couple get searches.

189
00:09:40.458 --> 00:09:43.061
And just kind of know how the things
work or how people use it,

190
00:09:43.061 --> 00:09:46.587
because often you'll find that you're
doing something fairly inefficient when

191
00:09:46.587 --> 00:09:48.752
the better thing is just
right around the corner.

192
00:09:48.752 --> 00:09:49.475
Look at this.

193
00:09:49.475 --> 00:09:51.200
Hey, look at that, it found the commit.

194
00:09:51.200 --> 00:09:51.828
Look at that.

195
00:09:51.828 --> 00:09:53.059
We didn't even do anything.

196
00:09:53.059 --> 00:09:54.174
Found the commit right here.

197
00:09:54.174 --> 00:09:55.338
How nice is that?

198
00:09:55.338 --> 00:09:56.916
So bisect run is like really nice.

199
00:09:56.916 --> 00:10:01.204
You should definitely use bisect run if
you have a problem especially if it can be

200
00:10:01.204 --> 00:10:03.064
boiled down to a quick test to run.

201
00:10:03.064 --> 00:10:04.963
Mwah, beautiful, right?

