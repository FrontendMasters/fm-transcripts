[00:00:00]
>> All right? So sometimes. We have a decision we have to face as programmers, which is to push forward or to roll back. I think we've all been there. Sometimes you got to revert, right? You made a change. It was a failure. Nobody's happy about it. Nobody likes you.

[00:00:17]
And now you need to revert it. So, by the way, if you're confused about the difference between Revert and Restore, Restore, just go read about Restore. Restore effectively just changes any change into what the previous state was. Whereas Revert is actually making like the revert is effectively like the anti-matter to matter.

[00:00:36]
It is gonna make an inverted change as a commit, and then you commit that. So it actually changes what you've done invertedly. We'll see in just a moment. It's very fantastic. I'm not sure how else to describe it other than it just, it did what you did, but backwards, right?

[00:00:51]
All right, so let's look at it. So reverting is simple. You just need to provide a commit, right? I just need to revert something and then it will just, it will work. All right, so let's go to hello-git and let's revert the commit with log message E. Before removing it, check the contents of the commit via log with -p.

[00:01:13]
So, does anyone remember how to search the friendly logs? Dash dash grep. That's right. Great job, everybody. I can't believe you guys all said that out loud. So, I'm gonna go to hello git, and I'm gonna go git log grep e, and then I'll do a little dash p to print out the contents.

[00:01:34]
So look at this. Right here, we made this earlier today, we have a little plus e right here. Absolutely wonderful. And our commit message was Of course and II as well. Awesome, everyone's happy. I'm happy you're happy. Dustin is kind of frowning, but most of us are happy here.

[00:01:48]
Alright, so now we need to revert this. So I'm actually going to take this, I'm gonna actually take this guy right here the commit shop, and I want to be able to take it and I'm going to use it for reverting, so I'm gonna copy the commit shop.

[00:01:59]
And I'm going to make sure that that's what we're supposed to do at this point, which we're not supposed to do this quite yet. So we're gonna go through all this one. Fantastic. You can manually look through it. Now let's revert it. So I'm going to go get revert and then the hash that you have.

[00:02:12]
So get revert hash. Conflicts. It's just like, I hate them and can never seem to get away from them. I don't know what is wrong with my life. But anyways, here we go. We've conflicted. No, pre planned. You can get conflicts in reverting, right? Like, isn't that just like, isn't that not only are you getting kicked in the shin for the fact that That you just made a mess up.

[00:02:42]
You get sometimes conflicted as well. And it's just like this is the worst possible scenario of all time, right? It's emotionally bruising. So we gotta do something about this. So what do we do? Well, we go again, get status again, modified both. This looks very, very normal. You'll also notice stuff here, we do a get revert skip or abort.

[00:03:01]
So, let's go to README, and this one's a little bit more confusing, right? Like, yeah, this is our change, and okay, this is what we gotta do, apparently. Like, it somehow has both E and downstream in here, when it probably shouldn't have both of them. So, what do we gotta do here?

[00:03:17]
Well, let's delete that, right, delete the conflicts, and then I only wanna delete E. E, right? Because that's what I was trying to remove was E, all right? So I'll save it, and then if you go git status, git add, git status, you'll see right here that we need to now go git revert continue.

[00:03:39]
Awesome. Now it gives us a beautiful, Commit message. Revert E. This reverts this specific commit. So that we have this nice log, you can see that this this action was intentional. By the way, this is the greatest argument for why you want to rebase squash, because there's no merge commits.

[00:03:53]
There's not all this history that you've just created and now we need to remove this change. That sucks. Whereas if you have a nice squashed rebase no merge can commit history, removing the change is very, very simple. There's just one step, which is just the change you want to revert.

[00:04:06]
I'm gonna take this, I'm gonna save it, and there we go. Get status, and you'll see we're on a clean thing. Get log one line. You'll see right here, revert E. If we put a little, I say revert. Is that even correct? Is it revert or is it revert, if you're talking about it in like the, that Kind of sense.

[00:04:21]
I don't even know. It's a great question, me. You can see right here, there's E, we've reverted it. The revert is literally the inverse commit, as you can see. It's not that it removes it from our history, because if it removed it from our history, what would happen?

[00:04:35]
Every branch would now have invalid state and everything would be horrible. So a revert, revert, a revert Is when you actually put the antimatter at the front. It's how I like to think of it. You just put the offset command in front and merge it. There we go.

[00:04:48]
We've got that offset command going. Absolutely fantastic. Yeah, we already did all of this. All right, hold on. All right, that's it. We'll click on Revert. You rarely need to use it. It's about it.

