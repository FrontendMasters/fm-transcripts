[00:00:00]
>> So we're gonna talk about ours and theirs. You've heard me say this multiple times now. Ours is theirs and theirs is ours with rebase, whereas it's the opposite for merge. So long as you have one of those correct, you'll get the other one correct, or you can just remember how rebase works.

[00:00:12]
So sometimes you just wanna be able to pick just one side. You don't wanna have to go through and manually resolve each one of the things. You just wanna say, hey, change A is better than change B, I just want change A, right? By the way, there's a very well known Netflix person named Some Coding Guy, and he even says that ours and theirs is the worst thing in Git.

[00:00:35]
So it confuses everybody. So if you feel kinda confused about it, don't worry, you're not the only one that I thinks it's completely ridiculous and also makes perfect sense, but ridiculous. All right, so when I say ours, I do mean our current branch, when I say theirs, I do mean the incoming branch.

[00:00:52]
So if you want to select a change, you can just simply do git checkout --ours path to the file, and it will just select the entire file's change set. And if you do theirs, it will select the entire file change set for just theirs, and it's only for that file.

[00:01:10]
So let's do it again, let's make another conflict. We'll do A + 7 in hello, A + 8 in remote, and let's do a merge from upstream to resolve it, and let's choose ours with a merge. So I'll go to hello, then the README, A + 7, A + 7, do it again here, A.

[00:01:40]
There we go, I've done both to hello and to remote. Now all I need to do is just simply merge those two together and then we'll get the conflict, so git pull. Notice that I'm using a merge, I'm not rebasing. Awesome, I have the conflict, now I'm just gonna simply go git checkout --ours README.

[00:01:59]
So if I do that and I go git status, you'll see it says both modified cuz we haven't added it yet. If I cat the README, you'll see it's just our change, it did it for us. That also means if the remote had other changes that weren't conflicted, what is it gonna do?

[00:02:19]

>> Still pull them in.
>> It's gonna pull in everything on ours. So just things to remember, choosing hours, you're choosing this experience versus that experience. So just remember that, it's a full deal here. So sometimes that's why you wanna kinda go through hand by hand, select what you want.

[00:02:35]
There we go, pretty straightforward. We checked out ours, now all we have to do is just simply merge it. So I'll just simply go git, add this, git commit, let's see, merged. Why not? These commit messages are just getting worse as the day goes on, which really represents true using Git.

[00:02:51]
This might be the most true version of using Git, is where your commit messages just disproportionately get worse as time goes on. It's just the worst, right? All right, so we can do a quick little log. I can go git log --oneline --graph, and we'll just do the last ten commits.

[00:03:08]
And you can see right here, you can see the A + 7 over here, but then we just merged in A8, with A + 7, we get the merge. So there we go. I mean, I always go back and forth in some sense of whether I do like rebase or whether I do like merge.

[00:03:24]
In some sense, I do like this piece of history right here, which is I get to see that these two things happened, and we did make a proper change to the code in such a way, and this is the result of the conflict. I do like that experience.

[00:03:39]
I think it is a little bit more sensible for me to understand how a bug could form. Cuz if you have a conflict and you use rebase, it kind of erases the idea that you even had a conflict and it just looks like a linear history. It's kinda like you choose your own adventure, I always go back and forth, I can convince myself either way to love either one, right?

[00:03:58]
As for whatever reason, I don't seem to have a solid, this is the only way to do it here. It's just like, well, you convinced me, tomorrow I'll be all about rebase, today I might be all about merge for conflicts. The life I live as an engineer, it depends, just continuously and ad infinitum, for all of the rest of my life.

[00:04:16]
Anyways, good reminder, you don't wanna mix merge and rebase, you start getting things like commit merges, and they start getting, it's very hard to keep your tree kinda straight. So you really do wanna try to stick with one strategy and at least make sure they're in sync, and then you can kind of diverge once they're in sync.

[00:04:34]
But I tend to try to never mix them both cuz then you just start getting merged commits constantly, and just nothing feels good, it's just trouble after that. So let's merge everything up and make sure that our hello-git and remote-git are in the exact same position. And then we'll start doing the next part, okay?

[00:04:57]
So git push origin, I don't know why I'm saying the whole thing here. Again, got owned again, git checkout bar, go back, push it up, go back, git checkout trunks, I don't goof that up. All right, phew, we're in. By the way, if you guys are wondering how in the world am I switching between projects so dang fast?

[00:05:17]
This is called tmux, I have an entire course on Frontend Masters all about how to use your system well, includes Vim and all the good stuff. If you don't use Vim, that's okay. Vim's awesome, it makes me entertained, I know most people don't like it, but hey, I think it's great.

[00:05:32]
All right, so we're gonna do the exact same thing again, we're gonna create another conflict with this A + 9, A +10, add hashtag, by the way, forgot to say that. There we go, SEC rules now, wait, FEC, which one is it? FCC? Anyways, one of the governmental agencies you have to say add after things, I don't know.

[00:05:50]
Anyways, all right, so let's do A + 9 in hello, let's do A + 10 in remote, don't laugh at me. [LAUGH] And do those two, and then let's do a rebase, and then let's try to select ours. Let's just really drive home the point that ours is theirs and theirs is ours, even though we should already be there, but let's just do it anyways.

[00:06:08]
So I'll go back to hello, I'll open up README, set it to 9, git add this. Oops, there's no file name there, git commit, A + 9, switch over here, then README, 10. Awesome, okay, so now if I git pull --rebase, we have the conflict, git checkout --ours.

[00:06:38]
Remember, we're doing ours here on purpose. If we do that, and then we cut out README, you'll see right here, we selected hello-git. We did not select ours, cuz we selected hours, which is not ours. Okay, good, good. I just wanna really make sure we really are fully on the same page here, it's just such a goofy part.

[00:06:58]
So there we go, so that means if you're gonna do this, we need to select theirs. So I believe I do a little change right here. We do this whole ours is theirs business. Okay, so let's just check out and use theirs instead of ours. I'll go git checkout --theirs README.

[00:07:14]
There we go. So now when I cap that one out, you'll see it's our change, awesome. git add it, git rebase --continue. Fantastic, we've now done it. We've selected ours, and we have our change in.

