[00:00:00]
>> Let's take this repo and you're never gonna guess what we're gonna do. We are gonna clone, but we're gonna bisect as well. You would never have guessed that, would you? All right, so if you don't have the course open, it's just github.com/The Primeagen/git-bisect. So you can go to GitHub and go grab that.

[00:00:17]
I'll go over here, do that. So this one's fantastic. So wherever you like to clone out repos, clone it. My goodness, [LAUGH] I pre-washed. This is definitely pre-washed [LAUGH]. All right, there we go. Fantastic, okay, so we're here. Now, we kind of have a classic problem. This happens about once, twice, a few times a year where you have to do this, where there's a whole bunch of commits, and something has gone wrong.

[00:00:55]
You don't know when it's gone wrong, you just know a while back it's good and currently, it's bad. And you wanna find out exactly when did something go wrong, and so this is called git bisect. It's not a common problem, but I definitely run into it. And the longer your testing cycle is, the more you should know that this exists.

[00:01:14]
Because if it takes you one second, I'm sure there's a bunch of people are just walking back ten commits at a time, they don't even know git bisect exist. So therefore, they're just like, it's not I don't I don't have to care. But if you have like a ten minute testing cycle, all of a sudden, you wanna be as efficient as possible, right?

[00:01:30]
But there's a lot of different ways we could do this. One cool thing is with logs, you can actually search through logs. And this is kind of a neat technique in the sense that if you just wanna find a change around a particular component and everyone does a pretty decent job at putting in good logs, you could find a change around that particular component.

[00:01:46]
Even if it's spread across a couple different files, so that way, you're not just looking at a specific file, but maybe you're just looking for a usage of a specific item throughout the codebase over time. And so you can you can grab all those things. Obviously, some of the cons of using logs is that sometimes you don't know a keyword to search for, right?

[00:02:03]
You know there's a bug, but you have no way you could really look through the logs to know why or where that bug change could be. Commit messages aren't always the best. I know we all say we're going to do better. Our good commit messages starts tomorrow and then it just doesn't happen, sometimes you can't boil it down to any specific word or there's just too many commits to the file.

[00:02:23]
There could be hundreds of them, so you're like, okay, I can't just do a quick check and grab it. One reason why I tend to just do a quick log look is let's say it takes two minutes to test to see if it's good or bad and I know the file that it's probably in, I could do a quick log search.

[00:02:38]
Look at it, there's one change here, I'll just test this one change. And if that one is the problem, I'm like, got it, right? You can just kind of look at the change and go, okay, this is pretty simple, I can see exactly why. So it can be pretty fast.

[00:02:51]
So you can actually search, you can search with logs with grip. But before we do that, we gotta do this. This little npm i thing, right, this is a Node thing, okay. So do a little npm i. Are you making fun of me for using npm?
>> No, I have to install npm, I don't have Node on here.

[00:03:12]
[APPLAUSE]
>> [LAUGH]
>> That was amazing. If you didn't hear, there's someone here without Node. How great is that? Based you are now the new coolest bird. Do you wanna come up here and be-. [INAUDIBLE].
>> [LAUGH] You don't have to participate if you don't want to. It's pretty easy step by step.

[00:03:32]

>> [LAUGH]
>> You may, all right, another way to do that. All right, so next, try to run a test, npm run test. I actually did note specifically, cuz figured there's no way people aren't gonna have Node on the computer. [LAUGH] Man, I can't believe this actually happened.

[00:03:47]
This is so great. Okay, npm run test. [LAUGH] I didn't wanna be like, you don't have cargo? Well, let me tell you about Rust. I don't wanna be that guy, so.
>> [LAUGH]
>> Yet here I am telling you about Node, so I intentionally just put a sleep in here.

[00:04:01]
So you have to wait 30 seconds to see if it fails or not, right? This is real life, right, this is what happens in real code bases. It takes a lot longer to figure out if something is broken or not broken. So you really don't wanna have to live this life constantly, right?

[00:04:16]
Right, thank you for agreeing, I do appreciate that. All right, there we go. One failed test, expected 138, but we received 140, dang. That stinks, right? You can actually see it right there, see? I told you I'm literally just sleeping right there. All right, fantastic, we got that all done.

[00:04:35]
Observation, we know that the foo function is failing and the test foo are failing, right? So we know that something's wrong with the function called foo. So what we can do is we can use, by the way, I say you can do man, git-log and search through logs.

[00:04:47]
If you don't know, in oldie computer speak, searching is called grep, right? I forget why it's called grep. There's actually a whole thing around it. I forget what all, but nonetheless, these modern zoomers these days just use the term search and they don't even know about grep and grep is fantastic.

[00:05:06]
So if I told you to go in here and find search, you just wouldn't really find the thing because it may contain the word search, but none of them actually are grep. So you got to use grep, right, and there you go. So you can do a grep with a pattern.

[00:05:21]
And so this is from the log, you just simply get to look through any of the commit messages with the word foo in it. So that's a strategy we can do. So I can go,vgit log --grep foo. And so look at this, this is not about foo, this is not about foo.

[00:05:35]
It's kinda hard to search. I mean this one sounds pretty suspicious, altering foo for new specifications, right? That sounds pretty good. What you can also do is you can actually use -p. -p also puts the changes in here. So then you can go, okay, well, what are all the changes?

[00:05:51]
And as I search through, this looks pretty suspect, right? So learning a thing or two about searching the logs can be very, very useful, because sometimes you can stumble upon things or you can look at changes over time for a specific item, and it's kinda nice being able to use.

[00:06:09]
So there we go. So grep, that's what we're using. And so we are able to easily find the problem right here just by looking at it. Obviously, we know the problem, right? This very trivial problem or too often. Look at this. I don't know, we times by 2 and that one exactly fits the need.

[00:06:25]
So we got lucky on that one. The problem with this is also a lucky search. If you're looking to solve a bug, definitely this one errors on the side of luck to be able to get a good term with a simple set of changes that you can just look at and it's like, there it is.

[00:06:38]
So I often don't use this. But every now and then, I'm like, there's this change. I dated a while back and I wanna be able to just go straight to that change and go look at it. And so I can kinda know in my head where or how I'm doing something, so I like searching.

[00:06:52]
Okay, number two, you can also search by file. So we already know that the problem is in the index file, I think it is. There's only one file in here. Yeah, there's only one file. Okay, so you can go, git log and we'll do a little p, and then we can go src/index.

[00:07:09]
Is it js or ts, what are we at? Yeah, yeah, and then you have to do a little- -. You're gonna only search in the log with these specific files. And this will actually get you the change set only for these files. That's it, so there's only been two changes in this file.

[00:07:26]
And so this is a nice way to be able to reduce down the change you're looking for to a file. You can pass in multiple files, very, very useful. You can mix and match grep and this, so it's good to have this power with you. If you use -s, you can search through the change itself.

[00:07:41]
So there's a lot of cool opportunities here with log. Just so you guys know, it does exist.

