[00:00:00]
>> Or onto named locations in Git history. This is effectively me saying tags, right? I call a named location, because it's not a branch, because a tag is an immutable point in history, unlike a branch. Branches you update, you make commits to, they move all around. A tag is an immutable point in your Git history.

[00:00:19]
And so the best way to think about it, is that it has all the setup of a branch, just without changeability. And so, how to use tags? Very, very easy, if you've never used tags, simply do git tag, the name of the tag you want to create. git tag, delete if you wanna delete it, get tag to the list them out, git checkout a tagname and you'll check out a tag as if it were a branch.

[00:00:41]
Except for you're just checking out a SHA, and so you'll be in a detached head state. So kind of fun stuff. I go through the various operations here, we'll do this one right here, I think this one's really interesting. Tags also show up in the logs, so long as you use decorate, if decorate is your default option.

[00:00:59]
You create tag, git tag foobar, I go git log, you'll see right here, it also shows up. So you know which one you're looking at. So if you're trying to look for a specific version, this is fantastic. You can pull tags with git pull --tags. So they're all, it's just like working with branches, effectively, you can push tags with git push --tags, it'll push tags up to an endpoint.

[00:01:24]
There you go, that's pretty much everything about tags. I'm gonna largely kind of skip this version because I don't think I've said everything about it. We kind of know at this point how to use branches. I've been using them all day, you understand tags inherently, right? Any questions on tags?

[00:01:39]
No, they're pretty straightforward, right?
>> You just can't merge them back and forth?
>> You just can't change them.
>> Yeah, that's it.
>> That's it, all right, my favorite tool to use is Fugitive. So I was gonna give you a little quick look. I mean, I use the command line maybe half the time, the other half the time I use Fugitive.

[00:01:59]
It's pretty dang awesome, so if I go in here, add a new line, this is my unstaged changes, right? I can stage them, I can put them into that. I can unstage them, I can remove them. It's very, very nice to be able to have those kind of fast usages of Git.

[00:02:11]
I think it just makes life a little bit nicer, especially as you get good at it. Let's see, let's go right here, and let's do one more thing, just to make it nice. It allows you to do commit messages right in your editor, which is also fantastic, I like that.

[00:02:27]
And it also allows if there was an upstream to push to here, let's go to, what's it called, remote git. I can also go in here, and I can also push if I want to, so if I press Enter now, it's gonna go push this up to remote.

[00:02:42]
It's not gonna work because we may change the hello-git and there's problems we have to re-sync. But I can do that if I want to, I can also jump in here, go into here, and I can, C-C-Z it, it's now stashed, C-Z-A, and it's unstashed. It's kinda nice to be able to do that, it's easy to rebase.

[00:02:59]
If I really want to hit it with the old R-I, and it'll do something, I'll have some unstaged, right? I can go in here, let's not do that one. There we go, and I can give it the old R-I and go S, there we go. I've now just did an interactive rebase, just change it to one commit.

[00:03:16]
So having a good tool to be able to work with Git is worth a whole bunch. So whatever tool you use, I hope, well, first off, Vim is fantastic, if you don't use Vim. But if you don't use it and you use that other editor, just learn the tool.

[00:03:28]
I think it's GitLens, and if you get really good at it, it can just save a whole bunch of time. The thing that really makes this stuff really good, it's the reason why I didn't go over diffs, really, pretty much in this course. I don't think diffs are good to look at on the command line.

[00:03:43]
I don't think they're enjoyable, I don't think anyone here is gonna wanna resolve a conflict by hand. We all want the ability to look at the change like this, right? Where you have one side and the other side, and you get to choose which side you want to use.

[00:03:55]
And so, I largely don't think that that kind of stuff is useful, that's why we didn't go over it. And so, please, if you're not using a tool and you're resolving conflicts by hand, learn a tool. It'll make your life ten times better, because they can be a real big pain in the ass if you try to do everything by hand.

