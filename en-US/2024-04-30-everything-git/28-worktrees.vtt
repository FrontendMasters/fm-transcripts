WEBVTT

1
00:00:00.300 --> 00:00:02.690
Right, Stash is not that great, right?

2
00:00:02.690 --> 00:00:04.360
We've all used stash?

3
00:00:04.360 --> 00:00:05.990
Were we all happy with it?

4
00:00:05.990 --> 00:00:07.270
No you weren't happy with it, okay?

5
00:00:07.270 --> 00:00:09.100
You weren't happy at all.

6
00:00:09.100 --> 00:00:11.010
You now want to be happy, though.

7
00:00:11.010 --> 00:00:13.560
So we're going to be happy
by using work trees.

8
00:00:13.560 --> 00:00:17.070
So work trees.

9
00:00:17.070 --> 00:00:19.290
So the best way to describe is
like a little story, right?

10
00:00:19.290 --> 00:00:21.762
You're on a worktree, foo_bar,
you're making the greatest progress ever.

11
00:00:21.762 --> 00:00:23.732
You're in flow state,
everything's going great.

12
00:00:23.732 --> 00:00:27.540
But then, emergency situation is needed
on main, some sort of bug there, so

13
00:00:27.540 --> 00:00:28.542
what do you do?

14
00:00:28.542 --> 00:00:32.784
Well, typically, we've been doing the
whole like git add, throw everything into

15
00:00:32.784 --> 00:00:36.486
the stash, switch the branches,
make the changes, and then come back or

16
00:00:36.486 --> 00:00:39.796
we could commit it and pull it and
try to figure out what's wrong.

17
00:00:39.796 --> 00:00:42.117
We need to do something right?

18
00:00:42.117 --> 00:00:46.899
Well, what's a little bit nicer is
worktrees, lemme show you how they work.

19
00:00:46.899 --> 00:00:49.626
First off, a work tree,
often when we say this phrase,

20
00:00:49.626 --> 00:00:51.976
what we mean is a linked working tree.

21
00:00:51.976 --> 00:00:53.318
It's not your main tree,

22
00:00:53.318 --> 00:00:57.466
the main tree is the one you you create
when you do a get innit or a git clone.

23
00:00:57.466 --> 00:00:59.417
Those are the main working trees.

24
00:00:59.417 --> 00:01:01.371
A linked working tree,

25
00:01:01.371 --> 00:01:06.461
is just simply a branch from your
main tree, in its own state.

26
00:01:06.461 --> 00:01:10.325
Remember, every commit can
rebuild the entirety of a repo.

27
00:01:10.325 --> 00:01:12.889
Very very important you understand that
one point because this is where it's

28
00:01:12.889 --> 00:01:14.135
really used right here.

29
00:01:14.135 --> 00:01:17.397
And it's a little bit different because
the .git folder is not a folder,

30
00:01:17.397 --> 00:01:18.245
it's just a file.

31
00:01:19.615 --> 00:01:21.585
So, Let's do a little bit of this okay?.

32
00:01:21.585 --> 00:01:24.278
First off you can do a git
worktree add &lt;path&gt;.

33
00:01:24.278 --> 00:01:26.205
The base name of the path will
be used as the branch name.

34
00:01:26.205 --> 00:01:31.365
If you don't know what basename is,
basename/foo/bar/baz.

35
00:01:33.375 --> 00:01:36.885
So this will automatically use
your path as a branch name.

36
00:01:36.885 --> 00:01:41.247
You can also add in the branch name if you
want it or you can just let it auto do it.

37
00:01:41.247 --> 00:01:44.377
Git worktree list will list
out your available work trees.

38
00:01:44.377 --> 00:01:48.409
If you wanna delete it, you can just
delete the work tree folder and

39
00:01:48.409 --> 00:01:50.065
then call worktree prune,

40
00:01:50.065 --> 00:01:54.827
or you can actually do a worktree remove
on the folder and it will do that.

41
00:01:54.827 --> 00:01:59.107
Depending on how you want to go about it,
it can do either of.

42
00:01:59.107 --> 00:02:02.380
The benefits is that it's super cheap
to make, pretty much like I said,

43
00:02:02.380 --> 00:02:04.566
pretty much as cheap as a branch.

44
00:02:04.566 --> 00:02:09.032
The real big con with the worktree is
if there's high branch setup cost.

45
00:02:09.032 --> 00:02:13.235
So like if you NPM install everything JS
and it takes way too long to do anything,

46
00:02:13.235 --> 00:02:15.372
well that's a problem, right?

47
00:02:15.372 --> 00:02:19.771
And so if you have to build like a Rust
project and it takes minutes upon minutes,

48
00:02:19.771 --> 00:02:23.056
you'll find yourself a little
bit more hesitant to use them

49
00:02:23.056 --> 00:02:25.080
depending on how long it takes.

50
00:02:25.080 --> 00:02:28.997
So, we're gonna create
a work tree in Hello Git and

51
00:02:28.997 --> 00:02:32.830
I want to use foo bar as
the last item in the path.

52
00:02:32.830 --> 00:02:35.200
So it creates the branch foo-bar.

53
00:02:35.200 --> 00:02:39.620
My suggestion is just go back one folder,
from your root of hello git and

54
00:02:39.620 --> 00:02:43.104
just use the just use dash,
dash or ../foo- bar.

55
00:02:43.104 --> 00:02:45.844
And when we're done,
check out the Git folder.

56
00:02:45.844 --> 00:02:50.539
So I'm gonna go like this, I'm going
to go git worktree add../foo-bar.

57
00:02:50.539 --> 00:02:51.516
I think it probably already exists.

58
00:02:51.516 --> 00:02:52.494
Nice, it doesn't.

59
00:02:52.494 --> 00:02:53.021
Let's go.

60
00:02:53.021 --> 00:02:55.884
There we go,
we prepared a new worktree and

61
00:02:55.884 --> 00:02:59.154
it's been checked out at
this point right here.

62
00:02:59.154 --> 00:03:03.337
So it created a new branch at this current
point, which means if I open up foobar,

63
00:03:03.337 --> 00:03:05.060
you'll notice I'm in a repo.

64
00:03:05.060 --> 00:03:08.420
I can tell that I'm in a Git repo, cuz I
have this nice little thing right here.

65
00:03:08.420 --> 00:03:11.665
If I go git log, you can see revert E.

66
00:03:11.665 --> 00:03:15.780
A + 9, merge,
you can see all of our commits in here.

67
00:03:15.780 --> 00:03:20.269
We're in the same repo,
just on a different branch.

68
00:03:20.269 --> 00:03:22.009
Now here's the best part about that.

69
00:03:22.009 --> 00:03:24.222
Let's cat out the git log or
the git folder, remember,

70
00:03:24.222 --> 00:03:25.709
it's not a folder anymore.

71
00:03:25.709 --> 00:03:29.439
It actually just tells you, the file
just simply says, hey, I belong here.

72
00:03:31.419 --> 00:03:35.403
And so it tells you where the main working
tree is, cuz this is a linked working

73
00:03:35.403 --> 00:03:39.689
tree, which means that if I go like this,
them, let's see, I wanna make sure

74
00:03:39.689 --> 00:03:42.970
I'm not actually accidentally
getting out over my skis here.

75
00:03:46.834 --> 00:03:49.361
Yeah, I'm gonna do one little quick thing,
it's not in the notes, but

76
00:03:49.361 --> 00:03:50.408
we'll just do it right here.

77
00:03:50.408 --> 00:03:54.249
If I go like this, if I go foo,
put in some changes right here and

78
00:03:54.249 --> 00:03:58.992
go git status and go git commit,
put in a little change really quickly.

79
00:03:58.992 --> 00:04:02.942
Then I'm gonna go back to Hello Git,
if I go,

80
00:04:02.942 --> 00:04:07.418
if I go get log foobar,
my changes right there, right?

81
00:04:07.418 --> 00:04:10.223
Cause it's a linked working tree,
it's just another,

82
00:04:10.223 --> 00:04:12.688
you just have another
entrance into your folder.

83
00:04:12.688 --> 00:04:14.998
So that way you can actually
have two running copies, right?

84
00:04:14.998 --> 00:04:17.292
So you could actually have
your feature development and

85
00:04:17.292 --> 00:04:19.088
then just like mainline over here.

86
00:04:19.088 --> 00:04:20.057
And so that way you can always,

87
00:04:20.057 --> 00:04:21.891
you only have like two folders
you're really working on.

88
00:04:21.891 --> 00:04:25.319
So anytime you need to like update code or
do some sort of like emergency switch,

89
00:04:25.319 --> 00:04:28.542
you can do that and just leave your
working tree in whatever state it's in,

90
00:04:28.542 --> 00:04:30.451
and then you never really switch branches.

91
00:04:30.451 --> 00:04:33.951
So the idea is that branch switching
is almost like an anti-pattern.

92
00:04:33.951 --> 00:04:38.270
Instead you just use worktrees constantly
to build everything, and that way you

93
00:04:38.270 --> 00:04:42.525
never have to undo stashing just does not
exist, you just simply have the file or

94
00:04:42.525 --> 00:04:45.633
the the branch out as its own
folder with its own state and

95
00:04:45.633 --> 00:04:49.349
then when you're done you just prune
it you got you just get rid of it.

96
00:04:49.349 --> 00:04:52.948
And so that's kind of like the idea, like
the ideal idea but you know you can also

97
00:04:52.948 --> 00:04:56.443
just have like two versions of itself
where you switch branches all you want,

98
00:04:56.443 --> 00:04:57.501
there's some moves.

99
00:04:57.501 --> 00:05:01.344
And so if i go like this git worktree
list, it'll tell me my two work trees,

100
00:05:01.344 --> 00:05:04.638
I have my main working tree right here,
and then I have this one,

101
00:05:04.638 --> 00:05:06.845
which is my linked working tree, foobar.

102
00:05:09.429 --> 00:05:13.492
Pretty cool, I like this one,
I really do like him.

103
00:05:13.492 --> 00:05:17.516
Now, remember, there's two ways
you can delete them, of course, so

104
00:05:17.516 --> 00:05:20.009
that means I can go rm -rf ../foo-bar.

105
00:05:21.350 --> 00:05:27.829
And once I do that, if I go worktree list,
you'll see right here,

106
00:05:27.829 --> 00:05:32.019
it knows that this thing no longer exists.

107
00:05:32.019 --> 00:05:34.748
And you're probably thinking,
how does it know that it no longer exists?

108
00:05:34.748 --> 00:05:38.242
It means not only is there a link from
your linked working tree to your main

109
00:05:38.242 --> 00:05:42.490
line, your main line must also have that
information out to the linked worktree.

110
00:05:42.490 --> 00:05:43.972
I'm not sure if I know where it is,
honestly,

111
00:05:43.972 --> 00:05:45.514
just off the top of my head I think I do.

112
00:05:45.514 --> 00:05:47.722
I bet, totally pre-planned.

113
00:05:47.722 --> 00:05:49.880
Then you can see work trees, right?

114
00:05:49.880 --> 00:05:52.850
So you can actually see it right here,
so you can see, here it is.

115
00:05:52.850 --> 00:05:55.270
That, you can see what head
it's supposed to be at.

116
00:05:55.270 --> 00:05:56.470
You can see the git dir.

117
00:05:56.470 --> 00:05:59.080
So you'll notice that this
is no longer a thing.

118
00:05:59.080 --> 00:06:02.288
It probably just stats out the file and
notices if the file's missing.

119
00:06:02.288 --> 00:06:04.778
It just says, hey, this is a prunable
worktree, you've already deleted it.

120
00:06:04.778 --> 00:06:09.388
And so that's how it effectively is
able to understand that I've deleted it

121
00:06:09.388 --> 00:06:12.844
outside of git, so
now I can just go get worktree prune and

122
00:06:12.844 --> 00:06:15.738
if I go get work tree list,
it's gone, right?

123
00:06:16.998 --> 00:06:18.568
Awesome, I mean I think it's great.

124
00:06:18.568 --> 00:06:19.928
I really like that, I love work trees.

125
00:06:19.928 --> 00:06:23.182
They're absolutely fantastic, they just
solve that one really annoying problem of

126
00:06:23.182 --> 00:06:26.043
having to switch things,
stash things, commit things early.

127
00:06:26.043 --> 00:06:29.689
Any of that, all right.

128
00:06:29.689 --> 00:06:35.803
All right we can, yeah,
I mean we can get worktree remove.

129
00:06:35.803 --> 00:06:37.683
We don't need that,
we don't need to do that one too.

130
00:06:37.683 --> 00:06:40.464
I do love work tree stuff,
they're just my favorite.

131
00:06:40.464 --> 00:06:43.697
There is also end files
are really painful.

132
00:06:43.697 --> 00:06:46.468
So if you have an end file,
if it's checked into the repo,

133
00:06:46.468 --> 00:06:50.047
which would be a little unusual,
if that's the case, then you're fine.

134
00:06:50.047 --> 00:06:53.588
But if it's not checked into the repo,
then you have like this whole,

135
00:06:53.588 --> 00:06:56.847
like copying of your end file
around node modules goes great.

136
00:06:56.847 --> 00:07:01.462
It just builds really fast so that just
works out, but everything else kind of

137
00:07:01.462 --> 00:07:06.224
tends to be a little bit more of pain that
way, so just something to think about.

