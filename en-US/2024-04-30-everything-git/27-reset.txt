[00:00:00]
>> Alright, git reset. So this one you've seen me use a couple times cuz we definitely didn't have any problems earlier, which required me to change history or anything. We didn't have any deviations from this course, it's been first try all day long, but if I did I would've probably used git reset.

[00:00:18]
There's actually quite a bit you can do with reset I only use it pretty much one way, which is just get rid of my current changes, that's pretty much what I use. Like I don't like these just get the hell out of here, right like that's what I that's how I use it so we're not there right now, we're gonna do a little bit different, we're gonna kind of show you a little bit more.

[00:00:37]
So a soft reset is a reset In which you actually walk back a commit, your branch will walk back a commit with you. And that commit that you just effectively forgot and changed history will become the change inside the working tree and index. So we just got done reverting E, right?

[00:00:58]
So if I go git reset --soft head tilde 1, I'm now gonna walk back that commit, it's still trunk, right? We're still in trunk, but if I go git log one line, you'll notice, where's the revert? The revert, where's the revert? It's gone, right? If I go git status.

[00:01:20]
Well, look what the VCS drug in, get diff stage, there we go. Awesome, there's the -C, so you can see I just undid the commit. That's git reset soft, which means that all the changes now go into your working tree slash into your index. So, awesome. I actually really like this, it's really great when you say you're teaching a class and you totally mess up.

[00:01:46]
You can actually walk these things back pretty easy, contain all the changes and know how to work things. I really like, I actually really like reset soft, and the best part is I didn't really even know about reset soft for a very long time. Typically what I would do is I would just go into the logs, check out the specific Shah and then just delete my branch and create that as my new branch.

[00:02:05]
But instead with reset a hard or soft you can just walk it back and you don't have to do that little hopping, recreating checking out, destroying type thing. There's also kind of like an inverted version of this, like right now if I do this resets soft I can actually commit, write a new shot, right?

[00:02:23]
And now I have the same change, but I've changed the message so it no longer says we reverted E, and it has a new shot. So I've kind of hit history by accident, right? But I could do the exact same thing in some sense by using get a met, so commit --amend allows you to take your current changes and retroactively apply them to the commit you're on.

[00:02:46]
And then you can even do amend --no edit, and that will edit the commit you're just on, but you don't have to change the commit message. When I'm doing CI, I literally echo a, space to the end of a file, git add, git commit, amend, no edit, git force push.

[00:03:09]
That way there's only like one change, instead of the CI thing where you have 9,000 changes. You can do a git reset soft git commit and just keep on changing the thing over and over again or just add a space and do that. So amend, reset soft. Fun little move here, I do it all the time.

[00:03:25]
Good times, but remember, you're always changing history when you're doing those things, so can be a little bit dangerous. All right, so hard, we can do the same thing as soft, except for this one drops the changes to index in your working tree. That means when you go back, it will completely destroy it.

[00:03:43]
So we'll do the exact same thing, we are going to make a little bit of a change and we're gonna destroy our changes with reset --hard. So first make a change to README and then add a new file called foo.md, make those two and then let's destroy them.

[00:03:56]
So I'll go vim README, jump in here, there we go, a little bit of a change and then foo.md and I don't know. There you go, some voac in there. Git status, you can see these two things right here. Now remember, this is a tracked change that's not staged, cuz remember, read means is tracked, it's a part of the working tree.

[00:04:15]
Foo is not a part of the working tree, it has never been tracked, it's never been staged, and so we have no information about it. So if I go git reset --hard, it will destroy all working tree changes and index changes. So if go git status, still got foo, I just don't have the readme change anymore, cuz remember, it just destroys only what git knows about.

[00:04:37]
Now, here's the danger, this is the big danger if people fall into white, they'll get at this, and so now it now knows about this for the first time, and I go get reset --hard. It's gone and there's like no coming back from this one, it's a goner, right?

[00:04:54]
You just erased a file that was never tracked, and so there's no previous history at this point. So you got to be a little careful about using reset heart, you can also do the whole walking back. So if I go up, if I go vim read me and I add a commit, right here and go git add git commit, now a bunch of nonsense and then go git a reset.

[00:05:13]
Hard HEAD-1, it does the exact same thing that soft did except for again, what does it do to the index and working tree gets rid of it. So if I go git status, nothing there, just simply walk me back one commit. So get log one, you'll see that I'm at the new shawl.

[00:05:30]
So kind of neat. So, when you're needing to kind of just save yourself a little bit, knowing about the git reset hard and soft is pretty nice.
>> It's not really a new SHA, anymore because it was it says a new SHA but it's.
>> Get out.
>> [LAUGH]

[00:05:47]

>> That's it. We are fist fighting alright so there you go pretty fun times I don't know I actually really like I really it's just it's absolutely fantastic having these. I can't tell you how many odd times that this actually is you Is useful, that I used to do a bunch of steps to do the same thing, now it's just like I can just do them in one single command.

[00:06:05]
As often I find myself checking out and destroying the past and rechecking out a new branch and doing all this just to walk back a couple commits that I was like, ooh, I really goofed whatever that was. All right. Let's see. Ooh, yeah this is a good one, I forgot about this part.

[00:06:20]
Okay, so, all right, So I did just remove the revert, right? No, we didn't, I removed that extra change I put on top of it, right? That the vRAC whatever change, right? We just did that, together? We should, here, let me revert also the revert, so I'm gonna go like this, git reset --hard, there we go.

[00:06:46]
We're back now, we're kind of into this point. Now the revert's gone. So we're just right here. Can you restore git hello to the position it was before we started this section?
>> Is the SHA the same though, The answer, it's reflog, it's always reflog, right? You just gotta go find that nice little reflog.

[00:07:09]
I had a whole bunch of entries here, I did a bunch of extra work, yeah. You can effectively be able to grab out, our previous commit was the Revert E, remember? We did all that, so we gotta go find the Revert E, so I can go in here and go git reflog, find wherever revert is, there we go.

[00:07:25]
It's right here. And you can do that, I mean, there's plenty of ways you can do this. I'm sure there's some much more awesome way to do this, but I can get check out that thing. I can get branch delete trunk, I can get checkout --b trunk, right?

[00:07:37]
Well, yeah, I just restored it from doing that, I'm sure there's some nicer way to do that, I always find myself in habit of just doing that because I'm always, I don't know. Once you do something then it's really hard to break that habit, that's typically how I'll always do it.

[00:07:50]
Even with reset soft, sometimes I'll just forget that I can do that and I just do this big hopping thing. No. It's beautiful, you can do a git reset --hard. Yeah, you can do a git reset --hard whatever end. Type to remember, it's a reset part and then you can go anywhere.

[00:08:03]
So I can actually reset --hard to a branch that's remote or to anything that's a commit. So I could have also done the whole head and then whatever the index was, whatever it was 14, right? And I could go off and do that. So it's a nice little thing.

