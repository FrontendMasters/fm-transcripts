WEBVTT

1
00:00:00.610 --> 00:00:02.876
Or onto named locations in Git history.

2
00:00:02.876 --> 00:00:05.273
This is effectively me saying tags, right?

3
00:00:05.273 --> 00:00:08.650
I call a named location,
because it's not a branch,

4
00:00:08.650 --> 00:00:12.789
because a tag is an immutable
point in history, unlike a branch.

5
00:00:12.789 --> 00:00:15.864
Branches you update, you make commits to,
they move all around.

6
00:00:15.864 --> 00:00:19.704
A tag is an immutable
point in your Git history.

7
00:00:19.704 --> 00:00:24.545
And so the best way to think about it,
is that it has all

8
00:00:24.545 --> 00:00:29.399
the setup of a branch,
just without changeability.

9
00:00:29.399 --> 00:00:30.218
And so, how to use tags?

10
00:00:30.218 --> 00:00:33.100
Very, very easy, if you've never
used tags, simply do git tag,

11
00:00:33.100 --> 00:00:34.751
the name of the tag you want to create.

12
00:00:34.751 --> 00:00:38.057
git tag, delete if you wanna delete it,
get tag to the list them out,

13
00:00:38.057 --> 00:00:41.491
git checkout a tagname and you'll check
out a tag as if it were a branch.

14
00:00:41.491 --> 00:00:46.586
Except for you're just checking out a SHA,
and so you'll be in a detached head state.

15
00:00:46.586 --> 00:00:48.986
So kind of fun stuff.

16
00:00:48.986 --> 00:00:52.706
I go through the various operations here,
we'll do this one right here,

17
00:00:52.706 --> 00:00:54.807
I think this one's really interesting.

18
00:00:54.807 --> 00:00:57.672
Tags also show up in the logs,
so long as you use decorate,

19
00:00:57.672 --> 00:00:59.491
if decorate is your default option.

20
00:00:59.491 --> 00:01:03.362
You create tag,
git tag foobar, I go git log,

21
00:01:03.362 --> 00:01:06.947
you'll see right here, it also shows up.

22
00:01:06.947 --> 00:01:09.305
So you know which one you're looking at.

23
00:01:09.305 --> 00:01:12.488
So if you're trying to look for
a specific version, this is fantastic.

24
00:01:12.488 --> 00:01:15.438
You can pull tags with git pull --tags.

25
00:01:15.438 --> 00:01:19.782
So they're all, it's just like
working with branches, effectively,

26
00:01:19.782 --> 00:01:24.351
you can push tags with git push --tags,
it'll push tags up to an endpoint.

27
00:01:24.351 --> 00:01:26.378
There you go,
that's pretty much everything about tags.

28
00:01:26.378 --> 00:01:30.424
I'm gonna largely kind of skip this
version because I don't think I've said

29
00:01:30.424 --> 00:01:31.614
everything about it.

30
00:01:31.614 --> 00:01:34.306
We kind of know at this
point how to use branches.

31
00:01:34.306 --> 00:01:37.455
I've been using them all day,
you understand tags inherently, right?

32
00:01:37.455 --> 00:01:39.888
Any questions on tags?

33
00:01:39.888 --> 00:01:43.173
No, they're pretty straightforward, right?

34
00:01:43.173 --> 00:01:44.714
&gt;&gt; You just can't merge them back and
forth?

35
00:01:44.714 --> 00:01:45.375
&gt;&gt; You just can't change them.

36
00:01:45.375 --> 00:01:46.383
&gt;&gt; Yeah, that's it.

37
00:01:46.383 --> 00:01:52.342
&gt;&gt; That's it, all right,
my favorite tool to use is Fugitive.

38
00:01:52.342 --> 00:01:54.933
So I was gonna give you
a little quick look.

39
00:01:54.933 --> 00:01:57.261
I mean, I use the command
line maybe half the time,

40
00:01:57.261 --> 00:01:59.056
the other half the time I use Fugitive.

41
00:01:59.056 --> 00:02:02.342
It's pretty dang awesome, so
if I go in here, add a new line,

42
00:02:02.342 --> 00:02:04.377
this is my unstaged changes, right?

43
00:02:04.377 --> 00:02:06.064
I can stage them,
I can put them into that.

44
00:02:06.064 --> 00:02:08.188
I can unstage them, I can remove them.

45
00:02:08.188 --> 00:02:11.231
It's very, very nice to be able to
have those kind of fast usages of Git.

46
00:02:11.231 --> 00:02:15.376
I think it just makes life a little bit
nicer, especially as you get good at it.

47
00:02:15.376 --> 00:02:22.968
Let's see, let's go right here, and let's
do one more thing, just to make it nice.

48
00:02:22.968 --> 00:02:25.519
It allows you to do commit
messages right in your editor,

49
00:02:25.519 --> 00:02:27.286
which is also fantastic, I like that.

50
00:02:27.286 --> 00:02:31.941
And it also allows if there was
an upstream to push to here,

51
00:02:31.941 --> 00:02:35.747
let's go to, what's it called, remote git.

52
00:02:35.747 --> 00:02:40.238
I can also go in here, and I can also push
if I want to, so if I press Enter now,

53
00:02:40.238 --> 00:02:42.500
it's gonna go push this up to remote.

54
00:02:42.500 --> 00:02:44.707
It's not gonna work because we
may change the hello-git and

55
00:02:44.707 --> 00:02:46.186
there's problems we have to re-sync.

56
00:02:46.186 --> 00:02:51.378
But I can do that if I want to,
I can also jump in here, go into here, and

57
00:02:51.378 --> 00:02:56.834
I can, C-C-Z it, it's now stashed,
C-Z-A, and it's unstashed.

58
00:02:56.834 --> 00:02:59.107
It's kinda nice to be able to do that,
it's easy to rebase.

59
00:02:59.107 --> 00:03:03.403
If I really want to hit it with
the old R-I, and it'll do something,

60
00:03:03.403 --> 00:03:05.639
I'll have some unstaged, right?

61
00:03:05.639 --> 00:03:08.366
I can go in here, let's not do that one.

62
00:03:08.366 --> 00:03:12.076
There we go, and I can give it
the old R-I and go S, there we go.

63
00:03:12.076 --> 00:03:16.533
I've now just did an interactive rebase,
just change it to one commit.

64
00:03:16.533 --> 00:03:19.942
So having a good tool to be able to
work with Git is worth a whole bunch.

65
00:03:19.942 --> 00:03:23.122
So whatever tool you use, I hope,
well, first off, Vim is fantastic,

66
00:03:23.122 --> 00:03:24.125
if you don't use Vim.

67
00:03:24.125 --> 00:03:28.304
But if you don't use it and you use
that other editor, just learn the tool.

68
00:03:28.304 --> 00:03:31.181
I think it's GitLens, and
if you get really good at it,

69
00:03:31.181 --> 00:03:33.153
it can just save a whole bunch of time.

70
00:03:33.153 --> 00:03:36.112
The thing that really makes
this stuff really good,

71
00:03:36.112 --> 00:03:40.833
it's the reason why I didn't go over
diffs, really, pretty much in this course.

72
00:03:40.833 --> 00:03:43.226
I don't think diffs are good to
look at on the command line.

73
00:03:43.226 --> 00:03:44.880
I don't think they're enjoyable,

74
00:03:44.880 --> 00:03:47.984
I don't think anyone here is gonna
wanna resolve a conflict by hand.

75
00:03:47.984 --> 00:03:51.522
We all want the ability to look
at the change like this, right?

76
00:03:51.522 --> 00:03:53.523
Where you have one side and
the other side, and

77
00:03:53.523 --> 00:03:55.434
you get to choose which
side you want to use.

78
00:03:55.434 --> 00:03:58.684
And so, I largely don't think that
that kind of stuff is useful,

79
00:03:58.684 --> 00:04:00.410
that's why we didn't go over it.

80
00:04:00.410 --> 00:04:04.753
And so, please, if you're not using a tool
and you're resolving conflicts by hand,

81
00:04:04.753 --> 00:04:05.474
learn a tool.

82
00:04:05.474 --> 00:04:07.626
It'll make your life ten times better,

83
00:04:07.626 --> 00:04:11.816
because they can be a real big pain in the
ass if you try to do everything by hand.

