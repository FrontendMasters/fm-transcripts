WEBVTT

1
00:00:00.000 --> 00:00:02.102
Beautiful, okay, so
I have my remote git setup.

2
00:00:02.102 --> 00:00:07.426
But now we got this call,
production's down, there is a change

3
00:00:07.426 --> 00:00:13.554
you need to make or there's a change
you need to pull in from our upstream.

4
00:00:13.554 --> 00:00:18.125
So we're going to attempt to pull
it in with an act of change.

5
00:00:18.125 --> 00:00:19.531
So let's start there.

6
00:00:19.531 --> 00:00:23.046
So do a git pull right here, git pull.

7
00:00:25.158 --> 00:00:26.591
Wait a second, did I miss one thing?

8
00:00:30.370 --> 00:00:31.879
Did I not put it in?

9
00:00:31.879 --> 00:00:33.242
It's supposed to say, hey, hold on now.

10
00:00:33.242 --> 00:00:37.253
It's supposed to say, hold on,
you're not allowed to do that.

11
00:00:37.253 --> 00:00:41.699
Because you have unchanged things.

12
00:00:41.699 --> 00:00:45.789
I'm super confused why I'm not getting the
error that I was hoping to get right here.

13
00:00:45.789 --> 00:00:48.209
So it should say, hey, you don't do that.

14
00:00:48.209 --> 00:00:50.539
I think it's probably because
I had rebase automatically on.

15
00:00:50.539 --> 00:00:54.389
So I think I actually had my little
change in where I had rebase through.

16
00:00:54.389 --> 00:00:57.569
So it's causing a bit of,
you cannot pull with rebase.

17
00:00:57.569 --> 00:01:00.143
So oopsie daisies, right?

18
00:01:00.143 --> 00:01:02.964
So since I have an active change,
it's not letting me do those changes.

19
00:01:02.964 --> 00:01:05.007
So whenever you try to pull and
you have active changes,

20
00:01:05.007 --> 00:01:06.494
it's gonna tell you you can't do this.

21
00:01:06.494 --> 00:01:09.964
So we need to be able to stash,
so we'll just go like this.

22
00:01:09.964 --> 00:01:15.000
We'll do a another one of those
echo upstream change into here,

23
00:01:15.000 --> 00:01:19.676
git add this, git commit,
upstream change, there we go.

24
00:01:19.676 --> 00:01:22.126
We have the upstream change in hello.

25
00:01:22.126 --> 00:01:26.936
Now, we go to the remote and we can go,
echo downstream change into the readme.

26
00:01:26.936 --> 00:01:28.951
So now we have something in the readme and

27
00:01:28.951 --> 00:01:31.036
we have a change we
need to get from hello.

28
00:01:31.036 --> 00:01:32.986
So what are we going to do now?

29
00:01:32.986 --> 00:01:34.966
We are gonna use stash, right?

30
00:01:34.966 --> 00:01:36.556
So this is what you do at this point.

31
00:01:36.556 --> 00:01:39.825
You'd wanna stash any of your changes
to prevent any errors from happening.

32
00:01:39.825 --> 00:01:43.436
And then you're gonna want to
be able to get the changes and

33
00:01:43.436 --> 00:01:46.763
then you're gonna wanna be
able to unstash, right?

34
00:01:46.763 --> 00:01:48.929
So this is typically what
you're gonna want to do.

35
00:01:48.929 --> 00:01:54.780
So right now, before we do anything,
let's stash our changes.

36
00:01:56.662 --> 00:02:01.146
So you can experiment by going git stash,
and then go git status.

37
00:02:03.785 --> 00:02:04.905
Your changes are gone, right?

38
00:02:04.905 --> 00:02:07.030
Don't pull yet, don't pull.

39
00:02:09.369 --> 00:02:10.914
You can view your stash list.

40
00:02:10.914 --> 00:02:15.075
This is a good kind of activity to get
into viewing your stash list because it's

41
00:02:15.075 --> 00:02:17.481
really nice to know that
you can even do that.

42
00:02:17.481 --> 00:02:21.255
So again, git stash lists, so
if you ever get into this, you will know.

43
00:02:21.255 --> 00:02:23.909
So we have this work in progress
that we've stored right here at this

44
00:02:23.909 --> 00:02:24.525
point in time.

45
00:02:24.525 --> 00:02:26.585
You can see, okay, it was at this commit.

46
00:02:26.585 --> 00:02:28.426
Not very informative though, right?

47
00:02:28.426 --> 00:02:31.997
When you look at this, you don't really
know what your stash changes are or

48
00:02:31.997 --> 00:02:32.571
anything.

49
00:02:32.571 --> 00:02:35.682
So we can go git stash show,
little bit nicer to see, okay,

50
00:02:35.682 --> 00:02:37.945
this is the one where I
made a change to readme.

51
00:02:37.945 --> 00:02:42.396
So a little bit nicer,
let's pop our stashes this time,

52
00:02:42.396 --> 00:02:46.490
and we pop it I wanna see
that is now made that change.

53
00:02:46.490 --> 00:02:49.699
Git stash pop, there we go.

54
00:02:49.699 --> 00:02:52.636
Our changes back is right here, all right.

55
00:02:52.636 --> 00:02:58.555
Now let's stash our changes again but
this time, let's use a custom message.

56
00:02:58.555 --> 00:03:04.368
So go git stash with a message or
readme changes.

57
00:03:04.368 --> 00:03:08.804
There we go, we did a stash again, but
this time with a custom message, so

58
00:03:08.804 --> 00:03:10.174
now do git stash list.

59
00:03:10.174 --> 00:03:14.885
Now look at that, isn't that a lot nicer
to do when you have a nice message?

60
00:03:14.885 --> 00:03:17.310
The reality is sometimes you
will have a couple stashes and

61
00:03:17.310 --> 00:03:19.496
you're not gonna remember
what's in the stashes.

62
00:03:19.496 --> 00:03:23.009
And so just having a nice little friendly
message to yourself can just, it'll just

63
00:03:23.009 --> 00:03:26.168
save a lot of headaches rather than trying
to go through get all the diffs and

64
00:03:26.168 --> 00:03:29.329
looking at each different one, and
then realizing, gosh, like this,

65
00:03:29.329 --> 00:03:30.865
there's the one I'm looking for.

66
00:03:30.865 --> 00:03:34.770
So now, let's create another change and
we'll stash that so

67
00:03:34.770 --> 00:03:37.031
we have two in the list, all right?

68
00:03:37.031 --> 00:03:38.690
So let's go another one.

69
00:03:38.690 --> 00:03:42.002
I'll just go vim readme, and
I don't know, just add another line.

70
00:03:42.002 --> 00:03:43.828
There we go, Dvorak, by the way.

71
00:03:43.828 --> 00:03:48.857
And then I'll go git stash another change.

72
00:03:48.857 --> 00:03:52.353
So now when I go git stash list,
I'll actually see two changes.

73
00:03:52.353 --> 00:03:55.922
I have another change on top,
and the readme changes on bottom.

74
00:03:55.922 --> 00:03:58.502
So the readme changes is
the first set of changes we did.

75
00:03:58.502 --> 00:04:02.774
Another change is Is the second set of
changes we did, but notice it's on top,

76
00:04:02.774 --> 00:04:03.959
it's the first one.

77
00:04:03.959 --> 00:04:06.494
So let's pull in our upstream changes now.

78
00:04:06.494 --> 00:04:09.307
So I'm gonna go git pull, there we go.

79
00:04:09.307 --> 00:04:11.933
I have this beautiful upstream change.

80
00:04:11.933 --> 00:04:15.619
Now, let's get our original change
back the first stash we did,

81
00:04:15.619 --> 00:04:19.250
does anyone remember how you're
gonna get the first stash out?

82
00:04:19.250 --> 00:04:22.363
Not the second, not the one we just added,
but the first one.

83
00:04:22.363 --> 00:04:23.522
&gt;&gt; Pass the index.

84
00:04:23.522 --> 00:04:24.977
&gt;&gt; Pass the index, there you go.

85
00:04:24.977 --> 00:04:27.884
So what you should be
doing is going git stash.

86
00:04:27.884 --> 00:04:31.096
Well first,
you can go git stash list, make sure,

87
00:04:31.096 --> 00:04:35.802
okay I need to pull out the first one
right here and go git stash pop index 1,

88
00:04:35.802 --> 00:04:38.070
and now we have that proper change.

89
00:04:38.070 --> 00:04:42.539
We If we don't have the Dvorak one,
right, we have the downstream change.

90
00:04:42.539 --> 00:04:46.252
So working with stash pretty easy to use.

91
00:04:46.252 --> 00:04:50.102
Now we have this beautiful change on top,
awesome.

92
00:04:50.102 --> 00:04:53.628
And if we want to, we can even commit it
if we want to, but stage has not changed,

93
00:04:53.628 --> 00:04:54.219
there we go.

94
00:04:54.219 --> 00:04:56.235
And it looks like even
in here I committed so

95
00:04:56.235 --> 00:04:59.934
we will commit it with the exact same
beautiful message that I have right here.

96
00:04:59.934 --> 00:05:03.677
Let's see that's,
copying from terminal, git add.

97
00:05:03.677 --> 00:05:06.451
Greatest change, fantastic, there we go.

98
00:05:06.451 --> 00:05:08.283
So commit that into your code.

99
00:05:10.933 --> 00:05:14.668
That means your readme should
approximately look like that.

100
00:05:14.668 --> 00:05:15.969
I have a little space in here.

101
00:05:15.969 --> 00:05:18.643
There's no space in my example one.

102
00:05:18.643 --> 00:05:21.996
It's because my first
commit contained that.

103
00:05:21.996 --> 00:05:27.919
It's that one right there.

104
00:05:27.919 --> 00:05:29.783
See, look at that.

105
00:05:29.783 --> 00:05:34.478
I added a space, but in all my examples I
didn't have the space, very painful for

106
00:05:34.478 --> 00:05:37.043
me to see this,
I can't believe I did that.

107
00:05:37.043 --> 00:05:41.016
By the way, if you don't know,
I don't cover it in this course,

108
00:05:41.016 --> 00:05:45.498
but- S will search like your commit
message or search the commit change so

109
00:05:45.498 --> 00:05:49.140
you can look for changes that way,
very, very fantastic.

110
00:05:49.140 --> 00:05:51.622
So I knew where to find it,
that's how I found it right away.

111
00:05:51.622 --> 00:05:54.610
Pretty neat stuff,
just in case you're wondering.

112
00:05:54.610 --> 00:05:55.710
All right, so work trees.

113
00:05:55.710 --> 00:05:59.307
We're gonna talk about this in
a little bit, I believe, I'm not sure.

114
00:05:59.307 --> 00:06:00.819
Yeah, we're not talking
about it right now, but

115
00:06:00.819 --> 00:06:02.117
we're gonna talk about it in a little bit.

116
00:06:02.117 --> 00:06:06.279
The thing that makes worktree so
cool is that a worktree is

117
00:06:06.279 --> 00:06:10.537
another copy of your repo without
all the weight of a repo.

118
00:06:10.537 --> 00:06:13.944
So if it takes you five minutes
to download to clone out a repo,

119
00:06:13.944 --> 00:06:18.087
you can build a worktree effectively
just as fast as you can build a branch.

120
00:06:18.087 --> 00:06:20.537
They're very, very lightweight and
they're fantastic.

121
00:06:20.537 --> 00:06:24.865
So you can see why that could be
a very nice alternative to stash.

122
00:06:27.861 --> 00:06:29.307
All right, so
we're gonna do more rebasing.

123
00:06:29.307 --> 00:06:33.663
This will be the longest section here and
it's gonna have all the conflicts and

124
00:06:33.663 --> 00:06:35.911
everything and we're gonna go over it.

125
00:06:38.392 --> 00:06:39.206
It's gonna take a little bit.

126
00:06:39.206 --> 00:06:44.873
So anyways, rebasing, you can do things
like this, where we start off here, right?

127
00:06:44.873 --> 00:06:46.253
E is branching off of A,

128
00:06:46.253 --> 00:06:49.635
this picture makes it looks
like it's branching off of B.

129
00:06:49.635 --> 00:06:51.857
I'm not sure which one I chose to
have it actually branch off of,

130
00:06:51.857 --> 00:06:52.857
it doesn't really matter.

131
00:06:52.857 --> 00:06:56.098
It branches off in the days
of history way back then.

132
00:06:56.098 --> 00:06:57.947
And if you do a rebase, you can make it so

133
00:06:57.947 --> 00:07:00.091
that it goes all the way to the front,
right?

134
00:07:00.091 --> 00:07:01.970
We all remember this,
what are the steps that happen?

135
00:07:01.970 --> 00:07:05.047
Step one,
we check out the branch we're rebasing on.

136
00:07:05.047 --> 00:07:05.656
Step two,

137
00:07:05.656 --> 00:07:09.867
we play our commits one at a time at
the tip of the branch we are rebasing on.

138
00:07:09.867 --> 00:07:15.625
Three, we update the branch we were on
with the new position and the new commit.

139
00:07:15.625 --> 00:07:18.929
That's why it alters histories,
because remember, it's actually

140
00:07:18.929 --> 00:07:22.513
creating a new set of commits because
remember a commit also contains time.

141
00:07:22.513 --> 00:07:26.183
So that's why you get new
commits when you rebase.

142
00:07:26.183 --> 00:07:27.013
Everyone's good?

143
00:07:27.013 --> 00:07:28.036
Everyone's good on that one?

144
00:07:28.036 --> 00:07:30.753
Awesome, all right, so first,

145
00:07:30.753 --> 00:07:35.909
let's do a little bit of
interactive rebasing and squashing.

146
00:07:35.909 --> 00:07:40.278
So this part is where you'll do this
pretty much on your own branches,

147
00:07:40.278 --> 00:07:41.843
never on the public one.

148
00:07:41.843 --> 00:07:45.539
Interactive rebasing and
squashing allows you to take, say,

149
00:07:45.539 --> 00:07:48.189
this branch right here and
turn it into this,

150
00:07:48.189 --> 00:07:51.693
where it's a singular commit
as opposed to three commits.

151
00:07:51.693 --> 00:07:54.509
So that means while you're working,
you can make all the commits you want,

152
00:07:54.509 --> 00:07:55.533
every single checkpoint.

153
00:07:55.533 --> 00:07:58.274
And then when you're done,
you can take all those commits and

154
00:07:58.274 --> 00:07:59.811
turn it into one commit yourself.

155
00:07:59.811 --> 00:08:03.127
Now, a lot of people do it
where they have the remote,

156
00:08:03.127 --> 00:08:06.761
like say GitHub will do
an automatic squash merge for you.

157
00:08:06.761 --> 00:08:09.744
It'll first take all of your commits,
squash it into one and

158
00:08:09.744 --> 00:08:11.101
then merge it onto GitHub.

159
00:08:11.101 --> 00:08:12.581
That's a pretty common
strategy that I've seen.

160
00:08:12.581 --> 00:08:15.591
I know we do it with Stash and
stuff like that, and Netflix.

161
00:08:15.591 --> 00:08:20.494
So I think most people probably
have some very similar experience.

162
00:08:20.494 --> 00:08:24.472
And when you do interactive rebasing,
it also allows you to edit the message so

163
00:08:24.472 --> 00:08:27.785
that way, what I typically do is
I'll do each one of my commits and

164
00:08:27.785 --> 00:08:29.254
I'll start with squash me.

165
00:08:29.254 --> 00:08:31.794
So I can just look in the history and
go okay, where did I start?

166
00:08:31.794 --> 00:08:35.057
Okay, I started right here,
rebase from right there.

167
00:08:35.057 --> 00:08:39.720
And then it's very easy and interactive
and I can just erase all the messages and

168
00:08:39.720 --> 00:08:44.051
give it a nice, proper message as
opposed to a bunch of squash me, right?

169
00:08:44.051 --> 00:08:47.326
And so we're gonna create a, we're gonna
create some situations where we can

170
00:08:47.326 --> 00:08:50.017
interactively squash our commits and
get some good messaging.

171
00:08:50.017 --> 00:08:51.352
There's a lot of ground to cover here.

172
00:08:51.352 --> 00:08:54.790
We're gonna go over conflicts cuz
conflicts are very important part of this.

173
00:08:54.790 --> 00:08:57.945
If for whatever reason I've
done steps out of order, and

174
00:08:57.945 --> 00:09:02.284
we're unable to create the conflict as
easily, we might have to add some extra

175
00:09:02.284 --> 00:09:07.042
commits because that's part of the fun, is
that we didn't do it right the first try.

176
00:09:07.042 --> 00:09:10.460
So be very careful where we make
changes because from here on out,

177
00:09:10.460 --> 00:09:14.512
we're gonna be trying to make conflicts
and we all want to be on the same page.

178
00:09:14.512 --> 00:09:18.687
So the first, it is, by the way, conflicts
are the most dreaded topic, I hate them.

179
00:09:18.687 --> 00:09:22.808
I don't know why I have an unreasonable,
I have an unreasonable amount of anxiety

180
00:09:22.808 --> 00:09:25.867
every time I pull a gun, man,
there's gonna be a conflict.

181
00:09:25.867 --> 00:09:27.218
And even though I know there's not,

182
00:09:27.218 --> 00:09:29.057
I still just feel like I'm
gonna have a freak out.

183
00:09:29.057 --> 00:09:30.584
I don't know why it is.

184
00:09:30.584 --> 00:09:32.327
It just, it's that experience.

185
00:09:32.327 --> 00:09:35.537
Yeah, I hate them, you hate them, but
it's good to know how to resolve them.

186
00:09:35.537 --> 00:09:38.195
Please, by the way, don't use VS Code.

187
00:09:38.195 --> 00:09:40.375
Don't use fugitive with git or with vim.

188
00:09:40.375 --> 00:09:42.125
Don't use any of those for this.

189
00:09:42.125 --> 00:09:44.895
Let's just manually edit the diffs.

190
00:09:44.895 --> 00:09:46.645
You want to see why they're doing this.

191
00:09:46.645 --> 00:09:50.172
It's gonna be very important,
especially with your knowledge of rebase,

192
00:09:50.172 --> 00:09:52.662
why conflicts can be goofy
with rebase versus merge.

193
00:09:52.662 --> 00:09:55.965
We're gonna go through it all, but
if you're not using the hand edit,

194
00:09:55.965 --> 00:09:59.395
you're just using a program,
you may miss some of these subtle changes.

