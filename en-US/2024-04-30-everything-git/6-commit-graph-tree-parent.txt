[00:00:00]
>> I will now do this, so I'm gonna go like this, git cat file -p and print it out. Look at this, it has a tree. Well, what's a tree? It has the author, it has the committer, it has the time. It has, I don't know, 0600 on it.

[00:00:13]
It has my friendly message involved right here. Where's our commit though? This doesn't tell me anything. So there's another SHA here, so I'm just gonna grab that SHA, whoopsies, and I'm gonna just put it in. Look at this. Again, something that looks like file permissions, blob, another SHA, and look at that, the name of the file we just got done adding.

[00:00:36]
So kinda looks like we can kind of walk through git and we can find the file that is stored. So I'm gonna go here now, and I'm gonna do the exact same thing. I'm gonna print out that. And look at that, hello frontend masters. I was able to go all the way down and drill to the exact point of the change we've made by starting with the git sha.

[00:00:55]
This is very, very important. Now there's some really good key terms here that you need to know. First off, you'll notice that there's a tree, right? You see the term tree being printed out. The easiest way to think about tree is a tree is a directory. It contains a set of files or more directories.

[00:01:15]
A blob, which you saw right here, is a file. And so that's kind of the mentality you should have if you ever look or peruse through these commits. And we will actually use this information later and restore stuff that we've lost by knowing this kind of information. So anyways, there we go, we were able to go all the way down to the bottom.

[00:01:35]
So that means our SHA contained a tree, and that tree contained our file, and that file contained the entirety of that file, not just our changes, but the entirety of the file. So here you go, very key concepts, make sure you know that. Big takeaway, git does not store diffs.

[00:01:54]
And we're gonna prove that, it stores the entirety of stuff. And so I want you to just take a moment and remember this SHA, maybe by the first couple characters. Mine's ec3, you just remember yours. This is the SHA to the file. This is a very important part right here.

[00:02:12]
All right, so we're gonna do something else. I want you to create a second file and I want you to commit it and call it second.md. Whatever text you want, just create something. So I'll do the exact same thing. All right, fantastic, hopefully everyone mostly got that done.

[00:02:36]
Just make it a quick, easy change. By the way, I do want you, if you're using some sort of command line utility or you're using your editor, if you're using VS Code or Vim, don't use the git client. Right now, we're gonna stay all in the command line.

[00:02:50]
And I want you to be there for a reason cuz you want to understand what's actually happening. Cuz when you use something like Fugitive for Vim, it's literally just translating your actions into these command line arguments. So I just want you to understand what's happening here. All right, explore your new commit.

[00:03:07]
What can you say about first.md in your new commit? Cuz we didn't touch first.md, did we? We didn't, we just simply added a new file and then committed it. So can you find first.md in your new commit? By the way, a little fun fact, you get the first seven characters right here whenever you commit.

[00:03:23]
So you can actually copy that and go git cat file -p, throw that in there. All right, notice something a little different here, we have a tree, again, remember this is your folder, but we also have a parent. And notice that that is the SHA for my first commit, it will be the SHA from your first commit, you can start seeing how this graph is being born.

[00:03:41]
Your first one doesn't have the parents, the next one does, and from here on out they'll all have parents or multiple parents. Second, let's take this tree and I'm going to cat this out. Git cat, there we go. Now look at that. I actually have out, I actually committed out.

[00:03:58]
Remember when I showed you the log, I didn't look at what I was doing, I accidentally committed out. Mistakes were made, but either way, you see this right here, you see that I have both my first and now my second. But remember this very important part, look at what first is.

[00:04:14]
It's the same SHA that it had in the previous commit. Meaning our commits store pointers to the entire contents of that file. So we did not update first, therefore this next commit contains first, but it contains a pointer to the exact version. That means at any point in time, you only need one commit to rebuild your repo, and you can completely rebuild everything about it.

[00:04:40]
Because that is how it works, is that every single commit stores the entirety of the state, not a differential. And this is a very important point about git, cuz it just helps you understand git fundamentally. And so as you use merge and rebase and all these other commands, it's just good to know this, all right?

[00:04:58]
I mean, there's absolutely no reaction right now with the live audience, which makes me think maybe this isn't as cool as I think it is. I mean, I thought this was so cool and you guys are.
>> Still processing.
>> Okay, any questions about this? Okay, how about I'll invert it, does this generally make sense?

[00:05:19]
Even if you don't understand how the compression works, how does it look up stuff? Do you at least understand that git stores these files, stores them as a bunch of these really long strings of characters. And those long strings of characters contain every last change of your repo?

[00:05:33]
Question?
>> So the first two characters of a commits SHA is then placed where those blobs are for each file, so that that points to the commit that it was last updated in?
>> Effectively, yes. And so you can see right here, if I look at that, ec.

[00:05:55]
If I go ls git/objects, you'll see, ec. So you actually see that it literally is storing each thing and then it build it up. Every tree contains effectively one or more blob, is the way to look at it. That's why you can't commit an empty folder. Have you ever created a folder and then nothing shows up?

[00:06:17]
That's why, cuz the tree has to have something.
>> And Richard says, is this like a linked list?
>> That's a good way to think about it, it's like a linked list. The problem about a linked list thought is that a linked list contains a node that points to the next node.

[00:06:31]
But git, you could have more than one parent. It's an acyclic graph that happens to be linear, is probably the best way to look at it, is that there is an unironic order to git, which is time, right? So as time marches forward, every commit you make is ordered that way.

[00:06:48]
That's actually an extremely important point to make sure you have in your head. Cuz when we do bisecting, time is a very important aspect to it and why bisecting works very, very well. If you've never used bisect, I'm very sorry if you've ever had to find when a bug happened and you didn't know that this tool exists, so we'll go over it.

[00:07:05]
All right, so what was the problem? Okay, we already went through this. Awesome, fantastic, you get it. Hopefully this does make git feel less magical, though. I want git to feel magical because it works so well, not because it's mysterious, and that's where you want magic to happen.

[00:07:23]
You want it to be a great product, not mysterious that it actually works. Sometimes it's mysterious that it actually works cuz you programmed it and you're shocked that you can build anything that big, that's a different story. The previous chief product officer at Netflix said, I'm surprised Netflix even works at all, right?

[00:07:38]
Because at the end of the day, it's a whole bunch of people building something and somehow it all works together, so it's always fantastic. Remember, every single program you'll ever write can be broken down to a bunch of if statements, for loops, and variable declarations. That's it, that's all you're doing.

[00:07:51]
If you really break it down, it's just a bunch of go to statements and procedural code, that's all you write. And so no matter how fancy, no matter how much elixir you use, it's all just really simple go to statements at the end of the day. All right, this is just for you guys, I'm going to do a little quick thing right here.

[00:08:07]
I'm gonna go like this, mkdir, how about source, git status, git status, you'll notice nothing shows up. I'm going to go vim source, and we're gonna create a file in here, how about index.js for all my TS, we're just so awesome, right? Okay, I'm gonna have an empty file in there.

[00:08:25]
Git status, you'll see that it's right there, git add this, git status, git commit foo, I'll do foo again. And I have this right here, and I'm gonna go git cat-file -p and print it out. Again, parent previous commit, tree, I'm gonna go into the tree, git cat file-p tree.

[00:08:45]
Look at this, we got our blobs. But there you go, another tree right here, and that tree is a folder. So that means if I take this tree and go git-cat file that tree, you'll see index.ts. It's literally just storing a bunch of pointers describing the state of git, just really to drive that home, just so everyone really understands.

[00:09:06]
You could probably build a command-line tool that cats out a commit, parses out these strings. And you could probably rebuild the repo yourself, just from knowing how to use git cat file. You could actually rebuild the entire state of it by just walking blobs and trees and making directories.

[00:09:21]
It's really not that magic, just feels magic.

