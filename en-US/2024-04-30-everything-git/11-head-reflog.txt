[00:00:00]
>> We're gonna talk about head. You've seen it already, it's been in the logs. You see this constant head dash whatever branch name, it probably is a little bit confusing when we had for those that unfortunately, you don't get to see this on the recording, but we had a little bit of an oopsie-daisy.

[00:00:15]
I use some slick commands to undo it by a head so you can do a lot with it. It's awesome, but you should rarely use it, if you don't have to, you should try not to play with it. It always causes so many problems the moment you start checking things out.

[00:00:30]
But if you know how to use it, it's fantastic. I use it all the time for interactive rebasing. I'll do like a head till D6. I'm able to squash everything, it's fantastic, but it can also be a pain. So throughout this course you'll see you'll see this. So what is head?

[00:00:44]
We can do some experimenting. So what I want you to do is I want you to check out trunk and then I want you to execute log one line. And I'll add a little one line there. You'll see head points to trunk. Everyone should see that. Let's do it again, I want you to check out foo, and then I want you to do another git log one line.

[00:01:07]
So git checkout foo, git log one line. Again, heads now pointing to foo. So it's like every time we change branches, notice that head's pointing to whatever branch we have checked out. Okay, this is important. Go check out the Git folder and tell me what head is pointing to.

[00:01:30]
So if you go in here and you go ls git, you'll see that like named item is just a top level item in git. So if I cat, .git/HEAD, my goodness, just autocomplete. You'll see right here, it's a ref to foo. That's all it is, it's just this thing that exists right there.

[00:01:54]
It's just a pointer to whatever you're currently using. It's really nice, once you see that it's just not that magical. That means if I go cat refs or git/refs/heads/foo, you'll see it's just a commit, like we're walking through, starting at head all the way to the exact commit.

[00:02:16]
And that means I could reconstruct the repo now that I have this commit, and we did that earlier. So we can actually go all the way from head to the exact file that we want to look at. And so this is kind of how that works. It's just good to have in your head how it works.

[00:02:28]
Didn't even know that was gonna come out. All right, here we go, RefLog. It's actually not a wizard's tool. It's just not. It feels magical, but it's very one-dimensional. So Reflog just shows you where head's been. So, give reflog a try. I just, told you, I unfortunately just ruined the moment.

[00:02:51]
Just execute git.reflog and just look at it and see that it followed how you've changed your branch. So if I do it, if I go, git reflog. You'll see that, look at that, moving from trunk to foo, from foo rebase to trunk. You can just watch me change each one of these.

[00:03:10]
And it comes with the commit shot for each one of those items. This is when I was at B. Remember when we goofed things up way earlier in the repo, you can actually see me doing what's it called, a reset, you can actually watch me do all my oopsy daisies.

[00:03:24]
We redid everything right here. Look at that, so you can actually see the entire history of all decisions you've made in your repo by looking at Reflog. All it is is just simply the log of where you've moved. That's it. Nothing magical about it, it's very, very simple.

[00:03:41]
All right, do you think you can find where reflog is stored in the git folder? Is it a log? How do they store it? All right, so if I go here and I go like this if I just ls git, you'll see, look at that, there's a logs folder, that feels pretty serendipitous, right?

[00:03:58]
So what's in the old logs folder? Well, look at that, there's one called head. What do you think is in that file? Let's just pretend that I don't know. And let's count it out. Does that not look pretty dang familiar? Reflog is just prettifying this file. At least in its default basic usage, there's a lot of options.

[00:04:18]
There's always a lot of options, in fact, you can even use git log to create reflog with a whole bunch of options. But we're not gonna do that. Just this right here is as simple as it gets. At AOL, yeah, I did AOL. For those that are laughing, I did aol.com, I thought it was funny.

[00:04:34]
It's a great email, okay? All right, solution. You can do a reflog -3 and you can actually see three lines of your reflogs. So if you don't want the whole thing you just wanna see a little bit, you can actually give it how many lines you want. So if I go git ref log -3, I see three.

[00:04:51]
That means if I cat out my head and go, tail -3, you can see the last three and you'll notice they kind of look, they're the same, right? You can see here moving from trunk to foo. Moving from trunk to foo. So there you go, it's inverted. The last line of the file is the first line in the reflog.

[00:05:12]
It just takes the file and inverts it, that is it. So there you go. Now, hopefully again, the magic is being slowly spoiled and now the real magic happens, which is how simple git actually is and how powerful it really is. That's where the real magic is, is in the use.

