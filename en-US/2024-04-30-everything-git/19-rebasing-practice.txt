[00:00:00]
>> Let's create another conflict via rebase instead of merge. I added some bolds here just so I don't goof it up because I kept goofing it up when I do it by myself. First, we need to create a change in hello git. We're gonna go from A+2 to A+3.

[00:00:15]
All right, so we're gonna start in hello git. I'm gonna go to the read me and. And I'm gonna go A +3 fantastic. Then we're gonna create another change in bar.md the last line, okay, we're gonna go to the last line. So bar.md go all the way down and go.

[00:00:34]
Last line from hello. This is probably not what I put in the course but you can follow along. Now I'm gonna go get status you can see those two changes I could go get diff to look at the two changes if I want to okay good A+3 added to the last line fantastic.

[00:00:50]
Get add this get commit let's go I don't know what to call this thing a change from hello git. For rebase conflict, enjoy your day, very nice message now so I'm making me happy when I read it on the other side. All right, so now we're gonna do the exact same thing in remote.

[00:01:10]
I'm gonna change A+2 to A+4. And then we'll make a change in bar, but this time to the first line, not the last line, the first line. This is important, all right, so we'll do it again, we'll increment that twice, go to bar, and we'll go first line, change bar.

[00:01:31]
All right, we can see it right there, we can diff it if you want to, A+4, first line, awesome, add in here, git commit, and then we'll go change for a remote for a wonderful rebase conflict, awesome. Just makes me feel so happy doing it that way. All right, so now that we've done that, we're gonna rebase remote gets trunk with hello git and create the conflict.

[00:01:54]
Now, remember, that means you gotta go git pull rebase. Long as you don't have the option, auto magically enabled, this should just work now. There we go, we have this wonderful error message, but look at it kinda closely. What do you see here? I see, okay, getting some information from hello git.

[00:02:12]
We're gonna auto-merge README. Ooh, there's a conflict in README. We're gonna auto-merge bar. No problems, bar was nicely merged, the README could not be merged. Therefore, we have to manually do this. All right, let's manually fix this, I'll make sure I did. Go ahead with all these things.

[00:02:35]
All right, so let's check out the conflict. So if I go git status, you'll see right here that bar is in the green because it's ready. It's ready to be committed. It was able to merge it. Nothing you need to worry about. You're good to go but this one has the both modified.

[00:02:49]
So this is what I was talking about with the whole both modified thing where you need to resolve it. And so we just simply have to go through and do the exact same thing. So let's fix the README. All right, so I'm gonna go vin README. I want you to tell me something that's different than what it was with merge.

[00:03:05]
What do you see that's different? How will this work? I'll go back here and I'll write this cat README. A + 3, right? Why does it say HEAD is A+3? That's upstream's that's not our change. That's upstream's change. Why is it HEAD?
>> That's where it currently is in the.

[00:03:25]

>> In rebase, when you rebase, you check out the branch you're rebasing on, then you play your commits one at a time. Then you check out the branch from whence you came, and then it's updated to nice, right? So you gotta remember that, it's inverted when you're looking at rebates.

[00:03:42]
Ours is theirs and theirs is ours, it's that easy. I, by the way, this is that one part of git that's just it's if you know how rebase works, it makes perfect sense. And even when it makes perfect sense, it's still stupid. It's how I feel about it.

[00:03:59]
Just why you gotta be like that. You know what I mean? You gotta reverse it. And the worst part is that once you remember this and you go like this, okay, rebase is the opposite one. You're gonna be, dang it is merge theirs in ours or is it ours?

[00:04:15]
And then which one's rebase? And then all of a sudden you reverse yourself and you're just, dang it. I can't remember, so I'll just remember how rebase works. Instead of trying to remember some cute way to remember that it's ours and theirs. If you just remember that rebase first checks out the branch you're rebasing and then plays on top, it's very easy to always remember it.

[00:04:31]
So just a little, that's four years of me being confused about theirs versus ours, and then finally just reading it. And then you don't reverse yourself anymore. All right, let's see, and we already talked about this, yeah, yeah. Let's see, let's choose our conflict in this case. Let's choose hello gits change.

[00:04:55]
So remember, cause we're currently checked out with hello gits, I'm just saying it from gits perspective. Checkout, let's commit with a hello git. Let's not commit with remote. So we'll go like this. We'll erase that. There we go, A+3. I want the A+3 one. Now, don't goof this one up on accident.

[00:05:18]
You'll notice right here that it says, to be able to fix these conflicts, you do get rebase continue. If you actually do commit, you've seen me do it a couple times, which I haven't explained it yet. You can get reset soft, hit head, tilty one, and you can undo your commit and then rebase continue.

[00:05:35]
Well, I'll show you that in a little bit, but there you go. So now I can go get add. There we go, now notice that it went away. Why did it go away? Silence, is that the reason, just a strong silent type, no. [INAUDIBLE]
>> Yes, it's cuz, remember, right now we're in perspective of hello git, we're in perspective of our upstream.

[00:06:01]
Therefore, we accepted upstreams change, therefore, there's no change right now. I know it's very frustrating to think about these things, but it's good kind of exercise to go through now you kinda know, okay, I know it's it's very easy to goof up. So now I just simply go git rebase continue.

[00:06:20]
Now we get this opportunity to edit the message, to say, hey, a wonderful, nice rebase conflict. I'm gonna save it. And there we go, it's beautiful. Our branch is currently ahead of origin trunk by one commit. Awesome, if we do a little log one line, you can see right here, we had this wonderful change from hello git.

[00:06:41]
Then we resolved the conflict but there's no conflict commit, right? We just simply resolved it and continued our rebase, which means if I were to add in a dash P, you could see we have the first line changed to bar, and that's it. We don't have the A +4 anymore.

[00:06:57]
We literally erased it out of existence. I know, it's a little emotionally painful when you think about it. So this is some of the dangers of rebase is that you can actually you're fully removing something right now. Cuz you move forward your commit, then you edited your commit in such a way that you remove your change.

[00:07:16]
Your change did not exist anymore. And now it's just this change you have left.
>> It somewhere in the ref log still right?
>> That change, you probably find in the reflog for sure. So if you did a get reflog where it is, this one right here is my guess.

[00:07:32]
This looks about right, a change from remote and wonderful rebase. So if I go this, get log key this, yeah, there it is. So you can see it right there. So we can get back to it. It's just since there was no conflict commit, you lose that information.

[00:07:49]
So this would be a good argument for why you shouldn't use rebase. This is probably the best argument honestly. I just don't think you get any better than this one. Just because I don't like the idea of losing information but at the exact same time it makes perfect sense if you erase your code.

