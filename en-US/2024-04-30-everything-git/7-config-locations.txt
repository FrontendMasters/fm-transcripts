[00:00:00]
>> We're gonna go over some config now. It's good to know this, this is kind of like the last of the intro into git kind of area. I remember the first time I use anything with config, it felt strange and I did it that one time and then I never thought about it again and then when I had to alter it, I was just like, crap, I have to go look this up.

[00:00:16]
And then you just always forget things, totally reasonable. So dash dash add, adds a key to your git config. So if I do this, I just add a key. It's really important to remember and remember a key is made up of two parts, a section and a key name.

[00:00:32]
Very important things to remember. All right problem, I want you to create 3 values with the section name of fem frontend masters. I don't care what you do, I will use these three right here. Fem.dev is great. Marcus he's okay, semi decent and femgit would, right I'll do it too.

[00:00:52]
I'll go git config, add and then I'll do the section name remember fem, then I'll do the key name dev and say is great. There we go, and then I'll do marc is okay, and then git, I put little quotes around it just because I don't know, I want to send it as a single argument there.

[00:01:15]
You might not even need quotes, I've actually never not tried quotes, I just always quote everything. Old habits, die hard, and they get formed at some point in your head and that's just that. So there we go. I have those three commits. All right, solution, there you go.

[00:01:34]
Hopefully everyone effectively did this. There's some ways of listing out values. You can use dash dash list, or you can use get regex expression. Problem, can you list out all the fem values in your config with a single command? Now me personally, because of just like how I'm like not the world's greatest Linux person.

[00:01:53]
I would probably do something like git config list and then probably grep out like that's what I would do. And you can see, looks like I actually have some old values in here, so I should probably take those out. Hold on [LAUGH]. There we go. I knew it.

[00:02:16]
Got bamboozled myself right there. All right. So hopefully everyone did that, absolutely fantastic. So the way to be able to list everything out is that I always just like do this. I know it's not like the most efficient way to use your Linux system. It's just how my brain always does things.

[00:02:31]
But you can use things like git config, git regex expression, and then just go bam. And this will actually just list out what your three keys that match that. So that means I could also do something like m dot and it would list out anything that kind of falls within that format, dot being a wildcard.

[00:02:50]
You have your nice little regular expression. As you can see, we over-matched by accident because again, regular expressions, very dangerous to use. Don't put them in your code base kits. All right, anyways, so problem, can you change one of the values of your config? Let's take fem.dev. I want you to change its value with all the commands you currently know that I've showed you, which is just add list and get.

[00:03:12]
So that's all you have. I'll join you and I'll go git config. And I'll say is amazing. Fem.dev is amazing. There we go. I've changed it. And then I want you to list it out with git regex expression. Look what happens when I do it. I have two fem.devs.

[00:03:34]
So one of the odd parts of git is that you can actually accidentally add multiple of the same keys. Which is also good, cuz that means you can have local settings and you can have global settings. You don't have to worry about collisions or anything like that, but you will add the same key by accident sometimes.

[00:03:52]
It has happened, I might have two or three usernames at this point inside of my git configs, it's okay. So what happened here? It's a little bit of a surprise, right? You can use list or you can use .get key and see what comes out. So for fun, let's use get.

[00:04:06]
And I want you to get out fem.dev. So long as you've been following along and you're using the same keys as me, we have two with fem.dev. When I do that, I get the later of the two values, the last one added. This should intrinsically make sense, always use the latest value, don't use the previous value.

[00:04:22]
Okay. I'm speeding up a little bit by the way, if use get all, you'll get all of the values at once all of this, by the way is in the man page. So always review the man page if you forget or just Google it. You can unset which is a great name.

[00:04:38]
I mean, me personally I would have used remove but unset is the opposite of adding. There's no set option. You know how much that bothers me that there's no set but there's unset and add? I think at one point in here I actually had a typo where I said set instead of add because that's, naturally how I feel about things.

[00:04:56]
Anyways, okay, so let's try to remove the duplicate key. Go ahead, try to remove the duplicate key. You know you have unset. When you try to do it, it says, hey, you can't do it, right? Fem.dev has multiple values. Did we unset one of them? Did we unset all of them?

[00:05:19]
Well, you can always list it out, right? You can list out. We'll do this one, right? Look at that. Both of them are still there, so you cannot unset a multiple value key, you have to unset all. Just as like a little fun warning for you so you can do it all.

[00:05:37]
Let's repeat it again with unset all. So I'm gonna go in here and unset all for fem.dev. There we go. If I look at it, notice that fem.dev completely gone. We removed all the keys for it. You have to always remove all the keys. It's just a thing.

[00:05:53]
All right, fantastic. Fun fact, by the way, configuration is just a file. Again, I've tried to express this upon you, how important it is to remember that Git isn't magical. So I want you to just take a little quick look in the git folder, find that config file.

[00:06:13]
Let's quick look, but just see if you can find it. By the way, there are a lot of options so you can unset by index, there's like 900 different things you can do. I'm just giving you the basics, okay? The real talk, you're probably gonna use config like three times in your life and you're never gonna look at it again.

[00:06:31]
But it's just good to know how to use it then it's never confusing and it feels easy. All right, if you go like this, cat.get config, you'll see it's right there. Does that look familiar? Yeah, those are the ones we added. There's nothing magical about it. It looks kind of like Tommel, which Tommel is another encoding sweet format for all of us to be able to use in a file.

[00:06:53]
And so that's what it kind of looks like to me. There you go. So awesome we have those things there. The magic is so gone hopefully at this point. It's almost disappointing how simple that actually was that the config just exists, yeah?
>> Did I see earlier that it's on set all through move keys but it's removed for sections?

[00:07:11]

>> So if you wanna remove a specific key, you would do unset section name.key, right? Because that is the key. It's really a two part, every key has two parts. If you want to just remove the entire section at once, which I was gonna go over here shortly, cuz I accidentally left the cat out of the bag a little early because I had some previous values, but you can actually just remove things by section.

[00:07:30]
So I could remove all of my user information by just simply remove section user and it would delete everything about user. It's a little convenience. All right, so well look at this, one of the old VCS drag in right here. You can actually remove everything by using --remove-section.

[00:07:49]
So go ahead, give it a little try. Let's remove the entire fem namespace. So just ruining everything for me. There you go, remove the section. If I go and I cat out my config. Hey, look what's gone. We remove the section, the section was deleted. There you go, your commands are actually updating a file.

[00:08:10]
All right, there's also locations. Locations, our system global, local, worktree, you can provide a file path to a config. You can do all this but reality is is when you're using git you likely are only using global or local. Local is just repository level settings and global is what you want for everything.

[00:08:28]
All right, so let's try adding the same key fem.dev to both local and global. I want you to start with global first. So I'll go git config -add, and I'll go --global, dash dash global. So this should add to all of git. There we go. And then I'll do the exact same thing and I'll do it with local.

[00:08:48]
You don't have to specify the local command or the local location. But for this I will, I'm gonna do this really quickly. I just realized that I didn't give it a nice local, there we go. So now, we added those two things and now I want to list out my local items.

[00:09:09]
So if I go get config, and I go list, local providing a location, you can see I have the FEM dot dev right there. If I just simply list everything out, instead of you again, I'm not using the grip option which I could use the grip option. You can see right here I have the global one and I have the local one.

[00:09:31]
Okay, so you can access them both, but which one should show up when I do get firmed up death? Which one do you think should show up?
>> Local
>> Local, exactly. You can see that it is local. Fantastic. Now here's the question though. We added it second, is it showing up because we added it later in time or is it showing up because it's local?

[00:09:55]

>> Local.
>> More specific scope would make sense.
>> Yep. So let's just add another local and we can also add another global, right. And so we can do a more specific and a less specific one right here. And so now when I do that when I do the config list, you'll see that it appears later, it's later in the list.

[00:10:29]
It happened at a later time, but when I do a get, look at that I get it globally, you know why that is? Anyone wanna guess? Because I goofed up and I didn't add it to the global right there. That's why what happened, okay? Did you see that one coming?

[00:10:44]
I don't think any of you, I didn't even see it coming. It was so fast. All right, so we're gonna have to have to just do a quick config unset fem.dev. And then we'll do one. I think you can add a list. There we go. Come on. I know there's a way to add an index.

[00:11:01]
What is it? Is an index. I know there's a way you can do it and blah!! But I'll just go get config. It's honestly not again, this is just such a let's see, we'll do this one, we'll do a local, we'll add that one. And so now I'll add a new global, and I just added it with the term local, which is just really unfortunate.

[00:11:28]
Get config thing. Well, that is just truly unfortunate here. Global, remove that, and then I'll add with global. There we go. So now when I do a config list. I know, just fumbling the bag right here. You can see that global is still out here and we still have the local, but I added the global later.

[00:11:49]
So it should theoretically get pulled first if it's time oriented. But if I do a get, we still get the local. Local always takes precedence, very good to know. Sorry about that little goof up, you're just gonna have to deal with it. Again, you'll never use anything to do with your config other than setting your username.

[00:12:05]
I just really wanted you to know this. All right, so let's do a quick thing. Let's actually alter our git experience. Let's rename master to trunk. So I want you to do a global setting to a knit default branch. You can choose whatever name you want. For here, I'm actually laughing internally 'cause I used to have to use, SVN to us, and so we're going to name a trunk just remember how awful life can actually be.

[00:12:28]
For all of my 32 others out there, I'm gonna do a little global and go trunk. I just want everyone to feel the pain, know exactly. I want you to feel it. So there we go, we've now named our initial branch. Obviously, should this be local or global?

[00:12:49]
Should be global if you want it to take place for all repos for all time on your system. Remember, we just got done naming your default branch to trunk. So if you forget that you did this class and you create a new repo, it will have trunk as its default name and then you'll be triggered due to remembering SVN.

[00:13:08]
Real fact by the way, so let's try it out. Let's just go and create a project right now, call it hello git. This is important. Call it hello git and do a git init inside that folder. So I'm going to go back back. I will make my own dir hello git and then I'll go to hello-git and I'll go git a knit.

[00:13:25]
Look at that. It's now trunk. There we go. So git has global settings. You can change your experience. There's actually quite a few experiential changes you can make to git. This is just the easiest one to demonstrate with no git knowledge.

