WEBVTT

1
00:00:00.350 --> 00:00:04.150
Do you feel more powerful now as you're
Git knowledge growing hopefully?

2
00:00:04.150 --> 00:00:06.050
Well now we're gonna talk
about remote Git, right?

3
00:00:06.050 --> 00:00:09.740
Often we need changes that have been
created by our fellow frenemies.

4
00:00:09.740 --> 00:00:13.468
Frenemies, of course is because they
make code and it hurts your feelings or

5
00:00:13.468 --> 00:00:17.810
hurts productions feelings, and but
how do we get their changes into our repo?

6
00:00:17.810 --> 00:00:21.861
How do we push our changes to their repo?

7
00:00:21.861 --> 00:00:25.491
Here's one thing that kind of I
guess will surprise most people,

8
00:00:25.491 --> 00:00:28.233
is that it doesn't have to be remote.

9
00:00:28.233 --> 00:00:30.733
It doesn't have to be on GitHub.

10
00:00:31.923 --> 00:00:34.602
I know that might be strange because
often when people think of git,

11
00:00:34.602 --> 00:00:35.499
they think of GitHub.

12
00:00:35.499 --> 00:00:38.612
They don't actually think
of git as its own thing and

13
00:00:38.612 --> 00:00:42.314
then GitHub as a means to store
git they think of GitHub as git.

14
00:00:44.224 --> 00:00:47.192
So you may have never really
used git as remote like,

15
00:00:47.192 --> 00:00:49.496
you just probably have never done this.

16
00:00:49.496 --> 00:00:51.304
Why would you have the same thing twice?

17
00:00:51.304 --> 00:00:57.454
A remote is just simply a copy of
the repo somewhere else, that's it.

18
00:00:57.454 --> 00:01:02.247
So I want you to create a new folder,
wherever you create folders,

19
00:01:02.247 --> 00:01:07.481
let's call it remote git, and
I want you to initialize it with git Init.

20
00:01:07.481 --> 00:01:11.320
So I'll jump in here and go,
I'll go to my personal directory,

21
00:01:11.320 --> 00:01:15.459
I'll make there remote-git, and
then I'll go into remote-git.

22
00:01:17.884 --> 00:01:19.274
There we go.

23
00:01:19.274 --> 00:01:22.616
And I'll go git Init, there we go.

24
00:01:22.616 --> 00:01:24.356
It's own repo right now.

25
00:01:24.356 --> 00:01:27.356
Remember, this is distributed
version control, okay?

26
00:01:28.566 --> 00:01:30.596
The files can be on other
people's computers too.

27
00:01:30.596 --> 00:01:36.786
And so, let's add a remote to hello git.

28
00:01:36.786 --> 00:01:41.635
So, adding a remote goes
git remote add the name of

29
00:01:41.635 --> 00:01:46.772
the remote and
then some sort of url of some sort.

30
00:01:46.772 --> 00:01:52.105
It can be an SSH item,
it can be just a path on your computer.

31
00:01:53.943 --> 00:01:57.162
So let's add hello-git as the remote.

32
00:01:57.162 --> 00:01:58.672
By the way, you should name it origin.

33
00:01:58.672 --> 00:02:05.494
The authority repo is typically named
origin, so I'll do it right now.

34
00:02:05.494 --> 00:02:08.717
I'll go git remote add origin, and

35
00:02:08.717 --> 00:02:13.882
then I'll just literally go back,
back /hello-git.

36
00:02:13.882 --> 00:02:17.283
I can check it out with git remote-v,
there we go.

37
00:02:17.283 --> 00:02:21.430
You can see that the other repo
is just simply a relative file.

38
00:02:21.430 --> 00:02:22.558
So hopefully everyone did that.

39
00:02:22.558 --> 00:02:26.984
Git remote- v will just verbosely
list out all of your remotes.

40
00:02:26.984 --> 00:02:30.445
You can also just do git remote,
but I don't find that very useful,

41
00:02:30.445 --> 00:02:31.370
right like that.

42
00:02:31.370 --> 00:02:32.690
I didn't do anything there.

43
00:02:32.690 --> 00:02:35.850
And so if you do the- v,
it will also give you the path.

44
00:02:35.850 --> 00:02:40.175
So if you have GitHub, you'll see
the GitHub address when you do a -v.

45
00:02:40.175 --> 00:02:44.067
Gitism, typically this is how I
set up the naming for my repos,

46
00:02:44.067 --> 00:02:48.990
is if I have only a singular authoritative
repo, meaning that there is mine plus

47
00:02:48.990 --> 00:02:54.577
the one I'm pushing up to, say on GitHub,
then I'll call that one origin.

48
00:02:54.577 --> 00:02:58.126
If I have a fork of the authoritative
repo, so this is typical when you're

49
00:02:58.126 --> 00:03:01.608
at like a job, you have your main one and
then you have your fork.

50
00:03:01.608 --> 00:03:05.915
I typically call my fork origin and
the authoritative one, the true one,

51
00:03:05.915 --> 00:03:09.328
the one true repo,
I call that one upstream.

52
00:03:09.328 --> 00:03:11.418
That you'll see that a lot
people will call it upstream.

53
00:03:12.978 --> 00:03:16.563
Sometimes instead of using origin I
use me cuz it's just I don't know,

54
00:03:16.563 --> 00:03:17.471
it's kinda fun.

55
00:03:17.471 --> 00:03:19.038
Git pushed me, it's fun.

56
00:03:19.038 --> 00:03:21.544
I just thought it was,
I just think it's stupid and fun.

57
00:03:21.544 --> 00:03:22.783
So there's me.

58
00:03:22.783 --> 00:03:27.348
That's what you know, and so that's kind
of like my general naming convention is to

59
00:03:27.348 --> 00:03:31.337
use origin for the authoritative one,
unless if it's a personal fork and

60
00:03:31.337 --> 00:03:34.813
then do upstream for
the authoritative one, all right?

61
00:03:34.813 --> 00:03:39.129
You'll notice our default branch
remained it's trunk again, right?

62
00:03:39.129 --> 00:03:40.523
We didn't set the option again.

63
00:03:40.523 --> 00:03:42.583
We didn't do anything,
it just keeps on remaining.

64
00:03:42.583 --> 00:03:46.947
So now trunk was yet again, even
though this is a very different trunk.

65
00:03:46.947 --> 00:03:50.847
This trunk right here is
from the default naming.

66
00:03:50.847 --> 00:03:55.585
Now we need to merge the changes from
hello-git into our new repo remote-git.

67
00:03:55.585 --> 00:03:58.607
So we're gonna do that, but
first we need to fetch.

68
00:03:58.607 --> 00:04:01.367
We need to fetch because we
want to be able to get all that

69
00:04:01.367 --> 00:04:03.357
object information from hello-git.

70
00:04:03.357 --> 00:04:08.065
So if we go here and I go find .git,
you'll notice that it's just, again,

71
00:04:08.065 --> 00:04:09.999
this pristine empty one.

72
00:04:09.999 --> 00:04:13.949
Whereas if I do that in hello-git,
find .git, well,

73
00:04:13.949 --> 00:04:16.779
it has a lot of stuff in there, right?

74
00:04:16.779 --> 00:04:19.786
So I want all of that in remote git, so

75
00:04:19.786 --> 00:04:24.640
to do that you need to be
able to execute git fetch.

76
00:04:24.640 --> 00:04:28.537
Git fetch will fetch your remotes changes,
and

77
00:04:28.537 --> 00:04:32.442
it'll put it inside
the git state management.

78
00:04:32.442 --> 00:04:34.630
I bet you can even find
where it stores things.

79
00:04:34.630 --> 00:04:36.340
So I'll go like this git fetch.

80
00:04:36.340 --> 00:04:41.998
And you'll see look at that I got bar,
I got foo, I got foo-rebase-trunk, trunk,

81
00:04:41.998 --> 00:04:47.281
trunk-merge-foo, we got all of those
branches when I did that fetch, okay?

82
00:04:47.281 --> 00:04:51.945
Cool, now I'm up-to-date, right?

83
00:04:51.945 --> 00:04:53.167
&gt;&gt; No.
&gt;&gt; No, great job.

84
00:04:54.377 --> 00:04:55.638
I love this.

85
00:04:55.638 --> 00:04:57.368
This is fantastic, all right?

86
00:04:57.368 --> 00:04:58.722
So let's use git log and

87
00:04:58.722 --> 00:05:03.009
verify that the remote trunk has been
correctly merged into our git state.

88
00:05:03.009 --> 00:05:08.801
So I'll go like this, git log, our branch
doesn't even have any commits yet.

89
00:05:08.801 --> 00:05:12.461
So our trunk is still
diverging from hello-git.

90
00:05:12.461 --> 00:05:14.998
The reason why is we've
only fetched the changes,

91
00:05:14.998 --> 00:05:17.421
we haven't merged the changes into ours.

92
00:05:17.421 --> 00:05:18.202
We haven't updated anything.

93
00:05:18.202 --> 00:05:19.607
That's why often when you pull,

94
00:05:19.607 --> 00:05:23.120
you'll see update with fast forward if you
have your main line, cuz you don't make

95
00:05:23.120 --> 00:05:26.947
changes to your main line cuz you're all
great engineers, I can tell right away.

96
00:05:26.947 --> 00:05:27.910
No one's doing that, right?

97
00:05:27.910 --> 00:05:29.246
No one's doing merge, right?

98
00:05:32.126 --> 00:05:35.257
Okay, so anyways, right now we just
haven't done, we haven't updated anything.

99
00:05:35.257 --> 00:05:38.870
Okay, so that means we need to do
something, but by the way, remember,

100
00:05:38.870 --> 00:05:40.667
you can always do a git log.

101
00:05:40.667 --> 00:05:45.590
So I can go, git log origin name,
which, or sorry, not origin name,

102
00:05:45.590 --> 00:05:50.437
remote name, which is origin, and
then do any branch name, right?

103
00:05:50.437 --> 00:05:54.874
Because we've fetched everything in so we
can actually see the log of other remotes.

104
00:05:54.874 --> 00:05:58.214
So I can go origin trunk, and there we go.

105
00:05:58.214 --> 00:06:00.514
Definitely my best work
at the end of this.

106
00:06:00.514 --> 00:06:01.657
It's fantastic.

107
00:06:01.657 --> 00:06:05.642
XYEDA, awesome.

108
00:06:05.642 --> 00:06:08.715
If you did one line and
I actually pasted one line in there,

109
00:06:08.715 --> 00:06:12.192
I paste the wrong thing and
they're actually executed one line.

110
00:06:12.192 --> 00:06:13.796
That's what it should look like.

111
00:06:13.796 --> 00:06:15.196
All right, awesome.

112
00:06:15.196 --> 00:06:16.626
You can validate.

113
00:06:16.626 --> 00:06:20.672
This is true, when you look right here,

114
00:06:20.672 --> 00:06:24.965
you'll notice that trunk is 9b6e43.

115
00:06:24.965 --> 00:06:32.172
I can go to hello-git and do git-log -1,
9b6e, same commit shot, right?

116
00:06:32.172 --> 00:06:36.448
It now exists on two computers or
in two repos.

117
00:06:36.448 --> 00:06:39.488
So there we go, okay,
we are now kind of in line.

118
00:06:41.277 --> 00:06:44.773
If you wish to see what branches
came down with with git fetch,

119
00:06:44.773 --> 00:06:47.107
you can do a git branch -a.

120
00:06:47.107 --> 00:06:53.297
So if I go back to remote git and I go
git branch -a, you'll see all branches.

121
00:06:53.297 --> 00:06:56.287
And so the ones that start with remotes
those are all the remote branches.

122
00:06:56.287 --> 00:06:59.067
Then you'll have any of your local
ones right now we have nothing.

123
00:06:59.067 --> 00:07:01.917
We just have the default empty
one that has no commits to it.

124
00:07:01.917 --> 00:07:06.245
So we have no branches effectively and
just a bunch from the remote, all right?

125
00:07:06.245 --> 00:07:08.707
So let's update trunk
with origin/trunk and

126
00:07:08.707 --> 00:07:11.997
then let's use git log to see
those commits have been merged.

127
00:07:13.227 --> 00:07:13.937
So what do we do here?

128
00:07:16.137 --> 00:07:17.267
&gt;&gt; Pull origin trunk.

129
00:07:18.377 --> 00:07:20.857
&gt;&gt; We can get pull origin trunk, true.

130
00:07:20.857 --> 00:07:21.881
We also have all those changes.

131
00:07:21.881 --> 00:07:28.524
So we can just git merge origin,
the remote trunk.

132
00:07:30.683 --> 00:07:35.776
Now that I've merged those changes from
my internals, which I just got done

133
00:07:35.776 --> 00:07:40.616
fetching from another repo, I can use
git log one line and look at that.

134
00:07:40.616 --> 00:07:44.148
My trunk now points to the same
spot that this trunk does.

