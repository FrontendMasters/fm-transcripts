WEBVTT

1
00:00:00.000 --> 00:00:01.157
We're gonna talk about head.

2
00:00:01.157 --> 00:00:03.595
You've seen it already,
it's been in the logs.

3
00:00:03.595 --> 00:00:07.663
You see this constant head dash whatever
branch name, it probably is a little

4
00:00:07.663 --> 00:00:11.734
bit confusing when we had for those
that unfortunately, you don't get to see

5
00:00:11.734 --> 00:00:15.324
this on the recording, but
we had a little bit of an oopsie-daisy.

6
00:00:15.324 --> 00:00:20.637
I use some slick commands to undo it
by a head so you can do a lot with it.

7
00:00:20.637 --> 00:00:23.449
It's awesome, but
you should rarely use it,

8
00:00:23.449 --> 00:00:26.921
if you don't have to,
you should try not to play with it.

9
00:00:26.921 --> 00:00:30.379
It always causes so many problems
the moment you start checking things out.

10
00:00:30.379 --> 00:00:32.229
But if you know how to use it,
it's fantastic.

11
00:00:32.229 --> 00:00:34.406
I use it all the time for
interactive rebasing.

12
00:00:34.406 --> 00:00:35.903
I'll do like a head till D6.

13
00:00:35.903 --> 00:00:39.544
I'm able to squash everything,
it's fantastic, but it can also be a pain.

14
00:00:39.544 --> 00:00:43.365
So throughout this course
you'll see you'll see this.

15
00:00:43.365 --> 00:00:44.335
So what is head?

16
00:00:44.335 --> 00:00:45.784
We can do some experimenting.

17
00:00:45.784 --> 00:00:48.958
So what I want you to do is I
want you to check out trunk and

18
00:00:48.958 --> 00:00:51.237
then I want you to execute log one line.

19
00:00:54.940 --> 00:00:56.892
And I'll add a little one line there.

20
00:00:56.892 --> 00:00:59.129
You'll see head points to trunk.

21
00:00:59.129 --> 00:01:00.878
Everyone should see that.

22
00:01:00.878 --> 00:01:04.128
Let's do it again,
I want you to check out foo, and

23
00:01:04.128 --> 00:01:07.011
then I want you to do
another git log one line.

24
00:01:07.011 --> 00:01:11.143
So git checkout foo, git log one line.

25
00:01:11.143 --> 00:01:12.792
Again, heads now pointing to foo.

26
00:01:12.792 --> 00:01:15.380
So it's like every time
we change branches,

27
00:01:15.380 --> 00:01:19.410
notice that head's pointing to
whatever branch we have checked out.

28
00:01:19.410 --> 00:01:20.603
Okay, this is important.

29
00:01:23.862 --> 00:01:27.546
Go check out the Git folder and
tell me what head is pointing to.

30
00:01:30.714 --> 00:01:33.984
So if you go in here and you go ls git,

31
00:01:33.984 --> 00:01:39.763
you'll see that like named item
is just a top level item in git.

32
00:01:39.763 --> 00:01:46.951
So if I cat, .git/HEAD,
my goodness, just autocomplete.

33
00:01:46.951 --> 00:01:49.997
You'll see right here, it's a ref to foo.

34
00:01:51.494 --> 00:01:54.793
That's all it is, it's just this
thing that exists right there.

35
00:01:54.793 --> 00:02:00.025
It's just a pointer to whatever
you're currently using.

36
00:02:00.025 --> 00:02:02.472
It's really nice, once you see
that it's just not that magical.

37
00:02:02.472 --> 00:02:06.980
That means if I go cat refs or
git/refs/heads/foo,

38
00:02:06.980 --> 00:02:12.272
you'll see it's just a commit,
like we're walking through,

39
00:02:12.272 --> 00:02:16.291
starting at head all the way
to the exact commit.

40
00:02:16.291 --> 00:02:18.983
And that means I could reconstruct
the repo now that I have this commit, and

41
00:02:18.983 --> 00:02:19.766
we did that earlier.

42
00:02:19.766 --> 00:02:22.455
So we can actually go all the way
from head to the exact file

43
00:02:22.455 --> 00:02:23.583
that we want to look at.

44
00:02:23.583 --> 00:02:25.517
And so this is kind of how that works.

45
00:02:25.517 --> 00:02:28.609
It's just good to have in
your head how it works.

46
00:02:28.609 --> 00:02:30.694
Didn't even know that was gonna come out.

47
00:02:30.694 --> 00:02:31.617
All right, here we go, RefLog.

48
00:02:31.617 --> 00:02:33.403
It's actually not a wizard's tool.

49
00:02:33.403 --> 00:02:34.841
It's just not.

50
00:02:34.841 --> 00:02:40.730
It feels magical, but
it's very one-dimensional.

51
00:02:40.730 --> 00:02:44.820
So Reflog just shows
you where head's been.

52
00:02:44.820 --> 00:02:49.109
So, give reflog a try.

53
00:02:49.109 --> 00:02:51.916
I just, told you,
I unfortunately just ruined the moment.

54
00:02:51.916 --> 00:02:56.119
Just execute git.reflog and
just look at it and

55
00:02:56.119 --> 00:03:00.964
see that it followed how
you've changed your branch.

56
00:03:00.964 --> 00:03:03.492
So if I do it, if I go, git reflog.

57
00:03:03.492 --> 00:03:08.021
You'll see that, look at that, moving from
trunk to foo, from foo rebase to trunk.

58
00:03:08.021 --> 00:03:10.041
You can just watch me
change each one of these.

59
00:03:10.041 --> 00:03:12.620
And it comes with the commit shot for
each one of those items.

60
00:03:12.620 --> 00:03:13.792
This is when I was at B.

61
00:03:13.792 --> 00:03:17.441
Remember when we goofed things
up way earlier in the repo,

62
00:03:17.441 --> 00:03:21.088
you can actually see me doing
what's it called, a reset,

63
00:03:21.088 --> 00:03:24.223
you can actually watch me
do all my oopsy daisies.

64
00:03:24.223 --> 00:03:25.681
We redid everything right here.

65
00:03:25.681 --> 00:03:29.345
Look at that, so you can actually see
the entire history of all decisions

66
00:03:29.345 --> 00:03:31.758
you've made in your repo
by looking at Reflog.

67
00:03:31.758 --> 00:03:36.263
All it is is just simply
the log of where you've moved.

68
00:03:36.263 --> 00:03:36.898
That's it.

69
00:03:36.898 --> 00:03:39.745
Nothing magical about it,
it's very, very simple.

70
00:03:41.027 --> 00:03:47.316
All right, do you think you can find
where reflog is stored in the git folder?

71
00:03:47.316 --> 00:03:48.328
Is it a log?

72
00:03:48.328 --> 00:03:49.780
How do they store it?

73
00:03:49.780 --> 00:03:54.077
All right, so if I go here and I go
like this if I just ls git, you'll see,

74
00:03:54.077 --> 00:03:58.884
look at that, there's a logs folder,
that feels pretty serendipitous, right?

75
00:03:58.884 --> 00:04:00.923
So what's in the old logs folder?

76
00:04:00.923 --> 00:04:02.387
Well, look at that,
there's one called head.

77
00:04:02.387 --> 00:04:03.820
What do you think is in that file?

78
00:04:03.820 --> 00:04:06.513
Let's just pretend that I don't know.

79
00:04:06.513 --> 00:04:07.691
And let's count it out.

80
00:04:07.691 --> 00:04:11.304
Does that not look pretty dang familiar?

81
00:04:11.304 --> 00:04:15.580
Reflog is just prettifying this file.

82
00:04:15.580 --> 00:04:18.725
At least in its default basic usage,
there's a lot of options.

83
00:04:18.725 --> 00:04:20.621
There's always a lot of options, in fact,

84
00:04:20.621 --> 00:04:23.658
you can even use git log to create
reflog with a whole bunch of options.

85
00:04:23.658 --> 00:04:25.052
But we're not gonna do that.

86
00:04:25.052 --> 00:04:27.975
Just this right here is
as simple as it gets.

87
00:04:27.975 --> 00:04:29.783
At AOL, yeah, I did AOL.

88
00:04:29.783 --> 00:04:34.552
For those that are laughing,
I did aol.com, I thought it was funny.

89
00:04:34.552 --> 00:04:36.320
It's a great email, okay?

90
00:04:36.320 --> 00:04:37.272
All right, solution.

91
00:04:37.272 --> 00:04:42.853
You can do a reflog -3 and you can
actually see three lines of your reflogs.

92
00:04:42.853 --> 00:04:45.556
So if you don't want the whole thing
you just wanna see a little bit,

93
00:04:45.556 --> 00:04:47.514
you can actually give it
how many lines you want.

94
00:04:47.514 --> 00:04:51.598
So if I go git ref log -3, I see three.

95
00:04:51.598 --> 00:04:56.423
That means if I cat out my head and go,
tail -3, you can see the last three and

96
00:04:56.423 --> 00:05:00.373
you'll notice they kind of look,
they're the same, right?

97
00:05:00.373 --> 00:05:02.919
You can see here moving from trunk to foo.

98
00:05:05.686 --> 00:05:07.953
Moving from trunk to foo.

99
00:05:07.953 --> 00:05:09.335
So there you go, it's inverted.

100
00:05:09.335 --> 00:05:12.081
The last line of the file is
the first line in the reflog.

101
00:05:12.081 --> 00:05:14.732
It just takes the file and
inverts it, that is it.

102
00:05:14.732 --> 00:05:15.357
So there you go.

103
00:05:15.357 --> 00:05:20.075
Now, hopefully again, the magic is being
slowly spoiled and now the real magic

104
00:05:20.075 --> 00:05:24.593
happens, which is how simple git actually
is and how powerful it really is.

105
00:05:24.593 --> 00:05:27.012
That's where the real magic is,
is in the use.

