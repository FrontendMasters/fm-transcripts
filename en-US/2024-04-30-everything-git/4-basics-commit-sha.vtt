WEBVTT

1
00:00:00.000 --> 00:00:02.826
This is pretty much the 80%
of you will do with git.

2
00:00:02.826 --> 00:00:07.582
If this is all you ever learn about git,
you'll be moderately successful.

3
00:00:07.582 --> 00:00:12.622
You can get pretty dang far knowing
about git add path-to-file or

4
00:00:12.622 --> 00:00:16.223
a file pattern,
git commit -m and git status.

5
00:00:16.223 --> 00:00:19.624
If you can just know those three commands
you're already doing pretty dang good.

6
00:00:19.624 --> 00:00:24.689
Okay, so git add will stage the file,
it will add it to the index.

7
00:00:24.689 --> 00:00:28.396
Git commit will take your staged files,
your index file, and

8
00:00:28.396 --> 00:00:31.887
then turn it into a commit with
the author name, the time,

9
00:00:31.887 --> 00:00:35.912
the contents of the change, all that,
and will produce out a SHA.

10
00:00:35.912 --> 00:00:38.294
Did you know that SHA stands for
secure hashing algorithm?

11
00:00:38.294 --> 00:00:41.176
Isn't that kinda disappointing?

12
00:00:41.176 --> 00:00:42.518
It's a variant of MD5.

13
00:00:42.518 --> 00:00:43.379
Either way,

14
00:00:43.379 --> 00:00:48.793
it just is always disappointing to know
that SHA means secure hashing algorithm.

15
00:00:48.793 --> 00:00:51.724
And then git status will just say,
here's the state of your repo.

16
00:00:51.724 --> 00:00:58.137
All right, Problem, we want to trace the
steps of git from untracked to tracked.

17
00:00:58.137 --> 00:01:01.597
So don't forget these ones right here.

18
00:01:01.597 --> 00:01:05.481
This is what I want you to do, I want
you to create a file called first.md,

19
00:01:05.481 --> 00:01:07.436
I want you to check the status of git.

20
00:01:07.436 --> 00:01:11.280
Then, I want you to add
first.md to the staging area,

21
00:01:11.280 --> 00:01:14.958
recheck the status,
see that it's being tracked,

22
00:01:14.958 --> 00:01:19.823
commit it with a friendly message,
and then check the status again.

23
00:01:22.758 --> 00:01:27.152
If you're pretty good with git already,
you already know these basic commands,

24
00:01:27.152 --> 00:01:30.409
please just create a commit
really quickly with first.md.

25
00:01:30.409 --> 00:01:31.904
We're gonna use it and
we're gonna do something.

26
00:01:31.904 --> 00:01:34.897
All right, I'll start doing it right now,
so I'm gonna jump over here.

27
00:01:34.897 --> 00:01:39.379
I'm gonna go to first.md I'll go,
hello fem, there we go, git status.

28
00:01:39.379 --> 00:01:44.356
You'll see right here untracked file,
git has no idea anything about this file.

29
00:01:44.356 --> 00:01:49.139
First time it's ever seen it,
it doesn't have any information about it.

30
00:01:49.139 --> 00:01:54.049
If I go git add this and then redo it,
you'll see now we are tracking it.

31
00:01:54.049 --> 00:01:56.815
It's officially a part
of the git ecosystem but

32
00:01:56.815 --> 00:02:01.034
only on a singular level, meaning
that it's only a part of the staging,

33
00:02:01.034 --> 00:02:03.954
it has no prior information besides for
staging.

34
00:02:03.954 --> 00:02:09.344
If I go git commit -m, 'friendly message',
look how nice that is, it's gonna tell me,

35
00:02:09.344 --> 00:02:14.049
hey, this is the first commit of the repo,
the root commit, it has no parents.

36
00:02:14.049 --> 00:02:16.378
Typically, I usually go with Batman for
my first commit.

37
00:02:16.378 --> 00:02:19.538
I think it's funny cuz Batman
doesn't have any parents, right?

38
00:02:19.538 --> 00:02:22.351
It's like you gotta always go for
that on the first repo.

39
00:02:22.351 --> 00:02:24.502
I think it's fantastic.

40
00:02:24.502 --> 00:02:26.385
And there you go.
So we've made our first commit.

41
00:02:26.385 --> 00:02:29.703
So that means if I go git status,
says right here,

42
00:02:29.703 --> 00:02:33.977
what branch you're on,
nothing to commit, there you go.

43
00:02:33.977 --> 00:02:35.443
The tree is clean.

44
00:02:35.443 --> 00:02:37.534
So we already kinda
walked through all that.

45
00:02:37.534 --> 00:02:40.056
So hopefully everyone has one commit.

46
00:02:40.056 --> 00:02:44.986
I think even in here,
I use my first commit.

47
00:02:44.986 --> 00:02:47.399
Okay, so the changes are in the repo.

48
00:02:47.399 --> 00:02:51.442
One of the common activities you
should get into the habit of or

49
00:02:51.442 --> 00:02:54.792
at least know it's available is git log.

50
00:02:54.792 --> 00:02:58.085
Git log allows you to look
at the history of the repo.

51
00:02:58.085 --> 00:03:02.185
It's a very bad powerful thing, and we're
gonna go over a few of the options today

52
00:03:02.185 --> 00:03:05.411
and we're gonna use it very
regularly throughout this course.

53
00:03:05.411 --> 00:03:08.960
Cuz it's just awesome to
have in your bat belt,

54
00:03:08.960 --> 00:03:12.790
I guess we're going with
Batman-themed things.

55
00:03:12.790 --> 00:03:16.900
Anyways, so review or explore,
check out a man git-log.

56
00:03:16.900 --> 00:03:20.503
I want you to open up the man page and
actually look at it,

57
00:03:20.503 --> 00:03:24.199
and I want you to search for
--graph and --decorate.

58
00:03:24.199 --> 00:03:28.376
And just kind of do a quick read,
get kind of used to reading the manual.

59
00:03:28.376 --> 00:03:33.236
I'll do it along with you,
man git-log, there's graph right here.

60
00:03:33.236 --> 00:03:36.091
And if I find the option,
there's the option, look,

61
00:03:36.091 --> 00:03:39.764
draw a text-based graphical
representation of the commit history.

62
00:03:39.764 --> 00:03:42.303
Okay, good to know we have that,
all right?

63
00:03:42.303 --> 00:03:47.329
And then we can go --decorate,
let's find the option.

64
00:03:47.329 --> 00:03:49.101
We may have to go backwards.

65
00:03:49.101 --> 00:03:52.321
Decorate often is,
it's a little bit harder to read,

66
00:03:52.321 --> 00:03:55.543
prints out the ref names of
any commits that are shown.

67
00:03:55.543 --> 00:03:59.992
Probably not really sure what a ref name
is, or remember everything's a commit,

68
00:03:59.992 --> 00:04:01.409
everything has a SHA, and

69
00:04:01.409 --> 00:04:05.921
you can reference those commits with some
sort of named item, branches, right?

70
00:04:05.921 --> 00:04:09.000
Branches, tags, there you go.

71
00:04:09.000 --> 00:04:13.731
Or the very special one named head,
we'll go over head in a little bit.

72
00:04:13.731 --> 00:04:17.469
All right, problem, display the history
of your repo with --graph and --decorate.

73
00:04:22.001 --> 00:04:26.631
So I'll do right now,
git log --graph --decorate.

74
00:04:26.631 --> 00:04:30.652
Often, you don't actually have to use
--decorate if it's just printing out to

75
00:04:30.652 --> 00:04:31.851
Standard in.

76
00:04:31.851 --> 00:04:34.361
Kind of a little fun exercise to do,
watch this.

77
00:04:34.361 --> 00:04:37.143
If I go this, I drop --decorate,
and I just do --graph,

78
00:04:37.143 --> 00:04:39.555
you'll notice right here,
HEAD points to master.

79
00:04:40.665 --> 00:04:44.765
If I take this and put it out to a file,
and then count out the file,

80
00:04:44.765 --> 00:04:48.065
look at what's missing that,
bit of information.

81
00:04:48.065 --> 00:04:52.734
So if you're ever printing
out anything to a file,

82
00:04:52.734 --> 00:04:58.504
you need --decorates to actually git,
or, --decorate.

83
00:04:58.504 --> 00:05:02.710
You need that flag to tell you, hey,

84
00:05:02.710 --> 00:05:07.058
list out all the named commits for me.

85
00:05:07.058 --> 00:05:11.360
Just nice little thing, so often you
don't use --decorate like in practice

86
00:05:11.360 --> 00:05:15.084
cuz you're just looking at the log,
just something to be aware of.

87
00:05:15.084 --> 00:05:20.538
All right, awesome, so solution,
hopefully everyone did that.

88
00:05:20.538 --> 00:05:22.759
The decorate option,
we already went over that.

89
00:05:22.759 --> 00:05:25.138
Don't worry about that,
it's absolutely fantastic.

90
00:05:25.138 --> 00:05:27.856
Unfortunately, we only have one commit, so

91
00:05:27.856 --> 00:05:31.372
the graph option really isn't
super fantastic, right?

92
00:05:31.372 --> 00:05:34.757
You're not actually seeing a graph,
there's nothing to graph.

93
00:05:34.757 --> 00:05:37.909
But you'll notice that there's this
little asterisk right here, and

94
00:05:37.909 --> 00:05:40.234
that little asterisk is your
only node in the graph.

95
00:05:40.234 --> 00:05:43.698
So that's the beginning of the graph
item when you use the log.

96
00:05:43.698 --> 00:05:45.375
We'll look at it a lot more.

97
00:05:46.395 --> 00:05:49.255
All right, hopefully everybody's
on the same page at this point.

98
00:05:49.255 --> 00:05:51.465
So we're gonna now get into some
of the git internals, right?

99
00:05:51.465 --> 00:05:55.139
We're going from 0 to 15, and then we're
just gonna jump right in at 200 miles

100
00:05:55.139 --> 00:05:57.537
an hour, so we're gonna go all the way in.

101
00:05:57.537 --> 00:06:01.187
Again, SHAs, they're just 0 through 9,

102
00:06:01.187 --> 00:06:05.136
A through F string of characters,
40 of them.

103
00:06:05.136 --> 00:06:07.566
And so now we're gonna do
the plumbing part, I'm very excited.

104
00:06:07.566 --> 00:06:09.107
By the way, just so you know,

105
00:06:09.107 --> 00:06:13.446
you can specify the first seven characters
of any SHA and get will resolve that out.

106
00:06:13.446 --> 00:06:16.945
So you just need to get at least
the first seven characters.

107
00:06:16.945 --> 00:06:20.903
You can use log to be able
to get out your shots.

108
00:06:20.903 --> 00:06:24.971
There's other ways to get out SHAs,
but log is the simplest way.

109
00:06:24.971 --> 00:06:28.777
You don't have to know this one special
command for getting out a SHA, and so

110
00:06:28.777 --> 00:06:29.862
you can just use log.

111
00:06:29.862 --> 00:06:30.370
So a problem.

112
00:06:30.370 --> 00:06:34.402
Find the first commit SHA
of your first commit.

113
00:06:34.402 --> 00:06:36.231
Now, I want you to copy it
to your system clipboard.

114
00:06:39.449 --> 00:06:41.599
And this is the important part,
everybody has to do this, okay?

115
00:06:41.599 --> 00:06:45.282
Cuz now we're doing the internal,
so get the SHA.

116
00:06:45.282 --> 00:06:51.626
So me, I'll do, I'll go git log, and
I can come up here and I can, there we go.

117
00:06:51.626 --> 00:06:54.006
So I have it nicely on
my clipboard right now.

118
00:06:58.425 --> 00:07:00.233
Hopefully, everybody has it at this point.

119
00:07:01.383 --> 00:07:04.031
Okay, fantastic,
this is the SHA, by the way,

120
00:07:04.031 --> 00:07:06.973
right here, this big mess of characters.

121
00:07:06.973 --> 00:07:10.262
All right, so quick question,
why is your sha different than mine?

122
00:07:11.790 --> 00:07:18.527
Mine is 8721a,
yours is probably not any of that.

123
00:07:18.527 --> 00:07:20.943
Why is it different?

124
00:07:20.943 --> 00:07:23.456
&gt;&gt; Different inputs.

125
00:07:23.456 --> 00:07:28.539
&gt;&gt; Not just based on the one markdown
file, but also your user.name,

126
00:07:28.539 --> 00:07:31.941
.email, maybe other environmental bars?

127
00:07:31.941 --> 00:07:34.505
&gt;&gt; Exactly, so
you pretty much got the idea.

128
00:07:34.505 --> 00:07:39.156
My sha is based off what I call committed,
the time of the day, my username,

129
00:07:39.156 --> 00:07:43.177
my email, so I should produce
a unique one comparatively to you.

130
00:07:43.177 --> 00:07:46.818
So if we both at the exact same time of
the day, both committed the same thing,

131
00:07:46.818 --> 00:07:48.501
it should produce different SHAs,

132
00:07:48.501 --> 00:07:51.322
cuz it's an amalgamation of
a bunch of different options.

133
00:07:51.322 --> 00:07:54.971
So just so if you're wondering,
you can't follow along directly.

134
00:07:54.971 --> 00:07:58.073
You won't be able to just
use the SHA that's produced,

135
00:07:58.073 --> 00:08:01.506
you'll have to be able to grab
out your own, little key fact.

136
00:08:01.506 --> 00:08:05.615
Anyways, again, secure hashing algorithm,
just absolutely love that.

137
00:08:05.615 --> 00:08:08.744
Naming is just so awful, and I don't
know what it is in computer science,

138
00:08:08.744 --> 00:08:09.554
it's just awful.

