WEBVTT

1
00:00:00.000 --> 00:00:00.783
Alright, git reset.

2
00:00:00.783 --> 00:00:05.432
So this one you've seen me use a couple
times cuz we definitely didn't have any

3
00:00:05.432 --> 00:00:09.599
problems earlier, which required
me to change history or anything.

4
00:00:09.599 --> 00:00:12.794
We didn't have any
deviations from this course,

5
00:00:12.794 --> 00:00:18.133
it's been first try all day long, but if
I did I would've probably used git reset.

6
00:00:18.133 --> 00:00:23.361
There's actually quite a bit you can do
with reset I only use it pretty much one

7
00:00:23.361 --> 00:00:28.920
way, which is just get rid of my current
changes, that's pretty much what I use.

8
00:00:28.920 --> 00:00:31.022
Like I don't like these just
get the hell out of here,

9
00:00:31.022 --> 00:00:34.247
right like that's what I that's how I use
it so we're not there right now, we're

10
00:00:34.247 --> 00:00:37.458
gonna do a little bit different, we're
gonna kind of show you a little bit more.

11
00:00:37.458 --> 00:00:42.328
So a soft reset is a reset In which
you actually walk back a commit,

12
00:00:42.328 --> 00:00:45.706
your branch will walk
back a commit with you.

13
00:00:45.706 --> 00:00:49.782
And that commit that you
just effectively forgot and

14
00:00:49.782 --> 00:00:55.629
changed history will become the change
inside the working tree and index.

15
00:00:55.629 --> 00:00:58.270
So we just got done reverting E, right?

16
00:00:58.270 --> 00:01:02.003
So if I go git reset --soft head tilde 1,

17
00:01:02.003 --> 00:01:07.830
I'm now gonna walk back that commit,
it's still trunk, right?

18
00:01:07.830 --> 00:01:12.621
We're still in trunk, but
if I go git log one line, you'll notice,

19
00:01:12.621 --> 00:01:14.199
where's the revert?

20
00:01:14.199 --> 00:01:16.596
The revert, where's the revert?

21
00:01:16.596 --> 00:01:18.376
It's gone, right?

22
00:01:18.376 --> 00:01:20.114
If I go git status.

23
00:01:20.114 --> 00:01:27.533
Well, look what the VCS drug in,
get diff stage, there we go.

24
00:01:27.533 --> 00:01:32.839
Awesome, there's the -C, so
you can see I just undid the commit.

25
00:01:32.839 --> 00:01:37.109
That's git reset soft, which means
that all the changes now go into your

26
00:01:37.109 --> 00:01:39.279
working tree slash into your index.

27
00:01:39.279 --> 00:01:41.036
So, awesome.

28
00:01:41.036 --> 00:01:42.378
I actually really like this,

29
00:01:42.378 --> 00:01:46.041
it's really great when you say you're
teaching a class and you totally mess up.

30
00:01:46.041 --> 00:01:49.793
You can actually walk these things back
pretty easy, contain all the changes and

31
00:01:49.793 --> 00:01:50.963
know how to work things.

32
00:01:50.963 --> 00:01:53.561
I really like,
I actually really like reset soft, and

33
00:01:53.561 --> 00:01:57.360
the best part is I didn't really even know
about reset soft for a very long time.

34
00:01:57.360 --> 00:02:01.954
Typically what I would do is I would just
go into the logs, check out the specific

35
00:02:01.954 --> 00:02:05.881
Shah and then just delete my branch and
create that as my new branch.

36
00:02:05.881 --> 00:02:10.204
But instead with reset a hard or soft
you can just walk it back and you don't

37
00:02:10.204 --> 00:02:15.188
have to do that little hopping, recreating
checking out, destroying type thing.

38
00:02:15.188 --> 00:02:19.468
There's also kind of like an inverted
version of this, like right now if I

39
00:02:19.468 --> 00:02:23.483
do this resets soft I can actually commit,
write a new shot, right?

40
00:02:23.483 --> 00:02:27.352
And now I have the same change,
but I've changed the message so

41
00:02:27.352 --> 00:02:30.650
it no longer says we reverted E,
and it has a new shot.

42
00:02:30.650 --> 00:02:33.921
So I've kind of hit history by accident,
right?

43
00:02:33.921 --> 00:02:38.520
But I could do the exact same thing
in some sense by using get a met, so

44
00:02:38.520 --> 00:02:42.641
commit --amend allows you to
take your current changes and

45
00:02:42.641 --> 00:02:46.219
retroactively apply them
to the commit you're on.

46
00:02:46.219 --> 00:02:51.576
And then you can even do amend --no edit,
and that will edit the commit

47
00:02:51.576 --> 00:02:56.690
you're just on, but you don't have
to change the commit message.

48
00:02:56.690 --> 00:03:03.354
When I'm doing CI, I literally echo a,
space to the end of a file,

49
00:03:03.354 --> 00:03:09.074
git add, git commit, amend,
no edit, git force push.

50
00:03:09.074 --> 00:03:11.202
That way there's only like one change,

51
00:03:11.202 --> 00:03:14.338
instead of the CI thing where
you have 9,000 changes.

52
00:03:14.338 --> 00:03:18.527
You can do a git reset soft git commit and
just keep on changing the thing over and

53
00:03:18.527 --> 00:03:20.765
over again or
just add a space and do that.

54
00:03:20.765 --> 00:03:22.824
So amend, reset soft.

55
00:03:22.824 --> 00:03:25.916
Fun little move here,
I do it all the time.

56
00:03:25.916 --> 00:03:28.867
Good times, but remember,
you're always changing history when

57
00:03:28.867 --> 00:03:31.666
you're doing those things, so
can be a little bit dangerous.

58
00:03:31.666 --> 00:03:35.794
All right, so hard, we can do
the same thing as soft, except for

59
00:03:35.794 --> 00:03:39.479
this one drops the changes to
index in your working tree.

60
00:03:39.479 --> 00:03:43.949
That means when you go back,
it will completely destroy it.

61
00:03:43.949 --> 00:03:47.480
So we'll do the exact same thing, we are
going to make a little bit of a change and

62
00:03:47.480 --> 00:03:49.990
we're gonna destroy our
changes with reset --hard.

63
00:03:49.990 --> 00:03:53.733
So first make a change to README and
then add a new file called foo.md,

64
00:03:53.733 --> 00:03:56.154
make those two and
then let's destroy them.

65
00:03:56.154 --> 00:04:00.899
So I'll go vim README, jump in here,
there we go, a little bit of a change and

66
00:04:00.899 --> 00:04:02.885
then foo.md and I don't know.

67
00:04:02.885 --> 00:04:04.764
There you go, some voac in there.

68
00:04:04.764 --> 00:04:07.536
Git status,
you can see these two things right here.

69
00:04:07.536 --> 00:04:11.217
Now remember, this is a tracked
change that's not staged,

70
00:04:11.217 --> 00:04:15.636
cuz remember, read means is tracked,
it's a part of the working tree.

71
00:04:15.636 --> 00:04:18.629
Foo is not a part of the working tree,
it has never been tracked,

72
00:04:18.629 --> 00:04:21.686
it's never been staged, and so
we have no information about it.

73
00:04:21.686 --> 00:04:23.822
So if I go git reset --hard,

74
00:04:23.822 --> 00:04:28.188
it will destroy all working
tree changes and index changes.

75
00:04:28.188 --> 00:04:33.639
So if go git status, still got foo, I just
don't have the readme change anymore,

76
00:04:33.639 --> 00:04:37.601
cuz remember, it just destroys
only what git knows about.

77
00:04:37.601 --> 00:04:41.889
Now, here's the danger, this is the big
danger if people fall into white,

78
00:04:41.889 --> 00:04:46.312
they'll get at this, and so now it now
knows about this for the first time, and

79
00:04:46.312 --> 00:04:47.738
I go get reset --hard.

80
00:04:47.738 --> 00:04:54.182
It's gone and there's like no coming
back from this one, it's a goner, right?

81
00:04:54.182 --> 00:04:56.558
You just erased a file that
was never tracked, and so

82
00:04:56.558 --> 00:04:58.614
there's no previous history at this point.

83
00:04:58.614 --> 00:05:01.933
So you got to be a little
careful about using reset heart,

84
00:05:01.933 --> 00:05:04.227
you can also do the whole walking back.

85
00:05:04.227 --> 00:05:08.497
So if I go up, if I go vim read me and
I add a commit, right here and

86
00:05:08.497 --> 00:05:13.193
go git add git commit, now a bunch
of nonsense and then go git a reset.

87
00:05:13.193 --> 00:05:18.103
Hard HEAD-1, it does the exact same
thing that soft did except for again,

88
00:05:18.103 --> 00:05:21.875
what does it do to the index and
working tree gets rid of it.

89
00:05:21.875 --> 00:05:26.136
So if I go git status, nothing there,
just simply walk me back one commit.

90
00:05:26.136 --> 00:05:30.448
So get log one,
you'll see that I'm at the new shawl.

91
00:05:30.448 --> 00:05:31.307
So kind of neat.

92
00:05:31.307 --> 00:05:34.888
So, when you're needing to kind of
just save yourself a little bit,

93
00:05:34.888 --> 00:05:37.878
knowing about the git reset hard and
soft is pretty nice.

94
00:05:37.878 --> 00:05:40.700
&gt;&gt; It's not really a new SHA,

95
00:05:40.700 --> 00:05:45.871
anymore because it was it
says a new SHA but it's.

96
00:05:45.871 --> 00:05:46.459
&gt;&gt; Get out.

97
00:05:46.459 --> 00:05:48.883
&gt;&gt; [LAUGH]
&gt;&gt; That's it.

98
00:05:48.883 --> 00:05:52.207
We are fist fighting alright so
there you go pretty fun times I don't know

99
00:05:52.207 --> 00:05:56.146
I actually really like I really it's just
it's absolutely fantastic having these.

100
00:05:56.146 --> 00:05:59.807
I can't tell you how many odd times
that this actually is you Is useful,

101
00:05:59.807 --> 00:06:02.491
that I used to do a bunch of
steps to do the same thing,

102
00:06:02.491 --> 00:06:05.560
now it's just like I can just
do them in one single command.

103
00:06:05.560 --> 00:06:08.177
As often I find myself checking out and
destroying the past and

104
00:06:08.177 --> 00:06:11.497
rechecking out a new branch and doing all
this just to walk back a couple commits

105
00:06:11.497 --> 00:06:13.979
that I was like, ooh,
I really goofed whatever that was.

106
00:06:13.979 --> 00:06:16.161
All right.

107
00:06:16.161 --> 00:06:17.104
Let's see.

108
00:06:17.104 --> 00:06:20.910
Ooh, yeah this is a good one,
I forgot about this part.

109
00:06:20.910 --> 00:06:25.728
Okay, so, all right, So

110
00:06:25.728 --> 00:06:30.130
I did just remove the revert, right?

111
00:06:32.542 --> 00:06:35.609
No, we didn't, I removed that extra
change I put on top of it, right?

112
00:06:35.609 --> 00:06:38.936
That the vRAC whatever change, right?

113
00:06:38.936 --> 00:06:40.728
We just did that, together?

114
00:06:40.728 --> 00:06:44.479
We should, here, let me revert also
the revert, so I'm gonna go like this,

115
00:06:44.479 --> 00:06:46.171
git reset --hard, there we go.

116
00:06:46.171 --> 00:06:48.183
We're back now,
we're kind of into this point.

117
00:06:48.183 --> 00:06:49.149
Now the revert's gone.

118
00:06:49.149 --> 00:06:51.500
So we're just right here.

119
00:06:51.500 --> 00:06:57.901
Can you restore git hello to the position
it was before we started this section?

120
00:06:57.901 --> 00:07:01.592
&gt;&gt; Is the SHA the same though, The answer,

121
00:07:01.592 --> 00:07:05.701
it's reflog, it's always reflog, right?

122
00:07:05.701 --> 00:07:09.116
You just gotta go find
that nice little reflog.

123
00:07:09.116 --> 00:07:11.497
I had a whole bunch of entries here,
I did a bunch of extra work, yeah.

124
00:07:11.497 --> 00:07:16.324
You can effectively be able to grab out,
our previous commit was the Revert E,

125
00:07:16.324 --> 00:07:17.069
remember?

126
00:07:17.069 --> 00:07:21.502
We did all that, so we gotta go find
the Revert E, so I can go in here and

127
00:07:21.502 --> 00:07:25.025
go git reflog,
find wherever revert is, there we go.

128
00:07:25.025 --> 00:07:25.593
It's right here.

129
00:07:25.593 --> 00:07:28.296
And you can do that, I mean,
there's plenty of ways you can do this.

130
00:07:28.296 --> 00:07:31.203
I'm sure there's some much more
awesome way to do this, but

131
00:07:31.203 --> 00:07:32.689
I can get check out that thing.

132
00:07:32.689 --> 00:07:37.534
I can get branch delete trunk,
I can get checkout --b trunk, right?

133
00:07:37.534 --> 00:07:41.154
Well, yeah, I just restored it from doing
that, I'm sure there's some nicer way

134
00:07:41.154 --> 00:07:44.668
to do that, I always find myself in habit
of just doing that because I'm always,

135
00:07:44.668 --> 00:07:45.358
I don't know.

136
00:07:45.358 --> 00:07:48.195
Once you do something then it's
really hard to break that habit,

137
00:07:48.195 --> 00:07:50.065
that's typically how I'll always do it.

138
00:07:50.065 --> 00:07:53.279
Even with reset soft, sometimes I'll
just forget that I can do that and

139
00:07:53.279 --> 00:07:55.139
I just do this big hopping thing.

140
00:07:55.139 --> 00:07:56.061
No.
It's beautiful,

141
00:07:56.061 --> 00:07:57.026
you can do a git reset --hard.

142
00:07:57.026 --> 00:07:59.684
Yeah, you can do a git
reset --hard whatever end.

143
00:07:59.684 --> 00:08:03.364
Type to remember, it's a reset part and
then you can go anywhere.

144
00:08:03.364 --> 00:08:06.310
So I can actually reset --hard
to a branch that's remote or

145
00:08:06.310 --> 00:08:07.822
to anything that's a commit.

146
00:08:07.822 --> 00:08:11.646
So I could have also done the whole
head and then whatever the index was,

147
00:08:11.646 --> 00:08:13.319
whatever it was 14, right?

148
00:08:13.319 --> 00:08:15.829
And I could go off and do that.

149
00:08:15.829 --> 00:08:17.480
So it's a nice little thing.

