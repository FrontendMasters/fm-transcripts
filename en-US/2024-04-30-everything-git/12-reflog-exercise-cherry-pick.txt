[00:00:00]
>> This will be kind of a weird tasks to do, but it'll be fun. What I want you to do is I want you to create a branch called baz. I think currently we are on foo. You can create on whatever you want. It doesn't matter about the the baz branch or branching off of once you create a branch or I guess I say do it off of trunk.

[00:00:16]
It really doesn't matter. But let's just for now, just say create a branch off of trunk called baz. Add one commit to baz and do it in a new file, right? Don't do it in read me, do it in a new file. Switch back to trunk and then delete baz.

[00:00:31]
And then I want you to bring baz back to life from just the sha. And we can discuss how you do that, so first do the first three, and then we'll kind of talk more about this last one, and I'll join you. I'll go git checkout trunk, git checkout -bbaz, echo, bazzy, to baz, git add, git commit, definitely my best work here, git checkout trunk, git branch -Delete baz.

[00:01:05]
Dang it, I just lost all that work. And, darn it, I just lost all my history too. I could have probably recovered it if I didn't Ctrl + L but now look at this, I'm up a river without a paddle, right? Well, hopefully you don't think that. I think this is a fun kind of exercise to go on.

[00:01:23]
So let's first use Reflog and let's recover our sha. So what I'll do is I'll go like this, git reflog, I know it's in the last couple, so why not just do a -5 so you don't see your entire history and look at this, definitely my best work.

[00:01:37]
Okay that's the shop. We have the sha from that commit, which means what can we do with a sha?
>> Hook it up.
>> Rebuild the whole repo.
>> We can rebuild the entire repo just from this one little tiny sha, right? Remember git cat-file -p, this, look at that.

[00:01:57]
It's right there. It's still in Git just because we deleted the branch did not mean we deleted what you just changed. It's in git, the files are in the computer, as a wise man once told me.
>> So if you delete a baz branch because there's still that snippet of history in your local computer, is there any instance where you can delete the branch using the good get CLI-d but also delete it from the source of truth in the .git folder?

[00:02:23]

>> There might be. I've never actually tried that so I have no idea. My guess is no. But there's a ton of options, so it also wouldn't be surprising if you could, all right? Yes, there is? Okay, yeah. People are saying there is, but I have no idea.

[00:02:40]
Never trust the Internet. Trust the man page. I bet you it's in there. All right, problem, with our sweet knowledge of how git plumbing works, can you retrieve the contents of the commit using our super awesome powers to grab our baz.md? Can you do that? You have the sha, try to get out what was in baz.md, not from your memory, but from git.

[00:03:04]
So we can use git cat file -p with that, I can go into the tree, git cat-file -p that, I can see my little baz file right there, and then I can git cat-file -p, that thing, and look at that, bazzy. I recovered it walking the sha's all the way to the exact file.

[00:03:26]
So I could take this, and I could cat that, and I could pipe that into baz.md, and then I could get status, and look at that, git diff, we actually don't have anything in there because it hasn't been added. We could add that and then git diff staged.

[00:03:42]
And look at that, there's bazzy, it's a new file right here. My goodness, I've just recovered it. And I feel like a hacker, right? I mean, there is actually easier ways to do this, but that was just kind of fun, right? Peer wizardry, you do this at your job, you're getting a promotion.

[00:03:58]
Just right off the bad, Brent, CTO, Frontend Masters will just hire you as the new CTO, just doing this. All right, let's not use the internals. Is there another way? I mean, it's great flexing, right? You should always flex that work when you can, but maybe you don't have to.

[00:04:13]
Is there a easier way to do this? Well, you can always just do the, unfortunately the, hair hot, I'll go with git reflog. And we just have this thing out right here
>> In chat someone mentioned cherry-pick
>> Right, so one thing I can do if I really wanted that change in trunk, I could git merge just that sha.

[00:04:40]
I already have the sha, right? I could just bring it in. Git still has the state, boom, look at that. Baz is now in trunk. Wow, that was magical, right? We didn't have to do all that hacker man stuff. We just simply needed the sha and then we can just merge it into trunk.

[00:04:52]
Now I have baz right there. It's just right there. Kind of interesting, right? You might not have seen that one coming. So we can do that. But there is a problem with merge. What happened if there was a lot of diverging that happened? What happen if there was a bunch of commits in betwixt, my trunk head and that commit, what would happen if we merged it?

[00:05:17]
We'd all that history, right? Cuz it's gonna try to find what does it do again, it walks back, it finds the merge base or the best common ancestor, and then it replays all of those potentially into a third branch and then does a merge commit if the histories have diverged.

[00:05:33]
So you may not want to do all that, right, that may be kind of a pain, maybe you just want that commit and not everything else. Well, I don't know if you know about cherry-pick, probably have never even heard the term until this exact moment. But cherry-pick allows you to take just one or more commits specifically.

[00:05:52]
Cherry-pick is fantastic. I've used this probably as, one of my 20% commands, I probably have used this the most. It's just because anytime I have just that change, I don't want to merge, I just want this one diff cherry-pick it in and it works with remotes, it's fantastic.

[00:06:08]
As long as you are up to date with your remote and you have all the changes from them, you can just cherry-pick a singular commit into your project if you need to. It does require your working tree to be clean. Remember working tree is just the state of your project, your everything that's been tracked by Git, so no changes to your working tree and then you can cherry-pick and no changes to your index either.

[00:06:28]
Sometimes if you have like index problems you can it will say no index against the staging area. Remember, it's not necessarily your working tree. So there you go, so, git cherry-pick, try it, if you haven't done it, see if you can cherry-pick the change of baz into trunk, if you did not merge it in.

[00:06:48]
Cuz I know some of you aren't necessarily following, if you didn't, you can do that, pretty fantastic. So, all you have to do is of course, get cherry-pick and the shell, and it will just merge it right in. Fantastic. A really real talk it is like by far one of the my most used commands is cherry-pick, absolutely.

[00:07:10]
Just has saved my bacon more than once, cuz have you ever had like a change that has diverged so bad due to something and then you just git the merge conflict is just incomprehensible. And this has happened to me. And luckily, you've made some small commits and you haven't made one big commit.

[00:07:24]
You're like, I'm just gonna take out these two things, play them over here and then try to rebuild the rest of it. I've been in a situation where there was such a bad divergence that the only way forward was to actually just hand move things over, and that was with cherry-pick.

[00:07:38]
It was fantastic, I'm not gonna draw it out I think everybody understands this we've talked about it quite a bit.

