[00:00:00]
>> We're gonna go into git branching. First off, you should not develop everything on the main line, okay? That'd be kinda crazy if all you ever did is just simply use whatever your main line is and just put all of your changes on that. But I'm gonna be a little honest with you guys, when it's just my project, I only develop on main and that's it.

[00:00:19]
That's all there is to it. But if I'm working with somebody else, you should branch. Branches are pretty much cheap, they're almost free. So you can create as many of them as you'd like, and it's really not gonna create a problem for you, for your system, for memory.

[00:00:34]
Again, every branch will be pointing to a commit, which will contain the entirety of your repo, but they're free, almost at the exact same time. We'll find out why. Since we're on a new repo, let's create our initial commit. Cuz remember, whenever you start a repo, there's no commits in there.

[00:00:47]
So it's empty, you can't even create a branch right now, things are all goofed up. So let's just create a quick change. And I want you to have a README.md with one line, put A in there, and then with a commit message of A. It's very important that you use these commit messages more than anything else, because if you don't, you will probably get a little bit confused with the course, so I'll do it, too.

[00:01:07]
README.md, I'll put in a nice little A. Git add this, git status, git commit. By the way, always use status before you commit. Make sure you don't accidentally, say, commit and outfile by accident while teaching a course on git and showing people how to properly use it. And of course, message A cuz we want to keep track of this, okay?

[00:01:27]
So there we go. You can do a little quick git log and see, look at that. Hey, fantastic. All right, so let's create a branch and we're gonna call this branch, foo. Why, cuz I say so. I know some people hate foo and bar as example things. I love foo and bar, okay?

[00:01:46]
I don't know why everyone has to hate foo and bar, it's fantastic. All right, git branch foo, this is how you create a branch. We just created it right now. Was this your expectation when you create a branch? Yes or no?
>> Yes, but I'm used to it.

[00:02:03]

>> Yes, cuz you're used to it. That's actually the proper answer right there. If you're new to git, that was a weird experience. You just created a branch and nothing happened, right? You're just still sitting there, you're on trunk. Where am I? Why did this happen? I wanna go home.

[00:02:17]
Well, guess what? You already are at home. The thing is that when you create a branch, it creates a branch at the commit you're currently on, but it does not switch branches. There's actually a couple ways you can, first off, you can check out any branch you have so I can actually execute git branch.

[00:02:33]
You should do this right now. Use git branch, check it out. I talk about log as well, so you can go git branch, check that out, you see I'm still on trunk, but I do have a foo now. If you go git log, you'll see head points to trunk, that's where I'm at, but there's also foo.

[00:02:53]
Foo's at the exact same place, cuz remember when you create a branch, it branches off wherever you're at. At this moment, very important. Some people only know that by accident. They haven't really ever thought about it, but yes, it's literally pointing to the same commit, right? We've already talked about it.

[00:03:09]
By the way, the asterisk is the one that's telling you where you're at. If you don't have colors, if it's not green, the asterisk is supposed to be the one, all right? Let's do a little bit of git foo. Can you find your branch details in docket. See, look, take a moment, explore.

[00:03:31]

>> Refs heads foo.
>> Give you a little hint, go check out refs, so I'll go like this. Git/refs/heads/foo/trunk look at that. So I can actually cat that out. Hey, that's my zsh. The branch is just exists in this heads folder as just a zsh so that git, remember what did we do with a shot?

[00:03:59]
When I can add a file of a zsh, right, I go git cat-file -p. It then shows my tree, right? So this is how git kinda understands and is able to build the state of your repo based off of a branch. A branch is just a zsh, a zsh is the state of your repo.

[00:04:17]
It's not a differential, that's why it's always able to do it and do it so fast. That's why branches are effectively free, it's just 40 characters in the file. Name, so it's like 45 characters for our case. Anyways, so if you want to switch branches, you can actually do git switch or checkout.

[00:04:34]
I'm just used to using checkout, so I just use checkout. You can use switch if you want to. There are effectively identical for the standard cases I read on the internet, so it must be true. That checkout is more versatile but I only use checkout to create a branch or to switch to a branch or to do something with merge conflicts which we'll talk about later.

[00:04:54]
So pretty much, I just use it for the most basic operations. And so, switch to branch foo. So I'll go git check out foo look at that we're on branch foo how fantastic, t's beautiful, right? There we go, it even tells you you've switched to branch foo awesome, all right?

[00:05:13]
So now that you're in foo let's create another commit with the message B. Again please follow along with the exact, name, messages, very, very important, okay? So we're gonna create B, and then we're gonna also create C. So I'll do that with you. And when we're finished, let's look at the log.

[00:05:27]
So I'm gonna go Vim README. I'm gonna create B, git status, see that it's there. Git add, git status, make sure I have it right. If you wanna get into that habit. It's a good habit and then B, very important, okay? And then I'll just echo C into README, just to make it easy, cuz I already know what I'm doing.

[00:05:49]
And then there we go, C. Arrow, arrow just means pipe out whatever output into a file, don't overwrite the file, add it to the end. It's just a pen to a file, for those that don't know. So let's use git log and see if we have this successful setup right here, right?

[00:06:11]
This is hopefully our setup right here. A points to trunk or trunk points to A and foo points to C. So if I go in here and just go git log, you'll see right here, foo is C, A is trunk. Fantastic, we have built that graph in git.

[00:06:29]
If you do git log with a graph, you'll see this nice straight line cuz, well, our history is pretty uninteresting right now. Nothing to it. I don't know if I save this yet, we can also add one line, tends to make things look a little bit nicer. You don't have to look at like the entirety of it.

[00:06:44]
I think at some point I start using it within this presentation, but just makes life a little bit easier. Already went all over this, great time. Look, there it is. One line, if you haven't, try out all three options. It's fantastic. All right, so you can delete branches with -d or capital D, the capital D is if you're not in sync with your track branch on the remote.

[00:07:03]
I don't think I go over that. Don't worry about that. You mostly won't ever run into that for the most part. But you can delete branches. That's probably the only important thing if you forget man git- delete or git -branch you'll be able to find out more information about it and why you have to use capital D, all right?

[00:07:18]
So commits are locked in. So now that we have a branch full of changes, what do we do? Anybody?
>> Merge.
>> Merge. Hey, that's like foreshadowing practically, all right? So prerequisite long as you have this setup right here, we can continue. I assume everybody has this set up.

[00:07:33]
So let's go problem. Start off by creating more commits and adding them to trunk. So I want you to create commits D and E to trunk the same way we added B and C. So this is really the end state that I want to see. I wanna see two branches that have diverged, ABC for foo, ADE for trunk.

[00:07:53]
I'll do it myself. Git checkout trunk. D to README. E to README added committed with you make sure you proper message this one it just makes life easier to follow along. There we go and I can do a nice little git log one line and you can see EDA.

[00:08:26]
All right, fantastic. You should have these two lines now set up. This is your following repo setup. You can check logs to make sure you have that and make sure your trunk is EDA. All right, so merge and rebase. Remember, a commit is just the entire code base at a specific point in time.

[00:08:47]
We have worked on, it's on another branch. We need to get back to trunk. One of the couple ways you can do that is with merge. Merge is one strategy. It has slightly different outcomes depending on how the history of the two branches are currently in. And so that's where merge can get a little bit confusing for people is cuz you don't always get the same result with merge.

[00:09:08]
So what is merge? Merge is attempting to combine two histories together that have diverged at some point. There's something called the best common ancestor or it will be referred to often as the merge base in the docs, that just simply means the first known in common parent. So since it goes A, B, C for foo and A,D,E for trunk, A is the best common ancestor.

[00:09:32]
They're both branched off as one point. Git then when it tries to merge, we'll find the best common ancestor, and then it will play your commits from both branches onto this best common ancestor and create a merge commit. That's why you see these merge commits, it's because it needs to combine both D and E and B and C together.

[00:09:52]
And then you'll get like a little commit message and an opportunity to time all together. So, merge is quite simple. Your branch that you're on is your target, the branch you're going to merge into it, I will often call it the source or the target branch or people think it's the target.

[00:10:11]
It's not the target the source branch, that's what you're merging onto your target branch is the one you're currently on. So it's kinda like a slight flip in your head, when you do it. It just so no one gets confused. And this is how you merge just git merge, branch branch name.

[00:10:24]
So, I want you to merge foo onto trunk. But when you do it, please create a new branch first off of trunk called trunk merge foo. And when you're done, use git log to see the state of trunk merge foo. I'll join you cool, and then I'm gonna go git checked out B, I always do this to create a new branch.

[00:10:43]
You can actually do git switched, or git branch or git swish switch-C branch and that will create the branch as it switches. So identical, just different options because you know why haven't been the same [LAUGH] why would you actually have a -B, all right? Foo already exists cool git check out foo, all right?

[00:11:03]
Awesome, git logged, sorry that we have to redo this part, so I'm just gonna pretend like this is brand new. It see it wasn't me or it was me the killer was in the room this whole time. I actually put it right here, there you go, see, but then when we go down here, notice that I put it right there, my bad on that one really quickly here, just so I don't forget.

[00:11:28]
Let's see, let's go into branching, README, let's go right here and then go, there we go. That will fix the problem when I push it up, here not fixed. That's how you do proper message by the way if anyone's wondering. So here in about a couple moments that will be up and then this page will refresh and everyone will be on the same page, okay?

[00:12:00]
Good, I just wanted us all to be on the same page. Fantastic, I don't know how long it takes. I think it takes two minutes for it to build, so. All right, so don't add it to read me by the way, everybody, so. All right, so now let's actually add some commits to foo.

[00:12:14]
We're gonna add two commits, B and C. Make sure you actually use B and C cuz it makes everything easier to use and I have a small typo right here saying, add the changes to README. Don't add them to README, add them to a new file. I called the file second and so you can do the same thing.

[00:12:33]
All right, then we'll go from here. All right, so I'll go echo B into second, remember that. Git add, Git commit -B and I'll do it again with C. Fantastic, now I have two commits into foo. We'll do a git log just to prove it. ABC right here, awesome.

[00:13:00]
I'll give everyone a moment to catch up. All right, so you should now have the repo set up like this. A should contain trunk, B and C should be foo. We can go git log, just verify that as a trunk set A foo, is that C. Awesome, foo C there we go.

[00:13:18]
This is what I pretty much executed right here. We added those two things. And when we do the log, you can see trunks down here. Foo up here, remember your commits won't match my commits totally normal. Again, totally based off of time, author everything. Remember, you can delete branches.

[00:13:34]
I don't know if you know that, you do the D command. We will actually use it later, I'm just putting it in here. Just remember that -d, deletes a branch. I always use capital D because I don't want it to have to try to check against the origin to see, can I delete this branch?

[00:13:48]
Is it up to date with what I'm tracking against? We'll go over tracking and all that later on, but I just use capital D whenever I'm deleting something. Old habits, all right? So now we have a branch full of changes. What do we do next?
>> Merge. Merge, did I hear merge?

[00:14:05]

>> [LAUGH]
>> [LAUGH] absolutely, we gotta merge it.

