[00:00:00]
>> This is pretty much the 80% of you will do with git. If this is all you ever learn about git, you'll be moderately successful. You can get pretty dang far knowing about git add path-to-file or a file pattern, git commit -m and git status. If you can just know those three commands you're already doing pretty dang good.

[00:00:19]
Okay, so git add will stage the file, it will add it to the index. Git commit will take your staged files, your index file, and then turn it into a commit with the author name, the time, the contents of the change, all that, and will produce out a SHA.

[00:00:35]
Did you know that SHA stands for secure hashing algorithm? Isn't that kinda disappointing? It's a variant of MD5. Either way, it just is always disappointing to know that SHA means secure hashing algorithm. And then git status will just say, here's the state of your repo. All right, Problem, we want to trace the steps of git from untracked to tracked.

[00:00:58]
So don't forget these ones right here. This is what I want you to do, I want you to create a file called first.md, I want you to check the status of git. Then, I want you to add first.md to the staging area, recheck the status, see that it's being tracked, commit it with a friendly message, and then check the status again.

[00:01:22]
If you're pretty good with git already, you already know these basic commands, please just create a commit really quickly with first.md. We're gonna use it and we're gonna do something. All right, I'll start doing it right now, so I'm gonna jump over here. I'm gonna go to first.md I'll go, hello fem, there we go, git status.

[00:01:39]
You'll see right here untracked file, git has no idea anything about this file. First time it's ever seen it, it doesn't have any information about it. If I go git add this and then redo it, you'll see now we are tracking it. It's officially a part of the git ecosystem but only on a singular level, meaning that it's only a part of the staging, it has no prior information besides for staging.

[00:02:03]
If I go git commit -m, 'friendly message', look how nice that is, it's gonna tell me, hey, this is the first commit of the repo, the root commit, it has no parents. Typically, I usually go with Batman for my first commit. I think it's funny cuz Batman doesn't have any parents, right?

[00:02:19]
It's like you gotta always go for that on the first repo. I think it's fantastic. And there you go. So we've made our first commit. So that means if I go git status, says right here, what branch you're on, nothing to commit, there you go. The tree is clean.

[00:02:35]
So we already kinda walked through all that. So hopefully everyone has one commit. I think even in here, I use my first commit. Okay, so the changes are in the repo. One of the common activities you should get into the habit of or at least know it's available is git log.

[00:02:54]
Git log allows you to look at the history of the repo. It's a very bad powerful thing, and we're gonna go over a few of the options today and we're gonna use it very regularly throughout this course. Cuz it's just awesome to have in your bat belt, I guess we're going with Batman-themed things.

[00:03:12]
Anyways, so review or explore, check out a man git-log. I want you to open up the man page and actually look at it, and I want you to search for --graph and --decorate. And just kind of do a quick read, get kind of used to reading the manual.

[00:03:28]
I'll do it along with you, man git-log, there's graph right here. And if I find the option, there's the option, look, draw a text-based graphical representation of the commit history. Okay, good to know we have that, all right? And then we can go --decorate, let's find the option.

[00:03:47]
We may have to go backwards. Decorate often is, it's a little bit harder to read, prints out the ref names of any commits that are shown. Probably not really sure what a ref name is, or remember everything's a commit, everything has a SHA, and you can reference those commits with some sort of named item, branches, right?

[00:04:05]
Branches, tags, there you go. Or the very special one named head, we'll go over head in a little bit. All right, problem, display the history of your repo with --graph and --decorate. So I'll do right now, git log --graph --decorate. Often, you don't actually have to use --decorate if it's just printing out to Standard in.

[00:04:31]
Kind of a little fun exercise to do, watch this. If I go this, I drop --decorate, and I just do --graph, you'll notice right here, HEAD points to master. If I take this and put it out to a file, and then count out the file, look at what's missing that, bit of information.

[00:04:48]
So if you're ever printing out anything to a file, you need --decorates to actually git, or, --decorate. You need that flag to tell you, hey, list out all the named commits for me. Just nice little thing, so often you don't use --decorate like in practice cuz you're just looking at the log, just something to be aware of.

[00:05:15]
All right, awesome, so solution, hopefully everyone did that. The decorate option, we already went over that. Don't worry about that, it's absolutely fantastic. Unfortunately, we only have one commit, so the graph option really isn't super fantastic, right? You're not actually seeing a graph, there's nothing to graph. But you'll notice that there's this little asterisk right here, and that little asterisk is your only node in the graph.

[00:05:40]
So that's the beginning of the graph item when you use the log. We'll look at it a lot more. All right, hopefully everybody's on the same page at this point. So we're gonna now get into some of the git internals, right? We're going from 0 to 15, and then we're just gonna jump right in at 200 miles an hour, so we're gonna go all the way in.

[00:05:57]
Again, SHAs, they're just 0 through 9, A through F string of characters, 40 of them. And so now we're gonna do the plumbing part, I'm very excited. By the way, just so you know, you can specify the first seven characters of any SHA and get will resolve that out.

[00:06:13]
So you just need to get at least the first seven characters. You can use log to be able to get out your shots. There's other ways to get out SHAs, but log is the simplest way. You don't have to know this one special command for getting out a SHA, and so you can just use log.

[00:06:29]
So a problem. Find the first commit SHA of your first commit. Now, I want you to copy it to your system clipboard. And this is the important part, everybody has to do this, okay? Cuz now we're doing the internal, so get the SHA. So me, I'll do, I'll go git log, and I can come up here and I can, there we go.

[00:06:51]
So I have it nicely on my clipboard right now. Hopefully, everybody has it at this point. Okay, fantastic, this is the SHA, by the way, right here, this big mess of characters. All right, so quick question, why is your sha different than mine? Mine is 8721a, yours is probably not any of that.

[00:07:18]
Why is it different?
>> Different inputs.
>> Not just based on the one markdown file, but also your user.name, .email, maybe other environmental bars?
>> Exactly, so you pretty much got the idea. My sha is based off what I call committed, the time of the day, my username, my email, so I should produce a unique one comparatively to you.

[00:07:43]
So if we both at the exact same time of the day, both committed the same thing, it should produce different SHAs, cuz it's an amalgamation of a bunch of different options. So just so if you're wondering, you can't follow along directly. You won't be able to just use the SHA that's produced, you'll have to be able to grab out your own, little key fact.

[00:08:01]
Anyways, again, secure hashing algorithm, just absolutely love that. Naming is just so awful, and I don't know what it is in computer science, it's just awful.

