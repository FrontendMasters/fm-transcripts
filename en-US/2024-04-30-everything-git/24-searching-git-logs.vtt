WEBVTT

1
00:00:00.000 --> 00:00:02.889
Let's take this repo and you're never
gonna guess what we're gonna do.

2
00:00:02.889 --> 00:00:05.178
We are gonna clone, but
we're gonna bisect as well.

3
00:00:05.178 --> 00:00:06.766
You would never have guessed that,
would you?

4
00:00:06.766 --> 00:00:10.168
All right, so
if you don't have the course open,

5
00:00:10.168 --> 00:00:14.148
it's just github.com/The
Primeagen/git-bisect.

6
00:00:14.148 --> 00:00:17.822
So you can go to GitHub and go grab that.

7
00:00:17.822 --> 00:00:21.951
I'll go over here, do that.

8
00:00:21.951 --> 00:00:22.872
So this one's fantastic.

9
00:00:22.872 --> 00:00:27.345
So wherever you like to clone out repos,
clone it.

10
00:00:27.345 --> 00:00:29.305
My goodness, [LAUGH] I pre-washed.

11
00:00:29.305 --> 00:00:33.235
This is definitely pre-washed [LAUGH].

12
00:00:36.418 --> 00:00:37.385
All right, there we go.

13
00:00:41.586 --> 00:00:43.595
Fantastic, okay, so we're here.

14
00:00:43.595 --> 00:00:45.339
Now, we kind of have a classic problem.

15
00:00:45.339 --> 00:00:50.645
This happens about once, twice, a few
times a year where you have to do this,

16
00:00:50.645 --> 00:00:55.643
where there's a whole bunch of commits,
and something has gone wrong.

17
00:00:55.643 --> 00:01:00.329
You don't know when it's gone wrong,
you just know a while back it's good and

18
00:01:00.329 --> 00:01:01.821
currently, it's bad.

19
00:01:01.821 --> 00:01:06.002
And you wanna find out exactly when
did something go wrong, and so

20
00:01:06.002 --> 00:01:07.760
this is called git bisect.

21
00:01:07.760 --> 00:01:09.867
It's not a common problem,
but I definitely run into it.

22
00:01:09.867 --> 00:01:14.517
And the longer your testing cycle is,
the more you should know that this exists.

23
00:01:14.517 --> 00:01:17.603
Because if it takes you one second, I'm
sure there's a bunch of people are just

24
00:01:17.603 --> 00:01:20.565
walking back ten commits at a time,
they don't even know git bisect exist.

25
00:01:20.565 --> 00:01:23.114
So therefore, they're just like,
it's not I don't I don't have to care.

26
00:01:23.114 --> 00:01:27.164
But if you have like a ten minute
testing cycle, all of a sudden,

27
00:01:27.164 --> 00:01:30.167
you wanna be as efficient as possible,
right?

28
00:01:30.167 --> 00:01:32.057
But there's a lot of different
ways we could do this.

29
00:01:32.057 --> 00:01:35.147
One cool thing is with logs,
you can actually search through logs.

30
00:01:35.147 --> 00:01:38.685
And this is kind of a neat technique in
the sense that if you just wanna find

31
00:01:38.685 --> 00:01:42.513
a change around a particular component and
everyone does a pretty decent job at

32
00:01:42.513 --> 00:01:46.517
putting in good logs, you could find
a change around that particular component.

33
00:01:46.517 --> 00:01:49.495
Even if it's spread across a couple
different files, so that way,

34
00:01:49.495 --> 00:01:52.996
you're not just looking at a specific
file, but maybe you're just looking for

35
00:01:52.996 --> 00:01:55.729
a usage of a specific item
throughout the codebase over time.

36
00:01:55.729 --> 00:01:57.541
And so
you can you can grab all those things.

37
00:01:57.541 --> 00:02:01.521
Obviously, some of the cons of using
logs is that sometimes you don't know

38
00:02:01.521 --> 00:02:03.298
a keyword to search for, right?

39
00:02:03.298 --> 00:02:06.863
You know there's a bug, but
you have no way you could really

40
00:02:06.863 --> 00:02:10.870
look through the logs to know why or
where that bug change could be.

41
00:02:10.870 --> 00:02:12.769
Commit messages aren't always the best.

42
00:02:12.769 --> 00:02:14.701
I know we all say we're
going to do better.

43
00:02:14.701 --> 00:02:18.483
Our good commit messages starts tomorrow
and then it just doesn't happen,

44
00:02:18.483 --> 00:02:21.259
sometimes you can't boil it
down to any specific word or

45
00:02:21.259 --> 00:02:23.464
there's just too many commits to the file.

46
00:02:23.464 --> 00:02:26.012
There could be hundreds of them,
so you're like, okay,

47
00:02:26.012 --> 00:02:27.841
I can't just do a quick check and grab it.

48
00:02:27.841 --> 00:02:32.500
One reason why I tend to just do a quick
log look is let's say it takes two minutes

49
00:02:32.500 --> 00:02:36.945
to test to see if it's good or bad and
I know the file that it's probably in,

50
00:02:36.945 --> 00:02:38.980
I could do a quick log search.

51
00:02:38.980 --> 00:02:42.747
Look at it, there's one change here,
I'll just test this one change.

52
00:02:42.747 --> 00:02:46.095
And if that one is the problem,
I'm like, got it, right?

53
00:02:46.095 --> 00:02:49.042
You can just kind of look at the change
and go, okay, this is pretty simple,

54
00:02:49.042 --> 00:02:49.927
I can see exactly why.

55
00:02:49.927 --> 00:02:51.693
So it can be pretty fast.

56
00:02:51.693 --> 00:02:56.613
So you can actually search,
you can search with logs with grip.

57
00:02:56.613 --> 00:02:58.118
But before we do that, we gotta do this.

58
00:02:58.118 --> 00:03:01.668
This little npm i thing, right,
this is a Node thing, okay.

59
00:03:01.668 --> 00:03:08.125
So do a little npm i.

60
00:03:08.125 --> 00:03:09.739
Are you making fun of me for using npm?

61
00:03:09.739 --> 00:03:12.547
&gt;&gt; No, I have to install npm,
I don't have Node on here.

62
00:03:12.547 --> 00:03:16.708
[APPLAUSE]
&gt;&gt; [LAUGH]

63
00:03:16.708 --> 00:03:17.762
&gt;&gt; That was amazing.

64
00:03:17.762 --> 00:03:21.288
If you didn't hear,
there's someone here without Node.

65
00:03:21.288 --> 00:03:22.327
How great is that?

66
00:03:22.327 --> 00:03:25.104
Based you are now the new coolest bird.

67
00:03:25.104 --> 00:03:26.709
Do you wanna come up here and be-.

68
00:03:26.709 --> 00:03:28.112
[INAUDIBLE].

69
00:03:28.112 --> 00:03:30.441
&gt;&gt; [LAUGH] You don't have to
participate if you don't want to.

70
00:03:30.441 --> 00:03:32.188
It's pretty easy step by step.

71
00:03:32.188 --> 00:03:35.591
&gt;&gt; [LAUGH]
&gt;&gt; You may, all right,

72
00:03:35.591 --> 00:03:36.793
another way to do that.

73
00:03:36.793 --> 00:03:39.327
All right, so next,
try to run a test, npm run test.

74
00:03:39.327 --> 00:03:40.956
I actually did note specifically,

75
00:03:40.956 --> 00:03:44.439
cuz figured there's no way people
aren't gonna have Node on the computer.

76
00:03:44.439 --> 00:03:47.270
[LAUGH] Man,
I can't believe this actually happened.

77
00:03:47.270 --> 00:03:48.474
This is so great.

78
00:03:48.474 --> 00:03:49.568
Okay, npm run test.

79
00:03:49.568 --> 00:03:52.769
[LAUGH] I didn't wanna be like,
you don't have cargo?

80
00:03:52.769 --> 00:03:54.216
Well, let me tell you about Rust.

81
00:03:54.216 --> 00:03:55.866
I don't wanna be that guy, so.

82
00:03:55.866 --> 00:03:58.526
&gt;&gt; [LAUGH]
&gt;&gt; Yet here I am telling you about Node,

83
00:03:58.526 --> 00:04:01.267
so I intentionally just
put a sleep in here.

84
00:04:01.267 --> 00:04:04.782
So you have to wait 30 seconds to
see if it fails or not, right?

85
00:04:04.782 --> 00:04:08.750
This is real life, right,
this is what happens in real code bases.

86
00:04:08.750 --> 00:04:11.646
It takes a lot longer to figure out
if something is broken or not broken.

87
00:04:11.646 --> 00:04:14.393
So you really don't wanna have to
live this life constantly, right?

88
00:04:16.534 --> 00:04:20.863
Right, thank you for agreeing,
I do appreciate that.

89
00:04:20.863 --> 00:04:21.536
All right, there we go.

90
00:04:21.536 --> 00:04:27.596
One failed test, expected 138,
but we received 140, dang.

91
00:04:27.596 --> 00:04:29.259
That stinks, right?

92
00:04:29.259 --> 00:04:30.707
You can actually see it right there, see?

93
00:04:30.707 --> 00:04:32.573
I told you I'm literally
just sleeping right there.

94
00:04:32.573 --> 00:04:35.394
All right, fantastic,
we got that all done.

95
00:04:35.394 --> 00:04:37.795
Observation, we know that
the foo function is failing and

96
00:04:37.795 --> 00:04:39.223
the test foo are failing, right?

97
00:04:39.223 --> 00:04:41.942
So we know that something's wrong
with the function called foo.

98
00:04:41.942 --> 00:04:46.415
So what we can do is we can use, by
the way, I say you can do man, git-log and

99
00:04:46.415 --> 00:04:47.764
search through logs.

100
00:04:47.764 --> 00:04:53.282
If you don't know, in oldie computer
speak, searching is called grep, right?

101
00:04:53.282 --> 00:04:54.491
I forget why it's called grep.

102
00:04:54.491 --> 00:04:57.722
There's actually a whole thing around it.

103
00:04:57.722 --> 00:05:02.212
I forget what all, but nonetheless,
these modern zoomers these days just use

104
00:05:02.212 --> 00:05:06.514
the term search and they don't even
know about grep and grep is fantastic.

105
00:05:06.514 --> 00:05:09.148
So if I told you to go in here and
find search,

106
00:05:09.148 --> 00:05:13.995
you just wouldn't really find the thing
because it may contain the word search,

107
00:05:13.995 --> 00:05:16.152
but none of them actually are grep.

108
00:05:16.152 --> 00:05:18.951
So you got to use grep,
right, and there you go.

109
00:05:18.951 --> 00:05:21.185
So you can do a grep with a pattern.

110
00:05:21.185 --> 00:05:24.687
And so this is from the log,
you just simply get to look through any of

111
00:05:24.687 --> 00:05:26.971
the commit messages with
the word foo in it.

112
00:05:26.971 --> 00:05:29.085
So that's a strategy we can do.

113
00:05:29.085 --> 00:05:32.247
So I can go,vgit log --grep foo.

114
00:05:32.247 --> 00:05:35.541
And so look at this, this is not
about foo, this is not about foo.

115
00:05:35.541 --> 00:05:37.386
It's kinda hard to search.

116
00:05:37.386 --> 00:05:41.061
I mean this one sounds pretty suspicious,
altering foo for

117
00:05:41.061 --> 00:05:42.982
new specifications, right?

118
00:05:42.982 --> 00:05:44.068
That sounds pretty good.

119
00:05:44.068 --> 00:05:46.674
What you can also do is
you can actually use -p.

120
00:05:46.674 --> 00:05:49.621
-p also puts the changes in here.

121
00:05:49.621 --> 00:05:51.800
So then you can go, okay, well,
what are all the changes?

122
00:05:51.800 --> 00:05:55.333
And as I search through,
this looks pretty suspect, right?

123
00:05:55.333 --> 00:06:00.448
So learning a thing or two about searching
the logs can be very, very useful,

124
00:06:00.448 --> 00:06:05.170
because sometimes you can stumble upon
things or you can look at changes

125
00:06:05.170 --> 00:06:09.838
over time for a specific item, and
it's kinda nice being able to use.

126
00:06:09.838 --> 00:06:11.035
So there we go.

127
00:06:11.035 --> 00:06:12.486
So grep, that's what we're using.

128
00:06:12.486 --> 00:06:15.944
And so we are able to easily find the
problem right here just by looking at it.

129
00:06:15.944 --> 00:06:17.394
Obviously, we know the problem, right?

130
00:06:17.394 --> 00:06:19.359
This very trivial problem or too often.

131
00:06:19.359 --> 00:06:20.881
Look at this.

132
00:06:20.881 --> 00:06:25.520
I don't know, we times by 2 and
that one exactly fits the need.

133
00:06:25.520 --> 00:06:26.969
So we got lucky on that one.

134
00:06:26.969 --> 00:06:28.966
The problem with this
is also a lucky search.

135
00:06:28.966 --> 00:06:30.776
If you're looking to solve a bug,

136
00:06:30.776 --> 00:06:34.774
definitely this one errors on the side of
luck to be able to get a good term with

137
00:06:34.774 --> 00:06:38.783
a simple set of changes that you can
just look at and it's like, there it is.

138
00:06:38.783 --> 00:06:41.029
So I often don't use this.

139
00:06:41.029 --> 00:06:43.549
But every now and then,
I'm like, there's this change.

140
00:06:43.549 --> 00:06:46.666
I dated a while back and I wanna be able
to just go straight to that change and

141
00:06:46.666 --> 00:06:47.283
go look at it.

142
00:06:47.283 --> 00:06:51.674
And so I can kinda know in my head
where or how I'm doing something, so

143
00:06:51.674 --> 00:06:52.903
I like searching.

144
00:06:52.903 --> 00:06:55.018
Okay, number two,
you can also search by file.

145
00:06:55.018 --> 00:06:59.733
So we already know that the problem
is in the index file, I think it is.

146
00:06:59.733 --> 00:07:01.764
There's only one file in here.

147
00:07:01.764 --> 00:07:02.709
Yeah, there's only one file.

148
00:07:02.709 --> 00:07:09.357
Okay, so you can go, git log and we'll do
a little p, and then we can go src/index.

149
00:07:09.357 --> 00:07:11.521
Is it js or ts, what are we at?

150
00:07:11.521 --> 00:07:14.375
Yeah, yeah, and
then you have to do a little- -.

151
00:07:14.375 --> 00:07:19.054
You're gonna only search in
the log with these specific files.

152
00:07:19.054 --> 00:07:23.375
And this will actually get you
the change set only for these files.

153
00:07:23.375 --> 00:07:26.513
That's it, so there's only
been two changes in this file.

154
00:07:26.513 --> 00:07:31.211
And so this is a nice way to be able to
reduce down the change you're looking for

155
00:07:31.211 --> 00:07:31.877
to a file.

156
00:07:31.877 --> 00:07:34.381
You can pass in multiple files,
very, very useful.

157
00:07:34.381 --> 00:07:38.990
You can mix and match grep and this, so
it's good to have this power with you.

158
00:07:38.990 --> 00:07:41.947
If you use -s,
you can search through the change itself.

159
00:07:41.947 --> 00:07:46.945
So there's a lot of cool
opportunities here with log.

160
00:07:46.945 --> 00:07:49.056
Just so you guys know, it does exist.

