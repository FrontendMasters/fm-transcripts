[00:00:00]
>> So what's the opposite of pull? Well, push, right? Awesome. So if you wish to take your changes and move them to a remote repo, you can do this with git push. All right, if you're not tracking git push won't work just like git pull wouldn't work, so you have to be able to be tracking a branch on a remote.

[00:00:15]
Again if you have, you properly name it as origin, git has some magic around it where you check it out, it'll do some auto tracking for you, which is fantastic. So let's make some changes to bar and push it to hello-git. So we'll do that right now. So I'll go, let's see, is that, I just wanna make sure that that's, yeah.

[00:00:35]
So let's make some changes to bar and then push them to hello-git. So I wanna go here in remote-git, and I'm gonna go git checkout bar. Now notice, when I git checkout, look what it does. It automatically does the tracking for me. Awesome, so now I can just git push.

[00:00:50]
And notice that I didn't have to create a new branch, I already had this branch in my remote directory. If you have several remotes, it can cause some problems, and all of a sudden checking out can be a little bit more of a pain depending on how you name things, that's why you know the whole.

[00:01:05]
Git checkout me bar, I thought was funny, but it also can be a pain. Anyways, so we've now switched to bar, we'll do a little quick change. Let me just make sure that, this is where, how we're gonna do this? Let's see. Create a single commit, CHANGE FROM REMOTE.

[00:01:17]
There we go. And we're add it to the end of README. So everyone do that. I add one line to the end of README in bar. So I'm gonna go vim README, go down here, changes from remote, git status. Yeah. There's only one file changed, git add, git commit, CHANGE FROM REMOTE.

[00:01:40]
There we go. So now I can take this and I can push it to my remote so I can go git push. And look at that, we've just updated bar in hello-git. If I switch over to hello-git and go git log bar, oneline, you will see this right here, it's been updated for us.

[00:02:03]
Cuz I pushed and it changed it on the remote. So this should be pretty familiar to you because it's like you already do this with GitHub a bunch, so none of this should be a surprise. Probably the only real surprising part is the fact that it's just two folders on your computer, right?

[00:02:18]
Again, folders, directories, I know, Windows played Doom, love Doom, Doom was great game. We've pushed all the changes, we've logged it out, we can see all the changes, a change from remote. So that's pretty awesome, right? Now, you may be asking your question this, why was bar moved forward for us?

[00:02:42]
We fetched the results, it didn't move our branches forward, but why wouldn't we pushed it to do it? Well, we're not checked out, right, that branch isn't checked out. We're not using that branch in any sort of capacity, and we're doing a push, which is analogous to doing like a fetch and a merch.

[00:02:58]
We're just doing it for then. And so that's what's happening on the other side, it's fetching, it's merging, it's updating its reference 4-bar, and there we go. It's like the opposite of pull. I'm gonna every now and then say the word upstream instead of origin. Upstream, this is just by accident, or old habits kinda die hard.

[00:03:15]
When I say upstream, I mean hello-git, tough. When I say origin, I mean hello-git, cuz remember, we have a dependency of remote-git on hello-git, but hello-git doesn't have its remote setup to remote, right? So it's a one way relationship right now. So we're just gonna pretend hello-git is GitHub for this case.

