[00:00:00]
>> Beautiful, okay, so I have my remote git setup. But now we got this call, production's down, there is a change you need to make or there's a change you need to pull in from our upstream. So we're going to attempt to pull it in with an act of change.

[00:00:18]
So let's start there. So do a git pull right here, git pull. Wait a second, did I miss one thing? Did I not put it in? It's supposed to say, hey, hold on now. It's supposed to say, hold on, you're not allowed to do that. Because you have unchanged things.

[00:00:41]
I'm super confused why I'm not getting the error that I was hoping to get right here. So it should say, hey, you don't do that. I think it's probably because I had rebase automatically on. So I think I actually had my little change in where I had rebase through.

[00:00:54]
So it's causing a bit of, you cannot pull with rebase. So oopsie daisies, right? So since I have an active change, it's not letting me do those changes. So whenever you try to pull and you have active changes, it's gonna tell you you can't do this. So we need to be able to stash, so we'll just go like this.

[00:01:09]
We'll do a another one of those echo upstream change into here, git add this, git commit, upstream change, there we go. We have the upstream change in hello. Now, we go to the remote and we can go, echo downstream change into the readme. So now we have something in the readme and we have a change we need to get from hello.

[00:01:31]
So what are we going to do now? We are gonna use stash, right? So this is what you do at this point. You'd wanna stash any of your changes to prevent any errors from happening. And then you're gonna want to be able to get the changes and then you're gonna wanna be able to unstash, right?

[00:01:46]
So this is typically what you're gonna want to do. So right now, before we do anything, let's stash our changes. So you can experiment by going git stash, and then go git status. Your changes are gone, right? Don't pull yet, don't pull. You can view your stash list.

[00:02:10]
This is a good kind of activity to get into viewing your stash list because it's really nice to know that you can even do that. So again, git stash lists, so if you ever get into this, you will know. So we have this work in progress that we've stored right here at this point in time.

[00:02:24]
You can see, okay, it was at this commit. Not very informative though, right? When you look at this, you don't really know what your stash changes are or anything. So we can go git stash show, little bit nicer to see, okay, this is the one where I made a change to readme.

[00:02:37]
So a little bit nicer, let's pop our stashes this time, and we pop it I wanna see that is now made that change. Git stash pop, there we go. Our changes back is right here, all right. Now let's stash our changes again but this time, let's use a custom message.

[00:02:58]
So go git stash with a message or readme changes. There we go, we did a stash again, but this time with a custom message, so now do git stash list. Now look at that, isn't that a lot nicer to do when you have a nice message? The reality is sometimes you will have a couple stashes and you're not gonna remember what's in the stashes.

[00:03:19]
And so just having a nice little friendly message to yourself can just, it'll just save a lot of headaches rather than trying to go through get all the diffs and looking at each different one, and then realizing, gosh, like this, there's the one I'm looking for. So now, let's create another change and we'll stash that so we have two in the list, all right?

[00:03:37]
So let's go another one. I'll just go vim readme, and I don't know, just add another line. There we go, Dvorak, by the way. And then I'll go git stash another change. So now when I go git stash list, I'll actually see two changes. I have another change on top, and the readme changes on bottom.

[00:03:55]
So the readme changes is the first set of changes we did. Another change is Is the second set of changes we did, but notice it's on top, it's the first one. So let's pull in our upstream changes now. So I'm gonna go git pull, there we go. I have this beautiful upstream change.

[00:04:11]
Now, let's get our original change back the first stash we did, does anyone remember how you're gonna get the first stash out? Not the second, not the one we just added, but the first one.
>> Pass the index.
>> Pass the index, there you go. So what you should be doing is going git stash.

[00:04:27]
Well first, you can go git stash list, make sure, okay I need to pull out the first one right here and go git stash pop index 1, and now we have that proper change. We If we don't have the Dvorak one, right, we have the downstream change. So working with stash pretty easy to use.

[00:04:46]
Now we have this beautiful change on top, awesome. And if we want to, we can even commit it if we want to, but stage has not changed, there we go. And it looks like even in here I committed so we will commit it with the exact same beautiful message that I have right here.

[00:04:59]
Let's see that's, copying from terminal, git add. Greatest change, fantastic, there we go. So commit that into your code. That means your readme should approximately look like that. I have a little space in here. There's no space in my example one. It's because my first commit contained that.

[00:05:21]
It's that one right there. See, look at that. I added a space, but in all my examples I didn't have the space, very painful for me to see this, I can't believe I did that. By the way, if you don't know, I don't cover it in this course, but- S will search like your commit message or search the commit change so you can look for changes that way, very, very fantastic.

[00:05:49]
So I knew where to find it, that's how I found it right away. Pretty neat stuff, just in case you're wondering. All right, so work trees. We're gonna talk about this in a little bit, I believe, I'm not sure. Yeah, we're not talking about it right now, but we're gonna talk about it in a little bit.

[00:06:02]
The thing that makes worktree so cool is that a worktree is another copy of your repo without all the weight of a repo. So if it takes you five minutes to download to clone out a repo, you can build a worktree effectively just as fast as you can build a branch.

[00:06:18]
They're very, very lightweight and they're fantastic. So you can see why that could be a very nice alternative to stash. All right, so we're gonna do more rebasing. This will be the longest section here and it's gonna have all the conflicts and everything and we're gonna go over it.

[00:06:38]
It's gonna take a little bit. So anyways, rebasing, you can do things like this, where we start off here, right? E is branching off of A, this picture makes it looks like it's branching off of B. I'm not sure which one I chose to have it actually branch off of, it doesn't really matter.

[00:06:52]
It branches off in the days of history way back then. And if you do a rebase, you can make it so that it goes all the way to the front, right? We all remember this, what are the steps that happen? Step one, we check out the branch we're rebasing on.

[00:07:05]
Step two, we play our commits one at a time at the tip of the branch we are rebasing on. Three, we update the branch we were on with the new position and the new commit. That's why it alters histories, because remember, it's actually creating a new set of commits because remember a commit also contains time.

[00:07:22]
So that's why you get new commits when you rebase. Everyone's good? Everyone's good on that one? Awesome, all right, so first, let's do a little bit of interactive rebasing and squashing. So this part is where you'll do this pretty much on your own branches, never on the public one.

[00:07:41]
Interactive rebasing and squashing allows you to take, say, this branch right here and turn it into this, where it's a singular commit as opposed to three commits. So that means while you're working, you can make all the commits you want, every single checkpoint. And then when you're done, you can take all those commits and turn it into one commit yourself.

[00:07:59]
Now, a lot of people do it where they have the remote, like say GitHub will do an automatic squash merge for you. It'll first take all of your commits, squash it into one and then merge it onto GitHub. That's a pretty common strategy that I've seen. I know we do it with Stash and stuff like that, and Netflix.

[00:08:15]
So I think most people probably have some very similar experience. And when you do interactive rebasing, it also allows you to edit the message so that way, what I typically do is I'll do each one of my commits and I'll start with squash me. So I can just look in the history and go okay, where did I start?

[00:08:31]
Okay, I started right here, rebase from right there. And then it's very easy and interactive and I can just erase all the messages and give it a nice, proper message as opposed to a bunch of squash me, right? And so we're gonna create a, we're gonna create some situations where we can interactively squash our commits and get some good messaging.

[00:08:50]
There's a lot of ground to cover here. We're gonna go over conflicts cuz conflicts are very important part of this. If for whatever reason I've done steps out of order, and we're unable to create the conflict as easily, we might have to add some extra commits because that's part of the fun, is that we didn't do it right the first try.

[00:09:07]
So be very careful where we make changes because from here on out, we're gonna be trying to make conflicts and we all want to be on the same page. So the first, it is, by the way, conflicts are the most dreaded topic, I hate them. I don't know why I have an unreasonable, I have an unreasonable amount of anxiety every time I pull a gun, man, there's gonna be a conflict.

[00:09:25]
And even though I know there's not, I still just feel like I'm gonna have a freak out. I don't know why it is. It just, it's that experience. Yeah, I hate them, you hate them, but it's good to know how to resolve them. Please, by the way, don't use VS Code.

[00:09:38]
Don't use fugitive with git or with vim. Don't use any of those for this. Let's just manually edit the diffs. You want to see why they're doing this. It's gonna be very important, especially with your knowledge of rebase, why conflicts can be goofy with rebase versus merge. We're gonna go through it all, but if you're not using the hand edit, you're just using a program, you may miss some of these subtle changes.

