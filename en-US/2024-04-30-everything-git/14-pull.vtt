WEBVTT

1
00:00:00.280 --> 00:00:02.360
All right, so you can also use git pull.

2
00:00:02.360 --> 00:00:04.560
Fetching is always a good idea,
keeps everything up-to-date.

3
00:00:04.560 --> 00:00:07.261
I always try to fetch often,
see when changes happen, and

4
00:00:07.261 --> 00:00:08.761
then pull in any changes I want.

5
00:00:08.761 --> 00:00:12.731
Git pull is just like a convenient
form of what we just got done doing.

6
00:00:12.731 --> 00:00:16.068
Fetches the changes, and then merges
those changes into your branch.

7
00:00:16.068 --> 00:00:20.298
And so you can do git pull,
the remote, and then the branch name.

8
00:00:20.298 --> 00:00:23.813
You can also for convenience just use git
pull and it will use the current one.

9
00:00:23.813 --> 00:00:27.902
Back in the day, 15 years ago or
whenever I started using git,

10
00:00:27.902 --> 00:00:31.782
when you'd use git push,
it pushed all of your branches up.

11
00:00:31.782 --> 00:00:32.862
It was fantastic.

12
00:00:32.862 --> 00:00:34.028
It would just send everything.

13
00:00:34.028 --> 00:00:36.700
So when you were just on your own
branch and you git pushed and

14
00:00:36.700 --> 00:00:39.801
you had changes to the mainline,
you actually just got done updating

15
00:00:39.801 --> 00:00:42.483
the company's main repo with no testing or
anything.

16
00:00:42.483 --> 00:00:43.938
Man, those were just the days.

17
00:00:43.938 --> 00:00:46.058
Absolutely a lot of fun.

18
00:00:46.058 --> 00:00:50.235
And so, problem, let's add one line at
the end of the README in hello-git and

19
00:00:50.235 --> 00:00:52.465
with a commit message, A remote change.

20
00:00:52.465 --> 00:00:54.768
But before you do that,
I've noticed something and

21
00:00:54.768 --> 00:00:56.923
I want to make sure we
don't have any accidents.

22
00:00:56.923 --> 00:01:00.930
If you merged or
cherry-picked changes into your trunk,

23
00:01:00.930 --> 00:01:03.229
you will have this extra commit.

24
00:01:03.229 --> 00:01:06.733
And I just want to make sure everything
goes swimmingly from here on out.

25
00:01:06.733 --> 00:01:10.761
So if you've done this,
has everyone done this, right?

26
00:01:10.761 --> 00:01:13.992
Okay, cuz it will diverge slightly
from what's on the screen.

27
00:01:13.992 --> 00:01:16.251
Cuz I didn't include that when
I was printing everything out.

28
00:01:16.251 --> 00:01:20.908
So if you've done that, it's okay, I just
wanna make sure you know that it's there.

29
00:01:20.908 --> 00:01:23.096
And so if it's slightly diverging,
there's no problems.

30
00:01:23.096 --> 00:01:28.177
All right, so let's add the one line at
the end of hello-git on your remote trunk.

31
00:01:28.177 --> 00:01:30.662
So I'll navigate over to hello-git.

32
00:01:32.217 --> 00:01:35.345
I will echo in a, what is it?

33
00:01:35.345 --> 00:01:38.408
A remote change at
the last line of README.

34
00:01:38.408 --> 00:01:42.978
At this point, it becomes important to
make sure you're doing the same changes

35
00:01:42.978 --> 00:01:46.193
cuz we're gonna kinda get
into some trouble here soon.

36
00:01:46.193 --> 00:01:53.195
So I'm gonna go vim README, gonna go
all the way down to here, add this in.

37
00:01:53.195 --> 00:01:58.762
Add it, commit it,
a remote change, there we go.

38
00:01:58.762 --> 00:02:02.388
So hopefully everyone can do
the same thing to hello-git.

39
00:02:02.388 --> 00:02:04.026
I did not use status.

40
00:02:04.026 --> 00:02:07.589
Remember, again,
it is good practice to use status.

41
00:02:07.589 --> 00:02:11.455
Since these are so trivial,
I probably won't use status all the time,

42
00:02:11.455 --> 00:02:14.560
but typically I never git add
without doing a git status.

43
00:02:14.560 --> 00:02:18.436
And for those that don't know,
git add dot adds every file,

44
00:02:18.436 --> 00:02:22.464
starting at my directory,
that git can find that has changes.

45
00:02:22.464 --> 00:02:27.344
So usually you do git add a path to
a specific file, but for convenience,

46
00:02:27.344 --> 00:02:31.664
you can do git add dot, long as you
have a good git ignore setup and

47
00:02:31.664 --> 00:02:35.118
everything's really, really nice.

48
00:02:35.118 --> 00:02:39.021
All right, now we're gonna execute
a git pull on the remote-git.

49
00:02:39.021 --> 00:02:43.729
So I want you to open up remote-git and
just go git pull, right?

50
00:02:43.729 --> 00:02:51.222
Because we have trunk in remote, we have
trunk in hello, hello has been updated.

51
00:02:51.222 --> 00:02:53.483
We just want to pull in the change.

52
00:02:53.483 --> 00:02:54.983
It's going to error.

53
00:02:54.983 --> 00:02:57.955
I want you to tell me why it errors.

54
00:02:57.955 --> 00:02:59.828
So I'm gonna switch over to remote.

55
00:02:59.828 --> 00:03:02.723
I'm gonna git pull.

56
00:03:02.723 --> 00:03:04.520
The arrow is pretty simple.

57
00:03:04.520 --> 00:03:09.605
It's just because you have a branch
name trunk doesn't mean that gets going

58
00:03:09.605 --> 00:03:14.545
to just magically assume that the trunk
on another branch is the same one.

59
00:03:14.545 --> 00:03:16.384
You have to set tracking information.

60
00:03:16.384 --> 00:03:21.620
You have to tell git which remote
are you linking this branch to.

61
00:03:21.620 --> 00:03:25.486
Because you could technically have a bunch
of remotes, which remote should I choose?

62
00:03:25.486 --> 00:03:28.097
And so you have to have some sort
of way to set the exact thing that

63
00:03:28.097 --> 00:03:28.949
you're tracking.

64
00:03:28.949 --> 00:03:30.706
And so the easiest thing for

65
00:03:30.706 --> 00:03:35.069
us to do is to take this line right
here with git branch, execute it.

66
00:03:35.069 --> 00:03:36.565
And we have origin, right?

67
00:03:36.565 --> 00:03:37.244
We only have one remote.

68
00:03:37.244 --> 00:03:42.571
It's literally saying git
branch set-upstream-to-origin/,

69
00:03:42.571 --> 00:03:44.781
oopsies, origin/trunk.

70
00:03:44.781 --> 00:03:48.405
And I'm gonna do it for branch name trunk.

71
00:03:48.405 --> 00:03:54.334
And so now that I've done that,
I can now pull in those changes.

72
00:03:54.334 --> 00:03:59.492
Cuz now it knows, when I execute git pull,
it now knows where to pull stuff in from.

73
00:04:01.479 --> 00:04:05.294
And back in the old days, git pull
would just pull all the things, right?

74
00:04:05.294 --> 00:04:06.815
I'm glad those days are gone.

75
00:04:06.815 --> 00:04:09.708
Man, did I mess up some
serious repos back then.

76
00:04:09.708 --> 00:04:12.937
All right, so hopefully you can
think about GitHub now, and

77
00:04:12.937 --> 00:04:14.465
you realize what GitHub is.

78
00:04:14.465 --> 00:04:17.307
It's just your repo on
someone else's computer.

79
00:04:19.312 --> 00:04:20.407
That's all it really is.

80
00:04:20.407 --> 00:04:23.311
We're doing the exact same things
you'd be doing with GitHub,

81
00:04:23.311 --> 00:04:25.048
except we're just doing it locally.

82
00:04:25.048 --> 00:04:28.193
And so, again,
hopefully the magic is now even less.

83
00:04:28.193 --> 00:04:32.113
Now, there's specific ways in which
you can communicate to GitHub

84
00:04:32.113 --> 00:04:35.840
that we're obviously not doing here,
but it's less magical.

85
00:04:35.840 --> 00:04:37.597
All right, so what about rebase?

86
00:04:37.597 --> 00:04:41.719
Well, typically whenever I pull
changes in from my authority repo,

87
00:04:41.719 --> 00:04:43.789
I prefer to rebase the changes in.

88
00:04:43.789 --> 00:04:47.271
The reason why is that, again,
I like a nice clean history,

89
00:04:47.271 --> 00:04:50.565
any changes I'm making,
I prefer my changes at the tip.

90
00:04:50.565 --> 00:04:54.225
Because if I wanna do testing again,
I don't want my changes somewhere

91
00:04:54.225 --> 00:04:58.190
deep within the history, I wan it exactly
at the end where I could edit those,

92
00:04:58.190 --> 00:05:00.341
I could squash those, I can change them.

93
00:05:00.341 --> 00:05:04.011
They're still my changes until I
commit them to the public repo.

94
00:05:04.011 --> 00:05:05.752
And so that's how I like to live.

95
00:05:05.752 --> 00:05:07.511
I think rebase is the best.

96
00:05:07.511 --> 00:05:09.868
We'll go over sort of why it's the best.

97
00:05:09.868 --> 00:05:13.900
I know it's my opinion, but
I believe it's the correct opinion.

98
00:05:13.900 --> 00:05:16.563
Also, it doesn't really matter
whether you use merge or rebase.

99
00:05:16.563 --> 00:05:18.730
If you have a long lived feature,
branch, life sucks.

100
00:05:18.730 --> 00:05:22.280
So there's just no way around that.

101
00:05:22.280 --> 00:05:25.262
Whether you're using rebase or
merge, it's just gonna be a pain.

102
00:05:25.262 --> 00:05:28.927
So there's not like a super special
strategy to get around that.

103
00:05:28.927 --> 00:05:33.136
By the way, so the reason why I personally
like the rebasing approach is that every

104
00:05:33.136 --> 00:05:35.645
now and
then I need to revert something, right?

105
00:05:35.645 --> 00:05:40.527
So if I am under really strict practice of
always moving my changes to the front with

106
00:05:40.527 --> 00:05:44.366
rebase, I'm always squashing
them down to a singular commit.

107
00:05:44.366 --> 00:05:48.174
If that one day does happen to come
by where you accidentally messed

108
00:05:48.174 --> 00:05:49.806
up production a little bit,

109
00:05:49.806 --> 00:05:54.642
a singular commit with no merge commits,
with none of that, is very easy to revert.

110
00:05:54.642 --> 00:05:57.918
But if you have six commits with
several merge commits in between,

111
00:05:57.918 --> 00:05:59.798
reverting is just more challenging.

112
00:05:59.798 --> 00:06:03.824
Cuz now you're gonna have to figure out
how to pull out all that information and

113
00:06:03.824 --> 00:06:05.600
make sure that it is now updating.

114
00:06:05.600 --> 00:06:07.134
Just a lot more, it's a huge pain.

115
00:06:07.134 --> 00:06:09.412
So this is why I choose this way.

116
00:06:09.412 --> 00:06:10.556
It's very intentional.

117
00:06:10.556 --> 00:06:14.038
I'm planning for failure as
opposed to planning for success,

118
00:06:14.038 --> 00:06:15.494
which is why I use rebase.

119
00:06:15.494 --> 00:06:18.975
By the way, if you like rebase and
you prefer to use it,

120
00:06:18.975 --> 00:06:21.561
you can actually just add it to a config.

121
00:06:21.561 --> 00:06:23.471
I actually don't have it set as a config.

122
00:06:23.471 --> 00:06:26.063
I always like to kinda manually,
I don't know,

123
00:06:26.063 --> 00:06:29.477
I like to manually do it,
kind of Boomer energy here, but you can

124
00:06:29.477 --> 00:06:33.860
just simply do git config add global pull
rebase true, and it will always do that.

125
00:06:33.860 --> 00:06:37.130
Don't do that now, cuz, well,
we're gonna do some merging and

126
00:06:37.130 --> 00:06:40.887
then some rebasing as well, so I just
want you to know that that's a thing.

127
00:06:40.887 --> 00:06:44.699
For now you can just do
git pull --rebase and

128
00:06:44.699 --> 00:06:49.582
it will pull it and
do a rebase as opposed to a merge.

129
00:06:49.582 --> 00:06:53.242
Yeah, look at that, I even warned
myself cuz I knew I'd goof it up.

130
00:06:53.242 --> 00:06:54.639
&gt;&gt; [LAUGH]
&gt;&gt; It's just so easy to do that.

