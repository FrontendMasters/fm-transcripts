WEBVTT

1
00:00:00.070 --> 00:00:01.950
Creating a repo,
it's pretty straightforward.

2
00:00:01.950 --> 00:00:04.473
Lot of people probably have
never actually created a repo,

3
00:00:04.473 --> 00:00:07.459
they've always just cloned from
somewhere and worked on something.

4
00:00:07.459 --> 00:00:10.754
So if you've never done personal projects,
you may have never created one.

5
00:00:10.754 --> 00:00:15.265
Or if you always create it first on,
say, GitHub, or GitLab or Bitbucket,

6
00:00:15.265 --> 00:00:17.810
then you'll probably clone down from it.

7
00:00:17.810 --> 00:00:21.356
Sorry, this is a weird phrase to
leave my mouth, Bitbucket [SOUND].

8
00:00:21.356 --> 00:00:24.538
So the very first step is git init.

9
00:00:24.538 --> 00:00:26.800
There's some British joke in there, right?

10
00:00:26.800 --> 00:00:29.627
I don't know what it is, but init,
right, isn't that a British joke?

11
00:00:29.627 --> 00:00:33.791
Anyways, use git init to initialize git.

12
00:00:33.791 --> 00:00:38.389
It will add a .git folder
inside the directory.

13
00:00:38.389 --> 00:00:41.216
And that's how you know
it's a great git repo.

14
00:00:41.216 --> 00:00:44.285
So first problem,
I want you to go somewhere and

15
00:00:44.285 --> 00:00:46.787
I want you to create your first repo.

16
00:00:46.787 --> 00:00:50.677
You can name it whatever you want,
I named this one my-first-git-repo.

17
00:00:50.677 --> 00:00:53.730
And by the way, for those that are like,
okay, I already know all this stuff,

18
00:00:53.730 --> 00:00:57.117
I wanna move on fast, trust me,
we're gonna go really deep really quickly.

19
00:00:57.117 --> 00:00:59.912
I just wanted to make sure we're all on
the same page with the exact same repo.

20
00:01:01.373 --> 00:01:04.923
So this is an accidentally important part.

21
00:01:04.923 --> 00:01:11.191
So I'm gonna go here and make sure
that I don't have anything in here.

22
00:01:13.403 --> 00:01:16.345
All right, perfect, and so I'm gonna go,

23
00:01:16.345 --> 00:01:20.250
mkdir my-first-git-repo,
my-first-git-repo.

24
00:01:20.250 --> 00:01:23.691
And I'm gonna go git,
that was weird, git init.

25
00:01:23.691 --> 00:01:24.497
There we go.

26
00:01:24.497 --> 00:01:28.331
And long as you have everything properly
set up, you should see this error message,

27
00:01:28.331 --> 00:01:31.517
which says, hey, by the way,
you don't have a default branch name,

28
00:01:31.517 --> 00:01:34.920
here's the default branch, all right,
yeah, the default branch name.

29
00:01:34.920 --> 00:01:38.088
If you wish to do something with it,
you can set your own config and

30
00:01:38.088 --> 00:01:40.399
it will magically work for
you from here on out.

31
00:01:40.399 --> 00:01:44.107
So everyone should get this error message
if you have the same setup that I do.

32
00:01:47.082 --> 00:01:50.959
All right, solution,
you can see all those things, fantastic.

33
00:01:54.142 --> 00:01:58.173
So every single repo comes
with this .git folder.

34
00:01:58.173 --> 00:02:01.312
This is where all the data
structures are kept.

35
00:02:01.312 --> 00:02:05.539
Now, it's kinda weird because a lot of
people probably think of data structures

36
00:02:05.539 --> 00:02:08.972
as things that run inside of a program,
a tree, a [LAUGH] hash map.

37
00:02:08.972 --> 00:02:13.730
But you can also keep them just in files,
right?

38
00:02:13.730 --> 00:02:15.160
We got a question?

39
00:02:15.160 --> 00:02:19.954
&gt;&gt; If you accidentally initialize a Git
repo too high, like at a parent folder,

40
00:02:19.954 --> 00:02:22.366
what's the best way to revert this?

41
00:02:22.366 --> 00:02:26.626
&gt;&gt; The best way to revert that,
delete the git folder, right?

42
00:02:26.626 --> 00:02:30.447
Once the .git folder has been deleted,
the repo does not exist.

43
00:02:30.447 --> 00:02:34.830
All of git's history is
inside this .git folder.

44
00:02:34.830 --> 00:02:38.298
So you delete that,
you don't have a repo anymore.

45
00:02:38.298 --> 00:02:43.470
All right, problem, validate you
have a new git repo by listing out

46
00:02:43.470 --> 00:02:49.840
all the files inside the .git folder, or
directory, whatever one you wanna use.

47
00:02:49.840 --> 00:02:54.638
In fact, in one sentence just earlier,
I said folder in your directory and I just

48
00:02:54.638 --> 00:02:59.367
realized how many people are just shook
by the fact that I'm using those terms,

49
00:02:59.367 --> 00:03:00.299
I just love it.

50
00:03:02.080 --> 00:03:04.218
All right, so if you don't know,
you can use find.

51
00:03:04.218 --> 00:03:07.046
So if I go find.git,
it'll list out everything.

52
00:03:07.046 --> 00:03:08.794
And you'll see a whole
bunch of stuff in here.

53
00:03:08.794 --> 00:03:11.591
You'll see a bunch of
informational tracking items, and

54
00:03:11.591 --> 00:03:14.455
then you'll also see a bunch
of sample scripts right here.

55
00:03:14.455 --> 00:03:15.979
I'm not gonna talk about hooks today.

56
00:03:15.979 --> 00:03:17.343
I think hooks are evil.

57
00:03:17.343 --> 00:03:18.903
Don't use hooks,
that's my personal opinion.

58
00:03:18.903 --> 00:03:19.949
We're just not even gonna cover them.

59
00:03:19.949 --> 00:03:22.176
If you wanna learn about hooks,
go read right here,

60
00:03:22.176 --> 00:03:25.383
you have a bunch of sample stuff,
they'll just make your life miserable.

61
00:03:25.383 --> 00:03:27.432
Personal opinion, don't use hooks, okay?

62
00:03:27.432 --> 00:03:28.894
That's what your CI is for.

63
00:03:28.894 --> 00:03:32.262
That's your responsibility to test
your own code, don't be ridiculous.

64
00:03:32.262 --> 00:03:38.095
All right, People have really strong
reactions when it comes to hooks,

65
00:03:38.095 --> 00:03:40.354
either they absolutely love them or
they hate them.

66
00:03:40.354 --> 00:03:41.981
I'm on the hating camp.

67
00:03:41.981 --> 00:03:45.760
You may not like this, but
this is what peak empty repo looks like,

68
00:03:45.760 --> 00:03:48.273
just a git folder with
a bunch of files in it.

69
00:03:48.273 --> 00:03:52.414
Again, I always thought
this was mind-blowing to me

70
00:03:52.414 --> 00:03:55.920
the fact that git is in
some sense stateless.

71
00:03:55.920 --> 00:03:58.916
Like when you run git,
it has to go, okay, where am I?

72
00:03:58.916 --> 00:04:00.598
It has to find the .git folder.

73
00:04:00.598 --> 00:04:05.411
It has to look for that stuff, and then it
can tell exactly what's happened inside

74
00:04:05.411 --> 00:04:08.079
this directory by looking
in the git folder.

75
00:04:08.079 --> 00:04:10.707
And so
that was kinda like a neat revelation to

76
00:04:10.707 --> 00:04:12.928
me that it is its own entity like that.

