WEBVTT

1
00:00:00.008 --> 00:00:01.531
&gt;&gt; All right?

2
00:00:01.531 --> 00:00:03.520
So sometimes.

3
00:00:03.520 --> 00:00:08.002
We have a decision we have to face as
programmers, which is to push forward or

4
00:00:08.002 --> 00:00:08.850
to roll back.

5
00:00:08.850 --> 00:00:11.570
I think we've all been there.

6
00:00:11.570 --> 00:00:13.060
Sometimes you got to revert, right?

7
00:00:13.060 --> 00:00:13.910
You made a change.

8
00:00:13.910 --> 00:00:15.060
It was a failure.

9
00:00:15.060 --> 00:00:16.400
Nobody's happy about it.

10
00:00:16.400 --> 00:00:17.910
Nobody likes you.

11
00:00:17.910 --> 00:00:19.330
And now you need to revert it.

12
00:00:21.101 --> 00:00:24.469
So, by the way, if you're confused about
the difference between Revert and Restore,

13
00:00:24.469 --> 00:00:25.981
Restore, just go read about Restore.

14
00:00:25.981 --> 00:00:30.571
Restore effectively just changes any
change into what the previous state was.

15
00:00:30.571 --> 00:00:35.347
Whereas Revert is actually making like the
revert is effectively like the anti-matter

16
00:00:35.347 --> 00:00:36.071
to matter.

17
00:00:36.071 --> 00:00:41.723
It is gonna make an inverted change as
a commit, and then you commit that.

18
00:00:41.723 --> 00:00:45.233
So it actually changes what
you've done invertedly.

19
00:00:45.233 --> 00:00:46.023
We'll see in just a moment.

20
00:00:46.023 --> 00:00:46.773
It's very fantastic.

21
00:00:46.773 --> 00:00:50.056
I'm not sure how else to describe it other
than it just, it did what you did, but

22
00:00:50.056 --> 00:00:51.073
backwards, right?

23
00:00:51.073 --> 00:00:53.703
All right, so let's look at it.

24
00:00:53.703 --> 00:00:54.843
So reverting is simple.

25
00:00:54.843 --> 00:00:57.293
You just need to provide a commit, right?

26
00:00:57.293 --> 00:01:01.498
I just need to revert something and
then it will just, it will work.

27
00:01:01.498 --> 00:01:04.403
All right, so let's go to hello-git and

28
00:01:04.403 --> 00:01:07.558
let's revert the commit
with log message E.

29
00:01:09.138 --> 00:01:13.728
Before removing it, check the contents
of the commit via log with -p.

30
00:01:13.728 --> 00:01:16.726
So, does anyone remember how
to search the friendly logs?

31
00:01:20.129 --> 00:01:21.475
Dash dash grep.

32
00:01:21.475 --> 00:01:22.195
That's right.

33
00:01:22.195 --> 00:01:23.325
Great job, everybody.

34
00:01:23.325 --> 00:01:25.045
I can't believe you guys
all said that out loud.

35
00:01:25.045 --> 00:01:30.121
So, I'm gonna go to hello git,
and I'm gonna go git log grep e,

36
00:01:30.121 --> 00:01:34.995
and then I'll do a little dash
p to print out the contents.

37
00:01:34.995 --> 00:01:36.075
So look at this.

38
00:01:36.075 --> 00:01:39.085
Right here, we made this earlier today,
we have a little plus e right here.

39
00:01:39.085 --> 00:01:40.115
Absolutely wonderful.

40
00:01:40.115 --> 00:01:43.146
And our commit message was Of course and
II as well.

41
00:01:43.146 --> 00:01:44.456
Awesome, everyone's happy.

42
00:01:44.456 --> 00:01:45.526
I'm happy you're happy.

43
00:01:45.526 --> 00:01:48.896
Dustin is kind of frowning,
but most of us are happy here.

44
00:01:48.896 --> 00:01:50.496
Alright, so now we need to revert this.

45
00:01:50.496 --> 00:01:53.812
So I'm actually going to take this, I'm
gonna actually take this guy right here

46
00:01:53.812 --> 00:01:56.781
the commit shop, and I want to be able
to take it and I'm going to use it for

47
00:01:56.781 --> 00:01:59.386
reverting, so
I'm gonna copy the commit shop.

48
00:01:59.386 --> 00:02:01.730
And I'm going to make sure that that's
what we're supposed to do at this point,

49
00:02:01.730 --> 00:02:03.119
which we're not supposed
to do this quite yet.

50
00:02:03.119 --> 00:02:04.599
So we're gonna go through all this one.

51
00:02:04.599 --> 00:02:05.229
Fantastic.

52
00:02:05.229 --> 00:02:06.829
You can manually look through it.

53
00:02:06.829 --> 00:02:08.289
Now let's revert it.

54
00:02:08.289 --> 00:02:12.579
So I'm going to go get revert and
then the hash that you have.

55
00:02:12.579 --> 00:02:15.498
So get revert hash.

56
00:02:20.511 --> 00:02:21.580
Conflicts.

57
00:02:21.580 --> 00:02:27.670
It's just like, I hate them and
can never seem to get away from them.

58
00:02:27.670 --> 00:02:29.310
I don't know what is wrong with my life.

59
00:02:29.310 --> 00:02:30.070
But anyways, here we go.

60
00:02:30.070 --> 00:02:31.388
We've conflicted.

61
00:02:31.388 --> 00:02:33.908
No, pre planned.

62
00:02:33.908 --> 00:02:37.420
You can get conflicts in reverting, right?

63
00:02:37.420 --> 00:02:40.668
Like, isn't that just like, isn't that not
only are you getting kicked in the shin

64
00:02:40.668 --> 00:02:42.702
for the fact that That
you just made a mess up.

65
00:02:42.702 --> 00:02:44.642
You get sometimes conflicted as well.

66
00:02:44.642 --> 00:02:47.722
And it's just like this is the worst
possible scenario of all time, right?

67
00:02:47.722 --> 00:02:49.262
It's emotionally bruising.

68
00:02:49.262 --> 00:02:51.102
So we gotta do something about this.

69
00:02:51.102 --> 00:02:52.122
So what do we do?

70
00:02:52.122 --> 00:02:55.922
Well, we go again,
get status again, modified both.

71
00:02:55.922 --> 00:02:57.062
This looks very, very normal.

72
00:02:57.062 --> 00:03:01.954
You'll also notice stuff here,
we do a get revert skip or abort.

73
00:03:01.954 --> 00:03:06.044
So, let's go to README, and this one's
a little bit more confusing, right?

74
00:03:06.044 --> 00:03:10.084
Like, yeah, this is our change, and okay,
this is what we gotta do, apparently.

75
00:03:10.084 --> 00:03:13.258
Like, it somehow has both E and
downstream in here,

76
00:03:13.258 --> 00:03:16.154
when it probably shouldn't
have both of them.

77
00:03:16.154 --> 00:03:17.224
So, what do we gotta do here?

78
00:03:17.224 --> 00:03:21.303
Well, let's delete that, right, delete the
conflicts, and then I only wanna delete E.

79
00:03:21.303 --> 00:03:22.453
E, right?

80
00:03:22.453 --> 00:03:26.113
Because that's what I was trying
to remove was E, all right?

81
00:03:26.113 --> 00:03:30.492
So I'll save it, and then if you go
git status, git add, git status,

82
00:03:30.492 --> 00:03:34.592
you'll see right here that we need
to now go git revert continue.

83
00:03:39.280 --> 00:03:40.143
Awesome.

84
00:03:40.143 --> 00:03:42.352
Now it gives us a beautiful,
Commit message.

85
00:03:42.352 --> 00:03:44.872
Revert E.
This reverts this specific commit.

86
00:03:44.872 --> 00:03:48.202
So that we have this nice log, you can see
that this this action was intentional.

87
00:03:48.202 --> 00:03:51.538
By the way, this is the greatest argument
for why you want to rebase squash,

88
00:03:51.538 --> 00:03:53.172
because there's no merge commits.

89
00:03:53.172 --> 00:03:55.526
There's not all this history
that you've just created and

90
00:03:55.526 --> 00:03:57.562
now we need to remove this change.

91
00:03:57.562 --> 00:03:58.642
That sucks.

92
00:03:58.642 --> 00:04:01.849
Whereas if you have a nice squashed
rebase no merge can commit history,

93
00:04:01.849 --> 00:04:03.832
removing the change is very, very simple.

94
00:04:03.832 --> 00:04:06.102
There's just one step, which is
just the change you want to revert.

95
00:04:06.102 --> 00:04:09.122
I'm gonna take this,
I'm gonna save it, and there we go.

96
00:04:09.122 --> 00:04:11.682
Get status, and
you'll see we're on a clean thing.

97
00:04:11.682 --> 00:04:13.482
Get log one line.

98
00:04:13.482 --> 00:04:15.492
You'll see right here, revert E.

99
00:04:15.492 --> 00:04:17.082
If we put a little, I say revert.

100
00:04:17.082 --> 00:04:17.712
Is that even correct?

101
00:04:17.712 --> 00:04:20.758
Is it revert or is it revert,
if you're talking about it in like the,

102
00:04:20.758 --> 00:04:21.729
that Kind of sense.

103
00:04:21.729 --> 00:04:22.659
I don't even know.

104
00:04:22.659 --> 00:04:23.879
It's a great question, me.

105
00:04:23.879 --> 00:04:27.019
You can see right here,
there's E, we've reverted it.

106
00:04:27.019 --> 00:04:30.259
The revert is literally the inverse
commit, as you can see.

107
00:04:30.259 --> 00:04:31.770
It's not that it removes
it from our history,

108
00:04:31.770 --> 00:04:33.839
because if it removed it from our history,
what would happen?

109
00:04:35.219 --> 00:04:39.239
Every branch would now have invalid
state and everything would be horrible.

110
00:04:39.239 --> 00:04:44.870
So a revert, revert, a revert Is when you
actually put the antimatter at the front.

111
00:04:44.870 --> 00:04:45.810
It's how I like to think of it.

112
00:04:45.810 --> 00:04:48.560
You just put the offset
command in front and merge it.

113
00:04:48.560 --> 00:04:50.670
There we go.
We've got that offset command going.

114
00:04:50.670 --> 00:04:51.700
Absolutely fantastic.

115
00:04:52.710 --> 00:04:54.202
Yeah, we already did all of this.

116
00:04:54.202 --> 00:04:56.000
All right, hold on.

117
00:04:57.040 --> 00:05:00.300
All right, that's it.

118
00:05:00.300 --> 00:05:01.875
We'll click on Revert.

119
00:05:01.875 --> 00:05:03.455
You rarely need to use it.

120
00:05:03.455 --> 00:05:03.955
It's about it.

