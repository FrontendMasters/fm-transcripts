WEBVTT

1
00:00:00.370 --> 00:00:03.530
All right, so
now we're gonna go from merge to rebase.

2
00:00:03.530 --> 00:00:05.155
I know everyone's excited about rebase.

3
00:00:05.155 --> 00:00:10.094
The thing about rebase is I am
completely convinced people don't

4
00:00:10.094 --> 00:00:14.848
like rebase cuz, a,
they heard on Twitter that it's bad, b,

5
00:00:14.848 --> 00:00:18.744
they used rebase that one time,
screwed it all up.

6
00:00:18.744 --> 00:00:24.513
And now they hate it and it's ruined
their life, therefore rebase is bad.

7
00:00:24.513 --> 00:00:25.970
It's not bad, it's actually fantastic.

8
00:00:25.970 --> 00:00:31.088
Rebase is just yet another tool in your
get bad belt to be able to manipulate and

9
00:00:31.088 --> 00:00:32.997
use your repo effectively.

10
00:00:32.997 --> 00:00:35.550
There's actually a really good
reason why you should use rebase.

11
00:00:35.550 --> 00:00:37.060
We'll kind of get into
it a little bit more.

12
00:00:37.060 --> 00:00:39.420
So this is our current setup right now.

13
00:00:39.420 --> 00:00:44.166
We have foo, which is B...C, and we have
trunk which is all the way up to Y at

14
00:00:44.166 --> 00:00:48.857
this point cuz we have merged on bar,
so this should be your setup right now.

15
00:00:48.857 --> 00:00:54.001
Now we can demonstrate the power of
rebase by updating where foo points to.

16
00:00:54.001 --> 00:00:58.291
We're gonna create this
graph by using rebase.

17
00:00:58.291 --> 00:01:07.109
This is what rebase does, is it allows you
to update underneath your set of changes.

18
00:01:07.109 --> 00:01:12.355
And this is very important cuz it is
rewriting history in some sense, but

19
00:01:12.355 --> 00:01:18.045
it's allowing you to have what is
currently the reality, then your changes.

20
00:01:18.045 --> 00:01:21.339
As opposed to your changes that
are tested against some previous

21
00:01:21.339 --> 00:01:23.057
reality that's no longer true.

22
00:01:23.057 --> 00:01:26.663
You can now have it properly inline and
then to be able to find out did you

23
00:01:26.663 --> 00:01:29.556
actually write something that's good or
does it suck?

24
00:01:31.306 --> 00:01:36.087
All right, so, and
this also means when we decide to merge

25
00:01:36.087 --> 00:01:40.778
foo onto trunk,
we can do a fast forward merge.

26
00:01:40.778 --> 00:01:43.367
Cuz again, our best common ancestor,

27
00:01:43.367 --> 00:01:46.901
our merge base is the tip of
trunk now that we rebased.

28
00:01:46.901 --> 00:01:49.992
And this is typically why
people really like rebase,

29
00:01:49.992 --> 00:01:52.062
is that it allows no merge commits.

30
00:01:52.062 --> 00:01:55.349
And there's a good reason why you
don't want merge commits, and

31
00:01:55.349 --> 00:01:57.035
we'll cover a little bit later.

32
00:01:57.035 --> 00:01:59.658
All right, so
basic steps of what rebase does.

33
00:01:59.658 --> 00:02:03.773
First thing rebase does, is that you
will first go git rebase &lt;targetbranch&gt;.

34
00:02:06.553 --> 00:02:09.836
Second, what it's gonna do is it's gonna
actually check out the latest commit

35
00:02:09.836 --> 00:02:11.423
on the &lt;targetbranch&gt;.

36
00:02:11.423 --> 00:02:13.949
So you're no longer on your branch
you actually switch branches to

37
00:02:13.949 --> 00:02:15.683
the &lt;targetbranch&gt;.

38
00:02:15.683 --> 00:02:20.745
Then it's gonna take the branch that
you were on the &lt;currentbranch&gt; and

39
00:02:20.745 --> 00:02:25.262
play the commits one at a time in
order onto the &lt;targetbranch&gt;.

40
00:02:25.262 --> 00:02:29.092
Then it'll go back check out
your &lt;currentbranch&gt; and

41
00:02:29.092 --> 00:02:33.092
update &lt;currentbranch&gt; to
point to that latest commit.

42
00:02:34.502 --> 00:02:38.511
So therefore it actually just moves
your commit forward in time and

43
00:02:38.511 --> 00:02:39.880
plays it one at a time.

44
00:02:39.880 --> 00:02:42.686
That's how you got to think about merge,
it's a little bit or a rebase,

45
00:02:42.686 --> 00:02:44.077
it's just a little bit different.

46
00:02:44.077 --> 00:02:49.608
But it's very important to understand
that cuz down the line, rebase is

47
00:02:49.608 --> 00:02:55.514
gonna cause a lot of problems if you
don't know about that specific feature.

48
00:02:55.514 --> 00:02:59.354
All right,
I want you to rebase foo with trunk.

49
00:02:59.354 --> 00:03:02.491
Create a separate branch,
create called foo-rebase-trunk.

50
00:03:02.491 --> 00:03:09.514
And so you're gonna literally do
a git rebase trunk on this branch.

51
00:03:09.514 --> 00:03:13.304
So I'll do it myself too,
I'll checkout foo and

52
00:03:13.304 --> 00:03:18.768
you can do a git log if you're curious,
right, there you go A, B, C.

53
00:03:18.768 --> 00:03:25.244
And so then I can do one on trunk A, D,
E, X, Y, and then I can go git rebase,

54
00:03:25.244 --> 00:03:30.364
or get checkout almost messed that one up,
there we go.

55
00:03:30.364 --> 00:03:34.464
We'll create the new branch,
foo-rebase-trunk, and

56
00:03:34.464 --> 00:03:36.728
I'm gonna go get rebase trunk.

57
00:03:39.039 --> 00:03:41.029
All right, we've rebased.

58
00:03:41.029 --> 00:03:41.796
So what happened?

59
00:03:41.796 --> 00:03:47.173
Well, let's look at the log,
git log --oneline,

60
00:03:47.173 --> 00:03:50.650
look at what we see, we see trunk.

61
00:03:50.650 --> 00:03:53.457
But we also see our two commits
that differed from trunk.

62
00:03:53.457 --> 00:03:57.584
Now after Y,
we now have history that is linear.

63
00:03:57.584 --> 00:04:03.485
So now you see that trunk which contained
bar as our last merge is now the base for

64
00:04:03.485 --> 00:04:05.282
foo-rebase-trunk.

65
00:04:05.282 --> 00:04:09.244
In other words, foo is no longer diverging
from trunk, it's now linearly walking

66
00:04:09.244 --> 00:04:12.762
the history forward, which means we
can fast forward merge if we want to.

67
00:04:14.472 --> 00:04:15.535
So there are some pros.

68
00:04:15.535 --> 00:04:19.072
Obviously you get a clean history with no
merge commits as well as if you use get

69
00:04:19.072 --> 00:04:20.877
logged to kind of look through things.

70
00:04:20.877 --> 00:04:23.225
If you wanna walk
backwards through changes,

71
00:04:23.225 --> 00:04:26.910
there's just significantly less kind
of commits to have to go through.

72
00:04:26.910 --> 00:04:29.373
The cons obviously,
are that it alters branch history.

73
00:04:29.373 --> 00:04:31.523
And when you alter branch history,

74
00:04:31.523 --> 00:04:35.689
if you have the same branch on
another repo, you then have a problem.

75
00:04:35.689 --> 00:04:39.194
Because you have two branches, named the
same thing with two different histories.

76
00:04:39.194 --> 00:04:43.445
And so this is typically where you see
that git push force cuz you want to

77
00:04:43.445 --> 00:04:46.904
forcefully tell the other repo,
I know what foo has, and

78
00:04:46.904 --> 00:04:51.757
my version of foo is more correct than
yours, so you need to update everything.

79
00:04:51.757 --> 00:04:55.942
All right, some cautionary word, never
change the history of a public branch.

80
00:04:55.942 --> 00:04:59.478
I believe Mark over there, Mr. CEO,
actually has done that once before and

81
00:04:59.478 --> 00:05:02.363
it's a major pain, it's a super pain,
don't ever do that.

82
00:05:02.363 --> 00:05:06.468
So typically, what you'll see is
always merge on public branches,

83
00:05:06.468 --> 00:05:08.249
rebase on private branches.

84
00:05:08.249 --> 00:05:11.676
So you have some changes you wanna make
sure they actually work with the latest

85
00:05:11.676 --> 00:05:13.653
part of whatever you're working on.

86
00:05:13.653 --> 00:05:17.552
You can then rebase it forward, run your
tests, run whatever, everything works.

87
00:05:17.552 --> 00:05:21.624
If you have a conflict Grantham resolve it
then that way you have your private branch

88
00:05:21.624 --> 00:05:25.632
being altered in history, but
your public branch never changes history.

89
00:05:25.632 --> 00:05:27.910
The moment you do that,
it breaks everybody.

90
00:05:27.910 --> 00:05:30.774
Everybody breaks the moment
you change public history.

91
00:05:30.774 --> 00:05:33.189
So don't ever do that for any reason,

92
00:05:33.189 --> 00:05:38.037
unless you have a really good reason
which, again, I heard one yesterday.

93
00:05:38.037 --> 00:05:39.651
Still not sure if it's real.

94
00:05:39.651 --> 00:05:41.280
&gt;&gt; Horror stories-
&gt;&gt; Horror stories.

95
00:05:41.280 --> 00:05:44.975
&gt;&gt; I've totally broken main,
I've broken RC,

96
00:05:44.975 --> 00:05:46.657
I've broken-
&gt;&gt; Yeah.

97
00:05:46.657 --> 00:05:51.272
&gt;&gt; The CTO basically just has to
clean up my mess constantly, and

98
00:05:51.272 --> 00:05:53.949
I'm in there [LAUGH] so classic CEO.

99
00:05:53.949 --> 00:05:54.713
Yeah, classic.

100
00:05:54.713 --> 00:05:56.453
&gt;&gt; Yeah, there's a lot more, but

101
00:05:56.453 --> 00:06:00.195
we need some more foundational
knowledge before we go over it.

102
00:06:00.195 --> 00:06:04.993
So we kind of have a nice little base here
now you know branches, merging, rebase.

103
00:06:04.993 --> 00:06:07.775
You kind of get how they work,
you understand how commits work.

104
00:06:07.775 --> 00:06:11.957
You actually understand that it is
the storage point of the entire repo per

105
00:06:11.957 --> 00:06:16.014
commit, but it's efficiently stored,
so it's not a waste of space.

106
00:06:16.014 --> 00:06:20.071
This is also why whenever you're
downloading a git repo that has a long

107
00:06:20.071 --> 00:06:21.738
history, it takes a while.

108
00:06:21.738 --> 00:06:24.806
Cuz it's literally downloading
every single change possible,

109
00:06:24.806 --> 00:06:27.905
cuz it needs to be able to
reconstruct the repo at any one time.

110
00:06:27.905 --> 00:06:30.737
That's also why if you do a git clone and
use like depth one,

111
00:06:30.737 --> 00:06:32.275
I believe is the proper option.

112
00:06:32.275 --> 00:06:35.468
It will actually just come down
with only the last the last commit,

113
00:06:35.468 --> 00:06:37.435
which will contain the entire repo.

114
00:06:37.435 --> 00:06:39.347
That's how you get that
efficient checkout.

