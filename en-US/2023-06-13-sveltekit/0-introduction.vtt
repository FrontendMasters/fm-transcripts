WEBVTT

1
00:00:00.000 --> 00:00:03.591
Hi everyone and
welcome to this SvelteKit workshop.

2
00:00:03.591 --> 00:00:06.383
This is part of a two-part course.

3
00:00:06.383 --> 00:00:08.951
The other session introduced Svelte and
today we're going

4
00:00:08.951 --> 00:00:12.604
to be learning about SvelteKit which is
an application framework that uses Svelte.

5
00:00:12.604 --> 00:00:17.109
My name is Rich Harris, I am the creator
of Svelte and today we're going to

6
00:00:17.109 --> 00:00:21.268
be learning how to build full stack
applications using SvelteKit.

7
00:00:21.268 --> 00:00:25.291
So if you're brand new to Svelte
then I recommend doing the Svelte

8
00:00:25.291 --> 00:00:28.816
workshop before embarking
on this Sveltekit workshop.

9
00:00:28.816 --> 00:00:31.208
But if you're already familiar with
Svelte, then it's totally fine.

10
00:00:31.208 --> 00:00:32.182
It's not a prerequisite.

11
00:00:32.182 --> 00:00:34.753
You can dive straight into
learning about spell kit.

12
00:00:34.753 --> 00:00:39.515
And we're gonna be doing that today using
learn.svelte.dev which is our interactive

13
00:00:39.515 --> 00:00:40.680
tutorial platform.

14
00:00:40.680 --> 00:00:44.591
And the first part of the session today,
we're gonna go through part three of

15
00:00:44.591 --> 00:00:47.495
the tutorial,
which is the introduction to SvelteKit.

16
00:00:47.495 --> 00:00:51.045
And then after that, we're going to learn
some advanced SvelteKit techniques.

17
00:00:51.045 --> 00:00:55.761
And then finally,
we're gonna build a full-stack application

18
00:00:55.761 --> 00:00:59.284
using authentication,
APIs, and a database.

19
00:00:59.284 --> 00:01:02.415
So let's start by learning
about what SvelteKit is.

20
00:01:02.415 --> 00:01:06.781
Svelte is a component framework, you use
it to build little chunks of your user

21
00:01:06.781 --> 00:01:09.372
interface declaratively out of components.

22
00:01:09.372 --> 00:01:13.812
Sveltekit is an application framework,
sometimes called a meta framework,

23
00:01:13.812 --> 00:01:16.502
and it solves the rest of
the problem of building

24
00:01:16.502 --> 00:01:19.341
an application that you
can deploy to your users.

25
00:01:19.341 --> 00:01:24.318
It has features like routing, server-side
rendering, data fetching, service workers,

26
00:01:24.318 --> 00:01:29.043
TypeScript integration, pre-rendering,
single-page apps, library packaging,

27
00:01:29.043 --> 00:01:33.714
optimized production builds, deploying to
different hosting providers, and so on.

28
00:01:33.714 --> 00:01:34.851
Right, there's a lot in there.

29
00:01:34.851 --> 00:01:38.077
It might seem a little bit intimidating,
but don't worry,

30
00:01:38.077 --> 00:01:41.566
we're gonna go through it and
it'll all make sense before long.

31
00:01:41.566 --> 00:01:45.604
SvelteKit apps are server
rendered by default.

32
00:01:45.604 --> 00:01:48.886
So like a traditional multi-page app,
or MPA,

33
00:01:48.886 --> 00:01:54.255
you get the excellent first load and
SEO characteristics of a traditional app.

34
00:01:54.255 --> 00:01:57.495
But then we transitioned
to client side navigation,

35
00:01:57.495 --> 00:02:02.391
like a modern single page app, so that
instead of reloading everything when your

36
00:02:02.391 --> 00:02:06.792
users navigate from one page to another,
everything loads instantly.

37
00:02:06.792 --> 00:02:09.435
Still get apps can run
anywhere that JavaScript runs.

38
00:02:09.435 --> 00:02:11.900
They'll run on node that run
on Dino that run and burn.

39
00:02:11.900 --> 00:02:15.128
They'll run on edge functions and
serverless functions.

40
00:02:15.128 --> 00:02:18.696
And as we'll see, your users might not
need to run any JavaScript at all.

41
00:02:18.696 --> 00:02:21.705
You can also deploy your
applications as fully static,

42
00:02:21.705 --> 00:02:24.272
pre rendered apps where
that's appropriate.

43
00:02:24.272 --> 00:02:27.701
So let's talk about the project
structure of a Sveltekit app.

44
00:02:27.701 --> 00:02:29.850
When you create a new Sveltekit app,

45
00:02:29.850 --> 00:02:33.743
you'll be left with something like
what you see on the right here.

46
00:02:33.743 --> 00:02:36.544
Go through some of these files in turn.

47
00:02:36.544 --> 00:02:41.139
Package.json is something that will be
familiar to you if you've used node

48
00:02:41.139 --> 00:02:41.726
before.

49
00:02:41.726 --> 00:02:47.043
it list all of the project's dependencies,
including Svelte an Svelteltkit and

50
00:02:47.043 --> 00:02:50.365
a variety of scripts for
interacting with the CLI.

51
00:02:50.365 --> 00:02:55.117
So right now we're running npm run dev in
the iframe at the bottom of the screen

52
00:02:55.117 --> 00:02:56.229
that you can see.

53
00:02:56.229 --> 00:03:00.387
You'll notice that in the package.json
we are specifying type module.

54
00:03:00.387 --> 00:03:04.923
This makes the project a modern
ESM project as opposed to a legacy

55
00:03:04.923 --> 00:03:09.627
CommonJS project, which means that
all of the JavaScript files in

56
00:03:09.627 --> 00:03:13.331
your app are modern ESM
format instead of CommonJS.

57
00:03:13.331 --> 00:03:16.095
Next file is the svelteconfig.js.

58
00:03:16.095 --> 00:03:18.705
This contains your project configuration.

59
00:03:18.705 --> 00:03:22.085
Don't really need to worry about this for
the purpose of this tutorial but

60
00:03:22.085 --> 00:03:25.956
if you're curious then you can learn more
about the what goes into the configuration

61
00:03:25.956 --> 00:03:31.558
file on the reference documentation
Next up is the vite config.

62
00:03:31.558 --> 00:03:36.442
So Svelte uses vite which is a development
server and build tool that allows you

63
00:03:36.442 --> 00:03:40.956
to build apps very fast using all of
the modern techniques like hot module

64
00:03:40.956 --> 00:03:45.101
reloading, it has out-of-the-box
support for TypeScript and

65
00:03:45.101 --> 00:03:50.147
all of those other things and SvelteKit
by extension gets all of those benefits.

66
00:03:50.147 --> 00:03:55.111
The most important part of our viteconfig
is this line here where we're invoking

67
00:03:55.111 --> 00:03:56.575
the Sveltekit plugin.

68
00:03:56.575 --> 00:03:58.038
The bit below you can ignore.

69
00:03:58.038 --> 00:04:01.420
That's just something that
we need within the tutorial.

70
00:04:01.420 --> 00:04:05.611
The source directory is where
your app source code goes.

71
00:04:05.611 --> 00:04:07.025
We have an app.html.

72
00:04:07.025 --> 00:04:10.357
This defines the shape of
the response that you get when you

73
00:04:10.357 --> 00:04:11.853
visit the Sveltekit app.

74
00:04:11.853 --> 00:04:15.538
In this tutorial we've got a bunch of
inline styles that we're going to be using

75
00:04:15.538 --> 00:04:17.362
various stages through the tutorial.

76
00:04:17.362 --> 00:04:21.662
But the interesting parts
are this Sveltekit head section,

77
00:04:21.662 --> 00:04:25.129
and all the way at the bottom,
a Sveltekit body.

78
00:04:25.129 --> 00:04:29.021
These are the bits that Sveltekit
populates with the HTML and

79
00:04:29.021 --> 00:04:33.537
the meta content that relates to
the page that the user has requested.

80
00:04:33.537 --> 00:04:37.923
And then finally,
The static directory contains any assets

81
00:04:37.923 --> 00:04:42.225
like a favicon that are included
when your app is deployed.

