WEBVTT

1
00:00:00.260 --> 00:00:03.850
Hi everyone, and
welcome to this SvelteKit workshop.

2
00:00:03.850 --> 00:00:06.623
This is part of a two part course.

3
00:00:06.623 --> 00:00:09.883
The other session introduced Svelte and
today we're gonna be learning about

4
00:00:09.883 --> 00:00:12.700
SvelteKit, which is an application
framework that uses Svelte.

5
00:00:12.700 --> 00:00:15.440
My name is Rich Harris,
I am the creator of Svelte.

6
00:00:15.440 --> 00:00:16.110
And today,

7
00:00:16.110 --> 00:00:21.440
we're going to be learning how to build
full stack applications using SvelteKit.

8
00:00:21.440 --> 00:00:26.382
So if you're brand new to Svelte then I
recommend doing the Svelte workshop before

9
00:00:26.382 --> 00:00:29.090
embarking on this SvelteKit workshop.

10
00:00:29.090 --> 00:00:31.855
But if you're already familiar with
Svelte, then it's totally fine,

11
00:00:31.855 --> 00:00:35.004
it's not a prerequisite, you can dive
straight into learning about SvelteKit.

12
00:00:35.004 --> 00:00:37.929
And we're gonna be doing that
today using learn.svelte.dev,

13
00:00:37.929 --> 00:00:40.010
which is our interactive
tutorial platform.

14
00:00:40.010 --> 00:00:44.154
And the first part of the session today,
we're gonna go through part three of

15
00:00:44.154 --> 00:00:47.810
the tutorial,
which is the introduction to SvelteKit.

16
00:00:47.810 --> 00:00:51.270
Then after that, we're gonna learn
some advanced SvelteKit techniques.

17
00:00:51.270 --> 00:00:55.390
Then finally, we're gonna build
a full-stack application using

18
00:00:55.390 --> 00:00:58.000
authentication, APIs, and a database.

19
00:00:59.570 --> 00:01:02.570
So let's start by learning
about what SvelteKit is.

20
00:01:02.570 --> 00:01:06.812
Svelte is a component framework, you use
it to build little chunks of your user

21
00:01:06.812 --> 00:01:09.332
interface declaratively out of components.

22
00:01:09.332 --> 00:01:13.481
SvelteKit is an application framework
sometimes called a meta framework,

23
00:01:13.481 --> 00:01:17.561
and it solves the rest of the problem
of building an application that you can

24
00:01:17.561 --> 00:01:19.590
deploy to your users.

25
00:01:19.590 --> 00:01:24.571
It has features like routing, server-side
rendering, data fetching, service workers,

26
00:01:24.571 --> 00:01:29.301
TypeScript integration, pre-rendering,
single-page apps, library packaging,

27
00:01:29.301 --> 00:01:33.984
optimized production builds, deploying to
different hosting providers, and so on.

28
00:01:33.984 --> 00:01:36.917
Right, there's a lot in there, it might
seem a little bit intimidating, but

29
00:01:36.917 --> 00:01:39.950
don't worry, we're gonna go through,
and it'll all make sense before long.

30
00:01:41.840 --> 00:01:45.870
SvelteKit apps are server
rendered by default.

31
00:01:45.870 --> 00:01:49.120
So like a traditional multi-page app,
or MPA,

32
00:01:49.120 --> 00:01:54.447
you get the excellent first load and
SEO characteristics of a traditional app.

33
00:01:54.447 --> 00:01:57.703
But then we transition to
client side navigation,

34
00:01:57.703 --> 00:02:02.548
like a modern single page app, so
that instead of reloading everything when

35
00:02:02.548 --> 00:02:07.490
your users navigate from one page to
another, everything loads instantly.

36
00:02:07.490 --> 00:02:09.590
SvelteKit apps can run
anywhere that JavaScript runs.

37
00:02:09.590 --> 00:02:12.319
They'll run on load,
they'll run on Dino, they'll run on bun,

38
00:02:12.319 --> 00:02:15.380
they'll run on edge functions,
and serverless functions.

39
00:02:15.380 --> 00:02:18.860
And as we'll see, your users might not
need to rent any JavaScript at all.

40
00:02:18.860 --> 00:02:22.545
You can also deploy your applications
as fully static pre-rendered apps where

41
00:02:22.545 --> 00:02:24.420
that's appropriate.

42
00:02:24.420 --> 00:02:27.830
So let's talk about the project
structure of a SvelteKit app.

43
00:02:27.830 --> 00:02:29.579
When you create a new SvelteKit app,

44
00:02:29.579 --> 00:02:32.750
you'll be left with something like
what you see on the right here.

45
00:02:33.900 --> 00:02:35.835
We'll go through some
of these files in turn.

46
00:02:35.835 --> 00:02:40.609
Package.json is something that will be
familiar to you if you've used Node

47
00:02:40.609 --> 00:02:41.213
before.

48
00:02:41.213 --> 00:02:45.470
It lists all of the project's
dependencies, including Svelte and

49
00:02:45.470 --> 00:02:50.500
SvelteKit, and a variety of scripts for
interacting with the CLI.

50
00:02:50.500 --> 00:02:54.808
So right now we're running npm run dev in
the iframe at the bottom of the screen

51
00:02:54.808 --> 00:02:55.807
that you can see.

52
00:02:55.807 --> 00:03:00.500
You'll notice that in the package dot
JSON we are specifying type module.

53
00:03:00.500 --> 00:03:05.121
This makes the project a modern
ESM project as opposed to a legacy

54
00:03:05.121 --> 00:03:09.914
common JS project, which means that
all of the JavaScript files in

55
00:03:09.914 --> 00:03:13.438
your app modern ESM format
instead of common JS.

56
00:03:13.438 --> 00:03:18.847
Next file is the svelte.config JS,
this contains your project configuration.

57
00:03:18.847 --> 00:03:22.067
Don't really need to worry about this for
the purpose of this tutorial, but

58
00:03:22.067 --> 00:03:25.590
if you're curious, then you can learn more
about what goes into the configuration

59
00:03:25.590 --> 00:03:27.270
file on the reference documentation.

60
00:03:29.540 --> 00:03:30.850
Next up is the Vite config.

61
00:03:31.910 --> 00:03:35.382
So, SvelteKit uses Vite,
which is a development server and

62
00:03:35.382 --> 00:03:38.715
build tool that allows you to
build apps very fast using all

63
00:03:38.715 --> 00:03:41.797
of the modern techniques
like hot module reloading.

64
00:03:41.797 --> 00:03:46.227
It has out-of-the-box support for
TypeScript and all of those other things,

65
00:03:46.227 --> 00:03:49.300
and SvelteKit by extension
gets all of those benefits.

66
00:03:50.350 --> 00:03:53.540
The most important part of our
VConfig is this line here.

67
00:03:53.540 --> 00:03:55.740
Where we're invoking the SvelteKit plugin.

68
00:03:56.750 --> 00:03:57.777
The bit below you can ignore,

69
00:03:57.777 --> 00:03:59.800
that's just something that
we need within the tutorial.

70
00:04:01.700 --> 00:04:05.820
The source directory is where
your app source code goes.

71
00:04:05.820 --> 00:04:09.785
We have an app.html, this defines the
shape of the response that you get when

72
00:04:09.785 --> 00:04:12.170
you visit the SvelteKit app.

73
00:04:12.170 --> 00:04:16.675
In this tutorial, we've got a bunch of
inline styles that we're gonna be using at

74
00:04:16.675 --> 00:04:20.593
various stages through the tutorial,
but the interesting part of this

75
00:04:20.593 --> 00:04:25.420
SvelteKit head section and all the way
at the bottom, a SvelteKit body.

76
00:04:25.420 --> 00:04:29.219
These are the bits that SvelteKit
populates with the HTML and

77
00:04:29.219 --> 00:04:33.632
the meta content that relates to
the page that the user has requested.

78
00:04:33.632 --> 00:04:37.834
And then finally,
the static directory contains any assets,

79
00:04:37.834 --> 00:04:41.966
like a favicon, that are included
when your app is deployed.

