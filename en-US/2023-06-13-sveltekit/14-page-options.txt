[00:00:00]
>> All right, so we've got all of this trending movies data that we're not using at the moment, we're only displaying one movie. And we'd like to show a whole bunch of trending movies beneath it in that carousel that we saw earlier. So to do this, because we're gonna be repeating this a couple of times, we're gonna add a carousel component that we can reuse throughout our application.

[00:00:22]
So let's go over to the lib folder, we'll create a new directory components. This is where we'll put components that are gonna be repeated multiple times in the app, and create Carousel.svelte. Okay, so we're gonna create a script element and we're gonna export a movies prop, first we're gonna add the lang = ts attribute as always.

[00:00:50]
And our movies prop is gonna be an array of MovieListResult objects. If we look at that definition, you can see all of the things that exist on that object. Including usefully for our purposes, the poster_path, which is that image there and the id, which is gonna enable us to link to an individual movie page.

[00:01:17]
We'll begin by creating a div with a class of carousel. And then inside there, we're just gonna render a whole bunch of poster images. So for each of our movies in the array, each movies as movie, we're gonna create a link element That points to /movie/movie.id. And inside there, we are gonna render the movie's poster.

[00:02:06]
Like with our hero component, we're gonna use the media helper. We're gonna pass in the movie.poster_path that we saw, with a width of 500. Let's see how that looks. Okay, so we're gonna need to use the carousel component in our page, so let's open that component. Okay, so we've started building our carrousel component, let's add it to our page.

[00:02:38]
Start typing carousel, auto input that, and the movies that we're gonna pass are the data.trending results. You can see that it's now rendering that entire list. Obviously, it's a little bit chunky, this isn't quite what we want. So let's go into carousel.svelte, and add some CSS. First thing we're gonna do, as so often, is we're gonna turn this into a display flex element.

[00:03:23]
I find I use display flex more than pretty much any other display property these days. And we're gonna give this a maximum height of, for now let's just say 10 rems. And you can see that the footer has now appeared above the carousel because we need to shrink the images down as well.

[00:03:46]
So we're gonna say that the eight elements inside have a maximum height of 100%, and the same for the images inside the anchor elements. Right, it's starting to look a little bit more like a carousel now, so add a gap. Space them out a little bit. And we wanna make the carousel scrollable without making the entire page scroll along with it, and that's easy enough to do with the overflow-x: scroll CSS property.

[00:04:26]
But you'll notice on the original, when we scroll, we ended up with the posters perfectly lined up with the one below, and that's because we're using something called scroll snapping. So let's add some scroll snaps to the carousel. The property is called scroll-snap-type. And the value is mandatory, in other words, we always insist that the image line up with the left-hand edge.

[00:05:01]
But we need to add some padding before this will behave the way we want. And we can use the, The site value that we declared in our global CSS. But we need to add it both to the scroll padding and the element padding, so scroll padding left is gonna be var --padding.

[00:05:30]
And then, the padding on the carousel is gonna have that on both sides. Now you can see it's now slightly offset. One other thing that we'll need to add to get rid of the ugly scroll bar on some platforms is this pseudo selector .carousel::-webkit-scrollbar, and that's gonna get a display of none.

[00:06:23]
Now, this is all starting to take shape, but this big image is too big. We want it to be constrained to that column width that we specified for the navigation and for that header element that we have on the page. Unfortunately, we can't just use the column class on this carousel, because then we wouldn't be able to scroll the elements to the left of that view, they would get cut off by the column.

[00:06:53]
So instead, we're gonna need to use a little bit of maths in our CSS. Bear with me for a minute while we type this out. The padding on the side of the carousel is gonna be the maximum of that side custom property, And the calculated value of, The --side property plus the full width of the page, 100vw minus the column width.

[00:07:34]
I'm just gonna group those values and then divide the whole thing by 2. And if we have set that out correctly, that will now max out when we make the page bigger. So you can see now it's getting a little extra padding there on the side. So then we can see these on the screen when it's zoomed in like this.

[00:07:55]
I'm actually gonna go into my styles.css and change that column width to say 60. And now when we drag this page out, we'll see that that happened much sooner. We need to do the same thing for the hero image now. So open the hero Svelte component, and we'll set a max width on that a element.

[00:08:16]
In fact, let's just add the column class. Right, and that is now similarly constrained.

