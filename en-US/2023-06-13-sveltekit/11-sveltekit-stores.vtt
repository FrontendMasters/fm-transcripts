WEBVTT

1
00:00:00.510 --> 00:00:02.620
All right,
let's talk about headers and cookies.

2
00:00:02.620 --> 00:00:07.018
So, inside your load function, as well as
inside form actions and API routes and

3
00:00:07.018 --> 00:00:10.974
hooks, which are things that we'll
learn about later in the workshop.

4
00:00:10.974 --> 00:00:15.920
You have access to a setHeaders function,
which does exactly what you would expect.

5
00:00:15.920 --> 00:00:19.989
The most common thing that you would use
setHeaders for is to set a cache control

6
00:00:19.989 --> 00:00:23.701
header on the response so
that data doesn't need to be re-requested.

7
00:00:23.701 --> 00:00:26.447
But we can't really demonstrate
that in this context, so

8
00:00:26.447 --> 00:00:29.035
we're gonna do something
a little bit more dramatic.

9
00:00:29.035 --> 00:00:36.536
We're gonna change the content type
of the response, To text/plain,

10
00:00:36.536 --> 00:00:42.408
and we're gonna need to reload the page so
that we can see that.

11
00:00:42.408 --> 00:00:46.230
You see that it's no longer giving us an
HTML response that the browser can render,

12
00:00:46.230 --> 00:00:48.148
it's giving us some plain text instead.

13
00:00:55.603 --> 00:01:00.240
Now, one thing you can't use the
setHeaders function for is to set cookies.

14
00:01:00.240 --> 00:01:02.187
Instead, you should use the cookies API,

15
00:01:02.187 --> 00:01:05.340
which is also available in all of
the same places that setHeaders is.

16
00:01:06.460 --> 00:01:13.583
So, in page.server.js,
we're gonna bring in the cookies API.

17
00:01:13.583 --> 00:01:17.988
And we're gonna replace this const visited
= false line with something based on

18
00:01:17.988 --> 00:01:21.744
the cookies that were sent from
the browser to the server when the page

19
00:01:21.744 --> 00:01:22.665
was requested.

20
00:01:25.515 --> 00:01:28.324
Cookies.get('visited').

21
00:01:33.161 --> 00:01:37.191
And then after the first time the user
visits, we're gonna set that cookie to

22
00:01:37.191 --> 00:01:40.372
true, so that when they come back,
we'll recognize them.

23
00:01:40.372 --> 00:01:45.793
We do that with cookies.set('visited'),

24
00:01:45.793 --> 00:01:48.442
give it a value of true.

25
00:01:48.442 --> 00:01:53.114
And you should always set a path on your
cookies because the browser's default

26
00:01:53.114 --> 00:01:57.430
behavior is to set the path on whatever
the parent of the path that you're

27
00:01:57.430 --> 00:01:59.930
visiting is, which is not very helpful.

28
00:01:59.930 --> 00:02:04.586
Most of the time you wanna set your
cookies on the root of your application.

29
00:02:07.169 --> 00:02:11.803
And we can now see that when we return
visited, if the user has visited the page

30
00:02:11.803 --> 00:02:15.385
before, they are no longer a stranger,
they are a friend.

31
00:02:20.034 --> 00:02:24.214
Now, the reason we use this cookies API
instead of interacting with headers is

32
00:02:24.214 --> 00:02:28.772
that not only does cookies.set cause a set
cookie header to be added to the response,

33
00:02:28.772 --> 00:02:30.634
it also updates the internal map.

34
00:02:30.634 --> 00:02:34.584
So that if you call
cookies.get inside another load

35
00:02:34.584 --> 00:02:38.804
function that is also involved
in rendering this page,

36
00:02:38.804 --> 00:02:43.310
it will be current with the cookie
that was set previously.

37
00:02:43.310 --> 00:02:45.790
You have a bunch of options
that you can pass here.

38
00:02:45.790 --> 00:02:49.960
We're using the cookie package under
the hood, which you can find on NPM.

39
00:02:49.960 --> 00:02:53.590
But we're adding some defaults to make the
behavior of your application more secure.

40
00:02:53.590 --> 00:02:57.690
Specifically, we're making all of
your cookies HTTP only by default.

41
00:02:57.690 --> 00:03:01.722
We're setting secure to true except
when you're on localhost and

42
00:03:01.722 --> 00:03:03.747
we're setting sameSite to lax.

43
00:03:03.747 --> 00:03:08.233
These defaults will protect your users
from their cookies being leaked.

44
00:03:08.233 --> 00:03:10.496
&gt;&gt; To clarify about the thing
you said with the cookies.

45
00:03:10.496 --> 00:03:15.448
So if I set a cookie in a layout,
I can reference it?

46
00:03:15.448 --> 00:03:19.010
Even though it's not actually
in the request cookies,

47
00:03:19.010 --> 00:03:22.277
I can reference it as if it
was in a page server file?

48
00:03:22.277 --> 00:03:25.924
&gt;&gt; So there's a potential race condition

49
00:03:25.924 --> 00:03:30.900
because the load functions
run simultaneously.

50
00:03:30.900 --> 00:03:35.827
And so, if you set the cookie
asynchronously after it's been

51
00:03:35.827 --> 00:03:40.104
requested in the load function,
then that's a bug.

52
00:03:40.104 --> 00:03:43.322
And actually, that's probably
a bug that we could catch and

53
00:03:43.322 --> 00:03:48.090
throw an error in that situation, because
that is actually quite a nasty bug.

54
00:03:48.090 --> 00:03:52.836
But more typically,
the way that you would use that is

55
00:03:52.836 --> 00:03:57.810
inside your server hook,
which we'll cover later on.

56
00:03:57.810 --> 00:04:02.631
You would do something like
event.locals.user = getUser

57
00:04:02.631 --> 00:04:07.741
from my cookies, if that doesn't exist,
then we set a cookie.

58
00:04:07.741 --> 00:04:09.966
And then inside your load function,

59
00:04:09.966 --> 00:04:14.859
the cookie has been set because your hook
always runs before your load function.

60
00:04:14.859 --> 00:04:18.770
But we'll get into all
of that stuff later on.

61
00:04:18.770 --> 00:04:23.574
It's also useful when you're dealing with
form actions, because if you have a login

62
00:04:23.574 --> 00:04:27.326
action, for example,
you might set a cookie inside that action.

63
00:04:27.326 --> 00:04:30.757
And then when the load function
is subsequently called,

64
00:04:30.757 --> 00:04:35.126
the cookie will have been set by the time
you read it in the load function.

65
00:04:35.126 --> 00:04:40.059
So that's why we use the cookies API
as opposed to relying on a fresh

66
00:04:40.059 --> 00:04:42.060
request coming in.

67
00:04:42.060 --> 00:04:45.600
&gt;&gt; When working with input-dependent data,
what is the best approach to loading it?

68
00:04:45.600 --> 00:04:50.399
For instance, on a search page, should the
user's input be handled with a promise on

69
00:04:50.399 --> 00:04:52.480
the component or with a data object?

70
00:04:54.480 --> 00:04:59.440
&gt;&gt; It depends on the UI that
you're trying to achieve.

71
00:04:59.440 --> 00:05:02.961
If you want the results to be
streamed in as the user is typing,

72
00:05:02.961 --> 00:05:06.620
then you would want to have that
logic inside the component, and

73
00:05:06.620 --> 00:05:09.360
you would have all of
the async handling there.

74
00:05:09.360 --> 00:05:14.815
The way that I tend to build search
inputs is, I'll just use a regular

75
00:05:14.815 --> 00:05:20.130
form that causes the data to be
loaded inside a load function.

76
00:05:20.130 --> 00:05:22.821
And so, you have to type in
the search query and then hit Enter.

77
00:05:22.821 --> 00:05:25.259
For me, I just find that to be
a preferable user experience.

78
00:05:25.259 --> 00:05:28.617
It also happens to be much easier to
implement because you don't need to deal

79
00:05:28.617 --> 00:05:31.565
with any of the async objects,
SvelteKit takes care of it for you.

80
00:05:31.565 --> 00:05:34.606
But it depends,
there's no canonically right answer.

81
00:05:34.606 --> 00:05:39.119
So because SvelteKit uses directory-based
routing, it's easy to place modules and

82
00:05:39.119 --> 00:05:42.170
components alongside
the routes that use them.

83
00:05:42.170 --> 00:05:45.502
I find a good rule of thumb when
figuring out where to put code is,

84
00:05:45.502 --> 00:05:48.520
put code close to where it's being used.

85
00:05:48.520 --> 00:05:51.462
But sometimes code is being
used in multiple places.

86
00:05:51.462 --> 00:05:52.782
And when that happens,

87
00:05:52.782 --> 00:05:57.670
you don't wanna have to do ../../../../
to get a reference to the module.

88
00:05:58.900 --> 00:06:02.778
It's nice to have a place to put that
stuff that is common to all your routes.

89
00:06:02.778 --> 00:06:07.430
And in SvelteKit,
that place is the source/lib directory.

90
00:06:07.430 --> 00:06:12.224
Anything inside this directory can be
accessed by any module installs via

91
00:06:12.224 --> 00:06:13.235
the lib alias.

92
00:06:13.235 --> 00:06:20.609
So both of these page.svelte files
are importing a file from source/lib.

93
00:06:20.609 --> 00:06:23.174
They're trying to get
ahold of this message.

94
00:06:23.174 --> 00:06:27.661
And the homepage is doing it right, but if
we navigate to this deeply nested route,

95
00:06:27.661 --> 00:06:31.140
we get an error from Vite telling
us that it's failed to import.

96
00:06:32.200 --> 00:06:36.523
And that's because we've got
the wrong number of dot, dot slashes,

97
00:06:36.523 --> 00:06:39.700
we got five when we should have four.

98
00:06:39.700 --> 00:06:42.705
So we could fix it by fixing
the number of dot, dot slashes, but

99
00:06:42.705 --> 00:06:45.910
it would be a hell of a lot nicer
if you could just use $lib instead.

100
00:06:45.910 --> 00:06:49.910
So get rid of all of that, and
do the same in page.svelte.

101
00:06:53.952 --> 00:06:57.662
And that will work consistently for
all of the modules and

102
00:06:57.662 --> 00:06:59.756
components in your lib folder.

103
00:06:59.756 --> 00:07:03.125
So that's a nice place to put
shared utility components,

104
00:07:03.125 --> 00:07:05.886
utils.js file,
other things of that nature.

