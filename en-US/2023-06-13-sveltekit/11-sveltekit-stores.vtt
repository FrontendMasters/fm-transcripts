WEBVTT

1
00:00:00.000 --> 00:00:06.135
Stores are a way of storing data that
doesn't belong to an individual component.

2
00:00:06.135 --> 00:00:10.935
And Svelte can makes a few read only
stores available to your application

3
00:00:10.935 --> 00:00:12.911
via the app/stores module.

4
00:00:12.911 --> 00:00:17.006
We have the page store, the navigating
store, and the updating store.

5
00:00:17.006 --> 00:00:20.132
And the one that you'll use most
of the time is the page store.

6
00:00:20.132 --> 00:00:25.053
Provides information about the current
page such as the URL, the params object

7
00:00:25.053 --> 00:00:29.687
that we've already seen in our load
functions and our API route handlers.

8
00:00:29.687 --> 00:00:33.712
A route object with an ID property
that represents the current route.

9
00:00:33.712 --> 00:00:40.743
So for example, inside about /page.svelte,
the root ID is /about.

10
00:00:40.743 --> 00:00:45.411
The HTTP status code of the current page,
the error object of the current page if

11
00:00:45.411 --> 00:00:48.138
there is one,
we'll learn about that later.

12
00:00:48.138 --> 00:00:53.955
The data prop and the form prop
that combines all of the data

13
00:00:53.955 --> 00:00:59.069
from one of the layout functions and
the page data.

14
00:00:59.069 --> 00:01:03.209
And so just like with any other store in
Svelte, you can reference its value inside

15
00:01:03.209 --> 00:01:06.159
a component by prefixing its
name with the dollar symbol.

16
00:01:06.159 --> 00:01:07.226
So for example,

17
00:01:07.226 --> 00:01:11.812
we can access the current path name
as dollar page dot URL dot path name.

18
00:01:11.812 --> 00:01:17.467
So in our layout, .svelte component here,
let's add a script block.

19
00:01:18.758 --> 00:01:25.816
And we're gonna import the page store,
From $app/stores.

20
00:01:28.087 --> 00:01:33.098
But now, inside our nav element,
we're going to add an aria

21
00:01:33.098 --> 00:01:39.204
current attribute to indicate which
of these pages is currently active.

22
00:01:48.399 --> 00:01:54.983
I'm just gonna copy that for
the about page, then update this bit.

23
00:01:57.207 --> 00:02:01.165
If we reload the page and
navigate between these two links,

24
00:02:01.165 --> 00:02:06.233
we'll see that the aria-current
attribute is updating when we navigate,

25
00:02:06.233 --> 00:02:09.895
and we have some CSS that is
targeting that attribute.

26
00:02:18.705 --> 00:02:22.678
The navigating store represents
the current navigation.

27
00:02:22.678 --> 00:02:26.384
And so when a navigation starts,
whether that's because of a link click, or

28
00:02:26.384 --> 00:02:28.962
a back forward navigation,
or a programmatic go to.

29
00:02:28.962 --> 00:02:32.815
The value of navigation will become
an object with some properties.

30
00:02:32.815 --> 00:02:37.178
We have from and to,
these are things with a params object,

31
00:02:37.178 --> 00:02:39.551
the route object, and the url.

32
00:02:39.551 --> 00:02:44.857
We'll also have a navigation type,
which can be link, or pop state or go to.

33
00:02:44.857 --> 00:02:51.018
And if you wanna see the complete type
information for the navigation object,

34
00:02:51.018 --> 00:02:55.607
you can look that up on
the SvelteKit documentation site.

35
00:02:55.607 --> 00:02:59.195
We can use this store to
show a loading navigation,

36
00:02:59.195 --> 00:03:03.041
a loading indicator for
long-running navigations.

37
00:03:03.041 --> 00:03:07.648
So in this exercise in our page server.js,
and

38
00:03:07.648 --> 00:03:13.984
in our about page server.js,
we have these artificial delays,

39
00:03:13.984 --> 00:03:20.221
it's gonna take a full second
to navigate between these pages.

40
00:03:20.221 --> 00:03:26.868
We can see that if we click, it's gonna
take a whole second before that updates.

41
00:03:26.868 --> 00:03:30.151
So inside our layout Svelte
where the navigation is defined,

42
00:03:30.151 --> 00:03:32.435
I'm gonna bring in the navigating store.

43
00:03:38.016 --> 00:03:42.707
And then we're gonna add some UI

44
00:03:42.707 --> 00:03:47.236
indicating what's going on.

45
00:03:57.801 --> 00:04:02.112
By the way, this URL object here,

46
00:04:02.112 --> 00:04:07.470
this is the web standard URL constructor.

47
00:04:07.470 --> 00:04:10.681
It's a super useful object that you'll
interact with a lot when you're building

48
00:04:10.681 --> 00:04:11.388
SvelteKit apps.

49
00:04:11.388 --> 00:04:16.841
So I recommend getting comfortable
with this page of MDN.

50
00:04:19.606 --> 00:04:22.985
Okay, so
now let me navigate between these pages.

51
00:04:22.985 --> 00:04:27.548
We see that we get a little indication
on the right-hand side telling us what's

52
00:04:27.548 --> 00:04:28.306
happening.

53
00:04:28.306 --> 00:04:29.464
So more typically,

54
00:04:29.464 --> 00:04:33.424
you would use this to have some kind
of a progress indicator and so on.

55
00:04:33.424 --> 00:04:37.204
This is actually one of the issues
that you get with a single-page app.

56
00:04:37.204 --> 00:04:40.307
There is no direct feedback when
you navigate between pages,

57
00:04:40.307 --> 00:04:44.555
you're kind of relying on the navigation
to be fast enough that it doesn't matter.

58
00:04:44.555 --> 00:04:50.383
But there is gonna be a brand-new
navigation API landing in browsers fairly

59
00:04:50.383 --> 00:04:56.301
soon, which will allow us to control
the refresh icon that starts spinning,

60
00:04:56.301 --> 00:05:00.599
when you have a traditional
navigation between pages.

61
00:05:00.599 --> 00:05:03.243
We'll be able to use that
in single page apps too.

62
00:05:03.243 --> 00:05:08.187
But for now, it's a good practice to
have some kind of loading indicator in

63
00:05:08.187 --> 00:05:09.844
your single page app UI.

64
00:05:15.238 --> 00:05:16.502
Okay, and finally,

65
00:05:16.502 --> 00:05:20.224
the updated store contains a value
of true or false depending on

66
00:05:20.224 --> 00:05:25.088
whether a new version of the app has been
deployed since the page was first opened.

67
00:05:25.088 --> 00:05:26.034
And for this to work,

68
00:05:26.034 --> 00:05:29.038
you need to add some configuration
to your SvelteConfig.js file.

69
00:05:29.038 --> 00:05:33.844
Specifically, you need to add
this version object with a name,

70
00:05:33.844 --> 00:05:37.853
which changes when your
application is redeployed.

71
00:05:37.853 --> 00:05:42.627
Right now, we're just using date.now
toString, which is the default value, but

72
00:05:42.627 --> 00:05:46.529
ideally, you should use something
like the current commit hash, so

73
00:05:46.529 --> 00:05:48.563
that your deploys are consistent.

74
00:05:48.563 --> 00:05:53.197
And you also need to add a poll interval,
I've got five seconds here.

75
00:05:53.197 --> 00:05:57.859
This is what SvelteKit is gonna use to
check whether the version has changed

76
00:05:57.859 --> 00:05:59.341
while the page is open.

77
00:05:59.341 --> 00:06:02.287
Now, version changes only
happen in production,

78
00:06:02.287 --> 00:06:04.691
they don't happen during development.

79
00:06:04.691 --> 00:06:09.919
For that reason, updated is always
gonna be false in this tutorial.

80
00:06:13.732 --> 00:06:18.735
But we can imagine, for example,
that you would have something like

81
00:06:18.735 --> 00:06:23.921
a toast that appears when the updated
store changes from false to true.

82
00:06:23.921 --> 00:06:26.727
You can use this in other ways.

83
00:06:26.727 --> 00:06:31.472
For example, if you have a very
long-running session, and the application

84
00:06:31.472 --> 00:06:36.439
is redeployed while the user has the app
open, then that can break navigations.

85
00:06:36.439 --> 00:06:41.251
Because you might try to fetch the code
for a new page, and discover that all of

86
00:06:41.251 --> 00:06:46.229
the hashes have changed, and so we're
unable to import the relevant modules.

87
00:06:46.229 --> 00:06:51.142
And in that case, SvelteKit will fall
back to a full page navigation, so

88
00:06:51.142 --> 00:06:56.880
usually we're able to recover without the
user noticing that anything went wrong.

89
00:06:56.880 --> 00:07:02.187
But it can be nice to proactively
tell the user that the application

90
00:07:02.187 --> 00:07:06.736
has updated or
even to disable the router altogether, so

91
00:07:06.736 --> 00:07:11.129
that we don't need to have
that error handling logic.

