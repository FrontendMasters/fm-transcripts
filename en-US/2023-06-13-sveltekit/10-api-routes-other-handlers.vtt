WEBVTT

1
00:00:00.000 --> 00:00:05.909
And of course, we can add handlers for
all of the other HTTP verbs as well.

2
00:00:05.909 --> 00:00:10.676
So we'll create a todo/ID
route by creating a new folder

3
00:00:10.676 --> 00:00:12.572
with an ID parameter.

4
00:00:12.572 --> 00:00:17.730
And then inside there,
create our API route.

5
00:00:17.730 --> 00:00:21.907
And we're gonna add a handler and a delete
handler for toggling and removing todos.

6
00:00:21.907 --> 00:00:26.627
Using the toggle todo in
the delete todo functions that

7
00:00:26.627 --> 00:00:29.095
are in the database JS file.

8
00:00:29.095 --> 00:00:32.813
So in here once again,
we're gonna import the database.

9
00:00:32.813 --> 00:00:40.291
We're not importing the JSON helper at
this time because we're not gonna need it.

10
00:00:40.291 --> 00:00:45.925
Put our handler first,
async function, put.

11
00:00:45.925 --> 00:00:50.535
We need the params object this time so
that we know which todo we're dealing

12
00:00:50.535 --> 00:00:54.351
with, and then we're gonna go and
grab request and cookies.

13
00:01:00.599 --> 00:01:03.640
This time, the data that we're getting
from the browser is gonna be a done

14
00:01:03.640 --> 00:01:04.140
property.

15
00:01:08.463 --> 00:01:09.829
And as before,
we need to know the user's ID

16
00:01:20.263 --> 00:01:24.554
We're gonna call the toggle todo
function with that user ID,

17
00:01:24.554 --> 00:01:29.684
with the ID of the current todo which
comes from the square brackets here.

18
00:01:32.551 --> 00:01:34.219
And finally, the data itself.

19
00:01:37.057 --> 00:01:41.294
The response that we're gonna return this
time isn't actually gonna include any data

20
00:01:41.294 --> 00:01:44.152
because we don't need to return
any data in this context.

21
00:01:44.152 --> 00:01:49.013
So we'll return a new
response with a nobody, and

22
00:01:49.013 --> 00:01:52.846
a status of 204 which is no content.

23
00:01:57.210 --> 00:02:00.793
Add a li handler as well,
export async function delete,

24
00:02:00.793 --> 00:02:04.164
this time you don't even
need to look at the request.

25
00:02:04.164 --> 00:02:08.177
So we're just gonna get params and
cookies, get the user ID,

26
00:02:11.918 --> 00:02:16.500
And then we'll call database.delete todo,

27
00:02:16.500 --> 00:02:21.907
pass in user ID,
pass in the ID from the params object.

28
00:02:21.907 --> 00:02:25.047
And again,
we're gonna return an empty response.

29
00:02:34.283 --> 00:02:39.874
Okay, so we can now interact with this
endpoint inside our event handlers.

30
00:02:39.874 --> 00:02:43.883
First, we'll add one inside the onChange
handler of the checkbox on the left.

31
00:02:46.832 --> 00:02:50.617
Scroll down to where that is,
see the onChange handler here.

32
00:02:53.935 --> 00:02:56.589
We're gonna call fetch, and

33
00:02:56.589 --> 00:03:02.534
this time we're gonna pass in the idea
that todo as part of the URL,

34
00:03:02.534 --> 00:03:07.116
so that it becomes available
on the params object.

35
00:03:07.116 --> 00:03:08.097
The method for

36
00:03:08.097 --> 00:03:12.688
this one is put corresponding to
the put verb that we just defined.

37
00:03:20.429 --> 00:03:25.839
And the data that we're passing is
whether or not the todo is done,

38
00:03:25.839 --> 00:03:33.142
then once again, content-type,
Application/json.

39
00:03:36.271 --> 00:03:41.231
And then on the other side of the todo
when the button gets clicked,

40
00:03:41.231 --> 00:03:45.050
we're gonna post a delete
request to our handler.

41
00:03:49.729 --> 00:03:54.916
I'm gonna send the request
to the same place.

42
00:03:54.916 --> 00:04:01.414
This time we don't need a body,
the request itself is enough.

43
00:04:01.414 --> 00:04:03.626
And once that request succeeds,

44
00:04:03.626 --> 00:04:08.925
we'll again mutate the array this time to
remove the one that we no longer need.

45
00:04:13.303 --> 00:04:18.399
Do that by filtering on whether the member

46
00:04:18.399 --> 00:04:23.462
of the array is the current todo.

47
00:04:23.462 --> 00:04:25.930
Okay, so
we can now mark todos as complete,

48
00:04:25.930 --> 00:04:30.135
if I refresh the page that should stay
checked and we can also delete them and

49
00:04:30.135 --> 00:04:32.841
if I refresh the page
that should stay deleted.

50
00:04:35.710 --> 00:04:38.944
Okay, so that was a lot more work
than using a form action and

51
00:04:38.944 --> 00:04:40.959
it won't work without JavaScript.

52
00:04:40.959 --> 00:04:43.759
So I do recommend using form
actions where possible,

53
00:04:43.759 --> 00:04:46.447
but this is an option that
you have when you need it.

54
00:04:46.447 --> 00:04:49.490
Okay, so
we got a question about whether or

55
00:04:49.490 --> 00:04:53.643
not it makes sense to put
the logic in an API route handler.

56
00:04:53.643 --> 00:04:58.662
Or in a server module
inside your lib directory.

57
00:04:58.662 --> 00:05:03.828
And the answer is that you cannot call
functions on the server directly from

58
00:05:03.828 --> 00:05:08.994
within a page.svelte, you have to go
via an API route or via a form action,

59
00:05:08.994 --> 00:05:14.324
unless you've set up something like
a third party library like Telefunken or

60
00:05:14.324 --> 00:05:18.437
something that allows you to
do some sort of RPC mechanism.

61
00:05:18.437 --> 00:05:21.939
And so
there really is no distinction there.

62
00:05:21.939 --> 00:05:27.397
You're gonna put some logic in
your API handlers, but very often,

63
00:05:27.397 --> 00:05:33.718
you'll have some kind of an abstraction
similar to our database JS file here,

64
00:05:33.718 --> 00:05:38.246
where the actual database
manipulation is happening.

65
00:05:38.246 --> 00:05:40.675
And your API routes will just
be calling these helper methods.

66
00:05:40.675 --> 00:05:45.636
But there's always gonna be some
logic in an API route handler.

67
00:05:45.636 --> 00:05:49.527
I hope that answers the question.

68
00:05:49.527 --> 00:05:54.015
&gt;&gt; Let's say I want my
endpoints to be used later for

69
00:05:54.015 --> 00:05:59.390
a mobile app is that okay, or
would I need rewrite the API?

70
00:05:59.390 --> 00:06:04.641
&gt;&gt; Absolutely, these endpoints,
they are public HTTP endpoints, and

71
00:06:04.641 --> 00:06:09.892
if you disable the default cross-site
request forgery protection,

72
00:06:09.892 --> 00:06:13.105
then you can use it as
a regular public API.

73
00:06:13.105 --> 00:06:15.825
You can use it within your app.

74
00:06:15.825 --> 00:06:20.016
And you can make fetch calls against your
own endpoints inside your load functions,

75
00:06:20.016 --> 00:06:22.447
and that'll work without
issuing an HTTP call.

76
00:06:22.447 --> 00:06:28.025
So you can build an API that way and make
it public but also privately accessible.

77
00:06:28.025 --> 00:06:29.805
And that just works.

78
00:06:29.805 --> 00:06:34.624
But the default assumption when you're
building his felt kit app is that

79
00:06:34.624 --> 00:06:38.969
the API routes and the server load
functions are specifically for

80
00:06:38.969 --> 00:06:41.264
the pages that you're building.

81
00:06:41.264 --> 00:06:45.214
So it's entirely up to you if you
want to deviate from that and

82
00:06:45.214 --> 00:06:47.080
open up your API to the well.

83
00:06:47.080 --> 00:06:51.805
&gt;&gt; I could just import function from
lib utils.ts to get a function to do

84
00:06:51.805 --> 00:06:56.623
the same things like, add,
remove information from a database etc.

85
00:06:56.623 --> 00:07:01.723
So what I want to do that or
implement API endpoints.

86
00:07:01.723 --> 00:07:05.433
&gt;&gt; So if you're importing
the file inside your page.svelt,

87
00:07:05.433 --> 00:07:09.439
then that implies that that file
is available in the client, and

88
00:07:09.439 --> 00:07:14.038
if you're doing that, then you don't
have direct access to a database,

89
00:07:14.038 --> 00:07:19.032
you need to go through some HTTP layer
in order to interact with your back-end.

90
00:07:19.032 --> 00:07:24.276
Later we'll learn about server
modules which cannot be imported

91
00:07:24.276 --> 00:07:30.006
into a page.svelte file,
which prevents you from making that error.

92
00:07:30.006 --> 00:07:33.020
So yeah, you're not gonna be able to
directly manipulate the database from

93
00:07:33.020 --> 00:07:34.018
within your component.

94
00:07:34.018 --> 00:07:35.993
That is a deliberate design decision.

95
00:07:35.993 --> 00:07:41.753
We don't let you do that because that way,
insecurity and madness lies.

96
00:07:41.753 --> 00:07:45.017
So, yeah, you're always gonna
be going through API routes or

97
00:07:45.017 --> 00:07:47.860
form actions when you wanna
mutate data on the server.

