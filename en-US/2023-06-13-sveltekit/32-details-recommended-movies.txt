[00:00:00]
>> So a spell flicks app is looking in reasonably good shape we're just gonna add one final page before we call it a day and that is the individual movie page that we've been linking to all over the place but haven't yet visited or implemented. So, open source/roots for the last time and create a new root inside movies.

[00:00:24]
I'm gonna call it in square parameters, [id], that's gonna uniquely identify the movie. You'll notice that it's okay to have these two roots with dynamic parameters in the same directory, because one of them has this matcher, so the router knows that these two things are not gonna conflict.

[00:00:43]
It's gonna try, if we go to /movers/trending, it's gonna try the view = list parameter first and if that doesn't match, then it's gonna try the id parameter. It's one of the benefits of having a really sophisticated routing system. So, once more, we're gonna create a page.ts not js, and a page.svelte.

[00:01:12]
Inside our page.ts we're gonna add, an async loading function. We're gonna get the params object and we're gonna get fetch and we're gonna make, you guessed it, an API call, const movie =, import our API helper. Api.get, passing our fetch, the endpoint is gonna be /movie. /params.id. And we're gonna use that append to response trick that we used before to get multiple request data in one go.

[00:02:14]
We're gonna get images, videos and recommendations. And just so that we can get the most value out of our client side caching, I'm gonna to duplicate this append to response property on the homepage here. This way, if someone clicks from the hero image on the homepage, then they're gonna get a cache error, which is gonna be really nice.

[00:02:44]
This is a MovieDetails object, so we'll add the as MovieDetails. And on this page we look at the one that's deployed online already, I had Javascript disabled this whole time, okay, reload that page so on this page we have some information about the movie we also have a trailer which is being shown on the left there.

[00:03:11]
And we wanna have that on the movie page, that we're about to build. In order to do that, we wanna get the trailer object from the movie videos results. And specifically, we want to have a video that is of type trailer and is hosted at YouTube because we know how to embed those.

[00:03:46]
So we'll return, Video.official. So it came from from the actual studio, video.site === YouTube and the video.type is either a Trailer or A teaser. And then we're just gonna return all of that to our page load function. From our page load function into our page. So we'll add a script tag, lang = ts export let data and it has the movie details and the trailer on that object.

[00:05:01]
And the first thing we're gonna do is add another hero component, Which is gonna take a movie object. We'll create a div with a class of hero and we'll create a div class equals backdrop for the backdrop image to go in. And then below that, we'll have some info about the movie.

[00:05:51]
We're gonna have the movie title first if all, and then we're gonna have a movie overview. And let's add that component to our page, passing the movie object. And take a look and see if it's appearing. It's giving us a not found error, and I think I know why, it's because this URL here is saying /movie instead of /movies.

[00:06:37]
So we need to figure out where that's coming from and fix it. See this link here has /movie, let's fix that. Got another one here, we'll fix that too. Try that once more and it's giving us some information about the movie, 65 with Adam Driver. As before, we can use the media helper to create this image, give it an alt attribute first.

[00:07:30]
That's gonna be the movie title, and the source is media, we're gonna pass in the movie backdrop, actually, we're gonna need to figure out what backdrop to use first. So, like before, we're gonna grab movie.images.backdrops, find the first backdrop that doesn't have a language so that we don't have any text, Using this iso_ 639_1 property.

[00:08:07]
And if we can't find one of those, then we'll just fall back to whatever the first item in the array is. All right, now that we've got that reference, we can do backdrop file and score pass. And we're gonna give it a width of 1280. And you'll see it's rendering it, it's rendering it a little bit too large.

[00:08:41]
So, we'll add some styles. This hero element, we're gonna give this a display of grid so that we can have a mobile view and a desktop view. Once we get above a certain width, we're gonna need to stop that image from growing. So we'll add a media query.

[00:09:58]
So we're gonna divide this into a grid that is stacked vertically on mobile and horizontally on larger screens. And this backdrop element we're gonna put that in the right hand column. At the moment because it's first in the DOM it will be in the left hand column which if you look at the original is not the way that it works, over here it's positioned on the right.

[00:10:34]
So we're gonna do the same thing by controlling the rendering order distinct from the DOM order, display grid makes it really easy to do this sort of thing. We can just add a grid-column attribute which positions it on the right-hand side. We need to put some maximum width on these images.

[00:11:14]
Okay, and we can now see that it's behaving the way that we want it to, it's not spilling out into the rest of the page beyond the window. Do you have a question?
>> If two match functions have some similarities, which one would take priority in matching route params?

[00:11:40]

>> That's a really good question, I'm actually not sure what happens in the situation where you have two dynamic parameters with matches in the same route. I think it would probably be alphabetical, but I would have to go away and check that. I would guess alphabetical, that's a great question.

[00:11:59]
All right, let's add some styles for the info block here. I'm gonna move the window over so that we can see the page as we're editing it. We'll begin by giving it some padding. Looks a little bit nicer already We'll make a display flex element with the flex-direction of column.

[00:12:43]
And we're gonna give it a negative margin top, this is gonna move the element over the image, Which is gonna create a nice visual effect. And we're gonna get rid of the margin on the elements inside the info block. And instead we're gonna have a gap in the flex element that looks like this.

[00:13:18]
That happens to work out really nicely on this poster because it's dark around the edges and the title of the movie is quite short. But on some other posters like let's take Super Mario Brothers, this is like super hard to read, so we gonna add a little black gradient at the bottom of the movie poster so that we can see that text.

[00:13:44]
The way that we gonna do that is with a pseudo element. Need to give it some content but this can just be the empty string. I'm gonna fill the width and then give that a height of, let's say, 8 rems. And we'll just do a black background for now, check that we're doing things correctly.

[00:14:08]
We need to put that over to the left and position it based on the bottom of the container element. Okay, so we can now obviously read the textbook, we're also obscuring a bunch of the poster. So instead of having a black background, we're going to have a linear gradient that's going to go to the top of the element.

[00:14:30]
It's going to start black at the bottom and it's going to end transparent at the top. All right, and now we have this nice fade so that we can see the poster but we can also read the information on top of it. When we get bigger, we want to have the information on the left hand side instead.

[00:14:53]
So we're going to add some more styles inside our media query. Create a new Info selector. Gonna position it absolutely. And we're gonna give it a width of 40ems, which should be about right, it'll make it fill the available height. And just like the backdrop is being moved to the right hand side with this grid column rule, we're gonna do the same thing in reverse for the info to move it onto the left hand side.

[00:15:40]
And we're gonna get rid of that negative margin that we were using before. I wanna justify the content. In the center. So now when we look at this, we can see that the headline and the outline are going where we want them to, but again, it's kind of hard to read this text because we need to add one of those nice gradients.

[00:16:11]
We can see that the gradient is still being applied at the bottom of the poster where we don't want it. So we're gonna get rid of that and replace it with a horizontal gradient instead. So that backdrop after pseudo element, we'll give it a, let`s see.I'm gonna just drop that breakpoint down a bit so that we can see it.

[00:16:45]
Give it a width that isn't 100%, we'll use 15 rems, gonna make it fill the available height. Move all the way to the left, and the bottom. And this time the background is gonna be a linear gradient that goes to the right. Again, from black to transparent. Still a little bit hard to read, so I'm just gonna shove a drop shadow on there.

[00:17:28]
Drop-shadow is sort of a get out of jail free card when you're trying to build these sorts of user interfaces, And you can have as many of these in sequence as you like if you need to up the power like that. Okay, so we can see the poster, but we can also read the text.

