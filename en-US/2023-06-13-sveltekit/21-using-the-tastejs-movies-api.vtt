WEBVTT

1
00:00:00.104 --> 00:00:05.048
Okay, so on the home page of the app we've
got a big featured movie at the top.

2
00:00:05.048 --> 00:00:08.728
And then we have three
carousels of trending movies,

3
00:00:08.728 --> 00:00:12.747
movies that are now playing and
movies that are upcoming.

4
00:00:12.747 --> 00:00:18.586
So let's grab some data for
that first of all from the API.

5
00:00:18.586 --> 00:00:23.764
To do that, we're gonna need to add
a page.js file with a load function,

6
00:00:26.144 --> 00:00:30.955
And we're using page js instead of
page server js because the place that

7
00:00:30.955 --> 00:00:35.864
we're gonna be able to get this data
from doesn't require any secrets.

8
00:00:35.864 --> 00:00:37.908
There's no API key or authentication.

9
00:00:37.908 --> 00:00:42.259
So we're gonna make requests directly
from the browser when we navigate

10
00:00:42.259 --> 00:00:43.341
client's side.

11
00:00:43.341 --> 00:00:47.683
So, for that reason, we're not gonna have
a server load function cuz we don't need

12
00:00:47.683 --> 00:00:50.393
to make a round trip to our
own server to get the data.

13
00:00:50.393 --> 00:00:52.273
As well as making things faster,

14
00:00:52.273 --> 00:00:55.708
that's gonna mean that our
application is cheaper to host.

15
00:00:55.708 --> 00:00:56.879
So, create our load function,

16
00:01:04.622 --> 00:01:08.168
And we're gonna grab the fetch helper
that we learned about earlier,

17
00:01:13.184 --> 00:01:16.863
In fact,
let's make this page TS file instead so

18
00:01:16.863 --> 00:01:21.462
that we can use TypeScript make
our life a little bit easier,

19
00:01:24.014 --> 00:01:29.764
And then the place that we need to
get this data from is a version of

20
00:01:29.764 --> 00:01:36.380
the movie database API that is hosted
by the tastejs.com organization.

21
00:01:36.380 --> 00:01:41.574
So the base URL for our API calls is gonna

22
00:01:41.574 --> 00:01:47.882
be https://api.movies.tastejs.com,

23
00:01:53.593 --> 00:01:55.041
And to get the,

24
00:02:00.833 --> 00:02:03.451
To get the trending movies data
we're gonna make a fetch call,

25
00:02:06.677 --> 00:02:15.095
To that base followed
by trending/movie/day.

26
00:02:15.095 --> 00:02:17.560
That's gonna get the day's
trending movies,

27
00:02:23.928 --> 00:02:27.098
Then we'll use response.json
to get hold of that data,

28
00:02:34.179 --> 00:02:37.140
This needs to be an async function so
that we can use await.

29
00:02:37.140 --> 00:02:41.511
So let's add that there, And

30
00:02:41.511 --> 00:02:45.762
now that we've done this
inside our page.svelte,

31
00:02:45.762 --> 00:02:48.858
we can create a script lang equals ts.

32
00:02:48.858 --> 00:02:53.832
So that we use TypeScript and
add export let data.

33
00:02:53.832 --> 00:02:57.563
And if we hover over that data and we'll
see that we have a trending property.

34
00:02:57.563 --> 00:03:01.502
Although at the moment it has an any
value, which is not much help.

35
00:03:01.502 --> 00:03:04.721
If we're gonna be able to build this app
under the time constraints that we're

36
00:03:04.721 --> 00:03:07.989
working under, then it would be really
helpful if TypeScript could tell us what

37
00:03:07.989 --> 00:03:08.941
we're dealing with.

38
00:03:08.941 --> 00:03:13.159
So at this point,
what I want you to do is open

39
00:03:13.159 --> 00:03:18.290
frontend-masters-svelteflix.vercel.app and

40
00:03:18.290 --> 00:03:22.854
append the word gist to the end of that,
right?

41
00:03:22.854 --> 00:03:26.941
That's gonna give us a TypeScript
declaration file which contains type

42
00:03:26.941 --> 00:03:30.961
information about all of the responses
from the API that we're gonna be

43
00:03:30.961 --> 00:03:31.842
dealing with.

44
00:03:31.842 --> 00:03:35.988
So just hit that row button,
grab that whole thing,

45
00:03:35.988 --> 00:03:38.627
copy it and then inside your app,

46
00:03:38.627 --> 00:03:44.207
inside the lib directory we're
gonna create a file, types.d.ts.

47
00:03:44.207 --> 00:03:45.714
And it's gonna paste that whole thing,

48
00:04:00.522 --> 00:04:03.994
We forgot the await before our fetch so
add that to get rid of that red squiggly.

49
00:04:07.342 --> 00:04:11.679
And when we're dealing with fetch,
TypeScript doesn't know what the data is,

50
00:04:11.679 --> 00:04:15.404
so we have to tell TypeScript what
kind of thing we're dealing with.

51
00:04:15.404 --> 00:04:18.204
So we're gonna add an as
at the end of this and

52
00:04:18.204 --> 00:04:23.278
inside our types.dts we have a bunch of
different things, but one of the things

53
00:04:23.278 --> 00:04:27.692
that we're gonna be dealing with
a lot is this movie list interface.

54
00:04:29.330 --> 00:04:35.093
This data that we're getting from this
endpoint is a promise of a movie list,

55
00:04:38.933 --> 00:04:43.120
Actually no,
we need to put that down, down here.

56
00:04:43.120 --> 00:04:47.373
And because we're awaiting it, it's
not a promise, it's just a movie list.

57
00:04:47.373 --> 00:04:53.999
We need to import that from
our type declarations.

58
00:04:53.999 --> 00:04:56.710
And now when we open our Page.svelte,

59
00:04:56.710 --> 00:05:00.910
hopefully it's gonna tell us
that trending is a movie list.

60
00:05:00.910 --> 00:05:04.120
So that makes our life
a little bit easier.

61
00:05:04.120 --> 00:05:13.155
Okay, so we can add,
Top trending movies over here.

62
00:05:13.155 --> 00:05:18.011
And then the first thing we'll
do is just have a look and

63
00:05:18.011 --> 00:05:22.454
see what information we
have on that data object.

64
00:05:22.454 --> 00:05:23.596
Open DevTools,

65
00:05:23.596 --> 00:05:28.499
open the console, you can see that
we have a bunch of trending results.

66
00:05:30.090 --> 00:05:35.250
And we're gonna wanna grab the first
one of these and render the information

67
00:05:35.250 --> 00:05:39.521
there and it doesn't actually
have everything that we want for

68
00:05:39.521 --> 00:05:43.952
the big hero image at the top because
we wanna grab a logo as well and

69
00:05:43.952 --> 00:05:46.390
the logo is not in the list results.

70
00:05:46.390 --> 00:05:49.139
So we're gonna need to
make another fetch call

71
00:05:49.139 --> 00:05:54.080
to get the full information about
the movie at the top of the trending list.

72
00:05:54.080 --> 00:06:00.614
So back in our page.ts, We'll

73
00:06:00.614 --> 00:06:05.793
grab the first movie and call it featured,

74
00:06:10.288 --> 00:06:12.412
And now we're gonna make
another request to the API,

75
00:06:26.537 --> 00:06:31.694
And this time the data that we're gonna

76
00:06:31.694 --> 00:06:36.077
get is /movie/featured.id,

77
00:07:01.187 --> 00:07:04.260
And that's going to be
a movie details object,

78
00:07:07.432 --> 00:07:11.911
Okay, so if we now look in our dev tools
and see what's in the feature data,

79
00:07:11.911 --> 00:07:16.396
it still doesn't have quite everything
that we need because we need to tell

80
00:07:16.396 --> 00:07:19.760
the API that we wanna get
some additional information.

81
00:07:19.760 --> 00:07:25.035
But before we get into that, all of this
fetch code is already getting me down.

82
00:07:25.035 --> 00:07:28.447
There's so much duplication because like,
first you have to get the response and

83
00:07:28.447 --> 00:07:30.435
then you have to get
the JSON from the response.

84
00:07:30.435 --> 00:07:33.480
And it's, it's just no fun.

85
00:07:33.480 --> 00:07:38.330
So at this point, I'm gonna create
an API helper in my lib directory.

86
00:07:38.330 --> 00:07:42.230
And we're gonna use that every time
we interact with the API instead.

87
00:07:42.230 --> 00:07:47.225
So let's open source/lib, add an api.ts

88
00:07:47.225 --> 00:07:52.669
file, And we're going to start
moving over some of that code.

89
00:07:52.669 --> 00:07:59.130
We'll get that base value,
drop that in here, we'll export it.

90
00:07:59.130 --> 00:08:05.371
And we'll export a get function, That

91
00:08:05.371 --> 00:08:13.680
takes the fetch object from our event,
Need to give it a type.

92
00:08:13.680 --> 00:08:18.759
The type of fetch is type
of global list fetch.

93
00:08:18.759 --> 00:08:23.418
And then it's gonna take
an endpoint which is a string.

94
00:08:23.418 --> 00:08:26.880
And then we'll optionally
add some parameters,

95
00:08:29.559 --> 00:08:36.442
Which is gonna be a record of strings, And

96
00:08:36.442 --> 00:08:39.300
then inside here we can make
the actual fetch calls.

97
00:08:41.130 --> 00:08:47.937
So we'll grab that, We'll replace this
with the endpoint that was passed in,

98
00:08:52.502 --> 00:09:00.867
Need to make this an async function,
And we can return,

99
00:09:03.242 --> 00:09:09.878
The JSON that we got from that response,
Okay, so now we can

100
00:09:09.878 --> 00:09:15.430
replace the existing calls to fetch in our
load function with our new API helper.

101
00:09:15.430 --> 00:09:16.792
First, we import it.

102
00:09:16.792 --> 00:09:20.751
Import start as API from lib-API,

103
00:09:24.125 --> 00:09:27.284
And we'll replace this whole
thing with const trending equals,

104
00:09:29.257 --> 00:09:32.621
Await api.get pass in fetch, and

105
00:09:32.621 --> 00:09:36.921
then we'll just grab that endpoint there,

106
00:09:39.758 --> 00:09:48.542
And we can delete all of that,
And we can delete this too,

107
00:10:17.487 --> 00:10:21.450
Now a moment ago I mentioned that we
don't yet have all the information.

108
00:10:21.450 --> 00:10:26.140
The movie database API allows you to make
multiple requests in one go by adding

109
00:10:26.140 --> 00:10:32.417
the append to results parameter, And

110
00:10:32.417 --> 00:10:36.356
that looks like this append to results.

111
00:10:36.356 --> 00:10:40.826
We can specify which pieces
of additional data we want to

112
00:10:40.826 --> 00:10:43.690
get when we fetch a featured movie.

113
00:10:45.310 --> 00:10:51.966
And particularly right now we
want to get the images property.

114
00:10:51.966 --> 00:10:57.440
All right, so we're making a fetch to this
endpoint and we're passing in a parameter.

115
00:10:57.440 --> 00:11:00.056
We need to do something
with that parameter.

116
00:11:00.056 --> 00:11:05.930
So we'll go back into our API module.

117
00:11:05.930 --> 00:11:10.466
And we're gonna add
a query string parameter

118
00:11:10.466 --> 00:11:14.998
based on what was passed
in by creating a new,

119
00:11:14.998 --> 00:11:20.009
url search params object,
url search params will

120
00:11:20.009 --> 00:11:25.020
take any objects that has
a set of key value pass and

121
00:11:25.020 --> 00:11:29.315
it will that into
a queryable search params

122
00:11:29.315 --> 00:11:34.000
object that you can easily
turn into a string.

123
00:11:34.000 --> 00:11:39.071
So we just add question mark and
then q, that is now gonna be a URL

124
00:11:39.071 --> 00:11:44.259
that reflects those parameters
in a fully URL encoded fashion,

125
00:11:48.309 --> 00:11:53.025
So if we've set this up correctly,
we're now making the full API

126
00:11:53.025 --> 00:11:57.156
call is gonna add all of
the images to our featured movie.

127
00:11:57.156 --> 00:11:58.320
Append to response.

128
00:11:58.320 --> 00:12:03.356
Okay, so I got this wrong it's actually
not append to result it's append to

129
00:12:03.356 --> 00:12:09.441
response, And

130
00:12:09.441 --> 00:12:14.238
now at long last we have
this images object inside

131
00:12:14.238 --> 00:12:19.154
the featured movie where
we can grab a backdrop and

132
00:12:19.154 --> 00:12:25.023
we can grab a logo to put in our
big hero slot at the top there,

