WEBVTT

1
00:00:00.390 --> 00:00:03.260
So far, we've been creating
pages in our application, but

2
00:00:03.260 --> 00:00:05.802
SvelteKit allows you to
create more than just pages.

3
00:00:05.802 --> 00:00:09.617
You can also create API routes
by adding a server.js file,

4
00:00:09.617 --> 00:00:14.427
instead of a page server.js file in
a page.svelte that exports functions

5
00:00:14.427 --> 00:00:19.799
corresponding to HTTP methods like GET,
POST, PATCH, PUT, DELETE, and so on.

6
00:00:19.799 --> 00:00:25.893
So this app here fetches data from a /roll
API route when you click the button.

7
00:00:25.893 --> 00:00:30.679
And at the moment,
we haven't implemented that route, so

8
00:00:30.679 --> 00:00:36.246
let's do that by adding
a src/routes/roll/+server.js file.

9
00:00:36.246 --> 00:00:43.661
Let's click the New File icon,
roll/+server.js.

10
00:00:43.661 --> 00:00:48.690
And from here, we can export functions
that correspond to the HTTP verbs.

11
00:00:48.690 --> 00:00:50.137
In this case, we're gonna have a GET.

12
00:00:53.204 --> 00:00:56.181
We get a random number between 1 and 6.

13
00:01:12.171 --> 00:01:16.273
And we're gonna return
that as a response object.

14
00:01:20.934 --> 00:01:26.262
We need to add a header
that tells the browser

15
00:01:26.262 --> 00:01:33.471
that the response is of
Type': 'application/json'.

16
00:01:33.471 --> 00:01:38.155
Now, just like request, this response
thing here is a web standard.

17
00:01:38.155 --> 00:01:42.746
It's an object that you deal with when
you use the fetch API and other times.

18
00:01:42.746 --> 00:01:46.808
And so inside our API route handlers,
our job is to take a request and

19
00:01:46.808 --> 00:01:49.840
return one of these response objects.

20
00:01:49.840 --> 00:01:53.089
You can find the documentation on MDM.

21
00:01:55.876 --> 00:02:00.010
Now, since doing this sort of thing
is pretty common in an API route,

22
00:02:00.010 --> 00:02:03.740
returning JSON, we actually have
a helper to do that for you.

23
00:02:03.740 --> 00:02:11.097
I'm gonna import that helper now,
import { json } from 'svelte.js/kit';.

24
00:02:11.097 --> 00:02:14.600
And then instead of returning all of this,

25
00:02:14.600 --> 00:02:19.384
we're just gonna return json,
and then pass in the data.

26
00:02:21.268 --> 00:02:25.440
So now, if we roll the dice,
we're gonna fetch the response,

27
00:02:25.440 --> 00:02:30.718
which is the same response object that
we've just returned from the API route,

28
00:02:30.718 --> 00:02:36.341
and we're gonna assign that to this local
value that gets shown when we've rolled.

29
00:02:36.341 --> 00:02:38.289
Rolled a 1, not very good, try again.

30
00:02:38.289 --> 00:02:41.399
Rolled a 4,
I'm gonna keep going until I get a 6.

31
00:02:44.671 --> 00:02:45.842
Come on.

32
00:02:52.089 --> 00:02:53.795
Is my logic bad?

33
00:02:55.510 --> 00:02:56.760
I got a 6, finally.

34
00:02:56.760 --> 00:02:58.794
All right,
we can move on to the next section.

35
00:03:01.040 --> 00:03:05.605
Okay, so that was a GET handler, but you
can also add handlers that mutate data,

36
00:03:05.605 --> 00:03:07.790
such as a POST handler.

37
00:03:07.790 --> 00:03:08.889
Now, in most cases,

38
00:03:08.889 --> 00:03:13.310
you shouldn't use a POST handler when
you could use a form action instead.

39
00:03:13.310 --> 00:03:16.380
Form actions are gonna involve
less code for you to write, and

40
00:03:16.380 --> 00:03:20.646
they also work without JavaScript, as
we've seen, making things more resilient,

41
00:03:22.164 --> 00:03:25.059
But we can do it if we need to for
some reason.

42
00:03:25.059 --> 00:03:28.253
So we're gonna revisit
the todo app from before and

43
00:03:28.253 --> 00:03:31.752
we're gonna implement it this
time using an API route.

44
00:03:31.752 --> 00:03:35.592
Aside the keydown event handler
of the input at the top here,

45
00:03:35.592 --> 00:03:38.314
we're gonna post some data to the server.

46
00:03:42.510 --> 00:03:50.334
The response is gonna be the result
of fetching the todo API route.

47
00:03:54.315 --> 00:03:58.256
It's gonna be a POST call,
so add method: 'POST'.

48
00:03:58.256 --> 00:04:02.873
The body is gonna be a stringified JSON

49
00:04:02.873 --> 00:04:07.500
object containing the description.

50
00:04:10.583 --> 00:04:13.718
And we're gonna add that content-type
application JSON header.

51
00:04:23.728 --> 00:04:28.335
Okay, so when we hit the Enter
key inside this todo,

52
00:04:28.335 --> 00:04:32.735
we're posting data to
a route that we haven't yet

53
00:04:32.735 --> 00:04:36.760
created, so we need to create that now.

54
00:04:36.760 --> 00:04:40.100
Inside the routes directory,
create todo folder.

55
00:04:40.100 --> 00:04:42.986
Then inside there, create our server.js.

56
00:04:45.940 --> 00:04:50.626
And this time, we're gonna define a POST
handler instead of a GET handler.

57
00:04:53.206 --> 00:04:56.125
I'm gonna import that JSON helper
cuz we're gonna use it in a minute.

58
00:04:59.177 --> 00:05:04.180
And we're gonna import the same
database object that we're

59
00:05:04.180 --> 00:05:09.477
using inside the form action before,
import * as database from

60
00:05:09.477 --> 00:05:15.180
'$lib/server/database.js', that's
this file over here.

61
00:05:18.984 --> 00:05:21.156
Got a question from the crowd?

62
00:05:21.156 --> 00:05:23.864
&gt;&gt; Are API endpoints open by default, or

63
00:05:23.864 --> 00:05:28.950
do you need some sort of calls config
to open up for third-party users?

64
00:05:28.950 --> 00:05:31.235
&gt;&gt; Yes, so that's a very good question.

65
00:05:31.235 --> 00:05:36.423
SvelteKit will by default
lock down your API routes to

66
00:05:36.423 --> 00:05:42.370
prevent people from posting
data from different sites.

67
00:05:42.370 --> 00:05:46.341
So to protect your users from phishing
attacks and things like that,

68
00:05:46.341 --> 00:05:50.994
where someone has a website that looks
like yours and posts some malicious data,

69
00:05:50.994 --> 00:05:54.280
which then uses your cookies
to do something nefarious,

70
00:05:54.280 --> 00:05:58.060
SvelteKit will look at the origin
header when a request comes in.

71
00:05:58.060 --> 00:06:02.854
And if you're trying to mutate some data,
it will reject it by default.

72
00:06:02.854 --> 00:06:08.226
You can disable that behavior and you can
add your own calls behavior if you want,

73
00:06:08.226 --> 00:06:13.080
but the default behavior is to try and
keep your users safe.

74
00:06:13.080 --> 00:06:14.626
Hopefully that answers the question.

75
00:06:17.860 --> 00:06:22.388
&gt;&gt; Is that JSON utility just using
json.parse under the hood or

76
00:06:22.388 --> 00:06:24.263
does it support begins?

77
00:06:24.263 --> 00:06:28.302
&gt;&gt; It's just stringifying
the data that you're passing.

78
00:06:28.302 --> 00:06:32.340
Yeah, it's basically just trigger
over returning a new response with

79
00:06:32.340 --> 00:06:34.900
json.stringify, the same data.

80
00:06:34.900 --> 00:06:39.316
Yeah, if you wanna pass rich data,
then you're gonna need to use your own

81
00:06:39.316 --> 00:06:42.823
serialization and
your own deserialization on the plan.

82
00:06:47.700 --> 00:06:50.417
All right, so
we've imported everything that we need,

83
00:06:50.417 --> 00:06:52.239
it's time to add the handler itself.

84
00:06:59.080 --> 00:07:06.404
First thing we'll do is get the JSON
that was sent from the browser,

85
00:07:06.404 --> 00:07:10.400
using await request.json();.

86
00:07:13.649 --> 00:07:16.416
We're gonna grab the userid
from the cookies.

87
00:07:23.374 --> 00:07:27.392
And then we're gonna get the id
of the todo that we create so

88
00:07:27.392 --> 00:07:29.121
that we can pass it back.

89
00:07:34.600 --> 00:07:37.517
Passing the userid and the description.

90
00:07:38.871 --> 00:07:43.840
Right, and that's gonna call
the createTodo function here,

91
00:07:43.840 --> 00:07:49.560
which is gonna create a new ID,
just a random string of digits.

92
00:07:49.560 --> 00:07:52.297
It'll add that to the in-memory database,
and

93
00:07:52.297 --> 00:07:55.044
then it'll return the ID
to whatever called it.

94
00:07:56.302 --> 00:07:59.238
Then we can take that ID,
send it back to the browser.

95
00:08:04.139 --> 00:08:07.937
We're gonna pass in status: 201.

96
00:08:07.937 --> 00:08:14.337
This time, 201 is the HTTP status code
that you use when you create a resource.

97
00:08:18.092 --> 00:08:21.767
If you wanna learn more
about HTTP status codes,

98
00:08:21.767 --> 00:08:27.594
which we'll use a few times in this
workshop, a site which is very helpful and

99
00:08:27.594 --> 00:08:34.167
explains the difference between,
for example, an HTTP 200 and a 201.

100
00:08:34.167 --> 00:08:38.764
No, there we go, 200, okay.

101
00:08:43.726 --> 00:08:47.205
So back inside the event
handler on the page.

102
00:08:48.985 --> 00:08:51.690
We need to do something with
the response that we just generated.

103
00:08:53.260 --> 00:08:55.045
Grab the response.json,

104
00:08:59.805 --> 00:09:03.724
In much the same way that we got
the request.json on the server.

105
00:09:03.724 --> 00:09:08.730
And then we are gonna mutate the todos
array directly inside this handler.

106
00:09:20.104 --> 00:09:23.520
And then, finally, the value gets reset so
that we can add a new todo.

107
00:09:25.530 --> 00:09:30.405
Now, this mutation that we're doing here,
this is perhaps a little bit unorthodox.

108
00:09:30.405 --> 00:09:34.677
You should only do this if the result of
that mutation is the same result that you

109
00:09:34.677 --> 00:09:36.630
would get if you reloaded the page.

110
00:09:36.630 --> 00:09:38.750
Otherwise, you'll get into
an inconsistent state.

111
00:09:38.750 --> 00:09:42.400
But because we control this state,
it's a safe mutation to make.

112
00:09:42.400 --> 00:09:45.034
So now, if I add a todo,

113
00:09:47.805 --> 00:09:51.460
It's gonna add that to the list.

