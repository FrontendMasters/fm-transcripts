WEBVTT

1
00:00:00.000 --> 00:00:04.078
Very often your routes will
have dynamic parameters.

2
00:00:04.078 --> 00:00:08.137
That means that you'll have a single
route that can serve multiple pages.

3
00:00:08.137 --> 00:00:13.755
So here for
example we have a blog/(slug)/page.svelt.

4
00:00:13.755 --> 00:00:20.312
That creates a route that will match
blog/1, blog/2, blog/3, and so on.

5
00:00:20.312 --> 00:00:23.243
At the moment, that file doesn't exist,
so let's create it.

6
00:00:32.370 --> 00:00:35.284
For now, we'll just put in some
static placeholder content.

7
00:00:38.683 --> 00:00:42.755
And if we navigate to any of the pages
that are defined by that route,

8
00:00:42.755 --> 00:00:45.338
then we'll see that same static content.

9
00:00:47.995 --> 00:00:50.770
Now, the way that dynamic parameters
are defined is actually very flexible.

10
00:00:50.770 --> 00:00:53.651
You can have multiple
parameters in a single segment,

11
00:00:53.651 --> 00:00:56.218
you can have multiple
parameters in a route, and

12
00:00:56.218 --> 00:01:00.242
we'll learn more about complex routing
patterns later on in the workshop.

13
00:01:07.630 --> 00:01:11.060
So SveltKit's job boils
down to three things.

14
00:01:11.060 --> 00:01:15.805
It's routing, and then it's loading some
data that's needed by the route, and

15
00:01:15.805 --> 00:01:19.944
then ultimately rendering the HTML or
the dom that that route defines.

16
00:01:19.944 --> 00:01:23.210
And we've seen the routing part,
and the rendering part,

17
00:01:23.210 --> 00:01:25.442
now we need to learn about data loading.

18
00:01:25.442 --> 00:01:29.390
Every page of your app can
define a load function in

19
00:01:29.390 --> 00:01:34.190
a page.server.js file alongside
the page.svelte file.

20
00:01:34.190 --> 00:01:39.096
As the file name suggests, this module
only ever runs on the server, even for

21
00:01:39.096 --> 00:01:43.036
client-side navigations where
we get the data using fetch.

22
00:01:43.036 --> 00:01:46.679
So we'll add a blog/page.server.js file,
so

23
00:01:46.679 --> 00:01:51.360
that we can replace those
hard-coded links, the 1, 2, 3,

24
00:01:51.360 --> 00:01:56.758
with some blog post data that's
defined in this module here, data.js.

25
00:01:56.758 --> 00:02:02.258
So, in the blog directory,
hit the new file icon and

26
00:02:02.258 --> 00:02:05.508
create +page.server.js.

27
00:02:08.981 --> 00:02:13.561
And then we're gonna type out
the contents of this file.

28
00:02:13.561 --> 00:02:17.046
Now, we covered this in the Svelte
part of the course, but

29
00:02:17.046 --> 00:02:21.601
if you're tempted to just select this and
copy and paste it into the editor,

30
00:02:21.601 --> 00:02:25.753
it's gonna pop up with a warning
saying that you shouldn't do that.

31
00:02:25.753 --> 00:02:29.613
And the reason is that you will learn much
more effectively if you do in fact type

32
00:02:29.613 --> 00:02:30.793
out the code yourself.

33
00:02:30.793 --> 00:02:34.289
You'll develop better muscle memory and
you'll notice things that you would not

34
00:02:34.289 --> 00:02:36.220
notice if you were just copying and
pasting.

35
00:02:36.220 --> 00:02:42.853
So, I do urge you to resist the temptation
to enable copying and pasting.

36
00:02:42.853 --> 00:02:50.352
So let's do this,
input { posts } from ',/data.js'.

37
00:02:50.352 --> 00:02:52.237
And then we're gonna
export our load function.

38
00:02:56.206 --> 00:03:00.279
For now, we don't need all of the post
information, we just need the summaries,

39
00:03:00.279 --> 00:03:04.251
because the post content isn't important
until we visit the blog post itself.

40
00:03:04.251 --> 00:03:10.025
So we'll create a summaries property here,
posts.map(post),

41
00:03:10.025 --> 00:03:15.531
and then we'll return, A slug,

42
00:03:15.531 --> 00:03:20.847
so that we know where to navigate to, and
a title so that we can populate the list.

43
00:03:27.382 --> 00:03:28.699
There's a little call out here.

44
00:03:28.699 --> 00:03:31.807
For the sake of the tutorial, we're
importing data from this data.js module.

45
00:03:31.807 --> 00:03:36.363
Obviously, in a real application,
you'll be pulling this data from your file

46
00:03:36.363 --> 00:03:41.407
system, from some markdown files, or from
a content management system or a database.

47
00:03:41.407 --> 00:03:45.265
But for the sake of this tutorial,
we're gonna keep it simple and

48
00:03:45.265 --> 00:03:47.664
import the data directly from a module.

49
00:03:47.664 --> 00:03:53.191
And we can access this data in
page.svelte by exposing a data prop.

50
00:03:53.191 --> 00:03:54.721
So go over to that file,

51
00:03:54.721 --> 00:03:58.555
and we'll add a script element
at the top of the component.

52
00:04:04.158 --> 00:04:08.046
And everything that is returned
from that load function is gonna

53
00:04:08.046 --> 00:04:10.500
be available now on that data property.

54
00:04:10.500 --> 00:04:15.738
So we can get rid of all of these and
replace them within each block

55
00:04:15.738 --> 00:04:20.503
that iterates over the data array and
renders a list item.

56
00:04:30.224 --> 00:04:37.338
Replace the hard coded one with slug,
and the hard coded title with title.

57
00:04:40.706 --> 00:04:43.508
And we're now seeing some
content being rendered.

58
00:04:45.785 --> 00:04:50.640
Cuz if you visit these pages,
then we still see that hard

59
00:04:50.640 --> 00:04:55.097
coded content on the blog
slug page.svelte file.

60
00:04:55.097 --> 00:04:56.110
So let's fix that.

61
00:04:56.110 --> 00:05:02.959
Let's create another file that loads
data for an individual blog post.

62
00:05:02.959 --> 00:05:08.439
Inside the block slug directory,
create a new file again page.server.js.

63
00:05:08.439 --> 00:05:12.532
And inside here,
we'll import from that module again,

64
00:05:12.532 --> 00:05:18.597
import { posts } from '../' this time,
because it's one directory higher.

65
00:05:22.384 --> 00:05:24.459
And again,
we're gonna create a load function.

66
00:05:24.459 --> 00:05:27.455
This time,
we're gonna use the params object,

67
00:05:27.455 --> 00:05:31.996
because that's how we're gonna know
which slug we need to load data for.

68
00:05:37.057 --> 00:05:41.240
So of all the posts in the array,
we're gonna find the one,

69
00:05:43.930 --> 00:05:46.297
Where the slug matches
the current parameter.

70
00:05:52.405 --> 00:05:54.079
Then we're simply gonna return that.

71
00:06:00.835 --> 00:06:06.361
And now we can create a data
prop on the page component,

72
00:06:06.361 --> 00:06:09.976
and use that to inject the content.

73
00:06:21.898 --> 00:06:25.423
All right, so we have our title,
and then we'll create container for

74
00:06:25.423 --> 00:06:26.517
the content itself.

75
00:06:26.517 --> 00:06:29.718
We're gonna use the HTML tag, and
as we discussed in the Svelte course,

76
00:06:29.718 --> 00:06:32.730
this is something that you should
only use with data that you trust.

77
00:06:32.730 --> 00:06:36.458
Never use it with untrusted data that
was submitted by users, for example,

78
00:06:36.458 --> 00:06:38.089
because it is not sanitized, and

79
00:06:38.089 --> 00:06:41.660
you could expose your users to
a cross-site scripting vulnerability.

80
00:06:47.270 --> 00:06:53.144
Okay, so we now have some data powering

81
00:06:53.144 --> 00:06:57.600
that h1 and the div below it.

82
00:06:57.600 --> 00:07:00.021
There is one last detail that
we need to take care of here.

83
00:07:00.021 --> 00:07:04.607
Someone could visit a non-existent post,
and when they do that, they'll get

84
00:07:04.607 --> 00:07:08.996
an error because we haven't been able
to find the post in order to render it.

85
00:07:08.996 --> 00:07:11.682
And we wanna give them a more
informative error than a 500,

86
00:07:11.682 --> 00:07:13.088
this should in fact be a 404.

87
00:07:13.088 --> 00:07:16.096
So we need to take care of
that when we load the data.

88
00:07:16.096 --> 00:07:20.330
Go back into the blog slug
page.server.js file, and

89
00:07:20.330 --> 00:07:26.499
after we've declared the post variable,
we'll say that if we don't have it,

90
00:07:26.499 --> 00:07:31.028
then we need to throw an error,
which is gonna be a 404.

91
00:07:31.028 --> 00:07:33.888
And we need to import the error
helper from SvelteKit.

92
00:07:39.896 --> 00:07:44.603
And so
we now see the appropriate 404 error page.

93
00:07:44.603 --> 00:07:48.702
We'll learn more about error
handling later on in the workshop.

94
00:07:48.702 --> 00:07:54.271
&gt;&gt; Can you have a loading page
that shows with the spinner before

95
00:07:54.271 --> 00:08:01.161
the +page.ts load function finishes and
+page that Svelt is rendered?

96
00:08:01.161 --> 00:08:06.019
&gt;&gt; Yes, you can, unfortunately because
of a technical limitation with web

97
00:08:06.019 --> 00:08:10.327
containers, which is the technology
that powers this website,

98
00:08:10.327 --> 00:08:13.719
I cannot demonstrate
streaming in this tutorial.

99
00:08:13.719 --> 00:08:20.059
What I can do is show a little demo
that has been put together with this,

100
00:08:20.059 --> 00:08:24.049
it's called sveltekit-on-the-edge.

101
00:08:24.049 --> 00:08:29.720
So, this is a page that is
being rendered dynamically

102
00:08:29.720 --> 00:08:34.138
in an edge function, is Osseo near here?

103
00:08:34.138 --> 00:08:37.613
I don't know if that's the nearest point

104
00:08:37.613 --> 00:08:41.792
of presence that this page
is being rendered out.

105
00:08:41.792 --> 00:08:47.498
And if I click on the stream link here,
then it's actually

106
00:08:47.498 --> 00:08:53.445
gonna get some data from the server
that is gonna be delayed.

107
00:08:53.445 --> 00:08:56.708
So we're actually able to stream
promises from the edge function or

108
00:08:56.708 --> 00:08:59.181
from the serverless function or
from your server.

109
00:08:59.181 --> 00:09:05.672
And they will be rendered in the browser
when the promise resolves using streaming.

110
00:09:05.672 --> 00:09:07.446
So that's how we approach that problem.

111
00:09:07.446 --> 00:09:11.633
We don't have a dedicated loading page or
something like that, instead,

112
00:09:11.633 --> 00:09:14.260
you return promises from your data.

113
00:09:14.260 --> 00:09:21.000
And in that way, you're able to render the
UI that is most appropriate for your case.

114
00:09:21.000 --> 00:09:27.100
&gt;&gt; There was another question
that came in around,

115
00:09:27.100 --> 00:09:32.902
kind of, there's Svelte native for mobile,

116
00:09:32.902 --> 00:09:37.829
but have you seen any traction on that?

117
00:09:37.829 --> 00:09:42.431
Not knowing too many people
talking about Svelte mobile.

118
00:09:42.431 --> 00:09:47.825
Just wondering if that's a good route or
if you're thinking about mobile?

119
00:09:47.825 --> 00:09:51.877
&gt;&gt; I haven't personally used
Svelte native, some people have.

120
00:09:51.877 --> 00:09:56.786
I believe it is an up to date and
functional project.

121
00:09:56.786 --> 00:09:59.828
And it's the only one that we have,
as far as I'm aware.

122
00:09:59.828 --> 00:10:00.965
So if you do wanna build a native app,

123
00:10:00.965 --> 00:10:02.786
then I definitely recommend
giving Svelte native a look.

124
00:10:02.786 --> 00:10:06.946
But it is not an officially supported
project, it comes from the community.

125
00:10:06.946 --> 00:10:11.167
It's something that, if we have time and
bandwidth to do, we would like to bring

126
00:10:11.167 --> 00:10:15.096
into the organization at some point and
have that as a first class project.

127
00:10:15.096 --> 00:10:18.946
But right now it's a little bit,
your manage may vary.

