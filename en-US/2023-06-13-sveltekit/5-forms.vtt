WEBVTT

1
00:00:00.530 --> 00:00:03.169
Okay, let's talk about forms,
one of my favorite topics.

2
00:00:03.169 --> 00:00:06.639
So in the chat on loading, we saw how to
get data from the server to the browser,

3
00:00:06.639 --> 00:00:09.440
but sometimes you need to send
data in the opposite direction.

4
00:00:09.440 --> 00:00:14.300
You need to get data from the browser back
to the server, and that's where the form

5
00:00:14.300 --> 00:00:19.028
element, which is the web platform's
way of submitting data comes into play.

6
00:00:19.028 --> 00:00:21.133
So let's build a little todo app.

7
00:00:21.133 --> 00:00:25.621
We've already got an in memory database
setup in this lips of a database module,

8
00:00:25.621 --> 00:00:28.140
and we're just putting
everything in a map.

9
00:00:28.140 --> 00:00:31.031
Obviously in a real app,
you would use an actual database but

10
00:00:31.031 --> 00:00:33.139
we're not gonna do that for this tutorial.

11
00:00:33.139 --> 00:00:37.549
And we have a load function in
source/routes/page.server.js,

12
00:00:37.549 --> 00:00:41.425
that uses the cookies API to get
ahold of the current user ID,

13
00:00:41.425 --> 00:00:44.781
if the user doesn't yet
have an ID, it assigns one.

14
00:00:44.781 --> 00:00:45.947
It gets the todos that
belong to that user.

15
00:00:48.606 --> 00:00:52.599
So this allows us to have a per-user
todo list, but we need to add a form so

16
00:00:52.599 --> 00:00:54.240
that we can create new todos.

17
00:00:54.240 --> 00:00:59.398
So go over to src/route/page.svelte,
and below the H1, we're gonna add

18
00:00:59.398 --> 00:01:07.173
a form element With a method of post, cuz
we're gonna post some data to the server.

19
00:01:10.063 --> 00:01:13.613
Inside there, we'll create a label,

20
00:01:14.864 --> 00:01:19.762
Add some text, add a todo,
Then we'll create an input.

21
00:01:22.830 --> 00:01:25.483
Give it a name which is
gonna be description.

22
00:01:29.973 --> 00:01:31.633
And I'm gonna disable
autocomplete as well.

23
00:01:38.746 --> 00:01:43.183
So we can now type into this form and
submit some data, but we get a 405 error

24
00:01:43.183 --> 00:01:47.082
because no actions exist for
this page right now so we can fix that.

25
00:01:47.082 --> 00:01:54.104
What we need to do is create
an action in our page.server.js file.

26
00:01:54.104 --> 00:01:55.851
This is the counterpart
to the load function.

27
00:01:57.825 --> 00:02:00.699
So down here, create an actions object.

28
00:02:05.578 --> 00:02:12.158
And we're gonna create a default action,
Which is gonna be an async function.

29
00:02:12.158 --> 00:02:14.014
That's gonna grab the cookies and
the request object.

30
00:02:18.736 --> 00:02:19.825
And first of all,

31
00:02:19.825 --> 00:02:24.262
is gonna grab the description from
that input by requesting the form data

32
00:02:32.307 --> 00:02:33.553
And getting the description.

33
00:02:33.553 --> 00:02:39.726
And it's gonna create it todo in the mat
that belongs to the current user.

34
00:02:39.726 --> 00:02:46.723
So db.createTodo(cookies.get(userid)

35
00:02:46.723 --> 00:02:53.964
data.get Description.

36
00:02:55.717 --> 00:02:58.043
Okay, this request object here,

37
00:02:58.043 --> 00:03:02.783
this is a standard request interface
that is part of the web platform.

38
00:03:02.783 --> 00:03:06.643
You can learn about the request
object on MDN if you're not familiar,

39
00:03:06.643 --> 00:03:09.929
it's something that you'll
use a lot in web development.

40
00:03:09.929 --> 00:03:14.094
And SvelteKit uses standard
web APIs as far as it can.

41
00:03:16.859 --> 00:03:22.005
When we call await request.formData, that
returns an instance of the FormData API,

42
00:03:22.005 --> 00:03:26.514
which is the same object that you get in
the browser if you call new FormData,

43
00:03:26.514 --> 00:03:28.433
and then pass in a form element.

44
00:03:34.151 --> 00:03:39.740
So now if we type in some data,
And hit Enter,

45
00:03:39.740 --> 00:03:46.380
post it to the server, you'll see that
it reloads the page with the new data.

46
00:03:46.380 --> 00:03:49.796
And you'll notice that we haven't
had to add any fetch code,

47
00:03:49.796 --> 00:03:52.961
we haven't had to do error handling and
stuff like that.

48
00:03:52.961 --> 00:03:53.997
Data updates automatically.

49
00:03:53.997 --> 00:03:56.135
And because we're using a form element,

50
00:03:56.135 --> 00:03:59.503
this app would continue to work
even if JavaScript was disabled.

51
00:03:59.503 --> 00:04:03.329
And we can actually demonstrate that
by opening this app in a new tab.

52
00:04:05.523 --> 00:04:07.717
I'm gonna open the settings.

53
00:04:12.153 --> 00:04:15.971
Scroll down to Disable JavaScript,
reload the page.

54
00:04:19.809 --> 00:04:25.377
Hit Enter, and the page reloads even
though we're not using JavaScript, we

55
00:04:25.377 --> 00:04:31.390
see up to date personalized data and close
that window now get back to the tutorial.

56
00:04:34.879 --> 00:04:37.435
So just now we use a default action but
in practice,

57
00:04:37.435 --> 00:04:40.415
a page that only has a single
action is actually quite rare.

58
00:04:40.415 --> 00:04:44.006
Most of the time you will need to
have multiple actions on a page.

59
00:04:44.006 --> 00:04:45.961
So in the case of our todo app,

60
00:04:45.961 --> 00:04:49.965
we wanna be able to delete todos
once we've completed them.

61
00:04:49.965 --> 00:04:52.968
First thing we're gonna do is get
rid of the default action and

62
00:04:52.968 --> 00:04:55.181
turn it into a named action,
call it create.

63
00:04:58.160 --> 00:05:00.154
And then we'll create a new one,
let's call it delete.

64
00:05:02.632 --> 00:05:03.673
And it's gonna be the same deal.

65
00:05:03.673 --> 00:05:06.284
It's an async function,
uses cookies and request.

66
00:05:09.574 --> 00:05:15.094
We're gonna get the data, And
we're gonna delete the todo.

67
00:05:25.003 --> 00:05:28.800
This time the data that we're gonna
get from the form is an ID property.

68
00:05:36.345 --> 00:05:41.102
Now the first thing we wanna do before we
implement the delete action inside our

69
00:05:41.102 --> 00:05:44.933
page is we need to update the form
action that creates the todo.

70
00:05:44.933 --> 00:05:49.652
So go back to page.svelte,
scroll up to the form, and

71
00:05:49.652 --> 00:05:53.048
we're gonna add an action attribute.

72
00:05:53.048 --> 00:05:56.931
By default, the action is
the same as the current page.

73
00:05:56.931 --> 00:06:00.460
And so if you just have form method
equals post without specifying an action,

74
00:06:00.460 --> 00:06:03.956
that is gonna call the default action
on the page that you're currently on.

75
00:06:03.956 --> 00:06:07.242
But in this case,
we wanna use a named action.

76
00:06:07.242 --> 00:06:11.806
We'll do that by adding a query
parameter with a value of

77
00:06:11.806 --> 00:06:14.630
create with a slash in front of it.

78
00:06:18.164 --> 00:06:23.483
So what this means is we take the current
URL and we append a query string

79
00:06:23.483 --> 00:06:28.999
with a parameter whose name is /create and
which doesn't have a value.

80
00:06:28.999 --> 00:06:33.045
And that tells SvelteKit that we're trying
to invoke the create action on this page.

81
00:06:37.980 --> 00:06:41.880
Now the action doesn't have to be on this
page, you can actually have an action that

82
00:06:41.880 --> 00:06:46.005
points to a different page entirely, which
is very useful when you're building things

83
00:06:46.005 --> 00:06:49.315
like login and logout forms that
should exist on all pages of your app.

84
00:06:54.861 --> 00:06:58.219
Okay, so lastly, we wanna create a form
for each of the todos in our list.

85
00:07:02.081 --> 00:07:05.646
So inside here,
instead of just having that description,

86
00:07:05.646 --> 00:07:11.405
lead form method = POST,
Invoke the delete action.

87
00:07:15.118 --> 00:07:17.441
And you'll recall that inside the action,

88
00:07:17.441 --> 00:07:20.966
we were referring to an ID property
that we need to make available.

89
00:07:20.966 --> 00:07:24.851
So each todo has an ID already.

90
00:07:24.851 --> 00:07:31.066
And to add that to the form
without showing it to the user,

91
00:07:31.066 --> 00:07:37.412
because the user doesn't want
a random string of digits,

92
00:07:37.412 --> 00:07:43.110
we'll do input type = hidden,
give it a name of id so

93
00:07:43.110 --> 00:07:47.513
that we can get it with form.getid, and

94
00:07:47.513 --> 00:07:51.039
the value is gonna be todo.id.

95
00:07:52.579 --> 00:07:54.153
Let a span containing
the todo description.

96
00:07:56.998 --> 00:08:02.116
And then we're gonna add
a button with a label So

97
00:08:02.116 --> 00:08:07.473
that people who can't see
the icon that is about to appear

98
00:08:07.473 --> 00:08:12.393
can also understand what
this button is going to do.

99
00:08:14.803 --> 00:08:20.149
Okay, you'll see that we have these
little trash can icons down here

100
00:08:20.149 --> 00:08:26.981
that's coming from the remove.svg which is
being controlled down here with some CSS.

101
00:08:32.269 --> 00:08:34.707
So if we've wired everything up correctly,

102
00:08:34.707 --> 00:08:37.986
then we should now be able to
delete todos as well as add them.

103
00:08:40.176 --> 00:08:40.925
And indeed it works.

104
00:08:40.925 --> 00:08:44.626
And so if we refresh the page,
we'll see that those todos stay deleted.

