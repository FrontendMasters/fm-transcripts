WEBVTT

1
00:00:00.000 --> 00:00:03.483
Okay, so
our view page is starting to take shape.

2
00:00:03.483 --> 00:00:06.105
But obviously we need to
get more CSS in here so

3
00:00:06.105 --> 00:00:08.591
the viewport isn't constrained by this.

4
00:00:08.591 --> 00:00:12.956
And the first thing we're gonna need to
do is set some more styles on the body

5
00:00:12.956 --> 00:00:13.591
element.

6
00:00:13.591 --> 00:00:18.448
So we're gonna open our styles.css file.

7
00:00:20.567 --> 00:00:25.994
And we're gonna give the body a height

8
00:00:25.994 --> 00:00:34.418
of 100 vh like this, And a margin of 0.

9
00:00:38.385 --> 00:00:43.122
And then inside the layout we
want the main element to fill as

10
00:00:43.122 --> 00:00:48.074
much of the screen as possible
without exceeding its bounds.

11
00:00:50.373 --> 00:00:52.653
So I'll add a selector for main.

12
00:00:54.578 --> 00:00:58.696
And we'll give it a height of 0,
but a flex of 1,

13
00:00:58.696 --> 00:01:04.190
which is a bit of an odd combination,
but it basically means expand

14
00:01:04.190 --> 00:01:09.507
to fill the space available, but
don't say any more than that.

15
00:01:09.507 --> 00:01:12.489
And we'll combine that
with overflow hidden.

16
00:01:12.489 --> 00:01:15.009
And now that we've done that,
we can get rid of the overflow.

17
00:01:15.009 --> 00:01:19.123
That constrained viewport size.

18
00:01:22.363 --> 00:01:25.931
So we'll just delete that
height of 20 pixels there.

19
00:01:33.724 --> 00:01:38.177
And it looks like we need to add
some more CSS in order to allow

20
00:01:38.177 --> 00:01:39.969
the container to flex.

21
00:01:53.238 --> 00:01:55.863
All right, once again we're adding
display flex to an element,

22
00:01:55.863 --> 00:01:57.832
we're gonna give it a flex
direction of column.

23
00:01:57.832 --> 00:02:02.916
And we're gonna give this
element a height of 100%.

24
00:02:04.770 --> 00:02:09.596
And so now this is behaving
the way that we want it to.

25
00:02:13.514 --> 00:02:18.177
So let's implement infinite loading.

26
00:02:18.177 --> 00:02:22.389
Here, instead of logging that
we need to load some more data,

27
00:02:22.389 --> 00:02:24.495
we'll actually log the data.

28
00:02:24.495 --> 00:02:25.659
It'll actually load the data.

29
00:02:29.387 --> 00:02:33.061
And we'll turn this into a sync function.

30
00:02:33.061 --> 00:02:35.889
And because every time we
scroll this event fires,

31
00:02:35.889 --> 00:02:39.704
we wanna keep track of whether we're
already loading the next data so

32
00:02:39.704 --> 00:02:42.747
that we don't issue a whole
bunch of requests at once.

33
00:02:42.747 --> 00:02:47.660
So I'm gonna add a new value appending.

34
00:02:47.660 --> 00:02:50.492
And default that to false.

35
00:02:50.492 --> 00:02:55.251
First up, if there is no next page,
then we don't have anything to load.

36
00:02:55.251 --> 00:03:02.585
So if data.next_page does not exist,
then we're just gonna bail out.

37
00:03:02.585 --> 00:03:07.104
And if we're already appending some data,
then we're gonna bail out as well.

38
00:03:13.475 --> 00:03:18.069
We're gonna use the API
that we built earlier.

39
00:03:25.155 --> 00:03:29.593
All right, because it's not
using any server-only code,

40
00:03:29.593 --> 00:03:33.778
it's quite okay to import
this into our page component.

41
00:03:33.778 --> 00:03:37.810
We'll do const next = away api.get, and

42
00:03:37.810 --> 00:03:42.738
this time we're passing in
the windows fetch object

43
00:03:42.738 --> 00:03:46.557
instead of the load event fetch object.

44
00:03:46.557 --> 00:03:52.404
It's the same thing because
we've got a fully qualified URL.

45
00:03:53.834 --> 00:04:01.718
And now we're gonna use the endpoint that
was returned from our load function.

46
00:04:05.108 --> 00:04:11.734
And the page parameter is
gonna be data next_page.

47
00:04:15.299 --> 00:04:19.821
And we're just gonna mutate
the array in place like we did in

48
00:04:19.821 --> 00:04:22.909
the earlier exercise with our to-dos.

49
00:04:22.909 --> 00:04:29.032
Data.movies =,
we'll copy the existing movies and

50
00:04:29.032 --> 00:04:32.902
then we'll add the next results.

51
00:04:36.513 --> 00:04:42.123
And we'll need to update
the next page as well,

52
00:04:42.123 --> 00:04:50.267
data.next_page = next.page is
less than all of the total pages.

53
00:04:50.267 --> 00:04:56.901
And if we just copy the logic
from before it should work,

54
00:04:56.901 --> 00:05:01.007
otherwise that's gonna be null.

55
00:05:01.007 --> 00:05:02.675
Okay, let's cross our fingers.

56
00:05:02.675 --> 00:05:07.129
If this works,
then we're gonna have infinite loading.

57
00:05:07.129 --> 00:05:10.906
And you can see that number on
the right is in fact increasing.

58
00:05:12.266 --> 00:05:17.072
So we've loaded all of this extra data,
but we're not rendering it to the DOM,

59
00:05:17.072 --> 00:05:19.744
we're only rendering 16 items at a time.

60
00:05:21.651 --> 00:05:27.269
So that implements our trending,
upcoming, and now playing views.

61
00:05:27.269 --> 00:05:31.014
I'm just gonna get rid of this debugging
code here because that's no longer

62
00:05:31.014 --> 00:05:31.607
relevant.

