WEBVTT

1
00:00:00.370 --> 00:00:04.430
But if we get into an infinite
scrolling situation,

2
00:00:04.430 --> 00:00:06.931
then this is not gonna be ideal.

3
00:00:06.931 --> 00:00:09.458
Because we don't wanna be rendering
hundreds and hundreds of these elements.

4
00:00:09.458 --> 00:00:11.820
Instead, we want to render
just a few at a time.

5
00:00:11.820 --> 00:00:15.185
So we need to use a technique
called windowing, and

6
00:00:15.185 --> 00:00:20.220
only render the elements that
are actually relevant at the moment.

7
00:00:20.220 --> 00:00:24.624
And in order to do this,
we first need to wrap this entire thing in

8
00:00:24.624 --> 00:00:29.211
an element that I'm gonna call viewport,
div class = viewport.

9
00:00:34.983 --> 00:00:37.880
For now, just so that we can see it,

10
00:00:37.880 --> 00:00:42.235
we'll give it a maximum
height of say 500 pixels.

11
00:00:47.980 --> 00:00:52.248
And we'll make that

12
00:00:52.248 --> 00:00:57.022
overflow-y of auto.

13
00:00:59.910 --> 00:01:02.234
And right now, of course,
we're still rendering everything.

14
00:01:02.234 --> 00:01:07.288
But now that we have some scroll
behavior on that viewport, we can start

15
00:01:07.288 --> 00:01:13.030
to do some calculations about which of
these elements should actually be shown.

16
00:01:15.240 --> 00:01:18.861
And before we do that,
let's add the next page link for

17
00:01:18.861 --> 00:01:21.480
the users who don't have JavaScript.

18
00:01:23.070 --> 00:01:28.770
So if next is specified,
then we'll add a href

19
00:01:28.770 --> 00:01:35.900
= (next) with some text
that just says next page.

20
00:01:35.900 --> 00:01:39.686
So for our windowing,
we're gonna need to add a scroll handler.

21
00:01:39.686 --> 00:01:41.221
And on every scroll event,

22
00:01:41.221 --> 00:01:45.839
we're gonna need to recalculate which
elements should currently be in the view.

23
00:01:45.839 --> 00:01:49.416
So I'm gonna create a function
called handle_scroll.

24
00:01:54.114 --> 00:01:58.246
And I'm gonna create some variables that
are bound to the elements that we're

25
00:01:58.246 --> 00:01:59.317
dealing with here.

26
00:01:59.317 --> 00:02:02.690
We're gonna have one for the viewport.

27
00:02:03.910 --> 00:02:07.016
It's gonna be an HTMLDivElement.

28
00:02:07.016 --> 00:02:11.284
And we're gonna have one for
the results block as well.

29
00:02:11.284 --> 00:02:14.038
And I'm gonna use bind:this
to get references to them.

30
00:02:18.216 --> 00:02:20.153
Viewport on the outer div.

31
00:02:24.729 --> 00:02:27.778
And results on the inner div there.

32
00:02:33.950 --> 00:02:37.293
And we're gonna add the scroll
listener to the viewport itself.

33
00:02:37.293 --> 00:02:40.730
It's gonna move this style declaration
into the CSS so that is out of the way.

34
00:02:40.730 --> 00:02:41.370
It's already there.

35
00:02:43.670 --> 00:02:48.580
On scroll,
we'll pass in that handle scroll function.

36
00:02:50.810 --> 00:02:56.335
Just to verify that it's working,
we'll log out the word

37
00:02:56.335 --> 00:03:01.318
scrolling, open our dev tools,
go to the console.

38
00:03:04.297 --> 00:03:08.048
Right when we scroll,
we get the event handler has been called.

39
00:03:18.622 --> 00:03:22.040
And this handle scroll function
is gonna have two jobs.

40
00:03:22.040 --> 00:03:26.756
Firstly, it's gonna determine which
elements are currently in view so

41
00:03:26.756 --> 00:03:30.390
that we can get rid of
the ones that are not.

42
00:03:30.390 --> 00:03:34.507
But secondly,
it's also gonna tell the parent component,

43
00:03:34.507 --> 00:03:36.370
how close we are to the end.

44
00:03:36.370 --> 00:03:40.118
If we're getting to the bottom of
the display elements, then if this is

45
00:03:40.118 --> 00:03:45.090
an infinite scroll component, then we're
gonna need to go and fetch some more data.

46
00:03:45.090 --> 00:03:47.300
And so for that to work,
we're gonna need to emit an event.

47
00:03:47.300 --> 00:03:50.666
But we're not gonna worry about
that just now for right now,

48
00:03:50.666 --> 00:03:53.509
we're just gonna deal with
the windowing aspect.

49
00:03:59.599 --> 00:04:05.186
So to track which elements
are supposed to be in view,

50
00:04:05.186 --> 00:04:08.424
we're gonna create a value a.

51
00:04:08.424 --> 00:04:11.530
This is gonna be the first
visible element.

52
00:04:12.680 --> 00:04:17.282
And b is the last, or
the first invisible element, I should say.

53
00:04:21.065 --> 00:04:27.786
And we can initialize these to zero and
movies.length

54
00:04:35.330 --> 00:04:38.289
So by default,
everything is gonna get rendered.

55
00:04:38.289 --> 00:04:42.713
Movies.slice a, b is gonna
ensure that only the movies that

56
00:04:42.713 --> 00:04:46.720
we're currently concerned
with are being rendered.

57
00:04:48.940 --> 00:04:51.860
And inside handles scroll,
we need to update those values.

58
00:04:53.030 --> 00:04:55.156
But if we're gonna be taking
things out of the DOM,

59
00:04:55.156 --> 00:04:57.540
then everything else is gonna
jump up to fill that space.

60
00:04:57.540 --> 00:05:01.573
So we're also gonna need to add some
padding on this element to compensate for

61
00:05:01.573 --> 00:05:03.570
the elements that have been removed.

62
00:05:03.570 --> 00:05:07.096
So we're gonna add some padding,

63
00:05:07.096 --> 00:05:12.820
padding_top = 0 and
padding_bottom = 0, right?

64
00:05:12.820 --> 00:05:15.608
So if we take out
the first row of elements,

65
00:05:15.608 --> 00:05:20.333
then we'll add some padding on
the results div that will make everything

66
00:05:20.333 --> 00:05:24.759
else get pushed down as though that
row of elements was still there.

67
00:05:26.150 --> 00:05:27.990
In order to do any of this,

68
00:05:27.990 --> 00:05:32.250
we need to know what size
the elements in this grid are.

69
00:05:32.250 --> 00:05:35.690
So we need to start adding some values for
those as well.

70
00:05:35.690 --> 00:05:39.852
We'll have one for item width,
which is gonna be a number.

71
00:05:39.852 --> 00:05:45.091
And one for item height,
also gonna be a number.

72
00:05:45.091 --> 00:05:49.115
And we'll have one for
the number of columns.

73
00:05:49.115 --> 00:05:53.690
And right now, that's hard-coded
in our CSS, down here is 4.

74
00:05:53.690 --> 00:05:56.810
So I'm just gonna do that here as well.

75
00:05:58.580 --> 00:06:03.117
Later, we can make this responsive because
on mobile, we're gonna have two columns,

76
00:06:03.117 --> 00:06:06.870
and then on a much bigger screen,
we're gonna have six.

77
00:06:06.870 --> 00:06:10.241
It'd be nice for that to be dynamic,
but for now, we'll just do hard coding.

78
00:06:15.421 --> 00:06:17.478
In order to get these values,

79
00:06:17.478 --> 00:06:22.595
we're gonna need to do some measurements
every time the page is resized.

80
00:06:22.595 --> 00:06:27.122
So we're gonna add a resize function
as well as a scroll function.

81
00:06:27.122 --> 00:06:31.191
Function handle_resize, and in here,

82
00:06:31.191 --> 00:06:36.896
we're gonna get those item width and
item height values.

83
00:06:41.956 --> 00:06:48.544
And so that we can call that function
every time the window gets resized,

84
00:06:48.544 --> 00:06:54.601
we'll add a Svelte:window
on:resize = (handle_resize).

85
00:06:54.601 --> 00:06:57.830
But we also wanna call this function
when the component is first mounted.

86
00:06:57.830 --> 00:06:59.280
So we're gonna add an onMount.

87
00:07:00.660 --> 00:07:04.730
I'm just gonna immediately
call handle_resize.

88
00:07:07.710 --> 00:07:12.384
And of course, after we've taken
the measurements that we're about to take,

89
00:07:12.384 --> 00:07:15.750
we're gonna wanna update the a and
b and padding values.

90
00:07:15.750 --> 00:07:19.983
So at the bottom of our
handle_resize function,

91
00:07:19.983 --> 00:07:23.322
we're gonna call it handle_scroll.

92
00:07:27.395 --> 00:07:32.343
So the first thing we're gonna do inside
handle_resize is grab a reference

93
00:07:32.343 --> 00:07:33.821
to the first element.

94
00:07:33.821 --> 00:07:37.702
Because we know that all of these poster
images have the same aspect ratio,

95
00:07:37.702 --> 00:07:42.450
and because this is a regular grid, we
can use that as a proxy for all of them.

96
00:07:42.450 --> 00:07:48.530
So the first element is gonna tell us
what the width of every single item is.

97
00:07:50.540 --> 00:07:55.659
Const first = results.firstChild, and

98
00:07:55.659 --> 00:08:03.629
you'll recall that results is
bound to this div class = results.

99
00:08:03.629 --> 00:08:07.041
So it's gonna give us
the first anchor element.

100
00:08:09.363 --> 00:08:13.935
And the item_width is
this is just gonna be

101
00:08:13.935 --> 00:08:19.145
the offsetWidth of that
element item_height.

102
00:08:19.145 --> 00:08:23.449
Item_height = first.offsetHeight.

103
00:08:23.449 --> 00:08:31.285
And num_columns again we're
gonna keep that as 4 now.

104
00:08:35.127 --> 00:08:40.193
So it's giving us some red squigglies
here because we can't guarantee,

105
00:08:40.193 --> 00:08:45.599
or TypeScript at least can't guarantee
that results has any children at all.

106
00:08:45.599 --> 00:08:50.580
So we need to tell it that, no,
we do definitely have a child here!

107
00:08:52.120 --> 00:08:53.910
But that is actually a good point.

108
00:08:53.910 --> 00:08:56.019
We might not have any elements at all.

109
00:08:56.019 --> 00:09:01.240
In which case, we probably don't want
to render this results page at all.

110
00:09:01.240 --> 00:09:05.712
So later, we'll make sure that we only
render the results page component when we

111
00:09:05.712 --> 00:09:07.303
do in fact have some movies.

112
00:09:13.553 --> 00:09:18.043
It's complaining that this first element
might not be the sort of thing that has

113
00:09:18.043 --> 00:09:20.254
an offset width or an offset height, so

114
00:09:20.254 --> 00:09:23.153
we need to give TypeScript
some more information.

115
00:09:23.153 --> 00:09:28.392
Do as HTMLAnchorElement
because that's what it is.

116
00:09:28.392 --> 00:09:30.816
And now you can see those red
squigglers have gone away.

117
00:09:33.241 --> 00:09:35.567
And now that we've got the width and
the height,

118
00:09:35.567 --> 00:09:37.447
we can start doing some calculations.

119
00:09:37.447 --> 00:09:40.516
Inside our handle scroll function,

120
00:09:40.516 --> 00:09:45.574
we get rid of that logging and
we're gonna set the value of a.

121
00:09:45.574 --> 00:09:51.196
It's gonna be the Math.floor
of the viewport

122
00:09:51.196 --> 00:09:56.385
scroll top divided by
the item height which

123
00:09:56.385 --> 00:10:03.895
is the height of each row multiplied
by the number of columns.

124
00:10:17.447 --> 00:10:21.552
And then the final value, the b value,

125
00:10:21.552 --> 00:10:26.904
which is the first element that is not yet
visible,

126
00:10:26.904 --> 00:10:31.137
we can calculate that with math.ceil,

127
00:10:31.137 --> 00:10:34.639
math.ceiling of scrollTop +.

128
00:10:34.639 --> 00:10:40.987
So a viewport.scrollTop +
the viewport.clientHeight.

129
00:10:45.326 --> 00:10:51.585
Divided by the item_height, and
then multiplied by the number of columns.

130
00:10:56.327 --> 00:11:01.020
All right, so
if we just get rid of this for a minute so

131
00:11:01.020 --> 00:11:03.581
that we can visualize this,

132
00:11:03.581 --> 00:11:09.577
we're gonna add some debugging
information showing items a- b.

133
00:11:13.866 --> 00:11:18.204
And it's doing some funky
floating point stuff here.

134
00:11:18.204 --> 00:11:21.721
Because I got my parentheses in the wrong
place, so let's just fix that real quick.

135
00:11:33.616 --> 00:11:36.189
You can see that it's currently
showing items 0 to 20.

136
00:11:36.189 --> 00:11:41.913
And that makes sense because we can see,
4 by 5 is showing all 20 elements.

137
00:11:41.913 --> 00:11:46.739
If we make this window smaller,

138
00:11:46.739 --> 00:11:54.245
then I would hope that it
was going to change that,

139
00:11:54.245 --> 00:11:58.557
but it has not changed that.

140
00:11:58.557 --> 00:12:04.488
Let me just take a quick look and
figure out why.

141
00:12:08.634 --> 00:12:13.596
I think it might be because,
The viewport is too large.

142
00:12:18.985 --> 00:12:23.943
Okay, if we constrain the viewport so
that we only get a smaller window,

143
00:12:23.943 --> 00:12:27.032
then we can see now that
as we're scrolling,

144
00:12:27.032 --> 00:12:31.857
it's figuring out correctly which
elements are currently visible.

145
00:12:35.514 --> 00:12:39.755
So now we just need to add the padding,
and then we can actually get

146
00:12:39.755 --> 00:12:44.168
rid of the elements that are not
currently in the visible viewport.

147
00:12:44.168 --> 00:12:49.172
Padding_top is gonna be math.floor

148
00:12:49.172 --> 00:12:53.861
of a divided by the number of columns

149
00:12:53.861 --> 00:12:58.407
multiplied by the item_height.

150
00:12:58.407 --> 00:13:06.327
And padding_bottom is gonna be math.floor.

151
00:13:06.327 --> 00:13:11.712
We get the length of
the entire array minus b,

152
00:13:11.712 --> 00:13:16.954
so that gives us all of
the excess at the end,

153
00:13:16.954 --> 00:13:21.063
divided by the number of columns,

154
00:13:21.063 --> 00:13:24.910
multiplied by the item height.

155
00:13:24.910 --> 00:13:28.377
Okay, so
now if we put that slice back in there, so

156
00:13:28.377 --> 00:13:32.024
that we only render the elements
that we care about.

157
00:13:32.024 --> 00:13:37.090
And then on the results div we'll add some

158
00:13:37.090 --> 00:13:42.158
inline styles which apply that padding,

159
00:13:42.158 --> 00:13:48.113
style:padding_top = (padding_top)px.

160
00:13:48.113 --> 00:13:50.682
We'll duplicate that for the bottom.

161
00:13:59.595 --> 00:14:02.337
And now you can't tell by looking at it.

162
00:14:02.337 --> 00:14:06.937
But hopefully, if you look inside the DOM,
we'll see that

163
00:14:06.937 --> 00:14:12.188
the fourth item there is actually
the first item in the DOM, right?

164
00:14:12.188 --> 00:14:16.278
We haven't got the first four
elements of the array in the DOM, but

165
00:14:16.278 --> 00:14:19.720
as far as the user's concerned,
everything is there.

166
00:14:19.720 --> 00:14:24.060
So this is the basis of
our windowing mechanism.

167
00:14:24.060 --> 00:14:27.460
You'll recall that our results
page component has two jobs.

168
00:14:27.460 --> 00:14:31.368
One is the windowing, but the other is
that it needs to tell its parent when

169
00:14:31.368 --> 00:14:35.380
the user has scrolled far enough that
it needs to load some more data.

170
00:14:35.380 --> 00:14:38.650
So this component needs to
become an event dispatcher.

171
00:14:38.650 --> 00:14:41.862
So we're gonna create a dispatch function,

172
00:14:44.347 --> 00:14:48.431
By importing createEventDispatcher
from Svelte and calling it.

173
00:14:48.431 --> 00:14:50.837
And then inside our scroll handler,

174
00:14:50.837 --> 00:14:55.494
we're gonna determine whether or
not we are close enough to the end that

175
00:14:55.494 --> 00:14:59.615
it's time to tell the parent
component to load some more data.

176
00:15:02.234 --> 00:15:07.440
So the value that we'd care about
is the remaining scroll room.

177
00:15:07.440 --> 00:15:14.032
And we can calculate that by doing const

178
00:15:14.032 --> 00:15:21.028
remaining = viewport.scrollHeight-

179
00:15:21.028 --> 00:15:25.226
viewport.scrollTop +

180
00:15:25.226 --> 00:15:30.035
viewport.clientHeight.

181
00:15:30.035 --> 00:15:35.751
And if we log that out as we're scrolling,

182
00:15:44.712 --> 00:15:49.502
You can see that, that number gets lower
the closer that we get to the end,

183
00:15:49.502 --> 00:15:53.765
until eventually, when we get
to the bottom, that number is 0.

184
00:15:53.765 --> 00:15:55.886
And just as a crude heuristic,

185
00:15:55.886 --> 00:16:00.374
we'll say that if that value
drops below say 400, then we'll

186
00:16:00.374 --> 00:16:05.367
broadcast an event that tells the patient
we need to load some more data.

187
00:16:12.692 --> 00:16:14.071
I don't know what to call this event.

188
00:16:14.071 --> 00:16:15.370
Naming stuff is hard.

189
00:16:15.370 --> 00:16:21.913
I'm just gonna call it end,
like that, that'll do.

190
00:16:28.561 --> 00:16:33.347
And now in the page that
is using this component,

191
00:16:33.347 --> 00:16:36.397
we can add an on:end handler.

192
00:16:43.398 --> 00:16:46.395
Then we can load some more data.

193
00:16:46.395 --> 00:16:48.784
We'll just verify that that's working.

194
00:16:51.127 --> 00:16:52.858
If we scroll down far enough,

195
00:16:52.858 --> 00:16:56.266
then it starts logging that we
need to load some more data.

