WEBVTT

1
00:00:00.818 --> 00:00:05.569
And of course we can add handlers for
all of the other HTTP verbs as well.

2
00:00:05.569 --> 00:00:10.913
So we'll create a to-do slash ID
route by creating a new folder with

3
00:00:10.913 --> 00:00:15.991
an ID parameter, and then inside there,
create our API route.

4
00:00:15.991 --> 00:00:20.316
And we're gonna add a put handler and
a delete handler for

5
00:00:20.316 --> 00:00:24.550
toggling and removing to dos,
using the toggle to do and

6
00:00:24.550 --> 00:00:29.076
the delete to do functions that
are in the database JS file.

7
00:00:29.076 --> 00:00:31.490
So in here once again we're
gonna import the database.

8
00:00:32.960 --> 00:00:39.900
We're not importing the JSON help at this
time because we're not gonna need it.

9
00:00:39.900 --> 00:00:44.562
Make our put handler first async
function PUT, we need the params

10
00:00:44.562 --> 00:00:49.153
object this time so that we know
which to do we're dealing with.

11
00:00:49.153 --> 00:00:54.510
And then we're gonna go and
grab request and cookies.

12
00:01:00.543 --> 00:01:04.370
This time the data that we're getting from
the browser is gonna be a done property.

13
00:01:08.311 --> 00:01:10.280
And as before,
we need to know the user's ID.

14
00:01:16.413 --> 00:01:22.505
And we're gonna call the toggle
Todo function with that user ID,

15
00:01:22.505 --> 00:01:29.390
with the ID of the current todo which
comes from the square brackets here.

16
00:01:32.383 --> 00:01:34.310
And finally the data itself.

17
00:01:36.976 --> 00:01:40.564
The response that we're gonna return this
time isn't actually gonna include any

18
00:01:40.564 --> 00:01:44.300
data because we don't need to
return any data in this context.

19
00:01:44.300 --> 00:01:49.707
So we'll return a new
response with a null body and

20
00:01:49.707 --> 00:01:54.229
a status of 204, which is no content.

21
00:01:57.460 --> 00:02:02.403
Added li handler as well
export async function DELETE.

22
00:02:02.403 --> 00:02:04.390
This time you don't even
need to look at the request.

23
00:02:04.390 --> 00:02:07.284
So we're just gonna get params and
cookies, get the user ID.

24
00:02:11.378 --> 00:02:16.089
And then we'll call database.delete Todo,

25
00:02:16.089 --> 00:02:21.656
pass in userid,
pass in the id from the params object.

26
00:02:21.656 --> 00:02:25.530
And again,
we're gonna return an empty response.

27
00:02:34.111 --> 00:02:39.070
Okay, so we can now interact with this
endpoint inside our event handlers.

28
00:02:40.070 --> 00:02:43.220
First we'll add one inside the onchange
handler of the checkbox on the left.

29
00:02:47.060 --> 00:02:50.700
Scroll down to where that is,
see the onchange handler here.

30
00:02:50.700 --> 00:02:55.972
We're gonna call fetch and
this time we're gonna

31
00:02:55.972 --> 00:03:00.739
pass in the ID of the Todo
as part of the URL, so

32
00:03:00.739 --> 00:03:05.900
that it becomes available
on the params object.

33
00:03:07.300 --> 00:03:09.016
The method for this one is PUT,

34
00:03:09.016 --> 00:03:11.922
corresponding to the PUT
verb that we just defined.

35
00:03:12.930 --> 00:03:21.461
And the data that we're
passing is whether or

36
00:03:21.461 --> 00:03:25.506
not the Todo is done.

37
00:03:25.506 --> 00:03:32.845
Then once again,
'Content-Type' : 'application/json'.

38
00:03:35.592 --> 00:03:41.174
And then on the other side of the Todo
when the button gets clicked,

39
00:03:41.174 --> 00:03:45.470
we're gonna post a DELETE
request to our handler.

40
00:03:49.770 --> 00:03:53.350
I'm gonna send the request
to the same place.

41
00:03:55.120 --> 00:03:56.245
This time, we don't need a body.

42
00:03:58.870 --> 00:04:01.386
The request itself is enough.

43
00:04:01.386 --> 00:04:03.724
And once that request succeeds,

44
00:04:03.724 --> 00:04:09.330
we'll again mutate the array this time to
remove the one that we no longer need.

45
00:04:13.190 --> 00:04:19.480
Do that by filtering on whether the member
of the array is the current Todo.

46
00:04:22.475 --> 00:04:25.900
Okay, so
we can now mark todos as complete.

47
00:04:25.900 --> 00:04:30.962
If I refresh the page, that should stay
checked and we can also delete them.

48
00:04:30.962 --> 00:04:33.855
And if I refresh the page
that should stay deleted.

49
00:04:35.522 --> 00:04:38.999
Okay, so that was a lot more work
than using a form action and

50
00:04:38.999 --> 00:04:41.165
it won't work without JavaScript.

51
00:04:41.165 --> 00:04:43.890
So I do recommend using form
actions where possible but

52
00:04:43.890 --> 00:04:46.271
this is an option that you
have when you need it.

53
00:04:46.271 --> 00:04:49.732
Okay, so
we got a question about whether or

54
00:04:49.732 --> 00:04:54.345
not it makes sense to put the logic
in an API root handler or

55
00:04:54.345 --> 00:04:58.110
in a server module inside
your lib directory.

56
00:04:59.290 --> 00:05:03.703
And the answer is that you cannot
call function on the server directly

57
00:05:03.703 --> 00:05:08.666
from within a page.svelte you have to go
via an API route or via a form action.

58
00:05:08.666 --> 00:05:12.231
Unless you've set up
something like a third party,

59
00:05:12.231 --> 00:05:18.550
like telephone call something that allows
you to do some sort of RPC mechanism.

60
00:05:18.550 --> 00:05:21.648
And so the really is no distinction there.

61
00:05:21.648 --> 00:05:26.880
You're gonna put some logic in your
API handlers but very often you'll

62
00:05:26.880 --> 00:05:32.199
have some kind of an abstraction,
similar to our database JS file here,

63
00:05:32.199 --> 00:05:36.558
where the actual database
manipulation is happening, and

64
00:05:36.558 --> 00:05:40.940
your API routes will just be
calling these helper methods.

65
00:05:40.940 --> 00:05:45.497
But there's always gonna be some
logic in an API route handler.

66
00:05:45.497 --> 00:05:46.800
Hope that answers the question.

67
00:05:49.660 --> 00:05:54.067
&gt;&gt; Let's say I want my endpoints
to be used later for a mobile app.

68
00:05:54.067 --> 00:05:58.953
Is that okay or
would I need to rewrite the API?

69
00:05:58.953 --> 00:06:04.445
&gt;&gt; Absolutely, these endpoints,
they are public HTTP endpoints and

70
00:06:04.445 --> 00:06:08.396
if you disable the default
cross site request for

71
00:06:08.396 --> 00:06:13.035
protection, then you can use
it as a regular public API.

72
00:06:13.035 --> 00:06:15.073
You can use it within your app, and

73
00:06:15.073 --> 00:06:20.000
you can make fetch calls against your own
endpoints, inside your load functions.

74
00:06:20.000 --> 00:06:22.227
And that'll work without
issuing an HTTP call.

75
00:06:22.227 --> 00:06:26.095
So you can build an API that way,
make it public but

76
00:06:26.095 --> 00:06:29.950
also privately accessible and
that just works.

77
00:06:29.950 --> 00:06:34.514
But the default assumption when
you're building a Svelte app is that

78
00:06:34.514 --> 00:06:38.842
the API routes and the server load
functions are specifically for

79
00:06:38.842 --> 00:06:41.135
the pages that you're building.

80
00:06:41.135 --> 00:06:44.661
So it's entirely up to you if you
want to deviate from that and

81
00:06:44.661 --> 00:06:47.210
open up your API to the well.

82
00:06:47.210 --> 00:06:51.679
&gt;&gt; I could just import function from
lib utils.ts to get a function to do

83
00:06:51.679 --> 00:06:56.080
the same things, like add remove
information from a database etc.

84
00:06:56.080 --> 00:07:00.905
So what I want to do that or
implement API endpoints?

85
00:07:00.905 --> 00:07:05.737
&gt;&gt; So if you're importing
the file inside your Page.svelte,

86
00:07:05.737 --> 00:07:10.580
then that implies that that file
is available in the client.

87
00:07:10.580 --> 00:07:13.600
And if you're doing that, then you
don't have direct access to a database.

88
00:07:13.600 --> 00:07:19.091
You need to go through some HTTP layer
in order to interact with your back-end.

89
00:07:19.091 --> 00:07:23.496
Later we'll learn about server
modules which cannot be imported into

90
00:07:23.496 --> 00:07:27.690
a Page.svelte file,
which prevents you from making that error.

91
00:07:30.130 --> 00:07:32.897
So yeah, you're not gonna be able to
directly manipulate the database from

92
00:07:32.897 --> 00:07:33.816
within your component.

93
00:07:33.816 --> 00:07:35.994
That is a deliberate design decision,

94
00:07:35.994 --> 00:07:40.350
though we don't let you do that because
that way insecurity and madness lies.

95
00:07:41.980 --> 00:07:44.923
So, yeah, you're always gonna
be going through API routes or

96
00:07:44.923 --> 00:07:47.490
form actions when you wanna
mutate data on the server.

