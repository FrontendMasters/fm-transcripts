WEBVTT

1
00:00:00.429 --> 00:00:04.258
All right, so the first thing that we're
gonna do in order to build this page is

2
00:00:04.258 --> 00:00:06.363
we're gonna implement our data loading.

3
00:00:06.363 --> 00:00:09.196
We're gonna add a load function,

4
00:00:09.196 --> 00:00:14.775
which should be very familiar by now,
export async function load.

5
00:00:14.775 --> 00:00:21.816
And we're gonna grab the params so
that we know what view we're dealing with.

6
00:00:21.816 --> 00:00:26.302
We're also gonna use the URL and
the fetch functions.

7
00:00:33.037 --> 00:00:36.099
Inside here we're gonna get hold
of the view object that relates to

8
00:00:36.099 --> 00:00:36.981
the current page.

9
00:00:42.302 --> 00:00:47.253
And again, because we've got that matcher
on the root, we can guarantee that

10
00:00:47.253 --> 00:00:51.541
this view object is in fact one of
the views that we defined earlier.

11
00:00:54.883 --> 00:00:58.872
Ane we're gonna get the data
using the API helper, so

12
00:00:58.872 --> 00:01:01.808
we'll import * as api from lib/api.

13
00:01:05.711 --> 00:01:09.949
A way api.get, again,
we're gonna pass in fetch.

14
00:01:12.161 --> 00:01:16.078
And we're gonna use the endpoint of
the view that we defined earlier.

15
00:01:21.389 --> 00:01:25.253
And we're gonna tell TypeScript what
kind of thing we're dealing with,

16
00:01:25.253 --> 00:01:26.446
which is a movie list.

17
00:01:28.726 --> 00:01:31.101
We're gonna return some data
from this load function.

18
00:01:34.989 --> 00:01:40.228
We've got the title,
there's gonna be the view.title.

19
00:01:40.228 --> 00:01:45.360
We're gonna end up using the endpoint,
as well.

20
00:01:45.360 --> 00:01:49.710
Most importantly,
the movies themselves, data.results.

21
00:01:51.679 --> 00:01:54.068
And that'll do for now,
we can start building it and

22
00:01:54.068 --> 00:01:55.707
we'll come back to the rest later.

23
00:02:00.230 --> 00:02:07.214
Let's create a script tag, lang = ts,
so that we can add our data prop.

24
00:02:11.740 --> 00:02:16.139
The first thing that we'll do,
we'll create a wrapper element.

25
00:02:16.139 --> 00:02:19.611
We're gonna give it a column class.

26
00:02:19.611 --> 00:02:26.704
And inside the lab an h1 with
the title of the current page.

27
00:02:29.094 --> 00:02:33.594
Okay, so if we visit trending,
we get the trending title,

28
00:02:33.594 --> 00:02:37.644
if we visit now playing,
we get an now playing title.

29
00:02:37.644 --> 00:02:41.959
Basically all of the things that
are defined in our viz.ts file that

30
00:02:41.959 --> 00:02:44.316
correspond to the slug in question.

31
00:02:52.281 --> 00:02:57.546
Now, here's where things are gonna get
interesting because on each of these

32
00:02:57.546 --> 00:03:02.734
pages we wanna have infinite pagination,
we wanna have infinite loading.

33
00:03:02.734 --> 00:03:06.755
But on browsers that
don't have JavaScript for

34
00:03:06.755 --> 00:03:11.187
whatever reasons,
we want it to continue working.

35
00:03:11.187 --> 00:03:16.945
So if I going to my dev tools and
disabled JavaScript.

36
00:03:21.740 --> 00:03:27.456
What we'll see is that when we scroll down
instead of triggering infinite loading,

37
00:03:27.456 --> 00:03:30.846
we're gonna see a next page link,
click on that.

38
00:03:36.313 --> 00:03:41.255
It's gonna take us to
the next page of movers.

39
00:03:45.521 --> 00:03:47.569
And so back in our data loading function,

40
00:03:52.066 --> 00:03:56.250
We wanna get the current page from
the query parameters that were passed in.

41
00:04:02.335 --> 00:04:07.784
And this URL, because it's a URL
object with a search params map,

42
00:04:07.784 --> 00:04:11.885
we can get page, and
that's gonna default to 1.

43
00:04:14.317 --> 00:04:21.128
And we can just pass that
directly to our API like that.

44
00:04:24.919 --> 00:04:28.727
And from our load function, we're gonna
tell the page whether there is a next page

45
00:04:28.727 --> 00:04:31.664
or not, because eventually you'll
get to the end of the list.

46
00:04:37.923 --> 00:04:43.372
And we can know that if, And
the page that was returned

47
00:04:43.372 --> 00:04:49.786
from the API is less than the number of
total pages, which returned from the API.

48
00:04:49.786 --> 00:04:55.479
If it is, then we'll do data.page + 1.

49
00:04:55.479 --> 00:04:58.379
Otherwise, we're gonna return null,

50
00:04:58.379 --> 00:05:02.229
which will mean don't render
a next page link at all.

51
00:05:02.229 --> 00:05:05.633
So it's time to start
building the component that

52
00:05:05.633 --> 00:05:08.389
is gonna render that grid of movers, and

53
00:05:08.389 --> 00:05:13.918
enable the infinite loading functionality
that we saw on the deployed version.

54
00:05:19.507 --> 00:05:26.323
Inside a lib directory, inside
components we'll create a new component,

55
00:05:26.323 --> 00:05:33.134
let's just call it ResultsPage.svelte And

56
00:05:33.134 --> 00:05:36.567
like the carousel,
this is gonna have a movies prop.

57
00:05:42.565 --> 00:05:45.751
Which is gonna be an array
of movie list results,

58
00:05:45.751 --> 00:05:50.891
I forgot to add lang = ts here, so let me
do that real quick and fix that import.

59
00:06:08.732 --> 00:06:15.128
And we're also gonna have a next prop,
which is gonna be a string or a null.

60
00:06:15.128 --> 00:06:23.095
That's gonna correspond to the next
page link that we got back from our data

61
00:06:36.466 --> 00:06:39.898
So it'll take us a minute to
build up to the infinite loading.

62
00:06:39.898 --> 00:06:43.556
For now we're just gonna render
essentially a grid of all of

63
00:06:43.556 --> 00:06:44.664
the data at once.

64
00:06:44.664 --> 00:06:48.595
Create a div class = results.

65
00:06:48.595 --> 00:06:52.619
And inside there we're just gonna
iterate over the entire movies array.

66
00:06:58.500 --> 00:07:00.423
And for
each of them we're gonna create a link.

67
00:07:08.670 --> 00:07:13.387
And we're gonna direct that to our as yet

68
00:07:13.387 --> 00:07:16.724
non-existent movie page.

69
00:07:18.394 --> 00:07:22.851
And inside there we're gonna put an image,
which is gonna be the movie's poster.

70
00:07:24.564 --> 00:07:27.283
Give it an alt attribute
of the movie title.

71
00:07:35.736 --> 00:07:39.335
And the source is gonna use that
media helper that we've seen already.

72
00:07:41.425 --> 00:07:47.510
We'll pass in the movie poster path,
With a width of 500.

73
00:07:52.272 --> 00:07:57.322
And then, back in the root,
we'll invoke that

74
00:07:57.322 --> 00:08:02.644
results page component,
and pass in our movies.

75
00:08:11.141 --> 00:08:13.065
We need to add that next prop as well.

76
00:08:23.203 --> 00:08:28.071
And that's gonna be the current view,
Data.view.

77
00:08:32.016 --> 00:08:33.782
With a page parameter.

78
00:08:36.622 --> 00:08:39.032
It looks like we're not returning
that from our load function.

79
00:08:42.894 --> 00:08:47.912
Let's just fix that,
pass the parameter back into the page.

80
00:08:47.912 --> 00:08:53.270
And then the page is gonna be whatever
the next page is, data.next page.

81
00:08:53.270 --> 00:08:56.510
Although cuz we don't want to do
this if there is no next page, so

82
00:08:56.510 --> 00:08:58.855
we're gonna make this
whole thing a ternary.

83
00:09:00.588 --> 00:09:05.592
If data.next page is true,

84
00:09:05.592 --> 00:09:11.145
then, We're passing that whole thing,

85
00:09:11.145 --> 00:09:14.814
otherwise that's gonna be null, in which
case we won't render an next page link.

86
00:09:21.848 --> 00:09:25.896
So we now have some movies
rendering on our results page.

87
00:09:25.896 --> 00:09:28.870
Again, they're kinda ginormous,
this is not what we want.

88
00:09:28.870 --> 00:09:32.514
So let's go into that component and
start adding some CSS.

89
00:09:37.579 --> 00:09:44.628
Our results div is gonna
have a display of grid.

90
00:09:44.628 --> 00:09:51.517
And for now we'll give a grid
template columns of 4,

91
00:09:55.201 --> 00:10:02.752
And we're gonna make sure that the width
doesn't exceed the space available.

92
00:10:11.433 --> 00:10:14.393
And we happen to know that
all of the posters that we

93
00:10:14.393 --> 00:10:17.919
get from the movie database
have an aspect ratio of 2/3,

94
00:10:17.919 --> 00:10:20.759
which we can use it to
prevent any layout shift.

95
00:10:24.526 --> 00:10:28.552
Okay, I need to figure out why
that's not doing what we expect.

96
00:10:32.145 --> 00:10:34.186
I think it's because the image
also needs some CSS.

97
00:10:36.953 --> 00:10:38.517
Add some CSS to the image.

98
00:10:43.168 --> 00:10:48.599
Okay, so for this to fit on the page we
need to make a small change to that column

99
00:10:48.599 --> 00:10:53.804
class in our global styles, this width
here should in fact be a max width.

100
00:10:53.804 --> 00:10:57.333
We want the width to be
a 100% up until that point.

101
00:10:57.333 --> 00:11:02.601
And so now we have this nice pleasing
grid that's showing all of the data.

