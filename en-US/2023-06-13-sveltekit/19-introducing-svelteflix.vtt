WEBVTT

1
00:00:00.000 --> 00:00:04.362
Now, one thing that you learn very quickly
as a web developer is that you cannot

2
00:00:04.362 --> 00:00:07.419
trust users,
they will cause chaos given the chance.

3
00:00:07.419 --> 00:00:11.620
And we need to make sure that they're
not gonna submit gibberish data using

4
00:00:11.620 --> 00:00:12.292
our forms.

5
00:00:12.292 --> 00:00:16.552
And the first line of defense is
the browser's built in validation,

6
00:00:16.552 --> 00:00:20.531
which makes it easy to for example,
mark the input as required.

7
00:00:20.531 --> 00:00:24.756
So let's go to the add todo input,
I'm just gonna add the required attribute.

8
00:00:27.543 --> 00:00:31.317
And now, if you try and
submit a todo without any data,

9
00:00:31.317 --> 00:00:36.912
we'll see a notification from the browser
saying, please fill out this field.

10
00:00:36.912 --> 00:00:41.554
And this kind of validation is helpful and
you absolutely should add it.

11
00:00:41.554 --> 00:00:45.461
It gives you a nice user interface for
free but it's also insufficient.

12
00:00:45.461 --> 00:00:48.233
There are some validation rules that
can't be encoded using these attributes.

13
00:00:48.233 --> 00:00:53.799
For example, you might have a uniqueness
requirement and in any case,

14
00:00:53.799 --> 00:00:58.805
if the user knows how to use dev
tools then they might just go in and

15
00:00:58.805 --> 00:01:03.389
get rid of the required attribute or
something like that.

16
00:01:03.389 --> 00:01:05.821
And so to guard against people doing
malicious things like that, you should

17
00:01:05.821 --> 00:01:08.224
always use server-side validation
as well as client-side validation.

18
00:01:08.224 --> 00:01:12.437
If you have a choice,
do the server-side validation first.

19
00:01:12.437 --> 00:01:15.673
So, all right, in the database.js file,

20
00:01:15.673 --> 00:01:20.404
we're gonna do the validation
when someone calls create todo.

21
00:01:20.404 --> 00:01:27.567
First thing we'll do is if description
is empty, We'll throw an error.

22
00:01:30.993 --> 00:01:34.831
And the error is gonna be,
todo must have a description.

23
00:01:40.413 --> 00:01:43.713
And then we're gonna get
the user's existing todos so

24
00:01:43.713 --> 00:01:45.802
that we can do a uniqueness check.

25
00:01:45.802 --> 00:01:48.065
If todos.find todo,

26
00:01:51.160 --> 00:01:59.646
Todo.description is equal to
the description that we've just submitted.

27
00:01:59.646 --> 00:02:05.121
Well, then we're gonna throw an error
that says, todos must be unique.

28
00:02:10.785 --> 00:02:18.773
All right, so now if we submit
a duplicate todo, We get an error page.

29
00:02:18.773 --> 00:02:22.138
It's probably not exactly what we want,
but it's a good start.

30
00:02:22.138 --> 00:02:25.759
It'd be nice if we could stay on the same
page where the form was submitted and

31
00:02:25.759 --> 00:02:28.663
give the user an opportunity
to correct then their mistake.

32
00:02:28.663 --> 00:02:33.220
So inside our page server.js file,

33
00:02:33.220 --> 00:02:40.278
we're gonna import a new module,
fail from SvelteKit.

34
00:02:41.860 --> 00:02:48.100
And inside our create action,
once we've got the data,

35
00:02:48.100 --> 00:02:52.394
we're going to try to create the todo.

36
00:02:52.394 --> 00:02:54.826
And if it fails, we'll catch the error.

37
00:02:57.296 --> 00:03:04.447
And we're gonna return a fail
object Given an HTTP code of 422,

38
00:03:04.447 --> 00:03:09.165
which indicates there was something
wrong with the data that was submitted.

39
00:03:12.552 --> 00:03:15.961
And we'll pass the description back to the
page so that we can render it in the UI.

40
00:03:18.811 --> 00:03:23.322
We don't just pass all of the data that
users submitted back automatically

41
00:03:23.322 --> 00:03:26.689
because they could include things like,
passwords and

42
00:03:26.689 --> 00:03:30.646
credit card data that we wanna be
careful about where we put that.

43
00:03:30.646 --> 00:03:35.204
And finally, the error property
of this fail object is gonna be

44
00:03:35.204 --> 00:03:39.506
the message that was thrown
from the create todo function.

45
00:03:39.506 --> 00:03:41.007
You have a question from the Internet?

46
00:03:43.513 --> 00:03:48.070
&gt;&gt; What's the difference between the fail
and error helpers from SvelteKit?

47
00:03:48.070 --> 00:03:53.494
&gt;&gt; Yeah, so we're gonna get into
the weeds of error handling later on.

48
00:03:53.494 --> 00:03:57.571
But essentially, if you just throw new
error with some message, then SvelteKit is

49
00:03:57.571 --> 00:04:01.022
gonna throw it's hands up and say,
I don't know what to do with this.

50
00:04:01.022 --> 00:04:03.002
I'm just gonna render an error page, and

51
00:04:03.002 --> 00:04:05.785
I'm gonna tell the user that
an internal error happened.

52
00:04:05.785 --> 00:04:12.012
If you throw an error that was created
with the error helper from SvelteKit,

53
00:04:12.012 --> 00:04:19.032
then SvelteKit is like, okay, the user or
the developer knows what they're doing.

54
00:04:19.032 --> 00:04:21.696
This is an error that they expected.

55
00:04:21.696 --> 00:04:26.295
And so will actually display the message
of that error to the user instead of

56
00:04:26.295 --> 00:04:27.983
a generic internal error.

57
00:04:27.983 --> 00:04:31.723
When you're submitting form data,
this isn't an application error.

58
00:04:31.723 --> 00:04:34.137
If the data is wrong,
it's a validation error.

59
00:04:34.137 --> 00:04:37.479
And we wanna be able to distinguish
between errors that should result in

60
00:04:37.479 --> 00:04:41.044
the error page being shown, and errors
that should be sent back to the user so

61
00:04:41.044 --> 00:04:44.353
that it can be incorporated into
the UI without showing an error page.

62
00:04:44.353 --> 00:04:47.174
And that's where this
fail helper comes in.

63
00:04:47.174 --> 00:04:53.616
So an action can return data,
which is made available to the page and

64
00:04:53.616 --> 00:04:58.701
by wrapping it in this fail function,
we're telling

65
00:04:58.701 --> 00:05:03.689
SvelteKit that the user
submitted incorrect data.

66
00:05:03.689 --> 00:05:07.736
And that's useful for displaying the
correct status code and things like that.

67
00:05:16.874 --> 00:05:21.788
Okay, so in our page.svelte, we can
now access the data that was returned

68
00:05:21.788 --> 00:05:26.630
from the action via the form prop,
which sits alongside export let data.

69
00:05:26.630 --> 00:05:30.213
So let's create that, export let form.

70
00:05:30.213 --> 00:05:33.853
And below the h1, we'll add an if blog.

71
00:05:33.853 --> 00:05:39.414
If form?.error, the question mark is
there because if we're on this page and

72
00:05:39.414 --> 00:05:43.564
we haven't just submitted some data,
form won't exist.

73
00:05:43.564 --> 00:05:47.455
But if the form object does exist and
it contains an error property,

74
00:05:47.455 --> 00:05:50.267
then we know that we need
to render some error UI.

75
00:05:50.267 --> 00:05:55.172
P class = error, and then we're just gonna

76
00:05:55.172 --> 00:05:59.027
display form.error to the user.

77
00:06:02.780 --> 00:06:07.603
And finally, we're gonna add the value
that was previously submitted in

78
00:06:07.603 --> 00:06:12.369
the description to the input so
that the user doesn't have to retype it.

79
00:06:16.416 --> 00:06:18.941
So if the form exists,
we'll grab the description.

80
00:06:18.941 --> 00:06:23.641
If it doesn't,
then we'll default the empty string.

81
00:06:23.641 --> 00:06:25.460
Okay, so
this time if we do the same thing,

82
00:06:25.460 --> 00:06:27.797
we try and submit a duplicate todo,
Learn SvelteKit.

83
00:06:33.132 --> 00:06:36.946
Well, that's embarrassing,
I must have missed a part here.

84
00:06:36.946 --> 00:06:38.587
I'm gonna open the terminal,
see what happened.

85
00:06:38.587 --> 00:06:41.606
Okay, data.get is not a function.

86
00:06:41.606 --> 00:06:45.418
So then an error in my code,
we'll go to page server.js and

87
00:06:45.418 --> 00:06:47.419
see where that's happening.

88
00:06:47.419 --> 00:06:50.903
It's because you'll notice up here,
this data object,

89
00:06:50.903 --> 00:06:55.541
I called a wait request form data but
I forgot to add the parentheses somehow.

90
00:06:55.541 --> 00:06:56.673
So I'll fix that.

91
00:07:00.787 --> 00:07:06.358
And now when I add the duplicate todo,

92
00:07:09.379 --> 00:07:15.654
It's gonna display the error that was
thrown from the create todo function.

