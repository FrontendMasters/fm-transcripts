WEBVTT

1
00:00:00.360 --> 00:00:05.300
Okay, so on the home page of the app,
we've got a big featured movie at the top.

2
00:00:05.300 --> 00:00:08.408
And then we have three
carousels of trending movies,

3
00:00:08.408 --> 00:00:11.940
movies that are now playing,
and movies that are upcoming.

4
00:00:12.960 --> 00:00:18.715
So let's grab some data for that,
first of all, from the API.

5
00:00:18.715 --> 00:00:23.817
To do that, we're gonna need to add
a page.js file with a load function.

6
00:00:26.563 --> 00:00:30.613
And we're using page js instead of
page server js because the place

7
00:00:30.613 --> 00:00:35.313
that we're gonna be able to get this
data from doesn't require any secrets,

8
00:00:35.313 --> 00:00:38.210
there's no API key or authentication.

9
00:00:38.210 --> 00:00:43.490
So we're gonna make requests directly from
the browser when we navigate client side.

10
00:00:43.490 --> 00:00:46.341
So, for that reason, we're not
gonna have a server load function,

11
00:00:46.341 --> 00:00:49.260
cuz we don't need to make a round trip
to our own server to get the data.

12
00:00:50.670 --> 00:00:52.059
As well as making things faster,

13
00:00:52.059 --> 00:00:54.600
that's gonna mean that our
application is cheaper to host.

14
00:00:55.870 --> 00:00:56.744
So, create our load function.

15
00:01:04.133 --> 00:01:08.720
And we're gonna grab the fetch helper
that we learned about earlier.

16
00:01:13.128 --> 00:01:16.682
In fact,
let's make this page ts file instead so

17
00:01:16.682 --> 00:01:21.289
that we can use TypeScript to make
our life a little bit easier.

18
00:01:24.589 --> 00:01:29.913
And the place that we need to get
this data from is a version of

19
00:01:29.913 --> 00:01:36.531
the movie database API that is hosted
by the tastejs.com organization.

20
00:01:36.531 --> 00:01:41.748
So the base URL for our API calls is gonna

21
00:01:41.748 --> 00:01:48.088
be https://api.movies.tastejs.com.

22
00:01:53.691 --> 00:02:02.287
And to get the To get
the trending movies data,

23
00:02:02.287 --> 00:02:09.168
we're gonna make a fetch call,
To that base,

24
00:02:09.168 --> 00:02:15.065
followed by trending/movie/day.

25
00:02:15.065 --> 00:02:17.695
That's gonna get the day's
trending movies.

26
00:02:23.998 --> 00:02:27.230
And we'll use response.json
to get hold of that data.

27
00:02:34.263 --> 00:02:38.871
This needs to be an async function so that
we can use await, so let's add that there

28
00:02:41.435 --> 00:02:45.828
And now that we've done this
inside our page.svelte,

29
00:02:45.828 --> 00:02:52.380
we can create a script lang = ts, so that
we use TypeScript and add export let data.

30
00:02:52.380 --> 00:02:57.163
And if we hover over that data, we'll
see that we have a trending property,

31
00:02:57.163 --> 00:03:01.520
although at the moment, it has an any
value, which is not much help.

32
00:03:01.520 --> 00:03:04.419
If we're gonna be able to build this
app under the time constraints that

33
00:03:04.419 --> 00:03:07.464
we're working under, then it would be
really helpful if TypeScript could

34
00:03:07.464 --> 00:03:08.891
tell us what we're dealing with.

35
00:03:08.891 --> 00:03:13.281
So at this point,
what I want you to do is open

36
00:03:13.281 --> 00:03:18.634
frontend-masters-svelteflix.versel.app and

37
00:03:18.634 --> 00:03:22.575
append the word just to the end of that.

38
00:03:22.575 --> 00:03:26.241
Right, that's gonna give us
a TypeScript declaration file which

39
00:03:26.241 --> 00:03:30.955
contains type information about all of the
responses from the API that we're gonna be

40
00:03:30.955 --> 00:03:32.170
dealing with.

41
00:03:32.170 --> 00:03:35.680
So just hit that raw button,
grab that whole thing, copy it.

42
00:03:35.680 --> 00:03:41.615
And then inside your app, inside the lib
directory, we're gonna create a file,

43
00:03:41.615 --> 00:03:45.672
types.d.ts, and
just gonna paste that whole thing.

44
00:04:00.582 --> 00:04:04.105
We forgot the await before our fetch, I'll
add that to get rid of that red squiggly.

45
00:04:07.142 --> 00:04:11.458
And when we're dealing with fetch,
TypeScript doesn't know what the data is,

46
00:04:11.458 --> 00:04:15.144
so we have to tell TypeScript what
kind of thing we're dealing with.

47
00:04:15.144 --> 00:04:18.843
So we're going to add an as
at the end of this, and

48
00:04:18.843 --> 00:04:23.377
inside our types.dts we have
a bunch of different things.

49
00:04:23.377 --> 00:04:27.482
But one of the things that we're gonna
be dealing with a lot is this movie list

50
00:04:27.482 --> 00:04:28.196
interface.

51
00:04:28.196 --> 00:04:35.167
This data that we're getting from this
endpoint is a promise of a movie list.

52
00:04:39.071 --> 00:04:42.510
Actually no,
we need to put that down here.

53
00:04:42.510 --> 00:04:45.690
And because we're awaiting it, it's
not a promise, it's just a movie list.

54
00:04:47.780 --> 00:04:52.599
We need to import that from
our type declarations.

55
00:04:54.160 --> 00:04:58.832
And now when we open our page.svelte,
hopefully, it's gonna tell us that

56
00:04:58.832 --> 00:05:03.070
trending is a movie list, so
that makes our life a little bit easier.

57
00:05:05.200 --> 00:05:11.040
Okay, so
we can add Top trending movies over here.

58
00:05:13.350 --> 00:05:17.168
And then the first thing we'll
do is just have a look and

59
00:05:17.168 --> 00:05:20.660
see what information we
have on that data object.

60
00:05:22.530 --> 00:05:25.190
Open Dev Tools, open the Console.

61
00:05:25.190 --> 00:05:29.896
You can see that we have
a bunch of trending results.

62
00:05:29.896 --> 00:05:34.725
And we're gonna wanna grab
the first one of these and and

63
00:05:34.725 --> 00:05:37.716
render the information therein.

64
00:05:37.716 --> 00:05:42.308
It doesn't actually have everything that
we want for the big hero image at the top,

65
00:05:42.308 --> 00:05:46.390
because we wanna grab a logo as well and
the logo is not in the list results.

66
00:05:46.390 --> 00:05:51.331
So we're gonna need to make another fetch
call to get the full information about

67
00:05:51.331 --> 00:05:53.921
the movie at the top of the trending list.

68
00:05:53.921 --> 00:06:00.612
So back in our page.ts, We'll

69
00:06:00.612 --> 00:06:05.648
grab the first movie and call it featured.

70
00:06:10.353 --> 00:06:12.464
And now we're gonna make
another request to the API.

71
00:06:26.539 --> 00:06:28.461
And this time,
the data that we're gonna get,

72
00:06:30.366 --> 00:06:36.058
is/movie/featured.id.

73
00:07:01.153 --> 00:07:04.272
And that's gonna be
a movie details object.

74
00:07:07.409 --> 00:07:12.520
Okay, so if we now look in our DevTools
and see what's in the featured data.

75
00:07:13.710 --> 00:07:17.175
It still doesn't have quite everything
that we need because we need to tell

76
00:07:17.175 --> 00:07:19.760
the API that we wanna get
some additional information.

77
00:07:19.760 --> 00:07:25.100
But before we get into that, all of this
fetch code is already getting me down.

78
00:07:25.100 --> 00:07:28.328
There's so much duplication because,
first, you have to get the response and

79
00:07:28.328 --> 00:07:30.270
then you have to get
the JSON from the response.

80
00:07:31.380 --> 00:07:33.480
And it's just no fun.

81
00:07:33.480 --> 00:07:38.014
So at this point, I'm gonna create
an API helper in my lib directory, and

82
00:07:38.014 --> 00:07:42.132
we're gonna use that every time
we interact with the API instead.

83
00:07:42.132 --> 00:07:48.061
So let's open source/lib,
add an api.ts file.

84
00:07:50.761 --> 00:07:52.670
And we're gonna start moving
over some of that code.

85
00:07:52.670 --> 00:07:57.710
We'll get that base value,
drop that in here,

86
00:07:57.710 --> 00:08:01.123
and we'll export a get function

87
00:08:04.899 --> 00:08:09.148
That takes the fetch
object from our event.

88
00:08:12.087 --> 00:08:13.680
Need to give it a type.

89
00:08:13.680 --> 00:08:16.780
The type of fetch is type
of global list fetch.

90
00:08:18.930 --> 00:08:21.490
And then it's gonna take an endpoint,
which is a string.

91
00:08:23.370 --> 00:08:26.938
And then we'll optionally
add some parameters,

92
00:08:29.555 --> 00:08:32.227
Which is gonna be a record of strings.

93
00:08:36.367 --> 00:08:39.300
And then inside here we can
make the actual fetch calls.

94
00:08:41.130 --> 00:08:47.926
So we'll grab that, We'll replace this
with the endpoint that was passed in.

95
00:08:52.561 --> 00:08:53.812
Need to make this an async function.

96
00:09:00.026 --> 00:09:04.789
And we can return the JSON that
we got from that response.

97
00:09:08.555 --> 00:09:12.806
Okay, so now we can replace
the existing calls to fetch in our load

98
00:09:12.806 --> 00:09:15.430
function with our new API helper.

99
00:09:15.430 --> 00:09:16.830
First, we import it.

100
00:09:16.830 --> 00:09:20.789
Import * as api from $lib-api.

101
00:09:24.043 --> 00:09:28.931
And we'll replace this
whole thing with const

102
00:09:28.931 --> 00:09:33.700
trending = await api.get, pass in fetch.

103
00:09:33.700 --> 00:09:36.831
And then we'll just grab
that endpoint there.

104
00:09:39.728 --> 00:09:41.713
And we can delete all of that.

105
00:09:47.043 --> 00:09:48.647
And we can delete this too.

106
00:10:17.520 --> 00:10:21.035
Now a moment ago, I mentioned that we
don't yet have all the information.

107
00:10:21.035 --> 00:10:25.642
The Movie Database API allows you to
make multiple requests in one go by

108
00:10:25.642 --> 00:10:28.386
adding the append to results parameter.

109
00:10:32.082 --> 00:10:36.190
And that looks like this,
append_to_results.

110
00:10:36.190 --> 00:10:41.002
We can specify which pieces of
additional data we want to get

111
00:10:41.002 --> 00:10:43.610
when we fetch a featured movie.

112
00:10:43.610 --> 00:10:52.080
In particular, right now we
wanna get the images property.

113
00:10:52.080 --> 00:10:55.465
All right, so
we're making a fetch to this endpoint and

114
00:10:55.465 --> 00:11:00.160
we're passing in a parameter, we need
to do something with that parameter.

115
00:11:00.160 --> 00:11:03.364
So we'll go back into our API module.

116
00:11:06.027 --> 00:11:10.934
And we're gonna add a query
string parameter based on what

117
00:11:10.934 --> 00:11:15.950
was passed in by creating a new,
URLSearchParams object.

118
00:11:18.510 --> 00:11:25.051
URLSearchParams will take any object
that has a set of key value pairs,

119
00:11:25.051 --> 00:11:29.738
and it will turn that into
a queryable search params

120
00:11:29.738 --> 00:11:34.000
object that you can easily
turn into a string.

121
00:11:34.000 --> 00:11:39.547
So, if you just add question mark and
then Q, that is now gonna be a URL

122
00:11:39.547 --> 00:11:44.724
that reflects those parameters
in a fully URL encoded fashion.

123
00:11:48.471 --> 00:11:53.376
So, if we set this up correctly, we're
now making a the full API call that is

124
00:11:53.376 --> 00:11:58.320
gonna add all of the images to our
featured movie, append_to_response.

125
00:11:58.320 --> 00:12:02.418
Okay, so I got this wrong,
it's actually not append_to_result,

126
00:12:02.418 --> 00:12:04.301
it's append_to_response.

127
00:12:08.982 --> 00:12:14.063
And now at long last we have
this images object inside

128
00:12:14.063 --> 00:12:19.259
the the featured movie where
we can grab a backdrop and

129
00:12:19.259 --> 00:12:25.051
we can grab a logo to put in our
Big Hero slot at the top there.

