WEBVTT

1
00:00:00.094 --> 00:00:02.303
So whenever you're
building an application,

2
00:00:02.303 --> 00:00:05.562
you're probably gonna be dealing
with some environment variables,

3
00:00:05.562 --> 00:00:07.840
things like API keys and
database credentials.

4
00:00:07.840 --> 00:00:12.538
And these can be added to
a .env file, .env, when you're

5
00:00:12.538 --> 00:00:17.349
developing locally so
that you can know those secrets.

6
00:00:17.349 --> 00:00:21.045
In this exercise, we want to allow
the user to enter the website

7
00:00:21.045 --> 00:00:25.111
if they know the correct passphrase
using an environment variable.

8
00:00:25.111 --> 00:00:29.575
So right now, if they know the passphrase,
which is open sesame,

9
00:00:29.575 --> 00:00:33.176
nothing happens, or
at least nothing good happens.

10
00:00:33.176 --> 00:00:36.984
Because we haven't declared that
environment variable in our .env file, so

11
00:00:36.984 --> 00:00:37.973
we'll do that now.

12
00:00:37.973 --> 00:00:41.340
Create the passphrase, open sesame.

13
00:00:44.745 --> 00:00:48.922
And now, inside our routes/+page.server.js,

14
00:00:48.922 --> 00:00:55.830
we can import that environment variable
from the $env/static/private module.

15
00:01:02.879 --> 00:01:05.579
And this is where they
were getting kicked out

16
00:01:05.579 --> 00:01:10.426
before cuz the data.get(passphrase)
does not equal the hard-coded value.

17
00:01:10.426 --> 00:01:14.646
We'll replace that hard-coded value
with the environment variable.

18
00:01:14.646 --> 00:01:19.758
And now, if you type open
sesame into the input, I'm in.

19
00:01:23.197 --> 00:01:26.845
Now, it's important that when you're
dealing with environment variables,

20
00:01:26.845 --> 00:01:29.351
that you don't accidentally
expose them to the user,

21
00:01:29.351 --> 00:01:32.250
because then they could be stolen,
and that would not be good.

22
00:01:32.250 --> 00:01:36.625
And SvelteKit actively prevents you from
accidentally revealing your secrets.

23
00:01:36.625 --> 00:01:45.295
If you try and import env vars into
your page.svelte component,

24
00:01:48.263 --> 00:01:50.798
Sorry, I lost my scroll place.

25
00:01:50.798 --> 00:01:56.272
If you try and import $env/static/private
into your Svelte component,

26
00:01:56.272 --> 00:01:58.078
then it's gonna break.

27
00:02:05.399 --> 00:02:08.535
All right, we see this error
message from Vite that says,

28
00:02:08.535 --> 00:02:12.570
Cannot import $env/static/private
into client-side code, right?

29
00:02:12.570 --> 00:02:17.896
This is a server-only module, and there's
a few server-only modules in SvelteKit.

30
00:02:17.896 --> 00:02:21.805
Anytime you have a module
that has the .server suffix,

31
00:02:21.805 --> 00:02:26.634
page.server.js, layout.server.js,
+server.js, or

32
00:02:26.634 --> 00:02:30.644
any of your own modules that
have a .server.js suffix.

33
00:02:30.644 --> 00:02:33.659
And also any modules
inside src/lib/server,

34
00:02:33.659 --> 00:02:38.587
these are considered server modules
that cannot be imported into client-side

35
00:02:38.587 --> 00:02:40.586
code under any circumstances.

36
00:02:40.586 --> 00:02:44.943
And so within those files, it's quite
safe to access environment variables and

37
00:02:44.943 --> 00:02:47.454
to communicate directly
with your database.

38
00:02:47.454 --> 00:02:53.181
And in turn, those modules can only
be imported by other server modules.

39
00:02:53.181 --> 00:02:58.278
You might be wondering why this module has
such a funny name, $env/static/private.

40
00:02:58.278 --> 00:03:02.719
The static part indicates that these
values are known at build time.

41
00:03:02.719 --> 00:03:05.263
And that means that they can
be statically replaced, and

42
00:03:05.263 --> 00:03:06.962
this enables useful optimizations.

43
00:03:06.962 --> 00:03:11.701
For example, if you have a feature flag
that is statically analyzed at build time,

44
00:03:11.701 --> 00:03:15.833
then any code that is inside this block
will just be removed altogether if

45
00:03:15.833 --> 00:03:18.360
the feature flag is not currently enabled.

46
00:03:20.430 --> 00:03:23.934
So where possible, we recommend using
static environment variables, but

47
00:03:23.934 --> 00:03:25.749
some cases, it might not be possible.

48
00:03:25.749 --> 00:03:28.942
You might need to refer to environment
variables that are not known

49
00:03:28.942 --> 00:03:32.704
when your app is built, but are only known
when your app is run, and for these,

50
00:03:32.704 --> 00:03:34.657
we use dynamic environment variables.

51
00:03:38.485 --> 00:03:40.888
So we have the same exercise as before,
but this time,

52
00:03:40.888 --> 00:03:44.154
we're gonna use dynamic environment
variables instead of static ones.

53
00:03:46.011 --> 00:03:53.765
First, we're gonna change the module
that we're importing from to dynamic.

54
00:03:53.765 --> 00:03:59.938
And we're gonna import env instead of
PASSPHRASE because we don't know yet

55
00:03:59.938 --> 00:04:03.995
what properties that env
object is going to have.

56
00:04:03.995 --> 00:04:08.639
And then down here, we're gonna replace
PASSPHRASE with env.PASSPHRASE.

57
00:04:10.323 --> 00:04:16.233
And now, as before, when we type in
the passphrase, we get into the website.

58
00:04:22.548 --> 00:04:26.742
So so far, we've been dealing with
environment variables that are secret, and

59
00:04:26.742 --> 00:04:29.158
they can only be accessed
by certain modules.

60
00:04:29.158 --> 00:04:33.890
But you might have some environment
variables that are safe to

61
00:04:33.890 --> 00:04:35.441
reveal to the user.

62
00:04:35.441 --> 00:04:39.628
And these are distinguished from private
environment variables by having a PUBLIC_

63
00:04:39.628 --> 00:04:42.547
prefix, which you can configure
in your svelte.config.

64
00:04:42.547 --> 00:04:49.006
So in our .env file here, we're gonna
set some public environment variables.

65
00:04:49.006 --> 00:04:56.437
We'll pick a color like steelblue for the
background and bisque for the foreground.

66
00:04:56.437 --> 00:05:00.308
And then inside our component,
we can, in fact, import these and

67
00:05:00.308 --> 00:05:03.850
replace the hard-coded variables
that we currently have.

68
00:05:03.850 --> 00:05:08.646
So just delete all of that, and

69
00:05:08.646 --> 00:05:14.921
import PUBLIC_THEME_BACKGROUND and

70
00:05:14.921 --> 00:05:20.274
PUBLIC_THEME_FOREGROUND from

71
00:05:20.274 --> 00:05:24.528
$env/static/public.

72
00:05:24.528 --> 00:05:26.949
And now, when we reload this page,

73
00:05:26.949 --> 00:05:30.755
it's pulling those values
directly from our env file.

74
00:05:30.755 --> 00:05:36.176
So we can change that and
it will update the app.

75
00:05:36.176 --> 00:05:40.431
And again, because we're
pulling from a static env file,

76
00:05:40.431 --> 00:05:46.061
those properties will be replaced in
your code when the application is built.

77
00:05:48.868 --> 00:05:53.838
Finally, of course, we can have dynamic
public environment variables too.

78
00:05:53.838 --> 00:06:00.079
Same as before, we're just gonna
change the imports to env,

79
00:06:00.079 --> 00:06:04.893
and grab that from
the dynamic module instead.

80
00:06:04.893 --> 00:06:11.215
And then we'll prefix all of
these with env, same there.

81
00:06:13.196 --> 00:06:17.474
And now,
the application renders same as before.

82
00:06:17.474 --> 00:06:19.350
Any questions about environment variables?

83
00:06:22.085 --> 00:06:27.032
All right, well, I have some good news,
we have finished the tutorial.

84
00:06:27.032 --> 00:06:30.229
Congratulations, everyone,
thank you for bearing with me,

85
00:06:30.229 --> 00:06:32.534
this has been a lot of
content to get through.

86
00:06:32.534 --> 00:06:35.573
If you've made it the entire
way through this tutorial,

87
00:06:35.573 --> 00:06:38.881
you can now consider yourself a Svelte and
SvelteKit expert.

88
00:06:38.881 --> 00:06:43.803
You can start building apps on your own
machines by just typing npm create-svelte

89
00:06:43.803 --> 00:06:46.370
on the command line, follow the prompts,

90
00:06:46.370 --> 00:06:49.025
that will set you up
with a new application.

91
00:06:49.025 --> 00:06:51.873
But this is not the end, Svelte and
SvelteKit will continue to evolve,

92
00:06:51.873 --> 00:06:53.357
we're always adding new features.

93
00:06:53.357 --> 00:06:56.476
And as a consequence,
this documentation will also evolve.

94
00:06:56.476 --> 00:06:59.744
So I do encourage you to
check back periodically and

95
00:06:59.744 --> 00:07:01.725
see if there's new material.

96
00:07:01.725 --> 00:07:04.891
And if you wanna keep up with
developments in the Svelte world,

97
00:07:04.891 --> 00:07:06.576
you can join our Discord server.

98
00:07:06.576 --> 00:07:10.129
It's a very friendly
space at svelte.dev/chat.

99
00:07:10.129 --> 00:07:12.761
And you can follow
Svelte Society on Twitter,

100
00:07:12.761 --> 00:07:16.826
where you'll get a stream of updates
on everything Svelte-related.

101
00:07:16.826 --> 00:07:20.970
We are very happy to welcome you
all to the Svelte community,

102
00:07:20.970 --> 00:07:23.826
thank you for doing the tutorial with us.

103
00:07:23.826 --> 00:07:26.718
And now, we're gonna move on to
the final part of this workshop,

104
00:07:26.718 --> 00:07:30.245
where we're gonna take everything that
we've learned in the Svelte course and

105
00:07:30.245 --> 00:07:33.420
the SvelteKit course and we're gonna
build a full stack application.

