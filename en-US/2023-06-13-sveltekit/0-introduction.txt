[00:00:00]
>> Hi everyone and welcome to this SvelteKit workshop. This is part of a two-part course. The other session introduced Svelte and today we're going to be learning about SvelteKit which is an application framework that uses Svelte. My name is Rich Harris, I am the creator of Svelte and today we're going to be learning how to build full stack applications using SvelteKit.

[00:00:21]
So if you're brand new to Svelte then I recommend doing the Svelte workshop before embarking on this Sveltekit workshop. But if you're already familiar with Svelte, then it's totally fine. It's not a prerequisite. You can dive straight into learning about spell kit. And we're gonna be doing that today using learn.svelte.dev which is our interactive tutorial platform.

[00:00:40]
And the first part of the session today, we're gonna go through part three of the tutorial, which is the introduction to SvelteKit. And then after that, we're going to learn some advanced SvelteKit techniques. And then finally, we're gonna build a full-stack application using authentication, APIs, and a database.

[00:00:59]
So let's start by learning about what SvelteKit is. Svelte is a component framework, you use it to build little chunks of your user interface declaratively out of components. Sveltekit is an application framework, sometimes called a meta framework, and it solves the rest of the problem of building an application that you can deploy to your users.

[00:01:19]
It has features like routing, server-side rendering, data fetching, service workers, TypeScript integration, pre-rendering, single-page apps, library packaging, optimized production builds, deploying to different hosting providers, and so on. Right, there's a lot in there. It might seem a little bit intimidating, but don't worry, we're gonna go through it and it'll all make sense before long.

[00:01:41]
SvelteKit apps are server rendered by default. So like a traditional multi-page app, or MPA, you get the excellent first load and SEO characteristics of a traditional app. But then we transitioned to client side navigation, like a modern single page app, so that instead of reloading everything when your users navigate from one page to another, everything loads instantly.

[00:02:06]
Still get apps can run anywhere that JavaScript runs. They'll run on node that run on Dino that run and burn. They'll run on edge functions and serverless functions. And as we'll see, your users might not need to run any JavaScript at all. You can also deploy your applications as fully static, pre rendered apps where that's appropriate.

[00:02:24]
So let's talk about the project structure of a Sveltekit app. When you create a new Sveltekit app, you'll be left with something like what you see on the right here. Go through some of these files in turn. Package.json is something that will be familiar to you if you've used node before.

[00:02:41]
it list all of the project's dependencies, including Svelte an Svelteltkit and a variety of scripts for interacting with the CLI. So right now we're running npm run dev in the iframe at the bottom of the screen that you can see. You'll notice that in the package.json we are specifying type module.

[00:03:00]
This makes the project a modern ESM project as opposed to a legacy CommonJS project, which means that all of the JavaScript files in your app are modern ESM format instead of CommonJS. Next file is the svelteconfig.js. This contains your project configuration. Don't really need to worry about this for the purpose of this tutorial but if you're curious then you can learn more about the what goes into the configuration file on the reference documentation Next up is the vite config.

[00:03:31]
So Svelte uses vite which is a development server and build tool that allows you to build apps very fast using all of the modern techniques like hot module reloading, it has out-of-the-box support for TypeScript and all of those other things and SvelteKit by extension gets all of those benefits.

[00:03:50]
The most important part of our viteconfig is this line here where we're invoking the Sveltekit plugin. The bit below you can ignore. That's just something that we need within the tutorial. The source directory is where your app source code goes. We have an app.html. This defines the shape of the response that you get when you visit the Sveltekit app.

[00:04:11]
In this tutorial we've got a bunch of inline styles that we're going to be using various stages through the tutorial. But the interesting parts are this Sveltekit head section, and all the way at the bottom, a Sveltekit body. These are the bits that Sveltekit populates with the HTML and the meta content that relates to the page that the user has requested.

[00:04:33]
And then finally, The static directory contains any assets like a favicon that are included when your app is deployed.

