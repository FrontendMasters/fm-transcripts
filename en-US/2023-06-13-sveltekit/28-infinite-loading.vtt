WEBVTT

1
00:00:00.000 --> 00:00:04.456
Okay, so our view page is starting to
take shape but obviously we need to get

2
00:00:04.456 --> 00:00:08.798
some more CSS in here so that
the viewport isn't constrained like this.

3
00:00:08.798 --> 00:00:12.956
And the first thing we're gonna need to
do is set some more styles on the body

4
00:00:12.956 --> 00:00:13.624
element.

5
00:00:13.624 --> 00:00:20.559
So we're going to open
our our styles.css file.

6
00:00:20.559 --> 00:00:29.303
And we're gonna give
the body a height of 100 VH,

7
00:00:29.303 --> 00:00:34.479
like this, and a margin of 0.

8
00:00:38.374 --> 00:00:43.195
And then inside the layout,
we want the main element to fill as

9
00:00:43.195 --> 00:00:48.029
much of the screen as possible
without exceeding its bounds.

10
00:00:50.345 --> 00:00:52.867
So let us add a selector for main.

11
00:00:54.570 --> 00:00:58.753
And we'll give it a height of 0,
but a flex of 1,

12
00:00:58.753 --> 00:01:04.434
which is a bit of a odd combination,
but it basically means expand to

13
00:01:04.434 --> 00:01:09.541
fill the space available but
don't take any more than that.

14
00:01:09.541 --> 00:01:12.708
And we'll combine that
with overflow: hidden.

15
00:01:12.708 --> 00:01:19.331
And now that we've done that we can get
rid of that constrained viewport size.

16
00:01:22.315 --> 00:01:26.371
So we'll just delete that
height of 200 pixels there.

17
00:01:33.765 --> 00:01:38.440
And it looks like we need to add
some more CSS in order to allow

18
00:01:38.440 --> 00:01:40.320
the container to flex.

19
00:01:53.259 --> 00:01:56.064
All right, once again we're adding
display flex to an element,

20
00:01:56.064 --> 00:01:58.162
we're gonna give it a flex
direction of column.

21
00:01:58.162 --> 00:02:04.730
And we're gonna give this
element a height of 100%.

22
00:02:04.730 --> 00:02:09.873
In so now this is behaving
the way that we want it to.

23
00:02:13.511 --> 00:02:18.520
So let's implement
the infinite loading here instead of

24
00:02:18.520 --> 00:02:24.387
logging when we need to load some
more data will actually log the data.

25
00:02:24.387 --> 00:02:26.485
It will actually load the data.

26
00:02:29.373 --> 00:02:33.301
And we'll turn this
into an async function.

27
00:02:33.301 --> 00:02:37.115
And because every time we scroll this
event fires we want to keep track of

28
00:02:37.115 --> 00:02:39.658
whether we're already
loading the next data so

29
00:02:39.658 --> 00:02:42.598
that we don't issue a whole
bunch of requests at once.

30
00:02:42.598 --> 00:02:47.694
So I'm gonna add a new value appending and

31
00:02:47.694 --> 00:02:50.612
default that to false.

32
00:02:50.612 --> 00:02:55.279
First off, if there is no next page,
then we don't have anything to load.

33
00:02:55.279 --> 00:03:02.636
So if data.next_page does not exist,
then we're just gonna bail it out.

34
00:03:02.636 --> 00:03:07.442
And if we're already appending some data,
then we're gonna bail out as well.

35
00:03:13.292 --> 00:03:18.302
We're gonna use the API
that we built earlier.

36
00:03:25.229 --> 00:03:29.129
Because it's not using
any server only code,

37
00:03:29.129 --> 00:03:33.931
it's quite okay to import
this into our page component.

38
00:03:33.931 --> 00:03:39.481
We'll do const next equals await api.get.

39
00:03:39.481 --> 00:03:44.399
And this time we're passing in
the Windows fetch objects instead of

40
00:03:44.399 --> 00:03:46.568
the load event fetch object.

41
00:03:46.568 --> 00:03:49.817
It's the same thing because
we've got a fully qualified URL.

42
00:03:53.856 --> 00:04:01.736
And now we're gonna use the endpoint that
was returned from our load function.

43
00:04:05.299 --> 00:04:12.213
The page parameter is
gonna be data.next_page.

44
00:04:15.507 --> 00:04:20.079
And we're just gonna mutate
the array in place like we did in

45
00:04:20.079 --> 00:04:23.017
the earlier exercise with our todos.

46
00:04:23.017 --> 00:04:29.096
Data.movies equals we'll
copy the existing movies,

47
00:04:29.096 --> 00:04:33.241
and then we'll add the next.results.

48
00:04:36.599 --> 00:04:39.397
And we'll need to update
the next page as well.

49
00:04:39.397 --> 00:04:45.327
Data.next_page equals next.page

50
00:04:45.327 --> 00:04:50.334
is less than or the total pages.

51
00:04:50.334 --> 00:04:56.675
And if we just copy the logic
from before it should work.

52
00:04:56.675 --> 00:05:00.294
Otherwise that's gonna be null.

53
00:05:00.294 --> 00:05:02.792
Okay, let's cross our fingers.

54
00:05:02.792 --> 00:05:07.171
If this works,
then we're gonna have infinite loading.

55
00:05:07.171 --> 00:05:12.310
And you can see that number on
the right is in fact increasing.

56
00:05:12.310 --> 00:05:15.157
So, we've loaded all of this extra data,
but

57
00:05:15.157 --> 00:05:20.201
we're not rendering it to the DOM,
we're only rendering 16 items at a time.

58
00:05:21.668 --> 00:05:27.237
So that implements our trending,
upcoming, and now playing views.

59
00:05:27.237 --> 00:05:30.889
I'm just gonna get rid of this debugging
code here because that's no longer

60
00:05:30.889 --> 00:05:31.468
relevant.

