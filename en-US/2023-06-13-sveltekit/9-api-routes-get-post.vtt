WEBVTT

1
00:00:00.390 --> 00:00:03.216
So far we've been creating
pages in our application, but

2
00:00:03.216 --> 00:00:05.820
SvelteKit allows you to
create more than just pages.

3
00:00:05.820 --> 00:00:09.930
You can also create API routes by
adding a server.js file instead of

4
00:00:09.930 --> 00:00:14.762
a page.server.js file and a page.svelte
that exports functions corresponding

5
00:00:14.762 --> 00:00:18.890
to HTTP methods like GET, POST,
PATCH, PUT, DELETE, and so on.

6
00:00:20.120 --> 00:00:26.207
So this app here fetches data from a /roll
API route when you click the button.

7
00:00:26.207 --> 00:00:28.280
And at the moment,
we haven't implemented that route.

8
00:00:28.280 --> 00:00:36.211
So let's do that by adding
a src/routes/roll/+server.js file.

9
00:00:36.211 --> 00:00:42.130
So click the new file icon,
roll/server.js.

10
00:00:44.070 --> 00:00:48.690
And from here, we can export functions
that correspond to the HTTP Verbs.

11
00:00:48.690 --> 00:00:49.933
In this case, we're gonna have a GET.

12
00:00:53.403 --> 00:00:55.699
We'll get a random number between 1 and 6.

13
00:01:12.208 --> 00:01:16.054
And we're gonna return
that as a response object.

14
00:01:20.845 --> 00:01:26.542
We need to add a header,
That tells the browser

15
00:01:26.542 --> 00:01:32.403
that the response is of
type application/json.

16
00:01:33.549 --> 00:01:38.350
Now just like request, this response
thing here is a is a web standard.

17
00:01:38.350 --> 00:01:42.819
It's an object that you deal with when
you use the Fetch API, and other times.

18
00:01:42.819 --> 00:01:47.475
And so inside our API route handlers,
our job is to take your request and

19
00:01:47.475 --> 00:01:50.045
return one of these response objects.

20
00:01:50.045 --> 00:01:52.611
And you'll find the documentation on MDN.

21
00:01:55.745 --> 00:02:00.009
Now since doing this sort of thing
is pretty common in an API route,

22
00:02:00.009 --> 00:02:03.981
returning json, we actually have
a helper to do that for you.

23
00:02:03.981 --> 00:02:11.521
I'm gonna import that helper now,
import {json} from '@sveltejs/kit'.

24
00:02:11.521 --> 00:02:14.998
And then instead of returning all of this,

25
00:02:14.998 --> 00:02:19.547
we're just gonna return json and
then pass in the data.

26
00:02:21.288 --> 00:02:25.224
So now, if we roll the dice,
we're gonna fetch the response,

27
00:02:25.224 --> 00:02:30.221
which is the same response object that
we've just returned from the API route.

28
00:02:30.221 --> 00:02:35.244
And we're gonna assign that to this local
value that gets shown when we've rolled.

29
00:02:36.378 --> 00:02:39.683
Rolled a 1, not very good,
try again, rolled a 4.

30
00:02:39.683 --> 00:02:40.976
I'm gonna keep going until I get a 6.

31
00:02:44.625 --> 00:02:45.646
Come on.

32
00:02:52.130 --> 00:02:53.682
Is my logic bad?

33
00:02:55.593 --> 00:02:56.648
I got a six, finally.

34
00:02:56.648 --> 00:02:58.667
All right,
we can move on to the next section.

35
00:03:01.087 --> 00:03:05.615
Okay, so that was a GET handler, but you
can also add handlers that mutate data,

36
00:03:05.615 --> 00:03:07.790
such as a POST handler.

37
00:03:07.790 --> 00:03:08.889
Now, in most cases,

38
00:03:08.889 --> 00:03:13.310
you shouldn't use a POST handler when
you could use a form action instead.

39
00:03:13.310 --> 00:03:16.160
Form actions are gonna involve
less code for you to write.

40
00:03:16.160 --> 00:03:20.140
And they also work without JavaScript as
we've seen, making things more resilient.

41
00:03:22.430 --> 00:03:25.220
But we can do it if we need to for
some reason.

42
00:03:25.220 --> 00:03:28.126
So we're gonna revisit
the todo app from before and

43
00:03:28.126 --> 00:03:32.060
we're gonna implement it this
time using an API route.

44
00:03:32.060 --> 00:03:35.675
Beside the key down event handler
of the input at the top here,

45
00:03:35.675 --> 00:03:38.292
we're gonna post some data to the server.

46
00:03:42.750 --> 00:03:49.915
Response is gonna be the result
of fetching the todo API route.

47
00:03:54.293 --> 00:03:58.180
Is gonna be a POST call,
so add method post.

48
00:03:58.180 --> 00:04:02.629
The body is gonna be a stringified JSON

49
00:04:02.629 --> 00:04:07.087
object containing the description.

50
00:04:10.546 --> 00:04:15.961
And we're gonna add that
"Content-Type": "application/json" header.

51
00:04:23.921 --> 00:04:28.834
Okay, so when we hit the Enter
key inside this todo,

52
00:04:28.834 --> 00:04:35.290
we're posting data to a route
that we haven't yet created.

53
00:04:35.290 --> 00:04:36.760
So we need to create that now.

54
00:04:36.760 --> 00:04:41.326
Inside the routes directory,
create a todo folder, then inside there,

55
00:04:41.326 --> 00:04:42.882
create our server.js.

56
00:04:46.154 --> 00:04:50.377
This time, we're gonna define a POST
handler instead of a GET handler.

57
00:04:53.245 --> 00:04:55.437
Gonna import that json helper cuz
we're gonna use it in a minute.

58
00:04:59.201 --> 00:05:04.072
And we're gonna import the same
database object that we were

59
00:05:04.072 --> 00:05:09.230
using inside the form action before,
import * as database from

60
00:05:09.230 --> 00:05:14.788
'$lib/server/database.js', that's
this file over here.

61
00:05:19.036 --> 00:05:20.110
Got a question from the crowd?

62
00:05:21.260 --> 00:05:23.820
&gt;&gt; Are API endpoints open by default?

63
00:05:23.820 --> 00:05:29.399
Or do you need some sort of CORS config
to open up for third party users?

64
00:05:29.399 --> 00:05:31.540
&gt;&gt; Yes, so that's a very good question.

65
00:05:31.540 --> 00:05:36.582
SvelteKit will by default
lock down your API routes to

66
00:05:36.582 --> 00:05:42.370
prevent people from posting
data from different sites.

67
00:05:42.370 --> 00:05:46.826
So to protect your users from phishing
attacks and things like that.

68
00:05:46.826 --> 00:05:51.181
Where someone has a website that looks
like yours and posts some malicious data,

69
00:05:51.181 --> 00:05:54.256
which then uses your cookies
to do something nefarious,

70
00:05:54.256 --> 00:05:58.060
SvelteKit will will look at the origin
header when a request comes in.

71
00:05:58.060 --> 00:06:02.798
And if you're trying to mutate some data,
it will reject it by default.

72
00:06:02.798 --> 00:06:08.229
You can disable that behavior and you can
add your own CORS behavior if you want,

73
00:06:08.229 --> 00:06:13.080
but the default behavior is to try and
keep your users safe.

74
00:06:13.080 --> 00:06:14.275
Hopefully, that answers the question?

75
00:06:17.963 --> 00:06:22.349
&gt;&gt; Is that JSON utility just using
JSON.parse under the hood or

76
00:06:22.349 --> 00:06:24.502
does it support like bigints?

77
00:06:24.502 --> 00:06:28.360
&gt;&gt; It's just stringifying
the data that you pass in.

78
00:06:28.360 --> 00:06:32.316
Yeah, it's basically just sugar
over returning a new response with

79
00:06:32.316 --> 00:06:34.900
JSON.stringify, the same data.

80
00:06:34.900 --> 00:06:39.209
Yeah, if you wanna pass rich data,
then you're gonna need to use your own

81
00:06:39.209 --> 00:06:42.768
serialization and
your own deserialization on the client.

82
00:06:47.777 --> 00:06:49.587
All right, so
we've imported everything that we need.

83
00:06:49.587 --> 00:06:52.076
It's time to add the handler itself.

84
00:06:59.127 --> 00:07:04.469
First thing we'll do is
get the JSON that was sent

85
00:07:04.469 --> 00:07:09.565
from the browser using await request.json().

86
00:07:13.802 --> 00:07:16.415
We're gonna grab the userid
from the cookies,

87
00:07:23.361 --> 00:07:26.960
And then we're gonna get the ID
of the todo that we create so

88
00:07:26.960 --> 00:07:28.508
that we can pass it back.

89
00:07:34.637 --> 00:07:36.819
Passing the userid and the description.

90
00:07:38.913 --> 00:07:42.380
Right, and that's gonna call
the createTodo function here.

91
00:07:43.380 --> 00:07:49.560
Which is gonna create a new id,
just a random string of digits.

92
00:07:49.560 --> 00:07:52.799
It'll add that to
the in-memory database and

93
00:07:52.799 --> 00:07:56.490
then it'll return the id
to whatever called it.

94
00:07:56.490 --> 00:07:58.995
Then we can take that ID
send it back to the browser.

95
00:08:04.172 --> 00:08:07.978
We're gonna pass in status 201.

96
00:08:07.978 --> 00:08:13.324
This time, 201 is the HTTP status code
that you use when you create a resource.

97
00:08:18.153 --> 00:08:22.983
If you wanna learn more about HTTP status
codes which we'll use a few times in this

98
00:08:22.983 --> 00:08:26.055
workshop, there's a site
which is very helpful.

99
00:08:26.055 --> 00:08:34.076
Explains the difference between,
for example, an HTTP 200 and a 201.

100
00:08:34.076 --> 00:08:38.435
No, look, there we go, 200, okay?

101
00:08:43.713 --> 00:08:46.933
So back inside the event
handler on the page,

102
00:08:46.933 --> 00:08:51.690
we need to do something with
the response that was just generated.

103
00:08:53.260 --> 00:08:54.486
Grab the response json,

104
00:08:59.851 --> 00:09:03.731
In much the same way that we got
the request json on the server.

105
00:09:03.731 --> 00:09:08.068
And then, we're gonna mutate the todo
array directly inside this handler.

106
00:09:20.154 --> 00:09:24.199
And then finally, the value gets reset so
that we can add a new todo.

107
00:09:25.316 --> 00:09:30.501
Now this mutation that we're doing here,
this is perhaps a little bit unorthodox.

108
00:09:30.501 --> 00:09:34.285
You should only do this if the result of
that mutation is the same result that

109
00:09:34.285 --> 00:09:38.630
you get if you reload the page, otherwise,
you will get into an inconsistent state.

110
00:09:38.630 --> 00:09:42.242
But because we control this state,
it's a safe mutation to make.

111
00:09:42.242 --> 00:09:51.204
So now if I add a todo,
it's gonna add that to the list.

