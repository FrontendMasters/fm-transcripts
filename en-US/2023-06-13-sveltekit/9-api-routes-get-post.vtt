WEBVTT

1
00:00:00.000 --> 00:00:02.218
Okay, so
we just talked about page options.

2
00:00:02.218 --> 00:00:07.083
We also have options that apply
to individual links in our app.

3
00:00:07.083 --> 00:00:11.174
In this exercise here, we have
a slow-a route and a slow-b route, and

4
00:00:11.174 --> 00:00:15.744
both of those have artificial delays
like the ones that we've seen elsewhere,

5
00:00:15.744 --> 00:00:18.561
meaning it takes a long
time to navigate to them.

6
00:00:18.561 --> 00:00:20.325
If I click on this link,

7
00:00:20.325 --> 00:00:24.930
the page doesn't update until
that second delay has gone by.

8
00:00:24.930 --> 00:00:28.158
Now, ideally you would just
make your navigation quicker,

9
00:00:28.158 --> 00:00:32.020
you would speed up whatever the bottleneck
is in your data fetching, but

10
00:00:32.020 --> 00:00:33.873
sometimes that's not an option.

11
00:00:33.873 --> 00:00:38.449
SvelteKit cannot make your
navigations faster in that case, but

12
00:00:38.449 --> 00:00:42.202
it can make things seem
faster by anticipating them.

13
00:00:42.202 --> 00:00:47.117
When an anchor element, an A element has
a data-SvelteKit preload data attribute,

14
00:00:47.117 --> 00:00:51.554
SvelteKit will begin the navigation as
soon as the user hovers over the link,

15
00:00:51.554 --> 00:00:55.101
if they're using a desktop device or
if they're on a mobile,

16
00:00:55.101 --> 00:00:56.423
as soon as they tap it.

17
00:00:56.423 --> 00:01:02.669
So, let's add that to the first link in
our navigation, open your layout.svelte.

18
00:01:02.669 --> 00:01:07.761
And down here,
we're gonna add that data-sveltekit

19
00:01:07.761 --> 00:01:12.518
preload data attribute, and
now if we go to slow b,

20
00:01:12.518 --> 00:01:19.284
which doesn't have the attribute,
it's gonna take that full second.

21
00:01:19.284 --> 00:01:23.435
But, if we go over to slow a and
click the link, then, it'll take

22
00:01:23.435 --> 00:01:28.363
a second minus however long you are
hovering over the link in the first place.

23
00:01:28.363 --> 00:01:33.600
So, it'll be noticeably faster even
if it's a more typical move over and

24
00:01:33.600 --> 00:01:38.003
click, we are still saving
a few 100 milliseconds there.

25
00:01:38.003 --> 00:01:42.101
So, in practice, even though it might
not sound like it is gonna make much of

26
00:01:42.101 --> 00:01:45.882
a difference to save a couple of
100 milliseconds, here or there,

27
00:01:45.882 --> 00:01:49.982
it is very often the difference between
a navigation that feels sluggish and

28
00:01:49.982 --> 00:01:51.802
a navigation that feels snappy.

29
00:01:51.802 --> 00:01:55.778
Now, you can put that attribute on
individual links like we have done here.

30
00:01:55.778 --> 00:01:59.233
Or you can put it on any element
that contains links, right?

31
00:01:59.233 --> 00:02:02.984
So, we could put it on the nav,
for example.

32
00:02:02.984 --> 00:02:07.309
And in fact, when you set up a new
SvelteKit project, by default,

33
00:02:07.309 --> 00:02:11.558
that attribute will exist on
the body element in your app.html,

34
00:02:11.558 --> 00:02:14.742
although we don't have
it here in the tutorial.

35
00:02:14.742 --> 00:02:22.603
You can customize the behavior further
by specifying a value for preload data.

36
00:02:22.603 --> 00:02:26.609
You can use preload data equals hover,
which is the default.

37
00:02:26.609 --> 00:02:31.264
Or you can specify tap,
in which case preloading will only

38
00:02:31.264 --> 00:02:34.974
begin when the user
actually taps on the link.

39
00:02:34.974 --> 00:02:39.783
Or you can turn it off altogether,
in which case the navigation won't

40
00:02:39.783 --> 00:02:43.792
begin until a click event has
been registered on the link.

41
00:02:43.792 --> 00:02:46.632
All right, the reason that you would
do that is that sometimes the behavior

42
00:02:46.632 --> 00:02:47.623
that comes out of the box,

43
00:02:47.623 --> 00:02:50.257
will result in false positives, and
that might not be what you want.

44
00:02:50.257 --> 00:02:54.324
You might wanna preserve data, or you
might wanna make sure that when the user

45
00:02:54.324 --> 00:02:57.765
clicks on a link, that you're
getting the up to the minute data,

46
00:02:57.765 --> 00:03:02.208
if you're doing something that's heavily
real-time, like a stock tracker app or

47
00:03:02.208 --> 00:03:03.673
something of that nature.

48
00:03:03.673 --> 00:03:07.193
If you don't wanna do any
preloading of data at all,

49
00:03:07.193 --> 00:03:10.635
then you can still preload the code for
a new route.

50
00:03:10.635 --> 00:03:16.700
By changing this data here to code, then,
we will preload any code that is needed

51
00:03:16.700 --> 00:03:22.780
for SvelteKit to navigate to the new
route, but it won't run any data fetching.

52
00:03:22.780 --> 00:03:24.793
And this gives us a few new options.

53
00:03:24.793 --> 00:03:28.839
You can preload code eagerly,
which means that it will get the code for

54
00:03:28.839 --> 00:03:31.729
every length on the page
after every navigation.

55
00:03:31.729 --> 00:03:36.238
You can set viewport which means that
SvelteKit will fetch the code for

56
00:03:36.238 --> 00:03:39.219
the new route as a link
enters the viewport, or

57
00:03:39.219 --> 00:03:42.443
you can use the same options
as with preload data.

58
00:03:42.443 --> 00:03:46.664
And finally, you can also initiate
preloading programmatically if you need to

59
00:03:46.664 --> 00:03:48.428
by importing the preload code and

60
00:03:48.428 --> 00:03:51.453
preload data functions from
the app navigation module.

61
00:03:55.746 --> 00:03:59.787
As we've seen, ordinarily, when you
navigate between pages SvelteKit does that

62
00:03:59.787 --> 00:04:03.320
without reloading the page,
it does a client side navigation instead.

63
00:04:03.320 --> 00:04:08.385
So, here if we navigate between
the homepage and the about page, you'll

64
00:04:08.385 --> 00:04:14.041
see that timer at the bottom which is in
our layout, that just keeps on ticking up.

65
00:04:14.041 --> 00:04:18.856
In some cases you might wanna
disable client side routing.

66
00:04:18.856 --> 00:04:21.403
And you can do so
by adding the data-SvelteKit

67
00:04:21.403 --> 00:04:26.116
reload attribute on any individual link or
again on any element that contains links.

68
00:04:26.116 --> 00:04:31.129
So, let's go into our
nav in the layout.svelte

69
00:04:31.129 --> 00:04:36.275
component, and add data-sveltekit-reload.

70
00:04:36.275 --> 00:04:39.351
And now, you'll see as long as you're
on the page the timer is ticking up.

71
00:04:39.351 --> 00:04:43.225
But as soon as we navigate,
it's gonna reset the timer,

72
00:04:43.225 --> 00:04:47.030
because we've reloaded
the document from the server.

73
00:04:47.030 --> 00:04:50.465
So, you can learn more about the link
options that are available and

74
00:04:50.465 --> 00:04:54.021
the values that you can put on them
in the link options documentation on

75
00:04:54.021 --> 00:04:55.301
the SvelteKit website.

