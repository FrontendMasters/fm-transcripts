WEBVTT

1
00:00:00.270 --> 00:00:02.460
Okay, so
we've just talked about page options.

2
00:00:02.460 --> 00:00:07.380
We also have options that apply
to individual links in our app.

3
00:00:07.380 --> 00:00:11.460
In this exercise here we have
a slow/a route and a slow/b route.

4
00:00:11.460 --> 00:00:15.961
And both of those have artificial delays
like the ones that we've seen elsewhere,

5
00:00:15.961 --> 00:00:18.610
meaning it takes a long
time to navigate to them.

6
00:00:18.610 --> 00:00:20.330
If I click on this link,

7
00:00:20.330 --> 00:00:24.810
the page doesn't update until
that second delay has gone by.

8
00:00:26.100 --> 00:00:28.767
Now, ideally you would just
make your navigation quicker,

9
00:00:28.767 --> 00:00:31.801
you would speed up whatever
the bottleneck is in your data fetching,

10
00:00:31.801 --> 00:00:34.250
but sometimes that's not an option.

11
00:00:34.250 --> 00:00:37.959
SvelteKit cannot make your
navigations faster in that case,

12
00:00:37.959 --> 00:00:41.399
but it can make things seem
faster by anticipating them.

13
00:00:42.490 --> 00:00:47.528
When an anchor element, an a element has
a data-sveltekit-preload-data attribute,

14
00:00:47.528 --> 00:00:51.852
SvelteKit will begin the navigation as
soon as the user hovers over the link.

15
00:00:51.852 --> 00:00:55.464
If they're using a desktop device or
if they're on a mobile,

16
00:00:55.464 --> 00:00:56.790
as soon as they tap it.

17
00:00:56.790 --> 00:00:59.550
So let's add that to the first
link in our navigation.

18
00:00:59.550 --> 00:01:01.733
Open your layout.svelte.

19
00:01:03.618 --> 00:01:11.918
And down here, we're gonna add that
data-sveltekit-preload-data attribute.

20
00:01:11.918 --> 00:01:16.333
And now if we go to slow/b which
doesn't have that attribute,

21
00:01:16.333 --> 00:01:19.470
it's gonna take that full second.

22
00:01:19.470 --> 00:01:23.119
But if we go over to slow/a and
click the link, then it'll take

23
00:01:23.119 --> 00:01:28.430
a second minus however long you are
hovering over the link in the first place.

24
00:01:28.430 --> 00:01:33.898
So it'll be noticeably faster,
even if it's a more typical move over and

25
00:01:33.898 --> 00:01:38.675
click, we're still saving a few
hundred milliseconds there.

26
00:01:38.675 --> 00:01:42.376
So in practice, even though it might
not sound like it's gonna make much of

27
00:01:42.376 --> 00:01:45.785
a difference to save a couple of
hundred milliseconds here or there,

28
00:01:45.785 --> 00:01:49.608
it's very often the difference between
a navigation that feels sluggish and

29
00:01:49.608 --> 00:01:51.285
a navigation that feels snappy.

30
00:01:52.595 --> 00:01:56.410
Now, you can put that attribute on
individual links like we've done here.

31
00:01:56.410 --> 00:01:59.370
Or you can put it on any element
that contains links, right?

32
00:01:59.370 --> 00:02:02.110
So we could put it on the nav,
for example.

33
00:02:03.590 --> 00:02:06.606
And in fact,
when you set up a new SvelteKit project,

34
00:02:06.606 --> 00:02:10.896
by default that attribute will exist
on the body element in your app.html,

35
00:02:10.896 --> 00:02:13.659
although we don't have
it here in the tutorial.

36
00:02:15.660 --> 00:02:22.740
You can customize the behavior further
by specifying a value for preload data.

37
00:02:22.740 --> 00:02:27.264
You can use preload data equals hover,
which is the default,

38
00:02:27.264 --> 00:02:32.136
or you can specify tap in which case
preloading will only begin when

39
00:02:32.136 --> 00:02:35.170
the user actually taps on the link.

40
00:02:35.170 --> 00:02:40.008
Or you can turn it off altogether,
in which case the navigation won't begin

41
00:02:40.008 --> 00:02:43.342
until a click event has been
registered on the link.

42
00:02:43.342 --> 00:02:46.923
All right, and the reason that you would
do that is that sometimes the behavior

43
00:02:46.923 --> 00:02:49.690
that comes out of the box will
result in false positives, and

44
00:02:49.690 --> 00:02:51.170
that might not be what you want.

45
00:02:51.170 --> 00:02:54.996
You might wanna preserve data or you might
wanna make sure that when the user clicks

46
00:02:54.996 --> 00:02:57.610
on a link that you're getting
the up to the minute data.

47
00:02:57.610 --> 00:03:01.111
If you're doing something that's heavily
real time like a stock tracker app or

48
00:03:01.111 --> 00:03:02.320
something of that nature.

49
00:03:04.170 --> 00:03:07.914
If you don't wanna do any
preloading of data at all,

50
00:03:07.914 --> 00:03:12.593
then you can still preload the code for
a new route by changing this

51
00:03:12.593 --> 00:03:17.100
data here to code then we will
preload any code that is needed for

52
00:03:17.100 --> 00:03:22.660
SvelteKit to navigate to the new route,
but it won't run any data fetching.

53
00:03:22.660 --> 00:03:24.990
And this gives us a few new options.

54
00:03:24.990 --> 00:03:28.791
You can preload code eagerly,
which means that it will get the code for

55
00:03:28.791 --> 00:03:31.980
every link on the page
after every navigation.

56
00:03:31.980 --> 00:03:35.945
You can set viewport, which means that
SvelteKit will fetch the code for

57
00:03:35.945 --> 00:03:38.860
the new route as a link
enters the viewport.

58
00:03:38.860 --> 00:03:41.980
Or you can use the same
options as with preload data.

59
00:03:43.350 --> 00:03:46.814
Finally, you can also initiate preloading
programmatically if you need to by

60
00:03:46.814 --> 00:03:48.178
importing the preload code and

61
00:03:48.178 --> 00:03:50.709
preload data functions from
the app navigation module.

62
00:03:55.714 --> 00:03:58.894
As we've seen, ordinarily when
you navigate between pages,

63
00:03:58.894 --> 00:04:01.000
it does that without reloading the page.

64
00:04:01.000 --> 00:04:02.750
It does a client site navigation instead.

65
00:04:03.770 --> 00:04:08.975
So here if we navigate between the
homepage and the about page, you'll see

66
00:04:08.975 --> 00:04:14.442
that timer at the bottom which is in our
layout, that just keeps on ticking up.

67
00:04:14.442 --> 00:04:18.890
In some cases you might wanna disable
client-side routing and you can do so

68
00:04:18.890 --> 00:04:23.410
by adding the data-sveltekit-reload
attribute on any individual link or

69
00:04:23.410 --> 00:04:25.965
again on any element that contains links.

70
00:04:25.965 --> 00:04:31.388
So let's go into our nav in
the layout.svelte component and

71
00:04:31.388 --> 00:04:34.314
add data-sveltekit-reload.

72
00:04:36.279 --> 00:04:39.916
And now you'll see as long as we're
on the page the timer is ticking up,

73
00:04:39.916 --> 00:04:43.007
but as soon as we navigate it's
gonna reset the timer because

74
00:04:43.007 --> 00:04:45.450
we've reloaded the document
from the server.

75
00:04:47.010 --> 00:04:50.422
So you can learn more about the link
options that are available and

76
00:04:50.422 --> 00:04:54.084
the values that you can put on them
in the link options documentation on

77
00:04:54.084 --> 00:04:55.404
the SvelteKit website.

