WEBVTT

1
00:00:00.000 --> 00:00:04.636
So in the chapter on loading data, we saw
how you can export a load function from

2
00:00:04.636 --> 00:00:08.161
your page.server.js and
your layout server.js files.

3
00:00:08.161 --> 00:00:12.539
Well, we can also export page
options from those files.

4
00:00:12.539 --> 00:00:17.776
We can export an SSR bullion,
a CSR bullion, pre-render value,

5
00:00:17.776 --> 00:00:22.934
and a trailing/value, and
these control how the page behaves.

6
00:00:22.934 --> 00:00:26.767
And in the following exercises, we're
gonna learn about each of these in turn.

7
00:00:26.767 --> 00:00:30.292
All of the page options that
we're about to discuss can be

8
00:00:30.292 --> 00:00:32.570
exported from individual pages, or

9
00:00:32.570 --> 00:00:37.207
they can be applied to groups of pages
by exporting them from a layout file.

10
00:00:37.207 --> 00:00:40.577
So if you want some behavior to
apply to your entire application,

11
00:00:40.577 --> 00:00:42.737
you can put it in a route layout.js file.

12
00:00:42.737 --> 00:00:45.597
And then in child pages, you can enable or

13
00:00:45.597 --> 00:00:49.214
disable other aspects of
that behavior as you need.

14
00:00:49.214 --> 00:00:52.549
This allows you to mix and match
different behaviors in your application.

15
00:00:52.549 --> 00:00:53.365
For example,

16
00:00:53.365 --> 00:00:57.785
you can have an application that is
mostly pre-rendered as static HTML, but

17
00:00:57.785 --> 00:01:02.420
has some dynamic pages that are rendered
with personalized data, for example.

18
00:01:02.420 --> 00:01:04.518
And so
this makes SvelteKit very versatile for

19
00:01:04.518 --> 00:01:06.789
whatever kind of application
you're building.

20
00:01:09.773 --> 00:01:12.770
The first one we're gonna
learn about is SSR.

21
00:01:12.770 --> 00:01:16.977
So server-side rendering is the process
of generating HTML on the server, and

22
00:01:16.977 --> 00:01:19.064
it's what SvelteKit does by default.

23
00:01:19.064 --> 00:01:22.940
It's very important for performance and
resilience, it's very beneficial for

24
00:01:22.940 --> 00:01:24.803
search engine optimization, right?

25
00:01:24.803 --> 00:01:27.869
While some search engines cannot index
content that is rendered in the browser

26
00:01:27.869 --> 00:01:30.902
with JavaScript, it happens less
frequently and it happens less reliably.

27
00:01:30.902 --> 00:01:34.201
So SSR is a really
important default to have.

28
00:01:34.201 --> 00:01:35.237
Having said that,

29
00:01:35.237 --> 00:01:38.800
there are some components that
cannot be rendered on the server,

30
00:01:38.800 --> 00:01:43.226
maybe they expect to be able to access
browser globals like window immediately.

31
00:01:43.226 --> 00:01:45.605
And ideally,
you would change those components so

32
00:01:45.605 --> 00:01:49.267
that they can be used on the server,
but sometimes that's just not possible.

33
00:01:49.267 --> 00:01:54.146
So in some situations you might need
to disable server side rendering,

34
00:01:54.146 --> 00:01:56.761
we can do that in a page.server.js,

35
00:02:01.546 --> 00:02:07.780
With export const ssr = false, right?

36
00:02:07.780 --> 00:02:13.599
This will allow this page here to be
rendered without breaking the app.

37
00:02:13.599 --> 00:02:16.914
Because if we were to server
render this without ssr = false,

38
00:02:16.914 --> 00:02:21.119
if you had the default ssr = true, then
we get an internal error when you try and

39
00:02:21.119 --> 00:02:25.099
server render this page, because
window is not available on the server.

40
00:02:25.099 --> 00:02:28.586
This is a component that cannot be
rendered in a server environment.

41
00:02:34.087 --> 00:02:36.682
The counterpart to SSR is CSR.

42
00:02:36.682 --> 00:02:40.128
Client side rendering is what
makes the page interactive.

43
00:02:40.128 --> 00:02:41.666
So here we have a button.

44
00:02:41.666 --> 00:02:46.040
When we click on it,
it's gonna increment the count, right?

45
00:02:46.040 --> 00:02:48.901
It also enables SvelteKit
to update the page upon

46
00:02:48.901 --> 00:02:51.771
navigation without causing
a full page reload.

47
00:02:51.771 --> 00:02:58.437
And you can disable it using a page
option, we'll add a page.server.js file,

48
00:02:58.437 --> 00:03:02.271
I'm gonna export const csr = false, right?

49
00:03:02.271 --> 00:03:05.673
This means that no JavaScript is
getting sent to the client at all,

50
00:03:05.673 --> 00:03:08.855
it also means that our components
are no longer interactive.

51
00:03:08.855 --> 00:03:11.404
If I click on this button,
nothing is going to happen.

52
00:03:11.404 --> 00:03:15.436
So most of the time you're not
going to use this option but

53
00:03:15.436 --> 00:03:20.224
it is a useful way to be able to find
out how your app is gonna behave for

54
00:03:20.224 --> 00:03:24.436
users who, for whatever reason,
cannot use JavaScript.

55
00:03:30.664 --> 00:03:33.057
Okay, let's talk about prerendering.

56
00:03:33.057 --> 00:03:37.757
Prerendering means generating HTML for
a page once at build time rather

57
00:03:37.757 --> 00:03:42.077
than dynamically for
every request that comes into your server.

58
00:03:42.077 --> 00:03:46.663
The advantage of pre-rendering is that
serving static data is extremely cheap and

59
00:03:46.663 --> 00:03:47.456
performant.

60
00:03:47.456 --> 00:03:50.212
So it means that you can serve a very
large number of users without worrying

61
00:03:50.212 --> 00:03:53.074
about things like cache control headers,
which are very easy to get wrong.

62
00:03:53.074 --> 00:03:56.812
But the trade-off is that the build
process will take longer, and so

63
00:03:56.812 --> 00:03:59.970
pre-rendered content can only
be updated by building and

64
00:03:59.970 --> 00:04:02.428
deploying a new version
of the application.

65
00:04:02.428 --> 00:04:05.733
So it's up to you when it's
appropriate to use this.

66
00:04:05.733 --> 00:04:10.892
If you wanna pre-render a page, then you
just export const pre-render = true,

67
00:04:10.892 --> 00:04:13.230
again from your page.server.js.

68
00:04:15.587 --> 00:04:19.059
Right, this isn't gonna have any
observable effect here in the tutorial

69
00:04:19.059 --> 00:04:21.635
because we're running
the application in dev mode and

70
00:04:21.635 --> 00:04:24.053
nothing gets pre-rendered
during development.

71
00:04:24.053 --> 00:04:28.837
This is a thing that happens
when you run NPM, run build.

72
00:04:30.073 --> 00:04:32.051
Not everything can be pre-rendered, right?

73
00:04:32.051 --> 00:04:34.952
If you're building something
that uses dynamic data,

74
00:04:34.952 --> 00:04:37.180
then you can't have an HTML file for that.

75
00:04:37.180 --> 00:04:41.770
Basic rule of thumb is that if any two
users hitting that URL are gonna get

76
00:04:41.770 --> 00:04:44.755
the exact same content
in all circumstances,

77
00:04:44.755 --> 00:04:48.295
then that page is a good candidate for
pre-ordering.

78
00:04:48.295 --> 00:04:52.937
You can't pre-render pages
with dynamic parameters like

79
00:04:52.937 --> 00:04:57.402
earlier when we had /blogs/slug and
square brackets.

80
00:04:57.402 --> 00:05:02.565
We pre-render things like that as
long as SvelteKit can find them,

81
00:05:02.565 --> 00:05:08.727
either by you having specified that in
your Svelte config, or by svelte kit being

82
00:05:08.727 --> 00:05:13.821
able to find links to those pages
from crawling your application.

83
00:05:13.821 --> 00:05:17.385
So if you set pre-render to true
inside your route.layout.server.js,

84
00:05:17.385 --> 00:05:20.902
then you've effectively turned
SvelteKit into a static site generator.

85
00:05:20.902 --> 00:05:25.505
And this is what you would do, for
example, if you're using adapter static,

86
00:05:25.505 --> 00:05:28.506
which is the adapter that
allows SvelteKit to build

87
00:05:28.506 --> 00:05:32.171
applications that can be hosted
on places like GitHub pages.

88
00:05:37.010 --> 00:05:41.296
The final page option that we're
gonna look at is trailing slash.

89
00:05:41.296 --> 00:05:46.054
So two URLs like /foo and
/foo/, they might look the same,

90
00:05:46.054 --> 00:05:49.083
but they are actually very different.

91
00:05:49.083 --> 00:05:55.127
The relative URL like ./bar will
resolve to /bar in the first case,

92
00:05:55.127 --> 00:05:59.840
but /foo/bar in the second,
and search engines will

93
00:05:59.840 --> 00:06:04.771
treat those two URLs as distinct,
which harms your SEO.

94
00:06:04.771 --> 00:06:09.016
So you don't wanna be loose
about your trailing slash,

95
00:06:09.016 --> 00:06:11.645
you wanna pick one and stick to it.

96
00:06:11.645 --> 00:06:16.652
And the default behavior
that SvelteKit chooses is to

97
00:06:16.652 --> 00:06:22.103
remove trailing slashes so
that If you do have a request for

98
00:06:22.103 --> 00:06:27.904
/foo/, SvelteKit will turn
that into a request for /foo.

99
00:06:27.904 --> 00:06:32.711
So we can see that here we have
a bunch of URLs in the navbar, and

100
00:06:32.711 --> 00:06:36.976
if I click on always/ it's
just gonna go to /always.

101
00:06:36.976 --> 00:06:40.436
And these haven't been implemented yet,
so they're all gonna behave the same way.

102
00:06:42.253 --> 00:06:46.053
If we go to the always page.server.js.

103
00:06:50.871 --> 00:06:55.557
And add export const
trailingSlash = 'always',

104
00:06:55.557 --> 00:06:59.506
then now the behavior
is gonna be reversed.

105
00:06:59.506 --> 00:07:03.679
If I navigate to /always/,
that's the URL that I get.

106
00:07:03.679 --> 00:07:09.215
If I navigate to /always
without the slash,

107
00:07:09.215 --> 00:07:13.156
it will end up on the same place.

108
00:07:13.156 --> 00:07:17.053
If you wanna accommodate both
cases which is not recommended,

109
00:07:17.053 --> 00:07:19.193
then you can add the ignore value.

110
00:07:30.839 --> 00:07:34.444
All right, and now if I navigate to
/ignore without the trailing slash,

111
00:07:34.444 --> 00:07:37.425
that's what I'll get there too
if I add the trailing slash.

112
00:07:37.425 --> 00:07:40.328
There are very few situations
where this is appropriate,

113
00:07:40.328 --> 00:07:43.181
most of the time you will be
using either always or never.

114
00:07:45.589 --> 00:07:50.481
And this also affects pre-rendering,
if you have a trailing slash then it will

115
00:07:50.481 --> 00:07:54.285
be pre-rendered as an index.html
file inside a directory.

116
00:07:54.285 --> 00:08:01.528
If the training is removed, then a URL
like /never will become never.html.

117
00:08:01.528 --> 00:08:05.680
And that's something that you might need
to configure with your static web server

118
00:08:05.680 --> 00:08:08.400
if that's how you're
deploying your application.

119
00:08:08.400 --> 00:08:14.920
&gt;&gt; Have you seen people make installable
PWA with Svelte and do you feel like that?

120
00:08:14.920 --> 00:08:20.655
Or have you seen traction with PWAs,
whether it's worth it or

121
00:08:20.655 --> 00:08:26.076
versus building something for
the app store or whatever?

122
00:08:26.076 --> 00:08:28.977
&gt;&gt; It's certainly possible to build
a progressive web app with SvelteKit.

123
00:08:28.977 --> 00:08:32.239
It gives you all the tools that you
need to add a service worker and

124
00:08:32.239 --> 00:08:34.912
you can add a manifest.json
in your static folder.

125
00:08:34.912 --> 00:08:39.105
It also works with a library
called Vite Plugin PWA,

126
00:08:39.105 --> 00:08:42.454
which does a lot of the grunt work for
you.

127
00:08:42.454 --> 00:08:45.770
So absolutely,
it's something that you can do.

128
00:08:45.770 --> 00:08:50.243
I couldn't tell you how widespread that
is, how many people are building things

129
00:08:50.243 --> 00:08:53.094
in that style, but
it's completely achievable.

130
00:08:53.094 --> 00:08:56.916
&gt;&gt; If I understand correctly,
using pre-render true and

131
00:08:56.916 --> 00:09:01.235
layout.server.js is the same
as using an adapter or static.

132
00:09:04.593 --> 00:09:06.014
&gt;&gt; You need to do both.

133
00:09:06.014 --> 00:09:10.727
Essentially, if you use adapter static and
you're not pre-rendering,

134
00:09:10.727 --> 00:09:15.211
then it's gonna yell at you because
it's gonna say, hang on a minute,

135
00:09:15.211 --> 00:09:18.235
we have some non-pre-rendered routes here.

136
00:09:18.235 --> 00:09:20.239
And it'll tell you how to resolve that.

137
00:09:20.239 --> 00:09:24.838
So if you are using Adapter Static,
then you probably want to have export cons

138
00:09:24.838 --> 00:09:28.544
pre-rendered true from your
route layout that server.js.

139
00:09:28.544 --> 00:09:32.876
But there are some situations in which
you might have the bulk of your site

140
00:09:32.876 --> 00:09:37.706
pre-rendered, but then have a few things
that only use client side rendering,

141
00:09:37.706 --> 00:09:38.576
for example.

142
00:09:38.576 --> 00:09:43.250
And so it's not a hard requirement that
every page in your app is pre-rendered if

143
00:09:43.250 --> 00:09:44.844
you are using antistatic.

144
00:09:44.844 --> 00:09:49.010
You can use it to build a fully
rendered single page app, for example.

145
00:09:49.010 --> 00:09:53.745
&gt;&gt; I had a situation where the only way
to find a link to get to some set of

146
00:09:53.745 --> 00:09:58.144
blog posts in a pre-rendered
static site was to click through

147
00:09:58.144 --> 00:10:02.881
a client side post Paginator that
had collapsed page buttons, but

148
00:10:02.881 --> 00:10:06.288
Svelte didn't like through
of the page links.

149
00:10:06.288 --> 00:10:09.843
Is there a way to get some
kind of file manifest for

150
00:10:09.843 --> 00:10:13.228
all routes that's SvelteKit can't find, so

151
00:10:13.228 --> 00:10:18.460
I don't have to make any update
entries data and SvelteKit get config?

152
00:10:18.460 --> 00:10:21.033
&gt;&gt; Yeah, [LAUGH] hold that thought.

153
00:10:21.033 --> 00:10:24.024
So there is a pull request
open on the SvelteKit

154
00:10:24.024 --> 00:10:29.009
repo right now by Elliott Johnson, one
of our core team members that adds a new

155
00:10:29.009 --> 00:10:32.866
export from your page.server.js
files called entries.

156
00:10:32.866 --> 00:10:39.274
This is a function that you define per
route when you have dynamic parameters,

157
00:10:39.274 --> 00:10:44.046
it returns an array of all of
the valid paths for that page.

158
00:10:44.046 --> 00:10:49.778
So if you have something like /blog/slug,
then you can define an entrance function

159
00:10:49.778 --> 00:10:55.267
on that file that will communicate with
your CMS, grab whatever data it needs to,

160
00:10:55.267 --> 00:11:00.857
and then tell the pre-renderer these are
the pages that need to be pre-rendered.

161
00:11:00.857 --> 00:11:03.441
Right now you have to do that
in your Svelte config but

162
00:11:03.441 --> 00:11:05.800
soon you'll be able to do
it in the page itself.

