WEBVTT

1
00:00:00.000 --> 00:00:04.397
Now, as we saw because we're using the
form element, this app continues to work

2
00:00:04.397 --> 00:00:07.641
even if the user doesn't have
JavaScript for some reason.

3
00:00:07.641 --> 00:00:12.535
And a page that I often link people to is
this one, which describes all the ways

4
00:00:12.535 --> 00:00:17.078
in which JavaScript can fail when
someone is trying to use your web app.

5
00:00:17.078 --> 00:00:19.522
It's quite a long list.

6
00:00:19.522 --> 00:00:21.902
I live in New York City,
I take the subway a lot.

7
00:00:21.902 --> 00:00:24.037
We do not have signal on the subway,
and so

8
00:00:24.037 --> 00:00:27.941
very often I'll start loading something
while I'm at the subway station,

9
00:00:27.941 --> 00:00:32.099
I'll disappear into the tunnel, and then
the rest of the content fails to load.

10
00:00:32.099 --> 00:00:35.883
And so JavaScript fails to kick in, and
I'm left with a broken application.

11
00:00:35.883 --> 00:00:39.225
And it doesn't need to be this way, we
can build things in such a way that they

12
00:00:39.225 --> 00:00:41.225
are resilient to those
sorts of conditions.

13
00:00:41.225 --> 00:00:44.375
Of course,
most of the time users do have JavaScript,

14
00:00:44.375 --> 00:00:47.114
and when JavaScript is available,
we can use it

15
00:00:47.114 --> 00:00:51.444
to provide a better user experience
than is possible without JavaScript.

16
00:00:51.444 --> 00:00:54.603
This is called progressive enhancement,
and

17
00:00:54.603 --> 00:00:59.544
in SvelteKit we can progressively
enhance forms using an element action

18
00:00:59.544 --> 00:01:02.794
which we learned about
in the Svelte workshop.

19
00:01:02.794 --> 00:01:07.528
First thing we're gonna do is import {

20
00:01:07.528 --> 00:01:12.271
enhance } from '$app/forms';.

21
00:01:18.595 --> 00:01:24.446
And then down on the form itself, we're
just gonna add the use:enhance directive.

22
00:01:26.573 --> 00:01:27.823
Add it there.

23
00:01:27.823 --> 00:01:31.893
And then the same thing on the other
form that deletes the todo.

24
00:01:40.856 --> 00:01:42.447
Other than that,
everything is gonna behave the same.

25
00:01:42.447 --> 00:01:48.880
So now if we add a todo, get some lunch.

26
00:01:48.880 --> 00:01:53.537
It's gonna look exactly the same because
this is a local development server, so

27
00:01:53.537 --> 00:01:56.481
the server round trip was
already fast before, but

28
00:01:56.481 --> 00:02:00.058
now we're rendering this without
reloading the page at all.

29
00:02:00.058 --> 00:02:02.691
But now that we're doing that,
we can start to get a little bit fancy.

30
00:02:02.691 --> 00:02:06.723
We can start to use things like
transitions to make the UI a little bit

31
00:02:06.723 --> 00:02:10.855
nicer, and in our case to make
what's happening a bit more visible.

32
00:02:10.855 --> 00:02:16.536
And we begin by importing {fly,
slide} from 'svelte/transition';.

33
00:02:24.712 --> 00:02:29.076
And on the list item,
where we're rendering each todo.

34
00:02:31.743 --> 00:02:35.652
We're gonna add a fly transition
when the list item comes in.

35
00:02:37.715 --> 00:02:43.103
Give it a y value of 20, so that it flies
in for 20 pixels when you create it.

36
00:02:44.635 --> 00:02:47.701
And when it vanishes, we'll slide it out.

37
00:02:49.450 --> 00:02:57.400
So now, if I add a new todo,
You can see that it transitions in nicely.

38
00:02:57.400 --> 00:03:01.570
If I delete one of these todos,
you'll see that it slides out.

39
00:03:01.570 --> 00:03:04.729
And that's obviously something that you
can't do if you don't have JavaScript on

40
00:03:04.729 --> 00:03:06.771
the page and
you're relying on the full page reload.

41
00:03:08.510 --> 00:03:11.617
&gt;&gt; How was the delete icon displayed?

42
00:03:11.617 --> 00:03:14.890
Are you importing an svg?

43
00:03:14.890 --> 00:03:20.497
&gt;&gt; Yeah, so the delete icon that you can
see on the right-hand side of these todos,

44
00:03:20.497 --> 00:03:25.214
that's just an svg that's in
the same directory, remove.svg.

45
00:03:25.214 --> 00:03:31.644
On the button, we have some CSS which
is being added all the way down here,

46
00:03:31.644 --> 00:03:36.337
just has a background which
is referencing that svg.

47
00:03:36.337 --> 00:03:41.731
And the fact that we're able
to do url(./remove.svg) and

48
00:03:41.731 --> 00:03:48.792
it renders is because Vite is resolving
that against the current module.

49
00:03:48.792 --> 00:03:54.086
When the application is built,
it will take that file, hash it,

50
00:03:54.086 --> 00:03:59.477
put it in an assets directory, and
give it an immutable file name so

51
00:03:59.477 --> 00:04:03.811
that it can be cached forever and
it gets optimized and

52
00:04:03.811 --> 00:04:08.084
everything, and
you don't have to worry about it.

53
00:04:08.084 --> 00:04:12.358
All you need to do is import the svg
from the local directory, so

54
00:04:12.358 --> 00:04:15.273
this is a nice way to
do this kind of design.

55
00:04:15.273 --> 00:04:18.881
And you could also put the remove.svg
in your lib folder and

56
00:04:18.881 --> 00:04:21.836
reference it like that,
that would also work.

57
00:04:24.744 --> 00:04:28.302
Yeah, that's the kind of nice thing
that we get by building on top of Vite.

