WEBVTT

1
00:00:00.000 --> 00:00:04.273
Very often your routes will
have dynamic parameters.

2
00:00:04.273 --> 00:00:08.299
That means that you'll have a single
route that can serve multiple pages.

3
00:00:08.299 --> 00:00:14.117
So here for example,
we have a blog/[slug]/.page.svelte.

4
00:00:14.117 --> 00:00:19.982
That creates a root that will match
blog/one, blog/two, blog/three, and so on.

5
00:00:19.982 --> 00:00:23.194
At the moment, that file doesn't exist,
so let's create it.

6
00:00:32.421 --> 00:00:39.038
But for now we'll just put in some
static placeholder content, And

7
00:00:39.038 --> 00:00:42.749
if we navigate to any of the pages
that are defined by that route,

8
00:00:42.749 --> 00:00:45.246
then we'll see that same static content.

9
00:00:48.141 --> 00:00:51.131
Now the way that dynamic parameters
are defined is actually very flexible,

10
00:00:51.131 --> 00:00:53.293
you can have multiple
parameters in a single segment.

11
00:00:53.293 --> 00:00:55.919
You can have multiple
parameters in a route, and

12
00:00:55.919 --> 00:01:00.032
we'll learn more about complex routing
patterns later on in the workshop.

13
00:01:07.673 --> 00:01:11.122
So SvelteKit's job boils
down to three things.

14
00:01:11.122 --> 00:01:16.007
There's routing, then there's loading
some data that's needed by the route,

15
00:01:16.007 --> 00:01:20.490
and then ultimately rendering the HTML or
the DOM that that route defines.

16
00:01:20.490 --> 00:01:23.921
And we've seen the routing part and
the rendering part,

17
00:01:23.921 --> 00:01:26.366
now we need to learn about data loading.

18
00:01:26.366 --> 00:01:30.046
Every page of your app can
define a load function

19
00:01:30.046 --> 00:01:34.930
in a page.server.js file
alongside the page.svelte file.

20
00:01:34.930 --> 00:01:39.447
As the file name suggests, this module
only ever runs on the server, even for

21
00:01:39.447 --> 00:01:43.217
client-side navigations,
where we get the data using fetch.

22
00:01:43.217 --> 00:01:46.693
So we'll add
a blog/.page.server.js file so

23
00:01:46.693 --> 00:01:51.573
that we can replace those hard-coded
links, the one, two, three,

24
00:01:51.573 --> 00:01:56.719
with some blog post data that's
defined in this module here, data.js.

25
00:01:56.719 --> 00:02:02.107
So in the blog directory,
hit the new file icon and

26
00:02:02.107 --> 00:02:05.456
create +page.server.js.

27
00:02:08.993 --> 00:02:13.052
And then we're gonna type out
the contents of this file.

28
00:02:13.052 --> 00:02:16.625
Now we covered this in the Svelte
part of the course, but

29
00:02:16.625 --> 00:02:21.491
if you're tempted to just select this and
copy and paste it into the editor,

30
00:02:21.491 --> 00:02:25.923
it's gonna pop up with a warning
saying that you shouldn't do that.

31
00:02:25.923 --> 00:02:29.487
And the reason is that you will learn
much more effectively if you do, in fact,

32
00:02:29.487 --> 00:02:30.785
type out the code yourself.

33
00:02:30.785 --> 00:02:34.548
You'll develop better muscle memory, and
you'll notice things that you would not

34
00:02:34.548 --> 00:02:36.562
notice if you were just copying and
pasting.

35
00:02:36.562 --> 00:02:42.942
So I do urge you to resist the temptation
to enable copying and pasting.

36
00:02:42.942 --> 00:02:49.261
So let's do this,
import posts from /data.js.

37
00:02:49.261 --> 00:02:52.493
And then we're gonna
export our load function.

38
00:02:56.295 --> 00:03:00.368
For now, we don't need all of the post
information, we just need the summaries,

39
00:03:00.368 --> 00:03:04.339
because the post content isn't important
until we visit the blog post itself.

40
00:03:04.339 --> 00:03:09.927
So we'll create a Summaries property here,
posts.map post,

41
00:03:09.927 --> 00:03:15.615
and then we'll return, A slug so

42
00:03:15.615 --> 00:03:21.080
that we know where to navigate to, and
a title so that we can populate the list.

43
00:03:27.413 --> 00:03:28.780
There's little call out here.

44
00:03:28.780 --> 00:03:32.796
For the sake of the tutorial, we're
importing data from this data.js module.

45
00:03:32.796 --> 00:03:36.745
Obviously in a real application, you
will be pulling this data from your file

46
00:03:36.745 --> 00:03:41.321
system, from the markdown files, or from a
content management system, or a database.

47
00:03:41.321 --> 00:03:45.263
But for the sake of this tutorial,
we're gonna keep it simple and

48
00:03:45.263 --> 00:03:47.708
import the data directly from a module.

49
00:03:47.708 --> 00:03:53.372
And we can access this data in
page.svelt by exposing a data prop.

50
00:03:53.372 --> 00:03:55.124
So go over to that file, and

51
00:03:55.124 --> 00:03:58.717
we'll add a script element
at the top of the component.

52
00:04:04.134 --> 00:04:08.918
And everything that is returned from
that load function is gonna be available

53
00:04:08.918 --> 00:04:10.622
now on that data property.

54
00:04:10.622 --> 00:04:15.461
So we can get rid of all of these and
replace them within each block

55
00:04:15.461 --> 00:04:20.043
that iterates over the data array,
and renders a list item.

56
00:04:30.285 --> 00:04:37.564
Replace the hard-coded one with slug and
the hard-coded title with title.

57
00:04:40.783 --> 00:04:45.901
I'm now seeing some
content being rendered.

58
00:04:45.901 --> 00:04:50.411
Of course, if you visit these pages,
then we still see that

59
00:04:50.411 --> 00:04:55.117
hard-coded content on the blog's
slug page.svelte file.

60
00:04:55.117 --> 00:04:56.226
So let's fix that.

61
00:04:56.226 --> 00:05:03.074
Let's create another file that loads
data for an individual blog post.

62
00:05:03.074 --> 00:05:10.397
Inside the blog's slug directory,
create a new file, again, page.server.js.

63
00:05:10.397 --> 00:05:14.029
And inside here,
we'll import from that module again,

64
00:05:14.029 --> 00:05:18.656
import posts from ../ this time
because it's one directory higher.

65
00:05:22.475 --> 00:05:24.495
And again,
we're gonna create a load function.

66
00:05:24.495 --> 00:05:27.492
This time,
we're gonna use the params object,

67
00:05:27.492 --> 00:05:32.035
because that's how we're gonna know
which slug we need to load data for.

68
00:05:37.117 --> 00:05:41.437
So of all the posts in the array,
we're gonna find the one,

69
00:05:43.967 --> 00:05:46.437
Where the slug matches
the current parameter.

70
00:05:52.469 --> 00:05:54.051
Then we're simply gonna return that.

71
00:06:00.898 --> 00:06:06.358
And now we can create a data
prop on the page component,

72
00:06:06.358 --> 00:06:09.931
and use that to inject the content.

73
00:06:21.955 --> 00:06:25.570
All right, so we have our title, and
then we'll create a container for

74
00:06:25.570 --> 00:06:26.661
the content itself.

75
00:06:26.661 --> 00:06:29.816
We're gonna use the HTML tag, and
as we discussed in the Svelte course,

76
00:06:29.816 --> 00:06:32.780
this is something that you should
only use with data that you trust.

77
00:06:32.780 --> 00:06:36.492
Never use it with untrusted data that
was submitted by users, for example,

78
00:06:36.492 --> 00:06:37.942
because it is not sanitized,

79
00:06:37.942 --> 00:06:41.597
then you could expose your users to
a cross site scripting vulnerability.

80
00:06:47.453 --> 00:06:55.701
Okay, so we now have some data
powering that h1 and the div below it.

81
00:06:55.701 --> 00:07:00.135
There is one last detail that
we need to take care of here.

82
00:07:00.135 --> 00:07:04.528
Someone could visit a nonexistent post,
and when they do that they'll get

83
00:07:04.528 --> 00:07:09.002
an error because we haven't been able
to find the post in order to render it.

84
00:07:09.002 --> 00:07:11.614
And we wanna give them a more
informative error than a 500.

85
00:07:11.614 --> 00:07:13.499
This should in fact be a 404, so

86
00:07:13.499 --> 00:07:16.174
we need to take care of
that when we load the data.

87
00:07:16.174 --> 00:07:20.311
Go back into the blog slug
page server.js file, and

88
00:07:20.311 --> 00:07:26.611
after we've declared the post variable,
we'll say that if we don't have it,

89
00:07:26.611 --> 00:07:31.238
then we need to throw an error,
which is gonna be a 404.

90
00:07:31.238 --> 00:07:34.135
And we need to import the error
helper from SvelteKit.

91
00:07:40.009 --> 00:07:44.621
So we now see the appropriate
404 error page.

92
00:07:44.621 --> 00:07:48.904
We'll learn more about error
handling later on in the workshop.

93
00:07:48.904 --> 00:07:54.183
&gt;&gt; Can you have a loading page that
shows with a spinner before the plus

94
00:07:54.183 --> 00:07:59.758
page.tsload function finishes and
plus page.svelte is rendered?

95
00:07:59.758 --> 00:08:02.840
&gt;&gt; Yes, you can.

96
00:08:02.840 --> 00:08:07.483
Unfortunately, because of a technical
limitation with web containers,

97
00:08:07.483 --> 00:08:10.651
which is the technology
that powers this website,

98
00:08:10.651 --> 00:08:13.834
I cannot demonstrate
streaming in this tutorial.

99
00:08:13.834 --> 00:08:19.467
What I can do is show a little
demo that has been put together,

100
00:08:19.467 --> 00:08:22.793
this sveltekit-on-the-edge.

101
00:08:22.793 --> 00:08:31.362
So this is a page that is being rendered
dynamically in an edge function.

102
00:08:31.362 --> 00:08:33.419
Is Osseo near here?

103
00:08:33.419 --> 00:08:37.641
I don't know if that's
the nearest point of

104
00:08:37.641 --> 00:08:42.099
presence that this page
is being rendered at.

105
00:08:42.099 --> 00:08:47.796
And if I click on the streamed link here,
then it's actually

106
00:08:47.796 --> 00:08:53.507
gonna get some data from the server
that is gonna be delayed.

107
00:08:53.507 --> 00:08:57.269
So we're actually able to stream
promises from the edge function,

108
00:08:57.269 --> 00:09:00.371
or from the serverless function,
or from your server,

109
00:09:00.371 --> 00:09:05.062
and they will be rendered in the browser
when the promise resolves using streaming.

110
00:09:05.062 --> 00:09:07.566
So that's how we approach that problem.

111
00:09:07.566 --> 00:09:11.413
We don't have a dedicated loading page or
something like that.

112
00:09:11.413 --> 00:09:15.339
Instead, you return promises
from your data, and

113
00:09:15.339 --> 00:09:21.477
in that way you're able to render the UI
that is most appropriate for your case.

114
00:09:21.477 --> 00:09:25.228
&gt;&gt; There was another question
that came in around,

115
00:09:28.181 --> 00:09:32.483
Kind of, there's Svelte Native for

116
00:09:32.483 --> 00:09:37.903
mobile but
have you seen any traction on that?

117
00:09:37.903 --> 00:09:42.082
Not knowing too many people
talking about Svelte Mobile,

118
00:09:42.082 --> 00:09:47.723
just wondering if that's a good route,
or if you're thinking about mobile?

119
00:09:47.723 --> 00:09:51.271
&gt;&gt; I haven't personally
used Svelte Native.

120
00:09:51.271 --> 00:09:56.293
Some people have, I believe it is
an up-to-date and functional project,

121
00:09:56.293 --> 00:10:00.065
and it's the only one that we have,
as far as I'm aware.

122
00:10:00.065 --> 00:10:01.227
So if you do wanna build a native app,

123
00:10:01.227 --> 00:10:03.076
then I definitely recommend
giving Svelte Native a look.

124
00:10:03.076 --> 00:10:06.934
But it is not an officially supported
project that comes from the community.

125
00:10:06.934 --> 00:10:11.403
It's something that if we have time and
bandwidth to do, we would like bring into

126
00:10:11.403 --> 00:10:15.291
the organization at some point and
have that as a first class project.

127
00:10:15.291 --> 00:10:18.929
But right now it's a little bit,
your mileage may vary.

