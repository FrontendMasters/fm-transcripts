[00:00:00]
>> So we're gonna create a new route inside our source/routes directory, which is gonna be called movies/, and then view is a dynamic parameter. And inside that, we can create a page.svelte component. And we're gonna be loading some data, so we'll add a page.ts as well. Now we can actually do one better than having a dynamic parameter here.

[00:00:37]
Because we've defined which views are valid, trending, now playing, and upcoming, we can use a route matcher so that this view dynamic parameter is not matched for anything that is not one of those three things. So the way that we do that is we create a matcher inside source/params.

[00:01:03]
We'll create a new matcher, I'll call it list.ts. And you'll remember that we need to export a match function which is gonna return true if the parameter matches and false if it doesn't. And if we return param, In views, which we just import like that, then this is gonna return true if the parameter is trending, now playing, or upcoming, but false if it's anything else.

[00:01:46]
Now that we've got that, we can add that to the parameter here. Just rename that directory view=list. And now if we go to /movies/trending, the page exists. If we change that in any way, like trendingx, then it's a 404, it no longer matches. This gives us some confidence when we're building our data loading logic that we are, in fact, dealing with a valid view.

[00:02:14]

>> Sorry if I missed it, but is there any reason you would wanna do it this way versus just making three routes for trending, playing, etc?
>> Yeah, so the question was, why are we creating a dynamic parameter instead of just repeating the directory? And the answer is that these pages are essentially the same.

[00:02:33]
They're using the same component, they're using the same logic. And we could do it by just reusing components in three separate files. But then if we add a new view, like the most popular movies, or the top rated movies, then we got to keep duplicating code. And if we do it this way instead, then it allows us to express those things just once.

[00:02:55]
It's also, for the sake of the workshop, it's a good opportunity to use more SvelteKit features, and that's the main reason, if I'm honest, yes.
>> Do you need to remove the three awaits in the promise?
>> Yes, all right, so thank you to whoever noticed that. After removing the waterfall in our route load function, we actually did no such thing, because we're still awaiting the API calls here.

[00:03:27]
We need to get rid of each of these, like that. Although this is now erroring because we're not returning a movie list from the fetch call, we're returning a promise of a movie list. So we need to get each of these and just wrap that in a promise like that.

[00:03:47]
And now, because we're awaiting all of these, trending has the correct type again of MovieList. Thank you to whoever noticed that in the chat, that's very helpful.

