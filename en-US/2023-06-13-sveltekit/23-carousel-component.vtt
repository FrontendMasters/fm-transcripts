WEBVTT

1
00:00:00.000 --> 00:00:04.067
All right, so the first thing that we're
gonna do in order to build this page is

2
00:00:04.067 --> 00:00:06.300
we're gonna implement our data loading.

3
00:00:06.300 --> 00:00:09.193
We're gonna add a load function,

4
00:00:09.193 --> 00:00:14.893
which should be very familiar by now,
export async function load.

5
00:00:14.893 --> 00:00:21.768
And we're gonna grab the params so
that we know what view we're dealing with.

6
00:00:21.768 --> 00:00:26.830
We're also gonna use the url and
the fetch functions.

7
00:00:32.879 --> 00:00:33.743
And inside here,

8
00:00:33.743 --> 00:00:37.323
we're gonna get hold of the view object
that relates to the current page.

9
00:00:42.264 --> 00:00:47.084
And again, because we've got that
matcher on the route, we can guarantee

10
00:00:47.084 --> 00:00:51.770
that this view object is in fact,
one of the views that we defined earlier

11
00:00:54.833 --> 00:00:58.434
And we're gonna get the data
using the API helper,

12
00:00:58.434 --> 00:01:02.299
which we'll import,
import*as api from lib/api.

13
00:01:05.719 --> 00:01:12.182
Await api.get again,
we're gonna pass in fetch.

14
00:01:12.182 --> 00:01:16.672
Then we're gonna use the endpoint of
the view that we defined earlier.

15
00:01:21.436 --> 00:01:24.627
And we're gonna tell TypeScript what
kind of thing we're dealing with,

16
00:01:24.627 --> 00:01:25.613
which is a movie list.

17
00:01:28.760 --> 00:01:32.832
I'm gonna return some data
from this load function.

18
00:01:34.921 --> 00:01:40.504
We've got the title,
this is gonna be the view.title.

19
00:01:40.504 --> 00:01:45.483
We're gonna end up using
the endpoint as well.

20
00:01:45.483 --> 00:01:49.891
Most importantly,
the movies themselves, data.results.

21
00:01:51.820 --> 00:01:54.331
And that'll do for now,
we can start building it and

22
00:01:54.331 --> 00:01:56.055
we'll come back to the rest later.

23
00:02:00.203 --> 00:02:07.555
Let's create a script tag, lang=ts,
so that we can add our data prop.

24
00:02:11.621 --> 00:02:16.007
The first thing that we'll do,
we'll create a wrapper element.

25
00:02:16.007 --> 00:02:19.616
We're gonna give it a column class.

26
00:02:19.616 --> 00:02:26.827
And inside the lad,
an h1 with the title of the current page.

27
00:02:28.983 --> 00:02:32.799
Okay, so if we visit trending,
we get the trending title.

28
00:02:32.799 --> 00:02:37.608
If we visit now playing,
we get the now playing title.

29
00:02:37.608 --> 00:02:42.151
Basically all of the things that
are defined in our views.ts file that

30
00:02:42.151 --> 00:02:44.542
correspond to the slug in question.

31
00:02:51.492 --> 00:02:55.214
Now here's where things
are gonna get interesting.

32
00:02:55.214 --> 00:03:00.292
Because on each of these pages,
we wanna have Infinite pagination,

33
00:03:00.292 --> 00:03:02.749
we wanna have infinite loading.

34
00:03:02.749 --> 00:03:06.761
But on browsers that
don't have JavaScript for

35
00:03:06.761 --> 00:03:11.081
whatever reason,
we want it to continue working.

36
00:03:11.081 --> 00:03:17.587
So if I go into my DevTools and
disable JavaScript,

37
00:03:21.663 --> 00:03:24.588
What we'll see is that
when we scroll down,

38
00:03:24.588 --> 00:03:29.745
instead of triggering infinite loading,
we're gonna see a next page link.

39
00:03:29.745 --> 00:03:31.066
Click on that.

40
00:03:36.267 --> 00:03:39.965
It's gonna take us to
the next page of movies

41
00:03:45.450 --> 00:03:47.856
And so back in our data loading function,

42
00:03:52.006 --> 00:03:56.549
You wanna get the current page from
the query parameters that were passed in,

43
00:04:02.194 --> 00:04:07.038
In this URL because it's a URL
object with a search params map.

44
00:04:07.038 --> 00:04:12.380
We can get page and
that's gonna default to one.

45
00:04:14.325 --> 00:04:21.598
And we can just pass that
directly to our API, Like that.

46
00:04:24.934 --> 00:04:28.845
And from our load function, we are gonna
tell the page whether there is an next

47
00:04:28.845 --> 00:04:32.171
page or not, because eventually
you'll get to the end of the list

48
00:04:37.905 --> 00:04:43.803
And we can know that if and
the page that was returned from the API

49
00:04:43.803 --> 00:04:50.048
is less than the number of total
pages which returned from the API.

50
00:04:50.048 --> 00:04:55.954
If it is, then we'll do data.page + 1.

51
00:04:55.954 --> 00:04:58.667
Otherwise, we're gonna return null,

52
00:04:58.667 --> 00:05:02.267
which will mean don't render
a next page link at all.

53
00:05:02.267 --> 00:05:07.242
So it's time to start building
the component that is gonna render that

54
00:05:07.242 --> 00:05:08.506
grid of movies and

55
00:05:08.506 --> 00:05:14.262
enable the infinite loading functionality
that we saw on the deployed version.

56
00:05:19.381 --> 00:05:24.346
Inside our lib directory inside
components, we'll create

57
00:05:24.346 --> 00:05:29.423
a new component,
let's just call it ResultsPage.svelte.

58
00:05:32.913 --> 00:05:37.070
Unlike the carousel,
this is gonna have a movies prop,

59
00:05:42.510 --> 00:05:45.774
Which is gonna be an array
of movie list results.

60
00:05:45.774 --> 00:05:51.562
I forgot to add lang=ts here, so let me
do that real quick and fix that input.

61
00:06:08.566 --> 00:06:14.741
And we're also gonna have a next prop,
which is gonna be a string or

62
00:06:14.741 --> 00:06:22.263
a null that's gonna correspond to the next
page link that we got back from our data

63
00:06:36.523 --> 00:06:39.783
So it'll take us a minute to
build it to the infinite loading.

64
00:06:39.783 --> 00:06:40.343
For now,

65
00:06:40.343 --> 00:06:44.488
we're just gonna render essentially
a grid of all of the data at once.

66
00:06:44.488 --> 00:06:48.420
Create a div class= results.

67
00:06:48.420 --> 00:06:53.075
And inside there, we're just gonna
iterate over the entire movies array.

68
00:06:58.431 --> 00:07:01.259
And for each of them,
we're gonna create a link,

69
00:07:08.460 --> 00:07:13.408
And we're gonna direct that to our as yet
non existent movie page.

70
00:07:18.361 --> 00:07:24.532
And inside that, we're gonna put an image,
which is gonna be the movies poster.

71
00:07:24.532 --> 00:07:27.671
Give it an alt attribute
of the movie title.

72
00:07:35.659 --> 00:07:39.488
And the source is gonna use that
media helper that we've seen already.

73
00:07:41.212 --> 00:07:47.653
We'll pass in the movie poster
path with a width of 500.

74
00:07:52.277 --> 00:07:57.521
And then back in the root,
we'll invoke that

75
00:07:57.521 --> 00:08:03.047
results page component and
pass in our movies.

76
00:08:11.105 --> 00:08:13.582
We need to add that next prop as well

77
00:08:23.060 --> 00:08:28.747
And that's gonna be the current view,
data.view,

78
00:08:31.836 --> 00:08:39.298
With a page parameter, It looks like we're
not returning that from our load function.

79
00:08:42.734 --> 00:08:47.521
That will let's just fix that,
pass the parameter back into the page.

80
00:08:47.521 --> 00:08:53.329
And then the page is gonna be whatever
the next page is, data.next_page.

81
00:08:53.329 --> 00:08:56.724
Although of course, we don't want to
do this if there is no next page.

82
00:08:56.724 --> 00:09:00.299
So we're gonna make this
whole thing a ternary.

83
00:09:00.299 --> 00:09:05.660
If data.next_page is true,

84
00:09:05.660 --> 00:09:10.981
then, Passing that whole thing,

85
00:09:10.981 --> 00:09:15.388
otherwise that's gonna be null, in which
case, we won't render a next page link

86
00:09:21.834 --> 00:09:25.917
So we now have some movies
rendering on our results page.

87
00:09:25.917 --> 00:09:28.841
Again, they're kinda ginormous,
this is not what we want.

88
00:09:28.841 --> 00:09:32.833
So let's go into that component and
start adding some CSS.

89
00:09:37.579 --> 00:09:44.372
Our results div is gonna
have a display of grid.

90
00:09:44.372 --> 00:09:51.351
And for now,
we'll give a grid template columns of 4,

91
00:09:51.351 --> 00:09:56.400
and we're gonna make sure that the width

92
00:09:56.400 --> 00:10:01.317
doesn't exceed the space available.

93
00:10:10.866 --> 00:10:15.346
And we happen to know that all of
the posters that we get from the movie

94
00:10:15.346 --> 00:10:18.097
database have an aspect ratio of 2/3,

95
00:10:18.097 --> 00:10:21.182
which we can use to
prevent any layout shifts.

96
00:10:24.522 --> 00:10:29.205
Okay, I need to figure out why
that's not doing what we expect.

97
00:10:32.116 --> 00:10:34.795
I think it's because the image
also needs some CSS.

98
00:10:36.857 --> 00:10:38.779
Add some CSS to the image.

99
00:10:43.314 --> 00:10:45.845
Okay, so for this to fit on the page,

100
00:10:45.845 --> 00:10:50.766
we need to make a small change to that
column class in our global styles.

101
00:10:50.766 --> 00:10:53.815
This width here should in fact,
be a max width.

102
00:10:53.815 --> 00:10:57.249
We want the width to be
100% up until that point.

103
00:10:57.249 --> 00:11:02.855
And so now we have this nice, pleasing
grid that's showing all of the data.

