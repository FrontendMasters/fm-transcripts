WEBVTT

1
00:00:00.000 --> 00:00:01.568
So in the chatter on loading data,

2
00:00:01.568 --> 00:00:04.595
we saw how you can export a load
function from your page server JS and

3
00:00:04.595 --> 00:00:08.398
your layout server JS files, but we can
also export page options from those files.

4
00:00:08.398 --> 00:00:14.601
We can export an SSR boolean,
a CSR boolean,

5
00:00:14.601 --> 00:00:20.159
a prerender value and a training value.

6
00:00:20.159 --> 00:00:22.995
And these control how the page behaves.

7
00:00:22.995 --> 00:00:27.172
And on the following exercise, we are
gonna learn about each of these, in time.

8
00:00:27.172 --> 00:00:30.280
All of the page options that
we're about to discuss,

9
00:00:30.280 --> 00:00:32.628
can be exported from individual pages,

10
00:00:32.628 --> 00:00:37.136
or they can be applied to groups of pages
by exporting then from a layout file.

11
00:00:37.136 --> 00:00:40.575
So if you want some behavior to
reply to your entire application,

12
00:00:40.575 --> 00:00:42.710
you can put it in a root layout .js file.

13
00:00:42.710 --> 00:00:45.640
And then in child pages, you can enable or

14
00:00:45.640 --> 00:00:49.342
disable other aspects of
that behavior as you need.

15
00:00:49.342 --> 00:00:52.811
This allows you to mix and match
different behaviors in your application.

16
00:00:52.811 --> 00:00:53.665
For example,

17
00:00:53.665 --> 00:00:58.149
you can have an application that is
mostly prerendered as static HTML, but

18
00:00:58.149 --> 00:01:02.865
has some dynamic pages that are rendered
with personalized data for example.

19
00:01:02.865 --> 00:01:04.674
And so
this makes Spelke it very versatile for

20
00:01:04.674 --> 00:01:07.656
whatever kind of application
you're building.

21
00:01:07.656 --> 00:01:09.764
The first one we're gonna
learn about is SSR.

22
00:01:09.764 --> 00:01:15.757
So Server-Side Rendering is the process
of generating HTML on the server,

23
00:01:15.757 --> 00:01:19.136
and it's what SvelteKit does by default.

24
00:01:19.136 --> 00:01:21.750
It's very important for
performance and resilience,

25
00:01:21.750 --> 00:01:24.815
it's very beneficial for
search engine optimization, right?

26
00:01:24.815 --> 00:01:28.022
While some search engines cannot index
content that is rendered in the browser

27
00:01:28.022 --> 00:01:31.193
with JavaScript, it happens less
frequently and it happens less reliably.

28
00:01:31.193 --> 00:01:34.012
So SSR is a really
important default to have.

29
00:01:34.012 --> 00:01:34.957
Having said that,

30
00:01:34.957 --> 00:01:38.216
there are some components that
cannot be rendered on the server.

31
00:01:38.216 --> 00:01:43.438
Maybe they expect to be able to access
browser globals like Windows immediately.

32
00:01:43.438 --> 00:01:45.677
And ideally you would
change those components so

33
00:01:45.677 --> 00:01:49.288
that they can be used on the server,
but sometimes that's just not possible.

34
00:01:49.288 --> 00:01:53.616
So in some situations you might need
to disable server-side rendering.

35
00:01:53.616 --> 00:01:56.991
We can do that in a page.server.js,

36
00:02:01.631 --> 00:02:07.459
With export const ssr = false.

37
00:02:07.459 --> 00:02:12.852
Right, and this will allow this page here
to be rendered without breaking the app,

38
00:02:12.852 --> 00:02:16.858
because if we were to server
render this without ssr = false,

39
00:02:16.858 --> 00:02:19.109
if you had the default ssr = true.

40
00:02:19.109 --> 00:02:22.732
Then we get an internal error when
we try and server render this page,

41
00:02:22.732 --> 00:02:25.237
because window is not
available on the server.

42
00:02:25.237 --> 00:02:29.858
This is a component that cannot be
rendered in a server environment.

43
00:02:34.158 --> 00:02:36.797
The counterpart to SSR is CSR.

44
00:02:36.797 --> 00:02:39.950
Client-Side Rendering is what
makes the page interactive.

45
00:02:39.950 --> 00:02:46.373
So here we have a button, when we click on
it, it's gonna increment the count, right?

46
00:02:46.373 --> 00:02:49.951
It also enables spelt kit to update
the page upon navigation without

47
00:02:49.951 --> 00:02:51.467
causing a full page reload.

48
00:02:51.467 --> 00:02:57.910
And you can disable it using a page
option add a page server.js file.

49
00:02:57.910 --> 00:03:02.380
I'm gonna export const CSR equals false,
right?

50
00:03:02.380 --> 00:03:06.303
This means that no JavaScript is
getting sent to the client at all.

51
00:03:06.303 --> 00:03:09.189
But also it means that our components
are no longer interactive,

52
00:03:09.189 --> 00:03:11.505
if I click on this button
nothing is going to happen.

53
00:03:11.505 --> 00:03:15.365
So most of the time you're
not going to use this option,

54
00:03:15.365 --> 00:03:18.075
you're not going to use this option but

55
00:03:18.075 --> 00:03:22.755
it is a useful way to be able to find
out how your app is gonna behave for

56
00:03:22.755 --> 00:03:26.889
users who, for whatever reason,
cannot use JavaScript.

57
00:03:30.735 --> 00:03:33.137
Okay, let's talk about prerendering.

58
00:03:33.137 --> 00:03:37.868
Prerendering means generating HTML for
a page once at build time.

59
00:03:37.868 --> 00:03:42.141
Rather than dynamically for
every request that comes into your server.

60
00:03:42.141 --> 00:03:46.905
The advantage of prerendering is that
serving static data is extremely cheap and

61
00:03:46.905 --> 00:03:47.753
performant.

62
00:03:47.753 --> 00:03:50.562
So it means that you can serve a very
large number of users without worrying

63
00:03:50.562 --> 00:03:53.429
about things like cash control headers,
which are very easy to get wrong.

64
00:03:53.429 --> 00:03:57.013
But the tradeoff is that the build
process will take longer, and so

65
00:03:57.013 --> 00:04:00.021
prerendered content can only
be updated by building and

66
00:04:00.021 --> 00:04:02.462
deploying a new version
of the application.

67
00:04:02.462 --> 00:04:04.673
So it's up to you when it's
appropriate to use this.

68
00:04:04.673 --> 00:04:09.441
If you wanna prerender a page then you
just export const prerender = true,

69
00:04:09.441 --> 00:04:11.646
again, from your page server js.

70
00:04:15.658 --> 00:04:19.847
All right this isn't gonna have any
observable effects here in the tutorial

71
00:04:19.847 --> 00:04:23.250
because we're we're running
the application in dev mode and

72
00:04:23.250 --> 00:04:25.934
nothing gets prerendered
during development,

73
00:04:25.934 --> 00:04:28.961
this is a thing that happens
when you run npm run build.

74
00:04:28.961 --> 00:04:32.053
Not everything can be prerendered, right?

75
00:04:32.053 --> 00:04:35.088
If you're building something
that uses dynamic data,

76
00:04:35.088 --> 00:04:37.421
then you can't have an HTML file for that.

77
00:04:37.421 --> 00:04:42.221
Basic rule of thumb is that if any two
users hitting that URL are gonna get

78
00:04:42.221 --> 00:04:45.353
the exact same content
in all circumstances.

79
00:04:45.353 --> 00:04:48.946
Then that page is a good candidate for
prerendering.

80
00:04:48.946 --> 00:04:53.204
You can prerender pages with
dynamic parameters like

81
00:04:53.204 --> 00:04:57.659
earlier when we had /blog/slug and
square brackets.

82
00:04:57.659 --> 00:05:02.881
We can prerender things like that
as long as SvelteKit can find them,

83
00:05:02.881 --> 00:05:08.374
either by you having specified that
in your SvelteConfig or by SvelteKit

84
00:05:08.374 --> 00:05:13.880
being able to find a link to those
pages from crawling your application.

85
00:05:13.880 --> 00:05:17.300
So if you set prerender to true
inside your root layout server.js,

86
00:05:17.300 --> 00:05:21.089
then you've effectively turned
SvelteKit into a static site generator.

87
00:05:21.089 --> 00:05:26.109
This is what you would do, for example,
if you're using adapter static,

88
00:05:26.109 --> 00:05:31.052
which is the adapter that allows
SvelteKit to build applications that can

89
00:05:31.052 --> 00:05:33.700
be hosted on places like GitHub pages.

90
00:05:37.176 --> 00:05:41.407
The final page option that we're
gonna look at is trailingSlash.

91
00:05:41.407 --> 00:05:46.734
So two URLs like /foo and
/foo/, they might look the same,

92
00:05:46.734 --> 00:05:50.123
but they are actually very different.

93
00:05:50.123 --> 00:05:56.063
A relative URL like ./- will
resolve to /- in the first case,

94
00:05:56.063 --> 00:05:58.769
but /foo/- in the second.

95
00:05:58.769 --> 00:06:03.518
And search engines will treat those two
URLs as distinct, which harms your SEO.

96
00:06:05.092 --> 00:06:09.212
So you don't wanna be loose
about your trailingSlash.

97
00:06:09.212 --> 00:06:11.809
You wanna pick one and stick to it.

98
00:06:11.809 --> 00:06:18.694
And the default behavior that SvelteKit
chooses is to remove trailing slashes.

99
00:06:18.694 --> 00:06:22.951
So that if you do have a request for
/foo/,

100
00:06:22.951 --> 00:06:27.909
SvelteKit will turn that
into a request for /foo.

101
00:06:27.909 --> 00:06:31.874
So we can see that here, we have
a bunch of URLs in the nav bar, and

102
00:06:31.874 --> 00:06:35.413
if I click on always/,
it's just gonna go to /always.

103
00:06:35.413 --> 00:06:40.193
And these haven't been implemented yet,
so they're all gonna behave the same way.

104
00:06:42.285 --> 00:06:46.440
If we go to the always/page.server.js,

105
00:06:50.968 --> 00:06:55.569
And add export const
trailingSlash = always,

106
00:06:55.569 --> 00:06:59.830
then now the behavior
is gonna be reversed.

107
00:06:59.830 --> 00:07:03.840
If I navigate to /always/,
that's the URL that I get.

108
00:07:03.840 --> 00:07:06.373
If I navigate to /always
without the slash,

109
00:07:09.406 --> 00:07:13.514
It will end up on the same place.

110
00:07:13.514 --> 00:07:17.026
If we wanna accommodate both cases,
which is not recommended,

111
00:07:17.026 --> 00:07:18.790
then you can add the ignore value

112
00:07:30.895 --> 00:07:34.239
Right, and now if I navigate to
/ignore without the trailingSlash,

113
00:07:34.239 --> 00:07:37.085
that's what I'll get,
ditto if I add the trailingSlash.

114
00:07:37.085 --> 00:07:40.405
There are very few situations
where this is appropriate,

115
00:07:40.405 --> 00:07:43.936
most of the time you will be using either,
always, or never.

116
00:07:45.628 --> 00:07:47.670
And this also affects prerendering.

117
00:07:47.670 --> 00:07:49.451
If you have a trailingSlash,

118
00:07:49.451 --> 00:07:53.734
then it'll be prerendered as
an index.html file inside a directory.

119
00:07:53.734 --> 00:07:57.509
If the trailingSlash is removed,

120
00:07:57.509 --> 00:08:02.985
then a URL like /never
will become never.html.

121
00:08:02.985 --> 00:08:06.347
And that's something that you might need
to configure with your static web server

122
00:08:06.347 --> 00:08:08.549
if that's how you're
deploying your application.

123
00:08:08.549 --> 00:08:15.051
&gt;&gt; Have you seen people make installable
PWA is was felt and do you feel like that?

124
00:08:15.051 --> 00:08:20.251
Or have you seen traction with PWAs,
whether it's worth it or

125
00:08:20.251 --> 00:08:25.156
versus building something for
the app store or whatever?

126
00:08:25.156 --> 00:08:29.290
&gt;&gt; It's certainly possible to build
a progressive web app with SvelteKit.

127
00:08:29.290 --> 00:08:32.837
It gives you all the tools that you
need to add a service worker and

128
00:08:32.837 --> 00:08:35.740
you can add a manifest.json
in your static folder.

129
00:08:35.740 --> 00:08:39.528
It also works with a library
called Vite Plugin PWA,

130
00:08:39.528 --> 00:08:42.551
which does a lot of the grunt work for
you.

131
00:08:42.551 --> 00:08:45.202
So absolutely,
it's something that you can do.

132
00:08:45.202 --> 00:08:50.172
I couldn't tell you how widespread that
is, how many people are building things in

133
00:08:50.172 --> 00:08:53.083
that style, but
it's completely achievable.

134
00:08:53.083 --> 00:08:56.641
&gt;&gt; If I understand correctly,
using prerender true and

135
00:08:56.641 --> 00:09:00.682
layout.server.js is the same
as using an adapter static.

136
00:09:04.739 --> 00:09:09.568
&gt;&gt; You need to do both, essentially,
if you use adapter static and you're not

137
00:09:09.568 --> 00:09:15.151
prerendering, then it's gonna yell at you
because it's gonna say, hang on a minute,

138
00:09:15.151 --> 00:09:20.604
we have some non-prerendered routes here,
and it'll tell you how to resolve that.

139
00:09:20.604 --> 00:09:24.161
So if you are using adapter static,
then you probably want

140
00:09:24.161 --> 00:09:28.816
to have export cons prerendered true
from your route layout.server.js.

141
00:09:28.816 --> 00:09:33.208
But there are some situations in which
you might have the bulk of your site

142
00:09:33.208 --> 00:09:38.176
pre-endered, but then have a few things
that only use client-side rendering,

143
00:09:38.176 --> 00:09:39.048
for example.

144
00:09:39.048 --> 00:09:43.221
And so it's not a hard requirement that
every page in your app is prerendered if

145
00:09:43.221 --> 00:09:44.876
you are usingadapter static.

146
00:09:44.876 --> 00:09:49.085
You can use it to build a fully client
rendered single page app for example.

147
00:09:49.085 --> 00:09:54.000
&gt;&gt; I had a situation where the only
way to find a link to get to some set

148
00:09:54.000 --> 00:09:58.460
of blog posts and
a prerendered TEDx it was to click through

149
00:09:58.460 --> 00:10:02.466
a client side post paginator
that had collapsed page

150
00:10:02.466 --> 00:10:07.402
buttons that Svelte didn't like
through all of the page links.

151
00:10:07.402 --> 00:10:09.991
Is there a way to get some
kind of file manifest for

152
00:10:09.991 --> 00:10:11.833
all routes that SvelteKit finds?

153
00:10:11.833 --> 00:10:17.374
So I don't have to made any update
entries data and my SvelteKit config.

154
00:10:17.374 --> 00:10:22.997
&gt;&gt; Yeah, hold that thought, so there
is a pull request open on the SvelteKit

155
00:10:22.997 --> 00:10:28.167
repo right now by Elliott Johnson,
one of our core team members that

156
00:10:28.167 --> 00:10:33.087
adds a new export from your page
server js files called entries.

157
00:10:33.087 --> 00:10:38.405
This is a function that you define per
route when you have dynamic parameters.

158
00:10:38.405 --> 00:10:44.212
It returns an array of all of
the valid paths for that page.

159
00:10:44.212 --> 00:10:47.758
So if you have something like /blog/slug,

160
00:10:47.758 --> 00:10:52.438
then you can define an interest
function on that file that.

161
00:10:52.438 --> 00:10:56.762
Then it will communicate with your CMS,
grab whatever data it needs to, and

162
00:10:56.762 --> 00:11:01.171
then tell the prerenderer these are the
pages that need to be pre-rendered.

163
00:11:01.171 --> 00:11:03.252
Right now you have to do that
in your Svelte config, but

164
00:11:03.252 --> 00:11:05.256
very soon you'll be able to
do it in the page itself.

