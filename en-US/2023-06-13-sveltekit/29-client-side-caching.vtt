WEBVTT

1
00:00:00.153 --> 00:00:02.182
Now, if you go back to the homepage,

2
00:00:02.182 --> 00:00:05.397
you'll see that we've created
a problem for ourselves.

3
00:00:05.397 --> 00:00:09.916
We've got that footer at the bottom of the
screen because we added some CSS that's

4
00:00:09.916 --> 00:00:14.254
controlling the height of the main element
that contains all of this content.

5
00:00:14.254 --> 00:00:18.586
And we can no longer scroll down
the page because our main element has

6
00:00:18.586 --> 00:00:19.809
a maximum height.

7
00:00:19.809 --> 00:00:23.103
And we don't really want that,
but we can't not have a height on

8
00:00:23.103 --> 00:00:26.156
the main element when we've
got an infinite loading page,

9
00:00:26.156 --> 00:00:29.777
because otherwise we'll never be
able to get that windowing effect.

10
00:00:29.777 --> 00:00:33.131
So we need to have some way
of controlling the layout

11
00:00:33.131 --> 00:00:35.553
based on what type of page we're on.

12
00:00:35.553 --> 00:00:40.096
And this is where SvelteKit's data
loading as a separate step from page

13
00:00:40.096 --> 00:00:42.377
rendering becomes really useful.

14
00:00:42.377 --> 00:00:46.361
We're gonna be able to distinguish
between two types of pages,

15
00:00:46.361 --> 00:00:50.736
pages that have an infinite loading
component and those that don't.

16
00:00:50.736 --> 00:00:55.987
So I'm gonna open the page.ts
that we were looking at before,

17
00:00:55.987 --> 00:00:59.964
and I'm gonna add a new value,
infinite true.

18
00:01:01.843 --> 00:01:06.625
And in our layout component, We have

19
00:01:06.625 --> 00:01:11.966
access to the entire page data
if we import the page store.

20
00:01:11.966 --> 00:01:20.668
So let's do that,
import {page} from '$app/stores'.

21
00:01:20.668 --> 00:01:23.839
If we add a class name to
the main element of infinite,

22
00:01:26.103 --> 00:01:30.478
Which is gonna be true if any load
function that was involved in rendering

23
00:01:30.478 --> 00:01:33.504
the current page returned
an infinite property.

24
00:01:37.863 --> 00:01:41.280
And now the styles that we
applied to the main here,

25
00:01:41.280 --> 00:01:45.027
we're only gonna apply these
if it is an infinite page.

26
00:01:50.935 --> 00:01:55.857
Right, so our homepage is now
fixed apart from a glitch

27
00:01:55.857 --> 00:02:00.030
on the nav that I
apparently just introduced.

28
00:02:00.030 --> 00:02:05.545
But the infinite loading
page works as we would hope.

29
00:02:05.545 --> 00:02:08.939
We got a question from the crowd?

30
00:02:08.939 --> 00:02:15.676
&gt;&gt; Scrolling up and down causes re
fetching or is it cached somehow?

31
00:02:15.676 --> 00:02:19.199
&gt;&gt; So someone just asked
a really great question,

32
00:02:19.199 --> 00:02:23.261
is the data cached already
fetching it a new each time?

33
00:02:23.261 --> 00:02:29.109
So we're keeping this stuff
in memory as we're scrolling.

34
00:02:29.109 --> 00:02:30.538
And so, if we scroll all the way down,

35
00:02:30.538 --> 00:02:33.729
we are fetching more data, we're fetching
more data, we're fetching more data.

36
00:02:33.729 --> 00:02:35.707
But as we scroll back up,

37
00:02:35.707 --> 00:02:40.712
we're just rendering the data
that we already have in memory.

38
00:02:40.712 --> 00:02:45.229
We're only gonna start loading more data
once we get to the end of the scroll

39
00:02:45.229 --> 00:02:45.812
window.

40
00:02:45.812 --> 00:02:49.024
And because we've already got all of this
data, we're not gonna get to the end

41
00:02:49.024 --> 00:02:51.569
of the scroll window until it is
in fact time to load more data.

42
00:02:51.569 --> 00:02:56.083
But there is a really useful thing
that we can do since we're controlling

43
00:02:56.083 --> 00:02:59.047
the data loading in
a universal load function.

44
00:02:59.047 --> 00:03:02.259
And that is we can add some
client side caching of our own.

45
00:03:02.259 --> 00:03:06.552
And that's useful because if you
look at this front page here,

46
00:03:06.552 --> 00:03:11.656
we're already making a request to
the trending API in the now playing API,

47
00:03:11.656 --> 00:03:13.861
and the upcoming API endpoint.

48
00:03:13.861 --> 00:03:17.729
And it would be nice if we could just
reuse that data when we navigate

49
00:03:17.729 --> 00:03:18.706
to these pages.

50
00:03:18.706 --> 00:03:22.764
So let's go into our API helper.

51
00:03:22.764 --> 00:03:24.730
And we'll actually go ahead and
implement that.

52
00:03:27.940 --> 00:03:32.245
So open lib/api.ts, and

53
00:03:32.245 --> 00:03:36.960
inside this get function,

54
00:03:36.960 --> 00:03:40.855
we can create a cache.

55
00:03:40.855 --> 00:03:43.117
This is gonna be a new map, right?

56
00:03:43.117 --> 00:03:47.792
Super naive in a real app you would have a
little bit more of a sophisticated caching

57
00:03:47.792 --> 00:03:50.525
policy than just add
everything to a cache map.

58
00:03:50.525 --> 00:03:54.702
But It's perfectly fine for this demo, so

59
00:03:54.702 --> 00:03:59.342
we're gonna create a string
which is a url, and

60
00:03:59.342 --> 00:04:03.070
it's gonna be all of that data there.

61
00:04:03.070 --> 00:04:08.756
And I'm gonna replace that
with a reference to a url.

62
00:04:08.756 --> 00:04:11.369
And now,
if we've cached this data already,

63
00:04:11.369 --> 00:04:14.657
then we're just gonna return
it directly from the cache.

64
00:04:14.657 --> 00:04:20.123
If cache.has(url), return cache.get(url),

65
00:04:20.123 --> 00:04:25.589
otherwise we'll make
an API call by calling

66
00:04:25.589 --> 00:04:33.286
await fetch get the data const
data = await response.json().

67
00:04:33.286 --> 00:04:35.819
And then we're gonna
add that to the cache.

68
00:04:41.423 --> 00:04:43.278
And for good measure,

69
00:04:43.278 --> 00:04:48.753
let's add some logging when we get
a cache hit versus a cache miss.

70
00:05:00.406 --> 00:05:01.816
We'll bring up the console.

71
00:05:05.323 --> 00:05:11.105
And so when we load this page,
we've got a bunch of cache misses.

72
00:05:11.105 --> 00:05:15.075
But that's okay because we're using
SvelteKit's built-in fetch and

73
00:05:15.075 --> 00:05:19.447
what's actually happening here is the data
is being fetched on the server and

74
00:05:19.447 --> 00:05:22.288
then the response is being
inlined into the HTML.

75
00:05:22.288 --> 00:05:25.740
So that when we fetch it in the client
during hydration it's just grabbing

76
00:05:25.740 --> 00:05:28.257
the same data that was already
fetched on the server.

77
00:05:28.257 --> 00:05:30.840
So we don't have a duplicate
network request and

78
00:05:30.840 --> 00:05:33.111
that allows us to guarantee consistency.

79
00:05:33.111 --> 00:05:38.283
Now, if we just clear that and
navigate to the trending page,

80
00:05:38.283 --> 00:05:43.169
then hopefully, we got a cache miss,
so disappointing.

81
00:05:43.169 --> 00:05:48.139
That's because we have
a default page there.

82
00:05:48.139 --> 00:05:53.069
So let's get rid of the page equals one in

83
00:05:53.069 --> 00:05:57.573
the case where no page is necessary.

84
00:05:57.573 --> 00:06:02.708
Or alternatively, what we could do
is in our root page load function,

85
00:06:02.708 --> 00:06:06.143
we'll just always default
to page equals one.

86
00:06:06.143 --> 00:06:11.620
So go to the root page.ts over here.

87
00:06:11.620 --> 00:06:18.490
And in each of these,
we're just gonna add page 1, like so.

88
00:06:24.145 --> 00:06:31.360
Right, let's go to the homepage and
navigate to the trending page.

89
00:06:31.360 --> 00:06:35.487
All right, we've got a cache hit for
the first page and

90
00:06:35.487 --> 00:06:38.238
a cache miss for the second page, and

91
00:06:38.238 --> 00:06:43.409
then we will continue to get cache
misses for the subsequent pages.

92
00:06:43.409 --> 00:06:45.815
But if we now navigate
back to the home page,

93
00:06:45.815 --> 00:06:50.446
we are not gonna be fetching any new data
we're getting all these lovely cache hits.

94
00:06:50.446 --> 00:06:54.397
So we're gonna get
instantaneous navigation.

95
00:06:54.397 --> 00:06:57.662
And this is something that you can
only really do in a framework that

96
00:06:57.662 --> 00:07:01.569
has universal load functions, as opposed
to making you go back to the server for

97
00:07:01.569 --> 00:07:02.293
everything.

98
00:07:02.293 --> 00:07:05.093
So obviously, there is a time and
a place for loading data from the server.

99
00:07:05.093 --> 00:07:09.586
But loading data directly from the client
is really good particularly for

100
00:07:09.586 --> 00:07:12.782
stuff that involves things
like real time and so on.

101
00:07:12.782 --> 00:07:17.771
And so SvelteKit gives you
both of those options for

102
00:07:17.771 --> 00:07:22.769
whatever you need when
you're building your app.

103
00:07:22.769 --> 00:07:28.518
That was a great question that segs so
nicely into what I was about to cover.

