WEBVTT

1
00:00:00.304 --> 00:00:05.968
Stores are a way of storing data that
doesn't belong to an individual component.

2
00:00:05.968 --> 00:00:10.890
And SvelteKit makes a few read-only
stores available to your application

3
00:00:10.890 --> 00:00:12.851
via the app/stores module.

4
00:00:12.851 --> 00:00:17.129
We have the page store, the navigating
store, and the updating store.

5
00:00:17.129 --> 00:00:20.247
And the one that you'll use most
of the time is the page store.

6
00:00:20.247 --> 00:00:25.269
Provides information about the current
page, such as the URL, the params object

7
00:00:25.269 --> 00:00:29.871
that we've already seen in our load
functions and our API route handlers.

8
00:00:29.871 --> 00:00:33.810
A route object with an ID property
that represents the current route.

9
00:00:33.810 --> 00:00:40.900
So for example, inside about/page.svelte,
the route ID is /about.

10
00:00:40.900 --> 00:00:45.439
The HTTP status code of the current page,
the error object of the current page,

11
00:00:45.439 --> 00:00:48.234
if there is one,
we'll learn about that later.

12
00:00:48.234 --> 00:00:53.262
The data prop and
the form prop that combines all of

13
00:00:53.262 --> 00:00:59.253
the data from all of the layout
functions and the page data.

14
00:00:59.253 --> 00:01:03.334
And so just like with any other store in
Svelte, you can reference its value inside

15
00:01:03.334 --> 00:01:06.254
a component by prefixing its
name with the dollar symbol.

16
00:01:06.254 --> 00:01:11.880
So for example, we can access the current
path name as $page.url.pathname.

17
00:01:11.880 --> 00:01:15.720
So in our layout.svelte component here,
let's add a script block.

18
00:01:18.853 --> 00:01:25.558
And we're gonna import the page store,
From $app/stores.

19
00:01:28.135 --> 00:01:34.599
And now inside our nav element,
we're gonna add an aria-current attribute,

20
00:01:34.599 --> 00:01:39.049
to indicate which of these
pages is currently active.

21
00:01:48.438 --> 00:01:54.927
Just gonna copy that for the about page,
and then update this bit.

22
00:01:57.276 --> 00:02:01.631
If we reload the page and
navigate between these two links,

23
00:02:01.631 --> 00:02:07.221
we'll see that the aria-current
attribute is updating when we navigate.

24
00:02:07.221 --> 00:02:09.853
And we have some CSS that is
targeting that attribute.

25
00:02:18.763 --> 00:02:22.753
And the navigating store
represents the current navigation.

26
00:02:22.753 --> 00:02:26.424
And so when a navigation starts,
whether that's because of a link click or

27
00:02:26.424 --> 00:02:29.048
a back-forward navigation or
a programmatic goto,

28
00:02:29.048 --> 00:02:32.449
the value of navigation will become
an object with some properties.

29
00:02:32.449 --> 00:02:37.085
We have from and to,
these are things with a params object,

30
00:02:37.085 --> 00:02:39.608
the route object, and the URL.

31
00:02:39.608 --> 00:02:44.963
And we'll also have a navigation type,
which can be link or popstate or goto.

32
00:02:44.963 --> 00:02:49.865
And if you wanna see the complete type
information for the navigation object,

33
00:02:49.865 --> 00:02:53.512
you can look that up on
the SvelteKit documentation site.

34
00:02:55.711 --> 00:03:03.198
We can use this store to show a loading
indicator for long-running navigations.

35
00:03:03.198 --> 00:03:07.927
So in this exercise,
in our page.server.js, and

36
00:03:07.927 --> 00:03:14.059
in our about page.server.js,
we have these artificial delays.

37
00:03:14.059 --> 00:03:20.089
It's gonna take a full second
to navigate between these pages.

38
00:03:20.089 --> 00:03:27.048
You can see that if we click, it's gonna
take a whole second before that updates.

39
00:03:27.048 --> 00:03:30.357
So inside our layout.svelte,
where the navigation is defined,

40
00:03:30.357 --> 00:03:32.492
I'm gonna bring in the navigating store.

41
00:03:38.114 --> 00:03:42.376
And then we're gonna add some

42
00:03:42.376 --> 00:03:47.159
UI indicating what's going on.

43
00:03:57.887 --> 00:04:02.179
By the way, this URL object here,

44
00:04:02.179 --> 00:04:07.507
this is the web standard URL constructor.

45
00:04:07.507 --> 00:04:10.415
It's just a super useful object that
you'll interact with a lot when you're

46
00:04:10.415 --> 00:04:11.454
building SvelteKit apps.

47
00:04:11.454 --> 00:04:16.939
So I recommend getting comfortable
with this page of MDN.

48
00:04:19.626 --> 00:04:22.995
Okay, so
now let me navigate between these pages.

49
00:04:22.995 --> 00:04:27.666
We see that we get a little indication
on the right-hand side telling us what's

50
00:04:27.666 --> 00:04:28.442
happening.

51
00:04:28.442 --> 00:04:32.895
So more typically you would use this to
have some kind of a progress indicator

52
00:04:32.895 --> 00:04:33.533
and so on.

53
00:04:33.533 --> 00:04:37.344
This is actually one of the issues
that you get with a single-page app.

54
00:04:37.344 --> 00:04:41.135
There is no direct feedback when
you navigate between pages.

55
00:04:41.135 --> 00:04:44.711
You're kind of relying on the navigation
to be fast enough that it doesn't matter.

56
00:04:44.711 --> 00:04:49.871
But there is gonna be a brand new
navigation API landing in browsers

57
00:04:49.871 --> 00:04:54.940
fairly soon, which will allow us
to control the refresh icon that

58
00:04:54.940 --> 00:05:00.581
starts spinning when you have
a traditional navigation between pages.

59
00:05:00.581 --> 00:05:03.516
We'll be able to use that
in single-page apps too.

60
00:05:03.516 --> 00:05:08.348
But for now, it's a good practice to
have some kind of loading indicator in

61
00:05:08.348 --> 00:05:09.968
your single page app UI.

62
00:05:15.372 --> 00:05:20.312
Okay, and finally, the data store contains
a value of true or false, depending on

63
00:05:20.312 --> 00:05:25.197
whether a new version of the app has been
deployed since the page was first opened.

64
00:05:25.197 --> 00:05:26.091
And for this to work,

65
00:05:26.091 --> 00:05:29.031
you need to add some configuration
to your svelte.config.js file.

66
00:05:29.031 --> 00:05:33.764
Specifically, you need to add
this version object with a name

67
00:05:33.764 --> 00:05:37.867
which changes when your
application is redeployed.

68
00:05:37.867 --> 00:05:40.135
Right now,
we're just using Date.now().toString(),

69
00:05:40.135 --> 00:05:41.143
which is the default value.

70
00:05:41.143 --> 00:05:46.066
But ideally, you should use something
like the current commit hash so

71
00:05:46.066 --> 00:05:48.578
that your deploys are consistent.

72
00:05:48.578 --> 00:05:53.175
You also need to add a poll interval,
I've got five seconds here.

73
00:05:53.175 --> 00:05:57.931
This is what SvelteKit is gonna use to
check whether the version has changed

74
00:05:57.931 --> 00:05:59.448
while the page is open.

75
00:05:59.448 --> 00:06:02.406
Now, version changes only
happen in production,

76
00:06:02.406 --> 00:06:04.827
they don't happen during development.

77
00:06:04.827 --> 00:06:10.855
For that reason, updated is always
gonna be false in this tutorial.

78
00:06:13.861 --> 00:06:18.820
But we can imagine, for example,
that you would have something like

79
00:06:18.820 --> 00:06:23.965
a toast that appears when the updated
store changes from false to true.

80
00:06:23.965 --> 00:06:26.951
You can use this in other ways.

81
00:06:26.951 --> 00:06:31.651
For example, if you have a very long
running session, and the application is

82
00:06:31.651 --> 00:06:36.442
redeployed while the user has the app
open, then that can break navigations.

83
00:06:36.442 --> 00:06:41.337
Because you might try to fetch the code
for a new page, and discover that all of

84
00:06:41.337 --> 00:06:46.401
the hashes have changed, and so we're
unable to import the relevant modules.

85
00:06:46.401 --> 00:06:49.967
And in that case, SvelteKit will
fall back to a full page navigation.

86
00:06:49.967 --> 00:06:50.980
So usually,

87
00:06:50.980 --> 00:06:56.882
we're able to recover without the user
noticing that anything went wrong.

88
00:06:56.882 --> 00:07:01.801
But it can be nice to proactively tell
the user that the application is updated.

89
00:07:01.801 --> 00:07:04.487
Or even to disable the router altogether,
so

90
00:07:04.487 --> 00:07:07.750
that we don't need to have
that error handling logic.

