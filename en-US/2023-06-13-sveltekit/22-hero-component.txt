[00:00:00]
>> So with use:enhance we can go further than just emulating the browser's native behavior. We can provide a callback to the action, which adds things like pending states and optimistic UI. So to be able to see this, we're gonna add an artificial delay to our two actions. Open up your page server.js file.

[00:00:18]
And in the Create Action, we'll do await new Promise and we'll set timeout on that fulfil callback. We'll give it a delay of 1000 milliseconds. I'm gonna copy that and add the same thing in the delete action. All right, so now if we, Buy some milk, I don't know.

[00:00:50]
We'll see that nothing happens for a second, and then the todo is added to the list. Obviously not a very satisfying experience if the user has to wait a whole second before they see their updates take effect. So let's add some local state so we can add some optimistic UI.

[00:01:08]
Up in our script tag on the page.svelte file, we're gonna create a creating variable that's initialized to false. And we'll have an array of the todos that are currently being deleted. We'll go to the first form, where we add a todo. And I'm just gonna restructure this a little bit so that the code becomes easier to read.

[00:01:39]
Put all of the attributes on separate lines. I'm gonna provide a callback to use:enhance. First thing we're gonna do is set creating to true. And then we're gonna return an asynchronous function, That takes this update utility. We're gonna call that, and all that is gonna do is whatever would have happened had we not provided a callback.

[00:02:14]
Once the update is complete, we'll set creating back to false. And then we're gonna disable the input while the todo is being created. Just add that disable attribute when creating is true. And we can now show a message while we are saving data. Underneath the list of todos, we're gonna add an f block.

[00:02:44]
If creating is true, Then we'll add a span there, with a class of saving, and we'll just say saving..., close the span. And then now if you add another todo, We get some user interface that tells the user that their action has been acknowledged, and that we're just waiting for something to happen.

[00:03:22]
In the case of deletions, we don't really need to wait for the server to validate anything, we can just update the user interface immediately. So inside the each block where we're iterating over the list of todos, the first thing we're gonna do is filter the list. Instead of just showing all of the todos, we're gonna show all of the todos that are not marked for deletion.

[00:03:48]
And we can do that by adding this line inside each block. Each data todos.filter. And then the callback is gonna be that the deleting array does not include the ID of the current todo. Right now that's having no effect because none of our todos are currently being deleted.

[00:04:20]
But we can change that by again adding a call back to the use:enhance action. Split the attributes onto multiple lines to make it easier to read. And the first thing we'll do is update the deleting array, To include the todo that's being deleted. And then we'll return the completion handler, That again is gonna cause the update function, That applies the changes that were gonna happen anyway, and then removes that ID from the deleted array.

[00:05:24]
Okay, that was a lot of code, hopefully we typed it correctly. So now even though it's gonna take a second for the action to actually take place, I can delete these todos in quick succession. I forgot to add the CSS on this exercise, so just pretend that you can see the trash can icon on the right-hand side of the todo.

[00:05:47]
As we click these, the todos get deleted, even though we're waiting for the server to actually apply the action. And so use:enhance is very customizable, you can cancel submissions, you can handle redirects, you can control whether the form is reset, all of that. You can see the reference documentation for all the details on how to do that.

