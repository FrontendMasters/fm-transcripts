WEBVTT

1
00:00:00.066 --> 00:00:02.179
So whenever you're
building an application,

2
00:00:02.179 --> 00:00:05.296
you're probably gonna be dealing
with some environment variables,

3
00:00:05.296 --> 00:00:07.476
things like API keys and
database credentials.

4
00:00:07.476 --> 00:00:11.966
And these can be added to
a .env file when you're

5
00:00:11.966 --> 00:00:17.343
developing locally, so
that you can know those secrets.

6
00:00:17.343 --> 00:00:20.263
In this exercise we want
to allow the user to enter

7
00:00:20.263 --> 00:00:25.125
the website if they know the correct
passphrase using an environment variable.

8
00:00:25.125 --> 00:00:29.018
So right now, if they know
the passphrase which is open sesame,

9
00:00:29.018 --> 00:00:32.480
nothing happens or
at least nothing good happens because

10
00:00:32.480 --> 00:00:36.678
we haven't declared that environment
variable in our button file.

11
00:00:36.678 --> 00:00:40.947
So we'll do that now,
create the passphrase, open SESAME,

12
00:00:44.875 --> 00:00:50.288
And now inside our route page server js,
we can import that

13
00:00:50.288 --> 00:00:55.829
environment variable from
the env static private module,

14
00:01:02.994 --> 00:01:06.591
And this is where they're getting kicked
out before cuz the data get passphrase

15
00:01:06.591 --> 00:01:09.703
does not equal the hard coded value or
replace that hard coded value,

16
00:01:09.703 --> 00:01:12.833
we'll replace the hard coded value
with the environment variable.

17
00:01:14.832 --> 00:01:20.372
And now if you sign open
sesame into the input, I'm in.

18
00:01:22.973 --> 00:01:27.020
Now, it's important that when you're
dealing with environment variables, that

19
00:01:27.020 --> 00:01:31.067
you don't accidentally expose them to the
user because then they could be stolen and

20
00:01:31.067 --> 00:01:32.215
that would not be good.

21
00:01:32.215 --> 00:01:36.857
And SvelteKit actively prevents you from
accidentally revealing your secrets.

22
00:01:36.857 --> 00:01:42.762
If you try and pull nvars into
your page.svelte component,

23
00:01:48.426 --> 00:01:50.801
Sorry, I lost my scroll pace.

24
00:01:50.801 --> 00:01:56.164
If you try and import env/static/private
into your Svelte component,

25
00:01:56.164 --> 00:01:57.987
then it's gonna break.

26
00:02:05.465 --> 00:02:09.563
All right, we see this error message
from V that says cannot import

27
00:02:09.563 --> 00:02:12.504
env/static/private into client side code.

28
00:02:12.504 --> 00:02:15.029
Right, this is a server only module, and

29
00:02:15.029 --> 00:02:17.928
there's a few server
only modules Svelte Kit.

30
00:02:17.928 --> 00:02:21.843
Anytime you have a module
that has the .server suffix,

31
00:02:21.843 --> 00:02:26.343
page.server.js, layout.server.js,
+server.js, or

32
00:02:26.343 --> 00:02:30.609
any of your own modules that
have a.server.js and suffix.

33
00:02:30.609 --> 00:02:33.585
And also any modules
inside source/lib/server,

34
00:02:33.585 --> 00:02:38.250
these are considered server modules that
cannot be imported into client side code

35
00:02:38.250 --> 00:02:42.713
under any circumstances, and so within
those files it's quite safe to access

36
00:02:42.713 --> 00:02:46.859
environment variables into communicate
directly with your database.

37
00:02:46.859 --> 00:02:51.296
And in turn, those modules can only
be imported by other server modules.

38
00:02:53.259 --> 00:02:58.180
You might be wondering why this module
has such a funny name env/static/private.

39
00:02:58.180 --> 00:03:02.334
The static part indicates that these
values are known at build time, and

40
00:03:02.334 --> 00:03:05.205
that means that they can
be statically replaced.

41
00:03:05.205 --> 00:03:07.047
And this enables useful optimizations.

42
00:03:07.047 --> 00:03:11.667
For example, if you have a feature flag
that is statically analyzed at build time,

43
00:03:11.667 --> 00:03:14.901
then any code that is inside
this block will just be removed

44
00:03:14.901 --> 00:03:18.149
altogether if the feature flag
is not currently enabled.

45
00:03:20.295 --> 00:03:24.193
So where possible, we recommend using
static environment variables but some

46
00:03:24.193 --> 00:03:28.326
cases, it might not be possible, you might
need to refer to environment variables

47
00:03:28.326 --> 00:03:32.066
that are not known when your app is built
but only known when your app is run.

48
00:03:32.066 --> 00:03:34.505
And for these we use dynamic
environment variables.

49
00:03:38.569 --> 00:03:41.960
So we have the same exercise as before,
but this time we're gonna use dynamic

50
00:03:41.960 --> 00:03:44.115
environment variables
instead of static ones.

51
00:03:46.091 --> 00:03:52.170
First, we're gonna change the module
that we're importing from to dynamic,

52
00:03:53.903 --> 00:04:00.033
And we're gonna import env instead of
passphrase because we don't know yet

53
00:04:00.033 --> 00:04:04.064
what properties that env
object is going to have.

54
00:04:04.064 --> 00:04:08.289
And then down here we're gonna replace
passphrase with env.passphrase.

55
00:04:10.411 --> 00:04:16.034
And now as before when we type in
the passphrase, we get into the website.

56
00:04:22.600 --> 00:04:27.421
So, so far we've been dealing with
environment variables that are secret,

57
00:04:27.421 --> 00:04:30.535
and they can only be accessed
by server modules but

58
00:04:30.535 --> 00:04:35.451
you might have some environment variables
that are safe to reveal to the user.

59
00:04:35.451 --> 00:04:39.211
And these are distinguished from
private environment variables by having

60
00:04:39.211 --> 00:04:42.442
a PUBLIC_prefix which you can
configure in your stock config.

61
00:04:42.442 --> 00:04:47.134
So in our .env file here,
we're gonna set some public

62
00:04:47.134 --> 00:04:52.338
environment variables, but
pick a color like steel blue for

63
00:04:52.338 --> 00:04:56.436
the background and
bisque for the foreground.

64
00:04:56.436 --> 00:05:00.200
And then inside our component
we can in fact import these and

65
00:05:00.200 --> 00:05:03.896
replace the hard coded variables
that we currently have.

66
00:05:03.896 --> 00:05:08.259
So just delete all of that And

67
00:05:08.259 --> 00:05:13.015
import PUBLIC_THEME_BACKGROUND and

68
00:05:13.015 --> 00:05:22.670
PUBLIC_THEME_FOREGROUND From
env/static/public.

69
00:05:24.622 --> 00:05:29.725
And now when we reload this page, it's
pulling those values directly from our

70
00:05:29.725 --> 00:05:36.141
env file, so we can change that And
it will it will update the app.

71
00:05:36.141 --> 00:05:40.279
And again, because we're
pulling from a static env file,

72
00:05:40.279 --> 00:05:45.761
those properties will be replaced in
your code when the application is built.

73
00:05:48.969 --> 00:05:54.456
Finally, of course,
we can have dynamic public environment

74
00:05:54.456 --> 00:06:00.997
variables to same as before, we're
just gonna change the input to env and

75
00:06:00.997 --> 00:06:04.917
grab that from the dynamic module instead.

76
00:06:04.917 --> 00:06:11.114
And then we'll prefix all of
these with the env seen there,

77
00:06:13.340 --> 00:06:17.386
And now the application
renders same as before.

78
00:06:17.386 --> 00:06:18.992
Any questions about environment variables?

79
00:06:21.534 --> 00:06:24.107
All right, well I have some good news.

80
00:06:24.107 --> 00:06:27.139
We have finished the tutorial.

81
00:06:27.139 --> 00:06:29.644
Congratulations everyone,
thank you for bearing with me,

82
00:06:29.644 --> 00:06:31.522
this has been a lot of
content to get through.

83
00:06:31.522 --> 00:06:35.059
If you've made it the entire
way through this tutorial,

84
00:06:35.059 --> 00:06:38.979
you can now consider yourself a Svelte and
SvelteKit experts.

85
00:06:38.979 --> 00:06:42.431
You can start building apps on your
own machines by just typing npm

86
00:06:42.431 --> 00:06:45.444
create svelte on the command line,
follow the prompts,

87
00:06:45.444 --> 00:06:47.789
that will set you up
with a new application.

88
00:06:47.789 --> 00:06:51.550
But this is not the end, Svelte and
SvelteKit will continue to evolve,

89
00:06:51.550 --> 00:06:53.556
we're always adding new features and

90
00:06:53.556 --> 00:06:56.517
as a consequence this
documentation will also evolve.

91
00:06:56.517 --> 00:06:59.775
So I do encourage you to
check back periodically and

92
00:06:59.775 --> 00:07:01.759
see if there's new material.

93
00:07:01.759 --> 00:07:05.335
And if you wanna keep up with
developments in the Svelte world,

94
00:07:05.335 --> 00:07:10.208
you can join our Discord server, it's
a very friendly space at svelte.dev/chat.

95
00:07:10.208 --> 00:07:12.754
And you can follow Svelte
society on Twitter,

96
00:07:12.754 --> 00:07:16.551
where you'll get a stream of updates
on everything Svelte related.

97
00:07:16.551 --> 00:07:20.077
We are very happy to welcome you
all to the Svelte community.

98
00:07:20.077 --> 00:07:22.633
Thank you for doing the tutorial with us.

99
00:07:22.633 --> 00:07:25.655
And now we're gonna move on to
the final part of this workshop,

100
00:07:25.655 --> 00:07:29.476
where we're gonna take everything that
we've learned in the Svelte course and

101
00:07:29.476 --> 00:07:33.037
the SvelteKit course, and we're gonna
build a full stack application.

