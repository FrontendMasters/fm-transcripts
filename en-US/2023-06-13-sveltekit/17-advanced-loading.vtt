WEBVTT

1
00:00:00.360 --> 00:00:02.770
Previously when we learned about loading,

2
00:00:02.770 --> 00:00:07.610
we loaded data from the server using
page.server.js and layout.server.js files.

3
00:00:07.610 --> 00:00:10.541
This is very convenient if
you need to do things like

4
00:00:10.541 --> 00:00:15.120
getting data directly from a database,
or reading cookies, and so on.

5
00:00:15.120 --> 00:00:17.050
But sometimes that isn't what you want.

6
00:00:17.050 --> 00:00:18.330
Sometimes it doesn't make sense.

7
00:00:19.680 --> 00:00:23.884
For example, if you're loading data from
an external API that is not your server,

8
00:00:23.884 --> 00:00:27.185
then there's no point going to your
server so that it can then go to

9
00:00:27.185 --> 00:00:31.210
the external API, get the data, and
then send it back to the browser.

10
00:00:31.210 --> 00:00:34.570
The browser can just communicate
with that external API directly.

11
00:00:34.570 --> 00:00:38.300
Or maybe you want to use
in-memory data if it's available.

12
00:00:38.300 --> 00:00:41.200
Perhaps you want to delay navigation
until an image has been preloaded or

13
00:00:41.200 --> 00:00:42.770
something like that.

14
00:00:42.770 --> 00:00:43.322
Or finally,

15
00:00:43.322 --> 00:00:47.730
you might wanna return something from your
load function that cannot be serialized.

16
00:00:47.730 --> 00:00:49.974
So in order to load data from the server,

17
00:00:49.974 --> 00:00:53.151
it needs to come over the network
in a serializable form.

18
00:00:53.151 --> 00:00:58.632
And SvelteKit uses a library called
devalue to turn server data into JSON,

19
00:00:58.632 --> 00:01:02.810
and that gives you more power
than a regular JSON object.

20
00:01:02.810 --> 00:01:06.527
You'd include things like dates and
begins, and maps and sets, and

21
00:01:06.527 --> 00:01:08.002
regular expressions, and

22
00:01:08.002 --> 00:01:12.190
so on, but it can't serialize your own
custom classes and things like that.

23
00:01:13.870 --> 00:01:15.136
So in that situation,

24
00:01:15.136 --> 00:01:19.010
it would make sense to use what's
called a universal load function.

25
00:01:20.660 --> 00:01:25.416
So in this app,
we have a few server load functions

26
00:01:25.416 --> 00:01:29.503
inside these red, green, and blue apps.

27
00:01:29.503 --> 00:01:35.074
And what this load function is doing,
it's importing a component,

28
00:01:35.074 --> 00:01:41.620
namely, red.svelte, and it's trying to
return that from the load function.

29
00:01:41.620 --> 00:01:43.631
But if we navigate to this page,

30
00:01:43.631 --> 00:01:47.873
we're gonna get an error because
a component is not one of the things

31
00:01:47.873 --> 00:01:51.833
that you can serialize and
send from the server to the browser.

32
00:01:54.723 --> 00:01:56.950
The same thing is true if you
navigate to the other pages.

33
00:01:58.070 --> 00:02:03.139
So we need to turn these load functions
into universal load functions, and

34
00:02:03.139 --> 00:02:07.969
we'll do that by renaming
page.server.js to page.js, like that,

35
00:02:07.969 --> 00:02:12.632
do the same for green,
And the same for blue.

36
00:02:16.540 --> 00:02:20.373
Right, and now when we navigate
to those pages, we are, in fact,

37
00:02:20.373 --> 00:02:23.258
returning the component
from the load function.

38
00:02:25.491 --> 00:02:31.317
So these load functions are just
like any other function in your app,

39
00:02:31.317 --> 00:02:35.060
you can use them anywhere in any module.

40
00:02:35.060 --> 00:02:38.970
You're not restricted as to
where you can use that data.

41
00:02:40.890 --> 00:02:45.854
So cool thing that we can do now that
we're returning a component from

42
00:02:45.854 --> 00:02:50.563
load function is we can use it
inside the layout even though we're

43
00:02:50.563 --> 00:02:52.628
returning it from the page.

44
00:02:52.628 --> 00:02:57.400
Because the data is available on
the page store as the data property.

45
00:02:57.400 --> 00:03:00.202
So inside our navigation
bar in the layout.svelte,

46
00:03:00.202 --> 00:03:03.510
we're gonna go down here, and
we're gonna add a new if block.

47
00:03:04.590 --> 00:03:10.705
If a component was returned
from the load function, And

48
00:03:10.705 --> 00:03:15.655
this can be any load function that was
involved in fetching data for this page.

49
00:03:15.655 --> 00:03:19.895
Then we can inject that component
into the navigation bar.

50
00:03:33.100 --> 00:03:37.775
Right, and this is something that's only
possible because we have the separation

51
00:03:37.775 --> 00:03:41.328
between the data fetching process and
the rendering process.

52
00:03:41.328 --> 00:03:45.529
Something that you can use for putting a
custom menu inside your navigation bar or

53
00:03:45.529 --> 00:03:47.754
adding breadcrumbs and things like that,

54
00:03:47.754 --> 00:03:52.310
stuff that is really difficult to do
if you don't have that separation.

55
00:03:52.310 --> 00:03:54.902
In some scenarios you might want
to use a server load function and

56
00:03:54.902 --> 00:03:56.440
a universal load function together.

57
00:03:56.440 --> 00:04:00.427
For example, you might need to return some
data from the server, but you also need to

58
00:04:00.427 --> 00:04:04.040
return a value that cannot be serialized
as server data, like a component.

59
00:04:05.070 --> 00:04:06.408
So in this example,

60
00:04:06.408 --> 00:04:11.215
we want to return a different component
from our universal load function

61
00:04:11.215 --> 00:04:16.600
based on whether some data that we
got from the server is cool or not.

62
00:04:16.600 --> 00:04:20.923
So in our page.js file, we can access
the data that is returned from here,

63
00:04:23.409 --> 00:04:28.340
By grabbing the data
property from the event.

64
00:04:28.340 --> 00:04:34.002
And we'll just replace this
false with data.cool, right?

65
00:04:34.002 --> 00:04:37.416
And because the data that we're
getting from the server is cool,

66
00:04:37.416 --> 00:04:41.530
we're now able to import the cool
component instead of the boring component.

67
00:04:42.730 --> 00:04:46.383
It's still saying to do add
a message because the universal load

68
00:04:46.383 --> 00:04:50.998
function is replacing the data that was
returned from the server load function.

69
00:04:50.998 --> 00:04:52.549
They're not getting mixed together.

70
00:04:52.549 --> 00:04:58.241
So here, we need to replace
the placeholder with data.message.

71
00:04:58.241 --> 00:05:02.570
And so now we have a universal load
function that is returning data directly

72
00:05:02.570 --> 00:05:03.612
from the server.

73
00:05:13.640 --> 00:05:16.083
Now earlier when we're
looking at layout data,

74
00:05:16.083 --> 00:05:18.882
we saw that if a layout load
function returns some data,

75
00:05:18.882 --> 00:05:21.876
it's accessible within that
layout.svelte component.

76
00:05:21.876 --> 00:05:26.833
But it's also accessible within
every child page.svelte component.

77
00:05:26.833 --> 00:05:28.436
But sometimes it's useful for

78
00:05:28.436 --> 00:05:32.564
the load functions themselves to be able
to get access to data from the parents,

79
00:05:32.564 --> 00:05:36.360
and this can be done with
something called await parent.

80
00:05:36.360 --> 00:05:37.296
And to show how this works,

81
00:05:37.296 --> 00:05:40.100
we're gonna sum two numbers that
come from different load functions.

82
00:05:40.100 --> 00:05:43.885
We have a layout load, and
then we have another layout load here, and

83
00:05:43.885 --> 00:05:45.270
then we have a page load.

84
00:05:46.400 --> 00:05:51.602
So inside our route layout.server.js,
we're gonna return a value.

85
00:05:56.215 --> 00:05:59.758
That is a: 1, right?

86
00:05:59.758 --> 00:06:01.596
And so this sum page here,

87
00:06:01.596 --> 00:06:06.947
which is referring to the data that is
combined from the different layout and

88
00:06:06.947 --> 00:06:11.062
page load functions,
is showing data.a now has a value.

89
00:06:13.819 --> 00:06:19.950
And we can get that data in our
sum/layout.js load function.

90
00:06:19.950 --> 00:06:23.084
First, grab the parent property.

91
00:06:26.021 --> 00:06:29.440
And then get the value of
a from the parent layout load.

92
00:06:34.043 --> 00:06:40.913
And we can now return a value that
depends on that value, b is a + 1.

93
00:06:40.913 --> 00:06:47.580
And you'll see that b is now populating
data.b in our page.svelte component.

94
00:06:47.580 --> 00:06:52.830
You'll notice here that the route
layout is using layout.server.js file,

95
00:06:52.830 --> 00:06:58.094
i.e., a server load function,
whereas the sum layout is just layout.js.

96
00:06:58.094 --> 00:07:00.740
So this is a universal load function.

97
00:07:00.740 --> 00:07:05.335
A universal load function can get parent
data from a parent server load function,

98
00:07:05.335 --> 00:07:07.270
but the reverse is not true.

99
00:07:07.270 --> 00:07:12.707
If we had layout.js in the route and
layout.server.js inside the sum route,

100
00:07:12.707 --> 00:07:15.968
then we would not be able
to access parent data.

101
00:07:15.968 --> 00:07:18.755
And then finally,
in the page load function,

102
00:07:18.755 --> 00:07:23.470
we can get the parent data from
both of the parent load functions.

103
00:07:23.470 --> 00:07:29.141
Again, we're gonna grab parent here,
and we'll do a,

104
00:07:29.141 --> 00:07:33.859
b, Equals await parent.

105
00:07:36.080 --> 00:07:39.785
And we'll return c is the value of a + b.

106
00:07:41.964 --> 00:07:43.463
All right,
this is a bit of a contrived example.

107
00:07:43.463 --> 00:07:46.948
That's not something that you're
gonna encounter often, but

108
00:07:46.948 --> 00:07:50.920
it's a useful thing to have in
your toolkit when you do need it.

109
00:07:50.920 --> 00:07:54.397
One thing that you do need to be aware
of is that all of these load functions

110
00:07:54.397 --> 00:07:55.658
are running in parallel.

111
00:07:55.658 --> 00:07:58.290
That's so
that we get the data as fast as possible.

112
00:07:58.290 --> 00:08:00.405
But if you start using await parent,

113
00:08:00.405 --> 00:08:04.774
then that essentially means that
everything that happens after that line in

114
00:08:04.774 --> 00:08:10.040
your load function is waterfalled on the
completion of the parent load functions.

115
00:08:10.040 --> 00:08:12.806
And so if you're doing any other
asynchronous work inside your

116
00:08:12.806 --> 00:08:16.564
load function, like fetching data from an
API or something, then you wanna make sure

117
00:08:16.564 --> 00:08:20.390
that you do that before you call await
parent if it's possible to do so.

118
00:08:20.390 --> 00:08:24.730
&gt;&gt; Are there any performance benefits to
loading components from a page.js rather

119
00:08:24.730 --> 00:08:28.210
than importing them as modules
directly into the route?

120
00:08:28.210 --> 00:08:33.162
In SvelteKit 1, it was mentioned as
opposed to other frameworks like Next,

121
00:08:33.162 --> 00:08:37.431
SvelteKit defaults to client-side
navigation after the initial

122
00:08:37.431 --> 00:08:39.860
server-rendered page load.

123
00:08:39.860 --> 00:08:43.668
Does that mean that on the initial load,
Svelte will send the JavaScript for

124
00:08:43.668 --> 00:08:47.910
the entire site as opposed to Next, where
you'll hit a server for each navigation?

125
00:08:49.480 --> 00:08:55.370
Or will it download the JavaScript for
that for each route independently?

126
00:08:55.370 --> 00:08:58.876
&gt;&gt; We use route-based code
splitting in SvelteKit.

127
00:08:58.876 --> 00:09:03.455
So when you hit the first page, you will
get the JavaScript that's needed for

128
00:09:03.455 --> 00:09:05.299
any interaction on that page.

129
00:09:05.299 --> 00:09:08.860
And you will get the client side route so
that SvelteKit can navigate to new pages.

130
00:09:08.860 --> 00:09:11.440
But you will not get the code for
subsequent routes.

131
00:09:11.440 --> 00:09:14.520
You only get that once
the navigation begins.

132
00:09:14.520 --> 00:09:19.682
So it's all split up in a mathematically
optimal way so that you're getting

133
00:09:19.682 --> 00:09:24.616
a minimum amount of code that you need
to at each stage of the navigation.

134
00:09:24.616 --> 00:09:26.294
You can use a service worker or

135
00:09:26.294 --> 00:09:30.593
preloading to get more of your app if
you need to preload things eagerly, but

136
00:09:30.593 --> 00:09:34.620
the default behavior is to only
get code when you need it.

137
00:09:34.620 --> 00:09:38.330
&gt;&gt; Instead of doing import
component from component,

138
00:09:38.330 --> 00:09:43.824
we can import the component from page.js
in a load function, as we just saw.

139
00:09:43.824 --> 00:09:47.586
Are there any difference in performance
in terms of lazy loading components or

140
00:09:47.586 --> 00:09:48.559
any other concept?

141
00:09:50.431 --> 00:09:53.866
&gt;&gt; No, in either case, the navigation is

142
00:09:53.866 --> 00:09:58.456
gonna be blocked on that
component being imported.

143
00:09:58.456 --> 00:10:02.548
And it really doesn't make any difference
whether it's a static import from within

144
00:10:02.548 --> 00:10:05.615
a component file or
a dynamic input inside your load function.

145
00:10:05.615 --> 00:10:07.440
It's gonna have the same end result.

146
00:10:07.440 --> 00:10:14.310
It's just that the dynamic import is
gonna be more work and harder to do.

147
00:10:14.310 --> 00:10:18.930
So I would recommend using static imports,
unless you have a reason to use a dynamic

148
00:10:18.930 --> 00:10:22.240
import because you'll have
an easier time that way.

149
00:10:22.240 --> 00:10:26.694
So when the user navigates from one page
to another, SvelteKit calls your load

150
00:10:26.694 --> 00:10:30.280
functions, but only if it thinks
that something has changed.

151
00:10:30.280 --> 00:10:35.032
For example,
navigating between time zones in this app

152
00:10:35.032 --> 00:10:39.390
causes the load function
in our page.js to rerun.

153
00:10:40.620 --> 00:10:45.306
So we see that we're getting
the time zone updated,

154
00:10:45.306 --> 00:10:49.897
which is being reflected
in the h1 element there.

155
00:10:49.897 --> 00:10:53.100
But the load function in
our layout does not rerun,

156
00:10:53.100 --> 00:10:58.500
because as far as Svelte is concerned,
it wasn't invalidated by the navigation.

157
00:10:58.500 --> 00:11:03.431
It's not using anything here that is
relevant to that navigation between

158
00:11:03.431 --> 00:11:04.790
different routes.

159
00:11:06.220 --> 00:11:10.337
And we can fix that by manually
invalidating it using a function called

160
00:11:10.337 --> 00:11:15.620
invalidate, which takes a URL and reruns
any load functions that depend on it.

161
00:11:15.620 --> 00:11:20.744
So this load function here,
because we're calling fetch /api/now,

162
00:11:20.744 --> 00:11:26.802
we know that this load function depends
on that resource, the /api/now resource.

163
00:11:26.802 --> 00:11:29.915
So let's go over to the page.svelte, and

164
00:11:29.915 --> 00:11:35.626
we'll add an onMount callback that
invalidates that resource once a second.

165
00:11:39.006 --> 00:11:45.777
Import onMount, from svelte.

166
00:11:45.777 --> 00:11:52.668
I'm gonna import the invalidate
function from $app/navigation.

167
00:11:58.689 --> 00:12:04.069
Then we'll create an onMount callback,
That sets up an interval.

168
00:12:08.790 --> 00:12:10.382
It's gonna run once a second.

169
00:12:19.492 --> 00:12:24.394
Make sure that you return
the clearInterval teardown.

170
00:12:28.624 --> 00:12:33.042
And inside that interval,
we're gonna invalidate that resource.

171
00:12:37.124 --> 00:12:40.480
Right, and
you'll see that the time is now updating.

172
00:12:42.550 --> 00:12:47.378
As we navigate around the site,
the time zone inside this

173
00:12:47.378 --> 00:12:52.309
function is being invalidated
independently of the other

174
00:12:52.309 --> 00:12:56.850
load function which depends
on the API now resource.

175
00:12:58.050 --> 00:13:00.615
And we can also pass a function
to invalidate instead of

176
00:13:00.615 --> 00:13:03.627
an individual string, in which case,
you can invalidate based

177
00:13:03.627 --> 00:13:06.500
on all of the URLs that the current
load functions depend on.

178
00:13:10.259 --> 00:13:14.019
So in that example that we just saw,
we were registering that API now,

179
00:13:14.019 --> 00:13:16.972
resource as a dependency
because we were fetching it.

180
00:13:16.972 --> 00:13:20.556
But sometimes it's not appropriate
to use fetch, in which case,

181
00:13:20.556 --> 00:13:24.398
you can specify a dependency manually
with a function called depends.

182
00:13:27.543 --> 00:13:30.907
And depends takes a URL, but
a URL doesn't need to be

183
00:13:30.907 --> 00:13:36.140
an actual thing on the Internet,
it can be just a signifier that we create.

184
00:13:36.140 --> 00:13:39.835
So we can create custom
invalidation keys like data:now.

185
00:13:39.835 --> 00:13:44.308
Inside our layout.js, we're gonna get

186
00:13:44.308 --> 00:13:49.174
rid of the fetch and
replace it with depends.

187
00:13:49.174 --> 00:13:54.306
And at the top of here,
we're gonna say depends data:now to

188
00:13:54.306 --> 00:14:00.758
tell SvelteKit that this load function
depends on the data:now resource.

189
00:14:00.758 --> 00:14:05.506
I'm just gonna get rid of all of
that stuff and just return Date.now

190
00:14:05.506 --> 00:14:10.350
directly from the server load function,
or from the load function.

191
00:14:12.713 --> 00:14:15.482
And then we need to update
the invalidate call so that it's

192
00:14:15.482 --> 00:14:19.339
invalidating the resource that we just
created instead of the API now resource.

193
00:14:20.440 --> 00:14:27.454
So go into the interval and
change that to data:now.

194
00:14:29.784 --> 00:14:32.579
Right, and we're now invalidating that
load function without even hitting

195
00:14:32.579 --> 00:14:33.098
the network.

196
00:14:33.098 --> 00:14:34.958
We're not getting
anything from the server,

197
00:14:34.958 --> 00:14:37.258
we're just rerunning that
load function once a second.

198
00:14:42.465 --> 00:14:45.540
Right, then finally,
there's the nuclear option.

199
00:14:45.540 --> 00:14:49.482
We can invalidate everything on the page
in one go using a function called

200
00:14:49.482 --> 00:14:50.460
InvalidateAll.

201
00:14:52.070 --> 00:14:57.430
So we'll get rid of the invalidate import
here, replace that with invalidateAll.

202
00:14:57.430 --> 00:15:01.691
And here,
we'll just get rid of that resource and

203
00:15:01.691 --> 00:15:04.637
specify invalidateAll instead.

204
00:15:04.637 --> 00:15:08.348
And now we can get rid of
that artificial resource.

205
00:15:11.366 --> 00:15:14.216
And now everything is
being reset once a second.

206
00:15:17.356 --> 00:15:21.321
This is what's happening behind
the scenes when you use a progressively

207
00:15:21.321 --> 00:15:22.690
enhanced form, right?

208
00:15:22.690 --> 00:15:25.630
You will post some data to the server,
you will get something back.

209
00:15:25.630 --> 00:15:29.441
SvelteKit is gonna conservatively assume
that something has changed in your app and

210
00:15:29.441 --> 00:15:33.380
that there's probably some data that needs
to be refreshed as a result of that.

211
00:15:33.380 --> 00:15:36.247
So anytime you submit data
with the use enhance action,

212
00:15:36.247 --> 00:15:40.160
SvelteKit is just gonna invalidate
everything, unless you tell it not to.

