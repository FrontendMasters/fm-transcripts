WEBVTT

1
00:00:00.000 --> 00:00:04.304
Now as we saw, because we're using
the form element, this app continues to

2
00:00:04.304 --> 00:00:07.948
work even if the user doesn't
have JavaScript for some reason.

3
00:00:07.948 --> 00:00:11.256
And a page that I often
link people to is this one,

4
00:00:11.256 --> 00:00:16.182
which describes all the ways in which
JavaScript can fail when someone is

5
00:00:16.182 --> 00:00:19.757
trying to use your web app,
it's quite a long list.

6
00:00:19.757 --> 00:00:22.193
I live in New York City,
I take the subway a lot.

7
00:00:22.193 --> 00:00:24.293
We do not have signal on the subway,
and so

8
00:00:24.293 --> 00:00:28.133
very often I'll start loading something
while I'm at the subway station,

9
00:00:28.133 --> 00:00:32.106
I'll disappear into the tunnel and then
the rest of the content fails to load.

10
00:00:32.106 --> 00:00:35.676
And so JavaScript fails to kick in and
I'm left with a broken application, and

11
00:00:35.676 --> 00:00:37.150
it doesn't need to be this way.

12
00:00:37.150 --> 00:00:40.794
We can build things in such a way that
they are resilient to those sorts of

13
00:00:40.794 --> 00:00:41.534
conditions.

14
00:00:41.534 --> 00:00:44.799
Of course, most of the time
users do have JavaScript and

15
00:00:44.799 --> 00:00:49.455
when JavaScript is available, we can use
it to provide a better user experience

16
00:00:49.455 --> 00:00:51.761
than is possible without JavaScript.

17
00:00:51.761 --> 00:00:54.891
This is called progressive enhancement,
and

18
00:00:54.891 --> 00:00:59.305
in SvelteKit we can progressively
enhance forms using an element

19
00:00:59.305 --> 00:01:03.008
action which we learned about
in the Svelte workshop.

20
00:01:03.008 --> 00:01:09.545
First thing we're gonna do is import
the enhance helper from $app/forms.

21
00:01:18.597 --> 00:01:21.765
And then down on the form itself,

22
00:01:21.765 --> 00:01:26.643
we're just gonna add
the use enhanced directive.

23
00:01:26.643 --> 00:01:31.947
Add it there, add then the same thing
on the other form that deletes a todo.

24
00:01:41.127 --> 00:01:42.941
Other than that,
everything is gonna behave the same.

25
00:01:42.941 --> 00:01:46.078
So now, if we add a todo, get some lunch,

26
00:01:46.078 --> 00:01:52.004
it's gonna look exactly the same because
this is a local development server,

27
00:01:52.004 --> 00:01:56.043
so the server round trip was
already fast before, but

28
00:01:56.043 --> 00:02:00.750
now we're rendering this without
reloading the page at all.

29
00:02:00.750 --> 00:02:03.235
But now that we're doing that,
we can start to get a little bit fancy.

30
00:02:03.235 --> 00:02:07.209
We can start to use things like
transitions to make the UI a little bit

31
00:02:07.209 --> 00:02:11.412
nicer, and in our case, to make
what's happening a bit more visible.

32
00:02:11.412 --> 00:02:16.121
I'm gonna begin by importing the fly and
slide transitions from svelte/transition.

33
00:02:24.872 --> 00:02:28.281
And on the list item,
we're rendering each todo.

34
00:02:31.767 --> 00:02:35.584
I'm gonna add a fly transition
when the list item comes in,

35
00:02:38.149 --> 00:02:44.177
Give it a y value of 20 so that it flies
in for 20 pixels when we create it,

36
00:02:44.177 --> 00:02:47.739
and when it vanishes, we'll slide it out.

37
00:02:49.764 --> 00:02:57.705
So now, if I add a new todo,
You can see that it transitions in nicely.

38
00:02:57.705 --> 00:03:01.570
If I delete one of these todos,
you see that it slides out.

39
00:03:01.570 --> 00:03:05.826
And that's obviously something that you
can't do if you don't have JavaScript on

40
00:03:05.826 --> 00:03:08.584
the page and
you're relying on the full page reload.

41
00:03:08.584 --> 00:03:11.390
&gt;&gt; How is the delete icon displayed?

42
00:03:11.390 --> 00:03:15.163
Are you importing an SVG?

43
00:03:15.163 --> 00:03:20.686
&gt;&gt; Yeah, so the delete icon that
you can see on the right-hand

44
00:03:20.686 --> 00:03:28.106
side of these todos is just an SVG that's
in the same directory, remove.svg.

45
00:03:28.106 --> 00:03:34.411
On the button, we have some CSS which
is being added all the way down here,

46
00:03:34.411 --> 00:03:39.000
just has a background which
is referencing that SVG.

47
00:03:39.000 --> 00:03:43.750
And the fact that we're able
to do url(./remove.svg) and

48
00:03:43.750 --> 00:03:49.139
it renders is because VT is resolving
that against the current module.

49
00:03:49.139 --> 00:03:54.594
When the application is built,
it will take that file,

50
00:03:54.594 --> 00:03:58.423
hash it, put it in an axis directory and

51
00:03:58.423 --> 00:04:04.596
give it an immutable file name so
that it can be cached forever.

52
00:04:04.596 --> 00:04:09.084
And it gets optimized and everything,
and you don't have to worry about it,

53
00:04:09.084 --> 00:04:12.621
all you need to do is import
the SVG from the local directory.

54
00:04:12.621 --> 00:04:15.830
So this is a nice way to
do this kinda design.

55
00:04:15.830 --> 00:04:19.182
You could also put the remove.svg
in your lib folder and

56
00:04:19.182 --> 00:04:22.046
reference it like that,
that would also work.

57
00:04:24.921 --> 00:04:28.592
Yeah, that's the kinda nice thing that
we get by building on top of the,

