WEBVTT

1
00:00:00.000 --> 00:00:03.216
Okay, let's talk about forms,
one of my favorite topics.

2
00:00:03.216 --> 00:00:06.044
So in the chapter on loading,
we saw how to get data from the server to

3
00:00:06.044 --> 00:00:09.284
the browser, but sometimes you need to
send data in the opposite direction.

4
00:00:09.284 --> 00:00:14.132
You need to get data from the browser back
to the server, and that's where the form

5
00:00:14.132 --> 00:00:18.993
element, which is the web platform's way
of submitting data, comes into play.

6
00:00:18.993 --> 00:00:20.952
Let's build a little todo app.

7
00:00:20.952 --> 00:00:23.630
We've already got an in-memory
database setup in

8
00:00:23.630 --> 00:00:28.063
this /lib/server/database module and
we're just putting everything in a map.

9
00:00:28.063 --> 00:00:30.938
Obviously, in a real app,
you would use an actual database, but

10
00:00:30.938 --> 00:00:32.885
we're not gonna do that for this tutorial.

11
00:00:32.885 --> 00:00:37.728
And we have a load function
in src/routes/.page.server.js

12
00:00:37.728 --> 00:00:42.138
that uses the cookies API to get
hold of the current user ID.

13
00:00:42.138 --> 00:00:44.664
If the user doesn't yet
have an id, it assigns one.

14
00:00:44.664 --> 00:00:48.724
It gets the todos that
belong to that user.

15
00:00:48.724 --> 00:00:51.725
So this allows us to have
a per-user todo list.

16
00:00:51.725 --> 00:00:54.379
But we need to add a form so
that we can create new todos.

17
00:00:54.379 --> 00:00:58.465
So go over to src/routes/.page.svelte.

18
00:00:58.465 --> 00:01:03.293
And below the h1,
we're gonna add a form element,

19
00:01:03.293 --> 00:01:10.117
with a method of "POST", cuz we're
gonna post some data to the server.

20
00:01:10.117 --> 00:01:15.569
Inside there, we'll create a label,
Add some text,

21
00:01:15.569 --> 00:01:20.155
add a todo, Then we'll create an input.

22
00:01:22.762 --> 00:01:26.433
Give it a name,
which is gonna be description.

23
00:01:30.044 --> 00:01:32.861
And I'm gonna disable
autocomplete as well.

24
00:01:38.668 --> 00:01:42.028
So we can now type into this form and
submit some data, but

25
00:01:42.028 --> 00:01:46.168
we get a 405 error because no actions
exist for this page right now.

26
00:01:46.168 --> 00:01:47.588
So we can fix that.

27
00:01:50.196 --> 00:01:53.998
What we need to do is create
an action in our page server js file.

28
00:01:53.998 --> 00:01:57.901
This is the counterpart
to the load function.

29
00:01:57.901 --> 00:02:01.528
So down here, create an actions object.

30
00:02:05.558 --> 00:02:10.346
And we're gonna create a default action,
which is gonna be an async

31
00:02:10.346 --> 00:02:14.969
function that's gonna grab the cookies and
the request object.

32
00:02:18.641 --> 00:02:23.996
And first of all, it's gonna grab the
description from that input by requesting

33
00:02:23.996 --> 00:02:33.712
the form data, And
getting the description.

34
00:02:33.712 --> 00:02:39.907
And it's gonna create a to do in the map
that belongs to the current user.

35
00:02:39.907 --> 00:02:48.590
So db.createTodo(cookies.get('userid')

36
00:02:48.590 --> 00:02:52.934
data.get description.

37
00:02:55.645 --> 00:02:58.083
Okay, this request object here,

38
00:02:58.083 --> 00:03:03.056
this is a standard request interface
that is part of the web platform.

39
00:03:03.056 --> 00:03:07.251
You can learn about the request
object on MDN if you're not familiar.

40
00:03:07.251 --> 00:03:11.438
It's something that you'll use
a lot in web development, and

41
00:03:11.438 --> 00:03:14.761
SvelteKit uses standard
web APIs as far as it can.

42
00:03:16.588 --> 00:03:22.266
When we call await request.formdata, that
returns an instance of the form data API,

43
00:03:22.266 --> 00:03:27.318
which is the same object that you get in
the browser if you call new form data and

44
00:03:27.318 --> 00:03:29.144
then pass in form element.

45
00:03:34.075 --> 00:03:39.739
So now if we type in some data,
And hit Enter,

46
00:03:39.739 --> 00:03:46.221
post to the server, you'll see that it
reloads the page with the new data.

47
00:03:46.221 --> 00:03:50.668
And you'll notice that we haven't had to
add any fetch code, we haven't had to do

48
00:03:50.668 --> 00:03:54.354
error handling and stuff like that,
data updates automatically.

49
00:03:54.354 --> 00:03:56.394
And because we're using a form element,

50
00:03:56.394 --> 00:03:59.610
this app would continue to work
even if JavaScript was disabled.

51
00:03:59.610 --> 00:04:05.497
And we can actually demonstrate that
by opening this app in a new tab.

52
00:04:05.497 --> 00:04:08.461
I'm gonna open the settings,

53
00:04:12.053 --> 00:04:16.726
Scroll down to disable JavaScript,
reload the page,

54
00:04:19.792 --> 00:04:24.664
Hit Enter, and the page reloads even
though we're not using JavaScript.

55
00:04:24.664 --> 00:04:27.094
We see up-to-date personalized data.

56
00:04:27.094 --> 00:04:29.541
We close that window now and
get back to the tutorial.

57
00:04:34.821 --> 00:04:37.569
So just now, we used a default action,
but in practice,

58
00:04:37.569 --> 00:04:40.454
a page that only has a single
action is actually quite rare.

59
00:04:40.454 --> 00:04:44.166
Most of the time, you will need to
have multiple actions on a page.

60
00:04:44.166 --> 00:04:46.080
So in the case of our todo app,

61
00:04:46.080 --> 00:04:49.995
we wanna be able to delete todos
once we've completed them.

62
00:04:49.995 --> 00:04:54.532
First thing we're gonna do is get
rid of the default action and

63
00:04:54.532 --> 00:04:57.858
turn it into a named action,
call it create.

64
00:04:57.858 --> 00:05:02.719
And then we'll create a new one,
let's call it delete, And

65
00:05:02.719 --> 00:05:03.761
it's gonna be the same deal.

66
00:05:03.761 --> 00:05:07.985
It's an async function,
uses cookies and request.

67
00:05:09.824 --> 00:05:17.505
We're gonna get the data, And
we're gonna delete the todo.

68
00:05:25.032 --> 00:05:29.676
This time, the data that we're gonna
get from the form is an id property.

69
00:05:36.370 --> 00:05:41.254
Now the first thing we wanna do before we
implement the delete action inside our

70
00:05:41.254 --> 00:05:45.257
page is we need to update the form
action that creates the todos.

71
00:05:45.257 --> 00:05:49.499
So go back to page.svelte,
scroll up to the form,

72
00:05:49.499 --> 00:05:53.064
and we're gonna add an action attribute.

73
00:05:53.064 --> 00:05:56.952
By default, the action is
the same as the current page.

74
00:05:56.952 --> 00:06:00.061
And so if you just have &lt;form
method="POST"&gt; without specifying

75
00:06:00.061 --> 00:06:00.587
an action,

76
00:06:00.587 --> 00:06:03.969
that is gonna call the default action
on the page that you're currently on.

77
00:06:03.969 --> 00:06:08.766
But in this case,
we wanna use a named action,

78
00:06:08.766 --> 00:06:13.563
we'll do that by adding
a query parameter with

79
00:06:13.563 --> 00:06:18.114
a value of create with
a slash in front of it.

80
00:06:18.114 --> 00:06:23.542
So what this means is we take the current
URL and we append a query string

81
00:06:23.542 --> 00:06:29.163
with a parameter whose name is /create and
which doesn't have a value.

82
00:06:29.163 --> 00:06:32.852
And that tells SvelteKit that we
are trying to invoke the create action on

83
00:06:32.852 --> 00:06:33.463
this page.

84
00:06:37.788 --> 00:06:39.629
Now the action doesn't
have to be on this page.

85
00:06:39.629 --> 00:06:43.273
You can actually have an action that
points to a different page entirely,

86
00:06:43.273 --> 00:06:46.448
which is very useful when you're
building things like login and

87
00:06:46.448 --> 00:06:49.242
logout forms that should exist
on all pages of your app.

88
00:06:54.764 --> 00:06:59.755
Okay, so lastly, we wanna create a form
for each of the todos in our list.

89
00:07:02.021 --> 00:07:05.986
So inside here,
instead of just having that description,

90
00:07:05.986 --> 00:07:08.777
we'll add &lt;form method="POST"&gt;.

91
00:07:10.643 --> 00:07:12.547
Invoke the delete action.

92
00:07:14.963 --> 00:07:17.276
And you recall that inside the action,

93
00:07:17.276 --> 00:07:21.208
we were referring to an id property
that we need to make available.

94
00:07:21.208 --> 00:07:24.688
So each todo has an id already.

95
00:07:24.688 --> 00:07:29.616
And to add that to the form without
showing it to the user, because the user

96
00:07:29.616 --> 00:07:35.200
doesn't want a random string of digits,
we'll do &lt;input type="hidden"&gt;.

97
00:07:35.200 --> 00:07:42.331
Give it a name of "id" so
that we can get it with form.getid.

98
00:07:42.331 --> 00:07:47.247
And the value is gonna be todo.id.

99
00:07:52.595 --> 00:07:55.619
We'll add a span containing
the todo description,

100
00:07:59.598 --> 00:08:03.615
And then we're gonna add
a button with a label so

101
00:08:03.615 --> 00:08:08.437
that people who can't see
the icon that is about to appear

102
00:08:08.437 --> 00:08:12.874
can also understand what
this button is going to do.

103
00:08:14.754 --> 00:08:19.956
Okay, you'll see that we have these
little trashcan icons down here

104
00:08:19.956 --> 00:08:26.602
that's coming from the remove.svg which is
being controlled down here with some CSS.

105
00:08:32.291 --> 00:08:35.086
So if we've wired everything up correctly,

106
00:08:35.086 --> 00:08:38.846
then we should now be able to
delete todos as well as add them.

107
00:08:40.083 --> 00:08:41.037
And indeed it works.

108
00:08:41.037 --> 00:08:45.534
And if we refresh the page,
we'll see that those todos stay deleted.

