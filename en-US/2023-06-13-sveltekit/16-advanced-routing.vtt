WEBVTT

1
00:00:00.310 --> 00:00:02.208
So in the earlier chapter on routing,

2
00:00:02.208 --> 00:00:05.128
we learned how to create routes
with dynamic parameters.

3
00:00:05.128 --> 00:00:07.980
But sometimes it's helpful to
make a parameter optional.

4
00:00:07.980 --> 00:00:10.771
A really good example of this is
when you're using the path name to

5
00:00:10.771 --> 00:00:11.804
determine the locale.

6
00:00:11.804 --> 00:00:16.490
So you might begin your routes with slash
fr for your French users, slash de for

7
00:00:16.490 --> 00:00:18.750
your German users, and so on.

8
00:00:18.750 --> 00:00:21.130
But you also want to
have a default locale.

9
00:00:21.130 --> 00:00:22.810
So at the moment,
we're doubling things up.

10
00:00:22.810 --> 00:00:25.284
We have our default page.svelte here,

11
00:00:25.284 --> 00:00:28.932
and then we also have
the language-specific ones up here.

12
00:00:28.932 --> 00:00:31.580
And this one here is kind of duplicative,
we wanna get rid of that.

13
00:00:33.180 --> 00:00:37.320
So we can change this lang directory
here to use double brackets instead, and

14
00:00:37.320 --> 00:00:39.370
that makes that parameter optional.

15
00:00:39.370 --> 00:00:43.222
Just gonna hit the Rename button there and

16
00:00:43.222 --> 00:00:47.200
change that to lang with double brackets.

17
00:00:47.200 --> 00:00:52.004
And the app is now failing to
build because we have a conflict

18
00:00:52.004 --> 00:00:54.899
between this route and this route.

19
00:00:54.899 --> 00:00:59.658
In other words, it's ambiguous, SvelteKit
doesn't know which of these is supposed to

20
00:00:59.658 --> 00:01:01.445
apply if you hit the '/' route.

21
00:01:01.445 --> 00:01:03.553
So we're gonna just
delete this altogether.

22
00:01:06.810 --> 00:01:11.297
And then finally,
we're gonna edit the page.server.js inside

23
00:01:11.297 --> 00:01:14.870
the lang directory to
specify a default local.

24
00:01:14.870 --> 00:01:16.846
So here's our
internationalization data here.

25
00:01:16.846 --> 00:01:21.024
I'm just gonna add a fallback here for
when lang is undefined.

26
00:01:30.418 --> 00:01:35.199
Sometimes you'll have a route that has
an unknown number of path segments.

27
00:01:35.199 --> 00:01:39.154
And in these cases, we can use what's
called a rest parameter to match

28
00:01:39.154 --> 00:01:41.781
any number of segments
from zero to whatever.

29
00:01:41.781 --> 00:01:46.265
And it's named after its resemblance
to the rest parameters in JavaScript.

30
00:01:46.265 --> 00:01:50.197
So let's take this
src/routes/[path] directory and

31
00:01:50.197 --> 00:01:52.133
rename it to [...path].

32
00:01:56.396 --> 00:02:00.939
Right, this will now match
any route whatsoever.

33
00:02:00.939 --> 00:02:04.233
So we can keep clicking this and
it will still match the current route

34
00:02:05.960 --> 00:02:09.059
Until eventually we reset.

35
00:02:09.059 --> 00:02:10.663
And when you have a situation like this,

36
00:02:10.663 --> 00:02:12.990
other more specific routes
will be tested first.

37
00:02:12.990 --> 00:02:16.311
So the rest parameter is
essentially a catchall.

38
00:02:16.311 --> 00:02:21.470
This is useful to have in nested
inside other directories.

39
00:02:21.470 --> 00:02:26.030
For example, if you want custom 404 pages
for different parts of your app, then you

40
00:02:26.030 --> 00:02:30.670
can create a catchall that has its own
error.svelte and its own data loading.

41
00:02:30.670 --> 00:02:34.804
Inside the load function,
you could throw in a 404 error and

42
00:02:34.804 --> 00:02:39.261
it would render that error page
instead of the fallback error page.

43
00:02:39.261 --> 00:02:43.133
Now, unlike in some frameworks, you do
not need to put your rest parameters at

44
00:02:43.133 --> 00:02:45.492
the end of the route,
you can have them inside.

45
00:02:45.492 --> 00:02:49.414
So something like
/item/[...path]/edit,

46
00:02:49.414 --> 00:02:53.850
is a totally valid route, or
/items/[...path].json 

47
00:02:53.850 --> 00:02:56.010
is also totally valid.

48
00:02:56.010 --> 00:02:59.580
Sometimes we want to add some
matching logic to our routing.

49
00:02:59.580 --> 00:03:04.491
For example, you might want a route
like colors/value to match

50
00:03:04.491 --> 00:03:08.500
hex values like ff3e00 or 676779.

51
00:03:08.500 --> 00:03:13.600
But you don't wanna match named colors
like colors/octarine or

52
00:03:13.600 --> 00:03:17.764
any other arbitrary input
like this invalid value here.

53
00:03:17.764 --> 00:03:20.221
And we can do that with
a thing called a matcher.

54
00:03:20.221 --> 00:03:23.953
First, we create a new file
in a directory called params.

55
00:03:27.705 --> 00:03:31.653
I'm gonna call this one hex.js.

56
00:03:31.653 --> 00:03:35.177
And inside this module,
I'm gonna export a function called match.

57
00:03:40.649 --> 00:03:45.369
And the job of this function is to return
true if the parameter is a successful

58
00:03:45.369 --> 00:03:47.380
match, and false if it's not.

59
00:03:49.080 --> 00:03:54.028
So the regular expression for
a hex code is, let's see,

60
00:03:54.028 --> 00:03:57.533
we want the caret to match the start, and

61
00:03:57.533 --> 00:04:01.776
then we want to have any number of 0 to 9,
a to f.

62
00:04:01.776 --> 00:04:07.930
No, not any number, we want six of them,
followed by the end of the match string.

63
00:04:07.930 --> 00:04:09.831
I'm gonna test the value against that.

64
00:04:12.982 --> 00:04:16.050
Right, and then to use the new matcher,

65
00:04:16.050 --> 00:04:20.846
we're gonna rename this [color]
directory to [color=hex].

66
00:04:29.054 --> 00:04:32.887
Right, and so we can continue
navigating between the colors, but

67
00:04:32.887 --> 00:04:36.661
if we now navigate to the invalid route,
it's gonna be a 404.

68
00:04:36.661 --> 00:04:39.251
That does not match colors equal hex.

69
00:04:41.024 --> 00:04:44.103
And so these matches, they run on
the server when you're doing routing on

70
00:04:44.103 --> 00:04:46.000
the server, and
they also run in the client.

71
00:04:46.000 --> 00:04:49.925
So you need to make sure that you're not
accessing any server-side information

72
00:04:49.925 --> 00:04:51.028
inside your matches.

73
00:04:51.028 --> 00:04:54.823
As we saw earlier in the workshop, layouts
are a way to share user interface and

74
00:04:54.823 --> 00:04:58.650
data loading logic between different
routes of your application.

75
00:04:58.650 --> 00:05:03.470
Or sometimes it's useful to have
layouts that don't affect the route.

76
00:05:03.470 --> 00:05:07.211
For example, you might have a /app
and /account routes, and

77
00:05:07.211 --> 00:05:11.209
those need to be behind authentication
while your /about route page is

78
00:05:11.209 --> 00:05:12.790
open to the world.

79
00:05:12.790 --> 00:05:15.829
And we can do this with
a thing called a route group,

80
00:05:15.829 --> 00:05:18.100
which is a directory in parentheses.

81
00:05:18.100 --> 00:05:23.042
So first thing we're gonna do, is we're
gonna rename the account directory here to

82
00:05:23.042 --> 00:05:26.043
authed/account with
the authed in parentheses.

83
00:05:32.224 --> 00:05:36.108
Right, and we can navigate to the account
page just as we could before,

84
00:05:36.108 --> 00:05:37.880
nothing has changed.

85
00:05:37.880 --> 00:05:41.540
Even though we have this
directory in the tree,

86
00:05:41.540 --> 00:05:45.393
that's not reflected in
the routing structure.

87
00:05:45.393 --> 00:05:47.839
We're gonna move app
into the same directory.

88
00:05:47.839 --> 00:05:50.672
Again, I'm just gonna hit
that Rename button and

89
00:05:50.672 --> 00:05:55.327
prefix it with authed in parentheses,
right, and these two things are now grouped,

90
00:05:55.327 --> 00:05:58.919
and we can navigate to all the same
routes that we could before.

91
00:06:01.520 --> 00:06:04.898
But what we can do now,
now that we have that route group is,

92
00:06:04.898 --> 00:06:08.956
we can control access to those routes
by creating a layout.server.js

93
00:06:08.956 --> 00:06:10.730
inside the authed directory.

94
00:06:10.730 --> 00:06:16.116
So just click on that, and
then create the layout.server.js file.

95
00:06:19.440 --> 00:06:22.975
And we're gonna redirect the user if we
detect that they're not logged in, and

96
00:06:22.975 --> 00:06:24.845
pull the redirect helper from SvelteKit.

97
00:06:32.200 --> 00:06:33.747
Then we're gonna export a load function.

98
00:06:39.969 --> 00:06:43.130
And if the user doesn't
have the logged_in cookie,

99
00:06:47.164 --> 00:06:51.448
Then we're gonna throw a redirect and
send them to the log in page.

100
00:06:55.544 --> 00:06:59.858
But we're gonna redirect them once they do
log in back to wherever we currently are.

101
00:07:09.789 --> 00:07:14.033
Right, so now if we try to visit
the account page or the app page,

102
00:07:14.033 --> 00:07:17.110
it's gonna send us to
the log in page instead.

103
00:07:18.850 --> 00:07:22.605
The log in route has
a form action which sets

104
00:07:22.605 --> 00:07:27.418
the logged_in cookie when
we press the Login button.

105
00:07:27.418 --> 00:07:29.558
I'm gonna hit that.

106
00:07:29.558 --> 00:07:31.442
And now I go to the account page.

107
00:07:33.839 --> 00:07:38.775
We can add some UI to these two routes
that's distinct from the UIs on the rest

108
00:07:38.775 --> 00:07:43.883
of the app by adding a layout.svelte
component inside the authed directory.

109
00:07:43.883 --> 00:07:47.980
So hit that button there and
create layout.svelte.

110
00:07:50.813 --> 00:07:57.177
Then inside here,
we're gonna create a form,

111
00:07:57.177 --> 00:08:01.958
method = POST, action = logout.

112
00:08:11.649 --> 00:08:14.091
And create that Logout button,
followed by the slot so

113
00:08:14.091 --> 00:08:15.690
that we can put the page content in.

114
00:08:17.970 --> 00:08:21.480
So now if I'm on the account page or
the app page, I can logout, and

115
00:08:21.480 --> 00:08:25.844
I'll get kicked back out to the homepage
where I don't need to be authenticated.

116
00:08:30.545 --> 00:08:34.030
So that's how you create a layout
group without affecting the route.

117
00:08:34.030 --> 00:08:35.667
Sometimes we need to
do the opposite thing,

118
00:08:35.667 --> 00:08:38.240
sometimes we need to break out of layouts.

119
00:08:38.240 --> 00:08:42.960
Ordinarily, every page inherits
every layer above it so

120
00:08:42.960 --> 00:08:46.891
that if we have a page
like abc/page.svelte,

121
00:08:46.891 --> 00:08:50.960
then it will inherit all of these layouts.

122
00:08:50.960 --> 00:08:55.111
The route layout, the a layout,
the b layout, and the c layout.

123
00:08:55.111 --> 00:09:00.384
And you can see that in this exercise if
we navigate between these different pages,

124
00:09:00.384 --> 00:09:03.565
each of these layouts is
getting applied in turn.

125
00:09:03.565 --> 00:09:08.051
And sometimes it's useful to be able to
break out of the current layout hierarchy.

126
00:09:08.051 --> 00:09:10.216
And we can do that by adding the '@' sign,

127
00:09:10.216 --> 00:09:13.870
followed by the name of the parents
segment that we want to reset to.

128
00:09:13.870 --> 00:09:22.210
So for example, if we were to change this
file from +page.svelte to +page@b.svelte,

129
00:09:22.210 --> 00:09:28.840
then it will put the abc route inside
the b layout instead of the c layout.

130
00:09:28.840 --> 00:09:34.928
So now these two routes share a layer,
or we could change it to a.

131
00:09:37.656 --> 00:09:41.769
And so now we go from home to a,
to the b layout, back to the a layout.

132
00:09:43.724 --> 00:09:48.555
Or we could reset it all the way to
the top by specifying the empty string.

133
00:09:48.555 --> 00:09:52.959
And so now we go home, a, b, and
then back to the route layout.

134
00:09:55.191 --> 00:09:59.075
Right, the route layout here,
this applies to every page of your app,

135
00:09:59.075 --> 00:10:01.361
you cannot break out of the route layout.

136
00:10:01.361 --> 00:10:06.141
So if you have some parts of your app that
shouldn't have any layout UI whatsoever,

137
00:10:06.141 --> 00:10:10.033
then what you'll need to do is put
every other part of your app inside

138
00:10:10.033 --> 00:10:10.941
a route group.

139
00:10:10.941 --> 00:10:16.067
Something like parentheses app, and then
put all of your routes inside that, and

140
00:10:16.067 --> 00:10:21.063
then you can use +page@ to reset all the
way to the blank layout at the very top.

141
00:10:21.063 --> 00:10:26.963
&gt;&gt; In this SvelteKit docs regarding
the data SvelteKit preload code,

142
00:10:26.963 --> 00:10:33.414
hover and tap have this same description,
what's their difference?

143
00:10:33.414 --> 00:10:38.081
&gt;&gt; So the difference between hover and
tap is that if a link has

144
00:10:38.081 --> 00:10:42.654
the data SvelteKit preload
data attribute set to hover,

145
00:10:42.654 --> 00:10:46.558
then when the mouse comes
to rest over that link,

146
00:10:46.558 --> 00:10:52.390
SvelteKit will begin fetching the code
and the data for the next page.

147
00:10:52.390 --> 00:10:56.625
The assumption being that if the mouse
has come to arrest over the link,

148
00:10:56.625 --> 00:11:01.154
there's a very high chance that the user
is about to initiate a navigation.

149
00:11:01.154 --> 00:11:04.120
But if you don't want that,
then you can specify tap.

150
00:11:04.120 --> 00:11:07.800
And in that case, the preloading won't
begin until there's a pointer down then.

151
00:11:10.040 --> 00:11:12.592
That doesn't give you quite
as much of a head start,

152
00:11:12.592 --> 00:11:16.201
but it does reduce the number of false
positives that you'll encounter.

153
00:11:16.201 --> 00:11:20.205
So if you're trying to save data,
then that's a good thing for you to do.

154
00:11:20.205 --> 00:11:23.112
But if you're trying to maximize
the speed of navigation,

155
00:11:23.112 --> 00:11:24.691
then you'll want to use hover.

156
00:11:24.691 --> 00:11:28.019
Obviously, hover only applies to
desktop because on a mobile device,

157
00:11:28.019 --> 00:11:30.470
you don't have a mouse,
there are no hover events.

158
00:11:30.470 --> 00:11:34.458
So in that case, it will fall back
to the tap behavior in all cases.

159
00:11:34.458 --> 00:11:40.486
If you do have hover set, then if for
whatever reason the the hover hasn't yet

160
00:11:40.486 --> 00:11:45.868
been triggered because the mouse
clicks on the link while it's still

161
00:11:45.868 --> 00:11:51.283
moving over the link, then it will
also initiate navigation on tap.

162
00:11:54.933 --> 00:12:01.957
&gt;&gt; Is the +page@.svelte
the same as +layout@.svelte?

163
00:12:01.957 --> 00:12:06.963
&gt;&gt; Yeah, so you can apply a layout
reset to your layout components

164
00:12:06.963 --> 00:12:12.442
as well as to your page components if
you want a whole group of routes to

165
00:12:12.442 --> 00:12:17.749
be reset to an earlier layout separately,
altogether, I guess.

166
00:12:17.749 --> 00:12:19.447
Yeah, I hope that makes sense.

167
00:12:19.447 --> 00:12:21.520
&gt;&gt; Is there a way to have named layouts?

168
00:12:23.757 --> 00:12:27.730
&gt;&gt; The way that you name a layout is
just by having it inside a segment.

169
00:12:27.730 --> 00:12:29.836
So wherever you are in the tree,

170
00:12:29.836 --> 00:12:34.594
you can refer to a layout above the route
that you're currently at just by

171
00:12:34.594 --> 00:12:38.736
referring to the name of the directory
in which that layout is.

172
00:12:38.736 --> 00:12:42.975
&gt;&gt; To be clear, a layout that you
can refer to that isn't route-based?

173
00:12:42.975 --> 00:12:48.094
&gt;&gt; No, because if you had something like
that, then the layouts would no longer

174
00:12:48.094 --> 00:12:53.630
be bound to the hierarchy and the behavior
would be very difficult to reason about.

175
00:12:53.630 --> 00:12:57.559
So the name of the layout
is always connected to

176
00:12:57.559 --> 00:13:01.204
the directory in which that layout lives.

177
00:13:01.204 --> 00:13:06.195
If we started having two ways of naming
layouts, then it would just add confusion,

178
00:13:06.195 --> 00:13:10.855
but you wouldn't actually gain any
expressive power, so we don't do that.

