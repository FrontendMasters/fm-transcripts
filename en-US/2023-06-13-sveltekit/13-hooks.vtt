WEBVTT

1
00:00:00.232 --> 00:00:07.005
So back in our page.svelte file,
we're gonna add a hero component.

2
00:00:07.005 --> 00:00:09.190
Let's create that component.

3
00:00:09.190 --> 00:00:11.696
Just do it right here
where it's being used.

4
00:00:16.228 --> 00:00:20.057
And hero is gonna take a movie prop.

5
00:00:23.192 --> 00:00:26.238
At the lang="ts".

6
00:00:26.238 --> 00:00:30.136
And the prompt is gonna
be of type MovieDetails,

7
00:00:30.136 --> 00:00:34.425
we would just like VS Code
auto-imports that for us.

8
00:00:34.425 --> 00:00:38.175
Okay, so the first thing we're
gonna do is create a link for

9
00:00:38.175 --> 00:00:39.976
the movie with an a element.

10
00:00:44.772 --> 00:00:46.495
I'm gonna to pass in the movie id.

11
00:00:50.383 --> 00:00:55.826
Then inside, we're gonna add
the backdrop image for the movie.

12
00:01:11.563 --> 00:01:15.532
Now, the source of the images
when we're dealing with

13
00:01:15.532 --> 00:01:20.027
the movie database needs to come
from their own image server.

14
00:01:20.027 --> 00:01:24.475
And so we're gonna put that information
in our API helper module as well.

15
00:01:26.866 --> 00:01:30.683
And we're gonna add a helper for
generating those URLs.

16
00:01:30.683 --> 00:01:36.738
So first we'll create
export.const media_base =,

17
00:01:36.738 --> 00:01:43.577
and the base URL for
these images is https://image.tmdb.

18
00:01:46.612 --> 00:01:49.279
.org/t/p.

19
00:01:51.352 --> 00:01:54.113
Then we can construct the URLs themselves,

20
00:01:57.869 --> 00:02:03.619
By taking in a file path,
which is gonna be a string,

21
00:02:03.619 --> 00:02:08.454
and a width,
which is gonna be a number, and

22
00:02:08.454 --> 00:02:12.662
returning a {media_base}/'w.

23
00:02:12.662 --> 00:02:15.952
And then we'll take that with and
we'll add the file path.

24
00:02:18.185 --> 00:02:22.282
All right, and we can now use
that helper inside our page.

25
00:02:25.889 --> 00:02:29.043
I'll just import that like so.

26
00:02:29.043 --> 00:02:32.080
We need to get a reference
to the backdrop image.

27
00:02:34.975 --> 00:02:38.028
So first, we'll get all of
the images that belong to the movie.

28
00:02:45.116 --> 00:02:48.217
That has backdrops,
logos and a poster image.

29
00:02:48.217 --> 00:02:50.315
It's the backdrops and
the logo we want for our hero.

30
00:02:55.995 --> 00:03:00.952
We have a whole bunch of
backdrops that we can pick from.

31
00:03:00.952 --> 00:03:03.418
They have different properties,

32
00:03:03.418 --> 00:03:08.697
ideally we want to get the backdrop
that doesn't have any language on it.

33
00:03:08.697 --> 00:03:12.582
And if you pour over the movie
database documentation you will

34
00:03:12.582 --> 00:03:15.643
eventually figure out that
the way to do that is to

35
00:03:15.643 --> 00:03:19.690
find an image that doesn't have
a language associated with it.

36
00:03:19.690 --> 00:03:24.702
So the way we do that is by finding

37
00:03:24.702 --> 00:03:33.440
an image where
image.iso_639_1 is undefined.

38
00:03:33.440 --> 00:03:35.481
And if that doesn't exist,
then we'll just grab the first one.

39
00:03:42.257 --> 00:03:43.004
At this point,

40
00:03:43.004 --> 00:03:46.397
it would probably be good to say that
this code is available on GitHub.

41
00:03:46.397 --> 00:03:49.590
So if you're falling behind on the typing,

42
00:03:49.590 --> 00:03:54.354
then you can clone the repo from
GitHub and follow along that way.

43
00:03:54.354 --> 00:03:57.744
Okay, so now we have a backdrop object,

44
00:03:57.744 --> 00:04:03.246
we'll get the backdrop file path,
personal width of 1280.

45
00:04:06.081 --> 00:04:10.561
And hopefully, we'll be able to see that

46
00:04:10.561 --> 00:04:15.303
inside our page once we've added some CSS.

47
00:04:24.121 --> 00:04:26.740
First of course, we need to add
the hero component to the page.

48
00:04:50.734 --> 00:04:53.710
All right, so
we can now see the Shazam backdrop.

49
00:04:53.710 --> 00:04:58.256
It's a little large so
we're gonna need to shrink that down.

50
00:04:58.256 --> 00:05:02.272
Add some CSS in the header component.

51
00:05:05.423 --> 00:05:13.083
Give it a class of backdrop so

52
00:05:13.083 --> 00:05:19.151
that we can target it.

53
00:05:27.003 --> 00:05:31.021
And lastly we're gonna set
an aspect ratio on this image so

54
00:05:31.021 --> 00:05:34.875
that we don't have a layout
shift when this page loads.

55
00:05:34.875 --> 00:05:38.547
If you don't have the aspect ratio
specified then initially the image will

56
00:05:38.547 --> 00:05:42.159
take zero height and all of the content
below it will pop down once the image

57
00:05:42.159 --> 00:05:45.505
loads, and
that's not something that we want.

58
00:05:45.505 --> 00:05:50.995
So we can add an inline
style of aspect dash ratio.

59
00:05:50.995 --> 00:05:55.188
And that information is helpfully on
the object that we got from the API.

60
00:06:04.808 --> 00:06:09.977
Just gonna copy all of this and
add another image for the logo.

61
00:06:09.977 --> 00:06:15.077
We'll copy that line,
backdrop equals site logo = images,

62
00:06:15.077 --> 00:06:19.800
logos, find and again,
we're gonna use the language.

63
00:06:19.800 --> 00:06:23.814
But this time we're gonna try and find
an English language one because right now,

64
00:06:23.814 --> 00:06:26.330
we're only concerned with
the English language.

65
00:06:26.330 --> 00:06:33.304
Ultimately we'd like to add some
internationalization to this as well but

66
00:06:33.304 --> 00:06:37.185
for now we're gonna default to English.

67
00:06:47.834 --> 00:06:49.881
All right, it's rendering that down there.

68
00:06:49.881 --> 00:06:53.359
We wanna put it inside the anchor
element on top of the backdrop.

69
00:06:56.789 --> 00:07:02.864
So we're gonna use position, absolute.

70
00:07:02.864 --> 00:07:06.785
Put it all the way to the left,
all the way to the top.

71
00:07:06.785 --> 00:07:12.515
Give it a height of 100% and
a width of let's say 30%,

72
00:07:19.534 --> 00:07:24.371
And an object fit of contain.

73
00:07:24.371 --> 00:07:26.500
Okay, before this layout correctly,

74
00:07:26.500 --> 00:07:29.539
we need to add some styles to
the anchor element as well.

75
00:07:29.539 --> 00:07:33.592
Just gonna give that a display of flex.

76
00:07:33.592 --> 00:07:36.296
Right and now,
the image is appearing correctly.

77
00:07:36.296 --> 00:07:37.845
Move that over a little bit so

78
00:07:37.845 --> 00:07:40.824
that it's not butting up
against the edge of the wall.

79
00:07:40.824 --> 00:07:44.668
And we're gonna add a drop shadow as
well just in case the text clashes with

80
00:07:44.668 --> 00:07:45.600
the background.

81
00:07:53.826 --> 00:07:56.465
Something like that will
make the text stand

82
00:07:56.465 --> 00:07:59.685
out against whatever
background it finds itself on.

83
00:08:06.796 --> 00:08:09.817
Okay, so
our pages is starting to take shape.

84
00:08:09.817 --> 00:08:12.304
We wanna add a class to this h1 so

85
00:08:12.304 --> 00:08:17.478
that it's not butting up right
against the edge of the page there.

86
00:08:17.478 --> 00:08:22.213
And you'll recall that in our
global stylesheet we have

87
00:08:22.213 --> 00:08:24.537
this column CSS property.

88
00:08:24.537 --> 00:08:29.282
I'm gonna add a class down here that
we can use anytime we have something

89
00:08:29.282 --> 00:08:31.352
that we want to have that with.

90
00:08:31.352 --> 00:08:32.704
I'm just gonna call it column.

91
00:08:36.208 --> 00:08:40.357
It's gonna have a width of column, and

92
00:08:40.357 --> 00:08:47.667
then it's gonna have a margin left
of auto and a margin right of auto.

93
00:08:47.667 --> 00:08:51.424
And we're gonna use this
side property as padding.

94
00:08:51.424 --> 00:08:54.633
So that it gets moved away
from the side of the screen.

95
00:08:59.894 --> 00:09:03.384
Now that we've got that class,
we can add it to the h1.

96
00:09:06.972 --> 00:09:13.916
We'll see that the h1 is now neatly lined
up with the logo in the navigation bar.

