WEBVTT

1
00:00:00.240 --> 00:00:02.978
Okay, so we've finished part 3,
the tutorial.

2
00:00:02.978 --> 00:00:06.359
We've learned all of the basics of
SvelteKit, and it's now time to move on to

3
00:00:06.359 --> 00:00:09.024
part 4 where we're gonna learn
some advanced techniques.

4
00:00:09.024 --> 00:00:12.337
We're gonna begin with hooks.

5
00:00:12.337 --> 00:00:14.321
SvelteKit provides several hooks,

6
00:00:14.321 --> 00:00:17.722
which are ways to intercept
the frameworks default behavior.

7
00:00:17.722 --> 00:00:22.691
The most elementary of these hooks
is the handle hook lives in a file

8
00:00:22.691 --> 00:00:27.662
called hooks.server.js, and
it receives an event object along

9
00:00:27.662 --> 00:00:32.205
with a resolve function, and
it returns a response object.

10
00:00:32.205 --> 00:00:34.150
Now, resolve here,
this is where the magic happens.

11
00:00:34.150 --> 00:00:37.421
This is where SvelteKit will match
the incoming request URL to a root of

12
00:00:37.421 --> 00:00:37.926
your app.

13
00:00:37.926 --> 00:00:42.120
It'll import the relevant code,
which means the page server.js, and

14
00:00:42.120 --> 00:00:44.193
the page SvelteKit files and so on.

15
00:00:44.193 --> 00:00:47.150
It loads the data needed by the route,
and then it generates the response.

16
00:00:47.150 --> 00:00:51.771
And so, this is what the default
handle hook looks like if you don't

17
00:00:51.771 --> 00:00:56.718
have a hook.server.js file,
this is essentially what SvelteKit is,

18
00:00:56.718 --> 00:00:58.843
is stubbing in on your behalf.

19
00:00:58.843 --> 00:01:03.510
And when you're rendering a page, you
can modify the HTML that gets generated.

20
00:01:03.510 --> 00:01:08.526
So here,
I'm gonna add an option to resolve.

21
00:01:08.526 --> 00:01:15.004
I'm gonna use the transform
page chunk method,

22
00:01:15.004 --> 00:01:19.902
which is gonna accept some HTML, and

23
00:01:19.902 --> 00:01:27.170
it's gonna return the HTML
with some modifications.

24
00:01:30.798 --> 00:01:33.887
Refresh the page now.

25
00:01:33.887 --> 00:01:39.672
The body tag has now been
manipulated by transformPageChunk.

26
00:01:39.672 --> 00:01:44.642
So that's use useful for
things like internationalization you

27
00:01:44.642 --> 00:01:48.875
can specify the lang attribute
of your HTML element for

28
00:01:48.875 --> 00:01:53.384
example, but you can also use
this hook to create entirely

29
00:01:53.384 --> 00:01:58.009
new routes that don't exist
in your directory structure.

30
00:01:58.009 --> 00:02:03.856
For example,
we create a new route called ping.

31
00:02:06.396 --> 00:02:11.185
We can return a response, pong.

32
00:02:11.185 --> 00:02:15.864
Now, if we navigate to that URL,
we're not gonna be able to navigate to it

33
00:02:15.864 --> 00:02:20.844
using the client side router because it
doesn't exist as a client side route,

34
00:02:20.844 --> 00:02:25.013
but it will go to the server and
return that response from handle.

35
00:02:28.443 --> 00:02:32.892
Now that event object that we were looking
at, this thing here, is the same object

36
00:02:32.892 --> 00:02:37.341
which is an instance of something called
a RequestEvent which you can read about in

37
00:02:37.341 --> 00:02:41.145
the documentation that is passed
into API roots in server.js files,

38
00:02:41.145 --> 00:02:43.661
form actions in page.server.js files, and

39
00:02:43.661 --> 00:02:47.691
also your load functions in
page.server.js and layout.server.js.

40
00:02:47.691 --> 00:02:51.650
The event object contains a number
of useful properties and methods,

41
00:02:51.650 --> 00:02:56.145
some of which you've already encountered
in this workshop, the cookies API,

42
00:02:56.145 --> 00:03:00.861
a fetch an implementation of the fetch API
that comes with some additional powers.

43
00:03:00.861 --> 00:03:04.878
The function for getting the user's
client address, which is useful for

44
00:03:04.878 --> 00:03:06.380
things like geolocation.

45
00:03:06.380 --> 00:03:10.757
And is DataRequest object,
which is true if we're hitting a load

46
00:03:10.757 --> 00:03:14.259
function as a result of
a client-side navigation,

47
00:03:14.259 --> 00:03:17.615
as opposed to rendering
an entire HTML document.

48
00:03:17.615 --> 00:03:20.237
Event.locals is a place
to put arbitrary data.

49
00:03:20.237 --> 00:03:23.497
Params is the current root parameters.

50
00:03:23.497 --> 00:03:27.032
Root is an object with an ID
property representing the root that

51
00:03:27.032 --> 00:03:28.306
was matched, if any.

52
00:03:28.306 --> 00:03:33.146
We've got the set headers function that we
saw before, and we have that URL object

53
00:03:33.146 --> 00:03:38.011
with properties like origin, host name,
path name, search params, and so on.

54
00:03:38.011 --> 00:03:42.890
So a useful pattern that
you'll often use in SvelteKit

55
00:03:42.890 --> 00:03:47.556
is to add some data to
event.locals inside handle so

56
00:03:47.556 --> 00:03:52.024
that it can be read in
subsequent load functions.

57
00:03:52.024 --> 00:03:57.895
So in our hook,
we're gonna do event.locals.answer = 42,

58
00:03:57.895 --> 00:04:02.712
and then we can read that
data inside a load function.

59
00:04:02.712 --> 00:04:05.643
Gonna add the event here, and

60
00:04:05.643 --> 00:04:11.749
then we're gonna put that data
inside this template string.

61
00:04:14.279 --> 00:04:18.794
Okay, in a real application, this is
the sort of thing that you might use

62
00:04:18.794 --> 00:04:21.470
with information about the current user.

63
00:04:21.470 --> 00:04:25.310
You'll do your authentication
in the handle hook,

64
00:04:25.310 --> 00:04:31.159
grab an object that represents the current
user and put that on event dot local,

65
00:04:31.159 --> 00:04:35.281
so that all of your server
load functions can access it.

66
00:04:36.547 --> 00:04:39.534
And one of the things
that we haven't seen yet

67
00:04:39.534 --> 00:04:42.998
is the fetch method that
exists on the event object.

68
00:04:42.998 --> 00:04:46.893
So you've probably used Fetch
in the browser, if not, again,

69
00:04:46.893 --> 00:04:50.874
MDN has all the information that
you need to know how to use Fetch.

70
00:04:50.874 --> 00:04:55.711
The Fetch that we get on the event object
is a little bit different because it can

71
00:04:55.711 --> 00:05:00.402
be used to make credential requests on
the server, inherits the cookies and

72
00:05:00.402 --> 00:05:02.162
the authorization header,

73
00:05:02.162 --> 00:05:06.000
that were passed from the original
request from the browser.

74
00:05:06.000 --> 00:05:10.273
That's not something that you get if
you're using something like NodeFetch.

75
00:05:10.273 --> 00:05:14.482
It can make relative requests on
the server, whereas normally in Node or

76
00:05:14.482 --> 00:05:18.146
server environments,
Fetch requires a fully qualified URL.

77
00:05:18.146 --> 00:05:22.964
And for internal requests, for example, if
inside your load function you make a fetch

78
00:05:22.964 --> 00:05:26.990
call to one of your own API routes,
that doesn't issue an HTTP request,

79
00:05:26.990 --> 00:05:30.821
it just calls the function directly,
so it's a lot more efficient.

80
00:05:33.054 --> 00:05:36.189
And its behavior can be modified
with the handleFetch hook,

81
00:05:36.189 --> 00:05:37.979
which by default looks like this.

82
00:05:37.979 --> 00:05:42.634
It's very similar to the handle hook
in that it takes the event object and

83
00:05:42.634 --> 00:05:44.552
an implementation of fetch.

84
00:05:44.552 --> 00:05:49.548
And by default, all we are doing is
fetching the request that was passed in,

85
00:05:49.548 --> 00:05:51.120
but we can change that.

86
00:05:51.120 --> 00:05:55.984
For example, we could respond
to requests for this file,

87
00:05:55.984 --> 00:05:59.359
with responses from this file instead,

88
00:05:59.359 --> 00:06:03.448
just by changing
the behavior of event.fetch.

89
00:06:03.448 --> 00:06:07.897
So, open up hooks.server.js and
then, inside here,

90
00:06:07.897 --> 00:06:11.707
we're gonna find out what
the requested URL is.

91
00:06:11.707 --> 00:06:17.680
To create a new URL object from request
to that URL, request dot URL is a string.

92
00:06:17.680 --> 00:06:20.049
It's a fully qualified URL.

93
00:06:20.049 --> 00:06:25.559
But when we call new URL, we get that
nice object with the path name and

94
00:06:25.559 --> 00:06:29.266
the origin and
all of that other useful stuff.

95
00:06:31.280 --> 00:06:35.971
So if the path name that's
been requested is /a,

96
00:06:35.971 --> 00:06:41.566
then we're gonna return
a response by fetching b instead.

97
00:06:57.294 --> 00:07:01.491
Okay, so in our root page server.js,
we are fetching /a, that isn't being

98
00:07:01.491 --> 00:07:05.833
redirected inside handle fetch, and
we're getting data from slash b instead.

99
00:07:05.833 --> 00:07:11.121
Now according to everything we've seen so
far, that's probably not very useful,

100
00:07:11.121 --> 00:07:16.335
but later we're gonna to learn about
something called universal load functions,

101
00:07:16.335 --> 00:07:19.777
and that's what this feature
is really designed for.

102
00:07:19.777 --> 00:07:24.862
In that scenario,
handleFetch is useful if you are making

103
00:07:24.862 --> 00:07:29.550
requests to a public URL,
like api.yourapp.com.

104
00:07:29.550 --> 00:07:33.258
From the browser, you wanna go to that
public URL, but if you're making the fetch

105
00:07:33.258 --> 00:07:36.350
from the server, then you don't
wanna go via the public Internet.

106
00:07:36.350 --> 00:07:39.817
You don't wanna go through
the load balancers and proxies and

107
00:07:39.817 --> 00:07:44.352
whatever between the server that's
rendering the HTML, and the server that's

108
00:07:44.352 --> 00:07:48.303
serving your API, because they can
just talk directly to each other.

109
00:07:48.303 --> 00:07:51.638
So you can use handle fetch in that
context to change requests for

110
00:07:51.638 --> 00:07:53.997
api.yourapp.com, to local host whatever

111
00:07:58.263 --> 00:08:05.593
The last hook that we're gonna learn

112
00:08:05.593 --> 00:08:11.985
about is the handle error hook.

113
00:08:11.985 --> 00:08:16.718
This lets you intercept those unexpected
errors that we talked about earlier and

114
00:08:16.718 --> 00:08:20.544
trigger some behavior,
maybe you wanna ping a Slack channel, or

115
00:08:20.544 --> 00:08:23.694
you wanna send some data to
an error logging service.

116
00:08:23.694 --> 00:08:26.634
So, to recap,
an unexpected error is one that was

117
00:08:26.634 --> 00:08:29.652
not created with the error
helper from SvelteKit.

118
00:08:29.652 --> 00:08:32.237
And generally,
when you see an unexpected error,

119
00:08:32.237 --> 00:08:34.773
it means that something
in your app needs fixing.

120
00:08:34.773 --> 00:08:37.645
Default behavior is just to log the error.

121
00:08:37.645 --> 00:08:39.780
So if you haven't defined handleError,

122
00:08:39.780 --> 00:08:42.345
then it basically behaves
a little bit like this.

123
00:08:42.345 --> 00:08:45.656
And so in this app,
if we navigate to the bad place,

124
00:08:45.656 --> 00:08:50.738
we'll see an internal error message,
but we're not seeing the error that was

125
00:08:50.738 --> 00:08:55.747
actually thrown from our load function,
which says, this is the bad place.

126
00:08:55.747 --> 00:09:01.022
But if we open up the terminal, then
we will see that error message logged,

127
00:09:01.022 --> 00:09:05.398
which will help us diagnose
the problem and hopefully fix it.

128
00:09:05.398 --> 00:09:09.733
So once again, the reason that we do this
is because error messages by their very

129
00:09:09.733 --> 00:09:12.268
nature can contain unexpected information.

130
00:09:12.268 --> 00:09:13.028
You don't control it.

131
00:09:13.028 --> 00:09:16.196
It could be coming from a third
party library or something else, and

132
00:09:16.196 --> 00:09:18.921
it could contain sensitive
information that could reveal

133
00:09:18.921 --> 00:09:21.657
information about your setup
to people who wish you harm.

134
00:09:21.657 --> 00:09:26.685
And so the default behavior in SvelteKit
is to redact that information and

135
00:09:26.685 --> 00:09:30.345
just show a generic internal
error message instead.

136
00:09:30.345 --> 00:09:35.343
So the error object that is available
to your application, whether that's

137
00:09:35.343 --> 00:09:40.264
represented as the page.error,
property in your error.svelte pages or

138
00:09:40.264 --> 00:09:44.796
the sveltekit.error property
inside your source/error.html,

139
00:09:44.796 --> 00:09:46.532
is just this object here.

140
00:09:46.532 --> 00:09:50.764
A plain object with a message
that says internal error or

141
00:09:50.764 --> 00:09:54.286
in the case of a 404, it'll say not found.

142
00:09:54.286 --> 00:09:59.354
In some situations,
you may want to customize a subject.

143
00:09:59.354 --> 00:10:04.639
So in here, instead of allowing
SvelteKit to generate that

144
00:10:04.639 --> 00:10:10.150
internal error object,
we could return an object of our own.

145
00:10:11.860 --> 00:10:15.450
Say everything is fine,
refresh the page, and

146
00:10:15.450 --> 00:10:21.213
you can see that is now being shown, and
we could add a code that goes with it.

147
00:10:21.213 --> 00:10:25.890
We can essentially add any
serializable data in here.

148
00:10:31.280 --> 00:10:35.711
And so we can now reference properties
other than the message inside our custom

149
00:10:35.711 --> 00:10:36.471
error page.

150
00:10:36.471 --> 00:10:40.436
We'll create a custom error page,

151
00:10:40.436 --> 00:10:45.598
click the button here, plus error.svelte.

152
00:10:45.598 --> 00:10:50.741
We begin by importing
the page store again.

153
00:10:50.741 --> 00:10:54.075
We'll show the page status.

154
00:10:54.075 --> 00:10:56.909
It's gonna be 500.

155
00:10:58.963 --> 00:11:07.007
We'll print the error message
that was included on that object,

156
00:11:07.007 --> 00:11:13.744
but now we can also add the code
property that we added.

157
00:11:19.229 --> 00:11:21.531
So that's the sort of thing that might
be useful to show to your users so

158
00:11:21.531 --> 00:11:24.148
that they can quote that in correspondence
with your customer service people or

159
00:11:24.148 --> 00:11:24.908
something like that.

160
00:11:24.908 --> 00:11:28.884
It's also something that
you might use when you're

161
00:11:28.884 --> 00:11:33.324
sending details of the error
to an error logging service.

162
00:11:33.324 --> 00:11:37.046
So those are the three hooks that we
have available handle, handleFetch and

163
00:11:37.046 --> 00:11:37.976
handleerror, and

164
00:11:37.976 --> 00:11:41.540
they allow us pretty broad array of
customizations of the application.

