[00:00:00]
>> And of course we can add handlers for all of the other HTTP verbs as well. So we'll create a to-do slash ID route by creating a new folder with an ID parameter, and then inside there, create our API route. And we're gonna add a put handler and a delete handler for toggling and removing to dos, using the toggle to do and the delete to do functions that are in the database JS file.

[00:00:29]
So in here once again we're gonna import the database. We're not importing the JSON help at this time because we're not gonna need it. Make our put handler first async function PUT, we need the params object this time so that we know which to do we're dealing with.

[00:00:49]
And then we're gonna go and grab request and cookies. This time the data that we're getting from the browser is gonna be a done property. And as before, we need to know the user's ID. And we're gonna call the toggle Todo function with that user ID, with the ID of the current todo which comes from the square brackets here.

[00:01:32]
And finally the data itself. The response that we're gonna return this time isn't actually gonna include any data because we don't need to return any data in this context. So we'll return a new response with a null body and a status of 204, which is no content. Added li handler as well export async function DELETE.

[00:02:02]
This time you don't even need to look at the request. So we're just gonna get params and cookies, get the user ID. And then we'll call database.delete Todo, pass in userid, pass in the id from the params object. And again, we're gonna return an empty response. Okay, so we can now interact with this endpoint inside our event handlers.

[00:02:40]
First we'll add one inside the onchange handler of the checkbox on the left. Scroll down to where that is, see the onchange handler here. We're gonna call fetch and this time we're gonna pass in the ID of the Todo as part of the URL, so that it becomes available on the params object.

[00:03:07]
The method for this one is PUT, corresponding to the PUT verb that we just defined. And the data that we're passing is whether or not the Todo is done. Then once again, 'Content-Type' : 'application/json'. And then on the other side of the Todo when the button gets clicked, we're gonna post a DELETE request to our handler.

[00:03:49]
I'm gonna send the request to the same place. This time, we don't need a body. The request itself is enough. And once that request succeeds, we'll again mutate the array this time to remove the one that we no longer need. Do that by filtering on whether the member of the array is the current Todo.

[00:04:22]
Okay, so we can now mark todos as complete. If I refresh the page, that should stay checked and we can also delete them. And if I refresh the page that should stay deleted. Okay, so that was a lot more work than using a form action and it won't work without JavaScript.

[00:04:41]
So I do recommend using form actions where possible but this is an option that you have when you need it. Okay, so we got a question about whether or not it makes sense to put the logic in an API root handler or in a server module inside your lib directory.

[00:04:59]
And the answer is that you cannot call function on the server directly from within a page.svelte you have to go via an API route or via a form action. Unless you've set up something like a third party, like telephone call something that allows you to do some sort of RPC mechanism.

[00:05:18]
And so the really is no distinction there. You're gonna put some logic in your API handlers but very often you'll have some kind of an abstraction, similar to our database JS file here, where the actual database manipulation is happening, and your API routes will just be calling these helper methods.

[00:05:40]
But there's always gonna be some logic in an API route handler. Hope that answers the question.
>> Let's say I want my endpoints to be used later for a mobile app. Is that okay or would I need to rewrite the API?
>> Absolutely, these endpoints, they are public HTTP endpoints and if you disable the default cross site request for protection, then you can use it as a regular public API.

[00:06:13]
You can use it within your app, and you can make fetch calls against your own endpoints, inside your load functions. And that'll work without issuing an HTTP call. So you can build an API that way, make it public but also privately accessible and that just works. But the default assumption when you're building a Svelte app is that the API routes and the server load functions are specifically for the pages that you're building.

[00:06:41]
So it's entirely up to you if you want to deviate from that and open up your API to the well.
>> I could just import function from lib utils.ts to get a function to do the same things, like add remove information from a database etc. So what I want to do that or implement API endpoints?

[00:07:00]

>> So if you're importing the file inside your Page.svelte, then that implies that that file is available in the client. And if you're doing that, then you don't have direct access to a database. You need to go through some HTTP layer in order to interact with your back-end.

[00:07:19]
Later we'll learn about server modules which cannot be imported into a Page.svelte file, which prevents you from making that error. So yeah, you're not gonna be able to directly manipulate the database from within your component. That is a deliberate design decision, though we don't let you do that because that way insecurity and madness lies.

[00:07:41]
So, yeah, you're always gonna be going through API routes or form actions when you wanna mutate data on the server.

