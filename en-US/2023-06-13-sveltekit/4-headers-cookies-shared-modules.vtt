WEBVTT

1
00:00:00.000 --> 00:00:02.440
Okay, so
we've finished part three of the tutorial.

2
00:00:02.440 --> 00:00:06.063
We've learned all of the basics of
SvelteKit, and it's now time to move on to

3
00:00:06.063 --> 00:00:09.157
part four, where we're gonna
learn some advanced techniques.

4
00:00:09.157 --> 00:00:11.755
We're gonna begin with hooks.

5
00:00:11.755 --> 00:00:13.739
SvelteKit provides several hooks,

6
00:00:13.739 --> 00:00:17.267
which are ways to intercept
the framework's default behavior.

7
00:00:17.267 --> 00:00:20.947
The most elementary of these
hooks is the handle hook,

8
00:00:20.947 --> 00:00:24.074
it lives in a file called hooks.server.js.

9
00:00:24.074 --> 00:00:29.378
And it receives an event object
along with a resolve function,

10
00:00:29.378 --> 00:00:32.289
and it returns a response object.

11
00:00:32.289 --> 00:00:35.765
Now, resolve here, this is where the magic
happens, this is where SvelteKit will

12
00:00:35.765 --> 00:00:38.012
match the incoming request
URL to a route of your app.

13
00:00:38.012 --> 00:00:41.855
It'll import the relevant code,
which means the page.server.js and

14
00:00:41.855 --> 00:00:43.687
the page.svelte files and so on.

15
00:00:43.687 --> 00:00:47.144
It loads the data needed by the route,
and then it generates the response.

16
00:00:47.144 --> 00:00:49.706
And so this is what the default
handle hook looks like.

17
00:00:49.706 --> 00:00:52.343
If you don't have a hooks.server.js file,

18
00:00:52.343 --> 00:00:56.139
this is essentially what SvelteKit
is stubbing in on your behalf.

19
00:00:58.333 --> 00:01:03.399
And when you're rendering a page, you
can modify the HTML that gets generated.

20
00:01:03.399 --> 00:01:07.344
So here,
I'm gonna add an option to resolve.

21
00:01:07.344 --> 00:01:12.163
I'm gonna use
the transformPageChunk method,

22
00:01:12.163 --> 00:01:15.461
which is gonna accept some HTML.

23
00:01:15.461 --> 00:01:19.607
And it's gonna return the HTML
with some modifications.

24
00:01:30.956 --> 00:01:38.557
Refresh the page now, the body tag has now
been manipulated by transformPageChunk.

25
00:01:40.590 --> 00:01:44.831
So that's useful for
things like internationalization,

26
00:01:44.831 --> 00:01:49.929
you can specify the lang attribute
of your HTML element, for example.

27
00:01:49.929 --> 00:01:54.867
But you can also use this hook to create
entirely new routes that don't exist

28
00:01:54.867 --> 00:01:56.883
in your directory structure.

29
00:01:56.883 --> 00:02:01.884
For example,
we create a new route called ping.

30
00:02:05.295 --> 00:02:11.408
We can return a response, pong.

31
00:02:11.408 --> 00:02:15.640
And now if we navigate to that URL, we're
not gonna be able to navigate to it using

32
00:02:15.640 --> 00:02:19.706
the client-side router because it
doesn't exist as a client-side route.

33
00:02:19.706 --> 00:02:24.468
But it will go to the server and
return that response from handle.

34
00:02:28.577 --> 00:02:31.974
Now, that event object that we
were looking at, this thing here,

35
00:02:31.974 --> 00:02:35.977
is the same object, which is an instance
of something called a RequestEvent,

36
00:02:35.977 --> 00:02:38.421
which you can read about
in the documentation.

37
00:02:38.421 --> 00:02:41.332
That is passed into API
routes in server.js files,

38
00:02:41.332 --> 00:02:43.913
form actions in page.server.js files, and

39
00:02:43.913 --> 00:02:48.032
also your load functions in
page.server.js and layout.server.js.

40
00:02:48.032 --> 00:02:50.962
The event object contains a number
of useful properties and methods,

41
00:02:50.962 --> 00:02:53.555
some of which you've already
encountered in this workshop.

42
00:02:53.555 --> 00:02:55.199
The cookies API, and

43
00:02:55.199 --> 00:03:01.054
an implementation of the fetch API that
comes with some additional powers.

44
00:03:01.054 --> 00:03:04.048
The function for
getting the user's client address,

45
00:03:04.048 --> 00:03:06.592
which is useful for
things like geolocation.

46
00:03:06.592 --> 00:03:12.156
And isDataRequest object, which is true if
we're hitting a load function as a result

47
00:03:12.156 --> 00:03:17.504
of a client-side navigation, as opposed
to rendering an entire HTML document.

48
00:03:17.504 --> 00:03:20.731
Event.locals is a place
to put arbitrary data,

49
00:03:20.731 --> 00:03:23.496
params is the current route parameters.

50
00:03:23.496 --> 00:03:25.575
Route is an object with an ID property,

51
00:03:25.575 --> 00:03:28.291
representing the route that was matched,
if any.

52
00:03:28.291 --> 00:03:30.287
We've got the setHeaders
function that we saw before.

53
00:03:30.287 --> 00:03:34.678
And we have that URL object
with properties like origin,

54
00:03:34.678 --> 00:03:39.172
host name, path, path name,
search params, and so on.

55
00:03:39.172 --> 00:03:44.567
And so a useful pattern that you'll often
use in SvelteKit is to add some data to

56
00:03:44.567 --> 00:03:50.396
event.locals inside handle, so that it
can be read in subsequent load functions.

57
00:03:50.396 --> 00:03:58.109
So in our hook,
we're gonna do event.locals.answer = 42.

58
00:03:58.109 --> 00:04:01.926
And then we can read that
data inside a load function.

59
00:04:01.926 --> 00:04:04.382
Gonna add the event here, and

60
00:04:04.382 --> 00:04:09.502
then we're gonna put that data
inside this template string.

61
00:04:16.508 --> 00:04:21.103
Okay, in a real application, this is
the sort of thing that you might use with

62
00:04:21.103 --> 00:04:23.376
information about the current user.

63
00:04:23.376 --> 00:04:25.652
You'll do your authentication
in the handle hook,

64
00:04:25.652 --> 00:04:29.170
grab an object that represents the current
user, and put that on event.local so

65
00:04:29.170 --> 00:04:31.517
that all of your server load
functions can access it.

66
00:04:37.501 --> 00:04:40.336
And one of the things
that we haven't seen yet

67
00:04:40.336 --> 00:04:43.624
is the fetch method that
exists on the event object.

68
00:04:43.624 --> 00:04:46.268
So you probably used fetch in the browser.

69
00:04:46.268 --> 00:04:47.447
If not, again,

70
00:04:47.447 --> 00:04:52.266
MDN has all of the information that
you need to know how to use fetch.

71
00:04:53.766 --> 00:04:57.992
The fetch that we get on the event
object is a little bit different.

72
00:04:57.992 --> 00:05:01.013
Because it can be used to make
credentialed requests on the server,

73
00:05:01.013 --> 00:05:04.299
it inherits the cookies in the
authorization header that were passed from

74
00:05:04.299 --> 00:05:06.101
the original request from the browser.

75
00:05:06.101 --> 00:05:10.210
That's not something that you get if
you're using something like NodeFetch.

76
00:05:10.210 --> 00:05:14.236
It can make relative requests on
the server, whereas normally in node or

77
00:05:14.236 --> 00:05:17.742
server environments,
fetch requires a fully qualified URL.

78
00:05:17.742 --> 00:05:22.583
And for internal requests, for example, if
inside your load function you make a fetch

79
00:05:22.583 --> 00:05:26.626
call to one of your own API routes,
that doesn't issue an HTTP request,

80
00:05:26.626 --> 00:05:30.503
it just calls the function directly,
so it's a lot more efficient.

81
00:05:32.988 --> 00:05:37.600
And its behavior can be modified
with the handleFetch hook, which,

82
00:05:37.600 --> 00:05:39.677
by default, looks like this.

83
00:05:39.677 --> 00:05:43.795
It's very similar to the handle hook
in that it takes the event object and

84
00:05:43.795 --> 00:05:45.491
an implementation of fetch.

85
00:05:45.491 --> 00:05:50.063
And by default, all we're doing is
fetching the request that was passed in.

86
00:05:50.063 --> 00:05:53.058
But we can change that, for example,

87
00:05:53.058 --> 00:05:58.298
we could respond to requests for
this file with responses from this

88
00:05:58.298 --> 00:06:03.179
file instead just by changing
the behavior of event.fetch.

89
00:06:03.179 --> 00:06:07.826
So open up hooks.server.js,
and then inside here,

90
00:06:10.106 --> 00:06:12.705
We're gonna find out what
the requested URL is.

91
00:06:15.347 --> 00:06:18.649
You'll create a new URL
object from request.url.

92
00:06:18.649 --> 00:06:22.234
Request.url is a string,
it's a fully qualified URL, but

93
00:06:22.234 --> 00:06:26.098
when we call new URL, we get that
nice object with the path name and

94
00:06:26.098 --> 00:06:28.859
the origin and
all of that other useful stuff.

95
00:06:31.505 --> 00:06:36.045
So if the path name that's
being requested is /a,

96
00:06:36.045 --> 00:06:41.332
then we're gonna return
a response by fetching b instead.

97
00:06:57.401 --> 00:07:02.377
Okay, so in our route page.server.js,
we are fetching /a,

98
00:07:02.377 --> 00:07:06.709
that isn't being redirected
inside handleFetch, and

99
00:07:06.709 --> 00:07:09.764
we're getting data from /b instead.

100
00:07:09.764 --> 00:07:12.337
Now, according to everything
that we've seen so far,

101
00:07:12.337 --> 00:07:13.991
that's probably not very useful.

102
00:07:13.991 --> 00:07:17.572
But later we're gonna learn about
something called universal load functions.

103
00:07:17.572 --> 00:07:19.973
And that's what this feature
is really designed for.

104
00:07:19.973 --> 00:07:24.979
In that scenario,
handleFetch is useful if you are making

105
00:07:24.979 --> 00:07:29.592
requests to a public URL,
like api.yourapp.com.

106
00:07:29.592 --> 00:07:32.528
And from the browser,
you wanna go to that public URL.

107
00:07:32.528 --> 00:07:34.468
But if you're making
the fetch from the server,

108
00:07:34.468 --> 00:07:36.469
then you don't wanna go
via the public Internet.

109
00:07:36.469 --> 00:07:39.439
You don't wanna go through
the load balancers and proxies and

110
00:07:39.439 --> 00:07:43.380
whatever are between the server that's
rendering the HTML and the server that's

111
00:07:43.380 --> 00:07:46.770
serving your API, because they can
just talk directly to each other.

112
00:07:46.770 --> 00:07:51.183
So you can use handleFetch in that
context to change requests for

113
00:07:51.183 --> 00:07:54.299
api.yourapp.com to localhost whatever.

114
00:08:08.911 --> 00:08:11.946
The last hook that we're gonna learn
about is the handleError hook.

115
00:08:11.946 --> 00:08:15.606
And this lets you intercept those
unexpected errors that we talked about

116
00:08:15.606 --> 00:08:17.471
earlier and trigger some behavior.

117
00:08:17.471 --> 00:08:19.200
Maybe you wanna ping a Slack channel,

118
00:08:19.200 --> 00:08:21.750
or you wanna send some data
to an error logging service.

119
00:08:23.200 --> 00:08:27.716
So, to recap, an unexpected error
is one that was not created with

120
00:08:27.716 --> 00:08:30.065
the error helper from SvelteKit.

121
00:08:30.065 --> 00:08:32.301
And generally,
when you see an unexpected error,

122
00:08:32.301 --> 00:08:34.492
it means that something
in your app needs fixing.

123
00:08:34.492 --> 00:08:38.784
Default behavior is just to log the error,
so if you haven't defined handleError,

124
00:08:38.784 --> 00:08:41.330
then it basically behaves
a little bit like this.

125
00:08:42.605 --> 00:08:46.021
And so in this app,
if we navigate to the bad place,

126
00:08:46.021 --> 00:08:48.647
we'll see an internal error message.

127
00:08:48.647 --> 00:08:52.814
But we're not seeing the error that was
actually thrown from our load function,

128
00:08:52.814 --> 00:08:54.535
which says this is the bad place.

129
00:08:55.855 --> 00:09:00.122
But if we open up the terminal, then
we will see that error message logged,

130
00:09:00.122 --> 00:09:03.674
which will help us diagnose
the problem and hopefully fix it.

131
00:09:05.708 --> 00:09:09.721
So once again, the reason that we do this
is because error messages, by their very

132
00:09:09.721 --> 00:09:13.281
nature, can contain unexpected
information, you don't control it.

133
00:09:13.281 --> 00:09:15.903
It could be coming from a third
party library or something else.

134
00:09:15.903 --> 00:09:19.904
And it could contain sensitive information
that could reveal information about

135
00:09:19.904 --> 00:09:22.390
your setup to people who wish you harm.

136
00:09:22.390 --> 00:09:25.832
And so the default behavior in SvelteKit
is to redact that information, and

137
00:09:25.832 --> 00:09:28.271
just show a generic internal
error message instead.

138
00:09:30.913 --> 00:09:36.044
So the error object that is available
to your application, whether that's

139
00:09:36.044 --> 00:09:40.937
represented as the page.error property
in your error.svelte pages or

140
00:09:40.937 --> 00:09:45.364
the sveltekit.error property
inside your src/error.html.

141
00:09:45.364 --> 00:09:49.654
There's just this object here, a plane
object with a message that says internal

142
00:09:49.654 --> 00:09:52.696
error, or in the case of a 404,
it'll say not found.

143
00:09:55.016 --> 00:09:58.010
Now, in some situations you may
want to customize this object.

144
00:09:59.500 --> 00:10:07.437
So in here, instead of allowing SvelteKit
to generate that internal error object,

145
00:10:07.437 --> 00:10:13.470
we could return an object of our own,
say, everything is fine,

146
00:10:13.470 --> 00:10:19.380
refresh the page, and
you can see that is now being shown.

147
00:10:19.380 --> 00:10:22.121
And we can add a code that goes with it,

148
00:10:22.121 --> 00:10:26.085
we can essentially add any
serializable data in here.

149
00:10:31.660 --> 00:10:36.063
And so we can now reference properties
other than the message inside our custom

150
00:10:36.063 --> 00:10:36.804
error page.

151
00:10:36.804 --> 00:10:41.454
We'll create a custom error page,
click the button here,

152
00:10:41.454 --> 00:10:46.573
+error.svelte, and
begin by importing the page store again.

153
00:10:52.886 --> 00:10:56.551
We'll show the page status,
it's gonna be 500.

154
00:11:08.549 --> 00:11:11.153
We'll print the error message
that was included on that object.

155
00:11:11.153 --> 00:11:14.285
But now we can also add the code
property that we added.

156
00:11:18.968 --> 00:11:22.312
Why is it that's the sort of thing that
might be useful to show to your users so

157
00:11:22.312 --> 00:11:25.816
that they can quote that in correspondence
with your customer service people or

158
00:11:25.816 --> 00:11:27.160
something like that.

159
00:11:27.160 --> 00:11:30.424
It's also something that you might use
when you're sending details of the error

160
00:11:30.424 --> 00:11:31.629
to an error logging service.

161
00:11:33.375 --> 00:11:37.135
So those are the three hooks that we
have available, handle, handleFetch, and

162
00:11:37.135 --> 00:11:37.865
handleError.

163
00:11:37.865 --> 00:11:41.849
And they allow us pretty broad array
of customizations of the application.

