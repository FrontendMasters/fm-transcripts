WEBVTT

1
00:00:00.510 --> 00:00:02.620
All right,
let's talk about headers and cookers.

2
00:00:02.620 --> 00:00:06.080
So inside your load function,
as well as inside form actions and

3
00:00:06.080 --> 00:00:10.709
API route and hooks, which are things that
we'll learn about later in the workshop.

4
00:00:10.709 --> 00:00:15.920
You have access to a set headers function,
which does exactly what you would expect.

5
00:00:15.920 --> 00:00:19.775
The most common thing that you would use,
set headers for is to set a cache control

6
00:00:19.775 --> 00:00:23.540
header on the response so
that data doesn't need to be re requested.

7
00:00:23.540 --> 00:00:26.285
But we can't really demonstrate
that in this context, so

8
00:00:26.285 --> 00:00:28.870
we're gonna do something
a little bit more dramatic.

9
00:00:28.870 --> 00:00:36.573
We're gonna change the content type of
the response, To text slash plane and

10
00:00:36.573 --> 00:00:41.923
we're gonna need to reload the page so
that we can see that.

11
00:00:41.923 --> 00:00:46.036
You see that it's no longer giving us an
HTML response that the browser can render,

12
00:00:46.036 --> 00:00:48.107
it's giving us some plain text instead.

13
00:00:55.556 --> 00:01:00.079
And one thing you can't use the SetHeaders
function for is to set cookies.

14
00:01:00.079 --> 00:01:03.898
Instead you should use the cookies
API which is also available in all

15
00:01:03.898 --> 00:01:06.115
of the same places that set headers is.

16
00:01:06.115 --> 00:01:10.705
So in page server Jas we're
gonna bring in the cookies API.

17
00:01:13.369 --> 00:01:17.963
And we're gonna replace this const visited
equals false line with something based

18
00:01:17.963 --> 00:01:22.030
on the cookies that were sent from
the browser to the server when the page is

19
00:01:22.030 --> 00:01:22.769
requested.

20
00:01:25.442 --> 00:01:28.191
Cookies get visited.

21
00:01:33.162 --> 00:01:37.456
And then after the first time the user
visits we're gonna set that cookie to true

22
00:01:37.456 --> 00:01:40.357
so that when they come back,
we'll recognize them.

23
00:01:40.357 --> 00:01:45.409
We do that with cookies.set visited,

24
00:01:45.409 --> 00:01:48.477
give it a value of true.

25
00:01:48.477 --> 00:01:52.918
And you should always set a path on your
cookies because the browser's default

26
00:01:52.918 --> 00:01:54.539
behavior is to set the path.

27
00:01:54.539 --> 00:01:59.220
On whatever the parent of the path that
you're visiting is which is not very

28
00:01:59.220 --> 00:01:59.900
helpful.

29
00:01:59.900 --> 00:02:04.425
Most of the time you wanna set your
cookies on the root of your application.

30
00:02:07.179 --> 00:02:11.688
We can now see that when we return
visited, if the user has visited the page

31
00:02:11.688 --> 00:02:15.203
before, they are no longer stranger,
they are friend.

32
00:02:19.837 --> 00:02:24.288
Now, the reason we use this cookies API
instead of interacting with headers is

33
00:02:24.288 --> 00:02:29.021
that not only does cookies set cause a set
cookie header to be added to the response.

34
00:02:29.021 --> 00:02:33.914
It also updates the internal map so that
if you call cookies.get inside another

35
00:02:33.914 --> 00:02:37.650
load function that is also
involved in rendering this page.

36
00:02:37.650 --> 00:02:43.234
It will be current with the cookie
that was set previously.

37
00:02:43.234 --> 00:02:45.867
You have a bunch of options
that you can pass here,

38
00:02:45.867 --> 00:02:49.833
we're using the cookie package under
the hood, which you can find on npm.

39
00:02:49.833 --> 00:02:53.590
But we're adding some defaults to make the
behavior of your application more secure.

40
00:02:53.590 --> 00:02:57.536
Specifically, we're making all of
your cookies HTTP only by default,

41
00:02:57.536 --> 00:02:59.900
we're setting secure to true.

42
00:02:59.900 --> 00:03:03.850
Except when you're on local host,
and we're setting same site to lax.

43
00:03:03.850 --> 00:03:08.270
These defaults will protect your users
from their cookies being leaked.

44
00:03:08.270 --> 00:03:11.850
&gt;&gt; To clarify about the thing
you said with the cookies, so

45
00:03:11.850 --> 00:03:15.290
if I set a cookie in a layout,
then I can reference it?

46
00:03:15.290 --> 00:03:18.777
Even though it's not actually
in the request cookies,

47
00:03:18.777 --> 00:03:21.978
I can reference it as if it
was in a page server file?

48
00:03:21.978 --> 00:03:26.817
&gt;&gt; So as long as you, so
there's like a potential race condition

49
00:03:26.817 --> 00:03:30.736
because the load functions
run simultaneously.

50
00:03:30.736 --> 00:03:35.658
And so if you set the cookie
asynchronously after it's been

51
00:03:35.658 --> 00:03:40.100
requested in the load function,
then that's a bug.

52
00:03:40.100 --> 00:03:43.302
And actually that's probably
a bug that we could catch and

53
00:03:43.302 --> 00:03:48.090
throw an error in that situation because
that is actually quite a nasty bug.

54
00:03:48.090 --> 00:03:53.977
But more typically, the way that
you would use that is inside your,

55
00:03:53.977 --> 00:03:57.810
server hook, which we'll cover later on.

56
00:03:57.810 --> 00:04:03.578
You would do something like event
dot locals dot user equals get user,

57
00:04:03.578 --> 00:04:05.060
from my cookies.

58
00:04:05.060 --> 00:04:09.431
If that doesn't exist, then we set a
cookie and then inside your load function,

59
00:04:09.431 --> 00:04:14.560
the cookie has been set because your hook
always runs before your load function.

60
00:04:14.560 --> 00:04:18.606
But we'll get into all
of that stuff later on.

61
00:04:18.606 --> 00:04:23.484
It's also useful when you're dealing with
form actions because if you have a login

62
00:04:23.484 --> 00:04:27.399
action, for example,
you might set a cookie inside that action.

63
00:04:27.399 --> 00:04:31.734
And then when the load function is
subsequently called the cookie will

64
00:04:31.734 --> 00:04:35.267
have been set by the time you
read it in the load function.

65
00:04:35.267 --> 00:04:39.579
So that's why we use the cookies
API as opposed to relying on

66
00:04:39.579 --> 00:04:42.060
a fresh request coming in.

67
00:04:42.060 --> 00:04:45.600
&gt;&gt; When working with input dependent data,
what is the best approach to loading it?

68
00:04:45.600 --> 00:04:50.399
For instance, on a search page, should the
user's input be handled with a promise on

69
00:04:50.399 --> 00:04:52.480
the component or with a data object?

70
00:04:54.480 --> 00:04:58.098
&gt;&gt; It depends on the UI that
you're trying to achieve.

71
00:04:58.098 --> 00:05:01.848
If you want the results to be
streamed in as the user is typing,

72
00:05:01.848 --> 00:05:05.529
then you would want to have that
logic inside the component,

73
00:05:05.529 --> 00:05:09.240
and you would have all of
the async handling there.

74
00:05:09.240 --> 00:05:14.758
The way that I tend to build search
inputs is, I'll just use a regular

75
00:05:14.758 --> 00:05:20.130
form that causes the data to be
loaded inside a load function.

76
00:05:20.130 --> 00:05:22.890
And so you have to type in the search
query and then hit enter, for

77
00:05:22.890 --> 00:05:25.256
me I just find that to be
a preferable user experience.

78
00:05:25.256 --> 00:05:28.205
It also happens to be much easier to
implement because you don't need to deal

79
00:05:28.205 --> 00:05:29.320
with any of the async logic.

80
00:05:29.320 --> 00:05:31.556
SvelteKit takes care of it for you but

81
00:05:31.556 --> 00:05:34.816
it depends,
there's no canonically right answer.

82
00:05:34.816 --> 00:05:39.152
So because SvelteKit uses directory based
routing, it's easy to place modules and

83
00:05:39.152 --> 00:05:42.170
components alongside
the routes that use them.

84
00:05:42.170 --> 00:05:45.978
I find a good rule of thumb when figuring
out where to put code is like put code

85
00:05:45.978 --> 00:05:48.520
close to where it's being used.

86
00:05:48.520 --> 00:05:52.853
But sometimes code is being used in
multiple places and when that happens you

87
00:05:52.853 --> 00:05:57.670
don't wanna have to do ../ ../ ../
../ to get a reference to the module.

88
00:05:58.900 --> 00:06:03.390
It's nice to have a place to put that
stuff that is common to all your routes,

89
00:06:03.390 --> 00:06:07.430
and SvelteKit that place is
the source/lib directory.

90
00:06:07.430 --> 00:06:10.795
Anything inside this directory
can be accessed by any module in

91
00:06:10.795 --> 00:06:12.199
source via the lib alias.

92
00:06:13.260 --> 00:06:18.918
So both of these page.svelte files
are importing a file from source.slashlib,

93
00:06:18.918 --> 00:06:22.120
they're trying to get
a hold of this message.

94
00:06:23.430 --> 00:06:27.748
And the home page is doing it right, but
if we navigate to this deeply nested root,

95
00:06:27.748 --> 00:06:31.140
we get an error from vite telling
us that it's failed to import.

96
00:06:32.200 --> 00:06:36.285
And that's because we've got
the wrong number of dot dot slashes,

97
00:06:36.285 --> 00:06:39.700
we've got five when we should have four.

98
00:06:39.700 --> 00:06:42.572
So, we could fix it by fixing
the number of dot dot slashes,

99
00:06:42.572 --> 00:06:45.910
but it would be a hell of a lot nicer
if we could just use $lib instead.

100
00:06:45.910 --> 00:06:50.922
So, get rid of all of that and
do the same in page.svel.

101
00:06:54.002 --> 00:06:57.664
And that will work consistently for
all of the modules and

102
00:06:57.664 --> 00:06:59.728
components in your lib folder.

103
00:06:59.728 --> 00:07:04.222
So that's a nice place to put shared
utility components, utils, js file,

104
00:07:04.222 --> 00:07:05.988
other things of that nature.

