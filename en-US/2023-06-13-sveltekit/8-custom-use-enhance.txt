[00:00:00]
>> Okay, so on the home page of the app, we've got a big featured movie at the top. And then we have three carousels of trending movies, movies that are now playing, and movies that are upcoming. So let's grab some data for that, first of all, from the API.

[00:00:18]
To do that, we're gonna need to add a page.js file with a load function. And we're using page js instead of page server js because the place that we're gonna be able to get this data from doesn't require any secrets, there's no API key or authentication. So we're gonna make requests directly from the browser when we navigate client side.

[00:00:43]
So, for that reason, we're not gonna have a server load function, cuz we don't need to make a round trip to our own server to get the data. As well as making things faster, that's gonna mean that our application is cheaper to host. So, create our load function.

[00:01:04]
And we're gonna grab the fetch helper that we learned about earlier. In fact, let's make this page ts file instead so that we can use TypeScript to make our life a little bit easier. And the place that we need to get this data from is a version of the movie database API that is hosted by the tastejs.com organization.

[00:01:36]
So the base URL for our API calls is gonna be https://api.movies.tastejs.com. And to get the To get the trending movies data, we're gonna make a fetch call, To that base, followed by trending/movie/day. That's gonna get the day's trending movies. And we'll use response.json to get hold of that data.

[00:02:34]
This needs to be an async function so that we can use await, so let's add that there And now that we've done this inside our page.svelte, we can create a script lang = ts, so that we use TypeScript and add export let data. And if we hover over that data, we'll see that we have a trending property, although at the moment, it has an any value, which is not much help.

[00:03:01]
If we're gonna be able to build this app under the time constraints that we're working under, then it would be really helpful if TypeScript could tell us what we're dealing with. So at this point, what I want you to do is open frontend-masters-svelteflix.versel.app and append the word just to the end of that.

[00:03:22]
Right, that's gonna give us a TypeScript declaration file which contains type information about all of the responses from the API that we're gonna be dealing with. So just hit that raw button, grab that whole thing, copy it. And then inside your app, inside the lib directory, we're gonna create a file, types.d.ts, and just gonna paste that whole thing.

[00:04:00]
We forgot the await before our fetch, I'll add that to get rid of that red squiggly. And when we're dealing with fetch, TypeScript doesn't know what the data is, so we have to tell TypeScript what kind of thing we're dealing with. So we're going to add an as at the end of this, and inside our types.dts we have a bunch of different things.

[00:04:23]
But one of the things that we're gonna be dealing with a lot is this movie list interface. This data that we're getting from this endpoint is a promise of a movie list. Actually no, we need to put that down here. And because we're awaiting it, it's not a promise, it's just a movie list.

[00:04:47]
We need to import that from our type declarations. And now when we open our page.svelte, hopefully, it's gonna tell us that trending is a movie list, so that makes our life a little bit easier. Okay, so we can add Top trending movies over here. And then the first thing we'll do is just have a look and see what information we have on that data object.

[00:05:22]
Open Dev Tools, open the Console. You can see that we have a bunch of trending results. And we're gonna wanna grab the first one of these and and render the information therein. It doesn't actually have everything that we want for the big hero image at the top, because we wanna grab a logo as well and the logo is not in the list results.

[00:05:46]
So we're gonna need to make another fetch call to get the full information about the movie at the top of the trending list. So back in our page.ts, We'll grab the first movie and call it featured. And now we're gonna make another request to the API. And this time, the data that we're gonna get, is/movie/featured.id.

[00:07:01]
And that's gonna be a movie details object. Okay, so if we now look in our DevTools and see what's in the featured data. It still doesn't have quite everything that we need because we need to tell the API that we wanna get some additional information. But before we get into that, all of this fetch code is already getting me down.

[00:07:25]
There's so much duplication because, first, you have to get the response and then you have to get the JSON from the response. And it's just no fun. So at this point, I'm gonna create an API helper in my lib directory, and we're gonna use that every time we interact with the API instead.

[00:07:42]
So let's open source/lib, add an api.ts file. And we're gonna start moving over some of that code. We'll get that base value, drop that in here, and we'll export a get function That takes the fetch object from our event. Need to give it a type. The type of fetch is type of global list fetch.

[00:08:18]
And then it's gonna take an endpoint, which is a string. And then we'll optionally add some parameters, Which is gonna be a record of strings. And then inside here we can make the actual fetch calls. So we'll grab that, We'll replace this with the endpoint that was passed in.

[00:08:52]
Need to make this an async function. And we can return the JSON that we got from that response. Okay, so now we can replace the existing calls to fetch in our load function with our new API helper. First, we import it. Import * as api from $lib-api. And we'll replace this whole thing with const trending = await api.get, pass in fetch.

[00:09:33]
And then we'll just grab that endpoint there. And we can delete all of that. And we can delete this too. Now a moment ago, I mentioned that we don't yet have all the information. The Movie Database API allows you to make multiple requests in one go by adding the append to results parameter.

[00:10:32]
And that looks like this, append_to_results. We can specify which pieces of additional data we want to get when we fetch a featured movie. In particular, right now we wanna get the images property. All right, so we're making a fetch to this endpoint and we're passing in a parameter, we need to do something with that parameter.

[00:11:00]
So we'll go back into our API module. And we're gonna add a query string parameter based on what was passed in by creating a new, URLSearchParams object. URLSearchParams will take any object that has a set of key value pairs, and it will turn that into a queryable search params object that you can easily turn into a string.

[00:11:34]
So, if you just add question mark and then Q, that is now gonna be a URL that reflects those parameters in a fully URL encoded fashion. So, if we set this up correctly, we're now making a the full API call that is gonna add all of the images to our featured movie, append_to_response.

[00:11:58]
Okay, so I got this wrong, it's actually not append_to_result, it's append_to_response. And now at long last we have this images object inside the the featured movie where we can grab a backdrop and we can grab a logo to put in our Big Hero slot at the top there.

