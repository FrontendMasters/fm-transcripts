WEBVTT

1
00:00:00.000 --> 00:00:02.852
Now one thing that you've
learned very quickly as a web

2
00:00:02.852 --> 00:00:07.203
developer is that you cannot trust users,
they will cause chaos given the chance.

3
00:00:07.203 --> 00:00:10.912
And we need to make sure that
they're not gonna submit gibberish

4
00:00:10.912 --> 00:00:12.292
data using our forms.

5
00:00:12.292 --> 00:00:16.105
The first line of defense is
the browser's built in validation,

6
00:00:16.105 --> 00:00:19.866
which makes it easy to for example,
mark the input as required.

7
00:00:19.866 --> 00:00:22.097
So let's go to the add to-do input.

8
00:00:22.097 --> 00:00:24.835
I'm just gonna add the required attribute.

9
00:00:27.454 --> 00:00:31.504
And now if you're try and
submit a to-do without any data,

10
00:00:31.504 --> 00:00:37.018
we'll see a notification from the browser
saying, please fill out this field.

11
00:00:37.018 --> 00:00:40.402
This kind of validation, is helpful,
and you absolutely should add it,

12
00:00:40.402 --> 00:00:43.744
gives you a nice user interface for
free, but it's also insufficient.

13
00:00:43.744 --> 00:00:48.642
There are some validation rules that
can't be encoded using these attributes,

14
00:00:48.642 --> 00:00:52.110
for example,
you might have a uniqueness requirement.

15
00:00:52.110 --> 00:00:56.334
In any case, if the user knows how to use
DevTools, then they might just go in and

16
00:00:56.334 --> 00:00:59.443
get rid of the required attribute or
something like that.

17
00:00:59.443 --> 00:01:01.168
So to guard against people doing
malicious things like that,

18
00:01:01.168 --> 00:01:02.427
you should always use
server side validation,

19
00:01:02.427 --> 00:01:03.436
as well as client side validation.

20
00:01:03.436 --> 00:01:06.716
If you have a choice,

21
00:01:06.716 --> 00:01:12.190
do the server side validation first.

22
00:01:12.190 --> 00:01:15.322
So all right, and in the database JS file

23
00:01:15.322 --> 00:01:20.315
we're gonna do the validation
when someone calls createTodo.

24
00:01:20.315 --> 00:01:24.018
First thing we'll do is
if description is empty.

25
00:01:26.115 --> 00:01:27.344
We'll throw an error.

26
00:01:30.996 --> 00:01:33.222
And the error is gonna be
todo must have a description.

27
00:01:40.325 --> 00:01:42.548
And then we're gonna get
the user's existing todos so

28
00:01:42.548 --> 00:01:43.956
that we can do a uniqueness check.

29
00:01:45.993 --> 00:01:51.016
If todos.find(todo), Todo.description,

30
00:01:55.403 --> 00:01:58.719
Is equal the description that
we've just submitted, well,

31
00:01:58.719 --> 00:02:02.176
then we're gonna throw an error
that says todos must be unique.

32
00:02:10.805 --> 00:02:19.208
Right, and so now if we submit
a duplicate todo, We get an error page.

33
00:02:19.208 --> 00:02:22.148
It's probably not exactly what we want,
but it's a good start.

34
00:02:22.148 --> 00:02:25.779
It would be nice if we could stay on the
same page where the form was submitted and

35
00:02:25.779 --> 00:02:28.707
give the user an opportunity to
correct them, their mistake.

36
00:02:28.707 --> 00:02:31.969
So inside our page.server.js file,

37
00:02:31.969 --> 00:02:37.375
we're gonna import a new module,
fail from SvelteKit.

38
00:02:41.729 --> 00:02:46.413
And inside our create action,
once we got the data,

39
00:02:46.413 --> 00:02:49.719
we're gonna try to create the Todo.

40
00:02:52.315 --> 00:02:54.270
And if it fails, we catch the error.

41
00:02:57.307 --> 00:03:02.762
And we're gonna return a fail object.

42
00:03:02.762 --> 00:03:04.487
Given an HTTP code of 422,

43
00:03:04.487 --> 00:03:09.259
which indicates that there was something
wrong with the data that was submitted.

44
00:03:12.499 --> 00:03:18.765
We'll pass the description back to the
page so that we can render it in the UI.

45
00:03:18.765 --> 00:03:23.501
We don't just pass all of the data that
the user submitted back automatically,

46
00:03:23.501 --> 00:03:26.682
because they could include
things like passwords and

47
00:03:26.682 --> 00:03:30.581
credit card data that we wanna be
careful about where we put that.

48
00:03:30.581 --> 00:03:35.329
And finally, the error property
of this fail object is gonna be

49
00:03:35.329 --> 00:03:39.821
the message that was thrown
from the Create todo function.

50
00:03:39.821 --> 00:03:43.487
You have a question from the internet?

51
00:03:43.487 --> 00:03:49.228
&gt;&gt; What's the difference between the fail
and error helpers from SveltKit?

52
00:03:49.228 --> 00:03:53.546
&gt;&gt; Yep, so we're gonna get into
the weeds of error handling later on.

53
00:03:53.546 --> 00:03:56.899
But essentially if you just throw
new error with some message,

54
00:03:56.899 --> 00:04:01.087
then SvelteKit is gonna throw his hands up
say, I don't know what to do with this.

55
00:04:01.087 --> 00:04:02.960
I'm just gonna render an error page and

56
00:04:02.960 --> 00:04:05.755
I'm gonna tell the user that
an internal error happened.

57
00:04:05.755 --> 00:04:11.626
If you throw an error that was created
with the error helper from SvelteKit,

58
00:04:11.626 --> 00:04:16.487
then SvelteKit is like, okay,
the user, the developer knows

59
00:04:16.487 --> 00:04:21.095
what they're doing,
this is an error that they expected.

60
00:04:21.095 --> 00:04:25.659
And so will actually display the message
of that error to the user instead of

61
00:04:25.659 --> 00:04:27.332
a generic internal error.

62
00:04:27.332 --> 00:04:31.590
When you're submitting form data,
this isn't an application error.

63
00:04:31.590 --> 00:04:34.131
If the data is wrong,
it's a validation error.

64
00:04:34.131 --> 00:04:38.540
And we wanna be able to distinguish
between errors that should result in

65
00:04:38.540 --> 00:04:43.241
the error page being shown and errors
that should be sent back to the user, so

66
00:04:43.241 --> 00:04:47.591
that it can be incorporated into
the UI without showing an error page.

67
00:04:47.591 --> 00:04:50.252
And that's where this
fail helper comes in.

68
00:04:50.252 --> 00:04:50.904
So an action can return data,
which is made available to the page.

69
00:04:50.904 --> 00:04:55.456
And by wrapping it in this fail function,

70
00:04:55.456 --> 00:05:02.876
we're telling SvelteKit that
the user submitted incorrect data.

71
00:05:02.876 --> 00:05:11.465
And that's useful for displaying the
correct status code and things like that.

72
00:05:17.078 --> 00:05:21.841
Okay, so in our page.svelte, we can
now access the data that was returned

73
00:05:21.841 --> 00:05:26.621
from the action via the form prop,
which sits alongside export let data.

74
00:05:26.621 --> 00:05:30.325
So let's create that export let form.

75
00:05:30.325 --> 00:05:33.827
And below the h1 we'll add an if block.

76
00:05:33.827 --> 00:05:38.797
If form?.error, the
question mark is there because if we're

77
00:05:38.797 --> 00:05:43.470
on this page and we haven't just
submitted some data form won't exist.

78
00:05:43.470 --> 00:05:47.437
But if the form object does exist and
it contains an error property,

79
00:05:47.437 --> 00:05:50.302
then we know that we need
to render some error UI.

80
00:05:50.302 --> 00:05:55.822
P class equals error and then we're

81
00:05:55.822 --> 00:06:02.824
just gonna display form.error to the user.

82
00:06:02.824 --> 00:06:07.454
And finally, we're gonna add the value
that was previously submitted in

83
00:06:07.454 --> 00:06:12.024
the description to the input so
that the user doesn't have to retype it.

84
00:06:16.476 --> 00:06:19.177
So if the form exists,
we'll grab the description.

85
00:06:19.177 --> 00:06:23.664
If it doesn't,
then we'll default to the empty string.

86
00:06:23.664 --> 00:06:28.862
Okay, so this time,
if we do the same thing, we try and

87
00:06:28.862 --> 00:06:33.158
submit a duplicate todo, Learn SvelteKit.

88
00:06:33.158 --> 00:06:34.579
Well, that's embarrassing.

89
00:06:34.579 --> 00:06:36.989
I must have missed a part here.

90
00:06:36.989 --> 00:06:38.487
I must have missed a bar here, I'm gonna
open the terminal, see what happened.

91
00:06:38.487 --> 00:06:41.441
Okay, data.get is not a function.

92
00:06:41.441 --> 00:06:43.031
So, there's an error in my code.

93
00:06:43.031 --> 00:06:47.382
We'll go to page.server.js and
see where that's happening.

94
00:06:47.382 --> 00:06:50.663
Is because you'll notice
up here this data object,

95
00:06:50.663 --> 00:06:55.672
I called await request form data, but
I forgot to add the parentheses somehow.

96
00:06:55.672 --> 00:06:56.371
So, I'll fix that.

97
00:07:00.792 --> 00:07:03.962
And now, when I add the duplicate todo,

98
00:07:09.365 --> 00:07:13.812
It's gonna display the error that was
thrown from the create todo function.

