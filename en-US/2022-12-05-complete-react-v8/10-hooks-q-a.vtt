WEBVTT

1
00:00:00.000 --> 00:00:03.836
If you're able to set the location,
how come you're declaring it with const?

2
00:00:03.836 --> 00:00:05.851
&gt;&gt; Const is it's a bit of a misnomer.

3
00:00:05.851 --> 00:00:09.137
If you're coming from
a background of Java,

4
00:00:09.137 --> 00:00:13.550
we expecting this to be totally immutable,
it's not that.

5
00:00:13.550 --> 00:00:19.483
It's basic,
I'm just declaring a variable here.

6
00:00:19.483 --> 00:00:23.563
It only gets created once at
the beginning of this function and

7
00:00:23.563 --> 00:00:25.681
it's not getting reassigned,

8
00:00:25.681 --> 00:00:30.788
it's only getting reassigned when
the entire function runs again, right?

9
00:00:30.788 --> 00:00:33.655
So within the scope,
it never gets reassigned.

10
00:00:33.655 --> 00:00:38.916
It's just within this function body that
it's declared and it's never reassigned.

11
00:00:38.916 --> 00:00:41.213
That's why const works here.

12
00:00:41.213 --> 00:00:45.482
If that's confusing to you, feel free,
by all means, call this let,

13
00:00:45.482 --> 00:00:47.561
there's zero harm in doing that.

14
00:00:50.178 --> 00:00:51.925
That's just up to you.

15
00:00:51.925 --> 00:00:53.802
So this is a hook, right?

16
00:00:53.802 --> 00:00:59.393
These things are called the hook, anytime
that you see use, that's a big warning or

17
00:00:59.393 --> 00:01:03.429
yeah, it's a sign in your head
you're working with a hook.

18
00:01:03.429 --> 00:01:07.412
By convention all hooks start with use.

19
00:01:07.412 --> 00:01:11.016
React invented this kind of idea.

20
00:01:11.016 --> 00:01:15.129
I think it's fair to say,
at least they made it popular in any case.

21
00:01:15.129 --> 00:01:19.530
And now, View uses it,
I think Svelte has some version of it,

22
00:01:19.530 --> 00:01:21.996
hooks have gotten quite popular.

23
00:01:21.996 --> 00:01:26.159
So, this is the default
that's given to the hook.

24
00:01:26.159 --> 00:01:30.790
But that's only for the first time it gets
run, every time after that it's ignored.

25
00:01:37.021 --> 00:01:40.173
This function is what
you call to update it.

26
00:01:40.173 --> 00:01:42.548
So that's when we're doing
it here on the onChange.

27
00:01:44.928 --> 00:01:47.762
I always use set for
mine and even in my notes,

28
00:01:47.762 --> 00:01:52.696
I used to use update, but now I've changed
that to set cuz most people use set.

29
00:01:52.696 --> 00:01:56.828
But that's just personal preference,
you don't have to call it that way.

30
00:01:56.828 --> 00:02:00.524
This destructuring probably looks
a little strange to people.

31
00:02:00.524 --> 00:02:02.499
It is a little strange to be frank.

32
00:02:02.499 --> 00:02:07.467
What is actually happening here, And

33
00:02:07.467 --> 00:02:11.622
I'll just write this out to
be a bit more explicit for

34
00:02:11.622 --> 00:02:14.182
you to see what that looks like.

35
00:02:14.182 --> 00:02:15.719
It gives you back an array.

36
00:02:17.472 --> 00:02:19.661
So that's what this location hook is.

37
00:02:21.428 --> 00:02:26.120
Okay, and then const location

38
00:02:26.120 --> 00:02:30.272
= locationHook(0) and

39
00:02:30.272 --> 00:02:37.140
const setLocation = locationHook(1).

40
00:02:37.140 --> 00:02:43.387
So these three lines are equivalent
to this one line here.

41
00:02:43.387 --> 00:02:47.430
This is just a shorthanded of way of
saying, I know this is gonna give me back

42
00:02:47.430 --> 00:02:50.253
an array,
give me back the first thing as location,

43
00:02:50.253 --> 00:02:52.771
give me back the second
thing is setLocation.

44
00:02:54.832 --> 00:02:56.928
Does that make sense?

45
00:02:56.928 --> 00:03:01.752
That's just the API they
decided to go with.

46
00:03:01.752 --> 00:03:06.494
It's frankly a little annoying if
you ask me because this can be kinda

47
00:03:06.494 --> 00:03:11.005
confusing to new students, but
here we are, that's what it is.

48
00:03:11.005 --> 00:03:14.295
You'll see that it's extremely
common with hooks to do it that way.

49
00:03:18.630 --> 00:03:22.327
Okay, you can make your own custom hooks.

50
00:03:22.327 --> 00:03:24.547
We will talk about that later, but

51
00:03:24.547 --> 00:03:28.617
all custom hooks are other hooks
bundled together as one hook.

52
00:03:28.617 --> 00:03:33.290
So eventually, all custom hooks that
you see, it's just calling a bunch of

53
00:03:33.290 --> 00:03:37.755
other hooks and they're bundling that
into one more usable hook to use.

54
00:03:37.755 --> 00:03:40.131
And again, we'll do that
a little bit later in the class.

55
00:03:42.772 --> 00:03:45.462
I'm showing you how to do
function components with hooks.

56
00:03:45.462 --> 00:03:47.762
Later we'll see how to
do class components,

57
00:03:47.762 --> 00:03:50.796
which is kind of the older way
of doing components in React.

58
00:03:50.796 --> 00:03:52.995
One more eslint rule here for you.

59
00:03:55.355 --> 00:04:00.747
I want you to npm install- D

60
00:04:00.747 --> 00:04:10.607
eslint-plugin-react-hooks at 4.6.0.

61
00:04:10.607 --> 00:04:15.078
This is an official eslin tool from the
React team to make sure that you use hooks

62
00:04:15.078 --> 00:04:15.903
in a good way.

63
00:04:20.562 --> 00:04:25.015
Okay, and then the only thing you need

64
00:04:25.015 --> 00:04:29.886
to do here is go back
into your eslintrc and

65
00:04:29.886 --> 00:04:37.838
just somewhere here to put
plugin:react-hooks/recommended.

66
00:04:40.963 --> 00:04:46.163
That's the only thing I added is right
there on line seven to my eslintrc.json.

67
00:04:46.163 --> 00:04:49.374
Doesn't matter what order as
long as prettier is last.

68
00:04:52.497 --> 00:05:00.338
Okay, and now just to show you what this
is going to help you with, npm run dev.

69
00:05:03.253 --> 00:05:07.788
If false or something like that,
I don't know something like that,

70
00:05:07.788 --> 00:05:12.495
it's gonna say, hey, you're putting
this inside of a conditional.

71
00:05:12.495 --> 00:05:16.598
This is a hook, don't put hooks inside of
conditionals, or don't put this in for

72
00:05:16.598 --> 00:05:18.387
loops or things like that, right?

73
00:05:18.387 --> 00:05:22.552
It catches kind of the weird gotches
that hooks have and it'll just warn you,

74
00:05:22.552 --> 00:05:24.875
you're using this a little incorrectly.

75
00:05:24.875 --> 00:05:29.758
It's mildly annoying sometimes
as eslint in general kind of is,

76
00:05:29.758 --> 00:05:33.503
but it's very helpful, so
I suggest you do that.

