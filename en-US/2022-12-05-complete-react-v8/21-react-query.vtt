WEBVTT

1
00:00:00.202 --> 00:00:06.120
We're gonna talk about React Query which
is new to version eight of this course.

2
00:00:06.120 --> 00:00:11.236
I kind of held off on doing it for
a while, I had been using it myself and

3
00:00:11.236 --> 00:00:15.032
my personal projects but
it felt kind of optional,

4
00:00:15.032 --> 00:00:19.887
not totally best case and
I think the react community has moved far

5
00:00:19.887 --> 00:00:24.592
enough along that react query
is not really optional anymore.

6
00:00:24.592 --> 00:00:28.551
Basically everybody uses it all the time.

7
00:00:28.551 --> 00:00:32.753
So you know that all that increment,
the rigmarole that we did in the use

8
00:00:32.753 --> 00:00:36.394
breed this to capture this use cash and
all this kind of stuff,

9
00:00:36.394 --> 00:00:41.016
where it makes request to an API and then
it caches it and if it's in the cache and

10
00:00:41.016 --> 00:00:45.325
it serves that if it's not react
courageous does all this stuff for you.

11
00:00:45.325 --> 00:00:50.182
It is just like, here's the key,
here's the URL, here's a refetch method,

12
00:00:50.182 --> 00:00:50.987
that's it.

13
00:00:50.987 --> 00:00:54.288
And then react query just
handles everything for you.

14
00:00:54.288 --> 00:00:57.674
So, that's what we're gonna use today.

15
00:00:57.674 --> 00:01:00.354
The cool thing about
React Query is it's now just,

16
00:01:00.354 --> 00:01:03.794
it's not just react now it works
in angular, it works in svelte.

17
00:01:03.794 --> 00:01:06.698
I think they're making it in solid,
they're doing a bunch of stuff now.

18
00:01:06.698 --> 00:01:11.579
So it now exists outside of just react,
which is pretty cool.

19
00:01:11.579 --> 00:01:14.948
And here is the secret for

20
00:01:14.948 --> 00:01:21.053
writing long term maintainable React code.

21
00:01:21.053 --> 00:01:24.873
The hardest part about React is useEffect.

22
00:01:24.873 --> 00:01:30.092
The most bugs you're gonna see
the most confusing thing about

23
00:01:30.092 --> 00:01:34.820
wrapping your head about when
does this effect happen?

24
00:01:34.820 --> 00:01:39.243
Does this cascade into other effects
which then cascade into other effects?

25
00:01:39.243 --> 00:01:47.087
It's the most cognitively burdensome
part of React useEffect, right?

26
00:01:47.087 --> 00:01:52.352
Like describing to a person is
like the full lifecycle of how

27
00:01:52.352 --> 00:01:59.849
breed gets populated is several sentences
with probably several caveats, right?

28
00:01:59.849 --> 00:02:04.970
The nice thing about React Query is it
you're gonna start removing effects from

29
00:02:04.970 --> 00:02:10.177
your database cuz it's basically going
to handle all your API requests for you.

30
00:02:12.336 --> 00:02:17.347
So, here's my very loose rule that
I would like to throw out to you.

31
00:02:17.347 --> 00:02:19.836
Minimize effects in your code.

32
00:02:19.836 --> 00:02:24.494
If there's a library that can
handle it for you, do that.

33
00:02:24.494 --> 00:02:30.490
Where you have effects, try and
contain them to small testable areas.

34
00:02:30.490 --> 00:02:35.022
This is the secret to a long
happy life with React.

35
00:02:35.022 --> 00:02:38.884
Okay, so I'm gonna show you how
to do that with your API request,

36
00:02:38.884 --> 00:02:41.777
which is 95% the use case for
effects anyway.

37
00:02:44.095 --> 00:02:48.062
So, I want you to npm i

38
00:02:48.062 --> 00:02:56.885
@tanstack/react-query@4.10.1.

39
00:03:01.128 --> 00:03:05.169
If you do npm instal just react-query,
you'll get version three,

40
00:03:05.169 --> 00:03:07.199
they've released version four.

41
00:03:07.199 --> 00:03:08.912
They now do it on this tanstack.

42
00:03:11.679 --> 00:03:15.941
Name space, okay?

43
00:03:15.941 --> 00:03:18.147
Start my server again.

44
00:03:18.147 --> 00:03:22.960
Okay, the first thing that we're
gonna have to do is an app.jsx.

45
00:03:22.960 --> 00:03:27.899
We have to instantiate the query provider.

46
00:03:27.899 --> 00:03:31.889
So up here please go and

47
00:03:31.889 --> 00:03:36.930
say import (QueryClient,

48
00:03:36.930 --> 00:03:42.181
QueryClientProvider) from

49
00:03:42.181 --> 00:03:48.068
'attanstack/react-query.

50
00:03:48.068 --> 00:03:54.206
Here we're going to create our client,
const queryClient.

51
00:03:54.206 --> 00:03:58.610
There is a thought process we could have
multiple query clients throughout your

52
00:03:58.610 --> 00:04:01.699
app, that maybe different
parts of your app need to make

53
00:04:01.699 --> 00:04:05.464
requests to the same place and
you don't want them to share a cache.

54
00:04:05.464 --> 00:04:09.109
I have no idea when I would ever
want that, but it is possible.

55
00:04:13.113 --> 00:04:17.763
It's one of those times that I just feel
like less flexibility is helpful here.

56
00:04:17.763 --> 00:04:21.234
But no one asked me.

57
00:04:21.234 --> 00:04:24.576
All right, so you're gonna say
queryClient=new QueryClient.

58
00:04:27.921 --> 00:04:32.526
We have to give it a Config,
defaultOptions,

59
00:04:32.526 --> 00:04:38.074
queries, and so
basically it's gonna ask us like hey,

60
00:04:38.074 --> 00:04:43.385
how long do you want me to
cache things for our pet API,

61
00:04:43.385 --> 00:04:48.721
and for our breeds lists,
and everything like that?

62
00:04:48.721 --> 00:04:52.912
I'm not anticipating the new pets
coming up for adoption every second.

63
00:04:52.912 --> 00:04:56.323
That is probably fine for
as long as the user is on a session.

64
00:04:56.323 --> 00:04:59.590
So the way that you say that is you
say that the cash time is infinity.

65
00:05:02.442 --> 00:05:06.511
Again, staleTime and cashTime is infinity.

66
00:05:06.511 --> 00:05:11.670
Now, if you wanted to like cache for
like 10 minutes, you could put that here.

67
00:05:11.670 --> 00:05:15.629
I can't remember it's in milliseconds,
right?

68
00:05:15.629 --> 00:05:20.354
So if I wanted 10 minutes I would do

69
00:05:20.354 --> 00:05:25.245
1000 *60, *10, right?

70
00:05:25.245 --> 00:05:29.504
This would cash it for 10 minutes,
but I don't want that.

71
00:05:29.504 --> 00:05:33.357
I'm telling you, it's like once you
fetch something, don't refetch it.

72
00:05:33.357 --> 00:05:34.829
It's what I'm saying here.

73
00:05:37.447 --> 00:05:40.998
Same thing with cashTime, staleTime,
both the same thing there.

74
00:05:40.998 --> 00:05:44.320
All right, so inside (BrowserRouter),

75
00:05:44.320 --> 00:05:48.371
please put this component
&lt;QueryClientProvider.

76
00:05:48.371 --> 00:05:52.922
This works the same way as our
BrowserRouter that it provides context

77
00:05:52.922 --> 00:05:56.147
whenever we're going to
do the use query later.

78
00:05:56.147 --> 00:06:02.346
And the client= queryClient, like that.

79
00:06:02.346 --> 00:06:06.147
Okay, and
then move your whole app inside of that.

80
00:06:11.056 --> 00:06:15.516
People will call things like
(BrowserRouter) and (QueryClientProvider),

81
00:06:15.516 --> 00:06:19.718
higher header components that they're
basically like wrapping components

82
00:06:19.718 --> 00:06:22.832
that they themselves don't
display anything, right?

83
00:06:22.832 --> 00:06:25.955
Just because I put this
(QueryClientProvider) around my

84
00:06:25.955 --> 00:06:28.834
application it's not displaying anything,
right?

85
00:06:28.834 --> 00:06:33.744
All it's doing is providing context
to components underneath it,

86
00:06:33.744 --> 00:06:35.904
that's the whole idea here.

87
00:06:35.904 --> 00:06:40.448
It's kind of an awkward API, but it's also
like maybe there's a part of my app that I

88
00:06:40.448 --> 00:06:44.687
don't want that context available to,
you can only wrap certain parts of it.

89
00:06:44.687 --> 00:06:45.912
There's ideas like that.

90
00:06:45.912 --> 00:06:48.918
Okay, so
now we have a QueryClient available to us.

91
00:06:48.918 --> 00:06:52.860
Let's go write a method for fetching pets.

92
00:06:52.860 --> 00:06:56.555
This is what it's going to call on
details.JSX, so that we can go and

93
00:06:56.555 --> 00:06:59.116
get the individual pet
that we're looking at.

94
00:06:59.116 --> 00:07:04.881
So please create a file
called FetchPet.js again,

95
00:07:04.881 --> 00:07:09.859
you can call it jsx this
is gonna to be no JSX and

96
00:07:09.859 --> 00:07:14.313
here is just gonna be a method of fetching

97
00:07:14.313 --> 00:07:19.041
const Fetchpet=an async (QueryKey).

98
00:07:19.041 --> 00:07:23.603
And then const id =queryKey(1).

99
00:07:23.603 --> 00:07:29.433
We'll see where that comes from in just
a second, but just believe me for a second

100
00:07:29.433 --> 00:07:34.607
that this is an array and the second
the one element is going to be the id.

101
00:07:37.133 --> 00:07:43.913
Const apiRes = await fetch

102
00:07:43.913 --> 00:07:53.913
(http://petsv2.dev-apis.com/pets?=(id).

103
00:07:59.550 --> 00:08:02.656
That's gonna go fetch your pet for us.

104
00:08:02.656 --> 00:08:08.877
Then this is a thing
peculiar to React Query.

105
00:08:08.877 --> 00:08:13.042
If it's an unsuccessful request,
they want you to throw an error.

106
00:08:13.042 --> 00:08:16.473
Fetch will not always throw
an error if you get like 500.

107
00:08:16.473 --> 00:08:18.753
If it's a 500, we wanna throw an error.

108
00:08:18.753 --> 00:08:23.042
So you're gonna say, hey,

109
00:08:23.042 --> 00:08:29.300
if apiaraes.okay then throw new error,

110
00:08:29.300 --> 00:08:36.469
and just give yourself
a useful error message.

111
00:08:36.469 --> 00:08:41.336
So the one that I put here as

112
00:08:41.336 --> 00:08:48.429
(details/s(id) fetch not ok).

113
00:08:48.429 --> 00:08:53.077
This is purely for debugging purposes, so
just give yourself a useful error there.

114
00:08:53.077 --> 00:08:56.917
This is useful because then
React Query's gonna catch this and

115
00:08:56.917 --> 00:08:59.747
it's gonna know like
this doesn't work and.

116
00:08:59.747 --> 00:09:04.280
You can now do like an on error and
a bunch of stuff like that.

117
00:09:04.280 --> 00:09:07.394
This is something if you're
gonna use React query,

118
00:09:07.394 --> 00:09:11.018
just get used to,
you'll put this in basically every time.

119
00:09:11.018 --> 00:09:18.073
Okay, and then React Query expects
you to return a promise, right?

120
00:09:18.073 --> 00:09:22.469
If you remember async functions always
return promises, so we're good so far.

121
00:09:22.469 --> 00:09:26.825
So we don't have to await the Res.json,

122
00:09:26.825 --> 00:09:30.813
we can just return the apiRes.json.

123
00:09:30.813 --> 00:09:32.364
Because what is this return?

124
00:09:32.364 --> 00:09:37.375
This return is a, it's a promise, right?

125
00:09:37.375 --> 00:09:38.885
You can see right there, it's a promise.

126
00:09:38.885 --> 00:09:41.573
What happens if I didn't return await?

127
00:09:41.573 --> 00:09:45.808
It'll work just fine but
technically we don't have to await here so

128
00:09:45.808 --> 00:09:50.117
you'd actually miss a tick if
the word tick doesn't mean anything,

129
00:09:50.117 --> 00:09:52.891
it's a no term don't
worry about it [LAUGH].

130
00:09:52.891 --> 00:09:57.477
But you'd basically
unnecessarily introduce like

131
00:09:57.477 --> 00:10:02.479
a millisecond of latency in
there Just a common thing that

132
00:10:02.479 --> 00:10:07.166
I see when people are writing React query,
okay, and

133
00:10:07.166 --> 00:10:12.294
then down here we're gonna
say export default fetchPet.

134
00:10:12.294 --> 00:10:13.803
Looks like I have an error here.

135
00:10:13.803 --> 00:10:15.065
I do.

136
00:10:15.065 --> 00:10:17.836
That should be there.

137
00:10:17.836 --> 00:10:21.129
Yeah, there we go.

138
00:10:21.129 --> 00:10:25.923
I had the backtick in the wrong place here
this is now a fetch method that is ready

139
00:10:25.923 --> 00:10:27.677
to be used with React Query.

