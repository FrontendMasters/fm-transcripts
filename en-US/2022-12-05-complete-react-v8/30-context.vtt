WEBVTT

1
00:00:00.000 --> 00:00:04.590
So context.

2
00:00:04.590 --> 00:00:07.546
Right now we've been looking
a lot of very local state, right?

3
00:00:07.546 --> 00:00:11.011
An example of local state here
would be do I show the modal?

4
00:00:11.011 --> 00:00:12.662
Do I not show the modal?

5
00:00:12.662 --> 00:00:17.840
That's really only important
to the details page.

6
00:00:17.840 --> 00:00:22.186
Or in other words,
if I'm on the SearchParams page,

7
00:00:22.186 --> 00:00:27.015
I don't need to have this show
modal available anywhere but

8
00:00:27.015 --> 00:00:29.827
being inside of details, right?

9
00:00:29.827 --> 00:00:34.649
So local state apps or
UI state would be another term for that.

10
00:00:34.649 --> 00:00:39.128
But sometimes we have things that
like is global app level state.

11
00:00:39.128 --> 00:00:44.530
And the easiest example is that if I
had a user that was logged in, right?

12
00:00:44.530 --> 00:00:48.276
Every page cares about which
user is logged in, and

13
00:00:48.276 --> 00:00:50.547
that would be app level state.

14
00:00:50.547 --> 00:00:52.279
So, there's a bunch of
ways you can handle that.

15
00:00:52.279 --> 00:00:58.569
You do not have to use context, or
Redux, or MobX, or any of those things.

16
00:00:58.569 --> 00:01:03.859
I literally could just go to App.jsx and

17
00:01:03.859 --> 00:01:07.904
I could just say const [user,

18
00:01:07.904 --> 00:01:12.426
set user] = useState(null).

19
00:01:12.426 --> 00:01:16.903
And then whenever a user logs in,
I would just track that under here, right?

20
00:01:16.903 --> 00:01:19.918
And then I would just
pass it in from here.

21
00:01:19.918 --> 00:01:27.022
So I'd say user={user} and
user={user}, boom.

22
00:01:27.022 --> 00:01:30.211
Now suddenly everyone has access
to the user all the time.

23
00:01:30.211 --> 00:01:32.032
Awesome, done, right?

24
00:01:32.032 --> 00:01:37.233
And if my app was this big, very valid
that I would do it this way, right?

25
00:01:37.233 --> 00:01:43.218
But now imagine I have 40 different pages
and 39 of them care about what user it is.

26
00:01:43.218 --> 00:01:44.554
The other one is the about page.

27
00:01:44.554 --> 00:01:46.740
Maybe the about page cares, I don't know.

28
00:01:46.740 --> 00:01:49.714
Maybe you have a really
cool customized about page,

29
00:01:49.714 --> 00:01:53.107
in which case you probably have
too much time on your hands.

30
00:01:53.107 --> 00:01:55.253
That's my opinion.

31
00:01:55.253 --> 00:01:59.888
Anyway, context, this is where context
becomes extremely useful to you, right?

32
00:01:59.888 --> 00:02:04.747
Context is going to be this app level,
generalized state.

33
00:02:04.747 --> 00:02:07.529
Now, this is literally the last
lesson in the intro to React.

34
00:02:07.529 --> 00:02:11.838
I intentionally put this last because
I really don't know want you to

35
00:02:11.838 --> 00:02:14.674
heavily handedly apply this to everything.

36
00:02:14.674 --> 00:02:17.988
Because that's kind of the temptation,
it's like, I have state,

37
00:02:17.988 --> 00:02:19.921
let's make state available everywhere.

38
00:02:19.921 --> 00:02:21.438
Bad idea.

39
00:02:21.438 --> 00:02:24.585
You really wanna be judicious
of where state goes.

40
00:02:24.585 --> 00:02:30.897
And one of the benefits of React is how
explicit data flows in your app, right?

41
00:02:30.897 --> 00:02:36.462
If I have information that's in details I
wanna be able to find where it came from,

42
00:02:36.462 --> 00:02:37.036
right?

43
00:02:37.036 --> 00:02:40.841
And kind of trace
everything where that goes.

44
00:02:40.841 --> 00:02:45.910
As soon as you start introducing context
into your app, you get this indirection.

45
00:02:45.910 --> 00:02:48.739
You have state that comes
from somewhere that

46
00:02:48.739 --> 00:02:51.721
it's kind of hard to
follow where it came from.

47
00:02:51.721 --> 00:02:55.117
So you're getting this
general availability of it,

48
00:02:55.117 --> 00:02:56.857
which makes it easy to use.

49
00:02:56.857 --> 00:03:01.457
But what you're trading off on is
that it becomes difficult to find

50
00:03:01.457 --> 00:03:06.236
where it came from, and how it was
modified, and where the bugs are.

51
00:03:06.236 --> 00:03:10.006
So in other words,
context is a very specific tool,

52
00:03:10.006 --> 00:03:13.274
I need you to have
a specific reason to use it.

53
00:03:13.274 --> 00:03:17.641
So something like a user worthy,
literally every page cares about it and

54
00:03:17.641 --> 00:03:20.155
passing it around becomes impractical.

55
00:03:20.155 --> 00:03:24.490
That is a valid use case for context,
you should use context in there.

56
00:03:24.490 --> 00:03:28.997
But I don't know, if you have two
pages that care about the theme,

57
00:03:28.997 --> 00:03:32.152
I don't know, something like that, right?

58
00:03:32.152 --> 00:03:36.210
Just pass it around like normal state
with using props and children and

59
00:03:36.210 --> 00:03:37.734
stuff like that, right?

60
00:03:37.734 --> 00:03:40.345
So that's my pitch to you.

61
00:03:40.345 --> 00:03:44.681
And I'm gonna show you how to do it, and
I'm gonna ask you to be judicious of how

62
00:03:44.681 --> 00:03:48.780
you apply it, because I might be your
future coworker and I will be upset.

63
00:03:48.780 --> 00:03:53.842
Okay, so basically what I
wanna do is I wanna have like,

64
00:03:53.842 --> 00:03:57.179
if I click here on Luna, I click Yes,

65
00:03:57.179 --> 00:04:02.918
I wanna be able to show that to
users on my Adopt Me page, right?

66
00:04:02.918 --> 00:04:06.601
I wanna show them a little picture
here of the pet I'm about to adopt.

67
00:04:06.601 --> 00:04:08.783
That's the context that
we're gonna use here.

68
00:04:11.138 --> 00:04:17.680
So first things, pop over and
make a file called AdoptedPetContext.

69
00:04:20.305 --> 00:04:23.193
And this can be .js, .jsx.

70
00:04:23.193 --> 00:04:26.978
Because we're not gonna major in jsx,
I'm just gonna do .js.

71
00:04:26.978 --> 00:04:30.667
I'm going to import

72
00:04:30.667 --> 00:04:37.611
(createContext) from 'react',

73
00:04:37.611 --> 00:04:46.074
const AdoptedPetContext = createContext,

74
00:04:46.074 --> 00:04:53.024
export default AdoptedPetContext.

75
00:04:55.892 --> 00:05:00.408
So you can come in here and
give it a default value.

76
00:05:00.408 --> 00:05:02.785
But typically you don't
wanna have default context.

77
00:05:02.785 --> 00:05:04.957
But if you did,
this is where you would do it, right?

78
00:05:04.957 --> 00:05:08.152
Maybe you have an array of a cart, right?

79
00:05:08.152 --> 00:05:09.652
Like an array of items.

80
00:05:09.652 --> 00:05:14.879
By all means putting an empty
array there that makes some sense.

81
00:05:14.879 --> 00:05:17.051
And we'll have to do this with TypeScript.

82
00:05:17.051 --> 00:05:21.088
TypeScript is going to make
you have a default value,

83
00:05:21.088 --> 00:05:23.880
but for now, we're not gonna do it.

84
00:05:23.880 --> 00:05:27.104
I'll show you in a second, but basically,

85
00:05:27.104 --> 00:05:33.205
you'll never have a default value for
your context or you shouldn't.

86
00:05:33.205 --> 00:05:39.726
Okay, so let's go to App.jsx and
make use of it.

87
00:05:39.726 --> 00:05:43.177
You've already been using context because
you've been using BrowserRouter and

88
00:05:43.177 --> 00:05:44.436
QueryClientProvider here.

89
00:05:44.436 --> 00:05:47.523
These are both using context
under the hood, just so you know.

90
00:05:47.523 --> 00:05:52.047
That's the entire purpose of these
things is to provide context to

91
00:05:52.047 --> 00:05:53.833
things underneath them.

92
00:05:55.890 --> 00:06:00.458
Okay, up here I want you to import state,
or

93
00:06:00.458 --> 00:06:03.549
rather useState from react.

94
00:06:07.728 --> 00:06:12.588
And then somewhere under
here you're going to import

95
00:06:12.588 --> 00:06:17.565
AdoptedPetContext from AdoptedPetContext,
okay?

96
00:06:17.565 --> 00:06:22.281
Up here we're gonna say const

97
00:06:22.281 --> 00:06:28.135
adoptedPet = usesState(null).

98
00:06:35.349 --> 00:06:36.610
Okay?

99
00:06:36.610 --> 00:06:41.186
And then somewhere in here we'll just
do it under the QueryClientProvider.

100
00:06:41.186 --> 00:06:47.207
We're gonna have
AdaptedPetContext.Provider and

101
00:06:47.207 --> 00:06:52.295
the value is going to
be equal to adoptedPet.

102
00:06:55.861 --> 00:06:59.840
Okay?
And then just wrap everything inside of

103
00:06:59.840 --> 00:07:02.830
that with that, and there we go.

104
00:07:06.048 --> 00:07:12.304
What this is doing,
is it's now making this adoptedPet

105
00:07:12.304 --> 00:07:19.370
available to any consumer of
AdoptedPetContext inside of it.

106
00:07:19.370 --> 00:07:23.048
So now details has it available,
SearchParams has it available, and

107
00:07:23.048 --> 00:07:25.306
they can both use them whenever they want.

108
00:07:28.030 --> 00:07:31.663
Hopefully you're seeing there's
some indirection to this, right?

109
00:07:31.663 --> 00:07:36.319
I now have this adoptedPet, which is going
into details and going into SearchParams.

110
00:07:36.319 --> 00:07:40.324
But the data flow here is
no longer explicit, right?

111
00:07:40.324 --> 00:07:45.432
Explicit would be saying
adoptedPet = adoptedPet, right?

112
00:07:45.432 --> 00:07:46.729
But we're not doing that anymore.

113
00:07:51.941 --> 00:07:56.670
Okay, you notice we're just
passing the whole hook here.

114
00:07:56.670 --> 00:08:00.255
We're using a hook together with context,
you don't have to.

115
00:08:00.255 --> 00:08:06.763
You can basically think of this provider
on context as a wormhole, right?

116
00:08:06.763 --> 00:08:09.523
So I can dump stuff out of it and
then later I can go to another part of my

117
00:08:09.523 --> 00:08:11.327
app and
I can pull stuff out of the wormhole.

118
00:08:11.327 --> 00:08:16.496
And what happens in the middle
is anyone's guess, right?

119
00:08:16.496 --> 00:08:19.054
So I'm putting a hook into this, but

120
00:08:19.054 --> 00:08:23.608
it could be an object, it could be
a number, it could be a string.

121
00:08:23.608 --> 00:08:26.039
It doesn't care what
type is going into it.

122
00:08:26.039 --> 00:08:29.778
It's a method of transportation and
that's it.

