WEBVTT

1
00:00:00.000 --> 00:00:02.964
So we just did,

2
00:00:02.964 --> 00:00:07.753
that was react-query.

3
00:00:07.753 --> 00:00:13.306
We have one more place where we're doing
an effect, that is on SearchParams.jsx.

4
00:00:13.306 --> 00:00:16.129
I think we all agree now that
useEffect is the worst and

5
00:00:16.129 --> 00:00:17.897
we never wanna use it ever again.

6
00:00:17.897 --> 00:00:21.167
Yeah, we get on this front, cool.

7
00:00:21.167 --> 00:00:24.104
But we still have it here.

8
00:00:24.104 --> 00:00:28.945
We can get rid of it and we can also do
a second thing which I wanted to teach

9
00:00:28.945 --> 00:00:32.603
you anyway,
which is how to do an uncontrolled form.

10
00:00:32.603 --> 00:00:38.160
So here we have location and animal.

11
00:00:38.160 --> 00:00:43.395
So location, animal, we're using
useState to track them individually.

12
00:00:43.395 --> 00:00:47.265
We're not doing anything with location and
animal,

13
00:00:47.265 --> 00:00:52.695
other than just sending it to the API
whenever we call request pet, right?

14
00:00:52.695 --> 00:00:56.568
It would be awesome if we
didn't have to do that,

15
00:00:56.568 --> 00:01:00.165
we could just let
the browser take care of it.

16
00:01:00.165 --> 00:01:04.059
And then we could just pull it out of the
browser whenever we had a submit event,

17
00:01:04.059 --> 00:01:04.830
which you can.

18
00:01:04.830 --> 00:01:06.425
So let's go ahead and do that.

19
00:01:08.379 --> 00:01:14.040
So first of all, we reached
the milestone of 09-react-query.

20
00:01:14.040 --> 00:01:16.810
So if you're lost,
you can hop over to that one.

21
00:01:16.810 --> 00:01:20.457
And then we're gonna do
uncontrolled forms right now.

22
00:01:20.457 --> 00:01:24.949
So first thing first, let's go and

23
00:01:24.949 --> 00:01:28.552
make our fetchSearch.js.

24
00:01:28.552 --> 00:01:33.335
And this is gonna be an async function

25
00:01:33.335 --> 00:01:37.662
fetchSearch with the query key.

26
00:01:43.697 --> 00:01:49.050
And then we're gonna have const (animal,

27
00:01:49.050 --> 00:01:53.542
location, breed) = querykey1.

28
00:01:53.542 --> 00:01:56.835
So there was a previous question about
what happens if I have multiple things

29
00:01:56.835 --> 00:01:57.766
that I'm tracking?

30
00:01:57.766 --> 00:02:02.025
You can do something like this where you
give it, instead of a individual string,

31
00:02:02.025 --> 00:02:03.830
you can give it an object, right?

32
00:02:03.830 --> 00:02:07.034
So our querykey here
is gonna be an object,

33
00:02:07.034 --> 00:02:11.396
React Query is totally fine
dealing with objects as well.

34
00:02:11.396 --> 00:02:18.963
Okay, and then const res = await fetch,

35
00:02:18.963 --> 00:02:28.272
http://pets-v2-dev-apis.com/pets.

36
00:02:28.272 --> 00:02:30.875
Animal =,

37
00:02:33.620 --> 00:02:39.783
Animal and,

38
00:02:39.783 --> 00:02:45.521
Location = location.

39
00:02:45.521 --> 00:02:51.083
And breed = breed.

40
00:02:51.083 --> 00:02:54.563
Same request that we're making in our
useEffect, we're just gonna do it here.

41
00:02:57.132 --> 00:03:05.824
If res is not okay, Then throw new Error,

42
00:03:05.824 --> 00:03:09.829
pet search not okay.

43
00:03:13.957 --> 00:03:22.805
Animal, location.

44
00:03:22.805 --> 00:03:24.486
Just try and make a useful error message.

45
00:03:24.486 --> 00:03:26.938
That's what I try and do.

46
00:03:26.938 --> 00:03:34.606
Okay, otherwise,
you're just gonna return res.json and

47
00:03:34.606 --> 00:03:39.125
export, default, fetchSearch.

48
00:03:39.125 --> 00:03:39.818
And there you go.

49
00:03:39.818 --> 00:03:42.059
That is our fetchSearch function.

50
00:03:42.059 --> 00:03:48.483
And now we have a few things
to do to searchParams.jsx.

51
00:03:51.295 --> 00:03:57.553
So at the top here,
remove useEffect from React.

52
00:03:57.553 --> 00:04:02.894
We're going to import useQuery

53
00:04:02.894 --> 00:04:08.046
from tanstack react-query.

54
00:04:08.046 --> 00:04:15.910
And we're going to import
fetchSearch from fetchSearch.

55
00:04:15.910 --> 00:04:19.643
Total side note, but obviously my

56
00:04:19.643 --> 00:04:24.415
organization of code
here is messy at best.

57
00:04:24.415 --> 00:04:27.005
This is not a course in
how to organize your code.

58
00:04:27.005 --> 00:04:31.278
Typically, what I would do here is I'd
have all my fetches probably in a folder.

59
00:04:31.278 --> 00:04:34.259
I'd have components in a folder.

60
00:04:34.259 --> 00:04:37.777
I don't know, there's a million
ways to organize React components.

61
00:04:37.777 --> 00:04:39.964
There's also a school of thought of like,

62
00:04:39.964 --> 00:04:43.731
I'll have details in a folder with
the component and all of its fetches and

63
00:04:43.731 --> 00:04:47.799
all of its styles, and all of its tests,
and it's all contained in one folder,

64
00:04:47.799 --> 00:04:50.156
that's another really
good way of doing it.

65
00:04:50.156 --> 00:04:53.512
It's probably even better, if I'm being
honest, a bunch of ways to do it.

66
00:04:53.512 --> 00:04:59.930
Suffice to say, do not take this as
a course on how to organize your code.

67
00:04:59.930 --> 00:05:03.853
Okay, so we've done that
inside the render at the top,

68
00:05:03.853 --> 00:05:07.032
delete location and breed, you stay calls.

69
00:05:07.032 --> 00:05:11.714
So we're gonna get rid of breed and
location here.

70
00:05:11.714 --> 00:05:14.689
We're gonna do this as
an uncontrolled form, right?

71
00:05:14.689 --> 00:05:19.814
We still need to keep track of animal
because animal feeds into breed list.

72
00:05:19.814 --> 00:05:21.467
That one has to be controlled, right?

73
00:05:21.467 --> 00:05:24.780
So you can even do these in
kind of a hybrid fashion.

74
00:05:24.780 --> 00:05:28.366
Well, it'll make more sense as we go.

75
00:05:28.366 --> 00:05:34.520
Okay, we're gonna have
a requestParams function.

76
00:05:34.520 --> 00:05:38.471
So const requestParams, and

77
00:05:38.471 --> 00:05:43.527
we're just gonna keep track of that as

78
00:05:43.527 --> 00:05:51.600
one top level setRequestParams
piece of state, useState.

79
00:05:51.600 --> 00:05:56.242
And the default state for
that is gonna be an object,

80
00:05:56.242 --> 00:06:03.644
with location of being nothing, animal
being nothing, and breed being nothing.

81
00:06:03.644 --> 00:06:08.923
So we have to do it this way, and I guess
we'll get into this in just a second.

82
00:06:08.923 --> 00:06:14.057
But we don't want it to research
every single time that a user clicks,

83
00:06:14.057 --> 00:06:19.727
types into location or every time that
they type into or change their animal.

84
00:06:19.727 --> 00:06:21.974
We wanna wait until they click Submit.

85
00:06:21.974 --> 00:06:25.468
So we're gonna wait until they click
Submit, till we set this requestParams.

86
00:06:25.468 --> 00:06:27.479
So that'll make sense in a second.

87
00:06:30.393 --> 00:06:34.713
Okay, we're gonna get rid of
requestPets and the useEffects,

88
00:06:34.713 --> 00:06:36.800
just go and delete all of that.

89
00:06:36.800 --> 00:06:41.147
I'm gonna say const results = useQuery,

90
00:06:45.561 --> 00:06:51.126
("search"), and
we're gonna give it requestParams.

91
00:06:51.126 --> 00:06:55.990
And then we're gonna give it
fetchSearch to do what it

92
00:06:55.990 --> 00:07:00.434
needs to refetch and
then const pets = results.

93
00:07:03.145 --> 00:07:08.446
Data, pets, or empty array.

94
00:07:11.259 --> 00:07:14.363
We already had the no pets
shown kind of thing, so

95
00:07:14.363 --> 00:07:18.011
we don't have to do too much for
the loading screen here.

96
00:07:22.090 --> 00:07:28.564
Okay, so now we're not
tracking location and animal.

97
00:07:28.564 --> 00:07:32.853
So you can actually even go and
you can get rid of the value=[location],

98
00:07:32.853 --> 00:07:34.978
you can get rid of the onChange here.

99
00:07:34.978 --> 00:07:37.820
You do have to go put a name on this.

100
00:07:37.820 --> 00:07:40.179
Yeah, you do.

101
00:07:40.179 --> 00:07:45.397
Yeah, name = anim or location.

102
00:07:45.397 --> 00:07:47.728
The reason for
this is this is how forms work.

103
00:07:47.728 --> 00:07:50.841
It's not about React thing.

104
00:07:50.841 --> 00:07:57.460
So get rid of the value here.

105
00:07:57.460 --> 00:07:58.857
Actually, no, you do have to do that one.

106
00:07:58.857 --> 00:08:01.822
Keep that one, that's fine, but

107
00:08:01.822 --> 00:08:06.862
I'm breed Get rid of
value = breed here and

108
00:08:06.862 --> 00:08:12.130
make this name = "breed", and
then get rid of the onChange.

109
00:08:15.710 --> 00:08:19.190
Okay, that's all good.

110
00:08:19.190 --> 00:08:23.157
That's all good.

111
00:08:23.157 --> 00:08:28.116
Now we need to go modify our submitEvent.

112
00:08:29.826 --> 00:08:35.805
So here, preventDefault, we want that.

113
00:08:35.805 --> 00:08:39.658
Our object that we're going
to set here is gonna be this,

114
00:08:39.658 --> 00:08:45.060
is gonna be animal: formData, no,
we have to create the formData first.

115
00:08:45.060 --> 00:08:48.228
So hold on.

116
00:08:48.228 --> 00:08:56.311
Yeah, formData = new
formData with e.target.

117
00:08:56.311 --> 00:09:01.581
This is a browser API,
it's not a React thing.

118
00:09:01.581 --> 00:09:06.312
You can feed it a form and it'll pull
out all of the data on the form for

119
00:09:06.312 --> 00:09:07.725
you into an object.

120
00:09:10.827 --> 00:09:18.303
Const obj = animal:
formData.get("animal"),

121
00:09:18.303 --> 00:09:21.960
and if it's not anything,

122
00:09:21.960 --> 00:09:26.261
then just make an empty string.

123
00:09:26.261 --> 00:09:30.903
And we're gonna do the same thing for

124
00:09:30.903 --> 00:09:35.859
breed and the same thing for location.

125
00:09:35.859 --> 00:09:39.972
So animal animal, breed breed,
location location.

126
00:09:42.415 --> 00:09:46.069
Now we're gonna have an obj which is
gonna have the animal, the breed, and

127
00:09:46.069 --> 00:09:49.443
the location, which is gonna be
the current state of the form, yes.

128
00:09:49.443 --> 00:09:56.659
And then here, we're just gonna say,
setRequestParams to be obj.

129
00:09:56.659 --> 00:09:59.202
Yeah, and you can drop this pets,
you stayed up here as well..

130
00:10:08.319 --> 00:10:12.596
Do I still have errors?

131
00:10:12.596 --> 00:10:14.572
Yeah, and,

132
00:10:20.994 --> 00:10:22.732
Don't need to do this anymore.

133
00:10:27.442 --> 00:10:36.909
Okay, All

134
00:10:36.909 --> 00:10:39.701
right, make sure I'm not.

135
00:10:39.701 --> 00:10:42.870
It's telling you sweet lies.

136
00:10:42.870 --> 00:10:45.324
Let's put dog, Havanese, and click Submit.

137
00:10:50.725 --> 00:10:52.454
French Bulldog.

138
00:10:54.128 --> 00:10:57.144
Now, what's cool about this, if I hit
Submit, notice how fast this is gonna be,

139
00:10:57.144 --> 00:10:58.081
it's instant, right?

140
00:10:58.081 --> 00:10:59.986
Cuz there's no waiting anymore, right?

141
00:10:59.986 --> 00:11:03.300
Because it's cached that request
because it's seen it before.

142
00:11:11.448 --> 00:11:15.131
So one notice that we do not
have any more location and

143
00:11:15.131 --> 00:11:20.502
breed being tracked by React,
that's the uncontrolled form part of this.

144
00:11:20.502 --> 00:11:21.940
It's much more common.

145
00:11:21.940 --> 00:11:22.998
And I'll say more common.

146
00:11:22.998 --> 00:11:25.052
It's just a better idea to do it this way,

147
00:11:25.052 --> 00:11:28.823
unless you have some sort of data
dependency like we do with animal, right?

148
00:11:28.823 --> 00:11:31.535
Animal, we do have to feed
into this breed list.

149
00:11:31.535 --> 00:11:36.547
So it's important that as
a tract controlled React input.

150
00:11:39.230 --> 00:11:43.231
And then here, we're just using
the formData to make this request object,

151
00:11:43.231 --> 00:11:44.618
which we're using here.

152
00:11:44.618 --> 00:11:51.585
And then notice that we're just feeding
this request object into here, right?

153
00:11:51.585 --> 00:11:56.408
It's critical that this doesn't change
until we anticipate it to research, right?

154
00:11:56.408 --> 00:12:00.325
It's why we didn't just feed
location directly into useQuery,

155
00:12:00.325 --> 00:12:04.395
because every time you were typing it,
it would research, right?

156
00:12:04.395 --> 00:12:09.279
Because it would change the cache key.

157
00:12:09.279 --> 00:12:12.807
So that's why it's important that
we do this little bit of song and

158
00:12:12.807 --> 00:12:16.469
dance to use this piece of state here and
be careful to only update it.

159
00:12:16.469 --> 00:12:19.699
We wanted to research, right?

160
00:12:19.699 --> 00:12:20.758
Does that makes sense?

161
00:12:23.400 --> 00:12:25.246
Notice what I'm doing is loading thing,

162
00:12:25.246 --> 00:12:27.311
you could totally have
some nice loader here.

163
00:12:27.311 --> 00:12:32.067
Here, we're just relying on the fact that
if we provide an empty array into Results,

164
00:12:32.067 --> 00:12:35.318
it's just gonna show that no
pets are available, right?

165
00:12:35.318 --> 00:12:38.457
There's a better way to do that,
but for now, you know how to,

166
00:12:38.457 --> 00:12:40.067
you can go do it on your own time.

167
00:12:40.067 --> 00:12:42.179
Might be something cool for
you to do afterwards.

168
00:12:47.652 --> 00:12:54.127
We now have no useEffect in our code,
which is pretty cool, I think, right?

169
00:12:54.127 --> 00:12:58.806
This reads really well here of,
we now have this query,

170
00:12:58.806 --> 00:13:05.596
it goes out to our search API and it has
a nice caching mechanism, it has back off.

171
00:13:05.596 --> 00:13:08.536
It has error handling and has a bunch
of stuff that we didn't have to code

172
00:13:08.536 --> 00:13:10.305
ourselves, which I think is really cool.

173
00:13:15.438 --> 00:13:17.387
Questions about any of this?

174
00:13:20.649 --> 00:13:22.037
What do you think?

175
00:13:22.037 --> 00:13:23.100
UseQuery, yes or no?

176
00:13:23.100 --> 00:13:25.779
Do you like it?

177
00:13:25.779 --> 00:13:29.774
&gt;&gt; It's a lot of code.

178
00:13:29.774 --> 00:13:33.937
&gt;&gt; You think that useQuery is dirtier?

179
00:13:33.937 --> 00:13:37.341
I disagree,
I wanna hear why you think it's dirtier.

180
00:13:37.341 --> 00:13:39.255
&gt;&gt; Just the amount of
code that you replaced,

181
00:13:39.255 --> 00:13:41.071
that you ripped out when you took it out.

182
00:13:45.000 --> 00:13:50.173
&gt;&gt; So, okay, it's a valid point,
I wanna think about

183
00:13:50.173 --> 00:13:55.718
it a little bit further cuz I
would say we have less code.

184
00:13:59.640 --> 00:14:07.572
So fetchSearch, basically this is roughly
equivalent to a request pet pause, right?

185
00:14:07.572 --> 00:14:11.364
Back here in searchParams,

186
00:14:11.364 --> 00:14:16.736
we had to do more for the onSubmit event.

187
00:14:16.736 --> 00:14:20.753
That is an expanded amount of code for
sure,

188
00:14:20.753 --> 00:14:25.326
but we got rid of all
the useEffect which was here.

189
00:14:25.326 --> 00:14:29.981
And then we gotta get rid of
a bunch of handling of requests.

190
00:14:29.981 --> 00:14:35.353
That's kind of separate, but-
&gt;&gt; Cuz you no longer

191
00:14:35.353 --> 00:14:43.651
have tracking status at all,
Since we ripped out useEffect.

192
00:14:43.651 --> 00:14:48.315
&gt;&gt; Yeah, and we don't have to track like,
when for it to recall that API.

193
00:14:48.315 --> 00:14:52.451
It basically just handles itself
based on these request keys.

194
00:14:54.329 --> 00:14:55.532
I'll say in this case,

195
00:14:55.532 --> 00:14:59.515
we had refactored enough that it's
roughly probably the same amount of code.

196
00:14:59.515 --> 00:15:02.794
The question for you,
is it more obvious for

197
00:15:02.794 --> 00:15:07.768
you with useQuery where that data
is coming from or the useEffect?

198
00:15:07.768 --> 00:15:14.030
Here, I would accept that it's roughly
equivalent in terms of clarity.

199
00:15:14.030 --> 00:15:18.310
I'll say that it's more robust this
way because we get all the React query

200
00:15:18.310 --> 00:15:20.257
goodness that's baked into it.

201
00:15:20.257 --> 00:15:24.961
But I think in the fetchBreed
list instance, or

202
00:15:24.961 --> 00:15:29.673
even the Details one,
this is very clean to me,

203
00:15:31.131 --> 00:15:35.738
Right, as opposed to how this
would be done with useEffect.

204
00:15:39.505 --> 00:15:44.954
This is basically one line of where
all the information's coming from.

205
00:15:44.954 --> 00:15:46.763
Whereas with useEffect,

206
00:15:46.763 --> 00:15:51.539
you'd have to have the entire
fetchPet business inside of Details.

207
00:15:55.289 --> 00:15:57.612
But I mean, if you're not into it,
you're not into it.

208
00:15:57.612 --> 00:15:59.035
That's totally fine.

209
00:15:59.035 --> 00:16:01.476
You just have to leave now.

210
00:16:01.476 --> 00:16:02.424
I'm just kidding.

211
00:16:02.424 --> 00:16:05.307
[LAUGH]

