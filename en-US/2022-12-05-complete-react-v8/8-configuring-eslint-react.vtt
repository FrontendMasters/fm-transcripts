WEBVTT

1
00:00:00.000 --> 00:00:05.137
Okay, so let's talk about this
ESLint error momentarily.

2
00:00:05.137 --> 00:00:08.097
It's saying, hey, you don't ever use app.

3
00:00:08.097 --> 00:00:10.220
So no unused variables, right.

4
00:00:10.220 --> 00:00:14.739
This is the same thing that would
complain if I said const x =5, and

5
00:00:14.739 --> 00:00:16.181
I just never used it.

6
00:00:16.181 --> 00:00:18.253
It's gonna say, hey, you create X but
then you never use it.

7
00:00:18.253 --> 00:00:21.580
Why did you create x in the first place?

8
00:00:21.580 --> 00:00:26.234
It's because ESLint up until now
does not understand JSX, right.

9
00:00:26.234 --> 00:00:29.863
It's saying like, hey,
you imported pet but you never used it.

10
00:00:29.863 --> 00:00:35.115
You created that, but you never used to
despite the fact that we use pet here and

11
00:00:35.115 --> 00:00:36.638
we used app down here.

12
00:00:36.638 --> 00:00:41.826
We need to augment the ESLint
to be able to understand JSX.

13
00:00:41.826 --> 00:00:47.772
So, let's go ahead and
do that really quick.

14
00:00:47.772 --> 00:00:50.497
And it's a bit of a pain so
bear with me for a second.

15
00:00:50.497 --> 00:00:54.564
I promised you no more tooling and
then I lied.

16
00:00:54.564 --> 00:01:00.836
NPMI -D and
we need to get quite a few here.

17
00:01:00.836 --> 00:01:07.006
ESLint -plugin-import and

18
00:01:07.006 --> 00:01:13.673
then you need at 2.26.0.

19
00:01:13.673 --> 00:01:19.145
By the way, you don't have to copy you
can literally just go copy this from

20
00:01:19.145 --> 00:01:25.166
my notes as well if you don't want to do
that it's here in JSX under ESLint react.

21
00:01:25.166 --> 00:01:28.476
Just run this one right there.

22
00:01:28.476 --> 00:01:29.974
I'm gonna type it out so
people can see it.

23
00:01:29.974 --> 00:01:34.690
But I invite you please to go be lazy.

24
00:01:34.690 --> 00:01:41.498
ESLint-plugin-JSX-a11y accessibility.

25
00:01:41.498 --> 00:01:47.337
At 6.6.1 and ESLint

26
00:01:47.337 --> 00:01:55.960
-plugin-react@7.31.8.

27
00:02:02.408 --> 00:02:09.269
Just 76 packages so no big deal.

28
00:02:09.269 --> 00:02:13.638
Okay, and then we got to update our
ESLint, I'll see a little bit here.

29
00:02:15.857 --> 00:02:23.022
So, Put these on different lines
would be a little bit easier to read.

30
00:02:23.022 --> 00:02:27.421
Again, the order here under extends
does not make a big difference.

31
00:02:27.421 --> 00:02:33.315
Just make sure prettier is last.

32
00:02:34.397 --> 00:02:40.034
Plugin:import/errors,

33
00:02:40.034 --> 00:02:46.846
plugin:react/recommended and

34
00:02:46.846 --> 00:02:53.891
plugin:jsx-a11y:, sorry,

35
00:02:53.891 --> 00:02:57.420
/recommended.

36
00:02:57.420 --> 00:03:00.174
So this notation means that
you're gonna go get the plugin,

37
00:03:00.174 --> 00:03:02.723
which we installed all these plugins for
es6, right?

38
00:03:02.723 --> 00:03:06.034
Plugins just augment ESLint etc.

39
00:03:06.034 --> 00:03:08.249
The extensive set of rules, right.

40
00:03:08.249 --> 00:03:13.894
And the plugin is like adding
additional capabilities to ESLint.

41
00:03:13.894 --> 00:03:15.345
These are all just the recommended things.

42
00:03:15.345 --> 00:03:19.697
Again, these are gonna be the kind of
things that are not very opinionated,

43
00:03:19.697 --> 00:03:24.393
except I guess maybe accessibility but
I'm gonna argue that's an error anyway.

44
00:03:25.897 --> 00:03:29.994
These should just be things that
are very uncontroversial things

45
00:03:29.994 --> 00:03:32.159
that you should always do, okay.

46
00:03:34.602 --> 00:03:37.101
And then we're gonna turn
off a couple of rules here.

47
00:03:37.101 --> 00:03:40.907
We definitely don't need prop types.

48
00:03:40.907 --> 00:03:43.223
Prop types are kind of an old thing for
react.

49
00:03:43.223 --> 00:03:47.634
If you don't wanna use type script,
but you want validation in your code,

50
00:03:47.634 --> 00:03:49.115
like a prop validation.

51
00:03:49.115 --> 00:03:54.513
You can use prop types, which I'm
going to say is this isn't an array.

52
00:03:54.513 --> 00:03:59.188
Sorry, this is a object.

53
00:03:59.188 --> 00:04:00.485
Yeah.
Prop types are silly.

54
00:04:00.485 --> 00:04:06.058
Don't, don't do prop types either
use type script or use nothing.

55
00:04:06.058 --> 00:04:13.143
And then react/react-in-JSX-scope

56
00:04:13.143 --> 00:04:16.384
to be zero as well.

57
00:04:19.115 --> 00:04:20.150
What is an array?

58
00:04:20.150 --> 00:04:25.916
No, this is yeah sorry this is not meant
to be plugins this is meant to be rules.

59
00:04:29.085 --> 00:04:33.881
Okay, so sorry, rules react/prop-types:0,

60
00:04:33.881 --> 00:04:37.478
and react/react-in- jsx-scope.

61
00:04:37.478 --> 00:04:42.715
This used to require that anywhere use JSX
imported react which used to be the rule.

62
00:04:42.715 --> 00:04:47.557
But with react 17 we don't
have to do that anymore.

63
00:04:47.557 --> 00:04:51.302
Rather with a recent version of Babel,
it doesn't matter anyway.

64
00:04:51.302 --> 00:04:53.111
Zero means this is not an error anymore.

65
00:04:53.111 --> 00:04:54.140
Please ignore this rule.

66
00:04:54.140 --> 00:04:59.996
That's what zero means, I think one
means warn and two means error.

67
00:05:01.161 --> 00:05:04.517
So that's why it's zero okay,

68
00:05:04.517 --> 00:05:08.879
sorry now plugins we have a react plugin.

69
00:05:12.649 --> 00:05:17.975
We have an import plugin import just
allows ESLint to follow imports, right.

70
00:05:17.975 --> 00:05:21.415
So it can see if I'm exporting
something from this file,

71
00:05:21.415 --> 00:05:25.510
and I'm trying to import something
different in a different file.

72
00:05:25.510 --> 00:05:29.097
It'll find that error across imports and
exports.

73
00:05:29.097 --> 00:05:31.827
That's what import does.

74
00:05:31.827 --> 00:05:35.618
And then jsx- a11y.

75
00:05:35.618 --> 00:05:39.368
This is like if you put like a click
listener on something that's not like

76
00:05:39.368 --> 00:05:42.332
a button,
it's gonna say like this isn't accessible.

77
00:05:42.332 --> 00:05:47.060
It'll catch a bunch of those
like very simple straightforward

78
00:05:47.060 --> 00:05:48.941
accessibility errors.

79
00:05:48.941 --> 00:05:52.340
I like it cuz accessibility is hard for
the most part.

80
00:05:52.340 --> 00:05:54.823
And so
this will help me with basic things.

81
00:05:54.823 --> 00:05:57.656
Okay, that's all good emphasis good.

82
00:05:57.656 --> 00:06:00.711
We need to add one more at
the bottom which is settings

83
00:06:05.150 --> 00:06:10.238
Okay, ESLint wanna know what
version of react you're using

84
00:06:12.060 --> 00:06:14.124
So you can just say,
go figure it out yourself.

85
00:06:14.124 --> 00:06:20.219
So detect says, hey, go read my
package.json and figure it out yourself.

86
00:06:20.219 --> 00:06:24.927
I don't know why they don't do
that by default, but they don't.

87
00:06:26.273 --> 00:06:29.055
And then for the import/resolver,

88
00:06:32.599 --> 00:06:37.525
If it's like right now it's
saying hey pet doesn't exist.

89
00:06:37.525 --> 00:06:41.534
That's because right now ESLint is
only configured to look for.JSX files

90
00:06:41.534 --> 00:06:44.346
we need to tell it you also
need to look for JSX files.

91
00:06:44.346 --> 00:06:50.361
So, here you're gonna say node.

92
00:06:50.361 --> 00:06:56.264
Extensions and you have to give

93
00:06:56.264 --> 00:07:02.172
it an array of .JSX and .JSX.

94
00:07:04.158 --> 00:07:08.540
So this is saying,
please also look for JSX files.

95
00:07:10.733 --> 00:07:13.694
Okay, this isn't file that you now see

96
00:07:13.694 --> 00:07:17.471
in front of you is what I
use on most of my projects.

97
00:07:17.471 --> 00:07:24.474
This is vanilla react ESLint for
me, right.

98
00:07:24.474 --> 00:07:31.969
And I think it's very uncontroversial and
in the opinion set of forces.

99
00:07:31.969 --> 00:07:36.541
Having worked in DevTools for and like
developer infrastructure for a long time.

100
00:07:36.541 --> 00:07:39.731
I'm very cognizant of the fact that
I don't want to annoy developers

101
00:07:39.731 --> 00:07:40.559
unnecessarily.

102
00:07:40.559 --> 00:07:44.278
As a developer, I have a thought in
my brain that I wanna express it in.

103
00:07:44.278 --> 00:07:51.447
Code, every tool that I put between you
and accomplishing that is friction.

104
00:07:51.447 --> 00:07:56.997
So I have to ask myself, as the person
making the tool, is that friction useful?

105
00:07:56.997 --> 00:08:00.360
So one of them here that might be
the most controversial here is that I put

106
00:08:00.360 --> 00:08:02.563
the accessibility one
here in my default one.

107
00:08:02.563 --> 00:08:05.560
If you do something and
it's not accessible, and it warns you,

108
00:08:05.560 --> 00:08:07.401
what you're doing is not accessible.

109
00:08:07.401 --> 00:08:11.722
That is friction to a developer continuing
writing the code have to go fix your error

110
00:08:11.722 --> 00:08:13.526
rather than writing net new code.

111
00:08:13.526 --> 00:08:15.367
Is that worth it?

112
00:08:15.367 --> 00:08:16.601
I'm gonna say yes,

113
00:08:16.601 --> 00:08:21.111
it's worth it to make developers fix
that fix their accessibility code.

114
00:08:21.111 --> 00:08:25.078
But is it worth it to
make sure that they have

115
00:08:25.078 --> 00:08:29.607
Some special schema of
naming their variables.

116
00:08:29.607 --> 00:08:34.018
No, that's just me enforcing some
dumb opinion on someone else,

117
00:08:34.018 --> 00:08:36.632
that's not worth it, don't do that.

118
00:08:36.632 --> 00:08:41.632
So that's the mantra behind
this ESL config is fix errors,

119
00:08:41.632 --> 00:08:45.534
don't enforce the arbitrary opinions Yeah.

120
00:08:45.534 --> 00:08:47.313
Dustin.

121
00:08:47.313 --> 00:08:50.971
&gt;&gt; Will we need esent once
we move to type script?

122
00:08:50.971 --> 00:08:53.515
Will you need Esent once
you move to type script?

123
00:08:53.515 --> 00:08:57.050
&gt;&gt; Yes.

124
00:08:57.050 --> 00:09:01.320
&gt;&gt; So let's talk about the kinds of
validation that we have in our code.

125
00:09:01.320 --> 00:09:04.522
Just very quickly, we have a format.

126
00:09:04.522 --> 00:09:09.170
Which is purely spacing,
and what kind of quote and

127
00:09:09.170 --> 00:09:12.206
it's very mechanical, right?

128
00:09:12.206 --> 00:09:15.941
It's like if you're writing
an English like essay,

129
00:09:15.941 --> 00:09:18.774
do you have paragraphs in right places?

130
00:09:18.774 --> 00:09:20.579
Are you double spacing?

131
00:09:20.579 --> 00:09:22.364
Do you have tabs?

132
00:09:22.364 --> 00:09:24.005
You know,
should this be a single double quote?

133
00:09:24.005 --> 00:09:31.024
It's very syntactical You have lint,
which is gonna go check.

134
00:09:31.024 --> 00:09:32.576
Do you have like a subject predicate,
right?

135
00:09:32.576 --> 00:09:37.120
Like it's, it's gonna check like very
simple stylistic choices in your,

136
00:09:37.120 --> 00:09:38.398
your English essay.

137
00:09:38.398 --> 00:09:42.884
Then you're gonna have type script, which
is gonna say, like you said, this thing,

138
00:09:42.884 --> 00:09:43.567
is it a noun?

139
00:09:43.567 --> 00:09:44.825
Does the noun fit here?

140
00:09:44.825 --> 00:09:45.574
Is this a verb?

141
00:09:45.574 --> 00:09:46.489
Does the ver fit here?

142
00:09:46.489 --> 00:09:48.907
So it's doing type checking
to make sure that everything.

143
00:09:48.907 --> 00:09:52.277
Fits in the correct place, and
it is what you said it is.

144
00:09:52.277 --> 00:09:55.770
And then eventually we're going
to have unit testing at the end,

145
00:09:55.770 --> 00:09:59.085
which is going to say,
do all these paragraphs fit together?

146
00:09:59.085 --> 00:10:00.917
Do they make sense together?

147
00:10:00.917 --> 00:10:04.927
We're gonna check all
those pieces together.

148
00:10:04.927 --> 00:10:09.675
So all four of those tools are checking
a different facet of correctness

149
00:10:09.675 --> 00:10:10.870
about your code.

150
00:10:10.870 --> 00:10:13.131
And therefore are all necessary.

151
00:10:13.131 --> 00:10:14.801
There's overlap for sure.

152
00:10:14.801 --> 00:10:16.774
They definitely have overlap.

153
00:10:16.774 --> 00:10:21.294
And we're trying to use them each in
the place that they do the best, right.

154
00:10:21.294 --> 00:10:23.720
ESLint can cover some things in prettier.

155
00:10:23.720 --> 00:10:25.854
TypeScript can cover
some things in ESLint.

156
00:10:25.854 --> 00:10:27.715
ESLint can cover some
things in TypeScript.

157
00:10:27.715 --> 00:10:30.853
There's the then diagrams have overlap,
right.

158
00:10:30.853 --> 00:10:31.857
But we try and separate them out.

159
00:10:31.857 --> 00:10:34.000
So that Purdue only does formatting.

160
00:10:34.000 --> 00:10:36.701
ESLint only does stylistic
checking TypeScript.

161
00:10:36.701 --> 00:10:39.654
Only does typescript checking and
unit testing.

162
00:10:39.654 --> 00:10:44.951
Only tests do the pieces fit together,

163
00:10:44.951 --> 00:10:51.701
so I believe everything
should work npm run lint.

164
00:10:51.701 --> 00:10:53.734
No errors,everything's all good.

165
00:10:53.734 --> 00:10:56.410
Now we're done with the ESLint for
a good long while.

