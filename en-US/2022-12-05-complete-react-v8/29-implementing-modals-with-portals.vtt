WEBVTT

1
00:00:00.290 --> 00:00:05.978
So let's go to details.jsx.

2
00:00:05.978 --> 00:00:09.553
And we're gonna use this now.

3
00:00:13.865 --> 00:00:19.694
So up here at the top, we're gonna

4
00:00:19.694 --> 00:00:25.528
import some useState from React.

5
00:00:25.528 --> 00:00:27.885
I was like having React to the top,

6
00:00:27.885 --> 00:00:31.802
I don't know why that's just
a force of habit I suppose.

7
00:00:31.802 --> 00:00:35.741
And then under here I'll put like import,

8
00:00:37.422 --> 00:00:41.448
Modal from modal, cool?

9
00:00:41.448 --> 00:00:48.949
Here, I'm gonna have const showModal and
then SetShowModal to useState,

10
00:00:48.949 --> 00:00:54.940
we do not want it to show by default,
so I'm gonna say false.

11
00:00:58.356 --> 00:01:03.421
And then here on my button,

12
00:01:03.421 --> 00:01:08.706
I'm gonna have an unClick =

13
00:01:08.706 --> 00:01:13.560
setShowModal to be true.

14
00:01:17.554 --> 00:01:21.324
So anytime someone clicks
the Adopt Pet name button,

15
00:01:21.324 --> 00:01:25.949
from inside our component,
it's gonna show the modal, right?

16
00:01:25.949 --> 00:01:27.827
And then now here's kind of a,

17
00:01:27.827 --> 00:01:32.028
we can put this modal really anywhere
cuz it doesn't really matter.

18
00:01:32.028 --> 00:01:36.132
So we'll just put it here
underneath the pet description.

19
00:01:36.132 --> 00:01:38.715
I'm gonna say if showModal.

20
00:01:43.612 --> 00:01:49.157
Then we're gonna display this modal.

21
00:01:51.117 --> 00:01:55.478
And here we'll have a div and

22
00:01:55.478 --> 00:02:01.485
h1 of would you like to adopt pet.name

23
00:02:05.479 --> 00:02:11.218
And then we have a div
className = buttons.

24
00:02:11.218 --> 00:02:14.147
And we have a button say yes.

25
00:02:16.651 --> 00:02:24.121
And a button to say, we'll put unClick
on this as well to close the showModal.

26
00:02:24.121 --> 00:02:31.595
So onClick, SetShowModal

27
00:02:31.595 --> 00:02:35.656
to false, no.

28
00:02:40.387 --> 00:02:45.171
Okay, so if showModal is true,
show the modal with

29
00:02:45.171 --> 00:02:50.087
all that stuff in it otherwise
show them no, right?

30
00:02:50.087 --> 00:02:53.799
You can always render no which
rendering no just does nothing, right?

31
00:02:56.863 --> 00:02:59.774
This is a ternary, we've done this
I think already in this class.

32
00:02:59.774 --> 00:03:01.575
But basically if this is true,

33
00:03:01.575 --> 00:03:04.566
do the first thing otherwise
do the thing after it.

34
00:03:04.566 --> 00:03:06.832
So if it's true show the modal
with all this stuff in it.

35
00:03:06.832 --> 00:03:10.319
If showModal is false and render nothing.

36
00:03:13.235 --> 00:03:17.015
Let's go make sure that I'm
telling the truth here.

37
00:03:17.015 --> 00:03:22.919
If I click adopt Luna and
I get this nice modal here, right?

38
00:03:22.919 --> 00:03:26.784
And I'll click No, and it'll go away.

39
00:03:30.627 --> 00:03:35.491
So click this and
then let's inspect element here.

40
00:03:37.514 --> 00:03:41.129
I have modal here and notice this is
above root, this is a buffer app.

41
00:03:41.129 --> 00:03:44.296
So it's rendering to a different
part of the application, right?

42
00:03:44.296 --> 00:03:48.880
It's rendering above route,
which made writing the CSS for this,

43
00:03:48.880 --> 00:03:51.375
extremely easy, right?

44
00:03:51.375 --> 00:03:52.918
This is the power of portal.

45
00:03:52.918 --> 00:03:56.985
This makes a lot of things
like contextual navigation and

46
00:03:56.985 --> 00:04:00.721
writing the modals and
stuff like that much easier.

47
00:04:02.392 --> 00:04:07.685
Cool, other things I think are cool
about this, so I'm rendering this modal,

48
00:04:07.685 --> 00:04:11.717
it's rendering inside of this
React application, right?

49
00:04:11.717 --> 00:04:15.699
And I'm using things like SetShowModal and
pet.name.

50
00:04:15.699 --> 00:04:19.359
So I'm using all the state from inside
of this to render somewhere else,

51
00:04:19.359 --> 00:04:22.066
which you wouldn't be able
to do otherwise, right?

52
00:04:22.066 --> 00:04:24.646
It'd be much harder for
us to do this without a portal.

53
00:04:24.646 --> 00:04:29.342
We'd have to pull all of our pet state
out to app.JSX to be able to handle

54
00:04:29.342 --> 00:04:32.417
that otherwise,
which would be really hard.

55
00:04:32.417 --> 00:04:36.580
Last thing, which is kind of

56
00:04:36.580 --> 00:04:42.137
interesting sort of feature of this.

57
00:04:42.137 --> 00:04:44.905
Because this is going through
the React virtual DOM, and

58
00:04:44.905 --> 00:04:48.031
the React virtual DOM is different
than the normal DOM, right?

59
00:04:48.031 --> 00:04:52.031
Because this is nested inside of here
inside of the React virtual DOM.

60
00:04:52.031 --> 00:04:55.786
Whereas it's not in
the inside of the normal DOM.

61
00:04:55.786 --> 00:05:02.050
I can actually put an event listener up
here and catch events bubbling from here.

62
00:05:04.523 --> 00:05:07.752
Let me just make sure that I'm
not telling you sweet lies.

63
00:05:12.989 --> 00:05:14.793
Yeah, this is gonna get mad for
accessibility reasons.

64
00:05:14.793 --> 00:05:16.372
Yeah, that which is absolutely correct.

65
00:05:16.372 --> 00:05:18.077
You should not put an on click on a div.

66
00:05:18.077 --> 00:05:24.572
It's bad idea, Right,
which is wild to me, right?

67
00:05:24.572 --> 00:05:26.499
So I'm clicking on a modal, right?

68
00:05:26.499 --> 00:05:29.114
So this is rendering on
a different part of the page.

69
00:05:29.114 --> 00:05:31.414
And then I'm clicking here and

70
00:05:31.414 --> 00:05:35.842
it's calling the unclick from
a different part of the DOM.

71
00:05:36.946 --> 00:05:42.069
I don't know why you'd wanna do this,
but I do think it is cool, right?

72
00:05:46.683 --> 00:05:47.547
Okay.

73
00:05:50.772 --> 00:05:54.762
Any questions about modals or
portals or refs?

74
00:05:57.010 --> 00:06:00.708
We'll talk more about refs and
intermediate React.

75
00:06:00.708 --> 00:06:05.206
So don't worry so much about that, but in
general with refs, if you have something

76
00:06:05.206 --> 00:06:09.660
that you need to have the exact same thing
every single time that you're using it.

77
00:06:09.660 --> 00:06:11.753
The ref is the way to keep
track of that over time.

78
00:06:11.753 --> 00:06:16.760
And generally, usually has something
to do with DOM elements, right?

79
00:06:16.760 --> 00:06:23.149
Cuz you want to have access to a specific
DOM element, refs are useful for that.

80
00:06:24.724 --> 00:06:25.666
Anything else?

81
00:06:28.707 --> 00:06:33.934
Cool, I think portals are extremely useful
cuz I used to have to write modals and

82
00:06:33.934 --> 00:06:35.191
stuff the old way.

83
00:06:35.191 --> 00:06:39.145
&gt;&gt; How do you pass the button
click info back to the parent,

84
00:06:39.145 --> 00:06:41.091
which button was clicked?

85
00:06:41.091 --> 00:06:42.083
&gt;&gt; Sure.

86
00:06:45.097 --> 00:06:48.604
So we were in here.

87
00:06:48.604 --> 00:06:52.070
I have two buttons here, or even here.

88
00:06:52.070 --> 00:06:54.593
I think that's probably, well,

89
00:06:54.593 --> 00:06:58.859
let's do buttons cuz that's
what we're talking about.

90
00:06:58.859 --> 00:07:04.664
Let's say we wanted to have
an unclick on here on this div,

91
00:07:04.664 --> 00:07:07.988
or this one here on click equals,

92
00:07:10.178 --> 00:07:16.477
This is just a normal,
you can treat it like a normal DOM event.

93
00:07:16.477 --> 00:07:21.214
So you can just say
console.log(e.current Target,

94
00:07:21.214 --> 00:07:25.961
well, just (e.currentTarget will be fine,
right?

95
00:07:25.961 --> 00:07:30.905
And now if I re-click on this, Console,

96
00:07:33.399 --> 00:07:35.697
I save this refresh again.

97
00:07:37.634 --> 00:07:45.438
Adopt Luna Or
I guess this would be target then.

98
00:07:45.438 --> 00:07:46.782
Let's try that one more time.

99
00:07:57.226 --> 00:08:01.126
I'm trying to remember exactly
the way that you would do this.

100
00:08:01.126 --> 00:08:03.175
All right, let's just log.e.

101
00:08:04.567 --> 00:08:09.021
Anyway it's gonna be on the event itself.

102
00:08:09.021 --> 00:08:11.416
So you can see this is
a synthetic base event.

103
00:08:11.416 --> 00:08:15.134
So it's a fake event coming from React.

104
00:08:15.134 --> 00:08:18.389
And I forgot about this, so whenever
you're doing things like logging out

105
00:08:18.389 --> 00:08:20.559
events and stuff like that,
it'll zero it out for

106
00:08:20.559 --> 00:08:23.208
you because it doesn't wanna
hold on to references for you.

107
00:08:23.208 --> 00:08:28.136
Which can be annoying and Chrome lazily

108
00:08:28.136 --> 00:08:32.473
evaluates those display things.

109
00:08:32.473 --> 00:08:38.883
Anyway, diff buttons, view,
React name, unclick target.

110
00:08:42.549 --> 00:08:45.747
So in other words,
you would just introspect the event.

111
00:08:49.860 --> 00:08:54.851
If you were doing something like higher
level than that, but a much easier way of

112
00:08:54.851 --> 00:08:59.112
handling that would be just have
different onClicks here, right?

113
00:08:59.112 --> 00:09:01.174
So unclick here equals,

114
00:09:14.891 --> 00:09:16.929
And now if I click Yes here,
it's gonna say yes.

115
00:09:16.929 --> 00:09:19.127
Or if I click no,
then it's gonna close it, right?

116
00:09:19.127 --> 00:09:22.418
So you would just have different
unclicks for every event on there.

117
00:09:25.101 --> 00:09:27.805
So that's probably
the easiest way to do that.

