WEBVTT

1
00:00:00.032 --> 00:00:02.016
Yeah, question.

2
00:00:02.016 --> 00:00:07.014
&gt;&gt; Is the context read-only for
the child components like props?

3
00:00:07.014 --> 00:00:10.013
&gt;&gt; It's not, no, it's not read-only.

4
00:00:10.013 --> 00:00:13.446
So notice in here I'm passing
the whole hook, right?

5
00:00:13.446 --> 00:00:17.703
Normally it'd be adoptedPet and
setAdoptedPet, right?

6
00:00:17.703 --> 00:00:19.805
Because that's how hooks work.

7
00:00:19.805 --> 00:00:22.961
I am passing the holding hook in there,
right?

8
00:00:22.961 --> 00:00:28.117
Which means that both of these
now have access to the value and

9
00:00:28.117 --> 00:00:30.858
the method to update the value.

10
00:00:30.858 --> 00:00:37.299
So it is a read and write,
though the context provider doesn't care.

11
00:00:41.797 --> 00:00:47.033
Now, it is read-only in the sense of I
can't just say like Provider.value = blah,

12
00:00:47.033 --> 00:00:47.556
right?

13
00:00:47.556 --> 00:00:49.466
It's always going to be
whatever this hook is.

14
00:00:49.466 --> 00:00:52.374
But the reason why I'm passing
the whole hook into it is so

15
00:00:52.374 --> 00:00:56.626
that I'll have that setAdoptedPet value,
which we're gonna call from details.

16
00:00:59.972 --> 00:01:04.990
So speaking of which,
let's go to Details.jsx.

17
00:01:04.990 --> 00:01:11.411
At the top,
we are going to import as well from react,

18
00:01:11.411 --> 00:01:15.142
we're gonna say useContext.

19
00:01:15.142 --> 00:01:20.175
From react-router-dom,
we're gonna get useNavigate,

20
00:01:22.217 --> 00:01:25.781
And then we're also going to import,

21
00:01:26.813 --> 00:01:32.504
AdoptedPetContext from AdoptedPetContext,
great.

22
00:01:34.075 --> 00:01:38.178
Okay, up here, we're gonna say const,

23
00:01:40.644 --> 00:01:44.308
_, let's do this first.

24
00:01:44.308 --> 00:01:49.579
const navigate = useNavigate,
this is a function

25
00:01:49.579 --> 00:01:54.611
that we're getting from react-router-dom.

26
00:01:54.611 --> 00:01:58.407
navigate is just a function to
programmatically reroute someone

27
00:01:58.407 --> 00:01:59.654
somewhere, right?

28
00:01:59.654 --> 00:02:02.714
So we're gonna call navigate to route
someone back to the homepage, right?

29
00:02:02.714 --> 00:02:07.016
So if you click yes, I wanna adopt Luna,
it's gonna take you back to the homepage.

30
00:02:07.016 --> 00:02:12.145
navigate is the function that's going to
allow you to do that programmatically,

31
00:02:12.145 --> 00:02:15.732
as opposed to a user clicking on a button,
right, okay.

32
00:02:17.161 --> 00:02:21.516
And then here we're gonna say const,
and here, I don't actually care

33
00:02:21.516 --> 00:02:25.743
about reading from the adoptedPet,
I only care about writing to it.

34
00:02:25.743 --> 00:02:30.360
So I'm just gonna put _ here
to signify to future self,

35
00:02:30.360 --> 00:02:33.321
I don't care what this is, right?

36
00:02:33.321 --> 00:02:39.245
And I only care about setAdoptedPet,

37
00:02:42.819 --> 00:02:49.136
= useContext,
with AdoptedPetContext passed into there.

38
00:02:53.559 --> 00:02:59.157
Now this is gonna emit some ESLint
errors because it doesn't like this,

39
00:02:59.157 --> 00:03:02.013
but we'll fix that here in a second.

40
00:03:02.013 --> 00:03:05.489
So down here on Yes,

41
00:03:05.489 --> 00:03:11.638
onClick, We're gonna run a function.

42
00:03:11.638 --> 00:03:15.065
And inside of that function,

43
00:03:15.065 --> 00:03:20.000
we're gonna setAdoptedPet to be pet, and

44
00:03:20.000 --> 00:03:26.729
we're going to navigate to /,
setAdoptedPet, right?

45
00:03:26.729 --> 00:03:30.485
Cuz if they click Yes, I want to adopt it,
we want to set the current pet,

46
00:03:30.485 --> 00:03:33.210
whatever the pet is,
as the adopted pet in context.

47
00:03:33.210 --> 00:03:35.726
And then we'll navigate
them back to the homepage.

48
00:03:35.726 --> 00:03:39.735
Because we wanna get them off the details
page to acknowledge yes, you did it,

49
00:03:39.735 --> 00:03:40.786
congratulations.

50
00:03:43.159 --> 00:03:46.799
So one more thing here,
we have this ESLint error.

51
00:03:46.799 --> 00:03:50.176
It's like hey, you're declaring this, but
not using it, which is intentional, right?

52
00:03:50.176 --> 00:03:52.541
I'm intentionally declaring it and
not using it.

53
00:03:52.541 --> 00:03:56.382
You can either go set ESLint to say
like hey, if anything's just called _,

54
00:03:56.382 --> 00:04:00.090
ignore it, which is probably
what I would typically do.

55
00:04:00.090 --> 00:04:04.870
Or I'm just gonna click this and
say Disable no-unused-var for this line.

56
00:04:04.870 --> 00:04:09.410
So it'll generate that comment for
me, which ignores that line.

57
00:04:10.460 --> 00:04:13.230
Totally up to you how you wanna do it.

58
00:04:13.230 --> 00:04:17.250
Since I'm just gonna do it once here, I'm
just gonna ignore this with this comment.

59
00:04:20.187 --> 00:04:28.020
Or you could totally call this a hook,
and then use index one, yeah.

60
00:04:28.020 --> 00:04:29.580
&gt;&gt; As far as using context,

61
00:04:29.580 --> 00:04:33.604
would we separate them into
separate context with a bigger app?

62
00:04:33.604 --> 00:04:38.288
Or would you kind of snowball
it into one giant context

63
00:04:38.288 --> 00:04:41.214
that's shared amongst the app?

64
00:04:41.214 --> 00:04:46.262
&gt;&gt; Sure, no, that's a really
good question, both are valid.

65
00:04:46.262 --> 00:04:50.837
If you're gonna snowball it into a big
store, right, is what should it be called

66
00:04:50.837 --> 00:04:55.100
at that point, you've basically
recreated Redux at some point, right?

67
00:04:55.100 --> 00:04:58.057
At which point,
maybe just use Redux, right?

68
00:04:58.057 --> 00:05:00.367
Cuz that's exactly what
Redux is supposed to be.

69
00:05:00.367 --> 00:05:06.843
But I have seen people basically
come in here, where it's app.jsx?

70
00:05:06.843 --> 00:05:09.421
We haven't talked about it,
we'll talk about it in intermediate React.

71
00:05:09.421 --> 00:05:14.167
But there's another
hook called useReducer,

72
00:05:14.167 --> 00:05:18.326
which is basically Reduxesque, right?

73
00:05:18.326 --> 00:05:23.617
And then you can use useReducer
with context, right?

74
00:05:23.617 --> 00:05:29.227
And then you have basically created
Redux light using React state.

75
00:05:29.227 --> 00:05:32.625
That's how I would do that,
if you wanted to do it that way, and

76
00:05:32.625 --> 00:05:34.308
you didn't want to use Redux.

77
00:05:34.308 --> 00:05:37.097
I'm not gonna talk about
how to use useReducer.

78
00:05:37.097 --> 00:05:41.157
We'll just hop into
intermediate React v5 and

79
00:05:41.157 --> 00:05:46.038
we'll talk about it, but for
now, I wouldn't do that.

80
00:05:46.038 --> 00:05:47.928
That's totally valid,
I don't ever do that.

81
00:05:47.928 --> 00:05:52.087
I'm either on the side of I'm gonna
use some very lightweight context, or

82
00:05:52.087 --> 00:05:53.348
I'm gonna use Redux.

83
00:05:53.348 --> 00:05:58.296
And I don't see the middle ground
of when I would wanna do that.

84
00:05:58.296 --> 00:06:00.032
But I accept that someone could, right?

85
00:06:00.032 --> 00:06:02.160
I think it's a valid choice to make.

86
00:06:02.160 --> 00:06:07.006
So me, personally,
I am going to use context for

87
00:06:07.006 --> 00:06:10.211
little bits of state like this.

88
00:06:10.211 --> 00:06:13.847
And if I started having
too much app state,

89
00:06:13.847 --> 00:06:18.898
then I move into a more robust
solution like Redux Toolkit.

90
00:06:21.218 --> 00:06:23.715
Hopefully that's sufficiently nuanced.

91
00:06:25.912 --> 00:06:26.703
Okay.

92
00:06:30.297 --> 00:06:37.332
So we are now writing to our context,
but we are not reading from our context.

93
00:06:37.332 --> 00:06:41.825
So I need you to hop
over to searchparams.jsx.

94
00:06:41.825 --> 00:06:43.813
&gt;&gt; Before we get into it,
can we do one more question?

95
00:06:43.813 --> 00:06:45.092
&gt;&gt; Sure.

96
00:06:45.092 --> 00:06:47.828
&gt;&gt; Where's the setAdoptedPet coming from?

97
00:06:47.828 --> 00:06:50.120
It doesn't look like we're
passing it from the app.

98
00:06:50.120 --> 00:06:53.578
We just have adoptedPet = useState.

99
00:06:53.578 --> 00:07:00.721
&gt;&gt; Yes, so remember how
useState usually looks, right?

100
00:07:00.721 --> 00:07:05.053
Typically I'm doing something like,
let's say,

101
00:07:05.053 --> 00:07:09.488
theme and setTheme = useState,
like this, right?

102
00:07:09.488 --> 00:07:15.196
And this is like a dark mode or
something like that, right?

103
00:07:15.196 --> 00:07:17.214
It's an array of two things, right?

104
00:07:17.214 --> 00:07:24.423
Here, I'm not destructuring like I am
here, this is an array of two things.

105
00:07:24.423 --> 00:07:27.409
So adoptedPet is a whole hook.

106
00:07:27.409 --> 00:07:32.874
If this makes you feel better, we can
actually just call it adoptedPetHook.

107
00:07:32.874 --> 00:07:34.249
So this is an array of two thing.

108
00:07:34.249 --> 00:07:37.017
If I mouse over it,
you'll actually see the type, right?

109
00:07:37.017 --> 00:07:42.838
Where it's a dispatch function and
some amount of state.

110
00:07:44.961 --> 00:07:48.163
So it's coming from this,
in other words, it is there,

111
00:07:48.163 --> 00:07:49.913
this is an array of two things.

112
00:07:49.913 --> 00:07:54.670
And then if you go down, or
if you go into details.jsx,

113
00:07:54.670 --> 00:07:58.836
here, we are destructuring
the two item array.

114
00:07:58.836 --> 00:08:07.809
So let us go read from,
State in SearchParams.

115
00:08:10.448 --> 00:08:13.286
Okay, so at the top,
we have useState here,

116
00:08:13.286 --> 00:08:15.916
please import as well useContext again.

117
00:08:18.189 --> 00:08:25.967
And we're going to import
AdoptedPetContext from AdoptedPetContext.

118
00:08:25.967 --> 00:08:30.233
Here we're gonna say const adoptedPet,

119
00:08:36.141 --> 00:08:42.309
= useContext(AdoptedPetContext).

120
00:08:43.765 --> 00:08:45.442
So again, this is an array of two things.

121
00:08:45.442 --> 00:08:47.793
This does have a dispatch function here,
so

122
00:08:47.793 --> 00:08:51.880
it does have setAdoptedPet as well
coming in, but I don't need it, right?

123
00:08:51.880 --> 00:08:56.700
You can put an another _ here to just
signify I'm not going to write to this.

124
00:08:56.700 --> 00:09:02.919
Or in my case, I just omit it,
cuz I don't need it, right?

125
00:09:02.919 --> 00:09:06.268
So now this is going to be reading
from the AdoptedPetContext.

126
00:09:06.268 --> 00:09:09.016
And here this is gonna be
whatever the AdoptedPet is.

127
00:09:13.935 --> 00:09:17.264
Okay, and then here just inside the form,

128
00:09:17.264 --> 00:09:20.691
I'm gonna put one of
these turn areas here.

129
00:09:20.691 --> 00:09:24.153
So if I have an adoptedPet,

130
00:09:24.153 --> 00:09:29.422
I'm gonna display div className ="pet

131
00:09:29.422 --> 00:09:33.648
image-container" like that.

132
00:09:33.648 --> 00:09:38.599
And then I'm gonna have an image src =

133
00:09:38.599 --> 00:09:43.090
adoptedPet.images(0), and

134
00:09:43.090 --> 00:09:46.972
an alt of adoptedPet.name.

135
00:09:52.086 --> 00:09:56.535
Okay, and then otherwise, display nothing,
cuz you haven't adopted a pet.

136
00:09:59.701 --> 00:10:05.686
Right, so otherwise it'll display nothing,
cuz null means display nothing, right?

137
00:10:05.686 --> 00:10:09.294
If we have a pet, display all of this.

138
00:10:09.294 --> 00:10:12.580
Or if we've displayed, or
if we've adopted a pet,

139
00:10:12.580 --> 00:10:15.132
if we haven't, then display nothing.

140
00:10:15.132 --> 00:10:17.907
So now if we go over to our app,
notice that there's nothing here.

141
00:10:17.907 --> 00:10:21.755
If I come here, click to Luna and
I say Adopt Luna,

142
00:10:21.755 --> 00:10:25.066
Yes, now I have Luna right there, right?

143
00:10:25.066 --> 00:10:32.096
If I come down here to Beam,
and I say Adopt Beam,

144
00:10:32.096 --> 00:10:37.595
and I click Yes, now Beam is up there.

145
00:10:40.271 --> 00:10:43.244
So that is how context works.

146
00:10:43.244 --> 00:10:46.512
Hopefully you're seeing I
was like this is useful.

147
00:10:46.512 --> 00:10:51.038
Because now I can read anywhere
that I can get inside of,

148
00:10:51.038 --> 00:10:54.135
which for me is my entire app, right?

149
00:10:54.135 --> 00:10:58.125
This AdoptedPetContext, anywhere inside
of my entire application, I can read and

150
00:10:58.125 --> 00:10:59.259
write to this context.

151
00:10:59.259 --> 00:11:03.889
But I'm hoping you also see the danger of,
imagine you're just looking at this, and

152
00:11:03.889 --> 00:11:07.127
you're like,
where does this context come from, right?

153
00:11:07.127 --> 00:11:11.008
There's indirection, and
if there's one thing that I don't like,

154
00:11:11.008 --> 00:11:15.238
it's indirection, and magic, and
all those things when it comes to code.

155
00:11:15.238 --> 00:11:18.208
I like it being very explicit so
I can read where stuff is coming from,

156
00:11:18.208 --> 00:11:20.013
where it's going, how it's modified.

157
00:11:20.013 --> 00:11:22.943
Just makes debugging, and reading, and

158
00:11:22.943 --> 00:11:27.308
understanding your application
easier if that's the case.

159
00:11:27.308 --> 00:11:31.532
So please understand the trade-off,

160
00:11:31.532 --> 00:11:35.121
only use it here when you need to.

161
00:11:35.121 --> 00:11:39.675
And if you start getting into having lots
and lots of contexts in your application,

162
00:11:39.675 --> 00:11:43.723
consider using something like Redux,
or MobX, or something like that.

