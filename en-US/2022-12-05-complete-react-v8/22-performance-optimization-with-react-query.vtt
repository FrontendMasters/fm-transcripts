WEBVTT

1
00:00:00.000 --> 00:00:03.962
So, talking about a couple of things here,
it's useful that this

2
00:00:03.962 --> 00:00:08.305
isn't a separate file, because now
this is super easy to test, right?

3
00:00:08.305 --> 00:00:12.538
This would be useful outside
of React Query, right?

4
00:00:12.538 --> 00:00:14.975
This is just returning
a method that if you call and

5
00:00:14.975 --> 00:00:19.035
you give it the correct query key, it's
gonna give you back the correct response,

6
00:00:19.035 --> 00:00:22.069
or it's gonna give you back
the result of a response to an API.

7
00:00:22.069 --> 00:00:24.993
Also cool, right?

8
00:00:24.993 --> 00:00:27.804
So that's another thing I
appreciate about React Query,

9
00:00:27.804 --> 00:00:31.657
is it makes all the individual async
parts of your code individually testable.

10
00:00:31.657 --> 00:00:32.770
It's always a positive thing.

11
00:00:36.374 --> 00:00:38.984
Okay, so let's go use this in Details now.

12
00:00:41.743 --> 00:00:49.490
So we're gonna import ( useQuery
) from '@tanstack/react-query',

13
00:00:49.490 --> 00:00:54.147
and import fetchPet from "./fetchPet".

14
00:00:54.147 --> 00:01:00.864
And we're gonna say up here,
const results = useQuery.

15
00:01:03.410 --> 00:01:04.626
So this is how useQuery works.

16
00:01:04.626 --> 00:01:08.197
We're gonna give it a key
of what we're requesting.

17
00:01:11.177 --> 00:01:14.420
So the first one we're gonna give
it is the general overarching term.

18
00:01:14.420 --> 00:01:17.758
This is the details type of request.

19
00:01:17.758 --> 00:01:19.372
And then I'm gonna give it the id.

20
00:01:21.780 --> 00:01:27.891
This is the query key that's going
to be provided to fetchPet.js.

21
00:01:27.891 --> 00:01:30.831
So when I'm pulling off
the queryKey right here,

22
00:01:30.831 --> 00:01:34.761
that's where I'm getting the key
to make the correct id, right?

23
00:01:34.761 --> 00:01:36.161
It's coming from here.

24
00:01:38.415 --> 00:01:39.412
And then I give it this details.

25
00:01:39.412 --> 00:01:43.763
This could be any arbitrary caching key,
right?

26
00:01:43.763 --> 00:01:47.269
This is the same sort of idea of what
you provide to Redis, or Memcached, or

27
00:01:47.269 --> 00:01:48.725
something like that, right?

28
00:01:51.455 --> 00:01:54.939
So this is good basically say,
all right, store it here in your cache.

29
00:01:56.833 --> 00:01:59.465
So then it knows later,
if I request the exact same key later,

30
00:01:59.465 --> 00:02:01.198
I'm gonna get the exact same response.

31
00:02:01.198 --> 00:02:05.809
It's not gonna go fetch that
from the API again cuz they

32
00:02:05.809 --> 00:02:08.626
gave it a cache time of infinity.

33
00:02:08.626 --> 00:02:13.895
Okay, and then I say, if you don't
have that in your cache, run this.

34
00:02:16.396 --> 00:02:19.964
If you don't have details
five in your cache,

35
00:02:19.964 --> 00:02:23.357
run fetchPet, and it'll go get it for you.

36
00:02:26.167 --> 00:02:27.503
Now, we have results.

37
00:02:27.503 --> 00:02:29.105
That's gonna be the result
of whatever I have.

38
00:02:29.105 --> 00:02:31.791
I get to write this code that
looks very synchronous, right,

39
00:02:31.791 --> 00:02:32.937
which is super cool to me.

40
00:02:37.255 --> 00:02:43.998
The first time this comes back,
it's not going to have that cache, right?

41
00:02:43.998 --> 00:02:45.605
So it's going to give me back something.

42
00:02:45.605 --> 00:02:49.849
Notice I did not await here,
you can't await in a render function.

43
00:02:51.736 --> 00:02:54.434
So it's gonna give me
back results.isLoading.

44
00:02:56.594 --> 00:02:58.879
And I'm gonna say something like, return,

45
00:03:02.208 --> 00:03:08.023
div className = "loading-pane".

46
00:03:08.023 --> 00:03:09.826
Freudian slip there.

47
00:03:09.826 --> 00:03:17.006
h2, className

48
00:03:17.006 --> 00:03:20.266
= "loader".

49
00:03:20.266 --> 00:03:22.987
And I just give it something
that you want to spin.

50
00:03:22.987 --> 00:03:26.129
I gave it a spiral.

51
00:03:26.129 --> 00:03:30.115
Put some sort of emoji there,
it'll just spin, right?

52
00:03:32.750 --> 00:03:38.190
So if it's loading on first load,
it's just gonna show that first, right?

53
00:03:38.190 --> 00:03:44.765
This is awesome because, Now we don't have
to have these big complicated things,

54
00:03:44.765 --> 00:03:47.530
like all right, if this is happening
to this, if this is happening to this.

55
00:03:48.530 --> 00:03:51.280
Immediately, the user is
gonna see something loading.

56
00:03:51.280 --> 00:03:54.424
And then as soon as fetchPet completes,
it's going to go and

57
00:03:54.424 --> 00:03:56.592
rerender with the correct information.

58
00:03:59.178 --> 00:04:01.369
So it's short circuits here, right?

59
00:04:01.369 --> 00:04:02.906
And I don't have to
worry about after this.

60
00:04:02.906 --> 00:04:07.535
I can now assume past here,
pet is available and pet has loaded.

61
00:04:07.535 --> 00:04:15.815
So I can just say, const pet =
results.data.pets[0], like that.

62
00:04:19.143 --> 00:04:21.900
Cuz that's the shape,
it comes back from the API.

63
00:04:21.900 --> 00:04:26.908
And now I can say, div

64
00:04:26.908 --> 00:04:32.399
className = "details".

65
00:04:32.399 --> 00:04:35.692
Another div,

66
00:04:35.692 --> 00:04:40.085
h1, pet.name.

67
00:04:42.829 --> 00:04:49.553
H2, (pet.animal),

68
00:04:53.726 --> 00:05:01.011
(pet.breed), (pet.city),

69
00:05:01.011 --> 00:05:07.195
(pet.state), I don't
need those dollar signs.

70
00:05:12.893 --> 00:05:17.252
Okay, Then we'll put a button there.

71
00:05:19.628 --> 00:05:20.732
It's pet adoption site, right?

72
00:05:20.732 --> 00:05:28.207
So you're gonna say,
Adopt (pet.name), a call to action.

73
00:05:28.207 --> 00:05:31.274
And then we'll have a paragraph
underneath that with the pet.description.

74
00:05:38.907 --> 00:05:43.805
Okay, let me make sure that
I'm not out of line here.

75
00:05:43.805 --> 00:05:48.701
So if I click on Luna, you saw that
I had a nice little spinner there for

76
00:05:48.701 --> 00:05:50.062
just a hot second.

77
00:05:50.062 --> 00:05:55.430
If you want to see that a little bit
longer, it just looks like this, right?

78
00:06:05.035 --> 00:06:10.098
Okay, And now, we have this button

79
00:06:10.098 --> 00:06:14.902
that doesn't do anything, but
we have a more detailed pet page, right?

80
00:06:14.902 --> 00:06:16.922
But how cool is this, right?

81
00:06:16.922 --> 00:06:20.557
So I get to basically treat this
like a synchronous hook, but

82
00:06:20.557 --> 00:06:23.137
it's fetching from an asynchronous API.

83
00:06:23.137 --> 00:06:27.030
And then I just have to do
some bifurcation of like,

84
00:06:27.030 --> 00:06:31.479
if it's loading, do this,
there's other things here.

85
00:06:31.479 --> 00:06:36.115
There's results., and you can see here,
there's isError, isFetched,

86
00:06:36.115 --> 00:06:37.625
isFetchedAfterMount.

87
00:06:37.625 --> 00:06:40.859
They give you a bunch of
flags that you can check, or

88
00:06:40.859 --> 00:06:44.846
you can also just look at status,
right, which will have a text

89
00:06:44.846 --> 00:06:49.006
if you wanna do more of a switch
statement or something like that.

90
00:06:49.006 --> 00:06:53.433
If you wanna manually yourself,
call refetch, you can just say,

91
00:06:53.433 --> 00:06:54.864
results.refetch.

92
00:06:54.864 --> 00:06:59.137
And this will actually go back out to
the API if you think it's stale and

93
00:06:59.137 --> 00:06:59.944
refresh it.

94
00:06:59.944 --> 00:07:01.222
There's a bunch of stuff.

95
00:07:01.222 --> 00:07:03.276
React Query is a really
cool piece of software.

96
00:07:03.276 --> 00:07:05.205
We're not gonna really
scratch much more than this.

97
00:07:05.205 --> 00:07:10.039
But honestly, this is pretty cool already.

98
00:07:10.039 --> 00:07:12.718
I think this is better than a useEffect,
right?

99
00:07:12.718 --> 00:07:15.982
This is more readable than to
useEffect according to me.

100
00:07:15.982 --> 00:07:20.057
And here's the cool part, again,
looking back at our network tab.

101
00:07:20.057 --> 00:07:23.987
Sorry, I'm gonna click on Luna,
you can see here I got the pets?id here.

102
00:07:23.987 --> 00:07:30.914
I'm gonna go back, And
I'm gonna click on Luna again.

103
00:07:30.914 --> 00:07:35.263
Notice that it does not refresh Luna,
right?

104
00:07:35.263 --> 00:07:38.034
It's keeping that in the cache.

105
00:07:38.034 --> 00:07:42.418
But if I go back and click on Bunna,
see the pets?id there, 2, right?

106
00:07:42.418 --> 00:07:45.800
But I'm gonna go back to Luna, no refetch.

107
00:07:48.589 --> 00:07:50.860
Pretty cool, right?

108
00:07:50.860 --> 00:07:54.960
Notice that every time I
go back to the homepage,

109
00:07:54.960 --> 00:07:58.867
I am refetching the general
pets search page.

110
00:07:58.867 --> 00:08:02.725
That's because that useEffect
is always running, right?

111
00:08:02.725 --> 00:08:04.826
Doesn't care that it's
already fetched that before,

112
00:08:04.826 --> 00:08:06.171
it's just always rerunning that.

113
00:08:09.296 --> 00:08:11.391
So I don't know,
this is pretty compelling to me.

114
00:08:11.391 --> 00:08:14.807
This is compelling to me enough that I

115
00:08:14.807 --> 00:08:19.444
basically always use this
when I'm using React.

116
00:08:19.444 --> 00:08:21.144
Yeah, I'd rather write this in effects.

117
00:08:21.144 --> 00:08:24.968
So yeah, I use this all the time, yeah.

118
00:08:24.968 --> 00:08:26.825
&gt;&gt; What happens if
fetchPet throws an error?

119
00:08:26.825 --> 00:08:34.382
&gt;&gt; If it does, Then you'll get
results.isError, right there.

120
00:08:36.357 --> 00:08:40.912
And so I'm not being defensive here,
but you would have another thing here,

121
00:08:40.912 --> 00:08:42.184
results.isError.

122
00:08:43.768 --> 00:08:50.245
Return, Okay?

123
00:09:03.036 --> 00:09:07.510
&gt;&gt; [INAUDIBLE]
&gt;&gt; No, so

124
00:09:07.510 --> 00:09:10.340
it actually tries to refetch three times.

125
00:09:10.340 --> 00:09:15.202
So it's gonna make an assumption of,
maybe there's an intermediate issue here.

126
00:09:15.202 --> 00:09:17.499
So it has some exponential back off.

127
00:09:17.499 --> 00:09:19.379
There's a bunch of stuff
that's really configurable.

128
00:09:19.379 --> 00:09:23.456
But by default, it tries three times with
exponential back off, and eventually,

129
00:09:23.456 --> 00:09:29.513
it'll show an error state So
then I ended up with, no, right?

130
00:09:29.513 --> 00:09:31.569
React Query has some really
cool stuff built into it.

