WEBVTT

1
00:00:00.319 --> 00:00:06.451
Let's make some more inputs
then here in SearchParams.

2
00:00:06.451 --> 00:00:11.407
So we're gonna have different kinds of

3
00:00:11.407 --> 00:00:16.212
animals, our API is limited to bird,

4
00:00:16.212 --> 00:00:20.281
cat, dog, rabbit, reptile.

5
00:00:23.621 --> 00:00:27.623
Okay, we're gonna have an animal's
piece of state as well.

6
00:00:27.623 --> 00:00:32.243
So animal, setAnimal,

7
00:00:34.598 --> 00:00:37.316
= useState.

8
00:00:37.316 --> 00:00:40.980
By default, it have no state.

9
00:00:40.980 --> 00:00:46.292
And then under the location label,
we're gonna put another one of these and

10
00:00:46.292 --> 00:00:50.197
it's gonna be a label,
it's gonna be HTML for animal.

11
00:00:53.959 --> 00:00:59.304
Animal, and this is gonna be a select.

12
00:01:04.419 --> 00:01:11.394
And the id="animal", the value=(animal),

13
00:01:11.394 --> 00:01:16.316
the onChange is going to be equal to,

14
00:01:19.480 --> 00:01:21.227
This function that we're gonna make.

15
00:01:21.227 --> 00:01:26.317
It takes an e,
it gives back setAnimal to be,

16
00:01:29.194 --> 00:01:31.785
Whatever e.target.value is.

17
00:01:40.024 --> 00:01:47.745
Okay, and then here we want
an option that's gonna be empty.

18
00:01:55.651 --> 00:02:00.805
So I have this array of animals up
here and I just wanna render this

19
00:02:00.805 --> 00:02:05.682
out as a list of animals that
people can select from, right?

20
00:02:05.682 --> 00:02:09.624
I could go through and I could go make
an individual option for all of these, but

21
00:02:09.624 --> 00:02:13.477
it'd be really nice to just use this
array to generate components, right?

22
00:02:13.477 --> 00:02:17.286
So what I can do here is I can use
this curly braces to put a JavaScript

23
00:02:17.286 --> 00:02:18.111
expression.

24
00:02:18.111 --> 00:02:22.882
I can say (ANIMALS.map(animal)),

25
00:02:22.882 --> 00:02:27.787
and it's just going to
return an option for

26
00:02:27.787 --> 00:02:31.064
every key in there, right?

27
00:02:31.064 --> 00:02:35.209
So the key is gonna be equal to animal,
and

28
00:02:35.209 --> 00:02:40.193
the value here is gonna be
equal to animal as well.

29
00:02:40.193 --> 00:02:44.650
Now if you remember,
if you give React an array of components,

30
00:02:44.650 --> 00:02:47.351
it knows what to do with that, right?

31
00:02:47.351 --> 00:02:48.874
And what does map do?

32
00:02:48.874 --> 00:02:53.695
It takes an array of one thing and returns
to an array of something else, right?

33
00:02:53.695 --> 00:02:56.391
So the transformation that
I'm applying here for

34
00:02:56.391 --> 00:03:00.109
every one of these animals in here for
bird, cat, dog, rabbit, and

35
00:03:00.109 --> 00:03:03.269
reptile is going to return an option for
each one of those.

36
00:03:03.269 --> 00:03:08.255
I'm going to end up back with
an array of React components,

37
00:03:08.255 --> 00:03:11.757
which React knows how to render, right?

38
00:03:11.757 --> 00:03:17.115
In other words,
you use map a lot in JavaScript.

39
00:03:18.736 --> 00:03:21.592
Sorry, in JavaScript, yes, in JavaScript,
but in React in particular.

40
00:03:24.361 --> 00:03:29.804
So, If you're not familiar with map,

41
00:03:29.804 --> 00:03:33.419
let's just give you just a tiny
just taste here really quick.

42
00:03:36.462 --> 00:03:41.175
If I say I have numbers = [1, 2,

43
00:03:41.175 --> 00:03:45.889
3], and I say numbers.map, and

44
00:03:45.889 --> 00:03:50.917
it takes in a number and returns number

45
00:03:50.917 --> 00:03:56.121
times 2, what do I expect to get back?

46
00:03:56.121 --> 00:04:00.323
[2, 4, 6], right?

47
00:04:00.323 --> 00:04:01.083
No.

48
00:04:08.047 --> 00:04:10.469
So I took this array of [1, 2, 3] and

49
00:04:10.469 --> 00:04:13.536
I transformed it into the array of [2,
4, 6].

50
00:04:13.536 --> 00:04:17.853
This function here gets applied once
to every single item in the array and

51
00:04:17.853 --> 00:04:21.198
whatever it returns gets back
in the new array, right?

52
00:04:21.198 --> 00:04:25.639
So I have this number of [1, 2,
3], I get back the [2, 4, 6],

53
00:04:25.639 --> 00:04:28.308
I doubled every item in that array, right?

54
00:04:28.308 --> 00:04:33.734
Same principle at play here,
we have an array of strings and

55
00:04:33.734 --> 00:04:38.626
I am returning an array of
React components, right?

56
00:04:38.626 --> 00:04:43.671
Just basic JavaScript is
not React in particular,

57
00:04:43.671 --> 00:04:47.201
it's just JavaScript in general.

58
00:04:47.201 --> 00:04:51.211
But just be aware that you're
gonna see this map everywhere.

59
00:04:51.211 --> 00:04:54.581
And again, we're using the parentheses for
implicit returns here.

60
00:04:54.581 --> 00:04:58.125
You can absolutely make this curly brace
and return all that kind of stuff,

61
00:04:58.125 --> 00:05:01.907
because we're just taking animal and
returning an option for each one of them.

62
00:05:01.907 --> 00:05:05.535
Implicit return is here, so it's great.

