WEBVTT

1
00:00:01.075 --> 00:00:07.597
So let me explain to you the dark,
dark days of writing React.

2
00:00:07.597 --> 00:00:10.959
If I was on this website and
I wanted to do a modal, which by the way,

3
00:00:10.959 --> 00:00:13.494
objectively models,
terrible user interface.

4
00:00:13.494 --> 00:00:14.819
I do not like them.

5
00:00:14.819 --> 00:00:16.831
Please stop using them.

6
00:00:16.831 --> 00:00:21.183
Now that I've said that, I'm going to
show you how to do a modal in React.

7
00:00:21.183 --> 00:00:24.849
In the dark, dark days of React,
it was really hard to do.

8
00:00:24.849 --> 00:00:27.912
Cuz if I click adopt Luna here and
I want it to pop up,

9
00:00:27.912 --> 00:00:29.994
are you sure you wanna adopt Luna?

10
00:00:29.994 --> 00:00:32.796
For many reasons,
that dog is a jerk sometimes.

11
00:00:32.796 --> 00:00:37.508
But if you wanna do some sort
of user confirmation there,

12
00:00:37.508 --> 00:00:41.349
think about how you would
write that in React.

13
00:00:41.349 --> 00:00:44.195
With a modal you typically want it
to be like the topmost element of

14
00:00:44.195 --> 00:00:47.532
an application, right, so that the CSS
renders over everything, right?

15
00:00:47.532 --> 00:00:49.953
So that it has kind of precedents there.

16
00:00:49.953 --> 00:00:55.119
Well, how are we gonna do that in React,
right?

17
00:00:55.119 --> 00:01:00.191
Just think about our tree here
if we look into the dev tools,

18
00:01:00.191 --> 00:01:03.240
inspect, and we go to Components.

19
00:01:03.240 --> 00:01:05.547
That's kind of a cool trick I
just showed you right there.

20
00:01:05.547 --> 00:01:09.358
So I can just like right click
Inspect Element here, here on this

21
00:01:09.358 --> 00:01:14.018
particular element, and then if I just
go directly to the component one here,

22
00:01:14.018 --> 00:01:16.792
it'll actually take me
directly to that one.

23
00:01:16.792 --> 00:01:20.899
So it's smarter to say you're highlighting
this in the normal explorer, you go to

24
00:01:20.899 --> 00:01:24.727
the component once it's going to highlight
the same thing in the React tree.

25
00:01:24.727 --> 00:01:29.990
Okay, so our carousel's all
the way down here, right?

26
00:01:29.990 --> 00:01:35.284
How am I gonna render something
that's above the header?

27
00:01:35.284 --> 00:01:37.181
It's deeply nested in here, right?

28
00:01:37.181 --> 00:01:40.445
So, it gets really tricky
really quickly of how to render

29
00:01:40.445 --> 00:01:42.153
something above something.

30
00:01:44.514 --> 00:01:47.843
To give you a separate
example that's not a modal,

31
00:01:47.843 --> 00:01:50.330
imagine that I have a component here.

32
00:01:50.330 --> 00:01:55.214
And then maybe I have some sort of like
contextual navigation above here where I

33
00:01:55.214 --> 00:01:58.915
show maybe the Adopt Luna button
up here in the navigation.

34
00:01:58.915 --> 00:02:03.207
How do I render something
from in carousel or

35
00:02:03.207 --> 00:02:07.042
in the details page to the navigation?

36
00:02:07.042 --> 00:02:12.064
It's possible, right, we could just
have top level state in app.jsx, right?

37
00:02:12.064 --> 00:02:15.205
And that we could just pass that into
details and we can pass it into header.

38
00:02:15.205 --> 00:02:19.414
And then we have to pull all
of our state up into app.jsx,

39
00:02:19.414 --> 00:02:21.616
which kind of sucks, right?

40
00:02:21.616 --> 00:02:24.325
We want that state to
live in details because

41
00:02:24.325 --> 00:02:28.877
all of that logic could live together and
that would be very nice, right?

42
00:02:28.877 --> 00:02:34.809
So, that is how we used to have to do it
until something called portals came along.

43
00:02:34.809 --> 00:02:40.663
Portals basically allowed you to render to
a different place from within a component,

44
00:02:40.663 --> 00:02:41.232
right?

45
00:02:41.232 --> 00:02:46.699
So, actually what we're gonna do here
is we're gonna go to our index.html and

46
00:02:46.699 --> 00:02:52.503
we're gonna put another div right here,
and we're gonna call it id equals portal.

47
00:02:54.249 --> 00:02:57.426
And we're gonna put nothing in there for
the moment.

48
00:02:57.426 --> 00:03:03.096
But now we have this other place in
the DOM where we can render stuff into.

49
00:03:03.096 --> 00:03:07.744
And we can do it from within some
deeply nested component, right?

50
00:03:07.744 --> 00:03:10.449
And that ends up being
really useful sometimes.

51
00:03:14.328 --> 00:03:18.373
Or I called it portal here, I think in
my notes I actually call it modal, so

52
00:03:18.373 --> 00:03:19.957
we're gonna call it modal.

53
00:03:19.957 --> 00:03:25.853
Whatever you wanna call it here, but for
the moment let's just call it modal.

54
00:03:28.604 --> 00:03:35.092
Okay, then come in here and
make a new file, call it modal.jsx.

55
00:03:38.801 --> 00:03:42.752
Okay, and here inside of modal.jsx,

56
00:03:42.752 --> 00:03:47.072
I want you to import use effect and
use ref.

57
00:03:47.072 --> 00:03:53.456
We're gonna use another hook
here called ref from React.

58
00:03:55.387 --> 00:04:01.023
And we're going to import create

59
00:04:01.023 --> 00:04:05.454
portal from react-dom.

60
00:04:08.393 --> 00:04:11.510
Okay, make a function here,

61
00:04:11.510 --> 00:04:16.134
call it modal it's gonna take in children.

62
00:04:16.134 --> 00:04:22.530
Just like Our error boundary, this

63
00:04:22.530 --> 00:04:28.173
is basically going to mostly seamlessly
pass children through if it has children,

64
00:04:28.173 --> 00:04:33.751
and if it doesn't even have any children,
then it's not going to render itself,

65
00:04:35.526 --> 00:04:38.994
Okay, we're going to use a ref here.

66
00:04:38.994 --> 00:04:45.540
And we're gonna say use ref, and
by default it's just gonna be null.

67
00:04:45.540 --> 00:04:49.378
A ref is basically I have
this piece of something and

68
00:04:49.378 --> 00:04:53.762
I need that the same thing
back every single time, right?

69
00:04:53.762 --> 00:04:59.474
So I'm going to create a div and
I wanna have the same div back every time.

70
00:04:59.474 --> 00:05:02.143
Whereas if I'm creating the div
anew every single time,

71
00:05:02.143 --> 00:05:04.712
I'm getting a different div
on every render, right?

72
00:05:04.712 --> 00:05:11.061
And I'm going to render into that div,
which is going to be our modal.

73
00:05:11.061 --> 00:05:15.465
So bear with me for a second,
I know that's a little abstract.

74
00:05:15.465 --> 00:05:24.323
Gonna say, if I have no elRef
Dot current,then create one.

75
00:05:24.323 --> 00:05:28.710
elRef.current equals

76
00:05:28.710 --> 00:05:34.855
document.createElement div.

77
00:05:34.855 --> 00:05:37.398
You can think of basically an elRef or

78
00:05:37.398 --> 00:05:42.580
a ref as a container to give yourself
back the same thing every single time.

79
00:05:42.580 --> 00:05:45.306
That is the point of a ref.

80
00:05:45.306 --> 00:05:50.271
So here in this elRef.current it's always
going to be the same div that I create

81
00:05:50.271 --> 00:05:53.099
here and
it's going to create this div once.

82
00:05:53.099 --> 00:05:57.503
Cuz I want the same div on
every single rerender of this.

83
00:05:57.503 --> 00:06:01.602
And now that I have this handle on
this div, I can attach it to the DOM,

84
00:06:01.602 --> 00:06:05.867
I can detach it from the DOM, and
I'm always operating on the same div.

85
00:06:05.867 --> 00:06:10.276
Okay, here now I'm gonna use a use effect.

86
00:06:11.493 --> 00:06:16.807
I'm gonna say,
const modalRoot equals document.

87
00:06:16.807 --> 00:06:17.970
Don't do that.

88
00:06:17.970 --> 00:06:22.979
Document.getElementById modal.

89
00:06:22.979 --> 00:06:27.654
That's the one that we just put
into our index.html, right?

90
00:06:27.654 --> 00:06:36.091
ModalRoot.appendChild elRef.current,

91
00:06:36.091 --> 00:06:42.596
and then And

92
00:06:42.596 --> 00:06:47.870
then at the end of this we're going to.

93
00:06:49.188 --> 00:06:50.650
We only want this to happen once, right?

94
00:06:50.650 --> 00:06:54.317
We don't want it to keep appending
itself over and over again.

95
00:06:55.754 --> 00:07:02.143
And then lastly here,
we're going to return createPortal.

96
00:07:02.143 --> 00:07:03.636
I'm gonna wrap this in a div.

97
00:07:03.636 --> 00:07:06.490
You might ask, why aren't we just
passing children directly through,

98
00:07:06.490 --> 00:07:07.859
which you totally could, right?

99
00:07:07.859 --> 00:07:12.712
I don't need to div here for technical
reasons, right, you can just say children.

100
00:07:12.712 --> 00:07:16.833
But we are going to put
a div here around children,

101
00:07:16.833 --> 00:07:19.791
because my CSS classes require it.

102
00:07:19.791 --> 00:07:26.829
So it's purely for styling purposes,
not cuz we actually needed it.

103
00:07:26.829 --> 00:07:33.039
And then we're gonna pass
it into elRef.current And

104
00:07:33.039 --> 00:07:38.712
then down here at the bottom,
export default Modal.

105
00:07:38.712 --> 00:07:46.498
Really close, you're mad about this
cuz you need an equal sign, okay.

106
00:07:46.498 --> 00:07:50.878
We have one problem here and
it's on this line.

107
00:07:55.297 --> 00:07:59.583
Whenever this is finished,
cuz I'm gonna render a modal,

108
00:07:59.583 --> 00:08:01.650
do you wanna adopt this pet?

109
00:08:01.650 --> 00:08:03.677
And then after it's done,
they click yes or no,

110
00:08:03.677 --> 00:08:05.319
we need to get rid of the modal, right?

111
00:08:05.319 --> 00:08:06.862
It needs to go away.

112
00:08:06.862 --> 00:08:10.601
So we need some sort of
cleanup to happen afterwards.

113
00:08:10.601 --> 00:08:14.563
If you're using a class component you
would use component will unmount, right,

114
00:08:14.563 --> 00:08:17.907
cuz a component's about to exit the DOM,
you wanna run that method.

115
00:08:17.907 --> 00:08:22.384
How do you do component will
unmount in a function component?

116
00:08:22.384 --> 00:08:27.335
It's kinda weird shape of an API, but

117
00:08:27.335 --> 00:08:31.821
what you do is in this effect here,

118
00:08:31.821 --> 00:08:36.774
we're going to return a function that

119
00:08:36.774 --> 00:08:42.676
modalRoot.removeChild elRef.current.

120
00:08:48.117 --> 00:08:54.046
So whenever you return an effect or
basically return anything,

121
00:08:54.046 --> 00:08:59.989
in fact, it will run this whenever
the component will unmount.

122
00:08:59.989 --> 00:09:02.189
It's kind of weird, but
this is how you do component will unmount.

123
00:09:02.189 --> 00:09:05.715
Anything that you return
in an effect will be run

124
00:09:05.715 --> 00:09:09.520
after a component has been
unmounted from the DOM.

125
00:09:09.520 --> 00:09:14.547
It's not has been, its will be, right,
it does it before it totally unmounts.

126
00:09:14.547 --> 00:09:19.187
So here we are now removing the child at
the end of it, which is important to do

127
00:09:19.187 --> 00:09:23.557
otherwise we're gonna get Infinite
divs just being left inside of this

128
00:09:27.899 --> 00:09:31.089
This portal, this modal.

129
00:09:31.089 --> 00:09:33.713
Does that make sense?

130
00:09:33.713 --> 00:09:34.892
Cool.

131
00:09:39.927 --> 00:09:44.542
So yeah, the reason I typically end up
doing something like this is either to

132
00:09:44.542 --> 00:09:48.016
remove something from the DOM,
which we've done here.

133
00:09:48.016 --> 00:09:52.267
To remove event listeners, if you're doing
some sort of external event listening,

134
00:09:52.267 --> 00:09:55.513
you'd have to go in here and
you have to remove an event listener,

135
00:09:55.513 --> 00:09:56.767
that would happen here.

136
00:09:56.767 --> 00:10:03.091
If you're like stopping a timer, if you're
doing something like a set timeout or

137
00:10:03.091 --> 00:10:09.154
a request animation frame or what's
the one I'm thinking of, set interval.

138
00:10:09.154 --> 00:10:12.532
Yeah, set interval, right,
you would cancel the interval here.

139
00:10:12.532 --> 00:10:17.497
Last thing I can kind of think of is, on
some rare unfortunate occasion you have to

140
00:10:17.497 --> 00:10:21.014
have a React component wrapped
like a jQuery component.

141
00:10:21.014 --> 00:10:24.593
Any sort of cleanup that you would have to
do there, that would happen here as well.

142
00:10:24.593 --> 00:10:27.442
Those are kind of reasons why you would
end up doing something like this.

143
00:10:29.598 --> 00:10:31.533
Cool.

144
00:10:31.533 --> 00:10:37.910
So, any questions about what
we've done here in modal.jsx?

145
00:10:41.669 --> 00:10:44.304
I purposely structured this little bit so

146
00:10:44.304 --> 00:10:47.319
that it's easier to do
with TypeScript later.

147
00:10:47.319 --> 00:10:51.268
It's like creating the modal root
in here and all that kind of stuff.

148
00:10:51.268 --> 00:10:57.046
You absolutely could just create
this once outside here like this.

149
00:10:57.046 --> 00:11:01.998
That absolutely would work, but
it makes the TypeScript really ugly,

150
00:11:01.998 --> 00:11:04.732
so I just do it inside of the modal root.

151
00:11:04.732 --> 00:11:07.496
Cuz there's no reason to
do it here as well or

152
00:11:07.496 --> 00:11:09.681
no reason not to do it here as well.

153
00:11:12.249 --> 00:11:13.801
Okay, awesome.

154
00:11:19.340 --> 00:11:25.692
Yeah, another question
that one might ask here,

155
00:11:25.692 --> 00:11:30.835
why don't I just have const elRef equals

156
00:11:30.835 --> 00:11:36.526
useRef Like this.

157
00:11:43.992 --> 00:11:46.891
Why don't I do it this way?

158
00:11:46.891 --> 00:11:51.238
How many times iis modal gonna get
run by other kinds of function?

159
00:11:51.238 --> 00:11:52.733
A lot, potentially.

160
00:11:52.733 --> 00:11:54.403
Potentially, could be run a lot.

161
00:11:56.587 --> 00:12:01.842
Now if I provide it here it's basically
just saying this is the default and

162
00:12:01.842 --> 00:12:04.908
then after that you can ignore it, right?

163
00:12:04.908 --> 00:12:08.090
The problem is,
even though I'm not using it over and

164
00:12:08.090 --> 00:12:12.478
over again, this document.createElement
is still gonna get called and

165
00:12:12.478 --> 00:12:14.896
it's just gonna throw away the result.

166
00:12:14.896 --> 00:12:19.694
Anything that you say document dot
something, it's just slow by default, and

167
00:12:19.694 --> 00:12:23.502
all DOM API's, you need to
question how fast is this, right?

168
00:12:23.502 --> 00:12:27.670
So I'm typically not one for
performance things like that, right, but

169
00:12:27.670 --> 00:12:31.703
in this particular case,
churning through arbitrarily created divs

170
00:12:31.703 --> 00:12:35.215
that you're throwing away,
not a good use of your CPU time.

171
00:12:36.355 --> 00:12:38.855
Whereas you can do something like this,
right?

172
00:12:40.431 --> 00:12:45.047
&gt;&gt; Could you not replace
the document.getElementById modal with

173
00:12:45.047 --> 00:12:46.764
a useRef for it as well?

174
00:12:50.513 --> 00:12:53.485
&gt;&gt; Could you put a ref here and
have that reference the modal?

175
00:12:53.485 --> 00:12:57.558
You could, there's just no
reason that you would need to,

176
00:12:57.558 --> 00:13:00.744
cuz this use effect is
only gonna get run once.

177
00:13:00.744 --> 00:13:03.260
So I don't need to keep
track of it between renders.

178
00:13:03.260 --> 00:13:05.805
I just need it inside of the use effect,
and that's it.

179
00:13:07.251 --> 00:13:10.754
The only reason why I do it here is cuz
I'm creating a div that eventually I'm

180
00:13:10.754 --> 00:13:11.589
going to remove.

181
00:13:14.431 --> 00:13:15.725
Why do we do it this way by the way?

182
00:13:15.725 --> 00:13:18.888
We could totally just reuse the same
div over and over and over again.

183
00:13:18.888 --> 00:13:23.055
We do it this way because in theory you
could have multiple modals going on,

184
00:13:23.055 --> 00:13:25.646
in which case I have lots of questions for
you.

185
00:13:25.646 --> 00:13:30.281
But this makes it a little bit
more reusable because it's a self

186
00:13:30.281 --> 00:13:35.631
contained starts up and cleans itself
up kind of sort of situation here.

187
00:13:38.917 --> 00:13:43.887
It's not totally reusable in that aspect
cuz we're always rendering into modal,

188
00:13:43.887 --> 00:13:45.743
so it really isn't reusable.

189
00:13:45.743 --> 00:13:50.784
But here the way you would solve that
is you would just have props.target or

190
00:13:50.784 --> 00:13:52.310
something like that.

191
00:13:52.310 --> 00:13:54.837
And then you would have a target in here.

192
00:13:57.502 --> 00:13:59.466
Or yeah, just target.

193
00:14:00.630 --> 00:14:06.096
And then you really could have multiple
modals, which good luck with your CSS.

