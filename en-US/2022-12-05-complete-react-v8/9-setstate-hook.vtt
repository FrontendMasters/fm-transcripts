WEBVTT

1
00:00:00.861 --> 00:00:07.142
So we you can now go to 03-JSX for
the milestone if you've fallen behind and

2
00:00:07.142 --> 00:00:13.395
you didn't wanna copy all that ES lint
profile so feel free to go copy that.

3
00:00:13.395 --> 00:00:18.562
And we are gonna get into, Hooks,

4
00:00:18.562 --> 00:00:23.800
I want you to create a new file here and
we're gonna call it SearchParams.jsx.

5
00:00:23.800 --> 00:00:27.024
We're actually gonna start getting
into really building our application.

6
00:00:27.024 --> 00:00:29.990
So just to kind of set
your expectation here,

7
00:00:29.990 --> 00:00:35.473
we're gonna build an application where you
can search an API for animals to adopt.

8
00:00:35.473 --> 00:00:37.828
It's a fake API that's hosted
by Frontend Masters, so

9
00:00:37.828 --> 00:00:40.897
it's one that we can control and
make sure that it doesn't ever go down.

10
00:00:43.901 --> 00:00:46.244
But eventually I'm gonna
show you at the end,

11
00:00:46.244 --> 00:00:48.417
if you wanna go hook it
up to like a real API.

12
00:00:48.417 --> 00:00:51.128
And actually look at real pets to adopt,

13
00:00:51.128 --> 00:00:54.173
you can use the pet finder
API to do just that.

14
00:00:54.173 --> 00:00:58.664
So, let's make a component here,
we're gonna call it SearchParams.

15
00:01:00.025 --> 00:01:05.241
And it's gonna be a function,
we're gonna have a location.

16
00:01:05.241 --> 00:01:07.943
Feel free to put wherever
you want in this location.

17
00:01:07.943 --> 00:01:11.765
This is all very United States centric,
so apologies for that but

18
00:01:11.765 --> 00:01:13.788
that's just the API that we have.

19
00:01:13.788 --> 00:01:18.886
So I'm gonna put Seattle, WA,
but feel free to put Minneapolis,

20
00:01:18.886 --> 00:01:25.581
Minnesota, or Chicago, Illinois, or
whatever you want there, up to you.

21
00:01:25.581 --> 00:01:28.107
And then under that we're going to return.

22
00:01:31.009 --> 00:01:33.811
I put parentheses here so
I can go down to the next line.

23
00:01:33.811 --> 00:01:35.725
If you put parenthesis here and
just go to the next line,

24
00:01:35.725 --> 00:01:37.906
it's going to think that the line
has ended like that, right?

25
00:01:37.906 --> 00:01:41.123
And it's not gonna do
anything underneath that.

26
00:01:41.123 --> 00:01:47.418
So you need parentheses to tell
JavaScript, I'm going to the next line.

27
00:01:47.418 --> 00:01:50.938
That's where the parentheses comes from.

28
00:01:50.938 --> 00:01:56.562
Okay, and then I wanna give it a class,
like a CSS class, right?

29
00:01:56.562 --> 00:02:00.210
There's a kind of a weird
restriction here in JavaScript.

30
00:02:00.210 --> 00:02:03.943
Class is a reserved word in JavaScript,
right?

31
00:02:03.943 --> 00:02:08.569
So if I say class Thing, right,
that's what class means here.

32
00:02:08.569 --> 00:02:11.711
So I can't just call this class.

33
00:02:11.711 --> 00:02:15.818
So you need to call it className.

34
00:02:15.818 --> 00:02:16.609
To be totally fair,

35
00:02:16.609 --> 00:02:19.786
they didn't make this up, it's actually
the name of the JavaScript API for it.

36
00:02:19.786 --> 00:02:24.120
Just to prove my point here,
if I say inspect here,

37
00:02:26.530 --> 00:02:29.405
x =$0.

38
00:02:29.405 --> 00:02:34.715
So now I have this span here,
right, the span right there.

39
00:02:34.715 --> 00:02:38.795
What if I wanted to get
the className out of that?

40
00:02:38.795 --> 00:02:43.804
Well, if I do x., className,

41
00:02:43.804 --> 00:02:47.946
that'll actually give me back
the name of the class from it.

42
00:02:47.946 --> 00:02:49.717
So that's where the class name comes from.

43
00:02:49.717 --> 00:02:53.461
It comes from the name
of the JavaScript API.

44
00:02:53.461 --> 00:02:57.950
Some people get really upset by that,
I'm just used to it.

45
00:02:57.950 --> 00:03:00.430
So Stockholm Syndrome, I suppose.

46
00:03:00.430 --> 00:03:05.952
Okay, search-params, And

47
00:03:05.952 --> 00:03:11.412
then we're gonna give it a form, and
then we're gonna give it a label,

48
00:03:11.412 --> 00:03:16.070
I'm gonna give one to give it a label for
something, right?

49
00:03:16.070 --> 00:03:21.338
Again, for is a reserved word,
right, for for loops,

50
00:03:21.338 --> 00:03:25.835
you can get rid of class thing here,
by the way.

51
00:03:25.835 --> 00:03:31.295
So what do we have to call it instead
of for it It's called htmlFor.

52
00:03:33.202 --> 00:03:37.663
So I think those are the two primary ones
that you're gonna run into issues with,

53
00:03:37.663 --> 00:03:40.500
everything else, for
the most part, just works.

54
00:03:40.500 --> 00:03:47.884
So htmlFor "Location", Inside of that,
we're gonna give it a location.

55
00:03:51.177 --> 00:03:58.115
As in the word location, and
then we're getting input of id=,

56
00:04:00.059 --> 00:04:05.171
"Location" value="location" placeholder=

57
00:04:05.171 --> 00:04:10.056
"location" location, location, location.

58
00:04:13.179 --> 00:04:14.713
Okay, under that we'll give it a button.

59
00:04:16.921 --> 00:04:19.146
There'll be a submit button for
the whole form.

60
00:04:23.078 --> 00:04:30.854
Okay, and then export default,
SearchParams.

61
00:04:33.564 --> 00:04:37.002
So, let's talk about
a couple of things here.

62
00:04:37.002 --> 00:04:39.906
One, this is wrong and
broken and I know and

63
00:04:39.906 --> 00:04:42.982
I'm gonna show you why
here in just a second.

64
00:04:42.982 --> 00:04:46.218
So we have this variable here called
location this could be anywhere that

65
00:04:46.218 --> 00:04:47.924
you're searching for a pet, right?

66
00:04:47.924 --> 00:04:51.939
You wanna limit it down to
Salt Lake City to find your your pet or

67
00:04:51.939 --> 00:04:53.417
something like that.

68
00:04:53.417 --> 00:04:57.547
So I have this variable here that holds
the location of where I wanna search for.

69
00:04:57.547 --> 00:05:01.819
I want that to be the value
of this input here.

70
00:05:01.819 --> 00:05:06.218
So what's the difference between putting
curly braces here and putting quotes here.

71
00:05:08.489 --> 00:05:10.403
If I have the value here as quotes,

72
00:05:10.403 --> 00:05:14.438
this is literally going to put this
string in there of location, right?

73
00:05:14.438 --> 00:05:17.331
But I don't want it to be
literally the string location,

74
00:05:17.331 --> 00:05:20.236
I want it to be whatever is
inside the variable location.

75
00:05:20.236 --> 00:05:22.305
That is what the curly braces do here.

76
00:05:22.305 --> 00:05:27.032
If you put curly braces you're saying,
hey, here's a JavaScript expression right?

77
00:05:27.032 --> 00:05:30.837
So this JavaScript expression
is just location but

78
00:05:30.837 --> 00:05:36.419
this could be like location.twoUpperCase
or something like that right?

79
00:05:36.419 --> 00:05:41.375
An expression it's anything that can be
on the right side of an equal sign right?

80
00:05:41.375 --> 00:05:45.746
So anything that can be on the right
side of this can go in here, right?

81
00:05:45.746 --> 00:05:53.072
So .toLowerCase, right, or
something like that, right?

82
00:05:53.072 --> 00:05:57.075
Anything that's a valid JavaScript
expression can go here.

83
00:05:57.075 --> 00:05:59.649
For now, I just want the variable.

84
00:05:59.649 --> 00:06:02.632
So that's that.

85
00:06:04.606 --> 00:06:07.412
And then now, I wanna use this in App.jsx.

86
00:06:07.412 --> 00:06:09.768
So pop over to App.jsx.

87
00:06:09.768 --> 00:06:16.111
You can delete the pet import and just
import SearchParams, from SearchParams.

88
00:06:19.408 --> 00:06:21.950
Another fun trick I'll just
show you really quick.

89
00:06:21.950 --> 00:06:27.269
So if I'm here in App.jsx, let's just
say I didn't import this up here.

90
00:06:27.269 --> 00:06:29.369
You can actually just start writing
the thing that you wanna import.

91
00:06:29.369 --> 00:06:31.833
So I'm gonna put SearchParams, right this.

92
00:06:31.833 --> 00:06:33.987
Notice I don't have it
imported at the top.

93
00:06:33.987 --> 00:06:37.889
If I just click on this, notice that it
just automatically goes like okay, well,

94
00:06:37.889 --> 00:06:39.832
you're trying to import that, right?

95
00:06:39.832 --> 00:06:42.078
And that works, okay.

96
00:06:46.008 --> 00:06:46.600
Okay and

97
00:06:46.600 --> 00:06:52.279
now I had this SearchParams component
being rendered here from SearchParams.

98
00:06:53.529 --> 00:06:56.860
Okay, now if I go over here,
go back to my Adopt Me,

99
00:06:56.860 --> 00:06:59.500
I'll make sure your server is running.

100
00:06:59.500 --> 00:07:05.095
I don't think mine is npm run dev tf.

101
00:07:05.095 --> 00:07:05.595
There we go, refresh.

102
00:07:06.751 --> 00:07:08.774
What do we got here?

103
00:07:13.753 --> 00:07:17.137
Yeah, that is something
that we did not fix.

104
00:07:17.137 --> 00:07:24.936
App.jsx create route from
react-dom/client, I believe, right?

105
00:07:24.936 --> 00:07:29.881
You need to import create route from
react-dom/client, which is client side

106
00:07:29.881 --> 00:07:34.699
browser side, right, cuz there's also
server side rendering stuff here.

107
00:07:34.699 --> 00:07:38.333
So they separate them into
different packages, okay?

108
00:07:38.333 --> 00:07:43.301
And then here in app, you have to have a
return here, or else if nothing's getting

109
00:07:43.301 --> 00:07:48.629
returned, it's just getting declared and
never used, just so that's what we fixed.

110
00:07:48.629 --> 00:07:51.215
So refresh here.

111
00:07:51.215 --> 00:07:53.146
You will have an error in your console,

112
00:07:53.146 --> 00:07:55.728
that's okay,
we'll take care of it momentarily.

113
00:07:55.728 --> 00:08:01.101
But let's talk for
a second about our input here.

114
00:08:01.101 --> 00:08:05.125
How does React work?
How does React know when to re render?

115
00:08:05.125 --> 00:08:10.828
Because basically with the way that this
component works here in SearchParams.jsx

116
00:08:10.828 --> 00:08:15.177
is that, it'll continually
re-render this a bunch of times.

117
00:08:15.177 --> 00:08:17.650
These render functions get run a lot,

118
00:08:17.650 --> 00:08:20.592
which means that they
need to be fairly fast.

119
00:08:20.592 --> 00:08:23.972
Every time when an event happens in
JavaScript it re-renders everything,

120
00:08:23.972 --> 00:08:24.668
top to bottom.

121
00:08:27.309 --> 00:08:32.291
So, you have to ask yourself,
if I start typing in this input and

122
00:08:32.291 --> 00:08:36.723
I press the button, and
a top level dump event happens and

123
00:08:36.723 --> 00:08:40.046
React says cool, the user did something,

124
00:08:40.046 --> 00:08:44.975
something probably changed let
me re-render my self, yeah?

125
00:08:44.975 --> 00:08:49.533
So if I type on this input and I,
let's say I type the letter R,

126
00:08:49.533 --> 00:08:53.860
right, so you would expect it
to say Seattle WAr, right?

127
00:08:53.860 --> 00:08:58.186
If I typed it a lowercase r there,
well, what happens?

128
00:08:58.186 --> 00:09:01.720
If I type in it a re-render cycle happens.

129
00:09:01.720 --> 00:09:02.821
What is location?

130
00:09:05.100 --> 00:09:06.147
&gt;&gt; Seattle, Washington.

131
00:09:06.147 --> 00:09:08.466
&gt;&gt; Seattle, Washington with no r, right?

132
00:09:10.145 --> 00:09:13.652
Because nothing's changing this right?

133
00:09:13.652 --> 00:09:18.298
So if I go back over here and
I'm typing in I am literally hitting

134
00:09:18.298 --> 00:09:21.817
the letter r right now,
nothing is happening.

135
00:09:21.817 --> 00:09:24.771
Because, nothing ever changes location.

136
00:09:26.726 --> 00:09:29.638
So no matter what, I keep typing in here,

137
00:09:29.638 --> 00:09:33.557
nothing is happening because
the event is happening and

138
00:09:33.557 --> 00:09:38.580
React is re-rendering itself and
nothing is updating that location.

139
00:09:39.790 --> 00:09:44.888
That's a problem, right,
we have successfully broken the browser.

140
00:09:44.888 --> 00:09:49.873
So we need to be a bit more explicit
about this controlled input, right?

141
00:09:49.873 --> 00:09:51.380
You can see here it's saying, hey,

142
00:09:51.380 --> 00:09:53.329
you provided a value prop
without an on change.

143
00:09:53.329 --> 00:09:57.478
So actually React is kind of
ahead of you here and it's,

144
00:09:57.478 --> 00:10:01.742
I know you broke this so
you should go fix this.

145
00:10:01.742 --> 00:10:02.836
So let's make something
that can actually change.

146
00:10:04.672 --> 00:10:09.434
We need something called a hook.

147
00:10:09.434 --> 00:10:14.419
So I'm gonna say up here
I'm going to import

148
00:10:14.419 --> 00:10:18.200
a thing called a hook from React.

149
00:10:18.200 --> 00:10:19.656
So I'm gonna import, use state from React.

150
00:10:21.797 --> 00:10:28.692
And I'm gonna say const Location and
setLocation =useState and

151
00:10:28.692 --> 00:10:33.713
then whatever you want
the default state to be.

152
00:10:33.713 --> 00:10:38.119
So that that can be Seattle,
WA or whatever you want.

153
00:10:38.119 --> 00:10:39.880
For now, let's just do that and
see what happens.

154
00:10:41.440 --> 00:10:45.152
And so now I have this thing called
Location which is coming in from Seattle,

155
00:10:45.152 --> 00:10:45.849
Washington.

156
00:10:45.849 --> 00:10:49.441
All I need to tell it what to do whenever
something changes on this input.

157
00:10:49.441 --> 00:10:55.831
So I'm gonna say onChange, And
I'm gonna give it a function.

158
00:10:55.831 --> 00:11:00.079
So it's gonna take in an event and

159
00:11:00.079 --> 00:11:08.741
then it's going to setLocation
to be e.target, target.value.

160
00:11:16.429 --> 00:11:23.393
This setLocation function is
what you call, To let it know,

161
00:11:23.393 --> 00:11:27.882
hey something changed go update yourself.

162
00:11:34.710 --> 00:11:39.817
Okay, so now if we go back over
here it successfully updates,

163
00:11:39.817 --> 00:11:42.287
we successfully unbroke it.

164
00:11:46.438 --> 00:11:49.684
Now, I'm gonna set this to be empty string
cuz by default I don't wanna search in

165
00:11:49.684 --> 00:11:51.610
Seattle, I wanna search everywhere, right?

166
00:11:51.610 --> 00:11:54.906
So now if I go back over here,
by default it's empty, right?

167
00:11:57.520 --> 00:12:00.240
So let's talk a little bit more
about these render functions.

168
00:12:00.240 --> 00:12:04.370
These render functions are meant
to be totally stateless, right?

169
00:12:04.370 --> 00:12:08.808
So if I have some sort of counter here,
this is a terrible idea, so

170
00:12:08.808 --> 00:12:12.141
don't do this in production
that counter= 0.

171
00:12:12.141 --> 00:12:16.626
And every time this runs
I say counter++ and

172
00:12:16.626 --> 00:12:21.713
then we'll just output
an H2 here of the counter.

173
00:12:28.484 --> 00:12:33.941
Right, this render function is
getting called so many times.

174
00:12:33.941 --> 00:12:37.973
Every time obviously I'm clicking on it,
will click a Submit, I don't know,

175
00:12:37.973 --> 00:12:39.128
other stuff, right?

176
00:12:42.675 --> 00:12:44.750
So these kinds of they're
called side effects, right?

177
00:12:44.750 --> 00:12:48.942
If we're using the dumb functional
programming computer science stuff,

178
00:12:48.942 --> 00:12:54.170
you're not allowed to have side effects
inside of your render functions, right?

179
00:12:54.170 --> 00:12:59.020
So, your render functions need to be fast
and they need to be stateless, right?

180
00:12:59.020 --> 00:13:03.369
When I say stateless, it means that
they're not modifying global and

181
00:13:03.369 --> 00:13:04.555
being stateless.

182
00:13:04.555 --> 00:13:09.610
This counter here is an exact counter
example to what I'm telling you,

183
00:13:09.610 --> 00:13:12.153
right, don't do stuff like this.

184
00:13:14.773 --> 00:13:15.903
And given that.

185
00:13:19.617 --> 00:13:23.474
Cool, so the way that you have
state inside of a function,

186
00:13:23.474 --> 00:13:25.600
is you use these hooks.

187
00:13:25.600 --> 00:13:30.021
So these hooks are then passed into React
and then React gives them back to you.

188
00:13:31.903 --> 00:13:35.715
So that's what this location is it gives
you some piece of state that you're

189
00:13:35.715 --> 00:13:38.768
allowed to keep track of
internally to a React application.

190
00:13:38.768 --> 00:13:42.084
In this case,
we're keeping track of the location,

191
00:13:42.084 --> 00:13:47.095
which can change, depending on how
the user updates their form, yeah?

192
00:13:47.095 --> 00:13:51.403
And then you can add as many pieces of
these like hooks states inside of your

193
00:13:51.403 --> 00:13:52.316
application.

194
00:13:52.316 --> 00:13:54.710
Couple of rules about hooks,

195
00:13:54.710 --> 00:13:59.415
they have to be called every
single time in the same order.

196
00:13:59.415 --> 00:14:04.392
Which is to say, don't do things
like if thing you can't do this.

197
00:14:06.378 --> 00:14:11.237
You can't have conditional
creation of hooks,

198
00:14:11.237 --> 00:14:17.171
they have to be created every
single time in the same order.

199
00:14:17.171 --> 00:14:19.891
Cuz the way that React is
keeping track this is,

200
00:14:19.891 --> 00:14:23.228
this component calls these
pieces of state in this order.

201
00:14:23.228 --> 00:14:26.797
So if you're putting ifs or for
loops or things like that in there,

202
00:14:26.797 --> 00:14:29.091
you might be calling them out of order,
and

203
00:14:29.091 --> 00:14:32.426
therefore you might get your
state back out of order, right?

204
00:14:34.222 --> 00:14:36.116
So don't do that.

