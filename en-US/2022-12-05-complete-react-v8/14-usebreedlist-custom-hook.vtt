WEBVTT

1
00:00:02.330 --> 00:00:04.614
We're up to 05 useEffect.

2
00:00:04.614 --> 00:00:08.644
So if you're behind or wanna just
like copy that, that's where we are.

3
00:00:11.412 --> 00:00:12.751
Anything else to say about that?

4
00:00:12.751 --> 00:00:13.689
I don't think so.

5
00:00:17.639 --> 00:00:22.651
Cool, yes,
this is called a controlled form.

6
00:00:22.651 --> 00:00:25.526
So we're using React to
precisely control this form.

7
00:00:25.526 --> 00:00:28.972
This is actually not best practice.

8
00:00:28.972 --> 00:00:34.310
Typically what you'd really
wanna do because we're keeping

9
00:00:34.310 --> 00:00:40.272
track of location and breed and
animal, we actually don't need to.

10
00:00:40.272 --> 00:00:44.536
The only time that we ever
really use these bits of

11
00:00:44.536 --> 00:00:47.667
information is on submit, right?

12
00:00:47.667 --> 00:00:50.903
If you're familiar with how forms work,

13
00:00:50.903 --> 00:00:54.883
you can just grab things
off of the const formData,

14
00:00:57.478 --> 00:01:02.033
=new Form data blah, blah, blah,
you can pull it off of the form, right?

15
00:01:02.033 --> 00:01:03.502
That's called an uncontrolled form.

16
00:01:03.502 --> 00:01:07.192
And then you don't have to worry about
unchanged events and stuff like that,

17
00:01:07.192 --> 00:01:09.307
you just let the browser
handle all of that.

18
00:01:09.307 --> 00:01:12.174
We'll talk about this in a little bit.

19
00:01:12.174 --> 00:01:15.729
But I wanted to show you first
how to do a controlled form

20
00:01:15.729 --> 00:01:20.069
cuz it's a really succinct way of
understanding how state works.

21
00:01:20.069 --> 00:01:23.957
But this is not the best
way of doing forms,

22
00:01:23.957 --> 00:01:27.631
I'll show you that here in a little bit.

23
00:01:27.631 --> 00:01:34.594
Okay, So we have animal.

24
00:01:34.594 --> 00:01:40.302
When I select bird, I wanna have
a dropdown of the correct breeds, right?

25
00:01:40.302 --> 00:01:45.236
So that I see parrot, African gray,
macaw, things like that.

26
00:01:45.236 --> 00:01:48.563
So we're gonna build a custom
hook to do that for us.

27
00:01:48.563 --> 00:01:52.817
We could totally just put it
in another useEffect here and

28
00:01:52.817 --> 00:01:56.550
just do that directly
from within SearchParams.

29
00:01:56.550 --> 00:01:58.660
But I wanna show you how
to clean this up and

30
00:01:58.660 --> 00:02:01.746
make it really nice, and
make a little reusable hook for us.

31
00:02:01.746 --> 00:02:06.397
So that we can say, instead of
useEffect request from API,.blah,

32
00:02:06.397 --> 00:02:10.565
blah, blah, what we can actually
do is say, useBreedList,

33
00:02:10.565 --> 00:02:14.357
and we give it the animal and
we get back a list of breeds.

34
00:02:14.357 --> 00:02:15.820
It's gonna be really nice.

35
00:02:15.820 --> 00:02:20.387
So I want you to create a new file
here in your source directory and

36
00:02:20.387 --> 00:02:22.087
call it useBreedList.

37
00:02:22.087 --> 00:02:26.295
And here,
there's gonna be node.jsx in it, so

38
00:02:26.295 --> 00:02:31.130
you can do .js, or
you can do .jsx, doesn't matter.

39
00:02:31.130 --> 00:02:32.562
I'm gonna do .js.

40
00:02:34.151 --> 00:02:36.821
I have no reason for that.

41
00:02:36.821 --> 00:02:39.446
If you wanna be consistent, do jsx.

42
00:02:39.446 --> 00:02:42.964
If you wanna say that
there's no jsx in here,

43
00:02:42.964 --> 00:02:46.398
therefore I'm not gonna put jsx, do that.

44
00:02:46.398 --> 00:02:51.240
I chose .js because that was what
occurred to my brain two weeks ago, so

45
00:02:51.240 --> 00:02:52.623
that's what I did.

46
00:02:54.226 --> 00:02:58.390
Okay, import{useState,

47
00:02:58.390 --> 00:03:02.903
useEffect} from 'react'.

48
00:03:04.911 --> 00:03:08.884
Okay, I'm gonna have some

49
00:03:08.884 --> 00:03:14.251
localCache=blah, empty object.

50
00:03:14.251 --> 00:03:19.417
And I'm gonna export default function,

51
00:03:21.424 --> 00:03:26.062
useBreedList that takes in an animal.

52
00:03:28.945 --> 00:03:32.464
So what this is gonna do,
is it's gonna take in an animal.

53
00:03:32.464 --> 00:03:36.679
If it's seen the animal before, so
if I do dog and then I switch to cat and

54
00:03:36.679 --> 00:03:41.264
then I go back to dog, it's gonna serve
it from whatever from cache, right?

55
00:03:41.264 --> 00:03:44.520
So it's gonna do,
all right, I got poodle and

56
00:03:44.520 --> 00:03:49.627
Jack Russell Terrier back, then I
switched to cat and then it came back.

57
00:03:49.627 --> 00:03:50.952
Chances are the breeds,

58
00:03:50.952 --> 00:03:54.621
they haven't invented a new breed
in the past 13 seconds, right?

59
00:03:54.621 --> 00:03:57.867
So we can probably just give
them back the same list, right?

60
00:03:57.867 --> 00:04:02.142
Therefore we're doing
this localCache maneuver.

61
00:04:02.142 --> 00:04:08.200
So I'm gonna say const [breedList,
setBreedList],

62
00:04:10.105 --> 00:04:14.083
=useState of an empty array

63
00:04:17.414 --> 00:04:20.718
Const [status setStatus].

64
00:04:20.718 --> 00:04:25.616
This is so you can give back,
I'm unloaded, loading, loaded, right,

65
00:04:25.616 --> 00:04:30.125
so that someone could show different
loading states based on that.

66
00:04:30.125 --> 00:04:34.385
And the useState, and then by default,
it's gonna be unloaded.

67
00:04:37.104 --> 00:04:44.806
Okay, we're gonna do a useEffect.

68
00:04:44.806 --> 00:04:48.925
So if no animal,

69
00:04:51.039 --> 00:04:54.583
setBreedList to be empty array, right?

70
00:04:54.583 --> 00:04:59.295
If they pass me an empty string here or
null or undefined,

71
00:04:59.295 --> 00:05:04.198
I have no breedList,
just send it to be an empty list.

72
00:05:04.198 --> 00:05:10.776
Else if localCache,
if I've seen it before in my localCache,

73
00:05:10.776 --> 00:05:16.248
then setBreedList to be
whatever is in localCache.

74
00:05:19.594 --> 00:05:28.844
Okay, else requestBreedList.

75
00:05:37.288 --> 00:05:41.211
Okay, here inside of the useEffect,

76
00:05:41.211 --> 00:05:46.483
very essential here,
be inside of the useEffect,

77
00:05:46.483 --> 00:05:50.291
async function requestBreedList.

78
00:05:50.291 --> 00:05:54.145
So we're gonna write
the function that we call here.

79
00:05:54.145 --> 00:05:59.002
setBreedList to be empty, And

80
00:05:59.002 --> 00:06:04.204
setStatus to be loading, okay?

81
00:06:04.204 --> 00:06:09.190
From here, const res=await fetch,

82
00:06:11.722 --> 00:06:14.642
http:// or s,

83
00:06:14.642 --> 00:06:20.482
I think it works on both SSL and not,

84
00:06:20.482 --> 00:06:27.313
pets-v2.dev-apis.com/breeds.

85
00:06:27.313 --> 00:06:32.976
And then animal={animal}.

86
00:06:32.976 --> 00:06:38.016
So we're gonna request from this

87
00:06:38.016 --> 00:06:43.056
API that Frondend Masters runs,

88
00:06:43.056 --> 00:06:50.262
a list of breeds,
const json=await res.json

89
00:06:53.006 --> 00:06:59.723
Okay, localCache equals [animals],
so we're gonna save it.

90
00:06:59.723 --> 00:07:04.460
If we call requestBreedList, this means
that we didn't have it before, so

91
00:07:04.460 --> 00:07:11.297
we wanna save it, =json.breeds.

92
00:07:11.297 --> 00:07:15.248
If that doesn't exist,
then just set it to be empty array.

93
00:07:16.561 --> 00:07:24.406
SetBreedList to be (localCache[animal])

94
00:07:24.406 --> 00:07:29.256
And then setStatus to be loaded.

95
00:07:31.371 --> 00:07:36.568
Okay, so now we have this huge effect.

96
00:07:36.568 --> 00:07:39.355
When does this effect rerun?

97
00:07:42.253 --> 00:07:43.497
When what changes?

98
00:07:45.892 --> 00:07:48.734
When animal changes.

99
00:07:48.734 --> 00:07:51.803
Every time that the animal
goes from dog to cat,

100
00:07:51.803 --> 00:07:55.045
we wanna request the new breedList again,
yeah?

101
00:07:55.045 --> 00:08:01.003
So, Run this whenever animal changes.

102
00:08:01.003 --> 00:08:06.199
And then at the end, you're gonna return,

103
00:08:06.199 --> 00:08:12.378
breedList and status,
using the same weird tuple,

104
00:08:12.378 --> 00:08:17.120
tuple, Methodology.

105
00:08:19.354 --> 00:08:23.054
It's a Python word if anyone's coming from
a Python language, or computer science,

106
00:08:23.054 --> 00:08:23.775
but it's dumb.

107
00:08:23.775 --> 00:08:28.215
Apparently the correct way to say it
is tuple, but that sounds dumb, so

108
00:08:28.215 --> 00:08:31.555
I say tupple, which is incorrect but
sounds better.

109
00:08:31.555 --> 00:08:33.604
Okay, so here we are.

110
00:08:35.785 --> 00:08:40.111
I told you that custom hooks are basically
just other hooks packaged together, right?

111
00:08:40.111 --> 00:08:44.721
So we called useState and
useEffect a couple of times in here.

112
00:08:44.721 --> 00:08:47.959
And then we're packaging this up so
that now later,

113
00:08:47.959 --> 00:08:51.727
all I have to do is say useBreedList
instead of blah, right?

114
00:08:51.727 --> 00:08:55.172
So I took a really ugly bit of code and
I encapsulated it.

115
00:08:55.172 --> 00:09:01.182
This is now testable, reusable, and
now I can have this really nice black box,

116
00:09:01.182 --> 00:09:04.698
I feed an animal and
I get back out breedLists.

117
00:09:08.278 --> 00:09:13.147
And now,
I can go back into SearchParams.jsx.

118
00:09:13.147 --> 00:09:21.053
And I can say,
import useBreedList from "./useBreedList".

119
00:09:21.053 --> 00:09:24.523
And instead of having breeds here,

120
00:09:24.523 --> 00:09:30.549
I can just say const
[breeds]=useBreedList (animal).

121
00:09:30.549 --> 00:09:36.257
And voila, I will always have
a correct breedList now.

122
00:09:45.614 --> 00:09:50.999
Let's just go make sure that I'm not
making stuff up, which I am one to do.

123
00:09:50.999 --> 00:09:55.199
Bird, I get all these
nice looking birds back,

124
00:09:55.199 --> 00:09:59.724
I change this to be cat, I get cats back.

125
00:09:59.724 --> 00:10:05.128
And if I go back to bird, Let's just

126
00:10:05.128 --> 00:10:10.075
look at our network tab, just to make sure
that our caching is working correctly.

127
00:10:10.075 --> 00:10:13.760
Trash that, all right,
so now I have animal.

128
00:10:13.760 --> 00:10:18.153
If I go to dog,
I expect it to make a request, right?

129
00:10:18.153 --> 00:10:20.738
It does, right there, you see it.

130
00:10:20.738 --> 00:10:25.076
If I go back to cat, Okay, makes one.

131
00:10:25.076 --> 00:10:28.583
If I go back to dog,
I expect it to not make a request, right?

132
00:10:30.940 --> 00:10:32.088
It didn't.

133
00:10:32.088 --> 00:10:35.878
And yet I see all the dog breeds here,

134
00:10:37.191 --> 00:10:42.577
Cool, Pretty slick, right?

135
00:10:42.577 --> 00:10:45.817
It's kind of a nice way of encapsulating.

136
00:10:45.817 --> 00:10:49.871
There are people that will tell you that
they actually never do effects directly in

137
00:10:49.871 --> 00:10:51.174
any of their components.

138
00:10:51.174 --> 00:10:54.815
They always make a custom hook for
all of the effects that they have.

139
00:10:54.815 --> 00:10:56.936
It's not the worst idea I've heard.

140
00:10:56.936 --> 00:10:59.116
I don't do it because I am lazy.

141
00:10:59.116 --> 00:11:01.717
And sometimes if I have a one-off effect,

142
00:11:01.717 --> 00:11:05.626
then by all means I'll just stick
it directly in the component.

143
00:11:05.626 --> 00:11:10.024
If I use effect twice or three times,
custom hook is a really good idea for

144
00:11:10.024 --> 00:11:11.980
that, or something like this.

145
00:11:11.980 --> 00:11:15.571
I'm only gonna useBreedList in
this particular application, but

146
00:11:15.571 --> 00:11:17.965
it was nice to get a lot
of code out of this one,

147
00:11:17.965 --> 00:11:21.187
cuz how long would SearchParams
be if I had all that in there?

148
00:11:21.187 --> 00:11:28.397
It's already a 90 line component,
it's nice to not be 120 lines, right?

149
00:11:28.397 --> 00:11:31.734
So if I can encapsulate a lot of
complexity into a custom hook,

150
00:11:31.734 --> 00:11:33.735
that's a good place to do it as well.

151
00:11:33.735 --> 00:11:38.663
But what I'm trying to delineate here for
you is, it's a personal choice of

152
00:11:38.663 --> 00:11:42.674
where you put things in a custom
hooks versus when you don't.

153
00:11:42.674 --> 00:11:46.475
So there's extremes on both sides.

154
00:11:46.475 --> 00:11:51.034
As with most things, I try and
be somewhere in the pragmatic middle.

155
00:11:51.034 --> 00:11:52.657
Yeah, Dustin, do you have a question?.

156
00:11:52.657 --> 00:11:55.909
&gt;&gt; Why is requestBreedLst
inside useEffect?

157
00:11:55.909 --> 00:12:00.843
And if the function inside of
useEffect calls an async function,

158
00:12:00.843 --> 00:12:03.094
doesn't it have to be async?

159
00:12:03.094 --> 00:12:10.459
&gt;&gt; Okay, let's answer them one by one.

160
00:12:10.459 --> 00:12:16.413
Why is requestBreedList
inside of the useEffect?

161
00:12:16.413 --> 00:12:19.528
Well, what's nice about doing it this way,
one,

162
00:12:19.528 --> 00:12:21.924
React encourages you to do it this way.

163
00:12:21.924 --> 00:12:25.609
So if you move it outside like this,
it's gonna say, hey,

164
00:12:25.609 --> 00:12:29.465
you haven't actually set that
requestBreedList is in here.

165
00:12:29.465 --> 00:12:33.350
So then you say, requestBreedList,
and this is like, okay, well,

166
00:12:34.772 --> 00:12:37.979
It makes dependencies on side of that,
so therefore you should move it inside.

167
00:12:37.979 --> 00:12:41.206
So, one, React is just gonna
encourage you to do it this way.

168
00:12:41.206 --> 00:12:44.852
That's probably the primary reason,
is so that ESLint stops yelling at me,

169
00:12:44.852 --> 00:12:47.655
which I do a lot of things to get
ESLint to stop yelling at me,

170
00:12:47.655 --> 00:12:51.207
probably childhood trauma or
something like that, I'm not really sure.

171
00:12:51.207 --> 00:12:55.258
But [LAUGH] the second reason is that this

172
00:12:55.258 --> 00:12:59.813
is all coming as part of one effect,
right?

173
00:12:59.813 --> 00:13:03.812
This is atomically what you want to happen
after every single time this re-renders,

174
00:13:03.812 --> 00:13:05.989
and so
you want this effect to happen that way.

175
00:13:05.989 --> 00:13:09.272
And so it makes sense to group
all of these things together.

176
00:13:09.272 --> 00:13:11.406
So requestBreedList is all
happening at the same time.

177
00:13:11.406 --> 00:13:15.771
It all has the same closure,
it all has the same state.

178
00:13:15.771 --> 00:13:18.630
It just makes it for

179
00:13:18.630 --> 00:13:23.463
a nice tidy individual effect.

180
00:13:23.463 --> 00:13:28.259
So that's the reason
why we put it in there.

181
00:13:28.259 --> 00:13:31.650
You're asking for the async effect,
why are we doing this?

182
00:13:31.650 --> 00:13:35.385
Doesn't this have to be an async function,
which makes this an async?

183
00:13:35.385 --> 00:13:37.779
The answer to that is no.

184
00:13:37.779 --> 00:13:42.729
So an async function, the only thing
that's different externally from a normal

185
00:13:42.729 --> 00:13:45.714
function is whenever I
call requestBreedList,

186
00:13:45.714 --> 00:13:49.157
because it's an async function,
what does it return?

187
00:13:49.157 --> 00:13:52.614
A promise,
every async function returns a promise.

188
00:13:52.614 --> 00:13:54.262
In fact, you can see this.

189
00:13:54.262 --> 00:13:58.293
You can see the type up there
that it says, promise, right?

190
00:13:58.293 --> 00:14:03.678
So if I said const promise = blah,
this is now a promise that

191
00:14:03.678 --> 00:14:09.196
I could then await somewhere else,
or I can do a .then here.

192
00:14:09.196 --> 00:14:12.801
But you can see here, I'm just
ignoring whatever it returns, right?

193
00:14:12.801 --> 00:14:15.034
So because I'm not doing
anything with return,

194
00:14:15.034 --> 00:14:16.783
I don't have to do anything about it.

195
00:14:19.153 --> 00:14:22.968
Which is why I put this in an async
function in the first place is because I

196
00:14:22.968 --> 00:14:25.144
wanted to do async await inside of here.

197
00:14:25.144 --> 00:14:30.033
And you cannot make effects async,
because for reasons,

198
00:14:30.033 --> 00:14:34.233
we could get into it,
it doesn't really matter.

199
00:14:34.233 --> 00:14:39.401
Suffice to say that the only thing you can
return an effect is a non-async function.

200
00:14:41.303 --> 00:14:42.582
Does it have to be non-async?

201
00:14:42.582 --> 00:14:43.529
No, it actually could be async.

202
00:14:43.529 --> 00:14:45.494
Anyway, you have to return a function.

203
00:14:45.494 --> 00:14:48.686
So if you wanna do async
await inside of an effect,

204
00:14:48.686 --> 00:14:53.627
you have to make an async function inside
of the effect, just how that works.

205
00:14:55.623 --> 00:15:01.137
Yep, that last sentence probably sums up
better everything that I said before it,

206
00:15:01.137 --> 00:15:02.648
so just stick to that.

207
00:15:02.648 --> 00:15:05.779
If you wanna do async
await inside of an effect,

208
00:15:05.779 --> 00:15:09.473
you must create an async
function inside of the effect.

209
00:15:15.177 --> 00:15:16.909
Cool, other questions?

210
00:15:20.290 --> 00:15:22.964
A question that someone might ask me is,

211
00:15:22.964 --> 00:15:27.932
why are we doing status if we're just
ignoring it inside of SearchParams?

212
00:15:27.932 --> 00:15:30.939
It makes it really easy to test
if you do it that way, right?

213
00:15:30.939 --> 00:15:35.955
So later, in intermediate React when
we go over the testing module, you

214
00:15:35.955 --> 00:15:41.398
basically wait for that to become loaded
and then you can write tests, right?

215
00:15:41.398 --> 00:15:44.026
And by tracking that status
throughout the entire thing,

216
00:15:44.026 --> 00:15:45.803
it allows you to write easy test for it.

217
00:15:45.803 --> 00:15:50.602
So just a suggestion, if you have a custom
hook that is doing something that you have

218
00:15:50.602 --> 00:15:53.482
to wait on,
I would recommend tracking a status,

219
00:15:53.482 --> 00:15:57.687
because then later when you go to do
tests, it makes it very easy to test.

