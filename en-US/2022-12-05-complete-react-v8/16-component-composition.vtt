WEBVTT

1
00:00:00.000 --> 00:00:03.446
Okay, so
that was just handling user input.

2
00:00:03.446 --> 00:00:04.155
That's fine.

3
00:00:04.155 --> 00:00:07.127
We're all done with that.

4
00:00:07.127 --> 00:00:10.361
Let's go onto component composition.

5
00:00:10.361 --> 00:00:13.410
So just kind of like a rule of thumb,

6
00:00:13.410 --> 00:00:19.216
something like this where I'm
rendering out a pet in a list of them.

7
00:00:19.216 --> 00:00:21.537
This is a good kind of
place where it makes sense.

8
00:00:21.537 --> 00:00:24.710
Maybe I should extract in
a component out of this.

9
00:00:24.710 --> 00:00:28.870
Like, for example, this results thing
where I have a list of pets and

10
00:00:28.870 --> 00:00:33.842
that renders out like a bunch of pet
components, that could be reusable, right?

11
00:00:33.842 --> 00:00:37.473
I could use that here in the results page.

12
00:00:37.473 --> 00:00:40.681
I could use that in an admin page
where I'm just showing a list of pets.

13
00:00:40.681 --> 00:00:43.512
Basically, it's something that
you give it a list of pets and

14
00:00:43.512 --> 00:00:45.751
it displays a bunch of
nice looking pets for you.

15
00:00:45.751 --> 00:00:51.026
That seems like it's kind of a good
candidate for a reusable component, right?

16
00:00:51.026 --> 00:00:55.362
So I'm trying to help you figure out
when should I pull things out and

17
00:00:55.362 --> 00:00:57.424
make them their own component.

18
00:00:57.424 --> 00:01:02.864
When something should be individually
testable, or individually usable, or

19
00:01:02.864 --> 00:01:08.887
if something's just getting too big, like
this search params page, like 90 lines.

20
00:01:08.887 --> 00:01:11.777
That's pretty long for a React component.

21
00:01:11.777 --> 00:01:16.400
I'm not gonna give you any sort of
ceiling, but if you have a 300 line or

22
00:01:16.400 --> 00:01:20.069
a 500 line React component,
it's probably too long.

23
00:01:20.069 --> 00:01:23.552
There's probably candidates in there for
stuff for you to pull out.

24
00:01:23.552 --> 00:01:27.972
Smaller, single purpose
components are easier to read,

25
00:01:27.972 --> 00:01:33.578
they're easier to understand, and
when you can do it, you should do it.

26
00:01:33.578 --> 00:01:36.827
Even if it's not reusable,
smaller things are easier to understand,

27
00:01:36.827 --> 00:01:39.166
easier to wrap your mind around,
easier to share.

28
00:01:39.166 --> 00:01:41.564
So, this is a good thing here.

29
00:01:41.564 --> 00:01:45.436
So we're gonna pull this out and
we're gonna make a results page.

30
00:01:45.436 --> 00:01:49.916
So I'm gonna make a new file here,
put in my source directory, and

31
00:01:49.916 --> 00:01:52.476
it's gonna be called Results.jsx.

32
00:01:54.337 --> 00:01:58.477
It's gonna import Pet from ./Pet.

33
00:02:01.602 --> 00:02:06.257
Const results, all it's gonna do is
it's gonna take in the props, and

34
00:02:06.257 --> 00:02:09.291
I'm gonna pull out the pets
part of the props.

35
00:02:09.291 --> 00:02:09.977
That's what this is.

36
00:02:09.977 --> 00:02:11.424
This is just destructuring.

37
00:02:11.424 --> 00:02:16.282
I'm getting, this is expecting a prop
called pets, and it's gonna pull that out.

38
00:02:16.282 --> 00:02:18.635
So that's what this is.

39
00:02:18.635 --> 00:02:23.789
This is going to return a div

40
00:02:23.789 --> 00:02:29.621
with the className = search.

41
00:02:29.621 --> 00:02:34.076
And if there's no pets length,
yeah, pets has no length.

42
00:02:37.187 --> 00:02:39.217
So we're gonna do what's
called the ternary.

43
00:02:41.672 --> 00:02:44.986
So if I have an array of length zero,

44
00:02:44.986 --> 00:02:49.298
it's just gonna say in an h1,
No Pets Found.

45
00:02:52.242 --> 00:02:59.250
Otherwise, It's gonna do pets.map.

46
00:03:06.144 --> 00:03:08.363
And this is gonna be a pet component, and

47
00:03:08.363 --> 00:03:11.052
then we're just gonna give
it all of our things.

48
00:03:11.052 --> 00:03:15.562
Now, I'm gonna show you a little
thing that you'll see, and

49
00:03:15.562 --> 00:03:21.054
I don't want you to do it, but
I'm gonna show you how to do it, ...pet.

50
00:03:24.745 --> 00:03:26.030
And then, you'll need a key.

51
00:03:26.030 --> 00:03:34.260
So key=(pet.id) I don't like this,
but it works.

52
00:03:34.260 --> 00:03:37.975
So let's talk about what it is, and why
I think you should do it the other way.

53
00:03:37.975 --> 00:03:42.356
This is called the spread operator,
which is it's not precisely the same as

54
00:03:42.356 --> 00:03:46.606
the JavaScript one, but you can think
of it as functionally equivalent.

55
00:03:46.606 --> 00:03:51.982
You're basically saying that I have
a bag of properties here inside of pet.

56
00:03:51.982 --> 00:03:58.985
I want you to spread them out over as
if I had done animal = pet.animal,

57
00:03:58.985 --> 00:04:05.980
key = pet.id, name = pet.name,
breed = pet.breed, right?

58
00:04:05.980 --> 00:04:08.809
All of those individually,
you're just saying spread this out,

59
00:04:08.809 --> 00:04:11.097
which is actually literally
what we're about to do.

60
00:04:11.097 --> 00:04:12.623
So why don't I like this?

61
00:04:12.623 --> 00:04:14.844
It's very implicit.

62
00:04:14.844 --> 00:04:17.471
You're basically saying
pass everything along.

63
00:04:17.471 --> 00:04:20.372
Do I want to pass everything along?

64
00:04:20.372 --> 00:04:21.666
I don't know.

65
00:04:21.666 --> 00:04:27.283
Maybe today I do, but tomorrow, maybe
we're gonna add more things from the API.

66
00:04:27.283 --> 00:04:32.387
This is better to be explicit that
this component expects these things,

67
00:04:32.387 --> 00:04:35.576
and therefore, is receiving these things.

68
00:04:35.576 --> 00:04:39.179
Cuz sometimes you'll be looking at
the processes like where the hell did this

69
00:04:39.179 --> 00:04:40.129
come from, right?

70
00:04:40.129 --> 00:04:42.519
And if you're just doing
the spread operator everywhere,

71
00:04:42.519 --> 00:04:45.163
I think there's some performance
implication, but who cares?

72
00:04:45.163 --> 00:04:49.333
What's more important here is
that you're being explicit like,

73
00:04:49.333 --> 00:04:54.998
the pet component expects this, therefore,
I am giving the pet component this, right?

74
00:04:54.998 --> 00:04:58.280
It makes the contractor explicit.

75
00:04:58.280 --> 00:05:01.241
The reason why I show that to you is
you're never really gonna end up at

76
00:05:01.241 --> 00:05:03.398
a company where someone
thinks it's a good idea.

77
00:05:03.398 --> 00:05:07.468
And you're gonna go up just like,
I know that this is a bad idea and

78
00:05:07.468 --> 00:05:09.100
that you are full of crap.

79
00:05:11.514 --> 00:05:13.598
Cuz that is how to be a good co-worker.

80
00:05:13.598 --> 00:05:17.861
[LAUGH] Someone's looking at this like,
I'd never wanna work with Brian.

81
00:05:17.861 --> 00:05:18.955
That's probably smart.

82
00:05:18.955 --> 00:05:28.955
images=pet.images.

83
00:05:31.011 --> 00:05:35.584
Okay, so one thing I will say where is
appropriate to do what I told you not to.

84
00:05:35.584 --> 00:05:40.508
If you have a component that is meant to
be a total pass through component where

85
00:05:40.508 --> 00:05:42.575
it's not meant to do anything.

86
00:05:42.575 --> 00:05:46.180
All it's meant to do is take in
something and then apply some effect and

87
00:05:46.180 --> 00:05:50.108
pass it onward, and it doesn't actually
need to know anything about that.

88
00:05:50.108 --> 00:05:52.282
By all means,
use the spread operator, right?

89
00:05:52.282 --> 00:05:56.986
Cuz you're basically explicitly
saying this component does not

90
00:05:56.986 --> 00:05:59.474
care what's passing through it.

91
00:05:59.474 --> 00:06:03.117
That is totally okay.

92
00:06:03.117 --> 00:06:05.323
And by the way,
if you ever use TypeScript,

93
00:06:05.323 --> 00:06:09.087
which you will in intermediate React,
you have to do it this way, anyway.

94
00:06:09.087 --> 00:06:13.898
So it's just good to get in that habit
because everyone's using TypeScript

95
00:06:13.898 --> 00:06:14.732
these days.

96
00:06:14.732 --> 00:06:18.776
All right, location pet.city, pet.state.

97
00:06:22.379 --> 00:06:26.527
Okay, and then, down here at the bottom,

98
00:06:26.527 --> 00:06:32.998
make sure as always you export results,
export default Results.

99
00:06:32.998 --> 00:06:38.680
Cool, search params, come back here where

100
00:06:38.680 --> 00:06:44.363
you had this pets thing here, put Results,

101
00:06:44.363 --> 00:06:49.295
and we have to pass it in pets, right?

102
00:06:55.605 --> 00:07:03.449
So I deleted that pets.map business from
search.params and I passed in pets here.

103
00:07:03.449 --> 00:07:05.390
And then you can get rid of pet up here,

104
00:07:05.390 --> 00:07:08.728
cuz we're not using that directly
in search params anymore, and

105
00:07:08.728 --> 00:07:12.025
then make sure you're importing
results from results, okay?

106
00:07:12.025 --> 00:07:18.538
So, if we have done our job correctly,
it should look something like this.

107
00:07:18.538 --> 00:07:21.921
The reason why it's styled differently is
we gave it a div with the search class,

108
00:07:21.921 --> 00:07:23.032
which gave it some style.

109
00:07:26.332 --> 00:07:30.849
And now if I put some random stuff in here
and submit, you'll get a No Pets Found,

110
00:07:30.849 --> 00:07:33.187
which is a nice way of
letting a user know.

111
00:07:33.187 --> 00:07:35.419
I wouldn't search for it,
I didn't find anything.

112
00:07:35.419 --> 00:07:36.686
This is what you get.

113
00:07:38.895 --> 00:07:43.797
I know some of you are also thinking like,
location doesn't work super well.

114
00:07:43.797 --> 00:07:45.100
That's because it doesn't.

115
00:07:45.100 --> 00:07:47.784
It's just doing some
basic pattern matching.

116
00:07:47.784 --> 00:07:51.156
I did not put elastic search here or
anything like that.

117
00:07:53.042 --> 00:07:56.744
So just be aware that even though you're
searching for Seattle, Washington,

118
00:07:56.744 --> 00:07:58.690
it's just doing basically text search.

