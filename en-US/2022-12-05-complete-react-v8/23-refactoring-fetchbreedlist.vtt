WEBVTT

1
00:00:00.297 --> 00:00:09.616
So, let's go refactor, Fetch breed list.

2
00:00:15.877 --> 00:00:19.088
It looks really similar to fetch
pet to be totally honest with you.

3
00:00:23.217 --> 00:00:27.510
Fetch breed list.

4
00:00:27.510 --> 00:00:32.935
And instead of calling pets it calls
breeds and instead of this it gets animal.

5
00:00:38.545 --> 00:00:43.127
An ID is that instead

6
00:00:43.127 --> 00:00:47.982
of breeds, animal.

7
00:00:47.982 --> 00:00:51.230
That's it, really is it.

8
00:00:51.230 --> 00:00:58.517
You could probably make some factory
that generates endpoints for you.

9
00:00:58.517 --> 00:01:02.843
Cuz you can see here that they
were basically the same thing.

10
00:01:02.843 --> 00:01:06.320
I usually tend to wait a while before
I try and make an abstraction.

11
00:01:06.320 --> 00:01:10.057
I'm more of a write it three times and
then if on the fourth time maybe

12
00:01:10.057 --> 00:01:13.877
think about it kind of person but
that's just personal experience.

13
00:01:13.877 --> 00:01:18.790
Abstraction is generally your enemy when
it comes to the good maintainable code.

14
00:01:18.790 --> 00:01:22.609
So, this is again, fetch breed list.

15
00:01:22.609 --> 00:01:27.909
Make sure this is breeds animal equals
animal, animals coming from query key,

16
00:01:27.909 --> 00:01:31.719
res okay then fetch do that
res dot JSON fetch breed list.

17
00:01:31.719 --> 00:01:33.875
Okay, so this looks like it's ready to go.

18
00:01:33.875 --> 00:01:38.702
So, we have all of this
nonsense here in breed list we

19
00:01:38.702 --> 00:01:42.228
spent all this time making so pretty.

20
00:01:42.228 --> 00:01:44.440
And we're just gonna just blow it away.

21
00:01:50.485 --> 00:01:51.812
Get rid use effect.

22
00:01:51.812 --> 00:01:52.992
You can get rid of all this stuff.

23
00:01:52.992 --> 00:01:54.319
You're just gonna say import.

24
00:01:56.703 --> 00:01:58.784
Use query.

25
00:01:58.784 --> 00:02:03.876
From 10 stack and then import,
fetch breed list,

26
00:02:03.876 --> 00:02:08.621
from fetch breed list,
get rid of local cache and

27
00:02:08.621 --> 00:02:14.535
this is gonna turn into into
const results equals use query.

28
00:02:17.193 --> 00:02:22.699
Give us the cache key of breeds and
then we're gonna

29
00:02:22.699 --> 00:02:27.704
give it animal and
fetch breed list, okay,?

30
00:02:27.704 --> 00:02:29.295
And then here we're gonna give it results.

31
00:02:33.315 --> 00:02:34.423
Data.

32
00:02:37.926 --> 00:02:40.782
Breeds.

33
00:02:40.782 --> 00:02:44.614
So, this is basically saying, cuz remember
the first time that it goes out to fetch

34
00:02:44.614 --> 00:02:46.771
that it's not going to be available,
right?

35
00:02:46.771 --> 00:02:49.206
It's gonna give you a loading state back.

36
00:02:49.206 --> 00:02:53.146
So, that's what this question mark
period is doing is basically saying,

37
00:02:53.146 --> 00:02:55.344
if this is available, then give me that.

38
00:02:55.344 --> 00:02:57.192
If not, don't give me an error.

39
00:02:57.192 --> 00:03:01.912
And then the question mark you're
basically saying if this any of this

40
00:03:01.912 --> 00:03:04.553
fails give me back just an empty array.

41
00:03:04.553 --> 00:03:08.240
So, it's basically saying if I
don't have results for this yet

42
00:03:08.240 --> 00:03:12.831
give me an empty array otherwise give me
the results and this is results status.

43
00:03:18.566 --> 00:03:19.766
Does that make sense?

44
00:03:19.766 --> 00:03:23.877
This is like ES 2021, it's a fairly
recent feature in JavaScript.

45
00:03:23.877 --> 00:03:27.953
So, if you haven't seen it before,
very forgivable.

46
00:03:27.953 --> 00:03:32.983
&gt;&gt; In the lesson plan, you have if no
animal return an empty array is that

47
00:03:32.983 --> 00:03:37.689
redundant with the question mark,
question mark empty array?

48
00:03:37.689 --> 00:03:43.033
&gt;&gt; Yeah,
it's probably it's better to have that.

49
00:03:43.033 --> 00:03:45.085
Yeah, because you don't wanna
make a request with no animal.

50
00:03:45.085 --> 00:03:47.824
So yes, thank you, if no animal.

51
00:03:47.824 --> 00:03:53.606
So if you get a request for blank then
that means just return an empty array.

52
00:03:53.606 --> 00:03:55.326
We don't need to go to the API for that.

53
00:03:55.326 --> 00:04:01.131
But because it's an a sync function this
will all just work exactly how you want.

54
00:04:01.131 --> 00:04:04.348
Okay, so, I'm gonna argue this is

55
00:04:04.348 --> 00:04:09.190
significantly more simple
we went from having what?

56
00:04:09.190 --> 00:04:11.199
How many lines was that
before I've messed with this?

57
00:04:18.085 --> 00:04:21.908
35 lines, to

58
00:04:24.728 --> 00:04:27.639
Seven.

59
00:04:27.639 --> 00:04:30.459
Let's go make sure this works.

60
00:04:30.459 --> 00:04:32.158
I go home.

61
00:04:32.158 --> 00:04:36.941
Nothing there, click on cat,
that's all there.

62
00:04:36.941 --> 00:04:40.089
Go back to bird.

63
00:04:40.089 --> 00:04:41.799
These are all there.

64
00:04:41.799 --> 00:04:48.654
So, it works the same way
on far less lines of code.

65
00:04:48.654 --> 00:04:51.746
So, it's kinda cool that
you got to implement that,

66
00:04:51.746 --> 00:04:55.524
how you would normally do it without
like no help from a library and

67
00:04:55.524 --> 00:04:59.393
just to see that crap, like react
query wax to do all this for me.

68
00:04:59.393 --> 00:05:03.101
So, Yeah, question.

69
00:05:03.101 --> 00:05:05.244
&gt;&gt; What is the type of the result object?

70
00:05:07.435 --> 00:05:07.998
&gt;&gt; What is the type?

71
00:05:07.998 --> 00:05:09.997
It's a use query result.

72
00:05:09.997 --> 00:05:15.732
[LAUGH] It's something that use query,
it's not anything

73
00:05:15.732 --> 00:05:21.715
native to the browser at
something particular to use query.

74
00:05:21.715 --> 00:05:25.777
I am showing you how to get
stuff from a database, right,

75
00:05:25.777 --> 00:05:28.496
which is cacheable for the most part.

76
00:05:28.496 --> 00:05:33.110
This is also configurable on a request
by request basis as well, right?

77
00:05:33.110 --> 00:05:37.992
So you can say, hey, by default don't
refetch things but this request,

78
00:05:37.992 --> 00:05:41.719
this special one,
refetched this every time, right?

79
00:05:41.719 --> 00:05:46.991
So you can set that on
a query by query basis.

80
00:05:46.991 --> 00:05:51.388
I don't remember the exact syntax,
but you can look it up on the docs.

81
00:05:51.388 --> 00:05:54.383
The one here that I have not talked to
because we're not posting to anything,

82
00:05:54.383 --> 00:05:55.316
is mutations, right?

83
00:05:55.316 --> 00:05:59.319
Or posts to or put to an API, right?

84
00:05:59.319 --> 00:06:03.018
So that, you will use something called,

85
00:06:03.018 --> 00:06:07.457
instead of use query you'll
do use mutation, and

86
00:06:07.457 --> 00:06:12.970
this allows you to post to a site,
it won't cache it, right?

87
00:06:12.970 --> 00:06:16.899
It'll do all the correct things as well.

88
00:06:16.899 --> 00:06:18.796
Outside the scope of this class,

89
00:06:18.796 --> 00:06:22.992
I left the link to the docs down there
you can see how to do it down there, but

90
00:06:22.992 --> 00:06:26.205
it works mostly similar to
what we're looking at here.

91
00:06:26.205 --> 00:06:27.915
&gt;&gt; Well, last question here.

92
00:06:27.915 --> 00:06:32.445
What happens if you have more than
one parameter in your API URL?

93
00:06:32.445 --> 00:06:35.006
&gt;&gt; I think they're talking about this.

94
00:06:35.006 --> 00:06:40.435
Which is to say like here,
I'm only using like one id.

95
00:06:40.435 --> 00:06:41.732
It's a good question.

96
00:06:41.732 --> 00:06:44.365
If I come back to Details,

97
00:06:44.365 --> 00:06:49.754
right now I'm only providing
one here to this array,

98
00:06:49.754 --> 00:06:53.844
but this array can be as long as you want.

99
00:06:53.844 --> 00:06:57.548
Region, let's say I had to
request it regionally, right.

100
00:06:57.548 --> 00:07:02.656
And cost, region equals,
I don't know, let's say

101
00:07:05.198 --> 00:07:08.318
Zh- ch or something like that right and so

102
00:07:08.318 --> 00:07:14.037
here this had to go to a different region
if I go back here to this is in fetch pet

103
00:07:16.071 --> 00:07:19.879
Const region equals query key.

104
00:07:19.879 --> 00:07:24.503
To like, right, it just you can give it
as many things as you want in that array,

105
00:07:24.503 --> 00:07:28.093
it can also be an object in fact
we're about to see that, and so

106
00:07:28.093 --> 00:07:31.088
that would be another good option for
this as well.

