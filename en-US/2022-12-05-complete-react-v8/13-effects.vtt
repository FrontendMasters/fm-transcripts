WEBVTT

1
00:00:00.000 --> 00:00:03.547
So, we're gonna start making
some network request now.

2
00:00:06.246 --> 00:00:11.335
So, I had this app and
I need to make a request to an API,

3
00:00:11.335 --> 00:00:14.673
to get a new list of breeds, right?

4
00:00:14.673 --> 00:00:19.066
Because every time I switch from bird,
which is gonna have parrot and

5
00:00:19.066 --> 00:00:22.030
cockatiel and cockatoo and
things like that.

6
00:00:22.030 --> 00:00:24.882
And I go to cat,
which is gonna have tabbies and

7
00:00:24.882 --> 00:00:26.941
main coons and things like that.

8
00:00:26.941 --> 00:00:32.831
I need to request a new set of breeds,
right, from the API.

9
00:00:32.831 --> 00:00:38.367
So we're gonna use something
called an effect, use effect.

10
00:00:42.541 --> 00:00:45.414
Okay, okay,
we'll do breed list in a second.

11
00:00:45.414 --> 00:00:47.280
We're actually gonna do
the search part first.

12
00:00:47.280 --> 00:00:50.213
So that you can actually search for
pets from the API.

13
00:00:54.039 --> 00:00:57.626
So, we are gonna use still in effect for
this.

14
00:00:57.626 --> 00:01:00.544
And effect is basically something
that's going to happen outside of your

15
00:01:00.544 --> 00:01:01.399
component, right?

16
00:01:01.399 --> 00:01:06.223
So I have my location, animal and breed.

17
00:01:06.223 --> 00:01:09.099
But then once I have those and
user clicks Submit,

18
00:01:09.099 --> 00:01:12.178
I want that to go out to my API and
get a new list of pets so

19
00:01:12.178 --> 00:01:15.560
that the user can see what
they've searched for, right?

20
00:01:15.560 --> 00:01:16.771
That's what these effects are for.

21
00:01:16.771 --> 00:01:19.824
It's like go retrieve this
from some other place or

22
00:01:19.824 --> 00:01:23.307
go do something outside of
the life cycle of my component.

23
00:01:23.307 --> 00:01:25.959
So typically that's API requests.

24
00:01:25.959 --> 00:01:30.073
I'm gonna say most of the time that's
an API request, but it could be like,

25
00:01:30.073 --> 00:01:34.444
go get this from local storage, or go
retrieve this from some other location, or

26
00:01:34.444 --> 00:01:35.693
go save this to an API.

27
00:01:35.693 --> 00:01:40.097
Go post this to an API, or
go save this to local storage.

28
00:01:40.097 --> 00:01:45.400
But it's something outside of your
normal kind of life cycle there.

29
00:01:45.400 --> 00:01:53.634
Okay, so we're gonna add another user
here which is gonna be pets and set pets.

30
00:01:53.634 --> 00:01:58.520
Equals use state,
that's going to be just an empty array of

31
00:01:58.520 --> 00:02:01.951
pets that we've retrieved from the API.

32
00:02:03.753 --> 00:02:10.906
And then here I'm gonna say use effect and
this is gonna be a function.

33
00:02:14.037 --> 00:02:18.445
Okay, and then at the beginning
of whenever this gets set,

34
00:02:18.445 --> 00:02:20.659
I'm gonna say requestpets.

35
00:02:20.659 --> 00:02:24.033
And I'm gonna write this function,
I'm gonna go to the API and

36
00:02:24.033 --> 00:02:25.507
request pets from the API.

37
00:02:27.479 --> 00:02:33.409
Okay, and then here, I'm gonna make
an async function called request pets

38
00:02:37.894 --> 00:02:45.162
And const res equals
await fetch backticks.

39
00:02:45.162 --> 00:02:49.225
Notice, I'm using backticks here not
single quotes or double quotes, but

40
00:02:49.225 --> 00:02:52.155
backticks says the one next
to the one on the keyboard.

41
00:02:52.155 --> 00:02:56.823
HTTP or HTTPS, either ones fine I think.

42
00:02:56.823 --> 00:03:02.932
pets-v2.devdash

43
00:03:02.932 --> 00:03:11.416
apis.com8/pets question

44
00:03:11.416 --> 00:03:18.541
mark animal = animal and

45
00:03:18.541 --> 00:03:27.369
location =${location},

46
00:03:28.971 --> 00:03:37.163
&amp;breed= This

47
00:03:37.163 --> 00:03:42.147
is a template string if you're
not familiar with JavaScript, and

48
00:03:42.147 --> 00:03:47.580
this is basically how you insert like
a animal from here into it, right?

49
00:03:47.580 --> 00:03:49.453
That's what template strings are for.

50
00:03:51.793 --> 00:03:55.171
Okay, this is gonna go out and
fetch this from the API.

51
00:03:55.171 --> 00:03:57.862
If we want the JSON back from it so

52
00:03:57.862 --> 00:04:02.361
we're gonna say const JSON
equals await res.JSON.

53
00:04:02.361 --> 00:04:06.132
And then we're just gonna call set pets,

54
00:04:06.132 --> 00:04:11.640
this function up here that we
just created with json.pets.

55
00:04:15.135 --> 00:04:21.807
Okay, so now we're gonna have a whole
list of pets coming back from the API.

56
00:04:21.807 --> 00:04:24.679
We would like to render that as well.

57
00:04:24.679 --> 00:04:27.936
So underneath our form here.

58
00:04:27.936 --> 00:04:33.219
Yeah, underneath the form but still inside

59
00:04:33.219 --> 00:04:38.514
of the larger div, going to say pets.map.

60
00:04:41.785 --> 00:04:45.577
It's going to take in a pet and

61
00:04:45.577 --> 00:04:50.900
it's going to return a pet from./pet.

62
00:04:50.900 --> 00:04:55.350
And we're going to pass

63
00:04:55.350 --> 00:05:00.024
in name={pet.name}

64
00:05:00.024 --> 00:05:05.811
animal={pet.animal} and

65
00:05:05.811 --> 00:05:10.935
breed={pet.breed}.

66
00:05:13.153 --> 00:05:16.503
Now one more thing here
before we close this off.

67
00:05:20.050 --> 00:05:23.782
We were rendering out all these
various different components.

68
00:05:23.782 --> 00:05:28.816
What happens if, I filter my list
differently, so now I'm sorting by breed

69
00:05:28.816 --> 00:05:33.515
now instead of sorting by animal,
So I have the same

70
00:05:33.515 --> 00:05:38.359
group of elements in my array, but
I've decided to order them differently.

71
00:05:38.359 --> 00:05:42.238
According to React,
all it knows is that array changed and

72
00:05:42.238 --> 00:05:44.467
it doesn't know how it changed.

73
00:05:44.467 --> 00:05:49.112
So what it's gonna do is it's
going to destroy everything inside

74
00:05:49.112 --> 00:05:53.090
of that render tree and
totally render it from scratch.

75
00:05:53.090 --> 00:05:54.817
Which is unnecessary, right?

76
00:05:54.817 --> 00:05:58.975
It'd be better if it's just like,
you just re rendered the same things, but

77
00:05:58.975 --> 00:06:00.137
in a different order.

78
00:06:00.137 --> 00:06:02.679
I'm gonna, instead of destroy
everything and re-render it.

79
00:06:02.679 --> 00:06:05.748
It'd be cool if I could just swap them,
right?

80
00:06:05.748 --> 00:06:10.634
So you can give it this thing called key,
and if you give it some sort of

81
00:06:10.634 --> 00:06:15.035
unique handle per thing,
it can figure that out on it's own.

82
00:06:15.035 --> 00:06:18.536
So each one of these pets has an ID.

83
00:06:18.536 --> 00:06:21.947
So if I give it this
key pet = ID like this,

84
00:06:21.947 --> 00:06:25.459
it can now have a handle on the like,
okay?

85
00:06:25.459 --> 00:06:28.509
I'm just gonna swap these instead
of destroying everything.

86
00:06:31.476 --> 00:06:35.875
And the other thing is React will
yell at you until you give it a key.

87
00:06:35.875 --> 00:06:38.210
The key here is that the key here.

88
00:06:38.210 --> 00:06:40.573
Nice, good job, Brian.

89
00:06:40.573 --> 00:06:45.630
The key here is that it's a unique
identifier per object in your array.

90
00:06:45.630 --> 00:06:50.405
So even if you swapped all of
the various different things,

91
00:06:50.405 --> 00:06:52.420
the ID would be the same.

92
00:06:52.420 --> 00:06:54.279
So name would be a bad key here, right?

93
00:06:54.279 --> 00:06:56.818
Because if I have three different bingos,
right?

94
00:06:56.818 --> 00:07:01.209
It's gonna think that this bingo
is the same as this bingo and

95
00:07:01.209 --> 00:07:03.115
then it's gonna get mad.

96
00:07:03.115 --> 00:07:04.595
So make sure that it's unique per thing.

97
00:07:04.595 --> 00:07:06.504
There has to be some sort
of unique identifier.

98
00:07:06.504 --> 00:07:09.917
If you don't have a unique identifier,
you don't have to give it one.

99
00:07:13.149 --> 00:07:16.576
A bad idea here is you
can give it an index.

100
00:07:16.576 --> 00:07:22.037
But if I swap bingo from 0 to 3,
the index doesn't follow it, right?

101
00:07:22.037 --> 00:07:24.713
So, it's gonna destroy and
re-render it anyway, or

102
00:07:24.713 --> 00:07:28.453
worse it's gonna get like not gonna
work well, so, don't do this either.

103
00:07:31.244 --> 00:07:36.796
Okay, so you did pet here, I imported pet
at the top as well, make sure you do that.

104
00:07:41.293 --> 00:07:45.573
And then one more thing here.

105
00:07:45.573 --> 00:07:49.572
And a fact Runs, every single time,

106
00:07:49.572 --> 00:07:53.317
you re-render the application.

107
00:07:53.317 --> 00:07:57.555
So, you re-render this
component by default.

108
00:07:57.555 --> 00:08:02.669
So, this is going to request the pets
every single time that I type,

109
00:08:02.669 --> 00:08:07.799
which is not what I want,
I only want that on submit events, right?

110
00:08:09.130 --> 00:08:11.580
So how do we do that?

111
00:08:11.580 --> 00:08:13.811
You can give it an array of dependencies.

112
00:08:18.392 --> 00:08:19.933
And here if I give it nothing,

113
00:08:19.933 --> 00:08:22.896
then it's only going to request
once at the beginning and

114
00:08:22.896 --> 00:08:26.490
then it's never going to do it again,
which is actually what I want.

115
00:08:26.490 --> 00:08:31.496
The only time after this that I want to
call request pets is on Submit ,right?

116
00:08:31.496 --> 00:08:33.488
On the form submit, which so

117
00:08:33.488 --> 00:08:38.059
that puts the user in control of
when this research is for things.

118
00:08:39.301 --> 00:08:41.226
So let's go take a look at
this make sure it's working.

119
00:08:41.226 --> 00:08:47.807
You can see here I'm getting things back
from the API now, which is cool, right?

120
00:08:50.831 --> 00:08:57.584
But now even if I click Submit and
things like that it's not going to work.

121
00:08:57.584 --> 00:09:01.330
What happens if I wanted to automatically
research every time they changed animal?

122
00:09:01.330 --> 00:09:06.272
While they put an animal in here,
this is now telling React, hey,

123
00:09:06.272 --> 00:09:11.233
every time that animal changes,
I want you to rerun request pets.

124
00:09:11.233 --> 00:09:16.592
So now if I do this, Now

125
00:09:16.592 --> 00:09:22.812
it's doing it every single time that I
change this, right, which is kinda cool.

126
00:09:22.812 --> 00:09:26.251
But notice that it doesn't change
every time I type in location.

127
00:09:26.251 --> 00:09:28.172
How would I do that?

128
00:09:28.172 --> 00:09:29.921
Well, give it location as well.

129
00:09:34.463 --> 00:09:41.912
And now, every time that I type in here,
It's researching.

130
00:09:44.859 --> 00:09:48.331
Every time that I type something in there.

131
00:09:50.655 --> 00:09:53.116
Honestly also not what I want.

132
00:09:53.116 --> 00:09:59.270
I don't want it to do it ever after
the first time, so again, empty array.

133
00:09:59.270 --> 00:10:01.123
That's what I wanted to
do in the first time.

134
00:10:01.123 --> 00:10:06.117
It's gonna give you a warning and say,
hey, you have this request, pet's thing.

135
00:10:06.117 --> 00:10:09.701
And it's not a dependency on this.

136
00:10:09.701 --> 00:10:14.825
Typically what the exhaustive hooks
rule wants you to do is it wants you to

137
00:10:14.825 --> 00:10:20.538
declare all of your dependencies like
every time this changes, please do that.

138
00:10:20.538 --> 00:10:24.902
It's actually not what I want right now,
but it's looking for you to do this.

139
00:10:24.902 --> 00:10:28.209
And then it's gonna say like well,
this is not a good idea.

140
00:10:28.209 --> 00:10:31.134
Maybe you should move this
inside of here and so

141
00:10:31.134 --> 00:10:36.084
he was like okay I'll do this inside of it
and then it wants you to do a location,

142
00:10:36.084 --> 00:10:40.364
animal, And breed.

143
00:10:40.364 --> 00:10:42.970
And then finally,
this is going to be satisfied.

144
00:10:42.970 --> 00:10:46.390
But this is not the behavior that
I'm actually looking for, right?

145
00:10:46.390 --> 00:10:51.532
The behavior that I'm actually looking for
is on submit for this research.

146
00:10:51.532 --> 00:10:58.898
So what I had the first time
was actually what I wanted.

147
00:10:58.898 --> 00:11:01.873
So I'm going to delete that.

148
00:11:01.873 --> 00:11:03.837
We're gonna say on submit here.

149
00:11:09.618 --> 00:11:11.926
And this is a function.

150
00:11:11.926 --> 00:11:15.987
The first thing to say is
e.prevent default cuz we don't

151
00:11:15.987 --> 00:11:19.378
actually want it to fully form submit,
right?

152
00:11:19.378 --> 00:11:23.323
And then we're going to say request pets.

153
00:11:23.323 --> 00:11:27.124
This is now the behaviour
that we're looking for.

154
00:11:27.124 --> 00:11:30.617
So if I go over here and
refresh, and I click cat,

155
00:11:30.617 --> 00:11:35.760
nothing has searched now but
if I click Submit, now I get cats.

156
00:11:35.760 --> 00:11:40.262
That's the workflow I was looking for.

157
00:11:40.262 --> 00:11:47.260
Okay, I still have this like annoying,
like warning, right?

158
00:11:47.260 --> 00:11:48.686
So you can actually click on this.

159
00:11:48.686 --> 00:11:56.073
You can say disable,
React hooks exhaustive for this line.

160
00:11:59.454 --> 00:12:02.507
And by doing that, now it actually
going to ignore that and go.

161
00:12:09.015 --> 00:12:11.099
The way I actually have
my notes is this way.

162
00:12:14.872 --> 00:12:17.762
So how do we wanna do that?

163
00:12:17.762 --> 00:12:18.707
I'm gonna do it this way.

164
00:12:24.952 --> 00:12:28.230
Set, not disable next line,
just disable line.

165
00:12:28.230 --> 00:12:30.665
And there we go.

166
00:12:30.665 --> 00:12:34.514
You'll find that you'll do this somewhat
frequently with exhaustive depth.

167
00:12:34.514 --> 00:12:36.419
That's why it's a warning and
not an error.

168
00:12:37.730 --> 00:12:43.080
Even though it's a warning and
like my, CI would pass with this.

169
00:12:43.080 --> 00:12:45.254
I like to be explicit as like,
I'm explicitly,

170
00:12:45.254 --> 00:12:48.410
I know that there's an error here and
I am ignoring it.

171
00:12:48.410 --> 00:12:51.291
Because it's not the behavior that
I wanted to describe with my code.

172
00:12:53.429 --> 00:12:55.592
That makes sense?

173
00:12:55.592 --> 00:12:57.440
Do the dependencies make sense here?

174
00:12:58.800 --> 00:13:02.830
You're basically just telling me like,
hey, when do I run this effect again?

175
00:13:02.830 --> 00:13:04.057
And by giving it an empty array,

176
00:13:04.057 --> 00:13:06.063
the answer to that question
is never run this again.

177
00:13:06.063 --> 00:13:09.270
Run it once so that the workflow here,

178
00:13:09.270 --> 00:13:14.293
it's gonna do its first render
without using this effect.

179
00:13:14.293 --> 00:13:18.403
And then immediately after that effect has
finished or the render has finished, so

180
00:13:18.403 --> 00:13:22.630
that you can like show a loading screen or
whatever you need to do there.

181
00:13:22.630 --> 00:13:26.965
As soon as that's done,
then run this effect.

182
00:13:26.965 --> 00:13:32.011
By giving it an empty array,
you're saying never do this again.

183
00:13:32.011 --> 00:13:35.020
After that very first time,
never do it again.

184
00:13:35.020 --> 00:13:41.098
If I leave this off, Now,
it's gonna run all the time.

185
00:13:41.098 --> 00:13:46.316
No matter what, if it detects anything
ever changing ever, look at that.

186
00:13:46.316 --> 00:13:49.324
Like it gets really janky.

187
00:13:49.324 --> 00:13:50.830
So don't do that either.

188
00:13:50.830 --> 00:13:54.738
Cuz it's rendering every time
that it calls pets, right?

189
00:13:54.738 --> 00:13:56.516
So don't do that either.

190
00:13:56.516 --> 00:13:57.325
Yeah.

191
00:13:57.325 --> 00:14:01.087
&gt;&gt; Before hooks, would we have done
this with component did mount is this

192
00:14:01.087 --> 00:14:03.592
effectively replacing component did mount?

193
00:14:03.592 --> 00:14:04.734
&gt;&gt; Yes, that's exactly what's replacing.

194
00:14:04.734 --> 00:14:07.509
I think it actually runs
literally at the same time.

195
00:14:07.509 --> 00:14:12.550
So yeah, I think it's totally the same.

196
00:14:12.550 --> 00:14:14.915
We'll look at class components
here in just a second, so

197
00:14:14.915 --> 00:14:16.553
we'll get more into the depth on that.

198
00:14:16.553 --> 00:14:20.267
&gt;&gt; Is this a good example
of best practices for

199
00:14:20.267 --> 00:14:23.369
using a third party API in a form?.

200
00:14:23.369 --> 00:14:26.258
&gt;&gt; Yeah, this is exactly how you do it.

201
00:14:26.258 --> 00:14:29.588
[COUGH] We're about to
get into React query,

202
00:14:29.588 --> 00:14:33.900
which is kind of like the next
level on top of that.

203
00:14:33.900 --> 00:14:39.160
But for pure React with nothing else,
this is how you do it.

204
00:14:39.160 --> 00:14:43.658
Really the only way to do it
&gt;&gt; Why is it necessary to run request pets

205
00:14:43.658 --> 00:14:44.520
initially?

206
00:14:46.810 --> 00:14:50.770
&gt;&gt; So it's good question,
why do I wanna run it initially?

207
00:14:50.770 --> 00:14:58.369
Notice that this has a list of dogs,
a list of list of pets on load.

208
00:14:58.369 --> 00:15:04.567
If I don't run this effect,
now there's nothing, right?

209
00:15:04.567 --> 00:15:05.944
Nothing loads on initially.

210
00:15:05.944 --> 00:15:10.546
So you wanna do it so
that something loads initially, right?

211
00:15:10.546 --> 00:15:13.850
All right, so
now I have learned on all that.

212
00:15:13.850 --> 00:15:15.060
So you're showing these or something.

