WEBVTT

1
00:00:00.253 --> 00:00:05.006
We are gonna talk about
special case React tools.

2
00:00:05.006 --> 00:00:07.768
So, we're gonna be starting
here on error boundaries.

3
00:00:11.562 --> 00:00:14.474
So, regardless of whether or
not you want to,

4
00:00:14.474 --> 00:00:18.299
sometimes you end up with errors
inside of your components.

5
00:00:18.299 --> 00:00:22.675
Sometimes this is gonna come from things
like malformed API responses that's been

6
00:00:22.675 --> 00:00:25.183
the one that's I've
typically seen the most.

7
00:00:25.183 --> 00:00:27.711
But usually it's things from like outside
of your control maybe it's like user

8
00:00:27.711 --> 00:00:28.586
generated input, right?

9
00:00:28.586 --> 00:00:31.588
They're trying to put something in
there that causes an error that

10
00:00:31.588 --> 00:00:32.452
crashes your app.

11
00:00:32.452 --> 00:00:37.673
You can be kind of defensive with that
with something called an error boundary.

12
00:00:37.673 --> 00:00:41.490
A good example of a usefal error boundary
as I'm building this entire app,

13
00:00:41.490 --> 00:00:45.750
like the entire course website that you
see right now it's built in React, right?

14
00:00:45.750 --> 00:00:49.218
It's built in Next.js, which uses React.

15
00:00:49.218 --> 00:00:52.032
Next.js, has like a error boundary
at the top of your app so

16
00:00:52.032 --> 00:00:54.339
that it can catch your errors and
say like, hey,

17
00:00:54.339 --> 00:00:57.454
there was an error inside of your app,
here's how you can fix it.

18
00:00:57.454 --> 00:00:59.613
That's useful for like developer
tooling and stuff like that as well.

19
00:00:59.613 --> 00:01:04.701
So your app doesn't always need an error
boundary but it's frequently helpful.

20
00:01:04.701 --> 00:01:08.777
So I alluded to in the previous lesson,
that there are some things that

21
00:01:08.777 --> 00:01:12.730
function components that cannot do,
the class components can do.

22
00:01:12.730 --> 00:01:17.729
And this is basically,
mostly it which is a component did catch.

23
00:01:17.729 --> 00:01:21.709
It's a life cycle method
that is only available to

24
00:01:21.709 --> 00:01:26.657
function components that you
cannot do in class components.

25
00:01:26.657 --> 00:01:31.851
So we're gonna go ahead and
build one and then we're going

26
00:01:31.851 --> 00:01:36.945
to wrap I think our details
route with an error boundary.

27
00:01:36.945 --> 00:01:41.339
So I'm gonna write this code here I'll
be honest with you this is mostly

28
00:01:41.339 --> 00:01:46.046
taken directly from the React docs and
it's not that I'm such a huge thing.

29
00:01:46.046 --> 00:01:49.807
It's just that this is basically the only
way to do an error boundary, right?

30
00:01:49.807 --> 00:01:53.930
So let's pop over to our app here and

31
00:01:53.930 --> 00:01:59.154
we're gonna create a new file in source,
and

32
00:01:59.154 --> 00:02:04.261
we're gonna call it ErrorBoundary.jsx.

33
00:02:04.261 --> 00:02:11.633
And we're gonna import
Component from React and

34
00:02:11.633 --> 00:02:19.555
we're gonna important Link
from react router dom.

35
00:02:19.555 --> 00:02:25.142
We're gonna make a class component
you can call it ErrorBoundary and

36
00:02:25.142 --> 00:02:27.267
this extends component.

37
00:02:31.619 --> 00:02:38.037
So state, we're gonna have just one,
we're gonna call it HasError true or

38
00:02:38.037 --> 00:02:44.675
false, what are we gonna put they're
probably false, cuz it start with one.

39
00:02:44.675 --> 00:02:50.444
And you need to create a static method

40
00:02:50.444 --> 00:02:56.407
called getDerivedStateFromError.

41
00:03:00.289 --> 00:03:03.566
Okay, so basically every
time that there's an error,

42
00:03:03.566 --> 00:03:08.098
it's going to call this function and
you're just gonna give it like, okay,

43
00:03:08.098 --> 00:03:12.507
if you encounter an error, this is what
I want you to set the new state to be.

44
00:03:12.507 --> 00:03:16.665
So in our case, if there is an error,
then we want the new state,

45
00:03:16.665 --> 00:03:18.604
to be has error true, right?

46
00:03:18.604 --> 00:03:21.736
So you're just gonna return an object,

47
00:03:21.736 --> 00:03:26.905
it's basically like calling set state,
right, hasError true.

48
00:03:26.905 --> 00:03:29.765
So anytime that there is an error,

49
00:03:29.765 --> 00:03:34.214
then you want it to have an error,
right that tracks.

50
00:03:34.214 --> 00:03:36.825
Some of you might be
wondering what static means,

51
00:03:36.825 --> 00:03:40.441
this is like a ES6 class thing this
is not necessarily a React thing.

52
00:03:40.441 --> 00:03:44.813
If you put a static method on a class,
the way that you would call that

53
00:03:44.813 --> 00:03:48.742
method would be
ErrorBoundary.GetDeriveState, right?

54
00:03:48.742 --> 00:03:52.399
So you would actually call
the method directly on the class and

55
00:03:52.399 --> 00:03:56.628
not necessarily on an instance of
the class right so you don't have like

56
00:04:00.997 --> 00:04:03.263
This is how you instantiate a class,
right?

57
00:04:03.263 --> 00:04:06.300
There's no method on here called
getDerivedStateFromError.

58
00:04:06.300 --> 00:04:09.724
This one's not real because
this is a static method.

59
00:04:09.724 --> 00:04:13.139
So the static method you call
directly on the class itself,

60
00:04:13.139 --> 00:04:17.115
that doesn't make a tonne of sense,
don't worry too much about it.

61
00:04:17.115 --> 00:04:20.586
But that's the difference between and
that's why we have to have static here.

62
00:04:20.586 --> 00:04:22.924
It's because React has to call
it directly on the class and

63
00:04:22.924 --> 00:04:24.745
not necessarily on
an instance of the class.

64
00:04:27.961 --> 00:04:32.737
But again, not super important
only if you're curious.

65
00:04:32.737 --> 00:04:38.100
Okay, so we have our initial state,
we have this get derived states from prop,

66
00:04:38.100 --> 00:04:42.506
and now we're gonna do a method
here called ComponentDidCatch,

67
00:04:42.506 --> 00:04:44.844
which this is a life cycle method.

68
00:04:44.844 --> 00:04:47.577
This accepts error and info so

69
00:04:47.577 --> 00:04:52.836
this is gonna be the actual
error that it caught, right?

70
00:04:52.836 --> 00:04:57.394
And then this is gonna be some additional
info that React will give you.

71
00:04:57.394 --> 00:05:03.138
I just did console.error ErrorBoundary

72
00:05:03.138 --> 00:05:07.077
component caught an error,

73
00:05:07.077 --> 00:05:12.329
whatever you think is gonna be a useful

74
00:05:12.329 --> 00:05:18.084
error message there with error and info.

75
00:05:18.084 --> 00:05:20.169
I'm just doing this to console error.

76
00:05:20.169 --> 00:05:24.859
But, typically you probably would wanna
send this to like a track js or a century

77
00:05:24.859 --> 00:05:29.759
or something like that something that's
like some aggregation of error service.

78
00:05:29.759 --> 00:05:33.247
This would be a perfect place to like,
hey, we're seeing client side errors here.

79
00:05:33.247 --> 00:05:35.725
Ship that off to your
error tracking software.

80
00:05:35.725 --> 00:05:39.226
So service kind of thing, right?

81
00:05:39.226 --> 00:05:40.694
Yeah, Mark.

82
00:05:40.694 --> 00:05:44.428
&gt;&gt; You might have already
covered this a bit, but

83
00:05:44.428 --> 00:05:48.944
why is this a class component
since React 18 came out?

84
00:05:48.944 --> 00:05:52.596
Do we still not have anything for
error boundaries and function components?

85
00:05:52.596 --> 00:05:55.223
&gt;&gt; We do not,
you still have to do it this way.

86
00:05:55.223 --> 00:06:00.372
There's nothing in function components
that allow you to do component did catch.

87
00:06:00.372 --> 00:06:05.008
These two methods here,
are the reason why we have to use a class

88
00:06:05.008 --> 00:06:09.837
component cause there is no
equivalent in function components.

89
00:06:09.837 --> 00:06:12.278
Yeah, good question.

90
00:06:12.278 --> 00:06:14.130
This is as far as I know,

91
00:06:14.130 --> 00:06:19.521
the only case where you still
absolutely must use a class component.

92
00:06:19.521 --> 00:06:25.115
There's other stylistic reasons to
choose to do a class component,

93
00:06:25.115 --> 00:06:29.171
but this is when you have
to use a class component.

94
00:06:29.171 --> 00:06:33.699
Okay, so I'll just leave you
like a little note here.

95
00:06:33.699 --> 00:06:39.907
Typically, you would log this
to something like track JS or

96
00:06:39.907 --> 00:06:43.517
New Relic or something like that.

97
00:06:47.392 --> 00:06:52.377
Okay, and then here we'll put
a render function again every

98
00:06:52.377 --> 00:06:55.220
component has a render function.

99
00:06:55.220 --> 00:07:02.451
You just gonna say,
if this that's.state.hasError then

100
00:07:02.451 --> 00:07:07.990
we're gonna return some
error state like UI.

101
00:07:07.990 --> 00:07:13.127
So I'm just gonna put this in an h2

102
00:07:13.127 --> 00:07:19.869
here of there was an error
with this listing.

103
00:07:19.869 --> 00:07:23.433
We'll put a little link here,

104
00:07:23.433 --> 00:07:28.377
link to just the homepage, click here to,

105
00:07:30.829 --> 00:07:34.549
Go back to the home page, okay?

106
00:07:34.549 --> 00:07:38.600
So, if there's an error, display this,
give them a link to go back to

107
00:07:38.600 --> 00:07:41.705
the homepage so
it kind of gracefully fails for them.

108
00:07:41.705 --> 00:07:50.290
Otherwise we just want to return
this.props.children right?

109
00:07:51.900 --> 00:07:57.019
If there is no error we want this to
just seamlessly pass through right?

110
00:07:57.019 --> 00:08:02.214
Because we're gonna surround the details
route with an error boundary.

111
00:08:02.214 --> 00:08:08.963
And we want details to render just
normally with no interference.

112
00:08:08.963 --> 00:08:12.655
If there is no error and if there is
an error, then we wanted to show this,

113
00:08:12.655 --> 00:08:13.634
that's the idea.

114
00:08:16.273 --> 00:08:21.251
Okay, and then we're going to

115
00:08:21.251 --> 00:08:26.803
export default ErrorBoundary and

116
00:08:26.803 --> 00:08:31.211
that is an ErrorBoundary.

117
00:08:31.211 --> 00:08:37.152
So let's go make details use this
we're gonna go back to details.jsx

118
00:08:37.152 --> 00:08:42.300
we're going to import
ErrorBoundary from ErrorBoundary.

119
00:08:43.970 --> 00:08:48.731
Now, the biggest temptation here would be
to just wrap this with ErrorBoundary like

120
00:08:48.731 --> 00:08:49.613
this, right?

121
00:08:49.613 --> 00:08:52.920
Don't do that, why?

122
00:08:53.990 --> 00:08:59.300
An error boundary can only catch things in
components that are rendered inside of it.

123
00:08:59.300 --> 00:09:04.293
So if I put error boundary here I won't
catch any error that happens in details,

124
00:09:04.293 --> 00:09:04.823
right?

125
00:09:04.823 --> 00:09:10.136
So if I have an issue up here with like
is loading or the use query up here,

126
00:09:10.136 --> 00:09:14.494
it won't catch that because
it's in the same component.

127
00:09:14.494 --> 00:09:19.445
We have to have a component that
wraps inside of so only catches,

128
00:09:19.445 --> 00:09:23.032
errors from components
that are inside of it.

129
00:09:23.032 --> 00:09:27.007
So, I know this is a little weird, but

130
00:09:27.007 --> 00:09:31.979
the way we're gonna do
this is we're gonna make

131
00:09:31.979 --> 00:09:37.093
a function here called
details ErrorBoundary.

132
00:09:37.093 --> 00:09:42.505
And here we're just gonna
return error boundary and

133
00:09:42.505 --> 00:09:46.811
we're gonna put details in inside of it.

134
00:09:46.811 --> 00:09:50.642
And then we're gonna export errors
about details boundary here.

135
00:09:59.346 --> 00:10:00.859
So does this expect any props?

136
00:10:00.859 --> 00:10:01.650
It doesn't.

137
00:10:04.122 --> 00:10:09.173
So our details page doesn't actually
accept any props up here right?

138
00:10:09.173 --> 00:10:14.360
But what is one problem with this if for
whatever reason we started

139
00:10:14.360 --> 00:10:20.795
passing in props to details as of right
now they will get killed right here right?

140
00:10:20.795 --> 00:10:26.551
So because we are not passing
these props into details.

141
00:10:26.551 --> 00:10:30.713
So this would be like one of
the only cases I'd be okay with

142
00:10:30.713 --> 00:10:35.574
you just saying ...props here
using the spread operator here,

143
00:10:35.574 --> 00:10:40.899
because details error boundary
doesn't care about these props at all.

144
00:10:40.899 --> 00:10:43.482
It's meant to be totally seamless and

145
00:10:43.482 --> 00:10:46.882
passed these props through seamlessly,
right?

146
00:10:46.882 --> 00:10:52.267
So this is what I would do here is
basically say like I don't care what

147
00:10:52.267 --> 00:10:57.558
props are coming in just go directly
through the ErrorBoundary and

148
00:10:57.558 --> 00:11:01.257
don't care about what's coming in, right?

149
00:11:01.257 --> 00:11:04.230
Details and restatement have an opinion
of the property go into details.

150
00:11:08.675 --> 00:11:11.390
Does that make sense why we would do that?

151
00:11:11.390 --> 00:11:12.629
Just to be super concrete.

152
00:11:14.723 --> 00:11:19.744
And don't follow me here,
I'm just showing you an example I have

153
00:11:19.744 --> 00:11:24.494
details here let's say for
example, I was passing through,

154
00:11:24.494 --> 00:11:28.259
I don't know const
importantNumber equals 5.

155
00:11:28.259 --> 00:11:33.205
And here I put, importantNumber
equals important Number, so

156
00:11:33.205 --> 00:11:37.512
now I'm passing in this
property to details, right?

157
00:11:37.512 --> 00:11:42.952
And I go back to details.jsx
if I don't do this,

158
00:11:42.952 --> 00:11:47.996
important number will
never make it to here,

159
00:11:47.996 --> 00:11:51.062
right, into these props.

160
00:11:51.062 --> 00:11:55.313
So I have to make sure that these props
are being passed through directly to

161
00:11:55.313 --> 00:11:56.350
details, okay.

162
00:11:56.350 --> 00:11:59.713
That's concretely what I'm
talking about when I say that.

163
00:11:59.713 --> 00:12:01.044
For now, it actually doesn't matter,

164
00:12:01.044 --> 00:12:02.897
right, because we're not
passing anything through.

165
00:12:02.897 --> 00:12:08.037
So if we were doing TypeScript
which you will an intermediate

166
00:12:08.037 --> 00:12:11.981
React you do have to be
more thoughtful about it

167
00:12:15.154 --> 00:12:18.790
Okay so this is now working but
this is it for

168
00:12:18.790 --> 00:12:23.143
an ErrorBoundary,
if we go back to details.jsx.

169
00:12:23.143 --> 00:12:28.044
If there's any error inside of Details or
any component rendered inside of

170
00:12:28.044 --> 00:12:33.425
Details like Carousel for example, this
will get caught at this error boundary.

171
00:12:33.425 --> 00:12:37.797
So let's just see an example here,
we have Carousel here at the beginning

172
00:12:37.797 --> 00:12:40.983
of render here,
I'm just gonna say throw new Error.

173
00:12:46.491 --> 00:12:49.898
The dreaded LOL error.

174
00:12:49.898 --> 00:12:52.226
So now if I go back to my AdoptMe page,

175
00:12:56.129 --> 00:12:58.810
That was just next JS
rendering a bunch of times.

176
00:12:58.810 --> 00:13:03.167
As you can see here, there is an error
with this listing, you should go back and

177
00:13:03.167 --> 00:13:04.897
so it doesn't crash, right?

178
00:13:04.897 --> 00:13:08.095
Now you can click here and
it'll go back here.

179
00:13:08.095 --> 00:13:12.195
So it's catching this error here, if you
look at our console here you can see

180
00:13:12.195 --> 00:13:14.583
ErrorBoundary component caught an error.

181
00:13:14.583 --> 00:13:18.710
This is cuz it's calling
the component did catch, right?

182
00:13:21.466 --> 00:13:24.226
All right this is the error
message that we wrote here and

183
00:13:24.226 --> 00:13:26.408
it's getting the derive state from error.

184
00:13:26.408 --> 00:13:30.310
So therefore, this is all working
the way that we intended.

185
00:13:30.310 --> 00:13:31.226
Yeah, question.

186
00:13:31.226 --> 00:13:34.065
&gt;&gt; And this error boundary
is totally reusable like

187
00:13:34.065 --> 00:13:37.466
we could wrap pretty much any
component with an expected?

188
00:13:37.466 --> 00:13:38.090
&gt;&gt; Absolutely.

189
00:13:38.090 --> 00:13:39.782
So what I would typically do,

190
00:13:39.782 --> 00:13:44.830
we made a very not reasonable cuz
it's displaying this message, right?

191
00:13:44.830 --> 00:13:49.123
The way that you can handle this is
you can basically make a prop here.

192
00:13:49.123 --> 00:13:54.557
So instead of returning
this error message,

193
00:13:54.557 --> 00:14:00.708
you would return this
.props.errorComponent.

194
00:14:00.708 --> 00:14:06.046
Right and
now this is just gonna display that and

195
00:14:06.046 --> 00:14:11.253
if we go back to Details
we would have to provide

196
00:14:11.253 --> 00:14:18.341
to our error boundary here error
component equals blah right?

197
00:14:18.341 --> 00:14:21.477
And then now this is super reusable
right this error boundary could be used

198
00:14:21.477 --> 00:14:24.426
anywhere because you can put any
error message you want in there right

199
00:14:28.669 --> 00:14:30.183
So, yes, very reusable.

200
00:14:33.295 --> 00:14:36.502
I'm very much, I think I've mentioned
this previously in the class,

201
00:14:36.502 --> 00:14:38.427
but I'm very much the person who's like,

202
00:14:38.427 --> 00:14:42.125
let's wait until we repeat ourselves
a couple times before we abstract, right?

203
00:14:42.125 --> 00:14:45.508
So right now this is the only error
boundary we have in our apps I'm totally

204
00:14:45.508 --> 00:14:48.471
fine just dumping directly in
the message that I wanna put here.

205
00:14:48.471 --> 00:14:54.269
But if I start using this two three four
times then I'll make it more reusable.

206
00:14:54.269 --> 00:14:59.048
But that is a huge temptation with React
something that I see people stumble over

207
00:14:59.048 --> 00:15:02.328
all the time is they wanna
make all these very elegant,

208
00:15:02.328 --> 00:15:05.200
reusable components for
one use case, right?

209
00:15:05.200 --> 00:15:09.156
So you're just adding complexity for
really no use.

210
00:15:09.156 --> 00:15:15.461
So yeah, my invitation is to not do
that were to repeat, I'm usually again,

211
00:15:15.461 --> 00:15:20.314
I say read it twice on the third
time think about abstracting

212
00:15:23.991 --> 00:15:29.578
Okay, let's remove our error here.

213
00:15:29.578 --> 00:15:33.978
Okay, other questions?

214
00:15:33.978 --> 00:15:39.895
Anything about errors kind of useful?

215
00:15:39.895 --> 00:15:43.360
I'll see a lot of people like
wrap their entire app, right?

216
00:15:43.360 --> 00:15:45.943
So they'll come back to the app.jsx level,
and

217
00:15:45.943 --> 00:15:48.590
then they'll just like
put error boundary here.

218
00:15:51.060 --> 00:15:55.092
Makes sense like if you just want to like
have a generalized hey, there was an error

219
00:15:55.092 --> 00:15:58.725
in the app, we're gonna send you back
to the homepage kind of that error.

220
00:15:58.725 --> 00:16:04.337
And I'll see people do like
very fine granular ones,

221
00:16:04.337 --> 00:16:08.959
it just depends on what
your apps use cases.

222
00:16:08.959 --> 00:16:09.490
Yeah, Mark.

223
00:16:11.100 --> 00:16:15.614
&gt;&gt; So where would you wrap
specific component versus

224
00:16:15.614 --> 00:16:19.169
like higher up the tree and the errors.

225
00:16:19.169 --> 00:16:21.130
&gt;&gt; That's going to be very much to taste.

226
00:16:21.130 --> 00:16:26.450
So my personal opinion on it is If I
had a component where I expected

227
00:16:26.450 --> 00:16:31.093
there to be errors, and
like a really good example that,

228
00:16:31.093 --> 00:16:35.380
would be like I used to
work on reddit.com, right?

229
00:16:35.380 --> 00:16:38.315
And I used to work on
like the Reddit redesign.

230
00:16:38.315 --> 00:16:44.399
So, we had the like authoring, what you
see what you get kind of editor, right?

231
00:16:44.399 --> 00:16:47.653
Those things just have errors
because it's user input,

232
00:16:47.653 --> 00:16:50.238
user input is just rife with errors,
right?

233
00:16:50.238 --> 00:16:54.144
So that'd be a really good use case
to like gracefully handle errors and

234
00:16:54.144 --> 00:16:55.860
coming from a user.

235
00:16:55.860 --> 00:16:59.890
That would be a very specific use case
of like, okay, this is user input,

236
00:16:59.890 --> 00:17:01.910
this is going to be right for errors.

237
00:17:01.910 --> 00:17:06.162
This is a really good place for
me to try and be very intentional.

238
00:17:06.162 --> 00:17:09.830
About trying to catch an error versus,

239
00:17:09.830 --> 00:17:14.844
I don't know,
something like my site here, right?

240
00:17:14.844 --> 00:17:23.470
There's not really gonna be much errors
on a pretty static course website, right?

241
00:17:23.470 --> 00:17:27.020
So in this particular case, I don't have
an error boundary on this, by the way.

242
00:17:27.020 --> 00:17:30.800
But if I wanted to have one, then I would
probably just have one top level one.

243
00:17:32.690 --> 00:17:36.532
I mean, it's basically the same logic
that goes through your head as like,

244
00:17:36.532 --> 00:17:37.983
when am I using throw catch?

245
00:17:37.983 --> 00:17:44.948
No or rather a try catch, not throw catch,
you don't use try catch everywhere, right?

246
00:17:44.948 --> 00:17:48.303
You use it in specific cases when
you think there might be an error.

247
00:17:48.303 --> 00:17:54.568
You can think of error boundaries as
basically the catch of the React world.

248
00:17:54.568 --> 00:17:55.828
Because it literally is.

249
00:17:55.828 --> 00:17:57.211
[LAUGH]

