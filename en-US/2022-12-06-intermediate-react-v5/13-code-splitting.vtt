WEBVTT

1
00:00:00.066 --> 00:00:03.650
We are going to move on to code splitting,
or more specifically,

2
00:00:03.650 --> 00:00:05.353
advanced React performance.

3
00:00:05.353 --> 00:00:06.567
We're gonna do two different things.

4
00:00:06.567 --> 00:00:08.520
We're gonna do code splitting, and

5
00:00:08.520 --> 00:00:11.420
then we're gonna do server
side rendering together.

6
00:00:11.420 --> 00:00:14.300
Which is kind of exciting for
me because I used to have to do

7
00:00:14.300 --> 00:00:17.180
these sections separately,
because code splitting and

8
00:00:17.180 --> 00:00:20.188
server side rendering used to
not play together very well.

9
00:00:20.188 --> 00:00:24.897
Finally, with React 18,
they made them play well together,

10
00:00:24.897 --> 00:00:27.528
which I'm very happy about.

11
00:00:27.528 --> 00:00:33.586
So if you're like me and
you were working on a copy of context,

12
00:00:33.586 --> 00:00:37.087
you can just go ahead and dump that.

13
00:00:37.087 --> 00:00:44.275
And I am going to grab another copy of,
Let's see, I'll just do it this way.

14
00:00:47.179 --> 00:00:48.253
Copy.

15
00:00:55.306 --> 00:00:57.781
Okay, call this current again.

16
00:01:02.242 --> 00:01:05.392
I'm gonna have to stop this, and

17
00:01:05.392 --> 00:01:10.578
then I'm gonna just reinstall
my node modules again.

18
00:01:12.852 --> 00:01:15.986
So, code splitting.

19
00:01:15.986 --> 00:01:19.189
React by itself is about 40-ish kilobytes.

20
00:01:19.189 --> 00:01:23.526
And if we go in here,
I think I have a link to that, I do.

21
00:01:25.293 --> 00:01:31.399
42 kilobytes to get react-dom and
then react is about itself 2.5 kilobytes.

22
00:01:31.399 --> 00:01:33.765
So altogether just under 45 kilobytes.

23
00:01:33.765 --> 00:01:38.391
If you're trying to keep your performance
budget under 100 kilobytes for

24
00:01:38.391 --> 00:01:42.602
your data initial page load,
you probably need to do code splitting.

25
00:01:44.181 --> 00:01:48.319
So code splitting is the idea that you
just load the bare minimum necessary code

26
00:01:48.319 --> 00:01:52.152
to get your app up and running, so
the user sees something immediately.

27
00:01:52.152 --> 00:01:54.841
And then you hurry in the background and
you load everything else.

28
00:01:54.841 --> 00:02:00.675
You need some sort of strategy
to be able to split things out.

29
00:02:00.675 --> 00:02:01.989
Luckily for us, React and

30
00:02:01.989 --> 00:02:04.994
Vite work together really well
to make that happen for you.

31
00:02:08.230 --> 00:02:12.930
By the way, I'm not implying that you have
to have a code budget of 100 kilobytes,

32
00:02:12.930 --> 00:02:16.739
but you should have a size budget
of something for your application.

33
00:02:16.739 --> 00:02:18.579
Something that you're
trying to stay under or

34
00:02:18.579 --> 00:02:20.521
some performance timing
you're trying to hit.

35
00:02:20.521 --> 00:02:24.814
You should be thinking about what's a
reasonable amount of time that it takes me

36
00:02:24.814 --> 00:02:26.747
for my app to load in front of a user.

37
00:02:26.747 --> 00:02:32.040
And it's gonna differ by your app,
your users, those kind of things.

38
00:02:32.040 --> 00:02:38.414
If you're writing code that calls,
it's like Uber for helicopters.

39
00:02:38.414 --> 00:02:39.842
They probably have a nice phone.

40
00:02:39.842 --> 00:02:42.097
They're probably on a decent connection.

41
00:02:42.097 --> 00:02:45.603
You can probably have a pretty
high-performance budget.

42
00:02:45.603 --> 00:02:50.781
If you are writing something that keeps
track of a farmer that's watering

43
00:02:50.781 --> 00:02:56.461
their crops, frequently out in the boonies
they have terrible 2G connection,

44
00:02:56.461 --> 00:03:01.571
whether that's in rural South Dakota or
in India or Australia, right?

45
00:03:01.571 --> 00:03:05.340
They're gonna have bad reception, so
your performance budget is very sensitive.

46
00:03:05.340 --> 00:03:06.804
Things like this become very helpful.

47
00:03:09.025 --> 00:03:13.722
So what we're gonna do is we're going
to start splitting things off of our

48
00:03:13.722 --> 00:03:14.723
main package.

49
00:03:16.405 --> 00:03:22.542
So let's go to app.jsx And

50
00:03:22.542 --> 00:03:25.844
up here where we import react,

51
00:03:27.352 --> 00:03:32.291
Right here, please import useState,

52
00:03:32.291 --> 00:03:36.787
lazy and Suspense with a capital S.

53
00:03:39.752 --> 00:03:44.332
Okay, I want you to delete details and
SearchParams, the imports here.

54
00:03:46.435 --> 00:03:51.867
We're gonna split off our various
different routes from our app,

55
00:03:51.867 --> 00:03:56.530
so that it's only loading
the route the user is loading.

56
00:03:56.530 --> 00:04:01.358
So I'm gonna say const Details = lazy,

57
00:04:01.358 --> 00:04:05.192
and then you give it a function,

58
00:04:05.192 --> 00:04:10.645
import, ./Details.

59
00:04:13.725 --> 00:04:16.146
Same thing for SearchParams.

60
00:04:20.184 --> 00:04:26.130
So Details = lazy and then a function
that returns import details and

61
00:04:26.130 --> 00:04:29.832
SearchParams lazy import SearchParams.

62
00:04:29.832 --> 00:04:31.807
If you are not familiar with import,

63
00:04:31.807 --> 00:04:35.003
this is a function that's
built into JavaScript, right?

64
00:04:35.003 --> 00:04:38.633
So it's a built-in function,
that's why we're not importing it or

65
00:04:38.633 --> 00:04:39.749
anything like that.

66
00:04:41.188 --> 00:04:45.570
And this works like require use to for
common JS.

67
00:04:45.570 --> 00:04:48.674
These are static imports at the top,

68
00:04:48.674 --> 00:04:53.781
as in these are not dynamic, but
import is dynamic import for

69
00:04:53.781 --> 00:04:58.510
ES6 modules,
which is what require was for common JS.

70
00:04:58.510 --> 00:05:03.236
So this is saying, if something tries to

71
00:05:03.236 --> 00:05:08.240
render details, panic and load details.

72
00:05:08.240 --> 00:05:11.241
Vite is smart enough to look at that and
say, hey,

73
00:05:11.241 --> 00:05:14.032
this is not required on
the initial page load.

74
00:05:14.032 --> 00:05:15.655
I'm not gonna load it right away.

75
00:05:17.738 --> 00:05:18.436
Okay?

76
00:05:19.448 --> 00:05:24.846
And then now we end up with these details
and these SearchParams components,

77
00:05:24.846 --> 00:05:29.841
and these will not actually load
until their route is actually loaded.

78
00:05:29.841 --> 00:05:30.851
Does that make sense?

79
00:05:33.188 --> 00:05:38.070
So we need to tell it okay,
we're gonna load this later.

80
00:05:38.070 --> 00:05:42.942
But what happens when we hit
something that we need to load?

81
00:05:42.942 --> 00:05:44.808
We're gonna do that with Suspense.

82
00:05:46.670 --> 00:05:53.219
So inside your QueryClientProvider,
put a component here called Suspense,

83
00:05:56.228 --> 00:06:00.336
And that'll wrap everything inside
of QueryClientProvider, and

84
00:06:00.336 --> 00:06:02.864
then we need to tell what the fallback is.

85
00:06:02.864 --> 00:06:07.479
If something inside of this is loading,
what do we do?

86
00:06:07.479 --> 00:06:13.820
Well, we're gonna show just a nice little,
A loading-pane,

87
00:06:17.187 --> 00:06:22.241
With a h2 className=, put whatever emoji

88
00:06:22.241 --> 00:06:26.617
you want in here, this is the loader.

89
00:06:26.617 --> 00:06:29.383
I have just a spiral here, but

90
00:06:29.383 --> 00:06:34.482
feel free to put whatever
emoji you wanna put in there.

91
00:06:34.482 --> 00:06:37.881
If you wanna have a loading dog,
actually, let's do that, that'll be cute.

92
00:06:37.881 --> 00:06:41.828
We'll put a dog and
then we'll have like a spinning dog head.

93
00:06:44.231 --> 00:06:47.346
So that's what Suspense does,
it basically says, hey,

94
00:06:47.346 --> 00:06:50.907
if you hit this high up in the render
tree and something is loading,

95
00:06:50.907 --> 00:06:53.719
show the fallback until
the Suspense has returned.

96
00:06:55.209 --> 00:06:58.995
And I need to restart my app, npm run dev.

97
00:06:58.995 --> 00:07:03.576
Notice when I load the page, just for a
very split second, it's all localhost, so

98
00:07:03.576 --> 00:07:05.546
everything's going really fast.

99
00:07:05.546 --> 00:07:08.535
You probably even missed it,
cuz I missed it.

100
00:07:08.535 --> 00:07:14.210
Let's just put this for
a second on fast 3G, and refresh the page.

101
00:07:16.237 --> 00:07:17.878
You see the spinning dog for a second and

102
00:07:17.878 --> 00:07:20.186
then it loads all those
components in the background.

103
00:07:22.316 --> 00:07:26.291
So just to prove my point,

104
00:07:26.291 --> 00:07:32.445
if I go to my Network tab and
I look at all.

105
00:07:32.445 --> 00:07:38.984
So if I refresh the page,
It can kinda be a little

106
00:07:38.984 --> 00:07:44.051
bit hard to make sense of this because
of how Vite loads everything in dev.

107
00:07:44.051 --> 00:07:48.103
The way that Vite works is it
actually uses the browser's built

108
00:07:48.103 --> 00:07:51.707
in module loader for
all of your locally served things.

109
00:07:51.707 --> 00:07:54.834
So that's why you see so
much of this being loaded separately.

110
00:07:58.254 --> 00:08:04.664
But what you don't see here,
this chunk business,

111
00:08:04.664 --> 00:08:09.477
this is all coming from React, right?

112
00:08:09.477 --> 00:08:14.417
So when you're loading this in production,
it's loading chunks at a time, right?

113
00:08:14.417 --> 00:08:18.903
So what's really cool about
this is now if I load

114
00:08:18.903 --> 00:08:23.302
this, And I'm just gonna close this.

115
00:08:23.302 --> 00:08:26.934
If I click on Luna here,
it's gonna load the details page,

116
00:08:26.934 --> 00:08:29.343
which has not been loaded yet, right?

117
00:08:29.343 --> 00:08:34.311
So I click on this, notice that it
loaded this DOM chunk down here.

118
00:08:34.311 --> 00:08:37.955
All this stuff only came afterwards,
right?

119
00:08:37.955 --> 00:08:40.779
So we've now split out this
particular piece of code.

120
00:08:42.078 --> 00:08:43.029
That is code splitting.

121
00:08:43.029 --> 00:08:45.480
And honestly,
what's cool about React is that's it.

122
00:08:45.480 --> 00:08:48.495
That's all you need to know
about splitting code in React.

123
00:08:48.495 --> 00:08:50.404
Right now we're splitting on route,

124
00:08:50.404 --> 00:08:53.756
which is kind of like the most
brain-dead way of doing it, right?

125
00:08:53.756 --> 00:08:58.089
There's just not like, okay,
we're gonna split based on route, but

126
00:08:58.089 --> 00:09:01.789
there's lots of other things
you can code split on, right?

127
00:09:01.789 --> 00:09:04.882
I actually don't need the modal
until someone actually

128
00:09:04.882 --> 00:09:06.534
clicks on the modal, right?

129
00:09:06.534 --> 00:09:07.454
So what do you do there?

130
00:09:07.454 --> 00:09:09.984
Let's just pop over and
do it really quick.

131
00:09:09.984 --> 00:09:15.455
We're in details,
instead of loading modal,

132
00:09:15.455 --> 00:09:20.651
just delete that and
say const Modal = lazy,

133
00:09:20.651 --> 00:09:23.945
which will load from React.

134
00:09:23.945 --> 00:09:29.495
Function import./modal, right?

135
00:09:29.495 --> 00:09:33.275
Now, if I click Adopt Luna,
it's gonna flash for

136
00:09:33.275 --> 00:09:38.241
just a second on the loading,
and then it'll show this, right?

137
00:09:38.241 --> 00:09:41.941
Again, we're going fast enough here.

138
00:09:41.941 --> 00:09:45.131
Let's just hard refresh the page here.

139
00:09:45.131 --> 00:09:47.150
You see the spinning dog head.

140
00:09:47.150 --> 00:09:51.732
If I click Adopt Luna again,
it's gonna show that spinner, right,

141
00:09:51.732 --> 00:09:54.422
because it's loading modal on the fly.

142
00:09:54.422 --> 00:10:01.007
Now, everything that I've shown you so
far is a massive waste, right?

143
00:10:01.007 --> 00:10:04.654
We've objectively made our apps slower,

144
00:10:04.654 --> 00:10:08.401
because none of these
bundles are very big,

145
00:10:08.401 --> 00:10:13.178
our modal bundle is gonna be
a kilobyte at best, right?

146
00:10:13.178 --> 00:10:16.651
So splitting off a kilobyte,
not worth it, right?

147
00:10:16.651 --> 00:10:22.625
You wanna be splitting off 30 kilobytes,
50 kilobytes, 100 kilobytes, right?

148
00:10:22.625 --> 00:10:28.119
So let's pretend that the modal loaded
all of Moment JS for some weird reason.

149
00:10:28.119 --> 00:10:31.549
Great, code split that,
that makes a ton of sense.

150
00:10:31.549 --> 00:10:34.596
But just to split something for
the sake of splitting it,

151
00:10:34.596 --> 00:10:37.336
you're better off just
leaving it in your bundle.

152
00:10:37.336 --> 00:10:39.334
So it's not a silver bullet.

153
00:10:39.334 --> 00:10:41.196
Please make sure that you're measuring,

154
00:10:41.196 --> 00:10:44.620
that you're actually making your user
experience better rather than worse.

155
00:10:44.620 --> 00:10:49.846
You need to be splitting tens of kilobytes
for code splitting to make sense.

156
00:10:49.846 --> 00:10:51.032
Does that makes sense?

157
00:10:52.561 --> 00:10:56.042
So yeah, that's one of the points
of caution with both this and

158
00:10:56.042 --> 00:10:57.559
server-side rendering.

159
00:10:57.559 --> 00:11:00.428
It's not necessarily always
a better thing to do this.

160
00:11:00.428 --> 00:11:03.016
You need to make sure that
you're measuring your app,

161
00:11:03.016 --> 00:11:06.672
how your users are responding, those
kind of metrics for you to really know,

162
00:11:06.672 --> 00:11:09.727
I'm actually making a positive
difference in my user's life.

163
00:11:09.727 --> 00:11:12.563
Because it's really kind of
a shell game of performance.

164
00:11:12.563 --> 00:11:15.961
If I move something to make
my initial paint faster,

165
00:11:15.961 --> 00:11:20.456
I'm making my time deck interactivity
worse, or things like that.

166
00:11:20.456 --> 00:11:23.343
So just make sure you're keeping
all that stuff in your mind.

167
00:11:23.343 --> 00:11:27.981
So very contrived example, but

168
00:11:27.981 --> 00:11:31.426
it can be super useful.

169
00:11:31.426 --> 00:11:36.168
If you have a huge application you have
to do code splitting in order to get

170
00:11:36.168 --> 00:11:37.660
decent performance.

171
00:11:39.081 --> 00:11:42.745
Okay, any questions about code splitting?

172
00:11:42.745 --> 00:11:46.017
&gt;&gt; Where does the code
rest when we put it lazy?

173
00:11:46.017 --> 00:11:50.162
Will it be downloaded immediately
once the app loads or

174
00:11:50.162 --> 00:11:52.695
downloaded only when required?

175
00:11:52.695 --> 00:11:55.987
&gt;&gt; So, what happens here with import.

176
00:11:55.987 --> 00:12:01.279
Right now, the way that we have this
set up, modal will only be requested,

177
00:12:01.279 --> 00:12:06.668
notice this is a function, right,
once this function is invoked, right?

178
00:12:06.668 --> 00:12:11.439
So lazy will only call this function once
it's actually trying to be rendered,

179
00:12:11.439 --> 00:12:11.943
right?

180
00:12:11.943 --> 00:12:13.972
And then Suspense will catch that and

181
00:12:13.972 --> 00:12:18.169
Suspense will allow that to be paused
while we load modal in the background.

182
00:12:20.788 --> 00:12:25.206
A very valid next question to ask there
is can we get optimistic about it?

183
00:12:25.206 --> 00:12:28.064
Can we load stuff in the background?

184
00:12:28.064 --> 00:12:30.441
The answer is yes, you definitely can.

185
00:12:30.441 --> 00:12:35.186
We're now adding another factor
of complexity here by doing that.

186
00:12:35.186 --> 00:12:41.303
The best way that I found to do
that is you have a service worker.

187
00:12:41.303 --> 00:12:43.734
If you're not familiar
with service workers,

188
00:12:43.734 --> 00:12:47.815
basically what they do is you have your
application, you have your API server.

189
00:12:47.815 --> 00:12:50.059
A service worker sits in the middle, so

190
00:12:50.059 --> 00:12:53.460
any time that your application
makes a request to your API,

191
00:12:53.460 --> 00:12:57.081
it goes through your service worker and
out to the API, right?

192
00:12:57.081 --> 00:12:59.586
That's just how service workers work.

193
00:12:59.586 --> 00:13:04.461
What you can do is you can basically
have your service worker, once it loads,

194
00:13:04.461 --> 00:13:09.339
once your app is loaded, it can say,
okay, the user is trying to load modal.

195
00:13:09.339 --> 00:13:12.506
The the user might try and load details,
they might try and load this.

196
00:13:12.506 --> 00:13:16.507
So they basically go and
grab all the pieces in the background, so

197
00:13:16.507 --> 00:13:21.164
that whenever modal gets requested to
the service worker, it can just say,

198
00:13:21.164 --> 00:13:23.156
guess what, I already have it.

199
00:13:23.156 --> 00:13:26.114
We're not gonna talk to the API right now,
here you go, right?

200
00:13:26.114 --> 00:13:30.604
And so by having that service worker sit
in the middle of that, you can basically

201
00:13:30.604 --> 00:13:34.641
just serve those requests as if they
were happening instantaneously.

202
00:13:34.641 --> 00:13:37.796
And your user never has to know, and
you don't have to write your code any

203
00:13:37.796 --> 00:13:40.659
differently either,
the service worker can handle all of that.

204
00:13:40.659 --> 00:13:45.069
So the way that you do that
is you have Vite or Parcel or

205
00:13:45.069 --> 00:13:49.091
Webpack generate a manifest
of all the chunks.

206
00:13:49.091 --> 00:13:52.226
The service worker, once it's loaded and
once your app is loaded,

207
00:13:52.226 --> 00:13:56.031
can look at that manifest and say, all
right, cool, give me all of those chunks.

208
00:13:56.031 --> 00:13:57.947
And then, it'll do that for you.

209
00:13:57.947 --> 00:14:01.010
Something like Remix actually
does this for you already.

210
00:14:01.010 --> 00:14:05.919
It's actually one of the cool parts of
Remix that they kind of take care of that

211
00:14:05.919 --> 00:14:09.467
entire architecture for
you if you do it correctly, but

212
00:14:09.467 --> 00:14:11.902
it is possible to do yourself as well.

213
00:14:11.902 --> 00:14:14.550
Hopefully, you can see why
I'm not teaching that today.

214
00:14:14.550 --> 00:14:19.981
It's another half hour that we'd be
going over setting over service workers,

215
00:14:19.981 --> 00:14:22.912
and this is not a class
on service workers.

216
00:14:22.912 --> 00:14:25.941
So is there a class on service workers,
Mark?

217
00:14:25.941 --> 00:14:27.656
&gt;&gt; We actually have two,

218
00:14:27.656 --> 00:14:32.449
we have one on progressive web
apps with Maximiliano Bergman.

219
00:14:32.449 --> 00:14:33.567
&gt;&gt; Okay, that'd be a good one.

220
00:14:33.567 --> 00:14:38.528
&gt;&gt; And we also have a deep dive on
service worker with Kyle Simpson.

221
00:14:38.528 --> 00:14:41.335
&gt;&gt; Yeah,
if you don't know what I'm talking about,

222
00:14:41.335 --> 00:14:43.698
those would be two good
courses to go take.

