WEBVTT

1
00:00:00.000 --> 00:00:03.029
We are just gonna go
look at individual hooks.

2
00:00:03.029 --> 00:00:06.565
And we're gonna do this for
the hooks that I did not cover and

3
00:00:06.565 --> 00:00:09.476
complete intro React either at all or
very well.

4
00:00:09.476 --> 00:00:12.368
I used to cover literally every
hook that React puts out.

5
00:00:12.368 --> 00:00:15.520
And it eventually got to the point where
they're putting out hooks now where

6
00:00:15.520 --> 00:00:18.046
I just don't think you're ever
going to use them, period.

7
00:00:18.046 --> 00:00:22.336
Therefore I don't think it's worth
the brain matter to store them, right?

8
00:00:22.336 --> 00:00:26.922
So this is not going to be every hook
possible but it's all the ones that I

9
00:00:26.922 --> 00:00:31.363
conceivably could see an app developer
wanting to use at some point.

10
00:00:33.701 --> 00:00:37.980
So let's hop into hooks in depth and
useRef.

11
00:00:37.980 --> 00:00:42.999
So for
this we are going to be using StackBlitz.

12
00:00:42.999 --> 00:00:48.434
StackBlitz is just like CodePen or
CodeSandbox or any one of those things.

13
00:00:48.434 --> 00:00:53.900
My favorite thing about stackblitzing
though is notice I'm actually running

14
00:00:53.900 --> 00:00:59.208
VITE directly in the browser,
which you can't do with other ones, right?

15
00:00:59.208 --> 00:01:02.328
StackBlitz has a thing called a web
container, which basically is

16
00:01:02.328 --> 00:01:05.796
running node.js inside of your browser,
very impressive technology.

17
00:01:05.796 --> 00:01:08.009
So we're gonna do that.

18
00:01:08.009 --> 00:01:11.178
So, here's my suggestion to you.

19
00:01:11.178 --> 00:01:15.572
I'm going to suggest that you hop
directly over to StackBlitz, and

20
00:01:15.572 --> 00:01:20.366
I'm gonna suggest that you, yourself,
make an account on StackBlitz.

21
00:01:20.366 --> 00:01:23.617
I'm not connected to
StackBlitz in any way, so

22
00:01:23.617 --> 00:01:26.717
I have no reason to
encourage you otherwise.

23
00:01:26.717 --> 00:01:28.412
Then to fork this, and

24
00:01:28.412 --> 00:01:33.422
then you can actually just work on
your own copy of this and save it.

25
00:01:33.422 --> 00:01:36.597
We're actually not gonna be
writing a ton of code on this.

26
00:01:36.597 --> 00:01:41.722
We are mostly just going to be exploring
all the various different usecases

27
00:01:41.722 --> 00:01:48.176
of hooks So just to get you
familiar with this project,

28
00:01:48.176 --> 00:01:53.138
we have up here a little chooser
of all the various different ones.

29
00:01:53.138 --> 00:01:56.673
There's also a little homepage where you
can choose which one you wanna focus on.

30
00:01:56.673 --> 00:02:02.276
First, we are going to
go on to useRef first.

31
00:02:04.446 --> 00:02:10.260
So, useRef allows you
to have a container so

32
00:02:10.260 --> 00:02:17.972
that you can have the same
value between renders, right?

33
00:02:17.972 --> 00:02:22.797
So every time that I run this
UseRefMemo component, and

34
00:02:22.797 --> 00:02:26.708
we'll talk about memo
here in just a second.

35
00:02:26.708 --> 00:02:33.772
But for
now just focus on this useRef hook.

36
00:02:33.772 --> 00:02:38.498
So, the render target here is exactly
the DOM element that I'm going

37
00:02:38.498 --> 00:02:40.053
to be rendering into.

38
00:02:40.053 --> 00:02:45.001
So in this particular case I have
down here this ref as this div

39
00:02:45.001 --> 00:02:47.148
being the render target.

40
00:02:47.148 --> 00:02:52.136
Now, if you give it a ref which is
a React thing, not a damn DOM thing,

41
00:02:52.136 --> 00:02:56.875
it's going to store this particular
div into the render target.

42
00:02:56.875 --> 00:02:59.363
I want this because I'm going
to be rendering into it, right?

43
00:02:59.363 --> 00:03:02.269
So this is a three.js application,
the three.js and

44
00:03:02.269 --> 00:03:05.248
React don't necessarily
play well together, right?

45
00:03:05.248 --> 00:03:06.780
They're not made to go together.

46
00:03:06.780 --> 00:03:11.747
I'm using a third party library inside
of React that is not a React library.

47
00:03:11.747 --> 00:03:14.592
There probably is like
a three.js React connector.

48
00:03:14.592 --> 00:03:18.436
If you needed to do this with something
like jQuery, or maybe you have like

49
00:03:18.436 --> 00:03:22.471
a React application rendering an Ember
application, it's not unheard of.

50
00:03:22.471 --> 00:03:25.934
It's messy, but it's possible, right?

51
00:03:25.934 --> 00:03:28.269
So I put this renderTarget onto this ref.

52
00:03:28.269 --> 00:03:31.373
And now whenever I refer
to this renderTarget,

53
00:03:31.373 --> 00:03:34.328
so renderTarget.current.appendChild.

54
00:03:34.328 --> 00:03:39.778
So I'm actually using the direct DOM
node to insert the three.js application.

55
00:03:39.778 --> 00:03:43.582
That's what ref allows you to do,
allows you to do,

56
00:03:43.582 --> 00:03:46.961
allows you to grab hold
of specific DOM nodes.

57
00:03:46.961 --> 00:03:50.026
And then that's just one usecase for refs.

58
00:03:52.791 --> 00:03:56.289
But probably the most common one, which
is like, I need a specific DOM element.

59
00:03:56.289 --> 00:04:00.949
Cuz the other thing that you could try and
do, if I say like ID equals blah, and

60
00:04:00.949 --> 00:04:03.763
then I try and query the DOM for
ID equals blah.

61
00:04:03.763 --> 00:04:07.795
I'm not guaranteed that that specific
same DOM element is going to

62
00:04:07.795 --> 00:04:11.471
be the same one that I grabbed if
I try and query the DOM for it.

63
00:04:11.471 --> 00:04:17.409
Because React reserves the right to create
and destroy any element at any time.

64
00:04:17.409 --> 00:04:20.044
So the only way that you
can guarantee that you're

65
00:04:20.044 --> 00:04:23.632
getting a hold of exactly the DOM
element that you want is with a ref.

66
00:04:23.632 --> 00:04:30.580
I'll say that 90% of the usecase for refs
is referring directly to the dom, right?

67
00:04:30.580 --> 00:04:35.588
Referring to something that exists in
the DOM and you wanna keep ahold of that.

68
00:04:35.588 --> 00:04:37.335
But it's just a container, right?

69
00:04:37.335 --> 00:04:41.735
So notice I'm saying renderTarget.current,
renderTarget is just,

70
00:04:41.735 --> 00:04:46.287
it's an object that has exactly one
property exposed, which is current.

71
00:04:46.287 --> 00:04:49.098
So the reason why they do this because
then you can have that object and

72
00:04:49.098 --> 00:04:51.490
you can refer to the same thing
in that current container.

73
00:04:51.490 --> 00:04:55.396
I could totally do like,

74
00:04:55.396 --> 00:04:59.680
const otherRef = useRef.

75
00:05:03.949 --> 00:05:08.298
And otherRef.current is assigned blah,

76
00:05:08.298 --> 00:05:11.931
right, it's just like an object.

77
00:05:15.422 --> 00:05:22.009
So now I have this object here, well, it's
maybe even more, it's const otherObject.

78
00:05:31.885 --> 00:05:36.481
Now at any, it equals empty object here.

79
00:05:36.481 --> 00:05:41.254
If I was just saying, If I was

80
00:05:41.254 --> 00:05:45.935
just creating an object in here,
insideObject = blah.

81
00:05:51.435 --> 00:05:53.939
This object is getting created and

82
00:05:53.939 --> 00:05:58.869
destroyed every single render cycle,
right, every single time.

83
00:05:58.869 --> 00:06:03.776
Whereas otherRef.current, this is
surviving between various render cycles.

84
00:06:03.776 --> 00:06:07.003
So therefore I will always have
the exact same otherObject,

85
00:06:07.003 --> 00:06:09.227
that might be important to you right now.

86
00:06:09.227 --> 00:06:11.764
It might be important to you
to keep the same object.

87
00:06:11.764 --> 00:06:16.639
So that's the the usecase for a ref is to
keep track of the exact same thing that

88
00:06:16.639 --> 00:06:19.199
is triple equals to each other, right?

89
00:06:19.199 --> 00:06:26.653
So if I asked later is
otherObject === otherRef.current,

90
00:06:26.653 --> 00:06:31.855
right, cuz this is inside
of an effect which

91
00:06:31.855 --> 00:06:38.057
is gonna happen later,
this is still true, right?

92
00:06:38.057 --> 00:06:40.873
Now, if you're looking at, say,
like when the heck would I ever do that,

93
00:06:40.873 --> 00:06:42.591
the answer is probably
not very frequently.

94
00:06:42.591 --> 00:06:46.665
You don't usually need
the triple equals same object.

95
00:06:46.665 --> 00:06:51.292
But if you have some sort of animation
frame that you're keeping track of or

96
00:06:51.292 --> 00:06:56.214
something like that where that the
particular object that you're referring to

97
00:06:56.214 --> 00:06:59.242
has to be the same one,
this is what refs are for.

98
00:06:59.242 --> 00:07:01.188
Very niche use case.

99
00:07:04.328 --> 00:07:07.368
Okay, that's abstract enough.

100
00:07:07.368 --> 00:07:09.327
Does anyone have any questions about refs?

101
00:07:12.423 --> 00:07:18.175
It is pretty cool that we can do 3D stuff
this easily in the browser these days,

102
00:07:18.175 --> 00:07:19.058
all right?

103
00:07:19.058 --> 00:07:22.060
This is not that much code
to get a little scene going

104
00:07:23.390 --> 00:07:25.012
&gt;&gt; Why do we use ref and

105
00:07:25.012 --> 00:07:28.978
passing functions or
some data and not props?

106
00:07:32.721 --> 00:07:33.914
&gt;&gt; Why do we use refs?

107
00:07:33.914 --> 00:07:38.457
So okay, this actually leads me
into my next point which is this

108
00:07:38.457 --> 00:07:42.152
little thing that I talk about here,
memo, okay?

109
00:07:42.152 --> 00:07:47.625
So what memo will guarantee you
if I do wrap this in memo which,

110
00:07:47.625 --> 00:07:51.752
again, you notice this
is coming from React.

111
00:07:53.430 --> 00:07:59.885
If I provide this exact same props to
this component, it won't rerender.

112
00:07:59.885 --> 00:08:01.500
Why is this a big deal?

113
00:08:01.500 --> 00:08:04.875
This is a really big deal because
I have this three.js application.

114
00:08:04.875 --> 00:08:09.625
So if it rerenders,
I destroy the scene and rerender it.

115
00:08:09.625 --> 00:08:12.935
That's bad, right,
I wanna keep my scene up there.

116
00:08:12.935 --> 00:08:15.885
One, it's expensive to rere, and
two, it's janky if I rerender it.

117
00:08:17.675 --> 00:08:22.950
So by using memo up here, I can guarantee
that as long as the props being passed

118
00:08:22.950 --> 00:08:27.997
into the useRef, memo component
don't change, it doesn't rerender.

119
00:08:29.628 --> 00:08:31.240
So you do this for one of two reasons.

120
00:08:31.240 --> 00:08:32.250
One, performance, right?

121
00:08:32.250 --> 00:08:35.040
Sometimes you have components that
are very expensive to rerender.

122
00:08:35.040 --> 00:08:40.520
For example, a three.js scene is
very expensive to rerender, right?

123
00:08:40.520 --> 00:08:45.892
So using memo, Guarantees that.

124
00:08:45.892 --> 00:08:49.185
Now, if you're just doing it with normal
React, there's a decent chance that it

125
00:08:49.185 --> 00:08:51.441
won't rerender anyway, but
you can't guarantee it.

126
00:08:53.468 --> 00:08:58.276
The other reason is you have
something that would be wrong or

127
00:08:58.276 --> 00:09:02.422
bad to rerender,
which is typically not the case.

128
00:09:02.422 --> 00:09:04.525
Trying to think of an example of that,

129
00:09:04.525 --> 00:09:07.238
maybe you have some API
request that's timely.

130
00:09:07.238 --> 00:09:09.524
Either you have a nonce or
something like that and

131
00:09:09.524 --> 00:09:12.161
you don't want to rerequest it or
something like that.

132
00:09:12.161 --> 00:09:16.537
In which case, guaranteeing that it won't
rerender it also becomes important.

133
00:09:19.645 --> 00:09:22.747
So to answer, going back to that person's

134
00:09:22.747 --> 00:09:27.670
question of why is it important to
use something like memo or a a ref?

135
00:09:27.670 --> 00:09:33.173
If I'm passing an object into a component
that has memo, and it's important to me

136
00:09:33.173 --> 00:09:38.707
that it doesn't rerender, it's important
that it's the same object, right?

137
00:09:38.707 --> 00:09:42.367
Because if it's the same object,
same shaped object that looks

138
00:09:42.367 --> 00:09:46.444
exactly the same but it's not triple
equals to each to itself, right?

139
00:09:46.444 --> 00:09:50.148
It's gonna cause it to rerender it and
we're gonna see which is bad.

140
00:09:50.148 --> 00:09:54.122
We'll talk about that in a second cs I'm
gonna talk about callback and useMemo and

141
00:09:54.122 --> 00:09:56.384
things like that, but
that's the idea here.

142
00:10:00.949 --> 00:10:04.792
Now, someone's out there thinking like,
this is a good idea,

143
00:10:04.792 --> 00:10:06.865
I'm gonna wrap everything in memo.

144
00:10:06.865 --> 00:10:08.396
Don't do that.

145
00:10:08.396 --> 00:10:11.262
That is not what I'm telling you to do.

146
00:10:11.262 --> 00:10:15.936
Because memo, now you introduce a new
problem of why isn't this rerendering?

147
00:10:15.936 --> 00:10:16.481
It's React,

148
00:10:16.481 --> 00:10:19.354
you expect everything to rerender when
you give it new state and new props.

149
00:10:19.354 --> 00:10:21.994
And generally React is
very good at rerendering.

150
00:10:21.994 --> 00:10:27.087
Do not do performance optimizations until
you have a performance problem, okay?

151
00:10:27.087 --> 00:10:28.984
Just please do not wrap
everything in memo.

152
00:10:28.984 --> 00:10:32.097
If you take one thing away
from intermediate React,

153
00:10:32.097 --> 00:10:34.584
it probably should just be that, right?

154
00:10:34.584 --> 00:10:37.664
Use it only when you need it,
which is rarely.

155
00:10:37.664 --> 00:10:40.182
If you're rendering three.js, yes,

156
00:10:40.182 --> 00:10:44.631
rapid memo, if you're not doing
anything like that, please don't.

157
00:10:44.631 --> 00:10:47.208
Have a problem before you solve a problem,
please.

158
00:10:49.095 --> 00:10:55.209
Okay, Questions about memo?

159
00:10:55.209 --> 00:10:59.395
We'll talk about memo again here in just
a second, but any questions about refs?

160
00:11:03.128 --> 00:11:07.577
&gt;&gt; So does it mean that ref helps
in memorizing and props don't?

161
00:11:10.344 --> 00:11:14.643
&gt;&gt; Props give you no help
in memorizing anything.

162
00:11:14.643 --> 00:11:20.929
So if you're using a memo, sorry,
if you're using memo to function here.

163
00:11:20.929 --> 00:11:23.882
And you're passing objects
into that function.

164
00:11:23.882 --> 00:11:27.445
You have to use a ref or
a useMemo, or a useCallback.

165
00:11:29.317 --> 00:11:31.816
I'll talk about those momentarily, so.

166
00:11:31.816 --> 00:11:38.120
&gt;&gt; I do see refs on form inputs often.

167
00:11:38.120 --> 00:11:41.795
&gt;&gt; Yeah, you can use refs to, it's
just referring to any DOM node, right?

168
00:11:41.795 --> 00:11:45.970
Like I'm reusing a ref to
refer to this div right here.

169
00:11:45.970 --> 00:11:48.920
Generally you don't need to do it with
forms cuz forms, you have events.

170
00:11:48.920 --> 00:11:54.405
Events, you can use things like formData
and event.target or event.current target.

171
00:11:54.405 --> 00:11:56.718
You don't necessarily need to refer to,

172
00:11:56.718 --> 00:11:59.634
you don't need a ref to
refer to those DOM elements.

173
00:11:59.634 --> 00:12:03.013
It's possible when suggested, but

174
00:12:03.013 --> 00:12:07.706
I think using events is
the cleaner way of doing it.

175
00:12:07.706 --> 00:12:10.395
We talk about that in complete intro.

