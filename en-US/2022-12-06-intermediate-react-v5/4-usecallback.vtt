WEBVTT

1
00:00:00.299 --> 00:00:04.033
So let's useMemo,
we're gonna get to useCallback and

2
00:00:04.033 --> 00:00:08.411
it's gonna look really similar
because they're very similar.

3
00:00:10.472 --> 00:00:15.544
Okay, so I have this useRef component,
right, this is actually literally

4
00:00:15.544 --> 00:00:20.078
the exact same component that we
looked at it in the useRef example.

5
00:00:20.078 --> 00:00:25.374
I don't want this to rerender
ever basically, right?

6
00:00:25.374 --> 00:00:29.347
But you can imagine, let's say I have some
callback that I'm providing into this.

7
00:00:29.347 --> 00:00:34.086
So you can imagine this would be
something to update the parent,

8
00:00:34.086 --> 00:00:36.204
it could be a hook function.

9
00:00:36.204 --> 00:00:39.235
It could be some sort
of function that I need

10
00:00:39.235 --> 00:00:43.875
to render this home component correctly or
something like that.

11
00:00:43.875 --> 00:00:49.137
I don't know, some sort of callback that I
have to give into the useRef here, right?

12
00:00:49.137 --> 00:00:53.722
So I'm getting back to this prop here
called CB into my useRef component.

13
00:00:55.982 --> 00:01:00.614
If this is not literally the exact
same callback every single time,

14
00:01:00.614 --> 00:01:04.283
it's gonna say, hey,
something changed, right?

15
00:01:04.283 --> 00:01:08.891
To prove my point here, I have my useful
callback here, if I just copy and

16
00:01:08.891 --> 00:01:14.363
paste this here, And

17
00:01:14.363 --> 00:01:19.040
I save and I rerender,
Three just gives up.

18
00:01:19.040 --> 00:01:23.300
It's you're trying to rerender me way too
much, I don't know what to do about this,

19
00:01:23.300 --> 00:01:25.326
I'm done, right, that's a problem.

20
00:01:27.197 --> 00:01:30.886
So that's why we have this thing
called memoized useCallback.

21
00:01:30.886 --> 00:01:34.873
You can memoize a callback and
then parse that into the function.

22
00:01:34.873 --> 00:01:39.783
And if you remember from that previous
section, this is wrapped in memo,

23
00:01:39.783 --> 00:01:40.981
also important.

24
00:01:40.981 --> 00:01:46.579
The component you're passing into has
to have memo wrapping it as well.

25
00:01:46.579 --> 00:01:49.882
But using useCallback and memo together,

26
00:01:49.882 --> 00:01:55.672
you'll get this ability to not rerender
the component every single time.

27
00:01:59.253 --> 00:02:04.281
Going back to useCallback.

28
00:02:04.281 --> 00:02:07.644
So that's the point of useCallback
is to memoize some callback so

29
00:02:07.644 --> 00:02:11.080
that you're giving the exact same
function in every single time.

30
00:02:11.080 --> 00:02:14.986
So that memo can cause this component to
not rerender despite the fact that this

31
00:02:14.986 --> 00:02:18.666
is rerendering every single time that
ball moves back and forth, right?

32
00:02:20.622 --> 00:02:24.470
If you're looking at it and
saying, that's pretty specific,

33
00:02:24.470 --> 00:02:27.046
it's cuz it's pretty specific, right?

34
00:02:27.046 --> 00:02:30.480
It's a very specific performance
optimization, but in a case

35
00:02:30.480 --> 00:02:35.231
like this would be essential, you wouldn't
be able to accomplish this any other way.

36
00:02:42.404 --> 00:02:47.802
Now I'm pretty sure,
let's see if I can code this from memory.

37
00:02:47.802 --> 00:02:52.699
If you're looking at this,
this feels like just a very

38
00:02:52.699 --> 00:02:58.030
strange way to rewrite,
useMemo, it's cuz it really is.

39
00:02:58.030 --> 00:03:03.181
const memoizedCallback =,
and I think it's just

40
00:03:03.181 --> 00:03:08.228
a function that provides
back a useful callback.

41
00:03:17.604 --> 00:03:20.021
= useMemo.

42
00:03:25.404 --> 00:03:30.682
Yeah, so line 15 and line 14 here
are actually precisely equivalent,

43
00:03:30.682 --> 00:03:32.963
they do exactly the same thing.

44
00:03:35.363 --> 00:03:39.053
So it's just a specific
use case of useMemo.

45
00:03:39.053 --> 00:03:41.600
I think this is actually literally
how it's implemented inside of

46
00:03:41.600 --> 00:03:45.862
the hook itself, so, But it's there,

47
00:03:45.862 --> 00:03:50.085
I've heard people on the React team
say that they wish they hadn't shipped

48
00:03:50.085 --> 00:03:54.260
useCallback because it's not necessary
you can just do it with useMemo.

49
00:03:54.260 --> 00:03:57.692
But here we are, that's what it is.

50
00:03:57.692 --> 00:03:59.713
Does it makes sense?

51
00:03:59.713 --> 00:04:03.406
Or if it makes less sense, then you could
ignore it because there is useCallback, so

52
00:04:03.406 --> 00:04:04.662
you can useCallback there.

53
00:04:04.662 --> 00:04:06.681
So those two are performance
optimizations,

54
00:04:06.681 --> 00:04:10.059
please only use them when you actually
have a performance problem like this.

55
00:04:10.059 --> 00:04:13.856
This is a performance problem that
I've arbitrarily created for you.

56
00:04:13.856 --> 00:04:15.624
But if you have that,
then by all means use these.

57
00:04:15.624 --> 00:04:20.194
But otherwise, just file them in the back
of your brain as I'll use this when I find

58
00:04:20.194 --> 00:04:20.999
jink in my UI.

