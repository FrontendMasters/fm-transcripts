WEBVTT

1
00:00:00.026 --> 00:00:05.336
Who wants to do something silly and
dumb with server side rendering?

2
00:00:05.336 --> 00:00:09.649
Okay, do not do this today, this is
kind of a preview of what's coming,

3
00:00:09.649 --> 00:00:13.272
but it was so easy to do that I
think it's pretty compelling.

4
00:00:13.272 --> 00:00:16.800
What if you wanna show
everyone the pets right away,

5
00:00:16.800 --> 00:00:21.620
you wanna learn, you wanna load
the first load with everything there.

6
00:00:21.620 --> 00:00:24.195
That would be pretty cool, right?

7
00:00:24.195 --> 00:00:27.535
The user is immediately getting
the first set of pets right away.

8
00:00:30.162 --> 00:00:33.734
The way that you would do that
correctly today is basically,

9
00:00:33.734 --> 00:00:35.424
you would have your server.

10
00:00:35.424 --> 00:00:40.780
So here in server JS, basically,

11
00:00:40.780 --> 00:00:45.954
write some method that calls that

12
00:00:45.954 --> 00:00:52.987
API every five minutes and
cache the result.

13
00:00:52.987 --> 00:00:57.003
And then go into your React app and
make it so like, hey,

14
00:00:57.003 --> 00:01:01.446
if there is a cached version
available somewhere in the HTML or

15
00:01:01.446 --> 00:01:06.673
something like that, use that first,
otherwise, make that request.

16
00:01:06.673 --> 00:01:10.972
You can also give React query
like a cached initial data,

17
00:01:10.972 --> 00:01:14.117
that's what you would do there, right?

18
00:01:14.117 --> 00:01:19.067
And that would work today really well,
but let's do this with basically no code.

19
00:01:22.017 --> 00:01:24.797
So we're gonna mess with suspense.

20
00:01:24.797 --> 00:01:27.427
You're not supposed to use
suspense this way yet,

21
00:01:27.427 --> 00:01:31.173
the React team was very adamant that
I should probably not show you this.

22
00:01:31.173 --> 00:01:32.565
I do not care.

23
00:01:32.565 --> 00:01:33.300
They don't pay me.

24
00:01:33.300 --> 00:01:36.245
So, we're gonna do cool stuff together.

25
00:01:36.245 --> 00:01:39.360
All right, if you're on Node 18,
you don't have to do this part,

26
00:01:39.360 --> 00:01:42.939
if you are in anything underneath,
if you're on Node 16, you must do this.

27
00:01:42.939 --> 00:01:46.449
If you're on Node 14,
this will just not work.

28
00:01:46.449 --> 00:01:53.144
So if you're on Node 16 like me,
put node here and

29
00:01:53.144 --> 00:02:00.332
then put --experimental fetch,
like that, okay?

30
00:02:00.332 --> 00:02:04.103
Then I need you to pop into app.jsx

31
00:02:06.641 --> 00:02:09.963
And here we have queries,
stale time and cache time.

32
00:02:09.963 --> 00:02:15.882
We're gonna turn on React queries,
suspense: true.

33
00:02:15.882 --> 00:02:20.715
This is an experimental feature built into
React query that allows it to interact

34
00:02:20.715 --> 00:02:22.147
with suspense as well.

35
00:02:22.147 --> 00:02:25.197
If you remember we have
suspense right here, right?

36
00:02:25.197 --> 00:02:29.950
So basically, what React query is gonna do
is like, hey, if you're loading something,

37
00:02:29.950 --> 00:02:31.964
throw it into suspense mode, right?

38
00:02:31.964 --> 00:02:35.744
Which they don't want you doing yet,
but it is possible,

39
00:02:35.744 --> 00:02:40.608
because all it does is throw a promise and
suspense just catches promises,

40
00:02:40.608 --> 00:02:44.176
which is a weird API, but
it's how they chose to do it.

41
00:02:44.176 --> 00:02:51.644
Okay, build your client again,
build your server again.

42
00:02:51.644 --> 00:02:56.250
[BLANK AUDIO]

43
00:02:56.250 --> 00:03:00.529
npm run start.

44
00:03:00.529 --> 00:03:02.726
All right, so
you can see this experimental warning,

45
00:03:02.726 --> 00:03:03.740
fetch is an experiment.

46
00:03:03.740 --> 00:03:08.079
It's actually built into 18, so
you won't get this warning in 18 anymore.

47
00:03:08.079 --> 00:03:12.247
Now if I refresh the page.

48
00:03:12.247 --> 00:03:16.917
There we go, it is now everything.

49
00:03:16.917 --> 00:03:22.396
So if you look at the source here,
you'll see here

50
00:03:22.396 --> 00:03:27.746
that we're getting,
Luna is coming up in here,

51
00:03:27.746 --> 00:03:32.062
Havanese, Seattle, Bunnahabhain.

52
00:03:32.062 --> 00:03:34.043
They're all coming up here in the results.

53
00:03:34.043 --> 00:03:38.437
It's actually going in the browser or
in our server, and it's calling

54
00:03:38.437 --> 00:03:42.921
fetch to the API on the server layer and
then serving them complete HTML.

55
00:03:42.921 --> 00:03:46.662
With all the results,
with the breed lists,

56
00:03:46.662 --> 00:03:50.314
all that kind of stuff just pre-hydrated.

57
00:03:50.314 --> 00:03:54.244
Imagine if you were serving a request to
Mars right now, you would definitely wanna

58
00:03:54.244 --> 00:03:58.362
do something like this because round trips
are so expensive for tomorrow's, right?

59
00:03:58.362 --> 00:04:02.225
So this could be something really
useful if you need something that's,

60
00:04:02.225 --> 00:04:05.026
you wanna send an all in one
payload just right away.

61
00:04:05.026 --> 00:04:07.281
This would be a cool way to do it.

62
00:04:07.281 --> 00:04:10.060
Calling fetch from your
server on every request,

63
00:04:10.060 --> 00:04:13.576
probably a bad idea,
probably I don't wanna do that, right?

64
00:04:13.576 --> 00:04:18.546
That's why I was saying here in your
node code, you would much rather make

65
00:04:18.546 --> 00:04:22.874
all those requests in some sort of
local cached way of doing it and

66
00:04:22.874 --> 00:04:27.544
just hold that in there and
then hydrate it on every request, right?

67
00:04:27.544 --> 00:04:31.626
Then you're not making,
if you're getting 5,000 requests a second,

68
00:04:31.626 --> 00:04:34.214
you're not making 5,000 fetch requests.

69
00:04:34.214 --> 00:04:39.013
All the same, it's pretty entertaining
that I was able to do this with just

70
00:04:39.013 --> 00:04:41.231
a couple of lines of code, right?

71
00:04:41.231 --> 00:04:45.574
So, that style of doing data loading with

72
00:04:45.574 --> 00:04:50.796
suspense is coming,
trademark coming, right?

73
00:04:50.796 --> 00:04:56.766
It's been coming for five years at this
point, that they are getting closer.

74
00:04:56.766 --> 00:05:01.688
You can see now that it actually does
work, but don't hold your breath,

75
00:05:01.688 --> 00:05:02.905
but it is coming.

76
00:05:02.905 --> 00:05:07.370
Basically what they're saying is that they
don't like their throwing promises API and

77
00:05:07.370 --> 00:05:09.135
they're promising to change it.

78
00:05:09.135 --> 00:05:15.119
So they don't want people to relying
on it quite yet, that's the idea.

