WEBVTT

1
00:00:00.155 --> 00:00:03.391
Last section buckle up,
it's the hardest one yet.

2
00:00:03.391 --> 00:00:06.093
I'm just kidding TypeScript was
definitely the hardest one yet.

3
00:00:06.093 --> 00:00:07.804
Maybe Redux.

4
00:00:07.804 --> 00:00:10.532
I don't know if that
one's kinda up to you.

5
00:00:10.532 --> 00:00:11.962
It's not this one though.

6
00:00:11.962 --> 00:00:16.971
[LAUGH] All right, we're gonna talk
about testing and I'm gonna tell you

7
00:00:16.971 --> 00:00:22.489
why I'm a really good person to learn
testing from is cuz I don't like testing.

8
00:00:22.489 --> 00:00:25.550
[LAUGH] I don't like testing.

9
00:00:25.550 --> 00:00:28.870
So I try and
make my tests really good and I try and

10
00:00:28.870 --> 00:00:34.018
write as few of them as possible so
that I can maintain them as well as I can.

11
00:00:34.018 --> 00:00:39.323
My least favorite thing in
the entire world is flaky tests.

12
00:00:39.323 --> 00:00:42.803
If something fails, it damn well
better to be telling me something or

13
00:00:42.803 --> 00:00:44.249
it shouldn't have failed.

14
00:00:44.249 --> 00:00:46.942
But I hate tests that waste my time.

15
00:00:46.942 --> 00:00:52.042
So I'm going to tell you my
testing methodology was like,

16
00:00:52.042 --> 00:00:58.304
let's write a small core set of very
good tests that tell me something.

17
00:00:58.304 --> 00:01:02.727
I'm infamous at one of my companies
previously for just going in and

18
00:01:02.727 --> 00:01:05.061
deleting all the fake flaky tests.

19
00:01:05.061 --> 00:01:06.078
And like, you can't do that.

20
00:01:06.078 --> 00:01:08.654
I was like,
I'm definitely going to do that.

21
00:01:08.654 --> 00:01:11.066
So here we are.

22
00:01:11.066 --> 00:01:15.140
Let's talk about vitest.

23
00:01:15.140 --> 00:01:19.912
Every version of this course previously,
I think has used jest.

24
00:01:19.912 --> 00:01:23.925
And Jest and vitest are really similar.

25
00:01:23.925 --> 00:01:28.380
The reason why today we're gonna
use vitest as opposed to Jest all

26
00:01:28.380 --> 00:01:32.679
previous to this is that vitest
is made to go with vite, right?

27
00:01:32.679 --> 00:01:34.422
It's made by the same people.

28
00:01:34.422 --> 00:01:39.420
And the nice thing about vitest is that
it reads from your vite configuration.

29
00:01:39.420 --> 00:01:43.519
In other words,
we do not have to reconfigure anything.

30
00:01:43.519 --> 00:01:46.738
Vite is just our vitest it's just
gonna work out of the box for us.

31
00:01:46.738 --> 00:01:49.920
That seems pretty compelling
to me me personally if

32
00:01:49.920 --> 00:01:53.475
I'm going to be using vite
I'll be using vitest as well.

33
00:01:53.475 --> 00:01:57.064
And vitest is meant to be
a drop in replacement for Jest.

34
00:01:57.064 --> 00:02:01.761
So they're meant to be API compatible
which means if you get through this

35
00:02:01.761 --> 00:02:06.390
course and you don't like vite and
you wanna go back to Jest and parcel.

36
00:02:06.390 --> 00:02:09.023
Or Jest and webpage or
something like that,

37
00:02:09.023 --> 00:02:12.591
everything I'm about to teach
you applies to jest as well.

38
00:02:12.591 --> 00:02:15.113
Or Jasmine for that matter.

39
00:02:15.113 --> 00:02:21.875
Because Jasmine or J is based on
Jasmine and vitest is based on Jest.

40
00:02:21.875 --> 00:02:25.776
And I think that the translative
property applies here

41
00:02:25.776 --> 00:02:28.925
that therefore vitest is based on Jasmine.

42
00:02:28.925 --> 00:02:31.538
And I mean none of
the testings are different.

43
00:02:31.538 --> 00:02:36.209
So, this all relatively, works together.

44
00:02:36.209 --> 00:02:41.152
If you really do wanna use Jest,
just go check out V4 of this course.

45
00:02:41.152 --> 00:02:42.987
I use Jest in the last version.

46
00:02:45.106 --> 00:02:49.675
A fun side note is that Jest used
to be a Facebook product, right?

47
00:02:49.675 --> 00:02:53.747
They made Jest to test react applications.

48
00:02:53.747 --> 00:02:56.735
And now just it's actually
officially an open JS project.

49
00:02:56.735 --> 00:02:58.287
So it's no longer a Facebook project.

50
00:02:58.287 --> 00:03:02.877
It's actually a full-on open source
community governed kind of project,

51
00:03:02.877 --> 00:03:05.182
which makes me like Jest all the more.

52
00:03:07.017 --> 00:03:12.308
Okay, so we're on a brand new copy

53
00:03:12.308 --> 00:03:17.607
of Adopt Me on the 14-context.

54
00:03:17.607 --> 00:03:20.217
And we're gonna be using vitest.

55
00:03:20.217 --> 00:03:24.606
So I want you to come in and

56
00:03:24.606 --> 00:03:32.549
say mpm install-D vitest@0.24.3.

57
00:03:32.549 --> 00:03:37.900
And then @testing-library

58
00:03:37.900 --> 00:03:42.825
/react@13.4.0.

59
00:03:42.825 --> 00:03:46.969
It's worth mentioning that vitest is
made by the same people that make vite,

60
00:03:46.969 --> 00:03:51.319
I think it's probably in the name that
you probably guessed that, but they are.

61
00:03:51.319 --> 00:03:55.249
And vite and vitest were made for
view initially, right?

62
00:03:55.249 --> 00:03:57.853
But they work just as well for react so

63
00:03:57.853 --> 00:04:03.835
I have no problems endorsing vitests is a
perfectly good way of doing react testing.

64
00:04:06.159 --> 00:04:09.715
Does talk a second about testing-library.

65
00:04:09.715 --> 00:04:13.830
Testing-library was meant to
replace something called enzyme.

66
00:04:13.830 --> 00:04:16.403
If you've been writing react long enough,

67
00:04:16.403 --> 00:04:20.307
or if you've taken this class previously,
you've used enzyme.

68
00:04:20.307 --> 00:04:23.869
That was made by Airbnb as like
a bunch of testing helpers for

69
00:04:23.869 --> 00:04:25.447
testing react projects.

70
00:04:25.447 --> 00:04:29.131
It's a huge pain in the butt and
I'm very glad that it's gone.

71
00:04:29.131 --> 00:04:33.291
[LAUGH] Thank you to all
the people that made it.

72
00:04:33.291 --> 00:04:36.838
It was better than nothing,
which is what we had before.

73
00:04:36.838 --> 00:04:39.495
The testing-library is basically
better in every single way.

74
00:04:39.495 --> 00:04:40.322
It's less flaky.

75
00:04:40.322 --> 00:04:41.261
It's easier to use.

76
00:04:41.261 --> 00:04:43.985
It's faster, all the good things.

77
00:04:43.985 --> 00:04:45.821
Testing-library.

78
00:04:45.821 --> 00:04:50.683
It's a bunch of helper functions for
testing react applications.

79
00:04:50.683 --> 00:04:55.685
You do not us vitest, or
sorry, you do not use enzyme

80
00:04:55.685 --> 00:05:01.156
with testing-library,
they are mutually exclusive.

81
00:05:01.156 --> 00:05:06.660
One more thing, I need you to
install mpm install-D happy-DOM.

82
00:05:06.660 --> 00:05:10.293
I'm gonna do happy-DOM at 7.6.0.

83
00:05:13.393 --> 00:05:15.804
Many of you probably have heard of JS DOM.

84
00:05:15.804 --> 00:05:18.217
It's like a node
implementation of the DOM.

85
00:05:18.217 --> 00:05:21.865
We can use it to test browser
things without ever having

86
00:05:21.865 --> 00:05:24.493
to spin up a browser which is very slow.

87
00:05:24.493 --> 00:05:28.126
If you wanna do that you can use something
like playwright or puppeteer to do that.

88
00:05:28.126 --> 00:05:33.592
Totally valid what happy DOM is is
like a minimalistic version of JS DOM.

89
00:05:33.592 --> 00:05:37.233
So we don't have to spin up a browser we
can just test everything inside of node.

90
00:05:38.971 --> 00:05:42.390
My advice for you is for
most things, use happy DOM.

91
00:05:42.390 --> 00:05:43.863
It's small and fast.

92
00:05:43.863 --> 00:05:49.605
It's not a total complete DOM like
JS DOM is, but it is much faster.

93
00:05:49.605 --> 00:05:51.807
So if happy DOM works, use happy DOM.

94
00:05:51.807 --> 00:05:54.625
If it doesn't, then use JS DOM.

95
00:05:54.625 --> 00:05:57.174
And then as far as like puppeteer and
playwright,

96
00:05:57.174 --> 00:06:01.069
my suggestion to you about like those
full featured browser environments.

97
00:06:01.069 --> 00:06:05.204
Is had like, a few important tests
that you run inside of those.

98
00:06:05.204 --> 00:06:07.447
And then, that's it.

99
00:06:07.447 --> 00:06:10.427
Those end-to-end tests are expensive,
their flaky.

100
00:06:10.427 --> 00:06:13.499
And so make sure that you're testing
really important things don't just go

101
00:06:13.499 --> 00:06:14.894
willy-nilly on the end testing.

102
00:06:14.894 --> 00:06:18.160
That's just my methodology testing.

103
00:06:18.160 --> 00:06:21.874
Coming from someone that does
not like to write tests.

104
00:06:21.874 --> 00:06:25.949
If you like writing tests,
then by all means, tell me the heck off.

105
00:06:25.949 --> 00:06:31.211
Okay, so test we're gonna write
a function here called test,

106
00:06:31.211 --> 00:06:34.499
and it's gonna run some vitest for us.

107
00:06:34.499 --> 00:06:37.079
We don't have to be any
more specific than that.

108
00:06:37.079 --> 00:06:38.309
That is it.

109
00:06:40.586 --> 00:06:44.543
Fun little trick now you can
write mpm run tests, right?

110
00:06:44.543 --> 00:06:50.816
Or mpm run t or if you're extra lazy
like me mpm t will run mpm test for you.

111
00:06:54.300 --> 00:06:58.287
Am I in the,
I bet you I have to do this again.

112
00:06:58.287 --> 00:07:01.865
Now mpm t is gonna say, hey,
you don't have any tests.

113
00:07:01.865 --> 00:07:03.248
I don't know what to do about that.

114
00:07:03.248 --> 00:07:05.485
So that's what you should see.

115
00:07:05.485 --> 00:07:07.891
But, yeah, fun fact.

116
00:07:07.891 --> 00:07:10.940
Mpm t does mpm run test for you.

117
00:07:10.940 --> 00:07:13.258
I use that all the time.

118
00:07:13.258 --> 00:07:21.484
Okay, one little thing to
add to your vite config.

119
00:07:21.484 --> 00:07:22.460
Testing here, right?

120
00:07:22.460 --> 00:07:24.627
A little testing.

121
00:07:24.627 --> 00:07:30.476
And then we just wanna give
an environment of happy DOM.

122
00:07:30.476 --> 00:07:35.209
By default it's gonna use
JS DOM which is much slower.

123
00:07:35.209 --> 00:07:38.142
I like happy DOM it's much
faster I like fast test.

124
00:07:38.142 --> 00:07:39.982
Therefore, going to generate faster texts.

125
00:07:42.010 --> 00:07:43.520
All right, so now we are ready to go.

126
00:07:43.520 --> 00:07:45.473
We're ready to officially
start writing tests.

127
00:07:50.541 --> 00:07:55.234
So we're gonna write a test for pet.jsx.

128
00:07:55.234 --> 00:08:01.223
So here's from just high level Brian Hall
thinks about testing kind of stuff.

129
00:08:01.223 --> 00:08:04.312
Try to test functionality
not implementation,

130
00:08:04.312 --> 00:08:09.069
which is to say like, don't test that
the hook has the correct value in it.

131
00:08:09.069 --> 00:08:13.964
Test the user interface is working
the way that a user would expect it to.

132
00:08:13.964 --> 00:08:15.056
In other words, try and

133
00:08:15.056 --> 00:08:17.961
approach your tests like a user
approaches your application.

134
00:08:17.961 --> 00:08:21.638
If I click a button, I see the thing
that I want, those kind of things.

135
00:08:21.638 --> 00:08:24.285
Like try and
tell user stories through your tests.

136
00:08:27.129 --> 00:08:32.069
Not always possible, sometimes you need
do to test the implementation details.

137
00:08:32.069 --> 00:08:35.686
But like doing things like extensive
spying and mocking and things like that.

138
00:08:35.686 --> 00:08:39.615
Generally, I don't like because
as soon as I want to change

139
00:08:39.615 --> 00:08:44.333
the implementation of something to
do the same action but a better way,

140
00:08:44.333 --> 00:08:48.675
I don't wanna go change on my test
to test my new implementation.

141
00:08:48.675 --> 00:08:50.473
I don't care if my implementation changes.

142
00:08:50.473 --> 00:08:52.673
I care if user stories break.

143
00:08:52.673 --> 00:08:56.282
That's probably a better summation
of what I'm trying to say.

144
00:08:56.282 --> 00:09:02.201
Every UI if I've ever worked on
changes all the time, right?

145
00:09:02.201 --> 00:09:05.414
We're shipping new headers or
changing the colors.

146
00:09:05.414 --> 00:09:06.962
We're moving the button.

147
00:09:06.962 --> 00:09:09.529
Try not to test the UI.

148
00:09:09.529 --> 00:09:12.695
If the UI is changes,
it doesn't mean it broke.

149
00:09:12.695 --> 00:09:14.176
It just means it changed, right?

150
00:09:14.176 --> 00:09:16.661
So I try not to do that.

151
00:09:16.661 --> 00:09:21.947
A fun way of fixing bugs when I
can't figure out like I'm having

152
00:09:21.947 --> 00:09:28.151
a trouble fixing a bug is I'll write
a test that fails because of that bug.

153
00:09:28.151 --> 00:09:32.863
And then I'll try and fix it, until
that tests pass that has the benefit of

154
00:09:32.863 --> 00:09:37.803
guaranteeing myself that I fixed the bug
and I also get to leave a test behind so

155
00:09:37.803 --> 00:09:40.468
that regression doesn't happen again.

156
00:09:40.468 --> 00:09:43.930
So that,
that's a lot of my tests come from that.

157
00:09:43.930 --> 00:09:46.741
You should be deleting
tests on a regular basis.

158
00:09:46.741 --> 00:09:49.714
You should get into
the habit of deleting tests.

159
00:09:49.714 --> 00:09:52.792
If you have bad tests,
if you have old tests,

160
00:09:52.792 --> 00:09:56.778
deleting tests should be
something that you think about.

161
00:09:56.778 --> 00:09:59.545
And then fix or delete flaky tests.

162
00:09:59.545 --> 00:10:04.209
The only flaky test I tolerate
is something like puppeteer or

163
00:10:04.209 --> 00:10:07.049
something like that or playwright.

164
00:10:07.049 --> 00:10:11.966
Where I'm like testing if a user clicks
here fills in these forms click submit

165
00:10:11.966 --> 00:10:16.974
goes here clicks this fills this in and
I'm done testing the entire user flow.

166
00:10:16.974 --> 00:10:18.156
It's just flaky.

167
00:10:18.156 --> 00:10:23.090
Even the best software, even in the best
of times it's a flaky like Selenium kind

168
00:10:23.090 --> 00:10:25.576
of environment, it's still worth it.

169
00:10:25.576 --> 00:10:29.585
Because testing that your user can log in
and pay their bill or something like that.

170
00:10:29.585 --> 00:10:32.983
It's worth a flaky test to be able
to guarantee yourself that that's

171
00:10:32.983 --> 00:10:33.756
gonna happen.

172
00:10:33.756 --> 00:10:36.332
Everything else if it's flaky,
delete it or fix it.

173
00:10:36.332 --> 00:10:37.759
One of the two.

174
00:10:37.759 --> 00:10:40.283
Okay, that makes sense?

175
00:10:40.283 --> 00:10:43.562
That's my high level,
what I think about tests.

176
00:10:43.562 --> 00:10:46.056
I think it's pretty reasonable.

177
00:10:46.056 --> 00:10:50.412
I've arrived at that over years of like I
used to work at a company where they did

178
00:10:50.412 --> 00:10:51.475
full TDD, right?

179
00:10:51.475 --> 00:10:54.193
You would write all of your tests and

180
00:10:54.193 --> 00:10:58.644
then you would write the code
to fulfill all of your tests.

181
00:10:58.644 --> 00:11:00.035
I think it's unnecessary.

182
00:11:00.035 --> 00:11:03.040
I think it's unnecessarily slow and
I don't think you get any benefit from it.

183
00:11:03.040 --> 00:11:06.704
So, you can disagree with me and
you can just be wrong.

184
00:11:06.704 --> 00:11:07.436
It's fine.

185
00:11:07.436 --> 00:11:08.292
I'm okay with that.

186
00:11:10.130 --> 00:11:11.798
I'm joking, for the most part.

187
00:11:14.037 --> 00:11:16.488
There's definitely people that
would disagree with me on that.

