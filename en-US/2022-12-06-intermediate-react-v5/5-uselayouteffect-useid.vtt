WEBVTT

1
00:00:00.552 --> 00:00:05.073
So I have this bit of UI and I want
to be able to measure this text area

2
00:00:05.073 --> 00:00:08.210
whenever a user lets go of the mouse,
right?

3
00:00:11.772 --> 00:00:15.071
Why can't I just do
useEffect to measure that?

4
00:00:17.837 --> 00:00:19.076
Well, let's try it.

5
00:00:23.040 --> 00:00:25.105
Let's get useEffect in here.

6
00:00:28.077 --> 00:00:31.948
So, for how the code works,
just looking at this,

7
00:00:33.583 --> 00:00:37.654
You have a width and
a height set as hooks, right?

8
00:00:37.654 --> 00:00:40.836
And then if you remember from previous,

9
00:00:40.836 --> 00:00:44.963
an effect happens immediately
after a render ends.

10
00:00:44.963 --> 00:00:50.088
However, an effect is actually not
synchronously afterwards, right?

11
00:00:50.088 --> 00:00:52.946
So you have the render
function that happens.

12
00:00:52.946 --> 00:00:57.703
There's some pause,
the pause will be milliseconds, right?

13
00:00:57.703 --> 00:01:00.532
It's basically the next tick,
the next frame,

14
00:01:00.532 --> 00:01:04.260
whatever you wanna call it, and
then it'll run your function.

15
00:01:04.260 --> 00:01:07.069
Why is this problematic for
something like this?

16
00:01:08.876 --> 00:01:13.981
So, if I come in here and
do this, save it.

17
00:01:13.981 --> 00:01:17.117
Might be kind of hard to see
over the stream, but if you do,

18
00:01:17.117 --> 00:01:19.745
you'll get kind of like
a ghostly effect there.

19
00:01:19.745 --> 00:01:23.045
You can see it kind of like
bounce a little bit, right?

20
00:01:23.045 --> 00:01:26.693
That's because it's happening twice,
right?

21
00:01:26.693 --> 00:01:28.930
In fact, you can see it there,
even if I'm just clicking on it.

22
00:01:31.254 --> 00:01:35.011
So what layout effect is going to do
is it's going to allow you not have to

23
00:01:35.011 --> 00:01:36.589
wait that like little pause.

24
00:01:36.589 --> 00:01:38.801
It's actually going to happen
immediately after the end.

25
00:01:38.801 --> 00:01:41.817
So actually synchronously after
your render function ends,

26
00:01:41.817 --> 00:01:43.559
your layout effect is going to run.

27
00:01:43.559 --> 00:01:45.551
And so that if you call setState,

28
00:01:45.551 --> 00:01:49.977
inside of that effect you'll get one
rerender instead of two rerenders.

29
00:01:51.465 --> 00:01:56.228
So if I do useLayoutEffect here now,
notice I don't get that ghosting effect

30
00:01:56.228 --> 00:01:59.831
anymore, that's because I'm
calling this inherence.

31
00:01:59.831 --> 00:02:02.702
So I'm actually only getting
one rerender of two rerenders.

32
00:02:04.302 --> 00:02:08.381
You might ask yourself, how is this
useful, the answer is almost never.

33
00:02:08.381 --> 00:02:11.977
[LAUGH] It's really only useful for
exactly what I'm trying to hear,

34
00:02:11.977 --> 00:02:16.441
which is you have something, and you need
to measure something that happens the DOM,

35
00:02:16.441 --> 00:02:19.301
but it can only be measured
after it's been rendered.

36
00:02:19.301 --> 00:02:22.948
That is when layoutEffect is very useful.

37
00:02:22.948 --> 00:02:27.262
Everything else just useEffect.

38
00:02:27.262 --> 00:02:32.240
The other kind of minor caveat,
if you're migrating

39
00:02:32.240 --> 00:02:36.775
something from a class
component to an effect and

40
00:02:36.775 --> 00:02:40.548
it depends on that immediate behavior.

41
00:02:40.548 --> 00:02:44.267
Class components, the component
did mount used to work like this,

42
00:02:44.267 --> 00:02:46.562
actually still works like this, right?

43
00:02:46.562 --> 00:02:51.339
And so sometimes that behavior is
dependent on this immediate synchronous

44
00:02:51.339 --> 00:02:52.639
effect happening.

45
00:02:52.639 --> 00:02:57.863
So useLayoutEffect can be useful for
migrating from class components

46
00:02:57.863 --> 00:03:03.367
to function components where you have
that relied upon order happening.

47
00:03:03.367 --> 00:03:06.873
Otherwise, always useEffects.

48
00:03:06.873 --> 00:03:08.611
I'll be honest with you,

49
00:03:08.611 --> 00:03:12.879
I don't think I've ever
professionally used a layout effect.

50
00:03:12.879 --> 00:03:14.123
I could see where it'd be useful, right?

51
00:03:14.123 --> 00:03:18.226
For something like this, where I'm
actually measuring something happening.

52
00:03:18.226 --> 00:03:21.611
I'm sure you can imagine some animation
where you need to measure how far

53
00:03:21.611 --> 00:03:25.123
something's gonna go inside of a DOM
element, and you need to measure it.

54
00:03:25.123 --> 00:03:30.691
Layout effect is exactly there for that
purpose, everything else just useEffect.

55
00:03:30.691 --> 00:03:34.338
&gt;&gt; So if use memo returns a function and
behaves like useCallBack?

56
00:03:36.879 --> 00:03:40.587
&gt;&gt; Correct, that is exactly true.

57
00:03:40.587 --> 00:03:43.483
So that was layout effect.

58
00:03:46.328 --> 00:03:51.035
Let's take a look at useId.

59
00:03:51.035 --> 00:03:52.817
This one is occasionally useful, and

60
00:03:52.817 --> 00:03:56.391
it's very useful, particularly in
the case I'm about to describe to you.

61
00:03:59.024 --> 00:04:06.461
Let's say you are making
a design system for

62
00:04:06.461 --> 00:04:10.485
your company, right?

63
00:04:10.485 --> 00:04:13.284
For example, Stripe has a design
system that we work on.

64
00:04:15.123 --> 00:04:19.113
And you have some sort of fancy input,
right?

65
00:04:19.113 --> 00:04:21.914
That has a label, it has an input,

66
00:04:21.914 --> 00:04:26.760
it has other stuff that associates
all the stuff together.

67
00:04:26.760 --> 00:04:32.030
A good example, this is associating
together a input and a label, right?

68
00:04:32.030 --> 00:04:34.613
So if you click on the Label,
it highlights the input.

69
00:04:34.613 --> 00:04:38.629
Most of us are familiar
with how that works, right?

70
00:04:38.629 --> 00:04:45.405
If you look at that here,
I have a input, I have a label,

71
00:04:45.405 --> 00:04:51.624
and I have to match the HTML
4 to the ID of the input.

72
00:04:51.624 --> 00:04:56.804
What if I have four different inputs,
I can't just say, ID is equal to 1,

73
00:04:56.804 --> 00:05:01.494
right, because that would make all
of these have the exact same ID,

74
00:05:01.494 --> 00:05:03.576
that doesn't work, right?

75
00:05:03.576 --> 00:05:08.490
So I need some sort of unique identifier
that works in pairs, or not pairs,

76
00:05:08.490 --> 00:05:12.156
but that's internally
consistent to a component, but

77
00:05:12.156 --> 00:05:14.583
I can use it multiple times, right?

78
00:05:14.583 --> 00:05:18.708
Cuz if you look down here,
I'm using this LabelInputPair four times.

79
00:05:21.827 --> 00:05:25.355
Not only that, I need it to work also
on server-side rendering, right?

80
00:05:25.355 --> 00:05:28.439
So I need it to be consistent
across renders and

81
00:05:28.439 --> 00:05:31.215
destinations and all that kind of stuff.

82
00:05:31.215 --> 00:05:34.255
That's why useId is useful.

83
00:05:34.255 --> 00:05:38.765
If I do useID, it will give me back
a unique identifier that will be

84
00:05:38.765 --> 00:05:41.963
consistent within this label input pair,
and

85
00:05:41.963 --> 00:05:46.477
then I can use multiple times
across various different renders.

86
00:05:46.477 --> 00:05:49.653
Does that make sense,
the use case why I need this?

87
00:05:49.653 --> 00:05:56.842
I need an Id, that per instantiation
of a component is consistent.

88
00:05:59.577 --> 00:06:03.958
So for example, I do useId,
you can see my rendering it out here.

89
00:06:03.958 --> 00:06:08.424
This one's r0, r1, r2 r3,
so on and so forth.

90
00:06:08.424 --> 00:06:12.607
And that's how I'm able to
associate that this input,

91
00:06:12.607 --> 00:06:18.314
this one here goes this input here,
this label here goes with this one here.

92
00:06:18.314 --> 00:06:24.059
Otherwise, I'd have to have
my useIdComponent up here.

93
00:06:24.059 --> 00:06:27.458
Have some sort of counter or something
like that that would feed into it,

94
00:06:27.458 --> 00:06:29.306
it'd be get annoying really quickly.

95
00:06:31.998 --> 00:06:34.829
So, that's what useId is for.

96
00:06:34.829 --> 00:06:37.787
I have used this one before
professionally, exactly this,

97
00:06:37.787 --> 00:06:40.049
it's useful for
things like design systems.

98
00:06:40.049 --> 00:06:44.253
And specifically for label and
inputPairs it's very, very useful.

99
00:06:46.901 --> 00:06:51.069
You'll notice its partly hard to see here,
but there's colons here,

100
00:06:51.069 --> 00:06:55.384
they intentionally do that, so
you cannot do CSS selectors on those Ids.

101
00:06:55.384 --> 00:06:59.326
Cuz I knew people would do it and then
they're, we don't want you to do that,

102
00:06:59.326 --> 00:07:03.451
because we're never going to guarantee
you that it's r0 on this computer, and

103
00:07:03.451 --> 00:07:06.140
it's gonna be r0 on that computer as well,
right?

104
00:07:06.140 --> 00:07:09.953
They didn't want that, they want you to
use some other way of selecting things for

105
00:07:09.953 --> 00:07:13.270
CSS, but that's why there's colons
there so that you don't use it for

106
00:07:13.270 --> 00:07:14.476
CSS selectors.

107
00:07:14.476 --> 00:07:17.606
One more thing I was gonna add here.

108
00:07:17.606 --> 00:07:20.964
What happens if I need to
useId multiple times, but

109
00:07:20.964 --> 00:07:23.551
it needs to be inside of one component?

110
00:07:23.551 --> 00:07:29.578
They suggest don't do
const Id2=useId again.

111
00:07:29.578 --> 00:07:34.460
What they suggest is that
const Id2 equals your

112
00:07:34.460 --> 00:07:39.231
id plus some modifier right and
then use that.

113
00:07:39.231 --> 00:07:42.172
I'm just pulling that
directly from the React docs.

114
00:07:42.172 --> 00:07:47.543
They suggest don't use useId multiple
times inside of one component,

115
00:07:47.543 --> 00:07:49.520
cuz it's not necessary.

116
00:07:49.520 --> 00:07:52.865
Yeah, and this is safe across
server-side renders and client-side.

117
00:07:55.151 --> 00:07:56.263
Yeah, Mark.

118
00:07:56.263 --> 00:07:57.625
&gt;&gt; Could it be used for

119
00:07:57.625 --> 00:08:02.661
keys when mapping through an array
if we don't have any unique value?

120
00:08:02.661 --> 00:08:05.328
&gt;&gt; So here's the place where I
envision it could be used as a key.

121
00:08:07.399 --> 00:08:12.287
Let's say I had a select, okay,
I have a select inside of here

122
00:08:12.287 --> 00:08:17.178
instead of an input and
every one of my select has a different,

123
00:08:19.643 --> 00:08:23.244
Array of key or a array of options, right?

124
00:08:23.244 --> 00:08:30.043
I could use that as the key prefix to
whatever set of options that I have.

125
00:08:30.043 --> 00:08:35.549
You will never just like use an id
directly inside of a for loop, right?

126
00:08:35.549 --> 00:08:40.185
Because you remember we don't use
hooks inside of for loops, right?

127
00:08:42.544 --> 00:08:45.747
So I think generally the person's
asking if I'm intuiting

128
00:08:45.747 --> 00:08:50.110
what they're trying to get at, I think
the answer is no, don't useId that way.

129
00:08:50.110 --> 00:08:53.990
But I did wanna carve out that I think
there are occasions where you're

130
00:08:53.990 --> 00:08:56.951
trying to differentiate this
set of options from this

131
00:08:56.951 --> 00:08:59.735
set of options as
holistically different lists.

132
00:08:59.735 --> 00:09:03.309
Probably makes some sense to
use it in that particular case.

