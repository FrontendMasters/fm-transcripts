WEBVTT

1
00:00:00.000 --> 00:00:02.574
We're gonna go do details that TSX.

2
00:00:02.574 --> 00:00:06.212
So, as is tradition,
we go into deep details.

3
00:00:06.212 --> 00:00:09.166
And we modify this to details TSX.

4
00:00:09.166 --> 00:00:12.062
All right,
now we get a bunch of type errors.

5
00:00:12.062 --> 00:00:14.871
It's exactly what we want.

6
00:00:14.871 --> 00:00:16.830
Before we get too far into details,

7
00:00:16.830 --> 00:00:21.154
we're gonna create a new file on the side
here inside of the source directory.

8
00:00:21.154 --> 00:00:29.267
And we're just gonna call
it API ResponsesTypes.ts.

9
00:00:31.254 --> 00:00:33.595
It's very common that
you'll have a project, and

10
00:00:33.595 --> 00:00:36.165
you'll have like a grab bag
of types that you want to do.

11
00:00:36.165 --> 00:00:41.331
And you put them in a separate file so
you can import them in other files.

12
00:00:41.331 --> 00:00:44.006
People have varying different
methodologies of doing this.

13
00:00:44.006 --> 00:00:48.708
I like just having Like one just for
API responses, maybe one for

14
00:00:48.708 --> 00:00:53.952
other types of objects that I might
have maybe common types of objects.

15
00:00:53.952 --> 00:00:59.602
Some people like to have one type one
file that seems aggressive to me.

16
00:00:59.602 --> 00:01:01.095
But you know what you do you.

17
00:01:01.095 --> 00:01:04.741
I'm if you feel that's the best
thing to do should do that.

18
00:01:06.801 --> 00:01:11.770
Okay, first thing we do is we
gonna export a type of animal.

19
00:01:11.770 --> 00:01:14.582
This is gonna be kind
of an enumerated type.

20
00:01:16.254 --> 00:01:21.629
So, our animals,
we only have dog, cat, bird,

21
00:01:24.473 --> 00:01:31.113
reptile or rabbit.

22
00:01:31.113 --> 00:01:33.668
So if we identify something as an animal,

23
00:01:33.668 --> 00:01:37.689
it can only be one of literally
only one of these strings, right?

24
00:01:37.689 --> 00:01:41.851
If we try and put horse in there, it's
going to say nope, that's not an animal.

25
00:01:41.851 --> 00:01:43.994
I know that you told me that already.

26
00:01:43.994 --> 00:01:44.961
Yeah.

27
00:01:44.961 --> 00:01:48.543
&gt;&gt; What happens if the API returned
something you didn't expect?

28
00:01:48.543 --> 00:01:51.004
&gt;&gt; Your Programme is gonna crash.

29
00:01:51.004 --> 00:01:53.542
So it does not help you with that.

30
00:01:53.542 --> 00:01:59.300
So when you tell it like this is an API
response, and it's up this shape, right?

31
00:01:59.300 --> 00:02:03.114
The types are going to help you enforce
that shape continues to look like that.

32
00:02:03.114 --> 00:02:07.827
But you're not saved from the fact that
an API could change that on you, right?

33
00:02:07.827 --> 00:02:10.619
If you want something like that,
you have to use something like what is it?

34
00:02:10.619 --> 00:02:17.233
TRPC or something like that or there are
ways to generate types from API shapes,

35
00:02:17.233 --> 00:02:21.391
but I mean,
that still can get messed up, right?

36
00:02:21.391 --> 00:02:25.532
So maybe a different way of saying this is
that type script does not save you from

37
00:02:25.532 --> 00:02:26.363
that problem.

38
00:02:26.363 --> 00:02:29.862
You still have the normal problem
of what if my API is broken?

39
00:02:29.862 --> 00:02:34.664
Yeah Yeah,

40
00:02:34.664 --> 00:02:37.597
I was at LinkedIn.

41
00:02:37.597 --> 00:02:39.152
I remember one of my companies,

42
00:02:39.152 --> 00:02:42.378
we actually generated types from
API responses that ended up being

43
00:02:42.378 --> 00:02:45.156
more annoying than worth it
to be totally frank with you.

44
00:02:45.156 --> 00:02:49.638
I would have preferred to just
maintain the types by hand because

45
00:02:49.638 --> 00:02:52.303
the types of the generated were nuts.

46
00:02:52.303 --> 00:02:56.343
All right, export interface pet, and

47
00:02:56.343 --> 00:03:01.249
we're just gonna type
what our pet looks like.

48
00:03:01.249 --> 00:03:06.481
ID is a number, name is a string.

49
00:03:06.481 --> 00:03:08.273
Animal is a animal.

50
00:03:08.273 --> 00:03:10.504
We just made that one.

51
00:03:10.504 --> 00:03:16.449
Description is a string,
breed is a string.

52
00:03:18.684 --> 00:03:23.934
Images is an array of string.

53
00:03:27.283 --> 00:03:32.384
City is a string, and state is a string.

54
00:03:33.974 --> 00:03:35.616
Cool, cool.

55
00:03:35.616 --> 00:03:42.010
Export, interface of PetAPIResponse

56
00:03:45.583 --> 00:03:48.002
Some people like to really get into and

57
00:03:48.002 --> 00:03:52.246
say call this IPet instead of
because it's an interface, right?

58
00:03:52.246 --> 00:03:55.851
And it's the kind of signifies to that,
this is a type,

59
00:03:55.851 --> 00:03:59.551
that's a dotnet thing someone
correct me if I'm wrong.

60
00:03:59.551 --> 00:04:02.383
I've worked at Microsoft
at long enough to,

61
00:04:02.383 --> 00:04:05.000
I should have written dotnet I never did.

62
00:04:05.000 --> 00:04:11.391
I don't do it because it looks ugly to me,
and usually it's not a problem.

63
00:04:11.391 --> 00:04:16.067
But I'll tell you that there are lots
of people that do it that way.

64
00:04:16.067 --> 00:04:17.270
Number of results.

65
00:04:20.017 --> 00:04:24.222
Number start index,

66
00:04:24.222 --> 00:04:27.960
number end index,

67
00:04:27.960 --> 00:04:33.336
number has next is a boolean

68
00:04:41.080 --> 00:04:46.133
and pets is an array of pet objects.

69
00:04:46.133 --> 00:04:47.802
All right, so there you go.

70
00:04:47.802 --> 00:04:54.140
That is the types of our at
least our pet API search result.

71
00:04:54.140 --> 00:04:59.577
And now we have this pet API response
shape in a couple places in our code,

72
00:04:59.577 --> 00:05:03.339
and we just can continue to use it,
which is nice.

73
00:05:03.339 --> 00:05:10.750
All right, so back at details.tsx here, we
are going to import our type here, import

74
00:05:11.888 --> 00:05:18.201
PET API response from API responses types.

75
00:05:20.268 --> 00:05:26.188
Okay, the top of the render function here.

76
00:05:26.188 --> 00:05:27.796
If we don't have an ID here,

77
00:05:27.796 --> 00:05:31.288
because in theory this ID can
come back as undefined, right?

78
00:05:31.288 --> 00:05:34.285
Like what happens if we end
up on the details page, and

79
00:05:34.285 --> 00:05:36.226
they didn't give us a correct ID?

80
00:05:36.226 --> 00:05:38.663
Technically, it's possible for
that to happen.

81
00:05:38.663 --> 00:05:41.867
And you can see here this ID can
be either string or undefined.

82
00:05:43.615 --> 00:05:44.614
We have an error boundary.

83
00:05:44.614 --> 00:05:46.487
So let's just lean into that, right?

84
00:05:46.487 --> 00:05:49.394
If you remember down here at the bottom,
there's an error boundary.

85
00:05:49.394 --> 00:05:51.572
Let's just throw an error, right?

86
00:05:51.572 --> 00:05:58.770
So if there's no ID
then throw a new error.

87
00:05:58.770 --> 00:06:02.953
Why did you not give me an ID?

88
00:06:02.953 --> 00:06:06.478
I wanted an ID, I have no ID.

89
00:06:08.328 --> 00:06:11.046
I write great error messages, okay?

90
00:06:13.310 --> 00:06:14.718
This is a question, I suppose.

91
00:06:16.679 --> 00:06:18.443
Maybe a couple exclamation points.

92
00:06:18.443 --> 00:06:19.737
There we go, okay?

