WEBVTT

1
00:00:00.503 --> 00:00:05.039
So, now if we go back to details you can
see it should be less mad about this,

2
00:00:05.039 --> 00:00:05.548
right?

3
00:00:05.548 --> 00:00:08.140
Cuz now this is actually typed.

4
00:00:08.140 --> 00:00:12.233
You might have missed that
cuz I did it kind of fast.

5
00:00:13.392 --> 00:00:17.742
Sometimes VS Code tries to be pretty
judicious about when it reruns your

6
00:00:17.742 --> 00:00:19.052
TypeScript for you.

7
00:00:19.052 --> 00:00:21.279
Cuz it doesn't want to
run it constantly on you.

8
00:00:21.279 --> 00:00:25.500
So, you can see there that I had
an error that I knew I had fixed, so,

9
00:00:25.500 --> 00:00:27.810
just a really quick tool to fix that.

10
00:00:27.810 --> 00:00:35.019
I'll just cut the line and then hit Ctrl+Z
and that forces TypeScript to run again.

11
00:00:35.019 --> 00:00:39.499
So, if I just hit Cmd+X, or
I'm pretty sure Ctrl+X on Windows,

12
00:00:39.499 --> 00:00:41.419
it'll cut the entire line.

13
00:00:41.419 --> 00:00:45.218
And then I'll just hit
Ctrl+Z to put it back.

14
00:00:45.218 --> 00:00:47.297
That'll force TypeScript to rerun.

15
00:00:47.297 --> 00:00:48.449
I do it all the time.

16
00:00:48.449 --> 00:00:52.117
You'll probably see me do it a bunch
of times in the middle of this.

17
00:00:54.658 --> 00:00:58.452
It's one of those things where
your code doesn't compile, so

18
00:00:58.452 --> 00:01:02.255
you're like if I run it again,
it's gonna compile this time.

19
00:01:02.255 --> 00:01:07.975
But sometimes it actually does work,
so, positive reinforcement.

20
00:01:07.975 --> 00:01:11.709
I'm gonna keep doing it, okay, here we go.

21
00:01:11.709 --> 00:01:16.218
Carousel, we're gonna go
back to Carousel.jsx,

22
00:01:16.218 --> 00:01:19.192
please make this Carousel.tsx.

23
00:01:20.715 --> 00:01:26.369
Okay, we're gonna do an interface up here,
interface.

24
00:01:28.801 --> 00:01:31.704
You can call this pProps
you can call this IProps.

25
00:01:31.704 --> 00:01:35.366
In my notes here I have it IProps
because I've been writing TypeScript and

26
00:01:35.366 --> 00:01:38.214
React long enough that I've
always called this IProps.

27
00:01:38.214 --> 00:01:42.057
I just told you that I don't do that
in the other file, that these ones for

28
00:01:42.057 --> 00:01:44.590
whatever reason,
I always call them IPprops.

29
00:01:44.590 --> 00:01:47.861
I think that's just a force of habit.

30
00:01:47.861 --> 00:01:53.317
It's gonna take an images which is
gonna be a string array, right?

31
00:01:53.317 --> 00:01:59.501
And then here inside of component,
you're just gonna provide this as IProps.

32
00:01:59.501 --> 00:02:03.592
And so now it knows that
wherever I refer to images,

33
00:02:03.592 --> 00:02:06.741
these are an array of strings, right?

34
00:02:06.741 --> 00:02:11.981
So, this gets passed into
the React component and

35
00:02:11.981 --> 00:02:16.235
as you're now typing the type of props.

36
00:02:16.235 --> 00:02:18.533
You can give this as well an IState but

37
00:02:18.533 --> 00:02:22.552
we don't need to because we already
set the default state here.

38
00:02:22.552 --> 00:02:27.200
So it already knows that this .state
is a object that has an active

39
00:02:27.200 --> 00:02:28.562
which is a number.

40
00:02:28.562 --> 00:02:32.311
Because it's also reading off the fact
that we have a number here by default.

41
00:02:32.311 --> 00:02:37.027
So, therefore it assumes that
all state is active number.

42
00:02:37.027 --> 00:02:38.990
So, this isn't necessary,
we used to have to do this, right?

43
00:02:38.990 --> 00:02:41.250
We used to have to give
it the type of state.

44
00:02:41.250 --> 00:02:47.972
But with class properties which is doing
this, we don't have to do that anymore.

45
00:02:47.972 --> 00:02:50.588
You might ask, well,
why can't we do it here with defaultProps?

46
00:02:50.588 --> 00:02:54.187
It's because it's static and not
necessarily gonna show up in the props,

47
00:02:54.187 --> 00:02:56.482
therefore, this doesn't work but
this does.

48
00:02:56.482 --> 00:02:59.847
We used to have to type state,
all the time, but

49
00:02:59.847 --> 00:03:02.299
we don't have to do that anymore.

50
00:03:02.299 --> 00:03:08.319
Now we just have to do props,
with regards to class components, yeah.

51
00:03:10.254 --> 00:03:11.686
Great, so, we did that,

52
00:03:11.686 --> 00:03:14.888
we told you that we expect props
that are gonna be of shape.

53
00:03:14.888 --> 00:03:19.116
images, we got that there,
array of images.

54
00:03:20.295 --> 00:03:24.868
That's all good, at the one thing that's
gonna say, hey, you're asking for

55
00:03:24.868 --> 00:03:25.766
an event here.

56
00:03:25.766 --> 00:03:28.644
You need to tell me what
type of event this is.

57
00:03:28.644 --> 00:03:33.549
So, we're gonna say that
this is a MouseEvent,

58
00:03:33.549 --> 00:03:39.782
which we want that to come from React,
so, this MouseEvent.

59
00:03:39.782 --> 00:03:43.107
Technically is the same shape
as a DOM MouseEvent, so,

60
00:03:43.107 --> 00:03:46.807
I think you could probably
literally put the DOM MouseEvent.

61
00:03:46.807 --> 00:03:48.321
They are different, right?

62
00:03:48.321 --> 00:03:51.031
So, I try and
make sure that it comes from React, right?

63
00:03:51.031 --> 00:03:54.403
So, we're importing
the MouseEvent from React and

64
00:03:54.403 --> 00:03:57.093
we need to tell it what
it was pointing at.

65
00:03:57.093 --> 00:04:00.529
And it was pointing at an HTMLElement.

66
00:04:02.667 --> 00:04:03.194
Okay.

67
00:04:05.029 --> 00:04:10.594
Still not quite there,
we still have to say because

68
00:04:10.594 --> 00:04:15.261
this event, it can still be null, right?

69
00:04:18.446 --> 00:04:23.398
So, we have to say, Well, yeah.

70
00:04:26.809 --> 00:04:27.588
Let me see.

71
00:04:31.557 --> 00:04:32.082
Okay, so
we might not have to even do that.

72
00:04:32.082 --> 00:04:37.378
So, what we do have to say is,
hey, what happens

73
00:04:37.378 --> 00:04:42.823
if that HTMLElement does
not have a dataset on it?

74
00:04:42.823 --> 00:04:49.337
So, we can just say if
event.target.dataset.index.

75
00:04:49.337 --> 00:04:50.562
So.

76
00:04:50.562 --> 00:04:53.008
we can ask the question does it have that?

77
00:04:53.008 --> 00:04:57.838
If it does then use that.

78
00:05:03.966 --> 00:05:06.164
And I guess we do still have to ask that,
okay.

79
00:05:08.347 --> 00:05:12.056
So if no event.target.

80
00:05:14.363 --> 00:05:16.399
Instanceof HTMLElement.

81
00:05:21.729 --> 00:05:23.914
Then just return and do nothing.

82
00:05:23.914 --> 00:05:26.179
Okay, so, that was enough to satisfy it.

83
00:05:29.002 --> 00:05:33.562
We have to ask,
is event.target an instanceof HTMLElement?

84
00:05:33.562 --> 00:05:38.056
So, therefore at this point we can
be sufficiently satisfied that

85
00:05:38.056 --> 00:05:41.278
event.target definitely is an HTMLElement.

86
00:05:41.278 --> 00:05:45.082
Every HTMLElement definitely
has the dataset object on it.

87
00:05:45.082 --> 00:05:46.603
It might not have anything on it.

88
00:05:46.603 --> 00:05:50.124
So, here we have to ask the question,
does it have an index?

89
00:05:50.124 --> 00:05:52.664
It does have an index, great.

90
00:05:52.664 --> 00:05:54.666
Now we can set that to active.

91
00:05:54.666 --> 00:05:59.239
And here with the unary plus we
are coercing it to a number.

92
00:06:00.807 --> 00:06:05.835
This is again common dancing
with the TypeScript compiler.

93
00:06:05.835 --> 00:06:10.625
It's like, right, how can I
sufficiently satisfy you that I promise

94
00:06:10.625 --> 00:06:15.428
you that there's really gonna be
a number there, I promise, right?

95
00:06:15.428 --> 00:06:17.908
So, that's what we were doing there.

96
00:06:17.908 --> 00:06:21.610
I mean, you should ask yourself,
do I think my code is better now?

97
00:06:23.019 --> 00:06:26.521
It's certainly more safe but
it was safe before, right?

98
00:06:26.521 --> 00:06:32.911
What I will say is, right now the API
is always giving us well formed data.

99
00:06:32.911 --> 00:06:37.545
I think you can imagine a future where it
doesn't always give you well formed data.

100
00:06:37.545 --> 00:06:42.337
This is going to make you resilient even
to things like that, which is positive.

101
00:06:42.337 --> 00:06:44.094
It's something to keep in mind.

102
00:06:44.094 --> 00:06:46.700
You might be looking at it as this is so

103
00:06:46.700 --> 00:06:49.820
much more code to do
exactly the same thing.

104
00:06:49.820 --> 00:06:52.253
But it's forcing you to be more
defensive about your code.

105
00:06:54.013 --> 00:06:55.407
Which is gonna make your
code more resilient.

106
00:06:58.803 --> 00:07:04.476
Cool, so,
now we have reached TypeScript dash two,

107
00:07:04.476 --> 00:07:08.649
if you wanna go grab that from the repo.

108
00:07:08.649 --> 00:07:15.045
Yeah, and we're about, I don't know,
40% 30% through our migration.

109
00:07:15.045 --> 00:07:20.122
But it starts going faster
which is cool as well.

