WEBVTT

1
00:00:00.000 --> 00:00:06.182
Okay, useContext,

2
00:00:06.182 --> 00:00:09.585
useState, useEffect.

3
00:00:13.359 --> 00:00:17.018
Okay, we have this, I mean,
we can identify this,

4
00:00:17.018 --> 00:00:20.769
it's an animal array, right,
which is kind of fun.

5
00:00:25.739 --> 00:00:30.252
So animal response types, it's an array.

6
00:00:30.252 --> 00:00:34.171
And now what's cool about this is anything
that we know that we pull out of here is

7
00:00:34.171 --> 00:00:35.996
definitely gonna be a valid animal.

8
00:00:35.996 --> 00:00:39.877
And again, I can't put horse in here now,
cuz it'll be like,

9
00:00:39.877 --> 00:00:43.155
nah, it's not a valid animal, right?

10
00:00:43.155 --> 00:00:46.179
TypeScript knows,
it knows that it's animals,

11
00:00:46.179 --> 00:00:49.280
it paid attention when you
were showing it videos.

12
00:00:50.897 --> 00:00:53.389
SearchParams, that's fine.

13
00:00:56.256 --> 00:00:57.790
UseState here.

14
00:00:59.361 --> 00:01:02.309
This one here,
right now it thinks it's just a string,

15
00:01:02.309 --> 00:01:05.469
we actually wanna identify this
empty string is an animal.

16
00:01:08.939 --> 00:01:16.151
And now it knows that it's definitely
gonna be an animal, which is useful.

17
00:01:17.533 --> 00:01:20.546
Okay, requestParams here.

18
00:01:24.484 --> 00:01:27.122
That's interesting,
we can get to that here in just a second.

19
00:01:27.122 --> 00:01:29.905
Pets is gonna be returned as pets any.

20
00:01:29.905 --> 00:01:35.953
Well, that's not what we want,
we assume that we want this to be search.

21
00:01:35.953 --> 00:01:39.459
Okay, results, that's fine.

22
00:01:39.459 --> 00:01:44.065
So what are you mad about here in search?

23
00:01:44.065 --> 00:01:48.235
We've identified this is
gonna be a PetAPIResponse and

24
00:01:48.235 --> 00:01:51.082
a location, animal and it's breed.

25
00:01:53.010 --> 00:01:55.460
So that's a query function, okay?

26
00:01:55.460 --> 00:02:00.419
Going back to searchParams here,
we have fetchSearch,

27
00:02:00.419 --> 00:02:03.842
it knows that that's gonna be search.

28
00:02:05.210 --> 00:02:13.853
So what do we have here in
useQuery that it's mad about that?

29
00:02:17.184 --> 00:02:19.295
All right, well, let's keep going, and

30
00:02:19.295 --> 00:02:21.532
I'll look back at this
here in just a second.

31
00:02:21.532 --> 00:02:27.169
On the form submit, e.target.value,
we just need to identify

32
00:02:27.169 --> 00:02:33.116
that that's definitely gonna be,
okay, yeah, no, this is fine.

33
00:02:33.116 --> 00:02:37.273
Instead of having e.target,
put e.currentTarget.

34
00:02:38.841 --> 00:02:43.114
I know this is a little strange, but
we're not actually guaranteed on these

35
00:02:43.114 --> 00:02:46.053
React form events that
target's gonna be defined,

36
00:02:46.053 --> 00:02:48.079
despite the fact that it always is.

37
00:02:48.079 --> 00:02:52.283
But currentTarget is
guaranteed based on the spec.

38
00:02:52.283 --> 00:02:54.330
You'll find that, again, with TypeScript,
you end up doing things like this.

39
00:02:54.330 --> 00:02:58.639
You'll learn the spec very well, because
you're gonna have to have guarantees for

40
00:02:58.639 --> 00:02:59.555
all of your code.

41
00:02:59.555 --> 00:03:04.417
So target and currentTarget in
this particular sense are always

42
00:03:04.417 --> 00:03:08.431
gonna be the same thing, so that's fine.

43
00:03:08.431 --> 00:03:12.781
And then the last thing here,
you'll find that formdata.get actually

44
00:03:12.781 --> 00:03:17.701
technically returns a form data entry
value, which is not technically a string,

45
00:03:17.701 --> 00:03:18.929
which is annoying.

46
00:03:18.929 --> 00:03:24.004
So we can do this conditional ?.toString,
and

47
00:03:24.004 --> 00:03:30.210
now we can be guaranteed that
animal is going to be a string.

48
00:03:30.210 --> 00:03:32.204
So just put that on all three of these.

49
00:03:35.811 --> 00:03:36.869
Why was it working before?

50
00:03:36.869 --> 00:03:40.011
Because implicitly,
it would call toString for us.

51
00:03:41.907 --> 00:03:45.650
And so now, when we call setRequest
object, it's getting back string, string,

52
00:03:45.650 --> 00:03:47.581
string, which is exactly what it wanted.

53
00:03:56.208 --> 00:04:01.758
And then on, again,
here I think this needs

54
00:04:01.758 --> 00:04:07.759
to be target.value as Animal,
and as Animal.

55
00:04:12.443 --> 00:04:18.003
And then pets down here,
it's still mad about this,

56
00:04:18.003 --> 00:04:20.980
which I'm confused about.

57
00:04:20.980 --> 00:04:25.671
So string; animal: string; I think this
you have to say this is as Animal.

58
00:04:28.145 --> 00:04:32.948
There we go, okay, took me a second, so
this is what went wrong in my notes.

59
00:04:32.948 --> 00:04:40.790
I made the fun audible to
call that fetchSearch here.

60
00:04:40.790 --> 00:04:44.364
This is an Animal, in my notes,
I just have this as a string, right?

61
00:04:44.364 --> 00:04:48.277
Technically it's an Animal,
you should type it as such here.

62
00:04:48.277 --> 00:04:51.263
Going back to searchParams,
so is like, hey,

63
00:04:51.263 --> 00:04:55.231
you've given me here a string,
that is not an Animal, right?

64
00:04:55.231 --> 00:04:59.743
So here you have to identify that
this empty string is an Animal, and

65
00:04:59.743 --> 00:05:03.118
therefore, it'll be happy about that.

66
00:05:03.118 --> 00:05:09.239
And same thing here, if you're gonna do
that, you have to say this is as Animal.

67
00:05:11.552 --> 00:05:13.609
As well as this is as Animal.

68
00:05:16.215 --> 00:05:17.264
As Animal.

69
00:05:19.030 --> 00:05:23.007
Okay, so if you're following along, and
you wanna have that typed as an Animal,

70
00:05:23.007 --> 00:05:25.615
I probably would,
because it's supposed to be one.

71
00:05:25.615 --> 00:05:30.466
You just have to make sure that you're
casting it on all the correct places to be

72
00:05:30.466 --> 00:05:32.373
an Animal type.

73
00:05:32.373 --> 00:05:37.095
So, I mean, that's probably useful for
you to see how I would debug that, right?

74
00:05:37.095 --> 00:05:42.117
If we look at this, it was saying that
this is improperly being overloaded.

75
00:05:42.117 --> 00:05:46.710
And then so I was looking through it,
it was like, okay,

76
00:05:46.710 --> 00:05:49.887
this type here is not castable to this.

77
00:05:49.887 --> 00:05:52.028
And I saw that animal here
was being typed as Animal.

78
00:05:52.028 --> 00:05:54.918
And that's when my light
bulb went off of like,

79
00:05:54.918 --> 00:06:01.620
okay, We have to cast this as an Animal.

80
00:06:04.439 --> 00:06:07.448
All right, any questions about that?

81
00:06:11.126 --> 00:06:15.636
TypeScript, stuff like this
catches me all the time.

82
00:06:18.512 --> 00:06:21.670
&gt;&gt; Would we also wanna cast breed,
since we have, finally,

83
00:06:21.670 --> 00:06:23.350
those things that are breeds?

84
00:06:25.377 --> 00:06:26.599
There's just a lot more.

85
00:06:26.599 --> 00:06:30.989
&gt;&gt; I thought about doing that, but yeah,
there's a lot of breed types, right?

86
00:06:30.989 --> 00:06:32.525
So if you really wanted to, and

87
00:06:32.525 --> 00:06:35.731
the other thing is we're not adding
too many animals day by day.

88
00:06:35.731 --> 00:06:37.732
But I could imagine that
our API could be adding and

89
00:06:37.732 --> 00:06:39.124
subtracting breeds all the time.

90
00:06:39.124 --> 00:06:42.457
So getting a complete breed list
to be in enumerated type, one,

91
00:06:42.457 --> 00:06:44.879
I don't think it'd be particularly useful.

92
00:06:44.879 --> 00:06:48.065
And two, it'd be hard.

93
00:06:48.065 --> 00:06:51.938
So in that case, I would say
the juice isn't worth the squeeze,

94
00:06:51.938 --> 00:06:56.909
whereas working with animals directly,
there's only so many of these, right?

95
00:06:56.909 --> 00:07:00.913
We're not adding new
species of pets every day.

96
00:07:00.913 --> 00:07:02.412
I'm not, maybe you are.

97
00:07:02.412 --> 00:07:07.903
[LAUGH] But yeah, cuz we don't
have to have this animal type,

98
00:07:07.903 --> 00:07:12.866
we could totally just say
this string type and move on.

99
00:07:12.866 --> 00:07:19.081
But this is such a limited
set that it made sense to me.

100
00:07:19.081 --> 00:07:20.988
So that's kind of up to you.

101
00:07:20.988 --> 00:07:25.144
I would not do breed,
I think that would be a bad idea, but

102
00:07:25.144 --> 00:07:28.798
it might be,
typing animal might not be worth it.

103
00:07:28.798 --> 00:07:33.697
I guess, it's probably what I would say,
cuz you end up doing stuff like this.

104
00:07:36.447 --> 00:07:41.027
Okay, questions,
results is the only thing here.

105
00:07:41.027 --> 00:07:42.623
Yeah, so I think we still
have to go type results, but

106
00:07:42.623 --> 00:07:43.802
otherwise we're pretty close there.

107
00:07:49.147 --> 00:07:53.330
Results, Results.tsx.

108
00:07:57.191 --> 00:07:59.759
We do have kind of an awkward thing here,

109
00:07:59.759 --> 00:08:02.867
remember I called my API
response type here Pet?

110
00:08:02.867 --> 00:08:05.127
This is why people like to call it IPet.

111
00:08:07.452 --> 00:08:12.852
But itâ€™s not that big a deal,
all I can say is import {

112
00:08:12.852 --> 00:08:18.136
pet as petType } from
'./APIResponseTypes'.

113
00:08:18.136 --> 00:08:22.936
And now I have the Pet component,
and I have the Pet type there.

114
00:08:22.936 --> 00:08:25.134
I don't find that particularly confusing,
but

115
00:08:25.134 --> 00:08:27.288
other people would take
great exception that.

116
00:08:28.899 --> 00:08:35.059
So pets here is going to
be an array of pet types,

117
00:08:35.059 --> 00:08:41.230
so we're just gonna say
pets : petType array.

118
00:08:41.230 --> 00:08:44.105
And that is enough to type all of results.

119
00:08:49.573 --> 00:08:50.613
Yeah.

120
00:08:54.958 --> 00:08:59.724
Okay, and let's go do App.jsx.

121
00:08:59.724 --> 00:09:02.215
So app, make that App.tsx.

122
00:09:05.069 --> 00:09:09.847
UseState here, we have to say that this is

123
00:09:09.847 --> 00:09:14.225
either gonna to be null as Pet or null.

124
00:09:14.225 --> 00:09:16.778
We need to import that Pet type as well.

125
00:09:19.591 --> 00:09:23.694
Because otherwise, it assumes that this
useState is always gonna be a null, right?

126
00:09:23.694 --> 00:09:28.059
So we have to say that this could be
a null or it could be a Pet, that's fine.

127
00:09:30.016 --> 00:09:37.277
And here, just before this, we just
have to say if there's no container,

128
00:09:37.277 --> 00:09:41.792
then crash the whole app,
because we give up.

129
00:09:41.792 --> 00:09:48.399
throw new Error ( "no
container to render to").

130
00:09:52.934 --> 00:09:54.495
Which it would do that anyway,

131
00:09:54.495 --> 00:09:57.387
but we're just gonna be really
extra explicit about it.

132
00:10:10.360 --> 00:10:15.005
AdoptedPet or null,
dispatch is not assignable to Pet.

133
00:10:15.005 --> 00:10:17.670
Okay, well, that's fine.

134
00:10:17.670 --> 00:10:25.507
So we do have to go back,
it looks like to, Our adoptedPet here,

135
00:10:25.507 --> 00:10:31.596
and we have to say that this can be a Pet,
or it can be null.

136
00:10:36.777 --> 00:10:38.630
Okay, and that'll fix the happiness here.

137
00:10:41.140 --> 00:10:43.884
Cuz in theory,
it will be null most of the time, right?

138
00:10:43.884 --> 00:10:47.487
If someone hasn't clicked Adopt a Pet yet,
that's gonna be null, so

139
00:10:47.487 --> 00:10:50.432
that's actually a valid thing for
it to complain about.

140
00:10:52.731 --> 00:11:00.464
Okay, we still have this Details one
to suss out of what is upset about.

141
00:11:00.464 --> 00:11:07.340
So what I had here before in Details,
I had this PetAPIResponse,

142
00:11:07.340 --> 00:11:11.724
it actually already knows that, right?

143
00:11:11.724 --> 00:11:15.478
So, interacting with this generic this
way was not the useful thing to do.

144
00:11:15.478 --> 00:11:20.539
So, in order to fix this,
all we have to do here is delete this.

145
00:11:23.273 --> 00:11:25.532
And that is correct.

146
00:11:25.532 --> 00:11:27.173
Looks like there's a warning in here,

147
00:11:27.173 --> 00:11:29.371
which we don't need this
PetAPIResponse anymore.

148
00:11:29.371 --> 00:11:34.663
Okay, there we go,
we are now up to TypeScript-4, and

149
00:11:34.663 --> 00:11:39.736
as you can see now,
we have an entirely typed project,

150
00:11:39.736 --> 00:11:43.178
there are no any's in this anymore.

151
00:11:43.178 --> 00:11:49.267
If we run npm run lint again,
we shouldn't have any errors here,

152
00:11:49.267 --> 00:11:53.158
we don't, we can do npx tsc --noEmit.

153
00:11:53.158 --> 00:11:58.421
This will run the TypeScript checker,
everything's working like that.

154
00:11:58.421 --> 00:12:01.917
In your package.json,

155
00:12:01.917 --> 00:12:07.076
go ahead and add the typecheck here,

156
00:12:07.076 --> 00:12:11.742
and you just put tsc --noEmit.

157
00:12:13.115 --> 00:12:17.929
So now I can do npm run typecheck.

158
00:12:17.929 --> 00:12:18.728
And there you go.

159
00:12:21.380 --> 00:12:23.270
So again,
one of the reasons I add all of these.

160
00:12:23.270 --> 00:12:27.822
So now when I have my GitHub action that
I set up later, I can run typecheck,

161
00:12:27.822 --> 00:12:31.162
I can run lint,
you can run format check if you want to.

162
00:12:31.162 --> 00:12:36.061
So that with format,
you can put like a format:check and

163
00:12:36.061 --> 00:12:39.951
it's instead of right, you do, what is it?

164
00:12:39.951 --> 00:12:43.631
npx prettier -- help.

165
00:12:48.957 --> 00:12:54.143
It's like list different, or
check, they give you a new one.

166
00:12:54.143 --> 00:12:59.358
So then you can just do
that --check instead.

167
00:12:59.358 --> 00:13:06.979
So then you can do npm run format:check.

168
00:13:09.828 --> 00:13:12.696
So this is like if you have someone
that's like working in your project

169
00:13:12.696 --> 00:13:16.150
that's not running prettier, and you're
getting sick of them committing files to

170
00:13:16.150 --> 00:13:18.164
your project that are not
run through prettier.

171
00:13:18.164 --> 00:13:23.096
You can have CI basically say,
if you don't conform to prettier,

172
00:13:23.096 --> 00:13:26.189
then I'm gonna fail your build, right?

173
00:13:27.261 --> 00:13:31.384
And then yeah, you run typecheck,
you run lint, you run format check, and

174
00:13:31.384 --> 00:13:35.650
then we're about to do unit tests, then
you run all of your unit tests as well.

175
00:13:35.650 --> 00:13:40.340
And you can be pretty assured that
all of your code is formatted and

176
00:13:40.340 --> 00:13:44.528
to style and working before
you send it out to production.

177
00:13:44.528 --> 00:13:45.739
&gt;&gt; You pretty assured?

178
00:13:45.739 --> 00:13:50.738
&gt;&gt; Pretty assured,
it's gonna be pretty good.

179
00:13:50.738 --> 00:13:51.639
&gt;&gt; You're sure?

180
00:13:51.639 --> 00:13:53.552
&gt;&gt; [LAUGH] Yep, so again,

181
00:13:53.552 --> 00:13:59.105
this is just kind of a preview of
what TypeScript in React is like.

182
00:13:59.105 --> 00:14:03.283
If you wanna go get further into depth
with it, go check out Steve's course.

183
00:14:03.283 --> 00:14:07.253
If you want more TypeScript goodness,
go check out Mike's course, Mike North.

