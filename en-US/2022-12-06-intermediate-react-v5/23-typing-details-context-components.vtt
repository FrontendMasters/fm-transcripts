WEBVTT

1
00:00:00.000 --> 00:00:05.459
The next one down here results this
one here, so here we're gonna say with

2
00:00:05.459 --> 00:00:11.646
use query we're gonna tell it what kind of
query that it's going to give back to us.

3
00:00:11.646 --> 00:00:16.433
So this gives you back a pet API response
what's cool about this is now we can look

4
00:00:16.433 --> 00:00:18.875
at results and what is results gonna be.

5
00:00:18.875 --> 00:00:23.738
It's going be a use query result where
inside of it we know that there's already

6
00:00:23.738 --> 00:00:25.780
a PET API response which is cool.

7
00:00:30.436 --> 00:00:35.896
Okay, awesome, What are you mad about?

8
00:00:35.896 --> 00:00:39.250
The unknown must have a symbol iterator
method that returns an iterator.

9
00:00:39.250 --> 00:00:42.108
Okay, okay, so

10
00:00:42.108 --> 00:00:47.008
we do have to change this from

11
00:00:47.008 --> 00:00:52.523
disable next line to typeScript

12
00:00:52.523 --> 00:00:58.046
-eslint-no-unused-var.

13
00:00:58.046 --> 00:01:03.128
That'll save us from one error

14
00:01:03.128 --> 00:01:08.214
vars there we go that's good.

15
00:01:08.214 --> 00:01:13.339
And underscores SetPopAdoptedPet

16
00:01:13.339 --> 00:01:17.952
useContext AdoptedPetContext

17
00:01:17.952 --> 00:01:22.398
unsafe assignment of any var.

18
00:01:25.727 --> 00:01:31.250
Well let's keep going, with that,
I don't have a note to fix that,

19
00:01:31.250 --> 00:01:35.729
that's fine,replace the pet
declaration down here,

20
00:01:35.729 --> 00:01:39.556
object is possibly undefined, that's fine.

21
00:01:39.556 --> 00:01:44.630
So we can be a little bit more guarded
about that if we use these accessor

22
00:01:44.630 --> 00:01:50.478
methods here if we put question marks, so
now pet can potentially be either pet or

23
00:01:50.478 --> 00:01:55.639
undefined and then again, we can throw
an error here if there is no pet.

24
00:01:55.639 --> 00:02:00.412
So if there's no pet, then throw

25
00:02:00.412 --> 00:02:05.531
new error no pet lol okay here we go.

26
00:02:13.376 --> 00:02:17.378
I was up here is that what it's
mad about is this U state,

27
00:02:17.378 --> 00:02:22.205
it's just mad that I haven't probably
typed this AdoptedPetContext

28
00:02:22.205 --> 00:02:24.927
that's exactly what it's mad about.

29
00:02:24.927 --> 00:02:29.702
Okay, we're fine so it's still gonna
be mad about this because we're

30
00:02:29.702 --> 00:02:32.655
pulling stuff in from AdoptedPetContext.

31
00:02:32.655 --> 00:02:37.452
This is going to end up being an any so
it thinks this underscore here is

32
00:02:37.452 --> 00:02:42.413
an any in our TypeScript or not our
tsLint is actually mad as like, hey,

33
00:02:42.413 --> 00:02:46.743
you told me you promised me you
told me that I cannot have anys.

34
00:02:46.743 --> 00:02:48.665
And I'm mad at you for giving me an any so

35
00:02:48.665 --> 00:02:51.656
we're actually not gonna be able
to fix this file quite yet.

36
00:02:51.656 --> 00:02:56.664
We're gonna have to go type our context
first before we can come back and

37
00:02:56.664 --> 00:02:58.343
say this is error free.

38
00:02:58.343 --> 00:03:03.203
So you should see one here the set right
because this is gonna be an any and

39
00:03:03.203 --> 00:03:08.063
this is gonna be in any and we'll go
fix that later which is fine we expect

40
00:03:08.063 --> 00:03:12.782
that last thing here I told you down
here we'd have to fix this later.

41
00:03:12.782 --> 00:03:16.628
We're passing props through
blindly I still stand by that.

42
00:03:16.628 --> 00:03:19.786
I think this is a good idea and we could
go type this so that it continues to

43
00:03:19.786 --> 00:03:23.539
happen but the easiest thing to do here is
we have no props being passed down, right?

44
00:03:23.539 --> 00:03:29.182
We're not reading props
at all in details so

45
00:03:29.182 --> 00:03:36.665
this is effectively a no op here,
so we can just delete it.

46
00:03:36.665 --> 00:03:41.059
And that fixes that type okay you're
still gonna get a bunch of errors up here

47
00:03:41.059 --> 00:03:45.591
because it's like error boundary is not
typed yes I know that you don't have to

48
00:03:45.591 --> 00:03:50.465
yell at me about that I know that it's not
typed, but we'll get there this is exactly

49
00:03:50.465 --> 00:03:54.545
what a TypeScript migration is like
is like why is that an error right?

50
00:03:54.545 --> 00:03:59.131
You just keep asking yourself over and
over again and you just figure it out kind

51
00:03:59.131 --> 00:04:02.971
of on the fly it's just like dance
with the TypeScript compiler.

52
00:04:07.422 --> 00:04:11.429
Having done this a few times,
it's very much that.

53
00:04:11.429 --> 00:04:16.304
The more you do this though,
the less you fight with the compiler.

54
00:04:16.304 --> 00:04:21.339
But I will say going from
like 10% of your code base in

55
00:04:21.339 --> 00:04:26.605
TypeScript to like 60% of
it in TypeScript is misery.

56
00:04:26.605 --> 00:04:29.791
Because you're getting lots of type
errors and you don't know why and

57
00:04:29.791 --> 00:04:33.421
you're not sure is it actually an error or
is it just TypeScript being finicky?

58
00:04:33.421 --> 00:04:35.862
But once you're like 80% TypeScript,

59
00:04:35.862 --> 00:04:40.624
especially when you're at 100% TypeScript,
it's just incredibly useful.

60
00:04:40.624 --> 00:04:44.702
But I'm just gonna tell you
getting their sucks like a lot.

61
00:04:44.702 --> 00:04:47.916
[LAUGH] You're gonna ask yourself what am

62
00:04:47.916 --> 00:04:52.365
I doing with my life that
brought me to this point right?

63
00:04:52.365 --> 00:04:56.820
[LAUGH] Like I, I just I should go back to
being a barista that was so much easier.

64
00:04:56.820 --> 00:05:00.713
That was so
much better TypeScript broke me anyway.

65
00:05:00.713 --> 00:05:07.128
Let's go fix AdoptedPetContext.js so

66
00:05:07.128 --> 00:05:12.793
make this a.ts Instead of a sub js.

67
00:05:12.793 --> 00:05:18.243
We're gonna import pet from

68
00:05:18.243 --> 00:05:24.152
dot slash API response types.

69
00:05:24.152 --> 00:05:28.864
This we're gonna have to be a lot
more specific with create context.

70
00:05:28.864 --> 00:05:31.344
So let's just go ahead and

71
00:05:31.344 --> 00:05:36.867
do that we're gonna tell it that
it has either a Pet type and

72
00:05:36.867 --> 00:05:42.875
then it's gonna be an adoptedPet
function that returns a Pet,

73
00:05:45.252 --> 00:05:51.365
Sorry, an adoptedPet which takes in
as a parameter and returns void.

74
00:05:53.601 --> 00:05:58.556
Okay, and then you have to like
it just gets mad you have to

75
00:05:58.556 --> 00:06:02.893
give it a default value or
else it's going to be mad

76
00:06:02.893 --> 00:06:07.769
because by default this is
gonna be created without it.

77
00:06:07.769 --> 00:06:09.363
So let's just go ahead and

78
00:06:09.363 --> 00:06:13.209
do that we're going to give it
a basically a fake looking hook.

79
00:06:15.865 --> 00:06:18.646
So we have to give it a pet and
has to satisfy the pet type.

80
00:06:18.646 --> 00:06:23.617
So just make like make up
a pet right here with me name:

81
00:06:23.617 --> 00:06:29.258
''Fido''; animal I mean,
it's pretty cool, right?

82
00:06:29.258 --> 00:06:33.339
It's auto completing this for us, right?

83
00:06:33.339 --> 00:06:35.507
Then, which I think that's pretty cool.

84
00:06:35.507 --> 00:06:39.334
This is the stuff that I love about
TypeScript is it just knows that an animal

85
00:06:39.334 --> 00:06:40.752
it has to be an animal type.

86
00:06:40.752 --> 00:06:47.205
And so therefore, my VS code is
auto completing stuff for me.

87
00:06:47.205 --> 00:06:51.870
Okay, I'm going to say that
I need a description it

88
00:06:51.870 --> 00:06:54.807
autocompletes that lorem ipsum

89
00:06:58.876 --> 00:07:04.276
Breed: "Beagle",
images: you can just give it an empty

90
00:07:04.276 --> 00:07:09.371
array, City: Put whatever you want here.

91
00:07:09.371 --> 00:07:14.577
I'll just put Seattle State: ''WA'' and

92
00:07:14.577 --> 00:07:19.382
then give it here just
an empty function and

93
00:07:19.382 --> 00:07:24.333
that will satisfy the AdoptedPetContext.

94
00:07:24.333 --> 00:07:27.124
So you might ask like
what is this actually for

95
00:07:27.124 --> 00:07:31.824
like why do I give it this like default
value if you create the context without

96
00:07:31.824 --> 00:07:36.027
a context provider above it this is
what's going to be stored in it.

97
00:07:36.027 --> 00:07:41.204
Which you should never do right you would
never do that where this actually can

98
00:07:41.204 --> 00:07:46.156
be useful is you can actually no write
tests for this AdoptedPetContext.

99
00:07:46.156 --> 00:07:48.998
And you don't have to wrap
it in some provider, right?

100
00:07:48.998 --> 00:07:53.396
That would be the very limited use case
where it's actually useful that we do

101
00:07:53.396 --> 00:07:55.949
provide it here some
sort of default value.

102
00:07:58.066 --> 00:08:02.484
The other thing you could have done
here is you could have just said or

103
00:08:02.484 --> 00:08:06.525
null, cuz you can store like null
here maybe if you wanted to.

104
00:08:06.525 --> 00:08:10.098
And then here what we could
have done is instead of this,

105
00:08:10.098 --> 00:08:14.751
we could have just given it null and
that would've satisfied it as well.

106
00:08:14.751 --> 00:08:16.760
It's totally up to you how
you choose to handle that.

107
00:08:19.390 --> 00:08:23.269
I like taking that null out of here
because now this really can't be null and

108
00:08:23.269 --> 00:08:26.363
then I don't have to check
everywhere if it's null or not.

109
00:08:26.363 --> 00:08:32.390
So, I'm gonna leave that up to you
how you choose to do that okay.

110
00:08:35.740 --> 00:08:39.549
Okay so this is where the TypeScript
dash one milestone was

111
00:08:39.549 --> 00:08:41.735
it wasn't the last one now it is.

112
00:08:41.735 --> 00:08:45.287
So if you're wanna catch up
here you can just copy and

113
00:08:45.287 --> 00:08:50.640
paste TypeScript dash one or not copy and
paste, but just take the whole folder

