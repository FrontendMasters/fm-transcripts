WEBVTT

1
00:00:00.000 --> 00:00:03.911
So we're gonna go into source here,

2
00:00:03.911 --> 00:00:08.463
create a directory called __test__.

3
00:00:08.463 --> 00:00:12.021
What's the deal with the double
underscore, aka, the dunder?

4
00:00:12.021 --> 00:00:15.373
I did not make that up,
it's what it's called.

5
00:00:15.373 --> 00:00:17.663
It's a Python thing.

6
00:00:17.663 --> 00:00:21.438
It's a Python thing that means
the name of this folder is special.

7
00:00:21.438 --> 00:00:23.014
It's magical.

8
00:00:23.014 --> 00:00:28.333
It's magical because anything inside
of there is assumed to be a test.

9
00:00:28.333 --> 00:00:33.303
In other words, if you create that folder,
the test will assume any file that

10
00:00:33.303 --> 00:00:37.666
you put in there is a test and
it will run it as part of your test suite.

11
00:00:37.666 --> 00:00:41.761
So I can call anything in here blah.js and

12
00:00:41.761 --> 00:00:46.444
vitest is gonna assume
that blah.js is a test.

13
00:00:49.295 --> 00:00:50.161
You don't have to do it this way.

14
00:00:50.161 --> 00:00:55.925
The other thing that you can do,
outside of this directory,

15
00:00:55.925 --> 00:01:00.568
I can create a file called Pet.test.js or
jsx.

16
00:01:00.568 --> 00:01:07.912
If I put .test or .spec in here, both of
those will also be assumed to be a test.

17
00:01:07.912 --> 00:01:09.600
So either one of those is fine.

18
00:01:09.600 --> 00:01:10.350
What do I do?

19
00:01:10.350 --> 00:01:13.169
I do both, cuz I don't know why,
but I just always have.

20
00:01:13.169 --> 00:01:16.198
Pet.test.js, which is
in the test directory.

21
00:01:19.013 --> 00:01:19.882
I can tell you why I do it.

22
00:01:19.882 --> 00:01:23.089
I like moving the test out
of the main directory, so

23
00:01:23.089 --> 00:01:26.084
I don't have this super
cluttered directory.

24
00:01:26.084 --> 00:01:29.756
And then I like putting test in there
because now if I search for files,

25
00:01:29.756 --> 00:01:32.879
I can just search for test and
I'll see all of my test files.

26
00:01:32.879 --> 00:01:34.198
That's my reason.

27
00:01:34.198 --> 00:01:38.413
Either one of those is fine, one of
those is fine, whatever you wanna do.

28
00:01:38.413 --> 00:01:42.080
You can also just go into
your V test configuration and

29
00:01:42.080 --> 00:01:45.514
say, these are my tests,
and that works as well.

30
00:01:47.728 --> 00:01:53.082
Okay, So Pet.test.js,

31
00:01:53.082 --> 00:01:59.449
we're going to import expect and
test from vitest.

32
00:02:03.343 --> 00:02:08.828
Import{ render} from
@testing-library/react.

33
00:02:10.710 --> 00:02:16.563
And import Pet from ../Pet.

34
00:02:18.288 --> 00:02:21.948
I'm sorry,
this has to be Pet.test.jsx not js.

35
00:02:28.520 --> 00:02:36.058
Okay, test put a useful message
here of what it's actually testing,

36
00:02:36.058 --> 00:02:40.286
displays a default thumbnail, cool.

37
00:02:42.316 --> 00:02:44.594
And this takes in an async function.

38
00:02:44.594 --> 00:02:48.080
I always make these async,
because they can be and

39
00:02:48.080 --> 00:02:50.413
I can do await in here if I want to.

40
00:02:50.413 --> 00:02:52.156
I don't even know if I'm
awaiting anything in here.

41
00:02:52.156 --> 00:02:57.433
I am, but
I always make these async just by default.

42
00:02:57.433 --> 00:03:01.453
I'm gonna say const pet =

43
00:03:01.453 --> 00:03:06.762
render(&lt; pet /&gt;) like that.

44
00:03:06.762 --> 00:03:10.778
And then I'm gonna say const

45
00:03:10.778 --> 00:03:15.630
petThumbnail should be equal to =

46
00:03:15.630 --> 00:03:22.839
await pet.findByTestId)('thumbnail'),

47
00:03:26.141 --> 00:03:32.672
expect (petThumbnail.src)

48
00:03:32.672 --> 00:03:39.448
toContain ('none.jpg').

49
00:03:42.057 --> 00:03:46.179
And then with vitest, one of these
things that it does, as opposed to JS,

50
00:03:46.179 --> 00:03:50.831
which we did not have to do before, vitest
is actually gonna take your test suite and

51
00:03:50.831 --> 00:03:53.245
run it in parallel so
it can go even faster.

52
00:03:53.245 --> 00:03:56.587
So make sure you're just at
the end of calling unmount.

53
00:03:56.587 --> 00:04:00.334
So you need to clean up
after yourself as well, so.

54
00:04:00.334 --> 00:04:04.488
This is not working yet,
that's intentional just so you know.

55
00:04:04.488 --> 00:04:08.367
But this is kind of the methodology
that I'm thinking here,

56
00:04:08.367 --> 00:04:10.511
I'm gonna go render something.

57
00:04:10.511 --> 00:04:16.026
I'm gonna go find the thumbnail, and I'll
talk about this TestId in just a second.

58
00:04:16.026 --> 00:04:19.251
And then I'm gonna make sure that
the source contains none if I don't give

59
00:04:19.251 --> 00:04:19.884
it anything.

60
00:04:19.884 --> 00:04:25.022
You can imagine that I get a ticket report
from users, like, hey, you have broken

61
00:04:25.022 --> 00:04:30.112
images on your homepage for pets that
don't have images, what's up with that?

62
00:04:30.112 --> 00:04:32.868
I can go write this test, and
then I can go fix it, and

63
00:04:32.868 --> 00:04:36.942
now I have a guarantee that I know I have
fixed it, and I can just leave this to my

64
00:04:36.942 --> 00:04:40.563
testing suite to make sure that
it doesn't regress again, right?

65
00:04:40.563 --> 00:04:41.872
That's the idea here.

66
00:04:43.652 --> 00:04:47.957
Let's go test or
talk about this findByTestId.

67
00:04:47.957 --> 00:04:54.753
So open your Pet.jsx, Not tsx, jsx.

68
00:04:54.753 --> 00:04:59.427
Pet.jsx here.

69
00:04:59.427 --> 00:05:03.366
Here on the thumbnail here,

70
00:05:07.005 --> 00:05:09.695
I want to give this a test ID, so

71
00:05:09.695 --> 00:05:15.652
I'm going to give it a,
Was is it, data test ID?

72
00:05:15.652 --> 00:05:22.277
Yes, data-testid = "thumbnail".

73
00:05:25.183 --> 00:05:28.782
Now, why am I looking for
this rather than using a CSS selector or

74
00:05:28.782 --> 00:05:30.058
something like that?

75
00:05:30.058 --> 00:05:34.987
What's nice about using specifically
the test ID, one, it expresses this is

76
00:05:34.987 --> 00:05:39.780
being tested, right, to a future
person that's reading Pet.tsx or jsx.

77
00:05:39.780 --> 00:05:43.841
It's also saying that later,
if I change how this UI works,

78
00:05:43.841 --> 00:05:47.120
I can just move what this is attached to,
right?

79
00:05:47.120 --> 00:05:50.555
Let's say it moved over here, I would
just move it over there, and all sudden,

80
00:05:50.555 --> 00:05:52.526
it's testing this instead of testing that.

81
00:05:54.268 --> 00:06:00.636
It makes your test work independently
of HTML and CSS structure.

82
00:06:00.636 --> 00:06:04.436
That's good, it's good to
decouple those where possible.

83
00:06:04.436 --> 00:06:06.851
Doing data-testid allows you to do that.

84
00:06:09.409 --> 00:06:17.540
Cool, we are still, We're getting closer,
but we're not quite there.

85
00:06:17.540 --> 00:06:19.861
Let's try running npm test and
see what happens.

86
00:06:19.861 --> 00:06:21.737
I think it's gonna,
we're still gonna fail.

87
00:06:21.737 --> 00:06:22.960
Why is it gonna fail?

88
00:06:26.308 --> 00:06:30.210
So this already caught a bug for us.

89
00:06:31.619 --> 00:06:34.132
It cannot read properties
of undefined length.

90
00:06:34.132 --> 00:06:38.211
If I don't give it any images, then
the images.length there is gonna fail,

91
00:06:38.211 --> 00:06:41.187
because you're trying to
call .length on undefined.

92
00:06:41.187 --> 00:06:44.357
Cool, I already caught a bug,
let's go fix it.

93
00:06:44.357 --> 00:06:47.745
So go back toPpet.jsx, and

94
00:06:47.745 --> 00:06:52.123
instead of saying images.length,

95
00:06:52.123 --> 00:06:57.781
we're gonna say images &amp;&amp; images.length.

96
00:06:57.781 --> 00:07:02.551
Cool, it already caught a bug,
fixed that, run it again, and

97
00:07:02.551 --> 00:07:07.417
now it's gonna say, hey,
I'm trying to run without a router.

98
00:07:09.631 --> 00:07:12.705
I don't know how to do that, why?

99
00:07:12.705 --> 00:07:16.376
Link, this,
which comes from react-router-dom,

100
00:07:16.376 --> 00:07:18.783
depends on a router being above it.

101
00:07:18.783 --> 00:07:21.040
We're trying to render
it without a router.

102
00:07:21.040 --> 00:07:25.828
So in this particular case, what you're
gonna need to do is you need to come

103
00:07:25.828 --> 00:07:29.865
back to your test and you have to
wrap this with a static router.

104
00:07:39.168 --> 00:07:43.878
Okay, and then we're gonna have to

105
00:07:43.878 --> 00:07:48.747
import {staticRouter} from, and

106
00:07:48.747 --> 00:07:53.626
I think it's react-router-dom.

107
00:07:56.726 --> 00:08:01.390
Does that work or do I have to get
it from react-router-dom/server?

108
00:08:01.390 --> 00:08:03.060
I think you do.

109
00:08:03.060 --> 00:08:05.746
Yeah, okay, react-router-dom/server.

110
00:08:05.746 --> 00:08:09.780
This is just a browser router
that can work in node, right?

111
00:08:09.780 --> 00:08:13.793
Cuz we're not spinning up a browser, so
we need it to work in a node environment.

112
00:08:13.793 --> 00:08:19.974
Okay, now I think our test is passing.

113
00:08:19.974 --> 00:08:23.325
We wrote our first passing test,
congratulations.

114
00:08:23.325 --> 00:08:27.633
We can now be fairly
assured that our none.jpg

115
00:08:27.633 --> 00:08:32.502
will show up if we don't give it an image,
awesome.

116
00:08:35.848 --> 00:08:39.879
So let's make sure that it
works with a non-default.

117
00:08:39.879 --> 00:08:44.484
So I'm gonna say test(" displays

118
00:08:44.484 --> 00:08:48.788
a non-default thumbnail").

119
00:08:48.788 --> 00:08:54.124
Just another note for whatever string
you put in here, put the bare minimum

120
00:08:54.124 --> 00:08:59.386
amount of text necessary to know what
test failed if this is read, right?

121
00:09:01.241 --> 00:09:02.481
Don't make it super verbose.

122
00:09:02.481 --> 00:09:03.552
Don't give me a novel about it.

123
00:09:03.552 --> 00:09:06.166
I don't want to read a novel,
I just wanna know what test broke.

124
00:09:08.382 --> 00:09:12.634
This is me shadow complaining
about former coworkers.

125
00:09:14.567 --> 00:09:19.977
I had this one coworker,
bless their heart, would write novels.

126
00:09:19.977 --> 00:09:22.793
I feel like I'd had to write
a book report afterwards.

127
00:09:22.793 --> 00:09:27.476
All right, pet = render,

128
00:09:28.990 --> 00:09:31.182
Same thing, staticRouter.

129
00:09:31.182 --> 00:09:33.523
We actually probably could
have just copied this.

130
00:09:34.920 --> 00:09:37.054
So let's do that.

131
00:09:37.054 --> 00:09:39.954
Same thing here, except we're
gonna give it images this time.

132
00:09:42.447 --> 00:09:44.545
So 1.jpg,

133
00:09:47.599 --> 00:09:53.898
2.jpg, and 3.jpg.

134
00:09:53.898 --> 00:09:57.381
Okay, so now we have a pet,

135
00:09:57.381 --> 00:10:04.353
const petThumbnail = await
pet.findByTestId, and

136
00:10:04.353 --> 00:10:09.365
we're looking for a thumbnail again.

137
00:10:12.645 --> 00:10:13.686
Expect,

138
00:10:16.719 --> 00:10:26.719
(PetThumbnail.src).toContain("1.jpg").

139
00:10:28.580 --> 00:10:30.071
pet.unmount.

140
00:10:31.819 --> 00:10:33.609
Yeah, this needs to be async as well.

141
00:10:33.609 --> 00:10:35.947
Async, thank you.

142
00:10:35.947 --> 00:10:37.939
And there you go, two test passed

