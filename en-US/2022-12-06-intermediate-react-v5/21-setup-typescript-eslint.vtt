WEBVTT

1
00:00:00.000 --> 00:00:07.423
We already have an ESLint config for
this project, it's here, eslintrc.json.

2
00:00:07.423 --> 00:00:08.609
And it's kinda long, right?

3
00:00:08.609 --> 00:00:14.525
This is almost 40 lines of configuration,
but it's a very bare bones set of ESLint.

4
00:00:14.525 --> 00:00:18.985
It's very much just like, make sure that
all the plugins work, make sure that I'm

5
00:00:18.985 --> 00:00:23.328
following some basic React rules, and
I'm not doing basic JavaScript errors.

6
00:00:23.328 --> 00:00:26.159
That's essentially what
this ESLint config does.

7
00:00:26.159 --> 00:00:29.472
There's a project called
ESLint TypeScript,

8
00:00:29.472 --> 00:00:33.446
which will actually use types for
your ESLint checking so

9
00:00:33.446 --> 00:00:37.692
you can actually get an additional
level of better linting.

10
00:00:37.692 --> 00:00:39.440
There used to be a project called TSLint.

11
00:00:39.440 --> 00:00:42.615
But TSLint just migrated all
that stuff to ESLint TypeScript.

12
00:00:42.615 --> 00:00:46.051
So now there's one stack,
which is ESLint and

13
00:00:46.051 --> 00:00:50.642
TypeScript together to check your project,
which is great.

14
00:00:50.642 --> 00:00:56.572
So I need you all to go install npm, i -D.

15
00:00:56.572 --> 00:01:02.819
And I would recommend that you just
copy this cuz it's kind of long.

16
00:01:02.819 --> 00:01:11.597
eslint-import-resolver-typescript, that's

17
00:01:11.597 --> 00:01:16.083
one of them, @3.5.1

18
00:01:16.083 --> 00:01:25.837
@typescript-eslint/eslint-plugin@5.40.1

19
00:01:25.837 --> 00:01:32.664
and @typescript-eslint/parser@,

20
00:01:32.664 --> 00:01:37.154
the same, 5.40.1.

21
00:01:37.154 --> 00:01:40.762
Okay, let those run for a second.

22
00:01:42.709 --> 00:01:47.839
Again, that is just in my notes, so
you can just copy and paste that directly.

23
00:01:47.839 --> 00:01:55.338
This is going to give ESLint the ability
to resolve TS files, that's good.

24
00:01:55.338 --> 00:01:59.823
It's going to give us the core project of
using TypeScript inside of your ESLint,

25
00:01:59.823 --> 00:02:00.668
that's good.

26
00:02:00.668 --> 00:02:05.007
And then the parser, we needed some
additional parsing logic because ESLint

27
00:02:05.007 --> 00:02:09.224
by itself cannot understand the colons and
the types and things like that.

28
00:02:09.224 --> 00:02:12.522
So we needed another parser,
which is what that parser is for.

29
00:02:14.897 --> 00:02:20.333
In your package.json here, the one
thing you need to change here is for

30
00:02:20.333 --> 00:02:22.700
your format and for your lint.

31
00:02:22.700 --> 00:02:27.502
Just make sure you add ts and
tsx here so that you're typing

32
00:02:27.502 --> 00:02:32.512
your TypeScript and your TSX files for
both format and lint.

33
00:02:32.512 --> 00:02:33.984
You want preview to do it too.

34
00:02:33.984 --> 00:02:39.115
Pretty already does TypeScript out
of the box, no changes necessary.

35
00:02:39.115 --> 00:02:44.112
Okay, and then come back here to your,
and now my tsconfig is happy,

36
00:02:44.112 --> 00:02:46.280
I don't know what happened.

37
00:02:46.280 --> 00:02:51.189
But suddenly, I think mercury was in
retrograde and now it's come around, and

38
00:02:51.189 --> 00:02:54.499
now my Aquarius is aligned with Saturn,
it's fine.

39
00:02:54.499 --> 00:02:57.041
So now, TypeScript is happy.

40
00:02:58.352 --> 00:03:00.200
That was a joke,
if anyone thinks that I'm serious.

41
00:03:00.200 --> 00:03:05.263
[LAUGH] Okay, maybe I'm not,

42
00:03:05.263 --> 00:03:08.508
eslintrc.json.

43
00:03:08.508 --> 00:03:13.285
Here, just add another extends here,

44
00:03:13.285 --> 00:03:20.540
we need
a plugin:@typescript-eslint/recommended.

45
00:03:23.773 --> 00:03:28.747
I don't know why I always do this, I sort
them based on length of the string, but

46
00:03:28.747 --> 00:03:32.683
I don't know why this like some
ASMR effect here that this makes

47
00:03:32.683 --> 00:03:35.522
me happy that it's
a nice little staircase.

48
00:03:35.522 --> 00:03:38.402
If I put it there, I hope all of you
would be upset, and it's like, no,

49
00:03:38.402 --> 00:03:39.222
Brian, change it.

50
00:03:39.222 --> 00:03:43.304
Okay, sorry,
I've been teaching towards this class,

51
00:03:43.304 --> 00:03:46.889
I'm starting to get delirious,
and it's fine.

52
00:03:46.889 --> 00:03:51.147
Okay, so
we're gonna add in here a rule under,

53
00:03:51.147 --> 00:03:54.989
this is just one that
I don't wanna go fix.

54
00:03:54.989 --> 00:03:59.491
We're gonna just gonna turn it off,
typeScript-eslint.

55
00:03:59.491 --> 00:04:02.758
I have some empty functions in here,
so we're just gonna turn that off,

56
00:04:02.758 --> 00:04:03.892
no-empty-function.

57
00:04:03.892 --> 00:04:07.566
Typically, I wouldn't turn that off,
but in this particular project,

58
00:04:07.566 --> 00:04:09.416
we don't need it, so that's fine.

59
00:04:09.416 --> 00:04:13.294
Okay, here in plugins,

60
00:04:13.294 --> 00:04:21.799
we're gonna add @typescript-eslint,
like that.

61
00:04:21.799 --> 00:04:22.944
That's good.

62
00:04:24.935 --> 00:04:30.028
We're gonna replace the parser,
Do we have a parser?

63
00:04:30.028 --> 00:04:31.958
No, I don't think,
we just need to add one.

64
00:04:31.958 --> 00:04:37.018
Okay, parser, and we're gonna put inside

65
00:04:37.018 --> 00:04:41.950
of that @typescript-eslint/parser.

66
00:04:44.814 --> 00:04:48.847
Again, this is gonna allow our ESLint
to actually be able to read TypeScript,

67
00:04:48.847 --> 00:04:49.649
which is good.

68
00:04:49.649 --> 00:04:54.582
parserOptions, we need to
add a project in here,

69
00:04:54.582 --> 00:05:00.460
you have to point ESLint TypeScript
to your TS config file.

70
00:05:00.460 --> 00:05:07.734
So you can just say, ./ts.config.json.

71
00:05:07.734 --> 00:05:12.453
Otherwise, it doesn't know how
to render TypeScript correctly.

72
00:05:12.453 --> 00:05:15.857
You'd wish that we just look for
tsconfig automatically,

73
00:05:15.857 --> 00:05:18.453
it's always called that, but not the case.

74
00:05:20.495 --> 00:05:26.016
Settings, okay, we have react,
detect, that's good.

75
00:05:26.016 --> 00:05:33.194
The import/parsers, so import/, parsers.

76
00:05:37.782 --> 00:05:42.659
This is gonna be @typescript
if you tell which files to

77
00:05:42.659 --> 00:05:46.169
use the eslint-parser for, I guess.

78
00:05:48.401 --> 00:05:50.643
This was a lot of guessing and
checking if we're being super honest.

79
00:05:50.643 --> 00:05:54.401
This took me a while to figure out
how to get this exactly to work.

80
00:05:54.401 --> 00:05:58.566
.ts, Yeah, and

81
00:05:58.566 --> 00:06:03.950
you have to use double quotes,
".ts" and ".tsx".

82
00:06:06.715 --> 00:06:10.950
And then import/resolver,
you wanna get rid of the node stuff.

83
00:06:12.785 --> 00:06:18.929
So delete that, and
you're gonna put "typescript",

84
00:06:18.929 --> 00:06:24.693
and you're gonna do
"alwaysTryTypes" to be true.

85
00:06:28.420 --> 00:06:33.259
Okay, This was a lot to get, and

86
00:06:33.259 --> 00:06:36.338
it's like the level of
nesting is important here.

87
00:06:36.338 --> 00:06:41.037
So, I'm not going to fault you if
you just pop over to the project and

88
00:06:41.037 --> 00:06:43.689
grab the completed eslintrc.json.

89
00:06:43.689 --> 00:06:47.777
Not really a ton to learn here,
setting up ESLint is, again,

90
00:06:47.777 --> 00:06:50.859
worrying if Mercury's in retrograde or
not.

91
00:06:52.534 --> 00:06:54.762
Okay, so now we have this.

92
00:06:54.762 --> 00:06:59.691
I think, hopefully,
we should be able to run npm run lint.

93
00:07:03.549 --> 00:07:06.943
And cool, we are not getting
anything out of the MIT,

94
00:07:06.943 --> 00:07:10.274
which is I think what we are expecting,
which is good

95
00:07:14.830 --> 00:07:19.284
Yeah, so actually,
in my notes here at the bottom,

96
00:07:19.284 --> 00:07:24.369
I have it completed just to show
you down here at the bottom.

97
00:07:24.369 --> 00:07:30.482
If you just wanna copy and paste this,
you will get no fault from me.

98
00:07:30.482 --> 00:07:31.567
This is the entire thing.

99
00:07:33.921 --> 00:07:36.691
We are gonna add one more here.

100
00:07:36.691 --> 00:07:40.100
I'll tell you right now,
what I have up here, perfectly acceptable.

101
00:07:40.100 --> 00:07:42.547
If you wanna run with this, this is great.

102
00:07:42.547 --> 00:07:46.552
You can get a little bit more aggressive
with your linting if you want to, and

103
00:07:46.552 --> 00:07:49.505
we're going to since this was
not that much lift for us.

104
00:07:49.505 --> 00:07:53.039
But if you're on a big project,
this could be a big lift for you.

105
00:07:53.039 --> 00:08:00.631
typescript-eslint/recommended-requiring-t-

106
00:08:00.631 --> 00:08:03.991
ype-checking.

107
00:08:03.991 --> 00:08:08.067
This is basically gonna say,
everything has to be type checked,

108
00:08:08.067 --> 00:08:12.142
we are not going to allow you to
do anything that isn't run through

109
00:08:12.142 --> 00:08:15.347
the TypeScript parser or
the TypeScript project.

110
00:08:15.347 --> 00:08:20.027
So again,
this is gonna be a bit more aggressive.

111
00:08:20.027 --> 00:08:24.548
My suggest is maybe start or
add this one maybe at the end once you've

112
00:08:24.548 --> 00:08:29.072
finished your TypeScript migration,
and then it's gonna enforce

113
00:08:29.072 --> 00:08:32.979
that people continue to keep
your TypeScripts up to date.

114
00:08:32.979 --> 00:08:37.016
All right, so let's see how that does now.

115
00:08:37.016 --> 00:08:40.699
You can see here, it adds a ton of errors
because now it's enforcing all of our

116
00:08:40.699 --> 00:08:44.455
JavaScript to say, hey, this is untyped,
you have a lot of any types in here.

117
00:08:44.455 --> 00:08:49.901
So this gets pretty
aggressive pretty quickly.

