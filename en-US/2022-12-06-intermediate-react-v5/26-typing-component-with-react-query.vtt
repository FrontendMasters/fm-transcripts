WEBVTT

1
00:00:00.526 --> 00:00:02.299
Let's do breed list.

2
00:00:04.464 --> 00:00:06.622
Data.ts file as well.

3
00:00:09.879 --> 00:00:14.607
Before we do that,
pop over to your API response types.

4
00:00:14.607 --> 00:00:21.133
We need one more type of response,
export interface.

5
00:00:21.133 --> 00:00:25.294
We're gonna call this

6
00:00:25.294 --> 00:00:30.333
a BreedListAPIResponse.

7
00:00:30.333 --> 00:00:35.313
And it takes an animal or gives you back
an animal, which is of type animal, and

8
00:00:35.313 --> 00:00:38.186
breeds which is going to
be a list of strings.

9
00:00:40.783 --> 00:00:45.861
Okay, pretty straightforward
type right there.

10
00:00:45.861 --> 00:00:51.310
And then here in fetch breeds.ts,
same thing here,

11
00:00:51.310 --> 00:00:56.045
I'm gonna make this
an async arrow function.

12
00:00:56.045 --> 00:00:57.187
So const,

13
00:01:09.993 --> 00:01:13.233
Okay, this is now an arrow function.

14
00:01:13.233 --> 00:01:18.890
Still mad about the props,
but let's go fix that.

15
00:01:18.890 --> 00:01:26.068
This is going to be a query
function from tansack query.

16
00:01:26.068 --> 00:01:30.109
This is going to have

17
00:01:30.109 --> 00:01:34.871
a breed list response.

18
00:01:34.871 --> 00:01:39.610
And the key for that, is I think gonna be

19
00:01:39.610 --> 00:01:45.745
Breeds, And an animal.

20
00:01:55.430 --> 00:01:57.556
And that is enough to
successfully type that.

21
00:02:00.492 --> 00:02:04.709
Cuz now it knows, And actually,

22
00:02:04.709 --> 00:02:07.638
I think now you don't even
have to do this part anymore.

23
00:02:07.638 --> 00:02:11.415
Cuz right now we're demanding that it
always gives you an animal, right?

24
00:02:11.415 --> 00:02:16.729
So there's no reason that we need to do
any sort of like type refinement there.

25
00:02:16.729 --> 00:02:17.679
You can leave it there.

26
00:02:17.679 --> 00:02:22.419
There's no harm in it being there, but
TypeScript would catch that first, right,

27
00:02:22.419 --> 00:02:24.303
before your runtime code would.

28
00:02:27.957 --> 00:02:29.283
I hadn't noticed that till now, but.

29
00:02:31.778 --> 00:02:34.640
I guess that's one of the cool
things about TypeScript as well,

30
00:02:34.640 --> 00:02:37.714
is like, I moused over this it's
like this is definitely an animal,

31
00:02:37.714 --> 00:02:40.685
which means that Line 10 here,
this will never happen, right?

32
00:02:42.998 --> 00:02:44.250
Kinda cool.

33
00:02:47.560 --> 00:02:54.193
Okay, we are now to TypeScript-3,
if you need to catch up.

34
00:02:59.878 --> 00:03:03.214
So let's go do use breed list.

35
00:03:03.214 --> 00:03:10.289
Change that to use breedlist.ts,
this is a custom hook.

36
00:03:10.289 --> 00:03:13.802
A little bit of stuff to type here.

37
00:03:13.802 --> 00:03:17.953
So use breedlist,
export default function useBreedList.

38
00:03:17.953 --> 00:03:20.024
Animal here is gonna be an animal.

39
00:03:21.940 --> 00:03:23.522
You can put that in there.

40
00:03:26.420 --> 00:03:31.192
Use query here with
breeds animal fetch list.

41
00:03:33.611 --> 00:03:34.449
That's all fine.

42
00:03:34.449 --> 00:03:35.927
That looks like it works just great.

43
00:03:41.830 --> 00:03:45.945
Okay, and then here we just
need to definitively type,

44
00:03:45.945 --> 00:03:48.053
this is what I need to show you.

45
00:03:48.053 --> 00:03:54.128
Right now if you mouse over this,
you can see that,

46
00:03:54.128 --> 00:04:00.345
it thinks that this array
that we're returning is,

47
00:04:00.345 --> 00:04:05.855
everything in here can
either be a breed list,

48
00:04:05.855 --> 00:04:09.413
or it can be a status, right?

49
00:04:09.413 --> 00:04:14.321
When in reality we actually have a very
specific kind of tuple type here, and

50
00:04:14.321 --> 00:04:17.310
we need to identify two types,
which is like,

51
00:04:17.310 --> 00:04:22.232
no, literally always the 0 with element
in this is going to be a breed list.

52
00:04:22.232 --> 00:04:24.721
The second element is
always gonna be a status.

53
00:04:24.721 --> 00:04:27.333
We cannot switch that,
we cannot have more things than that.

54
00:04:27.333 --> 00:04:29.352
It's always exactly this.

55
00:04:29.352 --> 00:04:30.468
That makes sense?

56
00:04:30.468 --> 00:04:33.559
Otherwise it thinks it's just
a mix of this and it can be either

57
00:04:33.559 --> 00:04:37.073
one all the time, which is a valid
assumption for TypeScript to make.

58
00:04:37.073 --> 00:04:40.435
So you can just say, as here, to identify.

59
00:04:40.435 --> 00:04:47.107
We actually want to identify
this as string bra string array.

60
00:04:47.107 --> 00:04:49.106
And what do we have here?

61
00:04:49.106 --> 00:04:50.501
Query status.

62
00:04:55.696 --> 00:04:58.470
And now you can see here
we've refined that,

63
00:04:58.470 --> 00:05:02.341
that it always returns this
particular shape of a return type.

64
00:05:05.755 --> 00:05:06.696
That makes sense?

65
00:05:06.696 --> 00:05:10.751
Otherwise, anytime that you use this
result here, you have to check,

66
00:05:10.751 --> 00:05:12.922
is this a string list or is it a status?

67
00:05:12.922 --> 00:05:15.414
The same thing here for the query status.

68
00:05:15.414 --> 00:05:19.301
But by doing it this way we've said, this
is definitely, this is definitely this,

69
00:05:19.301 --> 00:05:21.124
always assume it's gonna be this way.

