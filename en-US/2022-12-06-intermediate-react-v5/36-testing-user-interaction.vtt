WEBVTT

1
00:00:00.000 --> 00:00:02.332
Next section here is gonna be
testing some UI interactions.

2
00:00:02.332 --> 00:00:06.184
So far, we're basically testing,
if I give it the correct properties,

3
00:00:06.184 --> 00:00:08.496
do I get the correct thing out of it,
right?

4
00:00:08.496 --> 00:00:13.046
If I give it the correct images,
will the user be display the right images?

5
00:00:13.046 --> 00:00:16.474
Very valid test, let's go with Carousel.

6
00:00:16.474 --> 00:00:21.924
If you remember in Carousel,
I say, npm run rev here.

7
00:00:23.471 --> 00:00:27.902
Going back over here to my Adopt Me!

8
00:00:27.902 --> 00:00:28.777
I click on Luna.

9
00:00:28.777 --> 00:00:32.940
If I click on this one,
I expect this image to change, right?

10
00:00:32.940 --> 00:00:36.819
If I click on this one, I expect
this image to change to that, right?

11
00:00:36.819 --> 00:00:40.869
Let's say that we had a regression that
a user, every time they click on just

12
00:00:40.869 --> 00:00:44.436
the second photo, for whatever reason,
that one doesn't work.

13
00:00:44.436 --> 00:00:47.521
Let's write a test to make sure that we
can click on everything and it works.

14
00:00:50.261 --> 00:00:55.351
So please make another file
in your test directory,

15
00:00:55.351 --> 00:00:58.480
call it Carousel.test.jsx.

16
00:01:01.887 --> 00:01:07.333
Import, let's make this
fullscreen Expect and

17
00:01:07.333 --> 00:01:12.993
test, one key difference
here from Jasmine and Jest,

18
00:01:12.993 --> 00:01:18.668
expect and
tests are not available globally, right?

19
00:01:18.668 --> 00:01:21.868
So you do have to import them from Vitest.

20
00:01:21.868 --> 00:01:28.129
I'm gonna argue that that is better
because now these have types.

21
00:01:28.129 --> 00:01:30.666
And even though I'm not
writing these in TypeScript,

22
00:01:30.666 --> 00:01:32.772
I still get all the type
information from it.

23
00:01:32.772 --> 00:01:37.105
I like it better, plus it's just
better to be explicit about imports,

24
00:01:37.105 --> 00:01:38.560
I don't like globals.

25
00:01:38.560 --> 00:01:44.282
I think you can set it up so that Vitest
will make them globally available,

26
00:01:44.282 --> 00:01:49.751
but just please don't,
unless you're migrating from just Vitest.

27
00:01:49.751 --> 00:01:51.997
Yeah, don't do that.

28
00:01:51.997 --> 00:01:54.695
You shouldn't do it in Jest either,
to be honest with you.

29
00:01:54.695 --> 00:01:59.850
But that's behavior
that came from Jasmine.

30
00:01:59.850 --> 00:02:07.123
Import Carousel from '../Carousel',
here we go.

31
00:02:07.123 --> 00:02:12.270
Test["lets users click on

32
00:02:12.270 --> 00:02:18.919
thumbnails to make them the hero",

33
00:02:18.919 --> 00:02:23.856
async function that is).

34
00:02:26.180 --> 00:02:32.203
Okay, const images = ["0.jpg",

35
00:02:35.523 --> 00:02:41.219
"1.jpg", "2.jpg",

36
00:02:41.219 --> 00:02:44.511
"3.jpg"].

37
00:02:44.511 --> 00:02:50.728
However many of those that you want,
I'll leave that for const Carousel.

38
00:02:54.476 --> 00:02:56.350
Lowercase carousel = render.

39
00:02:56.350 --> 00:03:04.028
And we're gonna make a Carousel
with images = images.

40
00:03:04.028 --> 00:03:08.348
This one we do not have to
wrap in our static router,

41
00:03:08.348 --> 00:03:13.377
because there is no React Router
stuff inside of Carousel.

42
00:03:13.377 --> 00:03:14.845
So this is fine as is.

43
00:03:17.783 --> 00:03:25.789
Const hero = await carousel.findByTestId,

44
00:03:29.239 --> 00:03:34.569
('Hero'), and the first thing,
we're gonna put one

45
00:03:34.569 --> 00:03:41.771
expectation here of
(hero.src).toContain(images[0]), right?

46
00:03:41.771 --> 00:03:45.467
So whatever the first one is that we
put in here, we expect by default,

47
00:03:45.467 --> 00:03:48.863
that's should be the first thing
that we show the user, right?

48
00:03:48.863 --> 00:03:50.751
So that's one.

49
00:03:50.751 --> 00:03:52.458
Then I'm just gonna write a for

50
00:03:52.458 --> 00:03:55.420
loop here to just test each
one of them individually.

51
00:03:55.420 --> 00:03:59.026
So for (let i = 0,

52
00:03:59.026 --> 00:04:05.615
i &lt; images.length; and i++).

53
00:04:05.615 --> 00:04:11.386
Const image = images[i].

54
00:04:11.386 --> 00:04:20.140
Const thumb = await
carousel.findByTestId(thumbnail),

55
00:04:25.588 --> 00:04:30.788
(i), so I'm gonna go ahead and put TestIds
on all of these here in just a second.

56
00:04:30.788 --> 00:04:36.802
And then we'll set await thumb.click.

57
00:04:36.802 --> 00:04:40.040
So I'm goina have the browser
simulate clicking on that.

58
00:04:40.040 --> 00:04:42.489
You have to await it because
that's a user interaction.

59
00:04:42.489 --> 00:04:45.775
It's not instantaneous, okay?

60
00:04:45.775 --> 00:04:49.516
And then I'm gonna say,

61
00:04:49.516 --> 00:04:56.828
expect(hero.src).toContain(image).

62
00:04:56.828 --> 00:04:59.231
And then I'm gonna say, expect,

63
00:05:01.896 --> 00:05:10.263
(Array.from(thumb.classList).toContain("a-

64
00:05:10.263 --> 00:05:12.153
ctive").

65
00:05:16.388 --> 00:05:17.656
So what have I done here?

66
00:05:20.144 --> 00:05:22.303
What's happening is,where is this?

67
00:05:22.303 --> 00:05:23.876
Let me move that.

68
00:05:26.664 --> 00:05:29.799
It's going through, and it's gonna
start clicking on every one of these.

69
00:05:29.799 --> 00:05:33.161
So the very first one is gonna
click on this one, right?

70
00:05:33.161 --> 00:05:36.479
So that's a valid test to make sure
that if I click on the active one,

71
00:05:36.479 --> 00:05:37.832
nothing happens, right?

72
00:05:37.832 --> 00:05:40.884
Then it's gonna click on this one,
make sure that this changes.

73
00:05:40.884 --> 00:05:43.862
And it's also gonna make sure,
you see how this is grayed out, right?

74
00:05:43.862 --> 00:05:47.238
It has the active class on it,
if we inspect the image here.

75
00:05:47.238 --> 00:05:49.334
You can see here it has active.

76
00:05:49.334 --> 00:05:53.287
The other ones don't have active on it,
right?

77
00:05:53.287 --> 00:05:57.889
So it's checking to see,
does it also get the act of class as well?

78
00:05:57.889 --> 00:06:01.373
Now what I'm not doing here,
which I probably could write a test,

79
00:06:01.373 --> 00:06:05.604
I mean, just as valid, you could check to
make sure that all the other thumbnails

80
00:06:05.604 --> 00:06:07.867
do not have the active class on it, right?

81
00:06:07.867 --> 00:06:11.332
Cuz you can imagine some bug where I click
this one, then I click this one, but

82
00:06:11.332 --> 00:06:13.908
this one doesn't get the active
class removed, right?

83
00:06:13.908 --> 00:06:18.202
We're not going to do that, but feel free
to go and explore that if you want to.

84
00:06:18.202 --> 00:06:19.462
And then it's gonna do that.

85
00:06:19.462 --> 00:06:24.119
So we're gonna end up with
these four assertions.

86
00:06:24.119 --> 00:06:27.705
So this is two assertions for
that, plus this one, so

87
00:06:27.705 --> 00:06:31.465
we'll end up with nine
assertions in one test, right?

88
00:06:31.465 --> 00:06:34.764
It's pretty cool.

89
00:06:34.764 --> 00:06:39.249
Here I didn't do it cuz I don't think
we need to, cuz we don't have multiple

90
00:06:39.249 --> 00:06:44.174
tests running here, but you could say
carousel.unmount as well if you wanted to.

91
00:06:44.174 --> 00:06:50.077
Okay, so let's go and
put our TestIds in here.

92
00:06:50.077 --> 00:06:57.639
So we're gonna go to Carousel.jsx
to the hero image here,

93
00:06:57.639 --> 00:07:03.551
we're gonna add a data-testid="hero".

94
00:07:03.551 --> 00:07:07.613
And to each one of these images,

95
00:07:07.613 --> 00:07:14.845
we are going to add
data-testid=("thumbnail").

96
00:07:14.845 --> 00:07:15.903
And then we need to get that index.

97
00:07:15.903 --> 00:07:18.363
So we have the index, so thumbnail index.

98
00:07:24.824 --> 00:07:30.414
Okay, and now we should be able to run,
npm run test.

99
00:07:30.414 --> 00:07:32.891
More assertions, all working.

100
00:07:32.891 --> 00:07:35.130
Very happy about that.

101
00:07:35.130 --> 00:07:36.859
I don't know about you, but
every time I read a test,

102
00:07:36.859 --> 00:07:39.643
I was trying to make sure, it's like, what
happens if this breaks, does this fail?

103
00:07:39.643 --> 00:07:43.419
So what happens if I forget to
put the act of class on their?

104
00:07:43.419 --> 00:07:45.559
Test fails, right?

105
00:07:45.559 --> 00:07:48.264
Put the actual class back, test passes.

106
00:07:48.264 --> 00:07:50.412
I don't know, this is a pretty
compelling test to me, right?

107
00:07:50.412 --> 00:07:51.843
It's actually going and

108
00:07:51.843 --> 00:07:56.550
testing user expectations to make sure
that the user expectations are being met.

109
00:07:56.550 --> 00:07:58.353
A plus, high fives all round, right?

