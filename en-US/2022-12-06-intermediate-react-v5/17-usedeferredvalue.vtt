WEBVTT

1
00:00:00.000 --> 00:00:03.845
So we just did advanced
React performance for

2
00:00:03.845 --> 00:00:07.598
code splitting and server side rendering.

3
00:00:07.598 --> 00:00:11.873
We are about to do low priority rendering.

4
00:00:11.873 --> 00:00:16.293
So these are gonna take advantage of the
two new React hooks use deferred value and

5
00:00:16.293 --> 00:00:17.273
use transition.

6
00:00:19.766 --> 00:00:24.751
Make sure you start with a fresh copy
of adopt me which is gonna be this 14

7
00:00:24.751 --> 00:00:26.314
Dash context folder.

8
00:00:26.314 --> 00:00:30.853
And make sure you npm
install your dependencies,

9
00:00:30.853 --> 00:00:35.833
make sure you restart your dev server,
normal stuff.

10
00:00:37.778 --> 00:00:40.902
So, I was a little conflicted if
I was gonna show this to you or

11
00:00:40.902 --> 00:00:42.755
if I wasn't going to show it to you.

12
00:00:42.755 --> 00:00:46.764
But it felt disingenuous to show
you some of the other more advanced

13
00:00:46.764 --> 00:00:49.856
React performance features and
not show you this.

14
00:00:49.856 --> 00:00:54.386
So I'm gonna show you this on the pet
adoption app and it's gonna feel like

15
00:00:54.386 --> 00:00:59.153
it's gonna do nothing because it's
essentially going to do nothing for us.

16
00:00:59.153 --> 00:01:00.203
I'm gonna show you how it works.

17
00:01:00.203 --> 00:01:02.375
I'm gonna explain to you how it works.

18
00:01:02.375 --> 00:01:07.656
But it's gonna be solving a performance
problem that our app doesn't have.

19
00:01:07.656 --> 00:01:11.292
So I just want to be super clear
about that, nothing's gonna

20
00:01:11.292 --> 00:01:16.083
feel different after we're done doing
either one of these performance fixes.

21
00:01:16.083 --> 00:01:19.085
So this is just to super
underscore a point for

22
00:01:19.085 --> 00:01:23.983
all of you that React is designed and
made to solve Facebook's problems,

23
00:01:23.983 --> 00:01:29.051
which means a lot of these advanced
features are for Facebook's problems.

24
00:01:29.051 --> 00:01:33.753
So let me explain to you what use
deferred value is going to do and

25
00:01:33.753 --> 00:01:38.923
when it might be useful and
why we don't have that problem right now.

26
00:01:38.923 --> 00:01:43.305
So Facebook is designed around
having islands in all of its various

27
00:01:43.305 --> 00:01:45.817
different pieces of its UIs, right?

28
00:01:45.817 --> 00:01:49.126
It has a news feed, it has ads,
it has a posting box,

29
00:01:49.126 --> 00:01:51.925
it has a bunch of various
different things.

30
00:01:51.925 --> 00:01:56.655
Every microcosm of that newsfeed
has an entire team dedicated to it

31
00:01:56.655 --> 00:02:01.310
with multiple PMs, multiple designers,
multiple engineers.

32
00:02:01.310 --> 00:02:04.112
And they're all working in
concert with each other.

33
00:02:04.112 --> 00:02:08.767
Some of those things are really important
that they have to update immediately.

34
00:02:08.767 --> 00:02:12.604
If a user clicks on something,
you need to do that thing immediately or

35
00:02:12.604 --> 00:02:16.062
else the user perceives jank,
they perceive that it's slow.

36
00:02:16.062 --> 00:02:20.202
It feels slow to them,
even if it's probably not, right?

37
00:02:20.202 --> 00:02:22.385
That's problematic, users don't like that,

38
00:02:22.385 --> 00:02:25.430
users bounce when they feel like
something's slow or not working.

39
00:02:25.430 --> 00:02:30.983
So enter use deferred value,
specifically what use deferred value and

40
00:02:30.983 --> 00:02:35.066
use transition for
is low priority re-rendering.

41
00:02:35.066 --> 00:02:37.043
So if a user clicks on something,

42
00:02:37.043 --> 00:02:41.293
they don't care if you're loading
more stuff below the fold, right?

43
00:02:41.293 --> 00:02:43.025
They're never gonna perceive it.

44
00:02:43.025 --> 00:02:47.255
What Facebook wants to do is they want to
drop re-rendering things that are below

45
00:02:47.255 --> 00:02:48.634
the fold or out of the way.

46
00:02:48.634 --> 00:02:52.934
And then wanna focus on re-rendering
things that the user has clicked on,

47
00:02:52.934 --> 00:02:55.266
the things that the user is focusing on.

48
00:02:55.266 --> 00:03:03.244
So there's this notion of high priority
rendering and low priority rendering.

49
00:03:03.244 --> 00:03:06.338
Now if you're thinking about your
app that you're working on right now

50
00:03:08.145 --> 00:03:11.190
Some of you might be able to conceive of
like, okay, this is a high priority thing,

51
00:03:11.190 --> 00:03:12.287
this is a low priority thing.

52
00:03:12.287 --> 00:03:17.343
I imagine most of us, myself included,
it's all relatively the same, right?

53
00:03:17.343 --> 00:03:22.100
For the most part, I don't have so
much stuff loading and so

54
00:03:22.100 --> 00:03:26.953
much jank in my app and so
much danger of jank being introduced

55
00:03:26.953 --> 00:03:31.159
that I need to have this
tiered notion of rendering.

56
00:03:31.159 --> 00:03:34.010
But I'm gonna show you how to do it
because some of you definitely will run

57
00:03:34.010 --> 00:03:35.475
into them, and this is really cool.

58
00:03:35.475 --> 00:03:39.971
This is why they made these features
is for this idea of low and

59
00:03:39.971 --> 00:03:42.007
high priority rendering.

60
00:03:42.007 --> 00:03:46.574
So everything that I've shown you so
far is high priority rendering.

61
00:03:46.574 --> 00:03:51.121
I'm gonna show you how to identify
something as low priority re-rendering.

62
00:03:51.121 --> 00:03:53.856
So that basically Facebook can say,

63
00:03:53.856 --> 00:03:58.325
I can drop this on the floor if
something important happens, okay.

64
00:04:01.330 --> 00:04:05.319
So, yeah this is just a bunch basically
saying all the stuff that I just said.

65
00:04:05.319 --> 00:04:10.223
To Facebook, half a second of rendering
is millions of dollars, right,

66
00:04:10.223 --> 00:04:12.132
most of us don't have that.

67
00:04:12.132 --> 00:04:15.349
Bless you, if you do,
please send me a check, okay.

68
00:04:17.835 --> 00:04:20.411
For something like the Facebook feed,

69
00:04:20.411 --> 00:04:25.494
this actually is a huge issue cuz they
have so much stuff going on in that page.

70
00:04:25.494 --> 00:04:32.536
So what I want you to do is,
I want you to open your SearchParams.jsx.

71
00:04:32.536 --> 00:04:38.479
Okay, up here at the top we're going

72
00:04:38.479 --> 00:04:44.233
to import useContext, useState,

73
00:04:44.233 --> 00:04:50.079
useDeferredValue, useMemo.

74
00:04:52.611 --> 00:04:53.533
And that's it.

75
00:04:56.554 --> 00:05:05.035
So underneath the pets
declaration which is here,

76
00:05:05.035 --> 00:05:10.756
I'm gonna say const deferredPets

77
00:05:10.756 --> 00:05:15.688
= useDeferredValue pets and

78
00:05:15.688 --> 00:05:20.829
const renderedPets = useMemo

79
00:05:24.220 --> 00:05:30.310
And give it this function of Results

80
00:05:30.310 --> 00:05:35.183
pets=(deferredPets).

81
00:05:38.904 --> 00:05:42.684
And then only re-render when we
see brand new deferred pets.

82
00:05:45.559 --> 00:05:51.831
Okay, and then we're going to go
take this renderedPets down here

83
00:05:51.831 --> 00:05:57.319
where we have Results and
we're going to render this out as

84
00:05:59.367 --> 00:06:04.564
renderedPets, like that Okay,

85
00:06:04.564 --> 00:06:11.298
so now if we go look at our
search prams page at Here, okay,

86
00:06:11.298 --> 00:06:17.049
as you can see here, it looks exactly
the same, it feels exactly the same.

87
00:06:17.049 --> 00:06:21.677
Even if we put this on 3G or something
like that, it would feel exactly the same.

88
00:06:21.677 --> 00:06:24.342
So let's figure out exactly
what happened here.

89
00:06:27.509 --> 00:06:30.774
So we have deferredPets which is
taking this value in from pets.

90
00:06:30.774 --> 00:06:33.623
Pets is what's coming back from our API.

91
00:06:33.623 --> 00:06:38.184
What I'm asserting here is,
if I get new pets back from the API,

92
00:06:38.184 --> 00:06:41.743
it's okay to interrupt
re-rendering results.

93
00:06:41.743 --> 00:06:46.449
Imagine I'm rendering 1,000 results of
pets or something like that, right?

94
00:06:46.449 --> 00:06:50.700
That can take some time,
that can be milliseconds, centiseconds,

95
00:06:50.700 --> 00:06:54.162
decaseconds, something like that,
other way round.

96
00:06:54.162 --> 00:06:58.678
Yeah, it can be in the order of a second,
maybe two,

97
00:06:58.678 --> 00:07:01.872
especially on a low powered device.

98
00:07:01.872 --> 00:07:06.446
So what you're doing is you're taking this
and you're using this useDeferredValue,

99
00:07:06.446 --> 00:07:10.892
which is basically saying, okay, I'm only
gonna give you the real value of pets once

100
00:07:10.892 --> 00:07:14.075
I'm positive I got nothing left
in my render queue, right?

101
00:07:14.075 --> 00:07:17.898
And so if I hand it back this pets,
it's gonna give me back deferredPets,

102
00:07:17.898 --> 00:07:19.388
which is what it was before.

103
00:07:19.388 --> 00:07:22.797
Or it can be what it is now,
it's one of the two.

104
00:07:22.797 --> 00:07:24.683
As soon as I give it pets the first time,

105
00:07:24.683 --> 00:07:27.324
it's definitely gonna give
me back what it used to be.

106
00:07:27.324 --> 00:07:31.266
And then I'm gonna use memo here and
basically say, all right,

107
00:07:31.266 --> 00:07:34.560
give me a rendered result
of this with deferredPets.

108
00:07:34.560 --> 00:07:37.629
And only update this if
deferredPets changes.

109
00:07:37.629 --> 00:07:39.972
We've used used memo before, right?

110
00:07:39.972 --> 00:07:42.119
We used it previously in the class.

111
00:07:42.119 --> 00:07:45.233
What useMemo does basically says,

112
00:07:45.233 --> 00:07:49.911
only update this if this
value here changes, right?

113
00:07:49.911 --> 00:07:52.881
So with deferredValue,
we only get a new value for

114
00:07:52.881 --> 00:07:58.201
deferredValue once it's definitely cleared
out its queue of things to render, right?

115
00:07:58.201 --> 00:08:03.557
So basically we end up with this
renderedPets being the results, right?

116
00:08:03.557 --> 00:08:08.535
That only gets updated when we're
definitely sure that React's render

117
00:08:08.535 --> 00:08:11.485
queue is empty or low or whatever, right?

118
00:08:11.485 --> 00:08:16.238
But when it's not reacting to a high
priority re-render from user interaction.

119
00:08:18.459 --> 00:08:19.525
That makes sense?

120
00:08:22.514 --> 00:08:27.777
So only use this if you're seeing
problems of you have something

121
00:08:27.777 --> 00:08:32.267
that's expensive to render,
that could be delayed.

122
00:08:32.267 --> 00:08:34.844
And your users are perceiving
jank because they're trying to do

123
00:08:34.844 --> 00:08:37.815
something else instead of perceiving
whatever it is we rendering there.

124
00:08:39.400 --> 00:08:41.398
That is when you use useDeferredValue.

125
00:08:43.291 --> 00:08:45.216
Does that make sense?

126
00:08:45.216 --> 00:08:49.221
If that seems very specific,
that's because it's very specific.

127
00:08:49.221 --> 00:08:52.461
[LAUGH] Most of us don't
have this problem,

128
00:08:52.461 --> 00:08:57.506
most of us will never have this problem,
but that's how you do it.

