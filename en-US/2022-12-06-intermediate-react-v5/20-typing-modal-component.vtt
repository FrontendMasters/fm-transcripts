WEBVTT

1
00:00:00.298 --> 00:00:02.993
Okay, so we're gonna start on Moodle.JSX.

2
00:00:02.993 --> 00:00:08.169
So, the way that you want to do
a migration from a JSX to a TSX

3
00:00:08.169 --> 00:00:13.455
codebase is you just say everything
that is not in there does

4
00:00:13.455 --> 00:00:18.344
not have a TSX file,
is not strictly checked, right?

5
00:00:18.344 --> 00:00:21.291
So I'm gonna go here into MoodleJSX and

6
00:00:21.291 --> 00:00:25.232
I'm just gonna modify this
from JSX to TSX, right?

7
00:00:25.232 --> 00:00:28.911
And then all of a sudden I'm gonna start
getting a ton of errors here of like,

8
00:00:28.911 --> 00:00:30.648
hey, you need to fix this, right?

9
00:00:33.162 --> 00:00:34.058
Okay.

10
00:00:35.233 --> 00:00:37.859
So I'm just getting a bunch
of type TypeScript here.

11
00:00:37.859 --> 00:00:42.110
Like HTML development is not assignable
to type nu that these are all good

12
00:00:42.110 --> 00:00:43.024
errors for us.

13
00:00:43.024 --> 00:00:48.310
So, let's just start,
piece by piece going through this.

14
00:00:48.310 --> 00:00:51.049
Get rid of react there,
because we're not using it.

15
00:00:51.049 --> 00:00:57.468
Use effect, use ref,
we're gonna import mutable,

16
00:00:57.468 --> 00:01:02.326
object ref, and react element from here

17
00:01:05.536 --> 00:01:08.034
And that all looks good.

18
00:01:08.034 --> 00:01:16.383
We're gonna say that children
here are they are react elements.

19
00:01:26.453 --> 00:01:28.472
That's a return type, not out.

20
00:01:28.472 --> 00:01:33.387
Actually, what we wanted there,
inside here, rather, okay?

21
00:01:33.387 --> 00:01:37.480
So, the first thing we're gonna say
here is these children coming in from

22
00:01:37.480 --> 00:01:38.415
as properties.

23
00:01:38.415 --> 00:01:40.416
They're gonna be react elements.

24
00:01:40.416 --> 00:01:42.874
And react elements is basically
anything that react can render,

25
00:01:42.874 --> 00:01:44.670
which is gonna be something
of either JXS type.

26
00:01:44.670 --> 00:01:49.088
It could be a null,
it could be a bunch of stuff like that.

27
00:01:49.088 --> 00:01:52.050
So now we know if you mouse over children,
we know that for

28
00:01:52.050 --> 00:01:54.474
a fact this is a react element,
which is cool.

29
00:01:56.166 --> 00:02:01.584
Okay, next thing we're
gonna say is this LREF here

30
00:02:01.584 --> 00:02:08.645
is going to be a mutable ref object,
which we have up here, right?

31
00:02:08.645 --> 00:02:13.055
But we're gonna tell it what type
of thing it's going to contain,

32
00:02:13.055 --> 00:02:16.620
and it's either going to
contain an HTML div object.

33
00:02:16.620 --> 00:02:20.854
So HTML div element or you can see
here we instantiate with null, so

34
00:02:20.854 --> 00:02:22.754
we have to say or this is null.

35
00:02:25.228 --> 00:02:27.778
Okay, and then now if I mouse over L ref,

36
00:02:27.778 --> 00:02:31.154
I can see that it's either an HTML div or
it's a null.

37
00:02:31.154 --> 00:02:34.482
And so that means here that's what
I have to do this check here.

38
00:02:34.482 --> 00:02:40.235
Now you can see here that every
time that I refer to eLRef.current,

39
00:02:40.235 --> 00:02:45.271
I can be guaranteed every single
time after this point that

40
00:02:45.271 --> 00:02:49.922
it's going to be an HTML
development which is great.

41
00:02:51.603 --> 00:02:58.902
Cool Okay,

42
00:02:58.902 --> 00:03:01.918
let's go down to our use effect here.

43
00:03:01.918 --> 00:03:06.676
First thing we're gonna say here is,
every time that you query the DOM for

44
00:03:06.676 --> 00:03:10.842
here from Get Elements by ID,
it can give you back null, right?

45
00:03:10.842 --> 00:03:16.421
Just in theory if the HTML doesn't have

46
00:03:16.421 --> 00:03:21.833
modal element, it's gonna be null,

47
00:03:21.833 --> 00:03:27.245
so we have to be defensive about that and say

48
00:03:27.245 --> 00:03:33.011
if modal route or No eLREF.current.

49
00:03:33.011 --> 00:03:34.852
Then here we're just going to say return,
right?

50
00:03:34.852 --> 00:03:38.746
If either one of those doesn't exist
anymore, then we're gonna be just say,

51
00:03:38.746 --> 00:03:41.165
0kay, well, no,
we're not going to do that.

52
00:03:41.165 --> 00:03:45.719
Now I'm guaranteed here that model is
definitely an HTML element because if it

53
00:03:45.719 --> 00:03:48.001
was null it would not get past this point.

54
00:03:49.982 --> 00:03:51.079
So that's why that works.

55
00:03:53.122 --> 00:03:57.091
Here we have to again be
a little bit more defensive here,

56
00:03:57.091 --> 00:03:59.332
and this return function here.

57
00:03:59.332 --> 00:04:04.590
So we just have to say if
there is no modal route,

58
00:04:04.590 --> 00:04:09.331
or rather, if there is no eLRef.current.

59
00:04:12.418 --> 00:04:17.866
Then, if there is,
then go ahead and remove it.

60
00:04:20.701 --> 00:04:23.349
There we go, okay?

61
00:04:27.066 --> 00:04:29.643
And now this Model.tsx looks good.

62
00:04:32.147 --> 00:04:36.256
So all of these,
if statements you're gonna find here,

63
00:04:36.256 --> 00:04:41.393
this is very common theme with
particularly when you're porting an old

64
00:04:41.393 --> 00:04:47.238
JavaScript type code base where you can
be kind of loose with your types, right?

65
00:04:47.238 --> 00:04:52.216
Here I wasn't being defensive about
model route never being there because

66
00:04:52.216 --> 00:04:55.231
I literally wrote the HTML
that has it there.

67
00:04:55.231 --> 00:04:57.772
So I'm not really concerned
about it being removed, right?

68
00:04:57.772 --> 00:05:00.180
It's that therefore I was not
very defensive about it, but

69
00:05:00.180 --> 00:05:02.458
TypeScript is going to be
making me very precise about.

70
00:05:02.458 --> 00:05:04.717
Nope, we have to provide for

71
00:05:04.717 --> 00:05:09.527
all the cases because we do not
allow runtime errors like that

72
00:05:11.445 --> 00:05:16.957
Cool Any questions

73
00:05:16.957 --> 00:05:22.775
about this makes sense All right,
so that is modal.

74
00:05:25.825 --> 00:05:29.330
Now the question you might ask me is,

75
00:05:29.330 --> 00:05:33.749
how do I decide what order
to migrate files to?

76
00:05:33.749 --> 00:05:38.513
The easiest thing to migrate is model
itself doesn't really depend on

77
00:05:38.513 --> 00:05:40.539
any other of my code, right?

78
00:05:40.539 --> 00:05:45.050
It's kind of a leaf node in the sense
of this modal is not importing

79
00:05:45.050 --> 00:05:46.699
a bunch of other stuff.

80
00:05:46.699 --> 00:05:49.710
Therefore, it makes it a good
candidate for me to type.

81
00:05:49.710 --> 00:05:53.384
Because once I finish typing this, you can
see this actually has no errors anymore,

82
00:05:53.384 --> 00:05:56.815
right, because it's not importing
anything that doesn't use TypeScript.

83
00:05:56.815 --> 00:06:01.274
As opposed, if I went and
typed app.jsx for a moment.

84
00:06:01.274 --> 00:06:05.548
This imports from adopted pet context
from details from search params, so even

85
00:06:05.548 --> 00:06:09.961
after I finished migrating these files,
I would still have type errors, right?

86
00:06:09.961 --> 00:06:14.974
Because these are untyped therefore
the strict type checking from

87
00:06:14.974 --> 00:06:19.638
TypeScript is not going to allow
these to go without an error.

88
00:06:19.638 --> 00:06:24.142
It's fine, you can still do it but, I like
the fact that I'm done with modal.tsx

89
00:06:24.142 --> 00:06:26.122
here and I'm totally done with it.

90
00:06:26.122 --> 00:06:27.467
I don't have to do anything more for it.

91
00:06:27.467 --> 00:06:30.100
This is totally free of type errors.

92
00:06:30.100 --> 00:06:33.470
If I go do app right now,
I'm gonna finish it and

93
00:06:33.470 --> 00:06:38.376
there's still gonna be type errors,
which is less fun, I suppose.

