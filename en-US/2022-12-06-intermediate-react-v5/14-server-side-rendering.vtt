WEBVTT

1
00:00:00.136 --> 00:00:03.375
So we have a checkpoint right now,

2
00:00:03.375 --> 00:00:08.400
you can go into your app,
or our project here rather,

3
00:00:08.400 --> 00:00:13.891
react.holt.courses, we're
down in code splitting.

4
00:00:13.891 --> 00:00:15.560
So we're down here at code splitting.

5
00:00:15.560 --> 00:00:20.635
So you can see all the code up
until now here in code splitting.

6
00:00:20.635 --> 00:00:25.395
We are now going to do
server side rendering.

7
00:00:25.395 --> 00:00:27.183
We've done code splitting,

8
00:00:27.183 --> 00:00:31.328
now what we wanna do is whenever
a user makes a request to our website,

9
00:00:31.328 --> 00:00:36.564
we don't wanna just send them bare HTML,
which is what they receive upfront, right?

10
00:00:36.564 --> 00:00:43.629
They receive this, and then their app
goes and refetches App.js and style.css.

11
00:00:43.629 --> 00:00:48.772
We wanna send them complete markup
whenever the user makes the request,

12
00:00:48.772 --> 00:00:54.013
so that whenever they receive it,
they get a complete vision of the site.

13
00:00:54.013 --> 00:00:57.223
And then they can basically
start reading your site,

14
00:00:57.223 --> 00:00:59.374
start deciding what they wanna do.

15
00:00:59.374 --> 00:01:03.216
And then hopefully by the time they make
a decision about what they wanna do,

16
00:01:03.216 --> 00:01:05.874
your app is now ready to
be interacted with, right?

17
00:01:05.874 --> 00:01:10.526
So that what server side rendering is
going to do is it's going to reduce

18
00:01:10.526 --> 00:01:13.481
the time to first meaningful paint, right?

19
00:01:13.481 --> 00:01:19.035
It's going to increase the time to
interactivity, which is bad, right?

20
00:01:19.035 --> 00:01:22.156
But the idea is,
you show the user something,

21
00:01:22.156 --> 00:01:25.852
they start understanding
what you're showing them.

22
00:01:25.852 --> 00:01:28.159
And by the time they go
to click on something,

23
00:01:28.159 --> 00:01:31.381
you'll have loaded all the JavaScript
in the background, and

24
00:01:31.381 --> 00:01:34.015
they'll be able to do something about it,
right?

25
00:01:34.015 --> 00:01:37.141
So picture you're signing
up on netflix.com.

26
00:01:37.141 --> 00:01:41.545
The reason I'm picking this one is cuz I
used to literally work on exactly this

27
00:01:41.545 --> 00:01:42.646
problem, right?

28
00:01:42.646 --> 00:01:49.012
You show them, This, right?

29
00:01:49.012 --> 00:01:52.875
And by the time that
the user reads the website,

30
00:01:52.875 --> 00:01:56.844
they're like, okay,
I wanna sign in, right?

31
00:01:56.844 --> 00:02:01.060
By the time that they think about it and
click on Sign In,

32
00:02:01.060 --> 00:02:05.833
you want the website to have been
loaded by that point, right?

33
00:02:05.833 --> 00:02:08.363
That's what we're gonna try and
do right now.

34
00:02:08.363 --> 00:02:11.326
Now, what's really bad is if
you show them something, and

35
00:02:11.326 --> 00:02:14.839
by the time that they go click on
something, it doesn't do anything.

36
00:02:14.839 --> 00:02:19.100
You played yourself,
that's a bad idea, right?

37
00:02:19.100 --> 00:02:20.970
Again, it's not a silver bullet,
you gotta keep your eye on the ball.

38
00:02:20.970 --> 00:02:24.714
You gotta make sure that you're measuring
your performance metrics to make sure

39
00:02:24.714 --> 00:02:28.141
that you are making a better experience,
not making a worse experience.

40
00:02:28.141 --> 00:02:31.710
Because nothing will frustrate a user
more than them trying to do something and

41
00:02:31.710 --> 00:02:35.135
it's like, this is broken, and
then they'll just bounce, right?

42
00:02:35.135 --> 00:02:36.626
So let's go.

43
00:02:40.109 --> 00:02:45.240
Head to your application, we're gonna make

44
00:02:45.240 --> 00:02:50.651
a new file here that is
called ClientApp.jsx.

45
00:02:50.651 --> 00:02:53.317
So we're gonna do server side rendering.

46
00:02:53.317 --> 00:02:58.365
You can't do any DOM stuff in Node,
I think that makes sense, right?

47
00:02:58.365 --> 00:03:02.747
You can't call window.alert because one,
there's no window, and two,

48
00:03:02.747 --> 00:03:03.918
there's no alert.

49
00:03:03.918 --> 00:03:06.999
So you have to make
sure that anything that

50
00:03:06.999 --> 00:03:11.764
interacts with the DOM is not
loaded in Node, or else it breaks.

51
00:03:11.764 --> 00:03:16.892
So we're gonna put all of the browsery
stuff here in ClientApp.jsx.

52
00:03:16.892 --> 00:03:24.618
So first thing we're gonna do is import
hydrateRoot from react-dom/client.

53
00:03:24.618 --> 00:03:30.300
We're gonna import BrowserRouter,
because it's in the name,

54
00:03:30.300 --> 00:03:37.440
you can't load BrowserRouter in Node,
so that comes from react-router-dom.

55
00:03:37.440 --> 00:03:41.765
And then we're going to
import App from './App'.

56
00:03:44.362 --> 00:03:47.524
Okay, And then here,

57
00:03:49.409 --> 00:03:53.226
We're just gonna say hydrateRoot.

58
00:03:53.226 --> 00:03:57.909
We're gonna tell it where to hydrate it,
so

59
00:03:57.909 --> 00:04:02.853
document.getElementsById('root').

60
00:04:02.853 --> 00:04:08.975
We're gonna say BrowserRouter, App.

61
00:04:18.584 --> 00:04:25.059
That's it, my notes is incorrect,
so that is it.

62
00:04:25.059 --> 00:04:28.447
So all we are doing is we're loading
the app, we're loading BrowserRouter.

63
00:04:28.447 --> 00:04:34.014
We're doing everything that has to be
done in the browser here in ClientApp.

64
00:04:34.014 --> 00:04:37.733
Imagine if you had something like Google
Analytics, you would do that here, right,

65
00:04:37.733 --> 00:04:40.213
because you don't wanna run
analytics from the server,

66
00:04:40.213 --> 00:04:42.452
you wanna run analytics from the browser,
right?

67
00:04:42.452 --> 00:04:46.445
So anything like that,
you're gonna throw here in ClientApp.jsx.

68
00:04:46.445 --> 00:04:49.730
Anything that's only gonna
happen in the browser and

69
00:04:49.730 --> 00:04:53.746
not gonna happen on server side renders,
that goes here, okay?

70
00:04:58.952 --> 00:05:01.418
Go back to index.html.

71
00:05:01.418 --> 00:05:07.578
This is gonna load ClientApp,
not App.jsx, so that's important.

72
00:05:10.091 --> 00:05:14.457
Okay, and then go to App.jsx,

73
00:05:14.457 --> 00:05:18.835
get rid of BrowserRouter here.

74
00:05:18.835 --> 00:05:25.026
Don't load that,
delete that from your app here as well.

75
00:05:32.528 --> 00:05:36.520
Yeah, get rid of the React DOM
import up here as well.

76
00:05:36.520 --> 00:05:39.852
Yes, so this one right here,
the createRoot one,

77
00:05:39.852 --> 00:05:42.032
just get rid of that altogether.

78
00:05:45.311 --> 00:05:50.579
And then down here at the bottom,
get rid of all this root.render stuff.

79
00:05:50.579 --> 00:05:53.689
I'm just gonna say export default App.

80
00:05:57.457 --> 00:05:58.516
So far so good.

81
00:06:00.970 --> 00:06:04.758
So we're making app now
general purpose that

82
00:06:04.758 --> 00:06:08.553
it can be run either in Node or
in the browser.

83
00:06:08.553 --> 00:06:11.563
Now, we need a ServerApp.jsx.

84
00:06:11.563 --> 00:06:17.315
So make another new file
called ServerApp.jsx.

85
00:06:27.943 --> 00:06:37.669
Okay, here we're gonna say import,
RenderToPipeableStream,

86
00:06:43.167 --> 00:06:46.361
From react-dom/server.

87
00:06:49.285 --> 00:06:57.346
Import {StaticRouter} from
react-routers-dom/server.

88
00:07:00.382 --> 00:07:05.733
And import App from './App'.

89
00:07:08.263 --> 00:07:13.409
Okay, StaticRouter is basically React
router that can be run in Node,

90
00:07:13.409 --> 00:07:14.798
that's all it is.

91
00:07:14.798 --> 00:07:20.796
So it's all the same machinations of how
to resolve routes, what route they're on,

92
00:07:20.796 --> 00:07:25.227
which one to send them to,
navigation, all that kinda stuff.

93
00:07:25.227 --> 00:07:28.204
But it doesn't have all the stuff
that ties into history,

94
00:07:28.204 --> 00:07:30.159
which is only in the browser, right?

95
00:07:30.159 --> 00:07:34.269
That's why we need StaticRouter and
not BrowserRouter.

96
00:07:34.269 --> 00:07:37.129
renderToPipeableStream is something
that can only be run in Node.

97
00:07:37.129 --> 00:07:41.865
This is actually going to run our
application, and it's gonna run it into,

98
00:07:41.865 --> 00:07:44.456
what's called, a node stream, right?

99
00:07:44.456 --> 00:07:49.396
Which is basically this thing that
it'll progressively render your app and

100
00:07:49.396 --> 00:07:52.185
it'll give your app progressive output.

101
00:07:52.185 --> 00:07:54.285
So that when a user makes a request,

102
00:07:54.285 --> 00:07:58.487
we can slowly serve them pieces of
information as they're available.

103
00:07:58.487 --> 00:08:01.833
The way that this used to work is we used
to have to render the entire thing all at

104
00:08:01.833 --> 00:08:03.546
once and then send them complete HTML.

105
00:08:03.546 --> 00:08:08.367
Now, with React Router, sorry, not with
React Router, but React 18 and suspense,

106
00:08:08.367 --> 00:08:10.139
we can send them piece by piece.

107
00:08:10.139 --> 00:08:12.982
I guess it was React 17 that did that,
but it was keeping track.

108
00:08:14.914 --> 00:08:21.440
Okay, we're gonna export default
a function called render,

109
00:08:21.440 --> 00:08:26.990
whatever you wanna call it,
url and options, okay?

110
00:08:26.990 --> 00:08:32.631
And then const stream =
renderToPipeableStream,

111
00:08:34.826 --> 00:08:41.037
StaticRouter location = url.

112
00:08:43.541 --> 00:08:48.917
And we have App, And

113
00:08:48.917 --> 00:08:54.348
then we have opts, like that.

114
00:08:54.348 --> 00:08:57.221
Okay, and then down here,
we just return stream.

115
00:09:01.242 --> 00:09:05.817
Now, what's cool about this and this
approach, I didn't use to do it this way,

116
00:09:05.817 --> 00:09:09.651
I think this is much more elegant
than the way I used to teach this is,

117
00:09:09.651 --> 00:09:14.197
is we can now just render, sorry,
we can just have Vite build ServerApp.jsx.

118
00:09:14.197 --> 00:09:18.718
And then we can import what
is built by Vite into Node.

119
00:09:18.718 --> 00:09:22.969
So we don't have to build our entire node
server, we just have to build server app,

120
00:09:22.969 --> 00:09:25.183
which then interfaces to our jsx, right?

121
00:09:25.183 --> 00:09:28.741
Because Node can't read jsx,
that's the problem that we have here.

122
00:09:28.741 --> 00:09:30.611
Does that makes sense?

123
00:09:30.611 --> 00:09:35.542
So now we can say, hey, Vite, build this
for me, and then in our Node application,

124
00:09:35.542 --> 00:09:37.845
we'll say, import the built output.

125
00:09:40.422 --> 00:09:45.195
Your alternative is using something like
a babel/node or something like that,

126
00:09:45.195 --> 00:09:47.448
it gets really janky pretty quickly.

127
00:09:51.966 --> 00:09:55.783
Okay, all that sounds good,
go into your package.json.

128
00:09:59.639 --> 00:10:02.858
We're gonna go in here to your scripts and
we're gonna add a couple more.

129
00:10:05.276 --> 00:10:09.112
So we're gonna have two different builds.

130
00:10:09.112 --> 00:10:14.908
We're gonna have "build:client",

131
00:10:14.908 --> 00:10:19.510
which is gonna be vite build --

132
00:10:19.510 --> 00:10:23.948
outDir ../dist/client.

133
00:10:23.948 --> 00:10:29.549
And then we're gonna have a build server,

134
00:10:29.549 --> 00:10:34.684
which is gonna be vite build --outDir

135
00:10:34.684 --> 00:10:41.077
../dist/server -- ssr ServerApp.jsx.

136
00:10:43.937 --> 00:10:51.108
Okay, and
then when I have multiple build steps,

137
00:10:51.108 --> 00:10:56.401
I'll do something like npm run build

138
00:10:56.401 --> 00:11:01.538
client, and npm run build server.

139
00:11:01.538 --> 00:11:05.493
To be super fair,
I don't think this works in Windows, so

140
00:11:05.493 --> 00:11:07.936
you'll have to do something else.

141
00:11:07.936 --> 00:11:10.976
It doesn't matter,
we don't really have to build this.

142
00:11:10.976 --> 00:11:14.804
What would be more elegant is having
a make file that does all this stuff for

143
00:11:14.804 --> 00:11:17.831
you, but I'm definitely not
teaching make today [LAUGH] or

144
00:11:17.831 --> 00:11:20.576
ever, for that matter,
but definitely not today.

145
00:11:20.576 --> 00:11:25.961
Okay, and then server, we're gonna have

146
00:11:25.961 --> 00:11:32.403
just "node server.js",
something like that.

147
00:11:32.403 --> 00:11:34.828
Or start, not server, just node start.

148
00:11:34.828 --> 00:11:38.392
Npm run start,
we'll do our "node server.js".

149
00:11:42.687 --> 00:11:46.056
One thing you do need to add your
package.json, please up here,

150
00:11:46.056 --> 00:11:50.036
just put "type": "module",
cuz we're gonna be doing modules in Node,

151
00:11:50.036 --> 00:11:53.061
it requires this type of module for
it to be okay with that.

152
00:11:59.952 --> 00:12:04.420
Okay, getting closer,

153
00:12:04.420 --> 00:12:12.728
please npm install express@4.18.2.

154
00:12:15.416 --> 00:12:18.772
You might ask me,
why don't I just do this in Next.js?

155
00:12:18.772 --> 00:12:24.131
You probably should, I'm showing you
how to basically build Next.js, right?

156
00:12:24.131 --> 00:12:28.603
I'm showing you what Next.js
does under the hood for you.

157
00:12:28.603 --> 00:12:32.135
And then after this course, hopefully
when you either take Scott's course or

158
00:12:32.135 --> 00:12:35.079
something like that,
you'll really value what Next is doing for

159
00:12:35.079 --> 00:12:38.205
you, because this is not necessarily
always that fun to do, right?

160
00:12:38.205 --> 00:12:40.930
But what's cool,
what I'm showing you here is that,

161
00:12:40.930 --> 00:12:44.141
you don't have to use a framework
that's React aware, right?

162
00:12:44.141 --> 00:12:48.014
We can build this in any
Node-based framework.

163
00:12:48.014 --> 00:12:55.571
So when I worked at Netflix, we were
working with Fastify, right, Fastify?

164
00:12:55.571 --> 00:12:58.086
Restify, Restify is
the one that Netflix uses.

165
00:13:01.698 --> 00:13:03.473
This was the kind of stuff
that we were doing there.

