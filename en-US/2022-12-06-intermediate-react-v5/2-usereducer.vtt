WEBVTT

1
00:00:00.870 --> 00:00:04.929
I imagine many of you are at least
surface level familiar with Redux.

2
00:00:04.929 --> 00:00:08.726
If you're not, it's like a centralized
store for state in React.

3
00:00:08.726 --> 00:00:13.934
A central concept to Redux
is the concept of a reducer.

4
00:00:13.934 --> 00:00:18.796
A reducer is just a fancy way
of saying I have a function,

5
00:00:18.796 --> 00:00:22.117
that function takes in a bit of state.

6
00:00:22.117 --> 00:00:27.756
It takes an action and it gives you back
a new bit of state, that's really it.

7
00:00:27.756 --> 00:00:35.040
So we have this function here, let's just
make that really small, called a reducer.

8
00:00:35.040 --> 00:00:40.231
It takes in some piece of state,
our state just

9
00:00:40.231 --> 00:00:45.553
looks like if I can find
it right here it has an h,

10
00:00:45.553 --> 00:00:49.295
it has an s and it has an l, right?

11
00:00:49.295 --> 00:00:50.997
That's all it is.

12
00:00:50.997 --> 00:00:53.545
It's an object with
three properties on it.

13
00:00:53.545 --> 00:00:55.460
And then it takes an action and

14
00:00:55.460 --> 00:00:59.144
that action is gonna have
a type of some variety, right?

15
00:00:59.144 --> 00:01:03.383
Is it gonna be INCREMENT_H,
DECREMENT_H, INCREMENT_S, DECREMENT_S,

16
00:01:03.383 --> 00:01:05.612
INCREMENT_L or DECREMENT_L, right?

17
00:01:05.612 --> 00:01:07.190
That's it.

18
00:01:07.190 --> 00:01:10.190
Those are the six options for

19
00:01:10.190 --> 00:01:14.821
how to modify this
particular bit of state.

20
00:01:14.821 --> 00:01:15.498
Why are we doing it this way?

21
00:01:15.498 --> 00:01:18.712
It seems like some indirection
to do it this way.

22
00:01:18.712 --> 00:01:24.996
The reason why you can do this is now
when you change state, you can test that.

23
00:01:24.996 --> 00:01:27.325
So this reducer is now very testable.

24
00:01:27.325 --> 00:01:28.344
That has no side effects.

25
00:01:28.344 --> 00:01:32.844
All it does is it takes in state and
an action and gives you back new state.

26
00:01:32.844 --> 00:01:34.498
That is very testable.

27
00:01:34.498 --> 00:01:39.387
Most problems in user interfaces
come from mismanaged state.

28
00:01:39.387 --> 00:01:44.814
And so making your changing
state testable is very valuable.

29
00:01:47.789 --> 00:01:49.939
So I have this HSL.

30
00:01:49.939 --> 00:01:53.230
If you're not familiar with HSL,
it's a way of describing color,

31
00:01:53.230 --> 00:01:54.396
just like RGB, right?

32
00:01:54.396 --> 00:01:56.757
Or lab or any one of those.

33
00:01:56.757 --> 00:02:00.788
It's hue, saturation, and
lightness, I believe.

34
00:02:00.788 --> 00:02:03.408
It's just a way of describing color.

35
00:02:03.408 --> 00:02:07.559
And I'm using this to basically kind
of cheat a little bit to make it so

36
00:02:07.559 --> 00:02:12.226
that if you change the hue or the
saturation of something, or the lightness.

37
00:02:14.481 --> 00:02:19.152
Generally, you can rotate yourself around
the color wheel and the text kind of

38
00:02:19.152 --> 00:02:24.201
remains readable as long as you're on the
opposite side of the color wheel, right?

39
00:02:24.201 --> 00:02:25.699
Not totally true.

40
00:02:25.699 --> 00:02:30.331
You'd have to get into lab color space to
really guarantee something to be readable.

41
00:02:30.331 --> 00:02:32.779
But you can see it's pretty close, right?

42
00:02:32.779 --> 00:02:35.560
I'm rotating around the color wheel and

43
00:02:35.560 --> 00:02:39.171
it's the text is still
remaining fairly readable.

44
00:02:39.171 --> 00:02:41.312
Which is I think pretty neat, right?

45
00:02:41.312 --> 00:02:42.322
This is not great.

46
00:02:42.322 --> 00:02:45.173
This probably doesn't pass double a,
right?

47
00:02:45.173 --> 00:02:49.467
But yeah, that definitely doesn't.

48
00:02:49.467 --> 00:02:52.654
But most of these do,
like that does, right?

49
00:02:52.654 --> 00:02:56.998
Anyway all this is doing
is it's passing in actions,

50
00:02:56.998 --> 00:03:01.062
which you can see here I'm
doing a dispatch here.

51
00:03:01.062 --> 00:03:03.520
And the type is INCREMENT_S or
DECREMENT_S.

52
00:03:03.520 --> 00:03:08.689
In this function all it does is it's
basically the H is just rotating

53
00:03:08.689 --> 00:03:13.324
around zero to 360, and
then going back around, right?

54
00:03:13.324 --> 00:03:16.180
HSL is like a color wheel basically,
right?

55
00:03:18.050 --> 00:03:22.568
So in other words,
you're just imitating Redux behavior, but

56
00:03:22.568 --> 00:03:26.513
using just React,
using this hook called useReducer.

57
00:03:26.513 --> 00:03:31.691
Some people basically say like, I never
use useState, I only use useReducer.

58
00:03:31.691 --> 00:03:35.052
It's a replacement for useState, right?

59
00:03:35.052 --> 00:03:40.176
UseState and useReducer accomplish
the same thing, just different ways.

60
00:03:40.176 --> 00:03:41.878
I find this a bit heavy handed.

61
00:03:41.878 --> 00:03:43.708
I think in this case,
it's kind of elegant.

62
00:03:43.708 --> 00:03:48.785
So if I'm doing something like
this where I have to have some

63
00:03:48.785 --> 00:03:55.187
sort of complex interaction between of
how my state is changing over time,

64
00:03:55.187 --> 00:03:58.868
useReducer is a elegant way to solve that.

65
00:03:58.868 --> 00:04:01.857
But if I'm just going from true
to false and false to true,

66
00:04:01.857 --> 00:04:03.390
I'm just gonna do useState.

67
00:04:03.390 --> 00:04:04.693
That seems way easier to me.

