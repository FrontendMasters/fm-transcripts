WEBVTT

1
00:00:00.162 --> 00:00:06.151
I am not a fan of seeking 100% test
coverage, cuz I think it's dumb.

2
00:00:06.151 --> 00:00:10.955
I think it's dumb, because for the most
part, you don't need 100% test coverage.

3
00:00:10.955 --> 00:00:13.703
There's things that you
just don't need to test.

4
00:00:15.378 --> 00:00:20.051
But if you want to,
I'm gonna show you how to cheat.

5
00:00:20.051 --> 00:00:26.423
There's a thing called snapshot testing,
which in general, I think is a bad idea.

6
00:00:26.423 --> 00:00:30.988
But it's built into Vitest,
it's built into Jest, and it's very easy.

7
00:00:30.988 --> 00:00:37.261
So snapshot testing, it's low effort,
low confidence tests.

8
00:00:37.261 --> 00:00:43.036
So they're very easy to write, but
they inspire very little confidence.

9
00:00:43.036 --> 00:00:47.686
So cheap tests that don't do much.

10
00:00:47.686 --> 00:00:51.385
Now, you have to ask yourself,
is that a good thing for me?

11
00:00:51.385 --> 00:00:52.469
Do I like that?

12
00:00:52.469 --> 00:00:55.308
For me personally, they're too noisy, and

13
00:00:55.308 --> 00:00:58.159
I also don't get very
much value out of them.

14
00:00:58.159 --> 00:01:01.058
But I'm gonna show you how
to write them nonetheless.

15
00:01:02.514 --> 00:01:05.376
So let's do it with Results.jsx.

16
00:01:05.376 --> 00:01:11.074
I want you to create a file here,

17
00:01:11.074 --> 00:01:15.304
Results.test.jsx.

18
00:01:15.304 --> 00:01:20.439
Here, we're going to import expect,

19
00:01:20.439 --> 00:01:23.400
and test from vitest.

20
00:01:23.400 --> 00:01:30.602
And I'm going to import render
from testing-library react

21
00:01:34.218 --> 00:01:37.899
And I'm going to import Results,

22
00:01:40.786 --> 00:01:46.187
From ../Results, okay?

23
00:01:46.187 --> 00:01:51.873
Test renders correctly with no pets,

24
00:01:51.873 --> 00:01:58.624
async function, doesn't have to be async,

25
00:01:58.624 --> 00:02:03.431
but I just make it async anyway.

26
00:02:03.431 --> 00:02:06.148
Then we're gonna grab this
thing out called asFragment,

27
00:02:08.941 --> 00:02:16.732
= render(&lt;Results pets = empty array).

28
00:02:20.614 --> 00:02:23.833
Okay, and then we're gonna say,

29
00:02:23.833 --> 00:02:28.279
expect(asFragment), which is a function.

30
00:02:28.279 --> 00:02:34.089
And you're gonna call this magic
function called toMatchSnapshot.

31
00:02:36.372 --> 00:02:39.623
Okay, what happened here?

32
00:02:39.623 --> 00:02:41.704
It just doesn't have any tests,
which is fine.

33
00:02:41.704 --> 00:02:46.933
So if I save this, It's gonna say,

34
00:02:46.933 --> 00:02:50.181
hey, I wrote a new snapshot for you.

35
00:02:50.181 --> 00:02:55.159
Then you can look in the snapshots
directory up here, and

36
00:02:55.159 --> 00:02:59.826
you can see that it renders
out this document fragment

37
00:02:59.826 --> 00:03:04.712
here of what this looks like
rendered to HTML directly.

38
00:03:04.712 --> 00:03:06.672
And then now, every time that I run this,

39
00:03:06.672 --> 00:03:09.877
it's just going to compare this
to what it was previously, right?

40
00:03:09.877 --> 00:03:14.107
So it's gonna say, okay,
this is what I saw last time,

41
00:03:14.107 --> 00:03:17.351
does this look exactly the same this time?

42
00:03:17.351 --> 00:03:21.732
So to prove my point here,

43
00:03:21.732 --> 00:03:25.924
let's look at Results.

44
00:03:25.924 --> 00:03:31.087
And I'm gonna put No Pets Found
with a bunch of exclamation points,

45
00:03:31.087 --> 00:03:34.089
and I am gonna get a failing test, why?

46
00:03:34.089 --> 00:03:39.237
Because before, it said No Pets Found,
and now it says, No Pets Found!.

47
00:03:43.237 --> 00:03:45.939
Does exactly what it says it is like.

48
00:03:45.939 --> 00:03:48.483
I'm gonna take a frozen
snapshot of this and

49
00:03:48.483 --> 00:03:52.970
then I'm going to compare this in the
future that this is what I expect to see.

50
00:03:52.970 --> 00:03:55.832
Now what I can do here is,
I can go and say, you know what,

51
00:03:55.832 --> 00:03:57.884
this is actually what I expect, right?

52
00:03:57.884 --> 00:04:02.079
I want this to now match that, if I
just hit you now, it's like, all right,

53
00:04:02.079 --> 00:04:03.143
you're the boss.

54
00:04:03.143 --> 00:04:09.041
I'm gonna tell you now that's what
it's gonna look like in the future.

55
00:04:09.041 --> 00:04:17.664
So now if I open this again,
Notice that it says it's okay, close this.

56
00:04:17.664 --> 00:04:21.403
Yeah, don't save, please refresh it.

57
00:04:21.403 --> 00:04:24.052
And now if I say snapshot,

58
00:04:24.052 --> 00:04:29.477
you can see here now it
actually says what I have here.

59
00:04:31.997 --> 00:04:34.337
Do you think that's useful?

60
00:04:34.337 --> 00:04:36.030
Maybe, sometimes.

61
00:04:36.030 --> 00:04:41.096
If you had something that truly you'd
never really expected to change and

62
00:04:41.096 --> 00:04:45.426
for some reason it was changing
underneath you, by all means,

63
00:04:45.426 --> 00:04:48.141
this could be a valid use case for that.

64
00:04:48.141 --> 00:04:52.153
For me this is just testing
that my UI is not changing and

65
00:04:52.153 --> 00:04:54.343
I also expect my UI to change.

66
00:04:54.343 --> 00:05:00.579
I used to write a lot of these so
that I could get 100% test coverage.

67
00:05:00.579 --> 00:05:05.597
I don't think that's useful anymore,
so I don't write very many of these.

68
00:05:05.597 --> 00:05:07.884
The one thing I can show you here,

69
00:05:07.884 --> 00:05:11.500
let's go back,
this is writing to match snapshot.

70
00:05:11.500 --> 00:05:15.798
If I put to match inline snapshot,
now I'm gonna save this,

71
00:05:15.798 --> 00:05:21.700
it'll actually write this directly here
if you don't wanna have a separate file,

72
00:05:21.700 --> 00:05:27.468
that's up to you, some people like that
better, but that's totally up to you.

73
00:05:30.801 --> 00:05:32.718
I wasn't gonna say about that.

74
00:05:32.718 --> 00:05:35.763
Yeah I don't write too
many of these anymore, but

75
00:05:35.763 --> 00:05:39.911
I wanted to show you how to do it in
case you wanted to know how to do it.

76
00:05:39.911 --> 00:05:43.110
Some people find that very useful.

77
00:05:43.110 --> 00:05:47.767
Snapshots is not just for react by
the way, you can do with JSON, for

78
00:05:47.767 --> 00:05:49.091
example, right?

79
00:05:49.091 --> 00:05:54.468
So if I have some JSON API response that
I'm expecting to not change over time,

80
00:05:54.468 --> 00:05:59.029
I can just give it a JSON object
instead of a document fragment, and

81
00:05:59.029 --> 00:06:00.666
that'll work as well.

82
00:06:02.334 --> 00:06:07.016
But as you can see, two lines here
of testing stuff generates a test,

83
00:06:07.016 --> 00:06:11.965
some people are really into that,
I'll leave that to your discretion.

84
00:06:11.965 --> 00:06:17.109
So this is doing with no pets, if you
wanna see what it looks like with pets,

85
00:06:17.109 --> 00:06:23.478
let's just go nab this, I have some sample
data here that you can grab really quick.

86
00:06:23.478 --> 00:06:26.805
So let's go grab the sample data,

87
00:06:26.805 --> 00:06:32.440
I literally just took this
directly from an API response.

88
00:06:34.618 --> 00:06:38.762
There we go, grab an API response.

89
00:06:38.762 --> 00:06:43.601
We'll just say right here,
blah equals blah.

90
00:06:43.601 --> 00:06:47.663
We'll have to import
static router as well.

91
00:06:47.663 --> 00:06:52.877
So import StaticRouter

92
00:06:52.877 --> 00:07:02.789
from react-router-dom/server, okay.

93
00:07:02.789 --> 00:07:07.481
And then down here we'll write another

94
00:07:07.481 --> 00:07:12.316
test that looks relatively similar test

95
00:07:12.316 --> 00:07:16.590
renders correctly with some pets.

96
00:07:17.604 --> 00:07:21.845
And here you can say,

97
00:07:21.845 --> 00:07:27.264
const asFragment = render

98
00:07:27.264 --> 00:07:34.573
StaticRouter Results pets = pets.

99
00:07:39.806 --> 00:07:46.947
And then, expect asFragment

100
00:07:46.947 --> 00:07:51.807
toMatchSnapshot.

101
00:07:51.807 --> 00:07:53.542
There you go.

102
00:07:53.542 --> 00:07:57.476
You'll see that it wrote a snapshot, we
can go back and look at our snapshot file.

103
00:08:00.452 --> 00:08:05.795
And you can see here it's rendering
out that, Luna rendered correctly

104
00:08:05.795 --> 00:08:10.442
with dog Coveny, Seattle,
Washington, so on and so forth.

105
00:08:14.670 --> 00:08:16.480
So that's what that would look like.

106
00:08:16.480 --> 00:08:20.440
Let me tell you my minor
problem with this,

107
00:08:20.440 --> 00:08:24.400
what happens if I change something in pet?

108
00:08:24.400 --> 00:08:26.851
Let's just go do it, just for funsies.

109
00:08:26.851 --> 00:08:31.691
So I change these from m dashes to
normal dashes or something like that,

110
00:08:31.691 --> 00:08:35.659
something really silly or
I'll just put names like this.

111
00:08:35.659 --> 00:08:41.869
All right, so now my tests are gonna fail,
and this is gonna fail because it says,

112
00:08:41.869 --> 00:08:46.012
Jacqueline and Lyda and Si and
all those kinda things.

113
00:08:46.012 --> 00:08:49.745
Which test is failing?

114
00:08:49.745 --> 00:08:51.569
The results test.

115
00:08:51.569 --> 00:08:54.116
Where's there the problem?

116
00:08:54.116 --> 00:08:59.796
The pet's component,
the wrong test is failing, right?

117
00:08:59.796 --> 00:09:02.669
When I have a test fail,
I wanna know exactly what's wrong.

118
00:09:02.669 --> 00:09:05.597
This one gives me some indirection
of what has gone amiss,

119
00:09:05.597 --> 00:09:09.385
I don't like that, I want my test to
be very specific of what I'm testing.

120
00:09:11.875 --> 00:09:15.337
There's something you can do to get
around this called shallow rendering,

121
00:09:15.337 --> 00:09:19.126
which we would have to go grab another
library called react-test-renderer, and

122
00:09:19.126 --> 00:09:20.441
you can do a shallow render.

123
00:09:20.441 --> 00:09:24.389
So instead of actually rendering
everything down to the pet level,

124
00:09:24.389 --> 00:09:26.824
it'll say basically, instead of that,

125
00:09:29.873 --> 00:09:36.524
It'll say that this is trying to render
a pet with all the props, right?

126
00:09:36.524 --> 00:09:40.060
I'm not gonna type out all the props,
but it will actually give you

127
00:09:40.060 --> 00:09:43.608
the name of the react component as
opposed to the actual full HTML.

128
00:09:43.608 --> 00:09:48.040
That's a bit better if you're gonna
be doing lots of snapshot testing,

129
00:09:48.040 --> 00:09:50.085
I would suggest going to do that.

130
00:09:50.085 --> 00:09:53.716
I'll show you how to do that in v7,
if you wanna do that, but

131
00:09:53.716 --> 00:09:57.564
I've decided to de-emphasize
snapshot testing in this course

132
00:09:57.564 --> 00:10:00.072
because I don't think it's a good idea.

133
00:10:00.072 --> 00:10:05.100
I want you to be aware of it,
because you're definitely gonna

134
00:10:05.100 --> 00:10:10.333
come across at a company that does it,
but use at your own peril.

135
00:10:10.333 --> 00:10:11.077
Does that make sense?

136
00:10:11.077 --> 00:10:12.669
Does this make sense?

137
00:10:12.669 --> 00:10:17.761
Okay, two things about snapshot test,
you do check them in to get, some people

138
00:10:17.761 --> 00:10:23.236
are hesitant to do that, most people say,
don't check in machine generated files.

139
00:10:23.236 --> 00:10:25.985
These ones you do check in, right,
because you wanna check them later, right?

140
00:10:25.985 --> 00:10:29.461
So it's important that you
do check these into Git and

141
00:10:29.461 --> 00:10:31.943
never modify them directly, right?

142
00:10:31.943 --> 00:10:35.237
I think that makes sense, these should
only ever be machine generated,

143
00:10:35.237 --> 00:10:36.701
please do not edit them by hand.

144
00:10:36.701 --> 00:10:41.063
&gt;&gt; Craig online just said,
I found that snapshot tests work well for

145
00:10:41.063 --> 00:10:44.325
API integration testing
on a test API endpoint.

146
00:10:46.833 --> 00:10:50.101
&gt;&gt; Yeah, no, I could buy that.

147
00:10:50.101 --> 00:10:54.879
To Craig's point,
I believe that snapshot testing is a much

148
00:10:54.879 --> 00:10:59.661
better use case to making sure
that your JSON response shapes

149
00:10:59.661 --> 00:11:03.989
are not changing between your client and
your server.

150
00:11:03.989 --> 00:11:06.557
It's basically like you're
giving a guarantee from

151
00:11:06.557 --> 00:11:10.332
the back end developer to the front end
developer like a handshake agreement.

152
00:11:10.332 --> 00:11:15.093
This is what this looks like, our tests
are gonna fail if these drift apart.

153
00:11:15.093 --> 00:11:20.074
That is a super valid reason
to use a snapshot test, and

154
00:11:20.074 --> 00:11:26.128
one that I've done before,
so yes, I agree with that.

155
00:11:26.128 --> 00:11:34.245
But this is, It gets you towards
100% test coverage, right?

156
00:11:34.245 --> 00:11:38.635
So we're gonna look at test
coverage here in just a second.

157
00:11:38.635 --> 00:11:44.821
It's going to show results.jsx
as being 100% test covered.

158
00:11:44.821 --> 00:11:45.953
What did we test?

159
00:11:45.953 --> 00:11:47.005
Nothing, right?

160
00:11:47.005 --> 00:11:51.171
That's why I don't like test coverage
is because it doesn't really tell you

161
00:11:51.171 --> 00:11:51.821
anything.

162
00:11:51.821 --> 00:11:56.954
I could cover this entire application
in five minutes with snapshot tests, it

163
00:11:56.954 --> 00:12:02.647
will show with 100% coverage and I would
have 0% confidence in my tests, right?

164
00:12:02.647 --> 00:12:07.476
Your test are only as useful as like how
much effort and thought you put into them.

165
00:12:07.476 --> 00:12:12.351
Okay, that's enough for me on snapshots.

