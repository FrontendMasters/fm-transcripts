WEBVTT

1
00:00:00.000 --> 00:00:06.310
So, so far all we're testing in this
useBreedList test is an empty array.

2
00:00:08.789 --> 00:00:13.791
Which here carousel,
no carousel, not useBreedList.

3
00:00:13.791 --> 00:00:18.275
That's part of the story, but we want to
test like that it calls the right API

4
00:00:18.275 --> 00:00:20.728
that we get back the right information and

5
00:00:20.728 --> 00:00:25.655
that it presents the user back with the
correct information, if that's the case.

6
00:00:25.655 --> 00:00:30.389
The problem here is that under the hood,
this useBreedList is

7
00:00:30.389 --> 00:00:35.045
using fetchBreedList, and
fetchBreedList is using what?

8
00:00:35.045 --> 00:00:36.503
Fetch.

9
00:00:36.503 --> 00:00:39.561
I don't actually really
want to hit my API, right.

10
00:00:39.561 --> 00:00:42.617
You can imagine a case where like,
everyone's running all their tests and

11
00:00:42.617 --> 00:00:44.521
you're just hammering your production API.

12
00:00:44.521 --> 00:00:46.728
Not a good idea.

13
00:00:46.728 --> 00:00:48.842
It'd be great if we could mock it.

14
00:00:48.842 --> 00:00:52.275
So in general,
I don't suggest mocking too many things.

15
00:00:52.275 --> 00:00:56.734
The one place where I'm like, okay,
you can mock that API request.

16
00:00:56.734 --> 00:01:01.916
I'm okay with you fetch or
mocking fetch, basically.

17
00:01:01.916 --> 00:01:03.309
There's a ton of ways to do this.

18
00:01:03.309 --> 00:01:06.012
I'm just gonna show you
the easy way to mock request.

19
00:01:06.012 --> 00:01:12.573
Just to npm install -D vitest-fetch-mock.

20
00:01:12.573 --> 00:01:19.732
This is very similar to just fetch mock,
0.2.1.

21
00:01:19.732 --> 00:01:23.469
There's other ways to do this,
you can actually just go write a mock for

22
00:01:23.469 --> 00:01:26.474
yourself they're very very
simple pieces of software.

23
00:01:28.730 --> 00:01:31.051
But yolo, I don't like doing it,
so I'm not gonna do it.

24
00:01:31.051 --> 00:01:32.554
And I'm not gonna make you do it.

25
00:01:32.554 --> 00:01:41.206
Okay, inside of test, inside of your
vite.config, Just put setup files.

26
00:01:44.725 --> 00:01:47.670
And we're just gonna make
a setup file really quick.

27
00:01:47.670 --> 00:01:52.118
It's gonna be called ./setupVitest.js.

28
00:01:55.392 --> 00:01:56.358
Okay.

29
00:01:56.358 --> 00:02:00.303
Make a file inside of source called,

30
00:02:00.303 --> 00:02:05.403
as you might have guessed, setupVitest.js.

31
00:02:05.403 --> 00:02:08.971
This is just a file that would get
run before all of your tests get run.

32
00:02:08.971 --> 00:02:11.436
So if you had other
environmental variables to set,

33
00:02:11.436 --> 00:02:12.842
this is where you would do it.

34
00:02:12.842 --> 00:02:16.477
In our particular case,

35
00:02:16.477 --> 00:02:22.884
we're just going to import creatFetchMock

36
00:02:22.884 --> 00:02:27.219
from vitest-fetch-mock.

37
00:02:27.219 --> 00:02:33.909
We're going to import vi from vitest.

38
00:02:37.553 --> 00:02:46.145
There is a const fetchMock
= createFetchMock(vi),

39
00:02:46.145 --> 00:02:50.541
fetchMock.enableMocks.

40
00:02:53.462 --> 00:02:57.969
This is going to now universally enable
mocks on fetch throughout your entire

41
00:02:57.969 --> 00:02:58.881
application.

42
00:02:58.881 --> 00:03:03.210
Your entire test suite is
probably more accurately stated.

43
00:03:03.210 --> 00:03:07.594
I forgot what vi precisely is,
it's the vitest utilities, okay.

44
00:03:07.594 --> 00:03:10.367
So it has things that
createFetchMock goes and

45
00:03:10.367 --> 00:03:12.723
sets all the correct things up for you.

46
00:03:12.723 --> 00:03:15.993
I've never used it directly but
that's exactly what it's doing.

47
00:03:18.487 --> 00:03:22.501
Okay, now we have all that enabled,

48
00:03:22.501 --> 00:03:28.594
we can go back to our tests
here in useBreedList, okay.

49
00:03:28.594 --> 00:03:35.437
Up here next to renderHook, we're going
to grab a function called waitFor,

50
00:03:35.437 --> 00:03:41.032
and then we're going to down here
at the bottom right our test.

51
00:03:41.032 --> 00:03:44.421
So we're gonna write a test,

52
00:03:44.421 --> 00:03:48.769
gives back breeds when given animal.

53
00:03:50.260 --> 00:03:50.972
Okay, and

54
00:03:50.972 --> 00:03:55.730
then we're gonna give a dog which is
going to give us back our function.

55
00:03:55.730 --> 00:04:01.093
This needs to be an async function, okay.

56
00:04:01.093 --> 00:04:06.860
And then just give it a bunch of breeds.

57
00:04:06.860 --> 00:04:08.847
Rather than type all them
I'm just gonna copy and

58
00:04:08.847 --> 00:04:10.498
paste all these breeds that I have here.

59
00:04:10.498 --> 00:04:13.490
But feel free to write your own.

60
00:04:13.490 --> 00:04:17.339
I just grabbed some of them
that I made in the API here so

61
00:04:17.339 --> 00:04:20.862
having to use Bichon Frise and
so on and so forth.

62
00:04:20.862 --> 00:04:26.149
And then with here we're gonna say

63
00:04:26.149 --> 00:04:31.811
fetch.MockResponseOnce, okay.

64
00:04:31.811 --> 00:04:35.847
Here we're just saying next time
fetches called respond with blah.

65
00:04:35.847 --> 00:04:41.934
You can be more specific of like
they must call this particular URL.

66
00:04:41.934 --> 00:04:43.285
We're not gonna be so clever, right.

67
00:04:43.285 --> 00:04:46.079
We're just gonna to say mockResponse,

68
00:04:46.079 --> 00:04:49.458
the next one just blindly
spit this back at them.

69
00:04:49.458 --> 00:04:54.953
Animal, dog and breeds right so
respond with this.

70
00:04:56.402 --> 00:05:00.486
Okay, now we can come up here and
copy and paste this business.

71
00:05:00.486 --> 00:05:03.166
Cuz I don't wanna write all of this again.

72
00:05:04.896 --> 00:05:09.615
And the only difference here is
const result renderHook instead of

73
00:05:09.615 --> 00:05:13.753
giving it an empty string here,
we're gonna give it dog.

74
00:05:13.753 --> 00:05:16.860
Okay, this will give us back our result.

75
00:05:16.860 --> 00:05:21.371
Now we can't just go test this right away
because it's gonna go do fetch, right.

76
00:05:21.371 --> 00:05:23.392
Fetch is not synchronous.

77
00:05:23.392 --> 00:05:24.735
So it's asynchronous.

78
00:05:24.735 --> 00:05:26.615
So we have to wait for it.

79
00:05:26.615 --> 00:05:28.857
Hence waitFor is what we're gonna use.

80
00:05:28.857 --> 00:05:30.893
We're gonna say await waitFor,

81
00:05:30.893 --> 00:05:34.756
then you're gonna give it
a function of what it's waiting on.

82
00:05:34.756 --> 00:05:39.516
So in this case we're gonna give it a test

83
00:05:39.516 --> 00:05:44.422
of expect(result.current[1]).

84
00:05:44.422 --> 00:05:49.733
And if you remember this is a hook,
if we look at let's look at,

85
00:05:49.733 --> 00:05:54.568
let's look at our tests really quick here,
breedList.

86
00:05:54.568 --> 00:05:58.414
The first one is the breed list
the second one is the status.

87
00:05:58.414 --> 00:06:02.815
So we're gonna wait until
the status is success, right.

88
00:06:02.815 --> 00:06:11.796
So let's do that waitFor
result(current [1]) to be success.

89
00:06:15.427 --> 00:06:17.815
So this is gonna wait until
this ends up happening or

90
00:06:17.815 --> 00:06:19.824
until time's out, one of the two things.

91
00:06:21.748 --> 00:06:26.409
And then after that we can say const

92
00:06:26.409 --> 00:06:30.915
breedList = result.current.

93
00:06:32.782 --> 00:06:40.657
And then here I can say
expect(breedList) toEqual(breeds).

94
00:06:47.347 --> 00:06:51.708
Okay, so it's gonna be equal to this,
whatever we got back from the API.

95
00:06:51.708 --> 00:06:57.341
We're gonna expect that to come
backfFrom our useBreedList.

96
00:06:57.341 --> 00:07:02.798
So let's save that let's
look at our tests.

97
00:07:02.798 --> 00:07:05.151
And we got an error, okay,
well that's different.

98
00:07:15.235 --> 00:07:21.054
Well, that is yet a different thing
let's check out what's going on here.

99
00:07:21.054 --> 00:07:26.078
So we have gives back breeds when
given an animal is async function.

100
00:07:26.078 --> 00:07:31.937
Breeds, Fetch mockResponseOnce JSON,
yes that's what it is.

101
00:07:31.937 --> 00:07:35.854
JSON.stringify.

102
00:07:35.854 --> 00:07:42.894
Right this needs to be,
It doesn't give you

103
00:07:42.894 --> 00:07:48.700
back an object it gives you back a string
which then fetch then decodes for you.

104
00:07:48.700 --> 00:07:50.570
There we go.

105
00:07:50.570 --> 00:07:52.276
And now there you go.

106
00:07:52.276 --> 00:07:53.626
That's a passing test.

107
00:07:59.577 --> 00:08:04.167
Okay, so that is how you can
test asynchronous function.

108
00:08:04.167 --> 00:08:08.309
I showed you with regards to hooks and
custom hooks and that kind of stuff.

109
00:08:08.309 --> 00:08:10.550
But that works with components,

110
00:08:10.550 --> 00:08:16.170
that works with anything that you have
to mock fetch with vitest or jest.

111
00:08:16.170 --> 00:08:19.250
We used the vitest mock fetch.

112
00:08:19.250 --> 00:08:23.077
There's also a jest mock fetch
that works precisely the same way.

