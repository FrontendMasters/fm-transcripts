WEBVTT

1
00:00:00.438 --> 00:00:03.176
The next thing that you and
I are gonna do,

2
00:00:03.176 --> 00:00:07.964
this application uses React Query,
we've been doing that for a while.

3
00:00:07.964 --> 00:00:12.312
There's a thing specifically
called React Toolkit Query,

4
00:00:12.312 --> 00:00:14.791
which is inspired by React Query.

5
00:00:14.791 --> 00:00:18.203
I'm gonna say if you're
doing Redux Toolkit,

6
00:00:18.203 --> 00:00:22.050
just go full into it and
also use React Toolkit Query.

7
00:00:25.204 --> 00:00:29.409
So we're going to refactor
our React Toolkit,

8
00:00:29.409 --> 00:00:33.412
sorry, React Query to Redux Toolkit Query.

9
00:00:36.624 --> 00:00:41.671
So first things first, let's make a new

10
00:00:41.671 --> 00:00:47.021
file here and call it petApiService.js.

11
00:00:47.021 --> 00:00:54.509
Here, you're going to import createApi and

12
00:00:54.509 --> 00:01:00.821
fetchBaseQuery from Redux Toolkit.

13
00:01:00.821 --> 00:01:07.606
You're going to export const
petApi is assigned createApi.

14
00:01:09.938 --> 00:01:15.788
If you give it a reducer path,
we're just going to call it petApi.

15
00:01:15.788 --> 00:01:20.469
It uses all these names internally, so
that I can keep track on things and

16
00:01:20.469 --> 00:01:22.018
cache them correctly.

17
00:01:22.018 --> 00:01:24.692
It will be useful once we get
into the Redux dev tool, so

18
00:01:24.692 --> 00:01:28.024
you'll actually be able to follow
along of where things are going.

19
00:01:28.024 --> 00:01:32.751
So it's good to give this a good name,
a descriptive name.

20
00:01:34.879 --> 00:01:37.725
Okay, the baseQuery is going
to be a fetchBaseQuery.

21
00:01:39.343 --> 00:01:43.742
The baseUrl is going to be

22
00:01:43.742 --> 00:01:51.499
http://pets-v2.dev-apis.com.

23
00:01:56.337 --> 00:01:59.541
And then you're gonna even some endpoints.

24
00:01:59.541 --> 00:02:02.964
So if you have a bunch of things
that are based off of one baseQuery,

25
00:02:02.964 --> 00:02:06.464
as in one baseUrl, you just make
those into individual endpoints.

26
00:02:06.464 --> 00:02:10.087
And then if you have two different
API's that you're calling,

27
00:02:10.087 --> 00:02:12.380
you'll make another service, right?

28
00:02:12.380 --> 00:02:16.651
So in this particular case, we only
have one service, one baseUrl here, so

29
00:02:16.651 --> 00:02:18.740
we're just gonna have one service.

30
00:02:18.740 --> 00:02:23.681
But imagine if we have our API endpoint,
and we also have the Spotify endpoint,

31
00:02:23.681 --> 00:02:24.208
right?

32
00:02:24.208 --> 00:02:28.478
We would have two different API
services that we would create.

33
00:02:28.478 --> 00:02:30.011
Okay, and then here,

34
00:02:30.011 --> 00:02:34.700
I'm just gonna describe all of
the endpoints that I'm about to hit.

35
00:02:34.700 --> 00:02:40.234
So this is a function that takes in
a builder and it returns an object.

36
00:02:40.234 --> 00:02:46.257
We're gonna make one called getPet,
which is going to be builder.query,

37
00:02:48.606 --> 00:02:53.693
Another object here, and
the query is going to

38
00:02:53.693 --> 00:02:58.680
be id, And it returns an object.

39
00:02:58.680 --> 00:03:03.201
url: "pets", right, cuz it's the name

40
00:03:03.201 --> 00:03:07.615
of the actual path to the petApi, that is.

41
00:03:07.615 --> 00:03:11.119
And the params, it just takes in the id.

42
00:03:16.020 --> 00:03:21.267
So just to be super clear
of what's happening here,

43
00:03:21.267 --> 00:03:27.229
if I call the getPet API,
it's going to go to this baseUrl,

44
00:03:27.229 --> 00:03:30.569
slash whatever the hell is here,

45
00:03:30.569 --> 00:03:35.725
pets with the query string of the id,
id equals id.

46
00:03:35.725 --> 00:03:40.635
Little indirection there,
I know this is pretty dense,

47
00:03:40.635 --> 00:03:43.921
but that's what's happening here.

48
00:03:43.921 --> 00:03:47.758
And then here,
I can give it a transform response.

49
00:03:49.369 --> 00:03:52.250
So this is actually the raw
response back from the API.

50
00:03:52.250 --> 00:03:55.414
All I wanna store and

51
00:03:55.414 --> 00:04:01.007
use is the response.pets(0).

52
00:04:01.007 --> 00:04:03.188
So if I'm requesting a specific pet,

53
00:04:03.188 --> 00:04:07.346
this is going to take the entire response
that it gets back from the API and

54
00:04:07.346 --> 00:04:10.839
it's gonna give me back just
the first pet, that pet array.

55
00:04:12.207 --> 00:04:17.234
So then now I don't have to do all of the,
if this exists, give me this

56
00:04:17.234 --> 00:04:23.240
kind of logic, it's gonna be the pet,
you don't have to worry too much about it.

57
00:04:23.240 --> 00:04:26.441
Okay, export default or
export const rather,

58
00:04:30.343 --> 00:04:36.858
(useGetPetQuery) = petApi.

59
00:04:42.892 --> 00:04:46.087
Yeah, Redux toolkit/query/react.

60
00:04:46.087 --> 00:04:50.628
Sorry, you have to give
it a little bit more

61
00:04:50.628 --> 00:04:55.178
specific what you're looking for there.

62
00:04:58.563 --> 00:05:01.588
All right,
this one was weird to me as well.

63
00:05:01.588 --> 00:05:06.311
Where the hell does
useGetPetQuery come from?

64
00:05:06.311 --> 00:05:11.411
It's generated by this createApi method,
right?

65
00:05:11.411 --> 00:05:14.673
So it takes the name of my query here,
which is getPet, and

66
00:05:14.673 --> 00:05:17.885
then it puts use in the front,
cuz this is a hook, right?

67
00:05:17.885 --> 00:05:20.097
It makes a custom hook for you.

68
00:05:20.097 --> 00:05:22.361
It puts whatever you call this.

69
00:05:22.361 --> 00:05:28.592
So if I call this use getPetLol, right,
I'd have to put getPetLol there, right?

70
00:05:28.592 --> 00:05:31.809
That's how the name is getting there.

71
00:05:34.431 --> 00:05:37.656
And then query,
it attaches that on the end for you, so

72
00:05:37.656 --> 00:05:39.633
that you know that it's a query.

73
00:05:39.633 --> 00:05:40.922
Okay, is that sufficiently weird for you?

74
00:05:40.922 --> 00:05:46.597
It's sufficiently weird for
me, so here we are.

75
00:05:47.848 --> 00:05:52.920
Okay, let's go put this
into the store now.

76
00:05:55.158 --> 00:06:01.317
All right, so
two things we need to put in here.

77
00:06:01.317 --> 00:06:07.875
One, we're gonna put in the pet,

78
00:06:07.875 --> 00:06:15.419
petAPI from here,
[petApi.reducerPath]:petApi.reducer.

79
00:06:15.419 --> 00:06:16.323
Why this?

80
00:06:16.323 --> 00:06:23.789
The answer is, the docs told me to, so I'm
showing you what the docs told me to do.

81
00:06:23.789 --> 00:06:27.179
But really what they're trying to do here,
if we go back to our,

82
00:06:28.407 --> 00:06:32.820
What did I call it?

83
00:06:32.820 --> 00:06:36.252
PetApi service, yeah, petApiService,
it's just this, right?

84
00:06:36.252 --> 00:06:37.836
So it's actually calling it petApi,

85
00:06:37.836 --> 00:06:40.664
it's just making sure that it's
internally consistent, right?

86
00:06:40.664 --> 00:06:44.967
So this petApi is exactly
what it's putting in store,

87
00:06:44.967 --> 00:06:50.404
in fact to be incredibly clear,
store, and this is petApiService.

88
00:06:50.404 --> 00:06:57.030
So we have petApi,
we have the reducer path here, right?

89
00:06:57.030 --> 00:06:58.582
This is just saying, hey,

90
00:06:58.582 --> 00:07:02.848
make sure that whatever this is putting
out from here is the same over here.

91
00:07:02.848 --> 00:07:05.293
It's being very explicit about that.

92
00:07:05.293 --> 00:07:07.942
Could you put petApi right here?

93
00:07:10.973 --> 00:07:13.554
Yeah, I mean, you could, it's
literally exactly what this is, right?

94
00:07:13.554 --> 00:07:17.837
But it's nice to have it
guarantee be consistent,

95
00:07:17.837 --> 00:07:22.317
cuz now if I decide later that,
yeah, you know what,

96
00:07:22.317 --> 00:07:26.201
I wanted to call this petApiVerCool,
right,

97
00:07:26.201 --> 00:07:32.600
I don't have to go change it in two
places, it just changes automatically.

98
00:07:32.600 --> 00:07:34.028
Okay, make sense?

99
00:07:34.028 --> 00:07:35.680
One more thing here.

100
00:07:35.680 --> 00:07:39.487
This is kind of an optional step,
kind of not.

101
00:07:39.487 --> 00:07:44.341
We're gonna give it a middleware,
and I can get rid of this, so

102
00:07:44.341 --> 00:07:51.915
that you can see everything,
middleware:(getDefault, Middleware).

103
00:07:53.329 --> 00:07:58.287
This is gonna be a function, and
we just want it to return implicitly get.

104
00:07:58.287 --> 00:08:06.718
DefaultMiddleware, call that
function .concat(petApi.middleware)

105
00:08:10.194 --> 00:08:12.271
So what's going on with this?

106
00:08:12.271 --> 00:08:16.323
Redux has this concept of
what's called a middleware,

107
00:08:16.323 --> 00:08:20.386
which is basically,
I dispatch an action to the store.

108
00:08:20.386 --> 00:08:24.015
I can intercept that in a middleware and
do something about it.

109
00:08:24.015 --> 00:08:26.880
You can imagine maybe I'm
dispatching it in one object and

110
00:08:26.880 --> 00:08:29.170
I wanna transform it
into a different object.

111
00:08:29.170 --> 00:08:30.842
A middleware could do that.

112
00:08:30.842 --> 00:08:35.103
You can introduce things like you
want your Redux to be able to handle

113
00:08:35.103 --> 00:08:36.615
observables, right?

114
00:08:36.615 --> 00:08:41.953
So you can catch an observable,
handle it, and

115
00:08:41.953 --> 00:08:47.698
then from there,
dispatch an action to the store.

116
00:08:47.698 --> 00:08:50.522
We're not gonna do anything like that,
in general,

117
00:08:50.522 --> 00:08:53.932
I gonna tell you to not really
worry too much about middlewares.

118
00:08:53.932 --> 00:08:57.427
The only thing that might be kind of
useful is if you want to log what was

119
00:08:57.427 --> 00:09:01.674
happening to your Redux to maybe a server,
you could do that through a middleware.

120
00:09:01.674 --> 00:09:04.082
Kind of weird, but you could do it.

121
00:09:04.082 --> 00:09:05.592
What are we doing here?

122
00:09:05.592 --> 00:09:10.936
We are putting, petApi has this thing
called a middleware, into our Redux here.

123
00:09:10.936 --> 00:09:14.851
What's cool about that is now it's
going to cache everything for us.

124
00:09:14.851 --> 00:09:18.152
So you know how React Query
was caching everything for

125
00:09:18.152 --> 00:09:20.068
us as we were making requests.

126
00:09:20.068 --> 00:09:24.244
This is allowing that to happen
here with React toolkit.

127
00:09:24.244 --> 00:09:26.320
But you have to put
the middleware in here.

128
00:09:26.320 --> 00:09:30.294
If I don't put this middleware in here,
all of this stuff will work, but

129
00:09:30.294 --> 00:09:32.454
I don't think any of the caching will.

130
00:09:32.454 --> 00:09:33.312
Actually, I don't think that's true.

131
00:09:33.312 --> 00:09:36.088
I think the caching actually
still does work, but

132
00:09:36.088 --> 00:09:38.213
there's other things like retries.

133
00:09:38.213 --> 00:09:41.231
It augments the ability of React Toolkit.

134
00:09:41.231 --> 00:09:43.554
In other words, just do it [LAUGH].

135
00:09:49.091 --> 00:09:52.269
Okay, we're really close to
getting this to work now.

136
00:09:52.269 --> 00:09:55.325
It's all ready, we just need to go use it.

137
00:09:55.325 --> 00:09:58.287
So please head over to Details.jsx.

138
00:10:00.128 --> 00:10:03.302
Remove the useQuery import up here.

139
00:10:03.302 --> 00:10:09.135
Remove fetchPet, And

140
00:10:09.135 --> 00:10:18.498
we're going to import the useGetPetQuery
from a petApi service.

141
00:10:21.960 --> 00:10:24.895
We're going to delete this thing,
the results here.

142
00:10:26.936 --> 00:10:33.237
And we're just gonna say const isLoading

143
00:10:33.237 --> 00:10:39.365
data: pet = useGetPetQuery with the id

144
00:10:49.122 --> 00:10:51.720
And where do I declare pet?

145
00:10:51.720 --> 00:10:52.671
Down here.

146
00:10:52.671 --> 00:10:54.447
And then you can drop
this line right here.

147
00:10:59.483 --> 00:11:02.947
Okay, and then here where it says
results.isLoading, just delete that, so

148
00:11:02.947 --> 00:11:04.628
it just uses the isLoading from that.

149
00:11:10.926 --> 00:11:13.536
All right, that is it.

150
00:11:13.536 --> 00:11:18.297
So now, this is going to make requests
through our petApi service using RTK.

151
00:11:18.297 --> 00:11:23.396
When I say RTK, Redux Toolkit, right, RTK.

152
00:11:23.396 --> 00:11:24.296
That's what everyone calls it.

153
00:11:24.296 --> 00:11:30.103
You'll see it always written like that,
RTK, Redux Toolkit.

154
00:11:30.103 --> 00:11:35.930
We're using RTK to call that petApi
service, which will get us our pet for us.

155
00:11:40.804 --> 00:11:43.744
Okay, so looks like we broke.

156
00:11:43.744 --> 00:11:44.690
What happened?

157
00:11:44.690 --> 00:11:47.720
inject.endpoints is not a function.

158
00:11:47.720 --> 00:11:54.090
createApi, fetchBaseQuery,
export const petApi, createApi.

159
00:11:54.090 --> 00:11:56.983
reducerPath looks good.

160
00:11:56.983 --> 00:12:01.928
baseQuery: fetchBaseQuery, baseUrL,

161
00:12:01.928 --> 00:12:05.780
yeah, that looks all good to me.

162
00:12:05.780 --> 00:12:09.559
endPoints, I think this is a lowercase p.

163
00:12:17.585 --> 00:12:18.206
That was it.

164
00:12:18.206 --> 00:12:25.418
Okay, sorry, lowercase p,
line six here, endpoints.

165
00:12:32.802 --> 00:12:34.794
Okay, any questions about that?

166
00:12:34.794 --> 00:12:36.341
Can you spell?

167
00:12:36.341 --> 00:12:37.402
Apparently I cannot.

168
00:12:41.171 --> 00:12:44.417
Same sort of thing here, if I search for
bird, it'll go get that.

169
00:12:44.417 --> 00:12:48.241
But if I go back and search for blank,
now, it's not gonna load, it's just gonna

170
00:12:48.241 --> 00:12:51.864
instantly give it back to me, cuz it's
gonna be cached directly in my Redux.

171
00:12:58.309 --> 00:13:03.559
Cool, so what's nice now is,
if I go back to my petApiService here,

172
00:13:03.559 --> 00:13:07.736
adding more endpoints to
this is very simple, right?

173
00:13:07.736 --> 00:13:11.037
Cuz I already have all of
the base machinery in place.

174
00:13:11.037 --> 00:13:16.728
All I have to do if I wanted to add
another one is just say getBreeds, And

175
00:13:16.728 --> 00:13:20.266
basically do the exact same
pattern over again, builder.

176
00:13:26.183 --> 00:13:33.378
GetBreeds here, sorry,
builder.query, give it an object.

177
00:13:33.378 --> 00:13:36.804
Query: animal,

178
00:13:40.099 --> 00:13:45.321
And the url is going to be breeds.

179
00:13:47.632 --> 00:13:54.104
And the params is going to be animal,
like that.

180
00:13:54.104 --> 00:13:59.127
And then you're gonna give it
a transform response as well,

181
00:13:59.127 --> 00:14:04.357
and that is going to be response
is back to response dot breeds.

182
00:14:04.357 --> 00:14:08.634
Boom, now we have
a getBreeds function here.

183
00:14:08.634 --> 00:14:15.665
And here,
you just put down here useGetBreedsQuery.

184
00:14:20.389 --> 00:14:24.578
How easy was that to create a whole
custom hook for one API response?

185
00:14:24.578 --> 00:14:26.329
Pretty compelling.

186
00:14:26.329 --> 00:14:32.679
We'll do search, Builder.query.

187
00:14:38.245 --> 00:14:41.328
So the query, I'm gonna to do
this a little bit different.

188
00:14:41.328 --> 00:14:46.852
We're actually gonna take
an entire function here, so query,

189
00:14:46.852 --> 00:14:53.620
and that's gonna be a function that
takes in {animal, location, breed}.

190
00:14:53.620 --> 00:14:56.961
Like I said, actually,
it's the same, never mind.

191
00:14:56.961 --> 00:15:05.518
And that's gonna give back url of pets,
params of,

192
00:15:08.327 --> 00:15:12.973
{animal, location, breed}.

193
00:15:12.973 --> 00:15:18.109
And then the transform response of

194
00:15:18.109 --> 00:15:23.430
response back to response.pets.

195
00:15:23.430 --> 00:15:28.018
And then now we can say,

196
00:15:28.018 --> 00:15:31.694
useSearchQuery.

197
00:15:38.536 --> 00:15:39.719
And there you go.

198
00:15:39.719 --> 00:15:43.755
Now, we have our entire API
here just described like this.

199
00:15:48.477 --> 00:15:52.795
So let's go to useBreedList.

200
00:15:56.138 --> 00:15:58.831
We can get rid of this, we can get
rid of everything here at the top.

201
00:16:05.209 --> 00:16:12.593
And you're going to import useGetBreeds,
Query.

202
00:16:12.593 --> 00:16:13.539
There you go.

203
00:16:16.055 --> 00:16:17.133
And get rid of that.

204
00:16:21.909 --> 00:16:27.519
And delete this line, const results,
const { data: breeds,

205
00:16:29.402 --> 00:16:38.553
IsLoading } = useGetBreedsQuery animal,

206
00:16:41.371 --> 00:16:46.302
And I have a skip if you have no animal,
right?

207
00:16:46.302 --> 00:16:51.191
So if someone is trying to call
useBreedList without an animal,

208
00:16:51.191 --> 00:16:55.092
you just wanna skip the query altogether,
right?

209
00:16:55.092 --> 00:17:01.140
So you can give it this skip parameter,
right?

210
00:17:01.140 --> 00:17:04.452
Which allows you to say, hey,
if you got no animal back,

211
00:17:04.452 --> 00:17:06.868
then don't make any requests to the API.

212
00:17:06.868 --> 00:17:11.747
You don't need to,
which I think is pretty cool as well.

213
00:17:11.747 --> 00:17:16.010
Then you just say, if no animal return,

214
00:17:19.269 --> 00:17:24.337
It'll say empty array here and loaded.

215
00:17:25.655 --> 00:17:30.075
Otherwise, return Breeds.

216
00:17:34.415 --> 00:17:40.434
And then, You'd probably wanna have

217
00:17:40.434 --> 00:17:45.259
more robust statuses, but for now, we're
just gonna say, if it's loading, loading,

218
00:17:45.259 --> 00:17:51.264
otherwise loaded, Right?

219
00:17:54.447 --> 00:17:57.873
More or less the same as what we
had before using React Query, but

220
00:17:57.873 --> 00:17:59.721
now we're using our API service.

221
00:18:02.722 --> 00:18:06.233
So let's go make sure that this
works the way that we want it to.

222
00:18:06.233 --> 00:18:10.419
And if I say there's no animal there,
but if I put dog,

223
00:18:10.419 --> 00:18:13.156
we get this back, that looks good.

224
00:18:13.156 --> 00:18:15.878
If I go to cat, that's the back.

225
00:18:15.878 --> 00:18:19.905
And then if I go back to dog,
everything works, cool.

226
00:18:19.905 --> 00:18:25.165
One more,
let's go do SearchParams.jsx, and

227
00:18:25.165 --> 00:18:30.587
we are going to,
Get rid of useQuery up here.

228
00:18:30.587 --> 00:18:35.236
We're going to import useSearchQuery,

229
00:18:35.236 --> 00:18:39.496
and then the useQuery call down here.

230
00:18:39.496 --> 00:18:44.451
We're just gonna say, const data: pets

231
00:18:44.451 --> 00:18:49.271
= useSearchQuery with SearchParams.

232
00:18:49.271 --> 00:18:51.953
That's it, that's all we need to do here.

233
00:18:51.953 --> 00:18:53.870
And we can get rid of that.

234
00:18:56.714 --> 00:19:00.043
And get rid of all my
console logging as well.

235
00:19:02.100 --> 00:19:06.064
I mean, that got even simpler, right?

236
00:19:06.064 --> 00:19:12.801
So I I don't know, this is probably the
most compelling part about Redux toolkit.

237
00:19:12.801 --> 00:19:15.960
These search custom hooks
that it generates for

238
00:19:15.960 --> 00:19:18.175
you are really quite nice to use.

239
00:19:22.489 --> 00:19:23.571
What is this mad about?

240
00:19:23.571 --> 00:19:25.596
Is it mad about something?

241
00:19:25.596 --> 00:19:28.713
Yeah, we don't need fetchSearch anymore.

242
00:19:28.713 --> 00:19:32.371
All right, so, what did we do now?

243
00:19:32.371 --> 00:19:35.949
&gt;&gt; You have to define pets.

244
00:19:40.330 --> 00:19:42.426
You have to reassign pets.

245
00:19:42.426 --> 00:19:42.926
&gt;&gt; Yeah.

246
00:19:47.367 --> 00:19:52.008
If there's nothing there,
you have to say, pets = pets.

247
00:19:54.370 --> 00:20:00.165
Cuz you need it to be
an empty array if it's, So

248
00:20:00.165 --> 00:20:02.513
all I did here is I changed const to let.

249
00:20:02.513 --> 00:20:08.103
And then if pets is an empty array,
Or if pets doesn't exist,

250
00:20:08.103 --> 00:20:12.476
then make it an empty array because this
always assumes that they're down here,

251
00:20:12.476 --> 00:20:14.362
that this is gonna be empty array.

