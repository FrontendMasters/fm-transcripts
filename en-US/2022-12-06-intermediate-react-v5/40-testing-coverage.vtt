WEBVTT

1
00:00:00.000 --> 00:00:03.190
Let's go do coverage now that
we've been talking about it.

2
00:00:03.190 --> 00:00:05.449
I think it's interesting
to look at coverage,

3
00:00:05.449 --> 00:00:07.431
it's also cheap now to look at coverage.

4
00:00:07.431 --> 00:00:12.330
It used to be hard to set up Istanbul,
it's now very easy to set it up so

5
00:00:12.330 --> 00:00:16.980
I think it's useful for you to look at but
don't let it be gospel.

6
00:00:16.980 --> 00:00:21.691
That's why I don't like companies to say,
we maintain 70% test coverage, silly.

7
00:00:21.691 --> 00:00:25.521
It's a silly number to try and
chase, right?

8
00:00:25.521 --> 00:00:29.893
But it is useful to look at the report and
see like, okay, here's a bunch of things

9
00:00:29.893 --> 00:00:33.353
that I find very important about
my app that are not being covered.

10
00:00:33.353 --> 00:00:37.273
That is very useful information for
you to have.

11
00:00:37.273 --> 00:00:39.835
So let's go ahead and set that up.

12
00:00:39.835 --> 00:00:44.489
We're gonna go back to our
package.json momentarily.

13
00:00:44.489 --> 00:00:53.087
We're gonna add another script here
under vi test called test:coverage.

14
00:00:53.087 --> 00:00:57.028
And I'll use vitest--coverage I believe.

15
00:00:57.028 --> 00:01:00.024
Yes, yes, yes.

16
00:01:00.024 --> 00:01:04.354
If you can spell, that was was a rough
go of trying to spell coverage.

17
00:01:04.354 --> 00:01:06.811
All right, there we go, coverage.

18
00:01:06.811 --> 00:01:08.002
Here we go.

19
00:01:08.002 --> 00:01:14.620
So stop this and then I want you
to run mpm run test:coverage.

20
00:01:14.620 --> 00:01:16.898
It's going to ask you,
do you wanna install something?

21
00:01:16.898 --> 00:01:20.658
And just say, yes.

22
00:01:20.658 --> 00:01:24.328
Just like that, do you want to
install the test coverage-c8?

23
00:01:24.328 --> 00:01:25.301
The answer is yes.

24
00:01:29.458 --> 00:01:34.814
Okay, it's gonna give me this really
nice little output here of like,

25
00:01:34.814 --> 00:01:39.567
here's all of the files that you
are covering with your tests.

26
00:01:39.567 --> 00:01:42.910
Here's how many percentage of
statements that you're covering.

27
00:01:42.910 --> 00:01:43.719
How many branches?

28
00:01:43.719 --> 00:01:44.522
How many functions?

29
00:01:44.522 --> 00:01:45.728
How many lines?

30
00:01:45.728 --> 00:01:50.619
In this particular you
can see that in catch by.

31
00:01:50.619 --> 00:01:51.590
What is this?

32
00:01:51.590 --> 00:01:52.508
Use breed list.

33
00:01:52.508 --> 00:01:53.260
&gt;&gt; Fetch.

34
00:01:53.260 --> 00:01:55.476
&gt;&gt; Fetch breed list, thank you.

35
00:01:55.476 --> 00:01:58.036
Lines 11 through 13 are not covered.

36
00:01:58.036 --> 00:02:01.600
So fetch breed list here 11 through 13.

37
00:02:01.600 --> 00:02:05.842
We don't cover that this error
gets thrown correctly, right?

38
00:02:05.842 --> 00:02:06.964
Probably okay.

39
00:02:09.525 --> 00:02:13.881
So that's pretty cool but
if you go here and

40
00:02:13.881 --> 00:02:17.997
there is a coverage source/coverage.

41
00:02:17.997 --> 00:02:20.770
And I think there's an index.html in here,
yeah?

42
00:02:20.770 --> 00:02:23.224
So open that in your browser.

43
00:02:23.224 --> 00:02:26.941
This will actually give
you a nice interface.

44
00:02:26.941 --> 00:02:30.613
So I can actually go in here and
click in this and I can see, okay,

45
00:02:30.613 --> 00:02:32.790
this is what's not covered, right?

46
00:02:32.790 --> 00:02:35.117
This was covered one time.

47
00:02:35.117 --> 00:02:37.461
This was covered two times.

48
00:02:37.461 --> 00:02:41.179
If we go back and
look at something like carousel,

49
00:02:41.179 --> 00:02:44.198
you can see this line was hit 20 times.

50
00:02:44.198 --> 00:02:47.497
That's what those Xs mean,
how many times these were hit.

51
00:02:49.822 --> 00:02:52.914
So on and so forth.

52
00:02:52.914 --> 00:02:55.002
So you can see all of
these files are covered.

53
00:02:55.002 --> 00:02:56.940
It's giving me a really
rosy result right now but

54
00:02:56.940 --> 00:03:00.020
it's not showing me all the files in
my project that are not covered, right?

55
00:03:00.020 --> 00:03:01.733
So you can see here for example,

56
00:03:01.733 --> 00:03:05.744
modal.jsx is totally just omitted here
cuz I don't have any tests for it.

57
00:03:05.744 --> 00:03:08.574
But of the things that I
have written tests for

58
00:03:08.574 --> 00:03:12.162
I have 98% test coverage
from my statements, right?

59
00:03:12.162 --> 00:03:15.694
And a 100% function coverage and
so on and so forth.

60
00:03:18.144 --> 00:03:22.788
So if you've ever used Istanbul or NYC
which are relatively the same thing for

61
00:03:22.788 --> 00:03:28.019
the most part, this should look familiar,
this is called an L-curve report, LCOV.

62
00:03:28.019 --> 00:03:33.138
I do not know what it stands for.

63
00:03:33.138 --> 00:03:39.154
This is actually being generated by
a different test coverage tool called c8.

64
00:03:39.154 --> 00:03:43.693
I would suggest now if you're on
Istanbul or NYC to just move to c8.

65
00:03:43.693 --> 00:03:47.737
C8 is actually the built in test
coverage tool to Node.js so

66
00:03:47.737 --> 00:03:49.970
it's actually built into node.

67
00:03:49.970 --> 00:03:53.285
It's much faster than Istanbul.

68
00:03:53.285 --> 00:03:57.000
Istanbul is single threaded and
sequential is very slow.

69
00:03:57.000 --> 00:04:00.406
They made NYC which then
became multi-threaded or

70
00:04:00.406 --> 00:04:05.086
at least could be run in parallel is
maybe a better way of putting that.

71
00:04:05.086 --> 00:04:09.867
And then now there is c8 which is
actually built directly into Node.js

72
00:04:09.867 --> 00:04:14.261
which is way faster cuz it's in C or
C++ or something like that.

73
00:04:14.261 --> 00:04:20.432
But you can see here it's compatible
with test reporters for Istanbul.

74
00:04:20.432 --> 00:04:25.542
So the rest of your pilot pipeline
will look exactly the same.

75
00:04:27.090 --> 00:04:29.009
Okay, make sense?

76
00:04:29.009 --> 00:04:32.738
Any questions about that?

77
00:04:32.738 --> 00:04:34.941
Like I said, this is a very useful thing.

78
00:04:34.941 --> 00:04:36.700
For me let's say I had like.

79
00:04:39.371 --> 00:04:40.994
I don't know,
got looking here at fetch me this.

80
00:04:40.994 --> 00:04:43.940
Let's say that this era
was very important.

81
00:04:43.940 --> 00:04:47.433
I could go in here and look at my
test coverage and say like, hey,

82
00:04:47.433 --> 00:04:49.327
this is critical functionality.

83
00:04:49.327 --> 00:04:54.625
Now I know I need to write another test
to cover this piece of functionality

84
00:04:54.625 --> 00:05:00.280
that lets me know, am I covering the
things that I find important about my app?

