WEBVTT

1
00:00:00.271 --> 00:00:02.791
We are going to get into TypeScript, and

2
00:00:02.791 --> 00:00:05.841
specifically React with
TypeScript together.

3
00:00:05.841 --> 00:00:09.735
So this is definitely not going to
be a full intro to TypeScript, or

4
00:00:09.735 --> 00:00:13.222
even really a full intro to React and
TypeScript together.

5
00:00:13.222 --> 00:00:16.745
Mostly what we're gonna talk about
is we're just going to talk about,

6
00:00:16.745 --> 00:00:20.928
we have this existing application, what's
it like to migrate that to TypeScript?

7
00:00:20.928 --> 00:00:24.648
And along the way, you'll pick up some
TypeScript things here and there.

8
00:00:24.648 --> 00:00:27.382
But specifically,
before we got too much into this,

9
00:00:27.382 --> 00:00:31.515
I wanna call out two courses that if
you're interested in React and TypeScript,

10
00:00:31.515 --> 00:00:33.614
one, first take Mike North's course.

11
00:00:33.614 --> 00:00:36.992
Mike North, he's my coworker,
he was my coworker at LinkedIn, and

12
00:00:36.992 --> 00:00:40.212
now we just hired him to be on my
team at Stripe, which is awesome.

13
00:00:40.212 --> 00:00:44.072
He has this course here,
TypeScript Fundamentals,

14
00:00:44.072 --> 00:00:46.827
take that one first, it's good one.

15
00:00:46.827 --> 00:00:51.157
And then after that, take Steve's course,
which is React and TypeScript together, so

16
00:00:51.157 --> 00:00:52.669
Steve gets much more in depth.

17
00:00:52.669 --> 00:00:56.797
This is a five-hour course just
on React and TypeScript together.

18
00:00:56.797 --> 00:01:02.174
So if that's really what your jam is,
that's your progression forward from here.

19
00:01:02.174 --> 00:01:07.007
That being said, I wanted to show you
what our Adopt Me pet application looks

20
00:01:07.007 --> 00:01:09.966
like if you migrate it
totally to TypeScript.

21
00:01:09.966 --> 00:01:13.555
So this is kind of just a useful
exercise for you to witness like,

22
00:01:13.555 --> 00:01:14.954
I have a Javascript app.

23
00:01:14.954 --> 00:01:18.223
What's it like going from
a Javascript app to a TypeScript app?

24
00:01:18.223 --> 00:01:23.595
Okay, I love TypeScript, just for
the record, the VS Code team and

25
00:01:23.595 --> 00:01:27.755
the TypeScript team at
Microsoft are the same team.

26
00:01:27.755 --> 00:01:31.126
So I used to work with all
the TypeScript people, and so,

27
00:01:31.126 --> 00:01:34.156
I'm always really happy
when I get to work with it.

28
00:01:34.156 --> 00:01:38.610
Okay, so we're gonna do this, we're
gonna do npm install typescript@4.8.4.

29
00:01:38.610 --> 00:01:42.146
Make sure you're starting with
a fresh copy of Adopt Me.

30
00:01:42.146 --> 00:01:46.070
All right, so
I'm just making a copy of that

31
00:01:46.070 --> 00:01:51.175
14-context directory,
it's this one here, yeah.

32
00:01:51.175 --> 00:01:54.611
And then I'm gonna go into the directory,

33
00:01:54.611 --> 00:02:00.539
I'm going to remove Node modules, and
reinstall all of my Node modules.

34
00:02:02.691 --> 00:02:07.704
Okay, and then I should be ready to go.

35
00:02:07.704 --> 00:02:11.369
So I have a fresh copy of my project.

36
00:02:13.689 --> 00:02:18.880
And then, now I'm gonna say npm

37
00:02:18.880 --> 00:02:25.422
install -D typescript@4.8.4.

38
00:02:28.763 --> 00:02:34.762
Cool, next thing I wanna do
here is I'm gonna run npx tsc,

39
00:02:34.762 --> 00:02:39.298
which is the TypeScript compiler, right?

40
00:02:39.298 --> 00:02:43.910
And then I wanna run that with --init,
just like we did for

41
00:02:43.910 --> 00:02:48.070
Tailwind, it's gonna start
a whole project for us.

42
00:02:48.070 --> 00:02:52.763
You'll see that it's going to generate
here a TypeScript config for us here, and

43
00:02:52.763 --> 00:02:53.860
it's quite long.

44
00:02:56.028 --> 00:02:59.620
So you can go through, and
there's a bunch of stuff you can change.

45
00:02:59.620 --> 00:03:01.232
Or you can just come over here,

46
00:03:01.232 --> 00:03:04.587
I have this little minimalistic
one here that we're gonna use.

47
00:03:07.682 --> 00:03:13.938
So target ES2022, so
the latest version of ECMAScript,

48
00:03:13.938 --> 00:03:19.490
the flavor of JSX that we're
gonna use is react-jsx.

49
00:03:19.490 --> 00:03:22.178
There's several versions of this,
I do not remember what the difference is.

50
00:03:22.178 --> 00:03:25.381
We used to do preserve here,
I think, right?

51
00:03:25.381 --> 00:03:27.782
But now we have to do react-jsx, and

52
00:03:27.782 --> 00:03:31.817
I'm trying to remember exactly
what that does differently.

53
00:03:31.817 --> 00:03:34.711
I think it means that we don't
have to import React anymore,

54
00:03:34.711 --> 00:03:36.084
it's something like that.

55
00:03:36.084 --> 00:03:39.140
So this is the newer way of doing it.

56
00:03:39.140 --> 00:03:42.729
Modules, we're doing the new
way of doing modules,

57
00:03:42.729 --> 00:03:46.418
we're doing Node modules,
esModuleInterop, yes.

58
00:03:46.418 --> 00:03:50.640
Strict mode, if you're gonna
migrate a whole project to React,

59
00:03:50.640 --> 00:03:53.036
you wanna have strict mode enabled.

60
00:03:53.036 --> 00:03:56.964
If you're just starting, let's say you
have a huge codebase, and you're just

61
00:03:56.964 --> 00:04:01.090
gonna piecemeal start doing little pieces
of it, then you can turn strict mode off.

62
00:04:01.090 --> 00:04:05.388
And then, yeah,
we don't wanna check our Node modules, so

63
00:04:05.388 --> 00:04:08.102
that's basically everything here.

64
00:04:08.102 --> 00:04:13.602
So nice little minimalistic
TypeScript config here.

65
00:04:16.328 --> 00:04:18.010
Okay, save that, cool.

66
00:04:20.254 --> 00:04:27.777
So next thing that we need,
is we need the types for React.

67
00:04:27.777 --> 00:04:31.490
React is not itself written in TypeScript,
I believe it might be written in Flow, or

68
00:04:31.490 --> 00:04:34.177
it might just be written in JavaScript,
I can't remember.

69
00:04:34.177 --> 00:04:38.652
In any case, it does not have

70
00:04:38.652 --> 00:04:42.941
types that ship with it, so

71
00:04:42.941 --> 00:04:48.348
we have to say down here npm install

72
00:04:48.348 --> 00:04:54.876
-D @types/react@18.0.21,

73
00:04:54.876 --> 00:05:01.601
and @types/react-dom@18.0.6

74
00:05:04.626 --> 00:05:09.927
So if you're not familiar with this,
we just installed these types files here.

75
00:05:09.927 --> 00:05:12.108
So basically,
what TypeScript is gonna say, okay,

76
00:05:12.108 --> 00:05:14.101
I can see that React
doesn't have types with it.

77
00:05:14.101 --> 00:05:17.540
So what I'm gonna go do, is I'm going
to go look in your Node directory and

78
00:05:17.540 --> 00:05:19.377
see if you have any of these types file.

79
00:05:19.377 --> 00:05:22.697
There's a massive project
called Definitely Typed,

80
00:05:22.697 --> 00:05:25.439
where if a library
doesn't have types in it,

81
00:05:25.439 --> 00:05:29.420
because it's not written in TypeScript or
something like that.

82
00:05:29.420 --> 00:05:31.645
Someone later can go and
write types for it, and

83
00:05:31.645 --> 00:05:35.382
then you can install them separately,
which is exactly what we've done here.

84
00:05:35.382 --> 00:05:38.952
And for example, we don't have
to install one for react-query,

85
00:05:38.952 --> 00:05:42.013
we don't have to install them for
react-router-dom,

86
00:05:42.013 --> 00:05:44.965
because both of these
are written in TypeScript as is.

87
00:05:44.965 --> 00:05:48.709
Therefore we don't need additional types
because they are inherently already typed.

88
00:05:51.354 --> 00:05:52.290
Cool.

89
00:05:55.470 --> 00:05:59.514
So, I guess if you're not
familiar with TypeScript, one,

90
00:05:59.514 --> 00:06:03.561
I'm impressed you've gotten
this far into an intermediate

91
00:06:03.561 --> 00:06:08.267
React class with not having been
exposed to it, so congratulations.

92
00:06:08.267 --> 00:06:13.905
But basically, we have Prettier
to handle all of our formatting,

93
00:06:13.905 --> 00:06:19.757
we have ESLint to handle all of our
stylistic choices about our code.

94
00:06:19.757 --> 00:06:22.156
We'll eventually have unit testing
to test all the integrations.

95
00:06:22.156 --> 00:06:25.743
And TypeScript is gonna follow
all of the types of our code.

96
00:06:25.743 --> 00:06:31.641
I mean, the classic example
is that you can't do things

97
00:06:31.641 --> 00:06:37.423
like const x = 5, and
then x.toUppercase, right?

98
00:06:37.423 --> 00:06:41.813
People like to say that TypeScript
prevents things like this, which is true,

99
00:06:41.813 --> 00:06:42.819
it does, right?

100
00:06:42.819 --> 00:06:47.048
I don't really have this problem too much,
to be totally frank with you.

101
00:06:47.048 --> 00:06:51.905
What is much more helpful is it's
basically live documentation about what

102
00:06:51.905 --> 00:06:53.379
your code looks like.

103
00:06:53.379 --> 00:06:57.699
So every time that you do something
like hey, I have this usebreedList here,

104
00:06:57.699 --> 00:07:01.560
you can see that I have this animal: any,
and all this kind of stuff.

105
00:07:01.560 --> 00:07:04.246
This is actually all generated from
TypeScript running on your code.

106
00:07:04.246 --> 00:07:06.052
So VS Code, no matter what you're doing,

107
00:07:06.052 --> 00:07:08.119
is running TypeScript on
your code all the time.

108
00:07:08.119 --> 00:07:09.910
And it generates all these
kind of call signatures.

109
00:07:09.910 --> 00:07:12.542
So you can see this useBreedList,
because it's one that I wrote,

110
00:07:12.542 --> 00:07:15.183
doesn't really have too much
interesting information about it.

111
00:07:15.183 --> 00:07:16.706
But if I go look at useState,

112
00:07:16.706 --> 00:07:19.755
you can see actually you have
a ton of information there.

113
00:07:19.755 --> 00:07:23.909
That I have this initial state that's
a string, I have a React dispatch,

114
00:07:23.909 --> 00:07:27.063
which has a set action state,
which is of a string type.

115
00:07:27.063 --> 00:07:30.171
It has a bunch of interesting
information about it,

116
00:07:30.171 --> 00:07:34.070
which is coming from those types
that we just installed, right?

117
00:07:34.070 --> 00:07:38.547
This is great, but right now we
only have it for our library code.

118
00:07:38.547 --> 00:07:43.465
I love TypeScript, because now, once we go
do all of the typing for all of our code,

119
00:07:43.465 --> 00:07:46.930
we're gonna start seeing all of that for
our code as well.

120
00:07:46.930 --> 00:07:50.548
So like I said, it's like living
documentation of the intention that

121
00:07:50.548 --> 00:07:52.280
you had when you wrote this code.

122
00:07:52.280 --> 00:07:56.169
Right now, I know I provide useBreedList
at animal to any, what is any?

123
00:07:56.169 --> 00:07:57.353
We don't know, right?

124
00:07:57.353 --> 00:08:01.144
But after we're done with this, we're
gonna see if it's of type animal, which is

125
00:08:01.144 --> 00:08:04.844
gonna be an enumerated type, which is
gonna be only one small subset of animals.

126
00:08:04.844 --> 00:08:09.248
And so, if I try and
put something in here, like horse, right?

127
00:08:09.248 --> 00:08:13.675
Well, horse is an animal, but
it's not one that our API supports.

128
00:08:13.675 --> 00:08:16.575
So we're actually gonna have
TypeScript catch that error for us,

129
00:08:16.575 --> 00:08:17.886
which I think is pretty cool.

130
00:08:17.886 --> 00:08:20.372
That's my pitch on why I like TypeScript.

