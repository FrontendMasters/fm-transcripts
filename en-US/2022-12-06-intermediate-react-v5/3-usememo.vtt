WEBVTT

1
00:00:00.000 --> 00:00:06.060
The next thing we're gonna talk about is
two performance optimizations for React.

2
00:00:06.060 --> 00:00:08.982
One of them is called useMemo and
one of them is called useCallback.

3
00:00:08.982 --> 00:00:11.534
They're extremely similar.

4
00:00:11.534 --> 00:00:17.367
Infact, useCallback is just
basically a permutation of useMemo.

5
00:00:17.367 --> 00:00:22.101
You can actually implement
useCallback using useMemo,

6
00:00:22.101 --> 00:00:25.953
fun fact, but
we're not gonna do that today.

7
00:00:25.953 --> 00:00:29.690
So you can see here I have this little
animation of this red ball going back

8
00:00:29.690 --> 00:00:30.311
and forth.

9
00:00:30.311 --> 00:00:35.267
And let's actually just go directly
to Stack, let's look at it on there.

10
00:00:38.975 --> 00:00:43.195
Okay, So

11
00:00:43.195 --> 00:00:47.700
the way that this is working
is it's just doing Math.sin,

12
00:00:47.700 --> 00:00:51.767
right, which is like a wave
that goes back and forth.

13
00:00:51.767 --> 00:00:57.938
And then it's requesting AnimationFrame,
and it's animating to set the left +1,

14
00:00:57.938 --> 00:01:01.755
and then it's using sin to go back and
forth, right?

15
00:01:01.755 --> 00:01:05.922
So this is updating several
times a second, and

16
00:01:05.922 --> 00:01:12.393
it's moving itself 0.05 every single
time that it does that, okay?

17
00:01:12.393 --> 00:01:16.146
We also have this very
expensiveMathOperation here.

18
00:01:16.146 --> 00:01:20.606
And you can just take me at my word that
expensiveMathOperation is expensive.

19
00:01:20.606 --> 00:01:24.936
But just so you know,
it's just the Fibonacci sequence.

20
00:01:24.936 --> 00:01:28.704
If you don't know what the Fibonacci
sequence is, don't worry about it, but

21
00:01:28.704 --> 00:01:31.973
just know that at the end of the day,
this is what, 1.5 million.

22
00:01:31.973 --> 00:01:37.328
This is the number one added
to itself 1.5 million times,

23
00:01:37.328 --> 00:01:39.960
which is dumb and expensive.

24
00:01:39.960 --> 00:01:44.486
But you can imagine this would be
like calculating some formula or

25
00:01:44.486 --> 00:01:49.670
something like that where it would be
some sort of expensive computation,

26
00:01:49.670 --> 00:01:53.230
that's what we're meant
to try to simulate here.

27
00:01:53.230 --> 00:01:57.380
So going back to our useMemo code,
if I don't do this useMemo here and

28
00:01:57.380 --> 00:02:00.458
I just directly calculate
this every single time,

29
00:02:00.458 --> 00:02:05.134
that's gonna cause this our little
animation here to be very janky, right?

30
00:02:05.134 --> 00:02:06.460
And we don't want that,

31
00:02:06.460 --> 00:02:09.625
we want that to have a nice
smooth animation back and forth.

32
00:02:09.625 --> 00:02:16.674
So just to prove my point here,
let's copy this.

33
00:02:16.674 --> 00:02:20.544
And we're just gonna say,
expensive computation.

34
00:02:23.817 --> 00:02:30.057
And now if I save this, look at how
janky our animation gets, right?

35
00:02:30.057 --> 00:02:32.762
It gets really slow.

36
00:02:32.762 --> 00:02:36.244
Because now every single
time that ball moves,

37
00:02:36.244 --> 00:02:41.569
it's added one to itself 1.5 million
times, which is wild, right?

38
00:02:41.569 --> 00:02:47.376
And this just gets worse as we
increase the count here, right?

39
00:02:47.376 --> 00:02:50.121
It's just slowing to a crawl.

40
00:02:50.121 --> 00:02:53.671
So if we go back to this,

41
00:02:57.460 --> 00:03:01.685
I think I probably made my
browser a bit slow now as well.

42
00:03:01.685 --> 00:03:04.928
So let's just refresh the page totally,

43
00:03:09.214 --> 00:03:14.945
Part of it is that I haven't cleaned
up my animation frames as well.

44
00:03:14.945 --> 00:03:20.319
But you can see now with using
this useMemo, it's nice and crisp.

45
00:03:20.319 --> 00:03:25.838
And if I hit plus here, notice it'll
stop for a second while it recalculates.

46
00:03:25.838 --> 00:03:29.246
But once it's done, then it goes
back to being nice and quick again.

47
00:03:29.246 --> 00:03:33.635
So that's what useMemo does, you give it
a function here to how to recalculate

48
00:03:33.635 --> 00:03:36.572
something and
then you tell it when to recalculate.

49
00:03:36.572 --> 00:03:41.308
This is the exact same kind of array
that you give to effects, is like, hey,

50
00:03:41.308 --> 00:03:44.060
only recalculate when count is different.

51
00:03:44.060 --> 00:03:44.581
I mean,

52
00:03:44.581 --> 00:03:49.573
the only way that we make count different
is by clicking on the plus button here.

53
00:03:49.573 --> 00:03:50.960
Does that make sense?

54
00:03:53.785 --> 00:03:57.565
So in particular when you're
performance sensitive, right,

55
00:03:57.565 --> 00:04:02.605
when I start seeing jank here, that's when
I know, okay, this is a good opportunity

56
00:04:02.605 --> 00:04:07.452
to useMemo to prevent that kinda jank from
happening inside of my React components

