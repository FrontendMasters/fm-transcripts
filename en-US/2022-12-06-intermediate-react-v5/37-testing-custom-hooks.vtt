WEBVTT

1
00:00:00.184 --> 00:00:02.348
Let's go test a custom hook.

2
00:00:04.633 --> 00:00:08.200
Part of the reasons writing
custom hooks is great is because

3
00:00:08.200 --> 00:00:10.491
they become individually testable.

4
00:00:10.491 --> 00:00:14.300
Whereas if it's just like an effect
in the middle of a component,

5
00:00:14.300 --> 00:00:16.182
it's really hard to test that.

6
00:00:16.182 --> 00:00:17.996
So we have useBreedList here,

7
00:00:17.996 --> 00:00:21.833
so the old way of writing these
kind of tests with useBreedList and

8
00:00:21.833 --> 00:00:26.189
things like that, you actually have
to like fake the component, right?

9
00:00:26.189 --> 00:00:28.911
And I can show you how to do that
really quick if you want to.

10
00:00:28.911 --> 00:00:30.426
Let's just do it.

11
00:00:30.426 --> 00:00:33.666
Right, create a new file here,

12
00:00:33.666 --> 00:00:38.715
we're gonna call it useBreedList.test.jsx.

13
00:00:38.715 --> 00:00:43.425
This one actually has to be JSX
because we're gonna write JSX in it.

14
00:00:43.425 --> 00:00:48.590
All right, so import ( expect,

15
00:00:48.590 --> 00:00:52.654
test ) from 'vitest'.

16
00:00:52.654 --> 00:01:00.846
import ( render ) from our
testing library/react.

17
00:01:00.846 --> 00:01:05.042
import (queryClient,

18
00:01:05.042 --> 00:01:10.038
QueryClientProvider) from

19
00:01:10.038 --> 00:01:15.239
@tanstack/react-query.

20
00:01:15.239 --> 00:01:21.170
And import finally,
usebreedList from '../usebreedList'.

21
00:01:24.074 --> 00:01:26.967
We're gonna have to make our default
query client here really quick.

22
00:01:26.967 --> 00:01:32.044
const query client,
this is just like a React router dom where

23
00:01:32.044 --> 00:01:38.013
React query requires to have a query
client and a query client provider.

24
00:01:38.013 --> 00:01:41.250
So we have to kind of fake that for it.

25
00:01:41.250 --> 00:01:46.009
So queryClient is
basically gonna be exactly

26
00:01:46.009 --> 00:01:50.901
what we do in our app.jsx
= new QueryClient.

27
00:01:50.901 --> 00:01:56.595
defaultOptions, queries, staleTime,

28
00:01:56.595 --> 00:02:01.499
Infinity, cacheTime, Infinity,

29
00:02:01.499 --> 00:02:06.400
we are gonna add one more thing to it,

30
00:02:06.400 --> 00:02:09.733
which is retry: false.

31
00:02:09.733 --> 00:02:13.482
By default, React query will try
three times and then give up,

32
00:02:13.482 --> 00:02:15.402
we don't want that in our test.

33
00:02:15.402 --> 00:02:20.105
If we're testing, if it fails, we want it
to just fail, we don't want it to retry.

34
00:02:22.322 --> 00:02:27.818
Okay, function, we're gonna write
this function called getBreedList.

35
00:02:31.627 --> 00:02:33.035
And it's gonna take an animal.

36
00:02:33.035 --> 00:02:38.007
We have this problem we're
testing reacthooks.hooks,

37
00:02:38.007 --> 00:02:41.659
it only works inside of
a React component so

38
00:02:41.659 --> 00:02:46.638
how can we test,
we use breed list outside of a component?

39
00:02:46.638 --> 00:02:51.923
To answer your question, you can not,
it only works inside of a React component,

40
00:02:51.923 --> 00:02:54.619
so we are going to make a React component.

41
00:02:54.619 --> 00:02:59.079
So we're gonna say let list, and

42
00:02:59.079 --> 00:03:04.178
then we're gonna read write function

43
00:03:04.178 --> 00:03:09.755
TestComponent and say list is assigned,

44
00:03:09.755 --> 00:03:16.307
useBreedList(animal) and then return null.

45
00:03:16.307 --> 00:03:18.377
It's kind of cheating, right?

46
00:03:18.377 --> 00:03:20.500
This is technically a valid
React component, right?

47
00:03:20.500 --> 00:03:23.123
And then all we gotta
have to do is render it.

48
00:03:23.123 --> 00:03:29.369
So we're gonna say render,
queryClientProvider,

49
00:03:29.369 --> 00:03:33.534
client is assigned queryClient and

50
00:03:33.534 --> 00:03:39.515
then we're just going to
render a test component.

51
00:03:42.880 --> 00:03:47.383
Right, this is gonna go through all the
lifecycle, it's gonna call useBreedList,

52
00:03:47.383 --> 00:03:49.641
and then it's going to save the list here.

53
00:03:49.641 --> 00:03:53.181
So then all we have to do
down here is return list.

54
00:03:56.475 --> 00:03:58.173
Kind of silly, right?

55
00:03:58.173 --> 00:04:03.047
It's a bit of like
sacrificing the right goat.

56
00:04:03.047 --> 00:04:07.847
But now that we've done all this,
we can write a little test down here.

57
00:04:07.847 --> 00:04:12.804
gives an empty list with no animal

58
00:04:12.804 --> 00:04:17.238
provided, async function.

59
00:04:25.339 --> 00:04:32.009
Okay, and then all we have to
say is const breedList and

60
00:04:32.009 --> 00:04:37.814
status = getBreedList with nothing, right?

61
00:04:37.814 --> 00:04:41.967
And then we're gonna say

62
00:04:41.967 --> 00:04:50.081
expect(breedList).toHaveLength(0).

63
00:04:50.081 --> 00:04:54.676
expect(status).toBe of loading,
I don't remember what

64
00:04:54.676 --> 00:04:59.812
the status is supposed to be, but
loading sounds appropriate to me.

65
00:05:03.661 --> 00:05:06.149
Lo and behold, it works, right?

66
00:05:06.149 --> 00:05:07.978
If I say 1 here, it's gonna crash.

67
00:05:07.978 --> 00:05:09.917
If I say 0, it's gonna work.

68
00:05:17.471 --> 00:05:21.975
We had to write 37 lines of code to test,

69
00:05:21.975 --> 00:05:27.016
eighth.grade, it's a pretty simple hook.

70
00:05:27.016 --> 00:05:31.389
And once you write something like this,
you can test any hook this way, right?

71
00:05:34.364 --> 00:05:39.761
And this is how we used to have
to write things like this.

72
00:05:39.761 --> 00:05:46.436
Luckily, now with testing library,
you can actually get something out of it.

73
00:05:48.711 --> 00:05:53.423
That allows you to test hooks directly
without having to do all this faking

74
00:05:53.423 --> 00:05:53.963
stuff.

75
00:05:57.180 --> 00:05:59.601
So let's try giving that a shot.

76
00:06:02.703 --> 00:06:06.849
So we're going to expect in tests render,
we got that, queryCient,

77
00:06:06.849 --> 00:06:09.888
queryClientProvider, we
need all of this stuff.

78
00:06:09.888 --> 00:06:15.595
You do need the queryClient, you can
delete all this get brainless stuff.

79
00:06:21.275 --> 00:06:25.265
Okay, and then instead of doing it,
we'll just rewrite this test totally.

80
00:06:27.166 --> 00:06:32.398
Now we can say const (result)
is assigned renderHook.

81
00:06:34.535 --> 00:06:40.729
We got renderHook from testing library,
so instead of render, we want renderHook,

82
00:06:40.729 --> 00:06:46.331
this is relatively new, this is new
since I last taught the course, I think.

83
00:06:49.738 --> 00:06:54.681
And you just give it a function
of what you're trying to

84
00:06:54.681 --> 00:06:59.844
get out right, so
this is all we're gonna need for that.

85
00:07:04.023 --> 00:07:06.908
And then we do have to give it a wrapper,
right?

86
00:07:10.644 --> 00:07:14.883
So this is gonna be
a function with children

87
00:07:20.673 --> 00:07:25.633
And this is where we can give
it QueryClientProvider with

88
00:07:25.633 --> 00:07:28.124
a queryClient is assigned.

89
00:07:28.124 --> 00:07:29.674
queryClient.

90
00:07:31.248 --> 00:07:34.831
And you just give it children
in the middle of that there.

91
00:07:37.469 --> 00:07:41.999
Okay, all of this rigmarole
will end up with result and

92
00:07:41.999 --> 00:07:46.743
result will be whatever you
expected back from the hook.

93
00:07:46.743 --> 00:07:50.813
So now I can say const (breedList,

94
00:07:50.813 --> 00:07:55.570
status) is assigned result.current.

95
00:07:55.570 --> 00:08:04.000
And I can say expect
(breedList).toHaveLength0,

96
00:08:04.000 --> 00:08:07.408
toHaveLength0, and

97
00:08:07.408 --> 00:08:12.975
expect(status).toBeLoading.

98
00:08:15.202 --> 00:08:19.344
So all right, we fail, what happened here?

99
00:08:24.454 --> 00:08:27.520
No query client set, did I not set that?

100
00:08:31.787 --> 00:08:35.103
Did you install a dependency?

101
00:08:35.103 --> 00:08:36.964
&gt;&gt; For the render hook?

102
00:08:36.964 --> 00:08:37.949
&gt;&gt; Yeah.

103
00:08:37.949 --> 00:08:39.701
&gt;&gt; No.
So it's actually,

104
00:08:39.701 --> 00:08:42.713
it's built into testing library React now.

105
00:08:42.713 --> 00:08:46.198
&gt;&gt; You didn't have to install
testing library/reacthooks.

106
00:08:46.198 --> 00:08:51.878
&gt;&gt; That is the old one,
that one does not work with React 18.

107
00:08:54.071 --> 00:08:58.239
That is what version seven of
this course used to teach.

108
00:08:58.239 --> 00:09:02.299
useBreedList, no query, client sets.

109
00:09:02.299 --> 00:09:06.953
So, that's the part that I don't
know why it's not unhappy about,

110
00:09:06.953 --> 00:09:08.728
because it is, it there.

111
00:09:08.728 --> 00:09:14.160
queryClientProvider, queryClient,
queryClient.

112
00:09:14.160 --> 00:09:18.661
It's not queryClient,
sorry it's just client.

113
00:09:18.661 --> 00:09:20.170
Here we go, sorry.

114
00:09:20.170 --> 00:09:25.163
So I had here on line 19,
I had queryClient like this,

115
00:09:25.163 --> 00:09:29.105
it's not queryClient, it is just client.

116
00:09:31.216 --> 00:09:34.444
And that's all I needed, good.

