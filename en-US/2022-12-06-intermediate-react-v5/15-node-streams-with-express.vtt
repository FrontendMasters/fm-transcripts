WEBVTT

1
00:00:00.033 --> 00:00:03.643
All right, let's go on node server.

2
00:00:03.643 --> 00:00:06.662
This is gonna be outside of source.

3
00:00:08.352 --> 00:00:11.791
So here in the root directory, right,

4
00:00:11.791 --> 00:00:17.040
a server.js We are gonna be

5
00:00:17.040 --> 00:00:22.101
doing this in the E6 modules which can be
kind of a pain with node but it is fine.

6
00:00:22.101 --> 00:00:24.047
Import express from express.

7
00:00:26.345 --> 00:00:29.492
Import fs from fs.

8
00:00:29.492 --> 00:00:33.050
Import path from path.

9
00:00:34.420 --> 00:00:36.653
Bear with me there's a decent
amount of typing here.

10
00:00:36.653 --> 00:00:42.517
Import fileurlToPath to path from url,

11
00:00:42.517 --> 00:00:48.898
and import renderApp from source slash,

12
00:00:48.898 --> 00:00:58.220
sorry, we actually need
./dist/server/serverApp.js.

13
00:00:58.220 --> 00:01:03.101
Now, this doesn't exist yet,
right, we need to build it.

14
00:01:03.101 --> 00:01:08.216
Before we run the server,
we have to run npm run build : server and

15
00:01:08.216 --> 00:01:10.820
then we can run npm run start, but

16
00:01:10.820 --> 00:01:15.489
we can't import the jsx file directly,
it has to be built.

17
00:01:18.554 --> 00:01:23.792
Okay, const dirname,
because we are in ESM modules with

18
00:01:23.792 --> 00:01:30.026
node dirname doesn't exist,
which is a constant annoyance to me.

19
00:01:30.026 --> 00:01:35.616
So we're gonna say past
der name fileTourlPath,

20
00:01:35.616 --> 00:01:38.419
import metadata.url.

21
00:01:40.350 --> 00:01:45.245
This is a very weird thing, but
basically if you're used to writing node,

22
00:01:45.245 --> 00:01:48.990
this is how you generate
what was .__dirname before.

23
00:01:48.990 --> 00:01:50.656
If this is unfamiliar with you,

24
00:01:50.656 --> 00:01:54.494
just know that this dirname is now
whatever directory we're in, right?

25
00:01:54.494 --> 00:01:59.787
So it's gonna be, yeah, whatever
directory in our project that we're in

26
00:02:01.707 --> 00:02:04.898
Const PORT, this is what
the port we're gonna listen in.

27
00:02:04.898 --> 00:02:11.418
Either process.env.PORT, this is just
a convention for cloud computing.

28
00:02:13.213 --> 00:02:17.530
So if something passes in a PORT,
we'll use that for our PORT,

29
00:02:17.530 --> 00:02:20.877
otherwise we'll use PORT 3001 by default.

30
00:02:20.877 --> 00:02:29.602
const html=fs.readFileSync.

31
00:02:31.947 --> 00:02:38.104
Path.resolve, dirname

32
00:02:38.104 --> 00:02:43.422
and ./dist/client

33
00:02:43.422 --> 00:02:50.424
/index.html.toString.

34
00:02:50.424 --> 00:02:56.550
So what this is gonna do is our project
is going to build out an HTML file.

35
00:02:56.550 --> 00:02:59.960
We're gonna go read that HTML file because
we need all the paths in there, right?

36
00:02:59.960 --> 00:03:01.498
We need Where the CSS is,

37
00:03:01.498 --> 00:03:06.274
where the JavaScript is cuz they have
like all these hashes attached to them.

38
00:03:06.274 --> 00:03:10.800
And so we don't know what they are in
advance, so we have to do this part to

39
00:03:10.800 --> 00:03:14.305
go get the proper paths for
all those different things.

40
00:03:14.305 --> 00:03:17.021
In other words,
we can't just use the source file,

41
00:03:17.021 --> 00:03:21.531
because it's not gonna be clientApp.jsx at
the end, it's gonna be some hashed named

42
00:03:21.531 --> 00:03:27.099
JavaScript, Okay,
I'm gonna split it into two

43
00:03:27.099 --> 00:03:32.152
parts cuz when a user makes a request
I'm gonna give them the head first.

44
00:03:32.152 --> 00:03:35.054
So looking at my index.html again.

45
00:03:35.054 --> 00:03:41.635
When a user loads my page, immediately we
can flush out to them all of this, right?

46
00:03:41.635 --> 00:03:47.238
Which is good because then they
can start loading all the CSS.

47
00:03:47.238 --> 00:03:51.640
And spoiler alert, they actually move
the JavaScript up here as well for you.

48
00:03:51.640 --> 00:03:55.280
So they can start loading all
the JavaScript, which is great, right?

49
00:03:55.280 --> 00:03:57.580
So while they're parsing all this,
they're loading all this stuff.

50
00:03:57.580 --> 00:04:00.620
And then we can be running all of our
server side rendering in the background.

51
00:04:00.620 --> 00:04:01.919
So multiple things are happening at once.

52
00:04:01.919 --> 00:04:05.370
So we're giving them the best
experience that we possibly can.

53
00:04:07.171 --> 00:04:10.128
So that's why I'm spreading it.
I'm just gonna split it into parts.

54
00:04:10.128 --> 00:04:14.189
The first part, this part and
the second part, this part.

55
00:04:14.189 --> 00:04:15.913
So I can split it on what?

56
00:04:17.340 --> 00:04:18.587
Not rendered, right?

57
00:04:18.587 --> 00:04:21.594
So I'm gonna just
literally split it on that.

58
00:04:22.926 --> 00:04:27.320
Html.split, Not rendered.

59
00:04:29.929 --> 00:04:34.934
Now, typically, I would imagine most
people would probably do something like,

60
00:04:37.142 --> 00:04:40.354
That's probably a more robust way
of doing it, but I'm lazy and

61
00:04:40.354 --> 00:04:41.554
I'm not gonna do that.

62
00:04:41.554 --> 00:04:43.824
I'm just gonna do not render
cuz it's already there.

63
00:04:45.814 --> 00:04:48.706
Okay, so that's parts.

64
00:04:48.706 --> 00:04:51.281
Now let's make a really basic expressApp.

65
00:04:51.281 --> 00:04:54.739
If this is not familiar to you,
it's totally fine,

66
00:04:54.739 --> 00:04:56.793
this is not an Express course.

67
00:04:59.087 --> 00:05:04.516
App.use, /assets,

68
00:05:06.469 --> 00:05:12.233
express.static, (path.resolve).

69
00:05:12.233 --> 00:05:19.118
This is just serving all the static
assets that we need to do,

70
00:05:19.118 --> 00:05:23.575
dirname./dist/client/assets.

71
00:05:23.575 --> 00:05:28.401
This will serve all of our images,
our CSS or JavaScript, all that stuff.

72
00:05:31.313 --> 00:05:32.368
Did I import express there?

73
00:05:32.368 --> 00:05:36.981
I didn't write, yeah, sorry,
that's app=express or

74
00:05:36.981 --> 00:05:41.372
the other way around, Okay,

75
00:05:44.455 --> 00:05:51.438
And then here's the magic,
what you've been waiting for, app.use.

76
00:05:51.438 --> 00:05:56.228
We're basically saying on
anything that's not served by

77
00:05:56.228 --> 00:05:59.755
a static asset, let react handle,okay?

78
00:05:59.755 --> 00:06:01.427
Request and response.

79
00:06:06.100 --> 00:06:06.899
So what did I say?

80
00:06:06.899 --> 00:06:11.126
The very first thing is we're just gonna

81
00:06:11.126 --> 00:06:15.983
flush them the header, res.writeparts0.

82
00:06:15.983 --> 00:06:18.577
Immediately flush them
everything that's in the head.

83
00:06:20.721 --> 00:06:26.408
Then const stream = renderApp,

84
00:06:29.769 --> 00:06:33.869
Again, this is the app that we
got here from dist serverApp.js.

85
00:06:36.143 --> 00:06:40.892
We're gonna give it req.url, And

86
00:06:40.892 --> 00:06:44.333
this object of onShellReady,

87
00:06:48.421 --> 00:06:53.150
Stream.pipe res,

88
00:06:55.132 --> 00:06:58.431
Okay, onShellError,

89
00:07:02.871 --> 00:07:04.984
Do error handling here.

90
00:07:04.984 --> 00:07:09.884
This would be,
Log it out to your error service,

91
00:07:09.884 --> 00:07:14.098
log it out to your, I don't know,
whatever logging service you're using.

92
00:07:14.098 --> 00:07:17.743
I'm not gonna do anything here because
we're probably taking too long on

93
00:07:17.743 --> 00:07:18.462
this anyway.

94
00:07:18.462 --> 00:07:22.170
So anyway, that's what
onShellError you would do there.

95
00:07:22.170 --> 00:07:24.482
And then all onShellready,

96
00:07:24.482 --> 00:07:29.695
this is basically everything has happened,
so we''re done.

97
00:07:29.695 --> 00:07:36.362
So this is last thing to write,
res.write parts[1].

98
00:07:36.362 --> 00:07:38.725
So this basically mean
everything is been out,

99
00:07:38.725 --> 00:07:41.455
cuz remember React is gonna
give it to incrementally.

100
00:07:41.455 --> 00:07:44.859
So it gonna give you one piece, and
another, and another piece, and

101
00:07:44.859 --> 00:07:45.690
another piece.

102
00:07:45.690 --> 00:07:49.115
onAllReady is basically all right
everything is done now, right, so

103
00:07:49.115 --> 00:07:50.053
we're good to go.

104
00:07:50.053 --> 00:07:55.809
We can write the tail of it and then
we can close the request with res.end.

105
00:07:59.879 --> 00:08:06.803
And then on error like an on an actual
error, We can console, log that out.

106
00:08:15.091 --> 00:08:18.520
Okay, so that's all of that.

107
00:08:18.520 --> 00:08:25.488
Lastly thing,
we'll say is console.log, Listening on

108
00:08:25.488 --> 00:08:33.848
http://localhost:, PORT.

109
00:08:33.848 --> 00:08:38.552
I like to do this so then I can command
click in my vs code terminal and

110
00:08:38.552 --> 00:08:40.830
it'll take me directly there.

111
00:08:42.216 --> 00:08:50.717
And app.listen (PORT).

112
00:08:50.717 --> 00:08:54.371
Okay, so stream.pipe.

113
00:08:54.371 --> 00:08:59.082
This is the important thing here, stream
we're getting back from a 

114
00:08:59.082 --> 00:09:01.964
renderToPipeableStream which is
a known datatype streams.

115
00:09:01.964 --> 00:09:06.098
When we put this together basically
saying, the response object and

116
00:09:06.098 --> 00:09:09.233
the React stream are being
connected to each other so

117
00:09:09.233 --> 00:09:13.239
that whatever is coming out of React
is going straight to the user.

118
00:09:13.239 --> 00:09:17.158
That is exactly what
this does right there.

119
00:09:17.158 --> 00:09:21.802
If you have more questions about stream
datatypes, I'm pretty sure Scott's course

120
00:09:21.802 --> 00:09:25.293
has got to talk about it, so
watch Scott's course on Node.js.

121
00:09:25.293 --> 00:09:30.441
There is one thing that you might consider
doing if SEO is really important to you,

122
00:09:30.441 --> 00:09:34.917
which I mentioned to many of you it is,
rendering things to stream can be

123
00:09:34.917 --> 00:09:38.588
a problem because to Google,
it looks like you're slow.

124
00:09:38.588 --> 00:09:41.898
Cuz it's worried about, as a crawler,
getting everything all at once.

125
00:09:41.898 --> 00:09:45.178
So what you might do here is,

126
00:09:45.178 --> 00:09:49.701
if it is the crawler, do nothing here.

127
00:09:49.701 --> 00:09:55.118
And then onAllReady, which basically
means everything is already,

128
00:09:55.118 --> 00:09:59.170
you would say something like,
if it is the crawler,

129
00:10:02.081 --> 00:10:04.790
Then you would do this here.

130
00:10:04.790 --> 00:10:08.227
Cuz once you have the,
whole thing here on, onAllReady,

131
00:10:08.227 --> 00:10:13.150
this would just dump everything all at
once cuz everything would be ready, right?

132
00:10:13.150 --> 00:10:17.963
So it'll maintain that back pressure and
then you can just dump it out all at once.

133
00:10:17.963 --> 00:10:20.475
General gist of how you would handle that.

134
00:10:23.621 --> 00:10:28.651
Okay, so
let's make sure I'm not out of my mind.

135
00:10:28.651 --> 00:10:32.272
That's always a possibility npm run.

136
00:10:32.272 --> 00:10:33.853
You wanna run buildclient.

137
00:10:36.268 --> 00:10:38.697
You can see here I got a bunch
of stuff output there.

138
00:10:38.697 --> 00:10:45.539
I'm gonna do npm run build-server.

139
00:10:45.539 --> 00:10:50.122
Got a bunch of stuff coming out here for
the server assets, cool.

140
00:10:50.122 --> 00:10:56.958
And now I can say npm run start, and
I have a server running on 3001.

141
00:11:00.617 --> 00:11:02.130
Might have an error, no.

142
00:11:06.771 --> 00:11:07.569
There we go.

143
00:11:07.569 --> 00:11:08.662
I don't know what's going on there.

144
00:11:14.904 --> 00:11:19.665
So, one of my favorite things to do here
is to look at the page source cuz that'll

145
00:11:19.665 --> 00:11:22.239
tell you what it's getting on first load.

146
00:11:22.239 --> 00:11:26.822
You can see now it's getting a bunch
of this stuff on first page load,

147
00:11:26.822 --> 00:11:32.375
like all of the various different animals
and the select and everything like that.

148
00:11:32.375 --> 00:11:37.075
But notice on the first load we're
getting no pets found, right?

149
00:11:37.075 --> 00:11:40.347
That makes sense it's not doing
any Ajax on our server, right,

150
00:11:40.347 --> 00:11:42.903
it's just gonna render
out the very first thing.

151
00:11:42.903 --> 00:11:47.906
So if I refresh here, Notice that
we get no pets found immediately.

152
00:11:47.906 --> 00:11:51.676
There's no loading once it's there, right?

153
00:11:51.676 --> 00:11:57.851
We're getting an immediately
loaded out the first set of HTML.

154
00:11:57.851 --> 00:11:59.450
So this is what I was talking about.

155
00:11:59.450 --> 00:12:03.129
You're gonna get that first date
loaded immediately for that user, and

156
00:12:03.129 --> 00:12:06.155
then it's goinna start making
all the AJAX calls, right?

157
00:12:06.155 --> 00:12:07.589
Then it's gonna start loading
all that kind of stuff.

158
00:12:10.162 --> 00:12:11.260
It's make sense.

159
00:12:12.670 --> 00:12:17.947
It's a lot of math like machinery to plug
together, but it's pretty cool, I think.

160
00:12:17.947 --> 00:12:21.832
It's always really hard to tell because
we're doing it all local development,

161
00:12:21.832 --> 00:12:23.716
right, and so there's no round trip,

162
00:12:23.716 --> 00:12:26.761
our little round trip is just
electrons in our laptop, right?

163
00:12:26.761 --> 00:12:30.711
But this can make a big difference when if
someone's coming from India to US East,

164
00:12:30.711 --> 00:12:32.669
right, that can make a big difference.

165
00:12:33.783 --> 00:12:37.000
&gt;&gt; Is there a way that
you can simulate that?

166
00:12:37.000 --> 00:12:40.525
&gt;&gt; Yeah, I mean,
&gt;&gt; Your servers, Docker containers.

167
00:12:40.525 --> 00:12:41.527
&gt;&gt; Certainly you can do that.

168
00:12:41.527 --> 00:12:42.675
You can certainly slow it down that way.

169
00:12:42.675 --> 00:12:47.261
The easiest way always is if
I go to the Network here,

170
00:12:47.261 --> 00:12:50.913
you can always choose throttling here and

171
00:12:50.913 --> 00:12:55.413
you can put yourself on,
I'm on Firefox, again.

172
00:12:55.413 --> 00:13:01.750
But you can put yourself on good three or
a regular 3G, right, and I refresh.

173
00:13:01.750 --> 00:13:06.176
Now Firefox is gonna make it seem
like everything's going a lot slower.

174
00:13:08.003 --> 00:13:08.901
S o I use that quite a bit.

175
00:13:08.901 --> 00:13:09.935
And if you don't use it,

176
00:13:09.935 --> 00:13:12.415
you should look at your app on
on various different speeds.

177
00:13:12.415 --> 00:13:15.806
You should also look at your
analytics to see what devices and

178
00:13:15.806 --> 00:13:18.742
what speeds people
are accessing your computer on.

179
00:13:18.742 --> 00:13:20.780
So then you really know who to target.

