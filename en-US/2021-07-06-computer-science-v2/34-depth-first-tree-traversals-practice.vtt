WEBVTT

1
00:00:00.000 --> 00:00:02.303
So you're gonna go over
here to code sandbox.

2
00:00:05.336 --> 00:00:07.260
This is in tree traversals.

3
00:00:08.740 --> 00:00:12.090
We're gonna do the depth
first traversals first here.

4
00:00:12.090 --> 00:00:19.399
You have three methods here
that I need you to code up.

5
00:00:19.399 --> 00:00:23.930
And they're all extremely similar in
terms of what code, they are doing.

6
00:00:25.640 --> 00:00:30.581
My code here just to make
sure each one of these I

7
00:00:30.581 --> 00:00:35.536
have taking, 1,2,4,5 lines of code.

8
00:00:35.536 --> 00:00:37.060
Each one of these is five lines of code.

9
00:00:39.140 --> 00:00:43.070
They're essentially the same code
just slightly in different orders.

10
00:00:44.290 --> 00:00:45.720
Okay, you have a tree here.

11
00:00:48.570 --> 00:00:51.319
Each one has a value a left child and
a right child.

12
00:00:51.319 --> 00:00:54.650
The right child might be null and
the left child might be null.

13
00:00:57.710 --> 00:01:00.100
And these are the numbers that
you expect to get out of them.

14
00:01:05.704 --> 00:01:07.680
So there's gonna be recursive methods.

15
00:01:07.680 --> 00:01:10.450
And again,
they're all gonna look really similar.

16
00:01:10.450 --> 00:01:13.630
You're just actually gonna shift
one line for each one of these.

17
00:01:13.630 --> 00:01:19.129
So you're gonna say,
first thing base case if no node,

18
00:01:19.129 --> 00:01:26.506
return array, and I am going to,
make this not auto refresh, there we go.

19
00:01:26.506 --> 00:01:34.220
We're gonna say array.push node dot value.

20
00:01:36.380 --> 00:01:40.760
Then array equals pre-order traverse.

21
00:01:43.930 --> 00:01:46.683
Node dot left array.

22
00:01:49.112 --> 00:01:54.396
Array equals pre order traverse node

23
00:01:54.396 --> 00:01:59.517
dot right, array, return alright

24
00:02:03.193 --> 00:02:05.435
So.

25
00:02:10.004 --> 00:02:12.800
This is it for preorder traverse.

26
00:02:15.200 --> 00:02:21.099
So basically saying, if I have no node,
so if I call this like a empty node or

27
00:02:21.099 --> 00:02:25.423
a null node, then do nothing,
just return the array.

28
00:02:27.814 --> 00:02:30.180
I push in the value.

29
00:02:30.180 --> 00:02:33.173
And then I call the pre order
traversal on the left node,

30
00:02:33.173 --> 00:02:36.690
and I call the pre order
traverse on the right node.

31
00:02:36.690 --> 00:02:38.640
And then at the end of this,
I just return the array.

32
00:02:43.592 --> 00:02:47.470
So the other two in order
as you might imagine.

33
00:02:47.470 --> 00:02:49.010
So first of all, let's.

34
00:02:50.560 --> 00:02:54.200
Change those to be in order traverse so
they're calling a correct method.

35
00:02:54.200 --> 00:02:57.502
As you might imagine,
I just move when I do the push.

36
00:03:00.740 --> 00:03:03.060
That's it, that's the whole thing.

37
00:03:04.800 --> 00:03:09.265
One more time post-order traverse this
one's really gonna shock you of how

38
00:03:09.265 --> 00:03:09.900
it works.

39
00:03:12.550 --> 00:03:17.450
So we're gonna copy and paste this,
paste that so that's postorder traverse.

40
00:03:17.450 --> 00:03:20.516
And what you do here is you
just move it down one line,

41
00:03:20.516 --> 00:03:23.467
that was it not as it's not
gonna shock you at all.

42
00:03:23.467 --> 00:03:26.184
Or maybe we'll I don't know
he might be easily surprised.

43
00:03:28.913 --> 00:03:33.160
That's it, that's all the traversing
that's we're gonna do here.

44
00:03:33.160 --> 00:03:34.630
Let's make sure that my code works here.

45
00:03:34.630 --> 00:03:40.935
We're gonna run our tests again and
here in traverses.

46
00:03:40.935 --> 00:03:45.165
Traversals our,
I need to change the skip down here.

47
00:03:47.345 --> 00:03:55.255
Run this again, Then traversals
depth first reversals solved.

48
00:03:57.885 --> 00:04:04.014
&gt;&gt; And can we do a quick like pseudocode
step through of like just one of them.

49
00:04:04.014 --> 00:04:09.325
Just to kind of get, visual light,
you have a three node tree,

50
00:04:09.325 --> 00:04:14.110
just something quick,
to see how that works.

51
00:04:14.110 --> 00:04:18.900
&gt;&gt; All right, here's our three node
tree that I just invented now.

52
00:04:21.162 --> 00:04:27.210
In a pre-order traversal.

53
00:04:29.120 --> 00:04:31.340
The first thing you gonna do,
is gonna cut on the root note, right?

54
00:04:31.340 --> 00:04:32.440
Cuz that's all you have, right?

55
00:04:32.440 --> 00:04:34.168
Is the root note of the tree.

56
00:04:34.168 --> 00:04:36.053
You're gonna have your array, right,

57
00:04:36.053 --> 00:04:39.090
that you're trying to get all
of the numbers gathered up into.

58
00:04:39.090 --> 00:04:42.471
In a pre-order traversal the first
thing you're gonna do is add 8 to

59
00:04:42.471 --> 00:04:43.680
the array, right?

60
00:04:43.680 --> 00:04:49.220
Pre, we're gonna add it to the array
first, then you call it on the left node.

61
00:04:49.220 --> 00:04:52.090
So you call preorder
traversal on the left node.

62
00:04:52.090 --> 00:04:55.190
Again, first thing you need to do
here is call, you're gonna add three.

63
00:04:55.190 --> 00:04:57.700
So now we have eight comma three.

64
00:04:57.700 --> 00:04:58.750
We'll call on the left node.

65
00:04:58.750 --> 00:05:02.407
That's no.we'll call it on the right node,
that's no, and

66
00:05:02.407 --> 00:05:05.720
then this returns right, so
returns back to eight here.

67
00:05:07.130 --> 00:05:09.300
We're then going to call
pre order traversal.

68
00:05:09.300 --> 00:05:14.014
On 10, right,
that's gonna attend to the array.

69
00:05:14.014 --> 00:05:16.209
It's gonna call on the left node on
the right node, those are both nodes.

70
00:05:16.209 --> 00:05:19.919
So we end up with eight 3,

71
00:05:19.919 --> 00:05:25.151
10.In order traversal,again,

72
00:05:25.151 --> 00:05:30.213
you would do it with, you're gonna

73
00:05:30.213 --> 00:05:35.291
call it, in order traversal on 3.

74
00:05:35.291 --> 00:05:37.490
You're gonna call it on its left no,
which is no.

75
00:05:37.490 --> 00:05:39.223
Then you're gonna add three to the array,

76
00:05:39.223 --> 00:05:41.970
then we're gonna call it on
the right node, nothing there.

77
00:05:41.970 --> 00:05:44.390
So we have three, this returns up here.

78
00:05:44.390 --> 00:05:47.283
This is now totally processed
that it's left sub-tree, so

79
00:05:47.283 --> 00:05:49.050
we're gonna add eight to the array.

80
00:05:49.050 --> 00:05:53.166
So we're gonna have three comma eight,
and then we're gonna add the right or

81
00:05:53.166 --> 00:05:56.161
we're gonna call in order
traversal on the right node.

82
00:05:56.161 --> 00:05:58.033
So we're going to call
it on its left child.

83
00:05:58.033 --> 00:06:02.610
No, we're gonna add 10 to the array,
so we're gonna have three 8, 10.

84
00:06:02.610 --> 00:06:07.030
Then we're going to go into call it
on its right node, nothing there.

85
00:06:07.030 --> 00:06:08.840
Okay, one more time.

86
00:06:08.840 --> 00:06:12.257
We're gonna do it with
post order traversal.

87
00:06:12.257 --> 00:06:16.140
Here, we're gonna call
Postal retroversal on 8.

88
00:06:16.140 --> 00:06:19.721
We're then gonna call it on 3,
three is gonna call it on its left child,

89
00:06:19.721 --> 00:06:21.190
then its right child.

90
00:06:21.190 --> 00:06:23.198
Both of those are no it's
gonna return back, so

91
00:06:23.198 --> 00:06:25.910
then we're gonna add 3 to the array,
right?

92
00:06:25.910 --> 00:06:27.690
This is gonna return up here.

93
00:06:27.690 --> 00:06:30.965
Then we're gonna call
postal retroversal on 10.

94
00:06:30.965 --> 00:06:32.320
We're gonna call it down here.

95
00:06:32.320 --> 00:06:34.750
It has no left child, has no right child.

96
00:06:34.750 --> 00:06:36.290
Then we're gonna add ten to the array.

97
00:06:36.290 --> 00:06:40.003
It's going to return up here and
then finally, on the root node,

98
00:06:40.003 --> 00:06:42.630
we will add eight to the array, right?

99
00:06:42.630 --> 00:06:47.450
So, then we end up with three,
10 eight in post order traversal.

